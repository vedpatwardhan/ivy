Search.setIndex({"docnames": ["array/activations", "array/activations/ArrayWithActivations", "array/array_methods", "array/array_methods/abs", "array/array_methods/acos", "array/array_methods/acosh", "array/array_methods/add", "array/array_methods/all", "array/array_methods/all_equal", "array/array_methods/any", "array/array_methods/argsort", "array/array_methods/asin", "array/array_methods/asinh", "array/array_methods/atan", "array/array_methods/atan2", "array/array_methods/atanh", "array/array_methods/binary_cross_entropy", "array/array_methods/bitwise_and", "array/array_methods/bitwise_invert", "array/array_methods/bitwise_left_shift", "array/array_methods/bitwise_or", "array/array_methods/bitwise_right_shift", "array/array_methods/bitwise_xor", "array/array_methods/can_cast", "array/array_methods/ceil", "array/array_methods/clip", "array/array_methods/concat", "array/array_methods/constant_pad", "array/array_methods/cos", "array/array_methods/cosh", "array/array_methods/cross_entropy", "array/array_methods/divide", "array/array_methods/einsum", "array/array_methods/equal", "array/array_methods/erf", "array/array_methods/exp", "array/array_methods/expand_dims", "array/array_methods/expm1", "array/array_methods/flip", "array/array_methods/floor", "array/array_methods/floor_divide", "array/array_methods/greater", "array/array_methods/greater_equal", "array/array_methods/isfinite", "array/array_methods/isinf", "array/array_methods/isnan", "array/array_methods/layer_norm", "array/array_methods/less", "array/array_methods/less_equal", "array/array_methods/log", "array/array_methods/log10", "array/array_methods/log1p", "array/array_methods/log2", "array/array_methods/logaddexp", "array/array_methods/logical_and", "array/array_methods/logical_not", "array/array_methods/logical_or", "array/array_methods/logical_xor", "array/array_methods/matmul", "array/array_methods/max", "array/array_methods/mean", "array/array_methods/min", "array/array_methods/multiply", "array/array_methods/negative", "array/array_methods/not_equal", "array/array_methods/permute_dims", "array/array_methods/positive", "array/array_methods/pow", "array/array_methods/prod", "array/array_methods/remainder", "array/array_methods/repeat", "array/array_methods/reshape", "array/array_methods/roll", "array/array_methods/round", "array/array_methods/sign", "array/array_methods/sin", "array/array_methods/sinh", "array/array_methods/sort", "array/array_methods/sparse_cross_entropy", "array/array_methods/sqrt", "array/array_methods/square", "array/array_methods/squeeze", "array/array_methods/stack", "array/array_methods/std", "array/array_methods/subtract", "array/array_methods/sum", "array/array_methods/swapaxes", "array/array_methods/tan", "array/array_methods/tanh", "array/array_methods/tile", "array/array_methods/trunc", "array/array_methods/var", "array/array_methods/zero_pad", "array/conversions", "array/conversions/args_to_ivy", "array/conversions/args_to_native", "array/conversions/to_ivy", "array/conversions/to_native", "array/creation", "array/creation/ArrayWithCreation", "array/data_types", "array/data_types/ArrayWithDataTypes", "array/device", "array/device/ArrayWithDevice", "array/elementwise", "array/elementwise/ArrayWithElementwise", "array/general", "array/general/ArrayWithGeneral", "array/gradients", "array/gradients/ArrayWithGradients", "array/image", "array/image/ArrayWithImage", "array/layers", "array/layers/ArrayWithLayers", "array/linear_algebra", "array/linear_algebra/ArrayWithLinearAlgebra", "array/losses", "array/losses/ArrayWithLosses", "array/manipulation", "array/manipulation/ArrayWithManipulation", "array/norms", "array/norms/ArrayWithNorms", "array/random", "array/random/ArrayWithRandom", "array/searching", "array/searching/ArrayWithSearching", "array/set", "array/set/ArrayWithSet", "array/sorting", "array/sorting/ArrayWithSorting", "array/statistical", "array/statistical/ArrayWithStatistical", "array/utility", "array/utility/ArrayWithUtility", "array/wrapping", "array/wrapping/add_ivy_array_instance_methods", "backend_handler", "backend_handler/ContextManager:\n    def __init__", "backend_handler/choose_random_backend", "backend_handler/clear_backend_stack", "backend_handler/current_backend", "backend_handler/get_backend", "backend_handler/set_backend", "backend_handler/try_import_ivy_jax", "backend_handler/try_import_ivy_mxnet", "backend_handler/try_import_ivy_numpy", "backend_handler/try_import_ivy_tf", "backend_handler/try_import_ivy_torch", "backend_handler/unset_backend", "background", "background/ml_explosion", "background/standardization", "background/why_unify", "container/activations", "container/activations/ContainerWithActivations", "container/base", "container/base/ContainerBase", "container/container", "container/container/Container", "container/container/MultiDevContainer", "container/container_methods", "container/container_methods/abs", "container/container_methods/acos", "container/container_methods/acosh", "container/container_methods/adam_update", "container/container_methods/add", "container/container_methods/all", "container/container_methods/all_equal", "container/container_methods/any", "container/container_methods/argsort", "container/container_methods/asin", "container/container_methods/asinh", "container/container_methods/at_dev", "container/container_methods/at_devs", "container/container_methods/atan", "container/container_methods/atan2", "container/container_methods/atanh", "container/container_methods/binary_cross_entropy", "container/container_methods/bitwise_and", "container/container_methods/bitwise_invert", "container/container_methods/bitwise_left_shift", "container/container_methods/bitwise_or", "container/container_methods/bitwise_right_shift", "container/container_methods/bitwise_xor", "container/container_methods/can_cast", "container/container_methods/ceil", "container/container_methods/clip", "container/container_methods/clip_vector_norm", "container/container_methods/concat", "container/container_methods/constant_pad", "container/container_methods/cos", "container/container_methods/cosh", "container/container_methods/cross_entropy", "container/container_methods/divide", "container/container_methods/einsum", "container/container_methods/equal", "container/container_methods/erf", "container/container_methods/exp", "container/container_methods/expand_dims", "container/container_methods/expm1", "container/container_methods/flip", "container/container_methods/floor", "container/container_methods/floor_divide", "container/container_methods/gradient_descent_update", "container/container_methods/greater", "container/container_methods/greater_equal", "container/container_methods/isfinite", "container/container_methods/isinf", "container/container_methods/isnan", "container/container_methods/lamb_update", "container/container_methods/lars_update", "container/container_methods/layer_norm", "container/container_methods/less", "container/container_methods/less_equal", "container/container_methods/log", "container/container_methods/log10", "container/container_methods/log1p", "container/container_methods/log2", "container/container_methods/logaddexp", "container/container_methods/logical_and", "container/container_methods/logical_not", "container/container_methods/logical_or", "container/container_methods/logical_xor", "container/container_methods/matmul", "container/container_methods/max", "container/container_methods/mean", "container/container_methods/min", "container/container_methods/multiply", "container/container_methods/negative", "container/container_methods/not_equal", "container/container_methods/optimizer_update", "container/container_methods/permute_dims", "container/container_methods/positive", "container/container_methods/pow", "container/container_methods/prod", "container/container_methods/random_uniform", "container/container_methods/remainder", "container/container_methods/repeat", "container/container_methods/reshape", "container/container_methods/roll", "container/container_methods/round", "container/container_methods/sign", "container/container_methods/sin", "container/container_methods/sinh", "container/container_methods/sort", "container/container_methods/sparse_cross_entropy", "container/container_methods/sqrt", "container/container_methods/square", "container/container_methods/squeeze", "container/container_methods/stack", "container/container_methods/static_adam_update", "container/container_methods/static_add", "container/container_methods/static_all_equal", "container/container_methods/static_argsort", "container/container_methods/static_binary_cross_entropy", "container/container_methods/static_can_cast", "container/container_methods/static_clip", "container/container_methods/static_cross_entropy", "container/container_methods/static_divide", "container/container_methods/static_gradient_descent_update", "container/container_methods/static_lamb_update", "container/container_methods/static_lars_update", "container/container_methods/static_multiply", "container/container_methods/static_optimizer_update", "container/container_methods/static_randint", "container/container_methods/static_random_uniform", "container/container_methods/static_roll", "container/container_methods/static_sort", "container/container_methods/static_sparse_cross_entropy", "container/container_methods/static_subtract", "container/container_methods/static_tan", "container/container_methods/std", "container/container_methods/subtract", "container/container_methods/sum", "container/container_methods/swapaxes", "container/container_methods/tan", "container/container_methods/tanh", "container/container_methods/tile", "container/container_methods/trunc", "container/container_methods/var", "container/container_methods/zero_pad", "container/creation", "container/creation/ContainerWithCreation", "container/data_types", "container/data_types/ContainerWithDataTypes", "container/device", "container/device/ContainerWithDevice", "container/elementwise", "container/elementwise/ContainerWithElementwise", "container/general", "container/general/ContainerWithGeneral", "container/gradients", "container/gradients/ContainerWithGradients", "container/image", "container/image/ContainerWithImage", "container/layers", "container/layers/ContainerWithLayers", "container/linear_algebra", "container/linear_algebra/ContainerWithLinearAlgebra", "container/losses", "container/losses/ContainerWithLosses", "container/manipulation", "container/manipulation/ContainerWithManipulation", "container/norms", "container/norms/ContainerWithNorms", "container/random", "container/random/ContainerWithRandom", "container/searching", "container/searching/ContainerWithSearching", "container/set", "container/set/ContainerWithSet", "container/sorting", "container/sorting/ContainerWithSorting", "container/statistical", "container/statistical/ContainerWithStatistical", "container/utility", "container/utility/ContainerWithUtility", "container/wrapping", "container/wrapping/add_ivy_container_instance_methods", "contributing", "contributing/0_setting_up", "contributing/1_the_basics", "contributing/4_open_tasks", "contributing/building_the_docs", "deep_dive", "deep_dive/0_navigating_the_code", "deep_dive/10_docstrings", "deep_dive/11_docstring_examples", "deep_dive/12_array_api_tests", "deep_dive/13_ivy_tests", "deep_dive/1_function_types", "deep_dive/2_backend_setting", "deep_dive/3_function_wrapping", "deep_dive/4_arrays", "deep_dive/5_containers", "deep_dive/6_data_types", "deep_dive/7_devices", "deep_dive/8_inplace_updates", "deep_dive/9_function_arguments", "design", "design/building_blocks", "design/ivy_as_a_framework", "design/ivy_as_a_framework/ivy_array", "design/ivy_as_a_framework/ivy_container", "design/ivy_as_a_framework/ivy_stateful_api", "design/ivy_as_a_transpiler", "docs/ivy", "docs/ivy_builder", "docs/ivy_ecosystem", "docs/ivy_gym", "docs/ivy_mech", "docs/ivy_memory", "docs/ivy_models", "docs/ivy_robot", "docs/ivy_vision", "extensions", "extensions/applied_libraries", "faq", "func_wrapper", "func_wrapper/handle_nestable", "func_wrapper/handle_out_argument", "func_wrapper/infer_device", "func_wrapper/infer_dtype", "func_wrapper/inputs_to_ivy_arrays", "func_wrapper/inputs_to_native_arrays", "func_wrapper/outputs_to_ivy_arrays", "func_wrapper/to_native_arrays_and_back", "functional/ivy", "functional/ivy/activations", "functional/ivy/activations/gelu", "functional/ivy/activations/leaky_relu", "functional/ivy/activations/relu", "functional/ivy/activations/sigmoid", "functional/ivy/activations/softmax", "functional/ivy/activations/softplus", "functional/ivy/activations/tanh", "functional/ivy/compilation", "functional/ivy/compilation/compile", "functional/ivy/constants", "functional/ivy/creation", "functional/ivy/creation/arange", "functional/ivy/creation/asarray", "functional/ivy/creation/empty", "functional/ivy/creation/empty_like", "functional/ivy/creation/eye", "functional/ivy/creation/from_dlpack", "functional/ivy/creation/full", "functional/ivy/creation/full_like", "functional/ivy/creation/linspace", "functional/ivy/creation/logspace", "functional/ivy/creation/meshgrid", "functional/ivy/creation/native_array", "functional/ivy/creation/ones", "functional/ivy/creation/ones_like", "functional/ivy/creation/tril", "functional/ivy/creation/triu", "functional/ivy/creation/zeros", "functional/ivy/creation/zeros_like", "functional/ivy/data_type", "functional/ivy/data_type/DefaultDtype:\n    \"\"\"\"\"\"\n\n    # noinspection PyShadowingNames\n    def __init__", "functional/ivy/data_type/DefaultFloatDtype:\n    \"\"\"\"\"\"\n\n    # noinspection PyShadowingNames\n    def __init__", "functional/ivy/data_type/DefaultIntDtype:\n    \"\"\"\"\"\"\n\n    # noinspection PyShadowingNames\n    def __init__", "functional/ivy/data_type/as_ivy_dtype", "functional/ivy/data_type/as_native_dtype", "functional/ivy/data_type/astype", "functional/ivy/data_type/broadcast_arrays", "functional/ivy/data_type/broadcast_to", "functional/ivy/data_type/can_cast", "functional/ivy/data_type/closest_valid_dtype", "functional/ivy/data_type/default_dtype", "functional/ivy/data_type/default_float_dtype", "functional/ivy/data_type/default_int_dtype", "functional/ivy/data_type/dtype", "functional/ivy/data_type/dtype_bits", "functional/ivy/data_type/finfo", "functional/ivy/data_type/function_supported_dtypes", "functional/ivy/data_type/function_unsupported_dtypes", "functional/ivy/data_type/iinfo", "functional/ivy/data_type/invalid_dtype", "functional/ivy/data_type/is_float_dtype", "functional/ivy/data_type/is_int_dtype", "functional/ivy/data_type/promote_types", "functional/ivy/data_type/result_type", "functional/ivy/data_type/set_default_dtype", "functional/ivy/data_type/set_default_float_dtype", "functional/ivy/data_type/set_default_int_dtype", "functional/ivy/data_type/type_promote_arrays", "functional/ivy/data_type/unset_default_dtype", "functional/ivy/data_type/unset_default_float_dtype", "functional/ivy/data_type/unset_default_int_dtype", "functional/ivy/data_type/valid_dtype", "functional/ivy/device", "functional/ivy/device/DefaultDevice:\n    \"\"\"\"\"\"\n\n    # noinspection PyShadowingNames\n    def __init__", "functional/ivy/device/DevClonedItem", "functional/ivy/device/DevClonedIter", "functional/ivy/device/DevClonedNest", "functional/ivy/device/DevDistItem", "functional/ivy/device/DevDistIter", "functional/ivy/device/DevDistNest", "functional/ivy/device/DevManager:\n    \"\"\"\"\"\"\n\n    def __init__", "functional/ivy/device/DevMapper", "functional/ivy/device/DevMapperMultiProc", "functional/ivy/device/MultiDev:\n    def __init__", "functional/ivy/device/MultiDevItem", "functional/ivy/device/MultiDevIter", "functional/ivy/device/MultiDevNest", "functional/ivy/device/Profiler", "functional/ivy/device/as_ivy_dev", "functional/ivy/device/as_native_dev", "functional/ivy/device/clear_mem_on_dev", "functional/ivy/device/default_device", "functional/ivy/device/dev", "functional/ivy/device/dev_clone", "functional/ivy/device/dev_clone_array", "functional/ivy/device/dev_clone_iter", "functional/ivy/device/dev_clone_nest", "functional/ivy/device/dev_dist", "functional/ivy/device/dev_dist_array", "functional/ivy/device/dev_dist_iter", "functional/ivy/device/dev_dist_nest", "functional/ivy/device/dev_unify", "functional/ivy/device/dev_unify_array", "functional/ivy/device/dev_unify_iter", "functional/ivy/device/dev_unify_nest", "functional/ivy/device/dev_util", "functional/ivy/device/get_all_ivy_arrays_on_dev", "functional/ivy/device/gpu_is_available", "functional/ivy/device/num_cpu_cores", "functional/ivy/device/num_gpus", "functional/ivy/device/num_ivy_arrays_on_dev", "functional/ivy/device/percent_used_mem_on_dev", "functional/ivy/device/print_all_ivy_arrays_on_dev", "functional/ivy/device/set_default_device", "functional/ivy/device/set_split_factor", "functional/ivy/device/split_factor", "functional/ivy/device/split_func_call", "functional/ivy/device/to_device", "functional/ivy/device/total_mem_on_dev", "functional/ivy/device/tpu_is_available", "functional/ivy/device/unset_default_device", "functional/ivy/device/used_mem_on_dev", "functional/ivy/elementwise", "functional/ivy/elementwise/abs", "functional/ivy/elementwise/acos", "functional/ivy/elementwise/acosh", "functional/ivy/elementwise/add", "functional/ivy/elementwise/asin", "functional/ivy/elementwise/asin/asin_array", "functional/ivy/elementwise/asin/asin_functional", "functional/ivy/elementwise/asinh", "functional/ivy/elementwise/atan", "functional/ivy/elementwise/atan2", "functional/ivy/elementwise/atanh", "functional/ivy/elementwise/bitwise_and", "functional/ivy/elementwise/bitwise_invert", "functional/ivy/elementwise/bitwise_left_shift", "functional/ivy/elementwise/bitwise_left_shift/bitwise_left_shift_array", "functional/ivy/elementwise/bitwise_left_shift/bitwise_left_shift_functional", "functional/ivy/elementwise/bitwise_or", "functional/ivy/elementwise/bitwise_or/bitwise_or_array", "functional/ivy/elementwise/bitwise_or/bitwise_or_functional", "functional/ivy/elementwise/bitwise_right_shift", "functional/ivy/elementwise/bitwise_xor", "functional/ivy/elementwise/bitwise_xor/bitwise_xor_array", "functional/ivy/elementwise/bitwise_xor/bitwise_xor_functional", "functional/ivy/elementwise/ceil", "functional/ivy/elementwise/cos", "functional/ivy/elementwise/cosh", "functional/ivy/elementwise/divide", "functional/ivy/elementwise/equal", "functional/ivy/elementwise/erf", "functional/ivy/elementwise/erf/erf_array", "functional/ivy/elementwise/erf/erf_container", "functional/ivy/elementwise/erf/erf_functional", "functional/ivy/elementwise/exp", "functional/ivy/elementwise/expm1", "functional/ivy/elementwise/floor", "functional/ivy/elementwise/floor_divide", "functional/ivy/elementwise/greater", "functional/ivy/elementwise/greater_equal", "functional/ivy/elementwise/isfinite", "functional/ivy/elementwise/isinf", "functional/ivy/elementwise/isnan", "functional/ivy/elementwise/less", "functional/ivy/elementwise/less_equal", "functional/ivy/elementwise/log", "functional/ivy/elementwise/log/log_array", "functional/ivy/elementwise/log/log_functional", "functional/ivy/elementwise/log10", "functional/ivy/elementwise/log1p", "functional/ivy/elementwise/log2", "functional/ivy/elementwise/log2/log2_array", "functional/ivy/elementwise/log2/log2_functional", "functional/ivy/elementwise/logaddexp", "functional/ivy/elementwise/logical_and", "functional/ivy/elementwise/logical_not", "functional/ivy/elementwise/logical_or", "functional/ivy/elementwise/logical_or/logical_or_array", "functional/ivy/elementwise/logical_or/logical_or_functional", "functional/ivy/elementwise/logical_xor", "functional/ivy/elementwise/maximum", "functional/ivy/elementwise/minimum", "functional/ivy/elementwise/multiply", "functional/ivy/elementwise/negative", "functional/ivy/elementwise/not_equal", "functional/ivy/elementwise/positive", "functional/ivy/elementwise/pow", "functional/ivy/elementwise/remainder", "functional/ivy/elementwise/round", "functional/ivy/elementwise/sign", "functional/ivy/elementwise/sin", "functional/ivy/elementwise/sin/sin_array", "functional/ivy/elementwise/sin/sin_container", "functional/ivy/elementwise/sin/sin_functional", "functional/ivy/elementwise/sinh", "functional/ivy/elementwise/sqrt", "functional/ivy/elementwise/square", "functional/ivy/elementwise/square/square_array", "functional/ivy/elementwise/square/square_functional", "functional/ivy/elementwise/subtract", "functional/ivy/elementwise/tan", "functional/ivy/elementwise/tanh", "functional/ivy/elementwise/trunc", "functional/ivy/general", "functional/ivy/general/all_equal", "functional/ivy/general/arg_info", "functional/ivy/general/arg_names", "functional/ivy/general/array_equal", "functional/ivy/general/arrays_equal", "functional/ivy/general/assert_supports_inplace", "functional/ivy/general/cache_fn", "functional/ivy/general/clip_matrix_norm", "functional/ivy/general/clip_vector_norm", "functional/ivy/general/container_types", "functional/ivy/general/copy_array", "functional/ivy/general/cumprod", "functional/ivy/general/cumsum", "functional/ivy/general/current_backend_str", "functional/ivy/general/default", "functional/ivy/general/einops_rearrange", "functional/ivy/general/einops_reduce", "functional/ivy/general/einops_repeat", "functional/ivy/general/exists", "functional/ivy/general/floormod", "functional/ivy/general/fourier_encode", "functional/ivy/general/gather", "functional/ivy/general/gather_nd", "functional/ivy/general/get_all_arrays_in_memory", "functional/ivy/general/get_min_base", "functional/ivy/general/get_min_denominator", "functional/ivy/general/get_num_dims", "functional/ivy/general/get_referrers_recursive", "functional/ivy/general/has_nans", "functional/ivy/general/indices_where", "functional/ivy/general/inplace_arrays_supported", "functional/ivy/general/inplace_decrement", "functional/ivy/general/inplace_increment", "functional/ivy/general/inplace_update", "functional/ivy/general/inplace_variables_supported", "functional/ivy/general/is_array", "functional/ivy/general/is_ivy_array", "functional/ivy/general/is_ivy_container", "functional/ivy/general/is_native_array", "functional/ivy/general/match_kwargs", "functional/ivy/general/multiprocessing", "functional/ivy/general/num_arrays_in_memory", "functional/ivy/general/one_hot", "functional/ivy/general/print_all_arrays_in_memory", "functional/ivy/general/queue_timeout", "functional/ivy/general/scatter_flat", "functional/ivy/general/scatter_nd", "functional/ivy/general/set_min_base", "functional/ivy/general/set_min_denominator", "functional/ivy/general/set_queue_timeout", "functional/ivy/general/set_tmp_dir", "functional/ivy/general/shape", "functional/ivy/general/shape_to_tuple", "functional/ivy/general/stable_divide", "functional/ivy/general/stable_pow", "functional/ivy/general/supports_inplace", "functional/ivy/general/tmp_dir", "functional/ivy/general/to_list", "functional/ivy/general/to_numpy", "functional/ivy/general/to_scalar", "functional/ivy/general/try_else_none", "functional/ivy/general/unstack", "functional/ivy/general/value_is_nan", "functional/ivy/gradients", "functional/ivy/gradients/GradientTracking:\n    \"\"\"\"\"\"\n\n    # noinspection PyShadowingNames\n    def __init__", "functional/ivy/gradients/adam_step", "functional/ivy/gradients/adam_update", "functional/ivy/gradients/execute_with_gradients", "functional/ivy/gradients/gradient_descent_update", "functional/ivy/gradients/is_variable", "functional/ivy/gradients/lamb_update", "functional/ivy/gradients/lars_update", "functional/ivy/gradients/optimizer_update", "functional/ivy/gradients/set_with_grads", "functional/ivy/gradients/stop_gradient", "functional/ivy/gradients/unset_with_grads", "functional/ivy/gradients/variable", "functional/ivy/gradients/variable_data", "functional/ivy/gradients/with_grads", "functional/ivy/layers", "functional/ivy/layers/conv1d", "functional/ivy/layers/conv1d_transpose", "functional/ivy/layers/conv2d", "functional/ivy/layers/conv2d_transpose", "functional/ivy/layers/conv3d", "functional/ivy/layers/conv3d_transpose", "functional/ivy/layers/depthwise_conv2d", "functional/ivy/layers/dropout", "functional/ivy/layers/linear", "functional/ivy/layers/lstm_update", "functional/ivy/layers/multi_head_attention", "functional/ivy/layers/scaled_dot_product_attention", "functional/ivy/linear_algebra", "functional/ivy/linear_algebra/cholesky", "functional/ivy/linear_algebra/cross", "functional/ivy/linear_algebra/det", "functional/ivy/linear_algebra/diagonal", "functional/ivy/linear_algebra/eigh", "functional/ivy/linear_algebra/eigvalsh", "functional/ivy/linear_algebra/inv", "functional/ivy/linear_algebra/matmul", "functional/ivy/linear_algebra/matrix_norm", "functional/ivy/linear_algebra/matrix_power", "functional/ivy/linear_algebra/matrix_rank", "functional/ivy/linear_algebra/matrix_transpose", "functional/ivy/linear_algebra/outer", "functional/ivy/linear_algebra/pinv", "functional/ivy/linear_algebra/qr", "functional/ivy/linear_algebra/slogdet", "functional/ivy/linear_algebra/solve", "functional/ivy/linear_algebra/svd", "functional/ivy/linear_algebra/svdvals", "functional/ivy/linear_algebra/tensordot", "functional/ivy/linear_algebra/trace", "functional/ivy/linear_algebra/vecdot", "functional/ivy/linear_algebra/vector_norm", "functional/ivy/linear_algebra/vector_to_skew_symmetric_matrix", "functional/ivy/losses", "functional/ivy/losses/binary_cross_entropy", "functional/ivy/losses/cross_entropy", "functional/ivy/losses/cross_entropy/cross_entropy_array", "functional/ivy/losses/cross_entropy/cross_entropy_functional", "functional/ivy/losses/sparse_cross_entropy", "functional/ivy/manipulation", "functional/ivy/manipulation/clip", "functional/ivy/manipulation/clip/clip_functional", "functional/ivy/manipulation/clip/static_clip_container", "functional/ivy/manipulation/concat", "functional/ivy/manipulation/concat/concat_array", "functional/ivy/manipulation/concat/concat_functional", "functional/ivy/manipulation/constant_pad", "functional/ivy/manipulation/expand_dims", "functional/ivy/manipulation/flip", "functional/ivy/manipulation/permute_dims", "functional/ivy/manipulation/repeat", "functional/ivy/manipulation/reshape", "functional/ivy/manipulation/reshape/reshape_array", "functional/ivy/manipulation/reshape/reshape_functional", "functional/ivy/manipulation/roll", "functional/ivy/manipulation/split", "functional/ivy/manipulation/squeeze", "functional/ivy/manipulation/stack", "functional/ivy/manipulation/swapaxes", "functional/ivy/manipulation/tile", "functional/ivy/manipulation/zero_pad", "functional/ivy/meta", "functional/ivy/meta/fomaml_step", "functional/ivy/meta/maml_step", "functional/ivy/meta/reptile_step", "functional/ivy/nest", "functional/ivy/nest/all_nested_indices", "functional/ivy/nest/copy_nest", "functional/ivy/nest/index_nest", "functional/ivy/nest/insert_into_nest_at_index", "functional/ivy/nest/insert_into_nest_at_indices", "functional/ivy/nest/map", "functional/ivy/nest/map_nest_at_index", "functional/ivy/nest/map_nest_at_indices", "functional/ivy/nest/multi_index_nest", "functional/ivy/nest/nested_any", "functional/ivy/nest/nested_indices_where", "functional/ivy/nest/nested_map", "functional/ivy/nest/nested_multi_map", "functional/ivy/nest/prune_nest_at_index", "functional/ivy/nest/prune_nest_at_indices", "functional/ivy/nest/set_nest_at_index", "functional/ivy/nest/set_nest_at_indices", "functional/ivy/norms", "functional/ivy/norms/layer_norm", "functional/ivy/random", "functional/ivy/random/multinomial", "functional/ivy/random/randint", "functional/ivy/random/random_normal", "functional/ivy/random/random_uniform", "functional/ivy/random/seed", "functional/ivy/random/shuffle", "functional/ivy/searching", "functional/ivy/searching/argmax", "functional/ivy/searching/argmin", "functional/ivy/searching/nonzero", "functional/ivy/searching/where", "functional/ivy/set", "functional/ivy/set/unique_all", "functional/ivy/set/unique_counts", "functional/ivy/set/unique_inverse", "functional/ivy/set/unique_values", "functional/ivy/sorting", "functional/ivy/sorting/argsort", "functional/ivy/sorting/sort", "functional/ivy/statistical", "functional/ivy/statistical/einsum", "functional/ivy/statistical/max", "functional/ivy/statistical/mean", "functional/ivy/statistical/min", "functional/ivy/statistical/prod", "functional/ivy/statistical/std", "functional/ivy/statistical/sum", "functional/ivy/statistical/var", "functional/ivy/utility", "functional/ivy/utility/all", "functional/ivy/utility/all/all_array", "functional/ivy/utility/all/all_functional", "functional/ivy/utility/any", "index", "index_append", "index_prepend", "inspection", "inspection/add_array_specs", "inspection/fn_array_spec", "roadmap", "stateful/activations", "stateful/activations/GEGLU", "stateful/activations/GELU", "stateful/converters", "stateful/converters/to_ivy_module", "stateful/initializers", "stateful/initializers/Constant:\n    def __init__", "stateful/initializers/FirstLayerSiren", "stateful/initializers/GlorotUniform", "stateful/initializers/KaimingNormal:\n    def __init__", "stateful/initializers/Ones", "stateful/initializers/Siren", "stateful/initializers/Uniform:\n    def __init__", "stateful/initializers/Zeros", "stateful/layers", "stateful/layers/Conv1D", "stateful/layers/Conv1DTranspose", "stateful/layers/Conv2D", "stateful/layers/Conv2DTranspose", "stateful/layers/Conv3D", "stateful/layers/Conv3DTranspose", "stateful/layers/DepthwiseConv2D", "stateful/layers/Dropout", "stateful/layers/LSTM", "stateful/layers/Linear", "stateful/layers/MultiHeadAttention", "stateful/module", "stateful/module/Module", "stateful/norms", "stateful/norms/LayerNorm", "stateful/optimizers", "stateful/optimizers/Adam", "stateful/optimizers/LAMB", "stateful/optimizers/LARS", "stateful/optimizers/Optimizer", "stateful/optimizers/SGD", "stateful/sequential", "stateful/sequential/Sequential", "supported_frameworks", "verbosity", "verbosity/cprint"], "filenames": ["array/activations.rst", "array/activations/ArrayWithActivations.rst", "array/array_methods.rst", "array/array_methods/abs.rst", "array/array_methods/acos.rst", "array/array_methods/acosh.rst", "array/array_methods/add.rst", "array/array_methods/all.rst", "array/array_methods/all_equal.rst", "array/array_methods/any.rst", "array/array_methods/argsort.rst", "array/array_methods/asin.rst", "array/array_methods/asinh.rst", "array/array_methods/atan.rst", "array/array_methods/atan2.rst", "array/array_methods/atanh.rst", "array/array_methods/binary_cross_entropy.rst", "array/array_methods/bitwise_and.rst", "array/array_methods/bitwise_invert.rst", "array/array_methods/bitwise_left_shift.rst", "array/array_methods/bitwise_or.rst", "array/array_methods/bitwise_right_shift.rst", "array/array_methods/bitwise_xor.rst", "array/array_methods/can_cast.rst", "array/array_methods/ceil.rst", "array/array_methods/clip.rst", "array/array_methods/concat.rst", "array/array_methods/constant_pad.rst", "array/array_methods/cos.rst", "array/array_methods/cosh.rst", "array/array_methods/cross_entropy.rst", "array/array_methods/divide.rst", "array/array_methods/einsum.rst", "array/array_methods/equal.rst", "array/array_methods/erf.rst", "array/array_methods/exp.rst", "array/array_methods/expand_dims.rst", "array/array_methods/expm1.rst", "array/array_methods/flip.rst", "array/array_methods/floor.rst", "array/array_methods/floor_divide.rst", "array/array_methods/greater.rst", "array/array_methods/greater_equal.rst", "array/array_methods/isfinite.rst", "array/array_methods/isinf.rst", "array/array_methods/isnan.rst", "array/array_methods/layer_norm.rst", "array/array_methods/less.rst", "array/array_methods/less_equal.rst", "array/array_methods/log.rst", "array/array_methods/log10.rst", "array/array_methods/log1p.rst", "array/array_methods/log2.rst", "array/array_methods/logaddexp.rst", "array/array_methods/logical_and.rst", "array/array_methods/logical_not.rst", "array/array_methods/logical_or.rst", "array/array_methods/logical_xor.rst", "array/array_methods/matmul.rst", "array/array_methods/max.rst", "array/array_methods/mean.rst", "array/array_methods/min.rst", "array/array_methods/multiply.rst", "array/array_methods/negative.rst", "array/array_methods/not_equal.rst", "array/array_methods/permute_dims.rst", "array/array_methods/positive.rst", "array/array_methods/pow.rst", "array/array_methods/prod.rst", "array/array_methods/remainder.rst", "array/array_methods/repeat.rst", "array/array_methods/reshape.rst", "array/array_methods/roll.rst", "array/array_methods/round.rst", "array/array_methods/sign.rst", "array/array_methods/sin.rst", "array/array_methods/sinh.rst", "array/array_methods/sort.rst", "array/array_methods/sparse_cross_entropy.rst", "array/array_methods/sqrt.rst", "array/array_methods/square.rst", "array/array_methods/squeeze.rst", "array/array_methods/stack.rst", "array/array_methods/std.rst", "array/array_methods/subtract.rst", "array/array_methods/sum.rst", "array/array_methods/swapaxes.rst", "array/array_methods/tan.rst", "array/array_methods/tanh.rst", "array/array_methods/tile.rst", "array/array_methods/trunc.rst", "array/array_methods/var.rst", "array/array_methods/zero_pad.rst", "array/conversions.rst", "array/conversions/args_to_ivy.rst", "array/conversions/args_to_native.rst", "array/conversions/to_ivy.rst", "array/conversions/to_native.rst", "array/creation.rst", "array/creation/ArrayWithCreation.rst", "array/data_types.rst", "array/data_types/ArrayWithDataTypes.rst", "array/device.rst", "array/device/ArrayWithDevice.rst", "array/elementwise.rst", "array/elementwise/ArrayWithElementwise.rst", "array/general.rst", "array/general/ArrayWithGeneral.rst", "array/gradients.rst", "array/gradients/ArrayWithGradients.rst", "array/image.rst", "array/image/ArrayWithImage.rst", "array/layers.rst", "array/layers/ArrayWithLayers.rst", "array/linear_algebra.rst", "array/linear_algebra/ArrayWithLinearAlgebra.rst", "array/losses.rst", "array/losses/ArrayWithLosses.rst", "array/manipulation.rst", "array/manipulation/ArrayWithManipulation.rst", "array/norms.rst", "array/norms/ArrayWithNorms.rst", "array/random.rst", "array/random/ArrayWithRandom.rst", "array/searching.rst", "array/searching/ArrayWithSearching.rst", "array/set.rst", "array/set/ArrayWithSet.rst", "array/sorting.rst", "array/sorting/ArrayWithSorting.rst", "array/statistical.rst", "array/statistical/ArrayWithStatistical.rst", "array/utility.rst", "array/utility/ArrayWithUtility.rst", "array/wrapping.rst", "array/wrapping/add_ivy_array_instance_methods.rst", "backend_handler.rst", "backend_handler/ContextManager:\n    def __init__.rst", "backend_handler/choose_random_backend.rst", "backend_handler/clear_backend_stack.rst", "backend_handler/current_backend.rst", "backend_handler/get_backend.rst", "backend_handler/set_backend.rst", "backend_handler/try_import_ivy_jax.rst", "backend_handler/try_import_ivy_mxnet.rst", "backend_handler/try_import_ivy_numpy.rst", "backend_handler/try_import_ivy_tf.rst", "backend_handler/try_import_ivy_torch.rst", "backend_handler/unset_backend.rst", "background.rst", "background/ml_explosion.rst", "background/standardization.rst", "background/why_unify.rst", "container/activations.rst", "container/activations/ContainerWithActivations.rst", "container/base.rst", "container/base/ContainerBase.rst", "container/container.rst", "container/container/Container.rst", "container/container/MultiDevContainer.rst", "container/container_methods.rst", "container/container_methods/abs.rst", "container/container_methods/acos.rst", "container/container_methods/acosh.rst", "container/container_methods/adam_update.rst", "container/container_methods/add.rst", "container/container_methods/all.rst", "container/container_methods/all_equal.rst", "container/container_methods/any.rst", "container/container_methods/argsort.rst", "container/container_methods/asin.rst", "container/container_methods/asinh.rst", "container/container_methods/at_dev.rst", "container/container_methods/at_devs.rst", "container/container_methods/atan.rst", "container/container_methods/atan2.rst", "container/container_methods/atanh.rst", "container/container_methods/binary_cross_entropy.rst", "container/container_methods/bitwise_and.rst", "container/container_methods/bitwise_invert.rst", "container/container_methods/bitwise_left_shift.rst", "container/container_methods/bitwise_or.rst", "container/container_methods/bitwise_right_shift.rst", "container/container_methods/bitwise_xor.rst", "container/container_methods/can_cast.rst", "container/container_methods/ceil.rst", "container/container_methods/clip.rst", "container/container_methods/clip_vector_norm.rst", "container/container_methods/concat.rst", "container/container_methods/constant_pad.rst", "container/container_methods/cos.rst", "container/container_methods/cosh.rst", "container/container_methods/cross_entropy.rst", "container/container_methods/divide.rst", "container/container_methods/einsum.rst", "container/container_methods/equal.rst", "container/container_methods/erf.rst", "container/container_methods/exp.rst", "container/container_methods/expand_dims.rst", "container/container_methods/expm1.rst", "container/container_methods/flip.rst", "container/container_methods/floor.rst", "container/container_methods/floor_divide.rst", "container/container_methods/gradient_descent_update.rst", "container/container_methods/greater.rst", "container/container_methods/greater_equal.rst", "container/container_methods/isfinite.rst", "container/container_methods/isinf.rst", "container/container_methods/isnan.rst", "container/container_methods/lamb_update.rst", "container/container_methods/lars_update.rst", "container/container_methods/layer_norm.rst", "container/container_methods/less.rst", "container/container_methods/less_equal.rst", "container/container_methods/log.rst", "container/container_methods/log10.rst", "container/container_methods/log1p.rst", "container/container_methods/log2.rst", "container/container_methods/logaddexp.rst", "container/container_methods/logical_and.rst", "container/container_methods/logical_not.rst", "container/container_methods/logical_or.rst", "container/container_methods/logical_xor.rst", "container/container_methods/matmul.rst", "container/container_methods/max.rst", "container/container_methods/mean.rst", "container/container_methods/min.rst", "container/container_methods/multiply.rst", "container/container_methods/negative.rst", "container/container_methods/not_equal.rst", "container/container_methods/optimizer_update.rst", "container/container_methods/permute_dims.rst", "container/container_methods/positive.rst", "container/container_methods/pow.rst", "container/container_methods/prod.rst", "container/container_methods/random_uniform.rst", "container/container_methods/remainder.rst", "container/container_methods/repeat.rst", "container/container_methods/reshape.rst", "container/container_methods/roll.rst", "container/container_methods/round.rst", "container/container_methods/sign.rst", "container/container_methods/sin.rst", "container/container_methods/sinh.rst", "container/container_methods/sort.rst", "container/container_methods/sparse_cross_entropy.rst", "container/container_methods/sqrt.rst", "container/container_methods/square.rst", "container/container_methods/squeeze.rst", "container/container_methods/stack.rst", "container/container_methods/static_adam_update.rst", "container/container_methods/static_add.rst", "container/container_methods/static_all_equal.rst", "container/container_methods/static_argsort.rst", "container/container_methods/static_binary_cross_entropy.rst", "container/container_methods/static_can_cast.rst", "container/container_methods/static_clip.rst", "container/container_methods/static_cross_entropy.rst", "container/container_methods/static_divide.rst", "container/container_methods/static_gradient_descent_update.rst", "container/container_methods/static_lamb_update.rst", "container/container_methods/static_lars_update.rst", "container/container_methods/static_multiply.rst", "container/container_methods/static_optimizer_update.rst", "container/container_methods/static_randint.rst", "container/container_methods/static_random_uniform.rst", "container/container_methods/static_roll.rst", "container/container_methods/static_sort.rst", "container/container_methods/static_sparse_cross_entropy.rst", "container/container_methods/static_subtract.rst", "container/container_methods/static_tan.rst", "container/container_methods/std.rst", "container/container_methods/subtract.rst", "container/container_methods/sum.rst", "container/container_methods/swapaxes.rst", "container/container_methods/tan.rst", "container/container_methods/tanh.rst", "container/container_methods/tile.rst", "container/container_methods/trunc.rst", "container/container_methods/var.rst", "container/container_methods/zero_pad.rst", "container/creation.rst", "container/creation/ContainerWithCreation.rst", "container/data_types.rst", "container/data_types/ContainerWithDataTypes.rst", "container/device.rst", "container/device/ContainerWithDevice.rst", "container/elementwise.rst", "container/elementwise/ContainerWithElementwise.rst", "container/general.rst", "container/general/ContainerWithGeneral.rst", "container/gradients.rst", "container/gradients/ContainerWithGradients.rst", "container/image.rst", "container/image/ContainerWithImage.rst", "container/layers.rst", "container/layers/ContainerWithLayers.rst", "container/linear_algebra.rst", "container/linear_algebra/ContainerWithLinearAlgebra.rst", "container/losses.rst", "container/losses/ContainerWithLosses.rst", "container/manipulation.rst", "container/manipulation/ContainerWithManipulation.rst", "container/norms.rst", "container/norms/ContainerWithNorms.rst", "container/random.rst", "container/random/ContainerWithRandom.rst", "container/searching.rst", "container/searching/ContainerWithSearching.rst", "container/set.rst", "container/set/ContainerWithSet.rst", "container/sorting.rst", "container/sorting/ContainerWithSorting.rst", "container/statistical.rst", "container/statistical/ContainerWithStatistical.rst", "container/utility.rst", "container/utility/ContainerWithUtility.rst", "container/wrapping.rst", "container/wrapping/add_ivy_container_instance_methods.rst", "contributing.rst", "contributing/0_setting_up.rst", "contributing/1_the_basics.rst", "contributing/4_open_tasks.rst", "contributing/building_the_docs.rst", "deep_dive.rst", "deep_dive/0_navigating_the_code.rst", "deep_dive/10_docstrings.rst", "deep_dive/11_docstring_examples.rst", "deep_dive/12_array_api_tests.rst", "deep_dive/13_ivy_tests.rst", "deep_dive/1_function_types.rst", "deep_dive/2_backend_setting.rst", "deep_dive/3_function_wrapping.rst", "deep_dive/4_arrays.rst", "deep_dive/5_containers.rst", "deep_dive/6_data_types.rst", "deep_dive/7_devices.rst", "deep_dive/8_inplace_updates.rst", "deep_dive/9_function_arguments.rst", "design.rst", "design/building_blocks.rst", "design/ivy_as_a_framework.rst", "design/ivy_as_a_framework/ivy_array.rst", "design/ivy_as_a_framework/ivy_container.rst", "design/ivy_as_a_framework/ivy_stateful_api.rst", "design/ivy_as_a_transpiler.rst", "docs/ivy.rst", "docs/ivy_builder.rst", "docs/ivy_ecosystem.rst", "docs/ivy_gym.rst", "docs/ivy_mech.rst", "docs/ivy_memory.rst", "docs/ivy_models.rst", "docs/ivy_robot.rst", "docs/ivy_vision.rst", "extensions.rst", "extensions/applied_libraries.rst", "faq.rst", "func_wrapper.rst", "func_wrapper/handle_nestable.rst", "func_wrapper/handle_out_argument.rst", "func_wrapper/infer_device.rst", "func_wrapper/infer_dtype.rst", "func_wrapper/inputs_to_ivy_arrays.rst", "func_wrapper/inputs_to_native_arrays.rst", "func_wrapper/outputs_to_ivy_arrays.rst", "func_wrapper/to_native_arrays_and_back.rst", "functional/ivy.rst", "functional/ivy/activations.rst", "functional/ivy/activations/gelu.rst", "functional/ivy/activations/leaky_relu.rst", "functional/ivy/activations/relu.rst", "functional/ivy/activations/sigmoid.rst", "functional/ivy/activations/softmax.rst", "functional/ivy/activations/softplus.rst", "functional/ivy/activations/tanh.rst", "functional/ivy/compilation.rst", "functional/ivy/compilation/compile.rst", "functional/ivy/constants.rst", "functional/ivy/creation.rst", "functional/ivy/creation/arange.rst", "functional/ivy/creation/asarray.rst", "functional/ivy/creation/empty.rst", "functional/ivy/creation/empty_like.rst", "functional/ivy/creation/eye.rst", "functional/ivy/creation/from_dlpack.rst", "functional/ivy/creation/full.rst", "functional/ivy/creation/full_like.rst", "functional/ivy/creation/linspace.rst", "functional/ivy/creation/logspace.rst", "functional/ivy/creation/meshgrid.rst", "functional/ivy/creation/native_array.rst", "functional/ivy/creation/ones.rst", "functional/ivy/creation/ones_like.rst", "functional/ivy/creation/tril.rst", "functional/ivy/creation/triu.rst", "functional/ivy/creation/zeros.rst", "functional/ivy/creation/zeros_like.rst", "functional/ivy/data_type.rst", "functional/ivy/data_type/DefaultDtype:\n    \"\"\"\"\"\"\n\n    # noinspection PyShadowingNames\n    def __init__.rst", "functional/ivy/data_type/DefaultFloatDtype:\n    \"\"\"\"\"\"\n\n    # noinspection PyShadowingNames\n    def __init__.rst", "functional/ivy/data_type/DefaultIntDtype:\n    \"\"\"\"\"\"\n\n    # noinspection PyShadowingNames\n    def __init__.rst", "functional/ivy/data_type/as_ivy_dtype.rst", "functional/ivy/data_type/as_native_dtype.rst", "functional/ivy/data_type/astype.rst", "functional/ivy/data_type/broadcast_arrays.rst", "functional/ivy/data_type/broadcast_to.rst", "functional/ivy/data_type/can_cast.rst", "functional/ivy/data_type/closest_valid_dtype.rst", "functional/ivy/data_type/default_dtype.rst", "functional/ivy/data_type/default_float_dtype.rst", "functional/ivy/data_type/default_int_dtype.rst", "functional/ivy/data_type/dtype.rst", "functional/ivy/data_type/dtype_bits.rst", "functional/ivy/data_type/finfo.rst", "functional/ivy/data_type/function_supported_dtypes.rst", "functional/ivy/data_type/function_unsupported_dtypes.rst", "functional/ivy/data_type/iinfo.rst", "functional/ivy/data_type/invalid_dtype.rst", "functional/ivy/data_type/is_float_dtype.rst", "functional/ivy/data_type/is_int_dtype.rst", "functional/ivy/data_type/promote_types.rst", "functional/ivy/data_type/result_type.rst", "functional/ivy/data_type/set_default_dtype.rst", "functional/ivy/data_type/set_default_float_dtype.rst", "functional/ivy/data_type/set_default_int_dtype.rst", "functional/ivy/data_type/type_promote_arrays.rst", "functional/ivy/data_type/unset_default_dtype.rst", "functional/ivy/data_type/unset_default_float_dtype.rst", "functional/ivy/data_type/unset_default_int_dtype.rst", "functional/ivy/data_type/valid_dtype.rst", "functional/ivy/device.rst", "functional/ivy/device/DefaultDevice:\n    \"\"\"\"\"\"\n\n    # noinspection PyShadowingNames\n    def __init__.rst", "functional/ivy/device/DevClonedItem.rst", "functional/ivy/device/DevClonedIter.rst", "functional/ivy/device/DevClonedNest.rst", "functional/ivy/device/DevDistItem.rst", "functional/ivy/device/DevDistIter.rst", "functional/ivy/device/DevDistNest.rst", "functional/ivy/device/DevManager:\n    \"\"\"\"\"\"\n\n    def __init__.rst", "functional/ivy/device/DevMapper.rst", "functional/ivy/device/DevMapperMultiProc.rst", "functional/ivy/device/MultiDev:\n    def __init__.rst", "functional/ivy/device/MultiDevItem.rst", "functional/ivy/device/MultiDevIter.rst", "functional/ivy/device/MultiDevNest.rst", "functional/ivy/device/Profiler.rst", "functional/ivy/device/as_ivy_dev.rst", "functional/ivy/device/as_native_dev.rst", "functional/ivy/device/clear_mem_on_dev.rst", "functional/ivy/device/default_device.rst", "functional/ivy/device/dev.rst", "functional/ivy/device/dev_clone.rst", "functional/ivy/device/dev_clone_array.rst", "functional/ivy/device/dev_clone_iter.rst", "functional/ivy/device/dev_clone_nest.rst", "functional/ivy/device/dev_dist.rst", "functional/ivy/device/dev_dist_array.rst", "functional/ivy/device/dev_dist_iter.rst", "functional/ivy/device/dev_dist_nest.rst", "functional/ivy/device/dev_unify.rst", "functional/ivy/device/dev_unify_array.rst", "functional/ivy/device/dev_unify_iter.rst", "functional/ivy/device/dev_unify_nest.rst", "functional/ivy/device/dev_util.rst", "functional/ivy/device/get_all_ivy_arrays_on_dev.rst", "functional/ivy/device/gpu_is_available.rst", "functional/ivy/device/num_cpu_cores.rst", "functional/ivy/device/num_gpus.rst", "functional/ivy/device/num_ivy_arrays_on_dev.rst", "functional/ivy/device/percent_used_mem_on_dev.rst", "functional/ivy/device/print_all_ivy_arrays_on_dev.rst", "functional/ivy/device/set_default_device.rst", "functional/ivy/device/set_split_factor.rst", "functional/ivy/device/split_factor.rst", "functional/ivy/device/split_func_call.rst", "functional/ivy/device/to_device.rst", "functional/ivy/device/total_mem_on_dev.rst", "functional/ivy/device/tpu_is_available.rst", "functional/ivy/device/unset_default_device.rst", "functional/ivy/device/used_mem_on_dev.rst", "functional/ivy/elementwise.rst", "functional/ivy/elementwise/abs.rst", "functional/ivy/elementwise/acos.rst", "functional/ivy/elementwise/acosh.rst", "functional/ivy/elementwise/add.rst", "functional/ivy/elementwise/asin.rst", "functional/ivy/elementwise/asin/asin_array.rst", "functional/ivy/elementwise/asin/asin_functional.rst", "functional/ivy/elementwise/asinh.rst", "functional/ivy/elementwise/atan.rst", "functional/ivy/elementwise/atan2.rst", "functional/ivy/elementwise/atanh.rst", "functional/ivy/elementwise/bitwise_and.rst", "functional/ivy/elementwise/bitwise_invert.rst", "functional/ivy/elementwise/bitwise_left_shift.rst", "functional/ivy/elementwise/bitwise_left_shift/bitwise_left_shift_array.rst", "functional/ivy/elementwise/bitwise_left_shift/bitwise_left_shift_functional.rst", "functional/ivy/elementwise/bitwise_or.rst", "functional/ivy/elementwise/bitwise_or/bitwise_or_array.rst", "functional/ivy/elementwise/bitwise_or/bitwise_or_functional.rst", "functional/ivy/elementwise/bitwise_right_shift.rst", "functional/ivy/elementwise/bitwise_xor.rst", "functional/ivy/elementwise/bitwise_xor/bitwise_xor_array.rst", "functional/ivy/elementwise/bitwise_xor/bitwise_xor_functional.rst", "functional/ivy/elementwise/ceil.rst", "functional/ivy/elementwise/cos.rst", "functional/ivy/elementwise/cosh.rst", "functional/ivy/elementwise/divide.rst", "functional/ivy/elementwise/equal.rst", "functional/ivy/elementwise/erf.rst", "functional/ivy/elementwise/erf/erf_array.rst", "functional/ivy/elementwise/erf/erf_container.rst", "functional/ivy/elementwise/erf/erf_functional.rst", "functional/ivy/elementwise/exp.rst", "functional/ivy/elementwise/expm1.rst", "functional/ivy/elementwise/floor.rst", "functional/ivy/elementwise/floor_divide.rst", "functional/ivy/elementwise/greater.rst", "functional/ivy/elementwise/greater_equal.rst", "functional/ivy/elementwise/isfinite.rst", "functional/ivy/elementwise/isinf.rst", "functional/ivy/elementwise/isnan.rst", "functional/ivy/elementwise/less.rst", "functional/ivy/elementwise/less_equal.rst", "functional/ivy/elementwise/log.rst", "functional/ivy/elementwise/log/log_array.rst", "functional/ivy/elementwise/log/log_functional.rst", "functional/ivy/elementwise/log10.rst", "functional/ivy/elementwise/log1p.rst", "functional/ivy/elementwise/log2.rst", "functional/ivy/elementwise/log2/log2_array.rst", "functional/ivy/elementwise/log2/log2_functional.rst", "functional/ivy/elementwise/logaddexp.rst", "functional/ivy/elementwise/logical_and.rst", "functional/ivy/elementwise/logical_not.rst", "functional/ivy/elementwise/logical_or.rst", "functional/ivy/elementwise/logical_or/logical_or_array.rst", "functional/ivy/elementwise/logical_or/logical_or_functional.rst", "functional/ivy/elementwise/logical_xor.rst", "functional/ivy/elementwise/maximum.rst", "functional/ivy/elementwise/minimum.rst", "functional/ivy/elementwise/multiply.rst", "functional/ivy/elementwise/negative.rst", "functional/ivy/elementwise/not_equal.rst", "functional/ivy/elementwise/positive.rst", "functional/ivy/elementwise/pow.rst", "functional/ivy/elementwise/remainder.rst", "functional/ivy/elementwise/round.rst", "functional/ivy/elementwise/sign.rst", "functional/ivy/elementwise/sin.rst", "functional/ivy/elementwise/sin/sin_array.rst", "functional/ivy/elementwise/sin/sin_container.rst", "functional/ivy/elementwise/sin/sin_functional.rst", "functional/ivy/elementwise/sinh.rst", "functional/ivy/elementwise/sqrt.rst", "functional/ivy/elementwise/square.rst", "functional/ivy/elementwise/square/square_array.rst", "functional/ivy/elementwise/square/square_functional.rst", "functional/ivy/elementwise/subtract.rst", "functional/ivy/elementwise/tan.rst", "functional/ivy/elementwise/tanh.rst", "functional/ivy/elementwise/trunc.rst", "functional/ivy/general.rst", "functional/ivy/general/all_equal.rst", "functional/ivy/general/arg_info.rst", "functional/ivy/general/arg_names.rst", "functional/ivy/general/array_equal.rst", "functional/ivy/general/arrays_equal.rst", "functional/ivy/general/assert_supports_inplace.rst", "functional/ivy/general/cache_fn.rst", "functional/ivy/general/clip_matrix_norm.rst", "functional/ivy/general/clip_vector_norm.rst", "functional/ivy/general/container_types.rst", "functional/ivy/general/copy_array.rst", "functional/ivy/general/cumprod.rst", "functional/ivy/general/cumsum.rst", "functional/ivy/general/current_backend_str.rst", "functional/ivy/general/default.rst", "functional/ivy/general/einops_rearrange.rst", "functional/ivy/general/einops_reduce.rst", "functional/ivy/general/einops_repeat.rst", "functional/ivy/general/exists.rst", "functional/ivy/general/floormod.rst", "functional/ivy/general/fourier_encode.rst", "functional/ivy/general/gather.rst", "functional/ivy/general/gather_nd.rst", "functional/ivy/general/get_all_arrays_in_memory.rst", "functional/ivy/general/get_min_base.rst", "functional/ivy/general/get_min_denominator.rst", "functional/ivy/general/get_num_dims.rst", "functional/ivy/general/get_referrers_recursive.rst", "functional/ivy/general/has_nans.rst", "functional/ivy/general/indices_where.rst", "functional/ivy/general/inplace_arrays_supported.rst", "functional/ivy/general/inplace_decrement.rst", "functional/ivy/general/inplace_increment.rst", "functional/ivy/general/inplace_update.rst", "functional/ivy/general/inplace_variables_supported.rst", "functional/ivy/general/is_array.rst", "functional/ivy/general/is_ivy_array.rst", "functional/ivy/general/is_ivy_container.rst", "functional/ivy/general/is_native_array.rst", "functional/ivy/general/match_kwargs.rst", "functional/ivy/general/multiprocessing.rst", "functional/ivy/general/num_arrays_in_memory.rst", "functional/ivy/general/one_hot.rst", "functional/ivy/general/print_all_arrays_in_memory.rst", "functional/ivy/general/queue_timeout.rst", "functional/ivy/general/scatter_flat.rst", "functional/ivy/general/scatter_nd.rst", "functional/ivy/general/set_min_base.rst", "functional/ivy/general/set_min_denominator.rst", "functional/ivy/general/set_queue_timeout.rst", "functional/ivy/general/set_tmp_dir.rst", "functional/ivy/general/shape.rst", "functional/ivy/general/shape_to_tuple.rst", "functional/ivy/general/stable_divide.rst", "functional/ivy/general/stable_pow.rst", "functional/ivy/general/supports_inplace.rst", "functional/ivy/general/tmp_dir.rst", "functional/ivy/general/to_list.rst", "functional/ivy/general/to_numpy.rst", "functional/ivy/general/to_scalar.rst", "functional/ivy/general/try_else_none.rst", "functional/ivy/general/unstack.rst", "functional/ivy/general/value_is_nan.rst", "functional/ivy/gradients.rst", "functional/ivy/gradients/GradientTracking:\n    \"\"\"\"\"\"\n\n    # noinspection PyShadowingNames\n    def __init__.rst", "functional/ivy/gradients/adam_step.rst", "functional/ivy/gradients/adam_update.rst", "functional/ivy/gradients/execute_with_gradients.rst", "functional/ivy/gradients/gradient_descent_update.rst", "functional/ivy/gradients/is_variable.rst", "functional/ivy/gradients/lamb_update.rst", "functional/ivy/gradients/lars_update.rst", "functional/ivy/gradients/optimizer_update.rst", "functional/ivy/gradients/set_with_grads.rst", "functional/ivy/gradients/stop_gradient.rst", "functional/ivy/gradients/unset_with_grads.rst", "functional/ivy/gradients/variable.rst", "functional/ivy/gradients/variable_data.rst", "functional/ivy/gradients/with_grads.rst", "functional/ivy/layers.rst", "functional/ivy/layers/conv1d.rst", "functional/ivy/layers/conv1d_transpose.rst", "functional/ivy/layers/conv2d.rst", "functional/ivy/layers/conv2d_transpose.rst", "functional/ivy/layers/conv3d.rst", "functional/ivy/layers/conv3d_transpose.rst", "functional/ivy/layers/depthwise_conv2d.rst", "functional/ivy/layers/dropout.rst", "functional/ivy/layers/linear.rst", "functional/ivy/layers/lstm_update.rst", "functional/ivy/layers/multi_head_attention.rst", "functional/ivy/layers/scaled_dot_product_attention.rst", "functional/ivy/linear_algebra.rst", "functional/ivy/linear_algebra/cholesky.rst", "functional/ivy/linear_algebra/cross.rst", "functional/ivy/linear_algebra/det.rst", "functional/ivy/linear_algebra/diagonal.rst", "functional/ivy/linear_algebra/eigh.rst", "functional/ivy/linear_algebra/eigvalsh.rst", "functional/ivy/linear_algebra/inv.rst", "functional/ivy/linear_algebra/matmul.rst", "functional/ivy/linear_algebra/matrix_norm.rst", "functional/ivy/linear_algebra/matrix_power.rst", "functional/ivy/linear_algebra/matrix_rank.rst", "functional/ivy/linear_algebra/matrix_transpose.rst", "functional/ivy/linear_algebra/outer.rst", "functional/ivy/linear_algebra/pinv.rst", "functional/ivy/linear_algebra/qr.rst", "functional/ivy/linear_algebra/slogdet.rst", "functional/ivy/linear_algebra/solve.rst", "functional/ivy/linear_algebra/svd.rst", "functional/ivy/linear_algebra/svdvals.rst", "functional/ivy/linear_algebra/tensordot.rst", "functional/ivy/linear_algebra/trace.rst", "functional/ivy/linear_algebra/vecdot.rst", "functional/ivy/linear_algebra/vector_norm.rst", "functional/ivy/linear_algebra/vector_to_skew_symmetric_matrix.rst", "functional/ivy/losses.rst", "functional/ivy/losses/binary_cross_entropy.rst", "functional/ivy/losses/cross_entropy.rst", "functional/ivy/losses/cross_entropy/cross_entropy_array.rst", "functional/ivy/losses/cross_entropy/cross_entropy_functional.rst", "functional/ivy/losses/sparse_cross_entropy.rst", "functional/ivy/manipulation.rst", "functional/ivy/manipulation/clip.rst", "functional/ivy/manipulation/clip/clip_functional.rst", "functional/ivy/manipulation/clip/static_clip_container.rst", "functional/ivy/manipulation/concat.rst", "functional/ivy/manipulation/concat/concat_array.rst", "functional/ivy/manipulation/concat/concat_functional.rst", "functional/ivy/manipulation/constant_pad.rst", "functional/ivy/manipulation/expand_dims.rst", "functional/ivy/manipulation/flip.rst", "functional/ivy/manipulation/permute_dims.rst", "functional/ivy/manipulation/repeat.rst", "functional/ivy/manipulation/reshape.rst", "functional/ivy/manipulation/reshape/reshape_array.rst", "functional/ivy/manipulation/reshape/reshape_functional.rst", "functional/ivy/manipulation/roll.rst", "functional/ivy/manipulation/split.rst", "functional/ivy/manipulation/squeeze.rst", "functional/ivy/manipulation/stack.rst", "functional/ivy/manipulation/swapaxes.rst", "functional/ivy/manipulation/tile.rst", "functional/ivy/manipulation/zero_pad.rst", "functional/ivy/meta.rst", "functional/ivy/meta/fomaml_step.rst", "functional/ivy/meta/maml_step.rst", "functional/ivy/meta/reptile_step.rst", "functional/ivy/nest.rst", "functional/ivy/nest/all_nested_indices.rst", "functional/ivy/nest/copy_nest.rst", "functional/ivy/nest/index_nest.rst", "functional/ivy/nest/insert_into_nest_at_index.rst", "functional/ivy/nest/insert_into_nest_at_indices.rst", "functional/ivy/nest/map.rst", "functional/ivy/nest/map_nest_at_index.rst", "functional/ivy/nest/map_nest_at_indices.rst", "functional/ivy/nest/multi_index_nest.rst", "functional/ivy/nest/nested_any.rst", "functional/ivy/nest/nested_indices_where.rst", "functional/ivy/nest/nested_map.rst", "functional/ivy/nest/nested_multi_map.rst", "functional/ivy/nest/prune_nest_at_index.rst", "functional/ivy/nest/prune_nest_at_indices.rst", "functional/ivy/nest/set_nest_at_index.rst", "functional/ivy/nest/set_nest_at_indices.rst", "functional/ivy/norms.rst", "functional/ivy/norms/layer_norm.rst", "functional/ivy/random.rst", "functional/ivy/random/multinomial.rst", "functional/ivy/random/randint.rst", "functional/ivy/random/random_normal.rst", "functional/ivy/random/random_uniform.rst", "functional/ivy/random/seed.rst", "functional/ivy/random/shuffle.rst", "functional/ivy/searching.rst", "functional/ivy/searching/argmax.rst", "functional/ivy/searching/argmin.rst", "functional/ivy/searching/nonzero.rst", "functional/ivy/searching/where.rst", "functional/ivy/set.rst", "functional/ivy/set/unique_all.rst", "functional/ivy/set/unique_counts.rst", "functional/ivy/set/unique_inverse.rst", "functional/ivy/set/unique_values.rst", "functional/ivy/sorting.rst", "functional/ivy/sorting/argsort.rst", "functional/ivy/sorting/sort.rst", "functional/ivy/statistical.rst", "functional/ivy/statistical/einsum.rst", "functional/ivy/statistical/max.rst", "functional/ivy/statistical/mean.rst", "functional/ivy/statistical/min.rst", "functional/ivy/statistical/prod.rst", "functional/ivy/statistical/std.rst", "functional/ivy/statistical/sum.rst", "functional/ivy/statistical/var.rst", "functional/ivy/utility.rst", "functional/ivy/utility/all.rst", "functional/ivy/utility/all/all_array.rst", "functional/ivy/utility/all/all_functional.rst", "functional/ivy/utility/any.rst", "index.rst", "index_append.rst", "index_prepend.rst", "inspection.rst", "inspection/add_array_specs.rst", "inspection/fn_array_spec.rst", "roadmap.rst", "stateful/activations.rst", "stateful/activations/GEGLU.rst", "stateful/activations/GELU.rst", "stateful/converters.rst", "stateful/converters/to_ivy_module.rst", "stateful/initializers.rst", "stateful/initializers/Constant:\n    def __init__.rst", "stateful/initializers/FirstLayerSiren.rst", "stateful/initializers/GlorotUniform.rst", "stateful/initializers/KaimingNormal:\n    def __init__.rst", "stateful/initializers/Ones.rst", "stateful/initializers/Siren.rst", "stateful/initializers/Uniform:\n    def __init__.rst", "stateful/initializers/Zeros.rst", "stateful/layers.rst", "stateful/layers/Conv1D.rst", "stateful/layers/Conv1DTranspose.rst", "stateful/layers/Conv2D.rst", "stateful/layers/Conv2DTranspose.rst", "stateful/layers/Conv3D.rst", "stateful/layers/Conv3DTranspose.rst", "stateful/layers/DepthwiseConv2D.rst", "stateful/layers/Dropout.rst", "stateful/layers/LSTM.rst", "stateful/layers/Linear.rst", "stateful/layers/MultiHeadAttention.rst", "stateful/module.rst", "stateful/module/Module.rst", "stateful/norms.rst", "stateful/norms/LayerNorm.rst", "stateful/optimizers.rst", "stateful/optimizers/Adam.rst", "stateful/optimizers/LAMB.rst", "stateful/optimizers/LARS.rst", "stateful/optimizers/Optimizer.rst", "stateful/optimizers/SGD.rst", "stateful/sequential.rst", "stateful/sequential/Sequential.rst", "supported_frameworks.rst", "verbosity.rst", "verbosity/cprint.rst"], "titles": ["Activations", "ArrayWithActivations", "Array methods", "abs array", "acos array", "acosh array", "add array", "all array", "all_equal array", "any array", "argsort array", "asin array", "asinh array", "atan array", "atan2 array", "atanh array", "binary_cross_entropy array", "bitwise_and array", "bitwise_invert array", "bitwise_left_shift array", "bitwise_or array", "bitwise_right_shift array", "bitwise_xor array", "can_cast array", "ceil array", "clip array", "concat array", "constant_pad array", "cos array", "cosh array", "cross_entropy array", "divide array", "einsum array", "equal array", "erf array", "exp array", "expand_dims array", "expm1 array", "flip array", "floor array", "floor_divide array", "greater array", "greater_equal array", "isfinite array", "isinf array", "isnan array", "layer_norm array", "less array", "less_equal array", "log array", "log10 array", "log1p array", "log2 array", "logaddexp array", "logical_and array", "logical_not array", "logical_or array", "logical_xor array", "matmul array", "max array", "mean array", "min array", "multiply array", "negative array", "not_equal array", "permute_dims array", "positive array", "pow array", "prod array", "remainder array", "repeat array", "reshape array", "roll array", "round array", "sign array", "sin array", "sinh array", "sort array", "sparse_cross_entropy array", "sqrt array", "square array", "squeeze array", "stack array", "std array", "subtract array", "sum array", "swapaxes array", "tan array", "tanh array", "tile array", "trunc array", "var array", "zero_pad array", "Conversions", "args_to_ivy", "args_to_native", "to_ivy", "to_native", "Creation", "ArrayWithCreation", "Data types", "ArrayWithDataTypes", "Device", "ArrayWithDevice", "Elementwise", "ArrayWithElementwise", "General", "ArrayWithGeneral", "Gradients", "ArrayWithGradients", "Image", "ArrayWithImage", "Layers", "ArrayWithLayers", "Linear algebra", "ArrayWithLinearAlgebra", "Losses", "ArrayWithLosses", "Manipulation", "ArrayWithManipulation", "Norms", "ArrayWithNorms", "Random", "ArrayWithRandom", "Searching", "ArrayWithSearching", "Set", "ArrayWithSet", "Sorting", "ArrayWithSorting", "Statistical", "ArrayWithStatistical", "Utility", "ArrayWithUtility", "Wrapping", "add_ivy_array_instance_methods", "Backend handler", "&lt;no title&gt;", "choose_random_backend", "clear_backend_stack", "current_backend", "get_backend", "set_backend", "try_import_ivy_jax", "try_import_ivy_mxnet", "try_import_ivy_numpy", "try_import_ivy_tf", "try_import_ivy_torch", "unset_backend", "Background", "ML Explosion", "Standardization", "Why Unify?", "Activations", "ContainerWithActivations", "Base", "ContainerBase", "Container", "Container", "MultiDevContainer", "Container methods", "abs container", "acos container", "acosh container", "adam_update container", "add container", "all container", "all_equal container", "any container", "argsort container", "asin container", "asinh container", "at_dev container", "at_devs container", "atan container", "atan2 container", "atanh container", "binary_cross_entropy container", "bitwise_and container", "bitwise_invert container", "bitwise_left_shift container", "bitwise_or container", "bitwise_right_shift container", "bitwise_xor container", "can_cast container", "ceil container", "clip container", "clip_vector_norm container", "concat container", "constant_pad container", "cos container", "cosh container", "cross_entropy container", "divide container", "einsum container", "equal container", "erf container", "exp container", "expand_dims container", "expm1 container", "flip container", "floor container", "floor_divide container", "gradient_descent_update container", "greater container", "greater_equal container", "isfinite container", "isinf container", "isnan container", "lamb_update container", "lars_update container", "layer_norm container", "less container", "less_equal container", "log container", "log10 container", "log1p container", "log2 container", "logaddexp container", "logical_and container", "logical_not container", "logical_or container", "logical_xor container", "matmul container", "max container", "mean container", "min container", "multiply container", "negative container", "not_equal container", "optimizer_update container", "permute_dims container", "positive container", "pow container", "prod container", "random_uniform container", "remainder container", "repeat container", "reshape container", "roll container", "round container", "sign container", "sin container", "sinh container", "sort container", "sparse_cross_entropy container", "sqrt container", "square container", "squeeze container", "stack container", "static_adam_update container", "static_add container", "static_all_equal container", "static_argsort container", "static_binary_cross_entropy container", "static_can_cast container", "static_clip container", "static_cross_entropy container", "static_divide container", "static_gradient_descent_update container", "static_lamb_update container", "static_lars_update container", "static_multiply container", "static_optimizer_update container", "static_randint container", "static_random_uniform container", "static_roll container", "static_sort container", "static_sparse_cross_entropy container", "static_subtract container", "static_tan container", "std container", "subtract container", "sum container", "swapaxes container", "tan container", "tanh container", "tile container", "trunc container", "var container", "zero_pad container", "Creation", "ContainerWithCreation", "Data types", "ContainerWithDataTypes", "Device", "ContainerWithDevice", "Elementwise", "ContainerWithElementwise", "General", "ContainerWithGeneral", "Gradients", "ContainerWithGradients", "Image", "ContainerWithImage", "Layers", "ContainerWithLayers", "Linear algebra", "ContainerWithLinearAlgebra", "Losses", "ContainerWithLosses", "Manipulation", "ContainerWithManipulation", "Norms", "ContainerWithNorms", "Random", "ContainerWithRandom", "Searching", "ContainerWithSearching", "Set", "ContainerWithSet", "Sorting", "ContainerWithSorting", "Statistical", "ContainerWithStatistical", "Utility", "ContainerWithUtility", "Wrapping", "add_ivy_container_instance_methods", "Contributing", "Setting Up", "The Basics", "Open Tasks", "Building the Docs", "Deep Dive", "Navigating the Code", "Docstrings", "Docstring Examples", "Array API Tests", "Ivy Tests", "Function Types", "Backend Setting", "Function Wrapping", "Arrays", "Containers", "Data Types", "Devices", "Inplace Updates", "Function Arguments", "Design", "Building Blocks", "Ivy as a Framework", "Ivy Array", "Ivy Container", "Ivy Stateful API", "Ivy as a Transpiler", "Ivy", "Ivy builder", "Ivy ecosystem", "Ivy gym", "Ivy mech", "Ivy memory", "Ivy models", "Ivy robot", "Ivy vision", "Extensions", "Applied Libraries", "FAQ", "Func wrapper", "handle_nestable", "handle_out_argument", "infer_device", "infer_dtype", "inputs_to_ivy_arrays", "inputs_to_native_arrays", "outputs_to_ivy_arrays", "to_native_arrays_and_back", "&lt;no title&gt;", "Activations", "gelu", "leaky_relu", "relu", "sigmoid", "softmax", "softplus", "tanh", "Compilation", "compile", "Constants", "Creation", "arange", "asarray", "empty", "empty_like", "eye", "from_dlpack", "full", "full_like", "linspace", "logspace", "meshgrid", "native_array", "ones", "ones_like", "tril", "triu", "zeros", "zeros_like", "Data type", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "as_ivy_dtype", "as_native_dtype", "astype", "broadcast_arrays", "broadcast_to", "can_cast", "closest_valid_dtype", "default_dtype", "default_float_dtype", "default_int_dtype", "dtype", "dtype_bits", "finfo", "function_supported_dtypes", "function_unsupported_dtypes", "iinfo", "invalid_dtype", "is_float_dtype", "is_int_dtype", "promote_types", "result_type", "set_default_dtype", "set_default_float_dtype", "set_default_int_dtype", "type_promote_arrays", "unset_default_dtype", "unset_default_float_dtype", "unset_default_int_dtype", "valid_dtype", "Device", "&lt;no title&gt;", "DevClonedItem", "DevClonedIter", "DevClonedNest", "DevDistItem", "DevDistIter", "DevDistNest", "&lt;no title&gt;", "DevMapper", "DevMapperMultiProc", "&lt;no title&gt;", "MultiDevItem", "MultiDevIter", "MultiDevNest", "Profiler", "as_ivy_dev", "as_native_dev", "clear_mem_on_dev", "default_device", "dev", "dev_clone", "dev_clone_array", "dev_clone_iter", "dev_clone_nest", "dev_dist", "dev_dist_array", "dev_dist_iter", "dev_dist_nest", "dev_unify", "dev_unify_array", "dev_unify_iter", "dev_unify_nest", "dev_util", "get_all_ivy_arrays_on_dev", "gpu_is_available", "num_cpu_cores", "num_gpus", "num_ivy_arrays_on_dev", "percent_used_mem_on_dev", "print_all_ivy_arrays_on_dev", "set_default_device", "set_split_factor", "split_factor", "split_func_call", "to_device", "total_mem_on_dev", "tpu_is_available", "unset_default_device", "used_mem_on_dev", "Elementwise", "abs", "acos", "acosh", "add", "asin", "asin array", "asin functional", "asinh", "atan", "atan2", "atanh", "bitwise_and", "bitwise_invert", "bitwise_left_shift", "bitwise_left_shift array", "bitwise_left_shift functional", "bitwise_or", "bitwise_or array", "bitwise_or functional", "bitwise_right_shift", "bitwise_xor", "bitwise_xor array", "bitwise_xor functional", "ceil", "cos", "cosh", "divide", "equal", "erf", "erf array", "erf container", "erf functional", "exp", "expm1", "floor", "floor_divide", "greater", "greater_equal", "isfinite", "isinf", "isnan", "less", "less_equal", "log", "log array", "log functional", "log10", "log1p", "log2", "log2 array", "log2 functional", "logaddexp", "logical_and", "logical_not", "logical_or", "logical_or array", "logical_or functional", "logical_xor", "maximum", "minimum", "multiply", "negative", "not_equal", "positive", "pow", "remainder", "round", "sign", "sin", "sin array", "sin container", "sin functional", "sinh", "sqrt", "square", "square array", "square functional", "subtract", "tan", "tanh", "trunc", "General", "all_equal", "arg_info", "arg_names", "array_equal", "arrays_equal", "assert_supports_inplace", "cache_fn", "clip_matrix_norm", "clip_vector_norm", "container_types", "copy_array", "cumprod", "cumsum", "current_backend_str", "default", "einops_rearrange", "einops_reduce", "einops_repeat", "exists", "floormod", "fourier_encode", "gather", "gather_nd", "get_all_arrays_in_memory", "get_min_base", "get_min_denominator", "get_num_dims", "get_referrers_recursive", "has_nans", "indices_where", "inplace_arrays_supported", "inplace_decrement", "inplace_increment", "inplace_update", "inplace_variables_supported", "is_array", "is_ivy_array", "is_ivy_container", "is_native_array", "match_kwargs", "multiprocessing", "num_arrays_in_memory", "one_hot", "print_all_arrays_in_memory", "queue_timeout", "scatter_flat", "scatter_nd", "set_min_base", "set_min_denominator", "set_queue_timeout", "set_tmp_dir", "shape", "shape_to_tuple", "stable_divide", "stable_pow", "supports_inplace", "tmp_dir", "to_list", "to_numpy", "to_scalar", "try_else_none", "unstack", "value_is_nan", "Gradients", "&lt;no title&gt;", "adam_step", "adam_update", "execute_with_gradients", "gradient_descent_update", "is_variable", "lamb_update", "lars_update", "optimizer_update", "set_with_grads", "stop_gradient", "unset_with_grads", "variable", "variable_data", "with_grads", "Layers", "conv1d", "conv1d_transpose", "conv2d", "conv2d_transpose", "conv3d", "conv3d_transpose", "depthwise_conv2d", "dropout", "linear", "lstm_update", "multi_head_attention", "scaled_dot_product_attention", "Linear algebra", "cholesky", "cross", "det", "diagonal", "eigh", "eigvalsh", "inv", "matmul", "matrix_norm", "matrix_power", "matrix_rank", "matrix_transpose", "outer", "pinv", "qr", "slogdet", "solve", "svd", "svdvals", "tensordot", "trace", "vecdot", "vector_norm", "vector_to_skew_symmetric_matrix", "Losses", "binary_cross_entropy", "cross_entropy", "cross_entropy array", "cross_entropy functional", "sparse_cross_entropy", "Manipulation", "clip", "clip functional", "static_clip container", "concat", "concat array", "concat functional", "constant_pad", "expand_dims", "flip", "permute_dims", "repeat", "reshape", "reshape array", "reshape functional", "roll", "split", "squeeze", "stack", "swapaxes", "tile", "zero_pad", "Meta", "fomaml_step", "maml_step", "reptile_step", "Nest", "all_nested_indices", "copy_nest", "index_nest", "insert_into_nest_at_index", "insert_into_nest_at_indices", "map", "map_nest_at_index", "map_nest_at_indices", "multi_index_nest", "nested_any", "nested_indices_where", "nested_map", "nested_multi_map", "prune_nest_at_index", "prune_nest_at_indices", "set_nest_at_index", "set_nest_at_indices", "Norms", "layer_norm", "Random", "multinomial", "randint", "random_normal", "random_uniform", "seed", "shuffle", "Searching", "argmax", "argmin", "nonzero", "where", "Set", "unique_all", "unique_counts", "unique_inverse", "unique_values", "Sorting", "argsort", "sort", "Statistical", "einsum", "max", "mean", "min", "prod", "std", "sum", "var", "Utility", "all", "all array", "all functional", "any", "Contents", "&lt;no title&gt;", "&lt;no title&gt;", "Inspection", "add_array_specs", "fn_array_spec", "Roadmap", "Activations", "GEGLU", "GELU", "Converters", "to_ivy_module", "Initializers", "&lt;no title&gt;", "FirstLayerSiren", "GlorotUniform", "&lt;no title&gt;", "Ones", "Siren", "&lt;no title&gt;", "Zeros", "Layers", "Conv1D", "Conv1DTranspose", "Conv2D", "Conv2DTranspose", "Conv3D", "Conv3DTranspose", "DepthwiseConv2D", "Dropout", "LSTM", "Linear", "MultiHeadAttention", "Module", "Module", "Norms", "LayerNorm", "Optimizers", "Adam", "LAMB", "LARS", "Optimizer", "SGD", "Sequential", "Sequential", "&lt;no title&gt;", "Verbosity", "cprint"], "terms": {"class": [0, 1, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 142, 148, 153, 154, 155, 156, 157, 158, 159, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 322, 323, 326, 327, 329, 333, 334, 335, 336, 338, 340, 341, 343, 344, 345, 355, 356, 357, 398, 417, 431, 433, 434, 435, 436, 437, 438, 440, 441, 443, 444, 445, 446, 563, 566, 597, 603, 622, 627, 641, 713, 715, 725, 740, 743, 767, 774, 775, 776, 777, 778, 779, 781, 782, 784, 785, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811], "ivi": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 321, 322, 323, 324, 326, 328, 330, 331, 332, 334, 335, 336, 337, 338, 339, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 433, 434, 435, 436, 437, 438, 440, 441, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 781, 782, 784, 785, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 813, 814], "arrai": [0, 1, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 140, 155, 156, 157, 158, 159, 160, 165, 167, 184, 185, 186, 239, 251, 252, 255, 256, 264, 266, 270, 275, 283, 284, 287, 288, 289, 290, 301, 302, 305, 306, 320, 321, 322, 324, 325, 326, 327, 329, 330, 331, 332, 334, 335, 336, 337, 339, 340, 341, 343, 344, 345, 357, 358, 366, 368, 369, 370, 371, 372, 373, 374, 375, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 404, 405, 406, 407, 412, 414, 417, 419, 420, 422, 426, 431, 450, 451, 452, 453, 456, 457, 458, 459, 460, 461, 462, 463, 465, 469, 471, 475, 476, 481, 482, 483, 484, 485, 486, 488, 489, 490, 491, 492, 493, 494, 495, 497, 498, 500, 501, 502, 504, 505, 506, 507, 508, 509, 510, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 527, 528, 529, 530, 532, 533, 534, 535, 536, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 553, 554, 555, 556, 558, 559, 560, 561, 562, 563, 564, 567, 568, 569, 571, 572, 574, 575, 576, 579, 580, 581, 582, 583, 584, 585, 586, 587, 590, 592, 593, 594, 595, 596, 597, 599, 600, 602, 605, 606, 607, 609, 610, 615, 619, 621, 622, 623, 625, 626, 627, 629, 630, 632, 633, 634, 635, 636, 638, 640, 641, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 685, 686, 687, 688, 689, 690, 691, 693, 694, 695, 696, 697, 698, 699, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 715, 725, 726, 731, 732, 733, 734, 735, 736, 737, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 765, 766, 767, 770, 772, 788, 796, 799], "arraywithactiv": 0, "sourc": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 323, 333, 334, 358, 359, 360, 361, 362, 363, 364, 365, 366, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 433, 434, 435, 436, 437, 438, 440, 441, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 770, 771, 772, 774, 775, 776, 777, 778, 779, 781, 782, 784, 785, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 813, 814], "base": [0, 1, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 136, 153, 154, 156, 157, 158, 159, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 321, 329, 332, 334, 340, 356, 379, 389, 398, 431, 433, 434, 435, 436, 437, 438, 440, 441, 443, 444, 445, 446, 481, 514, 525, 527, 528, 529, 530, 532, 546, 563, 588, 611, 618, 627, 745, 746, 747, 749, 753, 754, 774, 775, 776, 779, 781, 782, 784, 785, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811], "abc": [0, 1, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 155, 156, 342, 431, 440, 446, 563, 582, 800, 801, 804, 808], "activ": [1, 134, 135, 154, 317, 318, 320, 321, 323, 325, 344, 369, 370, 371, 372, 373, 374, 375, 767, 775, 776], "support": [1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 94, 95, 96, 97, 99, 101, 103, 105, 107, 109, 111, 113, 115, 117, 119, 121, 123, 125, 127, 129, 131, 133, 135, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 150, 151, 152, 154, 155, 156, 158, 159, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 282, 284, 286, 288, 290, 292, 294, 296, 298, 300, 302, 304, 306, 308, 310, 312, 314, 316, 318, 326, 327, 330, 332, 333, 334, 335, 336, 337, 338, 339, 340, 342, 343, 345, 359, 360, 361, 362, 363, 364, 365, 366, 369, 370, 371, 372, 373, 374, 375, 377, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 682, 683, 684, 685, 686, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 710, 711, 712, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 732, 734, 735, 736, 737, 738, 739, 741, 742, 743, 744, 746, 747, 748, 749, 751, 752, 754, 755, 756, 757, 758, 759, 760, 761, 763, 764, 765, 766, 767, 771, 772, 773, 775, 776, 778, 780, 781, 782, 783, 784, 785, 786, 787, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 801, 803, 804, 805, 806, 807, 808, 809, 811, 812, 814], "framework": [1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 99, 101, 103, 105, 107, 109, 111, 113, 115, 117, 119, 121, 123, 125, 127, 129, 131, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 150, 151, 152, 154, 155, 156, 158, 159, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 282, 284, 286, 288, 290, 292, 294, 296, 298, 300, 302, 304, 306, 308, 310, 312, 314, 316, 318, 324, 328, 330, 331, 332, 333, 336, 338, 339, 342, 345, 356, 357, 359, 360, 361, 362, 363, 364, 365, 366, 369, 370, 371, 372, 373, 374, 375, 376, 377, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 682, 683, 684, 685, 686, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 710, 711, 712, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 732, 734, 735, 736, 737, 738, 739, 741, 742, 743, 744, 746, 747, 748, 749, 751, 752, 754, 755, 756, 757, 758, 759, 760, 761, 763, 764, 765, 766, 767, 771, 772, 773, 775, 776, 777, 778, 780, 781, 782, 783, 784, 785, 786, 787, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 801, 803, 804, 805, 806, 807, 808, 809, 811, 812, 814], "array_method": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 486, 487, 495, 496, 498, 499, 502, 503, 510, 511, 525, 526, 530, 531, 536, 537, 550, 551, 556, 557, 683, 684, 691, 692, 699, 700, 763, 764], "ab": [2, 104, 105, 160, 287, 288, 329, 332, 481, 546, 656, 679, 767], "self": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 155, 156, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 333, 334, 340, 342, 343, 344, 345, 431, 486, 487, 495, 496, 498, 499, 502, 503, 510, 511, 512, 525, 526, 530, 531, 536, 537, 550, 551, 552, 556, 557, 683, 684, 691, 692, 699, 700, 763, 764, 767, 804, 808], "out": [2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 104, 105, 114, 115, 116, 117, 118, 119, 120, 121, 128, 129, 130, 131, 132, 133, 150, 151, 152, 155, 156, 157, 158, 160, 161, 162, 163, 165, 166, 168, 169, 170, 171, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 204, 205, 206, 207, 208, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 251, 253, 254, 256, 257, 258, 262, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 287, 288, 289, 290, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 311, 312, 313, 314, 315, 316, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 339, 340, 342, 343, 344, 345, 356, 368, 370, 371, 372, 373, 374, 375, 379, 380, 382, 383, 384, 386, 387, 392, 393, 394, 395, 396, 397, 398, 404, 406, 431, 476, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 571, 572, 574, 575, 576, 579, 580, 581, 583, 585, 586, 593, 606, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 662, 663, 664, 665, 666, 667, 668, 669, 670, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 704, 705, 706, 707, 708, 731, 732, 733, 734, 735, 736, 737, 739, 740, 741, 742, 744, 745, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 788, 796], "none": [2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 104, 105, 114, 115, 116, 117, 118, 119, 120, 121, 128, 129, 130, 131, 132, 133, 136, 138, 141, 148, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 325, 327, 330, 334, 335, 336, 337, 338, 340, 342, 344, 345, 368, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 386, 387, 388, 389, 391, 392, 393, 394, 395, 396, 397, 398, 404, 406, 409, 410, 411, 414, 417, 431, 440, 441, 449, 450, 473, 474, 475, 476, 479, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 565, 571, 572, 574, 575, 576, 578, 579, 580, 581, 582, 583, 585, 586, 591, 593, 594, 598, 604, 606, 609, 610, 611, 612, 617, 618, 624, 627, 630, 632, 634, 635, 636, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 662, 663, 664, 665, 666, 667, 668, 669, 670, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 719, 724, 725, 726, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 744, 745, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 777, 778, 779, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811], "instanc": [2, 3, 6, 8, 23, 24, 25, 72, 87, 93, 94, 95, 96, 97, 100, 101, 104, 105, 106, 107, 118, 119, 134, 135, 155, 156, 157, 158, 160, 165, 167, 184, 185, 186, 239, 275, 283, 284, 287, 288, 289, 290, 301, 302, 317, 318, 322, 326, 327, 329, 330, 333, 335, 337, 338, 343, 344, 345, 358, 366, 368, 370, 371, 372, 373, 374, 375, 379, 390, 398, 407, 431, 440, 472, 481, 485, 486, 488, 493, 502, 504, 505, 507, 516, 519, 540, 541, 543, 548, 555, 556, 558, 560, 563, 574, 585, 597, 621, 623, 643, 646, 649, 655, 656, 657, 658, 659, 681, 682, 687, 695, 696, 698, 702, 703, 706, 731, 732, 733, 736, 737, 740, 741, 742, 743, 744, 745, 746, 747, 750, 751, 753, 754, 755, 762, 763, 765, 777, 778], "variant": [2, 3, 6, 8, 23, 24, 25, 72, 87, 100, 101, 104, 105, 106, 107, 118, 119, 160, 165, 167, 184, 185, 186, 239, 251, 252, 255, 256, 264, 266, 270, 275, 283, 284, 287, 288, 289, 290, 301, 302, 305, 306, 326, 327, 688, 690], "thi": [2, 3, 6, 8, 23, 24, 25, 72, 87, 100, 101, 104, 105, 106, 107, 118, 119, 150, 151, 152, 155, 156, 157, 158, 159, 160, 165, 167, 184, 185, 186, 239, 251, 252, 255, 256, 264, 266, 270, 275, 283, 284, 287, 288, 289, 290, 301, 302, 305, 306, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 356, 357, 379, 380, 381, 390, 391, 398, 407, 431, 455, 459, 463, 470, 475, 480, 481, 482, 485, 486, 488, 493, 501, 502, 504, 505, 507, 515, 516, 535, 536, 538, 547, 548, 555, 556, 558, 560, 563, 584, 585, 597, 608, 613, 627, 630, 632, 633, 634, 635, 636, 641, 643, 646, 652, 655, 656, 659, 665, 672, 687, 688, 690, 695, 696, 699, 701, 702, 705, 713, 719, 725, 726, 731, 732, 740, 741, 745, 746, 747, 749, 750, 751, 753, 755, 756, 759, 761, 762, 763, 765, 767, 773, 800, 801, 804, 805, 806, 807, 808, 809], "simpli": [2, 3, 6, 8, 23, 24, 25, 72, 87, 100, 101, 104, 105, 106, 107, 118, 119, 155, 156, 160, 165, 167, 184, 185, 186, 239, 251, 252, 255, 256, 264, 266, 270, 275, 283, 284, 287, 288, 289, 290, 301, 302, 305, 306, 321, 326, 327, 329, 330, 333, 334, 336, 337, 338, 340, 344, 345, 481, 515, 688, 690], "wrap": [2, 3, 6, 8, 23, 24, 25, 72, 87, 93, 100, 101, 104, 105, 106, 107, 118, 119, 135, 155, 156, 157, 158, 159, 160, 165, 167, 184, 185, 186, 239, 251, 252, 255, 256, 264, 266, 270, 275, 283, 284, 287, 288, 289, 290, 301, 302, 305, 306, 318, 324, 326, 329, 330, 331, 333, 334, 335, 336, 337, 338, 340, 342, 345, 357, 358, 366, 563, 570, 627, 641, 688, 690], "function": [2, 3, 6, 8, 23, 24, 25, 72, 87, 93, 100, 101, 104, 105, 106, 107, 118, 119, 134, 135, 136, 140, 141, 142, 150, 155, 156, 160, 165, 167, 184, 185, 186, 239, 251, 252, 255, 256, 264, 266, 270, 275, 283, 284, 287, 288, 289, 290, 301, 302, 305, 306, 317, 318, 321, 323, 324, 325, 326, 327, 328, 329, 331, 333, 337, 339, 341, 342, 343, 344, 355, 356, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 433, 434, 435, 436, 437, 438, 440, 441, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 489, 490, 491, 492, 493, 494, 495, 498, 501, 502, 505, 506, 507, 508, 509, 510, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 528, 529, 530, 533, 534, 535, 536, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 554, 555, 556, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 686, 687, 688, 690, 691, 694, 695, 696, 697, 698, 699, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 766, 767, 770, 772, 774, 775, 776, 804, 807, 809], "so": [2, 3, 6, 8, 23, 24, 25, 72, 87, 93, 96, 97, 100, 101, 104, 105, 106, 107, 118, 119, 150, 151, 155, 156, 160, 165, 167, 184, 185, 186, 239, 251, 252, 255, 256, 264, 266, 270, 275, 283, 284, 287, 288, 289, 290, 301, 302, 305, 306, 320, 321, 325, 326, 327, 329, 332, 333, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 357, 358, 366, 688, 690, 713, 714, 724, 767], "docstr": [2, 3, 6, 8, 23, 24, 25, 72, 87, 100, 101, 104, 105, 106, 107, 118, 119, 160, 165, 167, 184, 185, 186, 239, 251, 252, 255, 256, 264, 266, 270, 275, 283, 284, 287, 288, 289, 290, 301, 302, 305, 306, 322, 323, 324, 325, 330, 334, 338, 379, 390, 398, 407, 481, 485, 486, 488, 493, 502, 504, 505, 507, 516, 548, 555, 556, 558, 560, 656, 659, 687, 688, 690, 695, 696, 702, 745, 746, 747, 750, 751, 753, 755, 762, 763, 765], "also": [2, 3, 6, 8, 23, 24, 25, 72, 87, 93, 94, 95, 96, 97, 100, 101, 104, 105, 106, 107, 118, 119, 150, 151, 155, 156, 160, 165, 167, 184, 185, 186, 239, 251, 252, 255, 256, 264, 266, 270, 275, 283, 284, 287, 288, 289, 290, 301, 302, 305, 306, 319, 320, 321, 324, 325, 326, 327, 329, 330, 332, 333, 334, 335, 336, 337, 338, 340, 342, 343, 344, 345, 356, 357, 379, 390, 398, 407, 481, 485, 486, 488, 493, 502, 504, 505, 507, 516, 548, 555, 556, 558, 560, 563, 585, 597, 627, 630, 643, 646, 652, 655, 656, 659, 687, 688, 690, 695, 696, 702, 709, 710, 711, 712, 713, 714, 715, 723, 724, 725, 731, 732, 745, 746, 747, 750, 751, 753, 755, 762, 763, 765, 788, 798], "appli": [2, 3, 6, 8, 23, 24, 25, 72, 87, 93, 96, 97, 100, 101, 104, 105, 106, 107, 118, 119, 155, 156, 160, 165, 167, 184, 185, 186, 239, 251, 252, 255, 256, 264, 266, 270, 275, 283, 284, 287, 288, 289, 290, 301, 302, 305, 306, 320, 321, 322, 326, 327, 329, 330, 332, 334, 335, 336, 337, 338, 340, 342, 343, 344, 345, 355, 357, 368, 369, 370, 371, 372, 373, 374, 375, 398, 422, 563, 579, 580, 581, 627, 634, 635, 643, 652, 654, 655, 656, 667, 670, 681, 682, 683, 685, 686, 687, 688, 690, 705, 709, 710, 711, 713, 719, 722, 725, 726, 731, 732, 767, 774, 775, 776, 802, 803], "minim": [2, 3, 6, 8, 23, 24, 25, 72, 87, 100, 101, 104, 105, 106, 107, 118, 119, 160, 165, 167, 184, 185, 186, 239, 251, 252, 255, 256, 264, 266, 270, 275, 283, 284, 287, 288, 289, 290, 301, 302, 305, 306, 326, 337, 340, 688, 690], "chang": [2, 3, 6, 8, 23, 24, 25, 72, 87, 100, 101, 104, 105, 106, 107, 118, 119, 152, 160, 165, 167, 184, 185, 186, 239, 251, 252, 255, 256, 264, 266, 270, 275, 283, 284, 287, 288, 289, 290, 301, 302, 305, 306, 320, 321, 322, 323, 326, 328, 329, 334, 340, 344, 357, 431, 656, 658, 687, 688, 690, 699, 701, 713, 715, 725, 767, 773], "return": [2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 100, 101, 104, 105, 114, 115, 116, 117, 118, 119, 120, 121, 128, 129, 130, 131, 132, 133, 136, 140, 141, 148, 155, 156, 157, 158, 159, 160, 161, 162, 163, 165, 166, 167, 168, 169, 170, 171, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 204, 205, 206, 207, 208, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 283, 284, 287, 288, 289, 290, 291, 292, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 311, 312, 313, 314, 315, 316, 325, 326, 327, 329, 330, 332, 333, 334, 335, 336, 337, 338, 340, 342, 343, 344, 345, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 426, 430, 431, 440, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 588, 589, 590, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 609, 610, 611, 612, 615, 616, 617, 618, 619, 621, 622, 623, 624, 625, 626, 627, 629, 630, 631, 632, 633, 634, 635, 636, 638, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 719, 723, 724, 725, 726, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 770, 772, 777, 778, 788, 797, 798, 804, 808], "type": [2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 101, 104, 105, 114, 115, 116, 117, 118, 119, 120, 121, 128, 129, 130, 131, 132, 133, 134, 135, 136, 142, 148, 155, 156, 157, 158, 159, 160, 161, 162, 163, 165, 166, 167, 168, 169, 170, 171, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 204, 205, 206, 207, 208, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 284, 287, 288, 289, 290, 291, 292, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 311, 312, 313, 314, 315, 316, 317, 318, 320, 322, 324, 325, 326, 327, 332, 333, 334, 336, 337, 338, 340, 342, 343, 345, 358, 359, 360, 361, 362, 363, 364, 365, 366, 368, 370, 371, 372, 373, 374, 375, 376, 377, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 426, 430, 431, 447, 448, 449, 450, 451, 453, 463, 464, 465, 466, 467, 468, 469, 470, 472, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 567, 568, 570, 571, 572, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 588, 589, 590, 592, 593, 595, 596, 597, 599, 600, 601, 602, 606, 609, 610, 611, 612, 615, 617, 618, 619, 621, 622, 623, 625, 626, 627, 629, 630, 632, 633, 634, 635, 636, 638, 640, 643, 644, 646, 648, 649, 650, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 719, 723, 724, 725, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799], "aco": [2, 104, 105, 160, 287, 288, 481, 767], "acosh": [2, 104, 105, 160, 287, 288, 398, 415, 416, 481, 767], "add": [2, 104, 105, 134, 135, 155, 156, 157, 158, 160, 251, 252, 287, 288, 289, 290, 317, 318, 320, 321, 322, 324, 325, 326, 330, 331, 333, 334, 338, 340, 342, 357, 481, 731, 732, 767, 773, 802, 803], "x2": [2, 6, 8, 14, 17, 19, 20, 21, 22, 31, 33, 40, 41, 42, 47, 48, 53, 54, 56, 57, 58, 62, 64, 67, 69, 84, 104, 105, 106, 107, 114, 115, 155, 156, 160, 165, 167, 175, 178, 180, 181, 182, 183, 193, 195, 202, 204, 205, 212, 213, 218, 219, 221, 222, 223, 227, 229, 233, 236, 251, 252, 258, 262, 269, 272, 287, 288, 289, 290, 297, 298, 327, 338, 398, 426, 431, 469, 481, 485, 491, 493, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 508, 509, 517, 518, 519, 523, 524, 533, 534, 536, 537, 538, 539, 540, 541, 542, 544, 546, 547, 559, 563, 564, 643, 648, 656, 658, 664, 669, 673, 676, 678, 740, 744], "exampl": [2, 6, 8, 23, 24, 25, 72, 87, 100, 101, 104, 105, 106, 107, 118, 119, 134, 135, 136, 140, 141, 142, 148, 152, 157, 158, 160, 165, 167, 184, 185, 186, 239, 251, 252, 255, 256, 264, 266, 270, 275, 283, 284, 287, 288, 289, 290, 301, 302, 305, 306, 317, 318, 320, 321, 322, 324, 325, 326, 329, 330, 331, 332, 333, 334, 335, 336, 337, 340, 342, 343, 344, 345, 356, 357, 368, 370, 371, 372, 373, 374, 375, 376, 377, 379, 386, 387, 390, 392, 393, 396, 397, 398, 404, 407, 415, 416, 431, 450, 451, 453, 465, 466, 467, 468, 469, 472, 474, 476, 478, 479, 481, 485, 486, 488, 492, 493, 494, 501, 502, 504, 505, 506, 507, 514, 516, 518, 519, 523, 540, 541, 543, 548, 555, 556, 558, 560, 563, 564, 567, 568, 574, 575, 582, 585, 589, 600, 615, 621, 622, 623, 643, 644, 646, 648, 649, 650, 655, 656, 657, 658, 659, 660, 663, 667, 669, 674, 676, 677, 681, 682, 683, 685, 686, 687, 688, 689, 690, 691, 693, 695, 696, 698, 699, 701, 702, 703, 704, 705, 706, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 750, 751, 753, 754, 759, 760, 762, 763, 765, 767], "x": [2, 6, 23, 24, 25, 72, 82, 87, 93, 96, 97, 100, 101, 104, 105, 118, 119, 136, 140, 148, 155, 156, 157, 158, 160, 165, 184, 185, 186, 239, 249, 251, 253, 255, 256, 264, 266, 267, 270, 275, 283, 284, 287, 288, 301, 302, 305, 306, 311, 312, 323, 325, 326, 327, 330, 331, 334, 337, 338, 340, 342, 343, 344, 345, 368, 369, 370, 371, 372, 373, 374, 375, 379, 381, 383, 385, 387, 390, 391, 393, 394, 395, 396, 397, 398, 404, 406, 407, 412, 431, 450, 451, 452, 453, 456, 457, 465, 469, 474, 476, 481, 482, 483, 484, 485, 486, 488, 489, 490, 491, 492, 493, 494, 502, 504, 505, 506, 507, 510, 513, 514, 515, 516, 518, 519, 520, 521, 522, 523, 525, 527, 528, 529, 530, 532, 535, 540, 541, 543, 545, 548, 549, 550, 553, 554, 555, 556, 558, 560, 561, 562, 563, 567, 568, 569, 571, 572, 574, 575, 576, 578, 579, 580, 581, 582, 583, 584, 585, 586, 589, 590, 592, 593, 595, 596, 597, 599, 600, 601, 602, 606, 615, 619, 621, 622, 623, 625, 626, 627, 631, 633, 638, 640, 641, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 665, 666, 667, 668, 669, 670, 671, 672, 674, 675, 676, 677, 679, 681, 682, 683, 685, 686, 687, 688, 689, 690, 691, 693, 694, 695, 696, 697, 698, 699, 701, 702, 703, 704, 705, 706, 707, 708, 713, 714, 719, 723, 724, 725, 731, 732, 733, 735, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 765, 766, 767, 788, 799], "1": [2, 6, 8, 10, 23, 24, 25, 30, 46, 72, 77, 78, 87, 100, 101, 104, 105, 106, 107, 116, 117, 118, 119, 120, 121, 128, 129, 136, 142, 148, 151, 152, 155, 156, 157, 158, 160, 165, 167, 169, 184, 185, 186, 192, 211, 235, 239, 244, 245, 251, 252, 253, 255, 256, 257, 264, 265, 266, 267, 268, 270, 275, 283, 284, 287, 288, 289, 290, 299, 300, 301, 302, 303, 304, 305, 306, 311, 312, 323, 327, 330, 334, 337, 338, 339, 340, 342, 343, 344, 345, 357, 368, 370, 371, 372, 373, 375, 379, 380, 387, 388, 389, 390, 392, 393, 397, 398, 404, 407, 414, 431, 435, 438, 440, 445, 450, 451, 453, 455, 459, 463, 465, 468, 469, 476, 481, 483, 484, 485, 486, 488, 491, 493, 494, 501, 502, 504, 505, 506, 507, 514, 515, 516, 518, 519, 523, 525, 527, 528, 529, 530, 532, 540, 541, 543, 546, 548, 549, 550, 553, 555, 556, 558, 560, 563, 564, 567, 568, 574, 575, 582, 585, 586, 600, 606, 609, 610, 615, 618, 621, 622, 623, 625, 643, 644, 645, 646, 647, 648, 649, 650, 651, 655, 656, 657, 658, 659, 660, 663, 667, 669, 673, 674, 676, 677, 678, 679, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 693, 695, 696, 697, 698, 699, 701, 702, 703, 704, 705, 706, 713, 725, 731, 732, 733, 734, 735, 736, 737, 739, 740, 741, 742, 743, 744, 745, 746, 747, 750, 751, 752, 753, 754, 755, 759, 760, 761, 762, 763, 765, 766, 767, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 808, 810, 811], "2": [2, 6, 8, 23, 24, 25, 72, 87, 100, 101, 104, 105, 106, 107, 118, 119, 136, 140, 155, 156, 157, 158, 160, 165, 167, 184, 185, 186, 239, 251, 255, 256, 264, 266, 270, 275, 283, 284, 287, 288, 289, 290, 301, 302, 305, 306, 320, 321, 323, 327, 331, 334, 338, 339, 340, 342, 343, 344, 345, 357, 368, 370, 371, 372, 373, 375, 378, 379, 386, 387, 390, 392, 393, 397, 398, 404, 407, 431, 450, 451, 453, 465, 467, 469, 476, 481, 485, 486, 488, 490, 491, 493, 494, 501, 502, 504, 505, 506, 507, 514, 516, 518, 519, 523, 530, 532, 540, 541, 543, 548, 555, 556, 558, 560, 563, 564, 567, 568, 571, 572, 575, 582, 585, 600, 615, 621, 643, 646, 647, 648, 649, 650, 655, 656, 657, 658, 659, 660, 663, 664, 665, 667, 669, 670, 671, 674, 676, 677, 679, 681, 682, 686, 687, 688, 689, 690, 691, 693, 695, 696, 698, 699, 701, 702, 703, 704, 706, 731, 732, 733, 734, 735, 736, 737, 739, 740, 741, 742, 743, 744, 745, 746, 747, 750, 751, 753, 754, 755, 762, 763, 765, 767], "3": [2, 6, 8, 23, 25, 100, 101, 104, 105, 106, 107, 118, 119, 157, 158, 160, 165, 167, 184, 185, 186, 239, 251, 255, 256, 264, 266, 270, 275, 283, 284, 287, 288, 289, 290, 301, 302, 305, 306, 320, 323, 327, 331, 334, 340, 342, 343, 344, 345, 368, 370, 371, 372, 373, 378, 379, 387, 390, 393, 396, 397, 398, 407, 431, 450, 453, 469, 476, 481, 485, 486, 488, 493, 501, 502, 504, 505, 507, 514, 516, 518, 519, 523, 540, 541, 543, 548, 555, 556, 558, 560, 563, 567, 568, 575, 582, 585, 615, 621, 623, 643, 644, 645, 646, 648, 649, 650, 655, 656, 657, 658, 659, 660, 663, 667, 669, 674, 676, 677, 680, 681, 682, 686, 687, 688, 689, 690, 691, 693, 695, 696, 698, 699, 701, 702, 703, 704, 706, 731, 732, 733, 734, 735, 736, 737, 739, 740, 741, 742, 743, 744, 745, 746, 747, 750, 751, 753, 754, 755, 760, 762, 763, 765, 767], "y": [2, 6, 8, 24, 25, 72, 87, 104, 105, 106, 107, 118, 119, 157, 158, 160, 165, 167, 185, 186, 239, 251, 252, 256, 264, 266, 270, 275, 287, 288, 289, 290, 301, 302, 305, 306, 325, 327, 331, 334, 340, 342, 368, 370, 371, 372, 373, 374, 375, 379, 386, 387, 390, 392, 393, 397, 398, 404, 431, 451, 465, 469, 474, 481, 485, 486, 488, 491, 493, 494, 501, 502, 504, 505, 506, 507, 514, 516, 519, 540, 541, 543, 548, 555, 556, 558, 560, 563, 564, 567, 568, 574, 575, 582, 583, 585, 615, 621, 622, 623, 627, 631, 643, 649, 650, 652, 656, 657, 658, 659, 663, 669, 676, 677, 681, 682, 683, 685, 686, 687, 688, 689, 690, 691, 693, 695, 696, 698, 699, 701, 702, 703, 706, 733, 734, 735, 736, 737, 739, 740, 741, 742, 743, 744, 745, 747, 750, 751, 753, 754, 755, 759, 760, 762, 763, 765], "4": [2, 6, 25, 104, 105, 118, 119, 152, 153, 154, 155, 156, 157, 158, 159, 160, 165, 184, 185, 186, 239, 251, 255, 256, 264, 266, 270, 275, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 323, 327, 331, 334, 340, 342, 343, 344, 345, 368, 370, 371, 373, 379, 387, 390, 393, 397, 398, 407, 431, 453, 469, 481, 485, 486, 488, 491, 493, 502, 504, 505, 507, 516, 519, 540, 541, 543, 548, 555, 556, 558, 560, 563, 568, 575, 584, 585, 621, 643, 646, 647, 648, 650, 653, 655, 656, 658, 659, 660, 663, 667, 669, 676, 677, 681, 686, 687, 688, 689, 690, 691, 693, 695, 696, 698, 699, 701, 702, 703, 706, 731, 732, 733, 734, 739, 740, 741, 742, 743, 744, 745, 746, 747, 750, 751, 753, 754, 755, 762, 763, 765, 767, 804, 805, 806, 807, 809], "5": [2, 6, 8, 24, 25, 104, 105, 106, 107, 118, 119, 157, 158, 160, 165, 184, 185, 186, 239, 251, 255, 256, 264, 266, 270, 275, 283, 284, 287, 288, 301, 302, 305, 306, 321, 323, 327, 331, 338, 342, 343, 344, 368, 370, 371, 373, 379, 387, 390, 393, 396, 397, 398, 407, 431, 453, 469, 481, 485, 486, 488, 492, 493, 501, 502, 504, 505, 507, 516, 519, 540, 541, 543, 548, 555, 556, 558, 560, 563, 568, 575, 585, 621, 643, 646, 648, 649, 655, 656, 657, 658, 659, 660, 663, 669, 676, 677, 681, 686, 687, 688, 689, 690, 691, 693, 695, 696, 698, 699, 701, 702, 703, 706, 731, 732, 733, 734, 735, 739, 740, 742, 743, 744, 745, 746, 747, 750, 751, 753, 754, 755, 762, 763, 765, 788, 799], "6": [2, 6, 24, 25, 104, 105, 118, 119, 157, 158, 160, 165, 185, 251, 264, 287, 288, 305, 306, 323, 327, 331, 334, 342, 343, 344, 368, 370, 371, 373, 379, 387, 431, 453, 469, 481, 485, 486, 488, 493, 494, 502, 504, 505, 507, 516, 519, 540, 541, 543, 548, 555, 556, 558, 560, 563, 568, 575, 585, 621, 643, 646, 649, 650, 655, 656, 658, 659, 660, 669, 674, 676, 681, 682, 686, 687, 688, 689, 691, 693, 695, 696, 698, 699, 701, 702, 703, 706, 731, 732, 733, 734, 735, 740, 741, 744, 745, 746, 747, 753, 754, 755], "z": [2, 6, 104, 105, 157, 158, 160, 165, 251, 287, 288, 327, 331, 334, 340, 342, 431, 465, 481, 485, 493, 502, 504, 519, 540, 541, 563, 567, 568, 585, 615, 656, 658, 681, 682, 683, 685, 687, 688, 689, 740, 741, 753, 754, 755], "print": [2, 6, 8, 23, 24, 25, 72, 87, 100, 101, 104, 105, 106, 107, 118, 119, 134, 135, 136, 140, 141, 142, 148, 155, 156, 157, 158, 159, 160, 165, 167, 184, 185, 186, 239, 251, 252, 255, 256, 264, 266, 270, 275, 283, 284, 287, 288, 289, 290, 301, 302, 305, 306, 317, 318, 320, 327, 334, 340, 342, 343, 344, 368, 370, 371, 372, 373, 374, 375, 379, 386, 387, 390, 392, 393, 396, 397, 398, 404, 407, 415, 416, 431, 451, 465, 466, 467, 468, 469, 471, 474, 478, 481, 485, 486, 488, 492, 493, 494, 501, 502, 504, 505, 506, 507, 514, 516, 518, 519, 523, 540, 541, 543, 548, 555, 556, 558, 560, 563, 564, 567, 568, 574, 575, 582, 585, 589, 607, 615, 621, 622, 623, 643, 644, 646, 648, 649, 650, 655, 656, 657, 658, 659, 660, 663, 669, 674, 676, 677, 681, 682, 683, 685, 686, 687, 688, 689, 690, 695, 696, 698, 699, 701, 702, 703, 704, 706, 731, 732, 733, 734, 735, 736, 737, 739, 740, 741, 742, 743, 744, 745, 746, 747, 750, 751, 753, 754, 755, 759, 760, 762, 763, 765, 767], "7": [2, 6, 25, 104, 105, 118, 119, 157, 158, 160, 165, 251, 264, 287, 288, 305, 306, 321, 323, 327, 330, 334, 337, 368, 370, 371, 431, 453, 481, 485, 493, 494, 502, 504, 505, 507, 514, 516, 519, 540, 541, 548, 555, 560, 563, 568, 575, 585, 627, 629, 630, 634, 643, 649, 650, 655, 656, 658, 659, 660, 669, 676, 681, 682, 683, 685, 686, 687, 688, 689, 695, 696, 698, 703, 706, 731, 732, 733, 734, 735, 736, 737, 740, 744, 745, 746, 753, 754], "9": [2, 6, 25, 104, 105, 118, 119, 157, 158, 160, 164, 165, 209, 250, 251, 260, 264, 287, 288, 291, 292, 305, 306, 323, 327, 343, 344, 481, 485, 493, 494, 540, 541, 548, 555, 556, 558, 563, 585, 627, 629, 630, 634, 643, 646, 649, 650, 656, 658, 659, 660, 669, 674, 676, 687, 688, 689, 696, 698, 702, 703, 733, 734, 735, 740, 744, 745, 746, 753, 754, 804, 805, 806], "all": [2, 93, 94, 95, 96, 97, 132, 133, 134, 135, 150, 151, 152, 155, 156, 160, 315, 316, 317, 318, 319, 320, 321, 322, 323, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 342, 343, 344, 345, 356, 357, 358, 366, 376, 377, 379, 380, 394, 395, 431, 440, 465, 471, 563, 564, 567, 568, 587, 607, 622, 643, 653, 656, 673, 676, 679, 687, 696, 702, 709, 710, 711, 712, 713, 714, 715, 724, 725, 726, 733, 734, 737, 762, 767, 770, 772], "axi": [2, 7, 9, 10, 26, 30, 36, 38, 59, 60, 61, 68, 70, 72, 77, 78, 81, 82, 83, 85, 91, 116, 117, 118, 119, 128, 129, 130, 131, 132, 133, 155, 156, 160, 166, 168, 169, 188, 192, 198, 200, 224, 225, 226, 234, 237, 239, 244, 245, 248, 249, 253, 257, 266, 267, 268, 271, 273, 279, 299, 300, 301, 302, 311, 312, 313, 314, 315, 316, 327, 330, 334, 335, 337, 338, 340, 342, 345, 356, 368, 373, 379, 388, 389, 431, 433, 436, 443, 456, 457, 458, 459, 460, 461, 462, 463, 475, 563, 575, 576, 585, 625, 656, 658, 660, 678, 679, 681, 683, 684, 685, 686, 687, 691, 692, 693, 694, 695, 696, 698, 702, 703, 704, 705, 706, 707, 708, 733, 739, 740, 741, 742, 750, 751, 752, 753, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766], "keepdim": [2, 7, 9, 59, 60, 61, 68, 83, 85, 91, 130, 131, 132, 133, 155, 156, 160, 166, 168, 224, 225, 226, 234, 271, 273, 279, 313, 314, 315, 316, 563, 625, 656, 665, 679, 740, 741, 742, 753, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766], "fals": [2, 7, 8, 9, 10, 59, 60, 61, 68, 77, 83, 85, 91, 93, 94, 95, 96, 97, 106, 107, 128, 129, 130, 131, 132, 133, 136, 143, 144, 145, 146, 147, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 327, 334, 337, 343, 344, 345, 398, 404, 407, 412, 431, 450, 451, 462, 466, 467, 470, 475, 478, 480, 481, 493, 510, 512, 518, 519, 520, 521, 522, 523, 535, 536, 538, 550, 552, 563, 564, 567, 568, 575, 578, 582, 584, 590, 597, 599, 600, 602, 603, 615, 625, 627, 630, 631, 632, 633, 634, 635, 636, 656, 657, 665, 674, 679, 687, 688, 690, 703, 709, 710, 711, 712, 713, 714, 715, 719, 723, 724, 725, 726, 733, 734, 740, 741, 742, 744, 745, 746, 747, 749, 750, 751, 752, 753, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 777, 778, 800, 801, 804, 805, 806, 807, 808, 809], "all_equ": [2, 106, 107, 160, 252, 289, 290, 563], "equality_matrix": [2, 8, 106, 107, 160, 167, 252, 289, 290, 563, 564], "contain": [2, 8, 93, 96, 97, 106, 107, 150, 153, 154, 155, 156, 159, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 320, 321, 322, 323, 324, 326, 327, 329, 330, 335, 337, 338, 339, 340, 341, 344, 345, 357, 368, 371, 372, 374, 379, 380, 383, 385, 392, 394, 395, 396, 398, 407, 431, 452, 453, 456, 465, 469, 481, 482, 483, 484, 485, 486, 488, 489, 490, 491, 492, 493, 494, 495, 497, 498, 500, 501, 502, 504, 505, 506, 507, 508, 509, 510, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 527, 528, 529, 530, 532, 533, 534, 535, 536, 538, 539, 540, 541, 542, 543, 544, 546, 547, 548, 549, 550, 553, 554, 555, 556, 558, 559, 560, 562, 563, 564, 565, 568, 571, 572, 574, 575, 582, 585, 592, 601, 621, 622, 623, 643, 646, 649, 650, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 667, 668, 669, 670, 671, 673, 674, 675, 676, 677, 678, 679, 681, 682, 683, 685, 686, 687, 688, 689, 695, 696, 697, 698, 702, 703, 706, 709, 710, 711, 712, 713, 726, 731, 732, 733, 734, 736, 737, 740, 741, 742, 743, 744, 745, 746, 747, 749, 750, 751, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 765, 766, 767, 788, 789, 790, 791, 792, 793, 794, 795, 797, 798, 799, 800, 801, 804, 808, 810, 811], "With": [2, 8, 106, 107, 151, 152, 155, 156, 157, 158, 160, 167, 251, 252, 256, 264, 266, 270, 287, 288, 289, 290, 301, 302, 305, 306, 320, 327, 329, 340, 368, 370, 371, 372, 373, 374, 375, 379, 390, 398, 407, 431, 453, 469, 481, 485, 486, 488, 493, 502, 504, 505, 507, 516, 519, 540, 541, 543, 548, 555, 556, 558, 560, 563, 564, 568, 574, 575, 582, 585, 621, 622, 623, 643, 646, 649, 650, 655, 656, 657, 658, 659, 660, 665, 676, 681, 682, 686, 687, 688, 689, 690, 695, 696, 698, 702, 703, 706, 731, 732, 733, 734, 736, 737, 740, 741, 742, 743, 744, 745, 746, 747, 750, 751, 753, 754, 762, 763, 765], "x1": [2, 8, 106, 107, 160, 167, 251, 252, 258, 262, 269, 287, 288, 289, 290, 327, 338, 398, 426, 431, 469, 481, 485, 491, 493, 495, 497, 498, 500, 501, 502, 504, 508, 509, 517, 518, 519, 523, 524, 533, 534, 536, 538, 539, 540, 541, 542, 544, 546, 547, 559, 563, 564, 567, 643, 648, 656, 658, 664, 669, 673, 676, 678, 740, 744], "0": [2, 8, 24, 25, 26, 27, 36, 46, 72, 82, 83, 87, 91, 104, 105, 106, 107, 118, 119, 120, 121, 130, 131, 136, 140, 153, 154, 155, 156, 157, 158, 159, 160, 164, 167, 184, 185, 186, 188, 189, 198, 209, 210, 211, 235, 239, 249, 250, 251, 252, 255, 256, 260, 261, 264, 265, 266, 270, 271, 275, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 321, 325, 326, 327, 340, 342, 343, 344, 345, 368, 370, 371, 372, 373, 374, 375, 379, 380, 384, 388, 389, 393, 394, 395, 396, 397, 398, 404, 407, 414, 431, 433, 436, 440, 443, 447, 450, 451, 453, 456, 457, 458, 459, 460, 461, 462, 463, 465, 469, 472, 474, 475, 479, 481, 482, 483, 484, 485, 486, 488, 489, 490, 491, 492, 493, 495, 497, 501, 502, 504, 505, 506, 507, 514, 515, 516, 519, 525, 527, 528, 530, 532, 540, 541, 542, 543, 546, 547, 548, 549, 550, 553, 554, 555, 556, 558, 560, 562, 563, 564, 567, 568, 571, 572, 574, 575, 576, 582, 585, 586, 591, 600, 606, 609, 610, 615, 621, 622, 623, 627, 629, 630, 634, 635, 643, 644, 646, 648, 649, 650, 655, 656, 657, 658, 659, 660, 663, 674, 676, 677, 679, 681, 682, 683, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 702, 703, 704, 705, 706, 713, 725, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 749, 750, 751, 753, 754, 755, 756, 759, 760, 761, 762, 763, 765, 767, 779, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 810, 811], "mix": [2, 8, 106, 107, 157, 158, 160, 324, 327, 329, 340, 398, 422, 431, 469, 481, 485, 493, 502, 504, 519, 540, 541, 563, 574, 582, 585, 621, 622, 623, 643, 646, 649, 650, 655, 656, 676, 681, 682, 686, 687, 688, 689, 731, 732, 740, 744, 753, 754, 756], "nativearrai": [2, 8, 93, 96, 97, 106, 107, 325, 327, 330, 333, 334, 337, 338, 340, 342, 345, 358, 366, 368, 370, 371, 372, 373, 374, 375, 379, 380, 381, 383, 387, 388, 389, 390, 391, 393, 394, 395, 397, 398, 404, 405, 406, 407, 412, 414, 417, 419, 420, 422, 426, 431, 450, 451, 453, 469, 475, 476, 481, 482, 483, 484, 485, 486, 488, 489, 490, 491, 492, 493, 494, 495, 497, 498, 500, 501, 502, 504, 505, 506, 507, 508, 509, 510, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 527, 528, 529, 530, 532, 533, 534, 535, 536, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 553, 554, 555, 556, 558, 559, 560, 561, 562, 563, 564, 567, 568, 571, 572, 574, 575, 576, 579, 580, 581, 583, 584, 585, 586, 590, 592, 593, 595, 596, 597, 606, 609, 610, 615, 621, 622, 623, 625, 626, 627, 629, 630, 632, 634, 635, 636, 638, 640, 643, 644, 646, 648, 649, 650, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 685, 686, 687, 688, 689, 691, 693, 694, 695, 696, 697, 698, 699, 701, 702, 703, 704, 705, 706, 707, 708, 713, 715, 725, 731, 732, 733, 734, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 759, 760, 761, 762, 763, 765, 766], "native_arrai": [2, 8, 106, 107, 136, 142, 148, 157, 158, 160, 167, 252, 289, 290, 368, 370, 371, 372, 373, 374, 375, 379, 390, 398, 407, 431, 453, 469, 481, 486, 488, 493, 502, 504, 505, 516, 519, 540, 541, 543, 555, 556, 558, 563, 564, 568, 574, 575, 582, 585, 621, 622, 623, 643, 646, 649, 650, 655, 656, 658, 659, 660, 676, 681, 682, 686, 687, 688, 689, 695, 696, 698, 703, 706, 731, 732, 733, 734, 740, 741, 742, 743, 744, 745, 746, 747, 753, 754, 755, 762, 763, 765], "true": [2, 8, 10, 23, 77, 100, 101, 106, 107, 128, 129, 134, 135, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 327, 329, 330, 334, 335, 337, 340, 342, 343, 344, 345, 368, 369, 376, 377, 379, 388, 398, 404, 407, 431, 450, 467, 471, 472, 481, 493, 502, 504, 510, 512, 518, 519, 520, 521, 522, 523, 535, 536, 538, 550, 552, 563, 564, 567, 568, 569, 570, 575, 582, 584, 592, 593, 600, 615, 621, 623, 626, 627, 630, 632, 633, 634, 635, 636, 638, 643, 651, 656, 657, 665, 674, 679, 681, 682, 683, 685, 686, 687, 688, 690, 703, 709, 710, 711, 712, 713, 714, 723, 724, 726, 733, 734, 740, 741, 742, 744, 745, 746, 747, 749, 750, 751, 752, 753, 755, 756, 757, 758, 759, 760, 761, 762, 763, 765, 766, 788, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809], "ani": [2, 93, 94, 95, 132, 133, 134, 135, 136, 140, 148, 150, 151, 152, 155, 156, 160, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 333, 334, 335, 336, 337, 338, 340, 342, 343, 344, 345, 356, 357, 376, 377, 379, 381, 391, 398, 407, 431, 476, 481, 485, 486, 488, 505, 509, 516, 519, 524, 555, 556, 558, 560, 563, 564, 578, 579, 580, 581, 582, 585, 592, 599, 600, 601, 602, 617, 618, 627, 631, 643, 646, 655, 687, 702, 709, 710, 711, 712, 713, 719, 723, 731, 732, 733, 737, 753, 755, 762, 763, 765, 767], "argsort": [2, 128, 129, 160, 311, 312, 750], "descend": [2, 10, 77, 128, 129, 160, 169, 244, 253, 267, 311, 312, 656, 674, 675, 750, 751, 752], "stabl": [2, 10, 77, 128, 129, 160, 169, 244, 253, 267, 311, 312, 320, 340, 357, 563, 588, 589, 611, 612, 617, 618, 750, 751, 752], "asin": [2, 104, 105, 160, 287, 288, 481, 767], "asinh": [2, 104, 105, 160, 287, 288, 481, 767], "atan": [2, 104, 105, 160, 287, 288, 481, 767], "atan2": [2, 104, 105, 160, 287, 288, 481, 767], "atanh": [2, 104, 105, 160, 287, 288, 481, 767], "binary_cross_entropi": [2, 116, 117, 160, 299, 300, 681], "pred": [2, 16, 30, 78, 116, 117, 160, 177, 192, 245, 254, 257, 268, 299, 300, 330, 334, 337, 681, 682, 683, 684, 685, 686], "epsilon": [2, 16, 30, 46, 78, 116, 117, 120, 121, 160, 164, 177, 192, 209, 211, 245, 250, 254, 257, 260, 268, 291, 292, 299, 300, 303, 304, 330, 334, 337, 344, 627, 629, 630, 634, 656, 667, 670, 681, 682, 683, 684, 685, 686, 731, 732, 802, 803, 804, 805, 806], "1e": [2, 16, 30, 46, 78, 116, 117, 120, 121, 160, 164, 177, 192, 209, 211, 245, 250, 254, 257, 260, 268, 291, 292, 299, 300, 303, 304, 330, 334, 337, 344, 345, 563, 589, 627, 629, 630, 634, 656, 674, 681, 682, 683, 684, 685, 686, 731, 732, 767, 804, 805, 806, 807, 809], "07": [2, 16, 30, 78, 116, 117, 160, 164, 177, 192, 209, 245, 250, 254, 257, 260, 268, 291, 292, 299, 300, 344, 627, 629, 630, 634, 681, 682, 683, 684, 685, 686, 804, 805, 806], "bitwise_and": [2, 104, 105, 160, 287, 288, 481], "bitwise_invert": [2, 104, 105, 160, 287, 288, 481], "bitwise_left_shift": [2, 104, 105, 160, 287, 288, 481], "bitwise_or": [2, 104, 105, 160, 287, 288, 481], "bitwise_right_shift": [2, 104, 105, 160, 287, 288, 481], "bitwise_xor": [2, 104, 105, 160, 287, 288, 481], "can_cast": [2, 100, 101, 160, 255, 283, 284, 330, 335, 398], "dtype": [2, 23, 68, 85, 100, 101, 130, 131, 155, 156, 160, 184, 234, 255, 273, 283, 284, 313, 314, 325, 327, 330, 335, 336, 342, 379, 380, 381, 382, 383, 384, 386, 387, 388, 391, 392, 393, 396, 397, 398, 402, 403, 404, 405, 407, 408, 409, 410, 411, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 430, 431, 471, 481, 501, 563, 567, 568, 606, 622, 643, 651, 687, 695, 731, 732, 733, 737, 740, 741, 742, 750, 752, 753, 758, 759, 760, 762, 763, 765, 767, 779, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 810, 811], "float32": [2, 23, 100, 101, 160, 184, 255, 283, 284, 327, 335, 398, 402, 403, 407, 415, 731, 732], "float64": [2, 23, 100, 101, 335, 398, 404, 407, 415], "bool": [2, 23, 93, 94, 95, 96, 97, 100, 101, 155, 156, 317, 318, 327, 334, 335, 337, 345, 376, 377, 379, 386, 398, 404, 407, 409, 410, 411, 412, 415, 418, 419, 420, 430, 431, 450, 451, 466, 475, 478, 481, 493, 494, 498, 500, 502, 504, 509, 518, 519, 520, 521, 522, 523, 524, 534, 535, 536, 538, 544, 563, 564, 567, 568, 575, 578, 582, 584, 590, 592, 597, 599, 600, 601, 602, 615, 625, 626, 627, 638, 656, 657, 665, 674, 679, 687, 703, 709, 710, 711, 712, 713, 714, 715, 719, 723, 724, 725, 733, 734, 740, 741, 742, 750, 751, 752, 753, 755, 756, 757, 758, 759, 760, 761, 762, 763, 765, 766], "ceil": [2, 104, 105, 160, 287, 288, 379, 380, 481, 767], "clip": [2, 118, 119, 155, 156, 160, 256, 301, 302, 330, 334, 337, 340, 343, 345, 481, 540, 541, 563, 571, 572, 687, 690, 767], "x_min": [2, 25, 118, 119, 155, 156, 160, 186, 256, 301, 302, 340, 345, 687, 688, 689, 690], "x_max": [2, 25, 118, 119, 155, 156, 160, 186, 256, 301, 302, 340, 345, 687, 688, 689, 690], "roll": [2, 25, 118, 119, 160, 266, 301, 302, 334, 338, 687], "8": [2, 25, 118, 119, 157, 158, 160, 251, 264, 287, 288, 305, 306, 320, 323, 327, 334, 339, 343, 368, 372, 431, 453, 481, 485, 493, 505, 507, 519, 540, 541, 548, 555, 556, 558, 563, 568, 585, 643, 650, 656, 658, 659, 660, 669, 676, 681, 682, 687, 688, 689, 696, 698, 703, 733, 734, 735, 740, 744, 745, 746, 753, 754, 767, 788, 799], "concat": [2, 118, 119, 155, 156, 160, 301, 302, 431, 460, 461, 462, 463, 475, 563, 584, 687, 767], "xs": [2, 26, 118, 119, 160, 188, 301, 302, 334, 431, 454, 458, 460, 461, 462, 563, 564, 568, 627, 631, 687, 691, 692, 693], "constant_pad": [2, 118, 119, 160, 301, 302, 687], "pad_width": [2, 27, 92, 118, 119, 160, 189, 280, 301, 302, 687, 694, 708], "valu": [2, 27, 118, 119, 155, 156, 157, 158, 159, 160, 189, 280, 301, 302, 321, 327, 329, 330, 334, 335, 336, 337, 338, 340, 342, 345, 357, 379, 380, 384, 386, 387, 388, 389, 398, 404, 409, 410, 411, 431, 443, 474, 475, 481, 482, 483, 485, 486, 488, 490, 505, 509, 510, 513, 516, 517, 518, 519, 523, 524, 540, 541, 542, 544, 545, 546, 548, 562, 563, 571, 572, 573, 578, 584, 585, 586, 591, 594, 598, 608, 609, 610, 611, 612, 613, 626, 627, 629, 630, 631, 634, 638, 642, 643, 644, 645, 646, 647, 648, 649, 650, 653, 654, 655, 656, 667, 670, 671, 672, 673, 674, 675, 679, 687, 688, 689, 694, 698, 699, 701, 708, 709, 710, 711, 713, 717, 718, 719, 720, 721, 726, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 740, 741, 742, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 755, 756, 757, 758, 759, 760, 761, 788, 789, 790, 791, 792, 793, 794, 795, 799, 800, 801, 802, 803, 804, 805, 806, 808], "co": [2, 104, 105, 151, 160, 287, 288, 340, 356, 481, 563, 584, 767], "cosh": [2, 104, 105, 160, 287, 288, 481, 767], "cross_entropi": [2, 116, 117, 160, 299, 300, 330, 334, 337, 681, 686], "divid": [2, 104, 105, 155, 156, 160, 287, 288, 327, 333, 481, 517, 563, 617, 687, 703], "einsum": [2, 130, 131, 160, 313, 314, 753], "equat": [2, 32, 130, 131, 160, 194, 313, 314, 656, 673, 753, 754], "equal": [2, 104, 105, 155, 156, 160, 287, 288, 327, 334, 335, 379, 384, 386, 387, 398, 404, 481, 495, 497, 501, 520, 521, 546, 548, 563, 564, 567, 568, 656, 660, 667, 670, 687, 688, 689, 694, 703, 708, 733, 737, 745, 746, 747, 749, 750, 751, 752, 753, 756, 759, 760, 761], "erf": [2, 104, 105, 160, 287, 288, 481], "exp": [2, 104, 105, 160, 287, 288, 481, 515, 533, 767], "expand_dim": [2, 118, 119, 160, 301, 302, 340, 343, 687, 767], "expm1": [2, 104, 105, 160, 287, 288, 481], "flip": [2, 118, 119, 160, 301, 302, 342, 343, 345, 481, 494, 687, 698, 767], "floor": [2, 104, 105, 160, 287, 288, 481, 501, 563, 583, 767], "floor_divid": [2, 104, 105, 160, 287, 288, 481], "greater": [2, 104, 105, 155, 156, 160, 287, 288, 481, 483, 486, 488, 491, 495, 497, 501, 516, 517, 546, 547, 549, 562, 656, 658, 687, 704, 733, 737], "greater_equ": [2, 104, 105, 160, 287, 288, 481], "isfinit": [2, 104, 105, 160, 287, 288, 481], "isinf": [2, 104, 105, 160, 287, 288, 481], "isnan": [2, 104, 105, 160, 287, 288, 481], "layer_norm": [2, 120, 121, 160, 303, 304, 731], "normalized_idx": [2, 46, 120, 121, 160, 211, 303, 304, 731, 732], "05": [2, 46, 120, 121, 160, 211, 303, 304, 431, 731, 732], "scale": [2, 46, 120, 121, 160, 211, 303, 304, 334, 431, 473, 474, 627, 635, 643, 651, 654, 655, 731, 732, 788, 796, 799, 804, 807], "offset": [2, 46, 120, 121, 160, 211, 303, 304, 656, 660, 677, 731, 732], "new_std": [2, 46, 120, 121, 160, 211, 303, 304, 731, 732, 802, 803], "less": [2, 104, 105, 151, 155, 156, 160, 287, 288, 321, 327, 334, 338, 339, 340, 481, 483, 484, 486, 488, 491, 505, 525, 527, 528, 530, 532, 546, 547, 549, 555, 656, 667, 670, 679, 733, 737, 753, 761], "less_equ": [2, 104, 105, 160, 287, 288, 481], "log": [2, 104, 105, 160, 287, 288, 320, 321, 330, 334, 337, 340, 343, 379, 389, 481, 529, 533, 656, 672, 767], "log10": [2, 104, 105, 160, 287, 288, 481], "log1p": [2, 104, 105, 160, 287, 288, 481], "log2": [2, 104, 105, 160, 287, 288, 481], "logaddexp": [2, 104, 105, 160, 287, 288, 481], "logical_and": [2, 104, 105, 160, 287, 288, 481, 767], "logical_not": [2, 104, 105, 160, 287, 288, 481, 767], "logical_or": [2, 104, 105, 160, 287, 288, 481, 767], "logical_xor": [2, 104, 105, 160, 287, 288, 481], "matmul": [2, 114, 115, 160, 297, 298, 325, 331, 340, 656, 674, 767], "max": [2, 130, 131, 155, 156, 160, 313, 314, 398, 414, 417, 481, 540, 563, 571, 572, 580, 609, 610, 656, 667, 670, 753, 804, 806], "mean": [2, 130, 131, 155, 156, 160, 313, 314, 317, 318, 320, 321, 324, 327, 330, 334, 335, 336, 337, 340, 342, 343, 344, 345, 356, 357, 431, 460, 461, 462, 463, 475, 563, 580, 709, 710, 711, 712, 713, 719, 733, 736, 745, 746, 753, 767, 779], "min": [2, 130, 131, 155, 156, 160, 313, 314, 398, 414, 417, 481, 541, 563, 580, 609, 610, 617, 656, 671, 674, 675, 679, 753], "multipli": [2, 104, 105, 160, 287, 288, 327, 331, 333, 481, 563, 575], "neg": [2, 104, 105, 160, 287, 288, 330, 334, 337, 368, 370, 379, 380, 384, 481, 520, 521, 542, 546, 547, 656, 674, 678, 679, 687, 696, 702, 762, 763, 765, 766], "not_equ": [2, 104, 105, 160, 287, 288, 481], "permute_dim": [2, 118, 119, 160, 301, 302, 687], "ax": [2, 65, 118, 119, 155, 156, 160, 231, 301, 302, 325, 327, 335, 342, 431, 475, 563, 575, 656, 665, 673, 676, 679, 687, 694, 696, 697, 702, 704, 706, 708, 740, 741, 742, 753, 755, 756, 757, 758, 759, 760, 761, 762, 763, 765, 766], "posit": [2, 93, 94, 95, 104, 105, 160, 287, 288, 338, 343, 356, 378, 379, 384, 398, 414, 431, 455, 459, 463, 481, 482, 520, 521, 542, 547, 563, 584, 656, 657, 687, 695, 702, 733, 738, 740, 743, 762, 763, 765, 766, 777, 778], "pow": [2, 104, 105, 160, 287, 288, 481], "prod": [2, 130, 131, 155, 156, 160, 313, 314, 327, 335, 563, 580, 753], "remaind": [2, 104, 105, 155, 156, 160, 287, 288, 481, 563, 583, 687, 703], "repeat": [2, 118, 119, 155, 156, 160, 301, 302, 321, 326, 327, 331, 333, 334, 563, 581, 687, 707], "reshap": [2, 118, 119, 155, 156, 160, 301, 302, 337, 340, 342, 345, 687, 767], "shape": [2, 71, 118, 119, 155, 156, 160, 238, 264, 265, 301, 302, 305, 306, 321, 325, 326, 327, 335, 336, 337, 338, 340, 342, 343, 344, 345, 368, 371, 379, 382, 383, 386, 387, 390, 392, 393, 394, 395, 396, 397, 398, 404, 405, 406, 431, 443, 471, 476, 481, 482, 483, 484, 485, 486, 488, 489, 490, 491, 493, 494, 495, 497, 498, 500, 501, 502, 504, 505, 506, 507, 514, 515, 516, 519, 520, 521, 522, 523, 525, 527, 528, 529, 530, 532, 533, 534, 535, 536, 538, 539, 542, 543, 544, 546, 547, 548, 549, 550, 553, 554, 555, 556, 558, 559, 560, 563, 572, 583, 586, 590, 606, 609, 610, 616, 643, 645, 646, 647, 649, 650, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 667, 668, 669, 670, 671, 673, 674, 675, 677, 678, 681, 682, 683, 685, 686, 687, 688, 689, 691, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 708, 733, 735, 736, 737, 740, 741, 743, 750, 751, 752, 753, 754, 762, 763, 765, 766, 767, 788, 790, 791, 792, 793, 794, 795, 802, 803], "shift": [2, 72, 118, 119, 160, 239, 266, 301, 302, 327, 338, 481, 495, 497, 501, 687, 702], "round": [2, 104, 105, 150, 151, 152, 160, 287, 288, 320, 321, 322, 323, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 342, 343, 344, 345, 356, 481, 485, 505, 516, 517, 542, 555, 562, 767], "sign": [2, 104, 105, 151, 160, 287, 288, 320, 341, 345, 379, 380, 481, 482, 485, 491, 501, 542, 547, 656, 672, 745, 746, 747, 749, 753, 758, 760], "sin": [2, 104, 105, 160, 287, 288, 333, 340, 481, 563, 584, 767], "sinh": [2, 104, 105, 160, 287, 288, 481, 767], "sort": [2, 129, 155, 156, 157, 158, 159, 160, 312, 325, 656, 661, 674, 675, 751], "sparse_cross_entropi": [2, 116, 117, 160, 299, 300, 681], "sqrt": [2, 104, 105, 160, 287, 288, 481, 656, 679], "squar": [2, 104, 105, 160, 287, 288, 481, 555, 643, 646, 656, 657, 659, 661, 662, 663, 666, 672, 673, 674], "squeez": [2, 118, 119, 160, 301, 302, 687, 767], "stack": [2, 118, 119, 155, 156, 160, 301, 302, 340, 379, 394, 395, 656, 659, 660, 661, 662, 663, 664, 666, 667, 668, 670, 671, 674, 675, 677, 687, 713, 714, 723, 724, 767, 788, 797], "std": [2, 130, 131, 160, 313, 314, 327, 733, 736, 745, 746, 753], "correct": [2, 83, 91, 130, 131, 160, 271, 279, 313, 314, 321, 322, 324, 330, 334, 335, 336, 338, 398, 426, 687, 688, 689, 753, 759, 761, 767], "subtract": [2, 104, 105, 160, 287, 288, 327, 333, 481], "sum": [2, 130, 131, 155, 156, 160, 313, 314, 330, 334, 335, 337, 340, 431, 460, 461, 462, 463, 475, 481, 485, 533, 563, 576, 580, 609, 610, 643, 655, 656, 674, 677, 679, 753, 754, 759], "swapax": [2, 118, 119, 160, 301, 302, 687], "axis0": [2, 86, 118, 119, 160, 274, 301, 302, 687, 706], "axis1": [2, 86, 118, 119, 160, 274, 301, 302, 656, 660, 687, 706], "tan": [2, 104, 105, 160, 270, 287, 288, 326, 330, 334, 337, 338, 340, 481, 486, 488, 745, 746, 747, 750, 751, 767], "56": [2, 87, 104, 105, 160, 270, 275, 287, 288, 327, 481, 555, 560, 656, 669, 753, 754], "19": [2, 87, 104, 105, 160, 270, 275, 287, 288, 327, 481, 502, 504, 560, 656, 660], "tanh": [2, 104, 105, 160, 287, 288, 340, 368, 481, 767], "tile": [2, 118, 119, 160, 301, 302, 687, 767], "rep": [2, 89, 118, 119, 160, 277, 301, 302, 687, 707], "trunc": [2, 104, 105, 160, 287, 288, 481], "var": [2, 130, 131, 160, 313, 314, 317, 318, 327, 340, 709, 710, 711, 753], "zero_pad": [2, 118, 119, 160, 301, 302, 687, 767], "method": [3, 6, 8, 23, 24, 25, 72, 87, 100, 101, 104, 105, 106, 107, 118, 119, 134, 135, 155, 156, 157, 158, 159, 165, 167, 184, 185, 186, 239, 251, 252, 255, 256, 264, 266, 270, 275, 283, 284, 287, 288, 289, 290, 301, 302, 305, 306, 317, 318, 322, 325, 326, 327, 329, 330, 333, 338, 340, 341, 344, 345, 357, 368, 370, 371, 372, 373, 374, 375, 379, 385, 390, 481, 486, 488, 493, 502, 504, 505, 507, 516, 519, 540, 541, 543, 548, 555, 556, 558, 563, 573, 574, 585, 609, 610, 621, 623, 627, 634, 635, 643, 649, 655, 656, 657, 658, 659, 681, 682, 687, 688, 690, 695, 696, 698, 703, 706, 713, 714, 724, 725, 726, 731, 732, 733, 736, 737, 740, 741, 742, 743, 744, 745, 746, 747, 750, 751, 753, 754, 755, 762, 763, 765, 767, 788, 799, 800, 801], "collect": [93, 155, 156, 329, 356, 368, 376, 431, 563, 627, 643, 681, 713, 726, 731, 733, 774, 788, 802, 804], "accept": [93, 320, 321, 326, 327, 329, 330, 333, 334, 336, 337, 338, 342, 379, 390, 398, 407, 481, 485, 486, 488, 493, 502, 504, 505, 507, 516, 535, 536, 538, 547, 548, 555, 556, 558, 560, 563, 585, 643, 646, 655, 656, 659, 687, 695, 696, 702, 731, 732, 745, 746, 747, 750, 751, 753, 755, 756, 762, 763, 765, 767], "args_to_ivi": 93, "arg": [93, 94, 95, 136, 140, 155, 156, 323, 340, 342, 344, 431, 440, 455, 459, 463, 475, 563, 610, 777, 778, 800, 801], "include_deriv": [93, 94, 95, 96, 97, 713, 715, 725], "kwarg": [93, 94, 95, 136, 140, 153, 154, 155, 156, 157, 158, 159, 160, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 340, 342, 344, 431, 440, 455, 459, 463, 563, 603, 777, 778, 800, 801], "keyword": [93, 94, 95, 155, 156, 157, 158, 159, 325, 335, 336, 337, 338, 343, 379, 390, 431, 440, 441, 455, 459, 463, 563, 566, 603, 713, 719, 753, 760, 800, 801], "variabl": [93, 94, 95, 96, 97, 155, 156, 157, 158, 326, 331, 334, 335, 337, 338, 343, 344, 345, 357, 563, 569, 595, 596, 597, 598, 599, 600, 602, 619, 627, 630, 631, 632, 633, 634, 635, 636, 638, 641, 643, 654, 656, 673, 709, 710, 711, 712, 731, 732, 767, 777, 778, 779, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811], "form": [93, 94, 95, 96, 97, 151, 155, 156, 319, 330, 344, 345, 379, 381, 391, 394, 395, 563, 565, 627, 630, 632, 634, 635, 636, 643, 656, 657, 659, 660, 661, 662, 663, 667, 668, 670, 671, 673, 674, 675, 677, 713, 715, 725], "nest": [93, 94, 95, 96, 97, 155, 156, 157, 158, 159, 325, 330, 333, 334, 342, 343, 344, 357, 431, 455, 459, 463, 563, 621, 709, 710, 711, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 800, 801, 804, 805, 806, 807, 808, 809], "otherwis": [93, 94, 95, 96, 97, 136, 148, 155, 156, 333, 335, 336, 338, 340, 342, 379, 380, 398, 404, 407, 409, 410, 411, 431, 450, 481, 520, 521, 522, 563, 569, 624, 627, 633, 638, 656, 657, 659, 678, 679, 709, 710, 711, 713, 726, 740, 741, 742, 744, 753, 755, 756, 757, 758, 759, 760, 761, 762, 763, 765, 766], "argument": [93, 94, 95, 96, 97, 136, 140, 141, 150, 155, 156, 157, 158, 159, 322, 324, 325, 326, 327, 329, 330, 331, 333, 334, 340, 342, 343, 376, 377, 379, 380, 398, 407, 422, 431, 440, 441, 455, 459, 463, 481, 485, 486, 488, 505, 516, 555, 556, 558, 560, 563, 565, 566, 570, 578, 585, 603, 610, 643, 646, 655, 687, 702, 713, 719, 731, 732, 753, 755, 760, 762, 763, 765, 770, 772, 777, 778, 800, 801], "ar": [93, 94, 95, 150, 151, 152, 155, 156, 157, 158, 159, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 356, 357, 358, 366, 379, 380, 431, 440, 441, 465, 469, 471, 475, 481, 506, 535, 536, 538, 548, 550, 553, 560, 563, 564, 567, 568, 569, 587, 593, 594, 598, 605, 607, 619, 643, 652, 656, 658, 664, 665, 667, 670, 674, 675, 678, 687, 688, 689, 696, 702, 713, 715, 719, 725, 733, 736, 737, 740, 741, 742, 743, 745, 746, 767, 810, 811], "unchang": [93, 94, 95, 96, 97], "paramet": [93, 94, 95, 96, 97, 134, 135, 136, 140, 141, 155, 156, 157, 158, 159, 317, 318, 325, 326, 329, 342, 343, 356, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 430, 431, 440, 441, 444, 445, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 467, 469, 470, 471, 472, 473, 474, 475, 476, 477, 480, 481, 482, 483, 484, 485, 486, 488, 489, 490, 491, 492, 493, 494, 495, 497, 498, 500, 501, 502, 504, 505, 506, 507, 508, 509, 510, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 527, 528, 529, 530, 532, 533, 534, 535, 536, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 553, 554, 555, 556, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 575, 576, 578, 579, 580, 581, 582, 583, 584, 585, 586, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 606, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 621, 622, 623, 624, 625, 626, 627, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 685, 686, 687, 688, 689, 691, 693, 694, 695, 696, 697, 698, 699, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 765, 766, 770, 772, 777, 778, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811], "iter": [93, 94, 95, 96, 97, 134, 135, 152, 155, 156, 157, 158, 159, 317, 318, 334, 340, 343, 376, 377, 431, 453, 454, 456, 457, 458, 459, 462, 475, 563, 564, 610, 615, 687, 694, 698, 703, 707, 708, 713, 714, 715, 719, 723, 724, 725], "The": [93, 94, 95, 96, 97, 136, 140, 141, 149, 150, 152, 155, 156, 157, 158, 159, 319, 320, 322, 323, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 343, 344, 345, 356, 368, 369, 370, 373, 375, 376, 377, 379, 380, 385, 389, 390, 394, 395, 398, 402, 403, 404, 408, 413, 415, 416, 418, 421, 426, 430, 431, 440, 441, 447, 448, 449, 450, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 469, 470, 471, 472, 473, 474, 475, 477, 480, 481, 482, 483, 484, 485, 486, 488, 489, 490, 491, 492, 493, 494, 495, 497, 498, 500, 501, 502, 504, 505, 506, 507, 508, 509, 510, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 527, 528, 530, 532, 533, 534, 535, 536, 538, 539, 542, 544, 546, 547, 548, 549, 550, 553, 554, 555, 560, 562, 563, 565, 567, 570, 571, 577, 578, 584, 586, 595, 596, 597, 599, 600, 601, 602, 604, 609, 610, 611, 612, 613, 616, 617, 618, 626, 627, 629, 630, 632, 634, 635, 636, 638, 641, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 665, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 681, 682, 683, 685, 686, 687, 691, 693, 694, 695, 696, 697, 698, 699, 701, 703, 707, 709, 710, 711, 712, 713, 714, 715, 716, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 736, 740, 741, 742, 743, 745, 746, 747, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 765, 766, 767, 777, 778, 788, 789, 790, 791, 792, 793, 794, 795, 796, 798, 799, 800, 801, 802, 803, 804, 806, 807, 808], "check": [93, 94, 95, 96, 97, 150, 151, 152, 155, 156, 320, 321, 334, 339, 340, 342, 343, 344, 345, 356, 398, 408, 415, 416, 418, 430, 431, 470, 480, 563, 569, 582, 592, 599, 600, 601, 602, 619, 626, 627, 633, 656, 661, 713, 714, 723, 724, 725, 767], "option": [93, 94, 95, 96, 97, 134, 135, 136, 141, 155, 156, 317, 318, 320, 321, 325, 326, 327, 330, 334, 335, 336, 337, 338, 340, 345, 357, 368, 370, 371, 373, 376, 377, 379, 380, 381, 382, 383, 384, 386, 387, 388, 389, 390, 391, 392, 393, 396, 397, 398, 408, 409, 410, 411, 418, 430, 431, 450, 474, 475, 476, 481, 482, 483, 484, 485, 486, 488, 489, 490, 491, 493, 494, 495, 497, 498, 500, 501, 502, 504, 505, 506, 507, 514, 515, 516, 520, 521, 522, 523, 525, 527, 528, 529, 530, 532, 533, 534, 535, 536, 538, 539, 542, 543, 544, 546, 547, 548, 549, 550, 553, 554, 555, 556, 558, 559, 560, 563, 565, 572, 575, 576, 577, 583, 585, 604, 606, 609, 610, 617, 618, 627, 638, 643, 646, 649, 650, 655, 656, 665, 667, 670, 679, 681, 682, 683, 685, 686, 687, 688, 689, 691, 693, 695, 696, 697, 698, 702, 703, 704, 705, 706, 709, 710, 711, 712, 713, 714, 719, 724, 725, 731, 732, 733, 734, 735, 736, 737, 740, 741, 742, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 765, 766], "dict": [93, 94, 95, 96, 97, 136, 148, 155, 156, 157, 158, 159, 334, 343, 344, 431, 440, 441, 450, 453, 456, 457, 458, 459, 563, 565, 579, 580, 581, 713, 715, 716, 719, 722, 725, 726], "whether": [93, 94, 95, 96, 97, 155, 156, 157, 158, 159, 317, 318, 319, 320, 335, 337, 338, 368, 369, 376, 377, 398, 404, 412, 418, 419, 420, 430, 431, 450, 451, 462, 466, 467, 470, 471, 475, 478, 480, 481, 522, 563, 564, 567, 568, 575, 578, 582, 584, 590, 592, 594, 597, 598, 599, 600, 601, 602, 603, 615, 619, 625, 626, 627, 630, 631, 632, 633, 634, 635, 636, 638, 643, 651, 656, 661, 709, 710, 711, 712, 713, 714, 715, 719, 723, 724, 725, 726, 733, 734, 762, 763, 765, 766, 777, 778, 788, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809], "recurs": [93, 94, 95, 96, 97, 155, 156, 320, 323, 330, 334, 344, 357, 713, 714, 715, 723, 724, 725], "deriv": [93, 94, 95, 96, 97, 335, 336, 342, 344, 379, 383, 387, 393, 397, 627, 629, 630, 632, 634, 635, 636, 713, 715, 725, 800, 804, 808, 810], "from": [93, 94, 95, 96, 97, 134, 135, 136, 140, 141, 142, 150, 151, 152, 155, 156, 157, 158, 159, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 329, 331, 333, 334, 335, 336, 337, 338, 340, 342, 343, 344, 345, 356, 357, 379, 380, 381, 383, 385, 386, 387, 390, 391, 393, 397, 398, 407, 422, 431, 440, 441, 450, 465, 469, 474, 475, 481, 518, 555, 563, 578, 585, 586, 621, 627, 630, 634, 643, 651, 654, 656, 660, 674, 678, 687, 696, 699, 701, 704, 709, 710, 711, 712, 713, 715, 725, 726, 733, 734, 735, 736, 737, 740, 744, 745, 746, 748, 753, 758, 759, 760, 761, 762, 763, 765, 766, 767, 773, 777, 778, 788, 796, 799, 804, 808], "tupl": [93, 94, 95, 96, 97, 155, 156, 325, 334, 335, 336, 338, 342, 343, 344, 357, 376, 377, 379, 381, 382, 386, 391, 392, 396, 398, 406, 416, 431, 450, 563, 584, 616, 643, 646, 649, 650, 656, 667, 670, 674, 676, 679, 687, 691, 693, 694, 696, 697, 702, 704, 705, 708, 709, 710, 711, 712, 713, 715, 716, 718, 720, 721, 722, 724, 725, 727, 728, 729, 730, 733, 736, 737, 740, 743, 745, 746, 747, 748, 753, 755, 756, 757, 758, 759, 760, 761, 762, 763, 765, 766], "list": [93, 94, 95, 96, 97, 134, 135, 155, 156, 317, 318, 320, 322, 323, 325, 327, 335, 336, 338, 340, 343, 344, 345, 357, 379, 380, 381, 382, 390, 391, 392, 396, 398, 405, 431, 440, 441, 450, 452, 453, 456, 457, 460, 461, 475, 563, 568, 616, 621, 625, 643, 644, 645, 646, 647, 648, 649, 650, 656, 676, 687, 691, 693, 696, 703, 705, 713, 714, 715, 719, 724, 725, 731, 732, 740, 743, 762, 763, 765, 766, 767, 788, 789, 790, 791, 792, 793, 794, 795], "default": [93, 94, 95, 96, 97, 134, 135, 136, 141, 155, 156, 157, 158, 159, 317, 318, 321, 326, 327, 330, 331, 334, 335, 336, 338, 344, 368, 369, 370, 371, 373, 376, 377, 379, 380, 381, 382, 383, 384, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 404, 409, 410, 411, 412, 431, 440, 441, 450, 451, 455, 456, 457, 458, 459, 460, 461, 462, 463, 470, 472, 473, 474, 475, 476, 479, 480, 481, 482, 483, 484, 485, 486, 488, 489, 490, 491, 493, 494, 495, 497, 498, 500, 501, 502, 504, 505, 506, 507, 514, 515, 516, 520, 521, 522, 523, 525, 527, 528, 529, 530, 532, 533, 534, 535, 536, 538, 539, 542, 543, 544, 546, 547, 548, 549, 550, 553, 554, 555, 556, 558, 559, 560, 563, 564, 565, 571, 572, 575, 576, 583, 584, 585, 590, 591, 592, 594, 597, 598, 599, 600, 602, 603, 604, 606, 608, 609, 610, 613, 615, 617, 618, 625, 626, 627, 629, 630, 631, 632, 633, 634, 635, 636, 638, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 660, 665, 667, 670, 671, 674, 676, 677, 678, 679, 681, 682, 683, 685, 686, 687, 688, 689, 691, 693, 694, 695, 696, 697, 698, 702, 703, 704, 705, 706, 709, 710, 711, 712, 713, 714, 715, 719, 723, 724, 725, 726, 731, 732, 733, 734, 735, 736, 737, 738, 740, 741, 742, 743, 745, 746, 747, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 765, 766, 777, 778, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811], "str": [93, 94, 95, 136, 141, 155, 156, 335, 336, 379, 390, 398, 402, 408, 409, 410, 413, 414, 417, 418, 419, 420, 423, 424, 425, 430, 431, 447, 450, 451, 453, 456, 457, 458, 459, 475, 563, 565, 577, 579, 580, 581, 604, 609, 610, 643, 644, 646, 648, 649, 650, 656, 671, 709, 710, 711, 712, 713, 719, 753, 754], "kei": [93, 94, 95, 155, 156, 157, 158, 159, 334, 343, 431, 443, 563, 565, 573, 643, 654, 655, 709, 710, 711, 713, 716, 722, 726, 777, 778, 788, 799, 804, 808], "word": [93, 94, 95, 379, 380, 733, 737, 777, 778], "ret": [93, 94, 95, 96, 97, 136, 140, 141, 148, 155, 156, 325, 326, 340, 345, 368, 369, 370, 371, 372, 373, 374, 375, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 402, 403, 404, 405, 406, 407, 408, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 430, 431, 440, 447, 448, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 474, 475, 476, 477, 478, 480, 481, 482, 483, 484, 485, 486, 488, 489, 490, 491, 492, 493, 494, 495, 497, 498, 500, 501, 502, 504, 505, 506, 507, 508, 509, 510, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 527, 528, 529, 530, 532, 533, 534, 535, 536, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 553, 554, 555, 556, 558, 559, 560, 561, 562, 563, 564, 565, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 589, 590, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 606, 609, 610, 615, 617, 618, 619, 621, 622, 623, 625, 626, 627, 629, 630, 631, 632, 633, 634, 635, 636, 638, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 685, 686, 687, 688, 689, 691, 693, 694, 695, 696, 697, 698, 699, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 719, 723, 724, 725, 731, 732, 733, 734, 735, 736, 737, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 765, 766, 770, 772, 777, 778, 804, 808], "same": [93, 94, 95, 150, 152, 155, 156, 320, 321, 323, 325, 327, 329, 330, 333, 334, 336, 337, 338, 340, 342, 344, 345, 379, 380, 383, 387, 390, 393, 394, 395, 397, 398, 404, 405, 406, 431, 440, 441, 475, 481, 482, 485, 494, 505, 516, 542, 547, 548, 549, 562, 563, 583, 585, 586, 606, 609, 610, 627, 633, 638, 643, 644, 645, 646, 647, 648, 649, 650, 655, 656, 657, 658, 659, 660, 661, 662, 663, 668, 670, 671, 673, 674, 677, 678, 687, 691, 693, 696, 697, 702, 704, 705, 709, 710, 711, 713, 726, 745, 746, 747, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 760, 761, 767, 788, 789, 790, 791, 792, 793, 794, 795], "convert": [93, 94, 95, 96, 97, 152, 155, 156, 333, 340, 357, 358, 366, 379, 381, 391, 398, 402, 403, 431, 447, 448, 449, 450, 470, 477, 480, 563, 616, 622, 623, 656, 680, 713, 715, 725, 726, 778], "args_to_n": [93, 337, 342], "nativ": [93, 95, 96, 97, 136, 142, 155, 156, 335, 337, 342, 343, 379, 391, 398, 402, 403, 408, 431, 447, 448, 449, 450, 451, 470, 477, 480, 563, 597, 599, 602, 777, 778], "backend": [93, 95, 97, 140, 141, 142, 148, 150, 155, 156, 321, 322, 324, 326, 328, 329, 330, 332, 333, 334, 335, 336, 337, 338, 341, 342, 345, 398, 415, 416, 418, 430, 431, 466, 468, 478, 563, 594, 597, 598, 604, 627, 630, 632, 634, 635, 636, 641, 767, 773, 777, 778, 804, 805, 806, 807, 808, 809], "to_ivi": [93, 155, 156, 342, 713, 726], "input": [93, 96, 97, 155, 156, 157, 158, 159, 160, 251, 252, 256, 264, 266, 270, 287, 288, 289, 290, 301, 302, 305, 306, 325, 326, 327, 329, 330, 331, 333, 334, 335, 336, 337, 338, 340, 342, 343, 344, 345, 357, 358, 366, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 379, 381, 383, 385, 387, 390, 391, 393, 394, 395, 397, 398, 404, 405, 407, 408, 409, 410, 411, 412, 413, 419, 420, 421, 422, 426, 431, 440, 441, 450, 451, 452, 453, 455, 456, 459, 463, 469, 475, 476, 481, 482, 483, 484, 485, 486, 488, 489, 490, 491, 492, 493, 494, 495, 497, 498, 500, 501, 502, 504, 505, 506, 507, 508, 509, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 527, 528, 529, 530, 532, 533, 534, 535, 536, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 553, 554, 555, 556, 558, 559, 560, 561, 562, 563, 564, 565, 567, 568, 569, 571, 572, 574, 575, 576, 578, 579, 580, 581, 582, 583, 584, 585, 590, 592, 593, 595, 596, 597, 599, 600, 601, 602, 615, 616, 619, 621, 622, 623, 625, 626, 627, 631, 633, 638, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 667, 668, 669, 670, 671, 674, 675, 676, 677, 678, 679, 681, 682, 683, 685, 686, 687, 688, 689, 690, 691, 693, 694, 695, 696, 697, 698, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 731, 732, 733, 734, 735, 736, 737, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 765, 766, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 802, 803], "an": [93, 96, 97, 134, 135, 151, 152, 155, 156, 317, 318, 320, 321, 322, 323, 325, 326, 327, 329, 330, 331, 333, 334, 335, 336, 337, 338, 340, 342, 343, 344, 345, 356, 357, 368, 371, 372, 374, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 404, 405, 406, 407, 414, 419, 420, 422, 431, 453, 457, 476, 481, 482, 483, 484, 485, 486, 488, 489, 490, 491, 492, 493, 494, 495, 497, 498, 500, 501, 502, 504, 505, 506, 507, 508, 509, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 527, 528, 529, 530, 532, 533, 534, 535, 536, 538, 539, 540, 541, 542, 543, 544, 546, 547, 548, 549, 550, 553, 554, 555, 556, 558, 559, 560, 562, 563, 570, 571, 572, 574, 583, 584, 585, 593, 597, 599, 600, 601, 602, 622, 623, 624, 627, 633, 638, 640, 641, 643, 646, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 666, 667, 668, 670, 671, 672, 673, 674, 677, 678, 679, 687, 688, 689, 691, 693, 694, 695, 696, 697, 699, 701, 702, 703, 704, 705, 706, 707, 708, 713, 719, 731, 732, 733, 735, 739, 740, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 765, 766, 767, 777, 778, 800, 801, 804, 805, 806, 808], "If": [93, 96, 97, 136, 140, 141, 142, 150, 155, 156, 319, 320, 321, 322, 323, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 342, 343, 345, 357, 379, 380, 382, 383, 384, 386, 387, 390, 392, 393, 394, 395, 396, 397, 398, 404, 406, 422, 431, 450, 474, 481, 482, 483, 484, 485, 486, 488, 489, 490, 491, 505, 506, 507, 514, 515, 516, 525, 527, 528, 530, 532, 533, 535, 536, 538, 542, 546, 547, 548, 549, 550, 553, 554, 555, 560, 562, 563, 597, 627, 630, 632, 634, 635, 636, 656, 657, 658, 665, 667, 670, 671, 673, 674, 678, 679, 681, 682, 683, 685, 686, 687, 695, 696, 702, 703, 704, 705, 709, 710, 711, 713, 725, 726, 733, 736, 737, 740, 741, 742, 743, 745, 746, 747, 749, 750, 751, 752, 753, 755, 756, 757, 758, 759, 760, 761, 762, 763, 765, 766, 767], "set": [93, 96, 97, 127, 136, 140, 141, 142, 148, 150, 155, 156, 310, 319, 321, 324, 325, 330, 332, 333, 334, 335, 336, 337, 340, 342, 343, 431, 450, 460, 461, 472, 473, 474, 475, 481, 491, 563, 564, 611, 612, 613, 614, 627, 630, 632, 633, 634, 635, 636, 656, 658, 665, 667, 670, 673, 713, 714, 723, 724, 725, 729, 730, 733, 738, 740, 741, 746, 747, 748, 749, 750, 751, 752, 753, 759, 761, 788, 797, 804, 805, 806, 807, 808, 809], "leaf": [93, 96, 97, 155, 156, 330, 334, 343, 713, 714, 723, 724], "within": [93, 96, 97, 321, 329, 344, 357, 379, 380, 733, 737], "union": [93, 96, 97, 155, 156, 325, 327, 330, 333, 334, 335, 336, 337, 338, 340, 345, 368, 370, 371, 372, 373, 374, 375, 376, 377, 379, 380, 381, 382, 383, 384, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 402, 403, 404, 405, 406, 408, 409, 410, 411, 412, 413, 414, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 430, 431, 447, 448, 449, 450, 451, 453, 456, 457, 458, 459, 464, 470, 472, 474, 475, 476, 477, 480, 481, 482, 483, 484, 485, 486, 488, 489, 490, 491, 492, 493, 494, 495, 497, 498, 500, 501, 502, 504, 505, 506, 507, 508, 509, 510, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 527, 528, 529, 530, 532, 533, 534, 535, 536, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 553, 554, 555, 556, 558, 559, 560, 561, 562, 563, 564, 567, 568, 571, 572, 575, 576, 579, 580, 581, 583, 584, 585, 586, 590, 592, 593, 595, 596, 597, 606, 609, 610, 615, 616, 621, 622, 623, 625, 626, 627, 629, 630, 632, 634, 635, 636, 638, 640, 643, 644, 646, 648, 649, 650, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 685, 686, 687, 688, 689, 691, 693, 694, 695, 696, 697, 698, 699, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 724, 725, 731, 732, 733, 734, 735, 736, 737, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 759, 760, 761, 762, 763, 765, 766], "mayb": [93, 96, 97, 320, 340, 342], "manner": [93, 96, 97, 150, 155, 156, 325, 326, 336, 343, 356, 357, 713, 725], "travers": [93, 96, 97, 155, 156, 334, 340, 342, 713, 725], "lowest": [93, 96, 97, 155, 156, 330, 357, 713, 725, 733, 735], "leav": [93, 96, 97, 155, 156, 157, 158, 160, 326, 327, 329, 330, 334, 335, 337, 338, 343, 344, 687, 705, 713, 714, 715, 723, 724, 725], "search": [93, 96, 97, 125, 150, 155, 156, 308, 320, 325, 327, 329, 741, 742, 743, 744], "s": [93, 96, 97, 136, 140, 141, 142, 148, 151, 152, 155, 156, 319, 320, 321, 323, 324, 326, 327, 329, 331, 333, 334, 335, 336, 337, 338, 340, 342, 343, 344, 345, 356, 357, 378, 379, 390, 394, 395, 398, 415, 416, 431, 450, 474, 481, 547, 563, 568, 627, 630, 632, 634, 636, 656, 674, 675, 713, 719, 725, 753, 759, 761, 767, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 808, 810, 811], "case": [93, 96, 97, 151, 155, 156, 157, 158, 159, 320, 321, 322, 325, 326, 327, 330, 331, 333, 334, 335, 336, 337, 338, 340, 342, 344, 345, 357, 379, 390, 431, 470, 477, 480, 481, 482, 483, 484, 485, 486, 488, 489, 490, 491, 502, 504, 505, 506, 507, 514, 515, 516, 525, 527, 528, 530, 532, 533, 542, 546, 547, 548, 549, 550, 553, 554, 555, 560, 562, 563, 597, 609, 610, 656, 665, 687, 699, 701, 713, 716, 722, 753, 755, 756, 757, 759, 760, 761, 788, 799, 800, 801, 804, 808], "to_n": [93, 155, 156], "item": [93, 97, 134, 135, 155, 156, 335, 340, 342, 343, 345, 398, 409, 431, 440, 441, 443, 450, 452, 454, 456, 458, 462, 563, 573, 591, 617, 618, 713, 718, 719, 720, 721, 725, 729, 730, 767, 800, 801], "convers": [94, 95, 96, 97, 152, 155, 156, 339, 341, 345, 356, 357, 767, 773], "arraywithcr": 98, "creation": [99, 155, 156, 157, 158, 159, 282, 325, 335, 336, 340, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397], "data_typ": [100, 101, 283, 284, 325, 335, 398, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430], "arraywithdatatyp": 100, "arraywithdevic": [102, 342], "devic": [103, 151, 155, 156, 160, 235, 264, 265, 286, 305, 306, 321, 324, 325, 330, 332, 335, 342, 343, 357, 379, 380, 381, 382, 383, 384, 386, 387, 388, 389, 391, 392, 393, 394, 395, 396, 397, 433, 434, 435, 436, 437, 438, 440, 441, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 563, 585, 586, 606, 609, 610, 733, 734, 735, 736, 737, 777, 778, 779, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 808, 810, 811], "arraywithelementwis": [104, 322, 333], "elementwis": [105, 155, 156, 288, 325, 330, 340, 345, 482, 483, 484, 485, 486, 488, 489, 490, 491, 492, 493, 494, 495, 497, 498, 500, 501, 502, 504, 505, 506, 507, 508, 509, 510, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 527, 528, 529, 530, 532, 533, 534, 535, 536, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 553, 554, 555, 556, 558, 559, 560, 561, 562], "arraywithgener": [106, 342], "gener": [107, 134, 135, 155, 156, 290, 317, 318, 321, 322, 323, 324, 325, 326, 327, 330, 333, 334, 335, 336, 337, 338, 339, 340, 342, 344, 345, 356, 357, 376, 379, 380, 388, 389, 398, 407, 481, 486, 488, 502, 504, 505, 507, 516, 547, 555, 556, 558, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 633, 687, 695, 702, 733, 734, 735, 737, 738, 745, 746, 747, 750, 751, 753, 755, 767, 804, 808], "arraywithgradi": [108, 342], "gradient": [109, 155, 156, 292, 325, 334, 343, 344, 356, 357, 431, 475, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 709, 710, 711, 712, 767, 804, 805, 806, 807, 808, 809], "arraywithimag": [110, 342], "imag": [111, 294, 320, 323, 325, 340, 341, 343, 345, 356, 643, 644, 645, 646, 647, 649, 650, 767], "arraywithlay": 112, "layer": [113, 150, 296, 325, 326, 340, 341, 344, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 731, 732, 767, 779, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 808, 810, 811], "linear_algebra": [114, 115, 297, 298, 325, 342, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680], "arraywithlinearalgebra": 114, "arraywithloss": 116, "loss": [117, 300, 325, 330, 343, 344, 345, 682, 683, 685, 686, 767], "arraywithmanipul": 118, "manipul": [119, 150, 302, 325, 345, 356, 688, 689, 691, 693, 694, 695, 696, 697, 698, 699, 701, 702, 703, 704, 705, 706, 707, 708], "arraywithnorm": 120, "norm": [121, 155, 156, 304, 325, 563, 571, 572, 656, 665, 679, 732, 767, 803, 804, 806], "arraywithrandom": [122, 342], "random": [123, 155, 156, 306, 325, 336, 345, 356, 734, 735, 736, 737, 738, 739, 767], "arraywithsearch": 124, "arraywithset": 126, "arraywithsort": 128, "arraywithstatist": 130, "statist": [131, 314, 317, 318, 325, 335, 754, 755, 756, 757, 758, 759, 760, 761], "arraywithutil": 132, "util": [133, 316, 325, 336, 431, 464, 763, 765, 766], "add_ivy_array_instance_method": 134, "cl": [134, 135, 317, 318], "modul": [134, 135, 136, 140, 141, 152, 155, 156, 157, 158, 159, 317, 318, 320, 323, 329, 330, 331, 333, 337, 340, 341, 343, 345, 356, 357, 563, 604, 733, 734, 736, 737, 767, 774, 775, 776, 777, 778, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 802, 803, 810, 811], "to_ignor": [134, 135, 317, 318, 713, 724], "loop": [134, 135, 317, 318, 331, 357, 709, 710, 711, 712], "over": [134, 135, 136, 140, 150, 152, 155, 156, 317, 318, 320, 326, 327, 331, 337, 342, 357, 656, 665, 676, 678, 679, 731, 732, 733, 737, 753, 755, 756, 757, 758, 759, 760, 761, 762, 763, 765, 766, 802, 803], "etc": [134, 135, 152, 155, 156, 317, 318, 320, 321, 322, 325, 327, 329, 333, 334, 335, 338, 340, 342, 343, 357, 379, 388, 389, 563, 585, 586, 606, 609, 610, 733, 734, 735, 737, 745, 746, 747, 749, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 808, 810, 811], "us": [134, 135, 136, 141, 148, 151, 152, 155, 156, 157, 158, 159, 317, 318, 319, 321, 322, 324, 325, 326, 327, 328, 329, 330, 331, 333, 334, 335, 336, 337, 338, 339, 340, 342, 344, 345, 356, 357, 368, 370, 371, 372, 373, 374, 375, 378, 398, 413, 431, 440, 441, 466, 470, 473, 474, 475, 476, 478, 480, 481, 486, 488, 493, 502, 504, 507, 516, 519, 540, 541, 543, 548, 555, 563, 585, 588, 589, 603, 609, 610, 611, 612, 617, 618, 627, 629, 630, 634, 635, 643, 649, 651, 652, 654, 655, 656, 659, 660, 665, 681, 682, 687, 695, 696, 698, 702, 706, 709, 710, 711, 712, 713, 714, 716, 722, 723, 724, 726, 731, 732, 740, 741, 742, 743, 745, 746, 747, 753, 754, 762, 763, 765, 767, 788, 796, 799, 800, 801, 802, 803, 804, 806, 807], "_wrap_funct": [134, 135, 317, 318, 330, 332], "we": [134, 135, 136, 141, 142, 148, 149, 150, 151, 152, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 332, 333, 334, 335, 337, 338, 340, 341, 342, 343, 344, 345, 356, 357, 627, 631, 767, 773], "want": [134, 135, 136, 141, 151, 317, 318, 319, 320, 321, 329, 343, 344, 345, 357], "don": [134, 135, 152, 317, 318, 320, 321, 322, 335, 344, 357], "t": [134, 135, 136, 141, 151, 152, 317, 318, 320, 321, 322, 323, 327, 335, 340, 342, 343, 344, 345, 357, 563, 568, 643, 652, 653], "As": [134, 135, 150, 317, 318, 321, 329, 330, 333, 334, 335, 336, 337, 338, 340, 342, 343, 344, 357, 745, 746, 747, 749], "shown": [134, 135, 155, 156, 317, 318, 321, 327, 338, 340, 342, 357, 379, 390, 481, 493, 502, 504, 507, 548, 656, 659, 687, 695, 696, 745, 746, 747, 750, 751], "appropri": [134, 135, 317, 318, 321, 332, 481, 485, 542, 740, 741], "our": [134, 135, 150, 151, 317, 318, 319, 320, 321, 327, 334, 339, 342, 343, 344, 345, 357, 767], "toi": [134, 135, 317, 318], "arrayexampl": [134, 135], "import": [134, 135, 136, 140, 151, 317, 318, 322, 325, 326, 327, 331, 333, 334, 335, 336, 337, 340, 342, 343, 345, 357, 431, 472, 767, 773], "pass": [134, 135, 136, 140, 155, 156, 157, 158, 159, 317, 318, 322, 326, 327, 328, 329, 330, 331, 333, 334, 337, 338, 342, 357, 398, 408, 431, 440, 475, 481, 491, 563, 570, 597, 627, 641, 709, 710, 711, 777, 778, 800, 801, 804, 808, 810, 811], "hasattr": [134, 135, 317, 318, 342], "relu": [134, 135, 157, 158, 343, 344, 368, 369, 370, 767], "softmax": [134, 135, 157, 158, 368, 643, 654, 655, 767], "backend_handl": [136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 767], "contextmanag": [136, 137], "object": [136, 155, 156, 157, 158, 159, 342, 345, 379, 385, 398, 414, 431, 476, 627, 713, 716, 718, 720, 721, 722, 727, 728, 729, 730, 733, 739, 779, 788, 789, 790, 791, 792, 793, 794, 795, 797, 798, 800, 801], "__init__": [136, 137, 140, 141, 155, 156, 157, 158, 159, 160, 325, 331, 335, 340, 342, 343, 344, 345, 398, 399, 400, 401, 431, 432, 439, 440, 441, 442, 443, 444, 445, 446, 627, 628, 733, 734, 736, 737, 767, 774, 775, 776, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811], "choose_random_backend": 136, "exclud": [136, 138, 327, 340, 379, 380, 733, 737], "clear_backend_stack": 136, "current_backend": [136, 157, 158, 325, 330], "current": [136, 140, 141, 148, 152, 155, 156, 157, 158, 159, 320, 321, 322, 323, 330, 336, 340, 345, 356, 357, 398, 415, 416, 418, 430, 431, 440, 464, 465, 469, 471, 563, 587, 594, 598, 605, 607, 713, 714, 723, 724, 767], "prioriti": [136, 140, 155, 156, 321, 337], "global_backend": [136, 140], "which": [136, 140, 141, 150, 151, 152, 155, 156, 157, 158, 159, 320, 321, 322, 323, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 342, 343, 344, 345, 356, 357, 368, 373, 376, 377, 378, 379, 380, 381, 382, 383, 384, 386, 387, 388, 389, 391, 392, 393, 394, 395, 396, 397, 398, 407, 408, 412, 414, 417, 418, 430, 431, 440, 441, 451, 456, 457, 458, 459, 460, 461, 462, 463, 465, 469, 471, 473, 474, 475, 481, 547, 563, 565, 575, 576, 578, 585, 586, 587, 593, 597, 605, 606, 607, 609, 610, 625, 627, 630, 631, 632, 634, 635, 636, 638, 640, 641, 643, 654, 656, 658, 660, 665, 673, 674, 678, 679, 681, 683, 685, 686, 687, 691, 693, 696, 698, 702, 703, 705, 713, 718, 719, 720, 721, 726, 727, 728, 729, 730, 733, 734, 735, 737, 740, 741, 742, 743, 744, 745, 746, 747, 749, 750, 751, 752, 753, 755, 756, 757, 758, 759, 760, 761, 762, 763, 765, 766, 767, 770, 772, 777, 778, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 808, 810, 811], "try": [136, 140, 149, 151, 152, 155, 156, 320, 321, 322, 323, 333, 334, 342, 357, 563, 624, 767], "infer": [136, 140, 324, 331, 335, 336, 340, 345, 376, 377, 379, 380, 381, 383, 386, 387, 391, 393, 397, 481, 518, 563, 590, 615, 687, 699, 701], "when": [136, 140, 150, 151, 155, 156, 157, 158, 159, 320, 321, 322, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 342, 343, 345, 357, 398, 404, 431, 481, 485, 515, 546, 563, 570, 597, 618, 681, 682, 683, 685, 686, 713, 724, 740, 741, 742, 744, 753, 755, 757, 759, 761, 767, 800, 801], "global": [136, 140, 141, 142, 148, 155, 156, 157, 158, 159, 330, 331, 335, 336, 340, 398, 409, 410, 411, 431, 440, 441, 473, 474, 475, 563, 588, 589, 608, 611, 612, 613, 617, 618, 731, 732, 802, 803], "numpi": [136, 140, 141, 142, 150, 151, 155, 156, 321, 322, 329, 331, 335, 336, 337, 338, 340, 342, 345, 563, 622, 753, 754, 767], "np": [136, 140, 333, 335, 336, 337, 338, 342, 343, 345, 767], "py": [136, 140, 141, 321, 325, 326, 330, 331, 335, 336, 338, 340, 342, 344, 345, 733, 734, 736, 737], "noqa": [136, 140, 141, 379, 390, 398, 407, 481, 485, 493, 502, 504, 505, 507, 548, 555, 556, 558, 560, 656, 659, 687, 695, 696, 702, 753, 755], "set_backend": [136, 140, 141, 148, 330, 331, 332, 335, 398, 415, 416, 431, 472, 563, 615, 767], "ha": [136, 140, 141, 150, 151, 152, 155, 156, 321, 326, 327, 330, 331, 332, 335, 336, 340, 342, 344, 345, 356, 357, 379, 390, 431, 450, 481, 482, 542, 546, 656, 664, 672, 673, 674, 677, 687, 695, 704, 745, 746, 747, 749, 753, 756, 758, 759, 760, 761], "jax": [136, 140, 141, 142, 151, 152, 321, 322, 331, 335, 336, 337, 338, 340, 342, 345, 357, 627, 633, 745, 746, 747, 749, 767], "get_backend": [136, 330, 331], "specifi": [136, 141, 155, 156, 324, 329, 330, 335, 336, 337, 338, 340, 343, 344, 345, 379, 380, 382, 386, 388, 389, 392, 394, 395, 396, 398, 404, 406, 431, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 465, 469, 471, 474, 475, 476, 481, 547, 563, 565, 575, 585, 586, 592, 625, 656, 660, 665, 676, 677, 678, 679, 681, 682, 683, 685, 686, 687, 688, 689, 691, 693, 694, 696, 702, 704, 705, 708, 713, 718, 720, 721, 727, 728, 729, 730, 740, 741, 742, 745, 746, 747, 749, 750, 751, 753, 754, 758, 760, 762, 763, 765, 766], "isn": [136, 141, 321, 343, 357], "associ": [136, 141, 321, 330, 332, 357, 481, 485, 542, 656, 667, 670, 680], "retriev": [136, 141, 321, 563, 565], "i": [136, 141, 321, 323, 324, 340, 343, 345, 379, 380, 390, 481, 482, 491, 495, 497, 501, 505, 516, 517, 520, 540, 541, 543, 546, 547, 563, 567, 568, 627, 630, 632, 634, 635, 636, 656, 658, 664, 667, 670, 673, 674, 677, 679, 687, 705, 745, 746, 747, 749, 750, 751, 752, 753, 754, 755, 756, 757, 759, 760, 761], "e": [136, 141, 151, 152, 319, 321, 323, 324, 334, 343, 357, 378, 379, 390, 398, 403, 422, 431, 447, 481, 482, 491, 495, 497, 501, 505, 514, 516, 517, 520, 525, 527, 529, 540, 541, 543, 546, 547, 627, 630, 632, 634, 635, 636, 656, 658, 664, 667, 670, 673, 674, 679, 687, 705, 733, 736, 737, 745, 746, 747, 749, 750, 751, 752, 753, 755, 756, 757, 758, 759, 760, 761], "one": [136, 141, 151, 152, 155, 156, 160, 167, 251, 252, 256, 264, 266, 287, 288, 289, 290, 301, 302, 305, 306, 320, 321, 327, 330, 333, 334, 335, 337, 338, 339, 342, 343, 345, 357, 379, 380, 390, 398, 405, 407, 431, 460, 461, 462, 463, 475, 563, 564, 603, 606, 609, 610, 656, 664, 665, 669, 671, 678, 679, 687, 688, 690, 695, 696, 702, 704, 740, 741, 743, 745, 746, 747, 748, 749, 753, 754, 767], "torch": [136, 141, 148, 321, 325, 330, 331, 333, 334, 335, 336, 337, 338, 340, 342, 343, 344, 345, 357, 376, 377, 398, 415, 416, 431, 472, 563, 615, 687, 695, 767], "tensorflow": [136, 141, 148, 151, 152, 321, 322, 335, 336, 337, 338, 340, 345, 357, 767], "mxnet": [136, 141, 151, 322, 335, 336, 337, 340, 345, 767], "either": [136, 141, 148, 155, 156, 320, 321, 323, 326, 327, 330, 331, 334, 335, 336, 340, 342, 343, 357, 379, 385, 481, 485, 491, 521, 525, 527, 528, 530, 532, 533, 542, 547, 549, 550, 553, 560, 563, 578, 599, 603, 604, 656, 664, 709, 710, 711, 712, 753, 758, 760, 788, 799, 800, 801], "doesn": [136, 141, 320, 323, 327, 335, 340, 357], "matter": [136, 141, 150, 327], "been": [136, 141, 321, 326, 330, 331, 334, 335, 336, 338, 340, 356, 357, 431, 450, 563, 579, 580, 581, 733, 734], "ivy_np": [136, 141], "ivy_jax": [136, 141], "subsequ": [136, 142, 320, 327, 329, 330, 333, 337, 338, 344], "call": [136, 142, 148, 151, 157, 158, 160, 323, 325, 326, 327, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 342, 343, 344, 345, 357, 431, 475, 563, 608, 613, 624, 627, 631, 713, 714, 719, 723, 724, 788, 799, 800, 801, 804, 808], "ndarrai": [136, 142, 333, 335, 336, 337, 338, 342, 379, 381, 391, 563, 622], "Or": [136, 142, 343], "jaxlib": [136, 142, 320, 335, 336, 338, 342], "xla_extens": [136, 142, 335, 336, 338, 342], "devicearrai": [136, 142, 342], "try_import_ivy_jax": 136, "warn": [136, 143, 144, 145, 146, 147], "try_import_ivy_mxnet": 136, "try_import_ivy_numpi": 136, "try_import_ivy_tf": 136, "try_import_ivy_torch": 136, "unset_backend": [136, 331], "unset": [136, 148, 331, 340, 342], "adjust": [136, 148, 753, 759, 761], "previous": [136, 148, 320, 323, 329, 330, 340, 563, 570], "implement": [136, 148, 321, 322, 326, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 342, 343, 344, 345, 356, 357, 398, 404, 422, 431, 476, 481, 482, 483, 484, 486, 488, 489, 490, 491, 506, 507, 514, 515, 525, 527, 528, 529, 530, 532, 542, 546, 547, 550, 553, 554, 560, 656, 661, 745, 746, 747, 749, 750, 751, 752, 753, 755, 756, 757, 767], "wa": [136, 148, 151, 155, 156, 327, 340, 342, 563, 624, 713, 726, 753, 755, 756, 757, 758, 759, 760, 761, 762, 763, 765, 766], "last": [136, 148, 152, 155, 156, 321, 327, 331, 357, 368, 373, 431, 450, 643, 653, 656, 658, 660, 665, 677, 678, 681, 683, 685, 686, 687, 696, 702, 703, 705, 750, 751, 752, 762, 763, 765, 766, 788, 798], "henc": [136, 148, 745, 746, 747, 749], "here": [136, 148, 320, 321, 322, 325, 327, 334, 338, 340, 341, 342, 343, 344, 345, 356, 357], "tensor": [136, 148, 150, 155, 156, 325, 330, 331, 333, 335, 336, 337, 338, 340, 342, 343, 344, 345, 357, 379, 388, 389, 398, 412, 481, 493, 540, 541, 563, 606, 609, 610, 643, 651, 653, 656, 676, 687, 695, 699, 701, 703, 733, 734, 740, 743, 767, 788, 796, 798], "howev": [136, 148, 151, 320, 322, 326, 329, 330, 331, 333, 334, 335, 336, 337, 338, 342, 343, 344, 345, 357], "befor": [136, 148, 155, 156, 320, 321, 322, 326, 329, 333, 335, 336, 337, 340, 343, 357, 431, 475, 481, 562, 643, 654, 655, 709, 710, 711, 713, 725, 745, 746, 747, 749, 753, 758, 760], "becom": [136, 148, 150, 152, 321, 327, 334, 340, 345, 357, 687, 688, 689], "swap": [136, 148, 687, 706], "python": [136, 148, 149, 150, 151, 320, 321, 323, 340, 342, 343, 357, 379, 380, 431, 470, 480, 481, 547, 767, 773], "op": [136, 148, 325, 340, 357], "eagertensor": [136, 148], "def": [137, 322, 325, 327, 330, 334, 335, 336, 337, 338, 340, 342, 343, 344, 345, 399, 400, 401, 432, 439, 442, 628, 767, 780, 783, 786], "ml": [149, 151, 152, 319, 339, 340, 341, 343, 344, 345, 356, 767, 773], "explos": [149, 151, 767], "A": [149, 150, 151, 152, 155, 156, 157, 158, 159, 323, 324, 329, 330, 334, 335, 336, 340, 343, 357, 379, 384, 391, 431, 440, 441, 475, 481, 545, 561, 563, 589, 621, 656, 669, 672, 673, 674, 687, 703, 705, 713, 714, 716, 718, 720, 721, 722, 723, 724, 727, 728, 729, 730, 753, 754, 762, 763, 765, 766, 767, 810, 811], "huge": [149, 151, 343, 767], "number": [149, 150, 155, 156, 157, 158, 159, 160, 320, 327, 334, 336, 337, 340, 343, 345, 376, 377, 378, 379, 380, 381, 384, 388, 389, 390, 391, 398, 405, 413, 414, 417, 419, 420, 422, 431, 467, 468, 469, 481, 485, 491, 505, 516, 517, 540, 541, 542, 546, 547, 548, 549, 562, 563, 564, 584, 589, 590, 605, 623, 626, 643, 654, 656, 661, 667, 672, 674, 678, 687, 688, 689, 694, 697, 698, 702, 703, 705, 707, 708, 709, 710, 711, 712, 733, 734, 738, 740, 743, 745, 746, 747, 753, 755, 756, 757, 758, 759, 760, 761, 762, 763, 765, 766, 767, 788, 789, 790, 791, 792, 793, 794, 795, 797, 798, 799], "tool": [149, 152, 321, 341, 345, 356, 357, 767], "have": [149, 150, 151, 152, 155, 156, 320, 321, 322, 323, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 344, 345, 356, 357, 368, 371, 379, 380, 382, 383, 386, 387, 390, 392, 393, 394, 395, 396, 397, 398, 404, 405, 406, 414, 431, 476, 481, 482, 483, 484, 485, 486, 488, 489, 490, 491, 492, 493, 494, 495, 497, 498, 500, 501, 502, 504, 505, 506, 507, 508, 509, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 527, 528, 529, 530, 532, 533, 534, 535, 536, 538, 539, 542, 543, 544, 546, 547, 548, 549, 550, 553, 554, 555, 556, 558, 559, 560, 562, 563, 572, 579, 580, 581, 583, 627, 633, 641, 643, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 667, 668, 669, 670, 671, 673, 674, 675, 676, 677, 678, 679, 681, 682, 683, 685, 686, 687, 688, 689, 691, 693, 695, 696, 697, 698, 702, 704, 705, 706, 733, 735, 739, 740, 741, 742, 743, 745, 746, 747, 749, 750, 751, 752, 753, 755, 756, 757, 758, 759, 760, 761, 762, 763, 765, 766, 767], "explod": [149, 150, 767], "onto": [149, 150, 431, 460, 461, 713, 719, 725, 767], "scene": [149, 150, 324, 339, 341, 627, 630, 632, 634, 635, 636, 767], "b": [149, 152, 157, 158, 160, 165, 167, 184, 185, 186, 239, 251, 252, 255, 256, 264, 266, 270, 275, 283, 284, 287, 288, 289, 290, 301, 302, 305, 306, 319, 324, 327, 330, 331, 334, 339, 340, 341, 343, 344, 345, 355, 398, 407, 431, 453, 481, 485, 486, 488, 493, 502, 504, 505, 507, 516, 519, 543, 548, 555, 556, 558, 560, 563, 564, 567, 568, 574, 575, 582, 585, 623, 643, 646, 649, 650, 655, 656, 657, 658, 659, 669, 673, 676, 680, 681, 682, 687, 688, 689, 690, 695, 696, 698, 702, 705, 706, 731, 732, 733, 736, 737, 740, 742, 743, 744, 750, 751, 753, 754, 755, 762, 763, 765, 767, 773], "why": [149, 151, 321, 334, 337, 338, 342, 767], "unifi": [149, 151, 155, 156, 333, 340, 357, 431, 460, 461, 462, 463, 475, 767], "should": [149, 151, 155, 156, 157, 158, 159, 317, 318, 320, 321, 322, 323, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 342, 343, 344, 376, 377, 379, 390, 394, 395, 398, 406, 431, 481, 482, 483, 484, 485, 486, 488, 489, 490, 491, 492, 493, 494, 495, 497, 498, 500, 501, 502, 504, 505, 506, 507, 508, 514, 515, 516, 520, 521, 522, 523, 525, 527, 528, 530, 532, 533, 534, 535, 536, 538, 539, 542, 544, 546, 547, 549, 550, 553, 554, 555, 556, 558, 559, 560, 562, 563, 570, 597, 606, 627, 630, 632, 634, 635, 636, 643, 655, 656, 657, 658, 659, 660, 663, 664, 667, 669, 670, 671, 673, 674, 676, 677, 678, 679, 687, 699, 701, 733, 739, 740, 741, 742, 745, 746, 747, 749, 753, 754, 755, 756, 758, 759, 760, 761, 767], "them": [149, 150, 151, 152, 329, 331, 333, 334, 340, 342, 343, 344, 357, 767], "c": [149, 151, 152, 160, 264, 305, 306, 319, 324, 327, 330, 334, 339, 340, 341, 343, 357, 563, 567, 568, 574, 623, 627, 629, 630, 632, 634, 635, 636, 643, 649, 687, 705, 740, 743, 753, 754, 759, 761, 767, 773], "standard": [149, 324, 325, 326, 328, 329, 333, 337, 338, 357, 379, 390, 398, 407, 414, 481, 485, 486, 488, 493, 502, 504, 505, 507, 516, 548, 555, 556, 558, 560, 656, 659, 687, 695, 696, 702, 731, 732, 733, 736, 745, 746, 747, 750, 751, 753, 755, 759, 761, 762, 763, 765, 767, 773, 802, 803], "re": [149, 150, 151, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 342, 345, 357, 431, 475, 563, 579, 656, 676, 687, 702, 740, 744, 767], "collabor": [149, 150, 151, 767], "consortium": [149, 151, 767, 773], "data": [149, 151, 155, 156, 157, 158, 159, 324, 325, 326, 330, 332, 334, 336, 337, 338, 342, 379, 380, 381, 382, 383, 384, 385, 386, 387, 390, 391, 392, 393, 394, 395, 396, 397, 402, 403, 404, 406, 407, 408, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 426, 430, 431, 433, 434, 435, 436, 437, 438, 443, 444, 445, 447, 481, 482, 483, 484, 485, 486, 488, 489, 490, 491, 492, 493, 494, 495, 497, 498, 500, 501, 502, 504, 505, 506, 507, 508, 509, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 527, 528, 530, 532, 533, 534, 535, 536, 538, 539, 542, 544, 546, 547, 549, 550, 553, 554, 555, 556, 558, 559, 560, 562, 563, 567, 568, 599, 600, 602, 619, 627, 633, 641, 643, 652, 656, 657, 658, 659, 660, 661, 662, 663, 664, 667, 668, 669, 670, 671, 673, 674, 676, 677, 678, 679, 687, 695, 696, 697, 699, 701, 702, 704, 705, 733, 739, 740, 741, 742, 743, 750, 751, 753, 755, 756, 757, 758, 759, 760, 761, 762, 763, 765, 766, 767, 773, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799], "api": [149, 150, 320, 321, 324, 326, 327, 329, 330, 332, 333, 335, 336, 337, 338, 339, 341, 343, 357, 379, 390, 398, 407, 481, 485, 486, 488, 493, 502, 504, 505, 507, 516, 548, 555, 556, 558, 560, 656, 659, 687, 695, 696, 702, 745, 746, 747, 750, 751, 753, 755, 762, 763, 765, 767, 773], "open": [150, 151, 152, 319, 320, 323, 326, 356, 379, 380, 733, 735, 737, 767], "project": [150, 151, 152, 320, 321, 323, 325, 331, 342, 344, 356, 357, 733, 734, 736, 737], "grown": 150, "consider": [150, 327, 338], "recent": [150, 151, 320, 321], "year": [150, 152, 357, 767], "especi": [150, 320], "deep": [150, 155, 156, 319, 321, 322, 339, 343, 767], "learn": [150, 151, 320, 322, 324, 330, 339, 345, 356, 481, 518, 627, 630, 632, 634, 635, 636, 709, 710, 711, 712, 767, 804, 805, 806, 807, 808, 809], "can": [150, 151, 152, 319, 320, 321, 324, 325, 326, 327, 328, 329, 330, 331, 334, 335, 336, 337, 338, 339, 340, 342, 343, 344, 345, 356, 357, 379, 381, 391, 398, 407, 431, 473, 474, 475, 656, 663, 687, 699, 701, 733, 735, 767, 773], "seen": [150, 151, 327, 342, 343], "rapidli": 150, "increas": [150, 431, 455, 459, 463, 687, 694, 708, 713, 725], "github": [150, 321, 322, 326, 329], "repo": [150, 151, 152, 320, 321, 328, 340, 342, 343, 344, 345, 356, 767, 773], "term": [150, 321, 334, 643, 653, 788, 798], "time": [150, 151, 152, 320, 321, 322, 329, 330, 334, 335, 338, 340, 343, 345, 357, 627, 630, 634, 643, 653, 687, 707, 709, 710, 711, 712, 740, 741, 742, 745, 746, 747, 788, 799, 800, 801], "These": [150, 151, 152, 321, 326, 327, 329, 330, 334, 335, 337, 338, 340, 341, 343, 344, 345, 357, 656, 661, 767, 773], "written": [150, 320, 325, 326, 333, 337, 338, 340, 342, 345, 357], "mani": [150, 151, 152, 155, 156, 320, 321, 322, 326, 327, 330, 332, 333, 334, 335, 336, 337, 338, 340, 342, 343, 357, 687, 703], "differ": [150, 151, 152, 155, 156, 157, 158, 159, 320, 321, 324, 325, 326, 327, 329, 330, 333, 334, 336, 337, 338, 340, 341, 342, 343, 344, 345, 357, 398, 414, 431, 452, 453, 456, 457, 481, 485, 542, 559, 643, 652, 687, 705, 753, 758, 760, 767], "while": [150, 151, 155, 156, 157, 158, 159, 320, 321, 327, 331, 337, 344, 345, 357, 481, 535, 536, 538, 745, 746, 753, 756], "wonder": [150, 152, 342], "thing": [150, 151, 152, 320, 321, 322, 331, 342, 343], "research": [150, 356], "develop": [150, 151, 152, 319, 320, 321, 322, 356, 357, 767], "consid": [150, 151, 155, 156, 325, 330, 341, 342, 343, 481, 535, 536, 538, 745, 746, 747, 749], "speed": 150, "evolv": 150, "sharabl": 150, "code": [150, 151, 152, 155, 156, 157, 158, 159, 320, 321, 322, 323, 324, 326, 327, 330, 331, 332, 333, 334, 337, 338, 339, 340, 341, 342, 343, 344, 345, 355, 357, 368, 370, 371, 372, 373, 374, 375, 431, 453, 476, 481, 502, 504, 556, 558, 643, 649, 650, 745, 746, 747, 750, 751, 753, 754, 767, 773], "significantli": 150, "hinder": [150, 338], "librari": [150, 151, 152, 340, 345, 355, 357, 431, 476, 481, 515, 535, 536, 538, 656, 661, 745, 746, 747, 749, 753, 755, 756, 757, 767], "outdat": 150, "month": 150, "rigor": 150, "maintain": [150, 321, 357, 750, 751, 752], "against": [150, 155, 156, 329, 357, 398, 405, 656, 664, 665, 667, 670, 740, 741], "newest": 150, "version": [150, 151, 152, 320, 326, 340, 342, 656, 661, 767], "For": [150, 151, 152, 320, 321, 322, 323, 324, 325, 326, 327, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 342, 343, 344, 345, 356, 357, 379, 380, 390, 481, 482, 483, 484, 485, 486, 488, 489, 490, 491, 505, 506, 507, 514, 515, 516, 525, 527, 528, 530, 532, 533, 542, 546, 547, 548, 550, 553, 554, 555, 560, 562, 627, 633, 641, 656, 674, 677, 687, 688, 689, 705, 745, 746, 747, 749, 753, 755, 757, 760, 777, 778], "softwar": [150, 151, 320, 321], "pipelin": [150, 333, 345], "where": [150, 151, 152, 155, 156, 157, 158, 319, 320, 321, 322, 323, 326, 330, 331, 333, 334, 335, 336, 337, 340, 343, 344, 345, 357, 379, 386, 387, 390, 481, 491, 514, 529, 542, 546, 563, 593, 597, 606, 656, 661, 667, 670, 671, 674, 675, 677, 678, 687, 688, 689, 694, 695, 697, 705, 708, 713, 714, 724, 733, 734, 740, 743, 753, 759, 761, 762, 763, 765, 766, 767], "rapid": [150, 151, 320], "prototyp": 150, "vital": [150, 345], "signific": [150, 151, 357], "bottleneck": 150, "new": [150, 151, 152, 155, 156, 319, 320, 321, 322, 323, 324, 325, 326, 327, 329, 332, 334, 335, 337, 339, 342, 345, 356, 379, 382, 385, 386, 387, 392, 393, 396, 397, 398, 426, 481, 492, 529, 545, 561, 563, 579, 580, 581, 584, 585, 586, 609, 610, 611, 612, 617, 618, 627, 630, 632, 634, 635, 636, 687, 695, 699, 701, 705, 713, 718, 729, 730, 731, 732, 767, 777, 778, 788, 798, 802, 803, 804, 805, 806, 807, 808, 809], "futur": [150, 152, 320, 321, 342, 357, 656, 661], "avail": [150, 155, 156, 320, 321, 326, 336, 357, 431, 450, 466, 467, 468, 478, 563, 580], "specif": [150, 155, 156, 322, 330, 333, 334, 335, 336, 337, 338, 340, 341, 342, 344, 345, 356, 357, 398, 422, 431, 473, 476, 481, 535, 536, 538, 563, 579, 580, 581, 604, 656, 661, 676, 687, 705, 709, 710, 711, 712, 733, 734, 753, 755, 756, 757, 767, 770, 772, 773, 800, 801], "quickli": [150, 152, 320, 321, 343, 344], "obsolet": [150, 152], "user": [150, 151, 320, 321, 323, 324, 329, 331, 334, 337, 339, 357, 788, 799, 800, 801], "constantli": 150, "invent": 150, "wheel": 150, "desir": [150, 155, 156, 398, 404, 407, 431, 476, 563, 593, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799], "provid": [150, 155, 156, 320, 321, 326, 327, 330, 333, 334, 335, 336, 337, 338, 340, 344, 356, 357, 376, 377, 379, 390, 398, 409, 410, 411, 418, 422, 430, 431, 450, 563, 578, 606, 610, 627, 630, 632, 634, 635, 636, 656, 678, 687, 696, 705, 740, 741, 753, 759, 761, 762, 763, 765, 766, 788, 789, 790, 791, 792, 793, 794, 795, 797, 798, 799, 804, 805, 806, 807, 808, 809], "simultan": [150, 152], "modern": [150, 151], "simpl": [150, 320, 321, 325, 326, 327, 329, 330, 333, 334, 335, 336, 337, 340, 342, 344, 345, 357, 563, 582], "scalabl": [150, 340], "must": [150, 152, 155, 156, 157, 158, 159, 320, 321, 322, 325, 326, 327, 330, 333, 334, 335, 336, 338, 340, 344, 345, 368, 371, 379, 380, 382, 383, 384, 386, 387, 390, 392, 393, 394, 395, 396, 397, 398, 404, 405, 406, 431, 460, 461, 462, 463, 475, 476, 481, 482, 483, 484, 485, 486, 488, 489, 490, 491, 492, 493, 494, 495, 497, 498, 500, 501, 502, 504, 505, 506, 507, 508, 509, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 527, 528, 529, 530, 532, 533, 534, 535, 536, 538, 539, 540, 541, 542, 543, 544, 546, 547, 548, 549, 550, 553, 554, 555, 556, 558, 559, 560, 562, 563, 572, 583, 610, 656, 657, 658, 659, 660, 661, 662, 663, 664, 667, 668, 669, 670, 671, 673, 674, 676, 677, 678, 679, 681, 682, 683, 685, 686, 687, 688, 689, 691, 693, 695, 696, 697, 698, 702, 704, 705, 706, 733, 735, 738, 740, 741, 742, 743, 745, 746, 747, 749, 750, 751, 752, 753, 755, 756, 757, 758, 759, 760, 761, 762, 763, 765, 766, 804, 808], "determin": [150, 155, 156, 326, 330, 334, 335, 336, 398, 407, 408, 413, 418, 419, 420, 430, 431, 466, 467, 468, 478, 481, 483, 484, 485, 486, 488, 489, 490, 491, 492, 493, 495, 497, 498, 500, 501, 502, 504, 506, 507, 508, 514, 515, 520, 521, 522, 525, 527, 528, 530, 532, 533, 539, 542, 546, 547, 550, 553, 554, 555, 560, 563, 564, 567, 568, 592, 594, 598, 599, 600, 601, 602, 619, 626, 627, 633, 643, 654, 656, 657, 658, 659, 660, 663, 664, 667, 669, 670, 672, 673, 677, 678, 679, 709, 710, 711, 712, 745, 746, 747, 749, 762, 763, 765, 766], "exactli": [150, 152, 327, 334, 336, 767, 773], "common": [150, 155, 156, 321, 322, 327, 330, 332, 334, 336, 357], "ground": [150, 329], "li": 150, "between": [150, 155, 156, 157, 158, 159, 327, 329, 330, 333, 334, 338, 339, 341, 342, 343, 345, 356, 379, 380, 398, 414, 481, 491, 546, 681, 682, 683, 685, 686, 687, 695, 705, 713, 719, 733, 735, 745, 746, 747, 749, 767, 804, 806], "find": [150, 155, 156, 320, 321, 340, 343, 745, 746, 747, 749, 767], "exist": [150, 151, 155, 156, 157, 158, 320, 322, 323, 326, 327, 328, 329, 330, 331, 332, 337, 340, 357, 563, 578, 804, 808], "essenti": [150, 151, 322, 327, 330, 336], "order": [150, 155, 156, 157, 158, 159, 320, 321, 323, 326, 327, 331, 333, 334, 335, 336, 338, 342, 343, 345, 357, 481, 491, 627, 630, 632, 634, 635, 636, 656, 661, 665, 674, 675, 679, 687, 696, 709, 710, 711, 740, 743, 745, 746, 747, 749, 750, 751, 752, 810, 811], "design": [150, 151, 324, 337, 340, 342, 357], "univers": 150, "abstract": [150, 334, 344, 357, 431, 446, 804, 808], "In": [150, 152, 320, 321, 325, 326, 327, 330, 331, 334, 335, 336, 337, 338, 340, 342, 343, 344, 345, 356, 357, 431, 470, 476, 477, 480, 481, 485, 542, 547, 563, 565, 597, 687, 699, 701, 733, 737, 767], "languag": [150, 152, 340], "first": [150, 151, 320, 321, 323, 327, 330, 333, 334, 338, 340, 342, 343, 345, 376, 377, 379, 388, 389, 398, 421, 426, 431, 450, 462, 481, 485, 493, 495, 497, 498, 500, 501, 502, 504, 509, 517, 519, 523, 524, 533, 534, 536, 538, 539, 542, 544, 546, 559, 563, 567, 627, 631, 656, 658, 660, 661, 664, 669, 671, 674, 676, 678, 687, 691, 693, 702, 705, 706, 709, 710, 711, 712, 713, 714, 723, 724, 733, 739, 740, 741, 742, 745, 746, 747, 788, 799, 800, 801, 804, 808], "see": [150, 319, 320, 321, 322, 328, 330, 334, 336, 338, 342, 343, 356, 357, 379, 380, 385, 388, 389, 398, 406, 422, 481, 485, 493, 495, 497, 498, 500, 501, 502, 504, 508, 515, 523, 533, 536, 538, 539, 542, 544, 546, 547, 559, 656, 667, 670, 673, 678, 679, 740, 742, 745, 746, 747, 749, 753, 755, 756, 757, 758, 759, 760, 761, 762, 763, 765, 766, 767], "clear": [150, 151, 152, 321, 322, 327, 329, 335, 336, 340, 342, 431, 449], "front": [150, 339, 340, 343, 767, 773], "runner": 150, "look": [150, 320, 321, 323, 325, 327, 330, 331, 334, 335, 336, 338, 340, 342, 344, 345, 767], "littl": [150, 342], "deeper": [150, 321, 324, 339, 431, 455, 459, 463, 713, 724, 725], "follow": [150, 151, 155, 156, 320, 321, 322, 323, 325, 326, 327, 329, 331, 333, 334, 335, 336, 337, 339, 340, 342, 343, 344, 345, 357, 398, 417, 431, 475, 481, 547, 563, 595, 596, 597, 617, 618, 627, 630, 632, 634, 635, 636, 643, 654, 655, 656, 671, 679, 713, 719, 725, 745, 746, 747, 749, 767, 788, 798, 804, 808], "core": [150, 320, 322, 336, 340, 345, 431, 467, 767], "principl": 150, "oper": [150, 155, 156, 157, 158, 160, 320, 322, 326, 327, 330, 333, 334, 336, 337, 343, 344, 379, 388, 389, 398, 422, 481, 485, 501, 502, 504, 519, 543, 547, 556, 558, 563, 569, 579, 580, 581, 619, 627, 630, 632, 634, 635, 636, 643, 644, 645, 646, 647, 648, 649, 650, 652], "expos": [150, 340, 344, 563, 573], "almost": [150, 321, 334, 341, 343], "ident": [150, 152, 155, 156, 330, 332, 334, 342, 343, 357, 431, 465, 713, 726, 767], "uniqu": [150, 330, 334, 357, 431, 440, 441, 709, 710, 711, 712, 713, 719, 745, 746, 747, 748, 749], "syntax": [150, 151], "There": [150, 320, 321, 327, 330, 333, 334, 335, 340, 343, 357], "onli": [150, 155, 156, 319, 320, 321, 325, 327, 329, 330, 331, 333, 334, 335, 336, 337, 338, 340, 342, 343, 344, 345, 355, 357, 431, 471, 481, 535, 536, 538, 656, 664, 671, 687, 696, 713, 714, 715, 723, 724, 740, 741, 742, 753, 756, 767, 804, 805, 806, 807, 808, 809], "wai": [150, 151, 320, 331, 337, 342, 343, 344, 345, 357], "unsurprisingli": [150, 327], "fundament": [150, 334, 340], "consist": [150, 155, 156, 333, 337, 431, 463, 656, 661, 753, 754, 800, 801], "each": [150, 151, 152, 155, 156, 157, 158, 159, 160, 321, 322, 324, 325, 326, 327, 328, 329, 330, 332, 333, 334, 335, 337, 338, 339, 340, 342, 343, 345, 356, 357, 368, 371, 372, 374, 379, 390, 398, 405, 431, 440, 441, 452, 453, 454, 455, 456, 457, 458, 462, 475, 481, 482, 483, 484, 485, 486, 488, 489, 490, 491, 492, 493, 494, 495, 497, 498, 500, 501, 502, 504, 505, 506, 507, 508, 509, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 527, 528, 529, 530, 532, 533, 534, 535, 536, 538, 539, 542, 543, 544, 545, 546, 547, 548, 549, 550, 553, 554, 555, 556, 558, 559, 560, 562, 563, 564, 627, 630, 632, 634, 635, 636, 643, 644, 645, 646, 647, 648, 649, 650, 651, 656, 657, 658, 659, 661, 664, 667, 668, 670, 673, 674, 687, 694, 698, 702, 703, 705, 707, 708, 713, 719, 726, 733, 734, 740, 743, 745, 746, 747, 753, 754, 767, 773, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 799, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811], "veri": [150, 151, 320, 321, 325, 327, 329, 330, 334, 336, 337, 338, 341, 343, 344, 345, 357, 767], "similar": [150, 325, 334, 335, 336, 343, 357, 481, 547, 643, 654, 788, 799], "convent": [150, 356, 656, 664, 753, 754], "those": [150, 155, 156, 320, 321, 322, 334, 340, 345, 379, 380, 627, 641, 656, 671, 674, 687, 688, 689], "introduc": [150, 334, 343, 687, 702, 745, 746], "2006": 150, "therefor": [150, 321, 325, 326, 327, 328, 329, 330, 333, 334, 335, 336, 337, 338, 340, 342, 344, 357, 398, 407, 481, 485, 486, 488, 505, 516, 555, 556, 558, 560, 563, 585, 643, 646, 655, 687, 702, 731, 732, 753, 755, 762, 763, 765], "present": [150, 155, 156, 321, 328, 334, 335, 336, 337, 338, 340], "itself": [150, 320, 321, 334, 337, 338, 344, 356, 357, 563, 565, 713, 725], "cut": 150, "cloth": 150, "adher": [150, 151, 326, 328, 340, 345], "semant": [150, 340, 345, 481, 547], "up": [150, 151, 152, 319, 321, 322, 323, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 344, 345, 356, 357], "hopefulli": [150, 151, 152, 320, 321, 322, 323, 324, 325, 326, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 342, 343, 344, 345, 356], "paint": [150, 340], "pictur": [150, 340], "how": [150, 152, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 345, 356, 357, 767, 773, 788, 799, 800, 801], "pleas": [150, 151, 152, 320, 321, 322, 323, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 342, 343, 344, 345, 356, 767], "discuss": [150, 151, 152, 319, 320, 321, 322, 323, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 342, 343, 344, 345, 356, 357, 767], "faq": [150, 151, 152, 340, 342, 343, 344, 345, 356], "reach": [150, 151, 152, 320, 321, 322, 323, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 342, 343, 344, 345, 356, 431, 455, 459, 463, 713, 725], "discord": [150, 151, 152, 320, 321, 322, 323, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 342, 343, 344, 345, 356, 767], "you": [150, 151, 152, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 342, 343, 344, 345, 356, 357, 767, 773], "question": [150, 151, 152, 320, 321, 327, 329, 340, 342, 343, 344, 345, 356, 357, 767], "central": 151, "goal": [151, 322], "being": [151, 152, 155, 156, 320, 321, 327, 329, 332, 333, 334, 335, 336, 337, 338, 340, 343, 356, 357, 379, 380, 563, 608, 613, 745, 748, 767], "would": [151, 320, 321, 323, 324, 326, 327, 329, 331, 332, 333, 334, 337, 338, 339, 340, 342, 344, 345, 357, 368, 373, 431, 476, 767], "entir": [151, 152, 155, 156, 321, 327, 328, 329, 333, 334, 337, 342, 343, 344, 345, 357, 431, 475, 753, 755, 756, 757, 758, 759, 760, 761, 762, 763, 765, 766, 788, 797], "forgiven": 151, "rais": [151, 155, 156, 321, 337, 340, 342, 398, 406, 481, 514, 546, 563, 569, 588, 597, 611, 618, 624, 656, 664, 666, 678, 687, 704, 705, 740, 743, 753, 755, 757, 762, 763, 765, 766, 800, 801, 804, 808], "eyebrow": 151, "somehow": 151, "pytorch": [151, 152, 322, 330, 335, 336, 337, 338, 340, 342, 345, 357, 627, 630, 632, 634, 635, 636, 767, 804, 805, 806, 807, 808, 809], "other": [151, 155, 156, 157, 158, 160, 320, 321, 325, 326, 327, 329, 330, 333, 334, 337, 340, 342, 344, 345, 355, 356, 357, 376, 377, 379, 380, 481, 515, 563, 564, 565, 627, 631, 733, 737, 745, 748, 753, 759, 761, 767], "strong": [151, 357], "industri": 151, "back": [151, 333, 339, 340, 342, 357, 767, 773, 800, 801, 804, 808], "momentum": 151, "won": [151, 152, 321, 345], "ad": [151, 317, 318, 320, 321, 322, 325, 326, 327, 329, 330, 332, 333, 334, 335, 337, 338, 340, 344, 357, 563, 617, 618, 656, 661, 687, 695, 810, 811], "just": [151, 152, 320, 321, 326, 327, 329, 330, 337, 340, 342, 343, 357, 753, 754, 788, 797], "make": [151, 152, 320, 321, 322, 325, 326, 327, 328, 329, 330, 333, 334, 335, 336, 337, 338, 340, 342, 343, 345, 431], "problem": [151, 321, 333, 342], "even": [151, 152, 320, 321, 326, 330, 335, 336, 338, 342, 343, 344, 345, 357, 481, 546, 548], "wors": 151, "rather": [151, 155, 156, 325, 326, 329, 334, 345, 357, 379, 380, 431, 475, 563, 599, 600, 602, 627, 633], "funni": 151, "comic": 151, "strip": 151, "easi": [151, 320, 321, 330, 334], "feasibl": 151, "space": [151, 379, 380, 388, 389, 563, 584], "unlik": [151, 327, 334, 431], "charger": 151, "charact": 151, "encod": [151, 343, 563, 584], "instant": [151, 767], "messag": [151, 321, 340, 342, 813, 814], "much": [151, 321, 325, 333, 334, 337, 340, 342, 343], "doe": [151, 155, 156, 321, 323, 324, 325, 326, 327, 329, 330, 331, 335, 337, 338, 340, 342, 343, 357, 481, 502, 504, 563, 597, 687, 703], "mandat": [151, 329, 337], "adopt": [151, 321, 333], "continu": [151, 152, 328, 329, 357], "own": [151, 152, 320, 326, 340, 357], "signatur": [151, 325, 326, 327, 334, 335, 336, 337, 338, 398, 407, 481, 486, 488, 502, 504, 505, 507, 516, 555, 556, 558, 687, 695, 702, 745, 746, 747, 750, 751, 753, 755], "replac": [151, 155, 156, 321, 323, 327, 329, 332, 334, 335, 336, 340, 342, 345, 357, 563, 609, 610, 687, 688, 689, 733, 734], "your": [151, 152, 319, 320, 322, 323, 325, 326, 343, 344, 357, 767], "10": [151, 153, 154, 155, 156, 157, 158, 159, 160, 209, 260, 264, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 320, 323, 327, 334, 340, 342, 343, 379, 386, 389, 431, 481, 493, 494, 507, 519, 528, 555, 563, 575, 585, 608, 613, 627, 634, 643, 649, 656, 659, 660, 669, 676, 687, 696, 698, 703, 731, 732, 733, 734, 735, 740, 743, 745, 746, 753, 754, 755, 804, 806], "100": [151, 152, 160, 264, 305, 306, 343, 344, 345, 357, 481, 555, 767], "despit": [151, 334, 336], "distinct": [151, 326, 334, 337, 339, 745, 746, 747, 749, 767], "still": [151, 155, 156, 326, 329, 335, 342, 344, 357, 767], "believ": [151, 321], "share": [151, 155, 156, 327, 329, 330, 331, 334, 340, 398, 426], "bring": [151, 340, 341], "benefit": [151, 152, 320, 321, 333, 334, 337, 342, 343, 357], "unrel": [151, 321], "what": [151, 152, 321, 324, 326, 327, 332, 334, 338, 339, 340, 342, 343, 344, 345, 356, 357, 767], "again": [151, 152, 321, 325, 327, 334, 337, 343, 345, 357], "contrari": 151, "bumpi": 151, "road": 151, "allud": [151, 343], "most": [151, 155, 156, 320, 321, 325, 329, 330, 333, 334, 335, 336, 337, 338, 340, 342, 343, 344, 357, 656, 661], "technolog": 151, "sector": [151, 481, 484, 489, 492], "full": [151, 152, 157, 158, 321, 326, 335, 338, 340, 357, 379, 398, 414, 481, 519, 643, 649, 656, 671, 673, 674, 731, 732], "success": 151, "reason": [151, 321, 325, 327, 330, 333, 334, 335, 337, 340, 342, 481, 547], "build": [151, 319, 320, 330, 339, 341, 344, 345, 357, 745, 746, 747, 749, 767, 788, 799, 800, 801], "custom": [151, 344], "comput": [151, 152, 155, 156, 320, 330, 334, 340, 343, 357, 431, 475, 481, 485, 493, 498, 500, 502, 504, 509, 510, 513, 518, 519, 523, 524, 534, 535, 536, 538, 539, 542, 543, 544, 563, 571, 572, 575, 576, 627, 629, 630, 631, 632, 634, 635, 636, 638, 640, 643, 644, 645, 646, 647, 648, 649, 650, 652, 654, 656, 657, 658, 661, 662, 663, 664, 665, 671, 672, 673, 674, 678, 679, 681, 682, 683, 685, 686, 713, 719, 745, 746, 747, 749, 753, 754, 755, 756, 757, 758, 759, 760, 761], "thank": [151, 343], "interoper": 151, "compon": [151, 340], "bio": [151, 320], "hardwar": [151, 320], "initi": [151, 155, 156, 157, 158, 159, 321, 331, 335, 336, 431, 643, 653, 781, 782, 784, 785, 787, 788, 789, 790, 791, 792, 793, 794, 795, 797, 798, 799, 800, 801, 804, 808], "pcie": 151, "interfac": [151, 345, 357], "motherboard": 151, "raid": 151, "storag": [151, 343], "virtual": [151, 321, 323], "bluetooth": 151, "wireless": 151, "exchang": 151, "btx": 151, "factor": [151, 431, 440, 473, 474, 475, 627, 629, 630, 634, 635, 643, 644, 645, 646, 647, 648, 649, 650, 656, 657, 788, 789, 790, 791, 792, 793, 794, 795, 804, 805, 806, 807], "sata": 151, "connect": [151, 320, 344, 345, 788, 798, 799], "host": [151, 357], "bu": 151, "adapt": [151, 627, 635, 804, 807], "html": [151, 323, 326, 398, 407, 481, 486, 488, 502, 504, 505, 507, 516, 555, 556, 558, 687, 695, 702, 745, 746, 747, 750, 751, 753, 755], "enabl": [151, 155, 156, 157, 158, 159, 320, 321, 329, 330, 333, 334, 337, 339, 340, 341, 343, 345, 357], "anyon": [151, 319, 357], "websit": 151, "tcp": 151, "ip": 151, "node": [151, 155, 156, 334, 713, 714, 723, 724], "commun": [151, 319, 321, 322, 357, 767, 773], "network": [151, 330, 334, 340, 344, 356, 643, 652, 767, 774, 788, 800, 801], "smtp": 151, "possibl": [151, 319, 320, 321, 322, 326, 327, 329, 334, 335, 337, 340, 343, 356, 357, 563, 603, 621, 753, 755, 757], "send": 151, "gmail": 151, "outlook": 151, "pop": 151, "email": 151, "ieee": [151, 378, 398, 414, 481, 485, 515, 542, 547, 555], "754": [151, 378, 398, 414, 481, 485, 515, 542, 547, 555], "allow": [151, 340, 357, 379, 388, 389, 563, 603, 800, 801], "calcul": [151, 155, 156, 157, 158, 159, 326, 481, 482, 483, 484, 485, 486, 488, 489, 490, 491, 506, 507, 508, 514, 515, 525, 527, 528, 529, 530, 532, 533, 542, 546, 550, 553, 554, 555, 559, 560, 681, 682, 683, 685, 686, 753, 755, 756, 757, 758, 759, 760, 761], "live": [151, 152], "depend": [151, 320, 321, 326, 332, 334, 335, 340, 357, 398, 404, 481, 482, 483, 484, 486, 488, 489, 490, 491, 506, 507, 514, 515, 525, 527, 528, 529, 530, 532, 546, 550, 553, 554, 560, 656, 661, 671, 673, 674, 740, 744, 750, 751, 752], "did": [151, 322, 345], "aris": [151, 357], "until": [151, 321, 357, 767], "substanti": [151, 321, 329, 333], "innov": 151, "growth": 151, "usag": [151, 340, 431, 475], "relev": [151, 320, 322, 327, 334, 335, 343, 804, 805, 806, 807, 808, 809], "area": [151, 337, 355, 481, 484, 489, 492, 767], "necess": 151, "parti": [151, 357], "could": [151, 152, 320, 321, 327, 329, 334, 335, 337, 340, 342, 343, 344, 745, 746, 747, 749], "easili": [151, 321, 343, 344, 345, 357, 767], "engag": [151, 319, 320, 321, 322, 323, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338], "regard": [151, 334, 431], "effect": [151, 326, 333, 334, 338, 357, 379, 390, 627, 636, 753, 759, 761], "2015": 151, "sinc": [151, 320, 321, 357], "alongsid": 151, "machin": [151, 320, 330, 356, 398, 414, 417, 481, 518, 656, 667, 670], "given": [151, 152, 155, 156, 320, 321, 322, 323, 325, 326, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 340, 342, 344, 345, 356, 379, 380, 382, 388, 389, 431, 464, 470, 472, 473, 474, 475, 477, 480, 563, 575, 576, 586, 609, 610, 625, 627, 629, 630, 632, 634, 635, 636, 643, 644, 645, 646, 647, 648, 649, 650, 656, 680, 681, 682, 683, 685, 686, 687, 688, 689, 695, 696, 698, 702, 703, 707, 713, 720, 721, 733, 735, 736, 737, 739, 750, 752, 777, 778], "frame": [151, 356], "matur": [151, 357], "state": [151, 326, 338, 339, 340, 341, 343, 356, 481, 542, 643, 653, 767, 774, 775, 776, 777, 778, 779, 781, 782, 784, 785, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811], "than": [151, 155, 156, 321, 325, 327, 329, 334, 337, 340, 343, 344, 345, 357, 379, 380, 398, 414, 431, 475, 481, 483, 484, 486, 488, 491, 495, 497, 501, 505, 516, 517, 525, 527, 528, 530, 532, 540, 546, 547, 549, 555, 562, 563, 599, 600, 602, 627, 633, 656, 658, 664, 667, 670, 679, 687, 688, 689, 696, 704, 733, 737, 745, 746, 747, 749, 753, 758, 759, 760, 761], "preced": [151, 344], "mention": [151, 320, 321, 327, 330, 337, 338], "aros": 151, "70": [151, 656, 669, 753, 754], "80": [151, 656, 669, 753, 754], "90": [151, 160, 264, 305, 306, 481, 502, 504, 548, 656, 669, 753, 754], "effort": [151, 319, 357], "stage": [151, 319, 321, 323, 324, 767], "complet": [151, 155, 156, 321, 322, 333, 334, 342, 343, 656, 671], "natur": [151, 327, 333, 334, 356, 481, 514, 525, 527, 529, 656, 672], "like": [151, 320, 321, 323, 324, 325, 326, 327, 329, 336, 337, 338, 339, 340, 342, 343, 344, 345, 356, 357, 627, 633, 733, 737, 767], "certainli": 151, "mission": [151, 767], "creat": [151, 155, 156, 319, 320, 321, 323, 335, 336, 337, 340, 341, 344, 355, 356, 379, 380, 381, 382, 383, 384, 386, 387, 388, 389, 391, 392, 393, 396, 397, 431, 440, 441, 563, 585, 586, 606, 609, 610, 621, 627, 640, 733, 734, 735, 737, 767, 773, 777, 778, 779, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811], "At": [151, 322], "process": [151, 152, 319, 320, 321, 323, 330, 334, 340, 345, 431, 440, 441, 470, 480], "ourselv": 151, "lead": [151, 152, 155, 156, 157, 158, 159, 357, 656, 671, 674], "quansight": 151, "compani": 151, "made": [151, 321, 322, 334, 337, 340, 342], "organ": [151, 325, 330, 333, 334], "panda": 151, "scipi": 151, "conda": [151, 320, 323], "dask": [151, 745, 746, 747, 749], "apach": 151, "onnx": 151, "scikit": 151, "jupyt": 151, "aw": 151, "cupi": 151, "net": [151, 152, 340, 345], "sympi": 151, "rai": [151, 481, 491], "modin": 151, "spyder": 151, "includ": [151, 155, 156, 321, 322, 325, 326, 327, 328, 329, 330, 331, 333, 334, 335, 336, 337, 338, 356, 357, 379, 380, 381, 391, 563, 592, 626, 656, 679, 713, 714, 733, 737, 740, 742, 753, 755, 756, 757, 758, 759, 760, 761, 762, 763, 765, 766, 770, 772, 788, 798, 799, 802, 803], "member": [151, 321], "googl": [151, 767], "octoml": 151, "einop": [151, 155, 156, 563, 579, 580, 581], "further": [151, 152, 321, 323, 327, 333, 339, 343, 344, 767], "sponsor": 151, "lg": 151, "electron": 151, "microsoft": 151, "d": [151, 152, 160, 264, 305, 306, 319, 320, 324, 334, 343, 563, 568, 574, 643, 644, 645, 646, 647, 648, 649, 650, 656, 660, 669, 767, 773], "shaw": 151, "intel": 151, "togeth": [151, 155, 156, 333, 334, 344, 345, 357, 810, 811], "major": [151, 335, 336, 357, 740, 743], "involv": [151, 319, 323, 324, 335, 345, 398, 422, 481, 485, 542, 767, 773], "anoth": [151, 155, 156, 320, 321, 330, 334, 335, 342, 345, 379, 385, 398, 405, 407], "promis": 151, "pursuit": 151, "unif": [151, 319, 342, 767, 773], "clearli": [151, 322, 327], "lot": [151, 152, 332, 342, 357], "thought": [151, 320, 321, 338], "care": [151, 321, 345], "attent": [151, 321, 333, 334, 643, 654, 655, 788, 799], "gone": [151, 339], "simplifi": [151, 340, 341, 342, 344], "compat": [151, 338, 357, 398, 406, 481, 485, 491, 493, 495, 497, 498, 500, 501, 502, 504, 508, 509, 517, 519, 523, 524, 533, 534, 536, 538, 539, 542, 544, 546, 547, 559, 656, 667, 670, 673, 676, 678, 679, 687, 699, 701, 740, 742, 753, 755, 756, 757, 758, 759, 760, 761, 762, 763, 765, 766, 767], "excit": [151, 319, 324, 767], "complianc": 151, "hope": [151, 357], "due": [151, 320, 334, 337, 481, 542], "suit": [151, 320, 321, 324, 328, 329, 343, 356], "some": [151, 152, 155, 156, 320, 321, 322, 325, 326, 327, 330, 333, 334, 335, 336, 337, 338, 341, 342, 343, 344, 356, 357, 481, 515, 627, 629, 630, 632, 634, 635, 636, 641, 643, 651, 767, 788, 796], "motiv": [151, 342], "great": [151, 152, 329, 340, 342], "convinc": 151, "celebr": 151, "encourag": [151, 356, 357, 767, 773], "foundat": 151, "point": [152, 321, 326, 327, 333, 337, 338, 340, 342, 343, 356, 378, 379, 380, 382, 384, 386, 392, 396, 398, 404, 414, 419, 422, 481, 483, 484, 485, 486, 488, 489, 490, 491, 492, 502, 504, 505, 506, 507, 508, 514, 515, 516, 525, 527, 528, 530, 532, 533, 542, 546, 547, 548, 550, 553, 554, 555, 560, 562, 656, 657, 659, 661, 662, 663, 667, 670, 671, 673, 674, 679, 745, 746, 747, 749, 753, 755, 756, 757, 758, 759, 760, 761], "mai": [152, 320, 321, 334, 342, 344, 379, 380, 385, 431, 476, 481, 509, 519, 524, 535, 536, 538, 563, 578, 745, 746, 747, 749, 750, 751, 752, 753, 755, 756, 757], "ask": [152, 340, 342, 357, 767], "perfectli": 152, "happi": [152, 320, 357], "abund": 152, "better": [152, 321, 324, 339, 342, 343, 344], "ll": [152, 319, 321, 327, 334, 337, 343], "give": [152, 320, 321, 324, 326, 327, 331, 338, 342, 687, 699, 701], "two": [152, 157, 158, 160, 326, 327, 329, 333, 334, 339, 343, 345, 379, 380, 384, 390, 394, 395, 398, 421, 426, 481, 501, 548, 563, 567, 656, 657, 659, 660, 661, 662, 663, 664, 665, 667, 668, 669, 670, 671, 672, 673, 674, 675, 677, 678, 687, 706, 745, 746, 747, 748, 749, 767], "streamlin": 152, "workflow": [152, 321, 343, 355, 767], "save": [152, 155, 156, 357, 563, 614, 800, 801], "week": [152, 321, 322, 767], "let": [152, 326, 327, 334, 335, 336, 340, 342, 343, 344, 345, 753, 756, 759, 760, 761, 767], "sai": [152, 320, 332, 342], "deepmind": 152, "releas": [152, 320, 322, 767], "awesom": 152, "paper": 152, "love": 152, "choic": [152, 320, 337, 343, 753, 759, 761], "perceiverio": 152, "happen": [152, 320, 321, 343], "slew": 152, "rush": 152, "f": [152, 323, 324, 334, 340, 343, 345, 481, 518, 563, 594, 598], "g": [152, 324, 334, 357, 398, 403, 422, 431, 447, 733, 736, 737, 745, 746, 747, 749, 753, 755, 757, 758, 760], "inevit": 152, "deviat": [152, 731, 732, 733, 736, 753, 759, 802, 803], "origin": [152, 155, 156, 157, 158, 159, 331, 332, 335, 340, 342, 481, 491, 656, 665, 687, 699, 701, 702], "often": [152, 330, 357], "erron": 152, "train": [152, 330, 334, 336, 343, 344, 345, 355, 356, 357, 627, 629, 630, 634, 767], "poor": 152, "converg": 152, "perform": [152, 155, 156, 325, 327, 329, 330, 331, 333, 334, 336, 337, 338, 340, 343, 357, 368, 373, 379, 388, 389, 431, 563, 575, 579, 580, 581, 595, 596, 597, 627, 630, 632, 634, 635, 636, 643, 651, 653, 656, 674, 709, 710, 711, 712, 713, 720, 721, 762, 763, 765, 766], "issu": [152, 319, 322, 340, 342, 344, 357], "publish": [152, 357], "manag": [152, 319, 337, 357, 431], "get": [152, 155, 156, 319, 320, 322, 324, 330, 335, 336, 337, 340, 341, 342, 343, 344, 398, 412, 413, 414, 417, 431, 440, 441, 450, 451, 464, 465, 470, 474, 477, 480, 563, 566, 587, 588, 589, 608, 767, 773, 788, 797], "work": [152, 320, 321, 322, 324, 329, 334, 335, 336, 339, 340, 341, 342, 344, 345, 767, 773], "repositori": [152, 320, 321, 323, 328], "pull": [152, 319, 320, 323, 325, 357], "request": [152, 319, 325, 431, 467], "confus": [152, 337], "do": [152, 155, 156, 320, 321, 322, 325, 326, 327, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 342, 343, 344, 345, 357, 481, 547, 563, 597, 627, 633, 641, 713, 714, 723, 724, 725], "expect": [152, 357, 563, 566, 767], "codebas": [152, 319, 324, 325, 337, 339, 431, 473, 474, 767], "total": [152, 155, 156, 157, 158, 159, 319, 321, 327, 329, 336, 343, 344, 357, 431, 477, 740, 743, 753, 759, 761], "hour": 152, "spent": 152, "spin": 152, "off": [152, 339, 656, 660, 677], "test": [152, 320, 322, 324, 327, 357, 398, 419, 420, 481, 520, 521, 522, 762, 763, 765, 766], "error": [152, 155, 156, 320, 329, 333, 336, 338, 342, 357, 368, 369, 431, 481, 510, 513, 753, 755, 757, 800, 801, 804, 808], "address": [152, 321, 322, 333, 340], "sake": 152, "singl": [152, 155, 156, 321, 325, 327, 329, 330, 332, 334, 337, 338, 340, 343, 344, 345, 357, 431, 440, 441, 460, 461, 462, 463, 563, 623, 626, 733, 736, 737, 745, 746], "multipl": [152, 155, 156, 160, 167, 251, 252, 256, 264, 266, 287, 288, 289, 290, 301, 302, 305, 306, 321, 327, 330, 334, 357, 481, 542, 563, 564, 603, 656, 663, 687, 688, 689, 690, 702, 703, 731, 732, 740, 741, 742, 753, 755, 756, 757, 758, 759, 760, 761, 762, 763, 765, 766, 788, 798], "line": [152, 320, 327, 333, 341, 342, 343, 344, 355, 767, 773], "directli": [152, 321, 325, 326, 330, 333, 334, 335, 336, 337, 338, 340, 342, 344, 345, 356, 357, 713, 725], "graph": [152, 330, 334, 341, 357, 627, 630, 632, 634, 635, 636, 745, 746, 747, 749, 800, 801], "guarante": [152, 333, 357, 745, 746], "turn": [152, 327, 334], "step": [152, 155, 156, 160, 164, 209, 250, 260, 291, 292, 320, 321, 323, 327, 331, 333, 334, 335, 336, 340, 343, 344, 345, 356, 379, 380, 388, 389, 431, 627, 629, 630, 632, 634, 635, 636, 709, 710, 711, 712, 767, 804, 805, 806, 807, 808, 809], "take": [152, 319, 320, 321, 326, 327, 329, 334, 335, 336, 340, 342, 344, 345, 357, 481, 502, 504, 767, 773], "few": [152, 321, 322, 330, 334, 335, 336, 337, 341, 342, 343, 344, 355, 767, 773], "second": [152, 320, 327, 337, 342, 398, 421, 426, 431, 462, 481, 485, 493, 495, 497, 498, 500, 501, 502, 504, 509, 517, 519, 523, 524, 533, 534, 536, 538, 539, 542, 544, 546, 559, 563, 567, 608, 613, 627, 629, 630, 634, 656, 658, 660, 661, 664, 669, 671, 674, 676, 678, 687, 705, 706, 709, 711, 745, 746, 747, 804, 805, 806], "automat": [152, 320, 321, 330, 334, 338, 339, 340, 341, 344, 345, 767], "everyon": [152, 319, 321, 357], "regardless": [152, 155, 156, 319, 342, 345, 376, 377], "wouldn": 152, "nice": [152, 329], "write": [152, 155, 156, 321, 322, 323, 324, 325, 326, 327, 329, 330, 331, 337, 340, 342, 345, 368, 371, 431, 476, 481, 482, 483, 484, 485, 486, 488, 489, 490, 491, 493, 494, 495, 497, 498, 500, 501, 502, 504, 505, 506, 507, 514, 515, 516, 520, 521, 522, 523, 525, 527, 528, 529, 530, 532, 533, 534, 535, 536, 538, 539, 542, 543, 544, 546, 547, 548, 549, 550, 553, 554, 555, 556, 558, 559, 560, 563, 572, 576, 583, 585, 681, 682, 683, 685, 686, 687, 688, 689, 695, 696, 697, 698, 702, 704, 705, 706, 731, 732, 733, 735, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 765, 766], "onc": [152, 320, 321, 334, 335, 336, 340, 343, 357, 431, 475, 656, 663, 674, 733, 734], "know": [152, 745, 746, 747, 749], "among": [152, 155, 156, 329], "frantic": 152, "port": 152, "lucid": 152, "honk": 152, "improv": [152, 321, 330, 340], "understand": [152, 320, 321, 322, 323, 324, 326, 327, 328, 338, 339], "pattern": [152, 155, 156, 326, 335, 563, 579, 580, 581], "hasn": 152, "now": [152, 155, 156, 320, 323, 325, 332, 334, 335, 338, 342, 343, 345, 356, 357, 788, 799, 800, 801], "spend": 152, "torchvis": 152, "probabl": [152, 643, 651, 733, 734, 788, 796], "sonnet": 152, "about": [152, 320, 321, 328, 339, 340, 344, 345, 357, 398, 414, 417], "next": [152, 320, 321, 322, 323, 326, 327, 331, 332, 342, 343, 398, 414, 767, 800, 801, 804, 805, 806, 807, 808, 809], "everyth": [152, 321, 322, 341, 357], "zero": [152, 155, 156, 157, 158, 327, 333, 334, 335, 336, 338, 340, 343, 344, 368, 370, 371, 379, 382, 384, 390, 394, 395, 397, 398, 404, 481, 485, 486, 488, 495, 497, 507, 515, 516, 535, 536, 538, 540, 541, 542, 543, 546, 547, 548, 555, 556, 558, 560, 563, 575, 606, 609, 610, 627, 629, 630, 634, 635, 643, 651, 656, 659, 664, 667, 670, 678, 679, 687, 695, 696, 698, 702, 708, 731, 732, 733, 735, 740, 741, 742, 743, 745, 746, 747, 749, 753, 755, 756, 757, 758, 759, 760, 761, 762, 763, 765, 766, 767, 779, 788, 789, 790, 791, 792, 793, 794, 795, 796, 798, 804, 805, 806, 807], "need": [152, 320, 321, 322, 323, 325, 326, 327, 328, 330, 333, 334, 337, 340, 342, 343, 356, 357, 563, 571, 572, 687, 688, 689, 695], "said": 152, "high": [152, 155, 156, 160, 235, 264, 265, 305, 306, 322, 343, 733, 735, 737], "level": [152, 319, 322, 330, 339, 340, 343, 344, 345, 357], "optim": [152, 337, 341, 343, 345, 356, 431, 627, 630, 632, 634, 635, 636, 709, 710, 711, 712, 767, 805, 806, 807, 809], "trainer": [152, 355, 357, 767], "statu": 152, "quo": 152, "kera": 152, "dopamin": 152, "ignit": 152, "catalyst": 152, "lightn": 152, "fastai": 152, "haiku": [152, 345], "flax": [152, 345, 357], "trax": [152, 345], "objax": [152, 345], "idea": [152, 356], "fulli": [152, 333, 334, 338, 340, 341, 342, 343, 344, 345, 357, 788, 798, 799], "offer": [152, 344], "containerwithactiv": [153, 157, 158], "dict_in": [153, 154, 155, 156, 157, 158, 159, 160, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316], "queue": [153, 154, 155, 156, 157, 158, 159, 160, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 343, 431, 440, 441, 563, 608, 613], "queue_load_s": [153, 154, 155, 156, 157, 158, 159, 160, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316], "container_combine_method": [153, 154, 155, 156, 157, 158, 159, 160, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316], "list_join": [153, 154, 155, 156, 157, 158, 159, 160, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316], "queue_timeout": [153, 154, 155, 156, 157, 158, 159, 160, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 563], "print_limit": [153, 154, 155, 156, 157, 158, 159, 160, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316], "key_length_limit": [153, 154, 155, 156, 157, 158, 159, 160, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316], "print_ind": [153, 154, 155, 156, 157, 158, 159, 160, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316], "print_line_spac": [153, 154, 155, 156, 157, 158, 159, 160, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316], "ivyh": [153, 154, 155, 156, 157, 158, 159, 160, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316], "default_key_color": [153, 154, 155, 156, 157, 158, 159, 160, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316], "green": [153, 154, 155, 156, 157, 158, 159, 160, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 320, 321, 813, 814], "keyword_color_dict": [153, 154, 155, 156, 157, 158, 159, 160, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316], "rebuild_child_contain": [153, 154, 155, 156, 157, 158, 159, 160, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316], "types_to_iteratively_nest": [153, 154, 155, 156, 157, 158, 159, 160, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316], "alphabetical_kei": [153, 154, 155, 156, 157, 158, 159, 160, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316], "containerbas": [153, 154, 155, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 334], "__getitem__": [155, 156, 334], "queri": [155, 156, 334, 335, 342, 431, 464, 474, 643, 654, 655, 788, 799], "slice": [155, 156, 563, 585, 586, 713, 722], "chain": [155, 156, 333, 334, 344, 345, 357, 709, 710, 711, 713, 726, 810, 811], "element": [155, 156, 326, 340, 345, 368, 369, 370, 371, 372, 373, 374, 375, 379, 380, 386, 387, 394, 395, 431, 454, 458, 462, 481, 482, 483, 484, 485, 486, 488, 489, 490, 491, 492, 493, 494, 495, 497, 498, 500, 501, 502, 504, 505, 506, 507, 508, 509, 510, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 527, 528, 529, 530, 532, 533, 534, 535, 536, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 553, 554, 555, 556, 558, 559, 560, 561, 562, 563, 567, 568, 571, 572, 575, 576, 583, 593, 622, 623, 643, 651, 656, 658, 661, 664, 671, 674, 687, 688, 689, 696, 698, 702, 703, 704, 733, 734, 740, 743, 744, 745, 746, 747, 748, 749, 750, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 765, 766, 788, 796], "represent": [155, 156, 157, 158, 159, 356, 378, 398, 402, 403, 414, 417, 431, 447, 448, 481, 482, 485, 493, 498, 500, 502, 504, 539, 542, 563, 565, 616, 621], "dictionari": [155, 156, 157, 158, 159, 343, 357, 431, 474], "around": [155, 156, 157, 158, 159, 321, 330, 333, 338, 342, 357], "sequenc": [155, 156, 157, 158, 159, 327, 335, 356, 431, 440, 441, 563, 568, 603, 687, 703, 705, 733, 735, 753, 755, 788, 797, 802, 803, 810, 811], "multiprocess": [155, 156, 157, 158, 159, 343, 357, 431, 440, 563], "asynchron": [155, 156, 157, 158, 159], "wait": [155, 156, 157, 158, 159, 321], "size": [155, 156, 157, 158, 159, 342, 343, 379, 388, 389, 431, 473, 474, 475, 563, 609, 615, 643, 655, 656, 660, 665, 669, 671, 674, 678, 687, 695, 702, 703, 704, 733, 734, 736, 737, 740, 741, 743, 762, 763, 765, 766, 788, 789, 790], "dimens": [155, 156, 157, 158, 159, 327, 340, 343, 368, 373, 379, 394, 395, 431, 462, 563, 579, 580, 581, 584, 590, 606, 625, 643, 644, 645, 646, 647, 648, 649, 650, 653, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 667, 668, 670, 671, 673, 674, 675, 677, 678, 679, 681, 683, 685, 686, 687, 691, 693, 695, 696, 697, 698, 699, 701, 702, 703, 704, 705, 709, 710, 711, 712, 733, 739, 740, 741, 742, 743, 745, 746, 747, 749, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 765, 766, 788, 789, 790, 791, 792, 793, 794, 795, 798, 799], "combin": [155, 156, 157, 158, 159, 321, 327, 329, 330, 333, 334, 345, 656, 658], "arriv": [155, 156, 157, 158, 159], "timeout": [155, 156, 157, 158, 159, 431, 440, 441, 563, 608, 613], "limit": [155, 156, 157, 158, 159, 321, 327, 329, 340, 343, 345, 357, 398, 414, 417, 563, 571, 572, 687, 688, 689], "maximum": [155, 156, 157, 158, 159, 327, 340, 343, 345, 431, 455, 459, 463, 475, 481, 563, 571, 572, 584, 627, 634, 687, 688, 689, 713, 725, 740, 741, 753, 755, 757, 767], "length": [155, 156, 157, 158, 159, 343, 379, 380, 390, 656, 674, 675, 687, 699, 701], "whitespac": [155, 156, 157, 158, 159], "indent": [155, 156, 157, 158, 159, 343], "extra": [155, 156, 157, 158, 159, 327, 332, 333, 340, 627, 631], "newlin": [155, 156, 157, 158, 159, 326], "handl": [155, 156, 157, 158, 159, 324, 329, 330, 332, 334, 335, 336, 337, 338, 344, 357, 376, 377, 431, 447, 448, 449, 450, 451, 465, 469, 470, 477, 480, 627, 630, 632, 634, 635, 636, 804, 805, 806, 807, 808, 809], "result": [155, 156, 157, 158, 159, 325, 326, 327, 329, 333, 334, 335, 337, 338, 343, 357, 368, 371, 379, 380, 398, 422, 431, 440, 476, 481, 482, 483, 484, 485, 486, 488, 489, 490, 491, 493, 494, 495, 497, 498, 500, 501, 502, 504, 505, 506, 507, 508, 509, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 527, 528, 529, 530, 532, 533, 534, 535, 536, 538, 539, 542, 543, 544, 546, 547, 548, 549, 550, 553, 554, 555, 556, 558, 559, 560, 562, 563, 572, 576, 583, 585, 609, 610, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 655, 656, 657, 660, 665, 674, 679, 681, 682, 683, 685, 686, 687, 688, 689, 695, 696, 697, 698, 702, 704, 705, 706, 713, 726, 731, 732, 733, 735, 740, 741, 742, 745, 746, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 765, 766, 767], "color": [155, 156, 157, 158, 159, 813, 814], "termin": [155, 156, 157, 158, 159, 320, 321, 323, 334, 340, 343], "map": [155, 156, 157, 158, 159, 329, 330, 334, 338, 343, 356, 357, 431, 440, 713, 720, 721, 725, 726, 788, 799], "termcolor": [155, 156, 157, 158, 159], "rebuild": [155, 156, 157, 158, 159], "found": [155, 156, 157, 158, 159, 320, 321, 326, 333, 334, 431, 465], "constructor": [155, 156, 157, 158, 159, 335, 336, 342, 563, 566, 810, 811], "param": [155, 156, 157, 158, 159, 340, 345, 563, 565, 585, 586], "kept": [155, 156, 157, 158, 159, 321, 337, 709, 710, 711], "structur": [155, 156, 157, 158, 159, 323, 325, 330, 333, 334, 343, 344, 563, 573, 713, 726], "alphabet": [155, 156, 157, 158, 159], "preserv": [155, 156, 157, 158, 159, 345, 357, 627, 638, 687, 696], "__setitem__": [155, 156, 333, 334, 342], "val": [155, 156, 337, 342, 563, 595, 596, 597, 611, 612], "after": [155, 156, 327, 334, 335, 339, 398, 426, 481, 555, 627, 630, 631, 632, 634, 635, 636, 731, 732, 804, 805, 806, 807, 808, 809], "updat": [155, 156, 320, 321, 322, 323, 324, 327, 328, 332, 333, 334, 335, 338, 340, 342, 343, 345, 357, 431, 440, 563, 597, 609, 610, 627, 629, 630, 632, 634, 635, 636, 643, 653, 709, 710, 711, 713, 720, 721, 729, 730, 777, 778, 804, 805, 806, 807, 808, 809], "all_fals": [155, 156], "assert_is_bool": [155, 156], "key_chain": [155, 156, 157, 158, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 283, 284, 287, 288, 289, 290, 291, 292, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 311, 312, 313, 314, 315, 316, 510, 512, 550, 552, 688, 690, 713, 726], "to_appli": [155, 156, 157, 158, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 283, 284, 287, 288, 289, 290, 291, 292, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 311, 312, 313, 314, 315, 316, 510, 512, 550, 552, 688, 690, 713, 726], "prune_unappli": [155, 156, 157, 158, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 283, 284, 287, 288, 289, 290, 291, 292, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 311, 312, 313, 314, 315, 316, 510, 512, 550, 552, 688, 690, 713, 726], "map_sequ": [155, 156, 157, 158, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 174, 176, 177, 179, 184, 185, 186, 187, 189, 190, 191, 192, 193, 194, 196, 197, 198, 199, 200, 201, 203, 206, 207, 208, 209, 210, 211, 214, 215, 216, 217, 220, 224, 225, 226, 227, 228, 230, 231, 232, 234, 235, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 283, 284, 287, 288, 289, 290, 291, 292, 299, 300, 301, 302, 303, 304, 305, 306, 311, 312, 313, 314, 315, 316, 510, 512, 550, 552, 688, 690], "entri": [155, 156, 379, 388, 389, 687, 703, 713, 726], "boolean": [155, 156, 334, 379, 386, 398, 404, 418, 430, 431, 466, 478, 481, 493, 494, 498, 500, 502, 504, 534, 535, 536, 538, 539, 563, 564, 567, 568, 592, 593, 594, 598, 599, 600, 601, 602, 619, 626, 627, 633, 709, 710, 711, 713, 723, 753, 757], "evalu": [155, 156, 334, 481, 514, 515, 525, 527, 528, 529, 530, 532, 543, 549, 556, 558, 713, 714, 723, 724, 762, 763, 765, 766], "assert": [155, 156, 342, 343, 563, 569], "skip": [155, 156, 323, 329, 713, 726], "prune": [155, 156, 713, 726, 727, 728], "all_key_chain": [155, 156], "include_empti": [155, 156], "all_tru": [155, 156, 334, 343], "arrays_as_list": [155, 156], "intermedi": [155, 156], "as_arrai": [155, 156, 563, 590, 615], "as_bool": [155, 156], "as_on": [155, 156], "ones": [155, 156, 157, 158, 329, 340, 342, 343, 379, 384, 393, 481, 505, 563, 606, 767], "sub": [155, 156, 321, 322, 324, 329, 334, 342, 343, 344, 431, 456, 457, 460, 461, 462, 463, 656, 660, 687, 703, 709, 710, 711, 712, 767], "fill": [155, 156, 379, 382, 386, 387, 392, 393, 396, 397, 733, 735], "as_random_uniform": [155, 156], "low": [155, 156, 160, 235, 264, 265, 305, 306, 340, 733, 735, 737], "uniform": [155, 156, 344, 733, 734, 735, 737, 779, 781, 782, 785, 786], "lower": [155, 156, 321, 327, 340, 357, 379, 384, 394, 481, 540, 656, 657, 733, 737], "boundari": [155, 156, 733, 737], "output": [155, 156, 320, 324, 325, 326, 327, 329, 330, 333, 334, 336, 337, 338, 340, 342, 344, 345, 357, 368, 371, 379, 380, 382, 383, 384, 386, 387, 390, 392, 393, 396, 397, 431, 440, 441, 475, 476, 481, 482, 483, 484, 485, 486, 488, 489, 490, 491, 493, 494, 495, 497, 498, 500, 501, 502, 504, 505, 506, 507, 514, 515, 516, 520, 521, 522, 523, 525, 527, 528, 529, 530, 532, 533, 534, 535, 536, 538, 539, 542, 543, 544, 546, 547, 548, 549, 550, 553, 554, 555, 556, 558, 559, 560, 563, 570, 572, 576, 583, 585, 627, 631, 643, 645, 647, 649, 651, 653, 654, 655, 656, 677, 681, 682, 683, 685, 686, 687, 688, 689, 695, 696, 697, 698, 702, 704, 705, 706, 707, 713, 726, 731, 732, 733, 735, 736, 737, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 765, 766, 767, 788, 789, 790, 791, 792, 793, 794, 796, 797, 798, 799], "interv": [155, 156, 340, 345, 379, 380, 388, 389, 656, 678, 687, 688, 689, 705, 733, 735, 737, 762, 763, 765, 766], "upper": [155, 156, 379, 384, 395, 656, 657, 671, 733, 737], "as_vari": [155, 156], "as_zero": [155, 156], "assert_contains_sub_contain": [155, 156], "sub_cont": [155, 156], "partial": [155, 156, 321, 800, 801], "except": [155, 156, 326, 333, 337, 342, 357, 398, 406, 563, 569, 578, 597, 624, 656, 670, 687, 691, 693, 705, 740, 743, 762, 763, 765, 766], "diff": [155, 156, 334, 343], "screen": [155, 156, 343], "assert_contains_sub_structur": [155, 156], "check_shap": [155, 156], "static": [155, 156, 160, 251, 252, 255, 256, 264, 266, 270, 283, 284, 287, 288, 289, 290, 291, 292, 299, 300, 301, 302, 305, 306, 311, 312, 317, 318, 322, 326, 327, 330, 357, 376, 377, 688, 690], "assert_ident": [155, 156], "check_typ": [155, 156], "same_arrai": [155, 156, 343], "arrays_equ": [155, 156, 157, 158, 563], "datatyp": [155, 156, 379, 381, 391, 398, 408, 419, 420, 421], "exact": [155, 156, 321, 340, 745, 746], "assert_identical_structur": [155, 156], "at_key_chain": [155, 156], "ignore_key_error": [155, 156], "ignore_non": [155, 156], "at_kei": [155, 156], "ignor": [155, 156, 327, 357, 379, 390, 713, 724, 804, 808], "substr": [155, 156], "access": [155, 156, 321, 323, 335], "clip_min": [155, 156], "clip_max": [155, 156], "minimum": [155, 156, 340, 345, 431, 481, 482, 563, 588, 589, 611, 612, 617, 618, 687, 688, 689, 740, 742, 753, 755, 757, 767], "config": [155, 156, 343, 713, 726], "right": [155, 156, 319, 320, 321, 324, 327, 343, 481, 495, 497, 501, 656, 674], "duplic": [155, 156, 326, 331, 332, 342, 344], "compar": [155, 156, 329, 343, 563, 564, 567, 568, 745, 746, 747, 749, 750, 751, 752], "configur": [155, 156, 320, 321, 323, 335, 431, 474, 713, 726], "container_rightmost": [155, 156], "common_key_chain": [155, 156, 334], "across": [155, 156, 322, 327, 329, 330, 334, 335, 338, 431, 440, 441, 452, 453, 455, 456, 457, 458, 459, 463, 473, 474, 563, 567, 568, 713, 719, 740, 742], "properti": [155, 156, 327, 329, 330, 334, 342, 343, 344, 431, 443, 800, 801, 804, 805, 806, 807, 809], "contains_sub_contain": [155, 156], "match": [155, 156, 334, 398, 404, 481, 547, 563, 603], "contains_sub_structur": [155, 156], "copi": [155, 156, 323, 326, 331, 335, 340, 342, 343, 356, 357, 379, 381, 385, 398, 404, 431, 476, 563, 574, 622, 623, 687, 699, 701, 713, 715, 750, 752], "create_if_abs": [155, 156], "inplac": [155, 156, 160, 164, 203, 209, 210, 230, 250, 259, 260, 261, 263, 291, 292, 324, 327, 332, 333, 338, 342, 344, 563, 569, 594, 597, 598, 619, 627, 630, 632, 634, 635, 636, 777, 778, 804, 805, 806, 807, 808, 809], "correspond": [155, 156, 157, 158, 160, 321, 326, 327, 328, 330, 333, 334, 335, 338, 398, 405, 481, 491, 546, 656, 658, 661, 673, 687, 691, 693, 702, 733, 734, 740, 741, 742, 745, 746, 747, 749, 753, 758, 759, 760, 761], "alreadi": [155, 156, 320, 321, 331, 334, 338, 342, 357, 431, 481, 505, 516, 542, 548, 562, 656, 669, 767], "noth": [155, 156, 321], "cutoff_at_depth": [155, 156], "depth_cutoff": [155, 156], "summari": [155, 156, 321, 398, 409, 410, 411, 423, 424, 425, 431, 444, 445, 563, 573, 577, 591, 627, 637, 642], "cutoff_at_height": [155, 156], "height_cutoff": [155, 156], "deep_copi": [155, 156, 343], "intern": [155, 156, 326, 333, 334, 336, 337, 431, 627, 641, 713, 714, 723, 724, 779, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 810, 811], "dev": [155, 156, 157, 159, 160, 172, 320, 330, 336, 340, 342, 344, 431, 440, 465], "belong": [155, 156, 344], "dev_clon": [155, 156, 431], "clone": [155, 156, 321, 323, 431, 452, 453, 454, 455], "dev_dist": [155, 156, 431], "distribut": [155, 156, 322, 336, 357, 431, 452, 456, 457, 458, 459, 643, 651, 681, 682, 683, 685, 686, 733, 734, 735, 736, 737, 788, 796, 800, 801], "along": [155, 156, 325, 337, 379, 388, 389, 431, 456, 457, 458, 459, 460, 461, 462, 463, 475, 563, 575, 576, 585, 625, 656, 665, 677, 678, 679, 681, 683, 685, 686, 687, 691, 693, 696, 698, 702, 703, 705, 707, 709, 710, 711, 712, 733, 739, 740, 741, 742, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 765, 766], "split": [155, 156, 319, 321, 339, 340, 357, 431, 440, 456, 457, 458, 459, 473, 474, 475, 563, 603, 687, 767], "dev_str": [155, 156], "mode": [155, 156, 320, 327, 334, 357, 376, 377, 431, 460, 461, 462, 463, 475, 481, 485, 542, 656, 671], "diff_kei": [155, 156], "detect_key_diff": [155, 156], "detect_value_diff": [155, 156], "detect_shape_diff": [155, 156], "thei": [155, 156, 322, 324, 325, 327, 330, 332, 334, 335, 336, 337, 342, 343, 344, 345, 357, 398, 421, 709, 710, 711, 733, 734, 767, 810, 811], "treat": [155, 156, 341, 345, 376, 377], "detect": [155, 156, 338, 343, 344, 713, 714, 724], "without": [155, 156, 321, 325, 330, 333, 334, 336, 338, 340, 342, 343, 344, 356, 357, 563, 608, 613, 687, 699, 701, 713, 715, 745, 746, 747, 749], "flag": [155, 156, 321, 337, 342, 431, 450, 627, 633], "container0": [155, 156], "einops_rearrang": [155, 156, 563], "axes_length": [155, 156, 563, 579, 580, 581], "rearrang": [155, 156, 563, 579, 581], "addit": [155, 156, 320, 321, 325, 326, 329, 334, 335, 342, 343, 345, 431, 476, 481, 485, 563, 579, 580, 581, 731, 732, 788, 798], "einops_reduc": [155, 156, 563], "reduct": [155, 156, 335, 342, 563, 580, 609, 610, 762, 763, 765, 766, 767], "reduc": [155, 156, 342, 431, 475, 563, 580, 656, 671, 740, 741, 742, 753, 755, 756, 757, 758, 759, 760, 761, 762, 763, 765, 766], "One": [155, 156, 335, 340, 342, 343, 563, 580, 687, 699, 701, 733, 735], "callabl": [155, 156, 334, 340, 358, 359, 360, 361, 362, 363, 364, 365, 366, 376, 377, 398, 415, 416, 431, 475, 563, 565, 570, 578, 580, 709, 710, 711, 712, 713, 719, 723, 724, 725], "einops_repeat": [155, 156, 563], "find_sub_contain": [155, 156], "sub_cont_to_find": [155, 156], "exsit": [155, 156], "find_sub_structur": [155, 156], "sub_struc_to_find": [155, 156], "flatten_key_chain": [155, 156, 343, 800, 801], "__": [155, 156, 327, 343], "above_height": [155, 156, 343], "below_depth": [155, 156, 343], "format_key_chain": [155, 156], "format_fn": [155, 156], "format": [155, 156, 323, 326, 335, 336, 340, 342, 343, 398, 412, 431, 451, 753, 754, 767], "string": [155, 156, 331, 335, 336, 340, 343, 398, 402, 403, 412, 418, 430, 431, 447, 448, 449, 450, 464, 470, 476, 477, 480, 563, 577], "from_disk_as_hdf5": [155, 156, 343], "h5_obj_or_filepath": [155, 156], "slice_obj": [155, 156], "load": [155, 156, 357], "disk": [155, 156, 343], "h5py": [155, 156], "file": [155, 156, 320, 321, 323, 325, 326, 330, 331, 333, 334, 340, 343, 563, 614, 800, 801], "hdf5": [155, 156, 343, 800, 801], "filepath": [155, 156, 321], "h5": [155, 156], "from_disk_as_json": [155, 156, 343], "json_filepath": [155, 156], "json": [155, 156, 343], "were": [155, 156, 321, 325, 329, 334], "abl": [155, 156, 320, 321, 330, 335, 337, 342, 345], "dure": [155, 156, 330, 334, 335, 336, 337, 357, 376, 377, 431, 476, 563, 624, 627, 629, 630, 634, 656, 664, 709, 710, 711, 712, 753, 759, 761, 800, 801, 804, 805, 806, 808], "from_disk_as_pickl": [155, 156, 343], "pickle_filepath": [155, 156], "pickl": [155, 156, 334, 343], "from_flat_list": [155, 156], "flat_list": [155, 156], "hierarchi": [155, 156, 343], "flat": [155, 156, 563, 609, 687, 698], "popul": [155, 156, 335, 336, 340, 733, 734, 753, 759, 761], "from_numpi": [155, 156, 343], "gather": [155, 156, 563, 586], "indic": [155, 156, 323, 341, 345, 368, 373, 481, 549, 563, 585, 586, 593, 606, 609, 610, 643, 644, 645, 646, 647, 648, 649, 650, 656, 679, 687, 702, 713, 714, 716, 718, 720, 721, 722, 724, 727, 728, 729, 730, 731, 732, 733, 734, 740, 741, 742, 743, 745, 746, 748, 750, 751, 752, 767, 770, 772, 788, 789, 790, 791, 792, 793, 794, 795, 800, 801], "accord": [155, 156, 320, 323, 330, 335, 398, 407, 414, 481, 485, 501, 542, 563, 585, 609, 610, 656, 678, 687, 694, 708, 753, 759, 761], "index": [155, 156, 323, 330, 334, 342, 378, 379, 384, 390, 431, 472, 563, 565, 585, 586, 687, 705, 713, 716, 717, 720, 721, 722, 727, 729, 740, 741, 742, 743, 745, 746, 747, 750, 751, 770, 772], "gather_nd": [155, 156, 563, 767], "h5_file_s": [155, 156], "content": [155, 156, 322, 323, 337, 340, 343], "batch": [155, 156, 330, 334, 343, 431, 473, 474, 563, 584, 643, 652, 656, 679, 709, 710, 711, 712, 731, 732, 802, 803], "handle_inplac": [155, 156], "prime": [155, 156], "overwritten": [155, 156, 331, 333], "has_kei": [155, 156], "query_kei": [155, 156], "somewher": [155, 156], "has_key_chain": [155, 156], "has_nan": [155, 156, 563], "include_inf": [155, 156, 563, 592, 626], "leafwis": [155, 156], "nan": [155, 156, 325, 326, 378, 398, 404, 481, 482, 483, 484, 485, 486, 488, 489, 490, 491, 505, 506, 507, 514, 515, 516, 520, 522, 525, 527, 528, 530, 532, 533, 542, 546, 547, 548, 550, 553, 554, 555, 560, 562, 563, 592, 626, 643, 655, 745, 746, 747, 749, 753, 755, 756, 757, 759, 760, 761, 762, 763, 765, 766], "well": [155, 156, 329, 337, 344, 345, 356, 563, 592, 656, 673], "inf": [155, 156, 378, 563, 592, 626, 656, 679], "wise": [155, 156, 340, 345, 368, 369, 370, 371, 372, 373, 374, 375, 481, 482, 483, 485, 486, 488, 490, 491, 493, 494, 495, 497, 498, 500, 501, 502, 504, 508, 509, 510, 513, 517, 518, 519, 523, 524, 533, 534, 535, 536, 538, 539, 540, 541, 542, 544, 546, 547, 559, 563, 583, 687, 688, 689], "identical_array_shap": [155, 156], "exclus": [155, 156, 330, 334, 345, 379, 380, 563, 575, 599, 600, 602, 627, 633, 733, 735], "trace": [155, 156, 157, 158, 340, 357, 563, 599, 600, 602, 656], "identical_config": [155, 156], "identical_structur": [155, 156], "if_exist": [155, 156], "inplace_upd": [155, 156, 337, 563, 777, 778], "key_chains_contain": [155, 156], "sub_str": [155, 156], "join": [155, 156, 687, 691, 693, 705, 767], "list_stack": [155, 156, 343], "dim": [155, 156, 335, 563, 606, 788, 799], "func": [155, 156, 334, 376, 377, 431, 475, 563, 570, 627, 631, 713, 726], "map_cont": [155, 156], "include_self": [155, 156], "possibi": [155, 156], "place": [155, 156, 321, 324, 325, 326, 327, 329, 330, 334, 336, 338, 345, 379, 380, 381, 382, 383, 384, 386, 387, 391, 392, 393, 396, 397, 398, 407, 431, 476, 481, 485, 486, 488, 493, 502, 504, 505, 507, 516, 548, 555, 556, 558, 560, 563, 585, 595, 596, 597, 643, 646, 655, 656, 659, 687, 695, 696, 702, 731, 732, 745, 746, 747, 750, 751, 753, 755, 762, 763, 765, 804, 805, 806, 807, 808, 809], "matrix_norm": [155, 156, 656], "ord": [155, 156, 656, 665, 679], "matrix": [155, 156, 379, 390, 394, 395, 563, 564, 571, 643, 652, 656, 657, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 670, 671, 673, 674, 675, 677, 680, 788, 798], "p": [155, 156, 160, 187, 289, 290, 320, 321, 379, 390, 563, 571, 572, 643, 651, 656, 665, 679, 788, 796], "integ": [155, 156, 334, 335, 342, 379, 380, 386, 398, 417, 420, 422, 481, 482, 493, 494, 495, 497, 498, 500, 501, 502, 504, 505, 516, 517, 539, 546, 547, 548, 562, 656, 666, 678, 679, 687, 703, 733, 735, 738, 753, 755, 756, 757, 758, 759, 760, 761, 762, 763, 765, 766], "flatten": [155, 156, 563, 584, 656, 669, 679, 687, 698, 702, 740, 741, 742, 745, 746, 747, 749], "left": [155, 156, 320, 321, 327, 335, 481, 495, 497, 656, 661, 665, 674, 740, 741, 767], "broadcast": [155, 156, 325, 326, 327, 334, 335, 368, 371, 398, 405, 406, 431, 476, 481, 482, 483, 484, 485, 486, 488, 489, 490, 491, 493, 494, 495, 497, 498, 500, 501, 502, 504, 505, 506, 507, 508, 509, 514, 515, 516, 517, 519, 520, 521, 522, 523, 524, 525, 527, 528, 529, 530, 532, 533, 534, 535, 536, 538, 539, 540, 541, 542, 543, 544, 546, 547, 548, 549, 550, 553, 554, 555, 556, 558, 559, 560, 563, 572, 583, 656, 664, 665, 667, 670, 673, 678, 679, 681, 682, 683, 685, 686, 687, 688, 689, 695, 696, 697, 698, 702, 704, 705, 706, 733, 735, 740, 741, 742, 750, 752, 753, 755, 756, 757, 758, 759, 760, 761, 762, 763, 765, 766], "correctli": [155, 156, 320, 329, 334, 335, 338, 344, 357, 656, 665, 740, 741], "max_depth": [155, 156, 431, 435, 438, 445, 455, 459, 463, 563, 591, 713, 725], "multi_map": [155, 156, 334], "map_nest": [155, 156, 160, 175, 178, 180, 181, 182, 183, 188, 195, 202, 204, 205, 212, 213, 218, 219, 221, 222, 223, 229, 233, 236, 249, 287, 288, 297, 298, 301, 302], "leftmost": [155, 156, 713, 726], "multi_map_in_static_method": [155, 156, 334], "fn_name": [155, 156], "num_arrai": [155, 156], "overwrite_at_key_chain": [155, 156], "overwrit": [155, 156, 337, 340, 431, 475], "target_dict": [155, 156], "return_dict": [155, 156], "prune_empti": [155, 156], "keep_non": [155, 156], "empti": [155, 156, 157, 158, 333, 335, 336, 379, 380, 753, 759, 760, 762, 763, 765, 766], "prune_key_chain": [155, 156], "key1": [155, 156, 344], "key2": [155, 156], "key3": [155, 156], "prune_key_from_key_chain": [155, 156], "absolut": [155, 156, 319, 481, 482, 656, 672], "certain": [155, 156, 320, 357, 379, 380, 388, 389], "decid": [155, 156, 320, 713, 724], "remov": [155, 156, 321, 322, 323, 326, 329, 330, 335, 337, 345, 656, 660, 664, 677, 687, 704, 709, 710, 711], "prune_kei": [155, 156], "prune_keys_from_key_chain": [155, 156], "remove_key_length_limit": [155, 156], "remove_print_limit": [155, 156], "reshape_lik": [155, 156], "leading_shap": [155, 156], "return_cont": [155, 156], "restructur": [155, 156], "keep_orig": [155, 156], "transpos": [155, 156, 342, 345, 431, 462, 643, 645, 647, 649, 656, 668, 670, 767, 788, 790, 792, 794], "old": [155, 156, 320, 337], "keep": [155, 156, 320, 321, 328, 334, 341, 343, 345, 563, 625], "start": [155, 156, 319, 320, 321, 322, 323, 324, 326, 327, 335, 339, 340, 342, 343, 344, 356, 357, 379, 380, 388, 389, 431, 446], "restructure_key_chain": [155, 156], "keychain_map": [155, 156], "set_at_key_chain": [155, 156], "set_at_kei": [155, 156], "set_framework": [155, 156, 340, 342, 343, 345], "set_ivy_backend": [155, 156], "ivy_backend": [155, 156], "attribut": [155, 156, 326, 334, 335, 341, 342, 343, 344, 398, 414, 415, 416, 417, 431, 471], "show": [155, 156, 320, 321, 327, 337, 356, 357, 767], "show_sub_contain": [155, 156], "sub_cont_or_keychain": [155, 156], "shuffl": [155, 156, 733, 767], "seed_valu": [155, 156, 733, 738], "align": [155, 156, 320, 340, 342, 767, 773], "seed": [155, 156, 157, 158, 733, 767], "shuffle_h5_fil": [155, 156], "dataset": [155, 156, 343, 355, 767], "size_ordered_arrai": [155, 156], "keychain": [155, 156], "smallest": [155, 156, 398, 414, 417, 481, 505], "largest": [155, 156, 356, 398, 414, 417, 656, 674], "slice_kei": [155, 156], "key_slic": [155, 156], "all_depth": [155, 156], "slice_via_kei": [155, 156], "sort_by_kei": [155, 156], "num_or_size_split": [155, 156, 340, 687, 703], "with_remaind": [155, 156, 687, 703], "constitu": [155, 156, 345], "dimension": [155, 156, 379, 380, 384, 390, 656, 658, 659, 664, 667, 669, 670, 678, 679, 687, 703, 740, 741, 742, 743, 753, 755, 756, 757, 758, 759, 760, 761, 762, 763, 765, 766], "evenli": [155, 156, 379, 380, 388, 389, 687, 703], "store": [155, 156, 326, 331, 333, 334, 340, 342, 343, 344, 563, 584, 627, 641, 656, 677, 687, 703, 800, 801], "stop_gradi": [155, 156, 157, 158, 160, 164, 203, 209, 210, 230, 250, 259, 260, 261, 263, 291, 292, 344, 431, 475, 627, 630, 632, 634, 635, 636, 709, 710, 711, 712, 767, 804, 805, 806, 807, 808, 809], "preserve_typ": [155, 156, 627, 638], "stop": [155, 156, 340, 357, 379, 380, 388, 389, 431, 446, 475, 627, 630, 632, 634, 635, 636, 638, 709, 710, 711, 712, 804, 805, 806, 807, 808, 809], "alwai": [155, 156, 321, 322, 325, 326, 330, 331, 333, 334, 337, 338, 340, 342, 357, 398, 404, 481, 485, 542, 563, 597, 627, 633, 638], "structural_diff": [155, 156], "to_devic": [155, 156, 431, 450], "move": [155, 156, 321, 325, 431, 476], "cuda": [155, 156, 340, 343, 357, 379, 388, 389, 431, 440, 447, 472, 563, 585, 586, 606, 609, 610, 733, 734, 735, 737, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 808, 810, 811], "cpu": [155, 156, 321, 336, 357, 379, 388, 389, 431, 450, 451, 453, 467, 470, 472, 476, 477, 479, 480, 563, 585, 586, 606, 609, 610, 733, 734, 735, 736, 737, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 808, 810, 811], "target": [155, 156, 324, 339, 343, 344, 345, 431, 449, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 767], "to_dict": [155, 156], "to_disk_as_hdf5": [155, 156, 343], "starting_index": [155, 156], "max_batch_s": [155, 156], "read": [155, 156, 323, 767], "r": [155, 156, 320, 563, 568, 625, 656, 671, 680], "w": [155, 156, 160, 250, 259, 260, 261, 263, 291, 292, 340, 343, 344, 563, 568, 627, 629, 630, 632, 634, 635, 636, 643, 644, 645, 646, 647, 648, 649, 650], "later": [155, 156, 563, 570], "append": [155, 156, 323, 329, 340, 343, 481, 495, 497, 656, 660, 664], "to_disk_as_json": [155, 156, 343], "to_disk_as_pickl": [155, 156, 343], "to_flat_list": [155, 156], "to_iter": [155, 156, 334], "leaf_keys_onli": [155, 156], "to_iterator_kei": [155, 156], "to_iterator_valu": [155, 156], "to_json": [155, 156], "to_list": [155, 156, 563, 767], "to_multi_dev": [155, 156], "multidevcontain": [155, 156, 157], "distributedarrai": [155, 156], "to_numpi": [155, 156, 343, 563, 767], "update_backend": [155, 156], "to_raw": [155, 156], "raw": [155, 156, 326], "trim_kei": [155, 156], "max_length": [155, 156], "try_kc": [155, 156], "tri": [155, 156], "arbitrari": [155, 156, 329, 330, 334, 337, 338, 344, 357, 379, 390, 398, 405, 422, 431, 460, 461, 463], "concatten": [155, 156, 431, 460, 461, 462, 463, 475], "unstack": [155, 156, 340, 343, 563, 767], "dim_siz": [155, 156, 431], "update_config": [155, 156], "vector_norm": [155, 156, 656], "global_norm": [155, 156, 160, 187, 289, 290], "vector": [155, 156, 356, 379, 390, 563, 572, 643, 652, 656, 658, 661, 664, 669, 674, 675, 678, 679, 680, 788, 798], "with_default_key_color": [155, 156], "with_entries_as_list": [155, 156], "with_ivy_backend": [155, 156], "with_key_length_limit": [155, 156, 343], "with_print_ind": [155, 156, 343], "with_print_limit": [155, 156, 343], "with_print_line_spac": [155, 156], "containerwithcr": [157, 158, 281], "containerwithdatatyp": [157, 158, 283], "containerwithdevic": [157, 158, 285], "containerwithelementwis": [157, 158, 287, 334], "containerwithgener": [157, 158, 289], "containerwithgradi": [157, 158, 291], "containerwithimag": [157, 158, 293], "containerwithlay": [157, 158, 295], "containerwithlinearalgebra": [157, 158, 297], "containerwithloss": [157, 158, 299], "containerwithmanipul": [157, 158, 301, 322], "containerwithnorm": [157, 158, 303], "containerwithrandom": [157, 158, 305], "containerwithsearch": [157, 158, 307], "containerwithset": [157, 158, 309], "containerwithsort": [157, 158, 311], "containerwithstatist": [157, 158, 313], "containerwithutil": [157, 158, 315], "__add__": [157, 158, 160, 326, 327, 333, 334, 338, 342], "special": [157, 158, 160, 322, 325, 326, 327, 333, 338, 481, 482, 483, 484, 485, 486, 488, 489, 490, 491, 502, 504, 505, 506, 507, 514, 515, 516, 525, 527, 528, 530, 532, 533, 542, 546, 547, 548, 549, 550, 553, 554, 555, 560, 562, 753, 755, 756, 757, 759, 760, 761], "11": [157, 158, 160, 165, 251, 264, 287, 288, 305, 306, 327, 334, 481, 485, 493, 548, 563, 575, 585, 656, 660, 669, 681, 686, 687, 696, 698, 733, 735, 740, 744, 745, 746, 753, 754], "__radd__": [157, 158, 160, 326, 327], "revers": [157, 158, 160, 322, 326, 327, 345, 357, 563, 578, 687, 696], "adam_step": [157, 158, 627], "arang": [157, 158, 335, 379, 388, 389, 753, 754, 767], "arg_info": [157, 158, 563], "arg_nam": [157, 158, 563], "argmax": [157, 158, 740, 767], "argmin": [157, 158, 740, 767], "array_equ": [157, 158, 563], "as_ivy_dev": [157, 158, 342, 431], "as_ivy_dtyp": [157, 158, 398], "as_native_dev": [157, 158, 431], "as_native_dtyp": [157, 158, 398], "asarrai": [157, 158, 337, 379, 643, 644, 745, 747], "assert_supports_inplac": [157, 158, 563], "astyp": [157, 158, 335, 337, 398], "broadcast_arrai": [157, 158, 398], "broadcast_to": [157, 158, 335, 398], "cache_fn": [157, 158, 330, 563], "choleski": [157, 158, 656], "clear_mem_on_dev": [157, 158, 431], "clip_matrix_norm": [157, 158, 563], "closest_valid_dtyp": [157, 158, 398], "container_typ": [157, 158, 563], "conv1d": [157, 158, 643, 788], "conv1d_transpos": [157, 158, 643], "conv2d": [157, 158, 643, 767, 788], "conv2d_transpos": [157, 158, 643], "conv3d": [157, 158, 643, 788], "conv3d_transpos": [157, 158, 643], "copy_arrai": [157, 158, 563], "cross": [157, 158, 656, 681, 682, 683, 685, 686, 767], "cumprod": [157, 158, 345, 563], "cumsum": [157, 158, 563, 767], "current_backend_str": [157, 158, 563], "default_devic": [157, 158, 336, 340, 431, 469, 472, 479], "default_dtyp": [157, 158, 330, 335, 398], "default_float_dtyp": [157, 158, 335, 398], "default_int_dtyp": [157, 158, 335, 398], "depthwise_conv2d": [157, 158, 643, 767], "det": [157, 158, 656], "dev_clone_arrai": [157, 158, 431], "dev_clone_it": [157, 158, 431], "dev_clone_nest": [157, 158, 431], "dev_dist_arrai": [157, 158, 431], "dev_dist_it": [157, 158, 431], "dev_dist_nest": [157, 158, 431], "dev_unifi": [157, 158, 431], "dev_unify_arrai": [157, 158, 431], "dev_unify_it": [157, 158, 431], "dev_unify_nest": [157, 158, 431], "dev_util": [157, 158, 336, 431], "diagon": [157, 158, 379, 384, 394, 395, 656, 677], "dropout": [157, 158, 343, 643, 788, 799], "dtype_bit": [157, 158, 398], "eigh": [157, 158, 656], "eigvalsh": [157, 158, 656], "empty_lik": [157, 158, 379], "execute_with_gradi": [157, 158, 334, 343, 344, 345, 357, 627, 767], "ey": [157, 158, 345, 379, 643, 646, 650], "finfo": [157, 158, 398], "floormod": [157, 158, 563, 767], "fourier_encod": [157, 158, 563], "from_dlpack": [157, 158, 379], "full_lik": [157, 158, 379], "function_supported_dtyp": [157, 158, 398], "function_unsupported_dtyp": [157, 158, 398], "gelu": [157, 158, 368, 774], "get_all_arrays_in_memori": [157, 158, 563], "get_all_ivy_arrays_on_dev": [157, 158, 336, 431], "get_min_bas": [157, 158, 563], "get_min_denomin": [157, 158, 563], "get_num_dim": [157, 158, 563, 767], "get_referrers_recurs": [157, 158, 563], "gpu_is_avail": [157, 158, 431], "handle_nest": [157, 158, 330, 334, 358], "handle_out_argu": [157, 158, 332, 335, 336, 337, 338, 358], "iinfo": [157, 158, 398], "indices_wher": [157, 158, 563, 767], "infer_devic": [157, 158, 335, 336, 338, 358], "infer_dtyp": [157, 158, 335, 336, 338, 358], "inplace_arrays_support": [157, 158, 563], "inplace_decr": [157, 158, 563], "inplace_incr": [157, 158, 563], "inplace_variables_support": [157, 158, 563], "inputs_to_native_arrai": [157, 158, 333, 358], "inv": [157, 158, 342, 656, 767], "invalid_dtyp": [157, 158, 398], "is_float_dtyp": [157, 158, 398], "is_int_dtyp": [157, 158, 398, 563, 623], "is_ivy_contain": [157, 158, 563], "leaky_relu": [157, 158, 368, 767], "linear": [157, 158, 326, 340, 343, 344, 345, 368, 369, 370, 371, 563, 584, 643, 651, 673, 767, 788, 789, 790, 791, 792, 793, 794, 795], "linspac": [157, 158, 340, 379, 380, 767], "logspac": [157, 158, 340, 379], "lstm_updat": [157, 158, 340, 643], "match_kwarg": [157, 158, 563], "matrix_pow": [157, 158, 656], "matrix_rank": [157, 158, 656], "matrix_transpos": [157, 158, 342, 656], "meshgrid": [157, 158, 379], "multi_head_attent": [157, 158, 334, 337, 643], "multinomi": [157, 158, 733], "nonzero": [157, 158, 481, 485, 542, 740], "num_arrays_in_memori": [157, 158, 563], "num_cpu_cor": [157, 158, 336, 431], "num_gpu": [157, 158, 329, 336, 431], "num_ivy_arrays_on_dev": [157, 158, 431], "one_hot": [157, 158, 345, 563, 767], "ones_lik": [157, 158, 345, 379, 767], "outer": [157, 158, 656, 709, 710, 711, 712], "outputs_to_ivy_arrai": [157, 158, 333, 335, 336, 338, 358], "percent_used_mem_on_dev": [157, 158, 431], "pinv": [157, 158, 656, 767], "print_all_arrays_in_memori": [157, 158, 563], "print_all_ivy_arrays_on_dev": [157, 158, 431], "promote_typ": [157, 158, 398], "qr": [157, 158, 656], "randint": [157, 158, 160, 264, 305, 306, 733, 767], "random_norm": [157, 158, 643, 646, 649, 650, 656, 674, 733, 745, 746], "result_typ": [157, 158, 335, 398], "scaled_dot_product_attent": [157, 158, 643], "scatter_flat": [157, 158, 563], "scatter_nd": [157, 158, 342, 563, 767], "set_default_devic": [157, 158, 336, 431, 479], "set_default_dtyp": [157, 158, 330, 335, 398], "set_default_float_dtyp": [157, 158, 335, 398], "set_default_int_dtyp": [157, 158, 335, 398], "set_min_bas": [157, 158, 563], "set_min_denomin": [157, 158, 563], "set_queue_timeout": [157, 158, 563], "set_split_factor": [157, 158, 431], "set_tmp_dir": [157, 158, 563], "set_with_grad": [157, 158, 627], "shape_to_tupl": [157, 158, 335, 563], "sigmoid": [157, 158, 340, 343, 344, 368, 767], "slogdet": [157, 158, 656], "softplu": [157, 158, 368, 767], "solv": [157, 158, 341, 356, 656], "split_factor": [157, 158, 431, 440], "split_func_cal": [157, 158, 431], "stable_divid": [157, 158, 330, 563], "stable_pow": [157, 158, 563], "static_ab": [157, 158], "static_aco": [157, 158], "static_acosh": [157, 158], "static_adam_step": [157, 158], "static_al": [157, 158], "static_ani": [157, 158], "static_arang": [157, 158], "static_arg_info": [157, 158], "static_arg_nam": [157, 158], "static_argmax": [157, 158], "static_argmin": [157, 158], "static_arrai": [157, 158], "static_array_equ": [157, 158], "static_arrays_equ": [157, 158], "static_as_ivy_dev": [157, 158], "static_as_ivy_dtyp": [157, 158], "static_as_native_dev": [157, 158], "static_as_native_dtyp": [157, 158], "static_asarrai": [157, 158], "static_asin": [157, 158], "static_asinh": [157, 158], "static_assert_supports_inplac": [157, 158], "static_astyp": [157, 158], "static_atan": [157, 158], "static_atan2": [157, 158], "static_atanh": [157, 158], "static_bitwise_and": [157, 158], "static_bitwise_invert": [157, 158], "static_bitwise_left_shift": [157, 158], "static_bitwise_or": [157, 158], "static_bitwise_right_shift": [157, 158], "static_bitwise_xor": [157, 158], "static_broadcast_arrai": [157, 158], "static_broadcast_to": [157, 158], "static_cache_fn": [157, 158], "static_ceil": [157, 158], "static_choleski": [157, 158], "static_clear_mem_on_dev": [157, 158], "static_clip_matrix_norm": [157, 158], "static_clip_vector_norm": [157, 158], "static_closest_valid_dtyp": [157, 158], "static_concat": [157, 158], "static_constant_pad": [157, 158], "static_container_typ": [157, 158], "static_conv1d": [157, 158], "static_conv1d_transpos": [157, 158], "static_conv2d": [157, 158], "static_conv2d_transpos": [157, 158], "static_conv3d": [157, 158], "static_conv3d_transpos": [157, 158], "static_copy_arrai": [157, 158], "static_co": [157, 158], "static_cosh": [157, 158], "static_cross": [157, 158], "static_cumprod": [157, 158], "static_cumsum": [157, 158], "static_current_backend": [157, 158], "static_current_backend_str": [157, 158], "static_default": [157, 158], "static_default_devic": [157, 158], "static_default_dtyp": [157, 158], "static_default_float_dtyp": [157, 158], "static_default_int_dtyp": [157, 158], "static_depthwise_conv2d": [157, 158], "static_det": [157, 158], "static_dev": [157, 158], "static_dev_clon": [157, 158], "static_dev_clone_arrai": [157, 158], "static_dev_clone_it": [157, 158], "static_dev_clone_nest": [157, 158], "static_dev_dist": [157, 158], "static_dev_dist_arrai": [157, 158], "static_dev_dist_it": [157, 158], "static_dev_dist_nest": [157, 158], "static_dev_unifi": [157, 158], "static_dev_unify_arrai": [157, 158], "static_dev_unify_it": [157, 158], "static_dev_unify_nest": [157, 158], "static_dev_util": [157, 158], "static_diagon": [157, 158], "static_dropout": [157, 158], "static_dtyp": [157, 158], "static_dtype_bit": [157, 158], "static_eigh": [157, 158], "static_eigvalsh": [157, 158], "static_einops_rearrang": [157, 158], "static_einops_reduc": [157, 158], "static_einops_repeat": [157, 158], "static_einsum": [157, 158], "static_empti": [157, 158], "static_empty_lik": [157, 158], "static_equ": [157, 158], "static_erf": [157, 158], "static_execute_with_gradi": [157, 158], "static_exist": [157, 158], "static_exp": [157, 158], "static_expand_dim": [157, 158], "static_expm1": [157, 158], "static_ey": [157, 158], "static_finfo": [157, 158], "static_flip": [157, 158], "static_floor": [157, 158], "static_floor_divid": [157, 158], "static_floormod": [157, 158], "static_fourier_encod": [157, 158], "static_from_dlpack": [157, 158], "static_ful": [157, 158], "static_full_lik": [157, 158], "static_function_supported_dtyp": [157, 158], "static_function_unsupported_dtyp": [157, 158], "static_gath": [157, 158], "static_gather_nd": [157, 158], "static_gelu": [157, 158], "static_get_all_arrays_in_memori": [157, 158], "static_get_all_ivy_arrays_on_dev": [157, 158], "static_get_min_bas": [157, 158], "static_get_min_denomin": [157, 158], "static_get_num_dim": [157, 158], "static_get_referrers_recurs": [157, 158], "static_gpu_is_avail": [157, 158], "static_great": [157, 158], "static_greater_equ": [157, 158], "static_handle_nest": [157, 158], "static_handle_out_argu": [157, 158], "static_has_nan": [157, 158], "static_iinfo": [157, 158], "static_indices_wher": [157, 158], "static_infer_devic": [157, 158], "static_infer_dtyp": [157, 158], "static_inplace_arrays_support": [157, 158], "static_inplace_decr": [157, 158], "static_inplace_incr": [157, 158], "static_inplace_upd": [157, 158], "static_inplace_variables_support": [157, 158], "static_inputs_to_native_arrai": [157, 158], "static_inv": [157, 158], "static_invalid_dtyp": [157, 158], "static_is_arrai": [157, 158], "static_is_float_dtyp": [157, 158], "static_is_int_dtyp": [157, 158], "static_is_ivy_arrai": [157, 158], "static_is_ivy_contain": [157, 158], "static_is_native_arrai": [157, 158], "static_is_vari": [157, 158], "static_isfinit": [157, 158], "static_isinf": [157, 158], "static_isnan": [157, 158], "static_layer_norm": [157, 158], "static_leaky_relu": [157, 158], "static_less": [157, 158], "static_less_equ": [157, 158], "static_linear": [157, 158], "static_linspac": [157, 158], "static_log": [157, 158], "static_log10": [157, 158], "static_log1p": [157, 158], "static_log2": [157, 158], "static_logaddexp": [157, 158], "static_logical_and": [157, 158], "static_logical_not": [157, 158], "static_logical_or": [157, 158], "static_logical_xor": [157, 158], "static_logspac": [157, 158], "static_lstm_upd": [157, 158], "static_match_kwarg": [157, 158], "static_matmul": [157, 158], "static_matrix_norm": [157, 158], "static_matrix_pow": [157, 158], "static_matrix_rank": [157, 158], "static_matrix_transpos": [157, 158], "static_max": [157, 158], "static_maximum": [157, 158], "static_mean": [157, 158], "static_meshgrid": [157, 158], "static_min": [157, 158], "static_minimum": [157, 158], "static_multi_head_attent": [157, 158], "static_multinomi": [157, 158], "static_multiprocess": [157, 158], "static_native_arrai": [157, 158], "static_neg": [157, 158], "static_nonzero": [157, 158], "static_not_equ": [157, 158], "static_num_arrays_in_memori": [157, 158], "static_num_cpu_cor": [157, 158], "static_num_gpu": [157, 158], "static_num_ivy_arrays_on_dev": [157, 158], "static_one_hot": [157, 158], "static_on": [157, 158], "static_ones_lik": [157, 158], "static_out": [157, 158], "static_outputs_to_ivy_arrai": [157, 158], "static_percent_used_mem_on_dev": [157, 158], "static_permute_dim": [157, 158], "static_pinv": [157, 158], "static_posit": [157, 158], "static_pow": [157, 158], "static_print_all_arrays_in_memori": [157, 158], "static_print_all_ivy_arrays_on_dev": [157, 158], "static_prod": [157, 158], "static_promote_typ": [157, 158], "static_qr": [157, 158], "static_queue_timeout": [157, 158], "static_random_norm": [157, 158], "static_relu": [157, 158], "static_remaind": [157, 158], "static_repeat": [157, 158], "static_reshap": [157, 158], "static_result_typ": [157, 158], "static_round": [157, 158], "static_scaled_dot_product_attent": [157, 158], "static_scatter_flat": [157, 158], "static_scatter_nd": [157, 158], "static_se": [157, 158], "static_set_default_devic": [157, 158], "static_set_default_dtyp": [157, 158], "static_set_default_float_dtyp": [157, 158], "static_set_default_int_dtyp": [157, 158], "static_set_min_bas": [157, 158], "static_set_min_denomin": [157, 158], "static_set_queue_timeout": [157, 158], "static_set_split_factor": [157, 158], "static_set_tmp_dir": [157, 158], "static_set_with_grad": [157, 158], "static_shap": [157, 158], "static_shape_to_tupl": [157, 158], "static_shuffl": [157, 158], "static_sigmoid": [157, 158], "static_sign": [157, 158], "static_sin": [157, 158], "static_sinh": [157, 158], "static_slogdet": [157, 158], "static_softmax": [157, 158], "static_softplu": [157, 158], "static_solv": [157, 158], "static_split": [157, 158], "static_split_factor": [157, 158], "static_split_func_cal": [157, 158], "static_sqrt": [157, 158], "static_squar": [157, 158], "static_squeez": [157, 158], "static_stable_divid": [157, 158], "static_stable_pow": [157, 158], "static_stack": [157, 158], "static_std": [157, 158], "static_stop_gradi": [157, 158], "static_sum": [157, 158], "static_supports_inplac": [157, 158], "static_svd": [157, 158], "static_svdv": [157, 158], "static_swapax": [157, 158], "static_tanh": [157, 158], "static_tensordot": [157, 158], "static_til": [157, 158], "static_tmp_dir": [157, 158], "static_to_devic": [157, 158], "static_to_list": [157, 158], "static_to_native_arrays_and_back": [157, 158], "static_to_numpi": [157, 158], "static_to_scalar": [157, 158], "static_total_mem_on_dev": [157, 158], "static_tpu_is_avail": [157, 158], "static_trac": [157, 158], "static_tril": [157, 158], "static_triu": [157, 158], "static_trunc": [157, 158], "static_try_else_non": [157, 158], "static_type_promote_arrai": [157, 158], "static_unique_al": [157, 158], "static_unique_count": [157, 158], "static_unique_invers": [157, 158], "static_unique_valu": [157, 158], "static_unset_default_devic": [157, 158], "static_unset_default_dtyp": [157, 158], "static_unset_default_float_dtyp": [157, 158], "static_unset_default_int_dtyp": [157, 158], "static_unset_with_grad": [157, 158], "static_unstack": [157, 158], "static_used_mem_on_dev": [157, 158], "static_valid_dtyp": [157, 158], "static_value_is_nan": [157, 158], "static_var": [157, 158], "static_vari": [157, 158], "static_variable_data": [157, 158], "static_vecdot": [157, 158], "static_vector_norm": [157, 158], "static_vector_to_skew_symmetric_matrix": [157, 158], "static_wher": [157, 158], "static_with_grad": [157, 158], "static_zero_pad": [157, 158], "static_zero": [157, 158], "static_zeros_lik": [157, 158], "supports_inplac": [157, 158, 563], "svd": [157, 158, 656, 767], "svdval": [157, 158, 656], "tensordot": [157, 158, 656], "tmp_dir": [157, 158, 563], "to_native_arrays_and_back": [157, 158, 332, 338, 358], "to_scalar": [157, 158, 563], "total_mem_on_dev": [157, 158, 336, 431], "tpu_is_avail": [157, 158, 431], "tril": [157, 158, 379], "triu": [157, 158, 379], "try_else_non": [157, 158, 563], "type_promote_arrai": [157, 158, 398], "unique_al": [157, 158, 745], "unique_count": [157, 158, 745], "unique_invers": [157, 158, 745], "unique_valu": [157, 158, 745], "unset_default_devic": [157, 158, 431], "unset_default_dtyp": [157, 158, 398], "unset_default_float_dtyp": [157, 158, 398], "unset_default_int_dtyp": [157, 158, 398], "unset_with_grad": [157, 158, 627], "used_mem_on_dev": [157, 158, 431], "valid_dtyp": [157, 158, 398], "value_is_nan": [157, 158, 563], "variable_data": [157, 158, 627], "vecdot": [157, 158, 656], "vector_to_skew_symmetric_matrix": [157, 158, 656, 767], "with_grad": [157, 158, 627, 637], "zeros_lik": [157, 158, 379, 687, 688, 689, 767], "at_dev": [157, 159, 160, 431, 444, 445], "container_method": [160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 510, 512, 550, 552, 688, 690], "adam_upd": [160, 291, 292, 344, 627], "dcdw": [160, 164, 203, 209, 210, 250, 259, 260, 261, 291, 292, 627, 629, 630, 632, 634, 635], "lr": [160, 164, 203, 209, 210, 230, 250, 259, 260, 261, 263, 291, 292, 343, 344, 627, 630, 632, 634, 635, 636, 804, 805, 806, 807, 808, 809], "mw_tm1": [160, 164, 209, 250, 260, 291, 292, 627, 630, 634], "vw_tm1": [160, 164, 209, 250, 260, 291, 292, 627, 630, 634], "beta1": [160, 164, 209, 250, 260, 291, 292, 344, 627, 629, 630, 634, 804, 805, 806], "beta2": [160, 164, 209, 250, 260, 291, 292, 344, 627, 629, 630, 634, 804, 805, 806], "999": [160, 164, 209, 250, 260, 291, 292, 344, 627, 629, 630, 634, 804, 805, 806], "static_all_equ": [160, 167, 289, 290], "int32": [160, 184, 255, 283, 284, 335, 398, 407, 415, 563, 622, 687, 695, 753, 758, 760], "int64": [160, 184, 255, 283, 284, 335, 398, 407, 415, 481, 501, 740, 741, 742, 753, 758, 760], "clip_vector_norm": [160, 289, 290, 563], "max_norm": [160, 187, 289, 290, 563, 571, 572], "gradient_descent_upd": [160, 291, 292, 627, 709, 710, 711, 712, 767], "lamb_upd": [160, 291, 292, 627], "max_trust_ratio": [160, 209, 260, 291, 292, 627, 634, 804, 806], "decay_lambda": [160, 209, 210, 260, 261, 291, 292, 627, 634, 635, 804, 806, 807], "lars_upd": [160, 291, 292, 627], "optimizer_upd": [160, 291, 292, 627], "effective_grad": [160, 230, 263, 291, 292, 627, 636], "random_uniform": [160, 305, 306, 336, 344, 733, 767], "static_adam_upd": [160, 291, 292], "static_add": [160, 287, 288, 326, 327, 334], "static_argsort": [160, 311, 312], "static_binary_cross_entropi": [160, 299, 300], "static_can_cast": [160, 283, 284], "from_": [160, 255, 283, 284, 398, 407], "static_clip": [160, 301, 302, 688], "static_rol": [160, 256, 301, 302, 327, 334, 688, 690], "static_cross_entropi": [160, 299, 300], "static_divid": [160, 287, 288, 334], "static_gradient_descent_upd": [160, 291, 292], "static_lamb_upd": [160, 291, 292], "static_lars_upd": [160, 291, 292], "static_multipli": [160, 287, 288, 334], "static_optimizer_upd": [160, 291, 292], "static_randint": [160, 305, 306], "20": [160, 264, 305, 306, 342, 481, 502, 504, 514, 548, 555, 656, 660, 669, 676, 733, 735, 740, 743, 744, 753, 754], "15": [160, 264, 305, 306, 320, 327, 481, 493, 548, 643, 646, 656, 660, 669, 676, 687, 702, 731, 732, 733, 735, 740, 743, 745, 746, 753, 754], "16": [160, 264, 270, 275, 287, 288, 305, 306, 321, 327, 343, 481, 560, 643, 649, 656, 660, 669, 740, 744, 753, 754], "12": [160, 264, 305, 306, 320, 327, 334, 481, 493, 502, 504, 507, 548, 563, 575, 589, 656, 660, 669, 676, 687, 696, 698, 702, 731, 732, 733, 735, 740, 744, 745, 746, 753, 754], "40": [160, 264, 305, 306, 481, 507, 555, 656, 669, 753, 754], "gpu": [160, 264, 305, 306, 321, 336, 342, 357, 431, 450, 453, 466, 468, 472, 474, 479], "87": [160, 264, 305, 306], "62": [160, 264, 305, 306], "52": [160, 264, 305, 306, 656, 669, 745, 746, 753, 754], "95": [160, 264, 305, 306], "37": [160, 264, 305, 306, 481, 560, 731, 732], "42": [160, 264, 305, 306, 345, 368, 374, 656, 669, 733, 738, 753, 754], "14": [160, 264, 305, 306, 323, 327, 334, 481, 502, 504, 643, 655, 656, 660, 669, 745, 746, 753, 754], "13": [160, 264, 305, 306, 327, 334, 481, 493, 502, 504, 507, 555, 563, 575, 643, 655, 656, 660, 669, 731, 732, 740, 744, 745, 746, 753, 754], "static_random_uniform": [160, 305, 306], "static_sort": [160, 311, 312], "static_sparse_cross_entropi": [160, 299, 300], "static_subtract": [160, 287, 288, 334], "static_tan": [160, 287, 288, 327, 334], "143": [160, 270, 275, 287, 288, 327, 481, 560], "38": [160, 270, 275, 287, 288, 327, 481, 560], "add_ivy_container_instance_method": 317, "containerexampl": [317, 318], "strongli": [319, 320, 767, 773], "welcom": [319, 320, 321, 767, 773], "skill": 319, "vetern": 319, "beginn": 319, "aspect": [319, 343, 767], "guid": [319, 320, 321, 329, 767], "through": [319, 321, 322, 324, 327, 330, 331, 334, 339, 340, 342, 343, 344, 345, 356, 481, 491], "journei": [319, 767, 773], "inclusvi": 319, "big": [319, 357], "team": [319, 320, 321], "board": 319, "contributor": [319, 320, 321, 339, 767], "section": [319, 321, 322, 324, 325, 326, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 343, 344, 745, 746, 747, 749], "below": [319, 320, 322, 323, 324, 325, 327, 330, 334, 335, 336, 337, 340, 341, 342, 343, 344, 345, 356, 379, 390, 394, 395, 481, 493, 502, 504, 507, 548, 656, 659, 660, 677, 687, 695, 696, 745, 746, 747, 750, 751, 767], "best": [319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 563, 603], "go": [319, 320, 321, 322, 324, 325, 327, 334, 339, 343, 357, 713, 724], "finish": [319, 320, 324, 767], "dive": [319, 321, 322, 339, 342, 343, 357, 767], "environ": [319, 321, 323, 356], "basic": [319, 322, 323], "fork": [319, 320, 563, 604], "doc": [319, 322, 326, 338, 340, 343, 344, 767], "document": [319, 321, 341, 343, 345], "local": [319, 320, 323, 330], "task": [319, 321, 356, 709, 710, 711, 712, 767], "help": [319, 320, 327, 331, 333, 334, 342, 343, 344, 355, 563, 565, 753, 760, 767], "video": [319, 321, 326, 327, 338], "realli": [320, 334, 357], "contribut": [320, 321, 322, 340, 773], "toward": [320, 340, 687, 702, 767, 773], "page": [320, 321, 341, 345, 355, 767, 773], "explain": [320, 321, 322, 325, 326, 327, 329, 330, 331, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 344, 345, 767, 773], "main": [320, 323, 332, 334, 379, 384, 394, 395, 656, 660, 677], "prefer": [320, 334], "git": [320, 321], "submodul": [320, 321, 322, 323, 328, 329, 330, 336, 339, 340, 344, 767, 802, 803, 810, 811], "com": 320, "unifyai": [320, 323], "http": [320, 326, 398, 407, 481, 486, 488, 502, 504, 505, 507, 516, 555, 556, 558, 627, 629, 630, 687, 695, 702, 745, 746, 747, 750, 751, 753, 755], "gh": 320, "your_fold": 320, "id": [320, 333, 334, 431, 450, 800, 801], "cours": [320, 321, 327, 343, 357], "whatev": [320, 357], "integr": [320, 329, 398, 404], "familiar": [320, 322], "sure": [320, 322, 328], "elig": 320, "free": [320, 321, 322, 323, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 356, 767], "student": 320, "licenc": 320, "peopl": [320, 321, 324], "seem": [320, 344, 357], "miss": [320, 327, 329, 333, 334, 804, 808], "explicit": [320, 323, 334, 335, 337, 340, 357], "remind": 320, "channel": [320, 321, 322, 323, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 563, 584, 788, 789, 790, 791, 792, 793, 794, 795, 797, 798], "pace": 320, "suggest": [320, 321, 325], "latest": [320, 322, 323, 326, 357, 398, 407, 481, 486, 488, 502, 504, 505, 507, 516, 555, 556, 558, 687, 695, 702, 745, 746, 747, 750, 751, 753, 755, 788, 797], "packag": [320, 323, 357], "ensur": [320, 321, 329, 333, 335, 338, 563, 597], "pypi": [320, 322, 357], "person": [320, 321], "experi": [320, 341, 343, 357], "avoid": [320, 321, 329, 331, 332, 334, 342, 431, 481, 515], "pip": [320, 356, 767], "instal": [320, 323, 356, 767], "abil": [320, 341, 357], "perhap": [320, 342, 343, 344, 357], "track": [320, 321, 431, 713, 725, 800, 801], "run": [320, 323, 328, 329, 331, 338, 340, 341, 342, 343, 344, 345, 356, 357, 431, 440, 627, 629, 630, 634, 709, 710, 711, 712, 788, 799, 800, 801], "command": [320, 323, 767], "ivy_dev": [320, 321, 323], "name": [320, 321, 323, 326, 329, 340, 342, 343, 345, 376, 377, 563, 565, 656, 661, 671, 674, 745, 746, 747], "setup": 320, "click": [320, 321, 326, 767], "icon": [320, 321], "side": [320, 321], "choos": [320, 321, 345, 431, 476, 481, 535, 536, 538, 740, 744, 745, 746, 747, 749, 753, 755, 756, 757], "panel": 320, "select": [320, 321, 329, 340, 342, 345, 357], "drop": [320, 357], "down": [320, 342], "path": [320, 323], "manual": [320, 321, 329, 344, 713, 714, 723, 724], "builtin": [320, 323, 342, 344], "requir": [320, 323, 325, 326, 327, 329, 332, 333, 335, 336, 338, 342, 357, 376, 377, 481, 555, 656, 661, 687, 705, 777, 778], "cmd": [320, 323], "directori": [320, 321, 323, 563, 614], "folder": [320, 321, 323, 325, 328, 329, 330], "abov": [320, 321, 323, 326, 327, 330, 331, 333, 334, 337, 338, 342, 343, 344, 345, 379, 390, 394, 395, 398, 407, 481, 485, 486, 488, 493, 502, 504, 505, 507, 516, 542, 548, 555, 556, 558, 560, 563, 585, 643, 646, 655, 656, 659, 660, 661, 677, 687, 695, 696, 702, 731, 732, 733, 735, 745, 746, 747, 750, 751, 753, 755, 758, 759, 760, 762, 763, 765], "m": [320, 321, 323, 324, 340, 379, 390, 394, 395, 563, 568, 656, 657, 659, 660, 661, 662, 663, 664, 667, 668, 669, 670, 671, 673, 674, 675, 677, 733, 736, 737], "python3": [320, 323], "script": [320, 321, 323, 327, 340, 357], "bat": [320, 321, 323], "OR": [320, 321, 323, 481, 498, 500, 536, 538, 762, 766], "bin": [320, 321, 323], "mac": [320, 321, 323], "linux": [320, 321, 323], "virtualenv": 320, "os": 320, "note": [320, 321, 325, 326, 327, 334, 481, 547, 656, 661, 674, 687, 705, 745, 747, 753, 756], "tick": [320, 321], "To": [320, 327, 330, 334, 343, 344, 345, 767], "ivy_test": [320, 321], "test_array_api": [320, 321, 328, 329], "cd": [320, 321, 323], "txt": 320, "visual": [320, 357], "jetbrain": 320, "remot": 320, "mitig": 320, "potenti": [320, 339, 481, 515], "conflict": [320, 321, 343], "yet": [320, 322, 334], "particular": [320, 321, 325, 337, 481, 482], "system": [320, 357, 656, 673], "instruct": [320, 322], "desktop": 320, "wsl": 320, "powershel": 320, "admin": 320, "visit": 320, "link": 320, "profession": 320, "execut": [320, 323, 334, 337, 340, 342, 345, 357, 563, 624], "deploy": 320, "top": [320, 321, 329, 343, 344, 767], "press": [320, 343, 767], "ok": 320, "caus": [320, 321, 327, 329, 334, 337, 357], "earlier": [320, 321], "might": [320, 321, 325, 329, 332, 340, 342, 343, 563, 578], "necessari": [320, 327, 331, 334, 337], "virtualis": 320, "detail": [320, 321, 322, 325, 328, 329, 330, 331, 332, 334, 338, 343, 344, 379, 385, 745, 746, 747, 749], "sudo": 320, "apt": 320, "ca": 320, "certif": 320, "curl": 320, "gnupg": 320, "lsb": 320, "mkdir": 320, "keyr": 320, "fssl": 320, "download": [320, 329], "gpg": 320, "dearmor": 320, "o": [320, 340, 563, 568], "echo": 320, "deb": 320, "arch": 320, "dpkg": 320, "architectur": [320, 345, 357], "lsb_releas": 320, "cs": 320, "tee": 320, "null": 320, "ce": 320, "cli": 320, "containerd": 320, "io": 320, "compos": [320, 334, 357], "plugin": 320, "systemctl": 320, "permiss": 320, "relat": [320, 321, 356, 431], "post": [320, 345, 731, 732, 767, 773], "It": [320, 321, 323, 324, 325, 326, 327, 331, 333, 334, 337, 340, 342, 343, 344, 368, 371, 431, 476, 481, 482, 483, 484, 485, 486, 488, 489, 490, 491, 493, 494, 495, 497, 498, 500, 501, 502, 504, 505, 506, 507, 514, 515, 516, 520, 521, 522, 523, 525, 527, 528, 529, 530, 532, 533, 534, 535, 536, 538, 539, 542, 543, 544, 546, 547, 548, 549, 550, 553, 554, 555, 556, 558, 559, 560, 563, 572, 583, 681, 682, 683, 685, 686, 687, 688, 689, 695, 696, 697, 698, 702, 704, 705, 706, 733, 735, 740, 741, 750, 751, 752, 762, 763, 765, 766], "headach": 320, "arm": 320, "m1": 320, "instead": [320, 321, 322, 326, 327, 329, 330, 334, 337, 338, 340, 342, 343, 357], "featur": [320, 325, 338, 343, 767], "vm": 320, "azur": 320, "cloud": [320, 356], "defin": [320, 322, 325, 326, 335, 338, 342, 344, 357, 481, 542, 547, 563, 606, 656, 658, 661, 673, 733, 735, 753, 755, 756, 757], "dockerfil": [320, 323], "longer": [320, 335, 337], "worri": 320, "platform": 320, "agnost": [320, 333, 338, 340, 342, 345, 357, 767], "usual": 320, "studio": 320, "favourit": 320, "extens": [320, 321, 326, 379, 390, 398, 407, 481, 485, 486, 488, 493, 502, 504, 505, 507, 516, 548, 555, 556, 558, 560, 656, 659, 687, 695, 696, 702, 745, 746, 747, 750, 751, 753, 755, 762, 763, 765], "theme": 320, "too": [320, 321, 357, 481, 485, 542], "done": [320, 321, 327, 329, 343], "unsupport": [320, 335, 398, 415, 416], "slow": 320, "ipad": 320, "long": [320, 321, 327, 643, 653], "browser": 320, "cool": [320, 325], "requisit": 320, "head": [320, 334, 643, 654, 767, 788, 799], "pane": [320, 321], "readi": [320, 322], "begin": [320, 713, 714, 724], "outlin": [320, 321, 322, 324, 326, 329, 330, 334, 337, 342], "dropdown": 320, "tab": [320, 343, 767], "master": [320, 321, 334], "vs": 320, "view": [320, 321, 379, 385, 643, 646, 650], "built": [320, 341, 379, 380, 431, 788, 799, 800, 801], "bottom": 320, "box": 320, "patient": 320, "upto": 320, "minut": 320, "launch": 320, "That": [320, 321, 342, 343, 344, 481, 547], "refer": [320, 321, 329, 330, 335, 338, 357, 379, 384, 481, 515, 529, 627, 629, 630, 656, 678, 680, 753, 759, 761, 762, 763, 765, 766, 788, 798], "approach": [320, 321, 329, 330, 334, 342, 343, 357], "colour": 320, "applic": [320, 335, 336, 344, 643, 654, 655, 713, 719, 725], "good": [320, 321, 322, 323, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 344], "chanc": 320, "vscode": 320, "explor": [320, 341, 345, 356], "troubleshoot": 320, "sometim": [320, 321], "ever": [320, 321, 322, 323, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338], "64": [320, 343, 344, 481, 555, 556, 558, 643, 649, 650, 656, 669, 753, 754, 767, 788, 799], "bit": [320, 327, 330, 334, 342, 398, 413, 414, 417, 481, 494, 495, 497, 501, 753, 758, 760], "usr": 320, "more": [320, 321, 322, 324, 325, 327, 329, 330, 331, 332, 333, 334, 337, 338, 339, 340, 341, 342, 343, 344, 345, 356, 357, 379, 380, 398, 405, 481, 515, 656, 664, 687, 696, 745, 746, 747, 749, 767], "nutshel": [320, 338], "hook": 320, "lint": 320, "fix": [320, 321], "fail": [320, 322, 328, 329, 340, 342], "attempt": [320, 357], "succe": 320, "problemat": 320, "proce": [320, 321, 322, 323, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338], "modifi": [320, 321, 326, 330, 335, 336, 340], "properli": [320, 324], "enter": [320, 321, 333, 335, 336, 338, 431], "unsur": [320, 321, 322, 323, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338], "feel": [320, 321, 322, 323, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 767], "server": [321, 767], "context": [321, 327, 334, 335, 336, 431, 563, 604, 643, 654, 788, 799], "suitabl": [321, 325, 334], "quick": [321, 324, 344], "tendenc": 321, "land": 321, "end": [321, 334, 337, 339, 356, 357, 379, 380, 481, 491, 767, 773], "world": 321, "come": [321, 322, 344, 355, 767, 773], "fly": 321, "hard": [321, 342], "receiv": [321, 329, 335, 336, 431, 440, 441, 563, 566, 603, 788, 798], "respons": [321, 323], "internship": 321, "comment": 321, "trigger": 321, "unansw": 321, "label": [321, 340, 341, 345, 681, 682, 683, 685, 686], "respond": 321, "someon": [321, 357], "els": [321, 322, 325, 330, 331, 337, 340, 342, 344, 345, 357, 563, 569, 578, 582, 713, 723], "strive": [321, 357], "repli": 321, "newli": [321, 337, 376, 377, 398, 404, 563, 570], "bug": [321, 329], "serv": [321, 329, 330, 333, 334, 338, 339, 767], "suspect": 321, "behaviour": [321, 326, 329, 333, 334, 337, 338, 342], "observ": 321, "confid": 321, "wrong": 321, "someth": [321, 325, 343, 344, 357], "bet": 321, "act": [321, 327, 357], "placehold": [321, 333, 338, 713, 725], "mark": [321, 329], "ii": [321, 753, 754], "iii": 321, "titl": [321, 767], "issue_numb": 321, "delet": [321, 323], "No": [321, 340], "progress": [321, 334, 341, 345], "pr": 321, "soon": [321, 334, 355, 357, 767, 773], "solut": [321, 329, 334, 656, 673], "review": [321, 325], "merg": 321, "everi": [321, 322, 323, 327, 328, 329, 330, 331, 332, 334, 337, 338, 340, 342, 344, 379, 386, 387, 563, 564], "dai": 321, "close": [321, 326, 481, 515, 548, 656, 674], "likewis": [321, 326, 330, 334, 335, 338, 343], "freed": 321, "purpos": [321, 323, 327, 329, 330, 332, 333, 334, 338, 339, 342, 481, 515, 767], "remain": [321, 327, 357, 481, 485, 542, 547, 687, 699, 701, 713, 719], "short": [321, 344, 643, 653], "basi": [321, 328, 343], "situat": [321, 345], "alloc": [321, 357, 379, 394, 395, 398, 404, 431], "upon": [321, 327, 329, 337, 357], "period": 321, "prevent": [321, 337, 342, 627, 629, 630, 634, 753, 760, 804, 805, 806], "unabl": 321, "obvious": 321, "never": [321, 334], "reflect": [321, 333], "qualiti": 321, "hypothet": 321, "frustrat": 321, "delai": 321, "busi": 321, "fine": [321, 342, 345], "becaus": [321, 326, 329, 330, 331, 333, 335, 336, 337, 338, 340, 344, 345, 357], "inact": 321, "me": 321, "unfairli": 321, "definit": [321, 330, 335, 342, 656, 657, 658], "investig": 321, "Then": [321, 323, 342, 357], "practic": [321, 329], "separ": [321, 329, 333, 340, 342, 343], "branch": [321, 334, 357, 376, 377, 481, 491], "role": [321, 341], "date": 321, "upstream": [321, 328], "complic": [321, 340], "root": [321, 323, 343, 481, 555, 733, 734, 736, 737], "merge_with_upstream": 321, "sh": 321, "name_of_your_branch": 321, "resolv": [321, 753, 758, 760], "push": [321, 328], "both": [321, 326, 327, 330, 334, 336, 337, 338, 340, 342, 343, 344, 345, 356, 357, 398, 407, 421, 481, 485, 486, 488, 505, 516, 546, 555, 556, 558, 560, 563, 585, 643, 646, 655, 656, 658, 664, 678, 687, 702, 731, 732, 753, 755, 762, 763, 765], "abort": 321, "tediou": 321, "resolut": 321, "stash": 321, "reinstat": 321, "fetch": 321, "uncommit": 321, "unstag": 321, "untrack": 321, "comprehens": 321, "explan": [321, 326, 334, 338, 342], "atlassian": 321, "tutori": 321, "quit": [321, 322, 326, 330, 332, 333], "logic": [321, 332, 333, 335, 336, 342, 431, 467, 481, 534, 535, 536, 538, 762, 763, 765, 766, 767], "blame": 321, "revis": 321, "author": [321, 767], "eg": 321, "past": 321, "l": [321, 324, 656, 657, 661, 664, 677], "grep": 321, "v": [321, 340, 343, 344, 345, 643, 655, 767, 788, 789, 790, 791, 792, 793, 794, 795, 797, 798, 799, 800, 801, 802, 803, 804, 808, 810, 811], "commit_id": 321, "handi": 321, "histori": 321, "toggl": 321, "vertic": 321, "highlight": [321, 327], "previou": [321, 329, 338, 345, 357, 627, 630, 634], "inform": [321, 398, 414, 417, 563, 565, 627, 638], "whenev": [321, 342, 343], "tag": 321, "think": [321, 327], "interact": [321, 767], "gain": [321, 339, 344, 779], "yourself": [321, 322, 356], "simpler": [321, 342], "cannot": [321, 331, 335, 345], "least": [321, 327, 330, 333, 656, 664], "final": [321, 326, 327, 330, 333, 335, 337, 340, 342, 343, 379, 388, 389, 563, 584, 788, 799], "tickbox": 321, "corner": 321, "span": 321, "intent": [321, 337], "larg": [321, 343, 481, 485, 542], "discourag": 321, "philosophi": 321, "increment": [321, 563, 596], "frequent": [321, 322], "valuabl": 321, "infrequ": 321, "earli": [321, 767], "wast": 321, "spot": [321, 330], "mistak": 321, "propos": 321, "mountain": 321, "advoc": [321, 357], "individu": [321, 322, 330], "per": [321, 343, 431, 643, 644, 645, 646, 647, 648, 649, 650, 788, 789, 790, 791, 792, 793, 794, 795], "style": [321, 740, 743], "ve": [321, 339, 342, 733, 734, 767], "actual": [321, 324, 330, 337, 339, 342, 344, 357], "aim": [321, 339], "part": [321, 325, 328, 329, 330, 340, 341, 345, 356, 357, 379, 394, 395, 627, 630, 632, 634, 635, 636, 800, 801], "subsect": 321, "session": [321, 767], "block": [321, 330, 339, 341, 345, 357, 431, 767], "smaller": [321, 340, 345, 687, 688, 689, 702, 753, 758, 760], "edit": 321, "beauti": 321, "particularli": [321, 343, 357], "concern": [321, 324, 327, 334, 337, 339], "effici": [321, 329, 330, 334, 337, 338, 340, 343, 357], "difficult": [321, 329, 357, 745, 746, 747, 749], "undo": 321, "stress": 321, "frequenc": [321, 563, 584], "pycharm": 321, "pytest": [321, 329], "button": 321, "declar": 321, "insid": [321, 323, 325, 335], "exec": 321, "rm": 321, "rf": 321, "cp": 321, "ivy_contain": 321, "bash": [321, 323], "test_ivi": [321, 329], "test_funct": 321, "test_cor": 321, "test_imag": 321, "test_random_crop": 321, "header": 321, "q": [321, 357, 643, 655, 656, 661, 671], "array_api_test": 321, "test_creation_funct": 321, "test_arang": 321, "window": [321, 323, 643, 644, 645, 646, 647, 648, 649, 650, 788, 789, 790, 791, 792, 793, 794, 795], "variou": [321, 326, 332, 338, 356], "wherebi": [322, 334, 713, 725], "broad": 322, "todo": [322, 329], "commit": [322, 329], "NOT": [322, 481, 535], "resourc": 322, "hypothesi": 322, "cover": [322, 326, 327, 330, 332, 339], "lambda": [322, 340, 343, 804, 807, 809], "direct": [322, 344, 345, 356, 750, 752], "bind": [322, 334], "aforement": 322, "categori": [322, 325, 333, 334, 335, 339, 767], "parent": [322, 342], "hint": [322, 325, 326, 330, 333, 337, 338, 379, 390, 398, 407, 481, 485, 486, 488, 493, 502, 504, 505, 507, 516, 548, 555, 556, 558, 560, 563, 585, 643, 646, 655, 656, 659, 687, 695, 696, 702, 731, 732, 745, 746, 747, 750, 751, 753, 755, 762, 763, 765], "its": [322, 323, 326, 398, 405, 431, 475, 656, 664, 687, 695, 699, 701, 702, 706], "thorough": [322, 326, 329, 338], "transpil": [322, 339, 341, 767, 773], "builder": [323, 355, 357, 767], "maco": 323, "ubuntu": 323, "uid": 323, "make_docs_without_dock": 323, "rel": [323, 627, 630, 632, 634, 635, 636, 656, 660, 667, 670, 677, 687, 696, 702, 750, 751, 752, 767], "synchron": 323, "rest": [323, 341, 345], "remove_doc": 323, "_": [323, 326, 334, 337, 342, 343, 398, 407, 481, 486, 488, 502, 504, 505, 507, 516, 555, 556, 558, 627, 629, 630, 656, 680, 687, 695, 702, 745, 746, 747, 750, 751, 753, 755], "privat": [323, 804, 808], "fulfil": [323, 339, 767], "autogenerated_sourc": 323, "png": [323, 343], "_imag": 323, "lastli": 323, "rst": 323, "partial_sourc": 323, "conf": 323, "create_rst_fil": 323, "filter": [323, 643, 644, 645, 646, 647, 648, 649, 650, 788, 789, 790, 791, 792, 793, 794, 795], "repres": [323, 342, 379, 390, 398, 413, 481, 484, 485, 489, 492, 507, 542, 554, 643, 652, 656, 672, 673], "overal": [323, 326, 334, 335, 336, 345], "markup": 323, "extract": [323, 325], "get_functions_and_class": 323, "doctr": 323, "readm": [323, 357], "module_nam": 323, "copy_readme_to_rst": 323, "tabl": 323, "toc": 323, "tree": 323, "append_toctree_to_rst": 323, "create_index_rst": 323, "\u03c0": [323, 481, 483, 486, 488, 490, 491], "namespac": [323, 325, 335, 340, 345], "who": [324, 339, 357], "mainli": [324, 341, 343], "under": [324, 326, 327, 328, 329, 330, 334, 339, 340, 343, 345], "hood": [324, 327, 329, 330, 334, 339, 340, 343, 345], "weed": [324, 339], "behind": [324, 339, 341, 627, 630, 632, 634, 635, 636], "navig": 324, "tour": 324, "primari": [324, 329, 331, 337, 357], "composit": [324, 329, 331, 333, 334, 337, 340, 344, 345, 357], "nestabl": [324, 326, 327, 329, 337, 398, 407, 481, 485, 486, 488, 505, 516, 555, 556, 558, 560, 563, 585, 643, 646, 655, 687, 702, 731, 732, 753, 755, 762, 763, 765], "dynam": [324, 335, 336, 337, 340, 376, 377], "runtim": [324, 329, 431], "h": [324, 334, 643, 646, 647, 648, 649, 650], "j": [324, 563, 567, 568, 656, 677, 753, 754], "k": [324, 340, 379, 384, 394, 395, 563, 567, 643, 655, 656, 664, 671, 673, 674, 675, 677, 733, 736, 737, 740, 743], "borrow": 324, "n": [324, 379, 390, 394, 395, 563, 568, 643, 651, 656, 660, 664, 666, 667, 668, 669, 670, 671, 674, 675, 677, 678, 679, 680, 687, 694, 695, 697, 705, 708, 733, 736, 737, 740, 743, 753, 756, 759, 760, 761, 762, 763, 765, 766], "taken": [325, 345, 656, 660], "constant": [325, 330, 344, 345, 357, 431, 440, 441, 687, 694, 713, 719, 731, 732, 779, 780, 784, 787, 800, 801, 802, 803], "compil": [325, 334, 339, 341, 357, 767, 800, 801, 804, 805, 806, 807, 808, 809], "meta": [325, 333, 710, 711, 712], "overlap": 325, "sever": [325, 357, 656, 663], "judgement": 325, "locat": [325, 329, 331, 336, 733, 734], "some_namespac": 325, "some_backend": 325, "another_backend": 325, "break": [325, 338, 342, 357, 767], "anyth": [325, 767], "refactor": 325, "ongo": 325, "subfold": [325, 329], "via": [325, 334, 335, 336, 337, 340, 342, 343, 356, 713, 714, 723, 724], "file_nam": 325, "my_func": [325, 327], "int": [325, 327, 330, 334, 335, 336, 337, 338, 345, 368, 373, 376, 377, 379, 382, 384, 386, 387, 388, 389, 392, 394, 395, 396, 398, 406, 411, 413, 414, 417, 420, 431, 453, 456, 457, 458, 459, 467, 468, 469, 475, 476, 481, 493, 494, 495, 497, 498, 500, 501, 502, 504, 563, 565, 575, 576, 579, 580, 581, 584, 585, 590, 606, 609, 610, 615, 616, 625, 627, 629, 630, 634, 643, 644, 646, 648, 649, 650, 656, 658, 660, 676, 677, 678, 679, 681, 683, 685, 686, 687, 691, 693, 694, 695, 696, 697, 698, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 725, 731, 732, 733, 734, 735, 736, 737, 738, 740, 741, 742, 750, 751, 752, 753, 755, 756, 757, 759, 760, 761, 762, 763, 765, 766], "nativedtyp": [325, 335, 336, 338, 379, 380, 381, 382, 383, 384, 386, 387, 391, 392, 393, 396, 397, 398, 403, 404, 410, 411, 412, 421, 753, 760], "nativedevic": [325, 335, 336, 338, 379, 380, 381, 382, 383, 384, 386, 387, 388, 389, 391, 392, 393, 396, 397, 431, 448, 449, 450, 464, 470, 472, 474, 476, 477, 480, 563, 606, 733, 734, 735, 736, 737], "my": 325, "numer": [325, 344, 379, 390, 398, 404, 481, 482, 485, 505, 508, 515, 516, 517, 520, 521, 522, 523, 535, 536, 538, 542, 543, 544, 546, 547, 549, 556, 558, 559, 562, 563, 588, 589, 611, 612, 617, 618, 656, 658, 664, 669, 674, 676, 677, 678, 733, 739, 740, 741, 742, 753, 755, 758, 760, 779], "cooler": 325, "produc": [325, 431, 440, 441, 643, 655], "something_cool": 325, "category_nam": [326, 330, 335, 336, 338], "contrast": [326, 338], "backend_nam": [326, 330, 331, 332, 335, 336, 338], "account": 326, "instanti": 326, "firstli": [326, 327, 330, 333, 335, 337, 343], "templat": [326, 767], "spec": [326, 327], "api_specif": [326, 398, 407, 481, 486, 488, 502, 504, 505, 507, 516, 555, 556, 558, 687, 695, 702, 745, 746, 747, 750, 751, 753, 755], "array_api": 326, "preview": 326, "render": 326, "incorrectli": 326, "onlin": [326, 767], "approxim": [326, 368, 369, 481, 483, 484, 486, 488, 489, 490, 491, 506, 507, 514, 515, 525, 527, 528, 529, 530, 532, 546, 550, 553, 554, 560, 656, 667, 670], "tangent": [326, 368, 375, 481, 490, 491, 492, 560, 561], "domain": [326, 481, 483, 484, 486, 488, 489, 490, 491, 506, 507, 514, 515, 525, 527, 528, 530, 532, 550, 553, 554, 555, 560], "infin": [326, 378, 398, 404, 481, 482, 484, 485, 489, 490, 491, 505, 506, 507, 514, 515, 516, 517, 520, 521, 525, 527, 528, 530, 532, 533, 542, 546, 547, 548, 550, 553, 554, 555, 560, 562, 656, 679, 753, 755, 757, 762, 763, 765, 766], "codomain": [326, 481, 483, 484, 486, 488, 489, 490, 491, 506, 507, 514, 515, 525, 527, 528, 530, 532, 550, 553, 554, 555, 560], "x_i": [326, 481, 482, 483, 484, 486, 488, 489, 490, 494, 505, 506, 507, 514, 515, 516, 520, 521, 522, 525, 527, 528, 530, 532, 535, 543, 548, 549, 550, 553, 554, 555, 556, 558, 560, 562, 745, 746, 747, 749, 753, 755, 756, 757, 759, 760, 761], "assum": [326, 331, 335, 342, 343, 357, 379, 390, 398, 407, 481, 485, 486, 488, 493, 502, 504, 505, 506, 507, 516, 548, 550, 553, 555, 556, 558, 560, 563, 585, 643, 646, 655, 656, 659, 687, 695, 696, 702, 731, 732, 745, 746, 747, 750, 751, 753, 755, 762, 763, 765], "express": [326, 340, 345, 481, 483, 486, 488, 490, 491, 506, 550, 553, 560], "radian": [326, 481, 483, 486, 488, 490, 491, 506, 550, 553, 560], "float": [326, 330, 334, 335, 337, 338, 342, 344, 368, 370, 378, 379, 380, 382, 384, 386, 387, 388, 389, 392, 396, 398, 404, 410, 414, 419, 422, 431, 464, 470, 474, 477, 480, 481, 482, 483, 484, 485, 486, 488, 489, 490, 491, 492, 502, 504, 505, 506, 507, 508, 509, 514, 515, 516, 517, 518, 519, 523, 524, 525, 527, 528, 530, 532, 533, 542, 543, 544, 545, 546, 547, 548, 550, 553, 554, 555, 559, 560, 562, 563, 571, 572, 584, 588, 589, 611, 612, 617, 618, 627, 629, 630, 632, 634, 635, 636, 643, 646, 650, 655, 656, 657, 659, 661, 662, 663, 667, 670, 671, 673, 674, 679, 681, 682, 683, 685, 686, 709, 710, 711, 712, 731, 732, 733, 736, 737, 745, 746, 747, 749, 753, 755, 756, 757, 758, 759, 760, 761], "operand": [326, 481, 483, 484, 485, 486, 488, 489, 490, 491, 502, 504, 505, 506, 507, 514, 515, 516, 525, 527, 528, 530, 532, 533, 542, 546, 547, 548, 550, 553, 554, 555, 560, 562, 753, 754, 755, 757, 760], "whose": [326, 379, 394, 395, 481, 484, 489, 492, 506, 507, 546, 550, 553, 554, 560, 563, 570, 656, 657, 659, 660, 661, 662, 663, 667, 668, 669, 670, 671, 673, 674, 675, 677, 687, 696, 702, 745, 746, 747, 753, 754], "ref": [326, 481, 501, 523, 542, 544, 547, 559, 687, 705], "promot": [326, 330, 335, 398, 404, 407, 421, 422, 426, 481, 483, 484, 485, 486, 488, 489, 490, 492, 493, 495, 497, 498, 500, 501, 502, 504, 506, 507, 508, 514, 515, 525, 527, 528, 530, 532, 533, 539, 542, 546, 547, 550, 553, 554, 555, 560, 656, 657, 658, 663, 664, 667, 669, 670, 673, 678, 679, 687, 705, 753, 756], "But": [326, 334, 345], "needless": 326, "info": [326, 767], "subset": [326, 329, 338, 340], "extend": [326, 329, 331, 338], "renam": 326, "conform": [326, 379, 390, 398, 407, 481, 485, 486, 488, 493, 502, 504, 505, 507, 515, 516, 548, 555, 556, 558, 560, 656, 659, 687, 695, 696, 702, 745, 746, 747, 750, 751, 753, 755, 762, 763, 765], "org": [326, 398, 407, 481, 486, 488, 502, 504, 505, 507, 516, 555, 556, 558, 627, 629, 630, 687, 695, 702, 745, 746, 747, 750, 751, 753, 755], "elementwise_funct": [326, 481, 486, 488, 502, 504, 505, 507, 516, 555, 556, 558, 687, 702, 745, 746, 747, 750, 751, 753, 755], "descript": [326, 334, 379, 390, 398, 407, 481, 485, 486, 488, 493, 502, 504, 505, 507, 516, 548, 555, 556, 558, 560, 563, 585, 643, 646, 655, 656, 659, 679, 687, 695, 696, 702, 731, 732, 745, 746, 747, 750, 751, 753, 755, 762, 763, 765], "simplic": [326, 344, 356, 379, 390, 398, 407, 481, 485, 486, 488, 493, 502, 504, 505, 507, 516, 548, 555, 556, 558, 560, 563, 585, 643, 646, 655, 656, 659, 687, 695, 696, 702, 731, 732, 745, 746, 747, 750, 751, 753, 755], "judgment": 326, "beyond": [326, 687, 702], "text": 326, "func_nam": [326, 327, 330], "pure": [326, 342, 345, 357], "themselv": [326, 330, 334, 335, 336, 344, 713, 714], "operator_nam": 326, "succinct": 326, "contstructor": 326, "though": [326, 330, 335, 343, 357], "forward": [326, 345, 356, 357, 800, 801, 804, 808], "_forward": [326, 340, 343, 344, 767], "former": 326, "trainabl": [326, 341, 343, 344, 627, 633, 777, 778, 800, 801, 810], "explicitli": [326, 330, 331, 333, 334, 337, 340, 357, 656, 661, 788, 797, 799, 800, 801], "latter": [326, 331], "implicit": [326, 334, 340], "docst": 326, "eight": 327, "static_": 327, "op_nam": 327, "__r": 327, "four": [327, 330, 335, 338, 343], "__sub__": [327, 333, 334, 338, 342], "__mul__": [327, 333, 334, 338, 342], "__truediv__": [327, 333, 334], "respect": [327, 333, 334, 335, 338, 379, 390, 481, 482, 485, 491, 493, 495, 497, 498, 500, 501, 502, 504, 508, 509, 517, 518, 519, 523, 524, 533, 534, 536, 538, 539, 542, 544, 547, 559, 627, 629, 630, 631, 632, 634, 635, 636, 656, 671, 709, 710, 711, 712], "recap": [327, 334, 344], "independ": [327, 328, 332, 334, 340, 345, 656, 658, 673, 733, 734], "combinatorili": 327, "variat": [327, 329], "grid": [327, 329, 356, 379, 390], "vari": [327, 329, 334, 342, 745, 746, 747, 749], "simplest": 327, "small": [327, 330, 340, 344, 357, 481, 542, 656, 667, 670, 731, 732, 802, 803], "unus": [327, 337, 376, 377], "18": [327, 334, 481, 502, 504, 656, 660, 669, 753, 754], "excess": [327, 331, 342], "showcas": [327, 356], "demonstr": [327, 342], "replic": [327, 335], "meant": 327, "imaginari": 327, "some_flag": 327, "another_flag": 327, "54": [327, 481, 506, 507, 555, 643, 655, 656, 669, 733, 736, 753, 754], "jointli": 327, "three": [327, 334, 339, 379, 390, 767], "x0": [327, 563, 567], "procedur": 327, "sens": [327, 334, 342], "5574077": 327, "1850398": 327, "5463025": 327, "8422884": 327, "91601413": 327, "9647598": 327, "3738229": 327, "1597457": 327, "0963247": 327, "9955841": 327, "3278579": 327, "multi": [327, 334, 339, 357, 643, 654, 656, 658, 767, 773, 788, 799], "seper": [327, 563, 584], "pars": [327, 357], "satisfi": [327, 656, 680], "far": [327, 336, 341, 342, 713, 714, 724], "asid": [327, 356], "irrelev": [327, 335], "increasingli": 327, "complex": [327, 343, 344, 345, 357, 656, 661, 674], "rule": [327, 329, 330, 333, 334, 335, 398, 404, 407, 422, 481, 492, 501, 508, 542, 547, 656, 657, 658, 669, 673], "count": [327, 343, 431, 469, 656, 678, 687, 696, 745, 746, 747, 762, 763, 765, 766], "14254655": 327, "1578213": 327, "380515": 327, "17": [327, 334, 368, 370, 656, 660, 733, 736], "trivial": 327, "By": [327, 330, 334, 337, 344, 345, 563, 575, 576, 656, 678, 687, 698, 753, 755, 756, 757, 758, 759, 760, 761, 762, 763, 765, 766], "non": [327, 334, 335, 340, 376, 377, 398, 404, 418, 481, 535, 536, 538, 643, 646, 656, 659, 667, 674, 676, 678, 679, 740, 741, 742, 743, 753, 755, 756, 757, 758, 761, 762, 763, 765, 766, 800, 801, 804, 808], "dictat": [327, 333, 337, 338], "exlud": 327, "unit": [328, 329, 357, 368, 369, 370, 371, 431], "thoroughli": [328, 329], "ci": [328, 329, 357], "failur": 328, "On": [329, 341, 345], "fixtur": 329, "consum": [329, 334, 338, 431], "300": [329, 481, 548], "hit": [329, 340], "permit": [329, 333, 338], "action": 329, "eleg": 329, "intellig": 329, "sampl": [329, 643, 651, 733, 734, 736, 737, 753, 759, 761, 788, 796], "rang": [329, 343, 344, 345, 379, 380, 388, 389, 745, 746, 753, 758, 760, 767], "cach": [329, 330, 431, 449, 563, 570], "unexplor": 329, "known": 329, "repeatedli": [329, 334, 713, 722], "upload": 329, "artifact": 329, "parametr": 329, "strategi": 329, "statement": [329, 357], "plai": [329, 345], "helper": [329, 343], "verifi": [329, 335, 336, 342, 767, 773], "truth": [329, 481, 509, 518, 519, 523, 524, 544], "opt": [329, 331, 337, 342], "defer": [329, 330, 333, 334, 335, 336, 337], "suffic": [329, 332], "catch": [329, 563, 578], "systemat": 329, "safeguard": 329, "inabl": 329, "fact": [329, 343], "categor": [330, 336], "mutual": [330, 334], "constitut": [330, 340, 753, 759, 761], "venn": 330, "diagram": 330, "light": [330, 357], "wherea": [330, 333, 335, 336, 338, 345], "hand": [330, 357], "log_pr": [330, 334, 337], "array_arg": 330, "typic": 330, "whatsoev": [330, 334], "commonli": [330, 753, 759, 761], "outsid": [330, 336, 340, 342, 345, 687, 688, 689, 705], "denomin": [330, 357, 563, 583, 589, 612, 617, 618, 731, 732, 802, 803], "divis": [330, 481, 501, 508, 517, 547, 563, 583, 589, 612, 617, 618, 627, 629, 630, 634, 804, 805, 806], "piec": [330, 332, 333, 340], "deal": [330, 357], "concurr": [330, 334], "weight": [330, 334, 344, 345, 627, 629, 630, 632, 634, 635, 636, 643, 652, 653, 655, 788, 789, 790, 791, 792, 793, 794, 795, 797, 798, 800, 801, 804, 806, 807], "modif": 330, "decor": [330, 332, 334, 335, 336, 337], "group": [330, 334], "briefli": [330, 343], "cast": [330, 335, 398, 404, 407, 687, 691, 693, 753, 758, 760, 767], "get_all_arrays_on_dev": 330, "nested_map": [330, 713], "index_nest": [330, 713], "implicit_backend": 331, "unless": [331, 336, 337, 357, 481, 542, 563, 606], "__dict__": [331, 340, 342], "ivy_original_dict": [331, 340], "unmodifi": [331, 335], "moment": [331, 357, 627, 629, 630, 634, 804, 805, 806], "fallback": 331, "freedom": [331, 753, 759, 761], "recommend": [331, 481, 535, 536, 538, 547, 753, 756], "achiev": [332, 343, 345], "wrapper": [332, 333, 334, 335, 337, 338, 342], "topic": [332, 342], "tf": [333, 335, 336, 337, 338, 340, 345, 357, 767], "_data": [333, 342], "organiz": [333, 334], "inherit": [333, 334, 342], "bear": [333, 334, 335], "mind": [333, 334], "necessarili": [333, 334], "although": [333, 334], "underpin": [333, 334, 340], "programmat": [333, 334], "backup": [333, 334], "accident": [333, 334], "readabl": [333, 334, 338, 342, 343], "absent": [333, 334], "perk": [333, 334], "auto": [333, 334, 343], "throw": [333, 342], "imposs": 333, "coupl": [333, 334, 342, 344], "anywai": 333, "secondli": [333, 335], "easier": 333, "five": [334, 343], "decis": [334, 340, 342], "displai": [334, 343], "arbitrarili": [334, 343], "__repr__": 334, "control": [334, 335, 337, 342, 343, 356], "__getattr__": 334, "underli": [334, 481, 493, 498, 500, 502, 504, 539], "__setattr__": 334, "__contains__": 334, "__getstate__": 334, "__setstate__": 334, "unpickl": 334, "expand": [334, 563, 584, 687, 695], "children": 334, "shallowest": 334, "deepest": 334, "67": [334, 481, 502, 504, 507], "22": [334, 481, 502, 504, 656, 660, 669, 740, 744, 753, 754], "25": [334, 481, 555, 556, 558, 656, 660, 663, 681, 683, 685, 731, 732, 753, 754], "retain_grad": [334, 627, 631], "dy": [334, 627, 631], "dx": [334, 627, 631], "technic": [334, 337, 338, 357], "autograd": [334, 357], "grad": [334, 343, 344, 345, 767, 804, 808], "redund": 334, "num_head": [334, 643, 654, 788, 799], "mask": [334, 643, 654, 655], "to_q_fn": [334, 643, 654], "to_kv_fn": [334, 643, 654], "to_out_fn": [334, 337, 643, 654], "to_q_v": [334, 643, 654], "to_kv_v": [334, 643, 654], "to_out_v": [334, 643, 654], "measur": [334, 643, 654, 788, 799], "dot": [334, 643, 654, 655, 656, 676, 678, 788, 799], "product": [334, 481, 542, 563, 575, 643, 654, 655, 656, 658, 664, 669, 676, 678, 753, 754, 758, 788, 799], "implicitli": 334, "intuit": [334, 343, 344], "debug": [334, 343], "chronolog": 334, "had": [334, 337], "sequenti": [334, 344], "flow": [334, 356], "implic": 334, "slightli": [334, 340, 344], "eager": [334, 357], "int8": [335, 398, 415], "int16": [335, 398, 407, 415, 753, 758, 760], "uint8": [335, 398, 407, 415], "uint16": [335, 398, 416, 753, 758, 760], "uint32": [335, 398, 416, 753, 758, 760], "uint64": [335, 398, 416, 753, 758, 760], "bfloat16": [335, 398, 415], "float16": [335, 398, 416], "all_dtyp": 335, "all_numeric_dtyp": 335, "all_int_dtyp": 335, "all_float_dtyp": 335, "fall": [335, 339, 767, 800, 801, 804, 808], "valid": [335, 340, 398, 408, 643, 644, 645, 646, 647, 648, 649, 650, 687, 705, 762, 763, 765, 766, 788, 789, 790, 791, 792, 793, 794, 795], "invalid": [335, 656, 678, 762, 763, 765, 766], "thirdli": 335, "native_float32": 335, "importantli": [335, 342, 345, 356], "varieti": [335, 336], "conveni": [335, 336, 338, 341, 343, 344], "arguabl": [335, 336], "compound": 335, "overflow": [335, 481, 485, 753, 760], "arr": [335, 336, 731, 732], "scalar": [335, 340, 345, 357, 379, 387, 563, 606, 623, 626, 656, 679], "settabl": [335, 336], "jnp": [335, 336, 337, 338, 345, 767], "jaxarrai": [335, 336, 337, 338], "mx": [335, 336, 337, 767], "nd": [335, 336, 337, 340, 345, 767], "deleg": 335, "fill_valu": [335, 379, 386, 387, 481, 519], "as_n": [335, 398, 409, 410, 411, 412, 431, 450, 451, 472], "idx": [336, 342, 563, 565], "tpu": [336, 431, 453, 478], "aliv": [336, 431, 465, 469, 471, 563, 587, 605, 607], "amount": [336, 431, 477, 681, 682, 683, 685, 686], "memori": [336, 337, 355, 357, 431, 449, 470, 475, 477, 480, 643, 653, 767], "dual": 336, "thrown": [336, 357, 563, 597], "rare": [336, 357], "program": 337, "strictli": 337, "ration": 337, "speak": 337, "subtli": 337, "ensure_in_backend": [337, 563, 597], "x_nativ": 337, "val_n": 337, "is_ivy_arrai": [337, 342, 563], "is_vari": [337, 627], "assign": [337, 342], "elif": 337, "irrespect": [337, 342, 398, 404], "inclus": [337, 379, 380, 733, 735], "omit": [337, 338, 745, 746, 747, 749], "unspecifi": [337, 481, 546, 547, 656, 661, 687, 705], "predominantli": [337, 356], "math": [337, 345, 767], "presenc": 337, "altern": [337, 343], "_wrap_fn": 337, "maxim": [337, 340], "inner": [337, 342, 656, 661, 664, 709, 710, 711, 712], "third": [337, 357, 656, 674, 745, 746], "addition": [337, 338], "leverag": 337, "equival": [337, 343, 345, 379, 380, 481, 501, 535, 536, 538, 547, 656, 667, 670, 673, 679], "input_arrai": 337, "adress": 338, "revisit": [338, 345], "dedic": [338, 342, 344, 627, 641, 777, 778], "__div__": 338, "dicat": 338, "futher": 338, "absenc": 338, "pep": 338, "484": 338, "annot": 338, "brittl": 338, "intend": [338, 753, 760], "freeli": 338, "inde": [338, 357], "flexibl": 338, "original_typ": 338, "cumbersom": 338, "sound": 339, "higher": [339, 340, 345, 357, 627, 630, 632, 634, 635, 636], "overview": [339, 356], "handler": [339, 341, 345, 767], "fledg": [340, 341], "syntact": [340, 345], "clip_by_valu": [340, 345], "clamp": [340, 345], "behavior": [340, 357, 481, 546, 547, 745, 746, 747, 749], "fit": [340, 687, 698], "construct": [340, 341, 344, 345, 687, 707, 788, 789, 790, 791, 792, 793, 794, 795, 797, 798, 799, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811], "num": [340, 379, 388, 389], "power_seq": 340, "okai": 340, "bound": 340, "resid": [340, 344], "edg": [340, 345, 687, 688, 689, 694, 708, 767], "larger": [340, 345, 398, 414, 687, 688, 689, 702, 753, 759, 761], "ml_framework": [340, 345, 379, 380], "current_framework": [340, 345], "furthermor": 340, "concaten": [340, 343, 431, 460, 563, 584, 687, 691, 693, 767], "framework_handl": 340, "face": 340, "verbos": [340, 767, 814], "cprint": [340, 813], "framework_stack": 340, "_determine_framework_from_arg": 340, "valueerror": [340, 687, 704], "get_framework": 340, "neither": [340, 481, 485, 542], "illustr": [340, 356], "un": [340, 398, 418], "nn": [340, 345, 379, 390, 767], "init_h": [340, 643, 653], "init_c": [340, 643, 653], "kernel": [340, 357, 643, 653], "recurrent_kernel": [340, 643, 653], "bia": [340, 344, 643, 652, 653, 788, 789, 790, 791, 792, 793, 794, 795, 798], "recurrent_bia": [340, 643, 653], "x_shape": 340, "batch_shap": [340, 342, 345, 563, 606, 643, 653, 654, 655, 656, 680, 733, 734, 788, 797], "timestep": [340, 643, 653, 788, 797], "input_channel": [340, 344, 788, 789, 790, 791, 792, 793, 794, 797, 798], "x_flat": 340, "wi": 340, "wi_x": 340, "wii_x": 340, "wif_x": 340, "wig_x": 340, "wio_x": 340, "recurr": [340, 643, 653], "wh": 340, "lstm": [340, 643, 653, 788], "ht": 340, "ct": 340, "hts_list": 340, "unrol": [340, 343, 643, 653], "wii_xt": 340, "wif_xt": 340, "wig_xt": 340, "wio_xt": 340, "zip": 340, "htm1": 340, "ctm1": 340, "wh_htm1": 340, "whi_htm1": 340, "whf_htm1": 340, "whg_htm1": 340, "who_htm1": 340, "ft": 340, "gt": 340, "ot": 340, "offici": 340, "reliabl": 340, "sacrific": 340, "hear": 340, "virtu": 340, "pure_ivi": 340, "reduce_mean": [340, 343, 344, 345, 767], "reduce_sum": [340, 767], "reduce_var": 340, "compile_graph": [340, 345], "pure_torch": 340, "cat": [340, 345], "backbon": [340, 343], "_layer": 340, "super": [340, 343, 344, 345], "clean": [340, 341, 343], "random_unifrom": 340, "unclean": 340, "wx": 340, "temp": 340, "torchscript": 340, "fn": [340, 342, 358, 359, 360, 361, 362, 363, 364, 365, 366, 398, 415, 416, 431, 440, 441, 563, 565, 624, 713, 714, 719, 720, 721, 723, 724, 725, 770, 772], "example_input": [340, 376, 377], "static_argnum": [340, 376, 377], "static_argnam": [340, 376, 377], "jit": [340, 357], "frontend": 341, "primit": [341, 357], "describ": [341, 345, 753, 754, 758, 759, 760], "hierarch": [341, 343, 344], "straight": [342, 767], "arraywithlinalg": 342, "arraywithlog": 342, "arraywithmath": 342, "arraywithmeta": 342, "arraywithreduct": 342, "is_native_arrai": [342, 563], "_shape": 342, "_size": 342, "functool": 342, "mul": 342, "len": [342, 345, 379, 390], "_dtype": 342, "_devic": 342, "_dev_str": 342, "_pre_repr": 342, "_post_repr": 342, "ndim": [342, 656, 671, 674], "mt": 342, "answer": [342, 357], "consol": 342, "typeerror": 342, "immut": 342, "behav": 342, "claim": 342, "truli": 342, "_native_wrapp": 342, "attributeerror": 342, "genuin": 342, "some_method": 342, "similarli": [342, 379, 390], "rewritten": 342, "__pow__": 342, "strang": 342, "power": [342, 343, 344, 481, 501, 514, 546, 563, 588, 611, 618, 656, 666, 779], "enforc": 342, "notic": 342, "appear": [342, 687, 695], "invers": [342, 356, 481, 483, 484, 486, 488, 489, 490, 491, 492, 656, 663, 670], "_wrap_method": 342, "func_wrapp": [342, 358, 359, 360, 361, 362, 363, 364, 365, 366], "__name__": 342, "non_wrapped_method": 342, "_method_wrap": 342, "native_arg": 342, "native_kwarg": 342, "inner_fn": 342, "whist": 342, "unwrap": 342, "transit": 342, "needlessli": 342, "randn": 342, "_unwrap_method": 342, "method_wrap": 342, "compartment": 342, "public": [342, 563, 573], "newshap": [342, 687, 699, 701], "new_shap": 342, "tidi": 342, "shorter": 342, "crystal": 342, "41": [342, 481, 502, 504, 555, 656, 657, 753, 760], "enough": [342, 343, 344], "ton": 343, "ado": [343, 344], "incred": [343, 357], "hash": 343, "soup": 343, "walk": [343, 344], "dct": 343, "cnt": 343, "combo": [343, 767, 773], "hold": [343, 563, 609, 610], "1000": [343, 481, 555], "uda": 343, "3333": 343, "6667": 343, "178": 343, "new_weight": 343, "0600": 343, "3100": 343, "2400": 343, "6900": 343, "delimit": 343, "autocomplet": 343, "midwai": 343, "agent": 343, "total_spe": 343, "total_height": 343, "total_width": 343, "ag": 343, "tot": 343, "total_": 343, "total_h": 343, "batch_siz": [343, 643, 644, 645, 646, 647, 648, 649, 650, 733, 734], "dir": 343, "adam": [343, 344, 345, 627, 629, 630, 634, 767, 804, 806], "cnt0": 343, "cnt1": 343, "diff_0": 343, "diff_1": 343, "config0": 343, "config1": 343, "Not": [343, 344, 357, 378], "decod": 343, "l0": 343, "l1": [343, 656, 679], "depth": [343, 344, 345, 356, 431, 455, 459, 463, 563, 591, 606, 713, 725, 800, 801], "clearer": 343, "truncat": 343, "decoder__l0": 343, "decoder__l1": 343, "encoder__l0": 343, "encoder__l1": 343, "height": 343, "l0__b": 343, "l0__w": 343, "l1__b": 343, "l1__w": 343, "printabl": 343, "obviou": 343, "foresight": 343, "untidili": 343, "update_ag": 343, "normalize_img": 343, "img": 343, "img_max": 343, "reduce_max": [343, 767], "img_min": 343, "reduce_min": [343, 767], "img_rang": 343, "agent_posit": 343, "agent_veloc": 343, "agent_cam_front_rgb": 343, "agent_cam_front_depth": 343, "agent_cam_rear_rgb": 343, "agent_cam_rear_depth": 343, "agent_cam_lidar": 343, "normal": [343, 687, 705, 731, 732, 733, 736, 802, 803], "cleaner": 343, "camera": 343, "front_rgb": 343, "front_depth": 343, "rear_rgb": 343, "rear_depth": 343, "lidar": 343, "rgb": 343, "rear": 343, "veloc": 343, "cam": 343, "cam_max": 343, "cam_min": 343, "cam_rang": 343, "Of": 343, "ideal": 343, "perman": 343, "afterward": 343, "thread": 343, "incorpor": 343, "pretti": 343, "straightforward": 343, "dataload": [343, 355, 767], "_cnt": 343, "img_": 343, "_dataset_s": 343, "_batch_siz": 343, "_count": [343, 344], "__next__": 343, "filenam": 343, "img_fnam": 343, "fname": 343, "loaded_img": 343, "cv2": 343, "imread": 343, "loader": [343, 357], "32": [343, 368, 370, 481, 502, 504, 643, 646, 649, 656, 669, 740, 744, 753, 754], "batch_slic": 343, "model": [343, 344, 767], "mymodel": [343, 767], "linear0": [343, 344, 767], "linear1": [343, 344, 767], "x_in": [343, 344, 345, 767], "001": [343, 344, 731, 732], "loss_fn": [343, 344, 345, 767], "0145": 343, "grad_fn": 343, "addbackward0": 343, "_create_vari": 344, "output_channel": [344, 788, 789, 790, 791, 792, 793, 794, 797, 798], "with_bia": [344, 788, 798], "_input_channel": 344, "_output_channel": 344, "_w_shape": 344, "_b_shape": 344, "_with_bia": 344, "8979": 344, "3198": 344, "0196": 344, "3126": 344, "3717": 344, "9687": 344, "6958": 344, "5122": 344, "3902": 344, "8800": 344, "5613": 344, "1982": 344, "nightmar": 344, "overcom": 344, "fc": 344, "9563": 344, "impact": 344, "v0": 344, "v1": 344, "6440": 344, "key0": 344, "1823": 344, "8075": 344, "linear3": 344, "v2": 344, "2346": 344, "counter": 344, "hidden": [344, 643, 653, 788, 797], "fed": [344, 431, 475], "1300": 344, "decoupl": 344, "scheme": 344, "weight_initi": [344, 788, 789, 790, 791, 792, 793, 794, 795, 797, 798], "glorotuniform": [344, 779, 788, 789, 790, 791, 792, 793, 794, 795, 797, 798], "bias_initi": [344, 788, 789, 790, 791, 792, 793, 794, 795, 798], "_w_init": 344, "_b_init": 344, "create_vari": [344, 779], "var_shap": [344, 779], "fan_out": [344, 779], "fan_in": [344, 779], "fan_mod": [344, 779], "fan_sum": 344, "slight": 344, "misnom": 344, "saw": 344, "vanilla": [344, 709, 711], "descent": [344, 627, 632, 804, 809], "lar": [344, 627, 634, 635, 804], "lamb": [344, 627, 634, 804], "compile_on_next_step": [344, 800, 801, 804, 805, 806, 807, 808, 809], "_beta1": 344, "_beta2": 344, "_epsilon": 344, "_mw": 344, "_vw": 344, "_first_pass": 344, "_should_compil": 344, "_step": [344, 804, 808], "new_v": 344, "_lr": 344, "isinst": [344, 345, 563, 621], "_inplac": 344, "_stop_gradi": 344, "set_stat": [344, 804, 805, 806, 807, 808, 809], "mw": [344, 627, 629, 630], "vw": [344, 627, 629, 630], "pre": [345, 357, 431], "captur": 345, "sparse_funct": 345, "num_class": [345, 733, 734], "num_dim": 345, "new_axi": 345, "_linear": 345, "to_backend": 345, "jax_graph": 345, "learnabl": [345, 731, 732, 802, 803], "to_ivy_modul": [345, 777], "thinli": 345, "whilst": 345, "to_haiku_modul": 345, "hk": 345, "loss_fn_t": 345, "transform": [345, 356, 643, 651, 652], "without_apply_rng": 345, "rng": 345, "prngkei": 345, "init": 345, "update_rul": 345, "01": [345, 481, 548], "tree_multimap": 345, "mechan": [355, 357, 767], "vision": [355, 767], "robot": [355, 767], "focus": 356, "field": [356, 656, 661, 671, 674, 745, 746, 747], "perfect": 356, "3d": [356, 788, 793, 794], "differenti": 356, "demo": [356, 767], "orient": 356, "pose": 356, "euler": [356, 378], "quaternion": 356, "rotat": 356, "matric": [356, 379, 390, 394, 395, 643, 652, 656, 657, 659, 660, 661, 662, 663, 666, 667, 668, 670, 671, 673, 674, 675, 677], "angl": [356, 481, 491, 507, 554], "ivy_mech": 356, "target_facing_rotation_matrix": 356, "polar_to_cartesian_coord": 356, "ordin": [356, 656, 673], "warp": 356, "optic": 356, "voxel": 356, "ivy_vis": 356, "coords_to_voxel_grid": 356, "render_pixel_coord": 356, "neural": [356, 643, 767, 774, 788], "radianc": 356, "nerf": 356, "trajectori": 356, "motion": 356, "plan": [356, 767], "mobil": 356, "ivy_robot": 356, "sample_spline_path": 356, "rigidmobil": 356, "sample_bodi": 356, "drone": 356, "sample_link": 356, "openai": 356, "swimmer": 356, "cumul": [356, 563, 575, 576], "reward": 356, "supervis": 356, "reinforc": 356, "door": [356, 357], "intersect": 356, "cartpol": 356, "mountain_car": 356, "pendulum": 356, "reacher": 356, "polici": 356, "condit": [356, 376, 377, 713, 723, 724, 740, 744], "learnt": 356, "ture": 356, "ntm": 356, "egospher": 356, "spatial": 356, "esm": 356, "ivy_memori": 356, "egocentr": 356, "room": 356, "inspir": 356, "doubt": 357, "grate": 357, "put": 357, "probe": 357, "undergo": 357, "remark": 357, "surpris": 357, "backward": [357, 481, 547, 656, 678, 762, 763, 765, 766], "lock": 357, "contunu": 357, "minor": 357, "xla": 357, "buffer": 357, "kind": [357, 398, 414, 417, 481, 546, 753, 758, 760], "gold": 357, "dex": 357, "phase": 357, "lax": 357, "scan": 357, "tricki": 357, "predictor": 357, "tight": 357, "driver": 357, "schedul": 357, "algorithm": [357, 643, 644, 645, 646, 647, 648, 649, 650, 788, 789, 790, 791, 792, 793, 794, 795], "dispatch": 357, "Will": 357, "ast": 357, "dynamic": 357, "cond": 357, "jacobian": 357, "checkpoint": 357, "autodiff": 357, "shine": 357, "merci": 357, "superset": 357, "cluster": 357, "compet": 357, "paradigm": 357, "parallelis": [357, 431, 440, 441], "spmd": 357, "mixtur": 357, "expert": 357, "sophist": 357, "depart": 357, "routin": 357, "hundr": 357, "thousand": 357, "deepli": [357, 713, 715], "broadli": 357, "heavili": 357, "supplementari": 357, "Is": 357, "reusabl": 357, "fanci": 357, "fusion": 357, "lose": 357, "vmap": 357, "pmap": 357, "overhead": 357, "ineffici": 357, "eventu": 357, "supplement": 357, "backdoor": 357, "callback": 357, "record": 357, "metric": 357, "somewhat": 357, "outsourc": 357, "inputs_to_ivy_arrai": 358, "gaussian": [368, 369], "leaki": [368, 369, 370], "alpha": [368, 370], "rectifi": [368, 370, 371], "slope": [368, 370], "39": [368, 370, 481, 514, 656, 669, 753, 754], "85": [368, 370, 481, 502, 504], "48": [368, 370, 481, 555, 656, 669, 753, 754], "88": [368, 370, 481, 502, 504, 656, 669, 753, 754], "269": [368, 372], "731": [368, 372], "881": [368, 372], "214": [368, 372], "978": [368, 372], "891": [368, 372], "422": [368, 373], "155": [368, 373], "0768": [368, 373], "231": [368, 373], "693": [368, 373, 681, 686], "49": [368, 373, 481, 555, 753, 754], "147": [368, 373], "363": [368, 373], "3461": [368, 374], "6491": [368, 374], "535": [368, 374], "hyperbol": [368, 375, 481, 484, 489, 492, 507, 554, 561], "55": [368, 375, 643, 649, 656, 669, 753, 754], "501": [368, 375], "762": [368, 375], "964": [368, 375], "faster": [376, 377], "invoc": [376, 377], "718281828459045": 378, "newaxi": 378, "alia": 378, "pi": 378, "141592653589793": 378, "mathemat": [378, 481, 485, 491, 515, 542, 656, 679], "half": [379, 380, 733, 735, 737], "chosen": [379, 380, 481, 491, 740, 744], "distanc": [379, 380], "adjac": [379, 380], "interpret": [379, 381, 391], "uniniti": [379, 382, 383], "n_row": [379, 384], "n_col": [379, 384], "elsewher": [379, 384, 740, 744], "row": [379, 384, 656, 673, 674, 733, 734, 740, 743], "column": [379, 384, 656, 661, 671, 673, 674], "__dlpack__": [379, 385, 431, 476], "interchang": [379, 385, 687, 706], "endpoint": [379, 388], "xy": [379, 390], "coordin": [379, 390, 481, 491], "cartesian": [379, 390], "ij": [379, 390, 753, 754], "rank": [379, 390, 563, 625, 656, 658, 667, 671, 673, 677, 678, 679, 687, 694, 695, 705, 708, 740, 743, 762, 763, 765, 766], "ni": [379, 390], "xi": [379, 390], "n1": [379, 390], "n2": [379, 390], "n3": [379, 390], "accordingli": [379, 390, 481, 515, 656, 679, 740, 742, 745, 746, 747, 749, 753, 755, 756, 757, 758, 759, 760, 761, 762, 763, 765, 766], "xv": [379, 390], "yv": [379, 390], "triangular": [379, 394, 395, 656, 657, 671], "innermost": [379, 394, 395, 656, 657, 659, 660, 661, 662, 663, 667, 668, 670, 671, 673, 674, 675, 677], "mxn": [379, 394, 395, 656, 660, 667, 668, 670, 671, 675, 677], "defaultdtyp": [398, 399], "defaultfloatdtyp": [398, 400], "float_dtyp": [398, 410, 424], "defaultintdtyp": [398, 401], "dtype_in": [398, 402, 403, 413, 418, 419, 420, 430], "incompat": [398, 406], "occur": [398, 407, 740, 741, 742, 745, 746, 747, 749], "data_type_funct": [398, 407], "closest": [398, 408, 481, 505, 516, 517, 548, 562], "floatdtyp": [398, 410], "int_dtyp": [398, 411, 425], "intdtyp": [398, 411], "followng": [398, 414], "occupi": [398, 414, 417, 563, 609, 610], "ep": [398, 414, 656, 667, 670], "smallest_norm": [398, 414], "precis": [398, 414, 481, 542, 555], "encapsul": [398, 417], "type1": [398, 421], "type2": [398, 421], "arrays_and_dtyp": [398, 422], "ret1": [398, 426], "ret2": [398, 426], "noinspect": [399, 400, 401, 432, 628], "pyshadowingnam": [399, 400, 401, 432, 628], "defaultdevic": [431, 432], "__enter__": 431, "_dev": 431, "initialis": 431, "devcloneditem": [431, 453], "multidevitem": [431, 433, 436], "devclonedit": 431, "multidevit": [431, 434, 437, 440, 441, 445], "devclonednest": 431, "multidevnest": [431, 435, 438], "devdistitem": 431, "devdistit": 431, "devdistnest": 431, "devmanag": [431, 439], "dev_mapp": 431, "da_dim_s": 431, "safety_factor": 431, "min_dev_dim_s": 431, "max_dev_dim_step_ratio": 431, "min_unit_dev_tune_step": 431, "min_sf_tune_step": 431, "starting_split_factor": 431, "max_split_factor_step_s": 431, "tune_dev_alloc": 431, "tune_dev_split": 431, "mapper": [431, 440, 441], "receivess": 431, "ratio": [431, 627, 634, 804, 806], "safe": [431, 440], "oom": 431, "tune": 431, "da_tune_step": 431, "ds_tune_step": 431, "to_clon": 431, "to_distribut": 431, "multidevic": [431, 440], "parallel": [431, 440, 441], "mutlidevic": [431, 440], "repeated_config_check": 431, "tune_step": 431, "devmapp": [431, 441], "ret_fn": [431, 440, 441], "queue_class": [431, 440, 441], "worker_class": [431, 440, 441], "worker": [431, 440, 441], "used_dev": [431, 440], "sf": [431, 440], "devmappermultiproc": 431, "multidev": [431, 442, 443, 444, 463], "profil": 431, "save_dir": [431, 446], "deviceic": [431, 452], "spread": [431, 463], "139740789224448": [431, 465], "physic": [431, 467], "x3": [431, 469], "x4": [431, 469], "process_specif": [431, 470, 480], "percentag": [431, 470], "ram": [431, 470, 477, 480], "alon": [431, 470, 480], "attr_onli": [431, 471], "chunk": [431, 473, 474, 475], "max_chunk_s": [431, 475], "chunk_siz": [431, 475], "input_ax": [431, 475], "output_ax": [431, 475], "feed": [431, 475], "fist": [431, 475], "stream": [431, 476], "caveat": [431, 476], "portabl": [431, 476, 767], "gb": [431, 477, 480], "reset": [431, 479], "magnitud": [481, 482, 485, 542, 656, 674, 675], "princip": [481, 483, 486, 488, 490], "cosin": [481, 483, 484, 506, 507], "x1_i": [481, 485, 491, 493, 495, 497, 498, 500, 501, 502, 504, 508, 509, 517, 518, 519, 523, 524, 533, 534, 536, 538, 539, 542, 544, 546, 547, 559], "x2_i": [481, 485, 491, 493, 495, 497, 498, 500, 501, 502, 504, 508, 509, 517, 518, 519, 523, 524, 533, 534, 536, 538, 539, 542, 544, 546, 547, 559], "finit": [481, 485, 491, 520, 542, 546, 547], "nor": [481, 485, 542], "nearest": [481, 485, 542, 548], "2019": [481, 485, 515, 542], "commut": [481, 485], "sine": [481, 486, 488, 489, 550, 553, 554], "57": [481, 486, 488, 502, 504, 507], "524": [481, 486, 488], "644": [481, 486, 488], "201": [481, 486, 488, 548], "305": [481, 486, 488], "412": [481, 486, 488], "quotient": [481, 491], "notat": [481, 491, 753, 754], "denot": [481, 491], "pair": [481, 491, 643, 655, 656, 658], "quadrant": [481, 491], "3\u03c0": [481, 491], "549": [481, 492], "bitwis": [481, 493, 498, 500, 502, 504, 539], "AND": [481, 493, 534, 762, 763, 765], "binari": [481, 493, 498, 500, 502, 504, 539, 681, 682], "invert": [481, 494], "arithmet": [481, 501, 753, 756], "propag": [481, 501, 753, 755, 756, 757, 759, 760, 761], "thu": [481, 501, 546, 547, 656, 661], "lh": [481, 501], "rh": [481, 501], "xor": [481, 502, 504, 539], "78": [481, 502, 504, 656, 669, 753, 754], "91": [481, 502, 504, 656, 669, 753, 754], "23": [481, 502, 504, 643, 649, 656, 660, 740, 744], "66": [481, 502, 504, 656, 669, 753, 754], "77": [481, 502, 504, 656, 669, 753, 754], "79": [481, 502, 504], "89": [481, 502, 504, 656, 676, 753, 760], "98": [481, 502, 504, 656, 669, 740, 744, 753, 754], "26": [481, 502, 504, 643, 650, 656, 660, 669, 676, 753, 754], "21": [481, 502, 504, 563, 575, 656, 660, 669, 681, 686, 753, 754], "34": [481, 502, 504, 555], "24": [481, 502, 504, 555, 563, 575, 656, 660, 669, 753, 754], "51": [481, 502, 504], "27": [481, 502, 504, 507, 555, 643, 655, 656, 669, 753, 754], "74": [481, 502, 504], "59": [481, 502, 504], "416": [481, 506], "76": [481, 507, 656, 676, 753, 754], "122": [481, 507], "368": [481, 507], "670": [481, 507], "202": [481, 507, 548], "548": [481, 507], "1490": [481, 507], "dividend": [481, 508, 547], "divisor": [481, 508, 547, 627, 629, 630, 634, 753, 759, 761, 804, 805, 806], "gauss": [481, 510, 513], "exponenti": [481, 510, 513, 514, 533, 546], "logarithm": [481, 514, 525, 527, 528, 529, 530, 532, 533, 656, 672], "72": [481, 514, 656, 669, 753, 754], "accur": [481, 515], "fdlibm": [481, 515], "compliant": [481, 515, 535, 536, 538, 753, 755, 756, 757], "greatest": [481, 516, 517], "out_i": [481, 520, 521, 522], "threshold": [481, 540, 541], "exce": [481, 541], "y_i": [481, 543], "expon": [481, 546, 563, 618], "versu": [481, 546], "odd": [481, 546], "modulu": [481, 547], "primarili": [481, 547], "5654": [481, 548], "034": [481, 548], "433": [481, 548], "343": [481, 548], "44": [481, 548, 555, 556, 558, 656, 669, 740, 744, 753, 754], "30": [481, 548, 656, 669, 753, 754, 779, 785], "81": [481, 548, 556, 558, 753, 754], "527": [481, 548], "301": [481, 548], "indistinguish": [481, 555], "infinit": [481, 555], "83": [481, 555], "32455532": [481, 555], "89897949": [481, 555], "50": [481, 555, 656, 669, 740, 743, 753, 754], "31": [481, 555], "169": [481, 555], "63": [481, 555, 656, 657, 669, 753, 754], "47": [481, 555], "73": [481, 555, 656, 657, 731, 732], "93": [481, 555], "35": [481, 555, 643, 655, 656, 658, 740, 744, 753, 754], "09": [481, 556, 558, 643, 655], "61": [481, 556, 558, 681, 682], "546": [481, 560], "842": [481, 560], "916": [481, 560, 681, 682], "96": [481, 560, 656, 669, 753, 754], "996": [481, 560], "328": [481, 560], "decim": [481, 562], "inspect": [563, 565, 771, 772], "downscal": [563, 571, 572], "60": [563, 575, 656, 669, 753, 754], "default_v": [563, 578], "catch_except": [563, 578], "rev": [563, 578], "with_cal": [563, 578], "arrang": [563, 579], "123": [563, 582], "mod": [563, 583], "max_freq": [563, 584], "num_band": [563, 584], "pad": [563, 584, 643, 644, 645, 646, 647, 648, 649, 650, 687, 694, 708, 788, 789, 790, 791, 792, 793, 794, 795], "fourier": [563, 584], "band": [563, 584], "linearli": [563, 584, 656, 673], "oppos": [563, 584], "geometr": [563, 584], "seen_set": [563, 591], "local_set": [563, 591], "decrement": [563, 595], "is_arrai": 563, "allow_dupl": [563, 603], "forkserv": [563, 604], "spawn": [563, 604], "hot": [563, 606], "scatter": [563, 606, 609, 610], "overrid": [563, 606], "tmp_dr": [563, 614], "temporari": [563, 614], "min_denomin": [563, 617], "stabil": [563, 617, 618, 750, 751, 752], "_min_denomin": [563, 617], "min_bas": [563, 618], "_min_bas": [563, 618, 731, 732, 802, 803], "100000023841858": [563, 621], "200000047683716": [563, 621], "299999952316284": [563, 621], "400000095367432": [563, 621], "599999904632568": [563, 621], "101": [563, 622], "unpack": [563, 625], "gradienttrack": [627, 628], "delta": [627, 629], "cost": [627, 629, 630, 632, 634, 635, 636, 709, 710, 711, 712], "ws": [627, 629, 630, 632, 634, 635, 636], "en": [627, 629, 630], "wikipedia": [627, 629, 630], "wiki": [627, 629, 630], "stochastic_gradient_desc": [627, 629, 630], "dc": [627, 629, 630, 632, 634, 635, 636], "dw": [627, 629, 630, 632, 634, 635, 636], "averag": [627, 629, 630, 634, 709, 710, 711], "forget": [627, 629, 630, 634, 804, 805, 806], "rate": [627, 630, 632, 634, 635, 636, 709, 710, 711, 712, 788, 799, 804, 805, 806, 807, 808, 809], "ws_new": [627, 630, 632, 634, 635, 636], "retain": [627, 631], "trust": [627, 634, 804, 806], "decai": [627, 634, 635, 804, 806, 807], "layerwis": [627, 635, 804, 807], "stride": [643, 644, 645, 646, 647, 648, 649, 650, 788, 789, 790, 791, 792, 793, 794, 795], "data_format": [643, 644, 645, 646, 647, 648, 649, 650, 788, 789, 790, 791, 792, 793, 794, 795], "nwc": [643, 644, 645, 788, 789, 790], "dilat": [643, 644, 645, 646, 647, 648, 649, 650, 788, 789, 790, 791, 792, 793, 794, 795], "convolut": [643, 644, 645, 646, 647, 648, 649, 650, 788, 789, 790, 791, 792, 793, 794, 795], "d_in": [643, 644, 645, 646, 647, 648, 649], "fw": [643, 644, 645, 646, 647, 648, 649, 650], "d_out": [643, 644, 645, 646, 647, 648, 649], "slide": [643, 644, 645, 646, 647, 648, 649, 650, 788, 789, 790, 791, 792, 793, 794, 795], "ncw": [643, 644, 645, 788, 789, 790], "wio": [643, 644], "output_shap": [643, 645, 647, 649, 788, 790, 792, 794], "nhwc": [643, 646, 647, 650, 788, 791, 792, 795], "fh": [643, 646, 647, 648, 649, 650], "nchw": [643, 646, 647, 650, 788, 791, 792, 795], "hwio": [643, 646], "unequ": [643, 646], "28": [643, 646, 649, 650, 656, 669, 753, 754], "unsqueez": [643, 646, 650], "ndhwc": [643, 648, 649, 788, 793, 794], "volum": [643, 648], "fd": [643, 648, 649], "ncdhw": [643, 648, 649, 788, 793, 794], "dhwio": [643, 648], "256": [643, 649], "258": [643, 649], "128": [643, 649, 656, 669], "depthwis": [643, 650, 788, 795], "333": [643, 650], "inp": [643, 650], "prob": [643, 651, 733, 734, 788, 796], "randomli": [643, 651, 788, 796], "bernoulli": [643, 651], "out_featur": [643, 651, 652], "incom": [643, 652], "outer_batch_shap": [643, 652], "inner_batch_shap": [643, 652], "in_featur": [643, 652], "cell": [643, 653, 788, 797], "num_queri": [643, 654, 655], "x_feat_dim": [643, 654], "num_kei": [643, 654, 655], "cont_feat_dim": [643, 654], "numhead": [643, 654], "feat_dim": [643, 654, 655], "out_feat_dim": [643, 654], "score": [643, 655], "04": [643, 655], "03": [643, 655, 731, 732], "08": [643, 655], "decomposit": [656, 657, 671, 674], "symmetr": [656, 657, 661, 662, 680], "u": [656, 657, 674], "577": [656, 657], "707": [656, 657], "vif": [656, 658], "92": [656, 659], "293": [656, 659], "46997": [656, 659], "axis2": [656, 660], "eigendecomposit": [656, 661], "qlq\u1d40": [656, 661], "orthogon": [656, 661], "eig": [656, 661], "namedtupl": [656, 661, 671, 674, 745, 746, 747], "eigenvalu": [656, 661, 662], "eigenvector": [656, 661], "75": [656, 663, 669], "prepend": [656, 664], "fro": [656, 665], "rtol": [656, 667, 670], "singular": [656, 667, 670, 674, 675], "toler": [656, 667, 670], "largest_singular_valu": [656, 667, 670], "array_lik": [656, 669], "33": [656, 669, 731, 732, 753, 754], "36": [656, 669, 753, 754], "45": [656, 669, 687, 703, 731, 732, 753, 754], "65": [656, 669, 753, 754], "84": [656, 669, 753, 754], "105": [656, 669, 681, 682], "112": [656, 669, 753, 754], "104": [656, 669, 753, 754], "120": [656, 669], "moor": [656, 670], "penros": [656, 670], "pseudo": [656, 670], "orthonorm": [656, 671, 674], "2d": [656, 672, 788, 791, 792, 795], "logdet": [656, 672], "coeffici": [656, 673], "full_matric": [656, 674], "usvh": [656, 674], "vh": [656, 674], "hermitian": [656, 674], "et": [656, 674], "cetera": [656, 674], "adjoint": [656, 674], "reconstruct": [656, 674, 745, 746, 748], "reconstructed_x": [656, 674], "contract": [656, 676, 753, 754], "doubl": [656, 676], "singleton": [656, 679, 687, 704, 740, 742, 753, 755, 756, 757, 758, 759, 760, 761, 762, 763, 765, 766], "liter": [656, 679], "manhattan": [656, 679], "l2": [656, 679], "euclidean": [656, 679], "mathbf": [656, 680], "mathbb": [656, 680], "skew": [656, 680], "entropi": [681, 682, 683, 685, 686], "predict": [681, 682, 683, 685, 686], "smooth": [681, 682, 683, 685, 686], "223": [681, 682], "357": [681, 682, 686], "511": [681, 682], "discret": [681, 683, 685], "3862944": [681, 683, 685], "35667497": [681, 683, 685], "spars": [681, 686], "logit": [681, 686], "793291": [681, 686], "512926": [681, 686], "before_1": [687, 694, 708], "after_1": [687, 694, 708], "before_n": [687, 694, 708], "after_n": [687, 694, 708], "insert": [687, 695, 713, 718, 740, 741], "manipulation_funct": [687, 695], "reorder": [687, 696], "permut": [687, 697, 706], "repetit": [687, 698, 707], "restor": [687, 702], "classivi": [687, 703], "famili": [687, 705], "intxx": [687, 705], "floatxx": [687, 705], "fomaml_step": 709, "inner_cost_fn": [709, 710, 711], "outer_cost_fn": [709, 710, 711], "inner_grad_step": [709, 710, 711, 712], "inner_learning_r": [709, 710, 711, 712], "inner_optimization_step": [709, 710, 711, 712], "inner_batch_fn": [709, 710, 711], "outer_batch_fn": [709, 710, 711], "average_across_step": [709, 710, 711], "inner_v": [709, 710, 711], "keep_inner_v": [709, 710, 711], "outer_v": [709, 710, 711], "keep_outer_v": [709, 710, 711], "return_inner_v": [709, 710, 711, 712], "num_task": [709, 710, 711, 712], "maml": [709, 710, 711], "recev": [709, 710, 711], "0x7f9e46524310": [709, 710, 711, 712], "maml_step": 709, "rece": [709, 711], "reptile_step": 709, "cost_fn": [709, 712], "reptil": [709, 712], "receivng": [709, 712], "all_nested_indic": 713, "include_nest": [713, 714], "_index": [713, 714, 724], "_base": [713, 714, 723, 724], "copy_nest": 713, "to_mut": [713, 715, 725], "mutabl": [713, 715, 725], "insert_into_nest_at_index": 713, "insert_into_nest_at_indic": 713, "map_nest_at_index": 713, "map_nest_at_indic": 713, "multi_index_nest": 713, "nested_ani": 713, "check_nest": [713, 723, 724], "conditon": [713, 723, 724], "nested_indices_wher": 713, "stop_after_n_found": [713, 724], "_depth": [713, 725], "_tuple_check_fn": [713, 725], "_list_check_fn": [713, 725], "_dict_check_fn": [713, 725], "nested_multi_map": 713, "nest0": [713, 726], "ivy_arrai": [713, 726], "funciton": [713, 726], "prune_nest_at_index": 713, "prune_nest_at_indic": 713, "set_nest_at_index": 713, "set_nest_at_indic": 713, "mini": [731, 732, 802, 803], "gamma": [731, 732], "beta": [731, 732], "0976": [731, 732], "3452": [731, 732], "2740": [731, 732], "1047": [731, 732], "5886": [731, 732], "2732": [731, 732], "7696": [731, 732], "7024": [731, 732], "2518": [731, 732], "58": [731, 732, 745, 746], "283": [731, 732], "585": [731, 732], "909": [731, 732], "628": [731, 732], "997": [731, 732], "225": [731, 732], "425": [731, 732], "norm_idx": [731, 732], "228": [731, 732], "0285": [731, 732], "199": [731, 732], "204": [731, 732], "population_s": [733, 734], "num_sampl": [733, 734], "draw": [733, 734, 736, 737], "unnorm": [733, 734], "drawn": [733, 734, 735, 736, 737], "home": [733, 734, 736, 737], "uniformli": [733, 735, 737], "highest": [733, 735], "parameter": [733, 736, 737], "6444774682897879": [733, 736], "811": [733, 736], "508": [733, 736], "564": [733, 736], "7268672": [733, 736], "968": [733, 736], "175": [733, 736, 745, 746], "064": [733, 736], "40935726": [733, 736], "556": [733, 736], "26431865": [733, 737], "475": [733, 737], "878": [733, 737], "861": [733, 737], "89150229": [733, 737], "89629126": [733, 737], "94198485": [733, 737], "91405606": [733, 737], "72848724": [733, 737], "7550739": [733, 737], "624": [733, 737], "00109": [733, 737], "occurr": [740, 741, 742, 745, 746], "yield": [740, 744], "43": [740, 744], "x_j": [745, 746, 747, 749], "impli": [745, 746, 747, 749], "inverse_indic": [745, 746, 748], "aggreg": [745, 746], "fourth": [745, 746], "607": [745, 746], "735": [745, 746], "667": [745, 746], "381": [745, 746], "857": [745, 746], "0396": [745, 746], "166": [745, 746], "828": [745, 746], "144": [745, 746], "40501155": [745, 746], "77361575": [745, 746], "97776199": [745, 746], "36831157": [745, 746], "89148434": [745, 746], "9512272": [745, 746], "67542176": [745, 746], "41985657": [745, 746], "23478023": [745, 746], "1141": [745, 746], "8101": [745, 746], "9298": [745, 746], "8460": [745, 746], "2119": [745, 746], "3519": [745, 746], "6252": [745, 746], "4033": [745, 746], "7443": [745, 746], "2577": [745, 746], "3707": [745, 746], "0545": [745, 746], "3238": [745, 746], "5944": [745, 746], "0775": [745, 746], "4327": [745, 746], "176": [745, 746], "889": [745, 746], "763": [745, 746], "071": [745, 746], "262": [745, 746], "456": [745, 746], "114": [745, 746], "349": [745, 746], "615": [745, 746], "594": [745, 746], "335": [745, 746], "212": [745, 746], "457": [745, 746], "827": [745, 746], "209": [745, 746], "ascend": [750, 751], "einstein": [753, 754], "summat": [753, 754], "seq": [753, 754], "jk": [753, 754], "ik": [753, 754], "126": [753, 754], "510": [753, 754], "99": [753, 754], "108": [753, 754], "117": [753, 754], "sentinel": [753, 755, 757], "unsign": [753, 758, 760], "degre": [753, 759, 761], "bessel": [753, 759, 761], "8164966": [753, 759], "varianc": [753, 761], "unbias": [753, 761], "simplicit": [762, 763, 765], "autom": 767, "grow": 767, "ai": 767, "got": 767, "colab": 767, "sharp": 767, "weekli": 767, "event": 767, "immedi": 767, "favorit": 767, "jax_concat": 767, "tf_concat": 767, "np_concat": 767, "mx_concat": 767, "torch_concat": 767, "prompt": 767, "get_devic": 767, "reduce_prod": 767, "gradient_imag": 767, "linalg": 767, "bilinear_resampl": 767, "stack_imag": 767, "neural_net": 767, "ecosystem": [767, 773], "popular": [767, 773], "acceler": 767, "articl": 767, "lenton2021ivi": 767, "inter": 767, "lenton": 767, "daniel": 767, "pardo": 767, "fabio": 767, "falck": 767, "fabian": 767, "jame": 767, "stephen": 767, "clark": 767, "ronald": 767, "journal": 767, "arxiv": 767, "preprint": 767, "2102": 767, "02886": 767, "2021": 767, "add_array_spec": 770, "fn_array_spec": 770, "geglu": 774, "native_modul": [777, 778], "native_module_class": [777, 778], "firstlayersiren": 779, "kaimingnorm": [779, 783], "negative_slop": 779, "Ones": 779, "siren": 779, "w0": [779, 785], "filter_s": [788, 789, 790], "1d": [788, 789, 790], "conv1dtranspos": 788, "filter_shap": [788, 791, 792, 793, 794, 795], "conv2dtranspos": 788, "conv3dtranspos": 788, "depthwiseconv2d": 788, "num_channel": [788, 795], "bernoul": [788, 796], "num_lay": [788, 797], "return_sequ": [788, 797], "return_st": [788, 797], "get_initial_st": [788, 797], "dens": [788, 798], "multiheadattent": 788, "query_dim": [788, 799], "head_dim": [788, 799], "dropout_r": [788, 799], "context_dim": [788, 799], "with_to_q_fn": [788, 799], "with_to_kv_fn": [788, 799], "with_to_out_fn": [788, 799], "build_mod": [788, 799, 800, 801], "on_init": [788, 799, 800, 801], "__call__": [788, 799, 800, 801], "store_var": [800, 801], "arg_stateful_idx": [800, 801], "kwarg_stateful_idx": [800, 801], "fallback_to_non_compil": [800, 801, 804, 808], "with_partial_v": [800, 801], "initialz": [800, 801], "from_cal": [800, 801], "check_submod_ret": [800, 801], "get_mod_kei": [800, 801], "top_mod": [800, 801], "mod_depth": [800, 801], "mod_height": [800, 801], "mod_with_top_mod_key_chain": [800, 801], "save_weight": [800, 801], "weights_path": [800, 801], "show_mod_in_top_mod": [800, 801], "upper_depth": [800, 801], "lower_depth": [800, 801], "show_structur": [800, 801], "show_v_in_top_v": [800, 801], "sub_mod": [800, 801], "show_v": [800, 801], "track_submod_call_ord": [800, 801], "track_submod_ret": [800, 801], "v_with_top_v_key_chain": [800, 801], "layernorm": 802, "normalized_shap": [802, 803], "elementwise_affin": [802, 803], "trail": [802, 803], "affin": [802, 803], "0001": [804, 805, 806], "init_on_first_step": [804, 808], "ignore_miss": [804, 808], "overriden": [804, 808], "sgd": 804, "stochast": [804, 809], "sub_modul": [810, 811]}, "objects": {"ivy.array": [[0, 0, 0, "-", "activations"], [2, 0, 0, "-", "array_methods"], [93, 0, 0, "-", "conversions"], [98, 0, 0, "-", "creation"], [100, 0, 0, "-", "data_types"], [102, 0, 0, "-", "device"], [104, 0, 0, "-", "elementwise"], [106, 0, 0, "-", "general"], [108, 0, 0, "-", "gradients"], [110, 0, 0, "-", "image"], [112, 0, 0, "-", "layers"], [114, 0, 0, "-", "linear_algebra"], [116, 0, 0, "-", "losses"], [118, 0, 0, "-", "manipulation"], [120, 0, 0, "-", "norms"], [122, 0, 0, "-", "random"], [124, 0, 0, "-", "searching"], [126, 0, 0, "-", "set"], [128, 0, 0, "-", "sorting"], [130, 0, 0, "-", "statistical"], [132, 0, 0, "-", "utility"], [134, 0, 0, "-", "wrapping"]], "ivy.array.activations": [[1, 1, 1, "", "ArrayWithActivations"]], "ivy.array.array_methods": [[3, 2, 1, "", "abs"], [4, 2, 1, "", "acos"], [5, 2, 1, "", "acosh"], [6, 2, 1, "", "add"], [764, 2, 1, "", "all"], [8, 2, 1, "", "all_equal"], [9, 2, 1, "", "any"], [10, 2, 1, "", "argsort"], [487, 2, 1, "", "asin"], [12, 2, 1, "", "asinh"], [13, 2, 1, "", "atan"], [14, 2, 1, "", "atan2"], [15, 2, 1, "", "atanh"], [16, 2, 1, "", "binary_cross_entropy"], [17, 2, 1, "", "bitwise_and"], [18, 2, 1, "", "bitwise_invert"], [496, 2, 1, "", "bitwise_left_shift"], [499, 2, 1, "", "bitwise_or"], [21, 2, 1, "", "bitwise_right_shift"], [503, 2, 1, "", "bitwise_xor"], [23, 2, 1, "", "can_cast"], [24, 2, 1, "", "ceil"], [25, 2, 1, "", "clip"], [692, 2, 1, "", "concat"], [27, 2, 1, "", "constant_pad"], [28, 2, 1, "", "cos"], [29, 2, 1, "", "cosh"], [684, 2, 1, "", "cross_entropy"], [31, 2, 1, "", "divide"], [32, 2, 1, "", "einsum"], [33, 2, 1, "", "equal"], [511, 2, 1, "", "erf"], [35, 2, 1, "", "exp"], [36, 2, 1, "", "expand_dims"], [37, 2, 1, "", "expm1"], [38, 2, 1, "", "flip"], [39, 2, 1, "", "floor"], [40, 2, 1, "", "floor_divide"], [41, 2, 1, "", "greater"], [42, 2, 1, "", "greater_equal"], [43, 2, 1, "", "isfinite"], [44, 2, 1, "", "isinf"], [45, 2, 1, "", "isnan"], [46, 2, 1, "", "layer_norm"], [47, 2, 1, "", "less"], [48, 2, 1, "", "less_equal"], [526, 2, 1, "", "log"], [50, 2, 1, "", "log10"], [51, 2, 1, "", "log1p"], [531, 2, 1, "", "log2"], [53, 2, 1, "", "logaddexp"], [54, 2, 1, "", "logical_and"], [55, 2, 1, "", "logical_not"], [537, 2, 1, "", "logical_or"], [57, 2, 1, "", "logical_xor"], [58, 2, 1, "", "matmul"], [59, 2, 1, "", "max"], [60, 2, 1, "", "mean"], [61, 2, 1, "", "min"], [62, 2, 1, "", "multiply"], [63, 2, 1, "", "negative"], [64, 2, 1, "", "not_equal"], [65, 2, 1, "", "permute_dims"], [66, 2, 1, "", "positive"], [67, 2, 1, "", "pow"], [68, 2, 1, "", "prod"], [69, 2, 1, "", "remainder"], [70, 2, 1, "", "repeat"], [700, 2, 1, "", "reshape"], [72, 2, 1, "", "roll"], [73, 2, 1, "", "round"], [74, 2, 1, "", "sign"], [551, 2, 1, "", "sin"], [76, 2, 1, "", "sinh"], [77, 2, 1, "", "sort"], [78, 2, 1, "", "sparse_cross_entropy"], [79, 2, 1, "", "sqrt"], [557, 2, 1, "", "square"], [81, 2, 1, "", "squeeze"], [82, 2, 1, "", "stack"], [83, 2, 1, "", "std"], [84, 2, 1, "", "subtract"], [85, 2, 1, "", "sum"], [86, 2, 1, "", "swapaxes"], [87, 2, 1, "", "tan"], [88, 2, 1, "", "tanh"], [89, 2, 1, "", "tile"], [90, 2, 1, "", "trunc"], [91, 2, 1, "", "var"], [92, 2, 1, "", "zero_pad"]], "ivy.array.conversions": [[94, 2, 1, "", "args_to_ivy"], [95, 2, 1, "", "args_to_native"], [96, 2, 1, "", "to_ivy"], [97, 2, 1, "", "to_native"]], "ivy.array.creation": [[99, 1, 1, "", "ArrayWithCreation"]], "ivy.array.data_types": [[101, 1, 1, "", "ArrayWithDataTypes"]], "ivy.array.data_types.ArrayWithDataTypes": [[101, 3, 1, "", "can_cast"]], "ivy.array.device": [[103, 1, 1, "", "ArrayWithDevice"]], "ivy.array.elementwise": [[105, 1, 1, "", "ArrayWithElementwise"]], "ivy.array.elementwise.ArrayWithElementwise": [[105, 3, 1, "", "abs"], [105, 3, 1, "", "acos"], [105, 3, 1, "", "acosh"], [105, 3, 1, "", "add"], [105, 3, 1, "", "asin"], [105, 3, 1, "", "asinh"], [105, 3, 1, "", "atan"], [105, 3, 1, "", "atan2"], [105, 3, 1, "", "atanh"], [105, 3, 1, "", "bitwise_and"], [105, 3, 1, "", "bitwise_invert"], [105, 3, 1, "", "bitwise_left_shift"], [105, 3, 1, "", "bitwise_or"], [105, 3, 1, "", "bitwise_right_shift"], [105, 3, 1, "", "bitwise_xor"], [105, 3, 1, "", "ceil"], [105, 3, 1, "", "cos"], [105, 3, 1, "", "cosh"], [105, 3, 1, "", "divide"], [105, 3, 1, "", "equal"], [105, 3, 1, "", "erf"], [105, 3, 1, "", "exp"], [105, 3, 1, "", "expm1"], [105, 3, 1, "", "floor"], [105, 3, 1, "", "floor_divide"], [105, 3, 1, "", "greater"], [105, 3, 1, "", "greater_equal"], [105, 3, 1, "", "isfinite"], [105, 3, 1, "", "isinf"], [105, 3, 1, "", "isnan"], [105, 3, 1, "", "less"], [105, 3, 1, "", "less_equal"], [105, 3, 1, "", "log"], [105, 3, 1, "", "log10"], [105, 3, 1, "", "log1p"], [105, 3, 1, "", "log2"], [105, 3, 1, "", "logaddexp"], [105, 3, 1, "", "logical_and"], [105, 3, 1, "", "logical_not"], [105, 3, 1, "", "logical_or"], [105, 3, 1, "", "logical_xor"], [105, 3, 1, "", "multiply"], [105, 3, 1, "", "negative"], [105, 3, 1, "", "not_equal"], [105, 3, 1, "", "positive"], [105, 3, 1, "", "pow"], [105, 3, 1, "", "remainder"], [105, 3, 1, "", "round"], [105, 3, 1, "", "sign"], [105, 3, 1, "", "sin"], [105, 3, 1, "", "sinh"], [105, 3, 1, "", "sqrt"], [105, 3, 1, "", "square"], [105, 3, 1, "", "subtract"], [105, 3, 1, "", "tan"], [105, 3, 1, "", "tanh"], [105, 3, 1, "", "trunc"]], "ivy.array.general": [[107, 1, 1, "", "ArrayWithGeneral"]], "ivy.array.general.ArrayWithGeneral": [[107, 3, 1, "", "all_equal"]], "ivy.array.gradients": [[109, 1, 1, "", "ArrayWithGradients"]], "ivy.array.image": [[111, 1, 1, "", "ArrayWithImage"]], "ivy.array.layers": [[113, 1, 1, "", "ArrayWithLayers"]], "ivy.array.linear_algebra": [[115, 1, 1, "", "ArrayWithLinearAlgebra"]], "ivy.array.linear_algebra.ArrayWithLinearAlgebra": [[115, 3, 1, "", "matmul"]], "ivy.array.losses": [[117, 1, 1, "", "ArrayWithLosses"]], "ivy.array.losses.ArrayWithLosses": [[117, 3, 1, "", "binary_cross_entropy"], [117, 3, 1, "", "cross_entropy"], [117, 3, 1, "", "sparse_cross_entropy"]], "ivy.array.manipulation": [[119, 1, 1, "", "ArrayWithManipulation"]], "ivy.array.manipulation.ArrayWithManipulation": [[119, 3, 1, "", "clip"], [119, 3, 1, "", "concat"], [119, 3, 1, "", "constant_pad"], [119, 3, 1, "", "expand_dims"], [119, 3, 1, "", "flip"], [119, 3, 1, "", "permute_dims"], [119, 3, 1, "", "repeat"], [119, 3, 1, "", "reshape"], [119, 3, 1, "", "roll"], [119, 3, 1, "", "squeeze"], [119, 3, 1, "", "stack"], [119, 3, 1, "", "swapaxes"], [119, 3, 1, "", "tile"], [119, 3, 1, "", "zero_pad"]], "ivy.array.norms": [[121, 1, 1, "", "ArrayWithNorms"]], "ivy.array.norms.ArrayWithNorms": [[121, 3, 1, "", "layer_norm"]], "ivy.array.random": [[123, 1, 1, "", "ArrayWithRandom"]], "ivy.array.searching": [[125, 1, 1, "", "ArrayWithSearching"]], "ivy.array.set": [[127, 1, 1, "", "ArrayWithSet"]], "ivy.array.sorting": [[129, 1, 1, "", "ArrayWithSorting"]], "ivy.array.sorting.ArrayWithSorting": [[129, 3, 1, "", "argsort"], [129, 3, 1, "", "sort"]], "ivy.array.statistical": [[131, 1, 1, "", "ArrayWithStatistical"]], "ivy.array.statistical.ArrayWithStatistical": [[131, 3, 1, "", "einsum"], [131, 3, 1, "", "max"], [131, 3, 1, "", "mean"], [131, 3, 1, "", "min"], [131, 3, 1, "", "prod"], [131, 3, 1, "", "std"], [131, 3, 1, "", "sum"], [131, 3, 1, "", "var"]], "ivy.array.utility": [[133, 1, 1, "", "ArrayWithUtility"]], "ivy.array.utility.ArrayWithUtility": [[133, 3, 1, "", "all"], [133, 3, 1, "", "any"]], "ivy.array.wrapping": [[135, 2, 1, "", "add_ivy_array_instance_methods"]], "ivy": [[136, 0, 0, "-", "backend_handler"], [358, 0, 0, "-", "func_wrapper"], [770, 0, 0, "-", "inspection"], [813, 0, 0, "-", "verbosity"]], "ivy.backend_handler": [[136, 1, 1, "", "ContextManager"], [138, 2, 1, "", "choose_random_backend"], [139, 2, 1, "", "clear_backend_stack"], [140, 2, 1, "", "current_backend"], [141, 2, 1, "", "get_backend"], [142, 2, 1, "", "set_backend"], [143, 2, 1, "", "try_import_ivy_jax"], [144, 2, 1, "", "try_import_ivy_mxnet"], [145, 2, 1, "", "try_import_ivy_numpy"], [146, 2, 1, "", "try_import_ivy_tf"], [147, 2, 1, "", "try_import_ivy_torch"], [148, 2, 1, "", "unset_backend"]], "ivy.backend_handler.ContextManager": [[136, 3, 1, "", "__init__"]], "ivy.container": [[153, 0, 0, "-", "activations"], [155, 0, 0, "-", "base"], [157, 0, 0, "-", "container"], [160, 0, 0, "-", "container_methods"], [281, 0, 0, "-", "creation"], [283, 0, 0, "-", "data_types"], [285, 0, 0, "-", "device"], [287, 0, 0, "-", "elementwise"], [289, 0, 0, "-", "general"], [291, 0, 0, "-", "gradients"], [293, 0, 0, "-", "image"], [295, 0, 0, "-", "layers"], [297, 0, 0, "-", "linear_algebra"], [299, 0, 0, "-", "losses"], [301, 0, 0, "-", "manipulation"], [303, 0, 0, "-", "norms"], [305, 0, 0, "-", "random"], [307, 0, 0, "-", "searching"], [309, 0, 0, "-", "set"], [311, 0, 0, "-", "sorting"], [313, 0, 0, "-", "statistical"], [315, 0, 0, "-", "utility"], [317, 0, 0, "-", "wrapping"]], "ivy.container.activations": [[154, 1, 1, "", "ContainerWithActivations"]], "ivy.container.base": [[156, 1, 1, "", "ContainerBase"]], "ivy.container.base.ContainerBase": [[156, 3, 1, "", "__getitem__"], [156, 3, 1, "", "__init__"], [156, 3, 1, "", "__setitem__"], [156, 3, 1, "", "all_false"], [156, 3, 1, "", "all_key_chains"], [156, 3, 1, "", "all_true"], [156, 3, 1, "", "arrays_as_lists"], [156, 3, 1, "", "as_arrays"], [156, 3, 1, "", "as_bools"], [156, 3, 1, "", "as_ones"], [156, 3, 1, "", "as_random_uniform"], [156, 3, 1, "", "as_variables"], [156, 3, 1, "", "as_zeros"], [156, 3, 1, "", "assert_contains_sub_container"], [156, 3, 1, "", "assert_contains_sub_structure"], [156, 3, 1, "", "assert_identical"], [156, 3, 1, "", "assert_identical_structure"], [156, 3, 1, "", "at_key_chain"], [156, 3, 1, "", "at_key_chains"], [156, 3, 1, "", "at_keys"], [156, 3, 1, "", "clip"], [156, 3, 1, "", "combine"], [156, 3, 1, "", "common_key_chains"], [156, 4, 1, "", "config"], [156, 3, 1, "", "contains_sub_container"], [156, 3, 1, "", "contains_sub_structure"], [156, 3, 1, "", "copy"], [156, 3, 1, "", "create_if_absent"], [156, 3, 1, "", "cutoff_at_depth"], [156, 3, 1, "", "cutoff_at_height"], [156, 3, 1, "", "deep_copy"], [156, 4, 1, "", "dev"], [156, 3, 1, "", "dev_clone"], [156, 3, 1, "", "dev_dist"], [156, 4, 1, "", "dev_str"], [156, 3, 1, "", "diff"], [156, 3, 1, "", "dtype"], [156, 3, 1, "", "einops_rearrange"], [156, 3, 1, "", "einops_reduce"], [156, 3, 1, "", "einops_repeat"], [156, 3, 1, "", "find_sub_container"], [156, 3, 1, "", "find_sub_structure"], [156, 3, 1, "", "flatten_key_chain"], [156, 3, 1, "", "flatten_key_chains"], [156, 3, 1, "", "format_key_chains"], [156, 3, 1, "", "from_disk_as_hdf5"], [156, 3, 1, "", "from_disk_as_json"], [156, 3, 1, "", "from_disk_as_pickled"], [156, 3, 1, "", "from_flat_list"], [156, 3, 1, "", "from_numpy"], [156, 3, 1, "", "gather"], [156, 3, 1, "", "gather_nd"], [156, 3, 1, "", "h5_file_size"], [156, 3, 1, "", "handle_inplace"], [156, 3, 1, "", "has_key"], [156, 3, 1, "", "has_key_chain"], [156, 3, 1, "", "has_nans"], [156, 3, 1, "", "identical"], [156, 3, 1, "", "identical_array_shapes"], [156, 3, 1, "", "identical_configs"], [156, 3, 1, "", "identical_structure"], [156, 3, 1, "", "if_exists"], [156, 3, 1, "", "inplace_update"], [156, 4, 1, "", "ivy"], [156, 3, 1, "", "key_chains_containing"], [156, 3, 1, "", "list_join"], [156, 3, 1, "", "list_stack"], [156, 3, 1, "", "map"], [156, 3, 1, "", "map_conts"], [156, 3, 1, "", "matrix_norm"], [156, 4, 1, "", "max_depth"], [156, 3, 1, "", "maximum"], [156, 3, 1, "", "minimum"], [156, 3, 1, "", "multi_map"], [156, 3, 1, "", "multi_map_in_static_method"], [156, 3, 1, "", "num_arrays"], [156, 3, 1, "", "overwrite_at_key_chain"], [156, 3, 1, "", "overwrite_at_key_chains"], [156, 3, 1, "", "prune_empty"], [156, 3, 1, "", "prune_key_chain"], [156, 3, 1, "", "prune_key_chains"], [156, 3, 1, "", "prune_key_from_key_chains"], [156, 3, 1, "", "prune_keys"], [156, 3, 1, "", "prune_keys_from_key_chains"], [156, 3, 1, "", "reduce"], [156, 3, 1, "", "remove_key_length_limit"], [156, 3, 1, "", "remove_print_limit"], [156, 3, 1, "", "reshape_like"], [156, 3, 1, "", "restructure"], [156, 3, 1, "", "restructure_key_chains"], [156, 3, 1, "", "set_at_key_chain"], [156, 3, 1, "", "set_at_key_chains"], [156, 3, 1, "", "set_at_keys"], [156, 3, 1, "", "set_framework"], [156, 3, 1, "", "set_ivy_backend"], [156, 4, 1, "", "shape"], [156, 4, 1, "", "shapes"], [156, 3, 1, "", "show"], [156, 3, 1, "", "show_sub_container"], [156, 3, 1, "", "shuffle"], [156, 3, 1, "", "shuffle_h5_file"], [156, 3, 1, "", "size_ordered_arrays"], [156, 3, 1, "", "slice_keys"], [156, 3, 1, "", "slice_via_key"], [156, 3, 1, "", "sort_by_key"], [156, 3, 1, "", "split"], [156, 3, 1, "", "stop_gradients"], [156, 3, 1, "", "structural_diff"], [156, 3, 1, "", "to_device"], [156, 3, 1, "", "to_dict"], [156, 3, 1, "", "to_disk_as_hdf5"], [156, 3, 1, "", "to_disk_as_json"], [156, 3, 1, "", "to_disk_as_pickled"], [156, 3, 1, "", "to_flat_list"], [156, 3, 1, "", "to_iterator"], [156, 3, 1, "", "to_iterator_keys"], [156, 3, 1, "", "to_iterator_values"], [156, 3, 1, "", "to_ivy"], [156, 3, 1, "", "to_jsonable"], [156, 3, 1, "", "to_list"], [156, 3, 1, "", "to_multi_dev"], [156, 3, 1, "", "to_native"], [156, 3, 1, "", "to_numpy"], [156, 3, 1, "", "to_raw"], [156, 3, 1, "", "trim_key"], [156, 3, 1, "", "try_kc"], [156, 3, 1, "", "unify"], [156, 3, 1, "", "unstack"], [156, 3, 1, "", "update_config"], [156, 3, 1, "", "vector_norm"], [156, 3, 1, "", "with_default_key_color"], [156, 3, 1, "", "with_entries_as_lists"], [156, 3, 1, "", "with_ivy_backend"], [156, 3, 1, "", "with_key_length_limit"], [156, 3, 1, "", "with_print_indent"], [156, 3, 1, "", "with_print_limit"], [156, 3, 1, "", "with_print_line_spacing"]], "ivy.container.container": [[158, 1, 1, "", "Container"], [159, 1, 1, "", "MultiDevContainer"]], "ivy.container.container.Container": [[158, 3, 1, "", "__add__"], [158, 3, 1, "", "__init__"], [158, 3, 1, "", "__radd__"], [158, 3, 1, "", "adam_step"], [158, 3, 1, "", "arange"], [158, 3, 1, "", "arg_info"], [158, 3, 1, "", "arg_names"], [158, 3, 1, "", "argmax"], [158, 3, 1, "", "argmin"], [158, 3, 1, "", "array"], [158, 3, 1, "", "array_equal"], [158, 3, 1, "", "arrays_equal"], [158, 3, 1, "", "as_ivy_dev"], [158, 3, 1, "", "as_ivy_dtype"], [158, 3, 1, "", "as_native_dev"], [158, 3, 1, "", "as_native_dtype"], [158, 3, 1, "", "asarray"], [158, 3, 1, "", "assert_supports_inplace"], [158, 3, 1, "", "astype"], [158, 3, 1, "", "broadcast_arrays"], [158, 3, 1, "", "broadcast_to"], [158, 3, 1, "", "cache_fn"], [158, 3, 1, "", "cholesky"], [158, 3, 1, "", "clear_mem_on_dev"], [158, 3, 1, "", "clip_matrix_norm"], [158, 3, 1, "", "closest_valid_dtype"], [158, 3, 1, "", "container_types"], [158, 3, 1, "", "conv1d"], [158, 3, 1, "", "conv1d_transpose"], [158, 3, 1, "", "conv2d"], [158, 3, 1, "", "conv2d_transpose"], [158, 3, 1, "", "conv3d"], [158, 3, 1, "", "conv3d_transpose"], [158, 3, 1, "", "copy_array"], [158, 3, 1, "", "cross"], [158, 3, 1, "", "cumprod"], [158, 3, 1, "", "cumsum"], [158, 3, 1, "", "current_backend"], [158, 3, 1, "", "current_backend_str"], [158, 3, 1, "", "default"], [158, 3, 1, "", "default_device"], [158, 3, 1, "", "default_dtype"], [158, 3, 1, "", "default_float_dtype"], [158, 3, 1, "", "default_int_dtype"], [158, 3, 1, "", "depthwise_conv2d"], [158, 3, 1, "", "det"], [158, 3, 1, "", "dev_clone_array"], [158, 3, 1, "", "dev_clone_iter"], [158, 3, 1, "", "dev_clone_nest"], [158, 3, 1, "", "dev_dist_array"], [158, 3, 1, "", "dev_dist_iter"], [158, 3, 1, "", "dev_dist_nest"], [158, 3, 1, "", "dev_unify"], [158, 3, 1, "", "dev_unify_array"], [158, 3, 1, "", "dev_unify_iter"], [158, 3, 1, "", "dev_unify_nest"], [158, 3, 1, "", "dev_util"], [158, 3, 1, "", "diagonal"], [158, 3, 1, "", "dropout"], [158, 3, 1, "", "dtype_bits"], [158, 3, 1, "", "eigh"], [158, 3, 1, "", "eigvalsh"], [158, 3, 1, "", "empty"], [158, 3, 1, "", "empty_like"], [158, 3, 1, "", "execute_with_gradients"], [158, 3, 1, "", "exists"], [158, 3, 1, "", "eye"], [158, 3, 1, "", "finfo"], [158, 3, 1, "", "floormod"], [158, 3, 1, "", "fourier_encode"], [158, 3, 1, "", "from_dlpack"], [158, 3, 1, "", "full"], [158, 3, 1, "", "full_like"], [158, 3, 1, "", "function_supported_dtypes"], [158, 3, 1, "", "function_unsupported_dtypes"], [158, 3, 1, "", "gelu"], [158, 3, 1, "", "get_all_arrays_in_memory"], [158, 3, 1, "", "get_all_ivy_arrays_on_dev"], [158, 3, 1, "", "get_min_base"], [158, 3, 1, "", "get_min_denominator"], [158, 3, 1, "", "get_num_dims"], [158, 3, 1, "", "get_referrers_recursive"], [158, 3, 1, "", "gpu_is_available"], [158, 3, 1, "", "handle_nestable"], [158, 3, 1, "", "handle_out_argument"], [158, 3, 1, "", "iinfo"], [158, 3, 1, "", "indices_where"], [158, 3, 1, "", "infer_device"], [158, 3, 1, "", "infer_dtype"], [158, 3, 1, "", "inplace_arrays_supported"], [158, 3, 1, "", "inplace_decrement"], [158, 3, 1, "", "inplace_increment"], [158, 3, 1, "", "inplace_variables_supported"], [158, 3, 1, "", "inputs_to_native_arrays"], [158, 3, 1, "", "inv"], [158, 3, 1, "", "invalid_dtype"], [158, 3, 1, "", "is_float_dtype"], [158, 3, 1, "", "is_int_dtype"], [158, 3, 1, "", "is_ivy_container"], [158, 3, 1, "", "leaky_relu"], [158, 3, 1, "", "linear"], [158, 3, 1, "", "linspace"], [158, 3, 1, "", "logspace"], [158, 3, 1, "", "lstm_update"], [158, 3, 1, "", "match_kwargs"], [158, 3, 1, "", "matrix_power"], [158, 3, 1, "", "matrix_rank"], [158, 3, 1, "", "matrix_transpose"], [158, 3, 1, "", "meshgrid"], [158, 3, 1, "", "multi_head_attention"], [158, 3, 1, "", "multinomial"], [158, 3, 1, "", "multiprocessing"], [158, 3, 1, "", "native_array"], [158, 3, 1, "", "nonzero"], [158, 3, 1, "", "num_arrays_in_memory"], [158, 3, 1, "", "num_cpu_cores"], [158, 3, 1, "", "num_gpus"], [158, 3, 1, "", "num_ivy_arrays_on_dev"], [158, 3, 1, "", "one_hot"], [158, 3, 1, "", "ones"], [158, 3, 1, "", "ones_like"], [158, 3, 1, "", "outer"], [158, 3, 1, "", "outputs_to_ivy_arrays"], [158, 3, 1, "", "percent_used_mem_on_dev"], [158, 3, 1, "", "pinv"], [158, 3, 1, "", "print_all_arrays_in_memory"], [158, 3, 1, "", "print_all_ivy_arrays_on_dev"], [158, 3, 1, "", "promote_types"], [158, 3, 1, "", "qr"], [158, 3, 1, "", "queue_timeout"], [158, 3, 1, "", "randint"], [158, 3, 1, "", "random_normal"], [158, 3, 1, "", "relu"], [158, 3, 1, "", "result_type"], [158, 3, 1, "", "scaled_dot_product_attention"], [158, 3, 1, "", "scatter_flat"], [158, 3, 1, "", "scatter_nd"], [158, 3, 1, "", "seed"], [158, 3, 1, "", "set_default_device"], [158, 3, 1, "", "set_default_dtype"], [158, 3, 1, "", "set_default_float_dtype"], [158, 3, 1, "", "set_default_int_dtype"], [158, 3, 1, "", "set_min_base"], [158, 3, 1, "", "set_min_denominator"], [158, 3, 1, "", "set_queue_timeout"], [158, 3, 1, "", "set_split_factor"], [158, 3, 1, "", "set_tmp_dir"], [158, 3, 1, "", "set_with_grads"], [158, 3, 1, "", "shape_to_tuple"], [158, 3, 1, "", "sigmoid"], [158, 3, 1, "", "slogdet"], [158, 3, 1, "", "softmax"], [158, 3, 1, "", "softplus"], [158, 3, 1, "", "solve"], [158, 3, 1, "", "split_factor"], [158, 3, 1, "", "split_func_call"], [158, 3, 1, "", "stable_divide"], [158, 3, 1, "", "stable_pow"], [158, 3, 1, "", "static_abs"], [158, 3, 1, "", "static_acos"], [158, 3, 1, "", "static_acosh"], [158, 3, 1, "", "static_adam_step"], [158, 3, 1, "", "static_all"], [158, 3, 1, "", "static_any"], [158, 3, 1, "", "static_arange"], [158, 3, 1, "", "static_arg_info"], [158, 3, 1, "", "static_arg_names"], [158, 3, 1, "", "static_argmax"], [158, 3, 1, "", "static_argmin"], [158, 3, 1, "", "static_array"], [158, 3, 1, "", "static_array_equal"], [158, 3, 1, "", "static_arrays_equal"], [158, 3, 1, "", "static_as_ivy_dev"], [158, 3, 1, "", "static_as_ivy_dtype"], [158, 3, 1, "", "static_as_native_dev"], [158, 3, 1, "", "static_as_native_dtype"], [158, 3, 1, "", "static_asarray"], [158, 3, 1, "", "static_asin"], [158, 3, 1, "", "static_asinh"], [158, 3, 1, "", "static_assert_supports_inplace"], [158, 3, 1, "", "static_astype"], [158, 3, 1, "", "static_atan"], [158, 3, 1, "", "static_atan2"], [158, 3, 1, "", "static_atanh"], [158, 3, 1, "", "static_bitwise_and"], [158, 3, 1, "", "static_bitwise_invert"], [158, 3, 1, "", "static_bitwise_left_shift"], [158, 3, 1, "", "static_bitwise_or"], [158, 3, 1, "", "static_bitwise_right_shift"], [158, 3, 1, "", "static_bitwise_xor"], [158, 3, 1, "", "static_broadcast_arrays"], [158, 3, 1, "", "static_broadcast_to"], [158, 3, 1, "", "static_cache_fn"], [158, 3, 1, "", "static_ceil"], [158, 3, 1, "", "static_cholesky"], [158, 3, 1, "", "static_clear_mem_on_dev"], [158, 3, 1, "", "static_clip_matrix_norm"], [158, 3, 1, "", "static_clip_vector_norm"], [158, 3, 1, "", "static_closest_valid_dtype"], [158, 3, 1, "", "static_concat"], [158, 3, 1, "", "static_constant_pad"], [158, 3, 1, "", "static_container_types"], [158, 3, 1, "", "static_conv1d"], [158, 3, 1, "", "static_conv1d_transpose"], [158, 3, 1, "", "static_conv2d"], [158, 3, 1, "", "static_conv2d_transpose"], [158, 3, 1, "", "static_conv3d"], [158, 3, 1, "", "static_conv3d_transpose"], [158, 3, 1, "", "static_copy_array"], [158, 3, 1, "", "static_cos"], [158, 3, 1, "", "static_cosh"], [158, 3, 1, "", "static_cross"], [158, 3, 1, "", "static_cumprod"], [158, 3, 1, "", "static_cumsum"], [158, 3, 1, "", "static_current_backend"], [158, 3, 1, "", "static_current_backend_str"], [158, 3, 1, "", "static_default"], [158, 3, 1, "", "static_default_device"], [158, 3, 1, "", "static_default_dtype"], [158, 3, 1, "", "static_default_float_dtype"], [158, 3, 1, "", "static_default_int_dtype"], [158, 3, 1, "", "static_depthwise_conv2d"], [158, 3, 1, "", "static_det"], [158, 3, 1, "", "static_dev"], [158, 3, 1, "", "static_dev_clone"], [158, 3, 1, "", "static_dev_clone_array"], [158, 3, 1, "", "static_dev_clone_iter"], [158, 3, 1, "", "static_dev_clone_nest"], [158, 3, 1, "", "static_dev_dist"], [158, 3, 1, "", "static_dev_dist_array"], [158, 3, 1, "", "static_dev_dist_iter"], [158, 3, 1, "", "static_dev_dist_nest"], [158, 3, 1, "", "static_dev_unify"], [158, 3, 1, "", "static_dev_unify_array"], [158, 3, 1, "", "static_dev_unify_iter"], [158, 3, 1, "", "static_dev_unify_nest"], [158, 3, 1, "", "static_dev_util"], [158, 3, 1, "", "static_diagonal"], [158, 3, 1, "", "static_dropout"], [158, 3, 1, "", "static_dtype"], [158, 3, 1, "", "static_dtype_bits"], [158, 3, 1, "", "static_eigh"], [158, 3, 1, "", "static_eigvalsh"], [158, 3, 1, "", "static_einops_rearrange"], [158, 3, 1, "", "static_einops_reduce"], [158, 3, 1, "", "static_einops_repeat"], [158, 3, 1, "", "static_einsum"], [158, 3, 1, "", "static_empty"], [158, 3, 1, "", "static_empty_like"], [158, 3, 1, "", "static_equal"], [158, 3, 1, "", "static_erf"], [158, 3, 1, "", "static_execute_with_gradients"], [158, 3, 1, "", "static_exists"], [158, 3, 1, "", "static_exp"], [158, 3, 1, "", "static_expand_dims"], [158, 3, 1, "", "static_expm1"], [158, 3, 1, "", "static_eye"], [158, 3, 1, "", "static_finfo"], [158, 3, 1, "", "static_flip"], [158, 3, 1, "", "static_floor"], [158, 3, 1, "", "static_floor_divide"], [158, 3, 1, "", "static_floormod"], [158, 3, 1, "", "static_fourier_encode"], [158, 3, 1, "", "static_from_dlpack"], [158, 3, 1, "", "static_full"], [158, 3, 1, "", "static_full_like"], [158, 3, 1, "", "static_function_supported_dtypes"], [158, 3, 1, "", "static_function_unsupported_dtypes"], [158, 3, 1, "", "static_gather"], [158, 3, 1, "", "static_gather_nd"], [158, 3, 1, "", "static_gelu"], [158, 3, 1, "", "static_get_all_arrays_in_memory"], [158, 3, 1, "", "static_get_all_ivy_arrays_on_dev"], [158, 3, 1, "", "static_get_min_base"], [158, 3, 1, "", "static_get_min_denominator"], [158, 3, 1, "", "static_get_num_dims"], [158, 3, 1, "", "static_get_referrers_recursive"], [158, 3, 1, "", "static_gpu_is_available"], [158, 3, 1, "", "static_greater"], [158, 3, 1, "", "static_greater_equal"], [158, 3, 1, "", "static_handle_nestable"], [158, 3, 1, "", "static_handle_out_argument"], [158, 3, 1, "", "static_has_nans"], [158, 3, 1, "", "static_iinfo"], [158, 3, 1, "", "static_indices_where"], [158, 3, 1, "", "static_infer_device"], [158, 3, 1, "", "static_infer_dtype"], [158, 3, 1, "", "static_inplace_arrays_supported"], [158, 3, 1, "", "static_inplace_decrement"], [158, 3, 1, "", "static_inplace_increment"], [158, 3, 1, "", "static_inplace_update"], [158, 3, 1, "", "static_inplace_variables_supported"], [158, 3, 1, "", "static_inputs_to_native_arrays"], [158, 3, 1, "", "static_inv"], [158, 3, 1, "", "static_invalid_dtype"], [158, 3, 1, "", "static_is_array"], [158, 3, 1, "", "static_is_float_dtype"], [158, 3, 1, "", "static_is_int_dtype"], [158, 3, 1, "", "static_is_ivy_array"], [158, 3, 1, "", "static_is_ivy_container"], [158, 3, 1, "", "static_is_native_array"], [158, 3, 1, "", "static_is_variable"], [158, 3, 1, "", "static_isfinite"], [158, 3, 1, "", "static_isinf"], [158, 3, 1, "", "static_isnan"], [158, 3, 1, "", "static_layer_norm"], [158, 3, 1, "", "static_leaky_relu"], [158, 3, 1, "", "static_less"], [158, 3, 1, "", "static_less_equal"], [158, 3, 1, "", "static_linear"], [158, 3, 1, "", "static_linspace"], [158, 3, 1, "", "static_log"], [158, 3, 1, "", "static_log10"], [158, 3, 1, "", "static_log1p"], [158, 3, 1, "", "static_log2"], [158, 3, 1, "", "static_logaddexp"], [158, 3, 1, "", "static_logical_and"], [158, 3, 1, "", "static_logical_not"], [158, 3, 1, "", "static_logical_or"], [158, 3, 1, "", "static_logical_xor"], [158, 3, 1, "", "static_logspace"], [158, 3, 1, "", "static_lstm_update"], [158, 3, 1, "", "static_match_kwargs"], [158, 3, 1, "", "static_matmul"], [158, 3, 1, "", "static_matrix_norm"], [158, 3, 1, "", "static_matrix_power"], [158, 3, 1, "", "static_matrix_rank"], [158, 3, 1, "", "static_matrix_transpose"], [158, 3, 1, "", "static_max"], [158, 3, 1, "", "static_maximum"], [158, 3, 1, "", "static_mean"], [158, 3, 1, "", "static_meshgrid"], [158, 3, 1, "", "static_min"], [158, 3, 1, "", "static_minimum"], [158, 3, 1, "", "static_multi_head_attention"], [158, 3, 1, "", "static_multinomial"], [158, 3, 1, "", "static_multiprocessing"], [158, 3, 1, "", "static_native_array"], [158, 3, 1, "", "static_negative"], [158, 3, 1, "", "static_nonzero"], [158, 3, 1, "", "static_not_equal"], [158, 3, 1, "", "static_num_arrays_in_memory"], [158, 3, 1, "", "static_num_cpu_cores"], [158, 3, 1, "", "static_num_gpus"], [158, 3, 1, "", "static_num_ivy_arrays_on_dev"], [158, 3, 1, "", "static_one_hot"], [158, 3, 1, "", "static_ones"], [158, 3, 1, "", "static_ones_like"], [158, 3, 1, "", "static_outer"], [158, 3, 1, "", "static_outputs_to_ivy_arrays"], [158, 3, 1, "", "static_percent_used_mem_on_dev"], [158, 3, 1, "", "static_permute_dims"], [158, 3, 1, "", "static_pinv"], [158, 3, 1, "", "static_positive"], [158, 3, 1, "", "static_pow"], [158, 3, 1, "", "static_print_all_arrays_in_memory"], [158, 3, 1, "", "static_print_all_ivy_arrays_on_dev"], [158, 3, 1, "", "static_prod"], [158, 3, 1, "", "static_promote_types"], [158, 3, 1, "", "static_qr"], [158, 3, 1, "", "static_queue_timeout"], [158, 3, 1, "", "static_random_normal"], [158, 3, 1, "", "static_relu"], [158, 3, 1, "", "static_remainder"], [158, 3, 1, "", "static_repeat"], [158, 3, 1, "", "static_reshape"], [158, 3, 1, "", "static_result_type"], [158, 3, 1, "", "static_round"], [158, 3, 1, "", "static_scaled_dot_product_attention"], [158, 3, 1, "", "static_scatter_flat"], [158, 3, 1, "", "static_scatter_nd"], [158, 3, 1, "", "static_seed"], [158, 3, 1, "", "static_set_default_device"], [158, 3, 1, "", "static_set_default_dtype"], [158, 3, 1, "", "static_set_default_float_dtype"], [158, 3, 1, "", "static_set_default_int_dtype"], [158, 3, 1, "", "static_set_min_base"], [158, 3, 1, "", "static_set_min_denominator"], [158, 3, 1, "", "static_set_queue_timeout"], [158, 3, 1, "", "static_set_split_factor"], [158, 3, 1, "", "static_set_tmp_dir"], [158, 3, 1, "", "static_set_with_grads"], [158, 3, 1, "", "static_shape"], [158, 3, 1, "", "static_shape_to_tuple"], [158, 3, 1, "", "static_shuffle"], [158, 3, 1, "", "static_sigmoid"], [158, 3, 1, "", "static_sign"], [158, 3, 1, "", "static_sin"], [158, 3, 1, "", "static_sinh"], [158, 3, 1, "", "static_slogdet"], [158, 3, 1, "", "static_softmax"], [158, 3, 1, "", "static_softplus"], [158, 3, 1, "", "static_solve"], [158, 3, 1, "", "static_split"], [158, 3, 1, "", "static_split_factor"], [158, 3, 1, "", "static_split_func_call"], [158, 3, 1, "", "static_sqrt"], [158, 3, 1, "", "static_square"], [158, 3, 1, "", "static_squeeze"], [158, 3, 1, "", "static_stable_divide"], [158, 3, 1, "", "static_stable_pow"], [158, 3, 1, "", "static_stack"], [158, 3, 1, "", "static_std"], [158, 3, 1, "", "static_stop_gradient"], [158, 3, 1, "", "static_sum"], [158, 3, 1, "", "static_supports_inplace"], [158, 3, 1, "", "static_svd"], [158, 3, 1, "", "static_svdvals"], [158, 3, 1, "", "static_swapaxes"], [158, 3, 1, "", "static_tanh"], [158, 3, 1, "", "static_tensordot"], [158, 3, 1, "", "static_tile"], [158, 3, 1, "", "static_tmp_dir"], [158, 3, 1, "", "static_to_device"], [158, 3, 1, "", "static_to_list"], [158, 3, 1, "", "static_to_native_arrays_and_back"], [158, 3, 1, "", "static_to_numpy"], [158, 3, 1, "", "static_to_scalar"], [158, 3, 1, "", "static_total_mem_on_dev"], [158, 3, 1, "", "static_tpu_is_available"], [158, 3, 1, "", "static_trace"], [158, 3, 1, "", "static_tril"], [158, 3, 1, "", "static_triu"], [158, 3, 1, "", "static_trunc"], [158, 3, 1, "", "static_try_else_none"], [158, 3, 1, "", "static_type_promote_arrays"], [158, 3, 1, "", "static_unique_all"], [158, 3, 1, "", "static_unique_counts"], [158, 3, 1, "", "static_unique_inverse"], [158, 3, 1, "", "static_unique_values"], [158, 3, 1, "", "static_unset_default_device"], [158, 3, 1, "", "static_unset_default_dtype"], [158, 3, 1, "", "static_unset_default_float_dtype"], [158, 3, 1, "", "static_unset_default_int_dtype"], [158, 3, 1, "", "static_unset_with_grads"], [158, 3, 1, "", "static_unstack"], [158, 3, 1, "", "static_used_mem_on_dev"], [158, 3, 1, "", "static_valid_dtype"], [158, 3, 1, "", "static_value_is_nan"], [158, 3, 1, "", "static_var"], [158, 3, 1, "", "static_variable"], [158, 3, 1, "", "static_variable_data"], [158, 3, 1, "", "static_vecdot"], [158, 3, 1, "", "static_vector_norm"], [158, 3, 1, "", "static_vector_to_skew_symmetric_matrix"], [158, 3, 1, "", "static_where"], [158, 3, 1, "", "static_with_grads"], [158, 3, 1, "", "static_zero_pad"], [158, 3, 1, "", "static_zeros"], [158, 3, 1, "", "static_zeros_like"], [158, 3, 1, "", "stop_gradient"], [158, 3, 1, "", "supports_inplace"], [158, 3, 1, "", "svd"], [158, 3, 1, "", "svdvals"], [158, 3, 1, "", "tensordot"], [158, 3, 1, "", "tmp_dir"], [158, 3, 1, "", "to_native_arrays_and_back"], [158, 3, 1, "", "to_scalar"], [158, 3, 1, "", "total_mem_on_dev"], [158, 3, 1, "", "tpu_is_available"], [158, 3, 1, "", "trace"], [158, 3, 1, "", "tril"], [158, 3, 1, "", "triu"], [158, 3, 1, "", "try_else_none"], [158, 3, 1, "", "type_promote_arrays"], [158, 3, 1, "", "unique_all"], [158, 3, 1, "", "unique_counts"], [158, 3, 1, "", "unique_inverse"], [158, 3, 1, "", "unique_values"], [158, 3, 1, "", "unset_default_device"], [158, 3, 1, "", "unset_default_dtype"], [158, 3, 1, "", "unset_default_float_dtype"], [158, 3, 1, "", "unset_default_int_dtype"], [158, 3, 1, "", "unset_with_grads"], [158, 3, 1, "", "used_mem_on_dev"], [158, 3, 1, "", "valid_dtype"], [158, 3, 1, "", "value_is_nan"], [158, 3, 1, "", "variable"], [158, 3, 1, "", "variable_data"], [158, 3, 1, "", "vecdot"], [158, 3, 1, "", "vector_to_skew_symmetric_matrix"], [158, 3, 1, "", "where"], [158, 3, 1, "", "with_grads"], [158, 3, 1, "", "zeros"], [158, 3, 1, "", "zeros_like"]], "ivy.container.container.MultiDevContainer": [[159, 3, 1, "", "__init__"], [159, 3, 1, "", "at_dev"], [159, 3, 1, "", "at_devs"]], "ivy.container.container_methods": [[160, 2, 1, "", "__add__"], [160, 2, 1, "", "__init__"], [160, 2, 1, "", "__radd__"], [161, 2, 1, "", "abs"], [162, 2, 1, "", "acos"], [163, 2, 1, "", "acosh"], [164, 2, 1, "", "adam_update"], [165, 2, 1, "", "add"], [166, 2, 1, "", "all"], [167, 2, 1, "", "all_equal"], [168, 2, 1, "", "any"], [169, 2, 1, "", "argsort"], [170, 2, 1, "", "asin"], [171, 2, 1, "", "asinh"], [172, 2, 1, "", "at_dev"], [173, 2, 1, "", "at_devs"], [174, 2, 1, "", "atan"], [175, 2, 1, "", "atan2"], [176, 2, 1, "", "atanh"], [177, 2, 1, "", "binary_cross_entropy"], [178, 2, 1, "", "bitwise_and"], [179, 2, 1, "", "bitwise_invert"], [180, 2, 1, "", "bitwise_left_shift"], [181, 2, 1, "", "bitwise_or"], [182, 2, 1, "", "bitwise_right_shift"], [183, 2, 1, "", "bitwise_xor"], [184, 2, 1, "", "can_cast"], [185, 2, 1, "", "ceil"], [186, 2, 1, "", "clip"], [187, 2, 1, "", "clip_vector_norm"], [188, 2, 1, "", "concat"], [189, 2, 1, "", "constant_pad"], [190, 2, 1, "", "cos"], [191, 2, 1, "", "cosh"], [192, 2, 1, "", "cross_entropy"], [193, 2, 1, "", "divide"], [194, 2, 1, "", "einsum"], [195, 2, 1, "", "equal"], [512, 2, 1, "", "erf"], [197, 2, 1, "", "exp"], [198, 2, 1, "", "expand_dims"], [199, 2, 1, "", "expm1"], [200, 2, 1, "", "flip"], [201, 2, 1, "", "floor"], [202, 2, 1, "", "floor_divide"], [203, 2, 1, "", "gradient_descent_update"], [204, 2, 1, "", "greater"], [205, 2, 1, "", "greater_equal"], [206, 2, 1, "", "isfinite"], [207, 2, 1, "", "isinf"], [208, 2, 1, "", "isnan"], [209, 2, 1, "", "lamb_update"], [210, 2, 1, "", "lars_update"], [211, 2, 1, "", "layer_norm"], [212, 2, 1, "", "less"], [213, 2, 1, "", "less_equal"], [214, 2, 1, "", "log"], [215, 2, 1, "", "log10"], [216, 2, 1, "", "log1p"], [217, 2, 1, "", "log2"], [218, 2, 1, "", "logaddexp"], [219, 2, 1, "", "logical_and"], [220, 2, 1, "", "logical_not"], [221, 2, 1, "", "logical_or"], [222, 2, 1, "", "logical_xor"], [223, 2, 1, "", "matmul"], [224, 2, 1, "", "max"], [225, 2, 1, "", "mean"], [226, 2, 1, "", "min"], [227, 2, 1, "", "multiply"], [228, 2, 1, "", "negative"], [229, 2, 1, "", "not_equal"], [230, 2, 1, "", "optimizer_update"], [231, 2, 1, "", "permute_dims"], [232, 2, 1, "", "positive"], [233, 2, 1, "", "pow"], [234, 2, 1, "", "prod"], [235, 2, 1, "", "random_uniform"], [236, 2, 1, "", "remainder"], [237, 2, 1, "", "repeat"], [238, 2, 1, "", "reshape"], [239, 2, 1, "", "roll"], [240, 2, 1, "", "round"], [241, 2, 1, "", "sign"], [552, 2, 1, "", "sin"], [243, 2, 1, "", "sinh"], [244, 2, 1, "", "sort"], [245, 2, 1, "", "sparse_cross_entropy"], [246, 2, 1, "", "sqrt"], [247, 2, 1, "", "square"], [248, 2, 1, "", "squeeze"], [249, 2, 1, "", "stack"], [250, 2, 1, "", "static_adam_update"], [251, 2, 1, "", "static_add"], [252, 2, 1, "", "static_all_equal"], [253, 2, 1, "", "static_argsort"], [254, 2, 1, "", "static_binary_cross_entropy"], [255, 2, 1, "", "static_can_cast"], [690, 2, 1, "", "static_clip"], [257, 2, 1, "", "static_cross_entropy"], [258, 2, 1, "", "static_divide"], [259, 2, 1, "", "static_gradient_descent_update"], [260, 2, 1, "", "static_lamb_update"], [261, 2, 1, "", "static_lars_update"], [262, 2, 1, "", "static_multiply"], [263, 2, 1, "", "static_optimizer_update"], [264, 2, 1, "", "static_randint"], [265, 2, 1, "", "static_random_uniform"], [266, 2, 1, "", "static_roll"], [267, 2, 1, "", "static_sort"], [268, 2, 1, "", "static_sparse_cross_entropy"], [269, 2, 1, "", "static_subtract"], [270, 2, 1, "", "static_tan"], [271, 2, 1, "", "std"], [272, 2, 1, "", "subtract"], [273, 2, 1, "", "sum"], [274, 2, 1, "", "swapaxes"], [275, 2, 1, "", "tan"], [276, 2, 1, "", "tanh"], [277, 2, 1, "", "tile"], [278, 2, 1, "", "trunc"], [279, 2, 1, "", "var"], [280, 2, 1, "", "zero_pad"]], "ivy.container.creation": [[282, 1, 1, "", "ContainerWithCreation"]], "ivy.container.data_types": [[284, 1, 1, "", "ContainerWithDataTypes"]], "ivy.container.data_types.ContainerWithDataTypes": [[284, 3, 1, "", "can_cast"], [284, 3, 1, "", "static_can_cast"]], "ivy.container.device": [[286, 1, 1, "", "ContainerWithDevice"]], "ivy.container.elementwise": [[288, 1, 1, "", "ContainerWithElementwise"]], "ivy.container.elementwise.ContainerWithElementwise": [[288, 3, 1, "", "abs"], [288, 3, 1, "", "acos"], [288, 3, 1, "", "acosh"], [288, 3, 1, "", "add"], [288, 3, 1, "", "asin"], [288, 3, 1, "", "asinh"], [288, 3, 1, "", "atan"], [288, 3, 1, "", "atan2"], [288, 3, 1, "", "atanh"], [288, 3, 1, "", "bitwise_and"], [288, 3, 1, "", "bitwise_invert"], [288, 3, 1, "", "bitwise_left_shift"], [288, 3, 1, "", "bitwise_or"], [288, 3, 1, "", "bitwise_right_shift"], [288, 3, 1, "", "bitwise_xor"], [288, 3, 1, "", "ceil"], [288, 3, 1, "", "cos"], [288, 3, 1, "", "cosh"], [288, 3, 1, "", "divide"], [288, 3, 1, "", "equal"], [288, 3, 1, "", "erf"], [288, 3, 1, "", "exp"], [288, 3, 1, "", "expm1"], [288, 3, 1, "", "floor"], [288, 3, 1, "", "floor_divide"], [288, 3, 1, "", "greater"], [288, 3, 1, "", "greater_equal"], [288, 3, 1, "", "isfinite"], [288, 3, 1, "", "isinf"], [288, 3, 1, "", "isnan"], [288, 3, 1, "", "less"], [288, 3, 1, "", "less_equal"], [288, 3, 1, "", "log"], [288, 3, 1, "", "log10"], [288, 3, 1, "", "log1p"], [288, 3, 1, "", "log2"], [288, 3, 1, "", "logaddexp"], [288, 3, 1, "", "logical_and"], [288, 3, 1, "", "logical_not"], [288, 3, 1, "", "logical_or"], [288, 3, 1, "", "logical_xor"], [288, 3, 1, "", "multiply"], [288, 3, 1, "", "negative"], [288, 3, 1, "", "not_equal"], [288, 3, 1, "", "positive"], [288, 3, 1, "", "pow"], [288, 3, 1, "", "remainder"], [288, 3, 1, "", "round"], [288, 3, 1, "", "sign"], [288, 3, 1, "", "sin"], [288, 3, 1, "", "sinh"], [288, 3, 1, "", "sqrt"], [288, 3, 1, "", "square"], [288, 3, 1, "", "static_add"], [288, 3, 1, "", "static_divide"], [288, 3, 1, "", "static_multiply"], [288, 3, 1, "", "static_subtract"], [288, 3, 1, "", "static_tan"], [288, 3, 1, "", "subtract"], [288, 3, 1, "", "tan"], [288, 3, 1, "", "tanh"], [288, 3, 1, "", "trunc"]], "ivy.container.general": [[290, 1, 1, "", "ContainerWithGeneral"]], "ivy.container.general.ContainerWithGeneral": [[290, 3, 1, "", "all_equal"], [290, 3, 1, "", "clip_vector_norm"], [290, 3, 1, "", "static_all_equal"]], "ivy.container.gradients": [[292, 1, 1, "", "ContainerWithGradients"]], "ivy.container.gradients.ContainerWithGradients": [[292, 3, 1, "", "adam_update"], [292, 3, 1, "", "gradient_descent_update"], [292, 3, 1, "", "lamb_update"], [292, 3, 1, "", "lars_update"], [292, 3, 1, "", "optimizer_update"], [292, 3, 1, "", "static_adam_update"], [292, 3, 1, "", "static_gradient_descent_update"], [292, 3, 1, "", "static_lamb_update"], [292, 3, 1, "", "static_lars_update"], [292, 3, 1, "", "static_optimizer_update"]], "ivy.container.image": [[294, 1, 1, "", "ContainerWithImage"]], "ivy.container.layers": [[296, 1, 1, "", "ContainerWithLayers"]], "ivy.container.linear_algebra": [[298, 1, 1, "", "ContainerWithLinearAlgebra"]], "ivy.container.linear_algebra.ContainerWithLinearAlgebra": [[298, 3, 1, "", "matmul"]], "ivy.container.losses": [[300, 1, 1, "", "ContainerWithLosses"]], "ivy.container.losses.ContainerWithLosses": [[300, 3, 1, "", "binary_cross_entropy"], [300, 3, 1, "", "cross_entropy"], [300, 3, 1, "", "sparse_cross_entropy"], [300, 3, 1, "", "static_binary_cross_entropy"], [300, 3, 1, "", "static_cross_entropy"], [300, 3, 1, "", "static_sparse_cross_entropy"]], "ivy.container.manipulation": [[302, 1, 1, "", "ContainerWithManipulation"]], "ivy.container.manipulation.ContainerWithManipulation": [[302, 3, 1, "", "clip"], [302, 3, 1, "", "concat"], [302, 3, 1, "", "constant_pad"], [302, 3, 1, "", "expand_dims"], [302, 3, 1, "", "flip"], [302, 3, 1, "", "permute_dims"], [302, 3, 1, "", "repeat"], [302, 3, 1, "", "reshape"], [302, 3, 1, "", "roll"], [302, 3, 1, "", "squeeze"], [302, 3, 1, "", "stack"], [302, 3, 1, "", "static_clip"], [302, 3, 1, "", "static_roll"], [302, 3, 1, "", "swapaxes"], [302, 3, 1, "", "tile"], [302, 3, 1, "", "zero_pad"]], "ivy.container.norms": [[304, 1, 1, "", "ContainerWithNorms"]], "ivy.container.norms.ContainerWithNorms": [[304, 3, 1, "", "layer_norm"]], "ivy.container.random": [[306, 1, 1, "", "ContainerWithRandom"]], "ivy.container.random.ContainerWithRandom": [[306, 3, 1, "", "random_uniform"], [306, 3, 1, "", "static_randint"], [306, 3, 1, "", "static_random_uniform"]], "ivy.container.searching": [[308, 1, 1, "", "ContainerWithSearching"]], "ivy.container.set": [[310, 1, 1, "", "ContainerWithSet"]], "ivy.container.sorting": [[312, 1, 1, "", "ContainerWithSorting"]], "ivy.container.sorting.ContainerWithSorting": [[312, 3, 1, "", "argsort"], [312, 3, 1, "", "sort"], [312, 3, 1, "", "static_argsort"], [312, 3, 1, "", "static_sort"]], "ivy.container.statistical": [[314, 1, 1, "", "ContainerWithStatistical"]], "ivy.container.statistical.ContainerWithStatistical": [[314, 3, 1, "", "einsum"], [314, 3, 1, "", "max"], [314, 3, 1, "", "mean"], [314, 3, 1, "", "min"], [314, 3, 1, "", "prod"], [314, 3, 1, "", "std"], [314, 3, 1, "", "sum"], [314, 3, 1, "", "var"]], "ivy.container.utility": [[316, 1, 1, "", "ContainerWithUtility"]], "ivy.container.utility.ContainerWithUtility": [[316, 3, 1, "", "all"], [316, 3, 1, "", "any"]], "ivy.container.wrapping": [[318, 2, 1, "", "add_ivy_container_instance_methods"]], "ivy.func_wrapper": [[359, 2, 1, "", "handle_nestable"], [360, 2, 1, "", "handle_out_argument"], [361, 2, 1, "", "infer_device"], [362, 2, 1, "", "infer_dtype"], [363, 2, 1, "", "inputs_to_ivy_arrays"], [364, 2, 1, "", "inputs_to_native_arrays"], [365, 2, 1, "", "outputs_to_ivy_arrays"], [366, 2, 1, "", "to_native_arrays_and_back"]], "ivy.functional.ivy": [[368, 0, 0, "-", "activations"], [376, 0, 0, "-", "compilation"], [378, 0, 0, "-", "constants"], [379, 0, 0, "-", "creation"], [398, 0, 0, "-", "data_type"], [431, 0, 0, "-", "device"], [481, 0, 0, "-", "elementwise"], [563, 0, 0, "-", "general"], [627, 0, 0, "-", "gradients"], [643, 0, 0, "-", "layers"], [656, 0, 0, "-", "linear_algebra"], [681, 0, 0, "-", "losses"], [687, 0, 0, "-", "manipulation"], [709, 0, 0, "-", "meta"], [713, 0, 0, "-", "nest"], [731, 0, 0, "-", "norms"], [733, 0, 0, "-", "random"], [740, 0, 0, "-", "searching"], [745, 0, 0, "-", "set"], [750, 0, 0, "-", "sorting"], [753, 0, 0, "-", "statistical"], [762, 0, 0, "-", "utility"]], "ivy.functional.ivy.activations": [[369, 2, 1, "", "gelu"], [370, 2, 1, "", "leaky_relu"], [371, 2, 1, "", "relu"], [372, 2, 1, "", "sigmoid"], [373, 2, 1, "", "softmax"], [374, 2, 1, "", "softplus"], [375, 2, 1, "", "tanh"]], "ivy.functional.ivy.compilation": [[377, 2, 1, "", "compile"]], "ivy.functional.ivy.constants": [[378, 5, 1, "", "e"], [378, 5, 1, "", "inf"], [378, 5, 1, "", "nan"], [378, 5, 1, "", "newaxis"], [378, 5, 1, "", "pi"]], "ivy.functional.ivy.creation": [[380, 2, 1, "", "arange"], [379, 2, 1, "", "array"], [381, 2, 1, "", "asarray"], [382, 2, 1, "", "empty"], [383, 2, 1, "", "empty_like"], [384, 2, 1, "", "eye"], [385, 2, 1, "", "from_dlpack"], [386, 2, 1, "", "full"], [387, 2, 1, "", "full_like"], [388, 2, 1, "", "linspace"], [389, 2, 1, "", "logspace"], [390, 2, 1, "", "meshgrid"], [391, 2, 1, "", "native_array"], [392, 2, 1, "", "ones"], [393, 2, 1, "", "ones_like"], [394, 2, 1, "", "tril"], [395, 2, 1, "", "triu"], [396, 2, 1, "", "zeros"], [397, 2, 1, "", "zeros_like"]], "ivy.functional.ivy.data_type": [[398, 1, 1, "", "DefaultDtype"], [398, 1, 1, "", "DefaultFloatDtype"], [398, 1, 1, "", "DefaultIntDtype"], [402, 2, 1, "", "as_ivy_dtype"], [403, 2, 1, "", "as_native_dtype"], [404, 2, 1, "", "astype"], [405, 2, 1, "", "broadcast_arrays"], [406, 2, 1, "", "broadcast_to"], [407, 2, 1, "", "can_cast"], [408, 2, 1, "", "closest_valid_dtype"], [409, 2, 1, "", "default_dtype"], [410, 2, 1, "", "default_float_dtype"], [411, 2, 1, "", "default_int_dtype"], [412, 2, 1, "", "dtype"], [413, 2, 1, "", "dtype_bits"], [414, 2, 1, "", "finfo"], [415, 2, 1, "", "function_supported_dtypes"], [416, 2, 1, "", "function_unsupported_dtypes"], [417, 2, 1, "", "iinfo"], [418, 2, 1, "", "invalid_dtype"], [419, 2, 1, "", "is_float_dtype"], [420, 2, 1, "", "is_int_dtype"], [421, 2, 1, "", "promote_types"], [422, 2, 1, "", "result_type"], [423, 2, 1, "", "set_default_dtype"], [424, 2, 1, "", "set_default_float_dtype"], [425, 2, 1, "", "set_default_int_dtype"], [426, 2, 1, "", "type_promote_arrays"], [427, 2, 1, "", "unset_default_dtype"], [428, 2, 1, "", "unset_default_float_dtype"], [429, 2, 1, "", "unset_default_int_dtype"], [430, 2, 1, "", "valid_dtype"]], "ivy.functional.ivy.data_type.DefaultDtype": [[398, 3, 1, "", "__init__"]], "ivy.functional.ivy.data_type.DefaultFloatDtype": [[398, 3, 1, "", "__init__"]], "ivy.functional.ivy.data_type.DefaultIntDtype": [[398, 3, 1, "", "__init__"]], "ivy.functional.ivy.device": [[431, 1, 1, "", "DefaultDevice"], [433, 1, 1, "", "DevClonedItem"], [434, 1, 1, "", "DevClonedIter"], [435, 1, 1, "", "DevClonedNest"], [436, 1, 1, "", "DevDistItem"], [437, 1, 1, "", "DevDistIter"], [438, 1, 1, "", "DevDistNest"], [431, 1, 1, "", "DevManager"], [440, 1, 1, "", "DevMapper"], [441, 1, 1, "", "DevMapperMultiProc"], [431, 1, 1, "", "MultiDev"], [443, 1, 1, "", "MultiDevItem"], [444, 1, 1, "", "MultiDevIter"], [445, 1, 1, "", "MultiDevNest"], [446, 1, 1, "", "Profiler"], [447, 2, 1, "", "as_ivy_dev"], [448, 2, 1, "", "as_native_dev"], [449, 2, 1, "", "clear_mem_on_dev"], [450, 2, 1, "", "default_device"], [451, 2, 1, "", "dev"], [452, 2, 1, "", "dev_clone"], [453, 2, 1, "", "dev_clone_array"], [454, 2, 1, "", "dev_clone_iter"], [455, 2, 1, "", "dev_clone_nest"], [456, 2, 1, "", "dev_dist"], [457, 2, 1, "", "dev_dist_array"], [458, 2, 1, "", "dev_dist_iter"], [459, 2, 1, "", "dev_dist_nest"], [460, 2, 1, "", "dev_unify"], [461, 2, 1, "", "dev_unify_array"], [462, 2, 1, "", "dev_unify_iter"], [463, 2, 1, "", "dev_unify_nest"], [464, 2, 1, "", "dev_util"], [465, 2, 1, "", "get_all_ivy_arrays_on_dev"], [466, 2, 1, "", "gpu_is_available"], [467, 2, 1, "", "num_cpu_cores"], [468, 2, 1, "", "num_gpus"], [469, 2, 1, "", "num_ivy_arrays_on_dev"], [470, 2, 1, "", "percent_used_mem_on_dev"], [471, 2, 1, "", "print_all_ivy_arrays_on_dev"], [472, 2, 1, "", "set_default_device"], [473, 2, 1, "", "set_split_factor"], [474, 2, 1, "", "split_factor"], [475, 2, 1, "", "split_func_call"], [476, 2, 1, "", "to_device"], [477, 2, 1, "", "total_mem_on_dev"], [478, 2, 1, "", "tpu_is_available"], [479, 2, 1, "", "unset_default_device"], [480, 2, 1, "", "used_mem_on_dev"]], "ivy.functional.ivy.device.DefaultDevice": [[431, 3, 1, "", "__enter__"], [431, 3, 1, "", "__init__"]], "ivy.functional.ivy.device.DevManager": [[431, 3, 1, "", "__init__"], [431, 3, 1, "", "da_tune_step"], [431, 4, 1, "", "dim_size"], [431, 3, 1, "", "ds_tune_step"], [431, 3, 1, "", "map"], [431, 3, 1, "", "repeated_config_check"], [431, 4, 1, "", "tune_step"], [431, 4, 1, "", "tuned"]], "ivy.functional.ivy.device.DevMapper": [[440, 3, 1, "", "__init__"], [440, 3, 1, "", "map"]], "ivy.functional.ivy.device.DevMapperMultiProc": [[441, 3, 1, "", "__init__"]], "ivy.functional.ivy.device.MultiDev": [[431, 3, 1, "", "__init__"]], "ivy.functional.ivy.device.MultiDevItem": [[443, 3, 1, "", "__init__"], [443, 3, 1, "", "items"], [443, 3, 1, "", "keys"], [443, 4, 1, "", "shape"], [443, 3, 1, "", "values"]], "ivy.functional.ivy.device.MultiDevIter": [[444, 3, 1, "", "__init__"], [444, 3, 1, "", "at_dev"], [444, 3, 1, "", "at_devs"]], "ivy.functional.ivy.device.MultiDevNest": [[445, 3, 1, "", "__init__"], [445, 3, 1, "", "at_dev"]], "ivy.functional.ivy.device.Profiler": [[446, 3, 1, "", "__init__"], [446, 3, 1, "", "start"], [446, 3, 1, "", "stop"]], "ivy.functional.ivy.elementwise": [[482, 2, 1, "", "abs"], [483, 2, 1, "", "acos"], [484, 2, 1, "", "acosh"], [485, 2, 1, "", "add"], [488, 2, 1, "", "asin"], [489, 2, 1, "", "asinh"], [490, 2, 1, "", "atan"], [491, 2, 1, "", "atan2"], [492, 2, 1, "", "atanh"], [493, 2, 1, "", "bitwise_and"], [494, 2, 1, "", "bitwise_invert"], [497, 2, 1, "", "bitwise_left_shift"], [500, 2, 1, "", "bitwise_or"], [501, 2, 1, "", "bitwise_right_shift"], [504, 2, 1, "", "bitwise_xor"], [505, 2, 1, "", "ceil"], [506, 2, 1, "", "cos"], [507, 2, 1, "", "cosh"], [508, 2, 1, "", "divide"], [509, 2, 1, "", "equal"], [513, 2, 1, "", "erf"], [514, 2, 1, "", "exp"], [515, 2, 1, "", "expm1"], [516, 2, 1, "", "floor"], [517, 2, 1, "", "floor_divide"], [518, 2, 1, "", "greater"], [519, 2, 1, "", "greater_equal"], [520, 2, 1, "", "isfinite"], [521, 2, 1, "", "isinf"], [522, 2, 1, "", "isnan"], [523, 2, 1, "", "less"], [524, 2, 1, "", "less_equal"], [527, 2, 1, "", "log"], [528, 2, 1, "", "log10"], [529, 2, 1, "", "log1p"], [532, 2, 1, "", "log2"], [533, 2, 1, "", "logaddexp"], [534, 2, 1, "", "logical_and"], [535, 2, 1, "", "logical_not"], [538, 2, 1, "", "logical_or"], [539, 2, 1, "", "logical_xor"], [540, 2, 1, "", "maximum"], [541, 2, 1, "", "minimum"], [542, 2, 1, "", "multiply"], [543, 2, 1, "", "negative"], [544, 2, 1, "", "not_equal"], [545, 2, 1, "", "positive"], [546, 2, 1, "", "pow"], [547, 2, 1, "", "remainder"], [548, 2, 1, "", "round"], [549, 2, 1, "", "sign"], [553, 2, 1, "", "sin"], [554, 2, 1, "", "sinh"], [555, 2, 1, "", "sqrt"], [558, 2, 1, "", "square"], [559, 2, 1, "", "subtract"], [560, 2, 1, "", "tan"], [561, 2, 1, "", "tanh"], [562, 2, 1, "", "trunc"]], "ivy.functional.ivy.general": [[564, 2, 1, "", "all_equal"], [565, 2, 1, "", "arg_info"], [566, 2, 1, "", "arg_names"], [567, 2, 1, "", "array_equal"], [568, 2, 1, "", "arrays_equal"], [569, 2, 1, "", "assert_supports_inplace"], [570, 2, 1, "", "cache_fn"], [571, 2, 1, "", "clip_matrix_norm"], [572, 2, 1, "", "clip_vector_norm"], [573, 2, 1, "", "container_types"], [574, 2, 1, "", "copy_array"], [575, 2, 1, "", "cumprod"], [576, 2, 1, "", "cumsum"], [577, 2, 1, "", "current_backend_str"], [578, 2, 1, "", "default"], [579, 2, 1, "", "einops_rearrange"], [580, 2, 1, "", "einops_reduce"], [581, 2, 1, "", "einops_repeat"], [582, 2, 1, "", "exists"], [583, 2, 1, "", "floormod"], [584, 2, 1, "", "fourier_encode"], [585, 2, 1, "", "gather"], [586, 2, 1, "", "gather_nd"], [587, 2, 1, "", "get_all_arrays_in_memory"], [588, 2, 1, "", "get_min_base"], [589, 2, 1, "", "get_min_denominator"], [590, 2, 1, "", "get_num_dims"], [591, 2, 1, "", "get_referrers_recursive"], [592, 2, 1, "", "has_nans"], [593, 2, 1, "", "indices_where"], [594, 2, 1, "", "inplace_arrays_supported"], [595, 2, 1, "", "inplace_decrement"], [596, 2, 1, "", "inplace_increment"], [597, 2, 1, "", "inplace_update"], [598, 2, 1, "", "inplace_variables_supported"], [599, 2, 1, "", "is_array"], [600, 2, 1, "", "is_ivy_array"], [601, 2, 1, "", "is_ivy_container"], [602, 2, 1, "", "is_native_array"], [603, 2, 1, "", "match_kwargs"], [604, 2, 1, "", "multiprocessing"], [605, 2, 1, "", "num_arrays_in_memory"], [606, 2, 1, "", "one_hot"], [607, 2, 1, "", "print_all_arrays_in_memory"], [608, 2, 1, "", "queue_timeout"], [609, 2, 1, "", "scatter_flat"], [610, 2, 1, "", "scatter_nd"], [611, 2, 1, "", "set_min_base"], [612, 2, 1, "", "set_min_denominator"], [613, 2, 1, "", "set_queue_timeout"], [614, 2, 1, "", "set_tmp_dir"], [615, 2, 1, "", "shape"], [616, 2, 1, "", "shape_to_tuple"], [617, 2, 1, "", "stable_divide"], [618, 2, 1, "", "stable_pow"], [619, 2, 1, "", "supports_inplace"], [620, 2, 1, "", "tmp_dir"], [621, 2, 1, "", "to_list"], [622, 2, 1, "", "to_numpy"], [623, 2, 1, "", "to_scalar"], [624, 2, 1, "", "try_else_none"], [625, 2, 1, "", "unstack"], [626, 2, 1, "", "value_is_nan"]], "ivy.functional.ivy.gradients": [[627, 1, 1, "", "GradientTracking"], [629, 2, 1, "", "adam_step"], [630, 2, 1, "", "adam_update"], [631, 2, 1, "", "execute_with_gradients"], [632, 2, 1, "", "gradient_descent_update"], [633, 2, 1, "", "is_variable"], [634, 2, 1, "", "lamb_update"], [635, 2, 1, "", "lars_update"], [636, 2, 1, "", "optimizer_update"], [637, 2, 1, "", "set_with_grads"], [638, 2, 1, "", "stop_gradient"], [639, 2, 1, "", "unset_with_grads"], [640, 2, 1, "", "variable"], [641, 2, 1, "", "variable_data"], [642, 2, 1, "", "with_grads"]], "ivy.functional.ivy.gradients.GradientTracking": [[627, 3, 1, "", "__init__"]], "ivy.functional.ivy.layers": [[644, 2, 1, "", "conv1d"], [645, 2, 1, "", "conv1d_transpose"], [646, 2, 1, "", "conv2d"], [647, 2, 1, "", "conv2d_transpose"], [648, 2, 1, "", "conv3d"], [649, 2, 1, "", "conv3d_transpose"], [650, 2, 1, "", "depthwise_conv2d"], [651, 2, 1, "", "dropout"], [652, 2, 1, "", "linear"], [653, 2, 1, "", "lstm_update"], [654, 2, 1, "", "multi_head_attention"], [655, 2, 1, "", "scaled_dot_product_attention"]], "ivy.functional.ivy.linear_algebra": [[657, 2, 1, "", "cholesky"], [658, 2, 1, "", "cross"], [659, 2, 1, "", "det"], [660, 2, 1, "", "diagonal"], [661, 2, 1, "", "eigh"], [662, 2, 1, "", "eigvalsh"], [663, 2, 1, "", "inv"], [664, 2, 1, "", "matmul"], [665, 2, 1, "", "matrix_norm"], [666, 2, 1, "", "matrix_power"], [667, 2, 1, "", "matrix_rank"], [668, 2, 1, "", "matrix_transpose"], [669, 2, 1, "", "outer"], [670, 2, 1, "", "pinv"], [671, 2, 1, "", "qr"], [672, 2, 1, "", "slogdet"], [673, 2, 1, "", "solve"], [674, 2, 1, "", "svd"], [675, 2, 1, "", "svdvals"], [676, 2, 1, "", "tensordot"], [677, 2, 1, "", "trace"], [678, 2, 1, "", "vecdot"], [679, 2, 1, "", "vector_norm"], [680, 2, 1, "", "vector_to_skew_symmetric_matrix"]], "ivy.functional.ivy.losses": [[682, 2, 1, "", "binary_cross_entropy"], [685, 2, 1, "", "cross_entropy"], [686, 2, 1, "", "sparse_cross_entropy"]], "ivy.functional.ivy.manipulation": [[689, 2, 1, "", "clip"], [693, 2, 1, "", "concat"], [694, 2, 1, "", "constant_pad"], [695, 2, 1, "", "expand_dims"], [696, 2, 1, "", "flip"], [697, 2, 1, "", "permute_dims"], [698, 2, 1, "", "repeat"], [701, 2, 1, "", "reshape"], [702, 2, 1, "", "roll"], [703, 2, 1, "", "split"], [704, 2, 1, "", "squeeze"], [705, 2, 1, "", "stack"], [706, 2, 1, "", "swapaxes"], [707, 2, 1, "", "tile"], [708, 2, 1, "", "zero_pad"]], "ivy.functional.ivy.meta": [[710, 2, 1, "", "fomaml_step"], [711, 2, 1, "", "maml_step"], [712, 2, 1, "", "reptile_step"]], "ivy.functional.ivy.nest": [[714, 2, 1, "", "all_nested_indices"], [715, 2, 1, "", "copy_nest"], [716, 2, 1, "", "index_nest"], [717, 2, 1, "", "insert_into_nest_at_index"], [718, 2, 1, "", "insert_into_nest_at_indices"], [719, 2, 1, "", "map"], [720, 2, 1, "", "map_nest_at_index"], [721, 2, 1, "", "map_nest_at_indices"], [722, 2, 1, "", "multi_index_nest"], [723, 2, 1, "", "nested_any"], [724, 2, 1, "", "nested_indices_where"], [725, 2, 1, "", "nested_map"], [726, 2, 1, "", "nested_multi_map"], [727, 2, 1, "", "prune_nest_at_index"], [728, 2, 1, "", "prune_nest_at_indices"], [729, 2, 1, "", "set_nest_at_index"], [730, 2, 1, "", "set_nest_at_indices"]], "ivy.functional.ivy.norms": [[732, 2, 1, "", "layer_norm"]], "ivy.functional.ivy.random": [[734, 2, 1, "", "multinomial"], [735, 2, 1, "", "randint"], [736, 2, 1, "", "random_normal"], [737, 2, 1, "", "random_uniform"], [738, 2, 1, "", "seed"], [739, 2, 1, "", "shuffle"]], "ivy.functional.ivy.searching": [[741, 2, 1, "", "argmax"], [742, 2, 1, "", "argmin"], [743, 2, 1, "", "nonzero"], [744, 2, 1, "", "where"]], "ivy.functional.ivy.set": [[746, 2, 1, "", "unique_all"], [747, 2, 1, "", "unique_counts"], [748, 2, 1, "", "unique_inverse"], [749, 2, 1, "", "unique_values"]], "ivy.functional.ivy.sorting": [[751, 2, 1, "", "argsort"], [752, 2, 1, "", "sort"]], "ivy.functional.ivy.statistical": [[754, 2, 1, "", "einsum"], [755, 2, 1, "", "max"], [756, 2, 1, "", "mean"], [757, 2, 1, "", "min"], [758, 2, 1, "", "prod"], [759, 2, 1, "", "std"], [760, 2, 1, "", "sum"], [761, 2, 1, "", "var"]], "ivy.functional.ivy.utility": [[765, 2, 1, "", "all"], [766, 2, 1, "", "any"]], "ivy.inspection": [[771, 2, 1, "", "add_array_specs"], [772, 2, 1, "", "fn_array_spec"]], "ivy.stateful": [[774, 0, 0, "-", "activations"], [777, 0, 0, "-", "converters"], [779, 0, 0, "-", "initializers"], [788, 0, 0, "-", "layers"], [800, 0, 0, "-", "module"], [802, 0, 0, "-", "norms"], [804, 0, 0, "-", "optimizers"], [810, 0, 0, "-", "sequential"]], "ivy.stateful.activations": [[775, 1, 1, "", "GEGLU"], [776, 1, 1, "", "GELU"]], "ivy.stateful.activations.GEGLU": [[775, 3, 1, "", "__init__"]], "ivy.stateful.activations.GELU": [[776, 3, 1, "", "__init__"]], "ivy.stateful.converters": [[778, 2, 1, "", "to_ivy_module"]], "ivy.stateful.initializers": [[779, 1, 1, "", "Constant"], [781, 1, 1, "", "FirstLayerSiren"], [782, 1, 1, "", "GlorotUniform"], [779, 1, 1, "", "KaimingNormal"], [784, 1, 1, "", "Ones"], [785, 1, 1, "", "Siren"], [779, 1, 1, "", "Uniform"], [787, 1, 1, "", "Zeros"]], "ivy.stateful.initializers.Constant": [[779, 3, 1, "", "__init__"], [779, 3, 1, "", "create_variables"]], "ivy.stateful.initializers.FirstLayerSiren": [[781, 3, 1, "", "__init__"]], "ivy.stateful.initializers.GlorotUniform": [[782, 3, 1, "", "__init__"]], "ivy.stateful.initializers.KaimingNormal": [[779, 3, 1, "", "__init__"], [779, 3, 1, "", "create_variables"]], "ivy.stateful.initializers.Ones": [[784, 3, 1, "", "__init__"]], "ivy.stateful.initializers.Siren": [[785, 3, 1, "", "__init__"]], "ivy.stateful.initializers.Uniform": [[779, 3, 1, "", "__init__"], [779, 3, 1, "", "create_variables"]], "ivy.stateful.initializers.Zeros": [[787, 3, 1, "", "__init__"]], "ivy.stateful.layers": [[789, 1, 1, "", "Conv1D"], [790, 1, 1, "", "Conv1DTranspose"], [791, 1, 1, "", "Conv2D"], [792, 1, 1, "", "Conv2DTranspose"], [793, 1, 1, "", "Conv3D"], [794, 1, 1, "", "Conv3DTranspose"], [795, 1, 1, "", "DepthwiseConv2D"], [796, 1, 1, "", "Dropout"], [797, 1, 1, "", "LSTM"], [798, 1, 1, "", "Linear"], [799, 1, 1, "", "MultiHeadAttention"]], "ivy.stateful.layers.Conv1D": [[789, 3, 1, "", "__init__"]], "ivy.stateful.layers.Conv1DTranspose": [[790, 3, 1, "", "__init__"]], "ivy.stateful.layers.Conv2D": [[791, 3, 1, "", "__init__"]], "ivy.stateful.layers.Conv2DTranspose": [[792, 3, 1, "", "__init__"]], "ivy.stateful.layers.Conv3D": [[793, 3, 1, "", "__init__"]], "ivy.stateful.layers.Conv3DTranspose": [[794, 3, 1, "", "__init__"]], "ivy.stateful.layers.DepthwiseConv2D": [[795, 3, 1, "", "__init__"]], "ivy.stateful.layers.Dropout": [[796, 3, 1, "", "__init__"]], "ivy.stateful.layers.LSTM": [[797, 3, 1, "", "__init__"], [797, 3, 1, "", "get_initial_state"]], "ivy.stateful.layers.Linear": [[798, 3, 1, "", "__init__"]], "ivy.stateful.layers.MultiHeadAttention": [[799, 3, 1, "", "__init__"]], "ivy.stateful.module": [[801, 1, 1, "", "Module"]], "ivy.stateful.module.Module": [[801, 3, 1, "", "__init__"], [801, 3, 1, "", "build"], [801, 4, 1, "", "build_mode"], [801, 4, 1, "", "built"], [801, 3, 1, "", "check_submod_rets"], [801, 3, 1, "", "get_mod_key"], [801, 3, 1, "", "mod_depth"], [801, 3, 1, "", "mod_height"], [801, 3, 1, "", "mod_with_top_mod_key_chain"], [801, 3, 1, "", "save_weights"], [801, 3, 1, "", "show_mod_in_top_mod"], [801, 3, 1, "", "show_structure"], [801, 3, 1, "", "show_v_in_top_v"], [801, 3, 1, "", "sub_mods"], [801, 3, 1, "", "track_submod_call_order"], [801, 3, 1, "", "track_submod_rets"], [801, 3, 1, "", "v_with_top_v_key_chains"]], "ivy.stateful.norms": [[803, 1, 1, "", "LayerNorm"]], "ivy.stateful.norms.LayerNorm": [[803, 3, 1, "", "__init__"]], "ivy.stateful.optimizers": [[805, 1, 1, "", "Adam"], [806, 1, 1, "", "LAMB"], [807, 1, 1, "", "LARS"], [808, 1, 1, "", "Optimizer"], [809, 1, 1, "", "SGD"]], "ivy.stateful.optimizers.Adam": [[805, 3, 1, "", "__init__"], [805, 3, 1, "", "set_state"], [805, 4, 1, "", "state"]], "ivy.stateful.optimizers.LAMB": [[806, 3, 1, "", "__init__"], [806, 3, 1, "", "set_state"], [806, 4, 1, "", "state"]], "ivy.stateful.optimizers.LARS": [[807, 3, 1, "", "__init__"], [807, 3, 1, "", "set_state"], [807, 4, 1, "", "state"]], "ivy.stateful.optimizers.Optimizer": [[808, 3, 1, "", "__init__"], [808, 3, 1, "", "set_state"], [808, 3, 1, "", "step"]], "ivy.stateful.optimizers.SGD": [[809, 3, 1, "", "__init__"], [809, 3, 1, "", "set_state"], [809, 4, 1, "", "state"]], "ivy.stateful.sequential": [[811, 1, 1, "", "Sequential"]], "ivy.stateful.sequential.Sequential": [[811, 3, 1, "", "__init__"]], "ivy.verbosity": [[814, 2, 1, "", "cprint"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:function", "3": "py:method", "4": "py:property", "5": "py:data"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "function", "Python function"], "3": ["py", "method", "Python method"], "4": ["py", "property", "Python property"], "5": ["py", "data", "Python data"]}, "titleterms": {"activ": [0, 153, 368, 774], "arraywithactiv": 1, "arrai": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 151, 328, 333, 338, 342, 487, 496, 499, 503, 511, 526, 531, 537, 551, 557, 684, 692, 700, 764], "method": [2, 160, 334, 342, 343], "ab": [3, 161, 482], "aco": [4, 162, 483], "acosh": [5, 163, 484], "add": [6, 165, 327, 485], "all": [7, 166, 763, 764, 765], "all_equ": [8, 167, 564], "ani": [9, 168, 766], "argsort": [10, 169, 751], "asin": [11, 170, 486, 487, 488], "asinh": [12, 171, 489], "atan": [13, 174, 490], "atan2": [14, 175, 491], "atanh": [15, 176, 492], "binary_cross_entropi": [16, 177, 682], "bitwise_and": [17, 178, 493], "bitwise_invert": [18, 179, 494], "bitwise_left_shift": [19, 180, 495, 496, 497], "bitwise_or": [20, 181, 498, 499, 500], "bitwise_right_shift": [21, 182, 501], "bitwise_xor": [22, 183, 502, 503, 504], "can_cast": [23, 184, 407], "ceil": [24, 185, 505], "clip": [25, 186, 688, 689], "concat": [26, 188, 691, 692, 693], "constant_pad": [27, 189, 694], "co": [28, 190, 506], "cosh": [29, 191, 507], "cross_entropi": [30, 192, 683, 684, 685], "divid": [31, 193, 508], "einsum": [32, 194, 754], "equal": [33, 195, 509], "erf": [34, 196, 510, 511, 512, 513], "exp": [35, 197, 514], "expand_dim": [36, 198, 695], "expm1": [37, 199, 515], "flip": [38, 200, 696], "floor": [39, 201, 516], "floor_divid": [40, 202, 517], "greater": [41, 204, 518], "greater_equ": [42, 205, 519], "isfinit": [43, 206, 520], "isinf": [44, 207, 521], "isnan": [45, 208, 522], "layer_norm": [46, 211, 732], "less": [47, 212, 523], "less_equ": [48, 213, 524], "log": [49, 214, 525, 526, 527], "log10": [50, 215, 528], "log1p": [51, 216, 529], "log2": [52, 217, 530, 531, 532], "logaddexp": [53, 218, 533], "logical_and": [54, 219, 534], "logical_not": [55, 220, 535], "logical_or": [56, 221, 536, 537, 538], "logical_xor": [57, 222, 539], "matmul": [58, 223, 664], "max": [59, 224, 755], "mean": [60, 225, 756], "min": [61, 226, 757], "multipli": [62, 227, 542], "neg": [63, 228, 543], "not_equ": [64, 229, 544], "permute_dim": [65, 231, 697], "posit": [66, 232, 545], "pow": [67, 233, 546], "prod": [68, 234, 758], "remaind": [69, 236, 547], "repeat": [70, 237, 698], "reshap": [71, 238, 699, 700, 701], "roll": [72, 239, 327, 702], "round": [73, 240, 548], "sign": [74, 241, 549], "sin": [75, 242, 550, 551, 552, 553], "sinh": [76, 243, 554], "sort": [77, 128, 244, 311, 750, 752], "sparse_cross_entropi": [78, 245, 686], "sqrt": [79, 246, 555], "squar": [80, 247, 556, 557, 558], "squeez": [81, 248, 704], "stack": [82, 249, 705], "std": [83, 271, 759], "subtract": [84, 272, 559], "sum": [85, 273, 760], "swapax": [86, 274, 706], "tan": [87, 275, 327, 560], "tanh": [88, 276, 375, 561], "tile": [89, 277, 707], "trunc": [90, 278, 562], "var": [91, 279, 761], "zero_pad": [92, 280, 708], "convers": 93, "args_to_ivi": 94, "args_to_n": 95, "to_ivi": 96, "to_n": 97, "creation": [98, 281, 379], "arraywithcr": 99, "data": [100, 283, 329, 335, 343, 357, 398, 745, 746, 747, 749], "type": [100, 283, 330, 335, 357, 398], "arraywithdatatyp": 101, "devic": [102, 285, 336, 338, 431], "arraywithdevic": 103, "elementwis": [104, 287, 481], "arraywithelementwis": 105, "gener": [106, 289, 329, 563], "arraywithgener": 107, "gradient": [108, 291, 627], "arraywithgradi": 109, "imag": [110, 293], "arraywithimag": 111, "layer": [112, 295, 643, 788], "arraywithlay": 113, "linear": [114, 297, 652, 656, 798], "algebra": [114, 297, 656], "arraywithlinearalgebra": 115, "loss": [116, 299, 681], "arraywithloss": 117, "manipul": [118, 301, 687], "arraywithmanipul": 119, "norm": [120, 303, 731, 802], "arraywithnorm": 121, "random": [122, 305, 733], "arraywithrandom": 123, "search": [124, 307, 740], "arraywithsearch": 125, "set": [126, 309, 320, 331, 745], "arraywithset": 127, "arraywithsort": 129, "statist": [130, 313, 753], "arraywithstatist": 131, "util": [132, 315, 762], "arraywithutil": 133, "wrap": [134, 317, 332], "add_ivy_array_instance_method": 135, "backend": [136, 325, 331, 340, 357], "handler": [136, 340], "choose_random_backend": 138, "clear_backend_stack": 139, "current_backend": 140, "get_backend": 141, "set_backend": 142, "try_import_ivy_jax": 143, "try_import_ivy_mxnet": 144, "try_import_ivy_numpi": 145, "try_import_ivy_tf": 146, "try_import_ivy_torch": 147, "unset_backend": 148, "background": [149, 767], "ml": 150, "explos": 150, "standard": 151, "skeptic": 151, "complimentari": 151, "vs": [151, 357], "competit": 151, "do": 151, "work": [151, 323], "The": [151, 321, 342, 357], "api": [151, 322, 325, 328, 334, 340, 342, 344, 345], "why": 152, "unifi": [152, 342], "No": [152, 320], "more": 152, "re": 152, "implement": 152, "infinit": 152, "shelf": 152, "life": 152, "containerwithactiv": 154, "base": 155, "containerbas": 156, "contain": [157, 158, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 334, 343, 512, 552, 690], "multidevcontain": 159, "adam_upd": [164, 630], "at_dev": [172, 173], "clip_vector_norm": [187, 572], "gradient_descent_upd": [203, 632], "lamb_upd": [209, 634], "lars_upd": [210, 635], "optimizer_upd": [230, 636], "random_uniform": [235, 737], "static_adam_upd": 250, "static_add": 251, "static_all_equ": 252, "static_argsort": 253, "static_binary_cross_entropi": 254, "static_can_cast": 255, "static_clip": [256, 690], "static_cross_entropi": 257, "static_divid": 258, "static_gradient_descent_upd": 259, "static_lamb_upd": 260, "static_lars_upd": 261, "static_multipli": 262, "static_optimizer_upd": 263, "static_randint": 264, "static_random_uniform": 265, "static_rol": 266, "static_sort": 267, "static_sparse_cross_entropi": 268, "static_subtract": 269, "static_tan": 270, "containerwithcr": 282, "containerwithdatatyp": 284, "containerwithdevic": 286, "containerwithelementwis": 288, "containerwithgener": 290, "containerwithgradi": 292, "containerwithimag": 294, "containerwithlay": 296, "containerwithlinearalgebra": 298, "containerwithloss": 300, "containerwithmanipul": 302, "containerwithnorm": 304, "containerwithrandom": 306, "containerwithsearch": 308, "containerwithset": 310, "containerwithsort": 312, "containerwithstatist": 314, "containerwithutil": 316, "add_ivy_container_instance_method": 318, "contribut": [319, 767], "up": 320, "clone": 320, "ivi": [320, 325, 327, 329, 333, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 356], "pycharm": 320, "virtual": 320, "environ": 320, "docker": [320, 321, 323], "us": [320, 323, 343], "miniconda": [320, 323], "venv": [320, 323], "interpret": 320, "window": 320, "maco": 320, "ubuntu": 320, "github": 320, "codespac": 320, "pre": 320, "commit": [320, 321], "basic": 321, "get": 321, "help": 321, "todo": 321, "list": 321, "issu": 321, "manag": 321, "your": 321, "fork": 321, "who": 321, "To": 321, "ask": 321, "With": 321, "command": 321, "line": 321, "browser": 321, "pull": 321, "request": 321, "small": 321, "often": 321, "run": 321, "test": [321, 328, 329], "local": 321, "open": 322, "task": 322, "function": [322, 330, 332, 334, 335, 336, 338, 340, 345, 357, 488, 497, 500, 504, 513, 527, 532, 538, 553, 558, 685, 689, 693, 701, 765], "format": 322, "frontend": [322, 345], "build": [323, 340], "doc": 323, "dockerless": 323, "document": 323, "pipelin": [323, 357], "make_doc": 323, "sh": 323, "entrypoint": 323, "_make_doc": 323, "generate_src_rst_fil": 323, "py": 323, "sphinx": 323, "correct_built_html_fil": 323, "remove_fil": 323, "deep": 324, "dive": 324, "navig": 325, "code": 325, "categor": 325, "submodul": 325, "design": [325, 339, 767], "docstr": [326, 327], "exampl": [327, 338], "hypothesi": 329, "self": 329, "consist": 329, "explicit": 329, "test_array_funct": 329, "primari": 330, "composit": 330, "mix": 330, "standalon": 330, "nestabl": [330, 334, 338], "conveni": 330, "nativ": 333, "handl": 333, "instanc": [334, 342], "static": 334, "special": 334, "modul": [335, 336, 344, 800, 801], "argument": [335, 336, 337, 338], "other": [335, 336], "inplac": 337, "updat": 337, "out": [337, 338], "copi": 337, "dtype": [338, 412], "number": 338, "oper": [338, 342, 357], "integ": 338, "sequenc": 338, "block": 340, "framework": [340, 341], "graph": [340, 345], "compil": [340, 345, 376, 377], "class": 342, "monkei": 342, "patch": 342, "construct": 343, "represent": 343, "recurs": 343, "built": 343, "ins": 343, "access": 343, "save": 343, "load": 343, "comparison": 343, "custom": [343, 357], "case": 343, "compartment": 343, "configur": 343, "network": [343, 345], "weight": 343, "state": [344, 357], "initi": [344, 779], "optim": [344, 804, 808], "transpil": 345, "role": 345, "convert": [345, 777], "model": [345, 352, 357], "builder": 347, "ecosystem": 348, "gym": [349, 356], "mech": 350, "memori": [351, 356], "robot": [353, 356], "vision": [354, 356], "extens": [355, 767], "appli": 356, "librari": 356, "mechan": 356, "faq": 357, "mana": 357, "version": 357, "dynam": 357, "size": 357, "shape": [357, 615, 745, 746, 747, 749], "check": 357, "control": 357, "flow": 357, "auto": 357, "differenti": 357, "replica": 357, "parallel": 357, "support": 357, "altern": 357, "structur": 357, "func": 358, "wrapper": 358, "handle_nest": 359, "handle_out_argu": 360, "infer_devic": 361, "infer_dtyp": 362, "inputs_to_ivy_arrai": 363, "inputs_to_native_arrai": 364, "outputs_to_ivy_arrai": 365, "to_native_arrays_and_back": 366, "gelu": [369, 776], "leaky_relu": 370, "relu": 371, "sigmoid": 372, "softmax": 373, "softplu": 374, "constant": 378, "note": [379, 385], "arang": 380, "asarrai": 381, "empti": 382, "empty_lik": 383, "ey": 384, "from_dlpack": 385, "full": 386, "full_lik": 387, "linspac": 388, "logspac": 389, "meshgrid": 390, "native_arrai": 391, "ones": 392, "ones_lik": 393, "tril": 394, "triu": 395, "zero": [396, 787], "zeros_lik": 397, "as_ivy_dtyp": 402, "as_native_dtyp": 403, "astyp": 404, "broadcast_arrai": 405, "broadcast_to": 406, "closest_valid_dtyp": 408, "default_dtyp": 409, "default_float_dtyp": 410, "default_int_dtyp": 411, "dtype_bit": 413, "finfo": 414, "function_supported_dtyp": 415, "function_unsupported_dtyp": 416, "iinfo": 417, "invalid_dtyp": 418, "is_float_dtyp": 419, "is_int_dtyp": 420, "promote_typ": 421, "result_typ": 422, "set_default_dtyp": 423, "set_default_float_dtyp": 424, "set_default_int_dtyp": 425, "type_promote_arrai": 426, "unset_default_dtyp": 427, "unset_default_float_dtyp": 428, "unset_default_int_dtyp": 429, "valid_dtyp": 430, "devcloneditem": 433, "devclonedit": 434, "devclonednest": 435, "devdistitem": 436, "devdistit": 437, "devdistnest": 438, "devmapp": 440, "devmappermultiproc": 441, "multidevitem": 443, "multidevit": 444, "multidevnest": 445, "profil": 446, "as_ivy_dev": 447, "as_native_dev": 448, "clear_mem_on_dev": 449, "default_devic": 450, "dev": 451, "dev_clon": 452, "dev_clone_arrai": 453, "dev_clone_it": 454, "dev_clone_nest": 455, "dev_dist": 456, "dev_dist_arrai": 457, "dev_dist_it": 458, "dev_dist_nest": 459, "dev_unifi": 460, "dev_unify_arrai": 461, "dev_unify_it": 462, "dev_unify_nest": 463, "dev_util": 464, "get_all_ivy_arrays_on_dev": 465, "gpu_is_avail": 466, "num_cpu_cor": 467, "num_gpu": 468, "num_ivy_arrays_on_dev": 469, "percent_used_mem_on_dev": 470, "print_all_ivy_arrays_on_dev": 471, "set_default_devic": 472, "set_split_factor": 473, "split_factor": 474, "split_func_cal": 475, "to_devic": 476, "total_mem_on_dev": 477, "tpu_is_avail": 478, "unset_default_devic": 479, "used_mem_on_dev": 480, "maximum": 540, "minimum": 541, "arg_info": 565, "arg_nam": 566, "array_equ": 567, "arrays_equ": 568, "assert_supports_inplac": 569, "cache_fn": 570, "clip_matrix_norm": 571, "container_typ": 573, "copy_arrai": 574, "cumprod": 575, "cumsum": 576, "current_backend_str": 577, "default": 578, "einops_rearrang": 579, "einops_reduc": 580, "einops_repeat": 581, "exist": 582, "floormod": 583, "fourier_encod": 584, "gather": 585, "gather_nd": 586, "get_all_arrays_in_memori": 587, "get_min_bas": 588, "get_min_denomin": 589, "get_num_dim": 590, "get_referrers_recurs": 591, "has_nan": 592, "indices_wher": 593, "inplace_arrays_support": 594, "inplace_decr": 595, "inplace_incr": 596, "inplace_upd": 597, "inplace_variables_support": 598, "is_arrai": 599, "is_ivy_arrai": 600, "is_ivy_contain": 601, "is_native_arrai": 602, "match_kwarg": 603, "multiprocess": 604, "num_arrays_in_memori": 605, "one_hot": 606, "print_all_arrays_in_memori": 607, "queue_timeout": 608, "scatter_flat": 609, "scatter_nd": 610, "set_min_bas": 611, "set_min_denomin": 612, "set_queue_timeout": 613, "set_tmp_dir": 614, "shape_to_tupl": 616, "stable_divid": 617, "stable_pow": 618, "supports_inplac": 619, "tmp_dir": 620, "to_list": 621, "to_numpi": 622, "to_scalar": 623, "try_else_non": 624, "unstack": 625, "value_is_nan": 626, "adam_step": 629, "execute_with_gradi": 631, "is_vari": 633, "set_with_grad": 637, "stop_gradi": 638, "unset_with_grad": 639, "variabl": 640, "variable_data": 641, "with_grad": 642, "conv1d": [644, 789], "conv1d_transpos": 645, "conv2d": [646, 791], "conv2d_transpos": 647, "conv3d": [648, 793], "conv3d_transpos": 649, "depthwise_conv2d": 650, "dropout": [651, 796], "lstm_updat": 653, "multi_head_attent": 654, "scaled_dot_product_attent": 655, "choleski": 657, "cross": 658, "det": 659, "diagon": 660, "eigh": 661, "eigvalsh": 662, "inv": 663, "matrix_norm": 665, "matrix_pow": 666, "matrix_rank": 667, "matrix_transpos": 668, "outer": 669, "pinv": 670, "qr": 671, "slogdet": 672, "solv": 673, "svd": 674, "svdval": 675, "tensordot": 676, "trace": 677, "vecdot": 678, "vector_norm": 679, "vector_to_skew_symmetric_matrix": 680, "split": 703, "meta": 709, "fomaml_step": 710, "maml_step": 711, "reptile_step": 712, "nest": 713, "all_nested_indic": 714, "copy_nest": 715, "index_nest": 716, "insert_into_nest_at_index": 717, "insert_into_nest_at_indic": 718, "map": 719, "map_nest_at_index": 720, "map_nest_at_indic": 721, "multi_index_nest": 722, "nested_ani": 723, "nested_indices_wher": 724, "nested_map": 725, "nested_multi_map": 726, "prune_nest_at_index": 727, "prune_nest_at_indic": 728, "set_nest_at_index": 729, "set_nest_at_indic": 730, "multinomi": 734, "randint": 735, "random_norm": 736, "seed": 738, "shuffl": 739, "argmax": 741, "argmin": 742, "nonzero": 743, "where": 744, "depend": [745, 746, 747, 749], "output": [745, 746, 747, 749], "unique_al": 746, "unique_count": 747, "unique_invers": 748, "unique_valu": 749, "content": 767, "overview": 767, "quick": 767, "start": 767, "roadmap": [767, 773], "citat": 767, "inspect": 770, "add_array_spec": 771, "fn_array_spec": 772, "geglu": 775, "to_ivy_modul": 778, "firstlayersiren": 781, "glorotuniform": 782, "Ones": 784, "siren": 785, "conv1dtranspos": 790, "conv2dtranspos": 792, "conv3dtranspos": 794, "depthwiseconv2d": 795, "lstm": 797, "multiheadattent": 799, "layernorm": 803, "adam": 805, "lamb": 806, "lar": 807, "sgd": 809, "sequenti": [810, 811], "verbos": 813, "cprint": 814}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 6, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.viewcode": 1, "sphinx": 56}})