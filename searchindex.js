Search.setIndex({"docnames": ["backend_handler", "backend_handler/ContextManager:\n    def __init__", "backend_handler/choose_random_backend", "backend_handler/clear_backend_stack", "backend_handler/current_backend", "backend_handler/get_backend", "backend_handler/set_backend", "backend_handler/try_import_ivy_jax", "backend_handler/try_import_ivy_mxnet", "backend_handler/try_import_ivy_numpy", "backend_handler/try_import_ivy_tf", "backend_handler/try_import_ivy_torch", "backend_handler/unset_backend", "background", "background/ml_explosion", "background/standardization", "background/why_unify", "classes/data_classes", "classes/data_classes/array", "classes/data_classes/array/activations", "classes/data_classes/array/activations/ArrayWithActivations", "classes/data_classes/array/conversions", "classes/data_classes/array/conversions/args_to_ivy", "classes/data_classes/array/conversions/args_to_native", "classes/data_classes/array/conversions/to_ivy", "classes/data_classes/array/conversions/to_native", "classes/data_classes/array/creation", "classes/data_classes/array/creation/ArrayWithCreation", "classes/data_classes/array/data_type", "classes/data_classes/array/data_type/ArrayWithDataTypes", "classes/data_classes/array/device", "classes/data_classes/array/device/ArrayWithDevice", "classes/data_classes/array/elementwise", "classes/data_classes/array/elementwise/ArrayWithElementwise", "classes/data_classes/array/general", "classes/data_classes/array/general/ArrayWithGeneral", "classes/data_classes/array/gradients", "classes/data_classes/array/gradients/ArrayWithGradients", "classes/data_classes/array/image", "classes/data_classes/array/image/ArrayWithImage", "classes/data_classes/array/layers", "classes/data_classes/array/layers/ArrayWithLayers", "classes/data_classes/array/linear_algebra", "classes/data_classes/array/linear_algebra/ArrayWithLinearAlgebra", "classes/data_classes/array/losses", "classes/data_classes/array/losses/ArrayWithLosses", "classes/data_classes/array/manipulation", "classes/data_classes/array/manipulation/ArrayWithManipulation", "classes/data_classes/array/norms", "classes/data_classes/array/norms/ArrayWithNorms", "classes/data_classes/array/random", "classes/data_classes/array/random/ArrayWithRandom", "classes/data_classes/array/searching", "classes/data_classes/array/searching/ArrayWithSearching", "classes/data_classes/array/set", "classes/data_classes/array/set/ArrayWithSet", "classes/data_classes/array/sorting", "classes/data_classes/array/sorting/ArrayWithSorting", "classes/data_classes/array/statistical", "classes/data_classes/array/statistical/ArrayWithStatistical", "classes/data_classes/array/utility", "classes/data_classes/array/utility/ArrayWithUtility", "classes/data_classes/array/wrapping", "classes/data_classes/array/wrapping/add_ivy_array_instance_methods", "classes/data_classes/container", "classes/data_classes/container/activations", "classes/data_classes/container/activations/ContainerWithActivations", "classes/data_classes/container/base", "classes/data_classes/container/base/ContainerBase", "classes/data_classes/container/container", "classes/data_classes/container/container/Container", "classes/data_classes/container/container/MultiDevContainer", "classes/data_classes/container/creation", "classes/data_classes/container/creation/ContainerWithCreation", "classes/data_classes/container/data_type", "classes/data_classes/container/data_type/ContainerWithDataTypes", "classes/data_classes/container/device", "classes/data_classes/container/device/ContainerWithDevice", "classes/data_classes/container/elementwise", "classes/data_classes/container/elementwise/ContainerWithElementwise", "classes/data_classes/container/general", "classes/data_classes/container/general/ContainerWithGeneral", "classes/data_classes/container/gradients", "classes/data_classes/container/gradients/ContainerWithGradients", "classes/data_classes/container/image", "classes/data_classes/container/image/ContainerWithImage", "classes/data_classes/container/layers", "classes/data_classes/container/layers/ContainerWithLayers", "classes/data_classes/container/linear_algebra", "classes/data_classes/container/linear_algebra/ContainerWithLinearAlgebra", "classes/data_classes/container/losses", "classes/data_classes/container/losses/ContainerWithLosses", "classes/data_classes/container/manipulation", "classes/data_classes/container/manipulation/ContainerWithManipulation", "classes/data_classes/container/norms", "classes/data_classes/container/norms/ContainerWithNorms", "classes/data_classes/container/random", "classes/data_classes/container/random/ContainerWithRandom", "classes/data_classes/container/searching", "classes/data_classes/container/searching/ContainerWithSearching", "classes/data_classes/container/set", "classes/data_classes/container/set/ContainerWithSet", "classes/data_classes/container/sorting", "classes/data_classes/container/sorting/ContainerWithSorting", "classes/data_classes/container/statistical", "classes/data_classes/container/statistical/ContainerWithStatistical", "classes/data_classes/container/utility", "classes/data_classes/container/utility/ContainerWithUtility", "classes/data_classes/container/wrapping", "classes/data_classes/container/wrapping/add_ivy_container_instance_methods", "classes/stateful", "classes/stateful/activations", "classes/stateful/activations/GEGLU", "classes/stateful/activations/GELU", "classes/stateful/converters", "classes/stateful/converters/to_ivy_module", "classes/stateful/initializers", "classes/stateful/initializers/Constant:\n    def __init__", "classes/stateful/initializers/FirstLayerSiren", "classes/stateful/initializers/GlorotUniform", "classes/stateful/initializers/KaimingNormal:\n    def __init__", "classes/stateful/initializers/Ones", "classes/stateful/initializers/Siren", "classes/stateful/initializers/Uniform:\n    def __init__", "classes/stateful/initializers/Zeros", "classes/stateful/layers", "classes/stateful/layers/Conv1D", "classes/stateful/layers/Conv1DTranspose", "classes/stateful/layers/Conv2D", "classes/stateful/layers/Conv2DTranspose", "classes/stateful/layers/Conv3D", "classes/stateful/layers/Conv3DTranspose", "classes/stateful/layers/DepthwiseConv2D", "classes/stateful/layers/Dropout", "classes/stateful/layers/LSTM", "classes/stateful/layers/Linear", "classes/stateful/layers/MultiHeadAttention", "classes/stateful/module", "classes/stateful/module/Module", "classes/stateful/norms", "classes/stateful/norms/LayerNorm", "classes/stateful/optimizers", "classes/stateful/optimizers/Adam", "classes/stateful/optimizers/LAMB", "classes/stateful/optimizers/LARS", "classes/stateful/optimizers/Optimizer", "classes/stateful/optimizers/SGD", "classes/stateful/sequential", "classes/stateful/sequential/Sequential", "contributing", "contributing/0_setting_up", "contributing/1_the_basics", "contributing/4_open_tasks", "contributing/building_the_docs", "deep_dive", "deep_dive/0_navigating_the_code", "deep_dive/10_docstrings", "deep_dive/11_docstring_examples", "deep_dive/12_array_api_tests", "deep_dive/13_ivy_tests", "deep_dive/1_function_types", "deep_dive/2_backend_setting", "deep_dive/3_function_wrapping", "deep_dive/4_arrays", "deep_dive/5_containers", "deep_dive/6_data_types", "deep_dive/7_devices", "deep_dive/8_inplace_updates", "deep_dive/9_function_arguments", "design", "design/building_blocks", "design/ivy_as_a_framework", "design/ivy_as_a_framework/ivy_array", "design/ivy_as_a_framework/ivy_container", "design/ivy_as_a_framework/ivy_stateful_api", "design/ivy_as_a_transpiler", "docs/ivy", "docs/ivy_builder", "docs/ivy_ecosystem", "docs/ivy_gym", "docs/ivy_mech", "docs/ivy_memory", "docs/ivy_models", "docs/ivy_robot", "docs/ivy_vision", "extensions", "extensions/applied_libraries", "faq", "func_wrapper", "func_wrapper/handle_nestable", "func_wrapper/handle_out_argument", "func_wrapper/infer_device", "func_wrapper/infer_dtype", "func_wrapper/inputs_to_ivy_arrays", "func_wrapper/inputs_to_native_arrays", "func_wrapper/outputs_to_ivy_arrays", "func_wrapper/to_native_arrays_and_back", "functional/ivy", "functional/ivy/activations", "functional/ivy/activations/gelu", "functional/ivy/activations/leaky_relu", "functional/ivy/activations/relu", "functional/ivy/activations/sigmoid", "functional/ivy/activations/softmax", "functional/ivy/activations/softplus", "functional/ivy/activations/softplus/softplus_array", "functional/ivy/activations/softplus/softplus_container", "functional/ivy/activations/softplus/softplus_functional", "functional/ivy/activations/softplus/static_softplus_container", "functional/ivy/activations/tanh", "functional/ivy/compilation", "functional/ivy/compilation/compile", "functional/ivy/constants", "functional/ivy/creation", "functional/ivy/creation/arange", "functional/ivy/creation/asarray", "functional/ivy/creation/asarray/asarray_array", "functional/ivy/creation/asarray/asarray_functional", "functional/ivy/creation/empty", "functional/ivy/creation/empty_like", "functional/ivy/creation/empty_like/empty_like_array", "functional/ivy/creation/empty_like/empty_like_functional", "functional/ivy/creation/eye", "functional/ivy/creation/from_dlpack", "functional/ivy/creation/from_dlpack/from_dlpack_array", "functional/ivy/creation/from_dlpack/from_dlpack_functional", "functional/ivy/creation/full", "functional/ivy/creation/full_like", "functional/ivy/creation/full_like/full_like_array", "functional/ivy/creation/full_like/full_like_functional", "functional/ivy/creation/linspace", "functional/ivy/creation/logspace", "functional/ivy/creation/meshgrid", "functional/ivy/creation/meshgrid/meshgrid_array", "functional/ivy/creation/meshgrid/meshgrid_functional", "functional/ivy/creation/native_array", "functional/ivy/creation/native_array/native_array_array", "functional/ivy/creation/native_array/native_array_functional", "functional/ivy/creation/ones", "functional/ivy/creation/ones_like", "functional/ivy/creation/ones_like/ones_like_array", "functional/ivy/creation/ones_like/ones_like_functional", "functional/ivy/creation/tril", "functional/ivy/creation/tril/tril_array", "functional/ivy/creation/tril/tril_functional", "functional/ivy/creation/triu", "functional/ivy/creation/triu/triu_array", "functional/ivy/creation/triu/triu_functional", "functional/ivy/creation/zeros", "functional/ivy/creation/zeros_like", "functional/ivy/creation/zeros_like/zeros_like_array", "functional/ivy/creation/zeros_like/zeros_like_functional", "functional/ivy/data_type", "functional/ivy/data_type/DefaultDtype:\n    \"\"\"\"\"\"\n\n    # noinspection PyShadowingNames\n    def __init__", "functional/ivy/data_type/DefaultFloatDtype:\n    \"\"\"\"\"\"\n\n    # noinspection PyShadowingNames\n    def __init__", "functional/ivy/data_type/DefaultIntDtype:\n    \"\"\"\"\"\"\n\n    # noinspection PyShadowingNames\n    def __init__", "functional/ivy/data_type/as_ivy_dtype", "functional/ivy/data_type/as_native_dtype", "functional/ivy/data_type/astype", "functional/ivy/data_type/broadcast_arrays", "functional/ivy/data_type/broadcast_to", "functional/ivy/data_type/can_cast", "functional/ivy/data_type/can_cast/can_cast_array", "functional/ivy/data_type/can_cast/can_cast_container", "functional/ivy/data_type/can_cast/can_cast_functional", "functional/ivy/data_type/can_cast/static_can_cast_container", "functional/ivy/data_type/closest_valid_dtype", "functional/ivy/data_type/default_dtype", "functional/ivy/data_type/default_float_dtype", "functional/ivy/data_type/default_int_dtype", "functional/ivy/data_type/dtype", "functional/ivy/data_type/dtype_bits", "functional/ivy/data_type/finfo", "functional/ivy/data_type/function_supported_dtypes", "functional/ivy/data_type/function_unsupported_dtypes", "functional/ivy/data_type/iinfo", "functional/ivy/data_type/invalid_dtype", "functional/ivy/data_type/is_float_dtype", "functional/ivy/data_type/is_int_dtype", "functional/ivy/data_type/promote_types", "functional/ivy/data_type/result_type", "functional/ivy/data_type/set_default_dtype", "functional/ivy/data_type/set_default_float_dtype", "functional/ivy/data_type/set_default_int_dtype", "functional/ivy/data_type/type_promote_arrays", "functional/ivy/data_type/unset_default_dtype", "functional/ivy/data_type/unset_default_float_dtype", "functional/ivy/data_type/unset_default_int_dtype", "functional/ivy/data_type/valid_dtype", "functional/ivy/device", "functional/ivy/device/DefaultDevice:\n    \"\"\"\"\"\"\n\n    # noinspection PyShadowingNames\n    def __init__", "functional/ivy/device/DevClonedItem", "functional/ivy/device/DevClonedIter", "functional/ivy/device/DevClonedNest", "functional/ivy/device/DevDistItem", "functional/ivy/device/DevDistIter", "functional/ivy/device/DevDistNest", "functional/ivy/device/DevManager:\n    \"\"\"\"\"\"\n\n    def __init__", "functional/ivy/device/DevMapper", "functional/ivy/device/DevMapperMultiProc", "functional/ivy/device/MultiDev:\n    def __init__", "functional/ivy/device/MultiDevItem", "functional/ivy/device/MultiDevIter", "functional/ivy/device/MultiDevNest", "functional/ivy/device/Profiler", "functional/ivy/device/as_ivy_dev", "functional/ivy/device/as_native_dev", "functional/ivy/device/clear_mem_on_dev", "functional/ivy/device/default_device", "functional/ivy/device/dev", "functional/ivy/device/dev_clone", "functional/ivy/device/dev_clone_array", "functional/ivy/device/dev_clone_iter", "functional/ivy/device/dev_clone_nest", "functional/ivy/device/dev_dist", "functional/ivy/device/dev_dist_array", "functional/ivy/device/dev_dist_iter", "functional/ivy/device/dev_dist_nest", "functional/ivy/device/dev_unify", "functional/ivy/device/dev_unify_array", "functional/ivy/device/dev_unify_iter", "functional/ivy/device/dev_unify_nest", "functional/ivy/device/dev_util", "functional/ivy/device/get_all_ivy_arrays_on_dev", "functional/ivy/device/gpu_is_available", "functional/ivy/device/num_cpu_cores", "functional/ivy/device/num_gpus", "functional/ivy/device/num_ivy_arrays_on_dev", "functional/ivy/device/percent_used_mem_on_dev", "functional/ivy/device/print_all_ivy_arrays_on_dev", "functional/ivy/device/set_default_device", "functional/ivy/device/set_split_factor", "functional/ivy/device/split_factor", "functional/ivy/device/split_func_call", "functional/ivy/device/to_device", "functional/ivy/device/total_mem_on_dev", "functional/ivy/device/tpu_is_available", "functional/ivy/device/unset_default_device", "functional/ivy/device/used_mem_on_dev", "functional/ivy/elementwise", "functional/ivy/elementwise/abs", "functional/ivy/elementwise/abs/abs_array", "functional/ivy/elementwise/abs/abs_container", "functional/ivy/elementwise/abs/abs_functional", "functional/ivy/elementwise/abs/static_abs_container", "functional/ivy/elementwise/acos", "functional/ivy/elementwise/acos/acos_array", "functional/ivy/elementwise/acos/acos_container", "functional/ivy/elementwise/acos/acos_functional", "functional/ivy/elementwise/acosh", "functional/ivy/elementwise/acosh/acosh_array", "functional/ivy/elementwise/acosh/acosh_container", "functional/ivy/elementwise/acosh/acosh_functional", "functional/ivy/elementwise/add", "functional/ivy/elementwise/add/add_array", "functional/ivy/elementwise/add/add_container", "functional/ivy/elementwise/add/add_functional", "functional/ivy/elementwise/add/static_add_container", "functional/ivy/elementwise/asin", "functional/ivy/elementwise/asin/asin_array", "functional/ivy/elementwise/asin/asin_container", "functional/ivy/elementwise/asin/asin_functional", "functional/ivy/elementwise/asinh", "functional/ivy/elementwise/asinh/asinh_array", "functional/ivy/elementwise/asinh/asinh_container", "functional/ivy/elementwise/asinh/asinh_functional", "functional/ivy/elementwise/atan", "functional/ivy/elementwise/atan/atan_array", "functional/ivy/elementwise/atan/atan_container", "functional/ivy/elementwise/atan/atan_functional", "functional/ivy/elementwise/atan2", "functional/ivy/elementwise/atan2/atan2_array", "functional/ivy/elementwise/atan2/atan2_container", "functional/ivy/elementwise/atan2/atan2_functional", "functional/ivy/elementwise/atanh", "functional/ivy/elementwise/atanh/atanh_array", "functional/ivy/elementwise/atanh/atanh_container", "functional/ivy/elementwise/atanh/atanh_functional", "functional/ivy/elementwise/bitwise_and", "functional/ivy/elementwise/bitwise_and/bitwise_and_array", "functional/ivy/elementwise/bitwise_and/bitwise_and_container", "functional/ivy/elementwise/bitwise_and/bitwise_and_functional", "functional/ivy/elementwise/bitwise_invert", "functional/ivy/elementwise/bitwise_invert/bitwise_invert_array", "functional/ivy/elementwise/bitwise_invert/bitwise_invert_container", "functional/ivy/elementwise/bitwise_invert/bitwise_invert_functional", "functional/ivy/elementwise/bitwise_left_shift", "functional/ivy/elementwise/bitwise_left_shift/bitwise_left_shift_array", "functional/ivy/elementwise/bitwise_left_shift/bitwise_left_shift_container", "functional/ivy/elementwise/bitwise_left_shift/bitwise_left_shift_functional", "functional/ivy/elementwise/bitwise_or", "functional/ivy/elementwise/bitwise_or/bitwise_or_array", "functional/ivy/elementwise/bitwise_or/bitwise_or_container", "functional/ivy/elementwise/bitwise_or/bitwise_or_functional", "functional/ivy/elementwise/bitwise_right_shift", "functional/ivy/elementwise/bitwise_right_shift/bitwise_right_shift_array", "functional/ivy/elementwise/bitwise_right_shift/bitwise_right_shift_container", "functional/ivy/elementwise/bitwise_right_shift/bitwise_right_shift_functional", "functional/ivy/elementwise/bitwise_xor", "functional/ivy/elementwise/bitwise_xor/bitwise_xor_array", "functional/ivy/elementwise/bitwise_xor/bitwise_xor_container", "functional/ivy/elementwise/bitwise_xor/bitwise_xor_functional", "functional/ivy/elementwise/ceil", "functional/ivy/elementwise/ceil/ceil_array", "functional/ivy/elementwise/ceil/ceil_container", "functional/ivy/elementwise/ceil/ceil_functional", "functional/ivy/elementwise/cos", "functional/ivy/elementwise/cos/cos_array", "functional/ivy/elementwise/cos/cos_container", "functional/ivy/elementwise/cos/cos_functional", "functional/ivy/elementwise/cosh", "functional/ivy/elementwise/cosh/cosh_array", "functional/ivy/elementwise/cosh/cosh_container", "functional/ivy/elementwise/cosh/cosh_functional", "functional/ivy/elementwise/divide", "functional/ivy/elementwise/divide/divide_array", "functional/ivy/elementwise/divide/divide_container", "functional/ivy/elementwise/divide/divide_functional", "functional/ivy/elementwise/divide/static_divide_container", "functional/ivy/elementwise/equal", "functional/ivy/elementwise/equal/equal_array", "functional/ivy/elementwise/equal/equal_container", "functional/ivy/elementwise/equal/equal_functional", "functional/ivy/elementwise/erf", "functional/ivy/elementwise/erf/erf_array", "functional/ivy/elementwise/erf/erf_container", "functional/ivy/elementwise/erf/erf_functional", "functional/ivy/elementwise/exp", "functional/ivy/elementwise/exp/exp_array", "functional/ivy/elementwise/exp/exp_container", "functional/ivy/elementwise/exp/exp_functional", "functional/ivy/elementwise/expm1", "functional/ivy/elementwise/expm1/expm1_array", "functional/ivy/elementwise/expm1/expm1_container", "functional/ivy/elementwise/expm1/expm1_functional", "functional/ivy/elementwise/floor", "functional/ivy/elementwise/floor/floor_array", "functional/ivy/elementwise/floor/floor_container", "functional/ivy/elementwise/floor/floor_functional", "functional/ivy/elementwise/floor_divide", "functional/ivy/elementwise/floor_divide/floor_divide_array", "functional/ivy/elementwise/floor_divide/floor_divide_container", "functional/ivy/elementwise/floor_divide/floor_divide_functional", "functional/ivy/elementwise/greater", "functional/ivy/elementwise/greater/greater_array", "functional/ivy/elementwise/greater/greater_container", "functional/ivy/elementwise/greater/greater_functional", "functional/ivy/elementwise/greater_equal", "functional/ivy/elementwise/greater_equal/greater_equal_array", "functional/ivy/elementwise/greater_equal/greater_equal_container", "functional/ivy/elementwise/greater_equal/greater_equal_functional", "functional/ivy/elementwise/isfinite", "functional/ivy/elementwise/isfinite/isfinite_array", "functional/ivy/elementwise/isfinite/isfinite_container", "functional/ivy/elementwise/isfinite/isfinite_functional", "functional/ivy/elementwise/isinf", "functional/ivy/elementwise/isinf/isinf_array", "functional/ivy/elementwise/isinf/isinf_container", "functional/ivy/elementwise/isinf/isinf_functional", "functional/ivy/elementwise/isnan", "functional/ivy/elementwise/isnan/isnan_array", "functional/ivy/elementwise/isnan/isnan_container", "functional/ivy/elementwise/isnan/isnan_functional", "functional/ivy/elementwise/less", "functional/ivy/elementwise/less/less_array", "functional/ivy/elementwise/less/less_container", "functional/ivy/elementwise/less/less_functional", "functional/ivy/elementwise/less_equal", "functional/ivy/elementwise/less_equal/less_equal_array", "functional/ivy/elementwise/less_equal/less_equal_container", "functional/ivy/elementwise/less_equal/less_equal_functional", "functional/ivy/elementwise/log", "functional/ivy/elementwise/log/log_array", "functional/ivy/elementwise/log/log_container", "functional/ivy/elementwise/log/log_functional", "functional/ivy/elementwise/log10", "functional/ivy/elementwise/log10/log10_array", "functional/ivy/elementwise/log10/log10_container", "functional/ivy/elementwise/log10/log10_functional", "functional/ivy/elementwise/log1p", "functional/ivy/elementwise/log1p/log1p_array", "functional/ivy/elementwise/log1p/log1p_container", "functional/ivy/elementwise/log1p/log1p_functional", "functional/ivy/elementwise/log2", "functional/ivy/elementwise/log2/log2_array", "functional/ivy/elementwise/log2/log2_container", "functional/ivy/elementwise/log2/log2_functional", "functional/ivy/elementwise/logaddexp", "functional/ivy/elementwise/logaddexp/logaddexp_array", "functional/ivy/elementwise/logaddexp/logaddexp_container", "functional/ivy/elementwise/logaddexp/logaddexp_functional", "functional/ivy/elementwise/logical_and", "functional/ivy/elementwise/logical_and/logical_and_array", "functional/ivy/elementwise/logical_and/logical_and_container", "functional/ivy/elementwise/logical_and/logical_and_functional", "functional/ivy/elementwise/logical_not", "functional/ivy/elementwise/logical_not/logical_not_array", "functional/ivy/elementwise/logical_not/logical_not_container", "functional/ivy/elementwise/logical_not/logical_not_functional", "functional/ivy/elementwise/logical_or", "functional/ivy/elementwise/logical_or/logical_or_array", "functional/ivy/elementwise/logical_or/logical_or_container", "functional/ivy/elementwise/logical_or/logical_or_functional", "functional/ivy/elementwise/logical_xor", "functional/ivy/elementwise/logical_xor/logical_xor_array", "functional/ivy/elementwise/logical_xor/logical_xor_container", "functional/ivy/elementwise/logical_xor/logical_xor_functional", "functional/ivy/elementwise/maximum", "functional/ivy/elementwise/minimum", "functional/ivy/elementwise/multiply", "functional/ivy/elementwise/multiply/multiply_array", "functional/ivy/elementwise/multiply/multiply_container", "functional/ivy/elementwise/multiply/multiply_functional", "functional/ivy/elementwise/multiply/static_multiply_container", "functional/ivy/elementwise/negative", "functional/ivy/elementwise/negative/negative_array", "functional/ivy/elementwise/negative/negative_container", "functional/ivy/elementwise/negative/negative_functional", "functional/ivy/elementwise/not_equal", "functional/ivy/elementwise/not_equal/not_equal_array", "functional/ivy/elementwise/not_equal/not_equal_container", "functional/ivy/elementwise/not_equal/not_equal_functional", "functional/ivy/elementwise/positive", "functional/ivy/elementwise/positive/positive_array", "functional/ivy/elementwise/positive/positive_container", "functional/ivy/elementwise/positive/positive_functional", "functional/ivy/elementwise/pow", "functional/ivy/elementwise/pow/pow_array", "functional/ivy/elementwise/pow/pow_container", "functional/ivy/elementwise/pow/pow_functional", "functional/ivy/elementwise/remainder", "functional/ivy/elementwise/remainder/remainder_array", "functional/ivy/elementwise/remainder/remainder_container", "functional/ivy/elementwise/remainder/remainder_functional", "functional/ivy/elementwise/round", "functional/ivy/elementwise/round/round_array", "functional/ivy/elementwise/round/round_container", "functional/ivy/elementwise/round/round_functional", "functional/ivy/elementwise/sign", "functional/ivy/elementwise/sign/sign_array", "functional/ivy/elementwise/sign/sign_container", "functional/ivy/elementwise/sign/sign_functional", "functional/ivy/elementwise/sin", "functional/ivy/elementwise/sin/sin_array", "functional/ivy/elementwise/sin/sin_container", "functional/ivy/elementwise/sin/sin_functional", "functional/ivy/elementwise/sinh", "functional/ivy/elementwise/sinh/sinh_array", "functional/ivy/elementwise/sinh/sinh_container", "functional/ivy/elementwise/sinh/sinh_functional", "functional/ivy/elementwise/sqrt", "functional/ivy/elementwise/sqrt/sqrt_array", "functional/ivy/elementwise/sqrt/sqrt_container", "functional/ivy/elementwise/sqrt/sqrt_functional", "functional/ivy/elementwise/square", "functional/ivy/elementwise/square/square_array", "functional/ivy/elementwise/square/square_container", "functional/ivy/elementwise/square/square_functional", "functional/ivy/elementwise/subtract", "functional/ivy/elementwise/subtract/static_subtract_container", "functional/ivy/elementwise/subtract/subtract_array", "functional/ivy/elementwise/subtract/subtract_container", "functional/ivy/elementwise/subtract/subtract_functional", "functional/ivy/elementwise/tan", "functional/ivy/elementwise/tan/static_tan_container", "functional/ivy/elementwise/tan/tan_array", "functional/ivy/elementwise/tan/tan_container", "functional/ivy/elementwise/tan/tan_functional", "functional/ivy/elementwise/tanh", "functional/ivy/elementwise/tanh/static_tanh_container", "functional/ivy/elementwise/tanh/tanh_array", "functional/ivy/elementwise/tanh/tanh_container", "functional/ivy/elementwise/tanh/tanh_functional", "functional/ivy/elementwise/trunc", "functional/ivy/elementwise/trunc/trunc_array", "functional/ivy/elementwise/trunc/trunc_container", "functional/ivy/elementwise/trunc/trunc_functional", "functional/ivy/general", "functional/ivy/general/all_equal", "functional/ivy/general/all_equal/all_equal_array", "functional/ivy/general/all_equal/all_equal_container", "functional/ivy/general/all_equal/all_equal_functional", "functional/ivy/general/all_equal/static_all_equal_container", "functional/ivy/general/arg_info", "functional/ivy/general/arg_names", "functional/ivy/general/array_equal", "functional/ivy/general/arrays_equal", "functional/ivy/general/assert_supports_inplace", "functional/ivy/general/cache_fn", "functional/ivy/general/clip_matrix_norm", "functional/ivy/general/clip_vector_norm", "functional/ivy/general/clip_vector_norm/clip_vector_norm_container", "functional/ivy/general/clip_vector_norm/clip_vector_norm_functional", "functional/ivy/general/container_types", "functional/ivy/general/copy_array", "functional/ivy/general/cumprod", "functional/ivy/general/cumsum", "functional/ivy/general/current_backend_str", "functional/ivy/general/default", "functional/ivy/general/einops_rearrange", "functional/ivy/general/einops_reduce", "functional/ivy/general/einops_repeat", "functional/ivy/general/exists", "functional/ivy/general/floormod", "functional/ivy/general/fourier_encode", "functional/ivy/general/gather", "functional/ivy/general/gather_nd", "functional/ivy/general/gather_nd/gather_nd_array", "functional/ivy/general/gather_nd/gather_nd_container", "functional/ivy/general/gather_nd/gather_nd_functional", "functional/ivy/general/gather_nd/static_gather_nd_container", "functional/ivy/general/get_all_arrays_in_memory", "functional/ivy/general/get_min_base", "functional/ivy/general/get_min_denominator", "functional/ivy/general/get_num_dims", "functional/ivy/general/get_referrers_recursive", "functional/ivy/general/has_nans", "functional/ivy/general/indices_where", "functional/ivy/general/inplace_arrays_supported", "functional/ivy/general/inplace_decrement", "functional/ivy/general/inplace_increment", "functional/ivy/general/inplace_update", "functional/ivy/general/inplace_variables_supported", "functional/ivy/general/is_array", "functional/ivy/general/is_ivy_array", "functional/ivy/general/is_ivy_container", "functional/ivy/general/is_native_array", "functional/ivy/general/match_kwargs", "functional/ivy/general/multiprocessing", "functional/ivy/general/num_arrays_in_memory", "functional/ivy/general/one_hot", "functional/ivy/general/print_all_arrays_in_memory", "functional/ivy/general/queue_timeout", "functional/ivy/general/scatter_flat", "functional/ivy/general/scatter_nd", "functional/ivy/general/set_min_base", "functional/ivy/general/set_min_denominator", "functional/ivy/general/set_queue_timeout", "functional/ivy/general/set_tmp_dir", "functional/ivy/general/shape", "functional/ivy/general/shape_to_tuple", "functional/ivy/general/stable_divide", "functional/ivy/general/stable_pow", "functional/ivy/general/supports_inplace", "functional/ivy/general/tmp_dir", "functional/ivy/general/to_list", "functional/ivy/general/to_numpy", "functional/ivy/general/to_scalar", "functional/ivy/general/try_else_none", "functional/ivy/general/unstack", "functional/ivy/general/value_is_nan", "functional/ivy/gradients", "functional/ivy/gradients/GradientTracking:\n    \"\"\"\"\"\"\n\n    # noinspection PyShadowingNames\n    def __init__", "functional/ivy/gradients/adam_step", "functional/ivy/gradients/adam_step/adam_step_array", "functional/ivy/gradients/adam_step/adam_step_container", "functional/ivy/gradients/adam_step/adam_step_functional", "functional/ivy/gradients/adam_step/static_adam_step_container", "functional/ivy/gradients/adam_update", "functional/ivy/gradients/adam_update/adam_update_container", "functional/ivy/gradients/adam_update/adam_update_functional", "functional/ivy/gradients/adam_update/static_adam_update_container", "functional/ivy/gradients/execute_with_gradients", "functional/ivy/gradients/gradient_descent_update", "functional/ivy/gradients/gradient_descent_update/gradient_descent_update_container", "functional/ivy/gradients/gradient_descent_update/gradient_descent_update_functional", "functional/ivy/gradients/gradient_descent_update/static_gradient_descent_update_container", "functional/ivy/gradients/is_variable", "functional/ivy/gradients/is_variable/is_variable_container", "functional/ivy/gradients/is_variable/is_variable_functional", "functional/ivy/gradients/is_variable/static_is_variable_container", "functional/ivy/gradients/lamb_update", "functional/ivy/gradients/lamb_update/lamb_update_container", "functional/ivy/gradients/lamb_update/lamb_update_functional", "functional/ivy/gradients/lamb_update/static_lamb_update_container", "functional/ivy/gradients/lars_update", "functional/ivy/gradients/lars_update/lars_update_container", "functional/ivy/gradients/lars_update/lars_update_functional", "functional/ivy/gradients/lars_update/static_lars_update_container", "functional/ivy/gradients/optimizer_update", "functional/ivy/gradients/optimizer_update/optimizer_update_container", "functional/ivy/gradients/optimizer_update/optimizer_update_functional", "functional/ivy/gradients/optimizer_update/static_optimizer_update_container", "functional/ivy/gradients/set_with_grads", "functional/ivy/gradients/stop_gradient", "functional/ivy/gradients/unset_with_grads", "functional/ivy/gradients/variable", "functional/ivy/gradients/variable_data", "functional/ivy/gradients/with_grads", "functional/ivy/layers", "functional/ivy/layers/conv1d", "functional/ivy/layers/conv1d_transpose", "functional/ivy/layers/conv2d", "functional/ivy/layers/conv2d_transpose", "functional/ivy/layers/conv3d", "functional/ivy/layers/conv3d_transpose", "functional/ivy/layers/depthwise_conv2d", "functional/ivy/layers/dropout", "functional/ivy/layers/linear", "functional/ivy/layers/lstm_update", "functional/ivy/layers/multi_head_attention", "functional/ivy/layers/scaled_dot_product_attention", "functional/ivy/linear_algebra", "functional/ivy/linear_algebra/cholesky", "functional/ivy/linear_algebra/cholesky/cholesky_array", "functional/ivy/linear_algebra/cholesky/cholesky_functional", "functional/ivy/linear_algebra/cross", "functional/ivy/linear_algebra/cross/cross_array", "functional/ivy/linear_algebra/cross/cross_functional", "functional/ivy/linear_algebra/det", "functional/ivy/linear_algebra/det/det_array", "functional/ivy/linear_algebra/det/det_functional", "functional/ivy/linear_algebra/diagonal", "functional/ivy/linear_algebra/diagonal/diagonal_array", "functional/ivy/linear_algebra/diagonal/diagonal_functional", "functional/ivy/linear_algebra/eigh", "functional/ivy/linear_algebra/eigh/eigh_array", "functional/ivy/linear_algebra/eigh/eigh_functional", "functional/ivy/linear_algebra/eigvalsh", "functional/ivy/linear_algebra/eigvalsh/eigvalsh_array", "functional/ivy/linear_algebra/eigvalsh/eigvalsh_functional", "functional/ivy/linear_algebra/inv", "functional/ivy/linear_algebra/inv/inv_array", "functional/ivy/linear_algebra/inv/inv_functional", "functional/ivy/linear_algebra/matmul", "functional/ivy/linear_algebra/matmul/matmul_array", "functional/ivy/linear_algebra/matmul/matmul_container", "functional/ivy/linear_algebra/matmul/matmul_functional", "functional/ivy/linear_algebra/matrix_norm", "functional/ivy/linear_algebra/matrix_norm/matrix_norm_array", "functional/ivy/linear_algebra/matrix_norm/matrix_norm_functional", "functional/ivy/linear_algebra/matrix_power", "functional/ivy/linear_algebra/matrix_rank", "functional/ivy/linear_algebra/matrix_rank/matrix_rank_array", "functional/ivy/linear_algebra/matrix_rank/matrix_rank_functional", "functional/ivy/linear_algebra/matrix_transpose", "functional/ivy/linear_algebra/matrix_transpose/matrix_transpose_array", "functional/ivy/linear_algebra/matrix_transpose/matrix_transpose_functional", "functional/ivy/linear_algebra/outer", "functional/ivy/linear_algebra/outer/outer_array", "functional/ivy/linear_algebra/outer/outer_functional", "functional/ivy/linear_algebra/pinv", "functional/ivy/linear_algebra/pinv/pinv_array", "functional/ivy/linear_algebra/pinv/pinv_functional", "functional/ivy/linear_algebra/qr", "functional/ivy/linear_algebra/qr/qr_array", "functional/ivy/linear_algebra/qr/qr_functional", "functional/ivy/linear_algebra/slogdet", "functional/ivy/linear_algebra/solve", "functional/ivy/linear_algebra/solve/solve_array", "functional/ivy/linear_algebra/solve/solve_functional", "functional/ivy/linear_algebra/svd", "functional/ivy/linear_algebra/svd/svd_array", "functional/ivy/linear_algebra/svd/svd_functional", "functional/ivy/linear_algebra/svdvals", "functional/ivy/linear_algebra/svdvals/svdvals_array", "functional/ivy/linear_algebra/svdvals/svdvals_functional", "functional/ivy/linear_algebra/tensordot", "functional/ivy/linear_algebra/tensordot/tensordot_array", "functional/ivy/linear_algebra/tensordot/tensordot_functional", "functional/ivy/linear_algebra/trace", "functional/ivy/linear_algebra/trace/trace_array", "functional/ivy/linear_algebra/trace/trace_functional", "functional/ivy/linear_algebra/vecdot", "functional/ivy/linear_algebra/vecdot/vecdot_array", "functional/ivy/linear_algebra/vecdot/vecdot_functional", "functional/ivy/linear_algebra/vector_norm", "functional/ivy/linear_algebra/vector_norm/vector_norm_array", "functional/ivy/linear_algebra/vector_norm/vector_norm_functional", "functional/ivy/linear_algebra/vector_to_skew_symmetric_matrix", "functional/ivy/linear_algebra/vector_to_skew_symmetric_matrix/vector_to_skew_symmetric_matrix_array", "functional/ivy/linear_algebra/vector_to_skew_symmetric_matrix/vector_to_skew_symmetric_matrix_functional", "functional/ivy/losses", "functional/ivy/losses/binary_cross_entropy", "functional/ivy/losses/binary_cross_entropy/binary_cross_entropy_array", "functional/ivy/losses/binary_cross_entropy/binary_cross_entropy_container", "functional/ivy/losses/binary_cross_entropy/binary_cross_entropy_functional", "functional/ivy/losses/binary_cross_entropy/static_binary_cross_entropy_container", "functional/ivy/losses/cross_entropy", "functional/ivy/losses/cross_entropy/cross_entropy_array", "functional/ivy/losses/cross_entropy/cross_entropy_container", "functional/ivy/losses/cross_entropy/cross_entropy_functional", "functional/ivy/losses/cross_entropy/static_cross_entropy_container", "functional/ivy/losses/sparse_cross_entropy", "functional/ivy/losses/sparse_cross_entropy/sparse_cross_entropy_array", "functional/ivy/losses/sparse_cross_entropy/sparse_cross_entropy_container", "functional/ivy/losses/sparse_cross_entropy/sparse_cross_entropy_functional", "functional/ivy/losses/sparse_cross_entropy/static_sparse_cross_entropy_container", "functional/ivy/manipulation", "functional/ivy/manipulation/clip", "functional/ivy/manipulation/clip/clip_array", "functional/ivy/manipulation/clip/clip_container", "functional/ivy/manipulation/clip/clip_functional", "functional/ivy/manipulation/clip/static_clip_container", "functional/ivy/manipulation/concat", "functional/ivy/manipulation/concat/concat_array", "functional/ivy/manipulation/concat/concat_container", "functional/ivy/manipulation/concat/concat_functional", "functional/ivy/manipulation/constant_pad", "functional/ivy/manipulation/constant_pad/constant_pad_array", "functional/ivy/manipulation/constant_pad/constant_pad_container", "functional/ivy/manipulation/constant_pad/constant_pad_functional", "functional/ivy/manipulation/expand_dims", "functional/ivy/manipulation/expand_dims/expand_dims_array", "functional/ivy/manipulation/expand_dims/expand_dims_container", "functional/ivy/manipulation/expand_dims/expand_dims_functional", "functional/ivy/manipulation/flip", "functional/ivy/manipulation/flip/flip_array", "functional/ivy/manipulation/flip/flip_container", "functional/ivy/manipulation/flip/flip_functional", "functional/ivy/manipulation/permute_dims", "functional/ivy/manipulation/permute_dims/permute_dims_array", "functional/ivy/manipulation/permute_dims/permute_dims_container", "functional/ivy/manipulation/permute_dims/permute_dims_functional", "functional/ivy/manipulation/repeat", "functional/ivy/manipulation/repeat/repeat_array", "functional/ivy/manipulation/repeat/repeat_container", "functional/ivy/manipulation/repeat/repeat_functional", "functional/ivy/manipulation/reshape", "functional/ivy/manipulation/reshape/reshape_array", "functional/ivy/manipulation/reshape/reshape_container", "functional/ivy/manipulation/reshape/reshape_functional", "functional/ivy/manipulation/roll", "functional/ivy/manipulation/roll/roll_array", "functional/ivy/manipulation/roll/roll_container", "functional/ivy/manipulation/roll/roll_functional", "functional/ivy/manipulation/roll/static_roll_container", "functional/ivy/manipulation/split", "functional/ivy/manipulation/squeeze", "functional/ivy/manipulation/squeeze/squeeze_array", "functional/ivy/manipulation/squeeze/squeeze_container", "functional/ivy/manipulation/squeeze/squeeze_functional", "functional/ivy/manipulation/stack", "functional/ivy/manipulation/stack/stack_array", "functional/ivy/manipulation/stack/stack_container", "functional/ivy/manipulation/stack/stack_functional", "functional/ivy/manipulation/swapaxes", "functional/ivy/manipulation/swapaxes/swapaxes_array", "functional/ivy/manipulation/swapaxes/swapaxes_container", "functional/ivy/manipulation/swapaxes/swapaxes_functional", "functional/ivy/manipulation/tile", "functional/ivy/manipulation/tile/tile_array", "functional/ivy/manipulation/tile/tile_container", "functional/ivy/manipulation/tile/tile_functional", "functional/ivy/manipulation/zero_pad", "functional/ivy/manipulation/zero_pad/zero_pad_array", "functional/ivy/manipulation/zero_pad/zero_pad_container", "functional/ivy/manipulation/zero_pad/zero_pad_functional", "functional/ivy/meta", "functional/ivy/meta/fomaml_step", "functional/ivy/meta/maml_step", "functional/ivy/meta/reptile_step", "functional/ivy/nest", "functional/ivy/nest/all_nested_indices", "functional/ivy/nest/copy_nest", "functional/ivy/nest/index_nest", "functional/ivy/nest/insert_into_nest_at_index", "functional/ivy/nest/insert_into_nest_at_indices", "functional/ivy/nest/map", "functional/ivy/nest/map_nest_at_index", "functional/ivy/nest/map_nest_at_indices", "functional/ivy/nest/multi_index_nest", "functional/ivy/nest/nested_any", "functional/ivy/nest/nested_indices_where", "functional/ivy/nest/nested_map", "functional/ivy/nest/nested_multi_map", "functional/ivy/nest/prune_nest_at_index", "functional/ivy/nest/prune_nest_at_indices", "functional/ivy/nest/set_nest_at_index", "functional/ivy/nest/set_nest_at_indices", "functional/ivy/norms", "functional/ivy/norms/layer_norm", "functional/ivy/norms/layer_norm/layer_norm_array", "functional/ivy/norms/layer_norm/layer_norm_container", "functional/ivy/norms/layer_norm/layer_norm_functional", "functional/ivy/random", "functional/ivy/random/multinomial", "functional/ivy/random/randint", "functional/ivy/random/randint/randint_functional", "functional/ivy/random/randint/static_randint_container", "functional/ivy/random/random_normal", "functional/ivy/random/random_uniform", "functional/ivy/random/random_uniform/random_uniform_container", "functional/ivy/random/random_uniform/random_uniform_functional", "functional/ivy/random/random_uniform/static_random_uniform_container", "functional/ivy/random/seed", "functional/ivy/random/shuffle", "functional/ivy/searching", "functional/ivy/searching/argmax", "functional/ivy/searching/argmin", "functional/ivy/searching/nonzero", "functional/ivy/searching/where", "functional/ivy/set", "functional/ivy/set/unique_all", "functional/ivy/set/unique_counts", "functional/ivy/set/unique_counts/static_unique_counts_container", "functional/ivy/set/unique_counts/unique_counts_array", "functional/ivy/set/unique_counts/unique_counts_container", "functional/ivy/set/unique_counts/unique_counts_functional", "functional/ivy/set/unique_inverse", "functional/ivy/set/unique_values", "functional/ivy/sorting", "functional/ivy/sorting/argsort", "functional/ivy/sorting/argsort/argsort_array", "functional/ivy/sorting/argsort/argsort_container", "functional/ivy/sorting/argsort/argsort_functional", "functional/ivy/sorting/argsort/static_argsort_container", "functional/ivy/sorting/sort", "functional/ivy/sorting/sort/sort_array", "functional/ivy/sorting/sort/sort_container", "functional/ivy/sorting/sort/sort_functional", "functional/ivy/sorting/sort/static_sort_container", "functional/ivy/statistical", "functional/ivy/statistical/einsum", "functional/ivy/statistical/einsum/einsum_array", "functional/ivy/statistical/einsum/einsum_container", "functional/ivy/statistical/einsum/einsum_functional", "functional/ivy/statistical/max", "functional/ivy/statistical/max/max_array", "functional/ivy/statistical/max/max_container", "functional/ivy/statistical/max/max_functional", "functional/ivy/statistical/mean", "functional/ivy/statistical/mean/mean_array", "functional/ivy/statistical/mean/mean_container", "functional/ivy/statistical/mean/mean_functional", "functional/ivy/statistical/min", "functional/ivy/statistical/min/min_array", "functional/ivy/statistical/min/min_container", "functional/ivy/statistical/min/min_functional", "functional/ivy/statistical/prod", "functional/ivy/statistical/prod/prod_array", "functional/ivy/statistical/prod/prod_container", "functional/ivy/statistical/prod/prod_functional", "functional/ivy/statistical/std", "functional/ivy/statistical/std/std_array", "functional/ivy/statistical/std/std_container", "functional/ivy/statistical/std/std_functional", "functional/ivy/statistical/sum", "functional/ivy/statistical/sum/sum_array", "functional/ivy/statistical/sum/sum_container", "functional/ivy/statistical/sum/sum_functional", "functional/ivy/statistical/var", "functional/ivy/statistical/var/var_array", "functional/ivy/statistical/var/var_container", "functional/ivy/statistical/var/var_functional", "functional/ivy/utility", "functional/ivy/utility/all", "functional/ivy/utility/all/all_array", "functional/ivy/utility/all/all_container", "functional/ivy/utility/all/all_functional", "functional/ivy/utility/all/static_all_container", "functional/ivy/utility/any", "functional/ivy/utility/any/any_array", "functional/ivy/utility/any/any_container", "functional/ivy/utility/any/any_functional", "functional/ivy/utility/any/static_any_container", "index", "index_append", "index_prepend", "inspection", "inspection/add_array_specs", "inspection/fn_array_spec", "roadmap", "supported_frameworks", "verbosity", "verbosity/cprint"], "filenames": ["backend_handler.rst", "backend_handler/ContextManager:\n    def __init__.rst", "backend_handler/choose_random_backend.rst", "backend_handler/clear_backend_stack.rst", "backend_handler/current_backend.rst", "backend_handler/get_backend.rst", "backend_handler/set_backend.rst", "backend_handler/try_import_ivy_jax.rst", "backend_handler/try_import_ivy_mxnet.rst", "backend_handler/try_import_ivy_numpy.rst", "backend_handler/try_import_ivy_tf.rst", "backend_handler/try_import_ivy_torch.rst", "backend_handler/unset_backend.rst", "background.rst", "background/ml_explosion.rst", "background/standardization.rst", "background/why_unify.rst", "classes/data_classes.rst", "classes/data_classes/array.rst", "classes/data_classes/array/activations.rst", "classes/data_classes/array/activations/ArrayWithActivations.rst", "classes/data_classes/array/conversions.rst", "classes/data_classes/array/conversions/args_to_ivy.rst", "classes/data_classes/array/conversions/args_to_native.rst", "classes/data_classes/array/conversions/to_ivy.rst", "classes/data_classes/array/conversions/to_native.rst", "classes/data_classes/array/creation.rst", "classes/data_classes/array/creation/ArrayWithCreation.rst", "classes/data_classes/array/data_type.rst", "classes/data_classes/array/data_type/ArrayWithDataTypes.rst", "classes/data_classes/array/device.rst", "classes/data_classes/array/device/ArrayWithDevice.rst", "classes/data_classes/array/elementwise.rst", "classes/data_classes/array/elementwise/ArrayWithElementwise.rst", "classes/data_classes/array/general.rst", "classes/data_classes/array/general/ArrayWithGeneral.rst", "classes/data_classes/array/gradients.rst", "classes/data_classes/array/gradients/ArrayWithGradients.rst", "classes/data_classes/array/image.rst", "classes/data_classes/array/image/ArrayWithImage.rst", "classes/data_classes/array/layers.rst", "classes/data_classes/array/layers/ArrayWithLayers.rst", "classes/data_classes/array/linear_algebra.rst", "classes/data_classes/array/linear_algebra/ArrayWithLinearAlgebra.rst", "classes/data_classes/array/losses.rst", "classes/data_classes/array/losses/ArrayWithLosses.rst", "classes/data_classes/array/manipulation.rst", "classes/data_classes/array/manipulation/ArrayWithManipulation.rst", "classes/data_classes/array/norms.rst", "classes/data_classes/array/norms/ArrayWithNorms.rst", "classes/data_classes/array/random.rst", "classes/data_classes/array/random/ArrayWithRandom.rst", "classes/data_classes/array/searching.rst", "classes/data_classes/array/searching/ArrayWithSearching.rst", "classes/data_classes/array/set.rst", "classes/data_classes/array/set/ArrayWithSet.rst", "classes/data_classes/array/sorting.rst", "classes/data_classes/array/sorting/ArrayWithSorting.rst", "classes/data_classes/array/statistical.rst", "classes/data_classes/array/statistical/ArrayWithStatistical.rst", "classes/data_classes/array/utility.rst", "classes/data_classes/array/utility/ArrayWithUtility.rst", "classes/data_classes/array/wrapping.rst", "classes/data_classes/array/wrapping/add_ivy_array_instance_methods.rst", "classes/data_classes/container.rst", "classes/data_classes/container/activations.rst", "classes/data_classes/container/activations/ContainerWithActivations.rst", "classes/data_classes/container/base.rst", "classes/data_classes/container/base/ContainerBase.rst", "classes/data_classes/container/container.rst", "classes/data_classes/container/container/Container.rst", "classes/data_classes/container/container/MultiDevContainer.rst", "classes/data_classes/container/creation.rst", "classes/data_classes/container/creation/ContainerWithCreation.rst", "classes/data_classes/container/data_type.rst", "classes/data_classes/container/data_type/ContainerWithDataTypes.rst", "classes/data_classes/container/device.rst", "classes/data_classes/container/device/ContainerWithDevice.rst", "classes/data_classes/container/elementwise.rst", "classes/data_classes/container/elementwise/ContainerWithElementwise.rst", "classes/data_classes/container/general.rst", "classes/data_classes/container/general/ContainerWithGeneral.rst", "classes/data_classes/container/gradients.rst", "classes/data_classes/container/gradients/ContainerWithGradients.rst", "classes/data_classes/container/image.rst", "classes/data_classes/container/image/ContainerWithImage.rst", "classes/data_classes/container/layers.rst", "classes/data_classes/container/layers/ContainerWithLayers.rst", "classes/data_classes/container/linear_algebra.rst", "classes/data_classes/container/linear_algebra/ContainerWithLinearAlgebra.rst", "classes/data_classes/container/losses.rst", "classes/data_classes/container/losses/ContainerWithLosses.rst", "classes/data_classes/container/manipulation.rst", "classes/data_classes/container/manipulation/ContainerWithManipulation.rst", "classes/data_classes/container/norms.rst", "classes/data_classes/container/norms/ContainerWithNorms.rst", "classes/data_classes/container/random.rst", "classes/data_classes/container/random/ContainerWithRandom.rst", "classes/data_classes/container/searching.rst", "classes/data_classes/container/searching/ContainerWithSearching.rst", "classes/data_classes/container/set.rst", "classes/data_classes/container/set/ContainerWithSet.rst", "classes/data_classes/container/sorting.rst", "classes/data_classes/container/sorting/ContainerWithSorting.rst", "classes/data_classes/container/statistical.rst", "classes/data_classes/container/statistical/ContainerWithStatistical.rst", "classes/data_classes/container/utility.rst", "classes/data_classes/container/utility/ContainerWithUtility.rst", "classes/data_classes/container/wrapping.rst", "classes/data_classes/container/wrapping/add_ivy_container_instance_methods.rst", "classes/stateful.rst", "classes/stateful/activations.rst", "classes/stateful/activations/GEGLU.rst", "classes/stateful/activations/GELU.rst", "classes/stateful/converters.rst", "classes/stateful/converters/to_ivy_module.rst", "classes/stateful/initializers.rst", "classes/stateful/initializers/Constant:\n    def __init__.rst", "classes/stateful/initializers/FirstLayerSiren.rst", "classes/stateful/initializers/GlorotUniform.rst", "classes/stateful/initializers/KaimingNormal:\n    def __init__.rst", "classes/stateful/initializers/Ones.rst", "classes/stateful/initializers/Siren.rst", "classes/stateful/initializers/Uniform:\n    def __init__.rst", "classes/stateful/initializers/Zeros.rst", "classes/stateful/layers.rst", "classes/stateful/layers/Conv1D.rst", "classes/stateful/layers/Conv1DTranspose.rst", "classes/stateful/layers/Conv2D.rst", "classes/stateful/layers/Conv2DTranspose.rst", "classes/stateful/layers/Conv3D.rst", "classes/stateful/layers/Conv3DTranspose.rst", "classes/stateful/layers/DepthwiseConv2D.rst", "classes/stateful/layers/Dropout.rst", "classes/stateful/layers/LSTM.rst", "classes/stateful/layers/Linear.rst", "classes/stateful/layers/MultiHeadAttention.rst", "classes/stateful/module.rst", "classes/stateful/module/Module.rst", "classes/stateful/norms.rst", "classes/stateful/norms/LayerNorm.rst", "classes/stateful/optimizers.rst", "classes/stateful/optimizers/Adam.rst", "classes/stateful/optimizers/LAMB.rst", "classes/stateful/optimizers/LARS.rst", "classes/stateful/optimizers/Optimizer.rst", "classes/stateful/optimizers/SGD.rst", "classes/stateful/sequential.rst", "classes/stateful/sequential/Sequential.rst", "contributing.rst", "contributing/0_setting_up.rst", "contributing/1_the_basics.rst", "contributing/4_open_tasks.rst", "contributing/building_the_docs.rst", "deep_dive.rst", "deep_dive/0_navigating_the_code.rst", "deep_dive/10_docstrings.rst", "deep_dive/11_docstring_examples.rst", "deep_dive/12_array_api_tests.rst", "deep_dive/13_ivy_tests.rst", "deep_dive/1_function_types.rst", "deep_dive/2_backend_setting.rst", "deep_dive/3_function_wrapping.rst", "deep_dive/4_arrays.rst", "deep_dive/5_containers.rst", "deep_dive/6_data_types.rst", "deep_dive/7_devices.rst", "deep_dive/8_inplace_updates.rst", "deep_dive/9_function_arguments.rst", "design.rst", "design/building_blocks.rst", "design/ivy_as_a_framework.rst", "design/ivy_as_a_framework/ivy_array.rst", "design/ivy_as_a_framework/ivy_container.rst", "design/ivy_as_a_framework/ivy_stateful_api.rst", "design/ivy_as_a_transpiler.rst", "docs/ivy.rst", "docs/ivy_builder.rst", "docs/ivy_ecosystem.rst", "docs/ivy_gym.rst", "docs/ivy_mech.rst", "docs/ivy_memory.rst", "docs/ivy_models.rst", "docs/ivy_robot.rst", "docs/ivy_vision.rst", "extensions.rst", "extensions/applied_libraries.rst", "faq.rst", "func_wrapper.rst", "func_wrapper/handle_nestable.rst", "func_wrapper/handle_out_argument.rst", "func_wrapper/infer_device.rst", "func_wrapper/infer_dtype.rst", "func_wrapper/inputs_to_ivy_arrays.rst", "func_wrapper/inputs_to_native_arrays.rst", "func_wrapper/outputs_to_ivy_arrays.rst", "func_wrapper/to_native_arrays_and_back.rst", "functional/ivy.rst", "functional/ivy/activations.rst", "functional/ivy/activations/gelu.rst", "functional/ivy/activations/leaky_relu.rst", "functional/ivy/activations/relu.rst", "functional/ivy/activations/sigmoid.rst", "functional/ivy/activations/softmax.rst", "functional/ivy/activations/softplus.rst", "functional/ivy/activations/softplus/softplus_array.rst", "functional/ivy/activations/softplus/softplus_container.rst", "functional/ivy/activations/softplus/softplus_functional.rst", "functional/ivy/activations/softplus/static_softplus_container.rst", "functional/ivy/activations/tanh.rst", "functional/ivy/compilation.rst", "functional/ivy/compilation/compile.rst", "functional/ivy/constants.rst", "functional/ivy/creation.rst", "functional/ivy/creation/arange.rst", "functional/ivy/creation/asarray.rst", "functional/ivy/creation/asarray/asarray_array.rst", "functional/ivy/creation/asarray/asarray_functional.rst", "functional/ivy/creation/empty.rst", "functional/ivy/creation/empty_like.rst", "functional/ivy/creation/empty_like/empty_like_array.rst", "functional/ivy/creation/empty_like/empty_like_functional.rst", "functional/ivy/creation/eye.rst", "functional/ivy/creation/from_dlpack.rst", "functional/ivy/creation/from_dlpack/from_dlpack_array.rst", "functional/ivy/creation/from_dlpack/from_dlpack_functional.rst", "functional/ivy/creation/full.rst", "functional/ivy/creation/full_like.rst", "functional/ivy/creation/full_like/full_like_array.rst", "functional/ivy/creation/full_like/full_like_functional.rst", "functional/ivy/creation/linspace.rst", "functional/ivy/creation/logspace.rst", "functional/ivy/creation/meshgrid.rst", "functional/ivy/creation/meshgrid/meshgrid_array.rst", "functional/ivy/creation/meshgrid/meshgrid_functional.rst", "functional/ivy/creation/native_array.rst", "functional/ivy/creation/native_array/native_array_array.rst", "functional/ivy/creation/native_array/native_array_functional.rst", "functional/ivy/creation/ones.rst", "functional/ivy/creation/ones_like.rst", "functional/ivy/creation/ones_like/ones_like_array.rst", "functional/ivy/creation/ones_like/ones_like_functional.rst", "functional/ivy/creation/tril.rst", "functional/ivy/creation/tril/tril_array.rst", "functional/ivy/creation/tril/tril_functional.rst", "functional/ivy/creation/triu.rst", "functional/ivy/creation/triu/triu_array.rst", "functional/ivy/creation/triu/triu_functional.rst", "functional/ivy/creation/zeros.rst", "functional/ivy/creation/zeros_like.rst", "functional/ivy/creation/zeros_like/zeros_like_array.rst", "functional/ivy/creation/zeros_like/zeros_like_functional.rst", "functional/ivy/data_type.rst", "functional/ivy/data_type/DefaultDtype:\n    \"\"\"\"\"\"\n\n    # noinspection PyShadowingNames\n    def __init__.rst", "functional/ivy/data_type/DefaultFloatDtype:\n    \"\"\"\"\"\"\n\n    # noinspection PyShadowingNames\n    def __init__.rst", "functional/ivy/data_type/DefaultIntDtype:\n    \"\"\"\"\"\"\n\n    # noinspection PyShadowingNames\n    def __init__.rst", "functional/ivy/data_type/as_ivy_dtype.rst", "functional/ivy/data_type/as_native_dtype.rst", "functional/ivy/data_type/astype.rst", "functional/ivy/data_type/broadcast_arrays.rst", "functional/ivy/data_type/broadcast_to.rst", "functional/ivy/data_type/can_cast.rst", "functional/ivy/data_type/can_cast/can_cast_array.rst", "functional/ivy/data_type/can_cast/can_cast_container.rst", "functional/ivy/data_type/can_cast/can_cast_functional.rst", "functional/ivy/data_type/can_cast/static_can_cast_container.rst", "functional/ivy/data_type/closest_valid_dtype.rst", "functional/ivy/data_type/default_dtype.rst", "functional/ivy/data_type/default_float_dtype.rst", "functional/ivy/data_type/default_int_dtype.rst", "functional/ivy/data_type/dtype.rst", "functional/ivy/data_type/dtype_bits.rst", "functional/ivy/data_type/finfo.rst", "functional/ivy/data_type/function_supported_dtypes.rst", "functional/ivy/data_type/function_unsupported_dtypes.rst", "functional/ivy/data_type/iinfo.rst", "functional/ivy/data_type/invalid_dtype.rst", "functional/ivy/data_type/is_float_dtype.rst", "functional/ivy/data_type/is_int_dtype.rst", "functional/ivy/data_type/promote_types.rst", "functional/ivy/data_type/result_type.rst", "functional/ivy/data_type/set_default_dtype.rst", "functional/ivy/data_type/set_default_float_dtype.rst", "functional/ivy/data_type/set_default_int_dtype.rst", "functional/ivy/data_type/type_promote_arrays.rst", "functional/ivy/data_type/unset_default_dtype.rst", "functional/ivy/data_type/unset_default_float_dtype.rst", "functional/ivy/data_type/unset_default_int_dtype.rst", "functional/ivy/data_type/valid_dtype.rst", "functional/ivy/device.rst", "functional/ivy/device/DefaultDevice:\n    \"\"\"\"\"\"\n\n    # noinspection PyShadowingNames\n    def __init__.rst", "functional/ivy/device/DevClonedItem.rst", "functional/ivy/device/DevClonedIter.rst", "functional/ivy/device/DevClonedNest.rst", "functional/ivy/device/DevDistItem.rst", "functional/ivy/device/DevDistIter.rst", "functional/ivy/device/DevDistNest.rst", "functional/ivy/device/DevManager:\n    \"\"\"\"\"\"\n\n    def __init__.rst", "functional/ivy/device/DevMapper.rst", "functional/ivy/device/DevMapperMultiProc.rst", "functional/ivy/device/MultiDev:\n    def __init__.rst", "functional/ivy/device/MultiDevItem.rst", "functional/ivy/device/MultiDevIter.rst", "functional/ivy/device/MultiDevNest.rst", "functional/ivy/device/Profiler.rst", "functional/ivy/device/as_ivy_dev.rst", "functional/ivy/device/as_native_dev.rst", "functional/ivy/device/clear_mem_on_dev.rst", "functional/ivy/device/default_device.rst", "functional/ivy/device/dev.rst", "functional/ivy/device/dev_clone.rst", "functional/ivy/device/dev_clone_array.rst", "functional/ivy/device/dev_clone_iter.rst", "functional/ivy/device/dev_clone_nest.rst", "functional/ivy/device/dev_dist.rst", "functional/ivy/device/dev_dist_array.rst", "functional/ivy/device/dev_dist_iter.rst", "functional/ivy/device/dev_dist_nest.rst", "functional/ivy/device/dev_unify.rst", "functional/ivy/device/dev_unify_array.rst", "functional/ivy/device/dev_unify_iter.rst", "functional/ivy/device/dev_unify_nest.rst", "functional/ivy/device/dev_util.rst", "functional/ivy/device/get_all_ivy_arrays_on_dev.rst", "functional/ivy/device/gpu_is_available.rst", "functional/ivy/device/num_cpu_cores.rst", "functional/ivy/device/num_gpus.rst", "functional/ivy/device/num_ivy_arrays_on_dev.rst", "functional/ivy/device/percent_used_mem_on_dev.rst", "functional/ivy/device/print_all_ivy_arrays_on_dev.rst", "functional/ivy/device/set_default_device.rst", "functional/ivy/device/set_split_factor.rst", "functional/ivy/device/split_factor.rst", "functional/ivy/device/split_func_call.rst", "functional/ivy/device/to_device.rst", "functional/ivy/device/total_mem_on_dev.rst", "functional/ivy/device/tpu_is_available.rst", "functional/ivy/device/unset_default_device.rst", "functional/ivy/device/used_mem_on_dev.rst", "functional/ivy/elementwise.rst", "functional/ivy/elementwise/abs.rst", "functional/ivy/elementwise/abs/abs_array.rst", "functional/ivy/elementwise/abs/abs_container.rst", "functional/ivy/elementwise/abs/abs_functional.rst", "functional/ivy/elementwise/abs/static_abs_container.rst", "functional/ivy/elementwise/acos.rst", "functional/ivy/elementwise/acos/acos_array.rst", "functional/ivy/elementwise/acos/acos_container.rst", "functional/ivy/elementwise/acos/acos_functional.rst", "functional/ivy/elementwise/acosh.rst", "functional/ivy/elementwise/acosh/acosh_array.rst", "functional/ivy/elementwise/acosh/acosh_container.rst", "functional/ivy/elementwise/acosh/acosh_functional.rst", "functional/ivy/elementwise/add.rst", "functional/ivy/elementwise/add/add_array.rst", "functional/ivy/elementwise/add/add_container.rst", "functional/ivy/elementwise/add/add_functional.rst", "functional/ivy/elementwise/add/static_add_container.rst", "functional/ivy/elementwise/asin.rst", "functional/ivy/elementwise/asin/asin_array.rst", "functional/ivy/elementwise/asin/asin_container.rst", "functional/ivy/elementwise/asin/asin_functional.rst", "functional/ivy/elementwise/asinh.rst", "functional/ivy/elementwise/asinh/asinh_array.rst", "functional/ivy/elementwise/asinh/asinh_container.rst", "functional/ivy/elementwise/asinh/asinh_functional.rst", "functional/ivy/elementwise/atan.rst", "functional/ivy/elementwise/atan/atan_array.rst", "functional/ivy/elementwise/atan/atan_container.rst", "functional/ivy/elementwise/atan/atan_functional.rst", "functional/ivy/elementwise/atan2.rst", "functional/ivy/elementwise/atan2/atan2_array.rst", "functional/ivy/elementwise/atan2/atan2_container.rst", "functional/ivy/elementwise/atan2/atan2_functional.rst", "functional/ivy/elementwise/atanh.rst", "functional/ivy/elementwise/atanh/atanh_array.rst", "functional/ivy/elementwise/atanh/atanh_container.rst", "functional/ivy/elementwise/atanh/atanh_functional.rst", "functional/ivy/elementwise/bitwise_and.rst", "functional/ivy/elementwise/bitwise_and/bitwise_and_array.rst", "functional/ivy/elementwise/bitwise_and/bitwise_and_container.rst", "functional/ivy/elementwise/bitwise_and/bitwise_and_functional.rst", "functional/ivy/elementwise/bitwise_invert.rst", "functional/ivy/elementwise/bitwise_invert/bitwise_invert_array.rst", "functional/ivy/elementwise/bitwise_invert/bitwise_invert_container.rst", "functional/ivy/elementwise/bitwise_invert/bitwise_invert_functional.rst", "functional/ivy/elementwise/bitwise_left_shift.rst", "functional/ivy/elementwise/bitwise_left_shift/bitwise_left_shift_array.rst", "functional/ivy/elementwise/bitwise_left_shift/bitwise_left_shift_container.rst", "functional/ivy/elementwise/bitwise_left_shift/bitwise_left_shift_functional.rst", "functional/ivy/elementwise/bitwise_or.rst", "functional/ivy/elementwise/bitwise_or/bitwise_or_array.rst", "functional/ivy/elementwise/bitwise_or/bitwise_or_container.rst", "functional/ivy/elementwise/bitwise_or/bitwise_or_functional.rst", "functional/ivy/elementwise/bitwise_right_shift.rst", "functional/ivy/elementwise/bitwise_right_shift/bitwise_right_shift_array.rst", "functional/ivy/elementwise/bitwise_right_shift/bitwise_right_shift_container.rst", "functional/ivy/elementwise/bitwise_right_shift/bitwise_right_shift_functional.rst", "functional/ivy/elementwise/bitwise_xor.rst", "functional/ivy/elementwise/bitwise_xor/bitwise_xor_array.rst", "functional/ivy/elementwise/bitwise_xor/bitwise_xor_container.rst", "functional/ivy/elementwise/bitwise_xor/bitwise_xor_functional.rst", "functional/ivy/elementwise/ceil.rst", "functional/ivy/elementwise/ceil/ceil_array.rst", "functional/ivy/elementwise/ceil/ceil_container.rst", "functional/ivy/elementwise/ceil/ceil_functional.rst", "functional/ivy/elementwise/cos.rst", "functional/ivy/elementwise/cos/cos_array.rst", "functional/ivy/elementwise/cos/cos_container.rst", "functional/ivy/elementwise/cos/cos_functional.rst", "functional/ivy/elementwise/cosh.rst", "functional/ivy/elementwise/cosh/cosh_array.rst", "functional/ivy/elementwise/cosh/cosh_container.rst", "functional/ivy/elementwise/cosh/cosh_functional.rst", "functional/ivy/elementwise/divide.rst", "functional/ivy/elementwise/divide/divide_array.rst", "functional/ivy/elementwise/divide/divide_container.rst", "functional/ivy/elementwise/divide/divide_functional.rst", "functional/ivy/elementwise/divide/static_divide_container.rst", "functional/ivy/elementwise/equal.rst", "functional/ivy/elementwise/equal/equal_array.rst", "functional/ivy/elementwise/equal/equal_container.rst", "functional/ivy/elementwise/equal/equal_functional.rst", "functional/ivy/elementwise/erf.rst", "functional/ivy/elementwise/erf/erf_array.rst", "functional/ivy/elementwise/erf/erf_container.rst", "functional/ivy/elementwise/erf/erf_functional.rst", "functional/ivy/elementwise/exp.rst", "functional/ivy/elementwise/exp/exp_array.rst", "functional/ivy/elementwise/exp/exp_container.rst", "functional/ivy/elementwise/exp/exp_functional.rst", "functional/ivy/elementwise/expm1.rst", "functional/ivy/elementwise/expm1/expm1_array.rst", "functional/ivy/elementwise/expm1/expm1_container.rst", "functional/ivy/elementwise/expm1/expm1_functional.rst", "functional/ivy/elementwise/floor.rst", "functional/ivy/elementwise/floor/floor_array.rst", "functional/ivy/elementwise/floor/floor_container.rst", "functional/ivy/elementwise/floor/floor_functional.rst", "functional/ivy/elementwise/floor_divide.rst", "functional/ivy/elementwise/floor_divide/floor_divide_array.rst", "functional/ivy/elementwise/floor_divide/floor_divide_container.rst", "functional/ivy/elementwise/floor_divide/floor_divide_functional.rst", "functional/ivy/elementwise/greater.rst", "functional/ivy/elementwise/greater/greater_array.rst", "functional/ivy/elementwise/greater/greater_container.rst", "functional/ivy/elementwise/greater/greater_functional.rst", "functional/ivy/elementwise/greater_equal.rst", "functional/ivy/elementwise/greater_equal/greater_equal_array.rst", "functional/ivy/elementwise/greater_equal/greater_equal_container.rst", "functional/ivy/elementwise/greater_equal/greater_equal_functional.rst", "functional/ivy/elementwise/isfinite.rst", "functional/ivy/elementwise/isfinite/isfinite_array.rst", "functional/ivy/elementwise/isfinite/isfinite_container.rst", "functional/ivy/elementwise/isfinite/isfinite_functional.rst", "functional/ivy/elementwise/isinf.rst", "functional/ivy/elementwise/isinf/isinf_array.rst", "functional/ivy/elementwise/isinf/isinf_container.rst", "functional/ivy/elementwise/isinf/isinf_functional.rst", "functional/ivy/elementwise/isnan.rst", "functional/ivy/elementwise/isnan/isnan_array.rst", "functional/ivy/elementwise/isnan/isnan_container.rst", "functional/ivy/elementwise/isnan/isnan_functional.rst", "functional/ivy/elementwise/less.rst", "functional/ivy/elementwise/less/less_array.rst", "functional/ivy/elementwise/less/less_container.rst", "functional/ivy/elementwise/less/less_functional.rst", "functional/ivy/elementwise/less_equal.rst", "functional/ivy/elementwise/less_equal/less_equal_array.rst", "functional/ivy/elementwise/less_equal/less_equal_container.rst", "functional/ivy/elementwise/less_equal/less_equal_functional.rst", "functional/ivy/elementwise/log.rst", "functional/ivy/elementwise/log/log_array.rst", "functional/ivy/elementwise/log/log_container.rst", "functional/ivy/elementwise/log/log_functional.rst", "functional/ivy/elementwise/log10.rst", "functional/ivy/elementwise/log10/log10_array.rst", "functional/ivy/elementwise/log10/log10_container.rst", "functional/ivy/elementwise/log10/log10_functional.rst", "functional/ivy/elementwise/log1p.rst", "functional/ivy/elementwise/log1p/log1p_array.rst", "functional/ivy/elementwise/log1p/log1p_container.rst", "functional/ivy/elementwise/log1p/log1p_functional.rst", "functional/ivy/elementwise/log2.rst", "functional/ivy/elementwise/log2/log2_array.rst", "functional/ivy/elementwise/log2/log2_container.rst", "functional/ivy/elementwise/log2/log2_functional.rst", "functional/ivy/elementwise/logaddexp.rst", "functional/ivy/elementwise/logaddexp/logaddexp_array.rst", "functional/ivy/elementwise/logaddexp/logaddexp_container.rst", "functional/ivy/elementwise/logaddexp/logaddexp_functional.rst", "functional/ivy/elementwise/logical_and.rst", "functional/ivy/elementwise/logical_and/logical_and_array.rst", "functional/ivy/elementwise/logical_and/logical_and_container.rst", "functional/ivy/elementwise/logical_and/logical_and_functional.rst", "functional/ivy/elementwise/logical_not.rst", "functional/ivy/elementwise/logical_not/logical_not_array.rst", "functional/ivy/elementwise/logical_not/logical_not_container.rst", "functional/ivy/elementwise/logical_not/logical_not_functional.rst", "functional/ivy/elementwise/logical_or.rst", "functional/ivy/elementwise/logical_or/logical_or_array.rst", "functional/ivy/elementwise/logical_or/logical_or_container.rst", "functional/ivy/elementwise/logical_or/logical_or_functional.rst", "functional/ivy/elementwise/logical_xor.rst", "functional/ivy/elementwise/logical_xor/logical_xor_array.rst", "functional/ivy/elementwise/logical_xor/logical_xor_container.rst", "functional/ivy/elementwise/logical_xor/logical_xor_functional.rst", "functional/ivy/elementwise/maximum.rst", "functional/ivy/elementwise/minimum.rst", "functional/ivy/elementwise/multiply.rst", "functional/ivy/elementwise/multiply/multiply_array.rst", "functional/ivy/elementwise/multiply/multiply_container.rst", "functional/ivy/elementwise/multiply/multiply_functional.rst", "functional/ivy/elementwise/multiply/static_multiply_container.rst", "functional/ivy/elementwise/negative.rst", "functional/ivy/elementwise/negative/negative_array.rst", "functional/ivy/elementwise/negative/negative_container.rst", "functional/ivy/elementwise/negative/negative_functional.rst", "functional/ivy/elementwise/not_equal.rst", "functional/ivy/elementwise/not_equal/not_equal_array.rst", "functional/ivy/elementwise/not_equal/not_equal_container.rst", "functional/ivy/elementwise/not_equal/not_equal_functional.rst", "functional/ivy/elementwise/positive.rst", "functional/ivy/elementwise/positive/positive_array.rst", "functional/ivy/elementwise/positive/positive_container.rst", "functional/ivy/elementwise/positive/positive_functional.rst", "functional/ivy/elementwise/pow.rst", "functional/ivy/elementwise/pow/pow_array.rst", "functional/ivy/elementwise/pow/pow_container.rst", "functional/ivy/elementwise/pow/pow_functional.rst", "functional/ivy/elementwise/remainder.rst", "functional/ivy/elementwise/remainder/remainder_array.rst", "functional/ivy/elementwise/remainder/remainder_container.rst", "functional/ivy/elementwise/remainder/remainder_functional.rst", "functional/ivy/elementwise/round.rst", "functional/ivy/elementwise/round/round_array.rst", "functional/ivy/elementwise/round/round_container.rst", "functional/ivy/elementwise/round/round_functional.rst", "functional/ivy/elementwise/sign.rst", "functional/ivy/elementwise/sign/sign_array.rst", "functional/ivy/elementwise/sign/sign_container.rst", "functional/ivy/elementwise/sign/sign_functional.rst", "functional/ivy/elementwise/sin.rst", "functional/ivy/elementwise/sin/sin_array.rst", "functional/ivy/elementwise/sin/sin_container.rst", "functional/ivy/elementwise/sin/sin_functional.rst", "functional/ivy/elementwise/sinh.rst", "functional/ivy/elementwise/sinh/sinh_array.rst", "functional/ivy/elementwise/sinh/sinh_container.rst", "functional/ivy/elementwise/sinh/sinh_functional.rst", "functional/ivy/elementwise/sqrt.rst", "functional/ivy/elementwise/sqrt/sqrt_array.rst", "functional/ivy/elementwise/sqrt/sqrt_container.rst", "functional/ivy/elementwise/sqrt/sqrt_functional.rst", "functional/ivy/elementwise/square.rst", "functional/ivy/elementwise/square/square_array.rst", "functional/ivy/elementwise/square/square_container.rst", "functional/ivy/elementwise/square/square_functional.rst", "functional/ivy/elementwise/subtract.rst", "functional/ivy/elementwise/subtract/static_subtract_container.rst", "functional/ivy/elementwise/subtract/subtract_array.rst", "functional/ivy/elementwise/subtract/subtract_container.rst", "functional/ivy/elementwise/subtract/subtract_functional.rst", "functional/ivy/elementwise/tan.rst", "functional/ivy/elementwise/tan/static_tan_container.rst", "functional/ivy/elementwise/tan/tan_array.rst", "functional/ivy/elementwise/tan/tan_container.rst", "functional/ivy/elementwise/tan/tan_functional.rst", "functional/ivy/elementwise/tanh.rst", "functional/ivy/elementwise/tanh/static_tanh_container.rst", "functional/ivy/elementwise/tanh/tanh_array.rst", "functional/ivy/elementwise/tanh/tanh_container.rst", "functional/ivy/elementwise/tanh/tanh_functional.rst", "functional/ivy/elementwise/trunc.rst", "functional/ivy/elementwise/trunc/trunc_array.rst", "functional/ivy/elementwise/trunc/trunc_container.rst", "functional/ivy/elementwise/trunc/trunc_functional.rst", "functional/ivy/general.rst", "functional/ivy/general/all_equal.rst", "functional/ivy/general/all_equal/all_equal_array.rst", "functional/ivy/general/all_equal/all_equal_container.rst", "functional/ivy/general/all_equal/all_equal_functional.rst", "functional/ivy/general/all_equal/static_all_equal_container.rst", "functional/ivy/general/arg_info.rst", "functional/ivy/general/arg_names.rst", "functional/ivy/general/array_equal.rst", "functional/ivy/general/arrays_equal.rst", "functional/ivy/general/assert_supports_inplace.rst", "functional/ivy/general/cache_fn.rst", "functional/ivy/general/clip_matrix_norm.rst", "functional/ivy/general/clip_vector_norm.rst", "functional/ivy/general/clip_vector_norm/clip_vector_norm_container.rst", "functional/ivy/general/clip_vector_norm/clip_vector_norm_functional.rst", "functional/ivy/general/container_types.rst", "functional/ivy/general/copy_array.rst", "functional/ivy/general/cumprod.rst", "functional/ivy/general/cumsum.rst", "functional/ivy/general/current_backend_str.rst", "functional/ivy/general/default.rst", "functional/ivy/general/einops_rearrange.rst", "functional/ivy/general/einops_reduce.rst", "functional/ivy/general/einops_repeat.rst", "functional/ivy/general/exists.rst", "functional/ivy/general/floormod.rst", "functional/ivy/general/fourier_encode.rst", "functional/ivy/general/gather.rst", "functional/ivy/general/gather_nd.rst", "functional/ivy/general/gather_nd/gather_nd_array.rst", "functional/ivy/general/gather_nd/gather_nd_container.rst", "functional/ivy/general/gather_nd/gather_nd_functional.rst", "functional/ivy/general/gather_nd/static_gather_nd_container.rst", "functional/ivy/general/get_all_arrays_in_memory.rst", "functional/ivy/general/get_min_base.rst", "functional/ivy/general/get_min_denominator.rst", "functional/ivy/general/get_num_dims.rst", "functional/ivy/general/get_referrers_recursive.rst", "functional/ivy/general/has_nans.rst", "functional/ivy/general/indices_where.rst", "functional/ivy/general/inplace_arrays_supported.rst", "functional/ivy/general/inplace_decrement.rst", "functional/ivy/general/inplace_increment.rst", "functional/ivy/general/inplace_update.rst", "functional/ivy/general/inplace_variables_supported.rst", "functional/ivy/general/is_array.rst", "functional/ivy/general/is_ivy_array.rst", "functional/ivy/general/is_ivy_container.rst", "functional/ivy/general/is_native_array.rst", "functional/ivy/general/match_kwargs.rst", "functional/ivy/general/multiprocessing.rst", "functional/ivy/general/num_arrays_in_memory.rst", "functional/ivy/general/one_hot.rst", "functional/ivy/general/print_all_arrays_in_memory.rst", "functional/ivy/general/queue_timeout.rst", "functional/ivy/general/scatter_flat.rst", "functional/ivy/general/scatter_nd.rst", "functional/ivy/general/set_min_base.rst", "functional/ivy/general/set_min_denominator.rst", "functional/ivy/general/set_queue_timeout.rst", "functional/ivy/general/set_tmp_dir.rst", "functional/ivy/general/shape.rst", "functional/ivy/general/shape_to_tuple.rst", "functional/ivy/general/stable_divide.rst", "functional/ivy/general/stable_pow.rst", "functional/ivy/general/supports_inplace.rst", "functional/ivy/general/tmp_dir.rst", "functional/ivy/general/to_list.rst", "functional/ivy/general/to_numpy.rst", "functional/ivy/general/to_scalar.rst", "functional/ivy/general/try_else_none.rst", "functional/ivy/general/unstack.rst", "functional/ivy/general/value_is_nan.rst", "functional/ivy/gradients.rst", "functional/ivy/gradients/GradientTracking:\n    \"\"\"\"\"\"\n\n    # noinspection PyShadowingNames\n    def __init__.rst", "functional/ivy/gradients/adam_step.rst", "functional/ivy/gradients/adam_step/adam_step_array.rst", "functional/ivy/gradients/adam_step/adam_step_container.rst", "functional/ivy/gradients/adam_step/adam_step_functional.rst", "functional/ivy/gradients/adam_step/static_adam_step_container.rst", "functional/ivy/gradients/adam_update.rst", "functional/ivy/gradients/adam_update/adam_update_container.rst", "functional/ivy/gradients/adam_update/adam_update_functional.rst", "functional/ivy/gradients/adam_update/static_adam_update_container.rst", "functional/ivy/gradients/execute_with_gradients.rst", "functional/ivy/gradients/gradient_descent_update.rst", "functional/ivy/gradients/gradient_descent_update/gradient_descent_update_container.rst", "functional/ivy/gradients/gradient_descent_update/gradient_descent_update_functional.rst", "functional/ivy/gradients/gradient_descent_update/static_gradient_descent_update_container.rst", "functional/ivy/gradients/is_variable.rst", "functional/ivy/gradients/is_variable/is_variable_container.rst", "functional/ivy/gradients/is_variable/is_variable_functional.rst", "functional/ivy/gradients/is_variable/static_is_variable_container.rst", "functional/ivy/gradients/lamb_update.rst", "functional/ivy/gradients/lamb_update/lamb_update_container.rst", "functional/ivy/gradients/lamb_update/lamb_update_functional.rst", "functional/ivy/gradients/lamb_update/static_lamb_update_container.rst", "functional/ivy/gradients/lars_update.rst", "functional/ivy/gradients/lars_update/lars_update_container.rst", "functional/ivy/gradients/lars_update/lars_update_functional.rst", "functional/ivy/gradients/lars_update/static_lars_update_container.rst", "functional/ivy/gradients/optimizer_update.rst", "functional/ivy/gradients/optimizer_update/optimizer_update_container.rst", "functional/ivy/gradients/optimizer_update/optimizer_update_functional.rst", "functional/ivy/gradients/optimizer_update/static_optimizer_update_container.rst", "functional/ivy/gradients/set_with_grads.rst", "functional/ivy/gradients/stop_gradient.rst", "functional/ivy/gradients/unset_with_grads.rst", "functional/ivy/gradients/variable.rst", "functional/ivy/gradients/variable_data.rst", "functional/ivy/gradients/with_grads.rst", "functional/ivy/layers.rst", "functional/ivy/layers/conv1d.rst", "functional/ivy/layers/conv1d_transpose.rst", "functional/ivy/layers/conv2d.rst", "functional/ivy/layers/conv2d_transpose.rst", "functional/ivy/layers/conv3d.rst", "functional/ivy/layers/conv3d_transpose.rst", "functional/ivy/layers/depthwise_conv2d.rst", "functional/ivy/layers/dropout.rst", "functional/ivy/layers/linear.rst", "functional/ivy/layers/lstm_update.rst", "functional/ivy/layers/multi_head_attention.rst", "functional/ivy/layers/scaled_dot_product_attention.rst", "functional/ivy/linear_algebra.rst", "functional/ivy/linear_algebra/cholesky.rst", "functional/ivy/linear_algebra/cholesky/cholesky_array.rst", "functional/ivy/linear_algebra/cholesky/cholesky_functional.rst", "functional/ivy/linear_algebra/cross.rst", "functional/ivy/linear_algebra/cross/cross_array.rst", "functional/ivy/linear_algebra/cross/cross_functional.rst", "functional/ivy/linear_algebra/det.rst", "functional/ivy/linear_algebra/det/det_array.rst", "functional/ivy/linear_algebra/det/det_functional.rst", "functional/ivy/linear_algebra/diagonal.rst", "functional/ivy/linear_algebra/diagonal/diagonal_array.rst", "functional/ivy/linear_algebra/diagonal/diagonal_functional.rst", "functional/ivy/linear_algebra/eigh.rst", "functional/ivy/linear_algebra/eigh/eigh_array.rst", "functional/ivy/linear_algebra/eigh/eigh_functional.rst", "functional/ivy/linear_algebra/eigvalsh.rst", "functional/ivy/linear_algebra/eigvalsh/eigvalsh_array.rst", "functional/ivy/linear_algebra/eigvalsh/eigvalsh_functional.rst", "functional/ivy/linear_algebra/inv.rst", "functional/ivy/linear_algebra/inv/inv_array.rst", "functional/ivy/linear_algebra/inv/inv_functional.rst", "functional/ivy/linear_algebra/matmul.rst", "functional/ivy/linear_algebra/matmul/matmul_array.rst", "functional/ivy/linear_algebra/matmul/matmul_container.rst", "functional/ivy/linear_algebra/matmul/matmul_functional.rst", "functional/ivy/linear_algebra/matrix_norm.rst", "functional/ivy/linear_algebra/matrix_norm/matrix_norm_array.rst", "functional/ivy/linear_algebra/matrix_norm/matrix_norm_functional.rst", "functional/ivy/linear_algebra/matrix_power.rst", "functional/ivy/linear_algebra/matrix_rank.rst", "functional/ivy/linear_algebra/matrix_rank/matrix_rank_array.rst", "functional/ivy/linear_algebra/matrix_rank/matrix_rank_functional.rst", "functional/ivy/linear_algebra/matrix_transpose.rst", "functional/ivy/linear_algebra/matrix_transpose/matrix_transpose_array.rst", "functional/ivy/linear_algebra/matrix_transpose/matrix_transpose_functional.rst", "functional/ivy/linear_algebra/outer.rst", "functional/ivy/linear_algebra/outer/outer_array.rst", "functional/ivy/linear_algebra/outer/outer_functional.rst", "functional/ivy/linear_algebra/pinv.rst", "functional/ivy/linear_algebra/pinv/pinv_array.rst", "functional/ivy/linear_algebra/pinv/pinv_functional.rst", "functional/ivy/linear_algebra/qr.rst", "functional/ivy/linear_algebra/qr/qr_array.rst", "functional/ivy/linear_algebra/qr/qr_functional.rst", "functional/ivy/linear_algebra/slogdet.rst", "functional/ivy/linear_algebra/solve.rst", "functional/ivy/linear_algebra/solve/solve_array.rst", "functional/ivy/linear_algebra/solve/solve_functional.rst", "functional/ivy/linear_algebra/svd.rst", "functional/ivy/linear_algebra/svd/svd_array.rst", "functional/ivy/linear_algebra/svd/svd_functional.rst", "functional/ivy/linear_algebra/svdvals.rst", "functional/ivy/linear_algebra/svdvals/svdvals_array.rst", "functional/ivy/linear_algebra/svdvals/svdvals_functional.rst", "functional/ivy/linear_algebra/tensordot.rst", "functional/ivy/linear_algebra/tensordot/tensordot_array.rst", "functional/ivy/linear_algebra/tensordot/tensordot_functional.rst", "functional/ivy/linear_algebra/trace.rst", "functional/ivy/linear_algebra/trace/trace_array.rst", "functional/ivy/linear_algebra/trace/trace_functional.rst", "functional/ivy/linear_algebra/vecdot.rst", "functional/ivy/linear_algebra/vecdot/vecdot_array.rst", "functional/ivy/linear_algebra/vecdot/vecdot_functional.rst", "functional/ivy/linear_algebra/vector_norm.rst", "functional/ivy/linear_algebra/vector_norm/vector_norm_array.rst", "functional/ivy/linear_algebra/vector_norm/vector_norm_functional.rst", "functional/ivy/linear_algebra/vector_to_skew_symmetric_matrix.rst", "functional/ivy/linear_algebra/vector_to_skew_symmetric_matrix/vector_to_skew_symmetric_matrix_array.rst", "functional/ivy/linear_algebra/vector_to_skew_symmetric_matrix/vector_to_skew_symmetric_matrix_functional.rst", "functional/ivy/losses.rst", "functional/ivy/losses/binary_cross_entropy.rst", "functional/ivy/losses/binary_cross_entropy/binary_cross_entropy_array.rst", "functional/ivy/losses/binary_cross_entropy/binary_cross_entropy_container.rst", "functional/ivy/losses/binary_cross_entropy/binary_cross_entropy_functional.rst", "functional/ivy/losses/binary_cross_entropy/static_binary_cross_entropy_container.rst", "functional/ivy/losses/cross_entropy.rst", "functional/ivy/losses/cross_entropy/cross_entropy_array.rst", "functional/ivy/losses/cross_entropy/cross_entropy_container.rst", "functional/ivy/losses/cross_entropy/cross_entropy_functional.rst", "functional/ivy/losses/cross_entropy/static_cross_entropy_container.rst", "functional/ivy/losses/sparse_cross_entropy.rst", "functional/ivy/losses/sparse_cross_entropy/sparse_cross_entropy_array.rst", "functional/ivy/losses/sparse_cross_entropy/sparse_cross_entropy_container.rst", "functional/ivy/losses/sparse_cross_entropy/sparse_cross_entropy_functional.rst", "functional/ivy/losses/sparse_cross_entropy/static_sparse_cross_entropy_container.rst", "functional/ivy/manipulation.rst", "functional/ivy/manipulation/clip.rst", "functional/ivy/manipulation/clip/clip_array.rst", "functional/ivy/manipulation/clip/clip_container.rst", "functional/ivy/manipulation/clip/clip_functional.rst", "functional/ivy/manipulation/clip/static_clip_container.rst", "functional/ivy/manipulation/concat.rst", "functional/ivy/manipulation/concat/concat_array.rst", "functional/ivy/manipulation/concat/concat_container.rst", "functional/ivy/manipulation/concat/concat_functional.rst", "functional/ivy/manipulation/constant_pad.rst", "functional/ivy/manipulation/constant_pad/constant_pad_array.rst", "functional/ivy/manipulation/constant_pad/constant_pad_container.rst", "functional/ivy/manipulation/constant_pad/constant_pad_functional.rst", "functional/ivy/manipulation/expand_dims.rst", "functional/ivy/manipulation/expand_dims/expand_dims_array.rst", "functional/ivy/manipulation/expand_dims/expand_dims_container.rst", "functional/ivy/manipulation/expand_dims/expand_dims_functional.rst", "functional/ivy/manipulation/flip.rst", "functional/ivy/manipulation/flip/flip_array.rst", "functional/ivy/manipulation/flip/flip_container.rst", "functional/ivy/manipulation/flip/flip_functional.rst", "functional/ivy/manipulation/permute_dims.rst", "functional/ivy/manipulation/permute_dims/permute_dims_array.rst", "functional/ivy/manipulation/permute_dims/permute_dims_container.rst", "functional/ivy/manipulation/permute_dims/permute_dims_functional.rst", "functional/ivy/manipulation/repeat.rst", "functional/ivy/manipulation/repeat/repeat_array.rst", "functional/ivy/manipulation/repeat/repeat_container.rst", "functional/ivy/manipulation/repeat/repeat_functional.rst", "functional/ivy/manipulation/reshape.rst", "functional/ivy/manipulation/reshape/reshape_array.rst", "functional/ivy/manipulation/reshape/reshape_container.rst", "functional/ivy/manipulation/reshape/reshape_functional.rst", "functional/ivy/manipulation/roll.rst", "functional/ivy/manipulation/roll/roll_array.rst", "functional/ivy/manipulation/roll/roll_container.rst", "functional/ivy/manipulation/roll/roll_functional.rst", "functional/ivy/manipulation/roll/static_roll_container.rst", "functional/ivy/manipulation/split.rst", "functional/ivy/manipulation/squeeze.rst", "functional/ivy/manipulation/squeeze/squeeze_array.rst", "functional/ivy/manipulation/squeeze/squeeze_container.rst", "functional/ivy/manipulation/squeeze/squeeze_functional.rst", "functional/ivy/manipulation/stack.rst", "functional/ivy/manipulation/stack/stack_array.rst", "functional/ivy/manipulation/stack/stack_container.rst", "functional/ivy/manipulation/stack/stack_functional.rst", "functional/ivy/manipulation/swapaxes.rst", "functional/ivy/manipulation/swapaxes/swapaxes_array.rst", "functional/ivy/manipulation/swapaxes/swapaxes_container.rst", "functional/ivy/manipulation/swapaxes/swapaxes_functional.rst", "functional/ivy/manipulation/tile.rst", "functional/ivy/manipulation/tile/tile_array.rst", "functional/ivy/manipulation/tile/tile_container.rst", "functional/ivy/manipulation/tile/tile_functional.rst", "functional/ivy/manipulation/zero_pad.rst", "functional/ivy/manipulation/zero_pad/zero_pad_array.rst", "functional/ivy/manipulation/zero_pad/zero_pad_container.rst", "functional/ivy/manipulation/zero_pad/zero_pad_functional.rst", "functional/ivy/meta.rst", "functional/ivy/meta/fomaml_step.rst", "functional/ivy/meta/maml_step.rst", "functional/ivy/meta/reptile_step.rst", "functional/ivy/nest.rst", "functional/ivy/nest/all_nested_indices.rst", "functional/ivy/nest/copy_nest.rst", "functional/ivy/nest/index_nest.rst", "functional/ivy/nest/insert_into_nest_at_index.rst", "functional/ivy/nest/insert_into_nest_at_indices.rst", "functional/ivy/nest/map.rst", "functional/ivy/nest/map_nest_at_index.rst", "functional/ivy/nest/map_nest_at_indices.rst", "functional/ivy/nest/multi_index_nest.rst", "functional/ivy/nest/nested_any.rst", "functional/ivy/nest/nested_indices_where.rst", "functional/ivy/nest/nested_map.rst", "functional/ivy/nest/nested_multi_map.rst", "functional/ivy/nest/prune_nest_at_index.rst", "functional/ivy/nest/prune_nest_at_indices.rst", "functional/ivy/nest/set_nest_at_index.rst", "functional/ivy/nest/set_nest_at_indices.rst", "functional/ivy/norms.rst", "functional/ivy/norms/layer_norm.rst", "functional/ivy/norms/layer_norm/layer_norm_array.rst", "functional/ivy/norms/layer_norm/layer_norm_container.rst", "functional/ivy/norms/layer_norm/layer_norm_functional.rst", "functional/ivy/random.rst", "functional/ivy/random/multinomial.rst", "functional/ivy/random/randint.rst", "functional/ivy/random/randint/randint_functional.rst", "functional/ivy/random/randint/static_randint_container.rst", "functional/ivy/random/random_normal.rst", "functional/ivy/random/random_uniform.rst", "functional/ivy/random/random_uniform/random_uniform_container.rst", "functional/ivy/random/random_uniform/random_uniform_functional.rst", "functional/ivy/random/random_uniform/static_random_uniform_container.rst", "functional/ivy/random/seed.rst", "functional/ivy/random/shuffle.rst", "functional/ivy/searching.rst", "functional/ivy/searching/argmax.rst", "functional/ivy/searching/argmin.rst", "functional/ivy/searching/nonzero.rst", "functional/ivy/searching/where.rst", "functional/ivy/set.rst", "functional/ivy/set/unique_all.rst", "functional/ivy/set/unique_counts.rst", "functional/ivy/set/unique_counts/static_unique_counts_container.rst", "functional/ivy/set/unique_counts/unique_counts_array.rst", "functional/ivy/set/unique_counts/unique_counts_container.rst", "functional/ivy/set/unique_counts/unique_counts_functional.rst", "functional/ivy/set/unique_inverse.rst", "functional/ivy/set/unique_values.rst", "functional/ivy/sorting.rst", "functional/ivy/sorting/argsort.rst", "functional/ivy/sorting/argsort/argsort_array.rst", "functional/ivy/sorting/argsort/argsort_container.rst", "functional/ivy/sorting/argsort/argsort_functional.rst", "functional/ivy/sorting/argsort/static_argsort_container.rst", "functional/ivy/sorting/sort.rst", "functional/ivy/sorting/sort/sort_array.rst", "functional/ivy/sorting/sort/sort_container.rst", "functional/ivy/sorting/sort/sort_functional.rst", "functional/ivy/sorting/sort/static_sort_container.rst", "functional/ivy/statistical.rst", "functional/ivy/statistical/einsum.rst", "functional/ivy/statistical/einsum/einsum_array.rst", "functional/ivy/statistical/einsum/einsum_container.rst", "functional/ivy/statistical/einsum/einsum_functional.rst", "functional/ivy/statistical/max.rst", "functional/ivy/statistical/max/max_array.rst", "functional/ivy/statistical/max/max_container.rst", "functional/ivy/statistical/max/max_functional.rst", "functional/ivy/statistical/mean.rst", "functional/ivy/statistical/mean/mean_array.rst", "functional/ivy/statistical/mean/mean_container.rst", "functional/ivy/statistical/mean/mean_functional.rst", "functional/ivy/statistical/min.rst", "functional/ivy/statistical/min/min_array.rst", "functional/ivy/statistical/min/min_container.rst", "functional/ivy/statistical/min/min_functional.rst", "functional/ivy/statistical/prod.rst", "functional/ivy/statistical/prod/prod_array.rst", "functional/ivy/statistical/prod/prod_container.rst", "functional/ivy/statistical/prod/prod_functional.rst", "functional/ivy/statistical/std.rst", "functional/ivy/statistical/std/std_array.rst", "functional/ivy/statistical/std/std_container.rst", "functional/ivy/statistical/std/std_functional.rst", "functional/ivy/statistical/sum.rst", "functional/ivy/statistical/sum/sum_array.rst", "functional/ivy/statistical/sum/sum_container.rst", "functional/ivy/statistical/sum/sum_functional.rst", "functional/ivy/statistical/var.rst", "functional/ivy/statistical/var/var_array.rst", "functional/ivy/statistical/var/var_container.rst", "functional/ivy/statistical/var/var_functional.rst", "functional/ivy/utility.rst", "functional/ivy/utility/all.rst", "functional/ivy/utility/all/all_array.rst", "functional/ivy/utility/all/all_container.rst", "functional/ivy/utility/all/all_functional.rst", "functional/ivy/utility/all/static_all_container.rst", "functional/ivy/utility/any.rst", "functional/ivy/utility/any/any_array.rst", "functional/ivy/utility/any/any_container.rst", "functional/ivy/utility/any/any_functional.rst", "functional/ivy/utility/any/static_any_container.rst", "index.rst", "index_append.rst", "index_prepend.rst", "inspection.rst", "inspection/add_array_specs.rst", "inspection/fn_array_spec.rst", "roadmap.rst", "supported_frameworks.rst", "verbosity.rst", "verbosity/cprint.rst"], "titles": ["Backend handler", "&lt;no title&gt;", "choose_random_backend", "clear_backend_stack", "current_backend", "get_backend", "set_backend", "try_import_ivy_jax", "try_import_ivy_mxnet", "try_import_ivy_numpy", "try_import_ivy_tf", "try_import_ivy_torch", "unset_backend", "Background", "ML Explosion", "Standardization", "Why Unify?", "Data classes", "Array", "Activations", "ArrayWithActivations", "Conversions", "args_to_ivy", "args_to_native", "to_ivy", "to_native", "Creation", "ArrayWithCreation", "Data type", "ArrayWithDataTypes", "Device", "ArrayWithDevice", "Elementwise", "ArrayWithElementwise", "General", "ArrayWithGeneral", "Gradients", "ArrayWithGradients", "Image", "ArrayWithImage", "Layers", "ArrayWithLayers", "Linear algebra", "ArrayWithLinearAlgebra", "Losses", "ArrayWithLosses", "Manipulation", "ArrayWithManipulation", "Norms", "ArrayWithNorms", "Random", "ArrayWithRandom", "Searching", "ArrayWithSearching", "Set", "ArrayWithSet", "Sorting", "ArrayWithSorting", "Statistical", "ArrayWithStatistical", "Utility", "ArrayWithUtility", "Wrapping", "add_ivy_array_instance_methods", "Container", "Activations", "ContainerWithActivations", "Base", "ContainerBase", "Container", "Container", "MultiDevContainer", "Creation", "ContainerWithCreation", "Data type", "ContainerWithDataTypes", "Device", "ContainerWithDevice", "Elementwise", "ContainerWithElementwise", "General", "ContainerWithGeneral", "Gradients", "ContainerWithGradients", "Image", "ContainerWithImage", "Layers", "ContainerWithLayers", "Linear algebra", "ContainerWithLinearAlgebra", "Losses", "ContainerWithLosses", "Manipulation", "ContainerWithManipulation", "Norms", "ContainerWithNorms", "Random", "ContainerWithRandom", "Searching", "ContainerWithSearching", "Set", "ContainerWithSet", "Sorting", "ContainerWithSorting", "Statistical", "ContainerWithStatistical", "Utility", "ContainerWithUtility", "Wrapping", "add_ivy_container_instance_methods", "Framework classes", "Activations", "GEGLU", "GELU", "Converters", "to_ivy_module", "Initializers", "&lt;no title&gt;", "FirstLayerSiren", "GlorotUniform", "&lt;no title&gt;", "Ones", "Siren", "&lt;no title&gt;", "Zeros", "Layers", "Conv1D", "Conv1DTranspose", "Conv2D", "Conv2DTranspose", "Conv3D", "Conv3DTranspose", "DepthwiseConv2D", "Dropout", "LSTM", "Linear", "MultiHeadAttention", "Module", "Module", "Norms", "LayerNorm", "Optimizers", "Adam", "LAMB", "LARS", "Optimizer", "SGD", "Sequential", "Sequential", "Contributing", "Setting Up", "The Basics", "Open Tasks", "Building the Docs", "Deep Dive", "Navigating the Code", "Docstrings", "Docstring Examples", "Array API Tests", "Ivy Tests", "Function Types", "Backend Setting", "Function Wrapping", "Arrays", "Containers", "Data Types", "Devices", "Inplace Updates", "Function Arguments", "Design", "Building Blocks", "Ivy as a Framework", "Ivy Array", "Ivy Container", "Ivy Stateful API", "Ivy as a Transpiler", "Ivy", "Ivy builder", "Ivy ecosystem", "Ivy gym", "Ivy mech", "Ivy memory", "Ivy models", "Ivy robot", "Ivy vision", "Extensions", "Applied Libraries", "FAQ", "Func wrapper", "handle_nestable", "handle_out_argument", "infer_device", "infer_dtype", "inputs_to_ivy_arrays", "inputs_to_native_arrays", "outputs_to_ivy_arrays", "to_native_arrays_and_back", "&lt;no title&gt;", "Activations", "gelu", "leaky_relu", "relu", "sigmoid", "softmax", "softplus", "ivy.Array.softplus", "ivy.Container.softplus", "ivy.softplus", "ivy.Container.static_softplus", "tanh", "Compilation", "compile", "Constants", "Creation", "arange", "asarray", "ivy.Array.asarray", "ivy.asarray", "empty", "empty_like", "ivy.Array.empty_like", "ivy.empty_like", "eye", "from_dlpack", "ivy.Array.from_dlpack", "ivy.from_dlpack", "full", "full_like", "ivy.Array.full_like", "ivy.full_like", "linspace", "logspace", "meshgrid", "ivy.Array.meshgrid", "ivy.meshgrid", "native_array", "ivy.Array.native_array", "ivy.native_array", "ones", "ones_like", "ivy.Array.ones_like", "ivy.ones_like", "tril", "ivy.Array.tril", "ivy.tril", "triu", "ivy.Array.triu", "ivy.triu", "zeros", "zeros_like", "ivy.Array.zeros_like", "ivy.zeros_like", "Data type", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "as_ivy_dtype", "as_native_dtype", "astype", "broadcast_arrays", "broadcast_to", "can_cast", "ivy.Array.can_cast", "ivy.Container.can_cast", "ivy.can_cast", "ivy.Container.static_can_cast", "closest_valid_dtype", "default_dtype", "default_float_dtype", "default_int_dtype", "dtype", "dtype_bits", "finfo", "function_supported_dtypes", "function_unsupported_dtypes", "iinfo", "invalid_dtype", "is_float_dtype", "is_int_dtype", "promote_types", "result_type", "set_default_dtype", "set_default_float_dtype", "set_default_int_dtype", "type_promote_arrays", "unset_default_dtype", "unset_default_float_dtype", "unset_default_int_dtype", "valid_dtype", "Device", "&lt;no title&gt;", "DevClonedItem", "DevClonedIter", "DevClonedNest", "DevDistItem", "DevDistIter", "DevDistNest", "&lt;no title&gt;", "DevMapper", "DevMapperMultiProc", "&lt;no title&gt;", "MultiDevItem", "MultiDevIter", "MultiDevNest", "Profiler", "as_ivy_dev", "as_native_dev", "clear_mem_on_dev", "default_device", "dev", "dev_clone", "dev_clone_array", "dev_clone_iter", "dev_clone_nest", "dev_dist", "dev_dist_array", "dev_dist_iter", "dev_dist_nest", "dev_unify", "dev_unify_array", "dev_unify_iter", "dev_unify_nest", "dev_util", "get_all_ivy_arrays_on_dev", "gpu_is_available", "num_cpu_cores", "num_gpus", "num_ivy_arrays_on_dev", "percent_used_mem_on_dev", "print_all_ivy_arrays_on_dev", "set_default_device", "set_split_factor", "split_factor", "split_func_call", "to_device", "total_mem_on_dev", "tpu_is_available", "unset_default_device", "used_mem_on_dev", "Elementwise", "abs", "ivy.Array.abs", "ivy.Container.abs", "ivy.abs", "ivy.Container.static_abs", "acos", "ivy.Array.acos", "ivy.Container.acos", "ivy.acos", "acosh", "ivy.Array.acosh", "ivy.Container.acosh", "ivy.acosh", "add", "ivy.Array.add", "ivy.Container.add", "ivy.add", "ivy.Container.static_add", "asin", "ivy.Array.asin", "ivy.Container.asin", "ivy.asin", "asinh", "ivy.Array.asinh", "ivy.Container.asinh", "ivy.asinh", "atan", "ivy.Array.atan", "ivy.Container.atan", "ivy.atan", "atan2", "ivy.Array.atan2", "ivy.Container.atan2", "ivy.atan2", "atanh", "ivy.Array.atanh", "ivy.Container.atanh", "ivy.atanh", "bitwise_and", "ivy.Array.bitwise_and", "ivy.Container.bitwise_and", "ivy.bitwise_and", "bitwise_invert", "ivy.Array.bitwise_invert", "ivy.Container.bitwise_invert", "ivy.bitwise_invert", "bitwise_left_shift", "ivy.Array.bitwise_left_shift", "ivy.Container.bitwise_left_shift", "ivy.bitwise_left_shift", "bitwise_or", "ivy.Array.bitwise_or", "ivy.Container.bitwise_or", "ivy.bitwise_or", "bitwise_right_shift", "ivy.Array.bitwise_right_shift", "ivy.Container.bitwise_right_shift", "ivy.bitwise_right_shift", "bitwise_xor", "ivy.Array.bitwise_xor", "ivy.Container.bitwise_xor", "ivy.bitwise_xor", "ceil", "ivy.Array.ceil", "ivy.Container.ceil", "ivy.ceil", "cos", "ivy.Array.cos", "ivy.Container.cos", "ivy.cos", "cosh", "ivy.Array.cosh", "ivy.Container.cosh", "ivy.cosh", "divide", "ivy.Array.divide", "ivy.Container.divide", "ivy.divide", "ivy.Container.static_divide", "equal", "ivy.Array.equal", "ivy.Container.equal", "ivy.equal", "erf", "ivy.Array.erf", "ivy.Container.erf", "ivy.erf", "exp", "ivy.Array.exp", "ivy.Container.exp", "ivy.exp", "expm1", "ivy.Array.expm1", "ivy.Container.expm1", "ivy.expm1", "floor", "ivy.Array.floor", "ivy.Container.floor", "ivy.floor", "floor_divide", "ivy.Array.floor_divide", "ivy.Container.floor_divide", "ivy.floor_divide", "greater", "ivy.Array.greater", "ivy.Container.greater", "ivy.greater", "greater_equal", "ivy.Array.greater_equal", "ivy.Container.greater_equal", "ivy.greater_equal", "isfinite", "ivy.Array.isfinite", "ivy.Container.isfinite", "ivy.isfinite", "isinf", "ivy.Array.isinf", "ivy.Container.isinf", "ivy.isinf", "isnan", "ivy.Array.isnan", "ivy.Container.isnan", "ivy.isnan", "less", "ivy.Array.less", "ivy.Container.less", "ivy.less", "less_equal", "ivy.Array.less_equal", "ivy.Container.less_equal", "ivy.less_equal", "log", "ivy.Array.log", "ivy.Container.log", "ivy.log", "log10", "ivy.Array.log10", "ivy.Container.log10", "ivy.log10", "log1p", "ivy.Array.log1p", "ivy.Container.log1p", "ivy.log1p", "log2", "ivy.Array.log2", "ivy.Container.log2", "ivy.log2", "logaddexp", "ivy.Array.logaddexp", "ivy.Container.logaddexp", "ivy.logaddexp", "logical_and", "ivy.Array.logical_and", "ivy.Container.logical_and", "ivy.logical_and", "logical_not", "ivy.Array.logical_not", "ivy.Container.logical_not", "ivy.logical_not", "logical_or", "ivy.Array.logical_or", "ivy.Container.logical_or", "ivy.logical_or", "logical_xor", "ivy.Array.logical_xor", "ivy.Container.logical_xor", "ivy.logical_xor", "maximum", "minimum", "multiply", "ivy.Array.multiply", "ivy.Container.multiply", "ivy.multiply", "ivy.Container.static_multiply", "negative", "ivy.Array.negative", "ivy.Container.negative", "ivy.negative", "not_equal", "ivy.Array.not_equal", "ivy.Container.not_equal", "ivy.not_equal", "positive", "ivy.Array.positive", "ivy.Container.positive", "ivy.positive", "pow", "ivy.Array.pow", "ivy.Container.pow", "ivy.pow", "remainder", "ivy.Array.remainder", "ivy.Container.remainder", "ivy.remainder", "round", "ivy.Array.round", "ivy.Container.round", "ivy.round", "sign", "ivy.Array.sign", "ivy.Container.sign", "ivy.sign", "sin", "ivy.Array.sin", "ivy.Container.sin", "ivy.sin", "sinh", "ivy.Array.sinh", "ivy.Container.sinh", "ivy.sinh", "sqrt", "ivy.Array.sqrt", "ivy.Container.sqrt", "ivy.sqrt", "square", "ivy.Array.square", "ivy.Container.square", "ivy.square", "subtract", "ivy.Container.static_subtract", "ivy.Array.subtract", "ivy.Container.subtract", "ivy.subtract", "tan", "ivy.Container.static_tan", "ivy.Array.tan", "ivy.Container.tan", "ivy.tan", "tanh", "ivy.Container.static_tanh", "ivy.Array.tanh", "ivy.Container.tanh", "ivy.tanh", "trunc", "ivy.Array.trunc", "ivy.Container.trunc", "ivy.trunc", "General", "all_equal", "ivy.Array.all_equal", "ivy.Container.all_equal", "ivy.all_equal", "ivy.Container.static_all_equal", "arg_info", "arg_names", "array_equal", "arrays_equal", "assert_supports_inplace", "cache_fn", "clip_matrix_norm", "clip_vector_norm", "ivy.Container.clip_vector_norm", "ivy.clip_vector_norm", "container_types", "copy_array", "cumprod", "cumsum", "current_backend_str", "default", "einops_rearrange", "einops_reduce", "einops_repeat", "exists", "floormod", "fourier_encode", "gather", "gather_nd", "ivy.Array.gather_nd", "ivy.Container.gather_nd", "ivy.gather_nd", "ivy.Container.static_gather_nd", "get_all_arrays_in_memory", "get_min_base", "get_min_denominator", "get_num_dims", "get_referrers_recursive", "has_nans", "indices_where", "inplace_arrays_supported", "inplace_decrement", "inplace_increment", "inplace_update", "inplace_variables_supported", "is_array", "is_ivy_array", "is_ivy_container", "is_native_array", "match_kwargs", "multiprocessing", "num_arrays_in_memory", "one_hot", "print_all_arrays_in_memory", "queue_timeout", "scatter_flat", "scatter_nd", "set_min_base", "set_min_denominator", "set_queue_timeout", "set_tmp_dir", "shape", "shape_to_tuple", "stable_divide", "stable_pow", "supports_inplace", "tmp_dir", "to_list", "to_numpy", "to_scalar", "try_else_none", "unstack", "value_is_nan", "Gradients", "&lt;no title&gt;", "adam_step", "ivy.Array.adam_step", "ivy.Container.adam_step", "ivy.adam_step", "ivy.Container.static_adam_step", "adam_update", "ivy.Container.adam_update", "ivy.adam_update", "ivy.Container.static_adam_update", "execute_with_gradients", "gradient_descent_update", "ivy.Container.gradient_descent_update", "ivy.gradient_descent_update", "ivy.Container.static_gradient_descent_update", "is_variable", "ivy.Container.is_variable", "ivy.is_variable", "ivy.Container.static_is_variable", "lamb_update", "ivy.Container.lamb_update", "ivy.lamb_update", "ivy.Container.static_lamb_update", "lars_update", "ivy.Container.lars_update", "ivy.lars_update", "ivy.Container.static_lars_update", "optimizer_update", "ivy.Container.optimizer_update", "ivy.optimizer_update", "ivy.Container.static_optimizer_update", "set_with_grads", "stop_gradient", "unset_with_grads", "variable", "variable_data", "with_grads", "Layers", "conv1d", "conv1d_transpose", "conv2d", "conv2d_transpose", "conv3d", "conv3d_transpose", "depthwise_conv2d", "dropout", "linear", "lstm_update", "multi_head_attention", "scaled_dot_product_attention", "Linear algebra", "cholesky", "ivy.Array.cholesky", "ivy.cholesky", "cross", "ivy.Array.cross", "ivy.cross", "det", "ivy.Array.det", "ivy.det", "diagonal", "ivy.Array.diagonal", "ivy.diagonal", "eigh", "ivy.Array.eigh", "ivy.eigh", "eigvalsh", "ivy.Array.eigvalsh", "ivy.eigvalsh", "inv", "ivy.Array.inv", "ivy.inv", "matmul", "ivy.Array.matmul", "ivy.Container.matmul", "ivy.matmul", "matrix_norm", "ivy.Array.matrix_norm", "ivy.matrix_norm", "matrix_power", "matrix_rank", "ivy.Array.matrix_rank", "ivy.matrix_rank", "matrix_transpose", "ivy.Array.matrix_transpose", "ivy.matrix_transpose", "outer", "ivy.Array.outer", "ivy.outer", "pinv", "ivy.Array.pinv", "ivy.pinv", "qr", "ivy.Array.qr", "ivy.qr", "slogdet", "solve", "ivy.Array.solve", "ivy.solve", "svd", "ivy.Array.svd", "ivy.svd", "svdvals", "ivy.Array.svdvals", "ivy.svdvals", "tensordot", "ivy.Array.tensordot", "ivy.tensordot", "trace", "ivy.Array.trace", "ivy.trace", "vecdot", "ivy.Array.vecdot", "ivy.vecdot", "vector_norm", "ivy.Array.vector_norm", "ivy.vector_norm", "vector_to_skew_symmetric_matrix", "ivy.Array.vector_to_skew_symmetric_matrix", "ivy.vector_to_skew_symmetric_matrix", "Losses", "binary_cross_entropy", "ivy.Array.binary_cross_entropy", "ivy.Container.binary_cross_entropy", "ivy.binary_cross_entropy", "ivy.Container.static_binary_cross_entropy", "cross_entropy", "ivy.Array.cross_entropy", "ivy.Container.cross_entropy", "ivy.cross_entropy", "ivy.Container.static_cross_entropy", "sparse_cross_entropy", "ivy.Array.sparse_cross_entropy", "ivy.Container.sparse_cross_entropy", "ivy.sparse_cross_entropy", "ivy.Container.static_sparse_cross_entropy", "Manipulation", "clip", "ivy.Array.clip", "ivy.Container.clip", "ivy.clip", "ivy.Container.static_clip", "concat", "ivy.Array.concat", "ivy.Container.concat", "ivy.concat", "constant_pad", "ivy.Array.constant_pad", "ivy.Container.constant_pad", "ivy.constant_pad", "expand_dims", "ivy.Array.expand_dims", "ivy.Container.expand_dims", "ivy.expand_dims", "flip", "ivy.Array.flip", "ivy.Container.flip", "ivy.flip", "permute_dims", "ivy.Array.permute_dims", "ivy.Container.permute_dims", "ivy.permute_dims", "repeat", "ivy.Array.repeat", "ivy.Container.repeat", "ivy.repeat", "reshape", "ivy.Array.reshape", "ivy.Container.reshape", "ivy.reshape", "roll", "ivy.Array.roll", "ivy.Container.roll", "ivy.roll", "ivy.Container.static_roll", "split", "squeeze", "ivy.Array.squeeze", "ivy.Container.squeeze", "ivy.squeeze", "stack", "ivy.Array.stack", "ivy.Container.stack", "ivy.stack", "swapaxes", "ivy.Array.swapaxes", "ivy.Container.swapaxes", "ivy.swapaxes", "tile", "ivy.Array.tile", "ivy.Container.tile", "ivy.tile", "zero_pad", "ivy.Array.zero_pad", "ivy.Container.zero_pad", "ivy.zero_pad", "Meta", "fomaml_step", "maml_step", "reptile_step", "Nest", "all_nested_indices", "copy_nest", "index_nest", "insert_into_nest_at_index", "insert_into_nest_at_indices", "map", "map_nest_at_index", "map_nest_at_indices", "multi_index_nest", "nested_any", "nested_indices_where", "nested_map", "nested_multi_map", "prune_nest_at_index", "prune_nest_at_indices", "set_nest_at_index", "set_nest_at_indices", "Norms", "layer_norm", "ivy.Array.layer_norm", "ivy.Container.layer_norm", "ivy.layer_norm", "Random", "multinomial", "randint", "ivy.randint", "ivy.Container.static_randint", "random_normal", "random_uniform", "ivy.Container.random_uniform", "ivy.random_uniform", "ivy.Container.static_random_uniform", "seed", "shuffle", "Searching", "argmax", "argmin", "nonzero", "where", "Set", "unique_all", "unique_counts", "ivy.Container.static_unique_counts", "ivy.Array.unique_counts", "ivy.Container.unique_counts", "ivy.unique_counts", "unique_inverse", "unique_values", "Sorting", "argsort", "ivy.Array.argsort", "ivy.Container.argsort", "ivy.argsort", "ivy.Container.static_argsort", "sort", "ivy.Array.sort", "ivy.Container.sort", "ivy.sort", "ivy.Container.static_sort", "Statistical", "einsum", "ivy.Array.einsum", "ivy.Container.einsum", "ivy.einsum", "max", "ivy.Array.max", "ivy.Container.max", "ivy.max", "mean", "ivy.Array.mean", "ivy.Container.mean", "ivy.mean", "min", "ivy.Array.min", "ivy.Container.min", "ivy.min", "prod", "ivy.Array.prod", "ivy.Container.prod", "ivy.prod", "std", "ivy.Array.std", "ivy.Container.std", "ivy.std", "sum", "ivy.Array.sum", "ivy.Container.sum", "ivy.sum", "var", "ivy.Array.var", "ivy.Container.var", "ivy.var", "Utility", "all", "ivy.Array.all", "ivy.Container.all", "ivy.all", "ivy.Container.static_all", "any", "ivy.Array.any", "ivy.Container.any", "ivy.any", "ivy.Container.static_any", "Contents", "&lt;no title&gt;", "&lt;no title&gt;", "Inspection", "add_array_specs", "fn_array_spec", "Roadmap", "&lt;no title&gt;", "Verbosity", "cprint"], "terms": {"class": [0, 6, 12, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, 116, 118, 119, 121, 122, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 152, 153, 156, 157, 159, 163, 164, 165, 166, 168, 170, 171, 173, 174, 175, 185, 186, 187, 252, 275, 289, 291, 292, 293, 294, 295, 296, 298, 299, 301, 302, 303, 304, 577, 584, 621, 627, 646, 651, 653, 655, 657, 687, 852, 854, 864, 887, 890, 956], "ivi": [0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 15, 16, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, 116, 118, 119, 121, 122, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 151, 152, 153, 154, 156, 158, 160, 161, 162, 164, 165, 166, 167, 168, 169, 185, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 198, 199, 200, 201, 202, 203, 204, 209, 210, 211, 212, 213, 214, 215, 218, 219, 222, 223, 226, 227, 230, 231, 232, 235, 238, 239, 242, 245, 248, 249, 252, 256, 257, 258, 259, 260, 261, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 291, 292, 293, 294, 295, 296, 298, 299, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 345, 349, 353, 358, 362, 366, 370, 374, 378, 382, 386, 390, 394, 398, 402, 406, 410, 414, 419, 423, 427, 431, 435, 439, 443, 447, 451, 455, 459, 463, 467, 471, 475, 479, 483, 487, 491, 495, 499, 503, 507, 508, 509, 514, 518, 522, 526, 530, 534, 538, 542, 546, 550, 554, 558, 563, 568, 573, 577, 578, 583, 584, 585, 586, 587, 588, 589, 590, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 653, 658, 662, 663, 667, 671, 675, 679, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 706, 709, 712, 715, 718, 721, 724, 728, 731, 732, 735, 738, 741, 744, 747, 748, 751, 754, 757, 760, 763, 766, 769, 772, 773, 778, 783, 788, 789, 794, 798, 802, 806, 810, 814, 818, 822, 827, 828, 832, 836, 840, 844, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 875, 876, 877, 880, 881, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 899, 900, 901, 902, 907, 912, 913, 917, 921, 925, 929, 933, 937, 941, 945, 946, 951, 956, 959, 960, 961, 962, 964, 965], "backend_handl": [0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 956], "contextmanag": [0, 1], "modul": [0, 4, 5, 16, 62, 63, 67, 68, 69, 70, 71, 108, 109, 111, 112, 113, 114, 115, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 139, 140, 147, 148, 150, 153, 159, 160, 161, 163, 167, 170, 171, 173, 175, 186, 187, 577, 628, 875, 876, 880, 956], "sourc": [0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 14, 15, 16, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, 116, 118, 119, 121, 122, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 153, 163, 164, 188, 189, 190, 191, 192, 193, 194, 195, 196, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 291, 292, 293, 294, 295, 296, 298, 299, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 959, 960, 961, 964, 965], "base": [0, 19, 20, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 65, 66, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 111, 112, 113, 116, 118, 119, 121, 122, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 151, 159, 162, 164, 170, 186, 213, 231, 252, 289, 291, 292, 293, 294, 295, 296, 298, 299, 301, 302, 303, 304, 339, 427, 430, 471, 474, 475, 478, 479, 482, 483, 486, 526, 529, 577, 612, 635, 642, 651, 892, 893, 894, 898, 900, 912, 913, 916], "object": [0, 18, 64, 67, 68, 69, 70, 71, 116, 125, 126, 127, 128, 129, 130, 131, 132, 134, 135, 137, 138, 172, 175, 213, 223, 225, 252, 272, 289, 334, 651, 852, 855, 857, 859, 860, 861, 866, 867, 868, 869, 875, 886], "__init__": [0, 1, 4, 5, 67, 68, 69, 70, 71, 111, 112, 113, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 155, 161, 165, 170, 172, 173, 174, 175, 252, 253, 254, 255, 289, 290, 297, 298, 299, 300, 301, 302, 303, 304, 651, 652, 875, 876, 880, 956], "choose_random_backend": 0, "exclud": [0, 2, 157, 170, 213, 214, 875, 881, 883], "none": [0, 2, 5, 12, 19, 20, 21, 22, 23, 24, 25, 26, 27, 32, 33, 34, 35, 42, 43, 44, 45, 46, 47, 48, 49, 56, 57, 58, 59, 60, 61, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 114, 115, 116, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 155, 157, 160, 164, 165, 166, 167, 168, 170, 172, 174, 175, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 258, 260, 261, 263, 265, 267, 268, 269, 272, 275, 289, 298, 299, 307, 308, 331, 332, 333, 334, 337, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 580, 582, 583, 589, 590, 591, 592, 594, 595, 596, 598, 599, 600, 601, 602, 603, 605, 606, 607, 608, 609, 610, 615, 617, 618, 622, 628, 630, 633, 634, 635, 636, 641, 642, 648, 651, 658, 659, 660, 661, 663, 664, 665, 666, 667, 668, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 684, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 747, 748, 749, 750, 751, 752, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 858, 863, 864, 865, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 891, 892, 894, 895, 897, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955], "clear_backend_stack": 0, "current_backend": [0, 69, 70, 155, 160], "arg": [0, 4, 18, 21, 22, 23, 64, 67, 68, 114, 115, 137, 138, 153, 170, 172, 174, 289, 298, 313, 317, 321, 333, 577, 634], "kwarg": [0, 4, 18, 21, 22, 23, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 114, 115, 137, 138, 170, 172, 174, 289, 298, 313, 317, 321, 577, 627], "return": [0, 4, 5, 12, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 32, 33, 34, 35, 36, 37, 42, 43, 44, 45, 46, 47, 48, 49, 54, 55, 56, 57, 58, 59, 60, 61, 64, 65, 66, 67, 68, 69, 70, 71, 74, 75, 78, 79, 80, 81, 82, 83, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 100, 101, 102, 103, 104, 105, 106, 107, 114, 115, 125, 134, 135, 141, 145, 155, 156, 157, 159, 160, 162, 163, 164, 165, 166, 167, 168, 170, 172, 173, 174, 175, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 284, 288, 289, 298, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 580, 581, 582, 583, 585, 586, 587, 588, 589, 590, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 612, 613, 614, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 633, 634, 635, 636, 639, 640, 641, 642, 643, 645, 646, 647, 648, 649, 650, 651, 653, 654, 655, 656, 657, 658, 660, 661, 662, 663, 665, 666, 667, 668, 669, 670, 671, 673, 674, 675, 677, 678, 679, 680, 681, 682, 684, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 858, 862, 863, 864, 865, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 959, 961], "current": [0, 4, 5, 12, 16, 67, 68, 69, 70, 71, 150, 151, 152, 153, 160, 166, 170, 175, 186, 187, 252, 273, 274, 276, 288, 289, 298, 322, 323, 327, 329, 577, 611, 618, 622, 629, 631, 852, 853, 862, 863, 956], "prioriti": [0, 4, 67, 68, 151, 167], "global_backend": [0, 4], "argument": [0, 4, 5, 14, 21, 22, 23, 24, 25, 64, 67, 68, 69, 70, 71, 114, 115, 137, 138, 152, 154, 155, 156, 157, 159, 160, 161, 163, 164, 170, 172, 173, 210, 211, 213, 214, 215, 217, 218, 219, 221, 222, 223, 225, 226, 227, 229, 230, 231, 232, 234, 238, 239, 241, 242, 244, 245, 247, 248, 249, 251, 252, 261, 264, 280, 289, 298, 299, 313, 317, 321, 339, 340, 343, 353, 356, 358, 361, 402, 405, 435, 438, 518, 521, 550, 553, 554, 557, 563, 567, 577, 583, 584, 588, 598, 605, 627, 634, 689, 692, 701, 702, 712, 714, 788, 822, 825, 852, 858, 870, 871, 874, 892, 894, 898, 912, 917, 920, 937, 940, 945, 946, 949, 959, 961], "s": [0, 4, 5, 6, 12, 15, 16, 21, 24, 25, 64, 67, 68, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 145, 147, 148, 149, 150, 151, 153, 154, 156, 157, 159, 161, 163, 164, 165, 166, 167, 168, 170, 172, 173, 174, 175, 186, 187, 212, 213, 232, 234, 242, 244, 245, 247, 252, 273, 274, 289, 308, 332, 339, 530, 533, 577, 586, 651, 658, 660, 663, 665, 671, 673, 679, 681, 702, 751, 753, 754, 756, 852, 858, 864, 912, 933, 936, 941, 944, 956], "paramet": [0, 4, 5, 21, 22, 23, 24, 25, 62, 63, 67, 68, 69, 70, 71, 108, 109, 114, 115, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 155, 156, 159, 172, 173, 186, 198, 199, 200, 201, 202, 203, 204, 207, 209, 210, 211, 213, 214, 215, 217, 218, 219, 221, 222, 223, 225, 226, 227, 229, 230, 231, 232, 234, 235, 237, 238, 239, 241, 242, 244, 245, 247, 248, 249, 251, 252, 256, 257, 258, 259, 260, 261, 264, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 288, 289, 298, 299, 302, 303, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 325, 327, 328, 329, 330, 331, 332, 333, 334, 335, 338, 339, 340, 343, 345, 348, 349, 352, 353, 356, 358, 361, 362, 365, 366, 369, 370, 373, 374, 377, 378, 381, 382, 385, 386, 389, 390, 393, 394, 397, 398, 401, 402, 405, 406, 409, 410, 413, 414, 417, 419, 422, 423, 426, 427, 430, 431, 434, 435, 438, 439, 442, 443, 446, 447, 450, 451, 454, 455, 458, 459, 462, 463, 466, 467, 470, 471, 474, 475, 478, 479, 482, 483, 486, 487, 490, 491, 494, 495, 498, 499, 502, 503, 506, 507, 508, 509, 512, 514, 517, 518, 521, 522, 525, 526, 529, 530, 533, 534, 537, 538, 541, 542, 545, 546, 549, 550, 553, 554, 557, 558, 562, 563, 567, 568, 572, 573, 576, 577, 578, 581, 583, 584, 585, 586, 587, 588, 589, 590, 592, 595, 596, 598, 599, 600, 601, 602, 603, 604, 605, 606, 609, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 630, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 645, 646, 647, 648, 649, 650, 651, 653, 656, 658, 660, 662, 663, 665, 667, 669, 671, 673, 675, 677, 679, 681, 683, 684, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 705, 706, 708, 709, 711, 712, 714, 715, 717, 718, 720, 721, 723, 724, 727, 728, 730, 732, 734, 735, 737, 738, 740, 741, 743, 744, 746, 747, 748, 750, 751, 753, 754, 756, 757, 759, 760, 762, 763, 765, 766, 768, 769, 771, 772, 773, 776, 778, 781, 783, 786, 788, 789, 792, 794, 797, 798, 801, 802, 805, 806, 809, 810, 813, 814, 817, 818, 821, 822, 825, 827, 828, 831, 832, 835, 836, 839, 840, 843, 844, 847, 848, 849, 850, 851, 852, 853, 854, 855, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 874, 875, 876, 877, 878, 880, 881, 883, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 898, 899, 900, 901, 902, 905, 907, 910, 912, 913, 916, 917, 920, 921, 924, 925, 928, 929, 932, 933, 936, 937, 940, 941, 944, 945, 946, 949, 951, 954, 959, 961], "from": [0, 4, 5, 6, 14, 15, 16, 21, 22, 23, 24, 25, 62, 63, 64, 67, 68, 69, 70, 71, 108, 109, 114, 115, 125, 133, 136, 141, 145, 149, 150, 151, 152, 153, 154, 155, 156, 157, 159, 161, 163, 164, 165, 166, 167, 168, 170, 172, 173, 174, 175, 186, 187, 213, 214, 215, 217, 219, 221, 223, 225, 226, 227, 229, 232, 234, 235, 237, 239, 241, 249, 251, 252, 261, 264, 280, 289, 298, 299, 308, 323, 327, 332, 333, 339, 443, 446, 550, 553, 577, 598, 605, 606, 609, 645, 651, 658, 660, 671, 673, 689, 697, 700, 702, 712, 714, 751, 753, 763, 765, 788, 806, 809, 818, 821, 828, 831, 848, 849, 850, 851, 852, 854, 864, 865, 875, 876, 877, 878, 880, 881, 883, 887, 891, 892, 893, 899, 912, 929, 932, 933, 936, 937, 940, 941, 944, 945, 946, 949, 951, 954, 956, 962], "which": [0, 4, 5, 14, 15, 16, 67, 68, 69, 70, 71, 114, 115, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 145, 147, 148, 150, 151, 152, 153, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 172, 173, 174, 175, 186, 187, 198, 203, 210, 211, 212, 213, 214, 215, 217, 218, 219, 221, 222, 226, 227, 229, 230, 231, 235, 237, 238, 239, 241, 242, 244, 245, 247, 248, 249, 251, 252, 261, 264, 266, 270, 272, 275, 276, 288, 289, 298, 299, 309, 314, 315, 316, 317, 318, 319, 320, 321, 323, 327, 329, 331, 332, 333, 339, 530, 533, 577, 583, 595, 596, 598, 605, 606, 609, 611, 617, 621, 629, 630, 631, 633, 634, 649, 651, 658, 660, 662, 663, 665, 671, 673, 675, 677, 679, 681, 684, 686, 687, 689, 700, 702, 706, 708, 712, 714, 728, 730, 748, 750, 751, 753, 763, 765, 766, 768, 772, 778, 781, 783, 786, 788, 794, 797, 806, 809, 814, 817, 822, 825, 827, 832, 835, 852, 857, 858, 859, 860, 865, 866, 867, 868, 869, 875, 876, 877, 878, 881, 883, 887, 888, 889, 890, 891, 892, 893, 894, 898, 900, 901, 902, 905, 907, 910, 912, 917, 920, 921, 924, 925, 928, 929, 932, 933, 936, 937, 940, 941, 944, 945, 946, 949, 951, 954, 956, 959, 961], "try": [0, 4, 13, 15, 16, 67, 68, 150, 151, 152, 153, 163, 164, 172, 187, 577, 648, 956], "infer": [0, 4, 154, 161, 165, 166, 170, 175, 210, 211, 213, 214, 215, 217, 219, 221, 226, 227, 229, 235, 237, 239, 241, 249, 251, 339, 443, 446, 577, 614, 639, 788, 818, 821], "when": [0, 4, 14, 15, 18, 64, 67, 68, 69, 70, 71, 137, 138, 150, 151, 152, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 172, 173, 175, 187, 252, 258, 289, 339, 353, 356, 431, 434, 526, 529, 577, 588, 621, 642, 772, 773, 776, 778, 781, 783, 786, 852, 863, 887, 888, 889, 891, 912, 917, 920, 925, 928, 933, 936, 941, 944, 956], "global": [0, 4, 5, 6, 12, 67, 68, 69, 70, 71, 139, 140, 160, 161, 165, 166, 170, 252, 267, 268, 269, 289, 298, 299, 331, 332, 333, 577, 612, 613, 632, 635, 636, 637, 641, 642, 870, 871, 874], "set": [0, 4, 5, 6, 12, 14, 21, 24, 25, 55, 64, 67, 68, 101, 125, 134, 141, 142, 143, 144, 145, 146, 149, 151, 154, 155, 160, 162, 163, 164, 165, 166, 167, 170, 172, 173, 289, 308, 318, 319, 330, 331, 332, 333, 339, 370, 373, 577, 578, 581, 635, 636, 637, 638, 651, 658, 660, 663, 665, 667, 669, 671, 673, 675, 677, 679, 681, 702, 706, 708, 728, 730, 732, 734, 741, 743, 748, 750, 852, 853, 862, 863, 864, 868, 869, 875, 885, 887, 888, 893, 894, 898, 899, 900, 901, 902, 905, 907, 910, 912, 933, 936, 941, 944], "ret": [0, 4, 5, 12, 21, 22, 23, 24, 25, 67, 68, 114, 115, 141, 145, 155, 156, 170, 175, 198, 199, 200, 201, 202, 203, 204, 207, 209, 210, 211, 213, 214, 215, 217, 218, 219, 221, 222, 223, 225, 226, 227, 229, 230, 231, 232, 234, 235, 237, 238, 239, 241, 242, 244, 245, 247, 248, 249, 251, 252, 256, 257, 258, 259, 260, 261, 264, 266, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 288, 289, 298, 305, 306, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 332, 333, 334, 335, 336, 338, 339, 340, 343, 345, 348, 349, 352, 353, 356, 358, 361, 362, 365, 366, 369, 370, 373, 374, 377, 378, 381, 382, 385, 386, 389, 390, 393, 394, 397, 398, 401, 402, 405, 406, 409, 410, 413, 414, 417, 419, 422, 423, 426, 427, 430, 431, 434, 435, 438, 439, 442, 443, 446, 447, 450, 451, 454, 455, 458, 459, 462, 463, 466, 467, 470, 471, 474, 475, 478, 479, 482, 483, 486, 487, 490, 491, 494, 495, 498, 499, 502, 503, 506, 507, 508, 509, 512, 514, 517, 518, 521, 522, 525, 526, 529, 530, 533, 534, 537, 538, 541, 542, 545, 546, 549, 550, 553, 554, 557, 558, 562, 563, 567, 568, 572, 573, 576, 577, 578, 581, 583, 585, 586, 587, 588, 589, 590, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 609, 613, 614, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 630, 633, 634, 639, 641, 642, 643, 645, 646, 647, 649, 650, 651, 653, 656, 658, 660, 662, 663, 665, 667, 669, 671, 673, 675, 677, 679, 681, 684, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 705, 706, 708, 709, 711, 712, 714, 715, 717, 718, 720, 721, 723, 724, 727, 728, 730, 732, 734, 735, 737, 738, 740, 741, 743, 744, 746, 747, 748, 750, 751, 753, 754, 756, 757, 759, 760, 762, 763, 765, 766, 768, 769, 771, 772, 773, 776, 778, 781, 783, 786, 788, 789, 792, 794, 797, 798, 801, 802, 805, 806, 809, 810, 813, 814, 817, 818, 821, 822, 825, 827, 828, 831, 832, 835, 836, 839, 840, 843, 844, 847, 848, 849, 850, 851, 852, 853, 854, 858, 862, 863, 864, 870, 871, 874, 875, 876, 877, 878, 880, 881, 883, 886, 887, 888, 889, 890, 891, 892, 893, 894, 898, 899, 900, 901, 902, 905, 907, 910, 912, 913, 916, 917, 920, 921, 924, 925, 928, 929, 932, 933, 936, 937, 940, 941, 944, 945, 946, 949, 951, 954, 959, 961], "exampl": [0, 4, 5, 6, 12, 16, 28, 29, 32, 33, 34, 35, 36, 37, 46, 47, 54, 55, 62, 63, 64, 69, 70, 74, 75, 78, 79, 80, 81, 82, 83, 92, 93, 96, 97, 100, 101, 108, 109, 150, 151, 152, 154, 155, 156, 159, 160, 161, 162, 163, 164, 165, 166, 167, 170, 172, 173, 174, 175, 186, 187, 198, 200, 201, 202, 203, 204, 207, 209, 210, 211, 213, 226, 227, 229, 232, 234, 238, 239, 241, 248, 249, 251, 252, 258, 261, 262, 263, 264, 265, 273, 274, 289, 308, 309, 311, 323, 324, 325, 326, 327, 330, 332, 334, 336, 337, 339, 340, 341, 342, 343, 344, 353, 354, 355, 356, 357, 358, 361, 374, 377, 378, 381, 382, 385, 394, 397, 398, 401, 402, 403, 404, 405, 406, 409, 410, 413, 427, 430, 435, 436, 437, 438, 443, 446, 447, 450, 463, 466, 467, 470, 507, 508, 514, 517, 518, 521, 534, 537, 550, 553, 554, 557, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 577, 578, 579, 580, 581, 582, 585, 586, 594, 595, 602, 605, 606, 607, 608, 609, 610, 613, 624, 639, 640, 645, 646, 647, 651, 653, 654, 655, 656, 657, 689, 690, 692, 694, 695, 696, 701, 702, 703, 705, 706, 708, 709, 711, 712, 714, 721, 723, 732, 734, 738, 740, 751, 753, 757, 759, 760, 762, 772, 773, 776, 778, 781, 783, 786, 788, 789, 790, 791, 792, 793, 794, 797, 802, 805, 806, 809, 814, 817, 818, 821, 822, 823, 824, 825, 826, 827, 828, 831, 832, 835, 836, 839, 870, 871, 874, 875, 876, 877, 878, 879, 880, 881, 883, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 901, 902, 905, 912, 913, 916, 933, 936, 937, 940, 945, 946, 949, 956], "If": [0, 4, 5, 6, 14, 18, 21, 24, 25, 64, 67, 68, 149, 150, 151, 152, 153, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 172, 173, 175, 187, 213, 214, 218, 219, 221, 222, 226, 227, 229, 232, 234, 238, 239, 241, 242, 244, 245, 247, 248, 249, 251, 252, 258, 260, 280, 289, 308, 332, 339, 340, 343, 345, 348, 349, 352, 353, 356, 358, 361, 362, 365, 366, 369, 370, 373, 402, 405, 406, 409, 410, 413, 427, 430, 431, 434, 435, 438, 471, 474, 475, 478, 483, 486, 487, 490, 495, 498, 499, 502, 509, 512, 526, 529, 530, 533, 534, 537, 538, 541, 542, 545, 546, 549, 550, 553, 563, 567, 568, 572, 573, 576, 577, 621, 651, 658, 660, 663, 665, 671, 673, 675, 677, 679, 681, 702, 703, 705, 706, 708, 728, 730, 732, 734, 741, 743, 744, 746, 748, 750, 751, 753, 763, 765, 766, 768, 772, 773, 776, 778, 781, 783, 786, 788, 802, 805, 806, 809, 822, 825, 827, 828, 831, 832, 835, 848, 849, 850, 852, 864, 865, 875, 880, 881, 883, 887, 888, 889, 890, 892, 893, 894, 898, 900, 901, 902, 905, 907, 910, 912, 917, 920, 921, 924, 925, 928, 929, 932, 933, 936, 937, 940, 941, 944, 945, 946, 949, 951, 954, 956], "import": [0, 4, 15, 62, 63, 108, 109, 152, 155, 156, 157, 161, 163, 164, 165, 166, 167, 170, 172, 173, 175, 187, 289, 330, 956, 962], "numpi": [0, 4, 5, 6, 14, 15, 67, 68, 151, 152, 159, 161, 165, 166, 167, 168, 170, 172, 175, 577, 646, 912, 913, 916, 956], "np": [0, 4, 163, 165, 166, 167, 168, 172, 173, 175, 956], "x": [0, 4, 12, 21, 24, 25, 28, 29, 32, 33, 34, 35, 46, 47, 54, 55, 65, 66, 67, 68, 69, 70, 74, 75, 78, 79, 80, 81, 82, 83, 92, 93, 96, 97, 100, 101, 102, 103, 106, 107, 125, 136, 153, 155, 156, 157, 160, 161, 164, 167, 168, 170, 172, 173, 174, 175, 198, 199, 200, 201, 202, 203, 204, 207, 208, 209, 213, 215, 217, 219, 221, 223, 225, 227, 229, 232, 234, 235, 237, 239, 241, 242, 244, 245, 247, 248, 249, 251, 252, 258, 260, 261, 262, 263, 264, 265, 270, 289, 308, 309, 310, 311, 314, 315, 323, 327, 332, 334, 339, 340, 341, 342, 343, 344, 345, 348, 349, 352, 353, 354, 355, 356, 357, 358, 361, 362, 365, 366, 369, 370, 373, 374, 377, 378, 381, 382, 385, 398, 401, 402, 403, 404, 405, 406, 409, 410, 413, 423, 426, 427, 430, 431, 434, 435, 436, 437, 438, 443, 446, 447, 450, 451, 454, 455, 458, 459, 462, 463, 466, 467, 470, 471, 474, 475, 478, 479, 482, 483, 486, 495, 498, 507, 508, 514, 517, 522, 525, 534, 537, 538, 541, 542, 545, 546, 549, 550, 553, 554, 557, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 576, 577, 585, 586, 587, 589, 590, 592, 594, 595, 596, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 613, 614, 616, 617, 619, 620, 621, 623, 624, 625, 626, 630, 639, 640, 643, 645, 646, 647, 649, 650, 651, 662, 667, 669, 670, 684, 686, 687, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 705, 706, 708, 709, 711, 712, 714, 715, 717, 718, 720, 721, 723, 728, 730, 731, 732, 734, 735, 737, 738, 740, 741, 743, 744, 746, 747, 751, 753, 754, 756, 757, 759, 760, 762, 766, 768, 772, 773, 776, 778, 781, 783, 786, 788, 789, 790, 791, 792, 793, 794, 797, 798, 801, 802, 805, 806, 809, 810, 813, 814, 817, 818, 821, 822, 823, 824, 825, 826, 827, 828, 831, 832, 833, 834, 835, 836, 839, 840, 843, 844, 847, 852, 853, 858, 862, 863, 864, 870, 871, 874, 875, 877, 878, 879, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 905, 906, 907, 910, 911, 912, 913, 916, 917, 920, 921, 924, 925, 928, 929, 932, 933, 936, 937, 940, 941, 944, 945, 946, 949, 950, 951, 954, 955, 956], "arrai": [0, 4, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 67, 68, 69, 70, 71, 74, 75, 78, 79, 80, 81, 82, 83, 92, 93, 96, 97, 100, 101, 125, 133, 136, 150, 151, 152, 154, 155, 156, 157, 159, 160, 161, 162, 164, 165, 166, 167, 169, 170, 171, 173, 174, 175, 187, 188, 196, 198, 199, 200, 201, 202, 203, 204, 207, 209, 212, 213, 214, 215, 217, 218, 219, 221, 222, 223, 225, 226, 227, 229, 230, 231, 232, 234, 235, 237, 238, 239, 241, 242, 244, 245, 247, 248, 249, 251, 252, 258, 259, 260, 261, 263, 264, 265, 270, 272, 275, 277, 278, 280, 284, 289, 308, 309, 310, 311, 314, 315, 316, 317, 318, 319, 320, 321, 323, 327, 329, 333, 334, 339, 340, 342, 343, 344, 345, 348, 349, 352, 353, 355, 356, 357, 358, 361, 362, 365, 366, 369, 370, 373, 374, 377, 378, 381, 382, 385, 386, 389, 390, 393, 394, 397, 398, 401, 402, 404, 405, 406, 409, 410, 413, 414, 417, 419, 422, 423, 426, 427, 430, 431, 434, 435, 437, 438, 439, 442, 443, 446, 447, 450, 451, 454, 455, 458, 459, 462, 463, 466, 467, 470, 471, 474, 475, 478, 479, 482, 483, 486, 487, 490, 491, 494, 495, 498, 499, 502, 503, 506, 507, 508, 509, 512, 514, 517, 518, 521, 522, 525, 526, 529, 530, 533, 534, 537, 538, 541, 542, 545, 546, 549, 550, 553, 554, 557, 558, 562, 563, 564, 566, 567, 568, 569, 571, 572, 573, 576, 577, 578, 580, 581, 582, 585, 586, 587, 589, 590, 592, 594, 595, 596, 599, 600, 601, 602, 603, 604, 605, 606, 608, 609, 610, 611, 614, 616, 617, 618, 619, 620, 621, 623, 624, 626, 629, 630, 631, 633, 634, 639, 640, 643, 645, 646, 647, 649, 650, 651, 653, 655, 656, 657, 658, 660, 663, 665, 667, 669, 671, 673, 675, 677, 679, 681, 684, 686, 687, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 705, 706, 708, 709, 711, 712, 714, 715, 717, 718, 720, 721, 723, 724, 727, 728, 730, 731, 732, 734, 735, 737, 738, 740, 741, 743, 744, 746, 747, 748, 750, 751, 753, 754, 756, 757, 759, 760, 762, 763, 765, 766, 768, 769, 771, 772, 773, 776, 778, 781, 783, 786, 788, 789, 791, 792, 793, 794, 797, 798, 801, 802, 805, 806, 809, 810, 813, 814, 817, 818, 821, 822, 824, 825, 826, 827, 828, 831, 832, 835, 836, 839, 840, 843, 844, 847, 848, 849, 850, 851, 852, 854, 864, 865, 870, 871, 874, 875, 876, 877, 878, 879, 880, 881, 883, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 897, 898, 899, 900, 901, 902, 905, 907, 910, 912, 913, 916, 917, 920, 921, 924, 925, 928, 929, 932, 933, 936, 937, 940, 941, 944, 945, 946, 949, 951, 954, 956, 959, 961], "2": [0, 4, 28, 29, 32, 33, 34, 35, 36, 37, 42, 43, 46, 47, 54, 55, 64, 67, 68, 69, 70, 74, 75, 78, 79, 80, 81, 82, 83, 92, 93, 96, 97, 100, 101, 150, 151, 153, 157, 161, 164, 168, 169, 170, 172, 173, 174, 175, 187, 198, 200, 201, 202, 203, 209, 212, 213, 226, 227, 229, 232, 234, 238, 239, 241, 249, 251, 252, 258, 261, 262, 263, 264, 265, 289, 308, 309, 311, 323, 325, 327, 334, 339, 340, 341, 342, 343, 344, 353, 354, 355, 356, 357, 358, 361, 366, 369, 370, 373, 378, 381, 382, 385, 394, 397, 398, 401, 402, 403, 404, 405, 406, 409, 410, 413, 427, 430, 435, 436, 437, 438, 443, 446, 447, 450, 463, 466, 467, 470, 483, 486, 507, 508, 514, 517, 518, 521, 534, 537, 550, 553, 554, 557, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 577, 578, 579, 580, 581, 585, 586, 589, 590, 592, 595, 602, 605, 606, 607, 608, 609, 610, 624, 639, 640, 645, 651, 653, 654, 655, 656, 657, 689, 692, 693, 694, 695, 696, 701, 702, 703, 705, 706, 708, 709, 711, 712, 713, 714, 721, 723, 724, 727, 728, 730, 732, 734, 738, 740, 741, 743, 744, 746, 751, 753, 757, 758, 759, 760, 762, 766, 767, 768, 772, 773, 776, 783, 786, 788, 789, 790, 791, 792, 793, 794, 797, 802, 805, 806, 809, 814, 817, 818, 821, 822, 823, 824, 825, 826, 827, 828, 831, 836, 839, 870, 871, 874, 875, 876, 877, 878, 879, 880, 881, 883, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 901, 902, 905, 912, 913, 916, 917, 920, 945, 946, 949, 956], "0": [0, 4, 26, 27, 32, 33, 34, 35, 36, 37, 42, 43, 46, 47, 48, 49, 54, 55, 58, 59, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 116, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 147, 148, 151, 155, 156, 157, 170, 172, 173, 174, 175, 198, 200, 201, 202, 203, 204, 207, 209, 213, 214, 222, 230, 231, 239, 241, 242, 243, 244, 245, 246, 247, 248, 249, 251, 252, 258, 261, 263, 264, 265, 272, 289, 291, 294, 298, 301, 305, 308, 309, 311, 314, 315, 316, 317, 318, 319, 320, 321, 323, 327, 330, 332, 333, 337, 339, 340, 341, 343, 344, 345, 348, 349, 352, 353, 356, 357, 358, 361, 362, 365, 366, 369, 370, 373, 374, 377, 378, 381, 386, 389, 394, 397, 398, 401, 402, 403, 404, 405, 406, 409, 410, 413, 427, 430, 431, 434, 435, 436, 437, 438, 447, 450, 467, 470, 471, 474, 475, 478, 483, 486, 507, 508, 509, 512, 514, 517, 518, 521, 526, 529, 530, 533, 534, 537, 538, 541, 542, 545, 546, 549, 550, 553, 554, 557, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 576, 577, 578, 579, 580, 581, 582, 585, 586, 589, 590, 592, 594, 595, 596, 602, 605, 606, 609, 610, 615, 624, 630, 633, 634, 639, 645, 646, 647, 651, 653, 654, 655, 656, 657, 658, 659, 660, 661, 671, 672, 673, 674, 675, 676, 677, 678, 689, 690, 692, 694, 695, 696, 701, 702, 703, 705, 706, 708, 709, 711, 712, 713, 714, 721, 723, 751, 753, 757, 759, 760, 761, 762, 766, 768, 772, 773, 776, 778, 781, 783, 786, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 809, 810, 813, 814, 817, 822, 823, 824, 825, 826, 827, 828, 831, 832, 833, 834, 835, 836, 839, 844, 846, 852, 864, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 900, 901, 902, 905, 912, 913, 916, 917, 920, 921, 924, 933, 934, 935, 936, 937, 940, 941, 942, 943, 944, 945, 946, 949, 956], "print": [0, 4, 5, 6, 12, 28, 29, 32, 33, 34, 35, 36, 37, 46, 47, 54, 55, 62, 63, 67, 68, 69, 70, 71, 74, 75, 78, 79, 80, 81, 82, 83, 92, 93, 96, 97, 100, 101, 108, 109, 150, 157, 164, 170, 172, 173, 174, 198, 200, 201, 202, 203, 204, 207, 209, 213, 226, 227, 229, 232, 234, 238, 239, 241, 248, 249, 251, 252, 258, 261, 262, 263, 264, 265, 273, 274, 289, 309, 323, 324, 325, 326, 327, 329, 332, 336, 339, 340, 341, 342, 343, 344, 353, 354, 355, 356, 357, 358, 361, 374, 377, 378, 381, 382, 385, 394, 397, 398, 401, 402, 403, 404, 405, 406, 409, 410, 413, 427, 430, 435, 436, 437, 438, 443, 446, 447, 450, 463, 466, 467, 470, 507, 508, 514, 517, 518, 521, 534, 537, 550, 553, 554, 557, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 577, 578, 579, 580, 581, 582, 585, 586, 594, 595, 602, 605, 606, 607, 608, 609, 610, 613, 631, 639, 640, 645, 646, 647, 651, 653, 654, 656, 657, 689, 690, 692, 694, 695, 696, 701, 702, 703, 705, 706, 708, 709, 711, 712, 714, 721, 723, 738, 740, 751, 753, 757, 759, 760, 762, 772, 773, 776, 778, 781, 783, 786, 788, 789, 790, 791, 792, 793, 802, 805, 806, 809, 814, 817, 818, 821, 822, 823, 824, 825, 826, 827, 828, 831, 836, 839, 870, 871, 874, 875, 876, 877, 878, 879, 880, 881, 883, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 901, 902, 905, 912, 913, 916, 917, 920, 933, 936, 937, 940, 945, 946, 949, 956], "function": [0, 4, 5, 6, 14, 19, 20, 21, 26, 27, 28, 29, 32, 33, 34, 35, 36, 37, 46, 47, 54, 55, 62, 63, 65, 66, 67, 68, 74, 75, 78, 79, 80, 81, 82, 83, 92, 93, 96, 97, 100, 101, 108, 109, 111, 112, 113, 141, 144, 146, 151, 153, 154, 155, 156, 157, 158, 159, 161, 163, 167, 169, 171, 172, 173, 174, 185, 186, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 291, 292, 293, 294, 295, 296, 298, 299, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 348, 349, 352, 353, 354, 355, 356, 357, 358, 361, 362, 365, 366, 369, 370, 373, 374, 377, 378, 381, 382, 385, 386, 389, 390, 393, 394, 397, 398, 401, 402, 403, 404, 405, 406, 409, 410, 413, 414, 417, 419, 422, 423, 426, 427, 430, 431, 434, 435, 436, 437, 438, 439, 442, 443, 446, 447, 450, 451, 454, 455, 458, 459, 462, 463, 466, 467, 470, 471, 474, 475, 478, 479, 482, 483, 486, 487, 490, 491, 494, 495, 498, 499, 502, 503, 506, 507, 508, 509, 512, 514, 517, 518, 521, 522, 525, 526, 529, 530, 533, 534, 537, 538, 541, 542, 545, 546, 549, 550, 553, 554, 557, 558, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 653, 654, 655, 656, 657, 658, 660, 662, 663, 665, 667, 669, 671, 673, 675, 677, 679, 681, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 705, 706, 708, 709, 711, 712, 714, 715, 717, 718, 720, 721, 723, 724, 727, 728, 730, 731, 732, 734, 735, 737, 738, 740, 741, 743, 744, 746, 747, 748, 750, 751, 753, 754, 756, 757, 759, 760, 762, 763, 765, 766, 768, 769, 771, 772, 773, 776, 778, 781, 783, 786, 788, 789, 790, 791, 792, 793, 794, 797, 798, 801, 802, 805, 806, 809, 810, 813, 814, 817, 818, 821, 822, 823, 824, 825, 826, 827, 828, 831, 832, 835, 836, 839, 840, 843, 844, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 874, 875, 876, 877, 878, 879, 880, 881, 883, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 905, 907, 910, 912, 913, 916, 917, 920, 921, 924, 925, 928, 929, 932, 933, 936, 937, 940, 941, 944, 945, 946, 949, 951, 954, 956, 959, 961], "py": [0, 4, 5, 151, 155, 156, 160, 161, 165, 166, 168, 170, 172, 174, 175, 875, 876, 880], "noqa": [0, 4, 5, 213, 214, 215, 217, 218, 219, 221, 222, 223, 225, 226, 227, 229, 230, 232, 234, 238, 239, 241, 242, 244, 245, 247, 248, 249, 251, 252, 261, 264, 339, 340, 343, 353, 356, 378, 381, 398, 401, 402, 405, 410, 413, 467, 470, 518, 521, 534, 537, 550, 553, 554, 557, 563, 567, 568, 572, 702, 709, 711, 712, 714, 788, 802, 805, 806, 809, 822, 825, 912, 917, 920], "The": [0, 4, 5, 13, 14, 16, 18, 21, 22, 23, 24, 25, 64, 67, 68, 69, 70, 71, 114, 115, 125, 126, 127, 128, 129, 130, 131, 132, 133, 135, 136, 137, 138, 139, 140, 141, 143, 144, 145, 149, 150, 152, 153, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 173, 174, 175, 186, 198, 199, 200, 203, 209, 210, 211, 213, 214, 223, 225, 231, 242, 244, 245, 247, 252, 256, 257, 258, 266, 271, 273, 274, 276, 279, 284, 288, 289, 298, 299, 305, 306, 307, 308, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 327, 328, 329, 330, 331, 332, 333, 335, 338, 339, 340, 343, 345, 348, 349, 352, 353, 356, 358, 361, 362, 365, 366, 369, 370, 373, 374, 377, 378, 381, 382, 385, 386, 389, 390, 393, 394, 397, 398, 401, 402, 405, 406, 409, 410, 413, 414, 417, 419, 422, 423, 426, 427, 430, 431, 434, 435, 438, 439, 442, 443, 446, 447, 450, 451, 454, 455, 458, 459, 462, 463, 466, 467, 470, 471, 474, 475, 478, 483, 486, 487, 490, 491, 494, 495, 498, 499, 502, 503, 506, 509, 512, 518, 521, 526, 529, 530, 533, 534, 537, 538, 541, 542, 545, 546, 549, 550, 553, 563, 567, 568, 572, 573, 576, 577, 583, 585, 588, 589, 597, 598, 604, 606, 609, 619, 620, 621, 623, 624, 625, 626, 628, 633, 634, 635, 636, 637, 640, 641, 642, 650, 651, 653, 656, 658, 660, 663, 665, 671, 673, 675, 677, 679, 681, 684, 687, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 700, 701, 702, 703, 705, 706, 708, 709, 711, 712, 714, 715, 717, 718, 720, 721, 723, 728, 730, 732, 734, 735, 737, 738, 740, 741, 743, 744, 746, 747, 748, 750, 751, 753, 754, 756, 757, 759, 760, 762, 763, 765, 766, 768, 772, 773, 776, 778, 781, 783, 786, 788, 794, 797, 798, 801, 802, 805, 806, 809, 810, 813, 814, 817, 818, 821, 827, 840, 843, 848, 849, 850, 851, 852, 853, 854, 855, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 874, 875, 876, 880, 887, 888, 889, 890, 892, 893, 894, 898, 900, 901, 902, 905, 907, 910, 912, 913, 916, 917, 920, 921, 924, 925, 928, 929, 932, 933, 936, 937, 940, 941, 944, 945, 946, 949, 951, 954, 956], "set_backend": [0, 4, 5, 12, 160, 161, 162, 165, 252, 273, 274, 289, 330, 577, 639, 956], "ha": [0, 4, 5, 14, 15, 16, 64, 67, 68, 151, 156, 157, 160, 161, 162, 165, 166, 170, 172, 174, 175, 186, 187, 213, 232, 234, 289, 308, 339, 340, 343, 509, 512, 526, 529, 702, 724, 727, 747, 748, 750, 751, 753, 760, 762, 788, 802, 805, 828, 831, 892, 893, 894, 898, 900, 912, 921, 924, 929, 932, 933, 936, 937, 940, 941, 944], "over": [0, 4, 14, 16, 62, 63, 64, 67, 68, 108, 109, 139, 140, 150, 156, 157, 161, 167, 172, 187, 702, 728, 730, 757, 759, 763, 765, 766, 768, 870, 871, 874, 875, 881, 883, 912, 917, 920, 921, 924, 925, 928, 929, 932, 933, 936, 937, 940, 941, 944, 945, 946, 949, 951, 954], "ani": [0, 4, 12, 14, 15, 16, 21, 22, 23, 60, 61, 62, 63, 67, 68, 106, 107, 108, 109, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 163, 164, 165, 166, 167, 168, 170, 172, 173, 174, 175, 186, 187, 210, 211, 213, 214, 215, 217, 218, 219, 221, 222, 223, 225, 226, 227, 229, 230, 231, 232, 234, 235, 237, 238, 239, 241, 242, 244, 245, 247, 248, 249, 251, 252, 261, 264, 289, 334, 339, 340, 343, 353, 356, 358, 361, 402, 405, 419, 422, 435, 438, 447, 450, 467, 470, 518, 521, 550, 553, 554, 557, 563, 567, 577, 578, 581, 598, 599, 600, 601, 602, 605, 616, 623, 624, 625, 626, 641, 642, 651, 662, 689, 692, 699, 701, 702, 712, 714, 788, 822, 825, 848, 849, 850, 851, 852, 858, 862, 870, 871, 874, 875, 881, 883, 892, 894, 898, 912, 917, 920, 945, 946, 949, 956], "pass": [0, 4, 62, 63, 67, 68, 69, 70, 71, 108, 109, 114, 115, 137, 138, 141, 145, 147, 148, 152, 156, 157, 158, 159, 160, 161, 163, 164, 167, 168, 172, 187, 252, 266, 289, 298, 333, 339, 370, 373, 577, 588, 621, 651, 687, 848, 849, 850], "jax": [0, 4, 5, 6, 15, 16, 151, 152, 161, 165, 166, 167, 168, 170, 172, 175, 187, 651, 667, 669, 892, 893, 894, 898, 900, 956], "get_backend": [0, 160, 161], "specifi": [0, 5, 64, 67, 68, 154, 159, 160, 165, 166, 167, 168, 170, 173, 174, 175, 213, 214, 218, 226, 230, 231, 238, 242, 244, 245, 247, 248, 252, 258, 260, 289, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 323, 327, 329, 332, 333, 334, 339, 530, 533, 577, 583, 595, 605, 606, 609, 616, 649, 702, 712, 714, 728, 730, 757, 759, 760, 762, 763, 765, 766, 768, 772, 773, 776, 778, 781, 783, 786, 788, 789, 792, 794, 797, 798, 801, 806, 809, 822, 825, 828, 831, 832, 835, 844, 847, 852, 857, 859, 860, 866, 867, 868, 869, 887, 888, 889, 892, 893, 894, 898, 900, 901, 902, 905, 912, 913, 916, 929, 932, 937, 940, 945, 946, 949, 951, 954], "isn": [0, 5, 151, 173, 187], "t": [0, 5, 15, 16, 62, 63, 108, 109, 150, 151, 152, 153, 157, 165, 170, 172, 173, 174, 175, 187, 577, 586, 689, 698, 699], "associ": [0, 5, 151, 160, 162, 187, 339, 353, 356, 509, 512, 702, 732, 734, 741, 743, 769, 771], "option": [0, 5, 21, 22, 23, 24, 25, 62, 63, 67, 68, 69, 70, 108, 109, 150, 151, 155, 156, 157, 160, 164, 165, 166, 167, 168, 170, 175, 187, 198, 199, 200, 201, 202, 203, 204, 207, 209, 210, 211, 213, 214, 215, 217, 218, 219, 221, 222, 223, 225, 226, 227, 229, 230, 231, 232, 234, 235, 237, 238, 239, 241, 242, 244, 245, 247, 248, 249, 251, 252, 258, 260, 266, 267, 268, 269, 276, 288, 289, 308, 332, 333, 334, 339, 340, 343, 345, 348, 349, 352, 353, 356, 358, 361, 362, 365, 366, 369, 370, 373, 374, 377, 378, 381, 382, 385, 386, 389, 390, 393, 394, 397, 398, 401, 402, 405, 406, 409, 410, 413, 414, 417, 419, 422, 423, 426, 427, 430, 431, 434, 435, 438, 439, 442, 443, 446, 447, 450, 451, 454, 455, 458, 459, 462, 463, 466, 471, 474, 475, 478, 479, 482, 483, 486, 487, 490, 491, 494, 495, 498, 499, 502, 503, 506, 507, 508, 509, 512, 514, 517, 518, 521, 522, 525, 526, 529, 530, 533, 534, 537, 538, 541, 542, 545, 546, 549, 550, 553, 554, 557, 558, 562, 563, 567, 568, 572, 573, 576, 577, 583, 589, 590, 592, 595, 596, 597, 599, 600, 601, 603, 605, 606, 609, 617, 628, 630, 633, 634, 641, 642, 651, 684, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 705, 706, 708, 709, 711, 712, 714, 718, 720, 721, 723, 724, 727, 728, 730, 732, 734, 735, 737, 738, 740, 741, 743, 747, 748, 750, 751, 753, 754, 756, 757, 759, 760, 762, 763, 765, 766, 768, 769, 771, 772, 773, 776, 778, 781, 783, 786, 788, 789, 792, 794, 797, 798, 801, 802, 805, 806, 809, 810, 813, 814, 817, 818, 821, 822, 825, 827, 828, 831, 832, 835, 836, 839, 840, 843, 844, 847, 848, 849, 850, 851, 852, 853, 858, 863, 864, 870, 871, 874, 875, 876, 877, 878, 880, 881, 883, 886, 887, 888, 889, 891, 892, 900, 901, 902, 905, 907, 910, 912, 913, 916, 917, 920, 921, 924, 925, 928, 929, 932, 933, 936, 937, 940, 941, 944, 945, 946, 949, 951, 954], "str": [0, 5, 18, 21, 22, 23, 64, 67, 68, 165, 166, 210, 211, 213, 232, 234, 252, 256, 266, 267, 268, 271, 272, 275, 276, 277, 278, 281, 282, 283, 288, 289, 305, 308, 309, 311, 314, 315, 316, 317, 333, 577, 583, 597, 599, 600, 601, 628, 633, 634, 689, 690, 692, 694, 695, 696, 702, 744, 746, 848, 849, 850, 851, 852, 858, 912, 913, 916], "we": [0, 5, 6, 12, 13, 14, 15, 16, 62, 63, 108, 109, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 162, 163, 164, 165, 167, 168, 170, 171, 172, 173, 174, 175, 186, 187, 651, 662, 956, 962], "want": [0, 5, 15, 62, 63, 108, 109, 149, 150, 151, 159, 173, 174, 175, 187], "retriev": [0, 5, 151, 577, 583], "i": [0, 5, 151, 153, 154, 170, 173, 175, 213, 214, 232, 234, 339, 340, 343, 370, 373, 386, 389, 394, 397, 402, 405, 435, 438, 439, 442, 451, 454, 507, 508, 514, 517, 526, 529, 530, 533, 577, 585, 586, 651, 658, 660, 663, 665, 671, 673, 675, 677, 679, 681, 702, 706, 708, 724, 727, 732, 734, 741, 743, 748, 750, 751, 753, 760, 762, 766, 768, 788, 832, 835, 892, 893, 894, 898, 900, 901, 902, 905, 907, 910, 912, 913, 916, 917, 920, 921, 924, 925, 928, 933, 936, 937, 940, 941, 944], "e": [0, 5, 15, 16, 64, 149, 151, 153, 154, 164, 173, 187, 212, 213, 232, 234, 252, 257, 280, 289, 305, 339, 340, 343, 370, 373, 386, 389, 394, 397, 402, 405, 427, 430, 435, 438, 439, 442, 451, 454, 471, 474, 479, 482, 507, 508, 514, 517, 526, 529, 530, 533, 651, 658, 660, 663, 665, 671, 673, 675, 677, 679, 681, 702, 706, 708, 724, 727, 732, 734, 741, 743, 748, 750, 751, 753, 766, 768, 788, 832, 835, 875, 880, 881, 883, 892, 893, 894, 898, 900, 901, 902, 905, 907, 910, 912, 917, 920, 921, 924, 925, 928, 929, 932, 933, 936, 937, 940, 941, 944], "one": [0, 5, 15, 16, 64, 67, 68, 78, 79, 80, 81, 92, 93, 96, 97, 150, 151, 157, 160, 163, 164, 165, 167, 168, 169, 172, 173, 175, 187, 213, 214, 232, 234, 252, 259, 261, 264, 289, 318, 319, 320, 321, 333, 340, 344, 353, 357, 577, 578, 580, 581, 582, 606, 610, 627, 630, 633, 634, 702, 724, 727, 728, 730, 738, 740, 744, 746, 763, 765, 766, 768, 788, 789, 793, 802, 805, 806, 809, 822, 825, 826, 828, 831, 877, 879, 887, 888, 890, 892, 893, 894, 898, 899, 900, 912, 913, 916, 956], "default": [0, 5, 18, 21, 22, 23, 24, 25, 62, 63, 64, 67, 68, 69, 70, 71, 108, 109, 114, 115, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 151, 156, 157, 160, 161, 164, 165, 166, 168, 174, 198, 199, 200, 201, 202, 203, 204, 207, 209, 210, 211, 213, 214, 215, 217, 218, 219, 221, 222, 223, 225, 226, 227, 229, 230, 231, 232, 234, 235, 237, 238, 239, 241, 242, 244, 245, 247, 248, 249, 251, 252, 258, 260, 267, 268, 269, 270, 289, 298, 299, 308, 309, 313, 314, 315, 316, 317, 318, 319, 320, 321, 328, 330, 331, 332, 333, 334, 337, 338, 339, 340, 343, 345, 348, 349, 352, 353, 356, 358, 361, 362, 365, 366, 369, 370, 373, 374, 377, 378, 381, 382, 385, 386, 389, 390, 393, 394, 397, 398, 401, 402, 405, 406, 409, 410, 413, 414, 417, 419, 422, 423, 426, 427, 430, 431, 434, 435, 438, 439, 442, 443, 446, 447, 450, 451, 454, 455, 458, 459, 462, 463, 466, 471, 474, 475, 478, 479, 482, 483, 486, 487, 490, 491, 494, 495, 498, 499, 502, 503, 506, 507, 508, 509, 512, 514, 517, 518, 521, 522, 525, 526, 529, 530, 533, 534, 537, 538, 541, 542, 545, 546, 549, 550, 553, 554, 557, 558, 562, 563, 567, 568, 572, 573, 576, 577, 578, 581, 583, 589, 590, 592, 595, 596, 599, 600, 601, 603, 604, 605, 606, 609, 614, 615, 616, 617, 618, 621, 622, 623, 624, 626, 627, 628, 630, 632, 633, 634, 637, 639, 641, 642, 649, 650, 651, 653, 656, 658, 660, 662, 663, 665, 667, 669, 671, 673, 675, 677, 679, 681, 684, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 705, 706, 708, 709, 711, 712, 714, 718, 720, 721, 723, 724, 727, 728, 730, 732, 734, 735, 737, 738, 740, 741, 743, 744, 746, 747, 748, 750, 751, 753, 754, 756, 757, 759, 760, 762, 763, 765, 766, 768, 769, 771, 772, 773, 776, 778, 781, 783, 786, 788, 789, 792, 794, 797, 798, 801, 802, 805, 806, 809, 810, 813, 814, 817, 818, 821, 822, 825, 827, 828, 831, 832, 835, 836, 839, 840, 843, 844, 847, 848, 849, 850, 851, 852, 853, 854, 858, 862, 863, 864, 865, 870, 871, 874, 875, 876, 877, 878, 880, 881, 883, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 898, 900, 901, 902, 905, 907, 910, 912, 913, 916, 917, 920, 921, 924, 925, 928, 929, 932, 933, 936, 937, 940, 941, 944, 945, 946, 949, 951, 954], "torch": [0, 5, 12, 151, 155, 160, 161, 163, 164, 165, 166, 167, 168, 170, 172, 173, 174, 175, 187, 210, 211, 252, 273, 274, 289, 330, 577, 639, 788, 802, 805, 956], "tensorflow": [0, 5, 12, 15, 16, 151, 152, 165, 166, 167, 168, 170, 175, 187, 956], "mxnet": [0, 5, 15, 152, 165, 166, 167, 170, 175, 956], "either": [0, 5, 12, 64, 67, 68, 125, 136, 137, 138, 150, 151, 153, 156, 157, 160, 161, 164, 165, 166, 170, 172, 173, 187, 213, 223, 225, 339, 353, 356, 370, 373, 455, 458, 471, 474, 475, 478, 483, 486, 487, 490, 509, 512, 530, 533, 538, 541, 542, 545, 563, 567, 577, 598, 623, 627, 628, 702, 724, 727, 848, 849, 850, 851, 912, 929, 932, 937, 940], "doesn": [0, 5, 150, 153, 157, 165, 170, 187], "matter": [0, 5, 14, 157], "been": [0, 5, 151, 156, 160, 161, 164, 165, 166, 168, 170, 186, 187, 289, 308, 577, 599, 600, 601, 875, 876], "ivy_np": [0, 5], "us": [0, 5, 12, 15, 16, 18, 32, 33, 62, 63, 64, 67, 68, 69, 70, 71, 78, 79, 108, 109, 125, 133, 136, 137, 138, 139, 140, 141, 143, 144, 149, 151, 152, 154, 155, 156, 157, 158, 159, 160, 161, 163, 164, 165, 166, 167, 168, 169, 170, 172, 174, 175, 186, 187, 198, 200, 201, 202, 203, 204, 207, 209, 212, 252, 271, 289, 298, 299, 324, 328, 331, 332, 333, 334, 336, 338, 339, 340, 341, 342, 358, 361, 378, 381, 398, 401, 410, 413, 447, 450, 467, 470, 507, 508, 514, 517, 518, 521, 534, 537, 550, 553, 577, 605, 612, 613, 627, 633, 634, 635, 636, 641, 642, 651, 653, 656, 658, 660, 671, 673, 675, 677, 689, 695, 697, 698, 700, 701, 702, 709, 711, 712, 714, 728, 730, 772, 773, 776, 788, 802, 805, 806, 809, 814, 817, 822, 825, 836, 839, 848, 849, 850, 851, 852, 853, 855, 861, 862, 863, 865, 870, 871, 874, 887, 888, 889, 890, 892, 893, 912, 913, 916, 945, 946, 949, 956], "ivy_jax": [0, 5], "subsequ": [0, 6, 150, 157, 159, 160, 163, 167, 168, 174], "call": [0, 6, 12, 15, 18, 64, 69, 70, 125, 136, 137, 138, 141, 145, 153, 155, 156, 157, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 172, 173, 174, 175, 187, 289, 333, 577, 632, 637, 648, 651, 662, 852, 853, 858, 862, 863], "nativ": [0, 6, 21, 23, 24, 25, 67, 68, 114, 115, 165, 167, 172, 173, 213, 235, 237, 252, 256, 257, 266, 289, 305, 306, 307, 308, 309, 328, 335, 338, 577, 621, 623, 626], "native_arrai": [0, 6, 12, 26, 27, 34, 35, 69, 70, 80, 81, 198, 200, 201, 202, 203, 204, 207, 209, 213, 232, 234, 252, 261, 264, 289, 311, 327, 339, 340, 343, 358, 361, 378, 381, 398, 401, 402, 405, 435, 438, 447, 450, 467, 470, 507, 508, 514, 517, 518, 521, 550, 553, 554, 557, 568, 572, 577, 578, 579, 580, 581, 582, 586, 594, 595, 602, 605, 606, 609, 640, 645, 646, 647, 651, 653, 656, 689, 692, 695, 696, 701, 702, 706, 708, 709, 711, 712, 714, 757, 759, 772, 773, 776, 783, 786, 788, 789, 792, 802, 805, 806, 809, 814, 817, 827, 836, 839, 870, 871, 874, 875, 876, 887, 888, 889, 890, 891, 892, 893, 894, 898, 912, 913, 916, 917, 920, 945, 946, 949], "1": [0, 6, 12, 15, 16, 28, 29, 32, 33, 34, 35, 36, 37, 42, 43, 44, 45, 46, 47, 48, 49, 54, 55, 56, 57, 64, 67, 68, 69, 70, 74, 75, 78, 79, 80, 81, 82, 83, 90, 91, 92, 93, 94, 95, 96, 97, 100, 101, 102, 103, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 145, 147, 148, 153, 157, 160, 164, 167, 168, 169, 170, 172, 173, 174, 175, 187, 198, 200, 201, 202, 203, 209, 213, 214, 227, 229, 230, 231, 232, 234, 238, 239, 241, 249, 251, 252, 258, 261, 262, 263, 264, 265, 272, 289, 293, 296, 298, 303, 308, 309, 311, 313, 317, 321, 323, 326, 327, 334, 339, 340, 341, 342, 343, 345, 348, 349, 352, 353, 354, 355, 356, 357, 358, 361, 370, 373, 378, 381, 382, 385, 394, 397, 398, 401, 402, 403, 404, 405, 406, 409, 410, 413, 427, 430, 431, 434, 435, 436, 437, 438, 443, 446, 447, 450, 463, 466, 467, 470, 471, 474, 475, 478, 479, 482, 483, 486, 507, 508, 514, 517, 518, 521, 526, 529, 534, 537, 538, 541, 542, 545, 550, 553, 554, 557, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 577, 578, 579, 580, 581, 582, 585, 586, 594, 595, 602, 605, 606, 607, 608, 609, 610, 624, 630, 633, 634, 639, 640, 642, 645, 646, 647, 649, 651, 653, 654, 655, 656, 657, 689, 690, 691, 692, 693, 694, 695, 696, 697, 701, 702, 703, 705, 706, 707, 708, 709, 711, 712, 713, 714, 721, 723, 732, 734, 738, 740, 748, 750, 751, 753, 757, 759, 760, 762, 763, 764, 765, 766, 768, 772, 773, 776, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 797, 802, 805, 806, 809, 810, 813, 814, 817, 818, 821, 822, 823, 824, 825, 826, 827, 828, 831, 832, 835, 836, 839, 852, 864, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 916, 917, 920, 933, 936, 937, 940, 941, 944, 945, 946, 949, 951, 954, 956], "type": [0, 6, 12, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 32, 33, 34, 35, 36, 37, 42, 43, 44, 45, 46, 47, 48, 49, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 75, 78, 79, 80, 81, 82, 83, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 150, 152, 154, 155, 156, 157, 162, 163, 164, 166, 167, 168, 170, 172, 173, 175, 188, 189, 190, 191, 192, 193, 194, 195, 196, 198, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 284, 288, 289, 305, 306, 307, 308, 309, 311, 321, 322, 323, 324, 325, 326, 327, 328, 330, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 580, 581, 582, 583, 585, 586, 588, 589, 590, 592, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 612, 613, 614, 616, 617, 619, 620, 621, 623, 624, 625, 626, 630, 633, 634, 635, 636, 639, 641, 642, 643, 645, 646, 647, 649, 650, 651, 653, 654, 655, 656, 657, 658, 660, 661, 663, 665, 666, 667, 668, 669, 670, 671, 673, 674, 675, 677, 678, 679, 680, 681, 682, 684, 686, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 858, 862, 863, 864, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956], "ndarrai": [0, 6, 163, 165, 166, 167, 168, 172, 213, 215, 217, 235, 237, 577, 646], "Or": [0, 6, 173], "jaxlib": [0, 6, 150, 165, 166, 168, 172], "xla_extens": [0, 6, 165, 166, 168, 172], "devicearrai": [0, 6, 172], "try_import_ivy_jax": 0, "warn": [0, 7, 8, 9, 10, 11], "fals": [0, 7, 8, 9, 10, 11, 18, 21, 22, 23, 24, 25, 34, 35, 42, 43, 56, 57, 58, 59, 60, 61, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 114, 115, 137, 138, 141, 142, 143, 144, 145, 146, 157, 164, 167, 173, 174, 175, 204, 206, 208, 252, 258, 261, 263, 264, 265, 270, 289, 308, 309, 320, 324, 325, 328, 333, 336, 338, 339, 340, 342, 344, 345, 347, 349, 351, 353, 355, 357, 358, 360, 362, 364, 366, 368, 370, 372, 374, 376, 378, 380, 381, 382, 384, 386, 388, 390, 392, 394, 396, 398, 400, 402, 404, 406, 408, 410, 412, 414, 416, 418, 419, 421, 423, 425, 427, 429, 431, 433, 435, 437, 439, 441, 443, 445, 446, 447, 449, 450, 451, 453, 454, 455, 457, 458, 459, 461, 462, 463, 465, 466, 467, 469, 470, 471, 473, 475, 477, 479, 481, 483, 485, 487, 489, 491, 493, 495, 497, 498, 499, 501, 502, 503, 505, 509, 511, 513, 514, 516, 518, 520, 521, 522, 524, 526, 528, 530, 532, 534, 536, 538, 540, 542, 544, 546, 548, 550, 552, 554, 556, 558, 559, 561, 563, 564, 566, 568, 569, 571, 573, 575, 577, 578, 579, 580, 581, 582, 585, 586, 590, 591, 595, 598, 602, 604, 606, 608, 610, 614, 621, 623, 624, 626, 627, 639, 649, 651, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 702, 703, 704, 705, 724, 726, 728, 729, 730, 751, 753, 766, 767, 768, 773, 775, 777, 778, 780, 782, 783, 785, 787, 788, 789, 791, 793, 794, 796, 798, 800, 802, 804, 806, 808, 810, 812, 814, 816, 818, 820, 822, 824, 826, 827, 828, 830, 832, 834, 836, 838, 840, 842, 844, 846, 848, 849, 850, 851, 852, 853, 854, 858, 862, 863, 864, 865, 871, 873, 875, 876, 881, 882, 884, 887, 888, 889, 891, 892, 893, 894, 895, 897, 898, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 915, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955], "try_import_ivy_mxnet": 0, "try_import_ivy_numpi": 0, "try_import_ivy_tf": 0, "try_import_ivy_torch": 0, "unset_backend": [0, 161], "unset": [0, 12, 161, 170, 172], "adjust": [0, 12, 912, 933, 936, 941, 944], "dict": [0, 12, 21, 22, 23, 24, 25, 64, 67, 68, 69, 70, 71, 164, 173, 174, 289, 298, 299, 308, 311, 314, 315, 316, 317, 577, 583, 599, 600, 601, 852, 854, 855, 858, 861, 864, 865], "previous": [0, 12, 150, 153, 159, 160, 170, 577, 588], "otherwis": [0, 12, 18, 21, 22, 23, 24, 25, 64, 67, 68, 163, 165, 166, 168, 170, 172, 213, 214, 252, 258, 261, 264, 267, 268, 269, 289, 308, 339, 451, 454, 455, 458, 459, 462, 577, 587, 648, 651, 667, 669, 684, 702, 703, 705, 709, 711, 763, 765, 766, 768, 848, 849, 850, 852, 865, 887, 888, 889, 891, 912, 917, 920, 921, 924, 925, 928, 929, 932, 933, 936, 937, 940, 941, 944, 945, 946, 949, 951, 954], "implement": [0, 12, 18, 64, 152, 156, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 172, 173, 174, 175, 186, 187, 252, 258, 280, 289, 334, 339, 340, 343, 345, 348, 349, 352, 358, 361, 362, 365, 366, 369, 370, 373, 406, 409, 410, 413, 427, 430, 431, 434, 471, 474, 475, 478, 479, 482, 483, 486, 509, 512, 526, 529, 530, 533, 542, 545, 546, 549, 563, 567, 568, 572, 702, 715, 717, 892, 893, 894, 898, 900, 901, 902, 905, 907, 910, 912, 917, 920, 921, 924, 925, 928, 956], "wa": [0, 12, 15, 67, 68, 157, 170, 172, 577, 648, 852, 865, 912, 917, 920, 921, 924, 925, 928, 929, 932, 933, 936, 937, 940, 941, 944, 945, 946, 949, 951, 954], "last": [0, 12, 16, 64, 67, 68, 125, 135, 151, 157, 161, 187, 198, 203, 289, 308, 689, 699, 702, 706, 708, 712, 714, 728, 730, 760, 762, 763, 765, 772, 778, 781, 783, 786, 788, 806, 809, 822, 825, 827, 832, 835, 901, 902, 905, 907, 910, 945, 946, 949, 951, 954], "henc": [0, 12, 892, 893, 894, 898, 900], "here": [0, 12, 150, 151, 152, 155, 157, 164, 168, 170, 171, 172, 173, 174, 175, 186, 187], "tensor": [0, 12, 14, 67, 68, 125, 133, 135, 155, 160, 161, 163, 165, 166, 167, 168, 170, 172, 173, 174, 175, 187, 213, 230, 231, 252, 270, 339, 378, 381, 507, 508, 577, 630, 633, 634, 689, 697, 699, 702, 757, 759, 788, 802, 805, 818, 821, 827, 875, 876, 887, 890, 956], "howev": [0, 12, 15, 150, 152, 156, 159, 160, 161, 163, 164, 165, 166, 167, 168, 172, 173, 174, 175, 187], "befor": [0, 12, 67, 68, 150, 151, 152, 156, 159, 163, 165, 166, 167, 170, 173, 187, 289, 333, 339, 573, 576, 689, 700, 701, 848, 849, 850, 852, 864, 892, 893, 894, 898, 900, 912, 929, 932, 937, 940], "becom": [0, 12, 14, 16, 151, 157, 164, 170, 175, 187, 788, 789, 792], "swap": [0, 12, 788, 836, 839], "python": [0, 12, 13, 14, 15, 150, 151, 153, 170, 172, 173, 187, 213, 214, 289, 328, 338, 339, 530, 533, 956, 962], "framework": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 14, 15, 16, 20, 21, 22, 23, 24, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 66, 67, 68, 70, 71, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99, 101, 103, 105, 107, 109, 112, 113, 114, 115, 117, 118, 119, 120, 121, 122, 123, 124, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 138, 140, 141, 142, 143, 144, 145, 146, 148, 154, 158, 160, 161, 162, 163, 166, 168, 169, 172, 175, 186, 187, 189, 190, 191, 192, 193, 194, 195, 196, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 849, 850, 851, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 871, 872, 873, 874, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 888, 889, 890, 891, 893, 894, 895, 896, 897, 898, 899, 900, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 960, 961, 962, 963, 965], "op": [0, 12, 155, 170, 187], "eagertensor": [0, 12], "def": [1, 117, 120, 123, 152, 155, 157, 160, 164, 165, 166, 167, 168, 170, 172, 173, 174, 175, 253, 254, 255, 290, 297, 300, 652, 956], "support": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 14, 15, 16, 20, 22, 23, 24, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 66, 67, 68, 70, 71, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99, 101, 103, 105, 107, 109, 112, 113, 115, 117, 118, 119, 120, 121, 122, 123, 124, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 138, 140, 141, 142, 143, 144, 145, 146, 148, 156, 157, 160, 162, 163, 164, 165, 166, 167, 168, 169, 170, 172, 173, 175, 189, 190, 191, 192, 193, 194, 195, 196, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 211, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 849, 850, 851, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 871, 872, 873, 874, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 888, 889, 890, 891, 893, 894, 895, 896, 897, 898, 899, 900, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 960, 961, 962, 963, 965], "backend": [4, 5, 6, 12, 14, 21, 23, 25, 67, 68, 114, 115, 141, 142, 143, 144, 145, 146, 151, 152, 154, 156, 158, 159, 160, 162, 163, 164, 165, 166, 167, 168, 171, 172, 175, 252, 273, 274, 276, 288, 289, 324, 326, 336, 577, 618, 621, 622, 628, 651, 658, 660, 663, 665, 671, 673, 675, 677, 679, 681, 687, 956, 962], "ml": [13, 15, 16, 149, 169, 170, 171, 173, 174, 175, 186, 956, 962], "explos": [13, 15, 956], "A": [13, 14, 15, 16, 67, 68, 69, 70, 71, 147, 148, 153, 154, 159, 160, 164, 165, 166, 170, 173, 187, 213, 222, 235, 237, 289, 298, 299, 333, 339, 522, 525, 577, 613, 645, 702, 738, 740, 747, 748, 750, 751, 753, 788, 827, 832, 835, 852, 853, 855, 857, 859, 860, 861, 862, 863, 866, 867, 868, 869, 912, 913, 916, 945, 946, 949, 951, 954, 956], "huge": [13, 15, 173, 956], "number": [13, 14, 67, 68, 69, 70, 71, 125, 126, 127, 128, 129, 130, 131, 132, 134, 135, 136, 150, 157, 164, 166, 167, 170, 173, 175, 210, 211, 212, 213, 214, 215, 217, 222, 230, 231, 232, 234, 235, 237, 252, 259, 271, 272, 275, 277, 278, 280, 289, 325, 326, 327, 339, 353, 356, 370, 373, 402, 405, 435, 438, 439, 442, 507, 508, 509, 512, 526, 529, 530, 533, 534, 537, 538, 541, 573, 576, 577, 578, 581, 604, 613, 614, 629, 647, 650, 689, 700, 702, 712, 714, 715, 717, 732, 734, 747, 751, 753, 763, 765, 788, 789, 792, 798, 801, 810, 813, 814, 817, 822, 825, 827, 832, 835, 840, 843, 844, 847, 848, 849, 850, 851, 875, 876, 885, 887, 890, 892, 893, 894, 898, 912, 917, 920, 921, 924, 925, 928, 929, 932, 933, 936, 937, 940, 941, 944, 945, 946, 949, 951, 954, 956], "tool": [13, 16, 151, 171, 175, 186, 187, 956], "have": [13, 14, 15, 16, 67, 68, 150, 151, 152, 153, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 186, 187, 198, 199, 200, 201, 202, 203, 204, 207, 209, 213, 214, 215, 217, 218, 219, 221, 222, 223, 225, 226, 227, 229, 230, 231, 232, 234, 238, 239, 241, 242, 244, 245, 247, 248, 249, 251, 252, 258, 259, 260, 272, 289, 334, 339, 340, 343, 345, 348, 349, 352, 353, 356, 358, 361, 362, 365, 366, 369, 370, 373, 374, 377, 378, 381, 382, 385, 386, 389, 390, 393, 394, 397, 398, 401, 402, 405, 406, 409, 410, 413, 414, 417, 419, 422, 423, 426, 427, 430, 431, 434, 435, 438, 439, 442, 443, 446, 447, 450, 451, 454, 455, 458, 459, 462, 463, 466, 467, 470, 471, 474, 475, 478, 479, 482, 483, 486, 487, 490, 491, 494, 495, 498, 499, 502, 503, 506, 507, 508, 509, 512, 514, 517, 518, 521, 522, 525, 526, 529, 530, 533, 534, 537, 538, 541, 542, 545, 546, 549, 550, 553, 554, 557, 558, 562, 563, 567, 568, 572, 573, 576, 577, 589, 590, 592, 595, 599, 600, 601, 603, 606, 609, 617, 630, 633, 634, 651, 667, 669, 684, 687, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 700, 701, 702, 703, 705, 706, 708, 709, 711, 712, 714, 715, 717, 718, 720, 721, 723, 724, 727, 728, 730, 732, 734, 735, 737, 738, 740, 741, 743, 744, 746, 747, 748, 750, 751, 753, 754, 756, 757, 759, 760, 762, 763, 765, 766, 768, 769, 771, 772, 773, 776, 778, 781, 783, 786, 788, 789, 792, 794, 797, 798, 801, 802, 805, 806, 809, 810, 813, 814, 817, 818, 821, 822, 825, 828, 831, 832, 835, 836, 839, 840, 843, 844, 847, 870, 871, 874, 875, 876, 877, 878, 880, 881, 883, 886, 887, 888, 889, 890, 891, 892, 893, 894, 898, 900, 901, 902, 905, 907, 910, 912, 917, 920, 921, 924, 925, 928, 929, 932, 933, 936, 937, 940, 941, 944, 945, 946, 949, 951, 954, 956], "explod": [13, 14, 956], "onto": [13, 14, 289, 318, 319, 852, 858, 864, 956], "scene": [13, 14, 154, 169, 171, 651, 658, 660, 663, 665, 671, 673, 675, 677, 679, 681, 956], "b": [13, 16, 69, 70, 74, 75, 78, 79, 80, 81, 82, 83, 92, 93, 96, 97, 100, 101, 149, 154, 157, 160, 161, 164, 169, 170, 171, 173, 174, 175, 185, 252, 261, 263, 264, 265, 289, 311, 339, 340, 342, 343, 344, 353, 355, 356, 357, 358, 361, 378, 381, 398, 401, 402, 404, 405, 410, 413, 435, 437, 438, 447, 450, 467, 470, 514, 517, 518, 521, 534, 537, 550, 553, 554, 557, 563, 564, 566, 567, 568, 569, 571, 572, 577, 578, 580, 581, 582, 585, 586, 594, 595, 602, 605, 606, 608, 609, 610, 647, 651, 653, 655, 656, 657, 689, 692, 695, 696, 701, 702, 703, 705, 706, 708, 709, 711, 712, 714, 738, 740, 748, 750, 757, 759, 769, 771, 772, 773, 776, 788, 789, 791, 792, 793, 802, 805, 806, 809, 814, 817, 822, 824, 825, 826, 832, 835, 836, 839, 870, 871, 874, 875, 877, 879, 880, 881, 883, 887, 889, 890, 891, 892, 894, 895, 897, 898, 901, 902, 905, 912, 913, 916, 917, 920, 945, 946, 949, 956, 962], "why": [13, 15, 151, 164, 167, 168, 172, 956], "unifi": [13, 15, 67, 68, 163, 170, 187, 289, 318, 319, 320, 321, 333, 956], "should": [13, 15, 18, 64, 67, 68, 69, 70, 71, 108, 109, 150, 151, 152, 153, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 172, 173, 174, 210, 211, 213, 232, 234, 242, 244, 245, 247, 252, 260, 289, 339, 340, 343, 345, 348, 349, 352, 353, 356, 358, 361, 362, 365, 366, 369, 370, 373, 374, 377, 378, 381, 382, 385, 386, 389, 390, 393, 394, 397, 398, 401, 402, 405, 406, 409, 410, 413, 414, 417, 427, 430, 431, 434, 435, 438, 451, 454, 455, 458, 459, 462, 463, 466, 471, 474, 475, 478, 483, 486, 487, 490, 491, 494, 495, 498, 499, 502, 503, 506, 509, 512, 518, 521, 526, 529, 530, 533, 538, 541, 542, 545, 546, 549, 550, 553, 554, 557, 558, 562, 563, 567, 568, 572, 573, 576, 577, 588, 621, 630, 651, 658, 660, 663, 665, 671, 673, 675, 677, 679, 681, 689, 701, 702, 703, 705, 706, 708, 709, 711, 712, 714, 721, 723, 724, 727, 732, 734, 738, 740, 741, 743, 744, 746, 748, 750, 751, 753, 757, 759, 760, 762, 763, 765, 766, 768, 788, 818, 821, 875, 886, 887, 888, 889, 892, 893, 894, 898, 900, 912, 913, 916, 917, 920, 921, 924, 929, 932, 933, 936, 937, 940, 941, 944, 956], "them": [13, 14, 15, 16, 159, 161, 163, 164, 170, 172, 173, 174, 187, 956], "c": [13, 15, 16, 96, 97, 149, 154, 157, 160, 164, 169, 170, 171, 173, 187, 339, 518, 521, 577, 585, 586, 594, 647, 651, 653, 656, 658, 660, 663, 665, 671, 673, 675, 677, 679, 681, 689, 695, 788, 832, 835, 877, 879, 887, 890, 912, 913, 916, 933, 936, 941, 944, 956, 962], "standard": [13, 18, 139, 140, 154, 155, 156, 158, 159, 163, 167, 168, 187, 213, 214, 215, 217, 218, 219, 221, 222, 223, 225, 226, 227, 229, 230, 232, 234, 238, 239, 241, 242, 244, 245, 247, 248, 249, 251, 252, 261, 264, 272, 339, 340, 343, 353, 356, 358, 361, 378, 381, 398, 401, 402, 405, 410, 413, 435, 438, 467, 470, 518, 521, 534, 537, 550, 553, 554, 557, 563, 567, 568, 572, 702, 709, 711, 712, 714, 788, 802, 805, 806, 809, 822, 825, 870, 871, 874, 875, 880, 892, 893, 894, 898, 901, 902, 905, 912, 917, 920, 933, 936, 941, 944, 945, 946, 949, 956, 962], "re": [13, 14, 15, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 172, 175, 187, 289, 333, 577, 599, 702, 757, 759, 788, 822, 825, 887, 891, 956], "collabor": [13, 14, 15, 956], "consortium": [13, 15, 956, 962], "data": [13, 15, 67, 68, 69, 70, 71, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 154, 155, 156, 160, 162, 164, 166, 167, 168, 172, 213, 214, 215, 217, 218, 219, 221, 222, 223, 225, 226, 227, 229, 230, 232, 234, 235, 237, 238, 239, 241, 242, 244, 245, 247, 248, 249, 251, 256, 257, 258, 260, 261, 264, 266, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 284, 288, 289, 291, 292, 293, 294, 295, 296, 301, 302, 303, 305, 339, 340, 343, 345, 348, 349, 352, 353, 356, 358, 361, 362, 365, 366, 369, 370, 373, 374, 377, 378, 381, 382, 385, 386, 389, 390, 393, 394, 397, 398, 401, 402, 405, 406, 409, 410, 413, 414, 417, 419, 422, 427, 430, 431, 434, 435, 438, 439, 442, 443, 446, 447, 450, 451, 454, 455, 458, 459, 462, 463, 466, 467, 470, 471, 474, 475, 478, 483, 486, 487, 490, 491, 494, 495, 498, 499, 502, 503, 506, 509, 512, 518, 521, 526, 529, 530, 533, 538, 541, 542, 545, 546, 549, 550, 553, 554, 557, 558, 562, 563, 567, 568, 572, 573, 576, 577, 585, 586, 623, 624, 626, 643, 651, 667, 669, 687, 689, 698, 702, 703, 705, 706, 708, 709, 711, 712, 714, 715, 717, 718, 720, 721, 723, 724, 727, 732, 734, 735, 737, 738, 740, 741, 743, 744, 746, 748, 750, 751, 753, 757, 759, 760, 762, 763, 765, 766, 768, 788, 802, 805, 806, 809, 810, 813, 818, 821, 822, 825, 828, 831, 832, 835, 875, 886, 887, 888, 889, 890, 901, 902, 905, 912, 917, 920, 921, 924, 925, 928, 929, 932, 933, 936, 937, 940, 941, 944, 945, 946, 949, 951, 954, 956, 962], "api": [13, 14, 150, 151, 154, 156, 157, 159, 160, 162, 163, 165, 166, 167, 168, 169, 171, 173, 187, 213, 214, 215, 217, 218, 219, 221, 222, 223, 225, 226, 227, 229, 230, 232, 234, 238, 239, 241, 242, 244, 245, 247, 248, 249, 251, 252, 261, 264, 339, 340, 343, 353, 356, 358, 361, 378, 381, 398, 401, 402, 405, 410, 413, 435, 438, 467, 470, 518, 521, 534, 537, 550, 553, 554, 557, 563, 567, 568, 572, 702, 709, 711, 712, 714, 788, 802, 805, 806, 809, 822, 825, 892, 893, 894, 898, 901, 902, 905, 912, 917, 920, 945, 946, 949, 956, 962], "open": [14, 15, 16, 149, 150, 153, 156, 186, 213, 214, 875, 877, 878, 881, 883, 956], "project": [14, 15, 16, 150, 151, 153, 155, 161, 172, 174, 186, 187, 875, 876, 880], "grown": 14, "consider": [14, 157, 168], "recent": [14, 15, 150, 151], "year": [14, 16, 187, 956], "especi": [14, 150], "deep": [14, 67, 68, 149, 151, 152, 169, 173, 956], "learn": [14, 15, 141, 142, 143, 144, 145, 146, 150, 152, 154, 160, 169, 175, 186, 339, 443, 446, 651, 658, 660, 663, 665, 671, 673, 675, 677, 679, 681, 848, 849, 850, 851, 956], "can": [14, 15, 16, 18, 64, 149, 150, 151, 154, 155, 156, 157, 158, 159, 160, 161, 164, 165, 166, 167, 168, 169, 170, 172, 173, 174, 175, 186, 187, 213, 215, 217, 235, 237, 252, 261, 264, 289, 331, 332, 333, 702, 721, 723, 788, 818, 821, 875, 877, 878, 956, 962], "seen": [14, 15, 157, 172, 173], "rapidli": 14, "increas": [14, 289, 313, 317, 321, 788, 798, 801, 844, 847, 852, 864], "github": [14, 151, 152, 156, 159], "repo": [14, 15, 16, 150, 151, 158, 170, 172, 173, 174, 175, 186, 956, 962], "contain": [14, 21, 24, 25, 34, 35, 65, 66, 67, 68, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 125, 126, 127, 128, 129, 130, 131, 132, 134, 135, 136, 137, 138, 141, 145, 147, 148, 150, 151, 152, 153, 154, 156, 157, 159, 160, 165, 167, 168, 169, 170, 171, 174, 175, 187, 198, 201, 202, 204, 207, 213, 214, 215, 217, 218, 219, 221, 222, 223, 225, 226, 227, 229, 230, 231, 232, 234, 238, 239, 241, 242, 244, 245, 247, 248, 249, 251, 252, 261, 264, 289, 310, 311, 314, 323, 327, 339, 340, 343, 345, 348, 349, 352, 353, 356, 358, 361, 362, 365, 366, 369, 370, 373, 374, 377, 378, 381, 382, 385, 386, 389, 390, 393, 394, 397, 398, 401, 402, 405, 406, 409, 410, 413, 414, 417, 419, 422, 423, 427, 430, 431, 434, 435, 438, 439, 442, 443, 446, 447, 450, 451, 454, 455, 458, 459, 462, 463, 466, 467, 470, 471, 474, 475, 478, 479, 482, 483, 486, 487, 490, 491, 494, 495, 498, 499, 502, 503, 506, 507, 508, 509, 512, 514, 517, 518, 521, 522, 526, 529, 530, 533, 534, 537, 538, 541, 542, 545, 546, 549, 550, 553, 554, 557, 558, 562, 563, 567, 568, 572, 573, 576, 577, 578, 579, 581, 583, 586, 589, 590, 592, 594, 595, 602, 605, 606, 609, 616, 625, 645, 646, 647, 651, 653, 656, 658, 663, 667, 671, 675, 679, 689, 692, 695, 696, 701, 702, 703, 705, 706, 708, 709, 711, 712, 714, 715, 717, 718, 720, 721, 723, 724, 727, 732, 734, 735, 737, 738, 740, 741, 743, 744, 746, 748, 750, 751, 753, 754, 756, 757, 759, 760, 762, 763, 765, 766, 768, 772, 773, 776, 778, 781, 783, 786, 788, 789, 792, 794, 798, 802, 805, 806, 809, 810, 813, 814, 817, 818, 822, 825, 827, 828, 832, 836, 839, 840, 844, 848, 849, 850, 851, 852, 865, 870, 871, 874, 875, 876, 877, 880, 881, 883, 887, 888, 889, 890, 891, 892, 893, 894, 898, 900, 901, 902, 905, 907, 912, 913, 916, 917, 920, 921, 924, 925, 928, 929, 932, 933, 936, 937, 940, 941, 944, 945, 946, 949, 951, 954, 956], "term": [14, 125, 135, 151, 164, 689, 699], "time": [14, 15, 16, 125, 136, 137, 138, 150, 151, 152, 159, 160, 164, 165, 168, 170, 173, 175, 187, 651, 658, 660, 671, 673, 689, 699, 788, 840, 843, 848, 849, 850, 851, 887, 888, 889, 892, 893, 894, 898], "These": [14, 15, 16, 151, 156, 157, 159, 160, 164, 165, 167, 168, 170, 171, 173, 174, 175, 187, 702, 715, 717, 956, 962], "ar": [14, 15, 16, 21, 22, 23, 64, 67, 68, 69, 70, 71, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 186, 187, 188, 196, 213, 214, 289, 298, 299, 323, 327, 329, 333, 339, 406, 409, 495, 498, 499, 502, 534, 537, 542, 545, 563, 567, 577, 578, 581, 585, 586, 587, 611, 617, 618, 622, 629, 631, 643, 689, 698, 702, 706, 708, 724, 727, 728, 730, 732, 734, 741, 743, 751, 753, 754, 756, 763, 765, 788, 789, 792, 806, 809, 822, 825, 852, 854, 858, 864, 875, 880, 881, 883, 887, 888, 889, 890, 892, 893, 956], "written": [14, 150, 155, 156, 163, 167, 168, 170, 172, 175, 187], "mani": [14, 15, 16, 67, 68, 150, 151, 152, 156, 157, 160, 162, 163, 164, 165, 166, 167, 168, 170, 172, 173, 187, 788, 827], "differ": [14, 15, 16, 67, 68, 69, 70, 71, 150, 151, 154, 155, 156, 157, 159, 160, 163, 164, 166, 167, 168, 170, 171, 172, 173, 174, 175, 187, 252, 272, 289, 310, 311, 314, 315, 339, 353, 356, 509, 512, 558, 562, 689, 698, 788, 832, 835, 912, 929, 932, 937, 940, 956], "while": [14, 15, 67, 68, 69, 70, 71, 150, 151, 157, 161, 167, 174, 175, 187, 339, 495, 498, 499, 502, 892, 893, 912, 921, 924], "thi": [14, 15, 16, 18, 19, 20, 26, 27, 28, 29, 32, 33, 34, 35, 36, 37, 46, 47, 54, 55, 64, 65, 66, 67, 68, 69, 70, 71, 74, 75, 78, 79, 80, 81, 82, 83, 92, 93, 96, 97, 100, 101, 137, 138, 141, 142, 143, 144, 145, 146, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 186, 187, 204, 205, 206, 208, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 261, 262, 263, 264, 265, 289, 313, 317, 321, 328, 333, 338, 339, 340, 341, 342, 343, 344, 353, 354, 355, 356, 357, 358, 361, 378, 381, 394, 397, 398, 401, 402, 403, 404, 405, 410, 413, 431, 434, 435, 436, 437, 438, 467, 470, 495, 498, 499, 502, 518, 521, 530, 533, 534, 537, 550, 553, 554, 557, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 577, 578, 579, 580, 582, 604, 605, 606, 607, 608, 610, 621, 632, 637, 651, 653, 654, 655, 657, 658, 660, 663, 665, 667, 669, 671, 673, 675, 677, 679, 681, 687, 689, 692, 698, 701, 702, 709, 711, 712, 714, 728, 730, 747, 788, 789, 790, 791, 793, 802, 805, 806, 809, 818, 821, 822, 823, 824, 825, 826, 832, 835, 852, 858, 864, 865, 870, 871, 874, 877, 879, 887, 888, 892, 893, 894, 895, 896, 897, 898, 900, 901, 902, 905, 912, 917, 920, 921, 924, 933, 936, 941, 944, 945, 946, 949, 956, 962], "wonder": [14, 16, 172], "thing": [14, 15, 16, 150, 151, 152, 161, 172, 173], "research": [14, 186], "develop": [14, 15, 16, 149, 150, 151, 152, 186, 187, 956], "also": [14, 15, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 32, 33, 34, 35, 36, 37, 46, 47, 54, 55, 65, 66, 67, 68, 74, 75, 78, 79, 80, 81, 82, 83, 92, 93, 96, 97, 100, 101, 125, 135, 149, 150, 151, 154, 155, 156, 157, 159, 160, 162, 163, 164, 165, 166, 167, 168, 170, 172, 173, 174, 175, 186, 187, 204, 205, 206, 208, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 234, 235, 236, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 261, 262, 263, 264, 265, 339, 340, 341, 342, 343, 344, 353, 354, 355, 356, 357, 358, 361, 378, 381, 398, 401, 402, 403, 404, 405, 410, 413, 435, 436, 437, 438, 518, 521, 534, 537, 550, 553, 554, 557, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 577, 578, 579, 580, 582, 605, 606, 607, 608, 610, 621, 651, 653, 654, 655, 657, 658, 660, 689, 692, 698, 701, 702, 709, 711, 712, 714, 788, 789, 790, 791, 793, 802, 805, 806, 809, 822, 823, 824, 825, 826, 848, 849, 850, 851, 852, 853, 854, 862, 863, 864, 870, 871, 874, 877, 879, 892, 893, 894, 895, 896, 897, 898, 901, 902, 905, 912, 917, 920, 945, 946, 949], "consid": [14, 15, 67, 68, 155, 160, 171, 172, 173, 339, 495, 498, 499, 502, 892, 893, 894, 898, 900], "speed": 14, "evolv": 14, "sharabl": 14, "code": [14, 15, 16, 67, 68, 69, 70, 71, 82, 83, 150, 151, 152, 153, 154, 156, 157, 160, 161, 162, 163, 164, 167, 168, 169, 170, 171, 172, 173, 174, 175, 185, 187, 198, 200, 201, 202, 203, 204, 207, 209, 289, 311, 334, 339, 398, 401, 554, 557, 651, 653, 655, 656, 657, 689, 695, 696, 892, 893, 894, 898, 901, 902, 905, 912, 913, 916, 956, 962], "significantli": 14, "hinder": [14, 168], "librari": [14, 15, 16, 170, 175, 185, 187, 289, 334, 339, 431, 434, 495, 498, 499, 502, 702, 715, 717, 892, 893, 894, 898, 900, 912, 917, 920, 921, 924, 925, 928, 956], "outdat": 14, "month": 14, "rigor": 14, "maintain": [14, 151, 901, 902, 905, 907, 910], "against": [14, 67, 68, 159, 187, 252, 259, 702, 724, 727, 728, 730, 732, 734, 741, 743, 887, 888], "newest": 14, "version": [14, 15, 16, 150, 156, 170, 172, 702, 715, 717, 956], "For": [14, 15, 16, 64, 114, 115, 150, 151, 152, 153, 154, 155, 156, 157, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 172, 173, 174, 175, 186, 187, 213, 214, 232, 234, 339, 340, 343, 345, 348, 349, 352, 353, 356, 358, 361, 362, 365, 366, 369, 370, 373, 402, 405, 406, 409, 410, 413, 427, 430, 431, 434, 435, 438, 471, 474, 475, 478, 483, 486, 487, 490, 509, 512, 526, 529, 530, 533, 534, 537, 542, 545, 546, 549, 550, 553, 563, 567, 568, 572, 573, 576, 651, 667, 669, 687, 702, 751, 753, 760, 762, 788, 789, 792, 832, 835, 892, 893, 894, 898, 900, 912, 917, 920, 925, 928, 937, 940], "softwar": [14, 15, 150, 151], "pipelin": [14, 163, 175], "where": [14, 15, 16, 67, 68, 69, 70, 149, 150, 151, 152, 153, 156, 160, 161, 163, 164, 165, 166, 167, 170, 173, 174, 175, 187, 213, 226, 227, 229, 232, 234, 339, 370, 373, 427, 430, 479, 482, 509, 512, 526, 529, 577, 617, 621, 630, 702, 715, 717, 732, 734, 741, 743, 744, 746, 751, 753, 754, 756, 760, 762, 763, 765, 788, 789, 792, 798, 801, 802, 805, 810, 813, 832, 835, 844, 847, 852, 853, 863, 875, 876, 887, 890, 912, 933, 936, 941, 944, 945, 946, 949, 951, 954, 956], "rapid": [14, 15, 150], "prototyp": 14, "vital": [14, 175], "signific": [14, 15, 187], "bottleneck": 14, "As": [14, 62, 63, 108, 109, 151, 159, 160, 163, 164, 165, 166, 167, 168, 170, 172, 173, 174, 187, 892, 893, 894, 898, 900], "new": [14, 15, 16, 18, 64, 67, 68, 114, 115, 125, 135, 139, 140, 141, 142, 143, 144, 145, 146, 149, 150, 151, 152, 153, 154, 155, 156, 157, 159, 162, 164, 165, 167, 169, 172, 175, 186, 213, 218, 223, 225, 226, 227, 229, 238, 239, 241, 248, 249, 251, 252, 284, 339, 374, 377, 479, 482, 522, 525, 577, 599, 600, 601, 604, 605, 606, 609, 633, 634, 635, 636, 641, 642, 651, 658, 660, 663, 665, 671, 673, 675, 677, 679, 681, 788, 802, 805, 818, 821, 832, 835, 852, 857, 868, 869, 870, 871, 874, 956], "futur": [14, 16, 150, 151, 172, 187, 702, 715, 717], "avail": [14, 67, 68, 150, 151, 156, 166, 187, 289, 308, 324, 325, 326, 336, 577, 600], "specif": [14, 67, 68, 137, 138, 152, 160, 163, 164, 165, 166, 167, 168, 170, 171, 172, 174, 175, 186, 187, 252, 280, 289, 331, 334, 339, 495, 498, 499, 502, 577, 599, 600, 601, 628, 702, 715, 717, 757, 759, 788, 832, 835, 848, 849, 850, 851, 875, 876, 912, 917, 920, 921, 924, 925, 928, 956, 959, 961, 962], "quickli": [14, 16, 150, 151, 173, 174], "obsolet": [14, 16], "user": [14, 15, 125, 136, 137, 138, 150, 151, 153, 154, 159, 161, 164, 167, 169, 187], "constantli": 14, "invent": 14, "wheel": 14, "our": [14, 15, 62, 63, 108, 109, 149, 150, 151, 157, 164, 169, 172, 173, 174, 175, 187, 956], "desir": [14, 67, 68, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 252, 258, 261, 264, 289, 334, 577, 617], "provid": [14, 18, 64, 67, 68, 125, 126, 127, 128, 129, 130, 131, 132, 134, 135, 136, 141, 142, 143, 144, 145, 146, 150, 151, 156, 157, 160, 163, 164, 165, 166, 167, 168, 170, 174, 186, 187, 210, 211, 213, 232, 234, 252, 267, 268, 269, 276, 280, 288, 289, 308, 577, 598, 630, 634, 651, 658, 660, 663, 665, 671, 673, 675, 677, 679, 681, 702, 763, 765, 788, 806, 809, 832, 835, 887, 888, 912, 933, 936, 941, 944, 945, 946, 949, 951, 954], "simultan": [14, 16], "all": [14, 15, 16, 21, 22, 23, 24, 25, 60, 61, 62, 63, 64, 67, 68, 106, 107, 108, 109, 149, 150, 151, 152, 153, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 172, 173, 174, 175, 186, 187, 188, 196, 210, 211, 213, 214, 242, 244, 245, 247, 289, 298, 323, 329, 577, 578, 581, 585, 586, 611, 631, 646, 689, 699, 702, 748, 750, 757, 759, 766, 768, 788, 806, 809, 822, 825, 848, 849, 850, 851, 852, 853, 854, 863, 864, 865, 875, 876, 881, 883, 945, 956, 959, 961], "modern": [14, 15], "simpl": [14, 150, 151, 155, 156, 157, 159, 160, 163, 164, 165, 166, 167, 170, 172, 174, 175, 187, 577, 602], "scalabl": [14, 170], "manner": [14, 21, 24, 25, 67, 68, 155, 156, 166, 173, 186, 187, 852, 864], "must": [14, 16, 67, 68, 69, 70, 71, 141, 145, 150, 151, 152, 155, 156, 157, 160, 163, 164, 165, 166, 168, 170, 174, 175, 198, 199, 200, 201, 202, 203, 204, 207, 209, 213, 214, 215, 217, 218, 219, 221, 222, 223, 225, 226, 227, 229, 230, 231, 232, 234, 238, 239, 241, 242, 244, 245, 247, 248, 249, 251, 252, 258, 259, 260, 289, 318, 319, 320, 321, 333, 334, 339, 340, 343, 345, 348, 349, 352, 353, 356, 358, 361, 362, 365, 366, 369, 370, 373, 374, 377, 378, 381, 382, 385, 386, 389, 390, 393, 394, 397, 398, 401, 402, 405, 406, 409, 410, 413, 414, 417, 419, 422, 423, 426, 427, 430, 431, 434, 435, 438, 439, 442, 443, 446, 447, 450, 451, 454, 455, 458, 459, 462, 463, 466, 467, 470, 471, 474, 475, 478, 479, 482, 483, 486, 487, 490, 491, 494, 495, 498, 499, 502, 503, 506, 507, 508, 509, 512, 514, 517, 518, 521, 522, 525, 526, 529, 530, 533, 534, 537, 538, 541, 542, 545, 546, 549, 550, 553, 554, 557, 558, 562, 563, 567, 568, 572, 573, 576, 577, 589, 590, 592, 595, 599, 600, 601, 603, 606, 609, 617, 630, 633, 634, 651, 684, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 700, 701, 702, 703, 705, 706, 708, 709, 711, 712, 714, 715, 717, 718, 720, 721, 723, 724, 727, 728, 730, 732, 734, 735, 737, 738, 740, 741, 743, 744, 746, 747, 748, 750, 751, 753, 754, 756, 757, 759, 760, 762, 763, 765, 766, 768, 769, 771, 772, 773, 776, 778, 781, 783, 786, 788, 789, 792, 794, 797, 798, 801, 802, 805, 806, 809, 810, 813, 814, 817, 818, 821, 822, 825, 828, 831, 832, 835, 836, 839, 840, 843, 844, 847, 870, 871, 874, 875, 876, 877, 878, 880, 881, 883, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 898, 900, 901, 902, 905, 907, 910, 912, 917, 920, 921, 924, 925, 928, 929, 932, 933, 936, 937, 940, 941, 944, 945, 946, 949, 951, 954], "determin": [14, 67, 68, 156, 160, 164, 165, 166, 252, 261, 264, 266, 271, 276, 277, 278, 288, 289, 324, 325, 326, 336, 339, 345, 348, 349, 352, 353, 356, 358, 361, 362, 365, 366, 369, 370, 373, 374, 377, 378, 381, 386, 389, 390, 393, 394, 397, 398, 401, 406, 409, 410, 413, 414, 417, 427, 430, 431, 434, 451, 454, 455, 458, 459, 462, 471, 474, 475, 478, 483, 486, 487, 490, 503, 506, 509, 512, 526, 529, 530, 533, 542, 545, 546, 549, 550, 553, 563, 567, 568, 572, 577, 578, 581, 585, 586, 616, 618, 622, 623, 624, 625, 626, 643, 650, 651, 667, 669, 689, 700, 702, 703, 705, 706, 708, 709, 711, 712, 714, 721, 723, 724, 727, 732, 734, 738, 740, 741, 743, 747, 748, 750, 760, 762, 763, 765, 766, 768, 848, 849, 850, 851, 892, 893, 894, 898, 900, 945, 946, 949, 951, 954], "exactli": [14, 16, 157, 164, 166, 956, 962], "common": [14, 67, 68, 152, 157, 160, 162, 164, 166, 187], "ground": [14, 159], "li": 14, "between": [14, 67, 68, 69, 70, 71, 141, 143, 157, 159, 160, 163, 164, 168, 169, 171, 172, 173, 175, 186, 213, 214, 252, 272, 339, 370, 373, 526, 529, 772, 773, 776, 778, 781, 783, 786, 788, 802, 805, 832, 835, 852, 858, 875, 877, 878, 892, 893, 894, 898, 900, 956], "find": [14, 67, 68, 150, 151, 170, 173, 892, 893, 894, 898, 900, 956], "exist": [14, 15, 67, 68, 69, 70, 141, 145, 150, 152, 153, 156, 157, 158, 159, 160, 161, 162, 167, 170, 187, 577, 598], "essenti": [14, 15, 152, 157, 160, 166], "order": [14, 64, 67, 68, 69, 70, 71, 147, 148, 150, 151, 153, 156, 157, 161, 163, 164, 165, 166, 168, 172, 173, 175, 187, 339, 370, 373, 651, 658, 660, 663, 665, 671, 673, 675, 677, 679, 681, 702, 715, 717, 728, 730, 751, 753, 754, 756, 766, 768, 788, 806, 809, 848, 849, 850, 887, 890, 892, 893, 894, 898, 900, 901, 902, 905, 907, 910], "design": [14, 15, 154, 167, 170, 172, 187], "univers": 14, "abstract": [14, 18, 64, 141, 145, 164, 174, 187, 289, 304], "In": [14, 16, 64, 150, 151, 155, 156, 157, 160, 161, 164, 165, 166, 167, 168, 170, 172, 173, 174, 175, 186, 187, 289, 328, 334, 335, 338, 339, 353, 356, 509, 512, 530, 533, 577, 583, 621, 788, 818, 821, 875, 881, 883, 956], "search": [14, 21, 24, 25, 53, 67, 68, 99, 150, 155, 157, 159, 888, 889, 890, 891], "languag": [14, 16, 170], "first": [14, 15, 64, 125, 136, 137, 138, 141, 145, 150, 151, 153, 157, 160, 163, 164, 168, 170, 172, 173, 175, 210, 211, 213, 230, 231, 252, 279, 284, 289, 308, 320, 339, 353, 356, 378, 381, 386, 389, 390, 393, 394, 397, 398, 401, 419, 422, 439, 442, 447, 450, 463, 466, 467, 470, 487, 490, 491, 494, 499, 502, 503, 506, 509, 512, 518, 521, 526, 529, 558, 562, 577, 585, 651, 662, 702, 706, 708, 712, 714, 715, 717, 724, 727, 738, 740, 744, 746, 751, 753, 757, 759, 763, 765, 788, 794, 797, 822, 825, 832, 835, 836, 839, 848, 849, 850, 851, 852, 853, 862, 863, 875, 886, 887, 888, 889, 892, 893, 894, 898], "see": [14, 18, 64, 149, 150, 151, 152, 158, 160, 164, 166, 168, 172, 173, 186, 187, 213, 214, 223, 225, 230, 231, 252, 260, 280, 339, 353, 356, 378, 381, 386, 389, 390, 393, 394, 397, 398, 401, 414, 417, 431, 434, 463, 466, 487, 490, 499, 502, 503, 506, 509, 512, 518, 521, 526, 529, 530, 533, 558, 562, 702, 732, 734, 741, 743, 748, 750, 763, 765, 766, 768, 887, 889, 892, 893, 894, 898, 900, 912, 917, 920, 921, 924, 925, 928, 929, 932, 933, 936, 937, 940, 941, 944, 945, 946, 949, 951, 954, 956], "clear": [14, 15, 16, 64, 151, 152, 157, 159, 165, 166, 170, 172, 289, 307], "front": [14, 169, 170, 173, 956, 962], "runner": 14, "look": [14, 150, 151, 153, 155, 157, 160, 161, 164, 165, 166, 168, 170, 172, 174, 175, 956], "littl": [14, 172], "deeper": [14, 151, 154, 169, 289, 313, 317, 321, 852, 863, 864], "follow": [14, 15, 64, 67, 68, 125, 135, 141, 145, 150, 151, 152, 153, 155, 156, 157, 159, 161, 163, 164, 165, 166, 167, 169, 170, 172, 173, 174, 175, 187, 252, 275, 289, 333, 339, 530, 533, 577, 619, 620, 621, 641, 642, 651, 658, 660, 663, 665, 671, 673, 675, 677, 679, 681, 689, 700, 701, 702, 744, 746, 766, 768, 852, 858, 864, 892, 893, 894, 898, 900, 956], "same": [14, 16, 21, 22, 23, 67, 68, 125, 126, 127, 128, 129, 130, 131, 132, 150, 151, 153, 155, 157, 159, 160, 163, 164, 166, 167, 168, 170, 172, 174, 175, 213, 214, 219, 221, 227, 229, 232, 234, 239, 241, 242, 244, 245, 247, 249, 251, 252, 258, 259, 260, 289, 298, 299, 333, 339, 340, 343, 353, 356, 382, 385, 402, 405, 435, 438, 509, 512, 530, 533, 534, 537, 538, 541, 573, 576, 577, 603, 605, 606, 609, 630, 633, 634, 651, 667, 669, 684, 689, 690, 691, 692, 693, 694, 695, 696, 701, 702, 703, 705, 706, 708, 709, 711, 712, 714, 715, 717, 718, 720, 721, 723, 735, 737, 741, 743, 744, 746, 748, 750, 751, 753, 760, 762, 763, 765, 788, 794, 797, 806, 809, 810, 813, 822, 825, 828, 831, 832, 835, 848, 849, 850, 852, 865, 892, 893, 894, 898, 900, 901, 902, 905, 907, 910, 912, 913, 916, 917, 920, 921, 924, 925, 928, 929, 932, 937, 940, 941, 944, 956], "core": [14, 150, 152, 166, 170, 175, 289, 325, 956], "principl": 14, "oper": [14, 67, 68, 69, 70, 150, 152, 156, 157, 160, 163, 164, 166, 167, 173, 174, 213, 230, 231, 252, 280, 339, 353, 356, 394, 397, 398, 401, 447, 450, 514, 517, 518, 521, 530, 533, 554, 557, 577, 587, 599, 600, 601, 643, 651, 658, 660, 663, 665, 671, 673, 675, 677, 679, 681, 689, 690, 691, 692, 693, 694, 695, 696, 698], "expos": [14, 170, 174, 577, 593], "almost": [14, 151, 164, 171, 173], "ident": [14, 16, 67, 68, 160, 162, 164, 172, 173, 187, 289, 323, 852, 865, 956], "uniqu": [14, 160, 164, 187, 289, 298, 299, 848, 849, 850, 851, 852, 858, 892, 893, 894, 898, 899, 900], "syntax": [14, 15], "There": [14, 150, 151, 157, 160, 163, 164, 165, 170, 173, 187], "onli": [14, 67, 68, 141, 142, 143, 144, 145, 146, 149, 150, 151, 155, 157, 159, 160, 161, 163, 164, 165, 166, 167, 168, 170, 172, 173, 174, 175, 185, 187, 289, 329, 339, 495, 498, 499, 502, 702, 724, 727, 744, 746, 788, 806, 809, 852, 853, 854, 862, 863, 887, 888, 889, 912, 921, 924, 956], "so": [14, 15, 19, 20, 21, 24, 25, 26, 27, 28, 29, 32, 33, 34, 35, 36, 37, 46, 47, 54, 55, 65, 66, 67, 68, 74, 75, 78, 79, 80, 81, 82, 83, 92, 93, 96, 97, 100, 101, 150, 151, 155, 156, 157, 159, 162, 163, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 187, 188, 196, 204, 205, 206, 208, 215, 216, 219, 220, 223, 224, 227, 228, 235, 236, 239, 240, 242, 243, 245, 246, 249, 250, 261, 262, 263, 265, 340, 341, 342, 344, 353, 354, 355, 357, 402, 403, 404, 435, 436, 437, 563, 564, 565, 566, 568, 569, 570, 571, 578, 579, 580, 582, 606, 607, 608, 610, 653, 654, 655, 657, 789, 790, 791, 793, 822, 823, 824, 826, 852, 853, 863, 877, 879, 894, 895, 896, 897, 956], "wai": [14, 15, 18, 150, 161, 167, 172, 173, 174, 175, 187], "manipul": [14, 47, 93, 155, 175, 186, 789, 792, 794, 797, 798, 801, 802, 805, 806, 809, 810, 813, 814, 817, 818, 821, 822, 825, 827, 828, 831, 832, 835, 836, 839, 840, 843, 844, 847], "unsurprisingli": [14, 157], "fundament": [14, 164, 170], "consist": [14, 67, 68, 137, 138, 163, 167, 289, 321, 702, 715, 717, 912, 913, 916], "each": [14, 15, 16, 67, 68, 69, 70, 71, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 136, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 151, 152, 154, 155, 156, 157, 158, 159, 160, 162, 163, 164, 165, 167, 168, 169, 170, 172, 173, 175, 186, 187, 198, 201, 202, 204, 207, 213, 232, 234, 252, 259, 289, 298, 299, 310, 311, 312, 313, 314, 315, 316, 320, 333, 339, 340, 343, 345, 348, 349, 352, 353, 356, 358, 361, 362, 365, 366, 369, 370, 373, 374, 377, 378, 381, 382, 385, 386, 389, 390, 393, 394, 397, 398, 401, 402, 405, 406, 409, 410, 413, 414, 417, 419, 422, 427, 430, 431, 434, 435, 438, 439, 442, 443, 446, 447, 450, 451, 454, 455, 458, 459, 462, 463, 466, 467, 470, 471, 474, 475, 478, 479, 482, 483, 486, 487, 490, 491, 494, 495, 498, 499, 502, 503, 506, 509, 512, 514, 517, 518, 521, 522, 525, 526, 529, 530, 533, 534, 537, 538, 541, 542, 545, 546, 549, 550, 553, 554, 557, 558, 562, 563, 567, 568, 572, 573, 576, 577, 578, 581, 651, 658, 660, 663, 665, 671, 673, 675, 677, 679, 681, 689, 690, 691, 692, 693, 694, 695, 696, 697, 702, 703, 705, 706, 708, 709, 711, 715, 717, 724, 727, 732, 734, 735, 737, 741, 743, 748, 750, 751, 753, 788, 798, 801, 814, 817, 822, 825, 827, 832, 835, 840, 843, 844, 847, 852, 858, 865, 875, 876, 887, 890, 892, 893, 894, 898, 912, 913, 916, 956, 962], "veri": [14, 15, 150, 151, 155, 157, 159, 160, 164, 166, 167, 168, 171, 173, 174, 175, 187, 956], "similar": [14, 125, 136, 155, 164, 165, 166, 173, 187, 339, 530, 533, 689, 700], "convent": [14, 186, 702, 724, 727, 912, 913, 916], "those": [14, 67, 68, 150, 151, 152, 164, 170, 175, 213, 214, 651, 687, 702, 744, 746, 751, 753, 788, 789, 792], "introduc": [14, 164, 173, 788, 822, 825, 892, 893], "2006": 14, "layer": [14, 41, 87, 116, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 145, 147, 148, 155, 156, 170, 171, 174, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 870, 871, 874, 956], "therefor": [14, 151, 155, 156, 157, 158, 159, 160, 163, 164, 165, 166, 167, 168, 170, 172, 174, 187, 213, 214, 215, 217, 218, 219, 221, 222, 223, 225, 226, 227, 229, 230, 231, 232, 234, 238, 239, 241, 242, 244, 245, 247, 248, 249, 251, 252, 261, 264, 339, 340, 343, 353, 356, 358, 361, 402, 405, 435, 438, 518, 521, 550, 553, 554, 557, 563, 567, 577, 605, 689, 692, 701, 702, 712, 714, 788, 822, 825, 870, 871, 874, 892, 894, 898, 912, 917, 920, 945, 946, 949], "present": [14, 64, 67, 68, 151, 158, 164, 165, 166, 167, 168, 170], "itself": [14, 150, 151, 164, 167, 168, 174, 186, 187, 577, 583, 852, 864], "cut": 14, "cloth": 14, "adher": [14, 15, 156, 158, 170, 175], "semant": [14, 170, 175, 339, 530, 533], "round": [14, 15, 16, 32, 33, 78, 79, 150, 151, 152, 153, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 172, 173, 174, 175, 186, 339, 353, 356, 402, 405, 435, 438, 439, 442, 509, 512, 550, 553, 573, 576, 956], "up": [14, 15, 16, 149, 151, 152, 153, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 186, 187], "hopefulli": [14, 15, 16, 150, 151, 152, 153, 154, 155, 156, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 172, 173, 174, 175, 186], "paint": [14, 170], "pictur": [14, 170], "how": [14, 16, 125, 136, 137, 138, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 171, 172, 173, 174, 175, 186, 187, 956, 962], "pleas": [14, 15, 16, 150, 151, 152, 153, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 172, 173, 174, 175, 186, 956], "check": [14, 15, 16, 21, 22, 23, 24, 25, 67, 68, 150, 151, 164, 169, 170, 172, 173, 174, 175, 186, 252, 266, 273, 274, 276, 288, 289, 328, 338, 577, 587, 602, 616, 623, 624, 625, 626, 643, 650, 651, 667, 669, 702, 715, 717, 852, 853, 862, 863, 864, 956], "out": [14, 15, 16, 19, 20, 26, 27, 32, 33, 34, 35, 42, 43, 44, 45, 46, 47, 48, 49, 56, 57, 58, 59, 60, 61, 64, 65, 66, 67, 68, 69, 70, 78, 79, 80, 81, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 102, 103, 104, 105, 106, 107, 125, 133, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 169, 170, 172, 173, 174, 175, 186, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 213, 214, 215, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 258, 260, 289, 334, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 589, 590, 591, 592, 594, 595, 596, 599, 600, 601, 603, 605, 606, 607, 608, 609, 610, 617, 630, 633, 634, 651, 684, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 886, 887, 888, 889, 891, 892, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956], "discuss": [14, 15, 16, 149, 150, 151, 152, 153, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 172, 173, 174, 175, 186, 187, 956], "faq": [14, 15, 16, 170, 172, 173, 174, 175, 186], "reach": [14, 15, 16, 150, 151, 152, 153, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 172, 173, 174, 175, 186, 289, 313, 317, 321, 852, 864], "discord": [14, 15, 16, 150, 151, 152, 153, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 172, 173, 174, 175, 186, 956], "you": [14, 15, 16, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 172, 173, 174, 175, 186, 187, 956, 962], "question": [14, 15, 16, 150, 151, 157, 159, 170, 172, 173, 174, 175, 186, 187, 956], "With": [15, 16, 34, 35, 36, 37, 54, 55, 67, 68, 69, 70, 78, 79, 80, 81, 92, 93, 96, 97, 100, 101, 150, 157, 159, 170, 198, 200, 201, 202, 203, 204, 207, 209, 213, 232, 234, 252, 261, 264, 289, 311, 327, 339, 340, 343, 344, 353, 356, 357, 358, 361, 378, 381, 398, 401, 402, 405, 410, 413, 435, 438, 447, 450, 467, 470, 507, 508, 514, 517, 518, 521, 534, 537, 550, 553, 554, 557, 563, 564, 567, 568, 569, 572, 577, 578, 579, 580, 581, 582, 586, 594, 595, 602, 605, 606, 609, 610, 640, 645, 646, 647, 651, 653, 654, 656, 689, 692, 695, 696, 701, 702, 703, 705, 706, 708, 709, 711, 712, 714, 728, 730, 757, 759, 772, 773, 776, 783, 786, 788, 789, 792, 793, 802, 805, 806, 809, 814, 817, 822, 825, 826, 827, 836, 839, 870, 871, 874, 875, 876, 877, 879, 880, 881, 883, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 901, 902, 905, 912, 913, 916, 945, 946, 949], "central": 15, "goal": [15, 152], "being": [15, 16, 67, 68, 150, 151, 157, 159, 162, 163, 164, 165, 166, 167, 168, 170, 173, 186, 187, 213, 214, 577, 632, 637, 892, 899, 956], "would": [15, 150, 151, 153, 154, 156, 157, 159, 161, 162, 163, 164, 167, 168, 169, 170, 172, 174, 175, 187, 198, 203, 289, 334, 956], "entir": [15, 16, 67, 68, 125, 134, 151, 157, 158, 159, 163, 164, 167, 172, 173, 174, 175, 187, 289, 333, 912, 917, 920, 921, 924, 925, 928, 929, 932, 933, 936, 937, 940, 941, 944, 945, 946, 949, 951, 954], "forgiven": 15, "rais": [15, 64, 67, 68, 137, 138, 141, 145, 151, 167, 170, 172, 252, 260, 339, 427, 430, 526, 529, 577, 587, 612, 621, 635, 642, 648, 702, 724, 727, 731, 763, 765, 788, 828, 831, 832, 835, 887, 890, 912, 917, 920, 925, 928, 945, 946, 949, 951, 954], "an": [15, 16, 18, 21, 24, 25, 62, 63, 64, 67, 68, 108, 109, 114, 115, 137, 138, 141, 142, 143, 145, 150, 151, 152, 153, 155, 156, 157, 159, 160, 161, 163, 164, 165, 166, 167, 168, 170, 172, 173, 174, 175, 186, 187, 198, 201, 202, 204, 207, 212, 213, 214, 215, 217, 218, 219, 221, 222, 223, 225, 226, 227, 229, 230, 231, 232, 234, 235, 237, 238, 239, 241, 242, 244, 245, 247, 248, 249, 251, 252, 258, 259, 260, 261, 264, 272, 277, 278, 280, 289, 311, 315, 334, 339, 340, 343, 345, 348, 349, 352, 353, 356, 358, 361, 362, 365, 366, 369, 370, 373, 374, 377, 378, 381, 382, 385, 386, 389, 390, 393, 394, 397, 398, 401, 402, 405, 406, 409, 410, 413, 414, 417, 419, 422, 427, 430, 431, 434, 435, 438, 439, 442, 443, 446, 447, 450, 451, 454, 455, 458, 459, 462, 463, 466, 467, 470, 471, 474, 475, 478, 479, 482, 483, 486, 487, 490, 491, 494, 495, 498, 499, 502, 503, 506, 507, 508, 509, 512, 514, 517, 518, 521, 526, 529, 530, 533, 534, 537, 538, 541, 542, 545, 546, 549, 550, 553, 554, 557, 558, 562, 563, 567, 568, 572, 573, 576, 577, 588, 589, 590, 592, 594, 603, 604, 605, 617, 621, 623, 624, 625, 626, 646, 647, 648, 651, 667, 669, 684, 686, 687, 689, 692, 701, 702, 703, 705, 706, 708, 709, 711, 712, 714, 715, 717, 718, 720, 721, 723, 724, 727, 731, 732, 734, 735, 737, 741, 743, 744, 746, 747, 748, 750, 751, 753, 760, 762, 763, 765, 766, 768, 788, 789, 792, 794, 797, 798, 801, 802, 805, 806, 809, 810, 813, 818, 821, 822, 825, 827, 828, 831, 832, 835, 836, 839, 840, 843, 844, 847, 852, 858, 870, 871, 874, 875, 877, 878, 886, 887, 890, 891, 892, 893, 894, 898, 899, 900, 901, 902, 905, 907, 910, 912, 913, 916, 917, 920, 921, 924, 925, 928, 929, 932, 933, 936, 937, 940, 941, 944, 945, 946, 949, 951, 954, 956], "eyebrow": 15, "somehow": 15, "pytorch": [15, 16, 141, 142, 143, 144, 145, 146, 152, 160, 165, 166, 167, 168, 170, 172, 175, 187, 651, 658, 660, 663, 665, 671, 673, 675, 677, 679, 681, 956], "other": [15, 67, 68, 69, 70, 150, 151, 155, 156, 157, 159, 160, 163, 164, 167, 170, 172, 174, 175, 185, 186, 187, 210, 211, 213, 214, 339, 431, 434, 577, 578, 581, 583, 651, 662, 875, 881, 883, 892, 899, 912, 933, 936, 941, 944, 956], "strong": [15, 187], "industri": 15, "back": [15, 137, 138, 141, 145, 163, 169, 170, 172, 187, 956, 962], "momentum": 15, "won": [15, 16, 151, 175], "ad": [15, 108, 109, 147, 148, 150, 151, 152, 155, 156, 157, 159, 160, 162, 163, 164, 165, 167, 168, 170, 174, 187, 577, 641, 642, 702, 715, 717, 788, 802, 805], "just": [15, 16, 125, 134, 150, 151, 156, 157, 159, 160, 167, 170, 172, 173, 187, 912, 913, 916], "make": [15, 16, 150, 151, 152, 155, 156, 157, 158, 159, 160, 163, 164, 165, 166, 167, 168, 170, 172, 173, 175, 289], "problem": [15, 151, 163, 172], "even": [15, 16, 150, 151, 156, 160, 165, 166, 168, 172, 173, 174, 175, 187, 339, 526, 529, 534, 537], "wors": 15, "rather": [15, 67, 68, 155, 156, 159, 164, 175, 187, 213, 214, 289, 333, 577, 623, 624, 626, 651, 667, 669], "funni": 15, "comic": 15, "strip": 15, "easi": [15, 150, 151, 160, 164], "feasibl": 15, "space": [15, 213, 214, 230, 231, 577, 604], "case": [15, 21, 24, 25, 64, 67, 68, 69, 70, 71, 125, 136, 137, 138, 141, 145, 150, 151, 152, 155, 156, 157, 160, 161, 163, 164, 165, 166, 167, 168, 170, 172, 174, 175, 187, 213, 232, 234, 289, 328, 335, 338, 339, 340, 343, 345, 348, 349, 352, 353, 356, 358, 361, 362, 365, 366, 369, 370, 373, 398, 401, 402, 405, 406, 409, 410, 413, 427, 430, 431, 434, 435, 438, 471, 474, 475, 478, 483, 486, 487, 490, 509, 512, 526, 529, 530, 533, 534, 537, 538, 541, 542, 545, 546, 549, 550, 553, 563, 567, 568, 572, 573, 576, 577, 621, 633, 634, 702, 728, 730, 788, 818, 821, 852, 855, 861, 912, 917, 920, 921, 924, 925, 928, 933, 936, 937, 940, 941, 944], "unlik": [15, 157, 164, 289], "charger": 15, "charact": 15, "encod": [15, 173, 577, 604], "instant": [15, 956], "messag": [15, 151, 170, 172, 964, 965], "much": [15, 151, 155, 163, 164, 167, 170, 172, 173], "doe": [15, 18, 64, 67, 68, 151, 153, 154, 155, 156, 157, 159, 160, 161, 165, 167, 168, 170, 172, 173, 187, 339, 398, 401, 577, 621, 788, 827], "mandat": [15, 159, 167], "adopt": [15, 151, 163], "continu": [15, 16, 158, 159, 187], "own": [15, 16, 150, 156, 170, 187], "signatur": [15, 18, 64, 155, 156, 157, 164, 165, 166, 167, 168, 213, 214, 215, 217, 218, 219, 221, 222, 223, 225, 226, 227, 229, 230, 238, 239, 241, 242, 244, 245, 247, 248, 249, 251, 252, 261, 264, 339, 340, 343, 358, 361, 398, 401, 402, 405, 410, 413, 435, 438, 518, 521, 550, 553, 554, 557, 702, 712, 714, 788, 802, 805, 822, 825, 892, 893, 894, 898, 901, 902, 905, 912, 917, 920], "replac": [15, 67, 68, 151, 153, 157, 159, 162, 164, 165, 166, 170, 172, 175, 187, 577, 633, 634, 788, 789, 792, 875, 876], "your": [15, 16, 149, 150, 152, 153, 155, 156, 173, 174, 187, 956], "10": [15, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 141, 143, 150, 153, 157, 164, 170, 172, 173, 213, 226, 231, 289, 339, 378, 381, 382, 385, 410, 413, 447, 450, 467, 470, 475, 478, 550, 553, 577, 595, 605, 632, 637, 651, 671, 672, 673, 674, 689, 695, 702, 709, 711, 712, 714, 738, 740, 757, 759, 788, 806, 809, 814, 817, 827, 870, 871, 874, 875, 876, 877, 878, 879, 887, 890, 892, 893, 912, 913, 916, 917, 920], "100": [15, 16, 96, 97, 173, 174, 175, 187, 339, 550, 553, 877, 879, 956], "despit": [15, 164, 166], "distinct": [15, 156, 164, 167, 169, 892, 893, 894, 898, 900, 956], "still": [15, 67, 68, 156, 159, 165, 172, 174, 187, 956], "believ": [15, 151], "share": [15, 67, 68, 157, 159, 160, 161, 164, 170, 252, 284], "bring": [15, 170, 171], "benefit": [15, 16, 150, 151, 163, 164, 167, 172, 173, 187], "unrel": [15, 151], "what": [15, 16, 151, 154, 156, 157, 162, 164, 168, 169, 170, 172, 173, 174, 175, 186, 187, 956], "again": [15, 16, 151, 155, 157, 164, 167, 173, 175, 187], "contrari": 15, "bumpi": 15, "road": 15, "allud": [15, 173], "most": [15, 67, 68, 150, 151, 155, 159, 160, 163, 164, 165, 166, 167, 168, 170, 172, 173, 174, 187, 702, 715, 717], "technolog": 15, "sector": [15, 339, 349, 352, 362, 365, 374, 377], "full": [15, 16, 69, 70, 151, 156, 165, 168, 170, 187, 213, 252, 272, 339, 447, 450, 467, 470, 689, 695, 702, 744, 746, 748, 750, 751, 753, 870, 871, 874], "success": 15, "reason": [15, 151, 155, 157, 160, 163, 164, 165, 167, 170, 172, 339, 530, 533], "build": [15, 125, 136, 137, 138, 149, 150, 160, 169, 171, 174, 175, 187, 892, 893, 894, 898, 900, 956], "custom": [15, 18, 64, 174], "comput": [15, 16, 67, 68, 150, 160, 164, 170, 173, 187, 289, 333, 339, 353, 356, 378, 381, 390, 393, 398, 401, 419, 422, 423, 426, 443, 446, 447, 450, 463, 466, 467, 470, 491, 494, 495, 498, 499, 502, 503, 506, 509, 512, 514, 517, 518, 521, 577, 589, 590, 592, 595, 596, 651, 653, 656, 658, 660, 662, 663, 665, 671, 673, 675, 677, 679, 681, 684, 686, 689, 690, 691, 692, 693, 694, 695, 696, 698, 700, 702, 703, 705, 706, 708, 715, 717, 718, 720, 721, 723, 724, 727, 728, 730, 744, 746, 747, 748, 750, 751, 753, 763, 765, 766, 768, 772, 773, 776, 778, 781, 783, 786, 852, 858, 892, 893, 894, 898, 900, 912, 913, 916, 917, 920, 921, 924, 925, 928, 929, 932, 933, 936, 937, 940, 941, 944], "thank": [15, 173], "interoper": 15, "compon": [15, 170], "bio": [15, 150], "hardwar": [15, 150], "initi": [15, 64, 67, 68, 69, 70, 71, 118, 119, 121, 122, 124, 125, 126, 127, 128, 129, 130, 131, 132, 134, 135, 136, 137, 138, 141, 145, 151, 161, 165, 166, 289, 689, 699], "pcie": 15, "interfac": [15, 175, 187], "motherboard": 15, "raid": 15, "storag": [15, 173], "virtual": [15, 151, 153], "bluetooth": 15, "wireless": 15, "exchang": 15, "btx": 15, "form": [15, 21, 22, 23, 24, 25, 67, 68, 149, 160, 174, 175, 213, 215, 217, 235, 237, 242, 244, 245, 247, 577, 583, 651, 658, 660, 663, 665, 671, 673, 675, 677, 679, 681, 689, 702, 703, 705, 709, 711, 712, 714, 715, 717, 718, 720, 721, 723, 732, 734, 735, 737, 741, 743, 744, 746, 748, 750, 751, 753, 754, 756, 760, 762, 852, 854, 864], "factor": [15, 125, 126, 127, 128, 129, 130, 131, 132, 141, 142, 143, 144, 289, 298, 331, 332, 333, 651, 653, 656, 658, 660, 671, 673, 675, 677, 689, 690, 691, 692, 693, 694, 695, 696, 702, 703, 705], "sata": 15, "connect": [15, 125, 135, 136, 150, 174, 175], "host": [15, 187], "bu": 15, "adapt": [15, 141, 144, 651, 675, 677], "devic": [15, 26, 27, 31, 67, 68, 77, 96, 97, 114, 115, 116, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 145, 147, 148, 151, 154, 155, 160, 162, 165, 172, 173, 187, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 226, 227, 228, 229, 230, 231, 235, 236, 237, 238, 239, 240, 241, 242, 244, 245, 247, 248, 249, 250, 251, 291, 292, 293, 294, 295, 296, 298, 299, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 577, 605, 606, 609, 630, 633, 634, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884], "html": [15, 153, 156, 213, 214, 215, 217, 218, 219, 221, 222, 223, 225, 226, 227, 229, 230, 238, 239, 241, 242, 244, 245, 247, 248, 249, 251, 252, 261, 264, 339, 340, 343, 358, 361, 398, 401, 402, 405, 410, 413, 435, 438, 518, 521, 550, 553, 554, 557, 702, 712, 714, 788, 802, 805, 822, 825, 892, 893, 894, 898, 901, 902, 905, 912, 917, 920], "enabl": [15, 67, 68, 69, 70, 71, 150, 151, 159, 160, 163, 164, 167, 169, 170, 171, 173, 175, 187], "anyon": [15, 149, 187], "websit": 15, "tcp": 15, "ip": 15, "node": [15, 67, 68, 164, 852, 853, 862, 863], "commun": [15, 149, 151, 152, 187, 956, 962], "network": [15, 111, 125, 137, 138, 160, 164, 170, 174, 186, 689, 698, 956], "smtp": 15, "possibl": [15, 149, 150, 151, 152, 156, 157, 159, 164, 165, 167, 170, 173, 186, 187, 577, 627, 645, 912, 917, 920, 925, 928], "send": 15, "gmail": 15, "outlook": 15, "pop": [15, 64], "email": 15, "ieee": [15, 212, 252, 272, 339, 353, 356, 431, 434, 509, 512, 530, 533, 550, 553], "754": [15, 212, 252, 272, 339, 353, 356, 431, 434, 509, 512, 530, 533, 550, 553], "allow": [15, 137, 138, 170, 187, 213, 230, 231, 577, 627], "calcul": [15, 67, 68, 69, 70, 71, 156, 339, 340, 343, 345, 348, 349, 352, 353, 356, 358, 361, 362, 365, 366, 369, 370, 373, 406, 409, 410, 413, 414, 417, 427, 430, 431, 434, 471, 474, 475, 478, 479, 482, 483, 486, 487, 490, 509, 512, 526, 529, 542, 545, 546, 549, 550, 553, 558, 562, 563, 567, 568, 572, 772, 773, 776, 778, 781, 783, 786, 912, 917, 920, 921, 924, 925, 928, 929, 932, 933, 936, 937, 940, 941, 944], "live": [15, 16], "depend": [15, 150, 151, 156, 162, 164, 165, 170, 187, 252, 258, 339, 340, 343, 345, 348, 349, 352, 358, 361, 362, 365, 366, 369, 370, 373, 406, 409, 410, 413, 427, 430, 431, 434, 471, 474, 475, 478, 479, 482, 483, 486, 526, 529, 542, 545, 546, 549, 563, 567, 568, 572, 702, 715, 717, 744, 746, 748, 750, 751, 753, 887, 891, 901, 902, 905, 907, 910], "did": [15, 152, 175], "aris": [15, 187], "until": [15, 151, 187, 956], "substanti": [15, 151, 159, 163], "innov": 15, "growth": 15, "usag": [15, 170, 289, 333], "relev": [15, 141, 142, 143, 144, 145, 146, 150, 152, 157, 164, 165, 173], "area": [15, 167, 185, 339, 349, 352, 362, 365, 374, 377, 956], "necess": 15, "parti": [15, 187], "could": [15, 16, 150, 151, 157, 159, 164, 165, 167, 170, 172, 173, 174, 892, 893, 894, 898, 900], "easili": [15, 151, 173, 174, 175, 187, 956], "engag": [15, 149, 150, 151, 152, 153, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168], "regard": [15, 164, 289], "effect": [15, 156, 163, 164, 168, 187, 213, 232, 234, 651, 679, 681, 912, 933, 936, 941, 944], "2015": 15, "sinc": [15, 150, 151, 187], "alongsid": 15, "machin": [15, 150, 160, 186, 252, 272, 275, 339, 443, 446, 702, 732, 734, 741, 743], "given": [15, 16, 64, 67, 68, 114, 115, 150, 151, 152, 153, 155, 156, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 170, 172, 174, 175, 186, 213, 214, 218, 230, 231, 289, 322, 328, 330, 331, 332, 333, 335, 338, 577, 595, 596, 606, 609, 633, 634, 649, 651, 653, 656, 658, 660, 663, 665, 671, 673, 675, 677, 679, 681, 689, 690, 691, 692, 693, 694, 695, 696, 702, 769, 771, 772, 773, 776, 778, 781, 783, 786, 788, 789, 792, 802, 805, 806, 809, 814, 817, 822, 825, 827, 840, 843, 852, 859, 860, 875, 877, 878, 880, 881, 883, 886, 901, 907, 910], "frame": [15, 186], "less": [15, 32, 33, 67, 68, 78, 79, 151, 157, 164, 168, 169, 170, 339, 345, 348, 349, 352, 358, 361, 370, 373, 402, 405, 471, 474, 475, 478, 483, 486, 526, 529, 530, 533, 538, 541, 550, 553, 702, 732, 734, 741, 743, 766, 768, 875, 881, 883, 912, 941, 944], "matur": [15, 187], "state": [15, 111, 112, 113, 114, 115, 116, 118, 119, 121, 122, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 156, 168, 169, 170, 171, 173, 186, 339, 509, 512, 689, 699, 956], "than": [15, 67, 68, 151, 155, 157, 159, 164, 167, 170, 173, 174, 175, 187, 213, 214, 252, 272, 289, 333, 339, 345, 348, 349, 352, 358, 361, 370, 373, 386, 389, 394, 397, 402, 405, 435, 438, 439, 442, 471, 474, 475, 478, 483, 486, 507, 526, 529, 530, 533, 538, 541, 550, 553, 573, 576, 577, 623, 624, 626, 651, 667, 669, 702, 706, 708, 724, 727, 732, 734, 741, 743, 766, 768, 788, 789, 792, 806, 809, 828, 831, 875, 881, 883, 892, 893, 894, 898, 900, 912, 929, 932, 933, 936, 937, 940, 941, 944], "preced": [15, 174], "mention": [15, 150, 151, 157, 160, 167, 168], "aros": 15, "70": [15, 702, 738, 740, 912, 913, 916], "80": [15, 702, 738, 740, 912, 913, 916], "90": [15, 96, 97, 339, 398, 401, 534, 537, 702, 738, 740, 877, 879, 912, 913, 916], "effort": [15, 149, 187], "stage": [15, 149, 151, 153, 154, 956], "complet": [15, 67, 68, 151, 152, 163, 164, 172, 173, 702, 744, 746], "natur": [15, 157, 163, 164, 186, 339, 427, 430, 471, 474, 479, 482, 702, 747], "like": [15, 64, 150, 151, 153, 154, 155, 156, 157, 159, 166, 167, 168, 169, 170, 172, 173, 174, 175, 186, 187, 651, 667, 669, 875, 881, 883, 956], "certainli": 15, "mission": [15, 956], "creat": [15, 18, 64, 67, 68, 114, 115, 116, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 153, 165, 166, 167, 170, 171, 174, 185, 186, 213, 214, 215, 217, 218, 219, 221, 222, 226, 227, 229, 230, 231, 235, 237, 238, 239, 241, 248, 249, 251, 289, 298, 299, 577, 605, 606, 609, 630, 633, 634, 645, 651, 686, 875, 876, 877, 878, 881, 883, 956, 962], "At": [15, 152], "process": [15, 16, 149, 150, 151, 153, 160, 164, 170, 175, 289, 298, 299, 328, 338], "ourselv": 15, "lead": [15, 16, 67, 68, 69, 70, 71, 187, 702, 744, 746, 751, 753], "quansight": 15, "compani": 15, "made": [15, 151, 152, 164, 167, 170, 172], "organ": [15, 155, 160, 163, 164], "panda": 15, "scipi": 15, "conda": [15, 150, 153], "dask": [15, 892, 893, 894, 898, 900], "apach": 15, "onnx": 15, "scikit": 15, "jupyt": 15, "aw": 15, "cupi": 15, "net": [15, 16, 170, 175], "sympi": 15, "rai": [15, 339, 370, 373], "modin": 15, "spyder": 15, "includ": [15, 67, 68, 125, 135, 136, 139, 140, 151, 152, 155, 156, 157, 158, 159, 160, 161, 163, 164, 165, 166, 167, 168, 186, 187, 213, 214, 215, 217, 235, 237, 577, 616, 650, 702, 766, 768, 852, 853, 875, 881, 883, 887, 889, 912, 917, 920, 921, 924, 925, 928, 929, 932, 933, 936, 937, 940, 941, 944, 945, 946, 949, 951, 954, 959, 961], "member": [15, 151], "googl": [15, 956], "octoml": 15, "einop": [15, 67, 68, 577, 599, 600, 601], "further": [15, 16, 151, 153, 157, 163, 169, 173, 174, 956], "sponsor": 15, "lg": 15, "electron": 15, "microsoft": 15, "d": [15, 16, 64, 96, 97, 149, 150, 154, 164, 173, 577, 586, 594, 689, 690, 691, 692, 693, 694, 695, 696, 702, 712, 714, 738, 740, 877, 879, 956, 962], "shaw": 15, "co": [15, 32, 33, 78, 79, 170, 186, 339, 577, 604, 956], "intel": 15, "togeth": [15, 67, 68, 147, 148, 163, 164, 174, 175, 187], "major": [15, 165, 166, 187, 887, 890], "involv": [15, 149, 153, 154, 165, 175, 252, 280, 339, 353, 356, 509, 512, 956, 962], "anoth": [15, 67, 68, 150, 151, 160, 164, 165, 172, 175, 213, 223, 225, 252, 259, 261, 264], "promis": 15, "sign": [15, 32, 33, 78, 79, 150, 171, 175, 213, 214, 339, 340, 343, 353, 356, 370, 373, 394, 397, 509, 512, 530, 533, 702, 747, 892, 893, 894, 898, 900, 912, 929, 932, 937, 940], "pursuit": 15, "unif": [15, 149, 172, 956, 962], "clearli": [15, 152, 157], "lot": [15, 16, 162, 172, 187], "thought": [15, 150, 151, 168], "care": [15, 151, 175], "attent": [15, 125, 136, 151, 163, 164, 689, 700, 701], "gone": [15, 169], "simplifi": [15, 170, 171, 172, 174], "compat": [15, 168, 187, 252, 260, 339, 353, 356, 370, 373, 378, 381, 386, 389, 390, 393, 394, 397, 398, 401, 414, 417, 419, 422, 439, 442, 447, 450, 463, 466, 467, 470, 487, 490, 491, 494, 499, 502, 503, 506, 509, 512, 518, 521, 526, 529, 530, 533, 558, 562, 702, 732, 734, 741, 743, 748, 750, 757, 759, 763, 765, 766, 768, 788, 818, 821, 887, 889, 912, 917, 920, 921, 924, 925, 928, 929, 932, 933, 936, 937, 940, 941, 944, 945, 946, 949, 951, 954, 956], "excit": [15, 149, 154, 956], "complianc": 15, "hope": [15, 187], "due": [15, 150, 164, 167, 339, 509, 512], "suit": [15, 150, 154, 158, 159, 173, 186], "some": [15, 16, 67, 68, 125, 133, 150, 151, 152, 155, 156, 157, 160, 163, 164, 165, 166, 167, 168, 171, 172, 173, 174, 186, 187, 339, 431, 434, 651, 653, 656, 658, 660, 663, 665, 671, 673, 675, 677, 679, 681, 687, 689, 697, 956], "motiv": [15, 172], "great": [15, 16, 159, 170, 172], "convinc": 15, "celebr": 15, "encourag": [15, 186, 187, 956, 962], "foundat": 15, "point": [16, 151, 156, 157, 163, 167, 168, 170, 172, 173, 186, 212, 213, 214, 218, 222, 226, 238, 248, 252, 258, 272, 277, 280, 339, 345, 348, 349, 352, 353, 356, 358, 361, 362, 365, 366, 369, 370, 373, 374, 377, 398, 401, 402, 405, 406, 409, 410, 413, 414, 417, 427, 430, 431, 434, 435, 438, 471, 474, 475, 478, 483, 486, 487, 490, 509, 512, 526, 529, 530, 533, 534, 537, 542, 545, 546, 549, 550, 553, 563, 567, 568, 572, 573, 576, 702, 703, 705, 709, 711, 715, 717, 718, 720, 721, 723, 732, 734, 741, 743, 744, 746, 748, 750, 751, 753, 766, 768, 892, 893, 894, 898, 900, 912, 917, 920, 921, 924, 925, 928, 929, 932, 933, 936, 937, 940, 941, 944], "mai": [16, 18, 64, 150, 151, 164, 172, 174, 213, 214, 223, 225, 289, 334, 339, 419, 422, 447, 450, 467, 470, 495, 498, 499, 502, 577, 598, 892, 893, 894, 898, 900, 901, 902, 905, 907, 910, 912, 917, 920, 921, 924, 925, 928], "ask": [16, 170, 172, 187, 956], "perfectli": 16, "happi": [16, 150, 187], "abund": 16, "better": [16, 154, 169, 172, 173, 174], "ll": [16, 149, 151, 157, 164, 167, 173], "give": [16, 150, 151, 154, 156, 157, 161, 168, 172, 788, 818, 821], "two": [16, 64, 69, 70, 156, 157, 159, 163, 164, 169, 173, 175, 213, 214, 222, 232, 234, 242, 244, 245, 247, 252, 279, 284, 339, 394, 397, 534, 537, 577, 585, 702, 703, 705, 709, 711, 712, 714, 715, 717, 718, 720, 721, 723, 724, 727, 728, 730, 732, 734, 735, 737, 738, 740, 741, 743, 744, 746, 747, 748, 750, 751, 753, 754, 756, 760, 762, 763, 765, 788, 836, 839, 892, 893, 894, 898, 899, 900, 956], "streamlin": 16, "workflow": [16, 151, 173, 185, 956], "save": [16, 67, 68, 137, 138, 187, 577, 638], "week": [16, 151, 152, 956], "let": [16, 156, 157, 164, 165, 166, 170, 172, 173, 174, 175, 912, 921, 924, 933, 936, 937, 940, 941, 944, 956], "sai": [16, 150, 162, 172], "deepmind": 16, "releas": [16, 150, 152, 956], "awesom": 16, "paper": 16, "love": 16, "choic": [16, 150, 167, 173, 912, 933, 936, 941, 944], "perceiverio": 16, "happen": [16, 150, 151, 173], "slew": 16, "rush": 16, "f": [16, 64, 153, 154, 164, 170, 173, 175, 339, 443, 446, 577, 618, 622], "g": [16, 154, 164, 187, 252, 257, 280, 289, 305, 875, 880, 881, 883, 892, 893, 894, 898, 900, 912, 917, 920, 925, 928, 929, 932, 937, 940], "inevit": 16, "deviat": [16, 139, 140, 870, 871, 874, 875, 880, 912, 933, 936], "origin": [16, 67, 68, 69, 70, 71, 161, 162, 165, 170, 172, 339, 370, 373, 702, 728, 730, 788, 818, 821, 822, 825], "often": [16, 160, 187], "erron": 16, "train": [16, 160, 164, 166, 173, 174, 175, 185, 186, 187, 651, 653, 656, 658, 660, 671, 673, 956], "poor": 16, "converg": 16, "perform": [16, 67, 68, 155, 157, 159, 160, 161, 163, 164, 166, 167, 168, 170, 173, 187, 198, 203, 213, 230, 231, 289, 577, 595, 599, 600, 601, 619, 620, 621, 651, 658, 660, 663, 665, 671, 673, 675, 677, 679, 681, 689, 697, 699, 702, 751, 753, 848, 849, 850, 851, 852, 859, 860, 945, 946, 949, 951, 954], "issu": [16, 149, 152, 170, 172, 174, 187], "etc": [16, 62, 63, 67, 68, 108, 109, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 145, 147, 148, 150, 151, 152, 155, 157, 159, 163, 164, 165, 168, 170, 172, 173, 187, 213, 230, 231, 577, 605, 606, 609, 630, 633, 634, 875, 876, 877, 878, 881, 883, 892, 893, 894, 898, 900], "publish": [16, 187], "manag": [16, 149, 167, 187, 289], "get": [16, 64, 67, 68, 125, 134, 149, 150, 152, 154, 160, 165, 166, 167, 170, 171, 172, 173, 174, 252, 270, 271, 272, 275, 289, 298, 299, 308, 309, 322, 323, 328, 332, 335, 338, 577, 584, 611, 612, 613, 632, 956, 962], "work": [16, 150, 151, 152, 154, 159, 164, 165, 166, 169, 170, 171, 172, 174, 175, 956, 962], "repositori": [16, 150, 151, 153, 158], "pull": [16, 149, 150, 153, 155, 187], "request": [16, 149, 155, 289, 325], "confus": [16, 167], "do": [16, 67, 68, 150, 151, 152, 155, 156, 157, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 172, 173, 174, 175, 187, 339, 530, 533, 577, 621, 651, 667, 669, 687, 852, 853, 862, 863, 864], "don": [16, 62, 63, 108, 109, 150, 151, 152, 165, 174, 187], "expect": [16, 187, 577, 584, 956], "codebas": [16, 149, 154, 155, 167, 169, 289, 331, 332, 956], "total": [16, 67, 68, 69, 70, 71, 149, 151, 157, 159, 166, 173, 174, 187, 289, 335, 887, 890, 912, 933, 936, 941, 944], "hour": 16, "spent": 16, "spin": 16, "off": [16, 169, 702, 712, 714, 760, 762], "test": [16, 150, 152, 154, 157, 187, 252, 277, 278, 339, 451, 454, 455, 458, 459, 462, 945, 946, 949, 951, 954], "error": [16, 67, 68, 137, 138, 141, 145, 150, 159, 163, 166, 168, 172, 187, 198, 199, 289, 339, 423, 426, 912, 917, 920, 925, 928], "iter": [16, 21, 22, 23, 24, 25, 62, 63, 64, 67, 68, 69, 70, 71, 108, 109, 164, 170, 173, 210, 211, 289, 311, 312, 314, 315, 316, 317, 320, 333, 577, 578, 581, 634, 639, 788, 798, 801, 814, 817, 827, 840, 843, 844, 847, 852, 853, 854, 858, 862, 863, 864], "address": [16, 151, 152, 163, 170], "sake": 16, "singl": [16, 67, 68, 151, 155, 157, 159, 160, 162, 164, 167, 168, 170, 173, 174, 175, 187, 289, 298, 299, 318, 319, 320, 321, 577, 647, 650, 875, 880, 881, 883, 892, 893], "multipl": [16, 67, 68, 78, 79, 80, 81, 92, 93, 96, 97, 125, 135, 151, 157, 160, 164, 187, 339, 353, 357, 509, 512, 577, 578, 580, 581, 582, 606, 610, 627, 702, 721, 723, 788, 789, 792, 793, 822, 825, 826, 827, 870, 871, 874, 877, 879, 887, 888, 889, 912, 917, 920, 921, 924, 925, 928, 929, 932, 933, 936, 937, 940, 941, 944, 945, 946, 949, 951, 954], "line": [16, 150, 157, 163, 171, 172, 173, 174, 185, 956, 962], "convert": [16, 21, 22, 23, 24, 25, 67, 68, 115, 163, 170, 187, 188, 196, 213, 215, 217, 235, 237, 252, 256, 257, 289, 305, 306, 307, 308, 328, 335, 338, 577, 640, 646, 647, 702, 769, 771, 852, 854, 864, 865], "directli": [16, 151, 155, 156, 160, 163, 164, 165, 166, 167, 168, 170, 172, 174, 175, 186, 187, 852, 864], "graph": [16, 137, 138, 160, 164, 171, 187, 651, 658, 660, 663, 665, 671, 673, 675, 677, 679, 681, 892, 893, 894, 898, 900], "guarante": [16, 163, 187, 892, 893], "turn": [16, 157, 164], "4": [16, 32, 33, 46, 47, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 141, 142, 143, 144, 146, 153, 157, 161, 164, 170, 172, 173, 174, 175, 198, 200, 201, 203, 213, 227, 229, 232, 234, 239, 241, 249, 251, 252, 261, 263, 264, 265, 289, 311, 327, 339, 340, 342, 343, 344, 353, 354, 355, 356, 357, 358, 361, 370, 373, 378, 381, 398, 401, 402, 404, 405, 410, 413, 435, 437, 438, 447, 450, 467, 470, 507, 508, 514, 517, 518, 521, 534, 537, 550, 553, 554, 557, 563, 564, 566, 567, 568, 569, 571, 572, 577, 586, 595, 604, 605, 606, 608, 609, 610, 640, 645, 651, 653, 655, 656, 657, 689, 692, 693, 694, 696, 699, 701, 702, 706, 708, 709, 711, 712, 714, 721, 723, 732, 734, 738, 740, 757, 759, 760, 762, 772, 783, 786, 788, 789, 790, 791, 792, 793, 794, 797, 802, 805, 806, 809, 814, 817, 818, 821, 822, 824, 825, 826, 827, 836, 839, 870, 871, 874, 875, 876, 877, 879, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 897, 898, 901, 902, 905, 912, 913, 916, 917, 920, 945, 946, 949, 956], "step": [16, 36, 37, 67, 68, 82, 83, 141, 142, 143, 144, 145, 146, 150, 151, 153, 157, 161, 163, 164, 165, 166, 170, 173, 174, 175, 186, 213, 214, 230, 231, 289, 651, 653, 654, 655, 656, 657, 658, 659, 660, 661, 663, 665, 671, 672, 673, 674, 675, 677, 679, 681, 848, 849, 850, 851, 956], "take": [16, 149, 150, 151, 156, 157, 159, 164, 165, 166, 170, 172, 174, 175, 187, 339, 398, 401, 956, 962], "few": [16, 151, 152, 160, 164, 165, 166, 167, 171, 172, 173, 174, 185, 956, 962], "second": [16, 141, 142, 143, 150, 157, 167, 172, 252, 279, 284, 289, 320, 339, 353, 356, 378, 381, 386, 389, 390, 393, 394, 397, 398, 401, 419, 422, 439, 442, 447, 450, 463, 466, 467, 470, 487, 490, 491, 494, 499, 502, 503, 506, 509, 512, 518, 521, 526, 529, 558, 562, 577, 585, 632, 637, 651, 653, 656, 658, 660, 671, 673, 702, 706, 708, 712, 714, 715, 717, 724, 727, 738, 740, 744, 746, 751, 753, 757, 759, 763, 765, 788, 832, 835, 836, 839, 848, 850, 892, 893, 894, 898], "automat": [16, 150, 151, 160, 164, 168, 169, 170, 171, 174, 175, 956], "convers": [16, 22, 23, 24, 25, 67, 68, 169, 171, 175, 186, 187, 956, 962], "everyon": [16, 149, 151, 187], "regardless": [16, 67, 68, 149, 172, 175, 210, 211], "wouldn": 16, "nice": [16, 159], "write": [16, 67, 68, 151, 152, 153, 154, 155, 156, 157, 159, 160, 161, 167, 170, 172, 175, 198, 199, 200, 201, 202, 203, 204, 207, 209, 213, 214, 215, 217, 218, 219, 221, 222, 223, 225, 226, 227, 229, 230, 231, 238, 239, 241, 242, 244, 245, 247, 248, 249, 251, 252, 258, 260, 289, 334, 339, 340, 343, 345, 348, 349, 352, 353, 356, 358, 361, 362, 365, 366, 369, 370, 373, 374, 377, 378, 381, 382, 385, 386, 389, 390, 393, 394, 397, 398, 401, 402, 405, 406, 409, 410, 413, 414, 417, 419, 422, 423, 426, 427, 430, 431, 434, 435, 438, 439, 442, 443, 446, 447, 450, 451, 454, 455, 458, 459, 462, 463, 466, 471, 474, 475, 478, 479, 482, 483, 486, 487, 490, 491, 494, 495, 498, 499, 502, 503, 506, 507, 508, 509, 512, 514, 517, 518, 521, 522, 525, 526, 529, 530, 533, 534, 537, 538, 541, 542, 545, 546, 549, 550, 553, 554, 557, 558, 562, 563, 567, 568, 572, 573, 576, 577, 589, 590, 592, 595, 596, 599, 600, 601, 603, 605, 606, 609, 617, 630, 633, 634, 651, 684, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 700, 701, 702, 703, 705, 706, 708, 709, 711, 712, 714, 718, 720, 721, 723, 724, 727, 728, 730, 732, 734, 735, 737, 738, 740, 741, 743, 747, 748, 750, 751, 753, 754, 756, 757, 759, 760, 762, 763, 765, 766, 768, 769, 771, 772, 773, 776, 778, 781, 783, 786, 788, 789, 792, 794, 797, 798, 801, 802, 805, 806, 809, 810, 813, 814, 817, 818, 821, 822, 825, 828, 831, 832, 835, 836, 839, 840, 843, 844, 847, 870, 871, 874, 875, 876, 877, 878, 880, 881, 883, 886, 887, 891, 892, 900, 901, 902, 905, 907, 910, 912, 913, 916, 917, 920, 921, 924, 925, 928, 929, 932, 933, 936, 937, 940, 941, 944, 945, 946, 949, 951, 954], "onc": [16, 150, 151, 164, 165, 166, 170, 173, 187, 289, 333, 702, 721, 723, 751, 753, 875, 876], "know": [16, 151, 892, 893, 894, 898, 900], "among": [16, 67, 68, 159], "frantic": 16, "port": 16, "lucid": 16, "honk": 16, "improv": [16, 151, 160, 170], "understand": [16, 150, 151, 152, 153, 154, 156, 157, 158, 168, 169], "pattern": [16, 67, 68, 156, 165, 577, 599, 600, 601], "hasn": 16, "chang": [16, 19, 20, 26, 27, 28, 29, 32, 33, 34, 35, 36, 37, 46, 47, 54, 55, 65, 66, 74, 75, 78, 79, 80, 81, 82, 83, 92, 93, 96, 97, 100, 101, 150, 151, 152, 153, 156, 158, 159, 164, 170, 174, 187, 204, 205, 206, 208, 215, 216, 219, 220, 223, 224, 227, 228, 235, 236, 239, 240, 242, 243, 245, 246, 249, 250, 261, 262, 263, 265, 289, 340, 341, 342, 344, 353, 354, 355, 357, 402, 403, 404, 435, 436, 437, 563, 564, 565, 566, 568, 569, 570, 571, 578, 579, 580, 582, 606, 607, 608, 610, 653, 654, 655, 657, 702, 706, 708, 788, 789, 790, 791, 793, 818, 821, 822, 823, 824, 826, 852, 854, 864, 877, 879, 894, 895, 896, 897, 956, 962], "now": [16, 67, 68, 125, 136, 137, 138, 150, 153, 155, 162, 164, 165, 168, 172, 173, 175, 186, 187], "spend": 16, "torchvis": 16, "probabl": [16, 125, 133, 689, 697, 875, 876], "sonnet": 16, "about": [16, 150, 151, 158, 169, 170, 174, 175, 187, 252, 272, 275], "next": [16, 137, 138, 141, 142, 143, 144, 145, 146, 150, 151, 152, 153, 156, 157, 161, 162, 172, 173, 252, 272, 956], "everyth": [16, 151, 152, 171, 187], "zero": [16, 67, 68, 69, 70, 116, 125, 126, 127, 128, 129, 130, 131, 132, 133, 135, 141, 142, 143, 144, 157, 163, 164, 165, 166, 168, 170, 173, 174, 198, 200, 201, 213, 218, 222, 232, 234, 242, 244, 245, 247, 249, 251, 252, 258, 339, 353, 356, 358, 361, 386, 389, 410, 413, 431, 434, 435, 438, 495, 498, 499, 502, 507, 508, 509, 512, 514, 517, 518, 521, 526, 529, 530, 533, 534, 537, 550, 553, 554, 557, 563, 567, 568, 572, 577, 595, 630, 633, 634, 651, 653, 656, 658, 660, 671, 673, 675, 677, 689, 697, 702, 709, 711, 724, 727, 732, 734, 741, 743, 763, 765, 766, 768, 788, 802, 805, 806, 809, 814, 817, 822, 825, 844, 847, 870, 871, 874, 875, 877, 878, 887, 888, 889, 890, 892, 893, 894, 898, 900, 912, 917, 920, 921, 924, 925, 928, 929, 932, 933, 936, 937, 940, 941, 944, 945, 946, 949, 951, 954, 956], "need": [16, 150, 151, 152, 153, 155, 156, 157, 158, 160, 163, 164, 167, 170, 172, 173, 186, 187, 577, 589, 590, 592, 788, 789, 792, 802, 805], "said": 16, "high": [16, 67, 68, 96, 97, 152, 173, 875, 877, 878, 879, 881, 882, 883, 884], "level": [16, 149, 152, 160, 169, 170, 173, 174, 175, 187], "optim": [16, 142, 143, 144, 146, 167, 171, 173, 175, 186, 289, 651, 658, 660, 663, 665, 671, 673, 675, 677, 679, 681, 848, 849, 850, 851, 956], "trainer": [16, 185, 187, 956], "statu": 16, "quo": 16, "kera": 16, "dopamin": 16, "ignit": 16, "catalyst": 16, "lightn": 16, "fastai": 16, "haiku": [16, 175], "flax": [16, 175, 187], "trax": [16, 175], "objax": [16, 175], "idea": [16, 186], "fulli": [16, 125, 135, 136, 163, 164, 168, 170, 171, 172, 173, 174, 175, 187], "offer": [16, 174], "helper": [18, 64, 159, 173], "abc": [18, 19, 20, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 64, 67, 68, 137, 138, 141, 145, 172, 289, 298, 304, 577, 602], "inherit": [18, 163, 164, 172], "__delattr__": [18, 64], "self": [18, 64, 67, 68, 141, 145, 163, 164, 170, 172, 173, 174, 175, 204, 205, 206, 215, 216, 219, 220, 223, 224, 227, 228, 232, 233, 235, 236, 239, 240, 242, 243, 245, 246, 249, 250, 261, 262, 263, 289, 340, 341, 342, 345, 346, 347, 349, 350, 351, 353, 354, 355, 358, 359, 360, 362, 363, 364, 366, 367, 368, 370, 371, 372, 374, 375, 376, 378, 379, 380, 382, 383, 384, 386, 387, 388, 390, 391, 392, 394, 395, 396, 398, 399, 400, 402, 403, 404, 406, 407, 408, 410, 411, 412, 414, 415, 416, 419, 420, 421, 423, 424, 425, 427, 428, 429, 431, 432, 433, 435, 436, 437, 439, 440, 441, 443, 444, 445, 447, 448, 449, 451, 452, 453, 455, 456, 457, 459, 460, 461, 463, 464, 465, 467, 468, 469, 471, 472, 473, 475, 476, 477, 479, 480, 481, 483, 484, 485, 487, 488, 489, 491, 492, 493, 495, 496, 497, 499, 500, 501, 503, 504, 505, 509, 510, 511, 514, 515, 516, 518, 519, 520, 522, 523, 524, 526, 527, 528, 530, 531, 532, 534, 535, 536, 538, 539, 540, 542, 543, 544, 546, 547, 548, 550, 551, 552, 554, 555, 556, 558, 560, 561, 563, 565, 566, 568, 570, 571, 573, 574, 575, 578, 579, 580, 590, 591, 606, 607, 608, 653, 654, 655, 658, 659, 663, 664, 667, 668, 671, 672, 675, 676, 679, 680, 703, 704, 706, 707, 709, 710, 712, 713, 715, 716, 718, 719, 721, 722, 724, 725, 726, 728, 729, 732, 733, 735, 736, 738, 739, 741, 742, 744, 745, 748, 749, 751, 752, 754, 755, 757, 758, 760, 761, 763, 764, 766, 767, 769, 770, 773, 774, 775, 778, 779, 780, 783, 784, 785, 789, 790, 791, 794, 795, 796, 798, 799, 800, 802, 803, 804, 806, 807, 808, 810, 811, 812, 814, 815, 816, 818, 819, 820, 822, 823, 824, 828, 829, 830, 832, 833, 834, 836, 837, 838, 840, 841, 842, 844, 845, 846, 871, 872, 873, 881, 882, 894, 896, 897, 902, 903, 904, 907, 908, 909, 913, 914, 915, 917, 918, 919, 921, 922, 923, 925, 926, 927, 929, 930, 931, 933, 934, 935, 937, 938, 939, 941, 942, 943, 946, 947, 948, 951, 952, 953, 956], "name": [18, 64, 150, 151, 153, 156, 159, 170, 172, 173, 175, 210, 211, 577, 583, 702, 715, 717, 744, 746, 751, 753, 892, 893, 894, 898], "delattr": [18, 64], "__format__": [18, 64], "format_spec": [18, 64], "formatt": [18, 64], "__getattribute__": [18, 64], "getattr": [18, 64], "__init_subclass__": [18, 64], "method": [18, 19, 20, 26, 27, 28, 29, 32, 33, 34, 35, 36, 37, 46, 47, 54, 55, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 74, 75, 78, 79, 80, 81, 82, 83, 92, 93, 96, 97, 100, 101, 108, 109, 125, 136, 137, 138, 152, 155, 156, 157, 159, 160, 163, 168, 170, 171, 174, 175, 187, 198, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 213, 215, 216, 219, 220, 223, 224, 225, 227, 228, 235, 236, 239, 240, 242, 243, 245, 246, 249, 250, 261, 262, 263, 265, 339, 340, 341, 342, 344, 353, 354, 355, 357, 358, 361, 378, 381, 398, 401, 402, 403, 404, 405, 410, 413, 435, 436, 437, 438, 447, 450, 467, 470, 507, 508, 514, 517, 518, 521, 534, 537, 550, 553, 554, 557, 563, 564, 565, 566, 568, 569, 570, 571, 572, 577, 578, 579, 580, 582, 593, 594, 605, 606, 607, 608, 610, 633, 634, 645, 647, 651, 653, 654, 655, 657, 671, 673, 675, 677, 689, 695, 701, 702, 703, 705, 706, 708, 709, 711, 772, 773, 776, 788, 789, 790, 791, 793, 802, 805, 806, 809, 814, 817, 822, 823, 824, 826, 827, 836, 839, 852, 853, 863, 864, 865, 870, 871, 874, 875, 877, 879, 880, 881, 883, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 901, 902, 905, 912, 913, 916, 917, 920, 945, 946, 949, 956], "subclass": [18, 64], "noth": [18, 64, 67, 68, 151], "It": [18, 64, 150, 151, 153, 154, 155, 156, 157, 161, 163, 164, 167, 170, 172, 173, 174, 198, 199, 200, 201, 202, 203, 204, 207, 209, 213, 214, 215, 217, 218, 219, 221, 222, 223, 225, 226, 227, 229, 230, 231, 238, 239, 241, 242, 244, 245, 247, 248, 249, 251, 252, 258, 260, 289, 334, 339, 340, 343, 345, 348, 349, 352, 353, 356, 358, 361, 362, 365, 366, 369, 370, 373, 374, 377, 378, 381, 382, 385, 386, 389, 390, 393, 394, 397, 398, 401, 402, 405, 406, 409, 410, 413, 414, 417, 419, 422, 423, 426, 427, 430, 431, 434, 435, 438, 439, 442, 443, 446, 447, 450, 451, 454, 455, 458, 459, 462, 463, 466, 471, 474, 475, 478, 479, 482, 483, 486, 487, 490, 491, 494, 495, 498, 499, 502, 503, 506, 507, 508, 509, 512, 514, 517, 518, 521, 522, 525, 526, 529, 530, 533, 534, 537, 538, 541, 542, 545, 546, 549, 550, 553, 554, 557, 558, 562, 563, 567, 568, 572, 573, 576, 577, 589, 590, 592, 595, 599, 600, 601, 603, 606, 609, 617, 630, 633, 634, 651, 684, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 700, 701, 702, 703, 705, 706, 708, 709, 711, 712, 714, 718, 720, 721, 723, 724, 727, 728, 730, 732, 734, 735, 737, 738, 740, 741, 743, 747, 748, 750, 751, 753, 754, 756, 757, 759, 760, 762, 763, 765, 766, 768, 769, 771, 772, 773, 776, 778, 781, 783, 786, 788, 789, 792, 794, 797, 798, 801, 802, 805, 806, 809, 810, 813, 814, 817, 818, 821, 822, 825, 828, 831, 832, 835, 836, 839, 840, 843, 844, 847, 870, 871, 874, 875, 876, 877, 878, 880, 881, 883, 886, 887, 888, 891, 892, 900, 901, 902, 905, 907, 910, 945, 946, 949, 951, 954], "overridden": [18, 64], "extend": [18, 64, 156, 159, 161, 168], "__new__": [18, 64], "help": [18, 64, 149, 150, 157, 161, 163, 164, 172, 173, 174, 185, 577, 583, 912, 937, 940, 956], "accur": [18, 64, 339, 431, 434], "__reduce__": [18, 64], "pickl": [18, 64, 67, 68, 164, 173], "__reduce_ex__": [18, 64], "protocol": [18, 64], "__setattr__": [18, 164], "valu": [18, 46, 47, 54, 55, 64, 67, 68, 69, 70, 71, 92, 93, 125, 126, 127, 128, 129, 130, 131, 132, 136, 137, 138, 139, 140, 141, 142, 143, 145, 151, 157, 159, 160, 164, 165, 166, 167, 168, 170, 172, 175, 187, 213, 214, 222, 226, 227, 229, 230, 231, 252, 258, 267, 268, 269, 289, 301, 332, 333, 339, 340, 343, 345, 348, 353, 356, 358, 361, 366, 369, 402, 405, 419, 422, 423, 426, 435, 438, 439, 442, 443, 446, 447, 450, 463, 466, 467, 470, 507, 508, 509, 512, 518, 521, 522, 525, 526, 529, 534, 537, 568, 572, 573, 576, 577, 589, 590, 592, 593, 598, 604, 605, 606, 609, 615, 618, 622, 632, 633, 634, 635, 636, 637, 650, 651, 653, 656, 658, 660, 662, 671, 673, 684, 688, 689, 690, 691, 692, 693, 694, 695, 696, 699, 700, 701, 702, 732, 734, 741, 743, 744, 746, 747, 748, 750, 751, 753, 754, 756, 766, 768, 788, 789, 792, 798, 799, 800, 801, 814, 817, 818, 821, 844, 846, 847, 848, 849, 850, 852, 856, 857, 858, 859, 860, 865, 868, 869, 870, 871, 874, 875, 876, 877, 878, 880, 881, 883, 885, 887, 888, 889, 891, 892, 893, 894, 896, 898, 899, 900, 901, 902, 905, 907, 910, 912, 917, 920, 921, 924, 925, 928, 929, 932, 933, 936, 937, 940, 941, 944], "setattr": 18, "__sizeof__": [18, 64], "size": [18, 64, 67, 68, 69, 70, 71, 125, 126, 127, 172, 173, 213, 230, 231, 289, 331, 332, 333, 577, 633, 639, 689, 701, 702, 712, 714, 728, 730, 738, 740, 744, 746, 751, 753, 763, 765, 788, 802, 805, 822, 825, 827, 828, 831, 875, 876, 880, 881, 883, 887, 888, 890, 945, 946, 949, 951, 954], "memori": [18, 64, 166, 167, 185, 187, 289, 307, 328, 333, 335, 338, 689, 699, 956], "byte": [18, 64], "__str__": [18, 64], "__subclasshook__": [18, 64], "overrid": [18, 64, 577, 630], "issubclass": [18, 64], "invok": [18, 64], "earli": [18, 64, 151, 956], "abcmeta": [18, 64], "__subclasscheck__": [18, 64], "true": [18, 28, 29, 34, 35, 42, 43, 56, 57, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 125, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 157, 159, 160, 164, 165, 167, 170, 172, 173, 174, 175, 198, 199, 204, 206, 208, 210, 211, 213, 230, 252, 258, 261, 262, 263, 264, 265, 289, 308, 325, 329, 330, 339, 340, 342, 344, 345, 347, 349, 351, 353, 355, 357, 358, 360, 362, 364, 366, 368, 370, 372, 374, 376, 378, 380, 381, 382, 384, 386, 388, 390, 392, 394, 396, 398, 400, 401, 402, 404, 406, 408, 410, 412, 414, 416, 418, 419, 421, 423, 425, 427, 429, 431, 433, 435, 437, 439, 441, 443, 445, 446, 447, 449, 450, 451, 453, 454, 455, 457, 458, 459, 461, 462, 463, 465, 466, 467, 469, 470, 471, 473, 475, 477, 479, 481, 483, 485, 487, 489, 491, 493, 495, 497, 498, 499, 501, 502, 503, 505, 509, 511, 513, 514, 516, 518, 520, 521, 522, 524, 526, 528, 530, 532, 534, 536, 538, 540, 542, 544, 546, 548, 550, 552, 554, 556, 558, 559, 561, 563, 564, 566, 568, 569, 571, 573, 575, 577, 578, 579, 580, 581, 582, 585, 586, 587, 588, 590, 591, 595, 602, 604, 606, 608, 610, 616, 617, 624, 639, 645, 647, 650, 651, 658, 659, 660, 661, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 684, 689, 697, 702, 703, 705, 724, 726, 728, 730, 751, 752, 753, 766, 768, 772, 773, 775, 776, 777, 778, 780, 781, 782, 783, 785, 786, 787, 788, 789, 791, 793, 794, 796, 798, 800, 802, 804, 806, 808, 810, 812, 814, 816, 818, 820, 822, 824, 826, 827, 828, 830, 832, 834, 836, 838, 840, 842, 844, 846, 848, 849, 850, 851, 852, 853, 862, 863, 865, 871, 873, 875, 876, 881, 882, 884, 887, 888, 889, 891, 892, 893, 894, 895, 897, 898, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 915, 917, 919, 920, 921, 923, 924, 925, 927, 928, 929, 931, 932, 933, 935, 936, 937, 939, 940, 941, 943, 944, 945, 946, 948, 949, 950, 951, 953, 954, 955], "notimpl": [18, 64], "normal": [18, 64, 139, 140, 173, 788, 832, 835, 870, 871, 874, 875, 880], "algorithm": [18, 64, 125, 126, 127, 128, 129, 130, 131, 132, 187, 689, 690, 691, 692, 693, 694, 695, 696], "outcom": [18, 64], "cach": [18, 64, 159, 160, 289, 307, 577, 588], "arraywithactiv": 19, "softplu": [19, 20, 65, 66, 198, 208, 956], "instanc": [19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 32, 33, 34, 35, 36, 37, 46, 47, 54, 55, 62, 63, 65, 66, 67, 68, 69, 70, 74, 75, 78, 79, 80, 81, 82, 83, 92, 93, 100, 101, 108, 109, 114, 115, 152, 156, 157, 159, 160, 163, 165, 167, 168, 173, 174, 175, 188, 196, 198, 200, 201, 202, 203, 204, 205, 206, 207, 209, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 234, 235, 236, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 261, 262, 263, 264, 289, 298, 330, 339, 340, 341, 342, 343, 353, 354, 355, 356, 358, 361, 378, 381, 398, 401, 402, 403, 404, 405, 410, 413, 435, 436, 437, 438, 447, 450, 467, 470, 507, 508, 514, 517, 518, 521, 534, 537, 550, 553, 554, 557, 563, 565, 566, 567, 568, 570, 571, 572, 577, 578, 579, 580, 594, 605, 606, 607, 608, 621, 645, 647, 653, 654, 655, 657, 689, 692, 695, 701, 702, 703, 705, 706, 708, 709, 711, 712, 714, 772, 773, 776, 788, 789, 790, 791, 802, 805, 806, 809, 814, 817, 822, 823, 824, 825, 827, 836, 839, 870, 871, 874, 875, 880, 881, 883, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 901, 902, 905, 912, 913, 916, 917, 920, 945, 946, 949], "variant": [19, 20, 26, 27, 28, 29, 32, 33, 34, 35, 36, 37, 46, 47, 54, 55, 65, 66, 74, 75, 78, 79, 80, 81, 82, 83, 92, 93, 96, 97, 100, 101, 156, 157, 204, 205, 206, 208, 215, 216, 219, 220, 223, 224, 227, 228, 235, 236, 239, 240, 242, 243, 245, 246, 249, 250, 261, 262, 263, 265, 340, 341, 342, 344, 353, 354, 355, 357, 402, 403, 404, 435, 436, 437, 563, 564, 565, 566, 568, 569, 570, 571, 578, 579, 580, 582, 606, 607, 608, 610, 653, 654, 655, 657, 789, 790, 791, 793, 822, 823, 824, 826, 877, 879, 894, 895, 896, 897], "simpli": [19, 20, 26, 27, 28, 29, 32, 33, 34, 35, 36, 37, 46, 47, 54, 55, 65, 66, 67, 68, 74, 75, 78, 79, 80, 81, 82, 83, 92, 93, 96, 97, 100, 101, 151, 156, 157, 159, 160, 163, 164, 166, 167, 168, 170, 174, 175, 204, 205, 206, 208, 215, 216, 219, 220, 223, 224, 227, 228, 235, 236, 239, 240, 242, 243, 245, 246, 249, 250, 261, 262, 263, 265, 339, 340, 341, 342, 344, 353, 354, 355, 357, 402, 403, 404, 431, 434, 435, 436, 437, 563, 564, 565, 566, 568, 569, 570, 571, 578, 579, 580, 582, 606, 607, 608, 610, 653, 654, 655, 657, 789, 790, 791, 793, 822, 823, 824, 826, 877, 879, 894, 895, 896, 897], "wrap": [19, 20, 21, 26, 27, 28, 29, 32, 33, 34, 35, 36, 37, 46, 47, 54, 55, 63, 65, 66, 67, 68, 69, 70, 71, 74, 75, 78, 79, 80, 81, 82, 83, 92, 93, 96, 97, 100, 101, 109, 154, 156, 159, 160, 161, 163, 164, 165, 166, 167, 168, 170, 172, 175, 187, 188, 196, 204, 205, 206, 208, 215, 216, 219, 220, 223, 224, 227, 228, 235, 236, 239, 240, 242, 243, 245, 246, 249, 250, 261, 262, 263, 265, 340, 341, 342, 344, 353, 354, 355, 357, 402, 403, 404, 435, 436, 437, 563, 564, 565, 566, 568, 569, 570, 571, 577, 578, 579, 580, 582, 588, 606, 607, 608, 610, 651, 653, 654, 655, 657, 687, 789, 790, 791, 793, 822, 823, 824, 826, 877, 879, 894, 895, 896, 897], "docstr": [19, 20, 26, 27, 28, 29, 32, 33, 34, 35, 36, 37, 46, 47, 54, 55, 65, 66, 74, 75, 78, 79, 80, 81, 82, 83, 92, 93, 96, 97, 100, 101, 152, 153, 154, 155, 160, 164, 168, 204, 205, 206, 208, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 232, 234, 235, 236, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 261, 262, 263, 264, 265, 339, 340, 341, 342, 343, 344, 353, 354, 355, 356, 357, 358, 361, 378, 381, 398, 401, 402, 403, 404, 405, 410, 413, 435, 436, 437, 438, 467, 470, 518, 521, 534, 537, 550, 553, 554, 557, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 578, 579, 580, 582, 606, 607, 608, 610, 653, 654, 655, 657, 702, 709, 711, 712, 714, 788, 789, 790, 791, 793, 802, 805, 806, 809, 822, 823, 824, 825, 826, 877, 879, 892, 893, 894, 895, 896, 897, 898, 901, 902, 905, 912, 917, 920, 945, 946, 949], "appli": [19, 20, 21, 24, 25, 26, 27, 28, 29, 32, 33, 34, 35, 36, 37, 46, 47, 54, 55, 65, 66, 67, 68, 74, 75, 78, 79, 80, 81, 82, 83, 92, 93, 96, 97, 100, 101, 111, 112, 113, 139, 140, 150, 151, 152, 156, 157, 159, 160, 162, 164, 165, 166, 167, 168, 170, 172, 173, 174, 175, 185, 187, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 215, 216, 219, 220, 223, 224, 227, 228, 235, 236, 239, 240, 242, 243, 245, 246, 249, 250, 252, 261, 262, 263, 265, 280, 340, 341, 342, 344, 353, 354, 355, 357, 402, 403, 404, 435, 436, 437, 563, 564, 565, 566, 568, 569, 570, 571, 577, 578, 579, 580, 582, 599, 600, 601, 606, 607, 608, 610, 651, 653, 654, 655, 657, 671, 673, 675, 677, 689, 698, 700, 701, 702, 732, 734, 741, 743, 772, 773, 776, 778, 781, 783, 786, 788, 789, 790, 791, 793, 822, 823, 824, 826, 832, 835, 848, 849, 850, 852, 858, 861, 864, 865, 870, 871, 874, 877, 879, 894, 895, 896, 897, 956], "minim": [19, 20, 26, 27, 28, 29, 32, 33, 34, 35, 36, 37, 46, 47, 54, 55, 65, 66, 74, 75, 78, 79, 80, 81, 82, 83, 92, 93, 96, 97, 100, 101, 156, 167, 170, 204, 205, 206, 208, 215, 216, 219, 220, 223, 224, 227, 228, 235, 236, 239, 240, 242, 243, 245, 246, 249, 250, 261, 262, 263, 265, 340, 341, 342, 344, 353, 354, 355, 357, 402, 403, 404, 435, 436, 437, 563, 564, 565, 566, 568, 569, 570, 571, 578, 579, 580, 582, 606, 607, 608, 610, 653, 654, 655, 657, 789, 790, 791, 793, 822, 823, 824, 826, 877, 879, 894, 895, 896, 897], "activ": [20, 62, 63, 66, 108, 109, 112, 113, 150, 151, 153, 155, 174, 199, 200, 201, 202, 203, 204, 207, 209, 956], "collect": [21, 67, 68, 111, 125, 139, 141, 159, 186, 198, 210, 289, 577, 651, 689, 772, 852, 865, 870, 875], "accept": [21, 150, 151, 156, 157, 159, 160, 163, 164, 166, 167, 168, 172, 213, 214, 215, 217, 218, 219, 221, 222, 223, 225, 226, 227, 229, 230, 231, 232, 234, 238, 239, 241, 242, 244, 245, 247, 248, 249, 251, 252, 261, 264, 339, 340, 343, 353, 356, 358, 361, 378, 381, 398, 401, 402, 405, 410, 413, 435, 438, 495, 498, 499, 502, 518, 521, 530, 533, 534, 537, 550, 553, 554, 557, 563, 567, 568, 572, 577, 605, 689, 692, 701, 702, 709, 711, 712, 714, 788, 802, 805, 806, 809, 822, 825, 870, 871, 874, 892, 893, 894, 898, 901, 902, 905, 912, 917, 920, 921, 924, 945, 946, 949, 956], "args_to_ivi": 21, "include_deriv": [21, 22, 23, 24, 25, 852, 854, 864], "keyword": [21, 22, 23, 64, 67, 68, 69, 70, 71, 137, 138, 155, 165, 166, 167, 168, 173, 213, 232, 234, 289, 298, 299, 313, 317, 321, 577, 584, 627, 852, 858, 912, 937, 940], "variabl": [21, 22, 23, 24, 25, 67, 68, 69, 70, 114, 115, 116, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 156, 161, 164, 165, 167, 168, 173, 174, 175, 187, 577, 587, 619, 620, 621, 622, 623, 624, 626, 643, 651, 658, 660, 662, 663, 665, 667, 669, 671, 673, 675, 677, 679, 681, 684, 687, 689, 700, 702, 748, 750, 848, 849, 850, 851, 870, 871, 874, 956], "nest": [21, 22, 23, 24, 25, 67, 68, 69, 70, 71, 137, 138, 141, 142, 143, 144, 145, 146, 155, 160, 163, 164, 172, 173, 174, 187, 289, 313, 317, 321, 577, 645, 848, 849, 850, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869], "unchang": [21, 22, 23, 24, 25], "posit": [21, 22, 23, 32, 33, 78, 79, 114, 115, 168, 173, 186, 212, 213, 222, 252, 272, 289, 313, 317, 321, 339, 340, 343, 451, 454, 455, 458, 509, 512, 530, 533, 577, 604, 702, 703, 705, 788, 802, 805, 822, 825, 875, 885, 887, 890, 945, 946, 949, 951, 954], "bool": [21, 22, 23, 24, 25, 28, 29, 67, 68, 108, 109, 157, 164, 165, 167, 175, 210, 211, 213, 226, 252, 258, 261, 262, 264, 267, 268, 269, 270, 273, 276, 277, 278, 288, 289, 308, 309, 324, 333, 336, 339, 378, 381, 382, 385, 390, 393, 398, 401, 419, 422, 443, 446, 447, 450, 451, 454, 455, 458, 459, 462, 463, 466, 467, 470, 491, 494, 495, 498, 499, 502, 518, 521, 577, 578, 581, 585, 586, 595, 598, 602, 604, 614, 616, 621, 623, 624, 625, 626, 639, 649, 650, 651, 684, 702, 703, 705, 728, 730, 751, 753, 766, 768, 788, 827, 848, 849, 850, 851, 852, 853, 854, 858, 862, 863, 864, 875, 876, 887, 888, 889, 901, 902, 905, 907, 910, 912, 917, 920, 921, 924, 925, 928, 929, 932, 933, 936, 937, 940, 941, 944, 945, 946, 949, 951, 954], "whether": [21, 22, 23, 24, 25, 67, 68, 69, 70, 71, 108, 109, 114, 115, 125, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 149, 150, 165, 167, 168, 198, 199, 210, 211, 252, 258, 270, 276, 277, 278, 288, 289, 308, 309, 320, 324, 325, 328, 329, 333, 336, 338, 339, 459, 462, 577, 578, 581, 585, 586, 595, 598, 602, 604, 614, 616, 618, 621, 622, 623, 624, 625, 626, 627, 639, 643, 649, 650, 651, 658, 660, 662, 663, 665, 667, 669, 671, 673, 675, 677, 679, 681, 684, 689, 697, 702, 715, 717, 848, 849, 850, 851, 852, 853, 854, 858, 862, 863, 864, 865, 875, 876, 945, 946, 949, 951, 954], "recurs": [21, 22, 23, 24, 25, 67, 68, 150, 153, 160, 164, 174, 187, 852, 853, 854, 862, 863, 864], "deriv": [21, 22, 23, 24, 25, 137, 141, 145, 147, 165, 166, 172, 174, 213, 219, 221, 227, 229, 239, 241, 249, 251, 651, 653, 656, 658, 660, 663, 665, 671, 673, 675, 677, 679, 681, 852, 854, 864], "tupl": [21, 22, 23, 24, 25, 42, 43, 54, 55, 64, 67, 68, 155, 164, 165, 166, 168, 172, 173, 174, 187, 213, 215, 217, 218, 226, 235, 237, 238, 248, 252, 260, 274, 289, 308, 577, 604, 640, 689, 692, 695, 696, 699, 702, 732, 734, 741, 743, 751, 752, 753, 757, 759, 766, 768, 788, 794, 797, 798, 801, 806, 809, 810, 813, 818, 821, 822, 825, 828, 831, 832, 835, 844, 847, 848, 849, 850, 851, 852, 854, 855, 857, 859, 860, 861, 863, 864, 866, 867, 868, 869, 875, 880, 881, 883, 887, 890, 892, 893, 894, 896, 898, 899, 912, 917, 920, 921, 924, 925, 928, 929, 932, 933, 936, 937, 940, 941, 944, 945, 946, 949, 951, 954], "list": [21, 22, 23, 24, 25, 26, 27, 62, 63, 64, 67, 68, 82, 83, 100, 101, 108, 109, 125, 126, 127, 128, 129, 130, 131, 132, 150, 152, 153, 155, 157, 165, 166, 168, 170, 173, 174, 175, 187, 213, 214, 215, 217, 218, 232, 233, 234, 235, 237, 238, 248, 252, 259, 289, 298, 299, 308, 310, 311, 314, 315, 318, 319, 333, 577, 586, 640, 645, 649, 653, 655, 657, 689, 690, 691, 692, 693, 694, 695, 696, 702, 757, 759, 788, 794, 797, 806, 809, 827, 832, 835, 852, 853, 854, 858, 863, 864, 870, 871, 874, 887, 890, 892, 894, 895, 897, 898, 956], "kei": [21, 22, 23, 64, 67, 68, 69, 70, 71, 114, 115, 125, 136, 141, 145, 164, 173, 289, 301, 577, 583, 593, 689, 700, 701, 848, 849, 850, 852, 855, 861, 865], "word": [21, 22, 23, 114, 115, 213, 214, 875, 881, 883], "args_to_n": [21, 167, 172], "to_ivi": [21, 67, 68, 172, 852, 865], "input": [21, 24, 25, 36, 37, 67, 68, 69, 70, 71, 78, 79, 80, 81, 82, 83, 92, 93, 96, 97, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 139, 140, 155, 156, 157, 159, 160, 161, 163, 164, 165, 166, 167, 168, 170, 172, 173, 174, 175, 187, 188, 196, 198, 199, 200, 201, 202, 203, 204, 207, 209, 210, 211, 213, 214, 215, 217, 218, 219, 221, 222, 223, 225, 226, 227, 229, 230, 231, 232, 234, 235, 237, 238, 239, 241, 242, 244, 245, 247, 248, 249, 251, 252, 258, 259, 260, 261, 264, 266, 267, 268, 269, 270, 271, 277, 278, 279, 280, 284, 289, 298, 299, 308, 309, 310, 311, 313, 314, 317, 321, 327, 333, 334, 339, 340, 343, 344, 345, 348, 349, 352, 353, 356, 357, 358, 361, 362, 365, 366, 369, 370, 373, 374, 377, 378, 381, 382, 385, 386, 389, 390, 393, 394, 397, 398, 401, 402, 405, 406, 409, 410, 413, 414, 417, 419, 422, 423, 426, 427, 430, 431, 434, 435, 438, 439, 442, 443, 446, 447, 450, 451, 454, 455, 458, 459, 462, 463, 466, 467, 470, 471, 474, 475, 478, 479, 482, 483, 486, 487, 490, 491, 494, 495, 498, 499, 502, 503, 506, 507, 508, 509, 512, 514, 517, 518, 521, 522, 525, 526, 529, 530, 533, 534, 537, 538, 541, 542, 545, 546, 549, 550, 553, 554, 557, 558, 562, 563, 564, 567, 568, 569, 572, 573, 576, 577, 578, 581, 582, 583, 585, 586, 587, 589, 590, 592, 594, 595, 596, 598, 599, 600, 601, 602, 603, 604, 605, 606, 609, 610, 614, 616, 617, 619, 620, 621, 623, 624, 625, 626, 630, 633, 634, 639, 640, 643, 645, 646, 647, 649, 650, 651, 653, 654, 655, 656, 657, 662, 667, 669, 684, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 705, 706, 708, 709, 711, 712, 714, 715, 717, 718, 720, 721, 723, 724, 727, 728, 730, 732, 734, 735, 737, 738, 740, 741, 743, 744, 746, 747, 748, 750, 751, 753, 754, 756, 757, 759, 760, 762, 763, 765, 766, 768, 769, 771, 772, 773, 776, 778, 781, 783, 786, 788, 789, 792, 793, 794, 797, 798, 801, 802, 805, 806, 809, 810, 813, 814, 817, 818, 821, 822, 825, 826, 827, 828, 831, 832, 835, 836, 839, 840, 843, 844, 847, 848, 849, 850, 851, 870, 871, 874, 875, 876, 877, 878, 879, 880, 881, 883, 886, 887, 888, 889, 890, 891, 892, 893, 894, 898, 899, 900, 901, 902, 905, 907, 910, 912, 913, 916, 917, 920, 921, 924, 925, 928, 929, 932, 933, 936, 937, 940, 941, 944, 945, 946, 949, 951, 954], "leaf": [21, 24, 25, 67, 68, 160, 164, 173, 852, 853, 862, 863], "within": [21, 24, 25, 151, 159, 174, 187, 213, 214, 875, 881, 883], "union": [21, 24, 25, 34, 35, 42, 43, 67, 68, 155, 157, 160, 163, 164, 165, 166, 167, 168, 170, 175, 198, 199, 200, 201, 202, 203, 204, 207, 209, 210, 211, 213, 214, 215, 217, 218, 219, 221, 222, 226, 227, 229, 230, 231, 232, 234, 235, 237, 238, 239, 241, 242, 244, 245, 247, 248, 249, 251, 252, 256, 257, 258, 259, 260, 266, 267, 268, 269, 270, 271, 272, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 288, 289, 305, 306, 307, 308, 309, 311, 314, 315, 316, 317, 322, 328, 330, 332, 333, 334, 335, 338, 339, 340, 343, 345, 348, 349, 352, 353, 356, 358, 361, 362, 365, 366, 369, 370, 373, 374, 377, 378, 381, 382, 385, 386, 389, 390, 393, 394, 397, 398, 401, 402, 405, 406, 409, 410, 413, 414, 417, 419, 422, 423, 426, 427, 430, 431, 434, 435, 438, 439, 442, 443, 446, 447, 450, 451, 454, 455, 458, 459, 462, 463, 466, 467, 470, 471, 474, 475, 478, 479, 482, 483, 486, 487, 490, 495, 498, 499, 502, 503, 506, 507, 508, 509, 512, 514, 517, 518, 521, 522, 525, 526, 529, 530, 533, 534, 537, 538, 541, 542, 545, 546, 549, 550, 553, 554, 557, 558, 562, 563, 567, 568, 572, 573, 576, 577, 578, 581, 585, 586, 589, 590, 592, 595, 596, 599, 600, 601, 603, 604, 605, 606, 607, 609, 614, 616, 617, 619, 620, 621, 630, 633, 634, 639, 640, 645, 646, 647, 649, 650, 651, 653, 656, 658, 660, 663, 665, 671, 673, 675, 677, 679, 681, 684, 686, 689, 690, 691, 692, 693, 694, 695, 696, 698, 699, 701, 702, 703, 705, 706, 708, 709, 711, 712, 714, 715, 717, 718, 720, 721, 723, 724, 727, 728, 730, 732, 734, 735, 737, 738, 740, 741, 743, 744, 746, 747, 748, 750, 751, 752, 753, 754, 756, 757, 759, 760, 762, 763, 765, 766, 768, 769, 771, 772, 773, 776, 778, 781, 783, 786, 788, 789, 792, 794, 797, 798, 801, 802, 805, 806, 809, 810, 813, 814, 817, 818, 821, 822, 825, 827, 828, 831, 832, 835, 836, 839, 840, 843, 844, 847, 848, 849, 850, 851, 852, 853, 854, 863, 864, 870, 871, 874, 875, 876, 877, 878, 880, 881, 883, 886, 887, 888, 889, 890, 891, 892, 893, 894, 898, 899, 900, 901, 902, 905, 907, 910, 912, 913, 916, 917, 920, 921, 924, 925, 928, 933, 936, 937, 940, 941, 944, 945, 946, 949, 951, 954], "nativearrai": [21, 24, 25, 26, 27, 34, 35, 155, 157, 160, 163, 164, 167, 168, 170, 172, 175, 188, 196, 198, 199, 200, 201, 202, 203, 204, 207, 209, 213, 214, 215, 217, 219, 221, 227, 229, 230, 231, 232, 234, 235, 236, 237, 239, 241, 242, 244, 245, 247, 249, 251, 252, 258, 259, 260, 261, 264, 270, 272, 275, 277, 278, 280, 284, 289, 308, 309, 311, 327, 333, 334, 339, 340, 343, 345, 348, 349, 352, 353, 356, 358, 361, 362, 365, 366, 369, 370, 373, 374, 377, 378, 381, 382, 385, 386, 389, 390, 393, 394, 397, 398, 401, 402, 405, 406, 409, 410, 413, 414, 417, 419, 422, 423, 426, 427, 430, 431, 434, 435, 438, 439, 442, 443, 446, 447, 450, 451, 454, 455, 458, 459, 462, 463, 466, 467, 470, 471, 474, 475, 478, 479, 482, 483, 486, 487, 490, 495, 498, 499, 502, 503, 506, 507, 508, 509, 512, 514, 517, 518, 521, 522, 525, 526, 529, 530, 533, 534, 537, 538, 541, 542, 545, 546, 549, 550, 553, 554, 557, 558, 562, 563, 567, 568, 572, 573, 576, 577, 578, 579, 581, 585, 586, 589, 590, 592, 594, 595, 596, 599, 600, 601, 603, 604, 605, 606, 607, 609, 614, 616, 617, 619, 620, 621, 630, 633, 634, 639, 640, 645, 646, 647, 649, 650, 651, 653, 656, 658, 660, 663, 665, 671, 673, 675, 677, 679, 681, 684, 686, 689, 690, 691, 692, 693, 694, 695, 696, 698, 699, 701, 702, 703, 705, 706, 708, 709, 711, 712, 714, 715, 717, 718, 720, 721, 723, 724, 727, 728, 730, 732, 734, 735, 737, 738, 740, 741, 743, 744, 746, 747, 748, 750, 751, 753, 754, 756, 757, 759, 760, 762, 763, 765, 766, 768, 769, 771, 772, 773, 776, 778, 781, 783, 786, 788, 789, 792, 794, 797, 798, 801, 802, 805, 806, 809, 810, 813, 814, 817, 818, 821, 822, 825, 827, 828, 831, 832, 835, 836, 839, 840, 843, 844, 847, 852, 854, 864, 870, 871, 874, 875, 876, 886, 887, 888, 889, 890, 891, 892, 893, 894, 898, 899, 900, 901, 902, 905, 907, 910, 912, 913, 916, 917, 920, 921, 924, 925, 928, 933, 936, 937, 940, 941, 944, 945, 946, 949, 951, 954], "mayb": [21, 24, 25, 150, 170, 172], "travers": [21, 24, 25, 67, 68, 164, 170, 172, 852, 864], "lowest": [21, 24, 25, 67, 68, 160, 187, 852, 864, 875, 877, 878], "leav": [21, 24, 25, 67, 68, 69, 70, 156, 157, 159, 160, 164, 165, 167, 168, 173, 174, 788, 832, 835, 852, 853, 854, 862, 863, 864], "to_n": [21, 67, 68], "item": [21, 25, 62, 63, 64, 67, 68, 137, 138, 165, 170, 172, 173, 175, 252, 267, 289, 298, 299, 301, 308, 310, 312, 314, 316, 320, 577, 593, 615, 641, 642, 852, 857, 858, 859, 860, 864, 868, 869, 956], "arraywithcr": 26, "asarrai": [26, 27, 69, 70, 167, 213, 689, 690, 892, 894, 898], "copi": [26, 27, 67, 68, 153, 156, 161, 165, 170, 172, 173, 186, 187, 213, 215, 216, 217, 223, 225, 252, 258, 289, 334, 577, 594, 646, 647, 788, 818, 821, 852, 854, 901, 907, 910], "dtype": [26, 27, 28, 29, 58, 59, 67, 68, 74, 75, 104, 105, 116, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 147, 148, 155, 157, 160, 165, 166, 172, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 226, 227, 228, 229, 230, 235, 236, 237, 238, 239, 240, 241, 248, 249, 250, 251, 252, 256, 257, 258, 259, 261, 262, 263, 264, 265, 266, 267, 268, 269, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 288, 289, 329, 339, 394, 397, 577, 585, 586, 630, 646, 689, 697, 788, 802, 805, 870, 871, 874, 875, 881, 883, 887, 888, 889, 901, 907, 910, 912, 929, 930, 931, 932, 933, 936, 937, 938, 939, 940, 945, 946, 949, 956], "empty_lik": [26, 27, 69, 70, 213], "from_dlpack": [26, 27, 69, 70, 213], "full_lik": [26, 27, 69, 70, 213], "fill_valu": [26, 27, 165, 213, 226, 227, 228, 229, 339, 447, 450, 467, 470], "meshgrid": [26, 27, 69, 70, 213], "index": [26, 27, 67, 68, 153, 160, 164, 172, 212, 213, 222, 232, 233, 234, 289, 330, 577, 583, 605, 606, 609, 788, 832, 835, 852, 855, 856, 859, 860, 861, 866, 868, 887, 888, 889, 890, 892, 893, 894, 898, 901, 902, 905, 959, 961], "xy": [26, 27, 213, 232, 233, 234], "ones_lik": [26, 27, 69, 70, 175, 213, 956], "tril": [26, 27, 69, 70, 213], "k": [26, 27, 64, 154, 170, 213, 222, 242, 243, 244, 245, 246, 247, 577, 585, 689, 701, 702, 724, 727, 744, 746, 748, 750, 751, 753, 754, 756, 760, 762, 875, 880, 881, 883, 887, 890], "triu": [26, 27, 69, 70, 213], "zeros_lik": [26, 27, 69, 70, 213, 788, 789, 792, 956], "creation": [27, 67, 68, 69, 70, 71, 73, 155, 165, 166, 170, 214, 215, 217, 218, 219, 221, 222, 223, 225, 226, 227, 229, 230, 231, 232, 234, 235, 237, 238, 239, 241, 242, 244, 245, 247, 248, 249, 251], "data_typ": [28, 29, 74, 75, 155, 165, 252, 256, 257, 258, 259, 260, 261, 264, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288], "arraywithdatatyp": 28, "can_cast": [28, 29, 74, 75, 160, 165, 252, 265], "3": [28, 29, 32, 33, 34, 35, 36, 37, 46, 47, 69, 70, 74, 75, 78, 79, 80, 81, 82, 83, 92, 93, 96, 97, 100, 101, 150, 153, 157, 161, 164, 170, 172, 173, 174, 175, 198, 200, 201, 202, 203, 212, 213, 227, 229, 232, 234, 239, 241, 248, 249, 251, 252, 261, 262, 263, 264, 265, 289, 308, 311, 327, 334, 339, 340, 342, 343, 344, 353, 354, 355, 356, 357, 358, 361, 378, 381, 394, 397, 398, 401, 402, 404, 405, 410, 413, 427, 430, 435, 436, 437, 438, 443, 446, 447, 450, 463, 466, 467, 470, 507, 508, 514, 517, 518, 521, 534, 537, 550, 553, 554, 557, 563, 564, 566, 567, 568, 569, 571, 572, 577, 578, 579, 580, 585, 586, 595, 602, 605, 606, 607, 608, 609, 610, 639, 640, 645, 647, 651, 653, 654, 655, 656, 657, 689, 690, 691, 692, 694, 695, 696, 701, 702, 703, 705, 706, 708, 709, 711, 712, 714, 721, 723, 732, 734, 738, 740, 751, 753, 757, 759, 760, 762, 769, 771, 772, 773, 776, 783, 786, 788, 789, 790, 791, 792, 793, 794, 797, 802, 805, 806, 809, 814, 817, 818, 821, 822, 824, 825, 826, 827, 828, 831, 836, 839, 870, 871, 874, 875, 876, 877, 878, 879, 880, 881, 883, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 897, 898, 901, 902, 905, 912, 913, 916, 917, 920, 937, 940, 945, 946, 949, 956], "float32": [28, 29, 74, 75, 157, 165, 252, 256, 257, 261, 262, 263, 264, 265, 273, 870, 871, 874], "float64": [28, 29, 165, 252, 258, 261, 262, 264, 273], "arraywithdevic": [30, 172], "arraywithelementwis": [32, 152, 163], "ab": [32, 33, 78, 79, 159, 162, 339, 344, 526, 529, 702, 766, 768, 956], "6": [32, 33, 36, 37, 46, 47, 69, 70, 78, 79, 80, 81, 96, 97, 153, 157, 161, 164, 172, 173, 174, 198, 200, 201, 203, 213, 227, 229, 289, 311, 327, 339, 340, 341, 342, 343, 344, 353, 354, 355, 356, 357, 358, 361, 378, 381, 382, 385, 398, 401, 402, 403, 404, 405, 410, 413, 435, 438, 447, 450, 467, 470, 507, 508, 514, 517, 534, 537, 550, 553, 554, 557, 563, 567, 568, 572, 577, 586, 595, 605, 606, 609, 610, 640, 645, 651, 653, 654, 656, 689, 692, 695, 696, 701, 702, 706, 708, 709, 711, 712, 714, 738, 740, 751, 753, 757, 759, 772, 773, 776, 783, 786, 788, 789, 790, 792, 794, 797, 802, 805, 806, 809, 814, 817, 818, 821, 822, 825, 827, 836, 839, 870, 871, 874, 875, 876, 877, 878, 879, 887, 888, 891, 892, 893, 894, 898, 912, 913, 916, 917, 920], "y": [32, 33, 34, 35, 46, 47, 54, 55, 69, 70, 78, 79, 80, 81, 92, 93, 96, 97, 100, 101, 155, 157, 161, 164, 170, 172, 198, 200, 201, 202, 203, 204, 207, 209, 213, 226, 227, 229, 232, 234, 238, 239, 241, 249, 251, 252, 258, 289, 309, 323, 327, 332, 339, 340, 341, 342, 343, 344, 353, 354, 355, 356, 357, 358, 361, 370, 373, 378, 381, 382, 385, 394, 397, 398, 401, 402, 403, 404, 405, 406, 409, 410, 413, 427, 430, 435, 436, 437, 438, 447, 450, 467, 470, 507, 508, 514, 517, 518, 521, 534, 537, 550, 553, 554, 557, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 577, 578, 579, 580, 581, 582, 585, 586, 594, 595, 602, 603, 605, 606, 607, 608, 609, 610, 639, 645, 646, 647, 651, 662, 689, 695, 696, 698, 702, 703, 705, 706, 708, 709, 711, 721, 723, 738, 740, 757, 759, 760, 762, 772, 773, 776, 778, 781, 783, 786, 788, 789, 790, 791, 792, 793, 794, 797, 802, 805, 806, 809, 814, 817, 818, 821, 822, 823, 824, 825, 826, 827, 836, 839, 875, 876, 877, 878, 879, 880, 881, 883, 886, 887, 888, 889, 890, 891, 892, 894, 895, 896, 897, 898, 901, 902, 905, 912, 913, 916, 917, 920, 933, 936, 937, 940, 945, 946, 949], "aco": [32, 33, 78, 79, 339, 956], "acosh": [32, 33, 78, 79, 252, 273, 274, 339, 956], "add": [32, 33, 62, 63, 67, 68, 69, 70, 78, 79, 80, 81, 108, 109, 139, 140, 150, 151, 152, 154, 155, 156, 160, 161, 163, 164, 168, 170, 172, 187, 339, 340, 343, 357, 578, 582, 870, 871, 874, 956, 962], "x2": [32, 33, 34, 35, 42, 43, 67, 68, 78, 79, 80, 81, 88, 89, 157, 168, 252, 284, 289, 327, 339, 353, 354, 355, 356, 357, 370, 371, 372, 373, 378, 379, 380, 381, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 414, 415, 416, 417, 418, 419, 420, 421, 422, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 463, 464, 465, 466, 467, 468, 469, 470, 487, 488, 489, 490, 491, 492, 493, 494, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 518, 519, 520, 521, 526, 527, 528, 529, 530, 531, 532, 533, 558, 559, 560, 561, 562, 577, 578, 579, 580, 581, 582, 689, 694, 702, 706, 707, 708, 724, 725, 726, 727, 738, 739, 740, 748, 749, 750, 757, 758, 759, 763, 764, 765, 887, 891], "5": [32, 33, 34, 35, 46, 47, 69, 70, 74, 75, 78, 79, 80, 81, 82, 83, 92, 93, 96, 97, 125, 136, 151, 153, 157, 161, 168, 172, 173, 174, 198, 200, 201, 203, 213, 227, 229, 232, 234, 239, 241, 248, 249, 251, 252, 261, 263, 264, 265, 289, 311, 327, 339, 340, 342, 343, 344, 353, 354, 355, 356, 357, 358, 361, 374, 377, 378, 381, 394, 397, 398, 401, 402, 403, 404, 405, 410, 413, 435, 436, 437, 438, 447, 450, 467, 470, 507, 508, 514, 517, 518, 521, 534, 537, 550, 553, 554, 557, 563, 564, 566, 567, 568, 569, 571, 572, 577, 578, 579, 586, 595, 605, 606, 609, 610, 640, 645, 651, 653, 655, 656, 657, 689, 692, 694, 695, 701, 702, 703, 705, 706, 708, 709, 711, 712, 714, 721, 723, 738, 740, 757, 759, 760, 762, 772, 783, 786, 788, 789, 790, 791, 792, 793, 794, 797, 802, 805, 806, 809, 814, 817, 818, 821, 822, 824, 825, 826, 827, 836, 839, 870, 871, 874, 875, 876, 877, 878, 879, 886, 887, 889, 890, 891, 892, 893, 894, 898, 901, 902, 905, 912, 913, 916, 917, 920, 945, 946, 949], "z": [32, 33, 34, 35, 69, 70, 78, 79, 80, 81, 157, 161, 164, 170, 172, 289, 323, 339, 353, 354, 355, 356, 357, 378, 381, 398, 401, 447, 450, 467, 470, 507, 508, 577, 585, 586, 605, 606, 607, 608, 610, 639, 702, 706, 708, 772, 773, 776, 778, 781, 788, 789, 792, 887, 888, 912, 913, 916, 917, 920], "7": [32, 33, 46, 47, 69, 70, 78, 79, 96, 97, 151, 153, 157, 160, 164, 167, 198, 200, 201, 289, 311, 339, 340, 343, 353, 354, 355, 356, 357, 378, 381, 382, 385, 398, 401, 402, 405, 410, 413, 427, 430, 435, 438, 447, 450, 467, 470, 507, 508, 534, 537, 550, 553, 563, 567, 568, 572, 577, 586, 595, 605, 651, 653, 656, 658, 660, 671, 673, 689, 695, 696, 701, 702, 706, 708, 709, 711, 712, 714, 738, 740, 757, 759, 772, 773, 776, 778, 781, 783, 786, 788, 789, 790, 792, 802, 805, 806, 809, 814, 817, 827, 836, 839, 870, 871, 874, 875, 876, 877, 878, 879, 880, 881, 883, 887, 891, 892, 893, 912, 913, 916], "9": [32, 33, 36, 37, 46, 47, 69, 70, 78, 79, 82, 83, 96, 97, 141, 142, 143, 153, 157, 173, 174, 339, 353, 354, 355, 356, 357, 378, 381, 382, 385, 507, 508, 534, 537, 550, 553, 554, 557, 577, 605, 651, 653, 654, 655, 656, 657, 658, 659, 660, 661, 671, 672, 673, 674, 689, 692, 695, 696, 702, 706, 708, 709, 711, 712, 714, 738, 740, 751, 753, 757, 759, 788, 789, 790, 792, 806, 809, 814, 817, 822, 825, 827, 875, 876, 877, 878, 879, 887, 891, 892, 893, 912, 913, 916], "asin": [32, 33, 78, 79, 339, 956], "asinh": [32, 33, 78, 79, 339, 956], "atan": [32, 33, 78, 79, 339, 956], "atan2": [32, 33, 78, 79, 339, 956], "atanh": [32, 33, 78, 79, 339, 956], "bitwise_and": [32, 33, 78, 79, 339], "bitwise_invert": [32, 33, 78, 79, 339], "bitwise_left_shift": [32, 33, 78, 79, 339], "bitwise_or": [32, 33, 78, 79, 339], "bitwise_right_shift": [32, 33, 78, 79, 339], "bitwise_xor": [32, 33, 78, 79, 339], "ceil": [32, 33, 78, 79, 213, 214, 339, 956], "cosh": [32, 33, 78, 79, 339, 956], "divid": [32, 33, 67, 68, 78, 79, 157, 163, 339, 439, 442, 577, 641, 788, 827], "equal": [32, 33, 67, 68, 78, 79, 157, 164, 165, 213, 222, 226, 227, 229, 252, 258, 339, 386, 389, 394, 397, 451, 454, 455, 458, 526, 529, 534, 537, 577, 578, 581, 585, 586, 702, 712, 714, 732, 734, 741, 743, 788, 789, 792, 798, 801, 827, 844, 847, 875, 881, 883, 892, 893, 894, 898, 900, 901, 902, 905, 907, 910, 912, 921, 924, 933, 936, 937, 940, 941, 944], "erf": [32, 33, 78, 79, 339], "exp": [32, 33, 78, 79, 339, 431, 434, 487, 490, 956], "expm1": [32, 33, 78, 79, 339], "floor": [32, 33, 78, 79, 339, 394, 397, 577, 603, 956], "floor_divid": [32, 33, 78, 79, 339], "greater": [32, 33, 67, 68, 78, 79, 339, 345, 348, 358, 361, 370, 373, 386, 389, 394, 397, 435, 438, 439, 442, 526, 529, 530, 533, 538, 541, 573, 576, 702, 706, 708, 788, 828, 831, 875, 881, 883], "greater_equ": [32, 33, 78, 79, 339], "isfinit": [32, 33, 78, 79, 339], "isinf": [32, 33, 78, 79, 339], "isnan": [32, 33, 78, 79, 339], "less_equ": [32, 33, 78, 79, 339], "log": [32, 33, 78, 79, 150, 151, 160, 164, 167, 170, 173, 213, 231, 339, 479, 482, 487, 490, 702, 747, 956], "log10": [32, 33, 78, 79, 339], "log1p": [32, 33, 78, 79, 339], "log2": [32, 33, 78, 79, 339], "logaddexp": [32, 33, 78, 79, 339], "logical_and": [32, 33, 78, 79, 339, 956], "logical_not": [32, 33, 78, 79, 339, 956], "logical_or": [32, 33, 78, 79, 339, 956], "logical_xor": [32, 33, 78, 79, 339], "multipli": [32, 33, 78, 79, 157, 161, 163, 339, 577, 595], "neg": [32, 33, 78, 79, 160, 164, 167, 198, 200, 213, 214, 222, 339, 451, 454, 455, 458, 509, 512, 526, 529, 530, 533, 702, 751, 753, 763, 765, 766, 768, 788, 806, 809, 822, 825, 945, 946, 949, 951, 954], "not_equ": [32, 33, 78, 79, 339], "pow": [32, 33, 78, 79, 339], "remaind": [32, 33, 67, 68, 78, 79, 339, 577, 603, 788, 827], "sin": [32, 33, 78, 79, 163, 170, 339, 577, 604, 956], "sinh": [32, 33, 78, 79, 339, 956], "sqrt": [32, 33, 78, 79, 339, 702, 766, 768], "squar": [32, 33, 78, 79, 339, 550, 553, 689, 692, 702, 703, 705, 709, 711, 715, 717, 718, 720, 721, 723, 731, 747, 748, 750, 751, 753], "subtract": [32, 33, 78, 79, 157, 163, 339], "tan": [32, 33, 78, 79, 156, 160, 164, 167, 168, 170, 339, 358, 361, 564, 702, 712, 714, 892, 893, 901, 902, 905, 956], "56": [32, 33, 78, 79, 157, 339, 550, 553, 563, 564, 565, 566, 567, 651, 653, 656, 702, 738, 740, 912, 913, 916], "19": [32, 33, 78, 79, 157, 339, 398, 401, 563, 564, 565, 566, 567, 702, 712, 714], "tanh": [32, 33, 78, 79, 170, 198, 339, 569, 956], "762": [32, 33, 78, 79, 198, 209, 339, 568, 570, 571, 572], "964": [32, 33, 78, 79, 198, 209, 339, 568, 570, 571, 572], "trunc": [32, 33, 78, 79, 339], "elementwis": [33, 67, 68, 79, 155, 160, 170, 175, 340, 343, 345, 348, 349, 352, 353, 356, 358, 361, 362, 365, 366, 369, 370, 373, 374, 377, 378, 381, 382, 385, 386, 389, 390, 393, 394, 397, 398, 401, 402, 405, 406, 409, 410, 413, 414, 417, 419, 422, 423, 426, 427, 430, 431, 434, 435, 438, 439, 442, 443, 446, 447, 450, 451, 454, 455, 458, 459, 462, 463, 466, 467, 470, 471, 474, 475, 478, 479, 482, 483, 486, 487, 490, 491, 494, 495, 498, 499, 502, 503, 506, 507, 508, 509, 512, 514, 517, 518, 521, 522, 525, 526, 529, 530, 533, 534, 537, 538, 541, 542, 545, 546, 549, 550, 553, 554, 557, 558, 562, 563, 567, 568, 572, 573, 576], "arraywithgener": [34, 172], "all_equ": [34, 35, 80, 81, 577, 582], "equality_matrix": [34, 35, 80, 81, 577, 578, 579, 580, 581, 582], "x1": [34, 35, 78, 79, 80, 81, 157, 168, 252, 284, 289, 327, 339, 353, 356, 357, 370, 373, 378, 381, 386, 389, 390, 393, 394, 397, 398, 401, 414, 417, 418, 419, 422, 439, 442, 443, 446, 447, 450, 463, 466, 467, 470, 487, 490, 491, 494, 499, 502, 503, 506, 507, 508, 509, 512, 513, 518, 521, 526, 529, 530, 533, 558, 559, 562, 577, 578, 579, 580, 581, 582, 585, 689, 694, 702, 706, 708, 724, 727, 738, 740, 748, 750, 757, 759, 763, 765, 887, 891], "mix": [34, 35, 69, 70, 154, 157, 159, 170, 252, 280, 289, 327, 339, 353, 356, 378, 381, 398, 401, 447, 450, 467, 470, 507, 508, 518, 521, 577, 578, 579, 594, 602, 605, 606, 609, 645, 646, 647, 689, 692, 695, 696, 701, 702, 757, 759, 772, 773, 776, 783, 786, 788, 789, 792, 870, 871, 874, 887, 891, 912, 913, 916, 921, 924], "gather_nd": [34, 35, 67, 68, 80, 81, 577, 610, 956], "indic": [34, 35, 67, 68, 80, 81, 125, 126, 127, 128, 129, 130, 131, 132, 137, 138, 153, 171, 175, 198, 203, 339, 538, 541, 577, 605, 606, 607, 608, 609, 610, 617, 630, 633, 634, 689, 690, 691, 692, 693, 694, 695, 696, 702, 766, 768, 788, 822, 825, 852, 853, 855, 857, 859, 860, 861, 863, 866, 867, 868, 869, 870, 871, 874, 875, 876, 887, 888, 889, 890, 892, 893, 899, 901, 902, 905, 907, 910, 956, 959, 961], "gener": [35, 62, 63, 67, 68, 81, 108, 109, 141, 145, 151, 152, 153, 154, 155, 156, 157, 160, 163, 164, 165, 166, 167, 168, 169, 170, 172, 174, 175, 186, 187, 210, 213, 214, 215, 217, 218, 219, 221, 222, 223, 225, 226, 227, 229, 230, 231, 238, 239, 241, 242, 244, 245, 247, 248, 249, 251, 252, 261, 264, 339, 340, 343, 358, 361, 398, 401, 402, 405, 410, 413, 435, 438, 518, 521, 530, 533, 550, 553, 554, 557, 578, 581, 583, 584, 585, 586, 587, 588, 589, 590, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 609, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 667, 669, 702, 712, 714, 788, 802, 805, 822, 825, 875, 876, 877, 878, 881, 883, 885, 892, 893, 894, 898, 901, 902, 905, 912, 917, 920, 956], "arraywithgradi": [36, 172], "adam_step": [36, 37, 82, 83, 651, 657], "mw": [36, 37, 82, 83, 174, 651, 653, 654, 655, 656, 657, 658, 660], "vw": [36, 37, 82, 83, 174, 651, 653, 654, 655, 656, 657, 658, 660], "beta1": [36, 37, 82, 83, 141, 142, 143, 174, 651, 653, 654, 655, 656, 657, 658, 659, 660, 661, 671, 672, 673, 674], "beta2": [36, 37, 82, 83, 141, 142, 143, 174, 651, 653, 654, 655, 656, 657, 658, 659, 660, 661, 671, 672, 673, 674], "999": [36, 37, 78, 79, 82, 83, 141, 142, 143, 174, 339, 568, 569, 571, 572, 651, 653, 654, 655, 656, 657, 658, 659, 660, 661, 671, 672, 673, 674], "epsilon": [36, 37, 44, 45, 48, 49, 82, 83, 90, 91, 94, 95, 139, 140, 141, 142, 143, 160, 164, 167, 174, 651, 653, 654, 655, 656, 657, 658, 659, 660, 661, 671, 672, 673, 674, 702, 732, 734, 741, 743, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 870, 871, 872, 873, 874], "1e": [36, 37, 44, 45, 48, 49, 82, 83, 90, 91, 94, 95, 141, 142, 143, 144, 146, 160, 164, 167, 174, 175, 577, 613, 651, 653, 654, 655, 656, 657, 658, 659, 660, 661, 671, 672, 673, 674, 702, 751, 753, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 870, 871, 872, 873, 874, 956], "07": [36, 37, 44, 45, 82, 83, 90, 91, 141, 142, 143, 174, 651, 653, 654, 655, 656, 657, 658, 659, 660, 661, 671, 672, 673, 674, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787], "dcdw": [36, 37, 82, 83, 651, 653, 654, 655, 656, 657, 658, 659, 660, 661, 663, 664, 665, 666, 671, 672, 673, 674, 675, 676, 677, 678], "adam_step_delta": [36, 37, 82, 83, 651, 653, 654, 655, 656, 657], "639": [36, 37, 651, 653, 654, 656], "11": [36, 37, 69, 70, 78, 79, 96, 97, 157, 164, 339, 353, 355, 356, 357, 378, 381, 534, 537, 577, 595, 605, 653, 654, 702, 712, 714, 738, 740, 772, 783, 786, 788, 806, 809, 814, 817, 875, 877, 878, 879, 887, 891, 892, 893, 912, 913, 916], "32": [36, 37, 173, 198, 200, 339, 398, 401, 653, 654, 689, 692, 695, 702, 738, 740, 887, 891, 912, 913, 916], "63": [36, 37, 339, 550, 553, 653, 654, 702, 703, 705, 738, 740, 912, 913, 916], "00121": [36, 37, 653, 654], "0102": [36, 37, 653, 654], "0397": [36, 37, 653, 654], "gradient": [37, 67, 68, 83, 141, 142, 143, 144, 145, 146, 155, 164, 173, 174, 186, 187, 289, 333, 653, 656, 658, 660, 662, 663, 665, 667, 669, 671, 673, 675, 677, 679, 681, 683, 684, 685, 686, 687, 688, 848, 849, 850, 851, 956], "arraywithimag": [38, 172], "imag": [39, 85, 150, 153, 155, 170, 171, 173, 175, 186, 689, 690, 691, 692, 693, 695, 696, 956], "arraywithlay": 40, "linear_algebra": [42, 43, 88, 89, 155, 172, 702, 703, 705, 706, 708, 709, 711, 712, 714, 715, 717, 718, 720, 721, 723, 724, 727, 728, 730, 731, 732, 734, 735, 737, 738, 740, 741, 743, 744, 746, 747, 748, 750, 751, 753, 754, 756, 757, 759, 760, 762, 763, 765, 766, 768, 769, 771], "arraywithlinearalgebra": 42, "choleski": [42, 43, 69, 70, 702], "upper": [42, 43, 67, 68, 213, 222, 245, 247, 702, 703, 704, 705, 744, 746, 875, 881, 883], "cross": [42, 43, 69, 70, 702, 772, 773, 776, 778, 781, 783, 786, 956], "axi": [42, 43, 44, 45, 46, 47, 56, 57, 58, 59, 60, 61, 67, 68, 90, 91, 92, 93, 102, 103, 104, 105, 106, 107, 157, 160, 164, 165, 167, 168, 170, 172, 175, 186, 198, 203, 213, 230, 231, 289, 291, 294, 301, 314, 315, 316, 317, 318, 319, 320, 321, 333, 577, 595, 596, 605, 649, 702, 706, 707, 708, 712, 714, 763, 764, 765, 766, 767, 768, 772, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 794, 795, 796, 797, 798, 801, 802, 803, 804, 805, 806, 807, 808, 809, 814, 815, 816, 817, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 839, 840, 843, 844, 847, 875, 886, 887, 888, 889, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955], "det": [42, 43, 69, 70, 702], "diagon": [42, 43, 69, 70, 213, 222, 242, 244, 245, 247, 702, 760, 762], "offset": [42, 43, 48, 49, 94, 95, 702, 712, 713, 714, 760, 761, 762, 870, 871, 872, 873, 874], "axis1": [42, 43, 46, 47, 92, 93, 702, 712, 713, 714, 788, 836, 837, 838, 839], "axis2": [42, 43, 702, 712, 713, 714], "eigh": [42, 43, 69, 70, 702], "namedtupl": [42, 43, 702, 715, 716, 717, 744, 745, 746, 751, 753, 892, 893, 894, 898], "eigvalsh": [42, 43, 69, 70, 702], "inv": [42, 43, 69, 70, 172, 702, 956], "matmul": [42, 43, 88, 89, 155, 161, 170, 702, 751, 753, 956], "matrix_norm": [42, 43, 67, 68, 702], "ord": [42, 43, 67, 68, 702, 728, 729, 730, 766, 767, 768], "fro": [42, 43, 702, 728, 729, 730], "keepdim": [42, 43, 58, 59, 60, 61, 67, 68, 104, 105, 106, 107, 577, 649, 702, 728, 729, 730, 766, 767, 768, 887, 888, 889, 912, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955], "matrix_rank": [42, 43, 69, 70, 702], "rtol": [42, 43, 702, 732, 733, 734, 741, 742, 743], "matrix_transpos": [42, 43, 69, 70, 172, 702], "outer": [42, 43, 69, 70, 702, 848, 849, 850, 851], "pinv": [42, 43, 69, 70, 702, 956], "qr": [42, 43, 69, 70, 702], "mode": [42, 43, 67, 68, 150, 157, 164, 187, 210, 211, 289, 318, 319, 320, 321, 333, 339, 353, 356, 509, 512, 702, 744, 745, 746], "reduc": [42, 43, 67, 68, 172, 289, 333, 577, 600, 702, 744, 745, 746, 887, 888, 889, 912, 917, 920, 921, 924, 925, 928, 929, 932, 933, 936, 937, 940, 941, 944, 945, 946, 949, 951, 954], "solv": [42, 43, 69, 70, 171, 186, 702], "svd": [42, 43, 69, 70, 702, 956], "full_matric": [42, 43, 702, 751, 752, 753], "svdval": [42, 43, 69, 70, 702], "tensordot": [42, 43, 69, 70, 702], "ax": [42, 43, 46, 47, 67, 68, 92, 93, 155, 157, 165, 172, 289, 333, 577, 595, 702, 728, 730, 748, 750, 757, 758, 759, 766, 768, 788, 798, 801, 806, 809, 810, 811, 812, 813, 822, 825, 828, 831, 836, 839, 844, 847, 887, 888, 889, 912, 917, 920, 921, 924, 925, 928, 929, 932, 933, 936, 937, 940, 941, 944, 945, 946, 949, 951, 954], "trace": [42, 43, 67, 68, 69, 70, 170, 187, 577, 623, 624, 626, 702], "vecdot": [42, 43, 69, 70, 702], "vector_norm": [42, 43, 67, 68, 702], "vector_to_skew_symmetric_matrix": [42, 43, 69, 70, 702, 956], "arraywithloss": 44, "binary_cross_entropi": [44, 45, 90, 91, 772], "pred": [44, 45, 90, 91, 160, 164, 167, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787], "cross_entropi": [44, 45, 90, 91, 160, 164, 167, 772, 783, 786], "sparse_cross_entropi": [44, 45, 90, 91, 772], "loss": [45, 91, 155, 160, 173, 174, 175, 773, 776, 778, 781, 783, 786, 956], "arraywithmanipul": 46, "clip": [46, 47, 67, 68, 92, 93, 160, 164, 167, 170, 173, 175, 339, 507, 508, 577, 589, 590, 592, 788, 793, 956], "x_min": [46, 47, 67, 68, 92, 93, 170, 175, 788, 789, 790, 791, 792, 793], "x_max": [46, 47, 67, 68, 92, 93, 170, 175, 788, 789, 790, 791, 792, 793], "roll": [46, 47, 92, 93, 164, 168, 788, 789, 790, 826], "8": [46, 47, 69, 70, 78, 79, 96, 97, 125, 136, 150, 153, 157, 164, 169, 173, 198, 202, 289, 311, 339, 353, 356, 357, 378, 381, 402, 405, 410, 413, 447, 450, 467, 470, 507, 508, 534, 537, 550, 553, 554, 557, 568, 572, 577, 586, 605, 651, 653, 656, 689, 696, 702, 706, 708, 709, 711, 712, 714, 738, 740, 757, 759, 772, 773, 776, 788, 789, 790, 792, 806, 809, 814, 817, 827, 875, 876, 877, 878, 879, 887, 891, 892, 893, 912, 913, 916, 956], "concat": [46, 47, 67, 68, 92, 93, 289, 318, 319, 320, 321, 333, 577, 604, 788, 956], "xs": [46, 47, 92, 93, 164, 289, 312, 316, 318, 319, 320, 577, 578, 581, 586, 651, 662, 788, 794, 795, 796, 797], "constant_pad": [46, 47, 92, 93, 788], "pad_width": [46, 47, 92, 93, 788, 798, 799, 800, 801, 844, 845, 846, 847], "expand_dim": [46, 47, 92, 93, 170, 173, 788, 956], "flip": [46, 47, 92, 93, 172, 173, 175, 339, 382, 385, 788, 814, 817, 956], "permute_dim": [46, 47, 92, 93, 788], "repeat": [46, 47, 67, 68, 92, 93, 151, 156, 157, 161, 163, 164, 577, 601, 788, 840, 843], "reshap": [46, 47, 67, 68, 92, 93, 167, 170, 172, 175, 788, 956], "shape": [46, 47, 67, 68, 82, 83, 92, 93, 96, 97, 100, 101, 125, 127, 128, 129, 130, 131, 132, 139, 140, 151, 155, 156, 157, 165, 166, 167, 168, 170, 172, 173, 174, 175, 198, 199, 200, 201, 202, 203, 204, 207, 209, 213, 214, 215, 217, 218, 219, 221, 222, 223, 225, 226, 227, 229, 230, 231, 232, 234, 238, 239, 241, 242, 244, 245, 247, 248, 249, 251, 252, 258, 259, 260, 289, 301, 329, 334, 339, 340, 343, 345, 348, 349, 352, 353, 356, 358, 361, 362, 365, 366, 369, 370, 373, 374, 377, 378, 381, 382, 385, 386, 389, 390, 393, 394, 397, 398, 401, 402, 405, 406, 409, 410, 413, 414, 417, 419, 422, 423, 426, 427, 430, 431, 434, 435, 438, 439, 442, 443, 446, 447, 450, 451, 454, 455, 458, 459, 462, 463, 466, 467, 470, 471, 474, 475, 478, 479, 482, 483, 486, 487, 490, 491, 494, 495, 498, 499, 502, 503, 506, 507, 508, 509, 512, 514, 517, 518, 521, 522, 525, 526, 529, 530, 533, 534, 537, 538, 541, 542, 545, 546, 549, 550, 553, 554, 557, 558, 562, 563, 567, 568, 572, 573, 576, 577, 589, 590, 592, 595, 599, 600, 601, 603, 606, 609, 614, 617, 630, 633, 634, 640, 651, 653, 655, 657, 684, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 700, 701, 702, 703, 705, 706, 708, 709, 711, 712, 714, 715, 717, 718, 720, 721, 723, 724, 727, 728, 730, 732, 734, 735, 737, 738, 740, 741, 743, 744, 746, 747, 748, 750, 751, 753, 754, 756, 757, 759, 760, 762, 763, 765, 766, 768, 769, 771, 772, 773, 776, 778, 781, 783, 786, 788, 789, 792, 794, 797, 798, 801, 802, 805, 806, 809, 810, 813, 814, 817, 818, 819, 820, 821, 822, 825, 827, 828, 831, 832, 835, 836, 839, 840, 843, 844, 847, 870, 871, 874, 875, 876, 877, 878, 879, 880, 881, 883, 884, 886, 887, 888, 890, 891, 895, 897, 901, 902, 905, 907, 910, 912, 913, 916, 945, 946, 949, 951, 954, 956], "shift": [46, 47, 92, 93, 157, 168, 339, 386, 389, 394, 397, 788, 822, 823, 824, 825, 826], "squeez": [46, 47, 92, 93, 788, 956], "stack": [46, 47, 67, 68, 92, 93, 125, 134, 170, 213, 242, 244, 245, 247, 702, 709, 711, 712, 714, 715, 717, 718, 720, 721, 723, 724, 727, 731, 732, 734, 735, 737, 741, 743, 744, 746, 751, 753, 754, 756, 760, 762, 788, 852, 853, 862, 863, 956], "swapax": [46, 47, 92, 93, 788], "axis0": [46, 47, 92, 93, 788, 836, 837, 838, 839], "tile": [46, 47, 92, 93, 788, 956], "rep": [46, 47, 92, 93, 788, 840, 841, 842, 843], "zero_pad": [46, 47, 92, 93, 788, 956], "arraywithnorm": 48, "layer_norm": [48, 49, 94, 95, 870], "normalized_idx": [48, 49, 94, 95, 870, 871, 872, 873, 874], "05": [48, 49, 94, 95, 289, 651, 653, 656, 870, 871, 872, 873, 874], "scale": [48, 49, 94, 95, 125, 133, 136, 141, 144, 164, 289, 331, 332, 651, 675, 677, 689, 697, 700, 701, 870, 871, 872, 873, 874], "new_std": [48, 49, 94, 95, 139, 140, 870, 871, 872, 873, 874], "norm": [49, 67, 68, 95, 140, 141, 143, 155, 577, 589, 590, 592, 702, 728, 730, 766, 768, 871, 874, 956], "arraywithrandom": [50, 172], "random": [51, 67, 68, 97, 155, 166, 175, 186, 876, 877, 878, 880, 881, 883, 885, 886, 956], "arraywithsearch": 52, "arraywithset": 54, "unique_count": [54, 55, 100, 101, 892, 895], "uc": [54, 55, 894, 896], "count": [54, 55, 157, 173, 289, 327, 702, 763, 765, 788, 806, 809, 892, 893, 894, 896, 898, 945, 946, 949, 951, 954], "arraywithsort": 56, "argsort": [56, 57, 102, 103, 901], "descend": [56, 57, 102, 103, 702, 751, 753, 754, 756, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911], "stabl": [56, 57, 102, 103, 150, 170, 187, 577, 612, 613, 635, 636, 641, 642, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911], "sort": [57, 67, 68, 69, 70, 71, 103, 155, 702, 715, 717, 751, 753, 754, 756, 902, 905], "arraywithstatist": 58, "einsum": [58, 59, 104, 105, 912], "equat": [58, 59, 104, 105, 702, 748, 750, 912, 913, 914, 915, 916], "max": [58, 59, 67, 68, 104, 105, 141, 143, 252, 272, 275, 339, 507, 577, 589, 590, 592, 600, 633, 634, 702, 732, 734, 741, 743, 912], "mean": [58, 59, 67, 68, 104, 105, 108, 109, 116, 150, 151, 154, 157, 160, 164, 165, 166, 167, 170, 172, 173, 174, 175, 186, 187, 289, 318, 319, 320, 321, 333, 577, 600, 848, 849, 850, 851, 852, 858, 875, 880, 892, 893, 912, 956], "min": [58, 59, 67, 68, 104, 105, 252, 272, 275, 339, 508, 577, 600, 633, 634, 641, 702, 744, 746, 751, 753, 754, 756, 766, 768, 912], "prod": [58, 59, 67, 68, 104, 105, 157, 165, 577, 600, 912], "std": [58, 59, 104, 105, 157, 875, 880, 892, 893, 912], "correct": [58, 59, 104, 105, 151, 152, 154, 160, 164, 165, 166, 168, 252, 284, 788, 789, 792, 912, 933, 934, 935, 936, 941, 942, 943, 944, 956], "sum": [58, 59, 67, 68, 104, 105, 160, 164, 165, 167, 170, 289, 318, 319, 320, 321, 333, 339, 353, 356, 487, 490, 577, 596, 600, 633, 634, 689, 701, 702, 751, 753, 760, 762, 766, 768, 912, 913, 916, 933, 936], "var": [58, 59, 104, 105, 108, 109, 157, 170, 848, 849, 850, 912], "statist": [59, 105, 108, 109, 155, 165, 913, 916, 917, 920, 921, 924, 925, 928, 929, 932, 933, 936, 937, 940, 941, 944], "arraywithutil": 60, "util": [61, 107, 155, 166, 289, 322, 946, 949, 951, 954], "add_ivy_array_instance_method": 62, "cl": [62, 63, 108, 109], "to_ignor": [62, 63, 108, 109, 852, 863], "loop": [62, 63, 108, 109, 161, 187, 848, 849, 850, 851], "_wrap_funct": [62, 63, 108, 109, 160, 162], "shown": [62, 63, 67, 68, 108, 109, 151, 157, 168, 170, 172, 187, 339, 378, 381, 398, 401, 410, 413, 534, 537, 568, 572, 702, 709, 711, 788, 802, 805, 806, 809, 892, 893, 901, 902, 905], "appropri": [62, 63, 108, 109, 151, 162, 339, 353, 356, 509, 512, 887, 888], "toi": [62, 63, 108, 109], "arrayexampl": [62, 63], "hasattr": [62, 63, 108, 109, 172], "relu": [62, 63, 69, 70, 173, 174, 198, 199, 200, 956], "softmax": [62, 63, 69, 70, 198, 689, 700, 701, 956], "empti": [64, 67, 68, 69, 70, 163, 165, 166, 213, 214, 912, 933, 936, 937, 940, 945, 946, 949, 951, 954], "dictionari": [64, 67, 68, 69, 70, 71, 173, 187, 289, 332], "map": [64, 67, 68, 69, 70, 71, 125, 136, 159, 160, 164, 168, 173, 186, 187, 289, 298, 852, 859, 860, 864, 865], "pair": [64, 339, 370, 373, 689, 701, 702, 706, 708], "via": [64, 155, 164, 165, 166, 167, 170, 172, 173, 186, 852, 853, 862, 863], "v": [64, 125, 126, 127, 128, 129, 130, 131, 132, 134, 135, 136, 137, 138, 139, 140, 141, 145, 147, 148, 151, 170, 173, 174, 175, 689, 701, 956], "__delitem__": 64, "delet": [64, 151, 153], "__iter__": 64, "__len__": 64, "len": [64, 172, 175, 213, 232, 234], "__reversed__": 64, "revers": [64, 69, 70, 152, 156, 157, 175, 187, 577, 598, 788, 806, 809], "remov": [64, 67, 68, 151, 152, 153, 156, 159, 160, 165, 167, 175, 702, 712, 714, 724, 727, 760, 762, 788, 828, 831, 848, 849, 850], "fromkei": 64, "els": [64, 151, 152, 155, 160, 161, 167, 170, 172, 174, 175, 187, 577, 587, 598, 602, 852, 862], "view": [64, 150, 151, 213, 223, 225, 689, 692, 696], "correspond": [64, 67, 68, 69, 70, 151, 156, 157, 158, 160, 163, 164, 165, 168, 252, 259, 339, 370, 373, 526, 529, 702, 706, 708, 715, 717, 748, 750, 788, 794, 797, 822, 825, 875, 876, 887, 888, 889, 892, 893, 894, 898, 900, 912, 929, 932, 933, 936, 937, 940, 941, 944], "found": [64, 67, 68, 69, 70, 71, 150, 151, 156, 163, 164, 289, 323], "keyerror": 64, "popitem": 64, "lifo": 64, "setdefault": 64, "insert": [64, 788, 802, 805, 852, 857, 887, 888], "updat": [64, 67, 68, 114, 115, 141, 142, 143, 144, 145, 146, 150, 151, 152, 153, 154, 157, 158, 162, 163, 164, 165, 168, 170, 172, 173, 175, 187, 289, 298, 577, 621, 633, 634, 651, 653, 656, 658, 660, 663, 665, 671, 673, 675, 677, 679, 681, 689, 699, 848, 849, 850, 852, 859, 860, 868, 869], "lack": 64, "containerwithactiv": [65, 69, 70], "dict_in": [65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107], "queue": [65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 173, 289, 298, 299, 577, 632, 637], "queue_load_s": [65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107], "container_combine_method": [65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107], "list_join": [65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107], "queue_timeout": [65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 577], "print_limit": [65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107], "key_length_limit": [65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107], "print_ind": [65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107], "print_line_spac": [65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107], "ivyh": [65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107], "default_key_color": [65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107], "green": [65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 150, 151, 964, 965], "keyword_color_dict": [65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107], "rebuild_child_contain": [65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107], "types_to_iteratively_nest": [65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107], "alphabetical_kei": [65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107], "containerbas": [65, 66, 67, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 164], "key_chain": [65, 66, 67, 68, 69, 70, 74, 75, 78, 79, 80, 81, 82, 83, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 100, 101, 102, 103, 104, 105, 106, 107, 204, 206, 208, 261, 263, 265, 340, 342, 344, 345, 347, 349, 351, 353, 355, 357, 358, 360, 362, 364, 366, 368, 370, 372, 374, 376, 378, 380, 382, 384, 386, 388, 390, 392, 394, 396, 398, 400, 402, 404, 406, 408, 410, 412, 414, 416, 418, 419, 421, 423, 425, 427, 429, 431, 433, 435, 437, 439, 441, 443, 445, 447, 449, 451, 453, 455, 457, 459, 461, 463, 465, 467, 469, 471, 473, 475, 477, 479, 481, 483, 485, 487, 489, 491, 493, 495, 497, 499, 501, 503, 505, 509, 511, 513, 514, 516, 518, 520, 522, 524, 526, 528, 530, 532, 534, 536, 538, 540, 542, 544, 546, 548, 550, 552, 554, 556, 558, 559, 561, 563, 564, 566, 568, 569, 571, 573, 575, 578, 580, 582, 590, 591, 606, 608, 610, 658, 659, 661, 663, 664, 666, 667, 668, 670, 671, 672, 674, 675, 676, 678, 679, 680, 682, 724, 726, 773, 775, 777, 778, 780, 782, 783, 785, 787, 789, 791, 793, 794, 796, 798, 800, 802, 804, 806, 808, 810, 812, 814, 816, 818, 820, 822, 824, 826, 828, 830, 832, 834, 836, 838, 840, 842, 844, 846, 852, 865, 871, 873, 877, 879, 881, 882, 884, 894, 895, 897, 902, 904, 906, 907, 909, 911, 913, 915, 917, 919, 921, 923, 925, 927, 929, 931, 933, 935, 937, 939, 941, 943, 946, 948, 950, 951, 953, 955], "to_appli": [65, 66, 67, 68, 69, 70, 74, 75, 78, 79, 80, 81, 82, 83, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 100, 101, 102, 103, 104, 105, 106, 107, 204, 206, 208, 261, 263, 265, 340, 342, 344, 345, 347, 349, 351, 353, 355, 357, 358, 360, 362, 364, 366, 368, 370, 372, 374, 376, 378, 380, 382, 384, 386, 388, 390, 392, 394, 396, 398, 400, 402, 404, 406, 408, 410, 412, 414, 416, 418, 419, 421, 423, 425, 427, 429, 431, 433, 435, 437, 439, 441, 443, 445, 447, 449, 451, 453, 455, 457, 459, 461, 463, 465, 467, 469, 471, 473, 475, 477, 479, 481, 483, 485, 487, 489, 491, 493, 495, 497, 499, 501, 503, 505, 509, 511, 513, 514, 516, 518, 520, 522, 524, 526, 528, 530, 532, 534, 536, 538, 540, 542, 544, 546, 548, 550, 552, 554, 556, 558, 559, 561, 563, 564, 566, 568, 569, 571, 573, 575, 578, 580, 582, 590, 591, 606, 608, 610, 658, 659, 661, 663, 664, 666, 667, 668, 670, 671, 672, 674, 675, 676, 678, 679, 680, 682, 724, 726, 773, 775, 777, 778, 780, 782, 783, 785, 787, 789, 791, 793, 794, 796, 798, 800, 802, 804, 806, 808, 810, 812, 814, 816, 818, 820, 822, 824, 826, 828, 830, 832, 834, 836, 838, 840, 842, 844, 846, 852, 865, 871, 873, 881, 882, 884, 894, 895, 897, 902, 904, 906, 907, 909, 911, 913, 915, 917, 919, 921, 923, 925, 927, 929, 931, 933, 935, 937, 939, 941, 943, 946, 948, 950, 951, 953, 955], "prune_unappli": [65, 66, 67, 68, 69, 70, 74, 75, 78, 79, 80, 81, 82, 83, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 100, 101, 102, 103, 104, 105, 106, 107, 204, 206, 208, 261, 263, 265, 340, 342, 344, 345, 347, 349, 351, 353, 355, 357, 358, 360, 362, 364, 366, 368, 370, 372, 374, 376, 378, 380, 382, 384, 386, 388, 390, 392, 394, 396, 398, 400, 402, 404, 406, 408, 410, 412, 414, 416, 418, 419, 421, 423, 425, 427, 429, 431, 433, 435, 437, 439, 441, 443, 445, 447, 449, 451, 453, 455, 457, 459, 461, 463, 465, 467, 469, 471, 473, 475, 477, 479, 481, 483, 485, 487, 489, 491, 493, 495, 497, 499, 501, 503, 505, 509, 511, 513, 514, 516, 518, 520, 522, 524, 526, 528, 530, 532, 534, 536, 538, 540, 542, 544, 546, 548, 550, 552, 554, 556, 558, 559, 561, 563, 564, 566, 568, 569, 571, 573, 575, 578, 580, 582, 590, 591, 606, 608, 610, 658, 659, 661, 663, 664, 666, 667, 668, 670, 671, 672, 674, 675, 676, 678, 679, 680, 682, 724, 726, 773, 775, 777, 778, 780, 782, 783, 785, 787, 789, 791, 793, 794, 796, 798, 800, 802, 804, 806, 808, 810, 812, 814, 816, 818, 820, 822, 824, 826, 828, 830, 832, 834, 836, 838, 840, 842, 844, 846, 852, 865, 871, 873, 881, 882, 884, 894, 895, 897, 902, 904, 906, 907, 909, 911, 913, 915, 917, 919, 921, 923, 925, 927, 929, 931, 933, 935, 937, 939, 941, 943, 946, 948, 950, 951, 953, 955], "map_sequ": [65, 66, 67, 68, 69, 70, 74, 75, 78, 79, 80, 81, 82, 83, 90, 91, 92, 93, 94, 95, 96, 97, 100, 101, 102, 103, 104, 105, 106, 107, 204, 206, 208, 261, 263, 265, 340, 342, 344, 345, 347, 349, 351, 353, 355, 357, 358, 360, 362, 364, 366, 368, 374, 376, 382, 384, 402, 404, 406, 408, 410, 412, 414, 416, 418, 423, 425, 427, 429, 431, 433, 435, 437, 451, 453, 455, 457, 459, 461, 471, 473, 475, 477, 479, 481, 483, 485, 495, 497, 509, 511, 513, 514, 516, 522, 524, 534, 536, 538, 540, 542, 544, 546, 548, 550, 552, 554, 556, 558, 559, 561, 563, 564, 566, 568, 569, 571, 573, 575, 578, 580, 582, 590, 591, 606, 608, 610, 658, 659, 661, 663, 664, 666, 667, 668, 670, 671, 672, 674, 675, 676, 678, 679, 680, 682, 773, 775, 777, 778, 780, 782, 783, 785, 787, 789, 791, 793, 798, 800, 802, 804, 806, 808, 810, 812, 814, 816, 818, 820, 822, 824, 826, 828, 830, 836, 838, 840, 842, 844, 846, 871, 873, 881, 882, 884, 894, 895, 897, 902, 904, 906, 907, 909, 911, 913, 915, 917, 919, 921, 923, 925, 927, 929, 931, 933, 935, 937, 939, 941, 943, 946, 948, 950, 951, 953, 955], "static": [65, 66, 67, 68, 74, 75, 78, 79, 80, 81, 82, 83, 90, 91, 92, 93, 96, 97, 100, 101, 102, 103, 106, 107, 108, 109, 152, 156, 157, 160, 187, 204, 208, 210, 211, 261, 265, 340, 344, 353, 357, 563, 564, 568, 569, 578, 582, 606, 610, 789, 793, 822, 826, 877, 879, 894, 895], "static_softplu": [65, 66, 204], "__getitem__": [67, 68, 164], "queri": [67, 68, 125, 136, 164, 165, 172, 289, 322, 332, 689, 700, 701], "slice": [67, 68, 577, 605, 606, 609, 852, 861], "chain": [67, 68, 147, 148, 163, 164, 174, 175, 187, 848, 849, 850, 852, 865], "element": [67, 68, 125, 133, 156, 170, 175, 198, 199, 200, 201, 202, 203, 204, 207, 209, 213, 214, 226, 227, 229, 242, 244, 245, 247, 289, 312, 316, 320, 339, 340, 343, 345, 348, 349, 352, 353, 356, 358, 361, 362, 365, 366, 369, 370, 373, 374, 377, 378, 381, 382, 385, 386, 389, 390, 393, 394, 397, 398, 401, 402, 405, 406, 409, 410, 413, 414, 417, 419, 422, 423, 426, 427, 430, 431, 434, 435, 438, 439, 442, 443, 446, 447, 450, 451, 454, 455, 458, 459, 462, 463, 466, 467, 470, 471, 474, 475, 478, 479, 482, 483, 486, 487, 490, 491, 494, 495, 498, 499, 502, 503, 506, 507, 508, 509, 512, 514, 517, 518, 521, 522, 525, 526, 529, 530, 533, 534, 537, 538, 541, 542, 545, 546, 549, 550, 553, 554, 557, 558, 562, 563, 567, 568, 572, 573, 576, 577, 585, 586, 589, 590, 592, 595, 596, 603, 617, 646, 647, 689, 697, 702, 706, 708, 715, 717, 724, 727, 744, 746, 751, 753, 788, 789, 792, 806, 809, 814, 817, 822, 825, 827, 828, 831, 875, 876, 887, 890, 891, 892, 893, 894, 898, 899, 900, 901, 907, 910, 912, 913, 916, 917, 920, 921, 924, 925, 928, 929, 932, 933, 936, 937, 940, 941, 944, 945, 946, 949, 951, 954], "represent": [67, 68, 69, 70, 71, 186, 212, 252, 256, 257, 272, 275, 289, 305, 306, 339, 340, 343, 353, 356, 378, 381, 390, 393, 398, 401, 503, 506, 509, 512, 577, 583, 640, 645], "around": [67, 68, 69, 70, 71, 151, 160, 163, 168, 172, 187], "sequenc": [67, 68, 69, 70, 71, 125, 134, 139, 140, 147, 148, 157, 165, 186, 210, 211, 289, 298, 299, 577, 586, 627, 788, 827, 832, 835, 875, 877, 878, 912, 917, 920, 945, 946, 949, 951, 954], "multiprocess": [67, 68, 69, 70, 71, 173, 187, 289, 298, 577], "asynchron": [67, 68, 69, 70, 71], "wait": [67, 68, 69, 70, 71, 151], "dimens": [67, 68, 69, 70, 71, 125, 126, 127, 128, 129, 130, 131, 132, 135, 136, 157, 170, 173, 198, 203, 213, 242, 244, 245, 247, 289, 320, 577, 599, 600, 601, 604, 614, 630, 649, 689, 690, 691, 692, 693, 694, 695, 696, 699, 702, 703, 705, 706, 708, 709, 711, 712, 714, 715, 717, 718, 720, 721, 723, 724, 727, 728, 730, 732, 734, 735, 737, 741, 743, 744, 746, 748, 750, 751, 753, 754, 756, 760, 762, 763, 765, 766, 768, 772, 778, 781, 783, 786, 788, 794, 797, 802, 805, 806, 809, 810, 813, 814, 817, 818, 821, 822, 825, 827, 828, 831, 832, 835, 848, 849, 850, 851, 875, 886, 887, 888, 889, 890, 892, 893, 894, 898, 900, 912, 913, 916, 917, 920, 921, 924, 925, 928, 929, 932, 933, 936, 937, 940, 941, 944, 945, 946, 949, 951, 954], "combin": [67, 68, 69, 70, 71, 151, 157, 159, 160, 163, 164, 175, 702, 706, 708], "arriv": [67, 68, 69, 70, 71], "timeout": [67, 68, 69, 70, 71, 289, 298, 299, 577, 632, 637], "limit": [67, 68, 69, 70, 71, 151, 157, 159, 170, 173, 175, 187, 252, 272, 275, 577, 589, 590, 592, 788, 789, 792], "maximum": [67, 68, 69, 70, 71, 157, 170, 173, 175, 289, 313, 317, 321, 333, 339, 577, 589, 590, 592, 604, 651, 671, 673, 788, 789, 792, 852, 864, 887, 888, 912, 917, 920, 925, 928, 956], "length": [67, 68, 69, 70, 71, 173, 213, 214, 232, 234, 702, 751, 753, 754, 756, 788, 818, 821], "whitespac": [67, 68, 69, 70, 71], "indent": [67, 68, 69, 70, 71, 173], "extra": [67, 68, 69, 70, 71, 157, 162, 163, 170, 651, 662], "newlin": [67, 68, 69, 70, 71, 156], "handl": [67, 68, 69, 70, 71, 141, 142, 143, 144, 145, 146, 154, 159, 160, 162, 164, 165, 166, 167, 168, 174, 187, 210, 211, 289, 305, 306, 307, 308, 309, 323, 327, 328, 335, 338, 651, 658, 660, 663, 665, 671, 673, 675, 677, 679, 681], "result": [67, 68, 69, 70, 71, 155, 156, 157, 159, 163, 164, 165, 167, 168, 173, 187, 198, 199, 200, 201, 202, 203, 204, 207, 209, 213, 214, 215, 217, 218, 219, 221, 222, 223, 225, 226, 227, 229, 230, 231, 238, 239, 241, 242, 244, 245, 247, 248, 249, 251, 252, 258, 260, 280, 289, 298, 334, 339, 340, 343, 345, 348, 349, 352, 353, 356, 358, 361, 362, 365, 366, 369, 370, 373, 374, 377, 378, 381, 382, 385, 386, 389, 390, 393, 394, 397, 398, 401, 402, 405, 406, 409, 410, 413, 414, 417, 419, 422, 423, 426, 427, 430, 431, 434, 435, 438, 439, 442, 443, 446, 447, 450, 451, 454, 455, 458, 459, 462, 463, 466, 467, 470, 471, 474, 475, 478, 479, 482, 483, 486, 487, 490, 491, 494, 495, 498, 499, 502, 503, 506, 507, 508, 509, 512, 514, 517, 518, 521, 522, 525, 526, 529, 530, 533, 534, 537, 538, 541, 542, 545, 546, 549, 550, 553, 554, 557, 558, 562, 563, 567, 568, 572, 573, 576, 577, 589, 590, 592, 595, 596, 599, 600, 601, 603, 605, 606, 609, 617, 630, 633, 634, 651, 684, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 700, 701, 702, 703, 705, 706, 708, 709, 711, 712, 714, 718, 720, 721, 723, 724, 727, 728, 730, 732, 734, 735, 737, 738, 740, 741, 743, 747, 748, 750, 751, 753, 754, 756, 757, 759, 760, 762, 763, 765, 766, 768, 769, 771, 772, 773, 776, 778, 781, 783, 786, 788, 789, 792, 794, 797, 798, 801, 802, 805, 806, 809, 810, 813, 814, 817, 818, 821, 822, 825, 828, 831, 832, 835, 836, 839, 840, 843, 844, 847, 852, 865, 870, 871, 874, 875, 876, 877, 878, 880, 881, 883, 886, 887, 888, 889, 891, 892, 893, 900, 901, 902, 905, 907, 910, 912, 913, 916, 917, 920, 921, 924, 925, 928, 929, 932, 933, 936, 937, 940, 941, 944, 945, 946, 949, 951, 954, 956], "color": [67, 68, 69, 70, 71, 964, 965], "termin": [67, 68, 69, 70, 71, 150, 151, 153, 164, 170, 173], "termcolor": [67, 68, 69, 70, 71], "rebuild": [67, 68, 69, 70, 71], "constructor": [67, 68, 69, 70, 71, 147, 148, 165, 166, 172, 577, 584], "param": [67, 68, 69, 70, 71, 80, 81, 170, 175, 577, 583, 605, 606, 609, 610], "kept": [67, 68, 69, 70, 71, 151, 167, 848, 849, 850], "structur": [67, 68, 69, 70, 71, 153, 155, 160, 163, 164, 173, 174, 577, 593, 852, 865], "alphabet": [67, 68, 69, 70, 71], "preserv": [67, 68, 69, 70, 71, 175, 187, 651, 684, 788, 806, 809], "__setitem__": [67, 68, 163, 164, 172], "val": [67, 68, 167, 172, 577, 619, 620, 621, 635, 636], "after": [67, 68, 141, 142, 143, 144, 145, 146, 157, 164, 165, 169, 252, 284, 339, 550, 553, 651, 658, 660, 662, 663, 665, 671, 673, 675, 677, 679, 681, 870, 871, 874], "all_fals": [67, 68], "assert_is_bool": [67, 68], "entri": [67, 68, 213, 230, 231, 788, 827, 852, 865], "boolean": [67, 68, 164, 213, 226, 252, 258, 276, 288, 289, 324, 336, 339, 378, 381, 382, 385, 390, 393, 398, 401, 491, 494, 495, 498, 499, 502, 503, 506, 577, 578, 581, 585, 586, 616, 617, 618, 622, 623, 624, 625, 626, 643, 650, 651, 667, 669, 848, 849, 850, 852, 862, 912, 925, 928], "evalu": [67, 68, 164, 339, 427, 430, 431, 434, 471, 474, 475, 478, 479, 482, 483, 486, 514, 517, 538, 541, 554, 557, 852, 853, 862, 863, 945, 946, 949, 951, 954], "assert": [67, 68, 172, 173, 577, 587], "skip": [67, 68, 153, 159, 852, 865], "prune": [67, 68, 852, 865, 866, 867], "all_key_chain": [67, 68], "include_empti": [67, 68], "all_tru": [67, 68, 164, 173], "arrays_as_list": [67, 68], "intermedi": [67, 68], "as_arrai": [67, 68, 577, 614, 639], "as_bool": [67, 68], "as_on": [67, 68], "ones": [67, 68, 69, 70, 159, 170, 172, 173, 213, 222, 239, 241, 339, 402, 405, 577, 630, 956], "sub": [67, 68, 151, 152, 154, 159, 164, 172, 173, 174, 289, 314, 315, 318, 319, 320, 321, 702, 712, 714, 788, 827, 848, 849, 850, 851, 956], "fill": [67, 68, 213, 218, 226, 227, 229, 238, 239, 241, 248, 249, 251, 875, 877, 878], "as_random_uniform": [67, 68], "low": [67, 68, 96, 97, 170, 875, 877, 878, 879, 881, 882, 883, 884], "uniform": [67, 68, 116, 118, 119, 122, 123, 174, 875, 876, 877, 878, 881, 883], "lower": [67, 68, 151, 157, 170, 187, 213, 222, 242, 244, 339, 507, 702, 703, 705, 875, 881, 883], "boundari": [67, 68, 875, 881, 883], "output": [67, 68, 125, 126, 127, 128, 129, 130, 131, 133, 134, 135, 136, 150, 154, 155, 156, 157, 159, 160, 163, 164, 166, 167, 168, 170, 172, 174, 175, 187, 198, 199, 200, 201, 202, 203, 204, 207, 209, 213, 214, 215, 217, 218, 219, 221, 222, 223, 225, 226, 227, 229, 230, 231, 232, 234, 238, 239, 241, 242, 244, 245, 247, 248, 249, 251, 252, 258, 260, 289, 298, 299, 333, 334, 339, 340, 343, 345, 348, 349, 352, 353, 356, 358, 361, 362, 365, 366, 369, 370, 373, 374, 377, 378, 381, 382, 385, 386, 389, 390, 393, 394, 397, 398, 401, 402, 405, 406, 409, 410, 413, 414, 417, 419, 422, 423, 426, 427, 430, 431, 434, 435, 438, 439, 442, 443, 446, 447, 450, 451, 454, 455, 458, 459, 462, 463, 466, 471, 474, 475, 478, 479, 482, 483, 486, 487, 490, 491, 494, 495, 498, 499, 502, 503, 506, 507, 508, 509, 512, 514, 517, 518, 521, 522, 525, 526, 529, 530, 533, 534, 537, 538, 541, 542, 545, 546, 549, 550, 553, 554, 557, 558, 562, 563, 567, 568, 572, 573, 576, 577, 588, 589, 590, 592, 595, 596, 599, 600, 601, 603, 605, 606, 609, 617, 630, 633, 634, 651, 662, 684, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 705, 706, 708, 709, 711, 712, 714, 718, 720, 721, 723, 724, 727, 728, 730, 732, 734, 735, 737, 738, 740, 741, 743, 747, 748, 750, 751, 753, 754, 756, 757, 759, 760, 762, 763, 765, 766, 768, 769, 771, 772, 773, 776, 778, 781, 783, 786, 788, 789, 792, 794, 797, 798, 801, 802, 805, 806, 809, 810, 813, 814, 817, 818, 821, 822, 825, 828, 831, 832, 835, 836, 839, 840, 843, 844, 847, 852, 865, 870, 871, 874, 875, 876, 877, 878, 880, 881, 883, 886, 887, 891, 901, 902, 905, 907, 910, 912, 913, 916, 917, 920, 921, 924, 925, 928, 929, 932, 933, 936, 937, 940, 941, 944, 945, 946, 949, 951, 954, 956], "interv": [67, 68, 170, 175, 213, 214, 230, 231, 702, 763, 765, 788, 789, 792, 832, 835, 875, 877, 878, 881, 883, 945, 946, 949, 951, 954], "as_vari": [67, 68], "as_zero": [67, 68], "assert_contains_sub_contain": [67, 68], "sub_cont": [67, 68], "partial": [67, 68, 137, 138, 151], "except": [67, 68, 156, 163, 167, 172, 187, 252, 260, 577, 587, 598, 621, 648, 702, 741, 743, 788, 794, 797, 832, 835, 887, 890, 945, 946, 949, 951, 954], "diff": [67, 68, 164, 173], "screen": [67, 68, 173], "assert_contains_sub_structur": [67, 68], "check_shap": [67, 68], "assert_ident": [67, 68], "check_typ": [67, 68], "same_arrai": [67, 68, 173], "arrays_equ": [67, 68, 69, 70, 577], "datatyp": [67, 68, 213, 215, 217, 235, 237, 252, 266, 277, 278, 279], "exact": [67, 68, 151, 170, 892, 893], "assert_identical_structur": [67, 68], "at_key_chain": [67, 68], "ignore_key_error": [67, 68], "ignore_non": [67, 68], "at_kei": [67, 68], "ignor": [67, 68, 141, 145, 157, 187, 213, 232, 234, 852, 863], "substr": [67, 68], "access": [67, 68, 151, 153, 165], "clip_min": [67, 68], "clip_max": [67, 68], "minimum": [67, 68, 170, 175, 289, 339, 340, 343, 577, 612, 613, 635, 636, 641, 642, 788, 789, 792, 887, 889, 912, 917, 920, 925, 928, 956], "config": [67, 68, 173, 852, 865], "right": [67, 68, 149, 150, 151, 154, 157, 173, 339, 386, 389, 394, 397, 702, 751, 753], "duplic": [67, 68, 156, 161, 162, 172, 174], "compar": [67, 68, 159, 173, 577, 578, 581, 585, 586, 892, 893, 894, 898, 900, 901, 902, 905, 907, 910], "configur": [67, 68, 150, 151, 153, 165, 289, 332, 852, 865], "container_rightmost": [67, 68], "common_key_chain": [67, 68, 164], "across": [67, 68, 152, 157, 159, 160, 164, 165, 168, 289, 298, 299, 310, 311, 313, 314, 315, 316, 317, 321, 331, 332, 577, 585, 586, 852, 858, 887, 889], "properti": [67, 68, 137, 138, 141, 142, 143, 144, 146, 157, 159, 160, 164, 172, 173, 174, 289, 301], "contains_sub_contain": [67, 68], "match": [67, 68, 164, 252, 258, 339, 530, 533, 577, 627], "contains_sub_structur": [67, 68], "create_if_abs": [67, 68], "inplac": [67, 68, 82, 83, 114, 115, 141, 142, 143, 144, 145, 146, 154, 157, 162, 163, 168, 172, 174, 577, 587, 618, 621, 622, 643, 651, 658, 659, 660, 661, 663, 664, 665, 666, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682], "alreadi": [67, 68, 150, 151, 161, 164, 168, 172, 187, 289, 339, 402, 405, 435, 438, 509, 512, 534, 537, 573, 576, 702, 738, 740, 956], "cutoff_at_depth": [67, 68], "depth_cutoff": [67, 68], "summari": [67, 68, 151, 252, 267, 268, 269, 281, 282, 283, 289, 302, 303, 577, 593, 597, 615, 651, 683, 688], "cutoff_at_height": [67, 68], "height_cutoff": [67, 68], "deep_copi": [67, 68, 173], "intern": [67, 68, 116, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 147, 148, 156, 163, 164, 166, 167, 289, 651, 687, 852, 853, 862, 863], "dev": [67, 68, 69, 71, 150, 160, 166, 170, 172, 174, 289, 298, 323], "belong": [67, 68, 174], "dev_clon": [67, 68, 289], "clone": [67, 68, 151, 153, 289, 310, 311, 312, 313], "dev_dist": [67, 68, 289], "distribut": [67, 68, 125, 133, 137, 138, 152, 166, 187, 289, 310, 314, 315, 316, 317, 689, 697, 772, 773, 776, 778, 781, 783, 786, 875, 876, 877, 878, 880, 881, 883], "along": [67, 68, 155, 167, 213, 230, 231, 289, 314, 315, 316, 317, 318, 319, 320, 321, 333, 577, 595, 596, 605, 649, 702, 728, 730, 760, 762, 763, 765, 766, 768, 772, 778, 781, 783, 786, 788, 794, 797, 806, 809, 814, 817, 822, 825, 827, 832, 835, 840, 843, 848, 849, 850, 851, 875, 886, 887, 888, 889, 901, 902, 905, 907, 910, 912, 913, 916, 917, 920, 921, 924, 925, 928, 929, 932, 933, 936, 937, 940, 941, 944, 945, 946, 949, 951, 954], "split": [67, 68, 149, 151, 169, 170, 187, 289, 298, 314, 315, 316, 317, 331, 332, 333, 577, 627, 788, 956], "dev_str": [67, 68], "diff_kei": [67, 68], "detect_key_diff": [67, 68], "detect_value_diff": [67, 68], "detect_shape_diff": [67, 68], "thei": [67, 68, 147, 148, 152, 154, 155, 157, 160, 162, 164, 165, 166, 167, 172, 173, 174, 175, 187, 252, 279, 848, 849, 850, 875, 876, 956], "treat": [67, 68, 171, 175, 210, 211], "detect": [67, 68, 168, 173, 174, 852, 853, 863], "without": [67, 68, 151, 155, 160, 163, 164, 166, 168, 170, 172, 173, 174, 186, 187, 577, 632, 637, 788, 818, 821, 852, 854, 892, 893, 894, 898, 900], "flag": [67, 68, 151, 167, 172, 289, 308, 651, 667, 669], "container0": [67, 68], "einops_rearrang": [67, 68, 577], "axes_length": [67, 68, 577, 599, 600, 601], "rearrang": [67, 68, 577, 599, 601], "addit": [67, 68, 125, 135, 150, 151, 155, 156, 159, 164, 165, 172, 173, 175, 289, 334, 339, 353, 356, 577, 599, 600, 601, 870, 871, 874], "einops_reduc": [67, 68, 577], "reduct": [67, 68, 165, 172, 577, 600, 633, 634, 945, 946, 949, 951, 954, 956], "One": [67, 68, 165, 170, 172, 173, 577, 600, 788, 818, 821, 875, 877, 878], "callabl": [67, 68, 164, 170, 188, 189, 190, 191, 192, 193, 194, 195, 196, 210, 211, 252, 273, 274, 289, 333, 577, 583, 588, 598, 600, 848, 849, 850, 851, 852, 858, 862, 863, 864], "einops_repeat": [67, 68, 577], "find_sub_contain": [67, 68], "sub_cont_to_find": [67, 68], "exsit": [67, 68], "find_sub_structur": [67, 68], "sub_struc_to_find": [67, 68], "flatten_key_chain": [67, 68, 137, 138, 173], "__": [67, 68, 157, 173], "above_height": [67, 68, 173], "below_depth": [67, 68, 173], "format_key_chain": [67, 68], "format_fn": [67, 68], "format": [67, 68, 153, 156, 165, 166, 170, 172, 173, 252, 270, 289, 309, 912, 913, 916, 956], "string": [67, 68, 161, 165, 166, 170, 173, 252, 256, 257, 270, 276, 288, 289, 305, 306, 307, 308, 322, 328, 334, 335, 338, 577, 597], "from_disk_as_hdf5": [67, 68, 173], "h5_obj_or_filepath": [67, 68], "slice_obj": [67, 68], "load": [67, 68, 187], "disk": [67, 68, 173], "h5py": [67, 68], "file": [67, 68, 137, 138, 150, 151, 153, 155, 156, 160, 161, 163, 164, 170, 173, 577, 638], "hdf5": [67, 68, 137, 138, 173], "filepath": [67, 68, 151], "h5": [67, 68], "from_disk_as_json": [67, 68, 173], "json_filepath": [67, 68], "json": [67, 68, 173], "were": [67, 68, 151, 155, 159, 164], "abl": [67, 68, 150, 151, 160, 165, 167, 172, 175], "dure": [67, 68, 137, 138, 141, 142, 143, 145, 160, 164, 165, 166, 167, 187, 210, 211, 289, 334, 577, 648, 651, 653, 656, 658, 660, 671, 673, 702, 724, 727, 848, 849, 850, 851, 912, 933, 936, 941, 944], "from_disk_as_pickl": [67, 68, 173], "pickle_filepath": [67, 68], "from_flat_list": [67, 68], "flat_list": [67, 68], "hierarchi": [67, 68, 173], "flat": [67, 68, 577, 633, 788, 814, 817], "popul": [67, 68, 165, 166, 170, 875, 876, 912, 933, 936, 941, 944], "from_numpi": [67, 68, 173], "gather": [67, 68, 577, 606, 609], "accord": [67, 68, 150, 153, 160, 165, 252, 261, 264, 272, 339, 353, 356, 394, 397, 509, 512, 577, 605, 633, 634, 702, 763, 765, 788, 798, 801, 844, 847, 912, 933, 936, 941, 944], "h5_file_s": [67, 68], "content": [67, 68, 152, 153, 167, 170, 173], "batch": [67, 68, 139, 140, 160, 164, 173, 289, 331, 332, 577, 604, 689, 698, 702, 766, 768, 848, 849, 850, 851, 870, 871, 874], "handle_inplac": [67, 68], "prime": [67, 68], "overwritten": [67, 68, 161, 163], "has_kei": [67, 68], "query_kei": [67, 68], "somewher": [67, 68], "has_key_chain": [67, 68], "has_nan": [67, 68, 577], "include_inf": [67, 68, 577, 616, 650], "leafwis": [67, 68], "nan": [67, 68, 155, 156, 212, 252, 258, 339, 340, 343, 345, 348, 349, 352, 353, 356, 358, 361, 362, 365, 366, 369, 370, 373, 402, 405, 406, 409, 410, 413, 427, 430, 431, 434, 435, 438, 451, 454, 459, 462, 471, 474, 475, 478, 483, 486, 487, 490, 509, 512, 526, 529, 530, 533, 534, 537, 542, 545, 546, 549, 550, 553, 563, 567, 568, 572, 573, 576, 577, 616, 650, 689, 701, 892, 893, 894, 898, 900, 912, 917, 920, 921, 924, 925, 928, 933, 936, 937, 940, 941, 944, 945, 946, 949, 951, 954], "well": [67, 68, 159, 167, 174, 175, 186, 577, 616, 702, 748, 750], "inf": [67, 68, 212, 577, 616, 650, 702, 766, 768], "wise": [67, 68, 170, 175, 198, 199, 200, 201, 202, 203, 204, 207, 209, 339, 340, 343, 345, 348, 353, 356, 358, 361, 366, 369, 370, 373, 378, 381, 382, 385, 386, 389, 390, 393, 394, 397, 398, 401, 414, 417, 419, 422, 423, 426, 439, 442, 443, 446, 447, 450, 463, 466, 467, 470, 487, 490, 491, 494, 495, 498, 499, 502, 503, 506, 507, 508, 509, 512, 518, 521, 526, 529, 530, 533, 558, 562, 577, 603, 788, 789, 792], "identical_array_shap": [67, 68], "exclus": [67, 68, 82, 83, 160, 164, 175, 213, 214, 577, 595, 623, 624, 626, 651, 667, 668, 669, 670, 875, 877, 878], "identical_config": [67, 68], "identical_structur": [67, 68], "if_exist": [67, 68], "inplace_upd": [67, 68, 114, 115, 167, 577], "key_chains_contain": [67, 68], "sub_str": [67, 68], "join": [67, 68, 788, 794, 797, 832, 835, 956], "list_stack": [67, 68, 173], "dim": [67, 68, 125, 136, 165, 577, 630], "func": [67, 68, 164, 210, 211, 289, 333, 577, 588, 651, 662, 852, 865], "map_cont": [67, 68], "include_self": [67, 68], "possibi": [67, 68], "place": [67, 68, 141, 142, 143, 144, 145, 146, 151, 154, 155, 156, 157, 159, 160, 164, 166, 168, 175, 213, 214, 215, 217, 218, 219, 221, 222, 223, 225, 226, 227, 229, 230, 231, 232, 234, 235, 237, 238, 239, 241, 242, 244, 245, 247, 248, 249, 251, 252, 261, 264, 289, 334, 339, 340, 343, 353, 356, 358, 361, 378, 381, 398, 401, 402, 405, 410, 413, 435, 438, 518, 521, 534, 537, 550, 553, 554, 557, 563, 567, 568, 572, 577, 605, 619, 620, 621, 689, 692, 701, 702, 709, 711, 712, 714, 788, 802, 805, 806, 809, 822, 825, 870, 871, 874, 892, 893, 894, 898, 901, 902, 905, 912, 917, 920, 945, 946, 949], "matrix": [67, 68, 125, 135, 213, 232, 234, 242, 244, 245, 247, 577, 578, 581, 589, 689, 698, 702, 703, 705, 709, 711, 712, 714, 715, 717, 718, 720, 721, 723, 724, 727, 728, 730, 731, 732, 734, 735, 737, 741, 743, 744, 746, 748, 750, 751, 753, 754, 756, 760, 762, 769, 771], "p": [67, 68, 80, 81, 125, 133, 150, 151, 213, 232, 234, 577, 589, 590, 591, 592, 689, 697, 702, 728, 730, 766, 768], "integ": [67, 68, 164, 165, 172, 213, 214, 226, 252, 275, 278, 280, 339, 340, 343, 378, 381, 382, 385, 386, 389, 390, 393, 394, 397, 398, 401, 402, 405, 435, 438, 439, 442, 503, 506, 526, 529, 530, 533, 534, 537, 573, 576, 702, 731, 763, 765, 766, 768, 788, 827, 875, 877, 878, 885, 912, 917, 920, 921, 924, 925, 928, 929, 932, 933, 936, 937, 940, 941, 944, 945, 946, 949, 951, 954], "flatten": [67, 68, 577, 604, 702, 738, 740, 766, 768, 788, 814, 817, 822, 825, 887, 888, 889, 892, 893, 894, 898, 900], "left": [67, 68, 150, 151, 157, 165, 339, 386, 389, 702, 715, 717, 728, 730, 751, 753, 887, 888, 956], "broadcast": [67, 68, 155, 156, 157, 164, 165, 198, 199, 200, 201, 202, 203, 204, 207, 209, 213, 214, 215, 217, 218, 219, 221, 222, 223, 225, 226, 227, 229, 230, 231, 238, 239, 241, 242, 244, 245, 247, 248, 249, 251, 252, 258, 259, 260, 289, 334, 339, 340, 343, 345, 348, 349, 352, 353, 356, 358, 361, 362, 365, 366, 369, 370, 373, 374, 377, 378, 381, 382, 385, 386, 389, 390, 393, 394, 397, 398, 401, 402, 405, 406, 409, 410, 413, 414, 417, 419, 422, 423, 426, 427, 430, 431, 434, 435, 438, 439, 442, 443, 446, 447, 450, 451, 454, 455, 458, 459, 462, 463, 466, 467, 470, 471, 474, 475, 478, 479, 482, 483, 486, 487, 490, 491, 494, 495, 498, 499, 502, 503, 506, 507, 508, 509, 512, 514, 517, 518, 521, 522, 525, 526, 529, 530, 533, 534, 537, 538, 541, 542, 545, 546, 549, 550, 553, 554, 557, 558, 562, 563, 567, 568, 572, 573, 576, 577, 589, 590, 592, 595, 599, 600, 601, 603, 606, 609, 617, 630, 633, 634, 651, 684, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 700, 701, 702, 703, 705, 706, 708, 709, 711, 712, 714, 718, 720, 721, 723, 724, 727, 728, 730, 732, 734, 735, 737, 738, 740, 741, 743, 747, 748, 750, 751, 753, 754, 756, 757, 759, 760, 762, 763, 765, 766, 768, 769, 771, 772, 773, 776, 778, 781, 783, 786, 788, 789, 792, 794, 797, 798, 801, 802, 805, 806, 809, 810, 813, 814, 817, 818, 821, 822, 825, 828, 831, 832, 835, 836, 839, 840, 843, 844, 847, 870, 871, 874, 875, 876, 877, 878, 880, 881, 883, 886, 887, 888, 889, 891, 892, 900, 901, 907, 910, 912, 917, 920, 921, 924, 925, 928, 929, 932, 933, 936, 937, 940, 941, 944, 945, 946, 949, 951, 954], "correctli": [67, 68, 150, 159, 164, 165, 168, 174, 187, 702, 728, 730, 887, 888], "max_depth": [67, 68, 289, 293, 296, 303, 313, 317, 321, 577, 615, 852, 864], "multi_map": [67, 68, 164], "map_nest": [67, 68, 78, 79, 88, 89, 92, 93, 370, 372, 378, 380, 386, 388, 390, 392, 394, 396, 398, 400, 419, 421, 439, 441, 443, 445, 447, 449, 463, 465, 467, 469, 487, 489, 491, 493, 499, 501, 503, 505, 518, 520, 526, 528, 530, 532, 724, 726, 794, 796, 832, 834], "leftmost": [67, 68, 852, 865], "multi_map_in_static_method": [67, 68, 164], "fn_name": [67, 68], "num_arrai": [67, 68], "overwrite_at_key_chain": [67, 68], "overwrit": [67, 68, 167, 170, 289, 333], "target_dict": [67, 68], "return_dict": [67, 68], "prune_empti": [67, 68], "keep_non": [67, 68], "prune_key_chain": [67, 68], "key1": [67, 68, 174], "key2": [67, 68], "key3": [67, 68], "prune_key_from_key_chain": [67, 68], "absolut": [67, 68, 149, 339, 340, 343, 702, 747], "certain": [67, 68, 150, 187, 213, 214, 230, 231], "decid": [67, 68, 150, 852, 863], "prune_kei": [67, 68], "prune_keys_from_key_chain": [67, 68], "remove_key_length_limit": [67, 68], "remove_print_limit": [67, 68], "reshape_lik": [67, 68], "leading_shap": [67, 68], "return_cont": [67, 68], "restructur": [67, 68], "keep_orig": [67, 68], "transpos": [67, 68, 125, 127, 129, 131, 172, 175, 289, 320, 689, 691, 693, 695, 702, 735, 737, 741, 743, 956], "old": [67, 68, 150, 167], "keep": [67, 68, 150, 151, 158, 164, 171, 173, 175, 577, 649], "start": [67, 68, 149, 150, 151, 152, 153, 154, 156, 157, 165, 169, 170, 172, 173, 174, 186, 187, 213, 214, 230, 231, 289, 304], "restructure_key_chain": [67, 68], "keychain_map": [67, 68], "set_at_key_chain": [67, 68], "set_at_kei": [67, 68], "set_framework": [67, 68, 170, 172, 173, 175], "set_ivy_backend": [67, 68], "ivy_backend": [67, 68], "attribut": [67, 68, 156, 164, 165, 171, 172, 173, 174, 252, 272, 273, 274, 275, 289, 329], "show": [67, 68, 150, 151, 157, 167, 186, 187, 956], "show_sub_contain": [67, 68], "sub_cont_or_keychain": [67, 68], "shuffl": [67, 68, 875, 956], "seed_valu": [67, 68, 875, 885], "align": [67, 68, 150, 170, 172, 956, 962], "seed": [67, 68, 69, 70, 875, 956], "shuffle_h5_fil": [67, 68], "dataset": [67, 68, 173, 185, 956], "size_ordered_arrai": [67, 68], "keychain": [67, 68], "smallest": [67, 68, 252, 272, 275, 339, 402, 405], "largest": [67, 68, 186, 252, 272, 275, 702, 751, 753], "slice_kei": [67, 68], "key_slic": [67, 68], "all_depth": [67, 68], "slice_via_kei": [67, 68], "sort_by_kei": [67, 68], "num_or_size_split": [67, 68, 170, 788, 827], "with_remaind": [67, 68, 788, 827], "constitu": [67, 68, 175], "dimension": [67, 68, 213, 214, 222, 232, 234, 702, 706, 708, 709, 711, 724, 727, 732, 734, 738, 740, 741, 743, 763, 765, 766, 768, 788, 827, 887, 888, 889, 890, 912, 917, 920, 921, 924, 925, 928, 929, 932, 933, 936, 937, 940, 941, 944, 945, 946, 949, 951, 954], "evenli": [67, 68, 213, 214, 230, 231, 788, 827], "store": [67, 68, 137, 138, 156, 161, 163, 164, 170, 172, 173, 174, 577, 604, 651, 687, 702, 760, 762, 788, 827], "stop_gradi": [67, 68, 69, 70, 82, 83, 141, 142, 143, 144, 145, 146, 174, 289, 333, 651, 658, 659, 660, 661, 663, 664, 665, 666, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 848, 849, 850, 851, 956], "preserve_typ": [67, 68, 651, 684], "stop": [67, 68, 141, 142, 143, 144, 145, 146, 170, 187, 213, 214, 230, 231, 289, 304, 333, 651, 658, 660, 663, 665, 671, 673, 675, 677, 679, 681, 684, 848, 849, 850, 851], "alwai": [67, 68, 151, 152, 155, 156, 160, 161, 163, 164, 167, 168, 170, 172, 187, 252, 258, 339, 353, 356, 509, 512, 577, 621, 651, 667, 669, 684], "structural_diff": [67, 68], "to_devic": [67, 68, 289, 308], "move": [67, 68, 151, 155, 289, 334], "cuda": [67, 68, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 145, 147, 148, 170, 173, 187, 213, 230, 231, 289, 298, 305, 330, 577, 605, 606, 609, 630, 633, 634, 875, 876, 877, 878, 881, 883], "cpu": [67, 68, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 145, 147, 148, 151, 166, 187, 213, 230, 231, 289, 308, 309, 311, 325, 328, 330, 334, 335, 337, 338, 577, 605, 606, 609, 630, 633, 634, 875, 876, 877, 878, 880, 881, 883], "target": [67, 68, 154, 169, 173, 174, 175, 289, 307, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 956], "to_dict": [67, 68], "to_disk_as_hdf5": [67, 68, 173], "starting_index": [67, 68], "max_batch_s": [67, 68], "read": [67, 68, 153, 956], "r": [67, 68, 150, 577, 586, 649, 702, 744, 746, 769, 771], "w": [67, 68, 82, 83, 170, 173, 174, 577, 586, 651, 653, 656, 658, 660, 661, 663, 665, 666, 671, 673, 674, 675, 677, 678, 679, 681, 682, 689, 690, 691, 692, 693, 694, 695, 696], "later": [67, 68, 577, 588], "append": [67, 68, 153, 159, 170, 173, 339, 386, 389, 702, 712, 714, 724, 727], "to_disk_as_json": [67, 68, 173], "to_disk_as_pickl": [67, 68, 173], "to_flat_list": [67, 68], "to_iter": [67, 68, 164], "leaf_keys_onli": [67, 68], "to_iterator_kei": [67, 68], "to_iterator_valu": [67, 68], "to_json": [67, 68], "to_list": [67, 68, 577, 956], "to_multi_dev": [67, 68], "multidevcontain": [67, 68, 69], "distributedarrai": [67, 68], "to_numpi": [67, 68, 173, 577, 956], "update_backend": [67, 68], "to_raw": [67, 68], "raw": [67, 68, 156], "trim_kei": [67, 68], "max_length": [67, 68], "try_kc": [67, 68], "tri": [67, 68], "arbitrari": [67, 68, 159, 160, 164, 167, 168, 174, 187, 213, 232, 234, 252, 259, 280, 289, 318, 319, 321], "concatten": [67, 68, 289, 318, 319, 320, 321, 333], "unstack": [67, 68, 170, 173, 577, 956], "dim_siz": [67, 68, 289], "update_config": [67, 68], "global_norm": [67, 68, 80, 81, 590, 591], "vector": [67, 68, 125, 135, 186, 213, 232, 234, 577, 590, 592, 689, 698, 702, 706, 708, 715, 717, 724, 727, 738, 740, 751, 753, 754, 756, 763, 765, 766, 768, 769, 771], "with_default_key_color": [67, 68], "with_entries_as_list": [67, 68], "with_ivy_backend": [67, 68], "with_key_length_limit": [67, 68, 173], "with_print_ind": [67, 68, 173], "with_print_limit": [67, 68, 173], "with_print_line_spac": [67, 68], "containerwithcr": [69, 70, 72], "containerwithdatatyp": [69, 70, 74], "containerwithdevic": [69, 70, 76], "containerwithelementwis": [69, 70, 78, 164], "containerwithgener": [69, 70, 80], "containerwithgradi": [69, 70, 82], "containerwithimag": [69, 70, 84], "containerwithlay": [69, 70, 86], "containerwithlinearalgebra": [69, 70, 88], "containerwithloss": [69, 70, 90], "containerwithmanipul": [69, 70, 92, 152], "containerwithnorm": [69, 70, 94], "containerwithrandom": [69, 70, 96], "containerwithsearch": [69, 70, 98], "containerwithset": [69, 70, 100], "containerwithsort": [69, 70, 102], "containerwithstatist": [69, 70, 104], "containerwithutil": [69, 70, 106], "__add__": [69, 70, 156, 157, 163, 164, 168, 172], "special": [69, 70, 152, 155, 156, 157, 163, 168, 339, 340, 343, 345, 348, 349, 352, 353, 356, 358, 361, 362, 365, 366, 369, 370, 373, 398, 401, 402, 405, 406, 409, 410, 413, 427, 430, 431, 434, 435, 438, 471, 474, 475, 478, 483, 486, 487, 490, 509, 512, 526, 529, 530, 533, 534, 537, 538, 541, 542, 545, 546, 549, 550, 553, 563, 567, 568, 572, 573, 576, 912, 917, 920, 921, 924, 925, 928, 933, 936, 937, 940, 941, 944], "__radd__": [69, 70, 156, 157], "arang": [69, 70, 165, 213, 230, 231, 912, 913, 916, 956], "arg_info": [69, 70, 577], "arg_nam": [69, 70, 577], "argmax": [69, 70, 887, 956], "argmin": [69, 70, 887, 956], "array_equ": [69, 70, 577], "as_ivy_dev": [69, 70, 172, 289], "as_ivy_dtyp": [69, 70, 252], "as_native_dev": [69, 70, 289], "as_native_dtyp": [69, 70, 252], "assert_supports_inplac": [69, 70, 577], "astyp": [69, 70, 165, 167, 252], "broadcast_arrai": [69, 70, 252], "broadcast_to": [69, 70, 165, 252], "cache_fn": [69, 70, 160, 577], "clear_mem_on_dev": [69, 70, 289], "clip_matrix_norm": [69, 70, 577], "closest_valid_dtyp": [69, 70, 252], "container_typ": [69, 70, 577], "conv1d": [69, 70, 125, 689], "conv1d_transpos": [69, 70, 689], "conv2d": [69, 70, 125, 689, 956], "conv2d_transpos": [69, 70, 689], "conv3d": [69, 70, 125, 689], "conv3d_transpos": [69, 70, 689], "copy_arrai": [69, 70, 577], "cumprod": [69, 70, 175, 577], "cumsum": [69, 70, 577, 956], "current_backend_str": [69, 70, 577], "default_devic": [69, 70, 166, 170, 289, 327, 330, 337], "default_dtyp": [69, 70, 160, 165, 252], "default_float_dtyp": [69, 70, 165, 252], "default_int_dtyp": [69, 70, 165, 252], "depthwise_conv2d": [69, 70, 689, 956], "dev_clone_arrai": [69, 70, 289], "dev_clone_it": [69, 70, 289], "dev_clone_nest": [69, 70, 289], "dev_dist_arrai": [69, 70, 289], "dev_dist_it": [69, 70, 289], "dev_dist_nest": [69, 70, 289], "dev_unifi": [69, 70, 289], "dev_unify_arrai": [69, 70, 289], "dev_unify_it": [69, 70, 289], "dev_unify_nest": [69, 70, 289], "dev_util": [69, 70, 166, 289], "dropout": [69, 70, 125, 136, 173, 689], "dtype_bit": [69, 70, 252], "execute_with_gradi": [69, 70, 164, 173, 174, 175, 187, 651, 956], "ey": [69, 70, 175, 213, 689, 692, 696], "finfo": [69, 70, 252], "floormod": [69, 70, 577, 956], "fourier_encod": [69, 70, 577], "function_supported_dtyp": [69, 70, 252], "function_unsupported_dtyp": [69, 70, 252], "gelu": [69, 70, 111, 198], "get_all_arrays_in_memori": [69, 70, 577], "get_all_ivy_arrays_on_dev": [69, 70, 166, 289], "get_min_bas": [69, 70, 577], "get_min_denomin": [69, 70, 577], "get_num_dim": [69, 70, 577, 956], "get_referrers_recurs": [69, 70, 577], "gpu_is_avail": [69, 70, 289], "handle_nest": [69, 70, 160, 164, 188], "handle_out_argu": [69, 70, 162, 165, 166, 167, 168, 188], "iinfo": [69, 70, 252], "indices_wher": [69, 70, 577, 956], "infer_devic": [69, 70, 165, 166, 168, 188], "infer_dtyp": [69, 70, 165, 166, 168, 188], "inplace_arrays_support": [69, 70, 577], "inplace_decr": [69, 70, 577], "inplace_incr": [69, 70, 577], "inplace_variables_support": [69, 70, 577], "inputs_to_native_arrai": [69, 70, 163, 188], "invalid_dtyp": [69, 70, 252], "is_float_dtyp": [69, 70, 252], "is_int_dtyp": [69, 70, 252, 577, 647], "is_ivy_contain": [69, 70, 577], "leaky_relu": [69, 70, 198, 956], "linear": [69, 70, 125, 126, 127, 128, 129, 130, 131, 132, 156, 170, 173, 174, 175, 198, 199, 200, 201, 577, 604, 689, 697, 748, 750, 956], "linspac": [69, 70, 170, 213, 214, 956], "logspac": [69, 70, 170, 213], "lstm_updat": [69, 70, 170, 689], "match_kwarg": [69, 70, 577], "matrix_pow": [69, 70, 702], "multi_head_attent": [69, 70, 164, 167, 689], "multinomi": [69, 70, 875], "nonzero": [69, 70, 339, 353, 356, 509, 512, 887], "num_arrays_in_memori": [69, 70, 577], "num_cpu_cor": [69, 70, 166, 289], "num_gpu": [69, 70, 159, 166, 289], "num_ivy_arrays_on_dev": [69, 70, 289], "one_hot": [69, 70, 175, 577, 956], "outputs_to_ivy_arrai": [69, 70, 163, 165, 166, 168, 188], "percent_used_mem_on_dev": [69, 70, 289], "print_all_arrays_in_memori": [69, 70, 577], "print_all_ivy_arrays_on_dev": [69, 70, 289], "promote_typ": [69, 70, 252], "randint": [69, 70, 96, 97, 875, 879, 956], "random_norm": [69, 70, 689, 692, 695, 696, 702, 751, 753, 875, 892, 893], "result_typ": [69, 70, 165, 252], "scaled_dot_product_attent": [69, 70, 689], "scatter_flat": [69, 70, 577], "scatter_nd": [69, 70, 172, 577, 956], "set_default_devic": [69, 70, 166, 289, 337], "set_default_dtyp": [69, 70, 160, 165, 252], "set_default_float_dtyp": [69, 70, 165, 252], "set_default_int_dtyp": [69, 70, 165, 252], "set_min_bas": [69, 70, 577], "set_min_denomin": [69, 70, 577], "set_queue_timeout": [69, 70, 577], "set_split_factor": [69, 70, 289], "set_tmp_dir": [69, 70, 577], "set_with_grad": [69, 70, 651], "shape_to_tupl": [69, 70, 165, 577], "sigmoid": [69, 70, 170, 173, 174, 198, 956], "slogdet": [69, 70, 702], "split_factor": [69, 70, 289, 298], "split_func_cal": [69, 70, 289], "stable_divid": [69, 70, 160, 577], "stable_pow": [69, 70, 577], "static_aco": [69, 70], "static_acosh": [69, 70], "static_arang": [69, 70], "static_arg_info": [69, 70], "static_arg_nam": [69, 70], "static_argmax": [69, 70], "static_argmin": [69, 70], "static_arrai": [69, 70], "static_array_equ": [69, 70], "static_arrays_equ": [69, 70], "static_as_ivy_dev": [69, 70], "static_as_ivy_dtyp": [69, 70], "static_as_native_dev": [69, 70], "static_as_native_dtyp": [69, 70], "static_asarrai": [69, 70], "static_asin": [69, 70], "static_asinh": [69, 70], "static_assert_supports_inplac": [69, 70], "static_astyp": [69, 70], "static_atan": [69, 70], "static_atan2": [69, 70], "static_atanh": [69, 70], "static_bitwise_and": [69, 70], "static_bitwise_invert": [69, 70], "static_bitwise_left_shift": [69, 70], "static_bitwise_or": [69, 70], "static_bitwise_right_shift": [69, 70], "static_bitwise_xor": [69, 70], "static_broadcast_arrai": [69, 70], "static_broadcast_to": [69, 70], "static_cache_fn": [69, 70], "static_ceil": [69, 70], "static_choleski": [69, 70], "static_clear_mem_on_dev": [69, 70], "static_clip_matrix_norm": [69, 70], "static_clip_vector_norm": [69, 70], "static_closest_valid_dtyp": [69, 70], "static_concat": [69, 70], "static_constant_pad": [69, 70], "static_container_typ": [69, 70], "static_conv1d": [69, 70], "static_conv1d_transpos": [69, 70], "static_conv2d": [69, 70], "static_conv2d_transpos": [69, 70], "static_conv3d": [69, 70], "static_conv3d_transpos": [69, 70], "static_copy_arrai": [69, 70], "static_co": [69, 70], "static_cosh": [69, 70], "static_cross": [69, 70], "static_cumprod": [69, 70], "static_cumsum": [69, 70], "static_current_backend": [69, 70], "static_current_backend_str": [69, 70], "static_default": [69, 70], "static_default_devic": [69, 70], "static_default_dtyp": [69, 70], "static_default_float_dtyp": [69, 70], "static_default_int_dtyp": [69, 70], "static_depthwise_conv2d": [69, 70], "static_det": [69, 70], "static_dev": [69, 70], "static_dev_clon": [69, 70], "static_dev_clone_arrai": [69, 70], "static_dev_clone_it": [69, 70], "static_dev_clone_nest": [69, 70], "static_dev_dist": [69, 70], "static_dev_dist_arrai": [69, 70], "static_dev_dist_it": [69, 70], "static_dev_dist_nest": [69, 70], "static_dev_unifi": [69, 70], "static_dev_unify_arrai": [69, 70], "static_dev_unify_it": [69, 70], "static_dev_unify_nest": [69, 70], "static_dev_util": [69, 70], "static_diagon": [69, 70], "static_dropout": [69, 70], "static_dtyp": [69, 70], "static_dtype_bit": [69, 70], "static_eigh": [69, 70], "static_eigvalsh": [69, 70], "static_einops_rearrang": [69, 70], "static_einops_reduc": [69, 70], "static_einops_repeat": [69, 70], "static_einsum": [69, 70], "static_empti": [69, 70], "static_empty_lik": [69, 70], "static_equ": [69, 70], "static_erf": [69, 70], "static_execute_with_gradi": [69, 70], "static_exist": [69, 70], "static_exp": [69, 70], "static_expand_dim": [69, 70], "static_expm1": [69, 70], "static_ey": [69, 70], "static_finfo": [69, 70], "static_flip": [69, 70], "static_floor": [69, 70], "static_floor_divid": [69, 70], "static_floormod": [69, 70], "static_fourier_encod": [69, 70], "static_from_dlpack": [69, 70], "static_ful": [69, 70], "static_full_lik": [69, 70], "static_function_supported_dtyp": [69, 70], "static_function_unsupported_dtyp": [69, 70], "static_gath": [69, 70], "static_gelu": [69, 70], "static_get_all_arrays_in_memori": [69, 70], "static_get_all_ivy_arrays_on_dev": [69, 70], "static_get_min_bas": [69, 70], "static_get_min_denomin": [69, 70], "static_get_num_dim": [69, 70], "static_get_referrers_recurs": [69, 70], "static_gpu_is_avail": [69, 70], "static_great": [69, 70], "static_greater_equ": [69, 70], "static_handle_nest": [69, 70], "static_handle_out_argu": [69, 70], "static_has_nan": [69, 70], "static_iinfo": [69, 70], "static_indices_wher": [69, 70], "static_infer_devic": [69, 70], "static_infer_dtyp": [69, 70], "static_inplace_arrays_support": [69, 70], "static_inplace_decr": [69, 70], "static_inplace_incr": [69, 70], "static_inplace_upd": [69, 70], "static_inplace_variables_support": [69, 70], "static_inputs_to_native_arrai": [69, 70], "static_inv": [69, 70], "static_invalid_dtyp": [69, 70], "static_is_arrai": [69, 70], "static_is_float_dtyp": [69, 70], "static_is_int_dtyp": [69, 70], "static_is_ivy_arrai": [69, 70], "static_is_ivy_contain": [69, 70], "static_is_native_arrai": [69, 70], "static_isfinit": [69, 70], "static_isinf": [69, 70], "static_isnan": [69, 70], "static_layer_norm": [69, 70], "static_leaky_relu": [69, 70], "static_less": [69, 70], "static_less_equ": [69, 70], "static_linear": [69, 70], "static_linspac": [69, 70], "static_log": [69, 70], "static_log10": [69, 70], "static_log1p": [69, 70], "static_log2": [69, 70], "static_logaddexp": [69, 70], "static_logical_and": [69, 70], "static_logical_not": [69, 70], "static_logical_or": [69, 70], "static_logical_xor": [69, 70], "static_logspac": [69, 70], "static_lstm_upd": [69, 70], "static_match_kwarg": [69, 70], "static_matmul": [69, 70], "static_matrix_norm": [69, 70], "static_matrix_pow": [69, 70], "static_matrix_rank": [69, 70], "static_matrix_transpos": [69, 70], "static_max": [69, 70], "static_maximum": [69, 70], "static_mean": [69, 70], "static_meshgrid": [69, 70], "static_min": [69, 70], "static_minimum": [69, 70], "static_multi_head_attent": [69, 70], "static_multinomi": [69, 70], "static_multiprocess": [69, 70], "static_native_arrai": [69, 70], "static_neg": [69, 70], "static_nonzero": [69, 70], "static_not_equ": [69, 70], "static_num_arrays_in_memori": [69, 70], "static_num_cpu_cor": [69, 70], "static_num_gpu": [69, 70], "static_num_ivy_arrays_on_dev": [69, 70], "static_one_hot": [69, 70], "static_on": [69, 70], "static_ones_lik": [69, 70], "static_out": [69, 70], "static_outputs_to_ivy_arrai": [69, 70], "static_percent_used_mem_on_dev": [69, 70], "static_permute_dim": [69, 70], "static_pinv": [69, 70], "static_posit": [69, 70], "static_pow": [69, 70], "static_print_all_arrays_in_memori": [69, 70], "static_print_all_ivy_arrays_on_dev": [69, 70], "static_prod": [69, 70], "static_promote_typ": [69, 70], "static_qr": [69, 70], "static_queue_timeout": [69, 70], "static_random_norm": [69, 70], "static_relu": [69, 70], "static_remaind": [69, 70], "static_repeat": [69, 70], "static_reshap": [69, 70], "static_result_typ": [69, 70], "static_round": [69, 70], "static_scaled_dot_product_attent": [69, 70], "static_scatter_flat": [69, 70], "static_scatter_nd": [69, 70], "static_se": [69, 70], "static_set_default_devic": [69, 70], "static_set_default_dtyp": [69, 70], "static_set_default_float_dtyp": [69, 70], "static_set_default_int_dtyp": [69, 70], "static_set_min_bas": [69, 70], "static_set_min_denomin": [69, 70], "static_set_queue_timeout": [69, 70], "static_set_split_factor": [69, 70], "static_set_tmp_dir": [69, 70], "static_set_with_grad": [69, 70], "static_shap": [69, 70], "static_shape_to_tupl": [69, 70], "static_shuffl": [69, 70], "static_sigmoid": [69, 70], "static_sign": [69, 70], "static_sin": [69, 70], "static_sinh": [69, 70], "static_slogdet": [69, 70], "static_softmax": [69, 70], "static_solv": [69, 70], "static_split": [69, 70], "static_split_factor": [69, 70], "static_split_func_cal": [69, 70], "static_sqrt": [69, 70], "static_squar": [69, 70], "static_squeez": [69, 70], "static_stable_divid": [69, 70], "static_stable_pow": [69, 70], "static_stack": [69, 70], "static_std": [69, 70], "static_stop_gradi": [69, 70], "static_sum": [69, 70], "static_supports_inplac": [69, 70], "static_svd": [69, 70], "static_svdv": [69, 70], "static_swapax": [69, 70], "static_tensordot": [69, 70], "static_til": [69, 70], "static_tmp_dir": [69, 70], "static_to_devic": [69, 70], "static_to_list": [69, 70], "static_to_native_arrays_and_back": [69, 70], "static_to_numpi": [69, 70], "static_to_scalar": [69, 70], "static_total_mem_on_dev": [69, 70], "static_tpu_is_avail": [69, 70], "static_trac": [69, 70], "static_tril": [69, 70], "static_triu": [69, 70], "static_trunc": [69, 70], "static_try_else_non": [69, 70], "static_type_promote_arrai": [69, 70], "static_unique_al": [69, 70], "static_unique_invers": [69, 70], "static_unique_valu": [69, 70], "static_unset_default_devic": [69, 70], "static_unset_default_dtyp": [69, 70], "static_unset_default_float_dtyp": [69, 70], "static_unset_default_int_dtyp": [69, 70], "static_unset_with_grad": [69, 70], "static_unstack": [69, 70], "static_used_mem_on_dev": [69, 70], "static_valid_dtyp": [69, 70], "static_value_is_nan": [69, 70], "static_var": [69, 70], "static_vari": [69, 70], "static_variable_data": [69, 70], "static_vecdot": [69, 70], "static_vector_norm": [69, 70], "static_vector_to_skew_symmetric_matrix": [69, 70], "static_wher": [69, 70], "static_with_grad": [69, 70], "static_zero_pad": [69, 70], "static_zero": [69, 70], "static_zeros_lik": [69, 70], "supports_inplac": [69, 70, 577], "tmp_dir": [69, 70, 577], "to_native_arrays_and_back": [69, 70, 162, 168, 188], "to_scalar": [69, 70, 577], "total_mem_on_dev": [69, 70, 166, 289], "tpu_is_avail": [69, 70, 289], "try_else_non": [69, 70, 577], "type_promote_arrai": [69, 70, 252], "unique_al": [69, 70, 892], "unique_invers": [69, 70, 892], "unique_valu": [69, 70, 892], "unset_default_devic": [69, 70, 289], "unset_default_dtyp": [69, 70, 252], "unset_default_float_dtyp": [69, 70, 252], "unset_default_int_dtyp": [69, 70, 252], "unset_with_grad": [69, 70, 651], "used_mem_on_dev": [69, 70, 289], "valid_dtyp": [69, 70, 252], "value_is_nan": [69, 70, 577], "variable_data": [69, 70, 651], "with_grad": [69, 70, 651, 683], "at_dev": [69, 71, 289, 302, 303], "int32": [74, 75, 165, 252, 261, 263, 264, 265, 273, 577, 646, 788, 802, 805, 912, 929, 932, 937, 940], "int64": [74, 75, 165, 252, 261, 263, 264, 265, 273, 339, 394, 397, 887, 888, 889, 912, 929, 932, 937, 940], "static_can_cast": [74, 75, 261], "from_": [74, 75, 252, 261, 264, 265], "static_ab": [78, 79, 340], "static_add": [78, 79, 156, 157, 164, 353], "static_divid": [78, 79, 164, 414], "static_multipli": [78, 79, 164, 509], "static_subtract": [78, 79, 164, 558], "static_tan": [78, 79, 157, 164, 563], "143": [78, 79, 157, 339, 563, 564, 566, 567], "16": [78, 79, 96, 97, 151, 157, 173, 339, 563, 564, 566, 567, 689, 695, 702, 712, 714, 738, 740, 877, 879, 887, 891, 912, 913, 916], "38": [78, 79, 157, 339, 563, 564, 566, 567], "static_tanh": [78, 79, 568], "76": [78, 79, 339, 410, 413, 568, 569, 651, 653, 656, 702, 757, 759, 912, 913, 916], "96": [78, 79, 339, 563, 567, 568, 569, 651, 653, 656, 702, 738, 740, 912, 913, 916], "995": [78, 79, 339, 568, 569, 571, 572], "9999": [78, 79, 568, 569], "static_all_equ": [80, 81, 578, 580], "clip_vector_norm": [80, 81, 577], "max_norm": [80, 81, 577, 589, 590, 591, 592], "static_gather_nd": [80, 81, 606], "adam_upd": [82, 83, 174, 651], "lr": [82, 83, 141, 142, 143, 144, 145, 146, 173, 174, 651, 658, 659, 660, 661, 663, 664, 665, 666, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682], "mw_tm1": [82, 83, 651, 658, 659, 660, 661, 671, 672, 673, 674], "vw_tm1": [82, 83, 651, 658, 659, 660, 661, 671, 672, 673, 674], "gradient_descent_upd": [82, 83, 651, 848, 849, 850, 851, 956], "is_vari": [82, 83, 167, 651], "lamb_upd": [82, 83, 651], "max_trust_ratio": [82, 83, 141, 143, 651, 671, 672, 673, 674], "decay_lambda": [82, 83, 141, 143, 144, 651, 671, 672, 673, 674, 675, 676, 677, 678], "lars_upd": [82, 83, 651], "optimizer_upd": [82, 83, 651], "effective_grad": [82, 83, 651, 679, 680, 681, 682], "static_adam_step": [82, 83, 653], "87": [82, 83, 96, 97, 651, 653, 656, 657, 877, 879], "976": [82, 83, 339, 568, 572, 651, 653, 656, 657], "static_adam_upd": [82, 83, 658], "static_gradient_descent_upd": [82, 83, 663], "static_is_vari": [82, 83, 667], "static_lamb_upd": [82, 83, 671], "static_lars_upd": [82, 83, 675], "static_optimizer_upd": [82, 83, 679], "static_binary_cross_entropi": [90, 91, 773], "static_cross_entropi": [90, 91, 778], "static_sparse_cross_entropi": [90, 91, 783], "static_clip": [92, 93, 789], "static_rol": [92, 93, 157, 164, 789, 793, 822], "random_uniform": [96, 97, 166, 174, 875, 956], "static_randint": [96, 97, 877], "20": [96, 97, 172, 339, 398, 401, 427, 430, 534, 537, 550, 553, 702, 712, 714, 738, 740, 757, 759, 875, 877, 878, 879, 887, 890, 891, 912, 913, 916], "15": [96, 97, 150, 157, 339, 378, 381, 534, 537, 689, 692, 702, 712, 714, 738, 740, 757, 759, 788, 822, 825, 870, 871, 874, 875, 877, 878, 879, 887, 890, 892, 893, 912, 913, 916], "12": [96, 97, 150, 157, 164, 339, 378, 381, 398, 401, 410, 413, 534, 537, 577, 595, 613, 651, 653, 656, 702, 712, 714, 738, 740, 757, 759, 788, 806, 809, 814, 817, 822, 825, 870, 871, 874, 875, 877, 878, 879, 887, 891, 892, 893, 912, 913, 916], "40": [96, 97, 339, 410, 413, 550, 553, 702, 738, 740, 877, 879, 912, 913, 916], "gpu": [96, 97, 151, 166, 172, 187, 289, 308, 311, 324, 326, 330, 332, 337, 877, 879], "62": [96, 97, 877, 879], "52": [96, 97, 651, 653, 656, 702, 738, 740, 877, 879, 892, 893, 912, 913, 916], "95": [96, 97, 651, 653, 656, 877, 879], "37": [96, 97, 339, 563, 567, 870, 871, 874, 877, 879], "42": [96, 97, 175, 198, 204, 207, 651, 653, 656, 702, 738, 740, 875, 877, 879, 885, 912, 913, 916], "14": [96, 97, 153, 157, 164, 339, 398, 401, 651, 653, 656, 689, 701, 702, 712, 714, 738, 740, 877, 879, 892, 893, 912, 913, 916], "13": [96, 97, 157, 164, 339, 378, 381, 398, 401, 410, 413, 550, 553, 577, 595, 651, 653, 656, 689, 701, 702, 712, 714, 738, 740, 870, 871, 874, 877, 879, 887, 891, 892, 893, 912, 913, 916], "static_random_uniform": [96, 97, 881], "static_unique_count": [100, 101, 894], "classivi": [100, 101, 788, 827, 892, 894, 895, 897, 898], "static_argsort": [102, 103, 902], "static_sort": [102, 103, 907], "static_al": [106, 107, 946], "static_ani": [106, 107, 951], "add_ivy_container_instance_method": 108, "containerexampl": [108, 109], "neural": [111, 125, 186, 689, 956], "geglu": 111, "to_ivy_modul": [114, 175], "native_modul": [114, 115], "native_module_class": [114, 115], "trainabl": [114, 115, 137, 138, 147, 156, 171, 173, 174, 651, 667, 669], "requir": [114, 115, 150, 153, 155, 156, 157, 159, 162, 163, 165, 166, 168, 172, 187, 210, 211, 339, 550, 553, 702, 715, 717, 788, 832, 835], "dedic": [114, 115, 168, 172, 174, 651, 687], "constant": [116, 117, 121, 124, 137, 138, 139, 140, 155, 160, 174, 175, 187, 289, 298, 299, 788, 798, 801, 852, 858, 870, 871, 874], "create_vari": [116, 174], "var_shap": [116, 174], "fan_out": [116, 174], "fan_in": [116, 174], "firstlayersiren": 116, "glorotuniform": [116, 125, 126, 127, 128, 129, 130, 131, 132, 134, 135, 174], "kaimingnorm": [116, 120], "fan_mod": [116, 174], "negative_slop": 116, "Ones": 116, "siren": 116, "w0": [116, 122], "30": [116, 122, 339, 534, 537, 702, 738, 740, 912, 913, 916], "numer": [116, 155, 174, 213, 232, 234, 252, 258, 339, 340, 343, 353, 356, 402, 405, 414, 417, 431, 434, 435, 438, 439, 442, 451, 454, 455, 458, 459, 462, 463, 466, 495, 498, 499, 502, 509, 512, 514, 517, 518, 521, 526, 529, 530, 533, 538, 541, 554, 557, 558, 562, 573, 576, 577, 612, 613, 635, 636, 641, 642, 702, 706, 708, 724, 727, 738, 740, 751, 753, 757, 759, 760, 762, 763, 765, 875, 886, 887, 888, 889, 912, 917, 920, 929, 932, 937, 940], "power": [116, 172, 173, 174, 339, 394, 397, 427, 430, 526, 529, 577, 612, 635, 642, 702, 731], "gain": [116, 151, 169, 174], "input_channel": [125, 126, 127, 128, 129, 130, 131, 134, 135, 170, 174], "output_channel": [125, 126, 127, 128, 129, 130, 131, 134, 135, 174], "filter_s": [125, 126, 127], "stride": [125, 126, 127, 128, 129, 130, 131, 132, 689, 690, 691, 692, 693, 694, 695, 696], "pad": [125, 126, 127, 128, 129, 130, 131, 132, 577, 604, 689, 690, 691, 692, 693, 694, 695, 696, 788, 798, 801, 844, 847], "weight_initi": [125, 126, 127, 128, 129, 130, 131, 132, 134, 135, 174], "bias_initi": [125, 126, 127, 128, 129, 130, 131, 132, 135, 174], "data_format": [125, 126, 127, 128, 129, 130, 131, 132, 689, 690, 691, 692, 693, 694, 695, 696], "nwc": [125, 126, 127, 689, 690, 691], "dilat": [125, 126, 127, 128, 129, 130, 131, 132, 689, 690, 691, 692, 693, 694, 695, 696], "1d": [125, 126, 127], "convolut": [125, 126, 127, 128, 129, 130, 131, 132, 689, 690, 691, 692, 693, 694, 695, 696], "channel": [125, 126, 127, 128, 129, 130, 131, 132, 134, 135, 150, 151, 152, 153, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 577, 604], "filter": [125, 126, 127, 128, 129, 130, 131, 132, 153, 689, 690, 691, 692, 693, 694, 695, 696], "slide": [125, 126, 127, 128, 129, 130, 131, 132, 689, 690, 691, 692, 693, 694, 695, 696], "window": [125, 126, 127, 128, 129, 130, 131, 132, 151, 153, 689, 690, 691, 692, 693, 694, 695, 696], "valid": [125, 126, 127, 128, 129, 130, 131, 132, 165, 170, 252, 266, 689, 690, 691, 692, 693, 694, 695, 696, 788, 832, 835, 945, 946, 949, 951, 954], "per": [125, 126, 127, 128, 129, 130, 131, 132, 151, 173, 289, 689, 690, 691, 692, 693, 694, 695, 696], "weight": [125, 126, 127, 128, 129, 130, 131, 132, 134, 135, 137, 138, 141, 143, 144, 160, 164, 174, 175, 651, 653, 656, 658, 660, 663, 665, 671, 673, 675, 677, 679, 681, 689, 698, 699, 701], "bia": [125, 126, 127, 128, 129, 130, 131, 132, 135, 170, 174, 689, 698, 699], "ncw": [125, 126, 127, 689, 690, 691], "construct": [125, 126, 127, 128, 129, 130, 131, 132, 134, 135, 136, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 170, 171, 174, 175, 788, 840, 843], "conv1dtranspos": 125, "output_shap": [125, 127, 129, 131, 689, 691, 693, 695], "filter_shap": [125, 128, 129, 130, 131, 132], "nhwc": [125, 128, 129, 132, 689, 692, 693, 696], "2d": [125, 128, 129, 132, 702, 747], "nchw": [125, 128, 129, 132, 689, 692, 693, 696], "conv2dtranspos": 125, "ndhwc": [125, 130, 131, 689, 694, 695], "3d": [125, 130, 131, 186], "ncdhw": [125, 130, 131, 689, 694, 695], "conv3dtranspos": 125, "depthwiseconv2d": 125, "num_channel": [125, 132], "depthwis": [125, 132, 689, 696], "prob": [125, 133, 689, 697, 875, 876], "randomli": [125, 133, 689, 697], "sampl": [125, 133, 159, 689, 697, 875, 876, 880, 881, 883, 912, 933, 936, 941, 944], "bernoul": [125, 133], "lstm": [125, 170, 689, 699], "num_lay": [125, 134], "return_sequ": [125, 134], "return_st": [125, 134], "cell": [125, 134, 689, 699], "latest": [125, 134, 150, 152, 153, 156, 187, 213, 214, 215, 217, 218, 219, 221, 222, 223, 225, 226, 227, 229, 230, 238, 239, 241, 242, 244, 245, 247, 248, 249, 251, 252, 261, 264, 339, 340, 343, 358, 361, 398, 401, 402, 405, 410, 413, 435, 438, 518, 521, 550, 553, 554, 557, 702, 712, 714, 788, 802, 805, 822, 825, 892, 893, 894, 898, 901, 902, 905, 912, 917, 920], "timestep": [125, 134, 170, 689, 699], "hidden": [125, 134, 174, 689, 699], "get_initial_st": [125, 134], "batch_shap": [125, 134, 170, 172, 175, 577, 630, 689, 699, 700, 701, 702, 769, 771, 875, 876], "explicitli": [125, 134, 136, 137, 138, 156, 160, 161, 163, 164, 167, 170, 187, 702, 715, 717], "with_bia": [125, 135, 174], "refer": [125, 135, 150, 151, 159, 160, 165, 168, 187, 213, 222, 339, 431, 434, 479, 482, 651, 653, 656, 658, 660, 702, 763, 765, 769, 771, 912, 933, 936, 941, 944, 945, 946, 949, 951, 954], "dens": [125, 135], "receiv": [125, 135, 151, 159, 165, 166, 289, 298, 299, 577, 584, 627], "multiheadattent": 125, "query_dim": [125, 136], "num_head": [125, 136, 164, 689, 700], "head_dim": [125, 136], "64": [125, 136, 150, 173, 174, 339, 550, 553, 554, 557, 689, 695, 696, 702, 738, 740, 912, 913, 916, 956], "dropout_r": [125, 136], "context_dim": [125, 136], "with_to_q_fn": [125, 136], "with_to_kv_fn": [125, 136], "with_to_out_fn": [125, 136], "build_mod": [125, 136, 137, 138], "on_init": [125, 136, 137, 138], "multi": [125, 136, 157, 164, 169, 187, 689, 700, 702, 706, 708, 956, 962], "head": [125, 136, 150, 164, 689, 700, 956], "rate": [125, 136, 141, 142, 143, 144, 145, 146, 651, 658, 660, 663, 665, 671, 673, 675, 677, 679, 681, 848, 849, 850, 851], "context": [125, 136, 151, 157, 164, 165, 166, 289, 577, 628, 689, 700], "measur": [125, 136, 164, 689, 700], "dot": [125, 136, 164, 689, 700, 701, 702, 757, 759, 763, 765], "product": [125, 136, 164, 339, 509, 512, 577, 595, 689, 700, 701, 702, 706, 708, 724, 727, 738, 740, 757, 759, 763, 765, 912, 913, 916, 929, 932], "final": [125, 136, 151, 156, 157, 160, 163, 165, 167, 170, 172, 173, 213, 230, 231, 577, 604], "built": [125, 136, 137, 138, 150, 171, 213, 214, 289], "__call__": [125, 136, 137, 138], "run": [125, 136, 137, 138, 150, 153, 158, 159, 161, 168, 170, 171, 172, 173, 174, 175, 186, 187, 289, 298, 651, 653, 656, 658, 660, 671, 673, 848, 849, 850, 851], "compile_on_next_step": [137, 138, 141, 142, 143, 144, 145, 146, 174], "store_var": [137, 138], "arg_stateful_idx": [137, 138], "kwarg_stateful_idx": [137, 138], "fallback_to_non_compil": [137, 138, 141, 145], "with_partial_v": [137, 138], "initialz": [137, 138], "compil": [137, 138, 141, 142, 143, 144, 145, 146, 155, 164, 169, 171, 187, 956], "forward": [137, 138, 141, 145, 156, 175, 186, 187], "id": [137, 138, 150, 163, 164, 289, 308], "track": [137, 138, 150, 151, 289, 852, 864], "part": [137, 138, 151, 155, 158, 159, 160, 170, 171, 175, 186, 187, 213, 242, 244, 245, 247, 651, 658, 660, 663, 665, 671, 673, 675, 677, 679, 681], "fall": [137, 138, 141, 145, 165, 169, 956], "non": [137, 138, 141, 145, 157, 164, 165, 170, 210, 211, 252, 258, 276, 339, 495, 498, 499, 502, 689, 692, 702, 709, 711, 732, 734, 751, 753, 757, 759, 763, 765, 766, 768, 887, 888, 889, 890, 912, 917, 920, 921, 924, 925, 928, 929, 932, 941, 944, 945, 946, 949, 951, 954], "from_cal": [137, 138], "check_submod_ret": [137, 138], "get_mod_kei": [137, 138], "top_mod": [137, 138], "mod_depth": [137, 138], "mod_height": [137, 138], "mod_with_top_mod_key_chain": [137, 138], "depth": [137, 138, 173, 174, 175, 186, 289, 313, 317, 321, 577, 615, 630, 852, 864], "save_weight": [137, 138], "weights_path": [137, 138], "show_mod_in_top_mod": [137, 138], "upper_depth": [137, 138], "lower_depth": [137, 138], "show_structur": [137, 138], "show_v_in_top_v": [137, 138], "sub_mod": [137, 138], "show_v": [137, 138], "track_submod_call_ord": [137, 138], "track_submod_ret": [137, 138], "v_with_top_v_key_chain": [137, 138], "layernorm": 139, "normalized_shap": [139, 140], "elementwise_affin": [139, 140], "mini": [139, 140, 870, 871, 874], "trail": [139, 140], "small": [139, 140, 157, 160, 170, 174, 187, 339, 509, 512, 702, 732, 734, 741, 743, 870, 871, 874], "denomin": [139, 140, 160, 187, 577, 603, 613, 636, 641, 642, 870, 871, 874], "_min_bas": [139, 140, 577, 642, 870, 871, 874], "learnabl": [139, 140, 175, 870, 871, 874], "affin": [139, 140], "submodul": [139, 140, 147, 148, 150, 151, 152, 153, 158, 159, 160, 166, 169, 170, 174, 956], "adam": [141, 143, 173, 174, 175, 651, 653, 656, 658, 660, 671, 673, 956], "0001": [141, 142, 143], "forget": [141, 142, 143, 651, 653, 656, 658, 660, 671, 673], "moment": [141, 142, 143, 161, 187, 651, 653, 656, 658, 660, 671, 673], "divisor": [141, 142, 143, 339, 414, 417, 530, 533, 651, 653, 656, 658, 660, 671, 673, 912, 933, 936, 941, 944], "prevent": [141, 142, 143, 151, 167, 172, 651, 653, 656, 658, 660, 671, 673, 912, 937, 940], "divis": [141, 142, 143, 160, 339, 394, 397, 414, 417, 439, 442, 530, 533, 577, 603, 613, 636, 641, 642, 651, 653, 656, 658, 660, 671, 673], "set_stat": [141, 142, 143, 144, 145, 146, 174], "lamb": [141, 174, 651, 671, 673], "trust": [141, 143, 651, 671, 673], "ratio": [141, 143, 289, 651, 671, 673], "decai": [141, 143, 144, 651, 671, 673, 675, 677], "lar": [141, 174, 651, 671, 673, 675, 677], "lambda": [141, 144, 146, 152, 170, 173], "layerwis": [141, 144, 651, 675, 677], "init_on_first_step": [141, 145], "grad": [141, 145, 164, 173, 174, 175, 956], "ignore_miss": [141, 145], "overriden": [141, 145], "privat": [141, 145, 153], "_step": [141, 145, 174], "miss": [141, 145, 150, 157, 159, 163, 164], "sgd": 141, "stochast": [141, 146], "descent": [141, 146, 174, 651, 663, 665], "sub_modul": [147, 148], "strongli": [149, 150, 956, 962], "welcom": [149, 150, 151, 956, 962], "skill": 149, "vetern": 149, "beginn": 149, "aspect": [149, 173, 956], "guid": [149, 150, 151, 159, 956], "through": [149, 151, 152, 154, 157, 160, 161, 164, 169, 170, 172, 173, 174, 175, 186, 339, 370, 373], "journei": [149, 956, 962], "inclusvi": 149, "big": [149, 187], "team": [149, 150, 151], "board": 149, "contributor": [149, 150, 151, 169, 956], "section": [149, 151, 152, 154, 155, 156, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 173, 174, 892, 893, 894, 898, 900], "below": [149, 150, 152, 153, 154, 155, 157, 160, 164, 165, 166, 167, 170, 171, 172, 173, 174, 175, 186, 213, 242, 244, 245, 247, 339, 378, 381, 398, 401, 410, 413, 534, 537, 568, 572, 702, 709, 711, 712, 714, 760, 762, 788, 802, 805, 806, 809, 892, 893, 901, 902, 905, 956], "best": [149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 577, 627], "go": [149, 150, 151, 152, 154, 155, 157, 164, 169, 173, 187, 852, 863], "finish": [149, 150, 154, 956], "dive": [149, 151, 152, 169, 172, 173, 187, 956], "environ": [149, 151, 153, 186], "basic": [149, 152, 153], "fork": [149, 150, 577, 628], "doc": [149, 152, 156, 168, 170, 173, 174, 956], "document": [149, 151, 171, 173, 175], "local": [149, 150, 153, 160], "task": [149, 151, 186, 848, 849, 850, 851, 956], "video": [149, 151, 156, 157, 168], "realli": [150, 164, 187], "contribut": [150, 151, 152, 170, 962], "toward": [150, 170, 788, 822, 825, 956, 962], "page": [150, 151, 171, 175, 185, 956, 962], "explain": [150, 151, 152, 155, 156, 157, 159, 160, 161, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 956, 962], "main": [150, 153, 162, 164, 213, 222, 242, 244, 245, 247, 702, 712, 714, 760, 762], "prefer": [150, 164], "git": [150, 151], "com": 150, "unifyai": [150, 153], "http": [150, 156, 213, 214, 215, 217, 218, 219, 221, 222, 223, 225, 226, 227, 229, 230, 238, 239, 241, 242, 244, 245, 247, 248, 249, 251, 252, 261, 264, 339, 340, 343, 358, 361, 398, 401, 402, 405, 410, 413, 435, 438, 518, 521, 550, 553, 554, 557, 651, 653, 656, 658, 660, 702, 712, 714, 788, 802, 805, 822, 825, 892, 893, 894, 898, 901, 902, 905, 912, 917, 920], "gh": 150, "your_fold": 150, "cours": [150, 151, 157, 173, 187], "whatev": [150, 187], "integr": [150, 159, 252, 258], "familiar": [150, 152], "sure": [150, 152, 158], "elig": 150, "free": [150, 151, 152, 153, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 186, 956], "student": 150, "licenc": 150, "peopl": [150, 151, 154], "seem": [150, 174, 187], "explicit": [150, 153, 164, 165, 167, 170, 187], "remind": 150, "pace": 150, "suggest": [150, 151, 155], "packag": [150, 153, 187], "ensur": [150, 151, 159, 163, 165, 168, 577, 621], "pypi": [150, 152, 187], "person": [150, 151], "experi": [150, 171, 173, 187], "avoid": [150, 151, 159, 161, 162, 164, 172, 289, 339, 431, 434], "pip": [150, 186, 956], "instal": [150, 153, 186, 956], "abil": [150, 171, 187], "perhap": [150, 172, 173, 174, 187], "command": [150, 153, 956], "ivy_dev": [150, 151, 153], "setup": 150, "click": [150, 151, 156, 956], "icon": [150, 151], "side": [150, 151], "choos": [150, 151, 175, 289, 334, 339, 495, 498, 499, 502, 887, 891, 892, 893, 894, 898, 900, 912, 917, 920, 921, 924, 925, 928], "panel": 150, "select": [150, 151, 159, 170, 172, 175, 187], "drop": [150, 187], "down": [150, 172], "path": [150, 153], "manual": [150, 151, 159, 174, 852, 853, 862, 863], "builtin": [150, 153, 172, 174], "cmd": [150, 153], "directori": [150, 151, 153, 577, 638], "folder": [150, 151, 153, 155, 158, 159, 160], "abov": [150, 151, 153, 156, 157, 160, 161, 163, 164, 167, 168, 172, 173, 174, 175, 213, 214, 215, 217, 218, 219, 221, 222, 223, 225, 226, 227, 229, 230, 231, 232, 234, 238, 239, 241, 242, 244, 245, 247, 248, 249, 251, 252, 261, 264, 339, 340, 343, 353, 356, 358, 361, 378, 381, 398, 401, 402, 405, 410, 413, 435, 438, 509, 512, 518, 521, 534, 537, 550, 553, 554, 557, 563, 567, 568, 572, 577, 605, 689, 692, 701, 702, 709, 711, 712, 714, 715, 717, 760, 762, 788, 802, 805, 806, 809, 822, 825, 870, 871, 874, 875, 877, 878, 892, 893, 894, 898, 901, 902, 905, 912, 917, 920, 929, 932, 933, 936, 937, 940, 945, 946, 949], "m": [150, 151, 153, 154, 170, 213, 232, 234, 242, 244, 245, 247, 577, 586, 702, 703, 705, 709, 711, 712, 714, 715, 717, 718, 720, 721, 723, 724, 727, 732, 734, 735, 737, 738, 740, 741, 743, 744, 746, 748, 750, 751, 753, 754, 756, 760, 762, 875, 880, 881, 883], "python3": [150, 153], "script": [150, 151, 153, 157, 170, 187], "bat": [150, 151, 153], "OR": [150, 151, 153, 339, 390, 393, 499, 502, 945, 951, 954], "bin": [150, 151, 153], "mac": [150, 151, 153], "linux": [150, 151, 153], "virtualenv": 150, "os": 150, "note": [150, 151, 155, 156, 157, 164, 339, 530, 533, 702, 715, 717, 751, 753, 788, 832, 835, 892, 894, 898, 912, 921, 924], "tick": [150, 151], "To": [150, 157, 160, 164, 173, 174, 175, 956], "ivy_test": [150, 151], "test_array_api": [150, 151, 158, 159], "cd": [150, 151, 153], "txt": 150, "visual": [150, 187], "jetbrain": 150, "remot": 150, "mitig": 150, "potenti": [150, 169, 339, 431, 434], "conflict": [150, 151, 173], "yet": [150, 152, 164], "particular": [150, 151, 155, 167, 339, 340, 343], "system": [150, 187, 702, 748, 750], "instruct": [150, 152], "desktop": 150, "wsl": 150, "powershel": 150, "admin": 150, "visit": 150, "link": 150, "profession": 150, "execut": [150, 153, 164, 167, 170, 172, 175, 187, 577, 648], "deploy": 150, "top": [150, 151, 159, 173, 174, 956], "press": [150, 173, 956], "ok": 150, "caus": [150, 151, 157, 159, 164, 167, 187], "earlier": [150, 151], "might": [150, 151, 155, 159, 162, 170, 172, 173, 577, 598], "necessari": [150, 157, 161, 164, 167], "virtualis": 150, "detail": [150, 151, 152, 155, 158, 159, 160, 161, 162, 164, 168, 173, 174, 213, 223, 225, 892, 893, 894, 898, 900], "sudo": 150, "apt": 150, "ca": 150, "certif": 150, "curl": 150, "gnupg": 150, "lsb": 150, "mkdir": 150, "keyr": 150, "fssl": 150, "download": [150, 159], "gpg": 150, "dearmor": 150, "o": [150, 170, 577, 586], "echo": 150, "deb": 150, "arch": 150, "dpkg": 150, "architectur": [150, 175, 187], "lsb_releas": 150, "cs": 150, "tee": 150, "null": 150, "ce": 150, "cli": 150, "containerd": 150, "io": 150, "compos": [150, 164, 187], "plugin": 150, "systemctl": 150, "permiss": 150, "relat": [150, 151, 186, 289], "post": [150, 175, 870, 871, 874, 956, 962], "headach": 150, "arm": [150, 151], "m1": 150, "instead": [150, 151, 152, 156, 157, 159, 160, 164, 167, 168, 170, 172, 173, 187], "featur": [150, 155, 168, 173, 956], "vm": 150, "azur": 150, "cloud": [150, 186], "defin": [150, 152, 155, 156, 165, 168, 172, 174, 187, 339, 509, 512, 530, 533, 577, 630, 702, 706, 708, 715, 717, 748, 750, 875, 877, 878, 912, 917, 920, 921, 924, 925, 928], "dockerfil": [150, 153], "longer": [150, 165, 167], "worri": 150, "platform": 150, "agnost": [150, 163, 168, 170, 172, 175, 187, 956], "usual": 150, "studio": 150, "favourit": 150, "extens": [150, 151, 156, 213, 214, 215, 217, 218, 219, 221, 222, 223, 225, 226, 227, 229, 230, 232, 234, 238, 239, 241, 242, 244, 245, 247, 248, 249, 251, 252, 261, 264, 339, 340, 343, 353, 356, 358, 361, 378, 381, 398, 401, 402, 405, 410, 413, 435, 438, 467, 470, 518, 521, 534, 537, 550, 553, 554, 557, 563, 567, 568, 572, 702, 709, 711, 712, 714, 788, 802, 805, 806, 809, 822, 825, 892, 893, 894, 898, 901, 902, 905, 912, 917, 920, 945, 946, 949], "theme": 150, "too": [150, 151, 187, 339, 353, 356, 509, 512], "done": [150, 151, 157, 159, 173], "unsupport": [150, 165, 252, 273, 274], "slow": 150, "ipad": 150, "long": [150, 151, 157, 689, 699], "browser": 150, "cool": [150, 155], "requisit": 150, "pane": [150, 151], "readi": [150, 152], "begin": [150, 852, 853, 863], "outlin": [150, 151, 152, 154, 156, 159, 160, 164, 167, 172], "dropdown": 150, "tab": [150, 173, 956], "master": [150, 151, 164], "vs": 150, "bottom": 150, "box": 150, "patient": 150, "upto": 150, "minut": 150, "launch": 150, "That": [150, 151, 172, 173, 174, 339, 530, 533], "approach": [150, 151, 159, 160, 164, 172, 173, 187], "colour": 150, "applic": [150, 165, 166, 174, 689, 700, 701, 852, 858, 864], "good": [150, 151, 152, 153, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 174], "chanc": 150, "vscode": 150, "explor": [150, 171, 175, 186], "troubleshoot": 150, "sometim": [150, 151], "ever": [150, 151, 152, 153, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168], "bit": [150, 157, 160, 164, 172, 252, 271, 272, 275, 339, 382, 385, 386, 389, 394, 397, 912, 929, 932, 937, 940], "usr": 150, "more": [150, 151, 152, 154, 155, 157, 159, 160, 161, 162, 163, 164, 167, 168, 169, 170, 171, 172, 173, 174, 175, 186, 187, 213, 214, 252, 259, 339, 431, 434, 702, 724, 727, 788, 806, 809, 892, 893, 894, 898, 900, 956], "nutshel": [150, 168], "hook": 150, "lint": 150, "fix": [150, 151], "fail": [150, 152, 158, 159, 170, 172], "attempt": [150, 187], "succe": 150, "problemat": 150, "proce": [150, 151, 152, 153, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168], "modifi": [150, 151, 156, 160, 165, 166, 170], "properli": [150, 154], "enter": [150, 151, 163, 165, 166, 168, 289], "unsur": [150, 151, 152, 153, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168], "feel": [150, 151, 152, 153, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 956], "server": [151, 956], "suitabl": [151, 155, 164], "quick": [151, 154, 174], "tendenc": 151, "land": 151, "end": [151, 164, 167, 169, 186, 187, 213, 214, 339, 370, 373, 956, 962], "world": 151, "come": [151, 152, 174, 185, 956, 962], "fly": 151, "hard": [151, 172], "respons": [151, 153], "internship": 151, "comment": 151, "trigger": 151, "unansw": 151, "label": [151, 170, 171, 175, 772, 773, 776, 778, 781, 783, 786], "respond": 151, "someon": [151, 187], "strive": [151, 187], "repli": 151, "newli": [151, 167, 210, 211, 252, 258, 577, 588], "bug": [151, 159], "serv": [151, 159, 160, 163, 164, 168, 169, 956], "suspect": 151, "behaviour": [151, 156, 159, 163, 164, 167, 168, 172], "observ": 151, "confid": 151, "wrong": 151, "someth": [151, 155, 173, 174, 187], "bet": 151, "act": [151, 157, 187], "placehold": [151, 163, 168, 852, 864], "mark": [151, 159], "ii": [151, 912, 913, 916], "iii": 151, "titl": [151, 956], "issue_numb": 151, "No": [151, 170], "progress": [151, 164, 171, 175], "pr": 151, "soon": [151, 164, 185, 187, 956, 962], "solut": [151, 159, 164, 702, 748, 750], "review": [151, 155], "merg": 151, "everi": [151, 152, 153, 157, 158, 159, 160, 161, 162, 164, 167, 168, 170, 172, 174, 213, 226, 227, 229, 577, 578, 581], "dai": 151, "close": [151, 156, 339, 431, 434, 534, 537, 702, 751, 753], "likewis": [151, 156, 160, 164, 165, 168, 173], "freed": 151, "purpos": [151, 153, 157, 159, 160, 162, 163, 164, 168, 169, 172, 339, 431, 434, 956], "remain": [151, 157, 187, 339, 353, 356, 509, 512, 530, 533, 788, 818, 821, 852, 858], "short": [151, 174, 689, 699], "basi": [151, 158, 173], "situat": [151, 175], "alloc": [151, 187, 213, 242, 244, 245, 247, 252, 258, 289], "upon": [151, 157, 159, 167, 187], "period": 151, "unabl": 151, "obvious": 151, "never": [151, 164], "reflect": [151, 163], "qualiti": 151, "hypothet": 151, "frustrat": 151, "delai": 151, "busi": 151, "fine": [151, 172, 175], "becaus": [151, 156, 159, 160, 161, 163, 165, 166, 167, 168, 170, 174, 175, 187], "inact": 151, "me": 151, "unfairli": 151, "definit": [151, 160, 165, 172, 702, 703, 705, 706, 708], "investig": 151, "Then": [151, 153, 172, 187], "practic": [151, 159], "separ": [151, 159, 163, 170, 172, 173], "branch": [151, 164, 187, 210, 211, 339, 370, 373], "role": [151, 171], "date": 151, "upstream": [151, 158], "complic": [151, 170], "root": [151, 153, 173, 339, 550, 553, 875, 876, 880], "merge_with_upstream": 151, "sh": 151, "name_of_your_branch": 151, "resolv": [151, 912, 929, 932, 937, 940], "push": [151, 158], "both": [151, 156, 157, 160, 164, 166, 167, 168, 170, 172, 173, 174, 175, 186, 187, 213, 214, 215, 217, 218, 219, 221, 222, 223, 225, 226, 227, 229, 230, 231, 232, 234, 238, 239, 241, 242, 244, 245, 247, 248, 249, 251, 252, 261, 264, 279, 339, 340, 343, 353, 356, 358, 361, 402, 405, 435, 438, 518, 521, 526, 529, 550, 553, 554, 557, 563, 567, 577, 605, 651, 653, 656, 689, 692, 701, 702, 706, 708, 712, 714, 724, 727, 763, 765, 788, 822, 825, 870, 871, 874, 892, 894, 898, 912, 917, 920, 945, 946, 949], "abort": 151, "tediou": 151, "resolut": 151, "stash": 151, "reinstat": 151, "fetch": 151, "uncommit": 151, "unstag": 151, "untrack": 151, "comprehens": 151, "explan": [151, 156, 164, 168, 172], "atlassian": 151, "tutori": 151, "wrote": 151, "piec": [151, 160, 162, 163, 170], "inform": [151, 252, 272, 275, 577, 583, 651, 684], "tag": 151, "usu": 151, "describ": [151, 171, 175, 912, 913, 916, 929, 932, 933, 936, 937, 940], "navig": [151, 154], "blame": 151, "revis": 151, "author": [151, 956], "eg": 151, "past": 151, "l": [151, 154, 702, 703, 705, 715, 717, 724, 727, 760, 762], "grep": 151, "commit_id": 151, "handi": 151, "histori": 151, "toggl": 151, "vertic": 151, "highlight": [151, 157], "previou": [151, 159, 168, 175, 187, 651, 658, 660, 671, 673], "whenev": [151, 172, 173], "think": [151, 157], "interact": [151, 956], "quit": [151, 152, 156, 160, 162, 163], "yourself": [151, 152, 186], "simpler": [151, 172], "cannot": [151, 161, 165, 175], "least": [151, 157, 160, 163, 702, 724, 727], "tickbox": 151, "corner": 151, "span": 151, "intent": [151, 167], "larg": [151, 173, 339, 353, 356, 509, 512], "discourag": 151, "philosophi": 151, "increment": [151, 577, 620], "frequent": [151, 152], "valuabl": 151, "infrequ": 151, "wast": 151, "spot": [151, 160], "mistak": 151, "propos": 151, "mountain": 151, "advoc": [151, 187], "individu": [151, 152, 160], "style": [151, 887, 890], "ve": [151, 169, 172, 875, 876, 956], "actual": [151, 154, 160, 167, 169, 172, 174, 187], "aim": [151, 169], "subsect": 151, "session": [151, 956], "block": [151, 160, 169, 171, 175, 187, 289, 956], "smaller": [151, 170, 175, 788, 789, 792, 822, 825, 912, 929, 932, 937, 940], "edit": 151, "beauti": 151, "particularli": [151, 173, 187], "concern": [151, 154, 157, 164, 167, 169], "effici": [151, 159, 160, 164, 167, 168, 170, 173, 187], "difficult": [151, 159, 187, 892, 893, 894, 898, 900], "undo": 151, "stress": 151, "frequenc": [151, 577, 604], "pycharm": 151, "pytest": [151, 159], "button": 151, "declar": 151, "insid": [151, 153, 155, 165], "exec": 151, "rm": 151, "rf": 151, "cp": 151, "ivy_contain": 151, "bash": [151, 153], "test_ivi": [151, 159], "test_funct": 151, "test_cor": 151, "test_imag": 151, "test_random_crop": 151, "header": 151, "q": [151, 187, 689, 701, 702, 715, 717, 744, 746], "array_api_test": 151, "test_creation_funct": 151, "test_arang": 151, "variou": [151, 156, 162, 168, 186], "wherebi": [152, 164, 852, 864], "broad": 152, "todo": [152, 159], "commit": [152, 159], "NOT": [152, 339, 495, 498], "resourc": 152, "hypothesi": 152, "cover": [152, 156, 157, 160, 162, 169], "direct": [152, 174, 175, 186, 901, 907, 910], "bind": [152, 164], "aforement": 152, "categori": [152, 155, 163, 164, 165, 169, 956], "parent": [152, 172], "hint": [152, 155, 156, 160, 163, 167, 168, 213, 214, 215, 217, 218, 219, 221, 222, 223, 225, 226, 227, 229, 230, 231, 232, 234, 238, 239, 241, 242, 244, 245, 247, 248, 249, 251, 252, 261, 264, 339, 340, 343, 353, 356, 358, 361, 378, 381, 398, 401, 402, 405, 410, 413, 435, 438, 518, 521, 534, 537, 550, 553, 554, 557, 563, 567, 568, 572, 577, 605, 689, 692, 701, 702, 709, 711, 712, 714, 788, 802, 805, 806, 809, 822, 825, 870, 871, 874, 892, 893, 894, 898, 901, 902, 905, 912, 917, 920, 945, 946, 949], "its": [152, 153, 156, 252, 259, 289, 333, 702, 724, 727, 788, 802, 805, 818, 821, 822, 825, 836, 839], "thorough": [152, 156, 159, 168], "transpil": [152, 169, 171, 956, 962], "builder": [153, 185, 187, 956], "maco": 153, "ubuntu": 153, "uid": 153, "make_docs_without_dock": 153, "rel": [153, 651, 658, 660, 663, 665, 671, 673, 675, 677, 679, 681, 702, 712, 714, 732, 734, 741, 743, 760, 762, 788, 806, 809, 822, 825, 901, 902, 905, 907, 910, 956], "synchron": 153, "rest": [153, 171, 175], "remove_doc": 153, "_": [153, 156, 164, 167, 172, 173, 213, 214, 215, 217, 218, 219, 221, 222, 223, 225, 226, 227, 229, 230, 238, 239, 241, 242, 244, 245, 247, 248, 249, 251, 252, 261, 264, 339, 340, 343, 358, 361, 398, 401, 402, 405, 410, 413, 435, 438, 518, 521, 550, 553, 554, 557, 651, 653, 656, 658, 660, 702, 712, 714, 769, 771, 788, 802, 805, 822, 825, 892, 893, 901, 902, 905, 912, 917, 920], "fulfil": [153, 169, 956], "autogenerated_sourc": 153, "png": [153, 173], "_imag": 153, "lastli": 153, "rst": 153, "partial_sourc": 153, "conf": 153, "create_rst_fil": 153, "repres": [153, 172, 213, 232, 234, 252, 271, 339, 349, 352, 353, 356, 362, 365, 374, 377, 410, 413, 509, 512, 546, 549, 568, 572, 689, 698, 702, 747, 748, 750], "overal": [153, 156, 164, 165, 166, 175], "markup": 153, "extract": [153, 155], "get_functions_and_class": 153, "doctr": 153, "readm": [153, 187], "module_nam": 153, "copy_readme_to_rst": 153, "tabl": 153, "toc": 153, "tree": 153, "append_toctree_to_rst": 153, "create_index_rst": 153, "\u03c0": [153, 339, 345, 348, 358, 361, 366, 369, 370, 373], "namespac": [153, 155, 165, 170, 175], "who": [154, 169, 187], "mainli": [154, 171, 173], "under": [154, 156, 157, 158, 159, 160, 164, 169, 170, 173, 175], "hood": [154, 157, 159, 160, 164, 169, 170, 173, 175], "weed": [154, 169], "behind": [154, 169, 171, 651, 658, 660, 663, 665, 671, 673, 675, 677, 679, 681], "tour": 154, "primari": [154, 159, 161, 167, 187], "composit": [154, 159, 161, 163, 164, 167, 170, 174, 175, 187], "nestabl": [154, 156, 157, 159, 167, 213, 214, 215, 217, 218, 219, 221, 222, 223, 225, 226, 227, 229, 230, 231, 232, 234, 238, 239, 241, 242, 244, 245, 247, 248, 249, 251, 252, 261, 264, 339, 340, 343, 353, 356, 358, 361, 402, 405, 435, 438, 518, 521, 550, 553, 554, 557, 563, 567, 577, 605, 689, 692, 701, 702, 712, 714, 788, 822, 825, 870, 871, 874, 892, 894, 898, 912, 917, 920, 945, 946, 949], "dynam": [154, 165, 166, 167, 170, 210, 211], "runtim": [154, 159, 289], "h": [154, 164, 689, 692, 693, 694, 695, 696], "j": [154, 577, 585, 586, 702, 760, 762, 912, 913, 916], "borrow": 154, "n": [154, 213, 232, 234, 242, 244, 245, 247, 577, 586, 689, 697, 702, 712, 714, 724, 727, 731, 732, 734, 735, 737, 738, 740, 741, 743, 744, 746, 751, 753, 754, 756, 760, 762, 763, 765, 766, 768, 769, 771, 788, 798, 801, 802, 805, 810, 813, 832, 835, 844, 847, 875, 880, 881, 883, 887, 890, 912, 921, 924, 933, 936, 937, 940, 941, 944, 945, 946, 949, 951, 954], "taken": [155, 175, 702, 712, 714], "meta": [155, 163, 849, 850, 851], "overlap": 155, "sever": [155, 187, 702, 721, 723], "judgement": 155, "locat": [155, 159, 161, 166, 875, 876], "some_namespac": 155, "some_backend": 155, "another_backend": 155, "break": [155, 168, 172, 187, 956], "anyth": [155, 956], "refactor": 155, "ongo": 155, "subfold": [155, 159], "file_nam": 155, "my_func": [155, 157], "int": [155, 157, 160, 164, 165, 166, 167, 168, 175, 198, 203, 210, 211, 213, 218, 222, 226, 227, 229, 230, 231, 238, 242, 244, 245, 247, 248, 252, 260, 269, 271, 272, 275, 278, 289, 311, 314, 315, 316, 317, 325, 326, 327, 333, 334, 339, 378, 381, 382, 385, 386, 389, 390, 393, 394, 397, 398, 401, 577, 583, 595, 596, 599, 600, 601, 604, 605, 614, 630, 633, 634, 639, 640, 649, 651, 653, 656, 658, 660, 671, 673, 689, 690, 692, 694, 695, 696, 702, 706, 708, 712, 714, 757, 759, 760, 762, 763, 765, 766, 768, 772, 778, 781, 783, 786, 788, 794, 797, 798, 801, 802, 805, 806, 809, 810, 813, 814, 817, 818, 821, 822, 825, 827, 828, 831, 832, 835, 836, 839, 840, 843, 844, 847, 848, 849, 850, 851, 852, 864, 870, 871, 874, 875, 876, 877, 878, 880, 881, 883, 885, 887, 888, 889, 901, 902, 905, 907, 910, 912, 917, 920, 921, 924, 925, 928, 933, 936, 937, 940, 941, 944, 945, 946, 949, 951, 954], "nativedtyp": [155, 165, 166, 168, 213, 214, 215, 217, 218, 219, 221, 222, 226, 227, 229, 235, 237, 238, 239, 241, 248, 249, 251, 252, 257, 258, 268, 269, 270, 279, 912, 937, 940], "nativedevic": [155, 165, 166, 168, 213, 214, 215, 217, 218, 219, 221, 222, 226, 227, 229, 230, 231, 235, 237, 238, 239, 241, 248, 249, 251, 289, 306, 307, 308, 322, 328, 330, 332, 334, 335, 338, 577, 630, 875, 876, 877, 878, 880, 881, 883], "my": 155, "cooler": 155, "produc": [155, 289, 298, 299, 689, 701], "something_cool": 155, "category_nam": [156, 160, 165, 166, 168], "contrast": [156, 168], "backend_nam": [156, 160, 161, 162, 165, 166, 168], "account": 156, "instanti": 156, "firstli": [156, 157, 160, 163, 165, 167, 173], "templat": [156, 956], "spec": [156, 157], "api_specif": [156, 213, 214, 215, 217, 218, 219, 221, 222, 223, 225, 226, 227, 229, 230, 238, 239, 241, 242, 244, 245, 247, 248, 249, 251, 252, 261, 264, 339, 340, 343, 358, 361, 398, 401, 402, 405, 410, 413, 435, 438, 518, 521, 550, 553, 554, 557, 702, 712, 714, 788, 802, 805, 822, 825, 892, 893, 894, 898, 901, 902, 905, 912, 917, 920], "array_api": 156, "preview": 156, "render": 156, "incorrectli": 156, "onlin": [156, 956], "approxim": [156, 198, 199, 339, 345, 348, 349, 352, 358, 361, 362, 365, 366, 369, 370, 373, 406, 409, 410, 413, 427, 430, 431, 434, 471, 474, 475, 478, 479, 482, 483, 486, 526, 529, 542, 545, 546, 549, 563, 567, 568, 572, 702, 732, 734, 741, 743], "tangent": [156, 198, 209, 339, 366, 369, 370, 373, 374, 377, 563, 567, 568, 572], "domain": [156, 339, 345, 348, 349, 352, 358, 361, 362, 365, 366, 369, 370, 373, 406, 409, 410, 413, 427, 430, 431, 434, 471, 474, 475, 478, 483, 486, 542, 545, 546, 549, 550, 553, 563, 567, 568, 572], "infin": [156, 212, 252, 258, 339, 340, 343, 349, 352, 353, 356, 362, 365, 366, 369, 370, 373, 402, 405, 406, 409, 410, 413, 427, 430, 431, 434, 435, 438, 439, 442, 451, 454, 455, 458, 471, 474, 475, 478, 483, 486, 487, 490, 509, 512, 526, 529, 530, 533, 534, 537, 542, 545, 546, 549, 550, 553, 563, 567, 568, 572, 573, 576, 702, 766, 768, 912, 917, 920, 925, 928, 945, 946, 949, 951, 954], "codomain": [156, 339, 345, 348, 349, 352, 358, 361, 362, 365, 366, 369, 370, 373, 406, 409, 410, 413, 427, 430, 431, 434, 471, 474, 475, 478, 483, 486, 542, 545, 546, 549, 550, 553, 563, 567, 568, 572], "x_i": [156, 339, 340, 343, 345, 348, 349, 352, 358, 361, 362, 365, 366, 369, 382, 385, 402, 405, 406, 409, 410, 413, 427, 430, 431, 434, 435, 438, 451, 454, 455, 458, 459, 462, 471, 474, 475, 478, 483, 486, 495, 498, 514, 517, 534, 537, 538, 541, 542, 545, 546, 549, 550, 553, 554, 557, 563, 567, 568, 572, 573, 576, 892, 893, 894, 898, 900, 912, 917, 920, 921, 924, 925, 928, 933, 936, 937, 940, 941, 944], "assum": [156, 161, 165, 172, 173, 187, 213, 214, 215, 217, 218, 219, 221, 222, 223, 225, 226, 227, 229, 230, 231, 232, 234, 238, 239, 241, 242, 244, 245, 247, 248, 249, 251, 252, 261, 264, 339, 340, 343, 353, 356, 358, 361, 378, 381, 398, 401, 402, 405, 406, 409, 410, 413, 435, 438, 518, 521, 534, 537, 542, 545, 550, 553, 554, 557, 563, 567, 568, 572, 577, 605, 689, 692, 701, 702, 709, 711, 712, 714, 788, 802, 805, 806, 809, 822, 825, 870, 871, 874, 892, 893, 894, 898, 901, 902, 905, 912, 917, 920, 945, 946, 949], "express": [156, 170, 175, 339, 345, 348, 358, 361, 366, 369, 370, 373, 406, 409, 542, 545, 563, 567], "radian": [156, 339, 345, 348, 358, 361, 366, 369, 370, 373, 406, 409, 542, 545, 563, 567], "float": [156, 160, 164, 165, 167, 168, 172, 174, 198, 200, 212, 213, 214, 218, 222, 226, 227, 229, 230, 231, 238, 248, 252, 258, 268, 272, 277, 280, 289, 322, 328, 332, 335, 338, 339, 340, 343, 345, 348, 349, 352, 353, 356, 358, 361, 362, 365, 366, 369, 370, 373, 374, 377, 398, 401, 402, 405, 406, 409, 410, 413, 414, 417, 419, 422, 427, 430, 431, 434, 435, 438, 439, 442, 443, 446, 447, 450, 463, 466, 471, 474, 475, 478, 483, 486, 487, 490, 509, 512, 514, 517, 518, 521, 522, 525, 526, 529, 530, 533, 534, 537, 542, 545, 546, 549, 550, 553, 558, 562, 563, 567, 568, 572, 573, 576, 577, 589, 590, 592, 604, 612, 613, 635, 636, 641, 642, 651, 653, 656, 658, 660, 663, 665, 671, 673, 675, 677, 679, 681, 689, 692, 696, 701, 702, 703, 705, 709, 711, 715, 717, 718, 720, 721, 723, 732, 734, 741, 743, 744, 746, 748, 750, 751, 753, 766, 768, 772, 773, 776, 778, 781, 783, 786, 848, 849, 850, 851, 870, 871, 874, 875, 880, 881, 883, 892, 893, 894, 898, 900, 912, 917, 920, 921, 924, 925, 928, 929, 932, 933, 936, 937, 940, 941, 944], "operand": [156, 339, 345, 348, 349, 352, 353, 356, 358, 361, 362, 365, 366, 369, 370, 373, 398, 401, 402, 405, 406, 409, 410, 413, 427, 430, 431, 434, 435, 438, 471, 474, 475, 478, 483, 486, 487, 490, 509, 512, 526, 529, 530, 533, 534, 537, 542, 545, 546, 549, 550, 553, 563, 567, 568, 572, 573, 576, 912, 913, 916, 917, 920, 925, 928, 937, 940], "whose": [156, 213, 242, 244, 245, 247, 339, 349, 352, 362, 365, 374, 377, 406, 409, 410, 413, 526, 529, 542, 545, 546, 549, 563, 567, 568, 572, 577, 588, 702, 703, 705, 709, 711, 712, 714, 715, 717, 718, 720, 721, 723, 732, 734, 735, 737, 738, 740, 741, 743, 744, 746, 748, 750, 751, 753, 754, 756, 760, 762, 788, 806, 809, 822, 825, 892, 893, 894, 898, 912, 913, 916], "ref": [156, 339, 394, 397, 463, 466, 509, 512, 518, 521, 530, 533, 558, 562, 788, 832, 835], "promot": [156, 160, 165, 252, 258, 261, 264, 279, 280, 284, 339, 345, 348, 349, 352, 353, 356, 358, 361, 362, 365, 366, 369, 374, 377, 378, 381, 386, 389, 390, 393, 394, 397, 398, 401, 406, 409, 410, 413, 414, 417, 427, 430, 431, 434, 471, 474, 475, 478, 483, 486, 487, 490, 503, 506, 509, 512, 526, 529, 530, 533, 542, 545, 546, 549, 550, 553, 563, 567, 568, 572, 702, 703, 705, 706, 708, 721, 723, 724, 727, 732, 734, 738, 740, 741, 743, 748, 750, 763, 765, 766, 768, 788, 832, 835, 912, 921, 924], "But": [156, 164, 175], "needless": 156, "info": [156, 956], "subset": [156, 159, 168, 170], "renam": 156, "conform": [156, 213, 214, 215, 217, 218, 219, 221, 222, 223, 225, 226, 227, 229, 230, 232, 234, 238, 239, 241, 242, 244, 245, 247, 248, 249, 251, 252, 261, 264, 339, 340, 343, 353, 356, 358, 361, 378, 381, 398, 401, 402, 405, 410, 413, 431, 434, 435, 438, 467, 470, 518, 521, 534, 537, 550, 553, 554, 557, 563, 567, 568, 572, 702, 709, 711, 712, 714, 788, 802, 805, 806, 809, 822, 825, 892, 893, 894, 898, 901, 902, 905, 912, 917, 920, 945, 946, 949], "org": [156, 213, 214, 215, 217, 218, 219, 221, 222, 223, 225, 226, 227, 229, 230, 238, 239, 241, 242, 244, 245, 247, 248, 249, 251, 252, 261, 264, 339, 340, 343, 358, 361, 398, 401, 402, 405, 410, 413, 435, 438, 518, 521, 550, 553, 554, 557, 651, 653, 656, 658, 660, 702, 712, 714, 788, 802, 805, 822, 825, 892, 893, 894, 898, 901, 902, 905, 912, 917, 920], "elementwise_funct": [156, 339, 340, 343, 358, 361, 398, 401, 402, 405, 410, 413, 435, 438, 518, 521, 550, 553, 554, 557, 702, 712, 714, 788, 822, 825, 892, 893, 901, 902, 905, 912, 917, 920], "descript": [156, 164, 213, 214, 215, 217, 218, 219, 221, 222, 223, 225, 226, 227, 229, 230, 231, 232, 234, 238, 239, 241, 242, 244, 245, 247, 248, 249, 251, 252, 261, 264, 339, 340, 343, 353, 356, 358, 361, 378, 381, 398, 401, 402, 405, 410, 413, 435, 438, 518, 521, 534, 537, 550, 553, 554, 557, 563, 567, 568, 572, 577, 605, 689, 692, 701, 702, 709, 711, 712, 714, 766, 768, 788, 802, 805, 806, 809, 822, 825, 870, 871, 874, 892, 893, 894, 898, 901, 902, 905, 912, 917, 920, 945, 946, 949], "simplic": [156, 174, 186, 213, 214, 215, 217, 218, 219, 221, 222, 223, 225, 226, 227, 229, 230, 231, 232, 234, 238, 239, 241, 242, 244, 245, 247, 248, 249, 251, 252, 261, 264, 339, 340, 343, 353, 356, 358, 361, 378, 381, 398, 401, 402, 405, 410, 413, 435, 438, 518, 521, 534, 537, 550, 553, 554, 557, 563, 567, 568, 572, 577, 605, 689, 692, 701, 702, 709, 711, 712, 714, 788, 802, 805, 806, 809, 822, 825, 870, 871, 874, 892, 893, 894, 898, 901, 902, 905, 912, 917, 920], "judgment": 156, "beyond": [156, 788, 822, 825], "text": 156, "func_nam": [156, 157, 160], "pure": [156, 172, 175, 187], "themselv": [156, 160, 164, 165, 166, 174, 852, 853], "operator_nam": 156, "succinct": 156, "contstructor": 156, "though": [156, 160, 165, 173, 187], "_forward": [156, 170, 173, 174, 956], "former": 156, "latter": [156, 161], "implicit": [156, 164, 170], "docst": 156, "eight": 157, "static_": 157, "op_nam": 157, "__r": 157, "four": [157, 160, 165, 168, 173], "__sub__": [157, 163, 164, 168, 172], "__mul__": [157, 163, 164, 168, 172], "__truediv__": [157, 163, 164], "respect": [157, 163, 164, 165, 168, 213, 232, 234, 339, 340, 343, 353, 356, 370, 373, 378, 381, 386, 389, 390, 393, 394, 397, 398, 401, 414, 417, 419, 422, 439, 442, 443, 446, 447, 450, 463, 466, 467, 470, 487, 490, 491, 494, 499, 502, 503, 506, 509, 512, 518, 521, 530, 533, 558, 562, 651, 653, 656, 658, 660, 662, 663, 665, 671, 673, 675, 677, 679, 681, 702, 744, 746, 848, 849, 850, 851], "recap": [157, 164, 174], "independ": [157, 158, 162, 164, 170, 175, 702, 706, 708, 748, 750, 875, 876], "combinatorili": 157, "variat": [157, 159], "grid": [157, 159, 186, 213, 232, 234], "vari": [157, 159, 164, 172, 892, 893, 894, 898, 900], "simplest": 157, "unus": [157, 167, 210, 211], "18": [157, 164, 339, 398, 401, 702, 712, 714, 738, 740, 912, 913, 916], "excess": [157, 161, 172], "showcas": [157, 186], "demonstr": [157, 172], "replic": [157, 165], "meant": 157, "imaginari": 157, "some_flag": 157, "another_flag": 157, "54": [157, 339, 406, 409, 410, 413, 550, 553, 689, 701, 702, 738, 740, 875, 880, 912, 913, 916], "jointli": 157, "three": [157, 164, 169, 213, 232, 234, 956], "x0": [157, 577, 585], "procedur": 157, "sens": [157, 164, 172], "5574077": 157, "1850398": 157, "5463025": 157, "8422884": 157, "91601413": 157, "9647598": 157, "3738229": 157, "1597457": 157, "0963247": 157, "9955841": 157, "3278579": 157, "seper": [157, 577, 604], "pars": [157, 187], "satisfi": [157, 702, 769, 771], "far": [157, 166, 171, 172, 852, 853, 863], "asid": [157, 186], "irrelev": [157, 165], "increasingli": 157, "complex": [157, 173, 174, 175, 187, 702, 715, 717, 751, 753], "rule": [157, 159, 160, 163, 164, 165, 252, 258, 261, 264, 280, 339, 374, 377, 394, 397, 414, 417, 509, 512, 530, 533, 702, 703, 705, 706, 708, 738, 740, 748, 750], "14254655": 157, "1578213": 157, "380515": 157, "17": [157, 164, 198, 200, 702, 712, 714, 875, 880], "trivial": 157, "By": [157, 160, 164, 167, 174, 175, 577, 595, 596, 702, 763, 765, 788, 814, 817, 912, 917, 920, 921, 924, 925, 928, 929, 932, 933, 936, 937, 940, 941, 944, 945, 946, 949, 951, 954], "dictat": [157, 163, 167, 168], "exlud": 157, "unit": [158, 159, 187, 198, 199, 200, 201, 289], "thoroughli": [158, 159], "ci": [158, 159, 187], "failur": 158, "On": [159, 171, 175], "fixtur": 159, "consum": [159, 164, 168, 289], "300": [159, 339, 534, 537], "hit": [159, 170], "permit": [159, 163, 168], "action": 159, "eleg": 159, "intellig": 159, "rang": [159, 173, 174, 175, 213, 214, 230, 231, 892, 893, 912, 929, 932, 937, 940, 956], "unexplor": 159, "known": 159, "repeatedli": [159, 164, 852, 861], "upload": 159, "artifact": 159, "parametr": 159, "strategi": 159, "statement": [159, 187], "plai": [159, 175], "verifi": [159, 165, 166, 172, 956, 962], "truth": [159, 339, 419, 422, 443, 446, 447, 450, 463, 466, 467, 470, 518, 521], "opt": [159, 161, 167, 172], "defer": [159, 160, 163, 164, 165, 166, 167], "suffic": [159, 162], "catch": [159, 577, 598], "systemat": 159, "safeguard": 159, "inabl": 159, "fact": [159, 173], "categor": [160, 166], "mutual": [160, 164], "constitut": [160, 170, 912, 933, 936, 941, 944], "venn": 160, "diagram": 160, "light": [160, 187], "wherea": [160, 163, 165, 166, 168, 175], "hand": [160, 187], "log_pr": [160, 164, 167], "array_arg": 160, "typic": 160, "whatsoev": [160, 164], "commonli": [160, 912, 933, 936, 941, 944], "outsid": [160, 166, 170, 172, 175, 788, 789, 792, 832, 835], "deal": [160, 187], "concurr": [160, 164], "modif": 160, "decor": [160, 162, 164, 165, 166, 167], "group": [160, 164], "briefli": [160, 173], "cast": [160, 165, 252, 258, 261, 264, 788, 794, 797, 912, 929, 932, 937, 940, 956], "get_all_arrays_on_dev": 160, "nested_map": [160, 852], "index_nest": [160, 852], "implicit_backend": 161, "unless": [161, 166, 167, 187, 339, 509, 512, 577, 630], "__dict__": [161, 170, 172], "ivy_original_dict": [161, 170], "unmodifi": [161, 165], "fallback": 161, "freedom": [161, 912, 933, 936, 941, 944], "recommend": [161, 339, 495, 498, 499, 502, 530, 533, 912, 921, 924], "achiev": [162, 173, 175], "wrapper": [162, 163, 164, 165, 167, 168, 172], "logic": [162, 163, 165, 166, 172, 289, 325, 339, 491, 494, 495, 498, 499, 502, 945, 946, 949, 951, 954, 956], "topic": [162, 172], "tf": [163, 165, 166, 167, 168, 170, 175, 187, 956], "_data": [163, 172], "organiz": [163, 164], "bear": [163, 164, 165], "mind": [163, 164], "necessarili": [163, 164], "although": [163, 164], "underpin": [163, 164, 170], "programmat": [163, 164], "backup": [163, 164], "accident": [163, 164], "readabl": [163, 164, 168, 172, 173], "absent": [163, 164], "perk": [163, 164], "auto": [163, 164, 173], "throw": [163, 172], "imposs": 163, "coupl": [163, 164, 172, 174], "anywai": 163, "secondli": [163, 165], "easier": 163, "five": [164, 173], "decis": [164, 170, 172], "displai": [164, 173], "arbitrarili": [164, 173], "__repr__": 164, "control": [164, 165, 167, 172, 173, 186], "__getattr__": 164, "underli": [164, 339, 378, 381, 390, 393, 398, 401, 503, 506], "__contains__": 164, "__getstate__": 164, "__setstate__": 164, "unpickl": 164, "expand": [164, 577, 604, 788, 802, 805], "children": 164, "shallowest": 164, "deepest": 164, "67": [164, 339, 398, 401, 410, 413], "22": [164, 339, 398, 401, 702, 712, 714, 738, 740, 887, 891, 912, 913, 916], "25": [164, 339, 550, 553, 554, 557, 702, 712, 714, 721, 723, 772, 778, 781, 870, 871, 874, 912, 913, 916], "retain_grad": [164, 651, 662], "dy": [164, 651, 662], "dx": [164, 651, 662], "technic": [164, 167, 168, 187], "autograd": [164, 187], "redund": 164, "mask": [164, 689, 700, 701], "to_q_fn": [164, 689, 700], "to_kv_fn": [164, 689, 700], "to_out_fn": [164, 167, 689, 700], "to_q_v": [164, 689, 700], "to_kv_v": [164, 689, 700], "to_out_v": [164, 689, 700], "implicitli": 164, "intuit": [164, 173, 174], "debug": [164, 173], "chronolog": 164, "had": [164, 167], "sequenti": [164, 174], "flow": [164, 186], "implic": 164, "slightli": [164, 170, 174], "eager": [164, 187], "int8": [165, 252, 273], "int16": [165, 252, 261, 264, 273, 912, 929, 932, 937, 940], "uint8": [165, 252, 261, 264, 273], "uint16": [165, 252, 274, 912, 929, 932, 937, 940], "uint32": [165, 252, 274, 912, 929, 932, 937, 940], "uint64": [165, 252, 274, 912, 929, 932, 937, 940], "bfloat16": [165, 252, 273], "float16": [165, 252, 274], "all_dtyp": 165, "all_numeric_dtyp": 165, "all_int_dtyp": 165, "all_float_dtyp": 165, "invalid": [165, 702, 763, 765, 945, 946, 949, 951, 954], "thirdli": 165, "native_float32": 165, "importantli": [165, 172, 175, 186], "varieti": [165, 166], "conveni": [165, 166, 168, 171, 173, 174], "arguabl": [165, 166], "compound": 165, "overflow": [165, 339, 353, 356, 912, 937, 940], "arr": [165, 166, 870, 871, 874], "scalar": [165, 170, 175, 187, 213, 227, 229, 577, 630, 647, 650, 702, 766, 768], "settabl": [165, 166], "jnp": [165, 166, 167, 168, 175, 956], "jaxarrai": [165, 166, 167, 168], "mx": [165, 166, 167, 956], "nd": [165, 166, 167, 170, 175, 956], "deleg": 165, "as_n": [165, 252, 267, 268, 269, 270, 289, 308, 309, 330], "idx": [166, 172, 577, 583], "tpu": [166, 289, 311, 336], "aliv": [166, 289, 323, 327, 329, 577, 611, 629, 631], "amount": [166, 289, 335, 772, 773, 776, 778, 781, 783, 786], "dual": 166, "thrown": [166, 187, 577, 621], "rare": [166, 187], "program": 167, "strictli": 167, "ration": 167, "speak": 167, "subtli": 167, "ensure_in_backend": [167, 577, 621], "x_nativ": 167, "val_n": 167, "is_ivy_arrai": [167, 172, 577], "assign": [167, 172], "elif": 167, "irrespect": [167, 172, 252, 258], "inclus": [167, 213, 214, 875, 877, 878], "omit": [167, 168, 892, 893, 894, 898, 900], "unspecifi": [167, 339, 526, 529, 530, 533, 702, 715, 717, 788, 832, 835], "predominantli": [167, 186], "math": [167, 175, 956], "presenc": 167, "altern": [167, 173], "_wrap_fn": 167, "maxim": [167, 170], "inner": [167, 172, 702, 715, 717, 724, 727, 848, 849, 850, 851], "third": [167, 187, 702, 751, 753, 892, 893], "addition": [167, 168], "leverag": 167, "equival": [167, 173, 175, 213, 214, 339, 394, 397, 495, 498, 499, 502, 530, 533, 702, 732, 734, 741, 743, 748, 750, 766, 768], "input_arrai": 167, "adress": 168, "revisit": [168, 175], "__div__": 168, "dicat": 168, "futher": 168, "absenc": 168, "pep": 168, "484": 168, "annot": 168, "brittl": 168, "intend": [168, 912, 937, 940], "freeli": 168, "inde": [168, 187], "flexibl": 168, "original_typ": 168, "cumbersom": 168, "sound": 169, "higher": [169, 170, 175, 187, 651, 658, 660, 663, 665, 671, 673, 675, 677, 679, 681], "overview": [169, 186], "handler": [169, 171, 175, 956], "fledg": [170, 171], "syntact": [170, 175], "clip_by_valu": [170, 175], "clamp": [170, 175], "behavior": [170, 187, 339, 526, 529, 530, 533, 892, 893, 894, 898, 900], "fit": [170, 788, 814, 817], "num": [170, 213, 230, 231], "power_seq": 170, "okai": 170, "bound": 170, "resid": [170, 174], "edg": [170, 175, 788, 789, 792, 798, 801, 844, 847, 956], "larger": [170, 175, 252, 272, 788, 789, 792, 822, 825, 912, 933, 936, 941, 944], "ml_framework": [170, 175, 213, 214], "current_framework": [170, 175], "furthermor": 170, "concaten": [170, 173, 289, 318, 577, 604, 788, 794, 797, 956], "framework_handl": 170, "face": 170, "verbos": [170, 956, 965], "cprint": [170, 964], "framework_stack": 170, "_determine_framework_from_arg": 170, "valueerror": [170, 788, 828, 831], "get_framework": 170, "neither": [170, 339, 353, 356, 509, 512], "illustr": [170, 186], "un": [170, 252, 276], "nn": [170, 175, 213, 232, 234, 956], "init_h": [170, 689, 699], "init_c": [170, 689, 699], "kernel": [170, 187, 689, 699], "recurrent_kernel": [170, 689, 699], "recurrent_bia": [170, 689, 699], "x_shape": 170, "x_flat": 170, "wi": 170, "wi_x": 170, "wii_x": 170, "wif_x": 170, "wig_x": 170, "wio_x": 170, "recurr": [170, 689, 699], "wh": 170, "ht": 170, "ct": 170, "hts_list": 170, "unrol": [170, 173, 689, 699], "wii_xt": 170, "wif_xt": 170, "wig_xt": 170, "wio_xt": 170, "zip": 170, "htm1": 170, "ctm1": 170, "wh_htm1": 170, "whi_htm1": 170, "whf_htm1": 170, "whg_htm1": 170, "who_htm1": 170, "ft": 170, "gt": 170, "ot": 170, "offici": 170, "reliabl": 170, "sacrific": 170, "hear": 170, "virtu": 170, "pure_ivi": 170, "reduce_mean": [170, 173, 174, 175, 956], "reduce_sum": [170, 956], "reduce_var": 170, "compile_graph": [170, 175], "pure_torch": 170, "cat": [170, 175], "backbon": [170, 173], "_layer": 170, "super": [170, 173, 174, 175], "clean": [170, 171, 173], "random_unifrom": 170, "unclean": 170, "wx": 170, "temp": 170, "torchscript": 170, "fn": [170, 172, 188, 189, 190, 191, 192, 193, 194, 195, 196, 252, 273, 274, 289, 298, 299, 577, 583, 648, 852, 853, 858, 859, 860, 862, 863, 864, 959, 961], "example_input": [170, 210, 211], "static_argnum": [170, 210, 211], "static_argnam": [170, 210, 211], "jit": [170, 187], "frontend": 171, "primit": [171, 187], "hierarch": [171, 173, 174], "straight": [172, 956], "arraywithlinalg": 172, "arraywithlog": 172, "arraywithmath": 172, "arraywithmeta": 172, "arraywithreduct": 172, "is_native_arrai": [172, 577], "_shape": 172, "_size": 172, "functool": 172, "mul": 172, "_dtype": 172, "_devic": 172, "_dev_str": 172, "_pre_repr": 172, "_post_repr": 172, "ndim": [172, 702, 744, 746, 751, 753], "mt": 172, "answer": [172, 187], "consol": 172, "typeerror": 172, "immut": 172, "behav": 172, "claim": 172, "truli": 172, "_native_wrapp": 172, "attributeerror": 172, "genuin": 172, "some_method": 172, "similarli": [172, 213, 232, 234], "rewritten": 172, "__pow__": 172, "strang": 172, "enforc": 172, "notic": 172, "appear": [172, 788, 802, 805], "invers": [172, 186, 339, 345, 348, 349, 352, 358, 361, 362, 365, 366, 369, 370, 373, 374, 377, 702, 721, 723, 741, 743], "_wrap_method": 172, "func_wrapp": [172, 188, 189, 190, 191, 192, 193, 194, 195, 196], "__name__": 172, "non_wrapped_method": 172, "_method_wrap": 172, "native_arg": 172, "native_kwarg": 172, "inner_fn": 172, "whist": 172, "unwrap": 172, "transit": 172, "needlessli": 172, "randn": 172, "_unwrap_method": 172, "method_wrap": 172, "compartment": 172, "public": [172, 577, 593], "newshap": 172, "new_shap": 172, "tidi": 172, "shorter": 172, "crystal": 172, "41": [172, 339, 398, 401, 550, 553, 702, 703, 705, 912, 937, 940], "enough": [172, 173, 174], "ton": 173, "ado": [173, 174], "incred": [173, 187], "hash": 173, "soup": 173, "walk": [173, 174], "dct": 173, "cnt": 173, "combo": [173, 956, 962], "hold": [173, 577, 633, 634], "1000": [173, 339, 550, 553], "uda": 173, "3333": 173, "6667": 173, "178": 173, "new_weight": 173, "0600": 173, "3100": 173, "2400": 173, "6900": 173, "delimit": 173, "autocomplet": 173, "midwai": 173, "agent": 173, "total_spe": 173, "total_height": 173, "total_width": 173, "ag": 173, "tot": 173, "total_": 173, "total_h": 173, "batch_siz": [173, 689, 690, 691, 692, 693, 694, 695, 696, 875, 876], "dir": 173, "cnt0": 173, "cnt1": 173, "diff_0": 173, "diff_1": 173, "config0": 173, "config1": 173, "Not": [173, 174, 187, 212], "decod": 173, "l0": 173, "l1": [173, 702, 766, 768], "clearer": 173, "truncat": 173, "decoder__l0": 173, "decoder__l1": 173, "encoder__l0": 173, "encoder__l1": 173, "height": 173, "l0__b": 173, "l0__w": 173, "l1__b": 173, "l1__w": 173, "printabl": 173, "obviou": 173, "foresight": 173, "untidili": 173, "update_ag": 173, "normalize_img": 173, "img": 173, "img_max": 173, "reduce_max": [173, 956], "img_min": 173, "reduce_min": [173, 956], "img_rang": 173, "agent_posit": 173, "agent_veloc": 173, "agent_cam_front_rgb": 173, "agent_cam_front_depth": 173, "agent_cam_rear_rgb": 173, "agent_cam_rear_depth": 173, "agent_cam_lidar": 173, "cleaner": 173, "camera": 173, "front_rgb": 173, "front_depth": 173, "rear_rgb": 173, "rear_depth": 173, "lidar": 173, "rgb": 173, "rear": 173, "veloc": 173, "cam": 173, "cam_max": 173, "cam_min": 173, "cam_rang": 173, "Of": 173, "ideal": 173, "perman": 173, "afterward": 173, "thread": 173, "incorpor": 173, "pretti": 173, "straightforward": 173, "dataload": [173, 185, 956], "_cnt": 173, "img_": 173, "_dataset_s": 173, "_batch_siz": 173, "_count": [173, 174], "__next__": 173, "filenam": 173, "img_fnam": 173, "fname": 173, "loaded_img": 173, "cv2": 173, "imread": 173, "loader": [173, 187], "batch_slic": 173, "model": [173, 174, 956], "mymodel": [173, 956], "linear0": [173, 174, 956], "linear1": [173, 174, 956], "x_in": [173, 174, 175, 956], "001": [173, 174, 651, 653, 656, 870, 871, 874], "loss_fn": [173, 174, 175, 956], "0145": 173, "grad_fn": 173, "addbackward0": 173, "_create_vari": 174, "_input_channel": 174, "_output_channel": 174, "_w_shape": 174, "_b_shape": 174, "_with_bia": 174, "8979": 174, "3198": 174, "0196": 174, "3126": 174, "3717": 174, "9687": 174, "6958": 174, "5122": 174, "3902": 174, "8800": 174, "5613": 174, "1982": 174, "nightmar": 174, "overcom": 174, "fc": 174, "9563": 174, "impact": 174, "v0": 174, "v1": 174, "6440": 174, "key0": 174, "1823": 174, "8075": 174, "linear3": 174, "v2": 174, "2346": 174, "counter": 174, "fed": [174, 289, 333], "1300": 174, "decoupl": 174, "scheme": 174, "_w_init": 174, "_b_init": 174, "fan_sum": 174, "slight": 174, "misnom": 174, "saw": 174, "vanilla": [174, 848, 850], "_beta1": 174, "_beta2": 174, "_epsilon": 174, "_mw": 174, "_vw": 174, "_first_pass": 174, "_should_compil": 174, "new_v": 174, "_lr": 174, "isinst": [174, 175, 577, 645], "_inplac": 174, "_stop_gradi": 174, "pre": [175, 187, 289], "captur": 175, "sparse_funct": 175, "num_class": [175, 875, 876], "num_dim": 175, "new_axi": 175, "_linear": 175, "to_backend": 175, "jax_graph": 175, "thinli": 175, "whilst": 175, "to_haiku_modul": 175, "hk": 175, "loss_fn_t": 175, "transform": [175, 186, 689, 697, 698], "without_apply_rng": 175, "rng": 175, "prngkei": 175, "init": 175, "update_rul": 175, "01": [175, 339, 534, 537], "tree_multimap": 175, "mechan": [185, 187, 956], "vision": [185, 956], "robot": [185, 956], "focus": 186, "field": [186, 702, 715, 717, 744, 746, 751, 753, 892, 893, 894, 898], "perfect": 186, "differenti": 186, "demo": [186, 956], "orient": 186, "pose": 186, "euler": [186, 212], "quaternion": 186, "rotat": 186, "matric": [186, 213, 232, 234, 242, 244, 245, 247, 689, 698, 702, 703, 705, 709, 711, 712, 714, 715, 717, 718, 720, 721, 723, 731, 732, 734, 735, 737, 741, 743, 744, 746, 748, 750, 751, 753, 754, 756, 760, 762], "angl": [186, 339, 370, 373, 410, 413, 546, 549, 568, 572], "ivy_mech": 186, "target_facing_rotation_matrix": 186, "polar_to_cartesian_coord": 186, "ordin": [186, 702, 748, 750], "warp": 186, "optic": 186, "voxel": 186, "ivy_vis": 186, "coords_to_voxel_grid": 186, "render_pixel_coord": 186, "radianc": 186, "nerf": 186, "trajectori": 186, "motion": 186, "plan": [186, 956], "mobil": 186, "ivy_robot": 186, "sample_spline_path": 186, "rigidmobil": 186, "sample_bodi": 186, "drone": 186, "sample_link": 186, "openai": 186, "swimmer": 186, "cumul": [186, 577, 595, 596], "reward": 186, "supervis": 186, "reinforc": 186, "door": [186, 187], "intersect": 186, "cartpol": 186, "mountain_car": 186, "pendulum": 186, "reacher": 186, "polici": 186, "condit": [186, 210, 211, 852, 862, 863, 887, 891], "learnt": 186, "ture": 186, "ntm": 186, "egospher": 186, "spatial": 186, "esm": 186, "ivy_memori": 186, "egocentr": 186, "room": 186, "inspir": 186, "doubt": 187, "grate": 187, "put": 187, "probe": 187, "undergo": 187, "remark": 187, "surpris": 187, "backward": [187, 339, 530, 533, 702, 763, 765, 945, 946, 949, 951, 954], "lock": 187, "contunu": 187, "minor": 187, "xla": 187, "buffer": 187, "kind": [187, 252, 272, 275, 339, 526, 529, 912, 929, 932, 937, 940], "gold": 187, "dex": 187, "phase": 187, "lax": 187, "scan": 187, "tricki": 187, "predictor": 187, "tight": 187, "driver": 187, "schedul": 187, "dispatch": 187, "Will": 187, "ast": 187, "dynamic": 187, "cond": 187, "jacobian": 187, "checkpoint": 187, "autodiff": 187, "shine": 187, "merci": 187, "superset": 187, "cluster": 187, "compet": 187, "paradigm": 187, "parallelis": [187, 289, 298, 299], "spmd": 187, "mixtur": [187, 651, 653, 656], "expert": 187, "sophist": 187, "depart": 187, "routin": 187, "hundr": 187, "thousand": 187, "deepli": [187, 852, 854], "broadli": 187, "heavili": 187, "supplementari": 187, "Is": 187, "reusabl": 187, "fanci": 187, "fusion": 187, "lose": 187, "vmap": 187, "pmap": 187, "overhead": 187, "ineffici": 187, "eventu": 187, "supplement": 187, "backdoor": 187, "callback": 187, "record": 187, "metric": 187, "somewhat": 187, "outsourc": 187, "inputs_to_ivy_arrai": 188, "gaussian": [198, 199], "leaki": [198, 199, 200], "alpha": [198, 200], "rectifi": [198, 200, 201], "slope": [198, 200], "39": [198, 200, 339, 427, 430, 651, 653, 656, 702, 738, 740, 912, 913, 916], "85": [198, 200, 339, 398, 401], "48": [198, 200, 339, 550, 553, 651, 653, 656, 702, 738, 740, 912, 913, 916], "88": [198, 200, 339, 398, 401, 702, 738, 740, 912, 913, 916], "269": [198, 202], "731": [198, 202], "881": [198, 202], "214": [198, 202], "978": [198, 202], "891": [198, 202], "422": [198, 203], "155": [198, 203], "0768": [198, 203], "231": [198, 203], "693": [198, 203, 772, 783, 786], "49": [198, 203, 339, 550, 553, 912, 913, 916], "147": [198, 203], "363": [198, 203], "3461": [198, 204, 207], "6491": [198, 204, 207], "535": [198, 204, 207], "hyperbol": [198, 209, 339, 349, 352, 362, 365, 374, 377, 410, 413, 546, 549, 568, 572], "55": [198, 209, 689, 695, 702, 738, 740, 912, 913, 916], "501": [198, 209], "array_method": [204, 205, 215, 216, 219, 220, 223, 224, 227, 228, 232, 233, 235, 236, 239, 240, 242, 243, 245, 246, 249, 250, 261, 262, 340, 341, 345, 346, 349, 350, 353, 354, 358, 359, 362, 363, 366, 367, 370, 371, 374, 375, 378, 379, 382, 383, 386, 387, 390, 391, 394, 395, 398, 399, 402, 403, 406, 407, 410, 411, 414, 415, 419, 420, 423, 424, 427, 428, 431, 432, 435, 436, 439, 440, 443, 444, 447, 448, 451, 452, 455, 456, 459, 460, 463, 464, 467, 468, 471, 472, 475, 476, 479, 480, 483, 484, 487, 488, 491, 492, 495, 496, 499, 500, 503, 504, 509, 510, 514, 515, 518, 519, 522, 523, 526, 527, 530, 531, 534, 535, 538, 539, 542, 543, 546, 547, 550, 551, 554, 555, 558, 560, 563, 565, 568, 570, 573, 574, 578, 579, 606, 607, 653, 654, 703, 704, 706, 707, 709, 710, 712, 713, 715, 716, 718, 719, 721, 722, 724, 725, 728, 729, 732, 733, 735, 736, 738, 739, 741, 742, 744, 745, 748, 749, 751, 752, 754, 755, 757, 758, 760, 761, 763, 764, 766, 767, 769, 770, 773, 774, 778, 779, 783, 784, 789, 790, 794, 795, 798, 799, 802, 803, 806, 807, 810, 811, 814, 815, 818, 819, 822, 823, 828, 829, 832, 833, 836, 837, 840, 841, 844, 845, 871, 872, 894, 896, 902, 903, 907, 908, 913, 914, 917, 918, 921, 922, 925, 926, 929, 930, 933, 934, 937, 938, 941, 942, 946, 947, 951, 952], "container_method": [204, 206, 208, 261, 263, 265, 340, 342, 344, 345, 347, 349, 351, 353, 355, 357, 358, 360, 362, 364, 366, 368, 370, 372, 374, 376, 378, 380, 382, 384, 386, 388, 390, 392, 394, 396, 398, 400, 402, 404, 406, 408, 410, 412, 414, 416, 418, 419, 421, 423, 425, 427, 429, 431, 433, 435, 437, 439, 441, 443, 445, 447, 449, 451, 453, 455, 457, 459, 461, 463, 465, 467, 469, 471, 473, 475, 477, 479, 481, 483, 485, 487, 489, 491, 493, 495, 497, 499, 501, 503, 505, 509, 511, 513, 514, 516, 518, 520, 522, 524, 526, 528, 530, 532, 534, 536, 538, 540, 542, 544, 546, 548, 550, 552, 554, 556, 558, 559, 561, 563, 564, 566, 568, 569, 571, 573, 575, 578, 580, 582, 590, 591, 606, 608, 610, 653, 655, 657, 658, 659, 661, 663, 664, 666, 667, 668, 670, 671, 672, 674, 675, 676, 678, 679, 680, 682, 724, 726, 773, 775, 777, 778, 780, 782, 783, 785, 787, 789, 791, 793, 794, 796, 798, 800, 802, 804, 806, 808, 810, 812, 814, 816, 818, 820, 822, 824, 826, 828, 830, 832, 834, 836, 838, 840, 842, 844, 846, 871, 873, 877, 879, 881, 882, 884, 894, 895, 897, 902, 904, 906, 907, 909, 911, 913, 915, 917, 919, 921, 923, 925, 927, 929, 931, 933, 935, 937, 939, 941, 943, 946, 948, 950, 951, 953, 955], "faster": [210, 211], "invoc": [210, 211], "718281828459045": 212, "newaxi": 212, "alia": 212, "pi": 212, "141592653589793": 212, "mathemat": [212, 339, 353, 356, 370, 373, 431, 434, 509, 512, 702, 766, 768], "half": [213, 214, 875, 877, 878, 881, 883], "chosen": [213, 214, 339, 370, 373, 887, 891], "distanc": [213, 214], "adjac": [213, 214], "creation_funct": [213, 214, 215, 217, 218, 219, 221, 222, 223, 225, 226, 227, 229, 230, 238, 239, 241, 242, 244, 245, 247, 248, 249, 251], "interpret": [213, 215, 217, 235, 237], "uniniti": [213, 218, 219, 221], "n_row": [213, 222], "n_col": [213, 222], "elsewher": [213, 222, 887, 891], "row": [213, 222, 702, 748, 750, 751, 753, 875, 876, 887, 890], "column": [213, 222, 702, 715, 717, 744, 746, 748, 750, 751, 753], "__dlpack__": [213, 223, 225, 289, 334], "interchang": [213, 223, 225, 788, 836, 839], "endpoint": [213, 230], "coordin": [213, 232, 234, 339, 370, 373], "cartesian": [213, 232, 234], "ij": [213, 232, 234, 912, 913, 916], "rank": [213, 232, 234, 577, 649, 702, 706, 708, 732, 734, 744, 746, 748, 750, 760, 762, 763, 765, 766, 768, 788, 798, 801, 802, 805, 832, 835, 844, 847, 887, 890, 945, 946, 949, 951, 954], "ni": [213, 232, 234], "xi": [213, 232, 234], "n1": [213, 232, 234], "n2": [213, 232, 234], "n3": [213, 232, 234], "accordingli": [213, 232, 234, 339, 431, 434, 702, 766, 768, 887, 889, 892, 893, 894, 898, 900, 912, 917, 920, 921, 924, 925, 928, 929, 932, 933, 936, 937, 940, 941, 944, 945, 946, 949, 951, 954], "xv": [213, 232, 234], "yv": [213, 232, 234], "triangular": [213, 242, 244, 245, 247, 702, 703, 705, 744, 746], "innermost": [213, 242, 244, 245, 247, 702, 703, 705, 709, 711, 712, 714, 715, 717, 718, 720, 721, 723, 732, 734, 735, 737, 741, 743, 744, 746, 748, 750, 751, 753, 754, 756, 760, 762], "mxn": [213, 242, 244, 245, 247, 702, 712, 714, 732, 734, 735, 737, 741, 743, 744, 746, 754, 756, 760, 762], "defaultdtyp": [252, 253], "defaultfloatdtyp": [252, 254], "float_dtyp": [252, 268, 282], "defaultintdtyp": [252, 255], "dtype_in": [252, 256, 257, 271, 276, 277, 278, 288], "incompat": [252, 260], "occur": [252, 261, 264, 887, 888, 889, 892, 893, 894, 898, 900], "data_type_funct": [252, 261, 264], "closest": [252, 266, 339, 402, 405, 435, 438, 439, 442, 534, 537, 573, 576], "floatdtyp": [252, 268], "int_dtyp": [252, 269, 283], "intdtyp": [252, 269], "followng": [252, 272], "occupi": [252, 272, 275, 577, 633, 634], "ep": [252, 272, 702, 732, 734, 741, 743], "smallest_norm": [252, 272], "precis": [252, 272, 339, 509, 512, 550, 553], "encapsul": [252, 275], "type1": [252, 279], "type2": [252, 279], "arrays_and_dtyp": [252, 280], "ret1": [252, 284], "ret2": [252, 284], "noinspect": [253, 254, 255, 290, 652], "pyshadowingnam": [253, 254, 255, 290, 652], "defaultdevic": [289, 290], "__enter__": 289, "_dev": 289, "initialis": 289, "devcloneditem": [289, 311], "multidevitem": [289, 291, 294], "devclonedit": 289, "multidevit": [289, 292, 295, 298, 299, 303], "devclonednest": 289, "multidevnest": [289, 293, 296], "devdistitem": 289, "devdistit": 289, "devdistnest": 289, "devmanag": [289, 297], "dev_mapp": 289, "da_dim_s": 289, "safety_factor": 289, "min_dev_dim_s": 289, "max_dev_dim_step_ratio": 289, "min_unit_dev_tune_step": 289, "min_sf_tune_step": 289, "starting_split_factor": 289, "max_split_factor_step_s": 289, "tune_dev_alloc": 289, "tune_dev_split": 289, "mapper": [289, 298, 299], "receivess": 289, "safe": [289, 298], "oom": 289, "tune": 289, "da_tune_step": 289, "ds_tune_step": 289, "to_clon": 289, "to_distribut": 289, "multidevic": [289, 298], "parallel": [289, 298, 299], "mutlidevic": [289, 298], "repeated_config_check": 289, "tune_step": 289, "devmapp": [289, 299], "ret_fn": [289, 298, 299], "queue_class": [289, 298, 299], "worker_class": [289, 298, 299], "worker": [289, 298, 299], "used_dev": [289, 298], "sf": [289, 298], "devmappermultiproc": 289, "multidev": [289, 300, 301, 302, 321], "profil": 289, "save_dir": [289, 304], "deviceic": [289, 310], "spread": [289, 321], "139740789224448": [289, 323], "physic": [289, 325], "x3": [289, 327], "x4": [289, 327], "process_specif": [289, 328, 338], "percentag": [289, 328], "ram": [289, 328, 335, 338], "alon": [289, 328, 338], "attr_onli": [289, 329], "chunk": [289, 331, 332, 333], "max_chunk_s": [289, 333], "chunk_siz": [289, 333], "input_ax": [289, 333], "output_ax": [289, 333], "feed": [289, 333], "fist": [289, 333], "stream": [289, 334], "caveat": [289, 334], "portabl": [289, 334, 956], "gb": [289, 335, 338], "reset": [289, 337], "magnitud": [339, 340, 343, 353, 356, 509, 512, 702, 751, 753, 754, 756], "princip": [339, 345, 348, 358, 361, 366, 369], "cosin": [339, 345, 348, 349, 352, 406, 409, 410, 413], "x1_i": [339, 353, 356, 370, 373, 378, 381, 386, 389, 390, 393, 394, 397, 398, 401, 414, 417, 419, 422, 439, 442, 443, 446, 447, 450, 463, 466, 467, 470, 487, 490, 491, 494, 499, 502, 503, 506, 509, 512, 518, 521, 526, 529, 530, 533, 558, 562], "x2_i": [339, 353, 356, 370, 373, 378, 381, 386, 389, 390, 393, 394, 397, 398, 401, 414, 417, 419, 422, 439, 442, 443, 446, 447, 450, 463, 466, 467, 470, 487, 490, 491, 494, 499, 502, 503, 506, 509, 512, 518, 521, 526, 529, 530, 533, 558, 562], "finit": [339, 353, 356, 370, 373, 451, 454, 509, 512, 526, 529, 530, 533], "nor": [339, 353, 356, 509, 512], "nearest": [339, 353, 356, 509, 512, 534, 537], "2019": [339, 353, 356, 431, 434, 509, 512], "commut": [339, 353, 356], "sine": [339, 358, 361, 362, 365, 542, 545, 546, 549], "57": [339, 358, 361, 398, 401, 410, 413], "524": [339, 358, 361], "644": [339, 358, 361], "201": [339, 358, 361, 534, 537], "305": [339, 358, 361], "412": [339, 358, 361], "quotient": [339, 370, 373], "notat": [339, 370, 373, 912, 913, 916], "denot": [339, 370, 373], "quadrant": [339, 370, 373], "3\u03c0": [339, 370, 373], "549": [339, 374, 377], "bitwis": [339, 378, 381, 390, 393, 398, 401, 503, 506], "AND": [339, 378, 381, 491, 494, 945, 946, 949], "binari": [339, 378, 381, 390, 393, 398, 401, 503, 506, 772, 773, 776], "invert": [339, 382, 385], "arithmet": [339, 394, 397, 912, 921, 924], "propag": [339, 394, 397, 912, 917, 920, 921, 924, 925, 928, 933, 936, 937, 940, 941, 944], "thu": [339, 394, 397, 526, 529, 530, 533, 702, 715, 717], "lh": [339, 394, 397], "rh": [339, 394, 397], "xor": [339, 398, 401, 503, 506], "78": [339, 398, 401, 702, 738, 740, 912, 913, 916], "91": [339, 398, 401, 702, 738, 740, 912, 913, 916], "23": [339, 398, 401, 689, 695, 702, 712, 714, 887, 891], "66": [339, 398, 401, 702, 738, 740, 912, 913, 916], "77": [339, 398, 401, 702, 738, 740, 912, 913, 916], "79": [339, 398, 401], "89": [339, 398, 401, 702, 757, 759, 912, 937, 940], "98": [339, 398, 401, 702, 738, 740, 887, 891, 912, 913, 916], "26": [339, 398, 401, 651, 653, 656, 689, 696, 702, 712, 714, 738, 740, 757, 759, 912, 913, 916], "21": [339, 398, 401, 577, 595, 702, 712, 714, 738, 740, 772, 783, 786, 912, 913, 916], "34": [339, 398, 401, 550, 553], "24": [339, 398, 401, 550, 553, 577, 595, 651, 653, 656, 702, 712, 714, 738, 740, 912, 913, 916], "51": [339, 398, 401], "27": [339, 398, 401, 410, 413, 550, 553, 689, 701, 702, 738, 740, 912, 913, 916], "74": [339, 398, 401], "59": [339, 398, 401], "416": [339, 406, 409], "122": [339, 410, 413], "368": [339, 410, 413], "670": [339, 410, 413], "202": [339, 410, 413, 534, 537], "548": [339, 410, 413], "1490": [339, 410, 413], "dividend": [339, 414, 417, 530, 533], "gauss": [339, 423, 426], "exponenti": [339, 423, 426, 427, 430, 487, 490, 526, 529], "logarithm": [339, 427, 430, 471, 474, 475, 478, 479, 482, 483, 486, 487, 490, 702, 747], "72": [339, 427, 430, 651, 653, 656, 702, 738, 740, 912, 913, 916], "fdlibm": [339, 431, 434], "compliant": [339, 431, 434, 495, 498, 499, 502, 912, 917, 920, 921, 924, 925, 928], "greatest": [339, 435, 438, 439, 442], "out_i": [339, 451, 454, 455, 458, 459, 462], "threshold": [339, 507, 508], "exce": [339, 508], "y_i": [339, 514, 517], "expon": [339, 526, 529, 577, 642], "versu": [339, 526, 529], "odd": [339, 526, 529], "modulu": [339, 530, 533], "primarili": [339, 530, 533], "5654": [339, 534, 537], "034": [339, 534, 537], "433": [339, 534, 537], "343": [339, 534, 537], "44": [339, 534, 537, 550, 553, 554, 557, 702, 738, 740, 887, 891, 912, 913, 916], "81": [339, 534, 537, 554, 557, 912, 913, 916], "527": [339, 534, 537], "301": [339, 534, 537], "indistinguish": [339, 550, 553], "infinit": [339, 550, 553], "83": [339, 550, 553], "32455532": [339, 550, 553], "89897949": [339, 550, 553], "50": [339, 550, 553, 702, 738, 740, 887, 890, 912, 913, 916], "31": [339, 550, 553], "169": [339, 550, 553], "47": [339, 550, 553], "73": [339, 550, 553, 702, 703, 705, 870, 871, 874], "93": [339, 550, 553], "35": [339, 550, 553, 689, 701, 702, 706, 708, 887, 891, 912, 913, 916], "09": [339, 554, 557, 689, 701], "61": [339, 554, 557, 772, 773, 776], "546": [339, 563, 567], "842": [339, 563, 567], "916": [339, 563, 567, 772, 773, 776], "996": [339, 563, 567], "328": [339, 563, 567], "real": [339, 568, 572], "462": [339, 568, 572], "604": [339, 568, 572], "984": [339, 568, 572], "997": [339, 568, 572, 870, 871, 874], "decim": [339, 573, 576], "inspect": [577, 583, 960, 961], "downscal": [577, 589, 590, 592], "60": [577, 595, 702, 738, 740, 912, 913, 916], "default_v": [577, 598], "catch_except": [577, 598], "rev": [577, 598], "with_cal": [577, 598], "arrang": [577, 599], "123": [577, 602], "mod": [577, 603], "max_freq": [577, 604], "num_band": [577, 604], "fourier": [577, 604], "band": [577, 604], "linearli": [577, 604, 702, 748, 750], "oppos": [577, 604], "geometr": [577, 604], "seen_set": [577, 615], "local_set": [577, 615], "decrement": [577, 619], "is_arrai": 577, "allow_dupl": [577, 627], "forkserv": [577, 628], "spawn": [577, 628], "hot": [577, 630], "scatter": [577, 630, 633, 634], "tmp_dr": [577, 638], "temporari": [577, 638], "min_denomin": [577, 641], "stabil": [577, 641, 642, 901, 902, 905, 907, 910], "_min_denomin": [577, 641], "min_bas": [577, 642], "100000023841858": [577, 645], "200000047683716": [577, 645], "299999952316284": [577, 645], "400000095367432": [577, 645], "599999904632568": [577, 645], "101": [577, 646], "unpack": [577, 649], "gradienttrack": [651, 652], "delta": [651, 653, 656], "cost": [651, 653, 656, 658, 660, 663, 665, 671, 673, 675, 677, 679, 681, 848, 849, 850, 851], "ws": [651, 653, 656, 658, 660, 663, 665, 671, 673, 675, 677, 679, 681], "en": [651, 653, 656, 658, 660], "wikipedia": [651, 653, 656, 658, 660], "wiki": [651, 653, 656, 658, 660], "stochastic_gradient_desc": [651, 653, 656, 658, 660], "dc": [651, 653, 656, 658, 660, 663, 665, 671, 673, 675, 677, 679, 681], "dw": [651, 653, 656, 658, 660, 663, 665, 671, 673, 675, 677, 679, 681], "averag": [651, 653, 656, 658, 660, 671, 673, 848, 849, 850], "004": [651, 653, 656], "009": [651, 653, 656], "86": [651, 653, 656], "28": [651, 653, 656, 689, 692, 695, 696, 702, 738, 740, 912, 913, 916], "45": [651, 653, 656, 702, 738, 740, 788, 827, 870, 871, 874, 912, 913, 916], "0125": [651, 653, 656], "601": [651, 653, 656], "581": [651, 653, 656], "025": [651, 653, 656], "992": [651, 653, 656], "209": [651, 653, 656, 892, 893], "271": [651, 653, 656], "0717": [651, 653, 656], "142": [651, 653, 656], "182": [651, 653, 656], "624": [651, 653, 656, 875, 881, 883], "06": [651, 653, 656], "02": [651, 653, 656], "744": [651, 653, 656], "626": [651, 653, 656], "65": [651, 653, 656, 702, 738, 740, 912, 913, 916], "024": [651, 653, 656], "096": [651, 653, 656], "216": [651, 653, 656], "384": [651, 653, 656], "ws_new": [651, 658, 660, 663, 665, 671, 673, 675, 677, 679, 681], "retain": [651, 662], "d_in": [689, 690, 691, 692, 693, 694, 695], "fw": [689, 690, 691, 692, 693, 694, 695, 696], "d_out": [689, 690, 691, 692, 693, 694, 695], "wio": [689, 690], "fh": [689, 692, 693, 694, 695, 696], "hwio": [689, 692], "unequ": [689, 692], "unsqueez": [689, 692, 696], "volum": [689, 694], "fd": [689, 694, 695], "dhwio": [689, 694], "256": [689, 695], "258": [689, 695], "128": [689, 695, 702, 738, 740], "333": [689, 696], "inp": [689, 696], "bernoulli": [689, 697], "out_featur": [689, 697, 698], "incom": [689, 698], "outer_batch_shap": [689, 698], "inner_batch_shap": [689, 698], "in_featur": [689, 698], "num_queri": [689, 700, 701], "x_feat_dim": [689, 700], "num_kei": [689, 700, 701], "cont_feat_dim": [689, 700], "numhead": [689, 700], "feat_dim": [689, 700, 701], "out_feat_dim": [689, 700], "score": [689, 701], "04": [689, 701], "03": [689, 701, 870, 871, 874], "08": [689, 701], "decomposit": [702, 703, 705, 744, 746, 751, 753], "symmetr": [702, 703, 705, 715, 717, 718, 720, 769, 771], "u": [702, 703, 705, 751, 753], "577": [702, 703, 705], "707": [702, 703, 705], "vif": [702, 706, 708], "92": [702, 709, 711], "293": [702, 709, 711], "46997": [702, 709, 711], "eigendecomposit": [702, 715, 717], "qlq\u1d40": [702, 715, 717], "orthogon": [702, 715, 717], "eig": [702, 715, 717], "eigenvalu": [702, 715, 717, 718, 720], "eigenvector": [702, 715, 717], "75": [702, 721, 723, 738, 740], "prepend": [702, 724, 727], "singular": [702, 732, 734, 741, 743, 751, 753, 754, 756], "toler": [702, 732, 734, 741, 743], "largest_singular_valu": [702, 732, 734, 741, 743], "array_lik": [702, 738, 740], "33": [702, 738, 740, 870, 871, 874, 912, 913, 916], "36": [702, 738, 740, 912, 913, 916], "84": [702, 738, 740, 912, 913, 916], "105": [702, 738, 740, 772, 773, 776], "112": [702, 738, 740, 912, 913, 916], "104": [702, 738, 740, 912, 913, 916], "120": [702, 738, 740], "moor": [702, 741, 743], "penros": [702, 741, 743], "pseudo": [702, 741, 743], "orthonorm": [702, 744, 746, 751, 753], "logdet": [702, 747], "coeffici": [702, 748, 750], "usvh": [702, 751, 753], "vh": [702, 751, 753], "hermitian": [702, 751, 753], "et": [702, 751, 753], "cetera": [702, 751, 753], "adjoint": [702, 751, 753], "reconstruct": [702, 751, 753, 892, 893, 899], "reconstructed_x": [702, 751, 753], "contract": [702, 757, 759, 912, 913, 916], "doubl": [702, 757, 759], "singleton": [702, 766, 768, 788, 828, 831, 887, 889, 912, 917, 920, 921, 924, 925, 928, 929, 932, 933, 936, 937, 940, 941, 944, 945, 946, 949, 951, 954], "liter": [702, 766, 768], "manhattan": [702, 766, 768], "l2": [702, 766, 768], "euclidean": [702, 766, 768], "mathbf": [702, 769, 771], "mathbb": [702, 769, 771], "skew": [702, 769, 771], "entropi": [772, 773, 776, 778, 781, 783, 786], "predict": [772, 773, 776, 778, 781, 783, 786], "smooth": [772, 773, 776, 778, 781, 783, 786], "223": [772, 773, 776], "357": [772, 773, 776, 783, 786], "511": [772, 773, 776], "discret": [772, 778, 781], "3862944": [772, 778, 781], "35667497": [772, 778, 781], "spars": [772, 783, 786], "logit": [772, 783, 786], "793291": [772, 783, 786], "512926": [772, 783, 786], "before_1": [788, 798, 801, 844, 847], "after_1": [788, 798, 801, 844, 847], "before_n": [788, 798, 801, 844, 847], "after_n": [788, 798, 801, 844, 847], "manipulation_funct": [788, 802, 805], "reorder": [788, 806, 809], "permut": [788, 810, 813, 836, 839], "repetit": [788, 814, 817, 840, 843], "restor": [788, 822, 825], "famili": [788, 832, 835], "intxx": [788, 832, 835], "floatxx": [788, 832, 835], "fomaml_step": 848, "inner_cost_fn": [848, 849, 850], "outer_cost_fn": [848, 849, 850], "inner_grad_step": [848, 849, 850, 851], "inner_learning_r": [848, 849, 850, 851], "inner_optimization_step": [848, 849, 850, 851], "inner_batch_fn": [848, 849, 850], "outer_batch_fn": [848, 849, 850], "average_across_step": [848, 849, 850], "inner_v": [848, 849, 850], "keep_inner_v": [848, 849, 850], "outer_v": [848, 849, 850], "keep_outer_v": [848, 849, 850], "return_inner_v": [848, 849, 850, 851], "num_task": [848, 849, 850, 851], "maml": [848, 849, 850], "recev": [848, 849, 850], "0x7ff75a5f0310": [848, 849, 850, 851], "maml_step": 848, "rece": [848, 850], "reptile_step": 848, "cost_fn": [848, 851], "reptil": [848, 851], "receivng": [848, 851], "all_nested_indic": 852, "include_nest": [852, 853], "_index": [852, 853, 863], "_base": [852, 853, 862, 863], "copy_nest": 852, "to_mut": [852, 854, 864], "mutabl": [852, 854, 864], "insert_into_nest_at_index": 852, "insert_into_nest_at_indic": 852, "map_nest_at_index": 852, "map_nest_at_indic": 852, "multi_index_nest": 852, "nested_ani": 852, "check_nest": [852, 862, 863], "conditon": [852, 862, 863], "nested_indices_wher": 852, "stop_after_n_found": [852, 863], "_depth": [852, 864], "_tuple_check_fn": [852, 864], "_list_check_fn": [852, 864], "_dict_check_fn": [852, 864], "nested_multi_map": 852, "nest0": [852, 865], "ivy_arrai": [852, 865], "funciton": [852, 865], "prune_nest_at_index": 852, "prune_nest_at_indic": 852, "set_nest_at_index": 852, "set_nest_at_indic": 852, "gamma": [870, 871, 874], "beta": [870, 871, 874], "0976": [870, 871, 874], "3452": [870, 871, 874], "2740": [870, 871, 874], "1047": [870, 871, 874], "5886": [870, 871, 874], "2732": [870, 871, 874], "7696": [870, 871, 874], "7024": [870, 871, 874], "2518": [870, 871, 874], "58": [870, 871, 874, 892, 893], "283": [870, 871, 874], "585": [870, 871, 874], "909": [870, 871, 874], "628": [870, 871, 874], "225": [870, 871, 874], "425": [870, 871, 874], "norm_idx": [870, 871, 874], "228": [870, 871, 874], "0285": [870, 871, 874], "199": [870, 871, 874], "204": [870, 871, 874], "population_s": [875, 876], "num_sampl": [875, 876], "draw": [875, 876, 880, 881, 883], "unnorm": [875, 876], "drawn": [875, 876, 877, 878, 880, 881, 883], "home": [875, 876, 880], "uniformli": [875, 877, 878, 881, 883], "highest": [875, 877, 878], "parameter": [875, 880, 881, 883], "6444774682897879": [875, 880], "811": [875, 880], "508": [875, 880], "564": [875, 880], "7268672": [875, 880], "968": [875, 880], "175": [875, 880, 892, 893], "064": [875, 880], "40935726": [875, 880], "556": [875, 880], "26431865": [875, 881, 883], "475": [875, 881, 883], "878": [875, 881, 883], "861": [875, 881, 883], "89150229": [875, 881, 883], "89629126": [875, 881, 883], "94198485": [875, 881, 883], "91405606": [875, 881, 883], "72848724": [875, 881, 883], "7550739": [875, 881, 883], "00109": [875, 881, 883], "occurr": [887, 888, 889, 892, 893], "yield": [887, 891], "43": [887, 891], "x_j": [892, 893, 894, 898, 900], "impli": [892, 893, 894, 898, 900], "inverse_indic": [892, 893, 899], "aggreg": [892, 893], "fourth": [892, 893], "607": [892, 893], "735": [892, 893], "667": [892, 893], "381": [892, 893], "857": [892, 893], "0396": [892, 893], "166": [892, 893], "828": [892, 893], "144": [892, 893], "40501155": [892, 893], "77361575": [892, 893], "97776199": [892, 893], "36831157": [892, 893], "89148434": [892, 893], "9512272": [892, 893], "67542176": [892, 893], "41985657": [892, 893], "23478023": [892, 893], "1141": [892, 893], "8101": [892, 893], "9298": [892, 893], "8460": [892, 893], "2119": [892, 893], "3519": [892, 893], "6252": [892, 893], "4033": [892, 893], "7443": [892, 893], "2577": [892, 893], "3707": [892, 893], "0545": [892, 893], "3238": [892, 893], "5944": [892, 893], "0775": [892, 893], "4327": [892, 893], "176": [892, 893], "889": [892, 893], "763": [892, 893], "071": [892, 893], "262": [892, 893], "456": [892, 893], "114": [892, 893], "349": [892, 893], "615": [892, 893], "594": [892, 893], "335": [892, 893], "212": [892, 893], "457": [892, 893], "827": [892, 893], "set_funct": [892, 894, 898], "ascend": [901, 902, 905], "einstein": [912, 913, 916], "summat": [912, 913, 916], "seq": [912, 913, 916], "jk": [912, 913, 916], "ik": [912, 913, 916], "126": [912, 913, 916], "510": [912, 913, 916], "99": [912, 913, 916], "108": [912, 913, 916], "117": [912, 913, 916], "sentinel": [912, 917, 920, 925, 928], "unsign": [912, 929, 932, 937, 940], "degre": [912, 933, 936, 941, 944], "bessel": [912, 933, 936, 941, 944], "8164966": [912, 933, 936], "varianc": [912, 941, 944], "unbias": [912, 941, 944], "simplicit": [945, 946, 949], "autom": 956, "grow": 956, "ai": 956, "got": 956, "colab": 956, "sharp": 956, "weekli": 956, "event": 956, "immedi": 956, "favorit": 956, "jax_concat": 956, "tf_concat": 956, "np_concat": 956, "mx_concat": 956, "torch_concat": 956, "prompt": 956, "get_devic": 956, "reduce_prod": 956, "gradient_imag": 956, "linalg": 956, "bilinear_resampl": 956, "stack_imag": 956, "neural_net": 956, "ecosystem": [956, 962], "popular": [956, 962], "acceler": 956, "articl": 956, "lenton2021ivi": 956, "inter": 956, "lenton": 956, "daniel": 956, "pardo": 956, "fabio": 956, "falck": 956, "fabian": 956, "jame": 956, "stephen": 956, "clark": 956, "ronald": 956, "journal": 956, "arxiv": 956, "preprint": 956, "2102": 956, "02886": 956, "2021": 956, "add_array_spec": 959, "fn_array_spec": 959}, "objects": {"ivy": [[18, 0, 0, "-", "Array"], [64, 0, 0, "-", "Container"], [0, 0, 0, "-", "backend_handler"], [188, 0, 0, "-", "func_wrapper"], [959, 0, 0, "-", "inspection"], [110, 0, 0, "-", "stateful"], [964, 0, 0, "-", "verbosity"]], "ivy.Array": [[18, 1, 1, "", "__delattr__"], [18, 1, 1, "", "__format__"], [18, 1, 1, "", "__getattribute__"], [18, 1, 1, "", "__init_subclass__"], [18, 1, 1, "", "__new__"], [18, 1, 1, "", "__reduce__"], [18, 1, 1, "", "__reduce_ex__"], [18, 1, 1, "", "__setattr__"], [18, 1, 1, "", "__sizeof__"], [18, 1, 1, "", "__str__"], [18, 1, 1, "", "__subclasshook__"]], "ivy.Container": [[64, 1, 1, "", "__delattr__"], [64, 1, 1, "", "__delitem__"], [64, 1, 1, "", "__format__"], [64, 1, 1, "", "__getattribute__"], [64, 1, 1, "", "__init_subclass__"], [64, 1, 1, "", "__iter__"], [64, 1, 1, "", "__len__"], [64, 1, 1, "", "__new__"], [64, 1, 1, "", "__reduce__"], [64, 1, 1, "", "__reduce_ex__"], [64, 1, 1, "", "__reversed__"], [64, 1, 1, "", "__sizeof__"], [64, 1, 1, "", "__str__"], [64, 1, 1, "", "__subclasshook__"], [64, 1, 1, "", "clear"], [64, 1, 1, "", "fromkeys"], [64, 1, 1, "", "get"], [64, 1, 1, "", "items"], [64, 1, 1, "", "keys"], [64, 1, 1, "", "pop"], [64, 1, 1, "", "popitem"], [64, 1, 1, "", "setdefault"], [64, 1, 1, "", "update"], [64, 1, 1, "", "values"]], "ivy.array": [[19, 0, 0, "-", "activations"], [21, 0, 0, "-", "conversions"], [26, 0, 0, "-", "creation"], [28, 0, 0, "-", "data_type"], [30, 0, 0, "-", "device"], [32, 0, 0, "-", "elementwise"], [34, 0, 0, "-", "general"], [36, 0, 0, "-", "gradients"], [38, 0, 0, "-", "image"], [40, 0, 0, "-", "layers"], [42, 0, 0, "-", "linear_algebra"], [44, 0, 0, "-", "losses"], [46, 0, 0, "-", "manipulation"], [48, 0, 0, "-", "norms"], [50, 0, 0, "-", "random"], [52, 0, 0, "-", "searching"], [54, 0, 0, "-", "set"], [56, 0, 0, "-", "sorting"], [58, 0, 0, "-", "statistical"], [60, 0, 0, "-", "utility"], [62, 0, 0, "-", "wrapping"]], "ivy.array.activations": [[20, 2, 1, "", "ArrayWithActivations"]], "ivy.array.activations.ArrayWithActivations": [[20, 3, 1, "", "softplus"]], "ivy.array.array_methods": [[341, 1, 1, "", "abs"], [346, 1, 1, "", "acos"], [350, 1, 1, "", "acosh"], [654, 1, 1, "", "adam_step"], [354, 1, 1, "", "add"], [947, 1, 1, "", "all"], [579, 1, 1, "", "all_equal"], [952, 1, 1, "", "any"], [903, 1, 1, "", "argsort"], [216, 1, 1, "", "asarray"], [359, 1, 1, "", "asin"], [363, 1, 1, "", "asinh"], [367, 1, 1, "", "atan"], [371, 1, 1, "", "atan2"], [375, 1, 1, "", "atanh"], [774, 1, 1, "", "binary_cross_entropy"], [379, 1, 1, "", "bitwise_and"], [383, 1, 1, "", "bitwise_invert"], [387, 1, 1, "", "bitwise_left_shift"], [391, 1, 1, "", "bitwise_or"], [395, 1, 1, "", "bitwise_right_shift"], [399, 1, 1, "", "bitwise_xor"], [262, 1, 1, "", "can_cast"], [403, 1, 1, "", "ceil"], [704, 1, 1, "", "cholesky"], [790, 1, 1, "", "clip"], [795, 1, 1, "", "concat"], [799, 1, 1, "", "constant_pad"], [407, 1, 1, "", "cos"], [411, 1, 1, "", "cosh"], [707, 1, 1, "", "cross"], [779, 1, 1, "", "cross_entropy"], [710, 1, 1, "", "det"], [713, 1, 1, "", "diagonal"], [415, 1, 1, "", "divide"], [716, 1, 1, "", "eigh"], [719, 1, 1, "", "eigvalsh"], [914, 1, 1, "", "einsum"], [220, 1, 1, "", "empty_like"], [420, 1, 1, "", "equal"], [424, 1, 1, "", "erf"], [428, 1, 1, "", "exp"], [803, 1, 1, "", "expand_dims"], [432, 1, 1, "", "expm1"], [807, 1, 1, "", "flip"], [436, 1, 1, "", "floor"], [440, 1, 1, "", "floor_divide"], [224, 1, 1, "", "from_dlpack"], [228, 1, 1, "", "full_like"], [607, 1, 1, "", "gather_nd"], [444, 1, 1, "", "greater"], [448, 1, 1, "", "greater_equal"], [722, 1, 1, "", "inv"], [452, 1, 1, "", "isfinite"], [456, 1, 1, "", "isinf"], [460, 1, 1, "", "isnan"], [872, 1, 1, "", "layer_norm"], [464, 1, 1, "", "less"], [468, 1, 1, "", "less_equal"], [472, 1, 1, "", "log"], [476, 1, 1, "", "log10"], [480, 1, 1, "", "log1p"], [484, 1, 1, "", "log2"], [488, 1, 1, "", "logaddexp"], [492, 1, 1, "", "logical_and"], [496, 1, 1, "", "logical_not"], [500, 1, 1, "", "logical_or"], [504, 1, 1, "", "logical_xor"], [725, 1, 1, "", "matmul"], [729, 1, 1, "", "matrix_norm"], [733, 1, 1, "", "matrix_rank"], [736, 1, 1, "", "matrix_transpose"], [918, 1, 1, "", "max"], [922, 1, 1, "", "mean"], [233, 1, 1, "", "meshgrid"], [926, 1, 1, "", "min"], [510, 1, 1, "", "multiply"], [236, 1, 1, "", "native_array"], [515, 1, 1, "", "negative"], [519, 1, 1, "", "not_equal"], [240, 1, 1, "", "ones_like"], [739, 1, 1, "", "outer"], [811, 1, 1, "", "permute_dims"], [742, 1, 1, "", "pinv"], [523, 1, 1, "", "positive"], [527, 1, 1, "", "pow"], [930, 1, 1, "", "prod"], [745, 1, 1, "", "qr"], [531, 1, 1, "", "remainder"], [815, 1, 1, "", "repeat"], [819, 1, 1, "", "reshape"], [823, 1, 1, "", "roll"], [535, 1, 1, "", "round"], [539, 1, 1, "", "sign"], [543, 1, 1, "", "sin"], [547, 1, 1, "", "sinh"], [205, 1, 1, "", "softplus"], [749, 1, 1, "", "solve"], [908, 1, 1, "", "sort"], [784, 1, 1, "", "sparse_cross_entropy"], [551, 1, 1, "", "sqrt"], [555, 1, 1, "", "square"], [829, 1, 1, "", "squeeze"], [833, 1, 1, "", "stack"], [934, 1, 1, "", "std"], [560, 1, 1, "", "subtract"], [938, 1, 1, "", "sum"], [752, 1, 1, "", "svd"], [755, 1, 1, "", "svdvals"], [837, 1, 1, "", "swapaxes"], [565, 1, 1, "", "tan"], [570, 1, 1, "", "tanh"], [758, 1, 1, "", "tensordot"], [841, 1, 1, "", "tile"], [761, 1, 1, "", "trace"], [243, 1, 1, "", "tril"], [246, 1, 1, "", "triu"], [574, 1, 1, "", "trunc"], [896, 1, 1, "", "unique_counts"], [942, 1, 1, "", "var"], [764, 1, 1, "", "vecdot"], [767, 1, 1, "", "vector_norm"], [770, 1, 1, "", "vector_to_skew_symmetric_matrix"], [845, 1, 1, "", "zero_pad"], [250, 1, 1, "", "zeros_like"]], "ivy.array.conversions": [[22, 1, 1, "", "args_to_ivy"], [23, 1, 1, "", "args_to_native"], [24, 1, 1, "", "to_ivy"], [25, 1, 1, "", "to_native"]], "ivy.array.creation": [[27, 2, 1, "", "ArrayWithCreation"]], "ivy.array.creation.ArrayWithCreation": [[27, 3, 1, "", "asarray"], [27, 3, 1, "", "empty_like"], [27, 3, 1, "", "from_dlpack"], [27, 3, 1, "", "full_like"], [27, 3, 1, "", "meshgrid"], [27, 3, 1, "", "native_array"], [27, 3, 1, "", "ones_like"], [27, 3, 1, "", "tril"], [27, 3, 1, "", "triu"], [27, 3, 1, "", "zeros_like"]], "ivy.array.data_type": [[29, 2, 1, "", "ArrayWithDataTypes"]], "ivy.array.data_type.ArrayWithDataTypes": [[29, 3, 1, "", "can_cast"]], "ivy.array.device": [[31, 2, 1, "", "ArrayWithDevice"]], "ivy.array.elementwise": [[33, 2, 1, "", "ArrayWithElementwise"]], "ivy.array.elementwise.ArrayWithElementwise": [[33, 3, 1, "", "abs"], [33, 3, 1, "", "acos"], [33, 3, 1, "", "acosh"], [33, 3, 1, "", "add"], [33, 3, 1, "", "asin"], [33, 3, 1, "", "asinh"], [33, 3, 1, "", "atan"], [33, 3, 1, "", "atan2"], [33, 3, 1, "", "atanh"], [33, 3, 1, "", "bitwise_and"], [33, 3, 1, "", "bitwise_invert"], [33, 3, 1, "", "bitwise_left_shift"], [33, 3, 1, "", "bitwise_or"], [33, 3, 1, "", "bitwise_right_shift"], [33, 3, 1, "", "bitwise_xor"], [33, 3, 1, "", "ceil"], [33, 3, 1, "", "cos"], [33, 3, 1, "", "cosh"], [33, 3, 1, "", "divide"], [33, 3, 1, "", "equal"], [33, 3, 1, "", "erf"], [33, 3, 1, "", "exp"], [33, 3, 1, "", "expm1"], [33, 3, 1, "", "floor"], [33, 3, 1, "", "floor_divide"], [33, 3, 1, "", "greater"], [33, 3, 1, "", "greater_equal"], [33, 3, 1, "", "isfinite"], [33, 3, 1, "", "isinf"], [33, 3, 1, "", "isnan"], [33, 3, 1, "", "less"], [33, 3, 1, "", "less_equal"], [33, 3, 1, "", "log"], [33, 3, 1, "", "log10"], [33, 3, 1, "", "log1p"], [33, 3, 1, "", "log2"], [33, 3, 1, "", "logaddexp"], [33, 3, 1, "", "logical_and"], [33, 3, 1, "", "logical_not"], [33, 3, 1, "", "logical_or"], [33, 3, 1, "", "logical_xor"], [33, 3, 1, "", "multiply"], [33, 3, 1, "", "negative"], [33, 3, 1, "", "not_equal"], [33, 3, 1, "", "positive"], [33, 3, 1, "", "pow"], [33, 3, 1, "", "remainder"], [33, 3, 1, "", "round"], [33, 3, 1, "", "sign"], [33, 3, 1, "", "sin"], [33, 3, 1, "", "sinh"], [33, 3, 1, "", "sqrt"], [33, 3, 1, "", "square"], [33, 3, 1, "", "subtract"], [33, 3, 1, "", "tan"], [33, 3, 1, "", "tanh"], [33, 3, 1, "", "trunc"]], "ivy.array.general": [[35, 2, 1, "", "ArrayWithGeneral"]], "ivy.array.general.ArrayWithGeneral": [[35, 3, 1, "", "all_equal"], [35, 3, 1, "", "gather_nd"]], "ivy.array.gradients": [[37, 2, 1, "", "ArrayWithGradients"]], "ivy.array.gradients.ArrayWithGradients": [[37, 3, 1, "", "adam_step"]], "ivy.array.image": [[39, 2, 1, "", "ArrayWithImage"]], "ivy.array.layers": [[41, 2, 1, "", "ArrayWithLayers"]], "ivy.array.linear_algebra": [[43, 2, 1, "", "ArrayWithLinearAlgebra"]], "ivy.array.linear_algebra.ArrayWithLinearAlgebra": [[43, 3, 1, "", "cholesky"], [43, 3, 1, "", "cross"], [43, 3, 1, "", "det"], [43, 3, 1, "", "diagonal"], [43, 3, 1, "", "eigh"], [43, 3, 1, "", "eigvalsh"], [43, 3, 1, "", "inv"], [43, 3, 1, "", "matmul"], [43, 3, 1, "", "matrix_norm"], [43, 3, 1, "", "matrix_rank"], [43, 3, 1, "", "matrix_transpose"], [43, 3, 1, "", "outer"], [43, 3, 1, "", "pinv"], [43, 3, 1, "", "qr"], [43, 3, 1, "", "solve"], [43, 3, 1, "", "svd"], [43, 3, 1, "", "svdvals"], [43, 3, 1, "", "tensordot"], [43, 3, 1, "", "trace"], [43, 3, 1, "", "vecdot"], [43, 3, 1, "", "vector_norm"], [43, 3, 1, "", "vector_to_skew_symmetric_matrix"]], "ivy.array.losses": [[45, 2, 1, "", "ArrayWithLosses"]], "ivy.array.losses.ArrayWithLosses": [[45, 3, 1, "", "binary_cross_entropy"], [45, 3, 1, "", "cross_entropy"], [45, 3, 1, "", "sparse_cross_entropy"]], "ivy.array.manipulation": [[47, 2, 1, "", "ArrayWithManipulation"]], "ivy.array.manipulation.ArrayWithManipulation": [[47, 3, 1, "", "clip"], [47, 3, 1, "", "concat"], [47, 3, 1, "", "constant_pad"], [47, 3, 1, "", "expand_dims"], [47, 3, 1, "", "flip"], [47, 3, 1, "", "permute_dims"], [47, 3, 1, "", "repeat"], [47, 3, 1, "", "reshape"], [47, 3, 1, "", "roll"], [47, 3, 1, "", "squeeze"], [47, 3, 1, "", "stack"], [47, 3, 1, "", "swapaxes"], [47, 3, 1, "", "tile"], [47, 3, 1, "", "zero_pad"]], "ivy.array.norms": [[49, 2, 1, "", "ArrayWithNorms"]], "ivy.array.norms.ArrayWithNorms": [[49, 3, 1, "", "layer_norm"]], "ivy.array.random": [[51, 2, 1, "", "ArrayWithRandom"]], "ivy.array.searching": [[53, 2, 1, "", "ArrayWithSearching"]], "ivy.array.set": [[55, 2, 1, "", "ArrayWithSet"]], "ivy.array.set.ArrayWithSet": [[55, 3, 1, "", "unique_counts"]], "ivy.array.sorting": [[57, 2, 1, "", "ArrayWithSorting"]], "ivy.array.sorting.ArrayWithSorting": [[57, 3, 1, "", "argsort"], [57, 3, 1, "", "sort"]], "ivy.array.statistical": [[59, 2, 1, "", "ArrayWithStatistical"]], "ivy.array.statistical.ArrayWithStatistical": [[59, 3, 1, "", "einsum"], [59, 3, 1, "", "max"], [59, 3, 1, "", "mean"], [59, 3, 1, "", "min"], [59, 3, 1, "", "prod"], [59, 3, 1, "", "std"], [59, 3, 1, "", "sum"], [59, 3, 1, "", "var"]], "ivy.array.utility": [[61, 2, 1, "", "ArrayWithUtility"]], "ivy.array.utility.ArrayWithUtility": [[61, 3, 1, "", "all"], [61, 3, 1, "", "any"]], "ivy.array.wrapping": [[63, 1, 1, "", "add_ivy_array_instance_methods"]], "ivy.backend_handler": [[0, 2, 1, "", "ContextManager"], [2, 1, 1, "", "choose_random_backend"], [3, 1, 1, "", "clear_backend_stack"], [4, 1, 1, "", "current_backend"], [5, 1, 1, "", "get_backend"], [6, 1, 1, "", "set_backend"], [7, 1, 1, "", "try_import_ivy_jax"], [8, 1, 1, "", "try_import_ivy_mxnet"], [9, 1, 1, "", "try_import_ivy_numpy"], [10, 1, 1, "", "try_import_ivy_tf"], [11, 1, 1, "", "try_import_ivy_torch"], [12, 1, 1, "", "unset_backend"]], "ivy.backend_handler.ContextManager": [[0, 3, 1, "", "__init__"]], "ivy.container": [[65, 0, 0, "-", "activations"], [67, 0, 0, "-", "base"], [69, 0, 0, "-", "container"], [72, 0, 0, "-", "creation"], [74, 0, 0, "-", "data_type"], [76, 0, 0, "-", "device"], [78, 0, 0, "-", "elementwise"], [80, 0, 0, "-", "general"], [82, 0, 0, "-", "gradients"], [84, 0, 0, "-", "image"], [86, 0, 0, "-", "layers"], [88, 0, 0, "-", "linear_algebra"], [90, 0, 0, "-", "losses"], [92, 0, 0, "-", "manipulation"], [94, 0, 0, "-", "norms"], [96, 0, 0, "-", "random"], [98, 0, 0, "-", "searching"], [100, 0, 0, "-", "set"], [102, 0, 0, "-", "sorting"], [104, 0, 0, "-", "statistical"], [106, 0, 0, "-", "utility"], [108, 0, 0, "-", "wrapping"]], "ivy.container.activations": [[66, 2, 1, "", "ContainerWithActivations"]], "ivy.container.activations.ContainerWithActivations": [[66, 3, 1, "", "softplus"], [66, 3, 1, "", "static_softplus"]], "ivy.container.base": [[68, 2, 1, "", "ContainerBase"]], "ivy.container.base.ContainerBase": [[68, 3, 1, "", "__getitem__"], [68, 3, 1, "", "__init__"], [68, 3, 1, "", "__setitem__"], [68, 3, 1, "", "all_false"], [68, 3, 1, "", "all_key_chains"], [68, 3, 1, "", "all_true"], [68, 3, 1, "", "arrays_as_lists"], [68, 3, 1, "", "as_arrays"], [68, 3, 1, "", "as_bools"], [68, 3, 1, "", "as_ones"], [68, 3, 1, "", "as_random_uniform"], [68, 3, 1, "", "as_variables"], [68, 3, 1, "", "as_zeros"], [68, 3, 1, "", "assert_contains_sub_container"], [68, 3, 1, "", "assert_contains_sub_structure"], [68, 3, 1, "", "assert_identical"], [68, 3, 1, "", "assert_identical_structure"], [68, 3, 1, "", "at_key_chain"], [68, 3, 1, "", "at_key_chains"], [68, 3, 1, "", "at_keys"], [68, 3, 1, "", "clip"], [68, 3, 1, "", "combine"], [68, 3, 1, "", "common_key_chains"], [68, 4, 1, "", "config"], [68, 3, 1, "", "contains_sub_container"], [68, 3, 1, "", "contains_sub_structure"], [68, 3, 1, "", "copy"], [68, 3, 1, "", "create_if_absent"], [68, 3, 1, "", "cutoff_at_depth"], [68, 3, 1, "", "cutoff_at_height"], [68, 3, 1, "", "deep_copy"], [68, 4, 1, "", "dev"], [68, 3, 1, "", "dev_clone"], [68, 3, 1, "", "dev_dist"], [68, 4, 1, "", "dev_str"], [68, 3, 1, "", "diff"], [68, 3, 1, "", "dtype"], [68, 3, 1, "", "einops_rearrange"], [68, 3, 1, "", "einops_reduce"], [68, 3, 1, "", "einops_repeat"], [68, 3, 1, "", "find_sub_container"], [68, 3, 1, "", "find_sub_structure"], [68, 3, 1, "", "flatten_key_chain"], [68, 3, 1, "", "flatten_key_chains"], [68, 3, 1, "", "format_key_chains"], [68, 3, 1, "", "from_disk_as_hdf5"], [68, 3, 1, "", "from_disk_as_json"], [68, 3, 1, "", "from_disk_as_pickled"], [68, 3, 1, "", "from_flat_list"], [68, 3, 1, "", "from_numpy"], [68, 3, 1, "", "gather"], [68, 3, 1, "", "gather_nd"], [68, 3, 1, "", "h5_file_size"], [68, 3, 1, "", "handle_inplace"], [68, 3, 1, "", "has_key"], [68, 3, 1, "", "has_key_chain"], [68, 3, 1, "", "has_nans"], [68, 3, 1, "", "identical"], [68, 3, 1, "", "identical_array_shapes"], [68, 3, 1, "", "identical_configs"], [68, 3, 1, "", "identical_structure"], [68, 3, 1, "", "if_exists"], [68, 3, 1, "", "inplace_update"], [68, 4, 1, "", "ivy"], [68, 3, 1, "", "key_chains_containing"], [68, 3, 1, "", "list_join"], [68, 3, 1, "", "list_stack"], [68, 3, 1, "", "map"], [68, 3, 1, "", "map_conts"], [68, 3, 1, "", "matrix_norm"], [68, 4, 1, "", "max_depth"], [68, 3, 1, "", "maximum"], [68, 3, 1, "", "minimum"], [68, 3, 1, "", "multi_map"], [68, 3, 1, "", "multi_map_in_static_method"], [68, 3, 1, "", "num_arrays"], [68, 3, 1, "", "overwrite_at_key_chain"], [68, 3, 1, "", "overwrite_at_key_chains"], [68, 3, 1, "", "prune_empty"], [68, 3, 1, "", "prune_key_chain"], [68, 3, 1, "", "prune_key_chains"], [68, 3, 1, "", "prune_key_from_key_chains"], [68, 3, 1, "", "prune_keys"], [68, 3, 1, "", "prune_keys_from_key_chains"], [68, 3, 1, "", "reduce"], [68, 3, 1, "", "remove_key_length_limit"], [68, 3, 1, "", "remove_print_limit"], [68, 3, 1, "", "reshape_like"], [68, 3, 1, "", "restructure"], [68, 3, 1, "", "restructure_key_chains"], [68, 3, 1, "", "set_at_key_chain"], [68, 3, 1, "", "set_at_key_chains"], [68, 3, 1, "", "set_at_keys"], [68, 3, 1, "", "set_framework"], [68, 3, 1, "", "set_ivy_backend"], [68, 4, 1, "", "shape"], [68, 4, 1, "", "shapes"], [68, 3, 1, "", "show"], [68, 3, 1, "", "show_sub_container"], [68, 3, 1, "", "shuffle"], [68, 3, 1, "", "shuffle_h5_file"], [68, 3, 1, "", "size_ordered_arrays"], [68, 3, 1, "", "slice_keys"], [68, 3, 1, "", "slice_via_key"], [68, 3, 1, "", "sort_by_key"], [68, 3, 1, "", "split"], [68, 3, 1, "", "stop_gradients"], [68, 3, 1, "", "structural_diff"], [68, 3, 1, "", "to_device"], [68, 3, 1, "", "to_dict"], [68, 3, 1, "", "to_disk_as_hdf5"], [68, 3, 1, "", "to_disk_as_json"], [68, 3, 1, "", "to_disk_as_pickled"], [68, 3, 1, "", "to_flat_list"], [68, 3, 1, "", "to_iterator"], [68, 3, 1, "", "to_iterator_keys"], [68, 3, 1, "", "to_iterator_values"], [68, 3, 1, "", "to_ivy"], [68, 3, 1, "", "to_jsonable"], [68, 3, 1, "", "to_list"], [68, 3, 1, "", "to_multi_dev"], [68, 3, 1, "", "to_native"], [68, 3, 1, "", "to_numpy"], [68, 3, 1, "", "to_raw"], [68, 3, 1, "", "trim_key"], [68, 3, 1, "", "try_kc"], [68, 3, 1, "", "unify"], [68, 3, 1, "", "unstack"], [68, 3, 1, "", "update_config"], [68, 3, 1, "", "vector_norm"], [68, 3, 1, "", "with_default_key_color"], [68, 3, 1, "", "with_entries_as_lists"], [68, 3, 1, "", "with_ivy_backend"], [68, 3, 1, "", "with_key_length_limit"], [68, 3, 1, "", "with_print_indent"], [68, 3, 1, "", "with_print_limit"], [68, 3, 1, "", "with_print_line_spacing"]], "ivy.container.container": [[70, 2, 1, "", "Container"], [71, 2, 1, "", "MultiDevContainer"]], "ivy.container.container.Container": [[70, 3, 1, "", "__add__"], [70, 3, 1, "", "__init__"], [70, 3, 1, "", "__radd__"], [70, 3, 1, "", "arange"], [70, 3, 1, "", "arg_info"], [70, 3, 1, "", "arg_names"], [70, 3, 1, "", "argmax"], [70, 3, 1, "", "argmin"], [70, 3, 1, "", "array"], [70, 3, 1, "", "array_equal"], [70, 3, 1, "", "arrays_equal"], [70, 3, 1, "", "as_ivy_dev"], [70, 3, 1, "", "as_ivy_dtype"], [70, 3, 1, "", "as_native_dev"], [70, 3, 1, "", "as_native_dtype"], [70, 3, 1, "", "asarray"], [70, 3, 1, "", "assert_supports_inplace"], [70, 3, 1, "", "astype"], [70, 3, 1, "", "broadcast_arrays"], [70, 3, 1, "", "broadcast_to"], [70, 3, 1, "", "cache_fn"], [70, 3, 1, "", "cholesky"], [70, 3, 1, "", "clear_mem_on_dev"], [70, 3, 1, "", "clip_matrix_norm"], [70, 3, 1, "", "closest_valid_dtype"], [70, 3, 1, "", "container_types"], [70, 3, 1, "", "conv1d"], [70, 3, 1, "", "conv1d_transpose"], [70, 3, 1, "", "conv2d"], [70, 3, 1, "", "conv2d_transpose"], [70, 3, 1, "", "conv3d"], [70, 3, 1, "", "conv3d_transpose"], [70, 3, 1, "", "copy_array"], [70, 3, 1, "", "cross"], [70, 3, 1, "", "cumprod"], [70, 3, 1, "", "cumsum"], [70, 3, 1, "", "current_backend"], [70, 3, 1, "", "current_backend_str"], [70, 3, 1, "", "default"], [70, 3, 1, "", "default_device"], [70, 3, 1, "", "default_dtype"], [70, 3, 1, "", "default_float_dtype"], [70, 3, 1, "", "default_int_dtype"], [70, 3, 1, "", "depthwise_conv2d"], [70, 3, 1, "", "det"], [70, 3, 1, "", "dev_clone_array"], [70, 3, 1, "", "dev_clone_iter"], [70, 3, 1, "", "dev_clone_nest"], [70, 3, 1, "", "dev_dist_array"], [70, 3, 1, "", "dev_dist_iter"], [70, 3, 1, "", "dev_dist_nest"], [70, 3, 1, "", "dev_unify"], [70, 3, 1, "", "dev_unify_array"], [70, 3, 1, "", "dev_unify_iter"], [70, 3, 1, "", "dev_unify_nest"], [70, 3, 1, "", "dev_util"], [70, 3, 1, "", "diagonal"], [70, 3, 1, "", "dropout"], [70, 3, 1, "", "dtype_bits"], [70, 3, 1, "", "eigh"], [70, 3, 1, "", "eigvalsh"], [70, 3, 1, "", "empty"], [70, 3, 1, "", "empty_like"], [70, 3, 1, "", "execute_with_gradients"], [70, 3, 1, "", "exists"], [70, 3, 1, "", "eye"], [70, 3, 1, "", "finfo"], [70, 3, 1, "", "floormod"], [70, 3, 1, "", "fourier_encode"], [70, 3, 1, "", "from_dlpack"], [70, 3, 1, "", "full"], [70, 3, 1, "", "full_like"], [70, 3, 1, "", "function_supported_dtypes"], [70, 3, 1, "", "function_unsupported_dtypes"], [70, 3, 1, "", "gelu"], [70, 3, 1, "", "get_all_arrays_in_memory"], [70, 3, 1, "", "get_all_ivy_arrays_on_dev"], [70, 3, 1, "", "get_min_base"], [70, 3, 1, "", "get_min_denominator"], [70, 3, 1, "", "get_num_dims"], [70, 3, 1, "", "get_referrers_recursive"], [70, 3, 1, "", "gpu_is_available"], [70, 3, 1, "", "handle_nestable"], [70, 3, 1, "", "handle_out_argument"], [70, 3, 1, "", "iinfo"], [70, 3, 1, "", "indices_where"], [70, 3, 1, "", "infer_device"], [70, 3, 1, "", "infer_dtype"], [70, 3, 1, "", "inplace_arrays_supported"], [70, 3, 1, "", "inplace_decrement"], [70, 3, 1, "", "inplace_increment"], [70, 3, 1, "", "inplace_variables_supported"], [70, 3, 1, "", "inputs_to_native_arrays"], [70, 3, 1, "", "inv"], [70, 3, 1, "", "invalid_dtype"], [70, 3, 1, "", "is_float_dtype"], [70, 3, 1, "", "is_int_dtype"], [70, 3, 1, "", "is_ivy_container"], [70, 3, 1, "", "leaky_relu"], [70, 3, 1, "", "linear"], [70, 3, 1, "", "linspace"], [70, 3, 1, "", "logspace"], [70, 3, 1, "", "lstm_update"], [70, 3, 1, "", "match_kwargs"], [70, 3, 1, "", "matrix_power"], [70, 3, 1, "", "matrix_rank"], [70, 3, 1, "", "matrix_transpose"], [70, 3, 1, "", "meshgrid"], [70, 3, 1, "", "multi_head_attention"], [70, 3, 1, "", "multinomial"], [70, 3, 1, "", "multiprocessing"], [70, 3, 1, "", "native_array"], [70, 3, 1, "", "nonzero"], [70, 3, 1, "", "num_arrays_in_memory"], [70, 3, 1, "", "num_cpu_cores"], [70, 3, 1, "", "num_gpus"], [70, 3, 1, "", "num_ivy_arrays_on_dev"], [70, 3, 1, "", "one_hot"], [70, 3, 1, "", "ones"], [70, 3, 1, "", "ones_like"], [70, 3, 1, "", "outer"], [70, 3, 1, "", "outputs_to_ivy_arrays"], [70, 3, 1, "", "percent_used_mem_on_dev"], [70, 3, 1, "", "pinv"], [70, 3, 1, "", "print_all_arrays_in_memory"], [70, 3, 1, "", "print_all_ivy_arrays_on_dev"], [70, 3, 1, "", "promote_types"], [70, 3, 1, "", "qr"], [70, 3, 1, "", "queue_timeout"], [70, 3, 1, "", "randint"], [70, 3, 1, "", "random_normal"], [70, 3, 1, "", "relu"], [70, 3, 1, "", "result_type"], [70, 3, 1, "", "scaled_dot_product_attention"], [70, 3, 1, "", "scatter_flat"], [70, 3, 1, "", "scatter_nd"], [70, 3, 1, "", "seed"], [70, 3, 1, "", "set_default_device"], [70, 3, 1, "", "set_default_dtype"], [70, 3, 1, "", "set_default_float_dtype"], [70, 3, 1, "", "set_default_int_dtype"], [70, 3, 1, "", "set_min_base"], [70, 3, 1, "", "set_min_denominator"], [70, 3, 1, "", "set_queue_timeout"], [70, 3, 1, "", "set_split_factor"], [70, 3, 1, "", "set_tmp_dir"], [70, 3, 1, "", "set_with_grads"], [70, 3, 1, "", "shape_to_tuple"], [70, 3, 1, "", "sigmoid"], [70, 3, 1, "", "slogdet"], [70, 3, 1, "", "softmax"], [70, 3, 1, "", "solve"], [70, 3, 1, "", "split_factor"], [70, 3, 1, "", "split_func_call"], [70, 3, 1, "", "stable_divide"], [70, 3, 1, "", "stable_pow"], [70, 3, 1, "", "static_acos"], [70, 3, 1, "", "static_acosh"], [70, 3, 1, "", "static_arange"], [70, 3, 1, "", "static_arg_info"], [70, 3, 1, "", "static_arg_names"], [70, 3, 1, "", "static_argmax"], [70, 3, 1, "", "static_argmin"], [70, 3, 1, "", "static_array"], [70, 3, 1, "", "static_array_equal"], [70, 3, 1, "", "static_arrays_equal"], [70, 3, 1, "", "static_as_ivy_dev"], [70, 3, 1, "", "static_as_ivy_dtype"], [70, 3, 1, "", "static_as_native_dev"], [70, 3, 1, "", "static_as_native_dtype"], [70, 3, 1, "", "static_asarray"], [70, 3, 1, "", "static_asin"], [70, 3, 1, "", "static_asinh"], [70, 3, 1, "", "static_assert_supports_inplace"], [70, 3, 1, "", "static_astype"], [70, 3, 1, "", "static_atan"], [70, 3, 1, "", "static_atan2"], [70, 3, 1, "", "static_atanh"], [70, 3, 1, "", "static_bitwise_and"], [70, 3, 1, "", "static_bitwise_invert"], [70, 3, 1, "", "static_bitwise_left_shift"], [70, 3, 1, "", "static_bitwise_or"], [70, 3, 1, "", "static_bitwise_right_shift"], [70, 3, 1, "", "static_bitwise_xor"], [70, 3, 1, "", "static_broadcast_arrays"], [70, 3, 1, "", "static_broadcast_to"], [70, 3, 1, "", "static_cache_fn"], [70, 3, 1, "", "static_ceil"], [70, 3, 1, "", "static_cholesky"], [70, 3, 1, "", "static_clear_mem_on_dev"], [70, 3, 1, "", "static_clip_matrix_norm"], [70, 3, 1, "", "static_clip_vector_norm"], [70, 3, 1, "", "static_closest_valid_dtype"], [70, 3, 1, "", "static_concat"], [70, 3, 1, "", "static_constant_pad"], [70, 3, 1, "", "static_container_types"], [70, 3, 1, "", "static_conv1d"], [70, 3, 1, "", "static_conv1d_transpose"], [70, 3, 1, "", "static_conv2d"], [70, 3, 1, "", "static_conv2d_transpose"], [70, 3, 1, "", "static_conv3d"], [70, 3, 1, "", "static_conv3d_transpose"], [70, 3, 1, "", "static_copy_array"], [70, 3, 1, "", "static_cos"], [70, 3, 1, "", "static_cosh"], [70, 3, 1, "", "static_cross"], [70, 3, 1, "", "static_cumprod"], [70, 3, 1, "", "static_cumsum"], [70, 3, 1, "", "static_current_backend"], [70, 3, 1, "", "static_current_backend_str"], [70, 3, 1, "", "static_default"], [70, 3, 1, "", "static_default_device"], [70, 3, 1, "", "static_default_dtype"], [70, 3, 1, "", "static_default_float_dtype"], [70, 3, 1, "", "static_default_int_dtype"], [70, 3, 1, "", "static_depthwise_conv2d"], [70, 3, 1, "", "static_det"], [70, 3, 1, "", "static_dev"], [70, 3, 1, "", "static_dev_clone"], [70, 3, 1, "", "static_dev_clone_array"], [70, 3, 1, "", "static_dev_clone_iter"], [70, 3, 1, "", "static_dev_clone_nest"], [70, 3, 1, "", "static_dev_dist"], [70, 3, 1, "", "static_dev_dist_array"], [70, 3, 1, "", "static_dev_dist_iter"], [70, 3, 1, "", "static_dev_dist_nest"], [70, 3, 1, "", "static_dev_unify"], [70, 3, 1, "", "static_dev_unify_array"], [70, 3, 1, "", "static_dev_unify_iter"], [70, 3, 1, "", "static_dev_unify_nest"], [70, 3, 1, "", "static_dev_util"], [70, 3, 1, "", "static_diagonal"], [70, 3, 1, "", "static_dropout"], [70, 3, 1, "", "static_dtype"], [70, 3, 1, "", "static_dtype_bits"], [70, 3, 1, "", "static_eigh"], [70, 3, 1, "", "static_eigvalsh"], [70, 3, 1, "", "static_einops_rearrange"], [70, 3, 1, "", "static_einops_reduce"], [70, 3, 1, "", "static_einops_repeat"], [70, 3, 1, "", "static_einsum"], [70, 3, 1, "", "static_empty"], [70, 3, 1, "", "static_empty_like"], [70, 3, 1, "", "static_equal"], [70, 3, 1, "", "static_erf"], [70, 3, 1, "", "static_execute_with_gradients"], [70, 3, 1, "", "static_exists"], [70, 3, 1, "", "static_exp"], [70, 3, 1, "", "static_expand_dims"], [70, 3, 1, "", "static_expm1"], [70, 3, 1, "", "static_eye"], [70, 3, 1, "", "static_finfo"], [70, 3, 1, "", "static_flip"], [70, 3, 1, "", "static_floor"], [70, 3, 1, "", "static_floor_divide"], [70, 3, 1, "", "static_floormod"], [70, 3, 1, "", "static_fourier_encode"], [70, 3, 1, "", "static_from_dlpack"], [70, 3, 1, "", "static_full"], [70, 3, 1, "", "static_full_like"], [70, 3, 1, "", "static_function_supported_dtypes"], [70, 3, 1, "", "static_function_unsupported_dtypes"], [70, 3, 1, "", "static_gather"], [70, 3, 1, "", "static_gelu"], [70, 3, 1, "", "static_get_all_arrays_in_memory"], [70, 3, 1, "", "static_get_all_ivy_arrays_on_dev"], [70, 3, 1, "", "static_get_min_base"], [70, 3, 1, "", "static_get_min_denominator"], [70, 3, 1, "", "static_get_num_dims"], [70, 3, 1, "", "static_get_referrers_recursive"], [70, 3, 1, "", "static_gpu_is_available"], [70, 3, 1, "", "static_greater"], [70, 3, 1, "", "static_greater_equal"], [70, 3, 1, "", "static_handle_nestable"], [70, 3, 1, "", "static_handle_out_argument"], [70, 3, 1, "", "static_has_nans"], [70, 3, 1, "", "static_iinfo"], [70, 3, 1, "", "static_indices_where"], [70, 3, 1, "", "static_infer_device"], [70, 3, 1, "", "static_infer_dtype"], [70, 3, 1, "", "static_inplace_arrays_supported"], [70, 3, 1, "", "static_inplace_decrement"], [70, 3, 1, "", "static_inplace_increment"], [70, 3, 1, "", "static_inplace_update"], [70, 3, 1, "", "static_inplace_variables_supported"], [70, 3, 1, "", "static_inputs_to_native_arrays"], [70, 3, 1, "", "static_inv"], [70, 3, 1, "", "static_invalid_dtype"], [70, 3, 1, "", "static_is_array"], [70, 3, 1, "", "static_is_float_dtype"], [70, 3, 1, "", "static_is_int_dtype"], [70, 3, 1, "", "static_is_ivy_array"], [70, 3, 1, "", "static_is_ivy_container"], [70, 3, 1, "", "static_is_native_array"], [70, 3, 1, "", "static_isfinite"], [70, 3, 1, "", "static_isinf"], [70, 3, 1, "", "static_isnan"], [70, 3, 1, "", "static_layer_norm"], [70, 3, 1, "", "static_leaky_relu"], [70, 3, 1, "", "static_less"], [70, 3, 1, "", "static_less_equal"], [70, 3, 1, "", "static_linear"], [70, 3, 1, "", "static_linspace"], [70, 3, 1, "", "static_log"], [70, 3, 1, "", "static_log10"], [70, 3, 1, "", "static_log1p"], [70, 3, 1, "", "static_log2"], [70, 3, 1, "", "static_logaddexp"], [70, 3, 1, "", "static_logical_and"], [70, 3, 1, "", "static_logical_not"], [70, 3, 1, "", "static_logical_or"], [70, 3, 1, "", "static_logical_xor"], [70, 3, 1, "", "static_logspace"], [70, 3, 1, "", "static_lstm_update"], [70, 3, 1, "", "static_match_kwargs"], [70, 3, 1, "", "static_matmul"], [70, 3, 1, "", "static_matrix_norm"], [70, 3, 1, "", "static_matrix_power"], [70, 3, 1, "", "static_matrix_rank"], [70, 3, 1, "", "static_matrix_transpose"], [70, 3, 1, "", "static_max"], [70, 3, 1, "", "static_maximum"], [70, 3, 1, "", "static_mean"], [70, 3, 1, "", "static_meshgrid"], [70, 3, 1, "", "static_min"], [70, 3, 1, "", "static_minimum"], [70, 3, 1, "", "static_multi_head_attention"], [70, 3, 1, "", "static_multinomial"], [70, 3, 1, "", "static_multiprocessing"], [70, 3, 1, "", "static_native_array"], [70, 3, 1, "", "static_negative"], [70, 3, 1, "", "static_nonzero"], [70, 3, 1, "", "static_not_equal"], [70, 3, 1, "", "static_num_arrays_in_memory"], [70, 3, 1, "", "static_num_cpu_cores"], [70, 3, 1, "", "static_num_gpus"], [70, 3, 1, "", "static_num_ivy_arrays_on_dev"], [70, 3, 1, "", "static_one_hot"], [70, 3, 1, "", "static_ones"], [70, 3, 1, "", "static_ones_like"], [70, 3, 1, "", "static_outer"], [70, 3, 1, "", "static_outputs_to_ivy_arrays"], [70, 3, 1, "", "static_percent_used_mem_on_dev"], [70, 3, 1, "", "static_permute_dims"], [70, 3, 1, "", "static_pinv"], [70, 3, 1, "", "static_positive"], [70, 3, 1, "", "static_pow"], [70, 3, 1, "", "static_print_all_arrays_in_memory"], [70, 3, 1, "", "static_print_all_ivy_arrays_on_dev"], [70, 3, 1, "", "static_prod"], [70, 3, 1, "", "static_promote_types"], [70, 3, 1, "", "static_qr"], [70, 3, 1, "", "static_queue_timeout"], [70, 3, 1, "", "static_random_normal"], [70, 3, 1, "", "static_relu"], [70, 3, 1, "", "static_remainder"], [70, 3, 1, "", "static_repeat"], [70, 3, 1, "", "static_reshape"], [70, 3, 1, "", "static_result_type"], [70, 3, 1, "", "static_round"], [70, 3, 1, "", "static_scaled_dot_product_attention"], [70, 3, 1, "", "static_scatter_flat"], [70, 3, 1, "", "static_scatter_nd"], [70, 3, 1, "", "static_seed"], [70, 3, 1, "", "static_set_default_device"], [70, 3, 1, "", "static_set_default_dtype"], [70, 3, 1, "", "static_set_default_float_dtype"], [70, 3, 1, "", "static_set_default_int_dtype"], [70, 3, 1, "", "static_set_min_base"], [70, 3, 1, "", "static_set_min_denominator"], [70, 3, 1, "", "static_set_queue_timeout"], [70, 3, 1, "", "static_set_split_factor"], [70, 3, 1, "", "static_set_tmp_dir"], [70, 3, 1, "", "static_set_with_grads"], [70, 3, 1, "", "static_shape"], [70, 3, 1, "", "static_shape_to_tuple"], [70, 3, 1, "", "static_shuffle"], [70, 3, 1, "", "static_sigmoid"], [70, 3, 1, "", "static_sign"], [70, 3, 1, "", "static_sin"], [70, 3, 1, "", "static_sinh"], [70, 3, 1, "", "static_slogdet"], [70, 3, 1, "", "static_softmax"], [70, 3, 1, "", "static_solve"], [70, 3, 1, "", "static_split"], [70, 3, 1, "", "static_split_factor"], [70, 3, 1, "", "static_split_func_call"], [70, 3, 1, "", "static_sqrt"], [70, 3, 1, "", "static_square"], [70, 3, 1, "", "static_squeeze"], [70, 3, 1, "", "static_stable_divide"], [70, 3, 1, "", "static_stable_pow"], [70, 3, 1, "", "static_stack"], [70, 3, 1, "", "static_std"], [70, 3, 1, "", "static_stop_gradient"], [70, 3, 1, "", "static_sum"], [70, 3, 1, "", "static_supports_inplace"], [70, 3, 1, "", "static_svd"], [70, 3, 1, "", "static_svdvals"], [70, 3, 1, "", "static_swapaxes"], [70, 3, 1, "", "static_tensordot"], [70, 3, 1, "", "static_tile"], [70, 3, 1, "", "static_tmp_dir"], [70, 3, 1, "", "static_to_device"], [70, 3, 1, "", "static_to_list"], [70, 3, 1, "", "static_to_native_arrays_and_back"], [70, 3, 1, "", "static_to_numpy"], [70, 3, 1, "", "static_to_scalar"], [70, 3, 1, "", "static_total_mem_on_dev"], [70, 3, 1, "", "static_tpu_is_available"], [70, 3, 1, "", "static_trace"], [70, 3, 1, "", "static_tril"], [70, 3, 1, "", "static_triu"], [70, 3, 1, "", "static_trunc"], [70, 3, 1, "", "static_try_else_none"], [70, 3, 1, "", "static_type_promote_arrays"], [70, 3, 1, "", "static_unique_all"], [70, 3, 1, "", "static_unique_inverse"], [70, 3, 1, "", "static_unique_values"], [70, 3, 1, "", "static_unset_default_device"], [70, 3, 1, "", "static_unset_default_dtype"], [70, 3, 1, "", "static_unset_default_float_dtype"], [70, 3, 1, "", "static_unset_default_int_dtype"], [70, 3, 1, "", "static_unset_with_grads"], [70, 3, 1, "", "static_unstack"], [70, 3, 1, "", "static_used_mem_on_dev"], [70, 3, 1, "", "static_valid_dtype"], [70, 3, 1, "", "static_value_is_nan"], [70, 3, 1, "", "static_var"], [70, 3, 1, "", "static_variable"], [70, 3, 1, "", "static_variable_data"], [70, 3, 1, "", "static_vecdot"], [70, 3, 1, "", "static_vector_norm"], [70, 3, 1, "", "static_vector_to_skew_symmetric_matrix"], [70, 3, 1, "", "static_where"], [70, 3, 1, "", "static_with_grads"], [70, 3, 1, "", "static_zero_pad"], [70, 3, 1, "", "static_zeros"], [70, 3, 1, "", "static_zeros_like"], [70, 3, 1, "", "stop_gradient"], [70, 3, 1, "", "supports_inplace"], [70, 3, 1, "", "svd"], [70, 3, 1, "", "svdvals"], [70, 3, 1, "", "tensordot"], [70, 3, 1, "", "tmp_dir"], [70, 3, 1, "", "to_native_arrays_and_back"], [70, 3, 1, "", "to_scalar"], [70, 3, 1, "", "total_mem_on_dev"], [70, 3, 1, "", "tpu_is_available"], [70, 3, 1, "", "trace"], [70, 3, 1, "", "tril"], [70, 3, 1, "", "triu"], [70, 3, 1, "", "try_else_none"], [70, 3, 1, "", "type_promote_arrays"], [70, 3, 1, "", "unique_all"], [70, 3, 1, "", "unique_inverse"], [70, 3, 1, "", "unique_values"], [70, 3, 1, "", "unset_default_device"], [70, 3, 1, "", "unset_default_dtype"], [70, 3, 1, "", "unset_default_float_dtype"], [70, 3, 1, "", "unset_default_int_dtype"], [70, 3, 1, "", "unset_with_grads"], [70, 3, 1, "", "used_mem_on_dev"], [70, 3, 1, "", "valid_dtype"], [70, 3, 1, "", "value_is_nan"], [70, 3, 1, "", "variable"], [70, 3, 1, "", "variable_data"], [70, 3, 1, "", "vecdot"], [70, 3, 1, "", "vector_to_skew_symmetric_matrix"], [70, 3, 1, "", "where"], [70, 3, 1, "", "with_grads"], [70, 3, 1, "", "zeros"], [70, 3, 1, "", "zeros_like"]], "ivy.container.container.MultiDevContainer": [[71, 3, 1, "", "__init__"], [71, 3, 1, "", "at_dev"], [71, 3, 1, "", "at_devs"]], "ivy.container.container_methods": [[342, 1, 1, "", "abs"], [347, 1, 1, "", "acos"], [351, 1, 1, "", "acosh"], [655, 1, 1, "", "adam_step"], [659, 1, 1, "", "adam_update"], [355, 1, 1, "", "add"], [948, 1, 1, "", "all"], [580, 1, 1, "", "all_equal"], [953, 1, 1, "", "any"], [904, 1, 1, "", "argsort"], [360, 1, 1, "", "asin"], [364, 1, 1, "", "asinh"], [368, 1, 1, "", "atan"], [372, 1, 1, "", "atan2"], [376, 1, 1, "", "atanh"], [775, 1, 1, "", "binary_cross_entropy"], [380, 1, 1, "", "bitwise_and"], [384, 1, 1, "", "bitwise_invert"], [388, 1, 1, "", "bitwise_left_shift"], [392, 1, 1, "", "bitwise_or"], [396, 1, 1, "", "bitwise_right_shift"], [400, 1, 1, "", "bitwise_xor"], [263, 1, 1, "", "can_cast"], [404, 1, 1, "", "ceil"], [791, 1, 1, "", "clip"], [591, 1, 1, "", "clip_vector_norm"], [796, 1, 1, "", "concat"], [800, 1, 1, "", "constant_pad"], [408, 1, 1, "", "cos"], [412, 1, 1, "", "cosh"], [780, 1, 1, "", "cross_entropy"], [416, 1, 1, "", "divide"], [915, 1, 1, "", "einsum"], [421, 1, 1, "", "equal"], [425, 1, 1, "", "erf"], [429, 1, 1, "", "exp"], [804, 1, 1, "", "expand_dims"], [433, 1, 1, "", "expm1"], [808, 1, 1, "", "flip"], [437, 1, 1, "", "floor"], [441, 1, 1, "", "floor_divide"], [608, 1, 1, "", "gather_nd"], [664, 1, 1, "", "gradient_descent_update"], [445, 1, 1, "", "greater"], [449, 1, 1, "", "greater_equal"], [668, 1, 1, "", "is_variable"], [453, 1, 1, "", "isfinite"], [457, 1, 1, "", "isinf"], [461, 1, 1, "", "isnan"], [672, 1, 1, "", "lamb_update"], [676, 1, 1, "", "lars_update"], [873, 1, 1, "", "layer_norm"], [465, 1, 1, "", "less"], [469, 1, 1, "", "less_equal"], [473, 1, 1, "", "log"], [477, 1, 1, "", "log10"], [481, 1, 1, "", "log1p"], [485, 1, 1, "", "log2"], [489, 1, 1, "", "logaddexp"], [493, 1, 1, "", "logical_and"], [497, 1, 1, "", "logical_not"], [501, 1, 1, "", "logical_or"], [505, 1, 1, "", "logical_xor"], [726, 1, 1, "", "matmul"], [919, 1, 1, "", "max"], [923, 1, 1, "", "mean"], [927, 1, 1, "", "min"], [511, 1, 1, "", "multiply"], [516, 1, 1, "", "negative"], [520, 1, 1, "", "not_equal"], [680, 1, 1, "", "optimizer_update"], [812, 1, 1, "", "permute_dims"], [524, 1, 1, "", "positive"], [528, 1, 1, "", "pow"], [931, 1, 1, "", "prod"], [882, 1, 1, "", "random_uniform"], [532, 1, 1, "", "remainder"], [816, 1, 1, "", "repeat"], [820, 1, 1, "", "reshape"], [824, 1, 1, "", "roll"], [536, 1, 1, "", "round"], [540, 1, 1, "", "sign"], [544, 1, 1, "", "sin"], [548, 1, 1, "", "sinh"], [206, 1, 1, "", "softplus"], [909, 1, 1, "", "sort"], [785, 1, 1, "", "sparse_cross_entropy"], [552, 1, 1, "", "sqrt"], [556, 1, 1, "", "square"], [830, 1, 1, "", "squeeze"], [834, 1, 1, "", "stack"], [344, 1, 1, "", "static_abs"], [657, 1, 1, "", "static_adam_step"], [661, 1, 1, "", "static_adam_update"], [357, 1, 1, "", "static_add"], [950, 1, 1, "", "static_all"], [582, 1, 1, "", "static_all_equal"], [955, 1, 1, "", "static_any"], [906, 1, 1, "", "static_argsort"], [777, 1, 1, "", "static_binary_cross_entropy"], [265, 1, 1, "", "static_can_cast"], [793, 1, 1, "", "static_clip"], [782, 1, 1, "", "static_cross_entropy"], [418, 1, 1, "", "static_divide"], [610, 1, 1, "", "static_gather_nd"], [666, 1, 1, "", "static_gradient_descent_update"], [670, 1, 1, "", "static_is_variable"], [674, 1, 1, "", "static_lamb_update"], [678, 1, 1, "", "static_lars_update"], [513, 1, 1, "", "static_multiply"], [682, 1, 1, "", "static_optimizer_update"], [879, 1, 1, "", "static_randint"], [884, 1, 1, "", "static_random_uniform"], [826, 1, 1, "", "static_roll"], [208, 1, 1, "", "static_softplus"], [911, 1, 1, "", "static_sort"], [787, 1, 1, "", "static_sparse_cross_entropy"], [559, 1, 1, "", "static_subtract"], [564, 1, 1, "", "static_tan"], [569, 1, 1, "", "static_tanh"], [895, 1, 1, "", "static_unique_counts"], [935, 1, 1, "", "std"], [561, 1, 1, "", "subtract"], [939, 1, 1, "", "sum"], [838, 1, 1, "", "swapaxes"], [566, 1, 1, "", "tan"], [571, 1, 1, "", "tanh"], [842, 1, 1, "", "tile"], [575, 1, 1, "", "trunc"], [897, 1, 1, "", "unique_counts"], [943, 1, 1, "", "var"], [846, 1, 1, "", "zero_pad"]], "ivy.container.creation": [[73, 2, 1, "", "ContainerWithCreation"]], "ivy.container.data_type": [[75, 2, 1, "", "ContainerWithDataTypes"]], "ivy.container.data_type.ContainerWithDataTypes": [[75, 3, 1, "", "can_cast"], [75, 3, 1, "", "static_can_cast"]], "ivy.container.device": [[77, 2, 1, "", "ContainerWithDevice"]], "ivy.container.elementwise": [[79, 2, 1, "", "ContainerWithElementwise"]], "ivy.container.elementwise.ContainerWithElementwise": [[79, 3, 1, "", "abs"], [79, 3, 1, "", "acos"], [79, 3, 1, "", "acosh"], [79, 3, 1, "", "add"], [79, 3, 1, "", "asin"], [79, 3, 1, "", "asinh"], [79, 3, 1, "", "atan"], [79, 3, 1, "", "atan2"], [79, 3, 1, "", "atanh"], [79, 3, 1, "", "bitwise_and"], [79, 3, 1, "", "bitwise_invert"], [79, 3, 1, "", "bitwise_left_shift"], [79, 3, 1, "", "bitwise_or"], [79, 3, 1, "", "bitwise_right_shift"], [79, 3, 1, "", "bitwise_xor"], [79, 3, 1, "", "ceil"], [79, 3, 1, "", "cos"], [79, 3, 1, "", "cosh"], [79, 3, 1, "", "divide"], [79, 3, 1, "", "equal"], [79, 3, 1, "", "erf"], [79, 3, 1, "", "exp"], [79, 3, 1, "", "expm1"], [79, 3, 1, "", "floor"], [79, 3, 1, "", "floor_divide"], [79, 3, 1, "", "greater"], [79, 3, 1, "", "greater_equal"], [79, 3, 1, "", "isfinite"], [79, 3, 1, "", "isinf"], [79, 3, 1, "", "isnan"], [79, 3, 1, "", "less"], [79, 3, 1, "", "less_equal"], [79, 3, 1, "", "log"], [79, 3, 1, "", "log10"], [79, 3, 1, "", "log1p"], [79, 3, 1, "", "log2"], [79, 3, 1, "", "logaddexp"], [79, 3, 1, "", "logical_and"], [79, 3, 1, "", "logical_not"], [79, 3, 1, "", "logical_or"], [79, 3, 1, "", "logical_xor"], [79, 3, 1, "", "multiply"], [79, 3, 1, "", "negative"], [79, 3, 1, "", "not_equal"], [79, 3, 1, "", "positive"], [79, 3, 1, "", "pow"], [79, 3, 1, "", "remainder"], [79, 3, 1, "", "round"], [79, 3, 1, "", "sign"], [79, 3, 1, "", "sin"], [79, 3, 1, "", "sinh"], [79, 3, 1, "", "sqrt"], [79, 3, 1, "", "square"], [79, 3, 1, "", "static_abs"], [79, 3, 1, "", "static_add"], [79, 3, 1, "", "static_divide"], [79, 3, 1, "", "static_multiply"], [79, 3, 1, "", "static_subtract"], [79, 3, 1, "", "static_tan"], [79, 3, 1, "", "static_tanh"], [79, 3, 1, "", "subtract"], [79, 3, 1, "", "tan"], [79, 3, 1, "", "tanh"], [79, 3, 1, "", "trunc"]], "ivy.container.general": [[81, 2, 1, "", "ContainerWithGeneral"]], "ivy.container.general.ContainerWithGeneral": [[81, 3, 1, "", "all_equal"], [81, 3, 1, "", "clip_vector_norm"], [81, 3, 1, "", "gather_nd"], [81, 3, 1, "", "static_all_equal"], [81, 3, 1, "", "static_gather_nd"]], "ivy.container.gradients": [[83, 2, 1, "", "ContainerWithGradients"]], "ivy.container.gradients.ContainerWithGradients": [[83, 3, 1, "", "adam_step"], [83, 3, 1, "", "adam_update"], [83, 3, 1, "", "gradient_descent_update"], [83, 3, 1, "", "is_variable"], [83, 3, 1, "", "lamb_update"], [83, 3, 1, "", "lars_update"], [83, 3, 1, "", "optimizer_update"], [83, 3, 1, "", "static_adam_step"], [83, 3, 1, "", "static_adam_update"], [83, 3, 1, "", "static_gradient_descent_update"], [83, 3, 1, "", "static_is_variable"], [83, 3, 1, "", "static_lamb_update"], [83, 3, 1, "", "static_lars_update"], [83, 3, 1, "", "static_optimizer_update"]], "ivy.container.image": [[85, 2, 1, "", "ContainerWithImage"]], "ivy.container.layers": [[87, 2, 1, "", "ContainerWithLayers"]], "ivy.container.linear_algebra": [[89, 2, 1, "", "ContainerWithLinearAlgebra"]], "ivy.container.linear_algebra.ContainerWithLinearAlgebra": [[89, 3, 1, "", "matmul"]], "ivy.container.losses": [[91, 2, 1, "", "ContainerWithLosses"]], "ivy.container.losses.ContainerWithLosses": [[91, 3, 1, "", "binary_cross_entropy"], [91, 3, 1, "", "cross_entropy"], [91, 3, 1, "", "sparse_cross_entropy"], [91, 3, 1, "", "static_binary_cross_entropy"], [91, 3, 1, "", "static_cross_entropy"], [91, 3, 1, "", "static_sparse_cross_entropy"]], "ivy.container.manipulation": [[93, 2, 1, "", "ContainerWithManipulation"]], "ivy.container.manipulation.ContainerWithManipulation": [[93, 3, 1, "", "clip"], [93, 3, 1, "", "concat"], [93, 3, 1, "", "constant_pad"], [93, 3, 1, "", "expand_dims"], [93, 3, 1, "", "flip"], [93, 3, 1, "", "permute_dims"], [93, 3, 1, "", "repeat"], [93, 3, 1, "", "reshape"], [93, 3, 1, "", "roll"], [93, 3, 1, "", "squeeze"], [93, 3, 1, "", "stack"], [93, 3, 1, "", "static_clip"], [93, 3, 1, "", "static_roll"], [93, 3, 1, "", "swapaxes"], [93, 3, 1, "", "tile"], [93, 3, 1, "", "zero_pad"]], "ivy.container.norms": [[95, 2, 1, "", "ContainerWithNorms"]], "ivy.container.norms.ContainerWithNorms": [[95, 3, 1, "", "layer_norm"]], "ivy.container.random": [[97, 2, 1, "", "ContainerWithRandom"]], "ivy.container.random.ContainerWithRandom": [[97, 3, 1, "", "random_uniform"], [97, 3, 1, "", "static_randint"], [97, 3, 1, "", "static_random_uniform"]], "ivy.container.searching": [[99, 2, 1, "", "ContainerWithSearching"]], "ivy.container.set": [[101, 2, 1, "", "ContainerWithSet"]], "ivy.container.set.ContainerWithSet": [[101, 3, 1, "", "static_unique_counts"], [101, 3, 1, "", "unique_counts"]], "ivy.container.sorting": [[103, 2, 1, "", "ContainerWithSorting"]], "ivy.container.sorting.ContainerWithSorting": [[103, 3, 1, "", "argsort"], [103, 3, 1, "", "sort"], [103, 3, 1, "", "static_argsort"], [103, 3, 1, "", "static_sort"]], "ivy.container.statistical": [[105, 2, 1, "", "ContainerWithStatistical"]], "ivy.container.statistical.ContainerWithStatistical": [[105, 3, 1, "", "einsum"], [105, 3, 1, "", "max"], [105, 3, 1, "", "mean"], [105, 3, 1, "", "min"], [105, 3, 1, "", "prod"], [105, 3, 1, "", "std"], [105, 3, 1, "", "sum"], [105, 3, 1, "", "var"]], "ivy.container.utility": [[107, 2, 1, "", "ContainerWithUtility"]], "ivy.container.utility.ContainerWithUtility": [[107, 3, 1, "", "all"], [107, 3, 1, "", "any"], [107, 3, 1, "", "static_all"], [107, 3, 1, "", "static_any"]], "ivy.container.wrapping": [[109, 1, 1, "", "add_ivy_container_instance_methods"]], "ivy.func_wrapper": [[189, 1, 1, "", "handle_nestable"], [190, 1, 1, "", "handle_out_argument"], [191, 1, 1, "", "infer_device"], [192, 1, 1, "", "infer_dtype"], [193, 1, 1, "", "inputs_to_ivy_arrays"], [194, 1, 1, "", "inputs_to_native_arrays"], [195, 1, 1, "", "outputs_to_ivy_arrays"], [196, 1, 1, "", "to_native_arrays_and_back"]], "ivy.functional.ivy": [[198, 0, 0, "-", "activations"], [210, 0, 0, "-", "compilation"], [212, 0, 0, "-", "constants"], [213, 0, 0, "-", "creation"], [252, 0, 0, "-", "data_type"], [289, 0, 0, "-", "device"], [339, 0, 0, "-", "elementwise"], [577, 0, 0, "-", "general"], [651, 0, 0, "-", "gradients"], [689, 0, 0, "-", "layers"], [702, 0, 0, "-", "linear_algebra"], [772, 0, 0, "-", "losses"], [788, 0, 0, "-", "manipulation"], [848, 0, 0, "-", "meta"], [852, 0, 0, "-", "nest"], [870, 0, 0, "-", "norms"], [875, 0, 0, "-", "random"], [887, 0, 0, "-", "searching"], [892, 0, 0, "-", "set"], [901, 0, 0, "-", "sorting"], [912, 0, 0, "-", "statistical"], [945, 0, 0, "-", "utility"]], "ivy.functional.ivy.activations": [[199, 1, 1, "", "gelu"], [200, 1, 1, "", "leaky_relu"], [201, 1, 1, "", "relu"], [202, 1, 1, "", "sigmoid"], [203, 1, 1, "", "softmax"], [207, 1, 1, "", "softplus"], [209, 1, 1, "", "tanh"]], "ivy.functional.ivy.compilation": [[211, 1, 1, "", "compile"]], "ivy.functional.ivy.constants": [[212, 5, 1, "", "e"], [212, 5, 1, "", "inf"], [212, 5, 1, "", "nan"], [212, 5, 1, "", "newaxis"], [212, 5, 1, "", "pi"]], "ivy.functional.ivy.creation": [[214, 1, 1, "", "arange"], [213, 1, 1, "", "array"], [217, 1, 1, "", "asarray"], [218, 1, 1, "", "empty"], [221, 1, 1, "", "empty_like"], [222, 1, 1, "", "eye"], [225, 1, 1, "", "from_dlpack"], [226, 1, 1, "", "full"], [229, 1, 1, "", "full_like"], [230, 1, 1, "", "linspace"], [231, 1, 1, "", "logspace"], [234, 1, 1, "", "meshgrid"], [237, 1, 1, "", "native_array"], [238, 1, 1, "", "ones"], [241, 1, 1, "", "ones_like"], [244, 1, 1, "", "tril"], [247, 1, 1, "", "triu"], [248, 1, 1, "", "zeros"], [251, 1, 1, "", "zeros_like"]], "ivy.functional.ivy.data_type": [[252, 2, 1, "", "DefaultDtype"], [252, 2, 1, "", "DefaultFloatDtype"], [252, 2, 1, "", "DefaultIntDtype"], [256, 1, 1, "", "as_ivy_dtype"], [257, 1, 1, "", "as_native_dtype"], [258, 1, 1, "", "astype"], [259, 1, 1, "", "broadcast_arrays"], [260, 1, 1, "", "broadcast_to"], [264, 1, 1, "", "can_cast"], [266, 1, 1, "", "closest_valid_dtype"], [267, 1, 1, "", "default_dtype"], [268, 1, 1, "", "default_float_dtype"], [269, 1, 1, "", "default_int_dtype"], [270, 1, 1, "", "dtype"], [271, 1, 1, "", "dtype_bits"], [272, 1, 1, "", "finfo"], [273, 1, 1, "", "function_supported_dtypes"], [274, 1, 1, "", "function_unsupported_dtypes"], [275, 1, 1, "", "iinfo"], [276, 1, 1, "", "invalid_dtype"], [277, 1, 1, "", "is_float_dtype"], [278, 1, 1, "", "is_int_dtype"], [279, 1, 1, "", "promote_types"], [280, 1, 1, "", "result_type"], [281, 1, 1, "", "set_default_dtype"], [282, 1, 1, "", "set_default_float_dtype"], [283, 1, 1, "", "set_default_int_dtype"], [284, 1, 1, "", "type_promote_arrays"], [285, 1, 1, "", "unset_default_dtype"], [286, 1, 1, "", "unset_default_float_dtype"], [287, 1, 1, "", "unset_default_int_dtype"], [288, 1, 1, "", "valid_dtype"]], "ivy.functional.ivy.data_type.DefaultDtype": [[252, 3, 1, "", "__init__"]], "ivy.functional.ivy.data_type.DefaultFloatDtype": [[252, 3, 1, "", "__init__"]], "ivy.functional.ivy.data_type.DefaultIntDtype": [[252, 3, 1, "", "__init__"]], "ivy.functional.ivy.device": [[289, 2, 1, "", "DefaultDevice"], [291, 2, 1, "", "DevClonedItem"], [292, 2, 1, "", "DevClonedIter"], [293, 2, 1, "", "DevClonedNest"], [294, 2, 1, "", "DevDistItem"], [295, 2, 1, "", "DevDistIter"], [296, 2, 1, "", "DevDistNest"], [289, 2, 1, "", "DevManager"], [298, 2, 1, "", "DevMapper"], [299, 2, 1, "", "DevMapperMultiProc"], [289, 2, 1, "", "MultiDev"], [301, 2, 1, "", "MultiDevItem"], [302, 2, 1, "", "MultiDevIter"], [303, 2, 1, "", "MultiDevNest"], [304, 2, 1, "", "Profiler"], [305, 1, 1, "", "as_ivy_dev"], [306, 1, 1, "", "as_native_dev"], [307, 1, 1, "", "clear_mem_on_dev"], [308, 1, 1, "", "default_device"], [309, 1, 1, "", "dev"], [310, 1, 1, "", "dev_clone"], [311, 1, 1, "", "dev_clone_array"], [312, 1, 1, "", "dev_clone_iter"], [313, 1, 1, "", "dev_clone_nest"], [314, 1, 1, "", "dev_dist"], [315, 1, 1, "", "dev_dist_array"], [316, 1, 1, "", "dev_dist_iter"], [317, 1, 1, "", "dev_dist_nest"], [318, 1, 1, "", "dev_unify"], [319, 1, 1, "", "dev_unify_array"], [320, 1, 1, "", "dev_unify_iter"], [321, 1, 1, "", "dev_unify_nest"], [322, 1, 1, "", "dev_util"], [323, 1, 1, "", "get_all_ivy_arrays_on_dev"], [324, 1, 1, "", "gpu_is_available"], [325, 1, 1, "", "num_cpu_cores"], [326, 1, 1, "", "num_gpus"], [327, 1, 1, "", "num_ivy_arrays_on_dev"], [328, 1, 1, "", "percent_used_mem_on_dev"], [329, 1, 1, "", "print_all_ivy_arrays_on_dev"], [330, 1, 1, "", "set_default_device"], [331, 1, 1, "", "set_split_factor"], [332, 1, 1, "", "split_factor"], [333, 1, 1, "", "split_func_call"], [334, 1, 1, "", "to_device"], [335, 1, 1, "", "total_mem_on_dev"], [336, 1, 1, "", "tpu_is_available"], [337, 1, 1, "", "unset_default_device"], [338, 1, 1, "", "used_mem_on_dev"]], "ivy.functional.ivy.device.DefaultDevice": [[289, 3, 1, "", "__enter__"], [289, 3, 1, "", "__init__"]], "ivy.functional.ivy.device.DevManager": [[289, 3, 1, "", "__init__"], [289, 3, 1, "", "da_tune_step"], [289, 4, 1, "", "dim_size"], [289, 3, 1, "", "ds_tune_step"], [289, 3, 1, "", "map"], [289, 3, 1, "", "repeated_config_check"], [289, 4, 1, "", "tune_step"], [289, 4, 1, "", "tuned"]], "ivy.functional.ivy.device.DevMapper": [[298, 3, 1, "", "__init__"], [298, 3, 1, "", "map"]], "ivy.functional.ivy.device.DevMapperMultiProc": [[299, 3, 1, "", "__init__"]], "ivy.functional.ivy.device.MultiDev": [[289, 3, 1, "", "__init__"]], "ivy.functional.ivy.device.MultiDevItem": [[301, 3, 1, "", "__init__"], [301, 3, 1, "", "items"], [301, 3, 1, "", "keys"], [301, 4, 1, "", "shape"], [301, 3, 1, "", "values"]], "ivy.functional.ivy.device.MultiDevIter": [[302, 3, 1, "", "__init__"], [302, 3, 1, "", "at_dev"], [302, 3, 1, "", "at_devs"]], "ivy.functional.ivy.device.MultiDevNest": [[303, 3, 1, "", "__init__"], [303, 3, 1, "", "at_dev"]], "ivy.functional.ivy.device.Profiler": [[304, 3, 1, "", "__init__"], [304, 3, 1, "", "start"], [304, 3, 1, "", "stop"]], "ivy.functional.ivy.elementwise": [[343, 1, 1, "", "abs"], [348, 1, 1, "", "acos"], [352, 1, 1, "", "acosh"], [356, 1, 1, "", "add"], [361, 1, 1, "", "asin"], [365, 1, 1, "", "asinh"], [369, 1, 1, "", "atan"], [373, 1, 1, "", "atan2"], [377, 1, 1, "", "atanh"], [381, 1, 1, "", "bitwise_and"], [385, 1, 1, "", "bitwise_invert"], [389, 1, 1, "", "bitwise_left_shift"], [393, 1, 1, "", "bitwise_or"], [397, 1, 1, "", "bitwise_right_shift"], [401, 1, 1, "", "bitwise_xor"], [405, 1, 1, "", "ceil"], [409, 1, 1, "", "cos"], [413, 1, 1, "", "cosh"], [417, 1, 1, "", "divide"], [422, 1, 1, "", "equal"], [426, 1, 1, "", "erf"], [430, 1, 1, "", "exp"], [434, 1, 1, "", "expm1"], [438, 1, 1, "", "floor"], [442, 1, 1, "", "floor_divide"], [446, 1, 1, "", "greater"], [450, 1, 1, "", "greater_equal"], [454, 1, 1, "", "isfinite"], [458, 1, 1, "", "isinf"], [462, 1, 1, "", "isnan"], [466, 1, 1, "", "less"], [470, 1, 1, "", "less_equal"], [474, 1, 1, "", "log"], [478, 1, 1, "", "log10"], [482, 1, 1, "", "log1p"], [486, 1, 1, "", "log2"], [490, 1, 1, "", "logaddexp"], [494, 1, 1, "", "logical_and"], [498, 1, 1, "", "logical_not"], [502, 1, 1, "", "logical_or"], [506, 1, 1, "", "logical_xor"], [507, 1, 1, "", "maximum"], [508, 1, 1, "", "minimum"], [512, 1, 1, "", "multiply"], [517, 1, 1, "", "negative"], [521, 1, 1, "", "not_equal"], [525, 1, 1, "", "positive"], [529, 1, 1, "", "pow"], [533, 1, 1, "", "remainder"], [537, 1, 1, "", "round"], [541, 1, 1, "", "sign"], [545, 1, 1, "", "sin"], [549, 1, 1, "", "sinh"], [553, 1, 1, "", "sqrt"], [557, 1, 1, "", "square"], [562, 1, 1, "", "subtract"], [567, 1, 1, "", "tan"], [572, 1, 1, "", "tanh"], [576, 1, 1, "", "trunc"]], "ivy.functional.ivy.general": [[581, 1, 1, "", "all_equal"], [583, 1, 1, "", "arg_info"], [584, 1, 1, "", "arg_names"], [585, 1, 1, "", "array_equal"], [586, 1, 1, "", "arrays_equal"], [587, 1, 1, "", "assert_supports_inplace"], [588, 1, 1, "", "cache_fn"], [589, 1, 1, "", "clip_matrix_norm"], [592, 1, 1, "", "clip_vector_norm"], [593, 1, 1, "", "container_types"], [594, 1, 1, "", "copy_array"], [595, 1, 1, "", "cumprod"], [596, 1, 1, "", "cumsum"], [597, 1, 1, "", "current_backend_str"], [598, 1, 1, "", "default"], [599, 1, 1, "", "einops_rearrange"], [600, 1, 1, "", "einops_reduce"], [601, 1, 1, "", "einops_repeat"], [602, 1, 1, "", "exists"], [603, 1, 1, "", "floormod"], [604, 1, 1, "", "fourier_encode"], [605, 1, 1, "", "gather"], [609, 1, 1, "", "gather_nd"], [611, 1, 1, "", "get_all_arrays_in_memory"], [612, 1, 1, "", "get_min_base"], [613, 1, 1, "", "get_min_denominator"], [614, 1, 1, "", "get_num_dims"], [615, 1, 1, "", "get_referrers_recursive"], [616, 1, 1, "", "has_nans"], [617, 1, 1, "", "indices_where"], [618, 1, 1, "", "inplace_arrays_supported"], [619, 1, 1, "", "inplace_decrement"], [620, 1, 1, "", "inplace_increment"], [621, 1, 1, "", "inplace_update"], [622, 1, 1, "", "inplace_variables_supported"], [623, 1, 1, "", "is_array"], [624, 1, 1, "", "is_ivy_array"], [625, 1, 1, "", "is_ivy_container"], [626, 1, 1, "", "is_native_array"], [627, 1, 1, "", "match_kwargs"], [628, 1, 1, "", "multiprocessing"], [629, 1, 1, "", "num_arrays_in_memory"], [630, 1, 1, "", "one_hot"], [631, 1, 1, "", "print_all_arrays_in_memory"], [632, 1, 1, "", "queue_timeout"], [633, 1, 1, "", "scatter_flat"], [634, 1, 1, "", "scatter_nd"], [635, 1, 1, "", "set_min_base"], [636, 1, 1, "", "set_min_denominator"], [637, 1, 1, "", "set_queue_timeout"], [638, 1, 1, "", "set_tmp_dir"], [639, 1, 1, "", "shape"], [640, 1, 1, "", "shape_to_tuple"], [641, 1, 1, "", "stable_divide"], [642, 1, 1, "", "stable_pow"], [643, 1, 1, "", "supports_inplace"], [644, 1, 1, "", "tmp_dir"], [645, 1, 1, "", "to_list"], [646, 1, 1, "", "to_numpy"], [647, 1, 1, "", "to_scalar"], [648, 1, 1, "", "try_else_none"], [649, 1, 1, "", "unstack"], [650, 1, 1, "", "value_is_nan"]], "ivy.functional.ivy.gradients": [[651, 2, 1, "", "GradientTracking"], [656, 1, 1, "", "adam_step"], [660, 1, 1, "", "adam_update"], [662, 1, 1, "", "execute_with_gradients"], [665, 1, 1, "", "gradient_descent_update"], [669, 1, 1, "", "is_variable"], [673, 1, 1, "", "lamb_update"], [677, 1, 1, "", "lars_update"], [681, 1, 1, "", "optimizer_update"], [683, 1, 1, "", "set_with_grads"], [684, 1, 1, "", "stop_gradient"], [685, 1, 1, "", "unset_with_grads"], [686, 1, 1, "", "variable"], [687, 1, 1, "", "variable_data"], [688, 1, 1, "", "with_grads"]], "ivy.functional.ivy.gradients.GradientTracking": [[651, 3, 1, "", "__init__"]], "ivy.functional.ivy.layers": [[690, 1, 1, "", "conv1d"], [691, 1, 1, "", "conv1d_transpose"], [692, 1, 1, "", "conv2d"], [693, 1, 1, "", "conv2d_transpose"], [694, 1, 1, "", "conv3d"], [695, 1, 1, "", "conv3d_transpose"], [696, 1, 1, "", "depthwise_conv2d"], [697, 1, 1, "", "dropout"], [698, 1, 1, "", "linear"], [699, 1, 1, "", "lstm_update"], [700, 1, 1, "", "multi_head_attention"], [701, 1, 1, "", "scaled_dot_product_attention"]], "ivy.functional.ivy.linear_algebra": [[705, 1, 1, "", "cholesky"], [708, 1, 1, "", "cross"], [711, 1, 1, "", "det"], [714, 1, 1, "", "diagonal"], [717, 1, 1, "", "eigh"], [720, 1, 1, "", "eigvalsh"], [723, 1, 1, "", "inv"], [727, 1, 1, "", "matmul"], [730, 1, 1, "", "matrix_norm"], [731, 1, 1, "", "matrix_power"], [734, 1, 1, "", "matrix_rank"], [737, 1, 1, "", "matrix_transpose"], [740, 1, 1, "", "outer"], [743, 1, 1, "", "pinv"], [746, 1, 1, "", "qr"], [747, 1, 1, "", "slogdet"], [750, 1, 1, "", "solve"], [753, 1, 1, "", "svd"], [756, 1, 1, "", "svdvals"], [759, 1, 1, "", "tensordot"], [762, 1, 1, "", "trace"], [765, 1, 1, "", "vecdot"], [768, 1, 1, "", "vector_norm"], [771, 1, 1, "", "vector_to_skew_symmetric_matrix"]], "ivy.functional.ivy.losses": [[776, 1, 1, "", "binary_cross_entropy"], [781, 1, 1, "", "cross_entropy"], [786, 1, 1, "", "sparse_cross_entropy"]], "ivy.functional.ivy.manipulation": [[792, 1, 1, "", "clip"], [797, 1, 1, "", "concat"], [801, 1, 1, "", "constant_pad"], [805, 1, 1, "", "expand_dims"], [809, 1, 1, "", "flip"], [813, 1, 1, "", "permute_dims"], [817, 1, 1, "", "repeat"], [821, 1, 1, "", "reshape"], [825, 1, 1, "", "roll"], [827, 1, 1, "", "split"], [831, 1, 1, "", "squeeze"], [835, 1, 1, "", "stack"], [839, 1, 1, "", "swapaxes"], [843, 1, 1, "", "tile"], [847, 1, 1, "", "zero_pad"]], "ivy.functional.ivy.meta": [[849, 1, 1, "", "fomaml_step"], [850, 1, 1, "", "maml_step"], [851, 1, 1, "", "reptile_step"]], "ivy.functional.ivy.nest": [[853, 1, 1, "", "all_nested_indices"], [854, 1, 1, "", "copy_nest"], [855, 1, 1, "", "index_nest"], [856, 1, 1, "", "insert_into_nest_at_index"], [857, 1, 1, "", "insert_into_nest_at_indices"], [858, 1, 1, "", "map"], [859, 1, 1, "", "map_nest_at_index"], [860, 1, 1, "", "map_nest_at_indices"], [861, 1, 1, "", "multi_index_nest"], [862, 1, 1, "", "nested_any"], [863, 1, 1, "", "nested_indices_where"], [864, 1, 1, "", "nested_map"], [865, 1, 1, "", "nested_multi_map"], [866, 1, 1, "", "prune_nest_at_index"], [867, 1, 1, "", "prune_nest_at_indices"], [868, 1, 1, "", "set_nest_at_index"], [869, 1, 1, "", "set_nest_at_indices"]], "ivy.functional.ivy.norms": [[874, 1, 1, "", "layer_norm"]], "ivy.functional.ivy.random": [[876, 1, 1, "", "multinomial"], [878, 1, 1, "", "randint"], [880, 1, 1, "", "random_normal"], [883, 1, 1, "", "random_uniform"], [885, 1, 1, "", "seed"], [886, 1, 1, "", "shuffle"]], "ivy.functional.ivy.searching": [[888, 1, 1, "", "argmax"], [889, 1, 1, "", "argmin"], [890, 1, 1, "", "nonzero"], [891, 1, 1, "", "where"]], "ivy.functional.ivy.set": [[893, 1, 1, "", "unique_all"], [898, 1, 1, "", "unique_counts"], [899, 1, 1, "", "unique_inverse"], [900, 1, 1, "", "unique_values"]], "ivy.functional.ivy.sorting": [[905, 1, 1, "", "argsort"], [910, 1, 1, "", "sort"]], "ivy.functional.ivy.statistical": [[916, 1, 1, "", "einsum"], [920, 1, 1, "", "max"], [924, 1, 1, "", "mean"], [928, 1, 1, "", "min"], [932, 1, 1, "", "prod"], [936, 1, 1, "", "std"], [940, 1, 1, "", "sum"], [944, 1, 1, "", "var"]], "ivy.functional.ivy.utility": [[949, 1, 1, "", "all"], [954, 1, 1, "", "any"]], "ivy.inspection": [[960, 1, 1, "", "add_array_specs"], [961, 1, 1, "", "fn_array_spec"]], "ivy.stateful": [[111, 0, 0, "-", "activations"], [114, 0, 0, "-", "converters"], [116, 0, 0, "-", "initializers"], [125, 0, 0, "-", "layers"], [137, 0, 0, "-", "module"], [139, 0, 0, "-", "norms"], [141, 0, 0, "-", "optimizers"], [147, 0, 0, "-", "sequential"]], "ivy.stateful.activations": [[112, 2, 1, "", "GEGLU"], [113, 2, 1, "", "GELU"]], "ivy.stateful.activations.GEGLU": [[112, 3, 1, "", "__init__"]], "ivy.stateful.activations.GELU": [[113, 3, 1, "", "__init__"]], "ivy.stateful.converters": [[115, 1, 1, "", "to_ivy_module"]], "ivy.stateful.initializers": [[116, 2, 1, "", "Constant"], [118, 2, 1, "", "FirstLayerSiren"], [119, 2, 1, "", "GlorotUniform"], [116, 2, 1, "", "KaimingNormal"], [121, 2, 1, "", "Ones"], [122, 2, 1, "", "Siren"], [116, 2, 1, "", "Uniform"], [124, 2, 1, "", "Zeros"]], "ivy.stateful.initializers.Constant": [[116, 3, 1, "", "__init__"], [116, 3, 1, "", "create_variables"]], "ivy.stateful.initializers.FirstLayerSiren": [[118, 3, 1, "", "__init__"]], "ivy.stateful.initializers.GlorotUniform": [[119, 3, 1, "", "__init__"]], "ivy.stateful.initializers.KaimingNormal": [[116, 3, 1, "", "__init__"], [116, 3, 1, "", "create_variables"]], "ivy.stateful.initializers.Ones": [[121, 3, 1, "", "__init__"]], "ivy.stateful.initializers.Siren": [[122, 3, 1, "", "__init__"]], "ivy.stateful.initializers.Uniform": [[116, 3, 1, "", "__init__"], [116, 3, 1, "", "create_variables"]], "ivy.stateful.initializers.Zeros": [[124, 3, 1, "", "__init__"]], "ivy.stateful.layers": [[126, 2, 1, "", "Conv1D"], [127, 2, 1, "", "Conv1DTranspose"], [128, 2, 1, "", "Conv2D"], [129, 2, 1, "", "Conv2DTranspose"], [130, 2, 1, "", "Conv3D"], [131, 2, 1, "", "Conv3DTranspose"], [132, 2, 1, "", "DepthwiseConv2D"], [133, 2, 1, "", "Dropout"], [134, 2, 1, "", "LSTM"], [135, 2, 1, "", "Linear"], [136, 2, 1, "", "MultiHeadAttention"]], "ivy.stateful.layers.Conv1D": [[126, 3, 1, "", "__init__"]], "ivy.stateful.layers.Conv1DTranspose": [[127, 3, 1, "", "__init__"]], "ivy.stateful.layers.Conv2D": [[128, 3, 1, "", "__init__"]], "ivy.stateful.layers.Conv2DTranspose": [[129, 3, 1, "", "__init__"]], "ivy.stateful.layers.Conv3D": [[130, 3, 1, "", "__init__"]], "ivy.stateful.layers.Conv3DTranspose": [[131, 3, 1, "", "__init__"]], "ivy.stateful.layers.DepthwiseConv2D": [[132, 3, 1, "", "__init__"]], "ivy.stateful.layers.Dropout": [[133, 3, 1, "", "__init__"]], "ivy.stateful.layers.LSTM": [[134, 3, 1, "", "__init__"], [134, 3, 1, "", "get_initial_state"]], "ivy.stateful.layers.Linear": [[135, 3, 1, "", "__init__"]], "ivy.stateful.layers.MultiHeadAttention": [[136, 3, 1, "", "__init__"]], "ivy.stateful.module": [[138, 2, 1, "", "Module"]], "ivy.stateful.module.Module": [[138, 3, 1, "", "__init__"], [138, 3, 1, "", "build"], [138, 4, 1, "", "build_mode"], [138, 4, 1, "", "built"], [138, 3, 1, "", "check_submod_rets"], [138, 3, 1, "", "get_mod_key"], [138, 3, 1, "", "mod_depth"], [138, 3, 1, "", "mod_height"], [138, 3, 1, "", "mod_with_top_mod_key_chain"], [138, 3, 1, "", "save_weights"], [138, 3, 1, "", "show_mod_in_top_mod"], [138, 3, 1, "", "show_structure"], [138, 3, 1, "", "show_v_in_top_v"], [138, 3, 1, "", "sub_mods"], [138, 3, 1, "", "track_submod_call_order"], [138, 3, 1, "", "track_submod_rets"], [138, 3, 1, "", "v_with_top_v_key_chains"]], "ivy.stateful.norms": [[140, 2, 1, "", "LayerNorm"]], "ivy.stateful.norms.LayerNorm": [[140, 3, 1, "", "__init__"]], "ivy.stateful.optimizers": [[142, 2, 1, "", "Adam"], [143, 2, 1, "", "LAMB"], [144, 2, 1, "", "LARS"], [145, 2, 1, "", "Optimizer"], [146, 2, 1, "", "SGD"]], "ivy.stateful.optimizers.Adam": [[142, 3, 1, "", "__init__"], [142, 3, 1, "", "set_state"], [142, 4, 1, "", "state"]], "ivy.stateful.optimizers.LAMB": [[143, 3, 1, "", "__init__"], [143, 3, 1, "", "set_state"], [143, 4, 1, "", "state"]], "ivy.stateful.optimizers.LARS": [[144, 3, 1, "", "__init__"], [144, 3, 1, "", "set_state"], [144, 4, 1, "", "state"]], "ivy.stateful.optimizers.Optimizer": [[145, 3, 1, "", "__init__"], [145, 3, 1, "", "set_state"], [145, 3, 1, "", "step"]], "ivy.stateful.optimizers.SGD": [[146, 3, 1, "", "__init__"], [146, 3, 1, "", "set_state"], [146, 4, 1, "", "state"]], "ivy.stateful.sequential": [[148, 2, 1, "", "Sequential"]], "ivy.stateful.sequential.Sequential": [[148, 3, 1, "", "__init__"]], "ivy.verbosity": [[965, 1, 1, "", "cprint"]]}, "objtypes": {"0": "py:module", "1": "py:function", "2": "py:class", "3": "py:method", "4": "py:property", "5": "py:data"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "function", "Python function"], "2": ["py", "class", "Python class"], "3": ["py", "method", "Python method"], "4": ["py", "property", "Python property"], "5": ["py", "data", "Python data"]}, "titleterms": {"backend": [0, 155, 161, 170, 187], "handler": [0, 170], "choose_random_backend": 2, "clear_backend_stack": 3, "current_backend": 4, "get_backend": 5, "set_backend": 6, "try_import_ivy_jax": 7, "try_import_ivy_mxnet": 8, "try_import_ivy_numpi": 9, "try_import_ivy_tf": 10, "try_import_ivy_torch": 11, "unset_backend": 12, "background": [13, 956], "ml": 14, "explos": 14, "standard": 15, "skeptic": 15, "complimentari": 15, "vs": [15, 187], "competit": 15, "do": 15, "work": [15, 153], "The": [15, 151, 172, 187], "arrai": [15, 18, 158, 163, 168, 172, 205, 216, 220, 224, 228, 233, 236, 240, 243, 246, 250, 262, 341, 346, 350, 354, 359, 363, 367, 371, 375, 379, 383, 387, 391, 395, 399, 403, 407, 411, 415, 420, 424, 428, 432, 436, 440, 444, 448, 452, 456, 460, 464, 468, 472, 476, 480, 484, 488, 492, 496, 500, 504, 510, 515, 519, 523, 527, 531, 535, 539, 543, 547, 551, 555, 560, 565, 570, 574, 579, 607, 654, 704, 707, 710, 713, 716, 719, 722, 725, 729, 733, 736, 739, 742, 745, 749, 752, 755, 758, 761, 764, 767, 770, 774, 779, 784, 790, 795, 799, 803, 807, 811, 815, 819, 823, 829, 833, 837, 841, 845, 872, 896, 903, 908, 914, 918, 922, 926, 930, 934, 938, 942, 947, 952], "api": [15, 152, 155, 158, 164, 170, 172, 174, 175], "why": 16, "unifi": [16, 172], "No": [16, 150], "more": 16, "re": 16, "implement": 16, "infinit": 16, "shelf": 16, "life": 16, "data": [17, 28, 74, 159, 165, 173, 187, 252, 892, 893, 894, 898, 900], "class": [17, 110, 172], "activ": [19, 65, 111, 198], "arraywithactiv": 20, "convers": 21, "args_to_ivi": 22, "args_to_n": 23, "to_ivi": 24, "to_n": 25, "creation": [26, 72, 213], "arraywithcr": 27, "type": [28, 74, 160, 165, 187, 252], "arraywithdatatyp": 29, "devic": [30, 76, 166, 168, 289], "arraywithdevic": 31, "elementwis": [32, 78, 339], "arraywithelementwis": 33, "gener": [34, 80, 159, 577], "arraywithgener": 35, "gradient": [36, 82, 651], "arraywithgradi": 37, "imag": [38, 84], "arraywithimag": 39, "layer": [40, 86, 125, 689], "arraywithlay": 41, "linear": [42, 88, 135, 698, 702], "algebra": [42, 88, 702], "arraywithlinearalgebra": 43, "loss": [44, 90, 772], "arraywithloss": 45, "manipul": [46, 92, 788], "arraywithmanipul": 47, "norm": [48, 94, 139, 870], "arraywithnorm": 49, "random": [50, 96, 875], "arraywithrandom": 51, "search": [52, 98, 887], "arraywithsearch": 53, "set": [54, 100, 150, 161, 892], "arraywithset": 55, "sort": [56, 102, 901, 907, 908, 909, 910], "arraywithsort": 57, "statist": [58, 104, 912], "arraywithstatist": 59, "util": [60, 106, 945], "arraywithutil": 61, "wrap": [62, 108, 162], "add_ivy_array_instance_method": 63, "contain": [64, 69, 70, 164, 173, 206, 208, 263, 265, 342, 344, 347, 351, 355, 357, 360, 364, 368, 372, 376, 380, 384, 388, 392, 396, 400, 404, 408, 412, 416, 418, 421, 425, 429, 433, 437, 441, 445, 449, 453, 457, 461, 465, 469, 473, 477, 481, 485, 489, 493, 497, 501, 505, 511, 513, 516, 520, 524, 528, 532, 536, 540, 544, 548, 552, 556, 559, 561, 564, 566, 569, 571, 575, 580, 582, 591, 608, 610, 655, 657, 659, 661, 664, 666, 668, 670, 672, 674, 676, 678, 680, 682, 726, 775, 777, 780, 782, 785, 787, 791, 793, 796, 800, 804, 808, 812, 816, 820, 824, 826, 830, 834, 838, 842, 846, 873, 879, 882, 884, 895, 897, 904, 906, 909, 911, 915, 919, 923, 927, 931, 935, 939, 943, 948, 950, 953, 955], "containerwithactiv": 66, "base": 67, "containerbas": 68, "multidevcontain": 71, "containerwithcr": 73, "containerwithdatatyp": 75, "containerwithdevic": 77, "containerwithelementwis": 79, "containerwithgener": 81, "containerwithgradi": 83, "containerwithimag": 85, "containerwithlay": 87, "containerwithlinearalgebra": 89, "containerwithloss": 91, "containerwithmanipul": 93, "containerwithnorm": 95, "containerwithrandom": 97, "containerwithsearch": 99, "containerwithset": 101, "containerwithsort": 103, "containerwithstatist": 105, "containerwithutil": 107, "add_ivy_container_instance_method": 109, "framework": [110, 170, 171], "geglu": 112, "gelu": [113, 199], "convert": [114, 175], "to_ivy_modul": 115, "initi": [116, 174], "firstlayersiren": 118, "glorotuniform": 119, "Ones": 121, "siren": 122, "zero": [124, 248], "conv1d": [126, 690], "conv1dtranspos": 127, "conv2d": [128, 692], "conv2dtranspos": 129, "conv3d": [130, 694], "conv3dtranspos": 131, "depthwiseconv2d": 132, "dropout": [133, 697], "lstm": 134, "multiheadattent": 136, "modul": [137, 138, 165, 166, 174], "layernorm": 140, "optim": [141, 145, 174], "adam": 142, "lamb": 143, "lar": 144, "sgd": 146, "sequenti": [147, 148], "contribut": [149, 956], "up": 150, "clone": 150, "ivi": [150, 155, 157, 159, 163, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 186, 205, 206, 207, 208, 216, 217, 220, 221, 224, 225, 228, 229, 233, 234, 236, 237, 240, 241, 243, 244, 246, 247, 250, 251, 262, 263, 264, 265, 341, 342, 343, 344, 346, 347, 348, 350, 351, 352, 354, 355, 356, 357, 359, 360, 361, 363, 364, 365, 367, 368, 369, 371, 372, 373, 375, 376, 377, 379, 380, 381, 383, 384, 385, 387, 388, 389, 391, 392, 393, 395, 396, 397, 399, 400, 401, 403, 404, 405, 407, 408, 409, 411, 412, 413, 415, 416, 417, 418, 420, 421, 422, 424, 425, 426, 428, 429, 430, 432, 433, 434, 436, 437, 438, 440, 441, 442, 444, 445, 446, 448, 449, 450, 452, 453, 454, 456, 457, 458, 460, 461, 462, 464, 465, 466, 468, 469, 470, 472, 473, 474, 476, 477, 478, 480, 481, 482, 484, 485, 486, 488, 489, 490, 492, 493, 494, 496, 497, 498, 500, 501, 502, 504, 505, 506, 510, 511, 512, 513, 515, 516, 517, 519, 520, 521, 523, 524, 525, 527, 528, 529, 531, 532, 533, 535, 536, 537, 539, 540, 541, 543, 544, 545, 547, 548, 549, 551, 552, 553, 555, 556, 557, 559, 560, 561, 562, 564, 565, 566, 567, 569, 570, 571, 572, 574, 575, 576, 579, 580, 581, 582, 591, 592, 607, 608, 609, 610, 654, 655, 656, 657, 659, 660, 661, 664, 665, 666, 668, 669, 670, 672, 673, 674, 676, 677, 678, 680, 681, 682, 704, 705, 707, 708, 710, 711, 713, 714, 716, 717, 719, 720, 722, 723, 725, 726, 727, 729, 730, 733, 734, 736, 737, 739, 740, 742, 743, 745, 746, 749, 750, 752, 753, 755, 756, 758, 759, 761, 762, 764, 765, 767, 768, 770, 771, 774, 775, 776, 777, 779, 780, 781, 782, 784, 785, 786, 787, 790, 791, 792, 793, 795, 796, 797, 799, 800, 801, 803, 804, 805, 807, 808, 809, 811, 812, 813, 815, 816, 817, 819, 820, 821, 823, 824, 825, 826, 829, 830, 831, 833, 834, 835, 837, 838, 839, 841, 842, 843, 845, 846, 847, 872, 873, 874, 878, 879, 882, 883, 884, 895, 896, 897, 898, 903, 904, 905, 906, 908, 909, 910, 911, 914, 915, 916, 918, 919, 920, 922, 923, 924, 926, 927, 928, 930, 931, 932, 934, 935, 936, 938, 939, 940, 942, 943, 944, 947, 948, 949, 950, 952, 953, 954, 955], "pycharm": 150, "virtual": 150, "environ": 150, "docker": [150, 151, 153], "us": [150, 153, 173], "miniconda": [150, 153], "venv": [150, 153], "interpret": 150, "window": 150, "maco": 150, "ubuntu": 150, "github": 150, "codespac": 150, "pre": 150, "commit": [150, 151], "basic": 151, "get": 151, "help": 151, "todo": 151, "list": 151, "issu": 151, "manag": 151, "your": 151, "fork": 151, "who": 151, "To": 151, "ask": 151, "With": 151, "command": 151, "line": 151, "browser": 151, "pull": 151, "request": 151, "small": 151, "often": 151, "run": 151, "test": [151, 158, 159], "local": 151, "open": 152, "task": 152, "function": [152, 160, 162, 164, 165, 166, 168, 170, 175, 187], "format": 152, "frontend": [152, 175], "build": [153, 170], "doc": 153, "dockerless": 153, "document": 153, "pipelin": [153, 187], "make_doc": 153, "sh": 153, "entrypoint": 153, "_make_doc": 153, "generate_src_rst_fil": 153, "py": 153, "sphinx": 153, "correct_built_html_fil": 153, "remove_fil": 153, "deep": 154, "dive": 154, "navig": 155, "code": 155, "categor": 155, "submodul": 155, "design": [155, 169, 956], "docstr": [156, 157], "exampl": [157, 168], "tan": [157, 563, 565, 566, 567], "roll": [157, 822, 823, 824, 825], "add": [157, 353, 354, 355, 356], "hypothesi": 159, "self": 159, "consist": 159, "explicit": 159, "test_array_funct": 159, "primari": 160, "composit": 160, "mix": 160, "standalon": 160, "nestabl": [160, 164, 168], "conveni": 160, "nativ": 163, "handl": 163, "instanc": [164, 172], "method": [164, 172, 173], "static": 164, "special": 164, "argument": [165, 166, 167, 168], "other": [165, 166], "inplac": 167, "updat": 167, "out": [167, 168], "copi": 167, "dtype": [168, 270], "number": 168, "oper": [168, 172, 187], "integ": 168, "sequenc": 168, "block": 170, "graph": [170, 175], "compil": [170, 175, 210, 211], "monkei": 172, "patch": 172, "construct": 173, "represent": 173, "recurs": 173, "built": 173, "ins": 173, "access": 173, "save": 173, "load": 173, "comparison": 173, "custom": [173, 187], "case": 173, "compartment": 173, "configur": 173, "network": [173, 175], "weight": 173, "state": [174, 187], "transpil": 175, "role": 175, "model": [175, 182, 187], "builder": 177, "ecosystem": 178, "gym": [179, 186], "mech": 180, "memori": [181, 186], "robot": [183, 186], "vision": [184, 186], "extens": [185, 956], "appli": 186, "librari": 186, "mechan": 186, "faq": 187, "maintain": 187, "version": 187, "dynam": 187, "size": 187, "shape": [187, 639, 892, 893, 894, 898, 900], "check": 187, "control": 187, "flow": 187, "auto": 187, "differenti": 187, "replica": 187, "parallel": 187, "support": 187, "altern": 187, "structur": 187, "func": 188, "wrapper": 188, "handle_nest": 189, "handle_out_argu": 190, "infer_devic": 191, "infer_dtyp": 192, "inputs_to_ivy_arrai": 193, "inputs_to_native_arrai": 194, "outputs_to_ivy_arrai": 195, "to_native_arrays_and_back": 196, "leaky_relu": 200, "relu": 201, "sigmoid": 202, "softmax": 203, "softplu": [204, 205, 206, 207], "static_softplu": 208, "tanh": [209, 568, 570, 571, 572], "constant": 212, "note": [213, 223, 225], "arang": 214, "asarrai": [215, 216, 217], "empti": 218, "empty_lik": [219, 220, 221], "ey": 222, "from_dlpack": [223, 224, 225], "full": 226, "full_lik": [227, 228, 229], "linspac": 230, "logspac": 231, "meshgrid": [232, 233, 234], "native_arrai": [235, 236, 237], "ones": 238, "ones_lik": [239, 240, 241], "tril": [242, 243, 244], "triu": [245, 246, 247], "zeros_lik": [249, 250, 251], "as_ivy_dtyp": 256, "as_native_dtyp": 257, "astyp": 258, "broadcast_arrai": 259, "broadcast_to": 260, "can_cast": [261, 262, 263, 264], "static_can_cast": 265, "closest_valid_dtyp": 266, "default_dtyp": 267, "default_float_dtyp": 268, "default_int_dtyp": 269, "dtype_bit": 271, "finfo": 272, "function_supported_dtyp": 273, "function_unsupported_dtyp": 274, "iinfo": 275, "invalid_dtyp": 276, "is_float_dtyp": 277, "is_int_dtyp": 278, "promote_typ": 279, "result_typ": 280, "set_default_dtyp": 281, "set_default_float_dtyp": 282, "set_default_int_dtyp": 283, "type_promote_arrai": 284, "unset_default_dtyp": 285, "unset_default_float_dtyp": 286, "unset_default_int_dtyp": 287, "valid_dtyp": 288, "devcloneditem": 291, "devclonedit": 292, "devclonednest": 293, "devdistitem": 294, "devdistit": 295, "devdistnest": 296, "devmapp": 298, "devmappermultiproc": 299, "multidevitem": 301, "multidevit": 302, "multidevnest": 303, "profil": 304, "as_ivy_dev": 305, "as_native_dev": 306, "clear_mem_on_dev": 307, "default_devic": 308, "dev": 309, "dev_clon": 310, "dev_clone_arrai": 311, "dev_clone_it": 312, "dev_clone_nest": 313, "dev_dist": 314, "dev_dist_arrai": 315, "dev_dist_it": 316, "dev_dist_nest": 317, "dev_unifi": 318, "dev_unify_arrai": 319, "dev_unify_it": 320, "dev_unify_nest": 321, "dev_util": 322, "get_all_ivy_arrays_on_dev": 323, "gpu_is_avail": 324, "num_cpu_cor": 325, "num_gpu": 326, "num_ivy_arrays_on_dev": 327, "percent_used_mem_on_dev": 328, "print_all_ivy_arrays_on_dev": 329, "set_default_devic": 330, "set_split_factor": 331, "split_factor": 332, "split_func_cal": 333, "to_devic": 334, "total_mem_on_dev": 335, "tpu_is_avail": 336, "unset_default_devic": 337, "used_mem_on_dev": 338, "ab": [340, 341, 342, 343], "static_ab": 344, "aco": [345, 346, 347, 348], "acosh": [349, 350, 351, 352], "static_add": 357, "asin": [358, 359, 360, 361], "asinh": [362, 363, 364, 365], "atan": [366, 367, 368, 369], "atan2": [370, 371, 372, 373], "atanh": [374, 375, 376, 377], "bitwise_and": [378, 379, 380, 381], "bitwise_invert": [382, 383, 384, 385], "bitwise_left_shift": [386, 387, 388, 389], "bitwise_or": [390, 391, 392, 393], "bitwise_right_shift": [394, 395, 396, 397], "bitwise_xor": [398, 399, 400, 401], "ceil": [402, 403, 404, 405], "co": [406, 407, 408, 409], "cosh": [410, 411, 412, 413], "divid": [414, 415, 416, 417], "static_divid": 418, "equal": [419, 420, 421, 422], "erf": [423, 424, 425, 426], "exp": [427, 428, 429, 430], "expm1": [431, 432, 433, 434], "floor": [435, 436, 437, 438], "floor_divid": [439, 440, 441, 442], "greater": [443, 444, 445, 446], "greater_equ": [447, 448, 449, 450], "isfinit": [451, 452, 453, 454], "isinf": [455, 456, 457, 458], "isnan": [459, 460, 461, 462], "less": [463, 464, 465, 466], "less_equ": [467, 468, 469, 470], "log": [471, 472, 473, 474], "log10": [475, 476, 477, 478], "log1p": [479, 480, 481, 482], "log2": [483, 484, 485, 486], "logaddexp": [487, 488, 489, 490], "logical_and": [491, 492, 493, 494], "logical_not": [495, 496, 497, 498], "logical_or": [499, 500, 501, 502], "logical_xor": [503, 504, 505, 506], "maximum": 507, "minimum": 508, "multipli": [509, 510, 511, 512], "static_multipli": 513, "neg": [514, 515, 516, 517], "not_equ": [518, 519, 520, 521], "posit": [522, 523, 524, 525], "pow": [526, 527, 528, 529], "remaind": [530, 531, 532, 533], "round": [534, 535, 536, 537], "sign": [538, 539, 540, 541], "sin": [542, 543, 544, 545], "sinh": [546, 547, 548, 549], "sqrt": [550, 551, 552, 553], "squar": [554, 555, 556, 557], "subtract": [558, 560, 561, 562], "static_subtract": 559, "static_tan": 564, "static_tanh": 569, "trunc": [573, 574, 575, 576], "all_equ": [578, 579, 580, 581], "static_all_equ": 582, "arg_info": 583, "arg_nam": 584, "array_equ": 585, "arrays_equ": 586, "assert_supports_inplac": 587, "cache_fn": 588, "clip_matrix_norm": 589, "clip_vector_norm": [590, 591, 592], "container_typ": 593, "copy_arrai": 594, "cumprod": 595, "cumsum": 596, "current_backend_str": 597, "default": 598, "einops_rearrang": 599, "einops_reduc": 600, "einops_repeat": 601, "exist": 602, "floormod": 603, "fourier_encod": 604, "gather": 605, "gather_nd": [606, 607, 608, 609], "static_gather_nd": 610, "get_all_arrays_in_memori": 611, "get_min_bas": 612, "get_min_denomin": 613, "get_num_dim": 614, "get_referrers_recurs": 615, "has_nan": 616, "indices_wher": 617, "inplace_arrays_support": 618, "inplace_decr": 619, "inplace_incr": 620, "inplace_upd": 621, "inplace_variables_support": 622, "is_arrai": 623, "is_ivy_arrai": 624, "is_ivy_contain": 625, "is_native_arrai": 626, "match_kwarg": 627, "multiprocess": 628, "num_arrays_in_memori": 629, "one_hot": 630, "print_all_arrays_in_memori": 631, "queue_timeout": 632, "scatter_flat": 633, "scatter_nd": 634, "set_min_bas": 635, "set_min_denomin": 636, "set_queue_timeout": 637, "set_tmp_dir": 638, "shape_to_tupl": 640, "stable_divid": 641, "stable_pow": 642, "supports_inplac": 643, "tmp_dir": 644, "to_list": 645, "to_numpi": 646, "to_scalar": 647, "try_else_non": 648, "unstack": 649, "value_is_nan": 650, "adam_step": [653, 654, 655, 656], "static_adam_step": 657, "adam_upd": [658, 659, 660], "static_adam_upd": 661, "execute_with_gradi": 662, "gradient_descent_upd": [663, 664, 665], "static_gradient_descent_upd": 666, "is_vari": [667, 668, 669], "static_is_vari": 670, "lamb_upd": [671, 672, 673], "static_lamb_upd": 674, "lars_upd": [675, 676, 677], "static_lars_upd": 678, "optimizer_upd": [679, 680, 681], "static_optimizer_upd": 682, "set_with_grad": 683, "stop_gradi": 684, "unset_with_grad": 685, "variabl": 686, "variable_data": 687, "with_grad": 688, "conv1d_transpos": 691, "conv2d_transpos": 693, "conv3d_transpos": 695, "depthwise_conv2d": 696, "lstm_updat": 699, "multi_head_attent": 700, "scaled_dot_product_attent": 701, "choleski": [703, 704, 705], "cross": [706, 707, 708], "det": [709, 710, 711], "diagon": [712, 713, 714], "eigh": [715, 716, 717], "eigvalsh": [718, 719, 720], "inv": [721, 722, 723], "matmul": [724, 725, 726, 727], "matrix_norm": [728, 729, 730], "matrix_pow": 731, "matrix_rank": [732, 733, 734], "matrix_transpos": [735, 736, 737], "outer": [738, 739, 740], "pinv": [741, 742, 743], "qr": [744, 745, 746], "slogdet": 747, "solv": [748, 749, 750], "svd": [751, 752, 753], "svdval": [754, 755, 756], "tensordot": [757, 758, 759], "trace": [760, 761, 762], "vecdot": [763, 764, 765], "vector_norm": [766, 767, 768], "vector_to_skew_symmetric_matrix": [769, 770, 771], "binary_cross_entropi": [773, 774, 775, 776], "static_binary_cross_entropi": 777, "cross_entropi": [778, 779, 780, 781], "static_cross_entropi": 782, "sparse_cross_entropi": [783, 784, 785, 786], "static_sparse_cross_entropi": 787, "clip": [789, 790, 791, 792], "static_clip": 793, "concat": [794, 795, 796, 797], "constant_pad": [798, 799, 800, 801], "expand_dim": [802, 803, 804, 805], "flip": [806, 807, 808, 809], "permute_dim": [810, 811, 812, 813], "repeat": [814, 815, 816, 817], "reshap": [818, 819, 820, 821], "static_rol": 826, "split": 827, "squeez": [828, 829, 830, 831], "stack": [832, 833, 834, 835], "swapax": [836, 837, 838, 839], "tile": [840, 841, 842, 843], "zero_pad": [844, 845, 846, 847], "meta": 848, "fomaml_step": 849, "maml_step": 850, "reptile_step": 851, "nest": 852, "all_nested_indic": 853, "copy_nest": 854, "index_nest": 855, "insert_into_nest_at_index": 856, "insert_into_nest_at_indic": 857, "map": 858, "map_nest_at_index": 859, "map_nest_at_indic": 860, "multi_index_nest": 861, "nested_ani": 862, "nested_indices_wher": 863, "nested_map": 864, "nested_multi_map": 865, "prune_nest_at_index": 866, "prune_nest_at_indic": 867, "set_nest_at_index": 868, "set_nest_at_indic": 869, "layer_norm": [871, 872, 873, 874], "multinomi": 876, "randint": [877, 878], "static_randint": 879, "random_norm": 880, "random_uniform": [881, 882, 883], "static_random_uniform": 884, "seed": 885, "shuffl": 886, "argmax": 888, "argmin": 889, "nonzero": 890, "where": 891, "depend": [892, 893, 894, 898, 900], "output": [892, 893, 894, 898, 900], "unique_al": 893, "unique_count": [894, 896, 897, 898], "static_unique_count": 895, "unique_invers": 899, "unique_valu": 900, "argsort": [902, 903, 904, 905], "static_argsort": 906, "static_sort": 911, "einsum": [913, 914, 915, 916], "max": [917, 918, 919, 920], "mean": [921, 922, 923, 924], "min": [925, 926, 927, 928], "prod": [929, 930, 931, 932], "std": [933, 934, 935, 936], "sum": [937, 938, 939, 940], "var": [941, 942, 943, 944], "all": [946, 947, 948, 949], "static_al": 950, "ani": [951, 952, 953, 954], "static_ani": 955, "content": 956, "overview": 956, "quick": 956, "start": 956, "roadmap": [956, 962], "citat": 956, "inspect": 959, "add_array_spec": 960, "fn_array_spec": 961, "verbos": 964, "cprint": 965}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 6, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.viewcode": 1, "sphinx": 56}})