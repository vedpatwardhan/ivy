Search.setIndex({"docnames": ["backend_handler", "backend_handler/ContextManager:\n    def __init__", "backend_handler/choose_random_backend", "backend_handler/clear_backend_stack", "backend_handler/current_backend", "backend_handler/get_backend", "backend_handler/set_backend", "backend_handler/try_import_ivy_jax", "backend_handler/try_import_ivy_mxnet", "backend_handler/try_import_ivy_numpy", "backend_handler/try_import_ivy_tf", "backend_handler/try_import_ivy_torch", "backend_handler/unset_backend", "background", "background/ml_explosion", "background/standardization", "background/why_unify", "classes/data_classes", "classes/data_classes/array", "classes/data_classes/array/activations", "classes/data_classes/array/activations/ArrayWithActivations", "classes/data_classes/array/conversions", "classes/data_classes/array/conversions/args_to_ivy", "classes/data_classes/array/conversions/args_to_native", "classes/data_classes/array/conversions/to_ivy", "classes/data_classes/array/conversions/to_native", "classes/data_classes/array/creation", "classes/data_classes/array/creation/ArrayWithCreation", "classes/data_classes/array/data_type", "classes/data_classes/array/data_type/ArrayWithDataTypes", "classes/data_classes/array/device", "classes/data_classes/array/device/ArrayWithDevice", "classes/data_classes/array/elementwise", "classes/data_classes/array/elementwise/ArrayWithElementwise", "classes/data_classes/array/general", "classes/data_classes/array/general/ArrayWithGeneral", "classes/data_classes/array/gradients", "classes/data_classes/array/gradients/ArrayWithGradients", "classes/data_classes/array/image", "classes/data_classes/array/image/ArrayWithImage", "classes/data_classes/array/layers", "classes/data_classes/array/layers/ArrayWithLayers", "classes/data_classes/array/linear_algebra", "classes/data_classes/array/linear_algebra/ArrayWithLinearAlgebra", "classes/data_classes/array/losses", "classes/data_classes/array/losses/ArrayWithLosses", "classes/data_classes/array/manipulation", "classes/data_classes/array/manipulation/ArrayWithManipulation", "classes/data_classes/array/norms", "classes/data_classes/array/norms/ArrayWithNorms", "classes/data_classes/array/random", "classes/data_classes/array/random/ArrayWithRandom", "classes/data_classes/array/searching", "classes/data_classes/array/searching/ArrayWithSearching", "classes/data_classes/array/set", "classes/data_classes/array/set/ArrayWithSet", "classes/data_classes/array/sorting", "classes/data_classes/array/sorting/ArrayWithSorting", "classes/data_classes/array/statistical", "classes/data_classes/array/statistical/ArrayWithStatistical", "classes/data_classes/array/utility", "classes/data_classes/array/utility/ArrayWithUtility", "classes/data_classes/array/wrapping", "classes/data_classes/array/wrapping/add_ivy_array_instance_methods", "classes/data_classes/container", "classes/data_classes/container/activations", "classes/data_classes/container/activations/ContainerWithActivations", "classes/data_classes/container/base", "classes/data_classes/container/base/ContainerBase", "classes/data_classes/container/container", "classes/data_classes/container/container/Container", "classes/data_classes/container/container/MultiDevContainer", "classes/data_classes/container/creation", "classes/data_classes/container/creation/ContainerWithCreation", "classes/data_classes/container/data_type", "classes/data_classes/container/data_type/ContainerWithDataTypes", "classes/data_classes/container/device", "classes/data_classes/container/device/ContainerWithDevice", "classes/data_classes/container/elementwise", "classes/data_classes/container/elementwise/ContainerWithElementwise", "classes/data_classes/container/general", "classes/data_classes/container/general/ContainerWithGeneral", "classes/data_classes/container/gradients", "classes/data_classes/container/gradients/ContainerWithGradients", "classes/data_classes/container/image", "classes/data_classes/container/image/ContainerWithImage", "classes/data_classes/container/layers", "classes/data_classes/container/layers/ContainerWithLayers", "classes/data_classes/container/linear_algebra", "classes/data_classes/container/linear_algebra/ContainerWithLinearAlgebra", "classes/data_classes/container/losses", "classes/data_classes/container/losses/ContainerWithLosses", "classes/data_classes/container/manipulation", "classes/data_classes/container/manipulation/ContainerWithManipulation", "classes/data_classes/container/norms", "classes/data_classes/container/norms/ContainerWithNorms", "classes/data_classes/container/random", "classes/data_classes/container/random/ContainerWithRandom", "classes/data_classes/container/searching", "classes/data_classes/container/searching/ContainerWithSearching", "classes/data_classes/container/set", "classes/data_classes/container/set/ContainerWithSet", "classes/data_classes/container/sorting", "classes/data_classes/container/sorting/ContainerWithSorting", "classes/data_classes/container/statistical", "classes/data_classes/container/statistical/ContainerWithStatistical", "classes/data_classes/container/utility", "classes/data_classes/container/utility/ContainerWithUtility", "classes/data_classes/container/wrapping", "classes/data_classes/container/wrapping/add_ivy_container_instance_methods", "classes/stateful", "classes/stateful/activations", "classes/stateful/activations/GEGLU", "classes/stateful/activations/GELU", "classes/stateful/converters", "classes/stateful/converters/to_ivy_module", "classes/stateful/initializers", "classes/stateful/initializers/Constant:\n    def __init__", "classes/stateful/initializers/FirstLayerSiren", "classes/stateful/initializers/GlorotUniform", "classes/stateful/initializers/KaimingNormal:\n    def __init__", "classes/stateful/initializers/Ones", "classes/stateful/initializers/Siren", "classes/stateful/initializers/Uniform:\n    def __init__", "classes/stateful/initializers/Zeros", "classes/stateful/layers", "classes/stateful/layers/Conv1D", "classes/stateful/layers/Conv1DTranspose", "classes/stateful/layers/Conv2D", "classes/stateful/layers/Conv2DTranspose", "classes/stateful/layers/Conv3D", "classes/stateful/layers/Conv3DTranspose", "classes/stateful/layers/DepthwiseConv2D", "classes/stateful/layers/Dropout", "classes/stateful/layers/LSTM", "classes/stateful/layers/Linear", "classes/stateful/layers/MultiHeadAttention", "classes/stateful/module", "classes/stateful/module/Module", "classes/stateful/norms", "classes/stateful/norms/LayerNorm", "classes/stateful/optimizers", "classes/stateful/optimizers/Adam", "classes/stateful/optimizers/LAMB", "classes/stateful/optimizers/LARS", "classes/stateful/optimizers/Optimizer", "classes/stateful/optimizers/SGD", "classes/stateful/sequential", "classes/stateful/sequential/Sequential", "contributing", "contributing/0_setting_up", "contributing/1_the_basics", "contributing/4_open_tasks", "contributing/building_the_docs", "deep_dive", "deep_dive/0_navigating_the_code", "deep_dive/10_docstrings", "deep_dive/11_docstring_examples", "deep_dive/12_array_api_tests", "deep_dive/13_ivy_tests", "deep_dive/1_function_types", "deep_dive/2_backend_setting", "deep_dive/3_function_wrapping", "deep_dive/4_arrays", "deep_dive/5_containers", "deep_dive/6_data_types", "deep_dive/7_devices", "deep_dive/8_inplace_updates", "deep_dive/9_function_arguments", "design", "design/building_blocks", "design/ivy_as_a_framework", "design/ivy_as_a_framework/ivy_array", "design/ivy_as_a_framework/ivy_container", "design/ivy_as_a_framework/ivy_stateful_api", "design/ivy_as_a_transpiler", "docs/ivy", "docs/ivy_builder", "docs/ivy_ecosystem", "docs/ivy_gym", "docs/ivy_mech", "docs/ivy_memory", "docs/ivy_models", "docs/ivy_robot", "docs/ivy_vision", "extensions", "extensions/applied_libraries", "faq", "func_wrapper", "func_wrapper/handle_nestable", "func_wrapper/handle_out_argument", "func_wrapper/infer_device", "func_wrapper/infer_dtype", "func_wrapper/inputs_to_ivy_arrays", "func_wrapper/inputs_to_native_arrays", "func_wrapper/outputs_to_ivy_arrays", "func_wrapper/to_native_arrays_and_back", "functional/ivy", "functional/ivy/activations", "functional/ivy/activations/gelu", "functional/ivy/activations/leaky_relu", "functional/ivy/activations/relu", "functional/ivy/activations/sigmoid", "functional/ivy/activations/softmax", "functional/ivy/activations/softplus", "functional/ivy/activations/tanh", "functional/ivy/compilation", "functional/ivy/compilation/compile", "functional/ivy/constants", "functional/ivy/creation", "functional/ivy/creation/arange", "functional/ivy/creation/asarray", "functional/ivy/creation/empty", "functional/ivy/creation/empty_like", "functional/ivy/creation/eye", "functional/ivy/creation/from_dlpack", "functional/ivy/creation/full", "functional/ivy/creation/full_like", "functional/ivy/creation/linspace", "functional/ivy/creation/logspace", "functional/ivy/creation/meshgrid", "functional/ivy/creation/native_array", "functional/ivy/creation/ones", "functional/ivy/creation/ones_like", "functional/ivy/creation/tril", "functional/ivy/creation/triu", "functional/ivy/creation/zeros", "functional/ivy/creation/zeros_like", "functional/ivy/data_type", "functional/ivy/data_type/DefaultDtype:\n    \"\"\"\"\"\"\n\n    # noinspection PyShadowingNames\n    def __init__", "functional/ivy/data_type/DefaultFloatDtype:\n    \"\"\"\"\"\"\n\n    # noinspection PyShadowingNames\n    def __init__", "functional/ivy/data_type/DefaultIntDtype:\n    \"\"\"\"\"\"\n\n    # noinspection PyShadowingNames\n    def __init__", "functional/ivy/data_type/as_ivy_dtype", "functional/ivy/data_type/as_native_dtype", "functional/ivy/data_type/astype", "functional/ivy/data_type/broadcast_arrays", "functional/ivy/data_type/broadcast_to", "functional/ivy/data_type/can_cast", "functional/ivy/data_type/can_cast/can_cast_array", "functional/ivy/data_type/can_cast/can_cast_container", "functional/ivy/data_type/can_cast/can_cast_functional", "functional/ivy/data_type/can_cast/static_can_cast_container", "functional/ivy/data_type/closest_valid_dtype", "functional/ivy/data_type/default_dtype", "functional/ivy/data_type/default_float_dtype", "functional/ivy/data_type/default_int_dtype", "functional/ivy/data_type/dtype", "functional/ivy/data_type/dtype_bits", "functional/ivy/data_type/finfo", "functional/ivy/data_type/function_supported_dtypes", "functional/ivy/data_type/function_unsupported_dtypes", "functional/ivy/data_type/iinfo", "functional/ivy/data_type/invalid_dtype", "functional/ivy/data_type/is_float_dtype", "functional/ivy/data_type/is_int_dtype", "functional/ivy/data_type/promote_types", "functional/ivy/data_type/result_type", "functional/ivy/data_type/set_default_dtype", "functional/ivy/data_type/set_default_float_dtype", "functional/ivy/data_type/set_default_int_dtype", "functional/ivy/data_type/type_promote_arrays", "functional/ivy/data_type/unset_default_dtype", "functional/ivy/data_type/unset_default_float_dtype", "functional/ivy/data_type/unset_default_int_dtype", "functional/ivy/data_type/valid_dtype", "functional/ivy/device", "functional/ivy/device/DefaultDevice:\n    \"\"\"\"\"\"\n\n    # noinspection PyShadowingNames\n    def __init__", "functional/ivy/device/DevClonedItem", "functional/ivy/device/DevClonedIter", "functional/ivy/device/DevClonedNest", "functional/ivy/device/DevDistItem", "functional/ivy/device/DevDistIter", "functional/ivy/device/DevDistNest", "functional/ivy/device/DevManager:\n    \"\"\"\"\"\"\n\n    def __init__", "functional/ivy/device/DevMapper", "functional/ivy/device/DevMapperMultiProc", "functional/ivy/device/MultiDev:\n    def __init__", "functional/ivy/device/MultiDevItem", "functional/ivy/device/MultiDevIter", "functional/ivy/device/MultiDevNest", "functional/ivy/device/Profiler", "functional/ivy/device/as_ivy_dev", "functional/ivy/device/as_native_dev", "functional/ivy/device/clear_mem_on_dev", "functional/ivy/device/default_device", "functional/ivy/device/dev", "functional/ivy/device/dev_clone", "functional/ivy/device/dev_clone_array", "functional/ivy/device/dev_clone_iter", "functional/ivy/device/dev_clone_nest", "functional/ivy/device/dev_dist", "functional/ivy/device/dev_dist_array", "functional/ivy/device/dev_dist_iter", "functional/ivy/device/dev_dist_nest", "functional/ivy/device/dev_unify", "functional/ivy/device/dev_unify_array", "functional/ivy/device/dev_unify_iter", "functional/ivy/device/dev_unify_nest", "functional/ivy/device/dev_util", "functional/ivy/device/get_all_ivy_arrays_on_dev", "functional/ivy/device/gpu_is_available", "functional/ivy/device/num_cpu_cores", "functional/ivy/device/num_gpus", "functional/ivy/device/num_ivy_arrays_on_dev", "functional/ivy/device/percent_used_mem_on_dev", "functional/ivy/device/print_all_ivy_arrays_on_dev", "functional/ivy/device/set_default_device", "functional/ivy/device/set_split_factor", "functional/ivy/device/split_factor", "functional/ivy/device/split_func_call", "functional/ivy/device/to_device", "functional/ivy/device/total_mem_on_dev", "functional/ivy/device/tpu_is_available", "functional/ivy/device/unset_default_device", "functional/ivy/device/used_mem_on_dev", "functional/ivy/elementwise", "functional/ivy/elementwise/abs", "functional/ivy/elementwise/abs/abs_array", "functional/ivy/elementwise/abs/abs_container", "functional/ivy/elementwise/abs/abs_functional", "functional/ivy/elementwise/acos", "functional/ivy/elementwise/acos/acos_array", "functional/ivy/elementwise/acos/acos_container", "functional/ivy/elementwise/acos/acos_functional", "functional/ivy/elementwise/acosh", "functional/ivy/elementwise/acosh/acosh_array", "functional/ivy/elementwise/acosh/acosh_container", "functional/ivy/elementwise/acosh/acosh_functional", "functional/ivy/elementwise/add", "functional/ivy/elementwise/add/add_array", "functional/ivy/elementwise/add/add_container", "functional/ivy/elementwise/add/add_functional", "functional/ivy/elementwise/add/static_add_container", "functional/ivy/elementwise/asin", "functional/ivy/elementwise/asin/asin_array", "functional/ivy/elementwise/asin/asin_container", "functional/ivy/elementwise/asin/asin_functional", "functional/ivy/elementwise/asinh", "functional/ivy/elementwise/asinh/asinh_array", "functional/ivy/elementwise/asinh/asinh_container", "functional/ivy/elementwise/asinh/asinh_functional", "functional/ivy/elementwise/atan", "functional/ivy/elementwise/atan/atan_array", "functional/ivy/elementwise/atan/atan_container", "functional/ivy/elementwise/atan/atan_functional", "functional/ivy/elementwise/atan2", "functional/ivy/elementwise/atan2/atan2_array", "functional/ivy/elementwise/atan2/atan2_container", "functional/ivy/elementwise/atan2/atan2_functional", "functional/ivy/elementwise/atanh", "functional/ivy/elementwise/atanh/atanh_array", "functional/ivy/elementwise/atanh/atanh_container", "functional/ivy/elementwise/atanh/atanh_functional", "functional/ivy/elementwise/bitwise_and", "functional/ivy/elementwise/bitwise_and/bitwise_and_array", "functional/ivy/elementwise/bitwise_and/bitwise_and_container", "functional/ivy/elementwise/bitwise_and/bitwise_and_functional", "functional/ivy/elementwise/bitwise_invert", "functional/ivy/elementwise/bitwise_invert/bitwise_invert_array", "functional/ivy/elementwise/bitwise_invert/bitwise_invert_container", "functional/ivy/elementwise/bitwise_invert/bitwise_invert_functional", "functional/ivy/elementwise/bitwise_left_shift", "functional/ivy/elementwise/bitwise_left_shift/bitwise_left_shift_array", "functional/ivy/elementwise/bitwise_left_shift/bitwise_left_shift_container", "functional/ivy/elementwise/bitwise_left_shift/bitwise_left_shift_functional", "functional/ivy/elementwise/bitwise_or", "functional/ivy/elementwise/bitwise_or/bitwise_or_array", "functional/ivy/elementwise/bitwise_or/bitwise_or_container", "functional/ivy/elementwise/bitwise_or/bitwise_or_functional", "functional/ivy/elementwise/bitwise_right_shift", "functional/ivy/elementwise/bitwise_right_shift/bitwise_right_shift_array", "functional/ivy/elementwise/bitwise_right_shift/bitwise_right_shift_container", "functional/ivy/elementwise/bitwise_right_shift/bitwise_right_shift_functional", "functional/ivy/elementwise/bitwise_xor", "functional/ivy/elementwise/bitwise_xor/bitwise_xor_array", "functional/ivy/elementwise/bitwise_xor/bitwise_xor_container", "functional/ivy/elementwise/bitwise_xor/bitwise_xor_functional", "functional/ivy/elementwise/ceil", "functional/ivy/elementwise/ceil/ceil_array", "functional/ivy/elementwise/ceil/ceil_container", "functional/ivy/elementwise/ceil/ceil_functional", "functional/ivy/elementwise/cos", "functional/ivy/elementwise/cos/cos_array", "functional/ivy/elementwise/cos/cos_container", "functional/ivy/elementwise/cos/cos_functional", "functional/ivy/elementwise/cosh", "functional/ivy/elementwise/cosh/cosh_array", "functional/ivy/elementwise/cosh/cosh_container", "functional/ivy/elementwise/cosh/cosh_functional", "functional/ivy/elementwise/divide", "functional/ivy/elementwise/divide/divide_array", "functional/ivy/elementwise/divide/divide_container", "functional/ivy/elementwise/divide/divide_functional", "functional/ivy/elementwise/divide/static_divide_container", "functional/ivy/elementwise/equal", "functional/ivy/elementwise/equal/equal_array", "functional/ivy/elementwise/equal/equal_container", "functional/ivy/elementwise/equal/equal_functional", "functional/ivy/elementwise/erf", "functional/ivy/elementwise/erf/erf_array", "functional/ivy/elementwise/erf/erf_container", "functional/ivy/elementwise/erf/erf_functional", "functional/ivy/elementwise/exp", "functional/ivy/elementwise/exp/exp_array", "functional/ivy/elementwise/exp/exp_container", "functional/ivy/elementwise/exp/exp_functional", "functional/ivy/elementwise/expm1", "functional/ivy/elementwise/expm1/expm1_array", "functional/ivy/elementwise/expm1/expm1_container", "functional/ivy/elementwise/expm1/expm1_functional", "functional/ivy/elementwise/floor", "functional/ivy/elementwise/floor/floor_array", "functional/ivy/elementwise/floor/floor_container", "functional/ivy/elementwise/floor/floor_functional", "functional/ivy/elementwise/floor_divide", "functional/ivy/elementwise/floor_divide/floor_divide_array", "functional/ivy/elementwise/floor_divide/floor_divide_container", "functional/ivy/elementwise/floor_divide/floor_divide_functional", "functional/ivy/elementwise/greater", "functional/ivy/elementwise/greater/greater_array", "functional/ivy/elementwise/greater/greater_container", "functional/ivy/elementwise/greater/greater_functional", "functional/ivy/elementwise/greater_equal", "functional/ivy/elementwise/greater_equal/greater_equal_array", "functional/ivy/elementwise/greater_equal/greater_equal_container", "functional/ivy/elementwise/greater_equal/greater_equal_functional", "functional/ivy/elementwise/isfinite", "functional/ivy/elementwise/isfinite/isfinite_array", "functional/ivy/elementwise/isfinite/isfinite_container", "functional/ivy/elementwise/isfinite/isfinite_functional", "functional/ivy/elementwise/isinf", "functional/ivy/elementwise/isinf/isinf_array", "functional/ivy/elementwise/isinf/isinf_container", "functional/ivy/elementwise/isinf/isinf_functional", "functional/ivy/elementwise/isnan", "functional/ivy/elementwise/isnan/isnan_array", "functional/ivy/elementwise/isnan/isnan_container", "functional/ivy/elementwise/isnan/isnan_functional", "functional/ivy/elementwise/less", "functional/ivy/elementwise/less/less_array", "functional/ivy/elementwise/less/less_container", "functional/ivy/elementwise/less/less_functional", "functional/ivy/elementwise/less_equal", "functional/ivy/elementwise/less_equal/less_equal_array", "functional/ivy/elementwise/less_equal/less_equal_container", "functional/ivy/elementwise/less_equal/less_equal_functional", "functional/ivy/elementwise/log", "functional/ivy/elementwise/log/log_array", "functional/ivy/elementwise/log/log_container", "functional/ivy/elementwise/log/log_functional", "functional/ivy/elementwise/log10", "functional/ivy/elementwise/log10/log10_array", "functional/ivy/elementwise/log10/log10_container", "functional/ivy/elementwise/log10/log10_functional", "functional/ivy/elementwise/log1p", "functional/ivy/elementwise/log1p/log1p_array", "functional/ivy/elementwise/log1p/log1p_container", "functional/ivy/elementwise/log1p/log1p_functional", "functional/ivy/elementwise/log2", "functional/ivy/elementwise/log2/log2_array", "functional/ivy/elementwise/log2/log2_container", "functional/ivy/elementwise/log2/log2_functional", "functional/ivy/elementwise/logaddexp", "functional/ivy/elementwise/logaddexp/logaddexp_array", "functional/ivy/elementwise/logaddexp/logaddexp_container", "functional/ivy/elementwise/logaddexp/logaddexp_functional", "functional/ivy/elementwise/logical_and", "functional/ivy/elementwise/logical_and/logical_and_array", "functional/ivy/elementwise/logical_and/logical_and_container", "functional/ivy/elementwise/logical_and/logical_and_functional", "functional/ivy/elementwise/logical_not", "functional/ivy/elementwise/logical_not/logical_not_array", "functional/ivy/elementwise/logical_not/logical_not_container", "functional/ivy/elementwise/logical_not/logical_not_functional", "functional/ivy/elementwise/logical_or", "functional/ivy/elementwise/logical_or/logical_or_array", "functional/ivy/elementwise/logical_or/logical_or_container", "functional/ivy/elementwise/logical_or/logical_or_functional", "functional/ivy/elementwise/logical_xor", "functional/ivy/elementwise/logical_xor/logical_xor_array", "functional/ivy/elementwise/logical_xor/logical_xor_container", "functional/ivy/elementwise/logical_xor/logical_xor_functional", "functional/ivy/elementwise/maximum", "functional/ivy/elementwise/minimum", "functional/ivy/elementwise/multiply", "functional/ivy/elementwise/multiply/multiply_array", "functional/ivy/elementwise/multiply/multiply_container", "functional/ivy/elementwise/multiply/multiply_functional", "functional/ivy/elementwise/multiply/static_multiply_container", "functional/ivy/elementwise/negative", "functional/ivy/elementwise/negative/negative_array", "functional/ivy/elementwise/negative/negative_container", "functional/ivy/elementwise/negative/negative_functional", "functional/ivy/elementwise/not_equal", "functional/ivy/elementwise/not_equal/not_equal_array", "functional/ivy/elementwise/not_equal/not_equal_container", "functional/ivy/elementwise/not_equal/not_equal_functional", "functional/ivy/elementwise/positive", "functional/ivy/elementwise/positive/positive_array", "functional/ivy/elementwise/positive/positive_container", "functional/ivy/elementwise/positive/positive_functional", "functional/ivy/elementwise/pow", "functional/ivy/elementwise/pow/pow_array", "functional/ivy/elementwise/pow/pow_container", "functional/ivy/elementwise/pow/pow_functional", "functional/ivy/elementwise/remainder", "functional/ivy/elementwise/remainder/remainder_array", "functional/ivy/elementwise/remainder/remainder_container", "functional/ivy/elementwise/remainder/remainder_functional", "functional/ivy/elementwise/round", "functional/ivy/elementwise/round/round_array", "functional/ivy/elementwise/round/round_container", "functional/ivy/elementwise/round/round_functional", "functional/ivy/elementwise/sign", "functional/ivy/elementwise/sign/sign_array", "functional/ivy/elementwise/sign/sign_container", "functional/ivy/elementwise/sign/sign_functional", "functional/ivy/elementwise/sin", "functional/ivy/elementwise/sin/sin_array", "functional/ivy/elementwise/sin/sin_container", "functional/ivy/elementwise/sin/sin_functional", "functional/ivy/elementwise/sinh", "functional/ivy/elementwise/sinh/sinh_array", "functional/ivy/elementwise/sinh/sinh_container", "functional/ivy/elementwise/sinh/sinh_functional", "functional/ivy/elementwise/sqrt", "functional/ivy/elementwise/sqrt/sqrt_array", "functional/ivy/elementwise/sqrt/sqrt_container", "functional/ivy/elementwise/sqrt/sqrt_functional", "functional/ivy/elementwise/square", "functional/ivy/elementwise/square/square_array", "functional/ivy/elementwise/square/square_container", "functional/ivy/elementwise/square/square_functional", "functional/ivy/elementwise/subtract", "functional/ivy/elementwise/subtract/static_subtract_container", "functional/ivy/elementwise/subtract/subtract_array", "functional/ivy/elementwise/subtract/subtract_container", "functional/ivy/elementwise/subtract/subtract_functional", "functional/ivy/elementwise/tan", "functional/ivy/elementwise/tan/static_tan_container", "functional/ivy/elementwise/tan/tan_array", "functional/ivy/elementwise/tan/tan_container", "functional/ivy/elementwise/tan/tan_functional", "functional/ivy/elementwise/tanh", "functional/ivy/elementwise/tanh/static_tanh_container", "functional/ivy/elementwise/tanh/tanh_array", "functional/ivy/elementwise/tanh/tanh_container", "functional/ivy/elementwise/tanh/tanh_functional", "functional/ivy/elementwise/trunc", "functional/ivy/elementwise/trunc/trunc_array", "functional/ivy/elementwise/trunc/trunc_container", "functional/ivy/elementwise/trunc/trunc_functional", "functional/ivy/general", "functional/ivy/general/all_equal", "functional/ivy/general/all_equal/all_equal_array", "functional/ivy/general/all_equal/all_equal_container", "functional/ivy/general/all_equal/all_equal_functional", "functional/ivy/general/all_equal/static_all_equal_container", "functional/ivy/general/arg_info", "functional/ivy/general/arg_names", "functional/ivy/general/array_equal", "functional/ivy/general/arrays_equal", "functional/ivy/general/assert_supports_inplace", "functional/ivy/general/cache_fn", "functional/ivy/general/clip_matrix_norm", "functional/ivy/general/clip_vector_norm", "functional/ivy/general/clip_vector_norm/clip_vector_norm_container", "functional/ivy/general/clip_vector_norm/clip_vector_norm_functional", "functional/ivy/general/container_types", "functional/ivy/general/copy_array", "functional/ivy/general/cumprod", "functional/ivy/general/cumsum", "functional/ivy/general/current_backend_str", "functional/ivy/general/default", "functional/ivy/general/einops_rearrange", "functional/ivy/general/einops_reduce", "functional/ivy/general/einops_repeat", "functional/ivy/general/exists", "functional/ivy/general/floormod", "functional/ivy/general/fourier_encode", "functional/ivy/general/gather", "functional/ivy/general/gather_nd", "functional/ivy/general/gather_nd/gather_nd_array", "functional/ivy/general/gather_nd/gather_nd_container", "functional/ivy/general/gather_nd/gather_nd_functional", "functional/ivy/general/gather_nd/static_gather_nd_container", "functional/ivy/general/get_all_arrays_in_memory", "functional/ivy/general/get_min_base", "functional/ivy/general/get_min_denominator", "functional/ivy/general/get_num_dims", "functional/ivy/general/get_referrers_recursive", "functional/ivy/general/has_nans", "functional/ivy/general/indices_where", "functional/ivy/general/inplace_arrays_supported", "functional/ivy/general/inplace_decrement", "functional/ivy/general/inplace_increment", "functional/ivy/general/inplace_update", "functional/ivy/general/inplace_variables_supported", "functional/ivy/general/is_array", "functional/ivy/general/is_ivy_array", "functional/ivy/general/is_ivy_container", "functional/ivy/general/is_native_array", "functional/ivy/general/match_kwargs", "functional/ivy/general/multiprocessing", "functional/ivy/general/num_arrays_in_memory", "functional/ivy/general/one_hot", "functional/ivy/general/print_all_arrays_in_memory", "functional/ivy/general/queue_timeout", "functional/ivy/general/scatter_flat", "functional/ivy/general/scatter_nd", "functional/ivy/general/set_min_base", "functional/ivy/general/set_min_denominator", "functional/ivy/general/set_queue_timeout", "functional/ivy/general/set_tmp_dir", "functional/ivy/general/shape", "functional/ivy/general/shape_to_tuple", "functional/ivy/general/stable_divide", "functional/ivy/general/stable_pow", "functional/ivy/general/supports_inplace", "functional/ivy/general/tmp_dir", "functional/ivy/general/to_list", "functional/ivy/general/to_numpy", "functional/ivy/general/to_scalar", "functional/ivy/general/try_else_none", "functional/ivy/general/unstack", "functional/ivy/general/value_is_nan", "functional/ivy/gradients", "functional/ivy/gradients/GradientTracking:\n    \"\"\"\"\"\"\n\n    # noinspection PyShadowingNames\n    def __init__", "functional/ivy/gradients/adam_step", "functional/ivy/gradients/adam_update", "functional/ivy/gradients/adam_update/adam_update_container", "functional/ivy/gradients/adam_update/adam_update_functional", "functional/ivy/gradients/adam_update/static_adam_update_container", "functional/ivy/gradients/execute_with_gradients", "functional/ivy/gradients/gradient_descent_update", "functional/ivy/gradients/gradient_descent_update/gradient_descent_update_container", "functional/ivy/gradients/gradient_descent_update/gradient_descent_update_functional", "functional/ivy/gradients/gradient_descent_update/static_gradient_descent_update_container", "functional/ivy/gradients/is_variable", "functional/ivy/gradients/lamb_update", "functional/ivy/gradients/lamb_update/lamb_update_container", "functional/ivy/gradients/lamb_update/lamb_update_functional", "functional/ivy/gradients/lamb_update/static_lamb_update_container", "functional/ivy/gradients/lars_update", "functional/ivy/gradients/lars_update/lars_update_container", "functional/ivy/gradients/lars_update/lars_update_functional", "functional/ivy/gradients/lars_update/static_lars_update_container", "functional/ivy/gradients/optimizer_update", "functional/ivy/gradients/optimizer_update/optimizer_update_container", "functional/ivy/gradients/optimizer_update/optimizer_update_functional", "functional/ivy/gradients/optimizer_update/static_optimizer_update_container", "functional/ivy/gradients/set_with_grads", "functional/ivy/gradients/stop_gradient", "functional/ivy/gradients/unset_with_grads", "functional/ivy/gradients/variable", "functional/ivy/gradients/variable_data", "functional/ivy/gradients/with_grads", "functional/ivy/layers", "functional/ivy/layers/conv1d", "functional/ivy/layers/conv1d_transpose", "functional/ivy/layers/conv2d", "functional/ivy/layers/conv2d_transpose", "functional/ivy/layers/conv3d", "functional/ivy/layers/conv3d_transpose", "functional/ivy/layers/depthwise_conv2d", "functional/ivy/layers/dropout", "functional/ivy/layers/linear", "functional/ivy/layers/lstm_update", "functional/ivy/layers/multi_head_attention", "functional/ivy/layers/scaled_dot_product_attention", "functional/ivy/linear_algebra", "functional/ivy/linear_algebra/cholesky", "functional/ivy/linear_algebra/cholesky/cholesky_array", "functional/ivy/linear_algebra/cholesky/cholesky_functional", "functional/ivy/linear_algebra/cross", "functional/ivy/linear_algebra/cross/cross_array", "functional/ivy/linear_algebra/cross/cross_functional", "functional/ivy/linear_algebra/det", "functional/ivy/linear_algebra/det/det_array", "functional/ivy/linear_algebra/det/det_functional", "functional/ivy/linear_algebra/diagonal", "functional/ivy/linear_algebra/diagonal/diagonal_array", "functional/ivy/linear_algebra/diagonal/diagonal_functional", "functional/ivy/linear_algebra/eigh", "functional/ivy/linear_algebra/eigh/eigh_array", "functional/ivy/linear_algebra/eigh/eigh_functional", "functional/ivy/linear_algebra/eigvalsh", "functional/ivy/linear_algebra/eigvalsh/eigvalsh_array", "functional/ivy/linear_algebra/eigvalsh/eigvalsh_functional", "functional/ivy/linear_algebra/inv", "functional/ivy/linear_algebra/inv/inv_array", "functional/ivy/linear_algebra/inv/inv_functional", "functional/ivy/linear_algebra/matmul", "functional/ivy/linear_algebra/matmul/matmul_array", "functional/ivy/linear_algebra/matmul/matmul_container", "functional/ivy/linear_algebra/matmul/matmul_functional", "functional/ivy/linear_algebra/matrix_norm", "functional/ivy/linear_algebra/matrix_norm/matrix_norm_array", "functional/ivy/linear_algebra/matrix_norm/matrix_norm_functional", "functional/ivy/linear_algebra/matrix_power", "functional/ivy/linear_algebra/matrix_rank", "functional/ivy/linear_algebra/matrix_rank/matrix_rank_array", "functional/ivy/linear_algebra/matrix_rank/matrix_rank_functional", "functional/ivy/linear_algebra/matrix_transpose", "functional/ivy/linear_algebra/matrix_transpose/matrix_transpose_array", "functional/ivy/linear_algebra/matrix_transpose/matrix_transpose_functional", "functional/ivy/linear_algebra/outer", "functional/ivy/linear_algebra/outer/outer_array", "functional/ivy/linear_algebra/outer/outer_functional", "functional/ivy/linear_algebra/pinv", "functional/ivy/linear_algebra/pinv/pinv_array", "functional/ivy/linear_algebra/pinv/pinv_functional", "functional/ivy/linear_algebra/qr", "functional/ivy/linear_algebra/qr/qr_array", "functional/ivy/linear_algebra/qr/qr_functional", "functional/ivy/linear_algebra/slogdet", "functional/ivy/linear_algebra/solve", "functional/ivy/linear_algebra/solve/solve_array", "functional/ivy/linear_algebra/solve/solve_functional", "functional/ivy/linear_algebra/svd", "functional/ivy/linear_algebra/svd/svd_array", "functional/ivy/linear_algebra/svd/svd_functional", "functional/ivy/linear_algebra/svdvals", "functional/ivy/linear_algebra/svdvals/svdvals_array", "functional/ivy/linear_algebra/svdvals/svdvals_functional", "functional/ivy/linear_algebra/tensordot", "functional/ivy/linear_algebra/tensordot/tensordot_array", "functional/ivy/linear_algebra/tensordot/tensordot_functional", "functional/ivy/linear_algebra/trace", "functional/ivy/linear_algebra/trace/trace_array", "functional/ivy/linear_algebra/trace/trace_functional", "functional/ivy/linear_algebra/vecdot", "functional/ivy/linear_algebra/vecdot/vecdot_array", "functional/ivy/linear_algebra/vecdot/vecdot_functional", "functional/ivy/linear_algebra/vector_norm", "functional/ivy/linear_algebra/vector_norm/vector_norm_array", "functional/ivy/linear_algebra/vector_norm/vector_norm_functional", "functional/ivy/linear_algebra/vector_to_skew_symmetric_matrix", "functional/ivy/linear_algebra/vector_to_skew_symmetric_matrix/vector_to_skew_symmetric_matrix_array", "functional/ivy/linear_algebra/vector_to_skew_symmetric_matrix/vector_to_skew_symmetric_matrix_functional", "functional/ivy/losses", "functional/ivy/losses/binary_cross_entropy", "functional/ivy/losses/binary_cross_entropy/binary_cross_entropy_array", "functional/ivy/losses/binary_cross_entropy/binary_cross_entropy_container", "functional/ivy/losses/binary_cross_entropy/binary_cross_entropy_functional", "functional/ivy/losses/binary_cross_entropy/static_binary_cross_entropy_container", "functional/ivy/losses/cross_entropy", "functional/ivy/losses/cross_entropy/cross_entropy_array", "functional/ivy/losses/cross_entropy/cross_entropy_container", "functional/ivy/losses/cross_entropy/cross_entropy_functional", "functional/ivy/losses/cross_entropy/static_cross_entropy_container", "functional/ivy/losses/sparse_cross_entropy", "functional/ivy/losses/sparse_cross_entropy/sparse_cross_entropy_array", "functional/ivy/losses/sparse_cross_entropy/sparse_cross_entropy_container", "functional/ivy/losses/sparse_cross_entropy/sparse_cross_entropy_functional", "functional/ivy/losses/sparse_cross_entropy/static_sparse_cross_entropy_container", "functional/ivy/manipulation", "functional/ivy/manipulation/clip", "functional/ivy/manipulation/clip/clip_array", "functional/ivy/manipulation/clip/clip_container", "functional/ivy/manipulation/clip/clip_functional", "functional/ivy/manipulation/clip/static_clip_container", "functional/ivy/manipulation/concat", "functional/ivy/manipulation/concat/concat_array", "functional/ivy/manipulation/concat/concat_container", "functional/ivy/manipulation/concat/concat_functional", "functional/ivy/manipulation/constant_pad", "functional/ivy/manipulation/constant_pad/constant_pad_array", "functional/ivy/manipulation/constant_pad/constant_pad_container", "functional/ivy/manipulation/constant_pad/constant_pad_functional", "functional/ivy/manipulation/expand_dims", "functional/ivy/manipulation/expand_dims/expand_dims_array", "functional/ivy/manipulation/expand_dims/expand_dims_container", "functional/ivy/manipulation/expand_dims/expand_dims_functional", "functional/ivy/manipulation/flip", "functional/ivy/manipulation/flip/flip_array", "functional/ivy/manipulation/flip/flip_container", "functional/ivy/manipulation/flip/flip_functional", "functional/ivy/manipulation/permute_dims", "functional/ivy/manipulation/permute_dims/permute_dims_array", "functional/ivy/manipulation/permute_dims/permute_dims_container", "functional/ivy/manipulation/permute_dims/permute_dims_functional", "functional/ivy/manipulation/repeat", "functional/ivy/manipulation/repeat/repeat_array", "functional/ivy/manipulation/repeat/repeat_container", "functional/ivy/manipulation/repeat/repeat_functional", "functional/ivy/manipulation/reshape", "functional/ivy/manipulation/reshape/reshape_array", "functional/ivy/manipulation/reshape/reshape_container", "functional/ivy/manipulation/reshape/reshape_functional", "functional/ivy/manipulation/roll", "functional/ivy/manipulation/roll/roll_array", "functional/ivy/manipulation/roll/roll_container", "functional/ivy/manipulation/roll/roll_functional", "functional/ivy/manipulation/roll/static_roll_container", "functional/ivy/manipulation/split", "functional/ivy/manipulation/squeeze", "functional/ivy/manipulation/squeeze/squeeze_array", "functional/ivy/manipulation/squeeze/squeeze_container", "functional/ivy/manipulation/squeeze/squeeze_functional", "functional/ivy/manipulation/stack", "functional/ivy/manipulation/stack/stack_array", "functional/ivy/manipulation/stack/stack_container", "functional/ivy/manipulation/stack/stack_functional", "functional/ivy/manipulation/swapaxes", "functional/ivy/manipulation/swapaxes/swapaxes_array", "functional/ivy/manipulation/swapaxes/swapaxes_container", "functional/ivy/manipulation/swapaxes/swapaxes_functional", "functional/ivy/manipulation/tile", "functional/ivy/manipulation/tile/tile_array", "functional/ivy/manipulation/tile/tile_container", "functional/ivy/manipulation/tile/tile_functional", "functional/ivy/manipulation/zero_pad", "functional/ivy/manipulation/zero_pad/zero_pad_array", "functional/ivy/manipulation/zero_pad/zero_pad_container", "functional/ivy/manipulation/zero_pad/zero_pad_functional", "functional/ivy/meta", "functional/ivy/meta/fomaml_step", "functional/ivy/meta/maml_step", "functional/ivy/meta/reptile_step", "functional/ivy/nest", "functional/ivy/nest/all_nested_indices", "functional/ivy/nest/copy_nest", "functional/ivy/nest/index_nest", "functional/ivy/nest/insert_into_nest_at_index", "functional/ivy/nest/insert_into_nest_at_indices", "functional/ivy/nest/map", "functional/ivy/nest/map_nest_at_index", "functional/ivy/nest/map_nest_at_indices", "functional/ivy/nest/multi_index_nest", "functional/ivy/nest/nested_any", "functional/ivy/nest/nested_indices_where", "functional/ivy/nest/nested_map", "functional/ivy/nest/nested_multi_map", "functional/ivy/nest/prune_nest_at_index", "functional/ivy/nest/prune_nest_at_indices", "functional/ivy/nest/set_nest_at_index", "functional/ivy/nest/set_nest_at_indices", "functional/ivy/norms", "functional/ivy/norms/layer_norm", "functional/ivy/norms/layer_norm/layer_norm_array", "functional/ivy/norms/layer_norm/layer_norm_container", "functional/ivy/norms/layer_norm/layer_norm_functional", "functional/ivy/random", "functional/ivy/random/multinomial", "functional/ivy/random/randint", "functional/ivy/random/randint/randint_functional", "functional/ivy/random/randint/static_randint_container", "functional/ivy/random/random_normal", "functional/ivy/random/random_uniform", "functional/ivy/random/random_uniform/random_uniform_container", "functional/ivy/random/random_uniform/random_uniform_functional", "functional/ivy/random/random_uniform/static_random_uniform_container", "functional/ivy/random/seed", "functional/ivy/random/shuffle", "functional/ivy/searching", "functional/ivy/searching/argmax", "functional/ivy/searching/argmin", "functional/ivy/searching/nonzero", "functional/ivy/searching/where", "functional/ivy/set", "functional/ivy/set/unique_all", "functional/ivy/set/unique_counts", "functional/ivy/set/unique_inverse", "functional/ivy/set/unique_values", "functional/ivy/sorting", "functional/ivy/sorting/argsort", "functional/ivy/sorting/argsort/argsort_array", "functional/ivy/sorting/argsort/argsort_container", "functional/ivy/sorting/argsort/argsort_functional", "functional/ivy/sorting/argsort/static_argsort_container", "functional/ivy/sorting/sort", "functional/ivy/sorting/sort/sort_array", "functional/ivy/sorting/sort/sort_container", "functional/ivy/sorting/sort/sort_functional", "functional/ivy/sorting/sort/static_sort_container", "functional/ivy/statistical", "functional/ivy/statistical/einsum", "functional/ivy/statistical/einsum/einsum_array", "functional/ivy/statistical/einsum/einsum_container", "functional/ivy/statistical/einsum/einsum_functional", "functional/ivy/statistical/max", "functional/ivy/statistical/max/max_array", "functional/ivy/statistical/max/max_container", "functional/ivy/statistical/max/max_functional", "functional/ivy/statistical/mean", "functional/ivy/statistical/mean/mean_array", "functional/ivy/statistical/mean/mean_container", "functional/ivy/statistical/mean/mean_functional", "functional/ivy/statistical/min", "functional/ivy/statistical/min/min_array", "functional/ivy/statistical/min/min_container", "functional/ivy/statistical/min/min_functional", "functional/ivy/statistical/prod", "functional/ivy/statistical/prod/prod_array", "functional/ivy/statistical/prod/prod_container", "functional/ivy/statistical/prod/prod_functional", "functional/ivy/statistical/std", "functional/ivy/statistical/std/std_array", "functional/ivy/statistical/std/std_container", "functional/ivy/statistical/std/std_functional", "functional/ivy/statistical/sum", "functional/ivy/statistical/sum/sum_array", "functional/ivy/statistical/sum/sum_container", "functional/ivy/statistical/sum/sum_functional", "functional/ivy/statistical/var", "functional/ivy/statistical/var/var_array", "functional/ivy/statistical/var/var_container", "functional/ivy/statistical/var/var_functional", "functional/ivy/utility", "functional/ivy/utility/all", "functional/ivy/utility/all/all_array", "functional/ivy/utility/all/all_container", "functional/ivy/utility/all/all_functional", "functional/ivy/utility/any", "functional/ivy/utility/any/any_array", "functional/ivy/utility/any/any_container", "functional/ivy/utility/any/any_functional", "index", "index_append", "index_prepend", "inspection", "inspection/add_array_specs", "inspection/fn_array_spec", "roadmap", "supported_frameworks", "verbosity", "verbosity/cprint"], "filenames": ["backend_handler.rst", "backend_handler/ContextManager:\n    def __init__.rst", "backend_handler/choose_random_backend.rst", "backend_handler/clear_backend_stack.rst", "backend_handler/current_backend.rst", "backend_handler/get_backend.rst", "backend_handler/set_backend.rst", "backend_handler/try_import_ivy_jax.rst", "backend_handler/try_import_ivy_mxnet.rst", "backend_handler/try_import_ivy_numpy.rst", "backend_handler/try_import_ivy_tf.rst", "backend_handler/try_import_ivy_torch.rst", "backend_handler/unset_backend.rst", "background.rst", "background/ml_explosion.rst", "background/standardization.rst", "background/why_unify.rst", "classes/data_classes.rst", "classes/data_classes/array.rst", "classes/data_classes/array/activations.rst", "classes/data_classes/array/activations/ArrayWithActivations.rst", "classes/data_classes/array/conversions.rst", "classes/data_classes/array/conversions/args_to_ivy.rst", "classes/data_classes/array/conversions/args_to_native.rst", "classes/data_classes/array/conversions/to_ivy.rst", "classes/data_classes/array/conversions/to_native.rst", "classes/data_classes/array/creation.rst", "classes/data_classes/array/creation/ArrayWithCreation.rst", "classes/data_classes/array/data_type.rst", "classes/data_classes/array/data_type/ArrayWithDataTypes.rst", "classes/data_classes/array/device.rst", "classes/data_classes/array/device/ArrayWithDevice.rst", "classes/data_classes/array/elementwise.rst", "classes/data_classes/array/elementwise/ArrayWithElementwise.rst", "classes/data_classes/array/general.rst", "classes/data_classes/array/general/ArrayWithGeneral.rst", "classes/data_classes/array/gradients.rst", "classes/data_classes/array/gradients/ArrayWithGradients.rst", "classes/data_classes/array/image.rst", "classes/data_classes/array/image/ArrayWithImage.rst", "classes/data_classes/array/layers.rst", "classes/data_classes/array/layers/ArrayWithLayers.rst", "classes/data_classes/array/linear_algebra.rst", "classes/data_classes/array/linear_algebra/ArrayWithLinearAlgebra.rst", "classes/data_classes/array/losses.rst", "classes/data_classes/array/losses/ArrayWithLosses.rst", "classes/data_classes/array/manipulation.rst", "classes/data_classes/array/manipulation/ArrayWithManipulation.rst", "classes/data_classes/array/norms.rst", "classes/data_classes/array/norms/ArrayWithNorms.rst", "classes/data_classes/array/random.rst", "classes/data_classes/array/random/ArrayWithRandom.rst", "classes/data_classes/array/searching.rst", "classes/data_classes/array/searching/ArrayWithSearching.rst", "classes/data_classes/array/set.rst", "classes/data_classes/array/set/ArrayWithSet.rst", "classes/data_classes/array/sorting.rst", "classes/data_classes/array/sorting/ArrayWithSorting.rst", "classes/data_classes/array/statistical.rst", "classes/data_classes/array/statistical/ArrayWithStatistical.rst", "classes/data_classes/array/utility.rst", "classes/data_classes/array/utility/ArrayWithUtility.rst", "classes/data_classes/array/wrapping.rst", "classes/data_classes/array/wrapping/add_ivy_array_instance_methods.rst", "classes/data_classes/container.rst", "classes/data_classes/container/activations.rst", "classes/data_classes/container/activations/ContainerWithActivations.rst", "classes/data_classes/container/base.rst", "classes/data_classes/container/base/ContainerBase.rst", "classes/data_classes/container/container.rst", "classes/data_classes/container/container/Container.rst", "classes/data_classes/container/container/MultiDevContainer.rst", "classes/data_classes/container/creation.rst", "classes/data_classes/container/creation/ContainerWithCreation.rst", "classes/data_classes/container/data_type.rst", "classes/data_classes/container/data_type/ContainerWithDataTypes.rst", "classes/data_classes/container/device.rst", "classes/data_classes/container/device/ContainerWithDevice.rst", "classes/data_classes/container/elementwise.rst", "classes/data_classes/container/elementwise/ContainerWithElementwise.rst", "classes/data_classes/container/general.rst", "classes/data_classes/container/general/ContainerWithGeneral.rst", "classes/data_classes/container/gradients.rst", "classes/data_classes/container/gradients/ContainerWithGradients.rst", "classes/data_classes/container/image.rst", "classes/data_classes/container/image/ContainerWithImage.rst", "classes/data_classes/container/layers.rst", "classes/data_classes/container/layers/ContainerWithLayers.rst", "classes/data_classes/container/linear_algebra.rst", "classes/data_classes/container/linear_algebra/ContainerWithLinearAlgebra.rst", "classes/data_classes/container/losses.rst", "classes/data_classes/container/losses/ContainerWithLosses.rst", "classes/data_classes/container/manipulation.rst", "classes/data_classes/container/manipulation/ContainerWithManipulation.rst", "classes/data_classes/container/norms.rst", "classes/data_classes/container/norms/ContainerWithNorms.rst", "classes/data_classes/container/random.rst", "classes/data_classes/container/random/ContainerWithRandom.rst", "classes/data_classes/container/searching.rst", "classes/data_classes/container/searching/ContainerWithSearching.rst", "classes/data_classes/container/set.rst", "classes/data_classes/container/set/ContainerWithSet.rst", "classes/data_classes/container/sorting.rst", "classes/data_classes/container/sorting/ContainerWithSorting.rst", "classes/data_classes/container/statistical.rst", "classes/data_classes/container/statistical/ContainerWithStatistical.rst", "classes/data_classes/container/utility.rst", "classes/data_classes/container/utility/ContainerWithUtility.rst", "classes/data_classes/container/wrapping.rst", "classes/data_classes/container/wrapping/add_ivy_container_instance_methods.rst", "classes/stateful.rst", "classes/stateful/activations.rst", "classes/stateful/activations/GEGLU.rst", "classes/stateful/activations/GELU.rst", "classes/stateful/converters.rst", "classes/stateful/converters/to_ivy_module.rst", "classes/stateful/initializers.rst", "classes/stateful/initializers/Constant:\n    def __init__.rst", "classes/stateful/initializers/FirstLayerSiren.rst", "classes/stateful/initializers/GlorotUniform.rst", "classes/stateful/initializers/KaimingNormal:\n    def __init__.rst", "classes/stateful/initializers/Ones.rst", "classes/stateful/initializers/Siren.rst", "classes/stateful/initializers/Uniform:\n    def __init__.rst", "classes/stateful/initializers/Zeros.rst", "classes/stateful/layers.rst", "classes/stateful/layers/Conv1D.rst", "classes/stateful/layers/Conv1DTranspose.rst", "classes/stateful/layers/Conv2D.rst", "classes/stateful/layers/Conv2DTranspose.rst", "classes/stateful/layers/Conv3D.rst", "classes/stateful/layers/Conv3DTranspose.rst", "classes/stateful/layers/DepthwiseConv2D.rst", "classes/stateful/layers/Dropout.rst", "classes/stateful/layers/LSTM.rst", "classes/stateful/layers/Linear.rst", "classes/stateful/layers/MultiHeadAttention.rst", "classes/stateful/module.rst", "classes/stateful/module/Module.rst", "classes/stateful/norms.rst", "classes/stateful/norms/LayerNorm.rst", "classes/stateful/optimizers.rst", "classes/stateful/optimizers/Adam.rst", "classes/stateful/optimizers/LAMB.rst", "classes/stateful/optimizers/LARS.rst", "classes/stateful/optimizers/Optimizer.rst", "classes/stateful/optimizers/SGD.rst", "classes/stateful/sequential.rst", "classes/stateful/sequential/Sequential.rst", "contributing.rst", "contributing/0_setting_up.rst", "contributing/1_the_basics.rst", "contributing/4_open_tasks.rst", "contributing/building_the_docs.rst", "deep_dive.rst", "deep_dive/0_navigating_the_code.rst", "deep_dive/10_docstrings.rst", "deep_dive/11_docstring_examples.rst", "deep_dive/12_array_api_tests.rst", "deep_dive/13_ivy_tests.rst", "deep_dive/1_function_types.rst", "deep_dive/2_backend_setting.rst", "deep_dive/3_function_wrapping.rst", "deep_dive/4_arrays.rst", "deep_dive/5_containers.rst", "deep_dive/6_data_types.rst", "deep_dive/7_devices.rst", "deep_dive/8_inplace_updates.rst", "deep_dive/9_function_arguments.rst", "design.rst", "design/building_blocks.rst", "design/ivy_as_a_framework.rst", "design/ivy_as_a_framework/ivy_array.rst", "design/ivy_as_a_framework/ivy_container.rst", "design/ivy_as_a_framework/ivy_stateful_api.rst", "design/ivy_as_a_transpiler.rst", "docs/ivy.rst", "docs/ivy_builder.rst", "docs/ivy_ecosystem.rst", "docs/ivy_gym.rst", "docs/ivy_mech.rst", "docs/ivy_memory.rst", "docs/ivy_models.rst", "docs/ivy_robot.rst", "docs/ivy_vision.rst", "extensions.rst", "extensions/applied_libraries.rst", "faq.rst", "func_wrapper.rst", "func_wrapper/handle_nestable.rst", "func_wrapper/handle_out_argument.rst", "func_wrapper/infer_device.rst", "func_wrapper/infer_dtype.rst", "func_wrapper/inputs_to_ivy_arrays.rst", "func_wrapper/inputs_to_native_arrays.rst", "func_wrapper/outputs_to_ivy_arrays.rst", "func_wrapper/to_native_arrays_and_back.rst", "functional/ivy.rst", "functional/ivy/activations.rst", "functional/ivy/activations/gelu.rst", "functional/ivy/activations/leaky_relu.rst", "functional/ivy/activations/relu.rst", "functional/ivy/activations/sigmoid.rst", "functional/ivy/activations/softmax.rst", "functional/ivy/activations/softplus.rst", "functional/ivy/activations/tanh.rst", "functional/ivy/compilation.rst", "functional/ivy/compilation/compile.rst", "functional/ivy/constants.rst", "functional/ivy/creation.rst", "functional/ivy/creation/arange.rst", "functional/ivy/creation/asarray.rst", "functional/ivy/creation/empty.rst", "functional/ivy/creation/empty_like.rst", "functional/ivy/creation/eye.rst", "functional/ivy/creation/from_dlpack.rst", "functional/ivy/creation/full.rst", "functional/ivy/creation/full_like.rst", "functional/ivy/creation/linspace.rst", "functional/ivy/creation/logspace.rst", "functional/ivy/creation/meshgrid.rst", "functional/ivy/creation/native_array.rst", "functional/ivy/creation/ones.rst", "functional/ivy/creation/ones_like.rst", "functional/ivy/creation/tril.rst", "functional/ivy/creation/triu.rst", "functional/ivy/creation/zeros.rst", "functional/ivy/creation/zeros_like.rst", "functional/ivy/data_type.rst", "functional/ivy/data_type/DefaultDtype:\n    \"\"\"\"\"\"\n\n    # noinspection PyShadowingNames\n    def __init__.rst", "functional/ivy/data_type/DefaultFloatDtype:\n    \"\"\"\"\"\"\n\n    # noinspection PyShadowingNames\n    def __init__.rst", "functional/ivy/data_type/DefaultIntDtype:\n    \"\"\"\"\"\"\n\n    # noinspection PyShadowingNames\n    def __init__.rst", "functional/ivy/data_type/as_ivy_dtype.rst", "functional/ivy/data_type/as_native_dtype.rst", "functional/ivy/data_type/astype.rst", "functional/ivy/data_type/broadcast_arrays.rst", "functional/ivy/data_type/broadcast_to.rst", "functional/ivy/data_type/can_cast.rst", "functional/ivy/data_type/can_cast/can_cast_array.rst", "functional/ivy/data_type/can_cast/can_cast_container.rst", "functional/ivy/data_type/can_cast/can_cast_functional.rst", "functional/ivy/data_type/can_cast/static_can_cast_container.rst", "functional/ivy/data_type/closest_valid_dtype.rst", "functional/ivy/data_type/default_dtype.rst", "functional/ivy/data_type/default_float_dtype.rst", "functional/ivy/data_type/default_int_dtype.rst", "functional/ivy/data_type/dtype.rst", "functional/ivy/data_type/dtype_bits.rst", "functional/ivy/data_type/finfo.rst", "functional/ivy/data_type/function_supported_dtypes.rst", "functional/ivy/data_type/function_unsupported_dtypes.rst", "functional/ivy/data_type/iinfo.rst", "functional/ivy/data_type/invalid_dtype.rst", "functional/ivy/data_type/is_float_dtype.rst", "functional/ivy/data_type/is_int_dtype.rst", "functional/ivy/data_type/promote_types.rst", "functional/ivy/data_type/result_type.rst", "functional/ivy/data_type/set_default_dtype.rst", "functional/ivy/data_type/set_default_float_dtype.rst", "functional/ivy/data_type/set_default_int_dtype.rst", "functional/ivy/data_type/type_promote_arrays.rst", "functional/ivy/data_type/unset_default_dtype.rst", "functional/ivy/data_type/unset_default_float_dtype.rst", "functional/ivy/data_type/unset_default_int_dtype.rst", "functional/ivy/data_type/valid_dtype.rst", "functional/ivy/device.rst", "functional/ivy/device/DefaultDevice:\n    \"\"\"\"\"\"\n\n    # noinspection PyShadowingNames\n    def __init__.rst", "functional/ivy/device/DevClonedItem.rst", "functional/ivy/device/DevClonedIter.rst", "functional/ivy/device/DevClonedNest.rst", "functional/ivy/device/DevDistItem.rst", "functional/ivy/device/DevDistIter.rst", "functional/ivy/device/DevDistNest.rst", "functional/ivy/device/DevManager:\n    \"\"\"\"\"\"\n\n    def __init__.rst", "functional/ivy/device/DevMapper.rst", "functional/ivy/device/DevMapperMultiProc.rst", "functional/ivy/device/MultiDev:\n    def __init__.rst", "functional/ivy/device/MultiDevItem.rst", "functional/ivy/device/MultiDevIter.rst", "functional/ivy/device/MultiDevNest.rst", "functional/ivy/device/Profiler.rst", "functional/ivy/device/as_ivy_dev.rst", "functional/ivy/device/as_native_dev.rst", "functional/ivy/device/clear_mem_on_dev.rst", "functional/ivy/device/default_device.rst", "functional/ivy/device/dev.rst", "functional/ivy/device/dev_clone.rst", "functional/ivy/device/dev_clone_array.rst", "functional/ivy/device/dev_clone_iter.rst", "functional/ivy/device/dev_clone_nest.rst", "functional/ivy/device/dev_dist.rst", "functional/ivy/device/dev_dist_array.rst", "functional/ivy/device/dev_dist_iter.rst", "functional/ivy/device/dev_dist_nest.rst", "functional/ivy/device/dev_unify.rst", "functional/ivy/device/dev_unify_array.rst", "functional/ivy/device/dev_unify_iter.rst", "functional/ivy/device/dev_unify_nest.rst", "functional/ivy/device/dev_util.rst", "functional/ivy/device/get_all_ivy_arrays_on_dev.rst", "functional/ivy/device/gpu_is_available.rst", "functional/ivy/device/num_cpu_cores.rst", "functional/ivy/device/num_gpus.rst", "functional/ivy/device/num_ivy_arrays_on_dev.rst", "functional/ivy/device/percent_used_mem_on_dev.rst", "functional/ivy/device/print_all_ivy_arrays_on_dev.rst", "functional/ivy/device/set_default_device.rst", "functional/ivy/device/set_split_factor.rst", "functional/ivy/device/split_factor.rst", "functional/ivy/device/split_func_call.rst", "functional/ivy/device/to_device.rst", "functional/ivy/device/total_mem_on_dev.rst", "functional/ivy/device/tpu_is_available.rst", "functional/ivy/device/unset_default_device.rst", "functional/ivy/device/used_mem_on_dev.rst", "functional/ivy/elementwise.rst", "functional/ivy/elementwise/abs.rst", "functional/ivy/elementwise/abs/abs_array.rst", "functional/ivy/elementwise/abs/abs_container.rst", "functional/ivy/elementwise/abs/abs_functional.rst", "functional/ivy/elementwise/acos.rst", "functional/ivy/elementwise/acos/acos_array.rst", "functional/ivy/elementwise/acos/acos_container.rst", "functional/ivy/elementwise/acos/acos_functional.rst", "functional/ivy/elementwise/acosh.rst", "functional/ivy/elementwise/acosh/acosh_array.rst", "functional/ivy/elementwise/acosh/acosh_container.rst", "functional/ivy/elementwise/acosh/acosh_functional.rst", "functional/ivy/elementwise/add.rst", "functional/ivy/elementwise/add/add_array.rst", "functional/ivy/elementwise/add/add_container.rst", "functional/ivy/elementwise/add/add_functional.rst", "functional/ivy/elementwise/add/static_add_container.rst", "functional/ivy/elementwise/asin.rst", "functional/ivy/elementwise/asin/asin_array.rst", "functional/ivy/elementwise/asin/asin_container.rst", "functional/ivy/elementwise/asin/asin_functional.rst", "functional/ivy/elementwise/asinh.rst", "functional/ivy/elementwise/asinh/asinh_array.rst", "functional/ivy/elementwise/asinh/asinh_container.rst", "functional/ivy/elementwise/asinh/asinh_functional.rst", "functional/ivy/elementwise/atan.rst", "functional/ivy/elementwise/atan/atan_array.rst", "functional/ivy/elementwise/atan/atan_container.rst", "functional/ivy/elementwise/atan/atan_functional.rst", "functional/ivy/elementwise/atan2.rst", "functional/ivy/elementwise/atan2/atan2_array.rst", "functional/ivy/elementwise/atan2/atan2_container.rst", "functional/ivy/elementwise/atan2/atan2_functional.rst", "functional/ivy/elementwise/atanh.rst", "functional/ivy/elementwise/atanh/atanh_array.rst", "functional/ivy/elementwise/atanh/atanh_container.rst", "functional/ivy/elementwise/atanh/atanh_functional.rst", "functional/ivy/elementwise/bitwise_and.rst", "functional/ivy/elementwise/bitwise_and/bitwise_and_array.rst", "functional/ivy/elementwise/bitwise_and/bitwise_and_container.rst", "functional/ivy/elementwise/bitwise_and/bitwise_and_functional.rst", "functional/ivy/elementwise/bitwise_invert.rst", "functional/ivy/elementwise/bitwise_invert/bitwise_invert_array.rst", "functional/ivy/elementwise/bitwise_invert/bitwise_invert_container.rst", "functional/ivy/elementwise/bitwise_invert/bitwise_invert_functional.rst", "functional/ivy/elementwise/bitwise_left_shift.rst", "functional/ivy/elementwise/bitwise_left_shift/bitwise_left_shift_array.rst", "functional/ivy/elementwise/bitwise_left_shift/bitwise_left_shift_container.rst", "functional/ivy/elementwise/bitwise_left_shift/bitwise_left_shift_functional.rst", "functional/ivy/elementwise/bitwise_or.rst", "functional/ivy/elementwise/bitwise_or/bitwise_or_array.rst", "functional/ivy/elementwise/bitwise_or/bitwise_or_container.rst", "functional/ivy/elementwise/bitwise_or/bitwise_or_functional.rst", "functional/ivy/elementwise/bitwise_right_shift.rst", "functional/ivy/elementwise/bitwise_right_shift/bitwise_right_shift_array.rst", "functional/ivy/elementwise/bitwise_right_shift/bitwise_right_shift_container.rst", "functional/ivy/elementwise/bitwise_right_shift/bitwise_right_shift_functional.rst", "functional/ivy/elementwise/bitwise_xor.rst", "functional/ivy/elementwise/bitwise_xor/bitwise_xor_array.rst", "functional/ivy/elementwise/bitwise_xor/bitwise_xor_container.rst", "functional/ivy/elementwise/bitwise_xor/bitwise_xor_functional.rst", "functional/ivy/elementwise/ceil.rst", "functional/ivy/elementwise/ceil/ceil_array.rst", "functional/ivy/elementwise/ceil/ceil_container.rst", "functional/ivy/elementwise/ceil/ceil_functional.rst", "functional/ivy/elementwise/cos.rst", "functional/ivy/elementwise/cos/cos_array.rst", "functional/ivy/elementwise/cos/cos_container.rst", "functional/ivy/elementwise/cos/cos_functional.rst", "functional/ivy/elementwise/cosh.rst", "functional/ivy/elementwise/cosh/cosh_array.rst", "functional/ivy/elementwise/cosh/cosh_container.rst", "functional/ivy/elementwise/cosh/cosh_functional.rst", "functional/ivy/elementwise/divide.rst", "functional/ivy/elementwise/divide/divide_array.rst", "functional/ivy/elementwise/divide/divide_container.rst", "functional/ivy/elementwise/divide/divide_functional.rst", "functional/ivy/elementwise/divide/static_divide_container.rst", "functional/ivy/elementwise/equal.rst", "functional/ivy/elementwise/equal/equal_array.rst", "functional/ivy/elementwise/equal/equal_container.rst", "functional/ivy/elementwise/equal/equal_functional.rst", "functional/ivy/elementwise/erf.rst", "functional/ivy/elementwise/erf/erf_array.rst", "functional/ivy/elementwise/erf/erf_container.rst", "functional/ivy/elementwise/erf/erf_functional.rst", "functional/ivy/elementwise/exp.rst", "functional/ivy/elementwise/exp/exp_array.rst", "functional/ivy/elementwise/exp/exp_container.rst", "functional/ivy/elementwise/exp/exp_functional.rst", "functional/ivy/elementwise/expm1.rst", "functional/ivy/elementwise/expm1/expm1_array.rst", "functional/ivy/elementwise/expm1/expm1_container.rst", "functional/ivy/elementwise/expm1/expm1_functional.rst", "functional/ivy/elementwise/floor.rst", "functional/ivy/elementwise/floor/floor_array.rst", "functional/ivy/elementwise/floor/floor_container.rst", "functional/ivy/elementwise/floor/floor_functional.rst", "functional/ivy/elementwise/floor_divide.rst", "functional/ivy/elementwise/floor_divide/floor_divide_array.rst", "functional/ivy/elementwise/floor_divide/floor_divide_container.rst", "functional/ivy/elementwise/floor_divide/floor_divide_functional.rst", "functional/ivy/elementwise/greater.rst", "functional/ivy/elementwise/greater/greater_array.rst", "functional/ivy/elementwise/greater/greater_container.rst", "functional/ivy/elementwise/greater/greater_functional.rst", "functional/ivy/elementwise/greater_equal.rst", "functional/ivy/elementwise/greater_equal/greater_equal_array.rst", "functional/ivy/elementwise/greater_equal/greater_equal_container.rst", "functional/ivy/elementwise/greater_equal/greater_equal_functional.rst", "functional/ivy/elementwise/isfinite.rst", "functional/ivy/elementwise/isfinite/isfinite_array.rst", "functional/ivy/elementwise/isfinite/isfinite_container.rst", "functional/ivy/elementwise/isfinite/isfinite_functional.rst", "functional/ivy/elementwise/isinf.rst", "functional/ivy/elementwise/isinf/isinf_array.rst", "functional/ivy/elementwise/isinf/isinf_container.rst", "functional/ivy/elementwise/isinf/isinf_functional.rst", "functional/ivy/elementwise/isnan.rst", "functional/ivy/elementwise/isnan/isnan_array.rst", "functional/ivy/elementwise/isnan/isnan_container.rst", "functional/ivy/elementwise/isnan/isnan_functional.rst", "functional/ivy/elementwise/less.rst", "functional/ivy/elementwise/less/less_array.rst", "functional/ivy/elementwise/less/less_container.rst", "functional/ivy/elementwise/less/less_functional.rst", "functional/ivy/elementwise/less_equal.rst", "functional/ivy/elementwise/less_equal/less_equal_array.rst", "functional/ivy/elementwise/less_equal/less_equal_container.rst", "functional/ivy/elementwise/less_equal/less_equal_functional.rst", "functional/ivy/elementwise/log.rst", "functional/ivy/elementwise/log/log_array.rst", "functional/ivy/elementwise/log/log_container.rst", "functional/ivy/elementwise/log/log_functional.rst", "functional/ivy/elementwise/log10.rst", "functional/ivy/elementwise/log10/log10_array.rst", "functional/ivy/elementwise/log10/log10_container.rst", "functional/ivy/elementwise/log10/log10_functional.rst", "functional/ivy/elementwise/log1p.rst", "functional/ivy/elementwise/log1p/log1p_array.rst", "functional/ivy/elementwise/log1p/log1p_container.rst", "functional/ivy/elementwise/log1p/log1p_functional.rst", "functional/ivy/elementwise/log2.rst", "functional/ivy/elementwise/log2/log2_array.rst", "functional/ivy/elementwise/log2/log2_container.rst", "functional/ivy/elementwise/log2/log2_functional.rst", "functional/ivy/elementwise/logaddexp.rst", "functional/ivy/elementwise/logaddexp/logaddexp_array.rst", "functional/ivy/elementwise/logaddexp/logaddexp_container.rst", "functional/ivy/elementwise/logaddexp/logaddexp_functional.rst", "functional/ivy/elementwise/logical_and.rst", "functional/ivy/elementwise/logical_and/logical_and_array.rst", "functional/ivy/elementwise/logical_and/logical_and_container.rst", "functional/ivy/elementwise/logical_and/logical_and_functional.rst", "functional/ivy/elementwise/logical_not.rst", "functional/ivy/elementwise/logical_not/logical_not_array.rst", "functional/ivy/elementwise/logical_not/logical_not_container.rst", "functional/ivy/elementwise/logical_not/logical_not_functional.rst", "functional/ivy/elementwise/logical_or.rst", "functional/ivy/elementwise/logical_or/logical_or_array.rst", "functional/ivy/elementwise/logical_or/logical_or_container.rst", "functional/ivy/elementwise/logical_or/logical_or_functional.rst", "functional/ivy/elementwise/logical_xor.rst", "functional/ivy/elementwise/logical_xor/logical_xor_array.rst", "functional/ivy/elementwise/logical_xor/logical_xor_container.rst", "functional/ivy/elementwise/logical_xor/logical_xor_functional.rst", "functional/ivy/elementwise/maximum.rst", "functional/ivy/elementwise/minimum.rst", "functional/ivy/elementwise/multiply.rst", "functional/ivy/elementwise/multiply/multiply_array.rst", "functional/ivy/elementwise/multiply/multiply_container.rst", "functional/ivy/elementwise/multiply/multiply_functional.rst", "functional/ivy/elementwise/multiply/static_multiply_container.rst", "functional/ivy/elementwise/negative.rst", "functional/ivy/elementwise/negative/negative_array.rst", "functional/ivy/elementwise/negative/negative_container.rst", "functional/ivy/elementwise/negative/negative_functional.rst", "functional/ivy/elementwise/not_equal.rst", "functional/ivy/elementwise/not_equal/not_equal_array.rst", "functional/ivy/elementwise/not_equal/not_equal_container.rst", "functional/ivy/elementwise/not_equal/not_equal_functional.rst", "functional/ivy/elementwise/positive.rst", "functional/ivy/elementwise/positive/positive_array.rst", "functional/ivy/elementwise/positive/positive_container.rst", "functional/ivy/elementwise/positive/positive_functional.rst", "functional/ivy/elementwise/pow.rst", "functional/ivy/elementwise/pow/pow_array.rst", "functional/ivy/elementwise/pow/pow_container.rst", "functional/ivy/elementwise/pow/pow_functional.rst", "functional/ivy/elementwise/remainder.rst", "functional/ivy/elementwise/remainder/remainder_array.rst", "functional/ivy/elementwise/remainder/remainder_container.rst", "functional/ivy/elementwise/remainder/remainder_functional.rst", "functional/ivy/elementwise/round.rst", "functional/ivy/elementwise/round/round_array.rst", "functional/ivy/elementwise/round/round_container.rst", "functional/ivy/elementwise/round/round_functional.rst", "functional/ivy/elementwise/sign.rst", "functional/ivy/elementwise/sign/sign_array.rst", "functional/ivy/elementwise/sign/sign_container.rst", "functional/ivy/elementwise/sign/sign_functional.rst", "functional/ivy/elementwise/sin.rst", "functional/ivy/elementwise/sin/sin_array.rst", "functional/ivy/elementwise/sin/sin_container.rst", "functional/ivy/elementwise/sin/sin_functional.rst", "functional/ivy/elementwise/sinh.rst", "functional/ivy/elementwise/sinh/sinh_array.rst", "functional/ivy/elementwise/sinh/sinh_container.rst", "functional/ivy/elementwise/sinh/sinh_functional.rst", "functional/ivy/elementwise/sqrt.rst", "functional/ivy/elementwise/sqrt/sqrt_array.rst", "functional/ivy/elementwise/sqrt/sqrt_container.rst", "functional/ivy/elementwise/sqrt/sqrt_functional.rst", "functional/ivy/elementwise/square.rst", "functional/ivy/elementwise/square/square_array.rst", "functional/ivy/elementwise/square/square_container.rst", "functional/ivy/elementwise/square/square_functional.rst", "functional/ivy/elementwise/subtract.rst", "functional/ivy/elementwise/subtract/static_subtract_container.rst", "functional/ivy/elementwise/subtract/subtract_array.rst", "functional/ivy/elementwise/subtract/subtract_container.rst", "functional/ivy/elementwise/subtract/subtract_functional.rst", "functional/ivy/elementwise/tan.rst", "functional/ivy/elementwise/tan/static_tan_container.rst", "functional/ivy/elementwise/tan/tan_array.rst", "functional/ivy/elementwise/tan/tan_container.rst", "functional/ivy/elementwise/tan/tan_functional.rst", "functional/ivy/elementwise/tanh.rst", "functional/ivy/elementwise/tanh/static_tanh_container.rst", "functional/ivy/elementwise/tanh/tanh_array.rst", "functional/ivy/elementwise/tanh/tanh_container.rst", "functional/ivy/elementwise/tanh/tanh_functional.rst", "functional/ivy/elementwise/trunc.rst", "functional/ivy/elementwise/trunc/trunc_array.rst", "functional/ivy/elementwise/trunc/trunc_container.rst", "functional/ivy/elementwise/trunc/trunc_functional.rst", "functional/ivy/general.rst", "functional/ivy/general/all_equal.rst", "functional/ivy/general/all_equal/all_equal_array.rst", "functional/ivy/general/all_equal/all_equal_container.rst", "functional/ivy/general/all_equal/all_equal_functional.rst", "functional/ivy/general/all_equal/static_all_equal_container.rst", "functional/ivy/general/arg_info.rst", "functional/ivy/general/arg_names.rst", "functional/ivy/general/array_equal.rst", "functional/ivy/general/arrays_equal.rst", "functional/ivy/general/assert_supports_inplace.rst", "functional/ivy/general/cache_fn.rst", "functional/ivy/general/clip_matrix_norm.rst", "functional/ivy/general/clip_vector_norm.rst", "functional/ivy/general/clip_vector_norm/clip_vector_norm_container.rst", "functional/ivy/general/clip_vector_norm/clip_vector_norm_functional.rst", "functional/ivy/general/container_types.rst", "functional/ivy/general/copy_array.rst", "functional/ivy/general/cumprod.rst", "functional/ivy/general/cumsum.rst", "functional/ivy/general/current_backend_str.rst", "functional/ivy/general/default.rst", "functional/ivy/general/einops_rearrange.rst", "functional/ivy/general/einops_reduce.rst", "functional/ivy/general/einops_repeat.rst", "functional/ivy/general/exists.rst", "functional/ivy/general/floormod.rst", "functional/ivy/general/fourier_encode.rst", "functional/ivy/general/gather.rst", "functional/ivy/general/gather_nd.rst", "functional/ivy/general/gather_nd/gather_nd_array.rst", "functional/ivy/general/gather_nd/gather_nd_container.rst", "functional/ivy/general/gather_nd/gather_nd_functional.rst", "functional/ivy/general/gather_nd/static_gather_nd_container.rst", "functional/ivy/general/get_all_arrays_in_memory.rst", "functional/ivy/general/get_min_base.rst", "functional/ivy/general/get_min_denominator.rst", "functional/ivy/general/get_num_dims.rst", "functional/ivy/general/get_referrers_recursive.rst", "functional/ivy/general/has_nans.rst", "functional/ivy/general/indices_where.rst", "functional/ivy/general/inplace_arrays_supported.rst", "functional/ivy/general/inplace_decrement.rst", "functional/ivy/general/inplace_increment.rst", "functional/ivy/general/inplace_update.rst", "functional/ivy/general/inplace_variables_supported.rst", "functional/ivy/general/is_array.rst", "functional/ivy/general/is_ivy_array.rst", "functional/ivy/general/is_ivy_container.rst", "functional/ivy/general/is_native_array.rst", "functional/ivy/general/match_kwargs.rst", "functional/ivy/general/multiprocessing.rst", "functional/ivy/general/num_arrays_in_memory.rst", "functional/ivy/general/one_hot.rst", "functional/ivy/general/print_all_arrays_in_memory.rst", "functional/ivy/general/queue_timeout.rst", "functional/ivy/general/scatter_flat.rst", "functional/ivy/general/scatter_nd.rst", "functional/ivy/general/set_min_base.rst", "functional/ivy/general/set_min_denominator.rst", "functional/ivy/general/set_queue_timeout.rst", "functional/ivy/general/set_tmp_dir.rst", "functional/ivy/general/shape.rst", "functional/ivy/general/shape_to_tuple.rst", "functional/ivy/general/stable_divide.rst", "functional/ivy/general/stable_pow.rst", "functional/ivy/general/supports_inplace.rst", "functional/ivy/general/tmp_dir.rst", "functional/ivy/general/to_list.rst", "functional/ivy/general/to_numpy.rst", "functional/ivy/general/to_scalar.rst", "functional/ivy/general/try_else_none.rst", "functional/ivy/general/unstack.rst", "functional/ivy/general/value_is_nan.rst", "functional/ivy/gradients.rst", "functional/ivy/gradients/GradientTracking:\n    \"\"\"\"\"\"\n\n    # noinspection PyShadowingNames\n    def __init__.rst", "functional/ivy/gradients/adam_step.rst", "functional/ivy/gradients/adam_update.rst", "functional/ivy/gradients/adam_update/adam_update_container.rst", "functional/ivy/gradients/adam_update/adam_update_functional.rst", "functional/ivy/gradients/adam_update/static_adam_update_container.rst", "functional/ivy/gradients/execute_with_gradients.rst", "functional/ivy/gradients/gradient_descent_update.rst", "functional/ivy/gradients/gradient_descent_update/gradient_descent_update_container.rst", "functional/ivy/gradients/gradient_descent_update/gradient_descent_update_functional.rst", "functional/ivy/gradients/gradient_descent_update/static_gradient_descent_update_container.rst", "functional/ivy/gradients/is_variable.rst", "functional/ivy/gradients/lamb_update.rst", "functional/ivy/gradients/lamb_update/lamb_update_container.rst", "functional/ivy/gradients/lamb_update/lamb_update_functional.rst", "functional/ivy/gradients/lamb_update/static_lamb_update_container.rst", "functional/ivy/gradients/lars_update.rst", "functional/ivy/gradients/lars_update/lars_update_container.rst", "functional/ivy/gradients/lars_update/lars_update_functional.rst", "functional/ivy/gradients/lars_update/static_lars_update_container.rst", "functional/ivy/gradients/optimizer_update.rst", "functional/ivy/gradients/optimizer_update/optimizer_update_container.rst", "functional/ivy/gradients/optimizer_update/optimizer_update_functional.rst", "functional/ivy/gradients/optimizer_update/static_optimizer_update_container.rst", "functional/ivy/gradients/set_with_grads.rst", "functional/ivy/gradients/stop_gradient.rst", "functional/ivy/gradients/unset_with_grads.rst", "functional/ivy/gradients/variable.rst", "functional/ivy/gradients/variable_data.rst", "functional/ivy/gradients/with_grads.rst", "functional/ivy/layers.rst", "functional/ivy/layers/conv1d.rst", "functional/ivy/layers/conv1d_transpose.rst", "functional/ivy/layers/conv2d.rst", "functional/ivy/layers/conv2d_transpose.rst", "functional/ivy/layers/conv3d.rst", "functional/ivy/layers/conv3d_transpose.rst", "functional/ivy/layers/depthwise_conv2d.rst", "functional/ivy/layers/dropout.rst", "functional/ivy/layers/linear.rst", "functional/ivy/layers/lstm_update.rst", "functional/ivy/layers/multi_head_attention.rst", "functional/ivy/layers/scaled_dot_product_attention.rst", "functional/ivy/linear_algebra.rst", "functional/ivy/linear_algebra/cholesky.rst", "functional/ivy/linear_algebra/cholesky/cholesky_array.rst", "functional/ivy/linear_algebra/cholesky/cholesky_functional.rst", "functional/ivy/linear_algebra/cross.rst", "functional/ivy/linear_algebra/cross/cross_array.rst", "functional/ivy/linear_algebra/cross/cross_functional.rst", "functional/ivy/linear_algebra/det.rst", "functional/ivy/linear_algebra/det/det_array.rst", "functional/ivy/linear_algebra/det/det_functional.rst", "functional/ivy/linear_algebra/diagonal.rst", "functional/ivy/linear_algebra/diagonal/diagonal_array.rst", "functional/ivy/linear_algebra/diagonal/diagonal_functional.rst", "functional/ivy/linear_algebra/eigh.rst", "functional/ivy/linear_algebra/eigh/eigh_array.rst", "functional/ivy/linear_algebra/eigh/eigh_functional.rst", "functional/ivy/linear_algebra/eigvalsh.rst", "functional/ivy/linear_algebra/eigvalsh/eigvalsh_array.rst", "functional/ivy/linear_algebra/eigvalsh/eigvalsh_functional.rst", "functional/ivy/linear_algebra/inv.rst", "functional/ivy/linear_algebra/inv/inv_array.rst", "functional/ivy/linear_algebra/inv/inv_functional.rst", "functional/ivy/linear_algebra/matmul.rst", "functional/ivy/linear_algebra/matmul/matmul_array.rst", "functional/ivy/linear_algebra/matmul/matmul_container.rst", "functional/ivy/linear_algebra/matmul/matmul_functional.rst", "functional/ivy/linear_algebra/matrix_norm.rst", "functional/ivy/linear_algebra/matrix_norm/matrix_norm_array.rst", "functional/ivy/linear_algebra/matrix_norm/matrix_norm_functional.rst", "functional/ivy/linear_algebra/matrix_power.rst", "functional/ivy/linear_algebra/matrix_rank.rst", "functional/ivy/linear_algebra/matrix_rank/matrix_rank_array.rst", "functional/ivy/linear_algebra/matrix_rank/matrix_rank_functional.rst", "functional/ivy/linear_algebra/matrix_transpose.rst", "functional/ivy/linear_algebra/matrix_transpose/matrix_transpose_array.rst", "functional/ivy/linear_algebra/matrix_transpose/matrix_transpose_functional.rst", "functional/ivy/linear_algebra/outer.rst", "functional/ivy/linear_algebra/outer/outer_array.rst", "functional/ivy/linear_algebra/outer/outer_functional.rst", "functional/ivy/linear_algebra/pinv.rst", "functional/ivy/linear_algebra/pinv/pinv_array.rst", "functional/ivy/linear_algebra/pinv/pinv_functional.rst", "functional/ivy/linear_algebra/qr.rst", "functional/ivy/linear_algebra/qr/qr_array.rst", "functional/ivy/linear_algebra/qr/qr_functional.rst", "functional/ivy/linear_algebra/slogdet.rst", "functional/ivy/linear_algebra/solve.rst", "functional/ivy/linear_algebra/solve/solve_array.rst", "functional/ivy/linear_algebra/solve/solve_functional.rst", "functional/ivy/linear_algebra/svd.rst", "functional/ivy/linear_algebra/svd/svd_array.rst", "functional/ivy/linear_algebra/svd/svd_functional.rst", "functional/ivy/linear_algebra/svdvals.rst", "functional/ivy/linear_algebra/svdvals/svdvals_array.rst", "functional/ivy/linear_algebra/svdvals/svdvals_functional.rst", "functional/ivy/linear_algebra/tensordot.rst", "functional/ivy/linear_algebra/tensordot/tensordot_array.rst", "functional/ivy/linear_algebra/tensordot/tensordot_functional.rst", "functional/ivy/linear_algebra/trace.rst", "functional/ivy/linear_algebra/trace/trace_array.rst", "functional/ivy/linear_algebra/trace/trace_functional.rst", "functional/ivy/linear_algebra/vecdot.rst", "functional/ivy/linear_algebra/vecdot/vecdot_array.rst", "functional/ivy/linear_algebra/vecdot/vecdot_functional.rst", "functional/ivy/linear_algebra/vector_norm.rst", "functional/ivy/linear_algebra/vector_norm/vector_norm_array.rst", "functional/ivy/linear_algebra/vector_norm/vector_norm_functional.rst", "functional/ivy/linear_algebra/vector_to_skew_symmetric_matrix.rst", "functional/ivy/linear_algebra/vector_to_skew_symmetric_matrix/vector_to_skew_symmetric_matrix_array.rst", "functional/ivy/linear_algebra/vector_to_skew_symmetric_matrix/vector_to_skew_symmetric_matrix_functional.rst", "functional/ivy/losses.rst", "functional/ivy/losses/binary_cross_entropy.rst", "functional/ivy/losses/binary_cross_entropy/binary_cross_entropy_array.rst", "functional/ivy/losses/binary_cross_entropy/binary_cross_entropy_container.rst", "functional/ivy/losses/binary_cross_entropy/binary_cross_entropy_functional.rst", "functional/ivy/losses/binary_cross_entropy/static_binary_cross_entropy_container.rst", "functional/ivy/losses/cross_entropy.rst", "functional/ivy/losses/cross_entropy/cross_entropy_array.rst", "functional/ivy/losses/cross_entropy/cross_entropy_container.rst", "functional/ivy/losses/cross_entropy/cross_entropy_functional.rst", "functional/ivy/losses/cross_entropy/static_cross_entropy_container.rst", "functional/ivy/losses/sparse_cross_entropy.rst", "functional/ivy/losses/sparse_cross_entropy/sparse_cross_entropy_array.rst", "functional/ivy/losses/sparse_cross_entropy/sparse_cross_entropy_container.rst", "functional/ivy/losses/sparse_cross_entropy/sparse_cross_entropy_functional.rst", "functional/ivy/losses/sparse_cross_entropy/static_sparse_cross_entropy_container.rst", "functional/ivy/manipulation.rst", "functional/ivy/manipulation/clip.rst", "functional/ivy/manipulation/clip/clip_array.rst", "functional/ivy/manipulation/clip/clip_container.rst", "functional/ivy/manipulation/clip/clip_functional.rst", "functional/ivy/manipulation/clip/static_clip_container.rst", "functional/ivy/manipulation/concat.rst", "functional/ivy/manipulation/concat/concat_array.rst", "functional/ivy/manipulation/concat/concat_container.rst", "functional/ivy/manipulation/concat/concat_functional.rst", "functional/ivy/manipulation/constant_pad.rst", "functional/ivy/manipulation/constant_pad/constant_pad_array.rst", "functional/ivy/manipulation/constant_pad/constant_pad_container.rst", "functional/ivy/manipulation/constant_pad/constant_pad_functional.rst", "functional/ivy/manipulation/expand_dims.rst", "functional/ivy/manipulation/expand_dims/expand_dims_array.rst", "functional/ivy/manipulation/expand_dims/expand_dims_container.rst", "functional/ivy/manipulation/expand_dims/expand_dims_functional.rst", "functional/ivy/manipulation/flip.rst", "functional/ivy/manipulation/flip/flip_array.rst", "functional/ivy/manipulation/flip/flip_container.rst", "functional/ivy/manipulation/flip/flip_functional.rst", "functional/ivy/manipulation/permute_dims.rst", "functional/ivy/manipulation/permute_dims/permute_dims_array.rst", "functional/ivy/manipulation/permute_dims/permute_dims_container.rst", "functional/ivy/manipulation/permute_dims/permute_dims_functional.rst", "functional/ivy/manipulation/repeat.rst", "functional/ivy/manipulation/repeat/repeat_array.rst", "functional/ivy/manipulation/repeat/repeat_container.rst", "functional/ivy/manipulation/repeat/repeat_functional.rst", "functional/ivy/manipulation/reshape.rst", "functional/ivy/manipulation/reshape/reshape_array.rst", "functional/ivy/manipulation/reshape/reshape_container.rst", "functional/ivy/manipulation/reshape/reshape_functional.rst", "functional/ivy/manipulation/roll.rst", "functional/ivy/manipulation/roll/roll_array.rst", "functional/ivy/manipulation/roll/roll_container.rst", "functional/ivy/manipulation/roll/roll_functional.rst", "functional/ivy/manipulation/roll/static_roll_container.rst", "functional/ivy/manipulation/split.rst", "functional/ivy/manipulation/squeeze.rst", "functional/ivy/manipulation/squeeze/squeeze_array.rst", "functional/ivy/manipulation/squeeze/squeeze_container.rst", "functional/ivy/manipulation/squeeze/squeeze_functional.rst", "functional/ivy/manipulation/stack.rst", "functional/ivy/manipulation/stack/stack_array.rst", "functional/ivy/manipulation/stack/stack_container.rst", "functional/ivy/manipulation/stack/stack_functional.rst", "functional/ivy/manipulation/swapaxes.rst", "functional/ivy/manipulation/swapaxes/swapaxes_array.rst", "functional/ivy/manipulation/swapaxes/swapaxes_container.rst", "functional/ivy/manipulation/swapaxes/swapaxes_functional.rst", "functional/ivy/manipulation/tile.rst", "functional/ivy/manipulation/tile/tile_array.rst", "functional/ivy/manipulation/tile/tile_container.rst", "functional/ivy/manipulation/tile/tile_functional.rst", "functional/ivy/manipulation/zero_pad.rst", "functional/ivy/manipulation/zero_pad/zero_pad_array.rst", "functional/ivy/manipulation/zero_pad/zero_pad_container.rst", "functional/ivy/manipulation/zero_pad/zero_pad_functional.rst", "functional/ivy/meta.rst", "functional/ivy/meta/fomaml_step.rst", "functional/ivy/meta/maml_step.rst", "functional/ivy/meta/reptile_step.rst", "functional/ivy/nest.rst", "functional/ivy/nest/all_nested_indices.rst", "functional/ivy/nest/copy_nest.rst", "functional/ivy/nest/index_nest.rst", "functional/ivy/nest/insert_into_nest_at_index.rst", "functional/ivy/nest/insert_into_nest_at_indices.rst", "functional/ivy/nest/map.rst", "functional/ivy/nest/map_nest_at_index.rst", "functional/ivy/nest/map_nest_at_indices.rst", "functional/ivy/nest/multi_index_nest.rst", "functional/ivy/nest/nested_any.rst", "functional/ivy/nest/nested_indices_where.rst", "functional/ivy/nest/nested_map.rst", "functional/ivy/nest/nested_multi_map.rst", "functional/ivy/nest/prune_nest_at_index.rst", "functional/ivy/nest/prune_nest_at_indices.rst", "functional/ivy/nest/set_nest_at_index.rst", "functional/ivy/nest/set_nest_at_indices.rst", "functional/ivy/norms.rst", "functional/ivy/norms/layer_norm.rst", "functional/ivy/norms/layer_norm/layer_norm_array.rst", "functional/ivy/norms/layer_norm/layer_norm_container.rst", "functional/ivy/norms/layer_norm/layer_norm_functional.rst", "functional/ivy/random.rst", "functional/ivy/random/multinomial.rst", "functional/ivy/random/randint.rst", "functional/ivy/random/randint/randint_functional.rst", "functional/ivy/random/randint/static_randint_container.rst", "functional/ivy/random/random_normal.rst", "functional/ivy/random/random_uniform.rst", "functional/ivy/random/random_uniform/random_uniform_container.rst", "functional/ivy/random/random_uniform/random_uniform_functional.rst", "functional/ivy/random/random_uniform/static_random_uniform_container.rst", "functional/ivy/random/seed.rst", "functional/ivy/random/shuffle.rst", "functional/ivy/searching.rst", "functional/ivy/searching/argmax.rst", "functional/ivy/searching/argmin.rst", "functional/ivy/searching/nonzero.rst", "functional/ivy/searching/where.rst", "functional/ivy/set.rst", "functional/ivy/set/unique_all.rst", "functional/ivy/set/unique_counts.rst", "functional/ivy/set/unique_inverse.rst", "functional/ivy/set/unique_values.rst", "functional/ivy/sorting.rst", "functional/ivy/sorting/argsort.rst", "functional/ivy/sorting/argsort/argsort_array.rst", "functional/ivy/sorting/argsort/argsort_container.rst", "functional/ivy/sorting/argsort/argsort_functional.rst", "functional/ivy/sorting/argsort/static_argsort_container.rst", "functional/ivy/sorting/sort.rst", "functional/ivy/sorting/sort/sort_array.rst", "functional/ivy/sorting/sort/sort_container.rst", "functional/ivy/sorting/sort/sort_functional.rst", "functional/ivy/sorting/sort/static_sort_container.rst", "functional/ivy/statistical.rst", "functional/ivy/statistical/einsum.rst", "functional/ivy/statistical/einsum/einsum_array.rst", "functional/ivy/statistical/einsum/einsum_container.rst", "functional/ivy/statistical/einsum/einsum_functional.rst", "functional/ivy/statistical/max.rst", "functional/ivy/statistical/max/max_array.rst", "functional/ivy/statistical/max/max_container.rst", "functional/ivy/statistical/max/max_functional.rst", "functional/ivy/statistical/mean.rst", "functional/ivy/statistical/mean/mean_array.rst", "functional/ivy/statistical/mean/mean_container.rst", "functional/ivy/statistical/mean/mean_functional.rst", "functional/ivy/statistical/min.rst", "functional/ivy/statistical/min/min_array.rst", "functional/ivy/statistical/min/min_container.rst", "functional/ivy/statistical/min/min_functional.rst", "functional/ivy/statistical/prod.rst", "functional/ivy/statistical/prod/prod_array.rst", "functional/ivy/statistical/prod/prod_container.rst", "functional/ivy/statistical/prod/prod_functional.rst", "functional/ivy/statistical/std.rst", "functional/ivy/statistical/std/std_array.rst", "functional/ivy/statistical/std/std_container.rst", "functional/ivy/statistical/std/std_functional.rst", "functional/ivy/statistical/sum.rst", "functional/ivy/statistical/sum/sum_array.rst", "functional/ivy/statistical/sum/sum_container.rst", "functional/ivy/statistical/sum/sum_functional.rst", "functional/ivy/statistical/var.rst", "functional/ivy/statistical/var/var_array.rst", "functional/ivy/statistical/var/var_container.rst", "functional/ivy/statistical/var/var_functional.rst", "functional/ivy/utility.rst", "functional/ivy/utility/all.rst", "functional/ivy/utility/all/all_array.rst", "functional/ivy/utility/all/all_container.rst", "functional/ivy/utility/all/all_functional.rst", "functional/ivy/utility/any.rst", "functional/ivy/utility/any/any_array.rst", "functional/ivy/utility/any/any_container.rst", "functional/ivy/utility/any/any_functional.rst", "index.rst", "index_append.rst", "index_prepend.rst", "inspection.rst", "inspection/add_array_specs.rst", "inspection/fn_array_spec.rst", "roadmap.rst", "supported_frameworks.rst", "verbosity.rst", "verbosity/cprint.rst"], "titles": ["Backend handler", "&lt;no title&gt;", "choose_random_backend", "clear_backend_stack", "current_backend", "get_backend", "set_backend", "try_import_ivy_jax", "try_import_ivy_mxnet", "try_import_ivy_numpy", "try_import_ivy_tf", "try_import_ivy_torch", "unset_backend", "Background", "ML Explosion", "Standardization", "Why Unify?", "Data classes", "Array", "Activations", "ArrayWithActivations", "Conversions", "args_to_ivy", "args_to_native", "to_ivy", "to_native", "Creation", "ArrayWithCreation", "Data type", "ArrayWithDataTypes", "Device", "ArrayWithDevice", "Elementwise", "ArrayWithElementwise", "General", "ArrayWithGeneral", "Gradients", "ArrayWithGradients", "Image", "ArrayWithImage", "Layers", "ArrayWithLayers", "Linear algebra", "ArrayWithLinearAlgebra", "Losses", "ArrayWithLosses", "Manipulation", "ArrayWithManipulation", "Norms", "ArrayWithNorms", "Random", "ArrayWithRandom", "Searching", "ArrayWithSearching", "Set", "ArrayWithSet", "Sorting", "ArrayWithSorting", "Statistical", "ArrayWithStatistical", "Utility", "ArrayWithUtility", "Wrapping", "add_ivy_array_instance_methods", "Container", "Activations", "ContainerWithActivations", "Base", "ContainerBase", "Container", "Container", "MultiDevContainer", "Creation", "ContainerWithCreation", "Data type", "ContainerWithDataTypes", "Device", "ContainerWithDevice", "Elementwise", "ContainerWithElementwise", "General", "ContainerWithGeneral", "Gradients", "ContainerWithGradients", "Image", "ContainerWithImage", "Layers", "ContainerWithLayers", "Linear algebra", "ContainerWithLinearAlgebra", "Losses", "ContainerWithLosses", "Manipulation", "ContainerWithManipulation", "Norms", "ContainerWithNorms", "Random", "ContainerWithRandom", "Searching", "ContainerWithSearching", "Set", "ContainerWithSet", "Sorting", "ContainerWithSorting", "Statistical", "ContainerWithStatistical", "Utility", "ContainerWithUtility", "Wrapping", "add_ivy_container_instance_methods", "Framework classes", "Activations", "GEGLU", "GELU", "Converters", "to_ivy_module", "Initializers", "&lt;no title&gt;", "FirstLayerSiren", "GlorotUniform", "&lt;no title&gt;", "Ones", "Siren", "&lt;no title&gt;", "Zeros", "Layers", "Conv1D", "Conv1DTranspose", "Conv2D", "Conv2DTranspose", "Conv3D", "Conv3DTranspose", "DepthwiseConv2D", "Dropout", "LSTM", "Linear", "MultiHeadAttention", "Module", "Module", "Norms", "LayerNorm", "Optimizers", "Adam", "LAMB", "LARS", "Optimizer", "SGD", "Sequential", "Sequential", "Contributing", "Setting Up", "The Basics", "Open Tasks", "Building the Docs", "Deep Dive", "Navigating the Code", "Docstrings", "Docstring Examples", "Array API Tests", "Ivy Tests", "Function Types", "Backend Setting", "Function Wrapping", "Arrays", "Containers", "Data Types", "Devices", "Inplace Updates", "Function Arguments", "Design", "Building Blocks", "Ivy as a Framework", "Ivy Array", "Ivy Container", "Ivy Stateful API", "Ivy as a Transpiler", "Ivy", "Ivy builder", "Ivy ecosystem", "Ivy gym", "Ivy mech", "Ivy memory", "Ivy models", "Ivy robot", "Ivy vision", "Extensions", "Applied Libraries", "FAQ", "Func wrapper", "handle_nestable", "handle_out_argument", "infer_device", "infer_dtype", "inputs_to_ivy_arrays", "inputs_to_native_arrays", "outputs_to_ivy_arrays", "to_native_arrays_and_back", "&lt;no title&gt;", "Activations", "gelu", "leaky_relu", "relu", "sigmoid", "softmax", "softplus", "tanh", "Compilation", "compile", "Constants", "Creation", "arange", "asarray", "empty", "empty_like", "eye", "from_dlpack", "full", "full_like", "linspace", "logspace", "meshgrid", "native_array", "ones", "ones_like", "tril", "triu", "zeros", "zeros_like", "Data type", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "as_ivy_dtype", "as_native_dtype", "astype", "broadcast_arrays", "broadcast_to", "can_cast", "ivy.Array.can_cast", "ivy.Container.can_cast", "ivy.can_cast", "ivy.Container.static_can_cast", "closest_valid_dtype", "default_dtype", "default_float_dtype", "default_int_dtype", "dtype", "dtype_bits", "finfo", "function_supported_dtypes", "function_unsupported_dtypes", "iinfo", "invalid_dtype", "is_float_dtype", "is_int_dtype", "promote_types", "result_type", "set_default_dtype", "set_default_float_dtype", "set_default_int_dtype", "type_promote_arrays", "unset_default_dtype", "unset_default_float_dtype", "unset_default_int_dtype", "valid_dtype", "Device", "&lt;no title&gt;", "DevClonedItem", "DevClonedIter", "DevClonedNest", "DevDistItem", "DevDistIter", "DevDistNest", "&lt;no title&gt;", "DevMapper", "DevMapperMultiProc", "&lt;no title&gt;", "MultiDevItem", "MultiDevIter", "MultiDevNest", "Profiler", "as_ivy_dev", "as_native_dev", "clear_mem_on_dev", "default_device", "dev", "dev_clone", "dev_clone_array", "dev_clone_iter", "dev_clone_nest", "dev_dist", "dev_dist_array", "dev_dist_iter", "dev_dist_nest", "dev_unify", "dev_unify_array", "dev_unify_iter", "dev_unify_nest", "dev_util", "get_all_ivy_arrays_on_dev", "gpu_is_available", "num_cpu_cores", "num_gpus", "num_ivy_arrays_on_dev", "percent_used_mem_on_dev", "print_all_ivy_arrays_on_dev", "set_default_device", "set_split_factor", "split_factor", "split_func_call", "to_device", "total_mem_on_dev", "tpu_is_available", "unset_default_device", "used_mem_on_dev", "Elementwise", "abs", "ivy.Array.abs", "ivy.Container.abs", "ivy.abs", "acos", "ivy.Array.acos", "ivy.Container.acos", "ivy.acos", "acosh", "ivy.Array.acosh", "ivy.Container.acosh", "ivy.acosh", "add", "ivy.Array.add", "ivy.Container.add", "ivy.add", "ivy.Container.static_add", "asin", "ivy.Array.asin", "ivy.Container.asin", "ivy.asin", "asinh", "ivy.Array.asinh", "ivy.Container.asinh", "ivy.asinh", "atan", "ivy.Array.atan", "ivy.Container.atan", "ivy.atan", "atan2", "ivy.Array.atan2", "ivy.Container.atan2", "ivy.atan2", "atanh", "ivy.Array.atanh", "ivy.Container.atanh", "ivy.atanh", "bitwise_and", "ivy.Array.bitwise_and", "ivy.Container.bitwise_and", "ivy.bitwise_and", "bitwise_invert", "ivy.Array.bitwise_invert", "ivy.Container.bitwise_invert", "ivy.bitwise_invert", "bitwise_left_shift", "ivy.Array.bitwise_left_shift", "ivy.Container.bitwise_left_shift", "ivy.bitwise_left_shift", "bitwise_or", "ivy.Array.bitwise_or", "ivy.Container.bitwise_or", "ivy.bitwise_or", "bitwise_right_shift", "ivy.Array.bitwise_right_shift", "ivy.Container.bitwise_right_shift", "ivy.bitwise_right_shift", "bitwise_xor", "ivy.Array.bitwise_xor", "ivy.Container.bitwise_xor", "ivy.bitwise_xor", "ceil", "ivy.Array.ceil", "ivy.Container.ceil", "ivy.ceil", "cos", "ivy.Array.cos", "ivy.Container.cos", "ivy.cos", "cosh", "ivy.Array.cosh", "ivy.Container.cosh", "ivy.cosh", "divide", "ivy.Array.divide", "ivy.Container.divide", "ivy.divide", "ivy.Container.static_divide", "equal", "ivy.Array.equal", "ivy.Container.equal", "ivy.equal", "erf", "ivy.Array.erf", "ivy.Container.erf", "ivy.erf", "exp", "ivy.Array.exp", "ivy.Container.exp", "ivy.exp", "expm1", "ivy.Array.expm1", "ivy.Container.expm1", "ivy.expm1", "floor", "ivy.Array.floor", "ivy.Container.floor", "ivy.floor", "floor_divide", "ivy.Array.floor_divide", "ivy.Container.floor_divide", "ivy.floor_divide", "greater", "ivy.Array.greater", "ivy.Container.greater", "ivy.greater", "greater_equal", "ivy.Array.greater_equal", "ivy.Container.greater_equal", "ivy.greater_equal", "isfinite", "ivy.Array.isfinite", "ivy.Container.isfinite", "ivy.isfinite", "isinf", "ivy.Array.isinf", "ivy.Container.isinf", "ivy.isinf", "isnan", "ivy.Array.isnan", "ivy.Container.isnan", "ivy.isnan", "less", "ivy.Array.less", "ivy.Container.less", "ivy.less", "less_equal", "ivy.Array.less_equal", "ivy.Container.less_equal", "ivy.less_equal", "log", "ivy.Array.log", "ivy.Container.log", "ivy.log", "log10", "ivy.Array.log10", "ivy.Container.log10", "ivy.log10", "log1p", "ivy.Array.log1p", "ivy.Container.log1p", "ivy.log1p", "log2", "ivy.Array.log2", "ivy.Container.log2", "ivy.log2", "logaddexp", "ivy.Array.logaddexp", "ivy.Container.logaddexp", "ivy.logaddexp", "logical_and", "ivy.Array.logical_and", "ivy.Container.logical_and", "ivy.logical_and", "logical_not", "ivy.Array.logical_not", "ivy.Container.logical_not", "ivy.logical_not", "logical_or", "ivy.Array.logical_or", "ivy.Container.logical_or", "ivy.logical_or", "logical_xor", "ivy.Array.logical_xor", "ivy.Container.logical_xor", "ivy.logical_xor", "maximum", "minimum", "multiply", "ivy.Array.multiply", "ivy.Container.multiply", "ivy.multiply", "ivy.Container.static_multiply", "negative", "ivy.Array.negative", "ivy.Container.negative", "ivy.negative", "not_equal", "ivy.Array.not_equal", "ivy.Container.not_equal", "ivy.not_equal", "positive", "ivy.Array.positive", "ivy.Container.positive", "ivy.positive", "pow", "ivy.Array.pow", "ivy.Container.pow", "ivy.pow", "remainder", "ivy.Array.remainder", "ivy.Container.remainder", "ivy.remainder", "round", "ivy.Array.round", "ivy.Container.round", "ivy.round", "sign", "ivy.Array.sign", "ivy.Container.sign", "ivy.sign", "sin", "ivy.Array.sin", "ivy.Container.sin", "ivy.sin", "sinh", "ivy.Array.sinh", "ivy.Container.sinh", "ivy.sinh", "sqrt", "ivy.Array.sqrt", "ivy.Container.sqrt", "ivy.sqrt", "square", "ivy.Array.square", "ivy.Container.square", "ivy.square", "subtract", "ivy.Container.static_subtract", "ivy.Array.subtract", "ivy.Container.subtract", "ivy.subtract", "tan", "ivy.Container.static_tan", "ivy.Array.tan", "ivy.Container.tan", "ivy.tan", "tanh", "ivy.Container.static_tanh", "ivy.Array.tanh", "ivy.Container.tanh", "ivy.tanh", "trunc", "ivy.Array.trunc", "ivy.Container.trunc", "ivy.trunc", "General", "all_equal", "ivy.Array.all_equal", "ivy.Container.all_equal", "ivy.all_equal", "ivy.Container.static_all_equal", "arg_info", "arg_names", "array_equal", "arrays_equal", "assert_supports_inplace", "cache_fn", "clip_matrix_norm", "clip_vector_norm", "ivy.Container.clip_vector_norm", "ivy.clip_vector_norm", "container_types", "copy_array", "cumprod", "cumsum", "current_backend_str", "default", "einops_rearrange", "einops_reduce", "einops_repeat", "exists", "floormod", "fourier_encode", "gather", "gather_nd", "ivy.Array.gather_nd", "ivy.Container.gather_nd", "ivy.gather_nd", "ivy.Container.static_gather_nd", "get_all_arrays_in_memory", "get_min_base", "get_min_denominator", "get_num_dims", "get_referrers_recursive", "has_nans", "indices_where", "inplace_arrays_supported", "inplace_decrement", "inplace_increment", "inplace_update", "inplace_variables_supported", "is_array", "is_ivy_array", "is_ivy_container", "is_native_array", "match_kwargs", "multiprocessing", "num_arrays_in_memory", "one_hot", "print_all_arrays_in_memory", "queue_timeout", "scatter_flat", "scatter_nd", "set_min_base", "set_min_denominator", "set_queue_timeout", "set_tmp_dir", "shape", "shape_to_tuple", "stable_divide", "stable_pow", "supports_inplace", "tmp_dir", "to_list", "to_numpy", "to_scalar", "try_else_none", "unstack", "value_is_nan", "Gradients", "&lt;no title&gt;", "adam_step", "adam_update", "ivy.Container.adam_update", "ivy.adam_update", "ivy.Container.static_adam_update", "execute_with_gradients", "gradient_descent_update", "ivy.Container.gradient_descent_update", "ivy.gradient_descent_update", "ivy.Container.static_gradient_descent_update", "is_variable", "lamb_update", "ivy.Container.lamb_update", "ivy.lamb_update", "ivy.Container.static_lamb_update", "lars_update", "ivy.Container.lars_update", "ivy.lars_update", "ivy.Container.static_lars_update", "optimizer_update", "ivy.Container.optimizer_update", "ivy.optimizer_update", "ivy.Container.static_optimizer_update", "set_with_grads", "stop_gradient", "unset_with_grads", "variable", "variable_data", "with_grads", "Layers", "conv1d", "conv1d_transpose", "conv2d", "conv2d_transpose", "conv3d", "conv3d_transpose", "depthwise_conv2d", "dropout", "linear", "lstm_update", "multi_head_attention", "scaled_dot_product_attention", "Linear algebra", "cholesky", "ivy.Array.cholesky", "ivy.cholesky", "cross", "ivy.Array.cross", "ivy.cross", "det", "ivy.Array.det", "ivy.det", "diagonal", "ivy.Array.diagonal", "ivy.diagonal", "eigh", "ivy.Array.eigh", "ivy.eigh", "eigvalsh", "ivy.Array.eigvalsh", "ivy.eigvalsh", "inv", "ivy.Array.inv", "ivy.inv", "matmul", "ivy.Array.matmul", "ivy.Container.matmul", "ivy.matmul", "matrix_norm", "ivy.Array.matrix_norm", "ivy.matrix_norm", "matrix_power", "matrix_rank", "ivy.Array.matrix_rank", "ivy.matrix_rank", "matrix_transpose", "ivy.Array.matrix_transpose", "ivy.matrix_transpose", "outer", "ivy.Array.outer", "ivy.outer", "pinv", "ivy.Array.pinv", "ivy.pinv", "qr", "ivy.Array.qr", "ivy.qr", "slogdet", "solve", "ivy.Array.solve", "ivy.solve", "svd", "ivy.Array.svd", "ivy.svd", "svdvals", "ivy.Array.svdvals", "ivy.svdvals", "tensordot", "ivy.Array.tensordot", "ivy.tensordot", "trace", "ivy.Array.trace", "ivy.trace", "vecdot", "ivy.Array.vecdot", "ivy.vecdot", "vector_norm", "ivy.Array.vector_norm", "ivy.vector_norm", "vector_to_skew_symmetric_matrix", "ivy.Array.vector_to_skew_symmetric_matrix", "ivy.vector_to_skew_symmetric_matrix", "Losses", "binary_cross_entropy", "ivy.Array.binary_cross_entropy", "ivy.Container.binary_cross_entropy", "ivy.binary_cross_entropy", "ivy.Container.static_binary_cross_entropy", "cross_entropy", "ivy.Array.cross_entropy", "ivy.Container.cross_entropy", "ivy.cross_entropy", "ivy.Container.static_cross_entropy", "sparse_cross_entropy", "ivy.Array.sparse_cross_entropy", "ivy.Container.sparse_cross_entropy", "ivy.sparse_cross_entropy", "ivy.Container.static_sparse_cross_entropy", "Manipulation", "clip", "ivy.Array.clip", "ivy.Container.clip", "ivy.clip", "ivy.Container.static_clip", "concat", "ivy.Array.concat", "ivy.Container.concat", "ivy.concat", "constant_pad", "ivy.Array.constant_pad", "ivy.Container.constant_pad", "ivy.constant_pad", "expand_dims", "ivy.Array.expand_dims", "ivy.Container.expand_dims", "ivy.expand_dims", "flip", "ivy.Array.flip", "ivy.Container.flip", "ivy.flip", "permute_dims", "ivy.Array.permute_dims", "ivy.Container.permute_dims", "ivy.permute_dims", "repeat", "ivy.Array.repeat", "ivy.Container.repeat", "ivy.repeat", "reshape", "ivy.Array.reshape", "ivy.Container.reshape", "ivy.reshape", "roll", "ivy.Array.roll", "ivy.Container.roll", "ivy.roll", "ivy.Container.static_roll", "split", "squeeze", "ivy.Array.squeeze", "ivy.Container.squeeze", "ivy.squeeze", "stack", "ivy.Array.stack", "ivy.Container.stack", "ivy.stack", "swapaxes", "ivy.Array.swapaxes", "ivy.Container.swapaxes", "ivy.swapaxes", "tile", "ivy.Array.tile", "ivy.Container.tile", "ivy.tile", "zero_pad", "ivy.Array.zero_pad", "ivy.Container.zero_pad", "ivy.zero_pad", "Meta", "fomaml_step", "maml_step", "reptile_step", "Nest", "all_nested_indices", "copy_nest", "index_nest", "insert_into_nest_at_index", "insert_into_nest_at_indices", "map", "map_nest_at_index", "map_nest_at_indices", "multi_index_nest", "nested_any", "nested_indices_where", "nested_map", "nested_multi_map", "prune_nest_at_index", "prune_nest_at_indices", "set_nest_at_index", "set_nest_at_indices", "Norms", "layer_norm", "ivy.Array.layer_norm", "ivy.Container.layer_norm", "ivy.layer_norm", "Random", "multinomial", "randint", "ivy.randint", "ivy.Container.static_randint", "random_normal", "random_uniform", "ivy.Container.random_uniform", "ivy.random_uniform", "ivy.Container.static_random_uniform", "seed", "shuffle", "Searching", "argmax", "argmin", "nonzero", "where", "Set", "unique_all", "unique_counts", "unique_inverse", "unique_values", "Sorting", "argsort", "ivy.Array.argsort", "ivy.Container.argsort", "ivy.argsort", "ivy.Container.static_argsort", "sort", "ivy.Array.sort", "ivy.Container.sort", "ivy.sort", "ivy.Container.static_sort", "Statistical", "einsum", "ivy.Array.einsum", "ivy.Container.einsum", "ivy.einsum", "max", "ivy.Array.max", "ivy.Container.max", "ivy.max", "mean", "ivy.Array.mean", "ivy.Container.mean", "ivy.mean", "min", "ivy.Array.min", "ivy.Container.min", "ivy.min", "prod", "ivy.Array.prod", "ivy.Container.prod", "ivy.prod", "std", "ivy.Array.std", "ivy.Container.std", "ivy.std", "sum", "ivy.Array.sum", "ivy.Container.sum", "ivy.sum", "var", "ivy.Array.var", "ivy.Container.var", "ivy.var", "Utility", "all", "ivy.Array.all", "ivy.Container.all", "ivy.all", "any", "ivy.Array.any", "ivy.Container.any", "ivy.any", "Contents", "&lt;no title&gt;", "&lt;no title&gt;", "Inspection", "add_array_specs", "fn_array_spec", "Roadmap", "&lt;no title&gt;", "Verbosity", "cprint"], "terms": {"class": [0, 6, 12, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, 116, 118, 119, 121, 122, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 152, 153, 156, 157, 159, 163, 164, 165, 166, 168, 170, 171, 173, 174, 175, 185, 186, 187, 228, 251, 265, 267, 268, 269, 270, 271, 272, 274, 275, 277, 278, 279, 280, 552, 559, 596, 602, 621, 626, 655, 820, 822, 832, 855, 858, 918], "ivi": [0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 15, 16, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, 116, 118, 119, 121, 122, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 151, 152, 153, 154, 156, 158, 160, 161, 162, 164, 165, 166, 167, 168, 169, 185, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 232, 233, 234, 235, 236, 237, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 267, 268, 269, 270, 271, 272, 274, 275, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 320, 324, 328, 333, 337, 341, 345, 349, 353, 357, 361, 365, 369, 373, 377, 381, 385, 389, 394, 398, 402, 406, 410, 414, 418, 422, 426, 430, 434, 438, 442, 446, 450, 454, 458, 462, 466, 470, 474, 478, 482, 483, 484, 489, 493, 497, 501, 505, 509, 513, 517, 521, 525, 529, 533, 538, 543, 548, 552, 553, 558, 559, 560, 561, 562, 563, 564, 565, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 628, 629, 633, 634, 638, 639, 643, 647, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 674, 677, 680, 683, 686, 689, 692, 696, 699, 700, 703, 706, 709, 712, 715, 716, 719, 722, 725, 728, 731, 734, 737, 740, 741, 746, 751, 756, 757, 762, 766, 770, 774, 778, 782, 786, 790, 795, 796, 800, 804, 808, 812, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 843, 844, 845, 848, 849, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 871, 876, 877, 881, 885, 889, 893, 897, 901, 905, 909, 910, 914, 918, 921, 922, 923, 924, 926, 927], "backend_handl": [0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 918], "contextmanag": [0, 1], "modul": [0, 4, 5, 16, 62, 63, 67, 68, 69, 70, 71, 108, 109, 111, 112, 113, 114, 115, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 139, 140, 147, 148, 150, 153, 159, 160, 161, 163, 167, 170, 171, 173, 175, 186, 187, 552, 603, 843, 844, 848, 849, 851, 918], "sourc": [0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 14, 15, 16, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, 116, 118, 119, 121, 122, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 153, 163, 164, 188, 189, 190, 191, 192, 193, 194, 195, 196, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 267, 268, 269, 270, 271, 272, 274, 275, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 921, 922, 923, 926, 927], "base": [0, 19, 20, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 65, 66, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 111, 112, 113, 116, 118, 119, 121, 122, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 151, 159, 162, 164, 170, 186, 209, 219, 228, 265, 267, 268, 269, 270, 271, 272, 274, 275, 277, 278, 279, 280, 315, 402, 405, 446, 449, 450, 453, 454, 457, 458, 461, 501, 504, 552, 587, 610, 617, 626, 860, 861, 862, 864, 876, 877, 880], "object": [0, 18, 64, 67, 68, 69, 70, 71, 116, 125, 126, 127, 128, 129, 130, 131, 132, 134, 135, 137, 138, 172, 175, 209, 215, 228, 248, 265, 310, 626, 820, 823, 825, 827, 828, 829, 834, 835, 836, 837, 843, 854], "__init__": [0, 1, 4, 5, 67, 68, 69, 70, 71, 111, 112, 113, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 155, 161, 165, 170, 172, 173, 174, 175, 228, 229, 230, 231, 265, 266, 273, 274, 275, 276, 277, 278, 279, 280, 626, 627, 843, 844, 848, 849, 851, 918], "choose_random_backend": 0, "exclud": [0, 2, 157, 170, 209, 210, 843, 849, 851], "none": [0, 2, 5, 12, 21, 22, 23, 24, 25, 32, 33, 34, 35, 42, 43, 44, 45, 46, 47, 48, 49, 56, 57, 58, 59, 60, 61, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 114, 115, 116, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 155, 157, 160, 164, 165, 166, 167, 168, 170, 172, 174, 175, 198, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 228, 234, 236, 237, 239, 241, 243, 244, 245, 248, 251, 265, 274, 275, 283, 284, 307, 308, 309, 310, 313, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 555, 557, 558, 564, 565, 566, 567, 569, 570, 571, 573, 574, 575, 576, 577, 578, 580, 581, 582, 583, 584, 585, 590, 592, 593, 597, 603, 605, 608, 609, 610, 611, 616, 617, 623, 626, 629, 630, 631, 632, 634, 635, 636, 637, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 826, 831, 832, 833, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 859, 860, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917], "clear_backend_stack": 0, "current_backend": [0, 69, 70, 155, 160], "arg": [0, 4, 18, 21, 22, 23, 64, 67, 68, 114, 115, 137, 138, 153, 170, 172, 174, 265, 274, 289, 293, 297, 309, 552, 609], "kwarg": [0, 4, 18, 21, 22, 23, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 114, 115, 137, 138, 170, 172, 174, 265, 274, 289, 293, 297, 552, 602], "return": [0, 4, 5, 12, 18, 21, 22, 23, 24, 25, 28, 29, 32, 33, 34, 35, 42, 43, 44, 45, 46, 47, 48, 49, 56, 57, 58, 59, 60, 61, 64, 67, 68, 69, 70, 71, 74, 75, 78, 79, 80, 81, 82, 83, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 102, 103, 104, 105, 106, 107, 114, 115, 125, 134, 135, 141, 145, 155, 156, 157, 159, 160, 162, 163, 164, 165, 166, 167, 168, 170, 172, 173, 174, 175, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 260, 264, 265, 274, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 555, 556, 557, 558, 560, 561, 562, 563, 564, 565, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 587, 588, 589, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 608, 609, 610, 611, 614, 615, 616, 617, 618, 620, 621, 622, 623, 624, 625, 626, 628, 629, 631, 632, 633, 634, 636, 637, 638, 639, 641, 642, 643, 645, 646, 647, 648, 649, 650, 652, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 826, 830, 831, 832, 833, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 921, 923], "current": [0, 4, 5, 12, 16, 67, 68, 69, 70, 71, 150, 151, 152, 153, 160, 166, 170, 175, 186, 187, 228, 249, 250, 252, 264, 265, 274, 298, 299, 303, 305, 552, 586, 593, 597, 604, 606, 820, 821, 830, 831, 918], "prioriti": [0, 4, 67, 68, 151, 167], "global_backend": [0, 4], "argument": [0, 4, 5, 14, 21, 22, 23, 24, 25, 64, 67, 68, 69, 70, 71, 114, 115, 137, 138, 152, 154, 155, 156, 157, 159, 160, 161, 163, 164, 170, 172, 173, 206, 207, 209, 210, 228, 237, 240, 256, 265, 274, 275, 289, 293, 297, 315, 328, 331, 333, 336, 377, 380, 410, 413, 493, 496, 525, 528, 529, 532, 538, 542, 552, 558, 559, 563, 573, 580, 602, 609, 657, 660, 669, 756, 790, 793, 820, 826, 838, 839, 842, 876, 881, 884, 901, 904, 909, 910, 913, 921, 923], "s": [0, 4, 5, 6, 12, 15, 16, 21, 24, 25, 64, 67, 68, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 145, 147, 148, 149, 150, 151, 153, 154, 156, 157, 159, 161, 163, 164, 165, 166, 167, 168, 170, 172, 173, 174, 175, 186, 187, 208, 209, 220, 224, 225, 228, 249, 250, 265, 284, 308, 315, 505, 508, 552, 561, 626, 629, 631, 634, 636, 639, 641, 647, 649, 670, 719, 721, 722, 724, 820, 826, 832, 876, 897, 900, 905, 908, 918], "paramet": [0, 4, 5, 21, 22, 23, 24, 25, 62, 63, 67, 68, 69, 70, 71, 108, 109, 114, 115, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 155, 156, 159, 172, 173, 186, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 232, 233, 234, 235, 236, 237, 240, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 264, 265, 274, 275, 278, 279, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 301, 303, 304, 305, 306, 307, 308, 309, 310, 311, 314, 315, 316, 319, 320, 323, 324, 327, 328, 331, 333, 336, 337, 340, 341, 344, 345, 348, 349, 352, 353, 356, 357, 360, 361, 364, 365, 368, 369, 372, 373, 376, 377, 380, 381, 384, 385, 388, 389, 392, 394, 397, 398, 401, 402, 405, 406, 409, 410, 413, 414, 417, 418, 421, 422, 425, 426, 429, 430, 433, 434, 437, 438, 441, 442, 445, 446, 449, 450, 453, 454, 457, 458, 461, 462, 465, 466, 469, 470, 473, 474, 477, 478, 481, 482, 483, 484, 487, 489, 492, 493, 496, 497, 500, 501, 504, 505, 508, 509, 512, 513, 516, 517, 520, 521, 524, 525, 528, 529, 532, 533, 537, 538, 542, 543, 547, 548, 551, 552, 553, 556, 558, 559, 560, 561, 562, 563, 564, 565, 567, 570, 571, 573, 574, 575, 576, 577, 578, 579, 580, 581, 584, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 605, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 620, 621, 622, 623, 624, 625, 626, 628, 629, 631, 633, 634, 636, 638, 639, 641, 643, 645, 647, 649, 651, 652, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 673, 674, 676, 677, 679, 680, 682, 683, 685, 686, 688, 689, 691, 692, 695, 696, 698, 700, 702, 703, 705, 706, 708, 709, 711, 712, 714, 715, 716, 718, 719, 721, 722, 724, 725, 727, 728, 730, 731, 733, 734, 736, 737, 739, 740, 741, 744, 746, 749, 751, 754, 756, 757, 760, 762, 765, 766, 769, 770, 773, 774, 777, 778, 781, 782, 785, 786, 789, 790, 793, 795, 796, 799, 800, 803, 804, 807, 808, 811, 812, 815, 816, 817, 818, 819, 820, 821, 822, 823, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 842, 843, 844, 845, 846, 848, 849, 851, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 869, 871, 874, 876, 877, 880, 881, 884, 885, 888, 889, 892, 893, 896, 897, 900, 901, 904, 905, 908, 909, 910, 913, 914, 917, 921, 923], "from": [0, 4, 5, 6, 14, 15, 16, 21, 22, 23, 24, 25, 62, 63, 64, 67, 68, 69, 70, 71, 108, 109, 114, 115, 125, 133, 136, 141, 145, 149, 150, 151, 152, 153, 154, 155, 156, 157, 159, 161, 163, 164, 165, 166, 167, 168, 170, 172, 173, 174, 175, 186, 187, 209, 210, 211, 213, 215, 216, 217, 220, 221, 223, 227, 228, 237, 240, 256, 265, 274, 275, 284, 299, 303, 308, 309, 315, 418, 421, 525, 528, 552, 573, 580, 581, 584, 620, 626, 629, 631, 639, 641, 657, 665, 668, 670, 680, 682, 719, 721, 731, 733, 756, 774, 777, 786, 789, 796, 799, 816, 817, 818, 819, 820, 822, 832, 833, 843, 844, 845, 846, 848, 849, 851, 855, 859, 860, 861, 863, 876, 893, 896, 897, 900, 901, 904, 905, 908, 909, 910, 913, 914, 917, 918, 924], "which": [0, 4, 5, 14, 15, 16, 67, 68, 69, 70, 71, 114, 115, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 145, 147, 148, 150, 151, 152, 153, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 172, 173, 174, 175, 186, 187, 198, 203, 206, 207, 208, 209, 210, 211, 212, 213, 214, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 228, 237, 240, 242, 246, 248, 251, 252, 264, 265, 274, 275, 285, 290, 291, 292, 293, 294, 295, 296, 297, 299, 303, 305, 307, 308, 309, 315, 505, 508, 552, 558, 570, 571, 573, 580, 581, 584, 586, 592, 596, 604, 605, 606, 608, 609, 624, 626, 629, 631, 633, 634, 636, 639, 641, 643, 645, 647, 649, 652, 654, 655, 657, 668, 670, 674, 676, 680, 682, 696, 698, 716, 718, 719, 721, 731, 733, 734, 736, 740, 746, 749, 751, 754, 756, 762, 765, 774, 777, 782, 785, 790, 793, 795, 800, 803, 820, 825, 826, 827, 828, 833, 834, 835, 836, 837, 843, 844, 845, 846, 849, 851, 855, 856, 857, 858, 859, 860, 861, 862, 864, 865, 866, 869, 871, 874, 876, 881, 884, 885, 888, 889, 892, 893, 896, 897, 900, 901, 904, 905, 908, 909, 910, 913, 914, 917, 918, 921, 923], "try": [0, 4, 13, 15, 16, 67, 68, 150, 151, 152, 153, 163, 164, 172, 187, 552, 623, 918], "infer": [0, 4, 154, 161, 165, 166, 170, 175, 206, 207, 209, 210, 211, 213, 216, 217, 221, 223, 227, 315, 418, 421, 552, 589, 614, 756, 786, 789], "when": [0, 4, 14, 15, 18, 64, 67, 68, 69, 70, 71, 137, 138, 150, 151, 152, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 172, 173, 175, 187, 228, 234, 265, 315, 328, 331, 406, 409, 501, 504, 552, 563, 596, 617, 740, 741, 744, 746, 749, 751, 754, 820, 831, 855, 856, 857, 859, 876, 881, 884, 889, 892, 897, 900, 905, 908, 918], "global": [0, 4, 5, 6, 12, 67, 68, 69, 70, 71, 139, 140, 160, 161, 165, 166, 170, 228, 243, 244, 245, 265, 274, 275, 307, 308, 309, 552, 587, 588, 607, 610, 611, 612, 616, 617, 838, 839, 842], "set": [0, 4, 5, 6, 12, 14, 21, 24, 25, 55, 64, 67, 68, 101, 125, 134, 141, 142, 143, 144, 145, 146, 149, 151, 154, 155, 160, 162, 163, 164, 165, 166, 167, 170, 172, 173, 265, 284, 294, 295, 306, 307, 308, 309, 315, 345, 348, 552, 553, 556, 610, 611, 612, 613, 626, 629, 631, 634, 636, 638, 639, 641, 643, 645, 647, 649, 670, 674, 676, 696, 698, 700, 702, 709, 711, 716, 718, 820, 821, 830, 831, 832, 836, 837, 843, 853, 855, 856, 861, 862, 863, 864, 865, 866, 869, 871, 874, 876, 897, 900, 905, 908], "ret": [0, 4, 5, 12, 21, 22, 23, 24, 25, 67, 68, 114, 115, 141, 145, 155, 156, 170, 175, 198, 199, 200, 201, 202, 203, 204, 205, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 232, 233, 234, 235, 236, 237, 240, 242, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 264, 265, 274, 281, 282, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 308, 309, 310, 311, 312, 314, 315, 316, 319, 320, 323, 324, 327, 328, 331, 333, 336, 337, 340, 341, 344, 345, 348, 349, 352, 353, 356, 357, 360, 361, 364, 365, 368, 369, 372, 373, 376, 377, 380, 381, 384, 385, 388, 389, 392, 394, 397, 398, 401, 402, 405, 406, 409, 410, 413, 414, 417, 418, 421, 422, 425, 426, 429, 430, 433, 434, 437, 438, 441, 442, 445, 446, 449, 450, 453, 454, 457, 458, 461, 462, 465, 466, 469, 470, 473, 474, 477, 478, 481, 482, 483, 484, 487, 489, 492, 493, 496, 497, 500, 501, 504, 505, 508, 509, 512, 513, 516, 517, 520, 521, 524, 525, 528, 529, 532, 533, 537, 538, 542, 543, 547, 548, 551, 552, 553, 556, 558, 560, 561, 562, 563, 564, 565, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 584, 588, 589, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 605, 608, 609, 614, 616, 617, 618, 620, 621, 622, 624, 625, 626, 628, 629, 631, 633, 634, 636, 638, 639, 641, 643, 645, 647, 649, 652, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 673, 674, 676, 677, 679, 680, 682, 683, 685, 686, 688, 689, 691, 692, 695, 696, 698, 700, 702, 703, 705, 706, 708, 709, 711, 712, 714, 715, 716, 718, 719, 721, 722, 724, 725, 727, 728, 730, 731, 733, 734, 736, 737, 739, 740, 741, 744, 746, 749, 751, 754, 756, 757, 760, 762, 765, 766, 769, 770, 773, 774, 777, 778, 781, 782, 785, 786, 789, 790, 793, 795, 796, 799, 800, 803, 804, 807, 808, 811, 812, 815, 816, 817, 818, 819, 820, 821, 822, 826, 830, 831, 832, 838, 839, 842, 843, 844, 845, 846, 848, 849, 851, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 869, 871, 874, 876, 877, 880, 881, 884, 885, 888, 889, 892, 893, 896, 897, 900, 901, 904, 905, 908, 909, 910, 913, 914, 917, 921, 923], "exampl": [0, 4, 5, 6, 12, 16, 28, 29, 32, 33, 34, 35, 46, 47, 62, 63, 64, 69, 70, 74, 75, 78, 79, 80, 81, 92, 93, 96, 97, 108, 109, 150, 151, 152, 154, 155, 156, 159, 160, 161, 162, 163, 164, 165, 166, 167, 170, 172, 173, 174, 175, 186, 187, 198, 200, 201, 202, 203, 204, 205, 206, 207, 209, 216, 217, 220, 222, 223, 226, 227, 228, 234, 237, 238, 239, 240, 241, 249, 250, 265, 284, 285, 287, 299, 300, 301, 302, 303, 306, 308, 310, 312, 313, 315, 328, 329, 330, 331, 332, 333, 336, 349, 352, 353, 356, 357, 360, 369, 372, 373, 376, 377, 378, 379, 380, 381, 384, 385, 388, 402, 405, 410, 411, 412, 413, 418, 421, 422, 425, 438, 441, 482, 483, 489, 492, 493, 496, 509, 512, 525, 528, 529, 532, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 552, 553, 554, 555, 556, 557, 560, 561, 569, 570, 577, 580, 581, 582, 583, 584, 585, 588, 599, 614, 615, 620, 621, 622, 657, 658, 660, 662, 663, 664, 669, 670, 671, 673, 674, 676, 677, 679, 680, 682, 689, 691, 700, 702, 706, 708, 719, 721, 725, 727, 728, 730, 740, 741, 744, 746, 749, 751, 754, 756, 757, 758, 759, 760, 761, 762, 765, 770, 773, 774, 777, 782, 785, 786, 789, 790, 791, 792, 793, 794, 795, 796, 799, 800, 803, 804, 807, 838, 839, 842, 843, 844, 845, 846, 847, 848, 849, 851, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 865, 866, 869, 876, 877, 880, 897, 900, 901, 904, 909, 910, 913, 918], "If": [0, 4, 5, 6, 14, 18, 21, 24, 25, 64, 67, 68, 149, 150, 151, 152, 153, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 172, 173, 175, 187, 209, 210, 212, 213, 214, 216, 217, 220, 222, 223, 224, 225, 226, 227, 228, 234, 236, 256, 265, 284, 308, 315, 316, 319, 320, 323, 324, 327, 328, 331, 333, 336, 337, 340, 341, 344, 345, 348, 377, 380, 381, 384, 385, 388, 402, 405, 406, 409, 410, 413, 446, 449, 450, 453, 458, 461, 462, 465, 470, 473, 474, 477, 484, 487, 501, 504, 505, 508, 509, 512, 513, 516, 517, 520, 521, 524, 525, 528, 538, 542, 543, 547, 548, 551, 552, 596, 626, 629, 631, 634, 636, 639, 641, 643, 645, 647, 649, 670, 671, 673, 674, 676, 696, 698, 700, 702, 709, 711, 712, 714, 716, 718, 719, 721, 731, 733, 734, 736, 740, 741, 744, 746, 749, 751, 754, 756, 770, 773, 774, 777, 790, 793, 795, 796, 799, 800, 803, 816, 817, 818, 820, 832, 833, 843, 848, 849, 851, 855, 856, 857, 858, 860, 861, 862, 864, 865, 866, 869, 871, 874, 876, 881, 884, 885, 888, 889, 892, 893, 896, 897, 900, 901, 904, 905, 908, 909, 910, 913, 914, 917, 918], "import": [0, 4, 15, 62, 63, 108, 109, 152, 155, 156, 157, 161, 163, 164, 165, 166, 167, 170, 172, 173, 175, 187, 265, 306, 918, 924], "numpi": [0, 4, 5, 6, 14, 15, 67, 68, 151, 152, 159, 161, 165, 166, 167, 168, 170, 172, 175, 552, 621, 876, 877, 880, 918], "np": [0, 4, 163, 165, 166, 167, 168, 172, 173, 175, 918], "x": [0, 4, 12, 21, 24, 25, 28, 29, 32, 33, 34, 35, 46, 47, 67, 68, 69, 70, 74, 75, 78, 79, 80, 81, 92, 93, 96, 97, 102, 103, 125, 136, 153, 155, 156, 157, 160, 161, 164, 167, 168, 170, 172, 173, 174, 175, 198, 199, 200, 201, 202, 203, 204, 205, 209, 211, 213, 215, 217, 220, 221, 223, 224, 225, 226, 227, 228, 234, 236, 237, 238, 239, 240, 241, 246, 265, 284, 285, 286, 287, 290, 291, 299, 303, 308, 310, 315, 316, 319, 320, 323, 324, 327, 328, 329, 330, 331, 332, 333, 336, 337, 340, 341, 344, 345, 348, 349, 352, 353, 356, 357, 360, 373, 376, 377, 378, 379, 380, 381, 384, 385, 388, 398, 401, 402, 405, 406, 409, 410, 411, 412, 413, 418, 421, 422, 425, 426, 429, 430, 433, 434, 437, 438, 441, 446, 449, 450, 453, 454, 457, 458, 461, 470, 473, 482, 483, 489, 492, 497, 500, 509, 512, 513, 516, 517, 520, 521, 524, 525, 528, 529, 532, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 551, 552, 560, 561, 562, 564, 565, 567, 569, 570, 571, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 588, 589, 591, 592, 594, 595, 596, 598, 599, 600, 601, 605, 614, 615, 618, 620, 621, 622, 624, 625, 626, 633, 638, 652, 654, 655, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 673, 674, 676, 677, 679, 680, 682, 683, 685, 686, 688, 689, 691, 696, 698, 699, 700, 702, 703, 705, 706, 708, 709, 711, 712, 714, 715, 719, 721, 722, 724, 725, 727, 728, 730, 734, 736, 740, 741, 744, 746, 749, 751, 754, 756, 757, 758, 759, 760, 761, 762, 765, 766, 769, 770, 773, 774, 777, 778, 781, 782, 785, 786, 789, 790, 791, 792, 793, 794, 795, 796, 799, 800, 801, 802, 803, 804, 807, 808, 811, 812, 815, 820, 821, 826, 830, 831, 832, 838, 839, 842, 843, 845, 846, 847, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 869, 870, 871, 874, 875, 876, 877, 880, 881, 884, 885, 888, 889, 892, 893, 896, 897, 900, 901, 904, 905, 908, 909, 910, 913, 914, 917, 918], "arrai": [0, 4, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 67, 68, 69, 70, 71, 74, 75, 78, 79, 80, 81, 92, 93, 96, 97, 125, 133, 136, 150, 151, 152, 154, 155, 156, 157, 159, 160, 161, 162, 164, 165, 166, 167, 169, 170, 171, 173, 174, 175, 187, 188, 196, 198, 199, 200, 201, 202, 203, 204, 205, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 234, 235, 236, 237, 239, 240, 241, 246, 248, 251, 253, 254, 256, 260, 265, 284, 285, 286, 287, 290, 291, 292, 293, 294, 295, 296, 297, 299, 303, 305, 309, 310, 315, 316, 319, 320, 323, 324, 327, 328, 330, 331, 332, 333, 336, 337, 340, 341, 344, 345, 348, 349, 352, 353, 356, 357, 360, 361, 364, 365, 368, 369, 372, 373, 376, 377, 379, 380, 381, 384, 385, 388, 389, 392, 394, 397, 398, 401, 402, 405, 406, 409, 410, 412, 413, 414, 417, 418, 421, 422, 425, 426, 429, 430, 433, 434, 437, 438, 441, 442, 445, 446, 449, 450, 453, 454, 457, 458, 461, 462, 465, 466, 469, 470, 473, 474, 477, 478, 481, 482, 483, 484, 487, 489, 492, 493, 496, 497, 500, 501, 504, 505, 508, 509, 512, 513, 516, 517, 520, 521, 524, 525, 528, 529, 532, 533, 537, 538, 539, 541, 542, 543, 544, 546, 547, 548, 551, 552, 553, 555, 556, 557, 560, 561, 562, 564, 565, 567, 569, 570, 571, 574, 575, 576, 577, 578, 579, 580, 581, 583, 584, 585, 586, 589, 591, 592, 593, 594, 595, 596, 598, 599, 601, 604, 605, 606, 608, 609, 614, 615, 618, 620, 621, 622, 624, 625, 626, 628, 629, 631, 634, 636, 638, 639, 641, 643, 645, 647, 649, 652, 654, 655, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 673, 674, 676, 677, 679, 680, 682, 683, 685, 686, 688, 689, 691, 692, 695, 696, 698, 699, 700, 702, 703, 705, 706, 708, 709, 711, 712, 714, 715, 716, 718, 719, 721, 722, 724, 725, 727, 728, 730, 731, 733, 734, 736, 737, 739, 740, 741, 744, 746, 749, 751, 754, 756, 757, 759, 760, 761, 762, 765, 766, 769, 770, 773, 774, 777, 778, 781, 782, 785, 786, 789, 790, 792, 793, 794, 795, 796, 799, 800, 803, 804, 807, 808, 811, 812, 815, 816, 817, 818, 819, 820, 822, 832, 833, 838, 839, 842, 843, 844, 845, 846, 847, 848, 849, 851, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 869, 871, 874, 876, 877, 880, 881, 884, 885, 888, 889, 892, 893, 896, 897, 900, 901, 904, 905, 908, 909, 910, 913, 914, 917, 918, 921, 923], "2": [0, 4, 28, 29, 32, 33, 34, 35, 42, 43, 46, 47, 64, 67, 68, 69, 70, 74, 75, 78, 79, 80, 81, 92, 93, 96, 97, 150, 151, 153, 157, 161, 164, 168, 169, 170, 172, 173, 174, 175, 187, 198, 200, 201, 202, 203, 205, 208, 209, 216, 217, 220, 222, 223, 227, 228, 234, 237, 238, 239, 240, 241, 265, 284, 285, 287, 299, 301, 303, 310, 315, 328, 329, 330, 331, 332, 333, 336, 341, 344, 345, 348, 353, 356, 357, 360, 369, 372, 373, 376, 377, 378, 379, 380, 381, 384, 385, 388, 402, 405, 410, 411, 412, 413, 418, 421, 422, 425, 438, 441, 458, 461, 482, 483, 489, 492, 493, 496, 509, 512, 525, 528, 529, 532, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 552, 553, 554, 555, 556, 560, 561, 564, 565, 567, 570, 577, 580, 581, 582, 583, 584, 585, 599, 614, 615, 620, 657, 660, 661, 662, 663, 664, 669, 670, 671, 673, 674, 676, 677, 679, 680, 681, 682, 689, 691, 692, 695, 696, 698, 700, 702, 706, 708, 709, 711, 712, 714, 719, 721, 725, 726, 727, 728, 730, 734, 735, 736, 740, 741, 744, 751, 754, 756, 757, 758, 759, 760, 761, 762, 765, 770, 773, 774, 777, 782, 785, 786, 789, 790, 791, 792, 793, 794, 795, 796, 799, 804, 807, 838, 839, 842, 843, 844, 845, 846, 847, 848, 849, 851, 854, 855, 856, 857, 858, 859, 860, 861, 862, 865, 866, 869, 876, 877, 880, 881, 884, 909, 910, 913, 918], "0": [0, 4, 32, 33, 34, 35, 42, 43, 46, 47, 48, 49, 58, 59, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 116, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 147, 148, 151, 155, 156, 157, 170, 172, 173, 174, 175, 198, 200, 201, 202, 203, 204, 205, 209, 210, 214, 218, 219, 223, 224, 225, 226, 227, 228, 234, 237, 239, 240, 241, 248, 265, 267, 270, 274, 277, 281, 284, 285, 287, 290, 291, 292, 293, 294, 295, 296, 297, 299, 303, 306, 308, 309, 313, 315, 316, 319, 320, 323, 324, 327, 328, 331, 332, 333, 336, 337, 340, 341, 344, 345, 348, 349, 352, 353, 356, 361, 364, 369, 372, 373, 376, 377, 378, 379, 380, 381, 384, 385, 388, 402, 405, 406, 409, 410, 411, 412, 413, 422, 425, 446, 449, 450, 453, 458, 461, 482, 483, 484, 487, 489, 492, 493, 496, 501, 504, 505, 508, 509, 512, 513, 516, 517, 520, 521, 524, 525, 528, 529, 532, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 551, 552, 553, 554, 555, 556, 557, 560, 561, 564, 565, 567, 569, 570, 571, 577, 580, 581, 584, 585, 590, 599, 605, 608, 609, 614, 620, 621, 622, 626, 628, 629, 630, 631, 632, 639, 640, 641, 642, 643, 644, 645, 646, 657, 658, 660, 662, 663, 664, 669, 670, 671, 673, 674, 676, 677, 679, 680, 681, 682, 689, 691, 719, 721, 725, 727, 728, 729, 730, 734, 736, 740, 741, 744, 746, 749, 751, 754, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 777, 778, 781, 782, 785, 790, 791, 792, 793, 794, 795, 796, 799, 800, 801, 802, 803, 804, 807, 812, 814, 820, 832, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 864, 865, 866, 869, 876, 877, 880, 881, 884, 885, 888, 897, 898, 899, 900, 901, 904, 905, 906, 907, 908, 909, 910, 913, 918], "print": [0, 4, 5, 6, 12, 28, 29, 32, 33, 34, 35, 46, 47, 62, 63, 67, 68, 69, 70, 71, 74, 75, 78, 79, 80, 81, 92, 93, 96, 97, 108, 109, 150, 157, 164, 170, 172, 173, 174, 198, 200, 201, 202, 203, 204, 205, 209, 216, 217, 220, 222, 223, 226, 227, 228, 234, 237, 238, 239, 240, 241, 249, 250, 265, 285, 299, 300, 301, 302, 303, 305, 308, 312, 315, 328, 329, 330, 331, 332, 333, 336, 349, 352, 353, 356, 357, 360, 369, 372, 373, 376, 377, 378, 379, 380, 381, 384, 385, 388, 402, 405, 410, 411, 412, 413, 418, 421, 422, 425, 438, 441, 482, 483, 489, 492, 493, 496, 509, 512, 525, 528, 529, 532, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 552, 553, 554, 555, 556, 557, 560, 561, 569, 570, 577, 580, 581, 582, 583, 584, 585, 588, 606, 614, 615, 620, 621, 622, 657, 658, 660, 662, 663, 664, 669, 670, 671, 673, 674, 676, 677, 679, 680, 682, 689, 691, 706, 708, 719, 721, 725, 727, 728, 730, 740, 741, 744, 746, 749, 751, 754, 756, 757, 758, 759, 760, 761, 770, 773, 774, 777, 782, 785, 786, 789, 790, 791, 792, 793, 794, 795, 796, 799, 804, 807, 838, 839, 842, 843, 844, 845, 846, 847, 848, 849, 851, 854, 855, 856, 857, 858, 859, 860, 861, 862, 865, 866, 869, 876, 877, 880, 881, 884, 897, 900, 901, 904, 909, 910, 913, 918], "function": [0, 4, 5, 6, 14, 21, 28, 29, 32, 33, 34, 35, 46, 47, 62, 63, 67, 68, 74, 75, 78, 79, 80, 81, 92, 93, 96, 97, 108, 109, 111, 112, 113, 141, 144, 146, 151, 153, 154, 155, 156, 157, 158, 159, 161, 163, 167, 169, 171, 172, 173, 174, 185, 186, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 267, 268, 269, 270, 271, 272, 274, 275, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 319, 320, 323, 324, 327, 328, 329, 330, 331, 332, 333, 336, 337, 340, 341, 344, 345, 348, 349, 352, 353, 356, 357, 360, 361, 364, 365, 368, 369, 372, 373, 376, 377, 378, 379, 380, 381, 384, 385, 388, 389, 392, 394, 397, 398, 401, 402, 405, 406, 409, 410, 411, 412, 413, 414, 417, 418, 421, 422, 425, 426, 429, 430, 433, 434, 437, 438, 441, 442, 445, 446, 449, 450, 453, 454, 457, 458, 461, 462, 465, 466, 469, 470, 473, 474, 477, 478, 481, 482, 483, 484, 487, 489, 492, 493, 496, 497, 500, 501, 504, 505, 508, 509, 512, 513, 516, 517, 520, 521, 524, 525, 528, 529, 532, 533, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 628, 629, 631, 633, 634, 636, 638, 639, 641, 643, 645, 647, 649, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 673, 674, 676, 677, 679, 680, 682, 683, 685, 686, 688, 689, 691, 692, 695, 696, 698, 699, 700, 702, 703, 705, 706, 708, 709, 711, 712, 714, 715, 716, 718, 719, 721, 722, 724, 725, 727, 728, 730, 731, 733, 734, 736, 737, 739, 740, 741, 744, 746, 749, 751, 754, 756, 757, 758, 759, 760, 761, 762, 765, 766, 769, 770, 773, 774, 777, 778, 781, 782, 785, 786, 789, 790, 791, 792, 793, 794, 795, 796, 799, 800, 803, 804, 807, 808, 811, 812, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 842, 843, 844, 845, 846, 847, 848, 849, 851, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 869, 871, 874, 876, 877, 880, 881, 884, 885, 888, 889, 892, 893, 896, 897, 900, 901, 904, 905, 908, 909, 910, 913, 914, 917, 918, 921, 923], "py": [0, 4, 5, 151, 155, 156, 160, 161, 165, 166, 168, 170, 172, 174, 175, 843, 844, 848, 849, 851], "noqa": [0, 4, 5, 209, 220, 228, 237, 240, 315, 328, 331, 353, 356, 373, 376, 377, 380, 385, 388, 493, 496, 509, 512, 525, 528, 529, 532, 538, 542, 543, 547, 670, 677, 679, 756, 770, 773, 774, 777, 790, 793, 876, 881, 884], "The": [0, 4, 5, 13, 14, 16, 18, 21, 22, 23, 24, 25, 64, 67, 68, 69, 70, 71, 114, 115, 125, 126, 127, 128, 129, 130, 131, 132, 133, 135, 136, 137, 138, 139, 140, 141, 143, 144, 145, 149, 150, 152, 153, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 173, 174, 175, 186, 198, 199, 200, 203, 205, 206, 207, 209, 210, 215, 219, 220, 224, 225, 228, 232, 233, 234, 242, 247, 249, 250, 252, 255, 260, 264, 265, 274, 275, 281, 282, 283, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 303, 304, 305, 306, 307, 308, 309, 311, 314, 315, 316, 319, 320, 323, 324, 327, 328, 331, 333, 336, 337, 340, 341, 344, 345, 348, 349, 352, 353, 356, 357, 360, 361, 364, 365, 368, 369, 372, 373, 376, 377, 380, 381, 384, 385, 388, 389, 392, 394, 397, 398, 401, 402, 405, 406, 409, 410, 413, 414, 417, 418, 421, 422, 425, 426, 429, 430, 433, 434, 437, 438, 441, 442, 445, 446, 449, 450, 453, 458, 461, 462, 465, 466, 469, 470, 473, 474, 477, 478, 481, 484, 487, 493, 496, 501, 504, 505, 508, 509, 512, 513, 516, 517, 520, 521, 524, 525, 528, 538, 542, 543, 547, 548, 551, 552, 558, 560, 563, 564, 572, 573, 579, 581, 584, 594, 595, 596, 598, 599, 600, 601, 603, 608, 609, 610, 611, 612, 615, 616, 617, 625, 626, 628, 629, 631, 634, 636, 639, 641, 643, 645, 647, 649, 652, 655, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 668, 669, 670, 671, 673, 674, 676, 677, 679, 680, 682, 683, 685, 686, 688, 689, 691, 696, 698, 700, 702, 703, 705, 706, 708, 709, 711, 712, 714, 715, 716, 718, 719, 721, 722, 724, 725, 727, 728, 730, 731, 733, 734, 736, 740, 741, 744, 746, 749, 751, 754, 756, 762, 765, 766, 769, 770, 773, 774, 777, 778, 781, 782, 785, 786, 789, 795, 808, 811, 816, 817, 818, 819, 820, 821, 822, 823, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 842, 843, 844, 848, 855, 856, 857, 858, 860, 861, 862, 864, 865, 866, 869, 871, 874, 876, 877, 880, 881, 884, 885, 888, 889, 892, 893, 896, 897, 900, 901, 904, 905, 908, 909, 910, 913, 914, 917, 918], "set_backend": [0, 4, 5, 12, 160, 161, 162, 165, 228, 249, 250, 265, 306, 552, 614, 918], "ha": [0, 4, 5, 14, 15, 16, 64, 67, 68, 151, 156, 157, 160, 161, 162, 165, 166, 170, 172, 174, 175, 186, 187, 209, 220, 265, 284, 315, 316, 319, 484, 487, 501, 504, 670, 692, 695, 715, 716, 718, 719, 721, 728, 730, 756, 770, 773, 796, 799, 860, 861, 862, 864, 876, 885, 888, 893, 896, 897, 900, 901, 904, 905, 908], "over": [0, 4, 14, 16, 62, 63, 64, 67, 68, 108, 109, 139, 140, 150, 156, 157, 161, 167, 172, 187, 670, 696, 698, 725, 727, 731, 733, 734, 736, 838, 839, 842, 843, 849, 851, 876, 881, 884, 885, 888, 889, 892, 893, 896, 897, 900, 901, 904, 905, 908, 909, 910, 913, 914, 917], "ani": [0, 4, 12, 14, 15, 16, 21, 22, 23, 60, 61, 62, 63, 67, 68, 106, 107, 108, 109, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 163, 164, 165, 166, 167, 168, 170, 172, 173, 174, 175, 186, 187, 206, 207, 209, 211, 221, 228, 237, 240, 265, 310, 315, 328, 331, 333, 336, 377, 380, 394, 397, 410, 413, 422, 425, 442, 445, 493, 496, 525, 528, 529, 532, 538, 542, 552, 553, 556, 573, 574, 575, 576, 577, 580, 591, 598, 599, 600, 601, 616, 617, 626, 633, 657, 660, 669, 756, 790, 793, 816, 817, 818, 819, 820, 826, 830, 838, 839, 842, 843, 849, 851, 876, 881, 884, 909, 910, 913, 918], "pass": [0, 4, 62, 63, 67, 68, 69, 70, 71, 108, 109, 114, 115, 137, 138, 141, 145, 147, 148, 152, 156, 157, 158, 159, 160, 161, 163, 164, 167, 168, 172, 187, 228, 242, 265, 274, 309, 315, 345, 348, 552, 563, 596, 626, 655, 816, 817, 818], "jax": [0, 4, 5, 6, 15, 16, 151, 152, 161, 165, 166, 167, 168, 170, 172, 175, 187, 626, 638, 860, 861, 862, 864, 918], "get_backend": [0, 160, 161], "specifi": [0, 5, 64, 67, 68, 154, 159, 160, 165, 166, 167, 168, 170, 173, 174, 175, 209, 210, 212, 216, 218, 219, 222, 224, 225, 226, 228, 234, 236, 265, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 299, 303, 305, 308, 309, 310, 315, 505, 508, 552, 558, 570, 580, 581, 584, 591, 624, 670, 680, 682, 696, 698, 725, 727, 728, 730, 731, 733, 734, 736, 740, 741, 744, 746, 749, 751, 754, 756, 757, 760, 762, 765, 766, 769, 774, 777, 790, 793, 796, 799, 800, 803, 812, 815, 820, 825, 827, 828, 834, 835, 836, 837, 855, 856, 857, 860, 861, 862, 864, 865, 866, 869, 876, 877, 880, 893, 896, 901, 904, 909, 910, 913, 914, 917], "isn": [0, 5, 151, 173, 187], "t": [0, 5, 15, 16, 62, 63, 108, 109, 150, 151, 152, 153, 157, 165, 170, 172, 173, 174, 175, 187, 552, 561, 657, 666, 667], "associ": [0, 5, 151, 160, 162, 187, 315, 328, 331, 484, 487, 670, 700, 702, 709, 711, 737, 739], "option": [0, 5, 21, 22, 23, 24, 25, 62, 63, 67, 68, 108, 109, 150, 151, 155, 156, 157, 160, 164, 165, 166, 167, 168, 170, 175, 187, 198, 200, 201, 203, 206, 207, 209, 210, 211, 212, 213, 214, 216, 217, 218, 219, 220, 221, 222, 223, 226, 227, 228, 242, 243, 244, 245, 252, 264, 265, 284, 308, 309, 310, 315, 316, 319, 320, 323, 324, 327, 328, 331, 333, 336, 337, 340, 341, 344, 345, 348, 353, 356, 357, 360, 361, 364, 365, 368, 369, 372, 373, 376, 377, 380, 381, 384, 385, 388, 402, 405, 406, 409, 410, 413, 426, 429, 430, 433, 434, 437, 438, 441, 446, 449, 450, 453, 454, 457, 458, 461, 462, 465, 466, 469, 470, 473, 474, 477, 478, 481, 484, 487, 489, 492, 493, 496, 501, 504, 505, 508, 509, 512, 513, 516, 517, 520, 521, 524, 525, 528, 529, 532, 533, 537, 538, 542, 543, 547, 552, 558, 565, 567, 570, 571, 572, 578, 580, 603, 605, 608, 609, 616, 617, 626, 652, 657, 660, 663, 664, 666, 669, 670, 696, 698, 700, 702, 709, 711, 734, 736, 740, 741, 744, 746, 749, 751, 754, 756, 757, 760, 762, 765, 770, 773, 774, 777, 778, 781, 782, 785, 790, 793, 795, 796, 799, 800, 803, 804, 807, 816, 817, 818, 819, 820, 821, 826, 831, 832, 838, 839, 842, 843, 844, 845, 846, 848, 849, 851, 855, 856, 857, 865, 866, 869, 871, 874, 876, 877, 880, 881, 884, 885, 888, 889, 892, 893, 896, 897, 900, 901, 904, 905, 908, 909, 910, 913, 914, 917], "str": [0, 5, 18, 21, 22, 23, 64, 67, 68, 165, 166, 209, 220, 228, 232, 242, 243, 244, 247, 248, 251, 252, 253, 254, 257, 258, 259, 264, 265, 281, 284, 285, 287, 290, 291, 292, 293, 309, 552, 558, 572, 574, 575, 576, 603, 608, 609, 657, 658, 660, 662, 663, 664, 670, 712, 714, 816, 817, 818, 819, 820, 826, 876, 877, 880], "we": [0, 5, 6, 12, 13, 14, 15, 16, 62, 63, 108, 109, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 162, 163, 164, 165, 167, 168, 170, 171, 172, 173, 174, 175, 186, 187, 626, 633, 918, 924], "want": [0, 5, 15, 62, 63, 108, 109, 149, 150, 151, 159, 173, 174, 175, 187], "retriev": [0, 5, 151, 552, 558], "i": [0, 5, 151, 153, 154, 170, 173, 175, 209, 210, 220, 315, 316, 319, 345, 348, 361, 364, 369, 372, 377, 380, 410, 413, 414, 417, 426, 429, 482, 483, 489, 492, 501, 504, 505, 508, 552, 560, 561, 626, 629, 631, 634, 636, 639, 641, 643, 645, 647, 649, 670, 674, 676, 692, 695, 700, 702, 709, 711, 716, 718, 719, 721, 728, 730, 734, 736, 756, 800, 803, 860, 861, 862, 864, 865, 866, 869, 871, 874, 876, 877, 880, 881, 884, 885, 888, 889, 892, 897, 900, 901, 904, 905, 908], "e": [0, 5, 15, 16, 64, 149, 151, 153, 154, 164, 173, 187, 208, 209, 220, 228, 233, 256, 265, 281, 315, 316, 319, 345, 348, 361, 364, 369, 372, 377, 380, 402, 405, 410, 413, 414, 417, 426, 429, 446, 449, 454, 457, 482, 483, 489, 492, 501, 504, 505, 508, 626, 629, 631, 634, 636, 639, 641, 643, 645, 647, 649, 670, 674, 676, 692, 695, 700, 702, 709, 711, 716, 718, 719, 721, 734, 736, 756, 800, 803, 843, 848, 849, 851, 860, 861, 862, 864, 865, 866, 869, 871, 874, 876, 881, 884, 885, 888, 889, 892, 893, 896, 897, 900, 901, 904, 905, 908], "one": [0, 5, 15, 16, 64, 67, 68, 78, 79, 80, 81, 92, 93, 96, 97, 150, 151, 157, 160, 163, 164, 165, 167, 168, 169, 172, 173, 175, 187, 209, 210, 220, 228, 235, 237, 240, 265, 294, 295, 296, 297, 309, 328, 332, 552, 553, 555, 556, 557, 581, 585, 602, 605, 608, 609, 670, 692, 695, 696, 698, 706, 708, 712, 714, 731, 733, 734, 736, 756, 757, 761, 770, 773, 774, 777, 790, 793, 794, 796, 799, 845, 847, 855, 856, 858, 860, 861, 862, 863, 864, 876, 877, 880, 918], "default": [0, 5, 18, 21, 22, 23, 24, 25, 62, 63, 64, 67, 68, 69, 70, 71, 108, 109, 114, 115, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 151, 156, 157, 160, 161, 164, 165, 166, 168, 174, 198, 199, 200, 201, 203, 206, 207, 209, 210, 211, 212, 213, 214, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 234, 243, 244, 245, 246, 265, 274, 275, 284, 285, 289, 290, 291, 292, 293, 294, 295, 296, 297, 304, 306, 307, 308, 309, 310, 313, 314, 315, 316, 319, 320, 323, 324, 327, 328, 331, 333, 336, 337, 340, 341, 344, 345, 348, 353, 356, 357, 360, 361, 364, 365, 368, 369, 372, 373, 376, 377, 380, 381, 384, 385, 388, 402, 405, 406, 409, 410, 413, 426, 429, 430, 433, 434, 437, 438, 441, 446, 449, 450, 453, 454, 457, 458, 461, 462, 465, 466, 469, 470, 473, 474, 477, 478, 481, 484, 487, 489, 492, 493, 496, 501, 504, 505, 508, 509, 512, 513, 516, 517, 520, 521, 524, 525, 528, 529, 532, 533, 537, 538, 542, 543, 547, 552, 553, 556, 558, 564, 565, 567, 570, 571, 578, 579, 580, 589, 590, 591, 593, 596, 597, 598, 599, 601, 602, 603, 605, 607, 608, 609, 612, 614, 616, 617, 624, 625, 626, 628, 629, 631, 633, 634, 636, 638, 639, 641, 643, 645, 647, 649, 652, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 673, 674, 676, 680, 682, 696, 698, 700, 702, 709, 711, 712, 714, 719, 721, 725, 727, 728, 730, 731, 733, 734, 736, 740, 741, 744, 746, 749, 751, 754, 756, 757, 760, 762, 765, 766, 769, 770, 773, 774, 777, 778, 781, 782, 785, 790, 793, 795, 796, 799, 800, 803, 804, 807, 816, 817, 818, 819, 820, 821, 822, 826, 830, 831, 832, 833, 838, 839, 842, 843, 844, 845, 846, 848, 849, 851, 853, 855, 856, 857, 858, 860, 861, 862, 865, 866, 869, 871, 874, 876, 877, 880, 881, 884, 885, 888, 889, 892, 893, 896, 897, 900, 901, 904, 905, 908, 909, 910, 913, 914, 917], "torch": [0, 5, 12, 151, 155, 160, 161, 163, 164, 165, 166, 167, 168, 170, 172, 173, 174, 175, 187, 206, 207, 228, 249, 250, 265, 306, 552, 614, 756, 770, 773, 918], "tensorflow": [0, 5, 12, 15, 16, 151, 152, 165, 166, 167, 168, 170, 175, 187, 918], "mxnet": [0, 5, 15, 152, 165, 166, 167, 170, 175, 918], "either": [0, 5, 12, 64, 67, 68, 125, 136, 137, 138, 150, 151, 153, 156, 157, 160, 161, 164, 165, 166, 170, 172, 173, 187, 209, 215, 315, 328, 331, 345, 348, 430, 433, 446, 449, 450, 453, 458, 461, 462, 465, 484, 487, 505, 508, 513, 516, 517, 520, 538, 542, 552, 573, 598, 602, 603, 670, 692, 695, 816, 817, 818, 819, 876, 893, 896, 901, 904], "doesn": [0, 5, 150, 153, 157, 165, 170, 187], "matter": [0, 5, 14, 157], "been": [0, 5, 151, 156, 160, 161, 164, 165, 166, 168, 170, 186, 187, 265, 284, 552, 574, 575, 576, 843, 844], "ivy_np": [0, 5], "us": [0, 5, 12, 15, 16, 18, 62, 63, 64, 67, 68, 69, 70, 71, 108, 109, 125, 133, 136, 137, 138, 139, 140, 141, 143, 144, 149, 151, 152, 154, 155, 156, 157, 158, 159, 160, 161, 163, 164, 165, 166, 167, 168, 169, 170, 172, 174, 175, 186, 187, 198, 200, 201, 202, 203, 204, 205, 208, 228, 247, 265, 274, 275, 300, 304, 307, 308, 309, 310, 312, 314, 315, 333, 336, 353, 356, 373, 376, 385, 388, 422, 425, 482, 483, 489, 492, 493, 496, 509, 512, 525, 528, 552, 580, 587, 588, 602, 608, 609, 610, 611, 616, 617, 626, 628, 629, 631, 639, 641, 643, 645, 657, 663, 665, 666, 668, 669, 670, 677, 679, 680, 682, 696, 698, 740, 741, 744, 756, 770, 773, 774, 777, 782, 785, 790, 793, 804, 807, 816, 817, 818, 819, 820, 821, 823, 829, 830, 831, 833, 838, 839, 842, 855, 856, 857, 858, 860, 861, 862, 876, 877, 880, 909, 910, 913, 918], "ivy_jax": [0, 5], "subsequ": [0, 6, 150, 157, 159, 160, 163, 167, 168, 174], "call": [0, 6, 12, 15, 18, 64, 69, 70, 125, 136, 137, 138, 141, 145, 153, 155, 156, 157, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 172, 173, 174, 175, 187, 265, 309, 552, 607, 612, 623, 626, 633, 820, 821, 826, 830, 831], "nativ": [0, 6, 21, 23, 24, 25, 67, 68, 114, 115, 165, 167, 172, 173, 209, 221, 228, 232, 233, 242, 265, 281, 282, 283, 284, 285, 304, 311, 314, 552, 596, 598, 601], "native_arrai": [0, 6, 12, 34, 35, 69, 70, 80, 81, 198, 200, 201, 202, 203, 204, 205, 209, 220, 228, 237, 240, 265, 287, 303, 315, 333, 336, 353, 356, 373, 376, 377, 380, 410, 413, 422, 425, 482, 483, 489, 492, 493, 496, 525, 528, 529, 532, 543, 547, 552, 553, 554, 555, 556, 557, 561, 569, 570, 577, 580, 581, 584, 615, 620, 621, 622, 657, 660, 663, 664, 669, 670, 674, 676, 677, 679, 680, 682, 725, 727, 740, 741, 744, 751, 754, 756, 757, 760, 770, 773, 774, 777, 782, 785, 795, 804, 807, 838, 839, 842, 843, 844, 855, 856, 857, 858, 859, 860, 861, 862, 876, 877, 880, 881, 884, 909, 910, 913], "1": [0, 6, 12, 15, 16, 28, 29, 32, 33, 34, 35, 42, 43, 44, 45, 46, 47, 48, 49, 56, 57, 64, 67, 68, 69, 70, 74, 75, 78, 79, 80, 81, 90, 91, 92, 93, 94, 95, 96, 97, 102, 103, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 145, 147, 148, 153, 157, 160, 164, 167, 168, 169, 170, 172, 173, 174, 175, 187, 198, 200, 201, 202, 203, 205, 209, 210, 217, 218, 219, 220, 222, 223, 227, 228, 234, 237, 238, 239, 240, 241, 248, 265, 269, 272, 274, 279, 284, 285, 287, 289, 293, 297, 299, 302, 303, 310, 315, 320, 323, 324, 327, 328, 329, 330, 331, 332, 333, 336, 345, 348, 353, 356, 357, 360, 369, 372, 373, 376, 377, 378, 379, 380, 381, 384, 385, 388, 402, 405, 406, 409, 410, 411, 412, 413, 418, 421, 422, 425, 438, 441, 446, 449, 450, 453, 454, 457, 458, 461, 482, 483, 489, 492, 493, 496, 501, 504, 509, 512, 513, 516, 517, 520, 525, 528, 529, 532, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 552, 553, 554, 555, 556, 557, 560, 561, 569, 570, 577, 580, 581, 582, 583, 584, 585, 599, 605, 608, 609, 614, 615, 617, 620, 621, 622, 624, 657, 658, 659, 660, 661, 662, 663, 664, 665, 669, 670, 671, 673, 674, 675, 676, 677, 679, 680, 681, 682, 689, 691, 700, 702, 706, 708, 716, 718, 719, 721, 725, 727, 728, 730, 731, 732, 733, 734, 736, 740, 741, 744, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 765, 770, 773, 774, 777, 778, 781, 782, 785, 786, 789, 790, 791, 792, 793, 794, 795, 796, 799, 800, 803, 804, 807, 820, 832, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 854, 855, 856, 857, 858, 859, 860, 861, 862, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 880, 881, 884, 897, 900, 901, 904, 905, 908, 909, 910, 913, 914, 917, 918], "type": [0, 6, 12, 18, 21, 22, 23, 24, 25, 29, 32, 33, 34, 35, 42, 43, 44, 45, 46, 47, 48, 49, 56, 57, 58, 59, 60, 61, 62, 63, 64, 67, 68, 69, 70, 71, 75, 78, 79, 80, 81, 82, 83, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 102, 103, 104, 105, 106, 107, 108, 109, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 150, 152, 154, 155, 156, 157, 162, 163, 164, 166, 167, 168, 170, 172, 173, 175, 188, 189, 190, 191, 192, 193, 194, 195, 196, 198, 200, 201, 202, 203, 204, 205, 206, 207, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 260, 264, 265, 281, 282, 283, 284, 285, 287, 297, 298, 299, 300, 301, 302, 303, 304, 306, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 555, 556, 557, 558, 560, 561, 563, 564, 565, 567, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 587, 588, 589, 591, 592, 594, 595, 596, 598, 599, 600, 601, 605, 608, 609, 610, 611, 614, 616, 617, 618, 620, 621, 622, 624, 625, 626, 628, 629, 631, 632, 634, 636, 637, 638, 639, 641, 642, 643, 645, 646, 647, 648, 649, 650, 652, 654, 657, 658, 660, 662, 663, 664, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 826, 830, 831, 832, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918], "ndarrai": [0, 6, 163, 165, 166, 167, 168, 172, 209, 211, 221, 552, 621], "Or": [0, 6, 173], "jaxlib": [0, 6, 150, 165, 166, 168, 172], "xla_extens": [0, 6, 165, 166, 168, 172], "devicearrai": [0, 6, 172], "try_import_ivy_jax": 0, "warn": [0, 7, 8, 9, 10, 11], "fals": [0, 7, 8, 9, 10, 11, 18, 21, 22, 23, 24, 25, 34, 35, 42, 43, 56, 57, 58, 59, 60, 61, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 114, 115, 137, 138, 141, 142, 143, 144, 145, 146, 157, 164, 167, 173, 174, 175, 228, 234, 237, 239, 240, 241, 246, 265, 284, 285, 296, 300, 301, 304, 309, 312, 314, 315, 316, 318, 320, 322, 324, 326, 328, 330, 332, 333, 335, 337, 339, 341, 343, 345, 347, 349, 351, 353, 355, 356, 357, 359, 361, 363, 365, 367, 369, 371, 373, 375, 377, 379, 381, 383, 385, 387, 389, 391, 393, 394, 396, 398, 400, 402, 404, 406, 408, 410, 412, 414, 416, 418, 420, 421, 422, 424, 425, 426, 428, 429, 430, 432, 433, 434, 436, 437, 438, 440, 441, 442, 444, 446, 448, 450, 452, 454, 456, 458, 460, 462, 464, 466, 468, 470, 472, 473, 474, 476, 477, 478, 480, 484, 486, 488, 489, 491, 493, 495, 496, 497, 499, 501, 503, 505, 507, 509, 511, 513, 515, 517, 519, 521, 523, 525, 527, 529, 531, 533, 534, 536, 538, 539, 541, 543, 544, 546, 548, 550, 552, 553, 554, 555, 556, 557, 560, 561, 565, 566, 570, 573, 577, 579, 581, 583, 585, 589, 596, 598, 599, 601, 602, 614, 624, 626, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 670, 671, 672, 673, 692, 694, 696, 697, 698, 719, 721, 734, 735, 736, 741, 743, 745, 746, 748, 750, 751, 753, 755, 756, 757, 759, 761, 762, 764, 766, 768, 770, 772, 774, 776, 778, 780, 782, 784, 786, 788, 790, 792, 794, 795, 796, 798, 800, 802, 804, 806, 808, 810, 812, 814, 816, 817, 818, 819, 820, 821, 822, 826, 830, 831, 832, 833, 839, 841, 843, 844, 849, 850, 852, 855, 856, 857, 859, 860, 861, 862, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 879, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917], "try_import_ivy_mxnet": 0, "try_import_ivy_numpi": 0, "try_import_ivy_tf": 0, "try_import_ivy_torch": 0, "unset_backend": [0, 161], "unset": [0, 12, 161, 170, 172], "adjust": [0, 12, 876, 897, 900, 905, 908], "dict": [0, 12, 21, 22, 23, 24, 25, 64, 67, 68, 69, 70, 71, 164, 173, 174, 265, 274, 275, 284, 287, 290, 291, 292, 293, 552, 558, 574, 575, 576, 820, 822, 823, 826, 829, 832, 833], "previous": [0, 12, 150, 153, 159, 160, 170, 552, 563], "otherwis": [0, 12, 18, 21, 22, 23, 24, 25, 64, 67, 68, 163, 165, 166, 168, 170, 172, 209, 210, 228, 234, 237, 240, 243, 244, 245, 265, 284, 315, 426, 429, 430, 433, 434, 437, 552, 562, 623, 626, 638, 652, 670, 671, 673, 677, 679, 731, 733, 734, 736, 816, 817, 818, 820, 833, 855, 856, 857, 859, 876, 881, 884, 885, 888, 889, 892, 893, 896, 897, 900, 901, 904, 905, 908, 909, 910, 913, 914, 917], "implement": [0, 12, 18, 64, 151, 152, 156, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 172, 173, 174, 175, 186, 187, 228, 234, 256, 265, 310, 315, 316, 319, 320, 323, 324, 327, 333, 336, 337, 340, 341, 344, 345, 348, 381, 384, 385, 388, 402, 405, 406, 409, 446, 449, 450, 453, 454, 457, 458, 461, 484, 487, 501, 504, 505, 508, 517, 520, 521, 524, 538, 542, 543, 547, 670, 683, 685, 860, 861, 862, 864, 865, 866, 869, 871, 874, 876, 881, 884, 885, 888, 889, 892, 918], "wa": [0, 12, 15, 67, 68, 157, 170, 172, 552, 623, 820, 833, 876, 881, 884, 885, 888, 889, 892, 893, 896, 897, 900, 901, 904, 905, 908, 909, 910, 913, 914, 917], "last": [0, 12, 16, 64, 67, 68, 125, 135, 151, 157, 161, 187, 198, 203, 265, 284, 657, 667, 670, 674, 676, 680, 682, 696, 698, 728, 730, 731, 733, 740, 746, 749, 751, 754, 756, 774, 777, 790, 793, 795, 800, 803, 865, 866, 869, 871, 874, 909, 910, 913, 914, 917], "henc": [0, 12, 860, 861, 862, 864], "here": [0, 12, 150, 151, 152, 155, 157, 164, 168, 170, 171, 172, 173, 174, 175, 186, 187], "tensor": [0, 12, 14, 67, 68, 125, 133, 135, 155, 160, 161, 163, 165, 166, 167, 168, 170, 172, 173, 174, 175, 187, 209, 218, 219, 228, 246, 315, 353, 356, 482, 483, 552, 605, 608, 609, 657, 665, 667, 670, 725, 727, 756, 770, 773, 786, 789, 795, 843, 844, 855, 858, 918], "howev": [0, 12, 15, 150, 152, 156, 159, 160, 161, 163, 164, 165, 166, 167, 168, 172, 173, 174, 175, 187], "befor": [0, 12, 67, 68, 150, 151, 152, 156, 159, 163, 165, 166, 167, 170, 173, 187, 265, 309, 315, 548, 551, 657, 668, 669, 816, 817, 818, 820, 832, 860, 861, 862, 864, 876, 893, 896, 901, 904], "becom": [0, 12, 14, 16, 151, 157, 164, 170, 175, 187, 756, 757, 760], "swap": [0, 12, 756, 804, 807], "python": [0, 12, 13, 14, 15, 150, 151, 153, 170, 172, 173, 187, 209, 210, 265, 304, 314, 315, 505, 508, 918, 924], "framework": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 14, 15, 16, 20, 21, 22, 23, 24, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 66, 67, 68, 70, 71, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99, 101, 103, 105, 107, 109, 112, 113, 114, 115, 117, 118, 119, 120, 121, 122, 123, 124, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 138, 140, 141, 142, 143, 144, 145, 146, 148, 154, 158, 160, 161, 162, 163, 166, 168, 169, 172, 175, 186, 187, 189, 190, 191, 192, 193, 194, 195, 196, 199, 200, 201, 202, 203, 204, 205, 206, 207, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 817, 818, 819, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 839, 840, 841, 842, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 856, 857, 858, 859, 861, 862, 863, 864, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 910, 911, 912, 913, 914, 915, 916, 917, 918, 922, 923, 924, 925, 927], "op": [0, 12, 155, 170, 187], "eagertensor": [0, 12], "def": [1, 117, 120, 123, 152, 155, 157, 160, 164, 165, 166, 167, 168, 170, 172, 173, 174, 175, 229, 230, 231, 266, 273, 276, 627, 918], "support": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 14, 15, 16, 20, 22, 23, 24, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 66, 67, 68, 70, 71, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99, 101, 103, 105, 107, 109, 112, 113, 115, 117, 118, 119, 120, 121, 122, 123, 124, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 138, 140, 141, 142, 143, 144, 145, 146, 148, 156, 157, 160, 162, 163, 164, 165, 166, 167, 168, 169, 170, 172, 173, 175, 189, 190, 191, 192, 193, 194, 195, 196, 199, 200, 201, 202, 203, 204, 205, 207, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 817, 818, 819, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 839, 840, 841, 842, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 856, 857, 858, 859, 861, 862, 863, 864, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 910, 911, 912, 913, 914, 915, 916, 917, 918, 922, 923, 924, 925, 927], "backend": [4, 5, 6, 12, 14, 21, 23, 25, 67, 68, 114, 115, 141, 142, 143, 144, 145, 146, 151, 152, 154, 156, 158, 159, 160, 162, 163, 164, 165, 166, 167, 168, 171, 172, 175, 228, 249, 250, 252, 264, 265, 300, 302, 312, 552, 593, 596, 597, 603, 626, 629, 631, 634, 636, 639, 641, 643, 645, 647, 649, 655, 918, 924], "ml": [13, 15, 16, 149, 169, 170, 171, 173, 174, 175, 186, 918, 924], "explos": [13, 15, 918], "A": [13, 14, 15, 16, 67, 68, 69, 70, 71, 147, 148, 153, 154, 159, 160, 164, 165, 166, 170, 173, 187, 209, 214, 221, 265, 274, 275, 309, 315, 497, 500, 552, 588, 620, 670, 706, 708, 715, 716, 718, 719, 721, 756, 795, 800, 803, 820, 821, 823, 825, 827, 828, 829, 830, 831, 834, 835, 836, 837, 876, 877, 880, 909, 910, 913, 914, 917, 918], "huge": [13, 15, 173, 918], "number": [13, 14, 67, 68, 69, 70, 71, 125, 126, 127, 128, 129, 130, 131, 132, 134, 135, 136, 150, 157, 164, 166, 167, 170, 173, 175, 206, 207, 208, 209, 210, 211, 214, 218, 219, 220, 221, 228, 235, 247, 248, 251, 253, 254, 256, 265, 301, 302, 303, 315, 328, 331, 345, 348, 377, 380, 410, 413, 414, 417, 482, 483, 484, 487, 501, 504, 505, 508, 509, 512, 513, 516, 548, 551, 552, 553, 556, 579, 588, 589, 604, 622, 625, 657, 668, 670, 683, 685, 700, 702, 715, 719, 721, 731, 733, 756, 757, 760, 766, 769, 778, 781, 782, 785, 790, 793, 795, 800, 803, 808, 811, 812, 815, 816, 817, 818, 819, 843, 844, 853, 855, 858, 860, 861, 862, 876, 881, 884, 885, 888, 889, 892, 893, 896, 897, 900, 901, 904, 905, 908, 909, 910, 913, 914, 917, 918], "tool": [13, 16, 151, 171, 175, 186, 187, 918], "have": [13, 14, 15, 16, 67, 68, 150, 151, 152, 153, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 186, 187, 198, 201, 209, 210, 212, 213, 216, 217, 220, 222, 223, 224, 225, 226, 227, 228, 234, 235, 236, 248, 265, 310, 315, 316, 319, 320, 323, 324, 327, 328, 331, 333, 336, 337, 340, 341, 344, 345, 348, 349, 352, 353, 356, 357, 360, 361, 364, 365, 368, 369, 372, 373, 376, 377, 380, 381, 384, 385, 388, 389, 392, 394, 397, 402, 405, 406, 409, 410, 413, 414, 417, 418, 421, 422, 425, 426, 429, 430, 433, 434, 437, 438, 441, 442, 445, 446, 449, 450, 453, 454, 457, 458, 461, 462, 465, 466, 469, 470, 473, 474, 477, 478, 481, 484, 487, 489, 492, 493, 496, 501, 504, 505, 508, 509, 512, 513, 516, 517, 520, 521, 524, 525, 528, 529, 532, 533, 537, 538, 542, 543, 547, 548, 551, 552, 565, 567, 574, 575, 576, 578, 626, 638, 655, 657, 669, 670, 671, 673, 674, 676, 677, 679, 680, 682, 683, 685, 686, 688, 689, 691, 692, 695, 700, 702, 703, 705, 706, 708, 709, 711, 712, 714, 716, 718, 719, 721, 722, 724, 725, 727, 728, 730, 731, 733, 734, 736, 740, 741, 744, 746, 749, 751, 754, 756, 757, 760, 762, 765, 770, 773, 774, 777, 778, 781, 782, 785, 790, 793, 796, 799, 800, 803, 804, 807, 843, 845, 846, 854, 855, 856, 857, 858, 860, 861, 862, 864, 865, 866, 869, 871, 874, 876, 881, 884, 885, 888, 889, 892, 893, 896, 897, 900, 901, 904, 905, 908, 909, 910, 913, 914, 917, 918], "explod": [13, 14, 918], "onto": [13, 14, 265, 294, 295, 820, 826, 832, 918], "scene": [13, 14, 154, 169, 171, 626, 629, 631, 634, 636, 639, 641, 643, 645, 647, 649, 918], "b": [13, 16, 69, 70, 74, 75, 78, 79, 80, 81, 92, 93, 96, 97, 149, 154, 157, 160, 161, 164, 169, 170, 171, 173, 174, 175, 185, 228, 237, 239, 240, 241, 265, 287, 315, 328, 330, 331, 332, 333, 336, 353, 356, 373, 376, 377, 379, 380, 385, 388, 410, 412, 413, 422, 425, 489, 492, 493, 496, 509, 512, 525, 528, 529, 532, 538, 539, 541, 542, 543, 544, 546, 547, 552, 553, 555, 556, 557, 560, 561, 569, 570, 577, 580, 581, 583, 584, 585, 622, 657, 660, 663, 664, 669, 670, 671, 673, 674, 676, 677, 679, 706, 708, 716, 718, 725, 727, 737, 739, 740, 741, 744, 756, 757, 759, 760, 761, 770, 773, 774, 777, 782, 785, 790, 792, 793, 794, 800, 803, 804, 807, 838, 839, 842, 843, 845, 847, 848, 849, 851, 855, 857, 858, 859, 865, 866, 869, 876, 877, 880, 881, 884, 909, 910, 913, 918, 924], "why": [13, 15, 151, 164, 167, 168, 172, 918], "unifi": [13, 15, 67, 68, 163, 170, 187, 265, 294, 295, 296, 297, 309, 918], "should": [13, 15, 18, 64, 67, 68, 69, 70, 71, 108, 109, 150, 151, 152, 153, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 172, 173, 174, 206, 207, 209, 220, 224, 225, 228, 236, 265, 315, 316, 319, 320, 323, 324, 327, 328, 331, 333, 336, 337, 340, 341, 344, 345, 348, 349, 352, 353, 356, 357, 360, 361, 364, 365, 368, 369, 372, 373, 376, 377, 380, 381, 384, 385, 388, 389, 392, 402, 405, 406, 409, 410, 413, 426, 429, 430, 433, 434, 437, 438, 441, 446, 449, 450, 453, 458, 461, 462, 465, 466, 469, 470, 473, 474, 477, 478, 481, 484, 487, 493, 496, 501, 504, 505, 508, 513, 516, 517, 520, 521, 524, 525, 528, 529, 532, 533, 537, 538, 542, 543, 547, 548, 551, 552, 563, 596, 605, 626, 629, 631, 634, 636, 639, 641, 643, 645, 647, 649, 657, 669, 670, 671, 673, 674, 676, 677, 679, 680, 682, 689, 691, 692, 695, 700, 702, 706, 708, 709, 711, 712, 714, 716, 718, 719, 721, 725, 727, 728, 730, 731, 733, 734, 736, 756, 786, 789, 843, 854, 855, 856, 857, 860, 861, 862, 864, 876, 877, 880, 881, 884, 885, 888, 893, 896, 897, 900, 901, 904, 905, 908, 918], "them": [13, 14, 15, 16, 159, 161, 163, 164, 170, 172, 173, 174, 187, 918], "c": [13, 15, 16, 96, 97, 149, 154, 157, 160, 164, 169, 170, 171, 173, 187, 315, 493, 496, 552, 560, 561, 569, 622, 626, 628, 629, 631, 634, 636, 639, 641, 643, 645, 647, 649, 657, 663, 756, 800, 803, 845, 847, 855, 858, 876, 877, 880, 897, 900, 905, 908, 918, 924], "standard": [13, 18, 139, 140, 154, 155, 156, 158, 159, 163, 167, 168, 187, 209, 220, 228, 237, 240, 248, 315, 328, 331, 333, 336, 353, 356, 373, 376, 377, 380, 385, 388, 410, 413, 493, 496, 509, 512, 525, 528, 529, 532, 538, 542, 543, 547, 670, 677, 679, 756, 770, 773, 774, 777, 790, 793, 838, 839, 842, 843, 848, 860, 861, 862, 865, 866, 869, 876, 881, 884, 897, 900, 905, 908, 909, 910, 913, 918, 924], "re": [13, 14, 15, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 172, 175, 187, 265, 309, 552, 574, 670, 725, 727, 756, 790, 793, 855, 859, 918], "collabor": [13, 14, 15, 918], "consortium": [13, 15, 918, 924], "data": [13, 15, 67, 68, 69, 70, 71, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 154, 155, 156, 160, 162, 164, 166, 167, 168, 172, 209, 210, 211, 212, 213, 214, 215, 216, 217, 220, 221, 222, 223, 224, 225, 226, 227, 232, 233, 234, 236, 237, 240, 242, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 260, 264, 265, 267, 268, 269, 270, 271, 272, 277, 278, 279, 281, 315, 316, 319, 320, 323, 324, 327, 328, 331, 333, 336, 337, 340, 341, 344, 345, 348, 349, 352, 353, 356, 357, 360, 361, 364, 365, 368, 369, 372, 373, 376, 377, 380, 381, 384, 385, 388, 389, 392, 394, 397, 402, 405, 406, 409, 410, 413, 414, 417, 418, 421, 422, 425, 426, 429, 430, 433, 434, 437, 438, 441, 442, 445, 446, 449, 450, 453, 458, 461, 462, 465, 466, 469, 470, 473, 474, 477, 478, 481, 484, 487, 493, 496, 501, 504, 505, 508, 513, 516, 517, 520, 521, 524, 525, 528, 529, 532, 533, 537, 538, 542, 543, 547, 548, 551, 552, 560, 561, 598, 599, 601, 618, 626, 638, 655, 657, 666, 670, 671, 673, 674, 676, 677, 679, 680, 682, 683, 685, 686, 688, 689, 691, 692, 695, 700, 702, 703, 705, 706, 708, 709, 711, 712, 714, 716, 718, 719, 721, 725, 727, 728, 730, 731, 733, 734, 736, 756, 770, 773, 774, 777, 778, 781, 786, 789, 790, 793, 796, 799, 800, 803, 843, 854, 855, 856, 857, 858, 865, 866, 869, 876, 881, 884, 885, 888, 889, 892, 893, 896, 897, 900, 901, 904, 905, 908, 909, 910, 913, 914, 917, 918, 924], "api": [13, 14, 150, 151, 154, 156, 157, 159, 160, 162, 163, 165, 166, 167, 168, 169, 171, 173, 187, 209, 220, 228, 237, 240, 315, 328, 331, 333, 336, 353, 356, 373, 376, 377, 380, 385, 388, 410, 413, 493, 496, 509, 512, 525, 528, 529, 532, 538, 542, 543, 547, 670, 677, 679, 756, 770, 773, 774, 777, 790, 793, 860, 861, 862, 865, 866, 869, 876, 881, 884, 909, 910, 913, 918, 924], "open": [14, 15, 16, 149, 150, 153, 156, 186, 209, 210, 843, 845, 846, 849, 851, 918], "project": [14, 15, 16, 150, 151, 153, 155, 161, 172, 174, 186, 187, 843, 844, 848, 849, 851], "grown": 14, "consider": [14, 157, 168], "recent": [14, 15, 150, 151], "year": [14, 16, 187, 918], "especi": [14, 150], "deep": [14, 67, 68, 149, 151, 152, 169, 173, 918], "learn": [14, 15, 141, 142, 143, 144, 145, 146, 150, 152, 154, 160, 169, 175, 186, 315, 418, 421, 626, 629, 631, 634, 636, 639, 641, 643, 645, 647, 649, 816, 817, 818, 819, 918], "can": [14, 15, 16, 18, 64, 149, 150, 151, 154, 155, 156, 157, 158, 159, 160, 161, 164, 165, 166, 167, 168, 169, 170, 172, 173, 174, 175, 186, 187, 209, 211, 221, 228, 237, 240, 265, 307, 308, 309, 670, 689, 691, 756, 786, 789, 843, 845, 846, 918, 924], "seen": [14, 15, 157, 172, 173], "rapidli": 14, "increas": [14, 265, 289, 293, 297, 756, 766, 769, 812, 815, 820, 832], "github": [14, 151, 152, 156, 159], "repo": [14, 15, 16, 150, 151, 158, 170, 172, 173, 174, 175, 186, 918, 924], "contain": [14, 21, 24, 25, 34, 35, 65, 66, 67, 68, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 125, 126, 127, 128, 129, 130, 131, 132, 134, 135, 136, 137, 138, 141, 145, 147, 148, 150, 151, 152, 153, 154, 156, 157, 159, 160, 165, 167, 168, 169, 170, 171, 174, 175, 187, 198, 201, 202, 204, 209, 210, 213, 215, 222, 224, 225, 226, 228, 237, 240, 265, 286, 287, 290, 299, 303, 315, 316, 319, 320, 323, 324, 327, 328, 331, 333, 336, 337, 340, 341, 344, 345, 348, 349, 352, 353, 356, 357, 360, 361, 364, 365, 368, 369, 372, 373, 376, 377, 380, 381, 384, 385, 388, 389, 392, 394, 397, 398, 402, 405, 406, 409, 410, 413, 414, 417, 418, 421, 422, 425, 426, 429, 430, 433, 434, 437, 438, 441, 442, 445, 446, 449, 450, 453, 454, 457, 458, 461, 462, 465, 466, 469, 470, 473, 474, 477, 478, 481, 482, 483, 484, 487, 489, 492, 493, 496, 497, 501, 504, 505, 508, 509, 512, 513, 516, 517, 520, 521, 524, 525, 528, 529, 532, 533, 537, 538, 542, 543, 547, 548, 551, 552, 553, 554, 556, 558, 561, 564, 565, 567, 569, 570, 577, 580, 581, 584, 591, 600, 620, 621, 622, 629, 634, 639, 643, 647, 657, 660, 663, 664, 669, 670, 671, 673, 674, 676, 677, 679, 680, 682, 683, 685, 686, 688, 689, 691, 692, 695, 700, 702, 703, 705, 706, 708, 709, 711, 712, 714, 716, 718, 719, 721, 722, 724, 725, 727, 728, 730, 731, 733, 734, 736, 740, 741, 744, 746, 749, 751, 754, 756, 757, 760, 762, 766, 770, 773, 774, 777, 778, 781, 782, 785, 786, 790, 793, 795, 796, 800, 804, 807, 808, 812, 816, 817, 818, 819, 820, 833, 838, 839, 842, 843, 844, 845, 848, 849, 851, 855, 856, 857, 858, 859, 860, 861, 862, 864, 865, 866, 869, 871, 876, 877, 880, 881, 884, 885, 888, 889, 892, 893, 896, 897, 900, 901, 904, 905, 908, 909, 910, 913, 914, 917, 918], "term": [14, 125, 135, 151, 164, 657, 667], "time": [14, 15, 16, 125, 136, 137, 138, 150, 151, 152, 159, 160, 164, 165, 168, 170, 173, 175, 187, 626, 629, 631, 639, 641, 657, 667, 756, 808, 811, 816, 817, 818, 819, 855, 856, 857, 860, 861, 862], "These": [14, 15, 16, 151, 156, 157, 159, 160, 164, 165, 167, 168, 170, 171, 173, 174, 175, 187, 670, 683, 685, 918, 924], "ar": [14, 15, 16, 21, 22, 23, 64, 67, 68, 69, 70, 71, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 186, 187, 188, 196, 209, 210, 265, 274, 275, 299, 303, 305, 309, 315, 381, 384, 470, 473, 474, 477, 509, 512, 517, 520, 538, 542, 552, 553, 556, 560, 561, 562, 586, 592, 593, 597, 604, 606, 618, 657, 666, 670, 674, 676, 692, 695, 696, 698, 700, 702, 709, 711, 719, 721, 722, 724, 731, 733, 756, 757, 760, 774, 777, 790, 793, 820, 822, 826, 832, 843, 848, 849, 851, 855, 856, 857, 858, 860, 861, 918], "written": [14, 150, 155, 156, 163, 167, 168, 170, 172, 175, 187], "mani": [14, 15, 16, 67, 68, 150, 151, 152, 156, 157, 160, 162, 163, 164, 165, 166, 167, 168, 170, 172, 173, 187, 756, 795], "differ": [14, 15, 16, 67, 68, 69, 70, 71, 150, 151, 154, 155, 156, 157, 159, 160, 163, 164, 166, 167, 168, 170, 171, 172, 173, 174, 175, 187, 228, 248, 265, 286, 287, 290, 291, 315, 328, 331, 484, 487, 533, 537, 657, 666, 756, 800, 803, 876, 893, 896, 901, 904, 918], "while": [14, 15, 67, 68, 69, 70, 71, 150, 151, 157, 161, 167, 174, 175, 187, 315, 470, 473, 474, 477, 860, 861, 876, 885, 888], "thi": [14, 15, 16, 18, 28, 29, 32, 33, 34, 35, 46, 47, 64, 67, 68, 69, 70, 71, 74, 75, 78, 79, 80, 81, 92, 93, 96, 97, 137, 138, 141, 142, 143, 144, 145, 146, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 186, 187, 209, 210, 211, 220, 221, 228, 237, 238, 239, 240, 241, 265, 289, 293, 297, 304, 309, 314, 315, 316, 317, 319, 328, 329, 330, 331, 332, 333, 336, 353, 356, 369, 372, 373, 376, 377, 378, 379, 380, 385, 388, 406, 409, 410, 411, 412, 413, 470, 473, 474, 477, 493, 496, 505, 508, 509, 512, 525, 528, 529, 532, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 552, 553, 554, 555, 557, 579, 580, 581, 582, 583, 585, 596, 607, 612, 626, 629, 631, 634, 636, 638, 639, 641, 643, 645, 647, 649, 655, 657, 660, 666, 669, 670, 677, 679, 696, 698, 715, 756, 757, 758, 759, 761, 770, 773, 774, 777, 786, 789, 790, 791, 792, 793, 794, 800, 803, 820, 826, 832, 833, 838, 839, 842, 845, 847, 855, 856, 860, 861, 862, 864, 865, 866, 869, 876, 881, 884, 885, 888, 897, 900, 905, 908, 909, 910, 913, 918, 924], "wonder": [14, 16, 172], "thing": [14, 15, 16, 150, 151, 152, 161, 172, 173], "research": [14, 186], "develop": [14, 15, 16, 149, 150, 151, 152, 186, 187, 918], "also": [14, 15, 21, 22, 23, 24, 25, 28, 29, 32, 33, 34, 35, 46, 47, 67, 68, 74, 75, 78, 79, 80, 81, 92, 93, 96, 97, 125, 135, 149, 150, 151, 154, 155, 156, 157, 159, 160, 162, 163, 164, 165, 166, 167, 168, 170, 172, 173, 174, 175, 186, 187, 209, 220, 228, 237, 238, 239, 240, 241, 315, 316, 317, 328, 329, 330, 331, 332, 333, 336, 353, 356, 373, 376, 377, 378, 379, 380, 385, 388, 410, 411, 412, 413, 493, 496, 509, 512, 525, 528, 529, 532, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 552, 553, 554, 555, 557, 580, 581, 582, 583, 585, 596, 626, 629, 631, 657, 660, 666, 669, 670, 677, 679, 756, 757, 758, 759, 761, 770, 773, 774, 777, 790, 791, 792, 793, 794, 816, 817, 818, 819, 820, 821, 822, 830, 831, 832, 838, 839, 842, 845, 847, 860, 861, 862, 865, 866, 869, 876, 881, 884, 909, 910, 913], "consid": [14, 15, 67, 68, 155, 160, 171, 172, 173, 315, 470, 473, 474, 477, 860, 861, 862, 864], "speed": 14, "evolv": 14, "sharabl": 14, "code": [14, 15, 16, 67, 68, 69, 70, 71, 150, 151, 152, 153, 154, 156, 157, 160, 161, 162, 163, 164, 167, 168, 169, 170, 171, 172, 173, 174, 175, 185, 187, 198, 200, 201, 202, 203, 204, 205, 265, 287, 310, 315, 373, 376, 529, 532, 657, 663, 664, 860, 861, 862, 865, 866, 869, 876, 877, 880, 918, 924], "significantli": 14, "hinder": [14, 168], "librari": [14, 15, 16, 170, 175, 185, 187, 265, 310, 315, 406, 409, 470, 473, 474, 477, 670, 683, 685, 860, 861, 862, 864, 876, 881, 884, 885, 888, 889, 892, 918], "outdat": 14, "month": 14, "rigor": 14, "maintain": [14, 151, 865, 866, 869, 871, 874], "against": [14, 67, 68, 159, 187, 228, 235, 670, 692, 695, 696, 698, 700, 702, 709, 711, 855, 856], "newest": 14, "version": [14, 15, 16, 150, 156, 170, 172, 670, 683, 685, 918], "For": [14, 15, 16, 64, 114, 115, 150, 151, 152, 153, 154, 155, 156, 157, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 172, 173, 174, 175, 186, 187, 209, 210, 220, 315, 316, 319, 320, 323, 324, 327, 328, 331, 333, 336, 337, 340, 341, 344, 345, 348, 377, 380, 381, 384, 385, 388, 402, 405, 406, 409, 410, 413, 446, 449, 450, 453, 458, 461, 462, 465, 484, 487, 501, 504, 505, 508, 509, 512, 517, 520, 521, 524, 525, 528, 538, 542, 543, 547, 548, 551, 626, 638, 655, 670, 719, 721, 728, 730, 756, 757, 760, 800, 803, 860, 861, 862, 864, 876, 881, 884, 889, 892, 901, 904], "softwar": [14, 15, 150, 151], "pipelin": [14, 163, 175], "where": [14, 15, 16, 67, 68, 69, 70, 149, 150, 151, 152, 153, 156, 160, 161, 163, 164, 165, 166, 167, 170, 173, 174, 175, 187, 209, 216, 217, 220, 315, 345, 348, 402, 405, 454, 457, 484, 487, 501, 504, 552, 592, 596, 605, 670, 683, 685, 700, 702, 709, 711, 712, 714, 719, 721, 722, 724, 728, 730, 731, 733, 756, 757, 760, 766, 769, 770, 773, 778, 781, 800, 803, 812, 815, 820, 821, 831, 843, 844, 855, 858, 876, 897, 900, 905, 908, 909, 910, 913, 914, 917, 918], "rapid": [14, 15, 150], "prototyp": 14, "vital": [14, 175], "signific": [14, 15, 187], "bottleneck": 14, "As": [14, 62, 63, 108, 109, 151, 159, 160, 163, 164, 165, 166, 167, 168, 170, 172, 173, 174, 187, 860, 861, 862, 864], "new": [14, 15, 16, 18, 64, 67, 68, 114, 115, 125, 135, 139, 140, 141, 142, 143, 144, 145, 146, 149, 150, 151, 152, 153, 154, 155, 156, 157, 159, 162, 164, 165, 167, 169, 172, 175, 186, 209, 212, 215, 216, 217, 222, 223, 226, 227, 228, 260, 315, 349, 352, 454, 457, 497, 500, 552, 574, 575, 576, 579, 580, 581, 584, 608, 609, 610, 611, 616, 617, 626, 629, 631, 634, 636, 639, 641, 643, 645, 647, 649, 756, 770, 773, 786, 789, 800, 803, 820, 825, 836, 837, 838, 839, 842, 918], "futur": [14, 16, 150, 151, 172, 187, 670, 683, 685], "avail": [14, 67, 68, 150, 151, 156, 166, 187, 265, 284, 300, 301, 302, 312, 552, 575], "specif": [14, 67, 68, 137, 138, 152, 160, 163, 164, 165, 166, 167, 168, 170, 171, 172, 174, 175, 186, 187, 228, 256, 265, 307, 310, 315, 470, 473, 474, 477, 552, 574, 575, 576, 603, 670, 683, 685, 725, 727, 756, 800, 803, 816, 817, 818, 819, 843, 844, 876, 881, 884, 885, 888, 889, 892, 918, 921, 923, 924], "quickli": [14, 16, 150, 151, 173, 174], "obsolet": [14, 16], "user": [14, 15, 125, 136, 137, 138, 150, 151, 153, 154, 159, 161, 164, 167, 169, 187], "constantli": 14, "invent": 14, "wheel": 14, "our": [14, 15, 62, 63, 108, 109, 149, 150, 151, 157, 164, 169, 172, 173, 174, 175, 187, 918], "desir": [14, 67, 68, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 228, 234, 237, 240, 265, 310, 552, 592], "provid": [14, 18, 64, 67, 68, 125, 126, 127, 128, 129, 130, 131, 132, 134, 135, 136, 141, 142, 143, 144, 145, 146, 150, 151, 156, 157, 160, 163, 164, 165, 166, 167, 168, 170, 174, 186, 187, 206, 207, 209, 220, 228, 243, 244, 245, 252, 256, 264, 265, 284, 552, 573, 605, 609, 626, 629, 631, 634, 636, 639, 641, 643, 645, 647, 649, 670, 731, 733, 756, 774, 777, 800, 803, 855, 856, 876, 897, 900, 905, 908, 909, 910, 913, 914, 917], "simultan": [14, 16], "all": [14, 15, 16, 21, 22, 23, 24, 25, 60, 61, 62, 63, 64, 67, 68, 106, 107, 108, 109, 149, 150, 151, 152, 153, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 172, 173, 174, 175, 186, 187, 188, 196, 206, 207, 209, 210, 224, 225, 265, 274, 299, 305, 552, 553, 556, 560, 561, 586, 606, 621, 657, 667, 670, 716, 718, 725, 727, 734, 736, 756, 774, 777, 790, 793, 816, 817, 818, 819, 820, 821, 822, 831, 832, 833, 843, 844, 849, 851, 909, 918, 921, 923], "modern": [14, 15], "simpl": [14, 150, 151, 155, 156, 157, 159, 160, 163, 164, 165, 166, 167, 170, 172, 174, 175, 187, 552, 577], "scalabl": [14, 170], "manner": [14, 21, 24, 25, 67, 68, 155, 156, 166, 173, 186, 187, 820, 832], "must": [14, 16, 67, 68, 69, 70, 71, 141, 145, 150, 151, 152, 155, 156, 157, 160, 163, 164, 165, 166, 168, 170, 174, 175, 198, 201, 209, 210, 212, 213, 214, 216, 217, 220, 222, 223, 224, 225, 226, 227, 228, 234, 235, 236, 265, 294, 295, 296, 297, 309, 310, 315, 316, 319, 320, 323, 324, 327, 328, 331, 333, 336, 337, 340, 341, 344, 345, 348, 349, 352, 353, 356, 357, 360, 361, 364, 365, 368, 369, 372, 373, 376, 377, 380, 381, 384, 385, 388, 389, 392, 394, 397, 402, 405, 406, 409, 410, 413, 414, 417, 418, 421, 422, 425, 426, 429, 430, 433, 434, 437, 438, 441, 442, 445, 446, 449, 450, 453, 454, 457, 458, 461, 462, 465, 466, 469, 470, 473, 474, 477, 478, 481, 482, 483, 484, 487, 489, 492, 493, 496, 501, 504, 505, 508, 509, 512, 513, 516, 517, 520, 521, 524, 525, 528, 529, 532, 533, 537, 538, 542, 543, 547, 548, 551, 552, 565, 567, 578, 609, 670, 671, 673, 674, 676, 677, 679, 680, 682, 683, 685, 686, 688, 689, 691, 692, 695, 700, 702, 703, 705, 706, 708, 709, 711, 712, 714, 716, 718, 719, 721, 725, 727, 728, 730, 731, 733, 734, 736, 740, 741, 744, 746, 749, 751, 754, 756, 757, 760, 762, 765, 770, 773, 774, 777, 778, 781, 782, 785, 790, 793, 796, 799, 800, 803, 804, 807, 843, 845, 846, 853, 855, 856, 857, 858, 860, 861, 862, 864, 865, 866, 869, 871, 874, 876, 881, 884, 885, 888, 889, 892, 893, 896, 897, 900, 901, 904, 905, 908, 909, 910, 913, 914, 917], "determin": [14, 67, 68, 156, 160, 164, 165, 166, 228, 237, 240, 242, 247, 252, 253, 254, 264, 265, 300, 301, 302, 312, 315, 320, 323, 324, 327, 328, 331, 333, 336, 337, 340, 341, 344, 345, 348, 349, 352, 353, 356, 361, 364, 365, 368, 369, 372, 373, 376, 381, 384, 385, 388, 389, 392, 402, 405, 406, 409, 426, 429, 430, 433, 434, 437, 446, 449, 450, 453, 458, 461, 462, 465, 478, 481, 484, 487, 501, 504, 505, 508, 517, 520, 521, 524, 525, 528, 538, 542, 543, 547, 552, 553, 556, 560, 561, 591, 593, 597, 598, 599, 600, 601, 618, 625, 626, 638, 657, 668, 670, 671, 673, 674, 676, 677, 679, 680, 682, 689, 691, 692, 695, 700, 702, 706, 708, 709, 711, 715, 716, 718, 728, 730, 731, 733, 734, 736, 816, 817, 818, 819, 860, 861, 862, 864, 909, 910, 913, 914, 917], "exactli": [14, 16, 157, 164, 166, 918, 924], "common": [14, 67, 68, 151, 152, 157, 160, 162, 164, 166, 187], "ground": [14, 159], "li": 14, "between": [14, 67, 68, 69, 70, 71, 141, 143, 157, 159, 160, 163, 164, 168, 169, 171, 172, 173, 175, 186, 209, 210, 228, 248, 315, 345, 348, 501, 504, 740, 741, 744, 746, 749, 751, 754, 756, 770, 773, 800, 803, 820, 826, 843, 845, 846, 860, 861, 862, 864, 918], "find": [14, 67, 68, 150, 151, 170, 173, 860, 861, 862, 864, 918], "exist": [14, 15, 67, 68, 69, 70, 141, 145, 150, 152, 153, 156, 157, 158, 159, 160, 161, 162, 167, 170, 187, 552, 573], "essenti": [14, 15, 152, 157, 160, 166], "order": [14, 64, 67, 68, 69, 70, 71, 147, 148, 150, 151, 153, 156, 157, 161, 163, 164, 165, 166, 168, 172, 173, 175, 187, 315, 345, 348, 626, 629, 631, 634, 636, 639, 641, 643, 645, 647, 649, 670, 683, 685, 696, 698, 719, 721, 722, 724, 734, 736, 756, 774, 777, 816, 817, 818, 855, 858, 860, 861, 862, 864, 865, 866, 869, 871, 874], "design": [14, 15, 154, 167, 170, 172, 187], "univers": 14, "abstract": [14, 18, 64, 141, 145, 164, 174, 187, 265, 280], "In": [14, 16, 64, 150, 151, 155, 156, 157, 160, 161, 164, 165, 166, 167, 168, 170, 172, 173, 174, 175, 186, 187, 265, 304, 310, 311, 314, 315, 328, 331, 484, 487, 505, 508, 552, 558, 596, 756, 786, 789, 843, 849, 851, 918], "search": [14, 21, 24, 25, 53, 67, 68, 99, 150, 155, 157, 159, 856, 857, 858, 859], "languag": [14, 16, 170], "first": [14, 15, 64, 125, 136, 137, 138, 141, 145, 150, 151, 153, 157, 160, 163, 164, 168, 170, 172, 173, 175, 206, 207, 209, 218, 219, 228, 255, 260, 265, 284, 296, 315, 328, 331, 353, 356, 361, 364, 365, 368, 369, 372, 373, 376, 394, 397, 414, 417, 422, 425, 438, 441, 442, 445, 462, 465, 466, 469, 474, 477, 478, 481, 484, 487, 493, 496, 501, 504, 533, 537, 552, 560, 626, 633, 670, 674, 676, 680, 682, 683, 685, 692, 695, 706, 708, 712, 714, 719, 721, 725, 727, 731, 733, 756, 762, 765, 790, 793, 800, 803, 804, 807, 816, 817, 818, 819, 820, 821, 830, 831, 843, 854, 855, 856, 857, 860, 861, 862], "see": [14, 18, 64, 149, 150, 151, 152, 158, 160, 164, 166, 168, 172, 173, 186, 187, 209, 210, 215, 218, 219, 228, 236, 256, 315, 328, 331, 353, 356, 361, 364, 365, 368, 369, 372, 373, 376, 389, 392, 406, 409, 438, 441, 462, 465, 474, 477, 478, 481, 484, 487, 493, 496, 501, 504, 505, 508, 533, 537, 670, 700, 702, 709, 711, 716, 718, 731, 733, 734, 736, 855, 857, 860, 861, 862, 864, 876, 881, 884, 885, 888, 889, 892, 893, 896, 897, 900, 901, 904, 905, 908, 909, 910, 913, 914, 917, 918], "clear": [14, 15, 16, 64, 151, 152, 157, 159, 165, 166, 170, 172, 265, 283], "front": [14, 169, 170, 173, 918, 924], "runner": 14, "look": [14, 150, 151, 153, 155, 157, 160, 161, 164, 165, 166, 168, 170, 172, 174, 175, 918], "littl": [14, 172], "deeper": [14, 151, 154, 169, 265, 289, 293, 297, 820, 831, 832], "follow": [14, 15, 64, 67, 68, 125, 135, 141, 145, 150, 151, 152, 153, 155, 156, 157, 159, 161, 163, 164, 165, 166, 167, 169, 170, 172, 173, 174, 175, 187, 228, 251, 265, 309, 315, 505, 508, 552, 594, 595, 596, 616, 617, 626, 629, 631, 634, 636, 639, 641, 643, 645, 647, 649, 657, 668, 669, 670, 712, 714, 734, 736, 820, 826, 832, 860, 861, 862, 864, 918], "same": [14, 16, 21, 22, 23, 67, 68, 125, 126, 127, 128, 129, 130, 131, 132, 150, 151, 153, 155, 157, 159, 160, 163, 164, 166, 167, 168, 170, 172, 174, 175, 209, 210, 213, 217, 220, 223, 224, 225, 227, 228, 234, 235, 236, 265, 274, 275, 309, 315, 316, 319, 328, 331, 357, 360, 377, 380, 410, 413, 484, 487, 505, 508, 509, 512, 513, 516, 548, 551, 552, 578, 580, 581, 584, 605, 608, 609, 626, 638, 652, 657, 658, 659, 660, 661, 662, 663, 664, 669, 670, 671, 673, 674, 676, 677, 679, 680, 682, 683, 685, 686, 688, 689, 691, 703, 705, 709, 711, 712, 714, 716, 718, 719, 721, 728, 730, 731, 733, 756, 762, 765, 774, 777, 778, 781, 790, 793, 796, 799, 800, 803, 816, 817, 818, 820, 833, 860, 861, 862, 864, 865, 866, 869, 871, 874, 876, 877, 880, 881, 884, 885, 888, 889, 892, 893, 896, 901, 904, 905, 908, 918], "core": [14, 150, 152, 166, 170, 175, 265, 301, 918], "principl": 14, "oper": [14, 67, 68, 69, 70, 150, 152, 156, 157, 160, 163, 164, 166, 167, 173, 174, 209, 218, 219, 228, 256, 315, 328, 331, 369, 372, 373, 376, 422, 425, 489, 492, 493, 496, 505, 508, 529, 532, 552, 562, 574, 575, 576, 618, 626, 629, 631, 634, 636, 639, 641, 643, 645, 647, 649, 657, 658, 659, 660, 661, 662, 663, 664, 666], "expos": [14, 170, 174, 552, 568], "almost": [14, 151, 164, 171, 173], "ident": [14, 16, 67, 68, 160, 162, 164, 172, 173, 187, 265, 299, 820, 833, 918], "uniqu": [14, 160, 164, 187, 265, 274, 275, 816, 817, 818, 819, 820, 826, 860, 861, 862, 863, 864], "syntax": [14, 15], "There": [14, 150, 151, 157, 160, 163, 164, 165, 170, 173, 187], "onli": [14, 67, 68, 141, 142, 143, 144, 145, 146, 149, 150, 151, 155, 157, 159, 160, 161, 163, 164, 165, 166, 167, 168, 170, 172, 173, 174, 175, 185, 187, 265, 305, 315, 470, 473, 474, 477, 670, 692, 695, 712, 714, 756, 774, 777, 820, 821, 822, 830, 831, 855, 856, 857, 876, 885, 888, 918], "so": [14, 15, 21, 24, 25, 28, 29, 32, 33, 34, 35, 46, 47, 67, 68, 74, 75, 78, 79, 80, 81, 92, 93, 96, 97, 150, 151, 155, 156, 157, 159, 162, 163, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 187, 188, 196, 237, 238, 239, 241, 316, 317, 328, 329, 330, 332, 377, 378, 379, 410, 411, 412, 538, 539, 540, 541, 543, 544, 545, 546, 553, 554, 555, 557, 581, 582, 583, 585, 757, 758, 759, 761, 790, 791, 792, 794, 820, 821, 831, 845, 847, 918], "wai": [14, 15, 18, 150, 161, 167, 172, 173, 174, 175, 187], "manipul": [14, 47, 93, 155, 175, 186, 757, 760, 762, 765, 766, 769, 770, 773, 774, 777, 778, 781, 782, 785, 786, 789, 790, 793, 795, 796, 799, 800, 803, 804, 807, 808, 811, 812, 815], "unsurprisingli": [14, 157], "fundament": [14, 164, 170], "consist": [14, 67, 68, 137, 138, 163, 167, 265, 297, 670, 683, 685, 876, 877, 880], "each": [14, 15, 16, 67, 68, 69, 70, 71, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 136, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 151, 152, 154, 155, 156, 157, 158, 159, 160, 162, 163, 164, 165, 167, 168, 169, 170, 172, 173, 175, 186, 187, 198, 201, 202, 204, 209, 220, 228, 235, 265, 274, 275, 286, 287, 288, 289, 290, 291, 292, 296, 309, 315, 316, 319, 320, 323, 324, 327, 328, 331, 333, 336, 337, 340, 341, 344, 345, 348, 349, 352, 353, 356, 357, 360, 361, 364, 365, 368, 369, 372, 373, 376, 377, 380, 381, 384, 385, 388, 389, 392, 394, 397, 402, 405, 406, 409, 410, 413, 414, 417, 418, 421, 422, 425, 426, 429, 430, 433, 434, 437, 438, 441, 442, 445, 446, 449, 450, 453, 454, 457, 458, 461, 462, 465, 466, 469, 470, 473, 474, 477, 478, 481, 484, 487, 489, 492, 493, 496, 497, 500, 501, 504, 505, 508, 509, 512, 513, 516, 517, 520, 521, 524, 525, 528, 529, 532, 533, 537, 538, 542, 543, 547, 548, 551, 552, 553, 556, 626, 629, 631, 634, 636, 639, 641, 643, 645, 647, 649, 657, 658, 659, 660, 661, 662, 663, 664, 665, 670, 671, 673, 674, 676, 677, 679, 683, 685, 692, 695, 700, 702, 703, 705, 709, 711, 716, 718, 719, 721, 756, 766, 769, 782, 785, 790, 793, 795, 800, 803, 808, 811, 812, 815, 820, 826, 833, 843, 844, 855, 858, 860, 861, 862, 876, 877, 880, 918, 924], "veri": [14, 15, 150, 151, 155, 157, 159, 160, 164, 166, 167, 168, 171, 173, 174, 175, 187, 918], "similar": [14, 125, 136, 155, 164, 165, 166, 173, 187, 315, 505, 508, 657, 668], "convent": [14, 186, 670, 692, 695, 876, 877, 880], "those": [14, 67, 68, 150, 151, 152, 164, 170, 175, 209, 210, 626, 655, 670, 712, 714, 719, 721, 756, 757, 760], "introduc": [14, 164, 173, 756, 790, 793, 860, 861], "2006": 14, "layer": [14, 41, 87, 116, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 145, 147, 148, 155, 156, 170, 171, 174, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 838, 839, 842, 918], "therefor": [14, 151, 155, 156, 157, 158, 159, 160, 163, 164, 165, 166, 167, 168, 170, 172, 174, 187, 228, 237, 240, 315, 328, 331, 333, 336, 377, 380, 410, 413, 493, 496, 525, 528, 529, 532, 538, 542, 552, 580, 657, 660, 669, 756, 790, 793, 838, 839, 842, 876, 881, 884, 909, 910, 913], "present": [14, 64, 67, 68, 151, 158, 164, 165, 166, 167, 168, 170], "itself": [14, 150, 151, 164, 167, 168, 174, 186, 187, 552, 558, 820, 832], "cut": 14, "cloth": 14, "adher": [14, 15, 156, 158, 170, 175], "semant": [14, 170, 175, 315, 505, 508], "round": [14, 15, 16, 32, 33, 78, 79, 150, 151, 152, 153, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 172, 173, 174, 175, 186, 315, 328, 331, 377, 380, 410, 413, 414, 417, 484, 487, 525, 528, 548, 551, 918], "up": [14, 15, 16, 149, 151, 152, 153, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 186, 187], "hopefulli": [14, 15, 16, 150, 151, 152, 153, 154, 155, 156, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 172, 173, 174, 175, 186], "paint": [14, 170], "pictur": [14, 170], "how": [14, 16, 125, 136, 137, 138, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 171, 172, 173, 174, 175, 186, 187, 918, 924], "pleas": [14, 15, 16, 150, 151, 152, 153, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 172, 173, 174, 175, 186, 918], "check": [14, 15, 16, 21, 22, 23, 24, 25, 67, 68, 150, 151, 164, 169, 170, 172, 173, 174, 175, 186, 228, 242, 249, 250, 252, 264, 265, 304, 314, 552, 562, 577, 591, 598, 599, 600, 601, 618, 625, 626, 638, 670, 683, 685, 820, 821, 830, 831, 832, 918], "out": [14, 15, 16, 32, 33, 34, 35, 42, 43, 44, 45, 46, 47, 48, 49, 56, 57, 58, 59, 60, 61, 64, 67, 68, 69, 70, 78, 79, 80, 81, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 102, 103, 104, 105, 106, 107, 125, 133, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 169, 170, 172, 173, 174, 175, 186, 198, 200, 201, 202, 203, 204, 205, 209, 210, 212, 213, 214, 216, 217, 222, 223, 224, 225, 226, 227, 228, 234, 236, 265, 310, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 564, 565, 566, 567, 569, 570, 571, 574, 575, 576, 578, 580, 581, 582, 583, 584, 585, 592, 605, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 854, 855, 856, 857, 859, 860, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918], "discuss": [14, 15, 16, 149, 150, 151, 152, 153, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 172, 173, 174, 175, 186, 187, 918], "faq": [14, 15, 16, 170, 172, 173, 174, 175, 186], "reach": [14, 15, 16, 150, 151, 152, 153, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 172, 173, 174, 175, 186, 265, 289, 293, 297, 820, 832], "discord": [14, 15, 16, 150, 151, 152, 153, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 172, 173, 174, 175, 186, 918], "you": [14, 15, 16, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 172, 173, 174, 175, 186, 187, 918, 924], "question": [14, 15, 16, 150, 151, 157, 159, 170, 172, 173, 174, 175, 186, 187, 918], "With": [15, 16, 34, 35, 67, 68, 69, 70, 78, 79, 80, 81, 92, 93, 96, 97, 150, 157, 159, 170, 198, 200, 201, 202, 203, 204, 205, 209, 220, 228, 237, 240, 265, 287, 303, 315, 328, 331, 332, 333, 336, 353, 356, 373, 376, 377, 380, 385, 388, 410, 413, 422, 425, 482, 483, 489, 492, 493, 496, 509, 512, 525, 528, 529, 532, 538, 539, 542, 543, 544, 547, 552, 553, 554, 555, 556, 557, 561, 569, 570, 577, 580, 581, 584, 585, 615, 620, 621, 622, 657, 660, 663, 664, 669, 670, 671, 673, 674, 676, 677, 679, 680, 682, 696, 698, 725, 727, 740, 741, 744, 751, 754, 756, 757, 760, 761, 770, 773, 774, 777, 782, 785, 790, 793, 794, 795, 804, 807, 838, 839, 842, 843, 844, 845, 847, 848, 849, 851, 855, 856, 857, 858, 859, 860, 861, 862, 865, 866, 869, 876, 877, 880, 909, 910, 913], "central": 15, "goal": [15, 152], "being": [15, 16, 67, 68, 150, 151, 157, 159, 162, 163, 164, 165, 166, 167, 168, 170, 173, 186, 187, 209, 210, 552, 607, 612, 860, 863, 918], "would": [15, 150, 151, 153, 154, 156, 157, 159, 161, 162, 163, 164, 167, 168, 169, 170, 172, 174, 175, 187, 198, 203, 265, 310, 918], "entir": [15, 16, 67, 68, 125, 134, 151, 157, 158, 159, 163, 164, 167, 172, 173, 174, 175, 187, 265, 309, 876, 881, 884, 885, 888, 889, 892, 893, 896, 897, 900, 901, 904, 905, 908, 909, 910, 913, 914, 917], "forgiven": 15, "rais": [15, 64, 67, 68, 137, 138, 141, 145, 151, 167, 170, 172, 228, 236, 315, 402, 405, 501, 504, 552, 562, 587, 596, 610, 617, 623, 670, 692, 695, 699, 731, 733, 756, 796, 799, 800, 803, 855, 858, 876, 881, 884, 889, 892, 909, 910, 913, 914, 917], "an": [15, 16, 18, 21, 24, 25, 62, 63, 64, 67, 68, 108, 109, 114, 115, 137, 138, 141, 142, 143, 145, 150, 151, 152, 153, 155, 156, 157, 159, 160, 161, 163, 164, 165, 166, 167, 168, 170, 172, 173, 174, 175, 186, 187, 198, 201, 202, 204, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 234, 235, 236, 237, 240, 248, 253, 254, 256, 265, 287, 291, 310, 315, 316, 319, 320, 323, 324, 327, 328, 331, 333, 336, 337, 340, 341, 344, 345, 348, 349, 352, 353, 356, 357, 360, 361, 364, 365, 368, 369, 372, 373, 376, 377, 380, 381, 384, 385, 388, 389, 392, 394, 397, 402, 405, 406, 409, 410, 413, 414, 417, 418, 421, 422, 425, 426, 429, 430, 433, 434, 437, 438, 441, 442, 445, 446, 449, 450, 453, 454, 457, 458, 461, 462, 465, 466, 469, 470, 473, 474, 477, 478, 481, 482, 483, 484, 487, 489, 492, 493, 496, 501, 504, 505, 508, 509, 512, 513, 516, 517, 520, 521, 524, 525, 528, 529, 532, 533, 537, 538, 542, 543, 547, 548, 551, 552, 563, 564, 565, 567, 569, 578, 579, 580, 592, 596, 598, 599, 600, 601, 621, 622, 623, 626, 638, 652, 654, 655, 657, 660, 669, 670, 671, 673, 674, 676, 677, 679, 680, 682, 683, 685, 686, 688, 689, 691, 692, 695, 699, 700, 702, 703, 705, 709, 711, 712, 714, 715, 716, 718, 719, 721, 728, 730, 731, 733, 734, 736, 756, 757, 760, 762, 765, 766, 769, 770, 773, 774, 777, 778, 781, 786, 789, 790, 793, 795, 796, 799, 800, 803, 804, 807, 808, 811, 812, 815, 820, 826, 838, 839, 842, 843, 845, 846, 854, 855, 858, 859, 860, 861, 862, 863, 864, 865, 866, 869, 871, 874, 876, 877, 880, 881, 884, 885, 888, 889, 892, 893, 896, 897, 900, 901, 904, 905, 908, 909, 910, 913, 914, 917, 918], "eyebrow": 15, "somehow": 15, "pytorch": [15, 16, 141, 142, 143, 144, 145, 146, 152, 160, 165, 166, 167, 168, 170, 172, 175, 187, 626, 629, 631, 634, 636, 639, 641, 643, 645, 647, 649, 918], "other": [15, 67, 68, 69, 70, 150, 151, 155, 156, 157, 159, 160, 163, 164, 167, 170, 172, 174, 175, 185, 186, 187, 206, 207, 209, 210, 315, 406, 409, 552, 553, 556, 558, 626, 633, 843, 849, 851, 860, 863, 876, 897, 900, 905, 908, 918], "strong": [15, 187], "industri": 15, "back": [15, 137, 138, 141, 145, 163, 169, 170, 172, 187, 918, 924], "momentum": 15, "won": [15, 16, 151, 175], "ad": [15, 108, 109, 147, 148, 150, 151, 152, 155, 156, 157, 159, 160, 162, 163, 164, 165, 167, 168, 170, 174, 187, 552, 616, 617, 670, 683, 685, 756, 770, 773], "just": [15, 16, 125, 134, 150, 151, 156, 157, 159, 160, 167, 170, 172, 173, 187, 876, 877, 880], "make": [15, 16, 150, 151, 152, 155, 156, 157, 158, 159, 160, 163, 164, 165, 166, 167, 168, 170, 172, 173, 175, 265], "problem": [15, 151, 163, 172], "even": [15, 16, 150, 151, 156, 160, 165, 166, 168, 172, 173, 174, 175, 187, 315, 501, 504, 509, 512], "wors": 15, "rather": [15, 67, 68, 155, 156, 159, 164, 175, 187, 209, 210, 265, 309, 552, 598, 599, 601, 626, 638], "funni": 15, "comic": 15, "strip": 15, "easi": [15, 150, 151, 160, 164], "feasibl": 15, "space": [15, 209, 210, 218, 219, 552, 579], "case": [15, 21, 24, 25, 64, 67, 68, 69, 70, 71, 125, 136, 137, 138, 141, 145, 150, 151, 152, 155, 156, 157, 160, 161, 163, 164, 165, 166, 167, 168, 170, 172, 174, 175, 187, 209, 220, 265, 304, 311, 314, 315, 316, 319, 320, 323, 324, 327, 328, 331, 333, 336, 337, 340, 341, 344, 345, 348, 373, 376, 377, 380, 381, 384, 385, 388, 402, 405, 406, 409, 410, 413, 446, 449, 450, 453, 458, 461, 462, 465, 484, 487, 501, 504, 505, 508, 509, 512, 513, 516, 517, 520, 521, 524, 525, 528, 538, 542, 543, 547, 548, 551, 552, 596, 608, 609, 670, 696, 698, 756, 786, 789, 820, 823, 829, 876, 881, 884, 885, 888, 889, 892, 897, 900, 901, 904, 905, 908], "unlik": [15, 157, 164, 265], "charger": 15, "charact": 15, "encod": [15, 173, 552, 579], "instant": [15, 918], "messag": [15, 151, 170, 172, 926, 927], "much": [15, 151, 155, 163, 164, 167, 170, 172, 173], "doe": [15, 18, 64, 67, 68, 151, 153, 154, 155, 156, 157, 159, 160, 161, 165, 167, 168, 170, 172, 173, 187, 315, 373, 376, 552, 596, 756, 795], "mandat": [15, 159, 167], "adopt": [15, 151, 163], "continu": [15, 16, 158, 159, 187], "own": [15, 16, 150, 156, 170, 187], "signatur": [15, 18, 64, 155, 156, 157, 164, 165, 166, 167, 168, 228, 237, 240, 315, 333, 336, 373, 376, 377, 380, 385, 388, 410, 413, 493, 496, 525, 528, 529, 532, 756, 770, 773, 790, 793, 860, 861, 862, 865, 866, 869, 876, 881, 884], "replac": [15, 67, 68, 151, 153, 157, 159, 162, 164, 165, 166, 170, 172, 175, 187, 552, 608, 609, 756, 757, 760, 843, 844], "your": [15, 16, 149, 150, 152, 153, 155, 156, 173, 174, 187, 918], "10": [15, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 141, 143, 150, 153, 157, 164, 170, 172, 173, 209, 216, 219, 265, 315, 353, 356, 357, 360, 385, 388, 422, 425, 450, 453, 525, 528, 552, 570, 580, 607, 612, 626, 639, 640, 641, 642, 657, 663, 670, 677, 679, 680, 682, 706, 708, 725, 727, 756, 774, 777, 782, 785, 795, 838, 839, 842, 843, 844, 845, 846, 847, 855, 858, 860, 861, 876, 877, 880, 881, 884], "100": [15, 16, 96, 97, 173, 174, 175, 187, 315, 525, 528, 845, 847, 918], "despit": [15, 164, 166], "distinct": [15, 156, 164, 167, 169, 860, 861, 862, 864, 918], "still": [15, 67, 68, 156, 159, 165, 172, 174, 187, 918], "believ": [15, 151], "share": [15, 67, 68, 157, 159, 160, 161, 164, 170, 228, 260], "bring": [15, 170, 171], "benefit": [15, 16, 150, 151, 163, 164, 167, 172, 173, 187], "unrel": [15, 151], "what": [15, 16, 151, 154, 156, 157, 162, 164, 168, 169, 170, 172, 173, 174, 175, 186, 187, 918], "again": [15, 16, 151, 155, 157, 164, 167, 173, 175, 187], "contrari": 15, "bumpi": 15, "road": 15, "allud": [15, 173], "most": [15, 67, 68, 150, 151, 155, 159, 160, 163, 164, 165, 166, 167, 168, 170, 172, 173, 174, 187, 670, 683, 685], "technolog": 15, "sector": [15, 315, 324, 327, 337, 340, 349, 352], "full": [15, 16, 69, 70, 151, 156, 165, 168, 170, 187, 209, 228, 248, 315, 422, 425, 657, 663, 670, 712, 714, 716, 718, 719, 721, 838, 839, 842], "success": 15, "reason": [15, 151, 155, 157, 160, 163, 164, 165, 167, 170, 172, 315, 505, 508], "build": [15, 125, 136, 137, 138, 149, 150, 160, 169, 171, 174, 175, 187, 860, 861, 862, 864, 918], "custom": [15, 18, 64, 174], "comput": [15, 16, 67, 68, 150, 160, 164, 170, 173, 187, 265, 309, 315, 328, 331, 353, 356, 365, 368, 373, 376, 394, 397, 398, 401, 418, 421, 422, 425, 438, 441, 442, 445, 466, 469, 470, 473, 474, 477, 478, 481, 484, 487, 489, 492, 493, 496, 552, 564, 565, 567, 570, 571, 626, 628, 629, 631, 633, 634, 636, 639, 641, 643, 645, 647, 649, 652, 654, 657, 658, 659, 660, 661, 662, 663, 664, 666, 668, 670, 671, 673, 674, 676, 683, 685, 686, 688, 689, 691, 692, 695, 696, 698, 712, 714, 715, 716, 718, 719, 721, 731, 733, 734, 736, 740, 741, 744, 746, 749, 751, 754, 820, 826, 860, 861, 862, 864, 876, 877, 880, 881, 884, 885, 888, 889, 892, 893, 896, 897, 900, 901, 904, 905, 908], "thank": [15, 173], "interoper": 15, "compon": [15, 170], "bio": [15, 150], "hardwar": [15, 150], "initi": [15, 64, 67, 68, 69, 70, 71, 118, 119, 121, 122, 124, 125, 126, 127, 128, 129, 130, 131, 132, 134, 135, 136, 137, 138, 141, 145, 151, 161, 165, 166, 265, 657, 667], "pcie": 15, "interfac": [15, 175, 187], "motherboard": 15, "raid": 15, "storag": [15, 173], "virtual": [15, 151, 153], "bluetooth": 15, "wireless": 15, "exchang": 15, "btx": 15, "form": [15, 21, 22, 23, 24, 25, 67, 68, 149, 160, 174, 175, 209, 211, 221, 224, 225, 552, 558, 626, 629, 631, 634, 636, 639, 641, 643, 645, 647, 649, 657, 670, 671, 673, 677, 679, 680, 682, 683, 685, 686, 688, 689, 691, 700, 702, 703, 705, 709, 711, 712, 714, 716, 718, 719, 721, 722, 724, 728, 730, 820, 822, 832], "factor": [15, 125, 126, 127, 128, 129, 130, 131, 132, 141, 142, 143, 144, 265, 274, 307, 308, 309, 626, 628, 629, 631, 639, 641, 643, 645, 657, 658, 659, 660, 661, 662, 663, 664, 670, 671, 673], "sata": 15, "connect": [15, 125, 135, 136, 150, 174, 175], "host": [15, 187], "bu": 15, "adapt": [15, 141, 144, 626, 643, 645], "devic": [15, 31, 67, 68, 77, 96, 97, 114, 115, 116, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 145, 147, 148, 151, 154, 155, 160, 162, 165, 172, 173, 187, 209, 210, 211, 212, 213, 214, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 267, 268, 269, 270, 271, 272, 274, 275, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 552, 580, 581, 584, 605, 608, 609, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852], "html": [15, 153, 156, 228, 237, 240, 315, 333, 336, 373, 376, 377, 380, 385, 388, 410, 413, 493, 496, 525, 528, 529, 532, 756, 770, 773, 790, 793, 860, 861, 862, 865, 866, 869, 876, 881, 884], "enabl": [15, 67, 68, 69, 70, 71, 150, 151, 159, 160, 163, 164, 167, 169, 170, 171, 173, 175, 187], "anyon": [15, 149, 187], "websit": 15, "tcp": 15, "ip": 15, "node": [15, 67, 68, 164, 820, 821, 830, 831], "commun": [15, 149, 151, 152, 187, 918, 924], "network": [15, 111, 125, 137, 138, 160, 164, 170, 174, 186, 657, 666, 918], "smtp": 15, "possibl": [15, 149, 150, 151, 152, 156, 157, 159, 164, 165, 167, 170, 173, 186, 187, 552, 602, 620, 876, 881, 884, 889, 892], "send": 15, "gmail": 15, "outlook": 15, "pop": [15, 64], "email": 15, "ieee": [15, 208, 228, 248, 315, 328, 331, 406, 409, 484, 487, 505, 508, 525, 528], "754": [15, 208, 228, 248, 315, 328, 331, 406, 409, 484, 487, 505, 508, 525, 528], "allow": [15, 137, 138, 170, 187, 209, 218, 219, 552, 602], "calcul": [15, 67, 68, 69, 70, 71, 156, 315, 316, 319, 320, 323, 324, 327, 328, 331, 333, 336, 337, 340, 341, 344, 345, 348, 381, 384, 385, 388, 389, 392, 402, 405, 406, 409, 446, 449, 450, 453, 454, 457, 458, 461, 462, 465, 484, 487, 501, 504, 517, 520, 521, 524, 525, 528, 533, 537, 538, 542, 543, 547, 740, 741, 744, 746, 749, 751, 754, 876, 881, 884, 885, 888, 889, 892, 893, 896, 897, 900, 901, 904, 905, 908], "live": [15, 16], "depend": [15, 150, 151, 156, 162, 164, 165, 170, 187, 228, 234, 315, 316, 319, 320, 323, 324, 327, 333, 336, 337, 340, 341, 344, 345, 348, 381, 384, 385, 388, 402, 405, 406, 409, 446, 449, 450, 453, 454, 457, 458, 461, 501, 504, 517, 520, 521, 524, 538, 542, 543, 547, 670, 683, 685, 712, 714, 716, 718, 719, 721, 855, 859, 865, 866, 869, 871, 874], "did": [15, 152, 175], "aris": [15, 187], "until": [15, 151, 187, 918], "substanti": [15, 151, 159, 163], "innov": 15, "growth": 15, "usag": [15, 170, 265, 309], "relev": [15, 141, 142, 143, 144, 145, 146, 150, 152, 157, 164, 165, 173], "area": [15, 167, 185, 315, 324, 327, 337, 340, 349, 352, 918], "necess": 15, "parti": [15, 187], "could": [15, 16, 150, 151, 157, 159, 164, 165, 167, 170, 172, 173, 174, 860, 861, 862, 864], "easili": [15, 151, 173, 174, 175, 187, 918], "engag": [15, 149, 150, 151, 152, 153, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168], "regard": [15, 164, 265], "effect": [15, 156, 163, 164, 168, 187, 209, 220, 626, 647, 649, 876, 897, 900, 905, 908], "2015": 15, "sinc": [15, 150, 151, 187], "alongsid": 15, "machin": [15, 150, 160, 186, 228, 248, 251, 315, 418, 421, 670, 700, 702, 709, 711], "given": [15, 16, 64, 67, 68, 114, 115, 150, 151, 152, 153, 155, 156, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 170, 172, 174, 175, 186, 209, 210, 212, 218, 219, 265, 298, 304, 306, 307, 308, 309, 311, 314, 552, 570, 571, 581, 584, 608, 609, 624, 626, 628, 629, 631, 634, 636, 639, 641, 643, 645, 647, 649, 657, 658, 659, 660, 661, 662, 663, 664, 670, 737, 739, 740, 741, 744, 746, 749, 751, 754, 756, 757, 760, 770, 773, 774, 777, 782, 785, 790, 793, 795, 808, 811, 820, 827, 828, 843, 845, 846, 848, 849, 851, 854, 865, 871, 874], "frame": [15, 186], "less": [15, 32, 33, 67, 68, 78, 79, 151, 157, 164, 168, 169, 170, 315, 320, 323, 324, 327, 333, 336, 345, 348, 377, 380, 446, 449, 450, 453, 458, 461, 501, 504, 505, 508, 513, 516, 525, 528, 670, 700, 702, 709, 711, 734, 736, 843, 849, 851, 876, 905, 908], "matur": [15, 187], "state": [15, 111, 112, 113, 114, 115, 116, 118, 119, 121, 122, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 156, 168, 169, 170, 171, 173, 186, 315, 484, 487, 657, 667, 918], "than": [15, 67, 68, 151, 155, 157, 159, 164, 167, 170, 173, 174, 175, 187, 209, 210, 228, 248, 265, 309, 315, 320, 323, 324, 327, 333, 336, 345, 348, 361, 364, 369, 372, 377, 380, 410, 413, 414, 417, 446, 449, 450, 453, 458, 461, 482, 501, 504, 505, 508, 513, 516, 525, 528, 548, 551, 552, 598, 599, 601, 626, 638, 670, 674, 676, 692, 695, 700, 702, 709, 711, 734, 736, 756, 757, 760, 774, 777, 796, 799, 843, 849, 851, 860, 861, 862, 864, 876, 893, 896, 897, 900, 901, 904, 905, 908], "preced": [15, 174], "mention": [15, 150, 151, 157, 160, 167, 168], "aros": 15, "70": [15, 670, 706, 708, 876, 877, 880], "80": [15, 670, 706, 708, 876, 877, 880], "90": [15, 96, 97, 315, 373, 376, 509, 512, 670, 706, 708, 845, 847, 876, 877, 880], "effort": [15, 149, 187], "stage": [15, 149, 151, 153, 154, 918], "complet": [15, 67, 68, 151, 152, 163, 164, 172, 173, 670, 712, 714], "natur": [15, 157, 163, 164, 186, 315, 402, 405, 446, 449, 454, 457, 670, 715], "like": [15, 64, 150, 151, 153, 154, 155, 156, 157, 159, 166, 167, 168, 169, 170, 172, 173, 174, 175, 186, 187, 626, 638, 843, 849, 851, 918], "certainli": 15, "mission": [15, 918], "creat": [15, 18, 64, 67, 68, 114, 115, 116, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 153, 165, 166, 167, 170, 171, 174, 185, 186, 209, 210, 211, 212, 213, 214, 216, 217, 218, 219, 221, 222, 223, 226, 227, 265, 274, 275, 552, 580, 581, 584, 605, 608, 609, 620, 626, 654, 843, 844, 845, 846, 849, 851, 918, 924], "At": [15, 152], "process": [15, 16, 149, 150, 151, 153, 160, 164, 170, 175, 265, 274, 275, 304, 314], "ourselv": 15, "lead": [15, 16, 67, 68, 69, 70, 71, 187, 670, 712, 714, 719, 721], "quansight": 15, "compani": 15, "made": [15, 151, 152, 164, 167, 170, 172], "organ": [15, 155, 160, 163, 164], "panda": 15, "scipi": 15, "conda": [15, 150, 153], "dask": [15, 860, 861, 862, 864], "apach": 15, "onnx": 15, "scikit": 15, "jupyt": 15, "aw": 15, "cupi": 15, "net": [15, 16, 170, 175], "sympi": 15, "rai": [15, 315, 345, 348], "modin": 15, "spyder": 15, "includ": [15, 67, 68, 125, 135, 136, 139, 140, 151, 152, 155, 156, 157, 158, 159, 160, 161, 163, 164, 165, 166, 167, 168, 186, 187, 209, 210, 211, 221, 552, 591, 625, 670, 734, 736, 820, 821, 843, 849, 851, 855, 857, 876, 881, 884, 885, 888, 889, 892, 893, 896, 897, 900, 901, 904, 905, 908, 909, 910, 913, 914, 917, 921, 923], "member": [15, 151], "googl": [15, 918], "octoml": 15, "einop": [15, 67, 68, 552, 574, 575, 576], "further": [15, 16, 151, 153, 157, 163, 169, 173, 174, 918], "sponsor": 15, "lg": 15, "electron": 15, "microsoft": 15, "d": [15, 16, 64, 96, 97, 149, 150, 154, 164, 173, 552, 561, 569, 657, 658, 659, 660, 661, 662, 663, 664, 670, 680, 682, 706, 708, 845, 847, 918, 924], "shaw": 15, "co": [15, 32, 33, 78, 79, 170, 186, 315, 552, 579, 918], "intel": 15, "togeth": [15, 67, 68, 147, 148, 163, 164, 174, 175, 187], "major": [15, 165, 166, 187, 855, 858], "involv": [15, 149, 153, 154, 165, 175, 228, 256, 315, 328, 331, 484, 487, 918, 924], "anoth": [15, 67, 68, 150, 151, 160, 164, 165, 172, 175, 209, 215, 228, 235, 237, 240], "promis": 15, "sign": [15, 32, 33, 78, 79, 150, 171, 175, 209, 210, 315, 316, 319, 328, 331, 345, 348, 369, 372, 484, 487, 505, 508, 670, 715, 860, 861, 862, 864, 876, 893, 896, 901, 904], "pursuit": 15, "unif": [15, 149, 172, 918, 924], "clearli": [15, 152, 157], "lot": [15, 16, 162, 172, 187], "thought": [15, 150, 151, 168], "care": [15, 151, 175], "attent": [15, 125, 136, 151, 163, 164, 657, 668, 669], "gone": [15, 169], "simplifi": [15, 170, 171, 172, 174], "compat": [15, 168, 187, 228, 236, 315, 328, 331, 345, 348, 353, 356, 361, 364, 365, 368, 369, 372, 373, 376, 389, 392, 394, 397, 414, 417, 422, 425, 438, 441, 442, 445, 462, 465, 466, 469, 474, 477, 478, 481, 484, 487, 493, 496, 501, 504, 505, 508, 533, 537, 670, 700, 702, 709, 711, 716, 718, 725, 727, 731, 733, 734, 736, 756, 786, 789, 855, 857, 876, 881, 884, 885, 888, 889, 892, 893, 896, 897, 900, 901, 904, 905, 908, 909, 910, 913, 914, 917, 918], "excit": [15, 149, 154, 918], "complianc": 15, "hope": [15, 187], "due": [15, 150, 164, 167, 315, 484, 487], "suit": [15, 150, 151, 154, 158, 159, 173, 186], "some": [15, 16, 67, 68, 125, 133, 150, 151, 152, 155, 156, 157, 160, 163, 164, 165, 166, 167, 168, 171, 172, 173, 174, 186, 187, 315, 406, 409, 626, 628, 629, 631, 634, 636, 639, 641, 643, 645, 647, 649, 655, 657, 665, 918], "motiv": [15, 172], "great": [15, 16, 159, 170, 172], "convinc": 15, "celebr": 15, "encourag": [15, 186, 187, 918, 924], "foundat": 15, "point": [16, 151, 156, 157, 163, 167, 168, 170, 172, 173, 186, 208, 209, 210, 212, 214, 216, 222, 226, 228, 234, 248, 253, 256, 315, 320, 323, 324, 327, 328, 331, 333, 336, 337, 340, 341, 344, 345, 348, 349, 352, 373, 376, 377, 380, 381, 384, 385, 388, 389, 392, 402, 405, 406, 409, 410, 413, 446, 449, 450, 453, 458, 461, 462, 465, 484, 487, 501, 504, 505, 508, 509, 512, 517, 520, 521, 524, 525, 528, 538, 542, 543, 547, 548, 551, 670, 671, 673, 677, 679, 683, 685, 686, 688, 689, 691, 700, 702, 709, 711, 712, 714, 716, 718, 719, 721, 734, 736, 860, 861, 862, 864, 876, 881, 884, 885, 888, 889, 892, 893, 896, 897, 900, 901, 904, 905, 908], "mai": [16, 18, 64, 150, 151, 164, 172, 174, 209, 210, 215, 265, 310, 315, 394, 397, 422, 425, 442, 445, 470, 473, 474, 477, 552, 573, 860, 861, 862, 864, 865, 866, 869, 871, 874, 876, 881, 884, 885, 888, 889, 892], "ask": [16, 170, 172, 187, 918], "perfectli": 16, "happi": [16, 150, 187], "abund": 16, "better": [16, 151, 154, 169, 172, 173, 174], "ll": [16, 149, 151, 157, 164, 167, 173], "give": [16, 150, 151, 154, 156, 157, 161, 168, 172, 756, 786, 789], "two": [16, 64, 69, 70, 156, 157, 159, 163, 164, 169, 173, 175, 209, 210, 214, 220, 224, 225, 228, 255, 260, 315, 369, 372, 509, 512, 552, 560, 670, 671, 673, 677, 679, 680, 682, 683, 685, 686, 688, 689, 691, 692, 695, 696, 698, 700, 702, 703, 705, 706, 708, 709, 711, 712, 714, 715, 716, 718, 719, 721, 722, 724, 728, 730, 731, 733, 756, 804, 807, 860, 861, 862, 863, 864, 918], "streamlin": 16, "workflow": [16, 151, 173, 185, 918], "save": [16, 67, 68, 137, 138, 187, 552, 613], "week": [16, 151, 152, 918], "let": [16, 156, 157, 164, 165, 166, 170, 172, 173, 174, 175, 876, 885, 888, 897, 900, 901, 904, 905, 908, 918], "sai": [16, 150, 162, 172], "deepmind": 16, "releas": [16, 150, 152, 918], "awesom": 16, "paper": 16, "love": 16, "choic": [16, 150, 167, 173, 876, 897, 900, 905, 908], "perceiverio": 16, "happen": [16, 150, 151, 173], "slew": 16, "rush": 16, "f": [16, 64, 153, 154, 164, 170, 173, 175, 315, 418, 421, 552, 593, 597], "g": [16, 154, 164, 187, 228, 233, 256, 265, 281, 843, 848, 849, 851, 860, 861, 862, 864, 876, 881, 884, 889, 892, 893, 896, 901, 904], "inevit": 16, "deviat": [16, 139, 140, 838, 839, 842, 843, 848, 876, 897, 900], "origin": [16, 67, 68, 69, 70, 71, 161, 162, 165, 170, 172, 315, 345, 348, 670, 696, 698, 756, 786, 789, 790, 793], "often": [16, 160, 187], "erron": 16, "train": [16, 160, 164, 166, 173, 174, 175, 185, 186, 187, 626, 628, 629, 631, 639, 641, 918], "poor": 16, "converg": 16, "perform": [16, 67, 68, 155, 157, 159, 160, 161, 163, 164, 166, 167, 168, 170, 173, 187, 198, 203, 209, 218, 219, 265, 552, 570, 574, 575, 576, 594, 595, 596, 626, 629, 631, 634, 636, 639, 641, 643, 645, 647, 649, 657, 665, 667, 670, 719, 721, 816, 817, 818, 819, 820, 827, 828, 909, 910, 913, 914, 917], "issu": [16, 149, 152, 170, 172, 174, 187], "etc": [16, 62, 63, 67, 68, 108, 109, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 145, 147, 148, 150, 151, 152, 155, 157, 159, 163, 164, 165, 168, 170, 172, 173, 187, 209, 218, 219, 552, 580, 581, 584, 605, 608, 609, 843, 844, 845, 846, 849, 851, 860, 861, 862, 864], "publish": [16, 187], "manag": [16, 149, 167, 187, 265], "get": [16, 64, 67, 68, 125, 134, 149, 150, 152, 154, 160, 165, 166, 167, 170, 171, 172, 173, 174, 228, 246, 247, 248, 251, 265, 274, 275, 284, 285, 298, 299, 304, 308, 311, 314, 552, 559, 586, 587, 588, 607, 918, 924], "work": [16, 150, 151, 152, 154, 159, 164, 165, 166, 169, 170, 171, 172, 174, 175, 918, 924], "repositori": [16, 150, 151, 153, 158], "pull": [16, 149, 150, 153, 155, 187], "request": [16, 149, 155, 265, 301], "confus": [16, 167], "do": [16, 67, 68, 150, 151, 152, 155, 156, 157, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 172, 173, 174, 175, 187, 315, 505, 508, 552, 596, 626, 638, 655, 820, 821, 830, 831, 832], "don": [16, 62, 63, 108, 109, 150, 151, 152, 165, 174, 187], "expect": [16, 187, 552, 559, 918], "codebas": [16, 149, 154, 155, 167, 169, 265, 307, 308, 918], "total": [16, 67, 68, 69, 70, 71, 149, 151, 157, 159, 166, 173, 174, 187, 265, 311, 855, 858, 876, 897, 900, 905, 908], "hour": 16, "spent": 16, "spin": 16, "off": [16, 169, 670, 680, 682, 728, 730], "test": [16, 150, 152, 154, 157, 187, 228, 253, 254, 315, 426, 429, 430, 433, 434, 437, 909, 910, 913, 914, 917], "error": [16, 67, 68, 137, 138, 141, 145, 150, 159, 163, 166, 168, 172, 187, 198, 199, 265, 315, 398, 401, 876, 881, 884, 889, 892], "iter": [16, 21, 22, 23, 24, 25, 62, 63, 64, 67, 68, 69, 70, 71, 108, 109, 164, 170, 173, 206, 207, 265, 287, 288, 290, 291, 292, 293, 296, 309, 552, 553, 556, 609, 614, 756, 766, 769, 782, 785, 795, 808, 811, 812, 815, 820, 821, 822, 826, 830, 831, 832], "address": [16, 151, 152, 163, 170], "sake": 16, "singl": [16, 67, 68, 151, 155, 157, 159, 160, 162, 164, 167, 168, 170, 173, 174, 175, 187, 265, 274, 275, 294, 295, 296, 297, 552, 622, 625, 843, 848, 849, 851, 860, 861], "multipl": [16, 67, 68, 78, 79, 80, 81, 92, 93, 96, 97, 125, 135, 151, 157, 160, 164, 187, 315, 328, 332, 484, 487, 552, 553, 555, 556, 557, 581, 585, 602, 670, 689, 691, 756, 757, 760, 761, 790, 793, 794, 795, 838, 839, 842, 845, 847, 855, 856, 857, 876, 881, 884, 885, 888, 889, 892, 893, 896, 897, 900, 901, 904, 905, 908, 909, 910, 913, 914, 917], "line": [16, 150, 157, 163, 171, 172, 173, 174, 185, 918, 924], "convert": [16, 21, 22, 23, 24, 25, 67, 68, 115, 163, 170, 187, 188, 196, 209, 211, 221, 228, 232, 233, 265, 281, 282, 283, 284, 304, 311, 314, 552, 615, 621, 622, 670, 737, 739, 820, 822, 832, 833], "directli": [16, 151, 155, 156, 160, 163, 164, 165, 166, 167, 168, 170, 172, 174, 175, 186, 187, 820, 832], "graph": [16, 137, 138, 160, 164, 171, 187, 626, 629, 631, 634, 636, 639, 641, 643, 645, 647, 649, 860, 861, 862, 864], "guarante": [16, 163, 187, 860, 861], "turn": [16, 157, 164], "4": [16, 32, 33, 46, 47, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 141, 142, 143, 144, 146, 153, 157, 161, 164, 170, 172, 173, 174, 175, 198, 200, 201, 203, 209, 217, 220, 223, 227, 228, 237, 239, 240, 241, 265, 287, 303, 315, 328, 329, 330, 331, 332, 333, 336, 345, 348, 353, 356, 373, 376, 377, 379, 380, 385, 388, 410, 412, 413, 422, 425, 482, 483, 489, 492, 493, 496, 509, 512, 525, 528, 529, 532, 538, 539, 541, 542, 543, 544, 546, 547, 552, 561, 570, 579, 580, 581, 583, 584, 585, 615, 620, 657, 660, 661, 662, 664, 667, 669, 670, 674, 676, 677, 679, 680, 682, 689, 691, 700, 702, 706, 708, 725, 727, 728, 730, 740, 751, 754, 756, 757, 758, 759, 760, 761, 762, 765, 770, 773, 774, 777, 782, 785, 786, 789, 790, 792, 793, 794, 795, 804, 807, 838, 839, 842, 843, 844, 845, 847, 854, 855, 856, 857, 858, 859, 860, 861, 862, 865, 866, 869, 876, 877, 880, 881, 884, 909, 910, 913, 918], "step": [16, 67, 68, 82, 83, 141, 142, 143, 144, 145, 146, 150, 151, 153, 157, 161, 163, 164, 165, 166, 170, 173, 174, 175, 186, 209, 210, 218, 219, 265, 626, 628, 629, 630, 631, 632, 634, 636, 639, 640, 641, 642, 643, 645, 647, 649, 816, 817, 818, 819, 918], "take": [16, 149, 150, 151, 156, 157, 159, 164, 165, 166, 170, 172, 174, 175, 187, 315, 373, 376, 918, 924], "few": [16, 151, 152, 160, 164, 165, 166, 167, 171, 172, 173, 174, 185, 918, 924], "second": [16, 141, 142, 143, 150, 157, 167, 172, 228, 255, 260, 265, 296, 315, 328, 331, 353, 356, 361, 364, 365, 368, 369, 372, 373, 376, 394, 397, 414, 417, 422, 425, 438, 441, 442, 445, 462, 465, 466, 469, 474, 477, 478, 481, 484, 487, 493, 496, 501, 504, 533, 537, 552, 560, 607, 612, 626, 628, 629, 631, 639, 641, 670, 674, 676, 680, 682, 683, 685, 692, 695, 706, 708, 712, 714, 719, 721, 725, 727, 731, 733, 756, 800, 803, 804, 807, 816, 818, 860, 861, 862], "automat": [16, 150, 151, 160, 164, 168, 169, 170, 171, 174, 175, 918], "convers": [16, 22, 23, 24, 25, 67, 68, 169, 171, 175, 186, 187, 918, 924], "everyon": [16, 149, 151, 187], "regardless": [16, 67, 68, 149, 172, 175, 206, 207], "wouldn": 16, "nice": [16, 159], "write": [16, 67, 68, 151, 152, 153, 154, 155, 156, 157, 159, 160, 161, 167, 170, 172, 175, 198, 201, 265, 310, 315, 316, 319, 320, 323, 324, 327, 328, 331, 333, 336, 337, 340, 341, 344, 345, 348, 353, 356, 357, 360, 361, 364, 365, 368, 369, 372, 373, 376, 377, 380, 381, 384, 385, 388, 402, 405, 406, 409, 410, 413, 426, 429, 430, 433, 434, 437, 438, 441, 446, 449, 450, 453, 454, 457, 458, 461, 462, 465, 466, 469, 470, 473, 474, 477, 478, 481, 484, 487, 489, 492, 493, 496, 501, 504, 505, 508, 509, 512, 513, 516, 517, 520, 521, 524, 525, 528, 529, 532, 533, 537, 538, 542, 543, 547, 552, 565, 567, 571, 578, 580, 740, 741, 744, 746, 749, 751, 754, 756, 757, 760, 770, 773, 774, 777, 778, 781, 782, 785, 790, 793, 796, 799, 800, 803, 804, 807, 838, 839, 842, 843, 845, 846, 865, 866, 869, 871, 874, 876, 877, 880, 881, 884, 885, 888, 889, 892, 893, 896, 897, 900, 901, 904, 905, 908, 909, 910, 913, 914, 917], "onc": [16, 150, 151, 164, 165, 166, 170, 173, 187, 265, 309, 670, 689, 691, 719, 721, 843, 844], "know": [16, 860, 861, 862, 864], "among": [16, 67, 68, 159], "frantic": 16, "port": 16, "lucid": 16, "honk": 16, "improv": [16, 151, 160, 170], "understand": [16, 150, 151, 152, 153, 154, 156, 157, 158, 168, 169], "pattern": [16, 67, 68, 156, 165, 552, 574, 575, 576], "hasn": 16, "chang": [16, 28, 29, 32, 33, 34, 35, 46, 47, 74, 75, 78, 79, 80, 81, 92, 93, 96, 97, 150, 151, 152, 153, 156, 158, 159, 164, 170, 174, 187, 237, 238, 239, 241, 265, 316, 317, 328, 329, 330, 332, 377, 378, 379, 410, 411, 412, 538, 539, 540, 541, 543, 544, 545, 546, 553, 554, 555, 557, 581, 582, 583, 585, 670, 674, 676, 756, 757, 758, 759, 761, 786, 789, 790, 791, 792, 794, 820, 822, 832, 845, 847, 918, 924], "now": [16, 67, 68, 125, 136, 137, 138, 150, 153, 155, 162, 164, 165, 168, 172, 173, 175, 186, 187], "spend": 16, "torchvis": 16, "probabl": [16, 125, 133, 657, 665, 843, 844], "sonnet": 16, "about": [16, 150, 151, 158, 169, 170, 174, 175, 187, 228, 248, 251], "next": [16, 137, 138, 141, 142, 143, 144, 145, 146, 150, 151, 152, 153, 156, 157, 161, 162, 172, 173, 228, 248, 918], "everyth": [16, 151, 152, 171, 187], "zero": [16, 67, 68, 69, 70, 116, 125, 126, 127, 128, 129, 130, 131, 132, 133, 135, 141, 142, 143, 144, 157, 163, 164, 165, 166, 168, 170, 173, 174, 198, 200, 201, 209, 212, 214, 220, 224, 225, 227, 228, 234, 315, 328, 331, 333, 336, 361, 364, 385, 388, 406, 409, 410, 413, 470, 473, 474, 477, 482, 483, 484, 487, 489, 492, 493, 496, 501, 504, 505, 508, 509, 512, 525, 528, 529, 532, 538, 542, 543, 547, 552, 570, 605, 608, 609, 626, 628, 629, 631, 639, 641, 643, 645, 657, 665, 670, 677, 679, 692, 695, 700, 702, 709, 711, 731, 733, 734, 736, 756, 770, 773, 774, 777, 782, 785, 790, 793, 812, 815, 838, 839, 842, 843, 845, 846, 855, 856, 857, 858, 860, 861, 862, 864, 876, 881, 884, 885, 888, 889, 892, 893, 896, 897, 900, 901, 904, 905, 908, 909, 910, 913, 914, 917, 918], "need": [16, 150, 151, 152, 153, 155, 156, 157, 158, 160, 163, 164, 167, 170, 172, 173, 186, 187, 552, 564, 565, 567, 756, 757, 760, 770, 773], "said": 16, "high": [16, 67, 68, 96, 97, 152, 173, 843, 845, 846, 847, 849, 850, 851, 852], "level": [16, 149, 152, 160, 169, 170, 173, 174, 175, 187], "optim": [16, 142, 143, 144, 146, 167, 171, 173, 175, 186, 265, 626, 629, 631, 634, 636, 639, 641, 643, 645, 647, 649, 816, 817, 818, 819, 918], "trainer": [16, 185, 187, 918], "statu": 16, "quo": 16, "kera": 16, "dopamin": 16, "ignit": 16, "catalyst": 16, "lightn": 16, "fastai": 16, "haiku": [16, 175], "flax": [16, 175, 187], "trax": [16, 175], "objax": [16, 175], "idea": [16, 186], "fulli": [16, 125, 135, 136, 163, 164, 168, 170, 171, 172, 173, 174, 175, 187], "offer": [16, 174], "helper": [18, 64, 159, 173], "abc": [18, 19, 20, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 64, 67, 68, 137, 138, 141, 145, 172, 265, 274, 280, 552, 577], "inherit": [18, 163, 164, 172], "__delattr__": [18, 64], "self": [18, 64, 67, 68, 141, 145, 163, 164, 170, 172, 173, 174, 175, 237, 238, 239, 265, 316, 317, 318, 320, 321, 322, 324, 325, 326, 328, 329, 330, 333, 334, 335, 337, 338, 339, 341, 342, 343, 345, 346, 347, 349, 350, 351, 353, 354, 355, 357, 358, 359, 361, 362, 363, 365, 366, 367, 369, 370, 371, 373, 374, 375, 377, 378, 379, 381, 382, 383, 385, 386, 387, 389, 390, 391, 394, 395, 396, 398, 399, 400, 402, 403, 404, 406, 407, 408, 410, 411, 412, 414, 415, 416, 418, 419, 420, 422, 423, 424, 426, 427, 428, 430, 431, 432, 434, 435, 436, 438, 439, 440, 442, 443, 444, 446, 447, 448, 450, 451, 452, 454, 455, 456, 458, 459, 460, 462, 463, 464, 466, 467, 468, 470, 471, 472, 474, 475, 476, 478, 479, 480, 484, 485, 486, 489, 490, 491, 493, 494, 495, 497, 498, 499, 501, 502, 503, 505, 506, 507, 509, 510, 511, 513, 514, 515, 517, 518, 519, 521, 522, 523, 525, 526, 527, 529, 530, 531, 533, 535, 536, 538, 540, 541, 543, 545, 546, 548, 549, 550, 553, 554, 555, 565, 566, 581, 582, 583, 629, 630, 634, 635, 639, 640, 643, 644, 647, 648, 671, 672, 674, 675, 677, 678, 680, 681, 683, 684, 686, 687, 689, 690, 692, 693, 694, 696, 697, 700, 701, 703, 704, 706, 707, 709, 710, 712, 713, 716, 717, 719, 720, 722, 723, 725, 726, 728, 729, 731, 732, 734, 735, 737, 738, 741, 742, 743, 746, 747, 748, 751, 752, 753, 757, 758, 759, 762, 763, 764, 766, 767, 768, 770, 771, 772, 774, 775, 776, 778, 779, 780, 782, 783, 784, 786, 787, 788, 790, 791, 792, 796, 797, 798, 800, 801, 802, 804, 805, 806, 808, 809, 810, 812, 813, 814, 839, 840, 841, 849, 850, 866, 867, 868, 871, 872, 873, 877, 878, 879, 881, 882, 883, 885, 886, 887, 889, 890, 891, 893, 894, 895, 897, 898, 899, 901, 902, 903, 905, 906, 907, 910, 911, 912, 914, 915, 916, 918], "name": [18, 64, 150, 151, 153, 156, 159, 170, 172, 173, 175, 206, 207, 552, 558, 670, 683, 685, 712, 714, 719, 721, 860, 861, 862], "delattr": [18, 64], "__format__": [18, 64], "format_spec": [18, 64], "formatt": [18, 64], "__getattribute__": [18, 64], "getattr": [18, 64], "__init_subclass__": [18, 64], "method": [18, 28, 29, 32, 33, 34, 35, 46, 47, 62, 63, 64, 67, 68, 69, 70, 71, 74, 75, 78, 79, 80, 81, 92, 93, 96, 97, 108, 109, 125, 136, 137, 138, 152, 155, 156, 157, 159, 160, 163, 168, 170, 171, 174, 175, 187, 198, 200, 201, 202, 203, 204, 205, 209, 215, 220, 237, 238, 239, 241, 315, 316, 317, 328, 329, 330, 332, 333, 336, 353, 356, 373, 376, 377, 378, 379, 380, 385, 388, 410, 411, 412, 413, 422, 425, 482, 483, 489, 492, 493, 496, 509, 512, 525, 528, 529, 532, 538, 539, 540, 541, 543, 544, 545, 546, 547, 552, 553, 554, 555, 557, 568, 569, 580, 581, 582, 583, 585, 608, 609, 620, 622, 626, 639, 641, 643, 645, 657, 663, 669, 670, 671, 673, 674, 676, 677, 679, 740, 741, 744, 756, 757, 758, 759, 761, 770, 773, 774, 777, 782, 785, 790, 791, 792, 794, 795, 804, 807, 820, 821, 831, 832, 833, 838, 839, 842, 843, 845, 847, 848, 849, 851, 855, 856, 857, 858, 859, 860, 861, 862, 865, 866, 869, 876, 877, 880, 881, 884, 909, 910, 913, 918], "subclass": [18, 64], "noth": [18, 64, 67, 68, 151], "It": [18, 64, 150, 151, 153, 154, 155, 156, 157, 161, 163, 164, 167, 170, 172, 173, 174, 198, 201, 265, 310, 315, 316, 319, 320, 323, 324, 327, 328, 331, 333, 336, 337, 340, 341, 344, 345, 348, 353, 356, 357, 360, 361, 364, 365, 368, 369, 372, 373, 376, 377, 380, 381, 384, 385, 388, 402, 405, 406, 409, 410, 413, 426, 429, 430, 433, 434, 437, 438, 441, 446, 449, 450, 453, 454, 457, 458, 461, 462, 465, 466, 469, 470, 473, 474, 477, 478, 481, 484, 487, 489, 492, 493, 496, 501, 504, 505, 508, 509, 512, 513, 516, 517, 520, 521, 524, 525, 528, 529, 532, 533, 537, 538, 542, 543, 547, 552, 565, 567, 578, 740, 741, 744, 746, 749, 751, 754, 756, 757, 760, 770, 773, 774, 777, 778, 781, 782, 785, 790, 793, 796, 799, 800, 803, 804, 807, 843, 845, 846, 855, 856, 865, 866, 869, 871, 874, 909, 910, 913, 914, 917], "overridden": [18, 64], "extend": [18, 64, 156, 159, 161, 168], "__new__": [18, 64], "help": [18, 64, 149, 150, 157, 161, 163, 164, 172, 173, 174, 185, 552, 558, 876, 901, 904, 918], "accur": [18, 64, 315, 406, 409], "__reduce__": [18, 64], "pickl": [18, 64, 67, 68, 164, 173], "__reduce_ex__": [18, 64], "protocol": [18, 64], "__setattr__": [18, 164], "valu": [18, 46, 47, 64, 67, 68, 69, 70, 71, 92, 93, 125, 126, 127, 128, 129, 130, 131, 132, 136, 137, 138, 139, 140, 141, 142, 143, 145, 151, 157, 159, 160, 164, 165, 166, 167, 168, 170, 172, 175, 187, 209, 210, 214, 216, 217, 218, 219, 228, 234, 243, 244, 245, 265, 277, 308, 309, 315, 316, 319, 320, 323, 328, 331, 333, 336, 341, 344, 377, 380, 394, 397, 398, 401, 410, 413, 414, 417, 418, 421, 422, 425, 438, 441, 442, 445, 482, 483, 484, 487, 493, 496, 497, 500, 501, 504, 509, 512, 543, 547, 548, 551, 552, 564, 565, 567, 568, 573, 579, 580, 581, 584, 590, 593, 597, 607, 608, 609, 610, 611, 612, 625, 626, 628, 629, 631, 633, 639, 641, 652, 656, 657, 658, 659, 660, 661, 662, 663, 664, 667, 668, 669, 670, 700, 702, 709, 711, 712, 714, 715, 716, 718, 719, 721, 722, 724, 734, 736, 756, 757, 760, 766, 767, 768, 769, 782, 785, 786, 789, 812, 814, 815, 816, 817, 818, 820, 824, 825, 826, 827, 828, 833, 836, 837, 838, 839, 842, 843, 844, 845, 846, 848, 849, 851, 853, 855, 856, 857, 859, 860, 861, 862, 863, 864, 865, 866, 869, 871, 874, 876, 881, 884, 885, 888, 889, 892, 893, 896, 897, 900, 901, 904, 905, 908], "setattr": 18, "__sizeof__": [18, 64], "size": [18, 64, 67, 68, 69, 70, 71, 125, 126, 127, 172, 173, 209, 218, 219, 265, 307, 308, 309, 552, 608, 614, 657, 669, 670, 680, 682, 696, 698, 706, 708, 712, 714, 719, 721, 731, 733, 756, 770, 773, 790, 793, 795, 796, 799, 843, 844, 848, 849, 851, 855, 856, 858, 909, 910, 913, 914, 917], "memori": [18, 64, 166, 167, 185, 187, 265, 283, 304, 309, 311, 314, 657, 667, 918], "byte": [18, 64], "__str__": [18, 64], "__subclasshook__": [18, 64], "overrid": [18, 64, 552, 605], "issubclass": [18, 64], "invok": [18, 64], "earli": [18, 64, 151, 918], "abcmeta": [18, 64], "__subclasscheck__": [18, 64], "true": [18, 28, 29, 34, 35, 42, 43, 56, 57, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 125, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 157, 159, 160, 164, 165, 167, 170, 172, 173, 174, 175, 198, 199, 206, 207, 209, 218, 228, 234, 237, 238, 239, 240, 241, 265, 284, 301, 305, 306, 315, 316, 318, 320, 322, 324, 326, 328, 330, 332, 333, 335, 337, 339, 341, 343, 345, 347, 349, 351, 353, 355, 356, 357, 359, 361, 363, 365, 367, 369, 371, 373, 375, 376, 377, 379, 381, 383, 385, 387, 389, 391, 393, 394, 396, 398, 400, 402, 404, 406, 408, 410, 412, 414, 416, 418, 420, 421, 422, 424, 425, 426, 428, 429, 430, 432, 433, 434, 436, 437, 438, 440, 441, 442, 444, 446, 448, 450, 452, 454, 456, 458, 460, 462, 464, 466, 468, 470, 472, 473, 474, 476, 477, 478, 480, 484, 486, 488, 489, 491, 493, 495, 496, 497, 499, 501, 503, 505, 507, 509, 511, 513, 515, 517, 519, 521, 523, 525, 527, 529, 531, 533, 534, 536, 538, 539, 541, 543, 544, 546, 548, 550, 552, 553, 554, 555, 556, 557, 560, 561, 562, 563, 565, 566, 570, 577, 579, 581, 583, 585, 591, 592, 599, 614, 620, 622, 625, 626, 629, 630, 631, 632, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 652, 657, 665, 670, 671, 673, 692, 694, 696, 698, 719, 720, 721, 734, 736, 740, 741, 743, 744, 745, 746, 748, 749, 750, 751, 753, 754, 755, 756, 757, 759, 761, 762, 764, 766, 768, 770, 772, 774, 776, 778, 780, 782, 784, 786, 788, 790, 792, 794, 795, 796, 798, 800, 802, 804, 806, 808, 810, 812, 814, 816, 817, 818, 819, 820, 821, 830, 831, 833, 839, 841, 843, 844, 849, 850, 852, 855, 856, 857, 859, 860, 861, 862, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 879, 881, 883, 884, 885, 887, 888, 889, 891, 892, 893, 895, 896, 897, 899, 900, 901, 903, 904, 905, 907, 908, 909, 910, 912, 913, 914, 916, 917], "notimpl": [18, 64], "normal": [18, 64, 139, 140, 173, 756, 800, 803, 838, 839, 842, 843, 848], "algorithm": [18, 64, 125, 126, 127, 128, 129, 130, 131, 132, 187, 657, 658, 659, 660, 661, 662, 663, 664], "outcom": [18, 64], "cach": [18, 64, 159, 160, 265, 283, 552, 563], "arraywithactiv": 19, "activ": [20, 62, 63, 66, 108, 109, 112, 113, 150, 151, 153, 155, 174, 199, 200, 201, 202, 203, 204, 205, 918], "collect": [21, 67, 68, 111, 125, 139, 141, 159, 186, 198, 206, 265, 552, 626, 657, 740, 820, 833, 838, 843], "wrap": [21, 28, 29, 32, 33, 34, 35, 46, 47, 63, 67, 68, 69, 70, 71, 74, 75, 78, 79, 80, 81, 92, 93, 96, 97, 109, 154, 156, 159, 160, 161, 163, 164, 165, 166, 167, 168, 170, 172, 175, 187, 188, 196, 237, 238, 239, 241, 316, 317, 328, 329, 330, 332, 377, 378, 379, 410, 411, 412, 538, 539, 540, 541, 543, 544, 545, 546, 552, 553, 554, 555, 557, 563, 581, 582, 583, 585, 626, 655, 757, 758, 759, 761, 790, 791, 792, 794, 845, 847], "accept": [21, 150, 151, 156, 157, 159, 160, 163, 164, 166, 167, 168, 172, 209, 220, 228, 237, 240, 315, 328, 331, 333, 336, 353, 356, 373, 376, 377, 380, 385, 388, 410, 413, 470, 473, 474, 477, 493, 496, 505, 508, 509, 512, 525, 528, 529, 532, 538, 542, 543, 547, 552, 580, 657, 660, 669, 670, 677, 679, 756, 770, 773, 774, 777, 790, 793, 838, 839, 842, 860, 861, 862, 865, 866, 869, 876, 881, 884, 885, 888, 909, 910, 913, 918], "instanc": [21, 22, 23, 24, 25, 28, 29, 32, 33, 34, 35, 46, 47, 62, 63, 67, 68, 69, 70, 74, 75, 78, 79, 80, 81, 92, 93, 108, 109, 114, 115, 152, 156, 157, 159, 160, 163, 165, 167, 168, 173, 174, 175, 188, 196, 198, 200, 201, 202, 203, 204, 205, 209, 220, 228, 237, 238, 239, 240, 265, 274, 306, 315, 316, 317, 328, 329, 330, 331, 333, 336, 353, 356, 373, 376, 377, 378, 379, 380, 385, 388, 410, 411, 412, 413, 422, 425, 482, 483, 489, 492, 493, 496, 509, 512, 525, 528, 529, 532, 538, 540, 541, 542, 543, 545, 546, 547, 552, 553, 554, 555, 569, 580, 581, 582, 583, 596, 620, 622, 657, 660, 663, 669, 670, 671, 673, 674, 676, 677, 679, 740, 741, 744, 756, 757, 758, 759, 770, 773, 774, 777, 782, 785, 790, 791, 792, 793, 795, 804, 807, 838, 839, 842, 843, 848, 849, 851, 855, 856, 857, 858, 859, 860, 861, 862, 865, 866, 869, 876, 877, 880, 881, 884, 909, 910, 913], "args_to_ivi": 21, "include_deriv": [21, 22, 23, 24, 25, 820, 822, 832], "keyword": [21, 22, 23, 64, 67, 68, 69, 70, 71, 137, 138, 155, 165, 166, 167, 168, 173, 209, 220, 265, 274, 275, 289, 293, 297, 552, 559, 602, 820, 826, 876, 901, 904], "variabl": [21, 22, 23, 24, 25, 67, 68, 69, 70, 114, 115, 116, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 156, 161, 164, 165, 167, 168, 173, 174, 175, 187, 552, 562, 594, 595, 596, 597, 598, 599, 601, 618, 626, 629, 631, 633, 634, 636, 638, 639, 641, 643, 645, 647, 649, 652, 655, 657, 668, 670, 716, 718, 816, 817, 818, 819, 838, 839, 842, 918], "nest": [21, 22, 23, 24, 25, 67, 68, 69, 70, 71, 137, 138, 141, 142, 143, 144, 145, 146, 155, 160, 163, 164, 172, 173, 174, 187, 265, 289, 293, 297, 552, 620, 816, 817, 818, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837], "unchang": [21, 22, 23, 24, 25], "posit": [21, 22, 23, 32, 33, 78, 79, 114, 115, 168, 173, 186, 208, 209, 214, 228, 248, 265, 289, 293, 297, 315, 316, 319, 426, 429, 430, 433, 484, 487, 505, 508, 552, 579, 670, 671, 673, 756, 770, 773, 790, 793, 843, 853, 855, 858, 909, 910, 913, 914, 917], "bool": [21, 22, 23, 24, 25, 28, 29, 67, 68, 108, 109, 157, 164, 165, 167, 175, 206, 207, 209, 216, 228, 234, 237, 238, 240, 243, 244, 245, 246, 249, 252, 253, 254, 264, 265, 284, 285, 300, 309, 312, 315, 353, 356, 357, 360, 365, 368, 373, 376, 394, 397, 418, 421, 422, 425, 426, 429, 430, 433, 434, 437, 438, 441, 442, 445, 466, 469, 470, 473, 474, 477, 493, 496, 552, 553, 556, 560, 561, 570, 573, 577, 579, 589, 591, 596, 598, 599, 600, 601, 614, 624, 625, 626, 652, 670, 671, 673, 696, 698, 719, 721, 734, 736, 756, 795, 816, 817, 818, 819, 820, 821, 822, 826, 830, 831, 832, 843, 844, 855, 856, 857, 865, 866, 869, 871, 874, 876, 881, 884, 885, 888, 889, 892, 893, 896, 897, 900, 901, 904, 905, 908, 909, 910, 913, 914, 917], "whether": [21, 22, 23, 24, 25, 67, 68, 69, 70, 71, 108, 109, 114, 115, 125, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 149, 150, 165, 167, 168, 198, 199, 206, 207, 228, 234, 246, 252, 253, 254, 264, 265, 284, 285, 296, 300, 301, 304, 305, 309, 312, 314, 315, 434, 437, 552, 553, 556, 560, 561, 570, 573, 577, 579, 589, 591, 593, 596, 597, 598, 599, 600, 601, 602, 614, 618, 624, 625, 626, 629, 631, 633, 634, 636, 638, 639, 641, 643, 645, 647, 649, 652, 657, 665, 670, 683, 685, 816, 817, 818, 819, 820, 821, 822, 826, 830, 831, 832, 833, 843, 844, 909, 910, 913, 914, 917], "recurs": [21, 22, 23, 24, 25, 67, 68, 150, 153, 160, 164, 174, 187, 820, 821, 822, 830, 831, 832], "deriv": [21, 22, 23, 24, 25, 137, 141, 145, 147, 165, 166, 172, 174, 209, 213, 217, 223, 227, 626, 628, 629, 631, 634, 636, 639, 641, 643, 645, 647, 649, 820, 822, 832], "tupl": [21, 22, 23, 24, 25, 42, 43, 64, 67, 68, 155, 164, 165, 166, 168, 172, 173, 174, 187, 206, 207, 209, 211, 212, 216, 221, 222, 226, 228, 236, 250, 265, 284, 552, 579, 615, 657, 660, 663, 664, 670, 700, 702, 709, 711, 719, 720, 721, 725, 727, 734, 736, 756, 762, 765, 766, 769, 774, 777, 778, 781, 790, 793, 796, 799, 800, 803, 812, 815, 816, 817, 818, 819, 820, 822, 823, 825, 827, 828, 829, 831, 832, 834, 835, 836, 837, 843, 848, 849, 851, 855, 858, 860, 861, 862, 863, 876, 881, 884, 885, 888, 889, 892, 893, 896, 897, 900, 901, 904, 905, 908, 909, 910, 913, 914, 917], "list": [21, 22, 23, 24, 25, 62, 63, 64, 67, 68, 108, 109, 125, 126, 127, 128, 129, 130, 131, 132, 150, 152, 153, 155, 157, 165, 166, 168, 170, 173, 174, 175, 187, 209, 210, 211, 212, 220, 221, 222, 226, 228, 235, 265, 274, 275, 284, 286, 287, 290, 291, 294, 295, 309, 552, 561, 615, 620, 624, 657, 658, 659, 660, 661, 662, 663, 664, 670, 725, 727, 756, 762, 765, 774, 777, 795, 800, 803, 820, 821, 822, 826, 831, 832, 838, 839, 842, 855, 858, 909, 910, 913, 914, 917, 918], "kei": [21, 22, 23, 64, 67, 68, 69, 70, 71, 114, 115, 125, 136, 141, 145, 164, 173, 265, 277, 552, 558, 568, 657, 668, 669, 816, 817, 818, 820, 823, 829, 833], "word": [21, 22, 23, 114, 115, 209, 210, 843, 849, 851], "args_to_n": [21, 167, 172], "to_ivi": [21, 67, 68, 172, 820, 833], "input": [21, 24, 25, 67, 68, 69, 70, 71, 78, 79, 80, 81, 92, 93, 96, 97, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 139, 140, 155, 156, 157, 159, 160, 161, 163, 164, 165, 166, 167, 168, 170, 172, 173, 174, 175, 187, 188, 196, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 209, 211, 213, 215, 217, 220, 221, 223, 224, 225, 227, 228, 234, 235, 237, 240, 242, 243, 244, 245, 246, 247, 253, 254, 255, 256, 260, 265, 274, 275, 284, 285, 286, 287, 289, 290, 293, 297, 303, 309, 310, 315, 316, 319, 320, 323, 324, 327, 328, 331, 332, 333, 336, 337, 340, 341, 344, 345, 348, 349, 352, 353, 356, 357, 360, 361, 364, 365, 368, 369, 372, 373, 376, 377, 380, 381, 384, 385, 388, 389, 392, 394, 397, 402, 405, 406, 409, 410, 413, 414, 417, 418, 421, 422, 425, 426, 429, 430, 433, 434, 437, 438, 441, 442, 445, 446, 449, 450, 453, 454, 457, 458, 461, 462, 465, 466, 469, 470, 473, 474, 477, 478, 481, 482, 483, 484, 487, 489, 492, 493, 496, 497, 500, 501, 504, 505, 508, 509, 512, 513, 516, 517, 520, 521, 524, 525, 528, 529, 532, 533, 537, 538, 539, 542, 543, 544, 547, 548, 551, 552, 553, 556, 557, 558, 560, 561, 562, 564, 565, 567, 569, 570, 571, 573, 574, 575, 576, 577, 578, 579, 580, 581, 584, 585, 589, 591, 592, 594, 595, 596, 598, 599, 600, 601, 614, 615, 618, 620, 621, 622, 624, 625, 626, 633, 638, 652, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 673, 674, 676, 677, 679, 680, 682, 683, 685, 686, 688, 689, 691, 692, 695, 696, 698, 700, 702, 703, 705, 706, 708, 709, 711, 712, 714, 719, 721, 722, 724, 725, 727, 728, 730, 731, 733, 734, 736, 740, 741, 744, 746, 749, 751, 754, 756, 757, 760, 761, 762, 765, 766, 769, 770, 773, 774, 777, 778, 781, 782, 785, 790, 793, 794, 795, 796, 799, 800, 803, 804, 807, 808, 811, 812, 815, 816, 817, 818, 819, 838, 839, 842, 843, 844, 845, 846, 847, 848, 849, 851, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 869, 871, 874, 876, 877, 880, 881, 884, 885, 888, 889, 892, 893, 896, 897, 900, 901, 904, 905, 908, 909, 910, 913, 914, 917], "appli": [21, 24, 25, 28, 29, 32, 33, 34, 35, 46, 47, 67, 68, 74, 75, 78, 79, 80, 81, 92, 93, 96, 97, 111, 112, 113, 139, 140, 150, 151, 152, 156, 157, 159, 160, 162, 164, 165, 166, 167, 168, 170, 172, 173, 174, 175, 185, 187, 198, 199, 200, 201, 202, 203, 204, 205, 228, 237, 238, 239, 241, 256, 316, 317, 328, 329, 330, 332, 377, 378, 379, 410, 411, 412, 538, 539, 540, 541, 543, 544, 545, 546, 552, 553, 554, 555, 557, 574, 575, 576, 581, 582, 583, 585, 626, 639, 641, 643, 645, 657, 666, 668, 669, 670, 700, 702, 709, 711, 740, 741, 744, 746, 749, 751, 754, 756, 757, 758, 759, 761, 790, 791, 792, 794, 800, 803, 816, 817, 818, 820, 826, 829, 832, 833, 838, 839, 842, 845, 847, 918], "leaf": [21, 24, 25, 67, 68, 160, 164, 173, 820, 821, 830, 831], "within": [21, 24, 25, 151, 159, 174, 187, 209, 210, 843, 849, 851], "union": [21, 24, 25, 34, 35, 42, 43, 67, 68, 155, 157, 160, 163, 164, 165, 166, 167, 168, 170, 175, 198, 200, 201, 202, 203, 204, 205, 206, 207, 209, 210, 211, 212, 213, 214, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 232, 233, 234, 235, 236, 242, 243, 244, 245, 246, 247, 248, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 264, 265, 281, 282, 283, 284, 285, 287, 290, 291, 292, 293, 298, 304, 306, 308, 309, 310, 311, 314, 315, 316, 319, 320, 323, 324, 327, 328, 331, 333, 336, 337, 340, 341, 344, 345, 348, 349, 352, 353, 356, 357, 360, 361, 364, 365, 368, 369, 372, 373, 376, 377, 380, 381, 384, 385, 388, 389, 392, 394, 397, 398, 401, 402, 405, 406, 409, 410, 413, 414, 417, 418, 421, 422, 425, 426, 429, 430, 433, 434, 437, 438, 441, 442, 445, 446, 449, 450, 453, 454, 457, 458, 461, 462, 465, 466, 469, 470, 473, 474, 477, 478, 481, 482, 483, 484, 487, 489, 492, 493, 496, 497, 500, 501, 504, 505, 508, 509, 512, 513, 516, 517, 520, 521, 524, 525, 528, 529, 532, 533, 537, 538, 542, 543, 547, 548, 551, 552, 553, 556, 560, 561, 564, 565, 567, 570, 571, 574, 575, 576, 578, 579, 580, 581, 582, 584, 589, 591, 592, 594, 595, 596, 605, 608, 609, 614, 615, 620, 621, 622, 624, 625, 626, 628, 629, 631, 634, 636, 639, 641, 643, 645, 647, 649, 652, 654, 657, 658, 660, 662, 663, 664, 666, 669, 670, 671, 673, 674, 676, 677, 679, 680, 682, 683, 685, 686, 688, 689, 691, 692, 695, 696, 698, 700, 702, 703, 705, 706, 708, 709, 711, 712, 714, 715, 716, 718, 719, 720, 721, 722, 724, 725, 727, 728, 730, 731, 733, 734, 736, 737, 739, 740, 741, 744, 746, 749, 751, 754, 756, 757, 760, 762, 765, 766, 769, 770, 773, 774, 777, 778, 781, 782, 785, 786, 789, 790, 793, 795, 796, 799, 800, 803, 804, 807, 808, 811, 812, 815, 816, 817, 818, 819, 820, 821, 822, 831, 832, 838, 839, 842, 843, 844, 845, 846, 848, 849, 851, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 869, 871, 874, 876, 877, 880, 881, 884, 885, 888, 889, 892, 897, 900, 901, 904, 905, 908, 909, 910, 913, 914, 917], "nativearrai": [21, 24, 25, 34, 35, 155, 157, 160, 163, 164, 167, 168, 170, 172, 175, 188, 196, 198, 200, 201, 202, 203, 204, 205, 209, 210, 211, 213, 217, 218, 219, 220, 221, 223, 224, 225, 227, 228, 234, 235, 236, 237, 240, 246, 248, 251, 253, 254, 256, 260, 265, 284, 285, 287, 303, 309, 310, 315, 316, 319, 320, 323, 324, 327, 328, 331, 333, 336, 337, 340, 341, 344, 345, 348, 349, 352, 353, 356, 357, 360, 361, 364, 365, 368, 369, 372, 373, 376, 377, 380, 381, 384, 385, 388, 389, 392, 394, 397, 398, 401, 402, 405, 406, 409, 410, 413, 414, 417, 418, 421, 422, 425, 426, 429, 430, 433, 434, 437, 438, 441, 442, 445, 446, 449, 450, 453, 454, 457, 458, 461, 462, 465, 466, 469, 470, 473, 474, 477, 478, 481, 482, 483, 484, 487, 489, 492, 493, 496, 497, 500, 501, 504, 505, 508, 509, 512, 513, 516, 517, 520, 521, 524, 525, 528, 529, 532, 533, 537, 538, 542, 543, 547, 548, 551, 552, 553, 554, 556, 560, 561, 564, 565, 567, 569, 570, 571, 574, 575, 576, 578, 579, 580, 581, 582, 584, 589, 591, 592, 594, 595, 596, 605, 608, 609, 614, 615, 620, 621, 622, 624, 625, 626, 628, 629, 631, 634, 636, 639, 641, 643, 645, 647, 649, 652, 654, 657, 658, 660, 662, 663, 664, 666, 669, 670, 671, 673, 674, 676, 677, 679, 680, 682, 683, 685, 686, 688, 689, 691, 692, 695, 696, 698, 700, 702, 703, 705, 706, 708, 709, 711, 712, 714, 715, 716, 718, 719, 721, 722, 724, 725, 727, 728, 730, 731, 733, 734, 736, 737, 739, 740, 741, 744, 746, 749, 751, 754, 756, 757, 760, 762, 765, 766, 769, 770, 773, 774, 777, 778, 781, 782, 785, 786, 789, 790, 793, 795, 796, 799, 800, 803, 804, 807, 808, 811, 812, 815, 820, 822, 832, 838, 839, 842, 843, 844, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 869, 871, 874, 876, 877, 880, 881, 884, 885, 888, 889, 892, 897, 900, 901, 904, 905, 908, 909, 910, 913, 914, 917], "mayb": [21, 24, 25, 150, 170, 172], "travers": [21, 24, 25, 67, 68, 164, 170, 172, 820, 832], "lowest": [21, 24, 25, 67, 68, 160, 187, 820, 832, 843, 845, 846], "leav": [21, 24, 25, 67, 68, 69, 70, 156, 157, 159, 160, 164, 165, 167, 168, 173, 174, 756, 800, 803, 820, 821, 822, 830, 831, 832], "to_n": [21, 67, 68], "item": [21, 25, 62, 63, 64, 67, 68, 137, 138, 165, 170, 172, 173, 175, 228, 243, 265, 274, 275, 277, 284, 286, 288, 290, 292, 296, 552, 568, 590, 616, 617, 820, 825, 826, 827, 828, 832, 836, 837, 918], "arraywithcr": 26, "creation": [27, 67, 68, 69, 70, 71, 73, 155, 165, 166, 170, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227], "data_typ": [28, 29, 74, 75, 155, 165, 228, 232, 233, 234, 235, 236, 237, 240, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264], "arraywithdatatyp": 28, "can_cast": [28, 29, 74, 75, 160, 165, 228, 241], "variant": [28, 29, 32, 33, 34, 35, 46, 47, 74, 75, 78, 79, 80, 81, 92, 93, 96, 97, 156, 157, 237, 238, 239, 241, 316, 317, 328, 329, 330, 332, 377, 378, 379, 410, 411, 412, 538, 539, 540, 541, 543, 544, 545, 546, 553, 554, 555, 557, 581, 582, 583, 585, 757, 758, 759, 761, 790, 791, 792, 794, 845, 847], "simpli": [28, 29, 32, 33, 34, 35, 46, 47, 67, 68, 74, 75, 78, 79, 80, 81, 92, 93, 96, 97, 151, 156, 157, 159, 160, 163, 164, 166, 167, 168, 170, 174, 175, 237, 238, 239, 241, 315, 316, 317, 328, 329, 330, 332, 377, 378, 379, 406, 409, 410, 411, 412, 538, 539, 540, 541, 543, 544, 545, 546, 553, 554, 555, 557, 581, 582, 583, 585, 757, 758, 759, 761, 790, 791, 792, 794, 845, 847], "docstr": [28, 29, 32, 33, 34, 35, 46, 47, 74, 75, 78, 79, 80, 81, 92, 93, 96, 97, 152, 153, 154, 155, 160, 164, 168, 209, 220, 228, 237, 238, 239, 240, 241, 315, 316, 317, 328, 329, 330, 331, 332, 333, 336, 353, 356, 373, 376, 377, 378, 379, 380, 385, 388, 410, 411, 412, 413, 493, 496, 509, 512, 525, 528, 529, 532, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 553, 554, 555, 557, 581, 582, 583, 585, 670, 677, 679, 756, 757, 758, 759, 761, 770, 773, 774, 777, 790, 791, 792, 793, 794, 845, 847, 860, 861, 862, 865, 866, 869, 876, 881, 884, 909, 910, 913], "minim": [28, 29, 32, 33, 34, 35, 46, 47, 74, 75, 78, 79, 80, 81, 92, 93, 96, 97, 156, 167, 170, 237, 238, 239, 241, 316, 317, 328, 329, 330, 332, 377, 378, 379, 410, 411, 412, 538, 539, 540, 541, 543, 544, 545, 546, 553, 554, 555, 557, 581, 582, 583, 585, 757, 758, 759, 761, 790, 791, 792, 794, 845, 847], "3": [28, 29, 32, 33, 34, 35, 46, 47, 69, 70, 74, 75, 78, 79, 80, 81, 92, 93, 96, 97, 150, 153, 157, 161, 164, 170, 172, 173, 174, 175, 198, 200, 201, 202, 203, 208, 209, 217, 220, 223, 226, 227, 228, 237, 238, 239, 240, 241, 265, 284, 287, 303, 310, 315, 328, 329, 330, 331, 332, 333, 336, 353, 356, 369, 372, 373, 376, 377, 379, 380, 385, 388, 402, 405, 410, 411, 412, 413, 418, 421, 422, 425, 438, 441, 482, 483, 489, 492, 493, 496, 509, 512, 525, 528, 529, 532, 538, 539, 541, 542, 543, 544, 546, 547, 552, 553, 554, 555, 560, 561, 570, 577, 580, 581, 582, 583, 584, 585, 614, 615, 620, 622, 657, 658, 659, 660, 662, 663, 664, 669, 670, 671, 673, 674, 676, 677, 679, 680, 682, 689, 691, 700, 702, 706, 708, 719, 721, 725, 727, 728, 730, 737, 739, 740, 741, 744, 751, 754, 756, 757, 758, 759, 760, 761, 762, 765, 770, 773, 774, 777, 782, 785, 786, 789, 790, 792, 793, 794, 795, 796, 799, 804, 807, 838, 839, 842, 843, 844, 845, 846, 847, 848, 849, 851, 854, 855, 856, 857, 858, 859, 860, 861, 862, 865, 866, 869, 876, 877, 880, 881, 884, 901, 904, 909, 910, 913, 918], "dtype": [28, 29, 58, 59, 67, 68, 74, 75, 104, 105, 116, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 147, 148, 155, 157, 160, 165, 166, 172, 209, 210, 211, 212, 213, 214, 216, 217, 218, 221, 222, 223, 226, 227, 228, 232, 233, 234, 235, 237, 238, 239, 240, 241, 242, 243, 244, 245, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 264, 265, 305, 315, 369, 372, 552, 560, 561, 605, 621, 657, 665, 756, 770, 773, 838, 839, 842, 843, 849, 851, 855, 856, 857, 865, 871, 874, 876, 893, 894, 895, 896, 897, 900, 901, 902, 903, 904, 909, 910, 913, 918], "float32": [28, 29, 74, 75, 157, 165, 228, 232, 233, 237, 238, 239, 240, 241, 249, 838, 839, 842], "float64": [28, 29, 165, 228, 234, 237, 238, 240, 249], "arraywithdevic": [30, 172], "arraywithelementwis": [32, 152, 163], "ab": [32, 33, 78, 79, 159, 162, 315, 501, 504, 670, 734, 736, 918], "aco": [32, 33, 78, 79, 315, 918], "acosh": [32, 33, 78, 79, 228, 249, 250, 315, 918], "add": [32, 33, 62, 63, 67, 68, 69, 70, 78, 79, 80, 81, 108, 109, 139, 140, 150, 151, 152, 154, 155, 156, 160, 161, 163, 164, 168, 170, 172, 187, 315, 332, 553, 557, 838, 839, 842, 918, 924], "x2": [32, 33, 34, 35, 42, 43, 67, 68, 78, 79, 80, 81, 88, 89, 157, 168, 228, 260, 265, 303, 315, 328, 329, 330, 331, 332, 345, 346, 347, 348, 353, 354, 355, 356, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 389, 390, 391, 392, 393, 394, 395, 396, 397, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 438, 439, 440, 441, 442, 443, 444, 445, 462, 463, 464, 465, 466, 467, 468, 469, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 493, 494, 495, 496, 501, 502, 503, 504, 505, 506, 507, 508, 533, 534, 535, 536, 537, 552, 553, 554, 555, 556, 557, 657, 662, 670, 674, 675, 676, 692, 693, 694, 695, 706, 707, 708, 716, 717, 718, 725, 726, 727, 731, 732, 733, 855, 859], "y": [32, 33, 34, 35, 46, 47, 69, 70, 78, 79, 80, 81, 92, 93, 96, 97, 155, 157, 161, 164, 170, 172, 198, 200, 201, 202, 203, 204, 205, 209, 216, 217, 220, 222, 223, 227, 228, 234, 265, 285, 299, 303, 308, 315, 328, 329, 330, 331, 332, 333, 336, 345, 348, 353, 356, 357, 360, 369, 372, 373, 376, 377, 378, 379, 380, 381, 384, 385, 388, 402, 405, 410, 411, 412, 413, 422, 425, 482, 483, 489, 492, 493, 496, 509, 512, 525, 528, 529, 532, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 552, 553, 554, 555, 556, 557, 560, 561, 569, 570, 577, 578, 580, 581, 582, 583, 584, 585, 614, 620, 621, 622, 626, 633, 657, 663, 664, 666, 670, 671, 673, 674, 676, 677, 679, 689, 691, 706, 708, 725, 727, 728, 730, 740, 741, 744, 746, 749, 751, 754, 756, 757, 758, 759, 760, 761, 762, 765, 770, 773, 774, 777, 782, 785, 786, 789, 790, 791, 792, 793, 794, 795, 804, 807, 843, 844, 845, 846, 847, 848, 849, 851, 854, 855, 856, 857, 858, 859, 860, 862, 865, 866, 869, 876, 877, 880, 881, 884, 897, 900, 901, 904, 909, 910, 913], "5": [32, 33, 34, 35, 46, 47, 69, 70, 74, 75, 78, 79, 80, 81, 92, 93, 96, 97, 125, 136, 151, 153, 157, 161, 168, 172, 173, 174, 198, 200, 201, 203, 209, 217, 220, 223, 226, 227, 228, 237, 239, 240, 241, 265, 287, 303, 315, 328, 329, 330, 331, 332, 333, 336, 349, 352, 353, 356, 369, 372, 373, 376, 377, 378, 379, 380, 385, 388, 410, 411, 412, 413, 422, 425, 482, 483, 489, 492, 493, 496, 509, 512, 525, 528, 529, 532, 538, 539, 541, 542, 543, 544, 546, 547, 552, 553, 554, 561, 570, 580, 581, 584, 585, 615, 620, 657, 660, 662, 663, 669, 670, 671, 673, 674, 676, 677, 679, 680, 682, 689, 691, 706, 708, 725, 727, 728, 730, 740, 751, 754, 756, 757, 758, 759, 760, 761, 762, 765, 770, 773, 774, 777, 782, 785, 786, 789, 790, 792, 793, 794, 795, 804, 807, 838, 839, 842, 843, 844, 845, 846, 847, 854, 855, 857, 858, 859, 860, 861, 862, 865, 866, 869, 876, 877, 880, 881, 884, 909, 910, 913], "6": [32, 33, 46, 47, 69, 70, 78, 79, 80, 81, 96, 97, 153, 157, 161, 164, 172, 173, 174, 198, 200, 201, 203, 209, 217, 265, 287, 303, 315, 328, 329, 330, 331, 332, 333, 336, 353, 356, 357, 360, 373, 376, 377, 378, 379, 380, 385, 388, 410, 413, 422, 425, 482, 483, 489, 492, 509, 512, 525, 528, 529, 532, 538, 542, 543, 547, 552, 561, 570, 580, 581, 584, 585, 615, 620, 657, 660, 663, 664, 669, 670, 674, 676, 677, 679, 680, 682, 706, 708, 719, 721, 725, 727, 740, 741, 744, 751, 754, 756, 757, 758, 760, 762, 765, 770, 773, 774, 777, 782, 785, 786, 789, 790, 793, 795, 804, 807, 838, 839, 842, 843, 844, 845, 846, 847, 855, 856, 859, 860, 861, 862, 876, 877, 880, 881, 884], "z": [32, 33, 34, 35, 69, 70, 78, 79, 80, 81, 157, 161, 164, 170, 172, 265, 299, 315, 328, 329, 330, 331, 332, 353, 356, 373, 376, 422, 425, 482, 483, 552, 560, 561, 580, 581, 582, 583, 585, 614, 670, 674, 676, 740, 741, 744, 746, 749, 756, 757, 760, 855, 856, 876, 877, 880, 881, 884], "7": [32, 33, 46, 47, 69, 70, 78, 79, 96, 97, 151, 153, 157, 160, 164, 167, 198, 200, 201, 265, 287, 315, 328, 329, 330, 331, 332, 353, 356, 357, 360, 373, 376, 377, 380, 385, 388, 402, 405, 410, 413, 422, 425, 482, 483, 509, 512, 525, 528, 538, 542, 543, 547, 552, 561, 570, 580, 626, 628, 629, 631, 639, 641, 657, 663, 664, 669, 670, 674, 676, 677, 679, 680, 682, 706, 708, 725, 727, 740, 741, 744, 746, 749, 751, 754, 756, 757, 758, 760, 770, 773, 774, 777, 782, 785, 795, 804, 807, 838, 839, 842, 843, 844, 845, 846, 847, 848, 849, 851, 855, 859, 860, 861, 876, 877, 880], "9": [32, 33, 46, 47, 69, 70, 78, 79, 82, 83, 96, 97, 141, 142, 143, 153, 157, 173, 174, 315, 328, 329, 330, 331, 332, 353, 356, 357, 360, 482, 483, 509, 512, 525, 528, 529, 532, 552, 580, 626, 628, 629, 630, 631, 632, 639, 640, 641, 642, 657, 660, 663, 664, 670, 674, 676, 677, 679, 680, 682, 706, 708, 719, 721, 725, 727, 756, 757, 758, 760, 774, 777, 782, 785, 790, 793, 795, 843, 844, 845, 846, 847, 855, 859, 860, 861, 876, 877, 880], "asin": [32, 33, 78, 79, 315, 918], "asinh": [32, 33, 78, 79, 315, 918], "atan": [32, 33, 78, 79, 315, 918], "atan2": [32, 33, 78, 79, 315, 918], "atanh": [32, 33, 78, 79, 315, 918], "bitwise_and": [32, 33, 78, 79, 315], "bitwise_invert": [32, 33, 78, 79, 315], "bitwise_left_shift": [32, 33, 78, 79, 315], "bitwise_or": [32, 33, 78, 79, 315], "bitwise_right_shift": [32, 33, 78, 79, 315], "bitwise_xor": [32, 33, 78, 79, 315], "ceil": [32, 33, 78, 79, 209, 210, 315, 918], "cosh": [32, 33, 78, 79, 315, 918], "divid": [32, 33, 67, 68, 78, 79, 157, 163, 315, 414, 417, 552, 616, 756, 795], "equal": [32, 33, 67, 68, 78, 79, 157, 164, 165, 209, 214, 216, 217, 228, 234, 315, 361, 364, 369, 372, 426, 429, 430, 433, 501, 504, 509, 512, 552, 553, 556, 560, 561, 670, 680, 682, 700, 702, 709, 711, 756, 757, 760, 766, 769, 795, 812, 815, 843, 849, 851, 860, 861, 862, 864, 865, 866, 869, 871, 874, 876, 885, 888, 897, 900, 901, 904, 905, 908], "erf": [32, 33, 78, 79, 315], "exp": [32, 33, 78, 79, 315, 406, 409, 462, 465, 918], "expm1": [32, 33, 78, 79, 315], "floor": [32, 33, 78, 79, 315, 369, 372, 552, 578, 918], "floor_divid": [32, 33, 78, 79, 315], "greater": [32, 33, 67, 68, 78, 79, 315, 320, 323, 333, 336, 345, 348, 361, 364, 369, 372, 410, 413, 414, 417, 501, 504, 505, 508, 513, 516, 548, 551, 670, 674, 676, 756, 796, 799, 843, 849, 851], "greater_equ": [32, 33, 78, 79, 315], "isfinit": [32, 33, 78, 79, 315], "isinf": [32, 33, 78, 79, 315], "isnan": [32, 33, 78, 79, 315], "less_equ": [32, 33, 78, 79, 315], "log": [32, 33, 78, 79, 150, 151, 160, 164, 167, 170, 173, 209, 219, 315, 454, 457, 462, 465, 670, 715, 918], "log10": [32, 33, 78, 79, 315], "log1p": [32, 33, 78, 79, 315], "log2": [32, 33, 78, 79, 315], "logaddexp": [32, 33, 78, 79, 315], "logical_and": [32, 33, 78, 79, 315, 918], "logical_not": [32, 33, 78, 79, 315, 918], "logical_or": [32, 33, 78, 79, 315, 918], "logical_xor": [32, 33, 78, 79, 315], "multipli": [32, 33, 78, 79, 157, 161, 163, 315, 552, 570], "neg": [32, 33, 78, 79, 160, 164, 167, 198, 200, 209, 210, 214, 315, 426, 429, 430, 433, 484, 487, 501, 504, 505, 508, 670, 719, 721, 731, 733, 734, 736, 756, 774, 777, 790, 793, 909, 910, 913, 914, 917], "not_equ": [32, 33, 78, 79, 315], "pow": [32, 33, 78, 79, 315], "remaind": [32, 33, 67, 68, 78, 79, 315, 552, 578, 756, 795], "sin": [32, 33, 78, 79, 163, 170, 315, 552, 579, 918], "sinh": [32, 33, 78, 79, 315, 918], "sqrt": [32, 33, 78, 79, 315, 670, 734, 736], "squar": [32, 33, 78, 79, 315, 525, 528, 657, 660, 670, 671, 673, 677, 679, 683, 685, 686, 688, 689, 691, 699, 715, 716, 718, 719, 721], "subtract": [32, 33, 78, 79, 157, 163, 315], "tan": [32, 33, 78, 79, 156, 160, 164, 167, 168, 170, 315, 333, 336, 539, 860, 861, 862, 865, 866, 869, 918], "56": [32, 33, 78, 79, 157, 315, 525, 528, 538, 539, 540, 541, 542, 670, 706, 708, 876, 877, 880], "19": [32, 33, 78, 79, 157, 315, 373, 376, 538, 539, 540, 541, 542, 670, 680, 682], "tanh": [32, 33, 78, 79, 170, 198, 315, 544, 918], "762": [32, 33, 78, 79, 198, 205, 315, 543, 545, 546, 547], "964": [32, 33, 78, 79, 198, 205, 315, 543, 545, 546, 547], "trunc": [32, 33, 78, 79, 315], "elementwis": [33, 67, 68, 79, 155, 160, 170, 175, 316, 319, 320, 323, 324, 327, 328, 331, 333, 336, 337, 340, 341, 344, 345, 348, 349, 352, 353, 356, 357, 360, 361, 364, 365, 368, 369, 372, 373, 376, 377, 380, 381, 384, 385, 388, 389, 392, 394, 397, 398, 401, 402, 405, 406, 409, 410, 413, 414, 417, 418, 421, 422, 425, 426, 429, 430, 433, 434, 437, 438, 441, 442, 445, 446, 449, 450, 453, 454, 457, 458, 461, 462, 465, 466, 469, 470, 473, 474, 477, 478, 481, 482, 483, 484, 487, 489, 492, 493, 496, 497, 500, 501, 504, 505, 508, 509, 512, 513, 516, 517, 520, 521, 524, 525, 528, 529, 532, 533, 537, 538, 542, 543, 547, 548, 551], "arraywithgener": [34, 172], "all_equ": [34, 35, 80, 81, 552, 557], "equality_matrix": [34, 35, 80, 81, 552, 553, 554, 555, 556, 557], "x1": [34, 35, 78, 79, 80, 81, 157, 168, 228, 260, 265, 303, 315, 328, 331, 332, 345, 348, 353, 356, 361, 364, 365, 368, 369, 372, 373, 376, 389, 392, 393, 394, 397, 414, 417, 418, 421, 422, 425, 438, 441, 442, 445, 462, 465, 466, 469, 474, 477, 478, 481, 482, 483, 484, 487, 488, 493, 496, 501, 504, 505, 508, 533, 534, 537, 552, 553, 554, 555, 556, 557, 560, 657, 662, 670, 674, 676, 692, 695, 706, 708, 716, 718, 725, 727, 731, 733, 855, 859], "mix": [34, 35, 69, 70, 154, 157, 159, 170, 228, 256, 265, 303, 315, 328, 331, 353, 356, 373, 376, 422, 425, 482, 483, 493, 496, 552, 553, 554, 569, 577, 580, 581, 584, 620, 621, 622, 657, 660, 663, 664, 669, 670, 725, 727, 740, 741, 744, 751, 754, 756, 757, 760, 838, 839, 842, 855, 859, 876, 877, 880, 885, 888], "gather_nd": [34, 35, 67, 68, 80, 81, 552, 585, 918], "indic": [34, 35, 67, 68, 80, 81, 125, 126, 127, 128, 129, 130, 131, 132, 137, 138, 153, 171, 175, 198, 203, 315, 513, 516, 552, 580, 581, 582, 583, 584, 585, 592, 605, 608, 609, 657, 658, 659, 660, 661, 662, 663, 664, 670, 734, 736, 756, 790, 793, 820, 821, 823, 825, 827, 828, 829, 831, 834, 835, 836, 837, 838, 839, 842, 843, 844, 855, 856, 857, 858, 860, 861, 863, 865, 866, 869, 871, 874, 918, 921, 923], "gener": [35, 62, 63, 67, 68, 81, 108, 109, 141, 145, 151, 152, 153, 154, 155, 156, 157, 160, 163, 164, 165, 166, 167, 168, 169, 170, 172, 174, 175, 186, 187, 206, 209, 210, 218, 219, 228, 237, 240, 315, 333, 336, 373, 376, 377, 380, 385, 388, 410, 413, 493, 496, 505, 508, 525, 528, 529, 532, 553, 556, 558, 559, 560, 561, 562, 563, 564, 565, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 584, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 638, 756, 770, 773, 790, 793, 843, 844, 845, 846, 849, 851, 853, 860, 861, 862, 865, 866, 869, 876, 881, 884, 918], "arraywithgradi": [36, 172], "gradient": [37, 67, 68, 83, 141, 142, 143, 144, 145, 146, 155, 164, 173, 174, 186, 187, 265, 309, 628, 629, 631, 633, 634, 636, 638, 639, 641, 643, 645, 647, 649, 651, 652, 653, 654, 655, 656, 816, 817, 818, 819, 918], "arraywithimag": [38, 172], "imag": [39, 85, 150, 153, 155, 170, 171, 173, 175, 186, 657, 658, 659, 660, 661, 663, 664, 918], "arraywithlay": 40, "linear_algebra": [42, 43, 88, 89, 155, 172, 670, 671, 673, 674, 676, 677, 679, 680, 682, 683, 685, 686, 688, 689, 691, 692, 695, 696, 698, 699, 700, 702, 703, 705, 706, 708, 709, 711, 712, 714, 715, 716, 718, 719, 721, 722, 724, 725, 727, 728, 730, 731, 733, 734, 736, 737, 739], "arraywithlinearalgebra": 42, "choleski": [42, 43, 69, 70, 670], "upper": [42, 43, 67, 68, 209, 214, 225, 670, 671, 672, 673, 712, 714, 843, 849, 851], "cross": [42, 43, 69, 70, 670, 740, 741, 744, 746, 749, 751, 754, 918], "axi": [42, 43, 44, 45, 46, 47, 56, 57, 58, 59, 60, 61, 67, 68, 90, 91, 92, 93, 102, 103, 104, 105, 106, 107, 157, 160, 164, 165, 167, 168, 170, 172, 175, 186, 198, 203, 209, 218, 219, 265, 267, 270, 277, 290, 291, 292, 293, 294, 295, 296, 297, 309, 552, 570, 571, 580, 624, 670, 674, 675, 676, 680, 682, 731, 732, 733, 734, 735, 736, 740, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 762, 763, 764, 765, 766, 769, 770, 771, 772, 773, 774, 775, 776, 777, 782, 783, 784, 785, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 807, 808, 811, 812, 815, 843, 854, 855, 856, 857, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917], "det": [42, 43, 69, 70, 670], "diagon": [42, 43, 69, 70, 209, 214, 224, 225, 670, 728, 730], "offset": [42, 43, 48, 49, 94, 95, 670, 680, 681, 682, 728, 729, 730, 838, 839, 840, 841, 842], "axis1": [42, 43, 46, 47, 92, 93, 670, 680, 681, 682, 756, 804, 805, 806, 807], "axis2": [42, 43, 670, 680, 681, 682], "eigh": [42, 43, 69, 70, 670], "namedtupl": [42, 43, 670, 683, 684, 685, 712, 713, 714, 719, 721, 860, 861, 862], "eigvalsh": [42, 43, 69, 70, 670], "inv": [42, 43, 69, 70, 172, 670, 918], "matmul": [42, 43, 88, 89, 155, 161, 170, 670, 719, 721, 918], "matrix_norm": [42, 43, 67, 68, 670], "ord": [42, 43, 67, 68, 670, 696, 697, 698, 734, 735, 736], "fro": [42, 43, 670, 696, 697, 698], "keepdim": [42, 43, 58, 59, 60, 61, 67, 68, 104, 105, 106, 107, 552, 624, 670, 696, 697, 698, 734, 735, 736, 855, 856, 857, 876, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917], "matrix_rank": [42, 43, 69, 70, 670], "rtol": [42, 43, 670, 700, 701, 702, 709, 710, 711], "matrix_transpos": [42, 43, 69, 70, 172, 670], "outer": [42, 43, 69, 70, 670, 816, 817, 818, 819], "pinv": [42, 43, 69, 70, 670, 918], "qr": [42, 43, 69, 70, 670], "mode": [42, 43, 67, 68, 150, 157, 164, 187, 206, 207, 265, 294, 295, 296, 297, 309, 315, 328, 331, 484, 487, 670, 712, 713, 714], "reduc": [42, 43, 67, 68, 172, 265, 309, 552, 575, 670, 712, 713, 714, 855, 856, 857, 876, 881, 884, 885, 888, 889, 892, 893, 896, 897, 900, 901, 904, 905, 908, 909, 910, 913, 914, 917], "solv": [42, 43, 69, 70, 171, 186, 670], "svd": [42, 43, 69, 70, 670, 918], "full_matric": [42, 43, 670, 719, 720, 721], "svdval": [42, 43, 69, 70, 670], "tensordot": [42, 43, 69, 70, 670], "ax": [42, 43, 46, 47, 67, 68, 92, 93, 155, 157, 165, 172, 265, 309, 552, 570, 670, 696, 698, 716, 718, 725, 726, 727, 734, 736, 756, 766, 769, 774, 777, 778, 779, 780, 781, 790, 793, 796, 799, 804, 807, 812, 815, 855, 856, 857, 876, 881, 884, 885, 888, 889, 892, 893, 896, 897, 900, 901, 904, 905, 908, 909, 910, 913, 914, 917], "trace": [42, 43, 67, 68, 69, 70, 170, 187, 552, 598, 599, 601, 670], "vecdot": [42, 43, 69, 70, 670], "vector_norm": [42, 43, 67, 68, 670], "vector_to_skew_symmetric_matrix": [42, 43, 69, 70, 670, 918], "arraywithloss": 44, "binary_cross_entropi": [44, 45, 90, 91, 740], "pred": [44, 45, 90, 91, 160, 164, 167, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755], "epsilon": [44, 45, 48, 49, 82, 83, 90, 91, 94, 95, 139, 140, 141, 142, 143, 160, 164, 167, 174, 626, 628, 629, 630, 631, 632, 639, 640, 641, 642, 670, 700, 702, 709, 711, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 838, 839, 840, 841, 842], "1e": [44, 45, 48, 49, 82, 83, 90, 91, 94, 95, 141, 142, 143, 144, 146, 160, 164, 167, 174, 175, 552, 588, 626, 628, 629, 630, 631, 632, 639, 640, 641, 642, 670, 719, 721, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 838, 839, 840, 841, 842, 918], "07": [44, 45, 82, 83, 90, 91, 141, 142, 143, 174, 626, 628, 629, 630, 631, 632, 639, 640, 641, 642, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755], "cross_entropi": [44, 45, 90, 91, 160, 164, 167, 740, 751, 754], "sparse_cross_entropi": [44, 45, 90, 91, 740], "loss": [45, 91, 155, 160, 173, 174, 175, 741, 744, 746, 749, 751, 754, 918], "arraywithmanipul": 46, "clip": [46, 47, 67, 68, 92, 93, 160, 164, 167, 170, 173, 175, 315, 482, 483, 552, 564, 565, 567, 756, 761, 918], "x_min": [46, 47, 67, 68, 92, 93, 170, 175, 756, 757, 758, 759, 760, 761], "x_max": [46, 47, 67, 68, 92, 93, 170, 175, 756, 757, 758, 759, 760, 761], "roll": [46, 47, 92, 93, 164, 168, 756, 757, 758, 794], "8": [46, 47, 69, 70, 78, 79, 96, 97, 125, 136, 150, 153, 157, 164, 169, 173, 198, 202, 265, 287, 315, 328, 331, 332, 353, 356, 377, 380, 385, 388, 422, 425, 482, 483, 509, 512, 525, 528, 529, 532, 543, 547, 552, 561, 580, 657, 664, 670, 674, 676, 677, 679, 680, 682, 706, 708, 725, 727, 740, 741, 744, 756, 757, 758, 760, 774, 777, 782, 785, 795, 843, 844, 845, 846, 847, 855, 859, 860, 861, 876, 877, 880, 918], "concat": [46, 47, 67, 68, 92, 93, 265, 294, 295, 296, 297, 309, 552, 579, 756, 918], "xs": [46, 47, 92, 93, 164, 265, 288, 292, 294, 295, 296, 552, 553, 556, 561, 626, 633, 756, 762, 763, 764, 765], "constant_pad": [46, 47, 92, 93, 756], "pad_width": [46, 47, 92, 93, 756, 766, 767, 768, 769, 812, 813, 814, 815], "expand_dim": [46, 47, 92, 93, 170, 173, 756, 918], "flip": [46, 47, 92, 93, 172, 173, 175, 315, 357, 360, 756, 782, 785, 918], "permute_dim": [46, 47, 92, 93, 756], "repeat": [46, 47, 67, 68, 92, 93, 151, 156, 157, 161, 163, 164, 552, 576, 756, 808, 811], "reshap": [46, 47, 67, 68, 92, 93, 167, 170, 172, 175, 756, 918], "shape": [46, 47, 67, 68, 92, 93, 96, 97, 125, 127, 128, 129, 130, 131, 132, 139, 140, 151, 155, 156, 157, 165, 166, 167, 168, 170, 172, 173, 174, 175, 198, 201, 209, 212, 213, 216, 217, 220, 222, 223, 224, 225, 226, 227, 228, 234, 235, 236, 265, 277, 305, 310, 315, 316, 319, 320, 323, 324, 327, 328, 331, 333, 336, 337, 340, 341, 344, 345, 348, 353, 356, 357, 360, 361, 364, 365, 368, 369, 372, 373, 376, 377, 380, 381, 384, 385, 388, 402, 405, 406, 409, 410, 413, 422, 425, 426, 429, 430, 433, 434, 437, 438, 441, 446, 449, 450, 453, 454, 457, 458, 461, 462, 465, 466, 469, 470, 473, 474, 477, 478, 481, 484, 487, 489, 492, 493, 496, 501, 504, 505, 508, 509, 512, 513, 516, 517, 520, 521, 524, 525, 528, 529, 532, 533, 537, 538, 542, 543, 547, 552, 565, 567, 578, 581, 584, 589, 605, 608, 609, 615, 657, 659, 660, 661, 663, 664, 669, 670, 671, 673, 674, 676, 677, 679, 680, 682, 683, 685, 686, 688, 689, 691, 692, 695, 700, 702, 703, 705, 706, 708, 709, 711, 712, 714, 716, 718, 719, 721, 722, 724, 728, 730, 731, 733, 740, 741, 744, 746, 749, 751, 754, 756, 757, 760, 762, 765, 766, 769, 770, 773, 774, 777, 778, 781, 782, 785, 786, 787, 788, 789, 790, 793, 795, 796, 799, 800, 803, 804, 807, 812, 815, 843, 845, 846, 847, 848, 849, 851, 852, 855, 856, 858, 865, 866, 869, 871, 874, 876, 877, 880, 909, 910, 913, 914, 917, 918], "shift": [46, 47, 92, 93, 157, 168, 315, 361, 364, 369, 372, 756, 790, 791, 792, 793, 794], "squeez": [46, 47, 92, 93, 756, 918], "stack": [46, 47, 67, 68, 92, 93, 125, 134, 170, 209, 224, 225, 670, 677, 679, 680, 682, 683, 685, 686, 688, 689, 691, 692, 695, 699, 700, 702, 703, 705, 709, 711, 712, 714, 719, 721, 722, 724, 728, 730, 756, 820, 821, 830, 831, 918], "swapax": [46, 47, 92, 93, 756], "axis0": [46, 47, 92, 93, 756, 804, 805, 806, 807], "tile": [46, 47, 92, 93, 756, 918], "rep": [46, 47, 92, 93, 756, 808, 809, 810, 811], "zero_pad": [46, 47, 92, 93, 756, 918], "arraywithnorm": 48, "layer_norm": [48, 49, 94, 95, 838], "normalized_idx": [48, 49, 94, 95, 838, 839, 840, 841, 842], "05": [48, 49, 94, 95, 265, 838, 839, 840, 841, 842], "scale": [48, 49, 94, 95, 125, 133, 136, 141, 144, 164, 265, 307, 308, 626, 643, 645, 657, 665, 668, 669, 838, 839, 840, 841, 842], "new_std": [48, 49, 94, 95, 139, 140, 838, 839, 840, 841, 842], "norm": [49, 67, 68, 95, 140, 141, 143, 155, 552, 564, 565, 567, 670, 696, 698, 734, 736, 839, 842, 918], "arraywithrandom": [50, 172], "random": [51, 67, 68, 97, 155, 166, 175, 186, 844, 845, 846, 848, 849, 851, 853, 854, 918], "arraywithsearch": 52, "arraywithset": 54, "arraywithsort": 56, "argsort": [56, 57, 102, 103, 865], "descend": [56, 57, 102, 103, 670, 719, 721, 722, 724, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875], "stabl": [56, 57, 102, 103, 150, 170, 187, 552, 587, 588, 610, 611, 616, 617, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875], "sort": [57, 67, 68, 69, 70, 71, 103, 155, 670, 683, 685, 719, 721, 722, 724, 866, 869], "arraywithstatist": 58, "einsum": [58, 59, 104, 105, 876], "equat": [58, 59, 104, 105, 670, 716, 718, 876, 877, 878, 879, 880], "max": [58, 59, 67, 68, 104, 105, 141, 143, 228, 248, 251, 315, 482, 552, 564, 565, 567, 575, 608, 609, 670, 700, 702, 709, 711, 876], "mean": [58, 59, 67, 68, 104, 105, 108, 109, 116, 150, 151, 154, 157, 160, 164, 165, 166, 167, 170, 172, 173, 174, 175, 186, 187, 265, 294, 295, 296, 297, 309, 552, 575, 816, 817, 818, 819, 820, 826, 843, 848, 860, 861, 876, 918], "min": [58, 59, 67, 68, 104, 105, 228, 248, 251, 315, 483, 552, 575, 608, 609, 616, 670, 712, 714, 719, 721, 722, 724, 734, 736, 876], "prod": [58, 59, 67, 68, 104, 105, 157, 165, 552, 575, 876], "std": [58, 59, 104, 105, 157, 843, 848, 860, 861, 876], "correct": [58, 59, 104, 105, 151, 152, 154, 160, 164, 165, 166, 168, 228, 260, 756, 757, 760, 876, 897, 898, 899, 900, 905, 906, 907, 908, 918], "sum": [58, 59, 67, 68, 104, 105, 160, 164, 165, 167, 170, 265, 294, 295, 296, 297, 309, 315, 328, 331, 462, 465, 552, 571, 575, 608, 609, 657, 669, 670, 719, 721, 728, 730, 734, 736, 876, 877, 880, 897, 900], "var": [58, 59, 104, 105, 108, 109, 157, 170, 816, 817, 818, 876], "statist": [59, 105, 108, 109, 155, 165, 877, 880, 881, 884, 885, 888, 889, 892, 893, 896, 897, 900, 901, 904, 905, 908], "arraywithutil": 60, "util": [61, 107, 155, 166, 265, 298, 910, 913, 914, 917], "add_ivy_array_instance_method": 62, "cl": [62, 63, 108, 109], "to_ignor": [62, 63, 108, 109, 820, 831], "loop": [62, 63, 108, 109, 161, 187, 816, 817, 818, 819], "_wrap_funct": [62, 63, 108, 109, 160, 162], "shown": [62, 63, 67, 68, 108, 109, 151, 157, 168, 170, 172, 187, 209, 220, 315, 353, 356, 373, 376, 385, 388, 509, 512, 543, 547, 670, 677, 679, 756, 770, 773, 774, 777, 860, 861, 862, 865, 866, 869], "appropri": [62, 63, 108, 109, 151, 162, 315, 328, 331, 484, 487, 855, 856], "toi": [62, 63, 108, 109], "arrayexampl": [62, 63], "hasattr": [62, 63, 108, 109, 172], "relu": [62, 63, 69, 70, 173, 174, 198, 199, 200, 918], "softmax": [62, 63, 69, 70, 198, 657, 668, 669, 918], "empti": [64, 67, 68, 69, 70, 163, 165, 166, 209, 210, 876, 897, 900, 901, 904, 909, 910, 913, 914, 917], "dictionari": [64, 67, 68, 69, 70, 71, 173, 187, 265, 308], "map": [64, 67, 68, 69, 70, 71, 125, 136, 159, 160, 164, 168, 173, 186, 187, 265, 274, 820, 827, 828, 832, 833], "pair": [64, 315, 345, 348, 657, 669, 670, 674, 676], "via": [64, 155, 164, 165, 166, 167, 170, 172, 173, 186, 820, 821, 830, 831], "k": [64, 154, 170, 209, 214, 224, 225, 552, 560, 657, 669, 670, 692, 695, 712, 714, 716, 718, 719, 721, 722, 724, 728, 730, 843, 848, 849, 851, 855, 858], "v": [64, 125, 126, 127, 128, 129, 130, 131, 132, 134, 135, 136, 137, 138, 139, 140, 141, 145, 147, 148, 151, 170, 173, 174, 175, 657, 669, 918], "__delitem__": 64, "delet": [64, 151, 153], "__iter__": 64, "__len__": 64, "len": [64, 172, 175, 209, 220], "__reversed__": 64, "revers": [64, 69, 70, 152, 156, 157, 175, 187, 552, 573, 756, 774, 777], "remov": [64, 67, 68, 151, 152, 153, 156, 159, 160, 165, 167, 175, 670, 680, 682, 692, 695, 728, 730, 756, 796, 799, 816, 817, 818], "fromkei": 64, "els": [64, 151, 152, 155, 160, 161, 167, 170, 172, 174, 175, 187, 552, 562, 573, 577, 820, 830], "view": [64, 150, 151, 209, 215, 657, 660, 664], "correspond": [64, 67, 68, 69, 70, 151, 156, 157, 158, 160, 163, 164, 165, 168, 228, 235, 315, 345, 348, 501, 504, 670, 674, 676, 683, 685, 716, 718, 756, 762, 765, 790, 793, 843, 844, 855, 856, 857, 860, 861, 862, 864, 876, 893, 896, 897, 900, 901, 904, 905, 908], "found": [64, 67, 68, 69, 70, 71, 150, 151, 156, 163, 164, 265, 299], "keyerror": 64, "popitem": 64, "lifo": 64, "setdefault": 64, "insert": [64, 756, 770, 773, 820, 825, 855, 856], "updat": [64, 67, 68, 114, 115, 141, 142, 143, 144, 145, 146, 150, 151, 152, 153, 154, 157, 158, 162, 163, 164, 165, 168, 170, 172, 173, 175, 187, 265, 274, 552, 596, 608, 609, 626, 628, 629, 631, 634, 636, 639, 641, 643, 645, 647, 649, 657, 667, 816, 817, 818, 820, 827, 828, 836, 837], "lack": 64, "containerwithactiv": [65, 69, 70], "dict_in": [65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107], "queue": [65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 173, 265, 274, 275, 552, 607, 612], "queue_load_s": [65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107], "container_combine_method": [65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107], "list_join": [65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107], "queue_timeout": [65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 552], "print_limit": [65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107], "key_length_limit": [65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107], "print_ind": [65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107], "print_line_spac": [65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107], "ivyh": [65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107], "default_key_color": [65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107], "green": [65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 150, 151, 926, 927], "keyword_color_dict": [65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107], "rebuild_child_contain": [65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107], "types_to_iteratively_nest": [65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107], "alphabetical_kei": [65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107], "containerbas": [65, 66, 67, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 164], "__getitem__": [67, 68, 164], "queri": [67, 68, 125, 136, 164, 165, 172, 265, 298, 308, 657, 668, 669], "slice": [67, 68, 552, 580, 581, 584, 820, 829], "chain": [67, 68, 147, 148, 163, 164, 174, 175, 187, 816, 817, 818, 820, 833], "element": [67, 68, 125, 133, 156, 170, 175, 198, 199, 200, 201, 202, 203, 204, 205, 209, 210, 216, 217, 224, 225, 265, 288, 292, 296, 315, 316, 319, 320, 323, 324, 327, 328, 331, 333, 336, 337, 340, 341, 344, 345, 348, 349, 352, 353, 356, 357, 360, 361, 364, 365, 368, 369, 372, 373, 376, 377, 380, 381, 384, 385, 388, 389, 392, 394, 397, 398, 401, 402, 405, 406, 409, 410, 413, 414, 417, 418, 421, 422, 425, 426, 429, 430, 433, 434, 437, 438, 441, 442, 445, 446, 449, 450, 453, 454, 457, 458, 461, 462, 465, 466, 469, 470, 473, 474, 477, 478, 481, 482, 483, 484, 487, 489, 492, 493, 496, 497, 500, 501, 504, 505, 508, 509, 512, 513, 516, 517, 520, 521, 524, 525, 528, 529, 532, 533, 537, 538, 542, 543, 547, 548, 551, 552, 560, 561, 564, 565, 567, 570, 571, 578, 592, 621, 622, 657, 665, 670, 674, 676, 683, 685, 692, 695, 712, 714, 719, 721, 756, 757, 760, 774, 777, 782, 785, 790, 793, 795, 796, 799, 843, 844, 855, 858, 859, 860, 861, 862, 863, 864, 865, 871, 874, 876, 877, 880, 881, 884, 885, 888, 889, 892, 893, 896, 897, 900, 901, 904, 905, 908, 909, 910, 913, 914, 917], "represent": [67, 68, 69, 70, 71, 186, 208, 228, 232, 233, 248, 251, 265, 281, 282, 315, 316, 319, 328, 331, 353, 356, 365, 368, 373, 376, 478, 481, 484, 487, 552, 558, 615, 620], "around": [67, 68, 69, 70, 71, 151, 160, 163, 168, 172, 187], "sequenc": [67, 68, 69, 70, 71, 125, 134, 139, 140, 147, 148, 157, 165, 186, 265, 274, 275, 552, 561, 602, 756, 795, 800, 803, 843, 845, 846, 876, 881, 884], "multiprocess": [67, 68, 69, 70, 71, 173, 187, 265, 274, 552], "asynchron": [67, 68, 69, 70, 71], "wait": [67, 68, 69, 70, 71, 151], "dimens": [67, 68, 69, 70, 71, 125, 126, 127, 128, 129, 130, 131, 132, 135, 136, 157, 170, 173, 198, 203, 209, 224, 225, 265, 296, 552, 574, 575, 576, 579, 589, 605, 624, 657, 658, 659, 660, 661, 662, 663, 664, 667, 670, 671, 673, 674, 676, 677, 679, 680, 682, 683, 685, 686, 688, 689, 691, 692, 695, 696, 698, 700, 702, 703, 705, 709, 711, 712, 714, 716, 718, 719, 721, 722, 724, 728, 730, 731, 733, 734, 736, 740, 746, 749, 751, 754, 756, 762, 765, 770, 773, 774, 777, 778, 781, 782, 785, 786, 789, 790, 793, 795, 796, 799, 800, 803, 816, 817, 818, 819, 843, 854, 855, 856, 857, 858, 860, 861, 862, 864, 876, 877, 880, 881, 884, 885, 888, 889, 892, 893, 896, 897, 900, 901, 904, 905, 908, 909, 910, 913, 914, 917], "combin": [67, 68, 69, 70, 71, 151, 157, 159, 160, 163, 164, 175, 670, 674, 676], "arriv": [67, 68, 69, 70, 71], "timeout": [67, 68, 69, 70, 71, 265, 274, 275, 552, 607, 612], "limit": [67, 68, 69, 70, 71, 151, 157, 159, 170, 173, 175, 187, 228, 248, 251, 552, 564, 565, 567, 756, 757, 760], "maximum": [67, 68, 69, 70, 71, 157, 170, 173, 175, 265, 289, 293, 297, 309, 315, 552, 564, 565, 567, 579, 626, 639, 641, 756, 757, 760, 820, 832, 855, 856, 876, 881, 884, 889, 892, 918], "length": [67, 68, 69, 70, 71, 173, 209, 210, 220, 670, 719, 721, 722, 724, 756, 786, 789], "whitespac": [67, 68, 69, 70, 71], "indent": [67, 68, 69, 70, 71, 173], "extra": [67, 68, 69, 70, 71, 157, 162, 163, 170, 626, 633], "newlin": [67, 68, 69, 70, 71, 156], "handl": [67, 68, 69, 70, 71, 141, 142, 143, 144, 145, 146, 154, 159, 160, 162, 164, 165, 166, 167, 168, 174, 187, 206, 207, 265, 281, 282, 283, 284, 285, 299, 303, 304, 311, 314, 626, 629, 631, 634, 636, 639, 641, 643, 645, 647, 649], "result": [67, 68, 69, 70, 71, 155, 156, 157, 159, 163, 164, 165, 167, 168, 173, 187, 198, 201, 209, 210, 228, 256, 265, 274, 310, 315, 316, 319, 320, 323, 324, 327, 328, 331, 333, 336, 337, 340, 341, 344, 345, 348, 353, 356, 357, 360, 361, 364, 365, 368, 369, 372, 373, 376, 377, 380, 381, 384, 385, 388, 389, 392, 394, 397, 402, 405, 406, 409, 410, 413, 414, 417, 418, 421, 422, 425, 426, 429, 430, 433, 434, 437, 438, 441, 442, 445, 446, 449, 450, 453, 454, 457, 458, 461, 462, 465, 466, 469, 470, 473, 474, 477, 478, 481, 484, 487, 489, 492, 493, 496, 501, 504, 505, 508, 509, 512, 513, 516, 517, 520, 521, 524, 525, 528, 529, 532, 533, 537, 538, 542, 543, 547, 548, 551, 552, 565, 567, 571, 578, 580, 608, 609, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 669, 670, 671, 673, 680, 682, 696, 698, 719, 721, 734, 736, 740, 741, 744, 746, 749, 751, 754, 756, 757, 760, 770, 773, 774, 777, 778, 781, 782, 785, 790, 793, 796, 799, 800, 803, 804, 807, 820, 833, 838, 839, 842, 843, 845, 846, 855, 856, 857, 860, 861, 865, 866, 869, 871, 874, 876, 877, 880, 881, 884, 885, 888, 889, 892, 893, 896, 897, 900, 901, 904, 905, 908, 909, 910, 913, 914, 917, 918], "color": [67, 68, 69, 70, 71, 926, 927], "termin": [67, 68, 69, 70, 71, 150, 151, 153, 164, 170, 173], "termcolor": [67, 68, 69, 70, 71], "rebuild": [67, 68, 69, 70, 71], "constructor": [67, 68, 69, 70, 71, 147, 148, 165, 166, 172, 552, 559], "param": [67, 68, 69, 70, 71, 80, 81, 170, 175, 552, 558, 580, 581, 584, 585], "kept": [67, 68, 69, 70, 71, 151, 167, 816, 817, 818], "structur": [67, 68, 69, 70, 71, 153, 155, 160, 163, 164, 173, 174, 552, 568, 820, 833], "alphabet": [67, 68, 69, 70, 71], "preserv": [67, 68, 69, 70, 71, 175, 187, 626, 652, 756, 774, 777], "__setitem__": [67, 68, 163, 164, 172], "val": [67, 68, 167, 172, 552, 594, 595, 596, 610, 611], "after": [67, 68, 141, 142, 143, 144, 145, 146, 157, 164, 165, 169, 228, 260, 315, 525, 528, 626, 629, 631, 633, 634, 636, 639, 641, 643, 645, 647, 649, 838, 839, 842], "all_fals": [67, 68], "assert_is_bool": [67, 68], "key_chain": [67, 68, 69, 70, 74, 75, 78, 79, 80, 81, 82, 83, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 102, 103, 104, 105, 106, 107, 237, 239, 241, 316, 318, 320, 322, 324, 326, 328, 330, 332, 333, 335, 337, 339, 341, 343, 345, 347, 349, 351, 353, 355, 357, 359, 361, 363, 365, 367, 369, 371, 373, 375, 377, 379, 381, 383, 385, 387, 389, 391, 393, 394, 396, 398, 400, 402, 404, 406, 408, 410, 412, 414, 416, 418, 420, 422, 424, 426, 428, 430, 432, 434, 436, 438, 440, 442, 444, 446, 448, 450, 452, 454, 456, 458, 460, 462, 464, 466, 468, 470, 472, 474, 476, 478, 480, 484, 486, 488, 489, 491, 493, 495, 497, 499, 501, 503, 505, 507, 509, 511, 513, 515, 517, 519, 521, 523, 525, 527, 529, 531, 533, 534, 536, 538, 539, 541, 543, 544, 546, 548, 550, 553, 555, 557, 565, 566, 581, 583, 585, 629, 630, 632, 634, 635, 637, 639, 640, 642, 643, 644, 646, 647, 648, 650, 692, 694, 741, 743, 745, 746, 748, 750, 751, 753, 755, 757, 759, 761, 762, 764, 766, 768, 770, 772, 774, 776, 778, 780, 782, 784, 786, 788, 790, 792, 794, 796, 798, 800, 802, 804, 806, 808, 810, 812, 814, 820, 833, 839, 841, 845, 847, 849, 850, 852, 866, 868, 870, 871, 873, 875, 877, 879, 881, 883, 885, 887, 889, 891, 893, 895, 897, 899, 901, 903, 905, 907, 910, 912, 914, 916], "to_appli": [67, 68, 69, 70, 74, 75, 78, 79, 80, 81, 82, 83, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 102, 103, 104, 105, 106, 107, 237, 239, 241, 316, 318, 320, 322, 324, 326, 328, 330, 332, 333, 335, 337, 339, 341, 343, 345, 347, 349, 351, 353, 355, 357, 359, 361, 363, 365, 367, 369, 371, 373, 375, 377, 379, 381, 383, 385, 387, 389, 391, 393, 394, 396, 398, 400, 402, 404, 406, 408, 410, 412, 414, 416, 418, 420, 422, 424, 426, 428, 430, 432, 434, 436, 438, 440, 442, 444, 446, 448, 450, 452, 454, 456, 458, 460, 462, 464, 466, 468, 470, 472, 474, 476, 478, 480, 484, 486, 488, 489, 491, 493, 495, 497, 499, 501, 503, 505, 507, 509, 511, 513, 515, 517, 519, 521, 523, 525, 527, 529, 531, 533, 534, 536, 538, 539, 541, 543, 544, 546, 548, 550, 553, 555, 557, 565, 566, 581, 583, 585, 629, 630, 632, 634, 635, 637, 639, 640, 642, 643, 644, 646, 647, 648, 650, 692, 694, 741, 743, 745, 746, 748, 750, 751, 753, 755, 757, 759, 761, 762, 764, 766, 768, 770, 772, 774, 776, 778, 780, 782, 784, 786, 788, 790, 792, 794, 796, 798, 800, 802, 804, 806, 808, 810, 812, 814, 820, 833, 839, 841, 849, 850, 852, 866, 868, 870, 871, 873, 875, 877, 879, 881, 883, 885, 887, 889, 891, 893, 895, 897, 899, 901, 903, 905, 907, 910, 912, 914, 916], "prune_unappli": [67, 68, 69, 70, 74, 75, 78, 79, 80, 81, 82, 83, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 102, 103, 104, 105, 106, 107, 237, 239, 241, 316, 318, 320, 322, 324, 326, 328, 330, 332, 333, 335, 337, 339, 341, 343, 345, 347, 349, 351, 353, 355, 357, 359, 361, 363, 365, 367, 369, 371, 373, 375, 377, 379, 381, 383, 385, 387, 389, 391, 393, 394, 396, 398, 400, 402, 404, 406, 408, 410, 412, 414, 416, 418, 420, 422, 424, 426, 428, 430, 432, 434, 436, 438, 440, 442, 444, 446, 448, 450, 452, 454, 456, 458, 460, 462, 464, 466, 468, 470, 472, 474, 476, 478, 480, 484, 486, 488, 489, 491, 493, 495, 497, 499, 501, 503, 505, 507, 509, 511, 513, 515, 517, 519, 521, 523, 525, 527, 529, 531, 533, 534, 536, 538, 539, 541, 543, 544, 546, 548, 550, 553, 555, 557, 565, 566, 581, 583, 585, 629, 630, 632, 634, 635, 637, 639, 640, 642, 643, 644, 646, 647, 648, 650, 692, 694, 741, 743, 745, 746, 748, 750, 751, 753, 755, 757, 759, 761, 762, 764, 766, 768, 770, 772, 774, 776, 778, 780, 782, 784, 786, 788, 790, 792, 794, 796, 798, 800, 802, 804, 806, 808, 810, 812, 814, 820, 833, 839, 841, 849, 850, 852, 866, 868, 870, 871, 873, 875, 877, 879, 881, 883, 885, 887, 889, 891, 893, 895, 897, 899, 901, 903, 905, 907, 910, 912, 914, 916], "map_sequ": [67, 68, 69, 70, 74, 75, 78, 79, 80, 81, 82, 83, 90, 91, 92, 93, 94, 95, 96, 97, 102, 103, 104, 105, 106, 107, 237, 239, 241, 316, 318, 320, 322, 324, 326, 328, 330, 332, 333, 335, 337, 339, 341, 343, 349, 351, 357, 359, 377, 379, 381, 383, 385, 387, 389, 391, 393, 398, 400, 402, 404, 406, 408, 410, 412, 426, 428, 430, 432, 434, 436, 446, 448, 450, 452, 454, 456, 458, 460, 470, 472, 484, 486, 488, 489, 491, 497, 499, 509, 511, 513, 515, 517, 519, 521, 523, 525, 527, 529, 531, 533, 534, 536, 538, 539, 541, 543, 544, 546, 548, 550, 553, 555, 557, 565, 566, 581, 583, 585, 629, 630, 632, 634, 635, 637, 639, 640, 642, 643, 644, 646, 647, 648, 650, 741, 743, 745, 746, 748, 750, 751, 753, 755, 757, 759, 761, 766, 768, 770, 772, 774, 776, 778, 780, 782, 784, 786, 788, 790, 792, 794, 796, 798, 804, 806, 808, 810, 812, 814, 839, 841, 849, 850, 852, 866, 868, 870, 871, 873, 875, 877, 879, 881, 883, 885, 887, 889, 891, 893, 895, 897, 899, 901, 903, 905, 907, 910, 912, 914, 916], "entri": [67, 68, 209, 218, 219, 756, 795, 820, 833], "boolean": [67, 68, 164, 209, 216, 228, 234, 252, 264, 265, 300, 312, 315, 353, 356, 357, 360, 365, 368, 373, 376, 466, 469, 470, 473, 474, 477, 478, 481, 552, 553, 556, 560, 561, 591, 592, 593, 597, 598, 599, 600, 601, 618, 625, 626, 638, 816, 817, 818, 820, 830, 876, 889, 892], "evalu": [67, 68, 164, 315, 402, 405, 406, 409, 446, 449, 450, 453, 454, 457, 458, 461, 489, 492, 513, 516, 529, 532, 820, 821, 830, 831, 909, 910, 913, 914, 917], "assert": [67, 68, 172, 173, 552, 562], "skip": [67, 68, 153, 159, 820, 833], "prune": [67, 68, 820, 833, 834, 835], "all_key_chain": [67, 68], "include_empti": [67, 68], "all_tru": [67, 68, 164, 173], "arrays_as_list": [67, 68], "intermedi": [67, 68], "as_arrai": [67, 68, 552, 589, 614], "as_bool": [67, 68], "as_on": [67, 68], "ones": [67, 68, 69, 70, 159, 170, 172, 173, 209, 214, 223, 315, 377, 380, 552, 605, 918], "sub": [67, 68, 151, 152, 154, 159, 164, 172, 173, 174, 265, 290, 291, 294, 295, 296, 297, 670, 680, 682, 756, 795, 816, 817, 818, 819, 918], "fill": [67, 68, 209, 212, 216, 217, 222, 223, 226, 227, 843, 845, 846], "as_random_uniform": [67, 68], "low": [67, 68, 96, 97, 170, 843, 845, 846, 847, 849, 850, 851, 852], "uniform": [67, 68, 116, 118, 119, 122, 123, 174, 843, 844, 845, 846, 849, 851], "lower": [67, 68, 151, 157, 170, 187, 209, 214, 224, 315, 482, 670, 671, 673, 843, 849, 851], "boundari": [67, 68, 843, 849, 851], "output": [67, 68, 125, 126, 127, 128, 129, 130, 131, 133, 134, 135, 136, 150, 154, 155, 156, 157, 159, 160, 163, 164, 166, 167, 168, 170, 172, 174, 175, 187, 198, 201, 209, 210, 212, 213, 214, 216, 217, 220, 222, 223, 226, 227, 265, 274, 275, 309, 310, 315, 316, 319, 320, 323, 324, 327, 328, 331, 333, 336, 337, 340, 341, 344, 345, 348, 353, 356, 357, 360, 361, 364, 365, 368, 369, 372, 373, 376, 377, 380, 381, 384, 385, 388, 402, 405, 406, 409, 410, 413, 426, 429, 430, 433, 434, 437, 438, 441, 446, 449, 450, 453, 454, 457, 458, 461, 462, 465, 466, 469, 470, 473, 474, 477, 478, 481, 484, 487, 489, 492, 493, 496, 501, 504, 505, 508, 509, 512, 513, 516, 517, 520, 521, 524, 525, 528, 529, 532, 533, 537, 538, 542, 543, 547, 552, 563, 565, 567, 571, 578, 580, 626, 633, 657, 659, 661, 663, 665, 667, 668, 669, 670, 728, 730, 740, 741, 744, 746, 749, 751, 754, 756, 757, 760, 770, 773, 774, 777, 778, 781, 782, 785, 790, 793, 796, 799, 800, 803, 804, 807, 808, 811, 820, 833, 838, 839, 842, 843, 845, 846, 848, 849, 851, 865, 866, 869, 871, 874, 876, 877, 880, 881, 884, 885, 888, 889, 892, 893, 896, 897, 900, 901, 904, 905, 908, 909, 910, 913, 914, 917, 918], "interv": [67, 68, 170, 175, 209, 210, 218, 219, 670, 731, 733, 756, 757, 760, 800, 803, 843, 845, 846, 849, 851, 909, 910, 913, 914, 917], "as_vari": [67, 68], "as_zero": [67, 68], "assert_contains_sub_contain": [67, 68], "sub_cont": [67, 68], "partial": [67, 68, 137, 138, 151], "except": [67, 68, 156, 163, 167, 172, 187, 228, 236, 552, 562, 573, 596, 623, 670, 709, 711, 756, 762, 765, 800, 803, 855, 858, 909, 910, 913, 914, 917], "diff": [67, 68, 164, 173], "screen": [67, 68, 173], "assert_contains_sub_structur": [67, 68], "check_shap": [67, 68], "static": [67, 68, 74, 75, 78, 79, 80, 81, 82, 83, 90, 91, 92, 93, 96, 97, 102, 103, 108, 109, 152, 156, 157, 160, 187, 206, 207, 237, 241, 328, 332, 538, 539, 543, 544, 553, 557, 581, 585, 757, 761, 790, 794, 845, 847], "assert_ident": [67, 68], "check_typ": [67, 68], "same_arrai": [67, 68, 173], "arrays_equ": [67, 68, 69, 70, 552], "datatyp": [67, 68, 209, 211, 221, 228, 242, 253, 254, 255], "exact": [67, 68, 151, 170, 860, 861], "assert_identical_structur": [67, 68], "at_key_chain": [67, 68], "ignore_key_error": [67, 68], "ignore_non": [67, 68], "at_kei": [67, 68], "ignor": [67, 68, 141, 145, 157, 187, 209, 220, 820, 831], "substr": [67, 68], "access": [67, 68, 151, 153, 165], "clip_min": [67, 68], "clip_max": [67, 68], "minimum": [67, 68, 170, 175, 265, 315, 316, 319, 552, 587, 588, 610, 611, 616, 617, 756, 757, 760, 855, 857, 876, 881, 884, 889, 892, 918], "config": [67, 68, 173, 820, 833], "right": [67, 68, 149, 150, 151, 154, 157, 173, 315, 361, 364, 369, 372, 670, 719, 721], "duplic": [67, 68, 156, 161, 162, 172, 174], "compar": [67, 68, 159, 173, 552, 553, 556, 560, 561, 860, 861, 862, 864, 865, 866, 869, 871, 874], "configur": [67, 68, 150, 151, 153, 165, 265, 308, 820, 833], "container_rightmost": [67, 68], "common_key_chain": [67, 68, 164], "across": [67, 68, 152, 157, 159, 160, 164, 165, 168, 265, 274, 275, 286, 287, 289, 290, 291, 292, 293, 297, 307, 308, 552, 560, 561, 820, 826, 855, 857], "properti": [67, 68, 137, 138, 141, 142, 143, 144, 146, 157, 159, 160, 164, 172, 173, 174, 265, 277], "contains_sub_contain": [67, 68], "match": [67, 68, 164, 228, 234, 315, 505, 508, 552, 602], "contains_sub_structur": [67, 68], "copi": [67, 68, 153, 156, 161, 165, 170, 172, 173, 186, 187, 209, 211, 215, 228, 234, 265, 310, 552, 569, 621, 622, 756, 786, 789, 820, 822, 865, 871, 874], "create_if_abs": [67, 68], "inplac": [67, 68, 82, 83, 114, 115, 141, 142, 143, 144, 145, 146, 154, 157, 162, 163, 168, 172, 174, 552, 562, 593, 596, 597, 618, 626, 629, 630, 631, 632, 634, 635, 636, 637, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650], "alreadi": [67, 68, 150, 151, 161, 164, 168, 172, 187, 265, 315, 377, 380, 410, 413, 484, 487, 509, 512, 548, 551, 670, 706, 708, 918], "cutoff_at_depth": [67, 68], "depth_cutoff": [67, 68], "summari": [67, 68, 151, 228, 243, 244, 245, 257, 258, 259, 265, 278, 279, 552, 568, 572, 590, 626, 651, 656], "cutoff_at_height": [67, 68], "height_cutoff": [67, 68], "deep_copi": [67, 68, 173], "intern": [67, 68, 116, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 147, 148, 156, 163, 164, 166, 167, 265, 626, 655, 820, 821, 830, 831], "dev": [67, 68, 69, 71, 150, 160, 166, 170, 172, 174, 265, 274, 299], "belong": [67, 68, 174], "dev_clon": [67, 68, 265], "clone": [67, 68, 151, 153, 265, 286, 287, 288, 289], "dev_dist": [67, 68, 265], "distribut": [67, 68, 125, 133, 137, 138, 152, 166, 187, 265, 286, 290, 291, 292, 293, 657, 665, 740, 741, 744, 746, 749, 751, 754, 843, 844, 845, 846, 848, 849, 851], "along": [67, 68, 155, 167, 209, 218, 219, 265, 290, 291, 292, 293, 294, 295, 296, 297, 309, 552, 570, 571, 580, 624, 670, 696, 698, 728, 730, 731, 733, 734, 736, 740, 746, 749, 751, 754, 756, 762, 765, 774, 777, 782, 785, 790, 793, 795, 800, 803, 808, 811, 816, 817, 818, 819, 843, 854, 855, 856, 857, 865, 866, 869, 871, 874, 876, 877, 880, 881, 884, 885, 888, 889, 892, 893, 896, 897, 900, 901, 904, 905, 908, 909, 910, 913, 914, 917], "split": [67, 68, 149, 151, 169, 170, 187, 265, 274, 290, 291, 292, 293, 307, 308, 309, 552, 602, 756, 918], "dev_str": [67, 68], "diff_kei": [67, 68], "detect_key_diff": [67, 68], "detect_value_diff": [67, 68], "detect_shape_diff": [67, 68], "thei": [67, 68, 147, 148, 152, 154, 155, 157, 160, 162, 164, 165, 166, 167, 172, 173, 174, 175, 187, 228, 255, 816, 817, 818, 843, 844, 918], "treat": [67, 68, 171, 175, 206, 207], "detect": [67, 68, 168, 173, 174, 820, 821, 831], "without": [67, 68, 151, 155, 160, 163, 164, 166, 168, 170, 172, 173, 174, 186, 187, 552, 607, 612, 756, 786, 789, 820, 822, 860, 861, 862, 864], "flag": [67, 68, 151, 167, 172, 265, 284, 626, 638], "container0": [67, 68], "einops_rearrang": [67, 68, 552], "axes_length": [67, 68, 552, 574, 575, 576], "rearrang": [67, 68, 552, 574, 576], "addit": [67, 68, 125, 135, 150, 151, 155, 156, 159, 164, 165, 172, 173, 175, 265, 310, 315, 328, 331, 552, 574, 575, 576, 838, 839, 842], "einops_reduc": [67, 68, 552], "reduct": [67, 68, 165, 172, 552, 575, 608, 609, 909, 910, 913, 914, 917, 918], "One": [67, 68, 165, 170, 172, 173, 552, 575, 756, 786, 789, 843, 845, 846], "callabl": [67, 68, 164, 170, 188, 189, 190, 191, 192, 193, 194, 195, 196, 206, 207, 228, 249, 250, 265, 309, 552, 558, 563, 573, 575, 816, 817, 818, 819, 820, 826, 830, 831, 832], "einops_repeat": [67, 68, 552], "find_sub_contain": [67, 68], "sub_cont_to_find": [67, 68], "exsit": [67, 68], "find_sub_structur": [67, 68], "sub_struc_to_find": [67, 68], "flatten_key_chain": [67, 68, 137, 138, 173], "__": [67, 68, 157, 173], "above_height": [67, 68, 173], "below_depth": [67, 68, 173], "format_key_chain": [67, 68], "format_fn": [67, 68], "format": [67, 68, 153, 156, 165, 166, 170, 172, 173, 228, 246, 265, 285, 876, 877, 880, 918], "string": [67, 68, 161, 165, 166, 170, 173, 228, 232, 233, 246, 252, 264, 265, 281, 282, 283, 284, 298, 304, 310, 311, 314, 552, 572], "from_disk_as_hdf5": [67, 68, 173], "h5_obj_or_filepath": [67, 68], "slice_obj": [67, 68], "load": [67, 68, 187], "disk": [67, 68, 173], "h5py": [67, 68], "file": [67, 68, 137, 138, 150, 151, 153, 155, 156, 160, 161, 163, 164, 170, 173, 552, 613], "hdf5": [67, 68, 137, 138, 173], "filepath": [67, 68, 151], "h5": [67, 68], "from_disk_as_json": [67, 68, 173], "json_filepath": [67, 68], "json": [67, 68, 173], "were": [67, 68, 151, 155, 159, 164], "abl": [67, 68, 150, 151, 160, 165, 167, 172, 175], "dure": [67, 68, 137, 138, 141, 142, 143, 145, 160, 164, 165, 166, 167, 187, 206, 207, 265, 310, 552, 623, 626, 628, 629, 631, 639, 641, 670, 692, 695, 816, 817, 818, 819, 876, 897, 900, 905, 908], "from_disk_as_pickl": [67, 68, 173], "pickle_filepath": [67, 68], "from_flat_list": [67, 68], "flat_list": [67, 68], "hierarchi": [67, 68, 173], "flat": [67, 68, 552, 608, 756, 782, 785], "popul": [67, 68, 165, 166, 170, 843, 844, 876, 897, 900, 905, 908], "from_numpi": [67, 68, 173], "gather": [67, 68, 552, 581, 584], "accord": [67, 68, 150, 153, 160, 165, 228, 237, 240, 248, 315, 328, 331, 369, 372, 484, 487, 552, 580, 608, 609, 670, 731, 733, 756, 766, 769, 812, 815, 876, 897, 900, 905, 908], "index": [67, 68, 153, 160, 164, 172, 208, 209, 214, 220, 265, 306, 552, 558, 580, 581, 584, 756, 800, 803, 820, 823, 824, 827, 828, 829, 834, 836, 855, 856, 857, 858, 860, 861, 862, 865, 866, 869, 921, 923], "h5_file_s": [67, 68], "content": [67, 68, 152, 153, 167, 170, 173], "batch": [67, 68, 139, 140, 160, 164, 173, 265, 307, 308, 552, 579, 657, 666, 670, 734, 736, 816, 817, 818, 819, 838, 839, 842], "handle_inplac": [67, 68], "prime": [67, 68], "overwritten": [67, 68, 161, 163], "has_kei": [67, 68], "query_kei": [67, 68], "somewher": [67, 68], "has_key_chain": [67, 68], "has_nan": [67, 68, 552], "include_inf": [67, 68, 552, 591, 625], "leafwis": [67, 68], "nan": [67, 68, 155, 156, 208, 228, 234, 315, 316, 319, 320, 323, 324, 327, 328, 331, 333, 336, 337, 340, 341, 344, 345, 348, 377, 380, 381, 384, 385, 388, 402, 405, 406, 409, 410, 413, 426, 429, 434, 437, 446, 449, 450, 453, 458, 461, 462, 465, 484, 487, 501, 504, 505, 508, 509, 512, 517, 520, 521, 524, 525, 528, 538, 542, 543, 547, 548, 551, 552, 591, 625, 657, 669, 860, 861, 862, 864, 876, 881, 884, 885, 888, 889, 892, 897, 900, 901, 904, 905, 908, 909, 910, 913, 914, 917], "well": [67, 68, 159, 167, 174, 175, 186, 552, 591, 670, 716, 718], "inf": [67, 68, 208, 552, 591, 625, 670, 734, 736], "wise": [67, 68, 170, 175, 198, 199, 200, 201, 202, 203, 204, 205, 315, 316, 319, 320, 323, 328, 331, 333, 336, 341, 344, 345, 348, 353, 356, 357, 360, 361, 364, 365, 368, 369, 372, 373, 376, 389, 392, 394, 397, 398, 401, 414, 417, 418, 421, 422, 425, 438, 441, 442, 445, 462, 465, 466, 469, 470, 473, 474, 477, 478, 481, 482, 483, 484, 487, 493, 496, 501, 504, 505, 508, 533, 537, 552, 578, 756, 757, 760], "identical_array_shap": [67, 68], "exclus": [67, 68, 160, 164, 175, 209, 210, 552, 570, 598, 599, 601, 626, 638, 843, 845, 846], "identical_config": [67, 68], "identical_structur": [67, 68], "if_exist": [67, 68], "inplace_upd": [67, 68, 114, 115, 167, 552], "key_chains_contain": [67, 68], "sub_str": [67, 68], "join": [67, 68, 756, 762, 765, 800, 803, 918], "list_stack": [67, 68, 173], "dim": [67, 68, 125, 136, 165, 552, 605], "func": [67, 68, 164, 206, 207, 265, 309, 552, 563, 626, 633, 820, 833], "map_cont": [67, 68], "include_self": [67, 68], "possibi": [67, 68], "place": [67, 68, 141, 142, 143, 144, 145, 146, 151, 154, 155, 156, 157, 159, 160, 164, 166, 168, 175, 209, 210, 211, 212, 213, 214, 216, 217, 221, 222, 223, 226, 227, 228, 237, 240, 265, 310, 315, 328, 331, 333, 336, 353, 356, 373, 376, 377, 380, 385, 388, 410, 413, 493, 496, 509, 512, 525, 528, 529, 532, 538, 542, 543, 547, 552, 580, 594, 595, 596, 657, 660, 669, 670, 677, 679, 756, 770, 773, 774, 777, 790, 793, 838, 839, 842, 860, 861, 862, 865, 866, 869, 876, 881, 884, 909, 910, 913], "matrix": [67, 68, 125, 135, 209, 220, 224, 225, 552, 553, 556, 564, 657, 666, 670, 671, 673, 677, 679, 680, 682, 683, 685, 686, 688, 689, 691, 692, 695, 696, 698, 699, 700, 702, 703, 705, 709, 711, 712, 714, 716, 718, 719, 721, 722, 724, 728, 730, 737, 739], "p": [67, 68, 80, 81, 125, 133, 150, 151, 209, 220, 552, 564, 565, 566, 567, 657, 665, 670, 696, 698, 734, 736], "integ": [67, 68, 164, 165, 172, 209, 210, 216, 228, 251, 254, 256, 315, 316, 319, 353, 356, 357, 360, 361, 364, 365, 368, 369, 372, 373, 376, 377, 380, 410, 413, 414, 417, 478, 481, 501, 504, 505, 508, 509, 512, 548, 551, 670, 699, 731, 733, 734, 736, 756, 795, 843, 845, 846, 853, 876, 881, 884, 885, 888, 889, 892, 893, 896, 897, 900, 901, 904, 905, 908, 909, 910, 913, 914, 917], "flatten": [67, 68, 552, 579, 670, 706, 708, 734, 736, 756, 782, 785, 790, 793, 855, 856, 857, 860, 861, 862, 864], "left": [67, 68, 150, 151, 157, 165, 315, 361, 364, 670, 683, 685, 696, 698, 719, 721, 855, 856, 918], "broadcast": [67, 68, 155, 156, 157, 164, 165, 198, 201, 228, 235, 236, 265, 310, 315, 316, 319, 320, 323, 324, 327, 328, 331, 333, 336, 337, 340, 341, 344, 345, 348, 353, 356, 357, 360, 361, 364, 365, 368, 369, 372, 373, 376, 377, 380, 381, 384, 385, 388, 389, 392, 394, 397, 402, 405, 406, 409, 410, 413, 414, 417, 422, 425, 426, 429, 430, 433, 434, 437, 438, 441, 442, 445, 446, 449, 450, 453, 454, 457, 458, 461, 462, 465, 466, 469, 470, 473, 474, 477, 478, 481, 482, 483, 484, 487, 489, 492, 493, 496, 501, 504, 505, 508, 509, 512, 513, 516, 517, 520, 521, 524, 525, 528, 529, 532, 533, 537, 538, 542, 543, 547, 552, 565, 567, 578, 670, 692, 695, 696, 698, 700, 702, 709, 711, 716, 718, 731, 733, 734, 736, 740, 741, 744, 746, 749, 751, 754, 756, 757, 760, 770, 773, 774, 777, 778, 781, 782, 785, 790, 793, 796, 799, 800, 803, 804, 807, 843, 845, 846, 855, 856, 857, 865, 871, 874, 876, 881, 884, 885, 888, 889, 892, 893, 896, 897, 900, 901, 904, 905, 908, 909, 910, 913, 914, 917], "correctli": [67, 68, 150, 159, 164, 165, 168, 174, 187, 670, 696, 698, 855, 856], "max_depth": [67, 68, 265, 269, 272, 279, 289, 293, 297, 552, 590, 820, 832], "multi_map": [67, 68, 164], "map_nest": [67, 68, 78, 79, 88, 89, 92, 93, 345, 347, 353, 355, 361, 363, 365, 367, 369, 371, 373, 375, 394, 396, 414, 416, 418, 420, 422, 424, 438, 440, 442, 444, 462, 464, 466, 468, 474, 476, 478, 480, 493, 495, 501, 503, 505, 507, 692, 694, 762, 764, 800, 802], "leftmost": [67, 68, 820, 833], "multi_map_in_static_method": [67, 68, 164], "fn_name": [67, 68], "num_arrai": [67, 68], "overwrite_at_key_chain": [67, 68], "overwrit": [67, 68, 167, 170, 265, 309], "target_dict": [67, 68], "return_dict": [67, 68], "prune_empti": [67, 68], "keep_non": [67, 68], "prune_key_chain": [67, 68], "key1": [67, 68, 174], "key2": [67, 68], "key3": [67, 68], "prune_key_from_key_chain": [67, 68], "absolut": [67, 68, 149, 315, 316, 319, 670, 715], "certain": [67, 68, 150, 187, 209, 210, 218, 219], "decid": [67, 68, 150, 820, 831], "prune_kei": [67, 68], "prune_keys_from_key_chain": [67, 68], "remove_key_length_limit": [67, 68], "remove_print_limit": [67, 68], "reshape_lik": [67, 68], "leading_shap": [67, 68], "return_cont": [67, 68], "restructur": [67, 68], "keep_orig": [67, 68], "transpos": [67, 68, 125, 127, 129, 131, 172, 175, 265, 296, 657, 659, 661, 663, 670, 703, 705, 709, 711, 918], "old": [67, 68, 150, 167], "keep": [67, 68, 150, 151, 158, 164, 171, 173, 175, 552, 624], "start": [67, 68, 149, 150, 151, 152, 153, 154, 156, 157, 165, 169, 170, 172, 173, 174, 186, 187, 209, 210, 218, 219, 265, 280], "restructure_key_chain": [67, 68], "keychain_map": [67, 68], "set_at_key_chain": [67, 68], "set_at_kei": [67, 68], "set_framework": [67, 68, 170, 172, 173, 175], "set_ivy_backend": [67, 68], "ivy_backend": [67, 68], "attribut": [67, 68, 156, 164, 165, 171, 172, 173, 174, 228, 248, 249, 250, 251, 265, 305], "show": [67, 68, 150, 151, 157, 167, 186, 187, 918], "show_sub_contain": [67, 68], "sub_cont_or_keychain": [67, 68], "shuffl": [67, 68, 843, 918], "seed_valu": [67, 68, 843, 853], "align": [67, 68, 150, 170, 172, 918, 924], "seed": [67, 68, 69, 70, 843, 918], "shuffle_h5_fil": [67, 68], "dataset": [67, 68, 173, 185, 918], "size_ordered_arrai": [67, 68], "keychain": [67, 68], "smallest": [67, 68, 228, 248, 251, 315, 377, 380], "largest": [67, 68, 186, 228, 248, 251, 670, 719, 721], "slice_kei": [67, 68], "key_slic": [67, 68], "all_depth": [67, 68], "slice_via_kei": [67, 68], "sort_by_kei": [67, 68], "num_or_size_split": [67, 68, 170, 756, 795], "with_remaind": [67, 68, 756, 795], "constitu": [67, 68, 175], "dimension": [67, 68, 209, 210, 214, 220, 670, 674, 676, 677, 679, 692, 695, 700, 702, 706, 708, 709, 711, 731, 733, 734, 736, 756, 795, 855, 856, 857, 858, 876, 881, 884, 885, 888, 889, 892, 893, 896, 897, 900, 901, 904, 905, 908, 909, 910, 913, 914, 917], "evenli": [67, 68, 209, 210, 218, 219, 756, 795], "store": [67, 68, 137, 138, 156, 161, 163, 164, 170, 172, 173, 174, 552, 579, 626, 655, 670, 728, 730, 756, 795], "stop_gradi": [67, 68, 69, 70, 82, 83, 141, 142, 143, 144, 145, 146, 174, 265, 309, 626, 629, 630, 631, 632, 634, 635, 636, 637, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 816, 817, 818, 819, 918], "preserve_typ": [67, 68, 626, 652], "stop": [67, 68, 141, 142, 143, 144, 145, 146, 170, 187, 209, 210, 218, 219, 265, 280, 309, 626, 629, 631, 634, 636, 639, 641, 643, 645, 647, 649, 652, 816, 817, 818, 819], "alwai": [67, 68, 151, 152, 155, 156, 160, 161, 163, 164, 167, 168, 170, 172, 187, 228, 234, 315, 328, 331, 484, 487, 552, 596, 626, 638, 652], "structural_diff": [67, 68], "to_devic": [67, 68, 265, 284], "move": [67, 68, 151, 155, 265, 310], "cuda": [67, 68, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 145, 147, 148, 170, 173, 187, 209, 218, 219, 265, 274, 281, 306, 552, 580, 581, 584, 605, 608, 609, 843, 844, 845, 846, 849, 851], "cpu": [67, 68, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 145, 147, 148, 151, 166, 187, 209, 218, 219, 265, 284, 285, 287, 301, 304, 306, 310, 311, 313, 314, 552, 580, 581, 584, 605, 608, 609, 843, 844, 845, 846, 848, 849, 851], "target": [67, 68, 154, 169, 173, 174, 175, 265, 283, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 918], "to_dict": [67, 68], "to_disk_as_hdf5": [67, 68, 173], "starting_index": [67, 68], "max_batch_s": [67, 68], "read": [67, 68, 153, 918], "r": [67, 68, 150, 552, 561, 624, 670, 712, 714, 737, 739], "w": [67, 68, 82, 83, 170, 173, 174, 552, 561, 626, 628, 629, 631, 632, 634, 636, 637, 639, 641, 642, 643, 645, 646, 647, 649, 650, 657, 658, 659, 660, 661, 662, 663, 664], "later": [67, 68, 552, 563], "append": [67, 68, 153, 159, 170, 173, 315, 361, 364, 670, 680, 682, 692, 695], "to_disk_as_json": [67, 68, 173], "to_disk_as_pickl": [67, 68, 173], "to_flat_list": [67, 68], "to_iter": [67, 68, 164], "leaf_keys_onli": [67, 68], "to_iterator_kei": [67, 68], "to_iterator_valu": [67, 68], "to_json": [67, 68], "to_list": [67, 68, 552, 918], "to_multi_dev": [67, 68], "multidevcontain": [67, 68, 69], "distributedarrai": [67, 68], "to_numpi": [67, 68, 173, 552, 918], "update_backend": [67, 68], "to_raw": [67, 68], "raw": [67, 68, 156], "trim_kei": [67, 68], "max_length": [67, 68], "try_kc": [67, 68], "tri": [67, 68], "arbitrari": [67, 68, 159, 160, 164, 167, 168, 174, 187, 209, 220, 228, 235, 256, 265, 294, 295, 297], "concatten": [67, 68, 265, 294, 295, 296, 297, 309], "unstack": [67, 68, 170, 173, 552, 918], "dim_siz": [67, 68, 265], "update_config": [67, 68], "global_norm": [67, 68, 80, 81, 565, 566], "vector": [67, 68, 125, 135, 186, 209, 220, 552, 565, 567, 657, 666, 670, 674, 676, 683, 685, 692, 695, 706, 708, 719, 721, 722, 724, 731, 733, 734, 736, 737, 739], "with_default_key_color": [67, 68], "with_entries_as_list": [67, 68], "with_ivy_backend": [67, 68], "with_key_length_limit": [67, 68, 173], "with_print_ind": [67, 68, 173], "with_print_limit": [67, 68, 173], "with_print_line_spac": [67, 68], "containerwithcr": [69, 70, 72], "containerwithdatatyp": [69, 70, 74], "containerwithdevic": [69, 70, 76], "containerwithelementwis": [69, 70, 78, 164], "containerwithgener": [69, 70, 80], "containerwithgradi": [69, 70, 82], "containerwithimag": [69, 70, 84], "containerwithlay": [69, 70, 86], "containerwithlinearalgebra": [69, 70, 88], "containerwithloss": [69, 70, 90], "containerwithmanipul": [69, 70, 92, 152], "containerwithnorm": [69, 70, 94], "containerwithrandom": [69, 70, 96], "containerwithsearch": [69, 70, 98], "containerwithset": [69, 70, 100], "containerwithsort": [69, 70, 102], "containerwithstatist": [69, 70, 104], "containerwithutil": [69, 70, 106], "__add__": [69, 70, 156, 157, 163, 164, 168, 172], "special": [69, 70, 152, 155, 156, 157, 163, 168, 315, 316, 319, 320, 323, 324, 327, 328, 331, 333, 336, 337, 340, 341, 344, 345, 348, 373, 376, 377, 380, 381, 384, 385, 388, 402, 405, 406, 409, 410, 413, 446, 449, 450, 453, 458, 461, 462, 465, 484, 487, 501, 504, 505, 508, 509, 512, 513, 516, 517, 520, 521, 524, 525, 528, 538, 542, 543, 547, 548, 551, 876, 881, 884, 885, 888, 889, 892, 897, 900, 901, 904, 905, 908], "11": [69, 70, 78, 79, 96, 97, 157, 164, 315, 328, 330, 331, 332, 353, 356, 509, 512, 552, 570, 580, 670, 680, 682, 706, 708, 740, 751, 754, 756, 774, 777, 782, 785, 843, 845, 846, 847, 855, 859, 860, 861, 876, 877, 880], "__radd__": [69, 70, 156, 157], "adam_step": [69, 70, 626], "arang": [69, 70, 165, 209, 218, 219, 876, 877, 880, 918], "arg_info": [69, 70, 552], "arg_nam": [69, 70, 552], "argmax": [69, 70, 855, 918], "argmin": [69, 70, 855, 918], "array_equ": [69, 70, 552], "as_ivy_dev": [69, 70, 172, 265], "as_ivy_dtyp": [69, 70, 228], "as_native_dev": [69, 70, 265], "as_native_dtyp": [69, 70, 228], "asarrai": [69, 70, 167, 209, 657, 658, 860, 862], "assert_supports_inplac": [69, 70, 552], "astyp": [69, 70, 165, 167, 228], "broadcast_arrai": [69, 70, 228], "broadcast_to": [69, 70, 165, 228], "cache_fn": [69, 70, 160, 552], "clear_mem_on_dev": [69, 70, 265], "clip_matrix_norm": [69, 70, 552], "closest_valid_dtyp": [69, 70, 228], "container_typ": [69, 70, 552], "conv1d": [69, 70, 125, 657], "conv1d_transpos": [69, 70, 657], "conv2d": [69, 70, 125, 657, 918], "conv2d_transpos": [69, 70, 657], "conv3d": [69, 70, 125, 657], "conv3d_transpos": [69, 70, 657], "copy_arrai": [69, 70, 552], "cumprod": [69, 70, 175, 552], "cumsum": [69, 70, 552, 918], "current_backend_str": [69, 70, 552], "default_devic": [69, 70, 166, 170, 265, 303, 306, 313], "default_dtyp": [69, 70, 160, 165, 228], "default_float_dtyp": [69, 70, 165, 228], "default_int_dtyp": [69, 70, 165, 228], "depthwise_conv2d": [69, 70, 657, 918], "dev_clone_arrai": [69, 70, 265], "dev_clone_it": [69, 70, 265], "dev_clone_nest": [69, 70, 265], "dev_dist_arrai": [69, 70, 265], "dev_dist_it": [69, 70, 265], "dev_dist_nest": [69, 70, 265], "dev_unifi": [69, 70, 265], "dev_unify_arrai": [69, 70, 265], "dev_unify_it": [69, 70, 265], "dev_unify_nest": [69, 70, 265], "dev_util": [69, 70, 166, 265], "dropout": [69, 70, 125, 136, 173, 657], "dtype_bit": [69, 70, 228], "empty_lik": [69, 70, 209], "execute_with_gradi": [69, 70, 164, 173, 174, 175, 187, 626, 918], "ey": [69, 70, 175, 209, 657, 660, 664], "finfo": [69, 70, 228], "floormod": [69, 70, 552, 918], "fourier_encod": [69, 70, 552], "from_dlpack": [69, 70, 209], "full_lik": [69, 70, 209], "function_supported_dtyp": [69, 70, 228], "function_unsupported_dtyp": [69, 70, 228], "gelu": [69, 70, 111, 198], "get_all_arrays_in_memori": [69, 70, 552], "get_all_ivy_arrays_on_dev": [69, 70, 166, 265], "get_min_bas": [69, 70, 552], "get_min_denomin": [69, 70, 552], "get_num_dim": [69, 70, 552, 918], "get_referrers_recurs": [69, 70, 552], "gpu_is_avail": [69, 70, 265], "handle_nest": [69, 70, 160, 164, 188], "handle_out_argu": [69, 70, 162, 165, 166, 167, 168, 188], "iinfo": [69, 70, 228], "indices_wher": [69, 70, 552, 918], "infer_devic": [69, 70, 165, 166, 168, 188], "infer_dtyp": [69, 70, 165, 166, 168, 188], "inplace_arrays_support": [69, 70, 552], "inplace_decr": [69, 70, 552], "inplace_incr": [69, 70, 552], "inplace_variables_support": [69, 70, 552], "inputs_to_native_arrai": [69, 70, 163, 188], "invalid_dtyp": [69, 70, 228], "is_float_dtyp": [69, 70, 228], "is_int_dtyp": [69, 70, 228, 552, 622], "is_ivy_contain": [69, 70, 552], "leaky_relu": [69, 70, 198, 918], "linear": [69, 70, 125, 126, 127, 128, 129, 130, 131, 132, 156, 170, 173, 174, 175, 198, 199, 200, 201, 552, 579, 657, 665, 716, 718, 918], "linspac": [69, 70, 170, 209, 210, 918], "logspac": [69, 70, 170, 209], "lstm_updat": [69, 70, 170, 657], "match_kwarg": [69, 70, 552], "matrix_pow": [69, 70, 670], "meshgrid": [69, 70, 209], "multi_head_attent": [69, 70, 164, 167, 657], "multinomi": [69, 70, 843], "nonzero": [69, 70, 315, 328, 331, 484, 487, 855], "num_arrays_in_memori": [69, 70, 552], "num_cpu_cor": [69, 70, 166, 265], "num_gpu": [69, 70, 159, 166, 265], "num_ivy_arrays_on_dev": [69, 70, 265], "one_hot": [69, 70, 175, 552, 918], "ones_lik": [69, 70, 175, 209, 918], "outputs_to_ivy_arrai": [69, 70, 163, 165, 166, 168, 188], "percent_used_mem_on_dev": [69, 70, 265], "print_all_arrays_in_memori": [69, 70, 552], "print_all_ivy_arrays_on_dev": [69, 70, 265], "promote_typ": [69, 70, 228], "randint": [69, 70, 96, 97, 843, 847, 918], "random_norm": [69, 70, 657, 660, 663, 664, 670, 719, 721, 843, 860, 861], "result_typ": [69, 70, 165, 228], "scaled_dot_product_attent": [69, 70, 657], "scatter_flat": [69, 70, 552], "scatter_nd": [69, 70, 172, 552, 918], "set_default_devic": [69, 70, 166, 265, 313], "set_default_dtyp": [69, 70, 160, 165, 228], "set_default_float_dtyp": [69, 70, 165, 228], "set_default_int_dtyp": [69, 70, 165, 228], "set_min_bas": [69, 70, 552], "set_min_denomin": [69, 70, 552], "set_queue_timeout": [69, 70, 552], "set_split_factor": [69, 70, 265], "set_tmp_dir": [69, 70, 552], "set_with_grad": [69, 70, 626], "shape_to_tupl": [69, 70, 165, 552], "sigmoid": [69, 70, 170, 173, 174, 198, 918], "slogdet": [69, 70, 670], "softplu": [69, 70, 198, 918], "split_factor": [69, 70, 265, 274], "split_func_cal": [69, 70, 265], "stable_divid": [69, 70, 160, 552], "stable_pow": [69, 70, 552], "static_ab": [69, 70], "static_aco": [69, 70], "static_acosh": [69, 70], "static_adam_step": [69, 70], "static_al": [69, 70], "static_ani": [69, 70], "static_arang": [69, 70], "static_arg_info": [69, 70], "static_arg_nam": [69, 70], "static_argmax": [69, 70], "static_argmin": [69, 70], "static_arrai": [69, 70], "static_array_equ": [69, 70], "static_arrays_equ": [69, 70], "static_as_ivy_dev": [69, 70], "static_as_ivy_dtyp": [69, 70], "static_as_native_dev": [69, 70], "static_as_native_dtyp": [69, 70], "static_asarrai": [69, 70], "static_asin": [69, 70], "static_asinh": [69, 70], "static_assert_supports_inplac": [69, 70], "static_astyp": [69, 70], "static_atan": [69, 70], "static_atan2": [69, 70], "static_atanh": [69, 70], "static_bitwise_and": [69, 70], "static_bitwise_invert": [69, 70], "static_bitwise_left_shift": [69, 70], "static_bitwise_or": [69, 70], "static_bitwise_right_shift": [69, 70], "static_bitwise_xor": [69, 70], "static_broadcast_arrai": [69, 70], "static_broadcast_to": [69, 70], "static_cache_fn": [69, 70], "static_ceil": [69, 70], "static_choleski": [69, 70], "static_clear_mem_on_dev": [69, 70], "static_clip_matrix_norm": [69, 70], "static_clip_vector_norm": [69, 70], "static_closest_valid_dtyp": [69, 70], "static_concat": [69, 70], "static_constant_pad": [69, 70], "static_container_typ": [69, 70], "static_conv1d": [69, 70], "static_conv1d_transpos": [69, 70], "static_conv2d": [69, 70], "static_conv2d_transpos": [69, 70], "static_conv3d": [69, 70], "static_conv3d_transpos": [69, 70], "static_copy_arrai": [69, 70], "static_co": [69, 70], "static_cosh": [69, 70], "static_cross": [69, 70], "static_cumprod": [69, 70], "static_cumsum": [69, 70], "static_current_backend": [69, 70], "static_current_backend_str": [69, 70], "static_default": [69, 70], "static_default_devic": [69, 70], "static_default_dtyp": [69, 70], "static_default_float_dtyp": [69, 70], "static_default_int_dtyp": [69, 70], "static_depthwise_conv2d": [69, 70], "static_det": [69, 70], "static_dev": [69, 70], "static_dev_clon": [69, 70], "static_dev_clone_arrai": [69, 70], "static_dev_clone_it": [69, 70], "static_dev_clone_nest": [69, 70], "static_dev_dist": [69, 70], "static_dev_dist_arrai": [69, 70], "static_dev_dist_it": [69, 70], "static_dev_dist_nest": [69, 70], "static_dev_unifi": [69, 70], "static_dev_unify_arrai": [69, 70], "static_dev_unify_it": [69, 70], "static_dev_unify_nest": [69, 70], "static_dev_util": [69, 70], "static_diagon": [69, 70], "static_dropout": [69, 70], "static_dtyp": [69, 70], "static_dtype_bit": [69, 70], "static_eigh": [69, 70], "static_eigvalsh": [69, 70], "static_einops_rearrang": [69, 70], "static_einops_reduc": [69, 70], "static_einops_repeat": [69, 70], "static_einsum": [69, 70], "static_empti": [69, 70], "static_empty_lik": [69, 70], "static_equ": [69, 70], "static_erf": [69, 70], "static_execute_with_gradi": [69, 70], "static_exist": [69, 70], "static_exp": [69, 70], "static_expand_dim": [69, 70], "static_expm1": [69, 70], "static_ey": [69, 70], "static_finfo": [69, 70], "static_flip": [69, 70], "static_floor": [69, 70], "static_floor_divid": [69, 70], "static_floormod": [69, 70], "static_fourier_encod": [69, 70], "static_from_dlpack": [69, 70], "static_ful": [69, 70], "static_full_lik": [69, 70], "static_function_supported_dtyp": [69, 70], "static_function_unsupported_dtyp": [69, 70], "static_gath": [69, 70], "static_gelu": [69, 70], "static_get_all_arrays_in_memori": [69, 70], "static_get_all_ivy_arrays_on_dev": [69, 70], "static_get_min_bas": [69, 70], "static_get_min_denomin": [69, 70], "static_get_num_dim": [69, 70], "static_get_referrers_recurs": [69, 70], "static_gpu_is_avail": [69, 70], "static_great": [69, 70], "static_greater_equ": [69, 70], "static_handle_nest": [69, 70], "static_handle_out_argu": [69, 70], "static_has_nan": [69, 70], "static_iinfo": [69, 70], "static_indices_wher": [69, 70], "static_infer_devic": [69, 70], "static_infer_dtyp": [69, 70], "static_inplace_arrays_support": [69, 70], "static_inplace_decr": [69, 70], "static_inplace_incr": [69, 70], "static_inplace_upd": [69, 70], "static_inplace_variables_support": [69, 70], "static_inputs_to_native_arrai": [69, 70], "static_inv": [69, 70], "static_invalid_dtyp": [69, 70], "static_is_arrai": [69, 70], "static_is_float_dtyp": [69, 70], "static_is_int_dtyp": [69, 70], "static_is_ivy_arrai": [69, 70], "static_is_ivy_contain": [69, 70], "static_is_native_arrai": [69, 70], "static_is_vari": [69, 70], "static_isfinit": [69, 70], "static_isinf": [69, 70], "static_isnan": [69, 70], "static_layer_norm": [69, 70], "static_leaky_relu": [69, 70], "static_less": [69, 70], "static_less_equ": [69, 70], "static_linear": [69, 70], "static_linspac": [69, 70], "static_log": [69, 70], "static_log10": [69, 70], "static_log1p": [69, 70], "static_log2": [69, 70], "static_logaddexp": [69, 70], "static_logical_and": [69, 70], "static_logical_not": [69, 70], "static_logical_or": [69, 70], "static_logical_xor": [69, 70], "static_logspac": [69, 70], "static_lstm_upd": [69, 70], "static_match_kwarg": [69, 70], "static_matmul": [69, 70], "static_matrix_norm": [69, 70], "static_matrix_pow": [69, 70], "static_matrix_rank": [69, 70], "static_matrix_transpos": [69, 70], "static_max": [69, 70], "static_maximum": [69, 70], "static_mean": [69, 70], "static_meshgrid": [69, 70], "static_min": [69, 70], "static_minimum": [69, 70], "static_multi_head_attent": [69, 70], "static_multinomi": [69, 70], "static_multiprocess": [69, 70], "static_native_arrai": [69, 70], "static_neg": [69, 70], "static_nonzero": [69, 70], "static_not_equ": [69, 70], "static_num_arrays_in_memori": [69, 70], "static_num_cpu_cor": [69, 70], "static_num_gpu": [69, 70], "static_num_ivy_arrays_on_dev": [69, 70], "static_one_hot": [69, 70], "static_on": [69, 70], "static_ones_lik": [69, 70], "static_out": [69, 70], "static_outputs_to_ivy_arrai": [69, 70], "static_percent_used_mem_on_dev": [69, 70], "static_permute_dim": [69, 70], "static_pinv": [69, 70], "static_posit": [69, 70], "static_pow": [69, 70], "static_print_all_arrays_in_memori": [69, 70], "static_print_all_ivy_arrays_on_dev": [69, 70], "static_prod": [69, 70], "static_promote_typ": [69, 70], "static_qr": [69, 70], "static_queue_timeout": [69, 70], "static_random_norm": [69, 70], "static_relu": [69, 70], "static_remaind": [69, 70], "static_repeat": [69, 70], "static_reshap": [69, 70], "static_result_typ": [69, 70], "static_round": [69, 70], "static_scaled_dot_product_attent": [69, 70], "static_scatter_flat": [69, 70], "static_scatter_nd": [69, 70], "static_se": [69, 70], "static_set_default_devic": [69, 70], "static_set_default_dtyp": [69, 70], "static_set_default_float_dtyp": [69, 70], "static_set_default_int_dtyp": [69, 70], "static_set_min_bas": [69, 70], "static_set_min_denomin": [69, 70], "static_set_queue_timeout": [69, 70], "static_set_split_factor": [69, 70], "static_set_tmp_dir": [69, 70], "static_set_with_grad": [69, 70], "static_shap": [69, 70], "static_shape_to_tupl": [69, 70], "static_shuffl": [69, 70], "static_sigmoid": [69, 70], "static_sign": [69, 70], "static_sin": [69, 70], "static_sinh": [69, 70], "static_slogdet": [69, 70], "static_softmax": [69, 70], "static_softplu": [69, 70], "static_solv": [69, 70], "static_split": [69, 70], "static_split_factor": [69, 70], "static_split_func_cal": [69, 70], "static_sqrt": [69, 70], "static_squar": [69, 70], "static_squeez": [69, 70], "static_stable_divid": [69, 70], "static_stable_pow": [69, 70], "static_stack": [69, 70], "static_std": [69, 70], "static_stop_gradi": [69, 70], "static_sum": [69, 70], "static_supports_inplac": [69, 70], "static_svd": [69, 70], "static_svdv": [69, 70], "static_swapax": [69, 70], "static_tensordot": [69, 70], "static_til": [69, 70], "static_tmp_dir": [69, 70], "static_to_devic": [69, 70], "static_to_list": [69, 70], "static_to_native_arrays_and_back": [69, 70], "static_to_numpi": [69, 70], "static_to_scalar": [69, 70], "static_total_mem_on_dev": [69, 70], "static_tpu_is_avail": [69, 70], "static_trac": [69, 70], "static_tril": [69, 70], "static_triu": [69, 70], "static_trunc": [69, 70], "static_try_else_non": [69, 70], "static_type_promote_arrai": [69, 70], "static_unique_al": [69, 70], "static_unique_count": [69, 70], "static_unique_invers": [69, 70], "static_unique_valu": [69, 70], "static_unset_default_devic": [69, 70], "static_unset_default_dtyp": [69, 70], "static_unset_default_float_dtyp": [69, 70], "static_unset_default_int_dtyp": [69, 70], "static_unset_with_grad": [69, 70], "static_unstack": [69, 70], "static_used_mem_on_dev": [69, 70], "static_valid_dtyp": [69, 70], "static_value_is_nan": [69, 70], "static_var": [69, 70], "static_vari": [69, 70], "static_variable_data": [69, 70], "static_vecdot": [69, 70], "static_vector_norm": [69, 70], "static_vector_to_skew_symmetric_matrix": [69, 70], "static_wher": [69, 70], "static_with_grad": [69, 70], "static_zero_pad": [69, 70], "static_zero": [69, 70], "static_zeros_lik": [69, 70], "supports_inplac": [69, 70, 552], "tmp_dir": [69, 70, 552], "to_native_arrays_and_back": [69, 70, 162, 168, 188], "to_scalar": [69, 70, 552], "total_mem_on_dev": [69, 70, 166, 265], "tpu_is_avail": [69, 70, 265], "tril": [69, 70, 209], "triu": [69, 70, 209], "try_else_non": [69, 70, 552], "type_promote_arrai": [69, 70, 228], "unique_al": [69, 70, 860], "unique_count": [69, 70, 860], "unique_invers": [69, 70, 860], "unique_valu": [69, 70, 860], "unset_default_devic": [69, 70, 265], "unset_default_dtyp": [69, 70, 228], "unset_default_float_dtyp": [69, 70, 228], "unset_default_int_dtyp": [69, 70, 228], "unset_with_grad": [69, 70, 626], "used_mem_on_dev": [69, 70, 265], "valid_dtyp": [69, 70, 228], "value_is_nan": [69, 70, 552], "variable_data": [69, 70, 626], "with_grad": [69, 70, 626, 651], "zeros_lik": [69, 70, 209, 756, 757, 760, 918], "at_dev": [69, 71, 265, 278, 279], "int32": [74, 75, 165, 228, 237, 239, 240, 241, 249, 552, 621, 756, 770, 773, 876, 893, 896, 901, 904], "int64": [74, 75, 165, 228, 237, 239, 240, 241, 249, 315, 369, 372, 855, 856, 857, 876, 893, 896, 901, 904], "static_can_cast": [74, 75, 237], "from_": [74, 75, 228, 237, 240, 241], "static_add": [78, 79, 156, 157, 164, 328], "static_divid": [78, 79, 164, 389], "static_multipli": [78, 79, 164, 484], "static_subtract": [78, 79, 164, 533], "static_tan": [78, 79, 157, 164, 538], "143": [78, 79, 157, 315, 538, 539, 541, 542], "16": [78, 79, 96, 97, 151, 157, 173, 315, 538, 539, 541, 542, 657, 663, 670, 680, 682, 706, 708, 845, 847, 855, 859, 876, 877, 880], "38": [78, 79, 157, 315, 538, 539, 541, 542], "static_tanh": [78, 79, 543], "76": [78, 79, 315, 385, 388, 543, 544, 670, 725, 727, 876, 877, 880], "96": [78, 79, 315, 538, 542, 543, 544, 670, 706, 708, 876, 877, 880], "995": [78, 79, 315, 543, 544, 546, 547], "999": [78, 79, 82, 83, 141, 142, 143, 174, 315, 543, 544, 546, 547, 626, 628, 629, 630, 631, 632, 639, 640, 641, 642], "9999": [78, 79, 543, 544], "static_all_equ": [80, 81, 553, 555], "clip_vector_norm": [80, 81, 552], "max_norm": [80, 81, 552, 564, 565, 566, 567], "static_gather_nd": [80, 81, 581], "adam_upd": [82, 83, 174, 626], "dcdw": [82, 83, 626, 628, 629, 630, 631, 632, 634, 635, 636, 637, 639, 640, 641, 642, 643, 644, 645, 646], "lr": [82, 83, 141, 142, 143, 144, 145, 146, 173, 174, 626, 629, 630, 631, 632, 634, 635, 636, 637, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650], "mw_tm1": [82, 83, 626, 629, 630, 631, 632, 639, 640, 641, 642], "vw_tm1": [82, 83, 626, 629, 630, 631, 632, 639, 640, 641, 642], "beta1": [82, 83, 141, 142, 143, 174, 626, 628, 629, 630, 631, 632, 639, 640, 641, 642], "beta2": [82, 83, 141, 142, 143, 174, 626, 628, 629, 630, 631, 632, 639, 640, 641, 642], "gradient_descent_upd": [82, 83, 626, 816, 817, 818, 819, 918], "lamb_upd": [82, 83, 626], "max_trust_ratio": [82, 83, 141, 143, 626, 639, 640, 641, 642], "decay_lambda": [82, 83, 141, 143, 144, 626, 639, 640, 641, 642, 643, 644, 645, 646], "lars_upd": [82, 83, 626], "optimizer_upd": [82, 83, 626], "effective_grad": [82, 83, 626, 647, 648, 649, 650], "static_adam_upd": [82, 83, 629], "static_gradient_descent_upd": [82, 83, 634], "static_lamb_upd": [82, 83, 639], "static_lars_upd": [82, 83, 643], "static_optimizer_upd": [82, 83, 647], "static_binary_cross_entropi": [90, 91, 741], "static_cross_entropi": [90, 91, 746], "static_sparse_cross_entropi": [90, 91, 751], "static_clip": [92, 93, 757], "static_rol": [92, 93, 157, 164, 757, 761, 790], "random_uniform": [96, 97, 166, 174, 843, 918], "static_randint": [96, 97, 845], "20": [96, 97, 172, 315, 373, 376, 402, 405, 509, 512, 525, 528, 670, 680, 682, 706, 708, 725, 727, 843, 845, 846, 847, 855, 858, 859, 876, 877, 880], "15": [96, 97, 150, 157, 315, 353, 356, 509, 512, 657, 660, 670, 680, 682, 706, 708, 725, 727, 756, 790, 793, 838, 839, 842, 843, 845, 846, 847, 855, 858, 860, 861, 876, 877, 880], "12": [96, 97, 150, 157, 164, 315, 353, 356, 373, 376, 385, 388, 509, 512, 552, 570, 588, 670, 680, 682, 706, 708, 725, 727, 756, 774, 777, 782, 785, 790, 793, 838, 839, 842, 843, 845, 846, 847, 855, 859, 860, 861, 876, 877, 880], "40": [96, 97, 315, 385, 388, 525, 528, 670, 706, 708, 845, 847, 876, 877, 880], "gpu": [96, 97, 151, 166, 172, 187, 265, 284, 287, 300, 302, 306, 308, 313, 845, 847], "87": [96, 97, 845, 847], "62": [96, 97, 845, 847], "52": [96, 97, 670, 706, 708, 845, 847, 860, 861, 876, 877, 880], "95": [96, 97, 845, 847], "37": [96, 97, 315, 538, 542, 838, 839, 842, 845, 847], "42": [96, 97, 175, 198, 204, 670, 706, 708, 843, 845, 847, 853, 876, 877, 880], "14": [96, 97, 153, 157, 164, 315, 373, 376, 657, 669, 670, 680, 682, 706, 708, 845, 847, 860, 861, 876, 877, 880], "13": [96, 97, 157, 164, 315, 353, 356, 373, 376, 385, 388, 525, 528, 552, 570, 657, 669, 670, 680, 682, 706, 708, 838, 839, 842, 845, 847, 855, 859, 860, 861, 876, 877, 880], "static_random_uniform": [96, 97, 849], "static_argsort": [102, 103, 866], "static_sort": [102, 103, 871], "add_ivy_container_instance_method": 108, "containerexampl": [108, 109], "neural": [111, 125, 186, 657, 918], "geglu": 111, "to_ivy_modul": [114, 175], "native_modul": [114, 115], "native_module_class": [114, 115], "trainabl": [114, 115, 137, 138, 147, 156, 171, 173, 174, 626, 638], "requir": [114, 115, 150, 153, 155, 156, 157, 159, 162, 163, 165, 166, 168, 172, 187, 206, 207, 315, 525, 528, 670, 683, 685, 756, 800, 803], "dedic": [114, 115, 168, 172, 174, 626, 655], "constant": [116, 117, 121, 124, 137, 138, 139, 140, 155, 160, 174, 175, 187, 265, 274, 275, 756, 766, 769, 820, 826, 838, 839, 842], "create_vari": [116, 174], "var_shap": [116, 174], "fan_out": [116, 174], "fan_in": [116, 174], "firstlayersiren": 116, "glorotuniform": [116, 125, 126, 127, 128, 129, 130, 131, 132, 134, 135, 174], "kaimingnorm": [116, 120], "fan_mod": [116, 174], "negative_slop": 116, "Ones": 116, "siren": 116, "w0": [116, 122], "30": [116, 122, 315, 509, 512, 670, 706, 708, 876, 877, 880], "numer": [116, 155, 174, 209, 220, 228, 234, 315, 316, 319, 328, 331, 377, 380, 389, 392, 406, 409, 410, 413, 414, 417, 426, 429, 430, 433, 434, 437, 438, 441, 470, 473, 474, 477, 484, 487, 489, 492, 493, 496, 501, 504, 505, 508, 513, 516, 529, 532, 533, 537, 548, 551, 552, 587, 588, 610, 611, 616, 617, 670, 674, 676, 692, 695, 706, 708, 719, 721, 725, 727, 728, 730, 731, 733, 843, 854, 855, 856, 857, 876, 881, 884, 893, 896, 901, 904], "power": [116, 172, 173, 174, 315, 369, 372, 402, 405, 501, 504, 552, 587, 610, 617, 670, 699], "gain": [116, 151, 169, 174], "input_channel": [125, 126, 127, 128, 129, 130, 131, 134, 135, 170, 174], "output_channel": [125, 126, 127, 128, 129, 130, 131, 134, 135, 174], "filter_s": [125, 126, 127], "stride": [125, 126, 127, 128, 129, 130, 131, 132, 657, 658, 659, 660, 661, 662, 663, 664], "pad": [125, 126, 127, 128, 129, 130, 131, 132, 552, 579, 657, 658, 659, 660, 661, 662, 663, 664, 756, 766, 769, 812, 815], "weight_initi": [125, 126, 127, 128, 129, 130, 131, 132, 134, 135, 174], "bias_initi": [125, 126, 127, 128, 129, 130, 131, 132, 135, 174], "data_format": [125, 126, 127, 128, 129, 130, 131, 132, 657, 658, 659, 660, 661, 662, 663, 664], "nwc": [125, 126, 127, 657, 658, 659], "dilat": [125, 126, 127, 128, 129, 130, 131, 132, 657, 658, 659, 660, 661, 662, 663, 664], "1d": [125, 126, 127], "convolut": [125, 126, 127, 128, 129, 130, 131, 132, 657, 658, 659, 660, 661, 662, 663, 664], "channel": [125, 126, 127, 128, 129, 130, 131, 132, 134, 135, 150, 151, 152, 153, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 552, 579], "filter": [125, 126, 127, 128, 129, 130, 131, 132, 153, 657, 658, 659, 660, 661, 662, 663, 664], "slide": [125, 126, 127, 128, 129, 130, 131, 132, 657, 658, 659, 660, 661, 662, 663, 664], "window": [125, 126, 127, 128, 129, 130, 131, 132, 151, 153, 657, 658, 659, 660, 661, 662, 663, 664], "valid": [125, 126, 127, 128, 129, 130, 131, 132, 165, 170, 228, 242, 657, 658, 659, 660, 661, 662, 663, 664, 756, 800, 803, 909, 910, 913, 914, 917], "per": [125, 126, 127, 128, 129, 130, 131, 132, 151, 173, 265, 657, 658, 659, 660, 661, 662, 663, 664], "weight": [125, 126, 127, 128, 129, 130, 131, 132, 134, 135, 137, 138, 141, 143, 144, 160, 164, 174, 175, 626, 628, 629, 631, 634, 636, 639, 641, 643, 645, 647, 649, 657, 666, 667, 669], "bia": [125, 126, 127, 128, 129, 130, 131, 132, 135, 170, 174, 657, 666, 667], "ncw": [125, 126, 127, 657, 658, 659], "construct": [125, 126, 127, 128, 129, 130, 131, 132, 134, 135, 136, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 170, 171, 174, 175, 756, 808, 811], "conv1dtranspos": 125, "output_shap": [125, 127, 129, 131, 657, 659, 661, 663], "filter_shap": [125, 128, 129, 130, 131, 132], "nhwc": [125, 128, 129, 132, 657, 660, 661, 664], "2d": [125, 128, 129, 132, 670, 715], "nchw": [125, 128, 129, 132, 657, 660, 661, 664], "conv2dtranspos": 125, "ndhwc": [125, 130, 131, 657, 662, 663], "3d": [125, 130, 131, 186], "ncdhw": [125, 130, 131, 657, 662, 663], "conv3dtranspos": 125, "depthwiseconv2d": 125, "num_channel": [125, 132], "depthwis": [125, 132, 657, 664], "prob": [125, 133, 657, 665, 843, 844], "randomli": [125, 133, 657, 665], "sampl": [125, 133, 159, 657, 665, 843, 844, 848, 849, 851, 876, 897, 900, 905, 908], "bernoul": [125, 133], "lstm": [125, 170, 657, 667], "num_lay": [125, 134], "return_sequ": [125, 134], "return_st": [125, 134], "cell": [125, 134, 657, 667], "latest": [125, 134, 150, 152, 153, 156, 187, 228, 237, 240, 315, 333, 336, 373, 376, 377, 380, 385, 388, 410, 413, 493, 496, 525, 528, 529, 532, 756, 770, 773, 790, 793, 860, 861, 862, 865, 866, 869, 876, 881, 884], "timestep": [125, 134, 170, 657, 667], "hidden": [125, 134, 174, 657, 667], "get_initial_st": [125, 134], "batch_shap": [125, 134, 170, 172, 175, 209, 214, 552, 605, 657, 667, 668, 669, 670, 737, 739, 843, 844], "explicitli": [125, 134, 136, 137, 138, 156, 160, 161, 163, 164, 167, 170, 187, 670, 683, 685], "with_bia": [125, 135, 174], "refer": [125, 135, 150, 151, 159, 160, 165, 168, 187, 209, 214, 315, 406, 409, 454, 457, 626, 628, 629, 631, 670, 731, 733, 737, 739, 876, 897, 900, 905, 908, 909, 910, 913, 914, 917], "dens": [125, 135], "receiv": [125, 135, 151, 159, 165, 166, 265, 274, 275, 552, 559, 602], "multiheadattent": 125, "query_dim": [125, 136], "num_head": [125, 136, 164, 657, 668], "head_dim": [125, 136], "64": [125, 136, 150, 173, 174, 315, 525, 528, 529, 532, 657, 663, 664, 670, 706, 708, 876, 877, 880, 918], "dropout_r": [125, 136], "context_dim": [125, 136], "with_to_q_fn": [125, 136], "with_to_kv_fn": [125, 136], "with_to_out_fn": [125, 136], "build_mod": [125, 136, 137, 138], "on_init": [125, 136, 137, 138], "multi": [125, 136, 157, 164, 169, 187, 657, 668, 670, 674, 676, 918, 924], "head": [125, 136, 150, 164, 657, 668, 918], "rate": [125, 136, 141, 142, 143, 144, 145, 146, 626, 629, 631, 634, 636, 639, 641, 643, 645, 647, 649, 816, 817, 818, 819], "context": [125, 136, 151, 157, 164, 165, 166, 265, 552, 603, 657, 668], "measur": [125, 136, 164, 657, 668], "dot": [125, 136, 164, 657, 668, 669, 670, 725, 727, 731, 733], "product": [125, 136, 164, 315, 484, 487, 552, 570, 657, 668, 669, 670, 674, 676, 692, 695, 706, 708, 725, 727, 731, 733, 876, 877, 880, 893, 896], "final": [125, 136, 151, 156, 157, 160, 163, 165, 167, 170, 172, 173, 209, 218, 219, 552, 579], "built": [125, 136, 137, 138, 150, 171, 209, 210, 265], "__call__": [125, 136, 137, 138], "run": [125, 136, 137, 138, 150, 153, 158, 159, 161, 168, 170, 171, 172, 173, 174, 175, 186, 187, 265, 274, 626, 628, 629, 631, 639, 641, 816, 817, 818, 819], "compile_on_next_step": [137, 138, 141, 142, 143, 144, 145, 146, 174], "store_var": [137, 138], "arg_stateful_idx": [137, 138], "kwarg_stateful_idx": [137, 138], "fallback_to_non_compil": [137, 138, 141, 145], "with_partial_v": [137, 138], "initialz": [137, 138], "compil": [137, 138, 141, 142, 143, 144, 145, 146, 155, 164, 169, 171, 187, 918], "forward": [137, 138, 141, 145, 156, 175, 186, 187], "id": [137, 138, 150, 163, 164, 265, 284], "track": [137, 138, 150, 151, 265, 820, 832], "part": [137, 138, 151, 155, 158, 159, 160, 170, 171, 175, 186, 187, 209, 224, 225, 626, 629, 631, 634, 636, 639, 641, 643, 645, 647, 649], "fall": [137, 138, 141, 145, 165, 169, 918], "non": [137, 138, 141, 145, 157, 164, 165, 170, 206, 207, 228, 234, 252, 315, 470, 473, 474, 477, 657, 660, 670, 677, 679, 700, 702, 719, 721, 725, 727, 731, 733, 734, 736, 855, 856, 857, 858, 876, 881, 884, 885, 888, 889, 892, 893, 896, 905, 908, 909, 910, 913, 914, 917], "from_cal": [137, 138], "check_submod_ret": [137, 138], "get_mod_kei": [137, 138], "top_mod": [137, 138], "mod_depth": [137, 138], "mod_height": [137, 138], "mod_with_top_mod_key_chain": [137, 138], "depth": [137, 138, 173, 174, 175, 186, 265, 289, 293, 297, 552, 590, 605, 820, 832], "save_weight": [137, 138], "weights_path": [137, 138], "show_mod_in_top_mod": [137, 138], "upper_depth": [137, 138], "lower_depth": [137, 138], "show_structur": [137, 138], "show_v_in_top_v": [137, 138], "sub_mod": [137, 138], "show_v": [137, 138], "track_submod_call_ord": [137, 138], "track_submod_ret": [137, 138], "v_with_top_v_key_chain": [137, 138], "layernorm": 139, "normalized_shap": [139, 140], "elementwise_affin": [139, 140], "mini": [139, 140, 838, 839, 842], "trail": [139, 140], "small": [139, 140, 157, 160, 170, 174, 187, 315, 484, 487, 670, 700, 702, 709, 711, 838, 839, 842], "denomin": [139, 140, 160, 187, 552, 578, 588, 611, 616, 617, 838, 839, 842], "_min_bas": [139, 140, 552, 617, 838, 839, 842], "learnabl": [139, 140, 175, 838, 839, 842], "affin": [139, 140], "submodul": [139, 140, 147, 148, 150, 151, 152, 153, 158, 159, 160, 166, 169, 170, 174, 918], "adam": [141, 143, 173, 174, 175, 626, 628, 629, 631, 639, 641, 918], "0001": [141, 142, 143], "forget": [141, 142, 143, 626, 628, 629, 631, 639, 641], "moment": [141, 142, 143, 161, 187, 626, 628, 629, 631, 639, 641], "divisor": [141, 142, 143, 315, 389, 392, 505, 508, 626, 628, 629, 631, 639, 641, 876, 897, 900, 905, 908], "prevent": [141, 142, 143, 151, 167, 172, 626, 628, 629, 631, 639, 641, 876, 901, 904], "divis": [141, 142, 143, 160, 315, 369, 372, 389, 392, 414, 417, 505, 508, 552, 578, 588, 611, 616, 617, 626, 628, 629, 631, 639, 641], "set_stat": [141, 142, 143, 144, 145, 146, 174], "lamb": [141, 174, 626, 639, 641], "trust": [141, 143, 626, 639, 641], "ratio": [141, 143, 265, 626, 639, 641], "decai": [141, 143, 144, 626, 639, 641, 643, 645], "lar": [141, 174, 626, 639, 641, 643, 645], "lambda": [141, 144, 146, 152, 170, 173], "layerwis": [141, 144, 626, 643, 645], "init_on_first_step": [141, 145], "grad": [141, 145, 164, 173, 174, 175, 918], "ignore_miss": [141, 145], "overriden": [141, 145], "privat": [141, 145, 153], "_step": [141, 145, 174], "miss": [141, 145, 150, 157, 159, 163, 164], "sgd": 141, "stochast": [141, 146], "descent": [141, 146, 174, 626, 634, 636], "sub_modul": [147, 148], "strongli": [149, 150, 918, 924], "welcom": [149, 150, 151, 918, 924], "skill": 149, "vetern": 149, "beginn": 149, "aspect": [149, 173, 918], "guid": [149, 150, 151, 159, 918], "through": [149, 151, 152, 154, 157, 160, 161, 164, 169, 170, 172, 173, 174, 175, 186, 315, 345, 348], "journei": [149, 918, 924], "inclusvi": 149, "big": [149, 187], "team": [149, 150, 151], "board": 149, "contributor": [149, 150, 151, 169, 918], "section": [149, 151, 152, 154, 155, 156, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 173, 174, 860, 861, 862, 864], "below": [149, 150, 152, 153, 154, 155, 157, 160, 164, 165, 166, 167, 170, 171, 172, 173, 174, 175, 186, 209, 220, 224, 225, 315, 353, 356, 373, 376, 385, 388, 509, 512, 543, 547, 670, 677, 679, 680, 682, 728, 730, 756, 770, 773, 774, 777, 860, 861, 862, 865, 866, 869, 918], "best": [149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 552, 602], "go": [149, 150, 151, 152, 154, 155, 157, 164, 169, 173, 187, 820, 831], "finish": [149, 150, 154, 918], "dive": [149, 151, 152, 169, 172, 173, 187, 918], "environ": [149, 151, 153, 186], "basic": [149, 152, 153], "fork": [149, 150, 552, 603], "doc": [149, 152, 156, 168, 170, 173, 174, 918], "document": [149, 151, 171, 173, 175], "local": [149, 150, 153, 160], "task": [149, 151, 186, 816, 817, 818, 819, 918], "video": [149, 151, 156, 157, 168], "realli": [150, 164, 187], "contribut": [150, 151, 152, 170, 924], "toward": [150, 170, 756, 790, 793, 918, 924], "page": [150, 151, 171, 175, 185, 918, 924], "explain": [150, 151, 152, 155, 156, 157, 159, 160, 161, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 918, 924], "main": [150, 153, 162, 164, 209, 214, 224, 225, 670, 680, 682, 728, 730], "prefer": [150, 164], "git": [150, 151], "com": 150, "unifyai": [150, 153], "http": [150, 156, 228, 237, 240, 315, 333, 336, 373, 376, 377, 380, 385, 388, 410, 413, 493, 496, 525, 528, 529, 532, 626, 628, 629, 631, 756, 770, 773, 790, 793, 860, 861, 862, 865, 866, 869, 876, 881, 884], "gh": 150, "your_fold": 150, "cours": [150, 151, 157, 173, 187], "whatev": [150, 187], "integr": [150, 159, 228, 234], "familiar": [150, 152], "sure": [150, 152, 158], "elig": 150, "free": [150, 151, 152, 153, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 186, 918], "student": 150, "licenc": 150, "peopl": [150, 151, 154], "seem": [150, 174, 187], "explicit": [150, 153, 164, 165, 167, 170, 187], "remind": 150, "pace": 150, "suggest": [150, 151, 155], "packag": [150, 153, 187], "ensur": [150, 151, 159, 163, 165, 168, 552, 596], "pypi": [150, 152, 187], "person": [150, 151], "experi": [150, 171, 173, 187], "avoid": [150, 151, 159, 161, 162, 164, 172, 265, 315, 406, 409], "pip": [150, 186, 918], "instal": [150, 153, 186, 918], "abil": [150, 171, 187], "perhap": [150, 172, 173, 174, 187], "command": [150, 153, 918], "ivy_dev": [150, 151, 153], "setup": 150, "click": [150, 151, 156, 918], "icon": [150, 151], "side": [150, 151], "choos": [150, 151, 175, 265, 310, 315, 470, 473, 474, 477, 855, 859, 860, 861, 862, 864, 876, 881, 884, 885, 888, 889, 892], "panel": 150, "select": [150, 151, 159, 170, 172, 175, 187], "drop": [150, 187], "down": [150, 172], "path": [150, 153], "manual": [150, 151, 159, 174, 820, 821, 830, 831], "builtin": [150, 153, 172, 174], "cmd": [150, 153], "directori": [150, 151, 153, 552, 613], "folder": [150, 151, 153, 155, 158, 159, 160], "abov": [150, 151, 153, 156, 157, 160, 161, 163, 164, 167, 168, 172, 173, 174, 175, 209, 220, 224, 225, 228, 237, 240, 315, 328, 331, 333, 336, 353, 356, 373, 376, 377, 380, 385, 388, 410, 413, 484, 487, 493, 496, 509, 512, 525, 528, 529, 532, 538, 542, 543, 547, 552, 580, 657, 660, 669, 670, 677, 679, 680, 682, 683, 685, 728, 730, 756, 770, 773, 774, 777, 790, 793, 838, 839, 842, 843, 845, 846, 860, 861, 862, 865, 866, 869, 876, 881, 884, 893, 896, 897, 900, 901, 904, 909, 910, 913], "m": [150, 151, 153, 154, 170, 209, 220, 224, 225, 552, 561, 670, 671, 673, 677, 679, 680, 682, 683, 685, 686, 688, 689, 691, 692, 695, 700, 702, 703, 705, 706, 708, 709, 711, 712, 714, 716, 718, 719, 721, 722, 724, 728, 730, 843, 848, 849, 851], "python3": [150, 153], "script": [150, 151, 153, 157, 170, 187], "bat": [150, 151, 153], "OR": [150, 151, 153, 315, 365, 368, 474, 477, 909, 914, 917], "bin": [150, 151, 153], "mac": [150, 151, 153], "linux": [150, 151, 153], "virtualenv": 150, "os": 150, "note": [150, 151, 155, 156, 157, 164, 315, 505, 508, 670, 683, 685, 719, 721, 756, 800, 803, 860, 862, 876, 885, 888], "tick": [150, 151], "To": [150, 157, 160, 164, 173, 174, 175, 918], "ivy_test": [150, 151], "test_array_api": [150, 151, 158, 159], "cd": [150, 151, 153], "txt": 150, "visual": [150, 187], "jetbrain": 150, "remot": 150, "mitig": 150, "potenti": [150, 169, 315, 406, 409], "conflict": [150, 151, 173], "yet": [150, 152, 164], "particular": [150, 151, 155, 167, 315, 316, 319], "system": [150, 187, 670, 716, 718], "instruct": [150, 152], "desktop": 150, "wsl": 150, "powershel": 150, "admin": 150, "visit": 150, "link": 150, "profession": 150, "execut": [150, 153, 164, 167, 170, 172, 175, 187, 552, 623], "deploy": 150, "top": [150, 151, 159, 173, 174, 918], "press": [150, 173, 918], "ok": 150, "caus": [150, 151, 157, 159, 164, 167, 187], "earlier": [150, 151], "might": [150, 151, 155, 159, 162, 170, 172, 173, 552, 573], "necessari": [150, 157, 161, 164, 167], "virtualis": 150, "detail": [150, 151, 152, 155, 158, 159, 160, 161, 162, 164, 168, 173, 174, 209, 215, 860, 861, 862, 864], "sudo": 150, "apt": 150, "ca": 150, "certif": 150, "curl": 150, "gnupg": 150, "lsb": 150, "mkdir": 150, "keyr": 150, "fssl": 150, "download": [150, 159], "gpg": 150, "dearmor": 150, "o": [150, 170, 552, 561], "echo": 150, "deb": 150, "arch": 150, "dpkg": 150, "architectur": [150, 175, 187], "lsb_releas": 150, "cs": 150, "tee": 150, "null": 150, "ce": 150, "cli": 150, "containerd": 150, "io": 150, "compos": [150, 164, 187], "plugin": 150, "systemctl": 150, "permiss": 150, "relat": [150, 151, 186, 265], "post": [150, 175, 838, 839, 842, 918, 924], "headach": 150, "arm": 150, "m1": 150, "instead": [150, 151, 152, 156, 157, 159, 160, 164, 167, 168, 170, 172, 173, 187], "featur": [150, 155, 168, 173, 918], "vm": 150, "azur": 150, "cloud": [150, 186], "defin": [150, 152, 155, 156, 165, 168, 172, 174, 187, 315, 484, 487, 505, 508, 552, 605, 670, 674, 676, 683, 685, 716, 718, 843, 845, 846, 876, 881, 884, 885, 888, 889, 892], "dockerfil": [150, 153], "longer": [150, 165, 167], "worri": 150, "platform": 150, "agnost": [150, 163, 168, 170, 172, 175, 187, 918], "usual": 150, "studio": 150, "favourit": 150, "extens": [150, 151, 156, 209, 220, 228, 237, 240, 315, 328, 331, 333, 336, 353, 356, 373, 376, 377, 380, 385, 388, 410, 413, 493, 496, 509, 512, 525, 528, 529, 532, 538, 542, 543, 547, 670, 677, 679, 756, 770, 773, 774, 777, 790, 793, 860, 861, 862, 865, 866, 869, 876, 881, 884, 909, 910, 913], "theme": 150, "too": [150, 151, 187, 315, 328, 331, 484, 487], "done": [150, 151, 157, 159, 173], "unsupport": [150, 165, 228, 249, 250], "slow": 150, "ipad": 150, "long": [150, 151, 157, 657, 667], "browser": 150, "cool": [150, 155], "requisit": 150, "pane": [150, 151], "readi": [150, 152], "begin": [150, 820, 821, 831], "outlin": [150, 151, 152, 154, 156, 159, 160, 164, 167, 172], "dropdown": 150, "tab": [150, 173, 918], "master": [150, 151, 164], "vs": 150, "bottom": 150, "box": 150, "patient": 150, "upto": 150, "minut": 150, "launch": 150, "That": [150, 151, 172, 173, 174, 315, 505, 508], "approach": [150, 151, 159, 160, 164, 172, 173, 187], "colour": 150, "applic": [150, 165, 166, 174, 657, 668, 669, 820, 826, 832], "good": [150, 151, 152, 153, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 174], "chanc": 150, "vscode": 150, "explor": [150, 171, 175, 186], "troubleshoot": 150, "sometim": [150, 151], "ever": [150, 151, 152, 153, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168], "bit": [150, 157, 160, 164, 172, 228, 247, 248, 251, 315, 357, 360, 361, 364, 369, 372, 876, 893, 896, 901, 904], "usr": 150, "more": [150, 151, 152, 154, 155, 157, 159, 160, 161, 162, 163, 164, 167, 168, 169, 170, 171, 172, 173, 174, 175, 186, 187, 209, 210, 228, 235, 315, 406, 409, 670, 692, 695, 756, 774, 777, 860, 861, 862, 864, 918], "nutshel": [150, 168], "hook": 150, "lint": 150, "fix": [150, 151], "fail": [150, 152, 158, 159, 170, 172], "attempt": [150, 187], "succe": 150, "problemat": 150, "proce": [150, 151, 152, 153, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168], "modifi": [150, 151, 156, 160, 165, 166, 170], "properli": [150, 154], "enter": [150, 151, 163, 165, 166, 168, 265], "unsur": [150, 151, 152, 153, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168], "feel": [150, 151, 152, 153, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 918], "server": [151, 918], "suitabl": [151, 155, 164], "quick": [151, 154, 174], "tendenc": 151, "land": 151, "end": [151, 164, 167, 169, 186, 187, 209, 210, 315, 345, 348, 918, 924], "world": 151, "come": [151, 152, 174, 185, 918, 924], "fly": 151, "hard": [151, 172], "respons": [151, 153], "internship": 151, "comment": 151, "trigger": 151, "unansw": 151, "label": [151, 170, 171, 175, 740, 741, 744, 746, 749, 751, 754], "respond": 151, "someon": [151, 187], "strive": [151, 187], "repli": 151, "newli": [151, 167, 206, 207, 228, 234, 552, 563], "bug": [151, 159], "serv": [151, 159, 160, 163, 164, 168, 169, 918], "suspect": 151, "behaviour": [151, 156, 159, 163, 164, 167, 168, 172], "observ": 151, "confid": 151, "wrong": 151, "someth": [151, 155, 173, 174, 187], "bet": 151, "act": [151, 157, 187], "placehold": [151, 163, 168, 820, 832], "mark": [151, 159], "ii": [151, 876, 877, 880], "iii": 151, "titl": [151, 918], "issue_numb": 151, "No": [151, 170], "progress": [151, 164, 171, 175], "pr": 151, "soon": [151, 164, 185, 187, 918, 924], "solut": [151, 159, 164, 670, 716, 718], "review": [151, 155], "merg": 151, "everi": [151, 152, 153, 157, 158, 159, 160, 161, 162, 164, 167, 168, 170, 172, 174, 209, 216, 217, 552, 553, 556], "dai": 151, "close": [151, 156, 315, 406, 409, 509, 512, 670, 719, 721], "likewis": [151, 156, 160, 164, 165, 168, 173], "freed": 151, "purpos": [151, 153, 157, 159, 160, 162, 163, 164, 168, 169, 172, 315, 406, 409, 918], "remain": [151, 157, 187, 315, 328, 331, 484, 487, 505, 508, 756, 786, 789, 820, 826], "short": [151, 174, 657, 667], "basi": [151, 158, 173], "situat": [151, 175], "alloc": [151, 187, 209, 224, 225, 228, 234, 265], "upon": [151, 157, 159, 167, 187], "period": 151, "unabl": 151, "obvious": 151, "never": [151, 164], "reflect": [151, 163], "qualiti": 151, "hypothet": 151, "frustrat": 151, "delai": 151, "busi": 151, "fine": [151, 172, 175], "becaus": [151, 156, 159, 160, 161, 163, 165, 166, 167, 168, 170, 174, 175, 187], "inact": 151, "me": 151, "unfairli": 151, "definit": [151, 160, 165, 172, 670, 671, 673, 674, 676], "investig": 151, "Then": [151, 153, 172, 187], "practic": [151, 159], "separ": [151, 159, 163, 170, 172, 173], "branch": [151, 164, 187, 206, 207, 315, 345, 348], "role": [151, 171], "date": 151, "upstream": [151, 158], "complic": [151, 170], "root": [151, 153, 173, 315, 525, 528, 843, 844, 848, 849, 851], "merge_with_upstream": 151, "sh": 151, "name_of_your_branch": 151, "resolv": [151, 876, 893, 896, 901, 904], "push": [151, 158], "both": [151, 156, 157, 160, 164, 166, 167, 168, 170, 172, 173, 174, 175, 186, 187, 228, 237, 240, 255, 315, 328, 331, 333, 336, 377, 380, 410, 413, 493, 496, 501, 504, 525, 528, 529, 532, 538, 542, 552, 580, 657, 660, 669, 670, 674, 676, 692, 695, 731, 733, 756, 790, 793, 838, 839, 842, 876, 881, 884, 909, 910, 913], "abort": 151, "tediou": 151, "resolut": 151, "stash": 151, "reinstat": 151, "fetch": 151, "uncommit": 151, "unstag": 151, "untrack": 151, "comprehens": 151, "explan": [151, 156, 164, 168, 172], "atlassian": 151, "tutori": 151, "quit": [151, 152, 156, 160, 162, 163], "logic": [151, 162, 163, 165, 166, 172, 265, 301, 315, 466, 469, 470, 473, 474, 477, 909, 910, 913, 914, 917, 918], "blame": 151, "revis": 151, "author": [151, 918], "eg": 151, "past": 151, "l": [151, 154, 670, 671, 673, 683, 685, 692, 695, 728, 730], "grep": 151, "commit_id": 151, "handi": 151, "histori": 151, "toggl": 151, "vertic": 151, "highlight": [151, 157], "previou": [151, 159, 168, 175, 187, 626, 629, 631, 639, 641], "inform": [151, 228, 248, 251, 552, 558, 626, 652], "whenev": [151, 172, 173], "tag": 151, "think": [151, 157], "interact": [151, 918], "yourself": [151, 152, 186], "simpler": [151, 172], "cannot": [151, 161, 165, 175], "least": [151, 157, 160, 163, 670, 692, 695], "tickbox": 151, "corner": 151, "span": 151, "intent": [151, 167], "larg": [151, 173, 315, 328, 331, 484, 487], "discourag": 151, "philosophi": 151, "increment": [151, 552, 595], "frequent": [151, 152], "valuabl": 151, "infrequ": 151, "wast": 151, "spot": [151, 160], "mistak": 151, "propos": 151, "mountain": 151, "advoc": [151, 187], "individu": [151, 152, 160], "style": [151, 855, 858], "ve": [151, 169, 172, 843, 844, 918], "actual": [151, 154, 160, 167, 169, 172, 174, 187], "aim": [151, 169], "subsect": 151, "session": [151, 918], "block": [151, 160, 169, 171, 175, 187, 265, 918], "smaller": [151, 170, 175, 756, 757, 760, 790, 793, 876, 893, 896, 901, 904], "edit": 151, "beauti": 151, "particularli": [151, 173, 187], "concern": [151, 154, 157, 164, 167, 169], "effici": [151, 159, 160, 164, 167, 168, 170, 173, 187], "difficult": [151, 159, 187, 860, 861, 862, 864], "undo": 151, "stress": 151, "frequenc": [151, 552, 579], "pycharm": 151, "pytest": [151, 159], "button": 151, "declar": 151, "insid": [151, 153, 155, 165], "exec": 151, "rm": 151, "rf": 151, "cp": 151, "ivy_contain": 151, "bash": [151, 153], "test_ivi": [151, 159], "test_funct": 151, "test_cor": 151, "test_imag": 151, "test_random_crop": 151, "header": 151, "q": [151, 187, 657, 669, 670, 683, 685, 712, 714], "array_api_test": 151, "test_creation_funct": 151, "test_arang": 151, "variou": [151, 156, 162, 168, 186], "wherebi": [152, 164, 820, 832], "broad": 152, "todo": [152, 159], "commit": [152, 159], "NOT": [152, 315, 470, 473], "resourc": 152, "hypothesi": 152, "cover": [152, 156, 157, 160, 162, 169], "direct": [152, 174, 175, 186, 865, 871, 874], "bind": [152, 164], "aforement": 152, "categori": [152, 155, 163, 164, 165, 169, 918], "parent": [152, 172], "hint": [152, 155, 156, 160, 163, 167, 168, 209, 220, 228, 237, 240, 315, 328, 331, 333, 336, 353, 356, 373, 376, 377, 380, 385, 388, 410, 413, 493, 496, 509, 512, 525, 528, 529, 532, 538, 542, 543, 547, 552, 580, 657, 660, 669, 670, 677, 679, 756, 770, 773, 774, 777, 790, 793, 838, 839, 842, 860, 861, 862, 865, 866, 869, 876, 881, 884, 909, 910, 913], "its": [152, 153, 156, 228, 235, 265, 309, 670, 692, 695, 756, 770, 773, 786, 789, 790, 793, 804, 807], "thorough": [152, 156, 159, 168], "transpil": [152, 169, 171, 918, 924], "builder": [153, 185, 187, 918], "maco": 153, "ubuntu": 153, "uid": 153, "make_docs_without_dock": 153, "rel": [153, 626, 629, 631, 634, 636, 639, 641, 643, 645, 647, 649, 670, 680, 682, 700, 702, 709, 711, 728, 730, 756, 774, 777, 790, 793, 865, 866, 869, 871, 874, 918], "synchron": 153, "rest": [153, 171, 175], "remove_doc": 153, "_": [153, 156, 164, 167, 172, 173, 228, 237, 240, 315, 333, 336, 373, 376, 377, 380, 385, 388, 410, 413, 493, 496, 525, 528, 529, 532, 626, 628, 629, 631, 670, 737, 739, 756, 770, 773, 790, 793, 860, 861, 862, 865, 866, 869, 876, 881, 884], "fulfil": [153, 169, 918], "autogenerated_sourc": 153, "png": [153, 173], "_imag": 153, "lastli": 153, "rst": 153, "partial_sourc": 153, "conf": 153, "create_rst_fil": 153, "repres": [153, 172, 209, 220, 228, 247, 315, 324, 327, 328, 331, 337, 340, 349, 352, 385, 388, 484, 487, 521, 524, 543, 547, 657, 666, 670, 715, 716, 718], "overal": [153, 156, 164, 165, 166, 175], "markup": 153, "extract": [153, 155], "get_functions_and_class": 153, "doctr": 153, "readm": [153, 187], "module_nam": 153, "copy_readme_to_rst": 153, "tabl": 153, "toc": 153, "tree": 153, "append_toctree_to_rst": 153, "create_index_rst": 153, "\u03c0": [153, 315, 320, 323, 333, 336, 341, 344, 345, 348], "namespac": [153, 155, 165, 170, 175], "who": [154, 169, 187], "mainli": [154, 171, 173], "under": [154, 156, 157, 158, 159, 160, 164, 169, 170, 173, 175], "hood": [154, 157, 159, 160, 164, 169, 170, 173, 175], "weed": [154, 169], "behind": [154, 169, 171, 626, 629, 631, 634, 636, 639, 641, 643, 645, 647, 649], "navig": 154, "tour": 154, "primari": [154, 159, 161, 167, 187], "composit": [154, 159, 161, 163, 164, 167, 170, 174, 175, 187], "nestabl": [154, 156, 157, 159, 167, 228, 237, 240, 315, 328, 331, 333, 336, 377, 380, 410, 413, 493, 496, 525, 528, 529, 532, 538, 542, 552, 580, 657, 660, 669, 756, 790, 793, 838, 839, 842, 876, 881, 884, 909, 910, 913], "dynam": [154, 165, 166, 167, 170, 206, 207], "runtim": [154, 159, 265], "h": [154, 164, 657, 660, 661, 662, 663, 664], "j": [154, 552, 560, 561, 670, 728, 730, 876, 877, 880], "borrow": 154, "n": [154, 209, 220, 224, 225, 552, 561, 657, 665, 670, 680, 682, 692, 695, 699, 700, 702, 703, 705, 706, 708, 709, 711, 712, 714, 719, 721, 722, 724, 728, 730, 731, 733, 734, 736, 737, 739, 756, 766, 769, 770, 773, 778, 781, 800, 803, 812, 815, 843, 848, 849, 851, 855, 858, 876, 885, 888, 897, 900, 901, 904, 905, 908, 909, 910, 913, 914, 917], "taken": [155, 175, 670, 680, 682], "meta": [155, 163, 817, 818, 819], "overlap": 155, "sever": [155, 187, 670, 689, 691], "judgement": 155, "locat": [155, 159, 161, 166, 843, 844], "some_namespac": 155, "some_backend": 155, "another_backend": 155, "break": [155, 168, 172, 187, 918], "anyth": [155, 918], "refactor": 155, "ongo": 155, "subfold": [155, 159], "file_nam": 155, "my_func": [155, 157], "int": [155, 157, 160, 164, 165, 166, 167, 168, 175, 198, 203, 206, 207, 209, 212, 214, 216, 217, 218, 219, 222, 224, 225, 226, 228, 236, 245, 247, 248, 251, 254, 265, 287, 290, 291, 292, 293, 301, 302, 303, 309, 310, 315, 353, 356, 357, 360, 361, 364, 365, 368, 369, 372, 373, 376, 552, 558, 570, 571, 574, 575, 576, 579, 580, 589, 605, 608, 609, 614, 615, 624, 626, 628, 629, 631, 639, 641, 657, 658, 660, 662, 663, 664, 670, 674, 676, 680, 682, 725, 727, 728, 730, 731, 733, 734, 736, 740, 746, 749, 751, 754, 756, 762, 765, 766, 769, 770, 773, 774, 777, 778, 781, 782, 785, 790, 793, 795, 796, 799, 800, 803, 804, 807, 808, 811, 812, 815, 816, 817, 818, 819, 820, 832, 838, 839, 842, 843, 844, 845, 846, 848, 849, 851, 853, 855, 856, 857, 865, 866, 869, 871, 874, 876, 881, 884, 885, 888, 889, 892, 897, 900, 901, 904, 905, 908, 909, 910, 913, 914, 917], "nativedtyp": [155, 165, 166, 168, 209, 210, 211, 212, 213, 214, 216, 217, 221, 222, 223, 226, 227, 228, 233, 234, 244, 245, 246, 255, 876, 901, 904], "nativedevic": [155, 165, 166, 168, 209, 210, 211, 212, 213, 214, 216, 217, 218, 219, 221, 222, 223, 226, 227, 265, 282, 283, 284, 298, 304, 306, 308, 310, 311, 314, 552, 605, 843, 844, 845, 846, 848, 849, 851], "my": 155, "cooler": 155, "produc": [155, 265, 274, 275, 657, 669], "something_cool": 155, "category_nam": [156, 160, 165, 166, 168], "contrast": [156, 168], "backend_nam": [156, 160, 161, 162, 165, 166, 168], "account": 156, "instanti": 156, "firstli": [156, 157, 160, 163, 165, 167, 173], "templat": [156, 918], "spec": [156, 157], "api_specif": [156, 228, 237, 240, 315, 333, 336, 373, 376, 377, 380, 385, 388, 410, 413, 493, 496, 525, 528, 529, 532, 756, 770, 773, 790, 793, 860, 861, 862, 865, 866, 869, 876, 881, 884], "array_api": 156, "preview": 156, "render": 156, "incorrectli": 156, "onlin": [156, 918], "approxim": [156, 198, 199, 315, 320, 323, 324, 327, 333, 336, 337, 340, 341, 344, 345, 348, 381, 384, 385, 388, 402, 405, 406, 409, 446, 449, 450, 453, 454, 457, 458, 461, 501, 504, 517, 520, 521, 524, 538, 542, 543, 547, 670, 700, 702, 709, 711], "tangent": [156, 198, 205, 315, 341, 344, 345, 348, 349, 352, 538, 542, 543, 547], "domain": [156, 315, 320, 323, 324, 327, 333, 336, 337, 340, 341, 344, 345, 348, 381, 384, 385, 388, 402, 405, 406, 409, 446, 449, 450, 453, 458, 461, 517, 520, 521, 524, 525, 528, 538, 542, 543, 547], "infin": [156, 208, 228, 234, 315, 316, 319, 324, 327, 328, 331, 337, 340, 341, 344, 345, 348, 377, 380, 381, 384, 385, 388, 402, 405, 406, 409, 410, 413, 414, 417, 426, 429, 430, 433, 446, 449, 450, 453, 458, 461, 462, 465, 484, 487, 501, 504, 505, 508, 509, 512, 517, 520, 521, 524, 525, 528, 538, 542, 543, 547, 548, 551, 670, 734, 736, 876, 881, 884, 889, 892, 909, 910, 913, 914, 917], "codomain": [156, 315, 320, 323, 324, 327, 333, 336, 337, 340, 341, 344, 345, 348, 381, 384, 385, 388, 402, 405, 406, 409, 446, 449, 450, 453, 458, 461, 517, 520, 521, 524, 525, 528, 538, 542, 543, 547], "x_i": [156, 315, 316, 319, 320, 323, 324, 327, 333, 336, 337, 340, 341, 344, 357, 360, 377, 380, 381, 384, 385, 388, 402, 405, 406, 409, 410, 413, 426, 429, 430, 433, 434, 437, 446, 449, 450, 453, 458, 461, 470, 473, 489, 492, 509, 512, 513, 516, 517, 520, 521, 524, 525, 528, 529, 532, 538, 542, 543, 547, 548, 551, 860, 861, 862, 864, 876, 881, 884, 885, 888, 889, 892, 897, 900, 901, 904, 905, 908], "assum": [156, 161, 165, 172, 173, 187, 209, 220, 228, 237, 240, 315, 328, 331, 333, 336, 353, 356, 373, 376, 377, 380, 381, 384, 385, 388, 410, 413, 493, 496, 509, 512, 517, 520, 525, 528, 529, 532, 538, 542, 543, 547, 552, 580, 657, 660, 669, 670, 677, 679, 756, 770, 773, 774, 777, 790, 793, 838, 839, 842, 860, 861, 862, 865, 866, 869, 876, 881, 884, 909, 910, 913], "express": [156, 170, 175, 315, 320, 323, 333, 336, 341, 344, 345, 348, 381, 384, 517, 520, 538, 542], "radian": [156, 315, 320, 323, 333, 336, 341, 344, 345, 348, 381, 384, 517, 520, 538, 542], "float": [156, 160, 164, 165, 167, 168, 172, 174, 198, 200, 208, 209, 210, 212, 214, 216, 217, 218, 219, 222, 226, 228, 234, 244, 248, 253, 256, 265, 298, 304, 308, 311, 314, 315, 316, 319, 320, 323, 324, 327, 328, 331, 333, 336, 337, 340, 341, 344, 345, 348, 349, 352, 373, 376, 377, 380, 381, 384, 385, 388, 389, 392, 394, 397, 402, 405, 406, 409, 410, 413, 414, 417, 418, 421, 422, 425, 438, 441, 442, 445, 446, 449, 450, 453, 458, 461, 462, 465, 484, 487, 489, 492, 493, 496, 497, 500, 501, 504, 505, 508, 509, 512, 517, 520, 521, 524, 525, 528, 533, 537, 538, 542, 543, 547, 548, 551, 552, 564, 565, 567, 579, 587, 588, 610, 611, 616, 617, 626, 628, 629, 631, 634, 636, 639, 641, 643, 645, 647, 649, 657, 660, 664, 669, 670, 671, 673, 677, 679, 683, 685, 686, 688, 689, 691, 700, 702, 709, 711, 712, 714, 716, 718, 719, 721, 734, 736, 740, 741, 744, 746, 749, 751, 754, 816, 817, 818, 819, 838, 839, 842, 843, 848, 849, 851, 860, 861, 862, 864, 876, 881, 884, 885, 888, 889, 892, 893, 896, 897, 900, 901, 904, 905, 908], "operand": [156, 315, 320, 323, 324, 327, 328, 331, 333, 336, 337, 340, 341, 344, 345, 348, 373, 376, 377, 380, 381, 384, 385, 388, 402, 405, 406, 409, 410, 413, 446, 449, 450, 453, 458, 461, 462, 465, 484, 487, 501, 504, 505, 508, 509, 512, 517, 520, 521, 524, 525, 528, 538, 542, 543, 547, 548, 551, 876, 877, 880, 881, 884, 889, 892, 901, 904], "whose": [156, 209, 224, 225, 315, 324, 327, 337, 340, 349, 352, 381, 384, 385, 388, 501, 504, 517, 520, 521, 524, 538, 542, 543, 547, 552, 563, 670, 671, 673, 677, 679, 680, 682, 683, 685, 686, 688, 689, 691, 700, 702, 703, 705, 706, 708, 709, 711, 712, 714, 716, 718, 719, 721, 722, 724, 728, 730, 756, 774, 777, 790, 793, 860, 861, 862, 876, 877, 880], "ref": [156, 315, 369, 372, 438, 441, 484, 487, 493, 496, 505, 508, 533, 537, 756, 800, 803], "promot": [156, 160, 165, 228, 234, 237, 240, 255, 256, 260, 315, 320, 323, 324, 327, 328, 331, 333, 336, 337, 340, 341, 344, 349, 352, 353, 356, 361, 364, 365, 368, 369, 372, 373, 376, 381, 384, 385, 388, 389, 392, 402, 405, 406, 409, 446, 449, 450, 453, 458, 461, 462, 465, 478, 481, 484, 487, 501, 504, 505, 508, 517, 520, 521, 524, 525, 528, 538, 542, 543, 547, 670, 671, 673, 674, 676, 689, 691, 692, 695, 700, 702, 706, 708, 709, 711, 716, 718, 731, 733, 734, 736, 756, 800, 803, 876, 885, 888], "But": [156, 164, 175], "needless": 156, "info": [156, 918], "subset": [156, 159, 168, 170], "renam": 156, "conform": [156, 209, 220, 228, 237, 240, 315, 328, 331, 333, 336, 353, 356, 373, 376, 377, 380, 385, 388, 406, 409, 410, 413, 493, 496, 509, 512, 525, 528, 529, 532, 538, 542, 543, 547, 670, 677, 679, 756, 770, 773, 774, 777, 790, 793, 860, 861, 862, 865, 866, 869, 876, 881, 884, 909, 910, 913], "org": [156, 228, 237, 240, 315, 333, 336, 373, 376, 377, 380, 385, 388, 410, 413, 493, 496, 525, 528, 529, 532, 626, 628, 629, 631, 756, 770, 773, 790, 793, 860, 861, 862, 865, 866, 869, 876, 881, 884], "elementwise_funct": [156, 315, 333, 336, 373, 376, 377, 380, 385, 388, 410, 413, 493, 496, 525, 528, 529, 532, 756, 790, 793, 860, 861, 862, 865, 866, 869, 876, 881, 884], "descript": [156, 164, 209, 220, 228, 237, 240, 315, 328, 331, 333, 336, 353, 356, 373, 376, 377, 380, 385, 388, 410, 413, 493, 496, 509, 512, 525, 528, 529, 532, 538, 542, 543, 547, 552, 580, 657, 660, 669, 670, 677, 679, 734, 736, 756, 770, 773, 774, 777, 790, 793, 838, 839, 842, 860, 861, 862, 865, 866, 869, 876, 881, 884, 909, 910, 913], "simplic": [156, 174, 186, 209, 220, 228, 237, 240, 315, 328, 331, 333, 336, 353, 356, 373, 376, 377, 380, 385, 388, 410, 413, 493, 496, 509, 512, 525, 528, 529, 532, 538, 542, 543, 547, 552, 580, 657, 660, 669, 670, 677, 679, 756, 770, 773, 774, 777, 790, 793, 838, 839, 842, 860, 861, 862, 865, 866, 869, 876, 881, 884], "judgment": 156, "beyond": [156, 756, 790, 793], "text": 156, "func_nam": [156, 157, 160], "pure": [156, 172, 175, 187], "themselv": [156, 160, 164, 165, 166, 174, 820, 821], "operator_nam": 156, "succinct": 156, "contstructor": 156, "though": [156, 160, 165, 173, 187], "_forward": [156, 170, 173, 174, 918], "former": 156, "latter": [156, 161], "implicit": [156, 164, 170], "docst": 156, "eight": 157, "static_": 157, "op_nam": 157, "__r": 157, "four": [157, 160, 165, 168, 173], "__sub__": [157, 163, 164, 168, 172], "__mul__": [157, 163, 164, 168, 172], "__truediv__": [157, 163, 164], "respect": [157, 163, 164, 165, 168, 209, 220, 315, 316, 319, 328, 331, 345, 348, 353, 356, 361, 364, 365, 368, 369, 372, 373, 376, 389, 392, 394, 397, 414, 417, 418, 421, 422, 425, 438, 441, 442, 445, 462, 465, 466, 469, 474, 477, 478, 481, 484, 487, 493, 496, 505, 508, 533, 537, 626, 628, 629, 631, 633, 634, 636, 639, 641, 643, 645, 647, 649, 670, 712, 714, 816, 817, 818, 819], "recap": [157, 164, 174], "independ": [157, 158, 162, 164, 170, 175, 670, 674, 676, 716, 718, 843, 844], "combinatorili": 157, "variat": [157, 159], "grid": [157, 159, 186, 209, 220], "vari": [157, 159, 164, 172, 860, 861, 862, 864], "simplest": 157, "unus": [157, 167, 206, 207], "18": [157, 164, 315, 373, 376, 670, 680, 682, 706, 708, 876, 877, 880], "excess": [157, 161, 172], "showcas": [157, 186], "demonstr": [157, 172], "replic": [157, 165], "meant": 157, "imaginari": 157, "some_flag": 157, "another_flag": 157, "54": [157, 315, 381, 384, 385, 388, 525, 528, 657, 669, 670, 706, 708, 843, 848, 876, 877, 880], "jointli": 157, "three": [157, 164, 169, 209, 220, 918], "x0": [157, 552, 560], "procedur": 157, "sens": [157, 164, 172], "5574077": 157, "1850398": 157, "5463025": 157, "8422884": 157, "91601413": 157, "9647598": 157, "3738229": 157, "1597457": 157, "0963247": 157, "9955841": 157, "3278579": 157, "seper": [157, 552, 579], "pars": [157, 187], "satisfi": [157, 670, 737, 739], "far": [157, 166, 171, 172, 820, 821, 831], "asid": [157, 186], "irrelev": [157, 165], "increasingli": 157, "complex": [157, 173, 174, 175, 187, 670, 683, 685, 719, 721], "rule": [157, 159, 160, 163, 164, 165, 228, 234, 237, 240, 256, 315, 349, 352, 369, 372, 389, 392, 484, 487, 505, 508, 670, 671, 673, 674, 676, 706, 708, 716, 718], "count": [157, 173, 265, 303, 670, 731, 733, 756, 774, 777, 860, 861, 862, 909, 910, 913, 914, 917], "14254655": 157, "1578213": 157, "380515": 157, "17": [157, 164, 198, 200, 670, 680, 682, 843, 848], "trivial": 157, "By": [157, 160, 164, 167, 174, 175, 552, 570, 571, 670, 731, 733, 756, 782, 785, 876, 881, 884, 885, 888, 889, 892, 893, 896, 897, 900, 901, 904, 905, 908, 909, 910, 913, 914, 917], "dictat": [157, 163, 167, 168], "exlud": 157, "unit": [158, 159, 187, 198, 199, 200, 201, 265], "thoroughli": [158, 159], "ci": [158, 159, 187], "failur": 158, "On": [159, 171, 175], "fixtur": 159, "consum": [159, 164, 168, 265], "300": [159, 315, 509, 512], "hit": [159, 170], "permit": [159, 163, 168], "action": 159, "eleg": 159, "intellig": 159, "rang": [159, 173, 174, 175, 209, 210, 218, 219, 860, 861, 876, 893, 896, 901, 904, 918], "unexplor": 159, "known": 159, "repeatedli": [159, 164, 820, 829], "upload": 159, "artifact": 159, "parametr": 159, "strategi": 159, "statement": [159, 187], "plai": [159, 175], "verifi": [159, 165, 166, 172, 918, 924], "truth": [159, 315, 394, 397, 418, 421, 422, 425, 438, 441, 442, 445, 493, 496], "opt": [159, 161, 167, 172], "defer": [159, 160, 163, 164, 165, 166, 167], "suffic": [159, 162], "catch": [159, 552, 573], "systemat": 159, "safeguard": 159, "inabl": 159, "fact": [159, 173], "categor": [160, 166], "mutual": [160, 164], "constitut": [160, 170, 876, 897, 900, 905, 908], "venn": 160, "diagram": 160, "light": [160, 187], "wherea": [160, 163, 165, 166, 168, 175], "hand": [160, 187], "log_pr": [160, 164, 167], "array_arg": 160, "typic": 160, "whatsoev": [160, 164], "commonli": [160, 876, 897, 900, 905, 908], "outsid": [160, 166, 170, 172, 175, 756, 757, 760, 800, 803], "piec": [160, 162, 163, 170], "deal": [160, 187], "concurr": [160, 164], "modif": 160, "decor": [160, 162, 164, 165, 166, 167], "group": [160, 164], "briefli": [160, 173], "cast": [160, 165, 228, 234, 237, 240, 756, 762, 765, 876, 893, 896, 901, 904, 918], "get_all_arrays_on_dev": 160, "nested_map": [160, 820], "index_nest": [160, 820], "implicit_backend": 161, "unless": [161, 166, 167, 187, 315, 484, 487, 552, 605], "__dict__": [161, 170, 172], "ivy_original_dict": [161, 170], "unmodifi": [161, 165], "fallback": 161, "freedom": [161, 876, 897, 900, 905, 908], "recommend": [161, 315, 470, 473, 474, 477, 505, 508, 876, 885, 888], "achiev": [162, 173, 175], "wrapper": [162, 163, 164, 165, 167, 168, 172], "topic": [162, 172], "tf": [163, 165, 166, 167, 168, 170, 175, 187, 918], "_data": [163, 172], "organiz": [163, 164], "bear": [163, 164, 165], "mind": [163, 164], "necessarili": [163, 164], "although": [163, 164], "underpin": [163, 164, 170], "programmat": [163, 164], "backup": [163, 164], "accident": [163, 164], "readabl": [163, 164, 168, 172, 173], "absent": [163, 164], "perk": [163, 164], "auto": [163, 164, 173], "throw": [163, 172], "imposs": 163, "coupl": [163, 164, 172, 174], "anywai": 163, "secondli": [163, 165], "easier": 163, "five": [164, 173], "decis": [164, 170, 172], "displai": [164, 173], "arbitrarili": [164, 173], "__repr__": 164, "control": [164, 165, 167, 172, 173, 186], "__getattr__": 164, "underli": [164, 315, 353, 356, 365, 368, 373, 376, 478, 481], "__contains__": 164, "__getstate__": 164, "__setstate__": 164, "unpickl": 164, "expand": [164, 552, 579, 756, 770, 773], "children": 164, "shallowest": 164, "deepest": 164, "67": [164, 315, 373, 376, 385, 388], "22": [164, 315, 373, 376, 670, 680, 682, 706, 708, 855, 859, 876, 877, 880], "25": [164, 315, 525, 528, 529, 532, 670, 680, 682, 689, 691, 740, 746, 749, 838, 839, 842, 876, 877, 880], "retain_grad": [164, 626, 633], "dy": [164, 626, 633], "dx": [164, 626, 633], "technic": [164, 167, 168, 187], "autograd": [164, 187], "redund": 164, "mask": [164, 657, 668, 669], "to_q_fn": [164, 657, 668], "to_kv_fn": [164, 657, 668], "to_out_fn": [164, 167, 657, 668], "to_q_v": [164, 657, 668], "to_kv_v": [164, 657, 668], "to_out_v": [164, 657, 668], "implicitli": 164, "intuit": [164, 173, 174], "debug": [164, 173], "chronolog": 164, "had": [164, 167], "sequenti": [164, 174], "flow": [164, 186], "implic": 164, "slightli": [164, 170, 174], "eager": [164, 187], "int8": [165, 228, 249], "int16": [165, 228, 237, 240, 249, 876, 893, 896, 901, 904], "uint8": [165, 228, 237, 240, 249], "uint16": [165, 228, 250, 876, 893, 896, 901, 904], "uint32": [165, 228, 250, 876, 893, 896, 901, 904], "uint64": [165, 228, 250, 876, 893, 896, 901, 904], "bfloat16": [165, 228, 249], "float16": [165, 228, 250], "all_dtyp": 165, "all_numeric_dtyp": 165, "all_int_dtyp": 165, "all_float_dtyp": 165, "invalid": [165, 670, 731, 733, 909, 910, 913, 914, 917], "thirdli": 165, "native_float32": 165, "importantli": [165, 172, 175, 186], "varieti": [165, 166], "conveni": [165, 166, 168, 171, 173, 174], "arguabl": [165, 166], "compound": 165, "overflow": [165, 315, 328, 331, 876, 901, 904], "arr": [165, 166, 838, 839, 842], "scalar": [165, 170, 175, 187, 209, 217, 552, 605, 622, 625, 670, 734, 736], "settabl": [165, 166], "jnp": [165, 166, 167, 168, 175, 918], "jaxarrai": [165, 166, 167, 168], "mx": [165, 166, 167, 918], "nd": [165, 166, 167, 170, 175, 918], "deleg": 165, "fill_valu": [165, 209, 216, 217, 315, 422, 425], "as_n": [165, 228, 243, 244, 245, 246, 265, 284, 285, 306], "idx": [166, 172, 552, 558], "tpu": [166, 265, 287, 312], "aliv": [166, 265, 299, 303, 305, 552, 586, 604, 606], "amount": [166, 265, 311, 740, 741, 744, 746, 749, 751, 754], "dual": 166, "thrown": [166, 187, 552, 596], "rare": [166, 187], "program": 167, "strictli": 167, "ration": 167, "speak": 167, "subtli": 167, "ensure_in_backend": [167, 552, 596], "x_nativ": 167, "val_n": 167, "is_ivy_arrai": [167, 172, 552], "is_vari": [167, 626], "assign": [167, 172], "elif": 167, "irrespect": [167, 172, 228, 234], "inclus": [167, 209, 210, 843, 845, 846], "omit": [167, 168, 860, 861, 862, 864], "unspecifi": [167, 315, 501, 504, 505, 508, 670, 683, 685, 756, 800, 803], "predominantli": [167, 186], "math": [167, 175, 918], "presenc": 167, "altern": [167, 173], "_wrap_fn": 167, "maxim": [167, 170], "inner": [167, 172, 670, 683, 685, 692, 695, 816, 817, 818, 819], "third": [167, 187, 670, 719, 721, 860, 861], "addition": [167, 168], "leverag": 167, "equival": [167, 173, 175, 209, 210, 315, 369, 372, 470, 473, 474, 477, 505, 508, 670, 700, 702, 709, 711, 716, 718, 734, 736], "input_arrai": 167, "adress": 168, "revisit": [168, 175], "__div__": 168, "dicat": 168, "futher": 168, "absenc": 168, "pep": 168, "484": 168, "annot": 168, "brittl": 168, "intend": [168, 876, 901, 904], "freeli": 168, "inde": [168, 187], "flexibl": 168, "original_typ": 168, "cumbersom": 168, "sound": 169, "higher": [169, 170, 175, 187, 626, 629, 631, 634, 636, 639, 641, 643, 645, 647, 649], "overview": [169, 186], "handler": [169, 171, 175, 918], "fledg": [170, 171], "syntact": [170, 175], "clip_by_valu": [170, 175], "clamp": [170, 175], "behavior": [170, 187, 315, 501, 504, 505, 508, 860, 861, 862, 864], "fit": [170, 756, 782, 785], "num": [170, 209, 218, 219], "power_seq": 170, "okai": 170, "bound": 170, "resid": [170, 174], "edg": [170, 175, 756, 757, 760, 766, 769, 812, 815, 918], "larger": [170, 175, 228, 248, 756, 757, 760, 790, 793, 876, 897, 900, 905, 908], "ml_framework": [170, 175, 209, 210], "current_framework": [170, 175], "furthermor": 170, "concaten": [170, 173, 265, 294, 552, 579, 756, 762, 765, 918], "framework_handl": 170, "face": 170, "verbos": [170, 918, 927], "cprint": [170, 926], "framework_stack": 170, "_determine_framework_from_arg": 170, "valueerror": [170, 756, 796, 799], "get_framework": 170, "neither": [170, 315, 328, 331, 484, 487], "illustr": [170, 186], "un": [170, 228, 252], "nn": [170, 175, 209, 220, 918], "init_h": [170, 657, 667], "init_c": [170, 657, 667], "kernel": [170, 187, 657, 667], "recurrent_kernel": [170, 657, 667], "recurrent_bia": [170, 657, 667], "x_shape": 170, "x_flat": 170, "wi": 170, "wi_x": 170, "wii_x": 170, "wif_x": 170, "wig_x": 170, "wio_x": 170, "recurr": [170, 657, 667], "wh": 170, "ht": 170, "ct": 170, "hts_list": 170, "unrol": [170, 173, 657, 667], "wii_xt": 170, "wif_xt": 170, "wig_xt": 170, "wio_xt": 170, "zip": 170, "htm1": 170, "ctm1": 170, "wh_htm1": 170, "whi_htm1": 170, "whf_htm1": 170, "whg_htm1": 170, "who_htm1": 170, "ft": 170, "gt": 170, "ot": 170, "offici": 170, "reliabl": 170, "sacrific": 170, "hear": 170, "virtu": 170, "pure_ivi": 170, "reduce_mean": [170, 173, 174, 175, 918], "reduce_sum": [170, 918], "reduce_var": 170, "compile_graph": [170, 175], "pure_torch": 170, "cat": [170, 175], "backbon": [170, 173], "_layer": 170, "super": [170, 173, 174, 175], "clean": [170, 171, 173], "random_unifrom": 170, "unclean": 170, "wx": 170, "temp": 170, "torchscript": 170, "fn": [170, 172, 188, 189, 190, 191, 192, 193, 194, 195, 196, 228, 249, 250, 265, 274, 275, 552, 558, 623, 820, 821, 826, 827, 828, 830, 831, 832, 921, 923], "example_input": [170, 206, 207], "static_argnum": [170, 206, 207], "static_argnam": [170, 206, 207], "jit": [170, 187], "frontend": 171, "primit": [171, 187], "describ": [171, 175, 876, 877, 880, 893, 896, 897, 900, 901, 904], "hierarch": [171, 173, 174], "straight": [172, 918], "arraywithlinalg": 172, "arraywithlog": 172, "arraywithmath": 172, "arraywithmeta": 172, "arraywithreduct": 172, "is_native_arrai": [172, 552], "_shape": 172, "_size": 172, "functool": 172, "mul": 172, "_dtype": 172, "_devic": 172, "_dev_str": 172, "_pre_repr": 172, "_post_repr": 172, "ndim": [172, 670, 712, 714, 719, 721], "mt": 172, "answer": [172, 187], "consol": 172, "typeerror": 172, "immut": 172, "behav": 172, "claim": 172, "truli": 172, "_native_wrapp": 172, "attributeerror": 172, "genuin": 172, "some_method": 172, "similarli": [172, 209, 220], "rewritten": 172, "__pow__": 172, "strang": 172, "enforc": 172, "notic": 172, "appear": [172, 756, 770, 773], "invers": [172, 186, 315, 320, 323, 324, 327, 333, 336, 337, 340, 341, 344, 345, 348, 349, 352, 670, 689, 691, 709, 711], "_wrap_method": 172, "func_wrapp": [172, 188, 189, 190, 191, 192, 193, 194, 195, 196], "__name__": 172, "non_wrapped_method": 172, "_method_wrap": 172, "native_arg": 172, "native_kwarg": 172, "inner_fn": 172, "whist": 172, "unwrap": 172, "transit": 172, "needlessli": 172, "randn": 172, "_unwrap_method": 172, "method_wrap": 172, "compartment": 172, "public": [172, 552, 568], "newshap": [172, 756, 786, 789], "new_shap": 172, "tidi": 172, "shorter": 172, "crystal": 172, "41": [172, 315, 373, 376, 525, 528, 670, 671, 673, 876, 901, 904], "enough": [172, 173, 174], "ton": 173, "ado": [173, 174], "incred": [173, 187], "hash": 173, "soup": 173, "walk": [173, 174], "dct": 173, "cnt": 173, "combo": [173, 918, 924], "hold": [173, 552, 608, 609], "1000": [173, 315, 525, 528], "uda": 173, "3333": 173, "6667": 173, "178": 173, "new_weight": 173, "0600": 173, "3100": 173, "2400": 173, "6900": 173, "delimit": 173, "autocomplet": 173, "midwai": 173, "agent": 173, "total_spe": 173, "total_height": 173, "total_width": 173, "ag": 173, "tot": 173, "total_": 173, "total_h": 173, "batch_siz": [173, 657, 658, 659, 660, 661, 662, 663, 664, 843, 844], "dir": 173, "cnt0": 173, "cnt1": 173, "diff_0": 173, "diff_1": 173, "config0": 173, "config1": 173, "Not": [173, 174, 187, 208], "decod": 173, "l0": 173, "l1": [173, 670, 734, 736], "clearer": 173, "truncat": 173, "decoder__l0": 173, "decoder__l1": 173, "encoder__l0": 173, "encoder__l1": 173, "height": 173, "l0__b": 173, "l0__w": 173, "l1__b": 173, "l1__w": 173, "printabl": 173, "obviou": 173, "foresight": 173, "untidili": 173, "update_ag": 173, "normalize_img": 173, "img": 173, "img_max": 173, "reduce_max": [173, 918], "img_min": 173, "reduce_min": [173, 918], "img_rang": 173, "agent_posit": 173, "agent_veloc": 173, "agent_cam_front_rgb": 173, "agent_cam_front_depth": 173, "agent_cam_rear_rgb": 173, "agent_cam_rear_depth": 173, "agent_cam_lidar": 173, "cleaner": 173, "camera": 173, "front_rgb": 173, "front_depth": 173, "rear_rgb": 173, "rear_depth": 173, "lidar": 173, "rgb": 173, "rear": 173, "veloc": 173, "cam": 173, "cam_max": 173, "cam_min": 173, "cam_rang": 173, "Of": 173, "ideal": 173, "perman": 173, "afterward": 173, "thread": 173, "incorpor": 173, "pretti": 173, "straightforward": 173, "dataload": [173, 185, 918], "_cnt": 173, "img_": 173, "_dataset_s": 173, "_batch_siz": 173, "_count": [173, 174], "__next__": 173, "filenam": 173, "img_fnam": 173, "fname": 173, "loaded_img": 173, "cv2": 173, "imread": 173, "loader": [173, 187], "32": [173, 198, 200, 315, 373, 376, 657, 660, 663, 670, 706, 708, 855, 859, 876, 877, 880], "batch_slic": 173, "model": [173, 174, 918], "mymodel": [173, 918], "linear0": [173, 174, 918], "linear1": [173, 174, 918], "x_in": [173, 174, 175, 918], "001": [173, 174, 838, 839, 842], "loss_fn": [173, 174, 175, 918], "0145": 173, "grad_fn": 173, "addbackward0": 173, "_create_vari": 174, "_input_channel": 174, "_output_channel": 174, "_w_shape": 174, "_b_shape": 174, "_with_bia": 174, "8979": 174, "3198": 174, "0196": 174, "3126": 174, "3717": 174, "9687": 174, "6958": 174, "5122": 174, "3902": 174, "8800": 174, "5613": 174, "1982": 174, "nightmar": 174, "overcom": 174, "fc": 174, "9563": 174, "impact": 174, "v0": 174, "v1": 174, "6440": 174, "key0": 174, "1823": 174, "8075": 174, "linear3": 174, "v2": 174, "2346": 174, "counter": 174, "fed": [174, 265, 309], "1300": 174, "decoupl": 174, "scheme": 174, "_w_init": 174, "_b_init": 174, "fan_sum": 174, "slight": 174, "misnom": 174, "saw": 174, "vanilla": [174, 816, 818], "_beta1": 174, "_beta2": 174, "_epsilon": 174, "_mw": 174, "_vw": 174, "_first_pass": 174, "_should_compil": 174, "new_v": 174, "_lr": 174, "isinst": [174, 175, 552, 620], "_inplac": 174, "_stop_gradi": 174, "mw": [174, 626, 628, 629, 631], "vw": [174, 626, 628, 629, 631], "pre": [175, 187, 265], "captur": 175, "sparse_funct": 175, "num_class": [175, 843, 844], "num_dim": 175, "new_axi": 175, "_linear": 175, "to_backend": 175, "jax_graph": 175, "thinli": 175, "whilst": 175, "to_haiku_modul": 175, "hk": 175, "loss_fn_t": 175, "transform": [175, 186, 657, 665, 666], "without_apply_rng": 175, "rng": 175, "prngkei": 175, "init": 175, "update_rul": 175, "01": [175, 315, 509, 512], "tree_multimap": 175, "mechan": [185, 187, 918], "vision": [185, 918], "robot": [185, 918], "focus": 186, "field": [186, 670, 683, 685, 712, 714, 719, 721, 860, 861, 862], "perfect": 186, "differenti": 186, "demo": [186, 918], "orient": 186, "pose": 186, "euler": [186, 208], "quaternion": 186, "rotat": 186, "matric": [186, 209, 220, 224, 225, 657, 666, 670, 671, 673, 677, 679, 680, 682, 683, 685, 686, 688, 689, 691, 699, 700, 702, 703, 705, 709, 711, 712, 714, 716, 718, 719, 721, 722, 724, 728, 730], "angl": [186, 315, 345, 348, 385, 388, 521, 524, 543, 547], "ivy_mech": 186, "target_facing_rotation_matrix": 186, "polar_to_cartesian_coord": 186, "ordin": [186, 670, 716, 718], "warp": 186, "optic": 186, "voxel": 186, "ivy_vis": 186, "coords_to_voxel_grid": 186, "render_pixel_coord": 186, "radianc": 186, "nerf": 186, "trajectori": 186, "motion": 186, "plan": [186, 918], "mobil": 186, "ivy_robot": 186, "sample_spline_path": 186, "rigidmobil": 186, "sample_bodi": 186, "drone": 186, "sample_link": 186, "openai": 186, "swimmer": 186, "cumul": [186, 552, 570, 571], "reward": 186, "supervis": 186, "reinforc": 186, "door": [186, 187], "intersect": 186, "cartpol": 186, "mountain_car": 186, "pendulum": 186, "reacher": 186, "polici": 186, "condit": [186, 206, 207, 820, 830, 831, 855, 859], "learnt": 186, "ture": 186, "ntm": 186, "egospher": 186, "spatial": 186, "esm": 186, "ivy_memori": 186, "egocentr": 186, "room": 186, "inspir": 186, "doubt": 187, "grate": 187, "put": 187, "probe": 187, "undergo": 187, "remark": 187, "surpris": 187, "backward": [187, 315, 505, 508, 670, 731, 733, 909, 910, 913, 914, 917], "lock": 187, "contunu": 187, "minor": 187, "xla": 187, "buffer": 187, "kind": [187, 228, 248, 251, 315, 501, 504, 876, 893, 896, 901, 904], "gold": 187, "dex": 187, "phase": 187, "lax": 187, "scan": 187, "tricki": 187, "predictor": 187, "tight": 187, "driver": 187, "schedul": 187, "dispatch": 187, "Will": 187, "ast": 187, "dynamic": 187, "cond": 187, "jacobian": 187, "checkpoint": 187, "autodiff": 187, "shine": 187, "merci": 187, "superset": 187, "cluster": 187, "compet": 187, "paradigm": 187, "parallelis": [187, 265, 274, 275], "spmd": 187, "mixtur": 187, "expert": 187, "sophist": 187, "depart": 187, "routin": 187, "hundr": 187, "thousand": 187, "deepli": [187, 820, 822], "broadli": 187, "heavili": 187, "supplementari": 187, "Is": 187, "reusabl": 187, "fanci": 187, "fusion": 187, "lose": 187, "vmap": 187, "pmap": 187, "overhead": 187, "ineffici": 187, "eventu": 187, "supplement": 187, "backdoor": 187, "callback": 187, "record": 187, "metric": 187, "somewhat": 187, "outsourc": 187, "inputs_to_ivy_arrai": 188, "gaussian": [198, 199], "leaki": [198, 199, 200], "alpha": [198, 200], "rectifi": [198, 200, 201], "slope": [198, 200], "39": [198, 200, 315, 402, 405, 670, 706, 708, 876, 877, 880], "85": [198, 200, 315, 373, 376], "48": [198, 200, 315, 525, 528, 670, 706, 708, 876, 877, 880], "88": [198, 200, 315, 373, 376, 670, 706, 708, 876, 877, 880], "269": [198, 202], "731": [198, 202], "881": [198, 202], "214": [198, 202], "978": [198, 202], "891": [198, 202], "422": [198, 203], "155": [198, 203], "0768": [198, 203], "231": [198, 203], "693": [198, 203, 740, 751, 754], "49": [198, 203, 315, 525, 528, 876, 877, 880], "147": [198, 203], "363": [198, 203], "3461": [198, 204], "6491": [198, 204], "535": [198, 204], "hyperbol": [198, 205, 315, 324, 327, 337, 340, 349, 352, 385, 388, 521, 524, 543, 547], "55": [198, 205, 657, 663, 670, 706, 708, 876, 877, 880], "501": [198, 205], "faster": [206, 207], "invoc": [206, 207], "718281828459045": 208, "newaxi": 208, "alia": 208, "pi": 208, "141592653589793": 208, "mathemat": [208, 315, 328, 331, 345, 348, 406, 409, 484, 487, 670, 734, 736], "half": [209, 210, 843, 845, 846, 849, 851], "chosen": [209, 210, 315, 345, 348, 855, 859], "distanc": [209, 210], "adjac": [209, 210], "interpret": [209, 211, 221], "uniniti": [209, 212, 213], "n_row": [209, 214], "n_col": [209, 214], "elsewher": [209, 214, 855, 859], "row": [209, 214, 670, 716, 718, 719, 721, 843, 844, 855, 858], "column": [209, 214, 670, 683, 685, 712, 714, 716, 718, 719, 721], "__dlpack__": [209, 215, 265, 310], "interchang": [209, 215, 756, 804, 807], "endpoint": [209, 218], "xy": [209, 220], "coordin": [209, 220, 315, 345, 348], "cartesian": [209, 220], "ij": [209, 220, 876, 877, 880], "rank": [209, 220, 552, 624, 670, 674, 676, 700, 702, 712, 714, 716, 718, 728, 730, 731, 733, 734, 736, 756, 766, 769, 770, 773, 800, 803, 812, 815, 855, 858, 909, 910, 913, 914, 917], "ni": [209, 220], "xi": [209, 220], "n1": [209, 220], "n2": [209, 220], "n3": [209, 220], "accordingli": [209, 220, 315, 406, 409, 670, 734, 736, 855, 857, 860, 861, 862, 864, 876, 881, 884, 885, 888, 889, 892, 893, 896, 897, 900, 901, 904, 905, 908, 909, 910, 913, 914, 917], "xv": [209, 220], "yv": [209, 220], "triangular": [209, 224, 225, 670, 671, 673, 712, 714], "innermost": [209, 224, 225, 670, 671, 673, 677, 679, 680, 682, 683, 685, 686, 688, 689, 691, 700, 702, 703, 705, 709, 711, 712, 714, 716, 718, 719, 721, 722, 724, 728, 730], "mxn": [209, 224, 225, 670, 680, 682, 700, 702, 703, 705, 709, 711, 712, 714, 722, 724, 728, 730], "defaultdtyp": [228, 229], "defaultfloatdtyp": [228, 230], "float_dtyp": [228, 244, 258], "defaultintdtyp": [228, 231], "dtype_in": [228, 232, 233, 247, 252, 253, 254, 264], "incompat": [228, 236], "occur": [228, 237, 240, 855, 856, 857, 860, 861, 862, 864], "data_type_funct": [228, 237, 240], "closest": [228, 242, 315, 377, 380, 410, 413, 414, 417, 509, 512, 548, 551], "floatdtyp": [228, 244], "int_dtyp": [228, 245, 259], "intdtyp": [228, 245], "followng": [228, 248], "occupi": [228, 248, 251, 552, 608, 609], "ep": [228, 248, 670, 700, 702, 709, 711], "smallest_norm": [228, 248], "precis": [228, 248, 315, 484, 487, 525, 528], "encapsul": [228, 251], "type1": [228, 255], "type2": [228, 255], "arrays_and_dtyp": [228, 256], "ret1": [228, 260], "ret2": [228, 260], "noinspect": [229, 230, 231, 266, 627], "pyshadowingnam": [229, 230, 231, 266, 627], "array_method": [237, 238, 316, 317, 320, 321, 324, 325, 328, 329, 333, 334, 337, 338, 341, 342, 345, 346, 349, 350, 353, 354, 357, 358, 361, 362, 365, 366, 369, 370, 373, 374, 377, 378, 381, 382, 385, 386, 389, 390, 394, 395, 398, 399, 402, 403, 406, 407, 410, 411, 414, 415, 418, 419, 422, 423, 426, 427, 430, 431, 434, 435, 438, 439, 442, 443, 446, 447, 450, 451, 454, 455, 458, 459, 462, 463, 466, 467, 470, 471, 474, 475, 478, 479, 484, 485, 489, 490, 493, 494, 497, 498, 501, 502, 505, 506, 509, 510, 513, 514, 517, 518, 521, 522, 525, 526, 529, 530, 533, 535, 538, 540, 543, 545, 548, 549, 553, 554, 581, 582, 671, 672, 674, 675, 677, 678, 680, 681, 683, 684, 686, 687, 689, 690, 692, 693, 696, 697, 700, 701, 703, 704, 706, 707, 709, 710, 712, 713, 716, 717, 719, 720, 722, 723, 725, 726, 728, 729, 731, 732, 734, 735, 737, 738, 741, 742, 746, 747, 751, 752, 757, 758, 762, 763, 766, 767, 770, 771, 774, 775, 778, 779, 782, 783, 786, 787, 790, 791, 796, 797, 800, 801, 804, 805, 808, 809, 812, 813, 839, 840, 866, 867, 871, 872, 877, 878, 881, 882, 885, 886, 889, 890, 893, 894, 897, 898, 901, 902, 905, 906, 910, 911, 914, 915], "container_method": [237, 239, 241, 316, 318, 320, 322, 324, 326, 328, 330, 332, 333, 335, 337, 339, 341, 343, 345, 347, 349, 351, 353, 355, 357, 359, 361, 363, 365, 367, 369, 371, 373, 375, 377, 379, 381, 383, 385, 387, 389, 391, 393, 394, 396, 398, 400, 402, 404, 406, 408, 410, 412, 414, 416, 418, 420, 422, 424, 426, 428, 430, 432, 434, 436, 438, 440, 442, 444, 446, 448, 450, 452, 454, 456, 458, 460, 462, 464, 466, 468, 470, 472, 474, 476, 478, 480, 484, 486, 488, 489, 491, 493, 495, 497, 499, 501, 503, 505, 507, 509, 511, 513, 515, 517, 519, 521, 523, 525, 527, 529, 531, 533, 534, 536, 538, 539, 541, 543, 544, 546, 548, 550, 553, 555, 557, 565, 566, 581, 583, 585, 629, 630, 632, 634, 635, 637, 639, 640, 642, 643, 644, 646, 647, 648, 650, 692, 694, 741, 743, 745, 746, 748, 750, 751, 753, 755, 757, 759, 761, 762, 764, 766, 768, 770, 772, 774, 776, 778, 780, 782, 784, 786, 788, 790, 792, 794, 796, 798, 800, 802, 804, 806, 808, 810, 812, 814, 839, 841, 845, 847, 849, 850, 852, 866, 868, 870, 871, 873, 875, 877, 879, 881, 883, 885, 887, 889, 891, 893, 895, 897, 899, 901, 903, 905, 907, 910, 912, 914, 916], "defaultdevic": [265, 266], "__enter__": 265, "_dev": 265, "initialis": 265, "devcloneditem": [265, 287], "multidevitem": [265, 267, 270], "devclonedit": 265, "multidevit": [265, 268, 271, 274, 275, 279], "devclonednest": 265, "multidevnest": [265, 269, 272], "devdistitem": 265, "devdistit": 265, "devdistnest": 265, "devmanag": [265, 273], "dev_mapp": 265, "da_dim_s": 265, "safety_factor": 265, "min_dev_dim_s": 265, "max_dev_dim_step_ratio": 265, "min_unit_dev_tune_step": 265, "min_sf_tune_step": 265, "starting_split_factor": 265, "max_split_factor_step_s": 265, "tune_dev_alloc": 265, "tune_dev_split": 265, "mapper": [265, 274, 275], "receivess": 265, "safe": [265, 274], "oom": 265, "tune": 265, "da_tune_step": 265, "ds_tune_step": 265, "to_clon": 265, "to_distribut": 265, "multidevic": [265, 274], "parallel": [265, 274, 275], "mutlidevic": [265, 274], "repeated_config_check": 265, "tune_step": 265, "devmapp": [265, 275], "ret_fn": [265, 274, 275], "queue_class": [265, 274, 275], "worker_class": [265, 274, 275], "worker": [265, 274, 275], "used_dev": [265, 274], "sf": [265, 274], "devmappermultiproc": 265, "multidev": [265, 276, 277, 278, 297], "profil": 265, "save_dir": [265, 280], "deviceic": [265, 286], "spread": [265, 297], "139740789224448": [265, 299], "physic": [265, 301], "x3": [265, 303], "x4": [265, 303], "process_specif": [265, 304, 314], "percentag": [265, 304], "ram": [265, 304, 311, 314], "alon": [265, 304, 314], "attr_onli": [265, 305], "chunk": [265, 307, 308, 309], "max_chunk_s": [265, 309], "chunk_siz": [265, 309], "input_ax": [265, 309], "output_ax": [265, 309], "feed": [265, 309], "fist": [265, 309], "stream": [265, 310], "caveat": [265, 310], "portabl": [265, 310, 918], "gb": [265, 311, 314], "reset": [265, 313], "magnitud": [315, 316, 319, 328, 331, 484, 487, 670, 719, 721, 722, 724], "princip": [315, 320, 323, 333, 336, 341, 344], "cosin": [315, 320, 323, 324, 327, 381, 384, 385, 388], "x1_i": [315, 328, 331, 345, 348, 353, 356, 361, 364, 365, 368, 369, 372, 373, 376, 389, 392, 394, 397, 414, 417, 418, 421, 422, 425, 438, 441, 442, 445, 462, 465, 466, 469, 474, 477, 478, 481, 484, 487, 493, 496, 501, 504, 505, 508, 533, 537], "x2_i": [315, 328, 331, 345, 348, 353, 356, 361, 364, 365, 368, 369, 372, 373, 376, 389, 392, 394, 397, 414, 417, 418, 421, 422, 425, 438, 441, 442, 445, 462, 465, 466, 469, 474, 477, 478, 481, 484, 487, 493, 496, 501, 504, 505, 508, 533, 537], "finit": [315, 328, 331, 345, 348, 426, 429, 484, 487, 501, 504, 505, 508], "nor": [315, 328, 331, 484, 487], "nearest": [315, 328, 331, 484, 487, 509, 512], "2019": [315, 328, 331, 406, 409, 484, 487], "commut": [315, 328, 331], "sine": [315, 333, 336, 337, 340, 517, 520, 521, 524], "57": [315, 333, 336, 373, 376, 385, 388], "524": [315, 333, 336], "644": [315, 333, 336], "201": [315, 333, 336, 509, 512], "305": [315, 333, 336], "412": [315, 333, 336], "quotient": [315, 345, 348], "notat": [315, 345, 348, 876, 877, 880], "denot": [315, 345, 348], "quadrant": [315, 345, 348], "3\u03c0": [315, 345, 348], "549": [315, 349, 352], "bitwis": [315, 353, 356, 365, 368, 373, 376, 478, 481], "AND": [315, 353, 356, 466, 469, 909, 910, 913], "binari": [315, 353, 356, 365, 368, 373, 376, 478, 481, 740, 741, 744], "invert": [315, 357, 360], "arithmet": [315, 369, 372, 876, 885, 888], "propag": [315, 369, 372, 876, 881, 884, 885, 888, 889, 892, 897, 900, 901, 904, 905, 908], "thu": [315, 369, 372, 501, 504, 505, 508, 670, 683, 685], "lh": [315, 369, 372], "rh": [315, 369, 372], "xor": [315, 373, 376, 478, 481], "78": [315, 373, 376, 670, 706, 708, 876, 877, 880], "91": [315, 373, 376, 670, 706, 708, 876, 877, 880], "23": [315, 373, 376, 657, 663, 670, 680, 682, 855, 859], "66": [315, 373, 376, 670, 706, 708, 876, 877, 880], "77": [315, 373, 376, 670, 706, 708, 876, 877, 880], "79": [315, 373, 376], "89": [315, 373, 376, 670, 725, 727, 876, 901, 904], "98": [315, 373, 376, 670, 706, 708, 855, 859, 876, 877, 880], "26": [315, 373, 376, 657, 664, 670, 680, 682, 706, 708, 725, 727, 876, 877, 880], "21": [315, 373, 376, 552, 570, 670, 680, 682, 706, 708, 740, 751, 754, 876, 877, 880], "34": [315, 373, 376, 525, 528], "24": [315, 373, 376, 525, 528, 552, 570, 670, 680, 682, 706, 708, 876, 877, 880], "51": [315, 373, 376], "27": [315, 373, 376, 385, 388, 525, 528, 657, 669, 670, 706, 708, 876, 877, 880], "74": [315, 373, 376], "59": [315, 373, 376], "416": [315, 381, 384], "122": [315, 385, 388], "368": [315, 385, 388], "670": [315, 385, 388], "202": [315, 385, 388, 509, 512], "548": [315, 385, 388], "1490": [315, 385, 388], "dividend": [315, 389, 392, 505, 508], "gauss": [315, 398, 401], "exponenti": [315, 398, 401, 402, 405, 462, 465, 501, 504], "logarithm": [315, 402, 405, 446, 449, 450, 453, 454, 457, 458, 461, 462, 465, 670, 715], "72": [315, 402, 405, 670, 706, 708, 876, 877, 880], "fdlibm": [315, 406, 409], "compliant": [315, 406, 409, 470, 473, 474, 477, 876, 881, 884, 885, 888, 889, 892], "greatest": [315, 410, 413, 414, 417], "out_i": [315, 426, 429, 430, 433, 434, 437], "threshold": [315, 482, 483], "exce": [315, 483], "y_i": [315, 489, 492], "expon": [315, 501, 504, 552, 617], "versu": [315, 501, 504], "odd": [315, 501, 504], "modulu": [315, 505, 508], "primarili": [315, 505, 508], "5654": [315, 509, 512], "034": [315, 509, 512], "433": [315, 509, 512], "343": [315, 509, 512], "44": [315, 509, 512, 525, 528, 529, 532, 670, 706, 708, 855, 859, 876, 877, 880], "81": [315, 509, 512, 529, 532, 876, 877, 880], "527": [315, 509, 512], "301": [315, 509, 512], "indistinguish": [315, 525, 528], "infinit": [315, 525, 528], "83": [315, 525, 528], "32455532": [315, 525, 528], "89897949": [315, 525, 528], "50": [315, 525, 528, 670, 706, 708, 855, 858, 876, 877, 880], "31": [315, 525, 528], "169": [315, 525, 528], "63": [315, 525, 528, 670, 671, 673, 706, 708, 876, 877, 880], "47": [315, 525, 528], "73": [315, 525, 528, 670, 671, 673, 838, 839, 842], "93": [315, 525, 528], "35": [315, 525, 528, 657, 669, 670, 674, 676, 855, 859, 876, 877, 880], "09": [315, 529, 532, 657, 669], "61": [315, 529, 532, 740, 741, 744], "546": [315, 538, 542], "842": [315, 538, 542], "916": [315, 538, 542, 740, 741, 744], "996": [315, 538, 542], "328": [315, 538, 542], "real": [315, 543, 547], "462": [315, 543, 547], "604": [315, 543, 547], "984": [315, 543, 547], "976": [315, 543, 547], "997": [315, 543, 547, 838, 839, 842], "decim": [315, 548, 551], "inspect": [552, 558, 922, 923], "downscal": [552, 564, 565, 567], "60": [552, 570, 670, 706, 708, 876, 877, 880], "default_v": [552, 573], "catch_except": [552, 573], "rev": [552, 573], "with_cal": [552, 573], "arrang": [552, 574], "123": [552, 577], "mod": [552, 578], "max_freq": [552, 579], "num_band": [552, 579], "fourier": [552, 579], "band": [552, 579], "linearli": [552, 579, 670, 716, 718], "oppos": [552, 579], "geometr": [552, 579], "seen_set": [552, 590], "local_set": [552, 590], "decrement": [552, 594], "is_arrai": 552, "allow_dupl": [552, 602], "forkserv": [552, 603], "spawn": [552, 603], "hot": [552, 605], "scatter": [552, 605, 608, 609], "tmp_dr": [552, 613], "temporari": [552, 613], "min_denomin": [552, 616], "stabil": [552, 616, 617, 865, 866, 869, 871, 874], "_min_denomin": [552, 616], "min_bas": [552, 617], "100000023841858": [552, 620], "200000047683716": [552, 620], "299999952316284": [552, 620], "400000095367432": [552, 620], "599999904632568": [552, 620], "101": [552, 621], "unpack": [552, 624], "gradienttrack": [626, 627], "delta": [626, 628], "cost": [626, 628, 629, 631, 634, 636, 639, 641, 643, 645, 647, 649, 816, 817, 818, 819], "ws": [626, 628, 629, 631, 634, 636, 639, 641, 643, 645, 647, 649], "en": [626, 628, 629, 631], "wikipedia": [626, 628, 629, 631], "wiki": [626, 628, 629, 631], "stochastic_gradient_desc": [626, 628, 629, 631], "dc": [626, 628, 629, 631, 634, 636, 639, 641, 643, 645, 647, 649], "dw": [626, 628, 629, 631, 634, 636, 639, 641, 643, 645, 647, 649], "averag": [626, 628, 629, 631, 639, 641, 816, 817, 818], "ws_new": [626, 629, 631, 634, 636, 639, 641, 643, 645, 647, 649], "retain": [626, 633], "d_in": [657, 658, 659, 660, 661, 662, 663], "fw": [657, 658, 659, 660, 661, 662, 663, 664], "d_out": [657, 658, 659, 660, 661, 662, 663], "wio": [657, 658], "fh": [657, 660, 661, 662, 663, 664], "hwio": [657, 660], "unequ": [657, 660], "28": [657, 660, 663, 664, 670, 706, 708, 876, 877, 880], "unsqueez": [657, 660, 664], "volum": [657, 662], "fd": [657, 662, 663], "dhwio": [657, 662], "256": [657, 663], "258": [657, 663], "128": [657, 663, 670, 706, 708], "333": [657, 664], "inp": [657, 664], "bernoulli": [657, 665], "out_featur": [657, 665, 666], "incom": [657, 666], "outer_batch_shap": [657, 666], "inner_batch_shap": [657, 666], "in_featur": [657, 666], "num_queri": [657, 668, 669], "x_feat_dim": [657, 668], "num_kei": [657, 668, 669], "cont_feat_dim": [657, 668], "numhead": [657, 668], "feat_dim": [657, 668, 669], "out_feat_dim": [657, 668], "score": [657, 669], "04": [657, 669], "03": [657, 669, 838, 839, 842], "08": [657, 669], "decomposit": [670, 671, 673, 712, 714, 719, 721], "symmetr": [670, 671, 673, 683, 685, 686, 688, 737, 739], "u": [670, 671, 673, 719, 721], "577": [670, 671, 673], "707": [670, 671, 673], "vif": [670, 674, 676], "92": [670, 677, 679], "293": [670, 677, 679], "46997": [670, 677, 679], "eigendecomposit": [670, 683, 685], "qlq\u1d40": [670, 683, 685], "orthogon": [670, 683, 685], "eig": [670, 683, 685], "eigenvalu": [670, 683, 685, 686, 688], "eigenvector": [670, 683, 685], "75": [670, 689, 691, 706, 708], "prepend": [670, 692, 695], "singular": [670, 700, 702, 709, 711, 719, 721, 722, 724], "toler": [670, 700, 702, 709, 711], "largest_singular_valu": [670, 700, 702, 709, 711], "array_lik": [670, 706, 708], "33": [670, 706, 708, 838, 839, 842, 876, 877, 880], "36": [670, 706, 708, 876, 877, 880], "45": [670, 706, 708, 756, 795, 838, 839, 842, 876, 877, 880], "65": [670, 706, 708, 876, 877, 880], "84": [670, 706, 708, 876, 877, 880], "105": [670, 706, 708, 740, 741, 744], "112": [670, 706, 708, 876, 877, 880], "104": [670, 706, 708, 876, 877, 880], "120": [670, 706, 708], "moor": [670, 709, 711], "penros": [670, 709, 711], "pseudo": [670, 709, 711], "orthonorm": [670, 712, 714, 719, 721], "logdet": [670, 715], "coeffici": [670, 716, 718], "usvh": [670, 719, 721], "vh": [670, 719, 721], "hermitian": [670, 719, 721], "et": [670, 719, 721], "cetera": [670, 719, 721], "adjoint": [670, 719, 721], "reconstruct": [670, 719, 721, 860, 861, 863], "reconstructed_x": [670, 719, 721], "contract": [670, 725, 727, 876, 877, 880], "doubl": [670, 725, 727], "singleton": [670, 734, 736, 756, 796, 799, 855, 857, 876, 881, 884, 885, 888, 889, 892, 893, 896, 897, 900, 901, 904, 905, 908, 909, 910, 913, 914, 917], "liter": [670, 734, 736], "manhattan": [670, 734, 736], "l2": [670, 734, 736], "euclidean": [670, 734, 736], "mathbf": [670, 737, 739], "mathbb": [670, 737, 739], "skew": [670, 737, 739], "entropi": [740, 741, 744, 746, 749, 751, 754], "predict": [740, 741, 744, 746, 749, 751, 754], "smooth": [740, 741, 744, 746, 749, 751, 754], "223": [740, 741, 744], "357": [740, 741, 744, 751, 754], "511": [740, 741, 744], "discret": [740, 746, 749], "3862944": [740, 746, 749], "35667497": [740, 746, 749], "spars": [740, 751, 754], "logit": [740, 751, 754], "793291": [740, 751, 754], "512926": [740, 751, 754], "before_1": [756, 766, 769, 812, 815], "after_1": [756, 766, 769, 812, 815], "before_n": [756, 766, 769, 812, 815], "after_n": [756, 766, 769, 812, 815], "manipulation_funct": [756, 770, 773], "reorder": [756, 774, 777], "permut": [756, 778, 781, 804, 807], "repetit": [756, 782, 785, 808, 811], "restor": [756, 790, 793], "classivi": [756, 795], "famili": [756, 800, 803], "intxx": [756, 800, 803], "floatxx": [756, 800, 803], "fomaml_step": 816, "inner_cost_fn": [816, 817, 818], "outer_cost_fn": [816, 817, 818], "inner_grad_step": [816, 817, 818, 819], "inner_learning_r": [816, 817, 818, 819], "inner_optimization_step": [816, 817, 818, 819], "inner_batch_fn": [816, 817, 818], "outer_batch_fn": [816, 817, 818], "average_across_step": [816, 817, 818], "inner_v": [816, 817, 818], "keep_inner_v": [816, 817, 818], "outer_v": [816, 817, 818], "keep_outer_v": [816, 817, 818], "return_inner_v": [816, 817, 818, 819], "num_task": [816, 817, 818, 819], "maml": [816, 817, 818], "recev": [816, 817, 818], "0x7fc1a7b265e0": [816, 817, 818, 819], "maml_step": 816, "rece": [816, 818], "reptile_step": 816, "cost_fn": [816, 819], "reptil": [816, 819], "receivng": [816, 819], "all_nested_indic": 820, "include_nest": [820, 821], "_index": [820, 821, 831], "_base": [820, 821, 830, 831], "copy_nest": 820, "to_mut": [820, 822, 832], "mutabl": [820, 822, 832], "insert_into_nest_at_index": 820, "insert_into_nest_at_indic": 820, "map_nest_at_index": 820, "map_nest_at_indic": 820, "multi_index_nest": 820, "nested_ani": 820, "check_nest": [820, 830, 831], "conditon": [820, 830, 831], "nested_indices_wher": 820, "stop_after_n_found": [820, 831], "_depth": [820, 832], "_tuple_check_fn": [820, 832], "_list_check_fn": [820, 832], "_dict_check_fn": [820, 832], "nested_multi_map": 820, "nest0": [820, 833], "ivy_arrai": [820, 833], "funciton": [820, 833], "prune_nest_at_index": 820, "prune_nest_at_indic": 820, "set_nest_at_index": 820, "set_nest_at_indic": 820, "gamma": [838, 839, 842], "beta": [838, 839, 842], "0976": [838, 839, 842], "3452": [838, 839, 842], "2740": [838, 839, 842], "1047": [838, 839, 842], "5886": [838, 839, 842], "2732": [838, 839, 842], "7696": [838, 839, 842], "7024": [838, 839, 842], "2518": [838, 839, 842], "58": [838, 839, 842, 860, 861], "283": [838, 839, 842], "585": [838, 839, 842], "909": [838, 839, 842], "628": [838, 839, 842], "225": [838, 839, 842], "425": [838, 839, 842], "norm_idx": [838, 839, 842], "228": [838, 839, 842], "0285": [838, 839, 842], "199": [838, 839, 842], "204": [838, 839, 842], "population_s": [843, 844], "num_sampl": [843, 844], "draw": [843, 844, 848, 849, 851], "unnorm": [843, 844], "drawn": [843, 844, 845, 846, 848, 849, 851], "home": [843, 844, 848, 849, 851], "uniformli": [843, 845, 846, 849, 851], "highest": [843, 845, 846], "parameter": [843, 848, 849, 851], "6444774682897879": [843, 848], "811": [843, 848], "508": [843, 848], "564": [843, 848], "7268672": [843, 848], "968": [843, 848], "175": [843, 848, 860, 861], "064": [843, 848], "40935726": [843, 848], "556": [843, 848], "26431865": [843, 849, 851], "475": [843, 849, 851], "878": [843, 849, 851], "861": [843, 849, 851], "89150229": [843, 849, 851], "89629126": [843, 849, 851], "94198485": [843, 849, 851], "91405606": [843, 849, 851], "72848724": [843, 849, 851], "7550739": [843, 849, 851], "624": [843, 849, 851], "00109": [843, 849, 851], "occurr": [855, 856, 857, 860, 861], "yield": [855, 859], "43": [855, 859], "x_j": [860, 861, 862, 864], "impli": [860, 861, 862, 864], "inverse_indic": [860, 861, 863], "aggreg": [860, 861], "fourth": [860, 861], "607": [860, 861], "735": [860, 861], "667": [860, 861], "381": [860, 861], "857": [860, 861], "0396": [860, 861], "166": [860, 861], "828": [860, 861], "144": [860, 861], "40501155": [860, 861], "77361575": [860, 861], "97776199": [860, 861], "36831157": [860, 861], "89148434": [860, 861], "9512272": [860, 861], "67542176": [860, 861], "41985657": [860, 861], "23478023": [860, 861], "1141": [860, 861], "8101": [860, 861], "9298": [860, 861], "8460": [860, 861], "2119": [860, 861], "3519": [860, 861], "6252": [860, 861], "4033": [860, 861], "7443": [860, 861], "2577": [860, 861], "3707": [860, 861], "0545": [860, 861], "3238": [860, 861], "5944": [860, 861], "0775": [860, 861], "4327": [860, 861], "176": [860, 861], "889": [860, 861], "763": [860, 861], "071": [860, 861], "262": [860, 861], "456": [860, 861], "114": [860, 861], "349": [860, 861], "615": [860, 861], "594": [860, 861], "335": [860, 861], "212": [860, 861], "457": [860, 861], "827": [860, 861], "209": [860, 861], "ascend": [865, 866, 869], "einstein": [876, 877, 880], "summat": [876, 877, 880], "seq": [876, 877, 880], "jk": [876, 877, 880], "ik": [876, 877, 880], "126": [876, 877, 880], "510": [876, 877, 880], "99": [876, 877, 880], "108": [876, 877, 880], "117": [876, 877, 880], "sentinel": [876, 881, 884, 889, 892], "unsign": [876, 893, 896, 901, 904], "degre": [876, 897, 900, 905, 908], "bessel": [876, 897, 900, 905, 908], "8164966": [876, 897, 900], "varianc": [876, 905, 908], "unbias": [876, 905, 908], "simplicit": [909, 910, 913], "autom": 918, "grow": 918, "ai": 918, "got": 918, "colab": 918, "sharp": 918, "weekli": 918, "event": 918, "immedi": 918, "favorit": 918, "jax_concat": 918, "tf_concat": 918, "np_concat": 918, "mx_concat": 918, "torch_concat": 918, "prompt": 918, "get_devic": 918, "reduce_prod": 918, "gradient_imag": 918, "linalg": 918, "bilinear_resampl": 918, "stack_imag": 918, "neural_net": 918, "ecosystem": [918, 924], "popular": [918, 924], "acceler": 918, "articl": 918, "lenton2021ivi": 918, "inter": 918, "lenton": 918, "daniel": 918, "pardo": 918, "fabio": 918, "falck": 918, "fabian": 918, "jame": 918, "stephen": 918, "clark": 918, "ronald": 918, "journal": 918, "arxiv": 918, "preprint": 918, "2102": 918, "02886": 918, "2021": 918, "add_array_spec": 921, "fn_array_spec": 921}, "objects": {"ivy": [[18, 0, 0, "-", "Array"], [64, 0, 0, "-", "Container"], [0, 0, 0, "-", "backend_handler"], [188, 0, 0, "-", "func_wrapper"], [921, 0, 0, "-", "inspection"], [110, 0, 0, "-", "stateful"], [926, 0, 0, "-", "verbosity"]], "ivy.Array": [[18, 1, 1, "", "__delattr__"], [18, 1, 1, "", "__format__"], [18, 1, 1, "", "__getattribute__"], [18, 1, 1, "", "__init_subclass__"], [18, 1, 1, "", "__new__"], [18, 1, 1, "", "__reduce__"], [18, 1, 1, "", "__reduce_ex__"], [18, 1, 1, "", "__setattr__"], [18, 1, 1, "", "__sizeof__"], [18, 1, 1, "", "__str__"], [18, 1, 1, "", "__subclasshook__"]], "ivy.Container": [[64, 1, 1, "", "__delattr__"], [64, 1, 1, "", "__delitem__"], [64, 1, 1, "", "__format__"], [64, 1, 1, "", "__getattribute__"], [64, 1, 1, "", "__init_subclass__"], [64, 1, 1, "", "__iter__"], [64, 1, 1, "", "__len__"], [64, 1, 1, "", "__new__"], [64, 1, 1, "", "__reduce__"], [64, 1, 1, "", "__reduce_ex__"], [64, 1, 1, "", "__reversed__"], [64, 1, 1, "", "__sizeof__"], [64, 1, 1, "", "__str__"], [64, 1, 1, "", "__subclasshook__"], [64, 1, 1, "", "clear"], [64, 1, 1, "", "fromkeys"], [64, 1, 1, "", "get"], [64, 1, 1, "", "items"], [64, 1, 1, "", "keys"], [64, 1, 1, "", "pop"], [64, 1, 1, "", "popitem"], [64, 1, 1, "", "setdefault"], [64, 1, 1, "", "update"], [64, 1, 1, "", "values"]], "ivy.array": [[19, 0, 0, "-", "activations"], [21, 0, 0, "-", "conversions"], [26, 0, 0, "-", "creation"], [28, 0, 0, "-", "data_type"], [30, 0, 0, "-", "device"], [32, 0, 0, "-", "elementwise"], [34, 0, 0, "-", "general"], [36, 0, 0, "-", "gradients"], [38, 0, 0, "-", "image"], [40, 0, 0, "-", "layers"], [42, 0, 0, "-", "linear_algebra"], [44, 0, 0, "-", "losses"], [46, 0, 0, "-", "manipulation"], [48, 0, 0, "-", "norms"], [50, 0, 0, "-", "random"], [52, 0, 0, "-", "searching"], [54, 0, 0, "-", "set"], [56, 0, 0, "-", "sorting"], [58, 0, 0, "-", "statistical"], [60, 0, 0, "-", "utility"], [62, 0, 0, "-", "wrapping"]], "ivy.array.activations": [[20, 2, 1, "", "ArrayWithActivations"]], "ivy.array.array_methods": [[317, 1, 1, "", "abs"], [321, 1, 1, "", "acos"], [325, 1, 1, "", "acosh"], [329, 1, 1, "", "add"], [911, 1, 1, "", "all"], [554, 1, 1, "", "all_equal"], [915, 1, 1, "", "any"], [867, 1, 1, "", "argsort"], [334, 1, 1, "", "asin"], [338, 1, 1, "", "asinh"], [342, 1, 1, "", "atan"], [346, 1, 1, "", "atan2"], [350, 1, 1, "", "atanh"], [742, 1, 1, "", "binary_cross_entropy"], [354, 1, 1, "", "bitwise_and"], [358, 1, 1, "", "bitwise_invert"], [362, 1, 1, "", "bitwise_left_shift"], [366, 1, 1, "", "bitwise_or"], [370, 1, 1, "", "bitwise_right_shift"], [374, 1, 1, "", "bitwise_xor"], [238, 1, 1, "", "can_cast"], [378, 1, 1, "", "ceil"], [672, 1, 1, "", "cholesky"], [758, 1, 1, "", "clip"], [763, 1, 1, "", "concat"], [767, 1, 1, "", "constant_pad"], [382, 1, 1, "", "cos"], [386, 1, 1, "", "cosh"], [675, 1, 1, "", "cross"], [747, 1, 1, "", "cross_entropy"], [678, 1, 1, "", "det"], [681, 1, 1, "", "diagonal"], [390, 1, 1, "", "divide"], [684, 1, 1, "", "eigh"], [687, 1, 1, "", "eigvalsh"], [878, 1, 1, "", "einsum"], [395, 1, 1, "", "equal"], [399, 1, 1, "", "erf"], [403, 1, 1, "", "exp"], [771, 1, 1, "", "expand_dims"], [407, 1, 1, "", "expm1"], [775, 1, 1, "", "flip"], [411, 1, 1, "", "floor"], [415, 1, 1, "", "floor_divide"], [582, 1, 1, "", "gather_nd"], [419, 1, 1, "", "greater"], [423, 1, 1, "", "greater_equal"], [690, 1, 1, "", "inv"], [427, 1, 1, "", "isfinite"], [431, 1, 1, "", "isinf"], [435, 1, 1, "", "isnan"], [840, 1, 1, "", "layer_norm"], [439, 1, 1, "", "less"], [443, 1, 1, "", "less_equal"], [447, 1, 1, "", "log"], [451, 1, 1, "", "log10"], [455, 1, 1, "", "log1p"], [459, 1, 1, "", "log2"], [463, 1, 1, "", "logaddexp"], [467, 1, 1, "", "logical_and"], [471, 1, 1, "", "logical_not"], [475, 1, 1, "", "logical_or"], [479, 1, 1, "", "logical_xor"], [693, 1, 1, "", "matmul"], [697, 1, 1, "", "matrix_norm"], [701, 1, 1, "", "matrix_rank"], [704, 1, 1, "", "matrix_transpose"], [882, 1, 1, "", "max"], [886, 1, 1, "", "mean"], [890, 1, 1, "", "min"], [485, 1, 1, "", "multiply"], [490, 1, 1, "", "negative"], [494, 1, 1, "", "not_equal"], [707, 1, 1, "", "outer"], [779, 1, 1, "", "permute_dims"], [710, 1, 1, "", "pinv"], [498, 1, 1, "", "positive"], [502, 1, 1, "", "pow"], [894, 1, 1, "", "prod"], [713, 1, 1, "", "qr"], [506, 1, 1, "", "remainder"], [783, 1, 1, "", "repeat"], [787, 1, 1, "", "reshape"], [791, 1, 1, "", "roll"], [510, 1, 1, "", "round"], [514, 1, 1, "", "sign"], [518, 1, 1, "", "sin"], [522, 1, 1, "", "sinh"], [717, 1, 1, "", "solve"], [872, 1, 1, "", "sort"], [752, 1, 1, "", "sparse_cross_entropy"], [526, 1, 1, "", "sqrt"], [530, 1, 1, "", "square"], [797, 1, 1, "", "squeeze"], [801, 1, 1, "", "stack"], [898, 1, 1, "", "std"], [535, 1, 1, "", "subtract"], [902, 1, 1, "", "sum"], [720, 1, 1, "", "svd"], [723, 1, 1, "", "svdvals"], [805, 1, 1, "", "swapaxes"], [540, 1, 1, "", "tan"], [545, 1, 1, "", "tanh"], [726, 1, 1, "", "tensordot"], [809, 1, 1, "", "tile"], [729, 1, 1, "", "trace"], [549, 1, 1, "", "trunc"], [906, 1, 1, "", "var"], [732, 1, 1, "", "vecdot"], [735, 1, 1, "", "vector_norm"], [738, 1, 1, "", "vector_to_skew_symmetric_matrix"], [813, 1, 1, "", "zero_pad"]], "ivy.array.conversions": [[22, 1, 1, "", "args_to_ivy"], [23, 1, 1, "", "args_to_native"], [24, 1, 1, "", "to_ivy"], [25, 1, 1, "", "to_native"]], "ivy.array.creation": [[27, 2, 1, "", "ArrayWithCreation"]], "ivy.array.data_type": [[29, 2, 1, "", "ArrayWithDataTypes"]], "ivy.array.data_type.ArrayWithDataTypes": [[29, 3, 1, "", "can_cast"]], "ivy.array.device": [[31, 2, 1, "", "ArrayWithDevice"]], "ivy.array.elementwise": [[33, 2, 1, "", "ArrayWithElementwise"]], "ivy.array.elementwise.ArrayWithElementwise": [[33, 3, 1, "", "abs"], [33, 3, 1, "", "acos"], [33, 3, 1, "", "acosh"], [33, 3, 1, "", "add"], [33, 3, 1, "", "asin"], [33, 3, 1, "", "asinh"], [33, 3, 1, "", "atan"], [33, 3, 1, "", "atan2"], [33, 3, 1, "", "atanh"], [33, 3, 1, "", "bitwise_and"], [33, 3, 1, "", "bitwise_invert"], [33, 3, 1, "", "bitwise_left_shift"], [33, 3, 1, "", "bitwise_or"], [33, 3, 1, "", "bitwise_right_shift"], [33, 3, 1, "", "bitwise_xor"], [33, 3, 1, "", "ceil"], [33, 3, 1, "", "cos"], [33, 3, 1, "", "cosh"], [33, 3, 1, "", "divide"], [33, 3, 1, "", "equal"], [33, 3, 1, "", "erf"], [33, 3, 1, "", "exp"], [33, 3, 1, "", "expm1"], [33, 3, 1, "", "floor"], [33, 3, 1, "", "floor_divide"], [33, 3, 1, "", "greater"], [33, 3, 1, "", "greater_equal"], [33, 3, 1, "", "isfinite"], [33, 3, 1, "", "isinf"], [33, 3, 1, "", "isnan"], [33, 3, 1, "", "less"], [33, 3, 1, "", "less_equal"], [33, 3, 1, "", "log"], [33, 3, 1, "", "log10"], [33, 3, 1, "", "log1p"], [33, 3, 1, "", "log2"], [33, 3, 1, "", "logaddexp"], [33, 3, 1, "", "logical_and"], [33, 3, 1, "", "logical_not"], [33, 3, 1, "", "logical_or"], [33, 3, 1, "", "logical_xor"], [33, 3, 1, "", "multiply"], [33, 3, 1, "", "negative"], [33, 3, 1, "", "not_equal"], [33, 3, 1, "", "positive"], [33, 3, 1, "", "pow"], [33, 3, 1, "", "remainder"], [33, 3, 1, "", "round"], [33, 3, 1, "", "sign"], [33, 3, 1, "", "sin"], [33, 3, 1, "", "sinh"], [33, 3, 1, "", "sqrt"], [33, 3, 1, "", "square"], [33, 3, 1, "", "subtract"], [33, 3, 1, "", "tan"], [33, 3, 1, "", "tanh"], [33, 3, 1, "", "trunc"]], "ivy.array.general": [[35, 2, 1, "", "ArrayWithGeneral"]], "ivy.array.general.ArrayWithGeneral": [[35, 3, 1, "", "all_equal"], [35, 3, 1, "", "gather_nd"]], "ivy.array.gradients": [[37, 2, 1, "", "ArrayWithGradients"]], "ivy.array.image": [[39, 2, 1, "", "ArrayWithImage"]], "ivy.array.layers": [[41, 2, 1, "", "ArrayWithLayers"]], "ivy.array.linear_algebra": [[43, 2, 1, "", "ArrayWithLinearAlgebra"]], "ivy.array.linear_algebra.ArrayWithLinearAlgebra": [[43, 3, 1, "", "cholesky"], [43, 3, 1, "", "cross"], [43, 3, 1, "", "det"], [43, 3, 1, "", "diagonal"], [43, 3, 1, "", "eigh"], [43, 3, 1, "", "eigvalsh"], [43, 3, 1, "", "inv"], [43, 3, 1, "", "matmul"], [43, 3, 1, "", "matrix_norm"], [43, 3, 1, "", "matrix_rank"], [43, 3, 1, "", "matrix_transpose"], [43, 3, 1, "", "outer"], [43, 3, 1, "", "pinv"], [43, 3, 1, "", "qr"], [43, 3, 1, "", "solve"], [43, 3, 1, "", "svd"], [43, 3, 1, "", "svdvals"], [43, 3, 1, "", "tensordot"], [43, 3, 1, "", "trace"], [43, 3, 1, "", "vecdot"], [43, 3, 1, "", "vector_norm"], [43, 3, 1, "", "vector_to_skew_symmetric_matrix"]], "ivy.array.losses": [[45, 2, 1, "", "ArrayWithLosses"]], "ivy.array.losses.ArrayWithLosses": [[45, 3, 1, "", "binary_cross_entropy"], [45, 3, 1, "", "cross_entropy"], [45, 3, 1, "", "sparse_cross_entropy"]], "ivy.array.manipulation": [[47, 2, 1, "", "ArrayWithManipulation"]], "ivy.array.manipulation.ArrayWithManipulation": [[47, 3, 1, "", "clip"], [47, 3, 1, "", "concat"], [47, 3, 1, "", "constant_pad"], [47, 3, 1, "", "expand_dims"], [47, 3, 1, "", "flip"], [47, 3, 1, "", "permute_dims"], [47, 3, 1, "", "repeat"], [47, 3, 1, "", "reshape"], [47, 3, 1, "", "roll"], [47, 3, 1, "", "squeeze"], [47, 3, 1, "", "stack"], [47, 3, 1, "", "swapaxes"], [47, 3, 1, "", "tile"], [47, 3, 1, "", "zero_pad"]], "ivy.array.norms": [[49, 2, 1, "", "ArrayWithNorms"]], "ivy.array.norms.ArrayWithNorms": [[49, 3, 1, "", "layer_norm"]], "ivy.array.random": [[51, 2, 1, "", "ArrayWithRandom"]], "ivy.array.searching": [[53, 2, 1, "", "ArrayWithSearching"]], "ivy.array.set": [[55, 2, 1, "", "ArrayWithSet"]], "ivy.array.sorting": [[57, 2, 1, "", "ArrayWithSorting"]], "ivy.array.sorting.ArrayWithSorting": [[57, 3, 1, "", "argsort"], [57, 3, 1, "", "sort"]], "ivy.array.statistical": [[59, 2, 1, "", "ArrayWithStatistical"]], "ivy.array.statistical.ArrayWithStatistical": [[59, 3, 1, "", "einsum"], [59, 3, 1, "", "max"], [59, 3, 1, "", "mean"], [59, 3, 1, "", "min"], [59, 3, 1, "", "prod"], [59, 3, 1, "", "std"], [59, 3, 1, "", "sum"], [59, 3, 1, "", "var"]], "ivy.array.utility": [[61, 2, 1, "", "ArrayWithUtility"]], "ivy.array.utility.ArrayWithUtility": [[61, 3, 1, "", "all"], [61, 3, 1, "", "any"]], "ivy.array.wrapping": [[63, 1, 1, "", "add_ivy_array_instance_methods"]], "ivy.backend_handler": [[0, 2, 1, "", "ContextManager"], [2, 1, 1, "", "choose_random_backend"], [3, 1, 1, "", "clear_backend_stack"], [4, 1, 1, "", "current_backend"], [5, 1, 1, "", "get_backend"], [6, 1, 1, "", "set_backend"], [7, 1, 1, "", "try_import_ivy_jax"], [8, 1, 1, "", "try_import_ivy_mxnet"], [9, 1, 1, "", "try_import_ivy_numpy"], [10, 1, 1, "", "try_import_ivy_tf"], [11, 1, 1, "", "try_import_ivy_torch"], [12, 1, 1, "", "unset_backend"]], "ivy.backend_handler.ContextManager": [[0, 3, 1, "", "__init__"]], "ivy.container": [[65, 0, 0, "-", "activations"], [67, 0, 0, "-", "base"], [69, 0, 0, "-", "container"], [72, 0, 0, "-", "creation"], [74, 0, 0, "-", "data_type"], [76, 0, 0, "-", "device"], [78, 0, 0, "-", "elementwise"], [80, 0, 0, "-", "general"], [82, 0, 0, "-", "gradients"], [84, 0, 0, "-", "image"], [86, 0, 0, "-", "layers"], [88, 0, 0, "-", "linear_algebra"], [90, 0, 0, "-", "losses"], [92, 0, 0, "-", "manipulation"], [94, 0, 0, "-", "norms"], [96, 0, 0, "-", "random"], [98, 0, 0, "-", "searching"], [100, 0, 0, "-", "set"], [102, 0, 0, "-", "sorting"], [104, 0, 0, "-", "statistical"], [106, 0, 0, "-", "utility"], [108, 0, 0, "-", "wrapping"]], "ivy.container.activations": [[66, 2, 1, "", "ContainerWithActivations"]], "ivy.container.base": [[68, 2, 1, "", "ContainerBase"]], "ivy.container.base.ContainerBase": [[68, 3, 1, "", "__getitem__"], [68, 3, 1, "", "__init__"], [68, 3, 1, "", "__setitem__"], [68, 3, 1, "", "all_false"], [68, 3, 1, "", "all_key_chains"], [68, 3, 1, "", "all_true"], [68, 3, 1, "", "arrays_as_lists"], [68, 3, 1, "", "as_arrays"], [68, 3, 1, "", "as_bools"], [68, 3, 1, "", "as_ones"], [68, 3, 1, "", "as_random_uniform"], [68, 3, 1, "", "as_variables"], [68, 3, 1, "", "as_zeros"], [68, 3, 1, "", "assert_contains_sub_container"], [68, 3, 1, "", "assert_contains_sub_structure"], [68, 3, 1, "", "assert_identical"], [68, 3, 1, "", "assert_identical_structure"], [68, 3, 1, "", "at_key_chain"], [68, 3, 1, "", "at_key_chains"], [68, 3, 1, "", "at_keys"], [68, 3, 1, "", "clip"], [68, 3, 1, "", "combine"], [68, 3, 1, "", "common_key_chains"], [68, 4, 1, "", "config"], [68, 3, 1, "", "contains_sub_container"], [68, 3, 1, "", "contains_sub_structure"], [68, 3, 1, "", "copy"], [68, 3, 1, "", "create_if_absent"], [68, 3, 1, "", "cutoff_at_depth"], [68, 3, 1, "", "cutoff_at_height"], [68, 3, 1, "", "deep_copy"], [68, 4, 1, "", "dev"], [68, 3, 1, "", "dev_clone"], [68, 3, 1, "", "dev_dist"], [68, 4, 1, "", "dev_str"], [68, 3, 1, "", "diff"], [68, 3, 1, "", "dtype"], [68, 3, 1, "", "einops_rearrange"], [68, 3, 1, "", "einops_reduce"], [68, 3, 1, "", "einops_repeat"], [68, 3, 1, "", "find_sub_container"], [68, 3, 1, "", "find_sub_structure"], [68, 3, 1, "", "flatten_key_chain"], [68, 3, 1, "", "flatten_key_chains"], [68, 3, 1, "", "format_key_chains"], [68, 3, 1, "", "from_disk_as_hdf5"], [68, 3, 1, "", "from_disk_as_json"], [68, 3, 1, "", "from_disk_as_pickled"], [68, 3, 1, "", "from_flat_list"], [68, 3, 1, "", "from_numpy"], [68, 3, 1, "", "gather"], [68, 3, 1, "", "gather_nd"], [68, 3, 1, "", "h5_file_size"], [68, 3, 1, "", "handle_inplace"], [68, 3, 1, "", "has_key"], [68, 3, 1, "", "has_key_chain"], [68, 3, 1, "", "has_nans"], [68, 3, 1, "", "identical"], [68, 3, 1, "", "identical_array_shapes"], [68, 3, 1, "", "identical_configs"], [68, 3, 1, "", "identical_structure"], [68, 3, 1, "", "if_exists"], [68, 3, 1, "", "inplace_update"], [68, 4, 1, "", "ivy"], [68, 3, 1, "", "key_chains_containing"], [68, 3, 1, "", "list_join"], [68, 3, 1, "", "list_stack"], [68, 3, 1, "", "map"], [68, 3, 1, "", "map_conts"], [68, 3, 1, "", "matrix_norm"], [68, 4, 1, "", "max_depth"], [68, 3, 1, "", "maximum"], [68, 3, 1, "", "minimum"], [68, 3, 1, "", "multi_map"], [68, 3, 1, "", "multi_map_in_static_method"], [68, 3, 1, "", "num_arrays"], [68, 3, 1, "", "overwrite_at_key_chain"], [68, 3, 1, "", "overwrite_at_key_chains"], [68, 3, 1, "", "prune_empty"], [68, 3, 1, "", "prune_key_chain"], [68, 3, 1, "", "prune_key_chains"], [68, 3, 1, "", "prune_key_from_key_chains"], [68, 3, 1, "", "prune_keys"], [68, 3, 1, "", "prune_keys_from_key_chains"], [68, 3, 1, "", "reduce"], [68, 3, 1, "", "remove_key_length_limit"], [68, 3, 1, "", "remove_print_limit"], [68, 3, 1, "", "reshape_like"], [68, 3, 1, "", "restructure"], [68, 3, 1, "", "restructure_key_chains"], [68, 3, 1, "", "set_at_key_chain"], [68, 3, 1, "", "set_at_key_chains"], [68, 3, 1, "", "set_at_keys"], [68, 3, 1, "", "set_framework"], [68, 3, 1, "", "set_ivy_backend"], [68, 4, 1, "", "shape"], [68, 4, 1, "", "shapes"], [68, 3, 1, "", "show"], [68, 3, 1, "", "show_sub_container"], [68, 3, 1, "", "shuffle"], [68, 3, 1, "", "shuffle_h5_file"], [68, 3, 1, "", "size_ordered_arrays"], [68, 3, 1, "", "slice_keys"], [68, 3, 1, "", "slice_via_key"], [68, 3, 1, "", "sort_by_key"], [68, 3, 1, "", "split"], [68, 3, 1, "", "stop_gradients"], [68, 3, 1, "", "structural_diff"], [68, 3, 1, "", "to_device"], [68, 3, 1, "", "to_dict"], [68, 3, 1, "", "to_disk_as_hdf5"], [68, 3, 1, "", "to_disk_as_json"], [68, 3, 1, "", "to_disk_as_pickled"], [68, 3, 1, "", "to_flat_list"], [68, 3, 1, "", "to_iterator"], [68, 3, 1, "", "to_iterator_keys"], [68, 3, 1, "", "to_iterator_values"], [68, 3, 1, "", "to_ivy"], [68, 3, 1, "", "to_jsonable"], [68, 3, 1, "", "to_list"], [68, 3, 1, "", "to_multi_dev"], [68, 3, 1, "", "to_native"], [68, 3, 1, "", "to_numpy"], [68, 3, 1, "", "to_raw"], [68, 3, 1, "", "trim_key"], [68, 3, 1, "", "try_kc"], [68, 3, 1, "", "unify"], [68, 3, 1, "", "unstack"], [68, 3, 1, "", "update_config"], [68, 3, 1, "", "vector_norm"], [68, 3, 1, "", "with_default_key_color"], [68, 3, 1, "", "with_entries_as_lists"], [68, 3, 1, "", "with_ivy_backend"], [68, 3, 1, "", "with_key_length_limit"], [68, 3, 1, "", "with_print_indent"], [68, 3, 1, "", "with_print_limit"], [68, 3, 1, "", "with_print_line_spacing"]], "ivy.container.container": [[70, 2, 1, "", "Container"], [71, 2, 1, "", "MultiDevContainer"]], "ivy.container.container.Container": [[70, 3, 1, "", "__add__"], [70, 3, 1, "", "__init__"], [70, 3, 1, "", "__radd__"], [70, 3, 1, "", "adam_step"], [70, 3, 1, "", "arange"], [70, 3, 1, "", "arg_info"], [70, 3, 1, "", "arg_names"], [70, 3, 1, "", "argmax"], [70, 3, 1, "", "argmin"], [70, 3, 1, "", "array"], [70, 3, 1, "", "array_equal"], [70, 3, 1, "", "arrays_equal"], [70, 3, 1, "", "as_ivy_dev"], [70, 3, 1, "", "as_ivy_dtype"], [70, 3, 1, "", "as_native_dev"], [70, 3, 1, "", "as_native_dtype"], [70, 3, 1, "", "asarray"], [70, 3, 1, "", "assert_supports_inplace"], [70, 3, 1, "", "astype"], [70, 3, 1, "", "broadcast_arrays"], [70, 3, 1, "", "broadcast_to"], [70, 3, 1, "", "cache_fn"], [70, 3, 1, "", "cholesky"], [70, 3, 1, "", "clear_mem_on_dev"], [70, 3, 1, "", "clip_matrix_norm"], [70, 3, 1, "", "closest_valid_dtype"], [70, 3, 1, "", "container_types"], [70, 3, 1, "", "conv1d"], [70, 3, 1, "", "conv1d_transpose"], [70, 3, 1, "", "conv2d"], [70, 3, 1, "", "conv2d_transpose"], [70, 3, 1, "", "conv3d"], [70, 3, 1, "", "conv3d_transpose"], [70, 3, 1, "", "copy_array"], [70, 3, 1, "", "cross"], [70, 3, 1, "", "cumprod"], [70, 3, 1, "", "cumsum"], [70, 3, 1, "", "current_backend"], [70, 3, 1, "", "current_backend_str"], [70, 3, 1, "", "default"], [70, 3, 1, "", "default_device"], [70, 3, 1, "", "default_dtype"], [70, 3, 1, "", "default_float_dtype"], [70, 3, 1, "", "default_int_dtype"], [70, 3, 1, "", "depthwise_conv2d"], [70, 3, 1, "", "det"], [70, 3, 1, "", "dev_clone_array"], [70, 3, 1, "", "dev_clone_iter"], [70, 3, 1, "", "dev_clone_nest"], [70, 3, 1, "", "dev_dist_array"], [70, 3, 1, "", "dev_dist_iter"], [70, 3, 1, "", "dev_dist_nest"], [70, 3, 1, "", "dev_unify"], [70, 3, 1, "", "dev_unify_array"], [70, 3, 1, "", "dev_unify_iter"], [70, 3, 1, "", "dev_unify_nest"], [70, 3, 1, "", "dev_util"], [70, 3, 1, "", "diagonal"], [70, 3, 1, "", "dropout"], [70, 3, 1, "", "dtype_bits"], [70, 3, 1, "", "eigh"], [70, 3, 1, "", "eigvalsh"], [70, 3, 1, "", "empty"], [70, 3, 1, "", "empty_like"], [70, 3, 1, "", "execute_with_gradients"], [70, 3, 1, "", "exists"], [70, 3, 1, "", "eye"], [70, 3, 1, "", "finfo"], [70, 3, 1, "", "floormod"], [70, 3, 1, "", "fourier_encode"], [70, 3, 1, "", "from_dlpack"], [70, 3, 1, "", "full"], [70, 3, 1, "", "full_like"], [70, 3, 1, "", "function_supported_dtypes"], [70, 3, 1, "", "function_unsupported_dtypes"], [70, 3, 1, "", "gelu"], [70, 3, 1, "", "get_all_arrays_in_memory"], [70, 3, 1, "", "get_all_ivy_arrays_on_dev"], [70, 3, 1, "", "get_min_base"], [70, 3, 1, "", "get_min_denominator"], [70, 3, 1, "", "get_num_dims"], [70, 3, 1, "", "get_referrers_recursive"], [70, 3, 1, "", "gpu_is_available"], [70, 3, 1, "", "handle_nestable"], [70, 3, 1, "", "handle_out_argument"], [70, 3, 1, "", "iinfo"], [70, 3, 1, "", "indices_where"], [70, 3, 1, "", "infer_device"], [70, 3, 1, "", "infer_dtype"], [70, 3, 1, "", "inplace_arrays_supported"], [70, 3, 1, "", "inplace_decrement"], [70, 3, 1, "", "inplace_increment"], [70, 3, 1, "", "inplace_variables_supported"], [70, 3, 1, "", "inputs_to_native_arrays"], [70, 3, 1, "", "inv"], [70, 3, 1, "", "invalid_dtype"], [70, 3, 1, "", "is_float_dtype"], [70, 3, 1, "", "is_int_dtype"], [70, 3, 1, "", "is_ivy_container"], [70, 3, 1, "", "leaky_relu"], [70, 3, 1, "", "linear"], [70, 3, 1, "", "linspace"], [70, 3, 1, "", "logspace"], [70, 3, 1, "", "lstm_update"], [70, 3, 1, "", "match_kwargs"], [70, 3, 1, "", "matrix_power"], [70, 3, 1, "", "matrix_rank"], [70, 3, 1, "", "matrix_transpose"], [70, 3, 1, "", "meshgrid"], [70, 3, 1, "", "multi_head_attention"], [70, 3, 1, "", "multinomial"], [70, 3, 1, "", "multiprocessing"], [70, 3, 1, "", "native_array"], [70, 3, 1, "", "nonzero"], [70, 3, 1, "", "num_arrays_in_memory"], [70, 3, 1, "", "num_cpu_cores"], [70, 3, 1, "", "num_gpus"], [70, 3, 1, "", "num_ivy_arrays_on_dev"], [70, 3, 1, "", "one_hot"], [70, 3, 1, "", "ones"], [70, 3, 1, "", "ones_like"], [70, 3, 1, "", "outer"], [70, 3, 1, "", "outputs_to_ivy_arrays"], [70, 3, 1, "", "percent_used_mem_on_dev"], [70, 3, 1, "", "pinv"], [70, 3, 1, "", "print_all_arrays_in_memory"], [70, 3, 1, "", "print_all_ivy_arrays_on_dev"], [70, 3, 1, "", "promote_types"], [70, 3, 1, "", "qr"], [70, 3, 1, "", "queue_timeout"], [70, 3, 1, "", "randint"], [70, 3, 1, "", "random_normal"], [70, 3, 1, "", "relu"], [70, 3, 1, "", "result_type"], [70, 3, 1, "", "scaled_dot_product_attention"], [70, 3, 1, "", "scatter_flat"], [70, 3, 1, "", "scatter_nd"], [70, 3, 1, "", "seed"], [70, 3, 1, "", "set_default_device"], [70, 3, 1, "", "set_default_dtype"], [70, 3, 1, "", "set_default_float_dtype"], [70, 3, 1, "", "set_default_int_dtype"], [70, 3, 1, "", "set_min_base"], [70, 3, 1, "", "set_min_denominator"], [70, 3, 1, "", "set_queue_timeout"], [70, 3, 1, "", "set_split_factor"], [70, 3, 1, "", "set_tmp_dir"], [70, 3, 1, "", "set_with_grads"], [70, 3, 1, "", "shape_to_tuple"], [70, 3, 1, "", "sigmoid"], [70, 3, 1, "", "slogdet"], [70, 3, 1, "", "softmax"], [70, 3, 1, "", "softplus"], [70, 3, 1, "", "solve"], [70, 3, 1, "", "split_factor"], [70, 3, 1, "", "split_func_call"], [70, 3, 1, "", "stable_divide"], [70, 3, 1, "", "stable_pow"], [70, 3, 1, "", "static_abs"], [70, 3, 1, "", "static_acos"], [70, 3, 1, "", "static_acosh"], [70, 3, 1, "", "static_adam_step"], [70, 3, 1, "", "static_all"], [70, 3, 1, "", "static_any"], [70, 3, 1, "", "static_arange"], [70, 3, 1, "", "static_arg_info"], [70, 3, 1, "", "static_arg_names"], [70, 3, 1, "", "static_argmax"], [70, 3, 1, "", "static_argmin"], [70, 3, 1, "", "static_array"], [70, 3, 1, "", "static_array_equal"], [70, 3, 1, "", "static_arrays_equal"], [70, 3, 1, "", "static_as_ivy_dev"], [70, 3, 1, "", "static_as_ivy_dtype"], [70, 3, 1, "", "static_as_native_dev"], [70, 3, 1, "", "static_as_native_dtype"], [70, 3, 1, "", "static_asarray"], [70, 3, 1, "", "static_asin"], [70, 3, 1, "", "static_asinh"], [70, 3, 1, "", "static_assert_supports_inplace"], [70, 3, 1, "", "static_astype"], [70, 3, 1, "", "static_atan"], [70, 3, 1, "", "static_atan2"], [70, 3, 1, "", "static_atanh"], [70, 3, 1, "", "static_bitwise_and"], [70, 3, 1, "", "static_bitwise_invert"], [70, 3, 1, "", "static_bitwise_left_shift"], [70, 3, 1, "", "static_bitwise_or"], [70, 3, 1, "", "static_bitwise_right_shift"], [70, 3, 1, "", "static_bitwise_xor"], [70, 3, 1, "", "static_broadcast_arrays"], [70, 3, 1, "", "static_broadcast_to"], [70, 3, 1, "", "static_cache_fn"], [70, 3, 1, "", "static_ceil"], [70, 3, 1, "", "static_cholesky"], [70, 3, 1, "", "static_clear_mem_on_dev"], [70, 3, 1, "", "static_clip_matrix_norm"], [70, 3, 1, "", "static_clip_vector_norm"], [70, 3, 1, "", "static_closest_valid_dtype"], [70, 3, 1, "", "static_concat"], [70, 3, 1, "", "static_constant_pad"], [70, 3, 1, "", "static_container_types"], [70, 3, 1, "", "static_conv1d"], [70, 3, 1, "", "static_conv1d_transpose"], [70, 3, 1, "", "static_conv2d"], [70, 3, 1, "", "static_conv2d_transpose"], [70, 3, 1, "", "static_conv3d"], [70, 3, 1, "", "static_conv3d_transpose"], [70, 3, 1, "", "static_copy_array"], [70, 3, 1, "", "static_cos"], [70, 3, 1, "", "static_cosh"], [70, 3, 1, "", "static_cross"], [70, 3, 1, "", "static_cumprod"], [70, 3, 1, "", "static_cumsum"], [70, 3, 1, "", "static_current_backend"], [70, 3, 1, "", "static_current_backend_str"], [70, 3, 1, "", "static_default"], [70, 3, 1, "", "static_default_device"], [70, 3, 1, "", "static_default_dtype"], [70, 3, 1, "", "static_default_float_dtype"], [70, 3, 1, "", "static_default_int_dtype"], [70, 3, 1, "", "static_depthwise_conv2d"], [70, 3, 1, "", "static_det"], [70, 3, 1, "", "static_dev"], [70, 3, 1, "", "static_dev_clone"], [70, 3, 1, "", "static_dev_clone_array"], [70, 3, 1, "", "static_dev_clone_iter"], [70, 3, 1, "", "static_dev_clone_nest"], [70, 3, 1, "", "static_dev_dist"], [70, 3, 1, "", "static_dev_dist_array"], [70, 3, 1, "", "static_dev_dist_iter"], [70, 3, 1, "", "static_dev_dist_nest"], [70, 3, 1, "", "static_dev_unify"], [70, 3, 1, "", "static_dev_unify_array"], [70, 3, 1, "", "static_dev_unify_iter"], [70, 3, 1, "", "static_dev_unify_nest"], [70, 3, 1, "", "static_dev_util"], [70, 3, 1, "", "static_diagonal"], [70, 3, 1, "", "static_dropout"], [70, 3, 1, "", "static_dtype"], [70, 3, 1, "", "static_dtype_bits"], [70, 3, 1, "", "static_eigh"], [70, 3, 1, "", "static_eigvalsh"], [70, 3, 1, "", "static_einops_rearrange"], [70, 3, 1, "", "static_einops_reduce"], [70, 3, 1, "", "static_einops_repeat"], [70, 3, 1, "", "static_einsum"], [70, 3, 1, "", "static_empty"], [70, 3, 1, "", "static_empty_like"], [70, 3, 1, "", "static_equal"], [70, 3, 1, "", "static_erf"], [70, 3, 1, "", "static_execute_with_gradients"], [70, 3, 1, "", "static_exists"], [70, 3, 1, "", "static_exp"], [70, 3, 1, "", "static_expand_dims"], [70, 3, 1, "", "static_expm1"], [70, 3, 1, "", "static_eye"], [70, 3, 1, "", "static_finfo"], [70, 3, 1, "", "static_flip"], [70, 3, 1, "", "static_floor"], [70, 3, 1, "", "static_floor_divide"], [70, 3, 1, "", "static_floormod"], [70, 3, 1, "", "static_fourier_encode"], [70, 3, 1, "", "static_from_dlpack"], [70, 3, 1, "", "static_full"], [70, 3, 1, "", "static_full_like"], [70, 3, 1, "", "static_function_supported_dtypes"], [70, 3, 1, "", "static_function_unsupported_dtypes"], [70, 3, 1, "", "static_gather"], [70, 3, 1, "", "static_gelu"], [70, 3, 1, "", "static_get_all_arrays_in_memory"], [70, 3, 1, "", "static_get_all_ivy_arrays_on_dev"], [70, 3, 1, "", "static_get_min_base"], [70, 3, 1, "", "static_get_min_denominator"], [70, 3, 1, "", "static_get_num_dims"], [70, 3, 1, "", "static_get_referrers_recursive"], [70, 3, 1, "", "static_gpu_is_available"], [70, 3, 1, "", "static_greater"], [70, 3, 1, "", "static_greater_equal"], [70, 3, 1, "", "static_handle_nestable"], [70, 3, 1, "", "static_handle_out_argument"], [70, 3, 1, "", "static_has_nans"], [70, 3, 1, "", "static_iinfo"], [70, 3, 1, "", "static_indices_where"], [70, 3, 1, "", "static_infer_device"], [70, 3, 1, "", "static_infer_dtype"], [70, 3, 1, "", "static_inplace_arrays_supported"], [70, 3, 1, "", "static_inplace_decrement"], [70, 3, 1, "", "static_inplace_increment"], [70, 3, 1, "", "static_inplace_update"], [70, 3, 1, "", "static_inplace_variables_supported"], [70, 3, 1, "", "static_inputs_to_native_arrays"], [70, 3, 1, "", "static_inv"], [70, 3, 1, "", "static_invalid_dtype"], [70, 3, 1, "", "static_is_array"], [70, 3, 1, "", "static_is_float_dtype"], [70, 3, 1, "", "static_is_int_dtype"], [70, 3, 1, "", "static_is_ivy_array"], [70, 3, 1, "", "static_is_ivy_container"], [70, 3, 1, "", "static_is_native_array"], [70, 3, 1, "", "static_is_variable"], [70, 3, 1, "", "static_isfinite"], [70, 3, 1, "", "static_isinf"], [70, 3, 1, "", "static_isnan"], [70, 3, 1, "", "static_layer_norm"], [70, 3, 1, "", "static_leaky_relu"], [70, 3, 1, "", "static_less"], [70, 3, 1, "", "static_less_equal"], [70, 3, 1, "", "static_linear"], [70, 3, 1, "", "static_linspace"], [70, 3, 1, "", "static_log"], [70, 3, 1, "", "static_log10"], [70, 3, 1, "", "static_log1p"], [70, 3, 1, "", "static_log2"], [70, 3, 1, "", "static_logaddexp"], [70, 3, 1, "", "static_logical_and"], [70, 3, 1, "", "static_logical_not"], [70, 3, 1, "", "static_logical_or"], [70, 3, 1, "", "static_logical_xor"], [70, 3, 1, "", "static_logspace"], [70, 3, 1, "", "static_lstm_update"], [70, 3, 1, "", "static_match_kwargs"], [70, 3, 1, "", "static_matmul"], [70, 3, 1, "", "static_matrix_norm"], [70, 3, 1, "", "static_matrix_power"], [70, 3, 1, "", "static_matrix_rank"], [70, 3, 1, "", "static_matrix_transpose"], [70, 3, 1, "", "static_max"], [70, 3, 1, "", "static_maximum"], [70, 3, 1, "", "static_mean"], [70, 3, 1, "", "static_meshgrid"], [70, 3, 1, "", "static_min"], [70, 3, 1, "", "static_minimum"], [70, 3, 1, "", "static_multi_head_attention"], [70, 3, 1, "", "static_multinomial"], [70, 3, 1, "", "static_multiprocessing"], [70, 3, 1, "", "static_native_array"], [70, 3, 1, "", "static_negative"], [70, 3, 1, "", "static_nonzero"], [70, 3, 1, "", "static_not_equal"], [70, 3, 1, "", "static_num_arrays_in_memory"], [70, 3, 1, "", "static_num_cpu_cores"], [70, 3, 1, "", "static_num_gpus"], [70, 3, 1, "", "static_num_ivy_arrays_on_dev"], [70, 3, 1, "", "static_one_hot"], [70, 3, 1, "", "static_ones"], [70, 3, 1, "", "static_ones_like"], [70, 3, 1, "", "static_outer"], [70, 3, 1, "", "static_outputs_to_ivy_arrays"], [70, 3, 1, "", "static_percent_used_mem_on_dev"], [70, 3, 1, "", "static_permute_dims"], [70, 3, 1, "", "static_pinv"], [70, 3, 1, "", "static_positive"], [70, 3, 1, "", "static_pow"], [70, 3, 1, "", "static_print_all_arrays_in_memory"], [70, 3, 1, "", "static_print_all_ivy_arrays_on_dev"], [70, 3, 1, "", "static_prod"], [70, 3, 1, "", "static_promote_types"], [70, 3, 1, "", "static_qr"], [70, 3, 1, "", "static_queue_timeout"], [70, 3, 1, "", "static_random_normal"], [70, 3, 1, "", "static_relu"], [70, 3, 1, "", "static_remainder"], [70, 3, 1, "", "static_repeat"], [70, 3, 1, "", "static_reshape"], [70, 3, 1, "", "static_result_type"], [70, 3, 1, "", "static_round"], [70, 3, 1, "", "static_scaled_dot_product_attention"], [70, 3, 1, "", "static_scatter_flat"], [70, 3, 1, "", "static_scatter_nd"], [70, 3, 1, "", "static_seed"], [70, 3, 1, "", "static_set_default_device"], [70, 3, 1, "", "static_set_default_dtype"], [70, 3, 1, "", "static_set_default_float_dtype"], [70, 3, 1, "", "static_set_default_int_dtype"], [70, 3, 1, "", "static_set_min_base"], [70, 3, 1, "", "static_set_min_denominator"], [70, 3, 1, "", "static_set_queue_timeout"], [70, 3, 1, "", "static_set_split_factor"], [70, 3, 1, "", "static_set_tmp_dir"], [70, 3, 1, "", "static_set_with_grads"], [70, 3, 1, "", "static_shape"], [70, 3, 1, "", "static_shape_to_tuple"], [70, 3, 1, "", "static_shuffle"], [70, 3, 1, "", "static_sigmoid"], [70, 3, 1, "", "static_sign"], [70, 3, 1, "", "static_sin"], [70, 3, 1, "", "static_sinh"], [70, 3, 1, "", "static_slogdet"], [70, 3, 1, "", "static_softmax"], [70, 3, 1, "", "static_softplus"], [70, 3, 1, "", "static_solve"], [70, 3, 1, "", "static_split"], [70, 3, 1, "", "static_split_factor"], [70, 3, 1, "", "static_split_func_call"], [70, 3, 1, "", "static_sqrt"], [70, 3, 1, "", "static_square"], [70, 3, 1, "", "static_squeeze"], [70, 3, 1, "", "static_stable_divide"], [70, 3, 1, "", "static_stable_pow"], [70, 3, 1, "", "static_stack"], [70, 3, 1, "", "static_std"], [70, 3, 1, "", "static_stop_gradient"], [70, 3, 1, "", "static_sum"], [70, 3, 1, "", "static_supports_inplace"], [70, 3, 1, "", "static_svd"], [70, 3, 1, "", "static_svdvals"], [70, 3, 1, "", "static_swapaxes"], [70, 3, 1, "", "static_tensordot"], [70, 3, 1, "", "static_tile"], [70, 3, 1, "", "static_tmp_dir"], [70, 3, 1, "", "static_to_device"], [70, 3, 1, "", "static_to_list"], [70, 3, 1, "", "static_to_native_arrays_and_back"], [70, 3, 1, "", "static_to_numpy"], [70, 3, 1, "", "static_to_scalar"], [70, 3, 1, "", "static_total_mem_on_dev"], [70, 3, 1, "", "static_tpu_is_available"], [70, 3, 1, "", "static_trace"], [70, 3, 1, "", "static_tril"], [70, 3, 1, "", "static_triu"], [70, 3, 1, "", "static_trunc"], [70, 3, 1, "", "static_try_else_none"], [70, 3, 1, "", "static_type_promote_arrays"], [70, 3, 1, "", "static_unique_all"], [70, 3, 1, "", "static_unique_counts"], [70, 3, 1, "", "static_unique_inverse"], [70, 3, 1, "", "static_unique_values"], [70, 3, 1, "", "static_unset_default_device"], [70, 3, 1, "", "static_unset_default_dtype"], [70, 3, 1, "", "static_unset_default_float_dtype"], [70, 3, 1, "", "static_unset_default_int_dtype"], [70, 3, 1, "", "static_unset_with_grads"], [70, 3, 1, "", "static_unstack"], [70, 3, 1, "", "static_used_mem_on_dev"], [70, 3, 1, "", "static_valid_dtype"], [70, 3, 1, "", "static_value_is_nan"], [70, 3, 1, "", "static_var"], [70, 3, 1, "", "static_variable"], [70, 3, 1, "", "static_variable_data"], [70, 3, 1, "", "static_vecdot"], [70, 3, 1, "", "static_vector_norm"], [70, 3, 1, "", "static_vector_to_skew_symmetric_matrix"], [70, 3, 1, "", "static_where"], [70, 3, 1, "", "static_with_grads"], [70, 3, 1, "", "static_zero_pad"], [70, 3, 1, "", "static_zeros"], [70, 3, 1, "", "static_zeros_like"], [70, 3, 1, "", "stop_gradient"], [70, 3, 1, "", "supports_inplace"], [70, 3, 1, "", "svd"], [70, 3, 1, "", "svdvals"], [70, 3, 1, "", "tensordot"], [70, 3, 1, "", "tmp_dir"], [70, 3, 1, "", "to_native_arrays_and_back"], [70, 3, 1, "", "to_scalar"], [70, 3, 1, "", "total_mem_on_dev"], [70, 3, 1, "", "tpu_is_available"], [70, 3, 1, "", "trace"], [70, 3, 1, "", "tril"], [70, 3, 1, "", "triu"], [70, 3, 1, "", "try_else_none"], [70, 3, 1, "", "type_promote_arrays"], [70, 3, 1, "", "unique_all"], [70, 3, 1, "", "unique_counts"], [70, 3, 1, "", "unique_inverse"], [70, 3, 1, "", "unique_values"], [70, 3, 1, "", "unset_default_device"], [70, 3, 1, "", "unset_default_dtype"], [70, 3, 1, "", "unset_default_float_dtype"], [70, 3, 1, "", "unset_default_int_dtype"], [70, 3, 1, "", "unset_with_grads"], [70, 3, 1, "", "used_mem_on_dev"], [70, 3, 1, "", "valid_dtype"], [70, 3, 1, "", "value_is_nan"], [70, 3, 1, "", "variable"], [70, 3, 1, "", "variable_data"], [70, 3, 1, "", "vecdot"], [70, 3, 1, "", "vector_to_skew_symmetric_matrix"], [70, 3, 1, "", "where"], [70, 3, 1, "", "with_grads"], [70, 3, 1, "", "zeros"], [70, 3, 1, "", "zeros_like"]], "ivy.container.container.MultiDevContainer": [[71, 3, 1, "", "__init__"], [71, 3, 1, "", "at_dev"], [71, 3, 1, "", "at_devs"]], "ivy.container.container_methods": [[318, 1, 1, "", "abs"], [322, 1, 1, "", "acos"], [326, 1, 1, "", "acosh"], [630, 1, 1, "", "adam_update"], [330, 1, 1, "", "add"], [912, 1, 1, "", "all"], [555, 1, 1, "", "all_equal"], [916, 1, 1, "", "any"], [868, 1, 1, "", "argsort"], [335, 1, 1, "", "asin"], [339, 1, 1, "", "asinh"], [343, 1, 1, "", "atan"], [347, 1, 1, "", "atan2"], [351, 1, 1, "", "atanh"], [743, 1, 1, "", "binary_cross_entropy"], [355, 1, 1, "", "bitwise_and"], [359, 1, 1, "", "bitwise_invert"], [363, 1, 1, "", "bitwise_left_shift"], [367, 1, 1, "", "bitwise_or"], [371, 1, 1, "", "bitwise_right_shift"], [375, 1, 1, "", "bitwise_xor"], [239, 1, 1, "", "can_cast"], [379, 1, 1, "", "ceil"], [759, 1, 1, "", "clip"], [566, 1, 1, "", "clip_vector_norm"], [764, 1, 1, "", "concat"], [768, 1, 1, "", "constant_pad"], [383, 1, 1, "", "cos"], [387, 1, 1, "", "cosh"], [748, 1, 1, "", "cross_entropy"], [391, 1, 1, "", "divide"], [879, 1, 1, "", "einsum"], [396, 1, 1, "", "equal"], [400, 1, 1, "", "erf"], [404, 1, 1, "", "exp"], [772, 1, 1, "", "expand_dims"], [408, 1, 1, "", "expm1"], [776, 1, 1, "", "flip"], [412, 1, 1, "", "floor"], [416, 1, 1, "", "floor_divide"], [583, 1, 1, "", "gather_nd"], [635, 1, 1, "", "gradient_descent_update"], [420, 1, 1, "", "greater"], [424, 1, 1, "", "greater_equal"], [428, 1, 1, "", "isfinite"], [432, 1, 1, "", "isinf"], [436, 1, 1, "", "isnan"], [640, 1, 1, "", "lamb_update"], [644, 1, 1, "", "lars_update"], [841, 1, 1, "", "layer_norm"], [440, 1, 1, "", "less"], [444, 1, 1, "", "less_equal"], [448, 1, 1, "", "log"], [452, 1, 1, "", "log10"], [456, 1, 1, "", "log1p"], [460, 1, 1, "", "log2"], [464, 1, 1, "", "logaddexp"], [468, 1, 1, "", "logical_and"], [472, 1, 1, "", "logical_not"], [476, 1, 1, "", "logical_or"], [480, 1, 1, "", "logical_xor"], [694, 1, 1, "", "matmul"], [883, 1, 1, "", "max"], [887, 1, 1, "", "mean"], [891, 1, 1, "", "min"], [486, 1, 1, "", "multiply"], [491, 1, 1, "", "negative"], [495, 1, 1, "", "not_equal"], [648, 1, 1, "", "optimizer_update"], [780, 1, 1, "", "permute_dims"], [499, 1, 1, "", "positive"], [503, 1, 1, "", "pow"], [895, 1, 1, "", "prod"], [850, 1, 1, "", "random_uniform"], [507, 1, 1, "", "remainder"], [784, 1, 1, "", "repeat"], [788, 1, 1, "", "reshape"], [792, 1, 1, "", "roll"], [511, 1, 1, "", "round"], [515, 1, 1, "", "sign"], [519, 1, 1, "", "sin"], [523, 1, 1, "", "sinh"], [873, 1, 1, "", "sort"], [753, 1, 1, "", "sparse_cross_entropy"], [527, 1, 1, "", "sqrt"], [531, 1, 1, "", "square"], [798, 1, 1, "", "squeeze"], [802, 1, 1, "", "stack"], [632, 1, 1, "", "static_adam_update"], [332, 1, 1, "", "static_add"], [557, 1, 1, "", "static_all_equal"], [870, 1, 1, "", "static_argsort"], [745, 1, 1, "", "static_binary_cross_entropy"], [241, 1, 1, "", "static_can_cast"], [761, 1, 1, "", "static_clip"], [750, 1, 1, "", "static_cross_entropy"], [393, 1, 1, "", "static_divide"], [585, 1, 1, "", "static_gather_nd"], [637, 1, 1, "", "static_gradient_descent_update"], [642, 1, 1, "", "static_lamb_update"], [646, 1, 1, "", "static_lars_update"], [488, 1, 1, "", "static_multiply"], [650, 1, 1, "", "static_optimizer_update"], [847, 1, 1, "", "static_randint"], [852, 1, 1, "", "static_random_uniform"], [794, 1, 1, "", "static_roll"], [875, 1, 1, "", "static_sort"], [755, 1, 1, "", "static_sparse_cross_entropy"], [534, 1, 1, "", "static_subtract"], [539, 1, 1, "", "static_tan"], [544, 1, 1, "", "static_tanh"], [899, 1, 1, "", "std"], [536, 1, 1, "", "subtract"], [903, 1, 1, "", "sum"], [806, 1, 1, "", "swapaxes"], [541, 1, 1, "", "tan"], [546, 1, 1, "", "tanh"], [810, 1, 1, "", "tile"], [550, 1, 1, "", "trunc"], [907, 1, 1, "", "var"], [814, 1, 1, "", "zero_pad"]], "ivy.container.creation": [[73, 2, 1, "", "ContainerWithCreation"]], "ivy.container.data_type": [[75, 2, 1, "", "ContainerWithDataTypes"]], "ivy.container.data_type.ContainerWithDataTypes": [[75, 3, 1, "", "can_cast"], [75, 3, 1, "", "static_can_cast"]], "ivy.container.device": [[77, 2, 1, "", "ContainerWithDevice"]], "ivy.container.elementwise": [[79, 2, 1, "", "ContainerWithElementwise"]], "ivy.container.elementwise.ContainerWithElementwise": [[79, 3, 1, "", "abs"], [79, 3, 1, "", "acos"], [79, 3, 1, "", "acosh"], [79, 3, 1, "", "add"], [79, 3, 1, "", "asin"], [79, 3, 1, "", "asinh"], [79, 3, 1, "", "atan"], [79, 3, 1, "", "atan2"], [79, 3, 1, "", "atanh"], [79, 3, 1, "", "bitwise_and"], [79, 3, 1, "", "bitwise_invert"], [79, 3, 1, "", "bitwise_left_shift"], [79, 3, 1, "", "bitwise_or"], [79, 3, 1, "", "bitwise_right_shift"], [79, 3, 1, "", "bitwise_xor"], [79, 3, 1, "", "ceil"], [79, 3, 1, "", "cos"], [79, 3, 1, "", "cosh"], [79, 3, 1, "", "divide"], [79, 3, 1, "", "equal"], [79, 3, 1, "", "erf"], [79, 3, 1, "", "exp"], [79, 3, 1, "", "expm1"], [79, 3, 1, "", "floor"], [79, 3, 1, "", "floor_divide"], [79, 3, 1, "", "greater"], [79, 3, 1, "", "greater_equal"], [79, 3, 1, "", "isfinite"], [79, 3, 1, "", "isinf"], [79, 3, 1, "", "isnan"], [79, 3, 1, "", "less"], [79, 3, 1, "", "less_equal"], [79, 3, 1, "", "log"], [79, 3, 1, "", "log10"], [79, 3, 1, "", "log1p"], [79, 3, 1, "", "log2"], [79, 3, 1, "", "logaddexp"], [79, 3, 1, "", "logical_and"], [79, 3, 1, "", "logical_not"], [79, 3, 1, "", "logical_or"], [79, 3, 1, "", "logical_xor"], [79, 3, 1, "", "multiply"], [79, 3, 1, "", "negative"], [79, 3, 1, "", "not_equal"], [79, 3, 1, "", "positive"], [79, 3, 1, "", "pow"], [79, 3, 1, "", "remainder"], [79, 3, 1, "", "round"], [79, 3, 1, "", "sign"], [79, 3, 1, "", "sin"], [79, 3, 1, "", "sinh"], [79, 3, 1, "", "sqrt"], [79, 3, 1, "", "square"], [79, 3, 1, "", "static_add"], [79, 3, 1, "", "static_divide"], [79, 3, 1, "", "static_multiply"], [79, 3, 1, "", "static_subtract"], [79, 3, 1, "", "static_tan"], [79, 3, 1, "", "static_tanh"], [79, 3, 1, "", "subtract"], [79, 3, 1, "", "tan"], [79, 3, 1, "", "tanh"], [79, 3, 1, "", "trunc"]], "ivy.container.general": [[81, 2, 1, "", "ContainerWithGeneral"]], "ivy.container.general.ContainerWithGeneral": [[81, 3, 1, "", "all_equal"], [81, 3, 1, "", "clip_vector_norm"], [81, 3, 1, "", "gather_nd"], [81, 3, 1, "", "static_all_equal"], [81, 3, 1, "", "static_gather_nd"]], "ivy.container.gradients": [[83, 2, 1, "", "ContainerWithGradients"]], "ivy.container.gradients.ContainerWithGradients": [[83, 3, 1, "", "adam_update"], [83, 3, 1, "", "gradient_descent_update"], [83, 3, 1, "", "lamb_update"], [83, 3, 1, "", "lars_update"], [83, 3, 1, "", "optimizer_update"], [83, 3, 1, "", "static_adam_update"], [83, 3, 1, "", "static_gradient_descent_update"], [83, 3, 1, "", "static_lamb_update"], [83, 3, 1, "", "static_lars_update"], [83, 3, 1, "", "static_optimizer_update"]], "ivy.container.image": [[85, 2, 1, "", "ContainerWithImage"]], "ivy.container.layers": [[87, 2, 1, "", "ContainerWithLayers"]], "ivy.container.linear_algebra": [[89, 2, 1, "", "ContainerWithLinearAlgebra"]], "ivy.container.linear_algebra.ContainerWithLinearAlgebra": [[89, 3, 1, "", "matmul"]], "ivy.container.losses": [[91, 2, 1, "", "ContainerWithLosses"]], "ivy.container.losses.ContainerWithLosses": [[91, 3, 1, "", "binary_cross_entropy"], [91, 3, 1, "", "cross_entropy"], [91, 3, 1, "", "sparse_cross_entropy"], [91, 3, 1, "", "static_binary_cross_entropy"], [91, 3, 1, "", "static_cross_entropy"], [91, 3, 1, "", "static_sparse_cross_entropy"]], "ivy.container.manipulation": [[93, 2, 1, "", "ContainerWithManipulation"]], "ivy.container.manipulation.ContainerWithManipulation": [[93, 3, 1, "", "clip"], [93, 3, 1, "", "concat"], [93, 3, 1, "", "constant_pad"], [93, 3, 1, "", "expand_dims"], [93, 3, 1, "", "flip"], [93, 3, 1, "", "permute_dims"], [93, 3, 1, "", "repeat"], [93, 3, 1, "", "reshape"], [93, 3, 1, "", "roll"], [93, 3, 1, "", "squeeze"], [93, 3, 1, "", "stack"], [93, 3, 1, "", "static_clip"], [93, 3, 1, "", "static_roll"], [93, 3, 1, "", "swapaxes"], [93, 3, 1, "", "tile"], [93, 3, 1, "", "zero_pad"]], "ivy.container.norms": [[95, 2, 1, "", "ContainerWithNorms"]], "ivy.container.norms.ContainerWithNorms": [[95, 3, 1, "", "layer_norm"]], "ivy.container.random": [[97, 2, 1, "", "ContainerWithRandom"]], "ivy.container.random.ContainerWithRandom": [[97, 3, 1, "", "random_uniform"], [97, 3, 1, "", "static_randint"], [97, 3, 1, "", "static_random_uniform"]], "ivy.container.searching": [[99, 2, 1, "", "ContainerWithSearching"]], "ivy.container.set": [[101, 2, 1, "", "ContainerWithSet"]], "ivy.container.sorting": [[103, 2, 1, "", "ContainerWithSorting"]], "ivy.container.sorting.ContainerWithSorting": [[103, 3, 1, "", "argsort"], [103, 3, 1, "", "sort"], [103, 3, 1, "", "static_argsort"], [103, 3, 1, "", "static_sort"]], "ivy.container.statistical": [[105, 2, 1, "", "ContainerWithStatistical"]], "ivy.container.statistical.ContainerWithStatistical": [[105, 3, 1, "", "einsum"], [105, 3, 1, "", "max"], [105, 3, 1, "", "mean"], [105, 3, 1, "", "min"], [105, 3, 1, "", "prod"], [105, 3, 1, "", "std"], [105, 3, 1, "", "sum"], [105, 3, 1, "", "var"]], "ivy.container.utility": [[107, 2, 1, "", "ContainerWithUtility"]], "ivy.container.utility.ContainerWithUtility": [[107, 3, 1, "", "all"], [107, 3, 1, "", "any"]], "ivy.container.wrapping": [[109, 1, 1, "", "add_ivy_container_instance_methods"]], "ivy.func_wrapper": [[189, 1, 1, "", "handle_nestable"], [190, 1, 1, "", "handle_out_argument"], [191, 1, 1, "", "infer_device"], [192, 1, 1, "", "infer_dtype"], [193, 1, 1, "", "inputs_to_ivy_arrays"], [194, 1, 1, "", "inputs_to_native_arrays"], [195, 1, 1, "", "outputs_to_ivy_arrays"], [196, 1, 1, "", "to_native_arrays_and_back"]], "ivy.functional.ivy": [[198, 0, 0, "-", "activations"], [206, 0, 0, "-", "compilation"], [208, 0, 0, "-", "constants"], [209, 0, 0, "-", "creation"], [228, 0, 0, "-", "data_type"], [265, 0, 0, "-", "device"], [315, 0, 0, "-", "elementwise"], [552, 0, 0, "-", "general"], [626, 0, 0, "-", "gradients"], [657, 0, 0, "-", "layers"], [670, 0, 0, "-", "linear_algebra"], [740, 0, 0, "-", "losses"], [756, 0, 0, "-", "manipulation"], [816, 0, 0, "-", "meta"], [820, 0, 0, "-", "nest"], [838, 0, 0, "-", "norms"], [843, 0, 0, "-", "random"], [855, 0, 0, "-", "searching"], [860, 0, 0, "-", "set"], [865, 0, 0, "-", "sorting"], [876, 0, 0, "-", "statistical"], [909, 0, 0, "-", "utility"]], "ivy.functional.ivy.activations": [[199, 1, 1, "", "gelu"], [200, 1, 1, "", "leaky_relu"], [201, 1, 1, "", "relu"], [202, 1, 1, "", "sigmoid"], [203, 1, 1, "", "softmax"], [204, 1, 1, "", "softplus"], [205, 1, 1, "", "tanh"]], "ivy.functional.ivy.compilation": [[207, 1, 1, "", "compile"]], "ivy.functional.ivy.constants": [[208, 5, 1, "", "e"], [208, 5, 1, "", "inf"], [208, 5, 1, "", "nan"], [208, 5, 1, "", "newaxis"], [208, 5, 1, "", "pi"]], "ivy.functional.ivy.creation": [[210, 1, 1, "", "arange"], [209, 1, 1, "", "array"], [211, 1, 1, "", "asarray"], [212, 1, 1, "", "empty"], [213, 1, 1, "", "empty_like"], [214, 1, 1, "", "eye"], [215, 1, 1, "", "from_dlpack"], [216, 1, 1, "", "full"], [217, 1, 1, "", "full_like"], [218, 1, 1, "", "linspace"], [219, 1, 1, "", "logspace"], [220, 1, 1, "", "meshgrid"], [221, 1, 1, "", "native_array"], [222, 1, 1, "", "ones"], [223, 1, 1, "", "ones_like"], [224, 1, 1, "", "tril"], [225, 1, 1, "", "triu"], [226, 1, 1, "", "zeros"], [227, 1, 1, "", "zeros_like"]], "ivy.functional.ivy.data_type": [[228, 2, 1, "", "DefaultDtype"], [228, 2, 1, "", "DefaultFloatDtype"], [228, 2, 1, "", "DefaultIntDtype"], [232, 1, 1, "", "as_ivy_dtype"], [233, 1, 1, "", "as_native_dtype"], [234, 1, 1, "", "astype"], [235, 1, 1, "", "broadcast_arrays"], [236, 1, 1, "", "broadcast_to"], [240, 1, 1, "", "can_cast"], [242, 1, 1, "", "closest_valid_dtype"], [243, 1, 1, "", "default_dtype"], [244, 1, 1, "", "default_float_dtype"], [245, 1, 1, "", "default_int_dtype"], [246, 1, 1, "", "dtype"], [247, 1, 1, "", "dtype_bits"], [248, 1, 1, "", "finfo"], [249, 1, 1, "", "function_supported_dtypes"], [250, 1, 1, "", "function_unsupported_dtypes"], [251, 1, 1, "", "iinfo"], [252, 1, 1, "", "invalid_dtype"], [253, 1, 1, "", "is_float_dtype"], [254, 1, 1, "", "is_int_dtype"], [255, 1, 1, "", "promote_types"], [256, 1, 1, "", "result_type"], [257, 1, 1, "", "set_default_dtype"], [258, 1, 1, "", "set_default_float_dtype"], [259, 1, 1, "", "set_default_int_dtype"], [260, 1, 1, "", "type_promote_arrays"], [261, 1, 1, "", "unset_default_dtype"], [262, 1, 1, "", "unset_default_float_dtype"], [263, 1, 1, "", "unset_default_int_dtype"], [264, 1, 1, "", "valid_dtype"]], "ivy.functional.ivy.data_type.DefaultDtype": [[228, 3, 1, "", "__init__"]], "ivy.functional.ivy.data_type.DefaultFloatDtype": [[228, 3, 1, "", "__init__"]], "ivy.functional.ivy.data_type.DefaultIntDtype": [[228, 3, 1, "", "__init__"]], "ivy.functional.ivy.device": [[265, 2, 1, "", "DefaultDevice"], [267, 2, 1, "", "DevClonedItem"], [268, 2, 1, "", "DevClonedIter"], [269, 2, 1, "", "DevClonedNest"], [270, 2, 1, "", "DevDistItem"], [271, 2, 1, "", "DevDistIter"], [272, 2, 1, "", "DevDistNest"], [265, 2, 1, "", "DevManager"], [274, 2, 1, "", "DevMapper"], [275, 2, 1, "", "DevMapperMultiProc"], [265, 2, 1, "", "MultiDev"], [277, 2, 1, "", "MultiDevItem"], [278, 2, 1, "", "MultiDevIter"], [279, 2, 1, "", "MultiDevNest"], [280, 2, 1, "", "Profiler"], [281, 1, 1, "", "as_ivy_dev"], [282, 1, 1, "", "as_native_dev"], [283, 1, 1, "", "clear_mem_on_dev"], [284, 1, 1, "", "default_device"], [285, 1, 1, "", "dev"], [286, 1, 1, "", "dev_clone"], [287, 1, 1, "", "dev_clone_array"], [288, 1, 1, "", "dev_clone_iter"], [289, 1, 1, "", "dev_clone_nest"], [290, 1, 1, "", "dev_dist"], [291, 1, 1, "", "dev_dist_array"], [292, 1, 1, "", "dev_dist_iter"], [293, 1, 1, "", "dev_dist_nest"], [294, 1, 1, "", "dev_unify"], [295, 1, 1, "", "dev_unify_array"], [296, 1, 1, "", "dev_unify_iter"], [297, 1, 1, "", "dev_unify_nest"], [298, 1, 1, "", "dev_util"], [299, 1, 1, "", "get_all_ivy_arrays_on_dev"], [300, 1, 1, "", "gpu_is_available"], [301, 1, 1, "", "num_cpu_cores"], [302, 1, 1, "", "num_gpus"], [303, 1, 1, "", "num_ivy_arrays_on_dev"], [304, 1, 1, "", "percent_used_mem_on_dev"], [305, 1, 1, "", "print_all_ivy_arrays_on_dev"], [306, 1, 1, "", "set_default_device"], [307, 1, 1, "", "set_split_factor"], [308, 1, 1, "", "split_factor"], [309, 1, 1, "", "split_func_call"], [310, 1, 1, "", "to_device"], [311, 1, 1, "", "total_mem_on_dev"], [312, 1, 1, "", "tpu_is_available"], [313, 1, 1, "", "unset_default_device"], [314, 1, 1, "", "used_mem_on_dev"]], "ivy.functional.ivy.device.DefaultDevice": [[265, 3, 1, "", "__enter__"], [265, 3, 1, "", "__init__"]], "ivy.functional.ivy.device.DevManager": [[265, 3, 1, "", "__init__"], [265, 3, 1, "", "da_tune_step"], [265, 4, 1, "", "dim_size"], [265, 3, 1, "", "ds_tune_step"], [265, 3, 1, "", "map"], [265, 3, 1, "", "repeated_config_check"], [265, 4, 1, "", "tune_step"], [265, 4, 1, "", "tuned"]], "ivy.functional.ivy.device.DevMapper": [[274, 3, 1, "", "__init__"], [274, 3, 1, "", "map"]], "ivy.functional.ivy.device.DevMapperMultiProc": [[275, 3, 1, "", "__init__"]], "ivy.functional.ivy.device.MultiDev": [[265, 3, 1, "", "__init__"]], "ivy.functional.ivy.device.MultiDevItem": [[277, 3, 1, "", "__init__"], [277, 3, 1, "", "items"], [277, 3, 1, "", "keys"], [277, 4, 1, "", "shape"], [277, 3, 1, "", "values"]], "ivy.functional.ivy.device.MultiDevIter": [[278, 3, 1, "", "__init__"], [278, 3, 1, "", "at_dev"], [278, 3, 1, "", "at_devs"]], "ivy.functional.ivy.device.MultiDevNest": [[279, 3, 1, "", "__init__"], [279, 3, 1, "", "at_dev"]], "ivy.functional.ivy.device.Profiler": [[280, 3, 1, "", "__init__"], [280, 3, 1, "", "start"], [280, 3, 1, "", "stop"]], "ivy.functional.ivy.elementwise": [[319, 1, 1, "", "abs"], [323, 1, 1, "", "acos"], [327, 1, 1, "", "acosh"], [331, 1, 1, "", "add"], [336, 1, 1, "", "asin"], [340, 1, 1, "", "asinh"], [344, 1, 1, "", "atan"], [348, 1, 1, "", "atan2"], [352, 1, 1, "", "atanh"], [356, 1, 1, "", "bitwise_and"], [360, 1, 1, "", "bitwise_invert"], [364, 1, 1, "", "bitwise_left_shift"], [368, 1, 1, "", "bitwise_or"], [372, 1, 1, "", "bitwise_right_shift"], [376, 1, 1, "", "bitwise_xor"], [380, 1, 1, "", "ceil"], [384, 1, 1, "", "cos"], [388, 1, 1, "", "cosh"], [392, 1, 1, "", "divide"], [397, 1, 1, "", "equal"], [401, 1, 1, "", "erf"], [405, 1, 1, "", "exp"], [409, 1, 1, "", "expm1"], [413, 1, 1, "", "floor"], [417, 1, 1, "", "floor_divide"], [421, 1, 1, "", "greater"], [425, 1, 1, "", "greater_equal"], [429, 1, 1, "", "isfinite"], [433, 1, 1, "", "isinf"], [437, 1, 1, "", "isnan"], [441, 1, 1, "", "less"], [445, 1, 1, "", "less_equal"], [449, 1, 1, "", "log"], [453, 1, 1, "", "log10"], [457, 1, 1, "", "log1p"], [461, 1, 1, "", "log2"], [465, 1, 1, "", "logaddexp"], [469, 1, 1, "", "logical_and"], [473, 1, 1, "", "logical_not"], [477, 1, 1, "", "logical_or"], [481, 1, 1, "", "logical_xor"], [482, 1, 1, "", "maximum"], [483, 1, 1, "", "minimum"], [487, 1, 1, "", "multiply"], [492, 1, 1, "", "negative"], [496, 1, 1, "", "not_equal"], [500, 1, 1, "", "positive"], [504, 1, 1, "", "pow"], [508, 1, 1, "", "remainder"], [512, 1, 1, "", "round"], [516, 1, 1, "", "sign"], [520, 1, 1, "", "sin"], [524, 1, 1, "", "sinh"], [528, 1, 1, "", "sqrt"], [532, 1, 1, "", "square"], [537, 1, 1, "", "subtract"], [542, 1, 1, "", "tan"], [547, 1, 1, "", "tanh"], [551, 1, 1, "", "trunc"]], "ivy.functional.ivy.general": [[556, 1, 1, "", "all_equal"], [558, 1, 1, "", "arg_info"], [559, 1, 1, "", "arg_names"], [560, 1, 1, "", "array_equal"], [561, 1, 1, "", "arrays_equal"], [562, 1, 1, "", "assert_supports_inplace"], [563, 1, 1, "", "cache_fn"], [564, 1, 1, "", "clip_matrix_norm"], [567, 1, 1, "", "clip_vector_norm"], [568, 1, 1, "", "container_types"], [569, 1, 1, "", "copy_array"], [570, 1, 1, "", "cumprod"], [571, 1, 1, "", "cumsum"], [572, 1, 1, "", "current_backend_str"], [573, 1, 1, "", "default"], [574, 1, 1, "", "einops_rearrange"], [575, 1, 1, "", "einops_reduce"], [576, 1, 1, "", "einops_repeat"], [577, 1, 1, "", "exists"], [578, 1, 1, "", "floormod"], [579, 1, 1, "", "fourier_encode"], [580, 1, 1, "", "gather"], [584, 1, 1, "", "gather_nd"], [586, 1, 1, "", "get_all_arrays_in_memory"], [587, 1, 1, "", "get_min_base"], [588, 1, 1, "", "get_min_denominator"], [589, 1, 1, "", "get_num_dims"], [590, 1, 1, "", "get_referrers_recursive"], [591, 1, 1, "", "has_nans"], [592, 1, 1, "", "indices_where"], [593, 1, 1, "", "inplace_arrays_supported"], [594, 1, 1, "", "inplace_decrement"], [595, 1, 1, "", "inplace_increment"], [596, 1, 1, "", "inplace_update"], [597, 1, 1, "", "inplace_variables_supported"], [598, 1, 1, "", "is_array"], [599, 1, 1, "", "is_ivy_array"], [600, 1, 1, "", "is_ivy_container"], [601, 1, 1, "", "is_native_array"], [602, 1, 1, "", "match_kwargs"], [603, 1, 1, "", "multiprocessing"], [604, 1, 1, "", "num_arrays_in_memory"], [605, 1, 1, "", "one_hot"], [606, 1, 1, "", "print_all_arrays_in_memory"], [607, 1, 1, "", "queue_timeout"], [608, 1, 1, "", "scatter_flat"], [609, 1, 1, "", "scatter_nd"], [610, 1, 1, "", "set_min_base"], [611, 1, 1, "", "set_min_denominator"], [612, 1, 1, "", "set_queue_timeout"], [613, 1, 1, "", "set_tmp_dir"], [614, 1, 1, "", "shape"], [615, 1, 1, "", "shape_to_tuple"], [616, 1, 1, "", "stable_divide"], [617, 1, 1, "", "stable_pow"], [618, 1, 1, "", "supports_inplace"], [619, 1, 1, "", "tmp_dir"], [620, 1, 1, "", "to_list"], [621, 1, 1, "", "to_numpy"], [622, 1, 1, "", "to_scalar"], [623, 1, 1, "", "try_else_none"], [624, 1, 1, "", "unstack"], [625, 1, 1, "", "value_is_nan"]], "ivy.functional.ivy.gradients": [[626, 2, 1, "", "GradientTracking"], [628, 1, 1, "", "adam_step"], [631, 1, 1, "", "adam_update"], [633, 1, 1, "", "execute_with_gradients"], [636, 1, 1, "", "gradient_descent_update"], [638, 1, 1, "", "is_variable"], [641, 1, 1, "", "lamb_update"], [645, 1, 1, "", "lars_update"], [649, 1, 1, "", "optimizer_update"], [651, 1, 1, "", "set_with_grads"], [652, 1, 1, "", "stop_gradient"], [653, 1, 1, "", "unset_with_grads"], [654, 1, 1, "", "variable"], [655, 1, 1, "", "variable_data"], [656, 1, 1, "", "with_grads"]], "ivy.functional.ivy.gradients.GradientTracking": [[626, 3, 1, "", "__init__"]], "ivy.functional.ivy.layers": [[658, 1, 1, "", "conv1d"], [659, 1, 1, "", "conv1d_transpose"], [660, 1, 1, "", "conv2d"], [661, 1, 1, "", "conv2d_transpose"], [662, 1, 1, "", "conv3d"], [663, 1, 1, "", "conv3d_transpose"], [664, 1, 1, "", "depthwise_conv2d"], [665, 1, 1, "", "dropout"], [666, 1, 1, "", "linear"], [667, 1, 1, "", "lstm_update"], [668, 1, 1, "", "multi_head_attention"], [669, 1, 1, "", "scaled_dot_product_attention"]], "ivy.functional.ivy.linear_algebra": [[673, 1, 1, "", "cholesky"], [676, 1, 1, "", "cross"], [679, 1, 1, "", "det"], [682, 1, 1, "", "diagonal"], [685, 1, 1, "", "eigh"], [688, 1, 1, "", "eigvalsh"], [691, 1, 1, "", "inv"], [695, 1, 1, "", "matmul"], [698, 1, 1, "", "matrix_norm"], [699, 1, 1, "", "matrix_power"], [702, 1, 1, "", "matrix_rank"], [705, 1, 1, "", "matrix_transpose"], [708, 1, 1, "", "outer"], [711, 1, 1, "", "pinv"], [714, 1, 1, "", "qr"], [715, 1, 1, "", "slogdet"], [718, 1, 1, "", "solve"], [721, 1, 1, "", "svd"], [724, 1, 1, "", "svdvals"], [727, 1, 1, "", "tensordot"], [730, 1, 1, "", "trace"], [733, 1, 1, "", "vecdot"], [736, 1, 1, "", "vector_norm"], [739, 1, 1, "", "vector_to_skew_symmetric_matrix"]], "ivy.functional.ivy.losses": [[744, 1, 1, "", "binary_cross_entropy"], [749, 1, 1, "", "cross_entropy"], [754, 1, 1, "", "sparse_cross_entropy"]], "ivy.functional.ivy.manipulation": [[760, 1, 1, "", "clip"], [765, 1, 1, "", "concat"], [769, 1, 1, "", "constant_pad"], [773, 1, 1, "", "expand_dims"], [777, 1, 1, "", "flip"], [781, 1, 1, "", "permute_dims"], [785, 1, 1, "", "repeat"], [789, 1, 1, "", "reshape"], [793, 1, 1, "", "roll"], [795, 1, 1, "", "split"], [799, 1, 1, "", "squeeze"], [803, 1, 1, "", "stack"], [807, 1, 1, "", "swapaxes"], [811, 1, 1, "", "tile"], [815, 1, 1, "", "zero_pad"]], "ivy.functional.ivy.meta": [[817, 1, 1, "", "fomaml_step"], [818, 1, 1, "", "maml_step"], [819, 1, 1, "", "reptile_step"]], "ivy.functional.ivy.nest": [[821, 1, 1, "", "all_nested_indices"], [822, 1, 1, "", "copy_nest"], [823, 1, 1, "", "index_nest"], [824, 1, 1, "", "insert_into_nest_at_index"], [825, 1, 1, "", "insert_into_nest_at_indices"], [826, 1, 1, "", "map"], [827, 1, 1, "", "map_nest_at_index"], [828, 1, 1, "", "map_nest_at_indices"], [829, 1, 1, "", "multi_index_nest"], [830, 1, 1, "", "nested_any"], [831, 1, 1, "", "nested_indices_where"], [832, 1, 1, "", "nested_map"], [833, 1, 1, "", "nested_multi_map"], [834, 1, 1, "", "prune_nest_at_index"], [835, 1, 1, "", "prune_nest_at_indices"], [836, 1, 1, "", "set_nest_at_index"], [837, 1, 1, "", "set_nest_at_indices"]], "ivy.functional.ivy.norms": [[842, 1, 1, "", "layer_norm"]], "ivy.functional.ivy.random": [[844, 1, 1, "", "multinomial"], [846, 1, 1, "", "randint"], [848, 1, 1, "", "random_normal"], [851, 1, 1, "", "random_uniform"], [853, 1, 1, "", "seed"], [854, 1, 1, "", "shuffle"]], "ivy.functional.ivy.searching": [[856, 1, 1, "", "argmax"], [857, 1, 1, "", "argmin"], [858, 1, 1, "", "nonzero"], [859, 1, 1, "", "where"]], "ivy.functional.ivy.set": [[861, 1, 1, "", "unique_all"], [862, 1, 1, "", "unique_counts"], [863, 1, 1, "", "unique_inverse"], [864, 1, 1, "", "unique_values"]], "ivy.functional.ivy.sorting": [[869, 1, 1, "", "argsort"], [874, 1, 1, "", "sort"]], "ivy.functional.ivy.statistical": [[880, 1, 1, "", "einsum"], [884, 1, 1, "", "max"], [888, 1, 1, "", "mean"], [892, 1, 1, "", "min"], [896, 1, 1, "", "prod"], [900, 1, 1, "", "std"], [904, 1, 1, "", "sum"], [908, 1, 1, "", "var"]], "ivy.functional.ivy.utility": [[913, 1, 1, "", "all"], [917, 1, 1, "", "any"]], "ivy.inspection": [[922, 1, 1, "", "add_array_specs"], [923, 1, 1, "", "fn_array_spec"]], "ivy.stateful": [[111, 0, 0, "-", "activations"], [114, 0, 0, "-", "converters"], [116, 0, 0, "-", "initializers"], [125, 0, 0, "-", "layers"], [137, 0, 0, "-", "module"], [139, 0, 0, "-", "norms"], [141, 0, 0, "-", "optimizers"], [147, 0, 0, "-", "sequential"]], "ivy.stateful.activations": [[112, 2, 1, "", "GEGLU"], [113, 2, 1, "", "GELU"]], "ivy.stateful.activations.GEGLU": [[112, 3, 1, "", "__init__"]], "ivy.stateful.activations.GELU": [[113, 3, 1, "", "__init__"]], "ivy.stateful.converters": [[115, 1, 1, "", "to_ivy_module"]], "ivy.stateful.initializers": [[116, 2, 1, "", "Constant"], [118, 2, 1, "", "FirstLayerSiren"], [119, 2, 1, "", "GlorotUniform"], [116, 2, 1, "", "KaimingNormal"], [121, 2, 1, "", "Ones"], [122, 2, 1, "", "Siren"], [116, 2, 1, "", "Uniform"], [124, 2, 1, "", "Zeros"]], "ivy.stateful.initializers.Constant": [[116, 3, 1, "", "__init__"], [116, 3, 1, "", "create_variables"]], "ivy.stateful.initializers.FirstLayerSiren": [[118, 3, 1, "", "__init__"]], "ivy.stateful.initializers.GlorotUniform": [[119, 3, 1, "", "__init__"]], "ivy.stateful.initializers.KaimingNormal": [[116, 3, 1, "", "__init__"], [116, 3, 1, "", "create_variables"]], "ivy.stateful.initializers.Ones": [[121, 3, 1, "", "__init__"]], "ivy.stateful.initializers.Siren": [[122, 3, 1, "", "__init__"]], "ivy.stateful.initializers.Uniform": [[116, 3, 1, "", "__init__"], [116, 3, 1, "", "create_variables"]], "ivy.stateful.initializers.Zeros": [[124, 3, 1, "", "__init__"]], "ivy.stateful.layers": [[126, 2, 1, "", "Conv1D"], [127, 2, 1, "", "Conv1DTranspose"], [128, 2, 1, "", "Conv2D"], [129, 2, 1, "", "Conv2DTranspose"], [130, 2, 1, "", "Conv3D"], [131, 2, 1, "", "Conv3DTranspose"], [132, 2, 1, "", "DepthwiseConv2D"], [133, 2, 1, "", "Dropout"], [134, 2, 1, "", "LSTM"], [135, 2, 1, "", "Linear"], [136, 2, 1, "", "MultiHeadAttention"]], "ivy.stateful.layers.Conv1D": [[126, 3, 1, "", "__init__"]], "ivy.stateful.layers.Conv1DTranspose": [[127, 3, 1, "", "__init__"]], "ivy.stateful.layers.Conv2D": [[128, 3, 1, "", "__init__"]], "ivy.stateful.layers.Conv2DTranspose": [[129, 3, 1, "", "__init__"]], "ivy.stateful.layers.Conv3D": [[130, 3, 1, "", "__init__"]], "ivy.stateful.layers.Conv3DTranspose": [[131, 3, 1, "", "__init__"]], "ivy.stateful.layers.DepthwiseConv2D": [[132, 3, 1, "", "__init__"]], "ivy.stateful.layers.Dropout": [[133, 3, 1, "", "__init__"]], "ivy.stateful.layers.LSTM": [[134, 3, 1, "", "__init__"], [134, 3, 1, "", "get_initial_state"]], "ivy.stateful.layers.Linear": [[135, 3, 1, "", "__init__"]], "ivy.stateful.layers.MultiHeadAttention": [[136, 3, 1, "", "__init__"]], "ivy.stateful.module": [[138, 2, 1, "", "Module"]], "ivy.stateful.module.Module": [[138, 3, 1, "", "__init__"], [138, 3, 1, "", "build"], [138, 4, 1, "", "build_mode"], [138, 4, 1, "", "built"], [138, 3, 1, "", "check_submod_rets"], [138, 3, 1, "", "get_mod_key"], [138, 3, 1, "", "mod_depth"], [138, 3, 1, "", "mod_height"], [138, 3, 1, "", "mod_with_top_mod_key_chain"], [138, 3, 1, "", "save_weights"], [138, 3, 1, "", "show_mod_in_top_mod"], [138, 3, 1, "", "show_structure"], [138, 3, 1, "", "show_v_in_top_v"], [138, 3, 1, "", "sub_mods"], [138, 3, 1, "", "track_submod_call_order"], [138, 3, 1, "", "track_submod_rets"], [138, 3, 1, "", "v_with_top_v_key_chains"]], "ivy.stateful.norms": [[140, 2, 1, "", "LayerNorm"]], "ivy.stateful.norms.LayerNorm": [[140, 3, 1, "", "__init__"]], "ivy.stateful.optimizers": [[142, 2, 1, "", "Adam"], [143, 2, 1, "", "LAMB"], [144, 2, 1, "", "LARS"], [145, 2, 1, "", "Optimizer"], [146, 2, 1, "", "SGD"]], "ivy.stateful.optimizers.Adam": [[142, 3, 1, "", "__init__"], [142, 3, 1, "", "set_state"], [142, 4, 1, "", "state"]], "ivy.stateful.optimizers.LAMB": [[143, 3, 1, "", "__init__"], [143, 3, 1, "", "set_state"], [143, 4, 1, "", "state"]], "ivy.stateful.optimizers.LARS": [[144, 3, 1, "", "__init__"], [144, 3, 1, "", "set_state"], [144, 4, 1, "", "state"]], "ivy.stateful.optimizers.Optimizer": [[145, 3, 1, "", "__init__"], [145, 3, 1, "", "set_state"], [145, 3, 1, "", "step"]], "ivy.stateful.optimizers.SGD": [[146, 3, 1, "", "__init__"], [146, 3, 1, "", "set_state"], [146, 4, 1, "", "state"]], "ivy.stateful.sequential": [[148, 2, 1, "", "Sequential"]], "ivy.stateful.sequential.Sequential": [[148, 3, 1, "", "__init__"]], "ivy.verbosity": [[927, 1, 1, "", "cprint"]]}, "objtypes": {"0": "py:module", "1": "py:function", "2": "py:class", "3": "py:method", "4": "py:property", "5": "py:data"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "function", "Python function"], "2": ["py", "class", "Python class"], "3": ["py", "method", "Python method"], "4": ["py", "property", "Python property"], "5": ["py", "data", "Python data"]}, "titleterms": {"backend": [0, 155, 161, 170, 187], "handler": [0, 170], "choose_random_backend": 2, "clear_backend_stack": 3, "current_backend": 4, "get_backend": 5, "set_backend": 6, "try_import_ivy_jax": 7, "try_import_ivy_mxnet": 8, "try_import_ivy_numpi": 9, "try_import_ivy_tf": 10, "try_import_ivy_torch": 11, "unset_backend": 12, "background": [13, 918], "ml": 14, "explos": 14, "standard": 15, "skeptic": 15, "complimentari": 15, "vs": [15, 187], "competit": 15, "do": 15, "work": [15, 153], "The": [15, 151, 172, 187], "arrai": [15, 18, 158, 163, 168, 172, 238, 317, 321, 325, 329, 334, 338, 342, 346, 350, 354, 358, 362, 366, 370, 374, 378, 382, 386, 390, 395, 399, 403, 407, 411, 415, 419, 423, 427, 431, 435, 439, 443, 447, 451, 455, 459, 463, 467, 471, 475, 479, 485, 490, 494, 498, 502, 506, 510, 514, 518, 522, 526, 530, 535, 540, 545, 549, 554, 582, 672, 675, 678, 681, 684, 687, 690, 693, 697, 701, 704, 707, 710, 713, 717, 720, 723, 726, 729, 732, 735, 738, 742, 747, 752, 758, 763, 767, 771, 775, 779, 783, 787, 791, 797, 801, 805, 809, 813, 840, 867, 872, 878, 882, 886, 890, 894, 898, 902, 906, 911, 915], "api": [15, 152, 155, 158, 164, 170, 172, 174, 175], "why": 16, "unifi": [16, 172], "No": [16, 150], "more": 16, "re": 16, "implement": 16, "infinit": 16, "shelf": 16, "life": 16, "data": [17, 28, 74, 159, 165, 173, 187, 228, 860, 861, 862, 864], "class": [17, 110, 172], "activ": [19, 65, 111, 198], "arraywithactiv": 20, "convers": 21, "args_to_ivi": 22, "args_to_n": 23, "to_ivi": 24, "to_n": 25, "creation": [26, 72, 209], "arraywithcr": 27, "type": [28, 74, 160, 165, 187, 228], "arraywithdatatyp": 29, "devic": [30, 76, 166, 168, 265], "arraywithdevic": 31, "elementwis": [32, 78, 315], "arraywithelementwis": 33, "gener": [34, 80, 159, 552], "arraywithgener": 35, "gradient": [36, 82, 626], "arraywithgradi": 37, "imag": [38, 84], "arraywithimag": 39, "layer": [40, 86, 125, 657], "arraywithlay": 41, "linear": [42, 88, 135, 666, 670], "algebra": [42, 88, 670], "arraywithlinearalgebra": 43, "loss": [44, 90, 740], "arraywithloss": 45, "manipul": [46, 92, 756], "arraywithmanipul": 47, "norm": [48, 94, 139, 838], "arraywithnorm": 49, "random": [50, 96, 843], "arraywithrandom": 51, "search": [52, 98, 855], "arraywithsearch": 53, "set": [54, 100, 150, 161, 860], "arraywithset": 55, "sort": [56, 102, 865, 871, 872, 873, 874], "arraywithsort": 57, "statist": [58, 104, 876], "arraywithstatist": 59, "util": [60, 106, 909], "arraywithutil": 61, "wrap": [62, 108, 162], "add_ivy_array_instance_method": 63, "contain": [64, 69, 70, 164, 173, 239, 241, 318, 322, 326, 330, 332, 335, 339, 343, 347, 351, 355, 359, 363, 367, 371, 375, 379, 383, 387, 391, 393, 396, 400, 404, 408, 412, 416, 420, 424, 428, 432, 436, 440, 444, 448, 452, 456, 460, 464, 468, 472, 476, 480, 486, 488, 491, 495, 499, 503, 507, 511, 515, 519, 523, 527, 531, 534, 536, 539, 541, 544, 546, 550, 555, 557, 566, 583, 585, 630, 632, 635, 637, 640, 642, 644, 646, 648, 650, 694, 743, 745, 748, 750, 753, 755, 759, 761, 764, 768, 772, 776, 780, 784, 788, 792, 794, 798, 802, 806, 810, 814, 841, 847, 850, 852, 868, 870, 873, 875, 879, 883, 887, 891, 895, 899, 903, 907, 912, 916], "containerwithactiv": 66, "base": 67, "containerbas": 68, "multidevcontain": 71, "containerwithcr": 73, "containerwithdatatyp": 75, "containerwithdevic": 77, "containerwithelementwis": 79, "containerwithgener": 81, "containerwithgradi": 83, "containerwithimag": 85, "containerwithlay": 87, "containerwithlinearalgebra": 89, "containerwithloss": 91, "containerwithmanipul": 93, "containerwithnorm": 95, "containerwithrandom": 97, "containerwithsearch": 99, "containerwithset": 101, "containerwithsort": 103, "containerwithstatist": 105, "containerwithutil": 107, "add_ivy_container_instance_method": 109, "framework": [110, 170, 171], "geglu": 112, "gelu": [113, 199], "convert": [114, 175], "to_ivy_modul": 115, "initi": [116, 174], "firstlayersiren": 118, "glorotuniform": 119, "Ones": 121, "siren": 122, "zero": [124, 226], "conv1d": [126, 658], "conv1dtranspos": 127, "conv2d": [128, 660], "conv2dtranspos": 129, "conv3d": [130, 662], "conv3dtranspos": 131, "depthwiseconv2d": 132, "dropout": [133, 665], "lstm": 134, "multiheadattent": 136, "modul": [137, 138, 165, 166, 174], "layernorm": 140, "optim": [141, 145, 174], "adam": 142, "lamb": 143, "lar": 144, "sgd": 146, "sequenti": [147, 148], "contribut": [149, 918], "up": 150, "clone": 150, "ivi": [150, 155, 157, 159, 163, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 186, 238, 239, 240, 241, 317, 318, 319, 321, 322, 323, 325, 326, 327, 329, 330, 331, 332, 334, 335, 336, 338, 339, 340, 342, 343, 344, 346, 347, 348, 350, 351, 352, 354, 355, 356, 358, 359, 360, 362, 363, 364, 366, 367, 368, 370, 371, 372, 374, 375, 376, 378, 379, 380, 382, 383, 384, 386, 387, 388, 390, 391, 392, 393, 395, 396, 397, 399, 400, 401, 403, 404, 405, 407, 408, 409, 411, 412, 413, 415, 416, 417, 419, 420, 421, 423, 424, 425, 427, 428, 429, 431, 432, 433, 435, 436, 437, 439, 440, 441, 443, 444, 445, 447, 448, 449, 451, 452, 453, 455, 456, 457, 459, 460, 461, 463, 464, 465, 467, 468, 469, 471, 472, 473, 475, 476, 477, 479, 480, 481, 485, 486, 487, 488, 490, 491, 492, 494, 495, 496, 498, 499, 500, 502, 503, 504, 506, 507, 508, 510, 511, 512, 514, 515, 516, 518, 519, 520, 522, 523, 524, 526, 527, 528, 530, 531, 532, 534, 535, 536, 537, 539, 540, 541, 542, 544, 545, 546, 547, 549, 550, 551, 554, 555, 556, 557, 566, 567, 582, 583, 584, 585, 630, 631, 632, 635, 636, 637, 640, 641, 642, 644, 645, 646, 648, 649, 650, 672, 673, 675, 676, 678, 679, 681, 682, 684, 685, 687, 688, 690, 691, 693, 694, 695, 697, 698, 701, 702, 704, 705, 707, 708, 710, 711, 713, 714, 717, 718, 720, 721, 723, 724, 726, 727, 729, 730, 732, 733, 735, 736, 738, 739, 742, 743, 744, 745, 747, 748, 749, 750, 752, 753, 754, 755, 758, 759, 760, 761, 763, 764, 765, 767, 768, 769, 771, 772, 773, 775, 776, 777, 779, 780, 781, 783, 784, 785, 787, 788, 789, 791, 792, 793, 794, 797, 798, 799, 801, 802, 803, 805, 806, 807, 809, 810, 811, 813, 814, 815, 840, 841, 842, 846, 847, 850, 851, 852, 867, 868, 869, 870, 872, 873, 874, 875, 878, 879, 880, 882, 883, 884, 886, 887, 888, 890, 891, 892, 894, 895, 896, 898, 899, 900, 902, 903, 904, 906, 907, 908, 911, 912, 913, 915, 916, 917], "pycharm": 150, "virtual": 150, "environ": 150, "docker": [150, 151, 153], "us": [150, 153, 173], "miniconda": [150, 153], "venv": [150, 153], "interpret": 150, "window": 150, "maco": 150, "ubuntu": 150, "github": 150, "codespac": 150, "pre": 150, "commit": [150, 151], "basic": 151, "get": 151, "help": 151, "todo": 151, "list": 151, "issu": 151, "manag": 151, "your": 151, "fork": 151, "who": 151, "To": 151, "ask": 151, "With": 151, "command": 151, "line": 151, "browser": 151, "pull": 151, "request": 151, "small": 151, "often": 151, "run": 151, "test": [151, 158, 159], "local": 151, "open": 152, "task": 152, "function": [152, 160, 162, 164, 165, 166, 168, 170, 175, 187], "format": 152, "frontend": [152, 175], "build": [153, 170], "doc": 153, "dockerless": 153, "document": 153, "pipelin": [153, 187], "make_doc": 153, "sh": 153, "entrypoint": 153, "_make_doc": 153, "generate_src_rst_fil": 153, "py": 153, "sphinx": 153, "correct_built_html_fil": 153, "remove_fil": 153, "deep": 154, "dive": 154, "navig": 155, "code": 155, "categor": 155, "submodul": 155, "design": [155, 169, 918], "docstr": [156, 157], "exampl": [157, 168], "tan": [157, 538, 540, 541, 542], "roll": [157, 790, 791, 792, 793], "add": [157, 328, 329, 330, 331], "hypothesi": 159, "self": 159, "consist": 159, "explicit": 159, "test_array_funct": 159, "primari": 160, "composit": 160, "mix": 160, "standalon": 160, "nestabl": [160, 164, 168], "conveni": 160, "nativ": 163, "handl": 163, "instanc": [164, 172], "method": [164, 172, 173], "static": 164, "special": 164, "argument": [165, 166, 167, 168], "other": [165, 166], "inplac": 167, "updat": 167, "out": [167, 168], "copi": 167, "dtype": [168, 246], "number": 168, "oper": [168, 172, 187], "integ": 168, "sequenc": 168, "block": 170, "graph": [170, 175], "compil": [170, 175, 206, 207], "monkei": 172, "patch": 172, "construct": 173, "represent": 173, "recurs": 173, "built": 173, "ins": 173, "access": 173, "save": 173, "load": 173, "comparison": 173, "custom": [173, 187], "case": 173, "compartment": 173, "configur": 173, "network": [173, 175], "weight": 173, "state": [174, 187], "transpil": 175, "role": 175, "model": [175, 182, 187], "builder": 177, "ecosystem": 178, "gym": [179, 186], "mech": 180, "memori": [181, 186], "robot": [183, 186], "vision": [184, 186], "extens": [185, 918], "appli": 186, "librari": 186, "mechan": 186, "faq": 187, "maintain": 187, "version": 187, "dynam": 187, "size": 187, "shape": [187, 614, 860, 861, 862, 864], "check": 187, "control": 187, "flow": 187, "auto": 187, "differenti": 187, "replica": 187, "parallel": 187, "support": 187, "altern": 187, "structur": 187, "func": 188, "wrapper": 188, "handle_nest": 189, "handle_out_argu": 190, "infer_devic": 191, "infer_dtyp": 192, "inputs_to_ivy_arrai": 193, "inputs_to_native_arrai": 194, "outputs_to_ivy_arrai": 195, "to_native_arrays_and_back": 196, "leaky_relu": 200, "relu": 201, "sigmoid": 202, "softmax": 203, "softplu": 204, "tanh": [205, 543, 545, 546, 547], "constant": 208, "note": [209, 215], "arang": 210, "asarrai": 211, "empti": 212, "empty_lik": 213, "ey": 214, "from_dlpack": 215, "full": 216, "full_lik": 217, "linspac": 218, "logspac": 219, "meshgrid": 220, "native_arrai": 221, "ones": 222, "ones_lik": 223, "tril": 224, "triu": 225, "zeros_lik": 227, "as_ivy_dtyp": 232, "as_native_dtyp": 233, "astyp": 234, "broadcast_arrai": 235, "broadcast_to": 236, "can_cast": [237, 238, 239, 240], "static_can_cast": 241, "closest_valid_dtyp": 242, "default_dtyp": 243, "default_float_dtyp": 244, "default_int_dtyp": 245, "dtype_bit": 247, "finfo": 248, "function_supported_dtyp": 249, "function_unsupported_dtyp": 250, "iinfo": 251, "invalid_dtyp": 252, "is_float_dtyp": 253, "is_int_dtyp": 254, "promote_typ": 255, "result_typ": 256, "set_default_dtyp": 257, "set_default_float_dtyp": 258, "set_default_int_dtyp": 259, "type_promote_arrai": 260, "unset_default_dtyp": 261, "unset_default_float_dtyp": 262, "unset_default_int_dtyp": 263, "valid_dtyp": 264, "devcloneditem": 267, "devclonedit": 268, "devclonednest": 269, "devdistitem": 270, "devdistit": 271, "devdistnest": 272, "devmapp": 274, "devmappermultiproc": 275, "multidevitem": 277, "multidevit": 278, "multidevnest": 279, "profil": 280, "as_ivy_dev": 281, "as_native_dev": 282, "clear_mem_on_dev": 283, "default_devic": 284, "dev": 285, "dev_clon": 286, "dev_clone_arrai": 287, "dev_clone_it": 288, "dev_clone_nest": 289, "dev_dist": 290, "dev_dist_arrai": 291, "dev_dist_it": 292, "dev_dist_nest": 293, "dev_unifi": 294, "dev_unify_arrai": 295, "dev_unify_it": 296, "dev_unify_nest": 297, "dev_util": 298, "get_all_ivy_arrays_on_dev": 299, "gpu_is_avail": 300, "num_cpu_cor": 301, "num_gpu": 302, "num_ivy_arrays_on_dev": 303, "percent_used_mem_on_dev": 304, "print_all_ivy_arrays_on_dev": 305, "set_default_devic": 306, "set_split_factor": 307, "split_factor": 308, "split_func_cal": 309, "to_devic": 310, "total_mem_on_dev": 311, "tpu_is_avail": 312, "unset_default_devic": 313, "used_mem_on_dev": 314, "ab": [316, 317, 318, 319], "aco": [320, 321, 322, 323], "acosh": [324, 325, 326, 327], "static_add": 332, "asin": [333, 334, 335, 336], "asinh": [337, 338, 339, 340], "atan": [341, 342, 343, 344], "atan2": [345, 346, 347, 348], "atanh": [349, 350, 351, 352], "bitwise_and": [353, 354, 355, 356], "bitwise_invert": [357, 358, 359, 360], "bitwise_left_shift": [361, 362, 363, 364], "bitwise_or": [365, 366, 367, 368], "bitwise_right_shift": [369, 370, 371, 372], "bitwise_xor": [373, 374, 375, 376], "ceil": [377, 378, 379, 380], "co": [381, 382, 383, 384], "cosh": [385, 386, 387, 388], "divid": [389, 390, 391, 392], "static_divid": 393, "equal": [394, 395, 396, 397], "erf": [398, 399, 400, 401], "exp": [402, 403, 404, 405], "expm1": [406, 407, 408, 409], "floor": [410, 411, 412, 413], "floor_divid": [414, 415, 416, 417], "greater": [418, 419, 420, 421], "greater_equ": [422, 423, 424, 425], "isfinit": [426, 427, 428, 429], "isinf": [430, 431, 432, 433], "isnan": [434, 435, 436, 437], "less": [438, 439, 440, 441], "less_equ": [442, 443, 444, 445], "log": [446, 447, 448, 449], "log10": [450, 451, 452, 453], "log1p": [454, 455, 456, 457], "log2": [458, 459, 460, 461], "logaddexp": [462, 463, 464, 465], "logical_and": [466, 467, 468, 469], "logical_not": [470, 471, 472, 473], "logical_or": [474, 475, 476, 477], "logical_xor": [478, 479, 480, 481], "maximum": 482, "minimum": 483, "multipli": [484, 485, 486, 487], "static_multipli": 488, "neg": [489, 490, 491, 492], "not_equ": [493, 494, 495, 496], "posit": [497, 498, 499, 500], "pow": [501, 502, 503, 504], "remaind": [505, 506, 507, 508], "round": [509, 510, 511, 512], "sign": [513, 514, 515, 516], "sin": [517, 518, 519, 520], "sinh": [521, 522, 523, 524], "sqrt": [525, 526, 527, 528], "squar": [529, 530, 531, 532], "subtract": [533, 535, 536, 537], "static_subtract": 534, "static_tan": 539, "static_tanh": 544, "trunc": [548, 549, 550, 551], "all_equ": [553, 554, 555, 556], "static_all_equ": 557, "arg_info": 558, "arg_nam": 559, "array_equ": 560, "arrays_equ": 561, "assert_supports_inplac": 562, "cache_fn": 563, "clip_matrix_norm": 564, "clip_vector_norm": [565, 566, 567], "container_typ": 568, "copy_arrai": 569, "cumprod": 570, "cumsum": 571, "current_backend_str": 572, "default": 573, "einops_rearrang": 574, "einops_reduc": 575, "einops_repeat": 576, "exist": 577, "floormod": 578, "fourier_encod": 579, "gather": 580, "gather_nd": [581, 582, 583, 584], "static_gather_nd": 585, "get_all_arrays_in_memori": 586, "get_min_bas": 587, "get_min_denomin": 588, "get_num_dim": 589, "get_referrers_recurs": 590, "has_nan": 591, "indices_wher": 592, "inplace_arrays_support": 593, "inplace_decr": 594, "inplace_incr": 595, "inplace_upd": 596, "inplace_variables_support": 597, "is_arrai": 598, "is_ivy_arrai": 599, "is_ivy_contain": 600, "is_native_arrai": 601, "match_kwarg": 602, "multiprocess": 603, "num_arrays_in_memori": 604, "one_hot": 605, "print_all_arrays_in_memori": 606, "queue_timeout": 607, "scatter_flat": 608, "scatter_nd": 609, "set_min_bas": 610, "set_min_denomin": 611, "set_queue_timeout": 612, "set_tmp_dir": 613, "shape_to_tupl": 615, "stable_divid": 616, "stable_pow": 617, "supports_inplac": 618, "tmp_dir": 619, "to_list": 620, "to_numpi": 621, "to_scalar": 622, "try_else_non": 623, "unstack": 624, "value_is_nan": 625, "adam_step": 628, "adam_upd": [629, 630, 631], "static_adam_upd": 632, "execute_with_gradi": 633, "gradient_descent_upd": [634, 635, 636], "static_gradient_descent_upd": 637, "is_vari": 638, "lamb_upd": [639, 640, 641], "static_lamb_upd": 642, "lars_upd": [643, 644, 645], "static_lars_upd": 646, "optimizer_upd": [647, 648, 649], "static_optimizer_upd": 650, "set_with_grad": 651, "stop_gradi": 652, "unset_with_grad": 653, "variabl": 654, "variable_data": 655, "with_grad": 656, "conv1d_transpos": 659, "conv2d_transpos": 661, "conv3d_transpos": 663, "depthwise_conv2d": 664, "lstm_updat": 667, "multi_head_attent": 668, "scaled_dot_product_attent": 669, "choleski": [671, 672, 673], "cross": [674, 675, 676], "det": [677, 678, 679], "diagon": [680, 681, 682], "eigh": [683, 684, 685], "eigvalsh": [686, 687, 688], "inv": [689, 690, 691], "matmul": [692, 693, 694, 695], "matrix_norm": [696, 697, 698], "matrix_pow": 699, "matrix_rank": [700, 701, 702], "matrix_transpos": [703, 704, 705], "outer": [706, 707, 708], "pinv": [709, 710, 711], "qr": [712, 713, 714], "slogdet": 715, "solv": [716, 717, 718], "svd": [719, 720, 721], "svdval": [722, 723, 724], "tensordot": [725, 726, 727], "trace": [728, 729, 730], "vecdot": [731, 732, 733], "vector_norm": [734, 735, 736], "vector_to_skew_symmetric_matrix": [737, 738, 739], "binary_cross_entropi": [741, 742, 743, 744], "static_binary_cross_entropi": 745, "cross_entropi": [746, 747, 748, 749], "static_cross_entropi": 750, "sparse_cross_entropi": [751, 752, 753, 754], "static_sparse_cross_entropi": 755, "clip": [757, 758, 759, 760], "static_clip": 761, "concat": [762, 763, 764, 765], "constant_pad": [766, 767, 768, 769], "expand_dim": [770, 771, 772, 773], "flip": [774, 775, 776, 777], "permute_dim": [778, 779, 780, 781], "repeat": [782, 783, 784, 785], "reshap": [786, 787, 788, 789], "static_rol": 794, "split": 795, "squeez": [796, 797, 798, 799], "stack": [800, 801, 802, 803], "swapax": [804, 805, 806, 807], "tile": [808, 809, 810, 811], "zero_pad": [812, 813, 814, 815], "meta": 816, "fomaml_step": 817, "maml_step": 818, "reptile_step": 819, "nest": 820, "all_nested_indic": 821, "copy_nest": 822, "index_nest": 823, "insert_into_nest_at_index": 824, "insert_into_nest_at_indic": 825, "map": 826, "map_nest_at_index": 827, "map_nest_at_indic": 828, "multi_index_nest": 829, "nested_ani": 830, "nested_indices_wher": 831, "nested_map": 832, "nested_multi_map": 833, "prune_nest_at_index": 834, "prune_nest_at_indic": 835, "set_nest_at_index": 836, "set_nest_at_indic": 837, "layer_norm": [839, 840, 841, 842], "multinomi": 844, "randint": [845, 846], "static_randint": 847, "random_norm": 848, "random_uniform": [849, 850, 851], "static_random_uniform": 852, "seed": 853, "shuffl": 854, "argmax": 856, "argmin": 857, "nonzero": 858, "where": 859, "depend": [860, 861, 862, 864], "output": [860, 861, 862, 864], "unique_al": 861, "unique_count": 862, "unique_invers": 863, "unique_valu": 864, "argsort": [866, 867, 868, 869], "static_argsort": 870, "static_sort": 875, "einsum": [877, 878, 879, 880], "max": [881, 882, 883, 884], "mean": [885, 886, 887, 888], "min": [889, 890, 891, 892], "prod": [893, 894, 895, 896], "std": [897, 898, 899, 900], "sum": [901, 902, 903, 904], "var": [905, 906, 907, 908], "all": [910, 911, 912, 913], "ani": [914, 915, 916, 917], "content": 918, "overview": 918, "quick": 918, "start": 918, "roadmap": [918, 924], "citat": 918, "inspect": 921, "add_array_spec": 922, "fn_array_spec": 923, "verbos": 926, "cprint": 927}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 6, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.viewcode": 1, "sphinx": 56}})