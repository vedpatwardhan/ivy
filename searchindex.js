Search.setIndex({"docnames": ["array/activations", "array/activations/ArrayWithActivations", "array/array_methods", "array/array_methods/abs", "array/array_methods/acos", "array/array_methods/acosh", "array/array_methods/add", "array/array_methods/all", "array/array_methods/all_equal", "array/array_methods/any", "array/array_methods/argsort", "array/array_methods/asin", "array/array_methods/asinh", "array/array_methods/atan", "array/array_methods/atan2", "array/array_methods/atanh", "array/array_methods/binary_cross_entropy", "array/array_methods/bitwise_and", "array/array_methods/bitwise_invert", "array/array_methods/bitwise_left_shift", "array/array_methods/bitwise_or", "array/array_methods/bitwise_right_shift", "array/array_methods/bitwise_xor", "array/array_methods/can_cast", "array/array_methods/ceil", "array/array_methods/cholesky", "array/array_methods/clip", "array/array_methods/concat", "array/array_methods/constant_pad", "array/array_methods/cos", "array/array_methods/cosh", "array/array_methods/cross", "array/array_methods/cross_entropy", "array/array_methods/det", "array/array_methods/diagonal", "array/array_methods/divide", "array/array_methods/eigh", "array/array_methods/eigvalsh", "array/array_methods/einsum", "array/array_methods/equal", "array/array_methods/erf", "array/array_methods/exp", "array/array_methods/expand_dims", "array/array_methods/expm1", "array/array_methods/flip", "array/array_methods/floor", "array/array_methods/floor_divide", "array/array_methods/gather_nd", "array/array_methods/greater", "array/array_methods/greater_equal", "array/array_methods/inv", "array/array_methods/isfinite", "array/array_methods/isinf", "array/array_methods/isnan", "array/array_methods/layer_norm", "array/array_methods/less", "array/array_methods/less_equal", "array/array_methods/log", "array/array_methods/log10", "array/array_methods/log1p", "array/array_methods/log2", "array/array_methods/logaddexp", "array/array_methods/logical_and", "array/array_methods/logical_not", "array/array_methods/logical_or", "array/array_methods/logical_xor", "array/array_methods/matmul", "array/array_methods/matrix_norm", "array/array_methods/matrix_rank", "array/array_methods/matrix_transpose", "array/array_methods/max", "array/array_methods/mean", "array/array_methods/min", "array/array_methods/multiply", "array/array_methods/negative", "array/array_methods/not_equal", "array/array_methods/outer", "array/array_methods/permute_dims", "array/array_methods/pinv", "array/array_methods/positive", "array/array_methods/pow", "array/array_methods/prod", "array/array_methods/qr", "array/array_methods/remainder", "array/array_methods/repeat", "array/array_methods/reshape", "array/array_methods/roll", "array/array_methods/round", "array/array_methods/sign", "array/array_methods/sin", "array/array_methods/sinh", "array/array_methods/solve", "array/array_methods/sort", "array/array_methods/sparse_cross_entropy", "array/array_methods/sqrt", "array/array_methods/square", "array/array_methods/squeeze", "array/array_methods/stack", "array/array_methods/std", "array/array_methods/subtract", "array/array_methods/sum", "array/array_methods/svd", "array/array_methods/svdvals", "array/array_methods/swapaxes", "array/array_methods/tan", "array/array_methods/tanh", "array/array_methods/tensordot", "array/array_methods/tile", "array/array_methods/trace", "array/array_methods/trunc", "array/array_methods/var", "array/array_methods/vecdot", "array/array_methods/vector_norm", "array/array_methods/vector_to_skew_symmetric_matrix", "array/array_methods/zero_pad", "array/conversions", "array/conversions/args_to_ivy", "array/conversions/args_to_native", "array/conversions/to_ivy", "array/conversions/to_native", "array/creation", "array/creation/ArrayWithCreation", "array/data_type", "array/data_type/ArrayWithDataTypes", "array/device", "array/device/ArrayWithDevice", "array/elementwise", "array/elementwise/ArrayWithElementwise", "array/general", "array/general/ArrayWithGeneral", "array/gradients", "array/gradients/ArrayWithGradients", "array/image", "array/image/ArrayWithImage", "array/layers", "array/layers/ArrayWithLayers", "array/linear_algebra", "array/linear_algebra/ArrayWithLinearAlgebra", "array/losses", "array/losses/ArrayWithLosses", "array/manipulation", "array/manipulation/ArrayWithManipulation", "array/norms", "array/norms/ArrayWithNorms", "array/random", "array/random/ArrayWithRandom", "array/searching", "array/searching/ArrayWithSearching", "array/set", "array/set/ArrayWithSet", "array/sorting", "array/sorting/ArrayWithSorting", "array/statistical", "array/statistical/ArrayWithStatistical", "array/utility", "array/utility/ArrayWithUtility", "array/wrapping", "array/wrapping/add_ivy_array_instance_methods", "backend_handler", "backend_handler/ContextManager:\n    def __init__", "backend_handler/choose_random_backend", "backend_handler/clear_backend_stack", "backend_handler/current_backend", "backend_handler/get_backend", "backend_handler/set_backend", "backend_handler/try_import_ivy_jax", "backend_handler/try_import_ivy_mxnet", "backend_handler/try_import_ivy_numpy", "backend_handler/try_import_ivy_tf", "backend_handler/try_import_ivy_torch", "backend_handler/unset_backend", "background", "background/ml_explosion", "background/standardization", "background/why_unify", "container/activations", "container/activations/ContainerWithActivations", "container/base", "container/base/ContainerBase", "container/container", "container/container/Container", "container/container/MultiDevContainer", "container/container_methods", "container/container_methods/abs", "container/container_methods/acos", "container/container_methods/acosh", "container/container_methods/adam_update", "container/container_methods/add", "container/container_methods/all", "container/container_methods/all_equal", "container/container_methods/any", "container/container_methods/argsort", "container/container_methods/asin", "container/container_methods/asinh", "container/container_methods/at_dev", "container/container_methods/at_devs", "container/container_methods/atan", "container/container_methods/atan2", "container/container_methods/atanh", "container/container_methods/binary_cross_entropy", "container/container_methods/bitwise_and", "container/container_methods/bitwise_invert", "container/container_methods/bitwise_left_shift", "container/container_methods/bitwise_or", "container/container_methods/bitwise_right_shift", "container/container_methods/bitwise_xor", "container/container_methods/can_cast", "container/container_methods/ceil", "container/container_methods/clip", "container/container_methods/clip_vector_norm", "container/container_methods/concat", "container/container_methods/constant_pad", "container/container_methods/cos", "container/container_methods/cosh", "container/container_methods/cross_entropy", "container/container_methods/divide", "container/container_methods/einsum", "container/container_methods/equal", "container/container_methods/erf", "container/container_methods/exp", "container/container_methods/expand_dims", "container/container_methods/expm1", "container/container_methods/flip", "container/container_methods/floor", "container/container_methods/floor_divide", "container/container_methods/gather_nd", "container/container_methods/gradient_descent_update", "container/container_methods/greater", "container/container_methods/greater_equal", "container/container_methods/isfinite", "container/container_methods/isinf", "container/container_methods/isnan", "container/container_methods/lamb_update", "container/container_methods/lars_update", "container/container_methods/layer_norm", "container/container_methods/less", "container/container_methods/less_equal", "container/container_methods/log", "container/container_methods/log10", "container/container_methods/log1p", "container/container_methods/log2", "container/container_methods/logaddexp", "container/container_methods/logical_and", "container/container_methods/logical_not", "container/container_methods/logical_or", "container/container_methods/logical_xor", "container/container_methods/matmul", "container/container_methods/max", "container/container_methods/mean", "container/container_methods/min", "container/container_methods/multiply", "container/container_methods/negative", "container/container_methods/not_equal", "container/container_methods/optimizer_update", "container/container_methods/permute_dims", "container/container_methods/positive", "container/container_methods/pow", "container/container_methods/prod", "container/container_methods/random_uniform", "container/container_methods/remainder", "container/container_methods/repeat", "container/container_methods/reshape", "container/container_methods/roll", "container/container_methods/round", "container/container_methods/sign", "container/container_methods/sin", "container/container_methods/sinh", "container/container_methods/sort", "container/container_methods/sparse_cross_entropy", "container/container_methods/sqrt", "container/container_methods/square", "container/container_methods/squeeze", "container/container_methods/stack", "container/container_methods/static_adam_update", "container/container_methods/static_add", "container/container_methods/static_all_equal", "container/container_methods/static_argsort", "container/container_methods/static_binary_cross_entropy", "container/container_methods/static_can_cast", "container/container_methods/static_clip", "container/container_methods/static_cross_entropy", "container/container_methods/static_divide", "container/container_methods/static_gather_nd", "container/container_methods/static_gradient_descent_update", "container/container_methods/static_lamb_update", "container/container_methods/static_lars_update", "container/container_methods/static_multiply", "container/container_methods/static_optimizer_update", "container/container_methods/static_randint", "container/container_methods/static_random_uniform", "container/container_methods/static_roll", "container/container_methods/static_sort", "container/container_methods/static_sparse_cross_entropy", "container/container_methods/static_subtract", "container/container_methods/static_tan", "container/container_methods/std", "container/container_methods/subtract", "container/container_methods/sum", "container/container_methods/swapaxes", "container/container_methods/tan", "container/container_methods/tanh", "container/container_methods/tile", "container/container_methods/trunc", "container/container_methods/var", "container/container_methods/zero_pad", "container/creation", "container/creation/ContainerWithCreation", "container/data_type", "container/data_type/ContainerWithDataTypes", "container/device", "container/device/ContainerWithDevice", "container/elementwise", "container/elementwise/ContainerWithElementwise", "container/general", "container/general/ContainerWithGeneral", "container/gradients", "container/gradients/ContainerWithGradients", "container/image", "container/image/ContainerWithImage", "container/layers", "container/layers/ContainerWithLayers", "container/linear_algebra", "container/linear_algebra/ContainerWithLinearAlgebra", "container/losses", "container/losses/ContainerWithLosses", "container/manipulation", "container/manipulation/ContainerWithManipulation", "container/norms", "container/norms/ContainerWithNorms", "container/random", "container/random/ContainerWithRandom", "container/searching", "container/searching/ContainerWithSearching", "container/set", "container/set/ContainerWithSet", "container/sorting", "container/sorting/ContainerWithSorting", "container/statistical", "container/statistical/ContainerWithStatistical", "container/utility", "container/utility/ContainerWithUtility", "container/wrapping", "container/wrapping/add_ivy_container_instance_methods", "contributing", "contributing/0_setting_up", "contributing/1_the_basics", "contributing/4_open_tasks", "contributing/building_the_docs", "deep_dive", "deep_dive/0_navigating_the_code", "deep_dive/10_docstrings", "deep_dive/11_docstring_examples", "deep_dive/12_array_api_tests", "deep_dive/13_ivy_tests", "deep_dive/1_function_types", "deep_dive/2_backend_setting", "deep_dive/3_function_wrapping", "deep_dive/4_arrays", "deep_dive/5_containers", "deep_dive/6_data_types", "deep_dive/7_devices", "deep_dive/8_inplace_updates", "deep_dive/9_function_arguments", "design", "design/building_blocks", "design/ivy_as_a_framework", "design/ivy_as_a_framework/ivy_array", "design/ivy_as_a_framework/ivy_container", "design/ivy_as_a_framework/ivy_stateful_api", "design/ivy_as_a_transpiler", "docs/ivy", "docs/ivy_builder", "docs/ivy_ecosystem", "docs/ivy_gym", "docs/ivy_mech", "docs/ivy_memory", "docs/ivy_models", "docs/ivy_robot", "docs/ivy_vision", "extensions", "extensions/applied_libraries", "faq", "func_wrapper", "func_wrapper/handle_nestable", "func_wrapper/handle_out_argument", "func_wrapper/infer_device", "func_wrapper/infer_dtype", "func_wrapper/inputs_to_ivy_arrays", "func_wrapper/inputs_to_native_arrays", "func_wrapper/outputs_to_ivy_arrays", "func_wrapper/to_native_arrays_and_back", "functional/ivy", "functional/ivy/activations", "functional/ivy/activations/gelu", "functional/ivy/activations/leaky_relu", "functional/ivy/activations/relu", "functional/ivy/activations/sigmoid", "functional/ivy/activations/softmax", "functional/ivy/activations/softplus", "functional/ivy/activations/tanh", "functional/ivy/compilation", "functional/ivy/compilation/compile", "functional/ivy/constants", "functional/ivy/creation", "functional/ivy/creation/arange", "functional/ivy/creation/asarray", "functional/ivy/creation/empty", "functional/ivy/creation/empty_like", "functional/ivy/creation/eye", "functional/ivy/creation/from_dlpack", "functional/ivy/creation/full", "functional/ivy/creation/full_like", "functional/ivy/creation/linspace", "functional/ivy/creation/logspace", "functional/ivy/creation/meshgrid", "functional/ivy/creation/native_array", "functional/ivy/creation/ones", "functional/ivy/creation/ones_like", "functional/ivy/creation/tril", "functional/ivy/creation/triu", "functional/ivy/creation/zeros", "functional/ivy/creation/zeros_like", "functional/ivy/data_type", "functional/ivy/data_type/DefaultDtype:\n    \"\"\"\"\"\"\n\n    # noinspection PyShadowingNames\n    def __init__", "functional/ivy/data_type/DefaultFloatDtype:\n    \"\"\"\"\"\"\n\n    # noinspection PyShadowingNames\n    def __init__", "functional/ivy/data_type/DefaultIntDtype:\n    \"\"\"\"\"\"\n\n    # noinspection PyShadowingNames\n    def __init__", "functional/ivy/data_type/as_ivy_dtype", "functional/ivy/data_type/as_native_dtype", "functional/ivy/data_type/astype", "functional/ivy/data_type/broadcast_arrays", "functional/ivy/data_type/broadcast_to", "functional/ivy/data_type/can_cast", "functional/ivy/data_type/can_cast/can_cast_array", "functional/ivy/data_type/can_cast/can_cast_container", "functional/ivy/data_type/can_cast/can_cast_functional", "functional/ivy/data_type/can_cast/static_can_cast_container", "functional/ivy/data_type/closest_valid_dtype", "functional/ivy/data_type/default_dtype", "functional/ivy/data_type/default_float_dtype", "functional/ivy/data_type/default_int_dtype", "functional/ivy/data_type/dtype", "functional/ivy/data_type/dtype_bits", "functional/ivy/data_type/finfo", "functional/ivy/data_type/function_supported_dtypes", "functional/ivy/data_type/function_unsupported_dtypes", "functional/ivy/data_type/iinfo", "functional/ivy/data_type/invalid_dtype", "functional/ivy/data_type/is_float_dtype", "functional/ivy/data_type/is_int_dtype", "functional/ivy/data_type/promote_types", "functional/ivy/data_type/result_type", "functional/ivy/data_type/set_default_dtype", "functional/ivy/data_type/set_default_float_dtype", "functional/ivy/data_type/set_default_int_dtype", "functional/ivy/data_type/type_promote_arrays", "functional/ivy/data_type/unset_default_dtype", "functional/ivy/data_type/unset_default_float_dtype", "functional/ivy/data_type/unset_default_int_dtype", "functional/ivy/data_type/valid_dtype", "functional/ivy/device", "functional/ivy/device/DefaultDevice:\n    \"\"\"\"\"\"\n\n    # noinspection PyShadowingNames\n    def __init__", "functional/ivy/device/DevClonedItem", "functional/ivy/device/DevClonedIter", "functional/ivy/device/DevClonedNest", "functional/ivy/device/DevDistItem", "functional/ivy/device/DevDistIter", "functional/ivy/device/DevDistNest", "functional/ivy/device/DevManager:\n    \"\"\"\"\"\"\n\n    def __init__", "functional/ivy/device/DevMapper", "functional/ivy/device/DevMapperMultiProc", "functional/ivy/device/MultiDev:\n    def __init__", "functional/ivy/device/MultiDevItem", "functional/ivy/device/MultiDevIter", "functional/ivy/device/MultiDevNest", "functional/ivy/device/Profiler", "functional/ivy/device/as_ivy_dev", "functional/ivy/device/as_native_dev", "functional/ivy/device/clear_mem_on_dev", "functional/ivy/device/default_device", "functional/ivy/device/dev", "functional/ivy/device/dev_clone", "functional/ivy/device/dev_clone_array", "functional/ivy/device/dev_clone_iter", "functional/ivy/device/dev_clone_nest", "functional/ivy/device/dev_dist", "functional/ivy/device/dev_dist_array", "functional/ivy/device/dev_dist_iter", "functional/ivy/device/dev_dist_nest", "functional/ivy/device/dev_unify", "functional/ivy/device/dev_unify_array", "functional/ivy/device/dev_unify_iter", "functional/ivy/device/dev_unify_nest", "functional/ivy/device/dev_util", "functional/ivy/device/get_all_ivy_arrays_on_dev", "functional/ivy/device/gpu_is_available", "functional/ivy/device/num_cpu_cores", "functional/ivy/device/num_gpus", "functional/ivy/device/num_ivy_arrays_on_dev", "functional/ivy/device/percent_used_mem_on_dev", "functional/ivy/device/print_all_ivy_arrays_on_dev", "functional/ivy/device/set_default_device", "functional/ivy/device/set_split_factor", "functional/ivy/device/split_factor", "functional/ivy/device/split_func_call", "functional/ivy/device/to_device", "functional/ivy/device/total_mem_on_dev", "functional/ivy/device/tpu_is_available", "functional/ivy/device/unset_default_device", "functional/ivy/device/used_mem_on_dev", "functional/ivy/elementwise", "functional/ivy/elementwise/abs", "functional/ivy/elementwise/abs/abs_array", "functional/ivy/elementwise/abs/abs_container", "functional/ivy/elementwise/abs/abs_functional", "functional/ivy/elementwise/acos", "functional/ivy/elementwise/acos/acos_array", "functional/ivy/elementwise/acos/acos_container", "functional/ivy/elementwise/acos/acos_functional", "functional/ivy/elementwise/acosh", "functional/ivy/elementwise/acosh/acosh_array", "functional/ivy/elementwise/acosh/acosh_container", "functional/ivy/elementwise/acosh/acosh_functional", "functional/ivy/elementwise/add", "functional/ivy/elementwise/add/add_array", "functional/ivy/elementwise/add/add_container", "functional/ivy/elementwise/add/add_functional", "functional/ivy/elementwise/add/static_add_container", "functional/ivy/elementwise/asin", "functional/ivy/elementwise/asin/asin_array", "functional/ivy/elementwise/asin/asin_container", "functional/ivy/elementwise/asin/asin_functional", "functional/ivy/elementwise/asinh", "functional/ivy/elementwise/asinh/asinh_array", "functional/ivy/elementwise/asinh/asinh_container", "functional/ivy/elementwise/asinh/asinh_functional", "functional/ivy/elementwise/atan", "functional/ivy/elementwise/atan/atan_array", "functional/ivy/elementwise/atan/atan_container", "functional/ivy/elementwise/atan/atan_functional", "functional/ivy/elementwise/atan2", "functional/ivy/elementwise/atan2/atan2_array", "functional/ivy/elementwise/atan2/atan2_container", "functional/ivy/elementwise/atan2/atan2_functional", "functional/ivy/elementwise/atanh", "functional/ivy/elementwise/atanh/atanh_array", "functional/ivy/elementwise/atanh/atanh_container", "functional/ivy/elementwise/atanh/atanh_functional", "functional/ivy/elementwise/bitwise_and", "functional/ivy/elementwise/bitwise_and/bitwise_and_array", "functional/ivy/elementwise/bitwise_and/bitwise_and_container", "functional/ivy/elementwise/bitwise_and/bitwise_and_functional", "functional/ivy/elementwise/bitwise_invert", "functional/ivy/elementwise/bitwise_invert/bitwise_invert_array", "functional/ivy/elementwise/bitwise_invert/bitwise_invert_container", "functional/ivy/elementwise/bitwise_invert/bitwise_invert_functional", "functional/ivy/elementwise/bitwise_left_shift", "functional/ivy/elementwise/bitwise_left_shift/bitwise_left_shift_array", "functional/ivy/elementwise/bitwise_left_shift/bitwise_left_shift_container", "functional/ivy/elementwise/bitwise_left_shift/bitwise_left_shift_functional", "functional/ivy/elementwise/bitwise_or", "functional/ivy/elementwise/bitwise_or/bitwise_or_array", "functional/ivy/elementwise/bitwise_or/bitwise_or_container", "functional/ivy/elementwise/bitwise_or/bitwise_or_functional", "functional/ivy/elementwise/bitwise_right_shift", "functional/ivy/elementwise/bitwise_right_shift/bitwise_right_shift_array", "functional/ivy/elementwise/bitwise_right_shift/bitwise_right_shift_container", "functional/ivy/elementwise/bitwise_right_shift/bitwise_right_shift_functional", "functional/ivy/elementwise/bitwise_xor", "functional/ivy/elementwise/bitwise_xor/bitwise_xor_array", "functional/ivy/elementwise/bitwise_xor/bitwise_xor_container", "functional/ivy/elementwise/bitwise_xor/bitwise_xor_functional", "functional/ivy/elementwise/ceil", "functional/ivy/elementwise/ceil/ceil_array", "functional/ivy/elementwise/ceil/ceil_container", "functional/ivy/elementwise/ceil/ceil_functional", "functional/ivy/elementwise/cos", "functional/ivy/elementwise/cos/cos_array", "functional/ivy/elementwise/cos/cos_container", "functional/ivy/elementwise/cos/cos_functional", "functional/ivy/elementwise/cosh", "functional/ivy/elementwise/cosh/cosh_array", "functional/ivy/elementwise/cosh/cosh_container", "functional/ivy/elementwise/cosh/cosh_functional", "functional/ivy/elementwise/divide", "functional/ivy/elementwise/divide/divide_array", "functional/ivy/elementwise/divide/divide_container", "functional/ivy/elementwise/divide/divide_functional", "functional/ivy/elementwise/divide/static_divide_container", "functional/ivy/elementwise/equal", "functional/ivy/elementwise/equal/equal_array", "functional/ivy/elementwise/equal/equal_container", "functional/ivy/elementwise/equal/equal_functional", "functional/ivy/elementwise/erf", "functional/ivy/elementwise/erf/erf_array", "functional/ivy/elementwise/erf/erf_container", "functional/ivy/elementwise/erf/erf_functional", "functional/ivy/elementwise/exp", "functional/ivy/elementwise/exp/exp_array", "functional/ivy/elementwise/exp/exp_container", "functional/ivy/elementwise/exp/exp_functional", "functional/ivy/elementwise/expm1", "functional/ivy/elementwise/expm1/expm1_array", "functional/ivy/elementwise/expm1/expm1_container", "functional/ivy/elementwise/expm1/expm1_functional", "functional/ivy/elementwise/floor", "functional/ivy/elementwise/floor/floor_array", "functional/ivy/elementwise/floor/floor_container", "functional/ivy/elementwise/floor/floor_functional", "functional/ivy/elementwise/floor_divide", "functional/ivy/elementwise/floor_divide/floor_divide_array", "functional/ivy/elementwise/floor_divide/floor_divide_container", "functional/ivy/elementwise/floor_divide/floor_divide_functional", "functional/ivy/elementwise/greater", "functional/ivy/elementwise/greater/greater_array", "functional/ivy/elementwise/greater/greater_container", "functional/ivy/elementwise/greater/greater_functional", "functional/ivy/elementwise/greater_equal", "functional/ivy/elementwise/greater_equal/greater_equal_array", "functional/ivy/elementwise/greater_equal/greater_equal_container", "functional/ivy/elementwise/greater_equal/greater_equal_functional", "functional/ivy/elementwise/isfinite", "functional/ivy/elementwise/isfinite/isfinite_array", "functional/ivy/elementwise/isfinite/isfinite_container", "functional/ivy/elementwise/isfinite/isfinite_functional", "functional/ivy/elementwise/isinf", "functional/ivy/elementwise/isinf/isinf_array", "functional/ivy/elementwise/isinf/isinf_container", "functional/ivy/elementwise/isinf/isinf_functional", "functional/ivy/elementwise/isnan", "functional/ivy/elementwise/isnan/isnan_array", "functional/ivy/elementwise/isnan/isnan_container", "functional/ivy/elementwise/isnan/isnan_functional", "functional/ivy/elementwise/less", "functional/ivy/elementwise/less/less_array", "functional/ivy/elementwise/less/less_container", "functional/ivy/elementwise/less/less_functional", "functional/ivy/elementwise/less_equal", "functional/ivy/elementwise/less_equal/less_equal_array", "functional/ivy/elementwise/less_equal/less_equal_container", "functional/ivy/elementwise/less_equal/less_equal_functional", "functional/ivy/elementwise/log", "functional/ivy/elementwise/log/log_array", "functional/ivy/elementwise/log/log_container", "functional/ivy/elementwise/log/log_functional", "functional/ivy/elementwise/log10", "functional/ivy/elementwise/log10/log10_array", "functional/ivy/elementwise/log10/log10_container", "functional/ivy/elementwise/log10/log10_functional", "functional/ivy/elementwise/log1p", "functional/ivy/elementwise/log1p/log1p_array", "functional/ivy/elementwise/log1p/log1p_container", "functional/ivy/elementwise/log1p/log1p_functional", "functional/ivy/elementwise/log2", "functional/ivy/elementwise/log2/log2_array", "functional/ivy/elementwise/log2/log2_container", "functional/ivy/elementwise/log2/log2_functional", "functional/ivy/elementwise/logaddexp", "functional/ivy/elementwise/logaddexp/logaddexp_array", "functional/ivy/elementwise/logaddexp/logaddexp_container", "functional/ivy/elementwise/logaddexp/logaddexp_functional", "functional/ivy/elementwise/logical_and", "functional/ivy/elementwise/logical_and/logical_and_array", "functional/ivy/elementwise/logical_and/logical_and_container", "functional/ivy/elementwise/logical_and/logical_and_functional", "functional/ivy/elementwise/logical_not", "functional/ivy/elementwise/logical_not/logical_not_array", "functional/ivy/elementwise/logical_not/logical_not_container", "functional/ivy/elementwise/logical_not/logical_not_functional", "functional/ivy/elementwise/logical_or", "functional/ivy/elementwise/logical_or/logical_or_array", "functional/ivy/elementwise/logical_or/logical_or_container", "functional/ivy/elementwise/logical_or/logical_or_functional", "functional/ivy/elementwise/logical_xor", "functional/ivy/elementwise/logical_xor/logical_xor_array", "functional/ivy/elementwise/logical_xor/logical_xor_container", "functional/ivy/elementwise/logical_xor/logical_xor_functional", "functional/ivy/elementwise/maximum", "functional/ivy/elementwise/minimum", "functional/ivy/elementwise/multiply", "functional/ivy/elementwise/multiply/multiply_array", "functional/ivy/elementwise/multiply/multiply_container", "functional/ivy/elementwise/multiply/multiply_functional", "functional/ivy/elementwise/multiply/static_multiply_container", "functional/ivy/elementwise/negative", "functional/ivy/elementwise/negative/negative_array", "functional/ivy/elementwise/negative/negative_container", "functional/ivy/elementwise/negative/negative_functional", "functional/ivy/elementwise/not_equal", "functional/ivy/elementwise/not_equal/not_equal_array", "functional/ivy/elementwise/not_equal/not_equal_container", "functional/ivy/elementwise/not_equal/not_equal_functional", "functional/ivy/elementwise/positive", "functional/ivy/elementwise/positive/positive_array", "functional/ivy/elementwise/positive/positive_container", "functional/ivy/elementwise/positive/positive_functional", "functional/ivy/elementwise/pow", "functional/ivy/elementwise/pow/pow_array", "functional/ivy/elementwise/pow/pow_container", "functional/ivy/elementwise/pow/pow_functional", "functional/ivy/elementwise/remainder", "functional/ivy/elementwise/remainder/remainder_array", "functional/ivy/elementwise/remainder/remainder_container", "functional/ivy/elementwise/remainder/remainder_functional", "functional/ivy/elementwise/round", "functional/ivy/elementwise/round/round_array", "functional/ivy/elementwise/round/round_container", "functional/ivy/elementwise/round/round_functional", "functional/ivy/elementwise/sign", "functional/ivy/elementwise/sign/sign_array", "functional/ivy/elementwise/sign/sign_container", "functional/ivy/elementwise/sign/sign_functional", "functional/ivy/elementwise/sin", "functional/ivy/elementwise/sin/sin_array", "functional/ivy/elementwise/sin/sin_container", "functional/ivy/elementwise/sin/sin_functional", "functional/ivy/elementwise/sinh", "functional/ivy/elementwise/sinh/sinh_array", "functional/ivy/elementwise/sinh/sinh_container", "functional/ivy/elementwise/sinh/sinh_functional", "functional/ivy/elementwise/sqrt", "functional/ivy/elementwise/sqrt/sqrt_array", "functional/ivy/elementwise/sqrt/sqrt_container", "functional/ivy/elementwise/sqrt/sqrt_functional", "functional/ivy/elementwise/square", "functional/ivy/elementwise/square/square_array", "functional/ivy/elementwise/square/square_container", "functional/ivy/elementwise/square/square_functional", "functional/ivy/elementwise/subtract", "functional/ivy/elementwise/subtract/static_subtract_container", "functional/ivy/elementwise/subtract/subtract_array", "functional/ivy/elementwise/subtract/subtract_container", "functional/ivy/elementwise/subtract/subtract_functional", "functional/ivy/elementwise/tan", "functional/ivy/elementwise/tan/static_tan_container", "functional/ivy/elementwise/tan/tan_array", "functional/ivy/elementwise/tan/tan_container", "functional/ivy/elementwise/tan/tan_functional", "functional/ivy/elementwise/tanh", "functional/ivy/elementwise/tanh/tanh_array", "functional/ivy/elementwise/tanh/tanh_container", "functional/ivy/elementwise/tanh/tanh_functional", "functional/ivy/elementwise/trunc", "functional/ivy/elementwise/trunc/trunc_array", "functional/ivy/elementwise/trunc/trunc_container", "functional/ivy/elementwise/trunc/trunc_functional", "functional/ivy/general", "functional/ivy/general/all_equal", "functional/ivy/general/all_equal/all_equal_array", "functional/ivy/general/all_equal/all_equal_container", "functional/ivy/general/all_equal/all_equal_functional", "functional/ivy/general/all_equal/static_all_equal_container", "functional/ivy/general/arg_info", "functional/ivy/general/arg_names", "functional/ivy/general/array_equal", "functional/ivy/general/arrays_equal", "functional/ivy/general/assert_supports_inplace", "functional/ivy/general/cache_fn", "functional/ivy/general/clip_matrix_norm", "functional/ivy/general/clip_vector_norm", "functional/ivy/general/clip_vector_norm/clip_vector_norm_container", "functional/ivy/general/clip_vector_norm/clip_vector_norm_functional", "functional/ivy/general/container_types", "functional/ivy/general/copy_array", "functional/ivy/general/cumprod", "functional/ivy/general/cumsum", "functional/ivy/general/current_backend_str", "functional/ivy/general/default", "functional/ivy/general/einops_rearrange", "functional/ivy/general/einops_reduce", "functional/ivy/general/einops_repeat", "functional/ivy/general/exists", "functional/ivy/general/floormod", "functional/ivy/general/fourier_encode", "functional/ivy/general/gather", "functional/ivy/general/gather_nd", "functional/ivy/general/gather_nd/gather_nd_array", "functional/ivy/general/gather_nd/gather_nd_container", "functional/ivy/general/gather_nd/gather_nd_functional", "functional/ivy/general/gather_nd/static_gather_nd_container", "functional/ivy/general/get_all_arrays_in_memory", "functional/ivy/general/get_min_base", "functional/ivy/general/get_min_denominator", "functional/ivy/general/get_num_dims", "functional/ivy/general/get_referrers_recursive", "functional/ivy/general/has_nans", "functional/ivy/general/indices_where", "functional/ivy/general/inplace_arrays_supported", "functional/ivy/general/inplace_decrement", "functional/ivy/general/inplace_increment", "functional/ivy/general/inplace_update", "functional/ivy/general/inplace_variables_supported", "functional/ivy/general/is_array", "functional/ivy/general/is_ivy_array", "functional/ivy/general/is_ivy_container", "functional/ivy/general/is_native_array", "functional/ivy/general/match_kwargs", "functional/ivy/general/multiprocessing", "functional/ivy/general/num_arrays_in_memory", "functional/ivy/general/one_hot", "functional/ivy/general/print_all_arrays_in_memory", "functional/ivy/general/queue_timeout", "functional/ivy/general/scatter_flat", "functional/ivy/general/scatter_nd", "functional/ivy/general/set_min_base", "functional/ivy/general/set_min_denominator", "functional/ivy/general/set_queue_timeout", "functional/ivy/general/set_tmp_dir", "functional/ivy/general/shape", "functional/ivy/general/shape_to_tuple", "functional/ivy/general/stable_divide", "functional/ivy/general/stable_pow", "functional/ivy/general/supports_inplace", "functional/ivy/general/tmp_dir", "functional/ivy/general/to_list", "functional/ivy/general/to_numpy", "functional/ivy/general/to_scalar", "functional/ivy/general/try_else_none", "functional/ivy/general/unstack", "functional/ivy/general/value_is_nan", "functional/ivy/gradients", "functional/ivy/gradients/GradientTracking:\n    \"\"\"\"\"\"\n\n    # noinspection PyShadowingNames\n    def __init__", "functional/ivy/gradients/adam_step", "functional/ivy/gradients/adam_update", "functional/ivy/gradients/adam_update/adam_update_container", "functional/ivy/gradients/adam_update/adam_update_functional", "functional/ivy/gradients/adam_update/static_adam_update_container", "functional/ivy/gradients/execute_with_gradients", "functional/ivy/gradients/gradient_descent_update", "functional/ivy/gradients/gradient_descent_update/gradient_descent_update_container", "functional/ivy/gradients/gradient_descent_update/gradient_descent_update_functional", "functional/ivy/gradients/gradient_descent_update/static_gradient_descent_update_container", "functional/ivy/gradients/is_variable", "functional/ivy/gradients/lamb_update", "functional/ivy/gradients/lamb_update/lamb_update_container", "functional/ivy/gradients/lamb_update/lamb_update_functional", "functional/ivy/gradients/lamb_update/static_lamb_update_container", "functional/ivy/gradients/lars_update", "functional/ivy/gradients/lars_update/lars_update_container", "functional/ivy/gradients/lars_update/lars_update_functional", "functional/ivy/gradients/lars_update/static_lars_update_container", "functional/ivy/gradients/optimizer_update", "functional/ivy/gradients/optimizer_update/optimizer_update_container", "functional/ivy/gradients/optimizer_update/optimizer_update_functional", "functional/ivy/gradients/optimizer_update/static_optimizer_update_container", "functional/ivy/gradients/set_with_grads", "functional/ivy/gradients/stop_gradient", "functional/ivy/gradients/unset_with_grads", "functional/ivy/gradients/variable", "functional/ivy/gradients/variable_data", "functional/ivy/gradients/with_grads", "functional/ivy/layers", "functional/ivy/layers/conv1d", "functional/ivy/layers/conv1d_transpose", "functional/ivy/layers/conv2d", "functional/ivy/layers/conv2d_transpose", "functional/ivy/layers/conv3d", "functional/ivy/layers/conv3d_transpose", "functional/ivy/layers/depthwise_conv2d", "functional/ivy/layers/dropout", "functional/ivy/layers/linear", "functional/ivy/layers/lstm_update", "functional/ivy/layers/multi_head_attention", "functional/ivy/layers/scaled_dot_product_attention", "functional/ivy/linear_algebra", "functional/ivy/linear_algebra/cholesky", "functional/ivy/linear_algebra/cholesky/cholesky_array", "functional/ivy/linear_algebra/cholesky/cholesky_functional", "functional/ivy/linear_algebra/cross", "functional/ivy/linear_algebra/cross/cross_array", "functional/ivy/linear_algebra/cross/cross_functional", "functional/ivy/linear_algebra/det", "functional/ivy/linear_algebra/det/det_array", "functional/ivy/linear_algebra/det/det_functional", "functional/ivy/linear_algebra/diagonal", "functional/ivy/linear_algebra/diagonal/diagonal_array", "functional/ivy/linear_algebra/diagonal/diagonal_functional", "functional/ivy/linear_algebra/eigh", "functional/ivy/linear_algebra/eigh/eigh_array", "functional/ivy/linear_algebra/eigh/eigh_functional", "functional/ivy/linear_algebra/eigvalsh", "functional/ivy/linear_algebra/eigvalsh/eigvalsh_array", "functional/ivy/linear_algebra/eigvalsh/eigvalsh_functional", "functional/ivy/linear_algebra/inv", "functional/ivy/linear_algebra/inv/inv_array", "functional/ivy/linear_algebra/inv/inv_functional", "functional/ivy/linear_algebra/matmul", "functional/ivy/linear_algebra/matmul/matmul_array", "functional/ivy/linear_algebra/matmul/matmul_container", "functional/ivy/linear_algebra/matmul/matmul_functional", "functional/ivy/linear_algebra/matrix_norm", "functional/ivy/linear_algebra/matrix_norm/matrix_norm_array", "functional/ivy/linear_algebra/matrix_norm/matrix_norm_functional", "functional/ivy/linear_algebra/matrix_power", "functional/ivy/linear_algebra/matrix_rank", "functional/ivy/linear_algebra/matrix_rank/matrix_rank_array", "functional/ivy/linear_algebra/matrix_rank/matrix_rank_functional", "functional/ivy/linear_algebra/matrix_transpose", "functional/ivy/linear_algebra/matrix_transpose/matrix_transpose_array", "functional/ivy/linear_algebra/matrix_transpose/matrix_transpose_functional", "functional/ivy/linear_algebra/outer", "functional/ivy/linear_algebra/outer/outer_array", "functional/ivy/linear_algebra/outer/outer_functional", "functional/ivy/linear_algebra/pinv", "functional/ivy/linear_algebra/pinv/pinv_array", "functional/ivy/linear_algebra/pinv/pinv_functional", "functional/ivy/linear_algebra/qr", "functional/ivy/linear_algebra/qr/qr_array", "functional/ivy/linear_algebra/qr/qr_functional", "functional/ivy/linear_algebra/slogdet", "functional/ivy/linear_algebra/solve", "functional/ivy/linear_algebra/solve/solve_array", "functional/ivy/linear_algebra/solve/solve_functional", "functional/ivy/linear_algebra/svd", "functional/ivy/linear_algebra/svd/svd_array", "functional/ivy/linear_algebra/svd/svd_functional", "functional/ivy/linear_algebra/svdvals", "functional/ivy/linear_algebra/svdvals/svdvals_array", "functional/ivy/linear_algebra/svdvals/svdvals_functional", "functional/ivy/linear_algebra/tensordot", "functional/ivy/linear_algebra/tensordot/tensordot_array", "functional/ivy/linear_algebra/tensordot/tensordot_functional", "functional/ivy/linear_algebra/trace", "functional/ivy/linear_algebra/trace/trace_array", "functional/ivy/linear_algebra/trace/trace_functional", "functional/ivy/linear_algebra/vecdot", "functional/ivy/linear_algebra/vecdot/vecdot_array", "functional/ivy/linear_algebra/vecdot/vecdot_functional", "functional/ivy/linear_algebra/vector_norm", "functional/ivy/linear_algebra/vector_norm/vector_norm_array", "functional/ivy/linear_algebra/vector_norm/vector_norm_functional", "functional/ivy/linear_algebra/vector_to_skew_symmetric_matrix", "functional/ivy/linear_algebra/vector_to_skew_symmetric_matrix/vector_to_skew_symmetric_matrix_array", "functional/ivy/linear_algebra/vector_to_skew_symmetric_matrix/vector_to_skew_symmetric_matrix_functional", "functional/ivy/losses", "functional/ivy/losses/binary_cross_entropy", "functional/ivy/losses/binary_cross_entropy/binary_cross_entropy_array", "functional/ivy/losses/binary_cross_entropy/binary_cross_entropy_container", "functional/ivy/losses/binary_cross_entropy/binary_cross_entropy_functional", "functional/ivy/losses/binary_cross_entropy/static_binary_cross_entropy_container", "functional/ivy/losses/cross_entropy", "functional/ivy/losses/cross_entropy/cross_entropy_array", "functional/ivy/losses/cross_entropy/cross_entropy_container", "functional/ivy/losses/cross_entropy/cross_entropy_functional", "functional/ivy/losses/cross_entropy/static_cross_entropy_container", "functional/ivy/losses/sparse_cross_entropy", "functional/ivy/losses/sparse_cross_entropy/sparse_cross_entropy_array", "functional/ivy/losses/sparse_cross_entropy/sparse_cross_entropy_container", "functional/ivy/losses/sparse_cross_entropy/sparse_cross_entropy_functional", "functional/ivy/losses/sparse_cross_entropy/static_sparse_cross_entropy_container", "functional/ivy/manipulation", "functional/ivy/manipulation/clip", "functional/ivy/manipulation/clip/clip_array", "functional/ivy/manipulation/clip/clip_container", "functional/ivy/manipulation/clip/clip_functional", "functional/ivy/manipulation/clip/static_clip_container", "functional/ivy/manipulation/concat", "functional/ivy/manipulation/concat/concat_array", "functional/ivy/manipulation/concat/concat_container", "functional/ivy/manipulation/concat/concat_functional", "functional/ivy/manipulation/constant_pad", "functional/ivy/manipulation/constant_pad/constant_pad_array", "functional/ivy/manipulation/constant_pad/constant_pad_container", "functional/ivy/manipulation/constant_pad/constant_pad_functional", "functional/ivy/manipulation/expand_dims", "functional/ivy/manipulation/expand_dims/expand_dims_array", "functional/ivy/manipulation/expand_dims/expand_dims_container", "functional/ivy/manipulation/expand_dims/expand_dims_functional", "functional/ivy/manipulation/flip", "functional/ivy/manipulation/flip/flip_array", "functional/ivy/manipulation/flip/flip_container", "functional/ivy/manipulation/flip/flip_functional", "functional/ivy/manipulation/permute_dims", "functional/ivy/manipulation/permute_dims/permute_dims_array", "functional/ivy/manipulation/permute_dims/permute_dims_container", "functional/ivy/manipulation/permute_dims/permute_dims_functional", "functional/ivy/manipulation/repeat", "functional/ivy/manipulation/repeat/repeat_array", "functional/ivy/manipulation/repeat/repeat_container", "functional/ivy/manipulation/repeat/repeat_functional", "functional/ivy/manipulation/reshape", "functional/ivy/manipulation/reshape/reshape_array", "functional/ivy/manipulation/reshape/reshape_container", "functional/ivy/manipulation/reshape/reshape_functional", "functional/ivy/manipulation/roll", "functional/ivy/manipulation/roll/roll_array", "functional/ivy/manipulation/roll/roll_container", "functional/ivy/manipulation/roll/roll_functional", "functional/ivy/manipulation/roll/static_roll_container", "functional/ivy/manipulation/split", "functional/ivy/manipulation/squeeze", "functional/ivy/manipulation/squeeze/squeeze_array", "functional/ivy/manipulation/squeeze/squeeze_container", "functional/ivy/manipulation/squeeze/squeeze_functional", "functional/ivy/manipulation/stack", "functional/ivy/manipulation/stack/stack_array", "functional/ivy/manipulation/stack/stack_container", "functional/ivy/manipulation/stack/stack_functional", "functional/ivy/manipulation/swapaxes", "functional/ivy/manipulation/swapaxes/swapaxes_array", "functional/ivy/manipulation/swapaxes/swapaxes_container", "functional/ivy/manipulation/swapaxes/swapaxes_functional", "functional/ivy/manipulation/tile", "functional/ivy/manipulation/tile/tile_array", "functional/ivy/manipulation/tile/tile_container", "functional/ivy/manipulation/tile/tile_functional", "functional/ivy/manipulation/zero_pad", "functional/ivy/manipulation/zero_pad/zero_pad_array", "functional/ivy/manipulation/zero_pad/zero_pad_container", "functional/ivy/manipulation/zero_pad/zero_pad_functional", "functional/ivy/meta", "functional/ivy/meta/fomaml_step", "functional/ivy/meta/maml_step", "functional/ivy/meta/reptile_step", "functional/ivy/nest", "functional/ivy/nest/all_nested_indices", "functional/ivy/nest/copy_nest", "functional/ivy/nest/index_nest", "functional/ivy/nest/insert_into_nest_at_index", "functional/ivy/nest/insert_into_nest_at_indices", "functional/ivy/nest/map", "functional/ivy/nest/map_nest_at_index", "functional/ivy/nest/map_nest_at_indices", "functional/ivy/nest/multi_index_nest", "functional/ivy/nest/nested_any", "functional/ivy/nest/nested_indices_where", "functional/ivy/nest/nested_map", "functional/ivy/nest/nested_multi_map", "functional/ivy/nest/prune_nest_at_index", "functional/ivy/nest/prune_nest_at_indices", "functional/ivy/nest/set_nest_at_index", "functional/ivy/nest/set_nest_at_indices", "functional/ivy/norms", "functional/ivy/norms/layer_norm", "functional/ivy/norms/layer_norm/layer_norm_array", "functional/ivy/norms/layer_norm/layer_norm_container", "functional/ivy/norms/layer_norm/layer_norm_functional", "functional/ivy/random", "functional/ivy/random/multinomial", "functional/ivy/random/randint", "functional/ivy/random/randint/randint_functional", "functional/ivy/random/randint/static_randint_container", "functional/ivy/random/random_normal", "functional/ivy/random/random_uniform", "functional/ivy/random/random_uniform/random_uniform_container", "functional/ivy/random/random_uniform/random_uniform_functional", "functional/ivy/random/random_uniform/static_random_uniform_container", "functional/ivy/random/seed", "functional/ivy/random/shuffle", "functional/ivy/searching", "functional/ivy/searching/argmax", "functional/ivy/searching/argmin", "functional/ivy/searching/nonzero", "functional/ivy/searching/where", "functional/ivy/set", "functional/ivy/set/unique_all", "functional/ivy/set/unique_counts", "functional/ivy/set/unique_inverse", "functional/ivy/set/unique_values", "functional/ivy/sorting", "functional/ivy/sorting/argsort", "functional/ivy/sorting/argsort/argsort_array", "functional/ivy/sorting/argsort/argsort_container", "functional/ivy/sorting/argsort/argsort_functional", "functional/ivy/sorting/argsort/static_argsort_container", "functional/ivy/sorting/sort", "functional/ivy/sorting/sort/sort_array", "functional/ivy/sorting/sort/sort_container", "functional/ivy/sorting/sort/sort_functional", "functional/ivy/sorting/sort/static_sort_container", "functional/ivy/statistical", "functional/ivy/statistical/einsum", "functional/ivy/statistical/einsum/einsum_array", "functional/ivy/statistical/einsum/einsum_container", "functional/ivy/statistical/einsum/einsum_functional", "functional/ivy/statistical/max", "functional/ivy/statistical/max/max_array", "functional/ivy/statistical/max/max_container", "functional/ivy/statistical/max/max_functional", "functional/ivy/statistical/mean", "functional/ivy/statistical/mean/mean_array", "functional/ivy/statistical/mean/mean_container", "functional/ivy/statistical/mean/mean_functional", "functional/ivy/statistical/min", "functional/ivy/statistical/min/min_array", "functional/ivy/statistical/min/min_container", "functional/ivy/statistical/min/min_functional", "functional/ivy/statistical/prod", "functional/ivy/statistical/prod/prod_array", "functional/ivy/statistical/prod/prod_container", "functional/ivy/statistical/prod/prod_functional", "functional/ivy/statistical/std", "functional/ivy/statistical/std/std_array", "functional/ivy/statistical/std/std_container", "functional/ivy/statistical/std/std_functional", "functional/ivy/statistical/sum", "functional/ivy/statistical/sum/sum_array", "functional/ivy/statistical/sum/sum_container", "functional/ivy/statistical/sum/sum_functional", "functional/ivy/statistical/var", "functional/ivy/statistical/var/var_array", "functional/ivy/statistical/var/var_container", "functional/ivy/statistical/var/var_functional", "functional/ivy/utility", "functional/ivy/utility/all", "functional/ivy/utility/all/all_array", "functional/ivy/utility/all/all_container", "functional/ivy/utility/all/all_functional", "functional/ivy/utility/any", "functional/ivy/utility/any/any_array", "functional/ivy/utility/any/any_container", "functional/ivy/utility/any/any_functional", "index", "index_append", "index_prepend", "inspection", "inspection/add_array_specs", "inspection/fn_array_spec", "roadmap", "stateful/activations", "stateful/activations/GEGLU", "stateful/activations/GELU", "stateful/converters", "stateful/converters/to_ivy_module", "stateful/initializers", "stateful/initializers/Constant:\n    def __init__", "stateful/initializers/FirstLayerSiren", "stateful/initializers/GlorotUniform", "stateful/initializers/KaimingNormal:\n    def __init__", "stateful/initializers/Ones", "stateful/initializers/Siren", "stateful/initializers/Uniform:\n    def __init__", "stateful/initializers/Zeros", "stateful/layers", "stateful/layers/Conv1D", "stateful/layers/Conv1DTranspose", "stateful/layers/Conv2D", "stateful/layers/Conv2DTranspose", "stateful/layers/Conv3D", "stateful/layers/Conv3DTranspose", "stateful/layers/DepthwiseConv2D", "stateful/layers/Dropout", "stateful/layers/LSTM", "stateful/layers/Linear", "stateful/layers/MultiHeadAttention", "stateful/module", "stateful/module/Module", "stateful/norms", "stateful/norms/LayerNorm", "stateful/optimizers", "stateful/optimizers/Adam", "stateful/optimizers/LAMB", "stateful/optimizers/LARS", "stateful/optimizers/Optimizer", "stateful/optimizers/SGD", "stateful/sequential", "stateful/sequential/Sequential", "supported_frameworks", "verbosity", "verbosity/cprint"], "filenames": ["array/activations.rst", "array/activations/ArrayWithActivations.rst", "array/array_methods.rst", "array/array_methods/abs.rst", "array/array_methods/acos.rst", "array/array_methods/acosh.rst", "array/array_methods/add.rst", "array/array_methods/all.rst", "array/array_methods/all_equal.rst", "array/array_methods/any.rst", "array/array_methods/argsort.rst", "array/array_methods/asin.rst", "array/array_methods/asinh.rst", "array/array_methods/atan.rst", "array/array_methods/atan2.rst", "array/array_methods/atanh.rst", "array/array_methods/binary_cross_entropy.rst", "array/array_methods/bitwise_and.rst", "array/array_methods/bitwise_invert.rst", "array/array_methods/bitwise_left_shift.rst", "array/array_methods/bitwise_or.rst", "array/array_methods/bitwise_right_shift.rst", "array/array_methods/bitwise_xor.rst", "array/array_methods/can_cast.rst", "array/array_methods/ceil.rst", "array/array_methods/cholesky.rst", "array/array_methods/clip.rst", "array/array_methods/concat.rst", "array/array_methods/constant_pad.rst", "array/array_methods/cos.rst", "array/array_methods/cosh.rst", "array/array_methods/cross.rst", "array/array_methods/cross_entropy.rst", "array/array_methods/det.rst", "array/array_methods/diagonal.rst", "array/array_methods/divide.rst", "array/array_methods/eigh.rst", "array/array_methods/eigvalsh.rst", "array/array_methods/einsum.rst", "array/array_methods/equal.rst", "array/array_methods/erf.rst", "array/array_methods/exp.rst", "array/array_methods/expand_dims.rst", "array/array_methods/expm1.rst", "array/array_methods/flip.rst", "array/array_methods/floor.rst", "array/array_methods/floor_divide.rst", "array/array_methods/gather_nd.rst", "array/array_methods/greater.rst", "array/array_methods/greater_equal.rst", "array/array_methods/inv.rst", "array/array_methods/isfinite.rst", "array/array_methods/isinf.rst", "array/array_methods/isnan.rst", "array/array_methods/layer_norm.rst", "array/array_methods/less.rst", "array/array_methods/less_equal.rst", "array/array_methods/log.rst", "array/array_methods/log10.rst", "array/array_methods/log1p.rst", "array/array_methods/log2.rst", "array/array_methods/logaddexp.rst", "array/array_methods/logical_and.rst", "array/array_methods/logical_not.rst", "array/array_methods/logical_or.rst", "array/array_methods/logical_xor.rst", "array/array_methods/matmul.rst", "array/array_methods/matrix_norm.rst", "array/array_methods/matrix_rank.rst", "array/array_methods/matrix_transpose.rst", "array/array_methods/max.rst", "array/array_methods/mean.rst", "array/array_methods/min.rst", "array/array_methods/multiply.rst", "array/array_methods/negative.rst", "array/array_methods/not_equal.rst", "array/array_methods/outer.rst", "array/array_methods/permute_dims.rst", "array/array_methods/pinv.rst", "array/array_methods/positive.rst", "array/array_methods/pow.rst", "array/array_methods/prod.rst", "array/array_methods/qr.rst", "array/array_methods/remainder.rst", "array/array_methods/repeat.rst", "array/array_methods/reshape.rst", "array/array_methods/roll.rst", "array/array_methods/round.rst", "array/array_methods/sign.rst", "array/array_methods/sin.rst", "array/array_methods/sinh.rst", "array/array_methods/solve.rst", "array/array_methods/sort.rst", "array/array_methods/sparse_cross_entropy.rst", "array/array_methods/sqrt.rst", "array/array_methods/square.rst", "array/array_methods/squeeze.rst", "array/array_methods/stack.rst", "array/array_methods/std.rst", "array/array_methods/subtract.rst", "array/array_methods/sum.rst", "array/array_methods/svd.rst", "array/array_methods/svdvals.rst", "array/array_methods/swapaxes.rst", "array/array_methods/tan.rst", "array/array_methods/tanh.rst", "array/array_methods/tensordot.rst", "array/array_methods/tile.rst", "array/array_methods/trace.rst", "array/array_methods/trunc.rst", "array/array_methods/var.rst", "array/array_methods/vecdot.rst", "array/array_methods/vector_norm.rst", "array/array_methods/vector_to_skew_symmetric_matrix.rst", "array/array_methods/zero_pad.rst", "array/conversions.rst", "array/conversions/args_to_ivy.rst", "array/conversions/args_to_native.rst", "array/conversions/to_ivy.rst", "array/conversions/to_native.rst", "array/creation.rst", "array/creation/ArrayWithCreation.rst", "array/data_type.rst", "array/data_type/ArrayWithDataTypes.rst", "array/device.rst", "array/device/ArrayWithDevice.rst", "array/elementwise.rst", "array/elementwise/ArrayWithElementwise.rst", "array/general.rst", "array/general/ArrayWithGeneral.rst", "array/gradients.rst", "array/gradients/ArrayWithGradients.rst", "array/image.rst", "array/image/ArrayWithImage.rst", "array/layers.rst", "array/layers/ArrayWithLayers.rst", "array/linear_algebra.rst", "array/linear_algebra/ArrayWithLinearAlgebra.rst", "array/losses.rst", "array/losses/ArrayWithLosses.rst", "array/manipulation.rst", "array/manipulation/ArrayWithManipulation.rst", "array/norms.rst", "array/norms/ArrayWithNorms.rst", "array/random.rst", "array/random/ArrayWithRandom.rst", "array/searching.rst", "array/searching/ArrayWithSearching.rst", "array/set.rst", "array/set/ArrayWithSet.rst", "array/sorting.rst", "array/sorting/ArrayWithSorting.rst", "array/statistical.rst", "array/statistical/ArrayWithStatistical.rst", "array/utility.rst", "array/utility/ArrayWithUtility.rst", "array/wrapping.rst", "array/wrapping/add_ivy_array_instance_methods.rst", "backend_handler.rst", "backend_handler/ContextManager:\n    def __init__.rst", "backend_handler/choose_random_backend.rst", "backend_handler/clear_backend_stack.rst", "backend_handler/current_backend.rst", "backend_handler/get_backend.rst", "backend_handler/set_backend.rst", "backend_handler/try_import_ivy_jax.rst", "backend_handler/try_import_ivy_mxnet.rst", "backend_handler/try_import_ivy_numpy.rst", "backend_handler/try_import_ivy_tf.rst", "backend_handler/try_import_ivy_torch.rst", "backend_handler/unset_backend.rst", "background.rst", "background/ml_explosion.rst", "background/standardization.rst", "background/why_unify.rst", "container/activations.rst", "container/activations/ContainerWithActivations.rst", "container/base.rst", "container/base/ContainerBase.rst", "container/container.rst", "container/container/Container.rst", "container/container/MultiDevContainer.rst", "container/container_methods.rst", "container/container_methods/abs.rst", "container/container_methods/acos.rst", "container/container_methods/acosh.rst", "container/container_methods/adam_update.rst", "container/container_methods/add.rst", "container/container_methods/all.rst", "container/container_methods/all_equal.rst", "container/container_methods/any.rst", "container/container_methods/argsort.rst", "container/container_methods/asin.rst", "container/container_methods/asinh.rst", "container/container_methods/at_dev.rst", "container/container_methods/at_devs.rst", "container/container_methods/atan.rst", "container/container_methods/atan2.rst", "container/container_methods/atanh.rst", "container/container_methods/binary_cross_entropy.rst", "container/container_methods/bitwise_and.rst", "container/container_methods/bitwise_invert.rst", "container/container_methods/bitwise_left_shift.rst", "container/container_methods/bitwise_or.rst", "container/container_methods/bitwise_right_shift.rst", "container/container_methods/bitwise_xor.rst", "container/container_methods/can_cast.rst", "container/container_methods/ceil.rst", "container/container_methods/clip.rst", "container/container_methods/clip_vector_norm.rst", "container/container_methods/concat.rst", "container/container_methods/constant_pad.rst", "container/container_methods/cos.rst", "container/container_methods/cosh.rst", "container/container_methods/cross_entropy.rst", "container/container_methods/divide.rst", "container/container_methods/einsum.rst", "container/container_methods/equal.rst", "container/container_methods/erf.rst", "container/container_methods/exp.rst", "container/container_methods/expand_dims.rst", "container/container_methods/expm1.rst", "container/container_methods/flip.rst", "container/container_methods/floor.rst", "container/container_methods/floor_divide.rst", "container/container_methods/gather_nd.rst", "container/container_methods/gradient_descent_update.rst", "container/container_methods/greater.rst", "container/container_methods/greater_equal.rst", "container/container_methods/isfinite.rst", "container/container_methods/isinf.rst", "container/container_methods/isnan.rst", "container/container_methods/lamb_update.rst", "container/container_methods/lars_update.rst", "container/container_methods/layer_norm.rst", "container/container_methods/less.rst", "container/container_methods/less_equal.rst", "container/container_methods/log.rst", "container/container_methods/log10.rst", "container/container_methods/log1p.rst", "container/container_methods/log2.rst", "container/container_methods/logaddexp.rst", "container/container_methods/logical_and.rst", "container/container_methods/logical_not.rst", "container/container_methods/logical_or.rst", "container/container_methods/logical_xor.rst", "container/container_methods/matmul.rst", "container/container_methods/max.rst", "container/container_methods/mean.rst", "container/container_methods/min.rst", "container/container_methods/multiply.rst", "container/container_methods/negative.rst", "container/container_methods/not_equal.rst", "container/container_methods/optimizer_update.rst", "container/container_methods/permute_dims.rst", "container/container_methods/positive.rst", "container/container_methods/pow.rst", "container/container_methods/prod.rst", "container/container_methods/random_uniform.rst", "container/container_methods/remainder.rst", "container/container_methods/repeat.rst", "container/container_methods/reshape.rst", "container/container_methods/roll.rst", "container/container_methods/round.rst", "container/container_methods/sign.rst", "container/container_methods/sin.rst", "container/container_methods/sinh.rst", "container/container_methods/sort.rst", "container/container_methods/sparse_cross_entropy.rst", "container/container_methods/sqrt.rst", "container/container_methods/square.rst", "container/container_methods/squeeze.rst", "container/container_methods/stack.rst", "container/container_methods/static_adam_update.rst", "container/container_methods/static_add.rst", "container/container_methods/static_all_equal.rst", "container/container_methods/static_argsort.rst", "container/container_methods/static_binary_cross_entropy.rst", "container/container_methods/static_can_cast.rst", "container/container_methods/static_clip.rst", "container/container_methods/static_cross_entropy.rst", "container/container_methods/static_divide.rst", "container/container_methods/static_gather_nd.rst", "container/container_methods/static_gradient_descent_update.rst", "container/container_methods/static_lamb_update.rst", "container/container_methods/static_lars_update.rst", "container/container_methods/static_multiply.rst", "container/container_methods/static_optimizer_update.rst", "container/container_methods/static_randint.rst", "container/container_methods/static_random_uniform.rst", "container/container_methods/static_roll.rst", "container/container_methods/static_sort.rst", "container/container_methods/static_sparse_cross_entropy.rst", "container/container_methods/static_subtract.rst", "container/container_methods/static_tan.rst", "container/container_methods/std.rst", "container/container_methods/subtract.rst", "container/container_methods/sum.rst", "container/container_methods/swapaxes.rst", "container/container_methods/tan.rst", "container/container_methods/tanh.rst", "container/container_methods/tile.rst", "container/container_methods/trunc.rst", "container/container_methods/var.rst", "container/container_methods/zero_pad.rst", "container/creation.rst", "container/creation/ContainerWithCreation.rst", "container/data_type.rst", "container/data_type/ContainerWithDataTypes.rst", "container/device.rst", "container/device/ContainerWithDevice.rst", "container/elementwise.rst", "container/elementwise/ContainerWithElementwise.rst", "container/general.rst", "container/general/ContainerWithGeneral.rst", "container/gradients.rst", "container/gradients/ContainerWithGradients.rst", "container/image.rst", "container/image/ContainerWithImage.rst", "container/layers.rst", "container/layers/ContainerWithLayers.rst", "container/linear_algebra.rst", "container/linear_algebra/ContainerWithLinearAlgebra.rst", "container/losses.rst", "container/losses/ContainerWithLosses.rst", "container/manipulation.rst", "container/manipulation/ContainerWithManipulation.rst", "container/norms.rst", "container/norms/ContainerWithNorms.rst", "container/random.rst", "container/random/ContainerWithRandom.rst", "container/searching.rst", "container/searching/ContainerWithSearching.rst", "container/set.rst", "container/set/ContainerWithSet.rst", "container/sorting.rst", "container/sorting/ContainerWithSorting.rst", "container/statistical.rst", "container/statistical/ContainerWithStatistical.rst", "container/utility.rst", "container/utility/ContainerWithUtility.rst", "container/wrapping.rst", "container/wrapping/add_ivy_container_instance_methods.rst", "contributing.rst", "contributing/0_setting_up.rst", "contributing/1_the_basics.rst", "contributing/4_open_tasks.rst", "contributing/building_the_docs.rst", "deep_dive.rst", "deep_dive/0_navigating_the_code.rst", "deep_dive/10_docstrings.rst", "deep_dive/11_docstring_examples.rst", "deep_dive/12_array_api_tests.rst", "deep_dive/13_ivy_tests.rst", "deep_dive/1_function_types.rst", "deep_dive/2_backend_setting.rst", "deep_dive/3_function_wrapping.rst", "deep_dive/4_arrays.rst", "deep_dive/5_containers.rst", "deep_dive/6_data_types.rst", "deep_dive/7_devices.rst", "deep_dive/8_inplace_updates.rst", "deep_dive/9_function_arguments.rst", "design.rst", "design/building_blocks.rst", "design/ivy_as_a_framework.rst", "design/ivy_as_a_framework/ivy_array.rst", "design/ivy_as_a_framework/ivy_container.rst", "design/ivy_as_a_framework/ivy_stateful_api.rst", "design/ivy_as_a_transpiler.rst", "docs/ivy.rst", "docs/ivy_builder.rst", "docs/ivy_ecosystem.rst", "docs/ivy_gym.rst", "docs/ivy_mech.rst", "docs/ivy_memory.rst", "docs/ivy_models.rst", "docs/ivy_robot.rst", "docs/ivy_vision.rst", "extensions.rst", "extensions/applied_libraries.rst", "faq.rst", "func_wrapper.rst", "func_wrapper/handle_nestable.rst", "func_wrapper/handle_out_argument.rst", "func_wrapper/infer_device.rst", "func_wrapper/infer_dtype.rst", "func_wrapper/inputs_to_ivy_arrays.rst", "func_wrapper/inputs_to_native_arrays.rst", "func_wrapper/outputs_to_ivy_arrays.rst", "func_wrapper/to_native_arrays_and_back.rst", "functional/ivy.rst", "functional/ivy/activations.rst", "functional/ivy/activations/gelu.rst", "functional/ivy/activations/leaky_relu.rst", "functional/ivy/activations/relu.rst", "functional/ivy/activations/sigmoid.rst", "functional/ivy/activations/softmax.rst", "functional/ivy/activations/softplus.rst", "functional/ivy/activations/tanh.rst", "functional/ivy/compilation.rst", "functional/ivy/compilation/compile.rst", "functional/ivy/constants.rst", "functional/ivy/creation.rst", "functional/ivy/creation/arange.rst", "functional/ivy/creation/asarray.rst", "functional/ivy/creation/empty.rst", "functional/ivy/creation/empty_like.rst", "functional/ivy/creation/eye.rst", "functional/ivy/creation/from_dlpack.rst", "functional/ivy/creation/full.rst", "functional/ivy/creation/full_like.rst", "functional/ivy/creation/linspace.rst", "functional/ivy/creation/logspace.rst", "functional/ivy/creation/meshgrid.rst", "functional/ivy/creation/native_array.rst", "functional/ivy/creation/ones.rst", "functional/ivy/creation/ones_like.rst", "functional/ivy/creation/tril.rst", "functional/ivy/creation/triu.rst", "functional/ivy/creation/zeros.rst", "functional/ivy/creation/zeros_like.rst", "functional/ivy/data_type.rst", "functional/ivy/data_type/DefaultDtype:\n    \"\"\"\"\"\"\n\n    # noinspection PyShadowingNames\n    def __init__.rst", "functional/ivy/data_type/DefaultFloatDtype:\n    \"\"\"\"\"\"\n\n    # noinspection PyShadowingNames\n    def __init__.rst", "functional/ivy/data_type/DefaultIntDtype:\n    \"\"\"\"\"\"\n\n    # noinspection PyShadowingNames\n    def __init__.rst", "functional/ivy/data_type/as_ivy_dtype.rst", "functional/ivy/data_type/as_native_dtype.rst", "functional/ivy/data_type/astype.rst", "functional/ivy/data_type/broadcast_arrays.rst", "functional/ivy/data_type/broadcast_to.rst", "functional/ivy/data_type/can_cast.rst", "functional/ivy/data_type/can_cast/can_cast_array.rst", "functional/ivy/data_type/can_cast/can_cast_container.rst", "functional/ivy/data_type/can_cast/can_cast_functional.rst", "functional/ivy/data_type/can_cast/static_can_cast_container.rst", "functional/ivy/data_type/closest_valid_dtype.rst", "functional/ivy/data_type/default_dtype.rst", "functional/ivy/data_type/default_float_dtype.rst", "functional/ivy/data_type/default_int_dtype.rst", "functional/ivy/data_type/dtype.rst", "functional/ivy/data_type/dtype_bits.rst", "functional/ivy/data_type/finfo.rst", "functional/ivy/data_type/function_supported_dtypes.rst", "functional/ivy/data_type/function_unsupported_dtypes.rst", "functional/ivy/data_type/iinfo.rst", "functional/ivy/data_type/invalid_dtype.rst", "functional/ivy/data_type/is_float_dtype.rst", "functional/ivy/data_type/is_int_dtype.rst", "functional/ivy/data_type/promote_types.rst", "functional/ivy/data_type/result_type.rst", "functional/ivy/data_type/set_default_dtype.rst", "functional/ivy/data_type/set_default_float_dtype.rst", "functional/ivy/data_type/set_default_int_dtype.rst", "functional/ivy/data_type/type_promote_arrays.rst", "functional/ivy/data_type/unset_default_dtype.rst", "functional/ivy/data_type/unset_default_float_dtype.rst", "functional/ivy/data_type/unset_default_int_dtype.rst", "functional/ivy/data_type/valid_dtype.rst", "functional/ivy/device.rst", "functional/ivy/device/DefaultDevice:\n    \"\"\"\"\"\"\n\n    # noinspection PyShadowingNames\n    def __init__.rst", "functional/ivy/device/DevClonedItem.rst", "functional/ivy/device/DevClonedIter.rst", "functional/ivy/device/DevClonedNest.rst", "functional/ivy/device/DevDistItem.rst", "functional/ivy/device/DevDistIter.rst", "functional/ivy/device/DevDistNest.rst", "functional/ivy/device/DevManager:\n    \"\"\"\"\"\"\n\n    def __init__.rst", "functional/ivy/device/DevMapper.rst", "functional/ivy/device/DevMapperMultiProc.rst", "functional/ivy/device/MultiDev:\n    def __init__.rst", "functional/ivy/device/MultiDevItem.rst", "functional/ivy/device/MultiDevIter.rst", "functional/ivy/device/MultiDevNest.rst", "functional/ivy/device/Profiler.rst", "functional/ivy/device/as_ivy_dev.rst", "functional/ivy/device/as_native_dev.rst", "functional/ivy/device/clear_mem_on_dev.rst", "functional/ivy/device/default_device.rst", "functional/ivy/device/dev.rst", "functional/ivy/device/dev_clone.rst", "functional/ivy/device/dev_clone_array.rst", "functional/ivy/device/dev_clone_iter.rst", "functional/ivy/device/dev_clone_nest.rst", "functional/ivy/device/dev_dist.rst", "functional/ivy/device/dev_dist_array.rst", "functional/ivy/device/dev_dist_iter.rst", "functional/ivy/device/dev_dist_nest.rst", "functional/ivy/device/dev_unify.rst", "functional/ivy/device/dev_unify_array.rst", "functional/ivy/device/dev_unify_iter.rst", "functional/ivy/device/dev_unify_nest.rst", "functional/ivy/device/dev_util.rst", "functional/ivy/device/get_all_ivy_arrays_on_dev.rst", "functional/ivy/device/gpu_is_available.rst", "functional/ivy/device/num_cpu_cores.rst", "functional/ivy/device/num_gpus.rst", "functional/ivy/device/num_ivy_arrays_on_dev.rst", "functional/ivy/device/percent_used_mem_on_dev.rst", "functional/ivy/device/print_all_ivy_arrays_on_dev.rst", "functional/ivy/device/set_default_device.rst", "functional/ivy/device/set_split_factor.rst", "functional/ivy/device/split_factor.rst", "functional/ivy/device/split_func_call.rst", "functional/ivy/device/to_device.rst", "functional/ivy/device/total_mem_on_dev.rst", "functional/ivy/device/tpu_is_available.rst", "functional/ivy/device/unset_default_device.rst", "functional/ivy/device/used_mem_on_dev.rst", "functional/ivy/elementwise.rst", "functional/ivy/elementwise/abs.rst", "functional/ivy/elementwise/abs/abs_array.rst", "functional/ivy/elementwise/abs/abs_container.rst", "functional/ivy/elementwise/abs/abs_functional.rst", "functional/ivy/elementwise/acos.rst", "functional/ivy/elementwise/acos/acos_array.rst", "functional/ivy/elementwise/acos/acos_container.rst", "functional/ivy/elementwise/acos/acos_functional.rst", "functional/ivy/elementwise/acosh.rst", "functional/ivy/elementwise/acosh/acosh_array.rst", "functional/ivy/elementwise/acosh/acosh_container.rst", "functional/ivy/elementwise/acosh/acosh_functional.rst", "functional/ivy/elementwise/add.rst", "functional/ivy/elementwise/add/add_array.rst", "functional/ivy/elementwise/add/add_container.rst", "functional/ivy/elementwise/add/add_functional.rst", "functional/ivy/elementwise/add/static_add_container.rst", "functional/ivy/elementwise/asin.rst", "functional/ivy/elementwise/asin/asin_array.rst", "functional/ivy/elementwise/asin/asin_container.rst", "functional/ivy/elementwise/asin/asin_functional.rst", "functional/ivy/elementwise/asinh.rst", "functional/ivy/elementwise/asinh/asinh_array.rst", "functional/ivy/elementwise/asinh/asinh_container.rst", "functional/ivy/elementwise/asinh/asinh_functional.rst", "functional/ivy/elementwise/atan.rst", "functional/ivy/elementwise/atan/atan_array.rst", "functional/ivy/elementwise/atan/atan_container.rst", "functional/ivy/elementwise/atan/atan_functional.rst", "functional/ivy/elementwise/atan2.rst", "functional/ivy/elementwise/atan2/atan2_array.rst", "functional/ivy/elementwise/atan2/atan2_container.rst", "functional/ivy/elementwise/atan2/atan2_functional.rst", "functional/ivy/elementwise/atanh.rst", "functional/ivy/elementwise/atanh/atanh_array.rst", "functional/ivy/elementwise/atanh/atanh_container.rst", "functional/ivy/elementwise/atanh/atanh_functional.rst", "functional/ivy/elementwise/bitwise_and.rst", "functional/ivy/elementwise/bitwise_and/bitwise_and_array.rst", "functional/ivy/elementwise/bitwise_and/bitwise_and_container.rst", "functional/ivy/elementwise/bitwise_and/bitwise_and_functional.rst", "functional/ivy/elementwise/bitwise_invert.rst", "functional/ivy/elementwise/bitwise_invert/bitwise_invert_array.rst", "functional/ivy/elementwise/bitwise_invert/bitwise_invert_container.rst", "functional/ivy/elementwise/bitwise_invert/bitwise_invert_functional.rst", "functional/ivy/elementwise/bitwise_left_shift.rst", "functional/ivy/elementwise/bitwise_left_shift/bitwise_left_shift_array.rst", "functional/ivy/elementwise/bitwise_left_shift/bitwise_left_shift_container.rst", "functional/ivy/elementwise/bitwise_left_shift/bitwise_left_shift_functional.rst", "functional/ivy/elementwise/bitwise_or.rst", "functional/ivy/elementwise/bitwise_or/bitwise_or_array.rst", "functional/ivy/elementwise/bitwise_or/bitwise_or_container.rst", "functional/ivy/elementwise/bitwise_or/bitwise_or_functional.rst", "functional/ivy/elementwise/bitwise_right_shift.rst", "functional/ivy/elementwise/bitwise_right_shift/bitwise_right_shift_array.rst", "functional/ivy/elementwise/bitwise_right_shift/bitwise_right_shift_container.rst", "functional/ivy/elementwise/bitwise_right_shift/bitwise_right_shift_functional.rst", "functional/ivy/elementwise/bitwise_xor.rst", "functional/ivy/elementwise/bitwise_xor/bitwise_xor_array.rst", "functional/ivy/elementwise/bitwise_xor/bitwise_xor_container.rst", "functional/ivy/elementwise/bitwise_xor/bitwise_xor_functional.rst", "functional/ivy/elementwise/ceil.rst", "functional/ivy/elementwise/ceil/ceil_array.rst", "functional/ivy/elementwise/ceil/ceil_container.rst", "functional/ivy/elementwise/ceil/ceil_functional.rst", "functional/ivy/elementwise/cos.rst", "functional/ivy/elementwise/cos/cos_array.rst", "functional/ivy/elementwise/cos/cos_container.rst", "functional/ivy/elementwise/cos/cos_functional.rst", "functional/ivy/elementwise/cosh.rst", "functional/ivy/elementwise/cosh/cosh_array.rst", "functional/ivy/elementwise/cosh/cosh_container.rst", "functional/ivy/elementwise/cosh/cosh_functional.rst", "functional/ivy/elementwise/divide.rst", "functional/ivy/elementwise/divide/divide_array.rst", "functional/ivy/elementwise/divide/divide_container.rst", "functional/ivy/elementwise/divide/divide_functional.rst", "functional/ivy/elementwise/divide/static_divide_container.rst", "functional/ivy/elementwise/equal.rst", "functional/ivy/elementwise/equal/equal_array.rst", "functional/ivy/elementwise/equal/equal_container.rst", "functional/ivy/elementwise/equal/equal_functional.rst", "functional/ivy/elementwise/erf.rst", "functional/ivy/elementwise/erf/erf_array.rst", "functional/ivy/elementwise/erf/erf_container.rst", "functional/ivy/elementwise/erf/erf_functional.rst", "functional/ivy/elementwise/exp.rst", "functional/ivy/elementwise/exp/exp_array.rst", "functional/ivy/elementwise/exp/exp_container.rst", "functional/ivy/elementwise/exp/exp_functional.rst", "functional/ivy/elementwise/expm1.rst", "functional/ivy/elementwise/expm1/expm1_array.rst", "functional/ivy/elementwise/expm1/expm1_container.rst", "functional/ivy/elementwise/expm1/expm1_functional.rst", "functional/ivy/elementwise/floor.rst", "functional/ivy/elementwise/floor/floor_array.rst", "functional/ivy/elementwise/floor/floor_container.rst", "functional/ivy/elementwise/floor/floor_functional.rst", "functional/ivy/elementwise/floor_divide.rst", "functional/ivy/elementwise/floor_divide/floor_divide_array.rst", "functional/ivy/elementwise/floor_divide/floor_divide_container.rst", "functional/ivy/elementwise/floor_divide/floor_divide_functional.rst", "functional/ivy/elementwise/greater.rst", "functional/ivy/elementwise/greater/greater_array.rst", "functional/ivy/elementwise/greater/greater_container.rst", "functional/ivy/elementwise/greater/greater_functional.rst", "functional/ivy/elementwise/greater_equal.rst", "functional/ivy/elementwise/greater_equal/greater_equal_array.rst", "functional/ivy/elementwise/greater_equal/greater_equal_container.rst", "functional/ivy/elementwise/greater_equal/greater_equal_functional.rst", "functional/ivy/elementwise/isfinite.rst", "functional/ivy/elementwise/isfinite/isfinite_array.rst", "functional/ivy/elementwise/isfinite/isfinite_container.rst", "functional/ivy/elementwise/isfinite/isfinite_functional.rst", "functional/ivy/elementwise/isinf.rst", "functional/ivy/elementwise/isinf/isinf_array.rst", "functional/ivy/elementwise/isinf/isinf_container.rst", "functional/ivy/elementwise/isinf/isinf_functional.rst", "functional/ivy/elementwise/isnan.rst", "functional/ivy/elementwise/isnan/isnan_array.rst", "functional/ivy/elementwise/isnan/isnan_container.rst", "functional/ivy/elementwise/isnan/isnan_functional.rst", "functional/ivy/elementwise/less.rst", "functional/ivy/elementwise/less/less_array.rst", "functional/ivy/elementwise/less/less_container.rst", "functional/ivy/elementwise/less/less_functional.rst", "functional/ivy/elementwise/less_equal.rst", "functional/ivy/elementwise/less_equal/less_equal_array.rst", "functional/ivy/elementwise/less_equal/less_equal_container.rst", "functional/ivy/elementwise/less_equal/less_equal_functional.rst", "functional/ivy/elementwise/log.rst", "functional/ivy/elementwise/log/log_array.rst", "functional/ivy/elementwise/log/log_container.rst", "functional/ivy/elementwise/log/log_functional.rst", "functional/ivy/elementwise/log10.rst", "functional/ivy/elementwise/log10/log10_array.rst", "functional/ivy/elementwise/log10/log10_container.rst", "functional/ivy/elementwise/log10/log10_functional.rst", "functional/ivy/elementwise/log1p.rst", "functional/ivy/elementwise/log1p/log1p_array.rst", "functional/ivy/elementwise/log1p/log1p_container.rst", "functional/ivy/elementwise/log1p/log1p_functional.rst", "functional/ivy/elementwise/log2.rst", "functional/ivy/elementwise/log2/log2_array.rst", "functional/ivy/elementwise/log2/log2_container.rst", "functional/ivy/elementwise/log2/log2_functional.rst", "functional/ivy/elementwise/logaddexp.rst", "functional/ivy/elementwise/logaddexp/logaddexp_array.rst", "functional/ivy/elementwise/logaddexp/logaddexp_container.rst", "functional/ivy/elementwise/logaddexp/logaddexp_functional.rst", "functional/ivy/elementwise/logical_and.rst", "functional/ivy/elementwise/logical_and/logical_and_array.rst", "functional/ivy/elementwise/logical_and/logical_and_container.rst", "functional/ivy/elementwise/logical_and/logical_and_functional.rst", "functional/ivy/elementwise/logical_not.rst", "functional/ivy/elementwise/logical_not/logical_not_array.rst", "functional/ivy/elementwise/logical_not/logical_not_container.rst", "functional/ivy/elementwise/logical_not/logical_not_functional.rst", "functional/ivy/elementwise/logical_or.rst", "functional/ivy/elementwise/logical_or/logical_or_array.rst", "functional/ivy/elementwise/logical_or/logical_or_container.rst", "functional/ivy/elementwise/logical_or/logical_or_functional.rst", "functional/ivy/elementwise/logical_xor.rst", "functional/ivy/elementwise/logical_xor/logical_xor_array.rst", "functional/ivy/elementwise/logical_xor/logical_xor_container.rst", "functional/ivy/elementwise/logical_xor/logical_xor_functional.rst", "functional/ivy/elementwise/maximum.rst", "functional/ivy/elementwise/minimum.rst", "functional/ivy/elementwise/multiply.rst", "functional/ivy/elementwise/multiply/multiply_array.rst", "functional/ivy/elementwise/multiply/multiply_container.rst", "functional/ivy/elementwise/multiply/multiply_functional.rst", "functional/ivy/elementwise/multiply/static_multiply_container.rst", "functional/ivy/elementwise/negative.rst", "functional/ivy/elementwise/negative/negative_array.rst", "functional/ivy/elementwise/negative/negative_container.rst", "functional/ivy/elementwise/negative/negative_functional.rst", "functional/ivy/elementwise/not_equal.rst", "functional/ivy/elementwise/not_equal/not_equal_array.rst", "functional/ivy/elementwise/not_equal/not_equal_container.rst", "functional/ivy/elementwise/not_equal/not_equal_functional.rst", "functional/ivy/elementwise/positive.rst", "functional/ivy/elementwise/positive/positive_array.rst", "functional/ivy/elementwise/positive/positive_container.rst", "functional/ivy/elementwise/positive/positive_functional.rst", "functional/ivy/elementwise/pow.rst", "functional/ivy/elementwise/pow/pow_array.rst", "functional/ivy/elementwise/pow/pow_container.rst", "functional/ivy/elementwise/pow/pow_functional.rst", "functional/ivy/elementwise/remainder.rst", "functional/ivy/elementwise/remainder/remainder_array.rst", "functional/ivy/elementwise/remainder/remainder_container.rst", "functional/ivy/elementwise/remainder/remainder_functional.rst", "functional/ivy/elementwise/round.rst", "functional/ivy/elementwise/round/round_array.rst", "functional/ivy/elementwise/round/round_container.rst", "functional/ivy/elementwise/round/round_functional.rst", "functional/ivy/elementwise/sign.rst", "functional/ivy/elementwise/sign/sign_array.rst", "functional/ivy/elementwise/sign/sign_container.rst", "functional/ivy/elementwise/sign/sign_functional.rst", "functional/ivy/elementwise/sin.rst", "functional/ivy/elementwise/sin/sin_array.rst", "functional/ivy/elementwise/sin/sin_container.rst", "functional/ivy/elementwise/sin/sin_functional.rst", "functional/ivy/elementwise/sinh.rst", "functional/ivy/elementwise/sinh/sinh_array.rst", "functional/ivy/elementwise/sinh/sinh_container.rst", "functional/ivy/elementwise/sinh/sinh_functional.rst", "functional/ivy/elementwise/sqrt.rst", "functional/ivy/elementwise/sqrt/sqrt_array.rst", "functional/ivy/elementwise/sqrt/sqrt_container.rst", "functional/ivy/elementwise/sqrt/sqrt_functional.rst", "functional/ivy/elementwise/square.rst", "functional/ivy/elementwise/square/square_array.rst", "functional/ivy/elementwise/square/square_container.rst", "functional/ivy/elementwise/square/square_functional.rst", "functional/ivy/elementwise/subtract.rst", "functional/ivy/elementwise/subtract/static_subtract_container.rst", "functional/ivy/elementwise/subtract/subtract_array.rst", "functional/ivy/elementwise/subtract/subtract_container.rst", "functional/ivy/elementwise/subtract/subtract_functional.rst", "functional/ivy/elementwise/tan.rst", "functional/ivy/elementwise/tan/static_tan_container.rst", "functional/ivy/elementwise/tan/tan_array.rst", "functional/ivy/elementwise/tan/tan_container.rst", "functional/ivy/elementwise/tan/tan_functional.rst", "functional/ivy/elementwise/tanh.rst", "functional/ivy/elementwise/tanh/tanh_array.rst", "functional/ivy/elementwise/tanh/tanh_container.rst", "functional/ivy/elementwise/tanh/tanh_functional.rst", "functional/ivy/elementwise/trunc.rst", "functional/ivy/elementwise/trunc/trunc_array.rst", "functional/ivy/elementwise/trunc/trunc_container.rst", "functional/ivy/elementwise/trunc/trunc_functional.rst", "functional/ivy/general.rst", "functional/ivy/general/all_equal.rst", "functional/ivy/general/all_equal/all_equal_array.rst", "functional/ivy/general/all_equal/all_equal_container.rst", "functional/ivy/general/all_equal/all_equal_functional.rst", "functional/ivy/general/all_equal/static_all_equal_container.rst", "functional/ivy/general/arg_info.rst", "functional/ivy/general/arg_names.rst", "functional/ivy/general/array_equal.rst", "functional/ivy/general/arrays_equal.rst", "functional/ivy/general/assert_supports_inplace.rst", "functional/ivy/general/cache_fn.rst", "functional/ivy/general/clip_matrix_norm.rst", "functional/ivy/general/clip_vector_norm.rst", "functional/ivy/general/clip_vector_norm/clip_vector_norm_container.rst", "functional/ivy/general/clip_vector_norm/clip_vector_norm_functional.rst", "functional/ivy/general/container_types.rst", "functional/ivy/general/copy_array.rst", "functional/ivy/general/cumprod.rst", "functional/ivy/general/cumsum.rst", "functional/ivy/general/current_backend_str.rst", "functional/ivy/general/default.rst", "functional/ivy/general/einops_rearrange.rst", "functional/ivy/general/einops_reduce.rst", "functional/ivy/general/einops_repeat.rst", "functional/ivy/general/exists.rst", "functional/ivy/general/floormod.rst", "functional/ivy/general/fourier_encode.rst", "functional/ivy/general/gather.rst", "functional/ivy/general/gather_nd.rst", "functional/ivy/general/gather_nd/gather_nd_array.rst", "functional/ivy/general/gather_nd/gather_nd_container.rst", "functional/ivy/general/gather_nd/gather_nd_functional.rst", "functional/ivy/general/gather_nd/static_gather_nd_container.rst", "functional/ivy/general/get_all_arrays_in_memory.rst", "functional/ivy/general/get_min_base.rst", "functional/ivy/general/get_min_denominator.rst", "functional/ivy/general/get_num_dims.rst", "functional/ivy/general/get_referrers_recursive.rst", "functional/ivy/general/has_nans.rst", "functional/ivy/general/indices_where.rst", "functional/ivy/general/inplace_arrays_supported.rst", "functional/ivy/general/inplace_decrement.rst", "functional/ivy/general/inplace_increment.rst", "functional/ivy/general/inplace_update.rst", "functional/ivy/general/inplace_variables_supported.rst", "functional/ivy/general/is_array.rst", "functional/ivy/general/is_ivy_array.rst", "functional/ivy/general/is_ivy_container.rst", "functional/ivy/general/is_native_array.rst", "functional/ivy/general/match_kwargs.rst", "functional/ivy/general/multiprocessing.rst", "functional/ivy/general/num_arrays_in_memory.rst", "functional/ivy/general/one_hot.rst", "functional/ivy/general/print_all_arrays_in_memory.rst", "functional/ivy/general/queue_timeout.rst", "functional/ivy/general/scatter_flat.rst", "functional/ivy/general/scatter_nd.rst", "functional/ivy/general/set_min_base.rst", "functional/ivy/general/set_min_denominator.rst", "functional/ivy/general/set_queue_timeout.rst", "functional/ivy/general/set_tmp_dir.rst", "functional/ivy/general/shape.rst", "functional/ivy/general/shape_to_tuple.rst", "functional/ivy/general/stable_divide.rst", "functional/ivy/general/stable_pow.rst", "functional/ivy/general/supports_inplace.rst", "functional/ivy/general/tmp_dir.rst", "functional/ivy/general/to_list.rst", "functional/ivy/general/to_numpy.rst", "functional/ivy/general/to_scalar.rst", "functional/ivy/general/try_else_none.rst", "functional/ivy/general/unstack.rst", "functional/ivy/general/value_is_nan.rst", "functional/ivy/gradients.rst", "functional/ivy/gradients/GradientTracking:\n    \"\"\"\"\"\"\n\n    # noinspection PyShadowingNames\n    def __init__.rst", "functional/ivy/gradients/adam_step.rst", "functional/ivy/gradients/adam_update.rst", "functional/ivy/gradients/adam_update/adam_update_container.rst", "functional/ivy/gradients/adam_update/adam_update_functional.rst", "functional/ivy/gradients/adam_update/static_adam_update_container.rst", "functional/ivy/gradients/execute_with_gradients.rst", "functional/ivy/gradients/gradient_descent_update.rst", "functional/ivy/gradients/gradient_descent_update/gradient_descent_update_container.rst", "functional/ivy/gradients/gradient_descent_update/gradient_descent_update_functional.rst", "functional/ivy/gradients/gradient_descent_update/static_gradient_descent_update_container.rst", "functional/ivy/gradients/is_variable.rst", "functional/ivy/gradients/lamb_update.rst", "functional/ivy/gradients/lamb_update/lamb_update_container.rst", "functional/ivy/gradients/lamb_update/lamb_update_functional.rst", "functional/ivy/gradients/lamb_update/static_lamb_update_container.rst", "functional/ivy/gradients/lars_update.rst", "functional/ivy/gradients/lars_update/lars_update_container.rst", "functional/ivy/gradients/lars_update/lars_update_functional.rst", "functional/ivy/gradients/lars_update/static_lars_update_container.rst", "functional/ivy/gradients/optimizer_update.rst", "functional/ivy/gradients/optimizer_update/optimizer_update_container.rst", "functional/ivy/gradients/optimizer_update/optimizer_update_functional.rst", "functional/ivy/gradients/optimizer_update/static_optimizer_update_container.rst", "functional/ivy/gradients/set_with_grads.rst", "functional/ivy/gradients/stop_gradient.rst", "functional/ivy/gradients/unset_with_grads.rst", "functional/ivy/gradients/variable.rst", "functional/ivy/gradients/variable_data.rst", "functional/ivy/gradients/with_grads.rst", "functional/ivy/layers.rst", "functional/ivy/layers/conv1d.rst", "functional/ivy/layers/conv1d_transpose.rst", "functional/ivy/layers/conv2d.rst", "functional/ivy/layers/conv2d_transpose.rst", "functional/ivy/layers/conv3d.rst", "functional/ivy/layers/conv3d_transpose.rst", "functional/ivy/layers/depthwise_conv2d.rst", "functional/ivy/layers/dropout.rst", "functional/ivy/layers/linear.rst", "functional/ivy/layers/lstm_update.rst", "functional/ivy/layers/multi_head_attention.rst", "functional/ivy/layers/scaled_dot_product_attention.rst", "functional/ivy/linear_algebra.rst", "functional/ivy/linear_algebra/cholesky.rst", "functional/ivy/linear_algebra/cholesky/cholesky_array.rst", "functional/ivy/linear_algebra/cholesky/cholesky_functional.rst", "functional/ivy/linear_algebra/cross.rst", "functional/ivy/linear_algebra/cross/cross_array.rst", "functional/ivy/linear_algebra/cross/cross_functional.rst", "functional/ivy/linear_algebra/det.rst", "functional/ivy/linear_algebra/det/det_array.rst", "functional/ivy/linear_algebra/det/det_functional.rst", "functional/ivy/linear_algebra/diagonal.rst", "functional/ivy/linear_algebra/diagonal/diagonal_array.rst", "functional/ivy/linear_algebra/diagonal/diagonal_functional.rst", "functional/ivy/linear_algebra/eigh.rst", "functional/ivy/linear_algebra/eigh/eigh_array.rst", "functional/ivy/linear_algebra/eigh/eigh_functional.rst", "functional/ivy/linear_algebra/eigvalsh.rst", "functional/ivy/linear_algebra/eigvalsh/eigvalsh_array.rst", "functional/ivy/linear_algebra/eigvalsh/eigvalsh_functional.rst", "functional/ivy/linear_algebra/inv.rst", "functional/ivy/linear_algebra/inv/inv_array.rst", "functional/ivy/linear_algebra/inv/inv_functional.rst", "functional/ivy/linear_algebra/matmul.rst", "functional/ivy/linear_algebra/matmul/matmul_array.rst", "functional/ivy/linear_algebra/matmul/matmul_container.rst", "functional/ivy/linear_algebra/matmul/matmul_functional.rst", "functional/ivy/linear_algebra/matrix_norm.rst", "functional/ivy/linear_algebra/matrix_norm/matrix_norm_array.rst", "functional/ivy/linear_algebra/matrix_norm/matrix_norm_functional.rst", "functional/ivy/linear_algebra/matrix_power.rst", "functional/ivy/linear_algebra/matrix_rank.rst", "functional/ivy/linear_algebra/matrix_rank/matrix_rank_array.rst", "functional/ivy/linear_algebra/matrix_rank/matrix_rank_functional.rst", "functional/ivy/linear_algebra/matrix_transpose.rst", "functional/ivy/linear_algebra/matrix_transpose/matrix_transpose_array.rst", "functional/ivy/linear_algebra/matrix_transpose/matrix_transpose_functional.rst", "functional/ivy/linear_algebra/outer.rst", "functional/ivy/linear_algebra/outer/outer_array.rst", "functional/ivy/linear_algebra/outer/outer_functional.rst", "functional/ivy/linear_algebra/pinv.rst", "functional/ivy/linear_algebra/pinv/pinv_array.rst", "functional/ivy/linear_algebra/pinv/pinv_functional.rst", "functional/ivy/linear_algebra/qr.rst", "functional/ivy/linear_algebra/qr/qr_array.rst", "functional/ivy/linear_algebra/qr/qr_functional.rst", "functional/ivy/linear_algebra/slogdet.rst", "functional/ivy/linear_algebra/solve.rst", "functional/ivy/linear_algebra/solve/solve_array.rst", "functional/ivy/linear_algebra/solve/solve_functional.rst", "functional/ivy/linear_algebra/svd.rst", "functional/ivy/linear_algebra/svd/svd_array.rst", "functional/ivy/linear_algebra/svd/svd_functional.rst", "functional/ivy/linear_algebra/svdvals.rst", "functional/ivy/linear_algebra/svdvals/svdvals_array.rst", "functional/ivy/linear_algebra/svdvals/svdvals_functional.rst", "functional/ivy/linear_algebra/tensordot.rst", "functional/ivy/linear_algebra/tensordot/tensordot_array.rst", "functional/ivy/linear_algebra/tensordot/tensordot_functional.rst", "functional/ivy/linear_algebra/trace.rst", "functional/ivy/linear_algebra/trace/trace_array.rst", "functional/ivy/linear_algebra/trace/trace_functional.rst", "functional/ivy/linear_algebra/vecdot.rst", "functional/ivy/linear_algebra/vecdot/vecdot_array.rst", "functional/ivy/linear_algebra/vecdot/vecdot_functional.rst", "functional/ivy/linear_algebra/vector_norm.rst", "functional/ivy/linear_algebra/vector_norm/vector_norm_array.rst", "functional/ivy/linear_algebra/vector_norm/vector_norm_functional.rst", "functional/ivy/linear_algebra/vector_to_skew_symmetric_matrix.rst", "functional/ivy/linear_algebra/vector_to_skew_symmetric_matrix/vector_to_skew_symmetric_matrix_array.rst", "functional/ivy/linear_algebra/vector_to_skew_symmetric_matrix/vector_to_skew_symmetric_matrix_functional.rst", "functional/ivy/losses.rst", "functional/ivy/losses/binary_cross_entropy.rst", "functional/ivy/losses/binary_cross_entropy/binary_cross_entropy_array.rst", "functional/ivy/losses/binary_cross_entropy/binary_cross_entropy_container.rst", "functional/ivy/losses/binary_cross_entropy/binary_cross_entropy_functional.rst", "functional/ivy/losses/binary_cross_entropy/static_binary_cross_entropy_container.rst", "functional/ivy/losses/cross_entropy.rst", "functional/ivy/losses/cross_entropy/cross_entropy_array.rst", "functional/ivy/losses/cross_entropy/cross_entropy_container.rst", "functional/ivy/losses/cross_entropy/cross_entropy_functional.rst", "functional/ivy/losses/cross_entropy/static_cross_entropy_container.rst", "functional/ivy/losses/sparse_cross_entropy.rst", "functional/ivy/losses/sparse_cross_entropy/sparse_cross_entropy_array.rst", "functional/ivy/losses/sparse_cross_entropy/sparse_cross_entropy_container.rst", "functional/ivy/losses/sparse_cross_entropy/sparse_cross_entropy_functional.rst", "functional/ivy/losses/sparse_cross_entropy/static_sparse_cross_entropy_container.rst", "functional/ivy/manipulation.rst", "functional/ivy/manipulation/clip.rst", "functional/ivy/manipulation/clip/clip_array.rst", "functional/ivy/manipulation/clip/clip_container.rst", "functional/ivy/manipulation/clip/clip_functional.rst", "functional/ivy/manipulation/clip/static_clip_container.rst", "functional/ivy/manipulation/concat.rst", "functional/ivy/manipulation/concat/concat_array.rst", "functional/ivy/manipulation/concat/concat_container.rst", "functional/ivy/manipulation/concat/concat_functional.rst", "functional/ivy/manipulation/constant_pad.rst", "functional/ivy/manipulation/constant_pad/constant_pad_array.rst", "functional/ivy/manipulation/constant_pad/constant_pad_container.rst", "functional/ivy/manipulation/constant_pad/constant_pad_functional.rst", "functional/ivy/manipulation/expand_dims.rst", "functional/ivy/manipulation/expand_dims/expand_dims_array.rst", "functional/ivy/manipulation/expand_dims/expand_dims_container.rst", "functional/ivy/manipulation/expand_dims/expand_dims_functional.rst", "functional/ivy/manipulation/flip.rst", "functional/ivy/manipulation/flip/flip_array.rst", "functional/ivy/manipulation/flip/flip_container.rst", "functional/ivy/manipulation/flip/flip_functional.rst", "functional/ivy/manipulation/permute_dims.rst", "functional/ivy/manipulation/permute_dims/permute_dims_array.rst", "functional/ivy/manipulation/permute_dims/permute_dims_container.rst", "functional/ivy/manipulation/permute_dims/permute_dims_functional.rst", "functional/ivy/manipulation/repeat.rst", "functional/ivy/manipulation/repeat/repeat_array.rst", "functional/ivy/manipulation/repeat/repeat_container.rst", "functional/ivy/manipulation/repeat/repeat_functional.rst", "functional/ivy/manipulation/reshape.rst", "functional/ivy/manipulation/reshape/reshape_array.rst", "functional/ivy/manipulation/reshape/reshape_container.rst", "functional/ivy/manipulation/reshape/reshape_functional.rst", "functional/ivy/manipulation/roll.rst", "functional/ivy/manipulation/roll/roll_array.rst", "functional/ivy/manipulation/roll/roll_container.rst", "functional/ivy/manipulation/roll/roll_functional.rst", "functional/ivy/manipulation/roll/static_roll_container.rst", "functional/ivy/manipulation/split.rst", "functional/ivy/manipulation/squeeze.rst", "functional/ivy/manipulation/squeeze/squeeze_array.rst", "functional/ivy/manipulation/squeeze/squeeze_container.rst", "functional/ivy/manipulation/squeeze/squeeze_functional.rst", "functional/ivy/manipulation/stack.rst", "functional/ivy/manipulation/stack/stack_array.rst", "functional/ivy/manipulation/stack/stack_container.rst", "functional/ivy/manipulation/stack/stack_functional.rst", "functional/ivy/manipulation/swapaxes.rst", "functional/ivy/manipulation/swapaxes/swapaxes_array.rst", "functional/ivy/manipulation/swapaxes/swapaxes_container.rst", "functional/ivy/manipulation/swapaxes/swapaxes_functional.rst", "functional/ivy/manipulation/tile.rst", "functional/ivy/manipulation/tile/tile_array.rst", "functional/ivy/manipulation/tile/tile_container.rst", "functional/ivy/manipulation/tile/tile_functional.rst", "functional/ivy/manipulation/zero_pad.rst", "functional/ivy/manipulation/zero_pad/zero_pad_array.rst", "functional/ivy/manipulation/zero_pad/zero_pad_container.rst", "functional/ivy/manipulation/zero_pad/zero_pad_functional.rst", "functional/ivy/meta.rst", "functional/ivy/meta/fomaml_step.rst", "functional/ivy/meta/maml_step.rst", "functional/ivy/meta/reptile_step.rst", "functional/ivy/nest.rst", "functional/ivy/nest/all_nested_indices.rst", "functional/ivy/nest/copy_nest.rst", "functional/ivy/nest/index_nest.rst", "functional/ivy/nest/insert_into_nest_at_index.rst", "functional/ivy/nest/insert_into_nest_at_indices.rst", "functional/ivy/nest/map.rst", "functional/ivy/nest/map_nest_at_index.rst", "functional/ivy/nest/map_nest_at_indices.rst", "functional/ivy/nest/multi_index_nest.rst", "functional/ivy/nest/nested_any.rst", "functional/ivy/nest/nested_indices_where.rst", "functional/ivy/nest/nested_map.rst", "functional/ivy/nest/nested_multi_map.rst", "functional/ivy/nest/prune_nest_at_index.rst", "functional/ivy/nest/prune_nest_at_indices.rst", "functional/ivy/nest/set_nest_at_index.rst", "functional/ivy/nest/set_nest_at_indices.rst", "functional/ivy/norms.rst", "functional/ivy/norms/layer_norm.rst", "functional/ivy/norms/layer_norm/layer_norm_array.rst", "functional/ivy/norms/layer_norm/layer_norm_container.rst", "functional/ivy/norms/layer_norm/layer_norm_functional.rst", "functional/ivy/random.rst", "functional/ivy/random/multinomial.rst", "functional/ivy/random/randint.rst", "functional/ivy/random/randint/randint_functional.rst", "functional/ivy/random/randint/static_randint_container.rst", "functional/ivy/random/random_normal.rst", "functional/ivy/random/random_uniform.rst", "functional/ivy/random/random_uniform/random_uniform_container.rst", "functional/ivy/random/random_uniform/random_uniform_functional.rst", "functional/ivy/random/random_uniform/static_random_uniform_container.rst", "functional/ivy/random/seed.rst", "functional/ivy/random/shuffle.rst", "functional/ivy/searching.rst", "functional/ivy/searching/argmax.rst", "functional/ivy/searching/argmin.rst", "functional/ivy/searching/nonzero.rst", "functional/ivy/searching/where.rst", "functional/ivy/set.rst", "functional/ivy/set/unique_all.rst", "functional/ivy/set/unique_counts.rst", "functional/ivy/set/unique_inverse.rst", "functional/ivy/set/unique_values.rst", "functional/ivy/sorting.rst", "functional/ivy/sorting/argsort.rst", "functional/ivy/sorting/argsort/argsort_array.rst", "functional/ivy/sorting/argsort/argsort_container.rst", "functional/ivy/sorting/argsort/argsort_functional.rst", "functional/ivy/sorting/argsort/static_argsort_container.rst", "functional/ivy/sorting/sort.rst", "functional/ivy/sorting/sort/sort_array.rst", "functional/ivy/sorting/sort/sort_container.rst", "functional/ivy/sorting/sort/sort_functional.rst", "functional/ivy/sorting/sort/static_sort_container.rst", "functional/ivy/statistical.rst", "functional/ivy/statistical/einsum.rst", "functional/ivy/statistical/einsum/einsum_array.rst", "functional/ivy/statistical/einsum/einsum_container.rst", "functional/ivy/statistical/einsum/einsum_functional.rst", "functional/ivy/statistical/max.rst", "functional/ivy/statistical/max/max_array.rst", "functional/ivy/statistical/max/max_container.rst", "functional/ivy/statistical/max/max_functional.rst", "functional/ivy/statistical/mean.rst", "functional/ivy/statistical/mean/mean_array.rst", "functional/ivy/statistical/mean/mean_container.rst", "functional/ivy/statistical/mean/mean_functional.rst", "functional/ivy/statistical/min.rst", "functional/ivy/statistical/min/min_array.rst", "functional/ivy/statistical/min/min_container.rst", "functional/ivy/statistical/min/min_functional.rst", "functional/ivy/statistical/prod.rst", "functional/ivy/statistical/prod/prod_array.rst", "functional/ivy/statistical/prod/prod_container.rst", "functional/ivy/statistical/prod/prod_functional.rst", "functional/ivy/statistical/std.rst", "functional/ivy/statistical/std/std_array.rst", "functional/ivy/statistical/std/std_container.rst", "functional/ivy/statistical/std/std_functional.rst", "functional/ivy/statistical/sum.rst", "functional/ivy/statistical/sum/sum_array.rst", "functional/ivy/statistical/sum/sum_container.rst", "functional/ivy/statistical/sum/sum_functional.rst", "functional/ivy/statistical/var.rst", "functional/ivy/statistical/var/var_array.rst", "functional/ivy/statistical/var/var_container.rst", "functional/ivy/statistical/var/var_functional.rst", "functional/ivy/utility.rst", "functional/ivy/utility/all.rst", "functional/ivy/utility/all/all_array.rst", "functional/ivy/utility/all/all_container.rst", "functional/ivy/utility/all/all_functional.rst", "functional/ivy/utility/any.rst", "functional/ivy/utility/any/any_array.rst", "functional/ivy/utility/any/any_container.rst", "functional/ivy/utility/any/any_functional.rst", "index.rst", "index_append.rst", "index_prepend.rst", "inspection.rst", "inspection/add_array_specs.rst", "inspection/fn_array_spec.rst", "roadmap.rst", "stateful/activations.rst", "stateful/activations/GEGLU.rst", "stateful/activations/GELU.rst", "stateful/converters.rst", "stateful/converters/to_ivy_module.rst", "stateful/initializers.rst", "stateful/initializers/Constant:\n    def __init__.rst", "stateful/initializers/FirstLayerSiren.rst", "stateful/initializers/GlorotUniform.rst", "stateful/initializers/KaimingNormal:\n    def __init__.rst", "stateful/initializers/Ones.rst", "stateful/initializers/Siren.rst", "stateful/initializers/Uniform:\n    def __init__.rst", "stateful/initializers/Zeros.rst", "stateful/layers.rst", "stateful/layers/Conv1D.rst", "stateful/layers/Conv1DTranspose.rst", "stateful/layers/Conv2D.rst", "stateful/layers/Conv2DTranspose.rst", "stateful/layers/Conv3D.rst", "stateful/layers/Conv3DTranspose.rst", "stateful/layers/DepthwiseConv2D.rst", "stateful/layers/Dropout.rst", "stateful/layers/LSTM.rst", "stateful/layers/Linear.rst", "stateful/layers/MultiHeadAttention.rst", "stateful/module.rst", "stateful/module/Module.rst", "stateful/norms.rst", "stateful/norms/LayerNorm.rst", "stateful/optimizers.rst", "stateful/optimizers/Adam.rst", "stateful/optimizers/LAMB.rst", "stateful/optimizers/LARS.rst", "stateful/optimizers/Optimizer.rst", "stateful/optimizers/SGD.rst", "stateful/sequential.rst", "stateful/sequential/Sequential.rst", "supported_frameworks.rst", "verbosity.rst", "verbosity/cprint.rst"], "titles": ["Activations", "ArrayWithActivations", "Array methods", "abs array", "acos array", "acosh array", "add array", "all array", "all_equal array", "any array", "argsort array", "asin array", "asinh array", "atan array", "atan2 array", "atanh array", "binary_cross_entropy array", "bitwise_and array", "bitwise_invert array", "bitwise_left_shift array", "bitwise_or array", "bitwise_right_shift array", "bitwise_xor array", "can_cast array", "ceil array", "cholesky array", "clip array", "concat array", "constant_pad array", "cos array", "cosh array", "cross array", "cross_entropy array", "det array", "diagonal array", "divide array", "eigh array", "eigvalsh array", "einsum array", "equal array", "erf array", "exp array", "expand_dims array", "expm1 array", "flip array", "floor array", "floor_divide array", "gather_nd array", "greater array", "greater_equal array", "inv array", "isfinite array", "isinf array", "isnan array", "layer_norm array", "less array", "less_equal array", "log array", "log10 array", "log1p array", "log2 array", "logaddexp array", "logical_and array", "logical_not array", "logical_or array", "logical_xor array", "matmul array", "matrix_norm array", "matrix_rank array", "matrix_transpose array", "max array", "mean array", "min array", "multiply array", "negative array", "not_equal array", "outer array", "permute_dims array", "pinv array", "positive array", "pow array", "prod array", "qr array", "remainder array", "repeat array", "reshape array", "roll array", "round array", "sign array", "sin array", "sinh array", "solve array", "sort array", "sparse_cross_entropy array", "sqrt array", "square array", "squeeze array", "stack array", "std array", "subtract array", "sum array", "svd array", "svdvals array", "swapaxes array", "tan array", "tanh array", "tensordot array", "tile array", "trace array", "trunc array", "var array", "vecdot array", "vector_norm array", "vector_to_skew_symmetric_matrix array", "zero_pad array", "Conversions", "args_to_ivy", "args_to_native", "to_ivy", "to_native", "Creation", "ArrayWithCreation", "Data type", "ArrayWithDataTypes", "Device", "ArrayWithDevice", "Elementwise", "ArrayWithElementwise", "General", "ArrayWithGeneral", "Gradients", "ArrayWithGradients", "Image", "ArrayWithImage", "Layers", "ArrayWithLayers", "Linear algebra", "ArrayWithLinearAlgebra", "Losses", "ArrayWithLosses", "Manipulation", "ArrayWithManipulation", "Norms", "ArrayWithNorms", "Random", "ArrayWithRandom", "Searching", "ArrayWithSearching", "Set", "ArrayWithSet", "Sorting", "ArrayWithSorting", "Statistical", "ArrayWithStatistical", "Utility", "ArrayWithUtility", "Wrapping", "add_ivy_array_instance_methods", "Backend handler", "&lt;no title&gt;", "choose_random_backend", "clear_backend_stack", "current_backend", "get_backend", "set_backend", "try_import_ivy_jax", "try_import_ivy_mxnet", "try_import_ivy_numpy", "try_import_ivy_tf", "try_import_ivy_torch", "unset_backend", "Background", "ML Explosion", "Standardization", "Why Unify?", "Activations", "ContainerWithActivations", "Base", "ContainerBase", "Container", "Container", "MultiDevContainer", "Container methods", "abs container", "acos container", "acosh container", "adam_update container", "add container", "all container", "all_equal container", "any container", "argsort container", "asin container", "asinh container", "at_dev container", "at_devs container", "atan container", "atan2 container", "atanh container", "binary_cross_entropy container", "bitwise_and container", "bitwise_invert container", "bitwise_left_shift container", "bitwise_or container", "bitwise_right_shift container", "bitwise_xor container", "can_cast container", "ceil container", "clip container", "clip_vector_norm container", "concat container", "constant_pad container", "cos container", "cosh container", "cross_entropy container", "divide container", "einsum container", "equal container", "erf container", "exp container", "expand_dims container", "expm1 container", "flip container", "floor container", "floor_divide container", "gather_nd container", "gradient_descent_update container", "greater container", "greater_equal container", "isfinite container", "isinf container", "isnan container", "lamb_update container", "lars_update container", "layer_norm container", "less container", "less_equal container", "log container", "log10 container", "log1p container", "log2 container", "logaddexp container", "logical_and container", "logical_not container", "logical_or container", "logical_xor container", "matmul container", "max container", "mean container", "min container", "multiply container", "negative container", "not_equal container", "optimizer_update container", "permute_dims container", "positive container", "pow container", "prod container", "random_uniform container", "remainder container", "repeat container", "reshape container", "roll container", "round container", "sign container", "sin container", "sinh container", "sort container", "sparse_cross_entropy container", "sqrt container", "square container", "squeeze container", "stack container", "static_adam_update container", "static_add container", "static_all_equal container", "static_argsort container", "static_binary_cross_entropy container", "static_can_cast container", "static_clip container", "static_cross_entropy container", "static_divide container", "static_gather_nd container", "static_gradient_descent_update container", "static_lamb_update container", "static_lars_update container", "static_multiply container", "static_optimizer_update container", "static_randint container", "static_random_uniform container", "static_roll container", "static_sort container", "static_sparse_cross_entropy container", "static_subtract container", "static_tan container", "std container", "subtract container", "sum container", "swapaxes container", "tan container", "tanh container", "tile container", "trunc container", "var container", "zero_pad container", "Creation", "ContainerWithCreation", "Data type", "ContainerWithDataTypes", "Device", "ContainerWithDevice", "Elementwise", "ContainerWithElementwise", "General", "ContainerWithGeneral", "Gradients", "ContainerWithGradients", "Image", "ContainerWithImage", "Layers", "ContainerWithLayers", "Linear algebra", "ContainerWithLinearAlgebra", "Losses", "ContainerWithLosses", "Manipulation", "ContainerWithManipulation", "Norms", "ContainerWithNorms", "Random", "ContainerWithRandom", "Searching", "ContainerWithSearching", "Set", "ContainerWithSet", "Sorting", "ContainerWithSorting", "Statistical", "ContainerWithStatistical", "Utility", "ContainerWithUtility", "Wrapping", "add_ivy_container_instance_methods", "Contributing", "Setting Up", "The Basics", "Open Tasks", "Building the Docs", "Deep Dive", "Navigating the Code", "Docstrings", "Docstring Examples", "Array API Tests", "Ivy Tests", "Function Types", "Backend Setting", "Function Wrapping", "Arrays", "Containers", "Data Types", "Devices", "Inplace Updates", "Function Arguments", "Design", "Building Blocks", "Ivy as a Framework", "Ivy Array", "Ivy Container", "Ivy Stateful API", "Ivy as a Transpiler", "Ivy", "Ivy builder", "Ivy ecosystem", "Ivy gym", "Ivy mech", "Ivy memory", "Ivy models", "Ivy robot", "Ivy vision", "Extensions", "Applied Libraries", "FAQ", "Func wrapper", "handle_nestable", "handle_out_argument", "infer_device", "infer_dtype", "inputs_to_ivy_arrays", "inputs_to_native_arrays", "outputs_to_ivy_arrays", "to_native_arrays_and_back", "&lt;no title&gt;", "Activations", "gelu", "leaky_relu", "relu", "sigmoid", "softmax", "softplus", "tanh", "Compilation", "compile", "Constants", "Creation", "arange", "asarray", "empty", "empty_like", "eye", "from_dlpack", "full", "full_like", "linspace", "logspace", "meshgrid", "native_array", "ones", "ones_like", "tril", "triu", "zeros", "zeros_like", "Data type", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "as_ivy_dtype", "as_native_dtype", "astype", "broadcast_arrays", "broadcast_to", "can_cast", "can_cast array", "can_cast container", "can_cast functional", "static_can_cast container", "closest_valid_dtype", "default_dtype", "default_float_dtype", "default_int_dtype", "dtype", "dtype_bits", "finfo", "function_supported_dtypes", "function_unsupported_dtypes", "iinfo", "invalid_dtype", "is_float_dtype", "is_int_dtype", "promote_types", "result_type", "set_default_dtype", "set_default_float_dtype", "set_default_int_dtype", "type_promote_arrays", "unset_default_dtype", "unset_default_float_dtype", "unset_default_int_dtype", "valid_dtype", "Device", "&lt;no title&gt;", "DevClonedItem", "DevClonedIter", "DevClonedNest", "DevDistItem", "DevDistIter", "DevDistNest", "&lt;no title&gt;", "DevMapper", "DevMapperMultiProc", "&lt;no title&gt;", "MultiDevItem", "MultiDevIter", "MultiDevNest", "Profiler", "as_ivy_dev", "as_native_dev", "clear_mem_on_dev", "default_device", "dev", "dev_clone", "dev_clone_array", "dev_clone_iter", "dev_clone_nest", "dev_dist", "dev_dist_array", "dev_dist_iter", "dev_dist_nest", "dev_unify", "dev_unify_array", "dev_unify_iter", "dev_unify_nest", "dev_util", "get_all_ivy_arrays_on_dev", "gpu_is_available", "num_cpu_cores", "num_gpus", "num_ivy_arrays_on_dev", "percent_used_mem_on_dev", "print_all_ivy_arrays_on_dev", "set_default_device", "set_split_factor", "split_factor", "split_func_call", "to_device", "total_mem_on_dev", "tpu_is_available", "unset_default_device", "used_mem_on_dev", "Elementwise", "abs", "abs array", "abs container", "abs functional", "acos", "acos array", "acos container", "acosh functional", "acosh", "acosh array", "acosh container", "acosh functional", "add", "add array", "add container", "logaddexp functional", "static_add container", "asin", "asin array", "asin container", "asin functional", "asinh", "asinh array", "asinh container", "asinh functional", "atan", "atan array", "atan container", "atanh functional", "atan2", "atan2 array", "atan2 container", "atan2 functional", "atanh", "atanh array", "atanh container", "atanh functional", "bitwise_and", "bitwise_and array", "bitwise_and container", "bitwise_and functional", "bitwise_invert", "bitwise_invert array", "bitwise_invert container", "bitwise_invert functional", "bitwise_left_shift", "bitwise_left_shift array", "bitwise_left_shift container", "bitwise_left_shift functional", "bitwise_or", "bitwise_or array", "bitwise_or container", "bitwise_or functional", "bitwise_right_shift", "bitwise_right_shift array", "bitwise_right_shift container", "bitwise_right_shift functional", "bitwise_xor", "bitwise_xor array", "bitwise_xor container", "bitwise_xor functional", "ceil", "ceil array", "ceil container", "ceil functional", "cos", "cos array", "cos container", "acosh functional", "cosh", "cosh array", "cosh container", "acosh functional", "divide", "divide array", "divide container", "floor_divide functional", "static_divide container", "equal", "equal array", "equal container", "greater_equal functional", "erf", "erf array", "erf container", "erf functional", "exp", "exp array", "exp container", "logaddexp functional", "expm1", "expm1 array", "expm1 container", "expm1 functional", "floor", "floor array", "floor container", "floor_divide functional", "floor_divide", "floor_divide array", "floor_divide container", "floor_divide functional", "greater", "greater array", "greater container", "greater_equal functional", "greater_equal", "greater_equal array", "greater_equal container", "greater_equal functional", "isfinite", "isfinite array", "isfinite container", "isfinite functional", "isinf", "isinf array", "isinf container", "isinf functional", "isnan", "isnan array", "isnan container", "isnan functional", "less", "less array", "less container", "less functional", "less_equal", "less_equal array", "less_equal container", "less_equal functional", "log", "log array", "log container", "log functional", "log10", "log10 array", "log10 container", "log10 functional", "log1p", "log1p array", "log1p container", "log1p functional", "log2", "log2 array", "log2 container", "log2 functional", "logaddexp", "logaddexp array", "logaddexp container", "logaddexp functional", "logical_and", "logical_and array", "logical_and container", "logical_and functional", "logical_not", "logical_not array", "logical_not container", "logical_not functional", "logical_or", "logical_or array", "logical_or container", "logical_or functional", "logical_xor", "logical_xor array", "logical_xor container", "logical_xor functional", "maximum", "minimum", "multiply", "multiply array", "multiply container", "multiply functional", "static_multiply container", "negative", "negative array", "negative container", "negative functional", "not_equal", "not_equal array", "not_equal container", "not_equal functional", "positive", "positive array", "positive container", "positive functional", "pow", "pow array", "pow container", "pow functional", "remainder", "remainder array", "remainder container", "remainder functional", "round", "round array", "round container", "round functional", "sign", "sign array", "sign container", "sign functional", "sin", "sin array", "sin container", "sin functional", "sinh", "sinh array", "sinh container", "sinh functional", "sqrt", "sqrt array", "sqrt container", "sqrt functional", "square", "square array", "square container", "square functional", "subtract", "static_subtract container", "subtract array", "subtract container", "subtract functional", "tan", "static_tan container", "tan array", "tan container", "atanh functional", "tanh", "tanh array", "tanh container", "atanh functional", "trunc", "trunc array", "trunc container", "trunc functional", "General", "all_equal", "all_equal array", "all_equal container", "all_equal functional", "static_all_equal container", "arg_info", "arg_names", "array_equal", "arrays_equal", "assert_supports_inplace", "cache_fn", "clip_matrix_norm", "clip_vector_norm", "clip_vector_norm container", "clip_vector_norm functional", "container_types", "copy_array", "cumprod", "cumsum", "current_backend_str", "default", "einops_rearrange", "einops_reduce", "einops_repeat", "exists", "floormod", "fourier_encode", "gather", "gather_nd", "gather_nd array", "gather_nd container", "gather_nd functional", "static_gather_nd container", "get_all_arrays_in_memory", "get_min_base", "get_min_denominator", "get_num_dims", "get_referrers_recursive", "has_nans", "indices_where", "inplace_arrays_supported", "inplace_decrement", "inplace_increment", "inplace_update", "inplace_variables_supported", "is_array", "is_ivy_array", "is_ivy_container", "is_native_array", "match_kwargs", "multiprocessing", "num_arrays_in_memory", "one_hot", "print_all_arrays_in_memory", "queue_timeout", "scatter_flat", "scatter_nd", "set_min_base", "set_min_denominator", "set_queue_timeout", "set_tmp_dir", "shape", "shape_to_tuple", "stable_divide", "stable_pow", "supports_inplace", "tmp_dir", "to_list", "to_numpy", "to_scalar", "try_else_none", "unstack", "value_is_nan", "Gradients", "&lt;no title&gt;", "adam_step", "adam_update", "adam_update container", "adam_update functional", "static_adam_update container", "execute_with_gradients", "gradient_descent_update", "gradient_descent_update container", "gradient_descent_update functional", "static_gradient_descent_update container", "is_variable", "lamb_update", "lamb_update container", "lamb_update functional", "static_lamb_update container", "lars_update", "lars_update container", "lars_update functional", "static_lars_update container", "optimizer_update", "optimizer_update container", "optimizer_update functional", "static_optimizer_update container", "set_with_grads", "stop_gradient", "unset_with_grads", "variable", "variable_data", "with_grads", "Layers", "conv1d", "conv1d_transpose", "conv2d", "conv2d_transpose", "conv3d", "conv3d_transpose", "depthwise_conv2d", "dropout", "linear", "lstm_update", "multi_head_attention", "scaled_dot_product_attention", "Linear algebra", "cholesky", "cholesky array", "cholesky functional", "cross", "cross array", "cross functional", "det", "det array", "slogdet functional", "diagonal", "diagonal array", "diagonal functional", "eigh", "eigh array", "eigh functional", "eigvalsh", "eigvalsh array", "eigvalsh functional", "inv", "inv array", "pinv functional", "matmul", "matmul array", "matmul container", "matmul functional", "matrix_norm", "matrix_norm array", "matrix_norm functional", "matrix_power", "matrix_rank", "matrix_rank array", "matrix_rank functional", "matrix_transpose", "matrix_transpose array", "matrix_transpose functional", "outer", "outer array", "outer functional", "pinv", "pinv array", "pinv functional", "qr", "qr array", "qr functional", "slogdet", "solve", "solve array", "solve functional", "svd", "svd array", "svdvals functional", "svdvals", "svdvals array", "svdvals functional", "tensordot", "tensordot array", "tensordot functional", "trace", "trace array", "trace functional", "vecdot", "vecdot array", "vecdot functional", "vector_norm", "vector_norm array", "vector_norm functional", "vector_to_skew_symmetric_matrix", "vector_to_skew_symmetric_matrix array", "vector_to_skew_symmetric_matrix functional", "Losses", "binary_cross_entropy", "binary_cross_entropy array", "binary_cross_entropy container", "binary_cross_entropy functional", "static_binary_cross_entropy container", "cross_entropy", "cross_entropy array", "cross_entropy container", "cross_entropy functional", "static_cross_entropy container", "sparse_cross_entropy", "sparse_cross_entropy array", "sparse_cross_entropy container", "sparse_cross_entropy functional", "static_sparse_cross_entropy container", "Manipulation", "clip", "clip array", "clip container", "clip functional", "static_clip container", "concat", "concat array", "concat container", "concat functional", "constant_pad", "constant_pad array", "constant_pad container", "constant_pad functional", "expand_dims", "expand_dims array", "expand_dims container", "expand_dims functional", "flip", "flip array", "flip container", "flip functional", "permute_dims", "permute_dims array", "permute_dims container", "permute_dims functional", "repeat", "repeat array", "repeat container", "repeat functional", "reshape", "reshape array", "reshape container", "reshape functional", "roll", "roll array", "roll container", "roll functional", "static_roll container", "split", "squeeze", "squeeze array", "squeeze container", "squeeze functional", "stack", "stack array", "stack container", "stack functional", "swapaxes", "swapaxes array", "swapaxes container", "swapaxes functional", "tile", "tile array", "tile container", "tile functional", "zero_pad", "zero_pad array", "zero_pad container", "zero_pad functional", "Meta", "fomaml_step", "maml_step", "reptile_step", "Nest", "all_nested_indices", "copy_nest", "index_nest", "insert_into_nest_at_index", "insert_into_nest_at_indices", "map", "map_nest_at_index", "map_nest_at_indices", "multi_index_nest", "nested_any", "nested_indices_where", "nested_map", "nested_multi_map", "prune_nest_at_index", "prune_nest_at_indices", "set_nest_at_index", "set_nest_at_indices", "Norms", "layer_norm", "layer_norm array", "layer_norm container", "layer_norm functional", "Random", "multinomial", "randint", "randint functional", "static_randint container", "random_normal", "random_uniform", "random_uniform container", "random_uniform functional", "static_random_uniform container", "seed", "shuffle", "Searching", "argmax", "argmin", "nonzero", "where", "Set", "unique_all", "unique_counts", "unique_inverse", "unique_values", "Sorting", "argsort", "argsort array", "argsort container", "argsort functional", "static_argsort container", "sort", "sort array", "sort container", "sort functional", "static_sort container", "Statistical", "einsum", "einsum array", "einsum container", "einsum functional", "max", "max array", "max container", "max functional", "mean", "mean array", "mean container", "mean functional", "min", "min array", "min container", "min functional", "prod", "prod array", "prod container", "prod functional", "std", "std array", "std container", "std functional", "sum", "sum array", "sum container", "einsum functional", "var", "var array", "var container", "var functional", "Utility", "all", "all array", "all container", "all functional", "any", "any array", "any container", "any functional", "Contents", "&lt;no title&gt;", "&lt;no title&gt;", "Inspection", "add_array_specs", "fn_array_spec", "Roadmap", "Activations", "GEGLU", "GELU", "Converters", "to_ivy_module", "Initializers", "&lt;no title&gt;", "FirstLayerSiren", "GlorotUniform", "&lt;no title&gt;", "Ones", "Siren", "&lt;no title&gt;", "Zeros", "Layers", "Conv1D", "Conv1DTranspose", "Conv2D", "Conv2DTranspose", "Conv3D", "Conv3DTranspose", "DepthwiseConv2D", "Dropout", "LSTM", "Linear", "MultiHeadAttention", "Module", "Module", "Norms", "LayerNorm", "Optimizers", "Adam", "LAMB", "LARS", "Optimizer", "SGD", "Sequential", "Sequential", "&lt;no title&gt;", "Verbosity", "cprint"], "terms": {"class": [0, 1, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 164, 170, 175, 176, 177, 178, 179, 180, 181, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 346, 347, 350, 351, 353, 357, 358, 359, 360, 362, 364, 365, 367, 368, 369, 379, 380, 381, 422, 445, 459, 461, 462, 463, 464, 465, 466, 468, 469, 471, 472, 473, 474, 745, 752, 789, 795, 814, 819, 848, 1013, 1015, 1025, 1048, 1051, 1111, 1118, 1119, 1120, 1121, 1122, 1123, 1125, 1126, 1128, 1129, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155], "ivi": [0, 1, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 345, 346, 347, 348, 350, 352, 354, 355, 356, 358, 359, 360, 361, 362, 363, 379, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 426, 427, 428, 429, 430, 431, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 461, 462, 463, 464, 465, 466, 468, 469, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 512, 513, 514, 516, 517, 518, 520, 521, 522, 524, 525, 526, 527, 529, 530, 531, 533, 534, 535, 537, 538, 539, 541, 542, 543, 545, 546, 547, 549, 550, 551, 553, 554, 555, 557, 558, 559, 561, 562, 563, 565, 566, 567, 569, 570, 571, 573, 574, 575, 577, 578, 579, 581, 582, 583, 585, 586, 587, 588, 590, 591, 592, 594, 595, 596, 598, 599, 600, 602, 603, 604, 606, 607, 608, 610, 611, 612, 614, 615, 616, 618, 619, 620, 622, 623, 624, 626, 627, 628, 630, 631, 632, 634, 635, 636, 638, 639, 640, 642, 643, 644, 646, 647, 648, 650, 651, 652, 654, 655, 656, 658, 659, 660, 662, 663, 664, 666, 667, 668, 670, 671, 672, 674, 675, 676, 677, 678, 680, 681, 682, 683, 685, 686, 687, 689, 690, 691, 693, 694, 695, 697, 698, 699, 701, 702, 703, 705, 706, 707, 709, 710, 711, 713, 714, 715, 717, 718, 719, 721, 722, 723, 725, 726, 727, 728, 730, 731, 732, 733, 735, 736, 737, 739, 740, 741, 743, 744, 745, 746, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 866, 867, 869, 870, 872, 873, 875, 876, 878, 879, 881, 882, 884, 885, 887, 888, 889, 891, 892, 893, 895, 896, 898, 899, 901, 902, 904, 905, 907, 908, 909, 911, 912, 914, 915, 917, 918, 920, 921, 923, 924, 926, 927, 929, 930, 932, 933, 934, 936, 937, 938, 939, 941, 942, 943, 944, 946, 947, 948, 949, 950, 952, 953, 954, 955, 957, 958, 959, 961, 962, 963, 965, 966, 967, 969, 970, 971, 973, 974, 975, 977, 978, 979, 981, 982, 983, 985, 986, 987, 988, 989, 991, 992, 993, 995, 996, 997, 999, 1000, 1001, 1003, 1004, 1005, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1061, 1062, 1063, 1064, 1066, 1067, 1068, 1069, 1070, 1072, 1073, 1074, 1076, 1077, 1078, 1080, 1081, 1082, 1084, 1085, 1086, 1088, 1089, 1090, 1092, 1093, 1094, 1096, 1097, 1098, 1100, 1101, 1102, 1103, 1105, 1106, 1107, 1109, 1110, 1111, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1125, 1126, 1128, 1129, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1157, 1158], "arrai": [0, 1, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 162, 177, 178, 179, 180, 181, 182, 187, 189, 206, 207, 208, 223, 225, 262, 274, 275, 278, 279, 282, 288, 290, 294, 299, 307, 308, 311, 312, 313, 314, 325, 326, 329, 330, 344, 345, 346, 348, 349, 350, 351, 353, 354, 355, 356, 358, 359, 360, 361, 363, 364, 365, 367, 368, 369, 381, 382, 390, 392, 393, 394, 395, 396, 397, 398, 399, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 428, 429, 430, 431, 433, 434, 435, 440, 442, 445, 447, 448, 450, 454, 459, 478, 479, 480, 481, 484, 485, 486, 487, 488, 489, 490, 491, 493, 497, 499, 503, 504, 509, 510, 513, 514, 517, 518, 521, 522, 524, 525, 526, 527, 530, 531, 534, 535, 538, 539, 542, 543, 546, 547, 550, 551, 554, 555, 558, 559, 562, 563, 566, 567, 570, 571, 573, 574, 575, 578, 579, 582, 583, 586, 588, 591, 592, 595, 596, 599, 600, 603, 604, 606, 607, 608, 611, 612, 615, 616, 619, 620, 623, 624, 627, 628, 631, 632, 635, 636, 639, 640, 643, 644, 647, 648, 651, 652, 655, 656, 659, 660, 663, 664, 667, 668, 671, 672, 675, 676, 677, 678, 681, 683, 686, 687, 690, 691, 694, 695, 698, 699, 702, 703, 706, 707, 710, 711, 714, 715, 718, 719, 722, 723, 726, 727, 731, 732, 733, 735, 736, 737, 740, 741, 744, 745, 746, 748, 749, 750, 753, 754, 755, 757, 758, 760, 762, 763, 764, 767, 768, 769, 770, 771, 772, 773, 774, 776, 777, 778, 779, 782, 784, 785, 786, 787, 788, 789, 791, 792, 794, 797, 798, 799, 801, 802, 807, 808, 811, 813, 814, 815, 817, 818, 819, 821, 822, 824, 827, 829, 831, 832, 834, 836, 838, 840, 842, 845, 847, 848, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 866, 867, 869, 870, 872, 873, 875, 876, 878, 879, 881, 882, 884, 885, 888, 889, 891, 892, 893, 895, 896, 898, 899, 901, 902, 904, 905, 907, 908, 909, 911, 912, 914, 915, 917, 918, 920, 921, 923, 924, 926, 927, 929, 930, 932, 933, 934, 937, 939, 942, 944, 947, 949, 950, 952, 953, 954, 955, 958, 959, 962, 963, 966, 967, 970, 971, 974, 975, 978, 979, 982, 983, 985, 986, 987, 988, 989, 992, 993, 996, 997, 1000, 1001, 1004, 1005, 1008, 1009, 1010, 1011, 1012, 1013, 1015, 1025, 1026, 1031, 1032, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1044, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1062, 1064, 1067, 1069, 1070, 1073, 1074, 1077, 1078, 1081, 1082, 1085, 1086, 1089, 1090, 1093, 1094, 1097, 1098, 1101, 1102, 1103, 1106, 1107, 1110, 1111, 1114, 1116, 1132, 1140, 1143], "arraywithactiv": 0, "sourc": [0, 1, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 347, 357, 358, 382, 383, 384, 385, 386, 387, 388, 389, 390, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 426, 427, 428, 429, 430, 431, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 461, 462, 463, 464, 465, 466, 468, 469, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 512, 513, 514, 516, 517, 518, 520, 521, 522, 524, 525, 526, 527, 529, 530, 531, 533, 534, 535, 537, 538, 539, 541, 542, 543, 545, 546, 547, 549, 550, 551, 553, 554, 555, 557, 558, 559, 561, 562, 563, 565, 566, 567, 569, 570, 571, 573, 574, 575, 577, 578, 579, 581, 582, 583, 585, 586, 587, 588, 590, 591, 592, 594, 595, 596, 598, 599, 600, 602, 603, 604, 606, 607, 608, 610, 611, 612, 614, 615, 616, 618, 619, 620, 622, 623, 624, 626, 627, 628, 630, 631, 632, 634, 635, 636, 638, 639, 640, 642, 643, 644, 646, 647, 648, 650, 651, 652, 654, 655, 656, 658, 659, 660, 662, 663, 664, 666, 667, 668, 670, 671, 672, 674, 675, 676, 677, 678, 680, 681, 682, 683, 685, 686, 687, 689, 690, 691, 693, 694, 695, 697, 698, 699, 701, 702, 703, 705, 706, 707, 709, 710, 711, 713, 714, 715, 717, 718, 719, 721, 722, 723, 725, 726, 727, 728, 730, 731, 732, 733, 735, 736, 737, 739, 740, 741, 743, 744, 745, 746, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 866, 867, 869, 870, 872, 873, 875, 876, 878, 879, 881, 882, 884, 885, 887, 888, 889, 891, 892, 893, 895, 896, 898, 899, 901, 902, 904, 905, 907, 908, 909, 911, 912, 914, 915, 917, 918, 920, 921, 923, 924, 926, 927, 929, 930, 932, 933, 934, 936, 937, 938, 939, 941, 942, 943, 944, 946, 947, 948, 949, 950, 952, 953, 954, 955, 957, 958, 959, 961, 962, 963, 965, 966, 967, 969, 970, 971, 973, 974, 975, 977, 978, 979, 981, 982, 983, 985, 986, 987, 988, 989, 991, 992, 993, 995, 996, 997, 999, 1000, 1001, 1003, 1004, 1005, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1061, 1062, 1063, 1064, 1066, 1067, 1068, 1069, 1070, 1072, 1073, 1074, 1076, 1077, 1078, 1080, 1081, 1082, 1084, 1085, 1086, 1088, 1089, 1090, 1092, 1093, 1094, 1096, 1097, 1098, 1100, 1101, 1102, 1103, 1105, 1106, 1107, 1109, 1110, 1111, 1114, 1115, 1116, 1118, 1119, 1120, 1121, 1122, 1123, 1125, 1126, 1128, 1129, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1157, 1158], "base": [0, 1, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 158, 175, 176, 178, 179, 180, 181, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 345, 353, 356, 358, 364, 380, 403, 413, 422, 459, 461, 462, 463, 464, 465, 466, 468, 469, 471, 472, 473, 474, 509, 596, 640, 643, 644, 647, 648, 651, 652, 655, 695, 698, 745, 780, 803, 810, 819, 1053, 1054, 1055, 1057, 1069, 1070, 1073, 1097, 1118, 1119, 1120, 1123, 1125, 1126, 1128, 1129, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155], "abc": [0, 1, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 177, 178, 366, 459, 468, 474, 745, 770, 1144, 1145, 1148, 1152], "activ": [1, 156, 157, 176, 341, 342, 344, 345, 347, 349, 368, 393, 394, 395, 396, 397, 398, 399, 1111, 1119, 1120], "support": [1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 121, 123, 125, 127, 129, 131, 133, 135, 137, 139, 141, 143, 145, 147, 149, 151, 153, 155, 157, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 172, 173, 174, 176, 177, 178, 180, 181, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 306, 308, 310, 312, 314, 316, 318, 320, 322, 324, 326, 328, 330, 332, 334, 336, 338, 340, 342, 350, 351, 354, 356, 357, 358, 359, 360, 361, 362, 363, 364, 366, 367, 369, 383, 384, 385, 386, 387, 388, 389, 390, 393, 394, 395, 396, 397, 398, 399, 401, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1010, 1011, 1012, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1032, 1033, 1034, 1035, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1049, 1050, 1051, 1052, 1054, 1055, 1056, 1057, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1115, 1116, 1117, 1119, 1120, 1122, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1145, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1155, 1156, 1158], "framework": [1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 121, 123, 125, 127, 129, 131, 133, 135, 137, 139, 141, 143, 145, 147, 149, 151, 153, 155, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 172, 173, 174, 176, 177, 178, 180, 181, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 306, 308, 310, 312, 314, 316, 318, 320, 322, 324, 326, 328, 330, 332, 334, 336, 338, 340, 342, 348, 352, 354, 355, 356, 357, 360, 362, 363, 366, 369, 380, 381, 383, 384, 385, 386, 387, 388, 389, 390, 393, 394, 395, 396, 397, 398, 399, 400, 401, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1010, 1011, 1012, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1032, 1033, 1034, 1035, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1049, 1050, 1051, 1052, 1054, 1055, 1056, 1057, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1115, 1116, 1117, 1119, 1120, 1121, 1122, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1145, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1155, 1156, 1158], "collect": [115, 177, 178, 353, 380, 392, 400, 459, 745, 819, 850, 933, 1013, 1026, 1031, 1036, 1118, 1132, 1146, 1148], "function": [115, 122, 123, 126, 127, 128, 129, 140, 141, 156, 157, 158, 162, 163, 164, 172, 177, 178, 182, 187, 189, 206, 207, 208, 223, 225, 262, 274, 275, 278, 279, 282, 288, 290, 294, 299, 307, 308, 311, 312, 313, 314, 325, 326, 329, 330, 341, 342, 345, 347, 348, 349, 350, 351, 352, 353, 355, 357, 361, 363, 365, 366, 367, 368, 379, 380, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 426, 427, 428, 429, 430, 431, 433, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 461, 462, 463, 464, 465, 466, 468, 469, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 514, 518, 522, 524, 526, 527, 531, 535, 539, 543, 547, 551, 555, 559, 563, 567, 571, 573, 575, 579, 583, 588, 592, 596, 600, 604, 606, 608, 612, 616, 620, 624, 628, 632, 636, 640, 644, 648, 652, 656, 660, 664, 668, 672, 676, 677, 678, 683, 687, 691, 695, 699, 703, 707, 711, 715, 719, 723, 727, 732, 733, 735, 737, 741, 745, 746, 748, 750, 751, 752, 753, 754, 755, 756, 757, 758, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 776, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 821, 822, 826, 827, 831, 832, 836, 840, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 867, 870, 873, 876, 879, 882, 885, 889, 892, 893, 896, 899, 902, 905, 908, 909, 912, 915, 918, 921, 924, 927, 930, 933, 934, 939, 944, 949, 950, 952, 954, 955, 959, 963, 967, 971, 975, 979, 983, 985, 987, 988, 989, 993, 997, 1001, 1005, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1036, 1037, 1038, 1040, 1041, 1042, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1064, 1069, 1070, 1074, 1078, 1082, 1086, 1090, 1094, 1098, 1102, 1103, 1107, 1111, 1114, 1116, 1118, 1119, 1120, 1148, 1151, 1153], "wrap": [115, 122, 123, 126, 127, 128, 129, 140, 141, 157, 177, 178, 179, 180, 181, 182, 187, 189, 206, 207, 208, 223, 225, 262, 274, 275, 278, 279, 282, 288, 290, 294, 299, 307, 308, 311, 312, 313, 314, 325, 326, 329, 330, 342, 348, 350, 353, 354, 355, 357, 358, 359, 360, 361, 362, 364, 366, 369, 381, 382, 390, 431, 433, 435, 524, 526, 538, 543, 571, 573, 606, 608, 656, 733, 735, 740, 745, 746, 748, 750, 756, 774, 776, 778, 819, 848, 950, 952, 954, 983, 985, 987, 1038, 1040], "accept": [115, 344, 345, 350, 351, 353, 354, 357, 358, 360, 361, 362, 366, 403, 414, 422, 431, 434, 509, 522, 527, 530, 547, 550, 567, 570, 571, 574, 579, 604, 664, 667, 668, 671, 687, 690, 699, 702, 703, 706, 719, 722, 723, 726, 732, 745, 773, 850, 853, 862, 863, 870, 949, 963, 966, 967, 970, 983, 986, 1031, 1032, 1035, 1053, 1054, 1055, 1058, 1059, 1062, 1069, 1074, 1077, 1078, 1081, 1102, 1103, 1106, 1111], "return": [115, 116, 117, 118, 119, 122, 123, 126, 127, 128, 129, 136, 137, 138, 139, 140, 141, 142, 143, 150, 151, 152, 153, 154, 155, 158, 162, 163, 170, 177, 178, 179, 180, 181, 182, 183, 184, 185, 187, 188, 189, 190, 191, 192, 193, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 227, 228, 229, 230, 231, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 307, 308, 311, 312, 313, 314, 315, 316, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 335, 336, 337, 338, 339, 340, 349, 350, 351, 353, 354, 356, 357, 358, 359, 360, 361, 362, 364, 366, 367, 368, 369, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 426, 427, 428, 429, 430, 431, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 454, 458, 459, 468, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 502, 503, 504, 505, 506, 507, 508, 509, 510, 512, 513, 514, 516, 517, 518, 520, 521, 522, 524, 525, 526, 527, 529, 530, 531, 533, 534, 535, 537, 538, 539, 541, 542, 543, 545, 546, 547, 549, 550, 551, 553, 554, 555, 557, 558, 559, 561, 562, 563, 565, 566, 567, 569, 570, 571, 573, 574, 575, 577, 578, 579, 581, 582, 583, 585, 586, 587, 588, 590, 591, 592, 594, 595, 596, 598, 599, 600, 602, 603, 604, 606, 607, 608, 610, 611, 612, 614, 615, 616, 618, 619, 620, 622, 623, 624, 626, 627, 628, 630, 631, 632, 634, 635, 636, 638, 639, 640, 642, 643, 644, 646, 647, 648, 650, 651, 652, 654, 655, 656, 658, 659, 660, 662, 663, 664, 666, 667, 668, 670, 671, 672, 674, 675, 676, 677, 678, 680, 681, 682, 683, 685, 686, 687, 689, 690, 691, 693, 694, 695, 697, 698, 699, 701, 702, 703, 705, 706, 707, 709, 710, 711, 713, 714, 715, 717, 718, 719, 721, 722, 723, 725, 726, 727, 728, 730, 731, 732, 733, 735, 736, 737, 739, 740, 741, 743, 744, 745, 746, 748, 749, 750, 751, 753, 754, 755, 756, 757, 758, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 776, 777, 778, 780, 781, 782, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 801, 802, 803, 804, 807, 808, 809, 810, 811, 813, 814, 815, 816, 817, 818, 819, 821, 822, 824, 825, 826, 827, 829, 830, 831, 832, 834, 835, 836, 838, 839, 840, 841, 842, 843, 845, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 866, 867, 869, 870, 872, 873, 875, 876, 878, 879, 881, 882, 884, 885, 887, 888, 889, 891, 892, 893, 895, 896, 898, 899, 901, 902, 904, 905, 907, 908, 909, 911, 912, 914, 915, 917, 918, 920, 921, 923, 924, 926, 927, 929, 930, 932, 933, 934, 936, 937, 938, 939, 941, 942, 943, 944, 946, 947, 948, 949, 950, 952, 953, 954, 955, 957, 958, 959, 961, 962, 963, 965, 966, 967, 969, 970, 971, 973, 974, 975, 977, 978, 979, 981, 982, 983, 985, 986, 987, 988, 989, 991, 992, 993, 995, 996, 997, 999, 1000, 1001, 1003, 1004, 1005, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1019, 1023, 1024, 1025, 1026, 1031, 1032, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1061, 1062, 1063, 1064, 1066, 1067, 1068, 1069, 1070, 1072, 1073, 1074, 1076, 1077, 1078, 1080, 1081, 1082, 1084, 1085, 1086, 1088, 1089, 1090, 1092, 1093, 1094, 1096, 1097, 1098, 1100, 1101, 1102, 1103, 1105, 1106, 1107, 1109, 1110, 1111, 1114, 1116, 1121, 1122, 1132, 1141, 1142, 1148, 1152], "instanc": [115, 116, 117, 118, 119, 122, 123, 126, 127, 128, 129, 140, 141, 156, 157, 177, 178, 179, 180, 182, 187, 189, 206, 207, 208, 223, 225, 262, 299, 307, 308, 311, 312, 313, 314, 325, 326, 341, 342, 346, 350, 351, 353, 354, 357, 359, 361, 362, 367, 368, 369, 382, 390, 392, 394, 395, 396, 397, 398, 399, 403, 414, 422, 431, 433, 434, 459, 468, 500, 509, 522, 524, 527, 530, 538, 543, 547, 550, 567, 570, 571, 573, 574, 579, 591, 604, 606, 608, 615, 616, 619, 656, 676, 677, 683, 686, 687, 690, 703, 706, 719, 722, 723, 726, 732, 735, 740, 745, 746, 748, 762, 773, 774, 776, 789, 813, 815, 850, 853, 856, 862, 863, 864, 866, 867, 869, 870, 933, 934, 937, 949, 950, 952, 963, 966, 967, 970, 975, 978, 983, 985, 986, 988, 997, 1000, 1031, 1032, 1035, 1036, 1041, 1042, 1044, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1058, 1059, 1062, 1069, 1070, 1073, 1074, 1077, 1097, 1102, 1103, 1106, 1121, 1122], "args_to_ivi": 115, "arg": [115, 116, 117, 158, 162, 177, 178, 347, 364, 366, 368, 459, 468, 483, 487, 491, 503, 745, 802, 1121, 1122, 1144, 1145], "include_deriv": [115, 116, 117, 118, 119, 1013, 1015, 1025], "none": [115, 116, 117, 118, 119, 126, 127, 128, 129, 136, 137, 138, 139, 140, 141, 142, 143, 150, 151, 152, 153, 154, 155, 158, 160, 163, 170, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 349, 351, 354, 358, 359, 360, 361, 362, 364, 366, 368, 369, 392, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 410, 411, 412, 413, 415, 416, 417, 418, 419, 420, 421, 422, 428, 430, 431, 433, 435, 437, 438, 439, 442, 445, 459, 468, 469, 477, 478, 501, 502, 503, 504, 507, 509, 510, 512, 513, 514, 516, 517, 518, 520, 521, 522, 524, 525, 526, 527, 529, 530, 531, 533, 534, 535, 537, 538, 539, 541, 542, 543, 545, 546, 547, 549, 550, 551, 553, 554, 555, 557, 558, 559, 561, 562, 563, 565, 566, 567, 569, 570, 571, 573, 574, 575, 577, 578, 579, 581, 582, 583, 585, 586, 587, 588, 590, 591, 592, 594, 595, 596, 598, 599, 600, 602, 603, 604, 606, 607, 608, 610, 611, 612, 614, 615, 616, 618, 619, 620, 622, 623, 624, 626, 627, 628, 630, 631, 632, 634, 635, 636, 638, 639, 640, 642, 643, 644, 646, 647, 648, 650, 651, 652, 654, 655, 656, 658, 659, 660, 662, 663, 664, 666, 667, 668, 670, 671, 672, 674, 675, 676, 677, 678, 680, 681, 682, 683, 685, 686, 687, 689, 690, 691, 693, 694, 695, 697, 698, 699, 701, 702, 703, 705, 706, 707, 709, 710, 711, 713, 714, 715, 717, 718, 719, 721, 722, 723, 725, 726, 727, 728, 730, 731, 732, 733, 735, 736, 737, 739, 740, 741, 743, 744, 745, 746, 748, 750, 751, 757, 758, 759, 760, 762, 763, 764, 766, 767, 768, 769, 770, 771, 773, 774, 776, 777, 778, 783, 785, 786, 790, 796, 798, 801, 802, 803, 804, 809, 810, 816, 819, 822, 823, 824, 825, 827, 828, 829, 830, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 866, 867, 869, 870, 872, 873, 875, 879, 881, 882, 884, 885, 887, 888, 889, 891, 892, 893, 895, 896, 898, 899, 901, 902, 904, 908, 909, 911, 912, 914, 915, 917, 918, 920, 921, 923, 924, 926, 927, 929, 930, 932, 933, 934, 936, 937, 938, 939, 941, 942, 943, 944, 946, 947, 948, 949, 950, 952, 953, 954, 955, 957, 958, 959, 961, 962, 963, 965, 966, 967, 969, 970, 971, 973, 974, 975, 977, 978, 979, 981, 982, 983, 985, 986, 987, 988, 989, 991, 992, 993, 995, 996, 997, 999, 1000, 1001, 1003, 1004, 1005, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1019, 1024, 1025, 1026, 1031, 1032, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1052, 1053, 1057, 1058, 1059, 1061, 1062, 1063, 1064, 1066, 1067, 1068, 1069, 1070, 1072, 1073, 1074, 1076, 1077, 1078, 1080, 1081, 1082, 1084, 1085, 1086, 1088, 1089, 1090, 1092, 1093, 1094, 1096, 1097, 1098, 1100, 1101, 1102, 1103, 1105, 1106, 1107, 1109, 1110, 1121, 1122, 1123, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155], "kwarg": [115, 116, 117, 158, 162, 175, 176, 177, 178, 179, 180, 181, 182, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 364, 366, 368, 459, 468, 483, 487, 491, 745, 795, 1121, 1122, 1144, 1145], "keyword": [115, 116, 117, 177, 178, 179, 180, 181, 349, 359, 360, 361, 362, 367, 403, 414, 459, 468, 469, 483, 487, 491, 745, 752, 795, 1013, 1019, 1069, 1094, 1144, 1145], "variabl": [115, 116, 117, 118, 119, 177, 178, 179, 180, 350, 355, 358, 359, 361, 362, 367, 368, 369, 381, 745, 755, 787, 788, 789, 790, 791, 792, 794, 811, 819, 822, 824, 826, 827, 829, 831, 832, 834, 836, 838, 840, 842, 845, 848, 850, 861, 863, 909, 911, 1009, 1010, 1011, 1012, 1031, 1032, 1035, 1111, 1121, 1122, 1123, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155], "form": [115, 116, 117, 118, 119, 173, 177, 178, 343, 354, 368, 369, 403, 405, 415, 418, 419, 745, 751, 819, 822, 824, 827, 829, 832, 834, 836, 838, 840, 842, 850, 863, 864, 866, 870, 873, 875, 876, 878, 879, 881, 882, 884, 893, 895, 896, 898, 902, 904, 905, 907, 909, 911, 912, 914, 915, 917, 921, 923, 1013, 1015, 1025], "all": [115, 116, 117, 118, 119, 154, 155, 156, 157, 172, 173, 174, 177, 178, 182, 339, 340, 341, 342, 343, 344, 345, 346, 347, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 366, 367, 368, 369, 380, 381, 382, 390, 400, 401, 403, 404, 418, 419, 459, 468, 493, 499, 745, 746, 749, 753, 754, 779, 799, 814, 850, 860, 863, 909, 911, 918, 920, 927, 929, 949, 967, 970, 983, 986, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1024, 1025, 1026, 1036, 1037, 1042, 1044, 1102, 1111, 1114, 1116], "nest": [115, 116, 117, 118, 119, 177, 178, 179, 180, 181, 349, 354, 357, 358, 366, 367, 368, 381, 459, 483, 487, 491, 745, 813, 1009, 1010, 1011, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1144, 1145, 1148, 1149, 1150, 1151, 1152, 1153], "otherwis": [115, 116, 117, 118, 119, 158, 170, 177, 178, 357, 359, 360, 362, 364, 366, 403, 404, 422, 428, 431, 434, 437, 438, 439, 459, 478, 509, 620, 623, 624, 627, 628, 631, 745, 755, 816, 819, 831, 845, 863, 864, 866, 870, 924, 926, 927, 929, 1009, 1010, 1011, 1013, 1026, 1048, 1049, 1050, 1052, 1069, 1074, 1077, 1078, 1081, 1082, 1085, 1086, 1089, 1090, 1093, 1094, 1098, 1101, 1102, 1103, 1106, 1107, 1110], "argument": [115, 116, 117, 118, 119, 158, 162, 163, 172, 177, 178, 179, 180, 181, 346, 348, 349, 350, 351, 353, 354, 355, 357, 358, 364, 366, 367, 400, 401, 403, 404, 422, 431, 434, 450, 459, 468, 469, 483, 487, 491, 509, 522, 527, 530, 571, 574, 604, 687, 690, 719, 722, 723, 726, 732, 745, 751, 752, 756, 766, 773, 795, 802, 850, 853, 862, 949, 983, 986, 1013, 1019, 1031, 1032, 1035, 1069, 1074, 1077, 1094, 1102, 1103, 1106, 1114, 1116, 1121, 1122, 1144, 1145], "ar": [115, 116, 117, 172, 173, 174, 177, 178, 179, 180, 181, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 380, 381, 382, 390, 403, 404, 459, 468, 469, 493, 497, 499, 503, 509, 575, 664, 667, 668, 671, 703, 706, 711, 714, 732, 745, 746, 749, 753, 754, 755, 779, 785, 786, 790, 797, 799, 811, 850, 859, 863, 867, 869, 884, 885, 888, 889, 891, 893, 895, 902, 904, 912, 914, 915, 917, 924, 926, 949, 950, 953, 967, 970, 983, 986, 1013, 1015, 1019, 1025, 1036, 1041, 1042, 1044, 1048, 1049, 1050, 1051, 1053, 1054, 1111, 1154, 1155], "unchang": [115, 116, 117, 118, 119], "paramet": [115, 116, 117, 118, 119, 156, 157, 158, 162, 163, 177, 178, 179, 180, 181, 341, 342, 349, 350, 353, 366, 367, 380, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 426, 427, 428, 429, 430, 431, 434, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 458, 459, 468, 469, 472, 473, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 495, 497, 498, 499, 500, 501, 502, 503, 504, 505, 508, 509, 510, 513, 514, 517, 518, 521, 522, 525, 527, 530, 531, 534, 535, 538, 539, 542, 543, 546, 547, 550, 551, 554, 555, 558, 559, 562, 563, 566, 567, 570, 571, 574, 575, 578, 579, 582, 583, 586, 588, 591, 592, 595, 596, 599, 600, 603, 604, 607, 608, 611, 612, 615, 616, 619, 620, 623, 624, 627, 628, 631, 632, 635, 636, 639, 640, 643, 644, 647, 648, 651, 652, 655, 656, 659, 660, 663, 664, 667, 668, 671, 672, 675, 676, 677, 678, 681, 683, 686, 687, 690, 691, 694, 695, 698, 699, 702, 703, 706, 707, 710, 711, 714, 715, 718, 719, 722, 723, 726, 727, 731, 732, 736, 737, 740, 741, 744, 745, 746, 749, 751, 752, 753, 754, 755, 756, 757, 758, 760, 763, 764, 766, 767, 768, 769, 770, 771, 772, 773, 774, 777, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 798, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 813, 814, 815, 816, 817, 818, 819, 821, 822, 824, 826, 827, 829, 831, 832, 834, 836, 838, 840, 842, 844, 845, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 866, 867, 869, 870, 872, 873, 875, 876, 878, 879, 881, 882, 884, 885, 888, 889, 891, 893, 895, 896, 898, 899, 901, 902, 904, 905, 907, 908, 909, 911, 912, 914, 915, 917, 918, 920, 921, 923, 924, 926, 927, 929, 930, 932, 933, 934, 937, 939, 942, 944, 947, 949, 950, 953, 955, 958, 959, 962, 963, 966, 967, 970, 971, 974, 975, 978, 979, 982, 983, 986, 988, 989, 992, 993, 996, 997, 1000, 1001, 1004, 1005, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1035, 1036, 1037, 1038, 1039, 1041, 1042, 1044, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1062, 1064, 1067, 1069, 1070, 1073, 1074, 1077, 1078, 1081, 1082, 1085, 1086, 1089, 1090, 1093, 1094, 1097, 1098, 1101, 1102, 1103, 1106, 1107, 1110, 1114, 1116, 1121, 1122, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155], "iter": [115, 116, 117, 118, 119, 156, 157, 174, 177, 178, 179, 180, 181, 341, 342, 358, 364, 367, 400, 401, 459, 481, 482, 484, 485, 486, 487, 490, 503, 745, 746, 749, 802, 807, 949, 959, 962, 975, 978, 988, 1001, 1004, 1005, 1008, 1013, 1014, 1015, 1019, 1023, 1024, 1025], "ani": [115, 116, 117, 154, 155, 156, 157, 158, 162, 170, 172, 173, 174, 177, 178, 182, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 364, 366, 367, 368, 369, 380, 381, 400, 401, 403, 405, 415, 422, 431, 434, 459, 504, 509, 522, 527, 530, 571, 574, 588, 591, 604, 615, 616, 619, 636, 639, 687, 690, 719, 722, 723, 726, 732, 745, 746, 749, 766, 767, 768, 769, 770, 773, 784, 791, 792, 793, 794, 809, 810, 819, 826, 850, 853, 862, 949, 983, 986, 1009, 1010, 1011, 1012, 1013, 1019, 1023, 1031, 1032, 1035, 1036, 1042, 1044, 1069, 1074, 1077, 1102, 1103, 1106, 1111], "The": [115, 116, 117, 118, 119, 158, 162, 163, 171, 172, 174, 177, 178, 179, 180, 181, 343, 344, 346, 347, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 367, 368, 369, 380, 392, 393, 394, 397, 399, 400, 401, 403, 404, 409, 413, 414, 418, 419, 422, 426, 427, 428, 436, 441, 443, 444, 446, 449, 454, 458, 459, 468, 469, 475, 476, 477, 478, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 497, 498, 499, 500, 501, 502, 503, 505, 508, 509, 510, 513, 514, 517, 518, 521, 522, 525, 527, 530, 531, 534, 535, 538, 539, 542, 543, 546, 547, 550, 551, 554, 555, 558, 559, 562, 563, 566, 567, 570, 571, 574, 575, 578, 579, 582, 583, 586, 588, 591, 592, 595, 596, 599, 600, 603, 604, 607, 608, 611, 612, 615, 616, 619, 620, 623, 624, 627, 628, 631, 632, 635, 636, 639, 640, 643, 644, 647, 652, 655, 656, 659, 660, 663, 664, 667, 668, 671, 672, 675, 678, 681, 687, 690, 695, 698, 699, 702, 703, 706, 707, 710, 711, 714, 715, 718, 719, 722, 732, 736, 740, 741, 744, 745, 751, 753, 756, 757, 765, 766, 772, 774, 777, 787, 788, 789, 791, 792, 793, 794, 796, 801, 802, 803, 804, 805, 808, 809, 810, 818, 819, 821, 822, 824, 827, 829, 832, 834, 836, 838, 840, 842, 845, 848, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 861, 862, 863, 864, 866, 867, 869, 870, 872, 873, 875, 876, 878, 879, 881, 882, 884, 889, 891, 893, 895, 896, 898, 899, 901, 902, 904, 905, 907, 908, 909, 911, 912, 914, 915, 917, 918, 920, 921, 923, 924, 926, 927, 929, 933, 934, 937, 939, 942, 944, 947, 949, 955, 958, 959, 962, 963, 966, 967, 970, 971, 974, 975, 978, 979, 982, 988, 1001, 1004, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1035, 1036, 1037, 1041, 1048, 1049, 1050, 1051, 1053, 1054, 1055, 1057, 1058, 1059, 1062, 1064, 1067, 1069, 1070, 1073, 1074, 1077, 1078, 1081, 1082, 1085, 1086, 1089, 1090, 1093, 1094, 1097, 1098, 1101, 1102, 1103, 1106, 1107, 1110, 1111, 1121, 1122, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1150, 1151, 1152], "posit": [115, 116, 117, 126, 127, 182, 311, 312, 362, 367, 380, 402, 403, 408, 422, 442, 459, 483, 487, 491, 509, 510, 513, 620, 623, 624, 627, 678, 681, 699, 702, 745, 772, 863, 864, 866, 949, 963, 966, 983, 986, 1036, 1046, 1048, 1051, 1102, 1103, 1106, 1107, 1110, 1121, 1122], "check": [115, 116, 117, 118, 119, 172, 173, 174, 177, 178, 344, 345, 358, 363, 364, 366, 367, 368, 369, 380, 422, 436, 443, 444, 446, 458, 459, 498, 508, 745, 755, 770, 784, 791, 792, 793, 794, 811, 818, 819, 831, 863, 876, 878, 1013, 1014, 1023, 1024, 1025, 1111], "option": [115, 116, 117, 118, 119, 156, 157, 158, 163, 177, 178, 341, 342, 344, 345, 349, 350, 351, 354, 358, 359, 360, 361, 362, 364, 369, 381, 392, 394, 395, 397, 400, 401, 403, 404, 405, 406, 407, 408, 410, 411, 412, 413, 414, 415, 416, 417, 420, 421, 422, 436, 437, 438, 439, 446, 458, 459, 478, 502, 503, 504, 509, 510, 513, 514, 517, 518, 521, 522, 525, 527, 530, 531, 534, 535, 539, 542, 547, 550, 551, 554, 555, 558, 559, 562, 563, 566, 567, 570, 571, 574, 575, 578, 579, 582, 596, 599, 600, 603, 604, 620, 623, 624, 627, 628, 631, 632, 635, 640, 643, 644, 647, 648, 651, 652, 655, 656, 659, 660, 663, 664, 667, 668, 671, 672, 675, 678, 681, 683, 686, 687, 690, 695, 698, 699, 702, 703, 706, 707, 710, 711, 714, 715, 718, 719, 722, 723, 726, 727, 731, 732, 745, 751, 758, 760, 763, 764, 765, 771, 773, 796, 798, 801, 802, 809, 810, 819, 845, 850, 853, 856, 857, 859, 862, 863, 884, 889, 891, 893, 895, 902, 904, 927, 929, 933, 934, 937, 939, 942, 944, 947, 949, 950, 953, 955, 958, 963, 966, 967, 970, 971, 974, 975, 978, 983, 986, 988, 989, 992, 993, 996, 997, 1000, 1009, 1010, 1011, 1012, 1013, 1014, 1019, 1024, 1025, 1031, 1032, 1035, 1036, 1037, 1038, 1039, 1041, 1042, 1044, 1048, 1049, 1050, 1058, 1059, 1062, 1064, 1067, 1069, 1070, 1073, 1074, 1077, 1078, 1081, 1082, 1085, 1086, 1089, 1090, 1093, 1094, 1097, 1098, 1101, 1102, 1103, 1106, 1107, 1110], "dict": [115, 116, 117, 118, 119, 158, 170, 177, 178, 179, 180, 181, 358, 367, 368, 459, 468, 469, 478, 481, 484, 485, 486, 487, 745, 751, 767, 768, 769, 1013, 1015, 1016, 1019, 1022, 1025, 1026], "type": [115, 116, 117, 118, 119, 123, 126, 127, 128, 129, 136, 137, 138, 139, 140, 141, 142, 143, 150, 151, 152, 153, 154, 155, 156, 157, 158, 164, 170, 177, 178, 179, 180, 181, 182, 183, 184, 185, 187, 188, 189, 190, 191, 192, 193, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 227, 228, 229, 230, 231, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 308, 311, 312, 313, 314, 315, 316, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 335, 336, 337, 338, 339, 340, 341, 342, 344, 346, 348, 349, 350, 351, 356, 357, 358, 360, 361, 362, 364, 366, 367, 369, 382, 383, 384, 385, 386, 387, 388, 389, 390, 392, 394, 395, 396, 397, 398, 399, 400, 401, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 426, 427, 428, 429, 430, 431, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 454, 458, 459, 475, 476, 477, 478, 479, 481, 491, 492, 493, 494, 495, 496, 497, 498, 500, 502, 503, 504, 505, 506, 507, 508, 509, 510, 512, 513, 514, 516, 517, 518, 520, 521, 522, 524, 525, 526, 527, 529, 530, 531, 533, 534, 535, 537, 538, 539, 541, 542, 543, 545, 546, 547, 549, 550, 551, 553, 554, 555, 557, 558, 559, 561, 562, 563, 565, 566, 567, 569, 570, 571, 573, 574, 575, 577, 578, 579, 581, 582, 583, 585, 586, 587, 588, 590, 591, 592, 594, 595, 596, 598, 599, 600, 602, 603, 604, 606, 607, 608, 610, 611, 612, 614, 615, 616, 618, 619, 620, 622, 623, 624, 626, 627, 628, 630, 631, 632, 634, 635, 636, 638, 639, 640, 642, 643, 644, 646, 647, 648, 650, 651, 652, 654, 655, 656, 658, 659, 660, 662, 663, 664, 666, 667, 668, 670, 671, 672, 674, 675, 676, 677, 678, 680, 681, 682, 683, 685, 686, 687, 689, 690, 691, 693, 694, 695, 697, 698, 699, 701, 702, 703, 705, 706, 707, 709, 710, 711, 713, 714, 715, 717, 718, 719, 721, 722, 723, 725, 726, 727, 728, 730, 731, 732, 733, 735, 736, 737, 739, 740, 741, 743, 744, 745, 746, 748, 749, 750, 751, 753, 754, 756, 757, 758, 760, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 776, 777, 778, 780, 781, 782, 784, 785, 787, 788, 789, 791, 792, 793, 794, 798, 801, 802, 803, 804, 807, 809, 810, 811, 813, 814, 815, 817, 818, 819, 821, 822, 824, 825, 827, 829, 830, 831, 832, 834, 835, 836, 838, 839, 840, 841, 842, 843, 845, 847, 850, 851, 853, 855, 856, 857, 862, 863, 864, 866, 867, 869, 870, 872, 873, 875, 876, 878, 879, 881, 882, 884, 885, 887, 888, 889, 891, 892, 893, 895, 896, 898, 899, 901, 902, 904, 905, 907, 908, 909, 911, 912, 914, 915, 917, 918, 920, 921, 923, 924, 926, 927, 929, 930, 932, 933, 934, 936, 937, 938, 939, 941, 942, 943, 944, 946, 947, 948, 949, 950, 952, 953, 954, 955, 957, 958, 959, 961, 962, 963, 965, 966, 967, 969, 970, 971, 973, 974, 975, 977, 978, 979, 981, 982, 983, 985, 986, 987, 988, 989, 991, 992, 993, 995, 996, 997, 999, 1000, 1001, 1003, 1004, 1005, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1019, 1023, 1024, 1025, 1031, 1032, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1061, 1062, 1063, 1064, 1066, 1067, 1068, 1069, 1070, 1072, 1073, 1074, 1076, 1077, 1078, 1080, 1081, 1082, 1084, 1085, 1086, 1088, 1089, 1090, 1092, 1093, 1094, 1096, 1097, 1098, 1100, 1101, 1102, 1103, 1105, 1106, 1107, 1109, 1110, 1111, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143], "bool": [115, 116, 117, 118, 119, 122, 123, 177, 178, 341, 342, 351, 358, 359, 361, 369, 400, 401, 403, 410, 422, 428, 431, 434, 437, 438, 439, 440, 443, 446, 447, 448, 458, 459, 478, 479, 494, 503, 506, 509, 547, 550, 551, 554, 559, 562, 567, 570, 588, 591, 612, 615, 616, 619, 620, 623, 624, 627, 628, 631, 632, 635, 636, 639, 660, 663, 664, 667, 668, 671, 687, 690, 745, 746, 749, 753, 754, 763, 766, 770, 772, 782, 784, 789, 791, 792, 793, 794, 807, 817, 818, 819, 845, 863, 864, 866, 889, 891, 912, 927, 929, 949, 988, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1019, 1023, 1024, 1025, 1036, 1037, 1048, 1049, 1050, 1058, 1059, 1062, 1064, 1067, 1069, 1074, 1077, 1078, 1081, 1082, 1085, 1086, 1089, 1090, 1093, 1094, 1098, 1101, 1102, 1103, 1106, 1107, 1110], "whether": [115, 116, 117, 118, 119, 177, 178, 179, 180, 181, 341, 342, 343, 344, 359, 361, 362, 392, 393, 400, 401, 422, 428, 440, 446, 447, 448, 458, 459, 478, 479, 490, 494, 495, 498, 499, 503, 506, 508, 509, 628, 631, 745, 746, 749, 753, 754, 763, 766, 770, 772, 782, 784, 786, 789, 790, 791, 792, 793, 794, 795, 807, 811, 817, 818, 819, 822, 824, 826, 827, 829, 831, 832, 834, 836, 838, 840, 842, 845, 850, 858, 863, 876, 878, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1019, 1023, 1024, 1025, 1026, 1036, 1037, 1102, 1103, 1106, 1107, 1110, 1121, 1122, 1132, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153], "also": [115, 116, 117, 118, 119, 122, 123, 126, 127, 128, 129, 140, 141, 172, 173, 177, 178, 182, 187, 189, 206, 207, 208, 223, 225, 262, 274, 275, 278, 279, 282, 288, 290, 294, 299, 307, 308, 311, 312, 313, 314, 325, 326, 329, 330, 343, 344, 345, 348, 349, 350, 351, 353, 354, 356, 357, 358, 359, 360, 361, 362, 364, 366, 367, 368, 369, 380, 381, 403, 414, 422, 431, 433, 434, 435, 509, 522, 524, 526, 527, 530, 538, 543, 547, 550, 567, 570, 571, 573, 574, 579, 604, 606, 608, 656, 687, 690, 703, 706, 719, 722, 723, 726, 732, 733, 735, 740, 745, 746, 748, 750, 773, 774, 776, 778, 789, 819, 822, 824, 850, 853, 859, 862, 863, 870, 949, 950, 952, 954, 963, 966, 967, 970, 983, 985, 986, 987, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1023, 1024, 1025, 1031, 1032, 1035, 1038, 1040, 1053, 1054, 1055, 1058, 1059, 1062, 1069, 1074, 1077, 1102, 1103, 1106, 1132, 1142], "recurs": [115, 116, 117, 118, 119, 177, 178, 344, 347, 354, 358, 368, 381, 1013, 1014, 1015, 1023, 1024, 1025], "deriv": [115, 116, 117, 118, 119, 359, 360, 366, 368, 403, 407, 411, 417, 421, 819, 821, 822, 824, 827, 829, 832, 834, 836, 838, 840, 842, 1013, 1015, 1025, 1144, 1148, 1152, 1154], "from": [115, 116, 117, 118, 119, 156, 157, 158, 162, 163, 164, 172, 173, 174, 177, 178, 179, 180, 181, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 353, 355, 357, 358, 359, 360, 361, 362, 364, 366, 367, 368, 369, 380, 381, 403, 404, 405, 407, 409, 410, 411, 414, 415, 417, 421, 422, 431, 434, 450, 459, 468, 469, 478, 493, 497, 502, 503, 509, 612, 719, 722, 745, 766, 773, 774, 777, 813, 819, 822, 824, 832, 834, 850, 858, 861, 863, 873, 875, 912, 924, 926, 949, 967, 970, 979, 982, 989, 992, 1009, 1010, 1011, 1012, 1013, 1015, 1025, 1026, 1036, 1037, 1038, 1039, 1041, 1042, 1044, 1048, 1052, 1053, 1054, 1056, 1069, 1086, 1089, 1090, 1093, 1094, 1098, 1101, 1102, 1103, 1106, 1107, 1110, 1111, 1117, 1121, 1122, 1132, 1140, 1143, 1148, 1152], "tupl": [115, 116, 117, 118, 119, 136, 137, 177, 178, 349, 358, 359, 360, 362, 366, 367, 368, 381, 400, 401, 403, 405, 406, 410, 415, 416, 420, 422, 430, 444, 459, 478, 745, 772, 808, 850, 853, 856, 857, 863, 884, 893, 895, 902, 904, 912, 918, 920, 927, 929, 949, 955, 958, 959, 962, 967, 970, 971, 974, 983, 986, 989, 992, 993, 996, 1005, 1008, 1009, 1010, 1011, 1012, 1013, 1015, 1016, 1018, 1020, 1021, 1022, 1024, 1025, 1027, 1028, 1029, 1030, 1036, 1041, 1042, 1044, 1048, 1051, 1053, 1054, 1055, 1056, 1069, 1074, 1077, 1078, 1081, 1082, 1085, 1086, 1089, 1090, 1093, 1094, 1098, 1101, 1102, 1103, 1106, 1107, 1110], "list": [115, 116, 117, 118, 119, 156, 157, 177, 178, 341, 342, 344, 346, 347, 349, 351, 359, 360, 362, 364, 367, 368, 369, 381, 403, 404, 405, 406, 414, 415, 416, 420, 422, 429, 459, 468, 469, 478, 480, 481, 484, 485, 488, 489, 503, 745, 754, 808, 813, 817, 850, 851, 852, 853, 854, 855, 856, 857, 863, 918, 920, 949, 955, 958, 967, 970, 988, 993, 996, 1013, 1014, 1015, 1019, 1024, 1025, 1031, 1032, 1035, 1048, 1051, 1102, 1103, 1106, 1107, 1110, 1111, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139], "default": [115, 116, 117, 118, 119, 156, 157, 158, 163, 177, 178, 179, 180, 181, 341, 342, 345, 350, 351, 354, 355, 358, 359, 360, 362, 368, 392, 393, 394, 395, 397, 400, 401, 403, 404, 405, 406, 407, 408, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 428, 437, 438, 439, 440, 459, 468, 469, 478, 479, 483, 484, 485, 486, 487, 488, 489, 490, 491, 498, 500, 501, 502, 503, 504, 507, 508, 509, 510, 513, 514, 517, 518, 521, 522, 525, 527, 530, 531, 534, 535, 539, 542, 547, 550, 551, 554, 555, 558, 559, 562, 563, 566, 567, 570, 571, 574, 575, 578, 579, 582, 596, 599, 600, 603, 604, 620, 623, 624, 627, 628, 631, 632, 635, 640, 643, 644, 647, 648, 651, 652, 655, 656, 659, 660, 663, 664, 667, 668, 671, 672, 675, 678, 681, 683, 686, 687, 690, 695, 698, 699, 702, 703, 706, 707, 710, 711, 714, 715, 718, 719, 722, 723, 726, 727, 731, 732, 745, 746, 749, 751, 757, 758, 760, 763, 764, 771, 772, 773, 782, 783, 784, 786, 789, 790, 791, 792, 794, 795, 796, 798, 800, 801, 802, 805, 807, 809, 810, 817, 818, 819, 821, 822, 824, 826, 827, 829, 831, 832, 834, 836, 838, 840, 842, 845, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 866, 867, 869, 873, 875, 884, 889, 891, 893, 895, 902, 904, 905, 907, 912, 918, 920, 921, 923, 924, 926, 927, 929, 933, 934, 937, 939, 942, 944, 947, 949, 950, 953, 955, 958, 959, 962, 963, 966, 967, 970, 971, 974, 975, 978, 983, 986, 988, 989, 992, 993, 996, 997, 1000, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1019, 1023, 1024, 1025, 1026, 1031, 1032, 1035, 1036, 1037, 1038, 1039, 1041, 1042, 1044, 1046, 1048, 1049, 1050, 1051, 1053, 1054, 1055, 1058, 1059, 1062, 1064, 1067, 1069, 1070, 1073, 1074, 1077, 1078, 1081, 1082, 1085, 1086, 1089, 1090, 1093, 1094, 1097, 1098, 1101, 1102, 1103, 1106, 1107, 1110, 1121, 1122, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155], "fals": [115, 116, 117, 118, 119, 128, 129, 136, 137, 150, 151, 152, 153, 154, 155, 158, 165, 166, 167, 168, 169, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 351, 358, 361, 367, 368, 369, 422, 428, 431, 433, 434, 435, 440, 459, 478, 479, 490, 494, 495, 498, 503, 506, 508, 509, 510, 512, 516, 517, 518, 520, 524, 525, 526, 527, 529, 531, 533, 537, 538, 539, 541, 543, 545, 547, 549, 550, 551, 553, 555, 557, 559, 561, 563, 565, 567, 569, 571, 573, 577, 578, 581, 582, 585, 586, 587, 590, 591, 592, 594, 598, 599, 600, 602, 606, 607, 608, 610, 612, 614, 615, 616, 618, 619, 620, 622, 623, 624, 626, 627, 628, 630, 631, 632, 634, 635, 636, 638, 640, 642, 644, 646, 648, 650, 652, 654, 656, 658, 660, 662, 664, 666, 667, 668, 670, 671, 672, 674, 678, 680, 682, 683, 685, 687, 689, 690, 691, 693, 695, 697, 699, 701, 703, 705, 707, 709, 711, 713, 715, 717, 719, 721, 723, 725, 727, 728, 730, 733, 735, 736, 739, 740, 741, 743, 745, 746, 748, 749, 750, 753, 754, 758, 759, 763, 766, 770, 772, 774, 776, 778, 782, 789, 791, 792, 794, 795, 807, 817, 819, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 863, 864, 866, 885, 887, 889, 891, 912, 927, 929, 934, 936, 938, 939, 941, 943, 944, 946, 948, 949, 950, 952, 954, 955, 957, 959, 961, 963, 965, 967, 969, 971, 973, 975, 977, 979, 981, 983, 985, 987, 988, 989, 991, 993, 995, 997, 999, 1001, 1003, 1005, 1007, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1019, 1023, 1024, 1025, 1026, 1032, 1034, 1036, 1037, 1042, 1043, 1045, 1048, 1049, 1050, 1052, 1053, 1054, 1055, 1057, 1058, 1059, 1061, 1062, 1063, 1064, 1066, 1067, 1068, 1069, 1070, 1072, 1074, 1076, 1077, 1078, 1080, 1081, 1082, 1084, 1085, 1086, 1088, 1089, 1090, 1092, 1093, 1094, 1096, 1097, 1098, 1100, 1101, 1102, 1103, 1105, 1106, 1107, 1109, 1110, 1121, 1122, 1144, 1145, 1148, 1149, 1150, 1151, 1152, 1153], "str": [115, 116, 117, 158, 163, 177, 178, 359, 360, 403, 414, 422, 426, 436, 437, 438, 441, 442, 445, 446, 447, 448, 451, 452, 453, 458, 459, 475, 478, 479, 481, 484, 485, 486, 487, 503, 745, 751, 765, 767, 768, 769, 796, 801, 802, 850, 851, 853, 855, 856, 857, 863, 905, 907, 1009, 1010, 1011, 1012, 1013, 1019, 1069, 1070, 1073, 1097], "kei": [115, 116, 117, 177, 178, 179, 180, 181, 358, 367, 459, 471, 745, 751, 761, 850, 861, 862, 1009, 1010, 1011, 1013, 1016, 1022, 1026, 1121, 1122, 1132, 1143, 1148, 1152], "word": [115, 116, 117, 403, 404, 1036, 1042, 1044, 1121, 1122], "ret": [115, 116, 117, 118, 119, 158, 162, 163, 170, 177, 178, 349, 350, 364, 369, 392, 393, 394, 395, 396, 397, 398, 399, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 426, 427, 428, 429, 430, 431, 434, 436, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 458, 459, 468, 475, 476, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 502, 503, 504, 505, 506, 508, 509, 510, 513, 514, 517, 518, 521, 522, 525, 527, 530, 531, 534, 535, 538, 539, 542, 543, 546, 547, 550, 551, 554, 555, 558, 559, 562, 563, 566, 567, 570, 571, 574, 575, 578, 579, 582, 583, 586, 588, 591, 592, 595, 596, 599, 600, 603, 604, 607, 608, 611, 612, 615, 616, 619, 620, 623, 624, 627, 628, 631, 632, 635, 636, 639, 640, 643, 644, 647, 648, 651, 652, 655, 656, 659, 660, 663, 664, 667, 668, 671, 672, 675, 676, 677, 678, 681, 683, 686, 687, 690, 691, 694, 695, 698, 699, 702, 703, 706, 707, 710, 711, 714, 715, 718, 719, 722, 723, 726, 727, 731, 732, 736, 737, 740, 741, 744, 745, 746, 749, 751, 753, 754, 755, 756, 757, 758, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 777, 781, 782, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 798, 801, 802, 807, 809, 810, 811, 813, 814, 815, 817, 818, 819, 821, 822, 824, 826, 827, 829, 831, 832, 834, 836, 838, 840, 842, 845, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 866, 867, 869, 870, 872, 873, 875, 876, 878, 879, 881, 882, 884, 885, 888, 889, 891, 893, 895, 896, 898, 899, 901, 902, 904, 905, 907, 908, 909, 911, 912, 914, 915, 917, 918, 920, 921, 923, 924, 926, 927, 929, 930, 932, 933, 934, 937, 939, 942, 944, 947, 949, 950, 953, 955, 958, 959, 962, 963, 966, 967, 970, 971, 974, 975, 978, 979, 982, 983, 986, 988, 989, 992, 993, 996, 997, 1000, 1001, 1004, 1005, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1019, 1023, 1024, 1025, 1031, 1032, 1035, 1036, 1037, 1038, 1039, 1041, 1042, 1044, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1062, 1064, 1067, 1069, 1070, 1073, 1074, 1077, 1078, 1081, 1082, 1085, 1086, 1089, 1090, 1093, 1094, 1097, 1098, 1101, 1102, 1103, 1106, 1107, 1110, 1114, 1116, 1121, 1122, 1148, 1152], "same": [115, 116, 117, 172, 174, 177, 178, 344, 345, 347, 349, 351, 353, 354, 357, 358, 360, 361, 362, 364, 366, 368, 369, 403, 404, 407, 411, 414, 417, 418, 419, 421, 422, 428, 429, 430, 459, 468, 469, 503, 509, 510, 513, 522, 551, 554, 571, 574, 604, 678, 681, 699, 702, 703, 706, 707, 710, 741, 744, 745, 771, 773, 774, 777, 798, 801, 802, 819, 831, 845, 850, 851, 852, 853, 854, 855, 856, 857, 862, 863, 864, 866, 867, 869, 870, 873, 875, 876, 878, 879, 881, 882, 884, 896, 898, 902, 904, 905, 907, 909, 911, 912, 921, 923, 924, 926, 949, 955, 958, 967, 970, 971, 974, 983, 986, 989, 992, 993, 996, 1009, 1010, 1011, 1013, 1026, 1053, 1054, 1055, 1057, 1058, 1059, 1062, 1064, 1067, 1069, 1070, 1073, 1074, 1077, 1078, 1081, 1082, 1085, 1086, 1089, 1094, 1097, 1098, 1101, 1111, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139], "convert": [115, 116, 117, 118, 119, 174, 177, 178, 357, 364, 381, 382, 390, 403, 405, 415, 422, 426, 427, 459, 475, 476, 477, 478, 498, 505, 508, 745, 808, 814, 815, 863, 930, 932, 1013, 1015, 1025, 1026, 1122], "args_to_n": [115, 361, 366], "nativ": [115, 117, 118, 119, 158, 164, 177, 178, 359, 361, 366, 367, 403, 415, 422, 426, 427, 436, 459, 475, 476, 477, 478, 479, 498, 505, 508, 745, 789, 791, 794, 1121, 1122], "backend": [115, 117, 119, 162, 163, 164, 170, 172, 177, 178, 345, 346, 348, 350, 352, 353, 354, 356, 357, 358, 359, 360, 361, 362, 365, 366, 369, 422, 443, 444, 446, 458, 459, 494, 496, 506, 745, 786, 789, 790, 796, 819, 822, 824, 827, 829, 832, 834, 836, 838, 840, 842, 848, 1111, 1117, 1121, 1122, 1148, 1149, 1150, 1151, 1152, 1153], "to_ivi": [115, 177, 178, 366, 1013, 1026], "x": [115, 118, 119, 122, 123, 126, 127, 128, 129, 140, 141, 158, 162, 170, 177, 178, 179, 180, 182, 187, 206, 207, 208, 223, 225, 262, 272, 274, 276, 278, 279, 282, 288, 290, 291, 294, 299, 307, 308, 311, 312, 313, 314, 325, 326, 329, 330, 335, 336, 347, 349, 350, 351, 354, 355, 358, 361, 362, 364, 366, 367, 368, 369, 392, 393, 394, 395, 396, 397, 398, 399, 403, 405, 407, 409, 411, 414, 415, 417, 418, 419, 420, 421, 422, 428, 430, 431, 433, 434, 435, 440, 459, 478, 479, 480, 481, 484, 485, 493, 497, 502, 504, 509, 510, 513, 514, 517, 518, 521, 522, 524, 526, 527, 530, 531, 534, 535, 538, 539, 542, 543, 546, 547, 550, 551, 554, 567, 570, 571, 573, 574, 575, 578, 579, 582, 591, 592, 595, 596, 600, 603, 604, 606, 608, 612, 615, 616, 619, 620, 623, 624, 627, 628, 631, 632, 635, 640, 643, 644, 647, 648, 651, 652, 655, 656, 664, 667, 676, 677, 683, 686, 691, 694, 703, 706, 707, 710, 711, 714, 715, 718, 719, 722, 723, 726, 732, 733, 735, 736, 737, 740, 741, 744, 745, 753, 754, 755, 757, 758, 760, 762, 763, 764, 766, 767, 768, 769, 770, 771, 772, 773, 774, 776, 777, 778, 781, 782, 784, 785, 787, 788, 789, 791, 792, 793, 794, 798, 807, 808, 811, 813, 814, 815, 817, 818, 819, 826, 831, 845, 847, 848, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 866, 867, 869, 870, 872, 873, 875, 876, 878, 879, 881, 882, 884, 889, 891, 892, 893, 895, 896, 898, 899, 901, 902, 904, 905, 907, 908, 912, 914, 915, 917, 918, 920, 921, 923, 927, 929, 933, 934, 937, 939, 942, 944, 947, 949, 950, 952, 953, 954, 955, 958, 959, 962, 963, 966, 967, 970, 971, 974, 975, 978, 979, 982, 983, 985, 986, 987, 988, 989, 992, 993, 995, 996, 997, 1000, 1001, 1004, 1005, 1008, 1013, 1014, 1019, 1023, 1024, 1025, 1031, 1032, 1035, 1036, 1038, 1039, 1040, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1062, 1063, 1064, 1067, 1068, 1069, 1070, 1073, 1074, 1077, 1078, 1081, 1082, 1085, 1086, 1089, 1090, 1093, 1094, 1097, 1098, 1101, 1102, 1103, 1106, 1107, 1110, 1111, 1132, 1143], "input": [115, 118, 119, 177, 178, 179, 180, 181, 182, 274, 275, 279, 282, 288, 290, 294, 311, 312, 313, 314, 325, 326, 329, 330, 349, 350, 351, 353, 354, 355, 357, 358, 359, 360, 361, 362, 364, 366, 367, 368, 369, 381, 382, 390, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 403, 405, 407, 409, 411, 414, 415, 417, 418, 419, 421, 422, 428, 429, 431, 434, 436, 437, 438, 439, 440, 441, 447, 448, 449, 450, 454, 459, 468, 469, 478, 479, 480, 481, 483, 484, 487, 491, 497, 503, 504, 509, 510, 513, 514, 517, 518, 521, 522, 525, 526, 527, 530, 531, 534, 535, 538, 539, 542, 543, 546, 547, 550, 551, 554, 555, 558, 559, 562, 563, 566, 567, 570, 571, 574, 575, 578, 579, 582, 583, 586, 588, 591, 596, 599, 600, 603, 604, 607, 608, 611, 612, 615, 616, 619, 620, 623, 624, 627, 628, 631, 632, 635, 636, 639, 640, 643, 644, 647, 648, 651, 652, 655, 656, 659, 660, 663, 664, 667, 668, 671, 672, 675, 676, 677, 678, 681, 683, 686, 687, 690, 691, 694, 695, 698, 699, 702, 703, 706, 707, 710, 711, 714, 715, 718, 719, 722, 723, 726, 727, 731, 732, 733, 736, 737, 740, 741, 744, 745, 746, 749, 750, 751, 753, 754, 755, 757, 758, 760, 762, 763, 764, 766, 767, 768, 769, 770, 771, 772, 773, 774, 777, 778, 782, 784, 785, 787, 788, 789, 791, 792, 793, 794, 807, 808, 811, 813, 814, 815, 817, 818, 819, 826, 831, 845, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 866, 867, 869, 870, 873, 875, 876, 878, 879, 881, 882, 884, 885, 888, 889, 891, 893, 895, 896, 898, 899, 901, 902, 904, 905, 907, 912, 914, 915, 917, 918, 920, 921, 923, 924, 926, 927, 929, 933, 934, 937, 939, 942, 944, 947, 949, 950, 953, 954, 955, 958, 959, 962, 963, 966, 967, 970, 971, 974, 975, 978, 983, 986, 987, 988, 989, 992, 993, 996, 997, 1000, 1001, 1004, 1005, 1008, 1009, 1010, 1011, 1012, 1031, 1032, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1044, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1062, 1064, 1067, 1069, 1070, 1073, 1074, 1077, 1078, 1081, 1082, 1085, 1086, 1089, 1090, 1093, 1094, 1097, 1098, 1101, 1102, 1103, 1106, 1107, 1110, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1146, 1147], "an": [115, 118, 119, 156, 157, 173, 174, 177, 178, 341, 342, 344, 345, 346, 347, 349, 350, 351, 353, 354, 355, 357, 358, 359, 360, 361, 362, 364, 366, 367, 368, 369, 380, 381, 392, 395, 396, 398, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 428, 429, 430, 431, 434, 442, 447, 448, 450, 459, 481, 485, 504, 509, 510, 513, 514, 517, 518, 521, 522, 525, 527, 530, 531, 534, 535, 538, 539, 542, 543, 546, 547, 550, 551, 554, 555, 558, 559, 562, 563, 566, 567, 570, 571, 574, 575, 578, 579, 582, 583, 586, 588, 591, 596, 599, 600, 603, 604, 607, 608, 611, 612, 615, 616, 619, 620, 623, 624, 627, 628, 631, 632, 635, 636, 639, 640, 643, 644, 647, 648, 651, 652, 655, 656, 659, 660, 663, 664, 667, 668, 671, 672, 675, 676, 677, 678, 681, 683, 686, 687, 690, 695, 698, 699, 702, 703, 706, 707, 710, 711, 714, 715, 718, 719, 722, 723, 726, 727, 731, 732, 736, 740, 741, 744, 745, 756, 757, 758, 760, 762, 771, 772, 773, 785, 789, 791, 792, 793, 794, 814, 815, 816, 819, 831, 845, 847, 848, 850, 853, 862, 863, 864, 866, 867, 869, 870, 872, 873, 875, 876, 878, 879, 881, 882, 884, 885, 888, 892, 893, 895, 896, 898, 902, 904, 905, 907, 908, 909, 911, 912, 921, 923, 924, 926, 927, 929, 949, 950, 953, 955, 958, 959, 962, 963, 966, 967, 970, 971, 974, 979, 982, 983, 986, 988, 989, 992, 993, 996, 997, 1000, 1001, 1004, 1005, 1008, 1013, 1019, 1031, 1032, 1035, 1036, 1038, 1039, 1047, 1048, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1062, 1064, 1067, 1069, 1070, 1073, 1074, 1077, 1078, 1081, 1082, 1085, 1086, 1089, 1090, 1093, 1094, 1097, 1098, 1101, 1102, 1103, 1106, 1107, 1110, 1111, 1121, 1122, 1144, 1145, 1148, 1149, 1150, 1152], "If": [115, 118, 119, 158, 162, 163, 164, 172, 177, 178, 343, 344, 345, 346, 347, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 366, 367, 369, 381, 403, 404, 406, 407, 408, 410, 411, 414, 416, 417, 418, 419, 420, 421, 422, 428, 430, 450, 459, 478, 502, 509, 510, 513, 514, 517, 518, 521, 522, 525, 527, 530, 531, 534, 535, 539, 542, 571, 574, 575, 578, 579, 582, 596, 599, 600, 603, 604, 640, 643, 644, 647, 652, 655, 656, 659, 664, 667, 668, 671, 678, 681, 695, 698, 699, 702, 703, 706, 707, 710, 711, 714, 715, 718, 719, 722, 732, 741, 744, 745, 789, 819, 822, 824, 827, 829, 832, 834, 836, 838, 840, 842, 863, 864, 866, 867, 869, 884, 889, 891, 893, 895, 902, 904, 905, 907, 909, 911, 912, 924, 926, 927, 929, 933, 934, 937, 939, 942, 944, 947, 949, 963, 966, 967, 970, 983, 986, 988, 989, 992, 993, 996, 1009, 1010, 1011, 1013, 1025, 1026, 1036, 1041, 1042, 1044, 1048, 1049, 1050, 1051, 1053, 1054, 1055, 1057, 1058, 1059, 1062, 1064, 1067, 1069, 1074, 1077, 1078, 1081, 1082, 1085, 1086, 1089, 1090, 1093, 1094, 1098, 1101, 1102, 1103, 1106, 1107, 1110, 1111], "set": [115, 118, 119, 149, 158, 162, 163, 164, 170, 172, 177, 178, 334, 343, 345, 348, 349, 354, 356, 357, 358, 359, 360, 361, 364, 366, 367, 459, 478, 488, 489, 500, 501, 502, 503, 509, 539, 542, 745, 746, 749, 803, 804, 805, 806, 819, 822, 824, 827, 829, 831, 832, 834, 836, 838, 840, 842, 863, 867, 869, 884, 889, 891, 893, 895, 902, 904, 909, 911, 1013, 1014, 1023, 1024, 1025, 1029, 1030, 1036, 1046, 1048, 1049, 1054, 1055, 1056, 1057, 1058, 1059, 1062, 1064, 1067, 1069, 1090, 1093, 1098, 1101, 1132, 1141, 1148, 1149, 1150, 1151, 1152, 1153], "appli": [115, 118, 119, 122, 123, 126, 127, 128, 129, 140, 141, 177, 178, 182, 187, 189, 206, 207, 208, 223, 225, 262, 274, 275, 278, 279, 282, 288, 290, 294, 299, 307, 308, 311, 312, 313, 314, 325, 326, 329, 330, 344, 345, 346, 350, 351, 353, 354, 356, 358, 359, 360, 361, 362, 364, 366, 367, 368, 369, 379, 381, 392, 393, 394, 395, 396, 397, 398, 399, 422, 431, 433, 435, 450, 524, 526, 538, 543, 571, 573, 606, 608, 656, 733, 735, 740, 745, 746, 748, 750, 767, 768, 769, 774, 776, 778, 819, 832, 834, 836, 838, 850, 859, 861, 862, 863, 884, 893, 895, 902, 904, 933, 934, 937, 939, 942, 944, 947, 949, 950, 952, 954, 983, 985, 987, 993, 996, 1009, 1010, 1011, 1013, 1019, 1022, 1025, 1026, 1031, 1032, 1035, 1038, 1040, 1111, 1118, 1119, 1120, 1146, 1147], "leaf": [115, 118, 119, 177, 178, 354, 358, 367, 1013, 1014, 1023, 1024], "contain": [115, 118, 119, 128, 129, 172, 175, 176, 177, 178, 181, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 344, 345, 346, 347, 348, 350, 351, 353, 354, 359, 361, 362, 363, 364, 365, 368, 369, 381, 392, 395, 396, 398, 403, 404, 407, 409, 416, 418, 419, 420, 422, 431, 434, 459, 480, 481, 484, 493, 497, 509, 510, 513, 514, 517, 518, 521, 522, 525, 527, 530, 531, 534, 535, 538, 539, 542, 543, 546, 547, 550, 551, 554, 555, 558, 559, 562, 563, 566, 567, 570, 571, 574, 575, 578, 579, 582, 583, 586, 588, 591, 592, 596, 599, 600, 603, 604, 607, 608, 611, 612, 615, 616, 619, 620, 623, 624, 627, 628, 631, 632, 635, 636, 639, 640, 643, 644, 647, 648, 651, 652, 655, 656, 659, 660, 663, 664, 667, 668, 671, 672, 675, 676, 677, 678, 681, 683, 686, 687, 690, 691, 695, 698, 699, 702, 703, 706, 707, 710, 711, 714, 715, 718, 719, 722, 723, 726, 727, 731, 732, 736, 740, 741, 744, 745, 746, 749, 751, 754, 757, 758, 760, 762, 763, 770, 773, 774, 777, 784, 793, 813, 814, 815, 822, 827, 832, 836, 840, 850, 853, 856, 857, 862, 863, 864, 866, 867, 869, 870, 873, 875, 876, 878, 879, 881, 882, 884, 885, 888, 893, 895, 896, 898, 899, 901, 902, 904, 905, 907, 909, 911, 912, 914, 915, 917, 918, 920, 921, 923, 924, 926, 927, 929, 933, 934, 937, 939, 942, 944, 947, 949, 950, 953, 955, 959, 963, 966, 967, 970, 971, 974, 975, 978, 979, 983, 986, 988, 989, 993, 997, 1000, 1001, 1005, 1009, 1010, 1011, 1012, 1013, 1026, 1031, 1032, 1035, 1036, 1037, 1038, 1041, 1042, 1044, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1057, 1058, 1059, 1062, 1064, 1069, 1070, 1073, 1074, 1077, 1078, 1081, 1082, 1085, 1086, 1089, 1090, 1093, 1094, 1097, 1098, 1101, 1102, 1103, 1106, 1107, 1110, 1111, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1141, 1142, 1143, 1144, 1145, 1148, 1152, 1154, 1155], "within": [115, 118, 119, 345, 353, 368, 381, 403, 404, 1036, 1042, 1044], "union": [115, 118, 119, 128, 129, 136, 137, 177, 178, 349, 351, 354, 357, 358, 359, 360, 361, 362, 364, 369, 392, 394, 395, 396, 397, 398, 399, 400, 401, 403, 404, 405, 406, 407, 408, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 426, 427, 428, 429, 430, 436, 437, 438, 439, 440, 441, 442, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 458, 459, 475, 476, 477, 478, 479, 481, 484, 485, 486, 487, 492, 498, 500, 502, 503, 504, 505, 508, 509, 510, 513, 514, 517, 518, 521, 522, 525, 527, 530, 531, 534, 535, 538, 539, 542, 543, 546, 547, 550, 551, 554, 555, 558, 559, 562, 563, 566, 567, 570, 571, 574, 575, 578, 579, 582, 583, 586, 588, 591, 592, 595, 596, 599, 600, 603, 604, 607, 608, 611, 612, 615, 616, 619, 620, 623, 624, 627, 628, 631, 632, 635, 636, 639, 640, 643, 644, 647, 648, 651, 652, 655, 656, 659, 660, 663, 664, 667, 668, 671, 672, 675, 676, 677, 678, 681, 683, 686, 687, 690, 691, 694, 695, 698, 699, 702, 703, 706, 707, 710, 711, 714, 715, 718, 719, 722, 723, 726, 727, 731, 732, 736, 737, 740, 741, 744, 745, 746, 749, 753, 754, 757, 758, 760, 763, 764, 767, 768, 769, 771, 772, 773, 774, 777, 782, 784, 785, 787, 788, 789, 798, 801, 802, 807, 808, 813, 814, 815, 817, 818, 819, 821, 822, 824, 827, 829, 832, 834, 836, 838, 840, 842, 845, 847, 850, 851, 853, 855, 856, 857, 859, 862, 863, 864, 866, 867, 869, 870, 872, 873, 875, 876, 878, 879, 881, 882, 884, 885, 888, 889, 891, 893, 895, 896, 898, 899, 901, 902, 904, 905, 907, 908, 909, 911, 912, 914, 915, 917, 918, 920, 921, 923, 924, 926, 927, 929, 930, 932, 933, 934, 937, 939, 942, 944, 947, 949, 950, 953, 955, 958, 959, 962, 963, 966, 967, 970, 971, 974, 975, 978, 979, 982, 983, 986, 988, 989, 992, 993, 996, 997, 1000, 1001, 1004, 1005, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1024, 1025, 1031, 1032, 1035, 1036, 1037, 1038, 1039, 1041, 1042, 1044, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1062, 1064, 1067, 1069, 1070, 1073, 1074, 1077, 1078, 1081, 1082, 1085, 1090, 1093, 1094, 1097, 1098, 1101, 1102, 1103, 1106, 1107, 1110], "nativearrai": [115, 118, 119, 128, 129, 349, 351, 354, 357, 358, 361, 362, 364, 366, 369, 382, 390, 392, 394, 395, 396, 397, 398, 399, 403, 404, 405, 407, 411, 412, 413, 414, 415, 417, 418, 419, 421, 422, 428, 429, 430, 431, 434, 440, 442, 445, 447, 448, 450, 454, 459, 478, 479, 481, 497, 503, 504, 509, 510, 513, 514, 517, 518, 521, 522, 525, 527, 530, 531, 534, 535, 538, 539, 542, 543, 546, 547, 550, 551, 554, 555, 558, 559, 562, 563, 566, 567, 570, 571, 574, 575, 578, 579, 582, 583, 586, 588, 591, 592, 595, 596, 599, 600, 603, 604, 607, 608, 611, 612, 615, 616, 619, 620, 623, 624, 627, 628, 631, 632, 635, 636, 639, 640, 643, 644, 647, 648, 651, 652, 655, 656, 659, 660, 663, 664, 667, 668, 671, 672, 675, 676, 677, 678, 681, 683, 686, 687, 690, 691, 694, 695, 698, 699, 702, 703, 706, 707, 710, 711, 714, 715, 718, 719, 722, 723, 726, 727, 731, 732, 736, 737, 740, 741, 744, 745, 746, 749, 753, 754, 757, 758, 760, 762, 763, 764, 767, 768, 769, 771, 772, 773, 774, 777, 782, 784, 785, 787, 788, 789, 798, 801, 802, 807, 808, 813, 814, 815, 817, 818, 819, 821, 822, 824, 827, 829, 832, 834, 836, 838, 840, 842, 845, 847, 850, 851, 853, 855, 856, 857, 859, 862, 863, 864, 866, 867, 869, 870, 872, 873, 875, 876, 878, 879, 881, 882, 884, 885, 888, 889, 891, 893, 895, 896, 898, 899, 901, 902, 904, 905, 907, 908, 909, 911, 912, 914, 915, 917, 918, 920, 921, 923, 924, 926, 927, 929, 930, 932, 933, 934, 937, 939, 942, 944, 947, 949, 950, 953, 955, 958, 959, 962, 963, 966, 967, 970, 971, 974, 975, 978, 979, 982, 983, 986, 988, 989, 992, 993, 996, 997, 1000, 1001, 1004, 1005, 1008, 1013, 1015, 1025, 1031, 1032, 1035, 1036, 1037, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1062, 1064, 1067, 1069, 1070, 1073, 1074, 1077, 1078, 1081, 1082, 1085, 1090, 1093, 1094, 1097, 1098, 1101, 1102, 1103, 1106, 1107, 1110], "mayb": [115, 118, 119, 344, 364, 366], "manner": [115, 118, 119, 172, 177, 178, 349, 350, 360, 367, 380, 381, 1013, 1025], "so": [115, 118, 119, 122, 123, 126, 127, 128, 129, 140, 141, 172, 173, 177, 178, 182, 187, 189, 206, 207, 208, 223, 225, 262, 274, 275, 278, 279, 282, 288, 290, 294, 299, 307, 308, 311, 312, 313, 314, 325, 326, 329, 330, 344, 345, 349, 350, 351, 353, 356, 357, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 381, 382, 390, 431, 433, 435, 524, 526, 538, 543, 571, 573, 606, 608, 656, 733, 735, 740, 746, 748, 750, 774, 776, 778, 950, 952, 954, 983, 985, 987, 1013, 1014, 1024, 1038, 1040, 1111], "travers": [115, 118, 119, 177, 178, 358, 364, 366, 1013, 1025], "lowest": [115, 118, 119, 177, 178, 354, 381, 1013, 1025, 1036, 1038, 1039], "leav": [115, 118, 119, 177, 178, 179, 180, 182, 350, 351, 353, 354, 358, 359, 361, 362, 367, 368, 949, 993, 996, 1013, 1014, 1015, 1023, 1024, 1025], "search": [115, 118, 119, 147, 172, 177, 178, 332, 344, 349, 351, 353, 1049, 1050, 1051, 1052], "s": [115, 118, 119, 158, 162, 163, 164, 170, 173, 174, 177, 178, 343, 344, 345, 347, 348, 350, 351, 353, 355, 357, 358, 359, 360, 361, 362, 364, 366, 367, 368, 369, 380, 381, 402, 403, 414, 418, 419, 422, 443, 444, 459, 478, 502, 509, 699, 702, 745, 754, 819, 822, 824, 827, 829, 832, 834, 840, 842, 863, 912, 914, 915, 917, 1013, 1019, 1025, 1069, 1090, 1093, 1098, 1101, 1111, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1152, 1154, 1155], "case": [115, 118, 119, 173, 177, 178, 179, 180, 181, 344, 345, 346, 349, 350, 351, 354, 355, 357, 358, 359, 360, 361, 362, 364, 366, 368, 369, 381, 403, 414, 459, 498, 505, 508, 509, 510, 513, 514, 517, 518, 521, 522, 525, 527, 530, 531, 534, 535, 539, 542, 567, 570, 571, 574, 575, 578, 579, 582, 596, 599, 600, 603, 604, 640, 643, 644, 647, 652, 655, 656, 659, 678, 681, 695, 698, 699, 702, 703, 706, 707, 710, 711, 714, 715, 718, 719, 722, 732, 741, 744, 745, 789, 801, 802, 863, 889, 891, 949, 979, 982, 1013, 1016, 1022, 1069, 1074, 1077, 1078, 1081, 1082, 1085, 1090, 1093, 1094, 1098, 1101, 1132, 1143, 1144, 1145, 1148, 1152], "to_n": [115, 177, 178], "item": [115, 119, 156, 157, 177, 178, 359, 364, 366, 367, 369, 422, 437, 459, 468, 469, 471, 478, 480, 482, 484, 486, 490, 745, 761, 783, 809, 810, 1013, 1018, 1019, 1020, 1021, 1025, 1029, 1030, 1111, 1144, 1145], "convers": [116, 117, 118, 119, 174, 177, 178, 363, 365, 369, 380, 381, 1111, 1117], "arraywithcr": 120, "creation": [121, 177, 178, 179, 180, 181, 306, 349, 359, 360, 364, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421], "data_typ": [122, 123, 307, 308, 349, 359, 422, 426, 427, 428, 429, 430, 431, 434, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458], "arraywithdatatyp": 122, "can_cast": [122, 123, 182, 278, 307, 308, 354, 359, 422, 435], "method": [122, 123, 126, 127, 128, 129, 140, 141, 156, 157, 177, 178, 179, 180, 181, 187, 189, 206, 207, 208, 223, 225, 262, 274, 275, 278, 279, 282, 288, 290, 294, 299, 307, 308, 311, 312, 313, 314, 325, 326, 329, 330, 341, 342, 346, 349, 350, 351, 353, 354, 357, 362, 364, 365, 368, 369, 381, 392, 394, 395, 396, 397, 398, 399, 403, 409, 414, 431, 433, 435, 509, 524, 526, 527, 530, 538, 543, 547, 550, 567, 570, 571, 573, 574, 579, 591, 604, 606, 608, 615, 616, 619, 656, 676, 677, 683, 686, 687, 690, 703, 706, 719, 722, 723, 726, 733, 735, 740, 745, 746, 748, 750, 761, 762, 773, 774, 776, 778, 801, 802, 813, 815, 819, 832, 834, 836, 838, 850, 856, 862, 863, 864, 866, 867, 869, 870, 933, 934, 937, 949, 950, 952, 954, 963, 966, 967, 970, 975, 978, 983, 985, 987, 988, 997, 1000, 1013, 1014, 1024, 1025, 1026, 1031, 1032, 1035, 1036, 1038, 1040, 1041, 1042, 1044, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1058, 1059, 1062, 1069, 1070, 1073, 1074, 1077, 1097, 1102, 1103, 1106, 1111, 1132, 1143, 1144, 1145], "variant": [122, 123, 126, 127, 128, 129, 140, 141, 182, 187, 189, 206, 207, 208, 223, 225, 262, 274, 275, 278, 279, 282, 288, 290, 294, 299, 307, 308, 311, 312, 313, 314, 325, 326, 329, 330, 350, 351, 431, 433, 435, 524, 526, 538, 543, 571, 573, 606, 608, 656, 733, 735, 740, 746, 748, 750, 774, 776, 778, 950, 952, 954, 983, 985, 987, 1038, 1040], "thi": [122, 123, 126, 127, 128, 129, 140, 141, 172, 173, 174, 177, 178, 179, 180, 181, 182, 187, 189, 206, 207, 208, 223, 225, 262, 274, 275, 278, 279, 282, 288, 290, 294, 299, 307, 308, 311, 312, 313, 314, 325, 326, 329, 330, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 380, 381, 403, 404, 405, 414, 415, 422, 431, 433, 434, 435, 459, 483, 487, 491, 498, 503, 508, 509, 510, 513, 522, 524, 526, 527, 530, 538, 543, 547, 550, 563, 566, 567, 570, 571, 573, 574, 579, 600, 603, 604, 606, 608, 656, 664, 667, 668, 671, 687, 690, 699, 702, 703, 706, 719, 722, 723, 726, 732, 733, 735, 740, 745, 746, 748, 750, 772, 773, 774, 776, 778, 789, 800, 805, 819, 822, 824, 827, 829, 831, 832, 834, 836, 838, 840, 842, 848, 850, 853, 859, 862, 863, 870, 872, 889, 891, 908, 949, 950, 952, 954, 963, 966, 967, 970, 979, 982, 983, 985, 986, 987, 993, 996, 1013, 1019, 1025, 1026, 1031, 1032, 1035, 1038, 1040, 1048, 1049, 1053, 1054, 1055, 1057, 1058, 1059, 1062, 1069, 1074, 1077, 1078, 1081, 1090, 1093, 1098, 1101, 1102, 1103, 1106, 1111, 1117, 1144, 1145, 1148, 1149, 1150, 1151, 1152, 1153], "simpli": [122, 123, 126, 127, 128, 129, 140, 141, 177, 178, 182, 187, 189, 206, 207, 208, 223, 225, 262, 274, 275, 278, 279, 282, 288, 290, 294, 299, 307, 308, 311, 312, 313, 314, 325, 326, 329, 330, 345, 350, 351, 353, 354, 357, 358, 360, 361, 362, 364, 368, 369, 431, 433, 435, 509, 524, 526, 538, 543, 571, 573, 600, 603, 606, 608, 656, 733, 735, 740, 746, 748, 750, 774, 776, 778, 950, 952, 954, 983, 985, 987, 1038, 1040], "docstr": [122, 123, 126, 127, 128, 129, 140, 141, 182, 187, 189, 206, 207, 208, 223, 225, 262, 274, 275, 278, 279, 282, 288, 290, 294, 299, 307, 308, 311, 312, 313, 314, 325, 326, 329, 330, 346, 347, 348, 349, 354, 358, 362, 403, 414, 422, 431, 433, 434, 435, 509, 522, 524, 526, 527, 530, 538, 543, 547, 550, 567, 570, 571, 573, 574, 579, 604, 606, 608, 656, 687, 690, 703, 706, 719, 722, 723, 726, 732, 733, 735, 740, 746, 748, 750, 774, 776, 778, 863, 870, 949, 950, 952, 954, 963, 966, 967, 970, 983, 985, 986, 987, 1038, 1040, 1053, 1054, 1055, 1058, 1059, 1062, 1069, 1074, 1077, 1102, 1103, 1106], "minim": [122, 123, 126, 127, 128, 129, 140, 141, 182, 187, 189, 206, 207, 208, 223, 225, 262, 274, 275, 278, 279, 282, 288, 290, 294, 299, 307, 308, 311, 312, 313, 314, 325, 326, 329, 330, 350, 361, 364, 431, 433, 435, 524, 526, 538, 543, 571, 573, 606, 608, 656, 733, 735, 740, 746, 748, 750, 774, 776, 778, 950, 952, 954, 983, 985, 987, 1038, 1040], "chang": [122, 123, 126, 127, 128, 129, 140, 141, 174, 182, 187, 189, 206, 207, 208, 223, 225, 262, 274, 275, 278, 279, 282, 288, 290, 294, 299, 307, 308, 311, 312, 313, 314, 325, 326, 329, 330, 344, 345, 346, 347, 350, 352, 353, 358, 364, 368, 381, 431, 433, 435, 459, 524, 526, 538, 543, 571, 573, 606, 608, 656, 733, 735, 740, 746, 748, 750, 774, 776, 778, 863, 867, 869, 949, 950, 952, 954, 979, 982, 983, 985, 987, 1013, 1015, 1025, 1038, 1040, 1111, 1117], "exampl": [122, 123, 126, 127, 128, 129, 140, 141, 156, 157, 158, 162, 163, 164, 170, 174, 179, 180, 182, 187, 189, 206, 207, 208, 223, 225, 262, 274, 275, 278, 279, 282, 288, 290, 294, 299, 307, 308, 311, 312, 313, 314, 325, 326, 329, 330, 341, 342, 344, 345, 346, 348, 349, 350, 353, 354, 355, 356, 357, 358, 359, 360, 361, 364, 366, 367, 368, 369, 380, 381, 392, 394, 395, 396, 397, 398, 399, 400, 401, 403, 410, 411, 414, 416, 417, 420, 421, 422, 428, 431, 433, 434, 435, 443, 444, 459, 478, 479, 481, 493, 494, 495, 496, 497, 500, 502, 504, 506, 507, 509, 522, 524, 526, 527, 530, 538, 543, 546, 547, 550, 551, 554, 563, 566, 567, 570, 571, 573, 574, 575, 579, 591, 596, 604, 606, 608, 612, 615, 616, 619, 632, 635, 656, 676, 677, 683, 686, 687, 690, 703, 706, 719, 722, 723, 726, 732, 733, 735, 736, 740, 745, 746, 748, 749, 750, 753, 754, 762, 763, 770, 773, 774, 776, 777, 778, 781, 792, 807, 808, 813, 814, 815, 850, 851, 853, 855, 856, 857, 862, 863, 864, 866, 867, 869, 870, 873, 875, 882, 893, 895, 899, 901, 912, 918, 920, 921, 923, 933, 934, 937, 939, 942, 944, 947, 949, 950, 952, 953, 954, 955, 958, 963, 966, 967, 970, 975, 978, 979, 982, 983, 985, 986, 987, 988, 989, 992, 993, 996, 997, 1000, 1031, 1032, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1044, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1058, 1059, 1062, 1069, 1070, 1073, 1090, 1093, 1094, 1097, 1102, 1103, 1106, 1111], "1": [122, 123, 126, 127, 128, 129, 136, 137, 138, 139, 140, 141, 142, 143, 150, 151, 158, 164, 170, 173, 174, 177, 178, 179, 180, 182, 187, 189, 191, 206, 207, 208, 214, 223, 225, 234, 258, 262, 267, 268, 274, 275, 276, 278, 279, 280, 282, 288, 289, 290, 291, 292, 294, 299, 307, 308, 311, 312, 313, 314, 323, 324, 325, 326, 327, 328, 329, 330, 335, 336, 347, 351, 354, 358, 361, 362, 363, 364, 366, 367, 368, 369, 381, 392, 394, 395, 396, 397, 399, 403, 404, 411, 412, 413, 414, 416, 417, 421, 422, 428, 431, 433, 434, 435, 442, 459, 463, 466, 468, 473, 478, 479, 481, 483, 487, 491, 493, 496, 497, 504, 509, 514, 517, 518, 521, 522, 524, 526, 527, 530, 538, 539, 542, 543, 547, 550, 551, 554, 563, 566, 567, 570, 571, 573, 574, 575, 578, 579, 582, 591, 596, 600, 603, 604, 606, 608, 612, 615, 616, 619, 632, 635, 640, 643, 644, 647, 648, 651, 652, 655, 656, 676, 677, 683, 686, 687, 690, 695, 698, 703, 706, 707, 710, 711, 714, 719, 722, 723, 726, 732, 733, 735, 740, 745, 746, 748, 749, 750, 753, 754, 762, 763, 770, 773, 774, 776, 777, 778, 792, 798, 801, 802, 807, 808, 810, 813, 814, 815, 817, 850, 851, 852, 853, 854, 855, 856, 857, 858, 862, 863, 864, 866, 867, 869, 870, 873, 875, 882, 893, 895, 899, 901, 909, 911, 912, 918, 920, 921, 923, 924, 926, 927, 929, 933, 934, 937, 939, 941, 942, 943, 944, 946, 947, 948, 949, 950, 952, 953, 954, 955, 958, 963, 966, 967, 970, 971, 974, 975, 978, 979, 982, 983, 985, 986, 987, 988, 989, 992, 993, 996, 997, 1000, 1013, 1025, 1031, 1032, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1058, 1059, 1061, 1062, 1063, 1064, 1066, 1067, 1068, 1069, 1070, 1073, 1074, 1077, 1090, 1093, 1094, 1097, 1098, 1101, 1102, 1103, 1106, 1107, 1110, 1111, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1152, 1154, 1155], "2": [122, 123, 126, 127, 128, 129, 136, 137, 140, 141, 158, 162, 177, 178, 179, 180, 182, 187, 189, 206, 207, 208, 223, 225, 262, 274, 278, 279, 282, 288, 290, 294, 299, 307, 308, 311, 312, 313, 314, 325, 326, 329, 330, 344, 345, 347, 351, 355, 358, 362, 363, 364, 366, 367, 368, 369, 381, 392, 394, 395, 396, 397, 399, 402, 403, 410, 411, 414, 416, 417, 421, 422, 428, 431, 433, 434, 435, 459, 478, 479, 481, 493, 495, 497, 504, 509, 522, 524, 526, 527, 530, 535, 538, 539, 542, 543, 547, 550, 551, 554, 563, 566, 567, 570, 571, 573, 574, 575, 579, 591, 596, 604, 606, 608, 612, 615, 616, 619, 632, 635, 652, 655, 656, 676, 677, 683, 686, 687, 690, 703, 706, 719, 722, 723, 726, 732, 733, 735, 740, 745, 746, 748, 749, 753, 754, 757, 758, 760, 763, 770, 773, 774, 776, 777, 778, 792, 807, 808, 813, 850, 853, 854, 855, 856, 857, 862, 863, 864, 866, 867, 869, 870, 873, 875, 882, 884, 885, 888, 889, 891, 893, 895, 899, 901, 902, 904, 905, 907, 912, 918, 920, 921, 923, 927, 929, 933, 934, 937, 944, 947, 949, 950, 952, 953, 954, 955, 958, 963, 966, 967, 970, 975, 978, 979, 982, 983, 985, 986, 987, 988, 989, 992, 997, 1000, 1031, 1032, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1044, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1058, 1059, 1062, 1069, 1070, 1073, 1074, 1077, 1097, 1102, 1103, 1106, 1111], "3": [122, 123, 126, 127, 128, 129, 140, 141, 179, 180, 182, 187, 189, 206, 207, 208, 223, 225, 262, 274, 278, 279, 282, 288, 290, 294, 299, 307, 308, 311, 312, 313, 314, 325, 326, 329, 330, 344, 347, 351, 355, 358, 364, 366, 367, 368, 369, 392, 394, 395, 396, 397, 402, 403, 411, 414, 417, 420, 421, 422, 431, 433, 434, 435, 459, 478, 481, 497, 504, 509, 522, 524, 526, 527, 530, 538, 543, 547, 550, 563, 566, 567, 570, 571, 573, 574, 579, 591, 596, 604, 606, 608, 612, 615, 616, 619, 632, 635, 656, 676, 677, 683, 686, 687, 690, 703, 706, 719, 722, 723, 726, 732, 733, 735, 740, 745, 746, 748, 753, 754, 763, 770, 773, 774, 776, 777, 778, 807, 808, 813, 815, 850, 851, 852, 853, 855, 856, 857, 862, 863, 864, 866, 867, 869, 870, 873, 875, 882, 893, 895, 899, 901, 912, 918, 920, 921, 923, 930, 932, 933, 934, 937, 944, 947, 949, 950, 952, 953, 954, 955, 958, 963, 966, 967, 970, 975, 978, 979, 982, 983, 985, 986, 987, 988, 989, 992, 997, 1000, 1031, 1032, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1044, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1058, 1059, 1062, 1069, 1070, 1073, 1074, 1077, 1094, 1097, 1102, 1103, 1106, 1111], "print": [122, 123, 126, 127, 128, 129, 140, 141, 156, 157, 158, 162, 163, 164, 170, 177, 178, 179, 180, 181, 182, 187, 189, 206, 207, 208, 223, 225, 262, 274, 275, 278, 279, 282, 288, 290, 294, 299, 307, 308, 311, 312, 313, 314, 325, 326, 329, 330, 341, 342, 344, 351, 358, 364, 366, 367, 368, 392, 394, 395, 396, 397, 398, 399, 403, 410, 411, 414, 416, 417, 420, 421, 422, 428, 431, 433, 434, 435, 443, 444, 459, 479, 493, 494, 495, 496, 497, 499, 502, 506, 509, 522, 524, 526, 527, 530, 538, 543, 546, 547, 550, 551, 554, 563, 566, 567, 570, 571, 573, 574, 575, 579, 591, 596, 604, 606, 608, 612, 615, 616, 619, 632, 635, 656, 676, 677, 683, 686, 687, 690, 703, 706, 719, 722, 723, 726, 732, 733, 735, 736, 740, 745, 746, 748, 749, 750, 753, 754, 762, 763, 770, 773, 774, 776, 777, 778, 781, 799, 807, 808, 813, 814, 815, 850, 851, 853, 855, 856, 857, 862, 863, 864, 866, 867, 869, 870, 873, 875, 882, 899, 901, 912, 918, 920, 921, 923, 933, 934, 937, 939, 942, 944, 947, 949, 950, 952, 953, 954, 963, 966, 967, 970, 975, 978, 979, 982, 983, 985, 986, 987, 988, 989, 992, 997, 1000, 1031, 1032, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1044, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1058, 1059, 1062, 1069, 1070, 1073, 1074, 1077, 1090, 1093, 1094, 1097, 1102, 1103, 1106, 1111], "dtype": [122, 123, 152, 153, 177, 178, 182, 206, 257, 278, 297, 307, 308, 337, 338, 349, 351, 354, 359, 360, 366, 403, 404, 405, 406, 407, 408, 410, 411, 412, 415, 416, 417, 420, 421, 422, 426, 427, 428, 429, 431, 433, 434, 435, 436, 437, 438, 439, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 458, 459, 499, 509, 563, 566, 745, 753, 754, 798, 814, 850, 858, 949, 963, 966, 1031, 1032, 1035, 1036, 1042, 1044, 1048, 1049, 1050, 1058, 1064, 1067, 1069, 1070, 1086, 1088, 1089, 1090, 1093, 1094, 1096, 1102, 1103, 1106, 1111, 1123, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1154, 1155], "float32": [122, 123, 182, 206, 278, 307, 308, 351, 359, 422, 426, 427, 431, 433, 434, 435, 443, 1031, 1032, 1035], "float64": [122, 123, 359, 422, 428, 431, 434, 443], "true": [122, 123, 128, 129, 136, 137, 150, 151, 156, 157, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 351, 353, 354, 358, 359, 361, 364, 366, 367, 368, 369, 392, 393, 400, 401, 403, 412, 422, 428, 431, 433, 434, 435, 459, 478, 495, 499, 500, 509, 510, 512, 516, 517, 518, 520, 524, 525, 526, 527, 529, 531, 533, 537, 538, 539, 541, 543, 545, 547, 549, 550, 551, 553, 555, 557, 559, 561, 563, 565, 567, 569, 570, 571, 573, 577, 578, 581, 582, 585, 586, 587, 590, 591, 592, 594, 598, 599, 600, 602, 606, 607, 608, 610, 612, 614, 615, 616, 618, 619, 620, 622, 623, 624, 626, 627, 628, 630, 631, 632, 634, 635, 636, 638, 640, 642, 644, 646, 648, 650, 652, 654, 656, 658, 660, 662, 664, 666, 667, 668, 670, 671, 672, 674, 678, 680, 682, 683, 685, 687, 689, 690, 691, 693, 695, 697, 699, 701, 703, 705, 707, 709, 711, 713, 715, 717, 719, 721, 723, 725, 727, 728, 730, 733, 735, 736, 739, 740, 741, 743, 745, 746, 748, 749, 750, 753, 754, 755, 756, 758, 759, 763, 770, 772, 774, 776, 778, 784, 785, 792, 807, 813, 815, 818, 819, 822, 823, 824, 825, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 845, 850, 858, 863, 864, 866, 885, 887, 889, 891, 912, 927, 929, 933, 934, 936, 937, 938, 939, 941, 942, 943, 944, 946, 947, 948, 949, 950, 952, 954, 955, 957, 959, 961, 963, 965, 967, 969, 971, 973, 975, 977, 979, 981, 983, 985, 987, 988, 989, 991, 993, 995, 997, 999, 1001, 1003, 1005, 1007, 1009, 1010, 1011, 1012, 1013, 1014, 1023, 1024, 1026, 1032, 1034, 1036, 1037, 1042, 1043, 1045, 1048, 1049, 1050, 1052, 1053, 1054, 1055, 1057, 1058, 1059, 1061, 1062, 1063, 1064, 1066, 1067, 1068, 1069, 1070, 1072, 1074, 1076, 1077, 1078, 1080, 1081, 1082, 1084, 1085, 1086, 1088, 1089, 1090, 1092, 1093, 1094, 1096, 1097, 1098, 1100, 1101, 1102, 1103, 1105, 1106, 1107, 1109, 1110, 1132, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153], "arraywithdevic": [124, 366], "devic": [125, 173, 177, 178, 182, 258, 288, 289, 310, 329, 330, 345, 348, 349, 354, 356, 359, 366, 367, 381, 403, 404, 405, 406, 407, 408, 410, 411, 412, 413, 415, 416, 417, 418, 419, 420, 421, 461, 462, 463, 464, 465, 466, 468, 469, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 745, 773, 774, 777, 798, 801, 802, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1121, 1122, 1123, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1152, 1154, 1155], "arraywithelementwis": [126, 346, 357], "ab": [126, 127, 182, 311, 312, 353, 356, 509, 695, 698, 863, 927, 929, 1111], "out": [126, 127, 128, 129, 136, 137, 138, 139, 140, 141, 142, 143, 150, 151, 152, 153, 154, 155, 172, 173, 174, 177, 178, 179, 180, 182, 183, 184, 185, 187, 188, 190, 191, 192, 193, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 227, 228, 229, 230, 231, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 274, 276, 277, 279, 280, 281, 282, 286, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 311, 312, 313, 314, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 335, 336, 337, 338, 339, 340, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 363, 364, 366, 367, 368, 369, 380, 392, 394, 395, 396, 397, 398, 399, 403, 404, 406, 407, 408, 410, 411, 416, 417, 418, 419, 420, 421, 422, 428, 430, 459, 504, 509, 510, 512, 513, 514, 516, 517, 518, 520, 521, 522, 524, 525, 526, 527, 529, 530, 531, 533, 534, 535, 537, 538, 539, 541, 542, 543, 545, 546, 547, 549, 550, 551, 553, 554, 555, 557, 558, 559, 561, 562, 563, 565, 566, 567, 569, 570, 571, 573, 574, 575, 577, 578, 579, 581, 582, 583, 585, 586, 587, 588, 590, 591, 592, 594, 595, 596, 598, 599, 600, 602, 603, 604, 606, 607, 608, 610, 611, 612, 614, 615, 616, 618, 619, 620, 622, 623, 624, 626, 627, 628, 630, 631, 632, 634, 635, 636, 638, 639, 640, 642, 643, 644, 646, 647, 648, 650, 651, 652, 654, 655, 656, 658, 659, 660, 662, 663, 664, 666, 667, 668, 670, 671, 672, 674, 675, 676, 677, 678, 680, 681, 682, 683, 685, 686, 687, 689, 690, 691, 693, 694, 695, 697, 698, 699, 701, 702, 703, 705, 706, 707, 709, 710, 711, 713, 714, 715, 717, 718, 719, 721, 722, 723, 725, 726, 727, 728, 730, 731, 732, 733, 735, 736, 737, 739, 740, 741, 743, 744, 745, 757, 758, 759, 760, 762, 763, 764, 767, 768, 769, 771, 773, 774, 776, 777, 778, 785, 798, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 866, 867, 869, 870, 872, 873, 875, 879, 881, 882, 884, 885, 887, 888, 889, 891, 892, 893, 895, 896, 898, 899, 901, 902, 904, 908, 909, 911, 912, 914, 915, 917, 918, 920, 921, 923, 924, 926, 927, 929, 930, 932, 933, 934, 936, 937, 938, 939, 941, 942, 943, 944, 946, 947, 948, 949, 950, 952, 953, 954, 955, 957, 958, 959, 961, 962, 963, 965, 966, 967, 969, 970, 971, 973, 974, 975, 977, 978, 979, 981, 982, 983, 985, 986, 987, 989, 991, 992, 993, 995, 996, 997, 999, 1000, 1001, 1003, 1004, 1005, 1007, 1008, 1031, 1032, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1047, 1048, 1049, 1050, 1052, 1053, 1057, 1058, 1059, 1061, 1062, 1063, 1064, 1066, 1067, 1068, 1069, 1070, 1072, 1073, 1074, 1076, 1077, 1078, 1080, 1081, 1082, 1084, 1085, 1086, 1088, 1089, 1090, 1092, 1093, 1094, 1096, 1097, 1098, 1100, 1101, 1102, 1103, 1105, 1106, 1107, 1109, 1110, 1111, 1132, 1140], "aco": [126, 127, 182, 311, 312, 509, 518, 1111], "acosh": [126, 127, 182, 311, 312, 422, 443, 444, 509, 1111], "add": [126, 127, 156, 157, 177, 178, 179, 180, 182, 274, 275, 311, 312, 313, 314, 341, 342, 344, 345, 346, 348, 349, 350, 354, 355, 357, 358, 362, 364, 366, 381, 509, 526, 656, 746, 750, 1031, 1032, 1035, 1111, 1117, 1146, 1147], "x2": [126, 127, 128, 129, 136, 137, 177, 178, 182, 187, 189, 197, 200, 202, 203, 204, 205, 215, 217, 224, 227, 228, 235, 236, 241, 242, 244, 245, 246, 250, 252, 256, 259, 274, 275, 281, 286, 293, 296, 311, 312, 313, 314, 321, 322, 351, 362, 422, 454, 459, 497, 509, 522, 524, 525, 526, 539, 541, 542, 547, 549, 550, 555, 557, 558, 559, 561, 562, 563, 565, 566, 567, 569, 570, 583, 585, 586, 587, 588, 590, 591, 599, 607, 608, 610, 611, 612, 614, 615, 616, 618, 619, 632, 634, 635, 636, 638, 639, 656, 658, 659, 660, 662, 663, 668, 670, 671, 672, 674, 675, 676, 677, 678, 680, 681, 682, 687, 689, 690, 695, 697, 698, 699, 701, 702, 727, 728, 730, 731, 745, 746, 748, 749, 750, 850, 855, 863, 867, 869, 885, 887, 888, 899, 901, 909, 911, 918, 920, 924, 926, 1048, 1052], "y": [126, 127, 128, 129, 140, 141, 179, 180, 182, 187, 189, 207, 208, 223, 225, 262, 274, 275, 279, 282, 288, 290, 294, 299, 311, 312, 313, 314, 325, 326, 329, 330, 349, 351, 355, 358, 364, 366, 392, 394, 395, 396, 397, 398, 399, 403, 410, 411, 414, 416, 417, 421, 422, 428, 459, 479, 493, 497, 502, 509, 522, 524, 526, 527, 530, 538, 539, 542, 543, 547, 550, 551, 554, 563, 566, 567, 570, 571, 573, 574, 575, 579, 591, 596, 604, 606, 608, 615, 616, 619, 656, 676, 677, 683, 686, 687, 690, 703, 706, 719, 722, 723, 726, 732, 733, 735, 740, 745, 746, 748, 749, 750, 753, 754, 762, 763, 770, 771, 773, 774, 776, 777, 778, 807, 813, 814, 815, 819, 826, 850, 856, 857, 859, 863, 864, 866, 867, 869, 870, 882, 899, 901, 918, 920, 921, 923, 933, 934, 937, 939, 942, 944, 947, 949, 950, 952, 953, 954, 955, 958, 963, 966, 967, 970, 975, 978, 979, 982, 983, 985, 986, 987, 988, 997, 1000, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1044, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1055, 1058, 1059, 1062, 1069, 1070, 1073, 1074, 1077, 1090, 1093, 1094, 1097, 1102, 1103, 1106], "4": [126, 127, 140, 141, 174, 175, 176, 177, 178, 179, 180, 181, 182, 187, 206, 207, 208, 223, 225, 262, 274, 278, 279, 282, 288, 290, 294, 299, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 347, 351, 355, 358, 364, 366, 367, 368, 369, 392, 394, 395, 397, 403, 411, 414, 417, 421, 422, 431, 433, 434, 435, 459, 481, 497, 509, 522, 524, 526, 527, 530, 538, 539, 542, 543, 547, 550, 567, 570, 571, 573, 574, 579, 591, 604, 606, 608, 615, 616, 619, 656, 676, 677, 683, 686, 687, 690, 703, 706, 719, 722, 723, 726, 732, 733, 735, 740, 745, 754, 763, 772, 773, 774, 776, 777, 778, 808, 813, 850, 853, 854, 855, 857, 860, 862, 863, 867, 869, 870, 873, 875, 882, 893, 895, 899, 901, 918, 920, 921, 923, 933, 944, 947, 949, 950, 952, 953, 954, 955, 958, 963, 966, 967, 970, 975, 978, 979, 982, 983, 985, 986, 987, 988, 997, 1000, 1031, 1032, 1035, 1036, 1037, 1038, 1040, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1058, 1059, 1062, 1069, 1070, 1073, 1074, 1077, 1097, 1102, 1103, 1106, 1111, 1148, 1149, 1150, 1151, 1153], "5": [126, 127, 128, 129, 140, 141, 179, 180, 182, 187, 206, 207, 208, 223, 262, 274, 278, 279, 282, 288, 290, 294, 299, 307, 308, 311, 312, 313, 314, 325, 326, 329, 330, 345, 347, 351, 355, 362, 366, 367, 368, 392, 394, 395, 397, 403, 411, 414, 417, 420, 421, 422, 431, 433, 434, 435, 459, 481, 497, 509, 522, 524, 526, 527, 530, 538, 543, 546, 547, 550, 563, 566, 567, 570, 571, 573, 574, 579, 591, 604, 606, 608, 615, 616, 619, 656, 676, 677, 683, 686, 687, 690, 703, 706, 719, 722, 723, 726, 732, 733, 735, 736, 740, 745, 754, 763, 773, 774, 777, 778, 808, 813, 850, 853, 855, 856, 862, 863, 864, 866, 867, 869, 870, 873, 875, 882, 899, 901, 918, 920, 921, 923, 933, 944, 947, 949, 950, 952, 953, 954, 955, 958, 963, 966, 967, 970, 975, 978, 979, 982, 983, 985, 986, 987, 988, 997, 1000, 1031, 1032, 1035, 1036, 1037, 1038, 1039, 1040, 1047, 1048, 1050, 1051, 1052, 1053, 1054, 1055, 1058, 1059, 1062, 1069, 1070, 1073, 1074, 1077, 1097, 1102, 1103, 1106, 1132, 1143], "6": [126, 127, 140, 141, 179, 180, 182, 187, 207, 274, 282, 288, 311, 312, 313, 314, 329, 330, 347, 351, 355, 358, 366, 367, 368, 392, 394, 395, 397, 403, 411, 459, 481, 497, 509, 522, 524, 526, 527, 530, 547, 550, 551, 554, 567, 570, 571, 573, 574, 579, 591, 604, 615, 616, 619, 656, 676, 677, 683, 686, 703, 706, 719, 722, 723, 726, 732, 745, 754, 763, 773, 774, 777, 778, 808, 813, 850, 853, 856, 857, 862, 863, 867, 869, 870, 873, 875, 899, 901, 912, 918, 920, 933, 934, 937, 944, 947, 949, 950, 953, 955, 958, 963, 966, 967, 970, 975, 978, 979, 982, 983, 986, 988, 997, 1000, 1031, 1032, 1035, 1036, 1037, 1038, 1039, 1040, 1048, 1049, 1052, 1053, 1054, 1055, 1069, 1070, 1073, 1074, 1077, 1097], "z": [126, 127, 128, 129, 179, 180, 182, 187, 225, 274, 282, 311, 312, 313, 314, 351, 355, 358, 364, 366, 459, 493, 509, 522, 524, 526, 547, 550, 567, 570, 591, 615, 616, 619, 656, 676, 677, 745, 753, 754, 773, 774, 776, 778, 807, 863, 867, 869, 933, 934, 937, 939, 942, 949, 950, 953, 1048, 1049, 1069, 1070, 1073, 1074, 1077, 1097], "7": [126, 127, 140, 141, 179, 180, 182, 187, 274, 288, 311, 312, 329, 330, 345, 347, 351, 354, 358, 361, 392, 394, 395, 459, 481, 509, 522, 524, 526, 547, 550, 551, 554, 567, 570, 571, 574, 579, 591, 596, 604, 615, 616, 619, 656, 676, 677, 703, 706, 719, 722, 732, 745, 754, 763, 773, 819, 821, 822, 824, 832, 834, 850, 856, 857, 862, 863, 867, 869, 870, 873, 875, 899, 901, 918, 920, 933, 934, 937, 939, 942, 944, 947, 949, 950, 953, 963, 966, 967, 970, 975, 978, 988, 997, 1000, 1031, 1032, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1044, 1048, 1052, 1053, 1054, 1069, 1070, 1073, 1097], "9": [126, 127, 140, 141, 179, 180, 182, 186, 187, 232, 273, 274, 284, 288, 311, 312, 315, 316, 329, 330, 347, 351, 367, 368, 509, 522, 524, 526, 547, 550, 551, 554, 656, 676, 677, 703, 706, 719, 722, 723, 726, 745, 773, 819, 821, 822, 823, 824, 825, 832, 833, 834, 835, 850, 853, 856, 857, 863, 867, 869, 870, 873, 875, 899, 901, 912, 918, 920, 949, 950, 953, 967, 970, 975, 978, 983, 986, 988, 1036, 1037, 1038, 1039, 1040, 1048, 1052, 1053, 1054, 1069, 1070, 1073, 1097, 1148, 1149, 1150], "asin": [126, 127, 182, 311, 312, 509, 1111], "asinh": [126, 127, 182, 311, 312, 509, 1111], "atan": [126, 127, 182, 311, 312, 509, 543, 1111], "atan2": [126, 127, 182, 311, 312, 509, 1111], "atanh": [126, 127, 182, 311, 312, 509, 1111], "bitwise_and": [126, 127, 182, 311, 312, 509], "bitwise_invert": [126, 127, 182, 311, 312, 509], "bitwise_left_shift": [126, 127, 182, 311, 312, 509], "bitwise_or": [126, 127, 182, 311, 312, 509], "bitwise_right_shift": [126, 127, 182, 311, 312, 509], "bitwise_xor": [126, 127, 182, 311, 312, 509], "ceil": [126, 127, 182, 311, 312, 403, 404, 509, 1111], "0": [126, 127, 128, 129, 136, 137, 140, 141, 142, 143, 152, 153, 158, 162, 175, 176, 177, 178, 179, 180, 181, 182, 186, 189, 206, 207, 208, 210, 211, 220, 223, 232, 233, 234, 258, 262, 272, 273, 274, 275, 278, 279, 282, 284, 285, 288, 289, 290, 294, 295, 299, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 345, 349, 350, 351, 364, 366, 367, 368, 369, 392, 394, 395, 396, 397, 398, 399, 403, 404, 408, 412, 413, 417, 418, 419, 420, 421, 422, 428, 431, 433, 434, 435, 442, 459, 461, 464, 468, 471, 475, 478, 479, 481, 484, 485, 486, 487, 488, 489, 490, 491, 493, 497, 500, 502, 503, 507, 509, 510, 513, 514, 517, 518, 521, 522, 526, 527, 530, 531, 534, 535, 538, 539, 542, 543, 546, 547, 550, 555, 558, 563, 566, 567, 570, 571, 573, 574, 575, 578, 579, 582, 591, 596, 600, 603, 604, 606, 608, 615, 616, 619, 640, 643, 644, 647, 652, 655, 656, 676, 677, 678, 681, 683, 686, 687, 690, 695, 698, 699, 702, 703, 706, 707, 710, 711, 714, 715, 718, 719, 722, 723, 726, 732, 733, 735, 736, 740, 741, 744, 745, 746, 748, 749, 750, 753, 754, 757, 758, 760, 762, 763, 764, 770, 773, 774, 777, 778, 783, 792, 798, 801, 802, 807, 813, 814, 815, 819, 821, 822, 823, 824, 825, 832, 833, 834, 835, 836, 837, 838, 839, 850, 851, 853, 855, 856, 857, 862, 863, 864, 866, 867, 869, 870, 873, 875, 882, 912, 918, 920, 921, 923, 927, 929, 933, 934, 937, 939, 942, 944, 947, 949, 950, 952, 953, 954, 955, 957, 958, 959, 961, 962, 963, 965, 966, 967, 970, 971, 974, 975, 978, 983, 985, 986, 987, 988, 989, 992, 993, 995, 996, 997, 1000, 1005, 1007, 1013, 1025, 1031, 1032, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1057, 1058, 1059, 1062, 1069, 1070, 1073, 1074, 1077, 1078, 1081, 1090, 1092, 1093, 1094, 1097, 1098, 1100, 1101, 1102, 1103, 1106, 1111, 1123, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1154, 1155], "co": [126, 127, 173, 182, 311, 312, 364, 380, 509, 517, 518, 582, 745, 772, 1111], "cosh": [126, 127, 182, 311, 312, 509, 517, 518, 1111], "divid": [126, 127, 177, 178, 182, 311, 312, 351, 357, 509, 586, 607, 608, 611, 745, 809, 949, 988], "equal": [126, 127, 177, 178, 182, 311, 312, 351, 358, 359, 403, 408, 410, 411, 422, 428, 509, 555, 558, 563, 566, 616, 620, 623, 624, 627, 695, 698, 703, 706, 745, 746, 749, 753, 754, 863, 873, 875, 884, 893, 895, 902, 904, 949, 950, 953, 959, 962, 988, 1005, 1008, 1036, 1042, 1044, 1053, 1054, 1055, 1057, 1058, 1059, 1062, 1064, 1067, 1069, 1078, 1081, 1090, 1093, 1094, 1098, 1101], "erf": [126, 127, 182, 311, 312, 509], "exp": [126, 127, 182, 311, 312, 509, 525, 599, 600, 603, 656, 659, 1111], "expm1": [126, 127, 182, 311, 312, 509], "floor": [126, 127, 182, 311, 312, 509, 563, 566, 608, 745, 771, 1111], "floor_divid": [126, 127, 182, 311, 312, 509], "greater": [126, 127, 177, 178, 182, 311, 312, 509, 514, 527, 530, 539, 542, 555, 558, 563, 566, 586, 591, 604, 607, 608, 611, 616, 695, 698, 699, 702, 707, 710, 741, 744, 863, 867, 869, 949, 989, 992, 1036, 1042, 1044], "greater_equ": [126, 127, 182, 311, 312, 509], "isfinit": [126, 127, 182, 311, 312, 509], "isinf": [126, 127, 182, 311, 312, 509], "isnan": [126, 127, 182, 311, 312, 509], "less": [126, 127, 173, 177, 178, 182, 311, 312, 345, 351, 358, 362, 363, 364, 509, 514, 517, 518, 521, 527, 530, 539, 542, 571, 574, 578, 582, 640, 643, 644, 647, 652, 655, 695, 698, 699, 702, 707, 710, 719, 722, 863, 884, 893, 895, 902, 904, 927, 929, 1036, 1042, 1044, 1069, 1098, 1101], "less_equ": [126, 127, 182, 311, 312, 509], "log": [126, 127, 182, 311, 312, 344, 345, 354, 358, 361, 364, 367, 403, 413, 509, 525, 599, 648, 651, 656, 659, 863, 872, 908, 1111], "log10": [126, 127, 182, 311, 312, 509], "log1p": [126, 127, 182, 311, 312, 509], "log2": [126, 127, 182, 311, 312, 509], "logaddexp": [126, 127, 182, 311, 312, 509], "logical_and": [126, 127, 182, 311, 312, 509, 1111], "logical_not": [126, 127, 182, 311, 312, 509, 1111], "logical_or": [126, 127, 182, 311, 312, 509, 1111], "logical_xor": [126, 127, 182, 311, 312, 509], "multipli": [126, 127, 182, 311, 312, 351, 355, 357, 509, 745, 763], "neg": [126, 127, 182, 311, 312, 354, 358, 361, 392, 394, 403, 404, 408, 509, 620, 623, 624, 627, 678, 681, 695, 698, 699, 702, 863, 912, 924, 926, 927, 929, 949, 967, 970, 983, 986, 1102, 1103, 1106, 1107, 1110], "not_equ": [126, 127, 182, 311, 312, 509], "pow": [126, 127, 182, 311, 312, 509], "remaind": [126, 127, 177, 178, 182, 311, 312, 509, 745, 771, 949, 988], "round": [126, 127, 172, 173, 174, 182, 311, 312, 344, 345, 346, 347, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 364, 366, 367, 368, 369, 380, 509, 522, 571, 574, 586, 604, 607, 608, 611, 678, 681, 719, 722, 741, 744, 1111], "sign": [126, 127, 173, 182, 311, 312, 344, 365, 369, 403, 404, 509, 510, 513, 522, 539, 542, 563, 566, 678, 681, 699, 702, 863, 872, 908, 1053, 1054, 1055, 1057, 1069, 1086, 1089, 1094], "sin": [126, 127, 182, 311, 312, 357, 364, 509, 745, 772, 1111], "sinh": [126, 127, 182, 311, 312, 509, 1111], "sqrt": [126, 127, 182, 311, 312, 509, 863, 927, 929], "squar": [126, 127, 182, 311, 312, 509, 719, 722, 850, 853, 863, 864, 866, 870, 872, 876, 878, 879, 881, 882, 892, 908, 909, 911, 912], "subtract": [126, 127, 182, 311, 312, 351, 357, 509], "tan": [126, 127, 182, 294, 311, 312, 350, 354, 358, 361, 362, 364, 509, 527, 530, 538, 543, 733, 740, 1053, 1054, 1055, 1058, 1059, 1062, 1111], "56": [126, 127, 182, 294, 299, 311, 312, 351, 509, 538, 543, 719, 722, 732, 733, 735, 740, 863, 899, 901, 1069, 1070, 1073, 1097], "19": [126, 127, 182, 294, 299, 311, 312, 351, 509, 538, 543, 567, 570, 732, 733, 735, 740, 863, 873, 875], "tanh": [126, 127, 182, 311, 312, 364, 392, 509, 538, 543, 1111], "trunc": [126, 127, 182, 311, 312, 509], "elementwis": [127, 177, 178, 312, 349, 354, 364, 369, 510, 513, 514, 517, 518, 521, 522, 525, 527, 530, 531, 534, 535, 538, 539, 542, 543, 546, 547, 550, 551, 554, 555, 558, 559, 562, 563, 566, 567, 570, 571, 574, 575, 578, 579, 582, 583, 586, 588, 591, 592, 595, 596, 599, 600, 603, 604, 607, 608, 611, 612, 615, 616, 619, 620, 623, 624, 627, 628, 631, 632, 635, 636, 639, 640, 643, 644, 647, 648, 651, 652, 655, 656, 659, 660, 663, 664, 667, 668, 671, 672, 675, 676, 677, 678, 681, 683, 686, 687, 690, 691, 694, 695, 698, 699, 702, 703, 706, 707, 710, 711, 714, 715, 718, 719, 722, 723, 726, 727, 731, 732, 736, 737, 740, 741, 744], "arraywithgener": [128, 366], "all_equ": [128, 129, 182, 275, 313, 314, 745, 750], "equality_matrix": [128, 129, 182, 189, 275, 313, 314, 745, 746, 748, 749, 750], "With": [128, 129, 173, 174, 177, 178, 179, 180, 182, 189, 274, 275, 279, 282, 288, 290, 294, 311, 312, 313, 314, 325, 326, 329, 330, 344, 351, 353, 364, 392, 394, 395, 396, 397, 398, 399, 403, 414, 422, 431, 434, 459, 481, 497, 509, 522, 526, 527, 530, 538, 543, 547, 550, 567, 570, 571, 574, 579, 591, 604, 615, 616, 619, 656, 676, 677, 683, 686, 687, 690, 703, 706, 719, 722, 723, 726, 732, 733, 740, 745, 746, 748, 749, 750, 754, 762, 763, 770, 773, 774, 777, 778, 808, 813, 814, 815, 850, 853, 856, 857, 862, 863, 864, 866, 867, 869, 870, 873, 875, 889, 891, 918, 920, 933, 934, 937, 944, 947, 949, 950, 953, 954, 963, 966, 967, 970, 975, 978, 983, 986, 987, 988, 997, 1000, 1031, 1032, 1035, 1036, 1037, 1038, 1040, 1041, 1042, 1044, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1058, 1059, 1062, 1069, 1070, 1073, 1097, 1102, 1103, 1106], "x1": [128, 129, 182, 189, 274, 275, 281, 286, 293, 311, 312, 313, 314, 351, 362, 422, 454, 459, 497, 509, 522, 525, 526, 539, 542, 547, 550, 555, 558, 559, 562, 563, 566, 567, 570, 583, 586, 587, 588, 591, 599, 607, 608, 611, 612, 615, 616, 619, 632, 635, 636, 639, 656, 659, 660, 663, 668, 671, 672, 675, 676, 677, 678, 681, 682, 687, 690, 695, 698, 699, 702, 727, 728, 731, 745, 746, 748, 749, 750, 753, 850, 855, 863, 867, 869, 885, 888, 899, 901, 909, 911, 918, 920, 924, 926, 1048, 1052], "mix": [128, 129, 179, 180, 182, 348, 351, 353, 364, 422, 450, 459, 497, 509, 522, 547, 550, 567, 570, 591, 615, 616, 619, 676, 677, 687, 690, 745, 762, 770, 773, 774, 777, 813, 814, 815, 850, 853, 856, 857, 862, 863, 918, 920, 933, 934, 937, 944, 947, 949, 950, 953, 1031, 1032, 1035, 1048, 1052, 1069, 1070, 1073, 1078, 1081, 1097], "native_arrai": [128, 129, 158, 164, 170, 179, 180, 182, 189, 275, 313, 314, 392, 394, 395, 396, 397, 398, 399, 403, 414, 422, 431, 434, 459, 481, 497, 509, 527, 530, 547, 550, 567, 570, 571, 574, 591, 604, 615, 616, 619, 676, 677, 683, 686, 687, 690, 719, 722, 723, 726, 745, 746, 748, 749, 750, 754, 762, 763, 770, 773, 774, 777, 808, 813, 814, 815, 850, 853, 856, 857, 862, 863, 867, 869, 870, 873, 875, 918, 920, 933, 934, 937, 944, 947, 949, 950, 953, 963, 966, 967, 970, 975, 978, 988, 997, 1000, 1031, 1032, 1035, 1036, 1037, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1069, 1070, 1073, 1074, 1077, 1097, 1102, 1103, 1106], "gather_nd": [128, 129, 177, 178, 182, 282, 313, 314, 745, 778, 1111], "indic": [128, 129, 177, 178, 182, 225, 282, 313, 314, 347, 365, 369, 392, 397, 509, 707, 710, 745, 773, 774, 776, 777, 778, 785, 798, 801, 802, 850, 851, 852, 853, 854, 855, 856, 857, 863, 927, 929, 949, 983, 986, 1013, 1014, 1016, 1018, 1020, 1021, 1022, 1024, 1027, 1028, 1029, 1030, 1031, 1032, 1035, 1036, 1037, 1048, 1049, 1050, 1051, 1053, 1054, 1056, 1058, 1059, 1062, 1064, 1067, 1111, 1114, 1116, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1144, 1145], "gener": [129, 156, 157, 177, 178, 314, 341, 342, 345, 346, 347, 348, 349, 350, 351, 354, 357, 358, 359, 360, 361, 362, 363, 364, 366, 368, 369, 380, 381, 400, 403, 404, 412, 413, 422, 431, 434, 509, 527, 530, 567, 570, 571, 574, 579, 604, 687, 690, 699, 702, 719, 722, 723, 726, 746, 749, 751, 752, 753, 754, 755, 756, 757, 758, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 777, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 831, 949, 963, 966, 983, 986, 1036, 1037, 1038, 1039, 1042, 1044, 1046, 1053, 1054, 1055, 1058, 1059, 1062, 1069, 1074, 1077, 1111, 1148, 1152], "arraywithgradi": [130, 366], "gradient": [131, 177, 178, 316, 349, 358, 367, 368, 380, 381, 459, 503, 821, 822, 824, 826, 827, 829, 831, 832, 834, 836, 838, 840, 842, 844, 845, 846, 847, 848, 849, 1009, 1010, 1011, 1012, 1111, 1148, 1149, 1150, 1151, 1152, 1153], "arraywithimag": [132, 366], "imag": [133, 318, 344, 347, 349, 364, 365, 367, 369, 380, 850, 851, 852, 853, 854, 856, 857, 1111], "arraywithlay": 134, "layer": [135, 172, 320, 349, 350, 364, 365, 368, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 1031, 1032, 1035, 1111, 1123, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1152, 1154, 1155], "linear_algebra": [136, 137, 321, 322, 349, 366, 863, 864, 866, 867, 869, 870, 872, 873, 875, 876, 878, 879, 881, 882, 884, 885, 888, 889, 891, 892, 893, 895, 896, 898, 899, 901, 902, 904, 905, 907, 908, 909, 911, 912, 914, 915, 917, 918, 920, 921, 923, 924, 926, 927, 929, 930, 932], "arraywithlinearalgebra": 136, "choleski": [136, 137, 179, 180, 863], "upper": [136, 137, 177, 178, 403, 408, 419, 863, 864, 866, 905, 907, 1036, 1042, 1044], "cross": [136, 137, 179, 180, 863, 933, 934, 937, 939, 942, 944, 947, 1111], "axi": [136, 137, 138, 139, 140, 141, 150, 151, 152, 153, 154, 155, 177, 178, 182, 188, 190, 191, 210, 214, 220, 222, 247, 248, 249, 257, 260, 262, 267, 268, 271, 272, 276, 280, 290, 291, 292, 295, 297, 303, 323, 324, 325, 326, 335, 336, 337, 338, 339, 340, 351, 354, 358, 359, 361, 362, 364, 366, 369, 380, 392, 397, 403, 412, 413, 459, 461, 464, 471, 484, 485, 486, 487, 488, 489, 490, 491, 503, 745, 763, 764, 773, 817, 863, 867, 869, 873, 875, 924, 926, 927, 929, 933, 939, 941, 942, 943, 944, 946, 947, 948, 949, 955, 957, 958, 959, 962, 963, 965, 966, 967, 969, 970, 975, 977, 978, 983, 985, 986, 987, 988, 989, 991, 992, 993, 995, 996, 997, 1000, 1001, 1004, 1005, 1008, 1036, 1047, 1048, 1049, 1050, 1058, 1059, 1061, 1062, 1063, 1064, 1066, 1067, 1068, 1069, 1070, 1074, 1076, 1077, 1078, 1080, 1081, 1082, 1084, 1085, 1086, 1088, 1089, 1090, 1092, 1093, 1094, 1096, 1098, 1100, 1101, 1102, 1103, 1105, 1106, 1107, 1109, 1110], "det": [136, 137, 179, 180, 863], "diagon": [136, 137, 179, 180, 403, 408, 418, 419, 863, 921, 923], "offset": [136, 137, 142, 143, 182, 234, 327, 328, 863, 873, 875, 921, 923, 1031, 1032, 1034, 1035], "axis1": [136, 137, 140, 141, 182, 298, 325, 326, 863, 873, 875, 949, 997, 999, 1000], "axis2": [136, 137, 863, 873, 875], "eigh": [136, 137, 179, 180, 863], "namedtupl": [136, 137, 863, 876, 878, 905, 907, 912, 1053, 1054, 1055], "eigvalsh": [136, 137, 179, 180, 863], "inv": [136, 137, 179, 180, 366, 863, 1111], "matmul": [136, 137, 182, 321, 322, 349, 355, 364, 863, 912, 1111], "matrix_norm": [136, 137, 177, 178, 863], "ord": [136, 137, 177, 178, 863, 889, 891, 927, 929], "fro": [136, 137, 863, 889, 891], "keepdim": [136, 137, 152, 153, 154, 155, 177, 178, 182, 188, 190, 247, 248, 249, 257, 295, 297, 303, 337, 338, 339, 340, 745, 817, 863, 889, 891, 927, 929, 1048, 1049, 1050, 1069, 1070, 1074, 1076, 1077, 1078, 1080, 1081, 1082, 1084, 1085, 1086, 1088, 1089, 1090, 1092, 1093, 1094, 1096, 1098, 1100, 1101, 1102, 1103, 1105, 1106, 1107, 1109, 1110], "matrix_rank": [136, 137, 179, 180, 863], "rtol": [136, 137, 863, 884, 893, 895, 902, 904], "matrix_transpos": [136, 137, 179, 180, 366, 863], "outer": [136, 137, 179, 180, 863, 1009, 1010, 1011, 1012], "pinv": [136, 137, 179, 180, 863, 1111], "qr": [136, 137, 179, 180, 863], "mode": [136, 137, 177, 178, 344, 351, 358, 381, 400, 401, 459, 488, 489, 490, 491, 503, 509, 522, 678, 681, 863, 905, 907], "reduc": [136, 137, 177, 178, 366, 459, 503, 745, 768, 863, 905, 907, 1048, 1049, 1050, 1069, 1074, 1077, 1078, 1081, 1082, 1085, 1086, 1089, 1090, 1093, 1094, 1098, 1101, 1102, 1103, 1106, 1107, 1110], "solv": [136, 137, 179, 180, 365, 380, 863], "svd": [136, 137, 179, 180, 863, 1111], "full_matric": [136, 137, 863, 912], "svdval": [136, 137, 179, 180, 863], "tensordot": [136, 137, 179, 180, 863], "ax": [136, 137, 140, 141, 177, 178, 182, 254, 325, 326, 349, 351, 359, 366, 459, 503, 745, 763, 863, 889, 891, 909, 911, 918, 920, 927, 929, 949, 959, 962, 967, 970, 971, 973, 974, 983, 986, 989, 992, 997, 1000, 1005, 1008, 1048, 1049, 1050, 1069, 1074, 1077, 1078, 1081, 1082, 1085, 1086, 1089, 1090, 1093, 1094, 1098, 1101, 1102, 1103, 1106, 1107, 1110], "trace": [136, 137, 177, 178, 179, 180, 364, 381, 745, 791, 792, 794, 863], "vecdot": [136, 137, 179, 180, 863], "vector_norm": [136, 137, 177, 178, 863], "vector_to_skew_symmetric_matrix": [136, 137, 179, 180, 863, 1111], "arraywithloss": 138, "binary_cross_entropi": [138, 139, 182, 323, 324, 933], "pred": [138, 139, 182, 199, 214, 268, 277, 280, 292, 323, 324, 354, 358, 361, 933, 934, 936, 937, 938, 939, 941, 942, 943, 944, 946, 947, 948], "epsilon": [138, 139, 142, 143, 182, 186, 199, 214, 232, 234, 268, 273, 277, 280, 284, 292, 315, 316, 323, 324, 327, 328, 354, 358, 361, 368, 819, 821, 822, 823, 824, 825, 832, 833, 834, 835, 863, 884, 893, 895, 902, 904, 933, 934, 936, 937, 938, 939, 941, 942, 943, 944, 946, 947, 948, 1031, 1032, 1034, 1035, 1146, 1147, 1148, 1149, 1150], "1e": [138, 139, 142, 143, 182, 186, 199, 214, 232, 234, 268, 273, 277, 280, 284, 292, 315, 316, 323, 324, 327, 328, 354, 358, 361, 368, 369, 745, 781, 819, 821, 822, 823, 824, 825, 832, 833, 834, 835, 863, 912, 933, 934, 936, 937, 938, 939, 941, 942, 943, 944, 946, 947, 948, 1031, 1032, 1034, 1035, 1111, 1148, 1149, 1150, 1151, 1153], "07": [138, 139, 182, 186, 199, 214, 232, 268, 273, 277, 280, 284, 292, 315, 316, 323, 324, 368, 819, 821, 822, 823, 824, 825, 832, 833, 834, 835, 933, 934, 936, 937, 938, 939, 941, 942, 943, 944, 946, 947, 948, 1148, 1149, 1150], "cross_entropi": [138, 139, 182, 323, 324, 354, 358, 361, 933, 944, 947], "sparse_cross_entropi": [138, 139, 182, 323, 324, 933], "loss": [139, 324, 349, 354, 367, 368, 369, 934, 937, 939, 942, 944, 947, 1111], "arraywithmanipul": 140, "clip": [140, 141, 177, 178, 182, 279, 325, 326, 354, 358, 361, 364, 367, 369, 509, 676, 677, 745, 757, 758, 760, 949, 954, 1111], "x_min": [140, 141, 177, 178, 182, 208, 279, 325, 326, 364, 369, 949, 950, 952, 953, 954], "x_max": [140, 141, 177, 178, 182, 208, 279, 325, 326, 364, 369, 949, 950, 952, 953, 954], "roll": [140, 141, 182, 290, 325, 326, 358, 362, 949, 987], "8": [140, 141, 179, 180, 182, 274, 288, 311, 312, 329, 330, 344, 347, 351, 358, 363, 367, 392, 396, 459, 481, 509, 522, 526, 547, 550, 571, 574, 579, 591, 615, 616, 619, 656, 676, 677, 703, 706, 719, 722, 723, 726, 745, 754, 773, 850, 857, 863, 867, 869, 870, 873, 875, 899, 901, 918, 920, 933, 934, 937, 949, 950, 953, 967, 970, 975, 978, 988, 1036, 1037, 1038, 1039, 1040, 1048, 1052, 1053, 1054, 1069, 1070, 1073, 1097, 1111, 1132, 1143], "concat": [140, 141, 177, 178, 182, 325, 326, 459, 488, 489, 490, 491, 503, 745, 772, 949, 1111], "xs": [140, 141, 182, 210, 325, 326, 358, 459, 482, 486, 488, 489, 490, 745, 746, 749, 754, 819, 826, 949, 955, 957, 958], "constant_pad": [140, 141, 182, 325, 326, 949], "pad_width": [140, 141, 182, 211, 304, 325, 326, 949, 959, 961, 962, 1005, 1007, 1008], "valu": [140, 141, 177, 178, 179, 180, 181, 182, 211, 304, 325, 326, 345, 351, 353, 354, 358, 359, 360, 361, 362, 364, 366, 369, 381, 403, 404, 408, 410, 411, 412, 413, 422, 428, 437, 438, 439, 459, 471, 502, 503, 509, 510, 513, 514, 522, 527, 530, 535, 571, 574, 586, 588, 591, 592, 595, 604, 607, 608, 611, 612, 615, 616, 619, 632, 635, 636, 639, 676, 677, 678, 681, 687, 690, 691, 694, 695, 698, 703, 706, 741, 744, 745, 757, 758, 760, 761, 766, 772, 773, 774, 777, 783, 786, 790, 800, 801, 802, 803, 804, 805, 818, 819, 821, 822, 824, 826, 832, 834, 845, 849, 850, 851, 852, 853, 854, 855, 856, 857, 860, 861, 862, 863, 872, 884, 893, 895, 902, 904, 905, 907, 908, 909, 911, 912, 914, 915, 917, 927, 929, 949, 950, 953, 959, 961, 962, 975, 978, 979, 982, 1005, 1007, 1008, 1009, 1010, 1011, 1013, 1017, 1018, 1019, 1020, 1021, 1026, 1029, 1030, 1031, 1032, 1035, 1036, 1037, 1038, 1039, 1041, 1042, 1044, 1046, 1048, 1049, 1050, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1062, 1064, 1067, 1069, 1074, 1077, 1078, 1081, 1082, 1085, 1086, 1089, 1090, 1093, 1094, 1098, 1101, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1152], "expand_dim": [140, 141, 182, 325, 326, 364, 367, 949, 1111], "flip": [140, 141, 182, 325, 326, 366, 367, 369, 509, 551, 554, 949, 975, 978, 1111], "permute_dim": [140, 141, 182, 325, 326, 949], "repeat": [140, 141, 177, 178, 182, 325, 326, 345, 350, 351, 355, 357, 358, 745, 769, 949, 1001, 1004], "reshap": [140, 141, 177, 178, 182, 325, 326, 361, 364, 366, 369, 949, 1111], "shape": [140, 141, 177, 178, 182, 261, 288, 289, 325, 326, 329, 330, 345, 349, 350, 351, 359, 360, 361, 362, 364, 366, 367, 368, 369, 392, 395, 403, 406, 407, 410, 411, 414, 416, 417, 418, 419, 420, 421, 422, 428, 429, 430, 459, 471, 499, 504, 509, 510, 513, 514, 517, 518, 521, 522, 525, 527, 530, 531, 534, 535, 539, 542, 547, 550, 551, 554, 555, 558, 559, 562, 563, 566, 567, 570, 571, 574, 575, 578, 579, 582, 591, 596, 599, 600, 603, 604, 615, 616, 619, 620, 623, 624, 627, 628, 631, 632, 635, 640, 643, 644, 647, 648, 651, 652, 655, 656, 659, 660, 663, 664, 667, 668, 671, 672, 675, 678, 681, 683, 686, 687, 690, 695, 698, 699, 702, 703, 706, 707, 710, 711, 714, 715, 718, 719, 722, 723, 726, 727, 731, 732, 745, 758, 760, 771, 774, 777, 782, 798, 801, 802, 808, 850, 852, 853, 854, 856, 857, 862, 863, 864, 866, 867, 869, 870, 873, 875, 876, 878, 879, 881, 882, 884, 885, 888, 893, 895, 896, 898, 899, 901, 902, 904, 905, 907, 909, 911, 912, 914, 915, 917, 921, 923, 924, 926, 933, 934, 937, 939, 942, 944, 947, 949, 950, 953, 955, 958, 959, 962, 963, 966, 967, 970, 971, 974, 975, 978, 979, 981, 982, 983, 986, 988, 989, 992, 993, 996, 997, 1000, 1005, 1008, 1036, 1038, 1039, 1040, 1041, 1042, 1044, 1045, 1048, 1049, 1051, 1058, 1059, 1062, 1064, 1067, 1069, 1070, 1073, 1097, 1102, 1103, 1106, 1107, 1110, 1111, 1132, 1134, 1135, 1136, 1137, 1138, 1139, 1146, 1147], "shift": [140, 141, 182, 262, 290, 325, 326, 351, 362, 509, 555, 558, 563, 566, 949, 983, 985, 986, 987], "squeez": [140, 141, 182, 325, 326, 949, 1111], "stack": [140, 141, 177, 178, 182, 325, 326, 364, 403, 418, 419, 863, 870, 873, 875, 876, 878, 879, 881, 882, 884, 885, 888, 892, 893, 895, 896, 898, 902, 904, 905, 907, 912, 914, 915, 917, 921, 923, 949, 1013, 1014, 1023, 1024, 1111, 1132, 1141], "swapax": [140, 141, 182, 325, 326, 949], "axis0": [140, 141, 182, 298, 325, 326, 949, 997, 999, 1000], "tile": [140, 141, 182, 325, 326, 949, 1111], "rep": [140, 141, 182, 301, 325, 326, 949, 1001, 1003, 1004], "zero_pad": [140, 141, 182, 325, 326, 949, 1111], "manipul": [141, 172, 326, 349, 369, 380, 950, 953, 955, 958, 959, 962, 963, 966, 967, 970, 971, 974, 975, 978, 979, 982, 983, 986, 988, 989, 992, 993, 996, 997, 1000, 1001, 1004, 1005, 1008], "arraywithnorm": 142, "layer_norm": [142, 143, 182, 327, 328, 1031], "normalized_idx": [142, 143, 182, 234, 327, 328, 1031, 1032, 1034, 1035], "05": [142, 143, 182, 234, 327, 328, 459, 1031, 1032, 1034, 1035], "scale": [142, 143, 182, 234, 327, 328, 358, 459, 501, 502, 819, 836, 838, 850, 858, 861, 862, 1031, 1032, 1034, 1035, 1132, 1140, 1143, 1148, 1151], "new_std": [142, 143, 182, 234, 327, 328, 1031, 1032, 1034, 1035, 1146, 1147], "norm": [143, 177, 178, 328, 349, 745, 757, 758, 760, 863, 889, 891, 927, 929, 1032, 1035, 1111, 1147, 1148, 1150], "arraywithrandom": [144, 366], "random": [145, 177, 178, 330, 349, 360, 369, 380, 1037, 1038, 1039, 1041, 1042, 1044, 1046, 1047, 1111], "arraywithsearch": 146, "arraywithset": 148, "arraywithsort": 150, "argsort": [150, 151, 182, 335, 336, 1058], "descend": [150, 151, 182, 191, 267, 276, 291, 335, 336, 863, 912, 914, 915, 917, 1058, 1059, 1061, 1062, 1063, 1064, 1066, 1067, 1068], "stabl": [150, 151, 182, 191, 267, 276, 291, 335, 336, 344, 364, 381, 745, 780, 781, 803, 804, 809, 810, 1058, 1059, 1061, 1062, 1063, 1064, 1066, 1067, 1068], "sort": [151, 177, 178, 179, 180, 181, 182, 336, 349, 863, 876, 878, 912, 914, 915, 917, 1059, 1062], "arraywithstatist": 152, "einsum": [152, 153, 182, 337, 338, 1069], "equat": [152, 153, 182, 216, 337, 338, 863, 909, 911, 1069, 1070, 1072, 1073, 1097], "max": [152, 153, 177, 178, 182, 337, 338, 422, 442, 445, 509, 676, 745, 757, 758, 760, 768, 801, 802, 863, 884, 893, 895, 902, 904, 1069, 1148, 1150], "mean": [152, 153, 177, 178, 182, 337, 338, 341, 342, 344, 345, 348, 351, 354, 358, 359, 360, 361, 364, 366, 367, 368, 369, 380, 381, 459, 488, 489, 490, 491, 503, 745, 768, 1009, 1010, 1011, 1012, 1013, 1019, 1036, 1041, 1053, 1054, 1069, 1111, 1123], "min": [152, 153, 177, 178, 182, 337, 338, 422, 442, 445, 509, 677, 745, 768, 801, 802, 809, 863, 905, 907, 912, 914, 915, 917, 927, 929, 1069], "prod": [152, 153, 177, 178, 182, 337, 338, 351, 359, 745, 768, 1069], "std": [152, 153, 182, 337, 338, 351, 1036, 1041, 1053, 1054, 1069], "correct": [152, 153, 182, 295, 303, 337, 338, 345, 346, 348, 354, 358, 359, 360, 362, 422, 454, 949, 950, 953, 1069, 1090, 1092, 1093, 1098, 1100, 1101, 1111], "sum": [152, 153, 177, 178, 182, 337, 338, 354, 358, 359, 361, 364, 459, 488, 489, 490, 491, 503, 509, 522, 525, 599, 656, 659, 745, 764, 768, 801, 802, 850, 862, 863, 912, 921, 923, 927, 929, 1069, 1070, 1073, 1090, 1093, 1097], "var": [152, 153, 182, 337, 338, 341, 342, 351, 364, 1009, 1010, 1011, 1069], "statist": [153, 338, 341, 342, 349, 359, 1070, 1073, 1074, 1077, 1078, 1081, 1082, 1085, 1086, 1089, 1090, 1093, 1094, 1097, 1098, 1101], "arraywithutil": 154, "util": [155, 340, 349, 360, 459, 492, 1103, 1106, 1107, 1110], "add_ivy_array_instance_method": 156, "cl": [156, 157, 341, 342], "modul": [156, 157, 158, 162, 163, 174, 177, 178, 179, 180, 181, 341, 342, 344, 347, 353, 354, 355, 357, 361, 364, 365, 367, 369, 380, 381, 745, 796, 1036, 1037, 1041, 1042, 1044, 1111, 1118, 1119, 1120, 1121, 1122, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1146, 1147, 1154, 1155], "to_ignor": [156, 157, 341, 342, 1013, 1024], "loop": [156, 157, 341, 342, 355, 381, 1009, 1010, 1011, 1012], "over": [156, 157, 158, 162, 172, 174, 177, 178, 341, 342, 344, 350, 351, 355, 361, 366, 381, 863, 889, 891, 918, 920, 924, 926, 927, 929, 1031, 1032, 1035, 1036, 1042, 1044, 1069, 1074, 1077, 1078, 1081, 1082, 1085, 1086, 1089, 1090, 1093, 1094, 1098, 1101, 1102, 1103, 1106, 1107, 1110, 1146, 1147], "etc": [156, 157, 174, 177, 178, 341, 342, 344, 345, 346, 349, 351, 353, 357, 358, 359, 362, 364, 366, 367, 381, 403, 412, 413, 745, 773, 774, 777, 798, 801, 802, 1036, 1037, 1038, 1039, 1042, 1044, 1053, 1054, 1055, 1057, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1152, 1154, 1155], "us": [156, 157, 158, 163, 170, 173, 174, 177, 178, 179, 180, 181, 341, 342, 343, 345, 346, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 366, 368, 369, 380, 381, 392, 394, 395, 396, 397, 398, 399, 402, 422, 441, 459, 468, 469, 494, 498, 501, 502, 503, 504, 506, 508, 509, 527, 530, 547, 550, 567, 570, 579, 591, 615, 616, 619, 676, 677, 683, 686, 687, 690, 703, 706, 719, 722, 745, 773, 780, 781, 795, 801, 802, 803, 804, 809, 810, 819, 821, 822, 824, 832, 834, 836, 838, 850, 856, 858, 859, 861, 862, 863, 870, 873, 875, 889, 891, 933, 934, 937, 949, 963, 966, 967, 970, 975, 978, 983, 986, 997, 1000, 1009, 1010, 1011, 1012, 1013, 1014, 1016, 1022, 1023, 1024, 1026, 1031, 1032, 1035, 1048, 1049, 1050, 1051, 1053, 1054, 1055, 1069, 1070, 1073, 1097, 1102, 1103, 1106, 1111, 1132, 1140, 1143, 1144, 1145, 1146, 1147, 1148, 1150, 1151], "_wrap_funct": [156, 157, 341, 342, 354, 356], "we": [156, 157, 158, 163, 164, 170, 171, 172, 173, 174, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 356, 357, 358, 359, 361, 362, 364, 365, 366, 367, 368, 369, 380, 381, 819, 826, 1111, 1117], "want": [156, 157, 158, 163, 173, 341, 342, 343, 344, 345, 353, 367, 368, 369, 381], "don": [156, 157, 174, 341, 342, 344, 345, 346, 359, 368, 381], "t": [156, 157, 158, 163, 173, 174, 341, 342, 344, 345, 346, 347, 351, 359, 364, 366, 367, 368, 369, 381, 745, 754, 850, 859, 860], "As": [156, 157, 172, 341, 342, 345, 353, 354, 357, 358, 359, 360, 361, 362, 364, 366, 367, 368, 381, 1053, 1054, 1055, 1057], "shown": [156, 157, 177, 178, 341, 342, 345, 351, 362, 364, 366, 381, 403, 414, 509, 547, 550, 567, 570, 579, 703, 706, 863, 870, 949, 963, 966, 967, 970, 1053, 1054, 1055, 1058, 1059, 1062], "appropri": [156, 157, 341, 342, 345, 356, 509, 522, 678, 681, 1048, 1049], "our": [156, 157, 172, 173, 341, 342, 343, 344, 345, 351, 358, 363, 366, 367, 368, 369, 381, 1111], "toi": [156, 157, 341, 342], "arrayexampl": [156, 157], "import": [156, 157, 158, 162, 173, 341, 342, 346, 349, 350, 351, 355, 357, 358, 359, 360, 361, 364, 366, 367, 369, 381, 459, 500, 1111, 1117], "pass": [156, 157, 158, 162, 177, 178, 179, 180, 181, 341, 342, 346, 350, 351, 352, 353, 354, 355, 357, 358, 361, 362, 366, 381, 422, 436, 459, 468, 503, 509, 539, 542, 745, 756, 789, 819, 848, 1009, 1010, 1011, 1121, 1122, 1144, 1145, 1148, 1152, 1154, 1155], "hasattr": [156, 157, 341, 342, 366], "relu": [156, 157, 179, 180, 367, 368, 392, 393, 394, 1111], "softmax": [156, 157, 179, 180, 392, 850, 861, 862, 1111], "backend_handl": [158, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 1111], "contextmanag": [158, 159], "object": [158, 177, 178, 179, 180, 181, 366, 369, 403, 409, 422, 442, 459, 504, 819, 1013, 1016, 1018, 1020, 1021, 1022, 1027, 1028, 1029, 1030, 1036, 1047, 1123, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1141, 1142, 1144, 1145], "__init__": [158, 159, 162, 163, 177, 178, 179, 180, 181, 182, 349, 355, 359, 364, 366, 367, 368, 369, 422, 423, 424, 425, 459, 460, 467, 468, 469, 470, 471, 472, 473, 474, 819, 820, 1036, 1037, 1041, 1042, 1044, 1111, 1118, 1119, 1120, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155], "choose_random_backend": 158, "exclud": [158, 160, 351, 364, 403, 404, 1036, 1042, 1044], "clear_backend_stack": 158, "current_backend": [158, 179, 180, 349, 354], "current": [158, 162, 163, 170, 174, 177, 178, 179, 180, 181, 344, 345, 346, 347, 354, 360, 364, 369, 380, 381, 422, 443, 444, 446, 458, 459, 468, 492, 493, 497, 499, 745, 779, 786, 790, 797, 799, 1013, 1014, 1023, 1024, 1111], "prioriti": [158, 162, 177, 178, 345, 361], "global_backend": [158, 162], "which": [158, 162, 163, 172, 173, 174, 177, 178, 179, 180, 181, 344, 345, 346, 347, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 366, 367, 368, 369, 380, 381, 392, 397, 400, 401, 402, 403, 404, 405, 406, 407, 408, 410, 411, 412, 413, 415, 416, 417, 418, 419, 420, 421, 422, 431, 434, 436, 440, 442, 445, 446, 458, 459, 468, 469, 479, 484, 485, 486, 487, 488, 489, 490, 491, 493, 497, 499, 501, 502, 503, 509, 699, 702, 745, 751, 763, 764, 766, 773, 774, 777, 779, 785, 789, 797, 798, 799, 801, 802, 817, 819, 822, 824, 826, 827, 829, 832, 834, 836, 838, 840, 842, 845, 847, 848, 850, 861, 863, 867, 869, 873, 875, 889, 891, 909, 911, 912, 924, 926, 927, 929, 933, 939, 942, 944, 947, 949, 955, 958, 967, 970, 975, 978, 983, 986, 988, 993, 996, 1013, 1018, 1019, 1020, 1021, 1026, 1027, 1028, 1029, 1030, 1036, 1037, 1038, 1039, 1042, 1044, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1057, 1058, 1059, 1062, 1064, 1067, 1069, 1074, 1077, 1078, 1081, 1082, 1085, 1086, 1089, 1090, 1093, 1094, 1098, 1101, 1102, 1103, 1106, 1107, 1110, 1111, 1114, 1116, 1121, 1122, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1152, 1154, 1155], "try": [158, 162, 171, 173, 174, 177, 178, 344, 345, 346, 347, 357, 358, 366, 381, 745, 816, 1111], "infer": [158, 162, 348, 355, 359, 360, 364, 369, 400, 401, 403, 404, 405, 407, 410, 411, 415, 417, 421, 509, 612, 745, 782, 807, 949, 979, 982], "when": [158, 162, 172, 173, 177, 178, 179, 180, 181, 344, 345, 346, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 364, 366, 367, 369, 381, 422, 428, 459, 509, 522, 600, 603, 695, 698, 745, 756, 789, 810, 933, 934, 937, 939, 942, 944, 947, 1013, 1024, 1048, 1049, 1050, 1052, 1069, 1074, 1077, 1082, 1085, 1090, 1093, 1098, 1101, 1111, 1144, 1145], "global": [158, 162, 163, 164, 170, 177, 178, 179, 180, 181, 354, 355, 359, 360, 364, 422, 437, 438, 439, 459, 468, 469, 501, 502, 503, 745, 780, 781, 800, 803, 804, 805, 809, 810, 1031, 1032, 1035, 1146, 1147], "numpi": [158, 162, 163, 164, 172, 173, 177, 178, 345, 346, 353, 355, 359, 360, 361, 362, 364, 366, 369, 745, 814, 1069, 1070, 1073, 1097, 1111], "np": [158, 162, 357, 359, 360, 361, 362, 366, 367, 369, 1111], "py": [158, 162, 163, 345, 349, 350, 354, 355, 359, 360, 362, 364, 366, 368, 369, 1036, 1037, 1041, 1042, 1044], "noqa": [158, 162, 163, 403, 414, 422, 431, 434, 509, 522, 547, 550, 567, 570, 571, 574, 579, 687, 690, 703, 706, 719, 722, 723, 726, 732, 863, 870, 949, 963, 966, 967, 970, 983, 986, 1069, 1074, 1077], "set_backend": [158, 162, 163, 170, 354, 355, 356, 359, 422, 443, 444, 459, 500, 745, 807, 1111], "ha": [158, 162, 163, 172, 173, 174, 177, 178, 345, 350, 351, 354, 355, 356, 359, 360, 364, 366, 368, 369, 380, 381, 403, 414, 459, 478, 509, 510, 513, 678, 681, 695, 698, 863, 872, 885, 888, 908, 909, 911, 912, 921, 923, 949, 963, 966, 989, 992, 1053, 1054, 1055, 1057, 1069, 1078, 1081, 1086, 1089, 1090, 1093, 1094, 1098, 1101], "jax": [158, 162, 163, 164, 173, 174, 345, 346, 355, 359, 360, 361, 362, 364, 366, 369, 381, 819, 831, 1053, 1054, 1055, 1057, 1111], "get_backend": [158, 354, 355], "specifi": [158, 163, 177, 178, 348, 353, 354, 359, 360, 361, 362, 364, 367, 368, 369, 403, 404, 406, 410, 412, 413, 416, 418, 419, 420, 422, 428, 430, 459, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 493, 497, 499, 502, 503, 504, 509, 699, 702, 745, 751, 763, 773, 774, 777, 784, 817, 863, 873, 875, 889, 891, 918, 920, 921, 923, 924, 926, 927, 929, 933, 934, 937, 939, 942, 944, 947, 949, 950, 953, 955, 958, 959, 962, 967, 970, 983, 986, 989, 992, 993, 996, 1005, 1008, 1013, 1018, 1020, 1021, 1027, 1028, 1029, 1030, 1048, 1049, 1050, 1053, 1054, 1055, 1057, 1058, 1059, 1062, 1069, 1070, 1073, 1086, 1089, 1094, 1097, 1102, 1103, 1106, 1107, 1110], "isn": [158, 163, 345, 367, 381], "associ": [158, 163, 345, 354, 356, 381, 509, 522, 678, 681, 863, 884, 893, 895, 902, 904, 930, 932], "retriev": [158, 163, 345, 745, 751], "i": [158, 163, 345, 347, 348, 364, 367, 369, 403, 404, 414, 509, 510, 513, 539, 542, 555, 558, 563, 566, 571, 574, 586, 604, 607, 608, 611, 620, 623, 676, 677, 683, 686, 695, 698, 699, 702, 745, 753, 754, 819, 822, 824, 827, 829, 832, 834, 836, 838, 840, 842, 863, 867, 869, 884, 885, 888, 893, 895, 902, 904, 909, 911, 912, 921, 923, 927, 929, 949, 993, 996, 1053, 1054, 1055, 1057, 1058, 1059, 1062, 1064, 1067, 1069, 1070, 1073, 1074, 1077, 1078, 1081, 1082, 1085, 1090, 1093, 1094, 1097, 1098, 1101], "e": [158, 163, 173, 174, 343, 345, 347, 348, 358, 367, 381, 402, 403, 414, 422, 427, 450, 459, 475, 509, 510, 513, 539, 542, 555, 558, 563, 566, 571, 574, 586, 596, 604, 607, 608, 611, 620, 623, 640, 643, 648, 651, 676, 677, 683, 686, 695, 698, 699, 702, 819, 822, 824, 827, 829, 832, 834, 836, 838, 840, 842, 863, 867, 869, 884, 885, 888, 893, 895, 902, 904, 909, 911, 912, 927, 929, 949, 993, 996, 1036, 1041, 1042, 1044, 1053, 1054, 1055, 1057, 1058, 1059, 1062, 1064, 1067, 1069, 1074, 1077, 1078, 1081, 1082, 1085, 1086, 1089, 1090, 1093, 1094, 1098, 1101], "one": [158, 163, 173, 174, 177, 178, 182, 189, 274, 275, 279, 282, 288, 290, 311, 312, 313, 314, 325, 326, 329, 330, 344, 345, 351, 354, 357, 358, 359, 361, 362, 363, 366, 367, 369, 381, 403, 404, 414, 422, 429, 431, 434, 459, 488, 489, 490, 491, 503, 526, 656, 745, 746, 748, 749, 750, 774, 778, 795, 798, 801, 802, 863, 885, 888, 889, 891, 899, 901, 905, 907, 924, 926, 927, 929, 949, 950, 954, 963, 966, 967, 970, 983, 986, 987, 989, 992, 1038, 1040, 1048, 1049, 1051, 1053, 1054, 1055, 1056, 1057, 1069, 1070, 1073, 1097, 1111], "torch": [158, 163, 170, 345, 349, 354, 355, 357, 358, 359, 360, 361, 362, 364, 366, 367, 368, 369, 381, 400, 401, 422, 443, 444, 459, 500, 745, 807, 949, 963, 966, 1111], "tensorflow": [158, 163, 170, 173, 174, 345, 346, 359, 360, 361, 362, 364, 369, 381, 1111], "mxnet": [158, 163, 173, 346, 359, 360, 361, 364, 369, 1111], "either": [158, 163, 170, 177, 178, 344, 345, 347, 350, 351, 354, 355, 358, 359, 360, 364, 366, 367, 381, 403, 409, 509, 522, 525, 539, 542, 599, 624, 627, 640, 643, 644, 647, 652, 655, 656, 659, 678, 681, 699, 702, 707, 710, 711, 714, 732, 745, 766, 791, 795, 796, 863, 885, 888, 1009, 1010, 1011, 1012, 1069, 1086, 1089, 1094, 1132, 1143, 1144, 1145], "doesn": [158, 163, 344, 347, 351, 359, 364, 381], "matter": [158, 163, 172, 351], "been": [158, 163, 345, 350, 354, 355, 358, 359, 360, 362, 364, 380, 381, 459, 478, 745, 767, 768, 769, 1036, 1037], "ivy_np": [158, 163], "ivy_jax": [158, 163], "subsequ": [158, 164, 344, 351, 353, 354, 357, 361, 362, 368], "call": [158, 164, 170, 173, 179, 180, 182, 347, 349, 350, 351, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 364, 366, 367, 368, 369, 381, 459, 503, 745, 800, 805, 816, 819, 826, 1013, 1014, 1019, 1023, 1024, 1132, 1143, 1144, 1145, 1148, 1152], "ndarrai": [158, 164, 357, 359, 360, 361, 362, 366, 403, 405, 415, 745, 814], "Or": [158, 164, 367], "jaxlib": [158, 164, 344, 359, 360, 362, 366], "xla_extens": [158, 164, 359, 360, 362, 366], "devicearrai": [158, 164, 366], "try_import_ivy_jax": 158, "warn": [158, 165, 166, 167, 168, 169], "try_import_ivy_mxnet": 158, "try_import_ivy_numpi": 158, "try_import_ivy_tf": 158, "try_import_ivy_torch": 158, "unset_backend": [158, 355], "unset": [158, 170, 355, 364, 366], "adjust": [158, 170, 1069, 1090, 1093, 1098, 1101], "previous": [158, 170, 344, 347, 353, 354, 364, 745, 756], "implement": [158, 170, 345, 346, 350, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 364, 366, 367, 368, 369, 380, 381, 422, 428, 450, 459, 504, 509, 510, 513, 514, 517, 518, 521, 527, 530, 531, 534, 535, 539, 542, 575, 578, 579, 582, 596, 600, 603, 640, 643, 644, 647, 648, 651, 652, 655, 678, 681, 695, 698, 699, 702, 711, 714, 715, 718, 732, 863, 876, 878, 1053, 1054, 1055, 1057, 1058, 1059, 1062, 1064, 1067, 1069, 1074, 1077, 1078, 1081, 1082, 1085, 1111], "wa": [158, 170, 173, 177, 178, 351, 364, 366, 745, 816, 1013, 1026, 1069, 1074, 1077, 1078, 1081, 1082, 1085, 1086, 1089, 1090, 1093, 1094, 1098, 1101, 1102, 1103, 1106, 1107, 1110], "last": [158, 170, 174, 177, 178, 345, 351, 355, 381, 392, 397, 459, 478, 850, 860, 863, 867, 869, 873, 875, 889, 891, 921, 923, 924, 926, 933, 939, 942, 944, 947, 949, 967, 970, 983, 986, 988, 993, 996, 1058, 1059, 1062, 1064, 1067, 1102, 1103, 1106, 1107, 1110, 1132, 1142], "henc": [158, 170, 1053, 1054, 1055, 1057], "here": [158, 170, 344, 345, 346, 349, 351, 358, 362, 364, 365, 366, 367, 368, 369, 380, 381], "tensor": [158, 170, 172, 177, 178, 349, 354, 355, 357, 359, 360, 361, 362, 364, 366, 367, 368, 369, 381, 403, 412, 413, 422, 440, 509, 547, 550, 676, 677, 745, 798, 801, 802, 850, 858, 860, 863, 918, 920, 949, 963, 966, 979, 982, 988, 1036, 1037, 1048, 1051, 1111, 1132, 1140, 1142], "howev": [158, 170, 173, 344, 346, 350, 353, 354, 355, 357, 358, 359, 360, 361, 362, 366, 367, 368, 369, 381], "befor": [158, 170, 177, 178, 344, 345, 346, 350, 353, 357, 359, 360, 361, 364, 367, 381, 459, 503, 509, 741, 744, 850, 861, 862, 1009, 1010, 1011, 1013, 1025, 1053, 1054, 1055, 1057, 1069, 1086, 1089, 1094], "becom": [158, 170, 172, 174, 345, 351, 358, 364, 369, 381, 949, 950, 953], "swap": [158, 170, 949, 997, 1000], "python": [158, 170, 171, 172, 173, 344, 345, 347, 364, 366, 367, 381, 403, 404, 459, 498, 508, 509, 699, 702, 1111, 1117], "op": [158, 170, 349, 364, 381], "eagertensor": [158, 170], "def": [159, 346, 349, 351, 354, 358, 359, 360, 361, 362, 364, 366, 367, 368, 369, 423, 424, 425, 460, 467, 470, 820, 1111, 1124, 1127, 1130], "ml": [171, 173, 174, 343, 363, 364, 365, 367, 368, 369, 380, 1111, 1117], "explos": [171, 173, 1111], "A": [171, 172, 173, 174, 177, 178, 179, 180, 181, 347, 348, 353, 354, 358, 359, 360, 364, 367, 381, 403, 408, 415, 459, 468, 469, 503, 509, 691, 694, 737, 745, 781, 813, 863, 872, 899, 901, 908, 909, 911, 912, 949, 988, 993, 996, 1013, 1014, 1016, 1018, 1020, 1021, 1022, 1023, 1024, 1027, 1028, 1029, 1030, 1069, 1070, 1073, 1097, 1102, 1103, 1106, 1107, 1110, 1111, 1154, 1155], "huge": [171, 173, 367, 1111], "number": [171, 172, 177, 178, 179, 180, 181, 182, 344, 351, 358, 360, 361, 364, 367, 369, 400, 401, 402, 403, 404, 405, 408, 412, 413, 414, 415, 422, 429, 441, 442, 445, 447, 448, 450, 459, 495, 496, 497, 509, 522, 539, 542, 571, 574, 586, 604, 607, 608, 611, 676, 677, 678, 681, 695, 698, 699, 702, 703, 706, 707, 710, 741, 744, 745, 746, 749, 772, 781, 782, 797, 815, 818, 850, 861, 863, 872, 876, 878, 893, 895, 908, 912, 924, 926, 949, 950, 953, 959, 962, 971, 974, 975, 978, 983, 986, 988, 993, 996, 1001, 1004, 1005, 1008, 1009, 1010, 1011, 1012, 1036, 1037, 1046, 1048, 1051, 1053, 1054, 1055, 1069, 1074, 1077, 1078, 1081, 1082, 1085, 1086, 1089, 1090, 1093, 1094, 1098, 1101, 1102, 1103, 1106, 1107, 1110, 1111, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1141, 1142, 1143], "tool": [171, 174, 345, 365, 369, 380, 381, 1111], "have": [171, 172, 173, 174, 177, 178, 344, 345, 346, 347, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 364, 365, 366, 367, 368, 369, 380, 381, 392, 395, 403, 404, 406, 407, 410, 411, 414, 416, 417, 418, 419, 420, 421, 422, 428, 429, 430, 442, 459, 504, 509, 510, 513, 514, 517, 518, 521, 522, 525, 527, 530, 531, 534, 535, 538, 539, 542, 543, 546, 547, 550, 551, 554, 555, 558, 559, 562, 563, 566, 567, 570, 571, 574, 575, 578, 579, 582, 583, 586, 588, 591, 596, 599, 600, 603, 604, 607, 608, 611, 612, 615, 616, 619, 620, 623, 624, 627, 628, 631, 632, 635, 636, 639, 640, 643, 644, 647, 648, 651, 652, 655, 656, 659, 660, 663, 664, 667, 668, 671, 672, 675, 678, 681, 683, 686, 687, 690, 695, 698, 699, 702, 703, 706, 707, 710, 711, 714, 715, 718, 719, 722, 723, 726, 727, 731, 732, 736, 740, 741, 744, 745, 758, 760, 767, 768, 769, 771, 819, 831, 848, 850, 862, 863, 864, 866, 867, 869, 870, 873, 875, 876, 878, 879, 881, 882, 884, 885, 888, 893, 895, 896, 898, 899, 901, 902, 904, 905, 907, 909, 911, 912, 914, 915, 917, 918, 920, 921, 923, 924, 926, 927, 929, 933, 934, 937, 939, 942, 944, 947, 949, 950, 953, 955, 958, 963, 966, 967, 970, 971, 974, 975, 978, 983, 986, 989, 992, 993, 996, 997, 1000, 1036, 1038, 1039, 1047, 1048, 1049, 1050, 1051, 1053, 1054, 1055, 1057, 1058, 1059, 1062, 1064, 1067, 1069, 1074, 1077, 1078, 1081, 1082, 1085, 1086, 1089, 1090, 1093, 1094, 1098, 1101, 1102, 1103, 1106, 1107, 1110, 1111], "explod": [171, 172, 1111], "onto": [171, 172, 459, 488, 489, 1013, 1019, 1025, 1111], "scene": [171, 172, 348, 363, 365, 819, 822, 824, 827, 829, 832, 834, 836, 838, 840, 842, 1111], "b": [171, 174, 179, 180, 182, 187, 189, 206, 207, 208, 223, 225, 262, 274, 275, 278, 279, 282, 288, 290, 294, 299, 307, 308, 311, 312, 313, 314, 325, 326, 329, 330, 343, 348, 351, 354, 355, 358, 363, 364, 365, 367, 368, 369, 379, 422, 431, 433, 434, 435, 459, 481, 509, 522, 524, 526, 527, 530, 538, 543, 547, 550, 567, 570, 571, 573, 574, 579, 591, 604, 606, 608, 615, 616, 619, 656, 683, 686, 687, 690, 703, 706, 719, 722, 723, 726, 732, 733, 735, 740, 745, 746, 748, 749, 750, 753, 754, 762, 763, 770, 773, 774, 776, 777, 778, 815, 850, 853, 856, 857, 862, 863, 864, 866, 867, 869, 870, 899, 901, 909, 911, 918, 920, 930, 932, 933, 934, 937, 949, 950, 952, 953, 954, 963, 966, 967, 970, 975, 978, 983, 985, 986, 987, 993, 996, 997, 1000, 1031, 1032, 1035, 1036, 1038, 1040, 1041, 1042, 1044, 1048, 1050, 1051, 1052, 1058, 1059, 1062, 1069, 1070, 1073, 1074, 1077, 1097, 1102, 1103, 1106, 1111, 1117], "why": [171, 173, 345, 358, 361, 362, 366, 1111], "unifi": [171, 173, 177, 178, 357, 364, 381, 459, 488, 489, 490, 491, 503, 1111], "should": [171, 173, 177, 178, 179, 180, 181, 341, 342, 344, 345, 346, 347, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 366, 367, 368, 400, 401, 403, 414, 418, 419, 422, 430, 459, 509, 510, 513, 514, 517, 518, 521, 522, 525, 527, 530, 531, 534, 535, 538, 539, 542, 543, 546, 547, 550, 551, 554, 555, 558, 559, 562, 563, 566, 567, 570, 571, 574, 575, 578, 579, 582, 583, 596, 599, 600, 603, 604, 620, 623, 624, 627, 628, 631, 632, 635, 640, 643, 644, 647, 652, 655, 656, 659, 660, 663, 664, 667, 668, 671, 672, 675, 678, 681, 687, 690, 695, 698, 699, 702, 707, 710, 711, 714, 715, 718, 719, 722, 723, 726, 727, 731, 732, 736, 740, 741, 744, 745, 756, 789, 798, 819, 822, 824, 827, 829, 832, 834, 836, 838, 840, 842, 850, 862, 863, 864, 866, 867, 869, 870, 873, 875, 882, 884, 885, 888, 893, 895, 899, 901, 902, 904, 905, 907, 909, 911, 912, 918, 920, 921, 923, 924, 926, 927, 929, 949, 979, 982, 1036, 1047, 1048, 1049, 1050, 1053, 1054, 1055, 1057, 1069, 1070, 1073, 1074, 1077, 1078, 1081, 1086, 1089, 1090, 1093, 1094, 1097, 1098, 1101, 1111], "them": [171, 172, 173, 174, 353, 355, 357, 358, 364, 366, 367, 368, 381, 1111], "c": [171, 173, 174, 182, 288, 329, 330, 343, 348, 351, 354, 358, 363, 364, 365, 367, 381, 509, 687, 690, 745, 753, 754, 762, 815, 819, 821, 822, 824, 827, 829, 832, 834, 836, 838, 840, 842, 850, 856, 949, 993, 996, 1038, 1040, 1048, 1051, 1069, 1070, 1073, 1090, 1093, 1097, 1098, 1101, 1111, 1117], "standard": [171, 348, 349, 350, 352, 353, 357, 361, 362, 381, 403, 414, 422, 431, 434, 442, 509, 522, 527, 530, 547, 550, 567, 570, 571, 574, 579, 604, 687, 690, 703, 706, 719, 722, 723, 726, 732, 863, 870, 949, 963, 966, 967, 970, 983, 986, 1031, 1032, 1035, 1036, 1041, 1053, 1054, 1055, 1058, 1059, 1062, 1069, 1074, 1077, 1090, 1093, 1098, 1101, 1102, 1103, 1106, 1111, 1117, 1146, 1147], "re": [171, 172, 173, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 366, 369, 381, 459, 503, 745, 767, 863, 918, 920, 949, 983, 986, 1048, 1052, 1111], "collabor": [171, 172, 173, 1111], "consortium": [171, 173, 1111, 1117], "data": [171, 173, 177, 178, 179, 180, 181, 348, 349, 350, 354, 356, 358, 360, 361, 362, 366, 403, 404, 405, 406, 407, 408, 409, 410, 411, 414, 415, 416, 417, 418, 419, 420, 421, 426, 427, 428, 430, 431, 434, 436, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 454, 458, 459, 461, 462, 463, 464, 465, 466, 471, 472, 473, 475, 509, 510, 513, 514, 517, 518, 521, 522, 525, 527, 530, 531, 534, 535, 538, 539, 542, 543, 546, 547, 550, 551, 554, 555, 558, 559, 562, 563, 566, 567, 570, 571, 574, 575, 578, 579, 582, 583, 586, 588, 591, 596, 599, 600, 603, 604, 607, 608, 611, 612, 615, 616, 619, 620, 623, 624, 627, 628, 631, 632, 635, 636, 639, 640, 643, 644, 647, 652, 655, 656, 659, 660, 663, 664, 667, 668, 671, 672, 675, 678, 681, 687, 690, 695, 698, 699, 702, 707, 710, 711, 714, 715, 718, 719, 722, 723, 726, 727, 731, 732, 736, 740, 741, 744, 745, 753, 754, 791, 792, 794, 811, 819, 831, 848, 850, 859, 863, 864, 866, 867, 869, 870, 873, 875, 876, 878, 879, 881, 882, 884, 885, 888, 893, 895, 896, 898, 899, 901, 902, 904, 905, 907, 909, 911, 912, 918, 920, 921, 923, 924, 926, 927, 929, 949, 963, 966, 967, 970, 971, 974, 979, 982, 983, 986, 989, 992, 993, 996, 1036, 1047, 1048, 1049, 1050, 1051, 1058, 1059, 1062, 1069, 1074, 1077, 1078, 1081, 1082, 1085, 1086, 1089, 1090, 1093, 1094, 1098, 1101, 1102, 1103, 1106, 1107, 1110, 1111, 1117, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143], "api": [171, 172, 344, 345, 348, 350, 351, 353, 354, 356, 357, 359, 360, 361, 362, 363, 365, 367, 381, 403, 414, 422, 431, 434, 509, 522, 527, 530, 547, 550, 567, 570, 571, 574, 579, 604, 687, 690, 703, 706, 719, 722, 723, 726, 732, 863, 870, 949, 963, 966, 967, 970, 983, 986, 1053, 1054, 1055, 1058, 1059, 1062, 1069, 1074, 1077, 1102, 1103, 1106, 1111, 1117], "open": [172, 173, 174, 343, 344, 347, 350, 380, 403, 404, 1036, 1038, 1039, 1042, 1044, 1111], "project": [172, 173, 174, 344, 345, 347, 349, 355, 366, 368, 380, 381, 1036, 1037, 1041, 1042, 1044], "grown": 172, "consider": [172, 351, 362], "recent": [172, 173, 344, 345], "year": [172, 174, 381, 1111], "especi": [172, 344], "deep": [172, 177, 178, 343, 345, 346, 363, 367, 1111], "learn": [172, 173, 344, 346, 348, 354, 363, 369, 380, 509, 612, 819, 822, 824, 827, 829, 832, 834, 836, 838, 840, 842, 1009, 1010, 1011, 1012, 1111, 1148, 1149, 1150, 1151, 1152, 1153], "can": [172, 173, 174, 343, 344, 345, 348, 349, 350, 351, 352, 353, 354, 355, 358, 359, 360, 361, 362, 363, 364, 366, 367, 368, 369, 380, 381, 403, 405, 415, 422, 431, 434, 459, 501, 502, 503, 863, 882, 949, 979, 982, 1036, 1038, 1039, 1111, 1117], "seen": [172, 173, 351, 366, 367], "rapidli": 172, "increas": [172, 459, 483, 487, 491, 949, 959, 962, 1005, 1008, 1013, 1025], "github": [172, 345, 346, 350, 353], "repo": [172, 173, 174, 344, 345, 352, 364, 366, 367, 368, 369, 380, 1111, 1117], "term": [172, 345, 358, 850, 860, 1132, 1142], "time": [172, 173, 174, 344, 345, 346, 353, 354, 358, 359, 362, 364, 367, 369, 381, 819, 822, 824, 832, 834, 850, 860, 949, 1001, 1004, 1009, 1010, 1011, 1012, 1048, 1049, 1050, 1053, 1054, 1055, 1132, 1143, 1144, 1145], "These": [172, 173, 174, 345, 350, 351, 353, 354, 358, 359, 361, 362, 364, 365, 367, 368, 369, 381, 863, 876, 878, 1111, 1117], "written": [172, 344, 349, 350, 357, 361, 362, 364, 366, 369, 381], "mani": [172, 173, 174, 177, 178, 344, 345, 346, 350, 351, 354, 356, 357, 358, 359, 360, 361, 362, 364, 366, 367, 381, 949, 988], "differ": [172, 173, 174, 177, 178, 179, 180, 181, 344, 345, 348, 349, 350, 351, 353, 354, 357, 358, 360, 361, 362, 364, 365, 366, 367, 368, 369, 381, 422, 442, 459, 480, 481, 484, 485, 509, 522, 678, 681, 727, 731, 850, 859, 949, 993, 996, 1069, 1086, 1089, 1094, 1111], "while": [172, 173, 177, 178, 179, 180, 181, 344, 345, 351, 355, 361, 368, 369, 381, 509, 664, 667, 668, 671, 1053, 1054, 1069, 1078, 1081], "wonder": [172, 174, 366], "thing": [172, 173, 174, 344, 345, 346, 355, 366, 367], "research": [172, 380], "develop": [172, 173, 174, 343, 344, 345, 346, 380, 381, 1111], "consid": [172, 173, 177, 178, 349, 354, 365, 366, 367, 509, 664, 667, 668, 671, 1053, 1054, 1055, 1057], "speed": 172, "evolv": 172, "sharabl": 172, "code": [172, 173, 174, 177, 178, 179, 180, 181, 344, 345, 346, 347, 348, 350, 351, 354, 355, 356, 357, 358, 361, 362, 363, 364, 365, 366, 367, 368, 369, 379, 381, 392, 394, 395, 396, 397, 398, 399, 459, 481, 504, 509, 567, 570, 723, 726, 850, 856, 857, 1053, 1054, 1055, 1058, 1059, 1062, 1069, 1070, 1073, 1097, 1111, 1117], "significantli": 172, "hinder": [172, 362], "librari": [172, 173, 174, 364, 369, 379, 381, 459, 504, 509, 600, 603, 664, 667, 668, 671, 863, 876, 878, 1053, 1054, 1055, 1057, 1069, 1074, 1077, 1078, 1081, 1082, 1085, 1111], "outdat": 172, "month": 172, "rigor": 172, "maintain": [172, 345, 1058, 1059, 1062, 1064, 1067], "against": [172, 177, 178, 353, 381, 422, 429, 863, 884, 885, 888, 889, 891, 893, 895, 902, 904, 1048, 1049], "newest": 172, "version": [172, 173, 174, 344, 350, 364, 366, 863, 876, 878, 1111], "For": [172, 173, 174, 344, 345, 346, 347, 348, 349, 350, 351, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 364, 366, 367, 368, 369, 380, 381, 403, 404, 414, 509, 510, 513, 514, 517, 518, 521, 522, 525, 527, 530, 531, 534, 535, 539, 542, 571, 574, 575, 578, 579, 582, 596, 599, 600, 603, 604, 640, 643, 644, 647, 652, 655, 656, 659, 678, 681, 695, 698, 699, 702, 703, 706, 711, 714, 715, 718, 719, 722, 732, 741, 744, 819, 831, 848, 863, 912, 921, 923, 949, 950, 953, 993, 996, 1053, 1054, 1055, 1057, 1069, 1074, 1077, 1082, 1085, 1094, 1121, 1122], "softwar": [172, 173, 344, 345], "pipelin": [172, 357, 369], "where": [172, 173, 174, 177, 178, 179, 180, 343, 344, 345, 346, 347, 350, 354, 355, 357, 358, 359, 360, 361, 364, 367, 368, 369, 381, 403, 410, 411, 414, 509, 539, 542, 596, 648, 651, 678, 681, 695, 698, 745, 785, 789, 798, 863, 876, 878, 884, 893, 895, 902, 904, 905, 907, 912, 914, 915, 917, 921, 923, 924, 926, 949, 950, 953, 959, 962, 963, 966, 971, 974, 993, 996, 1005, 1008, 1013, 1014, 1024, 1036, 1037, 1048, 1051, 1069, 1090, 1093, 1098, 1101, 1102, 1103, 1106, 1107, 1110, 1111], "rapid": [172, 173, 344], "prototyp": 172, "vital": [172, 369], "signific": [172, 173, 381], "bottleneck": 172, "new": [172, 173, 174, 177, 178, 343, 344, 345, 346, 347, 348, 349, 350, 351, 353, 356, 358, 359, 361, 363, 366, 369, 380, 403, 406, 409, 410, 411, 416, 417, 420, 421, 422, 454, 509, 538, 543, 546, 648, 651, 691, 694, 736, 737, 740, 745, 767, 768, 769, 772, 773, 774, 777, 801, 802, 803, 804, 809, 810, 819, 822, 824, 827, 829, 832, 834, 836, 838, 840, 842, 949, 963, 966, 979, 982, 993, 996, 1013, 1018, 1029, 1030, 1031, 1032, 1035, 1111, 1121, 1122, 1132, 1142, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153], "futur": [172, 174, 344, 345, 366, 381, 863, 876, 878], "avail": [172, 177, 178, 344, 345, 350, 360, 381, 459, 478, 494, 495, 496, 506, 745, 768], "specif": [172, 177, 178, 346, 354, 357, 358, 359, 360, 361, 362, 364, 365, 366, 368, 369, 380, 381, 422, 450, 459, 501, 504, 509, 664, 667, 668, 671, 745, 767, 768, 769, 796, 863, 876, 878, 918, 920, 949, 993, 996, 1009, 1010, 1011, 1012, 1036, 1037, 1069, 1074, 1077, 1078, 1081, 1082, 1085, 1111, 1114, 1116, 1117, 1144, 1145], "quickli": [172, 174, 344, 345, 367, 368], "obsolet": [172, 174], "user": [172, 173, 344, 345, 347, 348, 353, 355, 358, 361, 363, 381, 1132, 1143, 1144, 1145], "constantli": 172, "invent": 172, "wheel": 172, "desir": [172, 177, 178, 422, 428, 431, 434, 459, 504, 745, 785, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143], "provid": [172, 177, 178, 344, 345, 350, 351, 354, 357, 358, 359, 360, 361, 362, 364, 368, 380, 381, 400, 401, 403, 414, 422, 437, 438, 439, 446, 450, 458, 459, 478, 745, 766, 798, 802, 819, 822, 824, 827, 829, 832, 834, 836, 838, 840, 842, 863, 924, 926, 949, 967, 970, 993, 996, 1048, 1049, 1069, 1090, 1093, 1098, 1101, 1102, 1103, 1106, 1107, 1110, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1141, 1142, 1143, 1148, 1149, 1150, 1151, 1152, 1153], "simultan": [172, 174], "modern": [172, 173], "simpl": [172, 344, 345, 349, 350, 351, 353, 354, 357, 358, 359, 360, 361, 364, 366, 368, 369, 381, 745, 770], "scalabl": [172, 364], "must": [172, 174, 177, 178, 179, 180, 181, 344, 345, 346, 349, 350, 351, 354, 357, 358, 359, 360, 362, 364, 368, 369, 392, 395, 403, 404, 406, 407, 408, 410, 411, 414, 416, 417, 418, 419, 420, 421, 422, 428, 429, 430, 459, 488, 489, 490, 491, 503, 504, 509, 510, 513, 514, 517, 518, 521, 522, 525, 527, 530, 531, 534, 535, 538, 539, 542, 543, 546, 547, 550, 551, 554, 555, 558, 559, 562, 563, 566, 567, 570, 571, 574, 575, 578, 579, 582, 583, 586, 588, 591, 596, 599, 600, 603, 604, 607, 608, 611, 612, 615, 616, 619, 620, 623, 624, 627, 628, 631, 632, 635, 636, 639, 640, 643, 644, 647, 648, 651, 652, 655, 656, 659, 660, 663, 664, 667, 668, 671, 672, 675, 676, 677, 678, 681, 683, 686, 687, 690, 695, 698, 699, 702, 703, 706, 707, 710, 711, 714, 715, 718, 719, 722, 723, 726, 727, 731, 732, 736, 740, 741, 744, 745, 758, 760, 771, 802, 863, 864, 866, 867, 869, 870, 873, 875, 876, 878, 879, 881, 882, 884, 885, 888, 893, 895, 896, 898, 899, 901, 902, 904, 905, 907, 909, 911, 912, 918, 920, 921, 923, 924, 926, 927, 929, 933, 934, 937, 939, 942, 944, 947, 949, 950, 953, 955, 958, 963, 966, 967, 970, 971, 974, 975, 978, 983, 986, 989, 992, 993, 996, 997, 1000, 1036, 1038, 1039, 1046, 1048, 1049, 1050, 1051, 1053, 1054, 1055, 1057, 1058, 1059, 1062, 1064, 1067, 1069, 1074, 1077, 1078, 1081, 1082, 1085, 1086, 1089, 1090, 1093, 1094, 1098, 1101, 1102, 1103, 1106, 1107, 1110, 1148, 1152], "determin": [172, 177, 178, 350, 354, 358, 359, 360, 422, 431, 434, 436, 441, 446, 447, 448, 458, 459, 494, 495, 496, 506, 509, 514, 517, 518, 521, 522, 525, 527, 530, 531, 534, 535, 538, 539, 542, 543, 546, 547, 550, 555, 558, 559, 562, 563, 566, 567, 570, 575, 578, 579, 582, 583, 596, 599, 600, 603, 620, 623, 624, 627, 628, 631, 640, 643, 644, 647, 652, 655, 656, 659, 672, 675, 678, 681, 695, 698, 699, 702, 711, 714, 715, 718, 719, 722, 732, 736, 740, 745, 746, 749, 753, 754, 784, 786, 790, 791, 792, 793, 794, 811, 818, 819, 831, 850, 861, 863, 864, 866, 867, 869, 870, 872, 873, 875, 882, 884, 885, 888, 893, 895, 899, 901, 902, 904, 908, 909, 911, 921, 923, 924, 926, 927, 929, 1009, 1010, 1011, 1012, 1053, 1054, 1055, 1057, 1102, 1103, 1106, 1107, 1110], "exactli": [172, 174, 351, 358, 360, 1111, 1117], "common": [172, 177, 178, 345, 346, 351, 354, 356, 358, 360, 381], "ground": [172, 353], "li": 172, "between": [172, 177, 178, 179, 180, 181, 351, 353, 354, 357, 358, 362, 363, 365, 366, 367, 369, 380, 403, 404, 422, 442, 509, 539, 542, 695, 698, 933, 934, 937, 939, 942, 944, 947, 949, 963, 966, 993, 996, 1013, 1019, 1036, 1038, 1039, 1053, 1054, 1055, 1057, 1111, 1148, 1150], "find": [172, 177, 178, 344, 345, 364, 367, 1053, 1054, 1055, 1057, 1111], "exist": [172, 173, 177, 178, 179, 180, 344, 346, 347, 350, 351, 352, 353, 354, 355, 356, 361, 364, 381, 745, 766, 1148, 1152], "essenti": [172, 173, 346, 351, 354, 360], "order": [172, 177, 178, 179, 180, 181, 344, 345, 347, 350, 351, 355, 357, 358, 359, 360, 362, 366, 367, 369, 381, 509, 539, 542, 819, 822, 824, 827, 829, 832, 834, 836, 838, 840, 842, 863, 876, 878, 889, 891, 912, 914, 915, 917, 927, 929, 949, 967, 970, 1009, 1010, 1011, 1048, 1051, 1053, 1054, 1055, 1057, 1058, 1059, 1062, 1064, 1067, 1154, 1155], "design": [172, 173, 348, 361, 364, 366, 381], "univers": 172, "abstract": [172, 358, 368, 381, 459, 474, 1148, 1152], "In": [172, 174, 344, 345, 349, 350, 351, 354, 355, 358, 359, 360, 361, 362, 364, 366, 367, 368, 369, 380, 381, 459, 498, 504, 505, 508, 509, 522, 678, 681, 699, 702, 745, 751, 789, 949, 979, 982, 1036, 1042, 1044, 1111], "languag": [172, 174, 364], "first": [172, 173, 344, 345, 347, 351, 354, 357, 358, 362, 364, 366, 367, 369, 400, 401, 403, 412, 413, 422, 449, 454, 459, 478, 490, 509, 522, 525, 547, 550, 555, 558, 559, 562, 563, 566, 567, 570, 586, 588, 591, 599, 607, 608, 611, 615, 616, 619, 632, 635, 636, 639, 656, 659, 660, 663, 668, 671, 672, 675, 678, 681, 687, 690, 695, 698, 727, 731, 745, 753, 819, 826, 863, 867, 869, 873, 875, 876, 878, 885, 888, 899, 901, 905, 907, 912, 918, 920, 924, 926, 949, 955, 958, 983, 986, 993, 996, 997, 1000, 1009, 1010, 1011, 1012, 1013, 1014, 1023, 1024, 1036, 1047, 1048, 1049, 1050, 1053, 1054, 1055, 1132, 1143, 1144, 1145, 1148, 1152], "see": [172, 343, 344, 345, 346, 352, 354, 358, 360, 362, 366, 367, 380, 381, 403, 404, 409, 412, 413, 422, 430, 450, 509, 522, 525, 547, 550, 555, 558, 559, 562, 563, 566, 567, 570, 583, 599, 600, 603, 632, 635, 656, 659, 668, 671, 672, 675, 678, 681, 687, 690, 695, 698, 699, 702, 727, 731, 863, 884, 893, 895, 902, 904, 909, 911, 924, 926, 927, 929, 1048, 1050, 1053, 1054, 1055, 1057, 1069, 1074, 1077, 1078, 1081, 1082, 1085, 1086, 1089, 1090, 1093, 1094, 1098, 1101, 1102, 1103, 1106, 1107, 1110, 1111], "clear": [172, 173, 174, 345, 346, 351, 353, 359, 360, 364, 366, 459, 477], "front": [172, 363, 364, 367, 1111, 1117], "runner": 172, "look": [172, 344, 345, 347, 349, 351, 354, 355, 358, 359, 360, 362, 364, 366, 368, 369, 1111], "littl": [172, 366], "deeper": [172, 345, 348, 363, 459, 483, 487, 491, 1013, 1024, 1025], "follow": [172, 173, 177, 178, 344, 345, 346, 347, 349, 350, 351, 353, 355, 357, 358, 359, 360, 361, 363, 364, 366, 367, 368, 369, 381, 422, 445, 459, 503, 509, 699, 702, 745, 787, 788, 789, 809, 810, 819, 822, 824, 827, 829, 832, 834, 836, 838, 840, 842, 850, 861, 862, 863, 905, 907, 927, 929, 1013, 1019, 1025, 1053, 1054, 1055, 1057, 1111, 1132, 1142, 1148, 1152], "core": [172, 344, 346, 360, 364, 369, 459, 495, 1111], "principl": 172, "oper": [172, 177, 178, 179, 180, 182, 344, 346, 350, 351, 354, 357, 358, 360, 361, 367, 368, 403, 412, 413, 422, 450, 509, 522, 563, 566, 567, 570, 591, 615, 616, 619, 683, 686, 687, 690, 699, 702, 723, 726, 745, 755, 767, 768, 769, 811, 819, 822, 824, 827, 829, 832, 834, 836, 838, 840, 842, 850, 851, 852, 853, 854, 855, 856, 857, 859], "expos": [172, 364, 368, 745, 761], "almost": [172, 345, 358, 365, 367], "ident": [172, 174, 177, 178, 354, 356, 358, 366, 367, 381, 459, 493, 1013, 1026, 1111], "uniqu": [172, 354, 358, 381, 459, 468, 469, 1009, 1010, 1011, 1012, 1013, 1019, 1053, 1054, 1055, 1056, 1057], "syntax": [172, 173], "There": [172, 344, 345, 351, 354, 357, 358, 359, 364, 367, 381], "onli": [172, 177, 178, 343, 344, 345, 349, 351, 353, 354, 355, 357, 358, 359, 360, 361, 362, 364, 366, 367, 368, 369, 379, 381, 459, 499, 509, 664, 667, 668, 671, 863, 885, 888, 905, 907, 949, 967, 970, 1013, 1014, 1015, 1023, 1024, 1048, 1049, 1050, 1069, 1078, 1081, 1111, 1148, 1149, 1150, 1151, 1152, 1153], "wai": [172, 173, 344, 355, 361, 366, 367, 368, 369, 381], "unsurprisingli": [172, 351], "fundament": [172, 358, 364], "consist": [172, 177, 178, 357, 361, 459, 491, 863, 876, 878, 1069, 1070, 1073, 1097, 1144, 1145], "each": [172, 173, 174, 177, 178, 179, 180, 181, 182, 345, 346, 348, 349, 350, 351, 352, 353, 354, 356, 357, 358, 359, 361, 362, 363, 364, 366, 367, 369, 380, 381, 392, 395, 396, 398, 403, 414, 422, 429, 459, 468, 469, 480, 481, 482, 483, 484, 485, 486, 490, 503, 509, 510, 513, 514, 517, 518, 521, 522, 525, 527, 530, 531, 534, 535, 538, 539, 542, 543, 546, 547, 550, 551, 554, 555, 558, 559, 562, 563, 566, 567, 570, 571, 574, 575, 578, 579, 582, 583, 586, 588, 591, 596, 599, 600, 603, 604, 607, 608, 611, 612, 615, 616, 619, 620, 623, 624, 627, 628, 631, 632, 635, 636, 639, 640, 643, 644, 647, 648, 651, 652, 655, 656, 659, 660, 663, 664, 667, 668, 671, 672, 675, 678, 681, 683, 686, 687, 690, 691, 694, 695, 698, 699, 702, 703, 706, 707, 710, 711, 714, 715, 718, 719, 722, 723, 726, 727, 731, 732, 736, 740, 741, 744, 745, 746, 749, 819, 822, 824, 827, 829, 832, 834, 836, 838, 840, 842, 850, 851, 852, 853, 854, 855, 856, 857, 858, 863, 864, 866, 867, 869, 870, 876, 878, 884, 885, 888, 893, 895, 896, 898, 902, 904, 909, 911, 912, 949, 959, 962, 975, 978, 983, 986, 988, 993, 996, 1001, 1004, 1005, 1008, 1013, 1019, 1026, 1036, 1037, 1048, 1051, 1053, 1054, 1055, 1069, 1070, 1073, 1097, 1111, 1117, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1143, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155], "veri": [172, 173, 344, 345, 349, 351, 353, 354, 358, 360, 361, 362, 365, 367, 368, 369, 381, 1111], "similar": [172, 349, 358, 359, 360, 367, 381, 509, 699, 702, 850, 861, 1132, 1143], "convent": [172, 380, 863, 885, 888, 1069, 1070, 1073, 1097], "those": [172, 177, 178, 344, 345, 346, 358, 364, 369, 403, 404, 819, 848, 863, 905, 907, 912, 949, 950, 953], "introduc": [172, 358, 367, 949, 983, 986, 1053, 1054], "2006": 172, "therefor": [172, 345, 349, 350, 351, 352, 353, 354, 357, 358, 359, 360, 361, 362, 364, 366, 368, 381, 422, 431, 434, 509, 522, 527, 530, 571, 574, 604, 687, 690, 719, 722, 723, 726, 732, 745, 773, 850, 853, 862, 949, 983, 986, 1031, 1032, 1035, 1069, 1074, 1077, 1102, 1103, 1106], "present": [172, 177, 178, 345, 352, 358, 359, 360, 361, 362, 364], "itself": [172, 344, 345, 358, 361, 362, 368, 380, 381, 745, 751, 1013, 1025], "cut": 172, "cloth": 172, "adher": [172, 173, 350, 352, 364, 369], "semant": [172, 364, 369, 509, 699, 702], "up": [172, 173, 174, 343, 345, 346, 347, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 364, 365, 366, 367, 368, 369, 380, 381], "hopefulli": [172, 173, 174, 344, 345, 346, 347, 348, 349, 350, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 364, 366, 367, 368, 369, 380], "paint": [172, 364], "pictur": [172, 364], "how": [172, 174, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 365, 366, 367, 368, 369, 380, 381, 1111, 1117, 1132, 1143, 1144, 1145], "pleas": [172, 173, 174, 344, 345, 346, 347, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 364, 366, 367, 368, 369, 380, 1111], "discuss": [172, 173, 174, 343, 344, 345, 346, 347, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 364, 366, 367, 368, 369, 380, 381, 1111], "faq": [172, 173, 174, 364, 366, 367, 368, 369, 380], "reach": [172, 173, 174, 344, 345, 346, 347, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 364, 366, 367, 368, 369, 380, 459, 483, 487, 491, 1013, 1025], "discord": [172, 173, 174, 344, 345, 346, 347, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 364, 366, 367, 368, 369, 380, 1111], "you": [172, 173, 174, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 366, 367, 368, 369, 380, 381, 1111, 1117], "question": [172, 173, 174, 344, 345, 351, 353, 364, 366, 367, 368, 369, 380, 381, 1111], "central": 173, "goal": [173, 346], "being": [173, 174, 177, 178, 344, 345, 351, 353, 356, 357, 358, 359, 360, 361, 362, 364, 367, 380, 381, 403, 404, 745, 800, 805, 1053, 1056, 1111], "would": [173, 344, 345, 347, 348, 350, 351, 353, 355, 356, 357, 358, 361, 362, 363, 364, 366, 368, 369, 381, 392, 397, 459, 504, 1111], "entir": [173, 174, 177, 178, 345, 351, 352, 353, 357, 358, 361, 366, 367, 368, 369, 381, 459, 503, 1069, 1074, 1077, 1078, 1081, 1082, 1085, 1086, 1089, 1090, 1093, 1094, 1098, 1101, 1102, 1103, 1106, 1107, 1110, 1132, 1141], "forgiven": 173, "rais": [173, 177, 178, 345, 361, 364, 366, 422, 430, 509, 596, 695, 698, 745, 755, 780, 789, 803, 810, 816, 863, 885, 888, 892, 924, 926, 949, 989, 992, 993, 996, 1048, 1051, 1069, 1074, 1077, 1082, 1085, 1102, 1103, 1106, 1107, 1110, 1144, 1145, 1148, 1152], "eyebrow": 173, "somehow": 173, "pytorch": [173, 174, 346, 354, 359, 360, 361, 362, 364, 366, 369, 381, 819, 822, 824, 827, 829, 832, 834, 836, 838, 840, 842, 1111, 1148, 1149, 1150, 1151, 1152, 1153], "other": [173, 177, 178, 179, 180, 182, 344, 345, 349, 350, 351, 353, 354, 357, 358, 361, 364, 366, 368, 369, 379, 380, 381, 400, 401, 403, 404, 509, 600, 603, 745, 746, 749, 751, 819, 826, 1036, 1042, 1044, 1053, 1056, 1069, 1090, 1093, 1098, 1101, 1111], "strong": [173, 381], "industri": 173, "back": [173, 357, 363, 364, 366, 381, 1111, 1117, 1144, 1145, 1148, 1152], "momentum": 173, "won": [173, 174, 345, 369], "ad": [173, 341, 342, 344, 345, 346, 349, 350, 351, 353, 354, 356, 357, 358, 359, 361, 362, 364, 368, 381, 745, 809, 810, 863, 876, 878, 949, 963, 966, 1154, 1155], "just": [173, 174, 344, 345, 350, 351, 353, 354, 361, 364, 366, 367, 381, 1069, 1070, 1073, 1097, 1132, 1141], "make": [173, 174, 344, 345, 346, 349, 350, 351, 352, 353, 354, 357, 358, 359, 360, 361, 362, 364, 366, 367, 369, 459], "problem": [173, 345, 357, 366], "even": [173, 174, 344, 345, 350, 354, 359, 360, 362, 366, 367, 368, 369, 381, 509, 695, 698, 703, 706], "wors": 173, "rather": [173, 177, 178, 349, 350, 353, 358, 369, 381, 403, 404, 459, 503, 745, 791, 792, 794, 819, 831], "funni": 173, "comic": 173, "strip": 173, "easi": [173, 344, 345, 354, 358], "feasibl": 173, "space": [173, 403, 404, 412, 413, 745, 772], "unlik": [173, 351, 358, 459], "charger": 173, "charact": 173, "encod": [173, 367, 745, 772], "instant": [173, 1111], "messag": [173, 345, 364, 366, 1157, 1158], "much": [173, 345, 349, 357, 358, 361, 364, 366, 367], "doe": [173, 177, 178, 345, 347, 348, 349, 350, 351, 353, 354, 355, 359, 361, 362, 364, 366, 367, 381, 509, 567, 570, 745, 789, 949, 988], "mandat": [173, 353, 361], "adopt": [173, 345, 357], "continu": [173, 174, 352, 353, 381], "own": [173, 174, 344, 350, 364, 381], "signatur": [173, 349, 350, 351, 358, 359, 360, 361, 362, 422, 431, 434, 509, 527, 530, 567, 570, 571, 574, 579, 604, 687, 690, 719, 722, 723, 726, 949, 963, 966, 983, 986, 1053, 1054, 1055, 1058, 1059, 1062, 1069, 1074, 1077], "replac": [173, 177, 178, 345, 347, 351, 353, 356, 358, 359, 360, 364, 366, 369, 381, 745, 801, 802, 949, 950, 953, 1036, 1037], "your": [173, 174, 343, 344, 346, 347, 349, 350, 367, 368, 381, 1111], "10": [173, 175, 176, 177, 178, 179, 180, 181, 182, 232, 284, 288, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 344, 347, 351, 358, 364, 366, 367, 403, 410, 413, 459, 509, 547, 550, 551, 554, 579, 591, 615, 616, 619, 644, 647, 719, 722, 745, 763, 773, 800, 805, 819, 832, 833, 834, 835, 850, 856, 863, 870, 873, 875, 899, 901, 918, 920, 949, 967, 970, 975, 978, 988, 1031, 1032, 1035, 1036, 1037, 1038, 1039, 1040, 1048, 1051, 1053, 1054, 1069, 1070, 1073, 1074, 1077, 1097, 1148, 1150], "100": [173, 174, 182, 288, 329, 330, 367, 368, 369, 381, 509, 719, 722, 1038, 1040, 1111], "despit": [173, 358, 360], "distinct": [173, 350, 358, 361, 363, 1053, 1054, 1055, 1057, 1111], "still": [173, 177, 178, 350, 353, 359, 366, 368, 381, 1111], "believ": [173, 345], "share": [173, 177, 178, 351, 353, 354, 355, 358, 364, 422, 454], "bring": [173, 364, 365], "benefit": [173, 174, 344, 345, 357, 358, 361, 366, 367, 381], "unrel": [173, 345], "what": [173, 174, 345, 348, 350, 351, 356, 358, 362, 363, 364, 366, 367, 368, 369, 380, 381, 1111], "again": [173, 174, 345, 349, 351, 358, 361, 367, 369, 381], "contrari": 173, "bumpi": 173, "road": 173, "allud": [173, 367], "most": [173, 177, 178, 344, 345, 349, 353, 354, 357, 358, 359, 360, 361, 362, 364, 366, 367, 368, 381, 863, 876, 878], "technolog": 173, "sector": [173, 509, 517, 518, 521, 531, 534, 538, 543, 546, 578, 582, 736, 740], "full": [173, 174, 179, 180, 345, 350, 359, 362, 364, 381, 403, 422, 442, 509, 591, 615, 616, 619, 850, 856, 863, 905, 907, 909, 911, 912, 1031, 1032, 1035], "success": 173, "reason": [173, 345, 349, 351, 354, 357, 358, 359, 361, 364, 366, 509, 699, 702], "build": [173, 343, 344, 354, 363, 365, 368, 369, 381, 1053, 1054, 1055, 1057, 1111, 1132, 1143, 1144, 1145], "custom": [173, 368], "comput": [173, 174, 177, 178, 344, 354, 358, 364, 367, 381, 459, 503, 509, 522, 547, 550, 559, 562, 567, 570, 588, 591, 592, 595, 612, 615, 616, 619, 632, 635, 636, 639, 660, 663, 664, 667, 668, 671, 672, 675, 678, 681, 683, 686, 687, 690, 745, 757, 758, 760, 763, 764, 819, 821, 822, 824, 826, 827, 829, 832, 834, 836, 838, 840, 842, 845, 847, 850, 851, 852, 853, 854, 855, 856, 857, 859, 861, 863, 864, 866, 867, 869, 872, 876, 878, 879, 881, 882, 885, 888, 889, 891, 905, 907, 908, 909, 911, 912, 924, 926, 927, 929, 933, 934, 937, 939, 942, 944, 947, 1013, 1019, 1053, 1054, 1055, 1057, 1069, 1070, 1073, 1074, 1077, 1078, 1081, 1082, 1085, 1086, 1089, 1090, 1093, 1094, 1097, 1098, 1101], "thank": [173, 367], "interoper": 173, "compon": [173, 364], "bio": [173, 344], "hardwar": [173, 344], "initi": [173, 177, 178, 179, 180, 181, 345, 355, 359, 360, 459, 850, 860, 1125, 1126, 1128, 1129, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1141, 1142, 1143, 1144, 1145, 1148, 1152], "pcie": 173, "interfac": [173, 369, 381], "motherboard": 173, "raid": 173, "storag": [173, 367], "virtual": [173, 345, 347], "bluetooth": 173, "wireless": 173, "exchang": 173, "btx": 173, "factor": [173, 459, 468, 501, 502, 503, 819, 821, 822, 824, 832, 834, 836, 838, 850, 851, 852, 853, 854, 855, 856, 857, 863, 864, 866, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1148, 1149, 1150, 1151], "sata": 173, "connect": [173, 344, 368, 369, 1132, 1142, 1143], "host": [173, 381], "bu": 173, "adapt": [173, 819, 836, 838, 1148, 1151], "html": [173, 347, 350, 422, 431, 434, 509, 527, 530, 567, 570, 571, 574, 579, 604, 687, 690, 719, 722, 723, 726, 949, 963, 966, 983, 986, 1053, 1054, 1055, 1058, 1059, 1062, 1069, 1074, 1077], "enabl": [173, 177, 178, 179, 180, 181, 344, 345, 353, 354, 357, 358, 361, 363, 364, 365, 367, 369, 381], "anyon": [173, 343, 381], "websit": 173, "tcp": 173, "ip": 173, "node": [173, 177, 178, 358, 1013, 1014, 1023, 1024], "commun": [173, 343, 345, 346, 381, 1111, 1117], "network": [173, 354, 358, 364, 368, 380, 850, 859, 1111, 1118, 1132, 1144, 1145], "smtp": 173, "possibl": [173, 343, 344, 345, 346, 350, 351, 353, 358, 359, 361, 364, 367, 380, 381, 745, 795, 813, 1069, 1074, 1077, 1082, 1085], "send": 173, "gmail": 173, "outlook": 173, "pop": 173, "email": 173, "ieee": [173, 402, 422, 442, 509, 522, 600, 603, 678, 681, 699, 702, 719, 722], "754": [173, 402, 422, 442, 509, 522, 600, 603, 678, 681, 699, 702, 719, 722], "allow": [173, 364, 381, 403, 412, 413, 745, 795, 1144, 1145], "calcul": [173, 177, 178, 179, 180, 181, 350, 509, 510, 513, 514, 517, 518, 521, 522, 525, 527, 530, 531, 534, 535, 539, 542, 575, 578, 579, 582, 583, 596, 599, 600, 603, 640, 643, 644, 647, 648, 651, 652, 655, 656, 659, 678, 681, 695, 698, 711, 714, 715, 718, 719, 722, 727, 731, 732, 933, 934, 937, 939, 942, 944, 947, 1069, 1074, 1077, 1078, 1081, 1082, 1085, 1086, 1089, 1090, 1093, 1094, 1098, 1101], "live": [173, 174], "depend": [173, 344, 345, 350, 356, 358, 359, 364, 381, 422, 428, 509, 510, 513, 514, 517, 518, 521, 527, 530, 531, 534, 535, 539, 542, 575, 578, 579, 582, 596, 600, 603, 640, 643, 644, 647, 648, 651, 652, 655, 695, 698, 711, 714, 715, 718, 732, 863, 876, 878, 905, 907, 909, 911, 912, 1048, 1052, 1058, 1059, 1062, 1064, 1067], "did": [173, 346, 369], "aris": [173, 381], "until": [173, 345, 381, 1111], "substanti": [173, 345, 353, 357], "innov": 173, "growth": 173, "usag": [173, 364, 459, 503], "relev": [173, 344, 346, 351, 358, 359, 367, 1148, 1149, 1150, 1151, 1152, 1153], "area": [173, 361, 379, 509, 517, 518, 521, 531, 534, 538, 543, 546, 578, 582, 736, 740, 1111], "necess": 173, "parti": [173, 381], "could": [173, 174, 344, 345, 351, 353, 358, 359, 361, 364, 366, 367, 368, 1053, 1054, 1055, 1057], "easili": [173, 345, 367, 368, 369, 381, 1111], "engag": [173, 343, 344, 345, 346, 347, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362], "regard": [173, 358, 459], "effect": [173, 350, 357, 358, 362, 381, 403, 414, 819, 840, 842, 1069, 1090, 1093, 1098, 1101], "2015": 173, "sinc": [173, 344, 345, 381], "alongsid": 173, "machin": [173, 344, 354, 380, 422, 442, 445, 509, 612, 863, 884, 893, 895, 902, 904], "given": [173, 174, 177, 178, 344, 345, 346, 347, 349, 350, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 364, 366, 368, 369, 380, 403, 404, 406, 412, 413, 459, 492, 498, 500, 501, 502, 503, 505, 508, 745, 763, 764, 774, 777, 801, 802, 817, 819, 821, 822, 824, 827, 829, 832, 834, 836, 838, 840, 842, 850, 851, 852, 853, 854, 855, 856, 857, 863, 930, 932, 933, 934, 937, 939, 942, 944, 947, 949, 950, 953, 963, 966, 967, 970, 975, 978, 983, 986, 988, 1001, 1004, 1013, 1020, 1021, 1036, 1038, 1039, 1041, 1042, 1044, 1047, 1058, 1064, 1067, 1121, 1122], "frame": [173, 380], "matur": [173, 381], "state": [173, 350, 362, 363, 364, 365, 367, 380, 509, 678, 681, 850, 860, 1111, 1118, 1119, 1120, 1121, 1122, 1123, 1125, 1126, 1128, 1129, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155], "than": [173, 177, 178, 345, 349, 351, 353, 358, 361, 364, 367, 368, 369, 381, 403, 404, 422, 442, 459, 503, 509, 514, 517, 518, 521, 527, 530, 539, 542, 555, 558, 563, 566, 571, 574, 578, 582, 586, 604, 607, 608, 611, 640, 643, 644, 647, 652, 655, 676, 695, 698, 699, 702, 707, 710, 719, 722, 741, 744, 745, 791, 792, 794, 819, 831, 863, 867, 869, 884, 885, 888, 893, 895, 902, 904, 927, 929, 949, 950, 953, 967, 970, 989, 992, 1036, 1042, 1044, 1053, 1054, 1055, 1057, 1069, 1086, 1089, 1090, 1093, 1094, 1098, 1101], "preced": [173, 368], "mention": [173, 344, 345, 351, 354, 361, 362], "aros": 173, "70": [173, 863, 899, 901, 1069, 1070, 1073, 1097], "80": [173, 863, 899, 901, 1069, 1070, 1073, 1097], "90": [173, 182, 288, 329, 330, 509, 567, 570, 703, 706, 863, 899, 901, 1038, 1040, 1069, 1070, 1073, 1097], "effort": [173, 343, 381], "stage": [173, 343, 345, 347, 348, 1111], "complet": [173, 177, 178, 345, 346, 357, 358, 366, 367, 863, 905, 907], "natur": [173, 351, 357, 358, 380, 509, 596, 640, 643, 648, 651, 863, 872, 908], "like": [173, 344, 345, 347, 348, 349, 350, 351, 353, 360, 361, 362, 363, 364, 366, 367, 368, 369, 380, 381, 819, 831, 1036, 1042, 1044, 1111], "certainli": 173, "mission": [173, 1111], "creat": [173, 177, 178, 343, 344, 345, 347, 359, 360, 361, 364, 365, 368, 379, 380, 403, 404, 405, 406, 407, 408, 410, 411, 412, 413, 415, 416, 417, 420, 421, 459, 468, 469, 745, 773, 774, 777, 798, 801, 802, 813, 819, 847, 1036, 1037, 1038, 1039, 1042, 1044, 1111, 1117, 1121, 1122, 1123, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155], "At": [173, 346], "process": [173, 174, 343, 344, 345, 347, 354, 358, 364, 369, 459, 468, 469, 498, 508], "ourselv": 173, "lead": [173, 174, 177, 178, 179, 180, 181, 381, 863, 905, 907, 912], "quansight": 173, "compani": 173, "made": [173, 345, 346, 358, 361, 364, 366], "organ": [173, 349, 354, 357, 358], "panda": 173, "scipi": 173, "conda": [173, 344, 347], "dask": [173, 1053, 1054, 1055, 1057], "apach": 173, "onnx": 173, "scikit": 173, "jupyt": 173, "aw": 173, "cupi": 173, "net": [173, 174, 364, 369], "sympi": 173, "rai": [173, 509, 539, 542], "modin": 173, "spyder": 173, "includ": [173, 177, 178, 345, 346, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 380, 381, 403, 404, 405, 415, 745, 784, 818, 863, 927, 929, 1013, 1014, 1036, 1042, 1044, 1048, 1050, 1069, 1074, 1077, 1078, 1081, 1082, 1085, 1086, 1089, 1090, 1093, 1094, 1098, 1101, 1102, 1103, 1106, 1107, 1110, 1114, 1116, 1132, 1142, 1143, 1146, 1147], "member": [173, 345], "googl": [173, 1111], "octoml": 173, "einop": [173, 177, 178, 745, 767, 768, 769], "further": [173, 174, 345, 347, 351, 357, 363, 367, 368, 1111], "sponsor": 173, "lg": 173, "electron": 173, "microsoft": 173, "d": [173, 174, 182, 288, 329, 330, 343, 344, 348, 358, 367, 745, 754, 762, 850, 851, 852, 853, 854, 855, 856, 857, 863, 873, 875, 899, 901, 1038, 1040, 1111, 1117], "shaw": 173, "intel": 173, "togeth": [173, 177, 178, 357, 358, 368, 369, 381, 1154, 1155], "major": [173, 359, 360, 381, 1048, 1051], "involv": [173, 343, 347, 348, 359, 369, 422, 450, 509, 522, 678, 681, 1111, 1117], "anoth": [173, 177, 178, 344, 345, 354, 358, 359, 366, 369, 403, 409, 422, 429, 431, 434], "promis": 173, "pursuit": 173, "unif": [173, 343, 366, 1111, 1117], "clearli": [173, 346, 351], "lot": [173, 174, 356, 366, 381], "thought": [173, 344, 345, 362], "care": [173, 345, 369], "attent": [173, 345, 357, 358, 850, 861, 862, 1132, 1143], "gone": [173, 363], "simplifi": [173, 364, 365, 366, 368], "compat": [173, 362, 381, 422, 430, 509, 522, 525, 539, 542, 547, 550, 555, 558, 559, 562, 563, 566, 567, 570, 583, 586, 588, 591, 599, 607, 608, 611, 615, 616, 619, 632, 635, 636, 639, 656, 659, 660, 663, 668, 671, 672, 675, 678, 681, 687, 690, 695, 698, 699, 702, 727, 731, 863, 884, 893, 895, 902, 904, 909, 911, 918, 920, 924, 926, 927, 929, 949, 979, 982, 1048, 1050, 1069, 1074, 1077, 1078, 1081, 1082, 1085, 1086, 1089, 1090, 1093, 1094, 1098, 1101, 1102, 1103, 1106, 1107, 1110, 1111], "excit": [173, 343, 348, 1111], "complianc": 173, "hope": [173, 381], "due": [173, 344, 358, 361, 509, 678, 681], "suit": [173, 344, 345, 348, 352, 353, 367, 380], "some": [173, 174, 177, 178, 344, 345, 346, 349, 350, 351, 354, 357, 358, 359, 360, 361, 362, 365, 366, 367, 368, 380, 381, 509, 600, 603, 819, 821, 822, 824, 827, 829, 832, 834, 836, 838, 840, 842, 848, 850, 858, 1111, 1132, 1140], "motiv": [173, 366], "great": [173, 174, 353, 364, 366], "convinc": 173, "celebr": 173, "encourag": [173, 380, 381, 1111, 1117], "foundat": 173, "point": [174, 345, 350, 351, 357, 361, 362, 364, 366, 367, 380, 402, 403, 404, 406, 408, 410, 416, 420, 422, 428, 442, 447, 450, 509, 514, 517, 518, 521, 522, 525, 527, 530, 531, 534, 535, 538, 539, 542, 543, 546, 567, 570, 571, 574, 575, 578, 579, 582, 583, 596, 599, 600, 603, 604, 640, 643, 644, 647, 652, 655, 656, 659, 678, 681, 695, 698, 699, 702, 703, 706, 711, 714, 715, 718, 719, 722, 732, 736, 740, 741, 744, 863, 864, 866, 870, 876, 878, 879, 881, 882, 884, 893, 895, 902, 904, 905, 907, 909, 911, 912, 927, 929, 1053, 1054, 1055, 1057, 1069, 1074, 1077, 1078, 1081, 1082, 1085, 1086, 1089, 1090, 1093, 1094, 1098, 1101], "mai": [174, 344, 345, 358, 366, 368, 403, 404, 409, 459, 504, 509, 588, 591, 615, 616, 619, 636, 639, 664, 667, 668, 671, 745, 766, 1053, 1054, 1055, 1057, 1058, 1059, 1062, 1064, 1067, 1069, 1074, 1077, 1078, 1081, 1082, 1085], "ask": [174, 364, 366, 381, 1111], "perfectli": 174, "happi": [174, 344, 381], "abund": 174, "better": [174, 345, 348, 363, 366, 367, 368], "ll": [174, 343, 345, 351, 358, 361, 367], "give": [174, 344, 345, 348, 350, 351, 355, 362, 366, 949, 979, 982], "two": [174, 179, 180, 182, 350, 351, 353, 357, 358, 363, 367, 369, 403, 404, 408, 414, 418, 419, 422, 449, 454, 509, 563, 566, 703, 706, 745, 753, 863, 864, 866, 870, 872, 873, 875, 876, 878, 879, 881, 882, 884, 885, 888, 889, 891, 893, 895, 896, 898, 899, 901, 902, 904, 905, 907, 908, 909, 911, 912, 914, 915, 917, 921, 923, 924, 926, 949, 997, 1000, 1053, 1054, 1055, 1056, 1057, 1111], "streamlin": 174, "workflow": [174, 345, 367, 379, 1111], "save": [174, 177, 178, 381, 745, 806, 1144, 1145], "week": [174, 345, 346, 1111], "let": [174, 350, 351, 358, 359, 360, 364, 366, 367, 368, 369, 1069, 1078, 1081, 1090, 1093, 1094, 1098, 1101, 1111], "sai": [174, 344, 356, 366], "deepmind": 174, "releas": [174, 344, 346, 1111], "awesom": 174, "paper": 174, "love": 174, "choic": [174, 344, 361, 367, 1069, 1090, 1093, 1098, 1101], "perceiverio": 174, "happen": [174, 344, 345, 367], "slew": 174, "rush": 174, "f": [174, 347, 348, 358, 364, 367, 369, 509, 612, 745, 786, 790], "g": [174, 348, 358, 381, 422, 427, 450, 459, 475, 1036, 1041, 1042, 1044, 1053, 1054, 1055, 1057, 1069, 1074, 1077, 1082, 1085, 1086, 1089, 1094], "inevit": 174, "deviat": [174, 1031, 1032, 1035, 1036, 1041, 1069, 1090, 1093, 1146, 1147], "origin": [174, 177, 178, 179, 180, 181, 355, 356, 359, 364, 366, 509, 539, 542, 863, 889, 891, 949, 979, 982, 983, 986], "often": [174, 354, 381], "erron": 174, "train": [174, 354, 358, 360, 367, 368, 369, 379, 380, 381, 819, 821, 822, 824, 832, 834, 1111], "poor": 174, "converg": 174, "perform": [174, 177, 178, 349, 351, 353, 354, 355, 357, 358, 360, 361, 362, 364, 367, 381, 392, 397, 403, 412, 413, 459, 745, 763, 767, 768, 769, 787, 788, 789, 819, 822, 824, 827, 829, 832, 834, 836, 838, 840, 842, 850, 858, 860, 863, 912, 1009, 1010, 1011, 1012, 1013, 1020, 1021, 1102, 1103, 1106, 1107, 1110], "issu": [174, 343, 346, 364, 366, 368, 381], "publish": [174, 381], "manag": [174, 343, 361, 381, 459], "get": [174, 177, 178, 343, 344, 346, 348, 354, 359, 360, 361, 364, 365, 366, 367, 368, 422, 440, 441, 442, 445, 459, 468, 469, 478, 479, 492, 493, 498, 502, 505, 508, 745, 752, 779, 780, 781, 800, 1111, 1117, 1132, 1141], "work": [174, 344, 345, 346, 348, 353, 358, 359, 360, 363, 364, 365, 366, 368, 369, 1111, 1117], "repositori": [174, 344, 345, 347, 352], "pull": [174, 343, 344, 347, 349, 381], "request": [174, 343, 349, 459, 495], "confus": [174, 361], "do": [174, 177, 178, 344, 345, 346, 349, 350, 351, 354, 355, 356, 357, 358, 359, 360, 361, 362, 364, 366, 367, 368, 369, 381, 509, 699, 702, 745, 789, 819, 831, 848, 1013, 1014, 1023, 1024, 1025], "expect": [174, 381, 745, 752, 1111], "codebas": [174, 343, 348, 349, 361, 363, 459, 501, 502, 1111], "total": [174, 177, 178, 179, 180, 181, 343, 345, 351, 353, 360, 367, 368, 381, 459, 505, 1048, 1051, 1069, 1090, 1093, 1098, 1101], "hour": 174, "spent": 174, "spin": 174, "off": [174, 363, 863, 873, 875, 921, 923], "test": [174, 344, 346, 348, 351, 381, 422, 447, 448, 509, 620, 623, 624, 627, 628, 631, 1102, 1103, 1106, 1107, 1110], "error": [174, 177, 178, 344, 353, 357, 360, 362, 366, 381, 392, 393, 459, 509, 592, 595, 1069, 1074, 1077, 1082, 1085, 1144, 1145, 1148, 1152], "address": [174, 345, 346, 357, 364], "sake": 174, "singl": [174, 177, 178, 345, 349, 351, 353, 354, 356, 358, 361, 362, 364, 367, 368, 369, 381, 459, 468, 469, 488, 489, 490, 491, 745, 815, 818, 1036, 1041, 1042, 1044, 1053, 1054], "multipl": [174, 177, 178, 182, 189, 274, 275, 279, 282, 288, 290, 311, 312, 313, 314, 325, 326, 329, 330, 345, 351, 354, 358, 381, 509, 526, 656, 678, 681, 745, 746, 748, 749, 750, 774, 778, 795, 863, 882, 949, 950, 953, 954, 983, 986, 987, 988, 1031, 1032, 1035, 1038, 1040, 1048, 1049, 1050, 1069, 1074, 1077, 1078, 1081, 1082, 1085, 1086, 1089, 1090, 1093, 1094, 1098, 1101, 1102, 1103, 1106, 1107, 1110, 1132, 1142], "line": [174, 344, 351, 357, 365, 366, 367, 368, 379, 1111, 1117], "directli": [174, 345, 349, 350, 354, 357, 358, 359, 360, 361, 362, 364, 366, 368, 369, 380, 381, 1013, 1025], "graph": [174, 354, 358, 365, 381, 819, 822, 824, 827, 829, 832, 834, 836, 838, 840, 842, 1053, 1054, 1055, 1057, 1144, 1145], "guarante": [174, 357, 381, 1053, 1054], "turn": [174, 351, 358], "step": [174, 177, 178, 182, 186, 232, 273, 284, 315, 316, 344, 345, 347, 351, 355, 357, 358, 359, 360, 364, 367, 368, 369, 380, 403, 404, 412, 413, 459, 819, 821, 822, 823, 824, 825, 827, 829, 832, 833, 834, 835, 836, 838, 840, 842, 1009, 1010, 1011, 1012, 1111, 1148, 1149, 1150, 1151, 1152, 1153], "take": [174, 343, 344, 345, 350, 351, 353, 358, 359, 360, 364, 366, 368, 369, 381, 509, 567, 570, 1111, 1117], "few": [174, 345, 346, 354, 358, 359, 360, 361, 365, 366, 367, 368, 379, 1111, 1117], "second": [174, 344, 351, 361, 366, 422, 449, 454, 459, 490, 509, 522, 525, 547, 550, 555, 558, 559, 562, 563, 566, 567, 570, 586, 588, 591, 599, 607, 608, 611, 615, 616, 619, 632, 635, 636, 639, 656, 659, 660, 663, 668, 671, 672, 675, 678, 681, 687, 690, 695, 698, 727, 731, 745, 753, 800, 805, 819, 821, 822, 824, 832, 834, 863, 867, 869, 873, 875, 876, 878, 885, 888, 899, 901, 905, 907, 912, 918, 920, 924, 926, 949, 993, 996, 997, 1000, 1009, 1011, 1053, 1054, 1055, 1148, 1149, 1150], "automat": [174, 344, 345, 354, 358, 362, 363, 364, 365, 368, 369, 1111], "everyon": [174, 343, 345, 381], "regardless": [174, 177, 178, 343, 366, 369, 400, 401], "wouldn": 174, "nice": [174, 353], "write": [174, 177, 178, 345, 346, 347, 348, 349, 350, 351, 353, 354, 355, 361, 364, 366, 369, 392, 395, 459, 504, 509, 510, 513, 514, 517, 518, 521, 522, 525, 527, 530, 531, 534, 535, 539, 542, 547, 550, 551, 554, 555, 558, 559, 562, 563, 566, 567, 570, 571, 574, 575, 578, 579, 582, 596, 599, 600, 603, 604, 620, 623, 624, 627, 628, 631, 632, 635, 640, 643, 644, 647, 648, 651, 652, 655, 656, 659, 660, 663, 664, 667, 668, 671, 672, 675, 678, 681, 683, 686, 687, 690, 695, 698, 699, 702, 703, 706, 707, 710, 711, 714, 715, 718, 719, 722, 723, 726, 727, 731, 732, 745, 758, 760, 764, 771, 773, 933, 934, 937, 939, 942, 944, 947, 949, 950, 953, 963, 966, 967, 970, 971, 974, 975, 978, 983, 986, 989, 992, 993, 996, 997, 1000, 1031, 1032, 1035, 1036, 1038, 1039, 1058, 1059, 1062, 1064, 1067, 1069, 1070, 1073, 1074, 1077, 1078, 1081, 1082, 1085, 1086, 1089, 1090, 1093, 1094, 1097, 1098, 1101, 1102, 1103, 1106, 1107, 1110], "onc": [174, 344, 345, 358, 359, 360, 364, 367, 381, 459, 503, 863, 882, 912, 1036, 1037], "know": [174, 1053, 1054, 1055, 1057], "among": [174, 177, 178, 353], "frantic": 174, "port": 174, "lucid": 174, "honk": 174, "improv": [174, 345, 354, 364], "understand": [174, 344, 345, 346, 347, 348, 350, 351, 352, 362, 363], "pattern": [174, 177, 178, 350, 359, 745, 767, 768, 769], "hasn": 174, "now": [174, 177, 178, 344, 347, 349, 356, 358, 359, 362, 366, 367, 369, 380, 381, 1132, 1143, 1144, 1145], "spend": 174, "torchvis": 174, "probabl": [174, 850, 858, 1036, 1037, 1132, 1140], "sonnet": 174, "about": [174, 344, 345, 352, 363, 364, 368, 369, 381, 422, 442, 445], "next": [174, 344, 345, 346, 347, 350, 351, 355, 356, 366, 367, 422, 442, 1111, 1144, 1145, 1148, 1149, 1150, 1151, 1152, 1153], "everyth": [174, 345, 346, 365, 381], "zero": [174, 177, 178, 179, 180, 351, 357, 358, 359, 360, 362, 364, 367, 368, 392, 394, 395, 403, 406, 408, 414, 418, 419, 421, 422, 428, 509, 522, 527, 530, 555, 558, 579, 600, 603, 604, 664, 667, 668, 671, 676, 677, 678, 681, 683, 686, 687, 690, 695, 698, 699, 702, 703, 706, 719, 722, 723, 726, 732, 745, 763, 798, 801, 802, 819, 821, 822, 824, 832, 834, 836, 838, 850, 858, 863, 870, 884, 885, 888, 893, 895, 902, 904, 924, 926, 927, 929, 949, 963, 966, 967, 970, 975, 978, 983, 986, 1005, 1008, 1031, 1032, 1035, 1036, 1038, 1039, 1048, 1049, 1050, 1051, 1053, 1054, 1055, 1057, 1069, 1074, 1077, 1078, 1081, 1082, 1085, 1086, 1089, 1090, 1093, 1094, 1098, 1101, 1102, 1103, 1106, 1107, 1110, 1111, 1123, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1142, 1148, 1149, 1150, 1151], "need": [174, 344, 345, 346, 347, 349, 350, 351, 352, 354, 357, 358, 361, 364, 366, 367, 380, 381, 745, 757, 758, 760, 949, 950, 953, 963, 966], "said": 174, "high": [174, 177, 178, 182, 258, 288, 289, 329, 330, 346, 367, 1036, 1038, 1039, 1040, 1042, 1043, 1044, 1045], "level": [174, 343, 346, 354, 363, 364, 367, 368, 369, 381], "optim": [174, 361, 365, 367, 369, 380, 459, 819, 822, 824, 827, 829, 832, 834, 836, 838, 840, 842, 1009, 1010, 1011, 1012, 1111, 1149, 1150, 1151, 1153], "trainer": [174, 379, 381, 1111], "statu": 174, "quo": 174, "kera": 174, "dopamin": 174, "ignit": 174, "catalyst": 174, "lightn": 174, "fastai": 174, "haiku": [174, 369], "flax": [174, 369, 381], "trax": [174, 369], "objax": [174, 369], "idea": [174, 380], "fulli": [174, 357, 358, 362, 364, 365, 366, 367, 368, 369, 381, 1132, 1142, 1143], "offer": [174, 368], "containerwithactiv": [175, 179, 180], "dict_in": [175, 176, 177, 178, 179, 180, 181, 182, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "queue": [175, 176, 177, 178, 179, 180, 181, 182, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 367, 459, 468, 469, 745, 800, 805], "queue_load_s": [175, 176, 177, 178, 179, 180, 181, 182, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "container_combine_method": [175, 176, 177, 178, 179, 180, 181, 182, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "list_join": [175, 176, 177, 178, 179, 180, 181, 182, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "queue_timeout": [175, 176, 177, 178, 179, 180, 181, 182, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 745], "print_limit": [175, 176, 177, 178, 179, 180, 181, 182, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "key_length_limit": [175, 176, 177, 178, 179, 180, 181, 182, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "print_ind": [175, 176, 177, 178, 179, 180, 181, 182, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "print_line_spac": [175, 176, 177, 178, 179, 180, 181, 182, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "ivyh": [175, 176, 177, 178, 179, 180, 181, 182, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "default_key_color": [175, 176, 177, 178, 179, 180, 181, 182, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "green": [175, 176, 177, 178, 179, 180, 181, 182, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 344, 345, 1157, 1158], "keyword_color_dict": [175, 176, 177, 178, 179, 180, 181, 182, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "rebuild_child_contain": [175, 176, 177, 178, 179, 180, 181, 182, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "types_to_iteratively_nest": [175, 176, 177, 178, 179, 180, 181, 182, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "alphabetical_kei": [175, 176, 177, 178, 179, 180, 181, 182, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "containerbas": [175, 176, 177, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 358], "__getitem__": [177, 178, 358], "queri": [177, 178, 358, 359, 366, 459, 492, 502, 850, 861, 862, 1132, 1143], "slice": [177, 178, 745, 773, 774, 777, 1013, 1022], "chain": [177, 178, 357, 358, 368, 369, 381, 1009, 1010, 1011, 1013, 1026, 1154, 1155], "element": [177, 178, 350, 364, 369, 392, 393, 394, 395, 396, 397, 398, 399, 403, 404, 410, 411, 418, 419, 459, 482, 486, 490, 509, 510, 513, 514, 517, 518, 521, 522, 525, 527, 530, 531, 534, 535, 538, 539, 542, 543, 546, 547, 550, 551, 554, 555, 558, 559, 562, 563, 566, 567, 570, 571, 574, 575, 578, 579, 582, 583, 586, 588, 591, 592, 595, 596, 599, 600, 603, 604, 607, 608, 611, 612, 615, 616, 619, 620, 623, 624, 627, 628, 631, 632, 635, 636, 639, 640, 643, 644, 647, 648, 651, 652, 655, 656, 659, 660, 663, 664, 667, 668, 671, 672, 675, 676, 677, 678, 681, 683, 686, 687, 690, 691, 694, 695, 698, 699, 702, 703, 706, 707, 710, 711, 714, 715, 718, 719, 722, 723, 726, 727, 731, 732, 736, 737, 740, 741, 744, 745, 753, 754, 757, 758, 760, 763, 764, 771, 785, 814, 815, 850, 858, 863, 867, 869, 876, 878, 885, 888, 905, 907, 912, 949, 950, 953, 967, 970, 975, 978, 983, 986, 988, 989, 992, 1036, 1037, 1048, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1064, 1067, 1069, 1070, 1073, 1074, 1077, 1078, 1081, 1082, 1085, 1086, 1089, 1090, 1093, 1094, 1097, 1098, 1101, 1102, 1103, 1106, 1107, 1110, 1132, 1140], "represent": [177, 178, 179, 180, 181, 380, 402, 422, 426, 427, 442, 445, 459, 475, 476, 509, 510, 513, 522, 547, 550, 559, 562, 567, 570, 672, 675, 678, 681, 745, 751, 808, 813], "dictionari": [177, 178, 179, 180, 181, 367, 381, 459, 502], "around": [177, 178, 179, 180, 181, 345, 354, 357, 362, 366, 381], "sequenc": [177, 178, 179, 180, 181, 351, 359, 380, 459, 468, 469, 745, 754, 795, 949, 988, 993, 996, 1036, 1038, 1039, 1069, 1074, 1077, 1132, 1141, 1146, 1147, 1154, 1155], "multiprocess": [177, 178, 179, 180, 181, 367, 381, 459, 468, 745], "asynchron": [177, 178, 179, 180, 181], "wait": [177, 178, 179, 180, 181, 345], "size": [177, 178, 179, 180, 181, 366, 367, 403, 412, 413, 459, 501, 502, 503, 745, 801, 807, 850, 862, 863, 873, 875, 889, 891, 899, 901, 905, 907, 912, 924, 926, 949, 963, 966, 983, 986, 988, 989, 992, 1036, 1037, 1041, 1042, 1044, 1048, 1049, 1051, 1102, 1103, 1106, 1107, 1110, 1132, 1133, 1134], "dimens": [177, 178, 179, 180, 181, 351, 364, 367, 392, 397, 403, 418, 419, 459, 490, 745, 767, 768, 769, 772, 782, 798, 817, 850, 851, 852, 853, 854, 855, 856, 857, 860, 863, 864, 866, 867, 869, 870, 873, 875, 876, 878, 879, 881, 882, 884, 885, 888, 889, 891, 893, 895, 896, 898, 902, 904, 905, 907, 909, 911, 912, 914, 915, 917, 921, 923, 924, 926, 927, 929, 933, 939, 942, 944, 947, 949, 955, 958, 963, 966, 967, 970, 971, 974, 975, 978, 979, 982, 983, 986, 988, 989, 992, 993, 996, 1009, 1010, 1011, 1012, 1036, 1047, 1048, 1049, 1050, 1051, 1053, 1054, 1055, 1057, 1069, 1070, 1073, 1074, 1077, 1078, 1081, 1082, 1085, 1086, 1089, 1090, 1093, 1094, 1097, 1098, 1101, 1102, 1103, 1106, 1107, 1110, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1142, 1143], "combin": [177, 178, 179, 180, 181, 345, 351, 353, 354, 357, 358, 369, 863, 867, 869], "arriv": [177, 178, 179, 180, 181], "timeout": [177, 178, 179, 180, 181, 459, 468, 469, 745, 800, 805], "limit": [177, 178, 179, 180, 181, 345, 351, 353, 364, 367, 369, 381, 422, 442, 445, 745, 757, 758, 760, 949, 950, 953], "maximum": [177, 178, 179, 180, 181, 351, 364, 367, 369, 459, 483, 487, 491, 503, 509, 745, 757, 758, 760, 772, 819, 832, 834, 949, 950, 953, 1013, 1025, 1048, 1049, 1069, 1074, 1077, 1082, 1085, 1111], "length": [177, 178, 179, 180, 181, 367, 403, 404, 414, 863, 912, 914, 915, 917, 949, 979, 982], "whitespac": [177, 178, 179, 180, 181], "indent": [177, 178, 179, 180, 181, 367], "extra": [177, 178, 179, 180, 181, 351, 356, 357, 364, 819, 826], "newlin": [177, 178, 179, 180, 181, 350], "handl": [177, 178, 179, 180, 181, 348, 353, 354, 356, 358, 359, 360, 361, 362, 368, 381, 400, 401, 459, 475, 476, 477, 478, 479, 493, 497, 498, 505, 508, 819, 822, 824, 827, 829, 832, 834, 836, 838, 840, 842, 1148, 1149, 1150, 1151, 1152, 1153], "result": [177, 178, 179, 180, 181, 349, 350, 351, 353, 357, 358, 359, 361, 362, 367, 381, 392, 395, 403, 404, 422, 450, 459, 468, 504, 509, 510, 513, 514, 517, 518, 521, 522, 525, 527, 530, 531, 534, 535, 539, 542, 547, 550, 551, 554, 555, 558, 559, 562, 563, 566, 567, 570, 571, 574, 575, 578, 579, 582, 583, 586, 588, 591, 596, 599, 600, 603, 604, 607, 608, 611, 612, 615, 616, 619, 620, 623, 624, 627, 628, 631, 632, 635, 636, 639, 640, 643, 644, 647, 648, 651, 652, 655, 656, 659, 660, 663, 664, 667, 668, 671, 672, 675, 678, 681, 683, 686, 687, 690, 695, 698, 699, 702, 703, 706, 707, 710, 711, 714, 715, 718, 719, 722, 723, 726, 727, 731, 732, 741, 744, 745, 758, 760, 764, 771, 773, 801, 802, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 862, 863, 864, 866, 873, 875, 889, 891, 912, 927, 929, 933, 934, 937, 939, 942, 944, 947, 949, 950, 953, 963, 966, 967, 970, 971, 974, 975, 978, 983, 986, 989, 992, 993, 996, 997, 1000, 1013, 1026, 1031, 1032, 1035, 1036, 1038, 1039, 1048, 1049, 1050, 1053, 1054, 1058, 1059, 1062, 1064, 1067, 1069, 1070, 1073, 1074, 1077, 1078, 1081, 1082, 1085, 1086, 1089, 1090, 1093, 1094, 1097, 1098, 1101, 1102, 1103, 1106, 1107, 1110, 1111], "color": [177, 178, 179, 180, 181, 1157, 1158], "termin": [177, 178, 179, 180, 181, 344, 345, 347, 358, 364, 367], "map": [177, 178, 179, 180, 181, 353, 354, 358, 362, 367, 380, 381, 459, 468, 1013, 1020, 1021, 1025, 1026, 1132, 1143], "termcolor": [177, 178, 179, 180, 181], "rebuild": [177, 178, 179, 180, 181], "found": [177, 178, 179, 180, 181, 344, 345, 350, 357, 358, 459, 493], "constructor": [177, 178, 179, 180, 181, 359, 360, 366, 745, 752, 1154, 1155], "param": [177, 178, 179, 180, 181, 182, 282, 313, 314, 364, 369, 745, 751, 773, 774, 777, 778], "kept": [177, 178, 179, 180, 181, 345, 361, 1009, 1010, 1011], "structur": [177, 178, 179, 180, 181, 347, 349, 354, 357, 358, 367, 368, 745, 761, 1013, 1026], "alphabet": [177, 178, 179, 180, 181], "preserv": [177, 178, 179, 180, 181, 369, 381, 819, 845, 949, 967, 970], "__setitem__": [177, 178, 357, 358, 366], "val": [177, 178, 361, 366, 745, 787, 788, 789, 803, 804], "after": [177, 178, 351, 358, 359, 363, 422, 454, 509, 719, 722, 819, 822, 824, 826, 827, 829, 832, 834, 836, 838, 840, 842, 1031, 1032, 1035, 1148, 1149, 1150, 1151, 1152, 1153], "updat": [177, 178, 344, 345, 346, 347, 348, 351, 352, 356, 357, 358, 359, 362, 364, 366, 367, 369, 381, 459, 468, 745, 789, 801, 802, 819, 821, 822, 824, 827, 829, 832, 834, 836, 838, 840, 842, 850, 860, 1009, 1010, 1011, 1013, 1020, 1021, 1029, 1030, 1121, 1122, 1148, 1149, 1150, 1151, 1152, 1153], "all_fals": [177, 178], "assert_is_bool": [177, 178], "key_chain": [177, 178, 179, 180, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 307, 308, 311, 312, 313, 314, 315, 316, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 335, 336, 337, 338, 339, 340, 431, 433, 435, 510, 512, 516, 517, 518, 520, 524, 525, 526, 527, 529, 531, 533, 537, 538, 539, 541, 543, 545, 547, 549, 551, 553, 555, 557, 559, 561, 563, 565, 567, 569, 571, 573, 577, 578, 581, 582, 585, 586, 587, 590, 591, 592, 594, 598, 599, 600, 602, 606, 607, 608, 610, 614, 615, 616, 618, 620, 622, 624, 626, 628, 630, 632, 634, 636, 638, 640, 642, 644, 646, 648, 650, 652, 654, 656, 658, 660, 662, 664, 666, 668, 670, 672, 674, 678, 680, 682, 683, 685, 687, 689, 691, 693, 695, 697, 699, 701, 703, 705, 707, 709, 711, 713, 715, 717, 719, 721, 723, 725, 727, 728, 730, 733, 735, 736, 739, 740, 741, 743, 746, 748, 750, 758, 759, 774, 776, 778, 822, 823, 825, 827, 828, 830, 832, 833, 835, 836, 837, 839, 840, 841, 843, 885, 887, 934, 936, 938, 939, 941, 943, 944, 946, 948, 950, 952, 954, 955, 957, 959, 961, 963, 965, 967, 969, 971, 973, 975, 977, 979, 981, 983, 985, 987, 989, 991, 993, 995, 997, 999, 1001, 1003, 1005, 1007, 1013, 1026, 1032, 1034, 1038, 1040, 1042, 1043, 1045, 1059, 1061, 1063, 1064, 1066, 1068, 1070, 1072, 1074, 1076, 1078, 1080, 1082, 1084, 1086, 1088, 1090, 1092, 1096, 1097, 1098, 1100, 1103, 1105, 1107, 1109], "to_appli": [177, 178, 179, 180, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 307, 308, 311, 312, 313, 314, 315, 316, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 335, 336, 337, 338, 339, 340, 431, 433, 435, 510, 512, 516, 517, 518, 520, 524, 525, 526, 527, 529, 531, 533, 537, 538, 539, 541, 543, 545, 547, 549, 551, 553, 555, 557, 559, 561, 563, 565, 567, 569, 571, 573, 577, 578, 581, 582, 585, 586, 587, 590, 591, 592, 594, 598, 599, 600, 602, 606, 607, 608, 610, 614, 615, 616, 618, 620, 622, 624, 626, 628, 630, 632, 634, 636, 638, 640, 642, 644, 646, 648, 650, 652, 654, 656, 658, 660, 662, 664, 666, 668, 670, 672, 674, 678, 680, 682, 683, 685, 687, 689, 691, 693, 695, 697, 699, 701, 703, 705, 707, 709, 711, 713, 715, 717, 719, 721, 723, 725, 727, 728, 730, 733, 735, 736, 739, 740, 741, 743, 746, 748, 750, 758, 759, 774, 776, 778, 822, 823, 825, 827, 828, 830, 832, 833, 835, 836, 837, 839, 840, 841, 843, 885, 887, 934, 936, 938, 939, 941, 943, 944, 946, 948, 950, 952, 954, 955, 957, 959, 961, 963, 965, 967, 969, 971, 973, 975, 977, 979, 981, 983, 985, 987, 989, 991, 993, 995, 997, 999, 1001, 1003, 1005, 1007, 1013, 1026, 1032, 1034, 1042, 1043, 1045, 1059, 1061, 1063, 1064, 1066, 1068, 1070, 1072, 1074, 1076, 1078, 1080, 1082, 1084, 1086, 1088, 1090, 1092, 1096, 1097, 1098, 1100, 1103, 1105, 1107, 1109], "prune_unappli": [177, 178, 179, 180, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 307, 308, 311, 312, 313, 314, 315, 316, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 335, 336, 337, 338, 339, 340, 431, 433, 435, 510, 512, 516, 517, 518, 520, 524, 525, 526, 527, 529, 531, 533, 537, 538, 539, 541, 543, 545, 547, 549, 551, 553, 555, 557, 559, 561, 563, 565, 567, 569, 571, 573, 577, 578, 581, 582, 585, 586, 587, 590, 591, 592, 594, 598, 599, 600, 602, 606, 607, 608, 610, 614, 615, 616, 618, 620, 622, 624, 626, 628, 630, 632, 634, 636, 638, 640, 642, 644, 646, 648, 650, 652, 654, 656, 658, 660, 662, 664, 666, 668, 670, 672, 674, 678, 680, 682, 683, 685, 687, 689, 691, 693, 695, 697, 699, 701, 703, 705, 707, 709, 711, 713, 715, 717, 719, 721, 723, 725, 727, 728, 730, 733, 735, 736, 739, 740, 741, 743, 746, 748, 750, 758, 759, 774, 776, 778, 822, 823, 825, 827, 828, 830, 832, 833, 835, 836, 837, 839, 840, 841, 843, 885, 887, 934, 936, 938, 939, 941, 943, 944, 946, 948, 950, 952, 954, 955, 957, 959, 961, 963, 965, 967, 969, 971, 973, 975, 977, 979, 981, 983, 985, 987, 989, 991, 993, 995, 997, 999, 1001, 1003, 1005, 1007, 1013, 1026, 1032, 1034, 1042, 1043, 1045, 1059, 1061, 1063, 1064, 1066, 1068, 1070, 1072, 1074, 1076, 1078, 1080, 1082, 1084, 1086, 1088, 1090, 1092, 1096, 1097, 1098, 1100, 1103, 1105, 1107, 1109], "map_sequ": [177, 178, 179, 180, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 196, 198, 199, 201, 206, 207, 208, 209, 211, 212, 213, 214, 215, 216, 218, 219, 220, 221, 222, 223, 225, 226, 229, 230, 231, 232, 233, 234, 237, 238, 239, 240, 243, 247, 248, 249, 250, 251, 253, 254, 255, 257, 258, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 307, 308, 311, 312, 313, 314, 315, 316, 323, 324, 325, 326, 327, 328, 329, 330, 335, 336, 337, 338, 339, 340, 431, 433, 435, 510, 512, 516, 517, 518, 520, 524, 525, 526, 527, 529, 531, 533, 537, 538, 543, 545, 551, 553, 571, 573, 577, 578, 581, 582, 585, 587, 592, 594, 598, 600, 602, 606, 607, 608, 620, 622, 624, 626, 628, 630, 640, 642, 644, 646, 648, 650, 652, 654, 656, 664, 666, 678, 680, 682, 683, 685, 691, 693, 703, 705, 707, 709, 711, 713, 715, 717, 719, 721, 723, 725, 727, 728, 730, 733, 735, 736, 739, 740, 741, 743, 746, 748, 750, 758, 759, 774, 776, 778, 822, 823, 825, 827, 828, 830, 832, 833, 835, 836, 837, 839, 840, 841, 843, 934, 936, 938, 939, 941, 943, 944, 946, 948, 950, 952, 954, 959, 961, 963, 965, 967, 969, 971, 973, 975, 977, 979, 981, 983, 985, 987, 989, 991, 997, 999, 1001, 1003, 1005, 1007, 1032, 1034, 1042, 1043, 1045, 1059, 1061, 1063, 1064, 1066, 1068, 1070, 1072, 1074, 1076, 1078, 1080, 1082, 1084, 1086, 1088, 1090, 1092, 1096, 1097, 1098, 1100, 1103, 1105, 1107, 1109], "entri": [177, 178, 403, 412, 413, 949, 988, 1013, 1026], "boolean": [177, 178, 358, 403, 410, 422, 428, 446, 458, 459, 494, 506, 509, 547, 550, 551, 554, 559, 562, 567, 570, 660, 663, 664, 667, 668, 671, 672, 675, 745, 746, 749, 753, 754, 784, 785, 786, 790, 791, 792, 793, 794, 811, 818, 819, 831, 1009, 1010, 1011, 1013, 1023, 1069, 1082, 1085], "evalu": [177, 178, 358, 509, 596, 600, 603, 640, 643, 644, 647, 648, 651, 652, 655, 683, 686, 707, 710, 723, 726, 1013, 1014, 1023, 1024, 1102, 1103, 1106, 1107, 1110], "assert": [177, 178, 366, 367, 745, 755], "skip": [177, 178, 347, 353, 1013, 1026], "prune": [177, 178, 1013, 1026, 1027, 1028], "all_key_chain": [177, 178], "include_empti": [177, 178], "all_tru": [177, 178, 358, 367], "arrays_as_list": [177, 178], "intermedi": [177, 178], "as_arrai": [177, 178, 745, 782, 807], "as_bool": [177, 178], "as_on": [177, 178], "ones": [177, 178, 179, 180, 353, 364, 366, 367, 403, 408, 417, 509, 571, 574, 745, 798, 1111], "sub": [177, 178, 345, 346, 348, 353, 358, 366, 367, 368, 459, 484, 485, 488, 489, 490, 491, 863, 873, 875, 949, 988, 1009, 1010, 1011, 1012, 1111], "fill": [177, 178, 403, 406, 410, 411, 416, 417, 420, 421, 1036, 1038, 1039], "as_random_uniform": [177, 178], "low": [177, 178, 182, 258, 288, 289, 329, 330, 364, 1036, 1038, 1039, 1040, 1042, 1043, 1044, 1045], "uniform": [177, 178, 368, 1036, 1037, 1038, 1039, 1042, 1044, 1123, 1125, 1126, 1129, 1130], "lower": [177, 178, 345, 351, 364, 381, 403, 408, 418, 509, 676, 863, 864, 866, 1036, 1042, 1044], "boundari": [177, 178, 1036, 1042, 1044], "output": [177, 178, 344, 348, 349, 350, 351, 353, 354, 357, 358, 360, 361, 362, 364, 366, 368, 369, 381, 392, 395, 403, 404, 406, 407, 408, 410, 411, 414, 416, 417, 420, 421, 459, 468, 469, 503, 504, 509, 510, 513, 514, 517, 518, 521, 522, 525, 527, 530, 531, 534, 535, 539, 542, 547, 550, 551, 554, 555, 558, 559, 562, 563, 566, 567, 570, 571, 574, 575, 578, 579, 582, 596, 599, 600, 603, 604, 620, 623, 624, 627, 628, 631, 632, 635, 640, 643, 644, 647, 648, 651, 652, 655, 656, 659, 660, 663, 664, 667, 668, 671, 672, 675, 678, 681, 683, 686, 687, 690, 695, 698, 699, 702, 703, 706, 707, 710, 711, 714, 715, 718, 719, 722, 723, 726, 727, 731, 732, 745, 756, 758, 760, 764, 771, 773, 819, 826, 850, 852, 854, 856, 858, 860, 861, 862, 863, 921, 923, 933, 934, 937, 939, 942, 944, 947, 949, 950, 953, 963, 966, 967, 970, 971, 974, 975, 978, 983, 986, 989, 992, 993, 996, 997, 1000, 1001, 1004, 1013, 1026, 1031, 1032, 1035, 1036, 1038, 1039, 1041, 1042, 1044, 1058, 1059, 1062, 1064, 1067, 1069, 1070, 1073, 1074, 1077, 1078, 1081, 1082, 1085, 1086, 1089, 1090, 1093, 1094, 1097, 1098, 1101, 1102, 1103, 1106, 1107, 1110, 1111, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1140, 1141, 1142, 1143], "interv": [177, 178, 364, 369, 403, 404, 412, 413, 863, 924, 926, 949, 950, 953, 993, 996, 1036, 1038, 1039, 1042, 1044, 1102, 1103, 1106, 1107, 1110], "as_vari": [177, 178], "as_zero": [177, 178], "assert_contains_sub_contain": [177, 178], "sub_cont": [177, 178], "partial": [177, 178, 345, 1144, 1145], "except": [177, 178, 350, 357, 361, 366, 381, 422, 430, 745, 755, 766, 789, 816, 863, 884, 902, 904, 949, 955, 958, 993, 996, 1048, 1051, 1102, 1103, 1106, 1107, 1110], "diff": [177, 178, 358, 367], "screen": [177, 178, 367], "assert_contains_sub_structur": [177, 178], "check_shap": [177, 178], "static": [177, 178, 182, 274, 275, 278, 279, 282, 288, 290, 294, 307, 308, 311, 312, 313, 314, 315, 316, 323, 324, 325, 326, 329, 330, 335, 336, 341, 342, 346, 350, 351, 354, 381, 400, 401, 431, 435, 526, 538, 543, 656, 733, 740, 746, 750, 774, 778, 950, 954, 983, 987, 1038, 1040], "assert_ident": [177, 178], "check_typ": [177, 178], "same_arrai": [177, 178, 367], "arrays_equ": [177, 178, 179, 180, 745], "datatyp": [177, 178, 403, 405, 415, 422, 436, 447, 448, 449], "exact": [177, 178, 345, 364, 1053, 1054], "assert_identical_structur": [177, 178], "at_key_chain": [177, 178], "ignore_key_error": [177, 178], "ignore_non": [177, 178], "at_kei": [177, 178], "ignor": [177, 178, 351, 381, 403, 414, 1013, 1024, 1148, 1152], "substr": [177, 178], "access": [177, 178, 345, 347, 359], "clip_min": [177, 178], "clip_max": [177, 178], "minimum": [177, 178, 364, 369, 459, 509, 510, 513, 745, 780, 781, 803, 804, 809, 810, 949, 950, 953, 1048, 1050, 1069, 1074, 1077, 1082, 1085, 1111], "config": [177, 178, 367, 1013, 1026], "right": [177, 178, 343, 344, 345, 348, 351, 367, 509, 555, 558, 563, 566, 863, 912], "duplic": [177, 178, 350, 355, 356, 366, 368], "compar": [177, 178, 353, 367, 745, 746, 749, 753, 754, 1053, 1054, 1055, 1057, 1058, 1059, 1062, 1064, 1067], "configur": [177, 178, 344, 345, 347, 359, 459, 502, 1013, 1026], "container_rightmost": [177, 178], "common_key_chain": [177, 178, 358], "across": [177, 178, 346, 351, 353, 354, 358, 359, 362, 459, 468, 469, 480, 481, 483, 484, 485, 486, 487, 491, 501, 502, 745, 753, 754, 1013, 1019, 1048, 1050], "properti": [177, 178, 351, 353, 354, 358, 366, 367, 368, 459, 471, 1144, 1145, 1148, 1149, 1150, 1151, 1153], "contains_sub_contain": [177, 178], "match": [177, 178, 358, 422, 428, 509, 699, 702, 745, 795], "contains_sub_structur": [177, 178], "copi": [177, 178, 347, 350, 355, 359, 364, 366, 367, 380, 381, 403, 405, 409, 422, 428, 459, 504, 745, 762, 814, 815, 949, 979, 982, 1013, 1015, 1058, 1064, 1067], "create_if_abs": [177, 178], "inplac": [177, 178, 182, 186, 226, 232, 233, 253, 273, 283, 284, 285, 287, 315, 316, 348, 351, 356, 357, 362, 366, 368, 745, 755, 786, 789, 790, 811, 819, 822, 823, 824, 825, 827, 828, 829, 830, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 1121, 1122, 1148, 1149, 1150, 1151, 1152, 1153], "correspond": [177, 178, 179, 180, 182, 345, 350, 351, 352, 354, 357, 358, 359, 362, 422, 429, 509, 539, 542, 695, 698, 863, 867, 869, 876, 878, 909, 911, 949, 955, 958, 983, 986, 1036, 1037, 1048, 1049, 1050, 1053, 1054, 1055, 1057, 1069, 1086, 1089, 1090, 1093, 1094, 1098, 1101], "alreadi": [177, 178, 344, 345, 355, 358, 362, 366, 381, 459, 509, 571, 574, 604, 678, 681, 703, 706, 741, 744, 863, 899, 901, 1111], "noth": [177, 178, 345], "cutoff_at_depth": [177, 178], "depth_cutoff": [177, 178], "summari": [177, 178, 345, 422, 437, 438, 439, 451, 452, 453, 459, 472, 473, 745, 761, 765, 783, 819, 844, 849], "cutoff_at_height": [177, 178], "height_cutoff": [177, 178], "deep_copi": [177, 178, 367], "intern": [177, 178, 350, 357, 358, 360, 361, 459, 819, 848, 1013, 1014, 1023, 1024, 1123, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1154, 1155], "dev": [177, 178, 179, 181, 182, 194, 344, 354, 360, 364, 366, 368, 459, 468, 493], "belong": [177, 178, 368], "dev_clon": [177, 178, 459], "clone": [177, 178, 345, 347, 459, 480, 481, 482, 483], "dev_dist": [177, 178, 459], "distribut": [177, 178, 346, 360, 381, 459, 480, 484, 485, 486, 487, 850, 858, 933, 934, 937, 939, 942, 944, 947, 1036, 1037, 1038, 1039, 1041, 1042, 1044, 1132, 1140, 1144, 1145], "along": [177, 178, 349, 361, 403, 412, 413, 459, 484, 485, 486, 487, 488, 489, 490, 491, 503, 745, 763, 764, 773, 817, 863, 889, 891, 921, 923, 924, 926, 927, 929, 933, 939, 942, 944, 947, 949, 955, 958, 967, 970, 975, 978, 983, 986, 988, 993, 996, 1001, 1004, 1009, 1010, 1011, 1012, 1036, 1047, 1048, 1049, 1050, 1058, 1059, 1062, 1064, 1067, 1069, 1070, 1073, 1074, 1077, 1078, 1081, 1082, 1085, 1086, 1089, 1090, 1093, 1094, 1097, 1098, 1101, 1102, 1103, 1106, 1107, 1110], "split": [177, 178, 343, 345, 363, 364, 381, 459, 468, 484, 485, 486, 487, 501, 502, 503, 745, 795, 949, 1111], "dev_str": [177, 178], "diff_kei": [177, 178], "detect_key_diff": [177, 178], "detect_value_diff": [177, 178], "detect_shape_diff": [177, 178], "thei": [177, 178, 346, 348, 349, 351, 354, 356, 358, 359, 360, 361, 366, 367, 368, 369, 381, 422, 449, 1009, 1010, 1011, 1036, 1037, 1111, 1154, 1155], "treat": [177, 178, 365, 369, 400, 401], "detect": [177, 178, 362, 367, 368, 1013, 1014, 1024], "without": [177, 178, 345, 349, 354, 357, 358, 360, 362, 364, 366, 367, 368, 380, 381, 745, 800, 805, 949, 979, 982, 1013, 1015, 1053, 1054, 1055, 1057], "flag": [177, 178, 345, 361, 366, 459, 478, 819, 831], "container0": [177, 178], "einops_rearrang": [177, 178, 745], "axes_length": [177, 178, 745, 767, 768, 769], "rearrang": [177, 178, 745, 767, 769], "addit": [177, 178, 344, 345, 349, 350, 353, 358, 359, 366, 367, 369, 459, 504, 509, 522, 745, 767, 768, 769, 1031, 1032, 1035, 1132, 1142], "einops_reduc": [177, 178, 745], "reduct": [177, 178, 359, 366, 745, 768, 801, 802, 1102, 1103, 1106, 1107, 1110, 1111], "One": [177, 178, 359, 364, 366, 367, 745, 768, 949, 979, 982, 1036, 1038, 1039], "callabl": [177, 178, 358, 364, 382, 383, 384, 385, 386, 387, 388, 389, 390, 400, 401, 422, 443, 444, 459, 503, 745, 751, 756, 766, 768, 1009, 1010, 1011, 1012, 1013, 1019, 1023, 1024, 1025], "einops_repeat": [177, 178, 745], "find_sub_contain": [177, 178], "sub_cont_to_find": [177, 178], "exsit": [177, 178], "find_sub_structur": [177, 178], "sub_struc_to_find": [177, 178], "flatten_key_chain": [177, 178, 367, 1144, 1145], "__": [177, 178, 351, 367], "above_height": [177, 178, 367], "below_depth": [177, 178, 367], "format_key_chain": [177, 178], "format_fn": [177, 178], "format": [177, 178, 347, 350, 359, 360, 364, 366, 367, 422, 440, 459, 479, 1069, 1070, 1073, 1097, 1111], "string": [177, 178, 355, 359, 360, 364, 367, 422, 426, 427, 440, 446, 458, 459, 475, 476, 477, 478, 492, 498, 504, 505, 508, 745, 765], "from_disk_as_hdf5": [177, 178, 367], "h5_obj_or_filepath": [177, 178], "slice_obj": [177, 178], "load": [177, 178, 381], "disk": [177, 178, 367], "h5py": [177, 178], "file": [177, 178, 344, 345, 347, 349, 350, 354, 355, 357, 358, 364, 367, 745, 806, 1144, 1145], "hdf5": [177, 178, 367, 1144, 1145], "filepath": [177, 178, 345], "h5": [177, 178], "from_disk_as_json": [177, 178, 367], "json_filepath": [177, 178], "json": [177, 178, 367], "were": [177, 178, 345, 349, 353, 358], "abl": [177, 178, 344, 345, 354, 359, 361, 366, 369], "dure": [177, 178, 354, 358, 359, 360, 361, 381, 400, 401, 459, 504, 745, 816, 819, 821, 822, 824, 832, 834, 863, 885, 888, 1009, 1010, 1011, 1012, 1069, 1090, 1093, 1098, 1101, 1144, 1145, 1148, 1149, 1150, 1152], "from_disk_as_pickl": [177, 178, 367], "pickle_filepath": [177, 178], "pickl": [177, 178, 358, 367], "from_flat_list": [177, 178], "flat_list": [177, 178], "hierarchi": [177, 178, 367], "flat": [177, 178, 745, 801, 949, 975, 978], "popul": [177, 178, 359, 360, 364, 1036, 1037, 1069, 1090, 1093, 1098, 1101], "from_numpi": [177, 178, 367], "gather": [177, 178, 745, 774, 777], "accord": [177, 178, 344, 347, 354, 359, 422, 431, 434, 442, 509, 522, 563, 566, 678, 681, 745, 773, 801, 802, 863, 924, 926, 949, 959, 962, 1005, 1008, 1069, 1090, 1093, 1098, 1101], "index": [177, 178, 347, 354, 358, 366, 402, 403, 408, 414, 459, 500, 745, 751, 773, 774, 777, 949, 993, 996, 1013, 1016, 1017, 1020, 1021, 1022, 1027, 1029, 1048, 1049, 1050, 1051, 1053, 1054, 1055, 1058, 1059, 1062, 1114, 1116], "h5_file_s": [177, 178], "content": [177, 178, 346, 347, 361, 364, 367], "batch": [177, 178, 354, 358, 367, 459, 501, 502, 745, 772, 850, 859, 863, 927, 929, 1009, 1010, 1011, 1012, 1031, 1032, 1035, 1146, 1147], "handle_inplac": [177, 178], "prime": [177, 178], "overwritten": [177, 178, 355, 357], "has_kei": [177, 178], "query_kei": [177, 178], "somewher": [177, 178], "has_key_chain": [177, 178], "has_nan": [177, 178, 745], "include_inf": [177, 178, 745, 784, 818], "leafwis": [177, 178], "nan": [177, 178, 349, 350, 402, 422, 428, 509, 510, 513, 514, 517, 518, 521, 522, 525, 527, 530, 531, 534, 535, 539, 542, 571, 574, 575, 578, 579, 582, 596, 599, 600, 603, 604, 620, 623, 628, 631, 640, 643, 644, 647, 652, 655, 656, 659, 678, 681, 695, 698, 699, 702, 703, 706, 711, 714, 715, 718, 719, 722, 732, 741, 744, 745, 784, 818, 850, 862, 1053, 1054, 1055, 1057, 1069, 1074, 1077, 1078, 1081, 1082, 1085, 1090, 1093, 1094, 1098, 1101, 1102, 1103, 1106, 1107, 1110], "well": [177, 178, 353, 361, 368, 369, 380, 745, 784, 863, 909, 911], "inf": [177, 178, 402, 745, 784, 818, 863, 927, 929], "wise": [177, 178, 364, 369, 392, 393, 394, 395, 396, 397, 398, 399, 509, 510, 513, 514, 522, 525, 527, 530, 535, 539, 542, 547, 550, 551, 554, 555, 558, 559, 562, 563, 566, 567, 570, 583, 586, 588, 591, 592, 595, 599, 607, 608, 611, 612, 615, 616, 619, 632, 635, 636, 639, 656, 659, 660, 663, 664, 667, 668, 671, 672, 675, 676, 677, 678, 681, 687, 690, 695, 698, 699, 702, 727, 731, 745, 771, 949, 950, 953], "identical_array_shap": [177, 178], "exclus": [177, 178, 354, 358, 369, 403, 404, 745, 763, 791, 792, 794, 819, 831, 1036, 1038, 1039], "identical_config": [177, 178], "identical_structur": [177, 178], "if_exist": [177, 178], "inplace_upd": [177, 178, 361, 745, 1121, 1122], "key_chains_contain": [177, 178], "sub_str": [177, 178], "join": [177, 178, 949, 955, 958, 993, 996, 1111], "list_stack": [177, 178, 367], "dim": [177, 178, 359, 745, 798, 1132, 1143], "func": [177, 178, 358, 400, 401, 459, 503, 745, 756, 819, 826, 1013, 1026], "map_cont": [177, 178], "include_self": [177, 178], "possibi": [177, 178], "place": [177, 178, 345, 348, 349, 350, 351, 353, 354, 358, 360, 362, 369, 403, 404, 405, 406, 407, 408, 410, 411, 415, 416, 417, 420, 421, 422, 431, 434, 459, 504, 509, 522, 527, 530, 547, 550, 567, 570, 571, 574, 579, 604, 687, 690, 703, 706, 719, 722, 723, 726, 732, 745, 773, 787, 788, 789, 850, 853, 862, 863, 870, 949, 963, 966, 967, 970, 983, 986, 1031, 1032, 1035, 1053, 1054, 1055, 1058, 1059, 1062, 1069, 1074, 1077, 1102, 1103, 1106, 1148, 1149, 1150, 1151, 1152, 1153], "matrix": [177, 178, 403, 414, 418, 419, 745, 746, 749, 757, 850, 859, 863, 864, 866, 870, 873, 875, 876, 878, 879, 881, 882, 884, 885, 888, 889, 891, 892, 893, 895, 896, 898, 902, 904, 905, 907, 909, 911, 912, 914, 915, 917, 921, 923, 930, 932, 1132, 1142], "p": [177, 178, 182, 209, 313, 314, 344, 345, 403, 414, 745, 757, 758, 759, 760, 850, 858, 863, 889, 891, 927, 929, 1132, 1140], "integ": [177, 178, 358, 359, 366, 403, 404, 410, 422, 445, 448, 450, 509, 510, 513, 547, 550, 551, 554, 555, 558, 559, 562, 563, 566, 567, 570, 571, 574, 586, 604, 607, 608, 611, 672, 675, 695, 698, 699, 702, 703, 706, 741, 744, 863, 892, 924, 926, 927, 929, 949, 988, 1036, 1038, 1039, 1046, 1069, 1074, 1077, 1078, 1081, 1082, 1085, 1086, 1089, 1090, 1093, 1094, 1098, 1101, 1102, 1103, 1106, 1107, 1110], "flatten": [177, 178, 745, 772, 863, 899, 901, 927, 929, 949, 975, 978, 983, 986, 1048, 1049, 1050, 1053, 1054, 1055, 1057], "left": [177, 178, 344, 345, 351, 359, 509, 555, 558, 863, 876, 878, 889, 891, 912, 1048, 1049, 1111], "broadcast": [177, 178, 349, 350, 351, 358, 359, 392, 395, 422, 429, 430, 459, 504, 509, 510, 513, 514, 517, 518, 521, 522, 525, 527, 530, 531, 534, 535, 539, 542, 547, 550, 551, 554, 555, 558, 559, 562, 563, 566, 567, 570, 571, 574, 575, 578, 579, 582, 583, 586, 588, 591, 596, 599, 600, 603, 604, 607, 608, 611, 615, 616, 619, 620, 623, 624, 627, 628, 631, 632, 635, 636, 639, 640, 643, 644, 647, 648, 651, 652, 655, 656, 659, 660, 663, 664, 667, 668, 671, 672, 675, 676, 677, 678, 681, 683, 686, 687, 690, 695, 698, 699, 702, 703, 706, 707, 710, 711, 714, 715, 718, 719, 722, 723, 726, 727, 731, 732, 745, 758, 760, 771, 863, 884, 885, 888, 889, 891, 893, 895, 902, 904, 909, 911, 924, 926, 927, 929, 933, 934, 937, 939, 942, 944, 947, 949, 950, 953, 963, 966, 967, 970, 971, 974, 975, 978, 983, 986, 989, 992, 993, 996, 997, 1000, 1036, 1038, 1039, 1048, 1049, 1050, 1058, 1064, 1067, 1069, 1074, 1077, 1078, 1081, 1082, 1085, 1086, 1089, 1090, 1093, 1094, 1098, 1101, 1102, 1103, 1106, 1107, 1110], "correctli": [177, 178, 344, 353, 358, 359, 362, 368, 381, 863, 889, 891, 1048, 1049], "max_depth": [177, 178, 459, 463, 466, 473, 483, 487, 491, 745, 783, 1013, 1025], "multi_map": [177, 178, 358], "map_nest": [177, 178, 182, 197, 200, 202, 203, 204, 205, 210, 217, 224, 227, 228, 235, 236, 241, 242, 244, 245, 246, 252, 256, 259, 272, 311, 312, 321, 322, 325, 326, 525, 539, 541, 547, 549, 555, 557, 559, 561, 563, 565, 567, 569, 586, 590, 591, 599, 607, 608, 610, 614, 615, 616, 618, 632, 634, 636, 638, 656, 658, 660, 662, 668, 670, 672, 674, 687, 689, 695, 697, 699, 701, 885, 887, 955, 957, 993, 995], "leftmost": [177, 178, 1013, 1026], "multi_map_in_static_method": [177, 178, 358], "fn_name": [177, 178], "num_arrai": [177, 178], "overwrite_at_key_chain": [177, 178], "overwrit": [177, 178, 361, 364, 459, 503], "target_dict": [177, 178], "return_dict": [177, 178], "prune_empti": [177, 178], "keep_non": [177, 178], "empti": [177, 178, 179, 180, 357, 359, 360, 403, 404, 1069, 1090, 1093, 1094, 1102, 1103, 1106, 1107, 1110], "prune_key_chain": [177, 178], "key1": [177, 178, 368], "key2": [177, 178], "key3": [177, 178], "prune_key_from_key_chain": [177, 178], "absolut": [177, 178, 343, 509, 510, 513, 863, 872, 908], "certain": [177, 178, 344, 381, 403, 404, 412, 413], "decid": [177, 178, 344, 1013, 1024], "remov": [177, 178, 345, 346, 347, 350, 353, 354, 359, 361, 369, 863, 873, 875, 885, 888, 921, 923, 949, 989, 992, 1009, 1010, 1011], "prune_kei": [177, 178], "prune_keys_from_key_chain": [177, 178], "remove_key_length_limit": [177, 178], "remove_print_limit": [177, 178], "reshape_lik": [177, 178], "leading_shap": [177, 178], "return_cont": [177, 178], "restructur": [177, 178], "keep_orig": [177, 178], "transpos": [177, 178, 366, 369, 459, 490, 850, 852, 854, 856, 863, 884, 896, 898, 902, 904, 1111, 1132, 1134, 1136, 1138], "old": [177, 178, 344, 361], "keep": [177, 178, 344, 345, 352, 358, 365, 367, 369, 745, 817], "start": [177, 178, 343, 344, 345, 346, 347, 348, 350, 351, 359, 363, 364, 366, 367, 368, 380, 381, 403, 404, 412, 413, 459, 474], "restructure_key_chain": [177, 178], "keychain_map": [177, 178], "set_at_key_chain": [177, 178], "set_at_kei": [177, 178], "set_framework": [177, 178, 364, 366, 367, 369], "set_ivy_backend": [177, 178], "ivy_backend": [177, 178], "attribut": [177, 178, 350, 358, 359, 365, 366, 367, 368, 422, 442, 443, 444, 445, 459, 499], "show": [177, 178, 344, 345, 351, 361, 380, 381, 1111], "show_sub_contain": [177, 178], "sub_cont_or_keychain": [177, 178], "shuffl": [177, 178, 1036, 1111], "seed_valu": [177, 178, 1036, 1046], "align": [177, 178, 344, 364, 366, 1111, 1117], "seed": [177, 178, 179, 180, 1036, 1111], "shuffle_h5_fil": [177, 178], "dataset": [177, 178, 367, 379, 1111], "size_ordered_arrai": [177, 178], "keychain": [177, 178], "smallest": [177, 178, 422, 442, 445, 509, 571, 574], "largest": [177, 178, 380, 422, 442, 445, 863, 912], "slice_kei": [177, 178], "key_slic": [177, 178], "all_depth": [177, 178], "slice_via_kei": [177, 178], "sort_by_kei": [177, 178], "num_or_size_split": [177, 178, 364, 949, 988], "with_remaind": [177, 178, 949, 988], "constitu": [177, 178, 369], "dimension": [177, 178, 403, 404, 408, 414, 863, 867, 869, 870, 884, 885, 888, 893, 895, 899, 901, 902, 904, 924, 926, 927, 929, 949, 988, 1048, 1049, 1050, 1051, 1069, 1074, 1077, 1078, 1081, 1082, 1085, 1086, 1089, 1090, 1093, 1094, 1098, 1101, 1102, 1103, 1106, 1107, 1110], "evenli": [177, 178, 403, 404, 412, 413, 949, 988], "store": [177, 178, 350, 355, 357, 358, 364, 366, 367, 368, 745, 772, 819, 848, 863, 921, 923, 949, 988, 1144, 1145], "stop_gradi": [177, 178, 179, 180, 182, 186, 226, 232, 233, 253, 273, 283, 284, 285, 287, 315, 316, 368, 459, 503, 819, 822, 823, 824, 825, 827, 828, 829, 830, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 1009, 1010, 1011, 1012, 1111, 1148, 1149, 1150, 1151, 1152, 1153], "preserve_typ": [177, 178, 819, 845], "stop": [177, 178, 364, 381, 403, 404, 412, 413, 459, 474, 503, 819, 822, 824, 827, 829, 832, 834, 836, 838, 840, 842, 845, 1009, 1010, 1011, 1012, 1148, 1149, 1150, 1151, 1152, 1153], "alwai": [177, 178, 345, 346, 349, 350, 354, 355, 357, 358, 361, 362, 364, 366, 381, 422, 428, 509, 522, 678, 681, 745, 789, 819, 831, 845], "structural_diff": [177, 178], "to_devic": [177, 178, 459, 478], "move": [177, 178, 345, 349, 459, 504], "cuda": [177, 178, 364, 367, 381, 403, 412, 413, 459, 468, 475, 500, 745, 773, 774, 777, 798, 801, 802, 1036, 1037, 1038, 1039, 1042, 1044, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1152, 1154, 1155], "cpu": [177, 178, 345, 360, 381, 403, 412, 413, 459, 478, 479, 481, 495, 498, 500, 504, 505, 507, 508, 745, 773, 774, 777, 798, 801, 802, 1036, 1037, 1038, 1039, 1041, 1042, 1044, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1152, 1154, 1155], "target": [177, 178, 348, 363, 367, 368, 369, 459, 477, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 1111], "to_dict": [177, 178], "to_disk_as_hdf5": [177, 178, 367], "starting_index": [177, 178], "max_batch_s": [177, 178], "read": [177, 178, 347, 1111], "r": [177, 178, 344, 745, 754, 817, 863, 905, 907, 930, 932], "w": [177, 178, 182, 273, 283, 284, 285, 287, 315, 316, 364, 367, 368, 745, 754, 819, 821, 822, 824, 825, 827, 829, 830, 832, 834, 835, 836, 838, 839, 840, 842, 843, 850, 851, 852, 853, 854, 855, 856, 857], "later": [177, 178, 745, 756], "append": [177, 178, 347, 353, 364, 367, 509, 555, 558, 863, 873, 875, 885, 888], "to_disk_as_json": [177, 178, 367], "to_disk_as_pickl": [177, 178, 367], "to_flat_list": [177, 178], "to_iter": [177, 178, 358], "leaf_keys_onli": [177, 178], "to_iterator_kei": [177, 178], "to_iterator_valu": [177, 178], "to_json": [177, 178], "to_list": [177, 178, 745, 1111], "to_multi_dev": [177, 178], "multidevcontain": [177, 178, 179], "distributedarrai": [177, 178], "to_numpi": [177, 178, 367, 745, 1111], "update_backend": [177, 178], "to_raw": [177, 178], "raw": [177, 178, 350], "trim_kei": [177, 178], "max_length": [177, 178], "try_kc": [177, 178], "tri": [177, 178], "self": [177, 178, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 357, 358, 364, 366, 367, 368, 369, 431, 433, 459, 510, 512, 516, 517, 518, 520, 524, 525, 527, 529, 531, 533, 537, 538, 539, 541, 543, 545, 547, 549, 551, 553, 555, 557, 559, 561, 563, 565, 567, 569, 571, 573, 577, 578, 581, 582, 585, 586, 590, 591, 592, 594, 598, 599, 600, 602, 606, 607, 608, 610, 614, 615, 616, 618, 620, 622, 624, 626, 628, 630, 632, 634, 636, 638, 640, 642, 644, 646, 648, 650, 652, 654, 656, 658, 660, 662, 664, 666, 668, 670, 672, 674, 678, 680, 683, 685, 687, 689, 691, 693, 695, 697, 699, 701, 703, 705, 707, 709, 711, 713, 715, 717, 719, 721, 723, 725, 727, 730, 735, 736, 739, 740, 741, 743, 746, 748, 758, 759, 774, 776, 822, 823, 827, 828, 832, 833, 836, 837, 840, 841, 885, 887, 934, 936, 939, 941, 944, 946, 950, 952, 955, 957, 959, 961, 963, 965, 967, 969, 971, 973, 975, 977, 979, 981, 983, 985, 989, 991, 993, 995, 997, 999, 1001, 1003, 1005, 1007, 1032, 1034, 1042, 1043, 1059, 1061, 1064, 1066, 1070, 1072, 1074, 1076, 1078, 1080, 1082, 1084, 1086, 1088, 1090, 1092, 1096, 1097, 1098, 1100, 1103, 1105, 1107, 1109, 1111, 1148, 1152], "arbitrari": [177, 178, 353, 354, 358, 361, 362, 368, 381, 403, 414, 422, 429, 450, 459, 488, 489, 491], "concatten": [177, 178, 459, 488, 489, 490, 491, 503], "unstack": [177, 178, 364, 367, 745, 1111], "dim_siz": [177, 178, 459], "update_config": [177, 178], "global_norm": [177, 178, 182, 209, 313, 314, 758, 759], "vector": [177, 178, 380, 403, 414, 745, 758, 760, 850, 859, 863, 867, 869, 876, 878, 885, 888, 899, 901, 912, 914, 915, 917, 924, 926, 927, 929, 930, 932, 1132, 1142], "with_default_key_color": [177, 178], "with_entries_as_list": [177, 178], "with_ivy_backend": [177, 178], "with_key_length_limit": [177, 178, 367], "with_print_ind": [177, 178, 367], "with_print_limit": [177, 178, 367], "with_print_line_spac": [177, 178], "containerwithcr": [179, 180, 305], "containerwithdatatyp": [179, 180, 307], "containerwithdevic": [179, 180, 309], "containerwithelementwis": [179, 180, 311, 358], "containerwithgener": [179, 180, 313], "containerwithgradi": [179, 180, 315], "containerwithimag": [179, 180, 317], "containerwithlay": [179, 180, 319], "containerwithlinearalgebra": [179, 180, 321], "containerwithloss": [179, 180, 323], "containerwithmanipul": [179, 180, 325, 346], "containerwithnorm": [179, 180, 327], "containerwithrandom": [179, 180, 329], "containerwithsearch": [179, 180, 331], "containerwithset": [179, 180, 333], "containerwithsort": [179, 180, 335], "containerwithstatist": [179, 180, 337], "containerwithutil": [179, 180, 339], "__add__": [179, 180, 182, 350, 351, 357, 358, 362, 366], "special": [179, 180, 182, 346, 349, 350, 351, 357, 362, 509, 510, 513, 514, 517, 518, 521, 522, 525, 527, 530, 531, 534, 535, 539, 542, 567, 570, 571, 574, 575, 578, 579, 582, 596, 599, 600, 603, 604, 640, 643, 644, 647, 652, 655, 656, 659, 678, 681, 695, 698, 699, 702, 703, 706, 707, 710, 711, 714, 715, 718, 719, 722, 732, 741, 744, 1069, 1074, 1077, 1078, 1081, 1082, 1085, 1090, 1093, 1094, 1098, 1101], "11": [179, 180, 182, 187, 274, 288, 311, 312, 329, 330, 351, 358, 509, 522, 524, 526, 547, 550, 656, 703, 706, 745, 763, 773, 863, 873, 875, 899, 901, 933, 944, 947, 949, 967, 970, 975, 978, 1036, 1038, 1039, 1040, 1048, 1052, 1053, 1054, 1069, 1070, 1073, 1097], "__radd__": [179, 180, 182, 350, 351], "revers": [179, 180, 182, 346, 350, 351, 369, 381, 745, 766, 949, 967, 970], "adam_step": [179, 180, 819], "arang": [179, 180, 359, 403, 412, 413, 1069, 1070, 1073, 1097, 1111], "arg_info": [179, 180, 745], "arg_nam": [179, 180, 745], "argmax": [179, 180, 1048, 1111], "argmin": [179, 180, 1048, 1111], "array_equ": [179, 180, 745], "as_ivy_dev": [179, 180, 366, 459], "as_ivy_dtyp": [179, 180, 422], "as_native_dev": [179, 180, 459], "as_native_dtyp": [179, 180, 422], "asarrai": [179, 180, 361, 403, 850, 851, 1053, 1055], "assert_supports_inplac": [179, 180, 745], "astyp": [179, 180, 359, 361, 422], "broadcast_arrai": [179, 180, 422], "broadcast_to": [179, 180, 359, 422], "cache_fn": [179, 180, 354, 745], "clear_mem_on_dev": [179, 180, 459], "clip_matrix_norm": [179, 180, 745], "closest_valid_dtyp": [179, 180, 422], "container_typ": [179, 180, 745], "conv1d": [179, 180, 850, 1132], "conv1d_transpos": [179, 180, 850], "conv2d": [179, 180, 850, 1111, 1132], "conv2d_transpos": [179, 180, 850], "conv3d": [179, 180, 850, 1132], "conv3d_transpos": [179, 180, 850], "copy_arrai": [179, 180, 745], "cumprod": [179, 180, 369, 745], "cumsum": [179, 180, 745, 1111], "current_backend_str": [179, 180, 745], "default_devic": [179, 180, 360, 364, 459, 497, 500, 507], "default_dtyp": [179, 180, 354, 359, 422], "default_float_dtyp": [179, 180, 359, 422], "default_int_dtyp": [179, 180, 359, 422], "depthwise_conv2d": [179, 180, 850, 1111], "dev_clone_arrai": [179, 180, 459], "dev_clone_it": [179, 180, 459], "dev_clone_nest": [179, 180, 459], "dev_dist_arrai": [179, 180, 459], "dev_dist_it": [179, 180, 459], "dev_dist_nest": [179, 180, 459], "dev_unifi": [179, 180, 459], "dev_unify_arrai": [179, 180, 459], "dev_unify_it": [179, 180, 459], "dev_unify_nest": [179, 180, 459], "dev_util": [179, 180, 360, 459], "dropout": [179, 180, 367, 850, 1132, 1143], "dtype_bit": [179, 180, 422], "empty_lik": [179, 180, 403], "execute_with_gradi": [179, 180, 358, 367, 368, 369, 381, 819, 1111], "ey": [179, 180, 369, 403, 850, 853, 857], "finfo": [179, 180, 422], "floormod": [179, 180, 745, 1111], "fourier_encod": [179, 180, 745], "from_dlpack": [179, 180, 403], "full_lik": [179, 180, 403], "function_supported_dtyp": [179, 180, 422], "function_unsupported_dtyp": [179, 180, 422], "gelu": [179, 180, 392, 1118], "get_all_arrays_in_memori": [179, 180, 745], "get_all_ivy_arrays_on_dev": [179, 180, 360, 459], "get_min_bas": [179, 180, 745], "get_min_denomin": [179, 180, 745], "get_num_dim": [179, 180, 745, 1111], "get_referrers_recurs": [179, 180, 745], "gpu_is_avail": [179, 180, 459], "handle_nest": [179, 180, 354, 358, 382], "handle_out_argu": [179, 180, 356, 359, 360, 361, 362, 382], "iinfo": [179, 180, 422], "indices_wher": [179, 180, 745, 1111], "infer_devic": [179, 180, 359, 360, 362, 382], "infer_dtyp": [179, 180, 359, 360, 362, 382], "inplace_arrays_support": [179, 180, 745], "inplace_decr": [179, 180, 745], "inplace_incr": [179, 180, 745], "inplace_variables_support": [179, 180, 745], "inputs_to_native_arrai": [179, 180, 357, 382], "invalid_dtyp": [179, 180, 422], "is_float_dtyp": [179, 180, 422], "is_int_dtyp": [179, 180, 422, 745, 815], "is_ivy_contain": [179, 180, 745], "leaky_relu": [179, 180, 392, 1111], "linear": [179, 180, 350, 364, 367, 368, 369, 392, 393, 394, 395, 745, 772, 850, 858, 909, 911, 1111, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139], "linspac": [179, 180, 364, 403, 404, 1111], "logspac": [179, 180, 364, 403], "lstm_updat": [179, 180, 364, 850], "match_kwarg": [179, 180, 745], "matrix_pow": [179, 180, 863], "meshgrid": [179, 180, 403], "multi_head_attent": [179, 180, 358, 361, 850], "multinomi": [179, 180, 1036], "nonzero": [179, 180, 509, 522, 678, 681, 1048], "num_arrays_in_memori": [179, 180, 745], "num_cpu_cor": [179, 180, 360, 459], "num_gpu": [179, 180, 353, 360, 459], "num_ivy_arrays_on_dev": [179, 180, 459], "one_hot": [179, 180, 369, 745, 1111], "ones_lik": [179, 180, 369, 403, 1111], "outputs_to_ivy_arrai": [179, 180, 357, 359, 360, 362, 382], "percent_used_mem_on_dev": [179, 180, 459], "print_all_arrays_in_memori": [179, 180, 745], "print_all_ivy_arrays_on_dev": [179, 180, 459], "promote_typ": [179, 180, 422], "randint": [179, 180, 182, 288, 329, 330, 1036, 1040, 1111], "random_norm": [179, 180, 850, 853, 856, 857, 863, 912, 1036, 1053, 1054], "result_typ": [179, 180, 359, 422], "scaled_dot_product_attent": [179, 180, 850], "scatter_flat": [179, 180, 745], "scatter_nd": [179, 180, 366, 745, 1111], "set_default_devic": [179, 180, 360, 459, 507], "set_default_dtyp": [179, 180, 354, 359, 422], "set_default_float_dtyp": [179, 180, 359, 422], "set_default_int_dtyp": [179, 180, 359, 422], "set_min_bas": [179, 180, 745], "set_min_denomin": [179, 180, 745], "set_queue_timeout": [179, 180, 745], "set_split_factor": [179, 180, 459], "set_tmp_dir": [179, 180, 745], "set_with_grad": [179, 180, 819], "shape_to_tupl": [179, 180, 359, 745], "sigmoid": [179, 180, 364, 367, 368, 392, 1111], "slogdet": [179, 180, 863], "softplu": [179, 180, 392, 1111], "split_factor": [179, 180, 459, 468], "split_func_cal": [179, 180, 459], "stable_divid": [179, 180, 354, 745], "stable_pow": [179, 180, 745], "static_ab": [179, 180], "static_aco": [179, 180], "static_acosh": [179, 180], "static_adam_step": [179, 180], "static_al": [179, 180], "static_ani": [179, 180], "static_arang": [179, 180], "static_arg_info": [179, 180], "static_arg_nam": [179, 180], "static_argmax": [179, 180], "static_argmin": [179, 180], "static_arrai": [179, 180], "static_array_equ": [179, 180], "static_arrays_equ": [179, 180], "static_as_ivy_dev": [179, 180], "static_as_ivy_dtyp": [179, 180], "static_as_native_dev": [179, 180], "static_as_native_dtyp": [179, 180], "static_asarrai": [179, 180], "static_asin": [179, 180], "static_asinh": [179, 180], "static_assert_supports_inplac": [179, 180], "static_astyp": [179, 180], "static_atan": [179, 180], "static_atan2": [179, 180], "static_atanh": [179, 180], "static_bitwise_and": [179, 180], "static_bitwise_invert": [179, 180], "static_bitwise_left_shift": [179, 180], "static_bitwise_or": [179, 180], "static_bitwise_right_shift": [179, 180], "static_bitwise_xor": [179, 180], "static_broadcast_arrai": [179, 180], "static_broadcast_to": [179, 180], "static_cache_fn": [179, 180], "static_ceil": [179, 180], "static_choleski": [179, 180], "static_clear_mem_on_dev": [179, 180], "static_clip_matrix_norm": [179, 180], "static_clip_vector_norm": [179, 180], "static_closest_valid_dtyp": [179, 180], "static_concat": [179, 180], "static_constant_pad": [179, 180], "static_container_typ": [179, 180], "static_conv1d": [179, 180], "static_conv1d_transpos": [179, 180], "static_conv2d": [179, 180], "static_conv2d_transpos": [179, 180], "static_conv3d": [179, 180], "static_conv3d_transpos": [179, 180], "static_copy_arrai": [179, 180], "static_co": [179, 180], "static_cosh": [179, 180], "static_cross": [179, 180], "static_cumprod": [179, 180], "static_cumsum": [179, 180], "static_current_backend": [179, 180], "static_current_backend_str": [179, 180], "static_default": [179, 180], "static_default_devic": [179, 180], "static_default_dtyp": [179, 180], "static_default_float_dtyp": [179, 180], "static_default_int_dtyp": [179, 180], "static_depthwise_conv2d": [179, 180], "static_det": [179, 180], "static_dev": [179, 180], "static_dev_clon": [179, 180], "static_dev_clone_arrai": [179, 180], "static_dev_clone_it": [179, 180], "static_dev_clone_nest": [179, 180], "static_dev_dist": [179, 180], "static_dev_dist_arrai": [179, 180], "static_dev_dist_it": [179, 180], "static_dev_dist_nest": [179, 180], "static_dev_unifi": [179, 180], "static_dev_unify_arrai": [179, 180], "static_dev_unify_it": [179, 180], "static_dev_unify_nest": [179, 180], "static_dev_util": [179, 180], "static_diagon": [179, 180], "static_dropout": [179, 180], "static_dtyp": [179, 180], "static_dtype_bit": [179, 180], "static_eigh": [179, 180], "static_eigvalsh": [179, 180], "static_einops_rearrang": [179, 180], "static_einops_reduc": [179, 180], "static_einops_repeat": [179, 180], "static_einsum": [179, 180], "static_empti": [179, 180], "static_empty_lik": [179, 180], "static_equ": [179, 180], "static_erf": [179, 180], "static_execute_with_gradi": [179, 180], "static_exist": [179, 180], "static_exp": [179, 180], "static_expand_dim": [179, 180], "static_expm1": [179, 180], "static_ey": [179, 180], "static_finfo": [179, 180], "static_flip": [179, 180], "static_floor": [179, 180], "static_floor_divid": [179, 180], "static_floormod": [179, 180], "static_fourier_encod": [179, 180], "static_from_dlpack": [179, 180], "static_ful": [179, 180], "static_full_lik": [179, 180], "static_function_supported_dtyp": [179, 180], "static_function_unsupported_dtyp": [179, 180], "static_gath": [179, 180], "static_gelu": [179, 180], "static_get_all_arrays_in_memori": [179, 180], "static_get_all_ivy_arrays_on_dev": [179, 180], "static_get_min_bas": [179, 180], "static_get_min_denomin": [179, 180], "static_get_num_dim": [179, 180], "static_get_referrers_recurs": [179, 180], "static_gpu_is_avail": [179, 180], "static_great": [179, 180], "static_greater_equ": [179, 180], "static_handle_nest": [179, 180], "static_handle_out_argu": [179, 180], "static_has_nan": [179, 180], "static_iinfo": [179, 180], "static_indices_wher": [179, 180], "static_infer_devic": [179, 180], "static_infer_dtyp": [179, 180], "static_inplace_arrays_support": [179, 180], "static_inplace_decr": [179, 180], "static_inplace_incr": [179, 180], "static_inplace_upd": [179, 180], "static_inplace_variables_support": [179, 180], "static_inputs_to_native_arrai": [179, 180], "static_inv": [179, 180], "static_invalid_dtyp": [179, 180], "static_is_arrai": [179, 180], "static_is_float_dtyp": [179, 180], "static_is_int_dtyp": [179, 180], "static_is_ivy_arrai": [179, 180], "static_is_ivy_contain": [179, 180], "static_is_native_arrai": [179, 180], "static_is_vari": [179, 180], "static_isfinit": [179, 180], "static_isinf": [179, 180], "static_isnan": [179, 180], "static_layer_norm": [179, 180], "static_leaky_relu": [179, 180], "static_less": [179, 180], "static_less_equ": [179, 180], "static_linear": [179, 180], "static_linspac": [179, 180], "static_log": [179, 180], "static_log10": [179, 180], "static_log1p": [179, 180], "static_log2": [179, 180], "static_logaddexp": [179, 180], "static_logical_and": [179, 180], "static_logical_not": [179, 180], "static_logical_or": [179, 180], "static_logical_xor": [179, 180], "static_logspac": [179, 180], "static_lstm_upd": [179, 180], "static_match_kwarg": [179, 180], "static_matmul": [179, 180], "static_matrix_norm": [179, 180], "static_matrix_pow": [179, 180], "static_matrix_rank": [179, 180], "static_matrix_transpos": [179, 180], "static_max": [179, 180], "static_maximum": [179, 180], "static_mean": [179, 180], "static_meshgrid": [179, 180], "static_min": [179, 180], "static_minimum": [179, 180], "static_multi_head_attent": [179, 180], "static_multinomi": [179, 180], "static_multiprocess": [179, 180], "static_native_arrai": [179, 180], "static_neg": [179, 180], "static_nonzero": [179, 180], "static_not_equ": [179, 180], "static_num_arrays_in_memori": [179, 180], "static_num_cpu_cor": [179, 180], "static_num_gpu": [179, 180], "static_num_ivy_arrays_on_dev": [179, 180], "static_one_hot": [179, 180], "static_on": [179, 180], "static_ones_lik": [179, 180], "static_out": [179, 180], "static_outputs_to_ivy_arrai": [179, 180], "static_percent_used_mem_on_dev": [179, 180], "static_permute_dim": [179, 180], "static_pinv": [179, 180], "static_posit": [179, 180], "static_pow": [179, 180], "static_print_all_arrays_in_memori": [179, 180], "static_print_all_ivy_arrays_on_dev": [179, 180], "static_prod": [179, 180], "static_promote_typ": [179, 180], "static_qr": [179, 180], "static_queue_timeout": [179, 180], "static_random_norm": [179, 180], "static_relu": [179, 180], "static_remaind": [179, 180], "static_repeat": [179, 180], "static_reshap": [179, 180], "static_result_typ": [179, 180], "static_round": [179, 180], "static_scaled_dot_product_attent": [179, 180], "static_scatter_flat": [179, 180], "static_scatter_nd": [179, 180], "static_se": [179, 180], "static_set_default_devic": [179, 180], "static_set_default_dtyp": [179, 180], "static_set_default_float_dtyp": [179, 180], "static_set_default_int_dtyp": [179, 180], "static_set_min_bas": [179, 180], "static_set_min_denomin": [179, 180], "static_set_queue_timeout": [179, 180], "static_set_split_factor": [179, 180], "static_set_tmp_dir": [179, 180], "static_set_with_grad": [179, 180], "static_shap": [179, 180], "static_shape_to_tupl": [179, 180], "static_shuffl": [179, 180], "static_sigmoid": [179, 180], "static_sign": [179, 180], "static_sin": [179, 180], "static_sinh": [179, 180], "static_slogdet": [179, 180], "static_softmax": [179, 180], "static_softplu": [179, 180], "static_solv": [179, 180], "static_split": [179, 180], "static_split_factor": [179, 180], "static_split_func_cal": [179, 180], "static_sqrt": [179, 180], "static_squar": [179, 180], "static_squeez": [179, 180], "static_stable_divid": [179, 180], "static_stable_pow": [179, 180], "static_stack": [179, 180], "static_std": [179, 180], "static_stop_gradi": [179, 180], "static_sum": [179, 180], "static_supports_inplac": [179, 180], "static_svd": [179, 180], "static_svdv": [179, 180], "static_swapax": [179, 180], "static_tanh": [179, 180], "static_tensordot": [179, 180], "static_til": [179, 180], "static_tmp_dir": [179, 180], "static_to_devic": [179, 180], "static_to_list": [179, 180], "static_to_native_arrays_and_back": [179, 180], "static_to_numpi": [179, 180], "static_to_scalar": [179, 180], "static_total_mem_on_dev": [179, 180], "static_tpu_is_avail": [179, 180], "static_trac": [179, 180], "static_tril": [179, 180], "static_triu": [179, 180], "static_trunc": [179, 180], "static_try_else_non": [179, 180], "static_type_promote_arrai": [179, 180], "static_unique_al": [179, 180], "static_unique_count": [179, 180], "static_unique_invers": [179, 180], "static_unique_valu": [179, 180], "static_unset_default_devic": [179, 180], "static_unset_default_dtyp": [179, 180], "static_unset_default_float_dtyp": [179, 180], "static_unset_default_int_dtyp": [179, 180], "static_unset_with_grad": [179, 180], "static_unstack": [179, 180], "static_used_mem_on_dev": [179, 180], "static_valid_dtyp": [179, 180], "static_value_is_nan": [179, 180], "static_var": [179, 180], "static_vari": [179, 180], "static_variable_data": [179, 180], "static_vecdot": [179, 180], "static_vector_norm": [179, 180], "static_vector_to_skew_symmetric_matrix": [179, 180], "static_wher": [179, 180], "static_with_grad": [179, 180], "static_zero_pad": [179, 180], "static_zero": [179, 180], "static_zeros_lik": [179, 180], "supports_inplac": [179, 180, 745], "tmp_dir": [179, 180, 745], "to_native_arrays_and_back": [179, 180, 356, 362, 382], "to_scalar": [179, 180, 745], "total_mem_on_dev": [179, 180, 360, 459], "tpu_is_avail": [179, 180, 459], "tril": [179, 180, 403], "triu": [179, 180, 403], "try_else_non": [179, 180, 745], "type_promote_arrai": [179, 180, 422], "unique_al": [179, 180, 1053], "unique_count": [179, 180, 1053], "unique_invers": [179, 180, 1053], "unique_valu": [179, 180, 1053], "unset_default_devic": [179, 180, 459], "unset_default_dtyp": [179, 180, 422], "unset_default_float_dtyp": [179, 180, 422], "unset_default_int_dtyp": [179, 180, 422], "unset_with_grad": [179, 180, 819], "used_mem_on_dev": [179, 180, 459], "valid_dtyp": [179, 180, 422], "value_is_nan": [179, 180, 745], "variable_data": [179, 180, 819], "with_grad": [179, 180, 819, 844], "zeros_lik": [179, 180, 403, 949, 950, 953, 1111], "at_dev": [179, 181, 182, 459, 472, 473], "container_method": [182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 431, 433, 435, 510, 512, 516, 517, 518, 520, 524, 525, 526, 527, 529, 531, 533, 537, 538, 539, 541, 543, 545, 547, 549, 551, 553, 555, 557, 559, 561, 563, 565, 567, 569, 571, 573, 577, 578, 581, 582, 585, 586, 587, 590, 591, 592, 594, 598, 599, 600, 602, 606, 607, 608, 610, 614, 615, 616, 618, 620, 622, 624, 626, 628, 630, 632, 634, 636, 638, 640, 642, 644, 646, 648, 650, 652, 654, 656, 658, 660, 662, 664, 666, 668, 670, 672, 674, 678, 680, 682, 683, 685, 687, 689, 691, 693, 695, 697, 699, 701, 703, 705, 707, 709, 711, 713, 715, 717, 719, 721, 723, 725, 727, 728, 730, 733, 735, 736, 739, 740, 741, 743, 746, 748, 750, 758, 759, 774, 776, 778, 822, 823, 825, 827, 828, 830, 832, 833, 835, 836, 837, 839, 840, 841, 843, 885, 887, 934, 936, 938, 939, 941, 943, 944, 946, 948, 950, 952, 954, 955, 957, 959, 961, 963, 965, 967, 969, 971, 973, 975, 977, 979, 981, 983, 985, 987, 989, 991, 993, 995, 997, 999, 1001, 1003, 1005, 1007, 1032, 1034, 1038, 1040, 1042, 1043, 1045, 1059, 1061, 1063, 1064, 1066, 1068, 1070, 1072, 1074, 1076, 1078, 1080, 1082, 1084, 1086, 1088, 1090, 1092, 1096, 1097, 1098, 1100, 1103, 1105, 1107, 1109], "adam_upd": [182, 315, 316, 368, 819], "dcdw": [182, 186, 226, 232, 233, 273, 283, 284, 285, 315, 316, 819, 821, 822, 823, 824, 825, 827, 828, 829, 830, 832, 833, 834, 835, 836, 837, 838, 839], "lr": [182, 186, 226, 232, 233, 253, 273, 283, 284, 285, 287, 315, 316, 367, 368, 819, 822, 823, 824, 825, 827, 828, 829, 830, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 1148, 1149, 1150, 1151, 1152, 1153], "mw_tm1": [182, 186, 232, 273, 284, 315, 316, 819, 822, 823, 824, 825, 832, 833, 834, 835], "vw_tm1": [182, 186, 232, 273, 284, 315, 316, 819, 822, 823, 824, 825, 832, 833, 834, 835], "beta1": [182, 186, 232, 273, 284, 315, 316, 368, 819, 821, 822, 823, 824, 825, 832, 833, 834, 835, 1148, 1149, 1150], "beta2": [182, 186, 232, 273, 284, 315, 316, 368, 819, 821, 822, 823, 824, 825, 832, 833, 834, 835, 1148, 1149, 1150], "999": [182, 186, 232, 273, 284, 315, 316, 368, 819, 821, 822, 823, 824, 825, 832, 833, 834, 835, 1148, 1149, 1150], "static_all_equ": [182, 189, 313, 314, 746, 748], "int32": [182, 206, 278, 307, 308, 359, 422, 431, 433, 434, 435, 443, 745, 814, 949, 963, 966, 1069, 1086, 1089, 1094], "int64": [182, 206, 278, 307, 308, 359, 422, 431, 433, 434, 435, 443, 509, 563, 566, 1048, 1049, 1050, 1069, 1086, 1089, 1094], "clip_vector_norm": [182, 313, 314, 745], "max_norm": [182, 209, 313, 314, 745, 757, 758, 759, 760], "gradient_descent_upd": [182, 315, 316, 819, 1009, 1010, 1011, 1012, 1111], "lamb_upd": [182, 315, 316, 819], "max_trust_ratio": [182, 232, 284, 315, 316, 819, 832, 833, 834, 835, 1148, 1150], "decay_lambda": [182, 232, 233, 284, 285, 315, 316, 819, 832, 833, 834, 835, 836, 837, 838, 839, 1148, 1150, 1151], "lars_upd": [182, 315, 316, 819], "optimizer_upd": [182, 315, 316, 819], "effective_grad": [182, 253, 287, 315, 316, 819, 840, 841, 842, 843], "random_uniform": [182, 329, 330, 360, 368, 1036, 1111], "static_adam_upd": [182, 315, 316, 822], "static_add": [182, 311, 312, 350, 351, 358, 656], "static_argsort": [182, 335, 336, 1059], "static_binary_cross_entropi": [182, 323, 324, 934], "static_can_cast": [182, 307, 308, 431], "from_": [182, 278, 307, 308, 422, 431, 434, 435], "static_clip": [182, 325, 326, 950], "static_rol": [182, 279, 325, 326, 351, 358, 950, 954, 983], "static_cross_entropi": [182, 323, 324, 939], "static_divid": [182, 311, 312, 358, 607, 608], "static_gather_nd": [182, 313, 314, 774], "static_gradient_descent_upd": [182, 315, 316, 827], "static_lamb_upd": [182, 315, 316, 832], "static_lars_upd": [182, 315, 316, 836], "static_multipli": [182, 311, 312, 358, 678], "static_optimizer_upd": [182, 315, 316, 840], "static_randint": [182, 329, 330, 1038], "20": [182, 288, 329, 330, 366, 509, 567, 570, 596, 703, 706, 719, 722, 863, 873, 875, 899, 901, 918, 920, 1036, 1038, 1039, 1040, 1048, 1051, 1052, 1069, 1070, 1073, 1097], "15": [182, 288, 329, 330, 344, 351, 509, 547, 550, 703, 706, 850, 853, 863, 873, 875, 899, 901, 918, 920, 949, 983, 986, 1031, 1032, 1035, 1036, 1038, 1039, 1040, 1048, 1051, 1053, 1054, 1069, 1070, 1073, 1097], "16": [182, 288, 294, 299, 311, 312, 329, 330, 345, 351, 367, 509, 538, 543, 732, 733, 735, 740, 850, 856, 863, 873, 875, 899, 901, 1038, 1040, 1048, 1052, 1069, 1070, 1073, 1097], "12": [182, 288, 329, 330, 344, 351, 358, 509, 547, 550, 567, 570, 579, 703, 706, 745, 763, 781, 863, 873, 875, 899, 901, 918, 920, 949, 967, 970, 975, 978, 983, 986, 1031, 1032, 1035, 1036, 1038, 1039, 1040, 1048, 1052, 1053, 1054, 1069, 1070, 1073, 1097], "40": [182, 288, 329, 330, 509, 579, 719, 722, 863, 899, 901, 1038, 1040, 1069, 1070, 1073, 1097], "gpu": [182, 288, 329, 330, 345, 360, 366, 381, 459, 478, 481, 494, 496, 500, 502, 507, 1038, 1040], "87": [182, 288, 329, 330, 1038, 1040], "62": [182, 288, 329, 330, 1038, 1040], "52": [182, 288, 329, 330, 863, 899, 901, 1038, 1040, 1053, 1054, 1069, 1070, 1073, 1097], "95": [182, 288, 329, 330, 1038, 1040], "37": [182, 288, 329, 330, 509, 732, 1031, 1032, 1035, 1038, 1040], "42": [182, 288, 329, 330, 369, 392, 398, 863, 899, 901, 1036, 1038, 1040, 1046, 1069, 1070, 1073, 1097], "14": [182, 288, 329, 330, 347, 351, 358, 509, 567, 570, 850, 862, 863, 873, 875, 899, 901, 1038, 1040, 1053, 1054, 1069, 1070, 1073, 1097], "13": [182, 288, 329, 330, 351, 358, 509, 547, 550, 567, 570, 579, 719, 722, 745, 763, 850, 862, 863, 873, 875, 899, 901, 1031, 1032, 1035, 1038, 1040, 1048, 1052, 1053, 1054, 1069, 1070, 1073, 1097], "static_random_uniform": [182, 329, 330, 1042], "static_sort": [182, 335, 336, 1064], "static_sparse_cross_entropi": [182, 323, 324, 944], "static_subtract": [182, 311, 312, 358, 727], "static_tan": [182, 311, 312, 351, 358, 538, 543, 740], "143": [182, 294, 299, 311, 312, 351, 509, 538, 543, 732, 733, 735, 740], "38": [182, 294, 299, 311, 312, 351, 509, 538, 543, 732, 733, 735, 740], "add_ivy_container_instance_method": 341, "containerexampl": [341, 342], "strongli": [343, 344, 1111, 1117], "welcom": [343, 344, 345, 1111, 1117], "skill": 343, "vetern": 343, "beginn": 343, "aspect": [343, 367, 1111], "guid": [343, 344, 345, 353, 1111], "through": [343, 345, 346, 348, 351, 354, 355, 358, 363, 364, 366, 367, 368, 369, 380, 509, 539, 542], "journei": [343, 1111, 1117], "inclusvi": 343, "big": [343, 381], "team": [343, 344, 345], "board": 343, "contributor": [343, 344, 345, 363, 1111], "section": [343, 345, 346, 348, 349, 350, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 367, 368, 1053, 1054, 1055, 1057], "below": [343, 344, 346, 347, 348, 349, 351, 354, 358, 359, 360, 361, 364, 365, 366, 367, 368, 369, 380, 403, 414, 418, 419, 509, 547, 550, 567, 570, 579, 703, 706, 863, 870, 873, 875, 921, 923, 949, 963, 966, 967, 970, 1053, 1054, 1055, 1058, 1059, 1062, 1111], "best": [343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 745, 795], "go": [343, 344, 345, 346, 348, 349, 351, 358, 363, 367, 381, 1013, 1024], "finish": [343, 344, 348, 1111], "dive": [343, 345, 346, 363, 366, 367, 381, 1111], "environ": [343, 345, 347, 380], "basic": [343, 346, 347], "fork": [343, 344, 745, 796], "doc": [343, 346, 350, 362, 364, 367, 368, 1111], "document": [343, 345, 365, 367, 369], "local": [343, 344, 347, 354], "task": [343, 345, 380, 1009, 1010, 1011, 1012, 1111], "help": [343, 344, 351, 355, 357, 358, 366, 367, 368, 379, 745, 751, 1069, 1094, 1111], "video": [343, 345, 350, 351, 362], "realli": [344, 358, 381], "contribut": [344, 345, 346, 364, 1117], "toward": [344, 364, 949, 983, 986, 1111, 1117], "page": [344, 345, 365, 369, 379, 1111, 1117], "explain": [344, 345, 346, 349, 350, 351, 353, 354, 355, 357, 358, 359, 360, 361, 362, 364, 365, 366, 367, 368, 369, 1111, 1117], "main": [344, 347, 356, 358, 403, 408, 418, 419, 863, 873, 875, 921, 923], "prefer": [344, 358], "git": [344, 345], "submodul": [344, 345, 346, 347, 352, 353, 354, 360, 363, 364, 368, 1111, 1146, 1147, 1154, 1155], "com": 344, "unifyai": [344, 347], "http": [344, 350, 422, 431, 434, 509, 527, 530, 567, 570, 571, 574, 579, 604, 687, 690, 719, 722, 723, 726, 819, 821, 822, 824, 949, 963, 966, 983, 986, 1053, 1054, 1055, 1058, 1059, 1062, 1069, 1074, 1077], "gh": 344, "your_fold": 344, "id": [344, 357, 358, 459, 478, 1144, 1145], "cours": [344, 345, 351, 367, 381], "whatev": [344, 381], "integr": [344, 353, 422, 428], "familiar": [344, 346], "sure": [344, 346, 352], "elig": 344, "free": [344, 345, 346, 347, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 380, 1111], "student": 344, "licenc": 344, "peopl": [344, 345, 348], "seem": [344, 368, 381], "miss": [344, 351, 353, 357, 358, 1148, 1152], "explicit": [344, 347, 358, 359, 361, 364, 381], "remind": 344, "channel": [344, 345, 346, 347, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 745, 772, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1141, 1142], "pace": 344, "suggest": [344, 345, 349], "latest": [344, 346, 347, 350, 381, 422, 431, 434, 509, 527, 530, 567, 570, 571, 574, 579, 604, 687, 690, 719, 722, 723, 726, 949, 963, 966, 983, 986, 1053, 1054, 1055, 1058, 1059, 1062, 1069, 1074, 1077, 1132, 1141], "packag": [344, 347, 381], "ensur": [344, 345, 353, 357, 359, 362, 745, 789], "pypi": [344, 346, 381], "person": [344, 345], "experi": [344, 365, 367, 381], "avoid": [344, 345, 353, 355, 356, 358, 366, 459, 509, 600, 603], "pip": [344, 380, 1111], "instal": [344, 347, 380, 1111], "abil": [344, 365, 381], "perhap": [344, 366, 367, 368, 381], "track": [344, 345, 459, 1013, 1025, 1144, 1145], "run": [344, 347, 352, 353, 355, 362, 364, 365, 366, 367, 368, 369, 380, 381, 459, 468, 819, 821, 822, 824, 832, 834, 1009, 1010, 1011, 1012, 1132, 1143, 1144, 1145], "command": [344, 347, 1111], "ivy_dev": [344, 345, 347], "name": [344, 345, 347, 350, 353, 364, 366, 367, 369, 400, 401, 745, 751, 863, 876, 878, 905, 907, 912, 1053, 1054, 1055], "setup": 344, "click": [344, 345, 350, 1111], "icon": [344, 345], "side": [344, 345], "choos": [344, 345, 369, 459, 504, 509, 664, 667, 668, 671, 1048, 1052, 1053, 1054, 1055, 1057, 1069, 1074, 1077, 1078, 1081, 1082, 1085], "panel": 344, "select": [344, 345, 353, 364, 366, 369, 381], "drop": [344, 381], "down": [344, 366], "path": [344, 347], "manual": [344, 345, 353, 368, 1013, 1014, 1023, 1024], "builtin": [344, 347, 366, 368], "requir": [344, 347, 349, 350, 351, 353, 356, 357, 359, 360, 362, 366, 381, 400, 401, 509, 719, 722, 863, 876, 878, 949, 993, 996, 1121, 1122], "cmd": [344, 347], "directori": [344, 345, 347, 745, 806], "folder": [344, 345, 347, 349, 352, 353, 354], "abov": [344, 345, 347, 350, 351, 354, 355, 357, 358, 361, 362, 366, 367, 368, 369, 403, 414, 418, 419, 422, 431, 434, 509, 522, 527, 530, 547, 550, 567, 570, 571, 574, 579, 604, 678, 681, 687, 690, 703, 706, 719, 722, 723, 726, 732, 745, 773, 850, 853, 862, 863, 870, 873, 875, 876, 878, 921, 923, 949, 963, 966, 967, 970, 983, 986, 1031, 1032, 1035, 1036, 1038, 1039, 1053, 1054, 1055, 1058, 1059, 1062, 1069, 1074, 1077, 1086, 1089, 1090, 1093, 1094, 1102, 1103, 1106], "m": [344, 345, 347, 348, 364, 403, 414, 418, 419, 745, 754, 863, 864, 866, 870, 873, 875, 876, 878, 879, 881, 882, 884, 885, 888, 893, 895, 896, 898, 899, 901, 902, 904, 905, 907, 909, 911, 912, 914, 915, 917, 921, 923, 1036, 1041, 1042, 1044], "python3": [344, 347], "script": [344, 345, 347, 351, 364, 381], "bat": [344, 345, 347], "OR": [344, 345, 347, 509, 559, 562, 668, 671, 1102, 1107, 1110], "bin": [344, 345, 347], "mac": [344, 345, 347], "linux": [344, 345, 347], "virtualenv": 344, "os": 344, "note": [344, 345, 349, 350, 351, 358, 509, 699, 702, 863, 876, 878, 912, 949, 993, 996, 1053, 1055, 1069, 1078, 1081], "tick": [344, 345], "To": [344, 351, 354, 358, 367, 368, 369, 1111], "ivy_test": [344, 345], "test_array_api": [344, 345, 352, 353], "cd": [344, 345, 347], "txt": 344, "visual": [344, 381], "jetbrain": 344, "remot": 344, "mitig": 344, "potenti": [344, 363, 509, 600, 603], "conflict": [344, 345, 367], "yet": [344, 346, 358], "particular": [344, 345, 349, 361, 509, 510, 513], "system": [344, 381, 863, 909, 911], "instruct": [344, 346], "desktop": 344, "wsl": 344, "powershel": 344, "admin": 344, "visit": 344, "link": 344, "profession": 344, "execut": [344, 347, 358, 361, 364, 366, 369, 381, 745, 816], "deploy": 344, "top": [344, 345, 353, 367, 368, 1111], "press": [344, 367, 1111], "ok": 344, "caus": [344, 345, 351, 353, 358, 361, 381], "earlier": [344, 345], "might": [344, 345, 349, 353, 356, 364, 366, 367, 745, 766], "necessari": [344, 351, 355, 358, 361], "virtualis": 344, "detail": [344, 345, 346, 349, 352, 353, 354, 355, 356, 358, 362, 367, 368, 403, 409, 1053, 1054, 1055, 1057], "sudo": 344, "apt": 344, "ca": 344, "certif": 344, "curl": 344, "gnupg": 344, "lsb": 344, "mkdir": 344, "keyr": 344, "fssl": 344, "download": [344, 353], "gpg": 344, "dearmor": 344, "o": [344, 364, 745, 754], "echo": 344, "deb": 344, "arch": 344, "dpkg": 344, "architectur": [344, 369, 381], "lsb_releas": 344, "cs": 344, "tee": 344, "null": 344, "ce": 344, "cli": 344, "containerd": 344, "io": 344, "compos": [344, 358, 381], "plugin": 344, "systemctl": 344, "permiss": 344, "relat": [344, 345, 380, 459], "post": [344, 369, 1031, 1032, 1035, 1111, 1117], "It": [344, 345, 347, 348, 349, 350, 351, 355, 357, 358, 361, 364, 366, 367, 368, 392, 395, 459, 504, 509, 510, 513, 514, 517, 518, 521, 522, 525, 527, 530, 531, 534, 535, 539, 542, 547, 550, 551, 554, 555, 558, 559, 562, 563, 566, 567, 570, 571, 574, 575, 578, 579, 582, 596, 599, 600, 603, 604, 620, 623, 624, 627, 628, 631, 632, 635, 640, 643, 644, 647, 648, 651, 652, 655, 656, 659, 660, 663, 664, 667, 668, 671, 672, 675, 678, 681, 683, 686, 687, 690, 695, 698, 699, 702, 703, 706, 707, 710, 711, 714, 715, 718, 719, 722, 723, 726, 727, 731, 732, 745, 758, 760, 771, 933, 934, 937, 939, 942, 944, 947, 949, 950, 953, 963, 966, 967, 970, 971, 974, 975, 978, 983, 986, 989, 992, 993, 996, 997, 1000, 1036, 1038, 1039, 1048, 1049, 1058, 1059, 1062, 1064, 1067, 1102, 1103, 1106, 1107, 1110], "headach": 344, "arm": 344, "m1": 344, "instead": [344, 345, 346, 350, 351, 353, 354, 358, 361, 362, 364, 366, 367, 381], "featur": [344, 349, 362, 367, 1111], "vm": 344, "azur": 344, "cloud": [344, 380], "defin": [344, 346, 349, 350, 359, 362, 366, 368, 381, 509, 678, 681, 699, 702, 745, 798, 863, 867, 869, 876, 878, 909, 911, 1036, 1038, 1039, 1069, 1074, 1077, 1078, 1081, 1082, 1085], "dockerfil": [344, 347], "longer": [344, 359, 361], "worri": 344, "platform": 344, "agnost": [344, 357, 362, 364, 366, 369, 381, 1111], "usual": 344, "studio": 344, "favourit": 344, "extens": [344, 345, 350, 403, 414, 422, 431, 434, 509, 522, 527, 530, 547, 550, 567, 570, 571, 574, 579, 604, 687, 690, 703, 706, 719, 722, 723, 726, 732, 863, 870, 949, 963, 966, 967, 970, 983, 986, 1053, 1054, 1055, 1058, 1059, 1062, 1069, 1074, 1077, 1102, 1103, 1106], "theme": 344, "too": [344, 345, 381, 509, 522, 678, 681], "done": [344, 345, 351, 353, 367], "unsupport": [344, 359, 422, 443, 444], "slow": 344, "ipad": 344, "long": [344, 345, 351, 850, 860], "browser": 344, "cool": [344, 349], "requisit": 344, "head": [344, 358, 850, 861, 1111, 1132, 1143], "pane": [344, 345], "readi": [344, 346], "begin": [344, 1013, 1014, 1024], "outlin": [344, 345, 346, 348, 350, 353, 354, 358, 361, 366], "dropdown": 344, "tab": [344, 367, 1111], "master": [344, 345, 358], "vs": 344, "view": [344, 345, 403, 409, 850, 853, 857], "built": [344, 365, 403, 404, 459, 1132, 1143, 1144, 1145], "bottom": 344, "box": 344, "patient": 344, "upto": 344, "minut": 344, "launch": 344, "That": [344, 345, 366, 367, 368, 509, 699, 702], "refer": [344, 345, 353, 354, 359, 362, 381, 403, 408, 509, 600, 603, 648, 651, 819, 821, 822, 824, 863, 924, 926, 930, 932, 1069, 1090, 1093, 1098, 1101, 1102, 1103, 1106, 1107, 1110, 1132, 1142], "approach": [344, 345, 353, 354, 358, 366, 367, 381], "colour": 344, "applic": [344, 359, 360, 368, 850, 861, 862, 1013, 1019, 1025], "good": [344, 345, 346, 347, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 364, 368], "chanc": 344, "vscode": 344, "explor": [344, 365, 369, 380], "troubleshoot": 344, "sometim": [344, 345], "ever": [344, 345, 346, 347, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362], "64": [344, 367, 368, 509, 719, 722, 723, 726, 850, 856, 857, 863, 899, 901, 1069, 1070, 1073, 1097, 1111, 1132, 1143], "bit": [344, 351, 354, 358, 366, 422, 441, 442, 445, 509, 551, 554, 555, 558, 563, 566, 1069, 1086, 1089, 1094], "usr": 344, "more": [344, 345, 346, 348, 349, 351, 353, 354, 355, 356, 357, 358, 361, 362, 363, 364, 365, 366, 367, 368, 369, 380, 381, 403, 404, 422, 429, 509, 600, 603, 863, 885, 888, 949, 967, 970, 1053, 1054, 1055, 1057, 1111], "nutshel": [344, 362], "hook": 344, "lint": 344, "fix": [344, 345], "fail": [344, 346, 352, 353, 364, 366], "attempt": [344, 381], "succe": 344, "problemat": 344, "proce": [344, 345, 346, 347, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362], "modifi": [344, 345, 350, 354, 359, 360, 364], "properli": [344, 348], "enter": [344, 345, 357, 359, 360, 362, 459], "unsur": [344, 345, 346, 347, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362], "feel": [344, 345, 346, 347, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 1111], "server": [345, 1111], "context": [345, 351, 358, 359, 360, 459, 745, 796, 850, 861, 1132, 1143], "suitabl": [345, 349, 358], "quick": [345, 348, 368], "tendenc": 345, "land": 345, "end": [345, 358, 361, 363, 380, 381, 403, 404, 509, 539, 542, 1111, 1117], "world": 345, "come": [345, 346, 368, 379, 1111, 1117], "fly": 345, "hard": [345, 366], "receiv": [345, 353, 359, 360, 459, 468, 469, 745, 752, 795, 1132, 1142], "respons": [345, 347], "internship": 345, "comment": 345, "trigger": 345, "unansw": 345, "label": [345, 364, 365, 369, 933, 934, 937, 939, 942, 944, 947], "respond": 345, "someon": [345, 381], "els": [345, 346, 349, 354, 355, 361, 364, 366, 368, 369, 381, 745, 755, 766, 770, 1013, 1023], "strive": [345, 381], "repli": 345, "newli": [345, 361, 400, 401, 422, 428, 745, 756], "bug": [345, 353], "serv": [345, 353, 354, 357, 358, 362, 363, 1111], "suspect": 345, "behaviour": [345, 350, 353, 357, 358, 361, 362, 366], "observ": 345, "confid": 345, "wrong": 345, "someth": [345, 349, 367, 368, 381], "bet": 345, "act": [345, 351, 381], "placehold": [345, 357, 362, 1013, 1025], "mark": [345, 353], "ii": [345, 1069, 1070, 1073, 1097], "iii": 345, "titl": [345, 1111], "issue_numb": 345, "delet": [345, 347], "No": [345, 364], "progress": [345, 358, 365, 369], "pr": 345, "soon": [345, 358, 379, 381, 1111, 1117], "solut": [345, 353, 358, 863, 909, 911], "review": [345, 349], "merg": 345, "everi": [345, 346, 347, 351, 352, 353, 354, 355, 356, 358, 361, 362, 364, 366, 368, 403, 410, 411, 745, 746, 749], "dai": 345, "close": [345, 350, 509, 600, 603, 703, 706, 863, 912], "likewis": [345, 350, 354, 358, 359, 362, 367], "freed": 345, "purpos": [345, 347, 351, 353, 354, 356, 357, 358, 362, 363, 366, 509, 600, 603, 1111], "remain": [345, 351, 381, 509, 522, 678, 681, 699, 702, 949, 979, 982, 1013, 1019], "short": [345, 368, 850, 860], "basi": [345, 352, 367], "situat": [345, 369], "alloc": [345, 381, 403, 418, 419, 422, 428, 459], "upon": [345, 351, 353, 361, 381], "period": 345, "prevent": [345, 361, 366, 819, 821, 822, 824, 832, 834, 1069, 1094, 1148, 1149, 1150], "unabl": 345, "obvious": 345, "never": [345, 358], "reflect": [345, 357], "qualiti": 345, "hypothet": 345, "frustrat": 345, "delai": 345, "busi": 345, "fine": [345, 366, 369], "becaus": [345, 350, 353, 354, 355, 357, 359, 360, 361, 362, 364, 368, 369, 381], "inact": 345, "me": 345, "unfairli": 345, "definit": [345, 354, 359, 366, 863, 864, 866, 867, 869], "investig": 345, "Then": [345, 347, 366, 381], "practic": [345, 353], "separ": [345, 353, 357, 364, 366, 367], "branch": [345, 358, 381, 400, 401, 509, 539, 542], "role": [345, 365], "date": 345, "upstream": [345, 352], "complic": [345, 364], "root": [345, 347, 367, 509, 719, 722, 1036, 1037, 1041, 1042, 1044], "merge_with_upstream": 345, "sh": 345, "name_of_your_branch": 345, "resolv": [345, 1069, 1086, 1089, 1094], "push": [345, 352], "both": [345, 350, 351, 354, 358, 360, 361, 362, 364, 366, 367, 368, 369, 380, 381, 422, 431, 434, 449, 509, 522, 527, 530, 571, 574, 604, 687, 690, 695, 698, 719, 722, 723, 726, 732, 745, 773, 850, 853, 862, 863, 867, 869, 885, 888, 924, 926, 949, 983, 986, 1031, 1032, 1035, 1069, 1074, 1077, 1102, 1103, 1106], "abort": 345, "tediou": 345, "resolut": 345, "stash": 345, "reinstat": 345, "fetch": 345, "uncommit": 345, "unstag": 345, "untrack": 345, "comprehens": 345, "explan": [345, 350, 358, 362, 366], "atlassian": 345, "tutori": 345, "quit": [345, 346, 350, 354, 356, 357], "logic": [345, 356, 357, 359, 360, 366, 459, 495, 509, 660, 663, 664, 667, 668, 671, 1102, 1103, 1106, 1107, 1110, 1111], "blame": 345, "revis": 345, "author": [345, 1111], "eg": 345, "past": 345, "l": [345, 348, 863, 864, 866, 876, 878, 885, 888, 921, 923], "grep": 345, "v": [345, 364, 367, 368, 369, 850, 862, 1111, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1152, 1154, 1155], "commit_id": 345, "handi": 345, "histori": 345, "toggl": 345, "vertic": 345, "highlight": [345, 351], "previou": [345, 353, 362, 369, 381, 819, 822, 824, 832, 834], "inform": [345, 422, 442, 445, 745, 751, 819, 845], "whenev": [345, 366, 367], "tag": 345, "think": [345, 351], "interact": [345, 1111], "gain": [345, 363, 368, 1123], "yourself": [345, 346, 380], "simpler": [345, 366], "cannot": [345, 355, 359, 369], "least": [345, 351, 354, 357, 863, 885, 888], "final": [345, 350, 351, 354, 357, 359, 361, 364, 366, 367, 403, 412, 413, 745, 772, 1132, 1143], "tickbox": 345, "corner": 345, "span": 345, "intent": [345, 361], "larg": [345, 367, 509, 522, 678, 681], "discourag": 345, "philosophi": 345, "increment": [345, 745, 788], "frequent": [345, 346], "valuabl": 345, "infrequ": 345, "earli": [345, 1111], "wast": 345, "spot": [345, 354], "mistak": 345, "propos": 345, "mountain": 345, "advoc": [345, 381], "individu": [345, 346, 354], "per": [345, 367, 459, 850, 851, 852, 853, 854, 855, 856, 857, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139], "style": [345, 1048, 1051], "ve": [345, 363, 366, 1036, 1037, 1111], "actual": [345, 348, 354, 361, 363, 366, 368, 381], "aim": [345, 363], "part": [345, 349, 352, 353, 354, 364, 365, 369, 380, 381, 403, 418, 419, 819, 822, 824, 827, 829, 832, 834, 836, 838, 840, 842, 1144, 1145], "subsect": 345, "session": [345, 1111], "block": [345, 354, 363, 365, 369, 381, 459, 1111], "smaller": [345, 364, 369, 949, 950, 953, 983, 986, 1069, 1086, 1089, 1094], "edit": 345, "beauti": 345, "particularli": [345, 367, 381], "concern": [345, 348, 351, 358, 361, 363], "effici": [345, 353, 354, 358, 361, 362, 364, 367, 381], "difficult": [345, 353, 381, 1053, 1054, 1055, 1057], "undo": 345, "stress": 345, "frequenc": [345, 745, 772], "pycharm": 345, "pytest": [345, 353], "button": 345, "declar": 345, "insid": [345, 347, 349, 359], "exec": 345, "rm": 345, "rf": 345, "cp": 345, "ivy_contain": 345, "bash": [345, 347], "test_ivi": [345, 353], "test_funct": 345, "test_cor": 345, "test_imag": 345, "test_random_crop": 345, "header": 345, "q": [345, 381, 850, 862, 863, 876, 878, 905, 907], "array_api_test": 345, "test_creation_funct": 345, "test_arang": 345, "window": [345, 347, 850, 851, 852, 853, 854, 855, 856, 857, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139], "variou": [345, 350, 356, 362, 380], "wherebi": [346, 358, 1013, 1025], "broad": 346, "todo": [346, 353], "commit": [346, 353], "NOT": [346, 509, 664, 667], "resourc": 346, "hypothesi": 346, "cover": [346, 350, 351, 354, 356, 363], "lambda": [346, 364, 367, 1148, 1151, 1153], "direct": [346, 368, 369, 380, 1058, 1064, 1067], "bind": [346, 358], "aforement": 346, "categori": [346, 349, 357, 358, 359, 363, 1111], "parent": [346, 366], "hint": [346, 349, 350, 354, 357, 361, 362, 403, 414, 422, 431, 434, 509, 522, 527, 530, 547, 550, 567, 570, 571, 574, 579, 604, 687, 690, 703, 706, 719, 722, 723, 726, 732, 745, 773, 850, 853, 862, 863, 870, 949, 963, 966, 967, 970, 983, 986, 1031, 1032, 1035, 1053, 1054, 1055, 1058, 1059, 1062, 1069, 1074, 1077, 1102, 1103, 1106], "its": [346, 347, 350, 422, 429, 459, 503, 863, 885, 888, 949, 963, 966, 979, 982, 983, 986, 997, 1000], "thorough": [346, 350, 353, 362], "transpil": [346, 363, 365, 1111, 1117], "builder": [347, 379, 381, 1111], "maco": 347, "ubuntu": 347, "uid": 347, "make_docs_without_dock": 347, "rel": [347, 819, 822, 824, 827, 829, 832, 834, 836, 838, 840, 842, 863, 873, 875, 884, 893, 895, 902, 904, 921, 923, 949, 967, 970, 983, 986, 1058, 1059, 1062, 1064, 1067, 1111], "synchron": 347, "rest": [347, 365, 369], "remove_doc": 347, "_": [347, 350, 358, 361, 366, 367, 422, 431, 434, 509, 527, 530, 567, 570, 571, 574, 579, 604, 687, 690, 719, 722, 723, 726, 819, 821, 822, 824, 863, 930, 932, 949, 963, 966, 983, 986, 1053, 1054, 1055, 1058, 1059, 1062, 1069, 1074, 1077], "privat": [347, 1148, 1152], "fulfil": [347, 363, 1111], "autogenerated_sourc": 347, "png": [347, 367], "_imag": 347, "lastli": 347, "rst": 347, "partial_sourc": 347, "conf": 347, "create_rst_fil": 347, "filter": [347, 850, 851, 852, 853, 854, 855, 856, 857, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139], "repres": [347, 366, 403, 414, 422, 441, 509, 517, 518, 521, 522, 531, 534, 538, 543, 546, 578, 579, 582, 678, 681, 715, 718, 736, 740, 850, 859, 863, 872, 908, 909, 911], "overal": [347, 350, 358, 359, 360, 369], "markup": 347, "extract": [347, 349], "get_functions_and_class": 347, "doctr": 347, "readm": [347, 381], "module_nam": 347, "copy_readme_to_rst": 347, "tabl": 347, "toc": 347, "tree": 347, "append_toctree_to_rst": 347, "create_index_rst": 347, "\u03c0": [347, 509, 514, 527, 530, 535, 539, 542], "namespac": [347, 349, 359, 364, 369], "who": [348, 363, 381], "mainli": [348, 365, 367], "under": [348, 350, 351, 352, 353, 354, 358, 363, 364, 367, 369], "hood": [348, 351, 353, 354, 358, 363, 364, 367, 369], "weed": [348, 363], "behind": [348, 363, 365, 819, 822, 824, 827, 829, 832, 834, 836, 838, 840, 842], "navig": 348, "tour": 348, "primari": [348, 353, 355, 361, 381], "composit": [348, 353, 355, 357, 358, 361, 364, 368, 369, 381], "nestabl": [348, 350, 351, 353, 361, 422, 431, 434, 509, 522, 527, 530, 571, 574, 604, 687, 690, 719, 722, 723, 726, 732, 745, 773, 850, 853, 862, 949, 983, 986, 1031, 1032, 1035, 1069, 1074, 1077, 1102, 1103, 1106], "dynam": [348, 359, 360, 361, 364, 400, 401], "runtim": [348, 353, 459], "h": [348, 358, 850, 853, 854, 855, 856, 857], "j": [348, 745, 753, 754, 863, 921, 923, 1069, 1070, 1073, 1097], "k": [348, 364, 403, 408, 418, 419, 745, 753, 850, 862, 863, 885, 888, 905, 907, 909, 911, 912, 914, 915, 917, 921, 923, 1036, 1041, 1042, 1044, 1048, 1051], "borrow": 348, "n": [348, 403, 414, 418, 419, 745, 754, 850, 858, 863, 873, 875, 884, 885, 888, 892, 893, 895, 896, 898, 899, 901, 902, 904, 905, 907, 912, 914, 915, 917, 921, 923, 924, 926, 927, 929, 930, 932, 949, 959, 962, 963, 966, 971, 974, 993, 996, 1005, 1008, 1036, 1041, 1042, 1044, 1048, 1051, 1069, 1078, 1081, 1090, 1093, 1094, 1098, 1101, 1102, 1103, 1106, 1107, 1110], "taken": [349, 369, 863, 873, 875], "constant": [349, 354, 368, 369, 381, 459, 468, 469, 949, 959, 962, 1013, 1019, 1031, 1032, 1035, 1123, 1124, 1128, 1131, 1144, 1145, 1146, 1147], "compil": [349, 358, 363, 365, 381, 1111, 1144, 1145, 1148, 1149, 1150, 1151, 1152, 1153], "meta": [349, 357, 1010, 1011, 1012], "overlap": 349, "sever": [349, 381, 863, 882], "judgement": 349, "locat": [349, 353, 355, 360, 1036, 1037], "some_namespac": 349, "some_backend": 349, "another_backend": 349, "break": [349, 362, 366, 381, 1111], "anyth": [349, 1111], "refactor": 349, "ongo": 349, "subfold": [349, 353], "via": [349, 358, 359, 360, 361, 364, 366, 367, 380, 1013, 1014, 1023, 1024], "file_nam": 349, "my_func": [349, 351], "int": [349, 351, 354, 358, 359, 360, 361, 362, 369, 392, 397, 400, 401, 403, 406, 408, 410, 411, 412, 413, 416, 418, 419, 420, 422, 430, 439, 441, 442, 445, 448, 459, 481, 484, 485, 486, 487, 495, 496, 497, 503, 504, 509, 547, 550, 551, 554, 555, 558, 559, 562, 563, 566, 567, 570, 745, 751, 763, 764, 767, 768, 769, 772, 773, 782, 798, 801, 802, 807, 808, 817, 819, 821, 822, 824, 832, 834, 850, 851, 853, 855, 856, 857, 863, 867, 869, 873, 875, 918, 920, 921, 923, 924, 926, 927, 929, 933, 939, 942, 944, 947, 949, 955, 958, 959, 962, 963, 966, 967, 970, 971, 974, 975, 978, 983, 986, 988, 989, 992, 993, 996, 997, 1000, 1001, 1004, 1005, 1008, 1009, 1010, 1011, 1012, 1013, 1025, 1031, 1032, 1035, 1036, 1037, 1038, 1039, 1041, 1042, 1044, 1046, 1048, 1049, 1050, 1058, 1059, 1062, 1064, 1067, 1069, 1074, 1077, 1078, 1081, 1082, 1085, 1090, 1093, 1094, 1098, 1101, 1102, 1103, 1106, 1107, 1110], "nativedtyp": [349, 359, 360, 362, 403, 404, 405, 406, 407, 408, 410, 411, 415, 416, 417, 420, 421, 422, 427, 428, 438, 439, 440, 449, 1069, 1094], "nativedevic": [349, 359, 360, 362, 403, 404, 405, 406, 407, 408, 410, 411, 412, 413, 415, 416, 417, 420, 421, 459, 476, 477, 478, 492, 498, 500, 502, 504, 505, 508, 745, 798, 1036, 1037, 1038, 1039, 1041, 1042, 1044], "my": 349, "numer": [349, 368, 403, 414, 422, 428, 509, 510, 513, 522, 571, 574, 583, 586, 600, 603, 604, 607, 608, 611, 620, 623, 624, 627, 628, 631, 632, 635, 664, 667, 668, 671, 678, 681, 683, 686, 687, 690, 695, 698, 699, 702, 707, 710, 723, 726, 727, 731, 741, 744, 745, 780, 781, 803, 804, 809, 810, 863, 867, 869, 885, 888, 899, 901, 912, 918, 920, 921, 923, 924, 926, 1036, 1047, 1048, 1049, 1050, 1069, 1074, 1077, 1086, 1089, 1094, 1123], "cooler": 349, "produc": [349, 459, 468, 469, 850, 862], "something_cool": 349, "category_nam": [350, 354, 359, 360, 362], "contrast": [350, 362], "backend_nam": [350, 354, 355, 356, 359, 360, 362], "account": 350, "instanti": 350, "firstli": [350, 351, 354, 357, 359, 361, 367], "templat": [350, 1111], "spec": [350, 351], "api_specif": [350, 422, 431, 434, 509, 527, 530, 567, 570, 571, 574, 579, 604, 687, 690, 719, 722, 723, 726, 949, 963, 966, 983, 986, 1053, 1054, 1055, 1058, 1059, 1062, 1069, 1074, 1077], "array_api": 350, "preview": 350, "render": 350, "incorrectli": 350, "onlin": [350, 1111], "approxim": [350, 392, 393, 509, 514, 517, 518, 521, 527, 530, 531, 534, 535, 539, 542, 575, 578, 579, 582, 596, 600, 603, 640, 643, 644, 647, 648, 651, 652, 655, 695, 698, 711, 714, 715, 718, 732, 863, 884, 893, 895, 902, 904], "tangent": [350, 392, 399, 509, 535, 538, 539, 542, 543, 546, 732, 736, 737, 740], "domain": [350, 509, 514, 517, 518, 521, 527, 530, 531, 534, 535, 539, 542, 575, 578, 579, 582, 596, 600, 603, 640, 643, 644, 647, 652, 655, 711, 714, 715, 718, 719, 722, 732], "infin": [350, 402, 422, 428, 509, 510, 513, 517, 518, 521, 522, 525, 531, 534, 535, 539, 542, 571, 574, 575, 578, 579, 582, 586, 596, 599, 600, 603, 604, 607, 608, 611, 620, 623, 624, 627, 640, 643, 644, 647, 652, 655, 656, 659, 678, 681, 695, 698, 699, 702, 703, 706, 711, 714, 715, 718, 719, 722, 732, 741, 744, 863, 927, 929, 1069, 1074, 1077, 1082, 1085, 1102, 1103, 1106, 1107, 1110], "codomain": [350, 509, 514, 517, 518, 521, 527, 530, 531, 534, 535, 539, 542, 575, 578, 579, 582, 596, 600, 603, 640, 643, 644, 647, 652, 655, 711, 714, 715, 718, 719, 722, 732], "x_i": [350, 509, 510, 513, 514, 517, 518, 521, 527, 530, 531, 534, 535, 551, 554, 571, 574, 575, 578, 579, 582, 596, 600, 603, 604, 620, 623, 624, 627, 628, 631, 640, 643, 644, 647, 652, 655, 664, 667, 683, 686, 703, 706, 707, 710, 711, 714, 715, 718, 719, 722, 723, 726, 732, 741, 744, 1053, 1054, 1055, 1057, 1069, 1074, 1077, 1078, 1081, 1082, 1085, 1090, 1093, 1094, 1098, 1101], "assum": [350, 355, 359, 366, 367, 381, 403, 414, 422, 431, 434, 509, 522, 527, 530, 547, 550, 567, 570, 571, 574, 575, 579, 604, 687, 690, 703, 706, 711, 714, 719, 722, 723, 726, 732, 745, 773, 850, 853, 862, 863, 870, 949, 963, 966, 967, 970, 983, 986, 1031, 1032, 1035, 1053, 1054, 1055, 1058, 1059, 1062, 1069, 1074, 1077, 1102, 1103, 1106], "express": [350, 364, 369, 509, 514, 527, 530, 535, 539, 542, 575, 711, 714, 732], "radian": [350, 509, 514, 527, 530, 535, 539, 542, 575, 711, 714, 732], "float": [350, 354, 358, 359, 361, 362, 366, 368, 392, 394, 402, 403, 404, 406, 408, 410, 411, 412, 413, 416, 420, 422, 428, 438, 442, 447, 450, 459, 492, 498, 502, 505, 508, 509, 510, 513, 514, 517, 518, 521, 522, 525, 527, 530, 531, 534, 535, 538, 539, 542, 543, 546, 567, 570, 571, 574, 575, 578, 579, 582, 583, 586, 588, 591, 596, 599, 600, 603, 604, 607, 608, 611, 612, 615, 616, 619, 632, 635, 636, 639, 640, 643, 644, 647, 652, 655, 656, 659, 678, 681, 683, 686, 687, 690, 691, 694, 695, 698, 699, 702, 703, 706, 711, 714, 715, 718, 719, 722, 727, 731, 732, 736, 740, 741, 744, 745, 757, 758, 760, 772, 780, 781, 803, 804, 809, 810, 819, 821, 822, 824, 827, 829, 832, 834, 836, 838, 840, 842, 850, 853, 857, 862, 863, 864, 866, 870, 876, 878, 879, 881, 882, 884, 893, 895, 902, 904, 905, 907, 909, 911, 912, 927, 929, 933, 934, 937, 939, 942, 944, 947, 1009, 1010, 1011, 1012, 1031, 1032, 1035, 1036, 1041, 1042, 1044, 1053, 1054, 1055, 1057, 1069, 1074, 1077, 1078, 1081, 1082, 1085, 1086, 1089, 1090, 1093, 1094, 1098, 1101], "operand": [350, 509, 514, 517, 518, 521, 522, 525, 527, 530, 531, 534, 535, 539, 542, 567, 570, 571, 574, 575, 578, 579, 582, 596, 599, 600, 603, 604, 640, 643, 644, 647, 652, 655, 656, 659, 678, 681, 695, 698, 699, 702, 703, 706, 711, 714, 715, 718, 719, 722, 732, 741, 744, 1069, 1070, 1073, 1074, 1077, 1082, 1085, 1094, 1097], "whose": [350, 403, 418, 419, 509, 517, 518, 521, 531, 534, 538, 543, 546, 575, 578, 579, 582, 695, 698, 711, 714, 715, 718, 732, 736, 740, 745, 756, 863, 864, 866, 870, 873, 875, 876, 878, 879, 881, 882, 884, 893, 895, 896, 898, 899, 901, 902, 904, 905, 907, 909, 911, 912, 914, 915, 917, 921, 923, 949, 967, 970, 983, 986, 1053, 1054, 1055, 1069, 1070, 1073, 1097], "ref": [350, 509, 563, 566, 632, 635, 678, 681, 687, 690, 699, 702, 727, 731, 949, 993, 996], "promot": [350, 354, 359, 422, 428, 431, 434, 449, 450, 454, 509, 514, 517, 518, 521, 522, 525, 527, 530, 531, 534, 535, 538, 543, 546, 547, 550, 555, 558, 559, 562, 563, 566, 567, 570, 575, 578, 579, 582, 583, 596, 599, 600, 603, 640, 643, 644, 647, 652, 655, 656, 659, 672, 675, 678, 681, 695, 698, 699, 702, 711, 714, 715, 718, 719, 722, 732, 736, 740, 863, 864, 866, 867, 869, 882, 884, 885, 888, 893, 895, 899, 901, 902, 904, 909, 911, 924, 926, 927, 929, 949, 993, 996, 1069, 1078, 1081], "But": [350, 358, 369], "needless": 350, "info": [350, 1111], "subset": [350, 353, 362, 364], "extend": [350, 353, 355, 362], "renam": 350, "conform": [350, 403, 414, 422, 431, 434, 509, 522, 527, 530, 547, 550, 567, 570, 571, 574, 579, 600, 603, 604, 687, 690, 703, 706, 719, 722, 723, 726, 732, 863, 870, 949, 963, 966, 967, 970, 983, 986, 1053, 1054, 1055, 1058, 1059, 1062, 1069, 1074, 1077, 1102, 1103, 1106], "org": [350, 422, 431, 434, 509, 527, 530, 567, 570, 571, 574, 579, 604, 687, 690, 719, 722, 723, 726, 819, 821, 822, 824, 949, 963, 966, 983, 986, 1053, 1054, 1055, 1058, 1059, 1062, 1069, 1074, 1077], "elementwise_funct": [350, 509, 527, 530, 567, 570, 571, 574, 579, 604, 687, 690, 719, 722, 723, 726, 949, 983, 986, 1053, 1054, 1055, 1058, 1059, 1062, 1069, 1074, 1077], "descript": [350, 358, 403, 414, 422, 431, 434, 509, 522, 527, 530, 547, 550, 567, 570, 571, 574, 579, 604, 687, 690, 703, 706, 719, 722, 723, 726, 732, 745, 773, 850, 853, 862, 863, 870, 927, 929, 949, 963, 966, 967, 970, 983, 986, 1031, 1032, 1035, 1053, 1054, 1055, 1058, 1059, 1062, 1069, 1074, 1077, 1102, 1103, 1106], "simplic": [350, 368, 380, 403, 414, 422, 431, 434, 509, 522, 527, 530, 547, 550, 567, 570, 571, 574, 579, 604, 687, 690, 703, 706, 719, 722, 723, 726, 732, 745, 773, 850, 853, 862, 863, 870, 949, 963, 966, 967, 970, 983, 986, 1031, 1032, 1035, 1053, 1054, 1055, 1058, 1059, 1062, 1069, 1074, 1077], "judgment": 350, "beyond": [350, 949, 983, 986], "text": 350, "func_nam": [350, 351, 354], "pure": [350, 366, 369, 381], "themselv": [350, 354, 358, 359, 360, 368, 1013, 1014], "operator_nam": 350, "succinct": 350, "contstructor": 350, "though": [350, 354, 359, 367, 381], "forward": [350, 369, 380, 381, 1144, 1145, 1148, 1152], "_forward": [350, 364, 367, 368, 1111], "former": 350, "trainabl": [350, 365, 367, 368, 819, 831, 1121, 1122, 1144, 1145, 1154], "explicitli": [350, 354, 355, 357, 358, 361, 364, 381, 863, 876, 878, 1132, 1141, 1143, 1144, 1145], "latter": [350, 355], "implicit": [350, 358, 364], "docst": 350, "eight": 351, "static_": 351, "op_nam": 351, "__r": 351, "four": [351, 354, 359, 362, 367], "__sub__": [351, 357, 358, 362, 366], "__mul__": [351, 357, 358, 362, 366], "__truediv__": [351, 357, 358], "respect": [351, 357, 358, 359, 362, 403, 414, 509, 510, 513, 522, 525, 539, 542, 547, 550, 555, 558, 559, 562, 563, 566, 567, 570, 583, 586, 588, 591, 599, 607, 608, 611, 612, 615, 616, 619, 632, 635, 636, 639, 656, 659, 660, 663, 668, 671, 672, 675, 678, 681, 687, 690, 699, 702, 727, 731, 819, 821, 822, 824, 826, 827, 829, 832, 834, 836, 838, 840, 842, 863, 905, 907, 1009, 1010, 1011, 1012], "recap": [351, 358, 368], "independ": [351, 352, 356, 358, 364, 369, 863, 867, 869, 909, 911, 1036, 1037], "combinatorili": 351, "variat": [351, 353], "grid": [351, 353, 380, 403, 414], "vari": [351, 353, 358, 366, 1053, 1054, 1055, 1057], "simplest": 351, "small": [351, 354, 364, 368, 381, 509, 678, 681, 863, 884, 893, 895, 902, 904, 1031, 1032, 1035, 1146, 1147], "unus": [351, 361, 400, 401], "18": [351, 358, 509, 567, 570, 863, 873, 875, 899, 901, 1069, 1070, 1073, 1097], "excess": [351, 355, 366], "showcas": [351, 380], "demonstr": [351, 366], "replic": [351, 359], "meant": 351, "imaginari": 351, "some_flag": 351, "another_flag": 351, "54": [351, 509, 575, 579, 719, 722, 850, 862, 863, 899, 901, 1036, 1041, 1069, 1070, 1073, 1097], "jointli": 351, "three": [351, 358, 363, 403, 414, 1111], "x0": [351, 745, 753], "procedur": 351, "sens": [351, 358, 366], "5574077": 351, "1850398": 351, "5463025": 351, "8422884": 351, "91601413": 351, "9647598": 351, "3738229": 351, "1597457": 351, "0963247": 351, "9955841": 351, "3278579": 351, "multi": [351, 358, 363, 381, 850, 861, 863, 867, 869, 1111, 1117, 1132, 1143], "seper": [351, 745, 772], "pars": [351, 381], "satisfi": [351, 863, 930, 932], "far": [351, 360, 365, 366, 1013, 1014, 1024], "asid": [351, 380], "irrelev": [351, 359], "increasingli": 351, "complex": [351, 367, 368, 369, 381, 863, 876, 878, 912], "rule": [351, 353, 354, 357, 358, 359, 422, 428, 431, 434, 450, 509, 538, 543, 546, 563, 566, 583, 678, 681, 699, 702, 736, 740, 863, 864, 866, 867, 869, 899, 901, 909, 911], "count": [351, 367, 459, 497, 863, 924, 926, 949, 967, 970, 1053, 1054, 1055, 1102, 1103, 1106, 1107, 1110], "14254655": 351, "1578213": 351, "380515": 351, "17": [351, 358, 392, 394, 863, 873, 875, 1036, 1041], "trivial": 351, "By": [351, 354, 358, 361, 368, 369, 745, 763, 764, 863, 924, 926, 949, 975, 978, 1069, 1074, 1077, 1078, 1081, 1082, 1085, 1086, 1089, 1090, 1093, 1094, 1098, 1101, 1102, 1103, 1106, 1107, 1110], "non": [351, 358, 359, 364, 400, 401, 422, 428, 446, 509, 664, 667, 668, 671, 850, 853, 863, 870, 893, 895, 912, 918, 920, 924, 926, 927, 929, 1048, 1049, 1050, 1051, 1069, 1074, 1077, 1078, 1081, 1082, 1085, 1086, 1089, 1098, 1101, 1102, 1103, 1106, 1107, 1110, 1144, 1145, 1148, 1152], "dictat": [351, 357, 361, 362], "exlud": 351, "unit": [352, 353, 381, 392, 393, 394, 395, 459], "thoroughli": [352, 353], "ci": [352, 353, 381], "failur": 352, "On": [353, 365, 369], "fixtur": 353, "consum": [353, 358, 362, 459], "300": [353, 509, 703, 706], "hit": [353, 364], "permit": [353, 357, 362], "action": 353, "eleg": 353, "intellig": 353, "sampl": [353, 850, 858, 1036, 1037, 1041, 1042, 1044, 1069, 1090, 1093, 1098, 1101, 1132, 1140], "rang": [353, 367, 368, 369, 403, 404, 412, 413, 1053, 1054, 1069, 1086, 1089, 1094, 1111], "cach": [353, 354, 459, 477, 745, 756], "unexplor": 353, "known": 353, "repeatedli": [353, 358, 1013, 1022], "upload": 353, "artifact": 353, "parametr": 353, "strategi": 353, "statement": [353, 381], "plai": [353, 369], "helper": [353, 367], "verifi": [353, 359, 360, 366, 1111, 1117], "truth": [353, 509, 588, 591, 612, 615, 616, 619, 632, 635, 636, 639, 687, 690], "opt": [353, 355, 361, 366], "defer": [353, 354, 357, 358, 359, 360, 361], "suffic": [353, 356], "catch": [353, 745, 766], "systemat": 353, "safeguard": 353, "inabl": 353, "fact": [353, 367], "categor": [354, 360], "mutual": [354, 358], "constitut": [354, 364, 1069, 1090, 1093, 1098, 1101], "venn": 354, "diagram": 354, "light": [354, 381], "wherea": [354, 357, 359, 360, 362, 369], "hand": [354, 381], "log_pr": [354, 358, 361], "array_arg": 354, "typic": 354, "whatsoev": [354, 358], "commonli": [354, 1069, 1090, 1093, 1098, 1101], "outsid": [354, 360, 364, 366, 369, 949, 950, 953, 993, 996], "denomin": [354, 381, 745, 771, 781, 804, 809, 810, 1031, 1032, 1035, 1146, 1147], "divis": [354, 509, 563, 566, 583, 586, 607, 608, 611, 699, 702, 745, 771, 781, 804, 809, 810, 819, 821, 822, 824, 832, 834, 1148, 1149, 1150], "piec": [354, 356, 357, 364], "deal": [354, 381], "concurr": [354, 358], "weight": [354, 358, 368, 369, 819, 821, 822, 824, 827, 829, 832, 834, 836, 838, 840, 842, 850, 859, 860, 862, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1141, 1142, 1144, 1145, 1148, 1150, 1151], "modif": 354, "decor": [354, 356, 358, 359, 360, 361], "group": [354, 358], "briefli": [354, 367], "cast": [354, 359, 422, 428, 431, 434, 949, 955, 958, 1069, 1086, 1089, 1094, 1111], "get_all_arrays_on_dev": 354, "nested_map": [354, 1013], "index_nest": [354, 1013], "implicit_backend": 355, "unless": [355, 360, 361, 381, 509, 678, 681, 745, 798], "__dict__": [355, 364, 366], "ivy_original_dict": [355, 364], "unmodifi": [355, 359], "moment": [355, 381, 819, 821, 822, 824, 832, 834, 1148, 1149, 1150], "fallback": 355, "freedom": [355, 1069, 1090, 1093, 1098, 1101], "recommend": [355, 509, 664, 667, 668, 671, 699, 702, 1069, 1078, 1081], "achiev": [356, 367, 369], "wrapper": [356, 357, 358, 359, 361, 362, 366], "topic": [356, 366], "tf": [357, 359, 360, 361, 362, 364, 369, 381, 1111], "_data": [357, 366], "organiz": [357, 358], "inherit": [357, 358, 366], "bear": [357, 358, 359], "mind": [357, 358], "necessarili": [357, 358], "although": [357, 358], "underpin": [357, 358, 364], "programmat": [357, 358], "backup": [357, 358], "accident": [357, 358], "readabl": [357, 358, 362, 366, 367], "absent": [357, 358], "perk": [357, 358], "auto": [357, 358, 367], "throw": [357, 366], "imposs": 357, "coupl": [357, 358, 366, 368], "anywai": 357, "secondli": [357, 359], "easier": 357, "five": [358, 367], "decis": [358, 364, 366], "displai": [358, 367], "arbitrarili": [358, 367], "__repr__": 358, "control": [358, 359, 361, 366, 367, 380], "__getattr__": 358, "underli": [358, 509, 547, 550, 559, 562, 567, 570, 672, 675], "__setattr__": 358, "__contains__": 358, "__getstate__": 358, "__setstate__": 358, "unpickl": 358, "expand": [358, 745, 772, 949, 963, 966], "children": 358, "shallowest": 358, "deepest": 358, "67": [358, 509, 567, 570, 579], "22": [358, 509, 567, 570, 863, 873, 875, 899, 901, 1048, 1052, 1069, 1070, 1073, 1097], "25": [358, 509, 719, 722, 723, 726, 863, 873, 875, 882, 933, 939, 942, 1031, 1032, 1035, 1069, 1070, 1073, 1097], "retain_grad": [358, 819, 826], "dy": [358, 819, 826], "dx": [358, 819, 826], "technic": [358, 361, 362, 381], "autograd": [358, 381], "grad": [358, 367, 368, 369, 1111, 1148, 1152], "redund": 358, "num_head": [358, 850, 861, 1132, 1143], "mask": [358, 850, 861, 862], "to_q_fn": [358, 850, 861], "to_kv_fn": [358, 850, 861], "to_out_fn": [358, 361, 850, 861], "to_q_v": [358, 850, 861], "to_kv_v": [358, 850, 861], "to_out_v": [358, 850, 861], "measur": [358, 850, 861, 1132, 1143], "dot": [358, 850, 861, 862, 863, 918, 920, 924, 926, 1132, 1143], "product": [358, 509, 678, 681, 745, 763, 850, 861, 862, 863, 867, 869, 885, 888, 899, 901, 918, 920, 924, 926, 1069, 1070, 1073, 1086, 1089, 1097, 1132, 1143], "implicitli": 358, "intuit": [358, 367, 368], "debug": [358, 367], "chronolog": 358, "had": [358, 361], "sequenti": [358, 368], "flow": [358, 380], "implic": 358, "slightli": [358, 364, 368], "eager": [358, 381], "int8": [359, 422, 443], "int16": [359, 422, 431, 434, 443, 1069, 1086, 1089, 1094], "uint8": [359, 422, 431, 434, 443], "uint16": [359, 422, 444, 1069, 1086, 1089, 1094], "uint32": [359, 422, 444, 1069, 1086, 1089, 1094], "uint64": [359, 422, 444, 1069, 1086, 1089, 1094], "bfloat16": [359, 422, 443], "float16": [359, 422, 444], "all_dtyp": 359, "all_numeric_dtyp": 359, "all_int_dtyp": 359, "all_float_dtyp": 359, "fall": [359, 363, 1111, 1144, 1145, 1148, 1152], "valid": [359, 364, 422, 436, 850, 851, 852, 853, 854, 855, 856, 857, 949, 993, 996, 1102, 1103, 1106, 1107, 1110, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139], "invalid": [359, 863, 924, 926, 1102, 1103, 1106, 1107, 1110], "thirdli": 359, "native_float32": 359, "importantli": [359, 366, 369, 380], "varieti": [359, 360], "conveni": [359, 360, 362, 365, 367, 368], "arguabl": [359, 360], "compound": 359, "overflow": [359, 509, 522, 1069, 1094], "arr": [359, 360, 1031, 1032, 1035], "scalar": [359, 364, 369, 381, 403, 411, 745, 798, 815, 818, 863, 927, 929], "settabl": [359, 360], "jnp": [359, 360, 361, 362, 369, 1111], "jaxarrai": [359, 360, 361, 362], "mx": [359, 360, 361, 1111], "nd": [359, 360, 361, 364, 369, 1111], "deleg": 359, "fill_valu": [359, 403, 410, 411, 509, 591, 615, 616, 619], "as_n": [359, 422, 437, 438, 439, 440, 459, 478, 479, 500], "idx": [360, 366, 745, 751], "tpu": [360, 459, 481, 506], "aliv": [360, 459, 493, 497, 499, 745, 779, 797, 799], "amount": [360, 459, 505, 933, 934, 937, 939, 942, 944, 947], "memori": [360, 361, 379, 381, 459, 477, 498, 503, 505, 508, 850, 860, 1111], "dual": 360, "thrown": [360, 381, 745, 789], "rare": [360, 381], "program": 361, "strictli": 361, "ration": 361, "speak": 361, "subtli": 361, "ensure_in_backend": [361, 745, 789], "x_nativ": 361, "val_n": 361, "is_ivy_arrai": [361, 366, 745], "is_vari": [361, 819], "assign": [361, 366], "elif": 361, "irrespect": [361, 366, 422, 428], "inclus": [361, 403, 404, 1036, 1038, 1039], "omit": [361, 362, 1053, 1054, 1055, 1057], "unspecifi": [361, 509, 695, 698, 699, 702, 863, 876, 878, 949, 993, 996], "predominantli": [361, 380], "math": [361, 369, 1111], "presenc": 361, "altern": [361, 367], "_wrap_fn": 361, "maxim": [361, 364], "inner": [361, 366, 863, 876, 878, 885, 888, 1009, 1010, 1011, 1012], "third": [361, 381, 863, 912, 1053, 1054], "addition": [361, 362], "leverag": 361, "equival": [361, 367, 369, 403, 404, 509, 563, 566, 664, 667, 668, 671, 699, 702, 863, 884, 893, 895, 902, 904, 909, 911, 927, 929], "input_arrai": 361, "adress": 362, "revisit": [362, 369], "dedic": [362, 366, 368, 819, 848, 1121, 1122], "__div__": 362, "dicat": 362, "futher": 362, "absenc": 362, "pep": 362, "484": 362, "annot": 362, "brittl": 362, "intend": [362, 1069, 1094], "freeli": 362, "inde": [362, 381], "flexibl": 362, "original_typ": 362, "cumbersom": 362, "sound": 363, "higher": [363, 364, 369, 381, 819, 822, 824, 827, 829, 832, 834, 836, 838, 840, 842], "overview": [363, 380], "handler": [363, 365, 369, 1111], "fledg": [364, 365], "syntact": [364, 369], "clip_by_valu": [364, 369], "clamp": [364, 369], "behavior": [364, 381, 509, 695, 698, 699, 702, 1053, 1054, 1055, 1057], "fit": [364, 949, 975, 978], "construct": [364, 365, 368, 369, 949, 1001, 1004, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1141, 1142, 1143, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155], "num": [364, 403, 412, 413], "power_seq": 364, "okai": 364, "bound": 364, "resid": [364, 368], "edg": [364, 369, 949, 950, 953, 959, 962, 1005, 1008, 1111], "larger": [364, 369, 422, 442, 949, 950, 953, 983, 986, 1069, 1090, 1093, 1098, 1101], "ml_framework": [364, 369, 403, 404], "current_framework": [364, 369], "furthermor": 364, "concaten": [364, 367, 459, 488, 745, 772, 949, 955, 958, 1111], "framework_handl": 364, "face": 364, "verbos": [364, 1111, 1158], "cprint": [364, 1157], "framework_stack": 364, "_determine_framework_from_arg": 364, "valueerror": [364, 949, 989, 992], "get_framework": 364, "neither": [364, 509, 522, 678, 681], "illustr": [364, 380], "un": [364, 422, 446], "nn": [364, 369, 403, 414, 1111], "init_h": [364, 850, 860], "init_c": [364, 850, 860], "kernel": [364, 381, 850, 860], "recurrent_kernel": [364, 850, 860], "bia": [364, 368, 850, 859, 860, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1142], "recurrent_bia": [364, 850, 860], "x_shape": 364, "batch_shap": [364, 366, 369, 745, 798, 850, 860, 861, 862, 863, 930, 932, 1036, 1037, 1132, 1141], "timestep": [364, 850, 860, 1132, 1141], "input_channel": [364, 368, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1141, 1142], "x_flat": 364, "wi": 364, "wi_x": 364, "wii_x": 364, "wif_x": 364, "wig_x": 364, "wio_x": 364, "recurr": [364, 850, 860], "wh": 364, "lstm": [364, 850, 860, 1132], "ht": 364, "ct": 364, "hts_list": 364, "unrol": [364, 367, 850, 860], "wii_xt": 364, "wif_xt": 364, "wig_xt": 364, "wio_xt": 364, "zip": 364, "htm1": 364, "ctm1": 364, "wh_htm1": 364, "whi_htm1": 364, "whf_htm1": 364, "whg_htm1": 364, "who_htm1": 364, "ft": 364, "gt": 364, "ot": 364, "offici": 364, "reliabl": 364, "sacrific": 364, "hear": 364, "virtu": 364, "pure_ivi": 364, "reduce_mean": [364, 367, 368, 369, 1111], "reduce_sum": [364, 1111], "reduce_var": 364, "compile_graph": [364, 369], "pure_torch": 364, "cat": [364, 369], "backbon": [364, 367], "_layer": 364, "super": [364, 367, 368, 369], "clean": [364, 365, 367], "random_unifrom": 364, "unclean": 364, "wx": 364, "temp": 364, "torchscript": 364, "fn": [364, 366, 382, 383, 384, 385, 386, 387, 388, 389, 390, 422, 443, 444, 459, 468, 469, 745, 751, 816, 1013, 1014, 1019, 1020, 1021, 1023, 1024, 1025, 1114, 1116], "example_input": [364, 400, 401], "static_argnum": [364, 400, 401], "static_argnam": [364, 400, 401], "jit": [364, 381], "frontend": 365, "primit": [365, 381], "describ": [365, 369, 1069, 1070, 1073, 1086, 1089, 1090, 1093, 1094, 1097], "hierarch": [365, 367, 368], "straight": [366, 1111], "arraywithlinalg": 366, "arraywithlog": 366, "arraywithmath": 366, "arraywithmeta": 366, "arraywithreduct": 366, "is_native_arrai": [366, 745], "_shape": 366, "_size": 366, "functool": 366, "mul": 366, "len": [366, 369, 403, 414], "_dtype": 366, "_devic": 366, "_dev_str": 366, "_pre_repr": 366, "_post_repr": 366, "ndim": [366, 863, 905, 907, 912], "mt": 366, "answer": [366, 381], "consol": 366, "typeerror": 366, "immut": 366, "behav": 366, "claim": 366, "truli": 366, "_native_wrapp": 366, "attributeerror": 366, "genuin": 366, "some_method": 366, "similarli": [366, 403, 414], "rewritten": 366, "__pow__": 366, "strang": 366, "power": [366, 367, 368, 509, 563, 566, 596, 695, 698, 745, 780, 803, 810, 863, 892, 1123], "enforc": 366, "notic": 366, "appear": [366, 949, 963, 966], "invers": [366, 380, 509, 514, 517, 518, 521, 527, 530, 531, 534, 535, 538, 539, 542, 543, 546, 578, 582, 736, 740, 863, 882, 884, 902, 904], "_wrap_method": 366, "func_wrapp": [366, 382, 383, 384, 385, 386, 387, 388, 389, 390], "__name__": 366, "non_wrapped_method": 366, "_method_wrap": 366, "native_arg": 366, "native_kwarg": 366, "inner_fn": 366, "whist": 366, "unwrap": 366, "transit": 366, "needlessli": 366, "randn": 366, "_unwrap_method": 366, "method_wrap": 366, "compartment": 366, "public": [366, 745, 761], "newshap": [366, 949, 979, 982], "new_shap": 366, "tidi": 366, "shorter": 366, "crystal": 366, "41": [366, 509, 567, 570, 719, 722, 863, 864, 866, 1069, 1094], "enough": [366, 367, 368], "ton": 367, "ado": [367, 368], "incred": [367, 381], "hash": 367, "soup": 367, "walk": [367, 368], "dct": 367, "cnt": 367, "combo": [367, 1111, 1117], "hold": [367, 745, 801, 802], "1000": [367, 509, 719, 722], "uda": 367, "3333": 367, "6667": 367, "178": 367, "new_weight": 367, "0600": 367, "3100": 367, "2400": 367, "6900": 367, "delimit": 367, "autocomplet": 367, "midwai": 367, "agent": 367, "total_spe": 367, "total_height": 367, "total_width": 367, "ag": 367, "tot": 367, "total_": 367, "total_h": 367, "batch_siz": [367, 850, 851, 852, 853, 854, 855, 856, 857, 1036, 1037], "dir": 367, "adam": [367, 368, 369, 819, 821, 822, 824, 832, 834, 1111, 1148, 1150], "cnt0": 367, "cnt1": 367, "diff_0": 367, "diff_1": 367, "config0": 367, "config1": 367, "Not": [367, 368, 381, 402], "decod": 367, "l0": 367, "l1": [367, 863, 927, 929], "depth": [367, 368, 369, 380, 459, 483, 487, 491, 745, 783, 798, 1013, 1025, 1144, 1145], "clearer": 367, "truncat": 367, "decoder__l0": 367, "decoder__l1": 367, "encoder__l0": 367, "encoder__l1": 367, "height": 367, "l0__b": 367, "l0__w": 367, "l1__b": 367, "l1__w": 367, "printabl": 367, "obviou": 367, "foresight": 367, "untidili": 367, "update_ag": 367, "normalize_img": 367, "img": 367, "img_max": 367, "reduce_max": [367, 1111], "img_min": 367, "reduce_min": [367, 1111], "img_rang": 367, "agent_posit": 367, "agent_veloc": 367, "agent_cam_front_rgb": 367, "agent_cam_front_depth": 367, "agent_cam_rear_rgb": 367, "agent_cam_rear_depth": 367, "agent_cam_lidar": 367, "normal": [367, 949, 993, 996, 1031, 1032, 1035, 1036, 1041, 1146, 1147], "cleaner": 367, "camera": 367, "front_rgb": 367, "front_depth": 367, "rear_rgb": 367, "rear_depth": 367, "lidar": 367, "rgb": 367, "rear": 367, "veloc": 367, "cam": 367, "cam_max": 367, "cam_min": 367, "cam_rang": 367, "Of": 367, "ideal": 367, "perman": 367, "afterward": 367, "thread": 367, "incorpor": 367, "pretti": 367, "straightforward": 367, "dataload": [367, 379, 1111], "_cnt": 367, "img_": 367, "_dataset_s": 367, "_batch_siz": 367, "_count": [367, 368], "__next__": 367, "filenam": 367, "img_fnam": 367, "fname": 367, "loaded_img": 367, "cv2": 367, "imread": 367, "loader": [367, 381], "32": [367, 392, 394, 509, 567, 570, 850, 853, 856, 863, 899, 901, 1048, 1052, 1069, 1070, 1073, 1097], "batch_slic": 367, "model": [367, 368, 1111], "mymodel": [367, 1111], "linear0": [367, 368, 1111], "linear1": [367, 368, 1111], "x_in": [367, 368, 369, 1111], "001": [367, 368, 1031, 1032, 1035], "loss_fn": [367, 368, 369, 1111], "0145": 367, "grad_fn": 367, "addbackward0": 367, "_create_vari": 368, "output_channel": [368, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1141, 1142], "with_bia": [368, 1132, 1142], "_input_channel": 368, "_output_channel": 368, "_w_shape": 368, "_b_shape": 368, "_with_bia": 368, "8979": 368, "3198": 368, "0196": 368, "3126": 368, "3717": 368, "9687": 368, "6958": 368, "5122": 368, "3902": 368, "8800": 368, "5613": 368, "1982": 368, "nightmar": 368, "overcom": 368, "fc": 368, "9563": 368, "impact": 368, "v0": 368, "v1": 368, "6440": 368, "key0": 368, "1823": 368, "8075": 368, "linear3": 368, "v2": 368, "2346": 368, "counter": 368, "hidden": [368, 850, 860, 1132, 1141], "fed": [368, 459, 503], "1300": 368, "decoupl": 368, "scheme": 368, "weight_initi": [368, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1141, 1142], "glorotuniform": [368, 1123, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1141, 1142], "bias_initi": [368, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1142], "_w_init": 368, "_b_init": 368, "create_vari": [368, 1123], "var_shap": [368, 1123], "fan_out": [368, 1123], "fan_in": [368, 1123], "fan_mod": [368, 1123], "fan_sum": 368, "slight": 368, "misnom": 368, "saw": 368, "vanilla": [368, 1009, 1011], "descent": [368, 819, 827, 829, 1148, 1153], "lar": [368, 819, 832, 834, 836, 838, 1148], "lamb": [368, 819, 832, 834, 1148], "compile_on_next_step": [368, 1144, 1145, 1148, 1149, 1150, 1151, 1152, 1153], "_beta1": 368, "_beta2": 368, "_epsilon": 368, "_mw": 368, "_vw": 368, "_first_pass": 368, "_should_compil": 368, "_step": [368, 1148, 1152], "new_v": 368, "_lr": 368, "isinst": [368, 369, 745, 813], "_inplac": 368, "_stop_gradi": 368, "set_stat": [368, 1148, 1149, 1150, 1151, 1152, 1153], "mw": [368, 819, 821, 822, 824], "vw": [368, 819, 821, 822, 824], "pre": [369, 381, 459], "captur": 369, "sparse_funct": 369, "num_class": [369, 1036, 1037], "num_dim": 369, "new_axi": 369, "_linear": 369, "to_backend": 369, "jax_graph": 369, "learnabl": [369, 1031, 1032, 1035, 1146, 1147], "to_ivy_modul": [369, 1121], "thinli": 369, "whilst": 369, "to_haiku_modul": 369, "hk": 369, "loss_fn_t": 369, "transform": [369, 380, 850, 858, 859], "without_apply_rng": 369, "rng": 369, "prngkei": 369, "init": 369, "update_rul": 369, "01": [369, 509, 703, 706], "tree_multimap": 369, "mechan": [379, 381, 1111], "vision": [379, 1111], "robot": [379, 1111], "focus": 380, "field": [380, 863, 876, 878, 905, 907, 912, 1053, 1054, 1055], "perfect": 380, "3d": [380, 1132, 1137, 1138], "differenti": 380, "demo": [380, 1111], "orient": 380, "pose": 380, "euler": [380, 402], "quaternion": 380, "rotat": 380, "matric": [380, 403, 414, 418, 419, 850, 859, 863, 864, 866, 870, 873, 875, 876, 878, 879, 881, 882, 884, 892, 893, 895, 896, 898, 902, 904, 905, 907, 909, 911, 912, 914, 915, 917, 921, 923], "angl": [380, 509, 539, 542, 579, 715, 718], "ivy_mech": 380, "target_facing_rotation_matrix": 380, "polar_to_cartesian_coord": 380, "ordin": [380, 863, 909, 911], "warp": 380, "optic": 380, "voxel": 380, "ivy_vis": 380, "coords_to_voxel_grid": 380, "render_pixel_coord": 380, "neural": [380, 850, 1111, 1118, 1132], "radianc": 380, "nerf": 380, "trajectori": 380, "motion": 380, "plan": [380, 1111], "mobil": 380, "ivy_robot": 380, "sample_spline_path": 380, "rigidmobil": 380, "sample_bodi": 380, "drone": 380, "sample_link": 380, "openai": 380, "swimmer": 380, "cumul": [380, 745, 763, 764], "reward": 380, "supervis": 380, "reinforc": 380, "door": [380, 381], "intersect": 380, "cartpol": 380, "mountain_car": 380, "pendulum": 380, "reacher": 380, "polici": 380, "condit": [380, 400, 401, 1013, 1023, 1024, 1048, 1052], "learnt": 380, "ture": 380, "ntm": 380, "egospher": 380, "spatial": 380, "esm": 380, "ivy_memori": 380, "egocentr": 380, "room": 380, "inspir": 380, "doubt": 381, "grate": 381, "put": 381, "probe": 381, "undergo": 381, "remark": 381, "surpris": 381, "backward": [381, 509, 699, 702, 863, 924, 926, 1102, 1103, 1106, 1107, 1110], "lock": 381, "contunu": 381, "minor": 381, "xla": 381, "buffer": 381, "kind": [381, 422, 442, 445, 509, 695, 698, 1069, 1086, 1089, 1094], "gold": 381, "dex": 381, "phase": 381, "lax": 381, "scan": 381, "tricki": 381, "predictor": 381, "tight": 381, "driver": 381, "schedul": 381, "algorithm": [381, 850, 851, 852, 853, 854, 855, 856, 857, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139], "dispatch": 381, "Will": 381, "ast": 381, "dynamic": 381, "cond": 381, "jacobian": 381, "checkpoint": 381, "autodiff": 381, "shine": 381, "merci": 381, "superset": 381, "cluster": 381, "compet": 381, "paradigm": 381, "parallelis": [381, 459, 468, 469], "spmd": 381, "mixtur": 381, "expert": 381, "sophist": 381, "depart": 381, "routin": 381, "hundr": 381, "thousand": 381, "deepli": [381, 1013, 1015], "broadli": 381, "heavili": 381, "supplementari": 381, "Is": 381, "reusabl": 381, "fanci": 381, "fusion": 381, "lose": 381, "vmap": 381, "pmap": 381, "overhead": 381, "ineffici": 381, "eventu": 381, "supplement": 381, "backdoor": 381, "callback": 381, "record": 381, "metric": 381, "somewhat": 381, "outsourc": 381, "inputs_to_ivy_arrai": 382, "gaussian": [392, 393], "leaki": [392, 393, 394], "alpha": [392, 394], "rectifi": [392, 394, 395], "slope": [392, 394], "39": [392, 394, 509, 596, 863, 899, 901, 1069, 1070, 1073, 1097], "85": [392, 394, 509, 567, 570], "48": [392, 394, 509, 719, 722, 863, 899, 901, 1069, 1070, 1073, 1097], "88": [392, 394, 509, 567, 570, 863, 899, 901, 1069, 1070, 1073, 1097], "269": [392, 396], "731": [392, 396], "881": [392, 396], "214": [392, 396], "978": [392, 396], "891": [392, 396], "422": [392, 397], "155": [392, 397], "0768": [392, 397], "231": [392, 397], "693": [392, 397, 933, 944, 947], "49": [392, 397, 509, 719, 722, 1069, 1070, 1073, 1097], "147": [392, 397], "363": [392, 397], "3461": [392, 398], "6491": [392, 398], "535": [392, 398], "hyperbol": [392, 399, 509, 517, 518, 521, 531, 534, 538, 543, 546, 578, 579, 582, 715, 718, 736, 737, 740], "55": [392, 399, 850, 856, 863, 899, 901, 1069, 1070, 1073, 1097], "501": [392, 399], "762": [392, 399], "964": [392, 399], "faster": [400, 401], "invoc": [400, 401], "718281828459045": 402, "newaxi": 402, "alia": 402, "pi": 402, "141592653589793": 402, "mathemat": [402, 509, 522, 539, 542, 600, 603, 678, 681, 863, 927, 929], "half": [403, 404, 1036, 1038, 1039, 1042, 1044], "chosen": [403, 404, 509, 539, 542, 1048, 1052], "distanc": [403, 404], "adjac": [403, 404], "interpret": [403, 405, 415], "uniniti": [403, 406, 407], "n_row": [403, 408], "n_col": [403, 408], "elsewher": [403, 408, 1048, 1052], "row": [403, 408, 863, 909, 911, 912, 1036, 1037, 1048, 1051], "column": [403, 408, 863, 876, 878, 905, 907, 909, 911, 912], "__dlpack__": [403, 409, 459, 504], "interchang": [403, 409, 949, 997, 1000], "endpoint": [403, 412], "xy": [403, 414], "coordin": [403, 414, 509, 539, 542], "cartesian": [403, 414], "ij": [403, 414, 1069, 1070, 1073, 1097], "rank": [403, 414, 745, 817, 863, 867, 869, 893, 895, 905, 907, 909, 911, 921, 923, 924, 926, 927, 929, 949, 959, 962, 963, 966, 993, 996, 1005, 1008, 1048, 1051, 1102, 1103, 1106, 1107, 1110], "ni": [403, 414], "xi": [403, 414], "n1": [403, 414], "n2": [403, 414], "n3": [403, 414], "accordingli": [403, 414, 509, 600, 603, 863, 927, 929, 1048, 1050, 1053, 1054, 1055, 1057, 1069, 1074, 1077, 1078, 1081, 1082, 1085, 1086, 1089, 1090, 1093, 1094, 1098, 1101, 1102, 1103, 1106, 1107, 1110], "xv": [403, 414], "yv": [403, 414], "triangular": [403, 418, 419, 863, 864, 866, 905, 907], "innermost": [403, 418, 419, 863, 864, 866, 870, 873, 875, 876, 878, 879, 881, 882, 884, 893, 895, 896, 898, 902, 904, 905, 907, 909, 911, 912, 914, 915, 917, 921, 923], "mxn": [403, 418, 419, 863, 873, 875, 884, 893, 895, 896, 898, 902, 904, 905, 907, 914, 915, 917, 921, 923], "defaultdtyp": [422, 423], "defaultfloatdtyp": [422, 424], "float_dtyp": [422, 438, 452], "defaultintdtyp": [422, 425], "dtype_in": [422, 426, 427, 441, 446, 447, 448, 458], "incompat": [422, 430], "occur": [422, 431, 434, 1048, 1049, 1050, 1053, 1054, 1055, 1057], "data_type_funct": [422, 431, 434], "closest": [422, 436, 509, 571, 574, 586, 604, 607, 608, 611, 703, 706, 741, 744], "floatdtyp": [422, 438], "int_dtyp": [422, 439, 453], "intdtyp": [422, 439], "followng": [422, 442], "occupi": [422, 442, 445, 745, 801, 802], "ep": [422, 442, 863, 884, 893, 895, 902, 904], "smallest_norm": [422, 442], "precis": [422, 442, 509, 678, 681, 719, 722], "encapsul": [422, 445], "type1": [422, 449], "type2": [422, 449], "arrays_and_dtyp": [422, 450], "ret1": [422, 454], "ret2": [422, 454], "noinspect": [423, 424, 425, 460, 820], "pyshadowingnam": [423, 424, 425, 460, 820], "defaultdevic": [459, 460], "__enter__": 459, "_dev": 459, "initialis": 459, "devcloneditem": [459, 481], "multidevitem": [459, 461, 464], "devclonedit": 459, "multidevit": [459, 462, 465, 468, 469, 473], "devclonednest": 459, "multidevnest": [459, 463, 466], "devdistitem": 459, "devdistit": 459, "devdistnest": 459, "devmanag": [459, 467], "dev_mapp": 459, "da_dim_s": 459, "safety_factor": 459, "min_dev_dim_s": 459, "max_dev_dim_step_ratio": 459, "min_unit_dev_tune_step": 459, "min_sf_tune_step": 459, "starting_split_factor": 459, "max_split_factor_step_s": 459, "tune_dev_alloc": 459, "tune_dev_split": 459, "mapper": [459, 468, 469], "receivess": 459, "ratio": [459, 819, 832, 834, 1148, 1150], "safe": [459, 468], "oom": 459, "tune": 459, "da_tune_step": 459, "ds_tune_step": 459, "to_clon": 459, "to_distribut": 459, "multidevic": [459, 468], "parallel": [459, 468, 469], "mutlidevic": [459, 468], "repeated_config_check": 459, "tune_step": 459, "devmapp": [459, 469], "ret_fn": [459, 468, 469], "queue_class": [459, 468, 469], "worker_class": [459, 468, 469], "worker": [459, 468, 469], "used_dev": [459, 468], "sf": [459, 468], "devmappermultiproc": 459, "multidev": [459, 470, 471, 472, 491], "profil": 459, "save_dir": [459, 474], "deviceic": [459, 480], "spread": [459, 491], "139740789224448": [459, 493], "physic": [459, 495], "x3": [459, 497], "x4": [459, 497], "process_specif": [459, 498, 508], "percentag": [459, 498], "ram": [459, 498, 505, 508], "alon": [459, 498, 508], "attr_onli": [459, 499], "chunk": [459, 501, 502, 503], "max_chunk_s": [459, 503], "chunk_siz": [459, 503], "input_ax": [459, 503], "output_ax": [459, 503], "feed": [459, 503], "fist": [459, 503], "stream": [459, 504], "caveat": [459, 504], "portabl": [459, 504, 1111], "gb": [459, 505, 508], "reset": [459, 507], "magnitud": [509, 510, 513, 522, 678, 681, 863, 912, 914, 915, 917], "princip": [509, 514, 527, 530, 535], "cosin": [509, 514, 517, 518, 521, 575, 578, 579, 582], "x1_i": [509, 522, 525, 539, 542, 547, 550, 555, 558, 559, 562, 563, 566, 567, 570, 583, 586, 588, 591, 599, 607, 608, 611, 612, 615, 616, 619, 632, 635, 636, 639, 656, 659, 660, 663, 668, 671, 672, 675, 678, 681, 687, 690, 695, 698, 699, 702, 727, 731], "x2_i": [509, 522, 525, 539, 542, 547, 550, 555, 558, 559, 562, 563, 566, 567, 570, 583, 586, 588, 591, 599, 607, 608, 611, 612, 615, 616, 619, 632, 635, 636, 639, 656, 659, 660, 663, 668, 671, 672, 675, 678, 681, 687, 690, 695, 698, 699, 702, 727, 731], "finit": [509, 522, 539, 542, 620, 623, 678, 681, 695, 698, 699, 702], "nor": [509, 522, 678, 681], "nearest": [509, 522, 678, 681, 703, 706], "2019": [509, 522, 600, 603, 678, 681], "commut": [509, 522], "sine": [509, 527, 530, 531, 534, 711, 714, 715, 718], "57": [509, 527, 530, 567, 570, 579], "524": [509, 527, 530], "644": [509, 527, 530], "201": [509, 527, 530, 703, 706], "305": [509, 527, 530], "412": [509, 527, 530], "quotient": [509, 539, 542], "notat": [509, 539, 542, 1069, 1070, 1073, 1097], "denot": [509, 539, 542], "pair": [509, 539, 542, 850, 862, 863, 867, 869], "quadrant": [509, 539, 542], "3\u03c0": [509, 539, 542], "549": [509, 538, 543, 546, 736, 740], "bitwis": [509, 547, 550, 559, 562, 567, 570, 672, 675], "AND": [509, 547, 550, 660, 663, 1102, 1103, 1106], "binari": [509, 547, 550, 559, 562, 567, 570, 672, 675, 933, 934, 937], "invert": [509, 551, 554], "arithmet": [509, 563, 566, 1069, 1078, 1081], "propag": [509, 563, 566, 1069, 1074, 1077, 1078, 1081, 1082, 1085, 1090, 1093, 1094, 1098, 1101], "thu": [509, 563, 566, 695, 698, 699, 702, 863, 876, 878], "lh": [509, 563, 566], "rh": [509, 563, 566], "xor": [509, 567, 570, 672, 675], "78": [509, 567, 570, 863, 899, 901, 1069, 1070, 1073, 1097], "91": [509, 567, 570, 863, 899, 901, 1069, 1070, 1073, 1097], "23": [509, 567, 570, 850, 856, 863, 873, 875, 1048, 1052], "66": [509, 567, 570, 863, 899, 901, 1069, 1070, 1073, 1097], "77": [509, 567, 570, 863, 899, 901, 1069, 1070, 1073, 1097], "79": [509, 567, 570], "89": [509, 567, 570, 863, 918, 920, 1069, 1094], "98": [509, 567, 570, 863, 899, 901, 1048, 1052, 1069, 1070, 1073, 1097], "26": [509, 567, 570, 850, 857, 863, 873, 875, 899, 901, 918, 920, 1069, 1070, 1073, 1097], "21": [509, 567, 570, 745, 763, 863, 873, 875, 899, 901, 933, 944, 947, 1069, 1070, 1073, 1097], "34": [509, 567, 570, 719, 722], "24": [509, 567, 570, 719, 722, 745, 763, 863, 873, 875, 899, 901, 1069, 1070, 1073, 1097], "51": [509, 567, 570], "27": [509, 567, 570, 579, 719, 722, 850, 862, 863, 899, 901, 1069, 1070, 1073, 1097], "74": [509, 567, 570], "59": [509, 567, 570], "416": [509, 575], "76": [509, 579, 863, 918, 920, 1069, 1070, 1073, 1097], "122": [509, 579], "368": [509, 579], "670": [509, 579], "202": [509, 579, 703, 706], "548": [509, 579], "1490": [509, 579], "dividend": [509, 583, 699, 702], "divisor": [509, 583, 699, 702, 819, 821, 822, 824, 832, 834, 1069, 1090, 1093, 1098, 1101, 1148, 1149, 1150], "gauss": [509, 592, 595], "exponenti": [509, 525, 592, 595, 596, 599, 656, 659, 695, 698], "logarithm": [509, 525, 596, 599, 640, 643, 644, 647, 648, 651, 652, 655, 656, 659, 863, 872, 908], "72": [509, 596, 863, 899, 901, 1069, 1070, 1073, 1097], "accur": [509, 600, 603], "fdlibm": [509, 600, 603], "compliant": [509, 600, 603, 664, 667, 668, 671, 1069, 1074, 1077, 1078, 1081, 1082, 1085], "greatest": [509, 586, 604, 607, 608, 611], "out_i": [509, 620, 623, 624, 627, 628, 631], "threshold": [509, 676, 677], "exce": [509, 677], "y_i": [509, 683, 686], "expon": [509, 695, 698, 745, 810], "versu": [509, 695, 698], "odd": [509, 695, 698], "modulu": [509, 699, 702], "primarili": [509, 699, 702], "5654": [509, 703, 706], "034": [509, 703, 706], "433": [509, 703, 706], "343": [509, 703, 706], "44": [509, 703, 706, 719, 722, 723, 726, 863, 899, 901, 1048, 1052, 1069, 1070, 1073, 1097], "30": [509, 703, 706, 863, 899, 901, 1069, 1070, 1073, 1097, 1123, 1129], "81": [509, 703, 706, 723, 726, 1069, 1070, 1073, 1097], "527": [509, 703, 706], "301": [509, 703, 706], "indistinguish": [509, 719, 722], "infinit": [509, 719, 722], "83": [509, 719, 722], "32455532": [509, 719, 722], "89897949": [509, 719, 722], "50": [509, 719, 722, 863, 899, 901, 1048, 1051, 1069, 1070, 1073, 1097], "31": [509, 719, 722], "169": [509, 719, 722], "63": [509, 719, 722, 863, 864, 866, 899, 901, 1069, 1070, 1073, 1097], "47": [509, 719, 722], "73": [509, 719, 722, 863, 864, 866, 1031, 1032, 1035], "93": [509, 719, 722], "35": [509, 719, 722, 850, 862, 863, 867, 869, 1048, 1052, 1069, 1070, 1073, 1097], "09": [509, 723, 726, 850, 862], "61": [509, 723, 726, 933, 934, 937], "546": [509, 732], "842": [509, 732], "916": [509, 732, 933, 934, 937], "96": [509, 732, 863, 899, 901, 1069, 1070, 1073, 1097], "996": [509, 732], "328": [509, 732], "decim": [509, 741, 744], "inspect": [745, 751, 1115, 1116], "downscal": [745, 757, 758, 760], "60": [745, 763, 863, 899, 901, 1069, 1070, 1073, 1097], "default_v": [745, 766], "catch_except": [745, 766], "rev": [745, 766], "with_cal": [745, 766], "arrang": [745, 767], "123": [745, 770], "mod": [745, 771], "max_freq": [745, 772], "num_band": [745, 772], "pad": [745, 772, 850, 851, 852, 853, 854, 855, 856, 857, 949, 959, 962, 1005, 1008, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139], "fourier": [745, 772], "band": [745, 772], "linearli": [745, 772, 863, 909, 911], "oppos": [745, 772], "geometr": [745, 772], "seen_set": [745, 783], "local_set": [745, 783], "decrement": [745, 787], "is_arrai": 745, "allow_dupl": [745, 795], "forkserv": [745, 796], "spawn": [745, 796], "hot": [745, 798], "scatter": [745, 798, 801, 802], "overrid": [745, 798], "tmp_dr": [745, 806], "temporari": [745, 806], "min_denomin": [745, 809], "stabil": [745, 809, 810, 1058, 1059, 1062, 1064, 1067], "_min_denomin": [745, 809], "min_bas": [745, 810], "_min_bas": [745, 810, 1031, 1032, 1035, 1146, 1147], "100000023841858": [745, 813], "200000047683716": [745, 813], "299999952316284": [745, 813], "400000095367432": [745, 813], "599999904632568": [745, 813], "101": [745, 814], "unpack": [745, 817], "gradienttrack": [819, 820], "delta": [819, 821], "cost": [819, 821, 822, 824, 827, 829, 832, 834, 836, 838, 840, 842, 1009, 1010, 1011, 1012], "ws": [819, 821, 822, 824, 827, 829, 832, 834, 836, 838, 840, 842], "en": [819, 821, 822, 824], "wikipedia": [819, 821, 822, 824], "wiki": [819, 821, 822, 824], "stochastic_gradient_desc": [819, 821, 822, 824], "dc": [819, 821, 822, 824, 827, 829, 832, 834, 836, 838, 840, 842], "dw": [819, 821, 822, 824, 827, 829, 832, 834, 836, 838, 840, 842], "averag": [819, 821, 822, 824, 832, 834, 1009, 1010, 1011], "forget": [819, 821, 822, 824, 832, 834, 1148, 1149, 1150], "rate": [819, 822, 824, 827, 829, 832, 834, 836, 838, 840, 842, 1009, 1010, 1011, 1012, 1132, 1143, 1148, 1149, 1150, 1151, 1152, 1153], "ws_new": [819, 822, 824, 827, 829, 832, 834, 836, 838, 840, 842], "retain": [819, 826], "trust": [819, 832, 834, 1148, 1150], "decai": [819, 832, 834, 836, 838, 1148, 1150, 1151], "layerwis": [819, 836, 838, 1148, 1151], "stride": [850, 851, 852, 853, 854, 855, 856, 857, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139], "data_format": [850, 851, 852, 853, 854, 855, 856, 857, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139], "nwc": [850, 851, 852, 1132, 1133, 1134], "dilat": [850, 851, 852, 853, 854, 855, 856, 857, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139], "convolut": [850, 851, 852, 853, 854, 855, 856, 857, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139], "d_in": [850, 851, 852, 853, 854, 855, 856], "fw": [850, 851, 852, 853, 854, 855, 856, 857], "d_out": [850, 851, 852, 853, 854, 855, 856], "slide": [850, 851, 852, 853, 854, 855, 856, 857, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139], "ncw": [850, 851, 852, 1132, 1133, 1134], "wio": [850, 851], "output_shap": [850, 852, 854, 856, 1132, 1134, 1136, 1138], "nhwc": [850, 853, 854, 857, 1132, 1135, 1136, 1139], "fh": [850, 853, 854, 855, 856, 857], "nchw": [850, 853, 854, 857, 1132, 1135, 1136, 1139], "hwio": [850, 853], "unequ": [850, 853], "28": [850, 853, 856, 857, 863, 899, 901, 1069, 1070, 1073, 1097], "unsqueez": [850, 853, 857], "ndhwc": [850, 855, 856, 1132, 1137, 1138], "volum": [850, 855], "fd": [850, 855, 856], "ncdhw": [850, 855, 856, 1132, 1137, 1138], "dhwio": [850, 855], "256": [850, 856], "258": [850, 856], "128": [850, 856, 863, 899, 901], "depthwis": [850, 857, 1132, 1139], "333": [850, 857], "inp": [850, 857], "prob": [850, 858, 1036, 1037, 1132, 1140], "randomli": [850, 858, 1132, 1140], "bernoulli": [850, 858], "out_featur": [850, 858, 859], "incom": [850, 859], "outer_batch_shap": [850, 859], "inner_batch_shap": [850, 859], "in_featur": [850, 859], "cell": [850, 860, 1132, 1141], "num_queri": [850, 861, 862], "x_feat_dim": [850, 861], "num_kei": [850, 861, 862], "cont_feat_dim": [850, 861], "numhead": [850, 861], "feat_dim": [850, 861, 862], "out_feat_dim": [850, 861], "score": [850, 862], "04": [850, 862], "03": [850, 862, 1031, 1032, 1035], "08": [850, 862], "decomposit": [863, 864, 866, 905, 907, 912], "symmetr": [863, 864, 866, 876, 878, 879, 881, 930, 932], "u": [863, 864, 866, 912], "577": [863, 864, 866], "707": [863, 864, 866], "vif": [863, 867, 869], "92": [863, 870], "293": [863, 870], "46997": [863, 870], "eigendecomposit": [863, 876, 878], "qlq\u1d40": [863, 876, 878], "orthogon": [863, 876, 878], "eig": [863, 876, 878], "eigenvalu": [863, 876, 878, 879, 881], "eigenvector": [863, 876, 878], "75": [863, 882, 899, 901], "prepend": [863, 885, 888], "singular": [863, 884, 893, 895, 902, 904, 912, 914, 915, 917], "toler": [863, 884, 893, 895, 902, 904], "largest_singular_valu": [863, 884, 893, 895, 902, 904], "array_lik": [863, 899, 901], "33": [863, 899, 901, 1031, 1032, 1035, 1069, 1070, 1073, 1097], "36": [863, 899, 901, 1069, 1070, 1073, 1097], "45": [863, 899, 901, 949, 988, 1031, 1032, 1035, 1069, 1070, 1073, 1097], "65": [863, 899, 901, 1069, 1070, 1073, 1097], "84": [863, 899, 901, 1069, 1070, 1073, 1097], "105": [863, 899, 901, 933, 934, 937], "112": [863, 899, 901, 1069, 1070, 1073, 1097], "104": [863, 899, 901, 1069, 1070, 1073, 1097], "120": [863, 899, 901], "moor": [863, 884, 902, 904], "penros": [863, 884, 902, 904], "pseudo": [863, 884, 902, 904], "orthonorm": [863, 905, 907, 912], "2d": [863, 872, 908, 1132, 1135, 1136, 1139], "logdet": [863, 872, 908], "coeffici": [863, 909, 911], "usvh": [863, 912], "vh": [863, 912], "hermitian": [863, 912], "et": [863, 912], "cetera": [863, 912], "adjoint": [863, 912], "reconstruct": [863, 912, 1053, 1054, 1056], "reconstructed_x": [863, 912], "contract": [863, 918, 920, 1069, 1070, 1073, 1097], "doubl": [863, 918, 920], "singleton": [863, 927, 929, 949, 989, 992, 1048, 1050, 1069, 1074, 1077, 1078, 1081, 1082, 1085, 1086, 1089, 1090, 1093, 1094, 1098, 1101, 1102, 1103, 1106, 1107, 1110], "liter": [863, 927, 929], "manhattan": [863, 927, 929], "l2": [863, 927, 929], "euclidean": [863, 927, 929], "mathbf": [863, 930, 932], "mathbb": [863, 930, 932], "skew": [863, 930, 932], "entropi": [933, 934, 937, 939, 942, 944, 947], "predict": [933, 934, 937, 939, 942, 944, 947], "smooth": [933, 934, 937, 939, 942, 944, 947], "223": [933, 934, 937], "357": [933, 934, 937, 944, 947], "511": [933, 934, 937], "discret": [933, 939, 942], "3862944": [933, 939, 942], "35667497": [933, 939, 942], "spars": [933, 944, 947], "logit": [933, 944, 947], "793291": [933, 944, 947], "512926": [933, 944, 947], "before_1": [949, 959, 962, 1005, 1008], "after_1": [949, 959, 962, 1005, 1008], "before_n": [949, 959, 962, 1005, 1008], "after_n": [949, 959, 962, 1005, 1008], "insert": [949, 963, 966, 1013, 1018, 1048, 1049], "manipulation_funct": [949, 963, 966], "reorder": [949, 967, 970], "permut": [949, 971, 974, 997, 1000], "repetit": [949, 975, 978, 1001, 1004], "restor": [949, 983, 986], "classivi": [949, 988], "famili": [949, 993, 996], "intxx": [949, 993, 996], "floatxx": [949, 993, 996], "fomaml_step": 1009, "inner_cost_fn": [1009, 1010, 1011], "outer_cost_fn": [1009, 1010, 1011], "inner_grad_step": [1009, 1010, 1011, 1012], "inner_learning_r": [1009, 1010, 1011, 1012], "inner_optimization_step": [1009, 1010, 1011, 1012], "inner_batch_fn": [1009, 1010, 1011], "outer_batch_fn": [1009, 1010, 1011], "average_across_step": [1009, 1010, 1011], "inner_v": [1009, 1010, 1011], "keep_inner_v": [1009, 1010, 1011], "outer_v": [1009, 1010, 1011], "keep_outer_v": [1009, 1010, 1011], "return_inner_v": [1009, 1010, 1011, 1012], "num_task": [1009, 1010, 1011, 1012], "maml": [1009, 1010, 1011], "recev": [1009, 1010, 1011], "0x7ffabab05670": [1009, 1010, 1011, 1012], "maml_step": 1009, "rece": [1009, 1011], "reptile_step": 1009, "cost_fn": [1009, 1012], "reptil": [1009, 1012], "receivng": [1009, 1012], "all_nested_indic": 1013, "include_nest": [1013, 1014], "_index": [1013, 1014, 1024], "_base": [1013, 1014, 1023, 1024], "copy_nest": 1013, "to_mut": [1013, 1015, 1025], "mutabl": [1013, 1015, 1025], "insert_into_nest_at_index": 1013, "insert_into_nest_at_indic": 1013, "map_nest_at_index": 1013, "map_nest_at_indic": 1013, "multi_index_nest": 1013, "nested_ani": 1013, "check_nest": [1013, 1023, 1024], "conditon": [1013, 1023, 1024], "nested_indices_wher": 1013, "stop_after_n_found": [1013, 1024], "_depth": [1013, 1025], "_tuple_check_fn": [1013, 1025], "_list_check_fn": [1013, 1025], "_dict_check_fn": [1013, 1025], "nested_multi_map": 1013, "nest0": [1013, 1026], "ivy_arrai": [1013, 1026], "funciton": [1013, 1026], "prune_nest_at_index": 1013, "prune_nest_at_indic": 1013, "set_nest_at_index": 1013, "set_nest_at_indic": 1013, "mini": [1031, 1032, 1035, 1146, 1147], "gamma": [1031, 1032, 1035], "beta": [1031, 1032, 1035], "0976": [1031, 1032, 1035], "3452": [1031, 1032, 1035], "2740": [1031, 1032, 1035], "1047": [1031, 1032, 1035], "5886": [1031, 1032, 1035], "2732": [1031, 1032, 1035], "7696": [1031, 1032, 1035], "7024": [1031, 1032, 1035], "2518": [1031, 1032, 1035], "58": [1031, 1032, 1035, 1053, 1054], "283": [1031, 1032, 1035], "585": [1031, 1032, 1035], "909": [1031, 1032, 1035], "628": [1031, 1032, 1035], "997": [1031, 1032, 1035], "225": [1031, 1032, 1035], "425": [1031, 1032, 1035], "norm_idx": [1031, 1032, 1035], "228": [1031, 1032, 1035], "0285": [1031, 1032, 1035], "199": [1031, 1032, 1035], "204": [1031, 1032, 1035], "population_s": [1036, 1037], "num_sampl": [1036, 1037], "draw": [1036, 1037, 1041, 1042, 1044], "unnorm": [1036, 1037], "drawn": [1036, 1037, 1038, 1039, 1041, 1042, 1044], "home": [1036, 1037, 1041, 1042, 1044], "uniformli": [1036, 1038, 1039, 1042, 1044], "highest": [1036, 1038, 1039], "parameter": [1036, 1041, 1042, 1044], "6444774682897879": [1036, 1041], "811": [1036, 1041], "508": [1036, 1041], "564": [1036, 1041], "7268672": [1036, 1041], "968": [1036, 1041], "175": [1036, 1041, 1053, 1054], "064": [1036, 1041], "40935726": [1036, 1041], "556": [1036, 1041], "26431865": [1036, 1042, 1044], "475": [1036, 1042, 1044], "878": [1036, 1042, 1044], "861": [1036, 1042, 1044], "89150229": [1036, 1042, 1044], "89629126": [1036, 1042, 1044], "94198485": [1036, 1042, 1044], "91405606": [1036, 1042, 1044], "72848724": [1036, 1042, 1044], "7550739": [1036, 1042, 1044], "624": [1036, 1042, 1044], "00109": [1036, 1042, 1044], "occurr": [1048, 1049, 1050, 1053, 1054], "yield": [1048, 1052], "43": [1048, 1052], "x_j": [1053, 1054, 1055, 1057], "impli": [1053, 1054, 1055, 1057], "inverse_indic": [1053, 1054, 1056], "aggreg": [1053, 1054], "fourth": [1053, 1054], "607": [1053, 1054], "735": [1053, 1054], "667": [1053, 1054], "381": [1053, 1054], "857": [1053, 1054], "0396": [1053, 1054], "166": [1053, 1054], "828": [1053, 1054], "144": [1053, 1054], "40501155": [1053, 1054], "77361575": [1053, 1054], "97776199": [1053, 1054], "36831157": [1053, 1054], "89148434": [1053, 1054], "9512272": [1053, 1054], "67542176": [1053, 1054], "41985657": [1053, 1054], "23478023": [1053, 1054], "1141": [1053, 1054], "8101": [1053, 1054], "9298": [1053, 1054], "8460": [1053, 1054], "2119": [1053, 1054], "3519": [1053, 1054], "6252": [1053, 1054], "4033": [1053, 1054], "7443": [1053, 1054], "2577": [1053, 1054], "3707": [1053, 1054], "0545": [1053, 1054], "3238": [1053, 1054], "5944": [1053, 1054], "0775": [1053, 1054], "4327": [1053, 1054], "176": [1053, 1054], "889": [1053, 1054], "763": [1053, 1054], "071": [1053, 1054], "262": [1053, 1054], "456": [1053, 1054], "114": [1053, 1054], "349": [1053, 1054], "615": [1053, 1054], "594": [1053, 1054], "335": [1053, 1054], "212": [1053, 1054], "457": [1053, 1054], "827": [1053, 1054], "209": [1053, 1054], "ascend": [1058, 1059, 1062], "einstein": [1069, 1070, 1073, 1097], "summat": [1069, 1070, 1073, 1097], "seq": [1069, 1070, 1073, 1097], "jk": [1069, 1070, 1073, 1097], "ik": [1069, 1070, 1073, 1097], "126": [1069, 1070, 1073, 1097], "510": [1069, 1070, 1073, 1097], "99": [1069, 1070, 1073, 1097], "108": [1069, 1070, 1073, 1097], "117": [1069, 1070, 1073, 1097], "sentinel": [1069, 1074, 1077, 1082, 1085], "unsign": [1069, 1086, 1089, 1094], "degre": [1069, 1090, 1093, 1098, 1101], "bessel": [1069, 1090, 1093, 1098, 1101], "8164966": [1069, 1090, 1093], "varianc": [1069, 1098, 1101], "unbias": [1069, 1098, 1101], "simplicit": [1102, 1103, 1106], "autom": 1111, "grow": 1111, "ai": 1111, "got": 1111, "colab": 1111, "sharp": 1111, "weekli": 1111, "event": 1111, "immedi": 1111, "favorit": 1111, "jax_concat": 1111, "tf_concat": 1111, "np_concat": 1111, "mx_concat": 1111, "torch_concat": 1111, "prompt": 1111, "get_devic": 1111, "reduce_prod": 1111, "gradient_imag": 1111, "linalg": 1111, "bilinear_resampl": 1111, "stack_imag": 1111, "neural_net": 1111, "ecosystem": [1111, 1117], "popular": [1111, 1117], "acceler": 1111, "articl": 1111, "lenton2021ivi": 1111, "inter": 1111, "lenton": 1111, "daniel": 1111, "pardo": 1111, "fabio": 1111, "falck": 1111, "fabian": 1111, "jame": 1111, "stephen": 1111, "clark": 1111, "ronald": 1111, "journal": 1111, "arxiv": 1111, "preprint": 1111, "2102": 1111, "02886": 1111, "2021": 1111, "add_array_spec": 1114, "fn_array_spec": 1114, "geglu": 1118, "native_modul": [1121, 1122], "native_module_class": [1121, 1122], "firstlayersiren": 1123, "kaimingnorm": [1123, 1127], "negative_slop": 1123, "Ones": 1123, "siren": 1123, "w0": [1123, 1129], "filter_s": [1132, 1133, 1134], "1d": [1132, 1133, 1134], "conv1dtranspos": 1132, "filter_shap": [1132, 1135, 1136, 1137, 1138, 1139], "conv2dtranspos": 1132, "conv3dtranspos": 1132, "depthwiseconv2d": 1132, "num_channel": [1132, 1139], "bernoul": [1132, 1140], "num_lay": [1132, 1141], "return_sequ": [1132, 1141], "return_st": [1132, 1141], "get_initial_st": [1132, 1141], "dens": [1132, 1142], "multiheadattent": 1132, "query_dim": [1132, 1143], "head_dim": [1132, 1143], "dropout_r": [1132, 1143], "context_dim": [1132, 1143], "with_to_q_fn": [1132, 1143], "with_to_kv_fn": [1132, 1143], "with_to_out_fn": [1132, 1143], "build_mod": [1132, 1143, 1144, 1145], "on_init": [1132, 1143, 1144, 1145], "__call__": [1132, 1143, 1144, 1145], "store_var": [1144, 1145], "arg_stateful_idx": [1144, 1145], "kwarg_stateful_idx": [1144, 1145], "fallback_to_non_compil": [1144, 1145, 1148, 1152], "with_partial_v": [1144, 1145], "initialz": [1144, 1145], "from_cal": [1144, 1145], "check_submod_ret": [1144, 1145], "get_mod_kei": [1144, 1145], "top_mod": [1144, 1145], "mod_depth": [1144, 1145], "mod_height": [1144, 1145], "mod_with_top_mod_key_chain": [1144, 1145], "save_weight": [1144, 1145], "weights_path": [1144, 1145], "show_mod_in_top_mod": [1144, 1145], "upper_depth": [1144, 1145], "lower_depth": [1144, 1145], "show_structur": [1144, 1145], "show_v_in_top_v": [1144, 1145], "sub_mod": [1144, 1145], "show_v": [1144, 1145], "track_submod_call_ord": [1144, 1145], "track_submod_ret": [1144, 1145], "v_with_top_v_key_chain": [1144, 1145], "layernorm": 1146, "normalized_shap": [1146, 1147], "elementwise_affin": [1146, 1147], "trail": [1146, 1147], "affin": [1146, 1147], "0001": [1148, 1149, 1150], "init_on_first_step": [1148, 1152], "ignore_miss": [1148, 1152], "overriden": [1148, 1152], "sgd": 1148, "stochast": [1148, 1153], "sub_modul": [1154, 1155]}, "objects": {"ivy.array": [[0, 0, 0, "-", "activations"], [115, 0, 0, "-", "conversions"], [120, 0, 0, "-", "creation"], [122, 0, 0, "-", "data_type"], [124, 0, 0, "-", "device"], [126, 0, 0, "-", "elementwise"], [128, 0, 0, "-", "general"], [130, 0, 0, "-", "gradients"], [132, 0, 0, "-", "image"], [134, 0, 0, "-", "layers"], [136, 0, 0, "-", "linear_algebra"], [138, 0, 0, "-", "losses"], [140, 0, 0, "-", "manipulation"], [142, 0, 0, "-", "norms"], [144, 0, 0, "-", "random"], [146, 0, 0, "-", "searching"], [148, 0, 0, "-", "set"], [150, 0, 0, "-", "sorting"], [152, 0, 0, "-", "statistical"], [154, 0, 0, "-", "utility"], [156, 0, 0, "-", "wrapping"]], "ivy.array.activations": [[1, 1, 1, "", "ArrayWithActivations"]], "ivy.array.conversions": [[116, 2, 1, "", "args_to_ivy"], [117, 2, 1, "", "args_to_native"], [118, 2, 1, "", "to_ivy"], [119, 2, 1, "", "to_native"]], "ivy.array.creation": [[121, 1, 1, "", "ArrayWithCreation"]], "ivy.array.data_type": [[123, 1, 1, "", "ArrayWithDataTypes"]], "ivy.array.data_type.ArrayWithDataTypes": [[123, 3, 1, "", "can_cast"]], "ivy.array.device": [[125, 1, 1, "", "ArrayWithDevice"]], "ivy.array.elementwise": [[127, 1, 1, "", "ArrayWithElementwise"]], "ivy.array.elementwise.ArrayWithElementwise": [[127, 3, 1, "", "abs"], [127, 3, 1, "", "acos"], [127, 3, 1, "", "acosh"], [127, 3, 1, "", "add"], [127, 3, 1, "", "asin"], [127, 3, 1, "", "asinh"], [127, 3, 1, "", "atan"], [127, 3, 1, "", "atan2"], [127, 3, 1, "", "atanh"], [127, 3, 1, "", "bitwise_and"], [127, 3, 1, "", "bitwise_invert"], [127, 3, 1, "", "bitwise_left_shift"], [127, 3, 1, "", "bitwise_or"], [127, 3, 1, "", "bitwise_right_shift"], [127, 3, 1, "", "bitwise_xor"], [127, 3, 1, "", "ceil"], [127, 3, 1, "", "cos"], [127, 3, 1, "", "cosh"], [127, 3, 1, "", "divide"], [127, 3, 1, "", "equal"], [127, 3, 1, "", "erf"], [127, 3, 1, "", "exp"], [127, 3, 1, "", "expm1"], [127, 3, 1, "", "floor"], [127, 3, 1, "", "floor_divide"], [127, 3, 1, "", "greater"], [127, 3, 1, "", "greater_equal"], [127, 3, 1, "", "isfinite"], [127, 3, 1, "", "isinf"], [127, 3, 1, "", "isnan"], [127, 3, 1, "", "less"], [127, 3, 1, "", "less_equal"], [127, 3, 1, "", "log"], [127, 3, 1, "", "log10"], [127, 3, 1, "", "log1p"], [127, 3, 1, "", "log2"], [127, 3, 1, "", "logaddexp"], [127, 3, 1, "", "logical_and"], [127, 3, 1, "", "logical_not"], [127, 3, 1, "", "logical_or"], [127, 3, 1, "", "logical_xor"], [127, 3, 1, "", "multiply"], [127, 3, 1, "", "negative"], [127, 3, 1, "", "not_equal"], [127, 3, 1, "", "positive"], [127, 3, 1, "", "pow"], [127, 3, 1, "", "remainder"], [127, 3, 1, "", "round"], [127, 3, 1, "", "sign"], [127, 3, 1, "", "sin"], [127, 3, 1, "", "sinh"], [127, 3, 1, "", "sqrt"], [127, 3, 1, "", "square"], [127, 3, 1, "", "subtract"], [127, 3, 1, "", "tan"], [127, 3, 1, "", "tanh"], [127, 3, 1, "", "trunc"]], "ivy.array.general": [[129, 1, 1, "", "ArrayWithGeneral"]], "ivy.array.general.ArrayWithGeneral": [[129, 3, 1, "", "all_equal"], [129, 3, 1, "", "gather_nd"]], "ivy.array.gradients": [[131, 1, 1, "", "ArrayWithGradients"]], "ivy.array.image": [[133, 1, 1, "", "ArrayWithImage"]], "ivy.array.layers": [[135, 1, 1, "", "ArrayWithLayers"]], "ivy.array.linear_algebra": [[137, 1, 1, "", "ArrayWithLinearAlgebra"]], "ivy.array.linear_algebra.ArrayWithLinearAlgebra": [[137, 3, 1, "", "cholesky"], [137, 3, 1, "", "cross"], [137, 3, 1, "", "det"], [137, 3, 1, "", "diagonal"], [137, 3, 1, "", "eigh"], [137, 3, 1, "", "eigvalsh"], [137, 3, 1, "", "inv"], [137, 3, 1, "", "matmul"], [137, 3, 1, "", "matrix_norm"], [137, 3, 1, "", "matrix_rank"], [137, 3, 1, "", "matrix_transpose"], [137, 3, 1, "", "outer"], [137, 3, 1, "", "pinv"], [137, 3, 1, "", "qr"], [137, 3, 1, "", "solve"], [137, 3, 1, "", "svd"], [137, 3, 1, "", "svdvals"], [137, 3, 1, "", "tensordot"], [137, 3, 1, "", "trace"], [137, 3, 1, "", "vecdot"], [137, 3, 1, "", "vector_norm"], [137, 3, 1, "", "vector_to_skew_symmetric_matrix"]], "ivy.array.losses": [[139, 1, 1, "", "ArrayWithLosses"]], "ivy.array.losses.ArrayWithLosses": [[139, 3, 1, "", "binary_cross_entropy"], [139, 3, 1, "", "cross_entropy"], [139, 3, 1, "", "sparse_cross_entropy"]], "ivy.array.manipulation": [[141, 1, 1, "", "ArrayWithManipulation"]], "ivy.array.manipulation.ArrayWithManipulation": [[141, 3, 1, "", "clip"], [141, 3, 1, "", "concat"], [141, 3, 1, "", "constant_pad"], [141, 3, 1, "", "expand_dims"], [141, 3, 1, "", "flip"], [141, 3, 1, "", "permute_dims"], [141, 3, 1, "", "repeat"], [141, 3, 1, "", "reshape"], [141, 3, 1, "", "roll"], [141, 3, 1, "", "squeeze"], [141, 3, 1, "", "stack"], [141, 3, 1, "", "swapaxes"], [141, 3, 1, "", "tile"], [141, 3, 1, "", "zero_pad"]], "ivy.array.norms": [[143, 1, 1, "", "ArrayWithNorms"]], "ivy.array.norms.ArrayWithNorms": [[143, 3, 1, "", "layer_norm"]], "ivy.array.random": [[145, 1, 1, "", "ArrayWithRandom"]], "ivy.array.searching": [[147, 1, 1, "", "ArrayWithSearching"]], "ivy.array.set": [[149, 1, 1, "", "ArrayWithSet"]], "ivy.array.sorting": [[151, 1, 1, "", "ArrayWithSorting"]], "ivy.array.sorting.ArrayWithSorting": [[151, 3, 1, "", "argsort"], [151, 3, 1, "", "sort"]], "ivy.array.statistical": [[153, 1, 1, "", "ArrayWithStatistical"]], "ivy.array.statistical.ArrayWithStatistical": [[153, 3, 1, "", "einsum"], [153, 3, 1, "", "max"], [153, 3, 1, "", "mean"], [153, 3, 1, "", "min"], [153, 3, 1, "", "prod"], [153, 3, 1, "", "std"], [153, 3, 1, "", "sum"], [153, 3, 1, "", "var"]], "ivy.array.utility": [[155, 1, 1, "", "ArrayWithUtility"]], "ivy.array.utility.ArrayWithUtility": [[155, 3, 1, "", "all"], [155, 3, 1, "", "any"]], "ivy.array.wrapping": [[157, 2, 1, "", "add_ivy_array_instance_methods"]], "ivy": [[158, 0, 0, "-", "backend_handler"], [382, 0, 0, "-", "func_wrapper"], [1114, 0, 0, "-", "inspection"], [1157, 0, 0, "-", "verbosity"]], "ivy.backend_handler": [[158, 1, 1, "", "ContextManager"], [160, 2, 1, "", "choose_random_backend"], [161, 2, 1, "", "clear_backend_stack"], [162, 2, 1, "", "current_backend"], [163, 2, 1, "", "get_backend"], [164, 2, 1, "", "set_backend"], [165, 2, 1, "", "try_import_ivy_jax"], [166, 2, 1, "", "try_import_ivy_mxnet"], [167, 2, 1, "", "try_import_ivy_numpy"], [168, 2, 1, "", "try_import_ivy_tf"], [169, 2, 1, "", "try_import_ivy_torch"], [170, 2, 1, "", "unset_backend"]], "ivy.backend_handler.ContextManager": [[158, 3, 1, "", "__init__"]], "ivy.container": [[175, 0, 0, "-", "activations"], [177, 0, 0, "-", "base"], [179, 0, 0, "-", "container"], [182, 0, 0, "-", "container_methods"], [305, 0, 0, "-", "creation"], [307, 0, 0, "-", "data_type"], [309, 0, 0, "-", "device"], [311, 0, 0, "-", "elementwise"], [313, 0, 0, "-", "general"], [315, 0, 0, "-", "gradients"], [317, 0, 0, "-", "image"], [319, 0, 0, "-", "layers"], [321, 0, 0, "-", "linear_algebra"], [323, 0, 0, "-", "losses"], [325, 0, 0, "-", "manipulation"], [327, 0, 0, "-", "norms"], [329, 0, 0, "-", "random"], [331, 0, 0, "-", "searching"], [333, 0, 0, "-", "set"], [335, 0, 0, "-", "sorting"], [337, 0, 0, "-", "statistical"], [339, 0, 0, "-", "utility"], [341, 0, 0, "-", "wrapping"]], "ivy.container.activations": [[176, 1, 1, "", "ContainerWithActivations"]], "ivy.container.base": [[178, 1, 1, "", "ContainerBase"]], "ivy.container.base.ContainerBase": [[178, 3, 1, "", "__getitem__"], [178, 3, 1, "", "__init__"], [178, 3, 1, "", "__setitem__"], [178, 3, 1, "", "all_false"], [178, 3, 1, "", "all_key_chains"], [178, 3, 1, "", "all_true"], [178, 3, 1, "", "arrays_as_lists"], [178, 3, 1, "", "as_arrays"], [178, 3, 1, "", "as_bools"], [178, 3, 1, "", "as_ones"], [178, 3, 1, "", "as_random_uniform"], [178, 3, 1, "", "as_variables"], [178, 3, 1, "", "as_zeros"], [178, 3, 1, "", "assert_contains_sub_container"], [178, 3, 1, "", "assert_contains_sub_structure"], [178, 3, 1, "", "assert_identical"], [178, 3, 1, "", "assert_identical_structure"], [178, 3, 1, "", "at_key_chain"], [178, 3, 1, "", "at_key_chains"], [178, 3, 1, "", "at_keys"], [178, 3, 1, "", "clip"], [178, 3, 1, "", "combine"], [178, 3, 1, "", "common_key_chains"], [178, 4, 1, "", "config"], [178, 3, 1, "", "contains_sub_container"], [178, 3, 1, "", "contains_sub_structure"], [178, 3, 1, "", "copy"], [178, 3, 1, "", "create_if_absent"], [178, 3, 1, "", "cutoff_at_depth"], [178, 3, 1, "", "cutoff_at_height"], [178, 3, 1, "", "deep_copy"], [178, 4, 1, "", "dev"], [178, 3, 1, "", "dev_clone"], [178, 3, 1, "", "dev_dist"], [178, 4, 1, "", "dev_str"], [178, 3, 1, "", "diff"], [178, 3, 1, "", "dtype"], [178, 3, 1, "", "einops_rearrange"], [178, 3, 1, "", "einops_reduce"], [178, 3, 1, "", "einops_repeat"], [178, 3, 1, "", "find_sub_container"], [178, 3, 1, "", "find_sub_structure"], [178, 3, 1, "", "flatten_key_chain"], [178, 3, 1, "", "flatten_key_chains"], [178, 3, 1, "", "format_key_chains"], [178, 3, 1, "", "from_disk_as_hdf5"], [178, 3, 1, "", "from_disk_as_json"], [178, 3, 1, "", "from_disk_as_pickled"], [178, 3, 1, "", "from_flat_list"], [178, 3, 1, "", "from_numpy"], [178, 3, 1, "", "gather"], [178, 3, 1, "", "gather_nd"], [178, 3, 1, "", "h5_file_size"], [178, 3, 1, "", "handle_inplace"], [178, 3, 1, "", "has_key"], [178, 3, 1, "", "has_key_chain"], [178, 3, 1, "", "has_nans"], [178, 3, 1, "", "identical"], [178, 3, 1, "", "identical_array_shapes"], [178, 3, 1, "", "identical_configs"], [178, 3, 1, "", "identical_structure"], [178, 3, 1, "", "if_exists"], [178, 3, 1, "", "inplace_update"], [178, 4, 1, "", "ivy"], [178, 3, 1, "", "key_chains_containing"], [178, 3, 1, "", "list_join"], [178, 3, 1, "", "list_stack"], [178, 3, 1, "", "map"], [178, 3, 1, "", "map_conts"], [178, 3, 1, "", "matrix_norm"], [178, 4, 1, "", "max_depth"], [178, 3, 1, "", "maximum"], [178, 3, 1, "", "minimum"], [178, 3, 1, "", "multi_map"], [178, 3, 1, "", "multi_map_in_static_method"], [178, 3, 1, "", "num_arrays"], [178, 3, 1, "", "overwrite_at_key_chain"], [178, 3, 1, "", "overwrite_at_key_chains"], [178, 3, 1, "", "prune_empty"], [178, 3, 1, "", "prune_key_chain"], [178, 3, 1, "", "prune_key_chains"], [178, 3, 1, "", "prune_key_from_key_chains"], [178, 3, 1, "", "prune_keys"], [178, 3, 1, "", "prune_keys_from_key_chains"], [178, 3, 1, "", "reduce"], [178, 3, 1, "", "remove_key_length_limit"], [178, 3, 1, "", "remove_print_limit"], [178, 3, 1, "", "reshape_like"], [178, 3, 1, "", "restructure"], [178, 3, 1, "", "restructure_key_chains"], [178, 3, 1, "", "set_at_key_chain"], [178, 3, 1, "", "set_at_key_chains"], [178, 3, 1, "", "set_at_keys"], [178, 3, 1, "", "set_framework"], [178, 3, 1, "", "set_ivy_backend"], [178, 4, 1, "", "shape"], [178, 4, 1, "", "shapes"], [178, 3, 1, "", "show"], [178, 3, 1, "", "show_sub_container"], [178, 3, 1, "", "shuffle"], [178, 3, 1, "", "shuffle_h5_file"], [178, 3, 1, "", "size_ordered_arrays"], [178, 3, 1, "", "slice_keys"], [178, 3, 1, "", "slice_via_key"], [178, 3, 1, "", "sort_by_key"], [178, 3, 1, "", "split"], [178, 3, 1, "", "stop_gradients"], [178, 3, 1, "", "structural_diff"], [178, 3, 1, "", "to_device"], [178, 3, 1, "", "to_dict"], [178, 3, 1, "", "to_disk_as_hdf5"], [178, 3, 1, "", "to_disk_as_json"], [178, 3, 1, "", "to_disk_as_pickled"], [178, 3, 1, "", "to_flat_list"], [178, 3, 1, "", "to_iterator"], [178, 3, 1, "", "to_iterator_keys"], [178, 3, 1, "", "to_iterator_values"], [178, 3, 1, "", "to_ivy"], [178, 3, 1, "", "to_jsonable"], [178, 3, 1, "", "to_list"], [178, 3, 1, "", "to_multi_dev"], [178, 3, 1, "", "to_native"], [178, 3, 1, "", "to_numpy"], [178, 3, 1, "", "to_raw"], [178, 3, 1, "", "trim_key"], [178, 3, 1, "", "try_kc"], [178, 3, 1, "", "unify"], [178, 3, 1, "", "unstack"], [178, 3, 1, "", "update_config"], [178, 3, 1, "", "vector_norm"], [178, 3, 1, "", "with_default_key_color"], [178, 3, 1, "", "with_entries_as_lists"], [178, 3, 1, "", "with_ivy_backend"], [178, 3, 1, "", "with_key_length_limit"], [178, 3, 1, "", "with_print_indent"], [178, 3, 1, "", "with_print_limit"], [178, 3, 1, "", "with_print_line_spacing"]], "ivy.container.container": [[180, 1, 1, "", "Container"], [181, 1, 1, "", "MultiDevContainer"]], "ivy.container.container.Container": [[180, 3, 1, "", "__add__"], [180, 3, 1, "", "__init__"], [180, 3, 1, "", "__radd__"], [180, 3, 1, "", "adam_step"], [180, 3, 1, "", "arange"], [180, 3, 1, "", "arg_info"], [180, 3, 1, "", "arg_names"], [180, 3, 1, "", "argmax"], [180, 3, 1, "", "argmin"], [180, 3, 1, "", "array"], [180, 3, 1, "", "array_equal"], [180, 3, 1, "", "arrays_equal"], [180, 3, 1, "", "as_ivy_dev"], [180, 3, 1, "", "as_ivy_dtype"], [180, 3, 1, "", "as_native_dev"], [180, 3, 1, "", "as_native_dtype"], [180, 3, 1, "", "asarray"], [180, 3, 1, "", "assert_supports_inplace"], [180, 3, 1, "", "astype"], [180, 3, 1, "", "broadcast_arrays"], [180, 3, 1, "", "broadcast_to"], [180, 3, 1, "", "cache_fn"], [180, 3, 1, "", "cholesky"], [180, 3, 1, "", "clear_mem_on_dev"], [180, 3, 1, "", "clip_matrix_norm"], [180, 3, 1, "", "closest_valid_dtype"], [180, 3, 1, "", "container_types"], [180, 3, 1, "", "conv1d"], [180, 3, 1, "", "conv1d_transpose"], [180, 3, 1, "", "conv2d"], [180, 3, 1, "", "conv2d_transpose"], [180, 3, 1, "", "conv3d"], [180, 3, 1, "", "conv3d_transpose"], [180, 3, 1, "", "copy_array"], [180, 3, 1, "", "cross"], [180, 3, 1, "", "cumprod"], [180, 3, 1, "", "cumsum"], [180, 3, 1, "", "current_backend"], [180, 3, 1, "", "current_backend_str"], [180, 3, 1, "", "default"], [180, 3, 1, "", "default_device"], [180, 3, 1, "", "default_dtype"], [180, 3, 1, "", "default_float_dtype"], [180, 3, 1, "", "default_int_dtype"], [180, 3, 1, "", "depthwise_conv2d"], [180, 3, 1, "", "det"], [180, 3, 1, "", "dev_clone_array"], [180, 3, 1, "", "dev_clone_iter"], [180, 3, 1, "", "dev_clone_nest"], [180, 3, 1, "", "dev_dist_array"], [180, 3, 1, "", "dev_dist_iter"], [180, 3, 1, "", "dev_dist_nest"], [180, 3, 1, "", "dev_unify"], [180, 3, 1, "", "dev_unify_array"], [180, 3, 1, "", "dev_unify_iter"], [180, 3, 1, "", "dev_unify_nest"], [180, 3, 1, "", "dev_util"], [180, 3, 1, "", "diagonal"], [180, 3, 1, "", "dropout"], [180, 3, 1, "", "dtype_bits"], [180, 3, 1, "", "eigh"], [180, 3, 1, "", "eigvalsh"], [180, 3, 1, "", "empty"], [180, 3, 1, "", "empty_like"], [180, 3, 1, "", "execute_with_gradients"], [180, 3, 1, "", "exists"], [180, 3, 1, "", "eye"], [180, 3, 1, "", "finfo"], [180, 3, 1, "", "floormod"], [180, 3, 1, "", "fourier_encode"], [180, 3, 1, "", "from_dlpack"], [180, 3, 1, "", "full"], [180, 3, 1, "", "full_like"], [180, 3, 1, "", "function_supported_dtypes"], [180, 3, 1, "", "function_unsupported_dtypes"], [180, 3, 1, "", "gelu"], [180, 3, 1, "", "get_all_arrays_in_memory"], [180, 3, 1, "", "get_all_ivy_arrays_on_dev"], [180, 3, 1, "", "get_min_base"], [180, 3, 1, "", "get_min_denominator"], [180, 3, 1, "", "get_num_dims"], [180, 3, 1, "", "get_referrers_recursive"], [180, 3, 1, "", "gpu_is_available"], [180, 3, 1, "", "handle_nestable"], [180, 3, 1, "", "handle_out_argument"], [180, 3, 1, "", "iinfo"], [180, 3, 1, "", "indices_where"], [180, 3, 1, "", "infer_device"], [180, 3, 1, "", "infer_dtype"], [180, 3, 1, "", "inplace_arrays_supported"], [180, 3, 1, "", "inplace_decrement"], [180, 3, 1, "", "inplace_increment"], [180, 3, 1, "", "inplace_variables_supported"], [180, 3, 1, "", "inputs_to_native_arrays"], [180, 3, 1, "", "inv"], [180, 3, 1, "", "invalid_dtype"], [180, 3, 1, "", "is_float_dtype"], [180, 3, 1, "", "is_int_dtype"], [180, 3, 1, "", "is_ivy_container"], [180, 3, 1, "", "leaky_relu"], [180, 3, 1, "", "linear"], [180, 3, 1, "", "linspace"], [180, 3, 1, "", "logspace"], [180, 3, 1, "", "lstm_update"], [180, 3, 1, "", "match_kwargs"], [180, 3, 1, "", "matrix_power"], [180, 3, 1, "", "matrix_rank"], [180, 3, 1, "", "matrix_transpose"], [180, 3, 1, "", "meshgrid"], [180, 3, 1, "", "multi_head_attention"], [180, 3, 1, "", "multinomial"], [180, 3, 1, "", "multiprocessing"], [180, 3, 1, "", "native_array"], [180, 3, 1, "", "nonzero"], [180, 3, 1, "", "num_arrays_in_memory"], [180, 3, 1, "", "num_cpu_cores"], [180, 3, 1, "", "num_gpus"], [180, 3, 1, "", "num_ivy_arrays_on_dev"], [180, 3, 1, "", "one_hot"], [180, 3, 1, "", "ones"], [180, 3, 1, "", "ones_like"], [180, 3, 1, "", "outer"], [180, 3, 1, "", "outputs_to_ivy_arrays"], [180, 3, 1, "", "percent_used_mem_on_dev"], [180, 3, 1, "", "pinv"], [180, 3, 1, "", "print_all_arrays_in_memory"], [180, 3, 1, "", "print_all_ivy_arrays_on_dev"], [180, 3, 1, "", "promote_types"], [180, 3, 1, "", "qr"], [180, 3, 1, "", "queue_timeout"], [180, 3, 1, "", "randint"], [180, 3, 1, "", "random_normal"], [180, 3, 1, "", "relu"], [180, 3, 1, "", "result_type"], [180, 3, 1, "", "scaled_dot_product_attention"], [180, 3, 1, "", "scatter_flat"], [180, 3, 1, "", "scatter_nd"], [180, 3, 1, "", "seed"], [180, 3, 1, "", "set_default_device"], [180, 3, 1, "", "set_default_dtype"], [180, 3, 1, "", "set_default_float_dtype"], [180, 3, 1, "", "set_default_int_dtype"], [180, 3, 1, "", "set_min_base"], [180, 3, 1, "", "set_min_denominator"], [180, 3, 1, "", "set_queue_timeout"], [180, 3, 1, "", "set_split_factor"], [180, 3, 1, "", "set_tmp_dir"], [180, 3, 1, "", "set_with_grads"], [180, 3, 1, "", "shape_to_tuple"], [180, 3, 1, "", "sigmoid"], [180, 3, 1, "", "slogdet"], [180, 3, 1, "", "softmax"], [180, 3, 1, "", "softplus"], [180, 3, 1, "", "solve"], [180, 3, 1, "", "split_factor"], [180, 3, 1, "", "split_func_call"], [180, 3, 1, "", "stable_divide"], [180, 3, 1, "", "stable_pow"], [180, 3, 1, "", "static_abs"], [180, 3, 1, "", "static_acos"], [180, 3, 1, "", "static_acosh"], [180, 3, 1, "", "static_adam_step"], [180, 3, 1, "", "static_all"], [180, 3, 1, "", "static_any"], [180, 3, 1, "", "static_arange"], [180, 3, 1, "", "static_arg_info"], [180, 3, 1, "", "static_arg_names"], [180, 3, 1, "", "static_argmax"], [180, 3, 1, "", "static_argmin"], [180, 3, 1, "", "static_array"], [180, 3, 1, "", "static_array_equal"], [180, 3, 1, "", "static_arrays_equal"], [180, 3, 1, "", "static_as_ivy_dev"], [180, 3, 1, "", "static_as_ivy_dtype"], [180, 3, 1, "", "static_as_native_dev"], [180, 3, 1, "", "static_as_native_dtype"], [180, 3, 1, "", "static_asarray"], [180, 3, 1, "", "static_asin"], [180, 3, 1, "", "static_asinh"], [180, 3, 1, "", "static_assert_supports_inplace"], [180, 3, 1, "", "static_astype"], [180, 3, 1, "", "static_atan"], [180, 3, 1, "", "static_atan2"], [180, 3, 1, "", "static_atanh"], [180, 3, 1, "", "static_bitwise_and"], [180, 3, 1, "", "static_bitwise_invert"], [180, 3, 1, "", "static_bitwise_left_shift"], [180, 3, 1, "", "static_bitwise_or"], [180, 3, 1, "", "static_bitwise_right_shift"], [180, 3, 1, "", "static_bitwise_xor"], [180, 3, 1, "", "static_broadcast_arrays"], [180, 3, 1, "", "static_broadcast_to"], [180, 3, 1, "", "static_cache_fn"], [180, 3, 1, "", "static_ceil"], [180, 3, 1, "", "static_cholesky"], [180, 3, 1, "", "static_clear_mem_on_dev"], [180, 3, 1, "", "static_clip_matrix_norm"], [180, 3, 1, "", "static_clip_vector_norm"], [180, 3, 1, "", "static_closest_valid_dtype"], [180, 3, 1, "", "static_concat"], [180, 3, 1, "", "static_constant_pad"], [180, 3, 1, "", "static_container_types"], [180, 3, 1, "", "static_conv1d"], [180, 3, 1, "", "static_conv1d_transpose"], [180, 3, 1, "", "static_conv2d"], [180, 3, 1, "", "static_conv2d_transpose"], [180, 3, 1, "", "static_conv3d"], [180, 3, 1, "", "static_conv3d_transpose"], [180, 3, 1, "", "static_copy_array"], [180, 3, 1, "", "static_cos"], [180, 3, 1, "", "static_cosh"], [180, 3, 1, "", "static_cross"], [180, 3, 1, "", "static_cumprod"], [180, 3, 1, "", "static_cumsum"], [180, 3, 1, "", "static_current_backend"], [180, 3, 1, "", "static_current_backend_str"], [180, 3, 1, "", "static_default"], [180, 3, 1, "", "static_default_device"], [180, 3, 1, "", "static_default_dtype"], [180, 3, 1, "", "static_default_float_dtype"], [180, 3, 1, "", "static_default_int_dtype"], [180, 3, 1, "", "static_depthwise_conv2d"], [180, 3, 1, "", "static_det"], [180, 3, 1, "", "static_dev"], [180, 3, 1, "", "static_dev_clone"], [180, 3, 1, "", "static_dev_clone_array"], [180, 3, 1, "", "static_dev_clone_iter"], [180, 3, 1, "", "static_dev_clone_nest"], [180, 3, 1, "", "static_dev_dist"], [180, 3, 1, "", "static_dev_dist_array"], [180, 3, 1, "", "static_dev_dist_iter"], [180, 3, 1, "", "static_dev_dist_nest"], [180, 3, 1, "", "static_dev_unify"], [180, 3, 1, "", "static_dev_unify_array"], [180, 3, 1, "", "static_dev_unify_iter"], [180, 3, 1, "", "static_dev_unify_nest"], [180, 3, 1, "", "static_dev_util"], [180, 3, 1, "", "static_diagonal"], [180, 3, 1, "", "static_dropout"], [180, 3, 1, "", "static_dtype"], [180, 3, 1, "", "static_dtype_bits"], [180, 3, 1, "", "static_eigh"], [180, 3, 1, "", "static_eigvalsh"], [180, 3, 1, "", "static_einops_rearrange"], [180, 3, 1, "", "static_einops_reduce"], [180, 3, 1, "", "static_einops_repeat"], [180, 3, 1, "", "static_einsum"], [180, 3, 1, "", "static_empty"], [180, 3, 1, "", "static_empty_like"], [180, 3, 1, "", "static_equal"], [180, 3, 1, "", "static_erf"], [180, 3, 1, "", "static_execute_with_gradients"], [180, 3, 1, "", "static_exists"], [180, 3, 1, "", "static_exp"], [180, 3, 1, "", "static_expand_dims"], [180, 3, 1, "", "static_expm1"], [180, 3, 1, "", "static_eye"], [180, 3, 1, "", "static_finfo"], [180, 3, 1, "", "static_flip"], [180, 3, 1, "", "static_floor"], [180, 3, 1, "", "static_floor_divide"], [180, 3, 1, "", "static_floormod"], [180, 3, 1, "", "static_fourier_encode"], [180, 3, 1, "", "static_from_dlpack"], [180, 3, 1, "", "static_full"], [180, 3, 1, "", "static_full_like"], [180, 3, 1, "", "static_function_supported_dtypes"], [180, 3, 1, "", "static_function_unsupported_dtypes"], [180, 3, 1, "", "static_gather"], [180, 3, 1, "", "static_gelu"], [180, 3, 1, "", "static_get_all_arrays_in_memory"], [180, 3, 1, "", "static_get_all_ivy_arrays_on_dev"], [180, 3, 1, "", "static_get_min_base"], [180, 3, 1, "", "static_get_min_denominator"], [180, 3, 1, "", "static_get_num_dims"], [180, 3, 1, "", "static_get_referrers_recursive"], [180, 3, 1, "", "static_gpu_is_available"], [180, 3, 1, "", "static_greater"], [180, 3, 1, "", "static_greater_equal"], [180, 3, 1, "", "static_handle_nestable"], [180, 3, 1, "", "static_handle_out_argument"], [180, 3, 1, "", "static_has_nans"], [180, 3, 1, "", "static_iinfo"], [180, 3, 1, "", "static_indices_where"], [180, 3, 1, "", "static_infer_device"], [180, 3, 1, "", "static_infer_dtype"], [180, 3, 1, "", "static_inplace_arrays_supported"], [180, 3, 1, "", "static_inplace_decrement"], [180, 3, 1, "", "static_inplace_increment"], [180, 3, 1, "", "static_inplace_update"], [180, 3, 1, "", "static_inplace_variables_supported"], [180, 3, 1, "", "static_inputs_to_native_arrays"], [180, 3, 1, "", "static_inv"], [180, 3, 1, "", "static_invalid_dtype"], [180, 3, 1, "", "static_is_array"], [180, 3, 1, "", "static_is_float_dtype"], [180, 3, 1, "", "static_is_int_dtype"], [180, 3, 1, "", "static_is_ivy_array"], [180, 3, 1, "", "static_is_ivy_container"], [180, 3, 1, "", "static_is_native_array"], [180, 3, 1, "", "static_is_variable"], [180, 3, 1, "", "static_isfinite"], [180, 3, 1, "", "static_isinf"], [180, 3, 1, "", "static_isnan"], [180, 3, 1, "", "static_layer_norm"], [180, 3, 1, "", "static_leaky_relu"], [180, 3, 1, "", "static_less"], [180, 3, 1, "", "static_less_equal"], [180, 3, 1, "", "static_linear"], [180, 3, 1, "", "static_linspace"], [180, 3, 1, "", "static_log"], [180, 3, 1, "", "static_log10"], [180, 3, 1, "", "static_log1p"], [180, 3, 1, "", "static_log2"], [180, 3, 1, "", "static_logaddexp"], [180, 3, 1, "", "static_logical_and"], [180, 3, 1, "", "static_logical_not"], [180, 3, 1, "", "static_logical_or"], [180, 3, 1, "", "static_logical_xor"], [180, 3, 1, "", "static_logspace"], [180, 3, 1, "", "static_lstm_update"], [180, 3, 1, "", "static_match_kwargs"], [180, 3, 1, "", "static_matmul"], [180, 3, 1, "", "static_matrix_norm"], [180, 3, 1, "", "static_matrix_power"], [180, 3, 1, "", "static_matrix_rank"], [180, 3, 1, "", "static_matrix_transpose"], [180, 3, 1, "", "static_max"], [180, 3, 1, "", "static_maximum"], [180, 3, 1, "", "static_mean"], [180, 3, 1, "", "static_meshgrid"], [180, 3, 1, "", "static_min"], [180, 3, 1, "", "static_minimum"], [180, 3, 1, "", "static_multi_head_attention"], [180, 3, 1, "", "static_multinomial"], [180, 3, 1, "", "static_multiprocessing"], [180, 3, 1, "", "static_native_array"], [180, 3, 1, "", "static_negative"], [180, 3, 1, "", "static_nonzero"], [180, 3, 1, "", "static_not_equal"], [180, 3, 1, "", "static_num_arrays_in_memory"], [180, 3, 1, "", "static_num_cpu_cores"], [180, 3, 1, "", "static_num_gpus"], [180, 3, 1, "", "static_num_ivy_arrays_on_dev"], [180, 3, 1, "", "static_one_hot"], [180, 3, 1, "", "static_ones"], [180, 3, 1, "", "static_ones_like"], [180, 3, 1, "", "static_outer"], [180, 3, 1, "", "static_outputs_to_ivy_arrays"], [180, 3, 1, "", "static_percent_used_mem_on_dev"], [180, 3, 1, "", "static_permute_dims"], [180, 3, 1, "", "static_pinv"], [180, 3, 1, "", "static_positive"], [180, 3, 1, "", "static_pow"], [180, 3, 1, "", "static_print_all_arrays_in_memory"], [180, 3, 1, "", "static_print_all_ivy_arrays_on_dev"], [180, 3, 1, "", "static_prod"], [180, 3, 1, "", "static_promote_types"], [180, 3, 1, "", "static_qr"], [180, 3, 1, "", "static_queue_timeout"], [180, 3, 1, "", "static_random_normal"], [180, 3, 1, "", "static_relu"], [180, 3, 1, "", "static_remainder"], [180, 3, 1, "", "static_repeat"], [180, 3, 1, "", "static_reshape"], [180, 3, 1, "", "static_result_type"], [180, 3, 1, "", "static_round"], [180, 3, 1, "", "static_scaled_dot_product_attention"], [180, 3, 1, "", "static_scatter_flat"], [180, 3, 1, "", "static_scatter_nd"], [180, 3, 1, "", "static_seed"], [180, 3, 1, "", "static_set_default_device"], [180, 3, 1, "", "static_set_default_dtype"], [180, 3, 1, "", "static_set_default_float_dtype"], [180, 3, 1, "", "static_set_default_int_dtype"], [180, 3, 1, "", "static_set_min_base"], [180, 3, 1, "", "static_set_min_denominator"], [180, 3, 1, "", "static_set_queue_timeout"], [180, 3, 1, "", "static_set_split_factor"], [180, 3, 1, "", "static_set_tmp_dir"], [180, 3, 1, "", "static_set_with_grads"], [180, 3, 1, "", "static_shape"], [180, 3, 1, "", "static_shape_to_tuple"], [180, 3, 1, "", "static_shuffle"], [180, 3, 1, "", "static_sigmoid"], [180, 3, 1, "", "static_sign"], [180, 3, 1, "", "static_sin"], [180, 3, 1, "", "static_sinh"], [180, 3, 1, "", "static_slogdet"], [180, 3, 1, "", "static_softmax"], [180, 3, 1, "", "static_softplus"], [180, 3, 1, "", "static_solve"], [180, 3, 1, "", "static_split"], [180, 3, 1, "", "static_split_factor"], [180, 3, 1, "", "static_split_func_call"], [180, 3, 1, "", "static_sqrt"], [180, 3, 1, "", "static_square"], [180, 3, 1, "", "static_squeeze"], [180, 3, 1, "", "static_stable_divide"], [180, 3, 1, "", "static_stable_pow"], [180, 3, 1, "", "static_stack"], [180, 3, 1, "", "static_std"], [180, 3, 1, "", "static_stop_gradient"], [180, 3, 1, "", "static_sum"], [180, 3, 1, "", "static_supports_inplace"], [180, 3, 1, "", "static_svd"], [180, 3, 1, "", "static_svdvals"], [180, 3, 1, "", "static_swapaxes"], [180, 3, 1, "", "static_tanh"], [180, 3, 1, "", "static_tensordot"], [180, 3, 1, "", "static_tile"], [180, 3, 1, "", "static_tmp_dir"], [180, 3, 1, "", "static_to_device"], [180, 3, 1, "", "static_to_list"], [180, 3, 1, "", "static_to_native_arrays_and_back"], [180, 3, 1, "", "static_to_numpy"], [180, 3, 1, "", "static_to_scalar"], [180, 3, 1, "", "static_total_mem_on_dev"], [180, 3, 1, "", "static_tpu_is_available"], [180, 3, 1, "", "static_trace"], [180, 3, 1, "", "static_tril"], [180, 3, 1, "", "static_triu"], [180, 3, 1, "", "static_trunc"], [180, 3, 1, "", "static_try_else_none"], [180, 3, 1, "", "static_type_promote_arrays"], [180, 3, 1, "", "static_unique_all"], [180, 3, 1, "", "static_unique_counts"], [180, 3, 1, "", "static_unique_inverse"], [180, 3, 1, "", "static_unique_values"], [180, 3, 1, "", "static_unset_default_device"], [180, 3, 1, "", "static_unset_default_dtype"], [180, 3, 1, "", "static_unset_default_float_dtype"], [180, 3, 1, "", "static_unset_default_int_dtype"], [180, 3, 1, "", "static_unset_with_grads"], [180, 3, 1, "", "static_unstack"], [180, 3, 1, "", "static_used_mem_on_dev"], [180, 3, 1, "", "static_valid_dtype"], [180, 3, 1, "", "static_value_is_nan"], [180, 3, 1, "", "static_var"], [180, 3, 1, "", "static_variable"], [180, 3, 1, "", "static_variable_data"], [180, 3, 1, "", "static_vecdot"], [180, 3, 1, "", "static_vector_norm"], [180, 3, 1, "", "static_vector_to_skew_symmetric_matrix"], [180, 3, 1, "", "static_where"], [180, 3, 1, "", "static_with_grads"], [180, 3, 1, "", "static_zero_pad"], [180, 3, 1, "", "static_zeros"], [180, 3, 1, "", "static_zeros_like"], [180, 3, 1, "", "stop_gradient"], [180, 3, 1, "", "supports_inplace"], [180, 3, 1, "", "svd"], [180, 3, 1, "", "svdvals"], [180, 3, 1, "", "tensordot"], [180, 3, 1, "", "tmp_dir"], [180, 3, 1, "", "to_native_arrays_and_back"], [180, 3, 1, "", "to_scalar"], [180, 3, 1, "", "total_mem_on_dev"], [180, 3, 1, "", "tpu_is_available"], [180, 3, 1, "", "trace"], [180, 3, 1, "", "tril"], [180, 3, 1, "", "triu"], [180, 3, 1, "", "try_else_none"], [180, 3, 1, "", "type_promote_arrays"], [180, 3, 1, "", "unique_all"], [180, 3, 1, "", "unique_counts"], [180, 3, 1, "", "unique_inverse"], [180, 3, 1, "", "unique_values"], [180, 3, 1, "", "unset_default_device"], [180, 3, 1, "", "unset_default_dtype"], [180, 3, 1, "", "unset_default_float_dtype"], [180, 3, 1, "", "unset_default_int_dtype"], [180, 3, 1, "", "unset_with_grads"], [180, 3, 1, "", "used_mem_on_dev"], [180, 3, 1, "", "valid_dtype"], [180, 3, 1, "", "value_is_nan"], [180, 3, 1, "", "variable"], [180, 3, 1, "", "variable_data"], [180, 3, 1, "", "vecdot"], [180, 3, 1, "", "vector_to_skew_symmetric_matrix"], [180, 3, 1, "", "where"], [180, 3, 1, "", "with_grads"], [180, 3, 1, "", "zeros"], [180, 3, 1, "", "zeros_like"]], "ivy.container.container.MultiDevContainer": [[181, 3, 1, "", "__init__"], [181, 3, 1, "", "at_dev"], [181, 3, 1, "", "at_devs"]], "ivy.container.container_methods": [[182, 2, 1, "", "__add__"], [182, 2, 1, "", "__init__"], [182, 2, 1, "", "__radd__"], [512, 2, 1, "", "abs"], [518, 2, 1, "", "acos"], [582, 2, 1, "", "acosh"], [823, 2, 1, "", "adam_update"], [656, 2, 1, "", "add"], [1105, 2, 1, "", "all"], [748, 2, 1, "", "all_equal"], [1109, 2, 1, "", "any"], [1061, 2, 1, "", "argsort"], [529, 2, 1, "", "asin"], [533, 2, 1, "", "asinh"], [194, 2, 1, "", "at_dev"], [195, 2, 1, "", "at_devs"], [543, 2, 1, "", "atan"], [541, 2, 1, "", "atan2"], [740, 2, 1, "", "atanh"], [936, 2, 1, "", "binary_cross_entropy"], [549, 2, 1, "", "bitwise_and"], [553, 2, 1, "", "bitwise_invert"], [557, 2, 1, "", "bitwise_left_shift"], [561, 2, 1, "", "bitwise_or"], [565, 2, 1, "", "bitwise_right_shift"], [569, 2, 1, "", "bitwise_xor"], [433, 2, 1, "", "can_cast"], [573, 2, 1, "", "ceil"], [952, 2, 1, "", "clip"], [759, 2, 1, "", "clip_vector_norm"], [957, 2, 1, "", "concat"], [961, 2, 1, "", "constant_pad"], [582, 2, 1, "", "cos"], [581, 2, 1, "", "cosh"], [941, 2, 1, "", "cross_entropy"], [608, 2, 1, "", "divide"], [1097, 2, 1, "", "einsum"], [616, 2, 1, "", "equal"], [594, 2, 1, "", "erf"], [656, 2, 1, "", "exp"], [965, 2, 1, "", "expand_dims"], [602, 2, 1, "", "expm1"], [969, 2, 1, "", "flip"], [608, 2, 1, "", "floor"], [610, 2, 1, "", "floor_divide"], [776, 2, 1, "", "gather_nd"], [828, 2, 1, "", "gradient_descent_update"], [616, 2, 1, "", "greater"], [618, 2, 1, "", "greater_equal"], [622, 2, 1, "", "isfinite"], [626, 2, 1, "", "isinf"], [630, 2, 1, "", "isnan"], [833, 2, 1, "", "lamb_update"], [837, 2, 1, "", "lars_update"], [1034, 2, 1, "", "layer_norm"], [634, 2, 1, "", "less"], [638, 2, 1, "", "less_equal"], [642, 2, 1, "", "log"], [646, 2, 1, "", "log10"], [650, 2, 1, "", "log1p"], [654, 2, 1, "", "log2"], [658, 2, 1, "", "logaddexp"], [662, 2, 1, "", "logical_and"], [666, 2, 1, "", "logical_not"], [670, 2, 1, "", "logical_or"], [674, 2, 1, "", "logical_xor"], [887, 2, 1, "", "matmul"], [1076, 2, 1, "", "max"], [1080, 2, 1, "", "mean"], [1084, 2, 1, "", "min"], [680, 2, 1, "", "multiply"], [685, 2, 1, "", "negative"], [689, 2, 1, "", "not_equal"], [841, 2, 1, "", "optimizer_update"], [973, 2, 1, "", "permute_dims"], [693, 2, 1, "", "positive"], [697, 2, 1, "", "pow"], [1088, 2, 1, "", "prod"], [1043, 2, 1, "", "random_uniform"], [701, 2, 1, "", "remainder"], [977, 2, 1, "", "repeat"], [981, 2, 1, "", "reshape"], [985, 2, 1, "", "roll"], [705, 2, 1, "", "round"], [709, 2, 1, "", "sign"], [713, 2, 1, "", "sin"], [717, 2, 1, "", "sinh"], [1066, 2, 1, "", "sort"], [946, 2, 1, "", "sparse_cross_entropy"], [721, 2, 1, "", "sqrt"], [725, 2, 1, "", "square"], [991, 2, 1, "", "squeeze"], [995, 2, 1, "", "stack"], [825, 2, 1, "", "static_adam_update"], [656, 2, 1, "", "static_add"], [750, 2, 1, "", "static_all_equal"], [1063, 2, 1, "", "static_argsort"], [938, 2, 1, "", "static_binary_cross_entropy"], [435, 2, 1, "", "static_can_cast"], [954, 2, 1, "", "static_clip"], [943, 2, 1, "", "static_cross_entropy"], [608, 2, 1, "", "static_divide"], [778, 2, 1, "", "static_gather_nd"], [830, 2, 1, "", "static_gradient_descent_update"], [835, 2, 1, "", "static_lamb_update"], [839, 2, 1, "", "static_lars_update"], [682, 2, 1, "", "static_multiply"], [843, 2, 1, "", "static_optimizer_update"], [1040, 2, 1, "", "static_randint"], [1045, 2, 1, "", "static_random_uniform"], [987, 2, 1, "", "static_roll"], [1068, 2, 1, "", "static_sort"], [948, 2, 1, "", "static_sparse_cross_entropy"], [728, 2, 1, "", "static_subtract"], [740, 2, 1, "", "static_tan"], [1092, 2, 1, "", "std"], [730, 2, 1, "", "subtract"], [1096, 2, 1, "", "sum"], [999, 2, 1, "", "swapaxes"], [740, 2, 1, "", "tan"], [739, 2, 1, "", "tanh"], [1003, 2, 1, "", "tile"], [743, 2, 1, "", "trunc"], [1100, 2, 1, "", "var"], [1007, 2, 1, "", "zero_pad"]], "ivy.container.creation": [[306, 1, 1, "", "ContainerWithCreation"]], "ivy.container.data_type": [[308, 1, 1, "", "ContainerWithDataTypes"]], "ivy.container.data_type.ContainerWithDataTypes": [[308, 3, 1, "", "can_cast"], [308, 3, 1, "", "static_can_cast"]], "ivy.container.device": [[310, 1, 1, "", "ContainerWithDevice"]], "ivy.container.elementwise": [[312, 1, 1, "", "ContainerWithElementwise"]], "ivy.container.elementwise.ContainerWithElementwise": [[312, 3, 1, "", "abs"], [312, 3, 1, "", "acos"], [312, 3, 1, "", "acosh"], [312, 3, 1, "", "add"], [312, 3, 1, "", "asin"], [312, 3, 1, "", "asinh"], [312, 3, 1, "", "atan"], [312, 3, 1, "", "atan2"], [312, 3, 1, "", "atanh"], [312, 3, 1, "", "bitwise_and"], [312, 3, 1, "", "bitwise_invert"], [312, 3, 1, "", "bitwise_left_shift"], [312, 3, 1, "", "bitwise_or"], [312, 3, 1, "", "bitwise_right_shift"], [312, 3, 1, "", "bitwise_xor"], [312, 3, 1, "", "ceil"], [312, 3, 1, "", "cos"], [312, 3, 1, "", "cosh"], [312, 3, 1, "", "divide"], [312, 3, 1, "", "equal"], [312, 3, 1, "", "erf"], [312, 3, 1, "", "exp"], [312, 3, 1, "", "expm1"], [312, 3, 1, "", "floor"], [312, 3, 1, "", "floor_divide"], [312, 3, 1, "", "greater"], [312, 3, 1, "", "greater_equal"], [312, 3, 1, "", "isfinite"], [312, 3, 1, "", "isinf"], [312, 3, 1, "", "isnan"], [312, 3, 1, "", "less"], [312, 3, 1, "", "less_equal"], [312, 3, 1, "", "log"], [312, 3, 1, "", "log10"], [312, 3, 1, "", "log1p"], [312, 3, 1, "", "log2"], [312, 3, 1, "", "logaddexp"], [312, 3, 1, "", "logical_and"], [312, 3, 1, "", "logical_not"], [312, 3, 1, "", "logical_or"], [312, 3, 1, "", "logical_xor"], [312, 3, 1, "", "multiply"], [312, 3, 1, "", "negative"], [312, 3, 1, "", "not_equal"], [312, 3, 1, "", "positive"], [312, 3, 1, "", "pow"], [312, 3, 1, "", "remainder"], [312, 3, 1, "", "round"], [312, 3, 1, "", "sign"], [312, 3, 1, "", "sin"], [312, 3, 1, "", "sinh"], [312, 3, 1, "", "sqrt"], [312, 3, 1, "", "square"], [312, 3, 1, "", "static_add"], [312, 3, 1, "", "static_divide"], [312, 3, 1, "", "static_multiply"], [312, 3, 1, "", "static_subtract"], [312, 3, 1, "", "static_tan"], [312, 3, 1, "", "subtract"], [312, 3, 1, "", "tan"], [312, 3, 1, "", "tanh"], [312, 3, 1, "", "trunc"]], "ivy.container.general": [[314, 1, 1, "", "ContainerWithGeneral"]], "ivy.container.general.ContainerWithGeneral": [[314, 3, 1, "", "all_equal"], [314, 3, 1, "", "clip_vector_norm"], [314, 3, 1, "", "gather_nd"], [314, 3, 1, "", "static_all_equal"], [314, 3, 1, "", "static_gather_nd"]], "ivy.container.gradients": [[316, 1, 1, "", "ContainerWithGradients"]], "ivy.container.gradients.ContainerWithGradients": [[316, 3, 1, "", "adam_update"], [316, 3, 1, "", "gradient_descent_update"], [316, 3, 1, "", "lamb_update"], [316, 3, 1, "", "lars_update"], [316, 3, 1, "", "optimizer_update"], [316, 3, 1, "", "static_adam_update"], [316, 3, 1, "", "static_gradient_descent_update"], [316, 3, 1, "", "static_lamb_update"], [316, 3, 1, "", "static_lars_update"], [316, 3, 1, "", "static_optimizer_update"]], "ivy.container.image": [[318, 1, 1, "", "ContainerWithImage"]], "ivy.container.layers": [[320, 1, 1, "", "ContainerWithLayers"]], "ivy.container.linear_algebra": [[322, 1, 1, "", "ContainerWithLinearAlgebra"]], "ivy.container.linear_algebra.ContainerWithLinearAlgebra": [[322, 3, 1, "", "matmul"]], "ivy.container.losses": [[324, 1, 1, "", "ContainerWithLosses"]], "ivy.container.losses.ContainerWithLosses": [[324, 3, 1, "", "binary_cross_entropy"], [324, 3, 1, "", "cross_entropy"], [324, 3, 1, "", "sparse_cross_entropy"], [324, 3, 1, "", "static_binary_cross_entropy"], [324, 3, 1, "", "static_cross_entropy"], [324, 3, 1, "", "static_sparse_cross_entropy"]], "ivy.container.manipulation": [[326, 1, 1, "", "ContainerWithManipulation"]], "ivy.container.manipulation.ContainerWithManipulation": [[326, 3, 1, "", "clip"], [326, 3, 1, "", "concat"], [326, 3, 1, "", "constant_pad"], [326, 3, 1, "", "expand_dims"], [326, 3, 1, "", "flip"], [326, 3, 1, "", "permute_dims"], [326, 3, 1, "", "repeat"], [326, 3, 1, "", "reshape"], [326, 3, 1, "", "roll"], [326, 3, 1, "", "squeeze"], [326, 3, 1, "", "stack"], [326, 3, 1, "", "static_clip"], [326, 3, 1, "", "static_roll"], [326, 3, 1, "", "swapaxes"], [326, 3, 1, "", "tile"], [326, 3, 1, "", "zero_pad"]], "ivy.container.norms": [[328, 1, 1, "", "ContainerWithNorms"]], "ivy.container.norms.ContainerWithNorms": [[328, 3, 1, "", "layer_norm"]], "ivy.container.random": [[330, 1, 1, "", "ContainerWithRandom"]], "ivy.container.random.ContainerWithRandom": [[330, 3, 1, "", "random_uniform"], [330, 3, 1, "", "static_randint"], [330, 3, 1, "", "static_random_uniform"]], "ivy.container.searching": [[332, 1, 1, "", "ContainerWithSearching"]], "ivy.container.set": [[334, 1, 1, "", "ContainerWithSet"]], "ivy.container.sorting": [[336, 1, 1, "", "ContainerWithSorting"]], "ivy.container.sorting.ContainerWithSorting": [[336, 3, 1, "", "argsort"], [336, 3, 1, "", "sort"], [336, 3, 1, "", "static_argsort"], [336, 3, 1, "", "static_sort"]], "ivy.container.statistical": [[338, 1, 1, "", "ContainerWithStatistical"]], "ivy.container.statistical.ContainerWithStatistical": [[338, 3, 1, "", "einsum"], [338, 3, 1, "", "max"], [338, 3, 1, "", "mean"], [338, 3, 1, "", "min"], [338, 3, 1, "", "prod"], [338, 3, 1, "", "std"], [338, 3, 1, "", "sum"], [338, 3, 1, "", "var"]], "ivy.container.utility": [[340, 1, 1, "", "ContainerWithUtility"]], "ivy.container.utility.ContainerWithUtility": [[340, 3, 1, "", "all"], [340, 3, 1, "", "any"]], "ivy.container.wrapping": [[342, 2, 1, "", "add_ivy_container_instance_methods"]], "ivy.func_wrapper": [[383, 2, 1, "", "handle_nestable"], [384, 2, 1, "", "handle_out_argument"], [385, 2, 1, "", "infer_device"], [386, 2, 1, "", "infer_dtype"], [387, 2, 1, "", "inputs_to_ivy_arrays"], [388, 2, 1, "", "inputs_to_native_arrays"], [389, 2, 1, "", "outputs_to_ivy_arrays"], [390, 2, 1, "", "to_native_arrays_and_back"]], "ivy.functional.ivy": [[392, 0, 0, "-", "activations"], [400, 0, 0, "-", "compilation"], [402, 0, 0, "-", "constants"], [403, 0, 0, "-", "creation"], [422, 0, 0, "-", "data_type"], [459, 0, 0, "-", "device"], [509, 0, 0, "-", "elementwise"], [745, 0, 0, "-", "general"], [819, 0, 0, "-", "gradients"], [850, 0, 0, "-", "layers"], [863, 0, 0, "-", "linear_algebra"], [933, 0, 0, "-", "losses"], [949, 0, 0, "-", "manipulation"], [1009, 0, 0, "-", "meta"], [1013, 0, 0, "-", "nest"], [1031, 0, 0, "-", "norms"], [1036, 0, 0, "-", "random"], [1048, 0, 0, "-", "searching"], [1053, 0, 0, "-", "set"], [1058, 0, 0, "-", "sorting"], [1069, 0, 0, "-", "statistical"], [1102, 0, 0, "-", "utility"]], "ivy.functional.ivy.activations": [[393, 2, 1, "", "gelu"], [394, 2, 1, "", "leaky_relu"], [395, 2, 1, "", "relu"], [396, 2, 1, "", "sigmoid"], [397, 2, 1, "", "softmax"], [398, 2, 1, "", "softplus"], [399, 2, 1, "", "tanh"]], "ivy.functional.ivy.compilation": [[401, 2, 1, "", "compile"]], "ivy.functional.ivy.constants": [[402, 5, 1, "", "e"], [402, 5, 1, "", "inf"], [402, 5, 1, "", "nan"], [402, 5, 1, "", "newaxis"], [402, 5, 1, "", "pi"]], "ivy.functional.ivy.creation": [[404, 2, 1, "", "arange"], [403, 2, 1, "", "array"], [405, 2, 1, "", "asarray"], [406, 2, 1, "", "empty"], [407, 2, 1, "", "empty_like"], [408, 2, 1, "", "eye"], [409, 2, 1, "", "from_dlpack"], [410, 2, 1, "", "full"], [411, 2, 1, "", "full_like"], [412, 2, 1, "", "linspace"], [413, 2, 1, "", "logspace"], [414, 2, 1, "", "meshgrid"], [415, 2, 1, "", "native_array"], [416, 2, 1, "", "ones"], [417, 2, 1, "", "ones_like"], [418, 2, 1, "", "tril"], [419, 2, 1, "", "triu"], [420, 2, 1, "", "zeros"], [421, 2, 1, "", "zeros_like"]], "ivy.functional.ivy.data_type": [[422, 1, 1, "", "DefaultDtype"], [422, 1, 1, "", "DefaultFloatDtype"], [422, 1, 1, "", "DefaultIntDtype"], [426, 2, 1, "", "as_ivy_dtype"], [427, 2, 1, "", "as_native_dtype"], [428, 2, 1, "", "astype"], [429, 2, 1, "", "broadcast_arrays"], [430, 2, 1, "", "broadcast_to"], [434, 2, 1, "", "can_cast"], [436, 2, 1, "", "closest_valid_dtype"], [437, 2, 1, "", "default_dtype"], [438, 2, 1, "", "default_float_dtype"], [439, 2, 1, "", "default_int_dtype"], [440, 2, 1, "", "dtype"], [441, 2, 1, "", "dtype_bits"], [442, 2, 1, "", "finfo"], [443, 2, 1, "", "function_supported_dtypes"], [444, 2, 1, "", "function_unsupported_dtypes"], [445, 2, 1, "", "iinfo"], [446, 2, 1, "", "invalid_dtype"], [447, 2, 1, "", "is_float_dtype"], [448, 2, 1, "", "is_int_dtype"], [449, 2, 1, "", "promote_types"], [450, 2, 1, "", "result_type"], [451, 2, 1, "", "set_default_dtype"], [452, 2, 1, "", "set_default_float_dtype"], [453, 2, 1, "", "set_default_int_dtype"], [454, 2, 1, "", "type_promote_arrays"], [455, 2, 1, "", "unset_default_dtype"], [456, 2, 1, "", "unset_default_float_dtype"], [457, 2, 1, "", "unset_default_int_dtype"], [458, 2, 1, "", "valid_dtype"]], "ivy.functional.ivy.data_type.DefaultDtype": [[422, 3, 1, "", "__init__"]], "ivy.functional.ivy.data_type.DefaultFloatDtype": [[422, 3, 1, "", "__init__"]], "ivy.functional.ivy.data_type.DefaultIntDtype": [[422, 3, 1, "", "__init__"]], "ivy.functional.ivy.device": [[459, 1, 1, "", "DefaultDevice"], [461, 1, 1, "", "DevClonedItem"], [462, 1, 1, "", "DevClonedIter"], [463, 1, 1, "", "DevClonedNest"], [464, 1, 1, "", "DevDistItem"], [465, 1, 1, "", "DevDistIter"], [466, 1, 1, "", "DevDistNest"], [459, 1, 1, "", "DevManager"], [468, 1, 1, "", "DevMapper"], [469, 1, 1, "", "DevMapperMultiProc"], [459, 1, 1, "", "MultiDev"], [471, 1, 1, "", "MultiDevItem"], [472, 1, 1, "", "MultiDevIter"], [473, 1, 1, "", "MultiDevNest"], [474, 1, 1, "", "Profiler"], [475, 2, 1, "", "as_ivy_dev"], [476, 2, 1, "", "as_native_dev"], [477, 2, 1, "", "clear_mem_on_dev"], [478, 2, 1, "", "default_device"], [479, 2, 1, "", "dev"], [480, 2, 1, "", "dev_clone"], [481, 2, 1, "", "dev_clone_array"], [482, 2, 1, "", "dev_clone_iter"], [483, 2, 1, "", "dev_clone_nest"], [484, 2, 1, "", "dev_dist"], [485, 2, 1, "", "dev_dist_array"], [486, 2, 1, "", "dev_dist_iter"], [487, 2, 1, "", "dev_dist_nest"], [488, 2, 1, "", "dev_unify"], [489, 2, 1, "", "dev_unify_array"], [490, 2, 1, "", "dev_unify_iter"], [491, 2, 1, "", "dev_unify_nest"], [492, 2, 1, "", "dev_util"], [493, 2, 1, "", "get_all_ivy_arrays_on_dev"], [494, 2, 1, "", "gpu_is_available"], [495, 2, 1, "", "num_cpu_cores"], [496, 2, 1, "", "num_gpus"], [497, 2, 1, "", "num_ivy_arrays_on_dev"], [498, 2, 1, "", "percent_used_mem_on_dev"], [499, 2, 1, "", "print_all_ivy_arrays_on_dev"], [500, 2, 1, "", "set_default_device"], [501, 2, 1, "", "set_split_factor"], [502, 2, 1, "", "split_factor"], [503, 2, 1, "", "split_func_call"], [504, 2, 1, "", "to_device"], [505, 2, 1, "", "total_mem_on_dev"], [506, 2, 1, "", "tpu_is_available"], [507, 2, 1, "", "unset_default_device"], [508, 2, 1, "", "used_mem_on_dev"]], "ivy.functional.ivy.device.DefaultDevice": [[459, 3, 1, "", "__enter__"], [459, 3, 1, "", "__init__"]], "ivy.functional.ivy.device.DevManager": [[459, 3, 1, "", "__init__"], [459, 3, 1, "", "da_tune_step"], [459, 4, 1, "", "dim_size"], [459, 3, 1, "", "ds_tune_step"], [459, 3, 1, "", "map"], [459, 3, 1, "", "repeated_config_check"], [459, 4, 1, "", "tune_step"], [459, 4, 1, "", "tuned"]], "ivy.functional.ivy.device.DevMapper": [[468, 3, 1, "", "__init__"], [468, 3, 1, "", "map"]], "ivy.functional.ivy.device.DevMapperMultiProc": [[469, 3, 1, "", "__init__"]], "ivy.functional.ivy.device.MultiDev": [[459, 3, 1, "", "__init__"]], "ivy.functional.ivy.device.MultiDevItem": [[471, 3, 1, "", "__init__"], [471, 3, 1, "", "items"], [471, 3, 1, "", "keys"], [471, 4, 1, "", "shape"], [471, 3, 1, "", "values"]], "ivy.functional.ivy.device.MultiDevIter": [[472, 3, 1, "", "__init__"], [472, 3, 1, "", "at_dev"], [472, 3, 1, "", "at_devs"]], "ivy.functional.ivy.device.MultiDevNest": [[473, 3, 1, "", "__init__"], [473, 3, 1, "", "at_dev"]], "ivy.functional.ivy.device.Profiler": [[474, 3, 1, "", "__init__"], [474, 3, 1, "", "start"], [474, 3, 1, "", "stop"]], "ivy.functional.ivy.elementwise": [[513, 2, 1, "", "abs"], [514, 2, 1, "", "acos"], [582, 2, 1, "", "acosh"], [522, 2, 1, "", "add"], [530, 2, 1, "", "asin"], [534, 2, 1, "", "asinh"], [535, 2, 1, "", "atan"], [542, 2, 1, "", "atan2"], [740, 2, 1, "", "atanh"], [550, 2, 1, "", "bitwise_and"], [554, 2, 1, "", "bitwise_invert"], [558, 2, 1, "", "bitwise_left_shift"], [562, 2, 1, "", "bitwise_or"], [566, 2, 1, "", "bitwise_right_shift"], [570, 2, 1, "", "bitwise_xor"], [574, 2, 1, "", "ceil"], [575, 2, 1, "", "cos"], [579, 2, 1, "", "cosh"], [583, 2, 1, "", "divide"], [588, 2, 1, "", "equal"], [595, 2, 1, "", "erf"], [596, 2, 1, "", "exp"], [603, 2, 1, "", "expm1"], [604, 2, 1, "", "floor"], [611, 2, 1, "", "floor_divide"], [612, 2, 1, "", "greater"], [619, 2, 1, "", "greater_equal"], [623, 2, 1, "", "isfinite"], [627, 2, 1, "", "isinf"], [631, 2, 1, "", "isnan"], [635, 2, 1, "", "less"], [639, 2, 1, "", "less_equal"], [643, 2, 1, "", "log"], [647, 2, 1, "", "log10"], [651, 2, 1, "", "log1p"], [655, 2, 1, "", "log2"], [659, 2, 1, "", "logaddexp"], [663, 2, 1, "", "logical_and"], [667, 2, 1, "", "logical_not"], [671, 2, 1, "", "logical_or"], [675, 2, 1, "", "logical_xor"], [676, 2, 1, "", "maximum"], [677, 2, 1, "", "minimum"], [681, 2, 1, "", "multiply"], [686, 2, 1, "", "negative"], [690, 2, 1, "", "not_equal"], [694, 2, 1, "", "positive"], [698, 2, 1, "", "pow"], [702, 2, 1, "", "remainder"], [706, 2, 1, "", "round"], [710, 2, 1, "", "sign"], [714, 2, 1, "", "sin"], [718, 2, 1, "", "sinh"], [722, 2, 1, "", "sqrt"], [726, 2, 1, "", "square"], [731, 2, 1, "", "subtract"], [732, 2, 1, "", "tan"], [737, 2, 1, "", "tanh"], [744, 2, 1, "", "trunc"]], "ivy.functional.ivy.general": [[749, 2, 1, "", "all_equal"], [751, 2, 1, "", "arg_info"], [752, 2, 1, "", "arg_names"], [753, 2, 1, "", "array_equal"], [754, 2, 1, "", "arrays_equal"], [755, 2, 1, "", "assert_supports_inplace"], [756, 2, 1, "", "cache_fn"], [757, 2, 1, "", "clip_matrix_norm"], [760, 2, 1, "", "clip_vector_norm"], [761, 2, 1, "", "container_types"], [762, 2, 1, "", "copy_array"], [763, 2, 1, "", "cumprod"], [764, 2, 1, "", "cumsum"], [765, 2, 1, "", "current_backend_str"], [766, 2, 1, "", "default"], [767, 2, 1, "", "einops_rearrange"], [768, 2, 1, "", "einops_reduce"], [769, 2, 1, "", "einops_repeat"], [770, 2, 1, "", "exists"], [771, 2, 1, "", "floormod"], [772, 2, 1, "", "fourier_encode"], [773, 2, 1, "", "gather"], [777, 2, 1, "", "gather_nd"], [779, 2, 1, "", "get_all_arrays_in_memory"], [780, 2, 1, "", "get_min_base"], [781, 2, 1, "", "get_min_denominator"], [782, 2, 1, "", "get_num_dims"], [783, 2, 1, "", "get_referrers_recursive"], [784, 2, 1, "", "has_nans"], [785, 2, 1, "", "indices_where"], [786, 2, 1, "", "inplace_arrays_supported"], [787, 2, 1, "", "inplace_decrement"], [788, 2, 1, "", "inplace_increment"], [789, 2, 1, "", "inplace_update"], [790, 2, 1, "", "inplace_variables_supported"], [791, 2, 1, "", "is_array"], [792, 2, 1, "", "is_ivy_array"], [793, 2, 1, "", "is_ivy_container"], [794, 2, 1, "", "is_native_array"], [795, 2, 1, "", "match_kwargs"], [796, 2, 1, "", "multiprocessing"], [797, 2, 1, "", "num_arrays_in_memory"], [798, 2, 1, "", "one_hot"], [799, 2, 1, "", "print_all_arrays_in_memory"], [800, 2, 1, "", "queue_timeout"], [801, 2, 1, "", "scatter_flat"], [802, 2, 1, "", "scatter_nd"], [803, 2, 1, "", "set_min_base"], [804, 2, 1, "", "set_min_denominator"], [805, 2, 1, "", "set_queue_timeout"], [806, 2, 1, "", "set_tmp_dir"], [807, 2, 1, "", "shape"], [808, 2, 1, "", "shape_to_tuple"], [809, 2, 1, "", "stable_divide"], [810, 2, 1, "", "stable_pow"], [811, 2, 1, "", "supports_inplace"], [812, 2, 1, "", "tmp_dir"], [813, 2, 1, "", "to_list"], [814, 2, 1, "", "to_numpy"], [815, 2, 1, "", "to_scalar"], [816, 2, 1, "", "try_else_none"], [817, 2, 1, "", "unstack"], [818, 2, 1, "", "value_is_nan"]], "ivy.functional.ivy.gradients": [[819, 1, 1, "", "GradientTracking"], [821, 2, 1, "", "adam_step"], [824, 2, 1, "", "adam_update"], [826, 2, 1, "", "execute_with_gradients"], [829, 2, 1, "", "gradient_descent_update"], [831, 2, 1, "", "is_variable"], [834, 2, 1, "", "lamb_update"], [838, 2, 1, "", "lars_update"], [842, 2, 1, "", "optimizer_update"], [844, 2, 1, "", "set_with_grads"], [845, 2, 1, "", "stop_gradient"], [846, 2, 1, "", "unset_with_grads"], [847, 2, 1, "", "variable"], [848, 2, 1, "", "variable_data"], [849, 2, 1, "", "with_grads"]], "ivy.functional.ivy.gradients.GradientTracking": [[819, 3, 1, "", "__init__"]], "ivy.functional.ivy.layers": [[851, 2, 1, "", "conv1d"], [852, 2, 1, "", "conv1d_transpose"], [853, 2, 1, "", "conv2d"], [854, 2, 1, "", "conv2d_transpose"], [855, 2, 1, "", "conv3d"], [856, 2, 1, "", "conv3d_transpose"], [857, 2, 1, "", "depthwise_conv2d"], [858, 2, 1, "", "dropout"], [859, 2, 1, "", "linear"], [860, 2, 1, "", "lstm_update"], [861, 2, 1, "", "multi_head_attention"], [862, 2, 1, "", "scaled_dot_product_attention"]], "ivy.functional.ivy.linear_algebra": [[866, 2, 1, "", "cholesky"], [869, 2, 1, "", "cross"], [870, 2, 1, "", "det"], [875, 2, 1, "", "diagonal"], [878, 2, 1, "", "eigh"], [881, 2, 1, "", "eigvalsh"], [882, 2, 1, "", "inv"], [888, 2, 1, "", "matmul"], [891, 2, 1, "", "matrix_norm"], [892, 2, 1, "", "matrix_power"], [895, 2, 1, "", "matrix_rank"], [898, 2, 1, "", "matrix_transpose"], [901, 2, 1, "", "outer"], [904, 2, 1, "", "pinv"], [907, 2, 1, "", "qr"], [908, 2, 1, "", "slogdet"], [911, 2, 1, "", "solve"], [912, 2, 1, "", "svd"], [917, 2, 1, "", "svdvals"], [920, 2, 1, "", "tensordot"], [923, 2, 1, "", "trace"], [926, 2, 1, "", "vecdot"], [929, 2, 1, "", "vector_norm"], [932, 2, 1, "", "vector_to_skew_symmetric_matrix"]], "ivy.functional.ivy.losses": [[937, 2, 1, "", "binary_cross_entropy"], [942, 2, 1, "", "cross_entropy"], [947, 2, 1, "", "sparse_cross_entropy"]], "ivy.functional.ivy.manipulation": [[953, 2, 1, "", "clip"], [958, 2, 1, "", "concat"], [962, 2, 1, "", "constant_pad"], [966, 2, 1, "", "expand_dims"], [970, 2, 1, "", "flip"], [974, 2, 1, "", "permute_dims"], [978, 2, 1, "", "repeat"], [982, 2, 1, "", "reshape"], [986, 2, 1, "", "roll"], [988, 2, 1, "", "split"], [992, 2, 1, "", "squeeze"], [996, 2, 1, "", "stack"], [1000, 2, 1, "", "swapaxes"], [1004, 2, 1, "", "tile"], [1008, 2, 1, "", "zero_pad"]], "ivy.functional.ivy.meta": [[1010, 2, 1, "", "fomaml_step"], [1011, 2, 1, "", "maml_step"], [1012, 2, 1, "", "reptile_step"]], "ivy.functional.ivy.nest": [[1014, 2, 1, "", "all_nested_indices"], [1015, 2, 1, "", "copy_nest"], [1016, 2, 1, "", "index_nest"], [1017, 2, 1, "", "insert_into_nest_at_index"], [1018, 2, 1, "", "insert_into_nest_at_indices"], [1019, 2, 1, "", "map"], [1020, 2, 1, "", "map_nest_at_index"], [1021, 2, 1, "", "map_nest_at_indices"], [1022, 2, 1, "", "multi_index_nest"], [1023, 2, 1, "", "nested_any"], [1024, 2, 1, "", "nested_indices_where"], [1025, 2, 1, "", "nested_map"], [1026, 2, 1, "", "nested_multi_map"], [1027, 2, 1, "", "prune_nest_at_index"], [1028, 2, 1, "", "prune_nest_at_indices"], [1029, 2, 1, "", "set_nest_at_index"], [1030, 2, 1, "", "set_nest_at_indices"]], "ivy.functional.ivy.norms": [[1035, 2, 1, "", "layer_norm"]], "ivy.functional.ivy.random": [[1037, 2, 1, "", "multinomial"], [1039, 2, 1, "", "randint"], [1041, 2, 1, "", "random_normal"], [1044, 2, 1, "", "random_uniform"], [1046, 2, 1, "", "seed"], [1047, 2, 1, "", "shuffle"]], "ivy.functional.ivy.searching": [[1049, 2, 1, "", "argmax"], [1050, 2, 1, "", "argmin"], [1051, 2, 1, "", "nonzero"], [1052, 2, 1, "", "where"]], "ivy.functional.ivy.set": [[1054, 2, 1, "", "unique_all"], [1055, 2, 1, "", "unique_counts"], [1056, 2, 1, "", "unique_inverse"], [1057, 2, 1, "", "unique_values"]], "ivy.functional.ivy.sorting": [[1062, 2, 1, "", "argsort"], [1067, 2, 1, "", "sort"]], "ivy.functional.ivy.statistical": [[1097, 2, 1, "", "einsum"], [1077, 2, 1, "", "max"], [1081, 2, 1, "", "mean"], [1085, 2, 1, "", "min"], [1089, 2, 1, "", "prod"], [1093, 2, 1, "", "std"], [1094, 2, 1, "", "sum"], [1101, 2, 1, "", "var"]], "ivy.functional.ivy.utility": [[1106, 2, 1, "", "all"], [1110, 2, 1, "", "any"]], "ivy.inspection": [[1115, 2, 1, "", "add_array_specs"], [1116, 2, 1, "", "fn_array_spec"]], "ivy.stateful": [[1118, 0, 0, "-", "activations"], [1121, 0, 0, "-", "converters"], [1123, 0, 0, "-", "initializers"], [1132, 0, 0, "-", "layers"], [1144, 0, 0, "-", "module"], [1146, 0, 0, "-", "norms"], [1148, 0, 0, "-", "optimizers"], [1154, 0, 0, "-", "sequential"]], "ivy.stateful.activations": [[1119, 1, 1, "", "GEGLU"], [1120, 1, 1, "", "GELU"]], "ivy.stateful.activations.GEGLU": [[1119, 3, 1, "", "__init__"]], "ivy.stateful.activations.GELU": [[1120, 3, 1, "", "__init__"]], "ivy.stateful.converters": [[1122, 2, 1, "", "to_ivy_module"]], "ivy.stateful.initializers": [[1123, 1, 1, "", "Constant"], [1125, 1, 1, "", "FirstLayerSiren"], [1126, 1, 1, "", "GlorotUniform"], [1123, 1, 1, "", "KaimingNormal"], [1128, 1, 1, "", "Ones"], [1129, 1, 1, "", "Siren"], [1123, 1, 1, "", "Uniform"], [1131, 1, 1, "", "Zeros"]], "ivy.stateful.initializers.Constant": [[1123, 3, 1, "", "__init__"], [1123, 3, 1, "", "create_variables"]], "ivy.stateful.initializers.FirstLayerSiren": [[1125, 3, 1, "", "__init__"]], "ivy.stateful.initializers.GlorotUniform": [[1126, 3, 1, "", "__init__"]], "ivy.stateful.initializers.KaimingNormal": [[1123, 3, 1, "", "__init__"], [1123, 3, 1, "", "create_variables"]], "ivy.stateful.initializers.Ones": [[1128, 3, 1, "", "__init__"]], "ivy.stateful.initializers.Siren": [[1129, 3, 1, "", "__init__"]], "ivy.stateful.initializers.Uniform": [[1123, 3, 1, "", "__init__"], [1123, 3, 1, "", "create_variables"]], "ivy.stateful.initializers.Zeros": [[1131, 3, 1, "", "__init__"]], "ivy.stateful.layers": [[1133, 1, 1, "", "Conv1D"], [1134, 1, 1, "", "Conv1DTranspose"], [1135, 1, 1, "", "Conv2D"], [1136, 1, 1, "", "Conv2DTranspose"], [1137, 1, 1, "", "Conv3D"], [1138, 1, 1, "", "Conv3DTranspose"], [1139, 1, 1, "", "DepthwiseConv2D"], [1140, 1, 1, "", "Dropout"], [1141, 1, 1, "", "LSTM"], [1142, 1, 1, "", "Linear"], [1143, 1, 1, "", "MultiHeadAttention"]], "ivy.stateful.layers.Conv1D": [[1133, 3, 1, "", "__init__"]], "ivy.stateful.layers.Conv1DTranspose": [[1134, 3, 1, "", "__init__"]], "ivy.stateful.layers.Conv2D": [[1135, 3, 1, "", "__init__"]], "ivy.stateful.layers.Conv2DTranspose": [[1136, 3, 1, "", "__init__"]], "ivy.stateful.layers.Conv3D": [[1137, 3, 1, "", "__init__"]], "ivy.stateful.layers.Conv3DTranspose": [[1138, 3, 1, "", "__init__"]], "ivy.stateful.layers.DepthwiseConv2D": [[1139, 3, 1, "", "__init__"]], "ivy.stateful.layers.Dropout": [[1140, 3, 1, "", "__init__"]], "ivy.stateful.layers.LSTM": [[1141, 3, 1, "", "__init__"], [1141, 3, 1, "", "get_initial_state"]], "ivy.stateful.layers.Linear": [[1142, 3, 1, "", "__init__"]], "ivy.stateful.layers.MultiHeadAttention": [[1143, 3, 1, "", "__init__"]], "ivy.stateful.module": [[1145, 1, 1, "", "Module"]], "ivy.stateful.module.Module": [[1145, 3, 1, "", "__init__"], [1145, 3, 1, "", "build"], [1145, 4, 1, "", "build_mode"], [1145, 4, 1, "", "built"], [1145, 3, 1, "", "check_submod_rets"], [1145, 3, 1, "", "get_mod_key"], [1145, 3, 1, "", "mod_depth"], [1145, 3, 1, "", "mod_height"], [1145, 3, 1, "", "mod_with_top_mod_key_chain"], [1145, 3, 1, "", "save_weights"], [1145, 3, 1, "", "show_mod_in_top_mod"], [1145, 3, 1, "", "show_structure"], [1145, 3, 1, "", "show_v_in_top_v"], [1145, 3, 1, "", "sub_mods"], [1145, 3, 1, "", "track_submod_call_order"], [1145, 3, 1, "", "track_submod_rets"], [1145, 3, 1, "", "v_with_top_v_key_chains"]], "ivy.stateful.norms": [[1147, 1, 1, "", "LayerNorm"]], "ivy.stateful.norms.LayerNorm": [[1147, 3, 1, "", "__init__"]], "ivy.stateful.optimizers": [[1149, 1, 1, "", "Adam"], [1150, 1, 1, "", "LAMB"], [1151, 1, 1, "", "LARS"], [1152, 1, 1, "", "Optimizer"], [1153, 1, 1, "", "SGD"]], "ivy.stateful.optimizers.Adam": [[1149, 3, 1, "", "__init__"], [1149, 3, 1, "", "set_state"], [1149, 4, 1, "", "state"]], "ivy.stateful.optimizers.LAMB": [[1150, 3, 1, "", "__init__"], [1150, 3, 1, "", "set_state"], [1150, 4, 1, "", "state"]], "ivy.stateful.optimizers.LARS": [[1151, 3, 1, "", "__init__"], [1151, 3, 1, "", "set_state"], [1151, 4, 1, "", "state"]], "ivy.stateful.optimizers.Optimizer": [[1152, 3, 1, "", "__init__"], [1152, 3, 1, "", "set_state"], [1152, 3, 1, "", "step"]], "ivy.stateful.optimizers.SGD": [[1153, 3, 1, "", "__init__"], [1153, 3, 1, "", "set_state"], [1153, 4, 1, "", "state"]], "ivy.stateful.sequential": [[1155, 1, 1, "", "Sequential"]], "ivy.stateful.sequential.Sequential": [[1155, 3, 1, "", "__init__"]], "ivy.verbosity": [[1158, 2, 1, "", "cprint"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:function", "3": "py:method", "4": "py:property", "5": "py:data"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "function", "Python function"], "3": ["py", "method", "Python method"], "4": ["py", "property", "Python property"], "5": ["py", "data", "Python data"]}, "titleterms": {"activ": [0, 175, 392, 1118], "arraywithactiv": 1, "arrai": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 173, 352, 357, 362, 366, 432, 511, 515, 519, 523, 528, 532, 536, 540, 544, 548, 552, 556, 560, 564, 568, 572, 576, 580, 584, 589, 593, 597, 601, 605, 609, 613, 617, 621, 625, 629, 633, 637, 641, 645, 649, 653, 657, 661, 665, 669, 673, 679, 684, 688, 692, 696, 700, 704, 708, 712, 716, 720, 724, 729, 734, 738, 742, 747, 775, 865, 868, 871, 874, 877, 880, 883, 886, 890, 894, 897, 900, 903, 906, 910, 913, 916, 919, 922, 925, 928, 931, 935, 940, 945, 951, 956, 960, 964, 968, 972, 976, 980, 984, 990, 994, 998, 1002, 1006, 1033, 1060, 1065, 1071, 1075, 1079, 1083, 1087, 1091, 1095, 1099, 1104, 1108], "method": [2, 182, 358, 366, 367], "ab": [3, 183, 510, 511, 512, 513], "aco": [4, 184, 514, 515, 516], "acosh": [5, 185, 517, 518, 519, 520, 521, 578, 582], "add": [6, 187, 351, 522, 523, 524], "all": [7, 188, 1103, 1104, 1105, 1106], "all_equ": [8, 189, 746, 747, 748, 749], "ani": [9, 190, 1107, 1108, 1109, 1110], "argsort": [10, 191, 1059, 1060, 1061, 1062], "asin": [11, 192, 527, 528, 529, 530], "asinh": [12, 193, 531, 532, 533, 534], "atan": [13, 196, 535, 536, 537], "atan2": [14, 197, 539, 540, 541, 542], "atanh": [15, 198, 538, 543, 544, 545, 546, 736, 740], "binary_cross_entropi": [16, 199, 934, 935, 936, 937], "bitwise_and": [17, 200, 547, 548, 549, 550], "bitwise_invert": [18, 201, 551, 552, 553, 554], "bitwise_left_shift": [19, 202, 555, 556, 557, 558], "bitwise_or": [20, 203, 559, 560, 561, 562], "bitwise_right_shift": [21, 204, 563, 564, 565, 566], "bitwise_xor": [22, 205, 567, 568, 569, 570], "can_cast": [23, 206, 431, 432, 433, 434], "ceil": [24, 207, 571, 572, 573, 574], "choleski": [25, 864, 865, 866], "clip": [26, 208, 950, 951, 952, 953], "concat": [27, 210, 955, 956, 957, 958], "constant_pad": [28, 211, 959, 960, 961, 962], "co": [29, 212, 575, 576, 577], "cosh": [30, 213, 579, 580, 581], "cross": [31, 867, 868, 869], "cross_entropi": [32, 214, 939, 940, 941, 942], "det": [33, 870, 871], "diagon": [34, 873, 874, 875], "divid": [35, 215, 583, 584, 585], "eigh": [36, 876, 877, 878], "eigvalsh": [37, 879, 880, 881], "einsum": [38, 216, 1070, 1071, 1072, 1073, 1097], "equal": [39, 217, 588, 589, 590], "erf": [40, 218, 592, 593, 594, 595], "exp": [41, 219, 596, 597, 598], "expand_dim": [42, 220, 963, 964, 965, 966], "expm1": [43, 221, 600, 601, 602, 603], "flip": [44, 222, 967, 968, 969, 970], "floor": [45, 223, 604, 605, 606], "floor_divid": [46, 224, 586, 607, 608, 609, 610, 611], "gather_nd": [47, 225, 774, 775, 776, 777], "greater": [48, 227, 612, 613, 614], "greater_equ": [49, 228, 591, 615, 616, 617, 618, 619], "inv": [50, 882, 883], "isfinit": [51, 229, 620, 621, 622, 623], "isinf": [52, 230, 624, 625, 626, 627], "isnan": [53, 231, 628, 629, 630, 631], "layer_norm": [54, 234, 1032, 1033, 1034, 1035], "less": [55, 235, 632, 633, 634, 635], "less_equ": [56, 236, 636, 637, 638, 639], "log": [57, 237, 640, 641, 642, 643], "log10": [58, 238, 644, 645, 646, 647], "log1p": [59, 239, 648, 649, 650, 651], "log2": [60, 240, 652, 653, 654, 655], "logaddexp": [61, 241, 525, 599, 656, 657, 658, 659], "logical_and": [62, 242, 660, 661, 662, 663], "logical_not": [63, 243, 664, 665, 666, 667], "logical_or": [64, 244, 668, 669, 670, 671], "logical_xor": [65, 245, 672, 673, 674, 675], "matmul": [66, 246, 885, 886, 887, 888], "matrix_norm": [67, 889, 890, 891], "matrix_rank": [68, 893, 894, 895], "matrix_transpos": [69, 896, 897, 898], "max": [70, 247, 1074, 1075, 1076, 1077], "mean": [71, 248, 1078, 1079, 1080, 1081], "min": [72, 249, 1082, 1083, 1084, 1085], "multipli": [73, 250, 678, 679, 680, 681], "neg": [74, 251, 683, 684, 685, 686], "not_equ": [75, 252, 687, 688, 689, 690], "outer": [76, 899, 900, 901], "permute_dim": [77, 254, 971, 972, 973, 974], "pinv": [78, 884, 902, 903, 904], "posit": [79, 255, 691, 692, 693, 694], "pow": [80, 256, 695, 696, 697, 698], "prod": [81, 257, 1086, 1087, 1088, 1089], "qr": [82, 905, 906, 907], "remaind": [83, 259, 699, 700, 701, 702], "repeat": [84, 260, 975, 976, 977, 978], "reshap": [85, 261, 979, 980, 981, 982], "roll": [86, 262, 351, 983, 984, 985, 986], "round": [87, 263, 703, 704, 705, 706], "sign": [88, 264, 707, 708, 709, 710], "sin": [89, 265, 711, 712, 713, 714], "sinh": [90, 266, 715, 716, 717, 718], "solv": [91, 909, 910, 911], "sort": [92, 150, 267, 335, 1058, 1064, 1065, 1066, 1067], "sparse_cross_entropi": [93, 268, 944, 945, 946, 947], "sqrt": [94, 269, 719, 720, 721, 722], "squar": [95, 270, 723, 724, 725, 726], "squeez": [96, 271, 989, 990, 991, 992], "stack": [97, 272, 993, 994, 995, 996], "std": [98, 295, 1090, 1091, 1092, 1093], "subtract": [99, 296, 727, 729, 730, 731], "sum": [100, 297, 1094, 1095, 1096], "svd": [101, 912, 913], "svdval": [102, 914, 915, 916, 917], "swapax": [103, 298, 997, 998, 999, 1000], "tan": [104, 299, 351, 732, 734, 735], "tanh": [105, 300, 399, 737, 738, 739], "tensordot": [106, 918, 919, 920], "tile": [107, 301, 1001, 1002, 1003, 1004], "trace": [108, 921, 922, 923], "trunc": [109, 302, 741, 742, 743, 744], "var": [110, 303, 1098, 1099, 1100, 1101], "vecdot": [111, 924, 925, 926], "vector_norm": [112, 927, 928, 929], "vector_to_skew_symmetric_matrix": [113, 930, 931, 932], "zero_pad": [114, 304, 1005, 1006, 1007, 1008], "convers": 115, "args_to_ivi": 116, "args_to_n": 117, "to_ivi": 118, "to_n": 119, "creation": [120, 305, 403], "arraywithcr": 121, "data": [122, 307, 353, 359, 367, 381, 422, 1053, 1054, 1055, 1057], "type": [122, 307, 354, 359, 381, 422], "arraywithdatatyp": 123, "devic": [124, 309, 360, 362, 459], "arraywithdevic": 125, "elementwis": [126, 311, 509], "arraywithelementwis": 127, "gener": [128, 313, 353, 745], "arraywithgener": 129, "gradient": [130, 315, 819], "arraywithgradi": 131, "imag": [132, 317], "arraywithimag": 133, "layer": [134, 319, 850, 1132], "arraywithlay": 135, "linear": [136, 321, 859, 863, 1142], "algebra": [136, 321, 863], "arraywithlinearalgebra": 137, "loss": [138, 323, 933], "arraywithloss": 139, "manipul": [140, 325, 949], "arraywithmanipul": 141, "norm": [142, 327, 1031, 1146], "arraywithnorm": 143, "random": [144, 329, 1036], "arraywithrandom": 145, "search": [146, 331, 1048], "arraywithsearch": 147, "set": [148, 333, 344, 355, 1053], "arraywithset": 149, "arraywithsort": 151, "statist": [152, 337, 1069], "arraywithstatist": 153, "util": [154, 339, 1102], "arraywithutil": 155, "wrap": [156, 341, 356], "add_ivy_array_instance_method": 157, "backend": [158, 349, 355, 364, 381], "handler": [158, 364], "choose_random_backend": 160, "clear_backend_stack": 161, "current_backend": 162, "get_backend": 163, "set_backend": 164, "try_import_ivy_jax": 165, "try_import_ivy_mxnet": 166, "try_import_ivy_numpi": 167, "try_import_ivy_tf": 168, "try_import_ivy_torch": 169, "unset_backend": 170, "background": [171, 1111], "ml": 172, "explos": 172, "standard": 173, "skeptic": 173, "complimentari": 173, "vs": [173, 381], "competit": 173, "do": 173, "work": [173, 347], "The": [173, 345, 366, 381], "api": [173, 346, 349, 352, 358, 364, 366, 368, 369], "why": 174, "unifi": [174, 366], "No": [174, 344], "more": 174, "re": 174, "implement": 174, "infinit": 174, "shelf": 174, "life": 174, "containerwithactiv": 176, "base": 177, "containerbas": 178, "contain": [179, 180, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 358, 367, 433, 435, 512, 516, 520, 524, 526, 529, 533, 537, 541, 545, 549, 553, 557, 561, 565, 569, 573, 577, 581, 585, 587, 590, 594, 598, 602, 606, 610, 614, 618, 622, 626, 630, 634, 638, 642, 646, 650, 654, 658, 662, 666, 670, 674, 680, 682, 685, 689, 693, 697, 701, 705, 709, 713, 717, 721, 725, 728, 730, 733, 735, 739, 743, 748, 750, 759, 776, 778, 823, 825, 828, 830, 833, 835, 837, 839, 841, 843, 887, 936, 938, 941, 943, 946, 948, 952, 954, 957, 961, 965, 969, 973, 977, 981, 985, 987, 991, 995, 999, 1003, 1007, 1034, 1040, 1043, 1045, 1061, 1063, 1066, 1068, 1072, 1076, 1080, 1084, 1088, 1092, 1096, 1100, 1105, 1109], "multidevcontain": 181, "adam_upd": [186, 822, 823, 824], "at_dev": [194, 195], "clip_vector_norm": [209, 758, 759, 760], "gradient_descent_upd": [226, 827, 828, 829], "lamb_upd": [232, 832, 833, 834], "lars_upd": [233, 836, 837, 838], "optimizer_upd": [253, 840, 841, 842], "random_uniform": [258, 1042, 1043, 1044], "static_adam_upd": [273, 825], "static_add": [274, 526], "static_all_equ": [275, 750], "static_argsort": [276, 1063], "static_binary_cross_entropi": [277, 938], "static_can_cast": [278, 435], "static_clip": [279, 954], "static_cross_entropi": [280, 943], "static_divid": [281, 587], "static_gather_nd": [282, 778], "static_gradient_descent_upd": [283, 830], "static_lamb_upd": [284, 835], "static_lars_upd": [285, 839], "static_multipli": [286, 682], "static_optimizer_upd": [287, 843], "static_randint": [288, 1040], "static_random_uniform": [289, 1045], "static_rol": [290, 987], "static_sort": [291, 1068], "static_sparse_cross_entropi": [292, 948], "static_subtract": [293, 728], "static_tan": [294, 733], "containerwithcr": 306, "containerwithdatatyp": 308, "containerwithdevic": 310, "containerwithelementwis": 312, "containerwithgener": 314, "containerwithgradi": 316, "containerwithimag": 318, "containerwithlay": 320, "containerwithlinearalgebra": 322, "containerwithloss": 324, "containerwithmanipul": 326, "containerwithnorm": 328, "containerwithrandom": 330, "containerwithsearch": 332, "containerwithset": 334, "containerwithsort": 336, "containerwithstatist": 338, "containerwithutil": 340, "add_ivy_container_instance_method": 342, "contribut": [343, 1111], "up": 344, "clone": 344, "ivi": [344, 349, 351, 353, 357, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 380], "pycharm": 344, "virtual": 344, "environ": 344, "docker": [344, 345, 347], "us": [344, 347, 367], "miniconda": [344, 347], "venv": [344, 347], "interpret": 344, "window": 344, "maco": 344, "ubuntu": 344, "github": 344, "codespac": 344, "pre": 344, "commit": [344, 345], "basic": 345, "get": 345, "help": 345, "todo": 345, "list": 345, "issu": 345, "manag": 345, "your": 345, "fork": 345, "who": 345, "To": 345, "ask": 345, "With": 345, "command": 345, "line": 345, "browser": 345, "pull": 345, "request": 345, "small": 345, "often": 345, "run": 345, "test": [345, 352, 353], "local": 345, "open": 346, "task": 346, "function": [346, 354, 356, 358, 359, 360, 362, 364, 369, 381, 434, 513, 517, 521, 525, 530, 534, 538, 542, 546, 550, 554, 558, 562, 566, 570, 574, 578, 582, 586, 591, 595, 599, 603, 607, 611, 615, 619, 623, 627, 631, 635, 639, 643, 647, 651, 655, 659, 663, 667, 671, 675, 681, 686, 690, 694, 698, 702, 706, 710, 714, 718, 722, 726, 731, 736, 740, 744, 749, 760, 777, 824, 829, 834, 838, 842, 866, 869, 872, 875, 878, 881, 884, 888, 891, 895, 898, 901, 904, 907, 911, 914, 917, 920, 923, 926, 929, 932, 937, 942, 947, 953, 958, 962, 966, 970, 974, 978, 982, 986, 992, 996, 1000, 1004, 1008, 1035, 1039, 1044, 1062, 1067, 1073, 1077, 1081, 1085, 1089, 1093, 1097, 1101, 1106, 1110], "format": 346, "frontend": [346, 369], "build": [347, 364], "doc": 347, "dockerless": 347, "document": 347, "pipelin": [347, 381], "make_doc": 347, "sh": 347, "entrypoint": 347, "_make_doc": 347, "generate_src_rst_fil": 347, "py": 347, "sphinx": 347, "correct_built_html_fil": 347, "remove_fil": 347, "deep": 348, "dive": 348, "navig": 349, "code": 349, "categor": 349, "submodul": 349, "design": [349, 363, 1111], "docstr": [350, 351], "exampl": [351, 362], "hypothesi": 353, "self": 353, "consist": 353, "explicit": 353, "test_array_funct": 353, "primari": 354, "composit": 354, "mix": 354, "standalon": 354, "nestabl": [354, 358, 362], "conveni": 354, "nativ": 357, "handl": 357, "instanc": [358, 366], "static": 358, "special": 358, "modul": [359, 360, 368, 1144, 1145], "argument": [359, 360, 361, 362], "other": [359, 360], "inplac": 361, "updat": 361, "out": [361, 362], "copi": 361, "dtype": [362, 440], "number": 362, "oper": [362, 366, 381], "integ": 362, "sequenc": 362, "block": 364, "framework": [364, 365], "graph": [364, 369], "compil": [364, 369, 400, 401], "class": 366, "monkei": 366, "patch": 366, "construct": 367, "represent": 367, "recurs": 367, "built": 367, "ins": 367, "access": 367, "save": 367, "load": 367, "comparison": 367, "custom": [367, 381], "case": 367, "compartment": 367, "configur": 367, "network": [367, 369], "weight": 367, "state": [368, 381], "initi": [368, 1123], "optim": [368, 1148, 1152], "transpil": 369, "role": 369, "convert": [369, 1121], "model": [369, 376, 381], "builder": 371, "ecosystem": 372, "gym": [373, 380], "mech": 374, "memori": [375, 380], "robot": [377, 380], "vision": [378, 380], "extens": [379, 1111], "appli": 380, "librari": 380, "mechan": 380, "faq": 381, "maintain": 381, "version": 381, "dynam": 381, "size": 381, "shape": [381, 807, 1053, 1054, 1055, 1057], "check": 381, "control": 381, "flow": 381, "auto": 381, "differenti": 381, "replica": 381, "parallel": 381, "support": 381, "altern": 381, "structur": 381, "func": 382, "wrapper": 382, "handle_nest": 383, "handle_out_argu": 384, "infer_devic": 385, "infer_dtyp": 386, "inputs_to_ivy_arrai": 387, "inputs_to_native_arrai": 388, "outputs_to_ivy_arrai": 389, "to_native_arrays_and_back": 390, "gelu": [393, 1120], "leaky_relu": 394, "relu": 395, "sigmoid": 396, "softmax": 397, "softplu": 398, "constant": 402, "note": [403, 409], "arang": 404, "asarrai": 405, "empti": 406, "empty_lik": 407, "ey": 408, "from_dlpack": 409, "full": 410, "full_lik": 411, "linspac": 412, "logspac": 413, "meshgrid": 414, "native_arrai": 415, "ones": 416, "ones_lik": 417, "tril": 418, "triu": 419, "zero": [420, 1131], "zeros_lik": 421, "as_ivy_dtyp": 426, "as_native_dtyp": 427, "astyp": 428, "broadcast_arrai": 429, "broadcast_to": 430, "closest_valid_dtyp": 436, "default_dtyp": 437, "default_float_dtyp": 438, "default_int_dtyp": 439, "dtype_bit": 441, "finfo": 442, "function_supported_dtyp": 443, "function_unsupported_dtyp": 444, "iinfo": 445, "invalid_dtyp": 446, "is_float_dtyp": 447, "is_int_dtyp": 448, "promote_typ": 449, "result_typ": 450, "set_default_dtyp": 451, "set_default_float_dtyp": 452, "set_default_int_dtyp": 453, "type_promote_arrai": 454, "unset_default_dtyp": 455, "unset_default_float_dtyp": 456, "unset_default_int_dtyp": 457, "valid_dtyp": 458, "devcloneditem": 461, "devclonedit": 462, "devclonednest": 463, "devdistitem": 464, "devdistit": 465, "devdistnest": 466, "devmapp": 468, "devmappermultiproc": 469, "multidevitem": 471, "multidevit": 472, "multidevnest": 473, "profil": 474, "as_ivy_dev": 475, "as_native_dev": 476, "clear_mem_on_dev": 477, "default_devic": 478, "dev": 479, "dev_clon": 480, "dev_clone_arrai": 481, "dev_clone_it": 482, "dev_clone_nest": 483, "dev_dist": 484, "dev_dist_arrai": 485, "dev_dist_it": 486, "dev_dist_nest": 487, "dev_unifi": 488, "dev_unify_arrai": 489, "dev_unify_it": 490, "dev_unify_nest": 491, "dev_util": 492, "get_all_ivy_arrays_on_dev": 493, "gpu_is_avail": 494, "num_cpu_cor": 495, "num_gpu": 496, "num_ivy_arrays_on_dev": 497, "percent_used_mem_on_dev": 498, "print_all_ivy_arrays_on_dev": 499, "set_default_devic": 500, "set_split_factor": 501, "split_factor": 502, "split_func_cal": 503, "to_devic": 504, "total_mem_on_dev": 505, "tpu_is_avail": 506, "unset_default_devic": 507, "used_mem_on_dev": 508, "maximum": 676, "minimum": 677, "arg_info": 751, "arg_nam": 752, "array_equ": 753, "arrays_equ": 754, "assert_supports_inplac": 755, "cache_fn": 756, "clip_matrix_norm": 757, "container_typ": 761, "copy_arrai": 762, "cumprod": 763, "cumsum": 764, "current_backend_str": 765, "default": 766, "einops_rearrang": 767, "einops_reduc": 768, "einops_repeat": 769, "exist": 770, "floormod": 771, "fourier_encod": 772, "gather": 773, "get_all_arrays_in_memori": 779, "get_min_bas": 780, "get_min_denomin": 781, "get_num_dim": 782, "get_referrers_recurs": 783, "has_nan": 784, "indices_wher": 785, "inplace_arrays_support": 786, "inplace_decr": 787, "inplace_incr": 788, "inplace_upd": 789, "inplace_variables_support": 790, "is_arrai": 791, "is_ivy_arrai": 792, "is_ivy_contain": 793, "is_native_arrai": 794, "match_kwarg": 795, "multiprocess": 796, "num_arrays_in_memori": 797, "one_hot": 798, "print_all_arrays_in_memori": 799, "queue_timeout": 800, "scatter_flat": 801, "scatter_nd": 802, "set_min_bas": 803, "set_min_denomin": 804, "set_queue_timeout": 805, "set_tmp_dir": 806, "shape_to_tupl": 808, "stable_divid": 809, "stable_pow": 810, "supports_inplac": 811, "tmp_dir": 812, "to_list": 813, "to_numpi": 814, "to_scalar": 815, "try_else_non": 816, "unstack": 817, "value_is_nan": 818, "adam_step": 821, "execute_with_gradi": 826, "is_vari": 831, "set_with_grad": 844, "stop_gradi": 845, "unset_with_grad": 846, "variabl": 847, "variable_data": 848, "with_grad": 849, "conv1d": [851, 1133], "conv1d_transpos": 852, "conv2d": [853, 1135], "conv2d_transpos": 854, "conv3d": [855, 1137], "conv3d_transpos": 856, "depthwise_conv2d": 857, "dropout": [858, 1140], "lstm_updat": 860, "multi_head_attent": 861, "scaled_dot_product_attent": 862, "slogdet": [872, 908], "matrix_pow": 892, "split": 988, "meta": 1009, "fomaml_step": 1010, "maml_step": 1011, "reptile_step": 1012, "nest": 1013, "all_nested_indic": 1014, "copy_nest": 1015, "index_nest": 1016, "insert_into_nest_at_index": 1017, "insert_into_nest_at_indic": 1018, "map": 1019, "map_nest_at_index": 1020, "map_nest_at_indic": 1021, "multi_index_nest": 1022, "nested_ani": 1023, "nested_indices_wher": 1024, "nested_map": 1025, "nested_multi_map": 1026, "prune_nest_at_index": 1027, "prune_nest_at_indic": 1028, "set_nest_at_index": 1029, "set_nest_at_indic": 1030, "multinomi": 1037, "randint": [1038, 1039], "random_norm": 1041, "seed": 1046, "shuffl": 1047, "argmax": 1049, "argmin": 1050, "nonzero": 1051, "where": 1052, "depend": [1053, 1054, 1055, 1057], "output": [1053, 1054, 1055, 1057], "unique_al": 1054, "unique_count": 1055, "unique_invers": 1056, "unique_valu": 1057, "content": 1111, "overview": 1111, "quick": 1111, "start": 1111, "roadmap": [1111, 1117], "citat": 1111, "inspect": 1114, "add_array_spec": 1115, "fn_array_spec": 1116, "geglu": 1119, "to_ivy_modul": 1122, "firstlayersiren": 1125, "glorotuniform": 1126, "Ones": 1128, "siren": 1129, "conv1dtranspos": 1134, "conv2dtranspos": 1136, "conv3dtranspos": 1138, "depthwiseconv2d": 1139, "lstm": 1141, "multiheadattent": 1143, "layernorm": 1147, "adam": 1149, "lamb": 1150, "lar": 1151, "sgd": 1153, "sequenti": [1154, 1155], "verbos": 1157, "cprint": 1158}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 6, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.viewcode": 1, "sphinx": 56}})