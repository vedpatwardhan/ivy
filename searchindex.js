Search.setIndex({"docnames": ["backend_handler", "backend_handler/ContextManager:\n    def __init__", "backend_handler/choose_random_backend", "backend_handler/clear_backend_stack", "backend_handler/current_backend", "backend_handler/get_backend", "backend_handler/set_backend", "backend_handler/try_import_ivy_jax", "backend_handler/try_import_ivy_mxnet", "backend_handler/try_import_ivy_numpy", "backend_handler/try_import_ivy_tf", "backend_handler/try_import_ivy_torch", "backend_handler/unset_backend", "background", "background/ml_explosion", "background/standardization", "background/why_unify", "contributing", "contributing/0_setting_up", "contributing/1_the_basics", "contributing/4_open_tasks", "contributing/building_the_docs", "data_classes/array/activations", "data_classes/array/activations/ArrayWithActivations", "data_classes/array/array", "data_classes/array/array/Array", "data_classes/array/array/Variable", "data_classes/array/conversions", "data_classes/array/conversions/args_to_ivy", "data_classes/array/conversions/args_to_native", "data_classes/array/conversions/to_ivy", "data_classes/array/conversions/to_native", "data_classes/array/creation", "data_classes/array/creation/ArrayWithCreation", "data_classes/array/data_type", "data_classes/array/data_type/ArrayWithDataTypes", "data_classes/array/device", "data_classes/array/device/ArrayWithDevice", "data_classes/array/elementwise", "data_classes/array/elementwise/ArrayWithElementwise", "data_classes/array/general", "data_classes/array/general/ArrayWithGeneral", "data_classes/array/gradients", "data_classes/array/gradients/ArrayWithGradients", "data_classes/array/image", "data_classes/array/image/ArrayWithImage", "data_classes/array/layers", "data_classes/array/layers/ArrayWithLayers", "data_classes/array/linear_algebra", "data_classes/array/linear_algebra/ArrayWithLinearAlgebra", "data_classes/array/losses", "data_classes/array/losses/ArrayWithLosses", "data_classes/array/manipulation", "data_classes/array/manipulation/ArrayWithManipulation", "data_classes/array/norms", "data_classes/array/norms/ArrayWithNorms", "data_classes/array/random", "data_classes/array/random/ArrayWithRandom", "data_classes/array/searching", "data_classes/array/searching/ArrayWithSearching", "data_classes/array/set", "data_classes/array/set/ArrayWithSet", "data_classes/array/sorting", "data_classes/array/sorting/ArrayWithSorting", "data_classes/array/statistical", "data_classes/array/statistical/ArrayWithStatistical", "data_classes/array/utility", "data_classes/array/utility/ArrayWithUtility", "data_classes/array/wrapping", "data_classes/array/wrapping/add_ivy_array_instance_methods", "data_classes/container/activations", "data_classes/container/activations/ContainerWithActivations", "data_classes/container/base", "data_classes/container/base/ContainerBase", "data_classes/container/container", "data_classes/container/container/Container", "data_classes/container/container/MultiDevContainer", "data_classes/container/creation", "data_classes/container/creation/ContainerWithCreation", "data_classes/container/data_type", "data_classes/container/data_type/ContainerWithDataTypes", "data_classes/container/device", "data_classes/container/device/ContainerWithDevice", "data_classes/container/elementwise", "data_classes/container/elementwise/ContainerWithElementwise", "data_classes/container/general", "data_classes/container/general/ContainerWithGeneral", "data_classes/container/gradients", "data_classes/container/gradients/ContainerWithGradients", "data_classes/container/image", "data_classes/container/image/ContainerWithImage", "data_classes/container/layers", "data_classes/container/layers/ContainerWithLayers", "data_classes/container/linear_algebra", "data_classes/container/linear_algebra/ContainerWithLinearAlgebra", "data_classes/container/losses", "data_classes/container/losses/ContainerWithLosses", "data_classes/container/manipulation", "data_classes/container/manipulation/ContainerWithManipulation", "data_classes/container/norms", "data_classes/container/norms/ContainerWithNorms", "data_classes/container/random", "data_classes/container/random/ContainerWithRandom", "data_classes/container/searching", "data_classes/container/searching/ContainerWithSearching", "data_classes/container/set", "data_classes/container/set/ContainerWithSet", "data_classes/container/sorting", "data_classes/container/sorting/ContainerWithSorting", "data_classes/container/statistical", "data_classes/container/statistical/ContainerWithStatistical", "data_classes/container/utility", "data_classes/container/utility/ContainerWithUtility", "data_classes/container/wrapping", "data_classes/container/wrapping/add_ivy_container_instance_methods", "deep_dive", "deep_dive/0_navigating_the_code", "deep_dive/10_function_arguments", "deep_dive/11_docstrings", "deep_dive/12_docstring_examples", "deep_dive/13_array_api_tests", "deep_dive/14_ivy_tests", "deep_dive/1_function_types", "deep_dive/2_backend_setting", "deep_dive/3_function_wrapping", "deep_dive/4_arrays", "deep_dive/5_containers", "deep_dive/6_data_types", "deep_dive/7_devices", "deep_dive/8_inplace_updates", "deep_dive/9_formatting", "design", "design/building_blocks", "design/ivy_as_a_framework", "design/ivy_as_a_framework/ivy_array", "design/ivy_as_a_framework/ivy_container", "design/ivy_as_a_framework/ivy_stateful_api", "design/ivy_as_a_transpiler", "docs/ivy", "docs/ivy_builder", "docs/ivy_ecosystem", "docs/ivy_gym", "docs/ivy_mech", "docs/ivy_memory", "docs/ivy_models", "docs/ivy_robot", "docs/ivy_vision", "extensions", "extensions/applied_libraries", "faq", "func_wrapper", "func_wrapper/handle_nestable", "func_wrapper/handle_out_argument", "func_wrapper/infer_device", "func_wrapper/infer_dtype", "func_wrapper/inputs_to_ivy_arrays", "func_wrapper/inputs_to_native_arrays", "func_wrapper/outputs_to_ivy_arrays", "func_wrapper/to_native_arrays_and_back", "functional/ivy", "functional/ivy/activations", "functional/ivy/activations/gelu", "functional/ivy/activations/leaky_relu", "functional/ivy/activations/relu", "functional/ivy/activations/sigmoid", "functional/ivy/activations/softmax", "functional/ivy/activations/softplus", "functional/ivy/activations/softplus/softplus_array", "functional/ivy/activations/softplus/softplus_container", "functional/ivy/activations/softplus/softplus_functional", "functional/ivy/activations/softplus/static_softplus_container", "functional/ivy/activations/tanh", "functional/ivy/compilation", "functional/ivy/compilation/compile", "functional/ivy/constants", "functional/ivy/creation", "functional/ivy/creation/arange", "functional/ivy/creation/arange/arange_functional", "functional/ivy/creation/arange/static_arange_container", "functional/ivy/creation/asarray", "functional/ivy/creation/asarray/asarray_array", "functional/ivy/creation/asarray/asarray_container", "functional/ivy/creation/asarray/asarray_functional", "functional/ivy/creation/asarray/static_asarray_container", "functional/ivy/creation/empty", "functional/ivy/creation/empty_like", "functional/ivy/creation/empty_like/empty_like_array", "functional/ivy/creation/empty_like/empty_like_container", "functional/ivy/creation/empty_like/empty_like_functional", "functional/ivy/creation/empty_like/static_empty_like_container", "functional/ivy/creation/eye", "functional/ivy/creation/eye/eye_functional", "functional/ivy/creation/eye/static_eye_container", "functional/ivy/creation/from_dlpack", "functional/ivy/creation/from_dlpack/from_dlpack_array", "functional/ivy/creation/from_dlpack/from_dlpack_container", "functional/ivy/creation/from_dlpack/from_dlpack_functional", "functional/ivy/creation/from_dlpack/static_from_dlpack_container", "functional/ivy/creation/full", "functional/ivy/creation/full_like", "functional/ivy/creation/full_like/full_like_array", "functional/ivy/creation/full_like/full_like_container", "functional/ivy/creation/full_like/full_like_functional", "functional/ivy/creation/full_like/static_full_like_container", "functional/ivy/creation/linspace", "functional/ivy/creation/linspace/linspace_functional", "functional/ivy/creation/linspace/static_linspace_container", "functional/ivy/creation/logspace", "functional/ivy/creation/logspace/logspace_functional", "functional/ivy/creation/logspace/static_logspace_container", "functional/ivy/creation/meshgrid", "functional/ivy/creation/meshgrid/meshgrid_array", "functional/ivy/creation/meshgrid/meshgrid_container", "functional/ivy/creation/meshgrid/meshgrid_functional", "functional/ivy/creation/meshgrid/static_meshgrid_container", "functional/ivy/creation/native_array", "functional/ivy/creation/native_array/native_array_array", "functional/ivy/creation/native_array/native_array_container", "functional/ivy/creation/native_array/native_array_functional", "functional/ivy/creation/native_array/static_native_array_container", "functional/ivy/creation/ones", "functional/ivy/creation/ones/ones_functional", "functional/ivy/creation/ones/static_ones_container", "functional/ivy/creation/ones_like", "functional/ivy/creation/ones_like/ones_like_array", "functional/ivy/creation/ones_like/ones_like_container", "functional/ivy/creation/ones_like/ones_like_functional", "functional/ivy/creation/ones_like/static_ones_like_container", "functional/ivy/creation/tril", "functional/ivy/creation/tril/static_tril_container", "functional/ivy/creation/tril/tril_array", "functional/ivy/creation/tril/tril_container", "functional/ivy/creation/tril/tril_functional", "functional/ivy/creation/triu", "functional/ivy/creation/triu/static_triu_container", "functional/ivy/creation/triu/triu_array", "functional/ivy/creation/triu/triu_container", "functional/ivy/creation/triu/triu_functional", "functional/ivy/creation/zeros", "functional/ivy/creation/zeros/static_zeros_container", "functional/ivy/creation/zeros/zeros_functional", "functional/ivy/creation/zeros_like", "functional/ivy/creation/zeros_like/static_zeros_like_container", "functional/ivy/creation/zeros_like/zeros_like_array", "functional/ivy/creation/zeros_like/zeros_like_container", "functional/ivy/creation/zeros_like/zeros_like_functional", "functional/ivy/data_type", "functional/ivy/data_type/DefaultDtype:\n    \"\"\"\"\"\"\n\n    # noinspection PyShadowingNames\n    def __init__", "functional/ivy/data_type/DefaultFloatDtype:\n    \"\"\"\"\"\"\n\n    # noinspection PyShadowingNames\n    def __init__", "functional/ivy/data_type/DefaultIntDtype:\n    \"\"\"\"\"\"\n\n    # noinspection PyShadowingNames\n    def __init__", "functional/ivy/data_type/as_ivy_dtype", "functional/ivy/data_type/as_native_dtype", "functional/ivy/data_type/astype", "functional/ivy/data_type/astype/astype_array", "functional/ivy/data_type/astype/astype_container", "functional/ivy/data_type/astype/astype_functional", "functional/ivy/data_type/astype/static_astype_container", "functional/ivy/data_type/broadcast_arrays", "functional/ivy/data_type/broadcast_arrays/broadcast_arrays_array", "functional/ivy/data_type/broadcast_arrays/broadcast_arrays_container", "functional/ivy/data_type/broadcast_arrays/broadcast_arrays_functional", "functional/ivy/data_type/broadcast_arrays/static_broadcast_arrays_container", "functional/ivy/data_type/broadcast_to", "functional/ivy/data_type/broadcast_to/broadcast_to_array", "functional/ivy/data_type/broadcast_to/broadcast_to_container", "functional/ivy/data_type/broadcast_to/broadcast_to_functional", "functional/ivy/data_type/broadcast_to/static_broadcast_to_container", "functional/ivy/data_type/can_cast", "functional/ivy/data_type/can_cast/can_cast_array", "functional/ivy/data_type/can_cast/can_cast_container", "functional/ivy/data_type/can_cast/can_cast_functional", "functional/ivy/data_type/can_cast/static_can_cast_container", "functional/ivy/data_type/closest_valid_dtype", "functional/ivy/data_type/default_dtype", "functional/ivy/data_type/default_float_dtype", "functional/ivy/data_type/default_int_dtype", "functional/ivy/data_type/dtype", "functional/ivy/data_type/dtype/dtype_array", "functional/ivy/data_type/dtype/dtype_container", "functional/ivy/data_type/dtype/dtype_functional", "functional/ivy/data_type/dtype_bits", "functional/ivy/data_type/finfo", "functional/ivy/data_type/finfo/finfo_array", "functional/ivy/data_type/finfo/finfo_container", "functional/ivy/data_type/finfo/finfo_functional", "functional/ivy/data_type/finfo/static_finfo_container", "functional/ivy/data_type/function_supported_dtypes", "functional/ivy/data_type/function_unsupported_dtypes", "functional/ivy/data_type/iinfo", "functional/ivy/data_type/iinfo/iinfo_array", "functional/ivy/data_type/iinfo/iinfo_container", "functional/ivy/data_type/iinfo/iinfo_functional", "functional/ivy/data_type/iinfo/static_iinfo_container", "functional/ivy/data_type/invalid_dtype", "functional/ivy/data_type/is_float_dtype", "functional/ivy/data_type/is_float_dtype/is_float_dtype_array", "functional/ivy/data_type/is_float_dtype/is_float_dtype_container", "functional/ivy/data_type/is_float_dtype/is_float_dtype_functional", "functional/ivy/data_type/is_float_dtype/static_is_float_dtype_container", "functional/ivy/data_type/is_int_dtype", "functional/ivy/data_type/is_int_dtype/is_int_dtype_array", "functional/ivy/data_type/is_int_dtype/is_int_dtype_container", "functional/ivy/data_type/is_int_dtype/is_int_dtype_functional", "functional/ivy/data_type/is_int_dtype/static_is_int_dtype_container", "functional/ivy/data_type/promote_types", "functional/ivy/data_type/result_type", "functional/ivy/data_type/result_type/result_type_array", "functional/ivy/data_type/result_type/result_type_container", "functional/ivy/data_type/result_type/result_type_functional", "functional/ivy/data_type/result_type/static_result_type_container", "functional/ivy/data_type/set_default_dtype", "functional/ivy/data_type/set_default_float_dtype", "functional/ivy/data_type/set_default_int_dtype", "functional/ivy/data_type/type_promote_arrays", "functional/ivy/data_type/unset_default_dtype", "functional/ivy/data_type/unset_default_float_dtype", "functional/ivy/data_type/unset_default_int_dtype", "functional/ivy/data_type/valid_dtype", "functional/ivy/device", "functional/ivy/device/DefaultDevice:\n    \"\"\"\"\"\"\n\n    # noinspection PyShadowingNames\n    def __init__", "functional/ivy/device/DevClonedItem", "functional/ivy/device/DevClonedIter", "functional/ivy/device/DevClonedNest", "functional/ivy/device/DevDistItem", "functional/ivy/device/DevDistIter", "functional/ivy/device/DevDistNest", "functional/ivy/device/DevManager:\n    \"\"\"\"\"\"\n\n    def __init__", "functional/ivy/device/DevMapper", "functional/ivy/device/DevMapperMultiProc", "functional/ivy/device/MultiDev:\n    def __init__", "functional/ivy/device/MultiDevItem", "functional/ivy/device/MultiDevIter", "functional/ivy/device/MultiDevNest", "functional/ivy/device/Profiler", "functional/ivy/device/as_ivy_dev", "functional/ivy/device/as_native_dev", "functional/ivy/device/clear_mem_on_dev", "functional/ivy/device/default_device", "functional/ivy/device/dev", "functional/ivy/device/dev_clone", "functional/ivy/device/dev_clone_array", "functional/ivy/device/dev_clone_iter", "functional/ivy/device/dev_clone_nest", "functional/ivy/device/dev_dist", "functional/ivy/device/dev_dist_array", "functional/ivy/device/dev_dist_iter", "functional/ivy/device/dev_dist_nest", "functional/ivy/device/dev_unify", "functional/ivy/device/dev_unify_array", "functional/ivy/device/dev_unify_iter", "functional/ivy/device/dev_unify_nest", "functional/ivy/device/dev_util", "functional/ivy/device/get_all_ivy_arrays_on_dev", "functional/ivy/device/gpu_is_available", "functional/ivy/device/num_cpu_cores", "functional/ivy/device/num_gpus", "functional/ivy/device/num_ivy_arrays_on_dev", "functional/ivy/device/percent_used_mem_on_dev", "functional/ivy/device/print_all_ivy_arrays_on_dev", "functional/ivy/device/set_default_device", "functional/ivy/device/set_split_factor", "functional/ivy/device/split_factor", "functional/ivy/device/split_func_call", "functional/ivy/device/to_device", "functional/ivy/device/total_mem_on_dev", "functional/ivy/device/tpu_is_available", "functional/ivy/device/unset_default_device", "functional/ivy/device/used_mem_on_dev", "functional/ivy/elementwise", "functional/ivy/elementwise/abs", "functional/ivy/elementwise/abs/abs_array", "functional/ivy/elementwise/abs/abs_container", "functional/ivy/elementwise/abs/abs_functional", "functional/ivy/elementwise/abs/static_abs_container", "functional/ivy/elementwise/acos", "functional/ivy/elementwise/acos/acos_array", "functional/ivy/elementwise/acos/acos_container", "functional/ivy/elementwise/acos/acos_functional", "functional/ivy/elementwise/acosh", "functional/ivy/elementwise/acosh/acosh_array", "functional/ivy/elementwise/acosh/acosh_container", "functional/ivy/elementwise/acosh/acosh_functional", "functional/ivy/elementwise/add", "functional/ivy/elementwise/add/add_array", "functional/ivy/elementwise/add/add_container", "functional/ivy/elementwise/add/add_functional", "functional/ivy/elementwise/add/static_add_container", "functional/ivy/elementwise/asin", "functional/ivy/elementwise/asin/asin_array", "functional/ivy/elementwise/asin/asin_container", "functional/ivy/elementwise/asin/asin_functional", "functional/ivy/elementwise/asinh", "functional/ivy/elementwise/asinh/asinh_array", "functional/ivy/elementwise/asinh/asinh_container", "functional/ivy/elementwise/asinh/asinh_functional", "functional/ivy/elementwise/asinh/static_asinh_container", "functional/ivy/elementwise/atan", "functional/ivy/elementwise/atan/atan_array", "functional/ivy/elementwise/atan/atan_container", "functional/ivy/elementwise/atan/atan_functional", "functional/ivy/elementwise/atan2", "functional/ivy/elementwise/atan2/atan2_array", "functional/ivy/elementwise/atan2/atan2_container", "functional/ivy/elementwise/atan2/atan2_functional", "functional/ivy/elementwise/atanh", "functional/ivy/elementwise/atanh/atanh_array", "functional/ivy/elementwise/atanh/atanh_container", "functional/ivy/elementwise/atanh/atanh_functional", "functional/ivy/elementwise/bitwise_and", "functional/ivy/elementwise/bitwise_and/bitwise_and_array", "functional/ivy/elementwise/bitwise_and/bitwise_and_container", "functional/ivy/elementwise/bitwise_and/bitwise_and_functional", "functional/ivy/elementwise/bitwise_invert", "functional/ivy/elementwise/bitwise_invert/bitwise_invert_array", "functional/ivy/elementwise/bitwise_invert/bitwise_invert_container", "functional/ivy/elementwise/bitwise_invert/bitwise_invert_functional", "functional/ivy/elementwise/bitwise_left_shift", "functional/ivy/elementwise/bitwise_left_shift/bitwise_left_shift_array", "functional/ivy/elementwise/bitwise_left_shift/bitwise_left_shift_container", "functional/ivy/elementwise/bitwise_left_shift/bitwise_left_shift_functional", "functional/ivy/elementwise/bitwise_or", "functional/ivy/elementwise/bitwise_or/bitwise_or_array", "functional/ivy/elementwise/bitwise_or/bitwise_or_container", "functional/ivy/elementwise/bitwise_or/bitwise_or_functional", "functional/ivy/elementwise/bitwise_right_shift", "functional/ivy/elementwise/bitwise_right_shift/bitwise_right_shift_array", "functional/ivy/elementwise/bitwise_right_shift/bitwise_right_shift_container", "functional/ivy/elementwise/bitwise_right_shift/bitwise_right_shift_functional", "functional/ivy/elementwise/bitwise_xor", "functional/ivy/elementwise/bitwise_xor/bitwise_xor_array", "functional/ivy/elementwise/bitwise_xor/bitwise_xor_container", "functional/ivy/elementwise/bitwise_xor/bitwise_xor_functional", "functional/ivy/elementwise/ceil", "functional/ivy/elementwise/ceil/ceil_array", "functional/ivy/elementwise/ceil/ceil_container", "functional/ivy/elementwise/ceil/ceil_functional", "functional/ivy/elementwise/cos", "functional/ivy/elementwise/cos/cos_array", "functional/ivy/elementwise/cos/cos_container", "functional/ivy/elementwise/cos/cos_functional", "functional/ivy/elementwise/cosh", "functional/ivy/elementwise/cosh/cosh_array", "functional/ivy/elementwise/cosh/cosh_container", "functional/ivy/elementwise/cosh/cosh_functional", "functional/ivy/elementwise/divide", "functional/ivy/elementwise/divide/divide_array", "functional/ivy/elementwise/divide/divide_container", "functional/ivy/elementwise/divide/divide_functional", "functional/ivy/elementwise/divide/static_divide_container", "functional/ivy/elementwise/equal", "functional/ivy/elementwise/equal/equal_array", "functional/ivy/elementwise/equal/equal_container", "functional/ivy/elementwise/equal/equal_functional", "functional/ivy/elementwise/erf", "functional/ivy/elementwise/erf/erf_array", "functional/ivy/elementwise/erf/erf_container", "functional/ivy/elementwise/erf/erf_functional", "functional/ivy/elementwise/exp", "functional/ivy/elementwise/exp/exp_array", "functional/ivy/elementwise/exp/exp_container", "functional/ivy/elementwise/exp/exp_functional", "functional/ivy/elementwise/expm1", "functional/ivy/elementwise/expm1/expm1_array", "functional/ivy/elementwise/expm1/expm1_container", "functional/ivy/elementwise/expm1/expm1_functional", "functional/ivy/elementwise/floor", "functional/ivy/elementwise/floor/floor_array", "functional/ivy/elementwise/floor/floor_container", "functional/ivy/elementwise/floor/floor_functional", "functional/ivy/elementwise/floor_divide", "functional/ivy/elementwise/floor_divide/floor_divide_array", "functional/ivy/elementwise/floor_divide/floor_divide_container", "functional/ivy/elementwise/floor_divide/floor_divide_functional", "functional/ivy/elementwise/greater", "functional/ivy/elementwise/greater/greater_array", "functional/ivy/elementwise/greater/greater_container", "functional/ivy/elementwise/greater/greater_functional", "functional/ivy/elementwise/greater_equal", "functional/ivy/elementwise/greater_equal/greater_equal_array", "functional/ivy/elementwise/greater_equal/greater_equal_container", "functional/ivy/elementwise/greater_equal/greater_equal_functional", "functional/ivy/elementwise/isfinite", "functional/ivy/elementwise/isfinite/isfinite_array", "functional/ivy/elementwise/isfinite/isfinite_container", "functional/ivy/elementwise/isfinite/isfinite_functional", "functional/ivy/elementwise/isinf", "functional/ivy/elementwise/isinf/isinf_array", "functional/ivy/elementwise/isinf/isinf_container", "functional/ivy/elementwise/isinf/isinf_functional", "functional/ivy/elementwise/isnan", "functional/ivy/elementwise/isnan/isnan_array", "functional/ivy/elementwise/isnan/isnan_container", "functional/ivy/elementwise/isnan/isnan_functional", "functional/ivy/elementwise/less", "functional/ivy/elementwise/less/less_array", "functional/ivy/elementwise/less/less_container", "functional/ivy/elementwise/less/less_functional", "functional/ivy/elementwise/less_equal", "functional/ivy/elementwise/less_equal/less_equal_array", "functional/ivy/elementwise/less_equal/less_equal_container", "functional/ivy/elementwise/less_equal/less_equal_functional", "functional/ivy/elementwise/log", "functional/ivy/elementwise/log/log_array", "functional/ivy/elementwise/log/log_container", "functional/ivy/elementwise/log/log_functional", "functional/ivy/elementwise/log10", "functional/ivy/elementwise/log10/log10_array", "functional/ivy/elementwise/log10/log10_container", "functional/ivy/elementwise/log10/log10_functional", "functional/ivy/elementwise/log1p", "functional/ivy/elementwise/log1p/log1p_array", "functional/ivy/elementwise/log1p/log1p_container", "functional/ivy/elementwise/log1p/log1p_functional", "functional/ivy/elementwise/log2", "functional/ivy/elementwise/log2/log2_array", "functional/ivy/elementwise/log2/log2_container", "functional/ivy/elementwise/log2/log2_functional", "functional/ivy/elementwise/logaddexp", "functional/ivy/elementwise/logaddexp/logaddexp_array", "functional/ivy/elementwise/logaddexp/logaddexp_container", "functional/ivy/elementwise/logaddexp/logaddexp_functional", "functional/ivy/elementwise/logical_and", "functional/ivy/elementwise/logical_and/logical_and_array", "functional/ivy/elementwise/logical_and/logical_and_container", "functional/ivy/elementwise/logical_and/logical_and_functional", "functional/ivy/elementwise/logical_not", "functional/ivy/elementwise/logical_not/logical_not_array", "functional/ivy/elementwise/logical_not/logical_not_container", "functional/ivy/elementwise/logical_not/logical_not_functional", "functional/ivy/elementwise/logical_or", "functional/ivy/elementwise/logical_or/logical_or_array", "functional/ivy/elementwise/logical_or/logical_or_container", "functional/ivy/elementwise/logical_or/logical_or_functional", "functional/ivy/elementwise/logical_xor", "functional/ivy/elementwise/logical_xor/logical_xor_array", "functional/ivy/elementwise/logical_xor/logical_xor_container", "functional/ivy/elementwise/logical_xor/logical_xor_functional", "functional/ivy/elementwise/maximum", "functional/ivy/elementwise/minimum", "functional/ivy/elementwise/multiply", "functional/ivy/elementwise/multiply/multiply_array", "functional/ivy/elementwise/multiply/multiply_container", "functional/ivy/elementwise/multiply/multiply_functional", "functional/ivy/elementwise/multiply/static_multiply_container", "functional/ivy/elementwise/negative", "functional/ivy/elementwise/negative/negative_array", "functional/ivy/elementwise/negative/negative_container", "functional/ivy/elementwise/negative/negative_functional", "functional/ivy/elementwise/not_equal", "functional/ivy/elementwise/not_equal/not_equal_array", "functional/ivy/elementwise/not_equal/not_equal_container", "functional/ivy/elementwise/not_equal/not_equal_functional", "functional/ivy/elementwise/positive", "functional/ivy/elementwise/positive/positive_array", "functional/ivy/elementwise/positive/positive_container", "functional/ivy/elementwise/positive/positive_functional", "functional/ivy/elementwise/pow", "functional/ivy/elementwise/pow/pow_array", "functional/ivy/elementwise/pow/pow_container", "functional/ivy/elementwise/pow/pow_functional", "functional/ivy/elementwise/remainder", "functional/ivy/elementwise/remainder/remainder_array", "functional/ivy/elementwise/remainder/remainder_container", "functional/ivy/elementwise/remainder/remainder_functional", "functional/ivy/elementwise/round", "functional/ivy/elementwise/round/round_array", "functional/ivy/elementwise/round/round_container", "functional/ivy/elementwise/round/round_functional", "functional/ivy/elementwise/sign", "functional/ivy/elementwise/sign/sign_array", "functional/ivy/elementwise/sign/sign_container", "functional/ivy/elementwise/sign/sign_functional", "functional/ivy/elementwise/sign/static_sign_container", "functional/ivy/elementwise/sin", "functional/ivy/elementwise/sin/sin_array", "functional/ivy/elementwise/sin/sin_container", "functional/ivy/elementwise/sin/sin_functional", "functional/ivy/elementwise/sin/static_sin_container", "functional/ivy/elementwise/sinh", "functional/ivy/elementwise/sinh/sinh_array", "functional/ivy/elementwise/sinh/sinh_container", "functional/ivy/elementwise/sinh/sinh_functional", "functional/ivy/elementwise/sqrt", "functional/ivy/elementwise/sqrt/sqrt_array", "functional/ivy/elementwise/sqrt/sqrt_container", "functional/ivy/elementwise/sqrt/sqrt_functional", "functional/ivy/elementwise/square", "functional/ivy/elementwise/square/square_array", "functional/ivy/elementwise/square/square_container", "functional/ivy/elementwise/square/square_functional", "functional/ivy/elementwise/subtract", "functional/ivy/elementwise/subtract/static_subtract_container", "functional/ivy/elementwise/subtract/subtract_array", "functional/ivy/elementwise/subtract/subtract_container", "functional/ivy/elementwise/subtract/subtract_functional", "functional/ivy/elementwise/tan", "functional/ivy/elementwise/tan/static_tan_container", "functional/ivy/elementwise/tan/tan_array", "functional/ivy/elementwise/tan/tan_container", "functional/ivy/elementwise/tan/tan_functional", "functional/ivy/elementwise/tanh", "functional/ivy/elementwise/tanh/static_tanh_container", "functional/ivy/elementwise/tanh/tanh_array", "functional/ivy/elementwise/tanh/tanh_container", "functional/ivy/elementwise/tanh/tanh_functional", "functional/ivy/elementwise/trunc", "functional/ivy/elementwise/trunc/trunc_array", "functional/ivy/elementwise/trunc/trunc_container", "functional/ivy/elementwise/trunc/trunc_functional", "functional/ivy/general", "functional/ivy/general/all_equal", "functional/ivy/general/all_equal/all_equal_array", "functional/ivy/general/all_equal/all_equal_container", "functional/ivy/general/all_equal/all_equal_functional", "functional/ivy/general/all_equal/static_all_equal_container", "functional/ivy/general/arg_info", "functional/ivy/general/arg_names", "functional/ivy/general/array_equal", "functional/ivy/general/arrays_equal", "functional/ivy/general/assert_supports_inplace", "functional/ivy/general/cache_fn", "functional/ivy/general/clip_matrix_norm", "functional/ivy/general/clip_vector_norm", "functional/ivy/general/clip_vector_norm/clip_vector_norm_container", "functional/ivy/general/clip_vector_norm/clip_vector_norm_functional", "functional/ivy/general/container_types", "functional/ivy/general/copy_array", "functional/ivy/general/cumprod", "functional/ivy/general/cumsum", "functional/ivy/general/current_backend_str", "functional/ivy/general/default", "functional/ivy/general/einops_rearrange", "functional/ivy/general/einops_reduce", "functional/ivy/general/einops_repeat", "functional/ivy/general/exists", "functional/ivy/general/floormod", "functional/ivy/general/fourier_encode", "functional/ivy/general/gather", "functional/ivy/general/gather_nd", "functional/ivy/general/gather_nd/gather_nd_array", "functional/ivy/general/gather_nd/gather_nd_container", "functional/ivy/general/gather_nd/gather_nd_functional", "functional/ivy/general/gather_nd/static_gather_nd_container", "functional/ivy/general/get_all_arrays_in_memory", "functional/ivy/general/get_min_base", "functional/ivy/general/get_min_denominator", "functional/ivy/general/get_num_dims", "functional/ivy/general/get_referrers_recursive", "functional/ivy/general/has_nans", "functional/ivy/general/indices_where", "functional/ivy/general/inplace_arrays_supported", "functional/ivy/general/inplace_decrement", "functional/ivy/general/inplace_increment", "functional/ivy/general/inplace_update", "functional/ivy/general/inplace_variables_supported", "functional/ivy/general/is_array", "functional/ivy/general/is_ivy_array", "functional/ivy/general/is_ivy_container", "functional/ivy/general/is_native_array", "functional/ivy/general/match_kwargs", "functional/ivy/general/multiprocessing", "functional/ivy/general/num_arrays_in_memory", "functional/ivy/general/one_hot", "functional/ivy/general/print_all_arrays_in_memory", "functional/ivy/general/queue_timeout", "functional/ivy/general/scatter_flat", "functional/ivy/general/scatter_nd", "functional/ivy/general/set_min_base", "functional/ivy/general/set_min_denominator", "functional/ivy/general/set_queue_timeout", "functional/ivy/general/set_shape_array_mode", "functional/ivy/general/set_tmp_dir", "functional/ivy/general/shape", "functional/ivy/general/shape_array_mode", "functional/ivy/general/shape_to_tuple", "functional/ivy/general/stable_divide", "functional/ivy/general/stable_pow", "functional/ivy/general/supports_inplace", "functional/ivy/general/tmp_dir", "functional/ivy/general/to_list", "functional/ivy/general/to_numpy", "functional/ivy/general/to_numpy/static_to_numpy_container", "functional/ivy/general/to_numpy/to_numpy_array", "functional/ivy/general/to_numpy/to_numpy_container", "functional/ivy/general/to_numpy/to_numpy_functional", "functional/ivy/general/to_scalar", "functional/ivy/general/try_else_none", "functional/ivy/general/unset_shape_array_mode", "functional/ivy/general/unstack", "functional/ivy/general/value_is_nan", "functional/ivy/gradients", "functional/ivy/gradients/GradientTracking:\n    \"\"\"\"\"\"\n\n    # noinspection PyShadowingNames\n    def __init__", "functional/ivy/gradients/adam_step", "functional/ivy/gradients/adam_step/adam_step_array", "functional/ivy/gradients/adam_step/adam_step_container", "functional/ivy/gradients/adam_step/adam_step_functional", "functional/ivy/gradients/adam_step/static_adam_step_container", "functional/ivy/gradients/adam_update", "functional/ivy/gradients/adam_update/adam_update_container", "functional/ivy/gradients/adam_update/adam_update_functional", "functional/ivy/gradients/adam_update/static_adam_update_container", "functional/ivy/gradients/execute_with_gradients", "functional/ivy/gradients/gradient_descent_update", "functional/ivy/gradients/gradient_descent_update/gradient_descent_update_container", "functional/ivy/gradients/gradient_descent_update/gradient_descent_update_functional", "functional/ivy/gradients/gradient_descent_update/static_gradient_descent_update_container", "functional/ivy/gradients/is_variable", "functional/ivy/gradients/is_variable/is_variable_container", "functional/ivy/gradients/is_variable/is_variable_functional", "functional/ivy/gradients/is_variable/static_is_variable_container", "functional/ivy/gradients/lamb_update", "functional/ivy/gradients/lamb_update/lamb_update_container", "functional/ivy/gradients/lamb_update/lamb_update_functional", "functional/ivy/gradients/lamb_update/static_lamb_update_container", "functional/ivy/gradients/lars_update", "functional/ivy/gradients/lars_update/lars_update_container", "functional/ivy/gradients/lars_update/lars_update_functional", "functional/ivy/gradients/lars_update/static_lars_update_container", "functional/ivy/gradients/optimizer_update", "functional/ivy/gradients/optimizer_update/optimizer_update_container", "functional/ivy/gradients/optimizer_update/optimizer_update_functional", "functional/ivy/gradients/optimizer_update/static_optimizer_update_container", "functional/ivy/gradients/set_with_grads", "functional/ivy/gradients/stop_gradient", "functional/ivy/gradients/unset_with_grads", "functional/ivy/gradients/variable", "functional/ivy/gradients/variable_data", "functional/ivy/gradients/with_grads", "functional/ivy/layers", "functional/ivy/layers/conv1d", "functional/ivy/layers/conv1d_transpose", "functional/ivy/layers/conv2d", "functional/ivy/layers/conv2d_transpose", "functional/ivy/layers/conv3d", "functional/ivy/layers/conv3d_transpose", "functional/ivy/layers/depthwise_conv2d", "functional/ivy/layers/dropout", "functional/ivy/layers/linear", "functional/ivy/layers/lstm_update", "functional/ivy/layers/multi_head_attention", "functional/ivy/layers/scaled_dot_product_attention", "functional/ivy/linear_algebra", "functional/ivy/linear_algebra/cholesky", "functional/ivy/linear_algebra/cholesky/cholesky_array", "functional/ivy/linear_algebra/cholesky/cholesky_container", "functional/ivy/linear_algebra/cholesky/cholesky_functional", "functional/ivy/linear_algebra/cholesky/static_cholesky_container", "functional/ivy/linear_algebra/cross", "functional/ivy/linear_algebra/cross/cross_array", "functional/ivy/linear_algebra/cross/cross_functional", "functional/ivy/linear_algebra/det", "functional/ivy/linear_algebra/det/det_array", "functional/ivy/linear_algebra/det/det_functional", "functional/ivy/linear_algebra/diagonal", "functional/ivy/linear_algebra/diagonal/diagonal_array", "functional/ivy/linear_algebra/diagonal/diagonal_functional", "functional/ivy/linear_algebra/eigh", "functional/ivy/linear_algebra/eigh/eigh_array", "functional/ivy/linear_algebra/eigh/eigh_functional", "functional/ivy/linear_algebra/eigvalsh", "functional/ivy/linear_algebra/eigvalsh/eigvalsh_array", "functional/ivy/linear_algebra/eigvalsh/eigvalsh_functional", "functional/ivy/linear_algebra/inv", "functional/ivy/linear_algebra/inv/inv_array", "functional/ivy/linear_algebra/inv/inv_functional", "functional/ivy/linear_algebra/matmul", "functional/ivy/linear_algebra/matmul/matmul_array", "functional/ivy/linear_algebra/matmul/matmul_container", "functional/ivy/linear_algebra/matmul/matmul_functional", "functional/ivy/linear_algebra/matrix_norm", "functional/ivy/linear_algebra/matrix_norm/matrix_norm_array", "functional/ivy/linear_algebra/matrix_norm/matrix_norm_functional", "functional/ivy/linear_algebra/matrix_power", "functional/ivy/linear_algebra/matrix_rank", "functional/ivy/linear_algebra/matrix_rank/matrix_rank_array", "functional/ivy/linear_algebra/matrix_rank/matrix_rank_functional", "functional/ivy/linear_algebra/matrix_transpose", "functional/ivy/linear_algebra/matrix_transpose/matrix_transpose_array", "functional/ivy/linear_algebra/matrix_transpose/matrix_transpose_functional", "functional/ivy/linear_algebra/outer", "functional/ivy/linear_algebra/outer/outer_array", "functional/ivy/linear_algebra/outer/outer_functional", "functional/ivy/linear_algebra/pinv", "functional/ivy/linear_algebra/pinv/pinv_array", "functional/ivy/linear_algebra/pinv/pinv_functional", "functional/ivy/linear_algebra/qr", "functional/ivy/linear_algebra/qr/qr_array", "functional/ivy/linear_algebra/qr/qr_functional", "functional/ivy/linear_algebra/slogdet", "functional/ivy/linear_algebra/solve", "functional/ivy/linear_algebra/solve/solve_array", "functional/ivy/linear_algebra/solve/solve_functional", "functional/ivy/linear_algebra/svd", "functional/ivy/linear_algebra/svd/svd_array", "functional/ivy/linear_algebra/svd/svd_functional", "functional/ivy/linear_algebra/svdvals", "functional/ivy/linear_algebra/svdvals/svdvals_array", "functional/ivy/linear_algebra/svdvals/svdvals_functional", "functional/ivy/linear_algebra/tensordot", "functional/ivy/linear_algebra/tensordot/tensordot_array", "functional/ivy/linear_algebra/tensordot/tensordot_functional", "functional/ivy/linear_algebra/trace", "functional/ivy/linear_algebra/trace/trace_array", "functional/ivy/linear_algebra/trace/trace_functional", "functional/ivy/linear_algebra/vecdot", "functional/ivy/linear_algebra/vecdot/vecdot_array", "functional/ivy/linear_algebra/vecdot/vecdot_functional", "functional/ivy/linear_algebra/vector_norm", "functional/ivy/linear_algebra/vector_norm/vector_norm_array", "functional/ivy/linear_algebra/vector_norm/vector_norm_functional", "functional/ivy/linear_algebra/vector_to_skew_symmetric_matrix", "functional/ivy/linear_algebra/vector_to_skew_symmetric_matrix/vector_to_skew_symmetric_matrix_array", "functional/ivy/linear_algebra/vector_to_skew_symmetric_matrix/vector_to_skew_symmetric_matrix_functional", "functional/ivy/losses", "functional/ivy/losses/binary_cross_entropy", "functional/ivy/losses/binary_cross_entropy/binary_cross_entropy_array", "functional/ivy/losses/binary_cross_entropy/binary_cross_entropy_container", "functional/ivy/losses/binary_cross_entropy/binary_cross_entropy_functional", "functional/ivy/losses/binary_cross_entropy/static_binary_cross_entropy_container", "functional/ivy/losses/cross_entropy", "functional/ivy/losses/cross_entropy/cross_entropy_array", "functional/ivy/losses/cross_entropy/cross_entropy_container", "functional/ivy/losses/cross_entropy/cross_entropy_functional", "functional/ivy/losses/cross_entropy/static_cross_entropy_container", "functional/ivy/losses/sparse_cross_entropy", "functional/ivy/losses/sparse_cross_entropy/sparse_cross_entropy_array", "functional/ivy/losses/sparse_cross_entropy/sparse_cross_entropy_container", "functional/ivy/losses/sparse_cross_entropy/sparse_cross_entropy_functional", "functional/ivy/losses/sparse_cross_entropy/static_sparse_cross_entropy_container", "functional/ivy/manipulation", "functional/ivy/manipulation/clip", "functional/ivy/manipulation/clip/clip_array", "functional/ivy/manipulation/clip/clip_container", "functional/ivy/manipulation/clip/clip_functional", "functional/ivy/manipulation/clip/static_clip_container", "functional/ivy/manipulation/concat", "functional/ivy/manipulation/concat/concat_array", "functional/ivy/manipulation/concat/concat_container", "functional/ivy/manipulation/concat/concat_functional", "functional/ivy/manipulation/constant_pad", "functional/ivy/manipulation/constant_pad/constant_pad_array", "functional/ivy/manipulation/constant_pad/constant_pad_container", "functional/ivy/manipulation/constant_pad/constant_pad_functional", "functional/ivy/manipulation/expand_dims", "functional/ivy/manipulation/expand_dims/expand_dims_array", "functional/ivy/manipulation/expand_dims/expand_dims_container", "functional/ivy/manipulation/expand_dims/expand_dims_functional", "functional/ivy/manipulation/flip", "functional/ivy/manipulation/flip/flip_array", "functional/ivy/manipulation/flip/flip_container", "functional/ivy/manipulation/flip/flip_functional", "functional/ivy/manipulation/permute_dims", "functional/ivy/manipulation/permute_dims/permute_dims_array", "functional/ivy/manipulation/permute_dims/permute_dims_container", "functional/ivy/manipulation/permute_dims/permute_dims_functional", "functional/ivy/manipulation/repeat", "functional/ivy/manipulation/repeat/repeat_array", "functional/ivy/manipulation/repeat/repeat_container", "functional/ivy/manipulation/repeat/repeat_functional", "functional/ivy/manipulation/reshape", "functional/ivy/manipulation/reshape/reshape_array", "functional/ivy/manipulation/reshape/reshape_container", "functional/ivy/manipulation/reshape/reshape_functional", "functional/ivy/manipulation/roll", "functional/ivy/manipulation/roll/roll_array", "functional/ivy/manipulation/roll/roll_container", "functional/ivy/manipulation/roll/roll_functional", "functional/ivy/manipulation/roll/static_roll_container", "functional/ivy/manipulation/split", "functional/ivy/manipulation/squeeze", "functional/ivy/manipulation/squeeze/squeeze_array", "functional/ivy/manipulation/squeeze/squeeze_container", "functional/ivy/manipulation/squeeze/squeeze_functional", "functional/ivy/manipulation/stack", "functional/ivy/manipulation/stack/stack_array", "functional/ivy/manipulation/stack/stack_container", "functional/ivy/manipulation/stack/stack_functional", "functional/ivy/manipulation/swapaxes", "functional/ivy/manipulation/swapaxes/swapaxes_array", "functional/ivy/manipulation/swapaxes/swapaxes_container", "functional/ivy/manipulation/swapaxes/swapaxes_functional", "functional/ivy/manipulation/tile", "functional/ivy/manipulation/tile/tile_array", "functional/ivy/manipulation/tile/tile_container", "functional/ivy/manipulation/tile/tile_functional", "functional/ivy/manipulation/zero_pad", "functional/ivy/manipulation/zero_pad/zero_pad_array", "functional/ivy/manipulation/zero_pad/zero_pad_container", "functional/ivy/manipulation/zero_pad/zero_pad_functional", "functional/ivy/meta", "functional/ivy/meta/fomaml_step", "functional/ivy/meta/maml_step", "functional/ivy/meta/reptile_step", "functional/ivy/nest", "functional/ivy/nest/all_nested_indices", "functional/ivy/nest/copy_nest", "functional/ivy/nest/index_nest", "functional/ivy/nest/insert_into_nest_at_index", "functional/ivy/nest/insert_into_nest_at_indices", "functional/ivy/nest/map", "functional/ivy/nest/map_nest_at_index", "functional/ivy/nest/map_nest_at_indices", "functional/ivy/nest/multi_index_nest", "functional/ivy/nest/nested_any", "functional/ivy/nest/nested_indices_where", "functional/ivy/nest/nested_map", "functional/ivy/nest/nested_multi_map", "functional/ivy/nest/prune_nest_at_index", "functional/ivy/nest/prune_nest_at_indices", "functional/ivy/nest/set_nest_at_index", "functional/ivy/nest/set_nest_at_indices", "functional/ivy/norms", "functional/ivy/norms/layer_norm", "functional/ivy/norms/layer_norm/layer_norm_array", "functional/ivy/norms/layer_norm/layer_norm_container", "functional/ivy/norms/layer_norm/layer_norm_functional", "functional/ivy/norms/layer_norm/static_layer_norm_container", "functional/ivy/random", "functional/ivy/random/multinomial", "functional/ivy/random/randint", "functional/ivy/random/randint/randint_functional", "functional/ivy/random/randint/static_randint_container", "functional/ivy/random/random_normal", "functional/ivy/random/random_uniform", "functional/ivy/random/random_uniform/random_uniform_container", "functional/ivy/random/random_uniform/random_uniform_functional", "functional/ivy/random/random_uniform/static_random_uniform_container", "functional/ivy/random/seed", "functional/ivy/random/shuffle", "functional/ivy/searching", "functional/ivy/searching/argmax", "functional/ivy/searching/argmin", "functional/ivy/searching/nonzero", "functional/ivy/searching/where", "functional/ivy/set", "functional/ivy/set/unique_all", "functional/ivy/set/unique_counts", "functional/ivy/set/unique_counts/static_unique_counts_container", "functional/ivy/set/unique_counts/unique_counts_array", "functional/ivy/set/unique_counts/unique_counts_container", "functional/ivy/set/unique_counts/unique_counts_functional", "functional/ivy/set/unique_inverse", "functional/ivy/set/unique_values", "functional/ivy/sorting", "functional/ivy/sorting/argsort", "functional/ivy/sorting/argsort/argsort_array", "functional/ivy/sorting/argsort/argsort_container", "functional/ivy/sorting/argsort/argsort_functional", "functional/ivy/sorting/argsort/static_argsort_container", "functional/ivy/sorting/sort", "functional/ivy/sorting/sort/sort_array", "functional/ivy/sorting/sort/sort_container", "functional/ivy/sorting/sort/sort_functional", "functional/ivy/sorting/sort/static_sort_container", "functional/ivy/statistical", "functional/ivy/statistical/einsum", "functional/ivy/statistical/einsum/einsum_array", "functional/ivy/statistical/einsum/einsum_container", "functional/ivy/statistical/einsum/einsum_functional", "functional/ivy/statistical/max", "functional/ivy/statistical/max/max_array", "functional/ivy/statistical/max/max_container", "functional/ivy/statistical/max/max_functional", "functional/ivy/statistical/mean", "functional/ivy/statistical/mean/mean_array", "functional/ivy/statistical/mean/mean_container", "functional/ivy/statistical/mean/mean_functional", "functional/ivy/statistical/min", "functional/ivy/statistical/min/min_array", "functional/ivy/statistical/min/min_container", "functional/ivy/statistical/min/min_functional", "functional/ivy/statistical/prod", "functional/ivy/statistical/prod/prod_array", "functional/ivy/statistical/prod/prod_container", "functional/ivy/statistical/prod/prod_functional", "functional/ivy/statistical/std", "functional/ivy/statistical/std/std_array", "functional/ivy/statistical/std/std_container", "functional/ivy/statistical/std/std_functional", "functional/ivy/statistical/sum", "functional/ivy/statistical/sum/sum_array", "functional/ivy/statistical/sum/sum_container", "functional/ivy/statistical/sum/sum_functional", "functional/ivy/statistical/var", "functional/ivy/statistical/var/var_array", "functional/ivy/statistical/var/var_container", "functional/ivy/statistical/var/var_functional", "functional/ivy/utility", "functional/ivy/utility/all", "functional/ivy/utility/all/all_array", "functional/ivy/utility/all/all_container", "functional/ivy/utility/all/all_functional", "functional/ivy/utility/all/static_all_container", "functional/ivy/utility/any", "functional/ivy/utility/any/any_array", "functional/ivy/utility/any/any_container", "functional/ivy/utility/any/any_functional", "functional/ivy/utility/any/static_any_container", "index", "index_append", "index_prepend", "inspection", "inspection/add_array_specs", "inspection/fn_array_spec", "roadmap", "stateful/activations", "stateful/activations/GEGLU", "stateful/activations/GELU", "stateful/converters", "stateful/converters/to_ivy_module", "stateful/initializers", "stateful/initializers/Constant:\n    def __init__", "stateful/initializers/FirstLayerSiren", "stateful/initializers/GlorotUniform", "stateful/initializers/KaimingNormal:\n    def __init__", "stateful/initializers/Ones", "stateful/initializers/Siren", "stateful/initializers/Uniform:\n    def __init__", "stateful/initializers/Zeros", "stateful/layers", "stateful/layers/Conv1D", "stateful/layers/Conv1DTranspose", "stateful/layers/Conv2D", "stateful/layers/Conv2DTranspose", "stateful/layers/Conv3D", "stateful/layers/Conv3DTranspose", "stateful/layers/DepthwiseConv2D", "stateful/layers/Dropout", "stateful/layers/LSTM", "stateful/layers/Linear", "stateful/layers/MultiHeadAttention", "stateful/module", "stateful/module/Module", "stateful/norms", "stateful/norms/LayerNorm", "stateful/optimizers", "stateful/optimizers/Adam", "stateful/optimizers/LAMB", "stateful/optimizers/LARS", "stateful/optimizers/Optimizer", "stateful/optimizers/SGD", "stateful/sequential", "stateful/sequential/Sequential", "supported_frameworks", "verbosity", "verbosity/cprint"], "filenames": ["backend_handler.rst", "backend_handler/ContextManager:\n    def __init__.rst", "backend_handler/choose_random_backend.rst", "backend_handler/clear_backend_stack.rst", "backend_handler/current_backend.rst", "backend_handler/get_backend.rst", "backend_handler/set_backend.rst", "backend_handler/try_import_ivy_jax.rst", "backend_handler/try_import_ivy_mxnet.rst", "backend_handler/try_import_ivy_numpy.rst", "backend_handler/try_import_ivy_tf.rst", "backend_handler/try_import_ivy_torch.rst", "backend_handler/unset_backend.rst", "background.rst", "background/ml_explosion.rst", "background/standardization.rst", "background/why_unify.rst", "contributing.rst", "contributing/0_setting_up.rst", "contributing/1_the_basics.rst", "contributing/4_open_tasks.rst", "contributing/building_the_docs.rst", "data_classes/array/activations.rst", "data_classes/array/activations/ArrayWithActivations.rst", "data_classes/array/array.rst", "data_classes/array/array/Array.rst", "data_classes/array/array/Variable.rst", "data_classes/array/conversions.rst", "data_classes/array/conversions/args_to_ivy.rst", "data_classes/array/conversions/args_to_native.rst", "data_classes/array/conversions/to_ivy.rst", "data_classes/array/conversions/to_native.rst", "data_classes/array/creation.rst", "data_classes/array/creation/ArrayWithCreation.rst", "data_classes/array/data_type.rst", "data_classes/array/data_type/ArrayWithDataTypes.rst", "data_classes/array/device.rst", "data_classes/array/device/ArrayWithDevice.rst", "data_classes/array/elementwise.rst", "data_classes/array/elementwise/ArrayWithElementwise.rst", "data_classes/array/general.rst", "data_classes/array/general/ArrayWithGeneral.rst", "data_classes/array/gradients.rst", "data_classes/array/gradients/ArrayWithGradients.rst", "data_classes/array/image.rst", "data_classes/array/image/ArrayWithImage.rst", "data_classes/array/layers.rst", "data_classes/array/layers/ArrayWithLayers.rst", "data_classes/array/linear_algebra.rst", "data_classes/array/linear_algebra/ArrayWithLinearAlgebra.rst", "data_classes/array/losses.rst", "data_classes/array/losses/ArrayWithLosses.rst", "data_classes/array/manipulation.rst", "data_classes/array/manipulation/ArrayWithManipulation.rst", "data_classes/array/norms.rst", "data_classes/array/norms/ArrayWithNorms.rst", "data_classes/array/random.rst", "data_classes/array/random/ArrayWithRandom.rst", "data_classes/array/searching.rst", "data_classes/array/searching/ArrayWithSearching.rst", "data_classes/array/set.rst", "data_classes/array/set/ArrayWithSet.rst", "data_classes/array/sorting.rst", "data_classes/array/sorting/ArrayWithSorting.rst", "data_classes/array/statistical.rst", "data_classes/array/statistical/ArrayWithStatistical.rst", "data_classes/array/utility.rst", "data_classes/array/utility/ArrayWithUtility.rst", "data_classes/array/wrapping.rst", "data_classes/array/wrapping/add_ivy_array_instance_methods.rst", "data_classes/container/activations.rst", "data_classes/container/activations/ContainerWithActivations.rst", "data_classes/container/base.rst", "data_classes/container/base/ContainerBase.rst", "data_classes/container/container.rst", "data_classes/container/container/Container.rst", "data_classes/container/container/MultiDevContainer.rst", "data_classes/container/creation.rst", "data_classes/container/creation/ContainerWithCreation.rst", "data_classes/container/data_type.rst", "data_classes/container/data_type/ContainerWithDataTypes.rst", "data_classes/container/device.rst", "data_classes/container/device/ContainerWithDevice.rst", "data_classes/container/elementwise.rst", "data_classes/container/elementwise/ContainerWithElementwise.rst", "data_classes/container/general.rst", "data_classes/container/general/ContainerWithGeneral.rst", "data_classes/container/gradients.rst", "data_classes/container/gradients/ContainerWithGradients.rst", "data_classes/container/image.rst", "data_classes/container/image/ContainerWithImage.rst", "data_classes/container/layers.rst", "data_classes/container/layers/ContainerWithLayers.rst", "data_classes/container/linear_algebra.rst", "data_classes/container/linear_algebra/ContainerWithLinearAlgebra.rst", "data_classes/container/losses.rst", "data_classes/container/losses/ContainerWithLosses.rst", "data_classes/container/manipulation.rst", "data_classes/container/manipulation/ContainerWithManipulation.rst", "data_classes/container/norms.rst", "data_classes/container/norms/ContainerWithNorms.rst", "data_classes/container/random.rst", "data_classes/container/random/ContainerWithRandom.rst", "data_classes/container/searching.rst", "data_classes/container/searching/ContainerWithSearching.rst", "data_classes/container/set.rst", "data_classes/container/set/ContainerWithSet.rst", "data_classes/container/sorting.rst", "data_classes/container/sorting/ContainerWithSorting.rst", "data_classes/container/statistical.rst", "data_classes/container/statistical/ContainerWithStatistical.rst", "data_classes/container/utility.rst", "data_classes/container/utility/ContainerWithUtility.rst", "data_classes/container/wrapping.rst", "data_classes/container/wrapping/add_ivy_container_instance_methods.rst", "deep_dive.rst", "deep_dive/0_navigating_the_code.rst", "deep_dive/10_function_arguments.rst", "deep_dive/11_docstrings.rst", "deep_dive/12_docstring_examples.rst", "deep_dive/13_array_api_tests.rst", "deep_dive/14_ivy_tests.rst", "deep_dive/1_function_types.rst", "deep_dive/2_backend_setting.rst", "deep_dive/3_function_wrapping.rst", "deep_dive/4_arrays.rst", "deep_dive/5_containers.rst", "deep_dive/6_data_types.rst", "deep_dive/7_devices.rst", "deep_dive/8_inplace_updates.rst", "deep_dive/9_formatting.rst", "design.rst", "design/building_blocks.rst", "design/ivy_as_a_framework.rst", "design/ivy_as_a_framework/ivy_array.rst", "design/ivy_as_a_framework/ivy_container.rst", "design/ivy_as_a_framework/ivy_stateful_api.rst", "design/ivy_as_a_transpiler.rst", "docs/ivy.rst", "docs/ivy_builder.rst", "docs/ivy_ecosystem.rst", "docs/ivy_gym.rst", "docs/ivy_mech.rst", "docs/ivy_memory.rst", "docs/ivy_models.rst", "docs/ivy_robot.rst", "docs/ivy_vision.rst", "extensions.rst", "extensions/applied_libraries.rst", "faq.rst", "func_wrapper.rst", "func_wrapper/handle_nestable.rst", "func_wrapper/handle_out_argument.rst", "func_wrapper/infer_device.rst", "func_wrapper/infer_dtype.rst", "func_wrapper/inputs_to_ivy_arrays.rst", "func_wrapper/inputs_to_native_arrays.rst", "func_wrapper/outputs_to_ivy_arrays.rst", "func_wrapper/to_native_arrays_and_back.rst", "functional/ivy.rst", "functional/ivy/activations.rst", "functional/ivy/activations/gelu.rst", "functional/ivy/activations/leaky_relu.rst", "functional/ivy/activations/relu.rst", "functional/ivy/activations/sigmoid.rst", "functional/ivy/activations/softmax.rst", "functional/ivy/activations/softplus.rst", "functional/ivy/activations/softplus/softplus_array.rst", "functional/ivy/activations/softplus/softplus_container.rst", "functional/ivy/activations/softplus/softplus_functional.rst", "functional/ivy/activations/softplus/static_softplus_container.rst", "functional/ivy/activations/tanh.rst", "functional/ivy/compilation.rst", "functional/ivy/compilation/compile.rst", "functional/ivy/constants.rst", "functional/ivy/creation.rst", "functional/ivy/creation/arange.rst", "functional/ivy/creation/arange/arange_functional.rst", "functional/ivy/creation/arange/static_arange_container.rst", "functional/ivy/creation/asarray.rst", "functional/ivy/creation/asarray/asarray_array.rst", "functional/ivy/creation/asarray/asarray_container.rst", "functional/ivy/creation/asarray/asarray_functional.rst", "functional/ivy/creation/asarray/static_asarray_container.rst", "functional/ivy/creation/empty.rst", "functional/ivy/creation/empty_like.rst", "functional/ivy/creation/empty_like/empty_like_array.rst", "functional/ivy/creation/empty_like/empty_like_container.rst", "functional/ivy/creation/empty_like/empty_like_functional.rst", "functional/ivy/creation/empty_like/static_empty_like_container.rst", "functional/ivy/creation/eye.rst", "functional/ivy/creation/eye/eye_functional.rst", "functional/ivy/creation/eye/static_eye_container.rst", "functional/ivy/creation/from_dlpack.rst", "functional/ivy/creation/from_dlpack/from_dlpack_array.rst", "functional/ivy/creation/from_dlpack/from_dlpack_container.rst", "functional/ivy/creation/from_dlpack/from_dlpack_functional.rst", "functional/ivy/creation/from_dlpack/static_from_dlpack_container.rst", "functional/ivy/creation/full.rst", "functional/ivy/creation/full_like.rst", "functional/ivy/creation/full_like/full_like_array.rst", "functional/ivy/creation/full_like/full_like_container.rst", "functional/ivy/creation/full_like/full_like_functional.rst", "functional/ivy/creation/full_like/static_full_like_container.rst", "functional/ivy/creation/linspace.rst", "functional/ivy/creation/linspace/linspace_functional.rst", "functional/ivy/creation/linspace/static_linspace_container.rst", "functional/ivy/creation/logspace.rst", "functional/ivy/creation/logspace/logspace_functional.rst", "functional/ivy/creation/logspace/static_logspace_container.rst", "functional/ivy/creation/meshgrid.rst", "functional/ivy/creation/meshgrid/meshgrid_array.rst", "functional/ivy/creation/meshgrid/meshgrid_container.rst", "functional/ivy/creation/meshgrid/meshgrid_functional.rst", "functional/ivy/creation/meshgrid/static_meshgrid_container.rst", "functional/ivy/creation/native_array.rst", "functional/ivy/creation/native_array/native_array_array.rst", "functional/ivy/creation/native_array/native_array_container.rst", "functional/ivy/creation/native_array/native_array_functional.rst", "functional/ivy/creation/native_array/static_native_array_container.rst", "functional/ivy/creation/ones.rst", "functional/ivy/creation/ones/ones_functional.rst", "functional/ivy/creation/ones/static_ones_container.rst", "functional/ivy/creation/ones_like.rst", "functional/ivy/creation/ones_like/ones_like_array.rst", "functional/ivy/creation/ones_like/ones_like_container.rst", "functional/ivy/creation/ones_like/ones_like_functional.rst", "functional/ivy/creation/ones_like/static_ones_like_container.rst", "functional/ivy/creation/tril.rst", "functional/ivy/creation/tril/static_tril_container.rst", "functional/ivy/creation/tril/tril_array.rst", "functional/ivy/creation/tril/tril_container.rst", "functional/ivy/creation/tril/tril_functional.rst", "functional/ivy/creation/triu.rst", "functional/ivy/creation/triu/static_triu_container.rst", "functional/ivy/creation/triu/triu_array.rst", "functional/ivy/creation/triu/triu_container.rst", "functional/ivy/creation/triu/triu_functional.rst", "functional/ivy/creation/zeros.rst", "functional/ivy/creation/zeros/static_zeros_container.rst", "functional/ivy/creation/zeros/zeros_functional.rst", "functional/ivy/creation/zeros_like.rst", "functional/ivy/creation/zeros_like/static_zeros_like_container.rst", "functional/ivy/creation/zeros_like/zeros_like_array.rst", "functional/ivy/creation/zeros_like/zeros_like_container.rst", "functional/ivy/creation/zeros_like/zeros_like_functional.rst", "functional/ivy/data_type.rst", "functional/ivy/data_type/DefaultDtype:\n    \"\"\"\"\"\"\n\n    # noinspection PyShadowingNames\n    def __init__.rst", "functional/ivy/data_type/DefaultFloatDtype:\n    \"\"\"\"\"\"\n\n    # noinspection PyShadowingNames\n    def __init__.rst", "functional/ivy/data_type/DefaultIntDtype:\n    \"\"\"\"\"\"\n\n    # noinspection PyShadowingNames\n    def __init__.rst", "functional/ivy/data_type/as_ivy_dtype.rst", "functional/ivy/data_type/as_native_dtype.rst", "functional/ivy/data_type/astype.rst", "functional/ivy/data_type/astype/astype_array.rst", "functional/ivy/data_type/astype/astype_container.rst", "functional/ivy/data_type/astype/astype_functional.rst", "functional/ivy/data_type/astype/static_astype_container.rst", "functional/ivy/data_type/broadcast_arrays.rst", "functional/ivy/data_type/broadcast_arrays/broadcast_arrays_array.rst", "functional/ivy/data_type/broadcast_arrays/broadcast_arrays_container.rst", "functional/ivy/data_type/broadcast_arrays/broadcast_arrays_functional.rst", "functional/ivy/data_type/broadcast_arrays/static_broadcast_arrays_container.rst", "functional/ivy/data_type/broadcast_to.rst", "functional/ivy/data_type/broadcast_to/broadcast_to_array.rst", "functional/ivy/data_type/broadcast_to/broadcast_to_container.rst", "functional/ivy/data_type/broadcast_to/broadcast_to_functional.rst", "functional/ivy/data_type/broadcast_to/static_broadcast_to_container.rst", "functional/ivy/data_type/can_cast.rst", "functional/ivy/data_type/can_cast/can_cast_array.rst", "functional/ivy/data_type/can_cast/can_cast_container.rst", "functional/ivy/data_type/can_cast/can_cast_functional.rst", "functional/ivy/data_type/can_cast/static_can_cast_container.rst", "functional/ivy/data_type/closest_valid_dtype.rst", "functional/ivy/data_type/default_dtype.rst", "functional/ivy/data_type/default_float_dtype.rst", "functional/ivy/data_type/default_int_dtype.rst", "functional/ivy/data_type/dtype.rst", "functional/ivy/data_type/dtype/dtype_array.rst", "functional/ivy/data_type/dtype/dtype_container.rst", "functional/ivy/data_type/dtype/dtype_functional.rst", "functional/ivy/data_type/dtype_bits.rst", "functional/ivy/data_type/finfo.rst", "functional/ivy/data_type/finfo/finfo_array.rst", "functional/ivy/data_type/finfo/finfo_container.rst", "functional/ivy/data_type/finfo/finfo_functional.rst", "functional/ivy/data_type/finfo/static_finfo_container.rst", "functional/ivy/data_type/function_supported_dtypes.rst", "functional/ivy/data_type/function_unsupported_dtypes.rst", "functional/ivy/data_type/iinfo.rst", "functional/ivy/data_type/iinfo/iinfo_array.rst", "functional/ivy/data_type/iinfo/iinfo_container.rst", "functional/ivy/data_type/iinfo/iinfo_functional.rst", "functional/ivy/data_type/iinfo/static_iinfo_container.rst", "functional/ivy/data_type/invalid_dtype.rst", "functional/ivy/data_type/is_float_dtype.rst", "functional/ivy/data_type/is_float_dtype/is_float_dtype_array.rst", "functional/ivy/data_type/is_float_dtype/is_float_dtype_container.rst", "functional/ivy/data_type/is_float_dtype/is_float_dtype_functional.rst", "functional/ivy/data_type/is_float_dtype/static_is_float_dtype_container.rst", "functional/ivy/data_type/is_int_dtype.rst", "functional/ivy/data_type/is_int_dtype/is_int_dtype_array.rst", "functional/ivy/data_type/is_int_dtype/is_int_dtype_container.rst", "functional/ivy/data_type/is_int_dtype/is_int_dtype_functional.rst", "functional/ivy/data_type/is_int_dtype/static_is_int_dtype_container.rst", "functional/ivy/data_type/promote_types.rst", "functional/ivy/data_type/result_type.rst", "functional/ivy/data_type/result_type/result_type_array.rst", "functional/ivy/data_type/result_type/result_type_container.rst", "functional/ivy/data_type/result_type/result_type_functional.rst", "functional/ivy/data_type/result_type/static_result_type_container.rst", "functional/ivy/data_type/set_default_dtype.rst", "functional/ivy/data_type/set_default_float_dtype.rst", "functional/ivy/data_type/set_default_int_dtype.rst", "functional/ivy/data_type/type_promote_arrays.rst", "functional/ivy/data_type/unset_default_dtype.rst", "functional/ivy/data_type/unset_default_float_dtype.rst", "functional/ivy/data_type/unset_default_int_dtype.rst", "functional/ivy/data_type/valid_dtype.rst", "functional/ivy/device.rst", "functional/ivy/device/DefaultDevice:\n    \"\"\"\"\"\"\n\n    # noinspection PyShadowingNames\n    def __init__.rst", "functional/ivy/device/DevClonedItem.rst", "functional/ivy/device/DevClonedIter.rst", "functional/ivy/device/DevClonedNest.rst", "functional/ivy/device/DevDistItem.rst", "functional/ivy/device/DevDistIter.rst", "functional/ivy/device/DevDistNest.rst", "functional/ivy/device/DevManager:\n    \"\"\"\"\"\"\n\n    def __init__.rst", "functional/ivy/device/DevMapper.rst", "functional/ivy/device/DevMapperMultiProc.rst", "functional/ivy/device/MultiDev:\n    def __init__.rst", "functional/ivy/device/MultiDevItem.rst", "functional/ivy/device/MultiDevIter.rst", "functional/ivy/device/MultiDevNest.rst", "functional/ivy/device/Profiler.rst", "functional/ivy/device/as_ivy_dev.rst", "functional/ivy/device/as_native_dev.rst", "functional/ivy/device/clear_mem_on_dev.rst", "functional/ivy/device/default_device.rst", "functional/ivy/device/dev.rst", "functional/ivy/device/dev_clone.rst", "functional/ivy/device/dev_clone_array.rst", "functional/ivy/device/dev_clone_iter.rst", "functional/ivy/device/dev_clone_nest.rst", "functional/ivy/device/dev_dist.rst", "functional/ivy/device/dev_dist_array.rst", "functional/ivy/device/dev_dist_iter.rst", "functional/ivy/device/dev_dist_nest.rst", "functional/ivy/device/dev_unify.rst", "functional/ivy/device/dev_unify_array.rst", "functional/ivy/device/dev_unify_iter.rst", "functional/ivy/device/dev_unify_nest.rst", "functional/ivy/device/dev_util.rst", "functional/ivy/device/get_all_ivy_arrays_on_dev.rst", "functional/ivy/device/gpu_is_available.rst", "functional/ivy/device/num_cpu_cores.rst", "functional/ivy/device/num_gpus.rst", "functional/ivy/device/num_ivy_arrays_on_dev.rst", "functional/ivy/device/percent_used_mem_on_dev.rst", "functional/ivy/device/print_all_ivy_arrays_on_dev.rst", "functional/ivy/device/set_default_device.rst", "functional/ivy/device/set_split_factor.rst", "functional/ivy/device/split_factor.rst", "functional/ivy/device/split_func_call.rst", "functional/ivy/device/to_device.rst", "functional/ivy/device/total_mem_on_dev.rst", "functional/ivy/device/tpu_is_available.rst", "functional/ivy/device/unset_default_device.rst", "functional/ivy/device/used_mem_on_dev.rst", "functional/ivy/elementwise.rst", "functional/ivy/elementwise/abs.rst", "functional/ivy/elementwise/abs/abs_array.rst", "functional/ivy/elementwise/abs/abs_container.rst", "functional/ivy/elementwise/abs/abs_functional.rst", "functional/ivy/elementwise/abs/static_abs_container.rst", "functional/ivy/elementwise/acos.rst", "functional/ivy/elementwise/acos/acos_array.rst", "functional/ivy/elementwise/acos/acos_container.rst", "functional/ivy/elementwise/acos/acos_functional.rst", "functional/ivy/elementwise/acosh.rst", "functional/ivy/elementwise/acosh/acosh_array.rst", "functional/ivy/elementwise/acosh/acosh_container.rst", "functional/ivy/elementwise/acosh/acosh_functional.rst", "functional/ivy/elementwise/add.rst", "functional/ivy/elementwise/add/add_array.rst", "functional/ivy/elementwise/add/add_container.rst", "functional/ivy/elementwise/add/add_functional.rst", "functional/ivy/elementwise/add/static_add_container.rst", "functional/ivy/elementwise/asin.rst", "functional/ivy/elementwise/asin/asin_array.rst", "functional/ivy/elementwise/asin/asin_container.rst", "functional/ivy/elementwise/asin/asin_functional.rst", "functional/ivy/elementwise/asinh.rst", "functional/ivy/elementwise/asinh/asinh_array.rst", "functional/ivy/elementwise/asinh/asinh_container.rst", "functional/ivy/elementwise/asinh/asinh_functional.rst", "functional/ivy/elementwise/asinh/static_asinh_container.rst", "functional/ivy/elementwise/atan.rst", "functional/ivy/elementwise/atan/atan_array.rst", "functional/ivy/elementwise/atan/atan_container.rst", "functional/ivy/elementwise/atan/atan_functional.rst", "functional/ivy/elementwise/atan2.rst", "functional/ivy/elementwise/atan2/atan2_array.rst", "functional/ivy/elementwise/atan2/atan2_container.rst", "functional/ivy/elementwise/atan2/atan2_functional.rst", "functional/ivy/elementwise/atanh.rst", "functional/ivy/elementwise/atanh/atanh_array.rst", "functional/ivy/elementwise/atanh/atanh_container.rst", "functional/ivy/elementwise/atanh/atanh_functional.rst", "functional/ivy/elementwise/bitwise_and.rst", "functional/ivy/elementwise/bitwise_and/bitwise_and_array.rst", "functional/ivy/elementwise/bitwise_and/bitwise_and_container.rst", "functional/ivy/elementwise/bitwise_and/bitwise_and_functional.rst", "functional/ivy/elementwise/bitwise_invert.rst", "functional/ivy/elementwise/bitwise_invert/bitwise_invert_array.rst", "functional/ivy/elementwise/bitwise_invert/bitwise_invert_container.rst", "functional/ivy/elementwise/bitwise_invert/bitwise_invert_functional.rst", "functional/ivy/elementwise/bitwise_left_shift.rst", "functional/ivy/elementwise/bitwise_left_shift/bitwise_left_shift_array.rst", "functional/ivy/elementwise/bitwise_left_shift/bitwise_left_shift_container.rst", "functional/ivy/elementwise/bitwise_left_shift/bitwise_left_shift_functional.rst", "functional/ivy/elementwise/bitwise_or.rst", "functional/ivy/elementwise/bitwise_or/bitwise_or_array.rst", "functional/ivy/elementwise/bitwise_or/bitwise_or_container.rst", "functional/ivy/elementwise/bitwise_or/bitwise_or_functional.rst", "functional/ivy/elementwise/bitwise_right_shift.rst", "functional/ivy/elementwise/bitwise_right_shift/bitwise_right_shift_array.rst", "functional/ivy/elementwise/bitwise_right_shift/bitwise_right_shift_container.rst", "functional/ivy/elementwise/bitwise_right_shift/bitwise_right_shift_functional.rst", "functional/ivy/elementwise/bitwise_xor.rst", "functional/ivy/elementwise/bitwise_xor/bitwise_xor_array.rst", "functional/ivy/elementwise/bitwise_xor/bitwise_xor_container.rst", "functional/ivy/elementwise/bitwise_xor/bitwise_xor_functional.rst", "functional/ivy/elementwise/ceil.rst", "functional/ivy/elementwise/ceil/ceil_array.rst", "functional/ivy/elementwise/ceil/ceil_container.rst", "functional/ivy/elementwise/ceil/ceil_functional.rst", "functional/ivy/elementwise/cos.rst", "functional/ivy/elementwise/cos/cos_array.rst", "functional/ivy/elementwise/cos/cos_container.rst", "functional/ivy/elementwise/cos/cos_functional.rst", "functional/ivy/elementwise/cosh.rst", "functional/ivy/elementwise/cosh/cosh_array.rst", "functional/ivy/elementwise/cosh/cosh_container.rst", "functional/ivy/elementwise/cosh/cosh_functional.rst", "functional/ivy/elementwise/divide.rst", "functional/ivy/elementwise/divide/divide_array.rst", "functional/ivy/elementwise/divide/divide_container.rst", "functional/ivy/elementwise/divide/divide_functional.rst", "functional/ivy/elementwise/divide/static_divide_container.rst", "functional/ivy/elementwise/equal.rst", "functional/ivy/elementwise/equal/equal_array.rst", "functional/ivy/elementwise/equal/equal_container.rst", "functional/ivy/elementwise/equal/equal_functional.rst", "functional/ivy/elementwise/erf.rst", "functional/ivy/elementwise/erf/erf_array.rst", "functional/ivy/elementwise/erf/erf_container.rst", "functional/ivy/elementwise/erf/erf_functional.rst", "functional/ivy/elementwise/exp.rst", "functional/ivy/elementwise/exp/exp_array.rst", "functional/ivy/elementwise/exp/exp_container.rst", "functional/ivy/elementwise/exp/exp_functional.rst", "functional/ivy/elementwise/expm1.rst", "functional/ivy/elementwise/expm1/expm1_array.rst", "functional/ivy/elementwise/expm1/expm1_container.rst", "functional/ivy/elementwise/expm1/expm1_functional.rst", "functional/ivy/elementwise/floor.rst", "functional/ivy/elementwise/floor/floor_array.rst", "functional/ivy/elementwise/floor/floor_container.rst", "functional/ivy/elementwise/floor/floor_functional.rst", "functional/ivy/elementwise/floor_divide.rst", "functional/ivy/elementwise/floor_divide/floor_divide_array.rst", "functional/ivy/elementwise/floor_divide/floor_divide_container.rst", "functional/ivy/elementwise/floor_divide/floor_divide_functional.rst", "functional/ivy/elementwise/greater.rst", "functional/ivy/elementwise/greater/greater_array.rst", "functional/ivy/elementwise/greater/greater_container.rst", "functional/ivy/elementwise/greater/greater_functional.rst", "functional/ivy/elementwise/greater_equal.rst", "functional/ivy/elementwise/greater_equal/greater_equal_array.rst", "functional/ivy/elementwise/greater_equal/greater_equal_container.rst", "functional/ivy/elementwise/greater_equal/greater_equal_functional.rst", "functional/ivy/elementwise/isfinite.rst", "functional/ivy/elementwise/isfinite/isfinite_array.rst", "functional/ivy/elementwise/isfinite/isfinite_container.rst", "functional/ivy/elementwise/isfinite/isfinite_functional.rst", "functional/ivy/elementwise/isinf.rst", "functional/ivy/elementwise/isinf/isinf_array.rst", "functional/ivy/elementwise/isinf/isinf_container.rst", "functional/ivy/elementwise/isinf/isinf_functional.rst", "functional/ivy/elementwise/isnan.rst", "functional/ivy/elementwise/isnan/isnan_array.rst", "functional/ivy/elementwise/isnan/isnan_container.rst", "functional/ivy/elementwise/isnan/isnan_functional.rst", "functional/ivy/elementwise/less.rst", "functional/ivy/elementwise/less/less_array.rst", "functional/ivy/elementwise/less/less_container.rst", "functional/ivy/elementwise/less/less_functional.rst", "functional/ivy/elementwise/less_equal.rst", "functional/ivy/elementwise/less_equal/less_equal_array.rst", "functional/ivy/elementwise/less_equal/less_equal_container.rst", "functional/ivy/elementwise/less_equal/less_equal_functional.rst", "functional/ivy/elementwise/log.rst", "functional/ivy/elementwise/log/log_array.rst", "functional/ivy/elementwise/log/log_container.rst", "functional/ivy/elementwise/log/log_functional.rst", "functional/ivy/elementwise/log10.rst", "functional/ivy/elementwise/log10/log10_array.rst", "functional/ivy/elementwise/log10/log10_container.rst", "functional/ivy/elementwise/log10/log10_functional.rst", "functional/ivy/elementwise/log1p.rst", "functional/ivy/elementwise/log1p/log1p_array.rst", "functional/ivy/elementwise/log1p/log1p_container.rst", "functional/ivy/elementwise/log1p/log1p_functional.rst", "functional/ivy/elementwise/log2.rst", "functional/ivy/elementwise/log2/log2_array.rst", "functional/ivy/elementwise/log2/log2_container.rst", "functional/ivy/elementwise/log2/log2_functional.rst", "functional/ivy/elementwise/logaddexp.rst", "functional/ivy/elementwise/logaddexp/logaddexp_array.rst", "functional/ivy/elementwise/logaddexp/logaddexp_container.rst", "functional/ivy/elementwise/logaddexp/logaddexp_functional.rst", "functional/ivy/elementwise/logical_and.rst", "functional/ivy/elementwise/logical_and/logical_and_array.rst", "functional/ivy/elementwise/logical_and/logical_and_container.rst", "functional/ivy/elementwise/logical_and/logical_and_functional.rst", "functional/ivy/elementwise/logical_not.rst", "functional/ivy/elementwise/logical_not/logical_not_array.rst", "functional/ivy/elementwise/logical_not/logical_not_container.rst", "functional/ivy/elementwise/logical_not/logical_not_functional.rst", "functional/ivy/elementwise/logical_or.rst", "functional/ivy/elementwise/logical_or/logical_or_array.rst", "functional/ivy/elementwise/logical_or/logical_or_container.rst", "functional/ivy/elementwise/logical_or/logical_or_functional.rst", "functional/ivy/elementwise/logical_xor.rst", "functional/ivy/elementwise/logical_xor/logical_xor_array.rst", "functional/ivy/elementwise/logical_xor/logical_xor_container.rst", "functional/ivy/elementwise/logical_xor/logical_xor_functional.rst", "functional/ivy/elementwise/maximum.rst", "functional/ivy/elementwise/minimum.rst", "functional/ivy/elementwise/multiply.rst", "functional/ivy/elementwise/multiply/multiply_array.rst", "functional/ivy/elementwise/multiply/multiply_container.rst", "functional/ivy/elementwise/multiply/multiply_functional.rst", "functional/ivy/elementwise/multiply/static_multiply_container.rst", "functional/ivy/elementwise/negative.rst", "functional/ivy/elementwise/negative/negative_array.rst", "functional/ivy/elementwise/negative/negative_container.rst", "functional/ivy/elementwise/negative/negative_functional.rst", "functional/ivy/elementwise/not_equal.rst", "functional/ivy/elementwise/not_equal/not_equal_array.rst", "functional/ivy/elementwise/not_equal/not_equal_container.rst", "functional/ivy/elementwise/not_equal/not_equal_functional.rst", "functional/ivy/elementwise/positive.rst", "functional/ivy/elementwise/positive/positive_array.rst", "functional/ivy/elementwise/positive/positive_container.rst", "functional/ivy/elementwise/positive/positive_functional.rst", "functional/ivy/elementwise/pow.rst", "functional/ivy/elementwise/pow/pow_array.rst", "functional/ivy/elementwise/pow/pow_container.rst", "functional/ivy/elementwise/pow/pow_functional.rst", "functional/ivy/elementwise/remainder.rst", "functional/ivy/elementwise/remainder/remainder_array.rst", "functional/ivy/elementwise/remainder/remainder_container.rst", "functional/ivy/elementwise/remainder/remainder_functional.rst", "functional/ivy/elementwise/round.rst", "functional/ivy/elementwise/round/round_array.rst", "functional/ivy/elementwise/round/round_container.rst", "functional/ivy/elementwise/round/round_functional.rst", "functional/ivy/elementwise/sign.rst", "functional/ivy/elementwise/sign/sign_array.rst", "functional/ivy/elementwise/sign/sign_container.rst", "functional/ivy/elementwise/sign/sign_functional.rst", "functional/ivy/elementwise/sign/static_sign_container.rst", "functional/ivy/elementwise/sin.rst", "functional/ivy/elementwise/sin/sin_array.rst", "functional/ivy/elementwise/sin/sin_container.rst", "functional/ivy/elementwise/sin/sin_functional.rst", "functional/ivy/elementwise/sin/static_sin_container.rst", "functional/ivy/elementwise/sinh.rst", "functional/ivy/elementwise/sinh/sinh_array.rst", "functional/ivy/elementwise/sinh/sinh_container.rst", "functional/ivy/elementwise/sinh/sinh_functional.rst", "functional/ivy/elementwise/sqrt.rst", "functional/ivy/elementwise/sqrt/sqrt_array.rst", "functional/ivy/elementwise/sqrt/sqrt_container.rst", "functional/ivy/elementwise/sqrt/sqrt_functional.rst", "functional/ivy/elementwise/square.rst", "functional/ivy/elementwise/square/square_array.rst", "functional/ivy/elementwise/square/square_container.rst", "functional/ivy/elementwise/square/square_functional.rst", "functional/ivy/elementwise/subtract.rst", "functional/ivy/elementwise/subtract/static_subtract_container.rst", "functional/ivy/elementwise/subtract/subtract_array.rst", "functional/ivy/elementwise/subtract/subtract_container.rst", "functional/ivy/elementwise/subtract/subtract_functional.rst", "functional/ivy/elementwise/tan.rst", "functional/ivy/elementwise/tan/static_tan_container.rst", "functional/ivy/elementwise/tan/tan_array.rst", "functional/ivy/elementwise/tan/tan_container.rst", "functional/ivy/elementwise/tan/tan_functional.rst", "functional/ivy/elementwise/tanh.rst", "functional/ivy/elementwise/tanh/static_tanh_container.rst", "functional/ivy/elementwise/tanh/tanh_array.rst", "functional/ivy/elementwise/tanh/tanh_container.rst", "functional/ivy/elementwise/tanh/tanh_functional.rst", "functional/ivy/elementwise/trunc.rst", "functional/ivy/elementwise/trunc/trunc_array.rst", "functional/ivy/elementwise/trunc/trunc_container.rst", "functional/ivy/elementwise/trunc/trunc_functional.rst", "functional/ivy/general.rst", "functional/ivy/general/all_equal.rst", "functional/ivy/general/all_equal/all_equal_array.rst", "functional/ivy/general/all_equal/all_equal_container.rst", "functional/ivy/general/all_equal/all_equal_functional.rst", "functional/ivy/general/all_equal/static_all_equal_container.rst", "functional/ivy/general/arg_info.rst", "functional/ivy/general/arg_names.rst", "functional/ivy/general/array_equal.rst", "functional/ivy/general/arrays_equal.rst", "functional/ivy/general/assert_supports_inplace.rst", "functional/ivy/general/cache_fn.rst", "functional/ivy/general/clip_matrix_norm.rst", "functional/ivy/general/clip_vector_norm.rst", "functional/ivy/general/clip_vector_norm/clip_vector_norm_container.rst", "functional/ivy/general/clip_vector_norm/clip_vector_norm_functional.rst", "functional/ivy/general/container_types.rst", "functional/ivy/general/copy_array.rst", "functional/ivy/general/cumprod.rst", "functional/ivy/general/cumsum.rst", "functional/ivy/general/current_backend_str.rst", "functional/ivy/general/default.rst", "functional/ivy/general/einops_rearrange.rst", "functional/ivy/general/einops_reduce.rst", "functional/ivy/general/einops_repeat.rst", "functional/ivy/general/exists.rst", "functional/ivy/general/floormod.rst", "functional/ivy/general/fourier_encode.rst", "functional/ivy/general/gather.rst", "functional/ivy/general/gather_nd.rst", "functional/ivy/general/gather_nd/gather_nd_array.rst", "functional/ivy/general/gather_nd/gather_nd_container.rst", "functional/ivy/general/gather_nd/gather_nd_functional.rst", "functional/ivy/general/gather_nd/static_gather_nd_container.rst", "functional/ivy/general/get_all_arrays_in_memory.rst", "functional/ivy/general/get_min_base.rst", "functional/ivy/general/get_min_denominator.rst", "functional/ivy/general/get_num_dims.rst", "functional/ivy/general/get_referrers_recursive.rst", "functional/ivy/general/has_nans.rst", "functional/ivy/general/indices_where.rst", "functional/ivy/general/inplace_arrays_supported.rst", "functional/ivy/general/inplace_decrement.rst", "functional/ivy/general/inplace_increment.rst", "functional/ivy/general/inplace_update.rst", "functional/ivy/general/inplace_variables_supported.rst", "functional/ivy/general/is_array.rst", "functional/ivy/general/is_ivy_array.rst", "functional/ivy/general/is_ivy_container.rst", "functional/ivy/general/is_native_array.rst", "functional/ivy/general/match_kwargs.rst", "functional/ivy/general/multiprocessing.rst", "functional/ivy/general/num_arrays_in_memory.rst", "functional/ivy/general/one_hot.rst", "functional/ivy/general/print_all_arrays_in_memory.rst", "functional/ivy/general/queue_timeout.rst", "functional/ivy/general/scatter_flat.rst", "functional/ivy/general/scatter_nd.rst", "functional/ivy/general/set_min_base.rst", "functional/ivy/general/set_min_denominator.rst", "functional/ivy/general/set_queue_timeout.rst", "functional/ivy/general/set_shape_array_mode.rst", "functional/ivy/general/set_tmp_dir.rst", "functional/ivy/general/shape.rst", "functional/ivy/general/shape_array_mode.rst", "functional/ivy/general/shape_to_tuple.rst", "functional/ivy/general/stable_divide.rst", "functional/ivy/general/stable_pow.rst", "functional/ivy/general/supports_inplace.rst", "functional/ivy/general/tmp_dir.rst", "functional/ivy/general/to_list.rst", "functional/ivy/general/to_numpy.rst", "functional/ivy/general/to_numpy/static_to_numpy_container.rst", "functional/ivy/general/to_numpy/to_numpy_array.rst", "functional/ivy/general/to_numpy/to_numpy_container.rst", "functional/ivy/general/to_numpy/to_numpy_functional.rst", "functional/ivy/general/to_scalar.rst", "functional/ivy/general/try_else_none.rst", "functional/ivy/general/unset_shape_array_mode.rst", "functional/ivy/general/unstack.rst", "functional/ivy/general/value_is_nan.rst", "functional/ivy/gradients.rst", "functional/ivy/gradients/GradientTracking:\n    \"\"\"\"\"\"\n\n    # noinspection PyShadowingNames\n    def __init__.rst", "functional/ivy/gradients/adam_step.rst", "functional/ivy/gradients/adam_step/adam_step_array.rst", "functional/ivy/gradients/adam_step/adam_step_container.rst", "functional/ivy/gradients/adam_step/adam_step_functional.rst", "functional/ivy/gradients/adam_step/static_adam_step_container.rst", "functional/ivy/gradients/adam_update.rst", "functional/ivy/gradients/adam_update/adam_update_container.rst", "functional/ivy/gradients/adam_update/adam_update_functional.rst", "functional/ivy/gradients/adam_update/static_adam_update_container.rst", "functional/ivy/gradients/execute_with_gradients.rst", "functional/ivy/gradients/gradient_descent_update.rst", "functional/ivy/gradients/gradient_descent_update/gradient_descent_update_container.rst", "functional/ivy/gradients/gradient_descent_update/gradient_descent_update_functional.rst", "functional/ivy/gradients/gradient_descent_update/static_gradient_descent_update_container.rst", "functional/ivy/gradients/is_variable.rst", "functional/ivy/gradients/is_variable/is_variable_container.rst", "functional/ivy/gradients/is_variable/is_variable_functional.rst", "functional/ivy/gradients/is_variable/static_is_variable_container.rst", "functional/ivy/gradients/lamb_update.rst", "functional/ivy/gradients/lamb_update/lamb_update_container.rst", "functional/ivy/gradients/lamb_update/lamb_update_functional.rst", "functional/ivy/gradients/lamb_update/static_lamb_update_container.rst", "functional/ivy/gradients/lars_update.rst", "functional/ivy/gradients/lars_update/lars_update_container.rst", "functional/ivy/gradients/lars_update/lars_update_functional.rst", "functional/ivy/gradients/lars_update/static_lars_update_container.rst", "functional/ivy/gradients/optimizer_update.rst", "functional/ivy/gradients/optimizer_update/optimizer_update_container.rst", "functional/ivy/gradients/optimizer_update/optimizer_update_functional.rst", "functional/ivy/gradients/optimizer_update/static_optimizer_update_container.rst", "functional/ivy/gradients/set_with_grads.rst", "functional/ivy/gradients/stop_gradient.rst", "functional/ivy/gradients/unset_with_grads.rst", "functional/ivy/gradients/variable.rst", "functional/ivy/gradients/variable_data.rst", "functional/ivy/gradients/with_grads.rst", "functional/ivy/layers.rst", "functional/ivy/layers/conv1d.rst", "functional/ivy/layers/conv1d_transpose.rst", "functional/ivy/layers/conv2d.rst", "functional/ivy/layers/conv2d_transpose.rst", "functional/ivy/layers/conv3d.rst", "functional/ivy/layers/conv3d_transpose.rst", "functional/ivy/layers/depthwise_conv2d.rst", "functional/ivy/layers/dropout.rst", "functional/ivy/layers/linear.rst", "functional/ivy/layers/lstm_update.rst", "functional/ivy/layers/multi_head_attention.rst", "functional/ivy/layers/scaled_dot_product_attention.rst", "functional/ivy/linear_algebra.rst", "functional/ivy/linear_algebra/cholesky.rst", "functional/ivy/linear_algebra/cholesky/cholesky_array.rst", "functional/ivy/linear_algebra/cholesky/cholesky_container.rst", "functional/ivy/linear_algebra/cholesky/cholesky_functional.rst", "functional/ivy/linear_algebra/cholesky/static_cholesky_container.rst", "functional/ivy/linear_algebra/cross.rst", "functional/ivy/linear_algebra/cross/cross_array.rst", "functional/ivy/linear_algebra/cross/cross_functional.rst", "functional/ivy/linear_algebra/det.rst", "functional/ivy/linear_algebra/det/det_array.rst", "functional/ivy/linear_algebra/det/det_functional.rst", "functional/ivy/linear_algebra/diagonal.rst", "functional/ivy/linear_algebra/diagonal/diagonal_array.rst", "functional/ivy/linear_algebra/diagonal/diagonal_functional.rst", "functional/ivy/linear_algebra/eigh.rst", "functional/ivy/linear_algebra/eigh/eigh_array.rst", "functional/ivy/linear_algebra/eigh/eigh_functional.rst", "functional/ivy/linear_algebra/eigvalsh.rst", "functional/ivy/linear_algebra/eigvalsh/eigvalsh_array.rst", "functional/ivy/linear_algebra/eigvalsh/eigvalsh_functional.rst", "functional/ivy/linear_algebra/inv.rst", "functional/ivy/linear_algebra/inv/inv_array.rst", "functional/ivy/linear_algebra/inv/inv_functional.rst", "functional/ivy/linear_algebra/matmul.rst", "functional/ivy/linear_algebra/matmul/matmul_array.rst", "functional/ivy/linear_algebra/matmul/matmul_container.rst", "functional/ivy/linear_algebra/matmul/matmul_functional.rst", "functional/ivy/linear_algebra/matrix_norm.rst", "functional/ivy/linear_algebra/matrix_norm/matrix_norm_array.rst", "functional/ivy/linear_algebra/matrix_norm/matrix_norm_functional.rst", "functional/ivy/linear_algebra/matrix_power.rst", "functional/ivy/linear_algebra/matrix_rank.rst", "functional/ivy/linear_algebra/matrix_rank/matrix_rank_array.rst", "functional/ivy/linear_algebra/matrix_rank/matrix_rank_functional.rst", "functional/ivy/linear_algebra/matrix_transpose.rst", "functional/ivy/linear_algebra/matrix_transpose/matrix_transpose_array.rst", "functional/ivy/linear_algebra/matrix_transpose/matrix_transpose_functional.rst", "functional/ivy/linear_algebra/outer.rst", "functional/ivy/linear_algebra/outer/outer_array.rst", "functional/ivy/linear_algebra/outer/outer_functional.rst", "functional/ivy/linear_algebra/pinv.rst", "functional/ivy/linear_algebra/pinv/pinv_array.rst", "functional/ivy/linear_algebra/pinv/pinv_functional.rst", "functional/ivy/linear_algebra/qr.rst", "functional/ivy/linear_algebra/qr/qr_array.rst", "functional/ivy/linear_algebra/qr/qr_functional.rst", "functional/ivy/linear_algebra/slogdet.rst", "functional/ivy/linear_algebra/solve.rst", "functional/ivy/linear_algebra/solve/solve_array.rst", "functional/ivy/linear_algebra/solve/solve_functional.rst", "functional/ivy/linear_algebra/svd.rst", "functional/ivy/linear_algebra/svd/svd_array.rst", "functional/ivy/linear_algebra/svd/svd_functional.rst", "functional/ivy/linear_algebra/svdvals.rst", "functional/ivy/linear_algebra/svdvals/svdvals_array.rst", "functional/ivy/linear_algebra/svdvals/svdvals_functional.rst", "functional/ivy/linear_algebra/tensordot.rst", "functional/ivy/linear_algebra/tensordot/tensordot_array.rst", "functional/ivy/linear_algebra/tensordot/tensordot_functional.rst", "functional/ivy/linear_algebra/trace.rst", "functional/ivy/linear_algebra/trace/trace_array.rst", "functional/ivy/linear_algebra/trace/trace_functional.rst", "functional/ivy/linear_algebra/vecdot.rst", "functional/ivy/linear_algebra/vecdot/vecdot_array.rst", "functional/ivy/linear_algebra/vecdot/vecdot_functional.rst", "functional/ivy/linear_algebra/vector_norm.rst", "functional/ivy/linear_algebra/vector_norm/vector_norm_array.rst", "functional/ivy/linear_algebra/vector_norm/vector_norm_functional.rst", "functional/ivy/linear_algebra/vector_to_skew_symmetric_matrix.rst", "functional/ivy/linear_algebra/vector_to_skew_symmetric_matrix/vector_to_skew_symmetric_matrix_array.rst", "functional/ivy/linear_algebra/vector_to_skew_symmetric_matrix/vector_to_skew_symmetric_matrix_functional.rst", "functional/ivy/losses.rst", "functional/ivy/losses/binary_cross_entropy.rst", "functional/ivy/losses/binary_cross_entropy/binary_cross_entropy_array.rst", "functional/ivy/losses/binary_cross_entropy/binary_cross_entropy_container.rst", "functional/ivy/losses/binary_cross_entropy/binary_cross_entropy_functional.rst", "functional/ivy/losses/binary_cross_entropy/static_binary_cross_entropy_container.rst", "functional/ivy/losses/cross_entropy.rst", "functional/ivy/losses/cross_entropy/cross_entropy_array.rst", "functional/ivy/losses/cross_entropy/cross_entropy_container.rst", "functional/ivy/losses/cross_entropy/cross_entropy_functional.rst", "functional/ivy/losses/cross_entropy/static_cross_entropy_container.rst", "functional/ivy/losses/sparse_cross_entropy.rst", "functional/ivy/losses/sparse_cross_entropy/sparse_cross_entropy_array.rst", "functional/ivy/losses/sparse_cross_entropy/sparse_cross_entropy_container.rst", "functional/ivy/losses/sparse_cross_entropy/sparse_cross_entropy_functional.rst", "functional/ivy/losses/sparse_cross_entropy/static_sparse_cross_entropy_container.rst", "functional/ivy/manipulation.rst", "functional/ivy/manipulation/clip.rst", "functional/ivy/manipulation/clip/clip_array.rst", "functional/ivy/manipulation/clip/clip_container.rst", "functional/ivy/manipulation/clip/clip_functional.rst", "functional/ivy/manipulation/clip/static_clip_container.rst", "functional/ivy/manipulation/concat.rst", "functional/ivy/manipulation/concat/concat_array.rst", "functional/ivy/manipulation/concat/concat_container.rst", "functional/ivy/manipulation/concat/concat_functional.rst", "functional/ivy/manipulation/constant_pad.rst", "functional/ivy/manipulation/constant_pad/constant_pad_array.rst", "functional/ivy/manipulation/constant_pad/constant_pad_container.rst", "functional/ivy/manipulation/constant_pad/constant_pad_functional.rst", "functional/ivy/manipulation/expand_dims.rst", "functional/ivy/manipulation/expand_dims/expand_dims_array.rst", "functional/ivy/manipulation/expand_dims/expand_dims_container.rst", "functional/ivy/manipulation/expand_dims/expand_dims_functional.rst", "functional/ivy/manipulation/flip.rst", "functional/ivy/manipulation/flip/flip_array.rst", "functional/ivy/manipulation/flip/flip_container.rst", "functional/ivy/manipulation/flip/flip_functional.rst", "functional/ivy/manipulation/permute_dims.rst", "functional/ivy/manipulation/permute_dims/permute_dims_array.rst", "functional/ivy/manipulation/permute_dims/permute_dims_container.rst", "functional/ivy/manipulation/permute_dims/permute_dims_functional.rst", "functional/ivy/manipulation/repeat.rst", "functional/ivy/manipulation/repeat/repeat_array.rst", "functional/ivy/manipulation/repeat/repeat_container.rst", "functional/ivy/manipulation/repeat/repeat_functional.rst", "functional/ivy/manipulation/reshape.rst", "functional/ivy/manipulation/reshape/reshape_array.rst", "functional/ivy/manipulation/reshape/reshape_container.rst", "functional/ivy/manipulation/reshape/reshape_functional.rst", "functional/ivy/manipulation/roll.rst", "functional/ivy/manipulation/roll/roll_array.rst", "functional/ivy/manipulation/roll/roll_container.rst", "functional/ivy/manipulation/roll/roll_functional.rst", "functional/ivy/manipulation/roll/static_roll_container.rst", "functional/ivy/manipulation/split.rst", "functional/ivy/manipulation/squeeze.rst", "functional/ivy/manipulation/squeeze/squeeze_array.rst", "functional/ivy/manipulation/squeeze/squeeze_container.rst", "functional/ivy/manipulation/squeeze/squeeze_functional.rst", "functional/ivy/manipulation/stack.rst", "functional/ivy/manipulation/stack/stack_array.rst", "functional/ivy/manipulation/stack/stack_container.rst", "functional/ivy/manipulation/stack/stack_functional.rst", "functional/ivy/manipulation/swapaxes.rst", "functional/ivy/manipulation/swapaxes/swapaxes_array.rst", "functional/ivy/manipulation/swapaxes/swapaxes_container.rst", "functional/ivy/manipulation/swapaxes/swapaxes_functional.rst", "functional/ivy/manipulation/tile.rst", "functional/ivy/manipulation/tile/tile_array.rst", "functional/ivy/manipulation/tile/tile_container.rst", "functional/ivy/manipulation/tile/tile_functional.rst", "functional/ivy/manipulation/zero_pad.rst", "functional/ivy/manipulation/zero_pad/zero_pad_array.rst", "functional/ivy/manipulation/zero_pad/zero_pad_container.rst", "functional/ivy/manipulation/zero_pad/zero_pad_functional.rst", "functional/ivy/meta.rst", "functional/ivy/meta/fomaml_step.rst", "functional/ivy/meta/maml_step.rst", "functional/ivy/meta/reptile_step.rst", "functional/ivy/nest.rst", "functional/ivy/nest/all_nested_indices.rst", "functional/ivy/nest/copy_nest.rst", "functional/ivy/nest/index_nest.rst", "functional/ivy/nest/insert_into_nest_at_index.rst", "functional/ivy/nest/insert_into_nest_at_indices.rst", "functional/ivy/nest/map.rst", "functional/ivy/nest/map_nest_at_index.rst", "functional/ivy/nest/map_nest_at_indices.rst", "functional/ivy/nest/multi_index_nest.rst", "functional/ivy/nest/nested_any.rst", "functional/ivy/nest/nested_indices_where.rst", "functional/ivy/nest/nested_map.rst", "functional/ivy/nest/nested_multi_map.rst", "functional/ivy/nest/prune_nest_at_index.rst", "functional/ivy/nest/prune_nest_at_indices.rst", "functional/ivy/nest/set_nest_at_index.rst", "functional/ivy/nest/set_nest_at_indices.rst", "functional/ivy/norms.rst", "functional/ivy/norms/layer_norm.rst", "functional/ivy/norms/layer_norm/layer_norm_array.rst", "functional/ivy/norms/layer_norm/layer_norm_container.rst", "functional/ivy/norms/layer_norm/layer_norm_functional.rst", "functional/ivy/norms/layer_norm/static_layer_norm_container.rst", "functional/ivy/random.rst", "functional/ivy/random/multinomial.rst", "functional/ivy/random/randint.rst", "functional/ivy/random/randint/randint_functional.rst", "functional/ivy/random/randint/static_randint_container.rst", "functional/ivy/random/random_normal.rst", "functional/ivy/random/random_uniform.rst", "functional/ivy/random/random_uniform/random_uniform_container.rst", "functional/ivy/random/random_uniform/random_uniform_functional.rst", "functional/ivy/random/random_uniform/static_random_uniform_container.rst", "functional/ivy/random/seed.rst", "functional/ivy/random/shuffle.rst", "functional/ivy/searching.rst", "functional/ivy/searching/argmax.rst", "functional/ivy/searching/argmin.rst", "functional/ivy/searching/nonzero.rst", "functional/ivy/searching/where.rst", "functional/ivy/set.rst", "functional/ivy/set/unique_all.rst", "functional/ivy/set/unique_counts.rst", "functional/ivy/set/unique_counts/static_unique_counts_container.rst", "functional/ivy/set/unique_counts/unique_counts_array.rst", "functional/ivy/set/unique_counts/unique_counts_container.rst", "functional/ivy/set/unique_counts/unique_counts_functional.rst", "functional/ivy/set/unique_inverse.rst", "functional/ivy/set/unique_values.rst", "functional/ivy/sorting.rst", "functional/ivy/sorting/argsort.rst", "functional/ivy/sorting/argsort/argsort_array.rst", "functional/ivy/sorting/argsort/argsort_container.rst", "functional/ivy/sorting/argsort/argsort_functional.rst", "functional/ivy/sorting/argsort/static_argsort_container.rst", "functional/ivy/sorting/sort.rst", "functional/ivy/sorting/sort/sort_array.rst", "functional/ivy/sorting/sort/sort_container.rst", "functional/ivy/sorting/sort/sort_functional.rst", "functional/ivy/sorting/sort/static_sort_container.rst", "functional/ivy/statistical.rst", "functional/ivy/statistical/einsum.rst", "functional/ivy/statistical/einsum/einsum_array.rst", "functional/ivy/statistical/einsum/einsum_container.rst", "functional/ivy/statistical/einsum/einsum_functional.rst", "functional/ivy/statistical/max.rst", "functional/ivy/statistical/max/max_array.rst", "functional/ivy/statistical/max/max_container.rst", "functional/ivy/statistical/max/max_functional.rst", "functional/ivy/statistical/mean.rst", "functional/ivy/statistical/mean/mean_array.rst", "functional/ivy/statistical/mean/mean_container.rst", "functional/ivy/statistical/mean/mean_functional.rst", "functional/ivy/statistical/min.rst", "functional/ivy/statistical/min/min_array.rst", "functional/ivy/statistical/min/min_container.rst", "functional/ivy/statistical/min/min_functional.rst", "functional/ivy/statistical/prod.rst", "functional/ivy/statistical/prod/prod_array.rst", "functional/ivy/statistical/prod/prod_container.rst", "functional/ivy/statistical/prod/prod_functional.rst", "functional/ivy/statistical/std.rst", "functional/ivy/statistical/std/std_array.rst", "functional/ivy/statistical/std/std_container.rst", "functional/ivy/statistical/std/std_functional.rst", "functional/ivy/statistical/sum.rst", "functional/ivy/statistical/sum/sum_array.rst", "functional/ivy/statistical/sum/sum_container.rst", "functional/ivy/statistical/sum/sum_functional.rst", "functional/ivy/statistical/var.rst", "functional/ivy/statistical/var/var_array.rst", "functional/ivy/statistical/var/var_container.rst", "functional/ivy/statistical/var/var_functional.rst", "functional/ivy/utility.rst", "functional/ivy/utility/all.rst", "functional/ivy/utility/all/all_array.rst", "functional/ivy/utility/all/all_container.rst", "functional/ivy/utility/all/all_functional.rst", "functional/ivy/utility/all/static_all_container.rst", "functional/ivy/utility/any.rst", "functional/ivy/utility/any/any_array.rst", "functional/ivy/utility/any/any_container.rst", "functional/ivy/utility/any/any_functional.rst", "functional/ivy/utility/any/static_any_container.rst", "index.rst", "index_append.rst", "index_prepend.rst", "inspection.rst", "inspection/add_array_specs.rst", "inspection/fn_array_spec.rst", "roadmap.rst", "stateful/activations.rst", "stateful/activations/GEGLU.rst", "stateful/activations/GELU.rst", "stateful/converters.rst", "stateful/converters/to_ivy_module.rst", "stateful/initializers.rst", "stateful/initializers/Constant:\n    def __init__.rst", "stateful/initializers/FirstLayerSiren.rst", "stateful/initializers/GlorotUniform.rst", "stateful/initializers/KaimingNormal:\n    def __init__.rst", "stateful/initializers/Ones.rst", "stateful/initializers/Siren.rst", "stateful/initializers/Uniform:\n    def __init__.rst", "stateful/initializers/Zeros.rst", "stateful/layers.rst", "stateful/layers/Conv1D.rst", "stateful/layers/Conv1DTranspose.rst", "stateful/layers/Conv2D.rst", "stateful/layers/Conv2DTranspose.rst", "stateful/layers/Conv3D.rst", "stateful/layers/Conv3DTranspose.rst", "stateful/layers/DepthwiseConv2D.rst", "stateful/layers/Dropout.rst", "stateful/layers/LSTM.rst", "stateful/layers/Linear.rst", "stateful/layers/MultiHeadAttention.rst", "stateful/module.rst", "stateful/module/Module.rst", "stateful/norms.rst", "stateful/norms/LayerNorm.rst", "stateful/optimizers.rst", "stateful/optimizers/Adam.rst", "stateful/optimizers/LAMB.rst", "stateful/optimizers/LARS.rst", "stateful/optimizers/Optimizer.rst", "stateful/optimizers/SGD.rst", "stateful/sequential.rst", "stateful/sequential/Sequential.rst", "supported_frameworks.rst", "verbosity.rst", "verbosity/cprint.rst"], "titles": ["Backend handler", "&lt;no title&gt;", "choose_random_backend", "clear_backend_stack", "current_backend", "get_backend", "set_backend", "try_import_ivy_jax", "try_import_ivy_mxnet", "try_import_ivy_numpy", "try_import_ivy_tf", "try_import_ivy_torch", "unset_backend", "Background", "ML Explosion", "Standardization", "Why Unify?", "Contributing", "Setting Up", "The Basics", "Open Tasks", "Building the Docs", "Activations", "ArrayWithActivations", "Array", "Array", "Variable", "Conversions", "args_to_ivy", "args_to_native", "to_ivy", "to_native", "Creation", "ArrayWithCreation", "Data type", "ArrayWithDataTypes", "Device", "ArrayWithDevice", "Elementwise", "ArrayWithElementwise", "General", "ArrayWithGeneral", "Gradients", "ArrayWithGradients", "Image", "ArrayWithImage", "Layers", "ArrayWithLayers", "Linear algebra", "ArrayWithLinearAlgebra", "Losses", "ArrayWithLosses", "Manipulation", "ArrayWithManipulation", "Norms", "ArrayWithNorms", "Random", "ArrayWithRandom", "Searching", "ArrayWithSearching", "Set", "ArrayWithSet", "Sorting", "ArrayWithSorting", "Statistical", "ArrayWithStatistical", "Utility", "ArrayWithUtility", "Wrapping", "add_ivy_array_instance_methods", "Activations", "ContainerWithActivations", "Base", "ContainerBase", "Container", "Container", "MultiDevContainer", "Creation", "ContainerWithCreation", "Data type", "ContainerWithDataTypes", "Device", "ContainerWithDevice", "Elementwise", "ContainerWithElementwise", "General", "ContainerWithGeneral", "Gradients", "ContainerWithGradients", "Image", "ContainerWithImage", "Layers", "ContainerWithLayers", "Linear algebra", "ContainerWithLinearAlgebra", "Losses", "ContainerWithLosses", "Manipulation", "ContainerWithManipulation", "Norms", "ContainerWithNorms", "Random", "ContainerWithRandom", "Searching", "ContainerWithSearching", "Set", "ContainerWithSet", "Sorting", "ContainerWithSorting", "Statistical", "ContainerWithStatistical", "Utility", "ContainerWithUtility", "Wrapping", "add_ivy_container_instance_methods", "Deep Dive", "Navigating the Code", "Function Arguments", "Docstrings", "Docstring Examples", "Array API Tests", "Ivy Tests", "Function Types", "Backend Setting", "Function Wrapping", "Arrays", "Containers", "Data Types", "Devices", "Inplace Updates", "Formatting", "Design", "Building Blocks", "Ivy as a Framework", "Ivy Array", "Ivy Container", "Ivy Stateful API", "Ivy as a Transpiler", "Ivy", "Ivy builder", "Ivy ecosystem", "Ivy gym", "Ivy mech", "Ivy memory", "Ivy models", "Ivy robot", "Ivy vision", "Extensions", "Applied Libraries", "FAQ", "Func wrapper", "handle_nestable", "handle_out_argument", "infer_device", "infer_dtype", "inputs_to_ivy_arrays", "inputs_to_native_arrays", "outputs_to_ivy_arrays", "to_native_arrays_and_back", "&lt;no title&gt;", "Activations", "gelu", "leaky_relu", "relu", "sigmoid", "softmax", "softplus", "ivy.Array.softplus", "ivy.Container.softplus", "ivy.softplus", "ivy.Container.static_softplus", "tanh", "Compilation", "compile", "Constants", "Creation", "arange", "ivy.arange", "ivy.Container.static_arange", "asarray", "ivy.Array.asarray", "ivy.Container.asarray", "ivy.asarray", "ivy.Container.static_asarray", "empty", "empty_like", "ivy.Array.empty_like", "ivy.Container.empty_like", "ivy.empty_like", "ivy.Container.static_empty_like", "eye", "ivy.eye", "ivy.Container.static_eye", "from_dlpack", "ivy.Array.from_dlpack", "ivy.Container.from_dlpack", "ivy.from_dlpack", "ivy.Container.static_from_dlpack", "full", "full_like", "ivy.Array.full_like", "ivy.Container.full_like", "ivy.full_like", "ivy.Container.static_full_like", "linspace", "ivy.linspace", "ivy.Container.static_linspace", "logspace", "ivy.logspace", "ivy.Container.static_logspace", "meshgrid", "ivy.Array.meshgrid", "ivy.Container.meshgrid", "ivy.meshgrid", "ivy.Container.static_meshgrid", "native_array", "ivy.Array.native_array", "ivy.Container.native_array", "ivy.native_array", "ivy.Container.static_native_array", "ones", "ivy.ones", "ivy.Container.static_ones", "ones_like", "ivy.Array.ones_like", "ivy.Container.ones_like", "ivy.ones_like", "ivy.Container.static_ones_like", "tril", "ivy.Container.static_tril", "ivy.Array.tril", "ivy.Container.tril", "ivy.tril", "triu", "ivy.Container.static_triu", "ivy.Array.triu", "ivy.Container.triu", "ivy.triu", "zeros", "ivy.Container.static_zeros", "ivy.zeros", "zeros_like", "ivy.Container.static_zeros_like", "ivy.Array.zeros_like", "ivy.Container.zeros_like", "ivy.zeros_like", "Data type", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "as_ivy_dtype", "as_native_dtype", "astype", "ivy.Array.astype", "ivy.Container.astype", "ivy.astype", "ivy.Container.static_astype", "broadcast_arrays", "ivy.Array.broadcast_arrays", "ivy.Container.broadcast_arrays", "ivy.broadcast_arrays", "ivy.Container.static_broadcast_arrays", "broadcast_to", "ivy.Array.broadcast_to", "ivy.Container.broadcast_to", "ivy.broadcast_to", "ivy.Container.static_broadcast_to", "can_cast", "ivy.Array.can_cast", "ivy.Container.can_cast", "ivy.can_cast", "ivy.Container.static_can_cast", "closest_valid_dtype", "default_dtype", "default_float_dtype", "default_int_dtype", "dtype", "ivy.Array.dtype", "ivy.Container.dtype", "ivy.dtype", "dtype_bits", "finfo", "ivy.Array.finfo", "ivy.Container.finfo", "ivy.finfo", "ivy.Container.static_finfo", "function_supported_dtypes", "function_unsupported_dtypes", "iinfo", "ivy.Array.iinfo", "ivy.Container.iinfo", "ivy.iinfo", "ivy.Container.static_iinfo", "invalid_dtype", "is_float_dtype", "ivy.Array.is_float_dtype", "ivy.Container.is_float_dtype", "ivy.is_float_dtype", "ivy.Container.static_is_float_dtype", "is_int_dtype", "ivy.Array.is_int_dtype", "ivy.Container.is_int_dtype", "ivy.is_int_dtype", "ivy.Container.static_is_int_dtype", "promote_types", "result_type", "ivy.Array.result_type", "ivy.Container.result_type", "ivy.result_type", "ivy.Container.static_result_type", "set_default_dtype", "set_default_float_dtype", "set_default_int_dtype", "type_promote_arrays", "unset_default_dtype", "unset_default_float_dtype", "unset_default_int_dtype", "valid_dtype", "Device", "&lt;no title&gt;", "DevClonedItem", "DevClonedIter", "DevClonedNest", "DevDistItem", "DevDistIter", "DevDistNest", "&lt;no title&gt;", "DevMapper", "DevMapperMultiProc", "&lt;no title&gt;", "MultiDevItem", "MultiDevIter", "MultiDevNest", "Profiler", "as_ivy_dev", "as_native_dev", "clear_mem_on_dev", "default_device", "dev", "dev_clone", "dev_clone_array", "dev_clone_iter", "dev_clone_nest", "dev_dist", "dev_dist_array", "dev_dist_iter", "dev_dist_nest", "dev_unify", "dev_unify_array", "dev_unify_iter", "dev_unify_nest", "dev_util", "get_all_ivy_arrays_on_dev", "gpu_is_available", "num_cpu_cores", "num_gpus", "num_ivy_arrays_on_dev", "percent_used_mem_on_dev", "print_all_ivy_arrays_on_dev", "set_default_device", "set_split_factor", "split_factor", "split_func_call", "to_device", "total_mem_on_dev", "tpu_is_available", "unset_default_device", "used_mem_on_dev", "Elementwise", "abs", "ivy.Array.abs", "ivy.Container.abs", "ivy.abs", "ivy.Container.static_abs", "acos", "ivy.Array.acos", "ivy.Container.acos", "ivy.acos", "acosh", "ivy.Array.acosh", "ivy.Container.acosh", "ivy.acosh", "add", "ivy.Array.add", "ivy.Container.add", "ivy.add", "ivy.Container.static_add", "asin", "ivy.Array.asin", "ivy.Container.asin", "ivy.asin", "asinh", "ivy.Array.asinh", "ivy.Container.asinh", "ivy.asinh", "ivy.Container.static_asinh", "atan", "ivy.Array.atan", "ivy.Container.atan", "ivy.atan", "atan2", "ivy.Array.atan2", "ivy.Container.atan2", "ivy.atan2", "atanh", "ivy.Array.atanh", "ivy.Container.atanh", "ivy.atanh", "bitwise_and", "ivy.Array.bitwise_and", "ivy.Container.bitwise_and", "ivy.bitwise_and", "bitwise_invert", "ivy.Array.bitwise_invert", "ivy.Container.bitwise_invert", "ivy.bitwise_invert", "bitwise_left_shift", "ivy.Array.bitwise_left_shift", "ivy.Container.bitwise_left_shift", "ivy.bitwise_left_shift", "bitwise_or", "ivy.Array.bitwise_or", "ivy.Container.bitwise_or", "ivy.bitwise_or", "bitwise_right_shift", "ivy.Array.bitwise_right_shift", "ivy.Container.bitwise_right_shift", "ivy.bitwise_right_shift", "bitwise_xor", "ivy.Array.bitwise_xor", "ivy.Container.bitwise_xor", "ivy.bitwise_xor", "ceil", "ivy.Array.ceil", "ivy.Container.ceil", "ivy.ceil", "cos", "ivy.Array.cos", "ivy.Container.cos", "ivy.cos", "cosh", "ivy.Array.cosh", "ivy.Container.cosh", "ivy.cosh", "divide", "ivy.Array.divide", "ivy.Container.divide", "ivy.divide", "ivy.Container.static_divide", "equal", "ivy.Array.equal", "ivy.Container.equal", "ivy.equal", "erf", "ivy.Array.erf", "ivy.Container.erf", "ivy.erf", "exp", "ivy.Array.exp", "ivy.Container.exp", "ivy.exp", "expm1", "ivy.Array.expm1", "ivy.Container.expm1", "ivy.expm1", "floor", "ivy.Array.floor", "ivy.Container.floor", "ivy.floor", "floor_divide", "ivy.Array.floor_divide", "ivy.Container.floor_divide", "ivy.floor_divide", "greater", "ivy.Array.greater", "ivy.Container.greater", "ivy.greater", "greater_equal", "ivy.Array.greater_equal", "ivy.Container.greater_equal", "ivy.greater_equal", "isfinite", "ivy.Array.isfinite", "ivy.Container.isfinite", "ivy.isfinite", "isinf", "ivy.Array.isinf", "ivy.Container.isinf", "ivy.isinf", "isnan", "ivy.Array.isnan", "ivy.Container.isnan", "ivy.isnan", "less", "ivy.Array.less", "ivy.Container.less", "ivy.less", "less_equal", "ivy.Array.less_equal", "ivy.Container.less_equal", "ivy.less_equal", "log", "ivy.Array.log", "ivy.Container.log", "ivy.log", "log10", "ivy.Array.log10", "ivy.Container.log10", "ivy.log10", "log1p", "ivy.Array.log1p", "ivy.Container.log1p", "ivy.log1p", "log2", "ivy.Array.log2", "ivy.Container.log2", "ivy.log2", "logaddexp", "ivy.Array.logaddexp", "ivy.Container.logaddexp", "ivy.logaddexp", "logical_and", "ivy.Array.logical_and", "ivy.Container.logical_and", "ivy.logical_and", "logical_not", "ivy.Array.logical_not", "ivy.Container.logical_not", "ivy.logical_not", "logical_or", "ivy.Array.logical_or", "ivy.Container.logical_or", "ivy.logical_or", "logical_xor", "ivy.Array.logical_xor", "ivy.Container.logical_xor", "ivy.logical_xor", "maximum", "minimum", "multiply", "ivy.Array.multiply", "ivy.Container.multiply", "ivy.multiply", "ivy.Container.static_multiply", "negative", "ivy.Array.negative", "ivy.Container.negative", "ivy.negative", "not_equal", "ivy.Array.not_equal", "ivy.Container.not_equal", "ivy.not_equal", "positive", "ivy.Array.positive", "ivy.Container.positive", "ivy.positive", "pow", "ivy.Array.pow", "ivy.Container.pow", "ivy.pow", "remainder", "ivy.Array.remainder", "ivy.Container.remainder", "ivy.remainder", "round", "ivy.Array.round", "ivy.Container.round", "ivy.round", "sign", "ivy.Array.sign", "ivy.Container.sign", "ivy.sign", "ivy.Container.static_sign", "sin", "ivy.Array.sin", "ivy.Container.sin", "ivy.sin", "ivy.Container.static_sin", "sinh", "ivy.Array.sinh", "ivy.Container.sinh", "ivy.sinh", "sqrt", "ivy.Array.sqrt", "ivy.Container.sqrt", "ivy.sqrt", "square", "ivy.Array.square", "ivy.Container.square", "ivy.square", "subtract", "ivy.Container.static_subtract", "ivy.Array.subtract", "ivy.Container.subtract", "ivy.subtract", "tan", "ivy.Container.static_tan", "ivy.Array.tan", "ivy.Container.tan", "ivy.tan", "tanh", "ivy.Container.static_tanh", "ivy.Array.tanh", "ivy.Container.tanh", "ivy.tanh", "trunc", "ivy.Array.trunc", "ivy.Container.trunc", "ivy.trunc", "General", "all_equal", "ivy.Array.all_equal", "ivy.Container.all_equal", "ivy.all_equal", "ivy.Container.static_all_equal", "arg_info", "arg_names", "array_equal", "arrays_equal", "assert_supports_inplace", "cache_fn", "clip_matrix_norm", "clip_vector_norm", "ivy.Container.clip_vector_norm", "ivy.clip_vector_norm", "container_types", "copy_array", "cumprod", "cumsum", "current_backend_str", "default", "einops_rearrange", "einops_reduce", "einops_repeat", "exists", "floormod", "fourier_encode", "gather", "gather_nd", "ivy.Array.gather_nd", "ivy.Container.gather_nd", "ivy.gather_nd", "ivy.Container.static_gather_nd", "get_all_arrays_in_memory", "get_min_base", "get_min_denominator", "get_num_dims", "get_referrers_recursive", "has_nans", "indices_where", "inplace_arrays_supported", "inplace_decrement", "inplace_increment", "inplace_update", "inplace_variables_supported", "is_array", "is_ivy_array", "is_ivy_container", "is_native_array", "match_kwargs", "multiprocessing", "num_arrays_in_memory", "one_hot", "print_all_arrays_in_memory", "queue_timeout", "scatter_flat", "scatter_nd", "set_min_base", "set_min_denominator", "set_queue_timeout", "set_shape_array_mode", "set_tmp_dir", "shape", "shape_array_mode", "shape_to_tuple", "stable_divide", "stable_pow", "supports_inplace", "tmp_dir", "to_list", "to_numpy", "ivy.Container.static_to_numpy", "ivy.Array.to_numpy", "ivy.Container.to_numpy", "ivy.to_numpy", "to_scalar", "try_else_none", "unset_shape_array_mode", "unstack", "value_is_nan", "Gradients", "&lt;no title&gt;", "adam_step", "ivy.Array.adam_step", "ivy.Container.adam_step", "ivy.adam_step", "ivy.Container.static_adam_step", "adam_update", "ivy.Container.adam_update", "ivy.adam_update", "ivy.Container.static_adam_update", "execute_with_gradients", "gradient_descent_update", "ivy.Container.gradient_descent_update", "ivy.gradient_descent_update", "ivy.Container.static_gradient_descent_update", "is_variable", "ivy.Container.is_variable", "ivy.is_variable", "ivy.Container.static_is_variable", "lamb_update", "ivy.Container.lamb_update", "ivy.lamb_update", "ivy.Container.static_lamb_update", "lars_update", "ivy.Container.lars_update", "ivy.lars_update", "ivy.Container.static_lars_update", "optimizer_update", "ivy.Container.optimizer_update", "ivy.optimizer_update", "ivy.Container.static_optimizer_update", "set_with_grads", "stop_gradient", "unset_with_grads", "variable", "variable_data", "with_grads", "Layers", "conv1d", "conv1d_transpose", "conv2d", "conv2d_transpose", "conv3d", "conv3d_transpose", "depthwise_conv2d", "dropout", "linear", "lstm_update", "multi_head_attention", "scaled_dot_product_attention", "Linear algebra", "cholesky", "ivy.Array.cholesky", "ivy.Container.cholesky", "ivy.cholesky", "ivy.Container.static_cholesky", "cross", "ivy.Array.cross", "ivy.cross", "det", "ivy.Array.det", "ivy.det", "diagonal", "ivy.Array.diagonal", "ivy.diagonal", "eigh", "ivy.Array.eigh", "ivy.eigh", "eigvalsh", "ivy.Array.eigvalsh", "ivy.eigvalsh", "inv", "ivy.Array.inv", "ivy.inv", "matmul", "ivy.Array.matmul", "ivy.Container.matmul", "ivy.matmul", "matrix_norm", "ivy.Array.matrix_norm", "ivy.matrix_norm", "matrix_power", "matrix_rank", "ivy.Array.matrix_rank", "ivy.matrix_rank", "matrix_transpose", "ivy.Array.matrix_transpose", "ivy.matrix_transpose", "outer", "ivy.Array.outer", "ivy.outer", "pinv", "ivy.Array.pinv", "ivy.pinv", "qr", "ivy.Array.qr", "ivy.qr", "slogdet", "solve", "ivy.Array.solve", "ivy.solve", "svd", "ivy.Array.svd", "ivy.svd", "svdvals", "ivy.Array.svdvals", "ivy.svdvals", "tensordot", "ivy.Array.tensordot", "ivy.tensordot", "trace", "ivy.Array.trace", "ivy.trace", "vecdot", "ivy.Array.vecdot", "ivy.vecdot", "vector_norm", "ivy.Array.vector_norm", "ivy.vector_norm", "vector_to_skew_symmetric_matrix", "ivy.Array.vector_to_skew_symmetric_matrix", "ivy.vector_to_skew_symmetric_matrix", "Losses", "binary_cross_entropy", "ivy.Array.binary_cross_entropy", "ivy.Container.binary_cross_entropy", "ivy.binary_cross_entropy", "ivy.Container.static_binary_cross_entropy", "cross_entropy", "ivy.Array.cross_entropy", "ivy.Container.cross_entropy", "ivy.cross_entropy", "ivy.Container.static_cross_entropy", "sparse_cross_entropy", "ivy.Array.sparse_cross_entropy", "ivy.Container.sparse_cross_entropy", "ivy.sparse_cross_entropy", "ivy.Container.static_sparse_cross_entropy", "Manipulation", "clip", "ivy.Array.clip", "ivy.Container.clip", "ivy.clip", "ivy.Container.static_clip", "concat", "ivy.Array.concat", "ivy.Container.concat", "ivy.concat", "constant_pad", "ivy.Array.constant_pad", "ivy.Container.constant_pad", "ivy.constant_pad", "expand_dims", "ivy.Array.expand_dims", "ivy.Container.expand_dims", "ivy.expand_dims", "flip", "ivy.Array.flip", "ivy.Container.flip", "ivy.flip", "permute_dims", "ivy.Array.permute_dims", "ivy.Container.permute_dims", "ivy.permute_dims", "repeat", "ivy.Array.repeat", "ivy.Container.repeat", "ivy.repeat", "reshape", "ivy.Array.reshape", "ivy.Container.reshape", "ivy.reshape", "roll", "ivy.Array.roll", "ivy.Container.roll", "ivy.roll", "ivy.Container.static_roll", "split", "squeeze", "ivy.Array.squeeze", "ivy.Container.squeeze", "ivy.squeeze", "stack", "ivy.Array.stack", "ivy.Container.stack", "ivy.stack", "swapaxes", "ivy.Array.swapaxes", "ivy.Container.swapaxes", "ivy.swapaxes", "tile", "ivy.Array.tile", "ivy.Container.tile", "ivy.tile", "zero_pad", "ivy.Array.zero_pad", "ivy.Container.zero_pad", "ivy.zero_pad", "Meta", "fomaml_step", "maml_step", "reptile_step", "Nest", "all_nested_indices", "copy_nest", "index_nest", "insert_into_nest_at_index", "insert_into_nest_at_indices", "map", "map_nest_at_index", "map_nest_at_indices", "multi_index_nest", "nested_any", "nested_indices_where", "nested_map", "nested_multi_map", "prune_nest_at_index", "prune_nest_at_indices", "set_nest_at_index", "set_nest_at_indices", "Norms", "layer_norm", "ivy.Array.layer_norm", "ivy.Container.layer_norm", "ivy.layer_norm", "ivy.Container.static_layer_norm", "Random", "multinomial", "randint", "ivy.randint", "ivy.Container.static_randint", "random_normal", "random_uniform", "ivy.Container.random_uniform", "ivy.random_uniform", "ivy.Container.static_random_uniform", "seed", "shuffle", "Searching", "argmax", "argmin", "nonzero", "where", "Set", "unique_all", "unique_counts", "ivy.Container.static_unique_counts", "ivy.Array.unique_counts", "ivy.Container.unique_counts", "ivy.unique_counts", "unique_inverse", "unique_values", "Sorting", "argsort", "ivy.Array.argsort", "ivy.Container.argsort", "ivy.argsort", "ivy.Container.static_argsort", "sort", "ivy.Array.sort", "ivy.Container.sort", "ivy.sort", "ivy.Container.static_sort", "Statistical", "einsum", "ivy.Array.einsum", "ivy.Container.einsum", "ivy.einsum", "max", "ivy.Array.max", "ivy.Container.max", "ivy.max", "mean", "ivy.Array.mean", "ivy.Container.mean", "ivy.mean", "min", "ivy.Array.min", "ivy.Container.min", "ivy.min", "prod", "ivy.Array.prod", "ivy.Container.prod", "ivy.prod", "std", "ivy.Array.std", "ivy.Container.std", "ivy.std", "sum", "ivy.Array.sum", "ivy.Container.sum", "ivy.sum", "var", "ivy.Array.var", "ivy.Container.var", "ivy.var", "Utility", "all", "ivy.Array.all", "ivy.Container.all", "ivy.all", "ivy.Container.static_all", "any", "ivy.Array.any", "ivy.Container.any", "ivy.any", "ivy.Container.static_any", "Contents", "&lt;no title&gt;", "&lt;no title&gt;", "Inspection", "add_array_specs", "fn_array_spec", "Roadmap", "Activations", "GEGLU", "GELU", "Converters", "to_ivy_module", "Initializers", "&lt;no title&gt;", "FirstLayerSiren", "GlorotUniform", "&lt;no title&gt;", "Ones", "Siren", "&lt;no title&gt;", "Zeros", "Layers", "Conv1D", "Conv1DTranspose", "Conv2D", "Conv2DTranspose", "Conv3D", "Conv3DTranspose", "DepthwiseConv2D", "Dropout", "LSTM", "Linear", "MultiHeadAttention", "Module", "Module", "Norms", "LayerNorm", "Optimizers", "Adam", "LAMB", "LARS", "Optimizer", "SGD", "Sequential", "Sequential", "&lt;no title&gt;", "Verbosity", "cprint"], "terms": {"class": [0, 6, 12, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 117, 118, 119, 121, 125, 126, 127, 128, 132, 133, 135, 136, 137, 147, 148, 149, 246, 288, 291, 318, 320, 321, 322, 323, 324, 325, 327, 328, 330, 331, 332, 333, 609, 616, 653, 659, 690, 692, 694, 696, 726, 893, 895, 905, 929, 932, 998, 1005, 1006, 1007, 1008, 1009, 1010, 1012, 1013, 1015, 1016, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042], "ivi": [0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 15, 16, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 117, 118, 120, 122, 123, 124, 126, 127, 128, 129, 130, 131, 147, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 160, 161, 162, 163, 164, 165, 166, 171, 172, 173, 174, 175, 176, 179, 184, 185, 190, 193, 198, 199, 204, 207, 210, 215, 220, 223, 228, 233, 238, 241, 246, 250, 251, 252, 257, 262, 267, 272, 273, 274, 275, 276, 280, 281, 286, 287, 288, 293, 294, 299, 304, 305, 310, 311, 312, 313, 314, 315, 316, 317, 318, 320, 321, 322, 323, 324, 325, 327, 328, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 374, 378, 382, 387, 391, 396, 400, 404, 408, 412, 416, 420, 424, 428, 432, 436, 440, 444, 449, 453, 457, 461, 465, 469, 473, 477, 481, 485, 489, 493, 497, 501, 505, 509, 513, 517, 521, 525, 529, 533, 537, 538, 539, 544, 548, 552, 556, 560, 564, 568, 573, 578, 582, 586, 590, 595, 600, 605, 609, 610, 615, 616, 617, 618, 619, 620, 621, 622, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 685, 686, 687, 688, 689, 690, 692, 697, 701, 702, 706, 710, 714, 718, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 747, 750, 753, 756, 759, 762, 765, 769, 772, 773, 776, 779, 782, 785, 788, 789, 792, 795, 798, 801, 804, 807, 810, 813, 814, 819, 824, 829, 830, 835, 839, 843, 847, 851, 855, 859, 863, 868, 869, 873, 877, 881, 885, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 917, 918, 919, 922, 923, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 941, 942, 943, 944, 949, 954, 955, 959, 963, 967, 971, 975, 979, 983, 987, 988, 993, 998, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1012, 1013, 1015, 1016, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1044, 1045], "backend_handl": [0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 998], "contextmanag": [0, 1], "modul": [0, 4, 5, 16, 18, 21, 68, 69, 72, 73, 74, 75, 76, 113, 114, 121, 122, 123, 125, 129, 130, 132, 133, 135, 137, 148, 149, 609, 660, 917, 918, 922, 998, 1005, 1006, 1007, 1008, 1009, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1033, 1034, 1041, 1042], "sourc": [0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 125, 126, 150, 151, 152, 153, 154, 155, 156, 157, 158, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 320, 321, 322, 323, 324, 325, 327, 328, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 1001, 1002, 1003, 1005, 1006, 1007, 1008, 1009, 1010, 1012, 1013, 1015, 1016, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1044, 1045], "base": [0, 19, 22, 23, 24, 25, 26, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 70, 71, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 121, 124, 126, 132, 148, 175, 207, 208, 209, 246, 318, 320, 321, 322, 323, 324, 325, 327, 328, 330, 331, 332, 333, 368, 457, 460, 501, 504, 505, 508, 509, 512, 513, 516, 556, 559, 609, 644, 667, 676, 690, 934, 935, 936, 940, 942, 954, 955, 958, 1005, 1006, 1007, 1010, 1012, 1013, 1015, 1016, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042], "object": [0, 72, 73, 74, 75, 76, 121, 134, 137, 175, 193, 196, 246, 281, 284, 318, 363, 690, 893, 896, 898, 900, 901, 902, 907, 908, 909, 910, 917, 928, 1010, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1028, 1029, 1031, 1032], "__init__": [0, 1, 4, 5, 24, 25, 26, 72, 73, 74, 75, 76, 116, 123, 127, 132, 134, 135, 136, 137, 246, 247, 248, 249, 318, 319, 326, 327, 328, 329, 330, 331, 332, 333, 690, 691, 917, 918, 922, 998, 1005, 1006, 1007, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042], "choose_random_backend": 0, "exclud": [0, 2, 119, 132, 175, 176, 177, 917, 923, 925], "none": [0, 2, 5, 12, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 38, 39, 40, 41, 48, 49, 50, 51, 52, 53, 54, 55, 62, 63, 64, 65, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 116, 117, 119, 121, 122, 126, 127, 128, 129, 130, 132, 134, 136, 137, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 212, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 252, 253, 254, 255, 256, 257, 259, 261, 262, 263, 264, 265, 266, 267, 269, 271, 273, 274, 275, 276, 278, 281, 283, 284, 285, 288, 290, 291, 292, 294, 296, 298, 299, 301, 303, 305, 307, 309, 317, 318, 327, 328, 336, 337, 360, 361, 362, 363, 366, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 612, 614, 615, 621, 622, 623, 624, 626, 627, 628, 630, 631, 632, 633, 634, 635, 637, 638, 639, 640, 641, 642, 647, 649, 650, 654, 660, 662, 665, 666, 667, 668, 670, 675, 676, 680, 681, 683, 686, 687, 690, 697, 698, 699, 700, 702, 703, 704, 705, 706, 707, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 723, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 788, 789, 790, 791, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 899, 904, 905, 906, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 933, 934, 936, 937, 939, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 1008, 1009, 1010, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042], "clear_backend_stack": 0, "current_backend": [0, 24, 25, 74, 75, 116, 122], "arg": [0, 4, 21, 24, 25, 27, 28, 29, 72, 73, 132, 134, 136, 318, 327, 342, 346, 350, 362, 609, 666, 1008, 1009, 1031, 1032], "kwarg": [0, 4, 24, 25, 27, 28, 29, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 132, 134, 136, 318, 327, 342, 346, 350, 609, 659, 1008, 1009, 1031, 1032], "return": [0, 4, 5, 12, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 38, 39, 40, 41, 42, 43, 48, 49, 50, 51, 52, 53, 54, 55, 60, 61, 62, 63, 64, 65, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 83, 84, 85, 86, 87, 88, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 105, 106, 107, 108, 109, 110, 111, 112, 116, 117, 118, 119, 121, 122, 124, 125, 126, 127, 128, 129, 130, 132, 134, 135, 136, 137, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 283, 284, 285, 286, 287, 288, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 313, 317, 318, 327, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 612, 613, 614, 615, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 644, 645, 646, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 665, 666, 667, 668, 670, 672, 673, 674, 675, 676, 677, 679, 680, 681, 683, 684, 685, 686, 687, 688, 689, 690, 692, 693, 694, 695, 696, 697, 699, 700, 701, 702, 704, 705, 706, 707, 708, 709, 710, 712, 713, 714, 716, 717, 718, 719, 720, 721, 723, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 899, 903, 904, 905, 906, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 1001, 1003, 1008, 1009, 1019, 1028, 1029, 1035, 1039], "current": [0, 4, 5, 12, 16, 18, 19, 20, 21, 24, 25, 72, 73, 74, 75, 76, 122, 128, 132, 137, 148, 149, 246, 286, 287, 293, 317, 318, 327, 351, 352, 356, 358, 609, 643, 650, 654, 661, 663, 673, 690, 727, 893, 894, 903, 904, 998], "prioriti": [0, 4, 19, 72, 73, 129], "global_backend": [0, 4], "argument": [0, 4, 5, 14, 20, 27, 28, 29, 30, 31, 72, 73, 74, 75, 76, 115, 116, 118, 119, 121, 122, 123, 125, 126, 130, 132, 134, 135, 172, 173, 175, 176, 177, 179, 182, 184, 185, 188, 190, 191, 193, 196, 198, 199, 202, 204, 205, 207, 208, 210, 213, 220, 221, 223, 226, 228, 232, 233, 237, 238, 240, 241, 245, 246, 267, 270, 305, 308, 318, 327, 328, 342, 346, 350, 368, 369, 372, 382, 385, 387, 390, 391, 394, 432, 435, 465, 468, 537, 548, 551, 568, 571, 573, 576, 582, 585, 586, 589, 595, 599, 609, 615, 616, 620, 630, 637, 659, 666, 728, 731, 740, 741, 742, 745, 753, 755, 829, 863, 866, 893, 899, 911, 912, 915, 934, 936, 940, 954, 959, 962, 979, 982, 987, 988, 991, 1001, 1003, 1008, 1009, 1031, 1032], "s": [0, 4, 5, 6, 12, 15, 16, 17, 18, 19, 21, 24, 25, 27, 30, 31, 72, 73, 115, 117, 118, 119, 121, 123, 125, 126, 127, 128, 129, 130, 132, 134, 135, 136, 137, 148, 149, 174, 175, 210, 213, 228, 232, 233, 237, 246, 286, 287, 318, 337, 361, 368, 560, 563, 609, 618, 690, 697, 699, 702, 704, 710, 712, 718, 720, 741, 792, 794, 795, 797, 893, 899, 905, 954, 975, 978, 983, 986, 998, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1039, 1041, 1042], "paramet": [0, 4, 5, 24, 25, 27, 28, 29, 30, 31, 68, 69, 72, 73, 74, 75, 76, 113, 114, 116, 118, 121, 134, 135, 148, 160, 161, 162, 163, 164, 165, 166, 169, 171, 172, 173, 175, 176, 177, 179, 182, 184, 185, 188, 190, 191, 193, 196, 198, 199, 202, 204, 205, 207, 208, 210, 213, 215, 218, 220, 221, 223, 226, 228, 232, 233, 237, 238, 240, 241, 245, 246, 250, 251, 252, 255, 257, 260, 262, 265, 267, 270, 272, 273, 274, 275, 276, 279, 280, 281, 284, 286, 287, 288, 291, 293, 294, 297, 299, 302, 304, 305, 308, 310, 311, 312, 313, 317, 318, 327, 328, 331, 332, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 354, 356, 357, 358, 359, 360, 361, 362, 363, 364, 367, 368, 369, 372, 374, 377, 378, 381, 382, 385, 387, 390, 391, 394, 396, 399, 400, 403, 404, 407, 408, 411, 412, 415, 416, 419, 420, 423, 424, 427, 428, 431, 432, 435, 436, 439, 440, 443, 444, 447, 449, 452, 453, 456, 457, 460, 461, 464, 465, 468, 469, 472, 473, 476, 477, 480, 481, 484, 485, 488, 489, 492, 493, 496, 497, 500, 501, 504, 505, 508, 509, 512, 513, 516, 517, 520, 521, 524, 525, 528, 529, 532, 533, 536, 537, 538, 539, 542, 544, 547, 548, 551, 552, 555, 556, 559, 560, 563, 564, 567, 568, 571, 573, 576, 578, 581, 582, 585, 586, 589, 590, 594, 595, 599, 600, 604, 605, 608, 609, 610, 613, 615, 616, 617, 618, 619, 620, 621, 622, 624, 627, 628, 630, 631, 632, 633, 634, 635, 636, 637, 638, 641, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 662, 665, 666, 667, 668, 669, 671, 672, 674, 675, 676, 677, 679, 680, 684, 685, 686, 688, 689, 690, 692, 695, 697, 699, 701, 702, 704, 706, 708, 710, 712, 714, 716, 718, 720, 722, 723, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 745, 747, 749, 750, 752, 753, 755, 756, 758, 759, 761, 762, 764, 765, 768, 769, 771, 773, 775, 776, 778, 779, 781, 782, 784, 785, 787, 788, 789, 791, 792, 794, 795, 797, 798, 800, 801, 803, 804, 806, 807, 809, 810, 812, 813, 814, 817, 819, 822, 824, 827, 829, 830, 833, 835, 838, 839, 842, 843, 846, 847, 850, 851, 854, 855, 858, 859, 862, 863, 866, 868, 869, 872, 873, 876, 877, 880, 881, 884, 885, 888, 889, 890, 891, 892, 893, 894, 895, 896, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 915, 917, 918, 919, 920, 922, 923, 925, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 940, 941, 942, 943, 944, 947, 949, 952, 954, 955, 958, 959, 962, 963, 966, 967, 970, 971, 974, 975, 978, 979, 982, 983, 986, 987, 988, 991, 993, 996, 1001, 1003, 1008, 1009, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042], "from": [0, 4, 5, 6, 14, 15, 16, 17, 18, 19, 20, 21, 24, 25, 27, 28, 29, 30, 31, 68, 69, 72, 73, 74, 75, 76, 113, 114, 115, 116, 117, 118, 119, 121, 123, 125, 126, 127, 128, 129, 130, 132, 134, 135, 136, 137, 148, 149, 175, 176, 177, 179, 182, 185, 188, 193, 196, 198, 199, 202, 210, 213, 215, 218, 223, 226, 241, 245, 246, 267, 270, 305, 308, 318, 327, 328, 337, 352, 356, 361, 362, 368, 473, 476, 582, 585, 609, 630, 637, 638, 641, 679, 690, 697, 699, 710, 712, 728, 736, 739, 741, 753, 755, 792, 794, 804, 806, 829, 847, 850, 859, 862, 869, 872, 889, 890, 891, 892, 893, 895, 905, 906, 917, 918, 919, 920, 922, 923, 925, 929, 933, 934, 935, 941, 954, 971, 974, 975, 978, 979, 982, 983, 986, 987, 988, 991, 993, 996, 998, 1004, 1008, 1009, 1019, 1027, 1030, 1035, 1039], "which": [0, 4, 5, 14, 15, 16, 18, 19, 20, 21, 24, 25, 72, 73, 74, 75, 76, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 134, 135, 136, 137, 148, 149, 160, 165, 172, 173, 174, 175, 176, 177, 179, 182, 184, 185, 188, 190, 191, 198, 199, 202, 204, 205, 207, 208, 215, 218, 220, 221, 223, 226, 228, 232, 233, 237, 238, 240, 241, 245, 246, 267, 270, 272, 276, 279, 281, 284, 288, 291, 293, 317, 318, 327, 328, 338, 343, 344, 345, 346, 347, 348, 349, 350, 352, 356, 358, 360, 361, 362, 368, 560, 563, 609, 615, 627, 628, 630, 637, 638, 641, 643, 649, 653, 661, 662, 663, 665, 666, 688, 690, 697, 699, 701, 702, 704, 710, 712, 714, 716, 718, 720, 723, 725, 726, 728, 739, 741, 747, 749, 753, 755, 769, 771, 789, 791, 792, 794, 804, 806, 807, 809, 813, 819, 822, 824, 827, 829, 835, 838, 847, 850, 855, 858, 863, 866, 868, 873, 876, 893, 898, 899, 900, 901, 906, 907, 908, 909, 910, 917, 918, 919, 920, 923, 925, 929, 930, 931, 932, 933, 934, 935, 936, 940, 942, 943, 944, 947, 949, 952, 954, 959, 962, 963, 966, 967, 970, 971, 974, 975, 978, 979, 982, 983, 986, 987, 988, 991, 993, 996, 998, 1001, 1003, 1008, 1009, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1039, 1041, 1042], "try": [0, 4, 13, 15, 16, 18, 19, 20, 21, 72, 73, 125, 126, 130, 134, 149, 609, 686, 998], "infer": [0, 4, 115, 123, 127, 128, 132, 137, 172, 173, 175, 176, 177, 179, 182, 185, 188, 198, 199, 202, 215, 218, 223, 226, 241, 245, 368, 473, 476, 609, 646, 672, 829, 859, 862], "when": [0, 4, 14, 15, 18, 19, 20, 72, 73, 74, 75, 76, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 134, 135, 137, 149, 246, 252, 255, 318, 368, 382, 385, 461, 464, 556, 559, 609, 620, 653, 676, 813, 814, 817, 819, 822, 824, 827, 893, 904, 929, 930, 931, 933, 954, 959, 962, 967, 970, 975, 978, 983, 986, 998, 1031, 1032], "global": [0, 4, 5, 6, 12, 72, 73, 74, 75, 76, 122, 123, 127, 128, 132, 246, 273, 274, 275, 318, 327, 328, 360, 361, 362, 609, 644, 645, 664, 667, 668, 669, 675, 676, 690, 727, 911, 912, 915, 1033, 1034], "set": [0, 4, 5, 6, 12, 14, 17, 19, 27, 30, 31, 61, 72, 73, 106, 115, 116, 121, 122, 124, 125, 126, 127, 128, 129, 132, 134, 135, 318, 337, 347, 348, 359, 360, 361, 362, 368, 400, 403, 609, 610, 613, 667, 668, 669, 670, 671, 690, 697, 699, 702, 704, 706, 708, 710, 712, 714, 716, 718, 720, 741, 747, 749, 769, 771, 773, 775, 782, 784, 789, 791, 893, 894, 903, 904, 905, 909, 910, 917, 927, 929, 930, 935, 936, 940, 941, 942, 943, 944, 947, 949, 952, 954, 975, 978, 983, 986, 1019, 1028, 1035, 1036, 1037, 1038, 1039, 1040], "ret": [0, 4, 5, 12, 24, 25, 27, 28, 29, 30, 31, 72, 73, 79, 80, 116, 118, 132, 137, 160, 161, 162, 163, 164, 165, 166, 169, 171, 172, 173, 175, 176, 177, 179, 182, 184, 185, 188, 190, 191, 193, 196, 198, 199, 202, 204, 205, 207, 208, 210, 213, 215, 218, 220, 221, 223, 226, 228, 232, 233, 237, 238, 240, 241, 245, 246, 250, 251, 252, 255, 257, 260, 262, 265, 267, 270, 272, 276, 279, 280, 281, 284, 286, 287, 288, 291, 293, 294, 297, 299, 302, 304, 305, 308, 317, 318, 327, 334, 335, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 361, 362, 363, 364, 365, 367, 368, 369, 372, 374, 377, 378, 381, 382, 385, 387, 390, 391, 394, 396, 399, 400, 403, 404, 407, 408, 411, 412, 415, 416, 419, 420, 423, 424, 427, 428, 431, 432, 435, 436, 439, 440, 443, 444, 447, 449, 452, 453, 456, 457, 460, 461, 464, 465, 468, 469, 472, 473, 476, 477, 480, 481, 484, 485, 488, 489, 492, 493, 496, 497, 500, 501, 504, 505, 508, 509, 512, 513, 516, 517, 520, 521, 524, 525, 528, 529, 532, 533, 536, 537, 538, 539, 542, 544, 547, 548, 551, 552, 555, 556, 559, 560, 563, 564, 567, 568, 571, 573, 576, 578, 581, 582, 585, 586, 589, 590, 594, 595, 599, 600, 604, 605, 608, 609, 610, 613, 615, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 641, 645, 646, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 662, 665, 666, 672, 675, 676, 677, 679, 680, 684, 685, 688, 689, 690, 692, 695, 697, 699, 701, 702, 704, 706, 708, 710, 712, 714, 716, 718, 720, 723, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 745, 747, 749, 750, 752, 753, 755, 756, 758, 759, 761, 762, 764, 765, 768, 769, 771, 773, 775, 776, 778, 779, 781, 782, 784, 785, 787, 788, 789, 791, 792, 794, 795, 797, 798, 800, 801, 803, 804, 806, 807, 809, 810, 812, 813, 814, 817, 819, 822, 824, 827, 829, 830, 833, 835, 838, 839, 842, 843, 846, 847, 850, 851, 854, 855, 858, 859, 862, 863, 866, 868, 869, 872, 873, 876, 877, 880, 881, 884, 885, 888, 889, 890, 891, 892, 893, 894, 895, 896, 899, 903, 904, 905, 911, 912, 915, 917, 918, 919, 920, 922, 923, 925, 928, 929, 930, 931, 932, 933, 934, 935, 936, 940, 941, 942, 943, 944, 947, 949, 952, 954, 955, 958, 959, 962, 963, 966, 967, 970, 971, 974, 975, 978, 979, 982, 983, 986, 987, 988, 991, 993, 996, 1001, 1003, 1008, 1009, 1035, 1039], "exampl": [0, 4, 5, 6, 12, 16, 18, 19, 20, 24, 25, 34, 35, 38, 39, 40, 41, 42, 43, 48, 49, 50, 51, 52, 53, 54, 55, 60, 61, 66, 67, 68, 69, 74, 75, 79, 80, 83, 84, 85, 86, 87, 88, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 105, 106, 111, 112, 113, 114, 115, 116, 118, 121, 122, 123, 124, 125, 126, 127, 128, 129, 132, 134, 135, 136, 137, 148, 149, 160, 162, 163, 164, 165, 166, 169, 171, 172, 173, 175, 198, 199, 202, 210, 213, 220, 221, 223, 226, 238, 240, 241, 245, 246, 252, 255, 267, 268, 269, 270, 271, 286, 287, 317, 318, 337, 338, 340, 352, 353, 354, 355, 356, 359, 361, 363, 365, 366, 368, 369, 370, 371, 372, 373, 382, 383, 384, 385, 386, 387, 390, 391, 392, 393, 394, 395, 404, 407, 408, 411, 412, 415, 424, 427, 428, 431, 432, 433, 434, 435, 436, 439, 440, 443, 457, 460, 465, 466, 467, 468, 473, 476, 477, 480, 493, 496, 497, 500, 537, 538, 544, 547, 548, 551, 564, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 582, 585, 586, 589, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 609, 610, 611, 612, 613, 614, 617, 618, 626, 627, 634, 637, 638, 639, 640, 641, 642, 645, 656, 670, 672, 673, 674, 679, 680, 681, 682, 683, 684, 685, 687, 690, 692, 693, 694, 695, 696, 727, 728, 729, 731, 733, 734, 735, 740, 741, 742, 743, 744, 745, 746, 747, 749, 750, 752, 753, 755, 762, 764, 773, 775, 779, 781, 792, 794, 798, 800, 801, 803, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 838, 843, 846, 847, 850, 855, 858, 859, 862, 863, 864, 865, 866, 867, 868, 869, 872, 873, 876, 877, 880, 893, 896, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 925, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 943, 944, 947, 954, 955, 958, 959, 962, 975, 978, 979, 982, 987, 988, 989, 990, 991, 992, 993, 994, 995, 997, 998], "If": [0, 4, 5, 6, 14, 17, 18, 19, 20, 21, 27, 30, 31, 72, 73, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 134, 135, 137, 149, 175, 176, 177, 184, 185, 188, 190, 191, 198, 199, 202, 210, 213, 220, 221, 223, 226, 228, 232, 233, 237, 238, 240, 241, 245, 246, 252, 255, 262, 265, 305, 308, 318, 337, 361, 368, 369, 372, 374, 377, 378, 381, 382, 385, 387, 390, 391, 394, 396, 399, 400, 403, 432, 435, 436, 439, 440, 443, 457, 460, 461, 464, 465, 468, 501, 504, 505, 508, 513, 516, 517, 520, 525, 528, 529, 532, 539, 542, 556, 559, 560, 563, 564, 567, 568, 571, 573, 576, 578, 581, 582, 585, 595, 599, 600, 604, 605, 608, 609, 653, 690, 697, 699, 702, 704, 710, 712, 714, 716, 718, 720, 727, 741, 742, 745, 747, 749, 769, 771, 773, 775, 782, 784, 785, 787, 789, 791, 792, 794, 804, 806, 807, 809, 813, 814, 817, 819, 822, 824, 827, 829, 843, 846, 847, 850, 863, 866, 868, 869, 872, 873, 876, 889, 890, 891, 893, 905, 906, 917, 922, 923, 925, 929, 930, 931, 932, 934, 935, 936, 940, 942, 943, 944, 947, 949, 952, 954, 959, 962, 963, 966, 967, 970, 971, 974, 975, 978, 979, 982, 983, 986, 987, 988, 991, 993, 996, 998], "import": [0, 4, 15, 20, 68, 69, 113, 114, 116, 118, 119, 123, 125, 126, 127, 128, 129, 130, 132, 134, 135, 137, 149, 318, 359, 998, 1004], "numpi": [0, 4, 5, 6, 14, 15, 19, 20, 72, 73, 117, 121, 123, 127, 128, 129, 132, 134, 137, 609, 680, 684, 954, 955, 958, 998], "np": [0, 4, 117, 121, 125, 127, 128, 129, 134, 135, 137, 998], "x": [0, 4, 12, 21, 24, 25, 27, 30, 31, 34, 35, 38, 39, 40, 41, 48, 49, 50, 51, 52, 53, 54, 55, 60, 61, 66, 67, 70, 71, 72, 73, 74, 75, 77, 78, 79, 80, 83, 84, 85, 86, 87, 88, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 105, 106, 107, 108, 111, 112, 116, 117, 118, 119, 121, 122, 123, 126, 129, 130, 132, 134, 135, 136, 137, 160, 161, 162, 163, 164, 165, 166, 169, 170, 171, 175, 179, 182, 183, 185, 188, 189, 193, 196, 197, 199, 202, 203, 210, 213, 215, 218, 219, 223, 226, 227, 228, 229, 232, 233, 234, 237, 238, 240, 241, 242, 245, 246, 252, 255, 256, 262, 265, 266, 267, 268, 269, 270, 271, 276, 279, 318, 337, 338, 339, 340, 343, 344, 352, 356, 361, 363, 368, 369, 370, 371, 372, 373, 374, 377, 378, 381, 382, 383, 384, 385, 386, 387, 390, 391, 392, 393, 394, 395, 396, 399, 400, 403, 404, 407, 408, 411, 412, 415, 428, 431, 432, 433, 434, 435, 436, 439, 440, 443, 453, 456, 457, 460, 461, 464, 465, 466, 467, 468, 473, 476, 477, 480, 481, 484, 485, 488, 489, 492, 493, 496, 497, 500, 501, 504, 505, 508, 509, 512, 513, 516, 525, 528, 537, 538, 544, 547, 552, 555, 564, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 581, 582, 585, 586, 589, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 608, 609, 617, 618, 619, 621, 622, 624, 626, 627, 628, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 645, 646, 648, 649, 651, 652, 653, 655, 656, 657, 658, 662, 672, 674, 677, 679, 680, 681, 682, 683, 684, 685, 688, 689, 690, 701, 706, 708, 709, 723, 725, 726, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 749, 750, 752, 753, 755, 756, 758, 759, 761, 762, 764, 769, 771, 772, 773, 775, 776, 778, 779, 781, 782, 784, 785, 787, 788, 792, 794, 795, 797, 798, 800, 801, 803, 807, 809, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 838, 839, 842, 843, 846, 847, 850, 851, 854, 855, 858, 859, 862, 863, 864, 865, 866, 867, 868, 869, 872, 873, 874, 875, 876, 877, 880, 881, 884, 885, 888, 893, 894, 896, 899, 903, 904, 905, 911, 912, 913, 914, 915, 916, 917, 919, 920, 921, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 947, 948, 949, 952, 953, 954, 955, 958, 959, 962, 963, 966, 967, 970, 971, 974, 975, 978, 979, 982, 983, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 1019, 1030], "arrai": [0, 4, 18, 19, 20, 22, 23, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 72, 73, 74, 75, 76, 77, 78, 79, 80, 83, 84, 85, 86, 87, 88, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 105, 106, 111, 112, 115, 116, 118, 119, 121, 122, 123, 124, 126, 127, 128, 129, 130, 131, 132, 133, 135, 136, 137, 149, 150, 158, 160, 161, 162, 163, 164, 165, 166, 169, 171, 174, 175, 176, 177, 179, 182, 184, 185, 188, 190, 191, 193, 196, 198, 199, 202, 204, 205, 207, 208, 210, 212, 213, 214, 215, 218, 220, 221, 223, 226, 228, 232, 233, 237, 238, 240, 241, 245, 246, 252, 255, 257, 259, 260, 261, 262, 265, 267, 269, 270, 271, 276, 279, 281, 284, 288, 291, 294, 297, 299, 302, 305, 308, 313, 318, 337, 338, 339, 340, 343, 344, 345, 346, 347, 348, 349, 350, 352, 356, 358, 362, 363, 368, 369, 371, 372, 373, 374, 377, 378, 381, 382, 384, 385, 386, 387, 390, 391, 393, 394, 395, 396, 399, 400, 403, 404, 407, 408, 411, 412, 415, 416, 419, 420, 423, 424, 427, 428, 431, 432, 434, 435, 436, 439, 440, 443, 444, 447, 449, 452, 453, 456, 457, 460, 461, 464, 465, 467, 468, 469, 472, 473, 476, 477, 480, 481, 484, 485, 488, 489, 492, 493, 496, 497, 500, 501, 504, 505, 508, 509, 512, 513, 516, 517, 520, 521, 524, 525, 528, 529, 532, 533, 536, 537, 538, 539, 542, 544, 547, 548, 551, 552, 555, 556, 559, 560, 563, 564, 567, 568, 570, 571, 572, 573, 575, 576, 577, 578, 581, 582, 585, 586, 589, 590, 594, 595, 596, 598, 599, 600, 601, 603, 604, 605, 608, 609, 610, 612, 613, 614, 617, 618, 619, 621, 622, 624, 626, 627, 628, 631, 632, 633, 634, 635, 636, 637, 638, 640, 641, 642, 643, 646, 648, 649, 650, 651, 652, 653, 655, 656, 658, 661, 662, 663, 665, 666, 670, 672, 674, 677, 679, 680, 681, 683, 684, 685, 687, 688, 689, 690, 692, 694, 695, 696, 697, 699, 702, 704, 706, 708, 710, 712, 714, 716, 718, 720, 723, 725, 726, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 744, 745, 746, 747, 749, 750, 752, 753, 755, 756, 758, 759, 761, 762, 764, 765, 768, 769, 771, 772, 773, 775, 776, 778, 779, 781, 782, 784, 785, 787, 788, 789, 791, 792, 794, 795, 797, 798, 800, 801, 803, 804, 806, 807, 809, 810, 812, 813, 814, 816, 817, 818, 819, 821, 822, 823, 824, 826, 827, 828, 829, 830, 832, 833, 834, 835, 838, 839, 842, 843, 846, 847, 850, 851, 854, 855, 858, 859, 862, 863, 865, 866, 867, 868, 869, 872, 873, 876, 877, 880, 881, 884, 885, 888, 889, 890, 891, 892, 893, 895, 896, 905, 906, 911, 912, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 925, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 939, 940, 941, 942, 943, 944, 947, 949, 952, 954, 955, 958, 959, 962, 963, 966, 967, 970, 971, 974, 975, 978, 979, 982, 983, 986, 987, 988, 990, 991, 992, 993, 995, 996, 997, 998, 1001, 1003, 1019, 1027, 1030], "2": [0, 4, 18, 19, 21, 24, 25, 34, 35, 38, 39, 40, 41, 42, 43, 48, 49, 50, 51, 52, 53, 54, 55, 60, 61, 66, 67, 72, 73, 74, 75, 79, 80, 83, 84, 85, 86, 87, 88, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 105, 106, 111, 112, 117, 119, 121, 123, 126, 131, 132, 134, 135, 136, 137, 149, 160, 162, 163, 164, 165, 171, 174, 175, 198, 199, 202, 210, 213, 220, 221, 223, 226, 241, 245, 246, 252, 255, 267, 268, 269, 270, 271, 318, 337, 338, 340, 352, 354, 356, 363, 368, 369, 370, 371, 372, 373, 382, 383, 384, 385, 386, 387, 390, 391, 393, 394, 395, 396, 399, 400, 403, 408, 411, 412, 415, 424, 427, 428, 431, 432, 433, 434, 435, 436, 439, 440, 443, 457, 460, 465, 466, 467, 468, 473, 476, 477, 480, 493, 496, 497, 500, 513, 516, 537, 538, 544, 547, 548, 551, 564, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 582, 585, 586, 589, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 609, 610, 611, 612, 613, 617, 618, 621, 622, 624, 627, 634, 637, 638, 639, 640, 641, 642, 656, 672, 674, 679, 690, 692, 693, 694, 695, 696, 728, 731, 732, 733, 734, 735, 740, 741, 742, 743, 744, 745, 746, 747, 749, 750, 752, 753, 754, 755, 762, 764, 765, 768, 769, 771, 773, 775, 779, 781, 782, 784, 785, 787, 792, 794, 798, 799, 800, 801, 803, 807, 808, 809, 813, 814, 815, 816, 817, 818, 819, 821, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 838, 843, 846, 847, 850, 855, 858, 859, 862, 863, 864, 865, 866, 867, 868, 869, 872, 877, 880, 893, 896, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 925, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 943, 944, 947, 954, 955, 958, 959, 962, 987, 988, 989, 990, 991, 992, 993, 994, 995, 997, 998], "0": [0, 4, 19, 24, 25, 32, 33, 38, 39, 40, 41, 42, 43, 48, 49, 50, 51, 52, 53, 54, 55, 60, 61, 64, 65, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 116, 118, 119, 121, 132, 134, 135, 136, 137, 160, 162, 163, 164, 165, 166, 169, 171, 175, 176, 177, 190, 191, 192, 204, 205, 207, 208, 209, 223, 226, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 240, 241, 245, 246, 252, 255, 267, 269, 270, 271, 281, 284, 318, 320, 323, 327, 330, 334, 337, 338, 340, 343, 344, 345, 346, 347, 348, 349, 350, 352, 356, 359, 361, 362, 366, 368, 369, 370, 372, 373, 374, 377, 378, 381, 382, 385, 386, 387, 390, 391, 392, 393, 394, 395, 396, 399, 400, 403, 404, 407, 408, 411, 416, 419, 424, 427, 428, 431, 432, 433, 434, 435, 436, 439, 440, 443, 457, 460, 461, 464, 465, 466, 467, 468, 477, 480, 497, 500, 501, 504, 505, 508, 513, 516, 537, 538, 539, 542, 544, 547, 548, 551, 556, 559, 560, 563, 564, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 581, 582, 585, 586, 589, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 608, 609, 610, 611, 612, 613, 614, 617, 618, 621, 622, 624, 626, 627, 628, 634, 637, 638, 641, 642, 647, 656, 662, 665, 666, 672, 679, 680, 681, 682, 683, 684, 685, 690, 692, 693, 694, 695, 696, 697, 698, 699, 700, 710, 711, 712, 713, 714, 715, 716, 717, 728, 729, 731, 733, 734, 735, 740, 741, 742, 743, 744, 745, 746, 747, 749, 750, 752, 753, 754, 755, 762, 764, 792, 794, 798, 800, 801, 802, 803, 807, 809, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 850, 851, 854, 855, 858, 863, 864, 865, 866, 867, 868, 869, 872, 873, 874, 875, 876, 877, 880, 885, 887, 893, 896, 905, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 942, 943, 944, 947, 954, 955, 958, 959, 962, 963, 966, 975, 976, 977, 978, 979, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 997, 998, 1010, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1041, 1042], "print": [0, 4, 5, 6, 12, 18, 24, 25, 34, 35, 38, 39, 40, 41, 42, 43, 48, 49, 50, 51, 52, 53, 54, 55, 60, 61, 66, 67, 68, 69, 72, 73, 74, 75, 76, 79, 80, 83, 84, 85, 86, 87, 88, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 105, 106, 111, 112, 113, 114, 119, 121, 126, 132, 134, 135, 136, 160, 162, 163, 164, 165, 166, 169, 171, 175, 198, 199, 202, 210, 213, 220, 221, 223, 226, 238, 240, 241, 245, 246, 252, 255, 267, 268, 269, 270, 271, 286, 287, 317, 318, 338, 352, 353, 354, 355, 356, 358, 361, 365, 368, 369, 370, 371, 372, 373, 382, 383, 384, 385, 386, 387, 390, 391, 392, 393, 394, 395, 404, 407, 408, 411, 412, 415, 424, 427, 428, 431, 432, 433, 434, 435, 436, 439, 440, 443, 457, 460, 465, 466, 467, 468, 473, 476, 477, 480, 493, 496, 497, 500, 537, 538, 544, 547, 548, 551, 564, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 582, 585, 586, 589, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 609, 610, 611, 612, 613, 614, 617, 618, 626, 627, 634, 637, 638, 639, 640, 641, 642, 645, 663, 672, 674, 679, 680, 681, 682, 683, 684, 685, 690, 692, 693, 695, 696, 727, 728, 729, 731, 733, 734, 735, 740, 741, 742, 743, 744, 745, 746, 747, 749, 750, 752, 753, 755, 762, 764, 779, 781, 792, 794, 798, 800, 801, 803, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 843, 846, 847, 850, 855, 858, 859, 862, 863, 864, 865, 866, 867, 868, 869, 872, 877, 880, 893, 896, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 925, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 943, 944, 947, 954, 955, 958, 959, 962, 975, 978, 979, 982, 987, 988, 989, 990, 991, 992, 993, 994, 995, 997, 998], "function": [0, 4, 5, 6, 14, 19, 21, 22, 23, 24, 25, 27, 32, 33, 34, 35, 38, 39, 40, 41, 42, 43, 48, 49, 50, 51, 52, 53, 54, 55, 60, 61, 66, 67, 68, 69, 70, 71, 72, 73, 79, 80, 83, 84, 85, 86, 87, 88, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 105, 106, 111, 112, 113, 114, 115, 116, 118, 119, 120, 123, 125, 129, 130, 131, 133, 134, 135, 136, 147, 148, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 179, 180, 182, 184, 185, 186, 188, 190, 191, 193, 194, 196, 198, 199, 200, 202, 204, 205, 207, 208, 210, 213, 215, 216, 218, 220, 221, 223, 224, 226, 228, 230, 232, 233, 235, 237, 238, 240, 241, 243, 245, 246, 250, 251, 252, 255, 257, 260, 262, 265, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 279, 280, 281, 284, 286, 287, 288, 291, 293, 294, 297, 299, 302, 304, 305, 308, 310, 311, 312, 313, 314, 315, 316, 317, 318, 320, 321, 322, 323, 324, 325, 327, 328, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 377, 378, 381, 382, 383, 384, 385, 386, 387, 390, 391, 392, 393, 394, 395, 396, 399, 400, 403, 404, 407, 408, 411, 412, 415, 416, 419, 420, 423, 424, 427, 428, 431, 432, 433, 434, 435, 436, 439, 440, 443, 444, 447, 449, 452, 453, 456, 457, 460, 461, 464, 465, 466, 467, 468, 469, 472, 473, 476, 477, 480, 481, 484, 485, 488, 489, 492, 493, 496, 497, 500, 501, 504, 505, 508, 509, 512, 513, 516, 517, 520, 521, 524, 525, 528, 529, 532, 533, 536, 537, 538, 539, 542, 544, 547, 548, 551, 552, 555, 556, 559, 560, 563, 564, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 581, 582, 585, 586, 589, 590, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 692, 693, 694, 695, 696, 697, 699, 701, 702, 704, 706, 708, 710, 712, 714, 716, 718, 720, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 749, 750, 752, 753, 755, 756, 758, 759, 761, 762, 764, 765, 768, 769, 771, 772, 773, 775, 776, 778, 779, 781, 782, 784, 785, 787, 788, 789, 791, 792, 794, 795, 797, 798, 800, 801, 803, 804, 806, 807, 809, 810, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 838, 839, 842, 843, 846, 847, 850, 851, 854, 855, 858, 859, 862, 863, 864, 865, 866, 867, 868, 869, 872, 873, 876, 877, 880, 881, 884, 885, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 925, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 947, 949, 952, 954, 955, 958, 959, 962, 963, 966, 967, 970, 971, 974, 975, 978, 979, 982, 983, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 1001, 1003, 1005, 1006, 1007, 1035, 1038, 1040], "py": [0, 4, 5, 19, 116, 117, 118, 121, 122, 123, 127, 128, 130, 132, 134, 136, 137, 917, 918, 922], "noqa": [0, 4, 5, 175, 176, 177, 179, 182, 184, 185, 188, 190, 191, 193, 196, 198, 199, 202, 204, 205, 210, 213, 220, 221, 223, 226, 228, 232, 233, 237, 238, 240, 241, 245, 246, 267, 270, 368, 369, 372, 382, 385, 391, 394, 408, 411, 428, 431, 432, 435, 440, 443, 497, 500, 537, 548, 551, 564, 567, 568, 571, 582, 585, 586, 589, 595, 599, 600, 604, 741, 750, 752, 753, 755, 829, 843, 846, 847, 850, 863, 866, 954, 959, 962], "The": [0, 4, 5, 13, 14, 16, 17, 18, 20, 21, 24, 25, 27, 28, 29, 30, 31, 72, 73, 74, 75, 76, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 135, 136, 137, 148, 160, 161, 162, 165, 171, 172, 173, 175, 176, 177, 193, 196, 207, 208, 228, 232, 233, 237, 246, 250, 251, 252, 255, 272, 280, 286, 287, 293, 294, 297, 299, 302, 304, 313, 317, 318, 327, 328, 334, 335, 336, 337, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 356, 357, 358, 359, 360, 361, 362, 364, 367, 368, 369, 372, 374, 377, 378, 381, 382, 385, 387, 390, 391, 394, 396, 399, 400, 403, 404, 407, 408, 411, 412, 415, 416, 419, 420, 423, 424, 427, 428, 431, 432, 435, 436, 439, 440, 443, 444, 447, 449, 452, 453, 456, 457, 460, 461, 464, 465, 468, 469, 472, 473, 476, 477, 480, 481, 484, 485, 488, 489, 492, 493, 496, 497, 500, 501, 504, 505, 508, 513, 516, 517, 520, 521, 524, 525, 528, 529, 532, 533, 536, 539, 542, 548, 551, 556, 559, 560, 563, 564, 567, 568, 571, 573, 576, 578, 581, 582, 585, 595, 599, 600, 604, 605, 608, 609, 615, 617, 620, 621, 629, 630, 636, 638, 641, 651, 652, 653, 655, 656, 657, 658, 660, 665, 666, 667, 668, 669, 674, 675, 676, 689, 690, 692, 695, 697, 699, 702, 704, 710, 712, 714, 716, 718, 720, 723, 726, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 739, 740, 741, 742, 745, 747, 749, 750, 752, 753, 755, 756, 758, 759, 761, 762, 764, 769, 771, 773, 775, 776, 778, 779, 781, 782, 784, 785, 787, 788, 789, 791, 792, 794, 795, 797, 798, 800, 801, 803, 804, 806, 807, 809, 813, 814, 817, 819, 822, 824, 827, 829, 835, 838, 839, 842, 843, 846, 847, 850, 851, 854, 855, 858, 859, 862, 868, 881, 884, 889, 890, 891, 892, 893, 894, 895, 896, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 915, 917, 918, 922, 929, 930, 931, 932, 934, 935, 936, 940, 942, 943, 944, 947, 949, 952, 954, 955, 958, 959, 962, 963, 966, 967, 970, 971, 974, 975, 978, 979, 982, 983, 986, 987, 988, 991, 993, 996, 998, 1008, 1009, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1037, 1038, 1039], "set_backend": [0, 4, 5, 12, 122, 123, 124, 127, 246, 286, 287, 318, 359, 609, 672, 998], "ha": [0, 4, 5, 14, 15, 16, 19, 72, 73, 118, 119, 121, 122, 123, 124, 127, 128, 130, 132, 134, 136, 137, 148, 149, 175, 210, 213, 318, 337, 368, 369, 372, 539, 542, 556, 559, 690, 727, 741, 765, 768, 788, 789, 791, 792, 794, 801, 803, 829, 843, 846, 869, 872, 934, 935, 936, 940, 942, 954, 963, 966, 971, 974, 975, 978, 979, 982, 983, 986], "over": [0, 4, 14, 16, 18, 68, 69, 72, 73, 113, 114, 118, 119, 121, 123, 129, 134, 149, 741, 769, 771, 798, 800, 804, 806, 807, 809, 911, 912, 915, 917, 923, 925, 954, 959, 962, 963, 966, 967, 970, 971, 974, 975, 978, 979, 982, 983, 986, 987, 988, 991, 993, 996, 1033, 1034], "ani": [0, 4, 12, 14, 15, 16, 17, 18, 19, 20, 21, 27, 28, 29, 66, 67, 68, 69, 72, 73, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 125, 126, 127, 128, 129, 132, 134, 135, 136, 137, 148, 149, 172, 173, 175, 176, 177, 179, 182, 184, 185, 188, 190, 191, 193, 196, 198, 199, 202, 204, 205, 207, 208, 210, 213, 215, 218, 220, 221, 223, 226, 228, 232, 233, 237, 238, 240, 241, 245, 246, 267, 270, 318, 363, 368, 369, 372, 382, 385, 387, 390, 391, 394, 432, 435, 449, 452, 465, 468, 477, 480, 497, 500, 537, 548, 551, 568, 571, 573, 576, 582, 585, 586, 589, 595, 599, 609, 610, 613, 630, 631, 632, 633, 634, 637, 648, 655, 656, 657, 658, 675, 676, 690, 701, 728, 731, 738, 740, 741, 742, 745, 753, 755, 829, 863, 866, 889, 890, 891, 892, 893, 896, 899, 903, 911, 912, 915, 917, 923, 925, 934, 936, 940, 954, 959, 962, 987, 988, 991, 997, 998], "pass": [0, 4, 20, 68, 69, 72, 73, 74, 75, 76, 113, 114, 117, 118, 119, 120, 121, 122, 123, 125, 126, 129, 130, 134, 149, 246, 272, 318, 327, 362, 368, 400, 403, 609, 620, 653, 690, 726, 889, 890, 891, 1008, 1009, 1031, 1032, 1035, 1039, 1041, 1042], "jax": [0, 4, 5, 6, 15, 16, 19, 20, 117, 121, 123, 127, 128, 129, 132, 134, 137, 149, 690, 706, 708, 934, 935, 936, 940, 942, 998], "get_backend": [0, 122, 123], "specifi": [0, 5, 72, 73, 115, 117, 121, 122, 127, 128, 129, 132, 135, 136, 137, 175, 176, 177, 184, 198, 204, 205, 207, 208, 220, 221, 228, 232, 233, 237, 238, 240, 246, 252, 255, 262, 265, 318, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 352, 356, 358, 361, 362, 363, 368, 560, 563, 609, 615, 627, 637, 638, 641, 648, 688, 741, 753, 755, 769, 771, 798, 800, 801, 803, 804, 806, 807, 809, 813, 814, 817, 819, 822, 824, 827, 829, 830, 833, 835, 838, 839, 842, 847, 850, 863, 866, 869, 872, 873, 876, 885, 888, 893, 898, 900, 901, 907, 908, 909, 910, 929, 930, 931, 934, 935, 936, 940, 942, 943, 944, 947, 954, 955, 958, 971, 974, 979, 982, 987, 988, 991, 993, 996], "isn": [0, 5, 19, 135, 149], "t": [0, 5, 15, 16, 18, 19, 20, 21, 24, 25, 68, 69, 113, 114, 119, 121, 127, 132, 134, 135, 136, 137, 149, 609, 618, 728, 737, 738], "associ": [0, 5, 19, 121, 122, 124, 149, 368, 382, 385, 539, 542, 741, 773, 775, 782, 784, 810, 812], "option": [0, 5, 18, 19, 27, 28, 29, 30, 31, 68, 69, 72, 73, 74, 75, 113, 114, 116, 117, 118, 119, 121, 122, 126, 127, 128, 129, 130, 132, 137, 149, 160, 161, 162, 163, 164, 165, 166, 169, 171, 172, 173, 175, 176, 177, 179, 182, 184, 185, 188, 190, 191, 193, 196, 198, 199, 202, 204, 205, 207, 208, 210, 213, 215, 218, 220, 221, 223, 226, 228, 232, 233, 237, 238, 240, 241, 245, 246, 252, 255, 262, 265, 272, 273, 274, 275, 293, 317, 318, 337, 361, 362, 363, 368, 369, 372, 374, 377, 378, 381, 382, 385, 387, 390, 391, 394, 396, 399, 400, 403, 404, 407, 408, 411, 412, 415, 416, 419, 420, 423, 424, 427, 428, 431, 432, 435, 436, 439, 440, 443, 444, 447, 449, 452, 453, 456, 457, 460, 461, 464, 465, 468, 469, 472, 473, 476, 477, 480, 481, 484, 485, 488, 489, 492, 493, 496, 501, 504, 505, 508, 509, 512, 513, 516, 517, 520, 521, 524, 525, 528, 529, 532, 533, 536, 537, 538, 539, 542, 544, 547, 548, 551, 552, 555, 556, 559, 560, 563, 564, 567, 568, 571, 573, 576, 578, 581, 582, 585, 586, 589, 590, 594, 595, 599, 600, 604, 605, 608, 609, 615, 621, 622, 624, 627, 628, 629, 631, 632, 633, 635, 637, 638, 641, 649, 660, 662, 665, 666, 675, 676, 690, 723, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 745, 747, 749, 750, 752, 753, 755, 759, 761, 762, 764, 765, 768, 769, 771, 773, 775, 776, 778, 779, 781, 782, 784, 788, 789, 791, 792, 794, 795, 797, 798, 800, 801, 803, 804, 806, 807, 809, 810, 812, 813, 814, 817, 819, 822, 824, 827, 829, 830, 833, 835, 838, 839, 842, 843, 846, 847, 850, 851, 854, 855, 858, 859, 862, 863, 866, 868, 869, 872, 873, 876, 877, 880, 881, 884, 885, 888, 889, 890, 891, 892, 893, 894, 899, 904, 905, 911, 912, 915, 917, 918, 919, 920, 922, 923, 925, 928, 929, 930, 931, 933, 934, 942, 943, 944, 947, 949, 952, 954, 955, 958, 959, 962, 963, 966, 967, 970, 971, 974, 975, 978, 979, 982, 983, 986, 987, 988, 991, 993, 996], "str": [0, 5, 27, 28, 29, 72, 73, 127, 128, 130, 172, 173, 175, 210, 213, 246, 250, 272, 273, 274, 280, 281, 284, 288, 291, 293, 294, 297, 299, 302, 310, 311, 312, 317, 318, 334, 337, 338, 340, 343, 344, 345, 346, 362, 609, 615, 629, 631, 632, 633, 660, 665, 666, 728, 729, 730, 731, 732, 733, 734, 735, 741, 785, 787, 889, 890, 891, 892, 893, 899, 954, 955, 958], "we": [0, 5, 6, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 68, 69, 113, 114, 115, 116, 117, 118, 119, 120, 122, 124, 125, 126, 127, 129, 130, 132, 133, 134, 135, 136, 137, 148, 149, 690, 701, 998, 1004], "want": [0, 5, 15, 17, 18, 19, 68, 69, 113, 114, 121, 135, 136, 137, 149], "retriev": [0, 5, 19, 609, 615], "i": [0, 5, 19, 21, 115, 121, 132, 135, 137, 175, 176, 177, 210, 213, 368, 369, 372, 400, 403, 416, 419, 424, 427, 432, 435, 465, 468, 469, 472, 481, 484, 537, 538, 544, 547, 556, 559, 560, 563, 609, 617, 618, 690, 697, 699, 702, 704, 710, 712, 714, 716, 718, 720, 741, 747, 749, 765, 768, 773, 775, 782, 784, 789, 791, 792, 794, 801, 803, 807, 809, 829, 873, 876, 893, 896, 934, 935, 936, 940, 942, 943, 944, 947, 949, 952, 954, 955, 958, 959, 962, 963, 966, 967, 970, 975, 978, 979, 982, 983, 986], "e": [0, 5, 15, 16, 17, 19, 21, 115, 121, 126, 135, 149, 174, 175, 210, 213, 246, 251, 305, 308, 318, 334, 368, 369, 372, 400, 403, 416, 419, 424, 427, 432, 435, 457, 460, 465, 468, 469, 472, 481, 484, 501, 504, 509, 512, 537, 538, 544, 547, 556, 559, 560, 563, 690, 697, 699, 702, 704, 710, 712, 714, 716, 718, 720, 741, 747, 749, 765, 768, 773, 775, 782, 784, 789, 791, 792, 794, 807, 809, 829, 873, 876, 893, 896, 917, 922, 923, 925, 934, 935, 936, 940, 942, 943, 944, 947, 949, 952, 954, 959, 962, 963, 966, 967, 970, 971, 974, 975, 978, 979, 982, 983, 986], "one": [0, 5, 15, 16, 18, 19, 24, 25, 72, 73, 83, 84, 85, 86, 93, 94, 97, 98, 99, 100, 101, 102, 117, 119, 121, 122, 125, 126, 127, 129, 130, 131, 134, 135, 137, 149, 175, 176, 177, 210, 213, 246, 257, 260, 267, 270, 318, 347, 348, 349, 350, 362, 368, 369, 373, 382, 386, 391, 395, 537, 568, 572, 573, 577, 609, 610, 612, 613, 614, 638, 642, 659, 662, 665, 666, 680, 681, 683, 741, 742, 746, 765, 768, 769, 771, 779, 781, 785, 787, 804, 806, 807, 809, 829, 830, 834, 843, 846, 847, 850, 863, 866, 867, 869, 872, 911, 912, 914, 915, 916, 919, 921, 929, 930, 932, 934, 935, 936, 940, 941, 942, 954, 955, 958, 998], "default": [0, 5, 19, 24, 25, 27, 28, 29, 30, 31, 68, 69, 72, 73, 74, 75, 76, 113, 114, 117, 118, 119, 121, 122, 123, 126, 127, 128, 136, 160, 161, 162, 163, 164, 165, 166, 169, 171, 172, 173, 175, 176, 177, 179, 182, 184, 185, 188, 190, 191, 193, 196, 198, 199, 202, 204, 205, 207, 208, 210, 213, 215, 218, 220, 221, 223, 226, 228, 232, 233, 237, 238, 240, 241, 245, 246, 252, 255, 262, 265, 273, 274, 275, 276, 279, 318, 327, 328, 337, 338, 342, 343, 344, 345, 346, 347, 348, 349, 350, 357, 359, 360, 361, 362, 363, 366, 367, 368, 369, 372, 374, 377, 378, 381, 382, 385, 387, 390, 391, 394, 396, 399, 400, 403, 404, 407, 408, 411, 412, 415, 416, 419, 420, 423, 424, 427, 428, 431, 432, 435, 436, 439, 440, 443, 444, 447, 449, 452, 453, 456, 457, 460, 461, 464, 465, 468, 469, 472, 473, 476, 477, 480, 481, 484, 485, 488, 489, 492, 493, 496, 501, 504, 505, 508, 509, 512, 513, 516, 517, 520, 521, 524, 525, 528, 529, 532, 533, 536, 537, 538, 539, 542, 544, 547, 548, 551, 552, 555, 556, 559, 560, 563, 564, 567, 568, 571, 573, 576, 578, 581, 582, 585, 586, 589, 590, 594, 595, 599, 600, 604, 605, 608, 609, 610, 613, 615, 621, 622, 624, 627, 628, 631, 632, 633, 635, 636, 637, 638, 641, 646, 647, 648, 649, 650, 653, 654, 655, 656, 658, 659, 660, 662, 664, 665, 666, 669, 672, 675, 676, 688, 689, 690, 692, 695, 697, 699, 701, 702, 704, 706, 708, 710, 712, 714, 716, 718, 720, 723, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 745, 747, 749, 750, 752, 753, 755, 759, 761, 762, 764, 765, 768, 769, 771, 773, 775, 776, 778, 779, 781, 782, 784, 785, 787, 788, 789, 791, 792, 794, 795, 797, 798, 800, 801, 803, 804, 806, 807, 809, 810, 812, 813, 814, 817, 819, 822, 824, 827, 829, 830, 833, 835, 838, 839, 842, 843, 846, 847, 850, 851, 854, 855, 858, 859, 862, 863, 866, 868, 869, 872, 873, 876, 877, 880, 881, 884, 885, 888, 889, 890, 891, 892, 893, 894, 895, 899, 903, 904, 905, 906, 911, 912, 915, 917, 918, 919, 920, 922, 923, 925, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 940, 942, 943, 944, 947, 949, 952, 954, 955, 958, 959, 962, 963, 966, 967, 970, 971, 974, 975, 978, 979, 982, 983, 986, 987, 988, 991, 993, 996, 1008, 1009, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042], "torch": [0, 5, 12, 19, 116, 117, 121, 122, 123, 125, 126, 127, 128, 129, 132, 134, 135, 136, 137, 149, 172, 173, 246, 286, 287, 318, 359, 609, 672, 829, 843, 846, 998], "tensorflow": [0, 5, 12, 15, 16, 19, 20, 117, 121, 127, 128, 129, 132, 137, 149, 998], "mxnet": [0, 5, 15, 20, 127, 128, 129, 132, 137, 998], "either": [0, 5, 12, 18, 19, 21, 72, 73, 118, 119, 121, 122, 123, 126, 127, 128, 132, 134, 135, 149, 175, 193, 196, 368, 382, 385, 400, 403, 485, 488, 501, 504, 505, 508, 513, 516, 517, 520, 539, 542, 560, 563, 568, 571, 573, 576, 595, 599, 609, 630, 655, 659, 660, 741, 765, 768, 889, 890, 891, 892, 954, 971, 974, 979, 982, 1019, 1030, 1031, 1032], "doesn": [0, 5, 18, 21, 119, 121, 127, 132, 149], "matter": [0, 5, 14, 119], "been": [0, 5, 19, 117, 118, 121, 122, 123, 126, 127, 128, 130, 132, 148, 149, 318, 337, 609, 631, 632, 633, 917, 918], "ivy_np": [0, 5, 121], "us": [0, 5, 12, 15, 16, 17, 19, 20, 38, 39, 68, 69, 72, 73, 74, 75, 76, 83, 84, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 125, 126, 127, 128, 129, 130, 131, 132, 134, 136, 137, 148, 149, 160, 162, 163, 164, 165, 166, 169, 171, 174, 246, 280, 318, 327, 328, 353, 357, 360, 361, 362, 363, 365, 367, 368, 369, 370, 371, 387, 390, 391, 392, 393, 408, 411, 428, 431, 440, 443, 477, 480, 497, 500, 538, 544, 547, 548, 551, 564, 567, 568, 569, 570, 582, 585, 609, 637, 644, 645, 659, 665, 666, 667, 668, 675, 676, 690, 692, 695, 697, 699, 710, 712, 714, 716, 728, 734, 736, 737, 739, 740, 741, 750, 752, 753, 755, 769, 771, 813, 814, 817, 829, 843, 846, 847, 850, 855, 858, 863, 866, 877, 880, 889, 890, 891, 892, 893, 894, 896, 902, 903, 904, 906, 911, 912, 915, 929, 930, 931, 932, 934, 935, 954, 955, 958, 987, 988, 991, 998, 1019, 1027, 1030, 1031, 1032, 1033, 1034, 1035, 1037, 1038], "ivy_jax": [0, 5], "subsequ": [0, 6, 18, 117, 119, 121, 122, 125, 129, 136], "call": [0, 6, 12, 15, 21, 74, 75, 116, 117, 118, 119, 121, 122, 123, 124, 125, 126, 127, 128, 129, 132, 134, 135, 136, 137, 149, 318, 362, 609, 664, 669, 686, 690, 701, 893, 894, 899, 903, 904, 1019, 1030, 1031, 1032, 1035, 1039], "nativ": [0, 6, 27, 29, 30, 31, 72, 73, 121, 127, 129, 134, 135, 175, 215, 218, 246, 250, 251, 272, 318, 334, 335, 336, 337, 338, 357, 364, 367, 609, 653, 655, 658, 1008, 1009], "native_arrai": [0, 6, 12, 32, 33, 40, 41, 77, 78, 85, 86, 121, 160, 162, 163, 164, 165, 166, 169, 171, 175, 210, 213, 246, 267, 270, 318, 340, 356, 368, 369, 372, 387, 390, 391, 394, 408, 411, 428, 431, 432, 435, 465, 468, 477, 480, 497, 500, 538, 544, 547, 548, 551, 568, 571, 573, 576, 582, 585, 586, 589, 600, 604, 609, 610, 611, 612, 613, 614, 618, 626, 627, 634, 637, 638, 641, 674, 679, 680, 681, 683, 684, 685, 690, 692, 695, 728, 731, 734, 735, 740, 741, 747, 749, 750, 752, 753, 755, 798, 800, 813, 814, 817, 824, 827, 829, 830, 833, 843, 846, 847, 850, 855, 858, 868, 877, 880, 917, 918, 929, 930, 931, 932, 933, 934, 935, 936, 940, 954, 955, 958, 959, 962, 987, 988, 991], "1": [0, 6, 12, 15, 16, 21, 24, 25, 34, 35, 38, 39, 40, 41, 42, 43, 48, 49, 50, 51, 52, 53, 54, 55, 60, 61, 62, 63, 66, 67, 72, 73, 74, 75, 77, 78, 79, 80, 83, 84, 85, 86, 87, 88, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 105, 106, 107, 108, 111, 112, 117, 119, 121, 122, 126, 129, 130, 131, 132, 134, 135, 136, 137, 149, 160, 162, 163, 164, 165, 171, 175, 176, 177, 178, 199, 202, 204, 205, 207, 208, 210, 213, 220, 221, 223, 226, 241, 245, 246, 252, 255, 267, 268, 269, 270, 271, 281, 284, 318, 322, 325, 327, 332, 337, 338, 340, 342, 346, 350, 352, 355, 356, 363, 368, 369, 370, 371, 372, 374, 377, 378, 381, 382, 383, 384, 385, 386, 387, 390, 391, 392, 393, 394, 395, 400, 403, 408, 411, 412, 415, 424, 427, 428, 431, 432, 433, 434, 435, 436, 439, 440, 443, 457, 460, 461, 464, 465, 466, 467, 468, 473, 476, 477, 480, 493, 496, 497, 500, 501, 504, 505, 508, 509, 512, 513, 516, 537, 538, 544, 547, 548, 551, 556, 559, 564, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 582, 585, 586, 589, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 609, 610, 611, 612, 613, 614, 617, 618, 626, 627, 634, 637, 638, 639, 640, 641, 642, 656, 662, 665, 666, 672, 674, 676, 679, 680, 681, 682, 683, 684, 685, 688, 690, 692, 693, 694, 695, 696, 728, 729, 730, 731, 732, 733, 734, 735, 736, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 752, 753, 754, 755, 762, 764, 773, 775, 779, 781, 789, 791, 792, 794, 798, 800, 801, 803, 804, 805, 806, 807, 809, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 838, 843, 846, 847, 850, 851, 854, 855, 858, 859, 862, 863, 864, 865, 866, 867, 868, 869, 872, 873, 876, 877, 880, 893, 896, 905, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 958, 959, 962, 975, 978, 979, 982, 983, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1039, 1041, 1042], "type": [0, 6, 12, 18, 20, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 35, 38, 39, 40, 41, 42, 43, 48, 49, 50, 51, 52, 53, 54, 55, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 83, 84, 85, 86, 87, 88, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 121, 124, 125, 126, 128, 129, 130, 132, 134, 135, 137, 150, 151, 152, 153, 154, 155, 156, 157, 158, 160, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 283, 284, 285, 286, 287, 288, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 313, 317, 318, 334, 335, 336, 337, 338, 340, 350, 351, 352, 353, 354, 355, 356, 357, 359, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 612, 613, 614, 615, 617, 618, 620, 621, 622, 624, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 644, 645, 646, 648, 649, 651, 652, 653, 655, 656, 657, 658, 662, 665, 666, 667, 668, 670, 672, 673, 675, 676, 677, 679, 680, 681, 683, 684, 685, 687, 688, 689, 690, 692, 693, 694, 695, 696, 697, 699, 700, 702, 704, 705, 706, 707, 708, 709, 710, 712, 713, 714, 716, 717, 718, 719, 720, 721, 723, 725, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 899, 903, 904, 905, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030], "ndarrai": [0, 6, 117, 125, 127, 128, 129, 134, 175, 179, 182, 215, 218, 609, 680, 684], "Or": [0, 6, 135], "jaxlib": [0, 6, 18, 117, 127, 128, 134], "xla_extens": [0, 6, 117, 127, 128, 134], "devicearrai": [0, 6, 134], "try_import_ivy_jax": 0, "warn": [0, 7, 8, 9, 10, 11], "fals": [0, 7, 8, 9, 10, 11, 24, 25, 27, 28, 29, 30, 31, 34, 35, 40, 41, 48, 49, 62, 63, 64, 65, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 119, 121, 126, 129, 130, 135, 136, 137, 166, 168, 170, 176, 178, 179, 181, 183, 185, 187, 189, 190, 192, 193, 195, 197, 199, 201, 203, 204, 206, 207, 209, 210, 212, 214, 215, 217, 219, 220, 222, 223, 225, 227, 228, 229, 231, 233, 234, 236, 238, 239, 241, 242, 244, 246, 252, 254, 255, 256, 257, 259, 261, 262, 264, 266, 267, 269, 270, 271, 276, 277, 278, 279, 281, 283, 285, 288, 290, 292, 294, 296, 298, 299, 301, 303, 305, 307, 309, 317, 318, 337, 338, 349, 353, 354, 357, 362, 365, 367, 368, 369, 371, 373, 374, 376, 378, 380, 382, 384, 386, 387, 389, 391, 393, 395, 396, 398, 400, 402, 404, 406, 408, 410, 411, 412, 414, 416, 418, 420, 422, 424, 426, 428, 430, 432, 434, 436, 438, 440, 442, 444, 446, 448, 449, 451, 453, 455, 457, 459, 461, 463, 465, 467, 469, 471, 473, 475, 476, 477, 479, 480, 481, 483, 484, 485, 487, 488, 489, 491, 492, 493, 495, 496, 497, 499, 500, 501, 503, 505, 507, 509, 511, 513, 515, 517, 519, 521, 523, 525, 527, 528, 529, 531, 532, 533, 535, 539, 541, 543, 544, 546, 548, 550, 551, 552, 554, 556, 558, 560, 562, 564, 566, 568, 570, 572, 573, 575, 577, 578, 580, 582, 584, 586, 588, 590, 591, 593, 595, 596, 598, 600, 601, 603, 605, 607, 609, 610, 611, 612, 613, 614, 617, 618, 622, 623, 627, 630, 634, 636, 638, 640, 642, 646, 653, 655, 656, 658, 659, 670, 672, 673, 680, 681, 683, 687, 688, 690, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 727, 741, 742, 743, 744, 745, 746, 765, 767, 769, 770, 771, 792, 794, 807, 808, 809, 814, 816, 818, 819, 821, 823, 824, 826, 828, 829, 830, 832, 834, 835, 837, 839, 841, 843, 845, 847, 849, 851, 853, 855, 857, 859, 861, 863, 865, 867, 868, 869, 871, 873, 875, 877, 879, 881, 883, 885, 887, 889, 890, 891, 892, 893, 894, 895, 899, 903, 904, 905, 906, 912, 914, 916, 917, 918, 923, 924, 926, 929, 930, 931, 933, 934, 935, 936, 937, 939, 940, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 957, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 1008, 1009, 1031, 1032, 1035, 1036, 1037, 1038, 1039, 1040], "try_import_ivy_mxnet": 0, "try_import_ivy_numpi": 0, "try_import_ivy_tf": 0, "try_import_ivy_torch": 0, "unset_backend": [0, 123], "unset": [0, 12, 123, 132, 134], "adjust": [0, 12, 954, 975, 978, 983, 986], "dict": [0, 12, 27, 28, 29, 30, 31, 72, 73, 74, 75, 76, 126, 130, 135, 136, 318, 327, 328, 337, 340, 343, 344, 345, 346, 609, 615, 631, 632, 633, 893, 895, 896, 899, 902, 905, 906], "previous": [0, 12, 18, 21, 121, 122, 132, 609, 620], "otherwis": [0, 12, 24, 25, 27, 28, 29, 30, 31, 72, 73, 117, 121, 125, 127, 128, 132, 134, 175, 176, 177, 246, 252, 255, 267, 270, 273, 274, 275, 318, 337, 368, 481, 484, 485, 488, 489, 492, 609, 619, 686, 690, 706, 708, 723, 741, 742, 745, 750, 752, 804, 806, 807, 809, 889, 890, 891, 893, 906, 929, 930, 931, 933, 954, 959, 962, 963, 966, 967, 970, 971, 974, 975, 978, 979, 982, 983, 986, 987, 988, 991, 993, 996], "implement": [0, 12, 20, 117, 118, 121, 122, 123, 124, 125, 126, 127, 128, 129, 132, 134, 135, 136, 137, 148, 149, 246, 252, 255, 305, 308, 318, 363, 368, 369, 372, 374, 377, 378, 381, 387, 390, 391, 394, 396, 399, 400, 403, 436, 439, 440, 443, 457, 460, 461, 464, 501, 504, 505, 508, 509, 512, 513, 516, 539, 542, 556, 559, 560, 563, 573, 576, 578, 581, 595, 599, 600, 604, 741, 756, 758, 934, 935, 936, 940, 942, 943, 944, 947, 949, 952, 954, 959, 962, 963, 966, 967, 970, 998], "wa": [0, 12, 15, 72, 73, 119, 132, 134, 609, 686, 893, 906, 954, 959, 962, 963, 966, 967, 970, 971, 974, 975, 978, 979, 982, 983, 986, 987, 988, 991, 993, 996], "last": [0, 12, 16, 19, 72, 73, 119, 121, 123, 130, 149, 160, 165, 318, 337, 690, 727, 728, 738, 741, 747, 749, 753, 755, 769, 771, 801, 803, 804, 806, 813, 819, 822, 824, 827, 829, 847, 850, 863, 866, 868, 873, 876, 943, 944, 947, 949, 952, 987, 988, 991, 993, 996, 1019, 1029], "henc": [0, 12, 121, 934, 935, 936, 940, 942], "here": [0, 12, 18, 19, 20, 116, 117, 119, 121, 126, 132, 133, 134, 135, 136, 137, 148, 149], "tensor": [0, 12, 14, 72, 73, 116, 117, 122, 123, 125, 127, 128, 129, 132, 134, 135, 136, 137, 149, 175, 204, 205, 207, 208, 246, 276, 279, 368, 408, 411, 537, 538, 609, 662, 665, 666, 728, 736, 738, 741, 798, 800, 829, 843, 846, 859, 862, 868, 917, 918, 929, 932, 998, 1019, 1027, 1029], "howev": [0, 12, 15, 18, 20, 117, 118, 121, 122, 123, 125, 126, 127, 128, 129, 134, 135, 136, 137, 149], "befor": [0, 12, 18, 19, 20, 72, 73, 118, 121, 125, 127, 128, 129, 132, 135, 149, 318, 362, 368, 605, 608, 728, 739, 740, 889, 890, 891, 893, 905, 934, 935, 936, 940, 942, 954, 971, 974, 979, 982], "becom": [0, 12, 14, 16, 19, 119, 126, 132, 137, 149, 829, 830, 833], "swap": [0, 12, 829, 877, 880], "python": [0, 12, 13, 14, 15, 18, 19, 21, 121, 130, 132, 134, 135, 149, 175, 176, 177, 318, 357, 367, 368, 560, 563, 998, 1004], "framework": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 14, 15, 16, 23, 25, 26, 27, 28, 29, 30, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69, 71, 72, 73, 75, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94, 96, 98, 100, 102, 104, 106, 108, 110, 112, 114, 115, 117, 120, 122, 123, 124, 125, 128, 131, 134, 137, 148, 149, 151, 152, 153, 154, 155, 156, 157, 158, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 890, 891, 892, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 916, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 930, 931, 932, 933, 935, 936, 937, 938, 939, 940, 941, 942, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 1002, 1003, 1004, 1006, 1007, 1008, 1009, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1032, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1042, 1043, 1045], "op": [0, 12, 116, 132, 149], "eagertensor": [0, 12], "def": [1, 20, 116, 117, 119, 121, 122, 126, 127, 128, 129, 130, 132, 134, 135, 136, 137, 247, 248, 249, 319, 326, 329, 691, 998, 1011, 1014, 1017], "support": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 14, 15, 16, 23, 25, 26, 28, 29, 30, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69, 71, 72, 73, 75, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94, 96, 98, 100, 102, 104, 106, 108, 110, 112, 114, 117, 118, 119, 121, 122, 124, 125, 126, 127, 128, 129, 131, 132, 134, 135, 137, 151, 152, 153, 154, 155, 156, 157, 158, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 173, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 890, 891, 892, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 916, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 930, 931, 932, 933, 935, 936, 937, 938, 939, 940, 941, 942, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 1002, 1003, 1004, 1006, 1007, 1009, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1032, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1042, 1043, 1045], "backend": [4, 5, 6, 12, 14, 19, 20, 27, 29, 31, 72, 73, 115, 117, 118, 120, 121, 122, 124, 125, 126, 127, 128, 129, 133, 134, 137, 246, 286, 287, 293, 317, 318, 353, 355, 365, 609, 650, 653, 654, 660, 690, 697, 699, 702, 704, 710, 712, 714, 716, 718, 720, 726, 998, 1004, 1008, 1009, 1035, 1036, 1037, 1038, 1039, 1040], "ml": [13, 15, 16, 17, 131, 132, 133, 135, 136, 137, 148, 998, 1004], "explos": [13, 15, 998], "A": [13, 14, 15, 16, 21, 72, 73, 74, 75, 76, 115, 121, 122, 126, 127, 128, 132, 135, 149, 175, 190, 191, 215, 218, 318, 327, 328, 362, 368, 552, 555, 609, 645, 679, 741, 779, 781, 788, 789, 791, 792, 794, 829, 868, 873, 876, 893, 894, 896, 898, 900, 901, 902, 903, 904, 907, 908, 909, 910, 954, 955, 958, 987, 988, 991, 993, 996, 998, 1041, 1042], "huge": [13, 15, 135, 998], "number": [13, 14, 18, 24, 25, 72, 73, 74, 75, 76, 119, 121, 126, 128, 129, 132, 135, 137, 172, 173, 174, 175, 176, 177, 179, 182, 190, 191, 204, 205, 207, 208, 210, 213, 215, 218, 246, 257, 260, 280, 281, 284, 288, 291, 294, 297, 299, 302, 305, 308, 318, 354, 355, 356, 368, 382, 385, 400, 403, 432, 435, 465, 468, 469, 472, 537, 538, 539, 542, 556, 559, 560, 563, 564, 567, 568, 571, 605, 608, 609, 610, 613, 636, 645, 646, 661, 685, 689, 728, 739, 741, 753, 755, 756, 758, 773, 775, 788, 792, 794, 804, 806, 829, 830, 833, 839, 842, 851, 854, 855, 858, 863, 866, 868, 873, 876, 881, 884, 885, 888, 889, 890, 891, 892, 917, 918, 927, 929, 932, 934, 935, 936, 940, 954, 959, 962, 963, 966, 967, 970, 971, 974, 975, 978, 979, 982, 983, 986, 987, 988, 991, 993, 996, 998, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1028, 1029, 1030], "tool": [13, 16, 19, 133, 137, 148, 149, 998], "have": [13, 14, 15, 16, 18, 19, 20, 21, 24, 25, 72, 73, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 132, 133, 134, 135, 136, 137, 148, 149, 160, 161, 162, 163, 164, 165, 166, 169, 171, 175, 176, 177, 179, 182, 184, 185, 188, 190, 191, 193, 196, 198, 199, 202, 204, 205, 207, 208, 210, 213, 220, 221, 223, 226, 228, 232, 233, 237, 238, 240, 241, 245, 246, 252, 255, 257, 260, 262, 265, 281, 284, 318, 363, 368, 369, 372, 374, 377, 378, 381, 382, 385, 387, 390, 391, 394, 396, 399, 400, 403, 404, 407, 408, 411, 412, 415, 416, 419, 420, 423, 424, 427, 428, 431, 432, 435, 436, 439, 440, 443, 444, 447, 449, 452, 453, 456, 457, 460, 461, 464, 465, 468, 469, 472, 473, 476, 477, 480, 481, 484, 485, 488, 489, 492, 493, 496, 497, 500, 501, 504, 505, 508, 509, 512, 513, 516, 517, 520, 521, 524, 525, 528, 529, 532, 533, 536, 537, 538, 539, 542, 544, 547, 548, 551, 552, 555, 556, 559, 560, 563, 564, 567, 568, 571, 573, 576, 578, 581, 582, 585, 586, 589, 590, 594, 595, 599, 600, 604, 605, 608, 609, 621, 622, 624, 627, 631, 632, 633, 635, 638, 641, 649, 662, 665, 666, 690, 706, 708, 723, 726, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 739, 740, 741, 742, 745, 747, 749, 750, 752, 753, 755, 756, 758, 759, 761, 762, 764, 765, 768, 769, 771, 773, 775, 776, 778, 779, 781, 782, 784, 785, 787, 788, 789, 791, 792, 794, 795, 797, 798, 800, 801, 803, 804, 806, 807, 809, 810, 812, 813, 814, 817, 819, 822, 824, 827, 829, 830, 833, 835, 838, 839, 842, 843, 846, 847, 850, 851, 854, 855, 858, 859, 862, 863, 866, 869, 872, 873, 876, 877, 880, 881, 884, 885, 888, 911, 912, 915, 917, 918, 919, 920, 922, 923, 925, 928, 929, 930, 931, 932, 933, 934, 935, 936, 940, 942, 943, 944, 947, 949, 952, 954, 959, 962, 963, 966, 967, 970, 971, 974, 975, 978, 979, 982, 983, 986, 987, 988, 991, 993, 996, 998], "explod": [13, 14, 998], "onto": [13, 14, 318, 347, 348, 893, 899, 905, 998], "scene": [13, 14, 115, 131, 133, 690, 697, 699, 702, 704, 710, 712, 714, 716, 718, 720, 998], "b": [13, 16, 17, 24, 25, 74, 75, 79, 80, 83, 84, 85, 86, 87, 88, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 105, 106, 111, 112, 115, 119, 122, 123, 126, 131, 132, 133, 135, 136, 137, 147, 246, 267, 269, 270, 271, 318, 340, 368, 369, 371, 372, 373, 382, 384, 385, 386, 387, 390, 391, 393, 394, 395, 408, 411, 428, 431, 432, 434, 435, 440, 443, 465, 467, 468, 477, 480, 497, 500, 537, 544, 547, 548, 551, 564, 567, 568, 570, 571, 572, 573, 575, 576, 577, 582, 585, 586, 589, 595, 596, 598, 599, 600, 601, 603, 604, 609, 610, 612, 613, 614, 617, 618, 626, 627, 634, 637, 638, 640, 641, 642, 680, 681, 683, 684, 685, 690, 692, 694, 695, 696, 728, 731, 734, 735, 740, 741, 742, 744, 745, 746, 747, 749, 750, 752, 753, 755, 779, 781, 789, 791, 798, 800, 810, 812, 813, 814, 816, 817, 818, 819, 821, 823, 824, 826, 828, 829, 830, 832, 833, 834, 843, 846, 847, 850, 855, 858, 863, 865, 866, 867, 873, 876, 877, 880, 893, 896, 911, 912, 914, 915, 916, 917, 919, 921, 922, 923, 925, 929, 931, 932, 933, 934, 936, 937, 939, 940, 943, 944, 947, 954, 955, 958, 959, 962, 987, 988, 990, 991, 992, 993, 995, 997, 998, 1004], "why": [13, 15, 19, 117, 126, 129, 134, 998], "unifi": [13, 15, 72, 73, 125, 132, 149, 318, 347, 348, 349, 350, 362, 998], "should": [13, 15, 18, 19, 20, 21, 72, 73, 74, 75, 76, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 134, 135, 136, 172, 173, 175, 210, 213, 228, 232, 233, 237, 246, 262, 265, 318, 368, 369, 372, 374, 377, 378, 381, 382, 385, 387, 390, 391, 394, 396, 399, 400, 403, 404, 407, 408, 411, 412, 415, 416, 419, 420, 423, 424, 427, 428, 431, 432, 435, 436, 439, 440, 443, 444, 447, 457, 460, 461, 464, 465, 468, 481, 484, 485, 488, 489, 492, 493, 496, 501, 504, 505, 508, 513, 516, 517, 520, 521, 524, 525, 528, 529, 532, 533, 536, 539, 542, 548, 551, 556, 559, 560, 563, 568, 571, 573, 576, 578, 581, 582, 585, 586, 589, 590, 594, 595, 599, 600, 604, 605, 608, 609, 620, 653, 662, 690, 697, 699, 702, 704, 710, 712, 714, 716, 718, 720, 728, 740, 741, 742, 745, 747, 749, 750, 752, 753, 755, 762, 764, 765, 768, 773, 775, 779, 781, 782, 784, 785, 787, 789, 791, 792, 794, 798, 800, 801, 803, 804, 806, 807, 809, 829, 859, 862, 917, 928, 929, 930, 931, 934, 935, 936, 940, 942, 954, 955, 958, 959, 962, 963, 966, 971, 974, 975, 978, 979, 982, 983, 986, 998], "them": [13, 14, 15, 16, 121, 123, 125, 126, 132, 134, 135, 136, 149, 998], "c": [13, 15, 16, 17, 83, 84, 101, 102, 115, 119, 122, 126, 131, 132, 133, 135, 149, 368, 548, 551, 568, 570, 571, 609, 617, 618, 626, 685, 690, 692, 695, 697, 699, 702, 704, 710, 712, 714, 716, 718, 720, 728, 734, 829, 873, 876, 893, 896, 919, 921, 929, 932, 954, 955, 958, 975, 978, 983, 986, 998, 1004], "standard": [13, 115, 116, 117, 118, 120, 121, 125, 129, 149, 175, 176, 177, 179, 182, 184, 185, 188, 190, 191, 193, 196, 198, 199, 202, 204, 205, 210, 213, 220, 221, 223, 226, 228, 232, 233, 237, 238, 240, 241, 245, 246, 267, 270, 281, 284, 368, 369, 372, 382, 385, 387, 390, 391, 394, 408, 411, 428, 431, 432, 435, 440, 443, 465, 468, 497, 500, 537, 548, 551, 564, 567, 568, 571, 573, 576, 582, 585, 586, 589, 595, 599, 600, 604, 741, 750, 752, 753, 755, 829, 843, 846, 847, 850, 863, 866, 911, 912, 915, 917, 922, 934, 935, 936, 940, 943, 944, 947, 954, 959, 962, 975, 978, 983, 986, 987, 988, 991, 998, 1004, 1033, 1034], "re": [13, 14, 15, 17, 18, 19, 20, 21, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 134, 137, 149, 318, 362, 609, 631, 741, 798, 800, 829, 863, 866, 929, 933, 998], "collabor": [13, 14, 15, 998], "consortium": [13, 15, 998, 1004], "data": [13, 15, 24, 25, 26, 72, 73, 74, 75, 76, 115, 116, 117, 118, 122, 124, 126, 128, 129, 134, 175, 176, 177, 179, 182, 184, 185, 188, 190, 191, 193, 196, 198, 199, 202, 204, 205, 210, 213, 215, 218, 220, 221, 223, 226, 228, 232, 233, 237, 238, 240, 241, 245, 250, 251, 252, 255, 262, 265, 267, 270, 272, 276, 279, 280, 281, 284, 286, 287, 288, 291, 293, 294, 297, 299, 302, 304, 313, 317, 318, 320, 321, 322, 323, 324, 325, 330, 331, 332, 334, 368, 369, 372, 374, 377, 378, 381, 382, 385, 387, 390, 391, 394, 396, 399, 400, 403, 404, 407, 408, 411, 412, 415, 416, 419, 420, 423, 424, 427, 428, 431, 432, 435, 436, 439, 440, 443, 444, 447, 449, 452, 457, 460, 461, 464, 465, 468, 469, 472, 473, 476, 477, 480, 481, 484, 485, 488, 489, 492, 493, 496, 497, 500, 501, 504, 505, 508, 513, 516, 517, 520, 521, 524, 525, 528, 529, 532, 533, 536, 537, 539, 542, 548, 551, 556, 559, 560, 563, 568, 571, 573, 576, 578, 581, 582, 585, 586, 589, 590, 594, 595, 599, 600, 604, 605, 608, 609, 617, 618, 655, 656, 658, 677, 690, 706, 708, 726, 728, 737, 741, 742, 745, 747, 749, 750, 752, 753, 755, 756, 758, 759, 761, 762, 764, 765, 768, 773, 775, 776, 778, 779, 781, 782, 784, 785, 787, 789, 791, 792, 794, 798, 800, 801, 803, 804, 806, 807, 809, 829, 843, 846, 847, 850, 851, 854, 859, 862, 863, 866, 869, 872, 873, 876, 917, 928, 929, 930, 931, 932, 943, 944, 947, 954, 959, 962, 963, 966, 967, 970, 971, 974, 975, 978, 979, 982, 983, 986, 987, 988, 991, 993, 996, 998, 1004, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030], "api": [13, 14, 18, 19, 115, 117, 118, 119, 121, 122, 124, 125, 127, 128, 129, 131, 133, 135, 149, 175, 176, 177, 179, 182, 184, 185, 188, 190, 191, 193, 196, 198, 199, 202, 204, 205, 210, 213, 220, 221, 223, 226, 228, 232, 233, 237, 238, 240, 241, 245, 246, 267, 270, 368, 369, 372, 382, 385, 387, 390, 391, 394, 408, 411, 428, 431, 432, 435, 440, 443, 465, 468, 497, 500, 537, 548, 551, 564, 567, 568, 571, 573, 576, 582, 585, 586, 589, 595, 599, 600, 604, 741, 750, 752, 753, 755, 829, 843, 846, 847, 850, 863, 866, 934, 935, 936, 940, 943, 944, 947, 954, 959, 962, 987, 988, 991, 998, 1004], "open": [14, 15, 16, 17, 18, 21, 118, 148, 175, 176, 177, 917, 919, 920, 923, 925, 998], "project": [14, 15, 16, 18, 19, 21, 116, 121, 123, 134, 136, 148, 149, 917, 918, 922], "grown": 14, "consider": [14, 117, 119], "recent": [14, 15, 18, 19, 121], "year": [14, 16, 149, 998], "especi": [14, 18], "deep": [14, 17, 19, 20, 72, 73, 131, 135, 998], "learn": [14, 15, 18, 20, 115, 122, 131, 137, 148, 368, 473, 476, 690, 697, 699, 702, 704, 710, 712, 714, 716, 718, 720, 889, 890, 891, 892, 998, 1035, 1036, 1037, 1038, 1039, 1040], "can": [14, 15, 16, 17, 18, 19, 115, 116, 117, 118, 119, 120, 121, 122, 123, 126, 127, 128, 129, 130, 131, 132, 134, 135, 136, 137, 148, 149, 175, 179, 182, 215, 218, 246, 267, 270, 318, 360, 361, 362, 741, 762, 764, 829, 859, 862, 917, 919, 920, 998, 1004], "seen": [14, 15, 119, 121, 134, 135], "rapidli": 14, "increas": [14, 318, 342, 346, 350, 829, 839, 842, 885, 888, 893, 905], "github": [14, 19, 20, 118, 121], "repo": [14, 15, 16, 18, 19, 120, 132, 134, 135, 136, 137, 148, 998, 1004], "contain": [14, 18, 19, 20, 21, 24, 25, 27, 30, 31, 40, 41, 70, 71, 72, 73, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 117, 118, 119, 121, 122, 127, 129, 131, 132, 133, 136, 137, 149, 160, 163, 164, 166, 169, 175, 176, 177, 179, 182, 184, 185, 188, 190, 191, 193, 196, 198, 199, 202, 204, 205, 207, 208, 210, 213, 215, 220, 221, 223, 226, 228, 232, 233, 237, 238, 240, 241, 245, 246, 252, 257, 262, 267, 270, 276, 281, 288, 294, 299, 305, 318, 339, 340, 343, 352, 356, 368, 369, 372, 374, 377, 378, 381, 382, 385, 387, 390, 391, 394, 396, 399, 400, 403, 404, 407, 408, 411, 412, 415, 416, 419, 420, 423, 424, 427, 428, 431, 432, 435, 436, 439, 440, 443, 444, 447, 449, 452, 453, 457, 460, 461, 464, 465, 468, 469, 472, 473, 476, 477, 480, 481, 484, 485, 488, 489, 492, 493, 496, 497, 500, 501, 504, 505, 508, 509, 512, 513, 516, 517, 520, 521, 524, 525, 528, 529, 532, 533, 536, 537, 538, 539, 542, 544, 547, 548, 551, 552, 556, 559, 560, 563, 564, 567, 568, 571, 573, 576, 578, 581, 582, 585, 586, 589, 590, 594, 595, 599, 600, 604, 605, 608, 609, 610, 611, 613, 615, 618, 621, 622, 624, 626, 627, 634, 637, 638, 641, 648, 657, 679, 680, 682, 684, 685, 690, 692, 695, 697, 702, 706, 710, 714, 718, 728, 731, 734, 735, 740, 741, 742, 745, 747, 749, 750, 752, 753, 755, 756, 758, 759, 761, 762, 764, 765, 768, 773, 775, 776, 778, 779, 781, 782, 784, 785, 787, 789, 791, 792, 794, 795, 797, 798, 800, 801, 803, 804, 806, 807, 809, 813, 814, 817, 819, 822, 824, 827, 829, 830, 833, 835, 839, 843, 846, 847, 850, 851, 854, 855, 858, 859, 863, 866, 868, 869, 873, 877, 880, 881, 885, 889, 890, 891, 892, 893, 906, 911, 912, 915, 917, 918, 919, 922, 923, 925, 929, 930, 931, 932, 933, 934, 935, 936, 940, 942, 943, 944, 947, 949, 954, 955, 958, 959, 962, 963, 966, 967, 970, 971, 974, 975, 978, 979, 982, 983, 986, 987, 988, 991, 993, 996, 998, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1028, 1029, 1030, 1031, 1032, 1035, 1039, 1041, 1042], "term": [14, 19, 126, 728, 738, 1019, 1029], "time": [14, 15, 16, 18, 19, 20, 117, 121, 122, 126, 127, 132, 135, 137, 149, 690, 697, 699, 710, 712, 728, 738, 829, 881, 884, 889, 890, 891, 892, 929, 930, 931, 934, 935, 936, 940, 1019, 1030, 1031, 1032], "These": [14, 15, 16, 19, 117, 118, 119, 121, 122, 126, 127, 129, 132, 133, 135, 136, 137, 149, 741, 756, 758, 998, 1004], "ar": [14, 15, 16, 17, 18, 19, 20, 21, 24, 25, 27, 28, 29, 72, 73, 74, 75, 76, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 148, 149, 150, 158, 175, 176, 177, 318, 327, 328, 352, 356, 358, 362, 368, 436, 439, 525, 528, 529, 532, 564, 567, 573, 576, 595, 599, 609, 610, 613, 617, 618, 619, 643, 649, 650, 654, 661, 663, 677, 690, 727, 728, 737, 741, 747, 749, 765, 768, 769, 771, 773, 775, 782, 784, 792, 794, 795, 797, 804, 806, 829, 830, 833, 847, 850, 863, 866, 893, 895, 899, 905, 917, 922, 923, 925, 929, 930, 931, 932, 934, 935, 998, 1041, 1042], "written": [14, 18, 116, 117, 118, 121, 125, 129, 132, 134, 137, 149], "mani": [14, 15, 16, 18, 19, 20, 72, 73, 117, 118, 119, 121, 122, 124, 125, 126, 127, 128, 129, 130, 132, 134, 135, 149, 829, 868], "differ": [14, 15, 16, 18, 19, 72, 73, 74, 75, 76, 115, 116, 117, 118, 119, 121, 122, 125, 126, 128, 129, 130, 132, 133, 134, 135, 136, 137, 149, 246, 281, 284, 318, 339, 340, 343, 344, 368, 382, 385, 539, 542, 590, 594, 728, 737, 829, 873, 876, 954, 971, 974, 979, 982, 998], "while": [14, 15, 18, 19, 72, 73, 74, 75, 76, 119, 121, 123, 129, 130, 136, 137, 149, 368, 525, 528, 529, 532, 934, 935, 954, 963, 966], "thi": [14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 32, 33, 34, 35, 38, 39, 40, 41, 42, 43, 48, 49, 50, 51, 52, 53, 54, 55, 60, 61, 66, 67, 70, 71, 72, 73, 74, 75, 76, 79, 80, 83, 84, 85, 86, 87, 88, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 105, 106, 111, 112, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 148, 149, 166, 167, 168, 170, 175, 176, 177, 179, 180, 182, 184, 185, 186, 188, 190, 191, 193, 194, 196, 198, 199, 200, 202, 204, 205, 207, 208, 210, 213, 215, 216, 218, 220, 221, 223, 224, 226, 228, 230, 232, 233, 235, 237, 238, 240, 241, 243, 245, 246, 267, 268, 269, 270, 271, 318, 342, 346, 350, 357, 362, 367, 368, 369, 370, 371, 372, 373, 382, 383, 384, 385, 386, 387, 390, 391, 392, 393, 394, 395, 408, 411, 424, 427, 428, 431, 432, 433, 434, 435, 440, 443, 461, 464, 465, 466, 467, 468, 497, 500, 525, 528, 529, 532, 537, 548, 551, 560, 563, 564, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 582, 585, 586, 589, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 609, 610, 611, 612, 614, 636, 637, 638, 639, 640, 642, 653, 664, 669, 680, 681, 682, 683, 690, 692, 693, 694, 696, 697, 699, 702, 704, 706, 708, 710, 712, 714, 716, 718, 720, 726, 727, 728, 731, 737, 740, 741, 742, 743, 744, 745, 746, 750, 752, 753, 755, 769, 771, 788, 814, 815, 816, 818, 819, 820, 821, 823, 824, 825, 826, 828, 829, 830, 831, 832, 834, 843, 846, 847, 850, 859, 862, 863, 864, 865, 866, 867, 873, 876, 893, 899, 905, 906, 911, 912, 913, 914, 915, 916, 919, 921, 929, 930, 934, 935, 936, 937, 938, 939, 940, 942, 943, 944, 947, 954, 959, 962, 963, 966, 975, 978, 983, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 997, 998, 1004, 1031, 1032, 1035, 1036, 1037, 1038, 1039, 1040], "wonder": [14, 16, 134], "thing": [14, 15, 16, 18, 19, 20, 121, 123, 134, 135], "research": [14, 148], "develop": [14, 15, 16, 17, 18, 19, 20, 148, 149, 998], "also": [14, 15, 17, 18, 19, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 38, 39, 40, 41, 42, 43, 48, 49, 50, 51, 52, 53, 54, 55, 60, 61, 66, 67, 70, 71, 72, 73, 79, 80, 83, 84, 85, 86, 87, 88, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 105, 106, 111, 112, 115, 116, 117, 118, 119, 121, 122, 124, 125, 126, 127, 128, 129, 132, 134, 135, 136, 137, 148, 149, 166, 167, 168, 170, 175, 176, 177, 179, 180, 182, 184, 185, 186, 188, 190, 191, 193, 194, 196, 198, 199, 200, 202, 204, 205, 207, 208, 210, 213, 215, 216, 220, 221, 223, 224, 226, 228, 230, 232, 233, 235, 237, 238, 240, 241, 243, 245, 246, 267, 268, 269, 270, 271, 368, 369, 370, 371, 372, 373, 382, 383, 384, 385, 386, 387, 390, 391, 392, 393, 394, 395, 408, 411, 428, 431, 432, 433, 434, 435, 440, 443, 465, 466, 467, 468, 537, 548, 551, 564, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 582, 585, 586, 589, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 609, 610, 611, 612, 614, 637, 638, 639, 640, 642, 653, 680, 681, 682, 683, 690, 692, 693, 694, 696, 697, 699, 728, 731, 737, 740, 741, 742, 743, 744, 745, 746, 750, 752, 753, 755, 814, 815, 816, 818, 819, 820, 821, 823, 824, 825, 826, 828, 829, 830, 831, 832, 834, 843, 846, 847, 850, 863, 864, 865, 866, 867, 889, 890, 891, 892, 893, 894, 895, 903, 904, 905, 911, 912, 913, 914, 915, 916, 919, 921, 934, 935, 936, 937, 938, 939, 940, 943, 944, 947, 954, 959, 962, 987, 988, 989, 990, 991, 992, 993, 994, 995, 997, 1019, 1029], "consid": [14, 15, 72, 73, 116, 122, 133, 134, 135, 368, 525, 528, 529, 532, 934, 935, 936, 940, 942], "speed": [14, 121], "evolv": 14, "sharabl": 14, "code": [14, 15, 16, 18, 19, 20, 21, 72, 73, 74, 75, 76, 87, 88, 115, 117, 118, 119, 121, 122, 123, 124, 125, 126, 129, 130, 131, 132, 133, 134, 135, 136, 137, 147, 149, 160, 162, 163, 164, 165, 166, 169, 171, 318, 340, 363, 368, 428, 431, 586, 589, 690, 692, 694, 695, 696, 727, 728, 734, 735, 934, 935, 936, 940, 943, 944, 947, 954, 955, 958, 998, 1004], "significantli": 14, "hinder": [14, 117], "librari": [14, 15, 16, 24, 25, 132, 137, 147, 149, 318, 363, 368, 461, 464, 525, 528, 529, 532, 741, 756, 758, 934, 935, 936, 940, 942, 954, 959, 962, 963, 966, 967, 970, 998], "outdat": 14, "month": 14, "rigor": [14, 121], "maintain": [14, 19, 943, 944, 947, 949, 952], "against": [14, 72, 73, 121, 149, 246, 257, 260, 741, 765, 768, 769, 771, 773, 775, 782, 784, 929, 930], "newest": 14, "version": [14, 15, 16, 18, 118, 132, 134, 741, 756, 758, 998], "For": [14, 15, 16, 18, 19, 20, 21, 24, 25, 115, 116, 117, 118, 119, 121, 122, 123, 124, 125, 126, 127, 128, 129, 132, 134, 135, 136, 137, 148, 149, 175, 176, 177, 210, 213, 368, 369, 372, 374, 377, 378, 381, 382, 385, 387, 390, 391, 394, 396, 399, 400, 403, 432, 435, 436, 439, 440, 443, 457, 460, 461, 464, 465, 468, 501, 504, 505, 508, 513, 516, 517, 520, 539, 542, 556, 559, 560, 563, 564, 567, 573, 576, 578, 581, 582, 585, 595, 599, 600, 604, 605, 608, 690, 706, 708, 726, 741, 792, 794, 801, 803, 829, 830, 833, 873, 876, 934, 935, 936, 940, 942, 954, 959, 962, 967, 970, 979, 982, 1008, 1009], "softwar": [14, 15, 18, 19], "pipelin": [14, 125, 137], "where": [14, 15, 16, 17, 18, 19, 20, 21, 24, 25, 72, 73, 74, 75, 118, 121, 122, 123, 125, 126, 127, 128, 129, 130, 132, 135, 136, 137, 149, 175, 198, 199, 202, 210, 213, 368, 400, 403, 457, 460, 509, 512, 539, 542, 556, 559, 609, 649, 653, 662, 690, 727, 741, 756, 758, 773, 775, 782, 784, 785, 787, 792, 794, 795, 797, 801, 803, 804, 806, 829, 830, 833, 839, 842, 843, 846, 851, 854, 873, 876, 885, 888, 893, 894, 904, 917, 918, 929, 932, 954, 975, 978, 983, 986, 987, 988, 991, 993, 996, 998], "rapid": [14, 15, 18], "prototyp": 14, "vital": [14, 137], "signific": [14, 15, 149], "bottleneck": 14, "As": [14, 19, 68, 69, 113, 114, 117, 121, 122, 125, 126, 127, 128, 129, 132, 134, 135, 136, 149, 934, 935, 936, 940, 942], "new": [14, 15, 16, 17, 18, 19, 20, 21, 24, 25, 72, 73, 79, 80, 115, 116, 118, 119, 121, 124, 126, 127, 129, 131, 134, 137, 148, 175, 184, 193, 196, 198, 199, 202, 220, 221, 223, 226, 238, 240, 241, 245, 246, 313, 368, 404, 407, 509, 512, 552, 555, 609, 631, 632, 633, 636, 637, 638, 641, 665, 666, 667, 668, 675, 676, 690, 697, 699, 702, 704, 710, 712, 714, 716, 718, 720, 829, 843, 846, 859, 862, 873, 876, 893, 898, 909, 910, 911, 912, 915, 998, 1008, 1009, 1019, 1029, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040], "futur": [14, 16, 18, 19, 134, 149, 741, 756, 758], "avail": [14, 18, 19, 72, 73, 118, 128, 149, 318, 337, 353, 354, 355, 365, 609, 632], "specif": [14, 20, 72, 73, 117, 121, 122, 125, 126, 127, 128, 129, 132, 133, 134, 136, 137, 148, 149, 246, 305, 308, 318, 360, 363, 368, 525, 528, 529, 532, 609, 631, 632, 633, 660, 741, 756, 758, 798, 800, 829, 873, 876, 889, 890, 891, 892, 917, 918, 954, 959, 962, 963, 966, 967, 970, 998, 1001, 1003, 1004, 1031, 1032], "quickli": [14, 16, 18, 19, 135, 136], "obsolet": [14, 16], "user": [14, 15, 18, 19, 21, 115, 121, 123, 126, 129, 131, 149, 1019, 1030, 1031, 1032], "constantli": 14, "invent": 14, "wheel": 14, "our": [14, 15, 17, 18, 19, 68, 69, 113, 114, 119, 121, 126, 130, 131, 134, 135, 136, 137, 149, 998], "desir": [14, 72, 73, 246, 252, 255, 267, 270, 318, 363, 609, 649, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030], "provid": [14, 18, 19, 72, 73, 117, 118, 119, 121, 122, 125, 126, 127, 128, 129, 132, 136, 148, 149, 172, 173, 175, 210, 213, 246, 273, 274, 275, 293, 305, 308, 317, 318, 337, 609, 630, 662, 666, 690, 697, 699, 702, 704, 710, 712, 714, 716, 718, 720, 741, 804, 806, 829, 847, 850, 873, 876, 929, 930, 954, 975, 978, 983, 986, 987, 988, 991, 993, 996, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1028, 1029, 1030, 1035, 1036, 1037, 1038, 1039, 1040], "simultan": [14, 16], "all": [14, 15, 16, 17, 18, 19, 20, 21, 27, 28, 29, 30, 31, 66, 67, 68, 69, 72, 73, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 134, 135, 136, 137, 148, 149, 150, 158, 172, 173, 175, 176, 177, 228, 232, 233, 237, 318, 327, 352, 358, 609, 610, 613, 617, 618, 643, 663, 680, 684, 728, 738, 741, 789, 791, 798, 800, 807, 809, 829, 847, 850, 863, 866, 889, 890, 891, 892, 893, 894, 895, 904, 905, 906, 917, 918, 923, 925, 987, 992, 998, 1001, 1003], "modern": [14, 15], "simpl": [14, 18, 19, 116, 118, 119, 121, 122, 125, 126, 127, 128, 129, 132, 134, 136, 137, 149, 609, 634], "scalabl": [14, 132], "manner": [14, 27, 30, 31, 72, 73, 116, 118, 121, 128, 135, 148, 149, 893, 905], "must": [14, 16, 18, 19, 20, 24, 25, 72, 73, 74, 75, 76, 116, 117, 118, 119, 122, 125, 126, 127, 128, 132, 136, 137, 160, 161, 162, 163, 164, 165, 166, 169, 171, 175, 176, 177, 179, 182, 184, 185, 188, 190, 191, 193, 196, 198, 199, 202, 204, 205, 207, 208, 210, 213, 220, 221, 223, 226, 228, 232, 233, 237, 238, 240, 241, 245, 246, 252, 255, 257, 260, 262, 265, 318, 347, 348, 349, 350, 362, 363, 368, 369, 372, 374, 377, 378, 381, 382, 385, 387, 390, 391, 394, 396, 399, 400, 403, 404, 407, 408, 411, 412, 415, 416, 419, 420, 423, 424, 427, 428, 431, 432, 435, 436, 439, 440, 443, 444, 447, 449, 452, 453, 456, 457, 460, 461, 464, 465, 468, 469, 472, 473, 476, 477, 480, 481, 484, 485, 488, 489, 492, 493, 496, 497, 500, 501, 504, 505, 508, 509, 512, 513, 516, 517, 520, 521, 524, 525, 528, 529, 532, 533, 536, 537, 538, 539, 542, 544, 547, 548, 551, 552, 555, 556, 559, 560, 563, 564, 567, 568, 571, 573, 576, 578, 581, 582, 585, 586, 589, 590, 594, 595, 599, 600, 604, 605, 608, 609, 621, 622, 624, 627, 631, 632, 633, 635, 638, 641, 649, 662, 665, 666, 690, 723, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 739, 740, 741, 742, 745, 747, 749, 750, 752, 753, 755, 756, 758, 759, 761, 762, 764, 765, 768, 769, 771, 773, 775, 776, 778, 779, 781, 782, 784, 785, 787, 788, 789, 791, 792, 794, 795, 797, 798, 800, 801, 803, 804, 806, 807, 809, 810, 812, 813, 814, 817, 819, 822, 824, 827, 829, 830, 833, 835, 838, 839, 842, 843, 846, 847, 850, 851, 854, 855, 858, 859, 862, 863, 866, 869, 872, 873, 876, 877, 880, 881, 884, 885, 888, 911, 912, 915, 917, 918, 919, 920, 922, 923, 925, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 940, 942, 943, 944, 947, 949, 952, 954, 959, 962, 963, 966, 967, 970, 971, 974, 975, 978, 979, 982, 983, 986, 987, 988, 991, 993, 996, 1035, 1039], "determin": [14, 24, 25, 72, 73, 118, 122, 126, 127, 128, 246, 267, 270, 272, 280, 293, 294, 297, 299, 302, 317, 318, 353, 354, 355, 365, 368, 374, 377, 378, 381, 382, 385, 387, 390, 391, 394, 396, 399, 400, 403, 404, 407, 408, 411, 416, 419, 420, 423, 424, 427, 428, 431, 436, 439, 440, 443, 444, 447, 457, 460, 461, 464, 481, 484, 485, 488, 489, 492, 501, 504, 505, 508, 513, 516, 517, 520, 533, 536, 539, 542, 556, 559, 560, 563, 573, 576, 578, 581, 582, 585, 595, 599, 600, 604, 609, 610, 613, 617, 618, 648, 650, 654, 655, 656, 657, 658, 677, 689, 690, 706, 708, 728, 739, 741, 742, 745, 747, 749, 750, 752, 753, 755, 762, 764, 765, 768, 773, 775, 779, 781, 782, 784, 788, 789, 791, 801, 803, 804, 806, 807, 809, 889, 890, 891, 892, 934, 935, 936, 940, 942, 987, 988, 991, 993, 996], "exactli": [14, 16, 119, 126, 128, 998, 1004], "common": [14, 20, 72, 73, 119, 122, 124, 126, 128, 130, 149], "ground": [14, 121], "li": 14, "between": [14, 72, 73, 74, 75, 76, 117, 119, 121, 122, 125, 126, 131, 133, 134, 135, 137, 148, 175, 176, 177, 246, 281, 284, 368, 400, 403, 556, 559, 813, 814, 817, 819, 822, 824, 827, 829, 843, 846, 873, 876, 893, 899, 917, 919, 920, 934, 935, 936, 940, 942, 998, 1035, 1037], "find": [14, 18, 19, 72, 73, 121, 132, 135, 934, 935, 936, 940, 942, 998], "exist": [14, 15, 18, 20, 21, 24, 25, 72, 73, 74, 75, 118, 119, 120, 121, 122, 123, 124, 129, 132, 149, 609, 630, 1035, 1039], "essenti": [14, 15, 20, 119, 122, 128], "order": [14, 18, 19, 21, 72, 73, 74, 75, 76, 117, 118, 119, 123, 125, 126, 127, 128, 134, 135, 137, 149, 368, 400, 403, 690, 697, 699, 702, 704, 710, 712, 714, 716, 718, 720, 741, 756, 758, 769, 771, 792, 794, 795, 797, 807, 809, 829, 847, 850, 889, 890, 891, 929, 932, 934, 935, 936, 940, 942, 943, 944, 947, 949, 952, 1041, 1042], "design": [14, 15, 115, 129, 132, 134, 149], "univers": 14, "abstract": [14, 126, 136, 149, 318, 333, 1035, 1039], "In": [14, 16, 18, 19, 116, 117, 118, 119, 121, 122, 123, 126, 127, 128, 129, 130, 132, 134, 135, 136, 137, 148, 149, 318, 357, 363, 364, 367, 368, 382, 385, 539, 542, 560, 563, 609, 615, 653, 829, 859, 862, 917, 923, 925, 998], "search": [14, 18, 27, 30, 31, 59, 72, 73, 104, 116, 119, 121, 930, 931, 932, 933], "languag": [14, 16, 132], "first": [14, 15, 18, 19, 21, 24, 25, 117, 119, 121, 122, 125, 126, 132, 134, 135, 137, 172, 173, 175, 204, 205, 207, 208, 246, 304, 313, 318, 337, 349, 368, 382, 385, 408, 411, 416, 419, 420, 423, 424, 427, 428, 431, 449, 452, 469, 472, 477, 480, 493, 496, 497, 500, 517, 520, 521, 524, 529, 532, 533, 536, 539, 542, 548, 551, 556, 559, 590, 594, 609, 617, 690, 701, 741, 747, 749, 753, 755, 756, 758, 765, 768, 779, 781, 785, 787, 792, 794, 798, 800, 804, 806, 829, 835, 838, 863, 866, 873, 876, 877, 880, 889, 890, 891, 892, 893, 894, 903, 904, 917, 928, 929, 930, 931, 934, 935, 936, 940, 1019, 1030, 1031, 1032, 1035, 1039], "see": [14, 17, 18, 19, 20, 117, 120, 122, 126, 128, 134, 135, 148, 149, 175, 176, 177, 193, 196, 204, 205, 207, 208, 246, 262, 265, 305, 308, 368, 382, 385, 408, 411, 416, 419, 420, 423, 424, 427, 428, 431, 444, 447, 461, 464, 493, 496, 517, 520, 529, 532, 533, 536, 539, 542, 548, 551, 556, 559, 560, 563, 590, 594, 741, 773, 775, 782, 784, 789, 791, 804, 806, 807, 809, 929, 931, 934, 935, 936, 940, 942, 954, 959, 962, 963, 966, 967, 970, 971, 974, 975, 978, 979, 982, 983, 986, 987, 988, 991, 993, 996, 998], "clear": [14, 15, 16, 19, 20, 119, 127, 128, 132, 134, 318, 336], "front": [14, 131, 132, 135, 998, 1004], "runner": 14, "look": [14, 18, 19, 21, 116, 117, 119, 121, 122, 123, 126, 127, 128, 132, 134, 136, 137, 998], "littl": [14, 134], "deeper": [14, 19, 115, 131, 318, 342, 346, 350, 893, 904, 905], "follow": [14, 15, 18, 19, 20, 21, 72, 73, 116, 118, 119, 121, 123, 125, 126, 127, 128, 129, 131, 132, 134, 135, 136, 137, 149, 246, 288, 291, 318, 362, 368, 560, 563, 609, 651, 652, 653, 675, 676, 690, 697, 699, 702, 704, 710, 712, 714, 716, 718, 720, 728, 739, 740, 741, 785, 787, 807, 809, 893, 899, 905, 934, 935, 936, 940, 942, 998, 1019, 1029, 1035, 1039], "same": [14, 16, 18, 19, 21, 27, 28, 29, 72, 73, 116, 117, 119, 121, 122, 125, 126, 128, 129, 130, 132, 134, 136, 137, 175, 176, 177, 185, 188, 199, 202, 210, 213, 223, 226, 228, 232, 233, 237, 241, 245, 246, 252, 255, 257, 260, 262, 265, 318, 327, 328, 362, 368, 369, 372, 382, 385, 412, 415, 432, 435, 465, 468, 539, 542, 560, 563, 564, 567, 568, 571, 605, 608, 609, 635, 637, 638, 641, 662, 665, 666, 690, 706, 708, 723, 728, 729, 730, 731, 732, 733, 734, 735, 740, 741, 742, 745, 747, 749, 750, 752, 753, 755, 756, 758, 759, 761, 762, 764, 776, 778, 782, 784, 785, 787, 789, 791, 792, 794, 801, 803, 804, 806, 829, 835, 838, 847, 850, 851, 854, 863, 866, 869, 872, 873, 876, 889, 890, 891, 893, 906, 934, 935, 936, 940, 942, 943, 944, 947, 949, 952, 954, 955, 958, 959, 962, 963, 966, 967, 970, 971, 974, 979, 982, 983, 986, 998, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026], "core": [14, 18, 20, 128, 132, 137, 318, 354, 998], "principl": 14, "oper": [14, 18, 20, 24, 25, 72, 73, 74, 75, 118, 119, 121, 122, 125, 126, 128, 129, 135, 136, 175, 204, 205, 207, 208, 246, 305, 308, 368, 382, 385, 424, 427, 428, 431, 477, 480, 544, 547, 548, 551, 560, 563, 586, 589, 609, 619, 631, 632, 633, 677, 690, 697, 699, 702, 704, 710, 712, 714, 716, 718, 720, 728, 729, 730, 731, 732, 733, 734, 735, 737], "expos": [14, 132, 136, 609, 625], "almost": [14, 19, 126, 133, 135], "ident": [14, 16, 72, 73, 122, 124, 126, 134, 135, 149, 318, 352, 893, 906, 998], "uniqu": [14, 121, 122, 126, 149, 318, 327, 328, 889, 890, 891, 892, 893, 899, 934, 935, 936, 940, 941, 942], "syntax": [14, 15, 130], "There": [14, 18, 19, 119, 122, 125, 126, 127, 130, 132, 135, 149], "onli": [14, 17, 18, 19, 24, 25, 72, 73, 116, 117, 119, 121, 122, 123, 125, 126, 127, 128, 129, 132, 134, 135, 136, 137, 147, 149, 318, 358, 368, 525, 528, 529, 532, 741, 765, 768, 785, 787, 829, 847, 850, 893, 894, 895, 903, 904, 929, 930, 931, 954, 963, 966, 998, 1035, 1036, 1037, 1038, 1039, 1040], "so": [14, 15, 18, 19, 22, 23, 24, 25, 27, 30, 31, 32, 33, 34, 35, 38, 39, 40, 41, 42, 43, 48, 49, 50, 51, 52, 53, 54, 55, 60, 61, 66, 67, 70, 71, 72, 73, 79, 80, 83, 84, 85, 86, 87, 88, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 105, 106, 111, 112, 116, 117, 118, 119, 121, 124, 125, 127, 128, 129, 131, 132, 133, 134, 135, 136, 137, 149, 150, 158, 166, 167, 168, 170, 179, 180, 185, 186, 193, 194, 199, 200, 215, 216, 223, 224, 228, 230, 233, 235, 241, 243, 267, 268, 269, 271, 369, 370, 371, 373, 382, 383, 384, 386, 391, 392, 393, 395, 432, 433, 434, 465, 466, 467, 568, 569, 570, 572, 573, 574, 575, 577, 595, 596, 597, 598, 600, 601, 602, 603, 610, 611, 612, 614, 638, 639, 640, 642, 680, 681, 682, 683, 692, 693, 694, 696, 742, 743, 744, 746, 814, 815, 816, 818, 819, 820, 821, 823, 824, 825, 826, 828, 830, 831, 832, 834, 863, 864, 865, 867, 893, 894, 904, 912, 913, 914, 916, 919, 921, 936, 937, 938, 939, 988, 989, 990, 992, 993, 994, 995, 997, 998], "wai": [14, 15, 18, 121, 123, 129, 134, 135, 136, 137, 149], "manipul": [14, 53, 98, 116, 137, 148, 830, 833, 835, 838, 839, 842, 843, 846, 847, 850, 851, 854, 855, 858, 859, 862, 863, 866, 868, 869, 872, 873, 876, 877, 880, 881, 884, 885, 888], "unsurprisingli": [14, 119], "fundament": [14, 126, 132], "consist": [14, 72, 73, 125, 129, 318, 350, 741, 756, 758, 954, 955, 958, 1031, 1032], "each": [14, 15, 16, 19, 20, 72, 73, 74, 75, 76, 115, 116, 117, 118, 119, 120, 121, 122, 124, 125, 126, 127, 129, 130, 131, 132, 134, 135, 137, 148, 149, 160, 163, 164, 166, 169, 175, 210, 213, 246, 257, 260, 318, 327, 328, 339, 340, 341, 342, 343, 344, 345, 349, 362, 368, 369, 372, 374, 377, 378, 381, 382, 385, 387, 390, 391, 394, 396, 399, 400, 403, 404, 407, 408, 411, 412, 415, 416, 419, 420, 423, 424, 427, 428, 431, 432, 435, 436, 439, 440, 443, 444, 447, 449, 452, 457, 460, 461, 464, 465, 468, 469, 472, 473, 476, 477, 480, 481, 484, 485, 488, 489, 492, 493, 496, 497, 500, 501, 504, 505, 508, 509, 512, 513, 516, 517, 520, 521, 524, 525, 528, 529, 532, 533, 536, 539, 542, 544, 547, 548, 551, 552, 555, 556, 559, 560, 563, 564, 567, 568, 571, 573, 576, 578, 581, 582, 585, 586, 589, 590, 594, 595, 599, 600, 604, 605, 608, 609, 610, 613, 690, 697, 699, 702, 704, 710, 712, 714, 716, 718, 720, 728, 729, 730, 731, 732, 733, 734, 735, 736, 741, 742, 745, 747, 749, 750, 752, 756, 758, 765, 768, 773, 775, 776, 778, 782, 784, 789, 791, 792, 794, 829, 839, 842, 855, 858, 863, 866, 868, 873, 876, 881, 884, 885, 888, 893, 899, 906, 917, 918, 929, 932, 934, 935, 936, 940, 954, 955, 958, 998, 1004, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1030, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042], "veri": [14, 15, 18, 19, 116, 117, 119, 121, 122, 126, 128, 129, 133, 135, 136, 137, 149, 998], "similar": [14, 116, 121, 126, 127, 128, 135, 149, 368, 560, 563, 728, 739, 1019, 1030], "convent": [14, 148, 741, 765, 768, 954, 955, 958], "those": [14, 18, 19, 20, 72, 73, 121, 126, 132, 137, 175, 176, 177, 690, 726, 741, 785, 787, 792, 794, 829, 830, 833], "introduc": [14, 126, 135, 829, 863, 866, 934, 935], "2006": 14, "layer": [14, 47, 92, 116, 118, 132, 133, 136, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 911, 912, 915, 998, 1010, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1039, 1041, 1042], "therefor": [14, 19, 116, 117, 118, 119, 120, 121, 122, 125, 126, 127, 128, 129, 132, 134, 136, 149, 175, 176, 177, 179, 182, 184, 185, 188, 190, 191, 193, 196, 198, 199, 202, 204, 205, 207, 208, 210, 213, 220, 221, 223, 226, 228, 232, 233, 237, 238, 240, 241, 245, 246, 267, 270, 368, 369, 372, 382, 385, 387, 390, 391, 394, 432, 435, 465, 468, 537, 548, 551, 568, 571, 573, 576, 582, 585, 586, 589, 595, 599, 609, 637, 728, 731, 740, 741, 742, 745, 753, 755, 829, 863, 866, 911, 912, 915, 934, 936, 940, 954, 959, 962, 987, 988, 991], "present": [14, 19, 72, 73, 117, 120, 126, 127, 128, 129, 132], "itself": [14, 18, 19, 117, 126, 129, 136, 148, 149, 609, 615, 893, 905], "cut": 14, "cloth": 14, "adher": [14, 15, 118, 120, 132, 137], "semant": [14, 132, 137, 368, 560, 563], "round": [14, 15, 16, 18, 19, 20, 21, 38, 39, 83, 84, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 132, 134, 135, 136, 137, 148, 368, 382, 385, 432, 435, 465, 468, 469, 472, 539, 542, 582, 585, 605, 608, 998], "up": [14, 15, 16, 17, 19, 20, 21, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 132, 133, 134, 135, 136, 137, 148, 149], "hopefulli": [14, 15, 16, 18, 19, 20, 21, 115, 116, 117, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 132, 134, 135, 136, 137, 148], "paint": [14, 132], "pictur": [14, 132], "how": [14, 16, 17, 18, 19, 20, 21, 115, 116, 117, 118, 119, 120, 122, 123, 124, 125, 126, 127, 128, 129, 131, 133, 134, 135, 136, 137, 148, 149, 998, 1004, 1019, 1030, 1031, 1032], "pleas": [14, 15, 16, 18, 19, 20, 21, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 132, 134, 135, 136, 137, 148, 998], "check": [14, 15, 16, 18, 19, 27, 28, 29, 30, 31, 72, 73, 121, 126, 131, 132, 134, 135, 136, 137, 148, 246, 272, 286, 287, 293, 294, 297, 299, 302, 317, 318, 357, 367, 609, 619, 634, 648, 655, 656, 657, 658, 677, 689, 690, 706, 708, 741, 756, 758, 893, 894, 903, 904, 905, 998], "out": [14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 32, 33, 34, 35, 38, 39, 40, 41, 48, 49, 50, 51, 52, 53, 54, 55, 62, 63, 64, 65, 66, 67, 70, 71, 72, 73, 74, 75, 77, 78, 79, 80, 83, 84, 85, 86, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 107, 108, 109, 110, 111, 112, 115, 116, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 130, 131, 132, 134, 135, 136, 137, 148, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 175, 176, 177, 178, 179, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 212, 214, 215, 217, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 252, 253, 254, 255, 256, 262, 263, 264, 265, 266, 276, 278, 318, 363, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 621, 622, 623, 624, 626, 627, 628, 631, 632, 633, 635, 637, 638, 639, 640, 641, 642, 649, 662, 665, 666, 690, 723, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 788, 789, 790, 791, 792, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 928, 929, 930, 931, 933, 934, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 1019, 1027], "discuss": [14, 15, 16, 17, 18, 19, 20, 21, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 132, 134, 135, 136, 137, 148, 149, 998], "faq": [14, 15, 16, 132, 134, 135, 136, 137, 148], "reach": [14, 15, 16, 18, 19, 20, 21, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 132, 134, 135, 136, 137, 148, 318, 342, 346, 350, 893, 905], "discord": [14, 15, 16, 18, 19, 20, 21, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 132, 134, 135, 136, 137, 148, 998], "you": [14, 15, 16, 17, 18, 19, 20, 21, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 131, 132, 134, 135, 136, 137, 148, 149, 998, 1004], "question": [14, 15, 16, 18, 19, 119, 121, 132, 134, 135, 136, 137, 148, 149, 998], "With": [15, 16, 18, 24, 25, 40, 41, 42, 43, 60, 61, 72, 73, 74, 75, 83, 84, 85, 86, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 105, 106, 119, 121, 132, 160, 162, 163, 164, 165, 166, 169, 171, 175, 210, 213, 246, 267, 270, 318, 340, 356, 368, 369, 372, 373, 382, 385, 386, 387, 390, 391, 394, 395, 408, 411, 428, 431, 432, 435, 440, 443, 465, 468, 477, 480, 497, 500, 537, 538, 544, 547, 548, 551, 564, 567, 568, 571, 572, 573, 576, 577, 582, 585, 586, 589, 595, 596, 599, 600, 601, 604, 609, 610, 611, 612, 613, 614, 618, 626, 627, 634, 637, 638, 641, 642, 674, 679, 680, 681, 682, 683, 684, 685, 690, 692, 693, 695, 728, 731, 734, 735, 740, 741, 742, 745, 746, 747, 749, 750, 752, 753, 755, 769, 771, 798, 800, 813, 814, 817, 818, 819, 823, 824, 827, 828, 829, 830, 833, 834, 843, 846, 847, 850, 855, 858, 863, 866, 867, 868, 877, 880, 893, 896, 911, 912, 914, 915, 916, 917, 918, 919, 921, 922, 923, 925, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 943, 944, 947, 954, 955, 958, 959, 962, 987, 988, 991], "central": 15, "goal": [15, 20], "being": [15, 16, 18, 19, 72, 73, 117, 119, 121, 124, 125, 126, 127, 128, 129, 130, 132, 135, 148, 149, 175, 176, 177, 609, 664, 669, 934, 941, 998], "would": [15, 18, 19, 21, 115, 117, 118, 119, 121, 123, 124, 125, 126, 129, 131, 132, 134, 136, 137, 149, 160, 165, 318, 363, 998], "entir": [15, 16, 19, 72, 73, 119, 120, 121, 125, 126, 129, 134, 135, 136, 137, 149, 318, 362, 954, 959, 962, 963, 966, 967, 970, 971, 974, 975, 978, 979, 982, 983, 986, 987, 988, 991, 993, 996, 1019, 1028], "forgiven": 15, "rais": [15, 19, 72, 73, 129, 130, 132, 134, 246, 262, 265, 368, 457, 460, 556, 559, 609, 619, 644, 653, 667, 676, 686, 690, 727, 741, 765, 768, 772, 804, 806, 829, 869, 872, 873, 876, 929, 932, 954, 959, 962, 967, 970, 987, 988, 991, 993, 996, 1031, 1032, 1035, 1039], "an": [15, 16, 18, 19, 20, 21, 24, 25, 27, 30, 31, 68, 69, 72, 73, 113, 114, 116, 117, 118, 119, 121, 122, 123, 125, 126, 127, 128, 129, 130, 132, 134, 135, 136, 137, 148, 149, 160, 163, 164, 166, 169, 174, 175, 176, 177, 179, 182, 184, 185, 188, 190, 191, 193, 196, 198, 199, 202, 204, 205, 207, 208, 210, 213, 215, 218, 220, 221, 223, 226, 228, 232, 233, 237, 238, 240, 241, 245, 246, 252, 255, 257, 260, 262, 265, 267, 270, 281, 284, 299, 302, 305, 308, 318, 340, 344, 363, 368, 369, 372, 374, 377, 378, 381, 382, 385, 387, 390, 391, 394, 396, 399, 400, 403, 404, 407, 408, 411, 412, 415, 416, 419, 420, 423, 424, 427, 428, 431, 432, 435, 436, 439, 440, 443, 444, 447, 449, 452, 457, 460, 461, 464, 465, 468, 469, 472, 473, 476, 477, 480, 481, 484, 485, 488, 489, 492, 493, 496, 497, 500, 501, 504, 505, 508, 509, 512, 513, 516, 517, 520, 521, 524, 525, 528, 529, 532, 533, 536, 537, 538, 539, 542, 544, 547, 548, 551, 556, 559, 560, 563, 564, 567, 568, 571, 573, 576, 578, 581, 582, 585, 586, 589, 590, 594, 595, 599, 600, 604, 605, 608, 609, 620, 621, 622, 624, 626, 635, 636, 637, 649, 653, 655, 656, 657, 658, 680, 684, 685, 686, 690, 706, 708, 723, 725, 726, 727, 728, 731, 740, 741, 742, 745, 747, 749, 750, 752, 753, 755, 756, 758, 759, 761, 762, 764, 765, 768, 772, 773, 775, 776, 778, 782, 784, 785, 787, 788, 789, 791, 792, 794, 801, 803, 804, 806, 807, 809, 829, 830, 833, 835, 838, 839, 842, 843, 846, 847, 850, 851, 854, 859, 862, 863, 866, 868, 869, 872, 873, 876, 877, 880, 881, 884, 885, 888, 893, 899, 911, 912, 915, 917, 919, 920, 928, 929, 932, 933, 934, 935, 936, 940, 941, 942, 943, 944, 947, 949, 952, 954, 955, 958, 959, 962, 963, 966, 967, 970, 971, 974, 975, 978, 979, 982, 983, 986, 987, 988, 991, 993, 996, 998, 1008, 1009, 1031, 1032, 1035, 1036, 1037, 1039], "eyebrow": 15, "somehow": 15, "pytorch": [15, 16, 20, 117, 122, 127, 128, 129, 132, 134, 137, 149, 690, 697, 699, 702, 704, 710, 712, 714, 716, 718, 720, 998, 1035, 1036, 1037, 1038, 1039, 1040], "other": [15, 18, 19, 24, 25, 72, 73, 74, 75, 116, 118, 119, 121, 122, 125, 126, 129, 130, 132, 134, 136, 137, 147, 148, 149, 172, 173, 175, 176, 177, 368, 461, 464, 609, 610, 613, 615, 690, 701, 917, 923, 925, 934, 941, 954, 975, 978, 983, 986, 998], "strong": [15, 149], "industri": 15, "back": [15, 125, 131, 132, 134, 149, 998, 1004, 1031, 1032, 1035, 1039], "momentum": 15, "won": [15, 16, 19, 137], "ad": [15, 18, 19, 20, 113, 114, 116, 117, 118, 119, 121, 122, 124, 125, 126, 127, 129, 132, 136, 149, 609, 675, 676, 741, 756, 758, 829, 843, 846, 1041, 1042], "just": [15, 16, 18, 19, 118, 119, 121, 122, 129, 132, 134, 135, 149, 954, 955, 958, 1019, 1028], "make": [15, 16, 18, 19, 20, 116, 117, 118, 119, 120, 121, 122, 125, 126, 127, 128, 129, 130, 132, 134, 135, 137, 318], "problem": [15, 19, 125, 134], "even": [15, 16, 18, 19, 117, 118, 122, 127, 128, 134, 135, 136, 137, 149, 368, 556, 559, 564, 567], "wors": 15, "rather": [15, 72, 73, 116, 118, 121, 126, 137, 149, 175, 176, 177, 318, 362, 609, 655, 656, 658, 690, 706, 708], "funni": 15, "comic": 15, "strip": 15, "easi": [15, 18, 19, 122, 126], "feasibl": 15, "space": [15, 175, 176, 177, 204, 205, 207, 208, 609, 636, 690, 727], "case": [15, 18, 19, 20, 27, 30, 31, 72, 73, 74, 75, 76, 116, 117, 118, 119, 121, 122, 123, 125, 126, 127, 128, 129, 130, 132, 134, 136, 137, 149, 175, 210, 213, 318, 357, 364, 367, 368, 369, 372, 374, 377, 378, 381, 382, 385, 387, 390, 391, 394, 396, 399, 400, 403, 428, 431, 432, 435, 436, 439, 440, 443, 457, 460, 461, 464, 465, 468, 501, 504, 505, 508, 513, 516, 517, 520, 539, 542, 556, 559, 560, 563, 564, 567, 568, 571, 573, 576, 578, 581, 582, 585, 595, 599, 600, 604, 605, 608, 609, 653, 665, 666, 741, 769, 771, 829, 859, 862, 893, 896, 902, 954, 959, 962, 963, 966, 967, 970, 975, 978, 979, 982, 983, 986, 1019, 1030, 1031, 1032, 1035, 1039], "unlik": [15, 119, 126, 318], "charger": 15, "charact": [15, 130], "encod": [15, 135, 609, 636], "instant": [15, 998], "messag": [15, 19, 130, 132, 134, 1044, 1045], "much": [15, 19, 116, 125, 126, 129, 132, 134, 135], "doe": [15, 19, 21, 72, 73, 115, 116, 117, 118, 119, 121, 122, 123, 127, 129, 132, 134, 135, 149, 368, 428, 431, 609, 653, 829, 868], "mandat": [15, 121, 129], "adopt": [15, 19, 125], "continu": [15, 16, 120, 121, 130, 149], "own": [15, 16, 18, 118, 121, 130, 132, 149], "signatur": [15, 116, 117, 118, 119, 121, 126, 127, 128, 129, 175, 176, 177, 179, 182, 184, 185, 188, 190, 191, 193, 196, 198, 199, 202, 204, 205, 220, 221, 223, 226, 228, 232, 233, 237, 238, 240, 241, 245, 246, 267, 270, 368, 369, 372, 387, 390, 391, 394, 428, 431, 432, 435, 440, 443, 465, 468, 537, 548, 551, 573, 576, 582, 585, 586, 589, 741, 753, 755, 829, 843, 846, 863, 866, 934, 935, 936, 940, 943, 944, 947, 954, 959, 962], "replac": [15, 19, 21, 72, 73, 119, 121, 124, 126, 127, 128, 132, 134, 137, 149, 609, 665, 666, 829, 830, 833, 917, 918], "your": [15, 16, 17, 18, 20, 21, 116, 118, 135, 136, 149, 998], "10": [15, 18, 21, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 119, 121, 126, 132, 134, 135, 175, 198, 207, 208, 209, 318, 368, 408, 411, 412, 415, 440, 443, 477, 480, 497, 500, 505, 508, 582, 585, 609, 627, 637, 664, 669, 690, 710, 711, 712, 713, 728, 734, 741, 750, 752, 753, 755, 779, 781, 798, 800, 829, 847, 850, 855, 858, 868, 911, 912, 914, 915, 916, 917, 918, 919, 920, 921, 929, 932, 934, 935, 954, 955, 958, 959, 962, 1035, 1037], "100": [15, 16, 101, 102, 121, 135, 136, 137, 149, 368, 582, 585, 919, 921, 998], "despit": [15, 126, 128], "distinct": [15, 118, 126, 129, 131, 934, 935, 936, 940, 942, 998], "still": [15, 72, 73, 118, 121, 127, 134, 136, 149, 998], "believ": [15, 19], "share": [15, 72, 73, 119, 121, 122, 123, 126, 132, 246, 313], "bring": [15, 121, 132, 133], "benefit": [15, 16, 18, 19, 125, 126, 129, 134, 135, 149], "unrel": [15, 19], "what": [15, 16, 19, 115, 117, 118, 119, 121, 124, 126, 130, 131, 132, 134, 135, 136, 137, 148, 149, 998], "again": [15, 16, 19, 116, 119, 121, 126, 129, 135, 137, 149], "contrari": 15, "bumpi": 15, "road": 15, "allud": [15, 135], "most": [15, 18, 19, 72, 73, 116, 117, 121, 122, 125, 126, 127, 128, 129, 130, 132, 134, 135, 136, 149, 741, 756, 758], "technolog": 15, "sector": [15, 368, 378, 381, 391, 394, 404, 407], "full": [15, 16, 19, 24, 25, 74, 75, 117, 118, 121, 127, 132, 149, 175, 246, 281, 284, 368, 477, 480, 497, 500, 728, 734, 741, 785, 787, 789, 791, 792, 794], "success": 15, "reason": [15, 19, 116, 119, 122, 125, 126, 127, 129, 132, 134, 368, 560, 563], "build": [15, 17, 18, 122, 131, 133, 136, 137, 149, 934, 935, 936, 940, 942, 998, 1019, 1030, 1031, 1032], "custom": [15, 121, 136], "comput": [15, 16, 18, 24, 25, 72, 73, 121, 122, 126, 132, 135, 149, 318, 362, 368, 382, 385, 408, 411, 420, 423, 428, 431, 449, 452, 453, 456, 473, 476, 477, 480, 493, 496, 497, 500, 521, 524, 525, 528, 529, 532, 533, 536, 539, 542, 544, 547, 548, 551, 609, 621, 622, 624, 627, 628, 690, 692, 695, 697, 699, 701, 702, 704, 710, 712, 714, 716, 718, 720, 723, 725, 727, 728, 729, 730, 731, 732, 733, 734, 735, 737, 739, 741, 742, 745, 747, 749, 756, 758, 759, 761, 762, 764, 765, 768, 769, 771, 785, 787, 788, 789, 791, 792, 794, 804, 806, 807, 809, 813, 814, 817, 819, 822, 824, 827, 893, 899, 934, 935, 936, 940, 942, 954, 955, 958, 959, 962, 963, 966, 967, 970, 971, 974, 975, 978, 979, 982, 983, 986], "thank": [15, 135], "interoper": 15, "compon": [15, 132, 690, 727], "bio": [15, 18], "hardwar": [15, 18], "initi": [15, 19, 72, 73, 74, 75, 76, 121, 123, 127, 128, 318, 728, 738, 1012, 1013, 1015, 1016, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1028, 1029, 1030, 1031, 1032, 1035, 1039], "pcie": 15, "interfac": [15, 137, 149], "motherboard": 15, "raid": 15, "storag": [15, 135], "virtual": [15, 19, 21], "bluetooth": 15, "wireless": 15, "exchang": 15, "btx": 15, "form": [15, 17, 27, 28, 29, 30, 31, 72, 73, 121, 122, 136, 137, 175, 179, 182, 215, 218, 228, 232, 233, 237, 609, 615, 690, 697, 699, 702, 704, 710, 712, 714, 716, 718, 720, 728, 741, 742, 745, 750, 752, 753, 755, 756, 758, 759, 761, 762, 764, 773, 775, 776, 778, 782, 784, 785, 787, 789, 791, 792, 794, 795, 797, 801, 803, 893, 895, 905], "factor": [15, 318, 327, 360, 361, 362, 690, 692, 695, 697, 699, 710, 712, 714, 716, 728, 729, 730, 731, 732, 733, 734, 735, 741, 742, 745, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1035, 1036, 1037, 1038], "sata": 15, "connect": [15, 18, 136, 137, 1019, 1029, 1030], "host": [15, 149], "bu": 15, "adapt": [15, 690, 714, 716, 1035, 1038], "devic": [15, 19, 24, 25, 32, 33, 37, 72, 73, 77, 78, 82, 101, 102, 115, 116, 122, 124, 127, 134, 135, 149, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 232, 233, 237, 238, 239, 240, 241, 242, 243, 244, 245, 320, 321, 322, 323, 324, 325, 327, 328, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 609, 637, 638, 641, 662, 665, 666, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 1008, 1009, 1010, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1039, 1041, 1042], "html": [15, 21, 118, 175, 176, 177, 179, 182, 184, 185, 188, 190, 191, 193, 196, 198, 199, 202, 204, 205, 220, 221, 223, 226, 228, 232, 233, 237, 238, 240, 241, 245, 246, 267, 270, 368, 369, 372, 387, 390, 391, 394, 428, 431, 432, 435, 440, 443, 465, 468, 537, 548, 551, 573, 576, 582, 585, 586, 589, 741, 753, 755, 829, 843, 846, 863, 866, 934, 935, 936, 940, 943, 944, 947, 954, 959, 962], "enabl": [15, 18, 19, 72, 73, 74, 75, 76, 121, 122, 125, 126, 129, 131, 132, 133, 135, 137, 149, 690, 727], "anyon": [15, 17, 149], "websit": 15, "tcp": 15, "ip": 15, "node": [15, 72, 73, 126, 893, 894, 903, 904], "commun": [15, 17, 19, 20, 149, 998, 1004], "network": [15, 122, 126, 132, 136, 148, 728, 737, 998, 1005, 1019, 1031, 1032], "smtp": 15, "possibl": [15, 17, 18, 19, 20, 118, 119, 121, 126, 127, 129, 132, 135, 148, 149, 609, 659, 679, 954, 959, 962, 967, 970], "send": 15, "gmail": 15, "outlook": 15, "pop": 15, "email": 15, "ieee": [15, 174, 246, 281, 284, 368, 382, 385, 461, 464, 539, 542, 560, 563, 582, 585], "754": [15, 174, 246, 281, 284, 368, 382, 385, 461, 464, 539, 542, 560, 563, 582, 585], "allow": [15, 121, 132, 149, 175, 204, 205, 207, 208, 609, 659, 1031, 1032], "calcul": [15, 72, 73, 74, 75, 76, 118, 368, 369, 372, 374, 377, 378, 381, 382, 385, 387, 390, 391, 394, 396, 399, 400, 403, 436, 439, 440, 443, 444, 447, 457, 460, 461, 464, 501, 504, 505, 508, 509, 512, 513, 516, 517, 520, 539, 542, 556, 559, 573, 576, 578, 581, 582, 585, 590, 594, 595, 599, 600, 604, 813, 814, 817, 819, 822, 824, 827, 954, 959, 962, 963, 966, 967, 970, 971, 974, 975, 978, 979, 982, 983, 986], "live": [15, 16], "depend": [15, 18, 19, 24, 25, 118, 121, 124, 126, 127, 132, 149, 246, 252, 255, 368, 369, 372, 374, 377, 378, 381, 387, 390, 391, 394, 396, 399, 400, 403, 436, 439, 440, 443, 457, 460, 461, 464, 501, 504, 505, 508, 509, 512, 513, 516, 556, 559, 573, 576, 578, 581, 595, 599, 600, 604, 741, 756, 758, 785, 787, 789, 791, 792, 794, 929, 933, 943, 944, 947, 949, 952], "did": [15, 20, 137], "aris": [15, 149], "until": [15, 19, 130, 149, 998], "substanti": [15, 19, 121, 125], "innov": 15, "growth": 15, "usag": [15, 132, 318, 362], "relev": [15, 18, 20, 119, 126, 127, 135, 1035, 1036, 1037, 1038, 1039, 1040], "area": [15, 129, 147, 368, 378, 381, 391, 394, 404, 407, 998], "necess": 15, "parti": [15, 149], "could": [15, 16, 18, 19, 119, 121, 126, 127, 129, 132, 134, 135, 136, 934, 935, 936, 940, 942], "easili": [15, 19, 135, 136, 137, 149, 998], "engag": [15, 17, 18, 19, 20, 21, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129], "regard": [15, 126, 318], "effect": [15, 117, 118, 125, 126, 149, 175, 210, 213, 690, 718, 720, 954, 975, 978, 983, 986], "2015": 15, "sinc": [15, 18, 19, 121, 149], "alongsid": 15, "machin": [15, 18, 122, 148, 246, 281, 284, 288, 291, 368, 473, 476, 741, 773, 775, 782, 784], "given": [15, 16, 18, 19, 20, 21, 72, 73, 116, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 132, 134, 136, 137, 148, 175, 176, 177, 184, 204, 205, 207, 208, 318, 351, 357, 359, 360, 361, 362, 364, 367, 609, 627, 628, 638, 641, 665, 666, 670, 688, 690, 692, 695, 697, 699, 702, 704, 710, 712, 714, 716, 718, 720, 728, 729, 730, 731, 732, 733, 734, 735, 741, 810, 812, 813, 814, 817, 819, 822, 824, 827, 829, 830, 833, 843, 846, 847, 850, 855, 858, 863, 866, 868, 881, 884, 893, 900, 901, 917, 919, 920, 922, 923, 925, 928, 943, 949, 952, 1008, 1009], "frame": [15, 148], "less": [15, 19, 24, 25, 38, 39, 72, 73, 83, 84, 117, 119, 126, 131, 132, 368, 374, 377, 378, 381, 387, 390, 400, 403, 432, 435, 501, 504, 505, 508, 513, 516, 556, 559, 560, 563, 568, 571, 582, 585, 741, 773, 775, 782, 784, 807, 809, 917, 923, 925, 954, 983, 986], "matur": [15, 149], "state": [15, 117, 118, 121, 131, 132, 133, 135, 148, 368, 539, 542, 609, 673, 687, 728, 738, 998, 1005, 1006, 1007, 1008, 1009, 1010, 1012, 1013, 1015, 1016, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042], "than": [15, 19, 24, 25, 72, 73, 116, 119, 121, 126, 129, 132, 135, 136, 137, 149, 175, 176, 177, 246, 281, 284, 318, 362, 368, 374, 377, 378, 381, 387, 390, 400, 403, 416, 419, 424, 427, 432, 435, 465, 468, 469, 472, 501, 504, 505, 508, 513, 516, 537, 556, 559, 560, 563, 568, 571, 582, 585, 605, 608, 609, 655, 656, 658, 690, 706, 708, 741, 747, 749, 765, 768, 773, 775, 782, 784, 807, 809, 829, 830, 833, 847, 850, 869, 872, 917, 923, 925, 934, 935, 936, 940, 942, 954, 971, 974, 975, 978, 979, 982, 983, 986], "preced": [15, 136], "mention": [15, 18, 19, 117, 119, 122, 129], "aros": 15, "70": [15, 741, 779, 781, 954, 955, 958], "80": [15, 741, 779, 781, 954, 955, 958], "90": [15, 101, 102, 368, 428, 431, 564, 567, 741, 779, 781, 919, 921, 954, 955, 958], "effort": [15, 17, 149], "stage": [15, 17, 19, 21, 115, 130, 998], "complet": [15, 19, 20, 72, 73, 125, 126, 134, 135, 741, 785, 787], "natur": [15, 119, 125, 126, 148, 368, 457, 460, 501, 504, 509, 512, 741, 788], "like": [15, 18, 19, 21, 115, 116, 117, 118, 119, 121, 128, 129, 131, 132, 134, 135, 136, 137, 148, 149, 690, 706, 708, 917, 923, 925, 998], "certainli": 15, "mission": [15, 998], "creat": [15, 17, 18, 19, 21, 72, 73, 121, 127, 128, 129, 132, 133, 136, 147, 148, 175, 176, 177, 179, 182, 184, 185, 188, 190, 191, 198, 199, 202, 204, 205, 207, 208, 215, 218, 220, 221, 223, 226, 238, 240, 241, 245, 318, 327, 328, 609, 637, 638, 641, 662, 665, 666, 679, 690, 725, 917, 918, 919, 920, 923, 925, 998, 1004, 1008, 1009, 1010, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042], "At": [15, 20], "process": [15, 16, 17, 18, 19, 21, 121, 122, 126, 132, 137, 318, 327, 328, 357, 367], "ourselv": 15, "lead": [15, 16, 72, 73, 74, 75, 76, 149, 741, 785, 787, 792, 794], "quansight": 15, "compani": 15, "made": [15, 19, 20, 126, 129, 132, 134], "organ": [15, 116, 122, 125, 126], "panda": 15, "scipi": 15, "conda": [15, 18, 21], "dask": [15, 934, 935, 936, 940, 942], "apach": 15, "onnx": 15, "scikit": 15, "jupyt": 15, "aw": 15, "cupi": 15, "net": [15, 16, 132, 137], "sympi": 15, "rai": [15, 368, 400, 403], "modin": 15, "spyder": 15, "includ": [15, 19, 20, 72, 73, 116, 117, 118, 119, 120, 121, 122, 123, 125, 126, 127, 128, 129, 130, 148, 149, 175, 176, 177, 179, 182, 215, 218, 609, 648, 689, 741, 807, 809, 893, 894, 917, 923, 925, 929, 931, 954, 959, 962, 963, 966, 967, 970, 971, 974, 975, 978, 979, 982, 983, 986, 987, 988, 991, 993, 996, 1001, 1003, 1019, 1029, 1030, 1033, 1034], "member": [15, 19], "googl": [15, 998], "octoml": 15, "einop": [15, 72, 73, 609, 631, 632, 633], "further": [15, 16, 19, 21, 119, 125, 131, 135, 136, 998], "sponsor": 15, "lg": 15, "electron": 15, "microsoft": 15, "d": [15, 16, 17, 18, 101, 102, 115, 126, 135, 609, 618, 626, 728, 729, 730, 731, 732, 733, 734, 735, 741, 753, 755, 779, 781, 893, 896, 919, 921, 998, 1004], "shaw": 15, "co": [15, 38, 39, 83, 84, 132, 148, 368, 609, 636, 998], "intel": 15, "togeth": [15, 72, 73, 125, 126, 130, 136, 137, 149, 1041, 1042], "major": [15, 121, 127, 128, 149, 929, 932], "involv": [15, 17, 21, 115, 127, 137, 246, 305, 308, 368, 382, 385, 539, 542, 998, 1004], "anoth": [15, 18, 19, 72, 73, 121, 122, 126, 127, 134, 137, 175, 193, 196, 246, 257, 260, 267, 270], "promis": 15, "sign": [15, 18, 38, 39, 83, 84, 133, 137, 175, 176, 177, 368, 369, 372, 382, 385, 400, 403, 424, 427, 539, 542, 560, 563, 572, 741, 788, 934, 935, 936, 940, 942, 954, 971, 974, 979, 982], "pursuit": 15, "unif": [15, 17, 134, 998, 1004], "clearli": [15, 20, 119, 121], "lot": [15, 16, 124, 134, 149], "thought": [15, 18, 19, 117], "care": [15, 19, 137], "attent": [15, 19, 125, 126, 728, 739, 740, 1019, 1030], "gone": [15, 131], "simplifi": [15, 132, 133, 134, 136], "compat": [15, 117, 149, 246, 262, 265, 368, 382, 385, 400, 403, 408, 411, 416, 419, 420, 423, 424, 427, 428, 431, 444, 447, 449, 452, 469, 472, 477, 480, 493, 496, 497, 500, 517, 520, 521, 524, 529, 532, 533, 536, 539, 542, 548, 551, 556, 559, 560, 563, 590, 594, 741, 773, 775, 782, 784, 789, 791, 798, 800, 804, 806, 807, 809, 829, 859, 862, 929, 931, 954, 959, 962, 963, 966, 967, 970, 971, 974, 975, 978, 979, 982, 983, 986, 987, 988, 991, 993, 996, 998], "excit": [15, 17, 115, 998], "complianc": 15, "hope": [15, 149], "due": [15, 18, 24, 25, 126, 129, 368, 539, 542], "suit": [15, 18, 115, 120, 121, 135, 148], "some": [15, 16, 18, 19, 20, 72, 73, 116, 117, 118, 119, 121, 122, 125, 126, 127, 128, 129, 130, 133, 134, 135, 136, 148, 149, 368, 461, 464, 690, 692, 695, 697, 699, 702, 704, 710, 712, 714, 716, 718, 720, 726, 728, 736, 998, 1019, 1027], "motiv": [15, 134], "great": [15, 16, 121, 132, 134], "convinc": 15, "celebr": 15, "encourag": [15, 148, 149, 998, 1004], "foundat": 15, "point": [16, 19, 117, 118, 119, 121, 125, 129, 132, 134, 135, 148, 174, 175, 176, 177, 184, 190, 191, 198, 220, 221, 238, 240, 246, 252, 255, 281, 284, 294, 297, 305, 308, 368, 374, 377, 378, 381, 382, 385, 387, 390, 391, 394, 396, 399, 400, 403, 404, 407, 428, 431, 432, 435, 436, 439, 440, 443, 444, 447, 457, 460, 461, 464, 465, 468, 501, 504, 505, 508, 513, 516, 517, 520, 539, 542, 556, 559, 560, 563, 564, 567, 573, 576, 578, 581, 582, 585, 595, 599, 600, 604, 605, 608, 741, 742, 745, 750, 752, 756, 758, 759, 761, 762, 764, 773, 775, 782, 784, 785, 787, 789, 791, 792, 794, 807, 809, 934, 935, 936, 940, 942, 954, 959, 962, 963, 966, 967, 970, 971, 974, 975, 978, 979, 982, 983, 986], "mai": [16, 18, 19, 24, 25, 121, 126, 134, 136, 175, 176, 177, 193, 196, 318, 363, 368, 449, 452, 477, 480, 497, 500, 525, 528, 529, 532, 609, 630, 934, 935, 936, 940, 942, 943, 944, 947, 949, 952, 954, 959, 962, 963, 966, 967, 970], "ask": [16, 132, 134, 149, 998], "perfectli": 16, "happi": [16, 18, 149], "abund": 16, "better": [16, 115, 130, 131, 134, 135, 136], "ll": [16, 17, 19, 119, 126, 129, 135], "give": [16, 18, 19, 115, 117, 118, 119, 123, 134, 829, 859, 862], "two": [16, 74, 75, 118, 119, 121, 125, 126, 131, 135, 137, 175, 176, 177, 190, 191, 210, 213, 228, 232, 233, 237, 246, 304, 313, 368, 424, 427, 564, 567, 609, 617, 741, 742, 745, 750, 752, 753, 755, 756, 758, 759, 761, 762, 764, 765, 768, 769, 771, 773, 775, 776, 778, 779, 781, 782, 784, 785, 787, 788, 789, 791, 792, 794, 795, 797, 801, 803, 804, 806, 829, 877, 880, 934, 935, 936, 940, 941, 942, 998], "streamlin": 16, "workflow": [16, 19, 135, 147, 998], "save": [16, 72, 73, 121, 130, 149, 609, 671, 1031, 1032], "week": [16, 19, 20, 998], "let": [16, 118, 119, 121, 126, 127, 128, 132, 134, 135, 136, 137, 954, 963, 966, 975, 978, 979, 982, 983, 986, 998], "sai": [16, 18, 124, 134], "deepmind": 16, "releas": [16, 18, 20, 998], "awesom": 16, "paper": 16, "love": 16, "choic": [16, 18, 129, 135, 954, 975, 978, 983, 986], "perceiverio": 16, "happen": [16, 18, 19, 121, 135], "slew": 16, "rush": 16, "f": [16, 21, 115, 121, 126, 130, 132, 135, 137, 368, 473, 476, 609, 650, 654, 893, 896], "g": [16, 115, 126, 149, 246, 251, 305, 308, 318, 334, 893, 896, 917, 922, 923, 925, 934, 935, 936, 940, 942, 954, 959, 962, 967, 970, 971, 974, 979, 982], "inevit": 16, "deviat": [16, 121, 911, 912, 915, 917, 922, 954, 975, 978, 1033, 1034], "origin": [16, 72, 73, 74, 75, 76, 123, 124, 127, 132, 134, 368, 400, 403, 741, 769, 771, 829, 859, 862, 863, 866], "often": [16, 121, 122, 130, 149], "erron": 16, "train": [16, 122, 126, 128, 135, 136, 137, 147, 148, 149, 690, 692, 695, 697, 699, 710, 712, 998], "poor": 16, "converg": 16, "perform": [16, 72, 73, 116, 117, 119, 121, 122, 123, 125, 126, 128, 129, 132, 135, 149, 160, 165, 175, 204, 205, 207, 208, 318, 609, 627, 631, 632, 633, 651, 652, 653, 690, 697, 699, 702, 704, 710, 712, 714, 716, 718, 720, 728, 736, 738, 741, 792, 794, 889, 890, 891, 892, 893, 900, 901, 987, 988, 991, 993, 996], "issu": [16, 17, 20, 121, 132, 134, 136, 149], "etc": [16, 18, 19, 20, 68, 69, 72, 73, 113, 114, 116, 117, 119, 121, 125, 126, 127, 132, 134, 135, 149, 175, 204, 205, 207, 208, 609, 637, 638, 641, 662, 665, 666, 917, 918, 919, 920, 923, 925, 934, 935, 936, 940, 942, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1039, 1041, 1042], "publish": [16, 149], "manag": [16, 17, 129, 149, 318], "get": [16, 17, 18, 20, 72, 73, 115, 121, 122, 127, 128, 129, 132, 133, 134, 135, 136, 246, 276, 279, 280, 281, 284, 288, 291, 318, 327, 328, 337, 338, 351, 352, 357, 361, 364, 367, 609, 616, 643, 644, 645, 664, 673, 998, 1004, 1019, 1028], "work": [16, 18, 19, 20, 115, 121, 126, 127, 128, 131, 132, 133, 134, 136, 137, 998, 1004], "repositori": [16, 18, 19, 21, 120, 130], "pull": [16, 17, 18, 21, 116, 149], "request": [16, 17, 116, 318, 354], "confus": [16, 129], "do": [16, 18, 19, 20, 72, 73, 116, 117, 118, 119, 122, 123, 124, 125, 126, 127, 128, 129, 132, 134, 135, 136, 137, 149, 368, 560, 563, 609, 653, 690, 706, 708, 726, 893, 894, 903, 904, 905], "don": [16, 18, 19, 20, 68, 69, 113, 114, 121, 127, 136, 149], "expect": [16, 121, 149, 609, 616, 998], "codebas": [16, 17, 115, 116, 129, 131, 318, 360, 361, 998], "total": [16, 17, 19, 72, 73, 74, 75, 76, 119, 121, 128, 135, 136, 149, 318, 364, 929, 932, 954, 975, 978, 983, 986], "hour": 16, "spent": 16, "spin": 16, "off": [16, 131, 741, 753, 755, 801, 803], "test": [16, 18, 20, 115, 119, 130, 149, 368, 481, 484, 485, 488, 489, 492, 987, 988, 991, 993, 996], "error": [16, 18, 72, 73, 117, 121, 125, 128, 130, 134, 149, 160, 161, 318, 368, 453, 456, 954, 959, 962, 967, 970, 1031, 1032, 1035, 1039], "iter": [16, 27, 28, 29, 30, 31, 68, 69, 72, 73, 74, 75, 76, 113, 114, 126, 132, 135, 172, 173, 318, 340, 341, 343, 344, 345, 346, 349, 362, 609, 610, 613, 829, 839, 842, 855, 858, 868, 881, 884, 885, 888, 893, 894, 895, 896, 899, 903, 904, 905], "address": [16, 19, 20, 125, 132], "sake": 16, "singl": [16, 19, 72, 73, 116, 117, 119, 121, 122, 124, 126, 129, 132, 135, 136, 137, 149, 318, 327, 328, 347, 348, 349, 350, 609, 685, 689, 917, 922, 923, 925, 934, 935], "multipl": [16, 19, 72, 73, 83, 84, 85, 86, 93, 94, 97, 98, 99, 100, 101, 102, 119, 122, 126, 149, 368, 382, 386, 537, 539, 542, 609, 610, 612, 613, 614, 638, 642, 659, 741, 742, 745, 746, 762, 764, 829, 830, 833, 834, 863, 866, 867, 868, 911, 912, 914, 915, 916, 919, 921, 929, 930, 931, 954, 959, 962, 963, 966, 967, 970, 971, 974, 975, 978, 979, 982, 983, 986, 987, 988, 991, 993, 996, 1019, 1029], "line": [16, 18, 119, 121, 125, 130, 133, 134, 135, 136, 147, 998, 1004], "convert": [16, 27, 28, 29, 30, 31, 72, 73, 121, 125, 132, 149, 150, 158, 175, 179, 182, 215, 218, 246, 250, 251, 318, 334, 335, 336, 337, 357, 364, 367, 609, 674, 680, 684, 685, 741, 810, 812, 893, 895, 905, 906, 1009], "directli": [16, 19, 116, 117, 118, 121, 122, 125, 126, 127, 128, 129, 132, 134, 136, 137, 148, 149, 893, 905], "graph": [16, 24, 25, 122, 126, 133, 149, 690, 697, 699, 702, 704, 710, 712, 714, 716, 718, 720, 934, 935, 936, 940, 942, 1031, 1032], "guarante": [16, 125, 149, 934, 935], "turn": [16, 119, 121, 126], "4": [16, 21, 24, 25, 38, 39, 48, 49, 52, 53, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 119, 121, 123, 126, 132, 134, 135, 136, 137, 160, 162, 163, 165, 175, 199, 202, 210, 213, 223, 226, 241, 245, 246, 267, 269, 270, 271, 318, 340, 356, 368, 369, 371, 372, 373, 382, 383, 384, 385, 386, 387, 390, 391, 393, 394, 395, 400, 403, 408, 411, 428, 431, 432, 434, 435, 440, 443, 465, 467, 468, 477, 480, 497, 500, 537, 538, 544, 547, 548, 551, 564, 567, 568, 570, 571, 573, 575, 576, 577, 582, 585, 586, 589, 595, 596, 598, 599, 600, 601, 603, 604, 609, 618, 627, 636, 637, 638, 640, 641, 642, 674, 679, 690, 692, 694, 695, 696, 728, 731, 732, 733, 735, 738, 740, 741, 742, 743, 745, 747, 749, 750, 752, 753, 755, 762, 764, 773, 775, 779, 781, 798, 800, 801, 803, 813, 824, 827, 829, 830, 831, 832, 833, 834, 835, 838, 843, 846, 847, 850, 855, 858, 859, 862, 863, 865, 866, 867, 868, 877, 880, 893, 896, 911, 912, 914, 915, 916, 917, 918, 919, 921, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 939, 940, 943, 944, 947, 954, 955, 958, 959, 962, 987, 988, 991, 998, 1035, 1036, 1037, 1038, 1040], "step": [16, 18, 19, 21, 42, 43, 72, 73, 77, 78, 87, 88, 119, 123, 125, 126, 127, 128, 132, 135, 136, 137, 148, 175, 176, 177, 178, 204, 205, 207, 208, 318, 690, 692, 693, 694, 695, 696, 697, 698, 699, 700, 702, 704, 710, 711, 712, 713, 714, 716, 718, 720, 889, 890, 891, 892, 998, 1035, 1036, 1037, 1038, 1039, 1040], "take": [16, 17, 18, 19, 118, 119, 121, 126, 127, 128, 132, 134, 136, 137, 149, 368, 428, 431, 998, 1004], "few": [16, 19, 20, 121, 122, 126, 127, 128, 129, 130, 133, 134, 135, 136, 147, 998, 1004], "second": [16, 18, 119, 121, 129, 134, 246, 304, 313, 318, 349, 368, 382, 385, 408, 411, 416, 419, 420, 423, 424, 427, 428, 431, 449, 452, 469, 472, 477, 480, 493, 496, 497, 500, 517, 520, 521, 524, 529, 532, 533, 536, 539, 542, 548, 551, 556, 559, 590, 594, 609, 617, 664, 669, 690, 692, 695, 697, 699, 710, 712, 741, 747, 749, 753, 755, 756, 758, 765, 768, 779, 781, 785, 787, 792, 794, 798, 800, 804, 806, 829, 873, 876, 877, 880, 889, 891, 934, 935, 936, 940, 1035, 1036, 1037], "automat": [16, 18, 19, 115, 117, 122, 126, 131, 132, 133, 136, 137, 998], "convers": [16, 28, 29, 30, 31, 72, 73, 131, 133, 137, 148, 149, 998, 1004], "everyon": [16, 17, 19, 149], "regardless": [16, 17, 72, 73, 134, 137, 172, 173], "wouldn": 16, "nice": [16, 121], "write": [16, 19, 20, 21, 72, 73, 115, 116, 118, 119, 122, 123, 129, 132, 134, 137, 160, 161, 162, 163, 164, 165, 166, 169, 171, 175, 176, 177, 179, 182, 184, 185, 188, 190, 191, 193, 196, 198, 199, 202, 204, 205, 207, 208, 220, 221, 223, 226, 228, 232, 233, 237, 238, 240, 241, 245, 246, 252, 255, 262, 265, 318, 363, 368, 369, 372, 374, 377, 378, 381, 382, 385, 387, 390, 391, 394, 396, 399, 400, 403, 404, 407, 408, 411, 412, 415, 416, 419, 420, 423, 424, 427, 428, 431, 432, 435, 436, 439, 440, 443, 444, 447, 449, 452, 453, 456, 457, 460, 461, 464, 465, 468, 469, 472, 473, 476, 477, 480, 481, 484, 485, 488, 489, 492, 493, 496, 501, 504, 505, 508, 509, 512, 513, 516, 517, 520, 521, 524, 525, 528, 529, 532, 533, 536, 537, 538, 539, 542, 544, 547, 548, 551, 552, 555, 556, 559, 560, 563, 564, 567, 568, 571, 573, 576, 578, 581, 582, 585, 586, 589, 590, 594, 595, 599, 600, 604, 605, 608, 609, 621, 622, 624, 627, 628, 631, 632, 633, 635, 637, 638, 641, 649, 662, 665, 666, 690, 723, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 739, 740, 741, 742, 745, 747, 749, 750, 752, 753, 755, 759, 761, 762, 764, 765, 768, 769, 771, 773, 775, 776, 778, 779, 781, 782, 784, 788, 789, 791, 792, 794, 795, 797, 798, 800, 801, 803, 804, 806, 807, 809, 810, 812, 813, 814, 817, 819, 822, 824, 827, 829, 830, 833, 835, 838, 839, 842, 843, 846, 847, 850, 851, 854, 855, 858, 859, 862, 863, 866, 869, 872, 873, 876, 877, 880, 881, 884, 885, 888, 911, 912, 915, 917, 918, 919, 920, 922, 923, 925, 928, 929, 933, 934, 942, 943, 944, 947, 949, 952, 954, 955, 958, 959, 962, 963, 966, 967, 970, 971, 974, 975, 978, 979, 982, 983, 986, 987, 988, 991, 993, 996], "onc": [16, 18, 19, 121, 126, 127, 128, 132, 135, 149, 318, 362, 741, 762, 764, 792, 794, 917, 918], "know": [16, 19, 121, 934, 935, 936, 940, 942], "among": [16, 72, 73, 121], "frantic": 16, "port": 16, "lucid": 16, "honk": 16, "improv": [16, 19, 122, 132], "understand": [16, 18, 19, 20, 21, 115, 117, 118, 119, 120, 130, 131], "pattern": [16, 72, 73, 118, 127, 609, 631, 632, 633], "hasn": 16, "chang": [16, 18, 19, 20, 21, 22, 23, 24, 25, 32, 33, 34, 35, 38, 39, 40, 41, 42, 43, 48, 49, 50, 51, 52, 53, 54, 55, 60, 61, 66, 67, 70, 71, 79, 80, 83, 84, 85, 86, 87, 88, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 105, 106, 111, 112, 118, 120, 121, 126, 132, 136, 149, 166, 167, 168, 170, 179, 180, 185, 186, 193, 194, 199, 200, 215, 216, 223, 224, 228, 230, 233, 235, 241, 243, 267, 268, 269, 271, 318, 369, 370, 371, 373, 382, 383, 384, 386, 391, 392, 393, 395, 432, 433, 434, 465, 466, 467, 568, 569, 570, 572, 573, 574, 575, 577, 595, 596, 597, 598, 600, 601, 602, 603, 610, 611, 612, 614, 638, 639, 640, 642, 680, 681, 682, 683, 692, 693, 694, 696, 741, 742, 743, 744, 746, 747, 749, 814, 815, 816, 818, 819, 820, 821, 823, 824, 825, 826, 828, 829, 830, 831, 832, 834, 859, 862, 863, 864, 865, 867, 893, 895, 905, 912, 913, 914, 916, 919, 921, 936, 937, 938, 939, 988, 989, 990, 992, 993, 994, 995, 997, 998, 1004], "now": [16, 18, 21, 72, 73, 116, 117, 121, 124, 126, 127, 130, 134, 135, 137, 148, 149, 1019, 1030, 1031, 1032], "spend": 16, "torchvis": 16, "probabl": [16, 121, 728, 736, 917, 918, 1019, 1027], "sonnet": 16, "about": [16, 18, 19, 120, 121, 131, 132, 136, 137, 149, 246, 281, 284, 288, 291], "next": [16, 18, 19, 20, 21, 118, 119, 123, 124, 130, 134, 135, 246, 281, 284, 998, 1031, 1032, 1035, 1036, 1037, 1038, 1039, 1040], "everyth": [16, 19, 20, 121, 133, 149], "zero": [16, 24, 25, 72, 73, 74, 75, 117, 119, 125, 126, 127, 128, 132, 135, 136, 160, 162, 163, 175, 184, 190, 191, 210, 213, 228, 232, 233, 237, 241, 245, 246, 252, 255, 368, 382, 385, 387, 390, 391, 394, 416, 419, 440, 443, 461, 464, 465, 468, 525, 528, 529, 532, 537, 538, 539, 542, 544, 547, 548, 551, 556, 559, 560, 563, 564, 567, 573, 576, 582, 585, 586, 589, 595, 599, 600, 604, 609, 627, 662, 665, 666, 690, 692, 695, 697, 699, 710, 712, 714, 716, 728, 736, 741, 742, 745, 750, 752, 765, 768, 773, 775, 782, 784, 804, 806, 807, 809, 829, 843, 846, 847, 850, 855, 858, 863, 866, 885, 888, 911, 912, 915, 917, 919, 920, 929, 930, 931, 932, 934, 935, 936, 940, 942, 954, 959, 962, 963, 966, 967, 970, 971, 974, 975, 978, 979, 982, 983, 986, 987, 988, 991, 993, 996, 998, 1010, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1029, 1035, 1036, 1037, 1038], "need": [16, 18, 19, 20, 21, 116, 118, 119, 120, 122, 125, 126, 129, 132, 134, 135, 148, 149, 609, 621, 622, 624, 829, 830, 833, 843, 846], "said": 16, "high": [16, 20, 72, 73, 101, 102, 135, 917, 919, 920, 921, 923, 924, 925, 926], "level": [16, 17, 20, 122, 131, 132, 135, 136, 137, 149], "optim": [16, 129, 133, 135, 137, 148, 318, 690, 697, 699, 702, 704, 710, 712, 714, 716, 718, 720, 889, 890, 891, 892, 998, 1036, 1037, 1038, 1040], "trainer": [16, 147, 149, 998], "statu": 16, "quo": 16, "kera": 16, "dopamin": 16, "ignit": 16, "catalyst": 16, "lightn": 16, "fastai": 16, "haiku": [16, 137], "flax": [16, 137, 149], "trax": [16, 137], "objax": [16, 137], "idea": [16, 130, 148], "fulli": [16, 117, 125, 126, 132, 133, 134, 135, 136, 137, 149, 1019, 1029, 1030], "offer": [16, 136], "strongli": [17, 18, 998, 1004], "welcom": [17, 18, 19, 998, 1004], "absolut": [17, 72, 73, 368, 369, 372, 741, 788], "skill": 17, "whether": [17, 18, 24, 25, 27, 28, 29, 30, 31, 72, 73, 74, 75, 76, 113, 114, 117, 127, 129, 160, 161, 172, 173, 246, 252, 255, 276, 279, 293, 294, 297, 299, 302, 317, 318, 337, 338, 349, 353, 354, 357, 358, 362, 365, 367, 368, 489, 492, 609, 610, 613, 617, 618, 627, 630, 634, 636, 646, 648, 650, 653, 654, 655, 656, 657, 658, 659, 670, 672, 677, 688, 689, 690, 697, 699, 701, 702, 704, 706, 708, 710, 712, 714, 716, 718, 720, 723, 727, 728, 736, 741, 756, 758, 889, 890, 891, 892, 893, 894, 895, 899, 903, 904, 905, 906, 917, 918, 987, 988, 991, 993, 996, 1008, 1009, 1019, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040], "vetern": 17, "beginn": 17, "start": [17, 18, 19, 20, 21, 72, 73, 77, 78, 115, 118, 119, 127, 131, 132, 134, 135, 136, 148, 149, 175, 176, 177, 178, 204, 205, 206, 207, 208, 209, 318, 333], "aspect": [17, 135, 998], "guid": [17, 18, 19, 130, 998], "through": [17, 19, 20, 115, 119, 121, 122, 123, 126, 130, 131, 132, 134, 135, 136, 137, 148, 368, 400, 403, 893, 896], "journei": [17, 998, 1004], "inclusvi": 17, "big": [17, 149], "team": [17, 18, 19], "board": 17, "contributor": [17, 18, 19, 131, 998], "split": [17, 19, 24, 25, 72, 73, 131, 132, 149, 318, 327, 343, 344, 345, 346, 360, 361, 362, 609, 659, 829, 998], "section": [17, 19, 20, 115, 116, 117, 118, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 135, 136, 934, 935, 936, 940, 942], "below": [17, 18, 20, 21, 115, 116, 119, 121, 122, 126, 127, 128, 129, 130, 132, 133, 134, 135, 136, 137, 148, 175, 228, 232, 233, 237, 368, 408, 411, 428, 431, 440, 443, 564, 567, 600, 604, 741, 750, 752, 753, 755, 801, 803, 829, 843, 846, 847, 850, 934, 935, 943, 944, 947, 998], "best": [17, 18, 19, 20, 21, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 609, 659], "go": [17, 18, 19, 20, 115, 116, 119, 126, 131, 135, 149, 893, 904], "finish": [17, 18, 115, 998], "dive": [17, 19, 20, 131, 134, 135, 149, 998], "right": [17, 18, 19, 72, 73, 115, 119, 135, 368, 416, 419, 424, 427, 741, 792, 794], "environ": [17, 19, 21, 148], "basic": [17, 20, 21], "fork": [17, 18, 609, 660], "doc": [17, 20, 117, 118, 132, 135, 136, 998], "document": [17, 19, 121, 133, 135, 137], "local": [17, 18, 21, 122], "task": [17, 19, 148, 889, 890, 891, 892, 998], "help": [17, 18, 119, 121, 123, 125, 126, 134, 135, 136, 147, 609, 615, 954, 979, 982, 998], "video": [17, 19, 117, 118, 119, 121], "realli": [18, 126, 149], "contribut": [18, 19, 20, 132, 1004], "toward": [18, 132, 829, 863, 866, 998, 1004], "page": [18, 19, 133, 137, 147, 998, 1004], "explain": [18, 19, 20, 116, 117, 118, 119, 121, 122, 123, 125, 126, 127, 128, 129, 130, 132, 133, 134, 135, 136, 137, 998, 1004], "main": [18, 21, 124, 126, 175, 190, 191, 228, 232, 233, 237, 741, 753, 755, 801, 803], "prefer": [18, 126], "mode": [18, 48, 49, 72, 73, 119, 126, 149, 172, 173, 318, 347, 348, 349, 350, 362, 368, 382, 385, 539, 542, 609, 670, 687, 741, 785, 786, 787], "git": [18, 19, 121], "recurs": [18, 21, 27, 28, 29, 30, 31, 72, 73, 122, 126, 136, 149, 893, 894, 895, 903, 904, 905], "submodul": [18, 19, 20, 21, 120, 121, 122, 128, 131, 132, 136, 998, 1033, 1034, 1041, 1042], "com": 18, "unifyai": [18, 21], "http": [18, 118, 175, 176, 177, 179, 182, 184, 185, 188, 190, 191, 193, 196, 198, 199, 202, 204, 205, 220, 221, 223, 226, 228, 232, 233, 237, 238, 240, 241, 245, 246, 267, 270, 368, 369, 372, 387, 390, 391, 394, 428, 431, 432, 435, 440, 443, 465, 468, 537, 548, 551, 573, 576, 582, 585, 586, 589, 690, 692, 695, 697, 699, 741, 753, 755, 829, 843, 846, 863, 866, 934, 935, 936, 940, 943, 944, 947, 954, 959, 962], "gh": 18, "your_fold": 18, "id": [18, 125, 126, 130, 318, 337, 1031, 1032], "cours": [18, 19, 119, 135, 149], "whatev": [18, 149], "integr": [18, 246, 252, 255], "familiar": [18, 20], "decid": [18, 72, 73, 893, 904], "sure": [18, 20, 120, 121], "elig": 18, "free": [18, 19, 20, 21, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 131, 148, 998], "student": 18, "licenc": 18, "peopl": [18, 19, 115], "seem": [18, 136, 149], "miss": [18, 119, 121, 125, 126, 130, 1035, 1039], "add": [18, 19, 20, 24, 25, 38, 39, 68, 69, 72, 73, 74, 75, 83, 84, 85, 86, 113, 114, 115, 116, 117, 118, 121, 122, 123, 125, 126, 132, 134, 149, 368, 369, 372, 386, 537, 610, 614, 690, 727, 911, 912, 915, 998, 1004, 1033, 1034], "explicit": [18, 21, 126, 127, 129, 132, 149], "remind": 18, "channel": [18, 19, 20, 21, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 609, 636, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1028, 1029], "pace": 18, "updat": [18, 19, 20, 21, 72, 73, 115, 117, 119, 120, 124, 125, 126, 127, 132, 134, 135, 137, 149, 318, 327, 609, 653, 665, 666, 690, 692, 695, 697, 699, 702, 704, 710, 712, 714, 716, 718, 720, 728, 738, 889, 890, 891, 893, 900, 901, 909, 910, 1008, 1009, 1035, 1036, 1037, 1038, 1039, 1040], "suggest": [18, 19, 116, 121], "latest": [18, 20, 21, 118, 149, 175, 176, 177, 179, 182, 184, 185, 188, 190, 191, 193, 196, 198, 199, 202, 204, 205, 220, 221, 223, 226, 228, 232, 233, 237, 238, 240, 241, 245, 246, 267, 270, 368, 369, 372, 387, 390, 391, 394, 428, 431, 432, 435, 440, 443, 465, 468, 537, 548, 551, 573, 576, 582, 585, 586, 589, 741, 753, 755, 829, 843, 846, 863, 866, 934, 935, 936, 940, 943, 944, 947, 954, 959, 962, 1019, 1028], "packag": [18, 21, 130, 149], "ensur": [18, 19, 117, 121, 125, 127, 130, 609, 653], "align": [18, 72, 73, 132, 134, 998, 1004], "accord": [18, 21, 72, 73, 122, 127, 246, 267, 270, 281, 284, 368, 382, 385, 424, 427, 539, 542, 609, 637, 665, 666, 741, 804, 806, 829, 839, 842, 885, 888, 954, 975, 978, 983, 986], "stabl": [18, 62, 63, 107, 108, 132, 149, 609, 644, 645, 667, 668, 675, 676, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953], "pypi": [18, 20, 149], "mayb": [18, 27, 30, 31, 132, 134], "person": [18, 19], "experi": [18, 133, 135, 149], "avoid": [18, 19, 121, 123, 124, 126, 130, 134, 318, 368, 461, 464], "pip": [18, 148, 998], "instal": [18, 21, 130, 148, 998], "abil": [18, 133, 149], "certain": [18, 72, 73, 121, 149, 175, 176, 177, 204, 205, 207, 208], "perhap": [18, 134, 135, 136, 149], "keep": [18, 19, 72, 73, 120, 121, 126, 133, 135, 137, 609, 688], "track": [18, 19, 318, 893, 905, 1031, 1032], "termin": [18, 19, 21, 72, 73, 74, 75, 76, 126, 132, 135], "run": [18, 21, 117, 120, 121, 123, 130, 132, 133, 134, 135, 136, 137, 148, 149, 318, 327, 690, 692, 695, 697, 699, 710, 712, 889, 890, 891, 892, 1019, 1030, 1031, 1032], "command": [18, 21, 998], "ivy_dev": [18, 19, 21], "name": [18, 19, 21, 24, 25, 118, 121, 130, 132, 134, 135, 137, 172, 173, 609, 615, 741, 756, 758, 785, 787, 792, 794, 934, 935, 936, 940], "3": [18, 21, 24, 25, 34, 35, 38, 39, 40, 41, 42, 43, 48, 49, 52, 53, 74, 75, 79, 80, 83, 84, 85, 86, 87, 88, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 105, 106, 119, 121, 123, 126, 132, 134, 135, 136, 137, 160, 162, 163, 164, 165, 174, 175, 199, 202, 210, 213, 223, 226, 238, 240, 241, 245, 246, 267, 268, 269, 270, 271, 318, 337, 340, 356, 363, 368, 369, 371, 372, 373, 382, 383, 384, 385, 386, 387, 390, 391, 392, 393, 394, 395, 408, 411, 424, 427, 428, 431, 432, 434, 435, 440, 443, 457, 460, 465, 466, 467, 468, 473, 476, 477, 480, 493, 496, 497, 500, 537, 538, 544, 547, 548, 551, 564, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 582, 585, 586, 589, 595, 596, 598, 599, 600, 601, 603, 604, 609, 610, 611, 612, 617, 618, 627, 634, 637, 638, 639, 640, 641, 642, 672, 674, 679, 685, 690, 692, 693, 694, 695, 696, 728, 729, 730, 731, 733, 734, 735, 740, 741, 742, 743, 744, 745, 746, 747, 749, 750, 752, 753, 755, 762, 764, 773, 775, 779, 781, 792, 794, 798, 800, 801, 803, 810, 812, 813, 814, 816, 817, 818, 819, 821, 823, 824, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 838, 843, 846, 847, 850, 855, 858, 859, 862, 863, 865, 866, 867, 868, 869, 872, 877, 880, 893, 896, 911, 912, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 925, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 939, 940, 943, 944, 947, 954, 955, 958, 959, 962, 979, 982, 987, 988, 991, 998], "8": [18, 21, 24, 25, 38, 39, 50, 51, 52, 53, 74, 75, 83, 84, 95, 96, 101, 102, 119, 121, 126, 131, 135, 160, 164, 318, 340, 368, 382, 385, 386, 391, 394, 395, 408, 411, 432, 435, 440, 443, 477, 480, 497, 500, 537, 538, 564, 567, 568, 569, 570, 571, 572, 582, 585, 586, 589, 600, 604, 609, 618, 637, 690, 692, 695, 728, 735, 741, 747, 749, 750, 752, 753, 755, 779, 781, 798, 800, 813, 814, 815, 816, 817, 818, 819, 821, 823, 824, 825, 826, 828, 829, 830, 831, 833, 847, 850, 855, 858, 868, 917, 918, 919, 920, 921, 929, 933, 934, 935, 954, 955, 958, 998, 1019, 1030], "activ": [18, 19, 21, 23, 68, 69, 71, 113, 114, 116, 136, 161, 162, 163, 164, 165, 166, 169, 171, 998, 1006, 1007], "setup": 18, "click": [18, 19, 118, 998], "icon": [18, 19], "side": [18, 19], "choos": [18, 19, 137, 318, 363, 368, 525, 528, 529, 532, 929, 933, 934, 935, 936, 940, 942, 954, 959, 962, 963, 966, 967, 970], "left": [18, 19, 72, 73, 119, 127, 368, 416, 419, 741, 756, 758, 769, 771, 792, 794, 929, 930, 998], "panel": 18, "select": [18, 19, 121, 132, 134, 137, 149], "drop": [18, 149], "down": [18, 121, 134], "path": [18, 21], "manual": [18, 19, 121, 136, 893, 894, 903, 904], "builtin": [18, 21, 134, 136], "requir": [18, 21, 116, 117, 118, 119, 121, 124, 125, 127, 128, 134, 149, 172, 173, 368, 582, 585, 741, 756, 758, 829, 873, 876, 1008, 1009], "cmd": [18, 21], "directori": [18, 19, 21, 121, 609, 671], "folder": [18, 19, 21, 116, 120, 121, 122], "file": [18, 19, 21, 72, 73, 116, 118, 121, 122, 123, 125, 126, 130, 132, 135, 609, 671, 1031, 1032], "abov": [18, 19, 21, 117, 118, 119, 121, 122, 123, 125, 126, 129, 130, 134, 135, 136, 137, 175, 176, 177, 179, 182, 184, 185, 188, 190, 191, 193, 196, 198, 199, 202, 204, 205, 207, 208, 210, 213, 220, 221, 223, 226, 228, 232, 233, 237, 238, 240, 241, 245, 246, 267, 270, 368, 369, 372, 382, 385, 387, 390, 391, 394, 408, 411, 428, 431, 432, 435, 440, 443, 465, 468, 537, 539, 542, 548, 551, 564, 567, 568, 571, 573, 576, 582, 585, 586, 589, 595, 599, 600, 604, 609, 637, 728, 731, 740, 741, 742, 745, 750, 752, 753, 755, 756, 758, 801, 803, 829, 843, 846, 847, 850, 863, 866, 911, 912, 915, 917, 919, 920, 934, 935, 936, 940, 943, 944, 947, 954, 959, 962, 971, 974, 975, 978, 979, 982, 987, 988, 991], "m": [18, 19, 21, 115, 132, 175, 210, 213, 228, 232, 233, 237, 609, 618, 741, 742, 745, 750, 752, 753, 755, 756, 758, 759, 761, 762, 764, 765, 768, 773, 775, 776, 778, 779, 781, 782, 784, 785, 787, 789, 791, 792, 794, 795, 797, 801, 803, 917, 922, 923, 925], "python3": [18, 21], "script": [18, 19, 21, 119, 132, 149], "bat": [18, 19, 21], "OR": [18, 19, 21, 368, 420, 423, 529, 532, 987, 993, 996], "bin": [18, 19, 21], "mac": [18, 19, 21], "linux": [18, 19, 21], "virtualenv": 18, "found": [18, 19, 72, 73, 74, 75, 76, 118, 125, 126, 130, 318, 352], "os": 18, "note": [18, 19, 116, 118, 119, 121, 126, 368, 560, 563, 741, 756, 758, 792, 794, 829, 873, 876, 934, 936, 940, 954, 963, 966], "tick": [18, 19], "abl": [18, 19, 72, 73, 122, 127, 129, 130, 134, 137], "To": [18, 119, 121, 122, 126, 130, 135, 136, 137, 998], "ivy_test": [18, 19], "test_array_api": [18, 19, 120, 121], "cd": [18, 19, 21], "r": [18, 72, 73, 609, 618, 688, 741, 785, 787, 810, 812], "txt": 18, "visual": [18, 130, 149], "jetbrain": 18, "remot": 18, "mitig": 18, "potenti": [18, 131, 368, 461, 464], "conflict": [18, 19, 135], "addit": [18, 19, 72, 73, 116, 118, 121, 126, 127, 134, 135, 137, 318, 363, 368, 382, 385, 609, 631, 632, 633, 911, 912, 915, 1019, 1029], "yet": [18, 20, 126], "particular": [18, 19, 116, 121, 129, 368, 369, 372], "system": [18, 149, 741, 789, 791], "instruct": [18, 20], "desktop": 18, "wsl": 18, "powershel": 18, "admin": 18, "visit": 18, "link": 18, "imag": [18, 21, 45, 90, 116, 132, 133, 135, 137, 148, 728, 729, 730, 731, 732, 734, 735, 998], "profession": 18, "execut": [18, 21, 126, 129, 132, 134, 137, 149, 609, 686], "deploy": 18, "top": [18, 19, 121, 135, 136, 998], "press": [18, 135, 998], "ok": 18, "correctli": [18, 72, 73, 117, 121, 126, 127, 130, 136, 149, 741, 769, 771, 929, 930], "caus": [18, 19, 119, 121, 126, 129, 130, 149], "earlier": [18, 19], "might": [18, 19, 116, 121, 124, 132, 134, 135, 609, 630], "necessari": [18, 119, 123, 126, 129], "virtualis": 18, "detail": [18, 19, 20, 116, 117, 120, 121, 122, 123, 124, 126, 135, 136, 175, 193, 196, 934, 935, 936, 940, 942], "sudo": 18, "apt": 18, "ca": 18, "certif": 18, "curl": 18, "gnupg": 18, "lsb": 18, "mkdir": 18, "p": [18, 19, 72, 73, 85, 86, 175, 210, 213, 609, 621, 622, 623, 624, 728, 736, 741, 769, 771, 807, 809, 1019, 1027], "keyr": 18, "fssl": 18, "download": [18, 121], "gpg": 18, "dearmor": 18, "o": [18, 115, 132, 609, 618], "echo": 18, "deb": 18, "arch": 18, "dpkg": 18, "architectur": [18, 137, 149], "lsb_releas": 18, "cs": 18, "tee": 18, "list": [18, 20, 21, 27, 28, 29, 30, 31, 32, 33, 34, 35, 68, 69, 72, 73, 87, 88, 105, 106, 113, 114, 116, 117, 119, 121, 127, 128, 130, 132, 135, 136, 137, 149, 175, 176, 177, 179, 182, 210, 211, 213, 215, 218, 246, 257, 258, 260, 318, 327, 328, 337, 339, 340, 343, 344, 347, 348, 362, 609, 618, 674, 679, 688, 690, 692, 694, 696, 727, 728, 729, 730, 731, 732, 733, 734, 735, 741, 798, 800, 829, 835, 838, 847, 850, 868, 873, 876, 893, 894, 895, 896, 899, 904, 905, 911, 912, 915, 929, 932, 934, 936, 937, 939, 940, 998, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026], "dev": [18, 24, 25, 72, 73, 74, 76, 122, 128, 132, 134, 136, 318, 327, 352], "null": 18, "ce": 18, "cli": 18, "containerd": 18, "io": 18, "compos": [18, 121, 126, 149], "plugin": 18, "systemctl": 18, "permiss": 18, "relat": [18, 19, 121, 130, 148, 318], "post": [18, 137, 911, 912, 915, 998, 1004], "It": [18, 19, 21, 115, 116, 118, 119, 121, 123, 125, 126, 129, 132, 134, 135, 136, 160, 161, 162, 163, 164, 165, 166, 169, 171, 175, 176, 177, 179, 182, 184, 185, 188, 190, 191, 193, 196, 198, 199, 202, 204, 205, 207, 208, 220, 221, 223, 226, 228, 232, 233, 237, 238, 240, 241, 245, 246, 252, 255, 262, 265, 318, 363, 368, 369, 372, 374, 377, 378, 381, 382, 385, 387, 390, 391, 394, 396, 399, 400, 403, 404, 407, 408, 411, 412, 415, 416, 419, 420, 423, 424, 427, 428, 431, 432, 435, 436, 439, 440, 443, 444, 447, 449, 452, 453, 456, 457, 460, 461, 464, 465, 468, 469, 472, 473, 476, 477, 480, 481, 484, 485, 488, 489, 492, 493, 496, 501, 504, 505, 508, 509, 512, 513, 516, 517, 520, 521, 524, 525, 528, 529, 532, 533, 536, 537, 538, 539, 542, 544, 547, 548, 551, 552, 555, 556, 559, 560, 563, 564, 567, 568, 571, 573, 576, 578, 581, 582, 585, 586, 589, 590, 594, 595, 599, 600, 604, 605, 608, 609, 621, 622, 624, 627, 631, 632, 633, 635, 638, 641, 649, 662, 665, 666, 690, 723, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 739, 740, 741, 742, 745, 747, 749, 750, 752, 753, 755, 759, 761, 762, 764, 765, 768, 769, 771, 773, 775, 776, 778, 779, 781, 782, 784, 788, 789, 791, 792, 794, 795, 797, 798, 800, 801, 803, 804, 806, 807, 809, 810, 812, 813, 814, 817, 819, 822, 824, 827, 829, 830, 833, 835, 838, 839, 842, 843, 846, 847, 850, 851, 854, 855, 858, 859, 862, 863, 866, 869, 872, 873, 876, 877, 880, 881, 884, 885, 888, 911, 912, 915, 917, 918, 919, 920, 922, 923, 925, 928, 929, 930, 933, 934, 942, 943, 944, 947, 949, 952, 987, 988, 991, 993, 996], "headach": 18, "arm": [18, 19], "m1": 18, "instead": [18, 19, 20, 117, 118, 119, 121, 122, 126, 129, 132, 134, 135, 149], "featur": [18, 116, 117, 135, 998], "vm": 18, "azur": 18, "cloud": [18, 148], "mean": [18, 19, 64, 65, 72, 73, 109, 110, 113, 114, 115, 119, 121, 122, 126, 127, 128, 129, 132, 134, 135, 136, 137, 148, 149, 318, 347, 348, 349, 350, 362, 609, 632, 889, 890, 891, 892, 893, 899, 917, 922, 934, 935, 954, 998, 1010], "configur": [18, 19, 21, 72, 73, 127, 318, 361, 893, 906], "defin": [18, 20, 116, 117, 118, 121, 127, 134, 136, 149, 368, 539, 542, 560, 563, 609, 662, 741, 747, 749, 756, 758, 789, 791, 917, 919, 920, 954, 959, 962, 963, 966, 967, 970], "dockerfil": [18, 21], "longer": [18, 121, 127, 129], "worri": 18, "platform": 18, "agnost": [18, 117, 125, 132, 134, 137, 149, 998], "usual": [18, 121], "studio": 18, "favourit": 18, "extens": [18, 19, 118, 121, 175, 176, 177, 179, 182, 184, 185, 188, 190, 191, 193, 196, 198, 199, 202, 204, 205, 210, 213, 220, 221, 223, 226, 228, 232, 233, 237, 238, 240, 241, 245, 246, 267, 270, 368, 369, 372, 382, 385, 387, 390, 391, 394, 408, 411, 428, 431, 432, 435, 440, 443, 465, 468, 497, 500, 537, 548, 551, 564, 567, 568, 571, 573, 576, 582, 585, 586, 589, 595, 599, 600, 604, 741, 750, 752, 753, 755, 829, 843, 846, 847, 850, 863, 866, 934, 935, 936, 940, 943, 944, 947, 954, 959, 962, 987, 988, 991], "theme": 18, "too": [18, 19, 130, 149, 368, 382, 385, 539, 542], "done": [18, 19, 119, 121, 130, 135], "unsupport": [18, 127, 130, 246, 286, 287], "old": [18, 72, 73, 129], "slow": 18, "ipad": 18, "long": [18, 19, 119, 728, 738], "browser": 18, "cool": [18, 116], "requisit": 18, "head": [18, 126, 728, 739, 998, 1019, 1030], "pane": [18, 19], "readi": [18, 20], "begin": [18, 893, 894, 904], "outlin": [18, 19, 20, 115, 118, 121, 122, 126, 129, 134], "green": [18, 19, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 1044, 1045], "dropdown": 18, "tab": [18, 135, 998], "master": [18, 19, 126], "vs": [18, 121], "view": [18, 19, 175, 193, 196, 728, 731, 735], "log": [18, 19, 38, 39, 83, 84, 122, 126, 129, 132, 135, 175, 207, 208, 368, 509, 512, 517, 520, 741, 788, 998], "built": [18, 121, 133, 175, 176, 177, 318, 1019, 1030, 1031, 1032], "bottom": 18, "box": 18, "patient": 18, "upto": 18, "15": [18, 38, 39, 101, 102, 119, 121, 368, 408, 411, 564, 567, 568, 569, 728, 731, 741, 753, 755, 779, 781, 798, 800, 829, 863, 866, 917, 919, 920, 921, 929, 932, 934, 935, 954, 955, 958], "minut": 18, "launch": 18, "12": [18, 99, 100, 101, 102, 119, 121, 126, 368, 408, 411, 428, 431, 440, 443, 564, 567, 609, 627, 645, 690, 692, 695, 741, 753, 755, 779, 781, 798, 800, 829, 847, 850, 855, 858, 863, 866, 911, 912, 914, 915, 916, 917, 919, 920, 921, 929, 933, 934, 935, 954, 955, 958], "output": [18, 72, 73, 115, 116, 117, 118, 119, 121, 122, 125, 126, 128, 129, 132, 134, 136, 137, 149, 160, 161, 162, 163, 164, 165, 166, 169, 171, 175, 176, 177, 179, 182, 184, 185, 188, 190, 191, 193, 196, 198, 199, 202, 204, 205, 207, 208, 210, 213, 220, 221, 223, 226, 228, 232, 233, 237, 238, 240, 241, 245, 246, 252, 255, 262, 265, 318, 327, 328, 362, 363, 368, 369, 372, 374, 377, 378, 381, 382, 385, 387, 390, 391, 394, 396, 399, 400, 403, 404, 407, 408, 411, 412, 415, 416, 419, 420, 423, 424, 427, 428, 431, 432, 435, 436, 439, 440, 443, 444, 447, 449, 452, 453, 456, 457, 460, 461, 464, 465, 468, 469, 472, 473, 476, 477, 480, 481, 484, 485, 488, 489, 492, 493, 496, 501, 504, 505, 508, 509, 512, 513, 516, 517, 520, 521, 524, 525, 528, 529, 532, 533, 536, 537, 538, 539, 542, 544, 547, 548, 551, 552, 555, 556, 559, 560, 563, 564, 567, 568, 571, 573, 576, 578, 581, 582, 585, 586, 589, 590, 594, 595, 599, 600, 604, 605, 608, 609, 620, 621, 622, 624, 627, 628, 631, 632, 633, 635, 637, 638, 641, 649, 662, 665, 666, 690, 701, 723, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 745, 747, 749, 750, 752, 753, 755, 759, 761, 762, 764, 765, 768, 769, 771, 773, 775, 776, 778, 779, 781, 782, 784, 788, 789, 791, 792, 794, 795, 797, 798, 800, 801, 803, 804, 806, 807, 809, 810, 812, 813, 814, 817, 819, 822, 824, 827, 829, 830, 833, 835, 838, 839, 842, 843, 846, 847, 850, 851, 854, 855, 858, 859, 862, 863, 866, 869, 872, 873, 876, 877, 880, 881, 884, 885, 888, 893, 906, 911, 912, 915, 917, 918, 919, 920, 922, 923, 925, 928, 929, 933, 943, 944, 947, 949, 952, 954, 955, 958, 959, 962, 963, 966, 967, 970, 971, 974, 975, 978, 979, 982, 983, 986, 987, 988, 991, 993, 996, 998, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1027, 1028, 1029, 1030], "That": [18, 19, 121, 134, 135, 136, 368, 560, 563], "alreadi": [18, 19, 72, 73, 117, 123, 126, 134, 149, 318, 368, 432, 435, 465, 468, 539, 542, 564, 567, 605, 608, 741, 779, 781, 998], "refer": [18, 19, 117, 121, 122, 127, 149, 175, 190, 191, 368, 461, 464, 509, 512, 690, 692, 695, 697, 699, 741, 804, 806, 810, 812, 954, 975, 978, 983, 986, 987, 988, 991, 993, 996, 1019, 1029], "approach": [18, 19, 121, 122, 126, 134, 135, 149], "colour": 18, "applic": [18, 127, 128, 136, 728, 739, 740, 893, 899, 905], "good": [18, 19, 20, 21, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 132, 136], "chanc": 18, "vscode": 18, "show": [18, 19, 72, 73, 119, 121, 129, 148, 149, 998], "explor": [18, 133, 137, 148], "troubleshoot": 18, "sometim": [18, 19, 121], "ever": [18, 19, 20, 21, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129], "64": [18, 121, 135, 136, 368, 582, 585, 586, 589, 728, 734, 735, 741, 779, 781, 954, 955, 958, 998, 1019, 1030], "bit": [18, 119, 121, 122, 126, 134, 246, 280, 281, 284, 288, 291, 368, 412, 415, 416, 419, 424, 427, 954, 971, 974, 979, 982], "usr": 18, "more": [18, 19, 20, 24, 25, 115, 116, 117, 119, 121, 122, 123, 124, 125, 126, 129, 130, 131, 132, 133, 134, 135, 136, 137, 148, 149, 175, 176, 177, 246, 257, 260, 368, 461, 464, 741, 765, 768, 829, 847, 850, 934, 935, 936, 940, 942, 998], "nutshel": [18, 117], "hook": 18, "lint": 18, "accept": [18, 19, 27, 117, 118, 119, 121, 122, 125, 126, 128, 129, 134, 175, 176, 177, 179, 182, 184, 185, 188, 190, 191, 193, 196, 198, 199, 202, 204, 205, 207, 208, 210, 213, 220, 221, 223, 226, 228, 232, 233, 237, 238, 240, 241, 245, 246, 267, 270, 368, 369, 372, 382, 385, 387, 390, 391, 394, 408, 411, 428, 431, 432, 435, 440, 443, 465, 468, 525, 528, 529, 532, 537, 548, 551, 560, 563, 564, 567, 568, 571, 573, 576, 582, 585, 586, 589, 595, 599, 600, 604, 609, 637, 728, 731, 740, 741, 742, 745, 750, 752, 753, 755, 829, 843, 846, 847, 850, 863, 866, 911, 912, 915, 934, 935, 936, 940, 943, 944, 947, 954, 959, 962, 963, 966, 987, 988, 991, 998], "fix": [18, 19], "fail": [18, 20, 120, 121, 130, 132, 134], "attempt": [18, 130, 149], "succe": 18, "problemat": 18, "appli": [18, 19, 20, 22, 23, 24, 25, 27, 30, 31, 32, 33, 34, 35, 38, 39, 40, 41, 42, 43, 48, 49, 50, 51, 52, 53, 54, 55, 60, 61, 66, 67, 70, 71, 72, 73, 79, 80, 83, 84, 85, 86, 87, 88, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 105, 106, 111, 112, 117, 118, 119, 121, 122, 124, 126, 127, 128, 129, 132, 134, 135, 136, 137, 147, 149, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 179, 180, 185, 186, 193, 194, 199, 200, 215, 216, 223, 224, 228, 230, 233, 235, 241, 243, 246, 267, 268, 269, 271, 305, 308, 369, 370, 371, 373, 382, 383, 384, 386, 391, 392, 393, 395, 432, 433, 434, 465, 466, 467, 568, 569, 570, 572, 573, 574, 575, 577, 595, 596, 597, 598, 600, 601, 602, 603, 609, 610, 611, 612, 614, 631, 632, 633, 638, 639, 640, 642, 680, 681, 682, 683, 690, 692, 693, 694, 696, 710, 712, 714, 716, 728, 737, 739, 740, 741, 742, 743, 744, 746, 773, 775, 782, 784, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 834, 863, 864, 865, 867, 873, 876, 889, 890, 891, 893, 899, 902, 905, 906, 911, 912, 913, 914, 915, 916, 919, 921, 936, 937, 938, 939, 988, 989, 990, 992, 993, 994, 995, 997, 998, 1005, 1006, 1007, 1033, 1034], "proce": [18, 19, 20, 21, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129], "modifi": [18, 19, 118, 122, 127, 128, 130, 132], "properli": [18, 115], "enter": [18, 19, 117, 125, 127, 128, 318, 690, 727], "unsur": [18, 19, 20, 21, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129], "feel": [18, 19, 20, 21, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 131, 998], "server": [19, 998], "appropri": [19, 68, 69, 113, 114, 121, 124, 368, 382, 385, 539, 542, 929, 930], "context": [19, 119, 121, 126, 127, 128, 318, 609, 660, 728, 739, 1019, 1030], "suitabl": [19, 116, 126], "quick": [19, 115, 136], "alwai": [19, 20, 72, 73, 116, 117, 118, 121, 122, 123, 125, 126, 129, 130, 132, 134, 149, 246, 252, 255, 368, 382, 385, 539, 542, 609, 653, 690, 706, 708, 723], "correct": [19, 20, 64, 65, 109, 110, 115, 117, 122, 126, 127, 128, 130, 246, 313, 829, 830, 833, 954, 975, 976, 977, 978, 983, 984, 985, 986, 998], "tendenc": 19, "gener": [19, 20, 21, 41, 68, 69, 72, 73, 86, 113, 114, 115, 116, 117, 118, 119, 122, 125, 126, 127, 128, 129, 130, 131, 132, 134, 136, 137, 148, 149, 172, 175, 176, 177, 179, 182, 184, 185, 188, 190, 191, 193, 196, 198, 199, 202, 204, 205, 207, 208, 220, 221, 223, 226, 228, 232, 233, 237, 238, 240, 241, 245, 246, 267, 270, 368, 369, 372, 387, 390, 391, 394, 428, 431, 432, 435, 440, 443, 465, 468, 537, 548, 551, 560, 563, 573, 576, 582, 585, 586, 589, 610, 613, 615, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 641, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 684, 685, 686, 687, 688, 689, 690, 706, 708, 741, 753, 755, 829, 843, 846, 863, 866, 917, 918, 919, 920, 923, 925, 927, 934, 935, 936, 940, 943, 944, 947, 954, 959, 962, 998, 1035, 1039], "land": 19, "end": [19, 126, 129, 131, 148, 149, 175, 176, 177, 368, 400, 403, 998, 1004], "world": 19, "come": [19, 20, 121, 136, 147, 998, 1004], "fly": 19, "hard": [19, 134], "receiv": [19, 121, 127, 128, 318, 327, 328, 609, 616, 659, 1019, 1029], "respons": [19, 21], "internship": 19, "comment": [19, 130], "trigger": 19, "unansw": 19, "label": [19, 132, 133, 137, 813, 814, 817, 819, 822, 824, 827], "respond": 19, "remov": [19, 20, 21, 72, 73, 118, 121, 122, 127, 129, 137, 741, 753, 755, 765, 768, 801, 803, 829, 869, 872, 889, 890, 891], "someon": [19, 149], "els": [19, 20, 116, 122, 123, 129, 132, 134, 136, 137, 149, 609, 619, 630, 634, 893, 903], "strive": [19, 121, 149], "repli": 19, "newli": [19, 121, 129, 172, 173, 246, 252, 255, 609, 620], "place": [19, 72, 73, 115, 116, 117, 118, 119, 121, 122, 126, 128, 130, 137, 175, 176, 177, 179, 182, 184, 185, 188, 190, 191, 193, 196, 198, 199, 202, 204, 205, 207, 208, 210, 213, 215, 218, 220, 221, 223, 226, 228, 232, 233, 237, 238, 240, 241, 245, 246, 267, 270, 318, 363, 368, 369, 372, 382, 385, 387, 390, 391, 394, 408, 411, 428, 431, 432, 435, 440, 443, 465, 468, 537, 548, 551, 564, 567, 568, 571, 573, 576, 582, 585, 586, 589, 595, 599, 600, 604, 609, 637, 651, 652, 653, 728, 731, 740, 741, 742, 745, 750, 752, 753, 755, 829, 843, 846, 847, 850, 863, 866, 911, 912, 915, 934, 935, 936, 940, 943, 944, 947, 954, 959, 962, 987, 988, 991, 1035, 1036, 1037, 1038, 1039, 1040], "bug": [19, 121], "serv": [19, 117, 121, 122, 125, 126, 131, 998], "suspect": 19, "behaviour": [19, 117, 118, 121, 125, 126, 129, 134], "observ": 19, "confid": 19, "noth": [19, 72, 73], "wrong": 19, "someth": [19, 116, 135, 136, 149], "bet": 19, "act": [19, 119, 149], "placehold": [19, 117, 125, 130, 893, 905], "sub": [19, 20, 72, 73, 115, 121, 126, 134, 135, 136, 318, 343, 344, 347, 348, 349, 350, 741, 753, 755, 829, 868, 889, 890, 891, 892, 998], "mark": [19, 121], "ii": [19, 954, 955, 958], "iii": 19, "titl": [19, 998], "issue_numb": 19, "delet": [19, 21], "No": [19, 132], "wait": [19, 72, 73, 74, 75, 76], "progress": [19, 126, 133, 137], "pr": 19, "soon": [19, 126, 147, 149, 998, 1004], "partial": [19, 72, 73, 1031, 1032], "solut": [19, 121, 126, 741, 789, 791], "review": [19, 116], "merg": 19, "everi": [19, 20, 21, 117, 119, 120, 121, 122, 123, 124, 126, 129, 132, 134, 136, 175, 198, 199, 202, 609, 610, 613], "shape": [19, 24, 25, 34, 35, 52, 53, 72, 73, 77, 78, 79, 80, 87, 88, 97, 98, 101, 102, 105, 106, 116, 117, 118, 119, 121, 127, 128, 129, 132, 134, 135, 136, 137, 160, 161, 162, 163, 164, 165, 166, 169, 171, 175, 176, 177, 179, 182, 184, 185, 188, 190, 191, 193, 196, 198, 199, 202, 204, 205, 207, 208, 210, 213, 220, 221, 222, 223, 226, 228, 232, 233, 237, 238, 239, 240, 241, 245, 246, 252, 255, 257, 260, 262, 263, 264, 265, 266, 318, 330, 358, 363, 368, 369, 372, 374, 377, 378, 381, 382, 385, 387, 390, 391, 394, 396, 399, 400, 403, 404, 407, 408, 411, 412, 415, 416, 419, 420, 423, 424, 427, 428, 431, 432, 435, 436, 439, 440, 443, 444, 447, 449, 452, 453, 456, 457, 460, 461, 464, 465, 468, 469, 472, 473, 476, 477, 480, 481, 484, 485, 488, 489, 492, 493, 496, 497, 500, 501, 504, 505, 508, 509, 512, 513, 516, 517, 520, 521, 524, 525, 528, 529, 532, 533, 536, 537, 538, 539, 542, 544, 547, 548, 551, 552, 555, 556, 559, 560, 563, 564, 567, 568, 571, 573, 576, 578, 581, 582, 585, 586, 589, 590, 594, 595, 599, 600, 604, 605, 608, 609, 621, 622, 624, 627, 631, 632, 633, 635, 638, 641, 646, 649, 662, 665, 666, 670, 674, 687, 690, 692, 694, 696, 723, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 739, 740, 741, 742, 745, 747, 749, 750, 752, 753, 755, 756, 758, 759, 761, 762, 764, 765, 768, 769, 771, 773, 775, 776, 778, 779, 781, 782, 784, 785, 787, 788, 789, 791, 792, 794, 795, 797, 798, 800, 801, 803, 804, 806, 807, 809, 810, 812, 813, 814, 817, 819, 822, 824, 827, 829, 830, 833, 835, 838, 839, 842, 843, 846, 847, 850, 851, 854, 855, 858, 859, 860, 861, 862, 863, 866, 868, 869, 872, 873, 876, 877, 880, 881, 884, 885, 888, 911, 912, 915, 917, 918, 919, 920, 921, 922, 923, 925, 926, 928, 929, 930, 932, 933, 937, 939, 943, 944, 947, 949, 952, 954, 955, 958, 987, 988, 991, 993, 996, 998, 1019, 1021, 1022, 1023, 1024, 1025, 1026, 1033, 1034], "move": [19, 72, 73, 116, 318, 363], "within": [19, 27, 30, 31, 121, 136, 149, 175, 176, 177, 917, 923, 925], "7": [19, 21, 24, 25, 38, 39, 50, 51, 52, 53, 74, 75, 83, 84, 95, 96, 99, 100, 101, 102, 119, 121, 122, 126, 129, 160, 162, 163, 318, 340, 368, 369, 372, 382, 383, 384, 385, 386, 391, 393, 408, 411, 412, 415, 428, 431, 432, 435, 440, 443, 457, 460, 465, 468, 477, 480, 497, 500, 537, 538, 564, 567, 568, 569, 570, 571, 573, 576, 582, 585, 595, 599, 600, 604, 609, 618, 627, 637, 690, 692, 695, 697, 699, 710, 712, 728, 734, 735, 740, 741, 747, 749, 750, 752, 753, 755, 779, 781, 798, 800, 813, 814, 815, 817, 818, 819, 822, 824, 825, 827, 828, 829, 830, 831, 833, 843, 846, 847, 850, 855, 858, 868, 877, 880, 911, 912, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 925, 929, 933, 934, 935, 954, 955, 958], "dai": 19, "close": [19, 118, 368, 461, 464, 564, 567, 741, 792, 794], "likewis": [19, 117, 118, 122, 126, 127, 135], "freed": 19, "flag": [19, 72, 73, 129, 134, 318, 337, 690, 706, 708], "purpos": [19, 21, 117, 119, 121, 122, 124, 125, 126, 131, 134, 368, 461, 464, 998], "remain": [19, 119, 149, 368, 382, 385, 539, 542, 560, 563, 829, 859, 862, 893, 899], "access": [19, 21, 72, 73, 127], "short": [19, 136, 728, 738], "basi": [19, 120, 135], "situat": [19, 137], "alloc": [19, 149, 175, 228, 232, 233, 237, 246, 252, 255, 318], "upon": [19, 119, 121, 129, 149], "period": 19, "prevent": [19, 129, 130, 134, 690, 692, 695, 697, 699, 710, 712, 954, 979, 982, 1035, 1036, 1037], "unabl": 19, "obvious": 19, "never": [19, 121, 126], "reflect": [19, 125], "qualiti": 19, "hypothet": 19, "frustrat": 19, "delai": 19, "busi": 19, "fine": [19, 134, 137], "becaus": [19, 117, 118, 121, 122, 123, 125, 127, 128, 129, 132, 136, 137, 149], "inact": 19, "limit": [19, 72, 73, 74, 75, 76, 119, 121, 130, 132, 135, 137, 149, 246, 281, 284, 288, 291, 609, 621, 622, 624, 829, 830, 833], "me": 19, "unfairli": 19, "definit": [19, 122, 127, 134, 741, 742, 745, 747, 749], "investig": 19, "Then": [19, 21, 134, 149], "practic": 19, "separ": [19, 121, 125, 130, 132, 134, 135], "branch": [19, 126, 149, 172, 173, 368, 400, 403], "simpli": [19, 22, 23, 24, 25, 32, 33, 34, 35, 38, 39, 40, 41, 42, 43, 48, 49, 50, 51, 52, 53, 54, 55, 60, 61, 66, 67, 70, 71, 72, 73, 79, 80, 83, 84, 85, 86, 87, 88, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 105, 106, 111, 112, 117, 118, 119, 121, 122, 125, 126, 128, 129, 132, 136, 137, 166, 167, 168, 170, 179, 180, 185, 186, 193, 194, 199, 200, 215, 216, 223, 224, 228, 230, 233, 235, 241, 243, 267, 268, 269, 271, 368, 369, 370, 371, 373, 382, 383, 384, 386, 391, 392, 393, 395, 432, 433, 434, 461, 464, 465, 466, 467, 568, 569, 570, 572, 573, 574, 575, 577, 595, 596, 597, 598, 600, 601, 602, 603, 610, 611, 612, 614, 638, 639, 640, 642, 680, 681, 682, 683, 692, 693, 694, 696, 742, 743, 744, 746, 814, 815, 816, 818, 819, 820, 821, 823, 824, 825, 826, 828, 830, 831, 832, 834, 863, 864, 865, 867, 912, 913, 914, 916, 919, 921, 936, 937, 938, 939, 988, 989, 990, 992, 993, 994, 995, 997], "role": [19, 133], "kept": [19, 72, 73, 74, 75, 76, 129, 889, 890, 891], "date": 19, "upstream": [19, 120], "complic": [19, 132], "root": [19, 21, 135, 368, 582, 585, 917, 918, 922], "merge_with_upstream": 19, "sh": 19, "name_of_your_branch": 19, "resolv": [19, 954, 971, 974, 979, 982], "clone": [19, 21, 72, 73, 318, 339, 340, 341, 342], "push": [19, 120, 130], "both": [19, 117, 118, 119, 121, 122, 126, 128, 129, 132, 134, 135, 136, 137, 148, 149, 175, 176, 177, 179, 182, 184, 185, 188, 190, 191, 193, 196, 198, 199, 202, 204, 205, 207, 208, 210, 213, 220, 221, 223, 226, 228, 232, 233, 237, 238, 240, 241, 245, 246, 267, 270, 304, 368, 369, 372, 382, 385, 387, 390, 391, 394, 432, 435, 465, 468, 537, 548, 551, 556, 559, 568, 571, 573, 576, 582, 585, 586, 589, 595, 599, 609, 637, 690, 692, 695, 728, 731, 740, 741, 742, 745, 747, 749, 753, 755, 765, 768, 804, 806, 829, 863, 866, 911, 912, 915, 934, 936, 940, 954, 959, 962, 987, 988, 991], "abort": 19, "tediou": 19, "resolut": 19, "stash": 19, "reinstat": 19, "correspond": [19, 72, 73, 74, 75, 117, 118, 119, 120, 121, 122, 125, 126, 127, 246, 257, 260, 368, 400, 403, 556, 559, 741, 747, 749, 756, 758, 789, 791, 829, 835, 838, 863, 866, 917, 918, 929, 930, 931, 934, 935, 936, 940, 942, 954, 971, 974, 975, 978, 979, 982, 983, 986], "fetch": 19, "uncommit": 19, "unstag": 19, "untrack": 19, "comprehens": 19, "explan": [19, 117, 118, 126, 134], "atlassian": 19, "tutori": 19, "wrote": 19, "piec": [19, 122, 124, 125, 132], "inform": [19, 121, 130, 246, 281, 284, 288, 291, 609, 615, 690, 723], "tag": 19, "usu": 19, "describ": [19, 121, 133, 137, 954, 955, 958, 971, 974, 975, 978, 979, 982], "navig": [19, 115], "blame": 19, "revis": 19, "author": [19, 998], "eg": [19, 121], "16": [19, 48, 49, 83, 84, 101, 102, 119, 121, 135, 368, 595, 596, 598, 599, 728, 734, 741, 742, 743, 745, 753, 755, 779, 781, 919, 921, 929, 933, 954, 955, 958], "5": [19, 21, 24, 25, 38, 39, 40, 41, 48, 49, 52, 53, 54, 55, 74, 75, 79, 80, 83, 84, 85, 86, 87, 88, 97, 98, 99, 100, 101, 102, 117, 119, 121, 123, 134, 135, 136, 160, 162, 163, 165, 175, 199, 202, 210, 213, 223, 226, 238, 240, 241, 245, 246, 267, 269, 270, 271, 318, 340, 356, 368, 369, 371, 372, 373, 382, 383, 384, 385, 386, 387, 390, 391, 393, 394, 395, 404, 407, 408, 411, 424, 427, 428, 431, 432, 433, 434, 435, 440, 443, 465, 466, 467, 468, 477, 480, 497, 500, 537, 538, 544, 547, 548, 551, 564, 567, 568, 569, 570, 571, 573, 575, 576, 577, 582, 585, 586, 589, 595, 596, 598, 599, 600, 601, 603, 604, 609, 610, 611, 618, 627, 637, 638, 641, 642, 674, 679, 690, 692, 694, 695, 696, 728, 731, 733, 734, 740, 741, 742, 743, 745, 747, 749, 750, 752, 753, 755, 762, 764, 779, 781, 798, 800, 801, 803, 813, 824, 827, 829, 830, 831, 832, 833, 834, 835, 838, 843, 846, 847, 850, 855, 858, 859, 862, 863, 865, 866, 867, 868, 877, 880, 893, 896, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 928, 929, 931, 932, 933, 934, 935, 936, 940, 943, 944, 947, 954, 955, 958, 959, 962, 987, 988, 991, 1019, 1030], "past": 19, "l": [19, 115, 741, 742, 745, 756, 758, 765, 768, 801, 803], "filepath": [19, 72, 73], "grep": 19, "v": [19, 132, 135, 136, 137, 728, 740, 998, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1039, 1041, 1042], "commit_id": 19, "handi": [19, 121], "histori": 19, "toggl": 19, "vertic": 19, "highlight": [19, 119], "previou": [19, 117, 121, 137, 149, 609, 687, 690, 697, 699, 710, 712], "shown": [19, 68, 69, 72, 73, 113, 114, 117, 119, 121, 130, 132, 134, 149, 368, 408, 411, 428, 431, 440, 443, 564, 567, 600, 604, 741, 750, 752, 829, 843, 846, 847, 850, 934, 935, 943, 944, 947], "whenev": [19, 121, 134, 135], "think": [19, 119], "interact": [19, 121, 998], "gain": [19, 131, 136, 1010], "quit": [19, 20, 118, 121, 122, 124, 125], "repeat": [19, 52, 53, 72, 73, 97, 98, 118, 119, 121, 123, 125, 126, 130, 609, 633, 829, 881, 884], "yourself": [19, 20, 121, 148], "simpler": [19, 134], "cannot": [19, 123, 127, 137], "least": [19, 119, 121, 122, 125, 741, 765, 768], "final": [19, 118, 119, 122, 125, 127, 129, 130, 132, 134, 135, 175, 204, 205, 207, 208, 609, 636, 1019, 1030], "tickbox": 19, "lower": [19, 72, 73, 119, 121, 132, 149, 175, 190, 191, 228, 232, 368, 537, 741, 742, 745, 917, 923, 925], "corner": 19, "without": [19, 72, 73, 116, 117, 122, 125, 126, 128, 130, 132, 134, 135, 136, 148, 149, 609, 664, 669, 829, 859, 862, 893, 895, 934, 935, 936, 940, 942], "span": 19, "intent": [19, 129], "larg": [19, 135, 368, 382, 385, 539, 542], "discourag": 19, "philosophi": 19, "increment": [19, 609, 652], "frequent": [19, 20], "valuabl": 19, "infrequ": 19, "earli": [19, 998], "wast": 19, "spot": [19, 122], "mistak": [19, 130], "propos": 19, "mountain": 19, "around": [19, 72, 73, 74, 75, 76, 117, 122, 125, 134, 149], "advoc": [19, 149], "individu": [19, 20, 122], "per": [19, 121, 135, 318, 728, 729, 730, 731, 732, 733, 734, 735, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026], "style": [19, 929, 932], "ve": [19, 131, 134, 917, 918, 998], "were": [19, 72, 73, 116, 121, 126, 130], "actual": [19, 115, 122, 129, 131, 134, 136, 149], "aim": [19, 131], "part": [19, 116, 120, 121, 122, 132, 133, 137, 148, 149, 175, 228, 232, 233, 237, 690, 697, 699, 702, 704, 710, 712, 714, 716, 718, 720, 1031, 1032], "subsect": 19, "session": [19, 998], "block": [19, 121, 122, 130, 131, 133, 137, 149, 318, 690, 727, 998], "smaller": [19, 132, 137, 829, 830, 833, 863, 866, 954, 971, 974, 979, 982], "edit": 19, "exact": [19, 72, 73, 132, 934, 935], "beauti": 19, "particularli": [19, 135, 149], "concern": [19, 115, 119, 126, 129, 131], "effici": [19, 117, 121, 122, 126, 129, 130, 132, 135, 149], "difficult": [19, 121, 149, 934, 935, 936, 940, 942], "undo": 19, "stress": 19, "frequenc": [19, 609, 636], "pycharm": 19, "pytest": [19, 121], "button": 19, "declar": 19, "insid": [19, 21, 116, 121, 127], "exec": 19, "rm": 19, "rf": 19, "cp": 19, "ivy_contain": 19, "bash": [19, 21], "test_ivi": [19, 121], "test_funct": [19, 121], "test_cor": 19, "test_imag": 19, "test_random_crop": 19, "header": 19, "summari": [19, 72, 73, 79, 80, 121, 246, 273, 274, 275, 310, 311, 312, 318, 331, 332, 609, 625, 629, 647, 690, 722], "q": [19, 149, 728, 740, 741, 756, 758, 785, 787], "array_api_test": 19, "test_creation_funct": 19, "test_arang": 19, "window": [19, 21, 728, 729, 730, 731, 732, 733, 734, 735, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026], "variou": [19, 117, 118, 124, 148], "valu": [19, 24, 25, 52, 53, 60, 61, 72, 73, 74, 75, 76, 97, 98, 117, 119, 121, 122, 126, 127, 128, 129, 130, 132, 134, 137, 149, 175, 176, 177, 190, 191, 198, 199, 202, 204, 205, 207, 208, 246, 252, 255, 273, 274, 275, 318, 330, 361, 362, 368, 369, 372, 374, 377, 382, 385, 387, 390, 396, 399, 432, 435, 449, 452, 453, 456, 465, 468, 469, 472, 473, 476, 477, 480, 493, 496, 497, 500, 537, 538, 539, 542, 548, 551, 552, 555, 556, 559, 564, 567, 600, 604, 605, 608, 609, 621, 622, 624, 625, 630, 636, 637, 638, 641, 647, 650, 654, 664, 665, 666, 667, 668, 669, 689, 690, 692, 695, 697, 699, 701, 710, 712, 723, 727, 728, 729, 730, 731, 732, 733, 734, 735, 738, 739, 740, 741, 773, 775, 782, 784, 785, 787, 788, 789, 791, 792, 794, 795, 797, 807, 809, 829, 830, 833, 839, 840, 841, 842, 855, 858, 859, 862, 885, 887, 888, 889, 890, 891, 893, 897, 898, 899, 900, 901, 906, 909, 910, 911, 912, 915, 917, 918, 919, 920, 922, 923, 925, 927, 929, 930, 931, 933, 934, 935, 936, 938, 940, 941, 942, 943, 944, 947, 949, 952, 954, 959, 962, 963, 966, 967, 970, 971, 974, 975, 978, 979, 982, 983, 986, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1039], "cpu": [19, 72, 73, 128, 149, 175, 204, 205, 207, 208, 318, 337, 338, 340, 354, 357, 359, 363, 364, 366, 367, 609, 637, 638, 641, 662, 665, 666, 917, 918, 919, 920, 922, 923, 925, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1039, 1041, 1042], "gpu": [19, 101, 102, 128, 134, 149, 318, 337, 340, 353, 355, 359, 361, 366, 919, 921], "combin": [19, 72, 73, 74, 75, 76, 119, 121, 122, 125, 126, 137, 741, 747, 749], "wherebi": [20, 126, 893, 905], "broad": 20, "distribut": [20, 72, 73, 121, 128, 149, 318, 339, 343, 344, 345, 346, 728, 736, 813, 814, 817, 819, 822, 824, 827, 917, 918, 919, 920, 922, 923, 925, 1019, 1027, 1031, 1032], "across": [20, 72, 73, 117, 119, 121, 122, 126, 127, 318, 327, 328, 339, 340, 342, 343, 344, 345, 346, 350, 360, 361, 609, 617, 618, 893, 899, 929, 931], "todo": 20, "commit": [20, 121], "NOT": [20, 368, 525, 528], "static": [20, 70, 71, 72, 73, 77, 78, 79, 80, 83, 84, 85, 86, 87, 88, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 105, 106, 107, 108, 111, 112, 113, 114, 118, 119, 122, 149, 166, 170, 172, 173, 267, 271, 369, 373, 382, 386, 391, 395, 568, 572, 573, 577, 595, 596, 600, 601, 610, 614, 638, 642, 680, 681, 742, 746, 814, 818, 819, 823, 824, 828, 830, 834, 863, 867, 912, 916, 919, 921, 936, 937, 988, 992, 993, 997], "method": [20, 22, 23, 24, 25, 32, 33, 34, 35, 38, 39, 40, 41, 42, 43, 48, 49, 50, 51, 52, 53, 54, 55, 60, 61, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 79, 80, 83, 84, 85, 86, 87, 88, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 105, 106, 111, 112, 113, 114, 116, 117, 118, 119, 121, 122, 125, 130, 132, 133, 136, 137, 149, 160, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 175, 179, 180, 185, 186, 193, 194, 196, 199, 200, 215, 216, 223, 224, 228, 230, 233, 235, 241, 243, 267, 268, 269, 271, 368, 369, 370, 371, 373, 382, 383, 384, 386, 387, 390, 391, 392, 393, 395, 408, 411, 428, 431, 432, 433, 434, 435, 440, 443, 465, 466, 467, 468, 477, 480, 497, 500, 538, 544, 547, 548, 551, 564, 567, 568, 569, 570, 572, 573, 574, 575, 576, 577, 582, 585, 586, 589, 595, 596, 597, 598, 600, 601, 602, 603, 604, 609, 610, 611, 612, 614, 625, 626, 637, 638, 639, 640, 642, 665, 666, 679, 680, 681, 682, 683, 684, 685, 690, 692, 693, 694, 696, 710, 712, 714, 716, 727, 728, 734, 740, 741, 742, 743, 744, 746, 747, 749, 750, 752, 813, 814, 815, 816, 817, 818, 819, 820, 821, 823, 824, 825, 826, 828, 829, 830, 831, 832, 834, 843, 846, 847, 850, 855, 858, 863, 864, 865, 867, 868, 877, 880, 893, 894, 904, 905, 906, 912, 913, 914, 916, 917, 919, 921, 922, 923, 925, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 943, 944, 947, 954, 955, 958, 959, 962, 987, 988, 989, 990, 991, 992, 993, 994, 995, 997, 998, 1019, 1030, 1031, 1032], "instanc": [20, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 38, 39, 40, 41, 42, 43, 48, 49, 50, 51, 52, 53, 54, 55, 60, 61, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 79, 80, 83, 84, 85, 86, 87, 88, 93, 94, 95, 96, 97, 98, 99, 100, 105, 106, 111, 112, 113, 114, 117, 118, 119, 121, 122, 125, 127, 129, 135, 136, 137, 150, 158, 160, 162, 163, 164, 165, 166, 167, 168, 169, 171, 175, 176, 177, 179, 180, 182, 184, 185, 186, 188, 190, 191, 193, 194, 196, 198, 199, 200, 202, 204, 205, 207, 208, 210, 213, 215, 216, 220, 221, 223, 224, 226, 228, 230, 232, 233, 235, 237, 238, 240, 241, 243, 245, 246, 267, 268, 269, 270, 318, 327, 359, 368, 369, 370, 371, 372, 382, 383, 384, 385, 387, 390, 391, 392, 393, 394, 408, 411, 428, 431, 432, 433, 434, 435, 440, 443, 465, 466, 467, 468, 477, 480, 497, 500, 537, 538, 544, 547, 548, 551, 564, 567, 568, 569, 570, 571, 573, 574, 575, 576, 582, 585, 586, 589, 595, 597, 598, 599, 600, 602, 603, 604, 609, 610, 611, 612, 626, 637, 638, 639, 640, 653, 670, 679, 680, 682, 683, 684, 685, 692, 693, 694, 696, 728, 731, 734, 740, 741, 742, 743, 744, 745, 747, 749, 750, 752, 753, 755, 813, 814, 815, 816, 817, 819, 820, 821, 824, 825, 826, 829, 830, 831, 832, 843, 846, 847, 850, 855, 858, 863, 864, 865, 866, 868, 877, 880, 911, 912, 913, 914, 915, 917, 922, 923, 925, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 943, 944, 947, 954, 955, 958, 959, 962, 987, 988, 989, 990, 991, 993, 994, 995, 1008, 1009], "revers": [20, 24, 25, 74, 75, 118, 119, 137, 149, 609, 630, 829, 847, 850], "resourc": 20, "content": [20, 21, 72, 73, 129, 132, 135], "thei": [20, 72, 73, 115, 116, 119, 121, 122, 124, 126, 127, 128, 129, 130, 134, 135, 136, 137, 149, 246, 304, 889, 890, 891, 917, 918, 998, 1041, 1042], "hypothesi": 20, "cover": [20, 118, 119, 121, 122, 124, 131], "lambda": [20, 132, 135, 1035, 1038, 1040], "direct": [20, 136, 137, 148, 943, 949, 952], "bind": [20, 126], "special": [20, 24, 25, 74, 75, 116, 117, 118, 119, 125, 368, 369, 372, 374, 377, 378, 381, 382, 385, 387, 390, 391, 394, 396, 399, 400, 403, 428, 431, 432, 435, 436, 439, 440, 443, 457, 460, 461, 464, 465, 468, 501, 504, 505, 508, 513, 516, 517, 520, 539, 542, 556, 559, 560, 563, 564, 567, 568, 571, 573, 576, 578, 581, 582, 585, 595, 599, 600, 604, 605, 608, 954, 959, 962, 963, 966, 967, 970, 975, 978, 979, 982, 983, 986], "aforement": 20, "categori": [20, 116, 125, 126, 127, 131, 998], "parent": [20, 134, 690, 727], "arraywithelementwis": [20, 24, 25, 38, 125], "containerwithmanipul": [20, 74, 75, 97], "hint": [20, 116, 117, 118, 122, 125, 129, 130, 175, 176, 177, 179, 182, 184, 185, 188, 190, 191, 193, 196, 198, 199, 202, 204, 205, 207, 208, 210, 213, 220, 221, 223, 226, 228, 232, 233, 237, 238, 240, 241, 245, 246, 267, 270, 368, 369, 372, 382, 385, 387, 390, 391, 394, 408, 411, 428, 431, 432, 435, 440, 443, 465, 468, 537, 548, 551, 564, 567, 568, 571, 573, 576, 582, 585, 586, 589, 595, 599, 600, 604, 609, 637, 728, 731, 740, 741, 742, 745, 750, 752, 753, 755, 829, 843, 846, 847, 850, 863, 866, 911, 912, 915, 934, 935, 936, 940, 943, 944, 947, 954, 959, 962, 987, 988, 991], "its": [20, 21, 118, 121, 130, 246, 257, 260, 318, 362, 741, 765, 768, 829, 843, 846, 859, 862, 863, 866, 877, 880], "docstr": [20, 21, 22, 23, 24, 25, 32, 33, 34, 35, 38, 39, 40, 41, 42, 43, 48, 49, 50, 51, 52, 53, 54, 55, 60, 61, 66, 67, 70, 71, 79, 80, 83, 84, 85, 86, 87, 88, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 105, 106, 111, 112, 115, 116, 117, 122, 126, 130, 166, 167, 168, 170, 175, 176, 177, 179, 180, 182, 184, 185, 186, 188, 190, 191, 193, 194, 196, 198, 199, 200, 202, 204, 205, 210, 213, 215, 216, 220, 221, 223, 224, 226, 228, 230, 232, 233, 235, 237, 238, 240, 241, 243, 245, 246, 267, 268, 269, 270, 271, 368, 369, 370, 371, 372, 373, 382, 383, 384, 385, 386, 387, 390, 391, 392, 393, 394, 395, 408, 411, 428, 431, 432, 433, 434, 435, 440, 443, 465, 466, 467, 468, 497, 500, 537, 548, 551, 564, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 582, 585, 586, 589, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 610, 611, 612, 614, 638, 639, 640, 642, 680, 681, 682, 683, 692, 693, 694, 696, 741, 742, 743, 744, 746, 750, 752, 753, 755, 814, 815, 816, 818, 819, 820, 821, 823, 824, 825, 826, 828, 829, 830, 831, 832, 834, 843, 846, 847, 850, 863, 864, 865, 866, 867, 912, 913, 914, 916, 919, 921, 934, 935, 936, 937, 938, 939, 940, 943, 944, 947, 954, 959, 962, 987, 988, 989, 990, 991, 992, 993, 994, 995, 997], "thorough": [20, 117, 118, 121], "transpil": [20, 131, 133, 998, 1004], "builder": [21, 147, 149, 998], "maco": 21, "ubuntu": 21, "uid": 21, "make_docs_without_dock": 21, "rel": [21, 690, 697, 699, 702, 704, 710, 712, 714, 716, 718, 720, 741, 753, 755, 773, 775, 782, 784, 801, 803, 829, 847, 850, 863, 866, 943, 944, 947, 949, 952, 998], "synchron": 21, "rest": [21, 133, 137], "remove_doc": 21, "_": [21, 118, 121, 126, 129, 134, 135, 175, 176, 177, 179, 182, 184, 185, 188, 190, 191, 193, 196, 198, 199, 202, 204, 205, 220, 221, 223, 226, 228, 232, 233, 237, 238, 240, 241, 245, 246, 267, 270, 368, 369, 372, 387, 390, 391, 394, 428, 431, 432, 435, 440, 443, 465, 468, 537, 548, 551, 573, 576, 582, 585, 586, 589, 690, 692, 695, 697, 699, 741, 753, 755, 810, 812, 829, 843, 846, 863, 866, 934, 935, 943, 944, 947, 954, 959, 962], "indic": [21, 40, 41, 72, 73, 85, 86, 130, 133, 137, 160, 165, 368, 568, 571, 609, 637, 638, 639, 640, 641, 642, 649, 662, 665, 666, 728, 729, 730, 731, 732, 733, 734, 735, 741, 807, 809, 829, 863, 866, 893, 894, 896, 898, 900, 901, 902, 904, 907, 908, 909, 910, 911, 912, 915, 917, 918, 929, 930, 931, 932, 934, 935, 941, 943, 944, 947, 949, 952, 998, 1001, 1003, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1031, 1032], "privat": [21, 121, 1035, 1039], "fulfil": [21, 131, 998], "autogenerated_sourc": 21, "format": [21, 72, 73, 115, 118, 127, 128, 132, 134, 135, 246, 276, 279, 318, 338, 954, 955, 958, 998], "png": [21, 135], "_imag": 21, "lastli": 21, "structur": [21, 72, 73, 74, 75, 76, 116, 122, 125, 126, 135, 136, 609, 625, 893, 906], "rst": 21, "skip": [21, 72, 73, 121, 893, 906], "read": [21, 72, 73, 998], "partial_sourc": 21, "conf": 21, "copi": [21, 32, 33, 34, 35, 72, 73, 77, 78, 79, 80, 118, 123, 127, 132, 134, 135, 148, 149, 175, 179, 180, 181, 182, 183, 193, 196, 246, 252, 253, 254, 255, 256, 318, 363, 609, 626, 680, 684, 685, 829, 859, 862, 893, 895, 943, 949, 952], "create_rst_fil": 21, "filter": [21, 121, 728, 729, 730, 731, 732, 733, 734, 735, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026], "repres": [21, 121, 134, 175, 210, 213, 246, 280, 368, 378, 381, 382, 385, 391, 394, 404, 407, 440, 443, 539, 542, 578, 581, 600, 604, 690, 727, 728, 737, 741, 788, 789, 791], "overal": [21, 118, 126, 127, 128, 137], "markup": 21, "6": [21, 24, 25, 38, 39, 42, 43, 52, 53, 74, 75, 83, 84, 85, 86, 95, 96, 99, 100, 101, 102, 119, 121, 123, 126, 134, 135, 136, 160, 162, 163, 165, 175, 199, 202, 318, 340, 356, 368, 369, 370, 371, 372, 373, 382, 383, 384, 385, 386, 387, 390, 391, 394, 408, 411, 412, 415, 428, 431, 432, 433, 434, 435, 440, 443, 465, 468, 477, 480, 497, 500, 537, 538, 544, 547, 564, 567, 568, 569, 570, 571, 572, 573, 575, 576, 577, 582, 585, 586, 589, 595, 599, 600, 604, 609, 618, 627, 637, 638, 641, 642, 674, 679, 690, 692, 693, 695, 728, 731, 734, 735, 740, 741, 747, 749, 750, 752, 753, 755, 779, 781, 792, 794, 798, 800, 813, 814, 816, 817, 818, 819, 821, 823, 824, 826, 827, 828, 829, 830, 831, 833, 835, 838, 843, 846, 847, 850, 855, 858, 859, 862, 863, 866, 868, 877, 880, 911, 912, 914, 915, 916, 917, 918, 919, 920, 921, 929, 930, 933, 934, 935, 936, 940, 954, 955, 958, 959, 962], "extract": [21, 116], "get_functions_and_class": 21, "doctr": 21, "readm": [21, 149], "module_nam": 21, "copy_readme_to_rst": 21, "tabl": 21, "toc": 21, "tree": 21, "append": [21, 72, 73, 121, 132, 135, 368, 416, 419, 741, 753, 755, 765, 768], "append_toctree_to_rst": 21, "9": [21, 24, 25, 38, 39, 42, 43, 52, 53, 74, 75, 83, 84, 87, 88, 101, 102, 119, 121, 135, 136, 368, 382, 383, 384, 385, 386, 391, 394, 408, 411, 412, 415, 537, 538, 564, 567, 568, 571, 582, 585, 586, 589, 609, 637, 690, 692, 693, 694, 695, 696, 697, 698, 699, 700, 710, 711, 712, 713, 728, 731, 734, 735, 741, 747, 749, 750, 752, 753, 755, 779, 781, 792, 794, 798, 800, 829, 830, 831, 833, 847, 850, 855, 858, 863, 866, 868, 917, 918, 919, 920, 921, 929, 933, 934, 935, 954, 955, 958, 1035, 1036, 1037], "index": [21, 32, 33, 72, 73, 77, 78, 122, 126, 134, 174, 175, 190, 191, 210, 211, 212, 213, 214, 318, 359, 609, 615, 637, 638, 641, 829, 873, 876, 893, 896, 897, 900, 901, 902, 907, 909, 929, 930, 931, 932, 934, 935, 936, 940, 943, 944, 947, 1001, 1003], "create_index_rst": 21, "14": [21, 83, 84, 99, 100, 101, 102, 119, 121, 126, 368, 391, 394, 428, 431, 568, 572, 690, 692, 695, 728, 740, 741, 753, 755, 779, 781, 912, 914, 916, 919, 921, 934, 935, 954, 955, 958], "\u03c0": [21, 368, 374, 377, 387, 390, 396, 399, 400, 403], "namespac": [21, 116, 127, 132, 137], "arraywithactiv": [22, 24, 25], "abc": [22, 23, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 72, 73, 134, 318, 327, 333, 609, 634, 1031, 1032, 1035, 1039], "softplu": [22, 23, 70, 71, 160, 170, 998], "variant": [22, 23, 24, 25, 32, 33, 34, 35, 38, 39, 40, 41, 42, 43, 48, 49, 50, 51, 52, 53, 54, 55, 60, 61, 66, 67, 70, 71, 79, 80, 83, 84, 85, 86, 87, 88, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 105, 106, 111, 112, 118, 119, 166, 167, 168, 170, 179, 180, 185, 186, 193, 194, 199, 200, 215, 216, 223, 224, 228, 230, 233, 235, 241, 243, 267, 268, 269, 271, 369, 370, 371, 373, 382, 383, 384, 386, 391, 392, 393, 395, 432, 433, 434, 465, 466, 467, 568, 569, 570, 572, 573, 574, 575, 577, 595, 596, 597, 598, 600, 601, 602, 603, 610, 611, 612, 614, 638, 639, 640, 642, 680, 681, 682, 683, 692, 693, 694, 696, 742, 743, 744, 746, 814, 815, 816, 818, 819, 820, 821, 823, 824, 825, 826, 828, 830, 831, 832, 834, 863, 864, 865, 867, 912, 913, 914, 916, 919, 921, 936, 937, 938, 939, 988, 989, 990, 992, 993, 994, 995, 997], "wrap": [22, 23, 24, 25, 27, 32, 33, 34, 35, 38, 39, 40, 41, 42, 43, 48, 49, 50, 51, 52, 53, 54, 55, 60, 61, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 79, 80, 83, 84, 85, 86, 87, 88, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 105, 106, 111, 112, 114, 115, 117, 118, 121, 122, 123, 125, 126, 127, 128, 129, 132, 134, 137, 149, 150, 158, 166, 167, 168, 170, 179, 180, 185, 186, 193, 194, 199, 200, 215, 216, 223, 224, 228, 230, 233, 235, 241, 243, 267, 268, 269, 271, 369, 370, 371, 373, 382, 383, 384, 386, 391, 392, 393, 395, 432, 433, 434, 465, 466, 467, 568, 569, 570, 572, 573, 574, 575, 577, 595, 596, 597, 598, 600, 601, 602, 603, 609, 610, 611, 612, 614, 620, 638, 639, 640, 642, 680, 681, 682, 683, 690, 692, 693, 694, 696, 726, 742, 743, 744, 746, 814, 815, 816, 818, 819, 820, 821, 823, 824, 825, 826, 828, 830, 831, 832, 834, 863, 864, 865, 867, 912, 913, 914, 916, 919, 921, 936, 937, 938, 939, 988, 989, 990, 992, 993, 994, 995, 997], "minim": [22, 23, 24, 25, 32, 33, 34, 35, 38, 39, 40, 41, 42, 43, 48, 49, 50, 51, 52, 53, 54, 55, 60, 61, 66, 67, 70, 71, 79, 80, 83, 84, 85, 86, 87, 88, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 105, 106, 111, 112, 118, 129, 132, 166, 167, 168, 170, 179, 180, 185, 186, 193, 194, 199, 200, 215, 216, 223, 224, 228, 230, 233, 235, 241, 243, 267, 268, 269, 271, 369, 370, 371, 373, 382, 383, 384, 386, 391, 392, 393, 395, 432, 433, 434, 465, 466, 467, 568, 569, 570, 572, 573, 574, 575, 577, 595, 596, 597, 598, 600, 601, 602, 603, 610, 611, 612, 614, 638, 639, 640, 642, 680, 681, 682, 683, 692, 693, 694, 696, 742, 743, 744, 746, 814, 815, 816, 818, 819, 820, 821, 823, 824, 825, 826, 828, 830, 831, 832, 834, 863, 864, 865, 867, 912, 913, 914, 916, 919, 921, 936, 937, 938, 939, 988, 989, 990, 992, 993, 994, 995, 997], "arraywithcr": [24, 25, 32], "arraywithdatatyp": [24, 25, 34], "arraywithdevic": [24, 25, 36, 134], "arraywithgener": [24, 25, 40, 134], "arraywithgradi": [24, 25, 42, 134], "arraywithimag": [24, 25, 44, 134], "arraywithlay": [24, 25, 46], "arraywithlinearalgebra": [24, 25, 48], "arraywithloss": [24, 25, 50], "arraywithmanipul": [24, 25, 52], "arraywithnorm": [24, 25, 54], "arraywithrandom": [24, 25, 56, 134], "arraywithsearch": [24, 25, 58], "arraywithset": [24, 25, 60], "arraywithsort": [24, 25, 62], "arraywithstatist": [24, 25, 64], "arraywithutil": [24, 25, 66], "properti": [24, 25, 72, 73, 119, 121, 122, 126, 134, 135, 136, 318, 330, 1031, 1032, 1035, 1036, 1037, 1038, 1040], "__add__": [24, 25, 74, 75, 117, 118, 119, 125, 126, 134], "y": [24, 25, 38, 39, 40, 41, 48, 49, 50, 51, 52, 53, 60, 61, 66, 67, 74, 75, 83, 84, 85, 86, 93, 94, 95, 96, 97, 98, 101, 102, 105, 106, 111, 112, 116, 119, 123, 126, 132, 134, 160, 162, 163, 164, 165, 166, 169, 171, 175, 198, 199, 202, 210, 213, 220, 221, 223, 226, 241, 245, 246, 252, 255, 318, 338, 352, 356, 361, 368, 369, 370, 371, 372, 373, 382, 383, 384, 385, 386, 387, 390, 391, 392, 393, 394, 395, 400, 403, 408, 411, 412, 415, 424, 427, 428, 431, 432, 433, 434, 435, 436, 439, 440, 443, 457, 460, 465, 466, 467, 468, 477, 480, 497, 500, 537, 538, 544, 547, 548, 551, 564, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 582, 585, 586, 589, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 609, 610, 611, 612, 613, 614, 617, 618, 626, 627, 634, 635, 637, 638, 639, 640, 641, 642, 672, 679, 680, 681, 682, 683, 684, 685, 690, 701, 728, 734, 735, 737, 741, 742, 743, 744, 745, 746, 747, 749, 750, 752, 762, 764, 779, 781, 798, 800, 801, 803, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 838, 843, 846, 847, 850, 855, 858, 859, 862, 863, 864, 865, 866, 867, 868, 877, 880, 893, 896, 917, 918, 919, 920, 921, 922, 923, 925, 928, 929, 930, 931, 932, 933, 934, 936, 937, 938, 939, 940, 943, 944, 947, 954, 955, 958, 959, 962, 975, 978, 979, 982, 987, 988, 989, 990, 991, 992, 993, 994, 995, 997], "z": [24, 25, 38, 39, 40, 41, 50, 51, 74, 75, 83, 84, 85, 86, 95, 96, 119, 123, 126, 132, 134, 318, 352, 368, 382, 383, 384, 385, 386, 408, 411, 428, 431, 477, 480, 497, 500, 537, 538, 609, 617, 618, 637, 638, 639, 640, 642, 672, 741, 747, 749, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 828, 829, 830, 833, 893, 896, 929, 930, 954, 955, 958, 959, 962], "mix": [24, 25, 40, 41, 74, 75, 95, 96, 115, 119, 121, 132, 246, 305, 308, 318, 356, 368, 382, 385, 408, 411, 428, 431, 477, 480, 497, 500, 538, 548, 551, 609, 610, 611, 626, 634, 637, 638, 641, 679, 680, 684, 685, 728, 731, 734, 735, 740, 741, 742, 745, 798, 800, 813, 814, 817, 818, 819, 823, 824, 827, 828, 829, 830, 833, 911, 912, 915, 929, 933, 954, 955, 958, 963, 966], "__le__": [24, 25], "equal": [24, 25, 38, 39, 72, 73, 83, 84, 119, 126, 127, 175, 190, 191, 198, 199, 202, 246, 252, 255, 368, 416, 419, 424, 427, 481, 484, 485, 488, 556, 559, 564, 567, 609, 610, 613, 617, 618, 741, 753, 755, 773, 775, 782, 784, 829, 830, 833, 839, 842, 868, 885, 888, 917, 923, 925, 934, 935, 936, 940, 942, 943, 944, 947, 949, 952, 954, 963, 966, 975, 978, 979, 982, 983, 986], "element": [24, 25, 72, 73, 118, 121, 132, 137, 160, 161, 162, 163, 164, 165, 166, 169, 171, 175, 176, 177, 198, 199, 202, 228, 232, 233, 237, 318, 341, 345, 349, 368, 369, 372, 374, 377, 378, 381, 382, 385, 387, 390, 391, 394, 396, 399, 400, 403, 404, 407, 408, 411, 412, 415, 416, 419, 420, 423, 424, 427, 428, 431, 432, 435, 436, 439, 440, 443, 444, 447, 449, 452, 453, 456, 457, 460, 461, 464, 465, 468, 469, 472, 473, 476, 477, 480, 481, 484, 485, 488, 489, 492, 493, 496, 497, 500, 501, 504, 505, 508, 509, 512, 513, 516, 517, 520, 521, 524, 525, 528, 529, 532, 533, 536, 537, 538, 539, 542, 544, 547, 548, 551, 552, 555, 556, 559, 560, 563, 564, 567, 568, 571, 573, 576, 578, 581, 582, 585, 586, 589, 590, 594, 595, 599, 600, 604, 605, 608, 609, 617, 618, 621, 622, 624, 627, 628, 635, 649, 680, 684, 685, 690, 727, 728, 736, 741, 747, 749, 756, 758, 765, 768, 785, 787, 792, 794, 829, 830, 833, 847, 850, 855, 858, 863, 866, 868, 869, 872, 893, 896, 917, 918, 929, 932, 933, 934, 935, 936, 940, 941, 942, 943, 949, 952, 954, 955, 958, 959, 962, 963, 966, 967, 970, 971, 974, 975, 978, 979, 982, 983, 986, 987, 988, 991, 993, 996, 1019, 1027], "wise": [24, 25, 72, 73, 132, 137, 160, 161, 162, 163, 164, 165, 166, 169, 171, 368, 369, 372, 374, 377, 382, 385, 387, 390, 396, 399, 400, 403, 408, 411, 412, 415, 416, 419, 420, 423, 424, 427, 428, 431, 444, 447, 449, 452, 453, 456, 469, 472, 473, 476, 477, 480, 493, 496, 497, 500, 517, 520, 521, 524, 525, 528, 529, 532, 533, 536, 537, 538, 539, 542, 548, 551, 556, 559, 560, 563, 590, 594, 609, 635, 829, 830, 833], "result": [24, 25, 72, 73, 74, 75, 76, 116, 117, 118, 119, 121, 125, 126, 127, 129, 135, 149, 160, 161, 162, 163, 164, 165, 166, 169, 171, 175, 176, 177, 179, 182, 184, 185, 188, 190, 191, 193, 196, 198, 199, 202, 204, 205, 207, 208, 220, 221, 223, 226, 228, 232, 233, 237, 238, 240, 241, 245, 246, 252, 255, 262, 265, 305, 308, 318, 327, 363, 368, 369, 372, 374, 377, 378, 381, 382, 385, 387, 390, 391, 394, 396, 399, 400, 403, 404, 407, 408, 411, 412, 415, 416, 419, 420, 423, 424, 427, 428, 431, 432, 435, 436, 439, 440, 443, 444, 447, 449, 452, 453, 456, 457, 460, 461, 464, 465, 468, 469, 472, 473, 476, 477, 480, 481, 484, 485, 488, 489, 492, 493, 496, 497, 500, 501, 504, 505, 508, 509, 512, 513, 516, 517, 520, 521, 524, 525, 528, 529, 532, 533, 536, 537, 538, 539, 542, 544, 547, 548, 551, 552, 555, 556, 559, 560, 563, 564, 567, 568, 571, 573, 576, 578, 581, 582, 585, 586, 589, 590, 594, 595, 599, 600, 604, 605, 608, 609, 621, 622, 624, 627, 628, 631, 632, 633, 635, 637, 638, 641, 649, 662, 665, 666, 690, 723, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 739, 740, 741, 742, 745, 747, 749, 750, 752, 753, 755, 759, 761, 762, 764, 765, 768, 769, 771, 773, 775, 776, 778, 779, 781, 782, 784, 788, 789, 791, 792, 794, 795, 797, 798, 800, 801, 803, 804, 806, 807, 809, 810, 812, 813, 814, 817, 819, 822, 824, 827, 829, 830, 833, 835, 838, 839, 842, 843, 846, 847, 850, 851, 854, 855, 858, 859, 862, 863, 866, 869, 872, 873, 876, 877, 880, 881, 884, 885, 888, 893, 896, 906, 911, 912, 915, 917, 918, 919, 920, 922, 923, 925, 928, 929, 930, 931, 933, 934, 935, 942, 943, 944, 947, 949, 952, 954, 955, 958, 959, 962, 963, 966, 967, 970, 971, 974, 975, 978, 979, 982, 983, 986, 987, 988, 991, 993, 996, 998], "bool": [24, 25, 27, 28, 29, 30, 31, 34, 35, 72, 73, 113, 114, 119, 126, 127, 129, 130, 137, 172, 173, 175, 198, 246, 252, 255, 267, 268, 270, 273, 274, 275, 276, 279, 286, 293, 294, 295, 297, 299, 300, 302, 317, 318, 337, 338, 353, 362, 365, 368, 408, 411, 412, 415, 420, 423, 428, 431, 449, 452, 473, 476, 477, 480, 481, 484, 485, 488, 489, 492, 493, 496, 497, 500, 521, 524, 525, 528, 529, 532, 548, 551, 609, 610, 613, 617, 618, 627, 630, 634, 636, 646, 648, 653, 655, 656, 657, 658, 672, 673, 688, 689, 690, 723, 727, 741, 742, 745, 769, 771, 792, 794, 807, 809, 829, 868, 889, 890, 891, 892, 893, 894, 895, 899, 903, 904, 905, 917, 918, 929, 930, 931, 943, 944, 947, 949, 952, 954, 959, 962, 963, 966, 967, 970, 971, 974, 975, 978, 979, 982, 983, 986, 987, 988, 991, 993, 996], "true": [24, 25, 34, 35, 40, 41, 48, 49, 62, 63, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 119, 121, 122, 126, 127, 129, 130, 132, 134, 135, 136, 137, 160, 161, 166, 168, 170, 172, 173, 175, 176, 178, 179, 181, 183, 185, 187, 189, 190, 192, 193, 195, 197, 199, 201, 203, 204, 205, 206, 207, 209, 210, 212, 214, 215, 217, 219, 220, 222, 223, 225, 227, 228, 229, 231, 233, 234, 236, 238, 239, 241, 242, 244, 246, 252, 253, 254, 255, 256, 257, 259, 261, 262, 264, 266, 267, 268, 269, 270, 271, 276, 278, 281, 283, 285, 288, 290, 292, 294, 296, 298, 299, 301, 303, 305, 307, 309, 317, 318, 337, 354, 358, 359, 368, 369, 371, 373, 374, 376, 378, 380, 382, 384, 386, 387, 389, 391, 393, 395, 396, 398, 400, 402, 404, 406, 408, 410, 411, 412, 414, 416, 418, 420, 422, 424, 426, 428, 430, 431, 432, 434, 436, 438, 440, 442, 444, 446, 448, 449, 451, 453, 455, 457, 459, 461, 463, 465, 467, 469, 471, 473, 475, 476, 477, 479, 480, 481, 483, 484, 485, 487, 488, 489, 491, 492, 493, 495, 496, 497, 499, 500, 501, 503, 505, 507, 509, 511, 513, 515, 517, 519, 521, 523, 525, 527, 528, 529, 531, 532, 533, 535, 539, 541, 543, 544, 546, 548, 550, 551, 552, 554, 556, 558, 560, 562, 564, 566, 568, 570, 572, 573, 575, 577, 578, 580, 582, 584, 586, 588, 590, 591, 593, 595, 596, 598, 600, 601, 603, 605, 607, 609, 610, 611, 612, 613, 614, 617, 618, 619, 620, 622, 623, 627, 634, 636, 638, 640, 642, 648, 649, 656, 670, 672, 673, 679, 680, 681, 683, 685, 687, 689, 690, 697, 698, 699, 700, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 723, 727, 728, 736, 741, 742, 744, 745, 746, 765, 767, 769, 771, 792, 793, 794, 807, 809, 813, 814, 816, 817, 818, 819, 821, 822, 823, 824, 826, 827, 828, 829, 830, 832, 834, 835, 837, 839, 841, 843, 845, 847, 849, 851, 853, 855, 857, 859, 861, 863, 865, 867, 868, 869, 871, 873, 875, 877, 879, 881, 883, 885, 887, 889, 890, 891, 892, 893, 894, 903, 904, 906, 912, 914, 916, 917, 918, 923, 924, 926, 929, 930, 931, 933, 934, 935, 936, 937, 939, 940, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 957, 959, 961, 962, 963, 965, 966, 967, 969, 970, 971, 973, 974, 975, 977, 978, 979, 981, 982, 983, 985, 986, 987, 988, 990, 991, 992, 993, 994, 995, 996, 997, 1019, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040], "__radd__": [24, 25, 74, 75, 118, 119], "adam_upd": [24, 25, 87, 88, 136, 690], "invok": [24, 25], "function_nam": [24, 25], "variabl": [24, 25, 27, 28, 29, 30, 31, 72, 73, 74, 75, 117, 118, 121, 123, 126, 127, 129, 130, 135, 136, 137, 149, 609, 619, 651, 652, 653, 654, 655, 656, 658, 677, 690, 697, 699, 701, 702, 704, 706, 708, 710, 712, 714, 716, 718, 720, 723, 726, 728, 739, 741, 789, 791, 889, 890, 891, 892, 911, 912, 915, 998, 1008, 1009, 1010, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042], "input": [24, 25, 27, 30, 31, 42, 43, 72, 73, 74, 75, 76, 83, 84, 85, 86, 87, 88, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 116, 117, 118, 119, 121, 122, 123, 125, 126, 127, 128, 129, 132, 134, 135, 136, 137, 149, 150, 158, 160, 161, 162, 163, 164, 165, 166, 169, 171, 172, 173, 175, 176, 177, 179, 182, 184, 185, 188, 190, 191, 193, 196, 198, 199, 202, 204, 205, 207, 208, 210, 213, 215, 218, 220, 221, 223, 226, 228, 232, 233, 237, 238, 240, 241, 245, 246, 252, 255, 257, 260, 262, 265, 267, 270, 272, 273, 274, 275, 276, 279, 280, 294, 297, 299, 302, 304, 305, 308, 313, 317, 318, 327, 328, 337, 338, 339, 340, 342, 343, 346, 350, 356, 362, 363, 368, 369, 372, 373, 374, 377, 378, 381, 382, 385, 386, 387, 390, 391, 394, 395, 396, 399, 400, 403, 404, 407, 408, 411, 412, 415, 416, 419, 420, 423, 424, 427, 428, 431, 432, 435, 436, 439, 440, 443, 444, 447, 449, 452, 453, 456, 457, 460, 461, 464, 465, 468, 469, 472, 473, 476, 477, 480, 481, 484, 485, 488, 489, 492, 493, 496, 497, 500, 501, 504, 505, 508, 509, 512, 513, 516, 517, 520, 521, 524, 525, 528, 529, 532, 533, 536, 537, 538, 539, 542, 544, 547, 548, 551, 552, 555, 556, 559, 560, 563, 564, 567, 568, 571, 572, 573, 576, 577, 578, 581, 582, 585, 586, 589, 590, 594, 595, 596, 599, 600, 601, 604, 605, 608, 609, 610, 613, 614, 615, 617, 618, 619, 621, 622, 624, 626, 627, 628, 630, 631, 632, 633, 634, 635, 636, 637, 638, 641, 642, 646, 648, 649, 651, 652, 653, 655, 656, 657, 658, 662, 665, 666, 672, 674, 677, 679, 680, 681, 684, 685, 688, 689, 690, 692, 693, 694, 695, 696, 701, 706, 708, 723, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 745, 746, 747, 749, 750, 752, 753, 755, 756, 758, 759, 761, 762, 764, 765, 768, 769, 771, 773, 775, 776, 778, 779, 781, 782, 784, 785, 787, 788, 789, 791, 792, 794, 795, 797, 798, 800, 801, 803, 804, 806, 807, 809, 810, 812, 813, 814, 817, 818, 819, 822, 823, 824, 827, 828, 829, 830, 833, 834, 835, 838, 839, 842, 843, 846, 847, 850, 851, 854, 855, 858, 859, 862, 863, 866, 867, 868, 869, 872, 873, 876, 877, 880, 881, 884, 885, 888, 889, 890, 891, 892, 893, 896, 911, 912, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 925, 928, 929, 930, 931, 932, 933, 934, 935, 936, 940, 941, 942, 943, 944, 947, 949, 952, 954, 955, 958, 959, 962, 963, 966, 967, 970, 971, 974, 975, 978, 979, 982, 983, 986, 987, 988, 991, 993, 996, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1033, 1034], "arang": [24, 25, 74, 75, 127, 175, 204, 205, 207, 208, 954, 955, 958, 998], "arg_info": [24, 25, 74, 75, 609], "arg_nam": [24, 25, 74, 75, 609], "argmax": [24, 25, 74, 75, 929, 998], "argmin": [24, 25, 74, 75, 929, 998], "array_equ": [24, 25, 74, 75, 609], "arrays_equ": [24, 25, 72, 73, 74, 75, 609], "as_ivy_dev": [24, 25, 74, 75, 134, 318], "as_ivy_dtyp": [24, 25, 74, 75, 246], "as_native_dev": [24, 25, 74, 75, 318], "as_native_dtyp": [24, 25, 74, 75, 246], "assert_supports_inplac": [24, 25, 74, 75, 609], "cache_fn": [24, 25, 74, 75, 122, 609], "clear_mem_on_dev": [24, 25, 74, 75, 318], "clip_matrix_norm": [24, 25, 74, 75, 609], "clip_vector_norm": [24, 25, 85, 86, 609], "closest_valid_dtyp": [24, 25, 74, 75, 246], "container_typ": [24, 25, 74, 75, 609], "conv1d": [24, 25, 74, 75, 728, 1019], "conv1d_transpos": [24, 25, 74, 75, 728], "conv2d": [24, 25, 74, 75, 728, 998, 1019], "conv2d_transpos": [24, 25, 74, 75, 728], "conv3d": [24, 25, 74, 75, 728, 1019], "conv3d_transpos": [24, 25, 74, 75, 728], "copy_arrai": [24, 25, 74, 75, 609], "cumprod": [24, 25, 74, 75, 137, 609], "cumsum": [24, 25, 74, 75, 609, 998], "current_backend_str": [24, 25, 74, 75, 609], "default_devic": [24, 25, 74, 75, 128, 132, 318, 356, 359, 366], "default_dtyp": [24, 25, 74, 75, 122, 127, 246], "default_float_dtyp": [24, 25, 74, 75, 127, 246], "default_int_dtyp": [24, 25, 74, 75, 127, 246], "depthwise_conv2d": [24, 25, 74, 75, 728, 998], "dev_clon": [24, 25, 72, 73, 318], "dev_clone_arrai": [24, 25, 74, 75, 318], "dev_clone_it": [24, 25, 74, 75, 318], "dev_clone_nest": [24, 25, 74, 75, 318], "dev_dist": [24, 25, 72, 73, 318], "dev_dist_arrai": [24, 25, 74, 75, 318], "dev_dist_it": [24, 25, 74, 75, 318], "dev_dist_nest": [24, 25, 74, 75, 318], "dev_unifi": [24, 25, 74, 75, 318], "dev_unify_arrai": [24, 25, 74, 75, 318], "dev_unify_it": [24, 25, 74, 75, 318], "dev_unify_nest": [24, 25, 74, 75, 318], "dev_util": [24, 25, 74, 75, 128, 318], "dropout": [24, 25, 74, 75, 135, 728, 1019, 1030], "dtype": [24, 25, 32, 33, 34, 35, 64, 65, 72, 73, 77, 78, 79, 80, 85, 86, 109, 110, 116, 119, 121, 122, 127, 128, 130, 134, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 198, 199, 200, 201, 202, 203, 204, 205, 206, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 238, 239, 240, 241, 242, 243, 244, 245, 246, 250, 251, 252, 253, 254, 255, 256, 257, 260, 267, 268, 269, 270, 271, 272, 273, 274, 275, 280, 281, 284, 286, 287, 288, 291, 293, 294, 297, 299, 302, 304, 305, 306, 308, 310, 311, 312, 317, 318, 358, 368, 424, 427, 609, 617, 618, 662, 680, 681, 683, 684, 728, 736, 829, 843, 846, 917, 923, 925, 929, 930, 931, 943, 949, 952, 954, 971, 972, 973, 974, 975, 978, 979, 980, 981, 982, 987, 988, 991, 998, 1010, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1041, 1042], "dtype_bit": [24, 25, 74, 75, 246], "einops_rearrang": [24, 25, 72, 73, 609], "einops_reduc": [24, 25, 72, 73, 609], "einops_repeat": [24, 25, 72, 73, 609], "empti": [24, 25, 72, 73, 74, 75, 125, 127, 128, 175, 176, 177, 690, 727, 954, 975, 978, 979, 982, 987, 988, 991, 993, 996], "execute_with_gradi": [24, 25, 74, 75, 126, 135, 136, 137, 149, 690, 998], "ey": [24, 25, 74, 75, 137, 175, 728, 731, 735], "floormod": [24, 25, 74, 75, 609, 998], "fourier_encod": [24, 25, 74, 75, 609], "function_supported_dtyp": [24, 25, 74, 75, 246], "function_unsupported_dtyp": [24, 25, 74, 75, 246], "gather": [24, 25, 72, 73, 609, 638, 641], "gelu": [24, 25, 74, 75, 160, 1005], "get_all_arrays_in_memori": [24, 25, 74, 75, 609], "get_all_ivy_arrays_on_dev": [24, 25, 74, 75, 128, 318], "get_min_bas": [24, 25, 74, 75, 609], "get_min_denomin": [24, 25, 74, 75, 609], "get_num_dim": [24, 25, 74, 75, 609, 998], "get_referrers_recurs": [24, 25, 74, 75, 609], "gpu_is_avail": [24, 25, 74, 75, 318], "gradient_descent_upd": [24, 25, 87, 88, 690, 889, 890, 891, 892, 998], "handle_nest": [24, 25, 74, 75, 122, 126, 150], "handle_out_argu": [24, 25, 74, 75, 117, 124, 127, 128, 129, 150], "has_nan": [24, 25, 72, 73, 609], "indices_wher": [24, 25, 74, 75, 130, 609, 998], "infer_devic": [24, 25, 74, 75, 117, 127, 128, 150], "infer_dtyp": [24, 25, 74, 75, 117, 127, 128, 150], "inplace_arrays_support": [24, 25, 74, 75, 609], "inplace_decr": [24, 25, 74, 75, 609], "inplace_incr": [24, 25, 74, 75, 609], "inplace_upd": [24, 25, 72, 73, 129, 609, 1008, 1009], "inplace_variables_support": [24, 25, 74, 75, 609], "inputs_to_native_arrai": [24, 25, 74, 75, 125, 150], "invalid_dtyp": [24, 25, 74, 75, 246], "is_arrai": [24, 25, 609], "is_ivy_arrai": [24, 25, 129, 134, 609], "is_ivy_contain": [24, 25, 74, 75, 609], "is_native_arrai": [24, 25, 134, 609], "is_vari": [24, 25, 87, 88, 129, 690], "boolean": [24, 25, 72, 73, 121, 126, 175, 198, 246, 252, 255, 293, 317, 318, 353, 365, 368, 408, 411, 412, 415, 420, 423, 428, 431, 521, 524, 525, 528, 529, 532, 533, 536, 609, 610, 613, 617, 618, 648, 649, 650, 654, 655, 656, 657, 658, 670, 677, 689, 690, 706, 708, 727, 889, 890, 891, 893, 903, 954, 967, 970], "trainabl": [24, 25, 118, 133, 135, 136, 690, 706, 708, 1008, 1009, 1031, 1032, 1041], "lamb_upd": [24, 25, 87, 88, 690], "lars_upd": [24, 25, 87, 88, 690], "leaky_relu": [24, 25, 74, 75, 121, 160, 998], "linear": [24, 25, 74, 75, 118, 132, 135, 136, 137, 160, 161, 162, 163, 609, 636, 728, 736, 789, 791, 998, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026], "linspac": [24, 25, 74, 75, 132, 175, 176, 177, 998], "logspac": [24, 25, 74, 75, 132, 175], "lstm_updat": [24, 25, 74, 75, 132, 728], "mt": [24, 25, 134], "match_kwarg": [24, 25, 74, 75, 609], "matrix_pow": [24, 25, 74, 75, 741], "maximum": [24, 25, 72, 73, 74, 75, 76, 119, 132, 135, 137, 318, 342, 346, 350, 362, 368, 609, 621, 622, 624, 636, 690, 710, 712, 829, 830, 833, 893, 905, 929, 930, 954, 959, 962, 967, 970, 998], "minimum": [24, 25, 72, 73, 132, 137, 318, 368, 369, 372, 609, 644, 645, 667, 668, 675, 676, 829, 830, 833, 929, 931, 954, 959, 962, 967, 970, 998], "multi_head_attent": [24, 25, 74, 75, 126, 129, 728], "multinomi": [24, 25, 74, 75, 917], "multiprocess": [24, 25, 72, 73, 74, 75, 76, 135, 149, 318, 327, 609], "ndim": [24, 25, 121, 134, 741, 785, 787, 792, 794], "dimens": [24, 25, 72, 73, 74, 75, 76, 119, 121, 132, 135, 160, 165, 175, 228, 232, 233, 237, 318, 349, 609, 631, 632, 633, 636, 646, 662, 688, 728, 729, 730, 731, 732, 733, 734, 735, 738, 741, 742, 745, 747, 749, 750, 752, 753, 755, 756, 758, 759, 761, 762, 764, 765, 768, 769, 771, 773, 775, 776, 778, 782, 784, 785, 787, 789, 791, 792, 794, 795, 797, 801, 803, 804, 806, 807, 809, 813, 819, 822, 824, 827, 829, 835, 838, 843, 846, 847, 850, 851, 854, 855, 858, 859, 862, 863, 866, 868, 869, 872, 873, 876, 889, 890, 891, 892, 917, 928, 929, 930, 931, 932, 934, 935, 936, 940, 942, 954, 955, 958, 959, 962, 963, 966, 967, 970, 971, 974, 975, 978, 979, 982, 983, 986, 987, 988, 991, 993, 996, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1029, 1030], "ax": [24, 25, 48, 49, 52, 53, 72, 73, 97, 98, 116, 119, 121, 127, 134, 318, 362, 609, 627, 741, 769, 771, 789, 791, 798, 799, 800, 807, 809, 829, 839, 842, 847, 850, 851, 852, 853, 854, 863, 866, 869, 872, 877, 880, 885, 888, 929, 930, 931, 954, 959, 962, 963, 966, 967, 970, 971, 974, 975, 978, 979, 982, 983, 986, 987, 988, 991, 993, 996], "nonzero": [24, 25, 74, 75, 368, 382, 385, 539, 542, 929], "num_arrays_in_memori": [24, 25, 74, 75, 609], "num_cpu_cor": [24, 25, 74, 75, 128, 318], "num_gpu": [24, 25, 74, 75, 121, 128, 318], "num_ivy_arrays_on_dev": [24, 25, 74, 75, 318], "one_hot": [24, 25, 74, 75, 137, 609, 998], "ones": [24, 25, 72, 73, 74, 75, 121, 132, 134, 135, 175, 190, 191, 223, 226, 368, 432, 435, 609, 662, 998], "optimizer_upd": [24, 25, 87, 88, 690], "outputs_to_ivy_arrai": [24, 25, 74, 75, 117, 125, 127, 128, 150], "percent_used_mem_on_dev": [24, 25, 74, 75, 318], "print_all_arrays_in_memori": [24, 25, 74, 75, 609], "print_all_ivy_arrays_on_dev": [24, 25, 74, 75, 318], "promote_typ": [24, 25, 74, 75, 246], "queue_timeout": [24, 25, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 609], "randint": [24, 25, 74, 75, 101, 102, 917, 921, 998], "random_norm": [24, 25, 74, 75, 121, 728, 731, 734, 735, 741, 792, 794, 917, 934, 935], "random_uniform": [24, 25, 101, 102, 121, 128, 136, 917, 998], "relu": [24, 25, 68, 69, 74, 75, 135, 136, 160, 161, 162, 998], "scaled_dot_product_attent": [24, 25, 74, 75, 728], "scatter_flat": [24, 25, 74, 75, 609], "scatter_nd": [24, 25, 74, 75, 134, 609, 998], "seed": [24, 25, 72, 73, 74, 75, 917, 998], "set_default_devic": [24, 25, 74, 75, 128, 318, 366], "set_default_dtyp": [24, 25, 74, 75, 122, 127, 246], "set_default_float_dtyp": [24, 25, 74, 75, 127, 246], "set_default_int_dtyp": [24, 25, 74, 75, 127, 246], "set_min_bas": [24, 25, 74, 75, 609], "set_min_denomin": [24, 25, 74, 75, 609], "set_queue_timeout": [24, 25, 74, 75, 609], "set_shape_array_mod": [24, 25, 74, 75, 609, 673, 687], "set_split_factor": [24, 25, 74, 75, 318], "set_tmp_dir": [24, 25, 74, 75, 609], "set_with_grad": [24, 25, 74, 75, 690, 727], "shape_array_mod": [24, 25, 74, 75, 609, 670, 687], "shape_to_tupl": [24, 25, 74, 75, 127, 609], "shuffl": [24, 25, 72, 73, 917, 998], "sigmoid": [24, 25, 74, 75, 132, 135, 136, 160, 998], "size": [24, 25, 72, 73, 74, 75, 76, 121, 134, 135, 175, 204, 205, 207, 208, 318, 360, 361, 362, 609, 665, 672, 728, 740, 741, 753, 755, 769, 771, 779, 781, 785, 787, 792, 794, 804, 806, 829, 843, 846, 863, 866, 868, 869, 872, 917, 918, 922, 923, 925, 929, 930, 932, 987, 988, 991, 993, 996, 1019, 1020, 1021], "product": [24, 25, 126, 368, 539, 542, 609, 627, 728, 739, 740, 741, 747, 749, 765, 768, 779, 781, 798, 800, 804, 806, 954, 955, 958, 971, 974, 1019, 1030], "unknown": [24, 25], "model": [24, 25, 135, 136, 998], "slogdet": [24, 25, 74, 75, 741], "softmax": [24, 25, 68, 69, 74, 75, 160, 728, 739, 740, 998], "split_factor": [24, 25, 74, 75, 318, 327], "split_func_cal": [24, 25, 74, 75, 318], "stable_divid": [24, 25, 74, 75, 122, 609], "stable_pow": [24, 25, 74, 75, 609], "stop_gradi": [24, 25, 72, 73, 74, 75, 87, 88, 136, 318, 362, 690, 697, 698, 699, 700, 702, 703, 704, 705, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 889, 890, 891, 892, 998, 1035, 1036, 1037, 1038, 1039, 1040], "supports_inplac": [24, 25, 74, 75, 609], "tmp_dir": [24, 25, 74, 75, 609], "to_devic": [24, 25, 72, 73, 318, 337], "to_list": [24, 25, 72, 73, 609, 998], "to_native_arrays_and_back": [24, 25, 74, 75, 117, 124, 150], "to_scalar": [24, 25, 74, 75, 609], "total_mem_on_dev": [24, 25, 74, 75, 128, 318], "tpu_is_avail": [24, 25, 74, 75, 318], "try_else_non": [24, 25, 74, 75, 609], "type_promote_arrai": [24, 25, 74, 75, 246], "unique_al": [24, 25, 74, 75, 934], "unique_invers": [24, 25, 74, 75, 934], "unique_valu": [24, 25, 74, 75, 934], "unset_default_devic": [24, 25, 74, 75, 318], "unset_default_dtyp": [24, 25, 74, 75, 246], "unset_default_float_dtyp": [24, 25, 74, 75, 246], "unset_default_int_dtyp": [24, 25, 74, 75, 246], "unset_shape_array_mod": [24, 25, 74, 75, 609], "unset_with_grad": [24, 25, 74, 75, 690], "unstack": [24, 25, 72, 73, 132, 135, 609, 998], "used_mem_on_dev": [24, 25, 74, 75, 318], "valid_dtyp": [24, 25, 74, 75, 246], "value_is_nan": [24, 25, 74, 75, 609], "variable_data": [24, 25, 74, 75, 690], "with_grad": [24, 25, 74, 75, 690, 722], "collect": [27, 72, 73, 121, 148, 160, 172, 318, 609, 690, 728, 813, 893, 906, 911, 917, 1005, 1019, 1033, 1035], "args_to_ivi": 27, "include_deriv": [27, 28, 29, 30, 31, 893, 895, 905], "keyword": [27, 28, 29, 72, 73, 74, 75, 76, 116, 117, 121, 127, 128, 129, 135, 175, 210, 213, 318, 327, 328, 342, 346, 350, 609, 616, 659, 893, 899, 954, 979, 982, 1031, 1032], "nest": [27, 28, 29, 30, 31, 72, 73, 74, 75, 76, 116, 121, 122, 125, 126, 134, 135, 136, 149, 318, 342, 346, 350, 609, 679, 690, 727, 889, 890, 891, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 1031, 1032, 1035, 1036, 1037, 1038, 1039, 1040], "unchang": [27, 28, 29, 30, 31], "posit": [27, 28, 29, 38, 39, 83, 84, 117, 121, 135, 148, 174, 175, 190, 191, 246, 281, 284, 318, 342, 346, 350, 368, 369, 372, 481, 484, 485, 488, 539, 542, 560, 563, 609, 636, 741, 742, 745, 829, 843, 846, 863, 866, 917, 927, 929, 932, 987, 988, 991, 993, 996, 1008, 1009], "deriv": [27, 28, 29, 30, 31, 127, 128, 134, 136, 175, 185, 188, 199, 202, 223, 226, 241, 245, 690, 692, 695, 697, 699, 702, 704, 710, 712, 714, 716, 718, 720, 893, 895, 905, 1031, 1035, 1039, 1041], "tupl": [27, 28, 29, 30, 31, 48, 49, 60, 61, 72, 73, 116, 117, 121, 126, 127, 128, 130, 134, 135, 136, 149, 175, 179, 182, 215, 218, 246, 262, 265, 287, 313, 318, 337, 609, 636, 674, 728, 731, 734, 735, 738, 741, 773, 775, 782, 784, 792, 793, 794, 798, 800, 807, 809, 829, 835, 838, 839, 842, 847, 850, 851, 854, 863, 866, 869, 872, 873, 876, 885, 888, 889, 890, 891, 892, 893, 895, 896, 898, 900, 901, 902, 904, 905, 907, 908, 909, 910, 929, 932, 934, 935, 936, 938, 940, 941, 954, 959, 962, 963, 966, 967, 970, 971, 974, 975, 978, 979, 982, 983, 986, 987, 988, 991, 993, 996], "kei": [27, 28, 29, 72, 73, 74, 75, 76, 121, 126, 130, 135, 318, 330, 609, 615, 625, 728, 739, 740, 889, 890, 891, 893, 896, 902, 906, 1008, 1009, 1019, 1030, 1035, 1039], "word": [27, 28, 29, 175, 176, 177, 917, 923, 925, 1008, 1009], "args_to_n": [27, 129, 134], "to_ivi": [27, 72, 73, 134, 893, 906], "leaf": [27, 30, 31, 72, 73, 122, 126, 135, 893, 894, 903, 904], "union": [27, 30, 31, 40, 41, 48, 49, 72, 73, 116, 117, 119, 122, 125, 126, 127, 128, 129, 130, 132, 137, 160, 161, 162, 163, 164, 165, 166, 169, 171, 172, 173, 175, 176, 177, 179, 182, 184, 185, 188, 190, 191, 198, 199, 202, 204, 205, 207, 208, 210, 213, 215, 218, 220, 221, 223, 226, 228, 232, 233, 237, 238, 240, 241, 245, 246, 250, 251, 252, 255, 257, 260, 262, 265, 272, 273, 274, 275, 276, 279, 280, 281, 284, 288, 291, 293, 294, 297, 299, 302, 304, 305, 308, 310, 311, 312, 313, 317, 318, 334, 335, 336, 337, 338, 340, 343, 344, 345, 346, 351, 357, 359, 361, 362, 363, 364, 367, 368, 369, 372, 374, 377, 378, 381, 382, 385, 387, 390, 391, 394, 396, 399, 400, 403, 404, 407, 408, 411, 412, 415, 416, 419, 420, 423, 424, 427, 428, 431, 432, 435, 436, 439, 440, 443, 444, 447, 449, 452, 453, 456, 457, 460, 461, 464, 465, 468, 469, 472, 473, 476, 477, 480, 481, 484, 485, 488, 489, 492, 493, 496, 497, 500, 501, 504, 505, 508, 509, 512, 513, 516, 517, 520, 525, 528, 529, 532, 533, 536, 537, 538, 539, 542, 544, 547, 548, 551, 552, 555, 556, 559, 560, 563, 564, 567, 568, 571, 573, 576, 578, 581, 582, 585, 586, 589, 590, 594, 595, 599, 600, 604, 605, 608, 609, 610, 613, 617, 618, 621, 622, 624, 627, 628, 631, 632, 633, 635, 636, 637, 638, 639, 641, 646, 648, 649, 651, 652, 653, 662, 665, 666, 672, 674, 679, 680, 684, 685, 688, 689, 690, 692, 695, 697, 699, 702, 704, 710, 712, 714, 716, 718, 720, 723, 725, 728, 729, 730, 731, 732, 733, 734, 735, 737, 738, 740, 741, 742, 745, 747, 749, 750, 752, 753, 755, 756, 758, 759, 761, 762, 764, 765, 768, 769, 771, 773, 775, 776, 778, 779, 781, 782, 784, 785, 787, 788, 789, 791, 792, 793, 794, 795, 797, 798, 800, 801, 803, 804, 806, 807, 809, 810, 812, 813, 814, 817, 819, 822, 824, 827, 829, 830, 833, 835, 838, 839, 842, 843, 846, 847, 850, 851, 854, 855, 858, 859, 862, 863, 866, 868, 869, 872, 873, 876, 877, 880, 881, 884, 885, 888, 889, 890, 891, 892, 893, 894, 895, 896, 904, 905, 911, 912, 915, 917, 918, 919, 920, 922, 923, 925, 928, 929, 930, 931, 932, 933, 934, 935, 936, 940, 941, 942, 943, 944, 947, 949, 952, 954, 955, 958, 959, 962, 963, 966, 967, 970, 975, 978, 979, 982, 983, 986, 987, 988, 991, 993, 996], "nativearrai": [27, 30, 31, 32, 33, 40, 41, 116, 117, 119, 122, 125, 126, 129, 130, 132, 134, 137, 150, 158, 160, 161, 162, 163, 164, 165, 166, 169, 171, 175, 176, 177, 179, 182, 185, 188, 199, 202, 204, 205, 207, 208, 210, 213, 215, 216, 218, 223, 226, 228, 232, 233, 237, 241, 245, 246, 252, 255, 257, 260, 262, 265, 267, 270, 276, 279, 281, 284, 288, 291, 294, 297, 299, 302, 305, 308, 313, 318, 337, 338, 340, 356, 362, 363, 368, 369, 372, 374, 377, 378, 381, 382, 385, 387, 390, 391, 394, 396, 399, 400, 403, 404, 407, 408, 411, 412, 415, 416, 419, 420, 423, 424, 427, 428, 431, 432, 435, 436, 439, 440, 443, 444, 447, 449, 452, 453, 456, 457, 460, 461, 464, 465, 468, 469, 472, 473, 476, 477, 480, 481, 484, 485, 488, 489, 492, 493, 496, 497, 500, 501, 504, 505, 508, 509, 512, 513, 516, 517, 520, 525, 528, 529, 532, 533, 536, 537, 538, 539, 542, 544, 547, 548, 551, 552, 555, 556, 559, 560, 563, 564, 567, 568, 571, 573, 576, 578, 581, 582, 585, 586, 589, 590, 594, 595, 599, 600, 604, 605, 608, 609, 610, 611, 613, 617, 618, 621, 622, 624, 626, 627, 628, 631, 632, 633, 635, 636, 637, 638, 639, 641, 646, 648, 649, 651, 652, 653, 662, 665, 666, 672, 674, 679, 680, 684, 685, 688, 689, 690, 692, 695, 697, 699, 702, 704, 710, 712, 714, 716, 718, 720, 723, 725, 728, 729, 730, 731, 732, 733, 734, 735, 737, 738, 740, 741, 742, 745, 747, 749, 750, 752, 753, 755, 756, 758, 759, 761, 762, 764, 765, 768, 769, 771, 773, 775, 776, 778, 779, 781, 782, 784, 785, 787, 788, 789, 791, 792, 794, 795, 797, 798, 800, 801, 803, 804, 806, 807, 809, 810, 812, 813, 814, 817, 819, 822, 824, 827, 829, 830, 833, 835, 838, 839, 842, 843, 846, 847, 850, 851, 854, 855, 858, 859, 862, 863, 866, 868, 869, 872, 873, 876, 877, 880, 881, 884, 885, 888, 893, 895, 896, 905, 911, 912, 915, 917, 918, 928, 929, 930, 931, 932, 933, 934, 935, 936, 940, 941, 942, 943, 944, 947, 949, 952, 954, 955, 958, 959, 962, 963, 966, 967, 970, 975, 978, 979, 982, 983, 986, 987, 988, 991, 993, 996], "travers": [27, 30, 31, 72, 73, 126, 132, 134, 893, 905], "lowest": [27, 30, 31, 72, 73, 122, 149, 893, 905, 917, 919, 920], "leav": [27, 30, 31, 72, 73, 74, 75, 117, 118, 119, 121, 122, 126, 127, 129, 135, 136, 829, 873, 876, 893, 894, 895, 903, 904, 905], "to_n": [27, 72, 73], "item": [27, 31, 68, 69, 72, 73, 127, 132, 134, 135, 137, 246, 273, 318, 327, 328, 330, 337, 339, 341, 343, 345, 349, 609, 625, 647, 675, 676, 893, 898, 899, 900, 901, 905, 909, 910, 998, 1031, 1032], "asarrai": [32, 33, 77, 78, 121, 129, 175, 728, 729, 934, 936, 940], "empty_lik": [32, 33, 77, 78, 175], "from_dlpack": [32, 33, 77, 78, 175], "full_lik": [32, 33, 77, 78, 175], "fill_valu": [32, 33, 77, 78, 127, 175, 198, 199, 200, 201, 202, 203, 368, 477, 480, 497, 500], "meshgrid": [32, 33, 77, 78, 175], "xy": [32, 33, 77, 78, 175, 210, 211, 212, 213, 214], "ones_lik": [32, 33, 77, 78, 137, 175, 998], "tril": [32, 33, 77, 78, 175], "k": [32, 33, 77, 78, 115, 132, 175, 190, 191, 192, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 609, 617, 728, 740, 741, 765, 768, 785, 787, 789, 791, 792, 794, 795, 797, 801, 803, 917, 922, 923, 925, 929, 932], "triu": [32, 33, 77, 78, 175], "zeros_lik": [32, 33, 77, 78, 175, 829, 830, 833, 998], "creation": [33, 72, 73, 74, 75, 76, 78, 116, 121, 127, 128, 132, 176, 177, 179, 182, 184, 185, 188, 190, 191, 193, 196, 198, 199, 202, 204, 205, 207, 208, 210, 213, 215, 218, 220, 221, 223, 226, 228, 232, 233, 237, 238, 240, 241, 245], "data_typ": [34, 35, 79, 80, 116, 121, 127, 246, 250, 251, 252, 255, 257, 260, 262, 265, 267, 270, 272, 273, 274, 275, 276, 279, 280, 281, 284, 286, 287, 288, 291, 293, 294, 297, 299, 302, 304, 305, 308, 310, 311, 312, 313, 314, 315, 316, 317], "astyp": [34, 35, 79, 80, 127, 129, 246], "broadcast_arrai": [34, 35, 79, 80, 246], "broadcast_to": [34, 35, 79, 80, 127, 246], "can_cast": [34, 35, 79, 80, 122, 127, 246, 271], "float32": [34, 35, 79, 80, 85, 86, 119, 121, 127, 246, 250, 251, 267, 268, 269, 271, 286, 317, 609, 680, 681, 684], "float64": [34, 35, 121, 127, 246, 252, 255, 267, 268, 270, 286, 317], "as_n": [34, 35, 79, 80, 127, 246, 273, 274, 275, 276, 277, 278, 279, 318, 337, 338, 359], "finfo": [34, 35, 79, 80, 246], "iinfo": [34, 35, 79, 80, 130, 246], "is_float_dtyp": [34, 35, 79, 80, 246], "is_int_dtyp": [34, 35, 79, 80, 246, 609, 685], "result_typ": [34, 35, 79, 80, 127, 246], "arrays_and_dtyp": [34, 35, 79, 80, 246, 305, 306, 307, 308, 309], "ab": [38, 39, 83, 84, 121, 124, 368, 373, 556, 559, 741, 807, 809, 998], "aco": [38, 39, 83, 84, 368, 998], "acosh": [38, 39, 83, 84, 246, 286, 287, 368, 998], "x2": [38, 39, 40, 41, 48, 49, 72, 73, 83, 84, 85, 86, 93, 94, 117, 119, 246, 313, 318, 356, 368, 382, 383, 384, 385, 386, 400, 401, 402, 403, 408, 409, 410, 411, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 444, 445, 446, 447, 448, 449, 450, 451, 452, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 493, 494, 495, 496, 497, 498, 499, 500, 517, 518, 519, 520, 521, 522, 523, 524, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 548, 549, 550, 551, 556, 557, 558, 559, 560, 561, 562, 563, 590, 591, 592, 593, 594, 609, 610, 611, 612, 613, 614, 728, 733, 741, 747, 748, 749, 765, 766, 767, 768, 779, 780, 781, 789, 790, 791, 798, 799, 800, 804, 805, 806, 929, 933], "asin": [38, 39, 83, 84, 368, 998], "asinh": [38, 39, 83, 84, 368, 395, 998], "881": [38, 39, 83, 84, 160, 164, 368, 391, 392, 393, 394], "82": [38, 39, 391, 392], "atan": [38, 39, 83, 84, 368, 998], "atan2": [38, 39, 83, 84, 368, 998], "atanh": [38, 39, 83, 84, 368, 998], "bitwise_and": [38, 39, 83, 84, 368], "bitwise_invert": [38, 39, 83, 84, 368], "bitwise_left_shift": [38, 39, 83, 84, 368], "bitwise_or": [38, 39, 83, 84, 368], "bitwise_right_shift": [38, 39, 83, 84, 368], "bitwise_xor": [38, 39, 83, 84, 368], "ceil": [38, 39, 83, 84, 175, 176, 177, 368, 998], "cosh": [38, 39, 83, 84, 368, 998], "divid": [38, 39, 72, 73, 83, 84, 119, 125, 368, 469, 472, 609, 675, 829, 868], "erf": [38, 39, 83, 84, 368], "exp": [38, 39, 83, 84, 368, 461, 464, 517, 520, 998], "expm1": [38, 39, 83, 84, 368], "floor": [38, 39, 83, 84, 368, 424, 427, 609, 635, 998], "floor_divid": [38, 39, 83, 84, 368], "greater": [38, 39, 72, 73, 83, 84, 368, 374, 377, 387, 390, 400, 403, 416, 419, 424, 427, 465, 468, 469, 472, 556, 559, 560, 563, 568, 571, 605, 608, 741, 747, 749, 829, 869, 872, 917, 923, 925], "greater_equ": [38, 39, 83, 84, 368], "isfinit": [38, 39, 83, 84, 121, 368], "isinf": [38, 39, 83, 84, 368], "isnan": [38, 39, 83, 84, 368], "less_equ": [38, 39, 83, 84, 368], "log10": [38, 39, 83, 84, 368], "log1p": [38, 39, 83, 84, 368], "log2": [38, 39, 83, 84, 368], "logaddexp": [38, 39, 83, 84, 368], "logical_and": [38, 39, 83, 84, 368, 998], "logical_not": [38, 39, 83, 84, 368, 998], "logical_or": [38, 39, 83, 84, 368, 998], "logical_xor": [38, 39, 83, 84, 368], "multipli": [38, 39, 83, 84, 119, 123, 125, 368, 609, 627], "neg": [38, 39, 83, 84, 122, 126, 129, 160, 162, 175, 176, 177, 190, 191, 368, 481, 484, 485, 488, 539, 542, 556, 559, 560, 563, 741, 792, 794, 804, 806, 807, 809, 829, 847, 850, 863, 866, 987, 988, 991, 993, 996], "not_equ": [38, 39, 83, 84, 368], "pow": [38, 39, 83, 84, 368], "remaind": [38, 39, 72, 73, 83, 84, 368, 609, 635, 829, 868], "94": [38, 39, 83, 84, 391, 395, 568, 569], "256": [38, 39, 568, 569, 728, 734], "0001": [38, 39, 568, 569, 1035, 1036, 1037], "36": [38, 39, 568, 569, 741, 779, 781, 954, 955, 958], "67": [38, 39, 126, 368, 428, 431, 440, 443, 568, 569], "45": [38, 39, 121, 568, 569, 690, 692, 695, 741, 779, 781, 829, 868, 911, 912, 915, 954, 955, 958], "24": [38, 39, 99, 100, 368, 428, 431, 568, 569, 582, 585, 609, 627, 690, 692, 695, 741, 753, 755, 779, 781, 911, 912, 914, 915, 916, 954, 955, 958], "678": [38, 39, 568, 569], "32": [38, 39, 42, 43, 121, 135, 160, 162, 368, 428, 431, 568, 569, 692, 693, 728, 731, 734, 741, 779, 781, 929, 933, 954, 955, 958], "sin": [38, 39, 83, 84, 125, 132, 368, 577, 609, 636, 998], "841": [38, 39, 83, 84, 368, 573, 574, 575, 576, 577], "909": [38, 39, 83, 84, 368, 573, 574, 575, 576, 577], "141": [38, 39, 83, 84, 368, 573, 574, 575, 576, 577], "sinh": [38, 39, 83, 84, 368, 998], "sqrt": [38, 39, 83, 84, 368, 741, 807, 809], "squar": [38, 39, 83, 84, 121, 368, 582, 585, 728, 731, 741, 742, 745, 750, 752, 756, 758, 759, 761, 762, 764, 772, 788, 789, 791, 792, 794], "subtract": [38, 39, 83, 84, 119, 125, 368], "tan": [38, 39, 83, 84, 117, 118, 122, 126, 129, 132, 368, 387, 390, 391, 394, 596, 741, 753, 755, 934, 935, 943, 944, 947, 998], "56": [38, 39, 83, 84, 119, 368, 582, 585, 595, 596, 597, 598, 599, 690, 692, 695, 741, 779, 781, 954, 955, 958], "19": [38, 39, 83, 84, 119, 368, 391, 393, 395, 428, 431, 595, 596, 597, 598, 599, 741, 753, 755], "tanh": [38, 39, 83, 84, 132, 160, 368, 601, 998], "762": [38, 39, 83, 84, 160, 171, 368, 600, 602, 603, 604], "964": [38, 39, 83, 84, 160, 171, 368, 600, 602, 603, 604], "trunc": [38, 39, 83, 84, 368], "elementwis": [39, 72, 73, 84, 116, 122, 132, 137, 369, 372, 374, 377, 378, 381, 382, 385, 387, 390, 391, 394, 396, 399, 400, 403, 404, 407, 408, 411, 412, 415, 416, 419, 420, 423, 424, 427, 428, 431, 432, 435, 436, 439, 440, 443, 444, 447, 449, 452, 453, 456, 457, 460, 461, 464, 465, 468, 469, 472, 473, 476, 477, 480, 481, 484, 485, 488, 489, 492, 493, 496, 497, 500, 501, 504, 505, 508, 509, 512, 513, 516, 517, 520, 521, 524, 525, 528, 529, 532, 533, 536, 537, 538, 539, 542, 544, 547, 548, 551, 552, 555, 556, 559, 560, 563, 564, 567, 568, 571, 573, 576, 578, 581, 582, 585, 586, 589, 590, 594, 595, 599, 600, 604, 605, 608], "all_equ": [40, 41, 85, 86, 609, 614], "equality_matrix": [40, 41, 85, 86, 609, 610, 611, 612, 613, 614], "x1": [40, 41, 83, 84, 85, 86, 117, 119, 246, 313, 318, 356, 368, 382, 385, 386, 400, 403, 408, 411, 416, 419, 420, 423, 424, 427, 428, 431, 444, 447, 448, 449, 452, 469, 472, 473, 476, 477, 480, 493, 496, 497, 500, 517, 520, 521, 524, 529, 532, 533, 536, 537, 538, 539, 542, 543, 548, 551, 556, 559, 560, 563, 590, 591, 594, 609, 610, 611, 612, 613, 614, 617, 728, 733, 741, 747, 749, 765, 768, 779, 781, 789, 791, 798, 800, 804, 806, 929, 933], "gather_nd": [40, 41, 72, 73, 85, 86, 609, 642, 998], "to_numpi": [40, 41, 72, 73, 85, 86, 135, 609, 681, 998], "adam_step": [42, 43, 87, 88, 690, 696], "mw": [42, 43, 87, 88, 136, 690, 692, 693, 694, 695, 696, 697, 699], "vw": [42, 43, 87, 88, 136, 690, 692, 693, 694, 695, 696, 697, 699], "beta1": [42, 43, 87, 88, 136, 690, 692, 693, 694, 695, 696, 697, 698, 699, 700, 710, 711, 712, 713, 1035, 1036, 1037], "beta2": [42, 43, 87, 88, 136, 690, 692, 693, 694, 695, 696, 697, 698, 699, 700, 710, 711, 712, 713, 1035, 1036, 1037], "999": [42, 43, 83, 84, 87, 88, 136, 368, 600, 601, 603, 604, 690, 692, 693, 694, 695, 696, 697, 698, 699, 700, 710, 711, 712, 713, 1035, 1036, 1037], "epsilon": [42, 43, 50, 51, 54, 55, 87, 88, 95, 96, 99, 100, 122, 126, 129, 136, 690, 692, 693, 694, 695, 696, 697, 698, 699, 700, 710, 711, 712, 713, 741, 773, 775, 782, 784, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 911, 912, 913, 914, 915, 916, 1033, 1034, 1035, 1036, 1037], "1e": [42, 43, 50, 51, 54, 55, 87, 88, 95, 96, 99, 100, 122, 126, 129, 136, 137, 609, 645, 690, 692, 693, 694, 695, 696, 697, 698, 699, 700, 710, 711, 712, 713, 741, 792, 794, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 911, 912, 913, 914, 915, 916, 998, 1035, 1036, 1037, 1038, 1040], "07": [42, 43, 50, 51, 87, 88, 95, 96, 136, 368, 568, 571, 690, 692, 693, 694, 695, 696, 697, 698, 699, 700, 710, 711, 712, 713, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 1035, 1036, 1037], "dcdw": [42, 43, 87, 88, 690, 692, 693, 694, 695, 696, 697, 698, 699, 700, 702, 703, 704, 705, 710, 711, 712, 713, 714, 715, 716, 717], "adam_step_delta": [42, 43, 87, 88, 690, 692, 693, 694, 695, 696], "639": [42, 43, 690, 692, 693, 695], "11": [42, 43, 74, 75, 83, 84, 101, 102, 119, 121, 126, 368, 382, 384, 385, 386, 408, 411, 564, 567, 609, 627, 637, 692, 693, 741, 753, 755, 779, 781, 813, 824, 827, 829, 847, 850, 855, 858, 917, 919, 920, 921, 929, 933, 934, 935, 954, 955, 958], "63": [42, 43, 93, 94, 368, 582, 585, 692, 693, 741, 742, 744, 745, 746, 779, 781, 954, 955, 958], "00121": [42, 43, 692, 693], "0102": [42, 43, 692, 693], "0397": [42, 43, 692, 693], "gradient": [43, 72, 73, 88, 116, 126, 135, 136, 148, 149, 318, 362, 692, 695, 697, 699, 701, 702, 704, 706, 708, 710, 712, 714, 716, 718, 720, 722, 723, 724, 725, 726, 727, 889, 890, 891, 892, 998, 1035, 1036, 1037, 1038, 1039, 1040], "linear_algebra": [48, 49, 93, 94, 116, 134, 741, 742, 745, 747, 749, 750, 752, 753, 755, 756, 758, 759, 761, 762, 764, 765, 768, 769, 771, 772, 773, 775, 776, 778, 779, 781, 782, 784, 785, 787, 788, 789, 791, 792, 794, 795, 797, 798, 800, 801, 803, 804, 806, 807, 809, 810, 812], "choleski": [48, 49, 93, 94, 741, 746], "upper": [48, 49, 72, 73, 93, 94, 121, 175, 190, 191, 233, 237, 741, 742, 743, 744, 745, 746, 785, 787, 917, 923, 925], "625": [48, 49, 741, 742, 743, 745], "25": [48, 49, 50, 51, 99, 100, 126, 368, 582, 585, 586, 589, 741, 742, 743, 745, 753, 755, 762, 764, 813, 819, 820, 822, 911, 912, 914, 915, 916, 954, 955, 958], "cross": [48, 49, 74, 75, 741, 813, 814, 817, 819, 822, 824, 827, 998], "axi": [48, 49, 50, 51, 52, 53, 62, 63, 64, 65, 66, 67, 72, 73, 77, 78, 95, 96, 97, 98, 107, 108, 109, 110, 111, 112, 117, 119, 121, 122, 126, 127, 129, 130, 132, 134, 137, 148, 160, 165, 175, 204, 205, 206, 207, 208, 209, 318, 320, 323, 330, 343, 344, 345, 346, 347, 348, 349, 350, 362, 609, 627, 628, 637, 688, 741, 747, 748, 749, 753, 755, 804, 805, 806, 807, 808, 809, 813, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 835, 836, 837, 838, 839, 842, 843, 844, 845, 846, 847, 848, 849, 850, 855, 856, 857, 858, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 880, 881, 884, 885, 888, 917, 928, 929, 930, 931, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997], "det": [48, 49, 74, 75, 741], "diagon": [48, 49, 74, 75, 175, 190, 191, 228, 232, 233, 237, 741, 801, 803], "offset": [48, 49, 54, 55, 99, 100, 741, 753, 754, 755, 801, 802, 803, 911, 912, 913, 914, 915, 916], "axis1": [48, 49, 52, 53, 97, 98, 741, 753, 754, 755, 829, 877, 878, 879, 880], "axis2": [48, 49, 741, 753, 754, 755], "eigh": [48, 49, 74, 75, 741], "namedtupl": [48, 49, 741, 756, 757, 758, 785, 786, 787, 792, 794, 934, 935, 936, 940], "eigvalsh": [48, 49, 74, 75, 741], "inv": [48, 49, 74, 75, 134, 741, 998], "matmul": [48, 49, 93, 94, 116, 121, 123, 132, 741, 792, 794, 998], "matrix_norm": [48, 49, 72, 73, 741], "ord": [48, 49, 72, 73, 741, 769, 770, 771, 807, 808, 809], "fro": [48, 49, 741, 769, 770, 771], "keepdim": [48, 49, 64, 65, 66, 67, 72, 73, 109, 110, 111, 112, 130, 609, 688, 741, 769, 770, 771, 807, 808, 809, 929, 930, 931, 954, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997], "matrix_rank": [48, 49, 74, 75, 741], "rtol": [48, 49, 741, 773, 774, 775, 782, 783, 784], "matrix_transpos": [48, 49, 74, 75, 134, 741], "outer": [48, 49, 74, 75, 741, 889, 890, 891, 892], "pinv": [48, 49, 74, 75, 741, 998], "qr": [48, 49, 74, 75, 741], "reduc": [48, 49, 72, 73, 134, 318, 362, 609, 632, 741, 785, 786, 787, 929, 930, 931, 954, 959, 962, 963, 966, 967, 970, 971, 974, 975, 978, 979, 982, 983, 986, 987, 988, 991, 993, 996], "solv": [48, 49, 74, 75, 133, 148, 741], "svd": [48, 49, 74, 75, 741, 998], "full_matric": [48, 49, 741, 792, 793, 794], "svdval": [48, 49, 74, 75, 741], "tensordot": [48, 49, 74, 75, 741], "trace": [48, 49, 72, 73, 74, 75, 132, 149, 609, 655, 656, 658, 741], "vecdot": [48, 49, 74, 75, 741], "vector_norm": [48, 49, 72, 73, 741], "vector_to_skew_symmetric_matrix": [48, 49, 74, 75, 741, 998], "binary_cross_entropi": [50, 51, 95, 96, 813, 818], "pred": [50, 51, 95, 96, 122, 126, 129, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828], "357": [50, 51, 95, 96, 813, 814, 815, 816, 817, 818, 824, 825, 827, 828], "223": [50, 51, 95, 96, 813, 814, 815, 816, 817, 818, 824, 825, 826, 828], "cross_entropi": [50, 51, 95, 96, 122, 126, 129, 813, 823, 824, 827], "3862944": [50, 51, 813, 819, 820, 822], "sparse_cross_entropi": [50, 51, 95, 96, 813, 828], "loss": [51, 96, 116, 122, 135, 136, 137, 814, 817, 819, 822, 824, 827, 998], "clip": [52, 53, 72, 73, 97, 98, 122, 126, 129, 132, 135, 137, 368, 537, 538, 609, 621, 622, 624, 829, 834, 998], "x_min": [52, 53, 72, 73, 97, 98, 132, 137, 829, 830, 831, 832, 833, 834], "x_max": [52, 53, 72, 73, 97, 98, 132, 137, 829, 830, 831, 832, 833, 834], "roll": [52, 53, 97, 98, 117, 126, 829, 830, 831, 867], "concat": [52, 53, 72, 73, 97, 98, 318, 347, 348, 349, 350, 362, 609, 636, 829, 998], "xs": [52, 53, 97, 98, 126, 318, 341, 345, 347, 348, 349, 609, 610, 613, 618, 690, 701, 829, 835, 836, 837, 838], "constant_pad": [52, 53, 97, 98, 829], "pad_width": [52, 53, 97, 98, 829, 839, 840, 841, 842, 885, 886, 887, 888], "expand_dim": [52, 53, 97, 98, 132, 135, 829, 998], "flip": [52, 53, 97, 98, 134, 135, 137, 368, 412, 415, 829, 855, 858, 998], "permute_dim": [52, 53, 97, 98, 829], "reshap": [52, 53, 72, 73, 97, 98, 121, 129, 132, 134, 137, 829, 998], "shift": [52, 53, 97, 98, 117, 119, 368, 416, 419, 424, 427, 829, 863, 864, 865, 866, 867], "squeez": [52, 53, 97, 98, 829, 998], "stack": [52, 53, 72, 73, 97, 98, 132, 175, 228, 232, 233, 237, 741, 750, 752, 753, 755, 756, 758, 759, 761, 762, 764, 765, 768, 772, 773, 775, 776, 778, 782, 784, 785, 787, 792, 794, 795, 797, 801, 803, 829, 893, 894, 903, 904, 998, 1019, 1028], "swapax": [52, 53, 97, 98, 829], "axis0": [52, 53, 97, 98, 829, 877, 878, 879, 880], "tile": [52, 53, 97, 98, 829, 998], "rep": [52, 53, 97, 98, 829, 881, 882, 883, 884], "zero_pad": [52, 53, 97, 98, 829, 998], "layer_norm": [54, 55, 99, 100, 911, 916], "normalized_idx": [54, 55, 99, 100, 911, 912, 913, 914, 915, 916], "05": [54, 55, 99, 100, 121, 318, 690, 692, 695, 911, 912, 913, 914, 915, 916], "scale": [54, 55, 99, 100, 126, 318, 360, 361, 690, 714, 716, 728, 736, 739, 740, 911, 912, 913, 914, 915, 916, 1019, 1027, 1030, 1035, 1038], "new_std": [54, 55, 99, 100, 911, 912, 913, 914, 915, 916, 1033, 1034], "0976": [54, 55, 911, 912, 913, 915], "3452": [54, 55, 911, 912, 913, 915], "2740": [54, 55, 911, 912, 913, 915], "1047": [54, 55, 911, 912, 913, 915], "5886": [54, 55, 911, 912, 913, 915], "2732": [54, 55, 911, 912, 913, 915], "7696": [54, 55, 911, 912, 913, 915], "7024": [54, 55, 911, 912, 913, 915], "2518": [54, 55, 911, 912, 913, 915], "001": [54, 55, 135, 136, 368, 568, 571, 690, 692, 695, 911, 912, 913, 915], "576": [54, 55, 911, 912, 913, 915], "292": [54, 55, 911, 912, 913, 915], "33": [54, 55, 83, 84, 391, 393, 741, 779, 781, 911, 912, 913, 915, 954, 955, 958], "581": [54, 55, 690, 692, 695, 911, 912, 913, 915], "891": [54, 55, 160, 164, 911, 912, 913, 915], "01": [54, 55, 137, 368, 564, 567, 568, 571, 911, 912, 913, 915], "579": [54, 55, 911, 912, 913, 915], "931": [54, 55, 911, 912, 913, 915], "norm": [55, 72, 73, 100, 116, 609, 621, 622, 624, 741, 769, 771, 807, 809, 912, 913, 914, 915, 916, 998, 1034, 1035, 1037], "random": [57, 72, 73, 102, 116, 128, 137, 148, 918, 919, 920, 922, 923, 925, 927, 928, 998], "unique_count": [60, 61, 105, 106, 934, 937], "uc": [60, 61, 936, 938], "count": [60, 61, 119, 135, 318, 356, 741, 804, 806, 829, 847, 850, 934, 935, 936, 938, 940, 987, 988, 991, 993, 996], "argsort": [62, 63, 107, 108, 943], "descend": [62, 63, 107, 108, 741, 792, 794, 795, 797, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953], "sort": [63, 72, 73, 74, 75, 76, 108, 116, 741, 756, 758, 792, 794, 795, 797, 944, 947], "einsum": [64, 65, 109, 110, 954], "equat": [64, 65, 109, 110, 741, 789, 791, 954, 955, 956, 957, 958], "max": [64, 65, 72, 73, 109, 110, 246, 281, 284, 288, 291, 368, 537, 609, 621, 622, 624, 632, 665, 666, 741, 773, 775, 782, 784, 954, 1035, 1037], "min": [64, 65, 72, 73, 109, 110, 246, 281, 284, 288, 291, 368, 538, 609, 632, 665, 666, 675, 741, 785, 787, 792, 794, 795, 797, 807, 809, 954], "prod": [64, 65, 72, 73, 109, 110, 119, 127, 609, 632, 954], "std": [64, 65, 109, 110, 119, 917, 922, 934, 935, 954], "sum": [64, 65, 72, 73, 109, 110, 122, 126, 127, 129, 132, 318, 347, 348, 349, 350, 362, 368, 382, 385, 517, 520, 609, 628, 632, 665, 666, 728, 740, 741, 792, 794, 801, 803, 807, 809, 954, 955, 958, 975, 978], "var": [64, 65, 109, 110, 113, 114, 119, 132, 889, 890, 891, 954], "statist": [65, 110, 113, 114, 116, 121, 127, 955, 958, 959, 962, 963, 966, 967, 970, 971, 974, 975, 978, 979, 982, 983, 986], "util": [67, 112, 116, 128, 318, 351, 988, 991, 993, 996], "add_ivy_array_instance_method": 68, "cl": [68, 69, 113, 114], "to_ignor": [68, 69, 113, 114, 893, 904], "loop": [68, 69, 113, 114, 123, 130, 149, 889, 890, 891, 892], "_wrap_funct": [68, 69, 113, 114, 122, 124], "toi": [68, 69, 113, 114], "arrayexampl": [68, 69], "hasattr": [68, 69, 113, 114, 134], "containerwithactiv": [70, 74, 75], "dict_in": [70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112], "queue": [70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 135, 318, 327, 328, 609, 664, 669], "queue_load_s": [70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112], "container_combine_method": [70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112], "list_join": [70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112], "print_limit": [70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112], "key_length_limit": [70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112], "print_ind": [70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112], "print_line_spac": [70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112], "ivyh": [70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112], "default_key_color": [70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112], "keyword_color_dict": [70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112], "rebuild_child_contain": [70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112], "types_to_iteratively_nest": [70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112], "alphabetical_kei": [70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112], "containerbas": [70, 71, 72, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 126], "key_chain": [70, 71, 72, 73, 74, 75, 77, 78, 79, 80, 83, 84, 85, 86, 87, 88, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 105, 106, 107, 108, 109, 110, 111, 112, 166, 168, 170, 176, 178, 179, 181, 183, 185, 187, 189, 190, 192, 193, 195, 197, 199, 201, 203, 204, 206, 207, 209, 210, 212, 214, 215, 217, 219, 220, 222, 223, 225, 227, 228, 229, 231, 233, 234, 236, 238, 239, 241, 242, 244, 252, 254, 256, 257, 259, 261, 262, 264, 266, 267, 269, 271, 276, 278, 281, 283, 285, 288, 290, 292, 294, 296, 298, 299, 301, 303, 305, 307, 309, 369, 371, 373, 374, 376, 378, 380, 382, 384, 386, 387, 389, 391, 393, 395, 396, 398, 400, 402, 404, 406, 408, 410, 412, 414, 416, 418, 420, 422, 424, 426, 428, 430, 432, 434, 436, 438, 440, 442, 444, 446, 448, 449, 451, 453, 455, 457, 459, 461, 463, 465, 467, 469, 471, 473, 475, 477, 479, 481, 483, 485, 487, 489, 491, 493, 495, 497, 499, 501, 503, 505, 507, 509, 511, 513, 515, 517, 519, 521, 523, 525, 527, 529, 531, 533, 535, 539, 541, 543, 544, 546, 548, 550, 552, 554, 556, 558, 560, 562, 564, 566, 568, 570, 572, 573, 575, 577, 578, 580, 582, 584, 586, 588, 590, 591, 593, 595, 596, 598, 600, 601, 603, 605, 607, 610, 612, 614, 622, 623, 638, 640, 642, 680, 681, 683, 697, 698, 700, 702, 703, 705, 706, 707, 709, 710, 711, 713, 714, 715, 717, 718, 719, 721, 742, 744, 746, 765, 767, 814, 816, 818, 819, 821, 823, 824, 826, 828, 830, 832, 834, 835, 837, 839, 841, 843, 845, 847, 849, 851, 853, 855, 857, 859, 861, 863, 865, 867, 869, 871, 873, 875, 877, 879, 881, 883, 885, 887, 893, 906, 912, 914, 916, 919, 921, 923, 924, 926, 936, 937, 939, 944, 946, 948, 949, 951, 953, 955, 957, 959, 961, 963, 965, 967, 969, 971, 973, 975, 977, 979, 981, 983, 985, 988, 990, 992, 993, 995, 997], "to_appli": [70, 71, 72, 73, 74, 75, 77, 78, 79, 80, 83, 84, 85, 86, 87, 88, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 105, 106, 107, 108, 109, 110, 111, 112, 166, 168, 170, 176, 178, 179, 181, 183, 185, 187, 189, 190, 192, 193, 195, 197, 199, 201, 203, 204, 206, 207, 209, 210, 212, 214, 215, 217, 219, 220, 222, 223, 225, 227, 228, 229, 231, 233, 234, 236, 238, 239, 241, 242, 244, 252, 254, 256, 257, 259, 261, 262, 264, 266, 267, 269, 271, 276, 278, 281, 283, 285, 288, 290, 292, 294, 296, 298, 299, 301, 303, 305, 307, 309, 369, 371, 373, 374, 376, 378, 380, 382, 384, 386, 387, 389, 391, 393, 395, 396, 398, 400, 402, 404, 406, 408, 410, 412, 414, 416, 418, 420, 422, 424, 426, 428, 430, 432, 434, 436, 438, 440, 442, 444, 446, 448, 449, 451, 453, 455, 457, 459, 461, 463, 465, 467, 469, 471, 473, 475, 477, 479, 481, 483, 485, 487, 489, 491, 493, 495, 497, 499, 501, 503, 505, 507, 509, 511, 513, 515, 517, 519, 521, 523, 525, 527, 529, 531, 533, 535, 539, 541, 543, 544, 546, 548, 550, 552, 554, 556, 558, 560, 562, 564, 566, 568, 570, 572, 573, 575, 577, 578, 580, 582, 584, 586, 588, 590, 591, 593, 595, 596, 598, 600, 601, 603, 605, 607, 610, 612, 614, 622, 623, 638, 640, 642, 680, 681, 683, 697, 698, 700, 702, 703, 705, 706, 707, 709, 710, 711, 713, 714, 715, 717, 718, 719, 721, 742, 744, 746, 765, 767, 814, 816, 818, 819, 821, 823, 824, 826, 828, 830, 832, 834, 835, 837, 839, 841, 843, 845, 847, 849, 851, 853, 855, 857, 859, 861, 863, 865, 867, 869, 871, 873, 875, 877, 879, 881, 883, 885, 887, 893, 906, 912, 914, 916, 923, 924, 926, 936, 937, 939, 944, 946, 948, 949, 951, 953, 955, 957, 959, 961, 963, 965, 967, 969, 971, 973, 975, 977, 979, 981, 983, 985, 988, 990, 992, 993, 995, 997], "prune_unappli": [70, 71, 72, 73, 74, 75, 77, 78, 79, 80, 83, 84, 85, 86, 87, 88, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 105, 106, 107, 108, 109, 110, 111, 112, 166, 168, 170, 176, 178, 179, 181, 183, 185, 187, 189, 190, 192, 193, 195, 197, 199, 201, 203, 204, 206, 207, 209, 210, 212, 214, 215, 217, 219, 220, 222, 223, 225, 227, 228, 229, 231, 233, 234, 236, 238, 239, 241, 242, 244, 252, 254, 256, 257, 259, 261, 262, 264, 266, 267, 269, 271, 276, 278, 281, 283, 285, 288, 290, 292, 294, 296, 298, 299, 301, 303, 305, 307, 309, 369, 371, 373, 374, 376, 378, 380, 382, 384, 386, 387, 389, 391, 393, 395, 396, 398, 400, 402, 404, 406, 408, 410, 412, 414, 416, 418, 420, 422, 424, 426, 428, 430, 432, 434, 436, 438, 440, 442, 444, 446, 448, 449, 451, 453, 455, 457, 459, 461, 463, 465, 467, 469, 471, 473, 475, 477, 479, 481, 483, 485, 487, 489, 491, 493, 495, 497, 499, 501, 503, 505, 507, 509, 511, 513, 515, 517, 519, 521, 523, 525, 527, 529, 531, 533, 535, 539, 541, 543, 544, 546, 548, 550, 552, 554, 556, 558, 560, 562, 564, 566, 568, 570, 572, 573, 575, 577, 578, 580, 582, 584, 586, 588, 590, 591, 593, 595, 596, 598, 600, 601, 603, 605, 607, 610, 612, 614, 622, 623, 638, 640, 642, 680, 681, 683, 697, 698, 700, 702, 703, 705, 706, 707, 709, 710, 711, 713, 714, 715, 717, 718, 719, 721, 742, 744, 746, 765, 767, 814, 816, 818, 819, 821, 823, 824, 826, 828, 830, 832, 834, 835, 837, 839, 841, 843, 845, 847, 849, 851, 853, 855, 857, 859, 861, 863, 865, 867, 869, 871, 873, 875, 877, 879, 881, 883, 885, 887, 893, 906, 912, 914, 916, 923, 924, 926, 936, 937, 939, 944, 946, 948, 949, 951, 953, 955, 957, 959, 961, 963, 965, 967, 969, 971, 973, 975, 977, 979, 981, 983, 985, 988, 990, 992, 993, 995, 997], "map_sequ": [70, 71, 72, 73, 74, 75, 77, 78, 79, 80, 83, 84, 85, 86, 87, 88, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 105, 106, 107, 108, 109, 110, 111, 112, 166, 168, 170, 176, 178, 179, 181, 183, 185, 187, 189, 190, 192, 193, 195, 197, 199, 201, 203, 204, 206, 207, 209, 210, 212, 214, 215, 217, 219, 220, 222, 223, 225, 227, 228, 229, 231, 233, 234, 236, 238, 239, 241, 242, 244, 252, 254, 256, 257, 259, 261, 262, 264, 266, 267, 269, 271, 276, 278, 281, 283, 285, 288, 290, 292, 294, 296, 298, 299, 301, 303, 305, 307, 309, 369, 371, 373, 374, 376, 378, 380, 382, 384, 386, 387, 389, 391, 393, 395, 396, 398, 404, 406, 412, 414, 432, 434, 436, 438, 440, 442, 444, 446, 448, 453, 455, 457, 459, 461, 463, 465, 467, 481, 483, 485, 487, 489, 491, 501, 503, 505, 507, 509, 511, 513, 515, 525, 527, 539, 541, 543, 544, 546, 552, 554, 564, 566, 568, 570, 572, 573, 575, 577, 578, 580, 582, 584, 586, 588, 590, 591, 593, 595, 596, 598, 600, 601, 603, 605, 607, 610, 612, 614, 622, 623, 638, 640, 642, 680, 681, 683, 697, 698, 700, 702, 703, 705, 706, 707, 709, 710, 711, 713, 714, 715, 717, 718, 719, 721, 742, 744, 746, 814, 816, 818, 819, 821, 823, 824, 826, 828, 830, 832, 834, 839, 841, 843, 845, 847, 849, 851, 853, 855, 857, 859, 861, 863, 865, 867, 869, 871, 877, 879, 881, 883, 885, 887, 912, 914, 916, 923, 924, 926, 936, 937, 939, 944, 946, 948, 949, 951, 953, 955, 957, 959, 961, 963, 965, 967, 969, 971, 973, 975, 977, 979, 981, 983, 985, 988, 990, 992, 993, 995, 997], "static_softplu": [70, 71, 166], "__getitem__": [72, 73, 126], "queri": [72, 73, 126, 127, 134, 318, 351, 361, 728, 739, 740, 1019, 1030], "slice": [72, 73, 609, 637, 638, 641, 893, 902], "chain": [72, 73, 125, 126, 136, 137, 149, 889, 890, 891, 893, 906, 1041, 1042], "represent": [72, 73, 74, 75, 76, 148, 174, 246, 250, 251, 281, 284, 288, 291, 318, 334, 335, 368, 369, 372, 382, 385, 408, 411, 420, 423, 428, 431, 533, 536, 539, 542, 609, 615, 674, 679], "dictionari": [72, 73, 74, 75, 76, 135, 149, 318, 361], "sequenc": [72, 73, 74, 75, 76, 119, 121, 127, 130, 148, 172, 173, 318, 327, 328, 609, 618, 659, 829, 868, 873, 876, 917, 919, 920, 954, 959, 962, 987, 988, 991, 993, 996, 1019, 1028, 1033, 1034, 1041, 1042], "asynchron": [72, 73, 74, 75, 76], "arriv": [72, 73, 74, 75, 76], "timeout": [72, 73, 74, 75, 76, 318, 327, 328, 609, 664, 669], "length": [72, 73, 74, 75, 76, 121, 130, 135, 175, 176, 177, 210, 213, 741, 792, 794, 795, 797, 829, 859, 862], "whitespac": [72, 73, 74, 75, 76], "indent": [72, 73, 74, 75, 76, 135], "extra": [72, 73, 74, 75, 76, 119, 124, 125, 132, 690, 701], "newlin": [72, 73, 74, 75, 76, 118], "handl": [72, 73, 74, 75, 76, 115, 117, 121, 122, 124, 126, 127, 128, 129, 136, 149, 172, 173, 318, 334, 335, 336, 337, 338, 352, 356, 357, 364, 367, 690, 697, 699, 702, 704, 710, 712, 714, 716, 718, 720, 1035, 1036, 1037, 1038, 1039, 1040], "color": [72, 73, 74, 75, 76, 1044, 1045], "map": [72, 73, 74, 75, 76, 117, 121, 122, 126, 135, 148, 149, 318, 327, 893, 900, 901, 905, 906, 1019, 1030], "termcolor": [72, 73, 74, 75, 76], "rebuild": [72, 73, 74, 75, 76], "constructor": [72, 73, 74, 75, 76, 127, 128, 134, 609, 616, 1041, 1042], "param": [72, 73, 74, 75, 76, 85, 86, 132, 137, 609, 615, 637, 638, 641, 642], "alphabet": [72, 73, 74, 75, 76], "preserv": [72, 73, 74, 75, 76, 121, 137, 149, 690, 723, 829, 847, 850], "__setitem__": [72, 73, 125, 126, 134], "val": [72, 73, 129, 134, 609, 651, 652, 653, 667, 668], "after": [72, 73, 119, 121, 126, 127, 131, 246, 313, 318, 368, 582, 585, 690, 697, 699, 701, 702, 704, 710, 712, 714, 716, 718, 720, 911, 912, 915, 1035, 1036, 1037, 1038, 1039, 1040], "all_fals": [72, 73], "assert_is_bool": [72, 73], "entri": [72, 73, 175, 204, 205, 207, 208, 829, 868, 893, 906], "evalu": [72, 73, 126, 368, 457, 460, 461, 464, 501, 504, 505, 508, 509, 512, 513, 516, 544, 547, 568, 571, 586, 589, 893, 894, 903, 904, 987, 988, 991, 993, 996], "assert": [72, 73, 121, 130, 134, 135, 609, 619], "prune": [72, 73, 893, 906, 907, 908], "all_key_chain": [72, 73], "include_empti": [72, 73], "all_tru": [72, 73, 126, 135], "arrays_as_list": [72, 73], "intermedi": [72, 73], "as_arrai": [72, 73, 609, 646, 672], "as_bool": [72, 73], "as_on": [72, 73], "fill": [72, 73, 175, 184, 198, 199, 202, 220, 221, 223, 226, 238, 240, 241, 245, 917, 919, 920], "as_random_uniform": [72, 73], "low": [72, 73, 101, 102, 132, 917, 919, 920, 921, 923, 924, 925, 926], "uniform": [72, 73, 136, 917, 918, 919, 920, 923, 925, 1010, 1012, 1013, 1016, 1017], "boundari": [72, 73, 917, 923, 925], "interv": [72, 73, 132, 137, 175, 176, 177, 204, 205, 207, 208, 741, 804, 806, 829, 830, 833, 873, 876, 917, 919, 920, 923, 925, 987, 988, 991, 993, 996], "as_vari": [72, 73, 121], "as_zero": [72, 73], "assert_contains_sub_contain": [72, 73], "sub_cont": [72, 73], "except": [72, 73, 118, 125, 129, 130, 134, 149, 246, 262, 265, 609, 619, 630, 653, 686, 741, 782, 784, 829, 835, 838, 873, 876, 929, 932, 987, 988, 991, 993, 996], "diff": [72, 73, 126, 135], "screen": [72, 73, 135], "assert_contains_sub_structur": [72, 73], "check_shap": [72, 73], "assert_ident": [72, 73], "check_typ": [72, 73], "same_arrai": [72, 73, 135], "datatyp": [72, 73, 79, 80, 175, 179, 182, 215, 218, 246, 272, 304], "assert_identical_structur": [72, 73], "at_key_chain": [72, 73], "ignore_key_error": [72, 73], "ignore_non": [72, 73], "at_kei": [72, 73], "ignor": [72, 73, 119, 121, 149, 175, 210, 213, 893, 904, 1035, 1039], "substr": [72, 73], "clip_min": [72, 73], "clip_max": [72, 73], "config": [72, 73, 135, 893, 906], "duplic": [72, 73, 118, 123, 124, 130, 134, 136], "compar": [72, 73, 121, 130, 135, 609, 610, 613, 617, 618, 934, 935, 936, 940, 942, 943, 944, 947, 949, 952], "container_rightmost": [72, 73], "common_key_chain": [72, 73, 126], "contains_sub_contain": [72, 73], "match": [72, 73, 126, 246, 252, 255, 368, 560, 563, 609, 659], "contains_sub_structur": [72, 73], "create_if_abs": [72, 73], "inplac": [72, 73, 87, 88, 115, 117, 119, 124, 125, 134, 136, 609, 619, 650, 653, 654, 677, 690, 697, 698, 699, 700, 702, 703, 704, 705, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 1008, 1009, 1035, 1036, 1037, 1038, 1039, 1040], "cutoff_at_depth": [72, 73], "depth_cutoff": [72, 73], "cutoff_at_height": [72, 73], "height_cutoff": [72, 73], "deep_copi": [72, 73, 135], "intern": [72, 73, 118, 121, 125, 126, 128, 129, 318, 690, 726, 893, 894, 903, 904, 1010, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1041, 1042], "belong": [72, 73, 136], "along": [72, 73, 116, 129, 175, 204, 205, 207, 208, 318, 343, 344, 345, 346, 347, 348, 349, 350, 362, 609, 627, 628, 637, 688, 741, 769, 771, 801, 803, 804, 806, 807, 809, 813, 819, 822, 824, 827, 829, 835, 838, 847, 850, 855, 858, 863, 866, 868, 873, 876, 881, 884, 889, 890, 891, 892, 917, 928, 929, 930, 931, 943, 944, 947, 949, 952, 954, 955, 958, 959, 962, 963, 966, 967, 970, 971, 974, 975, 978, 979, 982, 983, 986, 987, 988, 991, 993, 996], "dev_str": [72, 73], "diff_kei": [72, 73], "detect_key_diff": [72, 73], "detect_value_diff": [72, 73], "detect_shape_diff": [72, 73], "treat": [72, 73, 121, 133, 137, 172, 173], "detect": [72, 73, 117, 121, 130, 135, 136, 893, 894, 904], "container0": [72, 73], "axes_length": [72, 73, 609, 631, 632, 633], "rearrang": [72, 73, 609, 631, 633], "reduct": [72, 73, 121, 127, 134, 609, 632, 665, 666, 987, 988, 991, 993, 996, 998], "One": [72, 73, 121, 127, 132, 134, 135, 609, 632, 829, 859, 862, 917, 919, 920], "callabl": [72, 73, 121, 126, 132, 150, 151, 152, 153, 154, 155, 156, 157, 158, 172, 173, 246, 286, 287, 318, 362, 609, 615, 620, 630, 632, 889, 890, 891, 892, 893, 899, 903, 904, 905], "find_sub_contain": [72, 73], "sub_cont_to_find": [72, 73], "exsit": [72, 73], "find_sub_structur": [72, 73], "sub_struc_to_find": [72, 73], "flatten_key_chain": [72, 73, 135, 1031, 1032], "__": [72, 73, 119, 135], "above_height": [72, 73, 135], "below_depth": [72, 73, 135], "format_key_chain": [72, 73], "format_fn": [72, 73], "string": [72, 73, 123, 127, 128, 130, 132, 135, 246, 250, 251, 276, 279, 293, 317, 318, 334, 335, 336, 337, 351, 357, 363, 364, 367, 609, 629], "from_disk_as_hdf5": [72, 73, 135], "h5_obj_or_filepath": [72, 73], "slice_obj": [72, 73], "load": [72, 73, 149], "disk": [72, 73, 135], "h5py": [72, 73], "hdf5": [72, 73, 135, 1031, 1032], "h5": [72, 73], "from_disk_as_json": [72, 73, 135], "json_filepath": [72, 73], "json": [72, 73, 135], "dure": [72, 73, 122, 126, 127, 128, 129, 149, 172, 173, 318, 363, 609, 686, 690, 692, 695, 697, 699, 710, 712, 741, 765, 768, 889, 890, 891, 892, 954, 975, 978, 983, 986, 1031, 1032, 1035, 1036, 1037, 1039], "from_disk_as_pickl": [72, 73, 135], "pickle_filepath": [72, 73], "pickl": [72, 73, 126, 135], "from_flat_list": [72, 73], "flat_list": [72, 73], "hierarchi": [72, 73, 135], "flat": [72, 73, 609, 665, 829, 855, 858], "popul": [72, 73, 121, 127, 128, 132, 917, 918, 954, 975, 978, 983, 986], "from_numpi": [72, 73, 135], "h5_file_s": [72, 73], "batch": [72, 73, 122, 126, 135, 318, 360, 361, 609, 636, 728, 737, 741, 807, 809, 889, 890, 891, 892, 911, 912, 915, 1033, 1034], "handle_inplac": [72, 73], "prime": [72, 73], "overwritten": [72, 73, 123, 125], "has_kei": [72, 73], "query_kei": [72, 73], "somewher": [72, 73], "has_key_chain": [72, 73], "include_inf": [72, 73, 609, 648, 689], "leafwis": [72, 73], "nan": [72, 73, 116, 118, 121, 174, 246, 252, 255, 368, 369, 372, 374, 377, 378, 381, 382, 385, 387, 390, 391, 394, 396, 399, 400, 403, 432, 435, 436, 439, 440, 443, 457, 460, 461, 464, 465, 468, 481, 484, 489, 492, 501, 504, 505, 508, 513, 516, 517, 520, 539, 542, 556, 559, 560, 563, 564, 567, 573, 576, 578, 581, 582, 585, 595, 599, 600, 604, 605, 608, 609, 648, 689, 728, 740, 934, 935, 936, 940, 942, 954, 959, 962, 963, 966, 967, 970, 975, 978, 979, 982, 983, 986, 987, 988, 991, 993, 996], "well": [72, 73, 121, 129, 136, 137, 148, 609, 648, 741, 789, 791], "inf": [72, 73, 121, 174, 609, 648, 689, 741, 807, 809], "identical_array_shap": [72, 73], "exclus": [72, 73, 87, 88, 121, 122, 126, 137, 175, 176, 177, 609, 627, 655, 656, 658, 690, 706, 707, 708, 709, 917, 919, 920], "identical_config": [72, 73], "identical_structur": [72, 73], "if_exist": [72, 73], "key_chains_contain": [72, 73], "sub_str": [72, 73], "join": [72, 73, 829, 835, 838, 873, 876, 998], "list_stack": [72, 73, 135], "dim": [72, 73, 127, 609, 662, 1019, 1030], "func": [72, 73, 126, 172, 173, 318, 362, 609, 620, 690, 701, 893, 906], "map_cont": [72, 73], "include_self": [72, 73], "possibi": [72, 73], "matrix": [72, 73, 175, 210, 213, 228, 232, 233, 237, 609, 610, 613, 621, 728, 737, 741, 742, 745, 750, 752, 753, 755, 756, 758, 759, 761, 762, 764, 765, 768, 769, 771, 772, 773, 775, 776, 778, 782, 784, 785, 787, 789, 791, 792, 794, 795, 797, 801, 803, 810, 812, 1019, 1029], "integ": [72, 73, 121, 126, 127, 134, 175, 176, 177, 198, 246, 288, 291, 299, 302, 305, 308, 368, 369, 372, 408, 411, 412, 415, 416, 419, 420, 423, 424, 427, 428, 431, 432, 435, 465, 468, 469, 472, 533, 536, 556, 559, 560, 563, 564, 567, 605, 608, 741, 772, 804, 806, 807, 809, 829, 868, 917, 919, 920, 927, 954, 959, 962, 963, 966, 967, 970, 971, 974, 975, 978, 979, 982, 983, 986, 987, 988, 991, 993, 996], "flatten": [72, 73, 609, 636, 741, 779, 781, 807, 809, 829, 855, 858, 863, 866, 929, 930, 931, 934, 935, 936, 940, 942], "broadcast": [72, 73, 116, 118, 119, 121, 126, 127, 160, 161, 162, 163, 164, 165, 166, 169, 171, 175, 176, 177, 179, 182, 184, 185, 188, 190, 191, 193, 196, 198, 199, 202, 204, 205, 207, 208, 220, 221, 223, 226, 228, 232, 233, 237, 238, 240, 241, 245, 246, 252, 255, 257, 260, 262, 265, 318, 363, 368, 369, 372, 374, 377, 378, 381, 382, 385, 387, 390, 391, 394, 396, 399, 400, 403, 404, 407, 408, 411, 412, 415, 416, 419, 420, 423, 424, 427, 428, 431, 432, 435, 436, 439, 440, 443, 444, 447, 449, 452, 453, 456, 457, 460, 461, 464, 465, 468, 469, 472, 473, 476, 477, 480, 481, 484, 485, 488, 489, 492, 493, 496, 497, 500, 501, 504, 505, 508, 509, 512, 513, 516, 517, 520, 521, 524, 525, 528, 529, 532, 533, 536, 537, 538, 539, 542, 544, 547, 548, 551, 552, 555, 556, 559, 560, 563, 564, 567, 568, 571, 573, 576, 578, 581, 582, 585, 586, 589, 590, 594, 595, 599, 600, 604, 605, 608, 609, 621, 622, 624, 627, 631, 632, 633, 635, 638, 641, 649, 662, 665, 666, 690, 723, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 739, 740, 741, 742, 745, 747, 749, 750, 752, 753, 755, 759, 761, 762, 764, 765, 768, 769, 771, 773, 775, 776, 778, 779, 781, 782, 784, 788, 789, 791, 792, 794, 795, 797, 798, 800, 801, 803, 804, 806, 807, 809, 810, 812, 813, 814, 817, 819, 822, 824, 827, 829, 830, 833, 835, 838, 839, 842, 843, 846, 847, 850, 851, 854, 855, 858, 859, 862, 863, 866, 869, 872, 873, 876, 877, 880, 881, 884, 885, 888, 911, 912, 915, 917, 918, 919, 920, 922, 923, 925, 928, 929, 930, 931, 933, 934, 942, 943, 949, 952, 954, 959, 962, 963, 966, 967, 970, 971, 974, 975, 978, 979, 982, 983, 986, 987, 988, 991, 993, 996], "max_depth": [72, 73, 318, 322, 325, 332, 342, 346, 350, 609, 647, 893, 905], "multi_map": [72, 73, 126], "map_nest": [72, 73, 83, 84, 93, 94, 97, 98, 400, 402, 408, 410, 416, 418, 420, 422, 424, 426, 428, 430, 449, 451, 469, 471, 473, 475, 477, 479, 493, 495, 497, 499, 517, 519, 521, 523, 529, 531, 533, 535, 548, 550, 556, 558, 560, 562, 765, 767, 835, 837, 873, 875], "leftmost": [72, 73, 893, 906], "multi_map_in_static_method": [72, 73, 126], "fn_name": [72, 73], "num_arrai": [72, 73, 121], "overwrite_at_key_chain": [72, 73], "overwrit": [72, 73, 129, 132, 318, 362], "target_dict": [72, 73], "return_dict": [72, 73], "prune_empti": [72, 73], "keep_non": [72, 73], "prune_key_chain": [72, 73], "key1": [72, 73, 136], "key2": [72, 73], "key3": [72, 73], "prune_key_from_key_chain": [72, 73], "prune_kei": [72, 73], "prune_keys_from_key_chain": [72, 73], "remove_key_length_limit": [72, 73], "remove_print_limit": [72, 73], "reshape_lik": [72, 73], "leading_shap": [72, 73], "return_cont": [72, 73], "restructur": [72, 73], "keep_orig": [72, 73], "transpos": [72, 73, 134, 137, 318, 349, 728, 730, 732, 734, 741, 776, 778, 782, 784, 998, 1019, 1021, 1023, 1025], "restructure_key_chain": [72, 73], "keychain_map": [72, 73], "set_at_key_chain": [72, 73], "set_at_kei": [72, 73], "set_framework": [72, 73, 132, 134, 135, 137], "set_ivy_backend": [72, 73], "ivy_backend": [72, 73], "attribut": [72, 73, 118, 126, 127, 133, 134, 135, 136, 246, 281, 284, 286, 287, 288, 291, 318, 358], "show_sub_contain": [72, 73], "sub_cont_or_keychain": [72, 73], "seed_valu": [72, 73, 917, 927], "shuffle_h5_fil": [72, 73], "dataset": [72, 73, 135, 147, 998], "size_ordered_arrai": [72, 73], "keychain": [72, 73], "smallest": [72, 73, 246, 281, 284, 288, 291, 368, 432, 435], "largest": [72, 73, 148, 246, 281, 284, 288, 291, 741, 792, 794], "slice_kei": [72, 73], "key_slic": [72, 73], "all_depth": [72, 73], "slice_via_kei": [72, 73], "sort_by_kei": [72, 73], "num_or_size_split": [72, 73, 132, 829, 868], "with_remaind": [72, 73, 829, 868], "constitu": [72, 73, 137], "dimension": [72, 73, 175, 176, 177, 190, 191, 210, 213, 741, 747, 749, 750, 752, 765, 768, 773, 775, 779, 781, 782, 784, 804, 806, 807, 809, 829, 868, 929, 930, 931, 932, 954, 959, 962, 963, 966, 967, 970, 971, 974, 975, 978, 979, 982, 983, 986, 987, 988, 991, 993, 996], "evenli": [72, 73, 175, 176, 177, 204, 205, 207, 208, 829, 868], "store": [72, 73, 118, 123, 125, 126, 132, 134, 135, 136, 609, 636, 690, 726, 741, 801, 803, 829, 868, 1031, 1032], "preserve_typ": [72, 73, 690, 723], "stop": [72, 73, 77, 78, 132, 149, 175, 176, 177, 178, 204, 205, 206, 207, 208, 209, 318, 333, 362, 690, 697, 699, 702, 704, 710, 712, 714, 716, 718, 720, 723, 889, 890, 891, 892, 1035, 1036, 1037, 1038, 1039, 1040], "structural_diff": [72, 73], "cuda": [72, 73, 132, 135, 149, 175, 204, 205, 207, 208, 318, 327, 334, 359, 609, 637, 638, 641, 662, 665, 666, 917, 918, 919, 920, 923, 925, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1039, 1041, 1042], "target": [72, 73, 115, 131, 135, 136, 137, 318, 336, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 998], "to_dict": [72, 73], "to_disk_as_hdf5": [72, 73, 135], "starting_index": [72, 73], "max_batch_s": [72, 73], "w": [72, 73, 87, 88, 132, 135, 136, 609, 618, 690, 692, 695, 697, 699, 700, 702, 704, 705, 710, 712, 713, 714, 716, 717, 718, 720, 721, 728, 729, 730, 731, 732, 733, 734, 735], "later": [72, 73, 121, 609, 620], "to_disk_as_json": [72, 73, 135], "to_disk_as_pickl": [72, 73, 135], "to_flat_list": [72, 73], "to_iter": [72, 73, 126], "leaf_keys_onli": [72, 73], "to_iterator_kei": [72, 73], "to_iterator_valu": [72, 73], "to_json": [72, 73], "to_multi_dev": [72, 73], "multidevcontain": [72, 73, 74], "distributedarrai": [72, 73], "update_backend": [72, 73], "to_raw": [72, 73], "raw": [72, 73, 118], "trim_kei": [72, 73], "max_length": [72, 73], "try_kc": [72, 73], "tri": [72, 73], "self": [72, 73, 125, 126, 132, 134, 135, 136, 137, 166, 167, 168, 179, 180, 181, 185, 186, 187, 193, 194, 195, 199, 200, 201, 210, 211, 212, 215, 216, 217, 223, 224, 225, 228, 230, 231, 233, 235, 236, 241, 243, 244, 252, 253, 254, 257, 258, 259, 262, 263, 264, 267, 268, 269, 276, 277, 278, 281, 282, 283, 288, 289, 290, 294, 295, 296, 299, 300, 301, 305, 306, 307, 318, 369, 370, 371, 374, 375, 376, 378, 379, 380, 382, 383, 384, 387, 388, 389, 391, 392, 393, 396, 397, 398, 400, 401, 402, 404, 405, 406, 408, 409, 410, 412, 413, 414, 416, 417, 418, 420, 421, 422, 424, 425, 426, 428, 429, 430, 432, 433, 434, 436, 437, 438, 440, 441, 442, 444, 445, 446, 449, 450, 451, 453, 454, 455, 457, 458, 459, 461, 462, 463, 465, 466, 467, 469, 470, 471, 473, 474, 475, 477, 478, 479, 481, 482, 483, 485, 486, 487, 489, 490, 491, 493, 494, 495, 497, 498, 499, 501, 502, 503, 505, 506, 507, 509, 510, 511, 513, 514, 515, 517, 518, 519, 521, 522, 523, 525, 526, 527, 529, 530, 531, 533, 534, 535, 539, 540, 541, 544, 545, 546, 548, 549, 550, 552, 553, 554, 556, 557, 558, 560, 561, 562, 564, 565, 566, 568, 569, 570, 573, 574, 575, 578, 579, 580, 582, 583, 584, 586, 587, 588, 590, 592, 593, 595, 597, 598, 600, 602, 603, 605, 606, 607, 610, 611, 612, 622, 623, 638, 639, 640, 680, 682, 683, 692, 693, 694, 697, 698, 702, 703, 706, 707, 710, 711, 714, 715, 718, 719, 742, 743, 744, 747, 748, 750, 751, 753, 754, 756, 757, 759, 760, 762, 763, 765, 766, 767, 769, 770, 773, 774, 776, 777, 779, 780, 782, 783, 785, 786, 789, 790, 792, 793, 795, 796, 798, 799, 801, 802, 804, 805, 807, 808, 810, 811, 814, 815, 816, 819, 820, 821, 824, 825, 826, 830, 831, 832, 835, 836, 837, 839, 840, 841, 843, 844, 845, 847, 848, 849, 851, 852, 853, 855, 856, 857, 859, 860, 861, 863, 864, 865, 869, 870, 871, 873, 874, 875, 877, 878, 879, 881, 882, 883, 885, 886, 887, 912, 913, 914, 923, 924, 936, 938, 939, 944, 945, 946, 949, 950, 951, 955, 956, 957, 959, 960, 961, 963, 964, 965, 967, 968, 969, 971, 972, 973, 975, 976, 977, 979, 980, 981, 983, 984, 985, 988, 989, 990, 993, 994, 995, 998, 1035, 1039], "arbitrari": [72, 73, 117, 121, 122, 126, 129, 136, 149, 175, 210, 213, 246, 257, 260, 305, 308, 318, 347, 348, 350], "concatten": [72, 73, 318, 347, 348, 349, 350, 362], "dim_siz": [72, 73, 318], "update_config": [72, 73], "global_norm": [72, 73, 85, 86, 622, 623], "vector": [72, 73, 148, 175, 210, 213, 609, 622, 624, 728, 737, 741, 747, 749, 756, 758, 765, 768, 779, 781, 792, 794, 795, 797, 804, 806, 807, 809, 810, 812, 1019, 1029], "with_default_key_color": [72, 73], "with_entries_as_list": [72, 73], "with_ivy_backend": [72, 73], "with_key_length_limit": [72, 73, 135], "with_print_ind": [72, 73, 135], "with_print_limit": [72, 73, 135], "with_print_line_spac": [72, 73], "containerwithcr": [74, 75, 77], "containerwithdatatyp": [74, 75, 79], "containerwithdevic": [74, 75, 81], "containerwithelementwis": [74, 75, 83, 126], "containerwithgener": [74, 75, 85], "containerwithgradi": [74, 75, 87], "containerwithimag": [74, 75, 89], "containerwithlay": [74, 75, 91], "containerwithlinearalgebra": [74, 75, 93], "containerwithloss": [74, 75, 95], "containerwithnorm": [74, 75, 99], "containerwithrandom": [74, 75, 101], "containerwithsearch": [74, 75, 103], "containerwithset": [74, 75, 105], "containerwithsort": [74, 75, 107], "containerwithstatist": [74, 75, 109], "containerwithutil": [74, 75, 111], "static_aco": [74, 75], "static_acosh": [74, 75], "static_arg_info": [74, 75], "static_arg_nam": [74, 75], "static_argmax": [74, 75], "static_argmin": [74, 75], "static_arrai": [74, 75], "static_array_equ": [74, 75], "static_arrays_equ": [74, 75], "static_as_ivy_dev": [74, 75], "static_as_ivy_dtyp": [74, 75], "static_as_native_dev": [74, 75], "static_as_native_dtyp": [74, 75], "static_asin": [74, 75], "static_assert_supports_inplac": [74, 75], "static_atan": [74, 75], "static_atan2": [74, 75], "static_atanh": [74, 75], "static_bitwise_and": [74, 75], "static_bitwise_invert": [74, 75], "static_bitwise_left_shift": [74, 75], "static_bitwise_or": [74, 75], "static_bitwise_right_shift": [74, 75], "static_bitwise_xor": [74, 75], "static_cache_fn": [74, 75], "static_ceil": [74, 75], "static_clear_mem_on_dev": [74, 75], "static_clip_matrix_norm": [74, 75], "static_clip_vector_norm": [74, 75], "static_closest_valid_dtyp": [74, 75], "static_concat": [74, 75], "static_constant_pad": [74, 75], "static_container_typ": [74, 75], "static_conv1d": [74, 75], "static_conv1d_transpos": [74, 75], "static_conv2d": [74, 75], "static_conv2d_transpos": [74, 75], "static_conv3d": [74, 75], "static_conv3d_transpos": [74, 75], "static_copy_arrai": [74, 75], "static_co": [74, 75], "static_cosh": [74, 75], "static_cross": [74, 75], "static_cumprod": [74, 75], "static_cumsum": [74, 75], "static_current_backend": [74, 75], "static_current_backend_str": [74, 75], "static_default": [74, 75], "static_default_devic": [74, 75], "static_default_dtyp": [74, 75], "static_default_float_dtyp": [74, 75], "static_default_int_dtyp": [74, 75], "static_depthwise_conv2d": [74, 75], "static_det": [74, 75], "static_dev": [74, 75], "static_dev_clon": [74, 75], "static_dev_clone_arrai": [74, 75], "static_dev_clone_it": [74, 75], "static_dev_clone_nest": [74, 75], "static_dev_dist": [74, 75], "static_dev_dist_arrai": [74, 75], "static_dev_dist_it": [74, 75], "static_dev_dist_nest": [74, 75], "static_dev_unifi": [74, 75], "static_dev_unify_arrai": [74, 75], "static_dev_unify_it": [74, 75], "static_dev_unify_nest": [74, 75], "static_dev_util": [74, 75], "static_diagon": [74, 75], "static_dropout": [74, 75], "static_dtyp": [74, 75], "static_dtype_bit": [74, 75], "static_eigh": [74, 75], "static_eigvalsh": [74, 75], "static_einops_rearrang": [74, 75], "static_einops_reduc": [74, 75], "static_einops_repeat": [74, 75], "static_einsum": [74, 75], "static_empti": [74, 75], "static_equ": [74, 75], "static_erf": [74, 75], "static_execute_with_gradi": [74, 75], "static_exist": [74, 75], "static_exp": [74, 75], "static_expand_dim": [74, 75], "static_expm1": [74, 75], "static_flip": [74, 75], "static_floor": [74, 75], "static_floor_divid": [74, 75], "static_floormod": [74, 75], "static_fourier_encod": [74, 75], "static_ful": [74, 75], "static_function_supported_dtyp": [74, 75], "static_function_unsupported_dtyp": [74, 75], "static_gath": [74, 75], "static_gelu": [74, 75], "static_get_all_arrays_in_memori": [74, 75], "static_get_all_ivy_arrays_on_dev": [74, 75], "static_get_min_bas": [74, 75], "static_get_min_denomin": [74, 75], "static_get_num_dim": [74, 75], "static_get_referrers_recurs": [74, 75], "static_gpu_is_avail": [74, 75], "static_great": [74, 75], "static_greater_equ": [74, 75], "static_handle_nest": [74, 75], "static_handle_out_argu": [74, 75], "static_has_nan": [74, 75], "static_indices_wher": [74, 75], "static_infer_devic": [74, 75], "static_infer_dtyp": [74, 75], "static_inplace_arrays_support": [74, 75], "static_inplace_decr": [74, 75], "static_inplace_incr": [74, 75], "static_inplace_upd": [74, 75], "static_inplace_variables_support": [74, 75], "static_inputs_to_native_arrai": [74, 75], "static_inv": [74, 75], "static_invalid_dtyp": [74, 75], "static_is_arrai": [74, 75], "static_is_ivy_arrai": [74, 75], "static_is_ivy_contain": [74, 75], "static_is_native_arrai": [74, 75], "static_isfinit": [74, 75], "static_isinf": [74, 75], "static_isnan": [74, 75], "static_leaky_relu": [74, 75], "static_less": [74, 75], "static_less_equ": [74, 75], "static_linear": [74, 75], "static_log": [74, 75], "static_log10": [74, 75], "static_log1p": [74, 75], "static_log2": [74, 75], "static_logaddexp": [74, 75], "static_logical_and": [74, 75], "static_logical_not": [74, 75], "static_logical_or": [74, 75], "static_logical_xor": [74, 75], "static_lstm_upd": [74, 75], "static_match_kwarg": [74, 75], "static_matmul": [74, 75], "static_matrix_norm": [74, 75], "static_matrix_pow": [74, 75], "static_matrix_rank": [74, 75], "static_matrix_transpos": [74, 75], "static_max": [74, 75], "static_maximum": [74, 75], "static_mean": [74, 75], "static_min": [74, 75], "static_minimum": [74, 75], "static_multi_head_attent": [74, 75], "static_multinomi": [74, 75], "static_multiprocess": [74, 75], "static_neg": [74, 75], "static_nonzero": [74, 75], "static_not_equ": [74, 75], "static_num_arrays_in_memori": [74, 75], "static_num_cpu_cor": [74, 75], "static_num_gpu": [74, 75], "static_num_ivy_arrays_on_dev": [74, 75], "static_one_hot": [74, 75], "static_out": [74, 75], "static_outputs_to_ivy_arrai": [74, 75], "static_percent_used_mem_on_dev": [74, 75], "static_permute_dim": [74, 75], "static_pinv": [74, 75], "static_posit": [74, 75], "static_pow": [74, 75], "static_print_all_arrays_in_memori": [74, 75], "static_print_all_ivy_arrays_on_dev": [74, 75], "static_prod": [74, 75], "static_promote_typ": [74, 75], "static_qr": [74, 75], "static_queue_timeout": [74, 75], "static_random_norm": [74, 75], "static_relu": [74, 75], "static_remaind": [74, 75], "static_repeat": [74, 75], "static_reshap": [74, 75], "static_round": [74, 75], "static_scaled_dot_product_attent": [74, 75], "static_scatter_flat": [74, 75], "static_scatter_nd": [74, 75], "static_se": [74, 75], "static_set_default_devic": [74, 75], "static_set_default_dtyp": [74, 75], "static_set_default_float_dtyp": [74, 75], "static_set_default_int_dtyp": [74, 75], "static_set_min_bas": [74, 75], "static_set_min_denomin": [74, 75], "static_set_queue_timeout": [74, 75], "static_set_shape_array_mod": [74, 75], "static_set_split_factor": [74, 75], "static_set_tmp_dir": [74, 75], "static_set_with_grad": [74, 75], "static_shap": [74, 75], "static_shape_array_mod": [74, 75], "static_shape_to_tupl": [74, 75], "static_shuffl": [74, 75], "static_sigmoid": [74, 75], "static_sinh": [74, 75], "static_slogdet": [74, 75], "static_softmax": [74, 75], "static_solv": [74, 75], "static_split": [74, 75], "static_split_factor": [74, 75], "static_split_func_cal": [74, 75], "static_sqrt": [74, 75], "static_squar": [74, 75], "static_squeez": [74, 75], "static_stable_divid": [74, 75], "static_stable_pow": [74, 75], "static_stack": [74, 75], "static_std": [74, 75], "static_stop_gradi": [74, 75], "static_sum": [74, 75], "static_supports_inplac": [74, 75], "static_svd": [74, 75], "static_svdv": [74, 75], "static_swapax": [74, 75], "static_tensordot": [74, 75], "static_til": [74, 75], "static_tmp_dir": [74, 75], "static_to_devic": [74, 75], "static_to_list": [74, 75], "static_to_native_arrays_and_back": [74, 75], "static_to_scalar": [74, 75], "static_total_mem_on_dev": [74, 75], "static_tpu_is_avail": [74, 75], "static_trac": [74, 75], "static_trunc": [74, 75], "static_try_else_non": [74, 75], "static_type_promote_arrai": [74, 75], "static_unique_al": [74, 75], "static_unique_invers": [74, 75], "static_unique_valu": [74, 75], "static_unset_default_devic": [74, 75], "static_unset_default_dtyp": [74, 75], "static_unset_default_float_dtyp": [74, 75], "static_unset_default_int_dtyp": [74, 75], "static_unset_shape_array_mod": [74, 75], "static_unset_with_grad": [74, 75], "static_unstack": [74, 75], "static_used_mem_on_dev": [74, 75], "static_valid_dtyp": [74, 75], "static_value_is_nan": [74, 75], "static_var": [74, 75], "static_vari": [74, 75], "static_variable_data": [74, 75], "static_vecdot": [74, 75], "static_vector_norm": [74, 75], "static_vector_to_skew_symmetric_matrix": [74, 75], "static_wher": [74, 75], "static_with_grad": [74, 75], "static_zero_pad": [74, 75], "at_dev": [74, 76, 318, 331, 332], "static_arang": [77, 78, 176], "static_asarrai": [77, 78, 179], "static_empty_lik": [77, 78, 185], "static_ey": [77, 78, 190], "n_row": [77, 78, 175, 190, 191, 192], "n_col": [77, 78, 175, 190, 191, 192], "static_from_dlpack": [77, 78, 193], "static_full_lik": [77, 78, 199], "static_linspac": [77, 78, 204], "num": [77, 78, 132, 175, 204, 205, 206, 207, 208, 209], "endpoint": [77, 78, 175, 204, 205, 206, 207, 209], "static_logspac": [77, 78, 207], "static_meshgrid": [77, 78, 210], "static_native_arrai": [77, 78, 215], "static_on": [77, 78, 220], "static_ones_lik": [77, 78, 223], "static_tril": [77, 78, 228], "static_triu": [77, 78, 233], "static_zero": [77, 78, 238], "static_zeros_lik": [77, 78, 241], "int32": [79, 80, 85, 86, 121, 127, 246, 267, 269, 270, 271, 286, 609, 680, 681, 683, 684, 829, 843, 846, 954, 971, 974, 979, 982], "int64": [79, 80, 121, 127, 246, 267, 269, 270, 271, 286, 317, 368, 424, 427, 929, 930, 931, 954, 971, 974, 979, 982], "static_astyp": [79, 80, 252], "static_broadcast_arrai": [79, 80, 257], "static_broadcast_to": [79, 80, 262], "static_can_cast": [79, 80, 267], "from_": [79, 80, 246, 267, 270, 271], "static_finfo": [79, 80, 281], "static_iinfo": [79, 80, 288], "static_is_float_dtyp": [79, 80, 294], "dtype_in": [79, 80, 246, 250, 251, 280, 293, 294, 297, 298, 299, 302, 303, 317], "static_is_int_dtyp": [79, 80, 299], "static_result_typ": [79, 80, 305], "02": [83, 84, 391, 393, 690, 692, 695], "21": [83, 84, 368, 391, 393, 428, 431, 609, 627, 741, 753, 755, 779, 781, 813, 824, 827, 954, 955, 958], "61": [83, 84, 95, 96, 368, 391, 393, 586, 589, 813, 814, 816, 817, 818, 824, 826, 828], "757": [83, 84, 368, 573, 575, 576, 577], "959": [83, 84, 368, 573, 575, 576, 577], "279": [83, 84, 368, 573, 575, 576, 577], "static_ab": [83, 84, 369], "static_add": [83, 84, 118, 119, 126, 382], "static_asinh": [83, 84, 391], "97": [83, 84, 368, 391, 394, 395], "37": [83, 84, 101, 102, 368, 391, 394, 395, 595, 599, 919, 921], "75": [83, 84, 368, 391, 394, 395, 741, 762, 764, 779, 781], "static_divid": [83, 84, 126, 444], "static_multipli": [83, 84, 126, 539], "static_sign": [83, 84, 568], "static_sin": [83, 84, 573], "static_subtract": [83, 84, 126, 590], "static_tan": [83, 84, 119, 126, 595], "143": [83, 84, 119, 368, 595, 596, 598, 599], "38": [83, 84, 119, 368, 595, 596, 598, 599], "static_tanh": [83, 84, 600], "76": [83, 84, 368, 440, 443, 600, 601, 690, 692, 695, 741, 798, 800, 954, 955, 958], "96": [83, 84, 368, 595, 599, 600, 601, 690, 692, 695, 741, 779, 781, 954, 955, 958], "995": [83, 84, 368, 600, 601, 603, 604], "9999": [83, 84, 600, 601], "static_all_equ": [85, 86, 610, 612], "max_norm": [85, 86, 609, 621, 622, 623, 624], "static_gather_nd": [85, 86, 638], "static_to_numpi": [85, 86, 680, 683], "lr": [87, 88, 135, 136, 690, 697, 698, 699, 700, 702, 703, 704, 705, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 1035, 1036, 1037, 1038, 1039, 1040], "mw_tm1": [87, 88, 690, 697, 698, 699, 700, 710, 711, 712, 713], "vw_tm1": [87, 88, 690, 697, 698, 699, 700, 710, 711, 712, 713], "max_trust_ratio": [87, 88, 690, 710, 711, 712, 713, 1035, 1037], "decay_lambda": [87, 88, 690, 710, 711, 712, 713, 714, 715, 716, 717, 1035, 1037, 1038], "effective_grad": [87, 88, 690, 718, 719, 720, 721], "static_adam_step": [87, 88, 692], "87": [87, 88, 101, 102, 690, 692, 695, 696, 919, 921], "976": [87, 88, 368, 600, 604, 690, 692, 695, 696], "static_adam_upd": [87, 88, 697], "static_gradient_descent_upd": [87, 88, 702], "static_is_vari": [87, 88, 706], "static_lamb_upd": [87, 88, 710], "static_lars_upd": [87, 88, 714], "static_optimizer_upd": [87, 88, 718], "73": [93, 94, 121, 368, 582, 585, 741, 742, 744, 745, 746, 911, 912, 915], "577": [93, 94, 741, 742, 744, 745, 746], "41": [93, 94, 134, 368, 428, 431, 582, 585, 741, 742, 744, 745, 746, 954, 979, 982], "707": [93, 94, 741, 742, 744, 745, 746], "static_choleski": [93, 94, 742], "static_rol": [93, 94, 97, 98, 119, 126, 742, 746, 830, 834, 863], "511": [95, 96, 813, 814, 816, 817, 818, 824, 826, 828], "5108256": [95, 96, 819, 821], "609438": [95, 96, 819, 821], "static_binary_cross_entropi": [95, 96, 814], "static_cross_entropi": [95, 96, 819], "20397282": [95, 96, 819, 823], "83258148": [95, 96, 819, 823], "60943794": [95, 96, 819, 823], "static_sparse_cross_entropi": [95, 96, 824], "static_clip": [97, 98, 830], "658": [99, 100, 911, 912, 914, 915, 916], "04": [99, 100, 728, 740, 911, 912, 914, 915, 916], "759": [99, 100, 911, 912, 914, 915, 916], "42": [99, 100, 101, 102, 137, 160, 166, 169, 690, 692, 695, 741, 779, 781, 912, 914, 916, 917, 919, 921, 927, 954, 955, 958], "403": [99, 100, 912, 914, 916], "62": [99, 100, 101, 102, 912, 914, 916, 919, 921], "54": [99, 100, 119, 368, 436, 439, 440, 443, 582, 585, 728, 740, 741, 779, 781, 912, 914, 916, 917, 922, 954, 955, 958], "static_layer_norm": [99, 100, 912], "static_randint": [101, 102, 919], "20": [101, 102, 134, 368, 428, 431, 457, 460, 564, 567, 582, 585, 741, 753, 755, 779, 781, 798, 800, 917, 919, 920, 921, 929, 932, 933, 954, 955, 958], "40": [101, 102, 368, 440, 443, 582, 585, 741, 779, 781, 919, 921, 954, 955, 958], "52": [101, 102, 690, 692, 695, 741, 779, 781, 919, 921, 934, 935, 954, 955, 958], "95": [101, 102, 368, 568, 571, 690, 692, 695, 919, 921], "13": [101, 102, 119, 121, 126, 368, 408, 411, 428, 431, 440, 443, 582, 585, 609, 627, 690, 692, 695, 728, 740, 741, 753, 755, 779, 781, 919, 921, 929, 933, 934, 935, 954, 955, 958], "static_random_uniform": [101, 102, 923], "static_unique_count": [105, 106, 936], "classivi": [105, 106, 829, 868, 934, 936, 937, 939, 940], "static_argsort": [107, 108, 944], "static_sort": [107, 108, 949], "static_al": [111, 112, 988], "static_ani": [111, 112, 993], "add_ivy_container_instance_method": 113, "containerexampl": [113, 114], "who": [115, 131, 149], "mainli": [115, 133, 135], "under": [115, 118, 119, 120, 121, 122, 126, 131, 132, 135, 137], "hood": [115, 119, 121, 122, 126, 131, 132, 135, 137], "weed": [115, 131], "behind": [115, 121, 131, 133, 690, 697, 699, 702, 704, 710, 712, 714, 716, 718, 720], "tour": 115, "primari": [115, 121, 123, 129, 149], "composit": [115, 121, 123, 125, 126, 129, 132, 136, 137, 149], "nestabl": [115, 118, 119, 121, 129, 175, 176, 177, 179, 182, 184, 185, 188, 190, 191, 193, 196, 198, 199, 202, 204, 205, 207, 208, 210, 213, 220, 221, 223, 226, 228, 232, 233, 237, 238, 240, 241, 245, 246, 267, 270, 368, 369, 372, 382, 385, 387, 390, 391, 394, 432, 435, 465, 468, 537, 548, 551, 568, 571, 573, 576, 582, 585, 586, 589, 595, 599, 609, 637, 728, 731, 740, 741, 742, 745, 753, 755, 829, 863, 866, 911, 912, 915, 934, 936, 940, 954, 959, 962, 987, 988, 991], "dynam": [115, 127, 128, 129, 132, 172, 173], "runtim": [115, 121, 318], "h": [115, 126, 728, 731, 732, 733, 734, 735, 893, 896], "j": [115, 609, 617, 618, 741, 801, 803, 954, 955, 958], "n": [115, 121, 175, 210, 213, 228, 232, 233, 237, 609, 618, 728, 736, 741, 753, 755, 765, 768, 772, 773, 775, 776, 778, 779, 781, 782, 784, 785, 787, 792, 794, 795, 797, 801, 803, 804, 806, 807, 809, 810, 812, 829, 839, 842, 843, 846, 851, 854, 873, 876, 885, 888, 917, 922, 923, 925, 929, 932, 954, 963, 966, 975, 978, 979, 982, 983, 986, 987, 988, 991, 993, 996], "borrow": 115, "taken": [116, 130, 137, 741, 753, 755], "constant": [116, 122, 136, 137, 149, 318, 327, 328, 829, 839, 842, 893, 899, 911, 912, 915, 1010, 1011, 1015, 1018, 1031, 1032, 1033, 1034], "compil": [116, 126, 131, 133, 149, 998, 1031, 1032, 1035, 1036, 1037, 1038, 1039, 1040], "meta": [116, 125, 890, 891, 892], "overlap": 116, "sever": [116, 149, 741, 762, 764], "judgement": 116, "locat": [116, 121, 123, 128, 917, 918], "some_namespac": 116, "some_backend": 116, "another_backend": 116, "break": [116, 117, 130, 134, 149, 998], "anyth": [116, 121, 998], "refactor": 116, "ongo": 116, "subfold": [116, 121], "via": [116, 126, 127, 128, 129, 132, 134, 135, 148, 893, 894, 903, 904], "file_nam": [116, 121], "my_func": [116, 119], "int": [116, 117, 119, 122, 126, 127, 128, 129, 130, 137, 160, 165, 172, 173, 175, 190, 191, 198, 199, 202, 204, 205, 207, 208, 228, 232, 233, 237, 246, 262, 265, 275, 280, 281, 284, 288, 291, 299, 302, 318, 340, 343, 344, 345, 346, 354, 355, 356, 362, 363, 368, 408, 411, 412, 415, 416, 419, 420, 423, 424, 427, 428, 431, 609, 615, 627, 628, 631, 632, 633, 636, 637, 646, 662, 665, 674, 688, 690, 692, 695, 697, 699, 710, 712, 728, 729, 731, 733, 734, 735, 741, 747, 749, 753, 755, 798, 800, 801, 803, 804, 806, 807, 809, 813, 819, 822, 824, 827, 829, 835, 838, 839, 842, 843, 846, 847, 850, 851, 854, 855, 858, 863, 866, 868, 869, 872, 873, 876, 877, 880, 881, 884, 885, 888, 889, 890, 891, 892, 893, 896, 905, 911, 912, 915, 917, 918, 919, 920, 927, 929, 930, 931, 943, 944, 947, 949, 952, 954, 959, 962, 963, 966, 967, 970, 975, 978, 979, 982, 983, 986, 987, 988, 991, 993, 996], "nativedtyp": [116, 117, 127, 128, 175, 176, 177, 179, 182, 184, 185, 188, 190, 191, 198, 199, 202, 215, 218, 220, 221, 223, 226, 238, 240, 241, 245, 246, 251, 252, 255, 274, 275, 276, 279, 304, 317, 954, 979, 982], "nativedevic": [116, 117, 127, 128, 175, 176, 177, 179, 182, 184, 185, 188, 190, 191, 198, 199, 202, 204, 205, 207, 208, 215, 218, 220, 221, 223, 226, 238, 240, 241, 245, 318, 335, 336, 337, 351, 357, 359, 361, 363, 364, 367, 609, 662, 917, 918, 919, 920, 922, 923, 925], "my": 116, "numer": [116, 136, 175, 210, 213, 246, 252, 255, 368, 369, 372, 382, 385, 432, 435, 444, 447, 461, 464, 465, 468, 469, 472, 481, 484, 485, 488, 489, 492, 493, 496, 525, 528, 529, 532, 539, 542, 544, 547, 548, 551, 556, 559, 560, 563, 568, 571, 586, 589, 590, 594, 605, 608, 609, 644, 645, 667, 668, 675, 676, 741, 747, 749, 765, 768, 779, 781, 792, 794, 798, 800, 801, 803, 804, 806, 917, 928, 929, 930, 931, 954, 959, 962, 971, 974, 979, 982, 1010], "cooler": 116, "produc": [116, 121, 318, 327, 328, 728, 740], "something_cool": 116, "category_nam": [117, 118, 122, 127, 128], "backend_nam": [117, 118, 122, 123, 124, 127, 128], "adress": 117, "conveni": [117, 127, 128, 133, 135, 136], "revisit": [117, 137], "dedic": [117, 134, 136, 690, 726, 1008, 1009], "four": [117, 119, 122, 127, 135], "float": [117, 118, 121, 122, 126, 127, 129, 134, 136, 160, 162, 174, 175, 176, 177, 184, 190, 191, 198, 199, 202, 204, 205, 207, 208, 220, 221, 238, 240, 246, 252, 255, 274, 281, 284, 294, 297, 305, 308, 318, 351, 357, 361, 364, 367, 368, 369, 372, 374, 377, 378, 381, 382, 385, 387, 390, 391, 394, 396, 399, 400, 403, 404, 407, 428, 431, 432, 435, 436, 439, 440, 443, 444, 447, 449, 452, 457, 460, 461, 464, 465, 468, 469, 472, 473, 476, 477, 480, 493, 496, 501, 504, 505, 508, 513, 516, 517, 520, 539, 542, 544, 547, 548, 551, 552, 555, 556, 559, 560, 563, 564, 567, 573, 576, 578, 581, 582, 585, 590, 594, 595, 599, 600, 604, 605, 608, 609, 621, 622, 624, 636, 644, 645, 667, 668, 675, 676, 690, 692, 695, 697, 699, 702, 704, 710, 712, 714, 716, 718, 720, 728, 731, 735, 740, 741, 742, 745, 750, 752, 756, 758, 759, 761, 762, 764, 773, 775, 782, 784, 785, 787, 789, 791, 792, 794, 807, 809, 813, 814, 817, 819, 822, 824, 827, 889, 890, 891, 892, 911, 912, 915, 917, 922, 923, 925, 934, 935, 936, 940, 942, 954, 959, 962, 963, 966, 967, 970, 971, 974, 975, 978, 979, 982, 983, 986], "tf": [117, 125, 127, 128, 129, 132, 137, 149, 998], "jnp": [117, 127, 128, 129, 137, 998], "jaxarrai": [117, 127, 128, 129], "wherea": [117, 119, 121, 122, 125, 127, 128, 137], "__sub__": [117, 119, 125, 126, 134], "__mul__": [117, 119, 125, 126, 134], "__div__": 117, "permit": [117, 121, 125], "dicat": 117, "addition": [117, 129], "omit": [117, 129, 934, 935, 936, 940, 942], "wrapper": [117, 124, 125, 126, 127, 129, 134], "contrast": [117, 118], "futher": 117, "respect": [117, 119, 121, 125, 126, 127, 130, 175, 210, 213, 368, 369, 372, 382, 385, 400, 403, 408, 411, 416, 419, 420, 423, 424, 427, 428, 431, 444, 447, 449, 452, 469, 472, 473, 476, 477, 480, 493, 496, 497, 500, 517, 520, 521, 524, 529, 532, 533, 536, 539, 542, 548, 551, 560, 563, 590, 594, 690, 692, 695, 697, 699, 701, 702, 704, 710, 712, 714, 716, 718, 720, 741, 785, 787, 889, 890, 891, 892], "absenc": 117, "pep": 117, "484": 117, "annot": [117, 130], "dictat": [117, 119, 125, 129], "brittl": 117, "intend": [117, 954, 979, 982], "subset": [117, 118, 121, 132], "freeli": 117, "extend": [117, 118, 123], "consum": [117, 121, 126, 318], "inde": [117, 149], "flexibl": 117, "technic": [117, 126, 129, 149], "original_typ": 117, "cumbersom": 117, "readabl": [117, 125, 126, 134, 135], "account": 118, "instanti": 118, "firstli": [118, 119, 122, 125, 127, 129, 135], "templat": [118, 121, 998], "spec": [118, 119], "api_specif": [118, 175, 176, 177, 179, 182, 184, 185, 188, 190, 191, 193, 196, 198, 199, 202, 204, 205, 220, 221, 223, 226, 228, 232, 233, 237, 238, 240, 241, 245, 246, 267, 270, 368, 369, 372, 387, 390, 391, 394, 428, 431, 432, 435, 440, 443, 465, 468, 537, 548, 551, 573, 576, 582, 585, 586, 589, 741, 753, 755, 829, 843, 846, 863, 866, 934, 935, 936, 940, 943, 944, 947, 954, 959, 962], "array_api": 118, "preview": 118, "render": 118, "incorrectli": [118, 130], "onlin": [118, 998], "approxim": [118, 160, 161, 368, 374, 377, 378, 381, 387, 390, 391, 394, 396, 399, 400, 403, 436, 439, 440, 443, 457, 460, 461, 464, 501, 504, 505, 508, 509, 512, 513, 516, 556, 559, 573, 576, 578, 581, 595, 599, 600, 604, 741, 773, 775, 782, 784], "tangent": [118, 160, 171, 368, 396, 399, 400, 403, 404, 407, 595, 599, 600, 604], "domain": [118, 368, 374, 377, 378, 381, 387, 390, 391, 394, 396, 399, 400, 403, 436, 439, 440, 443, 457, 460, 461, 464, 501, 504, 505, 508, 513, 516, 573, 576, 578, 581, 582, 585, 595, 599, 600, 604], "infin": [118, 174, 246, 252, 255, 368, 369, 372, 378, 381, 382, 385, 391, 394, 396, 399, 400, 403, 432, 435, 436, 439, 440, 443, 457, 460, 461, 464, 465, 468, 469, 472, 481, 484, 485, 488, 501, 504, 505, 508, 513, 516, 517, 520, 539, 542, 556, 559, 560, 563, 564, 567, 573, 576, 578, 581, 582, 585, 595, 599, 600, 604, 605, 608, 741, 807, 809, 954, 959, 962, 967, 970, 987, 988, 991, 993, 996], "codomain": [118, 368, 374, 377, 378, 381, 387, 390, 391, 394, 396, 399, 400, 403, 436, 439, 440, 443, 457, 460, 461, 464, 501, 504, 505, 508, 513, 516, 573, 576, 578, 581, 582, 585, 595, 599, 600, 604], "x_i": [118, 368, 369, 372, 374, 377, 378, 381, 387, 390, 391, 394, 396, 399, 412, 415, 432, 435, 436, 439, 440, 443, 457, 460, 461, 464, 465, 468, 481, 484, 485, 488, 489, 492, 501, 504, 505, 508, 513, 516, 525, 528, 544, 547, 564, 567, 568, 571, 573, 576, 578, 581, 582, 585, 586, 589, 595, 599, 600, 604, 605, 608, 934, 935, 936, 940, 942, 954, 959, 962, 963, 966, 967, 970, 975, 978, 979, 982, 983, 986], "assum": [118, 121, 123, 127, 134, 135, 149, 175, 176, 177, 179, 182, 184, 185, 188, 190, 191, 193, 196, 198, 199, 202, 204, 205, 207, 208, 210, 213, 220, 221, 223, 226, 228, 232, 233, 237, 238, 240, 241, 245, 246, 267, 270, 368, 369, 372, 382, 385, 387, 390, 391, 394, 408, 411, 428, 431, 432, 435, 436, 439, 440, 443, 465, 468, 537, 548, 551, 564, 567, 568, 571, 573, 576, 582, 585, 586, 589, 595, 599, 600, 604, 609, 637, 728, 731, 740, 741, 742, 745, 750, 752, 753, 755, 829, 843, 846, 847, 850, 863, 866, 911, 912, 915, 934, 935, 936, 940, 943, 944, 947, 954, 959, 962, 987, 988, 991], "express": [118, 130, 132, 137, 368, 374, 377, 387, 390, 396, 399, 400, 403, 436, 439, 573, 576, 595, 599], "radian": [118, 368, 374, 377, 387, 390, 396, 399, 400, 403, 436, 439, 573, 576, 595, 599], "operand": [118, 368, 374, 377, 378, 381, 382, 385, 387, 390, 391, 394, 396, 399, 400, 403, 428, 431, 432, 435, 436, 439, 440, 443, 457, 460, 461, 464, 465, 468, 501, 504, 505, 508, 513, 516, 517, 520, 539, 542, 556, 559, 560, 563, 564, 567, 573, 576, 578, 581, 582, 585, 595, 599, 600, 604, 605, 608, 954, 955, 958, 959, 962, 967, 970, 979, 982], "whose": [118, 121, 175, 228, 232, 233, 237, 368, 378, 381, 391, 394, 404, 407, 436, 439, 440, 443, 556, 559, 573, 576, 578, 581, 595, 599, 600, 604, 609, 620, 741, 742, 745, 750, 752, 753, 755, 756, 758, 759, 761, 762, 764, 773, 775, 776, 778, 779, 781, 782, 784, 785, 787, 789, 791, 792, 794, 795, 797, 801, 803, 829, 847, 850, 863, 866, 934, 935, 936, 940, 954, 955, 958], "ref": [118, 368, 424, 427, 493, 496, 539, 542, 548, 551, 560, 563, 590, 594, 829, 873, 876], "promot": [118, 122, 127, 246, 252, 255, 267, 270, 304, 305, 308, 313, 368, 374, 377, 378, 381, 382, 385, 387, 390, 391, 394, 396, 399, 404, 407, 408, 411, 416, 419, 420, 423, 424, 427, 428, 431, 436, 439, 440, 443, 444, 447, 457, 460, 461, 464, 501, 504, 505, 508, 513, 516, 517, 520, 533, 536, 539, 542, 556, 559, 560, 563, 573, 576, 578, 581, 582, 585, 595, 599, 600, 604, 741, 742, 745, 747, 749, 762, 764, 765, 768, 773, 775, 779, 781, 782, 784, 789, 791, 804, 806, 807, 809, 829, 873, 876, 954, 963, 966], "But": [118, 126, 137], "needless": 118, "info": [118, 998], "renam": 118, "conform": [118, 175, 176, 177, 179, 182, 184, 185, 188, 190, 191, 193, 196, 198, 199, 202, 204, 205, 210, 213, 220, 221, 223, 226, 228, 232, 233, 237, 238, 240, 241, 245, 246, 267, 270, 368, 369, 372, 382, 385, 387, 390, 391, 394, 408, 411, 428, 431, 432, 435, 440, 443, 461, 464, 465, 468, 497, 500, 537, 548, 551, 564, 567, 568, 571, 573, 576, 582, 585, 586, 589, 595, 599, 600, 604, 741, 750, 752, 753, 755, 829, 843, 846, 847, 850, 863, 866, 934, 935, 936, 940, 943, 944, 947, 954, 959, 962, 987, 988, 991], "org": [118, 175, 176, 177, 179, 182, 184, 185, 188, 190, 191, 193, 196, 198, 199, 202, 204, 205, 220, 221, 223, 226, 228, 232, 233, 237, 238, 240, 241, 245, 246, 267, 270, 368, 369, 372, 387, 390, 391, 394, 428, 431, 432, 435, 440, 443, 465, 468, 537, 548, 551, 573, 576, 582, 585, 586, 589, 690, 692, 695, 697, 699, 741, 753, 755, 829, 843, 846, 863, 866, 934, 935, 936, 940, 943, 944, 947, 954, 959, 962], "elementwise_funct": [118, 368, 369, 372, 387, 390, 391, 394, 428, 431, 432, 435, 440, 443, 465, 468, 537, 548, 551, 573, 576, 582, 585, 586, 589, 741, 753, 755, 829, 863, 866, 934, 935, 943, 944, 947, 954, 959, 962], "descript": [118, 121, 126, 175, 176, 177, 179, 182, 184, 185, 188, 190, 191, 193, 196, 198, 199, 202, 204, 205, 207, 208, 210, 213, 220, 221, 223, 226, 228, 232, 233, 237, 238, 240, 241, 245, 246, 267, 270, 368, 369, 372, 382, 385, 387, 390, 391, 394, 408, 411, 428, 431, 432, 435, 440, 443, 465, 468, 537, 548, 551, 564, 567, 568, 571, 573, 576, 582, 585, 586, 589, 595, 599, 600, 604, 609, 637, 728, 731, 740, 741, 742, 745, 750, 752, 753, 755, 807, 809, 829, 843, 846, 847, 850, 863, 866, 911, 912, 915, 934, 935, 936, 940, 943, 944, 947, 954, 959, 962, 987, 988, 991], "simplic": [118, 136, 148, 175, 176, 177, 179, 182, 184, 185, 188, 190, 191, 193, 196, 198, 199, 202, 204, 205, 207, 208, 210, 213, 220, 221, 223, 226, 228, 232, 233, 237, 238, 240, 241, 245, 246, 267, 270, 368, 369, 372, 382, 385, 387, 390, 391, 394, 408, 411, 428, 431, 432, 435, 440, 443, 465, 468, 537, 548, 551, 564, 567, 568, 571, 573, 576, 582, 585, 586, 589, 595, 599, 600, 604, 609, 637, 728, 731, 740, 741, 742, 745, 750, 752, 753, 755, 829, 843, 846, 847, 850, 863, 866, 911, 912, 915, 934, 935, 936, 940, 943, 944, 947, 954, 959, 962], "judgment": 118, "beyond": [118, 829, 863, 866], "text": 118, "func_nam": [118, 119, 122], "pure": [118, 134, 137, 149], "themselv": [118, 122, 126, 127, 128, 136, 893, 894], "operator_nam": 118, "succinct": 118, "contstructor": 118, "though": [118, 122, 127, 135, 149], "forward": [118, 121, 137, 148, 149, 1031, 1032, 1035, 1039], "_forward": [118, 132, 135, 136, 998], "former": 118, "explicitli": [118, 122, 123, 125, 126, 129, 132, 149, 741, 756, 758, 1019, 1028, 1030, 1031, 1032], "latter": [118, 123], "implicit": [118, 121, 126, 132], "docst": 118, "eight": 119, "static_": 119, "op_nam": 119, "__r": 119, "__truediv__": [119, 125, 126], "recap": [119, 126, 136], "independ": [119, 120, 124, 126, 132, 137, 741, 747, 749, 789, 791, 917, 918], "combinatorili": 119, "variat": [119, 121], "grid": [119, 121, 148, 175, 210, 213], "vari": [119, 121, 126, 134, 934, 935, 936, 940, 942], "simplest": [119, 121], "small": [119, 122, 132, 136, 149, 368, 539, 542, 741, 773, 775, 782, 784, 911, 912, 915, 1033, 1034], "unus": [119, 129, 130, 172, 173], "18": [119, 126, 368, 428, 431, 741, 753, 755, 779, 781, 954, 955, 958], "excess": [119, 123, 134], "okai": [119, 132], "showcas": [119, 148], "demonstr": [119, 134], "replic": [119, 127], "meant": 119, "imaginari": 119, "some_flag": 119, "another_flag": 119, "jointli": 119, "three": [119, 121, 126, 131, 175, 210, 213, 998], "x0": [119, 609, 617], "procedur": 119, "sens": [119, 126, 134], "5574077": 119, "1850398": 119, "5463025": 119, "8422884": 119, "91601413": 119, "9647598": 119, "3738229": 119, "1597457": 119, "0963247": 119, "9955841": 119, "3278579": 119, "multi": [119, 126, 131, 149, 728, 739, 741, 747, 749, 998, 1004, 1019, 1030], "seper": [119, 609, 636], "pars": [119, 149], "satisfi": [119, 741, 810, 812], "far": [119, 128, 133, 134, 893, 894, 904], "asid": [119, 148], "irrelev": [119, 127], "increasingli": 119, "complex": [119, 135, 136, 137, 149, 741, 756, 758, 792, 794], "rule": [119, 121, 122, 125, 126, 127, 130, 246, 252, 255, 267, 270, 305, 308, 368, 404, 407, 424, 427, 444, 447, 539, 542, 560, 563, 741, 742, 745, 747, 749, 779, 781, 789, 791], "14254655": 119, "1578213": 119, "380515": 119, "17": [119, 126, 160, 162, 741, 753, 755, 917, 922], "trivial": 119, "By": [119, 122, 126, 129, 136, 137, 609, 627, 628, 741, 804, 806, 829, 855, 858, 954, 959, 962, 963, 966, 967, 970, 971, 974, 975, 978, 979, 982, 983, 986, 987, 988, 991, 993, 996], "non": [119, 126, 127, 132, 172, 173, 246, 252, 255, 293, 368, 525, 528, 529, 532, 728, 731, 741, 750, 752, 773, 775, 792, 794, 798, 800, 804, 806, 807, 809, 929, 930, 931, 932, 954, 959, 962, 963, 966, 967, 970, 971, 974, 983, 986, 987, 988, 991, 993, 996, 1031, 1032, 1035, 1039], "exlud": 119, "unit": [120, 121, 149, 160, 161, 162, 163, 318], "thoroughli": 120, "ci": [120, 121, 149], "failur": 120, "On": [121, 130, 133, 137], "fixtur": 121, "300": [121, 368, 564, 567], "hit": [121, 132], "action": 121, "eleg": 121, "intellig": 121, "sampl": [121, 728, 736, 917, 918, 922, 923, 925, 954, 975, 978, 983, 986, 1019, 1027], "rang": [121, 135, 136, 137, 175, 176, 177, 204, 205, 207, 208, 934, 935, 954, 971, 974, 979, 982, 998], "cach": [121, 122, 318, 336, 609, 620], "unexplor": 121, "known": 121, "repeatedli": [121, 126, 893, 902], "upload": 121, "artifact": 121, "parametr": 121, "statement": [121, 130, 149], "plai": [121, 137], "varieti": [121, 127, 128], "wide": 121, "valid_int_dtyp": 121, "int8": [121, 127, 246, 286, 317], "int16": [121, 127, 246, 267, 270, 286, 954, 971, 974, 979, 982], "uint8": [121, 127, 246, 267, 270, 286, 317], "uint16": [121, 127, 246, 287, 954, 971, 974, 979, 982], "uint32": [121, 127, 246, 287, 954, 971, 974, 979, 982], "uint64": [121, 127, 246, 287, 954, 971, 974, 979, 982], "custom_strategi": 121, "st": 121, "sampled_from": 121, "min_siz": 121, "max_siz": 121, "wherein": 121, "referenc": 121, "print_hypothesis_exampl": 121, "searchstrategi": 121, "randomis": 121, "simplist": 121, "intricaci": 121, "briefli": [121, 122, 135], "bound": [121, 132], "mechan": [121, 147, 149, 998], "power": [121, 134, 135, 136, 368, 424, 427, 457, 460, 556, 559, 609, 644, 667, 676, 741, 772, 1010], "math": [121, 129, 137, 998], "inclus": [121, 129, 175, 176, 177, 917, 919, 920], "width": 121, "losslessli": 121, "mostli": 121, "drawn": [121, 917, 918, 919, 920, 922, 923, 925], "one_of": 121, "datum": 121, "pipe": 121, "overload": 121, "shorthand": 121, "draw": [121, 917, 918, 922, 923, 925], "input_dtyp": 121, "reject": 121, "flatmap": 121, "suppos": 121, "valid": [121, 127, 132, 246, 272, 728, 729, 730, 731, 732, 733, 734, 735, 829, 873, 876, 987, 988, 991, 993, 996, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026], "dataobject": 121, "test_argsort": 121, "decor": [121, 122, 124, 126, 127, 128, 129], "initialis": [121, 318], "snippet": 121, "dtype_and_x": 121, "dtype_and_valu": 121, "valid_float_dtyp": 121, "list_of_length": 121, "num_positional_arg": 121, "instance_method": 121, "alpha": [121, 160, 162], "test_leaky_relu": 121, "fw": [121, 728, 729, 730, 731, 732, 733, 734, 735], "float16": [121, 127, 246, 287, 317], "exhaust": 121, "num_posit": 121, "indirectli": 121, "advis": 121, "seri": 121, "9433925": 121, "401298464324817e": 121, "574352379": 121, "99999": 121, "2250738585072014e": 121, "308": 121, "103515625e": 121, "unpack": [121, 130, 609, 688], "seamlessli": 121, "edg": [121, 132, 137, 829, 830, 833, 839, 842, 885, 888, 998], "encount": 121, "criterion": 121, "straight": [121, 134, 998], "array_valu": 121, "valid_ax": 121, "hand": [121, 122, 130, 149], "craft": 121, "polici": [121, 148], "hoc": 121, "overview": [121, 131, 148], "array_dtyp": 121, "array_bool": 121, "na": 121, "test_concat": 121, "test_devic": 121, "array_shap": 121, "test_manipul": 121, "common_shap": 121, "test_lay": 121, "size_bound": 121, "precis": [121, 246, 281, 284, 368, 539, 542, 582, 585], "283405296074752": 121, "564049465049088": 121, "0417876997507982e": 121, "min_valu": 121, "max_valu": 121, "allow_inf": 121, "min_num_dim": 121, "wherev": 121, "reshape_shap": 121, "larger": [121, 132, 137, 246, 281, 284, 829, 830, 833, 863, 866, 954, 975, 978, 983, 986], "stand": 121, "alon": [121, 318, 357, 367], "fashion": 121, "some_sequ": 121, "06": [121, 690, 692, 695], "allow_subnorm": 121, "exclude_min": 121, "960464477539063e": 121, "08": [121, 368, 391, 394, 728, 740], "coverag": 121, "allow_nan": 121, "Such": 121, "kind": [121, 149, 246, 281, 284, 288, 291, 368, 556, 559, 954, 971, 974, 979, 982], "get_shap": 121, "allow_non": 121, "max_num_dim": 121, "min_dim_s": 121, "none_or_list_of_float": 121, "200": 121, "199": [121, 368, 391, 394], "99999999999997": 121, "000000000000002": 121, "125": 121, "43759670925832": 121, "get_mean_std": 121, "probabilist": 121, "811428143185347e": 121, "89": [121, 368, 428, 431, 741, 798, 800, 954, 979, 982], "none_or_list_float": 121, "get_bound": 121, "arrays_valu": 121, "put": [121, 149], "36418": 121, "213": 121, "21716926": 121, "get_prob": 121, "unnorm": [121, 917, 918], "099609375": 121, "get_axi": 121, "number_positional_argu": 121, "mind": [121, 125, 126], "bodi": 121, "test_valu": 121, "logic": [121, 124, 125, 127, 128, 134, 318, 354, 368, 521, 524, 525, 528, 529, 532, 987, 988, 991, 993, 996, 998], "enough": [121, 134, 135, 136], "autom": [121, 998], "report": 121, "test_demo": 121, "falsifi": 121, "failing_test": 121, "traceback": 121, "123": [121, 609, 634], "assertionerror": [121, 690, 727], "shrink": 121, "prescrib": 121, "behavior": [121, 132, 149, 368, 556, 559, 560, 563, 934, 935, 936, 940, 942], "identifi": 121, "closest": [121, 246, 272, 368, 432, 435, 465, 468, 469, 472, 564, 567, 605, 608], "checkout": 121, "scratch": 121, "databas": 121, "therebi": 121, "debug": [121, 126, 135], "event": [121, 998], "test_gelu": 121, "test_fil": 121, "brief": 121, "phase": [121, 149], "reus": 121, "notabl": 121, "displai": [121, 126, 135], "verbos": [121, 132, 998, 1045], "newer": 121, "max_exampl": 121, "impact": [121, 136], "deadlin": 121, "weird": 121, "verifi": [121, 127, 128, 134, 998, 1004], "truth": [121, 368, 449, 452, 473, 476, 477, 480, 493, 496, 497, 500, 548, 551], "opt": [121, 123, 129, 134], "defer": [121, 122, 125, 126, 127, 128, 129], "suffic": [121, 124], "catch": [121, 609, 630], "systemat": 121, "safeguard": 121, "inabl": 121, "fact": [121, 135], "categor": [122, 128], "mutual": [122, 126], "constitut": [122, 132, 954, 975, 978, 983, 986], "venn": 122, "diagram": 122, "light": [122, 149], "log_pr": [122, 126, 129], "array_arg": 122, "typic": 122, "whatsoev": [122, 126], "commonli": [122, 954, 975, 978, 983, 986], "outsid": [122, 128, 130, 132, 134, 137, 829, 830, 833, 873, 876], "denomin": [122, 149, 609, 635, 645, 668, 675, 676, 911, 912, 915, 1033, 1034], "divis": [122, 368, 424, 427, 444, 447, 469, 472, 560, 563, 609, 635, 645, 668, 675, 676, 690, 692, 695, 697, 699, 710, 712, 1035, 1036, 1037], "deal": [122, 149], "concurr": [122, 126], "weight": [122, 126, 136, 137, 690, 692, 695, 697, 699, 702, 704, 710, 712, 714, 716, 718, 720, 728, 737, 738, 740, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1028, 1029, 1031, 1032, 1035, 1037, 1038], "modif": 122, "group": [122, 126], "cast": [122, 127, 246, 252, 255, 267, 270, 829, 835, 838, 954, 971, 974, 979, 982, 998], "get_all_arrays_on_dev": 122, "nested_map": [122, 893], "index_nest": [122, 893], "implicit_backend": 123, "unless": [123, 128, 129, 149, 368, 539, 542, 609, 662], "__dict__": [123, 132, 134], "ivy_original_dict": [123, 132], "unmodifi": [123, 127], "moment": [123, 149, 690, 692, 695, 697, 699, 710, 712, 1035, 1036, 1037], "fallback": 123, "freedom": [123, 954, 975, 978, 983, 986], "recommend": [123, 368, 525, 528, 529, 532, 560, 563, 954, 963, 966], "achiev": [124, 130, 135, 137], "topic": [124, 134], "_data": [125, 134], "organiz": [125, 126], "inherit": [125, 126, 134], "bear": [125, 126, 127], "necessarili": [125, 126], "although": [125, 126], "underpin": [125, 126, 132], "programmat": [125, 126], "backup": [125, 126], "accident": [125, 126], "absent": [125, 126], "perk": [125, 126], "auto": [125, 126, 135], "throw": [125, 134], "imposs": 125, "coupl": [125, 126, 134, 136], "anywai": 125, "secondli": [125, 127], "easier": 125, "five": [126, 135], "decis": [126, 132, 134], "arbitrarili": [126, 135], "__repr__": 126, "control": [126, 127, 129, 134, 135, 148], "__getattr__": 126, "underli": [126, 368, 408, 411, 420, 423, 428, 431, 533, 536], "__setattr__": 126, "__contains__": 126, "__getstate__": 126, "__setstate__": 126, "unpickl": 126, "expand": [126, 609, 636, 829, 843, 846], "children": 126, "shallowest": 126, "deepest": 126, "22": [126, 368, 428, 431, 741, 753, 755, 779, 781, 929, 933, 954, 955, 958], "retain_grad": [126, 690, 701], "dy": [126, 690, 701], "dx": [126, 690, 701], "autograd": [126, 149], "grad": [126, 135, 136, 137, 998, 1035, 1039], "redund": 126, "num_head": [126, 728, 739, 1019, 1030], "mask": [126, 728, 739, 740], "to_q_fn": [126, 728, 739], "to_kv_fn": [126, 728, 739], "to_out_fn": [126, 129, 728, 739], "to_q_v": [126, 728, 739], "to_kv_v": [126, 728, 739], "to_out_v": [126, 728, 739], "measur": [126, 728, 739, 1019, 1030], "dot": [126, 728, 739, 740, 741, 798, 800, 804, 806, 1019, 1030], "implicitli": 126, "intuit": [126, 135, 136], "chronolog": 126, "had": [126, 129], "sequenti": [126, 136], "flow": [126, 148], "implic": 126, "slightli": [126, 132, 136], "eager": [126, 149], "bfloat16": [127, 246, 286], "all_dtyp": 127, "all_numeric_dtyp": 127, "all_int_dtyp": 127, "all_float_dtyp": 127, "fall": [127, 131, 998, 1031, 1032, 1035, 1039], "invalid": [127, 130, 741, 804, 806, 987, 988, 991, 993, 996], "thirdli": 127, "native_float32": [127, 246, 317], "importantli": [127, 134, 137, 148], "arguabl": [127, 128], "compound": 127, "overflow": [127, 368, 382, 385, 954, 979, 982], "arr": [127, 128], "scalar": [127, 132, 137, 149, 175, 199, 202, 609, 662, 685, 689, 741, 807, 809], "settabl": [127, 128], "mx": [127, 128, 129, 998], "nd": [127, 128, 129, 132, 137, 998], "deleg": 127, "idx": [128, 134, 609, 615], "tpu": [128, 318, 340, 365], "aliv": [128, 318, 352, 356, 358, 609, 643, 661, 663], "amount": [128, 318, 364, 813, 814, 817, 819, 822, 824, 827], "memori": [128, 129, 147, 149, 318, 336, 357, 362, 364, 367, 728, 738, 998], "dual": 128, "thrown": [128, 149, 609, 653], "rare": [128, 149], "program": 129, "strictli": 129, "ration": 129, "speak": 129, "subtli": 129, "ensure_in_backend": [129, 609, 653], "x_nativ": 129, "val_n": 129, "assign": [129, 130, 134], "elif": 129, "irrespect": [129, 134, 246, 252, 255], "unspecifi": [129, 368, 556, 559, 560, 563, 741, 756, 758, 829, 873, 876], "predominantli": [129, 148], "presenc": 129, "altern": [129, 135], "_wrap_fn": 129, "maxim": [129, 132], "inner": [129, 134, 741, 756, 758, 765, 768, 889, 890, 891, 892], "third": [129, 149, 741, 792, 794, 934, 935], "leverag": 129, "equival": [129, 135, 137, 175, 176, 177, 368, 424, 427, 525, 528, 529, 532, 560, 563, 741, 773, 775, 782, 784, 789, 791, 807, 809], "input_arrai": 129, "clean": [130, 132, 133, 135], "flake8": 130, "undefin": 130, "yield": [130, 929, 933], "handler": [130, 131, 133, 137, 998], "liter": [130, 741, 807, 809], "carri": 130, "star": 130, "byte": 130, "notimpl": 130, "notimplementederror": 130, "unsuccess": 130, "exce": [130, 368, 538], "black": 130, "disobei": 130, "successfulli": 130, "accordingli": [130, 175, 210, 213, 368, 461, 464, 741, 807, 809, 929, 931, 934, 935, 936, 940, 942, 954, 959, 962, 963, 966, 967, 970, 971, 974, 975, 978, 979, 982, 983, 986, 987, 988, 991, 993, 996], "comparison": 130, "sound": 131, "higher": [131, 132, 137, 149, 690, 697, 699, 702, 704, 710, 712, 714, 716, 718, 720], "fledg": [132, 133], "syntact": [132, 137], "clip_by_valu": [132, 137], "clamp": [132, 137], "fit": [132, 829, 855, 858], "construct": [132, 133, 136, 137, 829, 881, 884, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1028, 1029, 1030, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042], "power_seq": 132, "resid": [132, 136], "ml_framework": [132, 137, 175, 176, 177], "current_framework": [132, 137], "furthermor": 132, "concaten": [132, 135, 318, 347, 609, 636, 829, 835, 838, 998], "framework_handl": 132, "face": 132, "cprint": [132, 1044], "framework_stack": 132, "_determine_framework_from_arg": 132, "valueerror": [132, 829, 869, 872], "get_framework": 132, "neither": [132, 368, 382, 385, 539, 542, 690, 727], "illustr": [132, 148], "un": [132, 246, 293], "nn": [132, 137, 175, 210, 213, 998], "init_h": [132, 728, 738], "init_c": [132, 728, 738], "kernel": [132, 149, 728, 738], "recurrent_kernel": [132, 728, 738], "bia": [132, 136, 728, 737, 738, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1029], "recurrent_bia": [132, 728, 738], "x_shape": 132, "batch_shap": [132, 134, 137, 609, 662, 728, 738, 739, 740, 741, 810, 812, 917, 918, 1019, 1028], "timestep": [132, 728, 738, 1019, 1028], "input_channel": [132, 136, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1028, 1029], "x_flat": 132, "wi": 132, "wi_x": 132, "wii_x": 132, "wif_x": 132, "wig_x": 132, "wio_x": 132, "recurr": [132, 728, 738], "wh": 132, "lstm": [132, 728, 738, 1019], "ht": 132, "ct": 132, "hts_list": 132, "unrol": [132, 135, 728, 738], "wii_xt": 132, "wif_xt": 132, "wig_xt": 132, "wio_xt": 132, "zip": 132, "htm1": 132, "ctm1": 132, "wh_htm1": 132, "whi_htm1": 132, "whf_htm1": 132, "whg_htm1": 132, "who_htm1": 132, "ft": 132, "gt": 132, "ot": 132, "offici": 132, "reliabl": 132, "sacrific": 132, "hear": 132, "virtu": 132, "pure_ivi": 132, "reduce_mean": [132, 135, 136, 137, 998], "reduce_sum": [132, 998], "reduce_var": 132, "compile_graph": [132, 137], "pure_torch": 132, "cat": [132, 137], "backbon": [132, 135], "_layer": 132, "super": [132, 135, 136, 137], "random_unifrom": 132, "unclean": 132, "wx": 132, "temp": 132, "torchscript": 132, "fn": [132, 134, 150, 151, 152, 153, 154, 155, 156, 157, 158, 246, 286, 287, 318, 327, 328, 609, 615, 686, 893, 894, 899, 900, 901, 903, 904, 905, 1001, 1003], "example_input": [132, 172, 173], "static_argnum": [132, 172, 173], "static_argnam": [132, 172, 173], "jit": [132, 149], "frontend": 133, "primit": [133, 149], "hierarch": [133, 135, 136], "arraywithlinalg": 134, "arraywithlog": 134, "arraywithmath": 134, "arraywithmeta": 134, "arraywithreduct": 134, "_shape": 134, "_size": 134, "functool": 134, "mul": 134, "len": [134, 137, 175, 210, 213], "_dtype": 134, "_devic": 134, "_dev_str": 134, "_pre_repr": 134, "_post_repr": 134, "answer": [134, 149], "consol": 134, "typeerror": 134, "immut": 134, "behav": 134, "claim": 134, "truli": 134, "_native_wrapp": 134, "attributeerror": 134, "genuin": 134, "some_method": 134, "similarli": [134, 175, 210, 213], "rewritten": 134, "__pow__": 134, "strang": 134, "enforc": 134, "notic": 134, "appear": [134, 829, 843, 846], "invers": [134, 148, 368, 374, 377, 378, 381, 387, 390, 391, 394, 396, 399, 400, 403, 404, 407, 741, 762, 764, 782, 784], "_wrap_method": 134, "func_wrapp": [134, 150, 151, 152, 153, 154, 155, 156, 157, 158], "__name__": 134, "non_wrapped_method": 134, "_method_wrap": 134, "native_arg": 134, "native_kwarg": 134, "inner_fn": 134, "whist": 134, "unwrap": 134, "transit": 134, "needlessli": 134, "randn": 134, "_unwrap_method": 134, "method_wrap": 134, "compartment": 134, "public": [134, 609, 625], "newshap": 134, "new_shap": 134, "tidi": 134, "shorter": 134, "crystal": 134, "ton": 135, "ado": [135, 136], "incred": [135, 149], "hash": 135, "soup": 135, "walk": [135, 136], "dct": 135, "cnt": 135, "combo": [135, 998, 1004], "hold": [135, 609, 665, 666], "1000": [135, 368, 582, 585], "uda": 135, "3333": 135, "6667": 135, "178": 135, "new_weight": 135, "0600": 135, "3100": 135, "2400": 135, "6900": 135, "delimit": 135, "autocomplet": 135, "midwai": 135, "agent": 135, "total_spe": 135, "total_height": 135, "total_width": 135, "ag": 135, "tot": 135, "total_": 135, "total_h": 135, "batch_siz": [135, 728, 729, 730, 731, 732, 733, 734, 735, 917, 918], "dir": 135, "adam": [135, 136, 137, 690, 692, 695, 697, 699, 710, 712, 998, 1035, 1037], "cnt0": 135, "cnt1": 135, "diff_0": 135, "diff_1": 135, "config0": 135, "config1": 135, "Not": [135, 136, 149, 174], "helper": 135, "decod": 135, "l0": 135, "l1": [135, 741, 807, 809], "depth": [135, 136, 137, 148, 318, 342, 346, 350, 609, 647, 662, 893, 905, 1031, 1032], "clearer": 135, "truncat": 135, "decoder__l0": 135, "decoder__l1": 135, "encoder__l0": 135, "encoder__l1": 135, "height": 135, "l0__b": 135, "l0__w": 135, "l1__b": 135, "l1__w": 135, "printabl": 135, "obviou": 135, "foresight": 135, "untidili": 135, "update_ag": 135, "normalize_img": 135, "img": 135, "img_max": 135, "reduce_max": [135, 998], "img_min": 135, "reduce_min": [135, 998], "img_rang": 135, "agent_posit": 135, "agent_veloc": 135, "agent_cam_front_rgb": 135, "agent_cam_front_depth": 135, "agent_cam_rear_rgb": 135, "agent_cam_rear_depth": 135, "agent_cam_lidar": 135, "normal": [135, 829, 873, 876, 911, 912, 915, 917, 922, 1033, 1034], "cleaner": 135, "camera": 135, "front_rgb": 135, "front_depth": 135, "rear_rgb": 135, "rear_depth": 135, "lidar": 135, "rgb": 135, "rear": 135, "veloc": 135, "cam": 135, "cam_max": 135, "cam_min": 135, "cam_rang": 135, "Of": 135, "ideal": 135, "perman": 135, "afterward": 135, "thread": 135, "incorpor": 135, "pretti": 135, "straightforward": 135, "dataload": [135, 147, 998], "_cnt": 135, "img_": 135, "_dataset_s": 135, "_batch_siz": 135, "_count": [135, 136], "__next__": 135, "filenam": 135, "img_fnam": 135, "fname": 135, "loaded_img": 135, "cv2": 135, "imread": 135, "loader": [135, 149], "batch_slic": 135, "mymodel": [135, 998], "linear0": [135, 136, 998], "linear1": [135, 136, 998], "x_in": [135, 136, 137, 998], "loss_fn": [135, 136, 137, 998], "0145": 135, "grad_fn": 135, "addbackward0": 135, "_create_vari": 136, "output_channel": [136, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1028, 1029], "with_bia": [136, 1019, 1029], "_input_channel": 136, "_output_channel": 136, "_w_shape": 136, "_b_shape": 136, "_with_bia": 136, "8979": 136, "3198": 136, "0196": 136, "3126": 136, "3717": 136, "9687": 136, "6958": 136, "5122": 136, "3902": 136, "8800": 136, "5613": 136, "1982": 136, "nightmar": 136, "overcom": 136, "fc": 136, "9563": 136, "v0": 136, "v1": 136, "6440": 136, "key0": 136, "1823": 136, "8075": 136, "linear3": 136, "v2": 136, "2346": 136, "counter": 136, "hidden": [136, 728, 738, 1019, 1028], "fed": [136, 318, 362], "1300": 136, "decoupl": 136, "scheme": 136, "weight_initi": [136, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1028, 1029], "glorotuniform": [136, 1010, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1028, 1029], "bias_initi": [136, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1029], "_w_init": 136, "_b_init": 136, "create_vari": [136, 1010], "var_shap": [136, 1010], "fan_out": [136, 1010], "fan_in": [136, 1010], "fan_mod": [136, 1010], "fan_sum": 136, "slight": 136, "misnom": 136, "saw": 136, "vanilla": [136, 889, 891], "descent": [136, 690, 702, 704, 1035, 1040], "lar": [136, 690, 710, 712, 714, 716, 1035], "lamb": [136, 690, 710, 712, 1035], "compile_on_next_step": [136, 1031, 1032, 1035, 1036, 1037, 1038, 1039, 1040], "_beta1": 136, "_beta2": 136, "_epsilon": 136, "_mw": 136, "_vw": 136, "_first_pass": 136, "_should_compil": 136, "_step": [136, 1035, 1039], "new_v": 136, "_lr": 136, "isinst": [136, 137, 609, 679], "_inplac": 136, "_stop_gradi": 136, "set_stat": [136, 1035, 1036, 1037, 1038, 1039, 1040], "pre": [137, 149, 318], "captur": 137, "sparse_funct": 137, "num_class": [137, 917, 918], "num_dim": 137, "new_axi": 137, "_linear": 137, "to_backend": 137, "jax_graph": 137, "learnabl": [137, 911, 912, 915, 1033, 1034], "to_ivy_modul": [137, 1008], "thinli": 137, "whilst": 137, "to_haiku_modul": 137, "hk": 137, "loss_fn_t": 137, "transform": [137, 148, 728, 736, 737], "without_apply_rng": 137, "rng": 137, "prngkei": 137, "init": 137, "update_rul": 137, "tree_multimap": 137, "vision": [147, 998], "robot": [147, 998], "focus": 148, "field": [148, 741, 756, 758, 785, 787, 792, 794, 934, 935, 936, 940], "perfect": 148, "3d": [148, 1019, 1024, 1025], "differenti": 148, "demo": [148, 998], "orient": 148, "pose": 148, "euler": [148, 174], "quaternion": 148, "rotat": 148, "matric": [148, 175, 210, 213, 228, 232, 233, 237, 728, 737, 741, 742, 745, 750, 752, 753, 755, 756, 758, 759, 761, 762, 764, 772, 773, 775, 776, 778, 782, 784, 785, 787, 789, 791, 792, 794, 795, 797, 801, 803], "angl": [148, 368, 400, 403, 440, 443, 578, 581, 600, 604], "ivy_mech": 148, "target_facing_rotation_matrix": 148, "polar_to_cartesian_coord": 148, "ordin": [148, 741, 789, 791], "warp": 148, "optic": 148, "voxel": 148, "ivy_vis": 148, "coords_to_voxel_grid": 148, "render_pixel_coord": 148, "neural": [148, 728, 998, 1005, 1019], "radianc": 148, "nerf": 148, "trajectori": 148, "motion": 148, "plan": [148, 998], "mobil": 148, "ivy_robot": 148, "sample_spline_path": 148, "rigidmobil": 148, "sample_bodi": 148, "drone": 148, "sample_link": 148, "openai": 148, "swimmer": 148, "cumul": [148, 609, 627, 628], "reward": 148, "supervis": 148, "reinforc": 148, "door": [148, 149], "intersect": 148, "cartpol": 148, "mountain_car": 148, "pendulum": 148, "reacher": 148, "condit": [148, 172, 173, 893, 903, 904, 929, 933], "learnt": 148, "ture": 148, "ntm": 148, "egospher": 148, "spatial": 148, "esm": 148, "ivy_memori": 148, "egocentr": 148, "room": 148, "inspir": 148, "doubt": 149, "grate": 149, "probe": 149, "undergo": 149, "remark": 149, "surpris": 149, "backward": [149, 368, 560, 563, 741, 804, 806, 987, 988, 991, 993, 996], "lock": 149, "contunu": 149, "minor": 149, "xla": 149, "buffer": 149, "gold": 149, "dex": 149, "lax": 149, "scan": 149, "tricki": 149, "predictor": 149, "tight": 149, "driver": 149, "schedul": 149, "algorithm": [149, 728, 729, 730, 731, 732, 733, 734, 735, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026], "dispatch": 149, "Will": 149, "ast": 149, "dynamic": 149, "cond": 149, "jacobian": 149, "checkpoint": 149, "autodiff": 149, "shine": 149, "merci": 149, "superset": 149, "cluster": 149, "compet": 149, "paradigm": 149, "parallelis": [149, 318, 327, 328], "spmd": 149, "mixtur": [149, 690, 692, 695], "expert": 149, "sophist": 149, "depart": 149, "routin": 149, "hundr": 149, "thousand": 149, "deepli": [149, 893, 895], "broadli": 149, "heavili": 149, "supplementari": 149, "Is": 149, "reusabl": 149, "fanci": 149, "fusion": 149, "lose": 149, "vmap": 149, "pmap": 149, "overhead": 149, "ineffici": 149, "eventu": 149, "supplement": 149, "backdoor": 149, "callback": 149, "record": 149, "metric": 149, "somewhat": 149, "outsourc": 149, "inputs_to_ivy_arrai": 150, "gaussian": [160, 161], "leaki": [160, 161, 162], "rectifi": [160, 162, 163], "slope": [160, 162], "39": [160, 162, 368, 391, 394, 457, 460, 690, 692, 695, 741, 779, 781, 954, 955, 958], "85": [160, 162, 368, 428, 431], "48": [160, 162, 368, 582, 585, 690, 692, 695, 741, 779, 781, 954, 955, 958], "88": [160, 162, 368, 428, 431, 741, 779, 781, 954, 955, 958], "269": [160, 164], "731": [160, 164], "214": [160, 164], "978": [160, 164], "422": [160, 165], "155": [160, 165], "0768": [160, 165], "231": [160, 165], "693": [160, 165, 368, 391, 394, 813, 824, 827], "49": [160, 165, 368, 582, 585, 954, 955, 958], "147": [160, 165], "363": [160, 165], "3461": [160, 166, 169], "6491": [160, 166, 169], "535": [160, 166, 169], "hyperbol": [160, 171, 368, 378, 381, 391, 394, 404, 407, 440, 443, 578, 581, 600, 604], "55": [160, 171, 728, 734, 741, 779, 781, 954, 955, 958], "501": [160, 171], "array_method": [166, 167, 179, 180, 185, 186, 193, 194, 199, 200, 210, 211, 215, 216, 223, 224, 228, 230, 233, 235, 241, 243, 252, 253, 257, 258, 262, 263, 267, 268, 276, 277, 281, 282, 288, 289, 294, 295, 299, 300, 305, 306, 369, 370, 374, 375, 378, 379, 382, 383, 387, 388, 391, 392, 396, 397, 400, 401, 404, 405, 408, 409, 412, 413, 416, 417, 420, 421, 424, 425, 428, 429, 432, 433, 436, 437, 440, 441, 444, 445, 449, 450, 453, 454, 457, 458, 461, 462, 465, 466, 469, 470, 473, 474, 477, 478, 481, 482, 485, 486, 489, 490, 493, 494, 497, 498, 501, 502, 505, 506, 509, 510, 513, 514, 517, 518, 521, 522, 525, 526, 529, 530, 533, 534, 539, 540, 544, 545, 548, 549, 552, 553, 556, 557, 560, 561, 564, 565, 568, 569, 573, 574, 578, 579, 582, 583, 586, 587, 590, 592, 595, 597, 600, 602, 605, 606, 610, 611, 638, 639, 680, 682, 692, 693, 742, 743, 747, 748, 750, 751, 753, 754, 756, 757, 759, 760, 762, 763, 765, 766, 769, 770, 773, 774, 776, 777, 779, 780, 782, 783, 785, 786, 789, 790, 792, 793, 795, 796, 798, 799, 801, 802, 804, 805, 807, 808, 810, 811, 814, 815, 819, 820, 824, 825, 830, 831, 835, 836, 839, 840, 843, 844, 847, 848, 851, 852, 855, 856, 859, 860, 863, 864, 869, 870, 873, 874, 877, 878, 881, 882, 885, 886, 912, 913, 936, 938, 944, 945, 949, 950, 955, 956, 959, 960, 963, 964, 967, 968, 971, 972, 975, 976, 979, 980, 983, 984, 988, 989, 993, 994], "container_method": [166, 168, 170, 176, 178, 179, 181, 183, 185, 187, 189, 190, 192, 193, 195, 197, 199, 201, 203, 204, 206, 207, 209, 210, 212, 214, 215, 217, 219, 220, 222, 223, 225, 227, 228, 229, 231, 233, 234, 236, 238, 239, 241, 242, 244, 252, 254, 256, 257, 259, 261, 262, 264, 266, 267, 269, 271, 276, 278, 281, 283, 285, 288, 290, 292, 294, 296, 298, 299, 301, 303, 305, 307, 309, 369, 371, 373, 374, 376, 378, 380, 382, 384, 386, 387, 389, 391, 393, 395, 396, 398, 400, 402, 404, 406, 408, 410, 412, 414, 416, 418, 420, 422, 424, 426, 428, 430, 432, 434, 436, 438, 440, 442, 444, 446, 448, 449, 451, 453, 455, 457, 459, 461, 463, 465, 467, 469, 471, 473, 475, 477, 479, 481, 483, 485, 487, 489, 491, 493, 495, 497, 499, 501, 503, 505, 507, 509, 511, 513, 515, 517, 519, 521, 523, 525, 527, 529, 531, 533, 535, 539, 541, 543, 544, 546, 548, 550, 552, 554, 556, 558, 560, 562, 564, 566, 568, 570, 572, 573, 575, 577, 578, 580, 582, 584, 586, 588, 590, 591, 593, 595, 596, 598, 600, 601, 603, 605, 607, 610, 612, 614, 622, 623, 638, 640, 642, 680, 681, 683, 692, 694, 696, 697, 698, 700, 702, 703, 705, 706, 707, 709, 710, 711, 713, 714, 715, 717, 718, 719, 721, 742, 744, 746, 765, 767, 814, 816, 818, 819, 821, 823, 824, 826, 828, 830, 832, 834, 835, 837, 839, 841, 843, 845, 847, 849, 851, 853, 855, 857, 859, 861, 863, 865, 867, 869, 871, 873, 875, 877, 879, 881, 883, 885, 887, 912, 914, 916, 919, 921, 923, 924, 926, 936, 937, 939, 944, 946, 948, 949, 951, 953, 955, 957, 959, 961, 963, 965, 967, 969, 971, 973, 975, 977, 979, 981, 983, 985, 988, 990, 992, 993, 995, 997], "faster": [172, 173], "invoc": [172, 173], "718281828459045": 174, "newaxi": 174, "alia": 174, "pi": 174, "141592653589793": 174, "mathemat": [174, 368, 382, 385, 400, 403, 461, 464, 539, 542, 741, 807, 809], "half": [175, 176, 177, 917, 919, 920, 923, 925], "chosen": [175, 176, 177, 368, 400, 403, 929, 933], "distanc": [175, 176, 177], "adjac": [175, 176, 177], "creation_funct": [175, 176, 177, 179, 182, 184, 185, 188, 190, 191, 193, 196, 198, 199, 202, 204, 205, 220, 221, 223, 226, 228, 232, 233, 237, 238, 240, 241, 245], "interpret": [175, 179, 182, 215, 218], "nativeshap": [175, 184, 198, 220, 221, 238, 240, 609, 666, 672, 674, 728, 730, 732, 734, 829, 859, 862, 917, 919, 920, 922, 923, 925], "uniniti": [175, 184, 185, 188], "elsewher": [175, 190, 191, 929, 933], "row": [175, 190, 191, 741, 789, 791, 792, 794, 917, 918, 929, 932], "column": [175, 190, 191, 741, 756, 758, 785, 787, 789, 791, 792, 794], "__dlpack__": [175, 193, 196, 318, 363], "interchang": [175, 193, 196, 829, 877, 880], "coordin": [175, 210, 213, 368, 400, 403], "cartesian": [175, 210, 213], "ij": [175, 210, 213, 954, 955, 958], "rank": [175, 210, 213, 609, 688, 741, 747, 749, 773, 775, 785, 787, 789, 791, 801, 803, 804, 806, 807, 809, 829, 839, 842, 843, 846, 873, 876, 885, 888, 929, 932, 987, 988, 991, 993, 996], "ni": [175, 210, 213], "xi": [175, 210, 213], "n1": [175, 210, 213], "n2": [175, 210, 213], "n3": [175, 210, 213], "xv": [175, 210, 213], "yv": [175, 210, 213], "triangular": [175, 228, 232, 233, 237, 741, 742, 745, 785, 787], "innermost": [175, 228, 232, 233, 237, 741, 742, 745, 750, 752, 753, 755, 756, 758, 759, 761, 762, 764, 773, 775, 776, 778, 782, 784, 785, 787, 789, 791, 792, 794, 795, 797, 801, 803], "mxn": [175, 228, 232, 233, 237, 741, 753, 755, 773, 775, 776, 778, 782, 784, 785, 787, 795, 797, 801, 803], "defaultdtyp": [246, 247], "defaultfloatdtyp": [246, 248], "float_dtyp": [246, 274, 311], "defaultintdtyp": [246, 249], "incompat": [246, 262, 265], "occur": [246, 267, 270, 929, 930, 931, 934, 935, 936, 940, 942], "data_type_funct": [246, 267, 270], "floatdtyp": [246, 274], "int_dtyp": [246, 275, 312], "intdtyp": [246, 275], "followng": [246, 281, 284], "occupi": [246, 281, 284, 288, 291, 609, 665, 666], "ep": [246, 281, 284, 741, 773, 775, 782, 784], "smallest_norm": [246, 281, 284], "encapsul": [246, 288, 291], "type1": [246, 304], "type2": [246, 304], "ret1": [246, 313], "ret2": [246, 313], "native_bool": [246, 317], "native_float16": [246, 317], "native_float64": [246, 317], "native_int8": [246, 317], "native_int16": [246, 317], "native_int32": [246, 317], "native_int64": [246, 317], "native_uint8": [246, 317], "native_uint64": [246, 317], "noinspect": [247, 248, 249, 319, 691], "pyshadowingnam": [247, 248, 249, 319, 691], "defaultdevic": [318, 319], "__enter__": 318, "_dev": 318, "__exit__": 318, "exc_typ": 318, "exc_val": 318, "exc_tb": 318, "exit": 318, "devcloneditem": [318, 340], "multidevitem": [318, 320, 323], "devclonedit": 318, "multidevit": [318, 321, 324, 327, 328, 332], "devclonednest": 318, "multidevnest": [318, 322, 325], "devdistitem": 318, "devdistit": 318, "devdistnest": 318, "devmanag": [318, 326], "dev_mapp": 318, "da_dim_s": 318, "safety_factor": 318, "min_dev_dim_s": 318, "max_dev_dim_step_ratio": 318, "min_unit_dev_tune_step": 318, "min_sf_tune_step": 318, "starting_split_factor": 318, "max_split_factor_step_s": 318, "tune_dev_alloc": 318, "tune_dev_split": 318, "mapper": [318, 327, 328], "receivess": 318, "ratio": [318, 690, 710, 712, 1035, 1037], "safe": [318, 327], "oom": 318, "tune": 318, "da_tune_step": 318, "ds_tune_step": 318, "to_clon": 318, "to_distribut": 318, "multidevic": [318, 327], "parallel": [318, 327, 328], "mutlidevic": [318, 327], "repeated_config_check": 318, "tune_step": 318, "devmapp": [318, 328], "ret_fn": [318, 327, 328], "queue_class": [318, 327, 328], "worker_class": [318, 327, 328], "worker": [318, 327, 328], "used_dev": [318, 327], "sf": [318, 327], "devmappermultiproc": 318, "multidev": [318, 329, 330, 331, 350], "profil": 318, "save_dir": [318, 333], "deviceic": [318, 339], "spread": [318, 350], "139740789224448": [318, 352], "physic": [318, 354], "x3": [318, 356], "x4": [318, 356], "process_specif": [318, 357, 367], "percentag": [318, 357], "ram": [318, 357, 364, 367], "attr_onli": [318, 358], "chunk": [318, 360, 361, 362], "max_chunk_s": [318, 362], "chunk_siz": [318, 362], "input_ax": [318, 362], "output_ax": [318, 362], "feed": [318, 362], "fist": [318, 362], "stream": [318, 363], "caveat": [318, 363], "portabl": [318, 363, 998], "gb": [318, 364, 367], "reset": [318, 366, 609, 687], "magnitud": [368, 369, 372, 382, 385, 539, 542, 741, 792, 794, 795, 797], "princip": [368, 374, 377, 387, 390, 396, 399], "cosin": [368, 374, 377, 378, 381, 436, 439, 440, 443], "x1_i": [368, 382, 385, 400, 403, 408, 411, 416, 419, 420, 423, 424, 427, 428, 431, 444, 447, 449, 452, 469, 472, 473, 476, 477, 480, 493, 496, 497, 500, 517, 520, 521, 524, 529, 532, 533, 536, 539, 542, 548, 551, 556, 559, 560, 563, 590, 594], "x2_i": [368, 382, 385, 400, 403, 408, 411, 416, 419, 420, 423, 424, 427, 428, 431, 444, 447, 449, 452, 469, 472, 473, 476, 477, 480, 493, 496, 497, 500, 517, 520, 521, 524, 529, 532, 533, 536, 539, 542, 548, 551, 556, 559, 560, 563, 590, 594], "finit": [368, 382, 385, 400, 403, 481, 484, 539, 542, 556, 559, 560, 563], "nor": [368, 382, 385, 539, 542, 690, 727], "nearest": [368, 382, 385, 539, 542, 564, 567], "2019": [368, 382, 385, 461, 464, 539, 542], "commut": [368, 382, 385], "sine": [368, 387, 390, 391, 394, 573, 576, 578, 581], "57": [368, 387, 390, 391, 394, 428, 431, 440, 443], "524": [368, 387, 390], "644": [368, 387, 390], "201": [368, 387, 390, 564, 567], "305": [368, 387, 390], "412": [368, 387, 390], "44": [368, 391, 394, 564, 567, 582, 585, 586, 589, 741, 779, 781, 929, 933, 954, 955, 958], "809": [368, 391, 394], "569": [368, 391, 394], "733": [368, 391, 394], "68": [368, 391, 394, 911, 912, 915], "99": [368, 391, 394, 954, 955, 958], "quotient": [368, 400, 403], "notat": [368, 400, 403, 954, 955, 958], "denot": [368, 400, 403, 690, 727], "pair": [368, 400, 403, 728, 740, 741, 747, 749], "quadrant": [368, 400, 403], "3\u03c0": [368, 400, 403], "549": [368, 404, 407], "bitwis": [368, 408, 411, 420, 423, 428, 431, 533, 536], "AND": [368, 408, 411, 521, 524, 987, 988, 991], "binari": [368, 408, 411, 420, 423, 428, 431, 533, 536, 813, 814, 817], "invert": [368, 412, 415], "arithmet": [368, 424, 427, 954, 963, 966], "propag": [368, 424, 427, 954, 959, 962, 963, 966, 967, 970, 975, 978, 979, 982, 983, 986], "thu": [368, 424, 427, 556, 559, 560, 563, 741, 756, 758], "lh": [368, 424, 427], "rh": [368, 424, 427], "xor": [368, 428, 431, 533, 536], "78": [368, 428, 431, 568, 571, 741, 779, 781, 954, 955, 958], "91": [368, 428, 431, 741, 779, 781, 954, 955, 958], "23": [368, 428, 431, 568, 571, 728, 734, 741, 753, 755, 929, 933], "66": [368, 428, 431, 741, 779, 781, 954, 955, 958], "77": [368, 428, 431, 741, 779, 781, 954, 955, 958], "79": [368, 428, 431], "98": [368, 428, 431, 741, 779, 781, 929, 933, 954, 955, 958], "26": [368, 428, 431, 690, 692, 695, 728, 735, 741, 753, 755, 779, 781, 798, 800, 954, 955, 958], "34": [368, 428, 431, 582, 585], "51": [368, 428, 431], "27": [368, 428, 431, 440, 443, 582, 585, 728, 740, 741, 779, 781, 954, 955, 958], "74": [368, 428, 431], "59": [368, 428, 431], "416": [368, 436, 439], "122": [368, 440, 443], "368": [368, 440, 443], "670": [368, 440, 443], "202": [368, 440, 443, 564, 567], "548": [368, 440, 443], "1490": [368, 440, 443], "dividend": [368, 444, 447, 560, 563], "divisor": [368, 444, 447, 560, 563, 690, 692, 695, 697, 699, 710, 712, 954, 975, 978, 983, 986, 1035, 1036, 1037], "gauss": [368, 453, 456], "exponenti": [368, 453, 456, 457, 460, 517, 520, 556, 559], "logarithm": [368, 457, 460, 501, 504, 505, 508, 509, 512, 513, 516, 517, 520, 741, 788], "72": [368, 457, 460, 690, 692, 695, 741, 779, 781, 954, 955, 958], "accur": [368, 461, 464], "fdlibm": [368, 461, 464], "compliant": [368, 461, 464, 525, 528, 529, 532, 954, 959, 962, 963, 966, 967, 970], "greatest": [368, 465, 468, 469, 472], "out_i": [368, 481, 484, 485, 488, 489, 492], "threshold": [368, 537, 538], "y_i": [368, 544, 547], "expon": [368, 556, 559, 609, 676], "versu": [368, 556, 559], "odd": [368, 556, 559], "modulu": [368, 560, 563], "primarili": [368, 560, 563], "5654": [368, 564, 567], "034": [368, 564, 567], "433": [368, 564, 567], "343": [368, 564, 567], "30": [368, 564, 567, 741, 779, 781, 954, 955, 958, 1010, 1016], "81": [368, 564, 567, 586, 589, 954, 955, 958], "527": [368, 564, 567], "301": [368, 564, 567], "124": [368, 568, 571], "46": [368, 568, 571], "932": [368, 573, 576], "746": [368, 573, 576], "443": [368, 573, 576], "657": [368, 573, 576], "indistinguish": [368, 582, 585], "infinit": [368, 582, 585], "83": [368, 582, 585], "32455532": [368, 582, 585], "89897949": [368, 582, 585], "50": [368, 582, 585, 741, 779, 781, 929, 932, 954, 955, 958], "31": [368, 582, 585], "169": [368, 582, 585], "47": [368, 582, 585], "93": [368, 582, 585], "35": [368, 582, 585, 728, 740, 741, 747, 749, 929, 933, 954, 955, 958], "09": [368, 586, 589, 728, 740], "546": [368, 595, 599], "842": [368, 595, 599], "916": [368, 595, 599, 813, 814, 817], "996": [368, 595, 599], "328": [368, 595, 599], "real": [368, 600, 604], "462": [368, 600, 604], "604": [368, 600, 604], "984": [368, 600, 604], "997": [368, 600, 604], "decim": [368, 605, 608], "inspect": [609, 615, 1002, 1003], "downscal": [609, 621, 622, 624], "60": [609, 627, 741, 779, 781, 954, 955, 958], "default_v": [609, 630], "catch_except": [609, 630], "rev": [609, 630], "with_cal": [609, 630], "arrang": [609, 631], "mod": [609, 635], "max_freq": [609, 636], "num_band": [609, 636], "pad": [609, 636, 728, 729, 730, 731, 732, 733, 734, 735, 829, 839, 842, 885, 888, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026], "fourier": [609, 636], "band": [609, 636], "linearli": [609, 636, 741, 789, 791], "oppos": [609, 636], "geometr": [609, 636], "seen_set": [609, 647], "local_set": [609, 647], "decrement": [609, 651], "allow_dupl": [609, 659], "forkserv": [609, 660], "spawn": [609, 660], "hot": [609, 662], "scatter": [609, 662, 665, 666], "overrid": [609, 662], "tmp_dr": [609, 671], "temporari": [609, 671], "min_denomin": [609, 675], "stabil": [609, 675, 676, 943, 944, 947, 949, 952], "_min_denomin": [609, 675], "min_bas": [609, 676], "_min_bas": [609, 676, 911, 912, 915, 1033, 1034], "100000023841858": [609, 679], "200000047683716": [609, 679], "299999952316284": [609, 679], "400000095367432": [609, 679], "599999904632568": [609, 679], "gradienttrack": [690, 691], "delta": [690, 692, 695], "cost": [690, 692, 695, 697, 699, 702, 704, 710, 712, 714, 716, 718, 720, 889, 890, 891, 892], "ws": [690, 692, 695, 697, 699, 702, 704, 710, 712, 714, 716, 718, 720], "en": [690, 692, 695, 697, 699], "wikipedia": [690, 692, 695, 697, 699], "wiki": [690, 692, 695, 697, 699], "stochastic_gradient_desc": [690, 692, 695, 697, 699], "dc": [690, 692, 695, 697, 699, 702, 704, 710, 712, 714, 716, 718, 720], "dw": [690, 692, 695, 697, 699, 702, 704, 710, 712, 714, 716, 718, 720], "averag": [690, 692, 695, 697, 699, 710, 712, 889, 890, 891], "forget": [690, 692, 695, 697, 699, 710, 712, 1035, 1036, 1037], "004": [690, 692, 695], "009": [690, 692, 695], "86": [690, 692, 695], "28": [690, 692, 695, 728, 731, 734, 735, 741, 779, 781, 954, 955, 958], "0125": [690, 692, 695], "601": [690, 692, 695], "025": [690, 692, 695], "992": [690, 692, 695], "209": [690, 692, 695, 934, 935], "271": [690, 692, 695], "0717": [690, 692, 695], "142": [690, 692, 695], "182": [690, 692, 695], "624": [690, 692, 695, 917, 923, 925], "744": [690, 692, 695], "626": [690, 692, 695], "65": [690, 692, 695, 741, 779, 781, 954, 955, 958], "024": [690, 692, 695], "096": [690, 692, 695], "216": [690, 692, 695], "384": [690, 692, 695], "rate": [690, 697, 699, 702, 704, 710, 712, 714, 716, 718, 720, 889, 890, 891, 892, 1019, 1030, 1035, 1036, 1037, 1038, 1039, 1040], "ws_new": [690, 697, 699, 702, 704, 710, 712, 714, 716, 718, 720], "retain": [690, 701], "trust": [690, 710, 712, 1035, 1037], "decai": [690, 710, 712, 714, 716, 1035, 1037, 1038], "layerwis": [690, 714, 716, 1035, 1038], "with_grads_stack": [690, 727], "stride": [728, 729, 730, 731, 732, 733, 734, 735, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026], "data_format": [728, 729, 730, 731, 732, 733, 734, 735, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026], "nwc": [728, 729, 730, 1019, 1020, 1021], "dilat": [728, 729, 730, 731, 732, 733, 734, 735, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026], "convolut": [728, 729, 730, 731, 732, 733, 734, 735, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026], "d_in": [728, 729, 730, 731, 732, 733, 734], "d_out": [728, 729, 730, 731, 732, 733, 734], "slide": [728, 729, 730, 731, 732, 733, 734, 735, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026], "ncw": [728, 729, 730, 1019, 1020, 1021], "wio": [728, 729], "output_shap": [728, 730, 732, 734, 1019, 1021, 1023, 1025], "nhwc": [728, 731, 732, 735, 1019, 1022, 1023, 1026], "fh": [728, 731, 732, 733, 734, 735], "nchw": [728, 731, 732, 735, 1019, 1022, 1023, 1026], "hwio": [728, 731], "unequ": [728, 731], "unsqueez": [728, 731, 735], "ndhwc": [728, 733, 734, 1019, 1024, 1025], "volum": [728, 733], "fd": [728, 733, 734], "ncdhw": [728, 733, 734, 1019, 1024, 1025], "dhwio": [728, 733], "258": [728, 734], "128": [728, 734, 741, 779, 781], "depthwis": [728, 735, 1019, 1026], "333": [728, 735], "inp": [728, 735], "prob": [728, 736, 917, 918, 1019, 1027], "randomli": [728, 736, 1019, 1027], "bernoulli": [728, 736], "out_featur": [728, 736, 737], "incom": [728, 737], "outer_batch_shap": [728, 737], "inner_batch_shap": [728, 737], "in_featur": [728, 737], "cell": [728, 738, 1019, 1028], "num_queri": [728, 739, 740], "x_feat_dim": [728, 739], "num_kei": [728, 739, 740], "cont_feat_dim": [728, 739], "numhead": [728, 739], "feat_dim": [728, 739, 740], "out_feat_dim": [728, 739], "score": [728, 740], "03": [728, 740, 911, 912, 915], "decomposit": [741, 742, 745, 785, 787, 792, 794], "symmetr": [741, 742, 745, 756, 758, 759, 761, 810, 812], "u": [741, 742, 745, 792, 794], "vif": [741, 747, 749], "92": [741, 750, 752], "293": [741, 750, 752], "46997": [741, 750, 752], "eigendecomposit": [741, 756, 758], "qlq\u1d40": [741, 756, 758], "orthogon": [741, 756, 758], "eig": [741, 756, 758], "eigenvalu": [741, 756, 758, 759, 761], "eigenvector": [741, 756, 758], "prepend": [741, 765, 768], "singular": [741, 773, 775, 782, 784, 792, 794, 795, 797], "toler": [741, 773, 775, 782, 784], "largest_singular_valu": [741, 773, 775, 782, 784], "array_lik": [741, 779, 781], "84": [741, 779, 781, 954, 955, 958], "105": [741, 779, 781, 813, 814, 817], "112": [741, 779, 781, 954, 955, 958], "104": [741, 779, 781, 954, 955, 958], "120": [741, 779, 781], "moor": [741, 782, 784], "penros": [741, 782, 784], "pseudo": [741, 782, 784], "orthonorm": [741, 785, 787, 792, 794], "2d": [741, 788, 1019, 1022, 1023, 1026], "logdet": [741, 788], "coeffici": [741, 789, 791], "usvh": [741, 792, 794], "vh": [741, 792, 794], "hermitian": [741, 792, 794], "et": [741, 792, 794], "cetera": [741, 792, 794], "adjoint": [741, 792, 794], "reconstruct": [741, 792, 794, 934, 935, 941], "reconstructed_x": [741, 792, 794], "contract": [741, 798, 800, 954, 955, 958], "doubl": [741, 798, 800], "singleton": [741, 807, 809, 829, 869, 872, 929, 931, 954, 959, 962, 963, 966, 967, 970, 971, 974, 975, 978, 979, 982, 983, 986, 987, 988, 991, 993, 996], "manhattan": [741, 807, 809], "l2": [741, 807, 809], "euclidean": [741, 807, 809], "mathbf": [741, 810, 812], "mathbb": [741, 810, 812], "skew": [741, 810, 812], "entropi": [813, 814, 817, 819, 822, 824, 827], "predict": [813, 814, 817, 819, 822, 824, 827], "smooth": [813, 814, 817, 819, 822, 824, 827], "discret": [813, 819, 822], "35667497": [813, 819, 822], "spars": [813, 824, 827], "logit": [813, 824, 827], "793291": [813, 824, 827], "512926": [813, 824, 827], "before_1": [829, 839, 842, 885, 888], "after_1": [829, 839, 842, 885, 888], "before_n": [829, 839, 842, 885, 888], "after_n": [829, 839, 842, 885, 888], "insert": [829, 843, 846, 893, 898, 929, 930], "manipulation_funct": [829, 843, 846], "reorder": [829, 847, 850], "permut": [829, 851, 854, 877, 880], "repetit": [829, 855, 858, 881, 884], "restor": [829, 863, 866], "famili": [829, 873, 876], "intxx": [829, 873, 876], "floatxx": [829, 873, 876], "fomaml_step": 889, "inner_cost_fn": [889, 890, 891], "outer_cost_fn": [889, 890, 891], "inner_grad_step": [889, 890, 891, 892], "inner_learning_r": [889, 890, 891, 892], "inner_optimization_step": [889, 890, 891, 892], "inner_batch_fn": [889, 890, 891], "outer_batch_fn": [889, 890, 891], "average_across_step": [889, 890, 891], "inner_v": [889, 890, 891], "keep_inner_v": [889, 890, 891], "outer_v": [889, 890, 891], "keep_outer_v": [889, 890, 891], "return_inner_v": [889, 890, 891, 892], "num_task": [889, 890, 891, 892], "maml": [889, 890, 891], "recev": [889, 890, 891], "0x7f22eb6a09d0": [889, 890, 891, 892], "maml_step": 889, "rece": [889, 891], "reptile_step": 889, "cost_fn": [889, 892], "reptil": [889, 892], "receivng": [889, 892], "all_nested_indic": 893, "include_nest": [893, 894], "_index": [893, 894, 904], "_base": [893, 894, 903, 904], "copy_nest": 893, "to_mut": [893, 895, 905], "mutabl": [893, 895, 905], "insert_into_nest_at_index": 893, "insert_into_nest_at_indic": 893, "map_nest_at_index": 893, "map_nest_at_indic": 893, "multi_index_nest": 893, "nested_ani": 893, "check_nest": [893, 903, 904], "conditon": [893, 903, 904], "nested_indices_wher": 893, "stop_after_n_found": [893, 904], "_depth": [893, 905], "_tuple_check_fn": [893, 905], "_list_check_fn": [893, 905], "_dict_check_fn": [893, 905], "nested_multi_map": 893, "nest0": [893, 906], "ivy_arrai": [893, 906], "funciton": [893, 906], "prune_nest_at_index": 893, "prune_nest_at_indic": 893, "set_nest_at_index": 893, "set_nest_at_indic": 893, "mini": [911, 912, 915, 1033, 1034], "gamma": [911, 912, 915], "beta": [911, 912, 915], "894": [911, 912, 915], "772": [911, 912, 915], "796": [911, 912, 915], "population_s": [917, 918], "num_sampl": [917, 918], "home": [917, 918, 922], "uniformli": [917, 919, 920, 923, 925], "highest": [917, 919, 920], "parameter": [917, 922, 923, 925], "6444774682897879": [917, 922], "811": [917, 922], "508": [917, 922], "564": [917, 922], "7268672": [917, 922], "968": [917, 922], "175": [917, 922, 934, 935], "064": [917, 922], "40935726": [917, 922], "556": [917, 922], "26431865": [917, 923, 925], "475": [917, 923, 925], "878": [917, 923, 925], "861": [917, 923, 925], "89150229": [917, 923, 925], "89629126": [917, 923, 925], "94198485": [917, 923, 925], "91405606": [917, 923, 925], "72848724": [917, 923, 925], "7550739": [917, 923, 925], "00109": [917, 923, 925], "occurr": [929, 930, 931, 934, 935], "43": [929, 933], "x_j": [934, 935, 936, 940, 942], "impli": [934, 935, 936, 940, 942], "inverse_indic": [934, 935, 941], "aggreg": [934, 935], "fourth": [934, 935], "607": [934, 935], "735": [934, 935], "667": [934, 935], "381": [934, 935], "857": [934, 935], "0396": [934, 935], "166": [934, 935], "58": [934, 935], "828": [934, 935], "144": [934, 935], "40501155": [934, 935], "77361575": [934, 935], "97776199": [934, 935], "36831157": [934, 935], "89148434": [934, 935], "9512272": [934, 935], "67542176": [934, 935], "41985657": [934, 935], "23478023": [934, 935], "1141": [934, 935], "8101": [934, 935], "9298": [934, 935], "8460": [934, 935], "2119": [934, 935], "3519": [934, 935], "6252": [934, 935], "4033": [934, 935], "7443": [934, 935], "2577": [934, 935], "3707": [934, 935], "0545": [934, 935], "3238": [934, 935], "5944": [934, 935], "0775": [934, 935], "4327": [934, 935], "176": [934, 935], "889": [934, 935], "763": [934, 935], "071": [934, 935], "262": [934, 935], "456": [934, 935], "114": [934, 935], "349": [934, 935], "615": [934, 935], "594": [934, 935], "335": [934, 935], "212": [934, 935], "457": [934, 935], "827": [934, 935], "set_funct": [934, 936, 940], "ascend": [943, 944, 947], "einstein": [954, 955, 958], "summat": [954, 955, 958], "seq": [954, 955, 958], "jk": [954, 955, 958], "ik": [954, 955, 958], "126": [954, 955, 958], "510": [954, 955, 958], "108": [954, 955, 958], "117": [954, 955, 958], "sentinel": [954, 959, 962, 967, 970], "unsign": [954, 971, 974, 979, 982], "degre": [954, 975, 978, 983, 986], "bessel": [954, 975, 978, 983, 986], "8164966": [954, 975, 978], "varianc": [954, 983, 986], "unbias": [954, 983, 986], "simplicit": [987, 988, 991], "grow": 998, "ai": 998, "got": 998, "colab": 998, "sharp": 998, "weekli": 998, "immedi": 998, "favorit": 998, "jax_concat": 998, "tf_concat": 998, "np_concat": 998, "mx_concat": 998, "torch_concat": 998, "prompt": 998, "get_devic": 998, "reduce_prod": 998, "gradient_imag": 998, "linalg": 998, "bilinear_resampl": 998, "stack_imag": 998, "neural_net": 998, "ecosystem": [998, 1004], "popular": [998, 1004], "acceler": 998, "articl": 998, "lenton2021ivi": 998, "inter": 998, "lenton": 998, "daniel": 998, "pardo": 998, "fabio": 998, "falck": 998, "fabian": 998, "jame": 998, "stephen": 998, "clark": 998, "ronald": 998, "journal": 998, "arxiv": 998, "preprint": 998, "2102": 998, "02886": 998, "2021": 998, "add_array_spec": 1001, "fn_array_spec": 1001, "geglu": 1005, "native_modul": [1008, 1009], "native_module_class": [1008, 1009], "firstlayersiren": 1010, "kaimingnorm": [1010, 1014], "negative_slop": 1010, "Ones": 1010, "siren": 1010, "w0": [1010, 1016], "filter_s": [1019, 1020, 1021], "1d": [1019, 1020, 1021], "conv1dtranspos": 1019, "filter_shap": [1019, 1022, 1023, 1024, 1025, 1026], "conv2dtranspos": 1019, "conv3dtranspos": 1019, "depthwiseconv2d": 1019, "num_channel": [1019, 1026], "bernoul": [1019, 1027], "num_lay": [1019, 1028], "return_sequ": [1019, 1028], "return_st": [1019, 1028], "get_initial_st": [1019, 1028], "dens": [1019, 1029], "multiheadattent": 1019, "query_dim": [1019, 1030], "head_dim": [1019, 1030], "dropout_r": [1019, 1030], "context_dim": [1019, 1030], "with_to_q_fn": [1019, 1030], "with_to_kv_fn": [1019, 1030], "with_to_out_fn": [1019, 1030], "build_mod": [1019, 1030, 1031, 1032], "on_init": [1019, 1030, 1031, 1032], "__call__": [1019, 1030, 1031, 1032], "store_var": [1031, 1032], "arg_stateful_idx": [1031, 1032], "kwarg_stateful_idx": [1031, 1032], "fallback_to_non_compil": [1031, 1032, 1035, 1039], "with_partial_v": [1031, 1032], "initialz": [1031, 1032], "from_cal": [1031, 1032], "check_submod_ret": [1031, 1032], "get_mod_kei": [1031, 1032], "top_mod": [1031, 1032], "mod_depth": [1031, 1032], "mod_height": [1031, 1032], "mod_with_top_mod_key_chain": [1031, 1032], "save_weight": [1031, 1032], "weights_path": [1031, 1032], "show_mod_in_top_mod": [1031, 1032], "upper_depth": [1031, 1032], "lower_depth": [1031, 1032], "show_structur": [1031, 1032], "show_v_in_top_v": [1031, 1032], "sub_mod": [1031, 1032], "show_v": [1031, 1032], "track_submod_call_ord": [1031, 1032], "track_submod_ret": [1031, 1032], "v_with_top_v_key_chain": [1031, 1032], "layernorm": 1033, "normalized_shap": [1033, 1034], "elementwise_affin": [1033, 1034], "trail": [1033, 1034], "affin": [1033, 1034], "init_on_first_step": [1035, 1039], "ignore_miss": [1035, 1039], "overriden": [1035, 1039], "sgd": 1035, "stochast": [1035, 1040], "sub_modul": [1041, 1042]}, "objects": {"ivy.array": [[22, 0, 0, "-", "activations"], [24, 0, 0, "-", "array"], [27, 0, 0, "-", "conversions"], [32, 0, 0, "-", "creation"], [34, 0, 0, "-", "data_type"], [36, 0, 0, "-", "device"], [38, 0, 0, "-", "elementwise"], [40, 0, 0, "-", "general"], [42, 0, 0, "-", "gradients"], [44, 0, 0, "-", "image"], [46, 0, 0, "-", "layers"], [48, 0, 0, "-", "linear_algebra"], [50, 0, 0, "-", "losses"], [52, 0, 0, "-", "manipulation"], [54, 0, 0, "-", "norms"], [56, 0, 0, "-", "random"], [58, 0, 0, "-", "searching"], [60, 0, 0, "-", "set"], [62, 0, 0, "-", "sorting"], [64, 0, 0, "-", "statistical"], [66, 0, 0, "-", "utility"], [68, 0, 0, "-", "wrapping"]], "ivy.array.activations": [[23, 1, 1, "", "ArrayWithActivations"]], "ivy.array.activations.ArrayWithActivations": [[23, 2, 1, "", "softplus"]], "ivy.array.array": [[25, 1, 1, "", "Array"], [26, 1, 1, "", "Variable"]], "ivy.array.array.Array": [[25, 3, 1, "", "T"], [25, 2, 1, "", "__add__"], [25, 2, 1, "", "__init__"], [25, 2, 1, "", "__le__"], [25, 2, 1, "", "__radd__"], [25, 2, 1, "", "adam_update"], [25, 2, 1, "", "arange"], [25, 2, 1, "", "arg_info"], [25, 2, 1, "", "arg_names"], [25, 2, 1, "", "argmax"], [25, 2, 1, "", "argmin"], [25, 2, 1, "", "array"], [25, 2, 1, "", "array_equal"], [25, 2, 1, "", "arrays_equal"], [25, 2, 1, "", "as_ivy_dev"], [25, 2, 1, "", "as_ivy_dtype"], [25, 2, 1, "", "as_native_dev"], [25, 2, 1, "", "as_native_dtype"], [25, 2, 1, "", "assert_supports_inplace"], [25, 2, 1, "", "cache_fn"], [25, 2, 1, "", "clear_mem_on_dev"], [25, 2, 1, "", "clip_matrix_norm"], [25, 2, 1, "", "clip_vector_norm"], [25, 2, 1, "", "closest_valid_dtype"], [25, 2, 1, "", "container_types"], [25, 2, 1, "", "conv1d"], [25, 2, 1, "", "conv1d_transpose"], [25, 2, 1, "", "conv2d"], [25, 2, 1, "", "conv2d_transpose"], [25, 2, 1, "", "conv3d"], [25, 2, 1, "", "conv3d_transpose"], [25, 2, 1, "", "copy_array"], [25, 2, 1, "", "cumprod"], [25, 2, 1, "", "cumsum"], [25, 2, 1, "", "current_backend"], [25, 2, 1, "", "current_backend_str"], [25, 3, 1, "", "data"], [25, 2, 1, "", "default"], [25, 2, 1, "", "default_device"], [25, 2, 1, "", "default_dtype"], [25, 2, 1, "", "default_float_dtype"], [25, 2, 1, "", "default_int_dtype"], [25, 2, 1, "", "depthwise_conv2d"], [25, 2, 1, "", "dev"], [25, 2, 1, "", "dev_clone"], [25, 2, 1, "", "dev_clone_array"], [25, 2, 1, "", "dev_clone_iter"], [25, 2, 1, "", "dev_clone_nest"], [25, 2, 1, "", "dev_dist"], [25, 2, 1, "", "dev_dist_array"], [25, 2, 1, "", "dev_dist_iter"], [25, 2, 1, "", "dev_dist_nest"], [25, 2, 1, "", "dev_unify"], [25, 2, 1, "", "dev_unify_array"], [25, 2, 1, "", "dev_unify_iter"], [25, 2, 1, "", "dev_unify_nest"], [25, 2, 1, "", "dev_util"], [25, 3, 1, "", "device"], [25, 2, 1, "", "dropout"], [25, 3, 1, "", "dtype"], [25, 2, 1, "", "dtype_bits"], [25, 2, 1, "", "einops_rearrange"], [25, 2, 1, "", "einops_reduce"], [25, 2, 1, "", "einops_repeat"], [25, 2, 1, "", "empty"], [25, 2, 1, "", "execute_with_gradients"], [25, 2, 1, "", "exists"], [25, 2, 1, "", "eye"], [25, 2, 1, "", "floormod"], [25, 2, 1, "", "fourier_encode"], [25, 2, 1, "", "full"], [25, 2, 1, "", "function_supported_dtypes"], [25, 2, 1, "", "function_unsupported_dtypes"], [25, 2, 1, "", "gather"], [25, 2, 1, "", "gelu"], [25, 2, 1, "", "get_all_arrays_in_memory"], [25, 2, 1, "", "get_all_ivy_arrays_on_dev"], [25, 2, 1, "", "get_min_base"], [25, 2, 1, "", "get_min_denominator"], [25, 2, 1, "", "get_num_dims"], [25, 2, 1, "", "get_referrers_recursive"], [25, 2, 1, "", "gpu_is_available"], [25, 2, 1, "", "gradient_descent_update"], [25, 2, 1, "", "handle_nestable"], [25, 2, 1, "", "handle_out_argument"], [25, 2, 1, "", "has_nans"], [25, 2, 1, "", "indices_where"], [25, 2, 1, "", "infer_device"], [25, 2, 1, "", "infer_dtype"], [25, 2, 1, "", "inplace_arrays_supported"], [25, 2, 1, "", "inplace_decrement"], [25, 2, 1, "", "inplace_increment"], [25, 2, 1, "", "inplace_update"], [25, 2, 1, "", "inplace_variables_supported"], [25, 2, 1, "", "inputs_to_native_arrays"], [25, 2, 1, "", "invalid_dtype"], [25, 2, 1, "", "is_array"], [25, 2, 1, "", "is_ivy_array"], [25, 2, 1, "", "is_ivy_container"], [25, 2, 1, "", "is_native_array"], [25, 3, 1, "", "is_variable"], [25, 2, 1, "", "lamb_update"], [25, 2, 1, "", "lars_update"], [25, 2, 1, "", "leaky_relu"], [25, 2, 1, "", "linear"], [25, 2, 1, "", "linspace"], [25, 2, 1, "", "logspace"], [25, 2, 1, "", "lstm_update"], [25, 3, 1, "", "mT"], [25, 2, 1, "", "match_kwargs"], [25, 2, 1, "", "matrix_power"], [25, 2, 1, "", "maximum"], [25, 2, 1, "", "minimum"], [25, 2, 1, "", "multi_head_attention"], [25, 2, 1, "", "multinomial"], [25, 2, 1, "", "multiprocessing"], [25, 3, 1, "", "ndim"], [25, 2, 1, "", "nonzero"], [25, 2, 1, "", "num_arrays_in_memory"], [25, 2, 1, "", "num_cpu_cores"], [25, 2, 1, "", "num_gpus"], [25, 2, 1, "", "num_ivy_arrays_on_dev"], [25, 2, 1, "", "one_hot"], [25, 2, 1, "", "ones"], [25, 2, 1, "", "optimizer_update"], [25, 2, 1, "", "outputs_to_ivy_arrays"], [25, 2, 1, "", "percent_used_mem_on_dev"], [25, 2, 1, "", "print_all_arrays_in_memory"], [25, 2, 1, "", "print_all_ivy_arrays_on_dev"], [25, 2, 1, "", "promote_types"], [25, 2, 1, "", "queue_timeout"], [25, 2, 1, "", "randint"], [25, 2, 1, "", "random_normal"], [25, 2, 1, "", "random_uniform"], [25, 2, 1, "", "relu"], [25, 2, 1, "", "scaled_dot_product_attention"], [25, 2, 1, "", "scatter_flat"], [25, 2, 1, "", "scatter_nd"], [25, 2, 1, "", "seed"], [25, 2, 1, "", "set_default_device"], [25, 2, 1, "", "set_default_dtype"], [25, 2, 1, "", "set_default_float_dtype"], [25, 2, 1, "", "set_default_int_dtype"], [25, 2, 1, "", "set_min_base"], [25, 2, 1, "", "set_min_denominator"], [25, 2, 1, "", "set_queue_timeout"], [25, 2, 1, "", "set_shape_array_mode"], [25, 2, 1, "", "set_split_factor"], [25, 2, 1, "", "set_tmp_dir"], [25, 2, 1, "", "set_with_grads"], [25, 3, 1, "", "shape"], [25, 2, 1, "", "shape_array_mode"], [25, 2, 1, "", "shape_to_tuple"], [25, 2, 1, "", "shuffle"], [25, 2, 1, "", "sigmoid"], [25, 3, 1, "", "size"], [25, 2, 1, "", "slogdet"], [25, 2, 1, "", "softmax"], [25, 2, 1, "", "split"], [25, 2, 1, "", "split_factor"], [25, 2, 1, "", "split_func_call"], [25, 2, 1, "", "stable_divide"], [25, 2, 1, "", "stable_pow"], [25, 2, 1, "", "stop_gradient"], [25, 2, 1, "", "supports_inplace"], [25, 2, 1, "", "tmp_dir"], [25, 2, 1, "", "to_device"], [25, 2, 1, "", "to_list"], [25, 2, 1, "", "to_native_arrays_and_back"], [25, 2, 1, "", "to_scalar"], [25, 2, 1, "", "total_mem_on_dev"], [25, 2, 1, "", "tpu_is_available"], [25, 2, 1, "", "try_else_none"], [25, 2, 1, "", "type_promote_arrays"], [25, 2, 1, "", "unique_all"], [25, 2, 1, "", "unique_inverse"], [25, 2, 1, "", "unique_values"], [25, 2, 1, "", "unset_default_device"], [25, 2, 1, "", "unset_default_dtype"], [25, 2, 1, "", "unset_default_float_dtype"], [25, 2, 1, "", "unset_default_int_dtype"], [25, 2, 1, "", "unset_shape_array_mode"], [25, 2, 1, "", "unset_with_grads"], [25, 2, 1, "", "unstack"], [25, 2, 1, "", "used_mem_on_dev"], [25, 2, 1, "", "valid_dtype"], [25, 2, 1, "", "value_is_nan"], [25, 2, 1, "", "variable"], [25, 2, 1, "", "variable_data"], [25, 2, 1, "", "where"], [25, 2, 1, "", "with_grads"], [25, 2, 1, "", "zeros"]], "ivy.array.array.Variable": [[26, 2, 1, "", "__init__"]], "ivy.array.array_methods": [[370, 4, 1, "", "abs"], [375, 4, 1, "", "acos"], [379, 4, 1, "", "acosh"], [693, 4, 1, "", "adam_step"], [383, 4, 1, "", "add"], [989, 4, 1, "", "all"], [611, 4, 1, "", "all_equal"], [994, 4, 1, "", "any"], [945, 4, 1, "", "argsort"], [180, 4, 1, "", "asarray"], [388, 4, 1, "", "asin"], [392, 4, 1, "", "asinh"], [253, 4, 1, "", "astype"], [397, 4, 1, "", "atan"], [401, 4, 1, "", "atan2"], [405, 4, 1, "", "atanh"], [815, 4, 1, "", "binary_cross_entropy"], [409, 4, 1, "", "bitwise_and"], [413, 4, 1, "", "bitwise_invert"], [417, 4, 1, "", "bitwise_left_shift"], [421, 4, 1, "", "bitwise_or"], [425, 4, 1, "", "bitwise_right_shift"], [429, 4, 1, "", "bitwise_xor"], [258, 4, 1, "", "broadcast_arrays"], [263, 4, 1, "", "broadcast_to"], [268, 4, 1, "", "can_cast"], [433, 4, 1, "", "ceil"], [743, 4, 1, "", "cholesky"], [831, 4, 1, "", "clip"], [836, 4, 1, "", "concat"], [840, 4, 1, "", "constant_pad"], [437, 4, 1, "", "cos"], [441, 4, 1, "", "cosh"], [748, 4, 1, "", "cross"], [820, 4, 1, "", "cross_entropy"], [751, 4, 1, "", "det"], [754, 4, 1, "", "diagonal"], [445, 4, 1, "", "divide"], [277, 4, 1, "", "dtype"], [757, 4, 1, "", "eigh"], [760, 4, 1, "", "eigvalsh"], [956, 4, 1, "", "einsum"], [186, 4, 1, "", "empty_like"], [450, 4, 1, "", "equal"], [454, 4, 1, "", "erf"], [458, 4, 1, "", "exp"], [844, 4, 1, "", "expand_dims"], [462, 4, 1, "", "expm1"], [282, 4, 1, "", "finfo"], [848, 4, 1, "", "flip"], [466, 4, 1, "", "floor"], [470, 4, 1, "", "floor_divide"], [194, 4, 1, "", "from_dlpack"], [200, 4, 1, "", "full_like"], [639, 4, 1, "", "gather_nd"], [474, 4, 1, "", "greater"], [478, 4, 1, "", "greater_equal"], [289, 4, 1, "", "iinfo"], [763, 4, 1, "", "inv"], [295, 4, 1, "", "is_float_dtype"], [300, 4, 1, "", "is_int_dtype"], [482, 4, 1, "", "isfinite"], [486, 4, 1, "", "isinf"], [490, 4, 1, "", "isnan"], [913, 4, 1, "", "layer_norm"], [494, 4, 1, "", "less"], [498, 4, 1, "", "less_equal"], [502, 4, 1, "", "log"], [506, 4, 1, "", "log10"], [510, 4, 1, "", "log1p"], [514, 4, 1, "", "log2"], [518, 4, 1, "", "logaddexp"], [522, 4, 1, "", "logical_and"], [526, 4, 1, "", "logical_not"], [530, 4, 1, "", "logical_or"], [534, 4, 1, "", "logical_xor"], [766, 4, 1, "", "matmul"], [770, 4, 1, "", "matrix_norm"], [774, 4, 1, "", "matrix_rank"], [777, 4, 1, "", "matrix_transpose"], [960, 4, 1, "", "max"], [964, 4, 1, "", "mean"], [211, 4, 1, "", "meshgrid"], [968, 4, 1, "", "min"], [540, 4, 1, "", "multiply"], [216, 4, 1, "", "native_array"], [545, 4, 1, "", "negative"], [549, 4, 1, "", "not_equal"], [224, 4, 1, "", "ones_like"], [780, 4, 1, "", "outer"], [852, 4, 1, "", "permute_dims"], [783, 4, 1, "", "pinv"], [553, 4, 1, "", "positive"], [557, 4, 1, "", "pow"], [972, 4, 1, "", "prod"], [786, 4, 1, "", "qr"], [561, 4, 1, "", "remainder"], [856, 4, 1, "", "repeat"], [860, 4, 1, "", "reshape"], [306, 4, 1, "", "result_type"], [864, 4, 1, "", "roll"], [565, 4, 1, "", "round"], [569, 4, 1, "", "sign"], [574, 4, 1, "", "sin"], [579, 4, 1, "", "sinh"], [167, 4, 1, "", "softplus"], [790, 4, 1, "", "solve"], [950, 4, 1, "", "sort"], [825, 4, 1, "", "sparse_cross_entropy"], [583, 4, 1, "", "sqrt"], [587, 4, 1, "", "square"], [870, 4, 1, "", "squeeze"], [874, 4, 1, "", "stack"], [976, 4, 1, "", "std"], [592, 4, 1, "", "subtract"], [980, 4, 1, "", "sum"], [793, 4, 1, "", "svd"], [796, 4, 1, "", "svdvals"], [878, 4, 1, "", "swapaxes"], [597, 4, 1, "", "tan"], [602, 4, 1, "", "tanh"], [799, 4, 1, "", "tensordot"], [882, 4, 1, "", "tile"], [682, 4, 1, "", "to_numpy"], [802, 4, 1, "", "trace"], [230, 4, 1, "", "tril"], [235, 4, 1, "", "triu"], [606, 4, 1, "", "trunc"], [938, 4, 1, "", "unique_counts"], [984, 4, 1, "", "var"], [805, 4, 1, "", "vecdot"], [808, 4, 1, "", "vector_norm"], [811, 4, 1, "", "vector_to_skew_symmetric_matrix"], [886, 4, 1, "", "zero_pad"], [243, 4, 1, "", "zeros_like"]], "ivy.array.conversions": [[28, 4, 1, "", "args_to_ivy"], [29, 4, 1, "", "args_to_native"], [30, 4, 1, "", "to_ivy"], [31, 4, 1, "", "to_native"]], "ivy.array.creation": [[33, 1, 1, "", "ArrayWithCreation"]], "ivy.array.creation.ArrayWithCreation": [[33, 2, 1, "", "asarray"], [33, 2, 1, "", "empty_like"], [33, 2, 1, "", "from_dlpack"], [33, 2, 1, "", "full_like"], [33, 2, 1, "", "meshgrid"], [33, 2, 1, "", "native_array"], [33, 2, 1, "", "ones_like"], [33, 2, 1, "", "tril"], [33, 2, 1, "", "triu"], [33, 2, 1, "", "zeros_like"]], "ivy.array.data_type": [[35, 1, 1, "", "ArrayWithDataTypes"]], "ivy.array.data_type.ArrayWithDataTypes": [[35, 2, 1, "", "astype"], [35, 2, 1, "", "broadcast_arrays"], [35, 2, 1, "", "broadcast_to"], [35, 2, 1, "", "can_cast"], [35, 2, 1, "", "dtype"], [35, 2, 1, "", "finfo"], [35, 2, 1, "", "iinfo"], [35, 2, 1, "", "is_float_dtype"], [35, 2, 1, "", "is_int_dtype"], [35, 2, 1, "", "result_type"]], "ivy.array.device": [[37, 1, 1, "", "ArrayWithDevice"]], "ivy.array.elementwise": [[39, 1, 1, "", "ArrayWithElementwise"]], "ivy.array.elementwise.ArrayWithElementwise": [[39, 2, 1, "", "abs"], [39, 2, 1, "", "acos"], [39, 2, 1, "", "acosh"], [39, 2, 1, "", "add"], [39, 2, 1, "", "asin"], [39, 2, 1, "", "asinh"], [39, 2, 1, "", "atan"], [39, 2, 1, "", "atan2"], [39, 2, 1, "", "atanh"], [39, 2, 1, "", "bitwise_and"], [39, 2, 1, "", "bitwise_invert"], [39, 2, 1, "", "bitwise_left_shift"], [39, 2, 1, "", "bitwise_or"], [39, 2, 1, "", "bitwise_right_shift"], [39, 2, 1, "", "bitwise_xor"], [39, 2, 1, "", "ceil"], [39, 2, 1, "", "cos"], [39, 2, 1, "", "cosh"], [39, 2, 1, "", "divide"], [39, 2, 1, "", "equal"], [39, 2, 1, "", "erf"], [39, 2, 1, "", "exp"], [39, 2, 1, "", "expm1"], [39, 2, 1, "", "floor"], [39, 2, 1, "", "floor_divide"], [39, 2, 1, "", "greater"], [39, 2, 1, "", "greater_equal"], [39, 2, 1, "", "isfinite"], [39, 2, 1, "", "isinf"], [39, 2, 1, "", "isnan"], [39, 2, 1, "", "less"], [39, 2, 1, "", "less_equal"], [39, 2, 1, "", "log"], [39, 2, 1, "", "log10"], [39, 2, 1, "", "log1p"], [39, 2, 1, "", "log2"], [39, 2, 1, "", "logaddexp"], [39, 2, 1, "", "logical_and"], [39, 2, 1, "", "logical_not"], [39, 2, 1, "", "logical_or"], [39, 2, 1, "", "logical_xor"], [39, 2, 1, "", "multiply"], [39, 2, 1, "", "negative"], [39, 2, 1, "", "not_equal"], [39, 2, 1, "", "positive"], [39, 2, 1, "", "pow"], [39, 2, 1, "", "remainder"], [39, 2, 1, "", "round"], [39, 2, 1, "", "sign"], [39, 2, 1, "", "sin"], [39, 2, 1, "", "sinh"], [39, 2, 1, "", "sqrt"], [39, 2, 1, "", "square"], [39, 2, 1, "", "subtract"], [39, 2, 1, "", "tan"], [39, 2, 1, "", "tanh"], [39, 2, 1, "", "trunc"]], "ivy.array.general": [[41, 1, 1, "", "ArrayWithGeneral"]], "ivy.array.general.ArrayWithGeneral": [[41, 2, 1, "", "all_equal"], [41, 2, 1, "", "gather_nd"], [41, 2, 1, "", "to_numpy"]], "ivy.array.gradients": [[43, 1, 1, "", "ArrayWithGradients"]], "ivy.array.gradients.ArrayWithGradients": [[43, 2, 1, "", "adam_step"]], "ivy.array.image": [[45, 1, 1, "", "ArrayWithImage"]], "ivy.array.layers": [[47, 1, 1, "", "ArrayWithLayers"]], "ivy.array.linear_algebra": [[49, 1, 1, "", "ArrayWithLinearAlgebra"]], "ivy.array.linear_algebra.ArrayWithLinearAlgebra": [[49, 2, 1, "", "cholesky"], [49, 2, 1, "", "cross"], [49, 2, 1, "", "det"], [49, 2, 1, "", "diagonal"], [49, 2, 1, "", "eigh"], [49, 2, 1, "", "eigvalsh"], [49, 2, 1, "", "inv"], [49, 2, 1, "", "matmul"], [49, 2, 1, "", "matrix_norm"], [49, 2, 1, "", "matrix_rank"], [49, 2, 1, "", "matrix_transpose"], [49, 2, 1, "", "outer"], [49, 2, 1, "", "pinv"], [49, 2, 1, "", "qr"], [49, 2, 1, "", "solve"], [49, 2, 1, "", "svd"], [49, 2, 1, "", "svdvals"], [49, 2, 1, "", "tensordot"], [49, 2, 1, "", "trace"], [49, 2, 1, "", "vecdot"], [49, 2, 1, "", "vector_norm"], [49, 2, 1, "", "vector_to_skew_symmetric_matrix"]], "ivy.array.losses": [[51, 1, 1, "", "ArrayWithLosses"]], "ivy.array.losses.ArrayWithLosses": [[51, 2, 1, "", "binary_cross_entropy"], [51, 2, 1, "", "cross_entropy"], [51, 2, 1, "", "sparse_cross_entropy"]], "ivy.array.manipulation": [[53, 1, 1, "", "ArrayWithManipulation"]], "ivy.array.manipulation.ArrayWithManipulation": [[53, 2, 1, "", "clip"], [53, 2, 1, "", "concat"], [53, 2, 1, "", "constant_pad"], [53, 2, 1, "", "expand_dims"], [53, 2, 1, "", "flip"], [53, 2, 1, "", "permute_dims"], [53, 2, 1, "", "repeat"], [53, 2, 1, "", "reshape"], [53, 2, 1, "", "roll"], [53, 2, 1, "", "squeeze"], [53, 2, 1, "", "stack"], [53, 2, 1, "", "swapaxes"], [53, 2, 1, "", "tile"], [53, 2, 1, "", "zero_pad"]], "ivy.array.norms": [[55, 1, 1, "", "ArrayWithNorms"]], "ivy.array.norms.ArrayWithNorms": [[55, 2, 1, "", "layer_norm"]], "ivy.array.random": [[57, 1, 1, "", "ArrayWithRandom"]], "ivy.array.searching": [[59, 1, 1, "", "ArrayWithSearching"]], "ivy.array.set": [[61, 1, 1, "", "ArrayWithSet"]], "ivy.array.set.ArrayWithSet": [[61, 2, 1, "", "unique_counts"]], "ivy.array.sorting": [[63, 1, 1, "", "ArrayWithSorting"]], "ivy.array.sorting.ArrayWithSorting": [[63, 2, 1, "", "argsort"], [63, 2, 1, "", "sort"]], "ivy.array.statistical": [[65, 1, 1, "", "ArrayWithStatistical"]], "ivy.array.statistical.ArrayWithStatistical": [[65, 2, 1, "", "einsum"], [65, 2, 1, "", "max"], [65, 2, 1, "", "mean"], [65, 2, 1, "", "min"], [65, 2, 1, "", "prod"], [65, 2, 1, "", "std"], [65, 2, 1, "", "sum"], [65, 2, 1, "", "var"]], "ivy.array.utility": [[67, 1, 1, "", "ArrayWithUtility"]], "ivy.array.utility.ArrayWithUtility": [[67, 2, 1, "", "all"], [67, 2, 1, "", "any"]], "ivy.array.wrapping": [[69, 4, 1, "", "add_ivy_array_instance_methods"]], "ivy": [[0, 0, 0, "-", "backend_handler"], [150, 0, 0, "-", "func_wrapper"], [1001, 0, 0, "-", "inspection"], [1044, 0, 0, "-", "verbosity"]], "ivy.backend_handler": [[0, 1, 1, "", "ContextManager"], [2, 4, 1, "", "choose_random_backend"], [3, 4, 1, "", "clear_backend_stack"], [4, 4, 1, "", "current_backend"], [5, 4, 1, "", "get_backend"], [6, 4, 1, "", "set_backend"], [7, 4, 1, "", "try_import_ivy_jax"], [8, 4, 1, "", "try_import_ivy_mxnet"], [9, 4, 1, "", "try_import_ivy_numpy"], [10, 4, 1, "", "try_import_ivy_tf"], [11, 4, 1, "", "try_import_ivy_torch"], [12, 4, 1, "", "unset_backend"]], "ivy.backend_handler.ContextManager": [[0, 2, 1, "", "__init__"]], "ivy.container": [[70, 0, 0, "-", "activations"], [72, 0, 0, "-", "base"], [74, 0, 0, "-", "container"], [77, 0, 0, "-", "creation"], [79, 0, 0, "-", "data_type"], [81, 0, 0, "-", "device"], [83, 0, 0, "-", "elementwise"], [85, 0, 0, "-", "general"], [87, 0, 0, "-", "gradients"], [89, 0, 0, "-", "image"], [91, 0, 0, "-", "layers"], [93, 0, 0, "-", "linear_algebra"], [95, 0, 0, "-", "losses"], [97, 0, 0, "-", "manipulation"], [99, 0, 0, "-", "norms"], [101, 0, 0, "-", "random"], [103, 0, 0, "-", "searching"], [105, 0, 0, "-", "set"], [107, 0, 0, "-", "sorting"], [109, 0, 0, "-", "statistical"], [111, 0, 0, "-", "utility"], [113, 0, 0, "-", "wrapping"]], "ivy.container.activations": [[71, 1, 1, "", "ContainerWithActivations"]], "ivy.container.activations.ContainerWithActivations": [[71, 2, 1, "", "softplus"], [71, 2, 1, "", "static_softplus"]], "ivy.container.base": [[73, 1, 1, "", "ContainerBase"]], "ivy.container.base.ContainerBase": [[73, 2, 1, "", "__getitem__"], [73, 2, 1, "", "__init__"], [73, 2, 1, "", "__setitem__"], [73, 2, 1, "", "all_false"], [73, 2, 1, "", "all_key_chains"], [73, 2, 1, "", "all_true"], [73, 2, 1, "", "arrays_as_lists"], [73, 2, 1, "", "as_arrays"], [73, 2, 1, "", "as_bools"], [73, 2, 1, "", "as_ones"], [73, 2, 1, "", "as_random_uniform"], [73, 2, 1, "", "as_variables"], [73, 2, 1, "", "as_zeros"], [73, 2, 1, "", "assert_contains_sub_container"], [73, 2, 1, "", "assert_contains_sub_structure"], [73, 2, 1, "", "assert_identical"], [73, 2, 1, "", "assert_identical_structure"], [73, 2, 1, "", "at_key_chain"], [73, 2, 1, "", "at_key_chains"], [73, 2, 1, "", "at_keys"], [73, 2, 1, "", "clip"], [73, 2, 1, "", "combine"], [73, 2, 1, "", "common_key_chains"], [73, 3, 1, "", "config"], [73, 2, 1, "", "contains_sub_container"], [73, 2, 1, "", "contains_sub_structure"], [73, 2, 1, "", "copy"], [73, 2, 1, "", "create_if_absent"], [73, 2, 1, "", "cutoff_at_depth"], [73, 2, 1, "", "cutoff_at_height"], [73, 2, 1, "", "deep_copy"], [73, 3, 1, "", "dev"], [73, 2, 1, "", "dev_clone"], [73, 2, 1, "", "dev_dist"], [73, 3, 1, "", "dev_str"], [73, 2, 1, "", "diff"], [73, 2, 1, "", "dtype"], [73, 2, 1, "", "einops_rearrange"], [73, 2, 1, "", "einops_reduce"], [73, 2, 1, "", "einops_repeat"], [73, 2, 1, "", "find_sub_container"], [73, 2, 1, "", "find_sub_structure"], [73, 2, 1, "", "flatten_key_chain"], [73, 2, 1, "", "flatten_key_chains"], [73, 2, 1, "", "format_key_chains"], [73, 2, 1, "", "from_disk_as_hdf5"], [73, 2, 1, "", "from_disk_as_json"], [73, 2, 1, "", "from_disk_as_pickled"], [73, 2, 1, "", "from_flat_list"], [73, 2, 1, "", "from_numpy"], [73, 2, 1, "", "gather"], [73, 2, 1, "", "gather_nd"], [73, 2, 1, "", "h5_file_size"], [73, 2, 1, "", "handle_inplace"], [73, 2, 1, "", "has_key"], [73, 2, 1, "", "has_key_chain"], [73, 2, 1, "", "has_nans"], [73, 2, 1, "", "identical"], [73, 2, 1, "", "identical_array_shapes"], [73, 2, 1, "", "identical_configs"], [73, 2, 1, "", "identical_structure"], [73, 2, 1, "", "if_exists"], [73, 2, 1, "", "inplace_update"], [73, 3, 1, "", "ivy"], [73, 2, 1, "", "key_chains_containing"], [73, 2, 1, "", "list_join"], [73, 2, 1, "", "list_stack"], [73, 2, 1, "", "map"], [73, 2, 1, "", "map_conts"], [73, 2, 1, "", "matrix_norm"], [73, 3, 1, "", "max_depth"], [73, 2, 1, "", "maximum"], [73, 2, 1, "", "minimum"], [73, 2, 1, "", "multi_map"], [73, 2, 1, "", "multi_map_in_static_method"], [73, 2, 1, "", "num_arrays"], [73, 2, 1, "", "overwrite_at_key_chain"], [73, 2, 1, "", "overwrite_at_key_chains"], [73, 2, 1, "", "prune_empty"], [73, 2, 1, "", "prune_key_chain"], [73, 2, 1, "", "prune_key_chains"], [73, 2, 1, "", "prune_key_from_key_chains"], [73, 2, 1, "", "prune_keys"], [73, 2, 1, "", "prune_keys_from_key_chains"], [73, 2, 1, "", "reduce"], [73, 2, 1, "", "remove_key_length_limit"], [73, 2, 1, "", "remove_print_limit"], [73, 2, 1, "", "reshape_like"], [73, 2, 1, "", "restructure"], [73, 2, 1, "", "restructure_key_chains"], [73, 2, 1, "", "set_at_key_chain"], [73, 2, 1, "", "set_at_key_chains"], [73, 2, 1, "", "set_at_keys"], [73, 2, 1, "", "set_framework"], [73, 2, 1, "", "set_ivy_backend"], [73, 3, 1, "", "shape"], [73, 3, 1, "", "shapes"], [73, 2, 1, "", "show"], [73, 2, 1, "", "show_sub_container"], [73, 2, 1, "", "shuffle"], [73, 2, 1, "", "shuffle_h5_file"], [73, 2, 1, "", "size_ordered_arrays"], [73, 2, 1, "", "slice_keys"], [73, 2, 1, "", "slice_via_key"], [73, 2, 1, "", "sort_by_key"], [73, 2, 1, "", "split"], [73, 2, 1, "", "stop_gradients"], [73, 2, 1, "", "structural_diff"], [73, 2, 1, "", "to_device"], [73, 2, 1, "", "to_dict"], [73, 2, 1, "", "to_disk_as_hdf5"], [73, 2, 1, "", "to_disk_as_json"], [73, 2, 1, "", "to_disk_as_pickled"], [73, 2, 1, "", "to_flat_list"], [73, 2, 1, "", "to_iterator"], [73, 2, 1, "", "to_iterator_keys"], [73, 2, 1, "", "to_iterator_values"], [73, 2, 1, "", "to_ivy"], [73, 2, 1, "", "to_jsonable"], [73, 2, 1, "", "to_list"], [73, 2, 1, "", "to_multi_dev"], [73, 2, 1, "", "to_native"], [73, 2, 1, "", "to_numpy"], [73, 2, 1, "", "to_raw"], [73, 2, 1, "", "trim_key"], [73, 2, 1, "", "try_kc"], [73, 2, 1, "", "unify"], [73, 2, 1, "", "unstack"], [73, 2, 1, "", "update_config"], [73, 2, 1, "", "vector_norm"], [73, 2, 1, "", "with_default_key_color"], [73, 2, 1, "", "with_entries_as_lists"], [73, 2, 1, "", "with_ivy_backend"], [73, 2, 1, "", "with_key_length_limit"], [73, 2, 1, "", "with_print_indent"], [73, 2, 1, "", "with_print_limit"], [73, 2, 1, "", "with_print_line_spacing"]], "ivy.container.container": [[75, 1, 1, "", "Container"], [76, 1, 1, "", "MultiDevContainer"]], "ivy.container.container.Container": [[75, 2, 1, "", "__add__"], [75, 2, 1, "", "__init__"], [75, 2, 1, "", "__radd__"], [75, 2, 1, "", "arange"], [75, 2, 1, "", "arg_info"], [75, 2, 1, "", "arg_names"], [75, 2, 1, "", "argmax"], [75, 2, 1, "", "argmin"], [75, 2, 1, "", "array"], [75, 2, 1, "", "array_equal"], [75, 2, 1, "", "arrays_equal"], [75, 2, 1, "", "as_ivy_dev"], [75, 2, 1, "", "as_ivy_dtype"], [75, 2, 1, "", "as_native_dev"], [75, 2, 1, "", "as_native_dtype"], [75, 2, 1, "", "assert_supports_inplace"], [75, 2, 1, "", "cache_fn"], [75, 2, 1, "", "clear_mem_on_dev"], [75, 2, 1, "", "clip_matrix_norm"], [75, 2, 1, "", "closest_valid_dtype"], [75, 2, 1, "", "container_types"], [75, 2, 1, "", "conv1d"], [75, 2, 1, "", "conv1d_transpose"], [75, 2, 1, "", "conv2d"], [75, 2, 1, "", "conv2d_transpose"], [75, 2, 1, "", "conv3d"], [75, 2, 1, "", "conv3d_transpose"], [75, 2, 1, "", "copy_array"], [75, 2, 1, "", "cross"], [75, 2, 1, "", "cumprod"], [75, 2, 1, "", "cumsum"], [75, 2, 1, "", "current_backend"], [75, 2, 1, "", "current_backend_str"], [75, 2, 1, "", "default"], [75, 2, 1, "", "default_device"], [75, 2, 1, "", "default_dtype"], [75, 2, 1, "", "default_float_dtype"], [75, 2, 1, "", "default_int_dtype"], [75, 2, 1, "", "depthwise_conv2d"], [75, 2, 1, "", "det"], [75, 2, 1, "", "dev_clone_array"], [75, 2, 1, "", "dev_clone_iter"], [75, 2, 1, "", "dev_clone_nest"], [75, 2, 1, "", "dev_dist_array"], [75, 2, 1, "", "dev_dist_iter"], [75, 2, 1, "", "dev_dist_nest"], [75, 2, 1, "", "dev_unify"], [75, 2, 1, "", "dev_unify_array"], [75, 2, 1, "", "dev_unify_iter"], [75, 2, 1, "", "dev_unify_nest"], [75, 2, 1, "", "dev_util"], [75, 2, 1, "", "diagonal"], [75, 2, 1, "", "dropout"], [75, 2, 1, "", "dtype_bits"], [75, 2, 1, "", "eigh"], [75, 2, 1, "", "eigvalsh"], [75, 2, 1, "", "empty"], [75, 2, 1, "", "execute_with_gradients"], [75, 2, 1, "", "exists"], [75, 2, 1, "", "eye"], [75, 2, 1, "", "floormod"], [75, 2, 1, "", "fourier_encode"], [75, 2, 1, "", "full"], [75, 2, 1, "", "function_supported_dtypes"], [75, 2, 1, "", "function_unsupported_dtypes"], [75, 2, 1, "", "gelu"], [75, 2, 1, "", "get_all_arrays_in_memory"], [75, 2, 1, "", "get_all_ivy_arrays_on_dev"], [75, 2, 1, "", "get_min_base"], [75, 2, 1, "", "get_min_denominator"], [75, 2, 1, "", "get_num_dims"], [75, 2, 1, "", "get_referrers_recursive"], [75, 2, 1, "", "gpu_is_available"], [75, 2, 1, "", "handle_nestable"], [75, 2, 1, "", "handle_out_argument"], [75, 2, 1, "", "indices_where"], [75, 2, 1, "", "infer_device"], [75, 2, 1, "", "infer_dtype"], [75, 2, 1, "", "inplace_arrays_supported"], [75, 2, 1, "", "inplace_decrement"], [75, 2, 1, "", "inplace_increment"], [75, 2, 1, "", "inplace_variables_supported"], [75, 2, 1, "", "inputs_to_native_arrays"], [75, 2, 1, "", "inv"], [75, 2, 1, "", "invalid_dtype"], [75, 2, 1, "", "is_ivy_container"], [75, 2, 1, "", "leaky_relu"], [75, 2, 1, "", "linear"], [75, 2, 1, "", "linspace"], [75, 2, 1, "", "logspace"], [75, 2, 1, "", "lstm_update"], [75, 2, 1, "", "match_kwargs"], [75, 2, 1, "", "matrix_power"], [75, 2, 1, "", "matrix_rank"], [75, 2, 1, "", "matrix_transpose"], [75, 2, 1, "", "multi_head_attention"], [75, 2, 1, "", "multinomial"], [75, 2, 1, "", "multiprocessing"], [75, 2, 1, "", "nonzero"], [75, 2, 1, "", "num_arrays_in_memory"], [75, 2, 1, "", "num_cpu_cores"], [75, 2, 1, "", "num_gpus"], [75, 2, 1, "", "num_ivy_arrays_on_dev"], [75, 2, 1, "", "one_hot"], [75, 2, 1, "", "ones"], [75, 2, 1, "", "outer"], [75, 2, 1, "", "outputs_to_ivy_arrays"], [75, 2, 1, "", "percent_used_mem_on_dev"], [75, 2, 1, "", "pinv"], [75, 2, 1, "", "print_all_arrays_in_memory"], [75, 2, 1, "", "print_all_ivy_arrays_on_dev"], [75, 2, 1, "", "promote_types"], [75, 2, 1, "", "qr"], [75, 2, 1, "", "queue_timeout"], [75, 2, 1, "", "randint"], [75, 2, 1, "", "random_normal"], [75, 2, 1, "", "relu"], [75, 2, 1, "", "scaled_dot_product_attention"], [75, 2, 1, "", "scatter_flat"], [75, 2, 1, "", "scatter_nd"], [75, 2, 1, "", "seed"], [75, 2, 1, "", "set_default_device"], [75, 2, 1, "", "set_default_dtype"], [75, 2, 1, "", "set_default_float_dtype"], [75, 2, 1, "", "set_default_int_dtype"], [75, 2, 1, "", "set_min_base"], [75, 2, 1, "", "set_min_denominator"], [75, 2, 1, "", "set_queue_timeout"], [75, 2, 1, "", "set_shape_array_mode"], [75, 2, 1, "", "set_split_factor"], [75, 2, 1, "", "set_tmp_dir"], [75, 2, 1, "", "set_with_grads"], [75, 2, 1, "", "shape_array_mode"], [75, 2, 1, "", "shape_to_tuple"], [75, 2, 1, "", "sigmoid"], [75, 2, 1, "", "slogdet"], [75, 2, 1, "", "softmax"], [75, 2, 1, "", "solve"], [75, 2, 1, "", "split_factor"], [75, 2, 1, "", "split_func_call"], [75, 2, 1, "", "stable_divide"], [75, 2, 1, "", "stable_pow"], [75, 2, 1, "", "static_acos"], [75, 2, 1, "", "static_acosh"], [75, 2, 1, "", "static_arg_info"], [75, 2, 1, "", "static_arg_names"], [75, 2, 1, "", "static_argmax"], [75, 2, 1, "", "static_argmin"], [75, 2, 1, "", "static_array"], [75, 2, 1, "", "static_array_equal"], [75, 2, 1, "", "static_arrays_equal"], [75, 2, 1, "", "static_as_ivy_dev"], [75, 2, 1, "", "static_as_ivy_dtype"], [75, 2, 1, "", "static_as_native_dev"], [75, 2, 1, "", "static_as_native_dtype"], [75, 2, 1, "", "static_asin"], [75, 2, 1, "", "static_assert_supports_inplace"], [75, 2, 1, "", "static_atan"], [75, 2, 1, "", "static_atan2"], [75, 2, 1, "", "static_atanh"], [75, 2, 1, "", "static_bitwise_and"], [75, 2, 1, "", "static_bitwise_invert"], [75, 2, 1, "", "static_bitwise_left_shift"], [75, 2, 1, "", "static_bitwise_or"], [75, 2, 1, "", "static_bitwise_right_shift"], [75, 2, 1, "", "static_bitwise_xor"], [75, 2, 1, "", "static_cache_fn"], [75, 2, 1, "", "static_ceil"], [75, 2, 1, "", "static_clear_mem_on_dev"], [75, 2, 1, "", "static_clip_matrix_norm"], [75, 2, 1, "", "static_clip_vector_norm"], [75, 2, 1, "", "static_closest_valid_dtype"], [75, 2, 1, "", "static_concat"], [75, 2, 1, "", "static_constant_pad"], [75, 2, 1, "", "static_container_types"], [75, 2, 1, "", "static_conv1d"], [75, 2, 1, "", "static_conv1d_transpose"], [75, 2, 1, "", "static_conv2d"], [75, 2, 1, "", "static_conv2d_transpose"], [75, 2, 1, "", "static_conv3d"], [75, 2, 1, "", "static_conv3d_transpose"], [75, 2, 1, "", "static_copy_array"], [75, 2, 1, "", "static_cos"], [75, 2, 1, "", "static_cosh"], [75, 2, 1, "", "static_cross"], [75, 2, 1, "", "static_cumprod"], [75, 2, 1, "", "static_cumsum"], [75, 2, 1, "", "static_current_backend"], [75, 2, 1, "", "static_current_backend_str"], [75, 2, 1, "", "static_default"], [75, 2, 1, "", "static_default_device"], [75, 2, 1, "", "static_default_dtype"], [75, 2, 1, "", "static_default_float_dtype"], [75, 2, 1, "", "static_default_int_dtype"], [75, 2, 1, "", "static_depthwise_conv2d"], [75, 2, 1, "", "static_det"], [75, 2, 1, "", "static_dev"], [75, 2, 1, "", "static_dev_clone"], [75, 2, 1, "", "static_dev_clone_array"], [75, 2, 1, "", "static_dev_clone_iter"], [75, 2, 1, "", "static_dev_clone_nest"], [75, 2, 1, "", "static_dev_dist"], [75, 2, 1, "", "static_dev_dist_array"], [75, 2, 1, "", "static_dev_dist_iter"], [75, 2, 1, "", "static_dev_dist_nest"], [75, 2, 1, "", "static_dev_unify"], [75, 2, 1, "", "static_dev_unify_array"], [75, 2, 1, "", "static_dev_unify_iter"], [75, 2, 1, "", "static_dev_unify_nest"], [75, 2, 1, "", "static_dev_util"], [75, 2, 1, "", "static_diagonal"], [75, 2, 1, "", "static_dropout"], [75, 2, 1, "", "static_dtype"], [75, 2, 1, "", "static_dtype_bits"], [75, 2, 1, "", "static_eigh"], [75, 2, 1, "", "static_eigvalsh"], [75, 2, 1, "", "static_einops_rearrange"], [75, 2, 1, "", "static_einops_reduce"], [75, 2, 1, "", "static_einops_repeat"], [75, 2, 1, "", "static_einsum"], [75, 2, 1, "", "static_empty"], [75, 2, 1, "", "static_equal"], [75, 2, 1, "", "static_erf"], [75, 2, 1, "", "static_execute_with_gradients"], [75, 2, 1, "", "static_exists"], [75, 2, 1, "", "static_exp"], [75, 2, 1, "", "static_expand_dims"], [75, 2, 1, "", "static_expm1"], [75, 2, 1, "", "static_flip"], [75, 2, 1, "", "static_floor"], [75, 2, 1, "", "static_floor_divide"], [75, 2, 1, "", "static_floormod"], [75, 2, 1, "", "static_fourier_encode"], [75, 2, 1, "", "static_full"], [75, 2, 1, "", "static_function_supported_dtypes"], [75, 2, 1, "", "static_function_unsupported_dtypes"], [75, 2, 1, "", "static_gather"], [75, 2, 1, "", "static_gelu"], [75, 2, 1, "", "static_get_all_arrays_in_memory"], [75, 2, 1, "", "static_get_all_ivy_arrays_on_dev"], [75, 2, 1, "", "static_get_min_base"], [75, 2, 1, "", "static_get_min_denominator"], [75, 2, 1, "", "static_get_num_dims"], [75, 2, 1, "", "static_get_referrers_recursive"], [75, 2, 1, "", "static_gpu_is_available"], [75, 2, 1, "", "static_greater"], [75, 2, 1, "", "static_greater_equal"], [75, 2, 1, "", "static_handle_nestable"], [75, 2, 1, "", "static_handle_out_argument"], [75, 2, 1, "", "static_has_nans"], [75, 2, 1, "", "static_indices_where"], [75, 2, 1, "", "static_infer_device"], [75, 2, 1, "", "static_infer_dtype"], [75, 2, 1, "", "static_inplace_arrays_supported"], [75, 2, 1, "", "static_inplace_decrement"], [75, 2, 1, "", "static_inplace_increment"], [75, 2, 1, "", "static_inplace_update"], [75, 2, 1, "", "static_inplace_variables_supported"], [75, 2, 1, "", "static_inputs_to_native_arrays"], [75, 2, 1, "", "static_inv"], [75, 2, 1, "", "static_invalid_dtype"], [75, 2, 1, "", "static_is_array"], [75, 2, 1, "", "static_is_ivy_array"], [75, 2, 1, "", "static_is_ivy_container"], [75, 2, 1, "", "static_is_native_array"], [75, 2, 1, "", "static_isfinite"], [75, 2, 1, "", "static_isinf"], [75, 2, 1, "", "static_isnan"], [75, 2, 1, "", "static_leaky_relu"], [75, 2, 1, "", "static_less"], [75, 2, 1, "", "static_less_equal"], [75, 2, 1, "", "static_linear"], [75, 2, 1, "", "static_log"], [75, 2, 1, "", "static_log10"], [75, 2, 1, "", "static_log1p"], [75, 2, 1, "", "static_log2"], [75, 2, 1, "", "static_logaddexp"], [75, 2, 1, "", "static_logical_and"], [75, 2, 1, "", "static_logical_not"], [75, 2, 1, "", "static_logical_or"], [75, 2, 1, "", "static_logical_xor"], [75, 2, 1, "", "static_lstm_update"], [75, 2, 1, "", "static_match_kwargs"], [75, 2, 1, "", "static_matmul"], [75, 2, 1, "", "static_matrix_norm"], [75, 2, 1, "", "static_matrix_power"], [75, 2, 1, "", "static_matrix_rank"], [75, 2, 1, "", "static_matrix_transpose"], [75, 2, 1, "", "static_max"], [75, 2, 1, "", "static_maximum"], [75, 2, 1, "", "static_mean"], [75, 2, 1, "", "static_min"], [75, 2, 1, "", "static_minimum"], [75, 2, 1, "", "static_multi_head_attention"], [75, 2, 1, "", "static_multinomial"], [75, 2, 1, "", "static_multiprocessing"], [75, 2, 1, "", "static_negative"], [75, 2, 1, "", "static_nonzero"], [75, 2, 1, "", "static_not_equal"], [75, 2, 1, "", "static_num_arrays_in_memory"], [75, 2, 1, "", "static_num_cpu_cores"], [75, 2, 1, "", "static_num_gpus"], [75, 2, 1, "", "static_num_ivy_arrays_on_dev"], [75, 2, 1, "", "static_one_hot"], [75, 2, 1, "", "static_outer"], [75, 2, 1, "", "static_outputs_to_ivy_arrays"], [75, 2, 1, "", "static_percent_used_mem_on_dev"], [75, 2, 1, "", "static_permute_dims"], [75, 2, 1, "", "static_pinv"], [75, 2, 1, "", "static_positive"], [75, 2, 1, "", "static_pow"], [75, 2, 1, "", "static_print_all_arrays_in_memory"], [75, 2, 1, "", "static_print_all_ivy_arrays_on_dev"], [75, 2, 1, "", "static_prod"], [75, 2, 1, "", "static_promote_types"], [75, 2, 1, "", "static_qr"], [75, 2, 1, "", "static_queue_timeout"], [75, 2, 1, "", "static_random_normal"], [75, 2, 1, "", "static_relu"], [75, 2, 1, "", "static_remainder"], [75, 2, 1, "", "static_repeat"], [75, 2, 1, "", "static_reshape"], [75, 2, 1, "", "static_round"], [75, 2, 1, "", "static_scaled_dot_product_attention"], [75, 2, 1, "", "static_scatter_flat"], [75, 2, 1, "", "static_scatter_nd"], [75, 2, 1, "", "static_seed"], [75, 2, 1, "", "static_set_default_device"], [75, 2, 1, "", "static_set_default_dtype"], [75, 2, 1, "", "static_set_default_float_dtype"], [75, 2, 1, "", "static_set_default_int_dtype"], [75, 2, 1, "", "static_set_min_base"], [75, 2, 1, "", "static_set_min_denominator"], [75, 2, 1, "", "static_set_queue_timeout"], [75, 2, 1, "", "static_set_shape_array_mode"], [75, 2, 1, "", "static_set_split_factor"], [75, 2, 1, "", "static_set_tmp_dir"], [75, 2, 1, "", "static_set_with_grads"], [75, 2, 1, "", "static_shape"], [75, 2, 1, "", "static_shape_array_mode"], [75, 2, 1, "", "static_shape_to_tuple"], [75, 2, 1, "", "static_shuffle"], [75, 2, 1, "", "static_sigmoid"], [75, 2, 1, "", "static_sinh"], [75, 2, 1, "", "static_slogdet"], [75, 2, 1, "", "static_softmax"], [75, 2, 1, "", "static_solve"], [75, 2, 1, "", "static_split"], [75, 2, 1, "", "static_split_factor"], [75, 2, 1, "", "static_split_func_call"], [75, 2, 1, "", "static_sqrt"], [75, 2, 1, "", "static_square"], [75, 2, 1, "", "static_squeeze"], [75, 2, 1, "", "static_stable_divide"], [75, 2, 1, "", "static_stable_pow"], [75, 2, 1, "", "static_stack"], [75, 2, 1, "", "static_std"], [75, 2, 1, "", "static_stop_gradient"], [75, 2, 1, "", "static_sum"], [75, 2, 1, "", "static_supports_inplace"], [75, 2, 1, "", "static_svd"], [75, 2, 1, "", "static_svdvals"], [75, 2, 1, "", "static_swapaxes"], [75, 2, 1, "", "static_tensordot"], [75, 2, 1, "", "static_tile"], [75, 2, 1, "", "static_tmp_dir"], [75, 2, 1, "", "static_to_device"], [75, 2, 1, "", "static_to_list"], [75, 2, 1, "", "static_to_native_arrays_and_back"], [75, 2, 1, "", "static_to_scalar"], [75, 2, 1, "", "static_total_mem_on_dev"], [75, 2, 1, "", "static_tpu_is_available"], [75, 2, 1, "", "static_trace"], [75, 2, 1, "", "static_trunc"], [75, 2, 1, "", "static_try_else_none"], [75, 2, 1, "", "static_type_promote_arrays"], [75, 2, 1, "", "static_unique_all"], [75, 2, 1, "", "static_unique_inverse"], [75, 2, 1, "", "static_unique_values"], [75, 2, 1, "", "static_unset_default_device"], [75, 2, 1, "", "static_unset_default_dtype"], [75, 2, 1, "", "static_unset_default_float_dtype"], [75, 2, 1, "", "static_unset_default_int_dtype"], [75, 2, 1, "", "static_unset_shape_array_mode"], [75, 2, 1, "", "static_unset_with_grads"], [75, 2, 1, "", "static_unstack"], [75, 2, 1, "", "static_used_mem_on_dev"], [75, 2, 1, "", "static_valid_dtype"], [75, 2, 1, "", "static_value_is_nan"], [75, 2, 1, "", "static_var"], [75, 2, 1, "", "static_variable"], [75, 2, 1, "", "static_variable_data"], [75, 2, 1, "", "static_vecdot"], [75, 2, 1, "", "static_vector_norm"], [75, 2, 1, "", "static_vector_to_skew_symmetric_matrix"], [75, 2, 1, "", "static_where"], [75, 2, 1, "", "static_with_grads"], [75, 2, 1, "", "static_zero_pad"], [75, 2, 1, "", "stop_gradient"], [75, 2, 1, "", "supports_inplace"], [75, 2, 1, "", "svd"], [75, 2, 1, "", "svdvals"], [75, 2, 1, "", "tensordot"], [75, 2, 1, "", "tmp_dir"], [75, 2, 1, "", "to_native_arrays_and_back"], [75, 2, 1, "", "to_scalar"], [75, 2, 1, "", "total_mem_on_dev"], [75, 2, 1, "", "tpu_is_available"], [75, 2, 1, "", "trace"], [75, 2, 1, "", "try_else_none"], [75, 2, 1, "", "type_promote_arrays"], [75, 2, 1, "", "unique_all"], [75, 2, 1, "", "unique_inverse"], [75, 2, 1, "", "unique_values"], [75, 2, 1, "", "unset_default_device"], [75, 2, 1, "", "unset_default_dtype"], [75, 2, 1, "", "unset_default_float_dtype"], [75, 2, 1, "", "unset_default_int_dtype"], [75, 2, 1, "", "unset_shape_array_mode"], [75, 2, 1, "", "unset_with_grads"], [75, 2, 1, "", "used_mem_on_dev"], [75, 2, 1, "", "valid_dtype"], [75, 2, 1, "", "value_is_nan"], [75, 2, 1, "", "variable"], [75, 2, 1, "", "variable_data"], [75, 2, 1, "", "vecdot"], [75, 2, 1, "", "vector_to_skew_symmetric_matrix"], [75, 2, 1, "", "where"], [75, 2, 1, "", "with_grads"], [75, 2, 1, "", "zeros"]], "ivy.container.container.MultiDevContainer": [[76, 2, 1, "", "__init__"], [76, 2, 1, "", "at_dev"], [76, 2, 1, "", "at_devs"]], "ivy.container.container_methods": [[371, 4, 1, "", "abs"], [376, 4, 1, "", "acos"], [380, 4, 1, "", "acosh"], [694, 4, 1, "", "adam_step"], [698, 4, 1, "", "adam_update"], [384, 4, 1, "", "add"], [990, 4, 1, "", "all"], [612, 4, 1, "", "all_equal"], [995, 4, 1, "", "any"], [946, 4, 1, "", "argsort"], [181, 4, 1, "", "asarray"], [389, 4, 1, "", "asin"], [393, 4, 1, "", "asinh"], [254, 4, 1, "", "astype"], [398, 4, 1, "", "atan"], [402, 4, 1, "", "atan2"], [406, 4, 1, "", "atanh"], [816, 4, 1, "", "binary_cross_entropy"], [410, 4, 1, "", "bitwise_and"], [414, 4, 1, "", "bitwise_invert"], [418, 4, 1, "", "bitwise_left_shift"], [422, 4, 1, "", "bitwise_or"], [426, 4, 1, "", "bitwise_right_shift"], [430, 4, 1, "", "bitwise_xor"], [259, 4, 1, "", "broadcast_arrays"], [264, 4, 1, "", "broadcast_to"], [269, 4, 1, "", "can_cast"], [434, 4, 1, "", "ceil"], [744, 4, 1, "", "cholesky"], [832, 4, 1, "", "clip"], [623, 4, 1, "", "clip_vector_norm"], [837, 4, 1, "", "concat"], [841, 4, 1, "", "constant_pad"], [438, 4, 1, "", "cos"], [442, 4, 1, "", "cosh"], [821, 4, 1, "", "cross_entropy"], [446, 4, 1, "", "divide"], [278, 4, 1, "", "dtype"], [957, 4, 1, "", "einsum"], [187, 4, 1, "", "empty_like"], [451, 4, 1, "", "equal"], [455, 4, 1, "", "erf"], [459, 4, 1, "", "exp"], [845, 4, 1, "", "expand_dims"], [463, 4, 1, "", "expm1"], [283, 4, 1, "", "finfo"], [849, 4, 1, "", "flip"], [467, 4, 1, "", "floor"], [471, 4, 1, "", "floor_divide"], [195, 4, 1, "", "from_dlpack"], [201, 4, 1, "", "full_like"], [640, 4, 1, "", "gather_nd"], [703, 4, 1, "", "gradient_descent_update"], [475, 4, 1, "", "greater"], [479, 4, 1, "", "greater_equal"], [290, 4, 1, "", "iinfo"], [296, 4, 1, "", "is_float_dtype"], [301, 4, 1, "", "is_int_dtype"], [707, 4, 1, "", "is_variable"], [483, 4, 1, "", "isfinite"], [487, 4, 1, "", "isinf"], [491, 4, 1, "", "isnan"], [711, 4, 1, "", "lamb_update"], [715, 4, 1, "", "lars_update"], [914, 4, 1, "", "layer_norm"], [495, 4, 1, "", "less"], [499, 4, 1, "", "less_equal"], [503, 4, 1, "", "log"], [507, 4, 1, "", "log10"], [511, 4, 1, "", "log1p"], [515, 4, 1, "", "log2"], [519, 4, 1, "", "logaddexp"], [523, 4, 1, "", "logical_and"], [527, 4, 1, "", "logical_not"], [531, 4, 1, "", "logical_or"], [535, 4, 1, "", "logical_xor"], [767, 4, 1, "", "matmul"], [961, 4, 1, "", "max"], [965, 4, 1, "", "mean"], [212, 4, 1, "", "meshgrid"], [969, 4, 1, "", "min"], [541, 4, 1, "", "multiply"], [217, 4, 1, "", "native_array"], [546, 4, 1, "", "negative"], [550, 4, 1, "", "not_equal"], [225, 4, 1, "", "ones_like"], [719, 4, 1, "", "optimizer_update"], [853, 4, 1, "", "permute_dims"], [554, 4, 1, "", "positive"], [558, 4, 1, "", "pow"], [973, 4, 1, "", "prod"], [924, 4, 1, "", "random_uniform"], [562, 4, 1, "", "remainder"], [857, 4, 1, "", "repeat"], [861, 4, 1, "", "reshape"], [307, 4, 1, "", "result_type"], [865, 4, 1, "", "roll"], [566, 4, 1, "", "round"], [570, 4, 1, "", "sign"], [575, 4, 1, "", "sin"], [580, 4, 1, "", "sinh"], [168, 4, 1, "", "softplus"], [951, 4, 1, "", "sort"], [826, 4, 1, "", "sparse_cross_entropy"], [584, 4, 1, "", "sqrt"], [588, 4, 1, "", "square"], [871, 4, 1, "", "squeeze"], [875, 4, 1, "", "stack"], [373, 4, 1, "", "static_abs"], [696, 4, 1, "", "static_adam_step"], [700, 4, 1, "", "static_adam_update"], [386, 4, 1, "", "static_add"], [992, 4, 1, "", "static_all"], [614, 4, 1, "", "static_all_equal"], [997, 4, 1, "", "static_any"], [178, 4, 1, "", "static_arange"], [948, 4, 1, "", "static_argsort"], [183, 4, 1, "", "static_asarray"], [395, 4, 1, "", "static_asinh"], [256, 4, 1, "", "static_astype"], [818, 4, 1, "", "static_binary_cross_entropy"], [261, 4, 1, "", "static_broadcast_arrays"], [266, 4, 1, "", "static_broadcast_to"], [271, 4, 1, "", "static_can_cast"], [746, 4, 1, "", "static_cholesky"], [834, 4, 1, "", "static_clip"], [823, 4, 1, "", "static_cross_entropy"], [448, 4, 1, "", "static_divide"], [189, 4, 1, "", "static_empty_like"], [192, 4, 1, "", "static_eye"], [285, 4, 1, "", "static_finfo"], [197, 4, 1, "", "static_from_dlpack"], [203, 4, 1, "", "static_full_like"], [642, 4, 1, "", "static_gather_nd"], [705, 4, 1, "", "static_gradient_descent_update"], [292, 4, 1, "", "static_iinfo"], [298, 4, 1, "", "static_is_float_dtype"], [303, 4, 1, "", "static_is_int_dtype"], [709, 4, 1, "", "static_is_variable"], [713, 4, 1, "", "static_lamb_update"], [717, 4, 1, "", "static_lars_update"], [916, 4, 1, "", "static_layer_norm"], [206, 4, 1, "", "static_linspace"], [209, 4, 1, "", "static_logspace"], [214, 4, 1, "", "static_meshgrid"], [543, 4, 1, "", "static_multiply"], [219, 4, 1, "", "static_native_array"], [222, 4, 1, "", "static_ones"], [227, 4, 1, "", "static_ones_like"], [721, 4, 1, "", "static_optimizer_update"], [921, 4, 1, "", "static_randint"], [926, 4, 1, "", "static_random_uniform"], [309, 4, 1, "", "static_result_type"], [867, 4, 1, "", "static_roll"], [572, 4, 1, "", "static_sign"], [577, 4, 1, "", "static_sin"], [170, 4, 1, "", "static_softplus"], [953, 4, 1, "", "static_sort"], [828, 4, 1, "", "static_sparse_cross_entropy"], [591, 4, 1, "", "static_subtract"], [596, 4, 1, "", "static_tan"], [601, 4, 1, "", "static_tanh"], [681, 4, 1, "", "static_to_numpy"], [229, 4, 1, "", "static_tril"], [234, 4, 1, "", "static_triu"], [937, 4, 1, "", "static_unique_counts"], [239, 4, 1, "", "static_zeros"], [242, 4, 1, "", "static_zeros_like"], [977, 4, 1, "", "std"], [593, 4, 1, "", "subtract"], [981, 4, 1, "", "sum"], [879, 4, 1, "", "swapaxes"], [598, 4, 1, "", "tan"], [603, 4, 1, "", "tanh"], [883, 4, 1, "", "tile"], [683, 4, 1, "", "to_numpy"], [231, 4, 1, "", "tril"], [236, 4, 1, "", "triu"], [607, 4, 1, "", "trunc"], [939, 4, 1, "", "unique_counts"], [985, 4, 1, "", "var"], [887, 4, 1, "", "zero_pad"], [244, 4, 1, "", "zeros_like"]], "ivy.container.creation": [[78, 1, 1, "", "ContainerWithCreation"]], "ivy.container.creation.ContainerWithCreation": [[78, 2, 1, "", "asarray"], [78, 2, 1, "", "empty_like"], [78, 2, 1, "", "from_dlpack"], [78, 2, 1, "", "full_like"], [78, 2, 1, "", "meshgrid"], [78, 2, 1, "", "native_array"], [78, 2, 1, "", "ones_like"], [78, 2, 1, "", "static_arange"], [78, 2, 1, "", "static_asarray"], [78, 2, 1, "", "static_empty_like"], [78, 2, 1, "", "static_eye"], [78, 2, 1, "", "static_from_dlpack"], [78, 2, 1, "", "static_full_like"], [78, 2, 1, "", "static_linspace"], [78, 2, 1, "", "static_logspace"], [78, 2, 1, "", "static_meshgrid"], [78, 2, 1, "", "static_native_array"], [78, 2, 1, "", "static_ones"], [78, 2, 1, "", "static_ones_like"], [78, 2, 1, "", "static_tril"], [78, 2, 1, "", "static_triu"], [78, 2, 1, "", "static_zeros"], [78, 2, 1, "", "static_zeros_like"], [78, 2, 1, "", "tril"], [78, 2, 1, "", "triu"], [78, 2, 1, "", "zeros_like"]], "ivy.container.data_type": [[80, 1, 1, "", "ContainerWithDataTypes"]], "ivy.container.data_type.ContainerWithDataTypes": [[80, 2, 1, "", "astype"], [80, 2, 1, "", "broadcast_arrays"], [80, 2, 1, "", "broadcast_to"], [80, 2, 1, "", "can_cast"], [80, 2, 1, "", "dtype"], [80, 2, 1, "", "finfo"], [80, 2, 1, "", "iinfo"], [80, 2, 1, "", "is_float_dtype"], [80, 2, 1, "", "is_int_dtype"], [80, 2, 1, "", "result_type"], [80, 2, 1, "", "static_astype"], [80, 2, 1, "", "static_broadcast_arrays"], [80, 2, 1, "", "static_broadcast_to"], [80, 2, 1, "", "static_can_cast"], [80, 2, 1, "", "static_finfo"], [80, 2, 1, "", "static_iinfo"], [80, 2, 1, "", "static_is_float_dtype"], [80, 2, 1, "", "static_is_int_dtype"], [80, 2, 1, "", "static_result_type"]], "ivy.container.device": [[82, 1, 1, "", "ContainerWithDevice"]], "ivy.container.elementwise": [[84, 1, 1, "", "ContainerWithElementwise"]], "ivy.container.elementwise.ContainerWithElementwise": [[84, 2, 1, "", "abs"], [84, 2, 1, "", "acos"], [84, 2, 1, "", "acosh"], [84, 2, 1, "", "add"], [84, 2, 1, "", "asin"], [84, 2, 1, "", "asinh"], [84, 2, 1, "", "atan"], [84, 2, 1, "", "atan2"], [84, 2, 1, "", "atanh"], [84, 2, 1, "", "bitwise_and"], [84, 2, 1, "", "bitwise_invert"], [84, 2, 1, "", "bitwise_left_shift"], [84, 2, 1, "", "bitwise_or"], [84, 2, 1, "", "bitwise_right_shift"], [84, 2, 1, "", "bitwise_xor"], [84, 2, 1, "", "ceil"], [84, 2, 1, "", "cos"], [84, 2, 1, "", "cosh"], [84, 2, 1, "", "divide"], [84, 2, 1, "", "equal"], [84, 2, 1, "", "erf"], [84, 2, 1, "", "exp"], [84, 2, 1, "", "expm1"], [84, 2, 1, "", "floor"], [84, 2, 1, "", "floor_divide"], [84, 2, 1, "", "greater"], [84, 2, 1, "", "greater_equal"], [84, 2, 1, "", "isfinite"], [84, 2, 1, "", "isinf"], [84, 2, 1, "", "isnan"], [84, 2, 1, "", "less"], [84, 2, 1, "", "less_equal"], [84, 2, 1, "", "log"], [84, 2, 1, "", "log10"], [84, 2, 1, "", "log1p"], [84, 2, 1, "", "log2"], [84, 2, 1, "", "logaddexp"], [84, 2, 1, "", "logical_and"], [84, 2, 1, "", "logical_not"], [84, 2, 1, "", "logical_or"], [84, 2, 1, "", "logical_xor"], [84, 2, 1, "", "multiply"], [84, 2, 1, "", "negative"], [84, 2, 1, "", "not_equal"], [84, 2, 1, "", "positive"], [84, 2, 1, "", "pow"], [84, 2, 1, "", "remainder"], [84, 2, 1, "", "round"], [84, 2, 1, "", "sign"], [84, 2, 1, "", "sin"], [84, 2, 1, "", "sinh"], [84, 2, 1, "", "sqrt"], [84, 2, 1, "", "square"], [84, 2, 1, "", "static_abs"], [84, 2, 1, "", "static_add"], [84, 2, 1, "", "static_asinh"], [84, 2, 1, "", "static_divide"], [84, 2, 1, "", "static_multiply"], [84, 2, 1, "", "static_sign"], [84, 2, 1, "", "static_sin"], [84, 2, 1, "", "static_subtract"], [84, 2, 1, "", "static_tan"], [84, 2, 1, "", "static_tanh"], [84, 2, 1, "", "subtract"], [84, 2, 1, "", "tan"], [84, 2, 1, "", "tanh"], [84, 2, 1, "", "trunc"]], "ivy.container.general": [[86, 1, 1, "", "ContainerWithGeneral"]], "ivy.container.general.ContainerWithGeneral": [[86, 2, 1, "", "all_equal"], [86, 2, 1, "", "clip_vector_norm"], [86, 2, 1, "", "gather_nd"], [86, 2, 1, "", "static_all_equal"], [86, 2, 1, "", "static_gather_nd"], [86, 2, 1, "", "static_to_numpy"], [86, 2, 1, "", "to_numpy"]], "ivy.container.gradients": [[88, 1, 1, "", "ContainerWithGradients"]], "ivy.container.gradients.ContainerWithGradients": [[88, 2, 1, "", "adam_step"], [88, 2, 1, "", "adam_update"], [88, 2, 1, "", "gradient_descent_update"], [88, 2, 1, "", "is_variable"], [88, 2, 1, "", "lamb_update"], [88, 2, 1, "", "lars_update"], [88, 2, 1, "", "optimizer_update"], [88, 2, 1, "", "static_adam_step"], [88, 2, 1, "", "static_adam_update"], [88, 2, 1, "", "static_gradient_descent_update"], [88, 2, 1, "", "static_is_variable"], [88, 2, 1, "", "static_lamb_update"], [88, 2, 1, "", "static_lars_update"], [88, 2, 1, "", "static_optimizer_update"]], "ivy.container.image": [[90, 1, 1, "", "ContainerWithImage"]], "ivy.container.layers": [[92, 1, 1, "", "ContainerWithLayers"]], "ivy.container.linear_algebra": [[94, 1, 1, "", "ContainerWithLinearAlgebra"]], "ivy.container.linear_algebra.ContainerWithLinearAlgebra": [[94, 2, 1, "", "cholesky"], [94, 2, 1, "", "matmul"], [94, 2, 1, "", "static_cholesky"]], "ivy.container.losses": [[96, 1, 1, "", "ContainerWithLosses"]], "ivy.container.losses.ContainerWithLosses": [[96, 2, 1, "", "binary_cross_entropy"], [96, 2, 1, "", "cross_entropy"], [96, 2, 1, "", "sparse_cross_entropy"], [96, 2, 1, "", "static_binary_cross_entropy"], [96, 2, 1, "", "static_cross_entropy"], [96, 2, 1, "", "static_sparse_cross_entropy"]], "ivy.container.manipulation": [[98, 1, 1, "", "ContainerWithManipulation"]], "ivy.container.manipulation.ContainerWithManipulation": [[98, 2, 1, "", "clip"], [98, 2, 1, "", "concat"], [98, 2, 1, "", "constant_pad"], [98, 2, 1, "", "expand_dims"], [98, 2, 1, "", "flip"], [98, 2, 1, "", "permute_dims"], [98, 2, 1, "", "repeat"], [98, 2, 1, "", "reshape"], [98, 2, 1, "", "roll"], [98, 2, 1, "", "squeeze"], [98, 2, 1, "", "stack"], [98, 2, 1, "", "static_clip"], [98, 2, 1, "", "static_roll"], [98, 2, 1, "", "swapaxes"], [98, 2, 1, "", "tile"], [98, 2, 1, "", "zero_pad"]], "ivy.container.norms": [[100, 1, 1, "", "ContainerWithNorms"]], "ivy.container.norms.ContainerWithNorms": [[100, 2, 1, "", "layer_norm"], [100, 2, 1, "", "static_layer_norm"]], "ivy.container.random": [[102, 1, 1, "", "ContainerWithRandom"]], "ivy.container.random.ContainerWithRandom": [[102, 2, 1, "", "random_uniform"], [102, 2, 1, "", "static_randint"], [102, 2, 1, "", "static_random_uniform"]], "ivy.container.searching": [[104, 1, 1, "", "ContainerWithSearching"]], "ivy.container.set": [[106, 1, 1, "", "ContainerWithSet"]], "ivy.container.set.ContainerWithSet": [[106, 2, 1, "", "static_unique_counts"], [106, 2, 1, "", "unique_counts"]], "ivy.container.sorting": [[108, 1, 1, "", "ContainerWithSorting"]], "ivy.container.sorting.ContainerWithSorting": [[108, 2, 1, "", "argsort"], [108, 2, 1, "", "sort"], [108, 2, 1, "", "static_argsort"], [108, 2, 1, "", "static_sort"]], "ivy.container.statistical": [[110, 1, 1, "", "ContainerWithStatistical"]], "ivy.container.statistical.ContainerWithStatistical": [[110, 2, 1, "", "einsum"], [110, 2, 1, "", "max"], [110, 2, 1, "", "mean"], [110, 2, 1, "", "min"], [110, 2, 1, "", "prod"], [110, 2, 1, "", "std"], [110, 2, 1, "", "sum"], [110, 2, 1, "", "var"]], "ivy.container.utility": [[112, 1, 1, "", "ContainerWithUtility"]], "ivy.container.utility.ContainerWithUtility": [[112, 2, 1, "", "all"], [112, 2, 1, "", "any"], [112, 2, 1, "", "static_all"], [112, 2, 1, "", "static_any"]], "ivy.container.wrapping": [[114, 4, 1, "", "add_ivy_container_instance_methods"]], "ivy.func_wrapper": [[151, 4, 1, "", "handle_nestable"], [152, 4, 1, "", "handle_out_argument"], [153, 4, 1, "", "infer_device"], [154, 4, 1, "", "infer_dtype"], [155, 4, 1, "", "inputs_to_ivy_arrays"], [156, 4, 1, "", "inputs_to_native_arrays"], [157, 4, 1, "", "outputs_to_ivy_arrays"], [158, 4, 1, "", "to_native_arrays_and_back"]], "ivy.functional.ivy": [[160, 0, 0, "-", "activations"], [172, 0, 0, "-", "compilation"], [174, 0, 0, "-", "constants"], [175, 0, 0, "-", "creation"], [246, 0, 0, "-", "data_type"], [318, 0, 0, "-", "device"], [368, 0, 0, "-", "elementwise"], [609, 0, 0, "-", "general"], [690, 0, 0, "-", "gradients"], [728, 0, 0, "-", "layers"], [741, 0, 0, "-", "linear_algebra"], [813, 0, 0, "-", "losses"], [829, 0, 0, "-", "manipulation"], [889, 0, 0, "-", "meta"], [893, 0, 0, "-", "nest"], [911, 0, 0, "-", "norms"], [917, 0, 0, "-", "random"], [929, 0, 0, "-", "searching"], [934, 0, 0, "-", "set"], [943, 0, 0, "-", "sorting"], [954, 0, 0, "-", "statistical"], [987, 0, 0, "-", "utility"]], "ivy.functional.ivy.activations": [[161, 4, 1, "", "gelu"], [162, 4, 1, "", "leaky_relu"], [163, 4, 1, "", "relu"], [164, 4, 1, "", "sigmoid"], [165, 4, 1, "", "softmax"], [169, 4, 1, "", "softplus"], [171, 4, 1, "", "tanh"]], "ivy.functional.ivy.compilation": [[173, 4, 1, "", "compile"]], "ivy.functional.ivy.constants": [[174, 5, 1, "", "e"], [174, 5, 1, "", "inf"], [174, 5, 1, "", "nan"], [174, 5, 1, "", "newaxis"], [174, 5, 1, "", "pi"]], "ivy.functional.ivy.creation": [[177, 4, 1, "", "arange"], [175, 4, 1, "", "array"], [182, 4, 1, "", "asarray"], [184, 4, 1, "", "empty"], [188, 4, 1, "", "empty_like"], [191, 4, 1, "", "eye"], [196, 4, 1, "", "from_dlpack"], [198, 4, 1, "", "full"], [202, 4, 1, "", "full_like"], [205, 4, 1, "", "linspace"], [208, 4, 1, "", "logspace"], [213, 4, 1, "", "meshgrid"], [218, 4, 1, "", "native_array"], [221, 4, 1, "", "ones"], [226, 4, 1, "", "ones_like"], [232, 4, 1, "", "tril"], [237, 4, 1, "", "triu"], [240, 4, 1, "", "zeros"], [245, 4, 1, "", "zeros_like"]], "ivy.functional.ivy.data_type": [[246, 1, 1, "", "DefaultDtype"], [246, 1, 1, "", "DefaultFloatDtype"], [246, 1, 1, "", "DefaultIntDtype"], [250, 4, 1, "", "as_ivy_dtype"], [251, 4, 1, "", "as_native_dtype"], [255, 4, 1, "", "astype"], [260, 4, 1, "", "broadcast_arrays"], [265, 4, 1, "", "broadcast_to"], [270, 4, 1, "", "can_cast"], [272, 4, 1, "", "closest_valid_dtype"], [273, 4, 1, "", "default_dtype"], [274, 4, 1, "", "default_float_dtype"], [275, 4, 1, "", "default_int_dtype"], [279, 4, 1, "", "dtype"], [280, 4, 1, "", "dtype_bits"], [284, 4, 1, "", "finfo"], [286, 4, 1, "", "function_supported_dtypes"], [287, 4, 1, "", "function_unsupported_dtypes"], [291, 4, 1, "", "iinfo"], [293, 4, 1, "", "invalid_dtype"], [297, 4, 1, "", "is_float_dtype"], [302, 4, 1, "", "is_int_dtype"], [304, 4, 1, "", "promote_types"], [308, 4, 1, "", "result_type"], [310, 4, 1, "", "set_default_dtype"], [311, 4, 1, "", "set_default_float_dtype"], [312, 4, 1, "", "set_default_int_dtype"], [313, 4, 1, "", "type_promote_arrays"], [314, 4, 1, "", "unset_default_dtype"], [315, 4, 1, "", "unset_default_float_dtype"], [316, 4, 1, "", "unset_default_int_dtype"], [317, 4, 1, "", "valid_dtype"]], "ivy.functional.ivy.data_type.DefaultDtype": [[246, 2, 1, "", "__init__"]], "ivy.functional.ivy.data_type.DefaultFloatDtype": [[246, 2, 1, "", "__init__"]], "ivy.functional.ivy.data_type.DefaultIntDtype": [[246, 2, 1, "", "__init__"]], "ivy.functional.ivy.device": [[318, 1, 1, "", "DefaultDevice"], [320, 1, 1, "", "DevClonedItem"], [321, 1, 1, "", "DevClonedIter"], [322, 1, 1, "", "DevClonedNest"], [323, 1, 1, "", "DevDistItem"], [324, 1, 1, "", "DevDistIter"], [325, 1, 1, "", "DevDistNest"], [318, 1, 1, "", "DevManager"], [327, 1, 1, "", "DevMapper"], [328, 1, 1, "", "DevMapperMultiProc"], [318, 1, 1, "", "MultiDev"], [330, 1, 1, "", "MultiDevItem"], [331, 1, 1, "", "MultiDevIter"], [332, 1, 1, "", "MultiDevNest"], [333, 1, 1, "", "Profiler"], [334, 4, 1, "", "as_ivy_dev"], [335, 4, 1, "", "as_native_dev"], [336, 4, 1, "", "clear_mem_on_dev"], [337, 4, 1, "", "default_device"], [338, 4, 1, "", "dev"], [339, 4, 1, "", "dev_clone"], [340, 4, 1, "", "dev_clone_array"], [341, 4, 1, "", "dev_clone_iter"], [342, 4, 1, "", "dev_clone_nest"], [343, 4, 1, "", "dev_dist"], [344, 4, 1, "", "dev_dist_array"], [345, 4, 1, "", "dev_dist_iter"], [346, 4, 1, "", "dev_dist_nest"], [347, 4, 1, "", "dev_unify"], [348, 4, 1, "", "dev_unify_array"], [349, 4, 1, "", "dev_unify_iter"], [350, 4, 1, "", "dev_unify_nest"], [351, 4, 1, "", "dev_util"], [352, 4, 1, "", "get_all_ivy_arrays_on_dev"], [353, 4, 1, "", "gpu_is_available"], [354, 4, 1, "", "num_cpu_cores"], [355, 4, 1, "", "num_gpus"], [356, 4, 1, "", "num_ivy_arrays_on_dev"], [357, 4, 1, "", "percent_used_mem_on_dev"], [358, 4, 1, "", "print_all_ivy_arrays_on_dev"], [359, 4, 1, "", "set_default_device"], [360, 4, 1, "", "set_split_factor"], [361, 4, 1, "", "split_factor"], [362, 4, 1, "", "split_func_call"], [363, 4, 1, "", "to_device"], [364, 4, 1, "", "total_mem_on_dev"], [365, 4, 1, "", "tpu_is_available"], [366, 4, 1, "", "unset_default_device"], [367, 4, 1, "", "used_mem_on_dev"]], "ivy.functional.ivy.device.DefaultDevice": [[318, 2, 1, "", "__enter__"], [318, 2, 1, "", "__exit__"], [318, 2, 1, "", "__init__"]], "ivy.functional.ivy.device.DevManager": [[318, 2, 1, "", "__init__"], [318, 2, 1, "", "da_tune_step"], [318, 3, 1, "", "dim_size"], [318, 2, 1, "", "ds_tune_step"], [318, 2, 1, "", "map"], [318, 2, 1, "", "repeated_config_check"], [318, 3, 1, "", "tune_step"], [318, 3, 1, "", "tuned"]], "ivy.functional.ivy.device.DevMapper": [[327, 2, 1, "", "__init__"], [327, 2, 1, "", "map"]], "ivy.functional.ivy.device.DevMapperMultiProc": [[328, 2, 1, "", "__init__"]], "ivy.functional.ivy.device.MultiDev": [[318, 2, 1, "", "__init__"]], "ivy.functional.ivy.device.MultiDevItem": [[330, 2, 1, "", "__init__"], [330, 2, 1, "", "items"], [330, 2, 1, "", "keys"], [330, 3, 1, "", "shape"], [330, 2, 1, "", "values"]], "ivy.functional.ivy.device.MultiDevIter": [[331, 2, 1, "", "__init__"], [331, 2, 1, "", "at_dev"], [331, 2, 1, "", "at_devs"]], "ivy.functional.ivy.device.MultiDevNest": [[332, 2, 1, "", "__init__"], [332, 2, 1, "", "at_dev"]], "ivy.functional.ivy.device.Profiler": [[333, 2, 1, "", "__init__"], [333, 2, 1, "", "start"], [333, 2, 1, "", "stop"]], "ivy.functional.ivy.elementwise": [[372, 4, 1, "", "abs"], [377, 4, 1, "", "acos"], [381, 4, 1, "", "acosh"], [385, 4, 1, "", "add"], [390, 4, 1, "", "asin"], [394, 4, 1, "", "asinh"], [399, 4, 1, "", "atan"], [403, 4, 1, "", "atan2"], [407, 4, 1, "", "atanh"], [411, 4, 1, "", "bitwise_and"], [415, 4, 1, "", "bitwise_invert"], [419, 4, 1, "", "bitwise_left_shift"], [423, 4, 1, "", "bitwise_or"], [427, 4, 1, "", "bitwise_right_shift"], [431, 4, 1, "", "bitwise_xor"], [435, 4, 1, "", "ceil"], [439, 4, 1, "", "cos"], [443, 4, 1, "", "cosh"], [447, 4, 1, "", "divide"], [452, 4, 1, "", "equal"], [456, 4, 1, "", "erf"], [460, 4, 1, "", "exp"], [464, 4, 1, "", "expm1"], [468, 4, 1, "", "floor"], [472, 4, 1, "", "floor_divide"], [476, 4, 1, "", "greater"], [480, 4, 1, "", "greater_equal"], [484, 4, 1, "", "isfinite"], [488, 4, 1, "", "isinf"], [492, 4, 1, "", "isnan"], [496, 4, 1, "", "less"], [500, 4, 1, "", "less_equal"], [504, 4, 1, "", "log"], [508, 4, 1, "", "log10"], [512, 4, 1, "", "log1p"], [516, 4, 1, "", "log2"], [520, 4, 1, "", "logaddexp"], [524, 4, 1, "", "logical_and"], [528, 4, 1, "", "logical_not"], [532, 4, 1, "", "logical_or"], [536, 4, 1, "", "logical_xor"], [537, 4, 1, "", "maximum"], [538, 4, 1, "", "minimum"], [542, 4, 1, "", "multiply"], [547, 4, 1, "", "negative"], [551, 4, 1, "", "not_equal"], [555, 4, 1, "", "positive"], [559, 4, 1, "", "pow"], [563, 4, 1, "", "remainder"], [567, 4, 1, "", "round"], [571, 4, 1, "", "sign"], [576, 4, 1, "", "sin"], [581, 4, 1, "", "sinh"], [585, 4, 1, "", "sqrt"], [589, 4, 1, "", "square"], [594, 4, 1, "", "subtract"], [599, 4, 1, "", "tan"], [604, 4, 1, "", "tanh"], [608, 4, 1, "", "trunc"]], "ivy.functional.ivy.general": [[613, 4, 1, "", "all_equal"], [615, 4, 1, "", "arg_info"], [616, 4, 1, "", "arg_names"], [617, 4, 1, "", "array_equal"], [618, 4, 1, "", "arrays_equal"], [619, 4, 1, "", "assert_supports_inplace"], [620, 4, 1, "", "cache_fn"], [621, 4, 1, "", "clip_matrix_norm"], [624, 4, 1, "", "clip_vector_norm"], [625, 4, 1, "", "container_types"], [626, 4, 1, "", "copy_array"], [627, 4, 1, "", "cumprod"], [628, 4, 1, "", "cumsum"], [629, 4, 1, "", "current_backend_str"], [630, 4, 1, "", "default"], [631, 4, 1, "", "einops_rearrange"], [632, 4, 1, "", "einops_reduce"], [633, 4, 1, "", "einops_repeat"], [634, 4, 1, "", "exists"], [635, 4, 1, "", "floormod"], [636, 4, 1, "", "fourier_encode"], [637, 4, 1, "", "gather"], [641, 4, 1, "", "gather_nd"], [643, 4, 1, "", "get_all_arrays_in_memory"], [644, 4, 1, "", "get_min_base"], [645, 4, 1, "", "get_min_denominator"], [646, 4, 1, "", "get_num_dims"], [647, 4, 1, "", "get_referrers_recursive"], [648, 4, 1, "", "has_nans"], [649, 4, 1, "", "indices_where"], [650, 4, 1, "", "inplace_arrays_supported"], [651, 4, 1, "", "inplace_decrement"], [652, 4, 1, "", "inplace_increment"], [653, 4, 1, "", "inplace_update"], [654, 4, 1, "", "inplace_variables_supported"], [655, 4, 1, "", "is_array"], [656, 4, 1, "", "is_ivy_array"], [657, 4, 1, "", "is_ivy_container"], [658, 4, 1, "", "is_native_array"], [659, 4, 1, "", "match_kwargs"], [660, 4, 1, "", "multiprocessing"], [661, 4, 1, "", "num_arrays_in_memory"], [662, 4, 1, "", "one_hot"], [663, 4, 1, "", "print_all_arrays_in_memory"], [664, 4, 1, "", "queue_timeout"], [665, 4, 1, "", "scatter_flat"], [666, 4, 1, "", "scatter_nd"], [667, 4, 1, "", "set_min_base"], [668, 4, 1, "", "set_min_denominator"], [669, 4, 1, "", "set_queue_timeout"], [670, 4, 1, "", "set_shape_array_mode"], [671, 4, 1, "", "set_tmp_dir"], [672, 4, 1, "", "shape"], [673, 4, 1, "", "shape_array_mode"], [674, 4, 1, "", "shape_to_tuple"], [675, 4, 1, "", "stable_divide"], [676, 4, 1, "", "stable_pow"], [677, 4, 1, "", "supports_inplace"], [678, 4, 1, "", "tmp_dir"], [679, 4, 1, "", "to_list"], [684, 4, 1, "", "to_numpy"], [685, 4, 1, "", "to_scalar"], [686, 4, 1, "", "try_else_none"], [687, 4, 1, "", "unset_shape_array_mode"], [688, 4, 1, "", "unstack"], [689, 4, 1, "", "value_is_nan"]], "ivy.functional.ivy.gradients": [[690, 1, 1, "", "GradientTracking"], [695, 4, 1, "", "adam_step"], [699, 4, 1, "", "adam_update"], [701, 4, 1, "", "execute_with_gradients"], [704, 4, 1, "", "gradient_descent_update"], [708, 4, 1, "", "is_variable"], [712, 4, 1, "", "lamb_update"], [716, 4, 1, "", "lars_update"], [720, 4, 1, "", "optimizer_update"], [722, 4, 1, "", "set_with_grads"], [723, 4, 1, "", "stop_gradient"], [724, 4, 1, "", "unset_with_grads"], [725, 4, 1, "", "variable"], [726, 4, 1, "", "variable_data"], [727, 4, 1, "", "with_grads"]], "ivy.functional.ivy.gradients.GradientTracking": [[690, 2, 1, "", "__init__"]], "ivy.functional.ivy.layers": [[729, 4, 1, "", "conv1d"], [730, 4, 1, "", "conv1d_transpose"], [731, 4, 1, "", "conv2d"], [732, 4, 1, "", "conv2d_transpose"], [733, 4, 1, "", "conv3d"], [734, 4, 1, "", "conv3d_transpose"], [735, 4, 1, "", "depthwise_conv2d"], [736, 4, 1, "", "dropout"], [737, 4, 1, "", "linear"], [738, 4, 1, "", "lstm_update"], [739, 4, 1, "", "multi_head_attention"], [740, 4, 1, "", "scaled_dot_product_attention"]], "ivy.functional.ivy.linear_algebra": [[745, 4, 1, "", "cholesky"], [749, 4, 1, "", "cross"], [752, 4, 1, "", "det"], [755, 4, 1, "", "diagonal"], [758, 4, 1, "", "eigh"], [761, 4, 1, "", "eigvalsh"], [764, 4, 1, "", "inv"], [768, 4, 1, "", "matmul"], [771, 4, 1, "", "matrix_norm"], [772, 4, 1, "", "matrix_power"], [775, 4, 1, "", "matrix_rank"], [778, 4, 1, "", "matrix_transpose"], [781, 4, 1, "", "outer"], [784, 4, 1, "", "pinv"], [787, 4, 1, "", "qr"], [788, 4, 1, "", "slogdet"], [791, 4, 1, "", "solve"], [794, 4, 1, "", "svd"], [797, 4, 1, "", "svdvals"], [800, 4, 1, "", "tensordot"], [803, 4, 1, "", "trace"], [806, 4, 1, "", "vecdot"], [809, 4, 1, "", "vector_norm"], [812, 4, 1, "", "vector_to_skew_symmetric_matrix"]], "ivy.functional.ivy.losses": [[817, 4, 1, "", "binary_cross_entropy"], [822, 4, 1, "", "cross_entropy"], [827, 4, 1, "", "sparse_cross_entropy"]], "ivy.functional.ivy.manipulation": [[833, 4, 1, "", "clip"], [838, 4, 1, "", "concat"], [842, 4, 1, "", "constant_pad"], [846, 4, 1, "", "expand_dims"], [850, 4, 1, "", "flip"], [854, 4, 1, "", "permute_dims"], [858, 4, 1, "", "repeat"], [862, 4, 1, "", "reshape"], [866, 4, 1, "", "roll"], [868, 4, 1, "", "split"], [872, 4, 1, "", "squeeze"], [876, 4, 1, "", "stack"], [880, 4, 1, "", "swapaxes"], [884, 4, 1, "", "tile"], [888, 4, 1, "", "zero_pad"]], "ivy.functional.ivy.meta": [[890, 4, 1, "", "fomaml_step"], [891, 4, 1, "", "maml_step"], [892, 4, 1, "", "reptile_step"]], "ivy.functional.ivy.nest": [[894, 4, 1, "", "all_nested_indices"], [895, 4, 1, "", "copy_nest"], [896, 4, 1, "", "index_nest"], [897, 4, 1, "", "insert_into_nest_at_index"], [898, 4, 1, "", "insert_into_nest_at_indices"], [899, 4, 1, "", "map"], [900, 4, 1, "", "map_nest_at_index"], [901, 4, 1, "", "map_nest_at_indices"], [902, 4, 1, "", "multi_index_nest"], [903, 4, 1, "", "nested_any"], [904, 4, 1, "", "nested_indices_where"], [905, 4, 1, "", "nested_map"], [906, 4, 1, "", "nested_multi_map"], [907, 4, 1, "", "prune_nest_at_index"], [908, 4, 1, "", "prune_nest_at_indices"], [909, 4, 1, "", "set_nest_at_index"], [910, 4, 1, "", "set_nest_at_indices"]], "ivy.functional.ivy.norms": [[915, 4, 1, "", "layer_norm"]], "ivy.functional.ivy.random": [[918, 4, 1, "", "multinomial"], [920, 4, 1, "", "randint"], [922, 4, 1, "", "random_normal"], [925, 4, 1, "", "random_uniform"], [927, 4, 1, "", "seed"], [928, 4, 1, "", "shuffle"]], "ivy.functional.ivy.searching": [[930, 4, 1, "", "argmax"], [931, 4, 1, "", "argmin"], [932, 4, 1, "", "nonzero"], [933, 4, 1, "", "where"]], "ivy.functional.ivy.set": [[935, 4, 1, "", "unique_all"], [940, 4, 1, "", "unique_counts"], [941, 4, 1, "", "unique_inverse"], [942, 4, 1, "", "unique_values"]], "ivy.functional.ivy.sorting": [[947, 4, 1, "", "argsort"], [952, 4, 1, "", "sort"]], "ivy.functional.ivy.statistical": [[958, 4, 1, "", "einsum"], [962, 4, 1, "", "max"], [966, 4, 1, "", "mean"], [970, 4, 1, "", "min"], [974, 4, 1, "", "prod"], [978, 4, 1, "", "std"], [982, 4, 1, "", "sum"], [986, 4, 1, "", "var"]], "ivy.functional.ivy.utility": [[991, 4, 1, "", "all"], [996, 4, 1, "", "any"]], "ivy.inspection": [[1002, 4, 1, "", "add_array_specs"], [1003, 4, 1, "", "fn_array_spec"]], "ivy.stateful": [[1005, 0, 0, "-", "activations"], [1008, 0, 0, "-", "converters"], [1010, 0, 0, "-", "initializers"], [1019, 0, 0, "-", "layers"], [1031, 0, 0, "-", "module"], [1033, 0, 0, "-", "norms"], [1035, 0, 0, "-", "optimizers"], [1041, 0, 0, "-", "sequential"]], "ivy.stateful.activations": [[1006, 1, 1, "", "GEGLU"], [1007, 1, 1, "", "GELU"]], "ivy.stateful.activations.GEGLU": [[1006, 2, 1, "", "__init__"]], "ivy.stateful.activations.GELU": [[1007, 2, 1, "", "__init__"]], "ivy.stateful.converters": [[1009, 4, 1, "", "to_ivy_module"]], "ivy.stateful.initializers": [[1010, 1, 1, "", "Constant"], [1012, 1, 1, "", "FirstLayerSiren"], [1013, 1, 1, "", "GlorotUniform"], [1010, 1, 1, "", "KaimingNormal"], [1015, 1, 1, "", "Ones"], [1016, 1, 1, "", "Siren"], [1010, 1, 1, "", "Uniform"], [1018, 1, 1, "", "Zeros"]], "ivy.stateful.initializers.Constant": [[1010, 2, 1, "", "__init__"], [1010, 2, 1, "", "create_variables"]], "ivy.stateful.initializers.FirstLayerSiren": [[1012, 2, 1, "", "__init__"]], "ivy.stateful.initializers.GlorotUniform": [[1013, 2, 1, "", "__init__"]], "ivy.stateful.initializers.KaimingNormal": [[1010, 2, 1, "", "__init__"], [1010, 2, 1, "", "create_variables"]], "ivy.stateful.initializers.Ones": [[1015, 2, 1, "", "__init__"]], "ivy.stateful.initializers.Siren": [[1016, 2, 1, "", "__init__"]], "ivy.stateful.initializers.Uniform": [[1010, 2, 1, "", "__init__"], [1010, 2, 1, "", "create_variables"]], "ivy.stateful.initializers.Zeros": [[1018, 2, 1, "", "__init__"]], "ivy.stateful.layers": [[1020, 1, 1, "", "Conv1D"], [1021, 1, 1, "", "Conv1DTranspose"], [1022, 1, 1, "", "Conv2D"], [1023, 1, 1, "", "Conv2DTranspose"], [1024, 1, 1, "", "Conv3D"], [1025, 1, 1, "", "Conv3DTranspose"], [1026, 1, 1, "", "DepthwiseConv2D"], [1027, 1, 1, "", "Dropout"], [1028, 1, 1, "", "LSTM"], [1029, 1, 1, "", "Linear"], [1030, 1, 1, "", "MultiHeadAttention"]], "ivy.stateful.layers.Conv1D": [[1020, 2, 1, "", "__init__"]], "ivy.stateful.layers.Conv1DTranspose": [[1021, 2, 1, "", "__init__"]], "ivy.stateful.layers.Conv2D": [[1022, 2, 1, "", "__init__"]], "ivy.stateful.layers.Conv2DTranspose": [[1023, 2, 1, "", "__init__"]], "ivy.stateful.layers.Conv3D": [[1024, 2, 1, "", "__init__"]], "ivy.stateful.layers.Conv3DTranspose": [[1025, 2, 1, "", "__init__"]], "ivy.stateful.layers.DepthwiseConv2D": [[1026, 2, 1, "", "__init__"]], "ivy.stateful.layers.Dropout": [[1027, 2, 1, "", "__init__"]], "ivy.stateful.layers.LSTM": [[1028, 2, 1, "", "__init__"], [1028, 2, 1, "", "get_initial_state"]], "ivy.stateful.layers.Linear": [[1029, 2, 1, "", "__init__"]], "ivy.stateful.layers.MultiHeadAttention": [[1030, 2, 1, "", "__init__"]], "ivy.stateful.module": [[1032, 1, 1, "", "Module"]], "ivy.stateful.module.Module": [[1032, 2, 1, "", "__init__"], [1032, 2, 1, "", "build"], [1032, 3, 1, "", "build_mode"], [1032, 3, 1, "", "built"], [1032, 2, 1, "", "check_submod_rets"], [1032, 2, 1, "", "get_mod_key"], [1032, 2, 1, "", "mod_depth"], [1032, 2, 1, "", "mod_height"], [1032, 2, 1, "", "mod_with_top_mod_key_chain"], [1032, 2, 1, "", "save_weights"], [1032, 2, 1, "", "show_mod_in_top_mod"], [1032, 2, 1, "", "show_structure"], [1032, 2, 1, "", "show_v_in_top_v"], [1032, 2, 1, "", "sub_mods"], [1032, 2, 1, "", "track_submod_call_order"], [1032, 2, 1, "", "track_submod_rets"], [1032, 2, 1, "", "v_with_top_v_key_chains"]], "ivy.stateful.norms": [[1034, 1, 1, "", "LayerNorm"]], "ivy.stateful.norms.LayerNorm": [[1034, 2, 1, "", "__init__"]], "ivy.stateful.optimizers": [[1036, 1, 1, "", "Adam"], [1037, 1, 1, "", "LAMB"], [1038, 1, 1, "", "LARS"], [1039, 1, 1, "", "Optimizer"], [1040, 1, 1, "", "SGD"]], "ivy.stateful.optimizers.Adam": [[1036, 2, 1, "", "__init__"], [1036, 2, 1, "", "set_state"], [1036, 3, 1, "", "state"]], "ivy.stateful.optimizers.LAMB": [[1037, 2, 1, "", "__init__"], [1037, 2, 1, "", "set_state"], [1037, 3, 1, "", "state"]], "ivy.stateful.optimizers.LARS": [[1038, 2, 1, "", "__init__"], [1038, 2, 1, "", "set_state"], [1038, 3, 1, "", "state"]], "ivy.stateful.optimizers.Optimizer": [[1039, 2, 1, "", "__init__"], [1039, 2, 1, "", "set_state"], [1039, 2, 1, "", "step"]], "ivy.stateful.optimizers.SGD": [[1040, 2, 1, "", "__init__"], [1040, 2, 1, "", "set_state"], [1040, 3, 1, "", "state"]], "ivy.stateful.sequential": [[1042, 1, 1, "", "Sequential"]], "ivy.stateful.sequential.Sequential": [[1042, 2, 1, "", "__init__"]], "ivy.verbosity": [[1045, 4, 1, "", "cprint"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:method", "3": "py:property", "4": "py:function", "5": "py:data"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "method", "Python method"], "3": ["py", "property", "Python property"], "4": ["py", "function", "Python function"], "5": ["py", "data", "Python data"]}, "titleterms": {"backend": [0, 116, 123, 132, 149], "handler": [0, 132], "choose_random_backend": 2, "clear_backend_stack": 3, "current_backend": 4, "get_backend": 5, "set_backend": 6, "try_import_ivy_jax": 7, "try_import_ivy_mxnet": 8, "try_import_ivy_numpi": 9, "try_import_ivy_tf": 10, "try_import_ivy_torch": 11, "unset_backend": 12, "background": [13, 998], "ml": 14, "explos": 14, "standard": 15, "skeptic": 15, "complimentari": 15, "vs": [15, 149], "competit": 15, "do": [15, 121], "work": [15, 21], "The": [15, 19, 134, 149], "arrai": [15, 24, 25, 117, 120, 125, 134, 167, 180, 186, 194, 200, 211, 216, 224, 230, 235, 243, 253, 258, 263, 268, 277, 282, 289, 295, 300, 306, 370, 375, 379, 383, 388, 392, 397, 401, 405, 409, 413, 417, 421, 425, 429, 433, 437, 441, 445, 450, 454, 458, 462, 466, 470, 474, 478, 482, 486, 490, 494, 498, 502, 506, 510, 514, 518, 522, 526, 530, 534, 540, 545, 549, 553, 557, 561, 565, 569, 574, 579, 583, 587, 592, 597, 602, 606, 611, 639, 682, 693, 743, 748, 751, 754, 757, 760, 763, 766, 770, 774, 777, 780, 783, 786, 790, 793, 796, 799, 802, 805, 808, 811, 815, 820, 825, 831, 836, 840, 844, 848, 852, 856, 860, 864, 870, 874, 878, 882, 886, 913, 938, 945, 950, 956, 960, 964, 968, 972, 976, 980, 984, 989, 994], "api": [15, 20, 116, 120, 126, 132, 134, 136, 137], "why": [16, 121], "unifi": [16, 134], "No": [16, 18], "more": 16, "re": 16, "implement": 16, "infinit": 16, "shelf": 16, "life": 16, "contribut": [17, 998], "set": [18, 60, 105, 123, 934], "up": 18, "clone": 18, "ivi": [18, 116, 119, 121, 125, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 167, 168, 169, 170, 177, 178, 180, 181, 182, 183, 186, 187, 188, 189, 191, 192, 194, 195, 196, 197, 200, 201, 202, 203, 205, 206, 208, 209, 211, 212, 213, 214, 216, 217, 218, 219, 221, 222, 224, 225, 226, 227, 229, 230, 231, 232, 234, 235, 236, 237, 239, 240, 242, 243, 244, 245, 253, 254, 255, 256, 258, 259, 260, 261, 263, 264, 265, 266, 268, 269, 270, 271, 277, 278, 279, 282, 283, 284, 285, 289, 290, 291, 292, 295, 296, 297, 298, 300, 301, 302, 303, 306, 307, 308, 309, 370, 371, 372, 373, 375, 376, 377, 379, 380, 381, 383, 384, 385, 386, 388, 389, 390, 392, 393, 394, 395, 397, 398, 399, 401, 402, 403, 405, 406, 407, 409, 410, 411, 413, 414, 415, 417, 418, 419, 421, 422, 423, 425, 426, 427, 429, 430, 431, 433, 434, 435, 437, 438, 439, 441, 442, 443, 445, 446, 447, 448, 450, 451, 452, 454, 455, 456, 458, 459, 460, 462, 463, 464, 466, 467, 468, 470, 471, 472, 474, 475, 476, 478, 479, 480, 482, 483, 484, 486, 487, 488, 490, 491, 492, 494, 495, 496, 498, 499, 500, 502, 503, 504, 506, 507, 508, 510, 511, 512, 514, 515, 516, 518, 519, 520, 522, 523, 524, 526, 527, 528, 530, 531, 532, 534, 535, 536, 540, 541, 542, 543, 545, 546, 547, 549, 550, 551, 553, 554, 555, 557, 558, 559, 561, 562, 563, 565, 566, 567, 569, 570, 571, 572, 574, 575, 576, 577, 579, 580, 581, 583, 584, 585, 587, 588, 589, 591, 592, 593, 594, 596, 597, 598, 599, 601, 602, 603, 604, 606, 607, 608, 611, 612, 613, 614, 623, 624, 639, 640, 641, 642, 681, 682, 683, 684, 693, 694, 695, 696, 698, 699, 700, 703, 704, 705, 707, 708, 709, 711, 712, 713, 715, 716, 717, 719, 720, 721, 743, 744, 745, 746, 748, 749, 751, 752, 754, 755, 757, 758, 760, 761, 763, 764, 766, 767, 768, 770, 771, 774, 775, 777, 778, 780, 781, 783, 784, 786, 787, 790, 791, 793, 794, 796, 797, 799, 800, 802, 803, 805, 806, 808, 809, 811, 812, 815, 816, 817, 818, 820, 821, 822, 823, 825, 826, 827, 828, 831, 832, 833, 834, 836, 837, 838, 840, 841, 842, 844, 845, 846, 848, 849, 850, 852, 853, 854, 856, 857, 858, 860, 861, 862, 864, 865, 866, 867, 870, 871, 872, 874, 875, 876, 878, 879, 880, 882, 883, 884, 886, 887, 888, 913, 914, 915, 916, 920, 921, 924, 925, 926, 937, 938, 939, 940, 945, 946, 947, 948, 950, 951, 952, 953, 956, 957, 958, 960, 961, 962, 964, 965, 966, 968, 969, 970, 972, 973, 974, 976, 977, 978, 980, 981, 982, 984, 985, 986, 989, 990, 991, 992, 994, 995, 996, 997], "pycharm": 18, "virtual": 18, "environ": 18, "docker": [18, 19, 21], "us": [18, 21, 135], "miniconda": [18, 21], "venv": [18, 21], "interpret": 18, "window": 18, "maco": 18, "ubuntu": 18, "github": 18, "codespac": 18, "pre": [18, 130], "commit": [18, 19, 130], "basic": 19, "get": 19, "help": 19, "todo": 19, "list": 19, "issu": 19, "manag": 19, "your": 19, "fork": 19, "who": 19, "To": 19, "ask": 19, "With": 19, "command": 19, "line": 19, "browser": 19, "pull": 19, "request": 19, "small": 19, "often": 19, "run": 19, "test": [19, 120, 121], "local": 19, "open": 20, "task": 20, "function": [20, 117, 121, 122, 124, 126, 127, 128, 132, 137, 149], "format": [20, 130], "frontend": [20, 137], "build": [21, 132], "doc": 21, "dockerless": 21, "document": 21, "pipelin": [21, 149], "make_doc": 21, "sh": 21, "entrypoint": 21, "_make_doc": 21, "generate_src_rst_fil": 21, "py": 21, "sphinx": 21, "correct_built_html_fil": 21, "remove_fil": 21, "activ": [22, 70, 160, 1005], "arraywithactiv": 23, "variabl": [26, 725], "convers": 27, "args_to_ivi": 28, "args_to_n": 29, "to_ivi": 30, "to_n": 31, "creation": [32, 77, 175], "arraywithcr": 33, "data": [34, 79, 121, 127, 135, 149, 246, 934, 935, 936, 940, 942], "type": [34, 79, 122, 127, 149, 246], "arraywithdatatyp": 35, "devic": [36, 81, 117, 128, 318], "arraywithdevic": 37, "elementwis": [38, 83, 368], "arraywithelementwis": 39, "gener": [40, 85, 121, 609], "arraywithgener": 41, "gradient": [42, 87, 690], "arraywithgradi": 43, "imag": [44, 89], "arraywithimag": 45, "layer": [46, 91, 728, 1019], "arraywithlay": 47, "linear": [48, 93, 737, 741, 1029], "algebra": [48, 93, 741], "arraywithlinearalgebra": 49, "loss": [50, 95, 813], "arraywithloss": 51, "manipul": [52, 97, 829], "arraywithmanipul": 53, "norm": [54, 99, 911, 1033], "arraywithnorm": 55, "random": [56, 101, 917], "arraywithrandom": 57, "search": [58, 103, 929], "arraywithsearch": 59, "arraywithset": 61, "sort": [62, 107, 943, 949, 950, 951, 952], "arraywithsort": 63, "statist": [64, 109, 954], "arraywithstatist": 65, "util": [66, 111, 987], "arraywithutil": 67, "wrap": [68, 113, 124], "add_ivy_array_instance_method": 69, "containerwithactiv": 71, "base": 72, "containerbas": 73, "contain": [74, 75, 126, 135, 168, 170, 178, 181, 183, 187, 189, 192, 195, 197, 201, 203, 206, 209, 212, 214, 217, 219, 222, 225, 227, 229, 231, 234, 236, 239, 242, 244, 254, 256, 259, 261, 264, 266, 269, 271, 278, 283, 285, 290, 292, 296, 298, 301, 303, 307, 309, 371, 373, 376, 380, 384, 386, 389, 393, 395, 398, 402, 406, 410, 414, 418, 422, 426, 430, 434, 438, 442, 446, 448, 451, 455, 459, 463, 467, 471, 475, 479, 483, 487, 491, 495, 499, 503, 507, 511, 515, 519, 523, 527, 531, 535, 541, 543, 546, 550, 554, 558, 562, 566, 570, 572, 575, 577, 580, 584, 588, 591, 593, 596, 598, 601, 603, 607, 612, 614, 623, 640, 642, 681, 683, 694, 696, 698, 700, 703, 705, 707, 709, 711, 713, 715, 717, 719, 721, 744, 746, 767, 816, 818, 821, 823, 826, 828, 832, 834, 837, 841, 845, 849, 853, 857, 861, 865, 867, 871, 875, 879, 883, 887, 914, 916, 921, 924, 926, 937, 939, 946, 948, 951, 953, 957, 961, 965, 969, 973, 977, 981, 985, 990, 992, 995, 997], "multidevcontain": 76, "containerwithcr": 78, "containerwithdatatyp": 80, "containerwithdevic": 82, "containerwithelementwis": 84, "containerwithgener": 86, "containerwithgradi": 88, "containerwithimag": 90, "containerwithlay": 92, "containerwithlinearalgebra": 94, "containerwithloss": 96, "containerwithmanipul": 98, "containerwithnorm": 100, "containerwithrandom": 102, "containerwithsearch": 104, "containerwithset": 106, "containerwithsort": 108, "containerwithstatist": 110, "containerwithutil": 112, "add_ivy_container_instance_method": 114, "deep": 115, "dive": 115, "navig": 116, "code": 116, "categor": 116, "submodul": 116, "design": [116, 131, 998], "argument": [117, 127, 128, 129], "exampl": [117, 119, 130], "out": [117, 129], "dtype": [117, 276, 277, 278, 279], "number": 117, "oper": [117, 134, 149], "integ": 117, "sequenc": 117, "nestabl": [117, 122, 126], "docstr": [118, 119], "tan": [119, 595, 597, 598, 599], "roll": [119, 863, 864, 865, 866], "add": [119, 382, 383, 384, 385], "hypothesi": 121, "import": 121, "strategi": 121, "integr": 121, "we": 121, "need": 121, "helper": 121, "how": 121, "write": 121, "effect": 121, "bonu": 121, "extend": 121, "featur": 121, "self": 121, "consist": 121, "explicit": 121, "test_array_funct": 121, "primari": 122, "composit": 122, "mix": 122, "standalon": 122, "conveni": 122, "nativ": 125, "handl": 125, "instanc": [126, 134], "method": [126, 134, 135], "static": 126, "special": 126, "modul": [127, 128, 136, 1031, 1032], "other": [127, 128], "inplac": 129, "updat": 129, "copi": 129, "lint": 130, "check": [130, 149], "hook": 130, "automat": 130, "reformat": 130, "befor": 130, "block": 132, "framework": [132, 133], "graph": [132, 137], "compil": [132, 137, 172, 173], "class": 134, "monkei": 134, "patch": 134, "construct": 135, "represent": 135, "recurs": 135, "built": 135, "ins": 135, "access": 135, "save": 135, "load": 135, "comparison": 135, "custom": [135, 149], "case": 135, "compartment": 135, "configur": 135, "network": [135, 137], "weight": 135, "state": [136, 149], "initi": [136, 1010], "optim": [136, 1035, 1039], "transpil": 137, "role": 137, "convert": [137, 1008], "model": [137, 144, 149], "builder": 139, "ecosystem": 140, "gym": [141, 148], "mech": 142, "memori": [143, 148], "robot": [145, 148], "vision": [146, 148], "extens": [147, 998], "appli": 148, "librari": 148, "mechan": 148, "faq": 149, "maintain": 149, "version": 149, "dynam": 149, "size": 149, "shape": [149, 672, 934, 935, 936, 940, 942], "control": 149, "flow": 149, "auto": 149, "differenti": 149, "replica": 149, "parallel": 149, "support": 149, "altern": 149, "structur": 149, "func": 150, "wrapper": 150, "handle_nest": 151, "handle_out_argu": 152, "infer_devic": 153, "infer_dtyp": 154, "inputs_to_ivy_arrai": 155, "inputs_to_native_arrai": 156, "outputs_to_ivy_arrai": 157, "to_native_arrays_and_back": 158, "gelu": [161, 1007], "leaky_relu": 162, "relu": 163, "sigmoid": 164, "softmax": 165, "softplu": [166, 167, 168, 169], "static_softplu": 170, "tanh": [171, 600, 602, 603, 604], "constant": 174, "note": [175, 193, 196], "arang": [176, 177], "static_arang": 178, "asarrai": [179, 180, 181, 182], "static_asarrai": 183, "empti": 184, "empty_lik": [185, 186, 187, 188], "static_empty_lik": 189, "ey": [190, 191], "static_ey": 192, "from_dlpack": [193, 194, 195, 196], "static_from_dlpack": 197, "full": 198, "full_lik": [199, 200, 201, 202], "static_full_lik": 203, "linspac": [204, 205], "static_linspac": 206, "logspac": [207, 208], "static_logspac": 209, "meshgrid": [210, 211, 212, 213], "static_meshgrid": 214, "native_arrai": [215, 216, 217, 218], "static_native_arrai": 219, "ones": [220, 221], "static_on": 222, "ones_lik": [223, 224, 225, 226], "static_ones_lik": 227, "tril": [228, 230, 231, 232], "static_tril": 229, "triu": [233, 235, 236, 237], "static_triu": 234, "zero": [238, 240, 1018], "static_zero": 239, "zeros_lik": [241, 243, 244, 245], "static_zeros_lik": 242, "as_ivy_dtyp": 250, "as_native_dtyp": 251, "astyp": [252, 253, 254, 255], "static_astyp": 256, "broadcast_arrai": [257, 258, 259, 260], "static_broadcast_arrai": 261, "broadcast_to": [262, 263, 264, 265], "static_broadcast_to": 266, "can_cast": [267, 268, 269, 270], "static_can_cast": 271, "closest_valid_dtyp": 272, "default_dtyp": 273, "default_float_dtyp": 274, "default_int_dtyp": 275, "dtype_bit": 280, "finfo": [281, 282, 283, 284], "static_finfo": 285, "function_supported_dtyp": 286, "function_unsupported_dtyp": 287, "iinfo": [288, 289, 290, 291], "static_iinfo": 292, "invalid_dtyp": 293, "is_float_dtyp": [294, 295, 296, 297], "static_is_float_dtyp": 298, "is_int_dtyp": [299, 300, 301, 302], "static_is_int_dtyp": 303, "promote_typ": 304, "result_typ": [305, 306, 307, 308], "static_result_typ": 309, "set_default_dtyp": 310, "set_default_float_dtyp": 311, "set_default_int_dtyp": 312, "type_promote_arrai": 313, "unset_default_dtyp": 314, "unset_default_float_dtyp": 315, "unset_default_int_dtyp": 316, "valid_dtyp": 317, "devcloneditem": 320, "devclonedit": 321, "devclonednest": 322, "devdistitem": 323, "devdistit": 324, "devdistnest": 325, "devmapp": 327, "devmappermultiproc": 328, "multidevitem": 330, "multidevit": 331, "multidevnest": 332, "profil": 333, "as_ivy_dev": 334, "as_native_dev": 335, "clear_mem_on_dev": 336, "default_devic": 337, "dev": 338, "dev_clon": 339, "dev_clone_arrai": 340, "dev_clone_it": 341, "dev_clone_nest": 342, "dev_dist": 343, "dev_dist_arrai": 344, "dev_dist_it": 345, "dev_dist_nest": 346, "dev_unifi": 347, "dev_unify_arrai": 348, "dev_unify_it": 349, "dev_unify_nest": 350, "dev_util": 351, "get_all_ivy_arrays_on_dev": 352, "gpu_is_avail": 353, "num_cpu_cor": 354, "num_gpu": 355, "num_ivy_arrays_on_dev": 356, "percent_used_mem_on_dev": 357, "print_all_ivy_arrays_on_dev": 358, "set_default_devic": 359, "set_split_factor": 360, "split_factor": 361, "split_func_cal": 362, "to_devic": 363, "total_mem_on_dev": 364, "tpu_is_avail": 365, "unset_default_devic": 366, "used_mem_on_dev": 367, "ab": [369, 370, 371, 372], "static_ab": 373, "aco": [374, 375, 376, 377], "acosh": [378, 379, 380, 381], "static_add": 386, "asin": [387, 388, 389, 390], "asinh": [391, 392, 393, 394], "static_asinh": 395, "atan": [396, 397, 398, 399], "atan2": [400, 401, 402, 403], "atanh": [404, 405, 406, 407], "bitwise_and": [408, 409, 410, 411], "bitwise_invert": [412, 413, 414, 415], "bitwise_left_shift": [416, 417, 418, 419], "bitwise_or": [420, 421, 422, 423], "bitwise_right_shift": [424, 425, 426, 427], "bitwise_xor": [428, 429, 430, 431], "ceil": [432, 433, 434, 435], "co": [436, 437, 438, 439], "cosh": [440, 441, 442, 443], "divid": [444, 445, 446, 447], "static_divid": 448, "equal": [449, 450, 451, 452], "erf": [453, 454, 455, 456], "exp": [457, 458, 459, 460], "expm1": [461, 462, 463, 464], "floor": [465, 466, 467, 468], "floor_divid": [469, 470, 471, 472], "greater": [473, 474, 475, 476], "greater_equ": [477, 478, 479, 480], "isfinit": [481, 482, 483, 484], "isinf": [485, 486, 487, 488], "isnan": [489, 490, 491, 492], "less": [493, 494, 495, 496], "less_equ": [497, 498, 499, 500], "log": [501, 502, 503, 504], "log10": [505, 506, 507, 508], "log1p": [509, 510, 511, 512], "log2": [513, 514, 515, 516], "logaddexp": [517, 518, 519, 520], "logical_and": [521, 522, 523, 524], "logical_not": [525, 526, 527, 528], "logical_or": [529, 530, 531, 532], "logical_xor": [533, 534, 535, 536], "maximum": 537, "minimum": 538, "multipli": [539, 540, 541, 542], "static_multipli": 543, "neg": [544, 545, 546, 547], "not_equ": [548, 549, 550, 551], "posit": [552, 553, 554, 555], "pow": [556, 557, 558, 559], "remaind": [560, 561, 562, 563], "round": [564, 565, 566, 567], "sign": [568, 569, 570, 571], "static_sign": 572, "sin": [573, 574, 575, 576], "static_sin": 577, "sinh": [578, 579, 580, 581], "sqrt": [582, 583, 584, 585], "squar": [586, 587, 588, 589], "subtract": [590, 592, 593, 594], "static_subtract": 591, "static_tan": 596, "static_tanh": 601, "trunc": [605, 606, 607, 608], "all_equ": [610, 611, 612, 613], "static_all_equ": 614, "arg_info": 615, "arg_nam": 616, "array_equ": 617, "arrays_equ": 618, "assert_supports_inplac": 619, "cache_fn": 620, "clip_matrix_norm": 621, "clip_vector_norm": [622, 623, 624], "container_typ": 625, "copy_arrai": 626, "cumprod": 627, "cumsum": 628, "current_backend_str": 629, "default": 630, "einops_rearrang": 631, "einops_reduc": 632, "einops_repeat": 633, "exist": 634, "floormod": 635, "fourier_encod": 636, "gather": 637, "gather_nd": [638, 639, 640, 641], "static_gather_nd": 642, "get_all_arrays_in_memori": 643, "get_min_bas": 644, "get_min_denomin": 645, "get_num_dim": 646, "get_referrers_recurs": 647, "has_nan": 648, "indices_wher": 649, "inplace_arrays_support": 650, "inplace_decr": 651, "inplace_incr": 652, "inplace_upd": 653, "inplace_variables_support": 654, "is_arrai": 655, "is_ivy_arrai": 656, "is_ivy_contain": 657, "is_native_arrai": 658, "match_kwarg": 659, "multiprocess": 660, "num_arrays_in_memori": 661, "one_hot": 662, "print_all_arrays_in_memori": 663, "queue_timeout": 664, "scatter_flat": 665, "scatter_nd": 666, "set_min_bas": 667, "set_min_denomin": 668, "set_queue_timeout": 669, "set_shape_array_mod": 670, "set_tmp_dir": 671, "shape_array_mod": 673, "shape_to_tupl": 674, "stable_divid": 675, "stable_pow": 676, "supports_inplac": 677, "tmp_dir": 678, "to_list": 679, "to_numpi": [680, 682, 683, 684], "static_to_numpi": 681, "to_scalar": 685, "try_else_non": 686, "unset_shape_array_mod": 687, "unstack": 688, "value_is_nan": 689, "adam_step": [692, 693, 694, 695], "static_adam_step": 696, "adam_upd": [697, 698, 699], "static_adam_upd": 700, "execute_with_gradi": 701, "gradient_descent_upd": [702, 703, 704], "static_gradient_descent_upd": 705, "is_vari": [706, 707, 708], "static_is_vari": 709, "lamb_upd": [710, 711, 712], "static_lamb_upd": 713, "lars_upd": [714, 715, 716], "static_lars_upd": 717, "optimizer_upd": [718, 719, 720], "static_optimizer_upd": 721, "set_with_grad": 722, "stop_gradi": 723, "unset_with_grad": 724, "variable_data": 726, "with_grad": 727, "conv1d": [729, 1020], "conv1d_transpos": 730, "conv2d": [731, 1022], "conv2d_transpos": 732, "conv3d": [733, 1024], "conv3d_transpos": 734, "depthwise_conv2d": 735, "dropout": [736, 1027], "lstm_updat": 738, "multi_head_attent": 739, "scaled_dot_product_attent": 740, "choleski": [742, 743, 744, 745], "static_choleski": 746, "cross": [747, 748, 749], "det": [750, 751, 752], "diagon": [753, 754, 755], "eigh": [756, 757, 758], "eigvalsh": [759, 760, 761], "inv": [762, 763, 764], "matmul": [765, 766, 767, 768], "matrix_norm": [769, 770, 771], "matrix_pow": 772, "matrix_rank": [773, 774, 775], "matrix_transpos": [776, 777, 778], "outer": [779, 780, 781], "pinv": [782, 783, 784], "qr": [785, 786, 787], "slogdet": 788, "solv": [789, 790, 791], "svd": [792, 793, 794], "svdval": [795, 796, 797], "tensordot": [798, 799, 800], "trace": [801, 802, 803], "vecdot": [804, 805, 806], "vector_norm": [807, 808, 809], "vector_to_skew_symmetric_matrix": [810, 811, 812], "binary_cross_entropi": [814, 815, 816, 817], "static_binary_cross_entropi": 818, "cross_entropi": [819, 820, 821, 822], "static_cross_entropi": 823, "sparse_cross_entropi": [824, 825, 826, 827], "static_sparse_cross_entropi": 828, "clip": [830, 831, 832, 833], "static_clip": 834, "concat": [835, 836, 837, 838], "constant_pad": [839, 840, 841, 842], "expand_dim": [843, 844, 845, 846], "flip": [847, 848, 849, 850], "permute_dim": [851, 852, 853, 854], "repeat": [855, 856, 857, 858], "reshap": [859, 860, 861, 862], "static_rol": 867, "split": 868, "squeez": [869, 870, 871, 872], "stack": [873, 874, 875, 876], "swapax": [877, 878, 879, 880], "tile": [881, 882, 883, 884], "zero_pad": [885, 886, 887, 888], "meta": 889, "fomaml_step": 890, "maml_step": 891, "reptile_step": 892, "nest": 893, "all_nested_indic": 894, "copy_nest": 895, "index_nest": 896, "insert_into_nest_at_index": 897, "insert_into_nest_at_indic": 898, "map": 899, "map_nest_at_index": 900, "map_nest_at_indic": 901, "multi_index_nest": 902, "nested_ani": 903, "nested_indices_wher": 904, "nested_map": 905, "nested_multi_map": 906, "prune_nest_at_index": 907, "prune_nest_at_indic": 908, "set_nest_at_index": 909, "set_nest_at_indic": 910, "layer_norm": [912, 913, 914, 915], "static_layer_norm": 916, "multinomi": 918, "randint": [919, 920], "static_randint": 921, "random_norm": 922, "random_uniform": [923, 924, 925], "static_random_uniform": 926, "seed": 927, "shuffl": 928, "argmax": 930, "argmin": 931, "nonzero": 932, "where": 933, "depend": [934, 935, 936, 940, 942], "output": [934, 935, 936, 940, 942], "unique_al": 935, "unique_count": [936, 938, 939, 940], "static_unique_count": 937, "unique_invers": 941, "unique_valu": 942, "argsort": [944, 945, 946, 947], "static_argsort": 948, "static_sort": 953, "einsum": [955, 956, 957, 958], "max": [959, 960, 961, 962], "mean": [963, 964, 965, 966], "min": [967, 968, 969, 970], "prod": [971, 972, 973, 974], "std": [975, 976, 977, 978], "sum": [979, 980, 981, 982], "var": [983, 984, 985, 986], "all": [988, 989, 990, 991], "static_al": 992, "ani": [993, 994, 995, 996], "static_ani": 997, "content": 998, "overview": 998, "quick": 998, "start": 998, "roadmap": [998, 1004], "citat": 998, "inspect": 1001, "add_array_spec": 1002, "fn_array_spec": 1003, "geglu": 1006, "to_ivy_modul": 1009, "firstlayersiren": 1012, "glorotuniform": 1013, "Ones": 1015, "siren": 1016, "conv1dtranspos": 1021, "conv2dtranspos": 1023, "conv3dtranspos": 1025, "depthwiseconv2d": 1026, "lstm": 1028, "multiheadattent": 1030, "layernorm": 1034, "adam": 1036, "lamb": 1037, "lar": 1038, "sgd": 1040, "sequenti": [1041, 1042], "verbos": 1044, "cprint": 1045}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 6, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.viewcode": 1, "sphinx": 56}})