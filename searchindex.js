Search.setIndex({"docnames": ["array/activations", "array/activations/ArrayWithActivations", "array/array", "array/array/Array", "array/array/Variable", "array/array_methods", "array/array_methods/abs", "array/array_methods/acos", "array/array_methods/acosh", "array/array_methods/adam_step", "array/array_methods/adam_update", "array/array_methods/add", "array/array_methods/add_ivy_array_instance_methods", "array/array_methods/all", "array/array_methods/all_equal", "array/array_methods/any", "array/array_methods/argmax", "array/array_methods/argmin", "array/array_methods/argsort", "array/array_methods/array_equal", "array/array_methods/arrays_equal", "array/array_methods/asarray", "array/array_methods/asin", "array/array_methods/asinh", "array/array_methods/assert_supports_inplace", "array/array_methods/astype", "array/array_methods/atan", "array/array_methods/atan2", "array/array_methods/atanh", "array/array_methods/binary_cross_entropy", "array/array_methods/bitwise_and", "array/array_methods/bitwise_invert", "array/array_methods/bitwise_left_shift", "array/array_methods/bitwise_or", "array/array_methods/bitwise_right_shift", "array/array_methods/bitwise_xor", "array/array_methods/broadcast_arrays", "array/array_methods/broadcast_to", "array/array_methods/can_cast", "array/array_methods/ceil", "array/array_methods/cholesky", "array/array_methods/clip", "array/array_methods/clip_matrix_norm", "array/array_methods/clip_vector_norm", "array/array_methods/concat", "array/array_methods/constant_pad", "array/array_methods/conv1d", "array/array_methods/conv1d_transpose", "array/array_methods/conv3d", "array/array_methods/conv3d_transpose", "array/array_methods/copy_array", "array/array_methods/cos", "array/array_methods/cosh", "array/array_methods/cross", "array/array_methods/cross_entropy", "array/array_methods/cumprod", "array/array_methods/cumsum", "array/array_methods/default", "array/array_methods/depthwise_conv2d", "array/array_methods/det", "array/array_methods/dev", "array/array_methods/diagonal", "array/array_methods/divide", "array/array_methods/dropout", "array/array_methods/dtype", "array/array_methods/eigh", "array/array_methods/eigvalsh", "array/array_methods/einops_rearrange", "array/array_methods/einops_reduce", "array/array_methods/einops_repeat", "array/array_methods/einsum", "array/array_methods/empty_like", "array/array_methods/equal", "array/array_methods/erf", "array/array_methods/exists", "array/array_methods/exp", "array/array_methods/expand_dims", "array/array_methods/expm1", "array/array_methods/finfo", "array/array_methods/flip", "array/array_methods/floor", "array/array_methods/floor_divide", "array/array_methods/floormod", "array/array_methods/fourier_encode", "array/array_methods/from_dlpack", "array/array_methods/full_like", "array/array_methods/gather", "array/array_methods/gather_nd", "array/array_methods/gelu", "array/array_methods/get_num_dims", "array/array_methods/gradient_descent_update", "array/array_methods/greater", "array/array_methods/greater_equal", "array/array_methods/has_nans", "array/array_methods/iinfo", "array/array_methods/indices_where", "array/array_methods/inplace_decrement", "array/array_methods/inplace_increment", "array/array_methods/inplace_update", "array/array_methods/inv", "array/array_methods/is_array", "array/array_methods/is_bool_dtype", "array/array_methods/is_float_dtype", "array/array_methods/is_int_dtype", "array/array_methods/is_ivy_array", "array/array_methods/is_ivy_container", "array/array_methods/is_native_array", "array/array_methods/is_uint_dtype", "array/array_methods/is_variable", "array/array_methods/isfinite", "array/array_methods/isinf", "array/array_methods/isnan", "array/array_methods/lamb_update", "array/array_methods/lars_update", "array/array_methods/layer_norm", "array/array_methods/leaky_relu", "array/array_methods/less", "array/array_methods/less_equal", "array/array_methods/linear", "array/array_methods/log", "array/array_methods/log10", "array/array_methods/log1p", "array/array_methods/log2", "array/array_methods/logaddexp", "array/array_methods/logical_and", "array/array_methods/logical_not", "array/array_methods/logical_or", "array/array_methods/logical_xor", "array/array_methods/lstm_update", "array/array_methods/matmul", "array/array_methods/matrix_norm", "array/array_methods/matrix_rank", "array/array_methods/matrix_transpose", "array/array_methods/max", "array/array_methods/mean", "array/array_methods/meshgrid", "array/array_methods/min", "array/array_methods/multi_head_attention", "array/array_methods/multinomial", "array/array_methods/multiply", "array/array_methods/native_array", "array/array_methods/negative", "array/array_methods/nonzero", "array/array_methods/not_equal", "array/array_methods/one_hot", "array/array_methods/ones_like", "array/array_methods/optimizer_update", "array/array_methods/outer", "array/array_methods/permute_dims", "array/array_methods/pinv", "array/array_methods/positive", "array/array_methods/pow", "array/array_methods/prod", "array/array_methods/qr", "array/array_methods/randint", "array/array_methods/random_normal", "array/array_methods/random_uniform", "array/array_methods/relu", "array/array_methods/remainder", "array/array_methods/repeat", "array/array_methods/reshape", "array/array_methods/result_type", "array/array_methods/roll", "array/array_methods/round", "array/array_methods/scaled_dot_product_attention", "array/array_methods/scatter_flat", "array/array_methods/scatter_nd", "array/array_methods/searchsorted", "array/array_methods/shuffle", "array/array_methods/sigmoid", "array/array_methods/sign", "array/array_methods/sin", "array/array_methods/sinh", "array/array_methods/softmax", "array/array_methods/softplus", "array/array_methods/solve", "array/array_methods/sort", "array/array_methods/sparse_cross_entropy", "array/array_methods/split", "array/array_methods/sqrt", "array/array_methods/square", "array/array_methods/squeeze", "array/array_methods/stable_divide", "array/array_methods/stable_pow", "array/array_methods/stack", "array/array_methods/std", "array/array_methods/stop_gradient", "array/array_methods/subtract", "array/array_methods/sum", "array/array_methods/supports_inplace", "array/array_methods/svd", "array/array_methods/svdvals", "array/array_methods/swapaxes", "array/array_methods/tan", "array/array_methods/tanh", "array/array_methods/tensordot", "array/array_methods/tile", "array/array_methods/to_device", "array/array_methods/to_list", "array/array_methods/to_numpy", "array/array_methods/to_scalar", "array/array_methods/trace", "array/array_methods/tril", "array/array_methods/triu", "array/array_methods/trunc", "array/array_methods/unique_all", "array/array_methods/unique_counts", "array/array_methods/unique_inverse", "array/array_methods/unique_values", "array/array_methods/unstack", "array/array_methods/value_is_nan", "array/array_methods/var", "array/array_methods/variable", "array/array_methods/variable_data", "array/array_methods/vecdot", "array/array_methods/vector_norm", "array/array_methods/vector_to_skew_symmetric_matrix", "array/array_methods/where", "array/array_methods/zero_pad", "array/array_methods/zeros_like", "array/conversions", "array/conversions/args_to_ivy", "array/conversions/args_to_native", "array/conversions/to_ivy", "array/conversions/to_native", "array/creation", "array/creation/ArrayWithCreation", "array/data_type", "array/data_type/ArrayWithDataTypes", "array/device", "array/device/ArrayWithDevice", "array/elementwise", "array/elementwise/ArrayWithElementwise", "array/general", "array/general/ArrayWithGeneral", "array/gradients", "array/gradients/ArrayWithGradients", "array/image", "array/image/ArrayWithImage", "array/layers", "array/layers/ArrayWithLayers", "array/linear_algebra", "array/linear_algebra/ArrayWithLinearAlgebra", "array/losses", "array/losses/ArrayWithLosses", "array/manipulation", "array/manipulation/ArrayWithManipulation", "array/norms", "array/norms/ArrayWithNorms", "array/random", "array/random/ArrayWithRandom", "array/searching", "array/searching/ArrayWithSearching", "array/set", "array/set/ArrayWithSet", "array/sorting", "array/sorting/ArrayWithSorting", "array/statistical", "array/statistical/ArrayWithStatistical", "array/utility", "array/utility/ArrayWithUtility", "array/wrapping", "array/wrapping/add_ivy_array_instance_methods", "backend_handler", "backend_handler/choose_random_backend", "backend_handler/clear_backend_stack", "backend_handler/current_backend", "backend_handler/fn_name_from_version_specific_fn_name", "backend_handler/get_backend", "backend_handler/set_backend", "backend_handler/set_backend_to_specific_version", "backend_handler/try_import_ivy_jax", "backend_handler/try_import_ivy_mxnet", "backend_handler/try_import_ivy_numpy", "backend_handler/try_import_ivy_tf", "backend_handler/try_import_ivy_torch", "backend_handler/unset_backend", "background", "background/ml_explosion", "background/standardization", "background/why_unify", "container/activations", "container/activations/ContainerWithActivations", "container/base", "container/base/ContainerBase", "container/container", "container/container/Container", "container/container_methods", "container/container_methods/abs", "container/container_methods/acos", "container/container_methods/acosh", "container/container_methods/adam_step", "container/container_methods/adam_update", "container/container_methods/add", "container/container_methods/add_ivy_container_instance_methods", "container/container_methods/all", "container/container_methods/all_equal", "container/container_methods/any", "container/container_methods/argmax", "container/container_methods/argmin", "container/container_methods/argsort", "container/container_methods/asin", "container/container_methods/asinh", "container/container_methods/assert_supports_inplace", "container/container_methods/astype", "container/container_methods/atan", "container/container_methods/atan2", "container/container_methods/atanh", "container/container_methods/binary_cross_entropy", "container/container_methods/bitwise_and", "container/container_methods/bitwise_invert", "container/container_methods/bitwise_left_shift", "container/container_methods/bitwise_or", "container/container_methods/bitwise_right_shift", "container/container_methods/bitwise_xor", "container/container_methods/broadcast_arrays", "container/container_methods/broadcast_to", "container/container_methods/can_cast", "container/container_methods/ceil", "container/container_methods/cholesky", "container/container_methods/clip", "container/container_methods/clip_matrix_norm", "container/container_methods/clip_vector_norm", "container/container_methods/concat", "container/container_methods/constant_pad", "container/container_methods/conv1d", "container/container_methods/conv1d_transpose", "container/container_methods/conv2d", "container/container_methods/conv2d_transpose", "container/container_methods/conv3d", "container/container_methods/conv3d_transpose", "container/container_methods/cos", "container/container_methods/cosh", "container/container_methods/cross", "container/container_methods/cross_entropy", "container/container_methods/cumprod", "container/container_methods/cumsum", "container/container_methods/depthwise_conv2d", "container/container_methods/det", "container/container_methods/dev", "container/container_methods/diagonal", "container/container_methods/divide", "container/container_methods/dropout", "container/container_methods/dtype", "container/container_methods/eigh", "container/container_methods/einops_rearrange", "container/container_methods/einops_reduce", "container/container_methods/einops_repeat", "container/container_methods/einsum", "container/container_methods/empty_like", "container/container_methods/equal", "container/container_methods/erf", "container/container_methods/exp", "container/container_methods/expand_dims", "container/container_methods/expm1", "container/container_methods/finfo", "container/container_methods/flip", "container/container_methods/floor", "container/container_methods/floor_divide", "container/container_methods/floormod", "container/container_methods/fourier_encode", "container/container_methods/from_dlpack", "container/container_methods/full_like", "container/container_methods/gather", "container/container_methods/gather_nd", "container/container_methods/gelu", "container/container_methods/gradient_descent_update", "container/container_methods/greater", "container/container_methods/greater_equal", "container/container_methods/has_nans", "container/container_methods/iinfo", "container/container_methods/indices_where", "container/container_methods/inplace_decrement", "container/container_methods/inplace_increment", "container/container_methods/inplace_update", "container/container_methods/inv", "container/container_methods/is_array", "container/container_methods/is_bool_dtype", "container/container_methods/is_float_dtype", "container/container_methods/is_int_dtype", "container/container_methods/is_ivy_array", "container/container_methods/is_ivy_container", "container/container_methods/is_native_array", "container/container_methods/is_uint_dtype", "container/container_methods/is_variable", "container/container_methods/isfinite", "container/container_methods/isinf", "container/container_methods/isnan", "container/container_methods/lamb_update", "container/container_methods/lars_update", "container/container_methods/layer_norm", "container/container_methods/leaky_relu", "container/container_methods/less", "container/container_methods/less_equal", "container/container_methods/linear", "container/container_methods/log", "container/container_methods/log10", "container/container_methods/log1p", "container/container_methods/log2", "container/container_methods/logaddexp", "container/container_methods/logical_and", "container/container_methods/logical_not", "container/container_methods/logical_or", "container/container_methods/logical_xor", "container/container_methods/lstm_update", "container/container_methods/matmul", "container/container_methods/matrix_norm", "container/container_methods/matrix_power", "container/container_methods/matrix_rank", "container/container_methods/matrix_transpose", "container/container_methods/max", "container/container_methods/maximum", "container/container_methods/mean", "container/container_methods/meshgrid", "container/container_methods/min", "container/container_methods/minimum", "container/container_methods/multi_head_attention", "container/container_methods/multinomial", "container/container_methods/multiply", "container/container_methods/native_array", "container/container_methods/negative", "container/container_methods/nonzero", "container/container_methods/not_equal", "container/container_methods/one_hot", "container/container_methods/ones_like", "container/container_methods/optimizer_update", "container/container_methods/outer", "container/container_methods/permute_dims", "container/container_methods/positive", "container/container_methods/pow", "container/container_methods/prod", "container/container_methods/qr", "container/container_methods/randint", "container/container_methods/random_normal", "container/container_methods/random_uniform", "container/container_methods/relu", "container/container_methods/remainder", "container/container_methods/repeat", "container/container_methods/reshape", "container/container_methods/result_type", "container/container_methods/roll", "container/container_methods/round", "container/container_methods/scaled_dot_product_attention", "container/container_methods/scatter_flat", "container/container_methods/scatter_nd", "container/container_methods/searchsorted", "container/container_methods/shuffle", "container/container_methods/sigmoid", "container/container_methods/sign", "container/container_methods/sin", "container/container_methods/sinh", "container/container_methods/slogdet", "container/container_methods/softmax", "container/container_methods/softplus", "container/container_methods/solve", "container/container_methods/sort", "container/container_methods/sparse_cross_entropy", "container/container_methods/split", "container/container_methods/sqrt", "container/container_methods/square", "container/container_methods/squeeze", "container/container_methods/stable_divide", "container/container_methods/stable_pow", "container/container_methods/stack", "container/container_methods/static_abs", "container/container_methods/static_acos", "container/container_methods/static_acosh", "container/container_methods/static_add", "container/container_methods/static_all", "container/container_methods/static_all_equal", "container/container_methods/static_any", "container/container_methods/static_arange", "container/container_methods/static_argmax", "container/container_methods/static_argmin", "container/container_methods/static_argsort", "container/container_methods/static_asarray", "container/container_methods/static_asin", "container/container_methods/static_asinh", "container/container_methods/static_assert_supports_inplace", "container/container_methods/static_astype", "container/container_methods/static_atan", "container/container_methods/static_atan2", "container/container_methods/static_atanh", "container/container_methods/static_binary_cross_entropy", "container/container_methods/static_bitwise_and", "container/container_methods/static_bitwise_invert", "container/container_methods/static_bitwise_left_shift", "container/container_methods/static_bitwise_or", "container/container_methods/static_bitwise_right_shift", "container/container_methods/static_bitwise_xor", "container/container_methods/static_broadcast_arrays", "container/container_methods/static_broadcast_to", "container/container_methods/static_can_cast", "container/container_methods/static_ceil", "container/container_methods/static_cholesky", "container/container_methods/static_clip", "container/container_methods/static_clip_matrix_norm", "container/container_methods/static_clip_vector_norm", "container/container_methods/static_concat", "container/container_methods/static_constant_pad", "container/container_methods/static_conv1d", "container/container_methods/static_conv1d_transpose", "container/container_methods/static_conv2d", "container/container_methods/static_conv2d_transpose", "container/container_methods/static_conv3d", "container/container_methods/static_conv3d_transpose", "container/container_methods/static_cos", "container/container_methods/static_cosh", "container/container_methods/static_cross", "container/container_methods/static_cross_entropy", "container/container_methods/static_cumprod", "container/container_methods/static_cumsum", "container/container_methods/static_default_float_dtype", "container/container_methods/static_depthwise_conv2d", "container/container_methods/static_det", "container/container_methods/static_dev", "container/container_methods/static_diagonal", "container/container_methods/static_divide", "container/container_methods/static_dropout", "container/container_methods/static_dtype", "container/container_methods/static_einops_rearrange", "container/container_methods/static_einops_reduce", "container/container_methods/static_einops_repeat", "container/container_methods/static_empty_like", "container/container_methods/static_equal", "container/container_methods/static_erf", "container/container_methods/static_exp", "container/container_methods/static_expand_dims", "container/container_methods/static_expm1", "container/container_methods/static_eye", "container/container_methods/static_finfo", "container/container_methods/static_flip", "container/container_methods/static_floor", "container/container_methods/static_floor_divide", "container/container_methods/static_floormod", "container/container_methods/static_fourier_encode", "container/container_methods/static_from_dlpack", "container/container_methods/static_full_like", "container/container_methods/static_function_supported_dtypes", "container/container_methods/static_function_unsupported_dtypes", "container/container_methods/static_gather", "container/container_methods/static_gather_nd", "container/container_methods/static_gelu", "container/container_methods/static_greater", "container/container_methods/static_greater_equal", "container/container_methods/static_has_nans", "container/container_methods/static_iinfo", "container/container_methods/static_indices_where", "container/container_methods/static_inplace_decrement", "container/container_methods/static_inplace_increment", "container/container_methods/static_inplace_update", "container/container_methods/static_inv", "container/container_methods/static_is_array", "container/container_methods/static_is_bool_dtype", "container/container_methods/static_is_float_dtype", "container/container_methods/static_is_int_dtype", "container/container_methods/static_is_ivy_array", "container/container_methods/static_is_ivy_container", "container/container_methods/static_is_native_array", "container/container_methods/static_is_uint_dtype", "container/container_methods/static_is_variable", "container/container_methods/static_isfinite", "container/container_methods/static_isinf", "container/container_methods/static_isnan", "container/container_methods/static_leaky_relu", "container/container_methods/static_less", "container/container_methods/static_less_equal", "container/container_methods/static_linear", "container/container_methods/static_linspace", "container/container_methods/static_log", "container/container_methods/static_log10", "container/container_methods/static_log1p", "container/container_methods/static_log2", "container/container_methods/static_logaddexp", "container/container_methods/static_logical_and", "container/container_methods/static_logical_not", "container/container_methods/static_logical_or", "container/container_methods/static_logical_xor", "container/container_methods/static_logspace", "container/container_methods/static_lstm_update", "container/container_methods/static_matrix_norm", "container/container_methods/static_matrix_power", "container/container_methods/static_matrix_rank", "container/container_methods/static_matrix_transpose", "container/container_methods/static_maximum", "container/container_methods/static_meshgrid", "container/container_methods/static_minimum", "container/container_methods/static_multi_head_attention", "container/container_methods/static_multinomial", "container/container_methods/static_multiply", "container/container_methods/static_native_array", "container/container_methods/static_negative", "container/container_methods/static_nonzero", "container/container_methods/static_not_equal", "container/container_methods/static_one_hot", "container/container_methods/static_ones", "container/container_methods/static_ones_like", "container/container_methods/static_outer", "container/container_methods/static_permute_dims", "container/container_methods/static_positive", "container/container_methods/static_pow", "container/container_methods/static_qr", "container/container_methods/static_randint", "container/container_methods/static_random_normal", "container/container_methods/static_random_uniform", "container/container_methods/static_relu", "container/container_methods/static_remainder", "container/container_methods/static_repeat", "container/container_methods/static_reshape", "container/container_methods/static_result_type", "container/container_methods/static_roll", "container/container_methods/static_round", "container/container_methods/static_scaled_dot_product_attention", "container/container_methods/static_scatter_flat", "container/container_methods/static_scatter_nd", "container/container_methods/static_searchsorted", "container/container_methods/static_shuffle", "container/container_methods/static_sigmoid", "container/container_methods/static_sign", "container/container_methods/static_sin", "container/container_methods/static_sinh", "container/container_methods/static_slogdet", "container/container_methods/static_softmax", "container/container_methods/static_softplus", "container/container_methods/static_solve", "container/container_methods/static_sort", "container/container_methods/static_sparse_cross_entropy", "container/container_methods/static_split", "container/container_methods/static_sqrt", "container/container_methods/static_square", "container/container_methods/static_squeeze", "container/container_methods/static_stable_divide", "container/container_methods/static_stable_pow", "container/container_methods/static_stack", "container/container_methods/static_stop_gradient", "container/container_methods/static_subtract", "container/container_methods/static_supports_inplace_update", "container/container_methods/static_svd", "container/container_methods/static_svdvals", "container/container_methods/static_swapaxes", "container/container_methods/static_tan", "container/container_methods/static_tanh", "container/container_methods/static_tensordot", "container/container_methods/static_tile", "container/container_methods/static_to_device", "container/container_methods/static_to_ivy", "container/container_methods/static_to_list", "container/container_methods/static_to_native", "container/container_methods/static_to_numpy", "container/container_methods/static_to_scalar", "container/container_methods/static_trace", "container/container_methods/static_tril", "container/container_methods/static_triu", "container/container_methods/static_trunc", "container/container_methods/static_unique_all", "container/container_methods/static_unique_counts", "container/container_methods/static_unique_inverse", "container/container_methods/static_unique_values", "container/container_methods/static_unstack", "container/container_methods/static_value_is_nan", "container/container_methods/static_var", "container/container_methods/static_variable", "container/container_methods/static_variable_data", "container/container_methods/static_vecdot", "container/container_methods/static_vector_norm", "container/container_methods/static_vector_to_skew_symmetric_matrix", "container/container_methods/static_where", "container/container_methods/static_zero_pad", "container/container_methods/static_zeros", "container/container_methods/static_zeros_like", "container/container_methods/std", "container/container_methods/stop_gradient", "container/container_methods/subtract", "container/container_methods/sum", "container/container_methods/supports_inplace_update", "container/container_methods/svd", "container/container_methods/svdvals", "container/container_methods/swapaxes", "container/container_methods/tan", "container/container_methods/tanh", "container/container_methods/tensordot", "container/container_methods/tile", "container/container_methods/to_device", "container/container_methods/to_ivy", "container/container_methods/to_list", "container/container_methods/to_native", "container/container_methods/to_numpy", "container/container_methods/to_scalar", "container/container_methods/trace", "container/container_methods/tril", "container/container_methods/triu", "container/container_methods/trunc", "container/container_methods/unique_all", "container/container_methods/unique_counts", "container/container_methods/unique_inverse", "container/container_methods/unique_values", "container/container_methods/unstack", "container/container_methods/value_is_nan", "container/container_methods/var", "container/container_methods/variable", "container/container_methods/variable_data", "container/container_methods/vecdot", "container/container_methods/vector_norm", "container/container_methods/vector_to_skew_symmetric_matrix", "container/container_methods/where", "container/container_methods/zero_pad", "container/container_methods/zeros_like", "container/conversions", "container/conversions/ContainerWithConversions", "container/creation", "container/creation/ContainerWithCreation", "container/data_type", "container/data_type/ContainerWithDataTypes", "container/device", "container/device/ContainerWithDevice", "container/elementwise", "container/elementwise/ContainerWithElementwise", "container/general", "container/general/ContainerWithGeneral", "container/gradients", "container/gradients/ContainerWithGradients", "container/image", "container/image/ContainerWithImage", "container/layers", "container/layers/ContainerWithLayers", "container/linear_algebra", "container/linear_algebra/ContainerWithLinearAlgebra", "container/losses", "container/losses/ContainerWithLosses", "container/manipulation", "container/manipulation/ContainerWithManipulation", "container/norms", "container/norms/ContainerWithNorms", "container/random", "container/random/ContainerWithRandom", "container/searching", "container/searching/ContainerWithSearching", "container/set", "container/set/ContainerWithSet", "container/sorting", "container/sorting/ContainerWithSorting", "container/statistical", "container/statistical/ContainerWithStatistical", "container/utility", "container/utility/ContainerWithUtility", "container/wrapping", "container/wrapping/add_ivy_container_instance_methods", "contributing", "contributing/0_setting_up", "contributing/1_the_basics", "contributing/4_open_tasks", "contributing/5_applied_libraries", "contributing/building_the_docs", "deep_dive", "deep_dive/0_navigating_the_code", "deep_dive/10_formatting", "deep_dive/11_function_arguments", "deep_dive/12_docstrings", "deep_dive/13_docstring_examples", "deep_dive/14_array_api_tests", "deep_dive/15_ivy_tests", "deep_dive/16_ivy_frontends", "deep_dive/17_ivy_frontends_tests", "deep_dive/1_function_types", "deep_dive/2_superset_behaviour", "deep_dive/3_backend_setting", "deep_dive/4_function_wrapping", "deep_dive/5_arrays", "deep_dive/6_containers", "deep_dive/7_data_types", "deep_dive/8_devices", "deep_dive/9_inplace_updates", "design", "design/building_blocks", "design/ivy_as_a_framework", "design/ivy_as_a_framework/ivy_array", "design/ivy_as_a_framework/ivy_container", "design/ivy_as_a_framework/ivy_stateful_api", "design/ivy_as_a_transpiler", "docs/ivy", "docs/ivy_builder", "docs/ivy_ecosystem", "docs/ivy_gym", "docs/ivy_mech", "docs/ivy_memory", "docs/ivy_models", "docs/ivy_robot", "docs/ivy_vision", "extensions", "extensions/applied_libraries", "faq", "func_wrapper", "func_wrapper/from_zero_dim_arrays_to_float", "func_wrapper/handle_nestable", "func_wrapper/handle_out_argument", "func_wrapper/infer_device", "func_wrapper/infer_dtype", "func_wrapper/inputs_to_ivy_arrays", "func_wrapper/inputs_to_native_arrays", "func_wrapper/integer_arrays_to_float", "func_wrapper/outputs_to_ivy_arrays", "func_wrapper/to_native_arrays_and_back", "functional/ivy", "functional/ivy/activations", "functional/ivy/activations/gelu", "functional/ivy/activations/leaky_relu", "functional/ivy/activations/relu", "functional/ivy/activations/sigmoid", "functional/ivy/activations/softmax", "functional/ivy/activations/softplus", "functional/ivy/compilation", "functional/ivy/compilation/compile", "functional/ivy/constants", "functional/ivy/creation", "functional/ivy/creation/arange", "functional/ivy/creation/asarray", "functional/ivy/creation/empty", "functional/ivy/creation/empty_like", "functional/ivy/creation/eye", "functional/ivy/creation/from_dlpack", "functional/ivy/creation/full", "functional/ivy/creation/full_like", "functional/ivy/creation/linspace", "functional/ivy/creation/logspace", "functional/ivy/creation/meshgrid", "functional/ivy/creation/native_array", "functional/ivy/creation/ones", "functional/ivy/creation/ones_like", "functional/ivy/creation/tril", "functional/ivy/creation/triu", "functional/ivy/creation/zeros", "functional/ivy/creation/zeros_like", "functional/ivy/data_type", "functional/ivy/data_type/as_ivy_dtype", "functional/ivy/data_type/as_native_dtype", "functional/ivy/data_type/astype", "functional/ivy/data_type/broadcast_arrays", "functional/ivy/data_type/broadcast_to", "functional/ivy/data_type/can_cast", "functional/ivy/data_type/check_float", "functional/ivy/data_type/closest_valid_dtype", "functional/ivy/data_type/default_dtype", "functional/ivy/data_type/default_float_dtype", "functional/ivy/data_type/default_int_dtype", "functional/ivy/data_type/default_uint_dtype", "functional/ivy/data_type/dtype", "functional/ivy/data_type/dtype_bits", "functional/ivy/data_type/finfo", "functional/ivy/data_type/function_supported_dtypes", "functional/ivy/data_type/function_unsupported_dtypes", "functional/ivy/data_type/iinfo", "functional/ivy/data_type/infer_default_dtype", "functional/ivy/data_type/invalid_dtype", "functional/ivy/data_type/is_bool_dtype", "functional/ivy/data_type/is_float_dtype", "functional/ivy/data_type/is_int_dtype", "functional/ivy/data_type/is_uint_dtype", "functional/ivy/data_type/promote_types", "functional/ivy/data_type/promote_types_of_inputs", "functional/ivy/data_type/result_type", "functional/ivy/data_type/set_default_dtype", "functional/ivy/data_type/set_default_float_dtype", "functional/ivy/data_type/set_default_int_dtype", "functional/ivy/data_type/set_default_uint_dtype", "functional/ivy/data_type/type_promote_arrays", "functional/ivy/data_type/unset_default_dtype", "functional/ivy/data_type/unset_default_float_dtype", "functional/ivy/data_type/unset_default_int_dtype", "functional/ivy/data_type/unset_default_uint_dtype", "functional/ivy/data_type/valid_dtype", "functional/ivy/device", "functional/ivy/device/Profiler", "functional/ivy/device/as_ivy_dev", "functional/ivy/device/as_native_dev", "functional/ivy/device/clear_mem_on_dev", "functional/ivy/device/default_device", "functional/ivy/device/dev", "functional/ivy/device/dev_util", "functional/ivy/device/function_supported_devices", "functional/ivy/device/function_unsupported_devices", "functional/ivy/device/get_all_ivy_arrays_on_dev", "functional/ivy/device/gpu_is_available", "functional/ivy/device/num_cpu_cores", "functional/ivy/device/num_gpus", "functional/ivy/device/num_ivy_arrays_on_dev", "functional/ivy/device/percent_used_mem_on_dev", "functional/ivy/device/print_all_ivy_arrays_on_dev", "functional/ivy/device/set_default_device", "functional/ivy/device/set_split_factor", "functional/ivy/device/split_factor", "functional/ivy/device/split_func_call", "functional/ivy/device/to_device", "functional/ivy/device/to_device/to_device_container", "functional/ivy/device/to_device/to_device_functional", "functional/ivy/device/total_mem_on_dev", "functional/ivy/device/tpu_is_available", "functional/ivy/device/unset_default_device", "functional/ivy/device/used_mem_on_dev", "functional/ivy/elementwise", "functional/ivy/elementwise/abs", "functional/ivy/elementwise/acos", "functional/ivy/elementwise/acosh", "functional/ivy/elementwise/add", "functional/ivy/elementwise/asin", "functional/ivy/elementwise/asinh", "functional/ivy/elementwise/atan", "functional/ivy/elementwise/atan2", "functional/ivy/elementwise/atanh", "functional/ivy/elementwise/bitwise_and", "functional/ivy/elementwise/bitwise_invert", "functional/ivy/elementwise/bitwise_left_shift", "functional/ivy/elementwise/bitwise_or", "functional/ivy/elementwise/bitwise_right_shift", "functional/ivy/elementwise/bitwise_xor", "functional/ivy/elementwise/ceil", "functional/ivy/elementwise/cos", "functional/ivy/elementwise/cosh", "functional/ivy/elementwise/divide", "functional/ivy/elementwise/equal", "functional/ivy/elementwise/erf", "functional/ivy/elementwise/exp", "functional/ivy/elementwise/expm1", "functional/ivy/elementwise/floor", "functional/ivy/elementwise/floor_divide", "functional/ivy/elementwise/floormod", "functional/ivy/elementwise/greater", "functional/ivy/elementwise/greater_equal", "functional/ivy/elementwise/isfinite", "functional/ivy/elementwise/isinf", "functional/ivy/elementwise/isnan", "functional/ivy/elementwise/less", "functional/ivy/elementwise/less_equal", "functional/ivy/elementwise/log", "functional/ivy/elementwise/log10", "functional/ivy/elementwise/log1p", "functional/ivy/elementwise/log2", "functional/ivy/elementwise/logaddexp", "functional/ivy/elementwise/logical_and", "functional/ivy/elementwise/logical_not", "functional/ivy/elementwise/logical_or", "functional/ivy/elementwise/logical_xor", "functional/ivy/elementwise/maximum", "functional/ivy/elementwise/minimum", "functional/ivy/elementwise/multiply", "functional/ivy/elementwise/negative", "functional/ivy/elementwise/not_equal", "functional/ivy/elementwise/positive", "functional/ivy/elementwise/pow", "functional/ivy/elementwise/reciprocal", "functional/ivy/elementwise/remainder", "functional/ivy/elementwise/remainder/remainder_functional", "functional/ivy/elementwise/remainder/static_remainder_container", "functional/ivy/elementwise/round", "functional/ivy/elementwise/sign", "functional/ivy/elementwise/sin", "functional/ivy/elementwise/sinh", "functional/ivy/elementwise/sqrt", "functional/ivy/elementwise/square", "functional/ivy/elementwise/subtract", "functional/ivy/elementwise/subtract/subtract_container", "functional/ivy/elementwise/subtract/subtract_functional", "functional/ivy/elementwise/tan", "functional/ivy/elementwise/tanh", "functional/ivy/elementwise/trunc", "functional/ivy/extensions", "functional/ivy/general", "functional/ivy/general/all_equal", "functional/ivy/general/arg_info", "functional/ivy/general/arg_names", "functional/ivy/general/array_equal", "functional/ivy/general/arrays_equal", "functional/ivy/general/assert_supports_inplace", "functional/ivy/general/cache_fn", "functional/ivy/general/clip_matrix_norm", "functional/ivy/general/clip_vector_norm", "functional/ivy/general/container_types", "functional/ivy/general/copy_array", "functional/ivy/general/cumprod", "functional/ivy/general/cumsum", "functional/ivy/general/current_backend_str", "functional/ivy/general/default", "functional/ivy/general/einops_rearrange", "functional/ivy/general/einops_reduce", "functional/ivy/general/einops_repeat", "functional/ivy/general/exists", "functional/ivy/general/fourier_encode", "functional/ivy/general/function_supported_devices_and_dtypes", "functional/ivy/general/function_unsupported_devices_and_dtypes", "functional/ivy/general/gather", "functional/ivy/general/gather_nd", "functional/ivy/general/get_all_arrays_in_memory", "functional/ivy/general/get_array_mode", "functional/ivy/general/get_min_base", "functional/ivy/general/get_min_denominator", "functional/ivy/general/get_nestable_mode", "functional/ivy/general/get_num_dims", "functional/ivy/general/get_queue_timeout", "functional/ivy/general/get_referrers_recursive", "functional/ivy/general/get_tmp_dir", "functional/ivy/general/has_nans", "functional/ivy/general/indices_where", "functional/ivy/general/inplace_arrays_supported", "functional/ivy/general/inplace_decrement", "functional/ivy/general/inplace_increment", "functional/ivy/general/inplace_update", "functional/ivy/general/inplace_variables_supported", "functional/ivy/general/is_array", "functional/ivy/general/is_array/is_array_container", "functional/ivy/general/is_array/is_array_functional", "functional/ivy/general/is_ivy_array", "functional/ivy/general/is_ivy_container", "functional/ivy/general/is_native_array", "functional/ivy/general/match_kwargs", "functional/ivy/general/multiprocessing", "functional/ivy/general/num_arrays_in_memory", "functional/ivy/general/one_hot", "functional/ivy/general/print_all_arrays_in_memory", "functional/ivy/general/scatter_flat", "functional/ivy/general/scatter_nd", "functional/ivy/general/set_array_mode", "functional/ivy/general/set_min_base", "functional/ivy/general/set_min_denominator", "functional/ivy/general/set_nestable_mode", "functional/ivy/general/set_queue_timeout", "functional/ivy/general/set_shape_array_mode", "functional/ivy/general/set_tmp_dir", "functional/ivy/general/shape", "functional/ivy/general/shape_array_mode", "functional/ivy/general/stable_divide", "functional/ivy/general/stable_pow", "functional/ivy/general/supports_inplace", "functional/ivy/general/to_ivy_shape", "functional/ivy/general/to_list", "functional/ivy/general/to_native_shape", "functional/ivy/general/to_numpy", "functional/ivy/general/to_scalar", "functional/ivy/general/try_else_none", "functional/ivy/general/unset_array_mode", "functional/ivy/general/unset_nestable_mode", "functional/ivy/general/unset_queue_timeout", "functional/ivy/general/unset_shape_array_mode", "functional/ivy/general/unstack", "functional/ivy/general/value_is_nan", "functional/ivy/general/vmap", "functional/ivy/gradients", "functional/ivy/gradients/adam_step", "functional/ivy/gradients/adam_update", "functional/ivy/gradients/execute_with_gradients", "functional/ivy/gradients/grad", "functional/ivy/gradients/gradient_descent_update", "functional/ivy/gradients/is_variable", "functional/ivy/gradients/jac", "functional/ivy/gradients/lamb_update", "functional/ivy/gradients/lars_update", "functional/ivy/gradients/optimizer_update", "functional/ivy/gradients/set_with_grads", "functional/ivy/gradients/stop_gradient", "functional/ivy/gradients/unset_with_grads", "functional/ivy/gradients/value_and_grad", "functional/ivy/gradients/variable", "functional/ivy/gradients/variable_data", "functional/ivy/gradients/with_grads", "functional/ivy/layers", "functional/ivy/layers/conv1d", "functional/ivy/layers/conv1d_transpose", "functional/ivy/layers/conv2d", "functional/ivy/layers/conv2d_transpose", "functional/ivy/layers/conv3d", "functional/ivy/layers/conv3d_transpose", "functional/ivy/layers/deconv_length", "functional/ivy/layers/depthwise_conv2d", "functional/ivy/layers/dropout", "functional/ivy/layers/handle_padding", "functional/ivy/layers/linear", "functional/ivy/layers/lstm_update", "functional/ivy/layers/multi_head_attention", "functional/ivy/layers/scaled_dot_product_attention", "functional/ivy/linear_algebra", "functional/ivy/linear_algebra/cholesky", "functional/ivy/linear_algebra/cross", "functional/ivy/linear_algebra/det", "functional/ivy/linear_algebra/diagonal", "functional/ivy/linear_algebra/eigh", "functional/ivy/linear_algebra/eigvalsh", "functional/ivy/linear_algebra/inv", "functional/ivy/linear_algebra/matmul", "functional/ivy/linear_algebra/matrix_norm", "functional/ivy/linear_algebra/matrix_power", "functional/ivy/linear_algebra/matrix_rank", "functional/ivy/linear_algebra/matrix_transpose", "functional/ivy/linear_algebra/outer", "functional/ivy/linear_algebra/pinv", "functional/ivy/linear_algebra/qr", "functional/ivy/linear_algebra/slogdet", "functional/ivy/linear_algebra/solve", "functional/ivy/linear_algebra/svd", "functional/ivy/linear_algebra/svdvals", "functional/ivy/linear_algebra/tensordot", "functional/ivy/linear_algebra/trace", "functional/ivy/linear_algebra/vecdot", "functional/ivy/linear_algebra/vector_norm", "functional/ivy/linear_algebra/vector_to_skew_symmetric_matrix", "functional/ivy/losses", "functional/ivy/losses/binary_cross_entropy", "functional/ivy/losses/cross_entropy", "functional/ivy/losses/sparse_cross_entropy", "functional/ivy/manipulation", "functional/ivy/manipulation/clip", "functional/ivy/manipulation/concat", "functional/ivy/manipulation/constant_pad", "functional/ivy/manipulation/expand_dims", "functional/ivy/manipulation/flip", "functional/ivy/manipulation/permute_dims", "functional/ivy/manipulation/repeat", "functional/ivy/manipulation/reshape", "functional/ivy/manipulation/roll", "functional/ivy/manipulation/split", "functional/ivy/manipulation/squeeze", "functional/ivy/manipulation/stack", "functional/ivy/manipulation/swapaxes", "functional/ivy/manipulation/tile", "functional/ivy/manipulation/zero_pad", "functional/ivy/meta", "functional/ivy/meta/fomaml_step", "functional/ivy/meta/maml_step", "functional/ivy/meta/reptile_step", "functional/ivy/nest", "functional/ivy/nest/all_nested_indices", "functional/ivy/nest/copy_nest", "functional/ivy/nest/index_nest", "functional/ivy/nest/insert_into_nest_at_index", "functional/ivy/nest/insert_into_nest_at_indices", "functional/ivy/nest/map", "functional/ivy/nest/map_nest_at_index", "functional/ivy/nest/map_nest_at_indices", "functional/ivy/nest/multi_index_nest", "functional/ivy/nest/nested_any", "functional/ivy/nest/nested_indices_where", "functional/ivy/nest/nested_map", "functional/ivy/nest/nested_multi_map", "functional/ivy/nest/prune_nest_at_index", "functional/ivy/nest/prune_nest_at_indices", "functional/ivy/nest/set_nest_at_index", "functional/ivy/nest/set_nest_at_indices", "functional/ivy/norms", "functional/ivy/norms/layer_norm", "functional/ivy/random", "functional/ivy/random/multinomial", "functional/ivy/random/randint", "functional/ivy/random/random_normal", "functional/ivy/random/random_uniform", "functional/ivy/random/seed", "functional/ivy/random/shuffle", "functional/ivy/searching", "functional/ivy/searching/argmax", "functional/ivy/searching/argmin", "functional/ivy/searching/nonzero", "functional/ivy/searching/where", "functional/ivy/set", "functional/ivy/set/unique_all", "functional/ivy/set/unique_counts", "functional/ivy/set/unique_inverse", "functional/ivy/set/unique_values", "functional/ivy/sorting", "functional/ivy/sorting/argsort", "functional/ivy/sorting/searchsorted", "functional/ivy/sorting/sort", "functional/ivy/statistical", "functional/ivy/statistical/einsum", "functional/ivy/statistical/max", "functional/ivy/statistical/mean", "functional/ivy/statistical/min", "functional/ivy/statistical/prod", "functional/ivy/statistical/std", "functional/ivy/statistical/sum", "functional/ivy/statistical/var", "functional/ivy/utility", "functional/ivy/utility/all", "functional/ivy/utility/any", "glossary", "index", "index_append", "index_prepend", "inspection", "inspection/add_array_specs", "inspection/fn_array_spec", "roadmap", "stateful/activations", "stateful/activations/GEGLU", "stateful/activations/GELU", "stateful/converters", "stateful/converters/to_ivy_module", "stateful/initializers", "stateful/initializers/Constant", "stateful/initializers/FirstLayerSiren", "stateful/initializers/GlorotUniform", "stateful/initializers/Initializer", "stateful/initializers/KaimingNormal", "stateful/initializers/Ones", "stateful/initializers/Siren", "stateful/initializers/Uniform", "stateful/initializers/Zeros", "stateful/layers", "stateful/layers/Conv1D", "stateful/layers/Conv1DTranspose", "stateful/layers/Conv2D", "stateful/layers/Conv2DTranspose", "stateful/layers/Conv3D", "stateful/layers/Conv3DTranspose", "stateful/layers/DepthwiseConv2D", "stateful/layers/Dropout", "stateful/layers/LSTM", "stateful/layers/Linear", "stateful/layers/MultiHeadAttention", "stateful/module", "stateful/module/Module", "stateful/norms", "stateful/norms/LayerNorm", "stateful/optimizers", "stateful/optimizers/Adam", "stateful/optimizers/LAMB", "stateful/optimizers/LARS", "stateful/optimizers/Optimizer", "stateful/optimizers/SGD", "stateful/sequential", "stateful/sequential/Sequential", "supported_frameworks", "verbosity", "verbosity/cprint"], "filenames": ["array/activations.rst", "array/activations/ArrayWithActivations.rst", "array/array.rst", "array/array/Array.rst", "array/array/Variable.rst", "array/array_methods.rst", "array/array_methods/abs.rst", "array/array_methods/acos.rst", "array/array_methods/acosh.rst", "array/array_methods/adam_step.rst", "array/array_methods/adam_update.rst", "array/array_methods/add.rst", "array/array_methods/add_ivy_array_instance_methods.rst", "array/array_methods/all.rst", "array/array_methods/all_equal.rst", "array/array_methods/any.rst", "array/array_methods/argmax.rst", "array/array_methods/argmin.rst", "array/array_methods/argsort.rst", "array/array_methods/array_equal.rst", "array/array_methods/arrays_equal.rst", "array/array_methods/asarray.rst", "array/array_methods/asin.rst", "array/array_methods/asinh.rst", "array/array_methods/assert_supports_inplace.rst", "array/array_methods/astype.rst", "array/array_methods/atan.rst", "array/array_methods/atan2.rst", "array/array_methods/atanh.rst", "array/array_methods/binary_cross_entropy.rst", "array/array_methods/bitwise_and.rst", "array/array_methods/bitwise_invert.rst", "array/array_methods/bitwise_left_shift.rst", "array/array_methods/bitwise_or.rst", "array/array_methods/bitwise_right_shift.rst", "array/array_methods/bitwise_xor.rst", "array/array_methods/broadcast_arrays.rst", "array/array_methods/broadcast_to.rst", "array/array_methods/can_cast.rst", "array/array_methods/ceil.rst", "array/array_methods/cholesky.rst", "array/array_methods/clip.rst", "array/array_methods/clip_matrix_norm.rst", "array/array_methods/clip_vector_norm.rst", "array/array_methods/concat.rst", "array/array_methods/constant_pad.rst", "array/array_methods/conv1d.rst", "array/array_methods/conv1d_transpose.rst", "array/array_methods/conv3d.rst", "array/array_methods/conv3d_transpose.rst", "array/array_methods/copy_array.rst", "array/array_methods/cos.rst", "array/array_methods/cosh.rst", "array/array_methods/cross.rst", "array/array_methods/cross_entropy.rst", "array/array_methods/cumprod.rst", "array/array_methods/cumsum.rst", "array/array_methods/default.rst", "array/array_methods/depthwise_conv2d.rst", "array/array_methods/det.rst", "array/array_methods/dev.rst", "array/array_methods/diagonal.rst", "array/array_methods/divide.rst", "array/array_methods/dropout.rst", "array/array_methods/dtype.rst", "array/array_methods/eigh.rst", "array/array_methods/eigvalsh.rst", "array/array_methods/einops_rearrange.rst", "array/array_methods/einops_reduce.rst", "array/array_methods/einops_repeat.rst", "array/array_methods/einsum.rst", "array/array_methods/empty_like.rst", "array/array_methods/equal.rst", "array/array_methods/erf.rst", "array/array_methods/exists.rst", "array/array_methods/exp.rst", "array/array_methods/expand_dims.rst", "array/array_methods/expm1.rst", "array/array_methods/finfo.rst", "array/array_methods/flip.rst", "array/array_methods/floor.rst", "array/array_methods/floor_divide.rst", "array/array_methods/floormod.rst", "array/array_methods/fourier_encode.rst", "array/array_methods/from_dlpack.rst", "array/array_methods/full_like.rst", "array/array_methods/gather.rst", "array/array_methods/gather_nd.rst", "array/array_methods/gelu.rst", "array/array_methods/get_num_dims.rst", "array/array_methods/gradient_descent_update.rst", "array/array_methods/greater.rst", "array/array_methods/greater_equal.rst", "array/array_methods/has_nans.rst", "array/array_methods/iinfo.rst", "array/array_methods/indices_where.rst", "array/array_methods/inplace_decrement.rst", "array/array_methods/inplace_increment.rst", "array/array_methods/inplace_update.rst", "array/array_methods/inv.rst", "array/array_methods/is_array.rst", "array/array_methods/is_bool_dtype.rst", "array/array_methods/is_float_dtype.rst", "array/array_methods/is_int_dtype.rst", "array/array_methods/is_ivy_array.rst", "array/array_methods/is_ivy_container.rst", "array/array_methods/is_native_array.rst", "array/array_methods/is_uint_dtype.rst", "array/array_methods/is_variable.rst", "array/array_methods/isfinite.rst", "array/array_methods/isinf.rst", "array/array_methods/isnan.rst", "array/array_methods/lamb_update.rst", "array/array_methods/lars_update.rst", "array/array_methods/layer_norm.rst", "array/array_methods/leaky_relu.rst", "array/array_methods/less.rst", "array/array_methods/less_equal.rst", "array/array_methods/linear.rst", "array/array_methods/log.rst", "array/array_methods/log10.rst", "array/array_methods/log1p.rst", "array/array_methods/log2.rst", "array/array_methods/logaddexp.rst", "array/array_methods/logical_and.rst", "array/array_methods/logical_not.rst", "array/array_methods/logical_or.rst", "array/array_methods/logical_xor.rst", "array/array_methods/lstm_update.rst", "array/array_methods/matmul.rst", "array/array_methods/matrix_norm.rst", "array/array_methods/matrix_rank.rst", "array/array_methods/matrix_transpose.rst", "array/array_methods/max.rst", "array/array_methods/mean.rst", "array/array_methods/meshgrid.rst", "array/array_methods/min.rst", "array/array_methods/multi_head_attention.rst", "array/array_methods/multinomial.rst", "array/array_methods/multiply.rst", "array/array_methods/native_array.rst", "array/array_methods/negative.rst", "array/array_methods/nonzero.rst", "array/array_methods/not_equal.rst", "array/array_methods/one_hot.rst", "array/array_methods/ones_like.rst", "array/array_methods/optimizer_update.rst", "array/array_methods/outer.rst", "array/array_methods/permute_dims.rst", "array/array_methods/pinv.rst", "array/array_methods/positive.rst", "array/array_methods/pow.rst", "array/array_methods/prod.rst", "array/array_methods/qr.rst", "array/array_methods/randint.rst", "array/array_methods/random_normal.rst", "array/array_methods/random_uniform.rst", "array/array_methods/relu.rst", "array/array_methods/remainder.rst", "array/array_methods/repeat.rst", "array/array_methods/reshape.rst", "array/array_methods/result_type.rst", "array/array_methods/roll.rst", "array/array_methods/round.rst", "array/array_methods/scaled_dot_product_attention.rst", "array/array_methods/scatter_flat.rst", "array/array_methods/scatter_nd.rst", "array/array_methods/searchsorted.rst", "array/array_methods/shuffle.rst", "array/array_methods/sigmoid.rst", "array/array_methods/sign.rst", "array/array_methods/sin.rst", "array/array_methods/sinh.rst", "array/array_methods/softmax.rst", "array/array_methods/softplus.rst", "array/array_methods/solve.rst", "array/array_methods/sort.rst", "array/array_methods/sparse_cross_entropy.rst", "array/array_methods/split.rst", "array/array_methods/sqrt.rst", "array/array_methods/square.rst", "array/array_methods/squeeze.rst", "array/array_methods/stable_divide.rst", "array/array_methods/stable_pow.rst", "array/array_methods/stack.rst", "array/array_methods/std.rst", "array/array_methods/stop_gradient.rst", "array/array_methods/subtract.rst", "array/array_methods/sum.rst", "array/array_methods/supports_inplace.rst", "array/array_methods/svd.rst", "array/array_methods/svdvals.rst", "array/array_methods/swapaxes.rst", "array/array_methods/tan.rst", "array/array_methods/tanh.rst", "array/array_methods/tensordot.rst", "array/array_methods/tile.rst", "array/array_methods/to_device.rst", "array/array_methods/to_list.rst", "array/array_methods/to_numpy.rst", "array/array_methods/to_scalar.rst", "array/array_methods/trace.rst", "array/array_methods/tril.rst", "array/array_methods/triu.rst", "array/array_methods/trunc.rst", "array/array_methods/unique_all.rst", "array/array_methods/unique_counts.rst", "array/array_methods/unique_inverse.rst", "array/array_methods/unique_values.rst", "array/array_methods/unstack.rst", "array/array_methods/value_is_nan.rst", "array/array_methods/var.rst", "array/array_methods/variable.rst", "array/array_methods/variable_data.rst", "array/array_methods/vecdot.rst", "array/array_methods/vector_norm.rst", "array/array_methods/vector_to_skew_symmetric_matrix.rst", "array/array_methods/where.rst", "array/array_methods/zero_pad.rst", "array/array_methods/zeros_like.rst", "array/conversions.rst", "array/conversions/args_to_ivy.rst", "array/conversions/args_to_native.rst", "array/conversions/to_ivy.rst", "array/conversions/to_native.rst", "array/creation.rst", "array/creation/ArrayWithCreation.rst", "array/data_type.rst", "array/data_type/ArrayWithDataTypes.rst", "array/device.rst", "array/device/ArrayWithDevice.rst", "array/elementwise.rst", "array/elementwise/ArrayWithElementwise.rst", "array/general.rst", "array/general/ArrayWithGeneral.rst", "array/gradients.rst", "array/gradients/ArrayWithGradients.rst", "array/image.rst", "array/image/ArrayWithImage.rst", "array/layers.rst", "array/layers/ArrayWithLayers.rst", "array/linear_algebra.rst", "array/linear_algebra/ArrayWithLinearAlgebra.rst", "array/losses.rst", "array/losses/ArrayWithLosses.rst", "array/manipulation.rst", "array/manipulation/ArrayWithManipulation.rst", "array/norms.rst", "array/norms/ArrayWithNorms.rst", "array/random.rst", "array/random/ArrayWithRandom.rst", "array/searching.rst", "array/searching/ArrayWithSearching.rst", "array/set.rst", "array/set/ArrayWithSet.rst", "array/sorting.rst", "array/sorting/ArrayWithSorting.rst", "array/statistical.rst", "array/statistical/ArrayWithStatistical.rst", "array/utility.rst", "array/utility/ArrayWithUtility.rst", "array/wrapping.rst", "array/wrapping/add_ivy_array_instance_methods.rst", "backend_handler.rst", "backend_handler/choose_random_backend.rst", "backend_handler/clear_backend_stack.rst", "backend_handler/current_backend.rst", "backend_handler/fn_name_from_version_specific_fn_name.rst", "backend_handler/get_backend.rst", "backend_handler/set_backend.rst", "backend_handler/set_backend_to_specific_version.rst", "backend_handler/try_import_ivy_jax.rst", "backend_handler/try_import_ivy_mxnet.rst", "backend_handler/try_import_ivy_numpy.rst", "backend_handler/try_import_ivy_tf.rst", "backend_handler/try_import_ivy_torch.rst", "backend_handler/unset_backend.rst", "background.rst", "background/ml_explosion.rst", "background/standardization.rst", "background/why_unify.rst", "container/activations.rst", "container/activations/ContainerWithActivations.rst", "container/base.rst", "container/base/ContainerBase.rst", "container/container.rst", "container/container/Container.rst", "container/container_methods.rst", "container/container_methods/abs.rst", "container/container_methods/acos.rst", "container/container_methods/acosh.rst", "container/container_methods/adam_step.rst", "container/container_methods/adam_update.rst", "container/container_methods/add.rst", "container/container_methods/add_ivy_container_instance_methods.rst", "container/container_methods/all.rst", "container/container_methods/all_equal.rst", "container/container_methods/any.rst", "container/container_methods/argmax.rst", "container/container_methods/argmin.rst", "container/container_methods/argsort.rst", "container/container_methods/asin.rst", "container/container_methods/asinh.rst", "container/container_methods/assert_supports_inplace.rst", "container/container_methods/astype.rst", "container/container_methods/atan.rst", "container/container_methods/atan2.rst", "container/container_methods/atanh.rst", "container/container_methods/binary_cross_entropy.rst", "container/container_methods/bitwise_and.rst", "container/container_methods/bitwise_invert.rst", "container/container_methods/bitwise_left_shift.rst", "container/container_methods/bitwise_or.rst", "container/container_methods/bitwise_right_shift.rst", "container/container_methods/bitwise_xor.rst", "container/container_methods/broadcast_arrays.rst", "container/container_methods/broadcast_to.rst", "container/container_methods/can_cast.rst", "container/container_methods/ceil.rst", "container/container_methods/cholesky.rst", "container/container_methods/clip.rst", "container/container_methods/clip_matrix_norm.rst", "container/container_methods/clip_vector_norm.rst", "container/container_methods/concat.rst", "container/container_methods/constant_pad.rst", "container/container_methods/conv1d.rst", "container/container_methods/conv1d_transpose.rst", "container/container_methods/conv2d.rst", "container/container_methods/conv2d_transpose.rst", "container/container_methods/conv3d.rst", "container/container_methods/conv3d_transpose.rst", "container/container_methods/cos.rst", "container/container_methods/cosh.rst", "container/container_methods/cross.rst", "container/container_methods/cross_entropy.rst", "container/container_methods/cumprod.rst", "container/container_methods/cumsum.rst", "container/container_methods/depthwise_conv2d.rst", "container/container_methods/det.rst", "container/container_methods/dev.rst", "container/container_methods/diagonal.rst", "container/container_methods/divide.rst", "container/container_methods/dropout.rst", "container/container_methods/dtype.rst", "container/container_methods/eigh.rst", "container/container_methods/einops_rearrange.rst", "container/container_methods/einops_reduce.rst", "container/container_methods/einops_repeat.rst", "container/container_methods/einsum.rst", "container/container_methods/empty_like.rst", "container/container_methods/equal.rst", "container/container_methods/erf.rst", "container/container_methods/exp.rst", "container/container_methods/expand_dims.rst", "container/container_methods/expm1.rst", "container/container_methods/finfo.rst", "container/container_methods/flip.rst", "container/container_methods/floor.rst", "container/container_methods/floor_divide.rst", "container/container_methods/floormod.rst", "container/container_methods/fourier_encode.rst", "container/container_methods/from_dlpack.rst", "container/container_methods/full_like.rst", "container/container_methods/gather.rst", "container/container_methods/gather_nd.rst", "container/container_methods/gelu.rst", "container/container_methods/gradient_descent_update.rst", "container/container_methods/greater.rst", "container/container_methods/greater_equal.rst", "container/container_methods/has_nans.rst", "container/container_methods/iinfo.rst", "container/container_methods/indices_where.rst", "container/container_methods/inplace_decrement.rst", "container/container_methods/inplace_increment.rst", "container/container_methods/inplace_update.rst", "container/container_methods/inv.rst", "container/container_methods/is_array.rst", "container/container_methods/is_bool_dtype.rst", "container/container_methods/is_float_dtype.rst", "container/container_methods/is_int_dtype.rst", "container/container_methods/is_ivy_array.rst", "container/container_methods/is_ivy_container.rst", "container/container_methods/is_native_array.rst", "container/container_methods/is_uint_dtype.rst", "container/container_methods/is_variable.rst", "container/container_methods/isfinite.rst", "container/container_methods/isinf.rst", "container/container_methods/isnan.rst", "container/container_methods/lamb_update.rst", "container/container_methods/lars_update.rst", "container/container_methods/layer_norm.rst", "container/container_methods/leaky_relu.rst", "container/container_methods/less.rst", "container/container_methods/less_equal.rst", "container/container_methods/linear.rst", "container/container_methods/log.rst", "container/container_methods/log10.rst", "container/container_methods/log1p.rst", "container/container_methods/log2.rst", "container/container_methods/logaddexp.rst", "container/container_methods/logical_and.rst", "container/container_methods/logical_not.rst", "container/container_methods/logical_or.rst", "container/container_methods/logical_xor.rst", "container/container_methods/lstm_update.rst", "container/container_methods/matmul.rst", "container/container_methods/matrix_norm.rst", "container/container_methods/matrix_power.rst", "container/container_methods/matrix_rank.rst", "container/container_methods/matrix_transpose.rst", "container/container_methods/max.rst", "container/container_methods/maximum.rst", "container/container_methods/mean.rst", "container/container_methods/meshgrid.rst", "container/container_methods/min.rst", "container/container_methods/minimum.rst", "container/container_methods/multi_head_attention.rst", "container/container_methods/multinomial.rst", "container/container_methods/multiply.rst", "container/container_methods/native_array.rst", "container/container_methods/negative.rst", "container/container_methods/nonzero.rst", "container/container_methods/not_equal.rst", "container/container_methods/one_hot.rst", "container/container_methods/ones_like.rst", "container/container_methods/optimizer_update.rst", "container/container_methods/outer.rst", "container/container_methods/permute_dims.rst", "container/container_methods/positive.rst", "container/container_methods/pow.rst", "container/container_methods/prod.rst", "container/container_methods/qr.rst", "container/container_methods/randint.rst", "container/container_methods/random_normal.rst", "container/container_methods/random_uniform.rst", "container/container_methods/relu.rst", "container/container_methods/remainder.rst", "container/container_methods/repeat.rst", "container/container_methods/reshape.rst", "container/container_methods/result_type.rst", "container/container_methods/roll.rst", "container/container_methods/round.rst", "container/container_methods/scaled_dot_product_attention.rst", "container/container_methods/scatter_flat.rst", "container/container_methods/scatter_nd.rst", "container/container_methods/searchsorted.rst", "container/container_methods/shuffle.rst", "container/container_methods/sigmoid.rst", "container/container_methods/sign.rst", "container/container_methods/sin.rst", "container/container_methods/sinh.rst", "container/container_methods/slogdet.rst", "container/container_methods/softmax.rst", "container/container_methods/softplus.rst", "container/container_methods/solve.rst", "container/container_methods/sort.rst", "container/container_methods/sparse_cross_entropy.rst", "container/container_methods/split.rst", "container/container_methods/sqrt.rst", "container/container_methods/square.rst", "container/container_methods/squeeze.rst", "container/container_methods/stable_divide.rst", "container/container_methods/stable_pow.rst", "container/container_methods/stack.rst", "container/container_methods/static_abs.rst", "container/container_methods/static_acos.rst", "container/container_methods/static_acosh.rst", "container/container_methods/static_add.rst", "container/container_methods/static_all.rst", "container/container_methods/static_all_equal.rst", "container/container_methods/static_any.rst", "container/container_methods/static_arange.rst", "container/container_methods/static_argmax.rst", "container/container_methods/static_argmin.rst", "container/container_methods/static_argsort.rst", "container/container_methods/static_asarray.rst", "container/container_methods/static_asin.rst", "container/container_methods/static_asinh.rst", "container/container_methods/static_assert_supports_inplace.rst", "container/container_methods/static_astype.rst", "container/container_methods/static_atan.rst", "container/container_methods/static_atan2.rst", "container/container_methods/static_atanh.rst", "container/container_methods/static_binary_cross_entropy.rst", "container/container_methods/static_bitwise_and.rst", "container/container_methods/static_bitwise_invert.rst", "container/container_methods/static_bitwise_left_shift.rst", "container/container_methods/static_bitwise_or.rst", "container/container_methods/static_bitwise_right_shift.rst", "container/container_methods/static_bitwise_xor.rst", "container/container_methods/static_broadcast_arrays.rst", "container/container_methods/static_broadcast_to.rst", "container/container_methods/static_can_cast.rst", "container/container_methods/static_ceil.rst", "container/container_methods/static_cholesky.rst", "container/container_methods/static_clip.rst", "container/container_methods/static_clip_matrix_norm.rst", "container/container_methods/static_clip_vector_norm.rst", "container/container_methods/static_concat.rst", "container/container_methods/static_constant_pad.rst", "container/container_methods/static_conv1d.rst", "container/container_methods/static_conv1d_transpose.rst", "container/container_methods/static_conv2d.rst", "container/container_methods/static_conv2d_transpose.rst", "container/container_methods/static_conv3d.rst", "container/container_methods/static_conv3d_transpose.rst", "container/container_methods/static_cos.rst", "container/container_methods/static_cosh.rst", "container/container_methods/static_cross.rst", "container/container_methods/static_cross_entropy.rst", "container/container_methods/static_cumprod.rst", "container/container_methods/static_cumsum.rst", "container/container_methods/static_default_float_dtype.rst", "container/container_methods/static_depthwise_conv2d.rst", "container/container_methods/static_det.rst", "container/container_methods/static_dev.rst", "container/container_methods/static_diagonal.rst", "container/container_methods/static_divide.rst", "container/container_methods/static_dropout.rst", "container/container_methods/static_dtype.rst", "container/container_methods/static_einops_rearrange.rst", "container/container_methods/static_einops_reduce.rst", "container/container_methods/static_einops_repeat.rst", "container/container_methods/static_empty_like.rst", "container/container_methods/static_equal.rst", "container/container_methods/static_erf.rst", "container/container_methods/static_exp.rst", "container/container_methods/static_expand_dims.rst", "container/container_methods/static_expm1.rst", "container/container_methods/static_eye.rst", "container/container_methods/static_finfo.rst", "container/container_methods/static_flip.rst", "container/container_methods/static_floor.rst", "container/container_methods/static_floor_divide.rst", "container/container_methods/static_floormod.rst", "container/container_methods/static_fourier_encode.rst", "container/container_methods/static_from_dlpack.rst", "container/container_methods/static_full_like.rst", "container/container_methods/static_function_supported_dtypes.rst", "container/container_methods/static_function_unsupported_dtypes.rst", "container/container_methods/static_gather.rst", "container/container_methods/static_gather_nd.rst", "container/container_methods/static_gelu.rst", "container/container_methods/static_greater.rst", "container/container_methods/static_greater_equal.rst", "container/container_methods/static_has_nans.rst", "container/container_methods/static_iinfo.rst", "container/container_methods/static_indices_where.rst", "container/container_methods/static_inplace_decrement.rst", "container/container_methods/static_inplace_increment.rst", "container/container_methods/static_inplace_update.rst", "container/container_methods/static_inv.rst", "container/container_methods/static_is_array.rst", "container/container_methods/static_is_bool_dtype.rst", "container/container_methods/static_is_float_dtype.rst", "container/container_methods/static_is_int_dtype.rst", "container/container_methods/static_is_ivy_array.rst", "container/container_methods/static_is_ivy_container.rst", "container/container_methods/static_is_native_array.rst", "container/container_methods/static_is_uint_dtype.rst", "container/container_methods/static_is_variable.rst", "container/container_methods/static_isfinite.rst", "container/container_methods/static_isinf.rst", "container/container_methods/static_isnan.rst", "container/container_methods/static_leaky_relu.rst", "container/container_methods/static_less.rst", "container/container_methods/static_less_equal.rst", "container/container_methods/static_linear.rst", "container/container_methods/static_linspace.rst", "container/container_methods/static_log.rst", "container/container_methods/static_log10.rst", "container/container_methods/static_log1p.rst", "container/container_methods/static_log2.rst", "container/container_methods/static_logaddexp.rst", "container/container_methods/static_logical_and.rst", "container/container_methods/static_logical_not.rst", "container/container_methods/static_logical_or.rst", "container/container_methods/static_logical_xor.rst", "container/container_methods/static_logspace.rst", "container/container_methods/static_lstm_update.rst", "container/container_methods/static_matrix_norm.rst", "container/container_methods/static_matrix_power.rst", "container/container_methods/static_matrix_rank.rst", "container/container_methods/static_matrix_transpose.rst", "container/container_methods/static_maximum.rst", "container/container_methods/static_meshgrid.rst", "container/container_methods/static_minimum.rst", "container/container_methods/static_multi_head_attention.rst", "container/container_methods/static_multinomial.rst", "container/container_methods/static_multiply.rst", "container/container_methods/static_native_array.rst", "container/container_methods/static_negative.rst", "container/container_methods/static_nonzero.rst", "container/container_methods/static_not_equal.rst", "container/container_methods/static_one_hot.rst", "container/container_methods/static_ones.rst", "container/container_methods/static_ones_like.rst", "container/container_methods/static_outer.rst", "container/container_methods/static_permute_dims.rst", "container/container_methods/static_positive.rst", "container/container_methods/static_pow.rst", "container/container_methods/static_qr.rst", "container/container_methods/static_randint.rst", "container/container_methods/static_random_normal.rst", "container/container_methods/static_random_uniform.rst", "container/container_methods/static_relu.rst", "container/container_methods/static_remainder.rst", "container/container_methods/static_repeat.rst", "container/container_methods/static_reshape.rst", "container/container_methods/static_result_type.rst", "container/container_methods/static_roll.rst", "container/container_methods/static_round.rst", "container/container_methods/static_scaled_dot_product_attention.rst", "container/container_methods/static_scatter_flat.rst", "container/container_methods/static_scatter_nd.rst", "container/container_methods/static_searchsorted.rst", "container/container_methods/static_shuffle.rst", "container/container_methods/static_sigmoid.rst", "container/container_methods/static_sign.rst", "container/container_methods/static_sin.rst", "container/container_methods/static_sinh.rst", "container/container_methods/static_slogdet.rst", "container/container_methods/static_softmax.rst", "container/container_methods/static_softplus.rst", "container/container_methods/static_solve.rst", "container/container_methods/static_sort.rst", "container/container_methods/static_sparse_cross_entropy.rst", "container/container_methods/static_split.rst", "container/container_methods/static_sqrt.rst", "container/container_methods/static_square.rst", "container/container_methods/static_squeeze.rst", "container/container_methods/static_stable_divide.rst", "container/container_methods/static_stable_pow.rst", "container/container_methods/static_stack.rst", "container/container_methods/static_stop_gradient.rst", "container/container_methods/static_subtract.rst", "container/container_methods/static_supports_inplace_update.rst", "container/container_methods/static_svd.rst", "container/container_methods/static_svdvals.rst", "container/container_methods/static_swapaxes.rst", "container/container_methods/static_tan.rst", "container/container_methods/static_tanh.rst", "container/container_methods/static_tensordot.rst", "container/container_methods/static_tile.rst", "container/container_methods/static_to_device.rst", "container/container_methods/static_to_ivy.rst", "container/container_methods/static_to_list.rst", "container/container_methods/static_to_native.rst", "container/container_methods/static_to_numpy.rst", "container/container_methods/static_to_scalar.rst", "container/container_methods/static_trace.rst", "container/container_methods/static_tril.rst", "container/container_methods/static_triu.rst", "container/container_methods/static_trunc.rst", "container/container_methods/static_unique_all.rst", "container/container_methods/static_unique_counts.rst", "container/container_methods/static_unique_inverse.rst", "container/container_methods/static_unique_values.rst", "container/container_methods/static_unstack.rst", "container/container_methods/static_value_is_nan.rst", "container/container_methods/static_var.rst", "container/container_methods/static_variable.rst", "container/container_methods/static_variable_data.rst", "container/container_methods/static_vecdot.rst", "container/container_methods/static_vector_norm.rst", "container/container_methods/static_vector_to_skew_symmetric_matrix.rst", "container/container_methods/static_where.rst", "container/container_methods/static_zero_pad.rst", "container/container_methods/static_zeros.rst", "container/container_methods/static_zeros_like.rst", "container/container_methods/std.rst", "container/container_methods/stop_gradient.rst", "container/container_methods/subtract.rst", "container/container_methods/sum.rst", "container/container_methods/supports_inplace_update.rst", "container/container_methods/svd.rst", "container/container_methods/svdvals.rst", "container/container_methods/swapaxes.rst", "container/container_methods/tan.rst", "container/container_methods/tanh.rst", "container/container_methods/tensordot.rst", "container/container_methods/tile.rst", "container/container_methods/to_device.rst", "container/container_methods/to_ivy.rst", "container/container_methods/to_list.rst", "container/container_methods/to_native.rst", "container/container_methods/to_numpy.rst", "container/container_methods/to_scalar.rst", "container/container_methods/trace.rst", "container/container_methods/tril.rst", "container/container_methods/triu.rst", "container/container_methods/trunc.rst", "container/container_methods/unique_all.rst", "container/container_methods/unique_counts.rst", "container/container_methods/unique_inverse.rst", "container/container_methods/unique_values.rst", "container/container_methods/unstack.rst", "container/container_methods/value_is_nan.rst", "container/container_methods/var.rst", "container/container_methods/variable.rst", "container/container_methods/variable_data.rst", "container/container_methods/vecdot.rst", "container/container_methods/vector_norm.rst", "container/container_methods/vector_to_skew_symmetric_matrix.rst", "container/container_methods/where.rst", "container/container_methods/zero_pad.rst", "container/container_methods/zeros_like.rst", "container/conversions.rst", "container/conversions/ContainerWithConversions.rst", "container/creation.rst", "container/creation/ContainerWithCreation.rst", "container/data_type.rst", "container/data_type/ContainerWithDataTypes.rst", "container/device.rst", "container/device/ContainerWithDevice.rst", "container/elementwise.rst", "container/elementwise/ContainerWithElementwise.rst", "container/general.rst", "container/general/ContainerWithGeneral.rst", "container/gradients.rst", "container/gradients/ContainerWithGradients.rst", "container/image.rst", "container/image/ContainerWithImage.rst", "container/layers.rst", "container/layers/ContainerWithLayers.rst", "container/linear_algebra.rst", "container/linear_algebra/ContainerWithLinearAlgebra.rst", "container/losses.rst", "container/losses/ContainerWithLosses.rst", "container/manipulation.rst", "container/manipulation/ContainerWithManipulation.rst", "container/norms.rst", "container/norms/ContainerWithNorms.rst", "container/random.rst", "container/random/ContainerWithRandom.rst", "container/searching.rst", "container/searching/ContainerWithSearching.rst", "container/set.rst", "container/set/ContainerWithSet.rst", "container/sorting.rst", "container/sorting/ContainerWithSorting.rst", "container/statistical.rst", "container/statistical/ContainerWithStatistical.rst", "container/utility.rst", "container/utility/ContainerWithUtility.rst", "container/wrapping.rst", "container/wrapping/add_ivy_container_instance_methods.rst", "contributing.rst", "contributing/0_setting_up.rst", "contributing/1_the_basics.rst", "contributing/4_open_tasks.rst", "contributing/5_applied_libraries.rst", "contributing/building_the_docs.rst", "deep_dive.rst", "deep_dive/0_navigating_the_code.rst", "deep_dive/10_formatting.rst", "deep_dive/11_function_arguments.rst", "deep_dive/12_docstrings.rst", "deep_dive/13_docstring_examples.rst", "deep_dive/14_array_api_tests.rst", "deep_dive/15_ivy_tests.rst", "deep_dive/16_ivy_frontends.rst", "deep_dive/17_ivy_frontends_tests.rst", "deep_dive/1_function_types.rst", "deep_dive/2_superset_behaviour.rst", "deep_dive/3_backend_setting.rst", "deep_dive/4_function_wrapping.rst", "deep_dive/5_arrays.rst", "deep_dive/6_containers.rst", "deep_dive/7_data_types.rst", "deep_dive/8_devices.rst", "deep_dive/9_inplace_updates.rst", "design.rst", "design/building_blocks.rst", "design/ivy_as_a_framework.rst", "design/ivy_as_a_framework/ivy_array.rst", "design/ivy_as_a_framework/ivy_container.rst", "design/ivy_as_a_framework/ivy_stateful_api.rst", "design/ivy_as_a_transpiler.rst", "docs/ivy.rst", "docs/ivy_builder.rst", "docs/ivy_ecosystem.rst", "docs/ivy_gym.rst", "docs/ivy_mech.rst", "docs/ivy_memory.rst", "docs/ivy_models.rst", "docs/ivy_robot.rst", "docs/ivy_vision.rst", "extensions.rst", "extensions/applied_libraries.rst", "faq.rst", "func_wrapper.rst", "func_wrapper/from_zero_dim_arrays_to_float.rst", "func_wrapper/handle_nestable.rst", "func_wrapper/handle_out_argument.rst", "func_wrapper/infer_device.rst", "func_wrapper/infer_dtype.rst", "func_wrapper/inputs_to_ivy_arrays.rst", "func_wrapper/inputs_to_native_arrays.rst", "func_wrapper/integer_arrays_to_float.rst", "func_wrapper/outputs_to_ivy_arrays.rst", "func_wrapper/to_native_arrays_and_back.rst", "functional/ivy.rst", "functional/ivy/activations.rst", "functional/ivy/activations/gelu.rst", "functional/ivy/activations/leaky_relu.rst", "functional/ivy/activations/relu.rst", "functional/ivy/activations/sigmoid.rst", "functional/ivy/activations/softmax.rst", "functional/ivy/activations/softplus.rst", "functional/ivy/compilation.rst", "functional/ivy/compilation/compile.rst", "functional/ivy/constants.rst", "functional/ivy/creation.rst", "functional/ivy/creation/arange.rst", "functional/ivy/creation/asarray.rst", "functional/ivy/creation/empty.rst", "functional/ivy/creation/empty_like.rst", "functional/ivy/creation/eye.rst", "functional/ivy/creation/from_dlpack.rst", "functional/ivy/creation/full.rst", "functional/ivy/creation/full_like.rst", "functional/ivy/creation/linspace.rst", "functional/ivy/creation/logspace.rst", "functional/ivy/creation/meshgrid.rst", "functional/ivy/creation/native_array.rst", "functional/ivy/creation/ones.rst", "functional/ivy/creation/ones_like.rst", "functional/ivy/creation/tril.rst", "functional/ivy/creation/triu.rst", "functional/ivy/creation/zeros.rst", "functional/ivy/creation/zeros_like.rst", "functional/ivy/data_type.rst", "functional/ivy/data_type/as_ivy_dtype.rst", "functional/ivy/data_type/as_native_dtype.rst", "functional/ivy/data_type/astype.rst", "functional/ivy/data_type/broadcast_arrays.rst", "functional/ivy/data_type/broadcast_to.rst", "functional/ivy/data_type/can_cast.rst", "functional/ivy/data_type/check_float.rst", "functional/ivy/data_type/closest_valid_dtype.rst", "functional/ivy/data_type/default_dtype.rst", "functional/ivy/data_type/default_float_dtype.rst", "functional/ivy/data_type/default_int_dtype.rst", "functional/ivy/data_type/default_uint_dtype.rst", "functional/ivy/data_type/dtype.rst", "functional/ivy/data_type/dtype_bits.rst", "functional/ivy/data_type/finfo.rst", "functional/ivy/data_type/function_supported_dtypes.rst", "functional/ivy/data_type/function_unsupported_dtypes.rst", "functional/ivy/data_type/iinfo.rst", "functional/ivy/data_type/infer_default_dtype.rst", "functional/ivy/data_type/invalid_dtype.rst", "functional/ivy/data_type/is_bool_dtype.rst", "functional/ivy/data_type/is_float_dtype.rst", "functional/ivy/data_type/is_int_dtype.rst", "functional/ivy/data_type/is_uint_dtype.rst", "functional/ivy/data_type/promote_types.rst", "functional/ivy/data_type/promote_types_of_inputs.rst", "functional/ivy/data_type/result_type.rst", "functional/ivy/data_type/set_default_dtype.rst", "functional/ivy/data_type/set_default_float_dtype.rst", "functional/ivy/data_type/set_default_int_dtype.rst", "functional/ivy/data_type/set_default_uint_dtype.rst", "functional/ivy/data_type/type_promote_arrays.rst", "functional/ivy/data_type/unset_default_dtype.rst", "functional/ivy/data_type/unset_default_float_dtype.rst", "functional/ivy/data_type/unset_default_int_dtype.rst", "functional/ivy/data_type/unset_default_uint_dtype.rst", "functional/ivy/data_type/valid_dtype.rst", "functional/ivy/device.rst", "functional/ivy/device/Profiler.rst", "functional/ivy/device/as_ivy_dev.rst", "functional/ivy/device/as_native_dev.rst", "functional/ivy/device/clear_mem_on_dev.rst", "functional/ivy/device/default_device.rst", "functional/ivy/device/dev.rst", "functional/ivy/device/dev_util.rst", "functional/ivy/device/function_supported_devices.rst", "functional/ivy/device/function_unsupported_devices.rst", "functional/ivy/device/get_all_ivy_arrays_on_dev.rst", "functional/ivy/device/gpu_is_available.rst", "functional/ivy/device/num_cpu_cores.rst", "functional/ivy/device/num_gpus.rst", "functional/ivy/device/num_ivy_arrays_on_dev.rst", "functional/ivy/device/percent_used_mem_on_dev.rst", "functional/ivy/device/print_all_ivy_arrays_on_dev.rst", "functional/ivy/device/set_default_device.rst", "functional/ivy/device/set_split_factor.rst", "functional/ivy/device/split_factor.rst", "functional/ivy/device/split_func_call.rst", "functional/ivy/device/to_device.rst", "functional/ivy/device/to_device/to_device_container.rst", "functional/ivy/device/to_device/to_device_functional.rst", "functional/ivy/device/total_mem_on_dev.rst", "functional/ivy/device/tpu_is_available.rst", "functional/ivy/device/unset_default_device.rst", "functional/ivy/device/used_mem_on_dev.rst", "functional/ivy/elementwise.rst", "functional/ivy/elementwise/abs.rst", "functional/ivy/elementwise/acos.rst", "functional/ivy/elementwise/acosh.rst", "functional/ivy/elementwise/add.rst", "functional/ivy/elementwise/asin.rst", "functional/ivy/elementwise/asinh.rst", "functional/ivy/elementwise/atan.rst", "functional/ivy/elementwise/atan2.rst", "functional/ivy/elementwise/atanh.rst", "functional/ivy/elementwise/bitwise_and.rst", "functional/ivy/elementwise/bitwise_invert.rst", "functional/ivy/elementwise/bitwise_left_shift.rst", "functional/ivy/elementwise/bitwise_or.rst", "functional/ivy/elementwise/bitwise_right_shift.rst", "functional/ivy/elementwise/bitwise_xor.rst", "functional/ivy/elementwise/ceil.rst", "functional/ivy/elementwise/cos.rst", "functional/ivy/elementwise/cosh.rst", "functional/ivy/elementwise/divide.rst", "functional/ivy/elementwise/equal.rst", "functional/ivy/elementwise/erf.rst", "functional/ivy/elementwise/exp.rst", "functional/ivy/elementwise/expm1.rst", "functional/ivy/elementwise/floor.rst", "functional/ivy/elementwise/floor_divide.rst", "functional/ivy/elementwise/floormod.rst", "functional/ivy/elementwise/greater.rst", "functional/ivy/elementwise/greater_equal.rst", "functional/ivy/elementwise/isfinite.rst", "functional/ivy/elementwise/isinf.rst", "functional/ivy/elementwise/isnan.rst", "functional/ivy/elementwise/less.rst", "functional/ivy/elementwise/less_equal.rst", "functional/ivy/elementwise/log.rst", "functional/ivy/elementwise/log10.rst", "functional/ivy/elementwise/log1p.rst", "functional/ivy/elementwise/log2.rst", "functional/ivy/elementwise/logaddexp.rst", "functional/ivy/elementwise/logical_and.rst", "functional/ivy/elementwise/logical_not.rst", "functional/ivy/elementwise/logical_or.rst", "functional/ivy/elementwise/logical_xor.rst", "functional/ivy/elementwise/maximum.rst", "functional/ivy/elementwise/minimum.rst", "functional/ivy/elementwise/multiply.rst", "functional/ivy/elementwise/negative.rst", "functional/ivy/elementwise/not_equal.rst", "functional/ivy/elementwise/positive.rst", "functional/ivy/elementwise/pow.rst", "functional/ivy/elementwise/reciprocal.rst", "functional/ivy/elementwise/remainder.rst", "functional/ivy/elementwise/remainder/remainder_functional.rst", "functional/ivy/elementwise/remainder/static_remainder_container.rst", "functional/ivy/elementwise/round.rst", "functional/ivy/elementwise/sign.rst", "functional/ivy/elementwise/sin.rst", "functional/ivy/elementwise/sinh.rst", "functional/ivy/elementwise/sqrt.rst", "functional/ivy/elementwise/square.rst", "functional/ivy/elementwise/subtract.rst", "functional/ivy/elementwise/subtract/subtract_container.rst", "functional/ivy/elementwise/subtract/subtract_functional.rst", "functional/ivy/elementwise/tan.rst", "functional/ivy/elementwise/tanh.rst", "functional/ivy/elementwise/trunc.rst", "functional/ivy/extensions.rst", "functional/ivy/general.rst", "functional/ivy/general/all_equal.rst", "functional/ivy/general/arg_info.rst", "functional/ivy/general/arg_names.rst", "functional/ivy/general/array_equal.rst", "functional/ivy/general/arrays_equal.rst", "functional/ivy/general/assert_supports_inplace.rst", "functional/ivy/general/cache_fn.rst", "functional/ivy/general/clip_matrix_norm.rst", "functional/ivy/general/clip_vector_norm.rst", "functional/ivy/general/container_types.rst", "functional/ivy/general/copy_array.rst", "functional/ivy/general/cumprod.rst", "functional/ivy/general/cumsum.rst", "functional/ivy/general/current_backend_str.rst", "functional/ivy/general/default.rst", "functional/ivy/general/einops_rearrange.rst", "functional/ivy/general/einops_reduce.rst", "functional/ivy/general/einops_repeat.rst", "functional/ivy/general/exists.rst", "functional/ivy/general/fourier_encode.rst", "functional/ivy/general/function_supported_devices_and_dtypes.rst", "functional/ivy/general/function_unsupported_devices_and_dtypes.rst", "functional/ivy/general/gather.rst", "functional/ivy/general/gather_nd.rst", "functional/ivy/general/get_all_arrays_in_memory.rst", "functional/ivy/general/get_array_mode.rst", "functional/ivy/general/get_min_base.rst", "functional/ivy/general/get_min_denominator.rst", "functional/ivy/general/get_nestable_mode.rst", "functional/ivy/general/get_num_dims.rst", "functional/ivy/general/get_queue_timeout.rst", "functional/ivy/general/get_referrers_recursive.rst", "functional/ivy/general/get_tmp_dir.rst", "functional/ivy/general/has_nans.rst", "functional/ivy/general/indices_where.rst", "functional/ivy/general/inplace_arrays_supported.rst", "functional/ivy/general/inplace_decrement.rst", "functional/ivy/general/inplace_increment.rst", "functional/ivy/general/inplace_update.rst", "functional/ivy/general/inplace_variables_supported.rst", "functional/ivy/general/is_array.rst", "functional/ivy/general/is_array/is_array_container.rst", "functional/ivy/general/is_array/is_array_functional.rst", "functional/ivy/general/is_ivy_array.rst", "functional/ivy/general/is_ivy_container.rst", "functional/ivy/general/is_native_array.rst", "functional/ivy/general/match_kwargs.rst", "functional/ivy/general/multiprocessing.rst", "functional/ivy/general/num_arrays_in_memory.rst", "functional/ivy/general/one_hot.rst", "functional/ivy/general/print_all_arrays_in_memory.rst", "functional/ivy/general/scatter_flat.rst", "functional/ivy/general/scatter_nd.rst", "functional/ivy/general/set_array_mode.rst", "functional/ivy/general/set_min_base.rst", "functional/ivy/general/set_min_denominator.rst", "functional/ivy/general/set_nestable_mode.rst", "functional/ivy/general/set_queue_timeout.rst", "functional/ivy/general/set_shape_array_mode.rst", "functional/ivy/general/set_tmp_dir.rst", "functional/ivy/general/shape.rst", "functional/ivy/general/shape_array_mode.rst", "functional/ivy/general/stable_divide.rst", "functional/ivy/general/stable_pow.rst", "functional/ivy/general/supports_inplace.rst", "functional/ivy/general/to_ivy_shape.rst", "functional/ivy/general/to_list.rst", "functional/ivy/general/to_native_shape.rst", "functional/ivy/general/to_numpy.rst", "functional/ivy/general/to_scalar.rst", "functional/ivy/general/try_else_none.rst", "functional/ivy/general/unset_array_mode.rst", "functional/ivy/general/unset_nestable_mode.rst", "functional/ivy/general/unset_queue_timeout.rst", "functional/ivy/general/unset_shape_array_mode.rst", "functional/ivy/general/unstack.rst", "functional/ivy/general/value_is_nan.rst", "functional/ivy/general/vmap.rst", "functional/ivy/gradients.rst", "functional/ivy/gradients/adam_step.rst", "functional/ivy/gradients/adam_update.rst", "functional/ivy/gradients/execute_with_gradients.rst", "functional/ivy/gradients/grad.rst", "functional/ivy/gradients/gradient_descent_update.rst", "functional/ivy/gradients/is_variable.rst", "functional/ivy/gradients/jac.rst", "functional/ivy/gradients/lamb_update.rst", "functional/ivy/gradients/lars_update.rst", "functional/ivy/gradients/optimizer_update.rst", "functional/ivy/gradients/set_with_grads.rst", "functional/ivy/gradients/stop_gradient.rst", "functional/ivy/gradients/unset_with_grads.rst", "functional/ivy/gradients/value_and_grad.rst", "functional/ivy/gradients/variable.rst", "functional/ivy/gradients/variable_data.rst", "functional/ivy/gradients/with_grads.rst", "functional/ivy/layers.rst", "functional/ivy/layers/conv1d.rst", "functional/ivy/layers/conv1d_transpose.rst", "functional/ivy/layers/conv2d.rst", "functional/ivy/layers/conv2d_transpose.rst", "functional/ivy/layers/conv3d.rst", "functional/ivy/layers/conv3d_transpose.rst", "functional/ivy/layers/deconv_length.rst", "functional/ivy/layers/depthwise_conv2d.rst", "functional/ivy/layers/dropout.rst", "functional/ivy/layers/handle_padding.rst", "functional/ivy/layers/linear.rst", "functional/ivy/layers/lstm_update.rst", "functional/ivy/layers/multi_head_attention.rst", "functional/ivy/layers/scaled_dot_product_attention.rst", "functional/ivy/linear_algebra.rst", "functional/ivy/linear_algebra/cholesky.rst", "functional/ivy/linear_algebra/cross.rst", "functional/ivy/linear_algebra/det.rst", "functional/ivy/linear_algebra/diagonal.rst", "functional/ivy/linear_algebra/eigh.rst", "functional/ivy/linear_algebra/eigvalsh.rst", "functional/ivy/linear_algebra/inv.rst", "functional/ivy/linear_algebra/matmul.rst", "functional/ivy/linear_algebra/matrix_norm.rst", "functional/ivy/linear_algebra/matrix_power.rst", "functional/ivy/linear_algebra/matrix_rank.rst", "functional/ivy/linear_algebra/matrix_transpose.rst", "functional/ivy/linear_algebra/outer.rst", "functional/ivy/linear_algebra/pinv.rst", "functional/ivy/linear_algebra/qr.rst", "functional/ivy/linear_algebra/slogdet.rst", "functional/ivy/linear_algebra/solve.rst", "functional/ivy/linear_algebra/svd.rst", "functional/ivy/linear_algebra/svdvals.rst", "functional/ivy/linear_algebra/tensordot.rst", "functional/ivy/linear_algebra/trace.rst", "functional/ivy/linear_algebra/vecdot.rst", "functional/ivy/linear_algebra/vector_norm.rst", "functional/ivy/linear_algebra/vector_to_skew_symmetric_matrix.rst", "functional/ivy/losses.rst", "functional/ivy/losses/binary_cross_entropy.rst", "functional/ivy/losses/cross_entropy.rst", "functional/ivy/losses/sparse_cross_entropy.rst", "functional/ivy/manipulation.rst", "functional/ivy/manipulation/clip.rst", "functional/ivy/manipulation/concat.rst", "functional/ivy/manipulation/constant_pad.rst", "functional/ivy/manipulation/expand_dims.rst", "functional/ivy/manipulation/flip.rst", "functional/ivy/manipulation/permute_dims.rst", "functional/ivy/manipulation/repeat.rst", "functional/ivy/manipulation/reshape.rst", "functional/ivy/manipulation/roll.rst", "functional/ivy/manipulation/split.rst", "functional/ivy/manipulation/squeeze.rst", "functional/ivy/manipulation/stack.rst", "functional/ivy/manipulation/swapaxes.rst", "functional/ivy/manipulation/tile.rst", "functional/ivy/manipulation/zero_pad.rst", "functional/ivy/meta.rst", "functional/ivy/meta/fomaml_step.rst", "functional/ivy/meta/maml_step.rst", "functional/ivy/meta/reptile_step.rst", "functional/ivy/nest.rst", "functional/ivy/nest/all_nested_indices.rst", "functional/ivy/nest/copy_nest.rst", "functional/ivy/nest/index_nest.rst", "functional/ivy/nest/insert_into_nest_at_index.rst", "functional/ivy/nest/insert_into_nest_at_indices.rst", "functional/ivy/nest/map.rst", "functional/ivy/nest/map_nest_at_index.rst", "functional/ivy/nest/map_nest_at_indices.rst", "functional/ivy/nest/multi_index_nest.rst", "functional/ivy/nest/nested_any.rst", "functional/ivy/nest/nested_indices_where.rst", "functional/ivy/nest/nested_map.rst", "functional/ivy/nest/nested_multi_map.rst", "functional/ivy/nest/prune_nest_at_index.rst", "functional/ivy/nest/prune_nest_at_indices.rst", "functional/ivy/nest/set_nest_at_index.rst", "functional/ivy/nest/set_nest_at_indices.rst", "functional/ivy/norms.rst", "functional/ivy/norms/layer_norm.rst", "functional/ivy/random.rst", "functional/ivy/random/multinomial.rst", "functional/ivy/random/randint.rst", "functional/ivy/random/random_normal.rst", "functional/ivy/random/random_uniform.rst", "functional/ivy/random/seed.rst", "functional/ivy/random/shuffle.rst", "functional/ivy/searching.rst", "functional/ivy/searching/argmax.rst", "functional/ivy/searching/argmin.rst", "functional/ivy/searching/nonzero.rst", "functional/ivy/searching/where.rst", "functional/ivy/set.rst", "functional/ivy/set/unique_all.rst", "functional/ivy/set/unique_counts.rst", "functional/ivy/set/unique_inverse.rst", "functional/ivy/set/unique_values.rst", "functional/ivy/sorting.rst", "functional/ivy/sorting/argsort.rst", "functional/ivy/sorting/searchsorted.rst", "functional/ivy/sorting/sort.rst", "functional/ivy/statistical.rst", "functional/ivy/statistical/einsum.rst", "functional/ivy/statistical/max.rst", "functional/ivy/statistical/mean.rst", "functional/ivy/statistical/min.rst", "functional/ivy/statistical/prod.rst", "functional/ivy/statistical/std.rst", "functional/ivy/statistical/sum.rst", "functional/ivy/statistical/var.rst", "functional/ivy/utility.rst", "functional/ivy/utility/all.rst", "functional/ivy/utility/any.rst", "glossary.rst", "index.rst", "index_append.rst", "index_prepend.rst", "inspection.rst", "inspection/add_array_specs.rst", "inspection/fn_array_spec.rst", "roadmap.rst", "stateful/activations.rst", "stateful/activations/GEGLU.rst", "stateful/activations/GELU.rst", "stateful/converters.rst", "stateful/converters/to_ivy_module.rst", "stateful/initializers.rst", "stateful/initializers/Constant.rst", "stateful/initializers/FirstLayerSiren.rst", "stateful/initializers/GlorotUniform.rst", "stateful/initializers/Initializer.rst", "stateful/initializers/KaimingNormal.rst", "stateful/initializers/Ones.rst", "stateful/initializers/Siren.rst", "stateful/initializers/Uniform.rst", "stateful/initializers/Zeros.rst", "stateful/layers.rst", "stateful/layers/Conv1D.rst", "stateful/layers/Conv1DTranspose.rst", "stateful/layers/Conv2D.rst", "stateful/layers/Conv2DTranspose.rst", "stateful/layers/Conv3D.rst", "stateful/layers/Conv3DTranspose.rst", "stateful/layers/DepthwiseConv2D.rst", "stateful/layers/Dropout.rst", "stateful/layers/LSTM.rst", "stateful/layers/Linear.rst", "stateful/layers/MultiHeadAttention.rst", "stateful/module.rst", "stateful/module/Module.rst", "stateful/norms.rst", "stateful/norms/LayerNorm.rst", "stateful/optimizers.rst", "stateful/optimizers/Adam.rst", "stateful/optimizers/LAMB.rst", "stateful/optimizers/LARS.rst", "stateful/optimizers/Optimizer.rst", "stateful/optimizers/SGD.rst", "stateful/sequential.rst", "stateful/sequential/Sequential.rst", "supported_frameworks.rst", "verbosity.rst", "verbosity/cprint.rst"], "titles": ["Activations", "ArrayWithActivations", "Array", "Array", "Variable", "Array methods", "abs array", "acos array", "acosh array", "adam_step array", "adam_update array", "add array", "add_ivy_array_instance_methods array", "all array", "all_equal array", "any array", "argmax array", "argmin array", "argsort array", "array_equal array", "arrays_equal array", "asarray array", "asin array", "asinh array", "assert_supports_inplace array", "astype array", "atan array", "atan2 array", "atanh array", "binary_cross_entropy array", "bitwise_and array", "bitwise_invert array", "bitwise_left_shift array", "bitwise_or array", "bitwise_right_shift array", "bitwise_xor array", "broadcast_arrays array", "broadcast_to array", "can_cast array", "ceil array", "cholesky array", "clip array", "clip_matrix_norm array", "clip_vector_norm array", "concat array", "constant_pad array", "conv1d array", "conv1d_transpose array", "conv3d array", "conv3d_transpose array", "copy_array array", "cos array", "cosh array", "cross array", "cross_entropy array", "cumprod array", "cumsum array", "default array", "depthwise_conv2d array", "det array", "dev array", "diagonal array", "divide array", "dropout array", "dtype array", "eigh array", "eigvalsh array", "einops_rearrange array", "einops_reduce array", "einops_repeat array", "einsum array", "empty_like array", "equal array", "erf array", "exists array", "exp array", "expand_dims array", "expm1 array", "finfo array", "flip array", "floor array", "floor_divide array", "floormod array", "fourier_encode array", "from_dlpack array", "full_like array", "gather array", "gather_nd array", "gelu array", "get_num_dims array", "gradient_descent_update array", "greater array", "greater_equal array", "has_nans array", "iinfo array", "indices_where array", "inplace_decrement array", "inplace_increment array", "inplace_update array", "inv array", "is_array array", "is_bool_dtype array", "is_float_dtype array", "is_int_dtype array", "is_ivy_array array", "is_ivy_container array", "is_native_array array", "is_uint_dtype array", "is_variable array", "isfinite array", "isinf array", "isnan array", "lamb_update array", "lars_update array", "layer_norm array", "leaky_relu array", "less array", "less_equal array", "linear array", "log array", "log10 array", "log1p array", "log2 array", "logaddexp array", "logical_and array", "logical_not array", "logical_or array", "logical_xor array", "lstm_update array", "matmul array", "matrix_norm array", "matrix_rank array", "matrix_transpose array", "max array", "mean array", "meshgrid array", "min array", "multi_head_attention array", "multinomial array", "multiply array", "native_array array", "negative array", "nonzero array", "not_equal array", "one_hot array", "ones_like array", "optimizer_update array", "outer array", "permute_dims array", "pinv array", "positive array", "pow array", "prod array", "qr array", "randint array", "random_normal array", "random_uniform array", "relu array", "remainder array", "repeat array", "reshape array", "result_type array", "roll array", "round array", "scaled_dot_product_attention array", "scatter_flat array", "scatter_nd array", "searchsorted array", "shuffle array", "sigmoid array", "sign array", "sin array", "sinh array", "softmax array", "softplus array", "solve array", "sort array", "sparse_cross_entropy array", "split array", "sqrt array", "square array", "squeeze array", "stable_divide array", "stable_pow array", "stack array", "std array", "stop_gradient array", "subtract array", "sum array", "supports_inplace array", "svd array", "svdvals array", "swapaxes array", "tan array", "tanh array", "tensordot array", "tile array", "to_device array", "to_list array", "to_numpy array", "to_scalar array", "trace array", "tril array", "triu array", "trunc array", "unique_all array", "unique_counts array", "unique_inverse array", "unique_values array", "unstack array", "value_is_nan array", "var array", "variable array", "variable_data array", "vecdot array", "vector_norm array", "vector_to_skew_symmetric_matrix array", "where array", "zero_pad array", "zeros_like array", "Conversions", "args_to_ivy", "args_to_native", "to_ivy", "to_native", "Creation", "ArrayWithCreation", "Data type", "ArrayWithDataTypes", "Device", "ArrayWithDevice", "Elementwise", "ArrayWithElementwise", "General", "ArrayWithGeneral", "Gradients", "ArrayWithGradients", "Image", "ArrayWithImage", "Layers", "ArrayWithLayers", "Linear algebra", "ArrayWithLinearAlgebra", "Losses", "ArrayWithLosses", "Manipulation", "ArrayWithManipulation", "Norms", "ArrayWithNorms", "Random", "ArrayWithRandom", "Searching", "ArrayWithSearching", "Set", "ArrayWithSet", "Sorting", "ArrayWithSorting", "Statistical", "ArrayWithStatistical", "Utility", "ArrayWithUtility", "Wrapping", "add_ivy_array_instance_methods", "Backend handler", "choose_random_backend", "clear_backend_stack", "current_backend", "fn_name_from_version_specific_fn_name", "get_backend", "set_backend", "set_backend_to_specific_version", "try_import_ivy_jax", "try_import_ivy_mxnet", "try_import_ivy_numpy", "try_import_ivy_tf", "try_import_ivy_torch", "unset_backend", "Background", "ML Explosion", "Standardization", "Why Unify?", "Activations", "ContainerWithActivations", "Base", "ContainerBase", "Container", "Container", "Container methods", "abs container", "acos container", "acosh container", "adam_step container", "adam_update container", "add container", "add_ivy_container_instance_methods container", "all container", "all_equal container", "any container", "argmax container", "argmin container", "argsort container", "asin container", "asinh container", "assert_supports_inplace container", "astype container", "atan container", "atan2 container", "atanh container", "binary_cross_entropy container", "bitwise_and container", "bitwise_invert container", "bitwise_left_shift container", "bitwise_or container", "bitwise_right_shift container", "bitwise_xor container", "broadcast_arrays container", "broadcast_to container", "can_cast container", "ceil container", "cholesky container", "clip container", "clip_matrix_norm container", "clip_vector_norm container", "concat container", "constant_pad container", "conv1d container", "conv1d_transpose container", "conv2d container", "conv2d_transpose container", "conv3d container", "conv3d_transpose container", "cos container", "cosh container", "cross container", "cross_entropy container", "cumprod container", "cumsum container", "depthwise_conv2d container", "det container", "dev container", "diagonal container", "divide container", "dropout container", "dtype container", "eigh container", "einops_rearrange container", "einops_reduce container", "einops_repeat container", "einsum container", "empty_like container", "equal container", "erf container", "exp container", "expand_dims container", "expm1 container", "finfo container", "flip container", "floor container", "floor_divide container", "floormod container", "fourier_encode container", "from_dlpack container", "full_like container", "gather container", "gather_nd container", "gelu container", "gradient_descent_update container", "greater container", "greater_equal container", "has_nans container", "iinfo container", "indices_where container", "inplace_decrement container", "inplace_increment container", "inplace_update container", "inv container", "is_array container", "is_bool_dtype container", "is_float_dtype container", "is_int_dtype container", "is_ivy_array container", "is_ivy_container container", "is_native_array container", "is_uint_dtype container", "is_variable container", "isfinite container", "isinf container", "isnan container", "lamb_update container", "lars_update container", "layer_norm container", "leaky_relu container", "less container", "less_equal container", "linear container", "log container", "log10 container", "log1p container", "log2 container", "logaddexp container", "logical_and container", "logical_not container", "logical_or container", "logical_xor container", "lstm_update container", "matmul container", "matrix_norm container", "matrix_power container", "matrix_rank container", "matrix_transpose container", "max container", "maximum container", "mean container", "meshgrid container", "min container", "minimum container", "multi_head_attention container", "multinomial container", "multiply container", "native_array container", "negative container", "nonzero container", "not_equal container", "one_hot container", "ones_like container", "optimizer_update container", "outer container", "permute_dims container", "positive container", "pow container", "prod container", "qr container", "randint container", "random_normal container", "random_uniform container", "relu container", "remainder container", "repeat container", "reshape container", "result_type container", "roll container", "round container", "scaled_dot_product_attention container", "scatter_flat container", "scatter_nd container", "searchsorted container", "shuffle container", "sigmoid container", "sign container", "sin container", "sinh container", "slogdet container", "softmax container", "softplus container", "solve container", "sort container", "sparse_cross_entropy container", "split container", "sqrt container", "square container", "squeeze container", "stable_divide container", "stable_pow container", "stack container", "static_abs container", "static_acos container", "static_acosh container", "static_add container", "static_all container", "static_all_equal container", "static_any container", "static_arange container", "static_argmax container", "static_argmin container", "static_argsort container", "static_asarray container", "static_asin container", "static_asinh container", "static_assert_supports_inplace container", "static_astype container", "static_atan container", "static_atan2 container", "static_atanh container", "static_binary_cross_entropy container", "static_bitwise_and container", "static_bitwise_invert container", "static_bitwise_left_shift container", "static_bitwise_or container", "static_bitwise_right_shift container", "static_bitwise_xor container", "static_broadcast_arrays container", "static_broadcast_to container", "static_can_cast container", "static_ceil container", "static_cholesky container", "static_clip container", "static_clip_matrix_norm container", "static_clip_vector_norm container", "static_concat container", "static_constant_pad container", "static_conv1d container", "static_conv1d_transpose container", "static_conv2d container", "static_conv2d_transpose container", "static_conv3d container", "static_conv3d_transpose container", "static_cos container", "static_cosh container", "static_cross container", "static_cross_entropy container", "static_cumprod container", "static_cumsum container", "static_default_float_dtype container", "static_depthwise_conv2d container", "static_det container", "static_dev container", "static_diagonal container", "static_divide container", "static_dropout container", "static_dtype container", "static_einops_rearrange container", "static_einops_reduce container", "static_einops_repeat container", "static_empty_like container", "static_equal container", "static_erf container", "static_exp container", "static_expand_dims container", "static_expm1 container", "static_eye container", "static_finfo container", "static_flip container", "static_floor container", "static_floor_divide container", "static_floormod container", "static_fourier_encode container", "static_from_dlpack container", "static_full_like container", "static_function_supported_dtypes container", "static_function_unsupported_dtypes container", "static_gather container", "static_gather_nd container", "static_gelu container", "static_greater container", "static_greater_equal container", "static_has_nans container", "static_iinfo container", "static_indices_where container", "static_inplace_decrement container", "static_inplace_increment container", "static_inplace_update container", "static_inv container", "static_is_array container", "static_is_bool_dtype container", "static_is_float_dtype container", "static_is_int_dtype container", "static_is_ivy_array container", "static_is_ivy_container container", "static_is_native_array container", "static_is_uint_dtype container", "static_is_variable container", "static_isfinite container", "static_isinf container", "static_isnan container", "static_leaky_relu container", "static_less container", "static_less_equal container", "static_linear container", "static_linspace container", "static_log container", "static_log10 container", "static_log1p container", "static_log2 container", "static_logaddexp container", "static_logical_and container", "static_logical_not container", "static_logical_or container", "static_logical_xor container", "static_logspace container", "static_lstm_update container", "static_matrix_norm container", "static_matrix_power container", "static_matrix_rank container", "static_matrix_transpose container", "static_maximum container", "static_meshgrid container", "static_minimum container", "static_multi_head_attention container", "static_multinomial container", "static_multiply container", "static_native_array container", "static_negative container", "static_nonzero container", "static_not_equal container", "static_one_hot container", "static_ones container", "static_ones_like container", "static_outer container", "static_permute_dims container", "static_positive container", "static_pow container", "static_qr container", "static_randint container", "static_random_normal container", "static_random_uniform container", "static_relu container", "static_remainder container", "static_repeat container", "static_reshape container", "static_result_type container", "static_roll container", "static_round container", "static_scaled_dot_product_attention container", "static_scatter_flat container", "static_scatter_nd container", "static_searchsorted container", "static_shuffle container", "static_sigmoid container", "static_sign container", "static_sin container", "static_sinh container", "static_slogdet container", "static_softmax container", "static_softplus container", "static_solve container", "static_sort container", "static_sparse_cross_entropy container", "static_split container", "static_sqrt container", "static_square container", "static_squeeze container", "static_stable_divide container", "static_stable_pow container", "static_stack container", "static_stop_gradient container", "static_subtract container", "static_supports_inplace_update container", "static_svd container", "static_svdvals container", "static_swapaxes container", "static_tan container", "static_tanh container", "static_tensordot container", "static_tile container", "static_to_device container", "static_to_ivy container", "static_to_list container", "static_to_native container", "static_to_numpy container", "static_to_scalar container", "static_trace container", "static_tril container", "static_triu container", "static_trunc container", "static_unique_all container", "static_unique_counts container", "static_unique_inverse container", "static_unique_values container", "static_unstack container", "static_value_is_nan container", "static_var container", "static_variable container", "static_variable_data container", "static_vecdot container", "static_vector_norm container", "static_vector_to_skew_symmetric_matrix container", "static_where container", "static_zero_pad container", "static_zeros container", "static_zeros_like container", "std container", "stop_gradient container", "subtract container", "sum container", "supports_inplace_update container", "svd container", "svdvals container", "swapaxes container", "tan container", "tanh container", "tensordot container", "tile container", "to_device container", "to_ivy container", "to_list container", "to_native container", "to_numpy container", "to_scalar container", "trace container", "tril container", "triu container", "trunc container", "unique_all container", "unique_counts container", "unique_inverse container", "unique_values container", "unstack container", "value_is_nan container", "var container", "variable container", "variable_data container", "vecdot container", "vector_norm container", "vector_to_skew_symmetric_matrix container", "where container", "zero_pad container", "zeros_like container", "Conversions", "ContainerWithConversions", "Creation", "ContainerWithCreation", "Data type", "ContainerWithDataTypes", "Device", "ContainerWithDevice", "Elementwise", "ContainerWithElementwise", "General", "ContainerWithGeneral", "Gradients", "ContainerWithGradients", "Image", "ContainerWithImage", "Layers", "ContainerWithLayers", "Linear algebra", "ContainerWithLinearAlgebra", "Losses", "ContainerWithLosses", "Manipulation", "ContainerWithManipulation", "Norms", "ContainerWithNorms", "Random", "ContainerWithRandom", "Searching", "ContainerWithSearching", "Set", "ContainerWithSet", "Sorting", "ContainerWithSorting", "Statistical", "ContainerWithStatistical", "Utility", "ContainerWithUtility", "Wrapping", "add_ivy_container_instance_methods", "Contributing", "Setting Up", "The Basics", "Open Tasks", "Ivy Applied Libraries Development Guide", "Building the Docs", "Deep Dive", "Navigating the Code", "Formatting", "Function Arguments", "Docstrings", "Docstring Examples", "Array API Tests", "Ivy Tests", "Ivy Frontends", "Ivy Frontend Tests", "Function Types", "Superset Behaviour", "Backend Setting", "Function Wrapping", "Arrays", "Containers", "Data Types", "Devices", "Inplace Updates", "Design", "Building Blocks", "Ivy as a Framework", "Ivy Array", "Ivy Container", "Ivy Stateful API", "Ivy as a Transpiler", "Ivy", "Ivy builder", "Ivy ecosystem", "Ivy gym", "Ivy mech", "Ivy memory", "Ivy models", "Ivy robot", "Ivy vision", "Extensions", "Applied Libraries", "FAQ", "Func wrapper", "from_zero_dim_arrays_to_float", "handle_nestable", "handle_out_argument", "infer_device", "infer_dtype", "inputs_to_ivy_arrays", "inputs_to_native_arrays", "integer_arrays_to_float", "outputs_to_ivy_arrays", "to_native_arrays_and_back", "&lt;no title&gt;", "Activations", "gelu", "leaky_relu", "relu", "sigmoid", "softmax", "softplus", "Compilation", "compile", "Constants", "Creation", "arange", "asarray", "empty", "empty_like", "eye", "from_dlpack", "full", "full_like", "linspace", "logspace", "meshgrid", "native_array", "ones", "ones_like", "tril", "triu", "zeros", "zeros_like", "Data type", "as_ivy_dtype", "as_native_dtype", "astype", "broadcast_arrays", "broadcast_to", "can_cast", "check_float", "closest_valid_dtype", "default_dtype", "default_float_dtype", "default_int_dtype", "default_uint_dtype", "dtype", "dtype_bits", "finfo", "function_supported_dtypes", "function_unsupported_dtypes", "iinfo", "infer_default_dtype", "invalid_dtype", "is_bool_dtype", "is_float_dtype", "is_int_dtype", "is_uint_dtype", "promote_types", "promote_types_of_inputs", "result_type", "set_default_dtype", "set_default_float_dtype", "set_default_int_dtype", "set_default_uint_dtype", "type_promote_arrays", "unset_default_dtype", "unset_default_float_dtype", "unset_default_int_dtype", "unset_default_uint_dtype", "valid_dtype", "Device", "Profiler", "as_ivy_dev", "as_native_dev", "clear_mem_on_dev", "default_device", "dev", "dev_util", "function_supported_devices", "function_unsupported_devices", "get_all_ivy_arrays_on_dev", "gpu_is_available", "num_cpu_cores", "num_gpus", "num_ivy_arrays_on_dev", "percent_used_mem_on_dev", "print_all_ivy_arrays_on_dev", "set_default_device", "set_split_factor", "split_factor", "split_func_call", "to_device", "ivy.Container.to_device", "ivy.to_device", "total_mem_on_dev", "tpu_is_available", "unset_default_device", "used_mem_on_dev", "Elementwise", "abs", "acos", "acosh", "add", "asin", "asinh", "atan", "atan2", "atanh", "bitwise_and", "bitwise_invert", "bitwise_left_shift", "bitwise_or", "bitwise_right_shift", "bitwise_xor", "ceil", "cos", "cosh", "divide", "equal", "erf", "exp", "expm1", "floor", "floor_divide", "floormod", "greater", "greater_equal", "isfinite", "isinf", "isnan", "less", "less_equal", "log", "log10", "log1p", "log2", "logaddexp", "logical_and", "logical_not", "logical_or", "logical_xor", "maximum", "minimum", "multiply", "negative", "not_equal", "positive", "pow", "reciprocal", "remainder", "ivy.remainder", "ivy.Container.static_remainder", "round", "sign", "sin", "sinh", "sqrt", "square", "subtract", "ivy.Container.subtract", "ivy.subtract", "tan", "tanh", "trunc", "Extensions", "General", "all_equal", "arg_info", "arg_names", "array_equal", "arrays_equal", "assert_supports_inplace", "cache_fn", "clip_matrix_norm", "clip_vector_norm", "container_types", "copy_array", "cumprod", "cumsum", "current_backend_str", "default", "einops_rearrange", "einops_reduce", "einops_repeat", "exists", "fourier_encode", "function_supported_devices_and_dtypes", "function_unsupported_devices_and_dtypes", "gather", "gather_nd", "get_all_arrays_in_memory", "get_array_mode", "get_min_base", "get_min_denominator", "get_nestable_mode", "get_num_dims", "get_queue_timeout", "get_referrers_recursive", "get_tmp_dir", "has_nans", "indices_where", "inplace_arrays_supported", "inplace_decrement", "inplace_increment", "inplace_update", "inplace_variables_supported", "is_array", "ivy.Container.is_array", "ivy.is_array", "is_ivy_array", "is_ivy_container", "is_native_array", "match_kwargs", "multiprocessing", "num_arrays_in_memory", "one_hot", "print_all_arrays_in_memory", "scatter_flat", "scatter_nd", "set_array_mode", "set_min_base", "set_min_denominator", "set_nestable_mode", "set_queue_timeout", "set_shape_array_mode", "set_tmp_dir", "shape", "shape_array_mode", "stable_divide", "stable_pow", "supports_inplace", "to_ivy_shape", "to_list", "to_native_shape", "to_numpy", "to_scalar", "try_else_none", "unset_array_mode", "unset_nestable_mode", "unset_queue_timeout", "unset_shape_array_mode", "unstack", "value_is_nan", "vmap", "Gradients", "adam_step", "adam_update", "execute_with_gradients", "grad", "gradient_descent_update", "is_variable", "jac", "lamb_update", "lars_update", "optimizer_update", "set_with_grads", "stop_gradient", "unset_with_grads", "value_and_grad", "variable", "variable_data", "with_grads", "Layers", "conv1d", "conv1d_transpose", "conv2d", "conv2d_transpose", "conv3d", "conv3d_transpose", "deconv_length", "depthwise_conv2d", "dropout", "handle_padding", "linear", "lstm_update", "multi_head_attention", "scaled_dot_product_attention", "Linear algebra", "cholesky", "cross", "det", "diagonal", "eigh", "eigvalsh", "inv", "matmul", "matrix_norm", "matrix_power", "matrix_rank", "matrix_transpose", "outer", "pinv", "qr", "slogdet", "solve", "svd", "svdvals", "tensordot", "trace", "vecdot", "vector_norm", "vector_to_skew_symmetric_matrix", "Losses", "binary_cross_entropy", "cross_entropy", "sparse_cross_entropy", "Manipulation", "clip", "concat", "constant_pad", "expand_dims", "flip", "permute_dims", "repeat", "reshape", "roll", "split", "squeeze", "stack", "swapaxes", "tile", "zero_pad", "Meta", "fomaml_step", "maml_step", "reptile_step", "Nest", "all_nested_indices", "copy_nest", "index_nest", "insert_into_nest_at_index", "insert_into_nest_at_indices", "map", "map_nest_at_index", "map_nest_at_indices", "multi_index_nest", "nested_any", "nested_indices_where", "nested_map", "nested_multi_map", "prune_nest_at_index", "prune_nest_at_indices", "set_nest_at_index", "set_nest_at_indices", "Norms", "layer_norm", "Random", "multinomial", "randint", "random_normal", "random_uniform", "seed", "shuffle", "Searching", "argmax", "argmin", "nonzero", "where", "Set", "unique_all", "unique_counts", "unique_inverse", "unique_values", "Sorting", "argsort", "searchsorted", "sort", "Statistical", "einsum", "max", "mean", "min", "prod", "std", "sum", "var", "Utility", "all", "any", "Glossary", "Contents", "&lt;no title&gt;", "&lt;no title&gt;", "Inspection", "add_array_specs", "fn_array_spec", "Roadmap", "Activations", "GEGLU", "GELU", "Converters", "to_ivy_module", "Initializers", "Constant", "FirstLayerSiren", "GlorotUniform", "Initializer", "KaimingNormal", "Ones", "Siren", "Uniform", "Zeros", "Layers", "Conv1D", "Conv1DTranspose", "Conv2D", "Conv2DTranspose", "Conv3D", "Conv3DTranspose", "DepthwiseConv2D", "Dropout", "LSTM", "Linear", "MultiHeadAttention", "Module", "Module", "Norms", "LayerNorm", "Optimizers", "Adam", "LAMB", "LARS", "Optimizer", "SGD", "Sequential", "Sequential", "&lt;no title&gt;", "Verbosity", "cprint"], "terms": {"class": [0, 1, 2, 3, 4, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 281, 282, 283, 284, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 745, 746, 750, 752, 756, 757, 758, 760, 767, 768, 769, 770, 773, 774, 776, 777, 778, 788, 789, 790, 1179, 1180], "ivi": [0, 1, 2, 3, 4, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 279, 280, 281, 282, 283, 284, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 745, 746, 752, 753, 755, 756, 757, 759, 763, 765, 766, 768, 769, 770, 771, 772, 788, 790, 1179, 1180, 1186], "arrai": [0, 1, 4, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 281, 282, 283, 284, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 748, 749, 750, 753, 754, 755, 757, 758, 760, 761, 762, 763, 765, 766, 768, 770, 771, 772, 773, 774, 776, 777, 778, 790, 1179, 1180], "arraywithactiv": [0, 2, 3, 775], "sourc": [0, 1, 2, 3, 4, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 278, 279, 280, 281, 282, 283, 284, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 745, 746, 747, 748, 749, 751, 752, 767, 768, 1180], "base": [0, 1, 2, 3, 4, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 281, 282, 284, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 749, 754, 756, 760, 762, 766, 768, 773, 789], "abc": [0, 1, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 283, 284, 775], "gelu": [0, 1, 281, 282], "approxim": [0, 1, 241, 242, 281, 282, 757], "true": [0, 1, 2, 3, 227, 228, 231, 232, 233, 234, 235, 236, 239, 240, 241, 242, 243, 244, 245, 246, 249, 250, 251, 252, 255, 256, 257, 258, 259, 260, 261, 262, 281, 282, 283, 284, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 745, 746, 755, 758, 760, 761, 762, 763, 768, 769, 771, 773, 776, 777, 778], "out": [0, 1, 2, 3, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 278, 279, 280, 281, 282, 283, 284, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 747, 748, 750, 751, 752, 753, 754, 755, 757, 758, 759, 760, 761, 762, 763, 765, 766, 767, 768, 769, 770, 772, 773, 775, 776, 777, 778, 789, 1180], "none": [0, 1, 2, 3, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 281, 282, 283, 284, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 751, 754, 755, 756, 758, 759, 760, 761, 762, 763, 765, 768, 769, 770, 771, 773, 775, 777, 778], "instanc": [0, 1, 2, 3, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 281, 282, 283, 284, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 745, 746, 749, 750, 751, 756, 757, 758, 760, 761, 762, 763, 766, 767, 769, 771, 776, 777, 778, 1179], "method": [0, 1, 2, 3, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 281, 282, 283, 284, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 745, 746, 749, 750, 754, 755, 756, 757, 758, 760, 763, 766, 767, 769, 773, 774, 777, 778, 790, 1180], "variant": [0, 1, 2, 3, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 281, 282, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 757, 758], "thi": [0, 1, 2, 3, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 278, 279, 280, 281, 282, 283, 284, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 789, 790, 1180, 1186], "simpli": [0, 1, 2, 3, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 281, 282, 283, 284, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 749, 750, 756, 757, 758, 760, 761, 763, 765, 767, 768, 769, 770, 771, 773, 777, 778, 790, 1179], "wrap": [0, 1, 2, 3, 220, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 262, 281, 282, 283, 284, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 746, 753, 756, 757, 760, 761, 763, 765, 767, 768, 769, 770, 771, 773, 775, 778, 790, 1179], "function": [0, 1, 2, 3, 220, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 278, 281, 282, 283, 284, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 745, 746, 749, 752, 753, 755, 757, 758, 759, 761, 762, 765, 767, 771, 772, 774, 775, 776, 777, 788, 789, 1179, 1180], "so": [0, 1, 2, 3, 220, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 278, 279, 281, 282, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 748, 749, 750, 754, 755, 756, 757, 758, 760, 761, 762, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 790, 1180], "docstr": [0, 1, 2, 3, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 281, 282, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 750, 752, 753, 754, 755, 756, 761, 763], "also": [0, 1, 2, 3, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 278, 279, 281, 282, 283, 284, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 747, 748, 749, 750, 751, 753, 754, 756, 757, 758, 759, 760, 761, 762, 763, 766, 767, 768, 769, 770, 771, 773, 776, 777, 778, 789, 790], "appli": [0, 1, 2, 3, 220, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 281, 282, 283, 284, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 747, 748, 749, 750, 754, 756, 757, 758, 760, 761, 763, 766, 768, 769, 770, 771, 775, 776, 777, 778, 788, 790, 1179, 1180], "minim": [0, 1, 2, 3, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 281, 282, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 757, 771, 773], "chang": [0, 1, 2, 3, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 280, 281, 282, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 748, 749, 750, 751, 752, 757, 758, 759, 760, 761, 765, 768, 773, 777, 790, 1180, 1186], "exampl": [0, 1, 2, 3, 225, 226, 227, 228, 231, 232, 233, 234, 235, 236, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 280, 281, 282, 709, 710, 711, 712, 715, 716, 745, 746, 748, 749, 750, 753, 754, 755, 757, 759, 760, 761, 763, 765, 766, 767, 768, 769, 770, 771, 773, 775, 776, 777, 778, 789, 790, 1180], "x": [0, 1, 2, 3, 220, 223, 224, 225, 226, 227, 228, 231, 232, 233, 234, 235, 236, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 253, 254, 255, 256, 257, 258, 259, 260, 281, 282, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 752, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 765, 768, 769, 771, 773, 775, 776, 777, 778, 1180], "0": [0, 1, 2, 3, 225, 226, 227, 228, 231, 232, 233, 234, 235, 236, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 253, 254, 255, 256, 257, 258, 259, 260, 281, 282, 283, 284, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 749, 754, 757, 758, 760, 761, 762, 765, 769, 773, 775, 776, 777, 778, 790, 1180], "3": [0, 1, 2, 3, 225, 226, 227, 228, 231, 232, 233, 234, 235, 236, 239, 240, 241, 242, 245, 246, 249, 250, 253, 254, 257, 258, 281, 282, 709, 710, 711, 712, 715, 716, 748, 752, 758, 759, 760, 765, 768, 769, 773, 775, 776, 777, 778, 1180], "1": [0, 1, 2, 3, 225, 226, 227, 228, 231, 232, 233, 234, 235, 236, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 253, 254, 255, 256, 257, 258, 259, 260, 279, 280, 281, 282, 283, 284, 709, 710, 711, 712, 715, 716, 749, 750, 751, 752, 755, 756, 758, 759, 760, 761, 762, 763, 765, 768, 769, 771, 772, 773, 775, 776, 777, 778, 790, 1180], "y": [0, 1, 2, 3, 225, 226, 227, 228, 231, 232, 233, 234, 235, 236, 239, 240, 241, 242, 243, 244, 245, 246, 249, 250, 253, 254, 255, 256, 257, 258, 259, 260, 281, 282, 709, 710, 711, 712, 715, 716, 754, 758, 761, 765, 768, 773, 775], "print": [0, 1, 2, 3, 225, 226, 227, 228, 231, 232, 233, 234, 235, 236, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 281, 282, 283, 284, 709, 710, 711, 712, 715, 716, 745, 746, 748, 749, 758, 759, 760, 768, 773, 775, 776, 777, 1180], "185": [0, 1, 281, 282], "046": [0, 1, 281, 282], "return": [0, 1, 2, 3, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 281, 282, 283, 284, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 748, 749, 754, 755, 756, 757, 758, 760, 761, 762, 763, 766, 767, 768, 769, 770, 771, 773, 775, 776, 777, 778, 790, 1180], "type": [0, 1, 2, 3, 220, 221, 222, 223, 224, 225, 226, 228, 229, 230, 231, 232, 233, 234, 235, 236, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 281, 282, 283, 284, 707, 708, 709, 710, 712, 713, 714, 715, 716, 745, 746, 748, 749, 750, 751, 753, 754, 755, 756, 757, 758, 760, 762, 766, 767, 768, 770, 771, 773, 775, 776, 1180], "leaky_relu": [0, 1, 281, 282, 760, 1180], "alpha": [0, 1, 281, 282, 760, 761], "2": [0, 1, 2, 3, 225, 226, 227, 228, 231, 232, 233, 234, 235, 236, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 253, 254, 255, 256, 257, 258, 259, 260, 281, 282, 709, 710, 711, 712, 715, 716, 748, 749, 750, 752, 756, 758, 760, 765, 768, 769, 771, 772, 773, 775, 776, 777, 778, 790, 1180], "39": [0, 1, 231, 232, 249, 250, 281, 282, 715, 716], "85": [0, 1, 249, 250, 281, 282, 715, 716], "17": [0, 1, 281, 282, 758, 768], "relu": [0, 1, 261, 262, 281, 282, 762, 776, 777, 1180], "sigmoid": [0, 1, 281, 282, 773, 776, 777, 1180], "269": [0, 1, 281, 282], "731": [0, 1, 281, 282], "881": [0, 1, 231, 232, 281, 282, 715, 716], "softmax": [0, 1, 261, 262, 281, 282, 1180], "axi": [0, 1, 233, 234, 241, 242, 243, 244, 245, 246, 251, 252, 255, 256, 257, 258, 259, 260, 281, 282, 283, 284, 709, 710, 756, 758, 760, 761, 763, 768, 769, 771, 773, 775, 778, 789], "422": [0, 1, 281, 282], "155": [0, 1, 281, 282], "softplu": [0, 1, 281, 282, 1180], "3461": [0, 1, 281, 282], "6491": [0, 1, 281, 282], "535": [0, 1, 281, 282], "42": [0, 1, 249, 250, 281, 282, 773, 778], "activ": [1, 261, 262, 282, 745, 746, 748, 749, 751, 752, 754, 777, 1180], "support": [1, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 226, 228, 230, 232, 233, 234, 235, 236, 238, 240, 242, 244, 246, 248, 250, 252, 254, 256, 258, 260, 262, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 278, 279, 280, 282, 284, 286, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 708, 710, 712, 713, 714, 716, 718, 720, 722, 724, 726, 728, 730, 732, 734, 736, 738, 740, 742, 744, 746, 748, 756, 757, 758, 759, 760, 762, 763, 766, 767, 768, 770, 771, 772, 773, 775, 776, 778, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 804, 805, 806, 807, 808, 809, 811, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1103, 1104, 1105, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1123, 1124, 1125, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1145, 1147, 1148, 1149, 1150, 1151, 1152, 1154, 1155, 1156, 1157, 1159, 1160, 1161, 1162, 1164, 1165, 1166, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1177, 1178, 1179, 1180, 1184, 1185, 1186, 1188, 1189, 1191, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1215, 1217, 1219, 1220, 1221, 1222, 1223, 1225, 1226, 1228], "framework": [1, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 226, 228, 230, 232, 234, 235, 236, 238, 240, 242, 244, 246, 248, 250, 252, 254, 256, 258, 260, 262, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 278, 279, 280, 282, 283, 284, 286, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 708, 710, 712, 714, 716, 718, 720, 722, 724, 726, 728, 730, 732, 734, 736, 738, 740, 742, 744, 746, 748, 750, 753, 756, 758, 759, 762, 763, 765, 766, 767, 769, 770, 772, 773, 775, 778, 789, 790, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 804, 805, 806, 807, 808, 809, 811, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1103, 1104, 1105, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1123, 1124, 1125, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1145, 1147, 1148, 1149, 1150, 1151, 1152, 1154, 1155, 1156, 1157, 1159, 1160, 1161, 1162, 1164, 1165, 1166, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1177, 1178, 1179, 1180, 1184, 1185, 1186, 1188, 1189, 1191, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1215, 1217, 1219, 1220, 1221, 1222, 1223, 1225, 1226, 1228], "data": [2, 3, 4, 225, 226, 228, 231, 232, 233, 234, 235, 236, 241, 242, 245, 246, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 277, 279, 283, 284, 709, 710, 712, 715, 716, 748, 753, 754, 756, 757, 762, 763, 766, 768, 770, 771, 773, 775, 1179, 1180, 1186], "arraywithcr": [2, 3, 225, 775], "arraywithdatatyp": [2, 3, 227, 775], "arraywithdevic": [2, 3, 229, 775], "arraywithelementwis": [2, 3, 231, 750, 767, 775], "arraywithgener": [2, 3, 233, 775], "arraywithgradi": [2, 3, 235, 775], "arraywithimag": [2, 3, 237, 775], "arraywithlay": [2, 3, 239, 775], "arraywithlinearalgebra": [2, 3, 241, 775], "arraywithloss": [2, 3, 243, 775], "arraywithmanipul": [2, 3, 245, 775], "arraywithnorm": [2, 3, 247, 775], "arraywithrandom": [2, 3, 249, 775], "arraywithsearch": [2, 3, 251, 775], "arraywithset": [2, 3, 253, 775], "arraywithsort": [2, 3, 255, 775], "arraywithstatist": [2, 3, 257, 775], "arraywithutil": [2, 3, 259, 775], "properti": [2, 3, 283, 284, 758, 760, 762, 763, 768, 775, 776, 777], "t": [2, 3, 261, 262, 279, 280, 745, 746, 748, 749, 750, 751, 752, 758, 760, 761, 765, 766, 769, 771, 773, 775, 776, 777, 778, 790], "__add__": [2, 3, 756, 757, 758, 767, 768, 775], "other": [2, 3, 227, 228, 233, 234, 257, 258, 279, 283, 284, 711, 712, 715, 716, 748, 749, 750, 751, 754, 755, 757, 758, 759, 760, 761, 762, 763, 767, 768, 771, 773, 775, 777, 778, 788, 789, 790, 1179, 1180], "special": [2, 3, 257, 258, 750, 754, 756, 757, 758, 761, 767, 771], "add": [2, 3, 231, 232, 247, 248, 261, 262, 283, 284, 715, 716, 745, 746, 748, 749, 750, 753, 754, 756, 757, 759, 760, 761, 763, 765, 767, 768, 769, 771, 773, 775, 790, 1180, 1186], "paramet": [2, 3, 220, 221, 222, 223, 224, 225, 226, 227, 228, 231, 232, 233, 234, 235, 236, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 281, 282, 283, 284, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 745, 746, 750, 754, 756, 757, 759, 760, 766, 773, 775, 776, 789], "self": [2, 3, 225, 226, 227, 228, 231, 232, 233, 234, 235, 236, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 281, 282, 283, 284, 707, 708, 709, 710, 711, 712, 715, 716, 749, 767, 768, 773, 775, 776, 777, 778, 1180], "first": [2, 3, 231, 232, 233, 234, 241, 242, 249, 250, 251, 252, 253, 254, 278, 279, 715, 716, 748, 749, 750, 751, 752, 756, 758, 759, 760, 762, 763, 766, 767, 768, 771, 773, 775, 776, 778], "input": [2, 3, 220, 223, 224, 225, 226, 227, 228, 231, 232, 233, 234, 235, 236, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 281, 282, 283, 284, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 754, 756, 757, 758, 760, 761, 762, 763, 765, 766, 767, 768, 769, 770, 771, 773, 775, 776, 777, 778, 790], "should": [2, 3, 225, 226, 231, 232, 233, 234, 235, 236, 241, 242, 245, 246, 249, 250, 251, 252, 257, 258, 277, 279, 281, 282, 283, 284, 715, 716, 745, 746, 748, 749, 750, 751, 752, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 765, 766, 767, 768, 769, 770, 771, 773, 775, 776, 777, 1180], "have": [2, 3, 225, 226, 227, 228, 231, 232, 233, 234, 235, 236, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 277, 278, 279, 280, 281, 282, 283, 284, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 748, 749, 750, 751, 752, 754, 756, 757, 758, 759, 760, 761, 762, 763, 765, 766, 767, 768, 769, 770, 771, 773, 774, 775, 776, 777, 778, 789, 790, 1179, 1180], "numer": [2, 3, 227, 228, 231, 232, 233, 234, 241, 242, 249, 250, 251, 252, 711, 712, 715, 716, 754, 762, 766, 773, 777], "second": [2, 3, 231, 232, 235, 236, 241, 242, 253, 254, 280, 715, 716, 748, 758, 760, 761, 762, 771, 775], "must": [2, 3, 225, 226, 227, 228, 231, 232, 233, 234, 235, 236, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 278, 280, 281, 282, 283, 284, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 748, 749, 750, 751, 754, 756, 757, 758, 763, 767, 769, 770, 773, 777, 778], "compat": [2, 3, 231, 232, 241, 242, 245, 246, 251, 252, 257, 258, 259, 260, 279, 715, 716, 754, 756, 765, 773, 790, 1180], "see": [2, 3, 227, 228, 231, 232, 241, 242, 251, 252, 257, 258, 259, 260, 278, 715, 716, 747, 748, 749, 750, 756, 758, 759, 760, 762, 763, 768, 770, 773, 775, 776, 789, 790, 1180], "broadcast": [2, 3, 225, 226, 227, 228, 231, 232, 233, 234, 235, 236, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 257, 258, 259, 260, 281, 282, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 754, 757, 758, 760, 768, 769, 773], "ret": [2, 3, 220, 221, 222, 223, 224, 225, 226, 227, 228, 231, 232, 233, 234, 235, 236, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 257, 258, 259, 260, 281, 282, 283, 284, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 754, 757, 761, 771, 773, 778], "an": [2, 3, 220, 223, 224, 225, 226, 227, 228, 231, 232, 233, 234, 235, 236, 241, 242, 245, 246, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 279, 280, 283, 284, 709, 710, 711, 712, 713, 714, 715, 716, 745, 746, 748, 749, 750, 751, 752, 754, 756, 757, 758, 759, 760, 761, 762, 763, 765, 766, 767, 768, 769, 770, 771, 773, 775, 776, 777, 778, 789, 790, 1179, 1180], "contain": [2, 3, 220, 223, 224, 225, 226, 227, 228, 231, 232, 233, 234, 241, 242, 243, 244, 245, 246, 251, 252, 253, 254, 257, 258, 259, 260, 278, 281, 282, 283, 284, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 745, 746, 748, 750, 751, 752, 753, 756, 757, 758, 760, 763, 766, 769, 771, 772, 773, 774, 777, 790, 1179, 1180], "element": [2, 3, 225, 226, 231, 232, 233, 234, 241, 242, 245, 246, 249, 250, 251, 252, 253, 254, 257, 258, 281, 282, 283, 284, 709, 710, 715, 716, 757, 760, 762, 773], "wise": [2, 3, 231, 232, 241, 242, 281, 282, 283, 284, 715, 716], "sum": [2, 3, 231, 232, 233, 234, 257, 258, 283, 284, 715, 716, 763, 768, 769, 771, 773], "The": [2, 3, 220, 221, 222, 223, 224, 225, 226, 227, 228, 231, 232, 233, 234, 235, 236, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 277, 278, 280, 281, 282, 283, 284, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 747, 748, 750, 751, 752, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 765, 766, 767, 768, 769, 770, 771, 772, 773, 776, 777, 778, 789, 1179, 1180], "determin": [2, 3, 231, 232, 241, 242, 245, 246, 259, 260, 278, 283, 284, 715, 716, 757, 762, 763, 768, 769, 770], "promot": [2, 3, 227, 228, 231, 232, 241, 242, 711, 712, 715, 716, 757, 763, 769], "With": [2, 3, 225, 226, 227, 228, 231, 232, 233, 234, 235, 236, 241, 242, 251, 252, 257, 258, 279, 280, 709, 710, 711, 712, 715, 716, 748, 758, 760, 761, 766, 773], "onli": [2, 3, 249, 250, 278, 283, 284, 747, 748, 749, 750, 754, 756, 758, 760, 761, 762, 763, 765, 766, 767, 768, 769, 770, 771, 773, 775, 776, 777, 778, 788, 790, 1180], "4": [2, 3, 225, 226, 227, 228, 231, 232, 233, 234, 235, 236, 239, 240, 241, 242, 245, 246, 249, 250, 253, 254, 257, 258, 280, 281, 282, 283, 284, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 750, 752, 758, 760, 765, 768, 773, 775, 776, 777, 778, 1180], "5": [2, 3, 225, 226, 227, 228, 231, 232, 233, 234, 235, 236, 241, 242, 245, 246, 247, 248, 249, 250, 253, 254, 255, 256, 257, 258, 709, 710, 711, 712, 715, 716, 749, 752, 756, 758, 760, 762, 765, 775, 776, 777], "6": [2, 3, 225, 226, 231, 232, 233, 234, 235, 236, 239, 240, 245, 246, 249, 250, 255, 256, 257, 258, 709, 710, 715, 716, 752, 758, 760, 765, 768, 773, 775, 776, 777], "z": [2, 3, 231, 232, 233, 234, 241, 242, 243, 244, 249, 250, 715, 716, 758, 765, 768, 773, 775], "7": [2, 3, 231, 232, 233, 234, 235, 236, 239, 240, 243, 244, 245, 246, 249, 250, 253, 254, 255, 256, 257, 258, 715, 716, 749, 752, 758, 760, 763, 768, 771], "9": [2, 3, 231, 232, 233, 234, 235, 236, 239, 240, 245, 246, 249, 250, 255, 256, 257, 258, 715, 716, 752, 758, 760, 776, 777], "mix": [2, 3, 227, 228, 231, 232, 711, 712, 715, 716, 753, 758, 760, 771, 773, 1179], "b": [2, 3, 227, 228, 231, 232, 233, 234, 277, 280, 709, 710, 711, 712, 715, 716, 747, 753, 758, 763, 765, 768, 772, 773, 774, 776, 777, 778, 788, 1180, 1186], "8": [2, 3, 231, 232, 233, 234, 243, 244, 245, 246, 249, 250, 253, 254, 255, 256, 257, 258, 715, 716, 748, 752, 758, 760, 768, 772, 776, 1180], "__init__": [2, 3, 4, 283, 284, 754, 761, 765, 769, 773, 775, 776, 777, 778, 1180], "__le__": [2, 3], "less": [2, 3, 231, 232, 241, 242, 249, 250, 257, 258, 279, 715, 716, 749, 756, 758, 768, 769, 771, 772, 773], "than": [2, 3, 233, 234, 235, 236, 241, 242, 249, 250, 253, 254, 257, 258, 279, 283, 284, 715, 716, 749, 751, 754, 758, 760, 762, 768, 769, 771, 773, 776, 777, 778, 790], "equal": [2, 3, 225, 226, 227, 228, 231, 232, 233, 234, 241, 242, 245, 246, 249, 250, 255, 256, 257, 258, 283, 284, 711, 712, 715, 716, 758, 768, 769], "result": [2, 3, 225, 226, 227, 228, 231, 232, 233, 234, 235, 236, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 257, 258, 259, 260, 281, 282, 283, 284, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 749, 754, 756, 757, 758, 760, 761, 762, 766, 767, 768, 769, 771, 773, 776, 790, 1180], "bool": [2, 3, 220, 221, 222, 223, 224, 227, 228, 231, 232, 233, 234, 235, 236, 241, 242, 245, 246, 249, 250, 251, 252, 255, 256, 257, 258, 259, 260, 281, 282, 283, 284, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 745, 746, 754, 758, 761, 769, 771, 773, 778], "oper": [2, 3, 227, 228, 233, 234, 235, 236, 239, 240, 278, 283, 284, 711, 712, 748, 750, 757, 758, 760, 761, 763, 767, 768, 770, 771, 773, 776, 777, 1179], "fals": [2, 3, 220, 221, 222, 223, 224, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 241, 242, 245, 246, 251, 252, 255, 256, 257, 258, 259, 260, 281, 282, 283, 284, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 745, 746, 758, 760, 761, 762, 765, 771, 773, 776, 777, 778], "__radd__": [2, 3, 757, 758], "revers": [2, 3, 233, 234, 750, 757, 758, 761, 768, 778, 790], "__rrshift__": [2, 3], "bitwise_right_shift": [2, 3, 231, 232, 715, 716], "integ": [2, 3, 231, 232, 245, 246, 249, 250, 257, 258, 259, 260, 283, 284, 715, 716, 749, 760, 762, 766, 768, 773, 775], "x1": [2, 3, 227, 228, 231, 232, 241, 242, 251, 252, 711, 712, 715, 716, 756, 758, 761], "each": [2, 3, 227, 228, 231, 232, 233, 234, 235, 236, 239, 240, 241, 242, 245, 246, 253, 254, 278, 279, 280, 283, 284, 711, 712, 715, 716, 748, 749, 750, 751, 753, 754, 755, 756, 757, 758, 759, 760, 761, 763, 765, 766, 767, 768, 769, 771, 773, 775, 776, 778, 789, 790, 1180, 1186], "greater": [2, 3, 231, 232, 249, 250, 715, 716, 749], "32": [2, 3, 231, 232, 249, 250, 715, 716, 760, 776], "16": [2, 3, 231, 232, 233, 234, 241, 242, 249, 250, 715, 716, 749, 758, 760, 776], "__rshift__": [2, 3], "10": [2, 3, 231, 232, 233, 234, 235, 236, 249, 250, 279, 281, 282, 283, 284, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 748, 752, 758, 760, 762, 768, 769, 773, 775, 776], "64": [2, 3, 231, 232, 239, 240, 715, 716, 748, 760, 776, 777, 1180], "devic": [2, 3, 225, 226, 230, 233, 234, 249, 250, 279, 283, 284, 709, 710, 714, 749, 753, 754, 762, 763, 765, 766, 769, 773, 778, 790, 1179], "dtype": [2, 3, 225, 226, 227, 228, 233, 234, 239, 240, 249, 250, 251, 252, 257, 258, 709, 710, 711, 712, 754, 755, 758, 760, 761, 762, 763, 765, 766, 769, 770, 773, 775, 1180], "is_vari": [2, 3, 235, 236, 771, 775], "whether": [2, 3, 220, 221, 222, 223, 224, 227, 228, 231, 232, 233, 234, 235, 236, 245, 246, 249, 250, 281, 282, 283, 284, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 745, 746, 747, 748, 750, 756, 758, 768, 769, 771], "i": [2, 3, 220, 221, 222, 223, 224, 225, 226, 227, 228, 231, 232, 233, 234, 235, 236, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 255, 256, 257, 258, 259, 260, 278, 279, 280, 281, 282, 283, 284, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 789, 790, 1179, 1180], "variabl": [2, 3, 220, 221, 222, 223, 224, 233, 234, 235, 236, 247, 248, 283, 284, 707, 708, 749, 754, 755, 756, 757, 760, 765, 769, 771, 773, 776, 777, 778, 790, 1180], "boolean": [2, 3, 227, 228, 231, 232, 233, 234, 235, 236, 245, 246, 283, 284, 711, 712, 715, 716, 760, 761, 762, 768], "trainabl": [2, 3, 235, 236, 757, 774, 776, 777], "otherwis": [2, 3, 220, 221, 222, 223, 224, 227, 228, 231, 232, 233, 234, 235, 236, 241, 242, 245, 246, 251, 252, 257, 258, 259, 260, 281, 282, 283, 284, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 758, 760, 767, 768, 769, 770, 773], "mt": [2, 3, 775], "ndim": [2, 3, 760], "number": [2, 3, 227, 228, 233, 234, 241, 242, 245, 246, 249, 250, 253, 254, 257, 258, 259, 260, 277, 278, 283, 284, 711, 712, 715, 716, 748, 749, 758, 760, 762, 768, 770, 771, 773, 776, 1180], "dimens": [2, 3, 225, 226, 233, 234, 239, 240, 241, 242, 243, 244, 245, 246, 249, 250, 251, 252, 253, 254, 257, 258, 259, 260, 283, 284, 758, 760, 762, 773, 776], "ax": [2, 3, 241, 242, 245, 246, 251, 252, 257, 258, 259, 260, 281, 282, 754, 758, 760, 769, 773, 775], "shape": [2, 3, 225, 226, 227, 228, 231, 232, 233, 234, 235, 236, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 259, 260, 281, 282, 283, 284, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 749, 754, 756, 757, 758, 760, 762, 769, 770, 771, 773, 775, 776, 777, 778, 1180], "size": [2, 3, 233, 234, 245, 246, 249, 250, 251, 252, 283, 284, 760, 762, 776], "product": [2, 3, 231, 232, 233, 234, 241, 242, 773], "": [2, 3, 220, 223, 224, 225, 226, 235, 236, 257, 258, 279, 280, 283, 284, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 760, 761, 762, 765, 766, 767, 768, 769, 770, 771, 773, 775, 776, 777, 778, 789, 790, 1179, 1180], "valu": [2, 3, 225, 226, 227, 228, 231, 232, 233, 234, 235, 236, 239, 240, 241, 242, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 283, 284, 709, 710, 711, 712, 715, 716, 748, 749, 755, 756, 757, 758, 760, 761, 762, 763, 766, 768, 769, 770, 771, 773, 775, 790], "one": [2, 3, 233, 234, 245, 246, 251, 252, 253, 254, 279, 280, 283, 284, 715, 716, 748, 749, 750, 755, 756, 758, 759, 760, 761, 763, 765, 766, 767, 768, 769, 771, 772, 775, 776, 778, 790, 1180], "more": [2, 3, 253, 254, 749, 750, 751, 753, 754, 755, 756, 758, 760, 761, 762, 763, 765, 766, 767, 768, 769, 771, 772, 773, 774, 775, 776, 777, 778, 789, 790, 1180], "ar": [2, 3, 220, 221, 222, 231, 232, 233, 234, 241, 242, 245, 246, 249, 250, 251, 252, 278, 279, 280, 283, 284, 709, 710, 715, 716, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 789, 790, 1179, 1180], "unknown": [2, 3], "For": [2, 3, 235, 236, 278, 279, 280, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 765, 766, 767, 768, 769, 770, 771, 773, 775, 776, 777, 778, 789, 790], "librari": [2, 3, 278, 279, 280, 713, 714, 747, 750, 761, 778, 788, 790, 1179, 1180], "graph": [2, 3, 235, 236, 280, 763, 768, 774, 790, 1179], "comput": [2, 3, 231, 232, 233, 234, 235, 236, 241, 242, 243, 244, 257, 258, 279, 280, 281, 282, 283, 284, 715, 716, 748, 760, 761, 763, 768, 773, 776, 790, 1179], "model": [2, 3, 776, 777, 1179, 1180], "mai": [2, 3, 231, 232, 255, 256, 280, 713, 714, 715, 716, 748, 749, 750, 760, 761, 768, 771, 774, 775, 777], "due": [2, 3, 279, 748, 751, 761, 771], "depend": [2, 3, 227, 228, 255, 256, 279, 711, 712, 748, 749, 750, 751, 757, 760, 761, 766, 769, 771, 773, 790], "collect": [220, 283, 284, 707, 760, 762, 789], "accept": [220, 231, 232, 707, 715, 716, 748, 749, 754, 756, 757, 758, 760, 761, 762, 763, 766, 767, 768, 770, 771, 775, 1179, 1180], "args_to_ivi": 220, "arg": [220, 221, 222, 283, 284, 752, 773, 777], "include_deriv": [220, 221, 222, 223, 224, 707, 708], "kwarg": [220, 221, 222, 281, 282, 283, 284, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 773, 777], "keyword": [220, 221, 222, 283, 284, 754, 760, 761, 762, 766, 769, 770, 771, 776], "form": [220, 221, 222, 223, 224, 225, 226, 235, 236, 241, 242, 279, 283, 284, 747, 760, 763, 769, 777, 778], "all": [220, 221, 222, 223, 224, 225, 226, 233, 234, 241, 242, 245, 246, 249, 250, 259, 260, 261, 262, 278, 279, 280, 283, 284, 707, 708, 715, 716, 745, 746, 747, 748, 749, 750, 751, 752, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 765, 766, 767, 768, 769, 770, 771, 772, 773, 775, 776, 777, 778, 789, 790, 1179, 1180], "nest": [220, 221, 222, 223, 224, 283, 284, 707, 708, 754, 760, 763, 767, 768, 776, 777, 790, 1179], "argument": [220, 221, 222, 223, 224, 231, 232, 233, 234, 278, 283, 284, 707, 708, 715, 716, 750, 753, 754, 755, 757, 758, 759, 760, 761, 762, 763, 765, 766, 767, 768, 773, 775, 776, 1179], "unchang": [220, 221, 222, 223, 224], "iter": [220, 221, 222, 223, 224, 233, 234, 245, 246, 261, 262, 280, 283, 284, 745, 746, 761, 768, 773, 776], "ani": [220, 221, 222, 225, 226, 231, 232, 233, 234, 259, 260, 261, 262, 278, 279, 280, 283, 284, 713, 714, 715, 716, 745, 746, 747, 748, 749, 750, 752, 753, 754, 756, 757, 758, 759, 760, 761, 762, 763, 765, 766, 767, 768, 769, 770, 771, 773, 775, 776, 777, 778, 789, 790, 1179, 1180], "posit": [220, 221, 222, 231, 232, 233, 234, 241, 242, 245, 246, 715, 716, 749, 750, 754, 760, 761, 762, 766, 776, 789], "check": [220, 221, 222, 223, 224, 227, 228, 233, 234, 235, 236, 278, 279, 280, 283, 284, 711, 712, 748, 749, 750, 754, 758, 760, 766, 768, 772, 773, 775, 776, 777, 778, 789, 1180], "option": [220, 221, 222, 223, 224, 225, 226, 227, 228, 231, 232, 233, 234, 235, 236, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 257, 258, 259, 260, 261, 262, 281, 282, 283, 284, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 745, 746, 748, 749, 750, 754, 755, 756, 757, 758, 760, 761, 762, 763, 768, 769, 770, 771, 773, 778, 790], "dict": [220, 221, 222, 223, 224, 233, 234, 281, 282, 283, 284, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 755, 761, 768, 776, 777, 1179], "recurs": [220, 221, 222, 223, 224, 283, 284, 707, 708, 748, 752, 763, 768, 777, 790], "deriv": [220, 221, 222, 223, 224, 225, 226, 235, 236, 707, 708, 709, 710, 769, 770, 775, 777], "from": [220, 221, 222, 223, 224, 225, 226, 227, 228, 233, 234, 235, 236, 239, 240, 245, 246, 249, 250, 251, 252, 257, 258, 259, 260, 261, 262, 278, 279, 280, 283, 284, 707, 708, 709, 710, 711, 712, 745, 746, 747, 748, 749, 750, 752, 753, 754, 755, 756, 757, 758, 760, 761, 762, 765, 766, 767, 768, 769, 770, 771, 773, 774, 775, 776, 777, 778, 789, 790, 1179, 1180, 1186], "tupl": [220, 221, 222, 223, 224, 225, 226, 227, 228, 233, 234, 239, 240, 241, 242, 245, 246, 257, 258, 259, 260, 281, 282, 283, 284, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 754, 755, 756, 760, 761, 762, 769, 770, 773, 776, 777, 778, 790], "list": [220, 221, 222, 223, 224, 225, 226, 227, 228, 233, 234, 239, 240, 245, 246, 247, 248, 261, 262, 281, 282, 283, 284, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 745, 746, 748, 750, 752, 754, 755, 756, 758, 760, 761, 762, 768, 769, 770, 773, 776, 777, 778, 790, 1180], "default": [220, 221, 222, 223, 224, 225, 226, 227, 228, 231, 232, 233, 234, 235, 236, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 281, 282, 283, 284, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 745, 746, 748, 749, 750, 756, 757, 758, 760, 761, 763, 765, 766, 769, 770, 773, 777, 1179], "str": [220, 221, 222, 233, 234, 239, 240, 281, 282, 283, 284, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 754, 755, 769, 770, 773, 778], "kei": [220, 221, 222, 281, 282, 283, 284, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 755, 760, 762, 768, 776], "word": [220, 221, 222, 768, 1179], "same": [220, 221, 222, 225, 226, 227, 228, 231, 232, 233, 234, 235, 236, 239, 240, 241, 242, 245, 246, 249, 250, 253, 254, 255, 256, 257, 258, 278, 280, 283, 284, 709, 710, 711, 712, 715, 716, 748, 749, 751, 752, 754, 755, 756, 758, 760, 761, 762, 763, 765, 766, 767, 768, 769, 770, 771, 773, 775, 777, 778, 790, 1180], "convert": [220, 221, 222, 223, 224, 225, 226, 280, 707, 708, 750, 760, 766, 767, 773, 790, 1179], "args_to_n": [220, 771], "nativ": [220, 222, 223, 224, 225, 226, 233, 234, 707, 708, 760, 761, 762, 766, 769, 771, 775, 776, 1179], "backend": [220, 222, 224, 233, 234, 235, 236, 278, 749, 750, 753, 756, 757, 758, 759, 760, 761, 762, 763, 766, 767, 769, 770, 771, 772, 774, 775, 778, 1179, 1180, 1186], "to_ivi": [220, 707, 708], "If": [220, 223, 224, 225, 226, 227, 228, 235, 236, 241, 242, 243, 244, 245, 246, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 278, 281, 282, 283, 284, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 747, 748, 749, 750, 751, 752, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 765, 766, 767, 768, 769, 770, 771, 772, 773, 775, 776, 778, 790, 1180], "set": [220, 223, 224, 233, 234, 235, 236, 241, 242, 251, 252, 254, 255, 256, 257, 258, 278, 283, 284, 747, 749, 751, 753, 754, 758, 759, 760, 761, 762, 763, 766, 767, 768, 769, 770, 771, 773, 775, 776], "leaf": [220, 223, 224, 283, 284, 763, 768, 776], "within": [220, 223, 224, 749, 750, 760, 762, 777, 790], "union": [220, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 239, 240, 241, 242, 243, 244, 245, 246, 249, 250, 251, 252, 257, 258, 259, 260, 281, 282, 283, 284, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 754, 755, 756, 758, 761, 763, 767, 768, 769, 770, 771, 773, 778], "nativearrai": [220, 223, 224, 225, 226, 227, 228, 231, 232, 233, 234, 235, 236, 239, 240, 241, 242, 243, 244, 245, 246, 249, 250, 281, 282, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 754, 755, 756, 758, 761, 763, 766, 767, 768, 771, 773, 775, 1179], "mayb": [220, 223, 224, 748, 773, 775], "manner": [220, 223, 224, 278, 707, 708, 754, 757, 760, 761, 770, 776, 789, 790], "travers": [220, 223, 224, 707, 708, 768, 769, 773], "lowest": [220, 223, 224, 249, 250, 707, 708, 763, 769, 790, 1179], "leav": [220, 223, 224, 707, 708, 715, 716, 750, 756, 757, 758, 760, 763, 768, 769, 771, 776, 777], "search": [220, 223, 224, 252, 278, 707, 708, 748, 754, 758, 760], "case": [220, 223, 224, 233, 234, 245, 246, 257, 258, 279, 283, 284, 748, 749, 750, 754, 755, 756, 757, 758, 760, 761, 763, 765, 766, 767, 768, 769, 770, 771, 773, 775, 777, 778, 790], "to_n": [220, 707, 708, 773], "item": [220, 224, 233, 234, 261, 262, 283, 284, 750, 769, 773, 775, 776, 778, 1180], "convers": [221, 222, 223, 224, 280, 708, 750, 766, 772, 774, 778, 789, 790, 1179, 1180, 1186], "asarrai": [225, 226, 233, 234, 760, 762, 766, 771], "copi": [225, 226, 227, 228, 233, 234, 245, 246, 283, 284, 709, 710, 711, 712, 713, 714, 749, 752, 757, 765, 769, 773, 776, 789, 790], "can": [225, 226, 227, 228, 245, 246, 249, 250, 278, 279, 280, 711, 712, 747, 748, 749, 750, 751, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 765, 766, 768, 769, 770, 771, 772, 773, 775, 776, 777, 778, 789, 790, 1179, 1180, 1186], "includ": [225, 226, 233, 234, 251, 252, 257, 258, 259, 260, 279, 283, 284, 749, 750, 754, 755, 756, 757, 758, 759, 760, 761, 763, 765, 767, 768, 769, 770, 771, 773, 789, 790], "ndarrai": [225, 226, 233, 234, 754, 756, 767, 769, 770, 771, 773, 775, 778, 1179], "nativedtyp": [225, 226, 233, 234, 249, 250, 709, 710, 754, 756, 769, 770, 773], "datatyp": [225, 226, 283, 284, 761], "infer": [225, 226, 233, 234, 245, 246, 709, 710, 753, 765, 766, 769, 770, 773, 778], "nativedevic": [225, 226, 229, 230, 233, 234, 249, 250, 709, 710, 713, 714, 754, 756, 769, 770], "which": [225, 226, 227, 228, 233, 234, 235, 236, 241, 242, 243, 244, 245, 246, 249, 250, 251, 252, 255, 256, 257, 258, 259, 260, 278, 279, 280, 281, 282, 283, 284, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 748, 749, 750, 752, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 765, 766, 767, 768, 769, 770, 771, 772, 773, 775, 776, 777, 778, 789, 790, 1179, 1180], "place": [225, 226, 231, 232, 233, 234, 245, 246, 283, 284, 709, 710, 713, 714, 715, 716, 749, 751, 753, 754, 755, 756, 757, 758, 760, 761, 763, 766, 768, 770, 771, 778, 1179], "creat": [225, 226, 233, 234, 249, 250, 279, 283, 284, 709, 710, 747, 748, 749, 750, 751, 752, 760, 761, 762, 766, 769, 770, 771, 773, 774, 777, 788, 789, 1179, 1180, 1186], "output": [225, 226, 227, 228, 231, 232, 233, 234, 235, 236, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 257, 258, 259, 260, 281, 282, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 748, 749, 753, 754, 756, 757, 758, 759, 760, 761, 762, 763, 766, 767, 768, 770, 771, 773, 775, 777, 778, 790, 1179, 1180], "write": [225, 226, 227, 228, 231, 232, 233, 234, 235, 236, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 257, 258, 259, 260, 280, 281, 282, 283, 284, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 749, 750, 752, 753, 754, 757, 758, 761, 762, 763, 765, 769, 771, 773, 775, 778], "It": [225, 226, 227, 228, 231, 232, 233, 234, 235, 236, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 259, 260, 281, 282, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 748, 749, 750, 752, 753, 754, 757, 758, 759, 760, 761, 762, 765, 766, 767, 768, 769, 771, 773, 775, 776, 777], "interpret": [225, 226], "empty_lik": [225, 226, 709, 710], "uniniti": [225, 226], "from_dlpack": [225, 226, 709, 710], "full_lik": [225, 226, 709, 710, 754], "fill_valu": [225, 226, 709, 710, 754, 762, 769], "float": [225, 226, 227, 228, 231, 232, 233, 234, 235, 236, 241, 242, 243, 244, 247, 248, 249, 250, 257, 258, 709, 710, 711, 712, 715, 716, 754, 756, 757, 760, 762, 763, 766, 768, 769, 771, 773, 775, 777], "scalar": [225, 226, 233, 234, 281, 282, 709, 710, 769, 790], "fill": [225, 226, 249, 250, 283, 284, 709, 710, 762], "where": [225, 226, 233, 234, 241, 242, 245, 246, 249, 250, 251, 252, 257, 258, 259, 260, 278, 279, 280, 283, 284, 747, 748, 749, 750, 752, 754, 755, 757, 760, 761, 762, 763, 765, 766, 767, 768, 769, 770, 771, 773, 776, 777, 778, 790, 1180], "everi": [225, 226, 233, 234, 749, 750, 751, 752, 756, 758, 759, 760, 762, 763, 765, 766, 768, 769, 771, 773, 775, 777], "int": [225, 226, 227, 228, 233, 234, 235, 236, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 255, 256, 257, 258, 259, 260, 709, 710, 711, 712, 713, 714, 754, 755, 756, 758, 760, 761, 762, 763, 768, 769, 770, 771, 773, 778], "000123": [225, 226], "ones": [225, 226, 233, 234, 235, 236, 249, 250, 283, 284, 709, 710, 758, 760, 775, 776, 1180], "meshgrid": [225, 226, 709, 710], "index": [225, 226, 233, 234, 251, 252, 253, 254, 255, 256, 283, 284, 709, 710, 752, 763, 768, 775], "xy": [225, 226, 709, 710], "native_arrai": [225, 226, 227, 228, 231, 232, 709, 710, 715, 716, 760, 762, 766], "A": [225, 226, 227, 228, 233, 234, 245, 246, 259, 260, 277, 278, 279, 280, 283, 284, 711, 712, 715, 716, 750, 752, 753, 756, 760, 763, 768, 769, 770, 773, 776, 790, 1179, 1180], "ones_lik": [225, 226, 709, 710, 765, 778, 1180], "tril": [225, 226, 709, 710], "k": [225, 226, 239, 240, 249, 250, 709, 710, 715, 716, 753, 761, 762, 773], "m": [225, 226, 241, 242, 249, 250, 715, 716, 748, 749, 751, 752, 753, 773], "n": [225, 226, 241, 242, 245, 246, 249, 250, 257, 258, 259, 260, 715, 716, 753, 760], "whose": [225, 226, 231, 232, 241, 242, 245, 246, 253, 254, 709, 710, 715, 716, 757, 760], "innermost": [225, 226, 241, 242], "two": [225, 226, 241, 242, 280, 748, 750, 757, 758, 759, 760, 761, 762, 767, 772, 776, 778, 1180], "mxn": [225, 226, 241, 242], "matric": [225, 226, 241, 242, 789], "diagon": [225, 226, 241, 242], "abov": [225, 226, 231, 232, 249, 250, 715, 716, 748, 749, 752, 755, 756, 757, 758, 760, 761, 763, 765, 767, 768, 769, 771, 773, 775, 776, 777, 778], "zero": [225, 226, 227, 228, 231, 232, 233, 234, 235, 236, 241, 242, 251, 252, 257, 258, 259, 260, 280, 709, 710, 711, 712, 715, 716, 756, 758, 760, 766, 767, 768, 769, 770, 773, 776, 777, 1180], "main": [225, 226, 748, 752, 755, 766, 768], "below": [225, 226, 747, 748, 750, 752, 753, 754, 755, 758, 760, 763, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 789, 1180], "lower": [225, 226, 241, 242, 249, 250, 715, 716, 749, 758, 760, 773, 790, 1179], "triangular": [225, 226, 241, 242], "part": [225, 226, 235, 236, 749, 751, 754, 759, 760, 763, 773, 774, 778, 789, 790], "specifi": [225, 226, 227, 228, 233, 234, 243, 244, 245, 246, 249, 250, 251, 252, 259, 260, 281, 282, 283, 284, 711, 712, 749, 753, 756, 759, 760, 761, 762, 763, 769, 770, 771, 773, 776, 777], "alloc": [225, 226, 227, 228, 711, 712, 749, 790], "triu": [225, 226, 709, 710], "upper": [225, 226, 241, 242, 249, 250, 760, 771], "zeros_lik": [225, 226, 709, 710, 761, 1180], "creation": [226, 283, 284, 710, 754, 760, 762, 766, 769, 770, 773], "data_typ": [227, 228, 711, 712, 754, 760, 769], "astyp": [227, 228, 239, 240, 711, 712, 761, 769, 771], "irrespect": [227, 228, 711, 712, 768, 771, 775], "rule": [227, 228, 241, 242, 711, 712, 755, 758, 760, 763, 767, 768, 769], "cast": [227, 228, 711, 712, 761, 762, 763, 769, 773, 1180], "point": [227, 228, 231, 232, 241, 242, 249, 250, 257, 258, 280, 711, 712, 715, 716, 749, 750, 756, 757, 758, 760, 767, 771, 773, 775, 776, 789], "nan": [227, 228, 231, 232, 233, 234, 257, 258, 283, 284, 711, 712, 715, 716, 754, 757, 760], "infin": [227, 228, 231, 232, 233, 234, 711, 712, 715, 716, 757], "integr": [227, 228, 711, 712, 748], "implement": [227, 228, 255, 256, 711, 712, 713, 714, 750, 753, 754, 756, 757, 760, 761, 762, 763, 765, 766, 767, 768, 769, 770, 771, 773, 775, 776, 777, 778, 789, 790, 1179, 1180], "when": [227, 228, 243, 244, 249, 250, 251, 252, 257, 258, 278, 279, 283, 284, 711, 712, 748, 749, 750, 751, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 765, 766, 767, 768, 769, 770, 771, 773, 775, 776, 778, 790, 1180], "non": [227, 228, 241, 242, 249, 250, 251, 252, 257, 258, 259, 260, 711, 712, 758, 766, 768, 769, 773], "desir": [227, 228, 233, 234, 278, 283, 284, 711, 712, 713, 714, 749, 761, 765, 769], "match": [227, 228, 283, 284, 711, 712, 758, 768], "newli": [227, 228, 711, 712, 749, 760, 771], "alwai": [227, 228, 235, 236, 245, 246, 711, 712, 749, 750, 754, 755, 756, 757, 759, 760, 761, 763, 765, 767, 768, 769, 771, 773, 790], "us": [227, 228, 231, 232, 233, 234, 235, 236, 245, 246, 247, 248, 261, 262, 280, 281, 282, 283, 284, 711, 712, 713, 714, 715, 716, 745, 746, 749, 750, 751, 753, 754, 755, 756, 757, 758, 760, 761, 762, 763, 765, 766, 767, 768, 769, 770, 771, 772, 773, 775, 777, 778, 789, 790, 1179, 1180], "float64": [227, 228, 233, 234, 249, 250, 711, 712, 760, 769], "broadcast_arrai": [227, 228, 711, 712], "against": [227, 228, 241, 242, 251, 252, 278, 711, 712, 715, 716, 760, 790], "arbitrari": [227, 228, 283, 284, 711, 712, 756, 760, 763, 768, 771, 777, 790], "its": [227, 228, 245, 246, 711, 712, 715, 716, 748, 749, 750, 752, 754, 757, 760, 761, 762, 766, 778, 790, 1179], "correspond": [227, 228, 231, 232, 233, 234, 245, 246, 257, 258, 283, 284, 711, 712, 715, 716, 749, 756, 757, 758, 759, 760, 761, 763, 765, 766, 767, 768, 769, 773], "x2": [227, 228, 231, 232, 233, 234, 241, 242, 251, 252, 711, 712, 715, 716, 756, 758, 761], "x3": [227, 228], "broadcast_to": [227, 228, 711, 712, 769], "store": [227, 228, 233, 234, 235, 236, 245, 246, 283, 284, 711, 712, 749, 757, 765, 767, 768, 773, 775, 776, 777, 1179], "code": [227, 228, 231, 232, 235, 236, 278, 279, 280, 283, 284, 711, 712, 713, 714, 715, 716, 748, 749, 750, 751, 752, 753, 755, 756, 757, 758, 759, 760, 761, 762, 763, 765, 766, 767, 768, 769, 771, 772, 773, 774, 775, 776, 777, 778, 788, 790, 1179, 1180, 1186], "can_cast": [227, 228, 711, 712, 763, 769], "occur": [227, 228, 253, 254, 711, 712], "accord": [227, 228, 233, 234, 257, 258, 711, 712, 748, 750, 752, 761, 763, 769], "float32": [227, 228, 239, 240, 711, 712, 758, 760, 769], "as_n": [227, 228, 229, 230, 711, 712, 713, 714, 769], "finfo": [227, 228, 711, 712, 760], "iinfo": [227, 228, 711, 712, 755], "is_bool_dtyp": [227, 228, 711, 712], "is_float_dtyp": [227, 228, 711, 712, 754], "int64": [227, 228, 249, 250, 711, 712, 760, 769, 773], "int32": [227, 228, 233, 234, 249, 250, 711, 712, 760, 769, 773], "arr": [227, 228, 233, 234, 711, 712, 769, 770], "is_int_dtyp": [227, 228, 711, 712, 754, 762], "is_uint_dtyp": [227, 228, 711, 712, 754, 762], "result_typ": [227, 228, 711, 712, 769], "arrays_and_dtyp": [227, 228, 711, 712], "involv": [227, 228, 279, 711, 712, 747, 752, 753, 758, 769, 778, 1180, 1186], "dev": [229, 230, 283, 284, 713, 714, 748, 763, 770, 775, 777], "to_devic": [229, 230, 713, 714], "stream": [229, 230, 713, 714], "ab": [231, 232, 715, 716, 760, 766, 769, 1180], "absolut": [231, 232, 283, 284, 715, 716, 747], "aco": [231, 232, 715, 716, 1180], "real": [231, 232, 715, 716], "invers": [231, 232, 715, 716, 789], "cosin": [231, 232, 715, 716], "57": [231, 232, 715, 716], "69": [231, 232, 776], "acosh": [231, 232, 715, 716, 1180], "repres": [231, 232, 715, 716, 752, 760, 761, 775], "area": [231, 232, 279, 715, 716, 771, 788, 1180], "hyperbol": [231, 232, 715, 716], "sector": [231, 232, 279, 715, 716], "99": [231, 232, 235, 236, 715, 716], "asin": [231, 232, 715, 716, 1180], "sine": [231, 232, 715, 716], "927": [231, 232, 715, 716], "12": [231, 232, 233, 234, 249, 250, 715, 716, 748, 758, 760, 765, 768, 769], "asinh": [231, 232, 715, 716, 1180], "82": [231, 232], "atan": [231, 232, 715, 716, 1180], "tangent": [231, 232, 715, 716, 757], "785": [231, 232, 715, 716], "464": [231, 232], "atan2": [231, 232, 715, 716, 1180], "coordin": [231, 232, 715, 716], "quotient": [231, 232, 715, 716], "245": [231, 232], "14": [231, 232, 233, 234, 249, 250, 711, 712, 715, 716, 752, 758, 760, 768], "atanh": [231, 232, 715, 716, 1180], "549": [231, 232, 715, 716], "47": [231, 232, 249, 250, 715, 716], "bitwise_and": [231, 232, 715, 716], "bitwise_invert": [231, 232, 715, 716], "bitiwse_invert": [231, 232], "bitwise_left_shift": [231, 232, 715, 716], "bitwise_or": [231, 232, 715, 716], "bitwise_xor": [231, 232, 715, 716], "ceil": [231, 232, 715, 716, 1180], "round": [231, 232, 278, 279, 280, 715, 716, 748, 749, 750, 751, 752, 754, 756, 757, 758, 759, 760, 761, 762, 763, 765, 766, 767, 768, 769, 770, 771, 773, 775, 776, 777, 778, 789, 1180], "co": [231, 232, 233, 234, 279, 715, 716, 769, 773, 789, 1180], "express": [231, 232, 715, 716, 755, 757, 773, 778], "radian": [231, 232, 715, 716, 757], "54": [231, 232, 715, 716, 758], "416": [231, 232], "cosh": [231, 232, 715, 716, 1180], "angl": [231, 232, 715, 716, 789], "76": [231, 232, 715, 716], "23": [231, 232, 249, 250, 709, 710, 715, 716, 773], "03": [231, 232, 715, 716], "81": [231, 232, 715, 716], "divid": [231, 232, 233, 234, 245, 246, 283, 284, 715, 716, 758, 767, 768], "dividend": [231, 232, 715, 716], "divisor": [231, 232, 235, 236, 257, 258, 715, 716], "375": [231, 232], "erf": [231, 232, 715, 716], "exponenti": [231, 232, 715, 716], "gauss": [231, 232, 715, 716], "error": [231, 232, 280, 283, 284, 715, 716, 748, 749, 754, 755, 756, 758, 760, 765, 767, 769, 770, 775, 790], "exp": [231, 232, 715, 716, 1180], "evalu": [231, 232, 283, 284, 715, 716, 749, 768, 769], "expm1": [231, 232, 715, 716, 769], "244": [231, 232], "918": [231, 232], "48": [231, 232, 715, 716], "_": [231, 232, 715, 716, 752, 757, 760, 768, 771, 776], "147": [231, 232], "floor": [231, 232, 715, 716, 1180], "floor_divid": [231, 232, 715, 716], "13": [231, 232, 233, 234, 239, 240, 249, 250, 758, 760, 768], "floormod": [231, 232, 715, 716, 1180], "denomin": [231, 232, 233, 234, 247, 248, 715, 716, 763, 769, 790], "mod": [231, 232, 715, 716], "15": [231, 232, 233, 234, 249, 250, 709, 710, 748, 758, 760], "greater_equ": [231, 232, 715, 716], "isfinit": [231, 232, 715, 716, 760], "test": [231, 232, 259, 260, 280, 715, 716, 748, 750, 753, 755, 758, 761, 766, 769, 790], "out_i": [231, 232, 715, 716], "self_i": [231, 232, 715, 716], "finit": [231, 232, 715, 716], "inf": [231, 232, 233, 234, 283, 284, 715, 716, 760], "isinf": [231, 232, 715, 716], "either": [231, 232, 233, 234, 283, 284, 715, 716, 748, 749, 750, 752, 757, 758, 760, 761, 763, 765, 768, 769, 770, 771, 773, 776, 790], "neg": [231, 232, 245, 246, 249, 250, 259, 260, 281, 282, 715, 716, 763, 768, 771], "isnan": [231, 232, 715, 716], "less_equ": [231, 232, 715, 716], "24": [231, 232, 233, 234, 776], "log": [231, 232, 715, 716, 749, 758, 763, 768, 771, 773, 776, 1180], "log10": [231, 232, 715, 716], "logarithm": [231, 232, 715, 716], "602": [231, 232], "699": [231, 232], "log1p": [231, 232, 715, 716], "693": [231, 232, 715, 716], "001": [231, 232, 247, 248, 776, 777], "0953": [231, 232], "log2": [231, 232, 715, 716], "logaddexp": [231, 232, 715, 716], "31": [231, 232, 776], "05": [231, 232, 235, 236, 247, 248, 257, 258, 715, 716, 759, 760, 762], "logical_and": [231, 232, 715, 716, 761, 1180], "logical_not": [231, 232, 715, 716, 769, 1180], "logical_or": [231, 232, 715, 716, 1180], "conform": [231, 232, 715, 716, 757], "api": [231, 232, 277, 278, 715, 716, 748, 749, 753, 756, 757, 758, 760, 761, 762, 763, 766, 767, 769, 770, 771, 772, 774, 776, 790, 1179, 1180, 1186], "standard": [231, 232, 247, 248, 249, 250, 257, 258, 277, 715, 716, 753, 754, 756, 757, 759, 760, 767, 768, 771, 790, 1180, 1186], "http": [231, 232, 715, 716, 748, 751, 757, 769], "org": [231, 232, 715, 716, 757], "latest": [231, 232, 715, 716, 748, 749, 750, 752, 757, 765, 769, 790], "extens": [231, 232, 715, 716, 748, 757, 760], "api_specif": [231, 232, 715, 716, 757], "gener": [231, 232, 234, 235, 236, 249, 250, 261, 262, 715, 716, 745, 746, 748, 749, 750, 752, 753, 754, 755, 756, 757, 758, 761, 762, 763, 766, 767, 768, 769, 770, 771, 772, 773, 775, 777, 778, 789, 790, 1179, 1180], "signatur": [231, 232, 279, 715, 716, 754, 756, 757, 758, 760, 769, 770, 771], "elementwise_funct": [231, 232, 715, 716, 757], "html": [231, 232, 279, 715, 716, 752, 757], "noqa": [231, 232, 715, 716], "both": [231, 232, 715, 716, 749, 756, 757, 758, 760, 761, 762, 763, 765, 768, 769, 770, 771, 773, 775, 776, 777, 778, 789, 790], "descript": [231, 232, 715, 716, 757, 760], "hint": [231, 232, 715, 716, 750, 754, 756, 757, 761, 763, 767, 771], "assum": [231, 232, 715, 716, 757, 760, 762, 765, 769, 775, 776, 790], "simplic": [231, 232, 715, 716, 757, 777, 789], "nestabl": [231, 232, 715, 716, 753, 757, 758, 760, 771, 1179], "therefor": [231, 232, 278, 715, 716, 748, 749, 751, 754, 756, 757, 758, 759, 760, 761, 762, 763, 767, 768, 769, 770, 771, 773, 775, 777, 790], "logical_xor": [231, 232, 715, 716], "multipli": [231, 232, 233, 234, 715, 716, 749, 758, 765, 767, 768], "not_equ": [231, 232, 715, 716], "pow": [231, 232, 715, 716], "expon": [231, 232, 233, 234], "remaind": [231, 232, 245, 246, 283, 284, 715, 716], "modulu": [231, 232, 715, 716], "instead": [231, 232, 715, 716, 748, 749, 750, 756, 757, 758, 760, 761, 762, 763, 766, 768, 771, 773, 775, 776, 790], "sign": [231, 232, 279, 715, 716, 748, 773, 778], "respect": [231, 232, 235, 236, 715, 716, 749, 750, 754, 756, 758, 760, 767, 768, 769], "x2_i": [231, 232, 715, 716], "11": [231, 232, 233, 234, 239, 240, 241, 242, 249, 250, 715, 716, 758, 760, 768, 769], "18": [231, 232, 249, 250, 715, 716, 758, 768], "94": [231, 232, 235, 236, 249, 250, 715, 716], "256": [231, 232], "0001": [231, 232], "36": [231, 232], "37": [231, 232, 715, 716], "67": [231, 232, 715, 716, 768], "45": [231, 232, 715, 716, 760], "678": [231, 232], "25": [231, 232, 233, 234, 241, 242, 243, 244, 249, 250, 257, 258, 715, 716, 768], "33": [231, 232, 247, 248, 249, 250, 257, 258, 715, 716], "sin": [231, 232, 233, 234, 715, 716, 767, 773, 1180], "841": [231, 232, 715, 716], "909": [231, 232, 715, 716], "141": [231, 232, 715, 716], "sinh": [231, 232, 715, 716, 1180], "63": [231, 232, 715, 716], "232": [231, 232, 715, 716], "51": [231, 232], "sqrt": [231, 232, 715, 716], "squar": [231, 232, 241, 242, 715, 716, 760], "root": [231, 232, 715, 716, 748, 749, 752, 776], "subtract": [231, 232, 715, 716, 758, 767, 768], "differ": [231, 232, 278, 279, 280, 283, 284, 748, 749, 753, 754, 755, 756, 757, 758, 760, 761, 763, 767, 768, 769, 770, 771, 773, 774, 775, 776, 777, 778, 790, 1180], "tan": [231, 232, 715, 716, 756, 757, 761, 763, 768, 771, 773, 1180], "56": [231, 232, 249, 250, 715, 716, 758], "19": [231, 232, 249, 250, 715, 716, 758], "tanh": [231, 232, 715, 716, 773, 1180], "762": [231, 232, 715, 716], "964": [231, 232, 715, 716], "trunc": [231, 232, 715, 716], "elementwis": [232, 716, 754, 763, 773], "all_equ": [233, 234], "equality_matrix": [233, 234], "compar": [233, 234, 255, 256, 283, 284, 755, 758, 760, 762, 765, 776], "matrix": [233, 234, 241, 242], "array_equ": [233, 234], "arrays_equ": [233, 234, 283, 284], "assert_supports_inplac": [233, 234], "rais": [233, 234, 245, 246, 249, 250, 259, 260, 279, 283, 284, 749, 755, 765, 771, 773, 775], "except": [233, 234, 245, 246, 249, 250, 259, 260, 283, 284, 749, 755, 757, 767, 771, 773, 775, 790], "clip_matrix_norm": [233, 234], "max_norm": [233, 234], "p": [233, 234, 748, 749, 753], "maximum": [233, 234, 235, 236, 245, 246, 251, 252, 283, 284, 715, 716, 749, 758, 776, 1180], "norm": [233, 234, 248, 754, 1180], "downscal": [233, 234], "max": [233, 234, 241, 242, 257, 258], "need": [233, 234, 245, 246, 280, 748, 749, 750, 751, 752, 754, 757, 758, 759, 761, 762, 763, 767, 768, 769, 771, 773, 775, 776, 789, 790], "894": [233, 234], "79": [233, 234], "clip_vector_norm": [233, 234], "vector": [233, 234, 241, 242, 789], "copy_arrai": [233, 234], "cumprod": [233, 234, 761, 778], "exclus": [233, 234, 235, 236, 283, 284, 760, 761, 763, 768, 778], "along": [233, 234, 243, 244, 245, 246, 249, 250, 251, 252, 255, 256, 257, 258, 259, 260, 281, 282, 283, 284, 750, 754, 758, 771, 773], "take": [233, 234, 280, 747, 748, 749, 750, 757, 758, 760, 762, 768, 769, 770, 771, 773, 775, 777, 778, 790, 1180, 1186], "cumul": [233, 234, 789], "exclud": [233, 234, 758, 773], "120": [233, 234], "cumsum": [233, 234, 769, 1180], "perform": [233, 234, 235, 236, 259, 260, 280, 754, 755, 756, 758, 760, 762, 763, 765, 766, 767, 768, 770, 771, 773, 776, 790], "last": [233, 234, 241, 242, 243, 244, 245, 246, 255, 256, 259, 260, 280, 283, 284, 749, 755, 758, 760, 762, 765, 771, 773, 790], "select": [233, 234, 748, 749, 750, 760, 771, 773, 775, 778, 790], "hold": [233, 234, 761, 776], "origin": [233, 234, 245, 246, 280, 283, 284, 749, 750, 761, 765, 766, 769, 771, 773], "22": [233, 234, 249, 250, 768], "20": [233, 234, 239, 240, 249, 250, 715, 716, 775], "default_v": [233, 234], "catch_except": [233, 234], "rev": [233, 234], "with_cal": [233, 234], "catch": [233, 234, 760], "callabl": [233, 234, 760, 773], "might": [233, 234, 748, 749, 750, 754, 755, 758, 760, 761, 766, 769, 771, 773, 775, 776, 1179], "exist": [233, 234, 245, 246, 278, 279, 283, 284, 748, 750, 752, 757, 758, 759, 760, 761, 763, 765, 766, 771, 773, 790, 1179], "els": [233, 234, 249, 250, 749, 750, 754, 762, 763, 765, 769, 771, 773, 775, 777, 778, 790], "einops_rearrang": [233, 234], "pattern": [233, 234, 280, 757, 769], "axes_length": [233, 234], "re": [233, 234, 277, 278, 279, 747, 748, 749, 750, 751, 752, 753, 754, 756, 757, 758, 761, 762, 763, 765, 766, 767, 768, 769, 770, 771, 775, 778, 790, 1180], "arrang": [233, 234], "rearrang": [233, 234], "addit": [233, 234, 247, 248, 713, 714, 748, 749, 750, 754, 757, 758, 760, 761, 768, 769, 775, 776, 778], "specif": [233, 234, 278, 713, 714, 749, 750, 754, 756, 759, 760, 762, 763, 765, 767, 768, 769, 770, 771, 773, 774, 775, 777, 778, 789, 790, 1179, 1180, 1186], "new": [233, 234, 235, 236, 245, 246, 247, 248, 278, 279, 280, 283, 284, 747, 748, 749, 750, 752, 753, 754, 755, 757, 758, 760, 761, 765, 766, 768, 769, 771, 772, 775, 778, 789, 1179, 1180], "einop": [233, 234, 279], "been": [233, 234, 249, 250, 749, 750, 755, 756, 757, 760, 763, 765, 768, 769, 770, 773, 775, 789, 790, 1179], "einops_reduc": [233, 234], "reduct": [233, 234, 259, 260, 283, 284, 760, 769, 775, 1180], "reduc": [233, 234, 241, 242, 251, 252, 257, 258, 259, 260, 283, 284, 773, 775], "One": [233, 234, 245, 246, 249, 250, 758, 760, 762, 769, 773, 775, 776], "avail": [233, 234, 278, 748, 749, 757, 761, 768, 770, 790], "min": [233, 234, 257, 258], "mean": [233, 234, 239, 240, 249, 250, 257, 258, 283, 284, 745, 746, 748, 749, 753, 754, 758, 760, 763, 765, 768, 769, 770, 771, 773, 775, 776, 777, 778, 789, 790, 1179, 1180], "prod": [233, 234, 257, 258, 758, 769, 773], "c": [233, 234, 235, 236, 239, 240, 257, 258, 277, 279, 280, 711, 712, 715, 716, 747, 748, 753, 758, 763, 768, 772, 773, 774, 776, 790, 1179, 1180, 1186], "einops_repeat": [233, 234], "repeat": [233, 234, 245, 246, 749, 751, 755, 757, 758, 760, 765, 767], "fourier_encod": [233, 234], "max_freq": [233, 234], "num_band": [233, 234], "linear": [233, 234, 239, 240, 281, 282, 757, 773, 776, 777, 778, 1180], "concat": [233, 234, 245, 246, 283, 284, 773, 1180], "flatten": [233, 234, 245, 246, 251, 252, 253, 254], "encod": [233, 234, 279, 776], "frequenc": [233, 234, 749], "band": [233, 234], "space": [233, 234, 279], "linearli": [233, 234], "oppos": [233, 234], "geometr": [233, 234], "concaten": [233, 234, 245, 246, 773, 776, 1180], "seper": [233, 234, 758], "batch": [233, 234, 283, 284, 763, 768, 776], "final": [233, 234, 749, 750, 755, 757, 758, 763, 767, 769, 771, 772, 776], "expand": [233, 234, 245, 246, 768], "channel": [233, 234, 748, 749, 750, 751, 752, 754, 756, 757, 758, 759, 760, 761, 762, 763, 765, 766, 767, 768, 769, 770, 771], "gather": [233, 234], "indic": [233, 234, 239, 240, 245, 246, 247, 248, 251, 252, 253, 254, 255, 256, 283, 284, 711, 712, 752, 755, 756, 761, 778, 1180], "gather_nd": [233, 234, 1180], "cuda": [233, 234, 249, 250, 773, 790, 1179], "cpu": [233, 234, 249, 250, 749, 770, 790], "etc": [233, 234, 249, 250, 261, 262, 280, 745, 746, 748, 749, 750, 754, 756, 758, 760, 762, 767, 768, 769, 773, 775, 776, 790, 1179], "given": [233, 234, 243, 244, 245, 246, 249, 250, 279, 280, 283, 284, 748, 749, 750, 752, 754, 757, 758, 759, 760, 762, 763, 765, 766, 767, 768, 769, 770, 771, 775, 777, 789], "get_num_dim": [233, 234, 1180], "as_arrai": [233, 234], "has_nan": [233, 234, 283, 284], "include_inf": [233, 234, 283, 284], "indices_wher": [233, 234, 755, 1180], "inplace_decr": [233, 234], "val": [233, 234, 283, 284, 771, 775], "decrement": [233, 234], "defin": [233, 234, 241, 242, 748, 750, 754, 756, 757, 760, 761, 769, 775, 777, 790, 1179], "follow": [233, 234, 235, 236, 278, 279, 283, 284, 748, 749, 750, 752, 754, 756, 757, 758, 759, 760, 761, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 790, 1180], "inplace_incr": [233, 234], "increment": [233, 234, 749], "inplace_upd": [233, 234, 771], "ensure_in_backend": [233, 234, 771], "updat": [233, 234, 235, 236, 283, 284, 748, 749, 750, 752, 753, 756, 758, 759, 761, 766, 767, 768, 769, 773, 775, 776, 778, 790], "ensur": [233, 234, 748, 749, 750, 754, 755, 756, 758, 759, 760, 761, 762, 766, 767, 769, 771], "inplac": [233, 234, 235, 236, 283, 284, 753, 756, 758, 766, 767, 775, 777], "In": [233, 234, 245, 246, 278, 280, 713, 714, 748, 749, 750, 751, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 765, 766, 768, 769, 770, 771, 775, 776, 777, 778, 789, 790, 1180], "do": [233, 234, 235, 236, 280, 283, 284, 748, 749, 750, 754, 756, 757, 758, 759, 761, 762, 763, 765, 766, 767, 768, 769, 770, 771, 773, 775, 776, 777, 778, 790, 1179], "is_arrai": [233, 234, 761], "rather": [233, 234, 235, 236, 279, 283, 284, 749, 754, 757, 760, 768, 769, 771, 778, 790], "trace": [233, 234, 241, 242, 283, 284, 773, 790, 1179], "is_ivy_arrai": [233, 234, 771, 775], "is_ivy_contain": [233, 234], "is_native_arrai": [233, 234, 775], "one_hot": [233, 234, 778, 1180], "depth": [233, 234, 749, 776, 777, 778, 789], "scatter": [233, 234], "hot": [233, 234], "tensor": [233, 234, 245, 246, 249, 250, 278, 283, 284, 715, 716, 754, 756, 763, 765, 767, 769, 770, 771, 773, 775, 776, 778, 790, 1179, 1180], "unless": [233, 234, 241, 242, 765, 770, 771, 790], "provid": [233, 234, 235, 236, 251, 252, 257, 258, 259, 260, 278, 283, 284, 748, 749, 756, 757, 758, 760, 763, 765, 767, 768, 769, 770, 771, 775, 777, 789, 790], "overrid": [233, 234], "scatter_flat": [233, 234], "occupi": [233, 234], "replac": [233, 234, 245, 246, 249, 250, 279, 283, 284, 749, 752, 758, 760, 761, 766, 768, 769, 770, 775, 778, 790], "scatter_nd": [233, 234, 775, 1180], "empti": [233, 234, 283, 284, 767, 769, 770], "40": [233, 234], "21": [233, 234, 249, 250, 715, 716], "stable_divid": [233, 234, 763], "min_denomin": [233, 234, 715, 716], "divis": [233, 234, 235, 236, 763], "minimum": [233, 234, 245, 246, 251, 252, 715, 716, 1180], "global": [233, 234, 247, 248, 283, 284, 715, 716, 763, 765, 769, 770, 773], "_min_denomin": [233, 234, 715, 716], "numpi": [233, 234, 278, 279, 749, 750, 754, 756, 759, 760, 761, 762, 765, 769, 770, 771, 773, 775, 778, 1179, 1180], "stable_pow": [233, 234], "min_bas": [233, 234], "_min_bas": [233, 234, 247, 248], "stabl": [233, 234, 255, 256, 748, 765, 769, 773, 790], "power": [233, 234, 760, 775, 776, 777], "supports_inplac": [233, 234], "to_list": [233, 234, 1180], "represent": [233, 234, 283, 284, 789], "to_numpi": [233, 234, 776, 1180], "to_scalar": [233, 234], "unstack": [233, 234, 283, 284, 768, 773, 776, 1180], "keepdim": [233, 234, 241, 242, 251, 252, 257, 258, 259, 260, 283, 284, 773], "unpack": [233, 234, 755, 760], "keep": [233, 234, 283, 284, 748, 749, 750, 754, 759, 760, 768, 769, 776, 778], "value_is_nan": [233, 234], "adam_step": [235, 236], "mw": [235, 236, 777], "vw": [235, 236, 777], "step": [235, 236, 280, 709, 710, 748, 749, 751, 752, 758, 765, 767, 768, 769, 770, 773, 776, 777, 778, 789, 1180], "beta1": [235, 236, 777], "beta2": [235, 236, 777], "999": [235, 236, 715, 716, 777], "epsilon": [235, 236, 241, 242, 243, 244, 247, 248, 763, 768, 771, 777], "1e": [235, 236, 243, 244, 247, 248, 762, 763, 768, 771, 777, 778, 1180], "07": [235, 236, 243, 244, 715, 716, 777], "cost": [235, 236], "weight": [235, 236, 239, 240, 763, 768, 773, 777, 778], "w": [235, 236, 239, 240, 283, 284, 715, 716, 773, 776, 777], "dc": [235, 236], "dw": [235, 236], "run": [235, 236, 748, 750, 751, 752, 755, 756, 758, 761, 762, 765, 773, 774, 775, 776, 777, 778, 789, 790], "averag": [235, 236], "moment": [235, 236, 750, 765, 790], "train": [235, 236, 280, 763, 768, 770, 776, 777, 778, 788, 789, 790, 1179, 1180], "forget": [235, 236, 769], "factor": [235, 236, 239, 240, 241, 242, 279], "dure": [235, 236, 257, 258, 283, 284, 713, 714, 748, 763, 766, 768, 769, 770, 771, 790], "adam": [235, 236, 776, 777, 778, 1180], "prevent": [235, 236, 749, 750, 755, 769, 771], "delta": [235, 236], "dcdw": [235, 236], "adam_step_delta": [235, 236], "182": [235, 236], "adam_upd": [235, 236, 777], "lr": [235, 236, 776, 777], "mw_tm1": [235, 236], "vw_tm1": [235, 236], "stop_gradi": [235, 236, 777, 1180], "learn": [235, 236, 278, 279, 748, 750, 753, 763, 772, 789, 1179, 1180], "rate": [235, 236], "rel": [235, 236, 241, 242, 245, 246, 255, 256, 709, 710, 749, 752, 762, 1180], "previou": [235, 236, 749, 756, 760, 761, 778, 790], "time": [235, 236, 253, 254, 278, 279, 280, 748, 749, 750, 754, 756, 758, 760, 763, 765, 766, 768, 769, 771, 773, 776, 778, 790], "stop": [235, 236, 709, 710, 773, 790], "after": [235, 236, 247, 248, 283, 284, 749, 750, 751, 756, 758, 759, 760, 761, 769, 772], "ws_new": [235, 236], "gradient_descent_upd": [235, 236, 1180], "handl": [235, 236, 283, 284, 753, 756, 760, 761, 762, 763, 766, 768, 769, 770, 771, 777], "behind": [235, 236, 749, 753, 760, 772, 774], "scene": [235, 236, 277, 278, 753, 772, 774, 1180], "pytorch": [235, 236, 279, 280, 750, 756, 761, 762, 763, 769, 770, 771, 773, 778, 790, 1179, 1180], "e": [235, 236, 241, 242, 249, 250, 255, 256, 257, 258, 279, 280, 747, 749, 751, 752, 753, 759, 760, 761, 768, 773, 776, 790, 1179], "higher": [235, 236, 772, 773, 778, 790], "order": [235, 236, 255, 256, 278, 283, 284, 748, 749, 750, 752, 754, 756, 757, 758, 759, 760, 761, 762, 765, 767, 768, 769, 770, 771, 776, 778, 790], "optim": [235, 236, 280, 771, 774, 776, 778, 789, 1180], "descent": [235, 236, 777], "new_weight": [235, 236, 776], "95": [235, 236, 249, 250], "98": [235, 236, 249, 250, 715, 716], "97": [235, 236, 715, 716], "96": [235, 236, 715, 716], "like": [235, 236, 279, 748, 749, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 766, 769, 770, 771, 772, 773, 775, 776, 777, 778, 789, 790, 1180], "jax": [235, 236, 279, 280, 749, 750, 754, 756, 760, 761, 762, 765, 769, 770, 771, 773, 775, 778, 790, 1180], "flag": [235, 236, 283, 284, 749, 761, 766, 769, 771], "is_var": [235, 236], "lamb_upd": [235, 236], "max_trust_ratio": [235, 236], "decay_lambda": [235, 236], "trust": [235, 236], "ratio": [235, 236], "decai": [235, 236], "lamb": [235, 236, 777], "784": [235, 236], "78": [235, 236], "02": [235, 236, 249, 250, 715, 716], "01": [235, 236, 247, 248, 748, 765, 778], "5e": [235, 236, 759], "04": [235, 236], "0e": [235, 236], "lars_upd": [235, 236], "lar": [235, 236, 777], "optimizer_upd": [235, 236], "effective_grad": [235, 236], "effect": [235, 236, 257, 258, 279, 750, 756, 757, 761, 767, 768, 771, 790], "3e": [235, 236], "preserve_typ": [235, 236], "preserv": [235, 236, 283, 284, 760, 778, 790], "inform": [235, 236, 748, 749, 750, 760, 762, 768], "variable_data": [235, 236], "intern": [235, 236, 283, 284, 757, 760, 767, 768, 770, 771], "gradient": [236, 754, 776, 777, 789, 790, 1180], "imag": [238, 239, 240, 748, 751, 752, 754, 773, 774, 776, 778, 789, 1180], "conv1d": [239, 240], "filter": [239, 240, 752, 760], "stride": [239, 240], "pad": [239, 240], "data_format": [239, 240], "nwc": [239, 240], "dilat": [239, 240], "batch_siz": [239, 240, 249, 250, 776], "d_in": [239, 240], "convolut": [239, 240], "fw": [239, 240, 760, 762], "d_out": [239, 240], "slide": [239, 240], "window": [239, 240, 749, 751, 752], "valid": [239, 240, 259, 260, 758, 760, 761, 762, 765, 769], "algorithm": [239, 240, 281, 282, 790], "per": [239, 240, 749, 760, 776], "ncw": [239, 240], "wio": [239, 240], "conv1d_transpos": [239, 240], "output_shap": [239, 240], "conv3d": [239, 240], "ndhwc": [239, 240], "conv3d_transpos": [239, 240], "depthwise_conv2d": [239, 240, 1180], "nhwc": [239, 240], "h": [239, 240, 753, 768], "d": [239, 240, 279, 280, 747, 748, 753, 768, 776, 1180, 1186], "fh": [239, 240], "nchw": [239, 240], "randint": [239, 240, 249, 250, 769, 1180], "255": [239, 240], "128": [239, 240], "random_norm": [239, 240, 249, 250, 760], "std": [239, 240, 249, 250, 257, 258, 758], "dropout": [239, 240, 776], "prob": [239, 240], "scale": [239, 240, 247, 248, 761], "bia": [239, 240, 773, 777], "lstm_updat": [239, 240, 773], "init_h": [239, 240, 773], "init_c": [239, 240, 773], "kernel": [239, 240, 773, 790], "recurrent_kernel": [239, 240, 773], "recurrent_bia": [239, 240, 773], "multi_head_attent": [239, 240, 771], "num_head": [239, 240], "context": [239, 240, 749, 758, 760, 769, 770], "mask": [239, 240], "to_q_fn": [239, 240], "to_kv_fn": [239, 240], "to_out_fn": [239, 240, 771], "to_q_v": [239, 240], "to_kv_v": [239, 240], "to_out_v": [239, 240], "scaled_dot_product_attent": [239, 240], "v": [239, 240, 255, 256, 748, 749, 751, 760, 773, 776, 777, 778, 1180], "layer": [240, 247, 248, 278, 754, 757, 773, 774, 777, 1180], "linear_algebra": [241, 242, 754], "choleski": [241, 242, 771], "symmetr": [241, 242, 768], "definit": [241, 242, 749, 763, 769, 775], "u": [241, 242, 279, 747, 748, 749, 754, 760, 762, 766, 768, 771, 777, 790, 1180], "l": [241, 242, 715, 716, 749, 753], "625": [241, 242], "cross": [241, 242, 243, 244, 1180], "vif": [241, 242], "det": [241, 242], "offset": [241, 242, 247, 248], "axis1": [241, 242, 245, 246], "axis2": [241, 242], "eigh": [241, 242], "namedtupl": [241, 242, 253, 254], "eigvalsh": [241, 242], "inv": [241, 242, 1180], "matmul": [241, 242, 754, 760, 765, 773, 1180], "matrix_norm": [241, 242], "ord": [241, 242], "fro": [241, 242], "matrix_rank": [241, 242], "rtol": [241, 242, 762], "rank": [241, 242, 245, 246, 259, 260], "singular": [241, 242], "stack": [241, 242, 245, 246, 283, 284, 773, 1180], "toler": [241, 242, 762], "small": [241, 242, 247, 248, 758, 762, 763, 773, 777, 790], "largest_singular_valu": [241, 242], "equival": [241, 242, 771, 776, 778], "dimension": [241, 242, 245, 246, 251, 252, 257, 258, 259, 260, 283, 284, 773], "ep": [241, 242], "machin": [241, 242, 279, 748, 763, 789, 1179], "associ": [241, 242, 749, 760, 762, 763, 766, 769, 790], "full": [241, 242, 279, 280, 749, 756, 757, 760, 769, 773, 790], "defici": [241, 242], "matrix_transpos": [241, 242, 775], "outer": [241, 242], "pinv": [241, 242, 1180], "qr": [241, 242], "mode": [241, 242, 283, 284, 748, 749, 751, 758, 768, 790], "solv": [241, 242, 774, 789], "svd": [241, 242, 1180], "full_matric": [241, 242], "svdval": [241, 242], "tensordot": [241, 242, 769], "vecdot": [241, 242], "vector_norm": [241, 242], "vector_to_skew_symmetric_matrix": [241, 242, 1180], "binary_cross_entropi": [243, 244], "pred": [243, 244, 763, 768, 771], "label": [243, 244, 749, 750, 772, 773, 774, 778], "predict": [243, 244], "amount": [243, 244, 770], "smooth": [243, 244], "calcul": [243, 244, 257, 258, 279, 283, 284, 757, 773], "binari": [243, 244], "entropi": [243, 244], "between": [243, 244, 245, 246, 278, 283, 284, 756, 758, 760, 762, 763, 765, 767, 768, 772, 774, 775, 776, 778, 789, 1180], "distribut": [243, 244, 249, 250, 750, 760, 770, 790], "357": [243, 244], "223": [243, 244], "cross_entropi": [243, 244, 763, 768, 771], "3862944": [243, 244], "sparse_cross_entropi": [243, 244], "logit": [243, 244], "spars": [243, 244], "loss": [244, 754, 763, 769, 776, 777, 778, 1180], "clip": [245, 246, 715, 716, 763, 768, 771, 776, 778, 1180], "x_min": [245, 246, 778], "x_max": [245, 246, 778], "those": [245, 246, 278, 283, 284, 748, 749, 750, 760, 761, 766, 768], "join": [245, 246, 283, 284, 1180], "befor": [245, 246, 283, 284, 748, 749, 750, 755, 756, 757, 759, 760, 761, 766, 767, 769, 770, 771, 773, 776, 790], "count": [245, 246, 253, 254, 259, 260, 758, 776], "top": [245, 246, 748, 749, 760, 761, 776, 777, 1180], "constant_pad": [245, 246], "pad_width": [245, 246], "split": [245, 246, 283, 284, 747, 749, 772, 773, 790, 1180], "expand_dim": [245, 246, 773, 776, 1180], "ad": [245, 246, 279, 745, 746, 748, 749, 750, 754, 755, 756, 757, 758, 760, 761, 762, 763, 766, 767, 768, 769, 771, 773, 777, 790], "ha": [245, 246, 253, 254, 257, 258, 278, 279, 280, 283, 284, 711, 712, 749, 750, 754, 755, 757, 758, 760, 761, 762, 763, 765, 766, 769, 770, 771, 773, 775, 777, 778, 789, 790], "flip": [245, 246, 761, 775, 776, 778, 1180], "permute_dim": [245, 246], "reshap": [245, 246, 283, 284, 760, 771, 773, 775, 778, 1180], "nativeshap": [245, 246, 249, 250], "sequenc": [245, 246, 257, 258, 259, 260, 281, 282, 283, 284, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 749, 758, 760, 769, 789], "length": [245, 246, 283, 284, 755, 760, 762, 776], "remain": [245, 246, 749, 754, 758, 790], "never": [245, 246, 749, 760, 761], "valueerror": [245, 246], "would": [245, 246, 279, 713, 714, 748, 749, 750, 752, 753, 755, 756, 757, 758, 759, 760, 761, 765, 766, 767, 768, 769, 771, 772, 773, 775, 777, 778, 790, 1180], "necessari": [245, 246, 748, 749, 758, 760, 765, 766, 768, 771], "reus": [245, 246, 760], "memori": [245, 246, 770, 771, 773, 788, 790, 1180], "buffer": [245, 246, 790], "possibl": [245, 246, 279, 747, 748, 749, 750, 757, 758, 760, 768, 769, 771, 773, 776, 789, 790], "roll": [245, 246, 756, 768], "shift": [245, 246, 709, 710, 749, 756, 758], "toward": [245, 246, 748, 751, 773, 1180, 1186], "larger": [245, 246, 257, 258, 760], "smaller": [245, 246, 749, 773], "restor": [245, 246], "num_or_size_split": [245, 246, 283, 284, 773], "with_remaind": [245, 246, 283, 284], "sub": [245, 246, 283, 284, 707, 708, 715, 716, 749, 750, 753, 760, 761, 768, 775, 776, 777, 1180], "mani": [245, 246, 278, 279, 280, 283, 284, 748, 749, 750, 755, 756, 757, 758, 760, 761, 762, 763, 765, 766, 767, 768, 769, 770, 771, 773, 775, 776, 790], "doe": [245, 246, 279, 283, 284, 749, 750, 752, 753, 754, 756, 757, 758, 760, 761, 762, 763, 765, 769, 771, 773, 775, 776, 790, 1179], "evenli": [245, 246, 283, 284], "entri": [245, 246, 283, 284, 769], "squeez": [245, 246, 1180], "swapax": [245, 246], "axis0": [245, 246], "swap_ax": [245, 246], "tile": [245, 246, 1180], "rep": [245, 246], "zero_pad": [245, 246, 1180], "manipul": [246, 278, 754, 773, 778, 789], "layer_norm": [247, 248], "normalized_idx": [247, 248], "new_std": [247, 248], "normal": [247, 248, 249, 250, 750, 776], "constant": [247, 248, 754, 763, 777, 778, 790], "learnabl": [247, 248, 778], "gamma": [247, 248], "post": [247, 248, 748, 778, 1180, 1186], "multipl": [247, 248, 257, 258, 259, 260, 280, 283, 284, 715, 716, 749, 758, 763, 765, 768, 771, 773, 790], "beta": [247, 248], "deviat": [247, 248, 249, 250, 280, 760], "0976": [247, 248], "3452": [247, 248], "2740": [247, 248], "1047": [247, 248], "5886": [247, 248], "2732": [247, 248], "7696": [247, 248], "7024": [247, 248], "2518": [247, 248], "576": [247, 248], "292": [247, 248], "581": [247, 248], "891": [247, 248], "579": [247, 248], "931": [247, 248], "multinomi": [249, 250], "population_s": [249, 250], "num_sampl": [249, 250], "unnorm": [249, 250, 760], "probabl": [249, 250, 280, 760], "popul": [249, 250, 257, 258, 283, 284, 760, 769, 770, 773], "uniform": [249, 250, 777], "batch_shap": [249, 250, 773, 775], "draw": [249, 250, 750, 760, 762], "sampl": [249, 250, 257, 258, 760, 766], "independ": [249, 250, 758, 759, 766, 773, 778], "onc": [249, 250, 280, 748, 749, 750, 758, 760, 768, 769, 770, 773, 776, 790], "thei": [249, 250, 283, 284, 748, 749, 750, 753, 754, 758, 760, 761, 763, 765, 766, 768, 769, 770, 771, 775, 776, 777, 778, 790, 1180], "ve": [249, 250, 749, 772, 775, 1179, 1180], "drawn": [249, 250, 760], "parameter": [249, 250], "high": [249, 250, 280, 750, 776, 1179], "highest": [249, 250], "g": [249, 250, 280, 753, 760, 761, 768, 773, 790, 1179], "low": [249, 250, 773], "singl": [249, 250, 280, 283, 284, 749, 750, 754, 755, 756, 758, 760, 763, 766, 768, 771, 773, 776, 777, 778, 790], "half": [249, 250], "open": [249, 250, 278, 279, 280, 747, 748, 749, 752, 757, 769, 789, 1180], "interv": [249, 250, 259, 260, 749], "int8": [249, 250, 760, 769], "int16": [249, 250, 760, 769, 773], "46": [249, 250, 759], "44": [249, 250], "72": [249, 250], "235": [249, 250], "27": [249, 250], "float16": [249, 250, 760, 761, 769], "26": [249, 250], "49": [249, 250], "807": [249, 250], "random_uniform": [249, 250, 760, 770, 777, 1180], "boundari": [249, 250], "86": [249, 250], "89": [249, 250, 760], "06": [249, 250, 715, 716, 760, 776], "53": [249, 250, 715, 716], "shuffl": [249, 250, 283, 284, 1180], "object": [249, 250, 283, 284, 707, 708, 713, 714, 715, 716, 760, 761, 766, 768, 775, 778], "random": [250, 283, 284, 754, 770, 778, 789, 1180], "argmax": [251, 252, 1180], "left": [251, 252, 255, 256, 748, 749, 758, 769, 1180], "correctli": [251, 252, 748, 749, 750, 755, 756, 758, 760, 762, 768, 769, 771, 777, 790], "insert": [251, 252], "appropri": [251, 252, 261, 262, 745, 746, 749, 750, 760, 762, 766], "occurr": [251, 252], "argmin": [251, 252, 1180], "singleton": [251, 252, 257, 258, 259, 260, 773], "accordingli": [251, 252, 257, 258, 259, 260, 755, 761, 773], "across": [251, 252, 283, 284, 750, 756, 758, 760, 763, 768, 769], "nonzero": [251, 252], "yield": [251, 252, 755], "choos": [251, 252, 713, 714, 748, 749, 750, 774, 778], "condit": [251, 252, 758, 771, 789], "unique_al": [253, 254], "unique_count": [253, 254], "uniqu": [253, 254, 278, 760, 761, 762, 763, 768, 790], "field": [253, 254, 789], "name": [253, 254, 748, 749, 750, 752, 754, 755, 756, 757, 758, 760, 761, 762, 765, 769, 773, 776, 778], "uc": [253, 254], "unique_invers": [253, 254], "inverse_indic": [253, 254], "reconstruct": [253, 254], "unique_valu": [253, 254], "argsort": [255, 256], "descend": [255, 256], "ascend": [255, 256], "stabil": [255, 256], "maintain": [255, 256, 278, 749], "searchsort": [255, 256], "side": [255, 256, 748, 749], "sorter": [255, 256], "sort": [256, 283, 284, 754], "einsum": [257, 258], "equat": [257, 258], "let": [257, 258, 280, 751, 754, 757, 758, 760, 761, 762, 768, 769, 770, 773, 775, 776, 777, 778, 1180], "over": [257, 258, 259, 260, 261, 262, 278, 280, 711, 712, 745, 746, 748, 749, 757, 758, 760, 765, 771, 773, 775, 790], "arithmet": [257, 258], "x_i": [257, 258, 715, 716, 757], "propag": [257, 258], "By": [257, 258, 259, 260, 758, 761, 763, 771, 773, 777, 778], "entir": [257, 258, 259, 260, 279, 280, 283, 284, 749, 750, 758, 759, 760, 767, 768, 771, 773, 776, 777, 778, 790], "wa": [257, 258, 259, 260, 279, 281, 282, 283, 284, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 749, 758, 761, 773, 775], "correct": [257, 258, 749, 750, 753, 755, 756, 763, 768, 769, 770, 1180], "var": [257, 258, 745, 746, 758, 773], "varianc": [257, 258], "degre": [257, 258], "freedom": [257, 258, 765], "adjust": [257, 258], "total": [257, 258, 280, 283, 284, 747, 749, 758, 760, 770, 776, 777, 790], "choic": [257, 258, 280, 748, 771, 776], "constitut": [257, 258, 763, 773], "unbias": [257, 258], "commonli": [257, 258, 763], "refer": [257, 258, 259, 260, 748, 749, 750, 756, 760, 761, 762, 763, 769, 790, 1179], "bessel": [257, 258], "6666665": [257, 258, 776], "08": [257, 258, 748, 760], "667": [257, 258], "statist": [258, 745, 746, 754, 760, 769], "logic": [259, 260, 760, 761, 766, 767, 769, 770, 775, 1180], "AND": [259, 260], "backward": [259, 260, 790], "invalid": [259, 260, 755, 761, 769], "OR": [259, 260, 748, 749, 752], "util": [260, 751, 754, 770], "add_ivy_array_instance_method": 261, "cl": [261, 262, 745, 746], "modul": [261, 262, 280, 283, 284, 745, 746, 748, 752, 755, 760, 761, 763, 765, 767, 771, 773, 774, 776, 778, 789, 790, 1180], "to_ignor": [261, 262, 745, 746], "loop": [261, 262, 745, 746, 755, 765, 790], "_wrap_funct": [261, 262, 745, 746, 763, 766], "we": [261, 262, 277, 278, 279, 280, 745, 746, 747, 748, 749, 750, 752, 753, 754, 755, 756, 757, 758, 759, 761, 762, 763, 765, 766, 767, 768, 769, 771, 773, 774, 775, 776, 777, 778, 789, 790, 1179, 1180, 1186], "want": [261, 262, 279, 745, 746, 747, 748, 749, 750, 759, 760, 766, 771, 776, 777, 778, 790], "don": [261, 262, 280, 745, 746, 748, 749, 750, 760, 769, 777, 790], "As": [261, 262, 278, 745, 746, 748, 749, 756, 760, 761, 762, 763, 766, 767, 768, 769, 770, 771, 773, 775, 776, 777, 790], "shown": [261, 262, 283, 284, 745, 746, 749, 750, 754, 755, 756, 758, 760, 761, 773, 775, 790], "our": [261, 262, 278, 279, 745, 746, 747, 748, 749, 750, 754, 755, 758, 759, 760, 761, 762, 768, 769, 772, 775, 776, 777, 778, 790, 1180], "toi": [261, 262, 745, 746], "arrayexampl": [261, 262], "import": [261, 262, 279, 745, 746, 749, 750, 751, 754, 755, 757, 758, 759, 761, 762, 765, 767, 768, 769, 770, 771, 773, 775, 776, 778, 790, 1180, 1186], "pass": [261, 262, 283, 284, 745, 746, 749, 750, 755, 756, 757, 758, 759, 760, 761, 762, 763, 765, 766, 767, 768, 769, 771, 790], "hasattr": [261, 262, 745, 746], "ml": [277, 279, 280, 747, 772, 773, 774, 776, 777, 778, 789, 1180, 1186], "explos": [277, 279, 1180], "huge": [277, 279, 776, 1180], "tool": [277, 280, 749, 758, 774, 778, 789, 790, 1180], "explod": [277, 278, 1180], "onto": [277, 278, 1180], "why": [277, 279, 749, 771, 775, 1180], "unifi": [277, 279, 283, 284, 767, 773, 790, 1180], "try": [277, 279, 280, 283, 284, 748, 749, 750, 752, 755, 761, 767, 768, 769, 773, 775, 790, 1180], "them": [277, 278, 279, 280, 749, 750, 760, 761, 762, 765, 766, 767, 768, 771, 773, 775, 776, 777, 790, 1179, 1180], "collabor": [277, 278, 279, 1180], "consortium": [277, 279, 1180, 1186], "python": [277, 278, 279, 748, 749, 752, 755, 760, 761, 773, 775, 776, 790, 1179, 1180, 1186], "project": [278, 279, 280, 748, 749, 752, 754, 760, 765, 777, 789, 790], "grown": 278, "consider": [278, 756, 758], "recent": [278, 279, 748, 749, 760], "year": [278, 280, 790, 1180], "especi": [278, 748], "deep": [278, 283, 284, 747, 749, 750, 761, 762, 768, 772, 775, 776, 1180], "seen": [278, 279, 758, 760, 773, 775, 776], "rapidli": 278, "increas": [278, 754], "github": [278, 749, 750, 751, 757, 758, 760, 769], "repo": [278, 279, 280, 748, 749, 751, 759, 769, 773, 775, 776, 777, 778, 789, 1180, 1186], "term": [278, 749, 768, 773, 1179], "These": [278, 279, 280, 749, 750, 751, 755, 756, 757, 758, 760, 761, 762, 763, 768, 769, 771, 773, 774, 776, 777, 778, 790, 1179, 1180, 1186], "written": [278, 748, 754, 756, 757, 760, 761, 767, 771, 773, 775, 778, 790], "while": [278, 279, 283, 284, 748, 749, 750, 755, 758, 759, 760, 765, 771, 775, 777, 778, 790], "wonder": [278, 280, 775], "thing": [278, 279, 280, 748, 749, 750, 755, 760, 765, 775, 776], "research": [278, 789], "develop": [278, 279, 280, 747, 748, 749, 750, 789, 790, 1179, 1180], "consid": [278, 279, 754, 763, 774, 775, 776], "speed": [278, 760], "evolv": 278, "sharabl": 278, "significantli": 278, "hinder": [278, 756], "becom": [278, 280, 749, 758, 761, 768, 790], "outdat": 278, "matter": [278, 758], "month": 278, "rigor": [278, 760], "newest": 278, "version": [278, 279, 280, 748, 749, 757, 761, 762, 769, 773, 1180], "softwar": [278, 279, 748, 749], "pipelin": [278, 767, 778, 1179], "rapid": [278, 279, 748], "prototyp": 278, "vital": [278, 778], "signific": [278, 279, 790], "bottleneck": 278, "futur": [278, 280, 748, 749, 754, 769, 775, 790], "quickli": [278, 280, 748, 749, 776, 777], "obsolet": [278, 280], "user": [278, 279, 748, 749, 751, 752, 753, 760, 761, 765, 766, 768, 771, 772, 773, 790], "constantli": 278, "invent": 278, "wheel": 278, "simultan": [278, 280], "modern": [278, 279], "simpl": [278, 748, 749, 750, 754, 757, 758, 760, 761, 763, 767, 768, 769, 770, 771, 775, 777, 778, 790, 1179], "scalabl": [278, 773], "exactli": [278, 280, 758, 768, 770, 1180, 1186], "common": [278, 283, 284, 750, 754, 755, 758, 763, 766, 768, 769, 770, 790], "ground": [278, 760, 761], "li": 278, "find": [278, 283, 284, 748, 749, 759, 760, 773, 776, 1179, 1180], "essenti": [278, 279, 750, 758, 763, 770], "design": [278, 279, 753, 762, 771, 773, 775, 790], "univers": 278, "abstract": [278, 768, 769, 777, 790], "languag": [278, 280, 773, 1179], "clear": [278, 279, 280, 749, 750, 758, 761, 769, 770, 773, 775], "front": [278, 772, 773, 776, 1180, 1186], "runner": 278, "look": [278, 748, 749, 751, 752, 754, 756, 758, 760, 761, 762, 763, 765, 768, 769, 770, 773, 775, 777, 778, 1180], "littl": [278, 775], "deeper": [278, 749, 753, 772], "core": [278, 748, 750, 770, 778, 1180], "principl": 278, "expos": [278, 773, 777], "almost": [278, 749, 762, 768, 774, 776], "ident": [278, 280, 283, 284, 754, 761, 762, 763, 766, 768, 775, 776, 790, 1179, 1180], "syntax": [278, 279, 755, 769], "There": [278, 748, 749, 750, 755, 758, 759, 761, 762, 763, 767, 768, 769, 773, 776, 790], "wai": [278, 279, 748, 750, 759, 760, 765, 771, 775, 776, 777, 778, 790], "unsurprisingli": [278, 758], "fundament": [278, 773], "consist": [278, 283, 284, 767, 769, 771], "veri": [278, 279, 748, 749, 750, 754, 756, 758, 760, 761, 763, 768, 770, 771, 774, 776, 777, 778, 790, 1180], "similar": [278, 750, 754, 760, 761, 766, 768, 769, 770, 776, 790], "convent": [278, 754, 756, 765, 789], "introduc": [278, 761, 768, 769, 776], "2006": 278, "present": [278, 283, 284, 749, 750, 756, 759, 768, 769, 770, 771, 773], "itself": [278, 748, 749, 761, 768, 771, 777, 789, 790], "cut": 278, "cloth": 278, "adher": [278, 279, 757, 759, 773, 778], "semant": [278, 773, 778], "up": [278, 279, 280, 747, 749, 750, 751, 752, 754, 756, 757, 758, 759, 760, 761, 762, 763, 765, 766, 767, 768, 769, 770, 771, 773, 774, 775, 776, 777, 778, 789, 790], "hopefulli": [278, 279, 280, 748, 749, 750, 751, 752, 753, 754, 756, 757, 759, 760, 761, 762, 763, 765, 766, 767, 768, 769, 770, 771, 773, 775, 776, 777, 778, 789], "paint": [278, 773], "pictur": [278, 750, 773], "how": [278, 280, 747, 748, 749, 750, 751, 752, 753, 754, 756, 757, 758, 759, 761, 762, 763, 765, 766, 767, 768, 769, 770, 771, 772, 774, 775, 776, 777, 778, 789, 790, 1180, 1186], "pleas": [278, 279, 280, 748, 749, 750, 751, 752, 754, 756, 757, 758, 759, 760, 761, 762, 763, 765, 766, 767, 768, 769, 770, 771, 773, 775, 776, 777, 778, 789, 1180], "discuss": [278, 279, 280, 747, 748, 749, 750, 751, 752, 754, 756, 757, 758, 759, 760, 761, 762, 763, 765, 766, 767, 768, 769, 770, 771, 773, 774, 775, 776, 777, 778, 789, 790, 1180], "faq": [278, 279, 280, 773, 775, 776, 777, 778, 789], "reach": [278, 279, 280, 748, 749, 750, 751, 752, 754, 756, 757, 758, 759, 760, 761, 762, 763, 765, 766, 767, 768, 769, 770, 771, 773, 775, 776, 777, 778, 789], "discord": [278, 279, 280, 748, 749, 750, 751, 752, 754, 756, 757, 758, 759, 760, 761, 762, 763, 765, 766, 767, 768, 769, 770, 771, 773, 775, 776, 777, 778, 789, 1180], "you": [278, 279, 280, 747, 748, 749, 750, 751, 752, 753, 754, 756, 757, 758, 759, 760, 761, 762, 763, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 789, 790, 1179, 1180, 1186], "question": [278, 279, 280, 748, 749, 751, 758, 760, 773, 775, 776, 777, 778, 789, 790, 1180], "central": 279, "goal": [279, 750], "being": [279, 280, 283, 284, 748, 749, 755, 756, 758, 760, 761, 765, 766, 767, 768, 769, 770, 771, 773, 776, 789, 790, 1180], "forgiven": 279, "eyebrow": 279, "somehow": 279, "tensorflow": [279, 280, 749, 750, 754, 756, 759, 760, 761, 762, 769, 770, 771, 773, 778, 790, 1179, 1180], "mxnet": [279, 769, 770, 771, 1180], "strong": [279, 790], "industri": 279, "back": [279, 749, 766, 767, 769, 772, 790, 1180, 1186], "momentum": 279, "won": [279, 280, 749, 778], "just": [279, 280, 748, 749, 757, 758, 759, 760, 761, 762, 763, 765, 766, 769, 771, 775, 776, 790], "make": [279, 280, 748, 749, 750, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 766, 767, 768, 769, 770, 771, 773, 775, 776, 778], "problem": [279, 749, 767, 775], "even": [279, 280, 748, 749, 756, 757, 761, 763, 769, 770, 775, 776, 777, 778, 790], "wors": 279, "funni": 279, "comic": 279, "strip": 279, "easi": [279, 748, 749, 762, 763, 768], "feasibl": [279, 750], "howev": [279, 748, 749, 750, 756, 757, 758, 760, 761, 763, 765, 767, 768, 769, 770, 771, 775, 776, 777, 778, 790], "unlik": [279, 758, 768, 771], "charger": 279, "charact": [279, 755], "instant": [279, 1180], "messag": [279, 749, 755, 758, 773, 775], "much": [279, 748, 749, 750, 754, 761, 767, 768, 769, 771, 773, 775, 776], "mandat": [279, 754, 760, 771], "adopt": [279, 749, 767], "continu": [279, 280, 755, 759, 760, 790], "own": [279, 280, 748, 754, 757, 760, 761, 773, 790, 1179], "call": [279, 711, 712, 749, 752, 754, 756, 757, 758, 760, 761, 763, 765, 766, 767, 768, 769, 770, 771, 773, 775, 776, 777, 778, 790], "your": [279, 280, 747, 748, 750, 751, 752, 754, 757, 759, 761, 776, 777, 790, 1180], "100": [279, 280, 760, 776, 777, 778, 790, 1180], "despit": [279, 768, 769, 770], "distinct": [279, 748, 757, 768, 771, 772, 1180], "still": [279, 283, 284, 749, 750, 757, 760, 761, 769, 771, 777, 790, 1180], "believ": [279, 749], "share": [279, 283, 284, 758, 760, 762, 763, 765, 768, 773], "bring": [279, 760, 773, 774, 1179], "benefit": [279, 280, 748, 749, 767, 768, 771, 775, 776, 790], "unrel": [279, 749], "what": [279, 280, 749, 751, 753, 756, 757, 758, 760, 766, 768, 772, 773, 775, 776, 777, 778, 789, 790, 1180], "again": [279, 280, 749, 754, 758, 760, 765, 768, 771, 776, 778, 790], "contrari": 279, "bumpi": 279, "road": 279, "allud": [279, 776], "most": [279, 283, 284, 748, 754, 755, 756, 760, 761, 762, 763, 767, 768, 769, 770, 771, 773, 775, 776, 777, 790], "technologi": 279, "success": 279, "reason": [279, 749, 754, 758, 761, 763, 767, 768, 769, 771, 773, 775], "build": [279, 747, 748, 751, 763, 772, 774, 777, 778, 790, 1179, 1180], "custom": [279, 760, 777], "thank": [279, 776], "interoper": 279, "compon": [279, 773], "bio": [279, 748], "hardwar": [279, 748], "initi": [279, 283, 284, 749, 760, 761, 765, 769, 770, 773], "pcie": 279, "interfac": [279, 775, 778, 790, 1179], "motherboard": 279, "raid": 279, "storag": [279, 776], "virtual": [279, 749, 751, 752], "bluetooth": 279, "wireless": 279, "exchang": 279, "btx": 279, "sata": 279, "connect": [279, 748, 777, 778], "host": [279, 790], "bu": 279, "adapt": 279, "enabl": [279, 283, 284, 748, 749, 760, 761, 763, 766, 767, 768, 771, 772, 774, 776, 778, 790, 1179], "anyon": [279, 747, 749, 790], "websit": 279, "tcp": 279, "ip": 279, "node": [279, 283, 284, 768], "commun": [279, 747, 749, 750, 790, 1180, 1186], "network": [279, 763, 768, 773, 777, 789, 1180], "smtp": 279, "send": 279, "gmail": 279, "outlook": 279, "pop": 279, "email": 279, "ieee": 279, "754": 279, "allow": [279, 749, 750, 751, 755, 759, 760, 761, 762, 766, 773, 775, 790, 1179], "live": [279, 280, 769], "did": [279, 750, 778], "aris": [279, 790], "until": [279, 749, 755, 773, 790, 1180], "substanti": [279, 749, 760, 767, 769], "innov": 279, "growth": 279, "usag": [279, 773, 790], "relev": [279, 748, 749, 750, 758, 768, 769, 776], "necess": 279, "parti": [279, 790], "could": [279, 280, 748, 749, 750, 758, 760, 766, 769, 771, 773, 775, 776, 777], "easili": [279, 749, 761, 776, 777, 778, 790, 1180], "engag": [279, 747, 748, 749, 750, 751, 752, 754, 756, 757, 758, 759, 760, 761, 762, 763, 765, 766, 767, 768, 769, 770, 771], "regard": [279, 768], "2015": 279, "sinc": [279, 748, 749, 760, 771, 790], "alongsid": 279, "frame": [279, 789], "matur": [279, 790], "state": [279, 756, 757, 760, 769, 772, 773, 774, 776, 789, 1180], "preced": [279, 777], "mention": [279, 748, 749, 756, 758, 763, 771], "aros": 279, "70": 279, "80": 279, "90": [279, 715, 716], "effort": [279, 747, 760, 790], "stage": [279, 747, 749, 752, 753, 755, 1180], "complet": [279, 283, 284, 749, 750, 758, 767, 768, 775, 776], "natur": [279, 758, 767, 789], "certainli": 279, "mission": [279, 1180], "At": [279, 750, 754, 759], "process": [279, 280, 747, 748, 749, 752, 760, 762, 763, 768, 773, 778], "ourselv": 279, "lead": [279, 280, 283, 284, 758, 790], "quansight": 279, "compani": 279, "made": [279, 749, 750, 751, 771, 773, 775], "organ": [279, 754, 763, 767, 768, 1179], "panda": 279, "scipi": 279, "conda": [279, 748, 752], "dask": 279, "apach": 279, "onnx": 279, "scikit": 279, "jupyt": 279, "aw": 279, "cupi": 279, "net": [279, 280, 773, 778], "sympi": 279, "rai": 279, "modin": 279, "spyder": 279, "member": [279, 749, 750], "googl": [279, 1180], "octoml": 279, "further": [279, 280, 749, 752, 758, 760, 761, 767, 772, 776, 777, 1180], "sponsor": 279, "lg": 279, "electron": 279, "microsoft": 279, "shaw": 279, "intel": 279, "togeth": [279, 283, 284, 754, 755, 767, 768, 777, 778, 790], "major": [279, 760, 761, 769, 770, 790], "anoth": [279, 748, 749, 750, 760, 761, 762, 763, 766, 768, 769, 775, 778, 1179], "promis": 279, "pursuit": 279, "unif": [279, 747, 775, 1180, 1186], "clearli": [279, 749, 750, 758, 760], "lot": [279, 280, 766, 769, 790], "thought": [279, 748, 749, 756], "care": [279, 749, 778], "attent": [279, 749, 767], "gone": [279, 772], "simplifi": [279, 773, 774, 777], "excit": [279, 747, 753, 1180], "complianc": 279, "hope": [279, 790], "suit": [279, 748, 753, 759, 760, 776, 789, 1179], "some": [279, 280, 283, 284, 748, 749, 750, 754, 755, 756, 757, 758, 760, 761, 762, 763, 766, 767, 768, 769, 770, 771, 775, 776, 777, 789, 790, 1179, 1180], "motiv": [279, 775], "great": [279, 280, 749, 760, 773, 775], "convinc": 279, "celebr": 279, "encourag": [279, 789, 790, 1180, 1186], "foundat": 279, "ask": [280, 758, 773, 775, 790, 1180], "perfectli": 280, "happi": [280, 748, 790], "current": [280, 283, 284, 748, 749, 750, 752, 761, 762, 763, 765, 766, 768, 770, 773, 778, 789, 790, 1180], "abund": 280, "better": [280, 751, 753, 754, 761, 762, 772, 775, 776, 777], "ll": [280, 747, 749, 758, 771, 776], "give": [280, 748, 749, 751, 753, 756, 757, 758, 765], "streamlin": 280, "workflow": [280, 749, 750, 765, 776, 788, 1179, 1180], "save": [280, 283, 284, 751, 755, 760, 790], "week": [280, 749, 1180], "sai": [280, 748, 766, 775], "deepmind": 280, "releas": [280, 748, 749, 750, 754, 769, 790, 1180], "awesom": 280, "paper": 280, "love": 280, "perceiverio": 280, "happen": [280, 748, 749, 760, 776], "slew": 280, "rush": 280, "f": [280, 747, 749, 752, 753, 755, 760, 768, 773, 776], "inevit": 280, "often": [280, 755, 760, 763, 790], "erron": 280, "poor": 280, "converg": 280, "issu": [280, 747, 750, 758, 760, 765, 769, 773, 777, 790], "publish": [280, 790], "manag": [280, 747, 771, 790], "get": [280, 283, 284, 747, 748, 750, 753, 760, 762, 763, 766, 769, 770, 771, 773, 774, 775, 776, 777, 1179, 1180, 1186], "work": [280, 748, 749, 750, 753, 758, 759, 760, 761, 769, 770, 772, 773, 775, 777, 778, 1180, 1186], "repositori": [280, 748, 749, 751, 752, 755, 759], "pull": [280, 747, 748, 750, 751, 752, 754, 758, 790], "request": [280, 747, 750, 754, 758], "confus": [280, 771, 1179], "expect": [280, 749, 760, 790, 1180], "codebas": [280, 747, 753, 754, 760, 769, 771, 772, 1180], "hour": 280, "spent": 280, "spin": 280, "off": [280, 748, 772], "address": [280, 749, 750, 767, 773], "sake": 280, "line": [280, 748, 755, 758, 759, 760, 766, 767, 774, 775, 776, 777, 788, 1180, 1186], "directli": [280, 749, 754, 757, 760, 761, 763, 766, 767, 768, 769, 770, 771, 773, 775, 777, 778, 789, 790], "guarante": [280, 767, 790], "turn": [280, 748, 758, 760, 768], "few": [280, 749, 750, 760, 763, 768, 769, 770, 771, 774, 775, 776, 777, 788, 1180, 1186], "automat": [280, 748, 749, 750, 753, 755, 763, 768, 769, 772, 774, 777, 778, 1179, 1180], "everyon": [280, 747, 749, 790], "regardless": [280, 283, 284, 747, 775, 778], "wouldn": [280, 769], "nice": [280, 760], "know": [280, 749, 760, 769], "among": [280, 283, 284, 760], "frantic": 280, "port": 280, "lucid": 280, "honk": 280, "improv": [280, 749, 763, 773, 1179], "understand": [280, 748, 749, 750, 751, 752, 753, 756, 757, 758, 759, 761, 762, 772], "hasn": 280, "now": [280, 748, 752, 754, 755, 756, 760, 765, 766, 768, 769, 775, 776, 778, 789, 790], "spend": 280, "torchvis": 280, "sonnet": 280, "about": [280, 748, 749, 754, 756, 759, 760, 769, 772, 773, 775, 776, 777, 778, 790], "next": [280, 748, 749, 750, 751, 752, 757, 758, 765, 766, 774, 775, 776, 1180], "everyth": [280, 749, 750, 758, 760, 762, 774, 790], "said": 280, "level": [280, 747, 749, 750, 763, 772, 773, 776, 777, 778, 790, 1179], "trainer": [280, 788, 790, 1180], "statu": [280, 750], "quo": 280, "kera": 280, "dopamin": 280, "ignit": 280, "catalyst": 280, "lightn": 280, "fastai": 280, "haiku": [280, 778], "flax": [280, 778, 790], "trax": [280, 778], "objax": [280, 778], "idea": [280, 751, 754, 761, 789], "fulli": [280, 756, 767, 771, 773, 774, 775, 776, 777, 778, 790], "offer": [280, 777], "containerwithactiv": 281, "dict_in": [281, 282, 283, 284, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716], "queue": [281, 282, 283, 284, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 776], "queue_load_s": [281, 282, 283, 284, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716], "container_combine_method": [281, 282, 283, 284, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716], "list_join": [281, 282, 283, 284, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716], "queue_timeout": [281, 282, 283, 284, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716], "print_limit": [281, 282, 283, 284, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716], "key_length_limit": [281, 282, 283, 284, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716], "print_ind": [281, 282, 283, 284, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716], "print_line_spac": [281, 282, 283, 284, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716], "ivyh": [281, 282, 283, 284, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716], "default_key_color": [281, 282, 283, 284, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716], "green": [281, 282, 283, 284, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 748, 749], "keyword_color_dict": [281, 282, 283, 284, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716], "rebuild_child_contain": [281, 282, 283, 284, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716], "types_to_iteratively_nest": [281, 282, 283, 284, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716], "alphabetical_kei": [281, 282, 283, 284, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716], "containerbas": [281, 282, 283, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 768], "key_chain": [281, 282, 283, 284, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716], "to_appli": [281, 282, 283, 284, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716], "prune_unappli": [281, 282, 283, 284, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716], "map_sequ": [281, 282, 283, 284, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716], "exact": [281, 282, 283, 284, 749, 758, 773], "formul": [281, 282], "chain": [281, 282, 283, 284, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 767, 768, 777, 778, 790], "skip": [281, 282, 283, 284, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 752, 760, 766], "prune": [281, 282, 283, 284, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716], "map": [281, 282, 283, 284, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 754, 756, 760, 763, 768, 776, 789, 790, 1179], "unit": [281, 282, 759, 760, 761, 769, 790], "slope": [281, 282], "leaki": [281, 282], "rectifi": [281, 282], "static": [281, 282, 283, 284, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 745, 746, 750, 757, 758, 763, 766, 790], "static_gelu": [281, 282], "static_leaky_relu": [281, 282], "static_relu": [281, 282], "static_sigmoid": [281, 282], "static_softmax": [281, 282], "static_softplu": [281, 282], "__getitem__": [283, 284, 768], "queri": [283, 284, 768, 769, 775], "slice": [283, 284], "dictionari": [283, 284, 761, 776, 790], "around": [283, 284, 749, 756, 761, 763, 767, 775, 790, 1179], "multiprocess": [283, 284, 776, 790], "asynchron": [283, 284], "wait": [283, 284, 749, 750], "combin": [283, 284, 749, 758, 760, 763, 767, 768, 778], "arriv": [283, 284], "timeout": [283, 284], "limit": [283, 284, 749, 755, 758, 760, 761, 776, 790], "whitespac": [283, 284], "indent": [283, 284, 776], "extra": [283, 284, 758, 760, 761, 762, 766, 767, 769, 773], "newlin": [283, 284, 757], "color": [283, 284], "termin": [283, 284, 748, 749, 752, 759, 768, 773, 776], "termcolor": [283, 284], "rebuild": [283, 284, 751], "found": [283, 284, 748, 749, 751, 755, 757, 761, 765, 766, 767, 768, 771], "constructor": [283, 284, 769, 770, 775], "param": [283, 284, 778], "kept": [283, 284, 749, 754, 771], "structur": [283, 284, 749, 752, 754, 763, 767, 768, 776, 777], "alphabet": [283, 284], "__setitem__": [283, 284, 767, 768, 775], "all_fals": [283, 284], "assert_is_bool": [283, 284], "assert": [283, 284, 754, 755, 760, 775, 776], "all_key_chain": [283, 284], "include_empti": [283, 284], "all_tru": [283, 284, 768, 776], "as_bool": [283, 284], "assert_contains_sub_contain": [283, 284], "sub_cont": [283, 284], "partial": [283, 284, 749], "diff": [283, 284, 758, 768, 776], "screen": [283, 284, 776], "assert_contains_sub_structur": [283, 284], "check_shap": [283, 284], "assert_ident": [283, 284], "check_typ": [283, 284], "same_arrai": [283, 284, 776], "assert_identical_structur": [283, 284], "at_key_chain": [283, 284], "ignore_key_error": [283, 284], "ignore_non": [283, 284], "at_kei": [283, 284], "ignor": [283, 284, 758, 760, 790], "substr": [283, 284], "access": [283, 284, 749, 750, 752, 761, 769], "config": [283, 284, 776], "prioriti": [283, 284, 749, 771], "right": [283, 284, 747, 748, 749, 753, 758, 776], "duplic": [283, 284, 755, 757, 765, 766, 777], "configur": [283, 284, 748, 749, 751, 752, 766, 769], "container_rightmost": [283, 284], "common_key_chain": [283, 284, 768], "cont_inplace_upd": [283, 284], "content": [283, 284, 750, 752, 761, 771, 773, 776], "contains_sub_contain": [283, 284], "contains_sub_structur": [283, 284], "create_if_abs": [283, 284], "alreadi": [283, 284, 748, 749, 750, 756, 765, 768, 769, 790, 1180], "noth": [283, 284, 749], "cutoff_at_depth": [283, 284], "depth_cutoff": [283, 284], "summari": [283, 284, 748, 749, 760], "cutoff_at_height": [283, 284], "height_cutoff": [283, 284], "deep_copi": [283, 284, 776], "belong": [283, 284, 750, 777], "dev_str": [283, 284], "diff_kei": [283, 284], "detect_key_diff": [283, 284], "detect_value_diff": [283, 284], "detect_shape_diff": [283, 284], "treat": [283, 284, 760, 774, 778], "detect": [283, 284, 748, 750, 755, 760, 765, 768, 776, 777], "without": [283, 284, 749, 754, 755, 756, 758, 760, 761, 763, 767, 768, 769, 770, 775, 776, 777, 789, 790], "container0": [283, 284], "duplicate_array_keychain": [283, 284], "find_sub_contain": [283, 284], "sub_cont_to_find": [283, 284], "exsit": [283, 284], "find_sub_structur": [283, 284], "sub_struc_to_find": [283, 284], "flatten_key_chain": [283, 284, 776], "__": [283, 284, 758, 776], "above_height": [283, 284, 776], "below_depth": [283, 284, 776], "format_key_chain": [283, 284], "format_fn": [283, 284], "format": [283, 284, 707, 708, 752, 753, 757, 758, 769, 770, 773, 775, 776, 1180], "string": [283, 284, 755, 765, 769, 770, 773, 776], "from_disk_as_hdf5": [283, 284, 776], "h5_obj_or_filepath": [283, 284], "slice_obj": [283, 284], "load": [283, 284, 790], "disk": [283, 284, 776], "h5py": [283, 284], "file": [283, 284, 748, 749, 750, 752, 754, 755, 757, 760, 763, 765, 767, 768, 773, 776], "hdf5": [283, 284, 776], "filepath": [283, 284, 749], "h5": [283, 284], "from_disk_as_json": [283, 284, 776], "json_filepath": [283, 284], "json": [283, 284, 776], "were": [283, 284, 711, 712, 749, 754, 755, 760, 773], "abl": [283, 284, 748, 749, 763, 769, 771, 778], "from_disk_as_pickl": [283, 284, 776], "pickle_filepath": [283, 284], "pickl": [283, 284, 768, 776], "from_flat_list": [283, 284], "flat_list": [283, 284], "hierarchi": [283, 284, 776], "flat": [283, 284], "h5_file_s": [283, 284], "handle_inplac": [283, 284], "prime": [283, 284], "overwritten": [283, 284, 765, 767], "has_kei": [283, 284], "query_kei": [283, 284], "somewher": [283, 284], "has_key_chain": [283, 284], "leafwis": [283, 284], "well": [283, 284, 749, 760, 761, 769, 771, 777, 778, 789], "identical_array_shap": [283, 284], "identical_config": [283, 284], "identical_structur": [283, 284], "if_exist": [283, 284], "key_chains_contain": [283, 284], "sub_str": [283, 284], "list_stack": [283, 284, 776], "dim": [283, 284, 762, 769], "func": [283, 284], "map_cont": [283, 284], "include_self": [283, 284], "possibi": [283, 284], "max_depth": [283, 284], "multi_map": [283, 284, 768], "map_nest": [283, 284], "leftmost": [283, 284], "multi_map_in_static_method": [283, 284, 768], "fn_name": [283, 284, 762, 765], "num_arrai": [283, 284, 760], "overwrite_at_key_chain": [283, 284], "overwrit": [283, 284, 749, 771, 773], "target_dict": [283, 284], "return_dict": [283, 284], "prune_empti": [283, 284], "keep_non": [283, 284], "prune_key_chain": [283, 284], "key1": [283, 284, 777], "key2": [283, 284], "key3": [283, 284], "prune_key_from_key_chain": [283, 284], "certain": [283, 284, 748, 749, 760, 761, 769, 790], "decid": [283, 284, 748, 750, 761, 769], "remov": [283, 284, 749, 750, 752, 757, 760, 763, 765, 769, 778], "prune_kei": [283, 284], "prune_keys_from_key_chain": [283, 284], "remove_key_length_limit": [283, 284], "remove_print_limit": [283, 284], "reshape_lik": [283, 284], "leading_shap": [283, 284], "return_cont": [283, 284], "restructur": [283, 284], "keep_orig": [283, 284], "transpos": [283, 284, 771, 775, 778, 1180], "old": [283, 284, 748, 765, 771], "start": [283, 284, 709, 710, 747, 748, 749, 750, 751, 752, 753, 757, 758, 761, 769, 772, 773, 775, 776, 777, 789, 790], "restructure_key_chain": [283, 284], "keychain_map": [283, 284], "set_at_key_chain": [283, 284], "set_at_kei": [283, 284], "set_framework": [283, 284], "set_ivy_backend": [283, 284], "ivy_backend": [283, 284], "attribut": [283, 284, 757, 761, 766, 768, 769, 771, 774, 775, 776, 777], "show": [283, 284, 748, 749, 750, 758, 760, 771, 789, 790, 1180], "show_sub_contain": [283, 284], "sub_cont_or_keychain": [283, 284], "shuffle_h5_fil": [283, 284], "seed_valu": [283, 284], "dataset": [283, 284, 776, 788, 1180], "align": [283, 284, 748, 749, 761, 773, 775, 1179, 1180, 1186], "seed": [283, 284, 1180], "size_ordered_arrai": [283, 284], "keychain": [283, 284], "smallest": [283, 284], "largest": [283, 284, 789], "slice_kei": [283, 284], "key_slic": [283, 284], "all_depth": [283, 284], "slice_via_kei": [283, 284], "sort_by_kei": [283, 284], "split_cont": [283, 284], "constitu": [283, 284, 778], "structural_diff": [283, 284], "to_dict": [283, 284], "to_disk_as_hdf5": [283, 284, 776], "starting_index": [283, 284], "max_batch_s": [283, 284], "read": [283, 284, 752, 1180], "r": [283, 284, 748, 749, 753], "later": [283, 284, 750, 760], "append": [283, 284, 752, 760, 773, 776], "to_disk_as_json": [283, 284, 776], "to_disk_as_pickl": [283, 284, 776], "to_flat_list": [283, 284], "to_iter": [283, 284, 768], "leaf_keys_onli": [283, 284], "to_iterator_kei": [283, 284], "to_iterator_valu": [283, 284], "to_json": [283, 284], "to_nested_list": [283, 284], "to_raw": [283, 284], "raw": [283, 284, 757], "trim_kei": [283, 284], "max_length": [283, 284], "try_kc": [283, 284], "tri": [283, 284], "concatten": [283, 284], "unstack_cont": [283, 284], "dim_siz": [283, 284], "update_config": [283, 284], "with_default_key_color": [283, 284], "with_entries_as_list": [283, 284], "with_ivy_backend": [283, 284], "with_key_length_limit": [283, 284, 776], "with_print_ind": [283, 284, 776], "with_print_limit": [283, 284, 776], "with_print_line_spac": [283, 284], "containerwithconvers": 707, "static_to_ivi": [707, 708], "static_to_n": [707, 708], "containerwithcr": 709, "2324": [709, 710], "234": [709, 710], "123": [709, 710, 760], "static_arang": [709, 710], "static_asarrai": [709, 710], "static_empty_lik": [709, 710], "static_ey": [709, 710], "n_row": [709, 710], "n_col": [709, 710], "static_from_dlpack": [709, 710], "static_full_lik": [709, 710], "static_linspac": [709, 710], "num": [709, 710, 749, 773], "endpoint": [709, 710], "static_logspac": [709, 710], "static_meshgrid": [709, 710], "static_native_arrai": [709, 710], "static_on": [709, 710], "static_ones_lik": [709, 710], "static_tril": [709, 710], "static_triu": [709, 710], "static_zero": [709, 710], "static_zeros_lik": [709, 710], "containerwithdatatyp": 711, "718": [711, 712, 715, 716], "618": [711, 712, 715, 716], "broadcats": [711, 712], "static_astyp": [711, 712], "static_broadcast_arrai": [711, 712], "And": [711, 712], "static_broadcast_to": [711, 712], "static_can_cast": [711, 712], "from_": [711, 712], "static_default_float_dtyp": [711, 712], "float_dtyp": [711, 712], "static_dtyp": [711, 712], "static_finfo": [711, 712], "static_function_supported_dtyp": [711, 712], "fn": [711, 712, 773], "static_function_unsupported_dtyp": [711, 712], "static_iinfo": [711, 712], "static_is_bool_dtyp": [711, 712], "dtype_in": [711, 712], "static_is_float_dtyp": [711, 712], "roughli": [711, 712], "static_is_int_dtyp": [711, 712], "static_is_uint_dtyp": [711, 712], "static_result_typ": [711, 712], "containerwithdevic": 713, "static_dev": [713, 714], "static_to_devic": [713, 714], "move": [713, 714, 749, 754], "__dlpack__": [713, 714], "caveat": [713, 714], "portabl": [713, 714, 1180], "containerwithelementwis": [715, 768], "524": [715, 716], "644": [715, 716, 777], "305": [715, 716], "61": [715, 716], "41": [715, 716], "915": [715, 716], "29": [715, 716], "983": [715, 716], "75": [715, 716], "35": [715, 716], "978": [715, 716], "696": [715, 716], "993": [715, 716], "203": [715, 716], "34": [715, 716], "52": [715, 716], "333": [715, 716], "thefunct": [715, 716], "649": [715, 716], "220": [715, 716], "959": [715, 716], "865": [715, 716], "floordmod": [715, 716], "metho": [715, 716], "999999999999": [715, 716], "898": [715, 716], "0414": [715, 716], "956": [715, 716], "28": [715, 716], "84": [715, 716], "j": [715, 716, 749, 753], "threshold": [715, 716], "300": [715, 716, 760], "527": [715, 716], "301": [715, 716], "757": [715, 716], "279": [715, 716], "835": [715, 716], "347": [715, 716], "721": [715, 716], "static_ab": [715, 716], "static_aco": [715, 716], "static_acosh": [715, 716], "static_add": [715, 716, 757, 758, 768], "static_asin": [715, 716], "412": [715, 716], "201": [715, 716], "static_asinh": [715, 716], "static_atan": [715, 716], "static_atan2": [715, 716], "static_atanh": [715, 716], "static_bitwise_and": [715, 716], "static_bitwise_invert": [715, 716], "static_bitwise_left_shift": [715, 716], "static_bitwise_or": [715, 716], "static_bitwise_right_shift": [715, 716], "static_bitwise_xor": [715, 716], "static_ceil": [715, 716], "static_co": [715, 716], "static_cosh": [715, 716], "static_divid": [715, 716], "static_equ": [715, 716], "static_erf": [715, 716], "static_exp": [715, 716], "static_expm1": [715, 716], "areal": [715, 716], "static_floor": [715, 716], "static_floor_divid": [715, 716], "static_floormod": [715, 716], "static_great": [715, 716], "static_greater_equ": [715, 716], "static_isfinit": [715, 716], "static_isinf": [715, 716], "static_isnan": [715, 716], "static_less": [715, 716], "static_less_equ": [715, 716], "static_log": [715, 716], "static_log10": [715, 716], "static_log1p": [715, 716], "static_log2": [715, 716], "static_logaddexp": [715, 716], "static_logical_and": [715, 716], "static_logical_not": [715, 716], "static_logical_or": [715, 716], "static_logical_xor": [715, 716], "static_maximum": [715, 716], "static_minimum": [715, 716], "static_multipli": [715, 716], "static_neg": [715, 716], "static_not_equ": [715, 716], "static_posit": [715, 716], "static_pow": [715, 716], "static_remaind": [715, 716], "static_round": [715, 716], "thevfunct": [715, 716], "static_sign": [715, 716], "static_sin": [715, 716], "static_sinh": [715, 716], "static_sqrt": [715, 716], "static_squar": [715, 716], "static_subtract": [715, 716], "static_tan": [715, 716, 758, 768], "143": [715, 716, 758], "38": [715, 716, 758], "static_tanh": [715, 716], "995": [715, 716], "9999": [715, 716], "static_trunc": [715, 716], "add_ivy_container_instance_method": 745, "containerexampl": [745, 746], "strongli": [747, 748, 1180, 1186], "welcom": [747, 748, 749, 1180, 1186], "skill": 747, "veteran": 747, "beginn": 747, "aspect": [747, 776, 1180], "guid": [747, 748, 749, 750, 755, 1180], "through": [747, 749, 750, 753, 758, 760, 761, 762, 763, 765, 766, 768, 771, 772, 773, 776, 777, 778, 789], "journei": [747, 1180, 1186], "inclusvi": 747, "big": [747, 790], "team": [747, 748, 749, 750], "board": 747, "contributor": [747, 748, 749, 772, 1180], "section": [747, 749, 750, 751, 753, 754, 756, 757, 760, 761, 762, 763, 765, 766, 767, 768, 769, 770, 771, 772, 776, 777], "best": [747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 765, 766, 767, 768, 769, 770, 771], "go": [747, 748, 749, 750, 751, 753, 754, 758, 761, 762, 765, 772, 776, 790], "finish": [747, 748, 753, 1180], "dive": [747, 749, 750, 761, 762, 768, 772, 775, 776, 790, 1180], "environ": [747, 749, 751, 752, 789], "basic": [747, 750, 752, 758], "fork": [747, 748], "doc": [747, 750, 756, 757, 758, 762, 773, 776, 777, 1180], "document": [747, 749, 758, 760, 761, 762, 776, 778], "local": [747, 748, 751, 752, 759, 763], "task": [747, 749, 789, 1180], "help": [747, 748, 750, 751, 758, 760, 761, 765, 766, 767, 768, 775, 776, 777, 788, 1179, 1180], "video": [747, 749, 754, 756, 757, 758, 760, 761, 763, 765, 766, 767, 768, 769, 770, 771], "realli": [748, 768, 790], "contribut": [748, 749, 750, 751, 773, 1186], "page": [748, 749, 774, 775, 778, 788, 1180, 1186], "explain": [748, 749, 750, 754, 755, 756, 757, 758, 760, 761, 763, 765, 767, 768, 769, 770, 771, 773, 774, 775, 776, 777, 778, 1180, 1186], "prefer": [748, 759, 761, 766, 768], "git": [748, 749, 751, 760], "submodul": [748, 749, 750, 752, 759, 760, 763, 766, 770, 772, 773, 777, 1179, 1180], "com": [748, 751, 769], "unifyai": [748, 749, 751, 752], "gh": 748, "your_fold": 748, "id": [748, 751, 755, 767, 768], "cours": [748, 749, 758, 776, 790], "whatev": [748, 768, 790], "familiar": [748, 750], "sure": [748, 749, 750, 759, 760], "elig": 748, "free": [748, 749, 750, 751, 752, 754, 756, 757, 758, 759, 760, 761, 762, 763, 765, 766, 767, 768, 769, 770, 771, 772, 789, 1180], "student": 748, "licenc": 748, "peopl": [748, 749, 753], "seem": [748, 777, 778, 790], "miss": [748, 750, 755, 758, 760, 767, 768], "explicit": [748, 752, 768, 769, 771, 773, 790], "remind": 748, "here": [748, 749, 750, 754, 756, 758, 760, 761, 762, 768, 771, 773, 774, 775, 776, 777, 778, 789, 790], "pace": 748, "suggest": [748, 749, 750, 754, 760], "packag": [748, 751, 752, 755, 761, 790], "pypi": [748, 750, 790], "person": [748, 749], "experi": [748, 774, 776, 790], "avoid": [748, 749, 754, 755, 760, 765, 766, 768], "pip": [748, 751, 789, 1180], "instal": [748, 749, 751, 752, 755, 765, 789, 1180], "abil": [748, 774, 790], "perhap": [748, 775, 776, 777, 790], "track": [748, 749], "command": [748, 752, 759, 766, 1180], "ivy_dev": [748, 749, 751, 752], "setup": [748, 749, 751], "click": [748, 749, 757, 774, 1180], "icon": [748, 749], "panel": 748, "drop": [748, 790], "down": [748, 760, 1179], "path": [748, 752, 762, 771], "manual": [748, 749, 750, 760, 761, 777], "builtin": [748, 752, 775, 777], "doesn": [748, 752, 758, 760, 761, 765, 769, 773, 790], "requir": [748, 750, 751, 752, 754, 756, 757, 758, 759, 760, 761, 762, 766, 767, 769, 770, 773, 775, 790], "cmd": [748, 752], "directori": [748, 749, 751, 752, 760, 761], "folder": [748, 749, 751, 752, 754, 759, 760, 763], "python3": [748, 749, 751, 752], "script": [748, 749, 752, 758, 773, 790], "bat": [748, 749, 751, 752], "bin": [748, 749, 751, 752, 759], "mac": [748, 749, 751, 752], "linux": [748, 749, 751, 752], "virtualenv": 748, "o": [748, 753, 773], "note": [748, 749, 750, 751, 754, 757, 758, 760, 761, 762, 769], "tick": [748, 749], "To": [748, 751, 754, 755, 758, 759, 760, 761, 762, 763, 768, 776, 777, 778, 1180], "ivy_test": [748, 749, 761, 762], "test_array_api": [748, 749, 759, 760], "cd": [748, 749, 751, 752], "txt": 748, "visual": [748, 790], "jetbrain": 748, "remot": 748, "mitig": 748, "potenti": [748, 749, 750, 772], "conflict": [748, 749, 776], "yet": [748, 790], "particular": [748, 749, 754, 758, 759, 760, 761, 762, 765, 766, 769, 771], "system": [748, 749, 765, 790], "jaxlib": [748, 754, 756, 769, 770, 773, 775], "instruct": [748, 750], "desktop": [748, 751], "wsl": 748, "powershel": 748, "admin": 748, "visit": [748, 749, 762], "link": [748, 750, 751, 761, 769], "profession": 748, "execut": [748, 749, 752, 758, 768, 771, 773, 775, 778, 790, 1179], "deploy": 748, "press": [748, 749, 776, 1180], "ok": 748, "caus": [748, 749, 758, 760, 765, 768, 771, 790], "earlier": [748, 749], "virtualis": 748, "sudo": 748, "apt": 748, "ca": 748, "certif": 748, "curl": 748, "gnupg": 748, "lsb": 748, "mkdir": 748, "keyr": 748, "fssl": 748, "download": [748, 760], "gpg": 748, "dearmor": 748, "echo": 748, "deb": 748, "arch": 748, "dpkg": 748, "architectur": [748, 778, 790], "lsb_releas": 748, "tee": 748, "null": 748, "ce": 748, "cli": 748, "containerd": 748, "io": 748, "compos": [748, 760, 768, 790], "plugin": 748, "systemctl": 748, "permiss": 748, "relat": [748, 749, 751, 754, 755, 760, 789], "simplest": [748, 758, 760], "becaus": [748, 749, 756, 757, 760, 761, 762, 763, 765, 766, 767, 769, 770, 771, 773, 777, 778, 790], "header": [748, 749], "recommend": [748, 749, 765], "advanc": 748, "bar": 748, "pytest": [748, 749, 760, 762], "checkbox": [748, 750], "q": [748, 749, 753, 790], "fail": [748, 749, 750, 755, 758, 769], "headach": 748, "arm": [748, 749], "m1": 748, "featur": [748, 749, 754, 756, 761, 776, 790, 1180], "vm": 748, "azur": 748, "cloud": [748, 789], "dockerfil": [748, 752], "longer": [748, 760, 766, 769, 771], "worri": 748, "platform": 748, "agnost": [748, 756, 767, 773, 775, 778, 790, 1180], "usual": [748, 760, 761], "studio": 748, "favourit": 748, "theme": 748, "too": [748, 749, 750, 755, 790], "done": [748, 749, 750, 755, 758, 760, 776], "unsupport": [748, 755, 761], "slow": 748, "ipad": 748, "long": [748, 749, 758, 769, 773], "browser": 748, "cool": [748, 754], "requisit": 748, "head": [748, 1180], "pane": [748, 749], "readi": [748, 761], "begin": [748, 759], "outlin": [748, 749, 750, 753, 757, 760, 763, 768, 771], "dropdown": 748, "tab": [748, 776, 1180], "master": [748, 749], "view": [748, 749], "built": [748, 749, 760, 774, 1179], "bottom": 748, "box": 748, "patient": [748, 750], "upto": [748, 749], "minut": 748, "subsequ": [748, 756, 758, 760, 763, 767, 771, 777], "launch": 748, "That": [748, 749, 760, 775, 776, 777], "previous": [748, 752, 760, 763, 773], "approach": [748, 749, 760, 763, 766, 768, 769, 775, 776, 790], "colour": 748, "applic": [748, 766, 769, 770, 777], "good": [748, 749, 750, 751, 752, 754, 756, 757, 758, 759, 760, 762, 763, 765, 766, 767, 768, 769, 770, 771, 773, 777], "chanc": 748, "vscode": [748, 751], "explor": [748, 749, 774, 778, 789], "troubleshoot": 748, "sometim": [748, 749, 750, 760, 761, 769], "ever": [748, 749, 750, 751, 752, 754, 756, 757, 758, 759, 760, 761, 762, 763, 765, 766, 767, 768, 769, 770, 771], "bit": [748, 758, 760, 763, 768, 773, 775], "usr": 748, "under": [748, 749, 753, 757, 758, 759, 760, 761, 763, 768, 772, 773, 776, 778, 790], "flask": 748, "toolbar": [748, 749], "_array_modul": [748, 759], "py": [748, 749, 750, 754, 755, 756, 757, 759, 760, 761, 762, 763, 765, 769, 770, 773, 775, 777, 778], "array_api_test": [748, 749, 759], "2022": 748, "conftest": 748, "comment": [748, 749, 750, 755, 759, 761, 769], "via": [748, 749, 754, 768, 769, 770, 771, 773, 775, 776, 789], "refresh": 748, "nutshel": [748, 756], "hook": 748, "lint": 748, "fix": [748, 749, 759, 760, 769], "attempt": [748, 755, 790], "succe": 748, "problemat": [748, 750], "proce": [748, 749, 750, 751, 752, 754, 756, 757, 758, 759, 760, 761, 762, 763, 765, 766, 767, 768, 769, 770, 771], "modifi": [748, 749, 750, 754, 755, 757, 763, 765, 769, 770, 773], "properli": [748, 753], "enter": [748, 749, 756, 766, 767, 769, 770], "unsur": [748, 749, 750, 751, 752, 754, 756, 757, 758, 759, 760, 761, 762, 763, 765, 766, 767, 768, 769, 770, 771], "feel": [748, 749, 750, 751, 752, 754, 756, 757, 758, 759, 760, 761, 762, 763, 765, 766, 767, 768, 769, 770, 771, 772, 1180], "server": [749, 1180], "suitabl": [749, 754, 761, 768], "quick": [749, 753, 777], "tendenc": 749, "land": 749, "isn": [749, 766, 776, 790], "end": [749, 754, 765, 771, 772, 789, 790, 1180, 1186], "world": 749, "come": [749, 760, 761, 777, 788, 1179, 1180, 1186], "fly": 749, "hard": [749, 775], "receiv": [749, 760, 769, 770], "respons": [749, 752, 769], "internship": 749, "trigger": [749, 750], "unansw": 749, "respond": 749, "someon": [749, 790], "strive": [749, 760, 790], "repli": 749, "bug": [749, 760, 769], "serv": [749, 756, 760, 763, 767, 768, 772, 1179, 1180], "suspect": 749, "behaviour": [749, 750, 753, 754, 756, 757, 760, 761, 767, 768, 769, 771, 775], "observ": 749, "confid": 749, "wrong": 749, "someth": [749, 754, 776, 777, 790], "bet": 749, "act": [749, 758, 761, 790], "placehold": [749, 755, 756, 761, 767, 1179], "mark": [749, 750, 760], "ii": 749, "iii": 749, "titl": [749, 750, 1180], "issue_numb": 749, "delet": [749, 752], "No": 749, "progress": [749, 778], "pr": [749, 750, 759], "soon": [749, 769, 788, 790, 1180, 1186], "solut": [749, 760, 768, 769], "review": [749, 750, 754, 758], "merg": [749, 750], "dai": 749, "warn": 749, "appear": 749, "close": [749, 750, 757, 760], "likewis": [749, 756, 757, 763, 768, 769, 776], "freed": 749, "purpos": [749, 752, 756, 758, 760, 761, 763, 766, 767, 768, 772, 775, 1179, 1180], "short": [749, 769, 773, 777], "basi": [749, 759, 776], "situat": [749, 778], "upon": [749, 758, 760, 771, 790], "period": 749, "unabl": 749, "obvious": 749, "reflect": [749, 751, 760, 767], "qualiti": 749, "hypothet": 749, "frustrat": 749, "delai": 749, "busi": 749, "fine": [749, 758, 775, 778], "inact": 749, "me": 749, "unfairli": 749, "investig": 749, "incomplet": 749, "three": [749, 758, 760, 761, 768, 772, 1180], "though": [749, 750, 757, 763, 769, 776, 790], "assign": [749, 755, 761, 765, 771, 775], "regist": 749, "wherea": [749, 756, 758, 760, 763, 767, 769, 770, 778], "primarili": 749, "invit": 749, "roadmap": 749, "mainli": [749, 753, 774, 776, 1179], "fall": [749, 769, 772, 1180], "extend": [749, 754, 756, 757, 765, 790], "ideal": [749, 771, 776], "Such": [749, 760], "describ": [749, 760, 773, 778], "easier": [749, 754, 767, 769, 1179], "regular": 749, "forth": 749, "rare": [749, 770, 790], "scenario": [749, 760], "unfortun": 749, "redund": [749, 769], "Then": [749, 752, 754, 761, 766, 790], "practic": 749, "separ": [749, 760, 762, 767, 768, 773, 775, 776], "branch": [749, 790], "role": [749, 761, 774], "date": 749, "upstream": [749, 759], "complic": [749, 762, 773], "merge_with_upstream": 749, "sh": [749, 759], "name_of_your_branch": 749, "resolv": [749, 769, 773], "clone": [749, 751, 752], "push": [749, 750, 755, 759], "abort": 749, "tediou": [749, 758], "resolut": 749, "stash": 749, "reinstat": 749, "fetch": 749, "uncommit": 749, "unstag": 749, "untrack": 749, "comprehens": 749, "explan": [749, 756, 757, 761, 768, 775], "atlassian": 749, "tutori": [749, 761], "wrote": 749, "piec": [749, 763, 766, 767, 773], "tag": 749, "navig": [749, 753], "blame": 749, "revis": 749, "author": [749, 750, 1180], "eg": [749, 760], "past": 749, "grep": 749, "retriev": 749, "commit_id": 749, "handi": [749, 760], "histori": 749, "toggl": 749, "vertic": 749, "highlight": [749, 758], "whenev": [749, 760, 762, 766, 776], "think": [749, 758], "gain": [749, 772, 777], "quit": [749, 757, 758, 760, 763, 766, 767], "yourself": [749, 750, 760, 789], "simpler": [749, 750, 761], "cannot": [749, 761, 765, 769, 778], "least": [749, 758, 760, 763, 767], "approv": 749, "hash": [749, 776], "detail": [749, 750, 754, 756, 759, 760, 762, 763, 765, 766, 768, 775, 776, 777], "cancel": 749, "speedup": 749, "button": 749, "unavail": 749, "tickbox": 749, "corner": 749, "span": 749, "intent": [749, 771], "larg": [749, 776], "discourag": 749, "philosophi": 749, "frequent": [749, 750], "valuabl": 749, "infrequ": 749, "earli": [749, 1180], "wast": 749, "spot": [749, 758, 763], "mistak": [749, 755], "propos": 749, "mountain": 749, "advoc": [749, 790], "individu": [749, 750, 763, 771], "style": 749, "actual": [749, 753, 761, 763, 771, 772, 777, 790], "aim": [749, 760, 772], "subsect": 749, "session": [749, 1180], "block": [749, 751, 755, 760, 763, 772, 774, 778, 790, 1179, 1180], "edit": [749, 750, 751], "beauti": 749, "particularli": [749, 760, 776, 790], "concern": [749, 753, 758, 768, 771, 772], "effici": [749, 755, 759, 760, 763, 766, 768, 771, 773, 776, 790], "difficult": [749, 760, 769, 790], "undo": 749, "stress": 749, "advantag": [749, 771], "nifti": 749, "reassur": 749, "isol": 749, "bash": [749, 752], "shell": 749, "rm": [749, 751], "fact": [749, 760, 776], "mount": [749, 751], "local_path_to_ivi": 749, "subfold": [749, 754, 760, 762], "insid": [749, 752, 754, 760, 766, 768, 769], "wide": [749, 760], "dep": 749, "fresh": 749, "arsen": 749, "declar": 749, "exec": 749, "rf": 749, "cp": 749, "ivy_contain": 749, "test_ivi": [749, 760, 761, 762], "test_funct": [749, 760], "test_cor": 749, "test_imag": 749, "test_random_crop": 749, "test_creation_funct": 749, "test_arang": 749, "variou": [749, 756, 757, 760, 766, 789, 1179], "gpu": [749, 770, 775], "torch": [749, 754, 756, 760, 761, 762, 763, 765, 767, 769, 770, 771, 773, 775, 776, 778, 790, 1179, 1180], "hypothesi": [749, 750, 759, 762, 766], "text": [749, 750, 757, 758], "ctrl": 749, "prompt": [749, 1180], "whole": 749, "cursor": 749, "alt": 749, "locat": [749, 754, 760, 762, 765, 770], "blog": 749, "debug": [749, 759, 760, 768, 776], "breakpoint": 749, "gutter": 749, "caret": 749, "f8": 749, "f9": 749, "Into": 749, "f7": 749, "smart": 749, "sever": [749, 754, 790], "interest": 749, "consol": [749, 759, 760, 775], "fragment": 749, "pychram": 749, "dummi": 749, "wherein": [749, 760, 766], "failur": [749, 759, 760], "wherebi": 750, "broad": 750, "todo": [750, 761, 764, 769], "commit": [750, 751, 758, 759, 760], "NOT": 750, "resourc": 750, "cover": [750, 757, 758, 760, 763, 766, 772], "lambda": [750, 773, 776], "direct": [750, 761, 777, 778, 789], "bind": [750, 768], "def": [750, 754, 755, 756, 758, 759, 760, 761, 762, 763, 768, 769, 770, 771, 773, 775, 776, 777, 778, 1180], "aforement": 750, "categori": [750, 754, 761, 767, 768, 769, 772, 1180], "parent": [750, 775], "containerwithmanipul": 750, "thorough": [750, 756, 757, 760, 762], "produc": [750, 754, 760], "add_reformatting_checklist_": 750, "category_nam": [750, 756, 757, 763, 769, 770], "autom": [750, 760, 1179, 1180], "bot": 750, "proper": 750, "markdown": 750, "symbol": 750, "emoji": 750, "legend": 750, "stuck": 750, "elabor": 750, "struggl": 750, "assigne": 750, "status": 750, "refrain": 750, "transpil": [750, 761, 772, 774, 1179, 1180, 1186], "verifi": [750, 754, 760, 769, 770, 1180, 1186], "func_nam": [750, 757, 758, 761, 763], "assess": 750, "composit": [750, 753, 760, 762, 765, 767, 768, 769, 771, 773, 777, 778, 790, 1179], "temporari": [750, 769], "altern": [750, 771, 776], "composition": [750, 771], "pend": 750, "helpfulli": 750, "unimpl": 750, "issue_link": 750, "chosen": [750, 761], "thu": [750, 751, 761], "alias": 750, "alias_nam": 750, "function_nam": 750, "notic": [750, 761, 762], "alia": 750, "liner": 750, "meanwhil": 750, "complex": [750, 751, 758, 761, 769, 776, 777, 778, 790, 1179], "reselect": 750, "backend_nam": [750, 756, 757, 763, 765, 766, 769, 770], "extenst": 750, "behav": [750, 762, 771, 775], "helper": [750, 761, 762, 769, 776, 1179], "recreat": [750, 761], "defer": [750, 760, 763, 766, 767, 768, 769, 770, 771], "clearer": [750, 776], "mind": [750, 760, 767, 768], "postion": 750, "keywork": 750, "strategi": [750, 762, 766], "slightli": [751, 761, 768, 773, 777], "alon": [751, 760], "mech": 751, "vision": [751, 788, 1180], "demo": [751, 789, 1180], "grasp": [751, 761], "tree": [751, 752, 769], "dir": [751, 776], "mutual": [751, 763, 768], "venv": 751, "ivy_devscriptsactiv": 751, "immedi": [751, 1180], "ivy_robot": [751, 789], "docker": 751, "my": [751, 754], "pwd": 751, "volum": 751, "pycharm": 751, "pre": [751, 778, 790], "builder": [752, 788, 790, 1179, 1180], "maco": 752, "ubuntu": 752, "uid": 752, "make_docs_without_dock": 752, "synchron": 752, "rest": [752, 778], "remove_doc": 752, "privat": [752, 760], "fulfil": [752, 772, 1180], "autogenerated_sourc": 752, "png": [752, 776], "_imag": 752, "lastli": 752, "rst": 752, "partial_sourc": 752, "conf": 752, "create_rst_fil": 752, "overal": [752, 757, 768, 769, 770, 778], "markup": 752, "extract": [752, 754], "get_functions_and_class": 752, "doctr": 752, "readm": [752, 790], "module_nam": 752, "copy_readme_to_rst": 752, "tabl": 752, "toc": 752, "append_toctree_to_rst": 752, "create_index_rst": 752, "\u03c0": 752, "namespac": [752, 754, 762, 766, 769, 773, 778], "who": [753, 772, 790], "target": [753, 761, 772, 776, 777, 778, 1180], "hood": [753, 758, 760, 763, 768, 772, 773, 776, 778], "weed": [753, 772], "tour": 753, "primari": [753, 760, 761, 765, 769, 771, 790, 1179], "superset": [753, 769, 790], "goe": 753, "unifyin": 753, "dynam": [753, 769, 770, 771, 773], "runtim": [753, 760], "borrow": 753, "frontend": [753, 769, 772, 774, 1179], "taken": [754, 755, 778], "compil": [754, 768, 772, 774, 790, 1179, 1180], "meta": [754, 767], "overlap": 754, "judgement": 754, "some_namespac": 754, "some_backend": [754, 769], "another_backend": 754, "break": [754, 755, 756, 765, 790, 1180], "anyth": [754, 760, 1180], "refactor": 754, "ongo": 754, "file_nam": [754, 760], "my_func": [754, 758], "op": [754, 773, 790], "cooler": 754, "current_backend": [754, 761, 763, 773], "extern": [754, 756, 760], "usabl": [754, 756], "sole": [754, 756], "flexibl": [754, 756], "forward": [754, 757, 760, 765, 778, 789, 790], "something_cool": 754, "clean": [754, 773, 774, 776], "readabl": [754, 756, 767, 768, 775, 776], "_assert_fill_value_and_dtype_are_compat": 754, "isinst": [754, 777, 778], "jaxarrai": [754, 756, 769, 770, 771, 773], "jnp": [754, 756, 769, 770, 771, 773, 778, 1180], "xla_extens": [754, 756, 769, 770, 773, 775], "_to_devic": 754, "np": [754, 756, 760, 761, 762, 767, 769, 770, 771, 773, 775, 776, 778, 1179, 1180], "tf": [754, 756, 761, 767, 769, 770, 771, 773, 778, 790, 1179, 1180], "experiment": [754, 773], "flake8": 755, "ci": [755, 759, 760, 769, 790], "unus": [755, 758, 771], "undefin": 755, "statement": [755, 760, 771, 790], "outsid": [755, 763, 770, 775], "handler": [755, 772, 774, 778, 1179, 1180], "annot": [755, 756], "liter": 755, "star": 755, "byte": 755, "notimpl": 755, "notimplementederror": 755, "achiev": [755, 759, 760, 766, 769, 776, 778, 1179], "unsuccess": 755, "reformat": 755, "exceed": 755, "black": 755, "disobei": 755, "successfulli": 755, "inde": [755, 756, 790], "adress": 756, "conveni": [756, 762, 769, 770, 774, 776, 777, 1179], "revisit": 756, "dedic": [756, 775, 777], "four": [756, 758, 760, 763, 769, 776], "to_native_arrays_and_back": [756, 766, 773], "handle_out_argu": [756, 766, 769, 770, 771, 773], "outputs_to_ivy_arrai": [756, 766, 767, 769, 770], "infer_dtyp": [756, 766, 769, 770], "infer_devic": [756, 766, 769, 770], "__sub__": [756, 758, 767, 768, 775], "__mul__": [756, 758, 767, 768, 775], "__div__": 756, "permit": [756, 760, 767], "dicat": 756, "contrast": [756, 757], "futher": 756, "absenc": [756, 768], "pep": 756, "484": 756, "dictat": [756, 758, 767, 771], "brittl": 756, "intend": 756, "subset": [756, 757, 760, 761, 773], "freeli": 756, "consum": [756, 760, 762, 768], "technic": [756, 771, 790], "original_typ": 756, "cumbersom": 756, "omit": [756, 771], "account": 757, "instanti": 757, "firstli": [757, 758, 763, 766, 767, 769, 771, 776], "templat": [757, 760, 1180], "spec": [757, 758], "array_api": 757, "preview": 757, "render": 757, "incorrectli": 757, "onlin": [757, 758, 1180], "domain": 757, "codomain": 757, "operand": [757, 768], "ref": 757, "But": [757, 766, 768, 771, 778], "needless": 757, "info": [757, 1180], "renam": 757, "judgment": 757, "beyond": [757, 761], "pure": [757, 761, 775, 778, 790], "themselv": [757, 763, 768, 769, 770, 777], "operator_nam": 757, "succinct": 757, "contstructor": 757, "_forward": [757, 773, 776, 777, 1180], "former": [757, 769], "explicitli": [757, 759, 763, 765, 766, 767, 768, 769, 771, 773, 790], "latter": [757, 765, 769], "implicit": [757, 760, 768, 773], "docst": 757, "eight": [758, 772], "static_": 758, "op_nam": 758, "__r": 758, "__truediv__": [758, 767, 768], "recap": [758, 768, 777], "combinatorili": 758, "variat": [758, 760], "grid": [758, 760, 789], "vari": [758, 760, 768, 775], "excess": [758, 765], "okai": [758, 773], "showcas": [758, 789], "demonstr": [758, 775], "replic": [758, 761, 769], "meant": 758, "imaginari": 758, "some_flag": 758, "another_flag": 758, "jointli": 758, "x0": 758, "procedur": 758, "sens": [758, 775], "5574077": 758, "1850398": 758, "5463025": 758, "8422884": 758, "91601413": 758, "9647598": 758, "3738229": 758, "1597457": 758, "0963247": 758, "9955841": 758, "3278579": 758, "multi": [758, 772, 790, 1180, 1186], "pars": [758, 790], "satisfi": 758, "far": [758, 770, 774], "asid": [758, 789], "irrelev": [758, 769], "increasingli": 758, "14254655": 758, "1578213": 758, "380515": 758, "trivial": 758, "static_rol": [758, 768], "exlud": 758, "action": [758, 760], "failing_fn_nam": 758, "minutest": 758, "suffici": 758, "segment": 758, "fault": 758, "thoroughli": 759, "insert_chosen_backend": 759, "array_modul": 759, "set_backend": [759, 763, 765, 766, 769, 773, 775, 778, 1180], "typic": [759, 763], "falsifi": [759, 760], "test_trac": 759, "kw": 759, "decor": [759, 760, 762, 763, 766, 768, 769, 770, 771], "On": [760, 761, 774, 778], "fixtur": 760, "hit": [760, 773], "eleg": 760, "intellig": 760, "rang": [760, 769, 773, 776, 777, 778, 1180], "cach": [760, 763], "unexplor": 760, "known": 760, "repeatedli": 760, "upload": 760, "artifact": 760, "parametr": 760, "plai": [760, 761, 778], "kind": [760, 773, 790], "exhaust": 760, "impli": 760, "henc": [760, 768], "bespok": 760, "_array_or_typ": 760, "standalon": [760, 1179], "test_default_int_dtyp": 760, "clariti": 760, "varieti": [760, 769, 770], "valid_int_dtyp": [760, 762], "uint8": [760, 769], "uint16": [760, 769, 773], "uint32": [760, 769, 773], "uint64": [760, 769, 773], "custom_strategi": 760, "st": [760, 762], "sampled_from": [760, 762], "min_siz": 760, "max_siz": 760, "referenc": 760, "print_hypothesis_exampl": 760, "searchstrategi": 760, "randomis": 760, "simplist": 760, "intricaci": 760, "briefli": [760, 763, 776], "bound": [760, 773], "mechan": [760, 788, 790, 1180], "math": [760, 761, 771, 778, 1180], "inclus": [760, 765, 771], "width": 760, "losslessli": 760, "mostli": 760, "one_of": 760, "datum": 760, "pipe": 760, "overload": 760, "shorthand": 760, "min_valu": [760, 762], "max_valu": [760, 762], "input_dtyp": [760, 762], "as_vari": [760, 762, 766], "reject": 760, "flatmap": 760, "suppos": 760, "interact": [760, 1180], "dataobject": 760, "test_argsort": 760, "initialis": 760, "snippet": 760, "handle_cmd_line_arg": [760, 762, 766], "dtype_and_x": [760, 762], "dtype_and_valu": [760, 762], "ivy_np": [760, 762], "valid_float_dtyp": [760, 762], "num_positional_arg": [760, 762], "test_leaky_relu": 760, "instance_method": [760, 766], "num_posit": 760, "indirectli": 760, "advis": 760, "seri": [760, 761], "9433925": 760, "401298464324817e": 760, "574352379": 760, "99999": 760, "2250738585072014e": 760, "308": 760, "103515625e": 760, "seamlessli": 760, "edg": [760, 1180], "encount": 760, "criterion": 760, "straight": [760, 775, 1180], "array_valu": 760, "valid_ax": 760, "hand": [760, 763, 790], "craft": 760, "polici": [760, 789], "hoc": 760, "overview": [760, 772, 789], "array_dtyp": 760, "array_bool": [760, 762], "na": 760, "test_concat": 760, "test_devic": 760, "array_shap": 760, "test_manipul": 760, "common_shap": 760, "test_lay": 760, "size_bound": 760, "precis": [760, 769], "283405296074752": 760, "564049465049088": 760, "0417876997507982e": 760, "allow_inf": 760, "min_num_dim": [760, 762], "wherev": 760, "reshape_shap": 760, "stand": 760, "fashion": 760, "some_sequ": 760, "allow_subnorm": 760, "exclude_min": 760, "960464477539063e": 760, "coverag": [760, 769], "allow_nan": 760, "get_shap": [760, 762], "allow_non": [760, 762], "max_num_dim": [760, 762], "min_dim_s": [760, 762], "none_or_list_of_float": 760, "200": [760, 776], "199": 760, "99999999999997": 760, "000000000000002": 760, "125": 760, "43759670925832": 760, "get_mean_std": 760, "probabilist": 760, "811428143185347e": 760, "none_or_list_float": 760, "get_bound": 760, "arrays_valu": 760, "put": [760, 761, 790], "73": 760, "36418": 760, "213": 760, "21716926": 760, "get_prob": 760, "099609375": 760, "get_axi": 760, "number_positional_argu": 760, "bodi": 760, "possibli": [760, 790], "test_valu": [760, 762], "enough": [760, 775, 776, 777], "justifi": 760, "unduli": 760, "labori": 760, "straightforward": [760, 776], "report": 760, "test_demo": 760, "failing_test": 760, "traceback": 760, "assertionerror": 760, "shrink": 760, "prescrib": 760, "behavior": [760, 768, 769, 773, 790], "identifi": 760, "closest": 760, "checkout": 760, "scratch": 760, "databas": 760, "therebi": 760, "event": [760, 1180], "test_gelu": 760, "test_fil": 760, "brief": 760, "phase": [760, 790], "notabl": 760, "displai": [760, 768, 776], "verbos": [760, 773, 1180], "newer": 760, "max_exampl": 760, "impact": [760, 777], "deadlin": 760, "weird": 760, "truth": [760, 761], "opt": [760, 765, 769, 771], "suffic": [760, 766], "systemat": 760, "safeguard": 760, "inabl": 760, "num_gpu": [760, 770], "test_result_typ": 760, "bfloat16": [760, 769], "9090909090909091": 760, "lax": [761, 762, 778, 790], "categoris": 761, "unsupported_dtyp": [761, 769], "mathematical_funct": 761, "arithmetic_oper": 761, "same_kind": [761, 762], "subok": [761, 762], "as_ivy_dtyp": 761, "mathemat": 761, "recov": 761, "obtain": 761, "trigonometric_funct": 761, "pointwise_op": 761, "meet": 761, "criteria": 761, "incorpor": [761, 776], "resembl": 761, "omiss": 761, "median": 761, "heavili": [761, 766, 790], "light": [761, 763, 790, 1179], "sensibl": 761, "decis": [761, 768, 773, 775], "deliber": 761, "timelin": 761, "heavi": [761, 762], "logicaland": 761, "addition": [761, 768, 771], "anywai": [761, 766, 767], "supported_dtyp": [761, 769], "counterpart": [761, 766, 768], "deal": [761, 763, 790], "_classes_to_ivy_class": 761, "test_frontend": [761, 762], "test_": 761, "pair": 761, "test_numpi": [761, 762], "numpy_classes_to_ivy_class": 761, "_novalu": 761, "_novaluetyp": 761, "_global": 761, "obviou": [761, 776], "pick": [761, 762], "mimic": 761, "record": [761, 790], "nativeclass": 761, "_native_class": 761, "test_frontend_funct": [761, 762], "background": 761, "keep_dim": 761, "novalu": 761, "youtub": 761, "jump": 762, "knowledg": 762, "function_wrap": 762, "lift": 762, "np_frontend_help": 762, "valid_numeric_dtyp": 762, "fn_tree": 762, "nn": [762, 778, 1180], "test_jax": 762, "test_jax_lax_oper": 762, "available_dtyp": 762, "ivy_jax": 762, "test_jax_lax_tan": 762, "as_variable_flag": 762, "with_out": [762, 766], "native_array_flag": 762, "test_mathematical_funct": 762, "test_np_trigonometric_funct": 762, "test_numpy_tan": 762, "handle_where_and_array_bool": 762, "test_tensorflow": 762, "test_tf_funct": 762, "ivy_tf": 762, "test_tensorflow_tan": 762, "test_torch": 762, "test_pointwise_op": 762, "intersect": [762, 789], "ivy_torch": 762, "test_torch_tan": 762, "_dtype": [762, 775], "list_of_length": 762, "_fill_valu": 762, "elif": [762, 771], "max_dim_s": 762, "test_jax_lax_ful": 762, "uint": [762, 769], "creation_routin": 762, "test_from_shape_or_valu": 762, "test_numpy_ful": 762, "test_tensorflow_ful": 762, "discrep": 762, "test_creation_op": 762, "_requires_grad": 762, "requires_grad": [762, 765], "test_torch_ful": 762, "accommod": 762, "unsign": [762, 773], "categor": [763, 770], "venn": 763, "diagram": 763, "log_pr": [763, 768, 771], "array_arg": 763, "whatsoev": [763, 768, 1179], "cache_fn": 763, "concurr": [763, 768], "modif": 763, "handle_nest": [763, 766, 768, 773], "group": [763, 768], "set_default_dtyp": [763, 769], "default_dtyp": [763, 769], "get_all_arrays_on_dev": 763, "get_backend": [763, 765], "nested_map": 763, "index_nest": 763, "implicit_backend": [765, 773], "__dict__": [765, 773], "ivy_original_dict": [765, 773], "unmodifi": [765, 769], "unset_backend": 765, "unset": [765, 773], "fallback": 765, "backend_handl": [765, 773, 1180], "layout": 765, "memory_format": 765, "preserve_format": 765, "weren": 765, "Not": [765, 776, 777, 790], "vast": [765, 769], "minor": [765, 773, 790], "fn_name_v_1p12_and_abov": 765, "similarli": [765, 769, 775], "fn_name_v_1p01_to_1p1": 765, "wrapper": [766, 767, 768, 769, 771, 775, 1179], "inputs_to_native_arrai": [766, 767], "inputs_to_ivy_arrai": 766, "nearli": 766, "facilit": 766, "integer_array_to_float": 766, "arbitrarili": [766, 768, 776], "test_gradi": 766, "topic": [766, 775], "_data": [767, 775], "organiz": [767, 768], "inherit": [767, 768, 775, 790, 1179], "bear": [767, 768, 769], "necessarili": [767, 768], "although": [767, 768], "underpin": [767, 768, 773], "programmat": [767, 768], "backup": [767, 768], "accident": [767, 768], "absent": [767, 768], "perk": [767, 768], "auto": [767, 768, 776], "throw": [767, 769, 775], "imposs": 767, "coupl": [767, 775, 777], "secondli": [767, 769], "five": [768, 776], "__repr__": 768, "control": [768, 769, 771, 775, 776, 789, 1179], "__getattr__": 768, "underli": 768, "__setattr__": 768, "__contains__": 768, "__getstate__": 768, "__setstate__": 768, "unpickl": 768, "lefthand": 768, "righthand": 768, "presenc": [768, 771], "implicitli": [768, 773], "intuit": [768, 776, 777], "chronolog": 768, "had": [768, 771], "sequenti": [768, 777], "flow": [768, 789], "implic": 768, "eager": [768, 790], "children": 768, "shallowest": 768, "deepest": 768, "all_dtyp": 769, "all_numeric_dtyp": 769, "all_int_dtyp": 769, "all_float_dtyp": 769, "thirdli": 769, "native_float32": 769, "importantli": [769, 775, 778, 789], "arguabl": [769, 770], "compound": 769, "overflow": 769, "default_int_dtyp": 769, "default_float_dtyp": 769, "settabl": [769, 770], "set_default_int_dtyp": 769, "set_default_float_dtyp": 769, "arang": [769, 1180], "mx": [769, 770, 771, 1180], "nd": [769, 770, 771, 1180], "deleg": 769, "shape_to_tupl": 769, "unment": 769, "function_supported_dtyp": 769, "function_unsupported_dtyp": 769, "respest": 769, "invalid_dtyp": 769, "lack": [769, 771], "patch": 769, "84530": 769, "unwarr": 769, "risk": 769, "needlessli": 769, "bloat": 769, "slight": [769, 777], "downsid": 769, "inflat": 769, "donot": 769, "idx": [770, 775], "tpu": 770, "get_all_ivy_arrays_on_dev": 770, "aliv": 770, "total_mem_on_dev": 770, "dev_util": 770, "num_cpu_cor": 770, "default_devic": 770, "dual": 770, "thrown": [770, 790], "set_default_devic": 770, "program": 771, "strictli": 771, "ration": 771, "speak": 771, "subtli": 771, "x_nativ": 771, "val_n": 771, "unspecifi": 771, "predominantli": [771, 789], "support_native_out": 771, "_handle_0_dim_output": 771, "_wrap_fn": 771, "linalg": [771, 1180], "dim0": 771, "len": [771, 775, 778], "dim1": 771, "maxim": [771, 773], "inner": 771, "third": [771, 790], "leverag": 771, "capabl": 771, "input_arrai": 771, "sound": 772, "fledg": [773, 774], "syntact": [773, 778], "fit": 773, "logspac": 773, "construct": [773, 777, 778], "power_seq": 773, "linspac": [773, 1180], "resid": [773, 777], "devicearrai": [773, 775], "face": 773, "backend_stack": 773, "cprint": 773, "_determine_backend_from_arg": 773, "current_backend_str": [773, 775], "importlib": 773, "import_modul": 773, "_backend_dict": 773, "illustr": [773, 789], "un": 773, "unrol": [773, 776], "lstm": 773, "cell": 773, "hidden": [773, 777], "recurr": 773, "timestep": 773, "x_shape": 773, "input_channel": [773, 777], "x_flat": 773, "wi": 773, "wi_x": 773, "wii_x": 773, "wif_x": 773, "wig_x": 773, "wio_x": 773, "wh": 773, "ht": 773, "ct": 773, "hts_list": 773, "wii_xt": 773, "wif_xt": 773, "wig_xt": 773, "wio_xt": 773, "zip": 773, "htm1": 773, "ctm1": 773, "wh_htm1": 773, "whi_htm1": 773, "whf_htm1": 773, "whg_htm1": 773, "who_htm1": 773, "ft": 773, "gt": 773, "ot": 773, "offici": 773, "reliabl": 773, "sacrific": 773, "hear": 773, "virtu": 773, "pure_ivi": 773, "compile_graph": [773, 778], "pure_torch": 773, "cat": [773, 778], "backbon": [773, 776], "_layer": 773, "super": [773, 776, 777, 778], "random_unifrom": 773, "unclean": 773, "wx": 773, "temp": 773, "torchscript": [773, 1179], "example_input": 773, "static_argnum": 773, "static_argnam": 773, "jit": [773, 790], "primit": [774, 790], "upcom": 774, "hierarch": [774, 776, 777], "_init": 775, "_shape": 775, "_size": 775, "functool": 775, "mul": 775, "_devic": 775, "_dev_str": 775, "as_ivy_dev": 775, "_pre_repr": 775, "_post_repr": 775, "framework_str": 775, "_is_vari": 775, "noinspect": 775, "pypep8nam": 775, "answer": [775, 790], "typeerror": 775, "immut": 775, "claim": 775, "truli": 775, "_native_wrapp": 775, "attributeerror": 775, "genuin": 775, "some_method": 775, "rewritten": 775, "__pow__": 775, "strang": 775, "enforc": 775, "compartment": 775, "public": 775, "newshap": 775, "new_shap": 775, "tidi": 775, "shorter": 775, "crystal": 775, "50": 775, "ton": 776, "ado": [776, 777], "incredibli": [776, 790], "soup": 776, "walk": [776, 777], "dct": 776, "cnt": 776, "combo": [776, 1180, 1186], "1000": 776, "3333335": 776, "Or": 776, "grad": [776, 777, 778, 1180], "delimit": 776, "autocomplet": 776, "midwai": 776, "agent": 776, "total_spe": 776, "total_height": 776, "total_width": 776, "ag": 776, "tot": 776, "total_": 776, "total_h": 776, "cnt0": 776, "cnt1": 776, "diff_0": 776, "diff_1": 776, "config0": 776, "config1": 776, "decod": 776, "l0": 776, "l1": 776, "truncat": 776, "decoder__l0": 776, "decoder__l1": 776, "encoder__l0": 776, "encoder__l1": 776, "height": 776, "l0__b": 776, "l0__w": 776, "l1__b": 776, "l1__w": 776, "printabl": 776, "foresight": 776, "untidili": 776, "update_ag": 776, "normalize_img": 776, "img": 776, "img_max": 776, "reduce_max": [776, 1180], "img_min": 776, "reduce_min": [776, 1180], "img_rang": 776, "agent_posit": 776, "agent_veloc": 776, "agent_cam_front_rgb": 776, "agent_cam_front_depth": 776, "agent_cam_rear_rgb": 776, "agent_cam_rear_depth": 776, "agent_cam_lidar": 776, "cleaner": 776, "camera": 776, "front_rgb": 776, "front_depth": 776, "rear_rgb": 776, "rear_depth": 776, "lidar": 776, "rgb": 776, "rear": 776, "veloc": 776, "cam": 776, "cam_max": 776, "cam_min": 776, "cam_rang": 776, "Of": 776, "perman": 776, "afterward": 776, "thread": 776, "pretti": 776, "dataload": [776, 788, 1180], "_cnt": 776, "img_": 776, "_dataset_s": 776, "_batch_siz": 776, "_count": [776, 777], "__next__": 776, "filenam": 776, "img_fnam": 776, "fname": 776, "loaded_img": 776, "cv2": 776, "imread": 776, "from_numpi": 776, "loader": [776, 790], "batch_slic": 776, "mymodel": [776, 1180], "linear0": [776, 777, 1180], "linear1": [776, 777, 1180], "x_in": [776, 777, 778, 1180], "loss_fn": [776, 777, 778, 1180], "reduce_mean": [776, 777, 778, 1180], "execute_with_gradi": [776, 777, 778, 790, 1180], "0145": 776, "grad_fn": 776, "addbackward0": 776, "_create_vari": 777, "output_channel": 777, "with_bia": 777, "_input_channel": 777, "_output_channel": 777, "_w_shape": 777, "_b_shape": 777, "_with_bia": 777, "729": 777, "396": 777, "764": 777, "872": 777, "211": 777, "439": 777, "nightmar": 777, "overcom": 777, "fc": 777, "v0": 777, "v1": 777, "key0": 777, "linear3": 777, "v2": 777, "counter": 777, "fed": 777, "decoupl": 777, "scheme": 777, "weight_initi": 777, "glorotuniform": 777, "bias_initi": 777, "_w_init": 777, "_b_init": 777, "create_vari": 777, "var_shap": 777, "fan_out": 777, "fan_in": 777, "fan_mod": 777, "fan_sum": 777, "misnom": 777, "saw": 777, "vanilla": 777, "compile_on_next_step": 777, "_beta1": 777, "_beta2": 777, "_epsilon": 777, "_mw": 777, "_vw": 777, "_first_pass": 777, "_should_compil": 777, "_step": 777, "new_v": 777, "_lr": 777, "_inplac": 777, "_stop_gradi": 777, "set_stat": 777, "clamp": 778, "clip_by_valu": 778, "captur": 778, "sparse_funct": 778, "num_class": 778, "ey": 778, "num_dim": 778, "new_axi": 778, "_linear": 778, "to_backend": 778, "jax_graph": 778, "to_ivy_modul": 778, "thinli": 778, "whilst": [778, 1179], "to_haiku_modul": 778, "hk": 778, "loss_fn_t": 778, "transform": [778, 789, 1179], "without_apply_rng": 778, "rng": 778, "prngkei": 778, "init": 778, "update_rul": 778, "tree_multimap": 778, "robot": [788, 1180], "focus": 789, "perfect": 789, "3d": 789, "differenti": 789, "orient": 789, "pose": 789, "euler": 789, "quaternion": 789, "rotat": 789, "ivy_mech": 789, "target_facing_rotation_matrix": 789, "polar_to_cartesian_coord": 789, "ordin": 789, "warp": 789, "optic": 789, "voxel": 789, "ivy_vis": 789, "coords_to_voxel_grid": 789, "render_pixel_coord": 789, "neural": [789, 1180], "radianc": 789, "nerf": 789, "trajectori": 789, "motion": 789, "plan": [789, 1180], "mobil": 789, "sample_spline_path": 789, "rigidmobil": 789, "sample_bodi": 789, "drone": 789, "sample_link": 789, "openai": 789, "swimmer": 789, "reward": 789, "supervis": 789, "reinforc": 789, "door": [789, 790], "cartpol": 789, "mountain_car": 789, "pendulum": 789, "reacher": 789, "learnt": 789, "ture": 789, "ntm": 789, "egospher": 789, "spatial": 789, "esm": 789, "ivy_memori": 789, "egocentr": 789, "room": 789, "inspir": 789, "doubt": 790, "grate": 790, "probe": 790, "undergo": 790, "remark": 790, "surpris": 790, "lock": 790, "xla": [790, 1179], "gold": 790, "dex": 790, "ye": 790, "scan": 790, "tricki": [790, 1179], "predictor": 790, "tight": 790, "driver": 790, "schedul": 790, "dispatch": 790, "Will": 790, "ast": 790, "cond": 790, "jacobian": 790, "checkpoint": 790, "autodiff": 790, "shine": 790, "merci": 790, "autograd": 790, "cluster": 790, "compet": 790, "paradigm": 790, "parallelis": 790, "spmd": 790, "mixtur": 790, "expert": 790, "sophist": 790, "depart": 790, "routin": 790, "hundr": 790, "thousand": 790, "deepli": 790, "broadli": 790, "supplementari": 790, "reusabl": 790, "fanci": 790, "fusion": 790, "lose": 790, "vmap": 790, "pmap": 790, "overhead": 790, "ineffici": 790, "eventu": 790, "supplement": 790, "backdoor": 790, "callback": 790, "metric": 790, "somewhat": 790, "outsourc": 790, "nail": 1179, "retain": 1179, "funtion": 1179, "asset": 1179, "functiona": 1179, "scientist": 1179, "deploi": 1179, "faster": 1179, "correl": 1179, "analyz": 1179, "grow": 1180, "ai": 1180, "got": 1180, "colab": 1180, "sharp": 1180, "weekli": 1180, "favorit": 1180, "jax_concat": 1180, "tf_concat": 1180, "np_concat": 1180, "mx_concat": 1180, "torch_concat": 1180, "get_devic": 1180, "reduce_prod": 1180, "reduce_sum": 1180, "gradient_imag": 1180, "bilinear_resampl": 1180, "stack_imag": 1180, "conv2d": 1180, "neural_net": 1180, "ecosystem": [1180, 1186], "popular": [1180, 1186], "acceler": 1180, "articl": 1180, "lenton2021ivi": 1180, "inter": 1180, "lenton": 1180, "daniel": 1180, "pardo": 1180, "fabio": 1180, "falck": 1180, "fabian": 1180, "jame": 1180, "stephen": 1180, "clark": 1180, "ronald": 1180, "journal": 1180, "arxiv": 1180, "preprint": 1180, "2102": 1180, "02886": 1180, "2021": 1180}, "objects": {"ivy.array": [[0, 0, 0, "-", "activations"], [2, 0, 0, "-", "array"], [220, 0, 0, "-", "conversions"], [225, 0, 0, "-", "creation"], [227, 0, 0, "-", "data_type"], [229, 0, 0, "-", "device"], [231, 0, 0, "-", "elementwise"], [233, 0, 0, "-", "general"], [235, 0, 0, "-", "gradients"], [237, 0, 0, "-", "image"], [239, 0, 0, "-", "layers"], [241, 0, 0, "-", "linear_algebra"], [243, 0, 0, "-", "losses"], [245, 0, 0, "-", "manipulation"], [247, 0, 0, "-", "norms"], [249, 0, 0, "-", "random"], [251, 0, 0, "-", "searching"], [253, 0, 0, "-", "set"], [255, 0, 0, "-", "sorting"], [257, 0, 0, "-", "statistical"], [259, 0, 0, "-", "utility"], [261, 0, 0, "-", "wrapping"]], "ivy.array.activations": [[1, 1, 1, "", "ArrayWithActivations"]], "ivy.array.activations.ArrayWithActivations": [[1, 2, 1, "", "gelu"], [1, 2, 1, "", "leaky_relu"], [1, 2, 1, "", "relu"], [1, 2, 1, "", "sigmoid"], [1, 2, 1, "", "softmax"], [1, 2, 1, "", "softplus"]], "ivy.array.array": [[3, 1, 1, "", "Array"], [4, 1, 1, "", "Variable"]], "ivy.array.array.Array": [[3, 3, 1, "", "T"], [3, 2, 1, "", "__add__"], [3, 2, 1, "", "__init__"], [3, 2, 1, "", "__le__"], [3, 2, 1, "", "__radd__"], [3, 2, 1, "", "__rrshift__"], [3, 2, 1, "", "__rshift__"], [3, 3, 1, "", "data"], [3, 3, 1, "", "device"], [3, 3, 1, "", "dtype"], [3, 3, 1, "", "is_variable"], [3, 3, 1, "", "mT"], [3, 3, 1, "", "ndim"], [3, 3, 1, "", "shape"], [3, 3, 1, "", "size"]], "ivy.array.array.Variable": [[4, 2, 1, "", "__init__"]], "ivy.array.conversions": [[221, 4, 1, "", "args_to_ivy"], [222, 4, 1, "", "args_to_native"], [223, 4, 1, "", "to_ivy"], [224, 4, 1, "", "to_native"]], "ivy.array.creation": [[226, 1, 1, "", "ArrayWithCreation"]], "ivy.array.creation.ArrayWithCreation": [[226, 2, 1, "", "asarray"], [226, 2, 1, "", "empty_like"], [226, 2, 1, "", "from_dlpack"], [226, 2, 1, "", "full_like"], [226, 2, 1, "", "meshgrid"], [226, 2, 1, "", "native_array"], [226, 2, 1, "", "ones_like"], [226, 2, 1, "", "tril"], [226, 2, 1, "", "triu"], [226, 2, 1, "", "zeros_like"]], "ivy.array.data_type": [[228, 1, 1, "", "ArrayWithDataTypes"]], "ivy.array.data_type.ArrayWithDataTypes": [[228, 2, 1, "", "astype"], [228, 2, 1, "", "broadcast_arrays"], [228, 2, 1, "", "broadcast_to"], [228, 2, 1, "", "can_cast"], [228, 2, 1, "", "dtype"], [228, 2, 1, "", "finfo"], [228, 2, 1, "", "iinfo"], [228, 2, 1, "", "is_bool_dtype"], [228, 2, 1, "", "is_float_dtype"], [228, 2, 1, "", "is_int_dtype"], [228, 2, 1, "", "is_uint_dtype"], [228, 2, 1, "", "result_type"]], "ivy.array.device": [[230, 1, 1, "", "ArrayWithDevice"]], "ivy.array.device.ArrayWithDevice": [[230, 2, 1, "", "dev"], [230, 2, 1, "", "to_device"]], "ivy.array.elementwise": [[232, 1, 1, "", "ArrayWithElementwise"]], "ivy.array.elementwise.ArrayWithElementwise": [[232, 2, 1, "", "abs"], [232, 2, 1, "", "acos"], [232, 2, 1, "", "acosh"], [232, 2, 1, "", "add"], [232, 2, 1, "", "asin"], [232, 2, 1, "", "asinh"], [232, 2, 1, "", "atan"], [232, 2, 1, "", "atan2"], [232, 2, 1, "", "atanh"], [232, 2, 1, "", "bitwise_and"], [232, 2, 1, "", "bitwise_invert"], [232, 2, 1, "", "bitwise_left_shift"], [232, 2, 1, "", "bitwise_or"], [232, 2, 1, "", "bitwise_right_shift"], [232, 2, 1, "", "bitwise_xor"], [232, 2, 1, "", "ceil"], [232, 2, 1, "", "cos"], [232, 2, 1, "", "cosh"], [232, 2, 1, "", "divide"], [232, 2, 1, "", "equal"], [232, 2, 1, "", "erf"], [232, 2, 1, "", "exp"], [232, 2, 1, "", "expm1"], [232, 2, 1, "", "floor"], [232, 2, 1, "", "floor_divide"], [232, 2, 1, "", "floormod"], [232, 2, 1, "", "greater"], [232, 2, 1, "", "greater_equal"], [232, 2, 1, "", "isfinite"], [232, 2, 1, "", "isinf"], [232, 2, 1, "", "isnan"], [232, 2, 1, "", "less"], [232, 2, 1, "", "less_equal"], [232, 2, 1, "", "log"], [232, 2, 1, "", "log10"], [232, 2, 1, "", "log1p"], [232, 2, 1, "", "log2"], [232, 2, 1, "", "logaddexp"], [232, 2, 1, "", "logical_and"], [232, 2, 1, "", "logical_not"], [232, 2, 1, "", "logical_or"], [232, 2, 1, "", "logical_xor"], [232, 2, 1, "", "multiply"], [232, 2, 1, "", "negative"], [232, 2, 1, "", "not_equal"], [232, 2, 1, "", "positive"], [232, 2, 1, "", "pow"], [232, 2, 1, "", "remainder"], [232, 2, 1, "", "round"], [232, 2, 1, "", "sign"], [232, 2, 1, "", "sin"], [232, 2, 1, "", "sinh"], [232, 2, 1, "", "sqrt"], [232, 2, 1, "", "square"], [232, 2, 1, "", "subtract"], [232, 2, 1, "", "tan"], [232, 2, 1, "", "tanh"], [232, 2, 1, "", "trunc"]], "ivy.array.general": [[234, 1, 1, "", "ArrayWithGeneral"]], "ivy.array.general.ArrayWithGeneral": [[234, 2, 1, "", "all_equal"], [234, 2, 1, "", "array_equal"], [234, 2, 1, "", "arrays_equal"], [234, 2, 1, "", "assert_supports_inplace"], [234, 2, 1, "", "clip_matrix_norm"], [234, 2, 1, "", "clip_vector_norm"], [234, 2, 1, "", "copy_array"], [234, 2, 1, "", "cumprod"], [234, 2, 1, "", "cumsum"], [234, 2, 1, "", "default"], [234, 2, 1, "", "einops_rearrange"], [234, 2, 1, "", "einops_reduce"], [234, 2, 1, "", "einops_repeat"], [234, 2, 1, "", "exists"], [234, 2, 1, "", "fourier_encode"], [234, 2, 1, "", "gather"], [234, 2, 1, "", "gather_nd"], [234, 2, 1, "", "get_num_dims"], [234, 2, 1, "", "has_nans"], [234, 2, 1, "", "indices_where"], [234, 2, 1, "", "inplace_decrement"], [234, 2, 1, "", "inplace_increment"], [234, 2, 1, "", "inplace_update"], [234, 2, 1, "", "is_array"], [234, 2, 1, "", "is_ivy_array"], [234, 2, 1, "", "is_ivy_container"], [234, 2, 1, "", "is_native_array"], [234, 2, 1, "", "one_hot"], [234, 2, 1, "", "scatter_flat"], [234, 2, 1, "", "scatter_nd"], [234, 2, 1, "", "stable_divide"], [234, 2, 1, "", "stable_pow"], [234, 2, 1, "", "supports_inplace"], [234, 2, 1, "", "to_list"], [234, 2, 1, "", "to_numpy"], [234, 2, 1, "", "to_scalar"], [234, 2, 1, "", "unstack"], [234, 2, 1, "", "value_is_nan"]], "ivy.array.gradients": [[236, 1, 1, "", "ArrayWithGradients"]], "ivy.array.gradients.ArrayWithGradients": [[236, 2, 1, "", "adam_step"], [236, 2, 1, "", "adam_update"], [236, 2, 1, "", "gradient_descent_update"], [236, 2, 1, "", "is_variable"], [236, 2, 1, "", "lamb_update"], [236, 2, 1, "", "lars_update"], [236, 2, 1, "", "optimizer_update"], [236, 2, 1, "", "stop_gradient"], [236, 2, 1, "", "variable"], [236, 2, 1, "", "variable_data"]], "ivy.array.image": [[238, 1, 1, "", "ArrayWithImage"]], "ivy.array.layers": [[240, 1, 1, "", "ArrayWithLayers"]], "ivy.array.layers.ArrayWithLayers": [[240, 2, 1, "", "conv1d"], [240, 2, 1, "", "conv1d_transpose"], [240, 2, 1, "", "conv3d"], [240, 2, 1, "", "conv3d_transpose"], [240, 2, 1, "", "depthwise_conv2d"], [240, 2, 1, "", "dropout"], [240, 2, 1, "", "linear"], [240, 2, 1, "", "lstm_update"], [240, 2, 1, "", "multi_head_attention"], [240, 2, 1, "", "scaled_dot_product_attention"]], "ivy.array.linear_algebra": [[242, 1, 1, "", "ArrayWithLinearAlgebra"]], "ivy.array.linear_algebra.ArrayWithLinearAlgebra": [[242, 2, 1, "", "cholesky"], [242, 2, 1, "", "cross"], [242, 2, 1, "", "det"], [242, 2, 1, "", "diagonal"], [242, 2, 1, "", "eigh"], [242, 2, 1, "", "eigvalsh"], [242, 2, 1, "", "inv"], [242, 2, 1, "", "matmul"], [242, 2, 1, "", "matrix_norm"], [242, 2, 1, "", "matrix_rank"], [242, 2, 1, "", "matrix_transpose"], [242, 2, 1, "", "outer"], [242, 2, 1, "", "pinv"], [242, 2, 1, "", "qr"], [242, 2, 1, "", "solve"], [242, 2, 1, "", "svd"], [242, 2, 1, "", "svdvals"], [242, 2, 1, "", "tensordot"], [242, 2, 1, "", "trace"], [242, 2, 1, "", "vecdot"], [242, 2, 1, "", "vector_norm"], [242, 2, 1, "", "vector_to_skew_symmetric_matrix"]], "ivy.array.losses": [[244, 1, 1, "", "ArrayWithLosses"]], "ivy.array.losses.ArrayWithLosses": [[244, 2, 1, "", "binary_cross_entropy"], [244, 2, 1, "", "cross_entropy"], [244, 2, 1, "", "sparse_cross_entropy"]], "ivy.array.manipulation": [[246, 1, 1, "", "ArrayWithManipulation"]], "ivy.array.manipulation.ArrayWithManipulation": [[246, 2, 1, "", "clip"], [246, 2, 1, "", "concat"], [246, 2, 1, "", "constant_pad"], [246, 2, 1, "", "expand_dims"], [246, 2, 1, "", "flip"], [246, 2, 1, "", "permute_dims"], [246, 2, 1, "", "repeat"], [246, 2, 1, "", "reshape"], [246, 2, 1, "", "roll"], [246, 2, 1, "", "split"], [246, 2, 1, "", "squeeze"], [246, 2, 1, "", "stack"], [246, 2, 1, "", "swapaxes"], [246, 2, 1, "", "tile"], [246, 2, 1, "", "zero_pad"]], "ivy.array.norms": [[248, 1, 1, "", "ArrayWithNorms"]], "ivy.array.norms.ArrayWithNorms": [[248, 2, 1, "", "layer_norm"]], "ivy.array.random": [[250, 1, 1, "", "ArrayWithRandom"]], "ivy.array.random.ArrayWithRandom": [[250, 2, 1, "", "multinomial"], [250, 2, 1, "", "randint"], [250, 2, 1, "", "random_normal"], [250, 2, 1, "", "random_uniform"], [250, 2, 1, "", "shuffle"]], "ivy.array.searching": [[252, 1, 1, "", "ArrayWithSearching"]], "ivy.array.searching.ArrayWithSearching": [[252, 2, 1, "", "argmax"], [252, 2, 1, "", "argmin"], [252, 2, 1, "", "nonzero"], [252, 2, 1, "", "where"]], "ivy.array.set": [[254, 1, 1, "", "ArrayWithSet"]], "ivy.array.set.ArrayWithSet": [[254, 2, 1, "", "unique_all"], [254, 2, 1, "", "unique_counts"], [254, 2, 1, "", "unique_inverse"], [254, 2, 1, "", "unique_values"]], "ivy.array.sorting": [[256, 1, 1, "", "ArrayWithSorting"]], "ivy.array.sorting.ArrayWithSorting": [[256, 2, 1, "", "argsort"], [256, 2, 1, "", "searchsorted"], [256, 2, 1, "", "sort"]], "ivy.array.statistical": [[258, 1, 1, "", "ArrayWithStatistical"]], "ivy.array.statistical.ArrayWithStatistical": [[258, 2, 1, "", "einsum"], [258, 2, 1, "", "max"], [258, 2, 1, "", "mean"], [258, 2, 1, "", "min"], [258, 2, 1, "", "prod"], [258, 2, 1, "", "std"], [258, 2, 1, "", "sum"], [258, 2, 1, "", "var"]], "ivy.array.utility": [[260, 1, 1, "", "ArrayWithUtility"]], "ivy.array.utility.ArrayWithUtility": [[260, 2, 1, "", "all"], [260, 2, 1, "", "any"]], "ivy.array.wrapping": [[262, 4, 1, "", "add_ivy_array_instance_methods"]], "ivy.container": [[281, 0, 0, "-", "activations"], [283, 0, 0, "-", "base"], [707, 0, 0, "-", "conversions"], [709, 0, 0, "-", "creation"], [711, 0, 0, "-", "data_type"], [713, 0, 0, "-", "device"], [715, 0, 0, "-", "elementwise"], [745, 0, 0, "-", "wrapping"]], "ivy.container.activations": [[282, 1, 1, "", "ContainerWithActivations"]], "ivy.container.activations.ContainerWithActivations": [[282, 2, 1, "", "gelu"], [282, 2, 1, "", "leaky_relu"], [282, 2, 1, "", "relu"], [282, 2, 1, "", "sigmoid"], [282, 2, 1, "", "softmax"], [282, 2, 1, "", "softplus"], [282, 2, 1, "", "static_gelu"], [282, 2, 1, "", "static_leaky_relu"], [282, 2, 1, "", "static_relu"], [282, 2, 1, "", "static_sigmoid"], [282, 2, 1, "", "static_softmax"], [282, 2, 1, "", "static_softplus"]], "ivy.container.base": [[284, 1, 1, "", "ContainerBase"]], "ivy.container.base.ContainerBase": [[284, 2, 1, "", "__getitem__"], [284, 2, 1, "", "__init__"], [284, 2, 1, "", "__setitem__"], [284, 2, 1, "", "all_false"], [284, 2, 1, "", "all_key_chains"], [284, 2, 1, "", "all_true"], [284, 2, 1, "", "as_bools"], [284, 2, 1, "", "assert_contains_sub_container"], [284, 2, 1, "", "assert_contains_sub_structure"], [284, 2, 1, "", "assert_identical"], [284, 2, 1, "", "assert_identical_structure"], [284, 2, 1, "", "at_key_chain"], [284, 2, 1, "", "at_key_chains"], [284, 2, 1, "", "at_keys"], [284, 2, 1, "", "combine"], [284, 2, 1, "", "common_key_chains"], [284, 3, 1, "", "config"], [284, 2, 1, "", "cont_inplace_update"], [284, 2, 1, "", "contains_sub_container"], [284, 2, 1, "", "contains_sub_structure"], [284, 2, 1, "", "copy"], [284, 2, 1, "", "create_if_absent"], [284, 2, 1, "", "cutoff_at_depth"], [284, 2, 1, "", "cutoff_at_height"], [284, 2, 1, "", "deep_copy"], [284, 3, 1, "", "dev"], [284, 3, 1, "", "dev_str"], [284, 2, 1, "", "diff"], [284, 2, 1, "", "duplicate_array_keychains"], [284, 2, 1, "", "find_sub_container"], [284, 2, 1, "", "find_sub_structure"], [284, 2, 1, "", "flatten_key_chain"], [284, 2, 1, "", "flatten_key_chains"], [284, 2, 1, "", "format_key_chains"], [284, 2, 1, "", "from_disk_as_hdf5"], [284, 2, 1, "", "from_disk_as_json"], [284, 2, 1, "", "from_disk_as_pickled"], [284, 2, 1, "", "from_flat_list"], [284, 2, 1, "", "h5_file_size"], [284, 2, 1, "", "handle_inplace"], [284, 2, 1, "", "has_key"], [284, 2, 1, "", "has_key_chain"], [284, 2, 1, "", "has_nans"], [284, 2, 1, "", "identical"], [284, 2, 1, "", "identical_array_shapes"], [284, 2, 1, "", "identical_configs"], [284, 2, 1, "", "identical_structure"], [284, 2, 1, "", "if_exists"], [284, 3, 1, "", "ivy"], [284, 2, 1, "", "key_chains_containing"], [284, 2, 1, "", "list_join"], [284, 2, 1, "", "list_stack"], [284, 2, 1, "", "map"], [284, 2, 1, "", "map_conts"], [284, 3, 1, "", "max_depth"], [284, 2, 1, "", "multi_map"], [284, 2, 1, "", "multi_map_in_static_method"], [284, 2, 1, "", "num_arrays"], [284, 2, 1, "", "overwrite_at_key_chain"], [284, 2, 1, "", "overwrite_at_key_chains"], [284, 2, 1, "", "prune_empty"], [284, 2, 1, "", "prune_key_chain"], [284, 2, 1, "", "prune_key_chains"], [284, 2, 1, "", "prune_key_from_key_chains"], [284, 2, 1, "", "prune_keys"], [284, 2, 1, "", "prune_keys_from_key_chains"], [284, 2, 1, "", "reduce"], [284, 2, 1, "", "remove_key_length_limit"], [284, 2, 1, "", "remove_print_limit"], [284, 2, 1, "", "reshape_like"], [284, 2, 1, "", "restructure"], [284, 2, 1, "", "restructure_key_chains"], [284, 2, 1, "", "set_at_key_chain"], [284, 2, 1, "", "set_at_key_chains"], [284, 2, 1, "", "set_at_keys"], [284, 2, 1, "", "set_framework"], [284, 2, 1, "", "set_ivy_backend"], [284, 3, 1, "", "shape"], [284, 3, 1, "", "shapes"], [284, 2, 1, "", "show"], [284, 2, 1, "", "show_sub_container"], [284, 2, 1, "", "shuffle_h5_file"], [284, 2, 1, "", "size_ordered_arrays"], [284, 2, 1, "", "slice_keys"], [284, 2, 1, "", "slice_via_key"], [284, 2, 1, "", "sort_by_key"], [284, 2, 1, "", "split_conts"], [284, 2, 1, "", "structural_diff"], [284, 2, 1, "", "to_dict"], [284, 2, 1, "", "to_disk_as_hdf5"], [284, 2, 1, "", "to_disk_as_json"], [284, 2, 1, "", "to_disk_as_pickled"], [284, 2, 1, "", "to_flat_list"], [284, 2, 1, "", "to_iterator"], [284, 2, 1, "", "to_iterator_keys"], [284, 2, 1, "", "to_iterator_values"], [284, 2, 1, "", "to_jsonable"], [284, 2, 1, "", "to_nested_list"], [284, 2, 1, "", "to_raw"], [284, 2, 1, "", "trim_key"], [284, 2, 1, "", "try_kc"], [284, 2, 1, "", "unify"], [284, 2, 1, "", "unstack_conts"], [284, 2, 1, "", "update_config"], [284, 2, 1, "", "with_default_key_color"], [284, 2, 1, "", "with_entries_as_lists"], [284, 2, 1, "", "with_ivy_backend"], [284, 2, 1, "", "with_key_length_limit"], [284, 2, 1, "", "with_print_indent"], [284, 2, 1, "", "with_print_limit"], [284, 2, 1, "", "with_print_line_spacing"]], "ivy.container.conversions": [[708, 1, 1, "", "ContainerWithConversions"]], "ivy.container.conversions.ContainerWithConversions": [[708, 2, 1, "", "static_to_ivy"], [708, 2, 1, "", "static_to_native"], [708, 2, 1, "", "to_ivy"], [708, 2, 1, "", "to_native"]], "ivy.container.creation": [[710, 1, 1, "", "ContainerWithCreation"]], "ivy.container.creation.ContainerWithCreation": [[710, 2, 1, "", "empty_like"], [710, 2, 1, "", "from_dlpack"], [710, 2, 1, "", "full_like"], [710, 2, 1, "", "meshgrid"], [710, 2, 1, "", "native_array"], [710, 2, 1, "", "ones_like"], [710, 2, 1, "", "static_arange"], [710, 2, 1, "", "static_asarray"], [710, 2, 1, "", "static_empty_like"], [710, 2, 1, "", "static_eye"], [710, 2, 1, "", "static_from_dlpack"], [710, 2, 1, "", "static_full_like"], [710, 2, 1, "", "static_linspace"], [710, 2, 1, "", "static_logspace"], [710, 2, 1, "", "static_meshgrid"], [710, 2, 1, "", "static_native_array"], [710, 2, 1, "", "static_ones"], [710, 2, 1, "", "static_ones_like"], [710, 2, 1, "", "static_tril"], [710, 2, 1, "", "static_triu"], [710, 2, 1, "", "static_zeros"], [710, 2, 1, "", "static_zeros_like"], [710, 2, 1, "", "tril"], [710, 2, 1, "", "triu"], [710, 2, 1, "", "zeros_like"]], "ivy.container.data_type": [[712, 1, 1, "", "ContainerWithDataTypes"]], "ivy.container.data_type.ContainerWithDataTypes": [[712, 2, 1, "", "astype"], [712, 2, 1, "", "broadcast_arrays"], [712, 2, 1, "", "broadcast_to"], [712, 2, 1, "", "can_cast"], [712, 2, 1, "", "dtype"], [712, 2, 1, "", "finfo"], [712, 2, 1, "", "iinfo"], [712, 2, 1, "", "is_bool_dtype"], [712, 2, 1, "", "is_float_dtype"], [712, 2, 1, "", "is_int_dtype"], [712, 2, 1, "", "is_uint_dtype"], [712, 2, 1, "", "result_type"], [712, 2, 1, "", "static_astype"], [712, 2, 1, "", "static_broadcast_arrays"], [712, 2, 1, "", "static_broadcast_to"], [712, 2, 1, "", "static_can_cast"], [712, 2, 1, "", "static_default_float_dtype"], [712, 2, 1, "", "static_dtype"], [712, 2, 1, "", "static_finfo"], [712, 2, 1, "", "static_function_supported_dtypes"], [712, 2, 1, "", "static_function_unsupported_dtypes"], [712, 2, 1, "", "static_iinfo"], [712, 2, 1, "", "static_is_bool_dtype"], [712, 2, 1, "", "static_is_float_dtype"], [712, 2, 1, "", "static_is_int_dtype"], [712, 2, 1, "", "static_is_uint_dtype"], [712, 2, 1, "", "static_result_type"]], "ivy.container.device": [[714, 1, 1, "", "ContainerWithDevice"]], "ivy.container.device.ContainerWithDevice": [[714, 2, 1, "", "dev"], [714, 2, 1, "", "static_dev"], [714, 2, 1, "", "static_to_device"], [714, 2, 1, "", "to_device"]], "ivy.container.elementwise": [[716, 1, 1, "", "ContainerWithElementwise"]], "ivy.container.elementwise.ContainerWithElementwise": [[716, 2, 1, "", "abs"], [716, 2, 1, "", "acos"], [716, 2, 1, "", "acosh"], [716, 2, 1, "", "add"], [716, 2, 1, "", "asin"], [716, 2, 1, "", "asinh"], [716, 2, 1, "", "atan"], [716, 2, 1, "", "atan2"], [716, 2, 1, "", "atanh"], [716, 2, 1, "", "bitwise_and"], [716, 2, 1, "", "bitwise_invert"], [716, 2, 1, "", "bitwise_left_shift"], [716, 2, 1, "", "bitwise_or"], [716, 2, 1, "", "bitwise_right_shift"], [716, 2, 1, "", "bitwise_xor"], [716, 2, 1, "", "ceil"], [716, 2, 1, "", "cos"], [716, 2, 1, "", "cosh"], [716, 2, 1, "", "divide"], [716, 2, 1, "", "equal"], [716, 2, 1, "", "erf"], [716, 2, 1, "", "exp"], [716, 2, 1, "", "expm1"], [716, 2, 1, "", "floor"], [716, 2, 1, "", "floor_divide"], [716, 2, 1, "", "floormod"], [716, 2, 1, "", "greater"], [716, 2, 1, "", "greater_equal"], [716, 2, 1, "", "isfinite"], [716, 2, 1, "", "isinf"], [716, 2, 1, "", "isnan"], [716, 2, 1, "", "less"], [716, 2, 1, "", "less_equal"], [716, 2, 1, "", "log"], [716, 2, 1, "", "log10"], [716, 2, 1, "", "log1p"], [716, 2, 1, "", "log2"], [716, 2, 1, "", "logaddexp"], [716, 2, 1, "", "logical_and"], [716, 2, 1, "", "logical_not"], [716, 2, 1, "", "logical_or"], [716, 2, 1, "", "logical_xor"], [716, 2, 1, "", "maximum"], [716, 2, 1, "", "minimum"], [716, 2, 1, "", "multiply"], [716, 2, 1, "", "negative"], [716, 2, 1, "", "not_equal"], [716, 2, 1, "", "positive"], [716, 2, 1, "", "pow"], [716, 2, 1, "", "remainder"], [716, 2, 1, "", "round"], [716, 2, 1, "", "sign"], [716, 2, 1, "", "sin"], [716, 2, 1, "", "sinh"], [716, 2, 1, "", "sqrt"], [716, 2, 1, "", "square"], [716, 2, 1, "", "static_abs"], [716, 2, 1, "", "static_acos"], [716, 2, 1, "", "static_acosh"], [716, 2, 1, "", "static_add"], [716, 2, 1, "", "static_asin"], [716, 2, 1, "", "static_asinh"], [716, 2, 1, "", "static_atan"], [716, 2, 1, "", "static_atan2"], [716, 2, 1, "", "static_atanh"], [716, 2, 1, "", "static_bitwise_and"], [716, 2, 1, "", "static_bitwise_invert"], [716, 2, 1, "", "static_bitwise_left_shift"], [716, 2, 1, "", "static_bitwise_or"], [716, 2, 1, "", "static_bitwise_right_shift"], [716, 2, 1, "", "static_bitwise_xor"], [716, 2, 1, "", "static_ceil"], [716, 2, 1, "", "static_cos"], [716, 2, 1, "", "static_cosh"], [716, 2, 1, "", "static_divide"], [716, 2, 1, "", "static_equal"], [716, 2, 1, "", "static_erf"], [716, 2, 1, "", "static_exp"], [716, 2, 1, "", "static_expm1"], [716, 2, 1, "", "static_floor"], [716, 2, 1, "", "static_floor_divide"], [716, 2, 1, "", "static_floormod"], [716, 2, 1, "", "static_greater"], [716, 2, 1, "", "static_greater_equal"], [716, 2, 1, "", "static_isfinite"], [716, 2, 1, "", "static_isinf"], [716, 2, 1, "", "static_isnan"], [716, 2, 1, "", "static_less"], [716, 2, 1, "", "static_less_equal"], [716, 2, 1, "", "static_log"], [716, 2, 1, "", "static_log10"], [716, 2, 1, "", "static_log1p"], [716, 2, 1, "", "static_log2"], [716, 2, 1, "", "static_logaddexp"], [716, 2, 1, "", "static_logical_and"], [716, 2, 1, "", "static_logical_not"], [716, 2, 1, "", "static_logical_or"], [716, 2, 1, "", "static_logical_xor"], [716, 2, 1, "", "static_maximum"], [716, 2, 1, "", "static_minimum"], [716, 2, 1, "", "static_multiply"], [716, 2, 1, "", "static_negative"], [716, 2, 1, "", "static_not_equal"], [716, 2, 1, "", "static_positive"], [716, 2, 1, "", "static_pow"], [716, 2, 1, "", "static_remainder"], [716, 2, 1, "", "static_round"], [716, 2, 1, "", "static_sign"], [716, 2, 1, "", "static_sin"], [716, 2, 1, "", "static_sinh"], [716, 2, 1, "", "static_sqrt"], [716, 2, 1, "", "static_square"], [716, 2, 1, "", "static_subtract"], [716, 2, 1, "", "static_tan"], [716, 2, 1, "", "static_tanh"], [716, 2, 1, "", "static_trunc"], [716, 2, 1, "", "subtract"], [716, 2, 1, "", "tan"], [716, 2, 1, "", "tanh"], [716, 2, 1, "", "trunc"]], "ivy.container.wrapping": [[746, 4, 1, "", "add_ivy_container_instance_methods"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:method", "3": "py:property", "4": "py:function"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "method", "Python method"], "3": ["py", "property", "Python property"], "4": ["py", "function", "Python function"]}, "titleterms": {"activ": [0, 281, 803, 1187], "arraywithactiv": 1, "arrai": [2, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 279, 756, 759, 767, 769, 775], "variabl": [4, 212, 699, 1059], "method": [5, 287, 768, 775, 776], "ab": [6, 288, 899], "aco": [7, 289, 900], "acosh": [8, 290, 901], "adam_step": [9, 291, 1045], "adam_upd": [10, 292, 1046], "add": [11, 293, 758, 902], "add_ivy_array_instance_method": [12, 262], "all": [13, 295, 1177], "all_equ": [14, 296, 966], "ani": [15, 297, 1178], "argmax": [16, 298, 1154], "argmin": [17, 299, 1155], "argsort": [18, 300, 1164], "array_equ": [19, 969], "arrays_equ": [20, 970], "asarrai": [21, 815], "asin": [22, 301, 903], "asinh": [23, 302, 904], "assert_supports_inplac": [24, 303, 971], "astyp": [25, 304, 835], "atan": [26, 305, 905], "atan2": [27, 306, 906], "atanh": [28, 307, 907], "binary_cross_entropi": [29, 308, 1103], "bitwise_and": [30, 309, 908], "bitwise_invert": [31, 310, 909], "bitwise_left_shift": [32, 311, 910], "bitwise_or": [33, 312, 911], "bitwise_right_shift": [34, 313, 912], "bitwise_xor": [35, 314, 913], "broadcast_arrai": [36, 315, 836], "broadcast_to": [37, 316, 837], "can_cast": [38, 317, 838], "ceil": [39, 318, 914], "choleski": [40, 319, 1078], "clip": [41, 320, 1107], "clip_matrix_norm": [42, 321, 973], "clip_vector_norm": [43, 322, 974], "concat": [44, 323, 1108], "constant_pad": [45, 324, 1109], "conv1d": [46, 325, 1063, 1203], "conv1d_transpos": [47, 326, 1064], "conv3d": [48, 329, 1067, 1207], "conv3d_transpos": [49, 330, 1068], "copy_arrai": [50, 976], "co": [51, 331, 915], "cosh": [52, 332, 916], "cross": [53, 333, 1079], "cross_entropi": [54, 334, 1104], "cumprod": [55, 335, 977], "cumsum": [56, 336, 978], "default": [57, 980], "depthwise_conv2d": [58, 337, 1070], "det": [59, 338, 1080], "dev": [60, 339, 876], "diagon": [61, 340, 1081], "divid": [62, 341, 917], "dropout": [63, 342, 1071, 1210], "dtype": [64, 343, 756, 845], "eigh": [65, 344, 1082], "eigvalsh": [66, 1083], "einops_rearrang": [67, 345, 981], "einops_reduc": [68, 346, 982], "einops_repeat": [69, 347, 983], "einsum": [70, 348, 1168], "empty_lik": [71, 349, 817], "equal": [72, 350, 918], "erf": [73, 351, 919], "exist": [74, 984], "exp": [75, 352, 920], "expand_dim": [76, 353, 1110], "expm1": [77, 354, 921], "finfo": [78, 355, 847], "flip": [79, 356, 1111], "floor": [80, 357, 922], "floor_divid": [81, 358, 923], "floormod": [82, 359, 924], "fourier_encod": [83, 360, 985], "from_dlpack": [84, 361, 819], "full_lik": [85, 362, 821], "gather": [86, 363, 988], "gather_nd": [87, 364, 989], "gelu": [88, 365, 804, 1189], "get_num_dim": [89, 995], "gradient_descent_upd": [90, 366, 1049], "greater": [91, 367, 925], "greater_equ": [92, 368, 926], "has_nan": [93, 369, 999], "iinfo": [94, 370, 850], "indices_wher": [95, 371, 1000], "inplace_decr": [96, 372, 1002], "inplace_incr": [97, 373, 1003], "inplace_upd": [98, 374, 1004], "inv": [99, 375, 1084], "is_arrai": [100, 376, 1006, 1007, 1008], "is_bool_dtyp": [101, 377, 853], "is_float_dtyp": [102, 378, 854], "is_int_dtyp": [103, 379, 855], "is_ivy_arrai": [104, 380, 1009], "is_ivy_contain": [105, 381, 1010], "is_native_arrai": [106, 382, 1011], "is_uint_dtyp": [107, 383, 856], "is_vari": [108, 384, 1050], "isfinit": [109, 385, 927], "isinf": [110, 386, 928], "isnan": [111, 387, 929], "lamb_upd": [112, 388, 1052], "lars_upd": [113, 389, 1053], "layer_norm": [114, 390, 1145], "leaky_relu": [115, 391, 805], "less": [116, 392, 930], "less_equ": [117, 393, 931], "linear": [118, 241, 394, 725, 1073, 1077, 1212], "log": [119, 395, 748, 932], "log10": [120, 396, 933], "log1p": [121, 397, 934], "log2": [122, 398, 935], "logaddexp": [123, 399, 936], "logical_and": [124, 400, 937], "logical_not": [125, 401, 938], "logical_or": [126, 402, 939], "logical_xor": [127, 403, 940], "lstm_updat": [128, 404, 1074], "matmul": [129, 405, 1085], "matrix_norm": [130, 406, 1086], "matrix_rank": [131, 408, 1088], "matrix_transpos": [132, 409, 1089], "max": [133, 410, 1169], "mean": [134, 412, 1170], "meshgrid": [135, 413, 824], "min": [136, 414, 1171], "multi_head_attent": [137, 416, 1075], "multinomi": [138, 417, 1147], "multipli": [139, 418, 943], "native_arrai": [140, 419, 825], "neg": [141, 420, 944], "nonzero": [142, 421, 1156], "not_equ": [143, 422, 945], "one_hot": [144, 423, 1015], "ones_lik": [145, 424, 827], "optimizer_upd": [146, 425, 1054], "outer": [147, 426, 1090], "permute_dim": [148, 427, 1112], "pinv": [149, 1091], "posit": [150, 428, 756, 946], "pow": [151, 429, 947], "prod": [152, 430, 1172], "qr": [153, 431, 1092], "randint": [154, 432, 1148], "random_norm": [155, 433, 1149], "random_uniform": [156, 434, 1150], "relu": [157, 435, 806], "remaind": [158, 436, 949, 950], "repeat": [159, 437, 1113], "reshap": [160, 438, 1114], "result_typ": [161, 439, 859], "roll": [162, 440, 758, 1115], "round": [163, 441, 952], "scaled_dot_product_attent": [164, 442, 1076], "scatter_flat": [165, 443, 1017], "scatter_nd": [166, 444, 1018], "searchsort": [167, 445, 1165], "shuffl": [168, 446, 1152], "sigmoid": [169, 447, 807], "sign": [170, 448, 953], "sin": [171, 449, 954], "sinh": [172, 450, 955], "softmax": [173, 452, 808], "softplu": [174, 453, 809], "solv": [175, 454, 1094], "sort": [176, 255, 455, 739, 1163, 1166], "sparse_cross_entropi": [177, 456, 1105], "split": [178, 457, 1116], "sqrt": [179, 458, 956], "squar": [180, 459, 957], "squeez": [181, 460, 1117], "stable_divid": [182, 461, 1028], "stable_pow": [183, 462, 1029], "stack": [184, 463, 1118], "std": [185, 670, 1173], "stop_gradi": [186, 671, 1056], "subtract": [187, 672, 958, 959, 960], "sum": [188, 673, 761, 1174], "supports_inplac": [189, 1030], "svd": [190, 675, 1095], "svdval": [191, 676, 1096], "swapax": [192, 677, 1119], "tan": [193, 678, 758, 762, 961], "tanh": [194, 679, 962], "tensordot": [195, 680, 1097], "tile": [196, 681, 1120], "to_devic": [197, 682, 891, 892, 893], "to_list": [198, 684, 1032], "to_numpi": [199, 686, 1034], "to_scalar": [200, 687, 1035], "trace": [201, 688, 1098], "tril": [202, 689, 828], "triu": [203, 690, 829], "trunc": [204, 691, 963], "unique_al": [205, 692, 1159], "unique_count": [206, 693, 1160], "unique_invers": [207, 694, 1161], "unique_valu": [208, 695, 1162], "unstack": [209, 696, 1041], "value_is_nan": [210, 697, 1042], "var": [211, 698, 1175], "variable_data": [213, 700, 1060], "vecdot": [214, 701, 1099], "vector_norm": [215, 702, 1100], "vector_to_skew_symmetric_matrix": [216, 703, 1101], "where": [217, 704, 1157], "zero_pad": [218, 705, 1121], "zeros_lik": [219, 706, 831], "convers": [220, 707], "args_to_ivi": 221, "args_to_n": 222, "to_ivi": [223, 683], "to_n": [224, 685], "creation": [225, 709, 813], "arraywithcr": 226, "data": [227, 711, 760, 761, 769, 776, 790, 832], "type": [227, 711, 761, 763, 769, 790, 832], "arraywithdatatyp": 228, "devic": [229, 713, 756, 761, 770, 870], "arraywithdevic": 230, "elementwis": [231, 715, 898], "arraywithelementwis": 232, "gener": [233, 717, 760, 965], "arraywithgener": 234, "gradient": [235, 719, 1044], "arraywithgradi": 236, "imag": [237, 721], "arraywithimag": 238, "layer": [239, 723, 1062, 1202], "arraywithlay": 240, "algebra": [241, 725, 1077], "arraywithlinearalgebra": 242, "loss": [243, 727, 1102], "arraywithloss": 244, "manipul": [245, 729, 1106], "arraywithmanipul": 246, "norm": [247, 731, 1144, 1216], "arraywithnorm": 248, "random": [249, 733, 1146], "arraywithrandom": 250, "search": [251, 735, 1153], "arraywithsearch": 252, "set": [253, 737, 748, 765, 1158], "arraywithset": 254, "arraywithsort": 256, "statist": [257, 741, 1167], "arraywithstatist": 258, "util": [259, 743, 1176], "arraywithutil": 260, "wrap": [261, 745, 766], "backend": [263, 754, 765, 773, 790], "handler": [263, 773], "choose_random_backend": 264, "clear_backend_stack": 265, "current_backend": 266, "fn_name_from_version_specific_fn_nam": 267, "get_backend": 268, "set_backend": 269, "set_backend_to_specific_vers": 270, "try_import_ivy_jax": 271, "try_import_ivy_mxnet": 272, "try_import_ivy_numpi": 273, "try_import_ivy_tf": 274, "try_import_ivy_torch": 275, "unset_backend": 276, "background": [277, 1180], "ml": 278, "explos": 278, "standard": 279, "skeptic": 279, "complimentari": 279, "v": [279, 790], "competit": 279, "do": [279, 760], "work": [279, 752], "The": [279, 749, 775, 790], "api": [279, 750, 754, 759, 768, 773, 775, 777, 778], "why": [280, 760], "unifi": [280, 775], "No": [280, 748], "more": [280, 748], "re": [280, 759, 760], "implement": 280, "infinit": 280, "shelf": 280, "life": 280, "containerwithactiv": 282, "base": 283, "containerbas": 284, "contain": [285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 749, 768, 776, 892, 951, 959, 1007], "add_ivy_container_instance_method": [294, 746], "conv2d": [327, 1065, 1205], "conv2d_transpos": [328, 1066], "matrix_pow": [407, 1087], "maximum": [411, 941], "minimum": [415, 942], "slogdet": [451, 1093], "static_ab": 464, "static_aco": 465, "static_acosh": 466, "static_add": 467, "static_al": 468, "static_all_equ": 469, "static_ani": 470, "static_arang": 471, "static_argmax": 472, "static_argmin": 473, "static_argsort": 474, "static_asarrai": 475, "static_asin": 476, "static_asinh": 477, "static_assert_supports_inplac": 478, "static_astyp": 479, "static_atan": 480, "static_atan2": 481, "static_atanh": 482, "static_binary_cross_entropi": 483, "static_bitwise_and": 484, "static_bitwise_invert": 485, "static_bitwise_left_shift": 486, "static_bitwise_or": 487, "static_bitwise_right_shift": 488, "static_bitwise_xor": 489, "static_broadcast_arrai": 490, "static_broadcast_to": 491, "static_can_cast": 492, "static_ceil": 493, "static_choleski": 494, "static_clip": 495, "static_clip_matrix_norm": 496, "static_clip_vector_norm": 497, "static_concat": 498, "static_constant_pad": 499, "static_conv1d": 500, "static_conv1d_transpos": 501, "static_conv2d": 502, "static_conv2d_transpos": 503, "static_conv3d": 504, "static_conv3d_transpos": 505, "static_co": 506, "static_cosh": 507, "static_cross": 508, "static_cross_entropi": 509, "static_cumprod": 510, "static_cumsum": 511, "static_default_float_dtyp": 512, "static_depthwise_conv2d": 513, "static_det": 514, "static_dev": 515, "static_diagon": 516, "static_divid": 517, "static_dropout": 518, "static_dtyp": 519, "static_einops_rearrang": 520, "static_einops_reduc": 521, "static_einops_repeat": 522, "static_empty_lik": 523, "static_equ": 524, "static_erf": 525, "static_exp": 526, "static_expand_dim": 527, "static_expm1": 528, "static_ey": 529, "static_finfo": 530, "static_flip": 531, "static_floor": 532, "static_floor_divid": 533, "static_floormod": 534, "static_fourier_encod": 535, "static_from_dlpack": 536, "static_full_lik": 537, "static_function_supported_dtyp": 538, "static_function_unsupported_dtyp": 539, "static_gath": 540, "static_gather_nd": 541, "static_gelu": 542, "static_great": 543, "static_greater_equ": 544, "static_has_nan": 545, "static_iinfo": 546, "static_indices_wher": 547, "static_inplace_decr": 548, "static_inplace_incr": 549, "static_inplace_upd": 550, "static_inv": 551, "static_is_arrai": 552, "static_is_bool_dtyp": 553, "static_is_float_dtyp": 554, "static_is_int_dtyp": 555, "static_is_ivy_arrai": 556, "static_is_ivy_contain": 557, "static_is_native_arrai": 558, "static_is_uint_dtyp": 559, "static_is_vari": 560, "static_isfinit": 561, "static_isinf": 562, "static_isnan": 563, "static_leaky_relu": 564, "static_less": 565, "static_less_equ": 566, "static_linear": 567, "static_linspac": 568, "static_log": 569, "static_log10": 570, "static_log1p": 571, "static_log2": 572, "static_logaddexp": 573, "static_logical_and": 574, "static_logical_not": 575, "static_logical_or": 576, "static_logical_xor": 577, "static_logspac": 578, "static_lstm_upd": 579, "static_matrix_norm": 580, "static_matrix_pow": 581, "static_matrix_rank": 582, "static_matrix_transpos": 583, "static_maximum": 584, "static_meshgrid": 585, "static_minimum": 586, "static_multi_head_attent": 587, "static_multinomi": 588, "static_multipli": 589, "static_native_arrai": 590, "static_neg": 591, "static_nonzero": 592, "static_not_equ": 593, "static_one_hot": 594, "static_on": 595, "static_ones_lik": 596, "static_out": 597, "static_permute_dim": 598, "static_posit": 599, "static_pow": 600, "static_qr": 601, "static_randint": 602, "static_random_norm": 603, "static_random_uniform": 604, "static_relu": 605, "static_remaind": [606, 951], "static_repeat": 607, "static_reshap": 608, "static_result_typ": 609, "static_rol": 610, "static_round": 611, "static_scaled_dot_product_attent": 612, "static_scatter_flat": 613, "static_scatter_nd": 614, "static_searchsort": 615, "static_shuffl": 616, "static_sigmoid": 617, "static_sign": 618, "static_sin": 619, "static_sinh": 620, "static_slogdet": 621, "static_softmax": 622, "static_softplu": 623, "static_solv": 624, "static_sort": 625, "static_sparse_cross_entropi": 626, "static_split": 627, "static_sqrt": 628, "static_squar": 629, "static_squeez": 630, "static_stable_divid": 631, "static_stable_pow": 632, "static_stack": 633, "static_stop_gradi": 634, "static_subtract": 635, "static_supports_inplace_upd": 636, "static_svd": 637, "static_svdv": 638, "static_swapax": 639, "static_tan": 640, "static_tanh": 641, "static_tensordot": 642, "static_til": 643, "static_to_devic": 644, "static_to_ivi": 645, "static_to_list": 646, "static_to_n": 647, "static_to_numpi": 648, "static_to_scalar": 649, "static_trac": 650, "static_tril": 651, "static_triu": 652, "static_trunc": 653, "static_unique_al": 654, "static_unique_count": 655, "static_unique_invers": 656, "static_unique_valu": 657, "static_unstack": 658, "static_value_is_nan": 659, "static_var": 660, "static_vari": 661, "static_variable_data": 662, "static_vecdot": 663, "static_vector_norm": 664, "static_vector_to_skew_symmetric_matrix": 665, "static_wher": 666, "static_zero_pad": 667, "static_zero": 668, "static_zeros_lik": 669, "supports_inplace_upd": 674, "containerwithconvers": 708, "containerwithcr": 710, "containerwithdatatyp": 712, "containerwithdevic": 714, "containerwithelementwis": 716, "containerwithgener": 718, "containerwithgradi": 720, "containerwithimag": 722, "containerwithlay": 724, "containerwithlinearalgebra": 726, "containerwithloss": 728, "containerwithmanipul": 730, "containerwithnorm": 732, "containerwithrandom": 734, "containerwithsearch": 736, "containerwithset": 738, "containerwithsort": 740, "containerwithstatist": 742, "containerwithutil": 744, "contribut": [747, 1180], "up": 748, "clone": 748, "ivi": [748, 749, 750, 751, 754, 758, 760, 761, 762, 767, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 789, 892, 893, 950, 951, 959, 960, 1007, 1008], "pycharm": [748, 749], "virtual": 748, "environ": 748, "docker": [748, 749, 752], "us": [748, 752, 759, 776], "miniconda": [748, 752], "venv": [748, 752], "interpret": 748, "window": 748, "maco": 748, "ubuntu": 748, "detail": 748, "hypothesi": [748, 760], "github": 748, "codespac": 748, "pre": [748, 755], "commit": [748, 749, 755], "basic": [749, 761], "get": 749, "help": 749, "todo": 749, "list": 749, "issu": 749, "extens": [749, 750, 788, 964, 1180], "manag": 749, "your": 749, "fork": 749, "who": 749, "To": 749, "ask": 749, "With": 749, "command": 749, "line": 749, "browser": 749, "pull": 749, "request": 749, "small": 749, "often": 749, "interact": 749, "run": [749, 759, 760], "test": [749, 759, 760, 762], "local": 749, "most": 749, "out": [749, 756, 771], "id": [749, 759], "open": 750, "task": 750, "function": [750, 754, 756, 760, 763, 766, 768, 769, 770, 773, 778, 790], "format": [750, 755], "checklist": 750, "frontend": [750, 761, 762, 765, 778], "appli": [751, 789], "librari": [751, 789], "develop": 751, "guid": 751, "introduct": [751, 761, 762], "exampl": [751, 756, 758, 762], "robot": [751, 786, 789], "build": [752, 773], "doc": 752, "dockerless": 752, "document": 752, "pipelin": [752, 790], "make_doc": 752, "sh": 752, "entrypoint": 752, "_make_doc": 752, "generate_src_rst_fil": 752, "py": 752, "sphinx": 752, "correct_built_html_fil": 752, "remove_fil": 752, "deep": 753, "dive": 753, "navig": 754, "code": 754, "categor": 754, "submodul": 754, "design": [754, 772, 1180], "helper": [754, 760], "lint": 755, "check": [755, 790], "hook": 755, "argument": [756, 769, 770, 771], "keyword": 756, "number": 756, "oper": [756, 775, 790], "integ": [756, 769], "sequenc": 756, "nestabl": [756, 763, 768], "docstr": [757, 758], "bash": 759, "file": 759, "fail": [759, 760], "import": 760, "strategi": 760, "integr": 760, "we": 760, "need": 760, "how": 760, "write": 760, "effect": 760, "bonu": 760, "extend": 760, "featur": 760, "self": 760, "consist": 760, "explicit": 760, "test_array_funct": 760, "composit": [761, 763], "temporari": 761, "support": [761, 765, 769, 790], "framework": [761, 774], "specif": 761, "class": [761, 775], "full": [762, 820], "primari": 763, "mix": 763, "standalon": 763, "conveni": 763, "superset": 764, "behaviour": 764, "version": [765, 790], "nativ": 767, "handl": [767, 790], "instanc": [768, 775], "static": 768, "special": 768, "modul": [769, 770, 777, 1214, 1215], "other": [769, 770], "unsupport": 769, "inplac": 771, "updat": 771, "copi": 771, "block": 773, "graph": [773, 778], "compil": [773, 778, 810, 811], "monkei": 775, "patch": 775, "construct": 776, "represent": 776, "recurs": 776, "built": 776, "ins": 776, "access": 776, "save": 776, "load": 776, "comparison": 776, "custom": [776, 790], "case": 776, "compartment": 776, "configur": 776, "network": [776, 778], "weight": 776, "state": [777, 790], "initi": [777, 1192, 1196], "optim": [777, 1218, 1222], "transpil": 778, "role": 778, "convert": [778, 1190], "model": [778, 785, 790], "builder": 780, "ecosystem": 781, "gym": [782, 789], "mech": 783, "memori": [784, 789], "vision": [787, 789], "mechan": 789, "faq": 790, "maintain": 790, "dynam": 790, "size": 790, "shape": [790, 1026], "gpu": 790, "deploy": 790, "control": 790, "flow": 790, "auto": 790, "differenti": 790, "replica": 790, "parallel": 790, "altern": 790, "structur": 790, "func": 791, "wrapper": 791, "from_zero_dim_arrays_to_float": 792, "handle_nest": 793, "handle_out_argu": 794, "infer_devic": 795, "infer_dtyp": 796, "inputs_to_ivy_arrai": 797, "inputs_to_native_arrai": 798, "integer_arrays_to_float": 799, "outputs_to_ivy_arrai": 800, "to_native_arrays_and_back": 801, "constant": [812, 1193], "arang": 814, "empti": 816, "ey": 818, "linspac": 822, "logspac": 823, "ones": 826, "zero": [830, 1201], "as_ivy_dtyp": 833, "as_native_dtyp": 834, "check_float": 839, "closest_valid_dtyp": 840, "default_dtyp": 841, "default_float_dtyp": 842, "default_int_dtyp": 843, "default_uint_dtyp": 844, "dtype_bit": 846, "function_supported_dtyp": 848, "function_unsupported_dtyp": 849, "infer_default_dtyp": 851, "invalid_dtyp": 852, "promote_typ": 857, "promote_types_of_input": 858, "set_default_dtyp": 860, "set_default_float_dtyp": 861, "set_default_int_dtyp": 862, "set_default_uint_dtyp": 863, "type_promote_arrai": 864, "unset_default_dtyp": 865, "unset_default_float_dtyp": 866, "unset_default_int_dtyp": 867, "unset_default_uint_dtyp": 868, "valid_dtyp": 869, "profil": 871, "as_ivy_dev": 872, "as_native_dev": 873, "clear_mem_on_dev": 874, "default_devic": 875, "dev_util": 877, "function_supported_devic": 878, "function_unsupported_devic": 879, "get_all_ivy_arrays_on_dev": 880, "gpu_is_avail": 881, "num_cpu_cor": 882, "num_gpu": 883, "num_ivy_arrays_on_dev": 884, "percent_used_mem_on_dev": 885, "print_all_ivy_arrays_on_dev": 886, "set_default_devic": 887, "set_split_factor": 888, "split_factor": 889, "split_func_cal": 890, "total_mem_on_dev": 894, "tpu_is_avail": 895, "unset_default_devic": 896, "used_mem_on_dev": 897, "reciproc": 948, "arg_info": 967, "arg_nam": 968, "cache_fn": 972, "container_typ": 975, "current_backend_str": 979, "function_supported_devices_and_dtyp": 986, "function_unsupported_devices_and_dtyp": 987, "get_all_arrays_in_memori": 990, "get_array_mod": 991, "get_min_bas": 992, "get_min_denomin": 993, "get_nestable_mod": 994, "get_queue_timeout": 996, "get_referrers_recurs": 997, "get_tmp_dir": 998, "inplace_arrays_support": 1001, "inplace_variables_support": 1005, "match_kwarg": 1012, "multiprocess": 1013, "num_arrays_in_memori": 1014, "print_all_arrays_in_memori": 1016, "set_array_mod": 1019, "set_min_bas": 1020, "set_min_denomin": 1021, "set_nestable_mod": 1022, "set_queue_timeout": 1023, "set_shape_array_mod": 1024, "set_tmp_dir": 1025, "shape_array_mod": 1027, "to_ivy_shap": 1031, "to_native_shap": 1033, "try_else_non": 1036, "unset_array_mod": 1037, "unset_nestable_mod": 1038, "unset_queue_timeout": 1039, "unset_shape_array_mod": 1040, "vmap": 1043, "execute_with_gradi": 1047, "grad": 1048, "jac": 1051, "set_with_grad": 1055, "unset_with_grad": 1057, "value_and_grad": 1058, "with_grad": 1061, "deconv_length": 1069, "handle_pad": 1072, "meta": 1122, "fomaml_step": 1123, "maml_step": 1124, "reptile_step": 1125, "nest": 1126, "all_nested_indic": 1127, "copy_nest": 1128, "index_nest": 1129, "insert_into_nest_at_index": 1130, "insert_into_nest_at_indic": 1131, "map": 1132, "map_nest_at_index": 1133, "map_nest_at_indic": 1134, "multi_index_nest": 1135, "nested_ani": 1136, "nested_indices_wher": 1137, "nested_map": 1138, "nested_multi_map": 1139, "prune_nest_at_index": 1140, "prune_nest_at_indic": 1141, "set_nest_at_index": 1142, "set_nest_at_indic": 1143, "seed": 1151, "glossari": 1179, "content": 1180, "overview": 1180, "quick": 1180, "start": 1180, "roadmap": [1180, 1186], "citat": 1180, "inspect": 1183, "add_array_spec": 1184, "fn_array_spec": 1185, "geglu": 1188, "to_ivy_modul": 1191, "firstlayersiren": 1194, "glorotuniform": 1195, "kaimingnorm": 1197, "Ones": 1198, "siren": 1199, "uniform": 1200, "conv1dtranspos": 1204, "conv2dtranspos": 1206, "conv3dtranspos": 1208, "depthwiseconv2d": 1209, "lstm": 1211, "multiheadattent": 1213, "layernorm": 1217, "adam": 1219, "lamb": 1220, "lar": 1221, "sgd": 1223, "sequenti": [1224, 1225], "verbos": 1227, "cprint": 1228}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 6, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.viewcode": 1, "sphinx": 56}})