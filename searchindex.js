Search.setIndex({"docnames": ["array/activations", "array/activations/ArrayWithActivations", "array/array_methods", "array/array_methods/abs", "array/array_methods/acos", "array/array_methods/acosh", "array/array_methods/add", "array/array_methods/all", "array/array_methods/all_equal", "array/array_methods/any", "array/array_methods/argsort", "array/array_methods/asin", "array/array_methods/asinh", "array/array_methods/atan", "array/array_methods/atan2", "array/array_methods/atanh", "array/array_methods/binary_cross_entropy", "array/array_methods/bitwise_and", "array/array_methods/bitwise_invert", "array/array_methods/bitwise_left_shift", "array/array_methods/bitwise_or", "array/array_methods/bitwise_right_shift", "array/array_methods/bitwise_xor", "array/array_methods/can_cast", "array/array_methods/ceil", "array/array_methods/cholesky", "array/array_methods/clip", "array/array_methods/concat", "array/array_methods/constant_pad", "array/array_methods/cos", "array/array_methods/cosh", "array/array_methods/cross", "array/array_methods/cross_entropy", "array/array_methods/det", "array/array_methods/diagonal", "array/array_methods/divide", "array/array_methods/eigh", "array/array_methods/eigvalsh", "array/array_methods/einsum", "array/array_methods/equal", "array/array_methods/erf", "array/array_methods/exp", "array/array_methods/expand_dims", "array/array_methods/expm1", "array/array_methods/flip", "array/array_methods/floor", "array/array_methods/floor_divide", "array/array_methods/gather_nd", "array/array_methods/greater", "array/array_methods/greater_equal", "array/array_methods/inv", "array/array_methods/isfinite", "array/array_methods/isinf", "array/array_methods/isnan", "array/array_methods/layer_norm", "array/array_methods/less", "array/array_methods/less_equal", "array/array_methods/log", "array/array_methods/log10", "array/array_methods/log1p", "array/array_methods/log2", "array/array_methods/logaddexp", "array/array_methods/logical_and", "array/array_methods/logical_not", "array/array_methods/logical_or", "array/array_methods/logical_xor", "array/array_methods/matmul", "array/array_methods/matrix_norm", "array/array_methods/matrix_rank", "array/array_methods/matrix_transpose", "array/array_methods/max", "array/array_methods/mean", "array/array_methods/min", "array/array_methods/multiply", "array/array_methods/negative", "array/array_methods/not_equal", "array/array_methods/outer", "array/array_methods/permute_dims", "array/array_methods/pinv", "array/array_methods/positive", "array/array_methods/pow", "array/array_methods/prod", "array/array_methods/qr", "array/array_methods/remainder", "array/array_methods/repeat", "array/array_methods/reshape", "array/array_methods/roll", "array/array_methods/round", "array/array_methods/sign", "array/array_methods/sin", "array/array_methods/sinh", "array/array_methods/solve", "array/array_methods/sort", "array/array_methods/sparse_cross_entropy", "array/array_methods/sqrt", "array/array_methods/square", "array/array_methods/squeeze", "array/array_methods/stack", "array/array_methods/std", "array/array_methods/subtract", "array/array_methods/sum", "array/array_methods/svd", "array/array_methods/svdvals", "array/array_methods/swapaxes", "array/array_methods/tan", "array/array_methods/tanh", "array/array_methods/tensordot", "array/array_methods/tile", "array/array_methods/trace", "array/array_methods/trunc", "array/array_methods/var", "array/array_methods/vecdot", "array/array_methods/vector_norm", "array/array_methods/vector_to_skew_symmetric_matrix", "array/array_methods/zero_pad", "array/conversions", "array/conversions/args_to_ivy", "array/conversions/args_to_native", "array/conversions/to_ivy", "array/conversions/to_native", "array/creation", "array/creation/ArrayWithCreation", "array/data_type", "array/data_type/ArrayWithDataTypes", "array/device", "array/device/ArrayWithDevice", "array/elementwise", "array/elementwise/ArrayWithElementwise", "array/general", "array/general/ArrayWithGeneral", "array/gradients", "array/gradients/ArrayWithGradients", "array/image", "array/image/ArrayWithImage", "array/layers", "array/layers/ArrayWithLayers", "array/linear_algebra", "array/linear_algebra/ArrayWithLinearAlgebra", "array/losses", "array/losses/ArrayWithLosses", "array/manipulation", "array/manipulation/ArrayWithManipulation", "array/norms", "array/norms/ArrayWithNorms", "array/random", "array/random/ArrayWithRandom", "array/searching", "array/searching/ArrayWithSearching", "array/set", "array/set/ArrayWithSet", "array/sorting", "array/sorting/ArrayWithSorting", "array/statistical", "array/statistical/ArrayWithStatistical", "array/utility", "array/utility/ArrayWithUtility", "array/wrapping", "array/wrapping/add_ivy_array_instance_methods", "backend_handler", "backend_handler/ContextManager:\n    def __init__", "backend_handler/choose_random_backend", "backend_handler/clear_backend_stack", "backend_handler/current_backend", "backend_handler/get_backend", "backend_handler/set_backend", "backend_handler/try_import_ivy_jax", "backend_handler/try_import_ivy_mxnet", "backend_handler/try_import_ivy_numpy", "backend_handler/try_import_ivy_tf", "backend_handler/try_import_ivy_torch", "backend_handler/unset_backend", "background", "background/ml_explosion", "background/standardization", "background/why_unify", "container/activations", "container/activations/ContainerWithActivations", "container/base", "container/base/ContainerBase", "container/container", "container/container/Container", "container/container/MultiDevContainer", "container/container_methods", "container/container_methods/abs", "container/container_methods/acos", "container/container_methods/acosh", "container/container_methods/adam_update", "container/container_methods/add", "container/container_methods/all", "container/container_methods/all_equal", "container/container_methods/any", "container/container_methods/argsort", "container/container_methods/asin", "container/container_methods/asinh", "container/container_methods/at_dev", "container/container_methods/at_devs", "container/container_methods/atan", "container/container_methods/atan2", "container/container_methods/atanh", "container/container_methods/binary_cross_entropy", "container/container_methods/bitwise_and", "container/container_methods/bitwise_invert", "container/container_methods/bitwise_left_shift", "container/container_methods/bitwise_or", "container/container_methods/bitwise_right_shift", "container/container_methods/bitwise_xor", "container/container_methods/can_cast", "container/container_methods/ceil", "container/container_methods/clip", "container/container_methods/clip_vector_norm", "container/container_methods/concat", "container/container_methods/constant_pad", "container/container_methods/cos", "container/container_methods/cosh", "container/container_methods/cross_entropy", "container/container_methods/divide", "container/container_methods/einsum", "container/container_methods/equal", "container/container_methods/erf", "container/container_methods/exp", "container/container_methods/expand_dims", "container/container_methods/expm1", "container/container_methods/flip", "container/container_methods/floor", "container/container_methods/floor_divide", "container/container_methods/gather_nd", "container/container_methods/gradient_descent_update", "container/container_methods/greater", "container/container_methods/greater_equal", "container/container_methods/isfinite", "container/container_methods/isinf", "container/container_methods/isnan", "container/container_methods/lamb_update", "container/container_methods/lars_update", "container/container_methods/layer_norm", "container/container_methods/less", "container/container_methods/less_equal", "container/container_methods/log", "container/container_methods/log10", "container/container_methods/log1p", "container/container_methods/log2", "container/container_methods/logaddexp", "container/container_methods/logical_and", "container/container_methods/logical_not", "container/container_methods/logical_or", "container/container_methods/logical_xor", "container/container_methods/matmul", "container/container_methods/max", "container/container_methods/mean", "container/container_methods/min", "container/container_methods/multiply", "container/container_methods/negative", "container/container_methods/not_equal", "container/container_methods/optimizer_update", "container/container_methods/permute_dims", "container/container_methods/positive", "container/container_methods/pow", "container/container_methods/prod", "container/container_methods/random_uniform", "container/container_methods/remainder", "container/container_methods/repeat", "container/container_methods/reshape", "container/container_methods/roll", "container/container_methods/round", "container/container_methods/sign", "container/container_methods/sin", "container/container_methods/sinh", "container/container_methods/sort", "container/container_methods/sparse_cross_entropy", "container/container_methods/sqrt", "container/container_methods/square", "container/container_methods/squeeze", "container/container_methods/stack", "container/container_methods/static_adam_update", "container/container_methods/static_add", "container/container_methods/static_all_equal", "container/container_methods/static_argsort", "container/container_methods/static_binary_cross_entropy", "container/container_methods/static_can_cast", "container/container_methods/static_clip", "container/container_methods/static_cross_entropy", "container/container_methods/static_divide", "container/container_methods/static_gather_nd", "container/container_methods/static_gradient_descent_update", "container/container_methods/static_lamb_update", "container/container_methods/static_lars_update", "container/container_methods/static_multiply", "container/container_methods/static_optimizer_update", "container/container_methods/static_randint", "container/container_methods/static_random_uniform", "container/container_methods/static_roll", "container/container_methods/static_sort", "container/container_methods/static_sparse_cross_entropy", "container/container_methods/static_subtract", "container/container_methods/static_tan", "container/container_methods/static_tanh", "container/container_methods/std", "container/container_methods/subtract", "container/container_methods/sum", "container/container_methods/swapaxes", "container/container_methods/tan", "container/container_methods/tanh", "container/container_methods/tile", "container/container_methods/trunc", "container/container_methods/var", "container/container_methods/zero_pad", "container/creation", "container/creation/ContainerWithCreation", "container/data_type", "container/data_type/ContainerWithDataTypes", "container/device", "container/device/ContainerWithDevice", "container/elementwise", "container/elementwise/ContainerWithElementwise", "container/general", "container/general/ContainerWithGeneral", "container/gradients", "container/gradients/ContainerWithGradients", "container/image", "container/image/ContainerWithImage", "container/layers", "container/layers/ContainerWithLayers", "container/linear_algebra", "container/linear_algebra/ContainerWithLinearAlgebra", "container/losses", "container/losses/ContainerWithLosses", "container/manipulation", "container/manipulation/ContainerWithManipulation", "container/norms", "container/norms/ContainerWithNorms", "container/random", "container/random/ContainerWithRandom", "container/searching", "container/searching/ContainerWithSearching", "container/set", "container/set/ContainerWithSet", "container/sorting", "container/sorting/ContainerWithSorting", "container/statistical", "container/statistical/ContainerWithStatistical", "container/utility", "container/utility/ContainerWithUtility", "container/wrapping", "container/wrapping/add_ivy_container_instance_methods", "contributing", "contributing/0_setting_up", "contributing/1_the_basics", "contributing/4_open_tasks", "contributing/building_the_docs", "deep_dive", "deep_dive/0_navigating_the_code", "deep_dive/10_docstrings", "deep_dive/11_docstring_examples", "deep_dive/12_array_api_tests", "deep_dive/13_ivy_tests", "deep_dive/1_function_types", "deep_dive/2_backend_setting", "deep_dive/3_function_wrapping", "deep_dive/4_arrays", "deep_dive/5_containers", "deep_dive/6_data_types", "deep_dive/7_devices", "deep_dive/8_inplace_updates", "deep_dive/9_function_arguments", "design", "design/building_blocks", "design/ivy_as_a_framework", "design/ivy_as_a_framework/ivy_array", "design/ivy_as_a_framework/ivy_container", "design/ivy_as_a_framework/ivy_stateful_api", "design/ivy_as_a_transpiler", "docs/ivy", "docs/ivy_builder", "docs/ivy_ecosystem", "docs/ivy_gym", "docs/ivy_mech", "docs/ivy_memory", "docs/ivy_models", "docs/ivy_robot", "docs/ivy_vision", "extensions", "extensions/applied_libraries", "faq", "func_wrapper", "func_wrapper/handle_nestable", "func_wrapper/handle_out_argument", "func_wrapper/infer_device", "func_wrapper/infer_dtype", "func_wrapper/inputs_to_ivy_arrays", "func_wrapper/inputs_to_native_arrays", "func_wrapper/outputs_to_ivy_arrays", "func_wrapper/to_native_arrays_and_back", "functional/ivy", "functional/ivy/activations", "functional/ivy/activations/gelu", "functional/ivy/activations/leaky_relu", "functional/ivy/activations/relu", "functional/ivy/activations/sigmoid", "functional/ivy/activations/softmax", "functional/ivy/activations/softplus", "functional/ivy/activations/tanh", "functional/ivy/compilation", "functional/ivy/compilation/compile", "functional/ivy/constants", "functional/ivy/creation", "functional/ivy/creation/arange", "functional/ivy/creation/asarray", "functional/ivy/creation/empty", "functional/ivy/creation/empty_like", "functional/ivy/creation/eye", "functional/ivy/creation/from_dlpack", "functional/ivy/creation/full", "functional/ivy/creation/full_like", "functional/ivy/creation/linspace", "functional/ivy/creation/logspace", "functional/ivy/creation/meshgrid", "functional/ivy/creation/native_array", "functional/ivy/creation/ones", "functional/ivy/creation/ones_like", "functional/ivy/creation/tril", "functional/ivy/creation/triu", "functional/ivy/creation/zeros", "functional/ivy/creation/zeros_like", "functional/ivy/data_type", "functional/ivy/data_type/DefaultDtype:\n    \"\"\"\"\"\"\n\n    # noinspection PyShadowingNames\n    def __init__", "functional/ivy/data_type/DefaultFloatDtype:\n    \"\"\"\"\"\"\n\n    # noinspection PyShadowingNames\n    def __init__", "functional/ivy/data_type/DefaultIntDtype:\n    \"\"\"\"\"\"\n\n    # noinspection PyShadowingNames\n    def __init__", "functional/ivy/data_type/as_ivy_dtype", "functional/ivy/data_type/as_native_dtype", "functional/ivy/data_type/astype", "functional/ivy/data_type/broadcast_arrays", "functional/ivy/data_type/broadcast_to", "functional/ivy/data_type/can_cast", "functional/ivy/data_type/can_cast/can_cast_array", "functional/ivy/data_type/can_cast/can_cast_container", "functional/ivy/data_type/can_cast/can_cast_functional", "functional/ivy/data_type/can_cast/static_can_cast_container", "functional/ivy/data_type/closest_valid_dtype", "functional/ivy/data_type/default_dtype", "functional/ivy/data_type/default_float_dtype", "functional/ivy/data_type/default_int_dtype", "functional/ivy/data_type/dtype", "functional/ivy/data_type/dtype_bits", "functional/ivy/data_type/finfo", "functional/ivy/data_type/function_supported_dtypes", "functional/ivy/data_type/function_unsupported_dtypes", "functional/ivy/data_type/iinfo", "functional/ivy/data_type/invalid_dtype", "functional/ivy/data_type/is_float_dtype", "functional/ivy/data_type/is_int_dtype", "functional/ivy/data_type/promote_types", "functional/ivy/data_type/result_type", "functional/ivy/data_type/set_default_dtype", "functional/ivy/data_type/set_default_float_dtype", "functional/ivy/data_type/set_default_int_dtype", "functional/ivy/data_type/type_promote_arrays", "functional/ivy/data_type/unset_default_dtype", "functional/ivy/data_type/unset_default_float_dtype", "functional/ivy/data_type/unset_default_int_dtype", "functional/ivy/data_type/valid_dtype", "functional/ivy/device", "functional/ivy/device/DefaultDevice:\n    \"\"\"\"\"\"\n\n    # noinspection PyShadowingNames\n    def __init__", "functional/ivy/device/DevClonedItem", "functional/ivy/device/DevClonedIter", "functional/ivy/device/DevClonedNest", "functional/ivy/device/DevDistItem", "functional/ivy/device/DevDistIter", "functional/ivy/device/DevDistNest", "functional/ivy/device/DevManager:\n    \"\"\"\"\"\"\n\n    def __init__", "functional/ivy/device/DevMapper", "functional/ivy/device/DevMapperMultiProc", "functional/ivy/device/MultiDev:\n    def __init__", "functional/ivy/device/MultiDevItem", "functional/ivy/device/MultiDevIter", "functional/ivy/device/MultiDevNest", "functional/ivy/device/Profiler", "functional/ivy/device/as_ivy_dev", "functional/ivy/device/as_native_dev", "functional/ivy/device/clear_mem_on_dev", "functional/ivy/device/default_device", "functional/ivy/device/dev", "functional/ivy/device/dev_clone", "functional/ivy/device/dev_clone_array", "functional/ivy/device/dev_clone_iter", "functional/ivy/device/dev_clone_nest", "functional/ivy/device/dev_dist", "functional/ivy/device/dev_dist_array", "functional/ivy/device/dev_dist_iter", "functional/ivy/device/dev_dist_nest", "functional/ivy/device/dev_unify", "functional/ivy/device/dev_unify_array", "functional/ivy/device/dev_unify_iter", "functional/ivy/device/dev_unify_nest", "functional/ivy/device/dev_util", "functional/ivy/device/get_all_ivy_arrays_on_dev", "functional/ivy/device/gpu_is_available", "functional/ivy/device/num_cpu_cores", "functional/ivy/device/num_gpus", "functional/ivy/device/num_ivy_arrays_on_dev", "functional/ivy/device/percent_used_mem_on_dev", "functional/ivy/device/print_all_ivy_arrays_on_dev", "functional/ivy/device/set_default_device", "functional/ivy/device/set_split_factor", "functional/ivy/device/split_factor", "functional/ivy/device/split_func_call", "functional/ivy/device/to_device", "functional/ivy/device/total_mem_on_dev", "functional/ivy/device/tpu_is_available", "functional/ivy/device/unset_default_device", "functional/ivy/device/used_mem_on_dev", "functional/ivy/elementwise", "functional/ivy/elementwise/abs", "functional/ivy/elementwise/abs/abs_array", "functional/ivy/elementwise/abs/abs_container", "functional/ivy/elementwise/abs/abs_functional", "functional/ivy/elementwise/acos", "functional/ivy/elementwise/acos/acos_array", "functional/ivy/elementwise/acos/acos_container", "functional/ivy/elementwise/acos/acos_functional", "functional/ivy/elementwise/acosh", "functional/ivy/elementwise/acosh/acosh_array", "functional/ivy/elementwise/acosh/acosh_container", "functional/ivy/elementwise/acosh/acosh_functional", "functional/ivy/elementwise/add", "functional/ivy/elementwise/add/add_array", "functional/ivy/elementwise/add/add_container", "functional/ivy/elementwise/add/add_functional", "functional/ivy/elementwise/add/static_add_container", "functional/ivy/elementwise/asin", "functional/ivy/elementwise/asin/asin_array", "functional/ivy/elementwise/asin/asin_container", "functional/ivy/elementwise/asin/asin_functional", "functional/ivy/elementwise/asinh", "functional/ivy/elementwise/asinh/asinh_array", "functional/ivy/elementwise/asinh/asinh_container", "functional/ivy/elementwise/asinh/asinh_functional", "functional/ivy/elementwise/atan", "functional/ivy/elementwise/atan/atan_array", "functional/ivy/elementwise/atan/atan_container", "functional/ivy/elementwise/atan/atan_functional", "functional/ivy/elementwise/atan2", "functional/ivy/elementwise/atan2/atan2_array", "functional/ivy/elementwise/atan2/atan2_container", "functional/ivy/elementwise/atan2/atan2_functional", "functional/ivy/elementwise/atanh", "functional/ivy/elementwise/atanh/atanh_array", "functional/ivy/elementwise/atanh/atanh_container", "functional/ivy/elementwise/atanh/atanh_functional", "functional/ivy/elementwise/bitwise_and", "functional/ivy/elementwise/bitwise_and/bitwise_and_array", "functional/ivy/elementwise/bitwise_and/bitwise_and_container", "functional/ivy/elementwise/bitwise_and/bitwise_and_functional", "functional/ivy/elementwise/bitwise_invert", "functional/ivy/elementwise/bitwise_invert/bitwise_invert_array", "functional/ivy/elementwise/bitwise_invert/bitwise_invert_container", "functional/ivy/elementwise/bitwise_invert/bitwise_invert_functional", "functional/ivy/elementwise/bitwise_left_shift", "functional/ivy/elementwise/bitwise_left_shift/bitwise_left_shift_array", "functional/ivy/elementwise/bitwise_left_shift/bitwise_left_shift_container", "functional/ivy/elementwise/bitwise_left_shift/bitwise_left_shift_functional", "functional/ivy/elementwise/bitwise_or", "functional/ivy/elementwise/bitwise_or/bitwise_or_array", "functional/ivy/elementwise/bitwise_or/bitwise_or_container", "functional/ivy/elementwise/bitwise_or/bitwise_or_functional", "functional/ivy/elementwise/bitwise_right_shift", "functional/ivy/elementwise/bitwise_right_shift/bitwise_right_shift_array", "functional/ivy/elementwise/bitwise_right_shift/bitwise_right_shift_container", "functional/ivy/elementwise/bitwise_right_shift/bitwise_right_shift_functional", "functional/ivy/elementwise/bitwise_xor", "functional/ivy/elementwise/bitwise_xor/bitwise_xor_array", "functional/ivy/elementwise/bitwise_xor/bitwise_xor_container", "functional/ivy/elementwise/bitwise_xor/bitwise_xor_functional", "functional/ivy/elementwise/ceil", "functional/ivy/elementwise/ceil/ceil_array", "functional/ivy/elementwise/ceil/ceil_container", "functional/ivy/elementwise/ceil/ceil_functional", "functional/ivy/elementwise/cos", "functional/ivy/elementwise/cos/cos_array", "functional/ivy/elementwise/cos/cos_container", "functional/ivy/elementwise/cos/cos_functional", "functional/ivy/elementwise/cosh", "functional/ivy/elementwise/cosh/cosh_array", "functional/ivy/elementwise/cosh/cosh_container", "functional/ivy/elementwise/cosh/cosh_functional", "functional/ivy/elementwise/divide", "functional/ivy/elementwise/divide/divide_array", "functional/ivy/elementwise/divide/divide_container", "functional/ivy/elementwise/divide/divide_functional", "functional/ivy/elementwise/divide/static_divide_container", "functional/ivy/elementwise/equal", "functional/ivy/elementwise/equal/equal_array", "functional/ivy/elementwise/equal/equal_container", "functional/ivy/elementwise/equal/equal_functional", "functional/ivy/elementwise/erf", "functional/ivy/elementwise/erf/erf_array", "functional/ivy/elementwise/erf/erf_container", "functional/ivy/elementwise/erf/erf_functional", "functional/ivy/elementwise/exp", "functional/ivy/elementwise/exp/exp_array", "functional/ivy/elementwise/exp/exp_container", "functional/ivy/elementwise/exp/exp_functional", "functional/ivy/elementwise/expm1", "functional/ivy/elementwise/expm1/expm1_array", "functional/ivy/elementwise/expm1/expm1_container", "functional/ivy/elementwise/expm1/expm1_functional", "functional/ivy/elementwise/floor", "functional/ivy/elementwise/floor/floor_array", "functional/ivy/elementwise/floor/floor_container", "functional/ivy/elementwise/floor/floor_functional", "functional/ivy/elementwise/floor_divide", "functional/ivy/elementwise/floor_divide/floor_divide_array", "functional/ivy/elementwise/floor_divide/floor_divide_container", "functional/ivy/elementwise/floor_divide/floor_divide_functional", "functional/ivy/elementwise/greater", "functional/ivy/elementwise/greater/greater_array", "functional/ivy/elementwise/greater/greater_container", "functional/ivy/elementwise/greater/greater_functional", "functional/ivy/elementwise/greater_equal", "functional/ivy/elementwise/greater_equal/greater_equal_array", "functional/ivy/elementwise/greater_equal/greater_equal_container", "functional/ivy/elementwise/greater_equal/greater_equal_functional", "functional/ivy/elementwise/isfinite", "functional/ivy/elementwise/isfinite/isfinite_array", "functional/ivy/elementwise/isfinite/isfinite_container", "functional/ivy/elementwise/isfinite/isfinite_functional", "functional/ivy/elementwise/isinf", "functional/ivy/elementwise/isinf/isinf_array", "functional/ivy/elementwise/isinf/isinf_container", "functional/ivy/elementwise/isinf/isinf_functional", "functional/ivy/elementwise/isnan", "functional/ivy/elementwise/isnan/isnan_array", "functional/ivy/elementwise/isnan/isnan_container", "functional/ivy/elementwise/isnan/isnan_functional", "functional/ivy/elementwise/less", "functional/ivy/elementwise/less/less_array", "functional/ivy/elementwise/less/less_container", "functional/ivy/elementwise/less/less_functional", "functional/ivy/elementwise/less_equal", "functional/ivy/elementwise/less_equal/less_equal_array", "functional/ivy/elementwise/less_equal/less_equal_container", "functional/ivy/elementwise/less_equal/less_equal_functional", "functional/ivy/elementwise/log", "functional/ivy/elementwise/log/log_array", "functional/ivy/elementwise/log/log_container", "functional/ivy/elementwise/log/log_functional", "functional/ivy/elementwise/log10", "functional/ivy/elementwise/log10/log10_array", "functional/ivy/elementwise/log10/log10_container", "functional/ivy/elementwise/log10/log10_functional", "functional/ivy/elementwise/log1p", "functional/ivy/elementwise/log1p/log1p_array", "functional/ivy/elementwise/log1p/log1p_container", "functional/ivy/elementwise/log1p/log1p_functional", "functional/ivy/elementwise/log2", "functional/ivy/elementwise/log2/log2_array", "functional/ivy/elementwise/log2/log2_container", "functional/ivy/elementwise/log2/log2_functional", "functional/ivy/elementwise/logaddexp", "functional/ivy/elementwise/logaddexp/logaddexp_array", "functional/ivy/elementwise/logaddexp/logaddexp_container", "functional/ivy/elementwise/logaddexp/logaddexp_functional", "functional/ivy/elementwise/logical_and", "functional/ivy/elementwise/logical_and/logical_and_array", "functional/ivy/elementwise/logical_and/logical_and_container", "functional/ivy/elementwise/logical_and/logical_and_functional", "functional/ivy/elementwise/logical_not", "functional/ivy/elementwise/logical_not/logical_not_array", "functional/ivy/elementwise/logical_not/logical_not_container", "functional/ivy/elementwise/logical_not/logical_not_functional", "functional/ivy/elementwise/logical_or", "functional/ivy/elementwise/logical_or/logical_or_array", "functional/ivy/elementwise/logical_or/logical_or_container", "functional/ivy/elementwise/logical_or/logical_or_functional", "functional/ivy/elementwise/logical_xor", "functional/ivy/elementwise/logical_xor/logical_xor_array", "functional/ivy/elementwise/logical_xor/logical_xor_container", "functional/ivy/elementwise/logical_xor/logical_xor_functional", "functional/ivy/elementwise/maximum", "functional/ivy/elementwise/minimum", "functional/ivy/elementwise/multiply", "functional/ivy/elementwise/multiply/multiply_array", "functional/ivy/elementwise/multiply/multiply_container", "functional/ivy/elementwise/multiply/multiply_functional", "functional/ivy/elementwise/multiply/static_multiply_container", "functional/ivy/elementwise/negative", "functional/ivy/elementwise/negative/negative_array", "functional/ivy/elementwise/negative/negative_container", "functional/ivy/elementwise/negative/negative_functional", "functional/ivy/elementwise/not_equal", "functional/ivy/elementwise/not_equal/not_equal_array", "functional/ivy/elementwise/not_equal/not_equal_container", "functional/ivy/elementwise/not_equal/not_equal_functional", "functional/ivy/elementwise/positive", "functional/ivy/elementwise/positive/positive_array", "functional/ivy/elementwise/positive/positive_container", "functional/ivy/elementwise/positive/positive_functional", "functional/ivy/elementwise/pow", "functional/ivy/elementwise/pow/pow_array", "functional/ivy/elementwise/pow/pow_container", "functional/ivy/elementwise/pow/pow_functional", "functional/ivy/elementwise/remainder", "functional/ivy/elementwise/remainder/remainder_array", "functional/ivy/elementwise/remainder/remainder_container", "functional/ivy/elementwise/remainder/remainder_functional", "functional/ivy/elementwise/round", "functional/ivy/elementwise/round/round_array", "functional/ivy/elementwise/round/round_container", "functional/ivy/elementwise/round/round_functional", "functional/ivy/elementwise/sign", "functional/ivy/elementwise/sign/sign_array", "functional/ivy/elementwise/sign/sign_container", "functional/ivy/elementwise/sign/sign_functional", "functional/ivy/elementwise/sin", "functional/ivy/elementwise/sin/sin_array", "functional/ivy/elementwise/sin/sin_container", "functional/ivy/elementwise/sin/sin_functional", "functional/ivy/elementwise/sinh", "functional/ivy/elementwise/sinh/sinh_array", "functional/ivy/elementwise/sinh/sinh_container", "functional/ivy/elementwise/sinh/sinh_functional", "functional/ivy/elementwise/sqrt", "functional/ivy/elementwise/sqrt/sqrt_array", "functional/ivy/elementwise/sqrt/sqrt_container", "functional/ivy/elementwise/sqrt/sqrt_functional", "functional/ivy/elementwise/square", "functional/ivy/elementwise/square/square_array", "functional/ivy/elementwise/square/square_container", "functional/ivy/elementwise/square/square_functional", "functional/ivy/elementwise/subtract", "functional/ivy/elementwise/subtract/static_subtract_container", "functional/ivy/elementwise/subtract/subtract_array", "functional/ivy/elementwise/subtract/subtract_container", "functional/ivy/elementwise/subtract/subtract_functional", "functional/ivy/elementwise/tan", "functional/ivy/elementwise/tan/static_tan_container", "functional/ivy/elementwise/tan/tan_array", "functional/ivy/elementwise/tan/tan_container", "functional/ivy/elementwise/tan/tan_functional", "functional/ivy/elementwise/tanh", "functional/ivy/elementwise/tanh/static_tanh_container", "functional/ivy/elementwise/tanh/tanh_array", "functional/ivy/elementwise/tanh/tanh_container", "functional/ivy/elementwise/tanh/tanh_functional", "functional/ivy/elementwise/trunc", "functional/ivy/elementwise/trunc/trunc_array", "functional/ivy/elementwise/trunc/trunc_container", "functional/ivy/elementwise/trunc/trunc_functional", "functional/ivy/general", "functional/ivy/general/all_equal", "functional/ivy/general/all_equal/all_equal_array", "functional/ivy/general/all_equal/all_equal_container", "functional/ivy/general/all_equal/all_equal_functional", "functional/ivy/general/all_equal/static_all_equal_container", "functional/ivy/general/arg_info", "functional/ivy/general/arg_names", "functional/ivy/general/array_equal", "functional/ivy/general/arrays_equal", "functional/ivy/general/assert_supports_inplace", "functional/ivy/general/cache_fn", "functional/ivy/general/clip_matrix_norm", "functional/ivy/general/clip_vector_norm", "functional/ivy/general/clip_vector_norm/clip_vector_norm_container", "functional/ivy/general/clip_vector_norm/clip_vector_norm_functional", "functional/ivy/general/container_types", "functional/ivy/general/copy_array", "functional/ivy/general/cumprod", "functional/ivy/general/cumsum", "functional/ivy/general/current_backend_str", "functional/ivy/general/default", "functional/ivy/general/einops_rearrange", "functional/ivy/general/einops_reduce", "functional/ivy/general/einops_repeat", "functional/ivy/general/exists", "functional/ivy/general/floormod", "functional/ivy/general/fourier_encode", "functional/ivy/general/gather", "functional/ivy/general/gather_nd", "functional/ivy/general/gather_nd/gather_nd_array", "functional/ivy/general/gather_nd/gather_nd_container", "functional/ivy/general/gather_nd/gather_nd_functional", "functional/ivy/general/gather_nd/static_gather_nd_container", "functional/ivy/general/get_all_arrays_in_memory", "functional/ivy/general/get_min_base", "functional/ivy/general/get_min_denominator", "functional/ivy/general/get_num_dims", "functional/ivy/general/get_referrers_recursive", "functional/ivy/general/has_nans", "functional/ivy/general/indices_where", "functional/ivy/general/inplace_arrays_supported", "functional/ivy/general/inplace_decrement", "functional/ivy/general/inplace_increment", "functional/ivy/general/inplace_update", "functional/ivy/general/inplace_variables_supported", "functional/ivy/general/is_array", "functional/ivy/general/is_ivy_array", "functional/ivy/general/is_ivy_container", "functional/ivy/general/is_native_array", "functional/ivy/general/match_kwargs", "functional/ivy/general/multiprocessing", "functional/ivy/general/num_arrays_in_memory", "functional/ivy/general/one_hot", "functional/ivy/general/print_all_arrays_in_memory", "functional/ivy/general/queue_timeout", "functional/ivy/general/scatter_flat", "functional/ivy/general/scatter_nd", "functional/ivy/general/set_min_base", "functional/ivy/general/set_min_denominator", "functional/ivy/general/set_queue_timeout", "functional/ivy/general/set_tmp_dir", "functional/ivy/general/shape", "functional/ivy/general/shape_to_tuple", "functional/ivy/general/stable_divide", "functional/ivy/general/stable_pow", "functional/ivy/general/supports_inplace", "functional/ivy/general/tmp_dir", "functional/ivy/general/to_list", "functional/ivy/general/to_numpy", "functional/ivy/general/to_scalar", "functional/ivy/general/try_else_none", "functional/ivy/general/unstack", "functional/ivy/general/value_is_nan", "functional/ivy/gradients", "functional/ivy/gradients/GradientTracking:\n    \"\"\"\"\"\"\n\n    # noinspection PyShadowingNames\n    def __init__", "functional/ivy/gradients/adam_step", "functional/ivy/gradients/adam_update", "functional/ivy/gradients/adam_update/adam_update_container", "functional/ivy/gradients/adam_update/adam_update_functional", "functional/ivy/gradients/adam_update/static_adam_update_container", "functional/ivy/gradients/execute_with_gradients", "functional/ivy/gradients/gradient_descent_update", "functional/ivy/gradients/gradient_descent_update/gradient_descent_update_container", "functional/ivy/gradients/gradient_descent_update/gradient_descent_update_functional", "functional/ivy/gradients/gradient_descent_update/static_gradient_descent_update_container", "functional/ivy/gradients/is_variable", "functional/ivy/gradients/lamb_update", "functional/ivy/gradients/lamb_update/lamb_update_container", "functional/ivy/gradients/lamb_update/lamb_update_functional", "functional/ivy/gradients/lamb_update/static_lamb_update_container", "functional/ivy/gradients/lars_update", "functional/ivy/gradients/lars_update/lars_update_container", "functional/ivy/gradients/lars_update/lars_update_functional", "functional/ivy/gradients/lars_update/static_lars_update_container", "functional/ivy/gradients/optimizer_update", "functional/ivy/gradients/optimizer_update/optimizer_update_container", "functional/ivy/gradients/optimizer_update/optimizer_update_functional", "functional/ivy/gradients/optimizer_update/static_optimizer_update_container", "functional/ivy/gradients/set_with_grads", "functional/ivy/gradients/stop_gradient", "functional/ivy/gradients/unset_with_grads", "functional/ivy/gradients/variable", "functional/ivy/gradients/variable_data", "functional/ivy/gradients/with_grads", "functional/ivy/layers", "functional/ivy/layers/conv1d", "functional/ivy/layers/conv1d_transpose", "functional/ivy/layers/conv2d", "functional/ivy/layers/conv2d_transpose", "functional/ivy/layers/conv3d", "functional/ivy/layers/conv3d_transpose", "functional/ivy/layers/depthwise_conv2d", "functional/ivy/layers/dropout", "functional/ivy/layers/linear", "functional/ivy/layers/lstm_update", "functional/ivy/layers/multi_head_attention", "functional/ivy/layers/scaled_dot_product_attention", "functional/ivy/linear_algebra", "functional/ivy/linear_algebra/cholesky", "functional/ivy/linear_algebra/cholesky/cholesky_array", "functional/ivy/linear_algebra/cholesky/cholesky_functional", "functional/ivy/linear_algebra/cross", "functional/ivy/linear_algebra/cross/cross_array", "functional/ivy/linear_algebra/cross/cross_functional", "functional/ivy/linear_algebra/det", "functional/ivy/linear_algebra/det/det_array", "functional/ivy/linear_algebra/det/det_functional", "functional/ivy/linear_algebra/diagonal", "functional/ivy/linear_algebra/diagonal/diagonal_array", "functional/ivy/linear_algebra/diagonal/diagonal_functional", "functional/ivy/linear_algebra/eigh", "functional/ivy/linear_algebra/eigh/eigh_array", "functional/ivy/linear_algebra/eigh/eigh_functional", "functional/ivy/linear_algebra/eigvalsh", "functional/ivy/linear_algebra/eigvalsh/eigvalsh_array", "functional/ivy/linear_algebra/eigvalsh/eigvalsh_functional", "functional/ivy/linear_algebra/inv", "functional/ivy/linear_algebra/inv/inv_array", "functional/ivy/linear_algebra/inv/inv_functional", "functional/ivy/linear_algebra/matmul", "functional/ivy/linear_algebra/matmul/matmul_array", "functional/ivy/linear_algebra/matmul/matmul_container", "functional/ivy/linear_algebra/matmul/matmul_functional", "functional/ivy/linear_algebra/matrix_norm", "functional/ivy/linear_algebra/matrix_norm/matrix_norm_array", "functional/ivy/linear_algebra/matrix_norm/matrix_norm_functional", "functional/ivy/linear_algebra/matrix_power", "functional/ivy/linear_algebra/matrix_rank", "functional/ivy/linear_algebra/matrix_rank/matrix_rank_array", "functional/ivy/linear_algebra/matrix_rank/matrix_rank_functional", "functional/ivy/linear_algebra/matrix_transpose", "functional/ivy/linear_algebra/matrix_transpose/matrix_transpose_array", "functional/ivy/linear_algebra/matrix_transpose/matrix_transpose_functional", "functional/ivy/linear_algebra/outer", "functional/ivy/linear_algebra/outer/outer_array", "functional/ivy/linear_algebra/outer/outer_functional", "functional/ivy/linear_algebra/pinv", "functional/ivy/linear_algebra/pinv/pinv_array", "functional/ivy/linear_algebra/pinv/pinv_functional", "functional/ivy/linear_algebra/qr", "functional/ivy/linear_algebra/qr/qr_array", "functional/ivy/linear_algebra/qr/qr_functional", "functional/ivy/linear_algebra/slogdet", "functional/ivy/linear_algebra/solve", "functional/ivy/linear_algebra/solve/solve_array", "functional/ivy/linear_algebra/solve/solve_functional", "functional/ivy/linear_algebra/svd", "functional/ivy/linear_algebra/svd/svd_array", "functional/ivy/linear_algebra/svd/svd_functional", "functional/ivy/linear_algebra/svdvals", "functional/ivy/linear_algebra/svdvals/svdvals_array", "functional/ivy/linear_algebra/svdvals/svdvals_functional", "functional/ivy/linear_algebra/tensordot", "functional/ivy/linear_algebra/tensordot/tensordot_array", "functional/ivy/linear_algebra/tensordot/tensordot_functional", "functional/ivy/linear_algebra/trace", "functional/ivy/linear_algebra/trace/trace_array", "functional/ivy/linear_algebra/trace/trace_functional", "functional/ivy/linear_algebra/vecdot", "functional/ivy/linear_algebra/vecdot/vecdot_array", "functional/ivy/linear_algebra/vecdot/vecdot_functional", "functional/ivy/linear_algebra/vector_norm", "functional/ivy/linear_algebra/vector_norm/vector_norm_array", "functional/ivy/linear_algebra/vector_norm/vector_norm_functional", "functional/ivy/linear_algebra/vector_to_skew_symmetric_matrix", "functional/ivy/linear_algebra/vector_to_skew_symmetric_matrix/vector_to_skew_symmetric_matrix_array", "functional/ivy/linear_algebra/vector_to_skew_symmetric_matrix/vector_to_skew_symmetric_matrix_functional", "functional/ivy/losses", "functional/ivy/losses/binary_cross_entropy", "functional/ivy/losses/binary_cross_entropy/binary_cross_entropy_array", "functional/ivy/losses/binary_cross_entropy/binary_cross_entropy_container", "functional/ivy/losses/binary_cross_entropy/binary_cross_entropy_functional", "functional/ivy/losses/binary_cross_entropy/static_binary_cross_entropy_container", "functional/ivy/losses/cross_entropy", "functional/ivy/losses/cross_entropy/cross_entropy_array", "functional/ivy/losses/cross_entropy/cross_entropy_container", "functional/ivy/losses/cross_entropy/cross_entropy_functional", "functional/ivy/losses/cross_entropy/static_cross_entropy_container", "functional/ivy/losses/sparse_cross_entropy", "functional/ivy/losses/sparse_cross_entropy/sparse_cross_entropy_array", "functional/ivy/losses/sparse_cross_entropy/sparse_cross_entropy_container", "functional/ivy/losses/sparse_cross_entropy/sparse_cross_entropy_functional", "functional/ivy/losses/sparse_cross_entropy/static_sparse_cross_entropy_container", "functional/ivy/manipulation", "functional/ivy/manipulation/clip", "functional/ivy/manipulation/clip/clip_array", "functional/ivy/manipulation/clip/clip_container", "functional/ivy/manipulation/clip/clip_functional", "functional/ivy/manipulation/clip/static_clip_container", "functional/ivy/manipulation/concat", "functional/ivy/manipulation/concat/concat_array", "functional/ivy/manipulation/concat/concat_container", "functional/ivy/manipulation/concat/concat_functional", "functional/ivy/manipulation/constant_pad", "functional/ivy/manipulation/constant_pad/constant_pad_array", "functional/ivy/manipulation/constant_pad/constant_pad_container", "functional/ivy/manipulation/constant_pad/constant_pad_functional", "functional/ivy/manipulation/expand_dims", "functional/ivy/manipulation/expand_dims/expand_dims_array", "functional/ivy/manipulation/expand_dims/expand_dims_container", "functional/ivy/manipulation/expand_dims/expand_dims_functional", "functional/ivy/manipulation/flip", "functional/ivy/manipulation/flip/flip_array", "functional/ivy/manipulation/flip/flip_container", "functional/ivy/manipulation/flip/flip_functional", "functional/ivy/manipulation/permute_dims", "functional/ivy/manipulation/permute_dims/permute_dims_array", "functional/ivy/manipulation/permute_dims/permute_dims_container", "functional/ivy/manipulation/permute_dims/permute_dims_functional", "functional/ivy/manipulation/repeat", "functional/ivy/manipulation/repeat/repeat_array", "functional/ivy/manipulation/repeat/repeat_container", "functional/ivy/manipulation/repeat/repeat_functional", "functional/ivy/manipulation/reshape", "functional/ivy/manipulation/reshape/reshape_array", "functional/ivy/manipulation/reshape/reshape_container", "functional/ivy/manipulation/reshape/reshape_functional", "functional/ivy/manipulation/roll", "functional/ivy/manipulation/roll/roll_array", "functional/ivy/manipulation/roll/roll_container", "functional/ivy/manipulation/roll/roll_functional", "functional/ivy/manipulation/roll/static_roll_container", "functional/ivy/manipulation/split", "functional/ivy/manipulation/squeeze", "functional/ivy/manipulation/squeeze/squeeze_array", "functional/ivy/manipulation/squeeze/squeeze_container", "functional/ivy/manipulation/squeeze/squeeze_functional", "functional/ivy/manipulation/stack", "functional/ivy/manipulation/stack/stack_array", "functional/ivy/manipulation/stack/stack_container", "functional/ivy/manipulation/stack/stack_functional", "functional/ivy/manipulation/swapaxes", "functional/ivy/manipulation/swapaxes/swapaxes_array", "functional/ivy/manipulation/swapaxes/swapaxes_container", "functional/ivy/manipulation/swapaxes/swapaxes_functional", "functional/ivy/manipulation/tile", "functional/ivy/manipulation/tile/tile_array", "functional/ivy/manipulation/tile/tile_container", "functional/ivy/manipulation/tile/tile_functional", "functional/ivy/manipulation/zero_pad", "functional/ivy/manipulation/zero_pad/zero_pad_array", "functional/ivy/manipulation/zero_pad/zero_pad_container", "functional/ivy/manipulation/zero_pad/zero_pad_functional", "functional/ivy/meta", "functional/ivy/meta/fomaml_step", "functional/ivy/meta/maml_step", "functional/ivy/meta/reptile_step", "functional/ivy/nest", "functional/ivy/nest/all_nested_indices", "functional/ivy/nest/copy_nest", "functional/ivy/nest/index_nest", "functional/ivy/nest/insert_into_nest_at_index", "functional/ivy/nest/insert_into_nest_at_indices", "functional/ivy/nest/map", "functional/ivy/nest/map_nest_at_index", "functional/ivy/nest/map_nest_at_indices", "functional/ivy/nest/multi_index_nest", "functional/ivy/nest/nested_any", "functional/ivy/nest/nested_indices_where", "functional/ivy/nest/nested_map", "functional/ivy/nest/nested_multi_map", "functional/ivy/nest/prune_nest_at_index", "functional/ivy/nest/prune_nest_at_indices", "functional/ivy/nest/set_nest_at_index", "functional/ivy/nest/set_nest_at_indices", "functional/ivy/norms", "functional/ivy/norms/layer_norm", "functional/ivy/norms/layer_norm/layer_norm_array", "functional/ivy/norms/layer_norm/layer_norm_container", "functional/ivy/norms/layer_norm/layer_norm_functional", "functional/ivy/random", "functional/ivy/random/multinomial", "functional/ivy/random/randint", "functional/ivy/random/randint/randint_functional", "functional/ivy/random/randint/static_randint_container", "functional/ivy/random/random_normal", "functional/ivy/random/random_uniform", "functional/ivy/random/random_uniform/random_uniform_container", "functional/ivy/random/random_uniform/random_uniform_functional", "functional/ivy/random/random_uniform/static_random_uniform_container", "functional/ivy/random/seed", "functional/ivy/random/shuffle", "functional/ivy/searching", "functional/ivy/searching/argmax", "functional/ivy/searching/argmin", "functional/ivy/searching/nonzero", "functional/ivy/searching/where", "functional/ivy/set", "functional/ivy/set/unique_all", "functional/ivy/set/unique_counts", "functional/ivy/set/unique_inverse", "functional/ivy/set/unique_values", "functional/ivy/sorting", "functional/ivy/sorting/argsort", "functional/ivy/sorting/argsort/argsort_array", "functional/ivy/sorting/argsort/argsort_container", "functional/ivy/sorting/argsort/argsort_functional", "functional/ivy/sorting/argsort/static_argsort_container", "functional/ivy/sorting/sort", "functional/ivy/sorting/sort/sort_array", "functional/ivy/sorting/sort/sort_container", "functional/ivy/sorting/sort/sort_functional", "functional/ivy/sorting/sort/static_sort_container", "functional/ivy/statistical", "functional/ivy/statistical/einsum", "functional/ivy/statistical/einsum/einsum_array", "functional/ivy/statistical/einsum/einsum_container", "functional/ivy/statistical/einsum/einsum_functional", "functional/ivy/statistical/max", "functional/ivy/statistical/max/max_array", "functional/ivy/statistical/max/max_container", "functional/ivy/statistical/max/max_functional", "functional/ivy/statistical/mean", "functional/ivy/statistical/mean/mean_array", "functional/ivy/statistical/mean/mean_container", "functional/ivy/statistical/mean/mean_functional", "functional/ivy/statistical/min", "functional/ivy/statistical/min/min_array", "functional/ivy/statistical/min/min_container", "functional/ivy/statistical/min/min_functional", "functional/ivy/statistical/prod", "functional/ivy/statistical/prod/prod_array", "functional/ivy/statistical/prod/prod_container", "functional/ivy/statistical/prod/prod_functional", "functional/ivy/statistical/std", "functional/ivy/statistical/std/std_array", "functional/ivy/statistical/std/std_container", "functional/ivy/statistical/std/std_functional", "functional/ivy/statistical/sum", "functional/ivy/statistical/sum/sum_array", "functional/ivy/statistical/sum/sum_container", "functional/ivy/statistical/sum/sum_functional", "functional/ivy/statistical/var", "functional/ivy/statistical/var/var_array", "functional/ivy/statistical/var/var_container", "functional/ivy/statistical/var/var_functional", "functional/ivy/utility", "functional/ivy/utility/all", "functional/ivy/utility/all/all_array", "functional/ivy/utility/all/all_container", "functional/ivy/utility/all/all_functional", "functional/ivy/utility/any", "functional/ivy/utility/any/any_array", "functional/ivy/utility/any/any_container", "functional/ivy/utility/any/any_functional", "index", "index_append", "index_prepend", "inspection", "inspection/add_array_specs", "inspection/fn_array_spec", "roadmap", "stateful/activations", "stateful/activations/GEGLU", "stateful/activations/GELU", "stateful/converters", "stateful/converters/to_ivy_module", "stateful/initializers", "stateful/initializers/Constant:\n    def __init__", "stateful/initializers/FirstLayerSiren", "stateful/initializers/GlorotUniform", "stateful/initializers/KaimingNormal:\n    def __init__", "stateful/initializers/Ones", "stateful/initializers/Siren", "stateful/initializers/Uniform:\n    def __init__", "stateful/initializers/Zeros", "stateful/layers", "stateful/layers/Conv1D", "stateful/layers/Conv1DTranspose", "stateful/layers/Conv2D", "stateful/layers/Conv2DTranspose", "stateful/layers/Conv3D", "stateful/layers/Conv3DTranspose", "stateful/layers/DepthwiseConv2D", "stateful/layers/Dropout", "stateful/layers/LSTM", "stateful/layers/Linear", "stateful/layers/MultiHeadAttention", "stateful/module", "stateful/module/Module", "stateful/norms", "stateful/norms/LayerNorm", "stateful/optimizers", "stateful/optimizers/Adam", "stateful/optimizers/LAMB", "stateful/optimizers/LARS", "stateful/optimizers/Optimizer", "stateful/optimizers/SGD", "stateful/sequential", "stateful/sequential/Sequential", "supported_frameworks", "verbosity", "verbosity/cprint"], "filenames": ["array/activations.rst", "array/activations/ArrayWithActivations.rst", "array/array_methods.rst", "array/array_methods/abs.rst", "array/array_methods/acos.rst", "array/array_methods/acosh.rst", "array/array_methods/add.rst", "array/array_methods/all.rst", "array/array_methods/all_equal.rst", "array/array_methods/any.rst", "array/array_methods/argsort.rst", "array/array_methods/asin.rst", "array/array_methods/asinh.rst", "array/array_methods/atan.rst", "array/array_methods/atan2.rst", "array/array_methods/atanh.rst", "array/array_methods/binary_cross_entropy.rst", "array/array_methods/bitwise_and.rst", "array/array_methods/bitwise_invert.rst", "array/array_methods/bitwise_left_shift.rst", "array/array_methods/bitwise_or.rst", "array/array_methods/bitwise_right_shift.rst", "array/array_methods/bitwise_xor.rst", "array/array_methods/can_cast.rst", "array/array_methods/ceil.rst", "array/array_methods/cholesky.rst", "array/array_methods/clip.rst", "array/array_methods/concat.rst", "array/array_methods/constant_pad.rst", "array/array_methods/cos.rst", "array/array_methods/cosh.rst", "array/array_methods/cross.rst", "array/array_methods/cross_entropy.rst", "array/array_methods/det.rst", "array/array_methods/diagonal.rst", "array/array_methods/divide.rst", "array/array_methods/eigh.rst", "array/array_methods/eigvalsh.rst", "array/array_methods/einsum.rst", "array/array_methods/equal.rst", "array/array_methods/erf.rst", "array/array_methods/exp.rst", "array/array_methods/expand_dims.rst", "array/array_methods/expm1.rst", "array/array_methods/flip.rst", "array/array_methods/floor.rst", "array/array_methods/floor_divide.rst", "array/array_methods/gather_nd.rst", "array/array_methods/greater.rst", "array/array_methods/greater_equal.rst", "array/array_methods/inv.rst", "array/array_methods/isfinite.rst", "array/array_methods/isinf.rst", "array/array_methods/isnan.rst", "array/array_methods/layer_norm.rst", "array/array_methods/less.rst", "array/array_methods/less_equal.rst", "array/array_methods/log.rst", "array/array_methods/log10.rst", "array/array_methods/log1p.rst", "array/array_methods/log2.rst", "array/array_methods/logaddexp.rst", "array/array_methods/logical_and.rst", "array/array_methods/logical_not.rst", "array/array_methods/logical_or.rst", "array/array_methods/logical_xor.rst", "array/array_methods/matmul.rst", "array/array_methods/matrix_norm.rst", "array/array_methods/matrix_rank.rst", "array/array_methods/matrix_transpose.rst", "array/array_methods/max.rst", "array/array_methods/mean.rst", "array/array_methods/min.rst", "array/array_methods/multiply.rst", "array/array_methods/negative.rst", "array/array_methods/not_equal.rst", "array/array_methods/outer.rst", "array/array_methods/permute_dims.rst", "array/array_methods/pinv.rst", "array/array_methods/positive.rst", "array/array_methods/pow.rst", "array/array_methods/prod.rst", "array/array_methods/qr.rst", "array/array_methods/remainder.rst", "array/array_methods/repeat.rst", "array/array_methods/reshape.rst", "array/array_methods/roll.rst", "array/array_methods/round.rst", "array/array_methods/sign.rst", "array/array_methods/sin.rst", "array/array_methods/sinh.rst", "array/array_methods/solve.rst", "array/array_methods/sort.rst", "array/array_methods/sparse_cross_entropy.rst", "array/array_methods/sqrt.rst", "array/array_methods/square.rst", "array/array_methods/squeeze.rst", "array/array_methods/stack.rst", "array/array_methods/std.rst", "array/array_methods/subtract.rst", "array/array_methods/sum.rst", "array/array_methods/svd.rst", "array/array_methods/svdvals.rst", "array/array_methods/swapaxes.rst", "array/array_methods/tan.rst", "array/array_methods/tanh.rst", "array/array_methods/tensordot.rst", "array/array_methods/tile.rst", "array/array_methods/trace.rst", "array/array_methods/trunc.rst", "array/array_methods/var.rst", "array/array_methods/vecdot.rst", "array/array_methods/vector_norm.rst", "array/array_methods/vector_to_skew_symmetric_matrix.rst", "array/array_methods/zero_pad.rst", "array/conversions.rst", "array/conversions/args_to_ivy.rst", "array/conversions/args_to_native.rst", "array/conversions/to_ivy.rst", "array/conversions/to_native.rst", "array/creation.rst", "array/creation/ArrayWithCreation.rst", "array/data_type.rst", "array/data_type/ArrayWithDataTypes.rst", "array/device.rst", "array/device/ArrayWithDevice.rst", "array/elementwise.rst", "array/elementwise/ArrayWithElementwise.rst", "array/general.rst", "array/general/ArrayWithGeneral.rst", "array/gradients.rst", "array/gradients/ArrayWithGradients.rst", "array/image.rst", "array/image/ArrayWithImage.rst", "array/layers.rst", "array/layers/ArrayWithLayers.rst", "array/linear_algebra.rst", "array/linear_algebra/ArrayWithLinearAlgebra.rst", "array/losses.rst", "array/losses/ArrayWithLosses.rst", "array/manipulation.rst", "array/manipulation/ArrayWithManipulation.rst", "array/norms.rst", "array/norms/ArrayWithNorms.rst", "array/random.rst", "array/random/ArrayWithRandom.rst", "array/searching.rst", "array/searching/ArrayWithSearching.rst", "array/set.rst", "array/set/ArrayWithSet.rst", "array/sorting.rst", "array/sorting/ArrayWithSorting.rst", "array/statistical.rst", "array/statistical/ArrayWithStatistical.rst", "array/utility.rst", "array/utility/ArrayWithUtility.rst", "array/wrapping.rst", "array/wrapping/add_ivy_array_instance_methods.rst", "backend_handler.rst", "backend_handler/ContextManager:\n    def __init__.rst", "backend_handler/choose_random_backend.rst", "backend_handler/clear_backend_stack.rst", "backend_handler/current_backend.rst", "backend_handler/get_backend.rst", "backend_handler/set_backend.rst", "backend_handler/try_import_ivy_jax.rst", "backend_handler/try_import_ivy_mxnet.rst", "backend_handler/try_import_ivy_numpy.rst", "backend_handler/try_import_ivy_tf.rst", "backend_handler/try_import_ivy_torch.rst", "backend_handler/unset_backend.rst", "background.rst", "background/ml_explosion.rst", "background/standardization.rst", "background/why_unify.rst", "container/activations.rst", "container/activations/ContainerWithActivations.rst", "container/base.rst", "container/base/ContainerBase.rst", "container/container.rst", "container/container/Container.rst", "container/container/MultiDevContainer.rst", "container/container_methods.rst", "container/container_methods/abs.rst", "container/container_methods/acos.rst", "container/container_methods/acosh.rst", "container/container_methods/adam_update.rst", "container/container_methods/add.rst", "container/container_methods/all.rst", "container/container_methods/all_equal.rst", "container/container_methods/any.rst", "container/container_methods/argsort.rst", "container/container_methods/asin.rst", "container/container_methods/asinh.rst", "container/container_methods/at_dev.rst", "container/container_methods/at_devs.rst", "container/container_methods/atan.rst", "container/container_methods/atan2.rst", "container/container_methods/atanh.rst", "container/container_methods/binary_cross_entropy.rst", "container/container_methods/bitwise_and.rst", "container/container_methods/bitwise_invert.rst", "container/container_methods/bitwise_left_shift.rst", "container/container_methods/bitwise_or.rst", "container/container_methods/bitwise_right_shift.rst", "container/container_methods/bitwise_xor.rst", "container/container_methods/can_cast.rst", "container/container_methods/ceil.rst", "container/container_methods/clip.rst", "container/container_methods/clip_vector_norm.rst", "container/container_methods/concat.rst", "container/container_methods/constant_pad.rst", "container/container_methods/cos.rst", "container/container_methods/cosh.rst", "container/container_methods/cross_entropy.rst", "container/container_methods/divide.rst", "container/container_methods/einsum.rst", "container/container_methods/equal.rst", "container/container_methods/erf.rst", "container/container_methods/exp.rst", "container/container_methods/expand_dims.rst", "container/container_methods/expm1.rst", "container/container_methods/flip.rst", "container/container_methods/floor.rst", "container/container_methods/floor_divide.rst", "container/container_methods/gather_nd.rst", "container/container_methods/gradient_descent_update.rst", "container/container_methods/greater.rst", "container/container_methods/greater_equal.rst", "container/container_methods/isfinite.rst", "container/container_methods/isinf.rst", "container/container_methods/isnan.rst", "container/container_methods/lamb_update.rst", "container/container_methods/lars_update.rst", "container/container_methods/layer_norm.rst", "container/container_methods/less.rst", "container/container_methods/less_equal.rst", "container/container_methods/log.rst", "container/container_methods/log10.rst", "container/container_methods/log1p.rst", "container/container_methods/log2.rst", "container/container_methods/logaddexp.rst", "container/container_methods/logical_and.rst", "container/container_methods/logical_not.rst", "container/container_methods/logical_or.rst", "container/container_methods/logical_xor.rst", "container/container_methods/matmul.rst", "container/container_methods/max.rst", "container/container_methods/mean.rst", "container/container_methods/min.rst", "container/container_methods/multiply.rst", "container/container_methods/negative.rst", "container/container_methods/not_equal.rst", "container/container_methods/optimizer_update.rst", "container/container_methods/permute_dims.rst", "container/container_methods/positive.rst", "container/container_methods/pow.rst", "container/container_methods/prod.rst", "container/container_methods/random_uniform.rst", "container/container_methods/remainder.rst", "container/container_methods/repeat.rst", "container/container_methods/reshape.rst", "container/container_methods/roll.rst", "container/container_methods/round.rst", "container/container_methods/sign.rst", "container/container_methods/sin.rst", "container/container_methods/sinh.rst", "container/container_methods/sort.rst", "container/container_methods/sparse_cross_entropy.rst", "container/container_methods/sqrt.rst", "container/container_methods/square.rst", "container/container_methods/squeeze.rst", "container/container_methods/stack.rst", "container/container_methods/static_adam_update.rst", "container/container_methods/static_add.rst", "container/container_methods/static_all_equal.rst", "container/container_methods/static_argsort.rst", "container/container_methods/static_binary_cross_entropy.rst", "container/container_methods/static_can_cast.rst", "container/container_methods/static_clip.rst", "container/container_methods/static_cross_entropy.rst", "container/container_methods/static_divide.rst", "container/container_methods/static_gather_nd.rst", "container/container_methods/static_gradient_descent_update.rst", "container/container_methods/static_lamb_update.rst", "container/container_methods/static_lars_update.rst", "container/container_methods/static_multiply.rst", "container/container_methods/static_optimizer_update.rst", "container/container_methods/static_randint.rst", "container/container_methods/static_random_uniform.rst", "container/container_methods/static_roll.rst", "container/container_methods/static_sort.rst", "container/container_methods/static_sparse_cross_entropy.rst", "container/container_methods/static_subtract.rst", "container/container_methods/static_tan.rst", "container/container_methods/static_tanh.rst", "container/container_methods/std.rst", "container/container_methods/subtract.rst", "container/container_methods/sum.rst", "container/container_methods/swapaxes.rst", "container/container_methods/tan.rst", "container/container_methods/tanh.rst", "container/container_methods/tile.rst", "container/container_methods/trunc.rst", "container/container_methods/var.rst", "container/container_methods/zero_pad.rst", "container/creation.rst", "container/creation/ContainerWithCreation.rst", "container/data_type.rst", "container/data_type/ContainerWithDataTypes.rst", "container/device.rst", "container/device/ContainerWithDevice.rst", "container/elementwise.rst", "container/elementwise/ContainerWithElementwise.rst", "container/general.rst", "container/general/ContainerWithGeneral.rst", "container/gradients.rst", "container/gradients/ContainerWithGradients.rst", "container/image.rst", "container/image/ContainerWithImage.rst", "container/layers.rst", "container/layers/ContainerWithLayers.rst", "container/linear_algebra.rst", "container/linear_algebra/ContainerWithLinearAlgebra.rst", "container/losses.rst", "container/losses/ContainerWithLosses.rst", "container/manipulation.rst", "container/manipulation/ContainerWithManipulation.rst", "container/norms.rst", "container/norms/ContainerWithNorms.rst", "container/random.rst", "container/random/ContainerWithRandom.rst", "container/searching.rst", "container/searching/ContainerWithSearching.rst", "container/set.rst", "container/set/ContainerWithSet.rst", "container/sorting.rst", "container/sorting/ContainerWithSorting.rst", "container/statistical.rst", "container/statistical/ContainerWithStatistical.rst", "container/utility.rst", "container/utility/ContainerWithUtility.rst", "container/wrapping.rst", "container/wrapping/add_ivy_container_instance_methods.rst", "contributing.rst", "contributing/0_setting_up.rst", "contributing/1_the_basics.rst", "contributing/4_open_tasks.rst", "contributing/building_the_docs.rst", "deep_dive.rst", "deep_dive/0_navigating_the_code.rst", "deep_dive/10_docstrings.rst", "deep_dive/11_docstring_examples.rst", "deep_dive/12_array_api_tests.rst", "deep_dive/13_ivy_tests.rst", "deep_dive/1_function_types.rst", "deep_dive/2_backend_setting.rst", "deep_dive/3_function_wrapping.rst", "deep_dive/4_arrays.rst", "deep_dive/5_containers.rst", "deep_dive/6_data_types.rst", "deep_dive/7_devices.rst", "deep_dive/8_inplace_updates.rst", "deep_dive/9_function_arguments.rst", "design.rst", "design/building_blocks.rst", "design/ivy_as_a_framework.rst", "design/ivy_as_a_framework/ivy_array.rst", "design/ivy_as_a_framework/ivy_container.rst", "design/ivy_as_a_framework/ivy_stateful_api.rst", "design/ivy_as_a_transpiler.rst", "docs/ivy.rst", "docs/ivy_builder.rst", "docs/ivy_ecosystem.rst", "docs/ivy_gym.rst", "docs/ivy_mech.rst", "docs/ivy_memory.rst", "docs/ivy_models.rst", "docs/ivy_robot.rst", "docs/ivy_vision.rst", "extensions.rst", "extensions/applied_libraries.rst", "faq.rst", "func_wrapper.rst", "func_wrapper/handle_nestable.rst", "func_wrapper/handle_out_argument.rst", "func_wrapper/infer_device.rst", "func_wrapper/infer_dtype.rst", "func_wrapper/inputs_to_ivy_arrays.rst", "func_wrapper/inputs_to_native_arrays.rst", "func_wrapper/outputs_to_ivy_arrays.rst", "func_wrapper/to_native_arrays_and_back.rst", "functional/ivy.rst", "functional/ivy/activations.rst", "functional/ivy/activations/gelu.rst", "functional/ivy/activations/leaky_relu.rst", "functional/ivy/activations/relu.rst", "functional/ivy/activations/sigmoid.rst", "functional/ivy/activations/softmax.rst", "functional/ivy/activations/softplus.rst", "functional/ivy/activations/tanh.rst", "functional/ivy/compilation.rst", "functional/ivy/compilation/compile.rst", "functional/ivy/constants.rst", "functional/ivy/creation.rst", "functional/ivy/creation/arange.rst", "functional/ivy/creation/asarray.rst", "functional/ivy/creation/empty.rst", "functional/ivy/creation/empty_like.rst", "functional/ivy/creation/eye.rst", "functional/ivy/creation/from_dlpack.rst", "functional/ivy/creation/full.rst", "functional/ivy/creation/full_like.rst", "functional/ivy/creation/linspace.rst", "functional/ivy/creation/logspace.rst", "functional/ivy/creation/meshgrid.rst", "functional/ivy/creation/native_array.rst", "functional/ivy/creation/ones.rst", "functional/ivy/creation/ones_like.rst", "functional/ivy/creation/tril.rst", "functional/ivy/creation/triu.rst", "functional/ivy/creation/zeros.rst", "functional/ivy/creation/zeros_like.rst", "functional/ivy/data_type.rst", "functional/ivy/data_type/DefaultDtype:\n    \"\"\"\"\"\"\n\n    # noinspection PyShadowingNames\n    def __init__.rst", "functional/ivy/data_type/DefaultFloatDtype:\n    \"\"\"\"\"\"\n\n    # noinspection PyShadowingNames\n    def __init__.rst", "functional/ivy/data_type/DefaultIntDtype:\n    \"\"\"\"\"\"\n\n    # noinspection PyShadowingNames\n    def __init__.rst", "functional/ivy/data_type/as_ivy_dtype.rst", "functional/ivy/data_type/as_native_dtype.rst", "functional/ivy/data_type/astype.rst", "functional/ivy/data_type/broadcast_arrays.rst", "functional/ivy/data_type/broadcast_to.rst", "functional/ivy/data_type/can_cast.rst", "functional/ivy/data_type/can_cast/can_cast_array.rst", "functional/ivy/data_type/can_cast/can_cast_container.rst", "functional/ivy/data_type/can_cast/can_cast_functional.rst", "functional/ivy/data_type/can_cast/static_can_cast_container.rst", "functional/ivy/data_type/closest_valid_dtype.rst", "functional/ivy/data_type/default_dtype.rst", "functional/ivy/data_type/default_float_dtype.rst", "functional/ivy/data_type/default_int_dtype.rst", "functional/ivy/data_type/dtype.rst", "functional/ivy/data_type/dtype_bits.rst", "functional/ivy/data_type/finfo.rst", "functional/ivy/data_type/function_supported_dtypes.rst", "functional/ivy/data_type/function_unsupported_dtypes.rst", "functional/ivy/data_type/iinfo.rst", "functional/ivy/data_type/invalid_dtype.rst", "functional/ivy/data_type/is_float_dtype.rst", "functional/ivy/data_type/is_int_dtype.rst", "functional/ivy/data_type/promote_types.rst", "functional/ivy/data_type/result_type.rst", "functional/ivy/data_type/set_default_dtype.rst", "functional/ivy/data_type/set_default_float_dtype.rst", "functional/ivy/data_type/set_default_int_dtype.rst", "functional/ivy/data_type/type_promote_arrays.rst", "functional/ivy/data_type/unset_default_dtype.rst", "functional/ivy/data_type/unset_default_float_dtype.rst", "functional/ivy/data_type/unset_default_int_dtype.rst", "functional/ivy/data_type/valid_dtype.rst", "functional/ivy/device.rst", "functional/ivy/device/DefaultDevice:\n    \"\"\"\"\"\"\n\n    # noinspection PyShadowingNames\n    def __init__.rst", "functional/ivy/device/DevClonedItem.rst", "functional/ivy/device/DevClonedIter.rst", "functional/ivy/device/DevClonedNest.rst", "functional/ivy/device/DevDistItem.rst", "functional/ivy/device/DevDistIter.rst", "functional/ivy/device/DevDistNest.rst", "functional/ivy/device/DevManager:\n    \"\"\"\"\"\"\n\n    def __init__.rst", "functional/ivy/device/DevMapper.rst", "functional/ivy/device/DevMapperMultiProc.rst", "functional/ivy/device/MultiDev:\n    def __init__.rst", "functional/ivy/device/MultiDevItem.rst", "functional/ivy/device/MultiDevIter.rst", "functional/ivy/device/MultiDevNest.rst", "functional/ivy/device/Profiler.rst", "functional/ivy/device/as_ivy_dev.rst", "functional/ivy/device/as_native_dev.rst", "functional/ivy/device/clear_mem_on_dev.rst", "functional/ivy/device/default_device.rst", "functional/ivy/device/dev.rst", "functional/ivy/device/dev_clone.rst", "functional/ivy/device/dev_clone_array.rst", "functional/ivy/device/dev_clone_iter.rst", "functional/ivy/device/dev_clone_nest.rst", "functional/ivy/device/dev_dist.rst", "functional/ivy/device/dev_dist_array.rst", "functional/ivy/device/dev_dist_iter.rst", "functional/ivy/device/dev_dist_nest.rst", "functional/ivy/device/dev_unify.rst", "functional/ivy/device/dev_unify_array.rst", "functional/ivy/device/dev_unify_iter.rst", "functional/ivy/device/dev_unify_nest.rst", "functional/ivy/device/dev_util.rst", "functional/ivy/device/get_all_ivy_arrays_on_dev.rst", "functional/ivy/device/gpu_is_available.rst", "functional/ivy/device/num_cpu_cores.rst", "functional/ivy/device/num_gpus.rst", "functional/ivy/device/num_ivy_arrays_on_dev.rst", "functional/ivy/device/percent_used_mem_on_dev.rst", "functional/ivy/device/print_all_ivy_arrays_on_dev.rst", "functional/ivy/device/set_default_device.rst", "functional/ivy/device/set_split_factor.rst", "functional/ivy/device/split_factor.rst", "functional/ivy/device/split_func_call.rst", "functional/ivy/device/to_device.rst", "functional/ivy/device/total_mem_on_dev.rst", "functional/ivy/device/tpu_is_available.rst", "functional/ivy/device/unset_default_device.rst", "functional/ivy/device/used_mem_on_dev.rst", "functional/ivy/elementwise.rst", "functional/ivy/elementwise/abs.rst", "functional/ivy/elementwise/abs/abs_array.rst", "functional/ivy/elementwise/abs/abs_container.rst", "functional/ivy/elementwise/abs/abs_functional.rst", "functional/ivy/elementwise/acos.rst", "functional/ivy/elementwise/acos/acos_array.rst", "functional/ivy/elementwise/acos/acos_container.rst", "functional/ivy/elementwise/acos/acos_functional.rst", "functional/ivy/elementwise/acosh.rst", "functional/ivy/elementwise/acosh/acosh_array.rst", "functional/ivy/elementwise/acosh/acosh_container.rst", "functional/ivy/elementwise/acosh/acosh_functional.rst", "functional/ivy/elementwise/add.rst", "functional/ivy/elementwise/add/add_array.rst", "functional/ivy/elementwise/add/add_container.rst", "functional/ivy/elementwise/add/add_functional.rst", "functional/ivy/elementwise/add/static_add_container.rst", "functional/ivy/elementwise/asin.rst", "functional/ivy/elementwise/asin/asin_array.rst", "functional/ivy/elementwise/asin/asin_container.rst", "functional/ivy/elementwise/asin/asin_functional.rst", "functional/ivy/elementwise/asinh.rst", "functional/ivy/elementwise/asinh/asinh_array.rst", "functional/ivy/elementwise/asinh/asinh_container.rst", "functional/ivy/elementwise/asinh/asinh_functional.rst", "functional/ivy/elementwise/atan.rst", "functional/ivy/elementwise/atan/atan_array.rst", "functional/ivy/elementwise/atan/atan_container.rst", "functional/ivy/elementwise/atan/atan_functional.rst", "functional/ivy/elementwise/atan2.rst", "functional/ivy/elementwise/atan2/atan2_array.rst", "functional/ivy/elementwise/atan2/atan2_container.rst", "functional/ivy/elementwise/atan2/atan2_functional.rst", "functional/ivy/elementwise/atanh.rst", "functional/ivy/elementwise/atanh/atanh_array.rst", "functional/ivy/elementwise/atanh/atanh_container.rst", "functional/ivy/elementwise/atanh/atanh_functional.rst", "functional/ivy/elementwise/bitwise_and.rst", "functional/ivy/elementwise/bitwise_and/bitwise_and_array.rst", "functional/ivy/elementwise/bitwise_and/bitwise_and_container.rst", "functional/ivy/elementwise/bitwise_and/bitwise_and_functional.rst", "functional/ivy/elementwise/bitwise_invert.rst", "functional/ivy/elementwise/bitwise_invert/bitwise_invert_array.rst", "functional/ivy/elementwise/bitwise_invert/bitwise_invert_container.rst", "functional/ivy/elementwise/bitwise_invert/bitwise_invert_functional.rst", "functional/ivy/elementwise/bitwise_left_shift.rst", "functional/ivy/elementwise/bitwise_left_shift/bitwise_left_shift_array.rst", "functional/ivy/elementwise/bitwise_left_shift/bitwise_left_shift_container.rst", "functional/ivy/elementwise/bitwise_left_shift/bitwise_left_shift_functional.rst", "functional/ivy/elementwise/bitwise_or.rst", "functional/ivy/elementwise/bitwise_or/bitwise_or_array.rst", "functional/ivy/elementwise/bitwise_or/bitwise_or_container.rst", "functional/ivy/elementwise/bitwise_or/bitwise_or_functional.rst", "functional/ivy/elementwise/bitwise_right_shift.rst", "functional/ivy/elementwise/bitwise_right_shift/bitwise_right_shift_array.rst", "functional/ivy/elementwise/bitwise_right_shift/bitwise_right_shift_container.rst", "functional/ivy/elementwise/bitwise_right_shift/bitwise_right_shift_functional.rst", "functional/ivy/elementwise/bitwise_xor.rst", "functional/ivy/elementwise/bitwise_xor/bitwise_xor_array.rst", "functional/ivy/elementwise/bitwise_xor/bitwise_xor_container.rst", "functional/ivy/elementwise/bitwise_xor/bitwise_xor_functional.rst", "functional/ivy/elementwise/ceil.rst", "functional/ivy/elementwise/ceil/ceil_array.rst", "functional/ivy/elementwise/ceil/ceil_container.rst", "functional/ivy/elementwise/ceil/ceil_functional.rst", "functional/ivy/elementwise/cos.rst", "functional/ivy/elementwise/cos/cos_array.rst", "functional/ivy/elementwise/cos/cos_container.rst", "functional/ivy/elementwise/cos/cos_functional.rst", "functional/ivy/elementwise/cosh.rst", "functional/ivy/elementwise/cosh/cosh_array.rst", "functional/ivy/elementwise/cosh/cosh_container.rst", "functional/ivy/elementwise/cosh/cosh_functional.rst", "functional/ivy/elementwise/divide.rst", "functional/ivy/elementwise/divide/divide_array.rst", "functional/ivy/elementwise/divide/divide_container.rst", "functional/ivy/elementwise/divide/divide_functional.rst", "functional/ivy/elementwise/divide/static_divide_container.rst", "functional/ivy/elementwise/equal.rst", "functional/ivy/elementwise/equal/equal_array.rst", "functional/ivy/elementwise/equal/equal_container.rst", "functional/ivy/elementwise/equal/equal_functional.rst", "functional/ivy/elementwise/erf.rst", "functional/ivy/elementwise/erf/erf_array.rst", "functional/ivy/elementwise/erf/erf_container.rst", "functional/ivy/elementwise/erf/erf_functional.rst", "functional/ivy/elementwise/exp.rst", "functional/ivy/elementwise/exp/exp_array.rst", "functional/ivy/elementwise/exp/exp_container.rst", "functional/ivy/elementwise/exp/exp_functional.rst", "functional/ivy/elementwise/expm1.rst", "functional/ivy/elementwise/expm1/expm1_array.rst", "functional/ivy/elementwise/expm1/expm1_container.rst", "functional/ivy/elementwise/expm1/expm1_functional.rst", "functional/ivy/elementwise/floor.rst", "functional/ivy/elementwise/floor/floor_array.rst", "functional/ivy/elementwise/floor/floor_container.rst", "functional/ivy/elementwise/floor/floor_functional.rst", "functional/ivy/elementwise/floor_divide.rst", "functional/ivy/elementwise/floor_divide/floor_divide_array.rst", "functional/ivy/elementwise/floor_divide/floor_divide_container.rst", "functional/ivy/elementwise/floor_divide/floor_divide_functional.rst", "functional/ivy/elementwise/greater.rst", "functional/ivy/elementwise/greater/greater_array.rst", "functional/ivy/elementwise/greater/greater_container.rst", "functional/ivy/elementwise/greater/greater_functional.rst", "functional/ivy/elementwise/greater_equal.rst", "functional/ivy/elementwise/greater_equal/greater_equal_array.rst", "functional/ivy/elementwise/greater_equal/greater_equal_container.rst", "functional/ivy/elementwise/greater_equal/greater_equal_functional.rst", "functional/ivy/elementwise/isfinite.rst", "functional/ivy/elementwise/isfinite/isfinite_array.rst", "functional/ivy/elementwise/isfinite/isfinite_container.rst", "functional/ivy/elementwise/isfinite/isfinite_functional.rst", "functional/ivy/elementwise/isinf.rst", "functional/ivy/elementwise/isinf/isinf_array.rst", "functional/ivy/elementwise/isinf/isinf_container.rst", "functional/ivy/elementwise/isinf/isinf_functional.rst", "functional/ivy/elementwise/isnan.rst", "functional/ivy/elementwise/isnan/isnan_array.rst", "functional/ivy/elementwise/isnan/isnan_container.rst", "functional/ivy/elementwise/isnan/isnan_functional.rst", "functional/ivy/elementwise/less.rst", "functional/ivy/elementwise/less/less_array.rst", "functional/ivy/elementwise/less/less_container.rst", "functional/ivy/elementwise/less/less_functional.rst", "functional/ivy/elementwise/less_equal.rst", "functional/ivy/elementwise/less_equal/less_equal_array.rst", "functional/ivy/elementwise/less_equal/less_equal_container.rst", "functional/ivy/elementwise/less_equal/less_equal_functional.rst", "functional/ivy/elementwise/log.rst", "functional/ivy/elementwise/log/log_array.rst", "functional/ivy/elementwise/log/log_container.rst", "functional/ivy/elementwise/log/log_functional.rst", "functional/ivy/elementwise/log10.rst", "functional/ivy/elementwise/log10/log10_array.rst", "functional/ivy/elementwise/log10/log10_container.rst", "functional/ivy/elementwise/log10/log10_functional.rst", "functional/ivy/elementwise/log1p.rst", "functional/ivy/elementwise/log1p/log1p_array.rst", "functional/ivy/elementwise/log1p/log1p_container.rst", "functional/ivy/elementwise/log1p/log1p_functional.rst", "functional/ivy/elementwise/log2.rst", "functional/ivy/elementwise/log2/log2_array.rst", "functional/ivy/elementwise/log2/log2_container.rst", "functional/ivy/elementwise/log2/log2_functional.rst", "functional/ivy/elementwise/logaddexp.rst", "functional/ivy/elementwise/logaddexp/logaddexp_array.rst", "functional/ivy/elementwise/logaddexp/logaddexp_container.rst", "functional/ivy/elementwise/logaddexp/logaddexp_functional.rst", "functional/ivy/elementwise/logical_and.rst", "functional/ivy/elementwise/logical_and/logical_and_array.rst", "functional/ivy/elementwise/logical_and/logical_and_container.rst", "functional/ivy/elementwise/logical_and/logical_and_functional.rst", "functional/ivy/elementwise/logical_not.rst", "functional/ivy/elementwise/logical_not/logical_not_array.rst", "functional/ivy/elementwise/logical_not/logical_not_container.rst", "functional/ivy/elementwise/logical_not/logical_not_functional.rst", "functional/ivy/elementwise/logical_or.rst", "functional/ivy/elementwise/logical_or/logical_or_array.rst", "functional/ivy/elementwise/logical_or/logical_or_container.rst", "functional/ivy/elementwise/logical_or/logical_or_functional.rst", "functional/ivy/elementwise/logical_xor.rst", "functional/ivy/elementwise/logical_xor/logical_xor_array.rst", "functional/ivy/elementwise/logical_xor/logical_xor_container.rst", "functional/ivy/elementwise/logical_xor/logical_xor_functional.rst", "functional/ivy/elementwise/maximum.rst", "functional/ivy/elementwise/minimum.rst", "functional/ivy/elementwise/multiply.rst", "functional/ivy/elementwise/multiply/multiply_array.rst", "functional/ivy/elementwise/multiply/multiply_container.rst", "functional/ivy/elementwise/multiply/multiply_functional.rst", "functional/ivy/elementwise/multiply/static_multiply_container.rst", "functional/ivy/elementwise/negative.rst", "functional/ivy/elementwise/negative/negative_array.rst", "functional/ivy/elementwise/negative/negative_container.rst", "functional/ivy/elementwise/negative/negative_functional.rst", "functional/ivy/elementwise/not_equal.rst", "functional/ivy/elementwise/not_equal/not_equal_array.rst", "functional/ivy/elementwise/not_equal/not_equal_container.rst", "functional/ivy/elementwise/not_equal/not_equal_functional.rst", "functional/ivy/elementwise/positive.rst", "functional/ivy/elementwise/positive/positive_array.rst", "functional/ivy/elementwise/positive/positive_container.rst", "functional/ivy/elementwise/positive/positive_functional.rst", "functional/ivy/elementwise/pow.rst", "functional/ivy/elementwise/pow/pow_array.rst", "functional/ivy/elementwise/pow/pow_container.rst", "functional/ivy/elementwise/pow/pow_functional.rst", "functional/ivy/elementwise/remainder.rst", "functional/ivy/elementwise/remainder/remainder_array.rst", "functional/ivy/elementwise/remainder/remainder_container.rst", "functional/ivy/elementwise/remainder/remainder_functional.rst", "functional/ivy/elementwise/round.rst", "functional/ivy/elementwise/round/round_array.rst", "functional/ivy/elementwise/round/round_container.rst", "functional/ivy/elementwise/round/round_functional.rst", "functional/ivy/elementwise/sign.rst", "functional/ivy/elementwise/sign/sign_array.rst", "functional/ivy/elementwise/sign/sign_container.rst", "functional/ivy/elementwise/sign/sign_functional.rst", "functional/ivy/elementwise/sin.rst", "functional/ivy/elementwise/sin/sin_array.rst", "functional/ivy/elementwise/sin/sin_container.rst", "functional/ivy/elementwise/sin/sin_functional.rst", "functional/ivy/elementwise/sinh.rst", "functional/ivy/elementwise/sinh/sinh_array.rst", "functional/ivy/elementwise/sinh/sinh_container.rst", "functional/ivy/elementwise/sinh/sinh_functional.rst", "functional/ivy/elementwise/sqrt.rst", "functional/ivy/elementwise/sqrt/sqrt_array.rst", "functional/ivy/elementwise/sqrt/sqrt_container.rst", "functional/ivy/elementwise/sqrt/sqrt_functional.rst", "functional/ivy/elementwise/square.rst", "functional/ivy/elementwise/square/square_array.rst", "functional/ivy/elementwise/square/square_container.rst", "functional/ivy/elementwise/square/square_functional.rst", "functional/ivy/elementwise/subtract.rst", "functional/ivy/elementwise/subtract/static_subtract_container.rst", "functional/ivy/elementwise/subtract/subtract_array.rst", "functional/ivy/elementwise/subtract/subtract_container.rst", "functional/ivy/elementwise/subtract/subtract_functional.rst", "functional/ivy/elementwise/tan.rst", "functional/ivy/elementwise/tan/static_tan_container.rst", "functional/ivy/elementwise/tan/tan_array.rst", "functional/ivy/elementwise/tan/tan_container.rst", "functional/ivy/elementwise/tan/tan_functional.rst", "functional/ivy/elementwise/tanh.rst", "functional/ivy/elementwise/tanh/static_tanh_container.rst", "functional/ivy/elementwise/tanh/tanh_array.rst", "functional/ivy/elementwise/tanh/tanh_container.rst", "functional/ivy/elementwise/tanh/tanh_functional.rst", "functional/ivy/elementwise/trunc.rst", "functional/ivy/elementwise/trunc/trunc_array.rst", "functional/ivy/elementwise/trunc/trunc_container.rst", "functional/ivy/elementwise/trunc/trunc_functional.rst", "functional/ivy/general.rst", "functional/ivy/general/all_equal.rst", "functional/ivy/general/all_equal/all_equal_array.rst", "functional/ivy/general/all_equal/all_equal_container.rst", "functional/ivy/general/all_equal/all_equal_functional.rst", "functional/ivy/general/all_equal/static_all_equal_container.rst", "functional/ivy/general/arg_info.rst", "functional/ivy/general/arg_names.rst", "functional/ivy/general/array_equal.rst", "functional/ivy/general/arrays_equal.rst", "functional/ivy/general/assert_supports_inplace.rst", "functional/ivy/general/cache_fn.rst", "functional/ivy/general/clip_matrix_norm.rst", "functional/ivy/general/clip_vector_norm.rst", "functional/ivy/general/clip_vector_norm/clip_vector_norm_container.rst", "functional/ivy/general/clip_vector_norm/clip_vector_norm_functional.rst", "functional/ivy/general/container_types.rst", "functional/ivy/general/copy_array.rst", "functional/ivy/general/cumprod.rst", "functional/ivy/general/cumsum.rst", "functional/ivy/general/current_backend_str.rst", "functional/ivy/general/default.rst", "functional/ivy/general/einops_rearrange.rst", "functional/ivy/general/einops_reduce.rst", "functional/ivy/general/einops_repeat.rst", "functional/ivy/general/exists.rst", "functional/ivy/general/floormod.rst", "functional/ivy/general/fourier_encode.rst", "functional/ivy/general/gather.rst", "functional/ivy/general/gather_nd.rst", "functional/ivy/general/gather_nd/gather_nd_array.rst", "functional/ivy/general/gather_nd/gather_nd_container.rst", "functional/ivy/general/gather_nd/gather_nd_functional.rst", "functional/ivy/general/gather_nd/static_gather_nd_container.rst", "functional/ivy/general/get_all_arrays_in_memory.rst", "functional/ivy/general/get_min_base.rst", "functional/ivy/general/get_min_denominator.rst", "functional/ivy/general/get_num_dims.rst", "functional/ivy/general/get_referrers_recursive.rst", "functional/ivy/general/has_nans.rst", "functional/ivy/general/indices_where.rst", "functional/ivy/general/inplace_arrays_supported.rst", "functional/ivy/general/inplace_decrement.rst", "functional/ivy/general/inplace_increment.rst", "functional/ivy/general/inplace_update.rst", "functional/ivy/general/inplace_variables_supported.rst", "functional/ivy/general/is_array.rst", "functional/ivy/general/is_ivy_array.rst", "functional/ivy/general/is_ivy_container.rst", "functional/ivy/general/is_native_array.rst", "functional/ivy/general/match_kwargs.rst", "functional/ivy/general/multiprocessing.rst", "functional/ivy/general/num_arrays_in_memory.rst", "functional/ivy/general/one_hot.rst", "functional/ivy/general/print_all_arrays_in_memory.rst", "functional/ivy/general/queue_timeout.rst", "functional/ivy/general/scatter_flat.rst", "functional/ivy/general/scatter_nd.rst", "functional/ivy/general/set_min_base.rst", "functional/ivy/general/set_min_denominator.rst", "functional/ivy/general/set_queue_timeout.rst", "functional/ivy/general/set_tmp_dir.rst", "functional/ivy/general/shape.rst", "functional/ivy/general/shape_to_tuple.rst", "functional/ivy/general/stable_divide.rst", "functional/ivy/general/stable_pow.rst", "functional/ivy/general/supports_inplace.rst", "functional/ivy/general/tmp_dir.rst", "functional/ivy/general/to_list.rst", "functional/ivy/general/to_numpy.rst", "functional/ivy/general/to_scalar.rst", "functional/ivy/general/try_else_none.rst", "functional/ivy/general/unstack.rst", "functional/ivy/general/value_is_nan.rst", "functional/ivy/gradients.rst", "functional/ivy/gradients/GradientTracking:\n    \"\"\"\"\"\"\n\n    # noinspection PyShadowingNames\n    def __init__.rst", "functional/ivy/gradients/adam_step.rst", "functional/ivy/gradients/adam_update.rst", "functional/ivy/gradients/adam_update/adam_update_container.rst", "functional/ivy/gradients/adam_update/adam_update_functional.rst", "functional/ivy/gradients/adam_update/static_adam_update_container.rst", "functional/ivy/gradients/execute_with_gradients.rst", "functional/ivy/gradients/gradient_descent_update.rst", "functional/ivy/gradients/gradient_descent_update/gradient_descent_update_container.rst", "functional/ivy/gradients/gradient_descent_update/gradient_descent_update_functional.rst", "functional/ivy/gradients/gradient_descent_update/static_gradient_descent_update_container.rst", "functional/ivy/gradients/is_variable.rst", "functional/ivy/gradients/lamb_update.rst", "functional/ivy/gradients/lamb_update/lamb_update_container.rst", "functional/ivy/gradients/lamb_update/lamb_update_functional.rst", "functional/ivy/gradients/lamb_update/static_lamb_update_container.rst", "functional/ivy/gradients/lars_update.rst", "functional/ivy/gradients/lars_update/lars_update_container.rst", "functional/ivy/gradients/lars_update/lars_update_functional.rst", "functional/ivy/gradients/lars_update/static_lars_update_container.rst", "functional/ivy/gradients/optimizer_update.rst", "functional/ivy/gradients/optimizer_update/optimizer_update_container.rst", "functional/ivy/gradients/optimizer_update/optimizer_update_functional.rst", "functional/ivy/gradients/optimizer_update/static_optimizer_update_container.rst", "functional/ivy/gradients/set_with_grads.rst", "functional/ivy/gradients/stop_gradient.rst", "functional/ivy/gradients/unset_with_grads.rst", "functional/ivy/gradients/variable.rst", "functional/ivy/gradients/variable_data.rst", "functional/ivy/gradients/with_grads.rst", "functional/ivy/layers.rst", "functional/ivy/layers/conv1d.rst", "functional/ivy/layers/conv1d_transpose.rst", "functional/ivy/layers/conv2d.rst", "functional/ivy/layers/conv2d_transpose.rst", "functional/ivy/layers/conv3d.rst", "functional/ivy/layers/conv3d_transpose.rst", "functional/ivy/layers/depthwise_conv2d.rst", "functional/ivy/layers/dropout.rst", "functional/ivy/layers/linear.rst", "functional/ivy/layers/lstm_update.rst", "functional/ivy/layers/multi_head_attention.rst", "functional/ivy/layers/scaled_dot_product_attention.rst", "functional/ivy/linear_algebra.rst", "functional/ivy/linear_algebra/cholesky.rst", "functional/ivy/linear_algebra/cholesky/cholesky_array.rst", "functional/ivy/linear_algebra/cholesky/cholesky_functional.rst", "functional/ivy/linear_algebra/cross.rst", "functional/ivy/linear_algebra/cross/cross_array.rst", "functional/ivy/linear_algebra/cross/cross_functional.rst", "functional/ivy/linear_algebra/det.rst", "functional/ivy/linear_algebra/det/det_array.rst", "functional/ivy/linear_algebra/det/det_functional.rst", "functional/ivy/linear_algebra/diagonal.rst", "functional/ivy/linear_algebra/diagonal/diagonal_array.rst", "functional/ivy/linear_algebra/diagonal/diagonal_functional.rst", "functional/ivy/linear_algebra/eigh.rst", "functional/ivy/linear_algebra/eigh/eigh_array.rst", "functional/ivy/linear_algebra/eigh/eigh_functional.rst", "functional/ivy/linear_algebra/eigvalsh.rst", "functional/ivy/linear_algebra/eigvalsh/eigvalsh_array.rst", "functional/ivy/linear_algebra/eigvalsh/eigvalsh_functional.rst", "functional/ivy/linear_algebra/inv.rst", "functional/ivy/linear_algebra/inv/inv_array.rst", "functional/ivy/linear_algebra/inv/inv_functional.rst", "functional/ivy/linear_algebra/matmul.rst", "functional/ivy/linear_algebra/matmul/matmul_array.rst", "functional/ivy/linear_algebra/matmul/matmul_container.rst", "functional/ivy/linear_algebra/matmul/matmul_functional.rst", "functional/ivy/linear_algebra/matrix_norm.rst", "functional/ivy/linear_algebra/matrix_norm/matrix_norm_array.rst", "functional/ivy/linear_algebra/matrix_norm/matrix_norm_functional.rst", "functional/ivy/linear_algebra/matrix_power.rst", "functional/ivy/linear_algebra/matrix_rank.rst", "functional/ivy/linear_algebra/matrix_rank/matrix_rank_array.rst", "functional/ivy/linear_algebra/matrix_rank/matrix_rank_functional.rst", "functional/ivy/linear_algebra/matrix_transpose.rst", "functional/ivy/linear_algebra/matrix_transpose/matrix_transpose_array.rst", "functional/ivy/linear_algebra/matrix_transpose/matrix_transpose_functional.rst", "functional/ivy/linear_algebra/outer.rst", "functional/ivy/linear_algebra/outer/outer_array.rst", "functional/ivy/linear_algebra/outer/outer_functional.rst", "functional/ivy/linear_algebra/pinv.rst", "functional/ivy/linear_algebra/pinv/pinv_array.rst", "functional/ivy/linear_algebra/pinv/pinv_functional.rst", "functional/ivy/linear_algebra/qr.rst", "functional/ivy/linear_algebra/qr/qr_array.rst", "functional/ivy/linear_algebra/qr/qr_functional.rst", "functional/ivy/linear_algebra/slogdet.rst", "functional/ivy/linear_algebra/solve.rst", "functional/ivy/linear_algebra/solve/solve_array.rst", "functional/ivy/linear_algebra/solve/solve_functional.rst", "functional/ivy/linear_algebra/svd.rst", "functional/ivy/linear_algebra/svd/svd_array.rst", "functional/ivy/linear_algebra/svd/svd_functional.rst", "functional/ivy/linear_algebra/svdvals.rst", "functional/ivy/linear_algebra/svdvals/svdvals_array.rst", "functional/ivy/linear_algebra/svdvals/svdvals_functional.rst", "functional/ivy/linear_algebra/tensordot.rst", "functional/ivy/linear_algebra/tensordot/tensordot_array.rst", "functional/ivy/linear_algebra/tensordot/tensordot_functional.rst", "functional/ivy/linear_algebra/trace.rst", "functional/ivy/linear_algebra/trace/trace_array.rst", "functional/ivy/linear_algebra/trace/trace_functional.rst", "functional/ivy/linear_algebra/vecdot.rst", "functional/ivy/linear_algebra/vecdot/vecdot_array.rst", "functional/ivy/linear_algebra/vecdot/vecdot_functional.rst", "functional/ivy/linear_algebra/vector_norm.rst", "functional/ivy/linear_algebra/vector_norm/vector_norm_array.rst", "functional/ivy/linear_algebra/vector_norm/vector_norm_functional.rst", "functional/ivy/linear_algebra/vector_to_skew_symmetric_matrix.rst", "functional/ivy/linear_algebra/vector_to_skew_symmetric_matrix/vector_to_skew_symmetric_matrix_array.rst", "functional/ivy/linear_algebra/vector_to_skew_symmetric_matrix/vector_to_skew_symmetric_matrix_functional.rst", "functional/ivy/losses.rst", "functional/ivy/losses/binary_cross_entropy.rst", "functional/ivy/losses/binary_cross_entropy/binary_cross_entropy_array.rst", "functional/ivy/losses/binary_cross_entropy/binary_cross_entropy_container.rst", "functional/ivy/losses/binary_cross_entropy/binary_cross_entropy_functional.rst", "functional/ivy/losses/binary_cross_entropy/static_binary_cross_entropy_container.rst", "functional/ivy/losses/cross_entropy.rst", "functional/ivy/losses/cross_entropy/cross_entropy_array.rst", "functional/ivy/losses/cross_entropy/cross_entropy_container.rst", "functional/ivy/losses/cross_entropy/cross_entropy_functional.rst", "functional/ivy/losses/cross_entropy/static_cross_entropy_container.rst", "functional/ivy/losses/sparse_cross_entropy.rst", "functional/ivy/losses/sparse_cross_entropy/sparse_cross_entropy_array.rst", "functional/ivy/losses/sparse_cross_entropy/sparse_cross_entropy_container.rst", "functional/ivy/losses/sparse_cross_entropy/sparse_cross_entropy_functional.rst", "functional/ivy/losses/sparse_cross_entropy/static_sparse_cross_entropy_container.rst", "functional/ivy/manipulation.rst", "functional/ivy/manipulation/clip.rst", "functional/ivy/manipulation/clip/clip_array.rst", "functional/ivy/manipulation/clip/clip_container.rst", "functional/ivy/manipulation/clip/clip_functional.rst", "functional/ivy/manipulation/clip/static_clip_container.rst", "functional/ivy/manipulation/concat.rst", "functional/ivy/manipulation/concat/concat_array.rst", "functional/ivy/manipulation/concat/concat_container.rst", "functional/ivy/manipulation/concat/concat_functional.rst", "functional/ivy/manipulation/constant_pad.rst", "functional/ivy/manipulation/constant_pad/constant_pad_array.rst", "functional/ivy/manipulation/constant_pad/constant_pad_container.rst", "functional/ivy/manipulation/constant_pad/constant_pad_functional.rst", "functional/ivy/manipulation/expand_dims.rst", "functional/ivy/manipulation/expand_dims/expand_dims_array.rst", "functional/ivy/manipulation/expand_dims/expand_dims_container.rst", "functional/ivy/manipulation/expand_dims/expand_dims_functional.rst", "functional/ivy/manipulation/flip.rst", "functional/ivy/manipulation/flip/flip_array.rst", "functional/ivy/manipulation/flip/flip_container.rst", "functional/ivy/manipulation/flip/flip_functional.rst", "functional/ivy/manipulation/permute_dims.rst", "functional/ivy/manipulation/permute_dims/permute_dims_array.rst", "functional/ivy/manipulation/permute_dims/permute_dims_container.rst", "functional/ivy/manipulation/permute_dims/permute_dims_functional.rst", "functional/ivy/manipulation/repeat.rst", "functional/ivy/manipulation/repeat/repeat_array.rst", "functional/ivy/manipulation/repeat/repeat_container.rst", "functional/ivy/manipulation/repeat/repeat_functional.rst", "functional/ivy/manipulation/reshape.rst", "functional/ivy/manipulation/reshape/reshape_array.rst", "functional/ivy/manipulation/reshape/reshape_container.rst", "functional/ivy/manipulation/reshape/reshape_functional.rst", "functional/ivy/manipulation/roll.rst", "functional/ivy/manipulation/roll/roll_array.rst", "functional/ivy/manipulation/roll/roll_container.rst", "functional/ivy/manipulation/roll/roll_functional.rst", "functional/ivy/manipulation/roll/static_roll_container.rst", "functional/ivy/manipulation/split.rst", "functional/ivy/manipulation/squeeze.rst", "functional/ivy/manipulation/squeeze/squeeze_array.rst", "functional/ivy/manipulation/squeeze/squeeze_container.rst", "functional/ivy/manipulation/squeeze/squeeze_functional.rst", "functional/ivy/manipulation/stack.rst", "functional/ivy/manipulation/stack/stack_array.rst", "functional/ivy/manipulation/stack/stack_container.rst", "functional/ivy/manipulation/stack/stack_functional.rst", "functional/ivy/manipulation/swapaxes.rst", "functional/ivy/manipulation/swapaxes/swapaxes_array.rst", "functional/ivy/manipulation/swapaxes/swapaxes_container.rst", "functional/ivy/manipulation/swapaxes/swapaxes_functional.rst", "functional/ivy/manipulation/tile.rst", "functional/ivy/manipulation/tile/tile_array.rst", "functional/ivy/manipulation/tile/tile_container.rst", "functional/ivy/manipulation/tile/tile_functional.rst", "functional/ivy/manipulation/zero_pad.rst", "functional/ivy/manipulation/zero_pad/zero_pad_array.rst", "functional/ivy/manipulation/zero_pad/zero_pad_container.rst", "functional/ivy/manipulation/zero_pad/zero_pad_functional.rst", "functional/ivy/meta.rst", "functional/ivy/meta/fomaml_step.rst", "functional/ivy/meta/maml_step.rst", "functional/ivy/meta/reptile_step.rst", "functional/ivy/nest.rst", "functional/ivy/nest/all_nested_indices.rst", "functional/ivy/nest/copy_nest.rst", "functional/ivy/nest/index_nest.rst", "functional/ivy/nest/insert_into_nest_at_index.rst", "functional/ivy/nest/insert_into_nest_at_indices.rst", "functional/ivy/nest/map.rst", "functional/ivy/nest/map_nest_at_index.rst", "functional/ivy/nest/map_nest_at_indices.rst", "functional/ivy/nest/multi_index_nest.rst", "functional/ivy/nest/nested_any.rst", "functional/ivy/nest/nested_indices_where.rst", "functional/ivy/nest/nested_map.rst", "functional/ivy/nest/nested_multi_map.rst", "functional/ivy/nest/prune_nest_at_index.rst", "functional/ivy/nest/prune_nest_at_indices.rst", "functional/ivy/nest/set_nest_at_index.rst", "functional/ivy/nest/set_nest_at_indices.rst", "functional/ivy/norms.rst", "functional/ivy/norms/layer_norm.rst", "functional/ivy/norms/layer_norm/layer_norm_array.rst", "functional/ivy/norms/layer_norm/layer_norm_container.rst", "functional/ivy/norms/layer_norm/layer_norm_functional.rst", "functional/ivy/random.rst", "functional/ivy/random/multinomial.rst", "functional/ivy/random/randint.rst", "functional/ivy/random/randint/randint_functional.rst", "functional/ivy/random/randint/static_randint_container.rst", "functional/ivy/random/random_normal.rst", "functional/ivy/random/random_uniform.rst", "functional/ivy/random/random_uniform/random_uniform_container.rst", "functional/ivy/random/random_uniform/random_uniform_functional.rst", "functional/ivy/random/random_uniform/static_random_uniform_container.rst", "functional/ivy/random/seed.rst", "functional/ivy/random/shuffle.rst", "functional/ivy/searching.rst", "functional/ivy/searching/argmax.rst", "functional/ivy/searching/argmin.rst", "functional/ivy/searching/nonzero.rst", "functional/ivy/searching/where.rst", "functional/ivy/set.rst", "functional/ivy/set/unique_all.rst", "functional/ivy/set/unique_counts.rst", "functional/ivy/set/unique_inverse.rst", "functional/ivy/set/unique_values.rst", "functional/ivy/sorting.rst", "functional/ivy/sorting/argsort.rst", "functional/ivy/sorting/argsort/argsort_array.rst", "functional/ivy/sorting/argsort/argsort_container.rst", "functional/ivy/sorting/argsort/argsort_functional.rst", "functional/ivy/sorting/argsort/static_argsort_container.rst", "functional/ivy/sorting/sort.rst", "functional/ivy/sorting/sort/sort_array.rst", "functional/ivy/sorting/sort/sort_container.rst", "functional/ivy/sorting/sort/sort_functional.rst", "functional/ivy/sorting/sort/static_sort_container.rst", "functional/ivy/statistical.rst", "functional/ivy/statistical/einsum.rst", "functional/ivy/statistical/einsum/einsum_array.rst", "functional/ivy/statistical/einsum/einsum_container.rst", "functional/ivy/statistical/einsum/einsum_functional.rst", "functional/ivy/statistical/max.rst", "functional/ivy/statistical/max/max_array.rst", "functional/ivy/statistical/max/max_container.rst", "functional/ivy/statistical/max/max_functional.rst", "functional/ivy/statistical/mean.rst", "functional/ivy/statistical/mean/mean_array.rst", "functional/ivy/statistical/mean/mean_container.rst", "functional/ivy/statistical/mean/mean_functional.rst", "functional/ivy/statistical/min.rst", "functional/ivy/statistical/min/min_array.rst", "functional/ivy/statistical/min/min_container.rst", "functional/ivy/statistical/min/min_functional.rst", "functional/ivy/statistical/prod.rst", "functional/ivy/statistical/prod/prod_array.rst", "functional/ivy/statistical/prod/prod_container.rst", "functional/ivy/statistical/prod/prod_functional.rst", "functional/ivy/statistical/std.rst", "functional/ivy/statistical/std/std_array.rst", "functional/ivy/statistical/std/std_container.rst", "functional/ivy/statistical/std/std_functional.rst", "functional/ivy/statistical/sum.rst", "functional/ivy/statistical/sum/sum_array.rst", "functional/ivy/statistical/sum/sum_container.rst", "functional/ivy/statistical/sum/sum_functional.rst", "functional/ivy/statistical/var.rst", "functional/ivy/statistical/var/var_array.rst", "functional/ivy/statistical/var/var_container.rst", "functional/ivy/statistical/var/var_functional.rst", "functional/ivy/utility.rst", "functional/ivy/utility/all.rst", "functional/ivy/utility/all/all_array.rst", "functional/ivy/utility/all/all_container.rst", "functional/ivy/utility/all/all_functional.rst", "functional/ivy/utility/any.rst", "functional/ivy/utility/any/any_array.rst", "functional/ivy/utility/any/any_container.rst", "functional/ivy/utility/any/any_functional.rst", "index.rst", "index_append.rst", "index_prepend.rst", "inspection.rst", "inspection/add_array_specs.rst", "inspection/fn_array_spec.rst", "roadmap.rst", "stateful/activations.rst", "stateful/activations/GEGLU.rst", "stateful/activations/GELU.rst", "stateful/converters.rst", "stateful/converters/to_ivy_module.rst", "stateful/initializers.rst", "stateful/initializers/Constant:\n    def __init__.rst", "stateful/initializers/FirstLayerSiren.rst", "stateful/initializers/GlorotUniform.rst", "stateful/initializers/KaimingNormal:\n    def __init__.rst", "stateful/initializers/Ones.rst", "stateful/initializers/Siren.rst", "stateful/initializers/Uniform:\n    def __init__.rst", "stateful/initializers/Zeros.rst", "stateful/layers.rst", "stateful/layers/Conv1D.rst", "stateful/layers/Conv1DTranspose.rst", "stateful/layers/Conv2D.rst", "stateful/layers/Conv2DTranspose.rst", "stateful/layers/Conv3D.rst", "stateful/layers/Conv3DTranspose.rst", "stateful/layers/DepthwiseConv2D.rst", "stateful/layers/Dropout.rst", "stateful/layers/LSTM.rst", "stateful/layers/Linear.rst", "stateful/layers/MultiHeadAttention.rst", "stateful/module.rst", "stateful/module/Module.rst", "stateful/norms.rst", "stateful/norms/LayerNorm.rst", "stateful/optimizers.rst", "stateful/optimizers/Adam.rst", "stateful/optimizers/LAMB.rst", "stateful/optimizers/LARS.rst", "stateful/optimizers/Optimizer.rst", "stateful/optimizers/SGD.rst", "stateful/sequential.rst", "stateful/sequential/Sequential.rst", "supported_frameworks.rst", "verbosity.rst", "verbosity/cprint.rst"], "titles": ["Activations", "ArrayWithActivations", "Array methods", "abs array", "acos array", "acosh array", "add array", "all array", "all_equal array", "any array", "argsort array", "asin array", "asinh array", "atan array", "atan2 array", "atanh array", "binary_cross_entropy array", "bitwise_and array", "bitwise_invert array", "bitwise_left_shift array", "bitwise_or array", "bitwise_right_shift array", "bitwise_xor array", "can_cast array", "ceil array", "cholesky array", "clip array", "concat array", "constant_pad array", "cos array", "cosh array", "cross array", "cross_entropy array", "det array", "diagonal array", "divide array", "eigh array", "eigvalsh array", "einsum array", "equal array", "erf array", "exp array", "expand_dims array", "expm1 array", "flip array", "floor array", "floor_divide array", "gather_nd array", "greater array", "greater_equal array", "inv array", "isfinite array", "isinf array", "isnan array", "layer_norm array", "less array", "less_equal array", "log array", "log10 array", "log1p array", "log2 array", "logaddexp array", "logical_and array", "logical_not array", "logical_or array", "logical_xor array", "matmul array", "matrix_norm array", "matrix_rank array", "matrix_transpose array", "max array", "mean array", "min array", "multiply array", "negative array", "not_equal array", "outer array", "permute_dims array", "pinv array", "positive array", "pow array", "prod array", "qr array", "remainder array", "repeat array", "reshape array", "roll array", "round array", "sign array", "sin array", "sinh array", "solve array", "sort array", "sparse_cross_entropy array", "sqrt array", "square array", "squeeze array", "stack array", "std array", "subtract array", "sum array", "svd array", "svdvals array", "swapaxes array", "tan array", "tanh array", "tensordot array", "tile array", "trace array", "trunc array", "var array", "vecdot array", "vector_norm array", "vector_to_skew_symmetric_matrix array", "zero_pad array", "Conversions", "args_to_ivy", "args_to_native", "to_ivy", "to_native", "Creation", "ArrayWithCreation", "Data type", "ArrayWithDataTypes", "Device", "ArrayWithDevice", "Elementwise", "ArrayWithElementwise", "General", "ArrayWithGeneral", "Gradients", "ArrayWithGradients", "Image", "ArrayWithImage", "Layers", "ArrayWithLayers", "Linear algebra", "ArrayWithLinearAlgebra", "Losses", "ArrayWithLosses", "Manipulation", "ArrayWithManipulation", "Norms", "ArrayWithNorms", "Random", "ArrayWithRandom", "Searching", "ArrayWithSearching", "Set", "ArrayWithSet", "Sorting", "ArrayWithSorting", "Statistical", "ArrayWithStatistical", "Utility", "ArrayWithUtility", "Wrapping", "add_ivy_array_instance_methods", "Backend handler", "&lt;no title&gt;", "choose_random_backend", "clear_backend_stack", "current_backend", "get_backend", "set_backend", "try_import_ivy_jax", "try_import_ivy_mxnet", "try_import_ivy_numpy", "try_import_ivy_tf", "try_import_ivy_torch", "unset_backend", "Background", "ML Explosion", "Standardization", "Why Unify?", "Activations", "ContainerWithActivations", "Base", "ContainerBase", "Container", "Container", "MultiDevContainer", "Container methods", "abs container", "acos container", "acosh container", "adam_update container", "add container", "all container", "all_equal container", "any container", "argsort container", "asin container", "asinh container", "at_dev container", "at_devs container", "atan container", "atan2 container", "atanh container", "binary_cross_entropy container", "bitwise_and container", "bitwise_invert container", "bitwise_left_shift container", "bitwise_or container", "bitwise_right_shift container", "bitwise_xor container", "can_cast container", "ceil container", "clip container", "clip_vector_norm container", "concat container", "constant_pad container", "cos container", "cosh container", "cross_entropy container", "divide container", "einsum container", "equal container", "erf container", "exp container", "expand_dims container", "expm1 container", "flip container", "floor container", "floor_divide container", "gather_nd container", "gradient_descent_update container", "greater container", "greater_equal container", "isfinite container", "isinf container", "isnan container", "lamb_update container", "lars_update container", "layer_norm container", "less container", "less_equal container", "log container", "log10 container", "log1p container", "log2 container", "logaddexp container", "logical_and container", "logical_not container", "logical_or container", "logical_xor container", "matmul container", "max container", "mean container", "min container", "multiply container", "negative container", "not_equal container", "optimizer_update container", "permute_dims container", "positive container", "pow container", "prod container", "random_uniform container", "remainder container", "repeat container", "reshape container", "roll container", "round container", "sign container", "sin container", "sinh container", "sort container", "sparse_cross_entropy container", "sqrt container", "square container", "squeeze container", "stack container", "static_adam_update container", "static_add container", "static_all_equal container", "static_argsort container", "static_binary_cross_entropy container", "static_can_cast container", "static_clip container", "static_cross_entropy container", "static_divide container", "static_gather_nd container", "static_gradient_descent_update container", "static_lamb_update container", "static_lars_update container", "static_multiply container", "static_optimizer_update container", "static_randint container", "static_random_uniform container", "static_roll container", "static_sort container", "static_sparse_cross_entropy container", "static_subtract container", "static_tan container", "static_tanh container", "std container", "subtract container", "sum container", "swapaxes container", "tan container", "tanh container", "tile container", "trunc container", "var container", "zero_pad container", "Creation", "ContainerWithCreation", "Data type", "ContainerWithDataTypes", "Device", "ContainerWithDevice", "Elementwise", "ContainerWithElementwise", "General", "ContainerWithGeneral", "Gradients", "ContainerWithGradients", "Image", "ContainerWithImage", "Layers", "ContainerWithLayers", "Linear algebra", "ContainerWithLinearAlgebra", "Losses", "ContainerWithLosses", "Manipulation", "ContainerWithManipulation", "Norms", "ContainerWithNorms", "Random", "ContainerWithRandom", "Searching", "ContainerWithSearching", "Set", "ContainerWithSet", "Sorting", "ContainerWithSorting", "Statistical", "ContainerWithStatistical", "Utility", "ContainerWithUtility", "Wrapping", "add_ivy_container_instance_methods", "Contributing", "Setting Up", "The Basics", "Open Tasks", "Building the Docs", "Deep Dive", "Navigating the Code", "Docstrings", "Docstring Examples", "Array API Tests", "Ivy Tests", "Function Types", "Backend Setting", "Function Wrapping", "Arrays", "Containers", "Data Types", "Devices", "Inplace Updates", "Function Arguments", "Design", "Building Blocks", "Ivy as a Framework", "Ivy Array", "Ivy Container", "Ivy Stateful API", "Ivy as a Transpiler", "Ivy", "Ivy builder", "Ivy ecosystem", "Ivy gym", "Ivy mech", "Ivy memory", "Ivy models", "Ivy robot", "Ivy vision", "Extensions", "Applied Libraries", "FAQ", "Func wrapper", "handle_nestable", "handle_out_argument", "infer_device", "infer_dtype", "inputs_to_ivy_arrays", "inputs_to_native_arrays", "outputs_to_ivy_arrays", "to_native_arrays_and_back", "&lt;no title&gt;", "Activations", "gelu", "leaky_relu", "relu", "sigmoid", "softmax", "softplus", "tanh", "Compilation", "compile", "Constants", "Creation", "arange", "asarray", "empty", "empty_like", "eye", "from_dlpack", "full", "full_like", "linspace", "logspace", "meshgrid", "native_array", "ones", "ones_like", "tril", "triu", "zeros", "zeros_like", "Data type", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "as_ivy_dtype", "as_native_dtype", "astype", "broadcast_arrays", "broadcast_to", "can_cast", "can_cast array", "can_cast container", "can_cast functional", "static_can_cast container", "closest_valid_dtype", "default_dtype", "default_float_dtype", "default_int_dtype", "dtype", "dtype_bits", "finfo", "function_supported_dtypes", "function_unsupported_dtypes", "iinfo", "invalid_dtype", "is_float_dtype", "is_int_dtype", "promote_types", "result_type", "set_default_dtype", "set_default_float_dtype", "set_default_int_dtype", "type_promote_arrays", "unset_default_dtype", "unset_default_float_dtype", "unset_default_int_dtype", "valid_dtype", "Device", "&lt;no title&gt;", "DevClonedItem", "DevClonedIter", "DevClonedNest", "DevDistItem", "DevDistIter", "DevDistNest", "&lt;no title&gt;", "DevMapper", "DevMapperMultiProc", "&lt;no title&gt;", "MultiDevItem", "MultiDevIter", "MultiDevNest", "Profiler", "as_ivy_dev", "as_native_dev", "clear_mem_on_dev", "default_device", "dev", "dev_clone", "dev_clone_array", "dev_clone_iter", "dev_clone_nest", "dev_dist", "dev_dist_array", "dev_dist_iter", "dev_dist_nest", "dev_unify", "dev_unify_array", "dev_unify_iter", "dev_unify_nest", "dev_util", "get_all_ivy_arrays_on_dev", "gpu_is_available", "num_cpu_cores", "num_gpus", "num_ivy_arrays_on_dev", "percent_used_mem_on_dev", "print_all_ivy_arrays_on_dev", "set_default_device", "set_split_factor", "split_factor", "split_func_call", "to_device", "total_mem_on_dev", "tpu_is_available", "unset_default_device", "used_mem_on_dev", "Elementwise", "abs", "abs array", "abs container", "abs functional", "acos", "acos array", "acos container", "acosh functional", "acosh", "acosh array", "acosh container", "acosh functional", "add", "add array", "add container", "logaddexp functional", "static_add container", "asin", "asin array", "asin container", "asin functional", "asinh", "asinh array", "asinh container", "asinh functional", "atan", "atan array", "atan container", "atanh functional", "atan2", "atan2 array", "atan2 container", "atan2 functional", "atanh", "atanh array", "atanh container", "atanh functional", "bitwise_and", "bitwise_and array", "bitwise_and container", "bitwise_and functional", "bitwise_invert", "bitwise_invert array", "bitwise_invert container", "bitwise_invert functional", "bitwise_left_shift", "bitwise_left_shift array", "bitwise_left_shift container", "bitwise_left_shift functional", "bitwise_or", "bitwise_or array", "bitwise_or container", "bitwise_or functional", "bitwise_right_shift", "bitwise_right_shift array", "bitwise_right_shift container", "bitwise_right_shift functional", "bitwise_xor", "bitwise_xor array", "bitwise_xor container", "bitwise_xor functional", "ceil", "ceil array", "ceil container", "ceil functional", "cos", "cos array", "cos container", "acosh functional", "cosh", "cosh array", "cosh container", "acosh functional", "divide", "divide array", "divide container", "floor_divide functional", "static_divide container", "equal", "equal array", "equal container", "greater_equal functional", "erf", "erf array", "erf container", "erf functional", "exp", "exp array", "exp container", "logaddexp functional", "expm1", "expm1 array", "expm1 container", "expm1 functional", "floor", "floor array", "floor container", "floor_divide functional", "floor_divide", "floor_divide array", "floor_divide container", "floor_divide functional", "greater", "greater array", "greater container", "greater_equal functional", "greater_equal", "greater_equal array", "greater_equal container", "greater_equal functional", "isfinite", "isfinite array", "isfinite container", "isfinite functional", "isinf", "isinf array", "isinf container", "isinf functional", "isnan", "isnan array", "isnan container", "isnan functional", "less", "less array", "less container", "less functional", "less_equal", "less_equal array", "less_equal container", "less_equal functional", "log", "log array", "log container", "log functional", "log10", "log10 array", "log10 container", "log10 functional", "log1p", "log1p array", "log1p container", "log1p functional", "log2", "log2 array", "log2 container", "log2 functional", "logaddexp", "logaddexp array", "logaddexp container", "logaddexp functional", "logical_and", "logical_and array", "logical_and container", "logical_and functional", "logical_not", "logical_not array", "logical_not container", "logical_not functional", "logical_or", "logical_or array", "logical_or container", "logical_or functional", "logical_xor", "logical_xor array", "logical_xor container", "logical_xor functional", "maximum", "minimum", "multiply", "multiply array", "multiply container", "multiply functional", "static_multiply container", "negative", "negative array", "negative container", "negative functional", "not_equal", "not_equal array", "not_equal container", "not_equal functional", "positive", "positive array", "positive container", "positive functional", "pow", "pow array", "pow container", "pow functional", "remainder", "remainder array", "remainder container", "remainder functional", "round", "round array", "round container", "round functional", "sign", "sign array", "sign container", "sign functional", "sin", "sin array", "sin container", "sin functional", "sinh", "sinh array", "sinh container", "sinh functional", "sqrt", "sqrt array", "sqrt container", "sqrt functional", "square", "square array", "square container", "square functional", "subtract", "static_subtract container", "subtract array", "subtract container", "subtract functional", "tan", "static_tan container", "tan array", "tan container", "atanh functional", "tanh", "static_tanh container", "tanh array", "tanh container", "atanh functional", "trunc", "trunc array", "trunc container", "trunc functional", "General", "all_equal", "all_equal array", "all_equal container", "all_equal functional", "static_all_equal container", "arg_info", "arg_names", "array_equal", "arrays_equal", "assert_supports_inplace", "cache_fn", "clip_matrix_norm", "clip_vector_norm", "clip_vector_norm container", "clip_vector_norm functional", "container_types", "copy_array", "cumprod", "cumsum", "current_backend_str", "default", "einops_rearrange", "einops_reduce", "einops_repeat", "exists", "floormod", "fourier_encode", "gather", "gather_nd", "gather_nd array", "gather_nd container", "gather_nd functional", "static_gather_nd container", "get_all_arrays_in_memory", "get_min_base", "get_min_denominator", "get_num_dims", "get_referrers_recursive", "has_nans", "indices_where", "inplace_arrays_supported", "inplace_decrement", "inplace_increment", "inplace_update", "inplace_variables_supported", "is_array", "is_ivy_array", "is_ivy_container", "is_native_array", "match_kwargs", "multiprocessing", "num_arrays_in_memory", "one_hot", "print_all_arrays_in_memory", "queue_timeout", "scatter_flat", "scatter_nd", "set_min_base", "set_min_denominator", "set_queue_timeout", "set_tmp_dir", "shape", "shape_to_tuple", "stable_divide", "stable_pow", "supports_inplace", "tmp_dir", "to_list", "to_numpy", "to_scalar", "try_else_none", "unstack", "value_is_nan", "Gradients", "&lt;no title&gt;", "adam_step", "adam_update", "adam_update container", "adam_update functional", "static_adam_update container", "execute_with_gradients", "gradient_descent_update", "gradient_descent_update container", "gradient_descent_update functional", "static_gradient_descent_update container", "is_variable", "lamb_update", "lamb_update container", "lamb_update functional", "static_lamb_update container", "lars_update", "lars_update container", "lars_update functional", "static_lars_update container", "optimizer_update", "optimizer_update container", "optimizer_update functional", "static_optimizer_update container", "set_with_grads", "stop_gradient", "unset_with_grads", "variable", "variable_data", "with_grads", "Layers", "conv1d", "conv1d_transpose", "conv2d", "conv2d_transpose", "conv3d", "conv3d_transpose", "depthwise_conv2d", "dropout", "linear", "lstm_update", "multi_head_attention", "scaled_dot_product_attention", "Linear algebra", "cholesky", "cholesky array", "cholesky functional", "cross", "cross array", "cross functional", "det", "det array", "slogdet functional", "diagonal", "diagonal array", "diagonal functional", "eigh", "eigh array", "eigh functional", "eigvalsh", "eigvalsh array", "eigvalsh functional", "inv", "inv array", "pinv functional", "matmul", "matmul array", "matmul container", "matmul functional", "matrix_norm", "matrix_norm array", "matrix_norm functional", "matrix_power", "matrix_rank", "matrix_rank array", "matrix_rank functional", "matrix_transpose", "matrix_transpose array", "matrix_transpose functional", "outer", "outer array", "outer functional", "pinv", "pinv array", "pinv functional", "qr", "qr array", "qr functional", "slogdet", "solve", "solve array", "solve functional", "svd", "svd array", "svdvals functional", "svdvals", "svdvals array", "svdvals functional", "tensordot", "tensordot array", "tensordot functional", "trace", "trace array", "trace functional", "vecdot", "vecdot array", "vecdot functional", "vector_norm", "vector_norm array", "vector_norm functional", "vector_to_skew_symmetric_matrix", "vector_to_skew_symmetric_matrix array", "vector_to_skew_symmetric_matrix functional", "Losses", "binary_cross_entropy", "binary_cross_entropy array", "binary_cross_entropy container", "binary_cross_entropy functional", "static_binary_cross_entropy container", "cross_entropy", "cross_entropy array", "cross_entropy container", "cross_entropy functional", "static_cross_entropy container", "sparse_cross_entropy", "sparse_cross_entropy array", "sparse_cross_entropy container", "sparse_cross_entropy functional", "static_sparse_cross_entropy container", "Manipulation", "clip", "clip array", "clip container", "clip functional", "static_clip container", "concat", "concat array", "concat container", "concat functional", "constant_pad", "constant_pad array", "constant_pad container", "constant_pad functional", "expand_dims", "expand_dims array", "expand_dims container", "expand_dims functional", "flip", "flip array", "flip container", "flip functional", "permute_dims", "permute_dims array", "permute_dims container", "permute_dims functional", "repeat", "repeat array", "repeat container", "repeat functional", "reshape", "reshape array", "reshape container", "reshape functional", "roll", "roll array", "roll container", "roll functional", "static_roll container", "split", "squeeze", "squeeze array", "squeeze container", "squeeze functional", "stack", "stack array", "stack container", "stack functional", "swapaxes", "swapaxes array", "swapaxes container", "swapaxes functional", "tile", "tile array", "tile container", "tile functional", "zero_pad", "zero_pad array", "zero_pad container", "zero_pad functional", "Meta", "fomaml_step", "maml_step", "reptile_step", "Nest", "all_nested_indices", "copy_nest", "index_nest", "insert_into_nest_at_index", "insert_into_nest_at_indices", "map", "map_nest_at_index", "map_nest_at_indices", "multi_index_nest", "nested_any", "nested_indices_where", "nested_map", "nested_multi_map", "prune_nest_at_index", "prune_nest_at_indices", "set_nest_at_index", "set_nest_at_indices", "Norms", "layer_norm", "layer_norm array", "layer_norm container", "layer_norm functional", "Random", "multinomial", "randint", "randint functional", "static_randint container", "random_normal", "random_uniform", "random_uniform container", "random_uniform functional", "static_random_uniform container", "seed", "shuffle", "Searching", "argmax", "argmin", "nonzero", "where", "Set", "unique_all", "unique_counts", "unique_inverse", "unique_values", "Sorting", "argsort", "argsort array", "argsort container", "argsort functional", "static_argsort container", "sort", "sort array", "sort container", "sort functional", "static_sort container", "Statistical", "einsum", "einsum array", "einsum container", "einsum functional", "max", "max array", "max container", "max functional", "mean", "mean array", "mean container", "mean functional", "min", "min array", "min container", "min functional", "prod", "prod array", "prod container", "prod functional", "std", "std array", "std container", "std functional", "sum", "sum array", "sum container", "einsum functional", "var", "var array", "var container", "var functional", "Utility", "all", "all array", "all container", "all functional", "any", "any array", "any container", "any functional", "Contents", "&lt;no title&gt;", "&lt;no title&gt;", "Inspection", "add_array_specs", "fn_array_spec", "Roadmap", "Activations", "GEGLU", "GELU", "Converters", "to_ivy_module", "Initializers", "&lt;no title&gt;", "FirstLayerSiren", "GlorotUniform", "&lt;no title&gt;", "Ones", "Siren", "&lt;no title&gt;", "Zeros", "Layers", "Conv1D", "Conv1DTranspose", "Conv2D", "Conv2DTranspose", "Conv3D", "Conv3DTranspose", "DepthwiseConv2D", "Dropout", "LSTM", "Linear", "MultiHeadAttention", "Module", "Module", "Norms", "LayerNorm", "Optimizers", "Adam", "LAMB", "LARS", "Optimizer", "SGD", "Sequential", "Sequential", "&lt;no title&gt;", "Verbosity", "cprint"], "terms": {"class": [0, 1, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 164, 170, 175, 176, 177, 178, 179, 180, 181, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 347, 348, 351, 352, 354, 358, 359, 360, 361, 363, 365, 366, 368, 369, 370, 380, 381, 382, 423, 446, 460, 462, 463, 464, 465, 466, 467, 469, 470, 472, 473, 474, 475, 747, 754, 791, 797, 816, 821, 850, 1015, 1017, 1027, 1050, 1053, 1113, 1120, 1121, 1122, 1123, 1124, 1125, 1127, 1128, 1130, 1131, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157], "ivi": [0, 1, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 346, 347, 348, 349, 351, 353, 355, 356, 357, 359, 360, 361, 362, 363, 364, 380, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 427, 428, 429, 430, 431, 432, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 462, 463, 464, 465, 466, 467, 469, 470, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 513, 514, 515, 517, 518, 519, 521, 522, 523, 525, 526, 527, 528, 530, 531, 532, 534, 535, 536, 538, 539, 540, 542, 543, 544, 546, 547, 548, 550, 551, 552, 554, 555, 556, 558, 559, 560, 562, 563, 564, 566, 567, 568, 570, 571, 572, 574, 575, 576, 578, 579, 580, 582, 583, 584, 586, 587, 588, 589, 591, 592, 593, 595, 596, 597, 599, 600, 601, 603, 604, 605, 607, 608, 609, 611, 612, 613, 615, 616, 617, 619, 620, 621, 623, 624, 625, 627, 628, 629, 631, 632, 633, 635, 636, 637, 639, 640, 641, 643, 644, 645, 647, 648, 649, 651, 652, 653, 655, 656, 657, 659, 660, 661, 663, 664, 665, 667, 668, 669, 671, 672, 673, 675, 676, 677, 678, 679, 681, 682, 683, 684, 686, 687, 688, 690, 691, 692, 694, 695, 696, 698, 699, 700, 702, 703, 704, 706, 707, 708, 710, 711, 712, 714, 715, 716, 718, 719, 720, 722, 723, 724, 726, 727, 728, 729, 731, 732, 733, 734, 736, 737, 738, 739, 741, 742, 743, 745, 746, 747, 748, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 868, 869, 871, 872, 874, 875, 877, 878, 880, 881, 883, 884, 886, 887, 889, 890, 891, 893, 894, 895, 897, 898, 900, 901, 903, 904, 906, 907, 909, 910, 911, 913, 914, 916, 917, 919, 920, 922, 923, 925, 926, 928, 929, 931, 932, 934, 935, 936, 938, 939, 940, 941, 943, 944, 945, 946, 948, 949, 950, 951, 952, 954, 955, 956, 957, 959, 960, 961, 963, 964, 965, 967, 968, 969, 971, 972, 973, 975, 976, 977, 979, 980, 981, 983, 984, 985, 987, 988, 989, 990, 991, 993, 994, 995, 997, 998, 999, 1001, 1002, 1003, 1005, 1006, 1007, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1063, 1064, 1065, 1066, 1068, 1069, 1070, 1071, 1072, 1074, 1075, 1076, 1078, 1079, 1080, 1082, 1083, 1084, 1086, 1087, 1088, 1090, 1091, 1092, 1094, 1095, 1096, 1098, 1099, 1100, 1102, 1103, 1104, 1105, 1107, 1108, 1109, 1111, 1112, 1113, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1127, 1128, 1130, 1131, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1159, 1160], "arrai": [0, 1, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 162, 177, 178, 179, 180, 181, 182, 187, 189, 206, 207, 208, 223, 225, 262, 274, 275, 278, 279, 282, 288, 290, 294, 295, 300, 301, 308, 309, 312, 313, 314, 315, 326, 327, 330, 331, 345, 346, 347, 349, 350, 351, 352, 354, 355, 356, 357, 359, 360, 361, 362, 364, 365, 366, 368, 369, 370, 382, 383, 391, 393, 394, 395, 396, 397, 398, 399, 400, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 429, 430, 431, 432, 434, 435, 436, 441, 443, 446, 448, 449, 451, 455, 460, 479, 480, 481, 482, 485, 486, 487, 488, 489, 490, 491, 492, 494, 498, 500, 504, 505, 510, 511, 514, 515, 518, 519, 522, 523, 525, 526, 527, 528, 531, 532, 535, 536, 539, 540, 543, 544, 547, 548, 551, 552, 555, 556, 559, 560, 563, 564, 567, 568, 571, 572, 574, 575, 576, 579, 580, 583, 584, 587, 589, 592, 593, 596, 597, 600, 601, 604, 605, 607, 608, 609, 612, 613, 616, 617, 620, 621, 624, 625, 628, 629, 632, 633, 636, 637, 640, 641, 644, 645, 648, 649, 652, 653, 656, 657, 660, 661, 664, 665, 668, 669, 672, 673, 676, 677, 678, 679, 682, 684, 687, 688, 691, 692, 695, 696, 699, 700, 703, 704, 707, 708, 711, 712, 715, 716, 719, 720, 723, 724, 727, 728, 732, 733, 734, 736, 737, 738, 739, 741, 742, 743, 746, 747, 748, 750, 751, 752, 755, 756, 757, 759, 760, 762, 764, 765, 766, 769, 770, 771, 772, 773, 774, 775, 776, 778, 779, 780, 781, 784, 786, 787, 788, 789, 790, 791, 793, 794, 796, 799, 800, 801, 803, 804, 809, 810, 813, 815, 816, 817, 819, 820, 821, 823, 824, 826, 829, 831, 833, 834, 836, 838, 840, 842, 844, 847, 849, 850, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 868, 869, 871, 872, 874, 875, 877, 878, 880, 881, 883, 884, 886, 887, 890, 891, 893, 894, 895, 897, 898, 900, 901, 903, 904, 906, 907, 909, 910, 911, 913, 914, 916, 917, 919, 920, 922, 923, 925, 926, 928, 929, 931, 932, 934, 935, 936, 939, 941, 944, 946, 949, 951, 952, 954, 955, 956, 957, 960, 961, 964, 965, 968, 969, 972, 973, 976, 977, 980, 981, 984, 985, 987, 988, 989, 990, 991, 994, 995, 998, 999, 1002, 1003, 1006, 1007, 1010, 1011, 1012, 1013, 1014, 1015, 1017, 1027, 1028, 1033, 1034, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1046, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1064, 1066, 1069, 1071, 1072, 1075, 1076, 1079, 1080, 1083, 1084, 1087, 1088, 1091, 1092, 1095, 1096, 1099, 1100, 1103, 1104, 1105, 1108, 1109, 1112, 1113, 1116, 1118, 1134, 1142, 1145], "arraywithactiv": 0, "sourc": [0, 1, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 348, 358, 359, 383, 384, 385, 386, 387, 388, 389, 390, 391, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 427, 428, 429, 430, 431, 432, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 462, 463, 464, 465, 466, 467, 469, 470, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 513, 514, 515, 517, 518, 519, 521, 522, 523, 525, 526, 527, 528, 530, 531, 532, 534, 535, 536, 538, 539, 540, 542, 543, 544, 546, 547, 548, 550, 551, 552, 554, 555, 556, 558, 559, 560, 562, 563, 564, 566, 567, 568, 570, 571, 572, 574, 575, 576, 578, 579, 580, 582, 583, 584, 586, 587, 588, 589, 591, 592, 593, 595, 596, 597, 599, 600, 601, 603, 604, 605, 607, 608, 609, 611, 612, 613, 615, 616, 617, 619, 620, 621, 623, 624, 625, 627, 628, 629, 631, 632, 633, 635, 636, 637, 639, 640, 641, 643, 644, 645, 647, 648, 649, 651, 652, 653, 655, 656, 657, 659, 660, 661, 663, 664, 665, 667, 668, 669, 671, 672, 673, 675, 676, 677, 678, 679, 681, 682, 683, 684, 686, 687, 688, 690, 691, 692, 694, 695, 696, 698, 699, 700, 702, 703, 704, 706, 707, 708, 710, 711, 712, 714, 715, 716, 718, 719, 720, 722, 723, 724, 726, 727, 728, 729, 731, 732, 733, 734, 736, 737, 738, 739, 741, 742, 743, 745, 746, 747, 748, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 868, 869, 871, 872, 874, 875, 877, 878, 880, 881, 883, 884, 886, 887, 889, 890, 891, 893, 894, 895, 897, 898, 900, 901, 903, 904, 906, 907, 909, 910, 911, 913, 914, 916, 917, 919, 920, 922, 923, 925, 926, 928, 929, 931, 932, 934, 935, 936, 938, 939, 940, 941, 943, 944, 945, 946, 948, 949, 950, 951, 952, 954, 955, 956, 957, 959, 960, 961, 963, 964, 965, 967, 968, 969, 971, 972, 973, 975, 976, 977, 979, 980, 981, 983, 984, 985, 987, 988, 989, 990, 991, 993, 994, 995, 997, 998, 999, 1001, 1002, 1003, 1005, 1006, 1007, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1063, 1064, 1065, 1066, 1068, 1069, 1070, 1071, 1072, 1074, 1075, 1076, 1078, 1079, 1080, 1082, 1083, 1084, 1086, 1087, 1088, 1090, 1091, 1092, 1094, 1095, 1096, 1098, 1099, 1100, 1102, 1103, 1104, 1105, 1107, 1108, 1109, 1111, 1112, 1113, 1116, 1117, 1118, 1120, 1121, 1122, 1123, 1124, 1125, 1127, 1128, 1130, 1131, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1159, 1160], "base": [0, 1, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 158, 175, 176, 178, 179, 180, 181, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 346, 354, 357, 359, 365, 381, 404, 414, 423, 460, 462, 463, 464, 465, 466, 467, 469, 470, 472, 473, 474, 475, 510, 597, 641, 644, 645, 648, 649, 652, 653, 656, 696, 699, 747, 782, 805, 812, 821, 1055, 1056, 1057, 1059, 1071, 1072, 1075, 1099, 1120, 1121, 1122, 1125, 1127, 1128, 1130, 1131, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157], "abc": [0, 1, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 177, 178, 367, 460, 469, 475, 747, 772, 1146, 1147, 1150, 1154], "activ": [1, 156, 157, 176, 342, 343, 345, 346, 348, 350, 369, 394, 395, 396, 397, 398, 399, 400, 1113, 1121, 1122], "support": [1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 121, 123, 125, 127, 129, 131, 133, 135, 137, 139, 141, 143, 145, 147, 149, 151, 153, 155, 157, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 172, 173, 174, 176, 177, 178, 180, 181, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 307, 309, 311, 313, 315, 317, 319, 321, 323, 325, 327, 329, 331, 333, 335, 337, 339, 341, 343, 351, 352, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 367, 368, 370, 384, 385, 386, 387, 388, 389, 390, 391, 394, 395, 396, 397, 398, 399, 400, 402, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1012, 1013, 1014, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1034, 1035, 1036, 1037, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1051, 1052, 1053, 1054, 1056, 1057, 1058, 1059, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1117, 1118, 1119, 1121, 1122, 1124, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1147, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1157, 1158, 1160], "framework": [1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 121, 123, 125, 127, 129, 131, 133, 135, 137, 139, 141, 143, 145, 147, 149, 151, 153, 155, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 172, 173, 174, 176, 177, 178, 180, 181, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 307, 309, 311, 313, 315, 317, 319, 321, 323, 325, 327, 329, 331, 333, 335, 337, 339, 341, 343, 349, 353, 355, 356, 357, 358, 361, 363, 364, 367, 370, 381, 382, 384, 385, 386, 387, 388, 389, 390, 391, 394, 395, 396, 397, 398, 399, 400, 401, 402, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1012, 1013, 1014, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1034, 1035, 1036, 1037, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1051, 1052, 1053, 1054, 1056, 1057, 1058, 1059, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1117, 1118, 1119, 1121, 1122, 1123, 1124, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1147, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1157, 1158, 1160], "collect": [115, 177, 178, 354, 381, 393, 401, 460, 747, 821, 852, 935, 1015, 1028, 1033, 1038, 1120, 1134, 1148, 1150], "function": [115, 122, 123, 126, 127, 128, 129, 140, 141, 156, 157, 158, 162, 163, 164, 172, 177, 178, 182, 187, 189, 206, 207, 208, 223, 225, 262, 274, 275, 278, 279, 282, 288, 290, 294, 295, 300, 301, 308, 309, 312, 313, 314, 315, 326, 327, 330, 331, 342, 343, 346, 348, 349, 350, 351, 352, 353, 354, 356, 358, 362, 364, 366, 367, 368, 369, 380, 381, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 427, 428, 429, 430, 431, 432, 434, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 462, 463, 464, 465, 466, 467, 469, 470, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 515, 519, 523, 525, 527, 528, 532, 536, 540, 544, 548, 552, 556, 560, 564, 568, 572, 574, 576, 580, 584, 589, 593, 597, 601, 605, 607, 609, 613, 617, 621, 625, 629, 633, 637, 641, 645, 649, 653, 657, 661, 665, 669, 673, 677, 678, 679, 684, 688, 692, 696, 700, 704, 708, 712, 716, 720, 724, 728, 733, 734, 736, 738, 739, 741, 743, 747, 748, 750, 752, 753, 754, 755, 756, 757, 758, 759, 760, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 778, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 823, 824, 828, 829, 833, 834, 838, 842, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 869, 872, 875, 878, 881, 884, 887, 891, 894, 895, 898, 901, 904, 907, 910, 911, 914, 917, 920, 923, 926, 929, 932, 935, 936, 941, 946, 951, 952, 954, 956, 957, 961, 965, 969, 973, 977, 981, 985, 987, 989, 990, 991, 995, 999, 1003, 1007, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1038, 1039, 1040, 1042, 1043, 1044, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1066, 1071, 1072, 1076, 1080, 1084, 1088, 1092, 1096, 1100, 1104, 1105, 1109, 1113, 1116, 1118, 1120, 1121, 1122, 1150, 1153, 1155], "wrap": [115, 122, 123, 126, 127, 128, 129, 140, 141, 157, 177, 178, 179, 180, 181, 182, 187, 189, 206, 207, 208, 223, 225, 262, 274, 275, 278, 279, 282, 288, 290, 294, 295, 300, 301, 308, 309, 312, 313, 314, 315, 326, 327, 330, 331, 343, 349, 351, 354, 355, 356, 358, 359, 360, 361, 362, 363, 365, 367, 370, 382, 383, 391, 432, 434, 436, 525, 527, 539, 544, 572, 574, 607, 609, 657, 734, 736, 739, 741, 742, 747, 748, 750, 752, 758, 776, 778, 780, 821, 850, 952, 954, 956, 985, 987, 989, 1040, 1042], "accept": [115, 345, 346, 351, 352, 354, 355, 358, 359, 361, 362, 363, 367, 404, 415, 423, 432, 435, 510, 523, 528, 531, 548, 551, 568, 571, 572, 575, 580, 605, 665, 668, 669, 672, 688, 691, 700, 703, 704, 707, 720, 723, 724, 727, 733, 738, 747, 775, 852, 855, 864, 865, 872, 951, 965, 968, 969, 972, 985, 988, 1033, 1034, 1037, 1055, 1056, 1057, 1060, 1061, 1064, 1071, 1076, 1079, 1080, 1083, 1104, 1105, 1108, 1113], "return": [115, 116, 117, 118, 119, 122, 123, 126, 127, 128, 129, 136, 137, 138, 139, 140, 141, 142, 143, 150, 151, 152, 153, 154, 155, 158, 162, 163, 170, 177, 178, 179, 180, 181, 182, 183, 184, 185, 187, 188, 189, 190, 191, 192, 193, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 227, 228, 229, 230, 231, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 308, 309, 312, 313, 314, 315, 316, 317, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 336, 337, 338, 339, 340, 341, 350, 351, 352, 354, 355, 357, 358, 359, 360, 361, 362, 363, 365, 367, 368, 369, 370, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 427, 428, 429, 430, 431, 432, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 455, 459, 460, 469, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 503, 504, 505, 506, 507, 508, 509, 510, 511, 513, 514, 515, 517, 518, 519, 521, 522, 523, 525, 526, 527, 528, 530, 531, 532, 534, 535, 536, 538, 539, 540, 542, 543, 544, 546, 547, 548, 550, 551, 552, 554, 555, 556, 558, 559, 560, 562, 563, 564, 566, 567, 568, 570, 571, 572, 574, 575, 576, 578, 579, 580, 582, 583, 584, 586, 587, 588, 589, 591, 592, 593, 595, 596, 597, 599, 600, 601, 603, 604, 605, 607, 608, 609, 611, 612, 613, 615, 616, 617, 619, 620, 621, 623, 624, 625, 627, 628, 629, 631, 632, 633, 635, 636, 637, 639, 640, 641, 643, 644, 645, 647, 648, 649, 651, 652, 653, 655, 656, 657, 659, 660, 661, 663, 664, 665, 667, 668, 669, 671, 672, 673, 675, 676, 677, 678, 679, 681, 682, 683, 684, 686, 687, 688, 690, 691, 692, 694, 695, 696, 698, 699, 700, 702, 703, 704, 706, 707, 708, 710, 711, 712, 714, 715, 716, 718, 719, 720, 722, 723, 724, 726, 727, 728, 729, 731, 732, 733, 734, 736, 737, 738, 739, 741, 742, 743, 745, 746, 747, 748, 750, 751, 752, 753, 755, 756, 757, 758, 759, 760, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 778, 779, 780, 782, 783, 784, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 803, 804, 805, 806, 809, 810, 811, 812, 813, 815, 816, 817, 818, 819, 820, 821, 823, 824, 826, 827, 828, 829, 831, 832, 833, 834, 836, 837, 838, 840, 841, 842, 843, 844, 845, 847, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 868, 869, 871, 872, 874, 875, 877, 878, 880, 881, 883, 884, 886, 887, 889, 890, 891, 893, 894, 895, 897, 898, 900, 901, 903, 904, 906, 907, 909, 910, 911, 913, 914, 916, 917, 919, 920, 922, 923, 925, 926, 928, 929, 931, 932, 934, 935, 936, 938, 939, 940, 941, 943, 944, 945, 946, 948, 949, 950, 951, 952, 954, 955, 956, 957, 959, 960, 961, 963, 964, 965, 967, 968, 969, 971, 972, 973, 975, 976, 977, 979, 980, 981, 983, 984, 985, 987, 988, 989, 990, 991, 993, 994, 995, 997, 998, 999, 1001, 1002, 1003, 1005, 1006, 1007, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1021, 1025, 1026, 1027, 1028, 1033, 1034, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1063, 1064, 1065, 1066, 1068, 1069, 1070, 1071, 1072, 1074, 1075, 1076, 1078, 1079, 1080, 1082, 1083, 1084, 1086, 1087, 1088, 1090, 1091, 1092, 1094, 1095, 1096, 1098, 1099, 1100, 1102, 1103, 1104, 1105, 1107, 1108, 1109, 1111, 1112, 1113, 1116, 1118, 1123, 1124, 1134, 1143, 1144, 1150, 1154], "instanc": [115, 116, 117, 118, 119, 122, 123, 126, 127, 128, 129, 140, 141, 156, 157, 177, 178, 179, 180, 182, 187, 189, 206, 207, 208, 223, 225, 262, 300, 301, 308, 309, 312, 313, 314, 315, 326, 327, 342, 343, 347, 351, 352, 354, 355, 358, 360, 362, 363, 368, 369, 370, 383, 391, 393, 395, 396, 397, 398, 399, 400, 404, 415, 423, 432, 434, 435, 460, 469, 501, 510, 523, 525, 528, 531, 539, 544, 548, 551, 568, 571, 572, 574, 575, 580, 592, 605, 607, 609, 616, 617, 620, 657, 677, 678, 684, 687, 688, 691, 704, 707, 720, 723, 724, 727, 733, 736, 738, 741, 742, 747, 748, 750, 764, 775, 776, 778, 791, 815, 817, 852, 855, 858, 864, 865, 866, 868, 869, 871, 872, 935, 936, 939, 951, 952, 954, 965, 968, 969, 972, 977, 980, 985, 987, 988, 990, 999, 1002, 1033, 1034, 1037, 1038, 1043, 1044, 1046, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1060, 1061, 1064, 1071, 1072, 1075, 1076, 1079, 1099, 1104, 1105, 1108, 1123, 1124], "args_to_ivi": 115, "arg": [115, 116, 117, 158, 162, 177, 178, 348, 365, 367, 369, 460, 469, 484, 488, 492, 504, 747, 804, 1123, 1124, 1146, 1147], "include_deriv": [115, 116, 117, 118, 119, 1015, 1017, 1027], "none": [115, 116, 117, 118, 119, 126, 127, 128, 129, 136, 137, 138, 139, 140, 141, 142, 143, 150, 151, 152, 153, 154, 155, 158, 160, 163, 170, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 350, 352, 355, 359, 360, 361, 362, 363, 365, 367, 369, 370, 393, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 411, 412, 413, 414, 416, 417, 418, 419, 420, 421, 422, 423, 429, 431, 432, 434, 436, 438, 439, 440, 443, 446, 460, 469, 470, 478, 479, 502, 503, 504, 505, 508, 510, 511, 513, 514, 515, 517, 518, 519, 521, 522, 523, 525, 526, 527, 528, 530, 531, 532, 534, 535, 536, 538, 539, 540, 542, 543, 544, 546, 547, 548, 550, 551, 552, 554, 555, 556, 558, 559, 560, 562, 563, 564, 566, 567, 568, 570, 571, 572, 574, 575, 576, 578, 579, 580, 582, 583, 584, 586, 587, 588, 589, 591, 592, 593, 595, 596, 597, 599, 600, 601, 603, 604, 605, 607, 608, 609, 611, 612, 613, 615, 616, 617, 619, 620, 621, 623, 624, 625, 627, 628, 629, 631, 632, 633, 635, 636, 637, 639, 640, 641, 643, 644, 645, 647, 648, 649, 651, 652, 653, 655, 656, 657, 659, 660, 661, 663, 664, 665, 667, 668, 669, 671, 672, 673, 675, 676, 677, 678, 679, 681, 682, 683, 684, 686, 687, 688, 690, 691, 692, 694, 695, 696, 698, 699, 700, 702, 703, 704, 706, 707, 708, 710, 711, 712, 714, 715, 716, 718, 719, 720, 722, 723, 724, 726, 727, 728, 729, 731, 732, 733, 734, 736, 737, 738, 739, 741, 742, 743, 745, 746, 747, 748, 750, 752, 753, 759, 760, 761, 762, 764, 765, 766, 768, 769, 770, 771, 772, 773, 775, 776, 778, 779, 780, 785, 787, 788, 792, 798, 800, 803, 804, 805, 806, 811, 812, 818, 821, 824, 825, 826, 827, 829, 830, 831, 832, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 868, 869, 871, 872, 874, 875, 877, 881, 883, 884, 886, 887, 889, 890, 891, 893, 894, 895, 897, 898, 900, 901, 903, 904, 906, 910, 911, 913, 914, 916, 917, 919, 920, 922, 923, 925, 926, 928, 929, 931, 932, 934, 935, 936, 938, 939, 940, 941, 943, 944, 945, 946, 948, 949, 950, 951, 952, 954, 955, 956, 957, 959, 960, 961, 963, 964, 965, 967, 968, 969, 971, 972, 973, 975, 976, 977, 979, 980, 981, 983, 984, 985, 987, 988, 989, 990, 991, 993, 994, 995, 997, 998, 999, 1001, 1002, 1003, 1005, 1006, 1007, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1021, 1026, 1027, 1028, 1033, 1034, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1054, 1055, 1059, 1060, 1061, 1063, 1064, 1065, 1066, 1068, 1069, 1070, 1071, 1072, 1074, 1075, 1076, 1078, 1079, 1080, 1082, 1083, 1084, 1086, 1087, 1088, 1090, 1091, 1092, 1094, 1095, 1096, 1098, 1099, 1100, 1102, 1103, 1104, 1105, 1107, 1108, 1109, 1111, 1112, 1123, 1124, 1125, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157], "kwarg": [115, 116, 117, 158, 162, 175, 176, 177, 178, 179, 180, 181, 182, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 365, 367, 369, 460, 469, 484, 488, 492, 747, 797, 1123, 1124, 1146, 1147], "keyword": [115, 116, 117, 177, 178, 179, 180, 181, 350, 360, 361, 362, 363, 368, 404, 415, 460, 469, 470, 484, 488, 492, 747, 754, 797, 1015, 1021, 1071, 1096, 1146, 1147], "variabl": [115, 116, 117, 118, 119, 177, 178, 179, 180, 351, 356, 359, 360, 362, 363, 368, 369, 370, 382, 747, 757, 789, 790, 791, 792, 793, 794, 796, 813, 821, 824, 826, 828, 829, 831, 833, 834, 836, 838, 840, 842, 844, 847, 850, 852, 863, 865, 911, 913, 1011, 1012, 1013, 1014, 1033, 1034, 1037, 1113, 1123, 1124, 1125, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157], "form": [115, 116, 117, 118, 119, 173, 177, 178, 344, 355, 369, 370, 404, 406, 416, 419, 420, 747, 753, 821, 824, 826, 829, 831, 834, 836, 838, 840, 842, 844, 852, 865, 866, 868, 872, 875, 877, 878, 880, 881, 883, 884, 886, 895, 897, 898, 900, 904, 906, 907, 909, 911, 913, 914, 916, 917, 919, 923, 925, 1015, 1017, 1027], "all": [115, 116, 117, 118, 119, 154, 155, 156, 157, 172, 173, 174, 177, 178, 182, 340, 341, 342, 343, 344, 345, 346, 347, 348, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 367, 368, 369, 370, 381, 382, 383, 391, 401, 402, 404, 405, 419, 420, 460, 469, 494, 500, 747, 748, 751, 755, 756, 781, 801, 816, 852, 862, 865, 911, 913, 920, 922, 929, 931, 951, 969, 972, 985, 988, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1026, 1027, 1028, 1038, 1039, 1044, 1046, 1104, 1113, 1116, 1118], "nest": [115, 116, 117, 118, 119, 177, 178, 179, 180, 181, 350, 355, 358, 359, 367, 368, 369, 382, 460, 484, 488, 492, 747, 815, 1011, 1012, 1013, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1146, 1147, 1150, 1151, 1152, 1153, 1154, 1155], "otherwis": [115, 116, 117, 118, 119, 158, 170, 177, 178, 358, 360, 361, 363, 365, 367, 404, 405, 423, 429, 432, 435, 438, 439, 440, 460, 479, 510, 621, 624, 625, 628, 629, 632, 747, 757, 818, 821, 833, 847, 865, 866, 868, 872, 926, 928, 929, 931, 1011, 1012, 1013, 1015, 1028, 1050, 1051, 1052, 1054, 1071, 1076, 1079, 1080, 1083, 1084, 1087, 1088, 1091, 1092, 1095, 1096, 1100, 1103, 1104, 1105, 1108, 1109, 1112], "argument": [115, 116, 117, 118, 119, 158, 162, 163, 172, 177, 178, 179, 180, 181, 347, 349, 350, 351, 352, 354, 355, 356, 358, 359, 365, 367, 368, 401, 402, 404, 405, 423, 432, 435, 451, 460, 469, 470, 484, 488, 492, 510, 523, 528, 531, 572, 575, 605, 688, 691, 720, 723, 724, 727, 733, 747, 753, 754, 758, 768, 775, 797, 804, 852, 855, 864, 951, 985, 988, 1015, 1021, 1033, 1034, 1037, 1071, 1076, 1079, 1096, 1104, 1105, 1108, 1116, 1118, 1123, 1124, 1146, 1147], "ar": [115, 116, 117, 172, 173, 174, 177, 178, 179, 180, 181, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 381, 382, 383, 391, 404, 405, 460, 469, 470, 494, 498, 500, 504, 510, 576, 665, 668, 669, 672, 704, 707, 712, 715, 733, 747, 748, 751, 755, 756, 757, 781, 787, 788, 792, 799, 801, 813, 852, 861, 865, 869, 871, 886, 887, 890, 891, 893, 895, 897, 904, 906, 914, 916, 917, 919, 926, 928, 951, 952, 955, 969, 972, 985, 988, 1015, 1017, 1021, 1027, 1038, 1043, 1044, 1046, 1050, 1051, 1052, 1053, 1055, 1056, 1113, 1156, 1157], "unchang": [115, 116, 117, 118, 119], "paramet": [115, 116, 117, 118, 119, 156, 157, 158, 162, 163, 177, 178, 179, 180, 181, 342, 343, 350, 351, 354, 367, 368, 381, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 427, 428, 429, 430, 431, 432, 435, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 459, 460, 469, 470, 473, 474, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 496, 498, 499, 500, 501, 502, 503, 504, 505, 506, 509, 510, 511, 514, 515, 518, 519, 522, 523, 526, 528, 531, 532, 535, 536, 539, 540, 543, 544, 547, 548, 551, 552, 555, 556, 559, 560, 563, 564, 567, 568, 571, 572, 575, 576, 579, 580, 583, 584, 587, 589, 592, 593, 596, 597, 600, 601, 604, 605, 608, 609, 612, 613, 616, 617, 620, 621, 624, 625, 628, 629, 632, 633, 636, 637, 640, 641, 644, 645, 648, 649, 652, 653, 656, 657, 660, 661, 664, 665, 668, 669, 672, 673, 676, 677, 678, 679, 682, 684, 687, 688, 691, 692, 695, 696, 699, 700, 703, 704, 707, 708, 711, 712, 715, 716, 719, 720, 723, 724, 727, 728, 732, 733, 737, 738, 742, 743, 746, 747, 748, 751, 753, 754, 755, 756, 757, 758, 759, 760, 762, 765, 766, 768, 769, 770, 771, 772, 773, 774, 775, 776, 779, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 800, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 815, 816, 817, 818, 819, 820, 821, 823, 824, 826, 828, 829, 831, 833, 834, 836, 838, 840, 842, 844, 846, 847, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 868, 869, 871, 872, 874, 875, 877, 878, 880, 881, 883, 884, 886, 887, 890, 891, 893, 895, 897, 898, 900, 901, 903, 904, 906, 907, 909, 910, 911, 913, 914, 916, 917, 919, 920, 922, 923, 925, 926, 928, 929, 931, 932, 934, 935, 936, 939, 941, 944, 946, 949, 951, 952, 955, 957, 960, 961, 964, 965, 968, 969, 972, 973, 976, 977, 980, 981, 984, 985, 988, 990, 991, 994, 995, 998, 999, 1002, 1003, 1006, 1007, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1037, 1038, 1039, 1040, 1041, 1043, 1044, 1046, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1064, 1066, 1069, 1071, 1072, 1075, 1076, 1079, 1080, 1083, 1084, 1087, 1088, 1091, 1092, 1095, 1096, 1099, 1100, 1103, 1104, 1105, 1108, 1109, 1112, 1116, 1118, 1123, 1124, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157], "iter": [115, 116, 117, 118, 119, 156, 157, 174, 177, 178, 179, 180, 181, 342, 343, 359, 365, 368, 401, 402, 460, 482, 483, 485, 486, 487, 488, 491, 504, 747, 748, 751, 804, 809, 951, 961, 964, 977, 980, 990, 1003, 1006, 1007, 1010, 1015, 1016, 1017, 1021, 1025, 1026, 1027], "ani": [115, 116, 117, 154, 155, 156, 157, 158, 162, 170, 172, 173, 174, 177, 178, 182, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 365, 367, 368, 369, 370, 381, 382, 401, 402, 404, 406, 416, 423, 432, 435, 460, 505, 510, 523, 528, 531, 572, 575, 589, 592, 605, 616, 617, 620, 637, 640, 688, 691, 720, 723, 724, 727, 733, 747, 748, 751, 768, 769, 770, 771, 772, 775, 786, 793, 794, 795, 796, 811, 812, 821, 828, 852, 855, 864, 951, 985, 988, 1011, 1012, 1013, 1014, 1015, 1021, 1025, 1033, 1034, 1037, 1038, 1044, 1046, 1071, 1076, 1079, 1104, 1105, 1108, 1113], "The": [115, 116, 117, 118, 119, 158, 162, 163, 171, 172, 174, 177, 178, 179, 180, 181, 344, 345, 347, 348, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 368, 369, 370, 381, 393, 394, 395, 398, 400, 401, 402, 404, 405, 410, 414, 415, 419, 420, 423, 427, 428, 429, 437, 442, 444, 445, 447, 450, 455, 459, 460, 469, 470, 476, 477, 478, 479, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 498, 499, 500, 501, 502, 503, 504, 506, 509, 510, 511, 514, 515, 518, 519, 522, 523, 526, 528, 531, 532, 535, 536, 539, 540, 543, 544, 547, 548, 551, 552, 555, 556, 559, 560, 563, 564, 567, 568, 571, 572, 575, 576, 579, 580, 583, 584, 587, 589, 592, 593, 596, 597, 600, 601, 604, 605, 608, 609, 612, 613, 616, 617, 620, 621, 624, 625, 628, 629, 632, 633, 636, 637, 640, 641, 644, 645, 648, 653, 656, 657, 660, 661, 664, 665, 668, 669, 672, 673, 676, 679, 682, 688, 691, 696, 699, 700, 703, 704, 707, 708, 711, 712, 715, 716, 719, 720, 723, 733, 737, 738, 742, 743, 746, 747, 753, 755, 758, 759, 767, 768, 774, 776, 779, 789, 790, 791, 793, 794, 795, 796, 798, 803, 804, 805, 806, 807, 810, 811, 812, 820, 821, 823, 824, 826, 829, 831, 834, 836, 838, 840, 842, 844, 847, 850, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 863, 864, 865, 866, 868, 869, 871, 872, 874, 875, 877, 878, 880, 881, 883, 884, 886, 891, 893, 895, 897, 898, 900, 901, 903, 904, 906, 907, 909, 910, 911, 913, 914, 916, 917, 919, 920, 922, 923, 925, 926, 928, 929, 931, 935, 936, 939, 941, 944, 946, 949, 951, 957, 960, 961, 964, 965, 968, 969, 972, 973, 976, 977, 980, 981, 984, 990, 1003, 1006, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1037, 1038, 1039, 1043, 1050, 1051, 1052, 1053, 1055, 1056, 1057, 1059, 1060, 1061, 1064, 1066, 1069, 1071, 1072, 1075, 1076, 1079, 1080, 1083, 1084, 1087, 1088, 1091, 1092, 1095, 1096, 1099, 1100, 1103, 1104, 1105, 1108, 1109, 1112, 1113, 1123, 1124, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1152, 1153, 1154], "posit": [115, 116, 117, 126, 127, 182, 312, 313, 363, 368, 381, 403, 404, 409, 423, 443, 460, 484, 488, 492, 510, 511, 514, 621, 624, 625, 628, 679, 682, 700, 703, 747, 774, 865, 866, 868, 951, 965, 968, 985, 988, 1038, 1048, 1050, 1053, 1104, 1105, 1108, 1109, 1112, 1123, 1124], "check": [115, 116, 117, 118, 119, 172, 173, 174, 177, 178, 345, 346, 359, 364, 365, 367, 368, 369, 370, 381, 423, 437, 444, 445, 447, 459, 460, 499, 509, 747, 757, 772, 786, 793, 794, 795, 796, 813, 820, 821, 833, 865, 878, 880, 1015, 1016, 1025, 1026, 1027, 1113], "option": [115, 116, 117, 118, 119, 156, 157, 158, 163, 177, 178, 342, 343, 345, 346, 350, 351, 352, 355, 359, 360, 361, 362, 363, 365, 370, 382, 393, 395, 396, 398, 401, 402, 404, 405, 406, 407, 408, 409, 411, 412, 413, 414, 415, 416, 417, 418, 421, 422, 423, 437, 438, 439, 440, 447, 459, 460, 479, 503, 504, 505, 510, 511, 514, 515, 518, 519, 522, 523, 526, 528, 531, 532, 535, 536, 540, 543, 548, 551, 552, 555, 556, 559, 560, 563, 564, 567, 568, 571, 572, 575, 576, 579, 580, 583, 597, 600, 601, 604, 605, 621, 624, 625, 628, 629, 632, 633, 636, 641, 644, 645, 648, 649, 652, 653, 656, 657, 660, 661, 664, 665, 668, 669, 672, 673, 676, 679, 682, 684, 687, 688, 691, 696, 699, 700, 703, 704, 707, 708, 711, 712, 715, 716, 719, 720, 723, 724, 727, 728, 732, 733, 738, 747, 753, 760, 762, 765, 766, 767, 773, 775, 798, 800, 803, 804, 811, 812, 821, 847, 852, 855, 858, 859, 861, 864, 865, 886, 891, 893, 895, 897, 904, 906, 929, 931, 935, 936, 939, 941, 944, 946, 949, 951, 952, 955, 957, 960, 965, 968, 969, 972, 973, 976, 977, 980, 985, 988, 990, 991, 994, 995, 998, 999, 1002, 1011, 1012, 1013, 1014, 1015, 1016, 1021, 1026, 1027, 1033, 1034, 1037, 1038, 1039, 1040, 1041, 1043, 1044, 1046, 1050, 1051, 1052, 1060, 1061, 1064, 1066, 1069, 1071, 1072, 1075, 1076, 1079, 1080, 1083, 1084, 1087, 1088, 1091, 1092, 1095, 1096, 1099, 1100, 1103, 1104, 1105, 1108, 1109, 1112], "dict": [115, 116, 117, 118, 119, 158, 170, 177, 178, 179, 180, 181, 359, 368, 369, 460, 469, 470, 479, 482, 485, 486, 487, 488, 747, 753, 769, 770, 771, 1015, 1017, 1018, 1021, 1024, 1027, 1028], "type": [115, 116, 117, 118, 119, 123, 126, 127, 128, 129, 136, 137, 138, 139, 140, 141, 142, 143, 150, 151, 152, 153, 154, 155, 156, 157, 158, 164, 170, 177, 178, 179, 180, 181, 182, 183, 184, 185, 187, 188, 189, 190, 191, 192, 193, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 227, 228, 229, 230, 231, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 309, 312, 313, 314, 315, 316, 317, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 336, 337, 338, 339, 340, 341, 342, 343, 345, 347, 349, 350, 351, 352, 357, 358, 359, 361, 362, 363, 365, 367, 368, 370, 383, 384, 385, 386, 387, 388, 389, 390, 391, 393, 395, 396, 397, 398, 399, 400, 401, 402, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 427, 428, 429, 430, 431, 432, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 455, 459, 460, 476, 477, 478, 479, 480, 482, 492, 493, 494, 495, 496, 497, 498, 499, 501, 503, 504, 505, 506, 507, 508, 509, 510, 511, 513, 514, 515, 517, 518, 519, 521, 522, 523, 525, 526, 527, 528, 530, 531, 532, 534, 535, 536, 538, 539, 540, 542, 543, 544, 546, 547, 548, 550, 551, 552, 554, 555, 556, 558, 559, 560, 562, 563, 564, 566, 567, 568, 570, 571, 572, 574, 575, 576, 578, 579, 580, 582, 583, 584, 586, 587, 588, 589, 591, 592, 593, 595, 596, 597, 599, 600, 601, 603, 604, 605, 607, 608, 609, 611, 612, 613, 615, 616, 617, 619, 620, 621, 623, 624, 625, 627, 628, 629, 631, 632, 633, 635, 636, 637, 639, 640, 641, 643, 644, 645, 647, 648, 649, 651, 652, 653, 655, 656, 657, 659, 660, 661, 663, 664, 665, 667, 668, 669, 671, 672, 673, 675, 676, 677, 678, 679, 681, 682, 683, 684, 686, 687, 688, 690, 691, 692, 694, 695, 696, 698, 699, 700, 702, 703, 704, 706, 707, 708, 710, 711, 712, 714, 715, 716, 718, 719, 720, 722, 723, 724, 726, 727, 728, 729, 731, 732, 733, 734, 736, 737, 738, 739, 741, 742, 743, 745, 746, 747, 748, 750, 751, 752, 753, 755, 756, 758, 759, 760, 762, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 778, 779, 780, 782, 783, 784, 786, 787, 789, 790, 791, 793, 794, 795, 796, 800, 803, 804, 805, 806, 809, 811, 812, 813, 815, 816, 817, 819, 820, 821, 823, 824, 826, 827, 829, 831, 832, 833, 834, 836, 837, 838, 840, 841, 842, 843, 844, 845, 847, 849, 852, 853, 855, 857, 858, 859, 864, 865, 866, 868, 869, 871, 872, 874, 875, 877, 878, 880, 881, 883, 884, 886, 887, 889, 890, 891, 893, 894, 895, 897, 898, 900, 901, 903, 904, 906, 907, 909, 910, 911, 913, 914, 916, 917, 919, 920, 922, 923, 925, 926, 928, 929, 931, 932, 934, 935, 936, 938, 939, 940, 941, 943, 944, 945, 946, 948, 949, 950, 951, 952, 954, 955, 956, 957, 959, 960, 961, 963, 964, 965, 967, 968, 969, 971, 972, 973, 975, 976, 977, 979, 980, 981, 983, 984, 985, 987, 988, 989, 990, 991, 993, 994, 995, 997, 998, 999, 1001, 1002, 1003, 1005, 1006, 1007, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1021, 1025, 1026, 1027, 1033, 1034, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1063, 1064, 1065, 1066, 1068, 1069, 1070, 1071, 1072, 1074, 1075, 1076, 1078, 1079, 1080, 1082, 1083, 1084, 1086, 1087, 1088, 1090, 1091, 1092, 1094, 1095, 1096, 1098, 1099, 1100, 1102, 1103, 1104, 1105, 1107, 1108, 1109, 1111, 1112, 1113, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145], "bool": [115, 116, 117, 118, 119, 122, 123, 177, 178, 342, 343, 352, 359, 360, 362, 370, 401, 402, 404, 411, 423, 429, 432, 435, 438, 439, 440, 441, 444, 447, 448, 449, 459, 460, 479, 480, 495, 504, 507, 510, 548, 551, 552, 555, 560, 563, 568, 571, 589, 592, 613, 616, 617, 620, 621, 624, 625, 628, 629, 632, 633, 636, 637, 640, 661, 664, 665, 668, 669, 672, 688, 691, 747, 748, 751, 755, 756, 765, 768, 772, 774, 784, 786, 791, 793, 794, 795, 796, 809, 819, 820, 821, 847, 865, 866, 868, 891, 893, 914, 929, 931, 951, 990, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1021, 1025, 1026, 1027, 1038, 1039, 1050, 1051, 1052, 1060, 1061, 1064, 1066, 1069, 1071, 1076, 1079, 1080, 1083, 1084, 1087, 1088, 1091, 1092, 1095, 1096, 1100, 1103, 1104, 1105, 1108, 1109, 1112], "whether": [115, 116, 117, 118, 119, 177, 178, 179, 180, 181, 342, 343, 344, 345, 360, 362, 363, 393, 394, 401, 402, 423, 429, 441, 447, 448, 449, 459, 460, 479, 480, 491, 495, 496, 499, 500, 504, 507, 509, 510, 629, 632, 747, 748, 751, 755, 756, 765, 768, 772, 774, 784, 786, 788, 791, 792, 793, 794, 795, 796, 797, 809, 813, 819, 820, 821, 824, 826, 828, 829, 831, 833, 834, 836, 838, 840, 842, 844, 847, 852, 860, 865, 878, 880, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1021, 1025, 1026, 1027, 1028, 1038, 1039, 1104, 1105, 1108, 1109, 1112, 1123, 1124, 1134, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155], "also": [115, 116, 117, 118, 119, 122, 123, 126, 127, 128, 129, 140, 141, 172, 173, 177, 178, 182, 187, 189, 206, 207, 208, 223, 225, 262, 274, 275, 278, 279, 282, 288, 290, 294, 295, 300, 301, 308, 309, 312, 313, 314, 315, 326, 327, 330, 331, 344, 345, 346, 349, 350, 351, 352, 354, 355, 357, 358, 359, 360, 361, 362, 363, 365, 367, 368, 369, 370, 381, 382, 404, 415, 423, 432, 434, 435, 436, 510, 523, 525, 527, 528, 531, 539, 544, 548, 551, 568, 571, 572, 574, 575, 580, 605, 607, 609, 657, 688, 691, 704, 707, 720, 723, 724, 727, 733, 734, 736, 738, 739, 741, 742, 747, 748, 750, 752, 775, 776, 778, 780, 791, 821, 824, 826, 852, 855, 861, 864, 865, 872, 951, 952, 954, 956, 965, 968, 969, 972, 985, 987, 988, 989, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1025, 1026, 1027, 1033, 1034, 1037, 1040, 1042, 1055, 1056, 1057, 1060, 1061, 1064, 1071, 1076, 1079, 1104, 1105, 1108, 1134, 1144], "recurs": [115, 116, 117, 118, 119, 177, 178, 345, 348, 355, 359, 369, 382, 1015, 1016, 1017, 1025, 1026, 1027], "deriv": [115, 116, 117, 118, 119, 360, 361, 367, 369, 404, 408, 412, 418, 422, 821, 823, 824, 826, 829, 831, 834, 836, 838, 840, 842, 844, 1015, 1017, 1027, 1146, 1150, 1154, 1156], "from": [115, 116, 117, 118, 119, 156, 157, 158, 162, 163, 164, 172, 173, 174, 177, 178, 179, 180, 181, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 354, 356, 358, 359, 360, 361, 362, 363, 365, 367, 368, 369, 370, 381, 382, 404, 405, 406, 408, 410, 411, 412, 415, 416, 418, 422, 423, 432, 435, 451, 460, 469, 470, 479, 494, 498, 503, 504, 510, 613, 720, 723, 747, 768, 775, 776, 779, 815, 821, 824, 826, 834, 836, 852, 860, 863, 865, 875, 877, 914, 926, 928, 951, 969, 972, 981, 984, 991, 994, 1011, 1012, 1013, 1014, 1015, 1017, 1027, 1028, 1038, 1039, 1040, 1041, 1043, 1044, 1046, 1050, 1054, 1055, 1056, 1058, 1071, 1088, 1091, 1092, 1095, 1096, 1100, 1103, 1104, 1105, 1108, 1109, 1112, 1113, 1119, 1123, 1124, 1134, 1142, 1145, 1150, 1154], "tupl": [115, 116, 117, 118, 119, 136, 137, 177, 178, 350, 359, 360, 361, 363, 367, 368, 369, 382, 401, 402, 404, 406, 407, 411, 416, 417, 421, 423, 431, 445, 460, 479, 747, 774, 810, 852, 855, 858, 859, 865, 886, 895, 897, 904, 906, 914, 920, 922, 929, 931, 951, 957, 960, 961, 964, 969, 972, 973, 976, 985, 988, 991, 994, 995, 998, 1007, 1010, 1011, 1012, 1013, 1014, 1015, 1017, 1018, 1020, 1022, 1023, 1024, 1026, 1027, 1029, 1030, 1031, 1032, 1038, 1043, 1044, 1046, 1050, 1053, 1055, 1056, 1057, 1058, 1071, 1076, 1079, 1080, 1083, 1084, 1087, 1088, 1091, 1092, 1095, 1096, 1100, 1103, 1104, 1105, 1108, 1109, 1112], "list": [115, 116, 117, 118, 119, 156, 157, 177, 178, 342, 343, 345, 347, 348, 350, 352, 360, 361, 363, 365, 368, 369, 370, 382, 404, 405, 406, 407, 415, 416, 417, 421, 423, 430, 460, 469, 470, 479, 481, 482, 485, 486, 489, 490, 504, 747, 756, 810, 815, 819, 852, 853, 854, 855, 856, 857, 858, 859, 865, 920, 922, 951, 957, 960, 969, 972, 990, 995, 998, 1015, 1016, 1017, 1021, 1026, 1027, 1033, 1034, 1037, 1050, 1053, 1104, 1105, 1108, 1109, 1112, 1113, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141], "default": [115, 116, 117, 118, 119, 156, 157, 158, 163, 177, 178, 179, 180, 181, 342, 343, 346, 351, 352, 355, 356, 359, 360, 361, 363, 369, 393, 394, 395, 396, 398, 401, 402, 404, 405, 406, 407, 408, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 429, 438, 439, 440, 441, 460, 469, 470, 479, 480, 484, 485, 486, 487, 488, 489, 490, 491, 492, 499, 501, 502, 503, 504, 505, 508, 509, 510, 511, 514, 515, 518, 519, 522, 523, 526, 528, 531, 532, 535, 536, 540, 543, 548, 551, 552, 555, 556, 559, 560, 563, 564, 567, 568, 571, 572, 575, 576, 579, 580, 583, 597, 600, 601, 604, 605, 621, 624, 625, 628, 629, 632, 633, 636, 641, 644, 645, 648, 649, 652, 653, 656, 657, 660, 661, 664, 665, 668, 669, 672, 673, 676, 679, 682, 684, 687, 688, 691, 696, 699, 700, 703, 704, 707, 708, 711, 712, 715, 716, 719, 720, 723, 724, 727, 728, 732, 733, 738, 747, 748, 751, 753, 759, 760, 762, 765, 766, 773, 774, 775, 784, 785, 786, 788, 791, 792, 793, 794, 796, 797, 798, 800, 802, 803, 804, 807, 809, 811, 812, 819, 820, 821, 823, 824, 826, 828, 829, 831, 833, 834, 836, 838, 840, 842, 844, 847, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 868, 869, 871, 875, 877, 886, 891, 893, 895, 897, 904, 906, 907, 909, 914, 920, 922, 923, 925, 926, 928, 929, 931, 935, 936, 939, 941, 944, 946, 949, 951, 952, 955, 957, 960, 961, 964, 965, 968, 969, 972, 973, 976, 977, 980, 985, 988, 990, 991, 994, 995, 998, 999, 1002, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1021, 1025, 1026, 1027, 1028, 1033, 1034, 1037, 1038, 1039, 1040, 1041, 1043, 1044, 1046, 1048, 1050, 1051, 1052, 1053, 1055, 1056, 1057, 1060, 1061, 1064, 1066, 1069, 1071, 1072, 1075, 1076, 1079, 1080, 1083, 1084, 1087, 1088, 1091, 1092, 1095, 1096, 1099, 1100, 1103, 1104, 1105, 1108, 1109, 1112, 1123, 1124, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157], "fals": [115, 116, 117, 118, 119, 128, 129, 136, 137, 150, 151, 152, 153, 154, 155, 158, 165, 166, 167, 168, 169, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 352, 359, 362, 368, 369, 370, 423, 429, 432, 434, 435, 436, 441, 460, 479, 480, 491, 495, 496, 499, 504, 507, 509, 510, 511, 513, 517, 518, 519, 521, 525, 526, 527, 528, 530, 532, 534, 538, 539, 540, 542, 544, 546, 548, 550, 551, 552, 554, 556, 558, 560, 562, 564, 566, 568, 570, 572, 574, 578, 579, 582, 583, 586, 587, 588, 591, 592, 593, 595, 599, 600, 601, 603, 607, 608, 609, 611, 613, 615, 616, 617, 619, 620, 621, 623, 624, 625, 627, 628, 629, 631, 632, 633, 635, 636, 637, 639, 641, 643, 645, 647, 649, 651, 653, 655, 657, 659, 661, 663, 665, 667, 668, 669, 671, 672, 673, 675, 679, 681, 683, 684, 686, 688, 690, 691, 692, 694, 696, 698, 700, 702, 704, 706, 708, 710, 712, 714, 716, 718, 720, 722, 724, 726, 728, 729, 731, 734, 736, 737, 739, 741, 742, 743, 745, 747, 748, 750, 751, 752, 755, 756, 760, 761, 765, 768, 772, 774, 776, 778, 780, 784, 791, 793, 794, 796, 797, 809, 819, 821, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 865, 866, 868, 887, 889, 891, 893, 914, 929, 931, 936, 938, 940, 941, 943, 945, 946, 948, 950, 951, 952, 954, 956, 957, 959, 961, 963, 965, 967, 969, 971, 973, 975, 977, 979, 981, 983, 985, 987, 989, 990, 991, 993, 995, 997, 999, 1001, 1003, 1005, 1007, 1009, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1021, 1025, 1026, 1027, 1028, 1034, 1036, 1038, 1039, 1044, 1045, 1047, 1050, 1051, 1052, 1054, 1055, 1056, 1057, 1059, 1060, 1061, 1063, 1064, 1065, 1066, 1068, 1069, 1070, 1071, 1072, 1074, 1076, 1078, 1079, 1080, 1082, 1083, 1084, 1086, 1087, 1088, 1090, 1091, 1092, 1094, 1095, 1096, 1098, 1099, 1100, 1102, 1103, 1104, 1105, 1107, 1108, 1109, 1111, 1112, 1123, 1124, 1146, 1147, 1150, 1151, 1152, 1153, 1154, 1155], "str": [115, 116, 117, 158, 163, 177, 178, 360, 361, 404, 415, 423, 427, 437, 438, 439, 442, 443, 446, 447, 448, 449, 452, 453, 454, 459, 460, 476, 479, 480, 482, 485, 486, 487, 488, 504, 747, 753, 767, 769, 770, 771, 798, 803, 804, 852, 853, 855, 857, 858, 859, 865, 907, 909, 1011, 1012, 1013, 1014, 1015, 1021, 1071, 1072, 1075, 1099], "kei": [115, 116, 117, 177, 178, 179, 180, 181, 359, 368, 460, 472, 747, 753, 763, 852, 863, 864, 1011, 1012, 1013, 1015, 1018, 1024, 1028, 1123, 1124, 1134, 1145, 1150, 1154], "word": [115, 116, 117, 404, 405, 1038, 1044, 1046, 1123, 1124], "ret": [115, 116, 117, 118, 119, 158, 162, 163, 170, 177, 178, 350, 351, 365, 370, 393, 394, 395, 396, 397, 398, 399, 400, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 427, 428, 429, 430, 431, 432, 435, 437, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 459, 460, 469, 476, 477, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 503, 504, 505, 506, 507, 509, 510, 511, 514, 515, 518, 519, 522, 523, 526, 528, 531, 532, 535, 536, 539, 540, 543, 544, 547, 548, 551, 552, 555, 556, 559, 560, 563, 564, 567, 568, 571, 572, 575, 576, 579, 580, 583, 584, 587, 589, 592, 593, 596, 597, 600, 601, 604, 605, 608, 609, 612, 613, 616, 617, 620, 621, 624, 625, 628, 629, 632, 633, 636, 637, 640, 641, 644, 645, 648, 649, 652, 653, 656, 657, 660, 661, 664, 665, 668, 669, 672, 673, 676, 677, 678, 679, 682, 684, 687, 688, 691, 692, 695, 696, 699, 700, 703, 704, 707, 708, 711, 712, 715, 716, 719, 720, 723, 724, 727, 728, 732, 733, 737, 738, 742, 743, 746, 747, 748, 751, 753, 755, 756, 757, 758, 759, 760, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 779, 783, 784, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 800, 803, 804, 809, 811, 812, 813, 815, 816, 817, 819, 820, 821, 823, 824, 826, 828, 829, 831, 833, 834, 836, 838, 840, 842, 844, 847, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 868, 869, 871, 872, 874, 875, 877, 878, 880, 881, 883, 884, 886, 887, 890, 891, 893, 895, 897, 898, 900, 901, 903, 904, 906, 907, 909, 910, 911, 913, 914, 916, 917, 919, 920, 922, 923, 925, 926, 928, 929, 931, 932, 934, 935, 936, 939, 941, 944, 946, 949, 951, 952, 955, 957, 960, 961, 964, 965, 968, 969, 972, 973, 976, 977, 980, 981, 984, 985, 988, 990, 991, 994, 995, 998, 999, 1002, 1003, 1006, 1007, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1021, 1025, 1026, 1027, 1033, 1034, 1037, 1038, 1039, 1040, 1041, 1043, 1044, 1046, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1064, 1066, 1069, 1071, 1072, 1075, 1076, 1079, 1080, 1083, 1084, 1087, 1088, 1091, 1092, 1095, 1096, 1099, 1100, 1103, 1104, 1105, 1108, 1109, 1112, 1116, 1118, 1123, 1124, 1150, 1154], "same": [115, 116, 117, 172, 174, 177, 178, 345, 346, 348, 350, 352, 354, 355, 358, 359, 361, 362, 363, 365, 367, 369, 370, 404, 405, 408, 412, 415, 418, 419, 420, 422, 423, 429, 430, 431, 460, 469, 470, 504, 510, 511, 514, 523, 552, 555, 572, 575, 605, 679, 682, 700, 703, 704, 707, 708, 711, 743, 746, 747, 773, 775, 776, 779, 800, 803, 804, 821, 833, 847, 852, 853, 854, 855, 856, 857, 858, 859, 864, 865, 866, 868, 869, 871, 872, 875, 877, 878, 880, 881, 883, 884, 886, 898, 900, 904, 906, 907, 909, 911, 913, 914, 923, 925, 926, 928, 951, 957, 960, 969, 972, 973, 976, 985, 988, 991, 994, 995, 998, 1011, 1012, 1013, 1015, 1028, 1055, 1056, 1057, 1059, 1060, 1061, 1064, 1066, 1069, 1071, 1072, 1075, 1076, 1079, 1080, 1083, 1084, 1087, 1088, 1091, 1096, 1099, 1100, 1103, 1113, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141], "convert": [115, 116, 117, 118, 119, 174, 177, 178, 358, 365, 382, 383, 391, 404, 406, 416, 423, 427, 428, 460, 476, 477, 478, 479, 499, 506, 509, 747, 810, 816, 817, 865, 932, 934, 1015, 1017, 1027, 1028, 1124], "args_to_n": [115, 362, 367], "nativ": [115, 117, 118, 119, 158, 164, 177, 178, 360, 362, 367, 368, 404, 416, 423, 427, 428, 437, 460, 476, 477, 478, 479, 480, 499, 506, 509, 747, 791, 793, 796, 1123, 1124], "backend": [115, 117, 119, 162, 163, 164, 170, 172, 177, 178, 346, 347, 349, 351, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 366, 367, 370, 423, 444, 445, 447, 459, 460, 495, 497, 507, 747, 788, 791, 792, 798, 821, 824, 826, 829, 831, 834, 836, 838, 840, 842, 844, 850, 1113, 1119, 1123, 1124, 1150, 1151, 1152, 1153, 1154, 1155], "to_ivi": [115, 177, 178, 367, 1015, 1028], "x": [115, 118, 119, 122, 123, 126, 127, 128, 129, 140, 141, 158, 162, 170, 177, 178, 179, 180, 182, 187, 206, 207, 208, 223, 225, 262, 272, 274, 276, 278, 279, 282, 288, 290, 291, 294, 295, 300, 301, 308, 309, 312, 313, 314, 315, 326, 327, 330, 331, 336, 337, 348, 350, 351, 352, 355, 356, 359, 362, 363, 365, 367, 368, 369, 370, 393, 394, 395, 396, 397, 398, 399, 400, 404, 406, 408, 410, 412, 415, 416, 418, 419, 420, 421, 422, 423, 429, 431, 432, 434, 435, 436, 441, 460, 479, 480, 481, 482, 485, 486, 494, 498, 503, 505, 510, 511, 514, 515, 518, 519, 522, 523, 525, 527, 528, 531, 532, 535, 536, 539, 540, 543, 544, 547, 548, 551, 552, 555, 568, 571, 572, 574, 575, 576, 579, 580, 583, 592, 593, 596, 597, 601, 604, 605, 607, 609, 613, 616, 617, 620, 621, 624, 625, 628, 629, 632, 633, 636, 641, 644, 645, 648, 649, 652, 653, 656, 657, 665, 668, 677, 678, 684, 687, 692, 695, 704, 707, 708, 711, 712, 715, 716, 719, 720, 723, 724, 727, 733, 734, 736, 737, 738, 739, 741, 742, 743, 746, 747, 755, 756, 757, 759, 760, 762, 764, 765, 766, 768, 769, 770, 771, 772, 773, 774, 775, 776, 778, 779, 780, 783, 784, 786, 787, 789, 790, 791, 793, 794, 795, 796, 800, 809, 810, 813, 815, 816, 817, 819, 820, 821, 828, 833, 847, 849, 850, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 868, 869, 871, 872, 874, 875, 877, 878, 880, 881, 883, 884, 886, 891, 893, 894, 895, 897, 898, 900, 901, 903, 904, 906, 907, 909, 910, 914, 916, 917, 919, 920, 922, 923, 925, 929, 931, 935, 936, 939, 941, 944, 946, 949, 951, 952, 954, 955, 956, 957, 960, 961, 964, 965, 968, 969, 972, 973, 976, 977, 980, 981, 984, 985, 987, 988, 989, 990, 991, 994, 995, 997, 998, 999, 1002, 1003, 1006, 1007, 1010, 1015, 1016, 1021, 1025, 1026, 1027, 1033, 1034, 1037, 1038, 1040, 1041, 1042, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1064, 1065, 1066, 1069, 1070, 1071, 1072, 1075, 1076, 1079, 1080, 1083, 1084, 1087, 1088, 1091, 1092, 1095, 1096, 1099, 1100, 1103, 1104, 1105, 1108, 1109, 1112, 1113, 1134, 1145], "input": [115, 118, 119, 177, 178, 179, 180, 181, 182, 274, 275, 279, 282, 288, 290, 294, 295, 312, 313, 314, 315, 326, 327, 330, 331, 350, 351, 352, 354, 355, 356, 358, 359, 360, 361, 362, 363, 365, 367, 368, 369, 370, 382, 383, 391, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 404, 406, 408, 410, 412, 415, 416, 418, 419, 420, 422, 423, 429, 430, 432, 435, 437, 438, 439, 440, 441, 442, 448, 449, 450, 451, 455, 460, 469, 470, 479, 480, 481, 482, 484, 485, 488, 492, 498, 504, 505, 510, 511, 514, 515, 518, 519, 522, 523, 526, 527, 528, 531, 532, 535, 536, 539, 540, 543, 544, 547, 548, 551, 552, 555, 556, 559, 560, 563, 564, 567, 568, 571, 572, 575, 576, 579, 580, 583, 584, 587, 589, 592, 597, 600, 601, 604, 605, 608, 609, 612, 613, 616, 617, 620, 621, 624, 625, 628, 629, 632, 633, 636, 637, 640, 641, 644, 645, 648, 649, 652, 653, 656, 657, 660, 661, 664, 665, 668, 669, 672, 673, 676, 677, 678, 679, 682, 684, 687, 688, 691, 692, 695, 696, 699, 700, 703, 704, 707, 708, 711, 712, 715, 716, 719, 720, 723, 724, 727, 728, 732, 733, 734, 737, 738, 739, 742, 743, 746, 747, 748, 751, 752, 753, 755, 756, 757, 759, 760, 762, 764, 765, 766, 768, 769, 770, 771, 772, 773, 774, 775, 776, 779, 780, 784, 786, 787, 789, 790, 791, 793, 794, 795, 796, 809, 810, 813, 815, 816, 817, 819, 820, 821, 828, 833, 847, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 868, 869, 871, 872, 875, 877, 878, 880, 881, 883, 884, 886, 887, 890, 891, 893, 895, 897, 898, 900, 901, 903, 904, 906, 907, 909, 914, 916, 917, 919, 920, 922, 923, 925, 926, 928, 929, 931, 935, 936, 939, 941, 944, 946, 949, 951, 952, 955, 956, 957, 960, 961, 964, 965, 968, 969, 972, 973, 976, 977, 980, 985, 988, 989, 990, 991, 994, 995, 998, 999, 1002, 1003, 1006, 1007, 1010, 1011, 1012, 1013, 1014, 1033, 1034, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1046, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1064, 1066, 1069, 1071, 1072, 1075, 1076, 1079, 1080, 1083, 1084, 1087, 1088, 1091, 1092, 1095, 1096, 1099, 1100, 1103, 1104, 1105, 1108, 1109, 1112, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1148, 1149], "an": [115, 118, 119, 156, 157, 173, 174, 177, 178, 342, 343, 345, 346, 347, 348, 350, 351, 352, 354, 355, 356, 358, 359, 360, 361, 362, 363, 365, 367, 368, 369, 370, 381, 382, 393, 396, 397, 399, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 429, 430, 431, 432, 435, 443, 448, 449, 451, 460, 482, 486, 505, 510, 511, 514, 515, 518, 519, 522, 523, 526, 528, 531, 532, 535, 536, 539, 540, 543, 544, 547, 548, 551, 552, 555, 556, 559, 560, 563, 564, 567, 568, 571, 572, 575, 576, 579, 580, 583, 584, 587, 589, 592, 597, 600, 601, 604, 605, 608, 609, 612, 613, 616, 617, 620, 621, 624, 625, 628, 629, 632, 633, 636, 637, 640, 641, 644, 645, 648, 649, 652, 653, 656, 657, 660, 661, 664, 665, 668, 669, 672, 673, 676, 677, 678, 679, 682, 684, 687, 688, 691, 696, 699, 700, 703, 704, 707, 708, 711, 712, 715, 716, 719, 720, 723, 724, 727, 728, 732, 733, 737, 738, 742, 743, 746, 747, 758, 759, 760, 762, 764, 773, 774, 775, 787, 791, 793, 794, 795, 796, 816, 817, 818, 821, 833, 847, 849, 850, 852, 855, 864, 865, 866, 868, 869, 871, 872, 874, 875, 877, 878, 880, 881, 883, 884, 886, 887, 890, 894, 895, 897, 898, 900, 904, 906, 907, 909, 910, 911, 913, 914, 923, 925, 926, 928, 929, 931, 951, 952, 955, 957, 960, 961, 964, 965, 968, 969, 972, 973, 976, 981, 984, 985, 988, 990, 991, 994, 995, 998, 999, 1002, 1003, 1006, 1007, 1010, 1015, 1021, 1033, 1034, 1037, 1038, 1040, 1041, 1049, 1050, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1064, 1066, 1069, 1071, 1072, 1075, 1076, 1079, 1080, 1083, 1084, 1087, 1088, 1091, 1092, 1095, 1096, 1099, 1100, 1103, 1104, 1105, 1108, 1109, 1112, 1113, 1123, 1124, 1146, 1147, 1150, 1151, 1152, 1154], "If": [115, 118, 119, 158, 162, 163, 164, 172, 177, 178, 344, 345, 346, 347, 348, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 367, 368, 370, 382, 404, 405, 407, 408, 409, 411, 412, 415, 417, 418, 419, 420, 421, 422, 423, 429, 431, 451, 460, 479, 503, 510, 511, 514, 515, 518, 519, 522, 523, 526, 528, 531, 532, 535, 536, 540, 543, 572, 575, 576, 579, 580, 583, 597, 600, 601, 604, 605, 641, 644, 645, 648, 653, 656, 657, 660, 665, 668, 669, 672, 679, 682, 696, 699, 700, 703, 704, 707, 708, 711, 712, 715, 716, 719, 720, 723, 733, 738, 743, 746, 747, 791, 821, 824, 826, 829, 831, 834, 836, 838, 840, 842, 844, 865, 866, 868, 869, 871, 886, 891, 893, 895, 897, 904, 906, 907, 909, 911, 913, 914, 926, 928, 929, 931, 935, 936, 939, 941, 944, 946, 949, 951, 965, 968, 969, 972, 985, 988, 990, 991, 994, 995, 998, 1011, 1012, 1013, 1015, 1027, 1028, 1038, 1043, 1044, 1046, 1050, 1051, 1052, 1053, 1055, 1056, 1057, 1059, 1060, 1061, 1064, 1066, 1069, 1071, 1076, 1079, 1080, 1083, 1084, 1087, 1088, 1091, 1092, 1095, 1096, 1100, 1103, 1104, 1105, 1108, 1109, 1112, 1113], "set": [115, 118, 119, 149, 158, 162, 163, 164, 170, 172, 177, 178, 335, 344, 346, 349, 350, 355, 357, 358, 359, 360, 361, 362, 365, 367, 368, 460, 479, 489, 490, 501, 502, 503, 504, 510, 540, 543, 747, 748, 751, 805, 806, 807, 808, 821, 824, 826, 829, 831, 833, 834, 836, 838, 840, 842, 844, 865, 869, 871, 886, 891, 893, 895, 897, 904, 906, 911, 913, 1015, 1016, 1025, 1026, 1027, 1031, 1032, 1038, 1048, 1050, 1051, 1056, 1057, 1058, 1059, 1060, 1061, 1064, 1066, 1069, 1071, 1092, 1095, 1100, 1103, 1134, 1143, 1150, 1151, 1152, 1153, 1154, 1155], "appli": [115, 118, 119, 122, 123, 126, 127, 128, 129, 140, 141, 177, 178, 182, 187, 189, 206, 207, 208, 223, 225, 262, 274, 275, 278, 279, 282, 288, 290, 294, 295, 300, 301, 308, 309, 312, 313, 314, 315, 326, 327, 330, 331, 345, 346, 347, 351, 352, 354, 355, 357, 359, 360, 361, 362, 363, 365, 367, 368, 369, 370, 380, 382, 393, 394, 395, 396, 397, 398, 399, 400, 423, 432, 434, 436, 451, 525, 527, 539, 544, 572, 574, 607, 609, 657, 734, 736, 739, 741, 742, 747, 748, 750, 752, 769, 770, 771, 776, 778, 780, 821, 834, 836, 838, 840, 852, 861, 863, 864, 865, 886, 895, 897, 904, 906, 935, 936, 939, 941, 944, 946, 949, 951, 952, 954, 956, 985, 987, 989, 995, 998, 1011, 1012, 1013, 1015, 1021, 1024, 1027, 1028, 1033, 1034, 1037, 1040, 1042, 1113, 1120, 1121, 1122, 1148, 1149], "leaf": [115, 118, 119, 177, 178, 355, 359, 368, 1015, 1016, 1025, 1026], "contain": [115, 118, 119, 128, 129, 172, 175, 176, 177, 178, 181, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 345, 346, 347, 348, 349, 351, 352, 354, 355, 360, 362, 363, 364, 365, 366, 369, 370, 382, 393, 396, 397, 399, 404, 405, 408, 410, 417, 419, 420, 421, 423, 432, 435, 460, 481, 482, 485, 494, 498, 510, 511, 514, 515, 518, 519, 522, 523, 526, 528, 531, 532, 535, 536, 539, 540, 543, 544, 547, 548, 551, 552, 555, 556, 559, 560, 563, 564, 567, 568, 571, 572, 575, 576, 579, 580, 583, 584, 587, 589, 592, 593, 597, 600, 601, 604, 605, 608, 609, 612, 613, 616, 617, 620, 621, 624, 625, 628, 629, 632, 633, 636, 637, 640, 641, 644, 645, 648, 649, 652, 653, 656, 657, 660, 661, 664, 665, 668, 669, 672, 673, 676, 677, 678, 679, 682, 684, 687, 688, 691, 692, 696, 699, 700, 703, 704, 707, 708, 711, 712, 715, 716, 719, 720, 723, 724, 727, 728, 732, 733, 737, 738, 742, 743, 746, 747, 748, 751, 753, 756, 759, 760, 762, 764, 765, 772, 775, 776, 779, 786, 795, 815, 816, 817, 824, 829, 834, 838, 842, 852, 855, 858, 859, 864, 865, 866, 868, 869, 871, 872, 875, 877, 878, 880, 881, 883, 884, 886, 887, 890, 895, 897, 898, 900, 901, 903, 904, 906, 907, 909, 911, 913, 914, 916, 917, 919, 920, 922, 923, 925, 926, 928, 929, 931, 935, 936, 939, 941, 944, 946, 949, 951, 952, 955, 957, 961, 965, 968, 969, 972, 973, 976, 977, 980, 981, 985, 988, 990, 991, 995, 999, 1002, 1003, 1007, 1011, 1012, 1013, 1014, 1015, 1028, 1033, 1034, 1037, 1038, 1039, 1040, 1043, 1044, 1046, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1059, 1060, 1061, 1064, 1066, 1071, 1072, 1075, 1076, 1079, 1080, 1083, 1084, 1087, 1088, 1091, 1092, 1095, 1096, 1099, 1100, 1103, 1104, 1105, 1108, 1109, 1112, 1113, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1143, 1144, 1145, 1146, 1147, 1150, 1154, 1156, 1157], "within": [115, 118, 119, 346, 354, 369, 382, 404, 405, 1038, 1044, 1046], "union": [115, 118, 119, 128, 129, 136, 137, 177, 178, 350, 352, 355, 358, 359, 360, 361, 362, 363, 365, 370, 393, 395, 396, 397, 398, 399, 400, 401, 402, 404, 405, 406, 407, 408, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 427, 428, 429, 430, 431, 437, 438, 439, 440, 441, 442, 443, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 459, 460, 476, 477, 478, 479, 480, 482, 485, 486, 487, 488, 493, 499, 501, 503, 504, 505, 506, 509, 510, 511, 514, 515, 518, 519, 522, 523, 526, 528, 531, 532, 535, 536, 539, 540, 543, 544, 547, 548, 551, 552, 555, 556, 559, 560, 563, 564, 567, 568, 571, 572, 575, 576, 579, 580, 583, 584, 587, 589, 592, 593, 596, 597, 600, 601, 604, 605, 608, 609, 612, 613, 616, 617, 620, 621, 624, 625, 628, 629, 632, 633, 636, 637, 640, 641, 644, 645, 648, 649, 652, 653, 656, 657, 660, 661, 664, 665, 668, 669, 672, 673, 676, 677, 678, 679, 682, 684, 687, 688, 691, 692, 695, 696, 699, 700, 703, 704, 707, 708, 711, 712, 715, 716, 719, 720, 723, 724, 727, 728, 732, 733, 737, 738, 742, 743, 746, 747, 748, 751, 755, 756, 759, 760, 762, 765, 766, 769, 770, 771, 773, 774, 775, 776, 779, 784, 786, 787, 789, 790, 791, 800, 803, 804, 809, 810, 815, 816, 817, 819, 820, 821, 823, 824, 826, 829, 831, 834, 836, 838, 840, 842, 844, 847, 849, 852, 853, 855, 857, 858, 859, 861, 864, 865, 866, 868, 869, 871, 872, 874, 875, 877, 878, 880, 881, 883, 884, 886, 887, 890, 891, 893, 895, 897, 898, 900, 901, 903, 904, 906, 907, 909, 910, 911, 913, 914, 916, 917, 919, 920, 922, 923, 925, 926, 928, 929, 931, 932, 934, 935, 936, 939, 941, 944, 946, 949, 951, 952, 955, 957, 960, 961, 964, 965, 968, 969, 972, 973, 976, 977, 980, 981, 984, 985, 988, 990, 991, 994, 995, 998, 999, 1002, 1003, 1006, 1007, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1026, 1027, 1033, 1034, 1037, 1038, 1039, 1040, 1041, 1043, 1044, 1046, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1064, 1066, 1069, 1071, 1072, 1075, 1076, 1079, 1080, 1083, 1084, 1087, 1092, 1095, 1096, 1099, 1100, 1103, 1104, 1105, 1108, 1109, 1112], "nativearrai": [115, 118, 119, 128, 129, 350, 352, 355, 358, 359, 362, 363, 365, 367, 370, 383, 391, 393, 395, 396, 397, 398, 399, 400, 404, 405, 406, 408, 412, 413, 414, 415, 416, 418, 419, 420, 422, 423, 429, 430, 431, 432, 435, 441, 443, 446, 448, 449, 451, 455, 460, 479, 480, 482, 498, 504, 505, 510, 511, 514, 515, 518, 519, 522, 523, 526, 528, 531, 532, 535, 536, 539, 540, 543, 544, 547, 548, 551, 552, 555, 556, 559, 560, 563, 564, 567, 568, 571, 572, 575, 576, 579, 580, 583, 584, 587, 589, 592, 593, 596, 597, 600, 601, 604, 605, 608, 609, 612, 613, 616, 617, 620, 621, 624, 625, 628, 629, 632, 633, 636, 637, 640, 641, 644, 645, 648, 649, 652, 653, 656, 657, 660, 661, 664, 665, 668, 669, 672, 673, 676, 677, 678, 679, 682, 684, 687, 688, 691, 692, 695, 696, 699, 700, 703, 704, 707, 708, 711, 712, 715, 716, 719, 720, 723, 724, 727, 728, 732, 733, 737, 738, 742, 743, 746, 747, 748, 751, 755, 756, 759, 760, 762, 764, 765, 766, 769, 770, 771, 773, 774, 775, 776, 779, 784, 786, 787, 789, 790, 791, 800, 803, 804, 809, 810, 815, 816, 817, 819, 820, 821, 823, 824, 826, 829, 831, 834, 836, 838, 840, 842, 844, 847, 849, 852, 853, 855, 857, 858, 859, 861, 864, 865, 866, 868, 869, 871, 872, 874, 875, 877, 878, 880, 881, 883, 884, 886, 887, 890, 891, 893, 895, 897, 898, 900, 901, 903, 904, 906, 907, 909, 910, 911, 913, 914, 916, 917, 919, 920, 922, 923, 925, 926, 928, 929, 931, 932, 934, 935, 936, 939, 941, 944, 946, 949, 951, 952, 955, 957, 960, 961, 964, 965, 968, 969, 972, 973, 976, 977, 980, 981, 984, 985, 988, 990, 991, 994, 995, 998, 999, 1002, 1003, 1006, 1007, 1010, 1015, 1017, 1027, 1033, 1034, 1037, 1038, 1039, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1064, 1066, 1069, 1071, 1072, 1075, 1076, 1079, 1080, 1083, 1084, 1087, 1092, 1095, 1096, 1099, 1100, 1103, 1104, 1105, 1108, 1109, 1112], "mayb": [115, 118, 119, 345, 365, 367], "manner": [115, 118, 119, 172, 177, 178, 350, 351, 361, 368, 381, 382, 1015, 1027], "so": [115, 118, 119, 122, 123, 126, 127, 128, 129, 140, 141, 172, 173, 177, 178, 182, 187, 189, 206, 207, 208, 223, 225, 262, 274, 275, 278, 279, 282, 288, 290, 294, 295, 300, 301, 308, 309, 312, 313, 314, 315, 326, 327, 330, 331, 345, 346, 350, 351, 352, 354, 357, 358, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 382, 383, 391, 432, 434, 436, 525, 527, 539, 544, 572, 574, 607, 609, 657, 734, 736, 739, 741, 742, 748, 750, 752, 776, 778, 780, 952, 954, 956, 985, 987, 989, 1015, 1016, 1026, 1040, 1042, 1113], "travers": [115, 118, 119, 177, 178, 359, 365, 367, 1015, 1027], "lowest": [115, 118, 119, 177, 178, 355, 382, 1015, 1027, 1038, 1040, 1041], "leav": [115, 118, 119, 177, 178, 179, 180, 182, 351, 352, 354, 355, 359, 360, 362, 363, 368, 369, 951, 995, 998, 1015, 1016, 1017, 1025, 1026, 1027], "search": [115, 118, 119, 147, 172, 177, 178, 333, 345, 350, 352, 354, 1051, 1052, 1053, 1054], "s": [115, 118, 119, 158, 162, 163, 164, 170, 173, 174, 177, 178, 344, 345, 346, 348, 349, 351, 352, 354, 356, 358, 359, 360, 361, 362, 363, 365, 367, 368, 369, 370, 381, 382, 403, 404, 415, 419, 420, 423, 444, 445, 460, 479, 503, 510, 700, 703, 747, 756, 821, 824, 826, 829, 831, 834, 836, 842, 844, 865, 914, 916, 917, 919, 1015, 1021, 1027, 1071, 1092, 1095, 1100, 1103, 1113, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1154, 1156, 1157], "case": [115, 118, 119, 173, 177, 178, 179, 180, 181, 345, 346, 347, 350, 351, 352, 355, 356, 358, 359, 360, 361, 362, 363, 365, 367, 369, 370, 382, 404, 415, 460, 499, 506, 509, 510, 511, 514, 515, 518, 519, 522, 523, 526, 528, 531, 532, 535, 536, 540, 543, 568, 571, 572, 575, 576, 579, 580, 583, 597, 600, 601, 604, 605, 641, 644, 645, 648, 653, 656, 657, 660, 679, 682, 696, 699, 700, 703, 704, 707, 708, 711, 712, 715, 716, 719, 720, 723, 733, 738, 743, 746, 747, 791, 803, 804, 865, 891, 893, 951, 981, 984, 1015, 1018, 1024, 1071, 1076, 1079, 1080, 1083, 1084, 1087, 1092, 1095, 1096, 1100, 1103, 1134, 1145, 1146, 1147, 1150, 1154], "to_n": [115, 177, 178], "item": [115, 119, 156, 157, 177, 178, 360, 365, 367, 368, 370, 423, 438, 460, 469, 470, 472, 479, 481, 483, 485, 487, 491, 747, 763, 785, 811, 812, 1015, 1020, 1021, 1022, 1023, 1027, 1031, 1032, 1113, 1146, 1147], "convers": [116, 117, 118, 119, 174, 177, 178, 364, 366, 370, 381, 382, 1113, 1119], "arraywithcr": 120, "creation": [121, 177, 178, 179, 180, 181, 307, 350, 360, 361, 365, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422], "data_typ": [122, 123, 308, 309, 350, 360, 423, 427, 428, 429, 430, 431, 432, 435, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459], "arraywithdatatyp": 122, "can_cast": [122, 123, 182, 278, 308, 309, 355, 360, 423, 436], "method": [122, 123, 126, 127, 128, 129, 140, 141, 156, 157, 177, 178, 179, 180, 181, 187, 189, 206, 207, 208, 223, 225, 262, 274, 275, 278, 279, 282, 288, 290, 294, 295, 300, 301, 308, 309, 312, 313, 314, 315, 326, 327, 330, 331, 342, 343, 347, 350, 351, 352, 354, 355, 358, 363, 365, 366, 369, 370, 382, 393, 395, 396, 397, 398, 399, 400, 404, 410, 415, 432, 434, 436, 510, 525, 527, 528, 531, 539, 544, 548, 551, 568, 571, 572, 574, 575, 580, 592, 605, 607, 609, 616, 617, 620, 657, 677, 678, 684, 687, 688, 691, 704, 707, 720, 723, 724, 727, 734, 736, 738, 739, 741, 742, 747, 748, 750, 752, 763, 764, 775, 776, 778, 780, 803, 804, 815, 817, 821, 834, 836, 838, 840, 852, 858, 864, 865, 866, 868, 869, 871, 872, 935, 936, 939, 951, 952, 954, 956, 965, 968, 969, 972, 977, 980, 985, 987, 989, 990, 999, 1002, 1015, 1016, 1026, 1027, 1028, 1033, 1034, 1037, 1038, 1040, 1042, 1043, 1044, 1046, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1060, 1061, 1064, 1071, 1072, 1075, 1076, 1079, 1099, 1104, 1105, 1108, 1113, 1134, 1145, 1146, 1147], "variant": [122, 123, 126, 127, 128, 129, 140, 141, 182, 187, 189, 206, 207, 208, 223, 225, 262, 274, 275, 278, 279, 282, 288, 290, 294, 295, 300, 301, 308, 309, 312, 313, 314, 315, 326, 327, 330, 331, 351, 352, 432, 434, 436, 525, 527, 539, 544, 572, 574, 607, 609, 657, 734, 736, 739, 741, 742, 748, 750, 752, 776, 778, 780, 952, 954, 956, 985, 987, 989, 1040, 1042], "thi": [122, 123, 126, 127, 128, 129, 140, 141, 172, 173, 174, 177, 178, 179, 180, 181, 182, 187, 189, 206, 207, 208, 223, 225, 262, 274, 275, 278, 279, 282, 288, 290, 294, 295, 300, 301, 308, 309, 312, 313, 314, 315, 326, 327, 330, 331, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 381, 382, 404, 405, 406, 415, 416, 423, 432, 434, 435, 436, 460, 484, 488, 492, 499, 504, 509, 510, 511, 514, 523, 525, 527, 528, 531, 539, 544, 548, 551, 564, 567, 568, 571, 572, 574, 575, 580, 601, 604, 605, 607, 609, 657, 665, 668, 669, 672, 688, 691, 700, 703, 704, 707, 720, 723, 724, 727, 733, 734, 736, 738, 739, 741, 742, 747, 748, 750, 752, 774, 775, 776, 778, 780, 791, 802, 807, 821, 824, 826, 829, 831, 833, 834, 836, 838, 840, 842, 844, 850, 852, 855, 861, 864, 865, 872, 874, 891, 893, 910, 951, 952, 954, 956, 965, 968, 969, 972, 981, 984, 985, 987, 988, 989, 995, 998, 1015, 1021, 1027, 1028, 1033, 1034, 1037, 1040, 1042, 1050, 1051, 1055, 1056, 1057, 1059, 1060, 1061, 1064, 1071, 1076, 1079, 1080, 1083, 1092, 1095, 1100, 1103, 1104, 1105, 1108, 1113, 1119, 1146, 1147, 1150, 1151, 1152, 1153, 1154, 1155], "simpli": [122, 123, 126, 127, 128, 129, 140, 141, 177, 178, 182, 187, 189, 206, 207, 208, 223, 225, 262, 274, 275, 278, 279, 282, 288, 290, 294, 295, 300, 301, 308, 309, 312, 313, 314, 315, 326, 327, 330, 331, 346, 351, 352, 354, 355, 358, 359, 361, 362, 363, 365, 369, 370, 432, 434, 436, 510, 525, 527, 539, 544, 572, 574, 601, 604, 607, 609, 657, 734, 736, 739, 741, 742, 748, 750, 752, 776, 778, 780, 952, 954, 956, 985, 987, 989, 1040, 1042], "docstr": [122, 123, 126, 127, 128, 129, 140, 141, 182, 187, 189, 206, 207, 208, 223, 225, 262, 274, 275, 278, 279, 282, 288, 290, 294, 295, 300, 301, 308, 309, 312, 313, 314, 315, 326, 327, 330, 331, 347, 348, 349, 350, 355, 359, 363, 404, 415, 423, 432, 434, 435, 436, 510, 523, 525, 527, 528, 531, 539, 544, 548, 551, 568, 571, 572, 574, 575, 580, 605, 607, 609, 657, 688, 691, 704, 707, 720, 723, 724, 727, 733, 734, 736, 738, 739, 741, 742, 748, 750, 752, 776, 778, 780, 865, 872, 951, 952, 954, 956, 965, 968, 969, 972, 985, 987, 988, 989, 1040, 1042, 1055, 1056, 1057, 1060, 1061, 1064, 1071, 1076, 1079, 1104, 1105, 1108], "minim": [122, 123, 126, 127, 128, 129, 140, 141, 182, 187, 189, 206, 207, 208, 223, 225, 262, 274, 275, 278, 279, 282, 288, 290, 294, 295, 300, 301, 308, 309, 312, 313, 314, 315, 326, 327, 330, 331, 351, 362, 365, 432, 434, 436, 525, 527, 539, 544, 572, 574, 607, 609, 657, 734, 736, 739, 741, 742, 748, 750, 752, 776, 778, 780, 952, 954, 956, 985, 987, 989, 1040, 1042], "chang": [122, 123, 126, 127, 128, 129, 140, 141, 174, 182, 187, 189, 206, 207, 208, 223, 225, 262, 274, 275, 278, 279, 282, 288, 290, 294, 295, 300, 301, 308, 309, 312, 313, 314, 315, 326, 327, 330, 331, 345, 346, 347, 348, 351, 353, 354, 359, 365, 369, 382, 432, 434, 436, 460, 525, 527, 539, 544, 572, 574, 607, 609, 657, 734, 736, 739, 741, 742, 748, 750, 752, 776, 778, 780, 865, 869, 871, 951, 952, 954, 956, 981, 984, 985, 987, 989, 1015, 1017, 1027, 1040, 1042, 1113, 1119], "exampl": [122, 123, 126, 127, 128, 129, 140, 141, 156, 157, 158, 162, 163, 164, 170, 174, 179, 180, 182, 187, 189, 206, 207, 208, 223, 225, 262, 274, 275, 278, 279, 282, 288, 290, 294, 295, 300, 301, 308, 309, 312, 313, 314, 315, 326, 327, 330, 331, 342, 343, 345, 346, 347, 349, 350, 351, 354, 355, 356, 357, 358, 359, 360, 361, 362, 365, 367, 368, 369, 370, 381, 382, 393, 395, 396, 397, 398, 399, 400, 401, 402, 404, 411, 412, 415, 417, 418, 421, 422, 423, 429, 432, 434, 435, 436, 444, 445, 460, 479, 480, 482, 494, 495, 496, 497, 498, 501, 503, 505, 507, 508, 510, 523, 525, 527, 528, 531, 539, 544, 547, 548, 551, 552, 555, 564, 567, 568, 571, 572, 574, 575, 576, 580, 592, 597, 605, 607, 609, 613, 616, 617, 620, 633, 636, 657, 677, 678, 684, 687, 688, 691, 704, 707, 720, 723, 724, 727, 733, 734, 736, 737, 738, 739, 741, 742, 747, 748, 750, 751, 752, 755, 756, 764, 765, 772, 775, 776, 778, 779, 780, 783, 794, 809, 810, 815, 816, 817, 852, 853, 855, 857, 858, 859, 864, 865, 866, 868, 869, 871, 872, 875, 877, 884, 895, 897, 901, 903, 914, 920, 922, 923, 925, 935, 936, 939, 941, 944, 946, 949, 951, 952, 954, 955, 956, 957, 960, 965, 968, 969, 972, 977, 980, 981, 984, 985, 987, 988, 989, 990, 991, 994, 995, 998, 999, 1002, 1033, 1034, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1046, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1060, 1061, 1064, 1071, 1072, 1075, 1092, 1095, 1096, 1099, 1104, 1105, 1108, 1113], "1": [122, 123, 126, 127, 128, 129, 136, 137, 138, 139, 140, 141, 142, 143, 150, 151, 158, 164, 170, 173, 174, 177, 178, 179, 180, 182, 187, 189, 191, 206, 207, 208, 214, 223, 225, 234, 258, 262, 267, 268, 274, 275, 276, 278, 279, 280, 282, 288, 289, 290, 291, 292, 294, 295, 300, 301, 308, 309, 312, 313, 314, 315, 324, 325, 326, 327, 328, 329, 330, 331, 336, 337, 348, 352, 355, 359, 362, 363, 364, 365, 367, 368, 369, 370, 382, 393, 395, 396, 397, 398, 400, 404, 405, 412, 413, 414, 415, 417, 418, 422, 423, 429, 432, 434, 435, 436, 443, 460, 464, 467, 469, 474, 479, 480, 482, 484, 488, 492, 494, 497, 498, 505, 510, 515, 518, 519, 522, 523, 525, 527, 528, 531, 539, 540, 543, 544, 548, 551, 552, 555, 564, 567, 568, 571, 572, 574, 575, 576, 579, 580, 583, 592, 597, 601, 604, 605, 607, 609, 613, 616, 617, 620, 633, 636, 641, 644, 645, 648, 649, 652, 653, 656, 657, 677, 678, 684, 687, 688, 691, 696, 699, 704, 707, 708, 711, 712, 715, 720, 723, 724, 727, 733, 734, 736, 738, 739, 741, 742, 747, 748, 750, 751, 752, 755, 756, 764, 765, 772, 775, 776, 778, 779, 780, 794, 800, 803, 804, 809, 810, 812, 815, 816, 817, 819, 852, 853, 854, 855, 856, 857, 858, 859, 860, 864, 865, 866, 868, 869, 871, 872, 875, 877, 884, 895, 897, 901, 903, 911, 913, 914, 920, 922, 923, 925, 926, 928, 929, 931, 935, 936, 939, 941, 943, 944, 945, 946, 948, 949, 950, 951, 952, 954, 955, 956, 957, 960, 965, 968, 969, 972, 973, 976, 977, 980, 981, 984, 985, 987, 988, 989, 990, 991, 994, 995, 998, 999, 1002, 1015, 1027, 1033, 1034, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1060, 1061, 1063, 1064, 1065, 1066, 1068, 1069, 1070, 1071, 1072, 1075, 1076, 1079, 1092, 1095, 1096, 1099, 1100, 1103, 1104, 1105, 1108, 1109, 1112, 1113, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1154, 1156, 1157], "2": [122, 123, 126, 127, 128, 129, 136, 137, 140, 141, 158, 162, 177, 178, 179, 180, 182, 187, 189, 206, 207, 208, 223, 225, 262, 274, 278, 279, 282, 288, 290, 294, 295, 300, 301, 308, 309, 312, 313, 314, 315, 326, 327, 330, 331, 345, 346, 348, 352, 356, 359, 363, 364, 365, 367, 368, 369, 370, 382, 393, 395, 396, 397, 398, 400, 403, 404, 411, 412, 415, 417, 418, 422, 423, 429, 432, 434, 435, 436, 460, 479, 480, 482, 494, 496, 498, 505, 510, 523, 525, 527, 528, 531, 536, 539, 540, 543, 544, 548, 551, 552, 555, 564, 567, 568, 571, 572, 574, 575, 576, 580, 592, 597, 605, 607, 609, 613, 616, 617, 620, 633, 636, 653, 656, 657, 677, 678, 684, 687, 688, 691, 704, 707, 720, 723, 724, 727, 733, 734, 736, 738, 739, 741, 742, 747, 748, 750, 751, 755, 756, 759, 760, 762, 765, 772, 775, 776, 778, 779, 780, 794, 809, 810, 815, 852, 855, 856, 857, 858, 859, 864, 865, 866, 868, 869, 871, 872, 875, 877, 884, 886, 887, 890, 891, 893, 895, 897, 901, 903, 904, 906, 907, 909, 914, 920, 922, 923, 925, 929, 931, 935, 936, 939, 946, 949, 951, 952, 954, 955, 956, 957, 960, 965, 968, 969, 972, 977, 980, 981, 984, 985, 987, 988, 989, 990, 991, 994, 999, 1002, 1033, 1034, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1046, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1060, 1061, 1064, 1071, 1072, 1075, 1076, 1079, 1099, 1104, 1105, 1108, 1113], "3": [122, 123, 126, 127, 128, 129, 140, 141, 179, 180, 182, 187, 189, 206, 207, 208, 223, 225, 262, 274, 278, 279, 282, 288, 290, 294, 295, 300, 301, 308, 309, 312, 313, 314, 315, 326, 327, 330, 331, 345, 348, 352, 356, 359, 365, 367, 368, 369, 370, 393, 395, 396, 397, 398, 403, 404, 412, 415, 418, 421, 422, 423, 432, 434, 435, 436, 460, 479, 482, 498, 505, 510, 523, 525, 527, 528, 531, 539, 544, 548, 551, 564, 567, 568, 571, 572, 574, 575, 580, 592, 597, 605, 607, 609, 613, 616, 617, 620, 633, 636, 657, 677, 678, 684, 687, 688, 691, 704, 707, 720, 723, 724, 727, 733, 734, 736, 738, 739, 741, 742, 747, 748, 750, 755, 756, 765, 772, 775, 776, 778, 779, 780, 809, 810, 815, 817, 852, 853, 854, 855, 857, 858, 859, 864, 865, 866, 868, 869, 871, 872, 875, 877, 884, 895, 897, 901, 903, 914, 920, 922, 923, 925, 932, 934, 935, 936, 939, 946, 949, 951, 952, 954, 955, 956, 957, 960, 965, 968, 969, 972, 977, 980, 981, 984, 985, 987, 988, 989, 990, 991, 994, 999, 1002, 1033, 1034, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1046, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1060, 1061, 1064, 1071, 1072, 1075, 1076, 1079, 1096, 1099, 1104, 1105, 1108, 1113], "print": [122, 123, 126, 127, 128, 129, 140, 141, 156, 157, 158, 162, 163, 164, 170, 177, 178, 179, 180, 181, 182, 187, 189, 206, 207, 208, 223, 225, 262, 274, 275, 278, 279, 282, 288, 290, 294, 295, 300, 301, 308, 309, 312, 313, 314, 315, 326, 327, 330, 331, 342, 343, 345, 352, 359, 365, 367, 368, 369, 393, 395, 396, 397, 398, 399, 400, 404, 411, 412, 415, 417, 418, 421, 422, 423, 429, 432, 434, 435, 436, 444, 445, 460, 480, 494, 495, 496, 497, 498, 500, 503, 507, 510, 523, 525, 527, 528, 531, 539, 544, 547, 548, 551, 552, 555, 564, 567, 568, 571, 572, 574, 575, 576, 580, 592, 597, 605, 607, 609, 613, 616, 617, 620, 633, 636, 657, 677, 678, 684, 687, 688, 691, 704, 707, 720, 723, 724, 727, 733, 734, 736, 737, 738, 739, 741, 742, 747, 748, 750, 751, 752, 755, 756, 764, 765, 772, 775, 776, 778, 779, 780, 783, 801, 809, 810, 815, 816, 817, 852, 853, 855, 857, 858, 859, 864, 865, 866, 868, 869, 871, 872, 875, 877, 884, 901, 903, 914, 920, 922, 923, 925, 935, 936, 939, 941, 944, 946, 949, 951, 952, 954, 955, 956, 965, 968, 969, 972, 977, 980, 981, 984, 985, 987, 988, 989, 990, 991, 994, 999, 1002, 1033, 1034, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1046, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1060, 1061, 1064, 1071, 1072, 1075, 1076, 1079, 1092, 1095, 1096, 1099, 1104, 1105, 1108, 1113], "dtype": [122, 123, 152, 153, 177, 178, 182, 206, 257, 278, 298, 308, 309, 338, 339, 350, 352, 355, 360, 361, 367, 404, 405, 406, 407, 408, 409, 411, 412, 413, 416, 417, 418, 421, 422, 423, 427, 428, 429, 430, 432, 434, 435, 436, 437, 438, 439, 440, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 459, 460, 500, 510, 564, 567, 747, 755, 756, 800, 816, 852, 860, 951, 965, 968, 1033, 1034, 1037, 1038, 1044, 1046, 1050, 1051, 1052, 1060, 1066, 1069, 1071, 1072, 1088, 1090, 1091, 1092, 1095, 1096, 1098, 1104, 1105, 1108, 1113, 1125, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1156, 1157], "float32": [122, 123, 182, 206, 278, 308, 309, 352, 360, 423, 427, 428, 432, 434, 435, 436, 444, 1033, 1034, 1037], "float64": [122, 123, 360, 423, 429, 432, 435, 444], "true": [122, 123, 128, 129, 136, 137, 150, 151, 156, 157, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 352, 354, 355, 359, 360, 362, 365, 367, 368, 369, 370, 393, 394, 401, 402, 404, 413, 423, 429, 432, 434, 435, 436, 460, 479, 496, 500, 501, 510, 511, 513, 517, 518, 519, 521, 525, 526, 527, 528, 530, 532, 534, 538, 539, 540, 542, 544, 546, 548, 550, 551, 552, 554, 556, 558, 560, 562, 564, 566, 568, 570, 571, 572, 574, 578, 579, 582, 583, 586, 587, 588, 591, 592, 593, 595, 599, 600, 601, 603, 607, 608, 609, 611, 613, 615, 616, 617, 619, 620, 621, 623, 624, 625, 627, 628, 629, 631, 632, 633, 635, 636, 637, 639, 641, 643, 645, 647, 649, 651, 653, 655, 657, 659, 661, 663, 665, 667, 668, 669, 671, 672, 673, 675, 679, 681, 683, 684, 686, 688, 690, 691, 692, 694, 696, 698, 700, 702, 704, 706, 708, 710, 712, 714, 716, 718, 720, 722, 724, 726, 728, 729, 731, 734, 736, 737, 739, 741, 742, 743, 745, 747, 748, 750, 751, 752, 755, 756, 757, 758, 760, 761, 765, 772, 774, 776, 778, 780, 786, 787, 794, 809, 815, 817, 820, 821, 824, 825, 826, 827, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 847, 852, 860, 865, 866, 868, 887, 889, 891, 893, 914, 929, 931, 935, 936, 938, 939, 940, 941, 943, 944, 945, 946, 948, 949, 950, 951, 952, 954, 956, 957, 959, 961, 963, 965, 967, 969, 971, 973, 975, 977, 979, 981, 983, 985, 987, 989, 990, 991, 993, 995, 997, 999, 1001, 1003, 1005, 1007, 1009, 1011, 1012, 1013, 1014, 1015, 1016, 1025, 1026, 1028, 1034, 1036, 1038, 1039, 1044, 1045, 1047, 1050, 1051, 1052, 1054, 1055, 1056, 1057, 1059, 1060, 1061, 1063, 1064, 1065, 1066, 1068, 1069, 1070, 1071, 1072, 1074, 1076, 1078, 1079, 1080, 1082, 1083, 1084, 1086, 1087, 1088, 1090, 1091, 1092, 1094, 1095, 1096, 1098, 1099, 1100, 1102, 1103, 1104, 1105, 1107, 1108, 1109, 1111, 1112, 1134, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155], "arraywithdevic": [124, 367], "devic": [125, 173, 177, 178, 182, 258, 288, 289, 311, 330, 331, 346, 349, 350, 355, 357, 360, 367, 368, 382, 404, 405, 406, 407, 408, 409, 411, 412, 413, 414, 416, 417, 418, 419, 420, 421, 422, 462, 463, 464, 465, 466, 467, 469, 470, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 747, 775, 776, 779, 800, 803, 804, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1123, 1124, 1125, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1154, 1156, 1157], "arraywithelementwis": [126, 347, 358], "ab": [126, 127, 182, 312, 313, 354, 357, 510, 696, 699, 865, 929, 931, 1113], "out": [126, 127, 128, 129, 136, 137, 138, 139, 140, 141, 142, 143, 150, 151, 152, 153, 154, 155, 172, 173, 174, 177, 178, 179, 180, 182, 183, 184, 185, 187, 188, 190, 191, 192, 193, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 227, 228, 229, 230, 231, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 274, 276, 277, 279, 280, 281, 282, 286, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 312, 313, 314, 315, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 336, 337, 338, 339, 340, 341, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 364, 365, 367, 368, 369, 370, 381, 393, 395, 396, 397, 398, 399, 400, 404, 405, 407, 408, 409, 411, 412, 417, 418, 419, 420, 421, 422, 423, 429, 431, 460, 505, 510, 511, 513, 514, 515, 517, 518, 519, 521, 522, 523, 525, 526, 527, 528, 530, 531, 532, 534, 535, 536, 538, 539, 540, 542, 543, 544, 546, 547, 548, 550, 551, 552, 554, 555, 556, 558, 559, 560, 562, 563, 564, 566, 567, 568, 570, 571, 572, 574, 575, 576, 578, 579, 580, 582, 583, 584, 586, 587, 588, 589, 591, 592, 593, 595, 596, 597, 599, 600, 601, 603, 604, 605, 607, 608, 609, 611, 612, 613, 615, 616, 617, 619, 620, 621, 623, 624, 625, 627, 628, 629, 631, 632, 633, 635, 636, 637, 639, 640, 641, 643, 644, 645, 647, 648, 649, 651, 652, 653, 655, 656, 657, 659, 660, 661, 663, 664, 665, 667, 668, 669, 671, 672, 673, 675, 676, 677, 678, 679, 681, 682, 683, 684, 686, 687, 688, 690, 691, 692, 694, 695, 696, 698, 699, 700, 702, 703, 704, 706, 707, 708, 710, 711, 712, 714, 715, 716, 718, 719, 720, 722, 723, 724, 726, 727, 728, 729, 731, 732, 733, 734, 736, 737, 738, 739, 741, 742, 743, 745, 746, 747, 759, 760, 761, 762, 764, 765, 766, 769, 770, 771, 773, 775, 776, 778, 779, 780, 787, 800, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 868, 869, 871, 872, 874, 875, 877, 881, 883, 884, 886, 887, 889, 890, 891, 893, 894, 895, 897, 898, 900, 901, 903, 904, 906, 910, 911, 913, 914, 916, 917, 919, 920, 922, 923, 925, 926, 928, 929, 931, 932, 934, 935, 936, 938, 939, 940, 941, 943, 944, 945, 946, 948, 949, 950, 951, 952, 954, 955, 956, 957, 959, 960, 961, 963, 964, 965, 967, 968, 969, 971, 972, 973, 975, 976, 977, 979, 980, 981, 983, 984, 985, 987, 988, 989, 991, 993, 994, 995, 997, 998, 999, 1001, 1002, 1003, 1005, 1006, 1007, 1009, 1010, 1033, 1034, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1049, 1050, 1051, 1052, 1054, 1055, 1059, 1060, 1061, 1063, 1064, 1065, 1066, 1068, 1069, 1070, 1071, 1072, 1074, 1075, 1076, 1078, 1079, 1080, 1082, 1083, 1084, 1086, 1087, 1088, 1090, 1091, 1092, 1094, 1095, 1096, 1098, 1099, 1100, 1102, 1103, 1104, 1105, 1107, 1108, 1109, 1111, 1112, 1113, 1134, 1142], "aco": [126, 127, 182, 312, 313, 510, 519, 1113], "acosh": [126, 127, 182, 312, 313, 423, 444, 445, 510, 1113], "add": [126, 127, 156, 157, 177, 178, 179, 180, 182, 274, 275, 312, 313, 314, 315, 342, 343, 345, 346, 347, 349, 350, 351, 355, 356, 358, 359, 363, 365, 367, 382, 510, 527, 657, 748, 752, 1033, 1034, 1037, 1113, 1119, 1148, 1149], "x2": [126, 127, 128, 129, 136, 137, 177, 178, 182, 187, 189, 197, 200, 202, 203, 204, 205, 215, 217, 224, 227, 228, 235, 236, 241, 242, 244, 245, 246, 250, 252, 256, 259, 274, 275, 281, 286, 293, 297, 312, 313, 314, 315, 322, 323, 352, 363, 423, 455, 460, 498, 510, 523, 525, 526, 527, 540, 542, 543, 548, 550, 551, 556, 558, 559, 560, 562, 563, 564, 566, 567, 568, 570, 571, 584, 586, 587, 588, 589, 591, 592, 600, 608, 609, 611, 612, 613, 615, 616, 617, 619, 620, 633, 635, 636, 637, 639, 640, 657, 659, 660, 661, 663, 664, 669, 671, 672, 673, 675, 676, 677, 678, 679, 681, 682, 683, 688, 690, 691, 696, 698, 699, 700, 702, 703, 728, 729, 731, 732, 747, 748, 750, 751, 752, 852, 857, 865, 869, 871, 887, 889, 890, 901, 903, 911, 913, 920, 922, 926, 928, 1050, 1054], "y": [126, 127, 128, 129, 140, 141, 179, 180, 182, 187, 189, 207, 208, 223, 225, 262, 274, 275, 279, 282, 288, 290, 294, 295, 300, 301, 312, 313, 314, 315, 326, 327, 330, 331, 350, 352, 356, 359, 365, 367, 393, 395, 396, 397, 398, 399, 400, 404, 411, 412, 415, 417, 418, 422, 423, 429, 460, 480, 494, 498, 503, 510, 523, 525, 527, 528, 531, 539, 540, 543, 544, 548, 551, 552, 555, 564, 567, 568, 571, 572, 574, 575, 576, 580, 592, 597, 605, 607, 609, 616, 617, 620, 657, 677, 678, 684, 687, 688, 691, 704, 707, 720, 723, 724, 727, 733, 734, 736, 738, 739, 741, 742, 747, 748, 750, 751, 752, 755, 756, 764, 765, 772, 773, 775, 776, 778, 779, 780, 809, 815, 816, 817, 821, 828, 852, 858, 859, 861, 865, 866, 868, 869, 871, 872, 884, 901, 903, 920, 922, 923, 925, 935, 936, 939, 941, 944, 946, 949, 951, 952, 954, 955, 956, 957, 960, 965, 968, 969, 972, 977, 980, 981, 984, 985, 987, 988, 989, 990, 999, 1002, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1046, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1057, 1060, 1061, 1064, 1071, 1072, 1075, 1076, 1079, 1092, 1095, 1096, 1099, 1104, 1105, 1108], "4": [126, 127, 140, 141, 174, 175, 176, 177, 178, 179, 180, 181, 182, 187, 206, 207, 208, 223, 225, 262, 274, 278, 279, 282, 288, 290, 294, 295, 300, 301, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 348, 352, 356, 359, 365, 367, 368, 369, 370, 393, 395, 396, 398, 404, 412, 415, 418, 422, 423, 432, 434, 435, 436, 460, 482, 498, 510, 523, 525, 527, 528, 531, 539, 540, 543, 544, 548, 551, 568, 571, 572, 574, 575, 580, 592, 605, 607, 609, 616, 617, 620, 657, 677, 678, 684, 687, 688, 691, 704, 707, 720, 723, 724, 727, 733, 734, 736, 738, 739, 741, 742, 747, 756, 765, 774, 775, 776, 778, 779, 780, 810, 815, 852, 855, 856, 857, 859, 862, 864, 865, 869, 871, 872, 875, 877, 884, 895, 897, 901, 903, 920, 922, 923, 925, 935, 946, 949, 951, 952, 954, 955, 956, 957, 960, 965, 968, 969, 972, 977, 980, 981, 984, 985, 987, 988, 989, 990, 999, 1002, 1033, 1034, 1037, 1038, 1039, 1040, 1042, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1060, 1061, 1064, 1071, 1072, 1075, 1076, 1079, 1099, 1104, 1105, 1108, 1113, 1150, 1151, 1152, 1153, 1155], "5": [126, 127, 128, 129, 140, 141, 179, 180, 182, 187, 206, 207, 208, 223, 262, 274, 278, 279, 282, 288, 290, 294, 295, 300, 301, 308, 309, 312, 313, 314, 315, 326, 327, 330, 331, 346, 348, 352, 356, 363, 367, 368, 369, 393, 395, 396, 398, 404, 412, 415, 418, 421, 422, 423, 432, 434, 435, 436, 460, 482, 498, 510, 523, 525, 527, 528, 531, 539, 544, 547, 548, 551, 564, 567, 568, 571, 572, 574, 575, 580, 592, 605, 607, 609, 616, 617, 620, 657, 677, 678, 684, 687, 688, 691, 704, 707, 720, 723, 724, 727, 733, 734, 736, 737, 738, 739, 741, 742, 747, 756, 765, 775, 776, 779, 780, 810, 815, 852, 855, 857, 858, 864, 865, 866, 868, 869, 871, 872, 875, 877, 884, 901, 903, 920, 922, 923, 925, 935, 946, 949, 951, 952, 954, 955, 956, 957, 960, 965, 968, 969, 972, 977, 980, 981, 984, 985, 987, 988, 989, 990, 999, 1002, 1033, 1034, 1037, 1038, 1039, 1040, 1041, 1042, 1049, 1050, 1052, 1053, 1054, 1055, 1056, 1057, 1060, 1061, 1064, 1071, 1072, 1075, 1076, 1079, 1099, 1104, 1105, 1108, 1134, 1145], "6": [126, 127, 140, 141, 179, 180, 182, 187, 207, 274, 282, 288, 312, 313, 314, 315, 330, 331, 348, 352, 356, 359, 367, 368, 369, 393, 395, 396, 398, 404, 412, 460, 482, 498, 510, 523, 525, 527, 528, 531, 548, 551, 552, 555, 568, 571, 572, 574, 575, 580, 592, 605, 616, 617, 620, 657, 677, 678, 684, 687, 704, 707, 720, 723, 724, 727, 733, 738, 747, 756, 765, 775, 776, 779, 780, 810, 815, 852, 855, 858, 859, 864, 865, 869, 871, 872, 875, 877, 901, 903, 914, 920, 922, 935, 936, 939, 946, 949, 951, 952, 955, 957, 960, 965, 968, 969, 972, 977, 980, 981, 984, 985, 988, 990, 999, 1002, 1033, 1034, 1037, 1038, 1039, 1040, 1041, 1042, 1050, 1051, 1054, 1055, 1056, 1057, 1071, 1072, 1075, 1076, 1079, 1099], "z": [126, 127, 128, 129, 179, 180, 182, 187, 225, 274, 282, 312, 313, 314, 315, 352, 356, 359, 365, 367, 460, 494, 510, 523, 525, 527, 548, 551, 568, 571, 592, 616, 617, 620, 657, 677, 678, 747, 755, 756, 775, 776, 778, 780, 809, 865, 869, 871, 935, 936, 939, 941, 944, 951, 952, 955, 1050, 1051, 1071, 1072, 1075, 1076, 1079, 1099], "7": [126, 127, 140, 141, 179, 180, 182, 187, 274, 288, 312, 313, 330, 331, 346, 348, 352, 355, 359, 362, 393, 395, 396, 460, 482, 510, 523, 525, 527, 548, 551, 552, 555, 568, 571, 572, 575, 580, 592, 597, 605, 616, 617, 620, 657, 677, 678, 704, 707, 720, 723, 733, 738, 747, 756, 765, 775, 821, 823, 824, 826, 834, 836, 852, 858, 859, 864, 865, 869, 871, 872, 875, 877, 901, 903, 920, 922, 935, 936, 939, 941, 944, 946, 949, 951, 952, 955, 965, 968, 969, 972, 977, 980, 990, 999, 1002, 1033, 1034, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1046, 1050, 1054, 1055, 1056, 1071, 1072, 1075, 1099], "9": [126, 127, 140, 141, 179, 180, 182, 186, 187, 232, 273, 274, 284, 288, 312, 313, 316, 317, 330, 331, 348, 352, 368, 369, 510, 523, 525, 527, 548, 551, 552, 555, 657, 677, 678, 704, 707, 720, 723, 724, 727, 747, 775, 821, 823, 824, 825, 826, 827, 834, 835, 836, 837, 852, 855, 858, 859, 865, 869, 871, 872, 875, 877, 901, 903, 914, 920, 922, 951, 952, 955, 969, 972, 977, 980, 985, 988, 990, 1038, 1039, 1040, 1041, 1042, 1050, 1054, 1055, 1056, 1071, 1072, 1075, 1099, 1150, 1151, 1152], "asin": [126, 127, 182, 312, 313, 510, 1113], "asinh": [126, 127, 182, 312, 313, 510, 1113], "atan": [126, 127, 182, 312, 313, 510, 544, 1113], "atan2": [126, 127, 182, 312, 313, 510, 1113], "atanh": [126, 127, 182, 312, 313, 510, 1113], "bitwise_and": [126, 127, 182, 312, 313, 510], "bitwise_invert": [126, 127, 182, 312, 313, 510], "bitwise_left_shift": [126, 127, 182, 312, 313, 510], "bitwise_or": [126, 127, 182, 312, 313, 510], "bitwise_right_shift": [126, 127, 182, 312, 313, 510], "bitwise_xor": [126, 127, 182, 312, 313, 510], "ceil": [126, 127, 182, 312, 313, 404, 405, 510, 1113], "0": [126, 127, 128, 129, 136, 137, 140, 141, 142, 143, 152, 153, 158, 162, 175, 176, 177, 178, 179, 180, 181, 182, 186, 189, 206, 207, 208, 210, 211, 220, 223, 232, 233, 234, 258, 262, 272, 273, 274, 275, 278, 279, 282, 284, 285, 288, 289, 290, 294, 295, 296, 300, 301, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 346, 350, 351, 352, 365, 367, 368, 369, 370, 393, 395, 396, 397, 398, 399, 400, 404, 405, 409, 413, 414, 418, 419, 420, 421, 422, 423, 429, 432, 434, 435, 436, 443, 460, 462, 465, 469, 472, 476, 479, 480, 482, 485, 486, 487, 488, 489, 490, 491, 492, 494, 498, 501, 503, 504, 508, 510, 511, 514, 515, 518, 519, 522, 523, 527, 528, 531, 532, 535, 536, 539, 540, 543, 544, 547, 548, 551, 556, 559, 564, 567, 568, 571, 572, 574, 575, 576, 579, 580, 583, 592, 597, 601, 604, 605, 607, 609, 616, 617, 620, 641, 644, 645, 648, 653, 656, 657, 677, 678, 679, 682, 684, 687, 688, 691, 696, 699, 700, 703, 704, 707, 708, 711, 712, 715, 716, 719, 720, 723, 724, 727, 733, 734, 736, 737, 738, 739, 741, 742, 743, 746, 747, 748, 750, 751, 752, 755, 756, 759, 760, 762, 764, 765, 766, 772, 775, 776, 779, 780, 785, 794, 800, 803, 804, 809, 815, 816, 817, 821, 823, 824, 825, 826, 827, 834, 835, 836, 837, 838, 839, 840, 841, 852, 853, 855, 857, 858, 859, 864, 865, 866, 868, 869, 871, 872, 875, 877, 884, 914, 920, 922, 923, 925, 929, 931, 935, 936, 939, 941, 944, 946, 949, 951, 952, 954, 955, 956, 957, 959, 960, 961, 963, 964, 965, 967, 968, 969, 972, 973, 976, 977, 980, 985, 987, 988, 989, 990, 991, 994, 995, 997, 998, 999, 1002, 1007, 1009, 1015, 1027, 1033, 1034, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1059, 1060, 1061, 1064, 1071, 1072, 1075, 1076, 1079, 1080, 1083, 1092, 1094, 1095, 1096, 1099, 1100, 1102, 1103, 1104, 1105, 1108, 1113, 1125, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1156, 1157], "co": [126, 127, 173, 182, 312, 313, 365, 381, 510, 518, 519, 583, 747, 774, 1113], "cosh": [126, 127, 182, 312, 313, 510, 518, 519, 1113], "divid": [126, 127, 177, 178, 182, 312, 313, 352, 358, 510, 587, 608, 609, 612, 747, 811, 951, 990], "equal": [126, 127, 177, 178, 182, 312, 313, 352, 359, 360, 404, 409, 411, 412, 423, 429, 510, 556, 559, 564, 567, 617, 621, 624, 625, 628, 696, 699, 704, 707, 747, 748, 751, 755, 756, 865, 875, 877, 886, 895, 897, 904, 906, 951, 952, 955, 961, 964, 990, 1007, 1010, 1038, 1044, 1046, 1055, 1056, 1057, 1059, 1060, 1061, 1064, 1066, 1069, 1071, 1080, 1083, 1092, 1095, 1096, 1100, 1103], "erf": [126, 127, 182, 312, 313, 510], "exp": [126, 127, 182, 312, 313, 510, 526, 600, 601, 604, 657, 660, 1113], "expm1": [126, 127, 182, 312, 313, 510], "floor": [126, 127, 182, 312, 313, 510, 564, 567, 609, 747, 773, 1113], "floor_divid": [126, 127, 182, 312, 313, 510], "greater": [126, 127, 177, 178, 182, 312, 313, 510, 515, 528, 531, 540, 543, 556, 559, 564, 567, 587, 592, 605, 608, 609, 612, 617, 696, 699, 700, 703, 708, 711, 743, 746, 865, 869, 871, 951, 991, 994, 1038, 1044, 1046], "greater_equ": [126, 127, 182, 312, 313, 510], "isfinit": [126, 127, 182, 312, 313, 510], "isinf": [126, 127, 182, 312, 313, 510], "isnan": [126, 127, 182, 312, 313, 510], "less": [126, 127, 173, 177, 178, 182, 312, 313, 346, 352, 359, 363, 364, 365, 510, 515, 518, 519, 522, 528, 531, 540, 543, 572, 575, 579, 583, 641, 644, 645, 648, 653, 656, 696, 699, 700, 703, 708, 711, 720, 723, 865, 886, 895, 897, 904, 906, 929, 931, 1038, 1044, 1046, 1071, 1100, 1103], "less_equ": [126, 127, 182, 312, 313, 510], "log": [126, 127, 182, 312, 313, 345, 346, 355, 359, 362, 365, 368, 404, 414, 510, 526, 600, 649, 652, 657, 660, 865, 874, 910, 1113], "log10": [126, 127, 182, 312, 313, 510], "log1p": [126, 127, 182, 312, 313, 510], "log2": [126, 127, 182, 312, 313, 510], "logaddexp": [126, 127, 182, 312, 313, 510], "logical_and": [126, 127, 182, 312, 313, 510, 1113], "logical_not": [126, 127, 182, 312, 313, 510, 1113], "logical_or": [126, 127, 182, 312, 313, 510, 1113], "logical_xor": [126, 127, 182, 312, 313, 510], "multipli": [126, 127, 182, 312, 313, 352, 356, 358, 510, 747, 765], "neg": [126, 127, 182, 312, 313, 355, 359, 362, 393, 395, 404, 405, 409, 510, 621, 624, 625, 628, 679, 682, 696, 699, 700, 703, 865, 914, 926, 928, 929, 931, 951, 969, 972, 985, 988, 1104, 1105, 1108, 1109, 1112], "not_equ": [126, 127, 182, 312, 313, 510], "pow": [126, 127, 182, 312, 313, 510], "remaind": [126, 127, 177, 178, 182, 312, 313, 510, 747, 773, 951, 990], "round": [126, 127, 172, 173, 174, 182, 312, 313, 345, 346, 347, 348, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 365, 367, 368, 369, 370, 381, 510, 523, 572, 575, 587, 605, 608, 609, 612, 679, 682, 720, 723, 743, 746, 1113], "sign": [126, 127, 173, 182, 312, 313, 345, 366, 370, 404, 405, 510, 511, 514, 523, 540, 543, 564, 567, 679, 682, 700, 703, 865, 874, 910, 1055, 1056, 1057, 1059, 1071, 1088, 1091, 1096], "sin": [126, 127, 182, 312, 313, 358, 365, 510, 747, 774, 1113], "sinh": [126, 127, 182, 312, 313, 510, 1113], "sqrt": [126, 127, 182, 312, 313, 510, 865, 929, 931], "squar": [126, 127, 182, 312, 313, 510, 720, 723, 852, 855, 865, 866, 868, 872, 874, 878, 880, 881, 883, 884, 894, 910, 911, 913, 914], "subtract": [126, 127, 182, 312, 313, 352, 358, 510], "tan": [126, 127, 182, 294, 312, 313, 351, 355, 359, 362, 363, 365, 510, 528, 531, 539, 544, 734, 742, 1055, 1056, 1057, 1060, 1061, 1064, 1113], "56": [126, 127, 182, 294, 300, 312, 313, 352, 510, 539, 544, 720, 723, 733, 734, 736, 742, 865, 901, 903, 1071, 1072, 1075, 1099], "19": [126, 127, 182, 294, 300, 312, 313, 352, 510, 539, 544, 568, 571, 733, 734, 736, 742, 865, 875, 877], "tanh": [126, 127, 182, 295, 312, 313, 365, 393, 510, 539, 544, 739, 1113], "762": [126, 127, 182, 301, 312, 313, 393, 400, 510, 539, 544, 738, 741], "964": [126, 127, 182, 301, 312, 313, 393, 400, 510, 539, 544, 738, 741], "trunc": [126, 127, 182, 312, 313, 510], "elementwis": [127, 177, 178, 313, 350, 355, 365, 370, 511, 514, 515, 518, 519, 522, 523, 526, 528, 531, 532, 535, 536, 539, 540, 543, 544, 547, 548, 551, 552, 555, 556, 559, 560, 563, 564, 567, 568, 571, 572, 575, 576, 579, 580, 583, 584, 587, 589, 592, 593, 596, 597, 600, 601, 604, 605, 608, 609, 612, 613, 616, 617, 620, 621, 624, 625, 628, 629, 632, 633, 636, 637, 640, 641, 644, 645, 648, 649, 652, 653, 656, 657, 660, 661, 664, 665, 668, 669, 672, 673, 676, 677, 678, 679, 682, 684, 687, 688, 691, 692, 695, 696, 699, 700, 703, 704, 707, 708, 711, 712, 715, 716, 719, 720, 723, 724, 727, 728, 732, 733, 737, 738, 742, 743, 746], "arraywithgener": [128, 367], "all_equ": [128, 129, 182, 275, 314, 315, 747, 752], "equality_matrix": [128, 129, 182, 189, 275, 314, 315, 747, 748, 750, 751, 752], "With": [128, 129, 173, 174, 177, 178, 179, 180, 182, 189, 274, 275, 279, 282, 288, 290, 294, 295, 312, 313, 314, 315, 326, 327, 330, 331, 345, 352, 354, 365, 393, 395, 396, 397, 398, 399, 400, 404, 415, 423, 432, 435, 460, 482, 498, 510, 523, 527, 528, 531, 539, 544, 548, 551, 568, 571, 572, 575, 580, 592, 605, 616, 617, 620, 657, 677, 678, 684, 687, 688, 691, 704, 707, 720, 723, 724, 727, 733, 734, 738, 739, 742, 747, 748, 750, 751, 752, 756, 764, 765, 772, 775, 776, 779, 780, 810, 815, 816, 817, 852, 855, 858, 859, 864, 865, 866, 868, 869, 871, 872, 875, 877, 891, 893, 920, 922, 935, 936, 939, 946, 949, 951, 952, 955, 956, 965, 968, 969, 972, 977, 980, 985, 988, 989, 990, 999, 1002, 1033, 1034, 1037, 1038, 1039, 1040, 1042, 1043, 1044, 1046, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1060, 1061, 1064, 1071, 1072, 1075, 1099, 1104, 1105, 1108], "x1": [128, 129, 182, 189, 274, 275, 281, 286, 293, 312, 313, 314, 315, 352, 363, 423, 455, 460, 498, 510, 523, 526, 527, 540, 543, 548, 551, 556, 559, 560, 563, 564, 567, 568, 571, 584, 587, 588, 589, 592, 600, 608, 609, 612, 613, 616, 617, 620, 633, 636, 637, 640, 657, 660, 661, 664, 669, 672, 673, 676, 677, 678, 679, 682, 683, 688, 691, 696, 699, 700, 703, 728, 729, 732, 747, 748, 750, 751, 752, 755, 852, 857, 865, 869, 871, 887, 890, 901, 903, 911, 913, 920, 922, 926, 928, 1050, 1054], "mix": [128, 129, 179, 180, 182, 349, 352, 354, 365, 423, 451, 460, 498, 510, 523, 548, 551, 568, 571, 592, 616, 617, 620, 677, 678, 688, 691, 747, 764, 772, 775, 776, 779, 815, 816, 817, 852, 855, 858, 859, 864, 865, 920, 922, 935, 936, 939, 946, 949, 951, 952, 955, 1033, 1034, 1037, 1050, 1054, 1071, 1072, 1075, 1080, 1083, 1099], "native_arrai": [128, 129, 158, 164, 170, 179, 180, 182, 189, 275, 314, 315, 393, 395, 396, 397, 398, 399, 400, 404, 415, 423, 432, 435, 460, 482, 498, 510, 528, 531, 548, 551, 568, 571, 572, 575, 592, 605, 616, 617, 620, 677, 678, 684, 687, 688, 691, 720, 723, 724, 727, 738, 747, 748, 750, 751, 752, 756, 764, 765, 772, 775, 776, 779, 810, 815, 816, 817, 852, 855, 858, 859, 864, 865, 869, 871, 872, 875, 877, 920, 922, 935, 936, 939, 946, 949, 951, 952, 955, 965, 968, 969, 972, 977, 980, 990, 999, 1002, 1033, 1034, 1037, 1038, 1039, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1071, 1072, 1075, 1076, 1079, 1099, 1104, 1105, 1108], "gather_nd": [128, 129, 177, 178, 182, 282, 314, 315, 747, 780, 1113], "indic": [128, 129, 177, 178, 182, 225, 282, 314, 315, 348, 366, 370, 393, 398, 510, 708, 711, 747, 775, 776, 778, 779, 780, 787, 800, 803, 804, 852, 853, 854, 855, 856, 857, 858, 859, 865, 929, 931, 951, 985, 988, 1015, 1016, 1018, 1020, 1022, 1023, 1024, 1026, 1029, 1030, 1031, 1032, 1033, 1034, 1037, 1038, 1039, 1050, 1051, 1052, 1053, 1055, 1056, 1058, 1060, 1061, 1064, 1066, 1069, 1113, 1116, 1118, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1146, 1147], "gener": [129, 156, 157, 177, 178, 315, 342, 343, 346, 347, 348, 349, 350, 351, 352, 355, 358, 359, 360, 361, 362, 363, 364, 365, 367, 369, 370, 381, 382, 401, 404, 405, 413, 414, 423, 432, 435, 510, 528, 531, 568, 571, 572, 575, 580, 605, 688, 691, 700, 703, 720, 723, 724, 727, 748, 751, 753, 754, 755, 756, 757, 758, 759, 760, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 779, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 833, 951, 965, 968, 985, 988, 1038, 1039, 1040, 1041, 1044, 1046, 1048, 1055, 1056, 1057, 1060, 1061, 1064, 1071, 1076, 1079, 1113, 1150, 1154], "arraywithgradi": [130, 367], "gradient": [131, 177, 178, 317, 350, 359, 368, 369, 381, 382, 460, 504, 823, 824, 826, 828, 829, 831, 833, 834, 836, 838, 840, 842, 844, 846, 847, 848, 849, 850, 851, 1011, 1012, 1013, 1014, 1113, 1150, 1151, 1152, 1153, 1154, 1155], "arraywithimag": [132, 367], "imag": [133, 319, 345, 348, 350, 365, 366, 368, 370, 381, 852, 853, 854, 855, 856, 858, 859, 1113], "arraywithlay": 134, "layer": [135, 172, 321, 350, 351, 365, 366, 369, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 1033, 1034, 1037, 1113, 1125, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1154, 1156, 1157], "linear_algebra": [136, 137, 322, 323, 350, 367, 865, 866, 868, 869, 871, 872, 874, 875, 877, 878, 880, 881, 883, 884, 886, 887, 890, 891, 893, 894, 895, 897, 898, 900, 901, 903, 904, 906, 907, 909, 910, 911, 913, 914, 916, 917, 919, 920, 922, 923, 925, 926, 928, 929, 931, 932, 934], "arraywithlinearalgebra": 136, "choleski": [136, 137, 179, 180, 865], "upper": [136, 137, 177, 178, 404, 409, 420, 865, 866, 868, 907, 909, 1038, 1044, 1046], "cross": [136, 137, 179, 180, 865, 935, 936, 939, 941, 944, 946, 949, 1113], "axi": [136, 137, 138, 139, 140, 141, 150, 151, 152, 153, 154, 155, 177, 178, 182, 188, 190, 191, 210, 214, 220, 222, 247, 248, 249, 257, 260, 262, 267, 268, 271, 272, 276, 280, 290, 291, 292, 296, 298, 304, 324, 325, 326, 327, 336, 337, 338, 339, 340, 341, 352, 355, 359, 360, 362, 363, 365, 367, 370, 381, 393, 398, 404, 413, 414, 460, 462, 465, 472, 485, 486, 487, 488, 489, 490, 491, 492, 504, 747, 765, 766, 775, 819, 865, 869, 871, 875, 877, 926, 928, 929, 931, 935, 941, 943, 944, 945, 946, 948, 949, 950, 951, 957, 959, 960, 961, 964, 965, 967, 968, 969, 971, 972, 977, 979, 980, 985, 987, 988, 989, 990, 991, 993, 994, 995, 997, 998, 999, 1002, 1003, 1006, 1007, 1010, 1038, 1049, 1050, 1051, 1052, 1060, 1061, 1063, 1064, 1065, 1066, 1068, 1069, 1070, 1071, 1072, 1076, 1078, 1079, 1080, 1082, 1083, 1084, 1086, 1087, 1088, 1090, 1091, 1092, 1094, 1095, 1096, 1098, 1100, 1102, 1103, 1104, 1105, 1107, 1108, 1109, 1111, 1112], "det": [136, 137, 179, 180, 865], "diagon": [136, 137, 179, 180, 404, 409, 419, 420, 865, 923, 925], "offset": [136, 137, 142, 143, 182, 234, 328, 329, 865, 875, 877, 923, 925, 1033, 1034, 1036, 1037], "axis1": [136, 137, 140, 141, 182, 299, 326, 327, 865, 875, 877, 951, 999, 1001, 1002], "axis2": [136, 137, 865, 875, 877], "eigh": [136, 137, 179, 180, 865], "namedtupl": [136, 137, 865, 878, 880, 907, 909, 914, 1055, 1056, 1057], "eigvalsh": [136, 137, 179, 180, 865], "inv": [136, 137, 179, 180, 367, 865, 1113], "matmul": [136, 137, 182, 322, 323, 350, 356, 365, 865, 914, 1113], "matrix_norm": [136, 137, 177, 178, 865], "ord": [136, 137, 177, 178, 865, 891, 893, 929, 931], "fro": [136, 137, 865, 891, 893], "keepdim": [136, 137, 152, 153, 154, 155, 177, 178, 182, 188, 190, 247, 248, 249, 257, 296, 298, 304, 338, 339, 340, 341, 747, 819, 865, 891, 893, 929, 931, 1050, 1051, 1052, 1071, 1072, 1076, 1078, 1079, 1080, 1082, 1083, 1084, 1086, 1087, 1088, 1090, 1091, 1092, 1094, 1095, 1096, 1098, 1100, 1102, 1103, 1104, 1105, 1107, 1108, 1109, 1111, 1112], "matrix_rank": [136, 137, 179, 180, 865], "rtol": [136, 137, 865, 886, 895, 897, 904, 906], "matrix_transpos": [136, 137, 179, 180, 367, 865], "outer": [136, 137, 179, 180, 865, 1011, 1012, 1013, 1014], "pinv": [136, 137, 179, 180, 865, 1113], "qr": [136, 137, 179, 180, 865], "mode": [136, 137, 177, 178, 345, 352, 359, 382, 401, 402, 460, 489, 490, 491, 492, 504, 510, 523, 679, 682, 865, 907, 909], "reduc": [136, 137, 177, 178, 367, 460, 504, 747, 770, 865, 907, 909, 1050, 1051, 1052, 1071, 1076, 1079, 1080, 1083, 1084, 1087, 1088, 1091, 1092, 1095, 1096, 1100, 1103, 1104, 1105, 1108, 1109, 1112], "solv": [136, 137, 179, 180, 366, 381, 865], "svd": [136, 137, 179, 180, 865, 1113], "full_matric": [136, 137, 865, 914], "svdval": [136, 137, 179, 180, 865], "tensordot": [136, 137, 179, 180, 865], "ax": [136, 137, 140, 141, 177, 178, 182, 254, 326, 327, 350, 352, 360, 367, 460, 504, 747, 765, 865, 891, 893, 911, 913, 920, 922, 929, 931, 951, 961, 964, 969, 972, 973, 975, 976, 985, 988, 991, 994, 999, 1002, 1007, 1010, 1050, 1051, 1052, 1071, 1076, 1079, 1080, 1083, 1084, 1087, 1088, 1091, 1092, 1095, 1096, 1100, 1103, 1104, 1105, 1108, 1109, 1112], "trace": [136, 137, 177, 178, 179, 180, 365, 382, 747, 793, 794, 796, 865], "vecdot": [136, 137, 179, 180, 865], "vector_norm": [136, 137, 177, 178, 865], "vector_to_skew_symmetric_matrix": [136, 137, 179, 180, 865, 1113], "arraywithloss": 138, "binary_cross_entropi": [138, 139, 182, 324, 325, 935], "pred": [138, 139, 182, 199, 214, 268, 277, 280, 292, 324, 325, 355, 359, 362, 935, 936, 938, 939, 940, 941, 943, 944, 945, 946, 948, 949, 950], "epsilon": [138, 139, 142, 143, 182, 186, 199, 214, 232, 234, 268, 273, 277, 280, 284, 292, 316, 317, 324, 325, 328, 329, 355, 359, 362, 369, 821, 823, 824, 825, 826, 827, 834, 835, 836, 837, 865, 886, 895, 897, 904, 906, 935, 936, 938, 939, 940, 941, 943, 944, 945, 946, 948, 949, 950, 1033, 1034, 1036, 1037, 1148, 1149, 1150, 1151, 1152], "1e": [138, 139, 142, 143, 182, 186, 199, 214, 232, 234, 268, 273, 277, 280, 284, 292, 316, 317, 324, 325, 328, 329, 355, 359, 362, 369, 370, 747, 783, 821, 823, 824, 825, 826, 827, 834, 835, 836, 837, 865, 914, 935, 936, 938, 939, 940, 941, 943, 944, 945, 946, 948, 949, 950, 1033, 1034, 1036, 1037, 1113, 1150, 1151, 1152, 1153, 1155], "07": [138, 139, 182, 186, 199, 214, 232, 268, 273, 277, 280, 284, 292, 316, 317, 324, 325, 369, 821, 823, 824, 825, 826, 827, 834, 835, 836, 837, 935, 936, 938, 939, 940, 941, 943, 944, 945, 946, 948, 949, 950, 1150, 1151, 1152], "cross_entropi": [138, 139, 182, 324, 325, 355, 359, 362, 935, 946, 949], "sparse_cross_entropi": [138, 139, 182, 324, 325, 935], "loss": [139, 325, 350, 355, 368, 369, 370, 936, 939, 941, 944, 946, 949, 1113], "arraywithmanipul": 140, "clip": [140, 141, 177, 178, 182, 279, 326, 327, 355, 359, 362, 365, 368, 370, 510, 677, 678, 747, 759, 760, 762, 951, 956, 1113], "x_min": [140, 141, 177, 178, 182, 208, 279, 326, 327, 365, 370, 951, 952, 954, 955, 956], "x_max": [140, 141, 177, 178, 182, 208, 279, 326, 327, 365, 370, 951, 952, 954, 955, 956], "roll": [140, 141, 182, 290, 326, 327, 359, 363, 951, 989], "8": [140, 141, 179, 180, 182, 274, 288, 312, 313, 330, 331, 345, 348, 352, 359, 364, 368, 393, 397, 460, 482, 510, 523, 527, 548, 551, 572, 575, 580, 592, 616, 617, 620, 657, 677, 678, 704, 707, 720, 723, 724, 727, 738, 747, 756, 775, 852, 859, 865, 869, 871, 872, 875, 877, 901, 903, 920, 922, 935, 936, 939, 951, 952, 955, 969, 972, 977, 980, 990, 1038, 1039, 1040, 1041, 1042, 1050, 1054, 1055, 1056, 1071, 1072, 1075, 1099, 1113, 1134, 1145], "concat": [140, 141, 177, 178, 182, 326, 327, 460, 489, 490, 491, 492, 504, 747, 774, 951, 1113], "xs": [140, 141, 182, 210, 326, 327, 359, 460, 483, 487, 489, 490, 491, 747, 748, 751, 756, 821, 828, 951, 957, 959, 960], "constant_pad": [140, 141, 182, 326, 327, 951], "pad_width": [140, 141, 182, 211, 305, 326, 327, 951, 961, 963, 964, 1007, 1009, 1010], "valu": [140, 141, 177, 178, 179, 180, 181, 182, 211, 305, 326, 327, 346, 352, 354, 355, 359, 360, 361, 362, 363, 365, 367, 370, 382, 404, 405, 409, 411, 412, 413, 414, 423, 429, 438, 439, 440, 460, 472, 503, 504, 510, 511, 514, 515, 523, 528, 531, 536, 572, 575, 587, 589, 592, 593, 596, 605, 608, 609, 612, 613, 616, 617, 620, 633, 636, 637, 640, 677, 678, 679, 682, 688, 691, 692, 695, 696, 699, 704, 707, 738, 743, 746, 747, 759, 760, 762, 763, 768, 774, 775, 776, 779, 785, 788, 792, 802, 803, 804, 805, 806, 807, 820, 821, 823, 824, 826, 828, 834, 836, 847, 851, 852, 853, 854, 855, 856, 857, 858, 859, 862, 863, 864, 865, 874, 886, 895, 897, 904, 906, 907, 909, 910, 911, 913, 914, 916, 917, 919, 929, 931, 951, 952, 955, 961, 963, 964, 977, 980, 981, 984, 1007, 1009, 1010, 1011, 1012, 1013, 1015, 1019, 1020, 1021, 1022, 1023, 1028, 1031, 1032, 1033, 1034, 1037, 1038, 1039, 1040, 1041, 1043, 1044, 1046, 1048, 1050, 1051, 1052, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1064, 1066, 1069, 1071, 1076, 1079, 1080, 1083, 1084, 1087, 1088, 1091, 1092, 1095, 1096, 1100, 1103, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1154], "expand_dim": [140, 141, 182, 326, 327, 365, 368, 951, 1113], "flip": [140, 141, 182, 326, 327, 367, 368, 370, 510, 552, 555, 951, 977, 980, 1113], "permute_dim": [140, 141, 182, 326, 327, 951], "repeat": [140, 141, 177, 178, 182, 326, 327, 346, 351, 352, 356, 358, 359, 747, 771, 951, 1003, 1006], "reshap": [140, 141, 177, 178, 182, 326, 327, 362, 365, 367, 370, 951, 1113], "shape": [140, 141, 177, 178, 182, 261, 288, 289, 326, 327, 330, 331, 346, 350, 351, 352, 360, 361, 362, 363, 365, 367, 368, 369, 370, 393, 396, 404, 407, 408, 411, 412, 415, 417, 418, 419, 420, 421, 422, 423, 429, 430, 431, 460, 472, 500, 505, 510, 511, 514, 515, 518, 519, 522, 523, 526, 528, 531, 532, 535, 536, 540, 543, 548, 551, 552, 555, 556, 559, 560, 563, 564, 567, 568, 571, 572, 575, 576, 579, 580, 583, 592, 597, 600, 601, 604, 605, 616, 617, 620, 621, 624, 625, 628, 629, 632, 633, 636, 641, 644, 645, 648, 649, 652, 653, 656, 657, 660, 661, 664, 665, 668, 669, 672, 673, 676, 679, 682, 684, 687, 688, 691, 696, 699, 700, 703, 704, 707, 708, 711, 712, 715, 716, 719, 720, 723, 724, 727, 728, 732, 733, 738, 747, 760, 762, 773, 776, 779, 784, 800, 803, 804, 810, 852, 854, 855, 856, 858, 859, 864, 865, 866, 868, 869, 871, 872, 875, 877, 878, 880, 881, 883, 884, 886, 887, 890, 895, 897, 898, 900, 901, 903, 904, 906, 907, 909, 911, 913, 914, 916, 917, 919, 923, 925, 926, 928, 935, 936, 939, 941, 944, 946, 949, 951, 952, 955, 957, 960, 961, 964, 965, 968, 969, 972, 973, 976, 977, 980, 981, 983, 984, 985, 988, 990, 991, 994, 995, 998, 999, 1002, 1007, 1010, 1038, 1040, 1041, 1042, 1043, 1044, 1046, 1047, 1050, 1051, 1053, 1060, 1061, 1064, 1066, 1069, 1071, 1072, 1075, 1099, 1104, 1105, 1108, 1109, 1112, 1113, 1134, 1136, 1137, 1138, 1139, 1140, 1141, 1148, 1149], "shift": [140, 141, 182, 262, 290, 326, 327, 352, 363, 510, 556, 559, 564, 567, 951, 985, 987, 988, 989], "squeez": [140, 141, 182, 326, 327, 951, 1113], "stack": [140, 141, 177, 178, 182, 326, 327, 365, 404, 419, 420, 865, 872, 875, 877, 878, 880, 881, 883, 884, 886, 887, 890, 894, 895, 897, 898, 900, 904, 906, 907, 909, 914, 916, 917, 919, 923, 925, 951, 1015, 1016, 1025, 1026, 1113, 1134, 1143], "swapax": [140, 141, 182, 326, 327, 951], "axis0": [140, 141, 182, 299, 326, 327, 951, 999, 1001, 1002], "tile": [140, 141, 182, 326, 327, 951, 1113], "rep": [140, 141, 182, 302, 326, 327, 951, 1003, 1005, 1006], "zero_pad": [140, 141, 182, 326, 327, 951, 1113], "manipul": [141, 172, 327, 350, 370, 381, 952, 955, 957, 960, 961, 964, 965, 968, 969, 972, 973, 976, 977, 980, 981, 984, 985, 988, 990, 991, 994, 995, 998, 999, 1002, 1003, 1006, 1007, 1010], "arraywithnorm": 142, "layer_norm": [142, 143, 182, 328, 329, 1033], "normalized_idx": [142, 143, 182, 234, 328, 329, 1033, 1034, 1036, 1037], "05": [142, 143, 182, 234, 328, 329, 460, 1033, 1034, 1036, 1037], "scale": [142, 143, 182, 234, 328, 329, 359, 460, 502, 503, 821, 838, 840, 852, 860, 863, 864, 1033, 1034, 1036, 1037, 1134, 1142, 1145, 1150, 1153], "new_std": [142, 143, 182, 234, 328, 329, 1033, 1034, 1036, 1037, 1148, 1149], "norm": [143, 177, 178, 329, 350, 747, 759, 760, 762, 865, 891, 893, 929, 931, 1034, 1037, 1113, 1149, 1150, 1152], "arraywithrandom": [144, 367], "random": [145, 177, 178, 331, 350, 361, 370, 381, 1039, 1040, 1041, 1043, 1044, 1046, 1048, 1049, 1113], "arraywithsearch": 146, "arraywithset": 148, "arraywithsort": 150, "argsort": [150, 151, 182, 336, 337, 1060], "descend": [150, 151, 182, 191, 267, 276, 291, 336, 337, 865, 914, 916, 917, 919, 1060, 1061, 1063, 1064, 1065, 1066, 1068, 1069, 1070], "stabl": [150, 151, 182, 191, 267, 276, 291, 336, 337, 345, 365, 382, 747, 782, 783, 805, 806, 811, 812, 1060, 1061, 1063, 1064, 1065, 1066, 1068, 1069, 1070], "sort": [151, 177, 178, 179, 180, 181, 182, 337, 350, 865, 878, 880, 914, 916, 917, 919, 1061, 1064], "arraywithstatist": 152, "einsum": [152, 153, 182, 338, 339, 1071], "equat": [152, 153, 182, 216, 338, 339, 865, 911, 913, 1071, 1072, 1074, 1075, 1099], "max": [152, 153, 177, 178, 182, 338, 339, 423, 443, 446, 510, 677, 747, 759, 760, 762, 770, 803, 804, 865, 886, 895, 897, 904, 906, 1071, 1150, 1152], "mean": [152, 153, 177, 178, 182, 338, 339, 342, 343, 345, 346, 349, 352, 355, 359, 360, 361, 362, 365, 367, 368, 369, 370, 381, 382, 460, 489, 490, 491, 492, 504, 747, 770, 1011, 1012, 1013, 1014, 1015, 1021, 1038, 1043, 1055, 1056, 1071, 1113, 1125], "min": [152, 153, 177, 178, 182, 338, 339, 423, 443, 446, 510, 678, 747, 770, 803, 804, 811, 865, 907, 909, 914, 916, 917, 919, 929, 931, 1071], "prod": [152, 153, 177, 178, 182, 338, 339, 352, 360, 747, 770, 1071], "std": [152, 153, 182, 338, 339, 352, 1038, 1043, 1055, 1056, 1071], "correct": [152, 153, 182, 296, 304, 338, 339, 346, 347, 349, 355, 359, 360, 361, 363, 423, 455, 951, 952, 955, 1071, 1092, 1094, 1095, 1100, 1102, 1103, 1113], "sum": [152, 153, 177, 178, 182, 338, 339, 355, 359, 360, 362, 365, 460, 489, 490, 491, 492, 504, 510, 523, 526, 600, 657, 660, 747, 766, 770, 803, 804, 852, 864, 865, 914, 923, 925, 929, 931, 1071, 1072, 1075, 1092, 1095, 1099], "var": [152, 153, 182, 338, 339, 342, 343, 352, 365, 1011, 1012, 1013, 1071], "statist": [153, 339, 342, 343, 350, 360, 1072, 1075, 1076, 1079, 1080, 1083, 1084, 1087, 1088, 1091, 1092, 1095, 1096, 1099, 1100, 1103], "arraywithutil": 154, "util": [155, 341, 350, 361, 460, 493, 1105, 1108, 1109, 1112], "add_ivy_array_instance_method": 156, "cl": [156, 157, 342, 343], "modul": [156, 157, 158, 162, 163, 174, 177, 178, 179, 180, 181, 342, 343, 345, 348, 354, 355, 356, 358, 362, 365, 366, 368, 370, 381, 382, 747, 798, 1038, 1039, 1043, 1044, 1046, 1113, 1120, 1121, 1122, 1123, 1124, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1148, 1149, 1156, 1157], "to_ignor": [156, 157, 342, 343, 1015, 1026], "loop": [156, 157, 342, 343, 356, 382, 1011, 1012, 1013, 1014], "over": [156, 157, 158, 162, 172, 174, 177, 178, 342, 343, 345, 351, 352, 356, 362, 367, 382, 865, 891, 893, 920, 922, 926, 928, 929, 931, 1033, 1034, 1037, 1038, 1044, 1046, 1071, 1076, 1079, 1080, 1083, 1084, 1087, 1088, 1091, 1092, 1095, 1096, 1100, 1103, 1104, 1105, 1108, 1109, 1112, 1148, 1149], "etc": [156, 157, 174, 177, 178, 342, 343, 345, 346, 347, 350, 352, 354, 358, 359, 360, 363, 365, 367, 368, 382, 404, 413, 414, 747, 775, 776, 779, 800, 803, 804, 1038, 1039, 1040, 1041, 1044, 1046, 1055, 1056, 1057, 1059, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1154, 1156, 1157], "us": [156, 157, 158, 163, 170, 173, 174, 177, 178, 179, 180, 181, 342, 343, 344, 346, 347, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 367, 369, 370, 381, 382, 393, 395, 396, 397, 398, 399, 400, 403, 423, 442, 460, 469, 470, 495, 499, 502, 503, 504, 505, 507, 509, 510, 528, 531, 548, 551, 568, 571, 580, 592, 616, 617, 620, 677, 678, 684, 687, 688, 691, 704, 707, 720, 723, 747, 775, 782, 783, 797, 803, 804, 805, 806, 811, 812, 821, 823, 824, 826, 834, 836, 838, 840, 852, 858, 860, 861, 863, 864, 865, 872, 875, 877, 891, 893, 935, 936, 939, 951, 965, 968, 969, 972, 977, 980, 985, 988, 999, 1002, 1011, 1012, 1013, 1014, 1015, 1016, 1018, 1024, 1025, 1026, 1028, 1033, 1034, 1037, 1050, 1051, 1052, 1053, 1055, 1056, 1057, 1071, 1072, 1075, 1099, 1104, 1105, 1108, 1113, 1134, 1142, 1145, 1146, 1147, 1148, 1149, 1150, 1152, 1153], "_wrap_funct": [156, 157, 342, 343, 355, 357], "we": [156, 157, 158, 163, 164, 170, 171, 172, 173, 174, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 362, 363, 365, 366, 367, 368, 369, 370, 381, 382, 821, 828, 1113, 1119], "want": [156, 157, 158, 163, 173, 342, 343, 344, 345, 346, 354, 368, 369, 370, 382], "don": [156, 157, 174, 342, 343, 345, 346, 347, 360, 369, 382], "t": [156, 157, 158, 163, 173, 174, 342, 343, 345, 346, 347, 348, 352, 360, 365, 367, 368, 369, 370, 382, 747, 756, 852, 861, 862], "As": [156, 157, 172, 342, 343, 346, 354, 355, 358, 359, 360, 361, 362, 363, 365, 367, 368, 369, 382, 1055, 1056, 1057, 1059], "shown": [156, 157, 177, 178, 342, 343, 346, 352, 363, 365, 367, 382, 404, 415, 510, 548, 551, 568, 571, 580, 704, 707, 738, 865, 872, 951, 965, 968, 969, 972, 1055, 1056, 1057, 1060, 1061, 1064], "appropri": [156, 157, 342, 343, 346, 357, 510, 523, 679, 682, 1050, 1051], "our": [156, 157, 172, 173, 342, 343, 344, 345, 346, 352, 359, 364, 367, 368, 369, 370, 382, 1113], "toi": [156, 157, 342, 343], "arrayexampl": [156, 157], "import": [156, 157, 158, 162, 173, 342, 343, 347, 350, 351, 352, 356, 358, 359, 360, 361, 362, 365, 367, 368, 370, 382, 460, 501, 1113, 1119], "pass": [156, 157, 158, 162, 177, 178, 179, 180, 181, 342, 343, 347, 351, 352, 353, 354, 355, 356, 358, 359, 362, 363, 367, 382, 423, 437, 460, 469, 504, 510, 540, 543, 747, 758, 791, 821, 850, 1011, 1012, 1013, 1123, 1124, 1146, 1147, 1150, 1154, 1156, 1157], "hasattr": [156, 157, 342, 343, 367], "relu": [156, 157, 179, 180, 368, 369, 393, 394, 395, 1113], "softmax": [156, 157, 179, 180, 393, 852, 863, 864, 1113], "backend_handl": [158, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 1113], "contextmanag": [158, 159], "object": [158, 177, 178, 179, 180, 181, 367, 370, 404, 410, 423, 443, 460, 505, 821, 1015, 1018, 1020, 1022, 1023, 1024, 1029, 1030, 1031, 1032, 1038, 1049, 1125, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1143, 1144, 1146, 1147], "__init__": [158, 159, 162, 163, 177, 178, 179, 180, 181, 182, 350, 356, 360, 365, 367, 368, 369, 370, 423, 424, 425, 426, 460, 461, 468, 469, 470, 471, 472, 473, 474, 475, 821, 822, 1038, 1039, 1043, 1044, 1046, 1113, 1120, 1121, 1122, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157], "choose_random_backend": 158, "exclud": [158, 160, 352, 365, 404, 405, 1038, 1044, 1046], "clear_backend_stack": 158, "current_backend": [158, 179, 180, 350, 355], "current": [158, 162, 163, 170, 174, 177, 178, 179, 180, 181, 345, 346, 347, 348, 355, 361, 365, 370, 381, 382, 423, 444, 445, 447, 459, 460, 469, 493, 494, 498, 500, 747, 781, 788, 792, 799, 801, 1015, 1016, 1025, 1026, 1113], "prioriti": [158, 162, 177, 178, 346, 362], "global_backend": [158, 162], "which": [158, 162, 163, 172, 173, 174, 177, 178, 179, 180, 181, 345, 346, 347, 348, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 367, 368, 369, 370, 381, 382, 393, 398, 401, 402, 403, 404, 405, 406, 407, 408, 409, 411, 412, 413, 414, 416, 417, 418, 419, 420, 421, 422, 423, 432, 435, 437, 441, 443, 446, 447, 459, 460, 469, 470, 480, 485, 486, 487, 488, 489, 490, 491, 492, 494, 498, 500, 502, 503, 504, 510, 700, 703, 747, 753, 765, 766, 768, 775, 776, 779, 781, 787, 791, 799, 800, 801, 803, 804, 819, 821, 824, 826, 828, 829, 831, 834, 836, 838, 840, 842, 844, 847, 849, 850, 852, 863, 865, 869, 871, 875, 877, 891, 893, 911, 913, 914, 926, 928, 929, 931, 935, 941, 944, 946, 949, 951, 957, 960, 969, 972, 977, 980, 985, 988, 990, 995, 998, 1015, 1020, 1021, 1022, 1023, 1028, 1029, 1030, 1031, 1032, 1038, 1039, 1040, 1041, 1044, 1046, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1059, 1060, 1061, 1064, 1066, 1069, 1071, 1076, 1079, 1080, 1083, 1084, 1087, 1088, 1091, 1092, 1095, 1096, 1100, 1103, 1104, 1105, 1108, 1109, 1112, 1113, 1116, 1118, 1123, 1124, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1154, 1156, 1157], "try": [158, 162, 171, 173, 174, 177, 178, 345, 346, 347, 348, 358, 359, 367, 382, 747, 818, 1113], "infer": [158, 162, 349, 356, 360, 361, 365, 370, 401, 402, 404, 405, 406, 408, 411, 412, 416, 418, 422, 510, 613, 747, 784, 809, 951, 981, 984], "when": [158, 162, 172, 173, 177, 178, 179, 180, 181, 345, 346, 347, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 365, 367, 368, 370, 382, 423, 429, 460, 510, 523, 601, 604, 696, 699, 747, 758, 791, 812, 935, 936, 939, 941, 944, 946, 949, 1015, 1026, 1050, 1051, 1052, 1054, 1071, 1076, 1079, 1084, 1087, 1092, 1095, 1100, 1103, 1113, 1146, 1147], "global": [158, 162, 163, 164, 170, 177, 178, 179, 180, 181, 355, 356, 360, 361, 365, 423, 438, 439, 440, 460, 469, 470, 502, 503, 504, 747, 782, 783, 802, 805, 806, 807, 811, 812, 1033, 1034, 1037, 1148, 1149], "numpi": [158, 162, 163, 164, 172, 173, 177, 178, 346, 347, 354, 356, 360, 361, 362, 363, 365, 367, 370, 747, 816, 1071, 1072, 1075, 1099, 1113], "np": [158, 162, 358, 360, 361, 362, 363, 367, 368, 370, 1113], "py": [158, 162, 163, 346, 350, 351, 355, 356, 360, 361, 363, 365, 367, 369, 370, 1038, 1039, 1043, 1044, 1046], "noqa": [158, 162, 163, 404, 415, 423, 432, 435, 510, 523, 548, 551, 568, 571, 572, 575, 580, 688, 691, 704, 707, 720, 723, 724, 727, 733, 738, 865, 872, 951, 965, 968, 969, 972, 985, 988, 1071, 1076, 1079], "set_backend": [158, 162, 163, 170, 355, 356, 357, 360, 423, 444, 445, 460, 501, 747, 809, 1113], "ha": [158, 162, 163, 172, 173, 174, 177, 178, 346, 351, 352, 355, 356, 357, 360, 361, 365, 367, 369, 370, 381, 382, 404, 415, 460, 479, 510, 511, 514, 679, 682, 696, 699, 865, 874, 887, 890, 910, 911, 913, 914, 923, 925, 951, 965, 968, 991, 994, 1055, 1056, 1057, 1059, 1071, 1080, 1083, 1088, 1091, 1092, 1095, 1096, 1100, 1103], "jax": [158, 162, 163, 164, 173, 174, 346, 347, 356, 360, 361, 362, 363, 365, 367, 370, 382, 821, 833, 1055, 1056, 1057, 1059, 1113], "get_backend": [158, 355, 356], "specifi": [158, 163, 177, 178, 349, 354, 355, 360, 361, 362, 363, 365, 368, 369, 370, 404, 405, 407, 411, 413, 414, 417, 419, 420, 421, 423, 429, 431, 460, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 494, 498, 500, 503, 504, 505, 510, 700, 703, 747, 753, 765, 775, 776, 779, 786, 819, 865, 875, 877, 891, 893, 920, 922, 923, 925, 926, 928, 929, 931, 935, 936, 939, 941, 944, 946, 949, 951, 952, 955, 957, 960, 961, 964, 969, 972, 985, 988, 991, 994, 995, 998, 1007, 1010, 1015, 1020, 1022, 1023, 1029, 1030, 1031, 1032, 1050, 1051, 1052, 1055, 1056, 1057, 1059, 1060, 1061, 1064, 1071, 1072, 1075, 1088, 1091, 1096, 1099, 1104, 1105, 1108, 1109, 1112], "isn": [158, 163, 346, 368, 382], "associ": [158, 163, 346, 355, 357, 382, 510, 523, 679, 682, 865, 886, 895, 897, 904, 906, 932, 934], "retriev": [158, 163, 346, 747, 753], "i": [158, 163, 346, 348, 349, 365, 368, 370, 404, 405, 415, 510, 511, 514, 540, 543, 556, 559, 564, 567, 572, 575, 587, 605, 608, 609, 612, 621, 624, 677, 678, 684, 687, 696, 699, 700, 703, 747, 755, 756, 821, 824, 826, 829, 831, 834, 836, 838, 840, 842, 844, 865, 869, 871, 886, 887, 890, 895, 897, 904, 906, 911, 913, 914, 923, 925, 929, 931, 951, 995, 998, 1055, 1056, 1057, 1059, 1060, 1061, 1064, 1066, 1069, 1071, 1072, 1075, 1076, 1079, 1080, 1083, 1084, 1087, 1092, 1095, 1096, 1099, 1100, 1103], "e": [158, 163, 173, 174, 344, 346, 348, 349, 359, 368, 382, 403, 404, 415, 423, 428, 451, 460, 476, 510, 511, 514, 540, 543, 556, 559, 564, 567, 572, 575, 587, 597, 605, 608, 609, 612, 621, 624, 641, 644, 649, 652, 677, 678, 684, 687, 696, 699, 700, 703, 821, 824, 826, 829, 831, 834, 836, 838, 840, 842, 844, 865, 869, 871, 886, 887, 890, 895, 897, 904, 906, 911, 913, 914, 929, 931, 951, 995, 998, 1038, 1043, 1044, 1046, 1055, 1056, 1057, 1059, 1060, 1061, 1064, 1066, 1069, 1071, 1076, 1079, 1080, 1083, 1084, 1087, 1088, 1091, 1092, 1095, 1096, 1100, 1103], "one": [158, 163, 173, 174, 177, 178, 182, 189, 274, 275, 279, 282, 288, 290, 312, 313, 314, 315, 326, 327, 330, 331, 345, 346, 352, 355, 358, 359, 360, 362, 363, 364, 367, 368, 370, 382, 404, 405, 415, 423, 430, 432, 435, 460, 489, 490, 491, 492, 504, 527, 657, 747, 748, 750, 751, 752, 776, 780, 797, 800, 803, 804, 865, 887, 890, 891, 893, 901, 903, 907, 909, 926, 928, 929, 931, 951, 952, 956, 965, 968, 969, 972, 985, 988, 989, 991, 994, 1040, 1042, 1050, 1051, 1053, 1055, 1056, 1057, 1058, 1059, 1071, 1072, 1075, 1099, 1113], "torch": [158, 163, 170, 346, 350, 355, 356, 358, 359, 360, 361, 362, 363, 365, 367, 368, 369, 370, 382, 401, 402, 423, 444, 445, 460, 501, 747, 809, 951, 965, 968, 1113], "tensorflow": [158, 163, 170, 173, 174, 346, 347, 360, 361, 362, 363, 365, 370, 382, 1113], "mxnet": [158, 163, 173, 347, 360, 361, 362, 365, 370, 1113], "either": [158, 163, 170, 177, 178, 345, 346, 348, 351, 352, 355, 356, 359, 360, 361, 365, 367, 368, 382, 404, 410, 510, 523, 526, 540, 543, 600, 625, 628, 641, 644, 645, 648, 653, 656, 657, 660, 679, 682, 700, 703, 708, 711, 712, 715, 733, 747, 768, 793, 797, 798, 865, 887, 890, 1011, 1012, 1013, 1014, 1071, 1088, 1091, 1096, 1134, 1145, 1146, 1147], "doesn": [158, 163, 345, 348, 352, 360, 365, 382], "matter": [158, 163, 172, 352], "been": [158, 163, 346, 351, 355, 356, 359, 360, 361, 363, 365, 381, 382, 460, 479, 747, 769, 770, 771, 1038, 1039], "ivy_np": [158, 163], "ivy_jax": [158, 163], "subsequ": [158, 164, 345, 352, 354, 355, 358, 362, 363, 369], "call": [158, 164, 170, 173, 179, 180, 182, 348, 350, 351, 352, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 365, 367, 368, 369, 370, 382, 460, 504, 747, 802, 807, 818, 821, 828, 1015, 1016, 1021, 1025, 1026, 1134, 1145, 1146, 1147, 1150, 1154], "ndarrai": [158, 164, 358, 360, 361, 362, 363, 367, 404, 406, 416, 747, 816], "Or": [158, 164, 368], "jaxlib": [158, 164, 345, 360, 361, 363, 367], "xla_extens": [158, 164, 360, 361, 363, 367], "devicearrai": [158, 164, 367], "try_import_ivy_jax": 158, "warn": [158, 165, 166, 167, 168, 169], "try_import_ivy_mxnet": 158, "try_import_ivy_numpi": 158, "try_import_ivy_tf": 158, "try_import_ivy_torch": 158, "unset_backend": [158, 356], "unset": [158, 170, 356, 365, 367], "adjust": [158, 170, 1071, 1092, 1095, 1100, 1103], "previous": [158, 170, 345, 348, 354, 355, 365, 747, 758], "implement": [158, 170, 346, 347, 351, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 365, 367, 368, 369, 370, 381, 382, 423, 429, 451, 460, 505, 510, 511, 514, 515, 518, 519, 522, 528, 531, 532, 535, 536, 540, 543, 576, 579, 580, 583, 597, 601, 604, 641, 644, 645, 648, 649, 652, 653, 656, 679, 682, 696, 699, 700, 703, 712, 715, 716, 719, 733, 738, 865, 878, 880, 1055, 1056, 1057, 1059, 1060, 1061, 1064, 1066, 1069, 1071, 1076, 1079, 1080, 1083, 1084, 1087, 1113], "wa": [158, 170, 173, 177, 178, 352, 365, 367, 747, 818, 1015, 1028, 1071, 1076, 1079, 1080, 1083, 1084, 1087, 1088, 1091, 1092, 1095, 1096, 1100, 1103, 1104, 1105, 1108, 1109, 1112], "last": [158, 170, 174, 177, 178, 346, 352, 356, 382, 393, 398, 460, 479, 852, 862, 865, 869, 871, 875, 877, 891, 893, 923, 925, 926, 928, 935, 941, 944, 946, 949, 951, 969, 972, 985, 988, 990, 995, 998, 1060, 1061, 1064, 1066, 1069, 1104, 1105, 1108, 1109, 1112, 1134, 1144], "henc": [158, 170, 1055, 1056, 1057, 1059], "here": [158, 170, 345, 346, 347, 350, 352, 359, 363, 365, 366, 367, 368, 369, 370, 381, 382], "tensor": [158, 170, 172, 177, 178, 350, 355, 356, 358, 360, 361, 362, 363, 365, 367, 368, 369, 370, 382, 404, 413, 414, 423, 441, 510, 548, 551, 677, 678, 747, 800, 803, 804, 852, 860, 862, 865, 920, 922, 951, 965, 968, 981, 984, 990, 1038, 1039, 1050, 1053, 1113, 1134, 1142, 1144], "howev": [158, 170, 173, 345, 347, 351, 354, 355, 356, 358, 359, 360, 361, 362, 363, 367, 368, 369, 370, 382], "befor": [158, 170, 177, 178, 345, 346, 347, 351, 354, 358, 360, 361, 362, 365, 368, 382, 460, 504, 510, 743, 746, 852, 863, 864, 1011, 1012, 1013, 1015, 1027, 1055, 1056, 1057, 1059, 1071, 1088, 1091, 1096], "becom": [158, 170, 172, 174, 346, 352, 359, 365, 370, 382, 951, 952, 955], "swap": [158, 170, 951, 999, 1002], "python": [158, 170, 171, 172, 173, 345, 346, 348, 365, 367, 368, 382, 404, 405, 460, 499, 509, 510, 700, 703, 1113, 1119], "op": [158, 170, 350, 365, 382], "eagertensor": [158, 170], "def": [159, 347, 350, 352, 355, 359, 360, 361, 362, 363, 365, 367, 368, 369, 370, 424, 425, 426, 461, 468, 471, 822, 1113, 1126, 1129, 1132], "ml": [171, 173, 174, 344, 364, 365, 366, 368, 369, 370, 381, 1113, 1119], "explos": [171, 173, 1113], "A": [171, 172, 173, 174, 177, 178, 179, 180, 181, 348, 349, 354, 355, 359, 360, 361, 365, 368, 382, 404, 409, 416, 460, 469, 470, 504, 510, 692, 695, 747, 783, 815, 865, 874, 901, 903, 910, 911, 913, 914, 951, 990, 995, 998, 1015, 1016, 1018, 1020, 1022, 1023, 1024, 1025, 1026, 1029, 1030, 1031, 1032, 1071, 1072, 1075, 1099, 1104, 1105, 1108, 1109, 1112, 1113, 1156, 1157], "huge": [171, 173, 368, 1113], "number": [171, 172, 177, 178, 179, 180, 181, 182, 345, 352, 359, 361, 362, 365, 368, 370, 401, 402, 403, 404, 405, 406, 409, 413, 414, 415, 416, 423, 430, 442, 443, 446, 448, 449, 451, 460, 496, 497, 498, 510, 523, 540, 543, 572, 575, 587, 605, 608, 609, 612, 677, 678, 679, 682, 696, 699, 700, 703, 704, 707, 708, 711, 743, 746, 747, 748, 751, 774, 783, 784, 799, 817, 820, 852, 863, 865, 874, 878, 880, 895, 897, 910, 914, 926, 928, 951, 952, 955, 961, 964, 973, 976, 977, 980, 985, 988, 990, 995, 998, 1003, 1006, 1007, 1010, 1011, 1012, 1013, 1014, 1038, 1039, 1048, 1050, 1053, 1055, 1056, 1057, 1071, 1076, 1079, 1080, 1083, 1084, 1087, 1088, 1091, 1092, 1095, 1096, 1100, 1103, 1104, 1105, 1108, 1109, 1112, 1113, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1143, 1144, 1145], "tool": [171, 174, 346, 366, 370, 381, 382, 1113], "have": [171, 172, 173, 174, 177, 178, 345, 346, 347, 348, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 365, 366, 367, 368, 369, 370, 381, 382, 393, 396, 404, 405, 407, 408, 411, 412, 415, 417, 418, 419, 420, 421, 422, 423, 429, 430, 431, 443, 460, 505, 510, 511, 514, 515, 518, 519, 522, 523, 526, 528, 531, 532, 535, 536, 539, 540, 543, 544, 547, 548, 551, 552, 555, 556, 559, 560, 563, 564, 567, 568, 571, 572, 575, 576, 579, 580, 583, 584, 587, 589, 592, 597, 600, 601, 604, 605, 608, 609, 612, 613, 616, 617, 620, 621, 624, 625, 628, 629, 632, 633, 636, 637, 640, 641, 644, 645, 648, 649, 652, 653, 656, 657, 660, 661, 664, 665, 668, 669, 672, 673, 676, 679, 682, 684, 687, 688, 691, 696, 699, 700, 703, 704, 707, 708, 711, 712, 715, 716, 719, 720, 723, 724, 727, 728, 732, 733, 737, 738, 742, 743, 746, 747, 760, 762, 769, 770, 771, 773, 821, 833, 850, 852, 864, 865, 866, 868, 869, 871, 872, 875, 877, 878, 880, 881, 883, 884, 886, 887, 890, 895, 897, 898, 900, 901, 903, 904, 906, 907, 909, 911, 913, 914, 916, 917, 919, 920, 922, 923, 925, 926, 928, 929, 931, 935, 936, 939, 941, 944, 946, 949, 951, 952, 955, 957, 960, 965, 968, 969, 972, 973, 976, 977, 980, 985, 988, 991, 994, 995, 998, 999, 1002, 1038, 1040, 1041, 1049, 1050, 1051, 1052, 1053, 1055, 1056, 1057, 1059, 1060, 1061, 1064, 1066, 1069, 1071, 1076, 1079, 1080, 1083, 1084, 1087, 1088, 1091, 1092, 1095, 1096, 1100, 1103, 1104, 1105, 1108, 1109, 1112, 1113], "explod": [171, 172, 1113], "onto": [171, 172, 460, 489, 490, 1015, 1021, 1027, 1113], "scene": [171, 172, 349, 364, 366, 821, 824, 826, 829, 831, 834, 836, 838, 840, 842, 844, 1113], "b": [171, 174, 179, 180, 182, 187, 189, 206, 207, 208, 223, 225, 262, 274, 275, 278, 279, 282, 288, 290, 294, 295, 300, 301, 308, 309, 312, 313, 314, 315, 326, 327, 330, 331, 344, 349, 352, 355, 356, 359, 364, 365, 366, 368, 369, 370, 380, 423, 432, 434, 435, 436, 460, 482, 510, 523, 525, 527, 528, 531, 539, 544, 548, 551, 568, 571, 572, 574, 575, 580, 592, 605, 607, 609, 616, 617, 620, 657, 684, 687, 688, 691, 704, 707, 720, 723, 724, 727, 733, 734, 736, 738, 739, 741, 742, 747, 748, 750, 751, 752, 755, 756, 764, 765, 772, 775, 776, 778, 779, 780, 817, 852, 855, 858, 859, 864, 865, 866, 868, 869, 871, 872, 901, 903, 911, 913, 920, 922, 932, 934, 935, 936, 939, 951, 952, 954, 955, 956, 965, 968, 969, 972, 977, 980, 985, 987, 988, 989, 995, 998, 999, 1002, 1033, 1034, 1037, 1038, 1040, 1042, 1043, 1044, 1046, 1050, 1052, 1053, 1054, 1060, 1061, 1064, 1071, 1072, 1075, 1076, 1079, 1099, 1104, 1105, 1108, 1113, 1119], "why": [171, 173, 346, 359, 362, 363, 367, 1113], "unifi": [171, 173, 177, 178, 358, 365, 382, 460, 489, 490, 491, 492, 504, 1113], "should": [171, 173, 177, 178, 179, 180, 181, 342, 343, 345, 346, 347, 348, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 367, 368, 369, 401, 402, 404, 415, 419, 420, 423, 431, 460, 510, 511, 514, 515, 518, 519, 522, 523, 526, 528, 531, 532, 535, 536, 539, 540, 543, 544, 547, 548, 551, 552, 555, 556, 559, 560, 563, 564, 567, 568, 571, 572, 575, 576, 579, 580, 583, 584, 597, 600, 601, 604, 605, 621, 624, 625, 628, 629, 632, 633, 636, 641, 644, 645, 648, 653, 656, 657, 660, 661, 664, 665, 668, 669, 672, 673, 676, 679, 682, 688, 691, 696, 699, 700, 703, 708, 711, 712, 715, 716, 719, 720, 723, 724, 727, 728, 732, 733, 737, 738, 742, 743, 746, 747, 758, 791, 800, 821, 824, 826, 829, 831, 834, 836, 838, 840, 842, 844, 852, 864, 865, 866, 868, 869, 871, 872, 875, 877, 884, 886, 887, 890, 895, 897, 901, 903, 904, 906, 907, 909, 911, 913, 914, 920, 922, 923, 925, 926, 928, 929, 931, 951, 981, 984, 1038, 1049, 1050, 1051, 1052, 1055, 1056, 1057, 1059, 1071, 1072, 1075, 1076, 1079, 1080, 1083, 1088, 1091, 1092, 1095, 1096, 1099, 1100, 1103, 1113], "them": [171, 172, 173, 174, 354, 356, 358, 359, 365, 367, 368, 369, 382, 1113], "c": [171, 173, 174, 182, 288, 330, 331, 344, 349, 352, 355, 359, 364, 365, 366, 368, 382, 510, 688, 691, 747, 755, 756, 764, 817, 821, 823, 824, 826, 829, 831, 834, 836, 838, 840, 842, 844, 852, 858, 951, 995, 998, 1040, 1042, 1050, 1053, 1071, 1072, 1075, 1092, 1095, 1099, 1100, 1103, 1113, 1119], "standard": [171, 349, 350, 351, 353, 354, 358, 362, 363, 382, 404, 415, 423, 432, 435, 443, 510, 523, 528, 531, 548, 551, 568, 571, 572, 575, 580, 605, 688, 691, 704, 707, 720, 723, 724, 727, 733, 738, 865, 872, 951, 965, 968, 969, 972, 985, 988, 1033, 1034, 1037, 1038, 1043, 1055, 1056, 1057, 1060, 1061, 1064, 1071, 1076, 1079, 1092, 1095, 1100, 1103, 1104, 1105, 1108, 1113, 1119, 1148, 1149], "re": [171, 172, 173, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 367, 370, 382, 460, 504, 747, 769, 865, 920, 922, 951, 985, 988, 1050, 1054, 1113], "collabor": [171, 172, 173, 1113], "consortium": [171, 173, 1113, 1119], "data": [171, 173, 177, 178, 179, 180, 181, 349, 350, 351, 355, 357, 359, 361, 362, 363, 367, 404, 405, 406, 407, 408, 409, 410, 411, 412, 415, 416, 417, 418, 419, 420, 421, 422, 427, 428, 429, 431, 432, 435, 437, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 455, 459, 460, 462, 463, 464, 465, 466, 467, 472, 473, 474, 476, 510, 511, 514, 515, 518, 519, 522, 523, 526, 528, 531, 532, 535, 536, 539, 540, 543, 544, 547, 548, 551, 552, 555, 556, 559, 560, 563, 564, 567, 568, 571, 572, 575, 576, 579, 580, 583, 584, 587, 589, 592, 597, 600, 601, 604, 605, 608, 609, 612, 613, 616, 617, 620, 621, 624, 625, 628, 629, 632, 633, 636, 637, 640, 641, 644, 645, 648, 653, 656, 657, 660, 661, 664, 665, 668, 669, 672, 673, 676, 679, 682, 688, 691, 696, 699, 700, 703, 708, 711, 712, 715, 716, 719, 720, 723, 724, 727, 728, 732, 733, 737, 738, 742, 743, 746, 747, 755, 756, 793, 794, 796, 813, 821, 833, 850, 852, 861, 865, 866, 868, 869, 871, 872, 875, 877, 878, 880, 881, 883, 884, 886, 887, 890, 895, 897, 898, 900, 901, 903, 904, 906, 907, 909, 911, 913, 914, 920, 922, 923, 925, 926, 928, 929, 931, 951, 965, 968, 969, 972, 973, 976, 981, 984, 985, 988, 991, 994, 995, 998, 1038, 1049, 1050, 1051, 1052, 1053, 1060, 1061, 1064, 1071, 1076, 1079, 1080, 1083, 1084, 1087, 1088, 1091, 1092, 1095, 1096, 1100, 1103, 1104, 1105, 1108, 1109, 1112, 1113, 1119, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145], "api": [171, 172, 345, 346, 349, 351, 352, 354, 355, 357, 358, 360, 361, 362, 363, 364, 366, 368, 382, 404, 415, 423, 432, 435, 510, 523, 528, 531, 548, 551, 568, 571, 572, 575, 580, 605, 688, 691, 704, 707, 720, 723, 724, 727, 733, 738, 865, 872, 951, 965, 968, 969, 972, 985, 988, 1055, 1056, 1057, 1060, 1061, 1064, 1071, 1076, 1079, 1104, 1105, 1108, 1113, 1119], "open": [172, 173, 174, 344, 345, 348, 351, 381, 404, 405, 1038, 1040, 1041, 1044, 1046, 1113], "project": [172, 173, 174, 345, 346, 348, 350, 356, 367, 369, 381, 382, 1038, 1039, 1043, 1044, 1046], "grown": 172, "consider": [172, 352, 363], "recent": [172, 173, 345, 346], "year": [172, 174, 382, 1113], "especi": [172, 345], "deep": [172, 177, 178, 344, 346, 347, 364, 368, 1113], "learn": [172, 173, 345, 347, 349, 355, 364, 370, 381, 510, 613, 821, 824, 826, 829, 831, 834, 836, 838, 840, 842, 844, 1011, 1012, 1013, 1014, 1113, 1150, 1151, 1152, 1153, 1154, 1155], "can": [172, 173, 174, 344, 345, 346, 349, 350, 351, 352, 353, 354, 355, 356, 359, 360, 361, 362, 363, 364, 365, 367, 368, 369, 370, 381, 382, 404, 406, 416, 423, 432, 435, 460, 502, 503, 504, 865, 884, 951, 981, 984, 1038, 1040, 1041, 1113, 1119], "seen": [172, 173, 352, 367, 368], "rapidli": 172, "increas": [172, 460, 484, 488, 492, 951, 961, 964, 1007, 1010, 1015, 1027], "github": [172, 346, 347, 351, 354], "repo": [172, 173, 174, 345, 346, 353, 365, 367, 368, 369, 370, 381, 1113, 1119], "term": [172, 346, 359, 852, 862, 1134, 1144], "time": [172, 173, 174, 345, 346, 347, 354, 355, 359, 360, 363, 365, 368, 370, 382, 821, 824, 826, 834, 836, 852, 862, 951, 1003, 1006, 1011, 1012, 1013, 1014, 1050, 1051, 1052, 1055, 1056, 1057, 1134, 1145, 1146, 1147], "These": [172, 173, 174, 346, 351, 352, 354, 355, 359, 360, 362, 363, 365, 366, 368, 369, 370, 382, 865, 878, 880, 1113, 1119], "written": [172, 345, 350, 351, 358, 362, 363, 365, 367, 370, 382], "mani": [172, 173, 174, 177, 178, 345, 346, 347, 351, 352, 355, 357, 358, 359, 360, 361, 362, 363, 365, 367, 368, 382, 951, 990], "differ": [172, 173, 174, 177, 178, 179, 180, 181, 345, 346, 349, 350, 351, 352, 354, 355, 358, 359, 361, 362, 363, 365, 366, 367, 368, 369, 370, 382, 423, 443, 460, 481, 482, 485, 486, 510, 523, 679, 682, 728, 732, 852, 861, 951, 995, 998, 1071, 1088, 1091, 1096, 1113], "while": [172, 173, 177, 178, 179, 180, 181, 345, 346, 352, 356, 362, 369, 370, 382, 510, 665, 668, 669, 672, 1055, 1056, 1071, 1080, 1083], "wonder": [172, 174, 367], "thing": [172, 173, 174, 345, 346, 347, 356, 367, 368], "research": [172, 381], "develop": [172, 173, 174, 344, 345, 346, 347, 381, 382, 1113], "consid": [172, 173, 177, 178, 350, 355, 366, 367, 368, 510, 665, 668, 669, 672, 1055, 1056, 1057, 1059], "speed": 172, "evolv": 172, "sharabl": 172, "code": [172, 173, 174, 177, 178, 179, 180, 181, 345, 346, 347, 348, 349, 351, 352, 355, 356, 357, 358, 359, 362, 363, 364, 365, 366, 367, 368, 369, 370, 380, 382, 393, 395, 396, 397, 398, 399, 400, 460, 482, 505, 510, 568, 571, 724, 727, 852, 858, 859, 1055, 1056, 1057, 1060, 1061, 1064, 1071, 1072, 1075, 1099, 1113, 1119], "significantli": 172, "hinder": [172, 363], "librari": [172, 173, 174, 365, 370, 380, 382, 460, 505, 510, 601, 604, 665, 668, 669, 672, 865, 878, 880, 1055, 1056, 1057, 1059, 1071, 1076, 1079, 1080, 1083, 1084, 1087, 1113], "outdat": 172, "month": 172, "rigor": 172, "maintain": [172, 346, 1060, 1061, 1064, 1066, 1069], "against": [172, 177, 178, 354, 382, 423, 430, 865, 886, 887, 890, 891, 893, 895, 897, 904, 906, 1050, 1051], "newest": 172, "version": [172, 173, 174, 345, 351, 365, 367, 865, 878, 880, 1113], "For": [172, 173, 174, 345, 346, 347, 348, 349, 350, 351, 352, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 365, 367, 368, 369, 370, 381, 382, 404, 405, 415, 510, 511, 514, 515, 518, 519, 522, 523, 526, 528, 531, 532, 535, 536, 540, 543, 572, 575, 576, 579, 580, 583, 597, 600, 601, 604, 605, 641, 644, 645, 648, 653, 656, 657, 660, 679, 682, 696, 699, 700, 703, 704, 707, 712, 715, 716, 719, 720, 723, 733, 738, 743, 746, 821, 833, 850, 865, 914, 923, 925, 951, 952, 955, 995, 998, 1055, 1056, 1057, 1059, 1071, 1076, 1079, 1084, 1087, 1096, 1123, 1124], "softwar": [172, 173, 345, 346], "pipelin": [172, 358, 370], "where": [172, 173, 174, 177, 178, 179, 180, 344, 345, 346, 347, 348, 351, 355, 356, 358, 359, 360, 361, 362, 365, 368, 369, 370, 382, 404, 411, 412, 415, 510, 540, 543, 597, 649, 652, 679, 682, 696, 699, 747, 787, 791, 800, 865, 878, 880, 886, 895, 897, 904, 906, 907, 909, 914, 916, 917, 919, 923, 925, 926, 928, 951, 952, 955, 961, 964, 965, 968, 973, 976, 995, 998, 1007, 1010, 1015, 1016, 1026, 1038, 1039, 1050, 1053, 1071, 1092, 1095, 1100, 1103, 1104, 1105, 1108, 1109, 1112, 1113], "rapid": [172, 173, 345], "prototyp": 172, "vital": [172, 370], "signific": [172, 173, 382], "bottleneck": 172, "new": [172, 173, 174, 177, 178, 344, 345, 346, 347, 348, 349, 350, 351, 352, 354, 357, 359, 360, 362, 364, 367, 370, 381, 404, 407, 410, 411, 412, 417, 418, 421, 422, 423, 455, 510, 539, 544, 547, 649, 652, 692, 695, 737, 742, 747, 769, 770, 771, 774, 775, 776, 779, 803, 804, 805, 806, 811, 812, 821, 824, 826, 829, 831, 834, 836, 838, 840, 842, 844, 951, 965, 968, 981, 984, 995, 998, 1015, 1020, 1031, 1032, 1033, 1034, 1037, 1113, 1123, 1124, 1134, 1144, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155], "futur": [172, 174, 345, 346, 367, 382, 865, 878, 880], "avail": [172, 177, 178, 345, 346, 351, 361, 382, 460, 479, 495, 496, 497, 507, 747, 770], "specif": [172, 177, 178, 347, 355, 358, 359, 360, 361, 362, 363, 365, 366, 367, 369, 370, 381, 382, 423, 451, 460, 502, 505, 510, 665, 668, 669, 672, 747, 769, 770, 771, 798, 865, 878, 880, 920, 922, 951, 995, 998, 1011, 1012, 1013, 1014, 1038, 1039, 1071, 1076, 1079, 1080, 1083, 1084, 1087, 1113, 1116, 1118, 1119, 1146, 1147], "quickli": [172, 174, 345, 346, 368, 369], "obsolet": [172, 174], "user": [172, 173, 345, 346, 348, 349, 354, 356, 359, 362, 364, 382, 1134, 1145, 1146, 1147], "constantli": 172, "invent": 172, "wheel": 172, "desir": [172, 177, 178, 423, 429, 432, 435, 460, 505, 747, 787, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145], "provid": [172, 177, 178, 345, 346, 351, 352, 355, 358, 359, 360, 361, 362, 363, 365, 369, 381, 382, 401, 402, 404, 415, 423, 438, 439, 440, 447, 451, 459, 460, 479, 747, 768, 800, 804, 821, 824, 826, 829, 831, 834, 836, 838, 840, 842, 844, 865, 926, 928, 951, 969, 972, 995, 998, 1050, 1051, 1071, 1092, 1095, 1100, 1103, 1104, 1105, 1108, 1109, 1112, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1143, 1144, 1145, 1150, 1151, 1152, 1153, 1154, 1155], "simultan": [172, 174], "modern": [172, 173], "simpl": [172, 345, 346, 350, 351, 352, 354, 355, 358, 359, 360, 361, 362, 365, 367, 369, 370, 382, 747, 772], "scalabl": [172, 365], "must": [172, 174, 177, 178, 179, 180, 181, 345, 346, 347, 350, 351, 352, 355, 358, 359, 360, 361, 363, 365, 369, 370, 393, 396, 404, 405, 407, 408, 409, 411, 412, 415, 417, 418, 419, 420, 421, 422, 423, 429, 430, 431, 460, 489, 490, 491, 492, 504, 505, 510, 511, 514, 515, 518, 519, 522, 523, 526, 528, 531, 532, 535, 536, 539, 540, 543, 544, 547, 548, 551, 552, 555, 556, 559, 560, 563, 564, 567, 568, 571, 572, 575, 576, 579, 580, 583, 584, 587, 589, 592, 597, 600, 601, 604, 605, 608, 609, 612, 613, 616, 617, 620, 621, 624, 625, 628, 629, 632, 633, 636, 637, 640, 641, 644, 645, 648, 649, 652, 653, 656, 657, 660, 661, 664, 665, 668, 669, 672, 673, 676, 677, 678, 679, 682, 684, 687, 688, 691, 696, 699, 700, 703, 704, 707, 708, 711, 712, 715, 716, 719, 720, 723, 724, 727, 728, 732, 733, 737, 738, 742, 743, 746, 747, 760, 762, 773, 804, 865, 866, 868, 869, 871, 872, 875, 877, 878, 880, 881, 883, 884, 886, 887, 890, 895, 897, 898, 900, 901, 903, 904, 906, 907, 909, 911, 913, 914, 920, 922, 923, 925, 926, 928, 929, 931, 935, 936, 939, 941, 944, 946, 949, 951, 952, 955, 957, 960, 965, 968, 969, 972, 973, 976, 977, 980, 985, 988, 991, 994, 995, 998, 999, 1002, 1038, 1040, 1041, 1048, 1050, 1051, 1052, 1053, 1055, 1056, 1057, 1059, 1060, 1061, 1064, 1066, 1069, 1071, 1076, 1079, 1080, 1083, 1084, 1087, 1088, 1091, 1092, 1095, 1096, 1100, 1103, 1104, 1105, 1108, 1109, 1112, 1150, 1154], "determin": [172, 177, 178, 351, 355, 359, 360, 361, 423, 432, 435, 437, 442, 447, 448, 449, 459, 460, 495, 496, 497, 507, 510, 515, 518, 519, 522, 523, 526, 528, 531, 532, 535, 536, 539, 540, 543, 544, 547, 548, 551, 556, 559, 560, 563, 564, 567, 568, 571, 576, 579, 580, 583, 584, 597, 600, 601, 604, 621, 624, 625, 628, 629, 632, 641, 644, 645, 648, 653, 656, 657, 660, 673, 676, 679, 682, 696, 699, 700, 703, 712, 715, 716, 719, 720, 723, 733, 737, 738, 742, 747, 748, 751, 755, 756, 786, 788, 792, 793, 794, 795, 796, 813, 820, 821, 833, 852, 863, 865, 866, 868, 869, 871, 872, 874, 875, 877, 884, 886, 887, 890, 895, 897, 901, 903, 904, 906, 910, 911, 913, 923, 925, 926, 928, 929, 931, 1011, 1012, 1013, 1014, 1055, 1056, 1057, 1059, 1104, 1105, 1108, 1109, 1112], "exactli": [172, 174, 352, 359, 361, 1113, 1119], "common": [172, 177, 178, 346, 347, 352, 355, 357, 359, 361, 382], "ground": [172, 354], "li": 172, "between": [172, 177, 178, 179, 180, 181, 352, 354, 355, 358, 359, 363, 364, 366, 367, 368, 370, 381, 404, 405, 423, 443, 510, 540, 543, 696, 699, 935, 936, 939, 941, 944, 946, 949, 951, 965, 968, 995, 998, 1015, 1021, 1038, 1040, 1041, 1055, 1056, 1057, 1059, 1113, 1150, 1152], "find": [172, 177, 178, 345, 346, 365, 368, 1055, 1056, 1057, 1059, 1113], "exist": [172, 173, 177, 178, 179, 180, 345, 347, 348, 351, 352, 353, 354, 355, 356, 357, 362, 365, 382, 747, 768, 1150, 1154], "essenti": [172, 173, 347, 352, 355, 361], "order": [172, 177, 178, 179, 180, 181, 345, 346, 348, 351, 352, 356, 358, 359, 360, 361, 363, 367, 368, 370, 382, 510, 540, 543, 821, 824, 826, 829, 831, 834, 836, 838, 840, 842, 844, 865, 878, 880, 891, 893, 914, 916, 917, 919, 929, 931, 951, 969, 972, 1011, 1012, 1013, 1050, 1053, 1055, 1056, 1057, 1059, 1060, 1061, 1064, 1066, 1069, 1156, 1157], "design": [172, 173, 349, 362, 365, 367, 382], "univers": 172, "abstract": [172, 359, 369, 382, 460, 475, 1150, 1154], "In": [172, 174, 345, 346, 350, 351, 352, 355, 356, 359, 360, 361, 362, 363, 365, 367, 368, 369, 370, 381, 382, 460, 499, 505, 506, 509, 510, 523, 679, 682, 700, 703, 747, 753, 791, 951, 981, 984, 1038, 1044, 1046, 1113], "languag": [172, 174, 365], "first": [172, 173, 345, 346, 348, 352, 355, 358, 359, 363, 365, 367, 368, 370, 401, 402, 404, 413, 414, 423, 450, 455, 460, 479, 491, 510, 523, 526, 548, 551, 556, 559, 560, 563, 564, 567, 568, 571, 587, 589, 592, 600, 608, 609, 612, 616, 617, 620, 633, 636, 637, 640, 657, 660, 661, 664, 669, 672, 673, 676, 679, 682, 688, 691, 696, 699, 728, 732, 747, 755, 821, 828, 865, 869, 871, 875, 877, 878, 880, 887, 890, 901, 903, 907, 909, 914, 920, 922, 926, 928, 951, 957, 960, 985, 988, 995, 998, 999, 1002, 1011, 1012, 1013, 1014, 1015, 1016, 1025, 1026, 1038, 1049, 1050, 1051, 1052, 1055, 1056, 1057, 1134, 1145, 1146, 1147, 1150, 1154], "see": [172, 344, 345, 346, 347, 353, 355, 359, 361, 363, 367, 368, 381, 382, 404, 405, 410, 413, 414, 423, 431, 451, 510, 523, 526, 548, 551, 556, 559, 560, 563, 564, 567, 568, 571, 584, 600, 601, 604, 633, 636, 657, 660, 669, 672, 673, 676, 679, 682, 688, 691, 696, 699, 700, 703, 728, 732, 865, 886, 895, 897, 904, 906, 911, 913, 926, 928, 929, 931, 1050, 1052, 1055, 1056, 1057, 1059, 1071, 1076, 1079, 1080, 1083, 1084, 1087, 1088, 1091, 1092, 1095, 1096, 1100, 1103, 1104, 1105, 1108, 1109, 1112, 1113], "clear": [172, 173, 174, 346, 347, 352, 354, 360, 361, 365, 367, 460, 478], "front": [172, 364, 365, 368, 1113, 1119], "runner": 172, "look": [172, 345, 346, 348, 350, 352, 355, 356, 359, 360, 361, 363, 365, 367, 369, 370, 1113], "littl": [172, 367], "deeper": [172, 346, 349, 364, 460, 484, 488, 492, 1015, 1026, 1027], "follow": [172, 173, 177, 178, 345, 346, 347, 348, 350, 351, 352, 354, 356, 358, 359, 360, 361, 362, 364, 365, 367, 368, 369, 370, 382, 423, 446, 460, 504, 510, 700, 703, 747, 789, 790, 791, 811, 812, 821, 824, 826, 829, 831, 834, 836, 838, 840, 842, 844, 852, 863, 864, 865, 907, 909, 929, 931, 1015, 1021, 1027, 1055, 1056, 1057, 1059, 1113, 1134, 1144, 1150, 1154], "core": [172, 345, 347, 361, 365, 370, 460, 496, 1113], "principl": 172, "oper": [172, 177, 178, 179, 180, 182, 345, 347, 351, 352, 355, 358, 359, 361, 362, 368, 369, 404, 413, 414, 423, 451, 510, 523, 564, 567, 568, 571, 592, 616, 617, 620, 684, 687, 688, 691, 700, 703, 724, 727, 747, 757, 769, 770, 771, 813, 821, 824, 826, 829, 831, 834, 836, 838, 840, 842, 844, 852, 853, 854, 855, 856, 857, 858, 859, 861], "expos": [172, 365, 369, 747, 763], "almost": [172, 346, 359, 366, 368], "ident": [172, 174, 177, 178, 355, 357, 359, 367, 368, 382, 460, 494, 1015, 1028, 1113], "uniqu": [172, 355, 359, 382, 460, 469, 470, 1011, 1012, 1013, 1014, 1015, 1021, 1055, 1056, 1057, 1058, 1059], "syntax": [172, 173], "There": [172, 345, 346, 352, 355, 358, 359, 360, 365, 368, 382], "onli": [172, 177, 178, 344, 345, 346, 350, 352, 354, 355, 356, 358, 359, 360, 361, 362, 363, 365, 367, 368, 369, 370, 380, 382, 460, 500, 510, 665, 668, 669, 672, 865, 887, 890, 907, 909, 951, 969, 972, 1015, 1016, 1017, 1025, 1026, 1050, 1051, 1052, 1071, 1080, 1083, 1113, 1150, 1151, 1152, 1153, 1154, 1155], "wai": [172, 173, 345, 356, 362, 367, 368, 369, 370, 382], "unsurprisingli": [172, 352], "fundament": [172, 359, 365], "consist": [172, 177, 178, 358, 362, 460, 492, 865, 878, 880, 1071, 1072, 1075, 1099, 1146, 1147], "each": [172, 173, 174, 177, 178, 179, 180, 181, 182, 346, 347, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 362, 363, 364, 365, 367, 368, 370, 381, 382, 393, 396, 397, 399, 404, 415, 423, 430, 460, 469, 470, 481, 482, 483, 484, 485, 486, 487, 491, 504, 510, 511, 514, 515, 518, 519, 522, 523, 526, 528, 531, 532, 535, 536, 539, 540, 543, 544, 547, 548, 551, 552, 555, 556, 559, 560, 563, 564, 567, 568, 571, 572, 575, 576, 579, 580, 583, 584, 587, 589, 592, 597, 600, 601, 604, 605, 608, 609, 612, 613, 616, 617, 620, 621, 624, 625, 628, 629, 632, 633, 636, 637, 640, 641, 644, 645, 648, 649, 652, 653, 656, 657, 660, 661, 664, 665, 668, 669, 672, 673, 676, 679, 682, 684, 687, 688, 691, 692, 695, 696, 699, 700, 703, 704, 707, 708, 711, 712, 715, 716, 719, 720, 723, 724, 727, 728, 732, 733, 737, 738, 742, 743, 746, 747, 748, 751, 821, 824, 826, 829, 831, 834, 836, 838, 840, 842, 844, 852, 853, 854, 855, 856, 857, 858, 859, 860, 865, 866, 868, 869, 871, 872, 878, 880, 886, 887, 890, 895, 897, 898, 900, 904, 906, 911, 913, 914, 951, 961, 964, 977, 980, 985, 988, 990, 995, 998, 1003, 1006, 1007, 1010, 1015, 1021, 1028, 1038, 1039, 1050, 1053, 1055, 1056, 1057, 1071, 1072, 1075, 1099, 1113, 1119, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1145, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157], "veri": [172, 173, 345, 346, 350, 352, 354, 355, 359, 361, 362, 363, 366, 368, 369, 370, 382, 1113], "similar": [172, 350, 359, 360, 361, 368, 382, 510, 700, 703, 852, 863, 1134, 1145], "convent": [172, 381, 865, 887, 890, 1071, 1072, 1075, 1099], "those": [172, 177, 178, 345, 346, 347, 359, 365, 370, 404, 405, 821, 850, 865, 907, 909, 914, 951, 952, 955], "introduc": [172, 359, 368, 951, 985, 988, 1055, 1056], "2006": 172, "therefor": [172, 346, 350, 351, 352, 353, 354, 355, 358, 359, 360, 361, 362, 363, 365, 367, 369, 382, 423, 432, 435, 510, 523, 528, 531, 572, 575, 605, 688, 691, 720, 723, 724, 727, 733, 747, 775, 852, 855, 864, 951, 985, 988, 1033, 1034, 1037, 1071, 1076, 1079, 1104, 1105, 1108], "present": [172, 177, 178, 346, 353, 359, 360, 361, 362, 363, 365], "itself": [172, 345, 346, 359, 362, 363, 369, 381, 382, 747, 753, 1015, 1027], "cut": 172, "cloth": 172, "adher": [172, 173, 351, 353, 365, 370], "semant": [172, 365, 370, 510, 700, 703], "up": [172, 173, 174, 344, 346, 347, 348, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 365, 366, 367, 368, 369, 370, 381, 382], "hopefulli": [172, 173, 174, 345, 346, 347, 348, 349, 350, 351, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 365, 367, 368, 369, 370, 381], "paint": [172, 365], "pictur": [172, 365], "how": [172, 174, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 366, 367, 368, 369, 370, 381, 382, 1113, 1119, 1134, 1145, 1146, 1147], "pleas": [172, 173, 174, 345, 346, 347, 348, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 365, 367, 368, 369, 370, 381, 1113], "discuss": [172, 173, 174, 344, 345, 346, 347, 348, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 365, 367, 368, 369, 370, 381, 382, 1113], "faq": [172, 173, 174, 365, 367, 368, 369, 370, 381], "reach": [172, 173, 174, 345, 346, 347, 348, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 365, 367, 368, 369, 370, 381, 460, 484, 488, 492, 1015, 1027], "discord": [172, 173, 174, 345, 346, 347, 348, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 365, 367, 368, 369, 370, 381, 1113], "you": [172, 173, 174, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 367, 368, 369, 370, 381, 382, 1113, 1119], "question": [172, 173, 174, 345, 346, 352, 354, 365, 367, 368, 369, 370, 381, 382, 1113], "central": 173, "goal": [173, 347], "being": [173, 174, 177, 178, 345, 346, 352, 354, 357, 358, 359, 360, 361, 362, 363, 365, 368, 381, 382, 404, 405, 747, 802, 807, 1055, 1058, 1113], "would": [173, 345, 346, 348, 349, 351, 352, 354, 356, 357, 358, 359, 362, 363, 364, 365, 367, 369, 370, 382, 393, 398, 460, 505, 1113], "entir": [173, 174, 177, 178, 346, 352, 353, 354, 358, 359, 362, 367, 368, 369, 370, 382, 460, 504, 1071, 1076, 1079, 1080, 1083, 1084, 1087, 1088, 1091, 1092, 1095, 1096, 1100, 1103, 1104, 1105, 1108, 1109, 1112, 1134, 1143], "forgiven": 173, "rais": [173, 177, 178, 346, 362, 365, 367, 423, 431, 510, 597, 696, 699, 747, 757, 782, 791, 805, 812, 818, 865, 887, 890, 894, 926, 928, 951, 991, 994, 995, 998, 1050, 1053, 1071, 1076, 1079, 1084, 1087, 1104, 1105, 1108, 1109, 1112, 1146, 1147, 1150, 1154], "eyebrow": 173, "somehow": 173, "pytorch": [173, 174, 347, 355, 360, 361, 362, 363, 365, 367, 370, 382, 821, 824, 826, 829, 831, 834, 836, 838, 840, 842, 844, 1113, 1150, 1151, 1152, 1153, 1154, 1155], "other": [173, 177, 178, 179, 180, 182, 345, 346, 350, 351, 352, 354, 355, 358, 359, 362, 365, 367, 369, 370, 380, 381, 382, 401, 402, 404, 405, 510, 601, 604, 747, 748, 751, 753, 821, 828, 1038, 1044, 1046, 1055, 1058, 1071, 1092, 1095, 1100, 1103, 1113], "strong": [173, 382], "industri": 173, "back": [173, 358, 364, 365, 367, 382, 1113, 1119, 1146, 1147, 1150, 1154], "momentum": 173, "won": [173, 174, 346, 370], "ad": [173, 342, 343, 345, 346, 347, 350, 351, 352, 354, 355, 357, 358, 359, 360, 362, 363, 365, 369, 382, 747, 811, 812, 865, 878, 880, 951, 965, 968, 1156, 1157], "just": [173, 174, 345, 346, 351, 352, 354, 355, 362, 365, 367, 368, 382, 1071, 1072, 1075, 1099, 1134, 1143], "make": [173, 174, 345, 346, 347, 350, 351, 352, 353, 354, 355, 358, 359, 360, 361, 362, 363, 365, 367, 368, 370, 460], "problem": [173, 346, 358, 367], "even": [173, 174, 345, 346, 351, 355, 360, 361, 363, 367, 368, 369, 370, 382, 510, 696, 699, 704, 707], "wors": 173, "rather": [173, 177, 178, 350, 351, 354, 359, 370, 382, 404, 405, 460, 504, 747, 793, 794, 796, 821, 833], "funni": 173, "comic": 173, "strip": 173, "easi": [173, 345, 346, 355, 359], "feasibl": 173, "space": [173, 404, 405, 413, 414, 747, 774], "unlik": [173, 352, 359, 460], "charger": 173, "charact": 173, "encod": [173, 368, 747, 774], "instant": [173, 1113], "messag": [173, 346, 365, 367, 1159, 1160], "much": [173, 346, 350, 358, 359, 362, 365, 367, 368], "doe": [173, 177, 178, 346, 348, 349, 350, 351, 352, 354, 355, 356, 360, 362, 363, 365, 367, 368, 382, 510, 568, 571, 747, 791, 951, 990], "mandat": [173, 354, 362], "adopt": [173, 346, 358], "continu": [173, 174, 353, 354, 382], "own": [173, 174, 345, 351, 365, 382], "signatur": [173, 350, 351, 352, 359, 360, 361, 362, 363, 423, 432, 435, 510, 528, 531, 568, 571, 572, 575, 580, 605, 688, 691, 720, 723, 724, 727, 951, 965, 968, 985, 988, 1055, 1056, 1057, 1060, 1061, 1064, 1071, 1076, 1079], "replac": [173, 177, 178, 346, 348, 352, 354, 357, 359, 360, 361, 365, 367, 370, 382, 747, 803, 804, 951, 952, 955, 1038, 1039], "your": [173, 174, 344, 345, 347, 348, 350, 351, 368, 369, 382, 1113], "10": [173, 175, 176, 177, 178, 179, 180, 181, 182, 232, 284, 288, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 345, 348, 352, 359, 365, 367, 368, 404, 411, 414, 460, 510, 548, 551, 552, 555, 580, 592, 616, 617, 620, 645, 648, 720, 723, 747, 765, 775, 802, 807, 821, 834, 835, 836, 837, 852, 858, 865, 872, 875, 877, 901, 903, 920, 922, 951, 969, 972, 977, 980, 990, 1033, 1034, 1037, 1038, 1039, 1040, 1041, 1042, 1050, 1053, 1055, 1056, 1071, 1072, 1075, 1076, 1079, 1099, 1150, 1152], "100": [173, 174, 182, 288, 330, 331, 368, 369, 370, 382, 510, 720, 723, 1040, 1042, 1113], "despit": [173, 359, 361], "distinct": [173, 351, 359, 362, 364, 1055, 1056, 1057, 1059, 1113], "still": [173, 177, 178, 351, 354, 360, 367, 369, 382, 1113], "believ": [173, 346], "share": [173, 177, 178, 352, 354, 355, 356, 359, 365, 423, 455], "bring": [173, 365, 366], "benefit": [173, 174, 345, 346, 358, 359, 362, 367, 368, 382], "unrel": [173, 346], "what": [173, 174, 346, 349, 351, 352, 357, 359, 363, 364, 365, 367, 368, 369, 370, 381, 382, 1113], "again": [173, 174, 346, 350, 352, 359, 362, 368, 370, 382], "contrari": 173, "bumpi": 173, "road": 173, "allud": [173, 368], "most": [173, 177, 178, 345, 346, 350, 354, 355, 358, 359, 360, 361, 362, 363, 365, 367, 368, 369, 382, 865, 878, 880], "technolog": 173, "sector": [173, 510, 518, 519, 522, 532, 535, 539, 544, 547, 579, 583, 737, 742], "full": [173, 174, 179, 180, 346, 351, 360, 363, 365, 382, 404, 423, 443, 510, 592, 616, 617, 620, 852, 858, 865, 907, 909, 911, 913, 914, 1033, 1034, 1037], "success": 173, "reason": [173, 346, 350, 352, 355, 358, 359, 360, 362, 365, 367, 510, 700, 703], "build": [173, 344, 345, 355, 364, 366, 369, 370, 382, 1055, 1056, 1057, 1059, 1113, 1134, 1145, 1146, 1147], "custom": [173, 369], "comput": [173, 174, 177, 178, 345, 355, 359, 365, 368, 382, 460, 504, 510, 523, 548, 551, 560, 563, 568, 571, 589, 592, 593, 596, 613, 616, 617, 620, 633, 636, 637, 640, 661, 664, 665, 668, 669, 672, 673, 676, 679, 682, 684, 687, 688, 691, 747, 759, 760, 762, 765, 766, 821, 823, 824, 826, 828, 829, 831, 834, 836, 838, 840, 842, 844, 847, 849, 852, 853, 854, 855, 856, 857, 858, 859, 861, 863, 865, 866, 868, 869, 871, 874, 878, 880, 881, 883, 884, 887, 890, 891, 893, 907, 909, 910, 911, 913, 914, 926, 928, 929, 931, 935, 936, 939, 941, 944, 946, 949, 1015, 1021, 1055, 1056, 1057, 1059, 1071, 1072, 1075, 1076, 1079, 1080, 1083, 1084, 1087, 1088, 1091, 1092, 1095, 1096, 1099, 1100, 1103], "thank": [173, 368], "interoper": 173, "compon": [173, 365], "bio": [173, 345], "hardwar": [173, 345], "initi": [173, 177, 178, 179, 180, 181, 346, 356, 360, 361, 460, 852, 862, 1127, 1128, 1130, 1131, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1143, 1144, 1145, 1146, 1147, 1150, 1154], "pcie": 173, "interfac": [173, 370, 382], "motherboard": 173, "raid": 173, "storag": [173, 368], "virtual": [173, 346, 348], "bluetooth": 173, "wireless": 173, "exchang": 173, "btx": 173, "factor": [173, 460, 469, 502, 503, 504, 821, 823, 824, 826, 834, 836, 838, 840, 852, 853, 854, 855, 856, 857, 858, 859, 865, 866, 868, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1150, 1151, 1152, 1153], "sata": 173, "connect": [173, 345, 369, 370, 1134, 1144, 1145], "host": [173, 382], "bu": 173, "adapt": [173, 821, 838, 840, 1150, 1153], "html": [173, 348, 351, 423, 432, 435, 510, 528, 531, 568, 571, 572, 575, 580, 605, 688, 691, 720, 723, 724, 727, 951, 965, 968, 985, 988, 1055, 1056, 1057, 1060, 1061, 1064, 1071, 1076, 1079], "enabl": [173, 177, 178, 179, 180, 181, 345, 346, 354, 355, 358, 359, 362, 364, 365, 366, 368, 370, 382], "anyon": [173, 344, 382], "websit": 173, "tcp": 173, "ip": 173, "node": [173, 177, 178, 359, 1015, 1016, 1025, 1026], "commun": [173, 344, 346, 347, 382, 1113, 1119], "network": [173, 355, 359, 365, 369, 381, 852, 861, 1113, 1120, 1134, 1146, 1147], "smtp": 173, "possibl": [173, 344, 345, 346, 347, 351, 352, 354, 359, 360, 362, 365, 368, 381, 382, 747, 797, 815, 1071, 1076, 1079, 1084, 1087], "send": 173, "gmail": 173, "outlook": 173, "pop": 173, "email": 173, "ieee": [173, 403, 423, 443, 510, 523, 601, 604, 679, 682, 700, 703, 720, 723], "754": [173, 403, 423, 443, 510, 523, 601, 604, 679, 682, 700, 703, 720, 723], "allow": [173, 365, 382, 404, 413, 414, 747, 797, 1146, 1147], "calcul": [173, 177, 178, 179, 180, 181, 351, 510, 511, 514, 515, 518, 519, 522, 523, 526, 528, 531, 532, 535, 536, 540, 543, 576, 579, 580, 583, 584, 597, 600, 601, 604, 641, 644, 645, 648, 649, 652, 653, 656, 657, 660, 679, 682, 696, 699, 712, 715, 716, 719, 720, 723, 728, 732, 733, 738, 935, 936, 939, 941, 944, 946, 949, 1071, 1076, 1079, 1080, 1083, 1084, 1087, 1088, 1091, 1092, 1095, 1096, 1100, 1103], "live": [173, 174], "depend": [173, 345, 346, 351, 357, 359, 360, 365, 382, 423, 429, 510, 511, 514, 515, 518, 519, 522, 528, 531, 532, 535, 536, 540, 543, 576, 579, 580, 583, 597, 601, 604, 641, 644, 645, 648, 649, 652, 653, 656, 696, 699, 712, 715, 716, 719, 733, 738, 865, 878, 880, 907, 909, 911, 913, 914, 1050, 1054, 1060, 1061, 1064, 1066, 1069], "did": [173, 347, 370], "aris": [173, 382], "until": [173, 346, 382, 1113], "substanti": [173, 346, 354, 358], "innov": 173, "growth": 173, "usag": [173, 365, 460, 504], "relev": [173, 345, 347, 352, 359, 360, 368, 1150, 1151, 1152, 1153, 1154, 1155], "area": [173, 362, 380, 510, 518, 519, 522, 532, 535, 539, 544, 547, 579, 583, 737, 742, 1113], "necess": 173, "parti": [173, 382], "could": [173, 174, 345, 346, 352, 354, 359, 360, 362, 365, 367, 368, 369, 1055, 1056, 1057, 1059], "easili": [173, 346, 368, 369, 370, 382, 1113], "engag": [173, 344, 345, 346, 347, 348, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363], "regard": [173, 359, 460], "effect": [173, 351, 358, 359, 363, 382, 404, 415, 821, 842, 844, 1071, 1092, 1095, 1100, 1103], "2015": 173, "sinc": [173, 345, 346, 382], "alongsid": 173, "machin": [173, 345, 355, 381, 423, 443, 446, 510, 613, 865, 886, 895, 897, 904, 906], "given": [173, 174, 177, 178, 345, 346, 347, 348, 350, 351, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 365, 367, 369, 370, 381, 404, 405, 407, 413, 414, 460, 493, 499, 501, 502, 503, 504, 506, 509, 747, 765, 766, 776, 779, 803, 804, 819, 821, 823, 824, 826, 829, 831, 834, 836, 838, 840, 842, 844, 852, 853, 854, 855, 856, 857, 858, 859, 865, 932, 934, 935, 936, 939, 941, 944, 946, 949, 951, 952, 955, 965, 968, 969, 972, 977, 980, 985, 988, 990, 1003, 1006, 1015, 1022, 1023, 1038, 1040, 1041, 1043, 1044, 1046, 1049, 1060, 1066, 1069, 1123, 1124], "frame": [173, 381], "matur": [173, 382], "state": [173, 351, 363, 364, 365, 366, 368, 381, 510, 679, 682, 852, 862, 1113, 1120, 1121, 1122, 1123, 1124, 1125, 1127, 1128, 1130, 1131, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157], "than": [173, 177, 178, 346, 350, 352, 354, 359, 362, 365, 368, 369, 370, 382, 404, 405, 423, 443, 460, 504, 510, 515, 518, 519, 522, 528, 531, 540, 543, 556, 559, 564, 567, 572, 575, 579, 583, 587, 605, 608, 609, 612, 641, 644, 645, 648, 653, 656, 677, 696, 699, 700, 703, 708, 711, 720, 723, 743, 746, 747, 793, 794, 796, 821, 833, 865, 869, 871, 886, 887, 890, 895, 897, 904, 906, 929, 931, 951, 952, 955, 969, 972, 991, 994, 1038, 1044, 1046, 1055, 1056, 1057, 1059, 1071, 1088, 1091, 1092, 1095, 1096, 1100, 1103], "preced": [173, 369], "mention": [173, 345, 346, 352, 355, 362, 363], "aros": 173, "70": [173, 865, 901, 903, 1071, 1072, 1075, 1099], "80": [173, 865, 901, 903, 1071, 1072, 1075, 1099], "90": [173, 182, 288, 330, 331, 510, 568, 571, 704, 707, 865, 901, 903, 1040, 1042, 1071, 1072, 1075, 1099], "effort": [173, 344, 382], "stage": [173, 344, 346, 348, 349, 1113], "complet": [173, 177, 178, 346, 347, 358, 359, 367, 368, 865, 907, 909], "natur": [173, 352, 358, 359, 381, 510, 597, 641, 644, 649, 652, 865, 874, 910], "like": [173, 345, 346, 348, 349, 350, 351, 352, 354, 361, 362, 363, 364, 365, 367, 368, 369, 370, 381, 382, 821, 833, 1038, 1044, 1046, 1113], "certainli": 173, "mission": [173, 1113], "creat": [173, 177, 178, 344, 345, 346, 348, 360, 361, 362, 365, 366, 369, 380, 381, 404, 405, 406, 407, 408, 409, 411, 412, 413, 414, 416, 417, 418, 421, 422, 460, 469, 470, 747, 775, 776, 779, 800, 803, 804, 815, 821, 849, 1038, 1039, 1040, 1041, 1044, 1046, 1113, 1119, 1123, 1124, 1125, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157], "At": [173, 347], "process": [173, 174, 344, 345, 346, 348, 355, 359, 365, 370, 460, 469, 470, 499, 509], "ourselv": 173, "lead": [173, 174, 177, 178, 179, 180, 181, 382, 865, 907, 909, 914], "quansight": 173, "compani": 173, "made": [173, 346, 347, 359, 362, 365, 367], "organ": [173, 350, 355, 358, 359], "panda": 173, "scipi": 173, "conda": [173, 345, 348], "dask": [173, 1055, 1056, 1057, 1059], "apach": 173, "onnx": 173, "scikit": 173, "jupyt": 173, "aw": 173, "cupi": 173, "net": [173, 174, 365, 370], "sympi": 173, "rai": [173, 510, 540, 543], "modin": 173, "spyder": 173, "includ": [173, 177, 178, 346, 347, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 381, 382, 404, 405, 406, 416, 747, 786, 820, 865, 929, 931, 1015, 1016, 1038, 1044, 1046, 1050, 1052, 1071, 1076, 1079, 1080, 1083, 1084, 1087, 1088, 1091, 1092, 1095, 1096, 1100, 1103, 1104, 1105, 1108, 1109, 1112, 1116, 1118, 1134, 1144, 1145, 1148, 1149], "member": [173, 346], "googl": [173, 1113], "octoml": 173, "einop": [173, 177, 178, 747, 769, 770, 771], "further": [173, 174, 346, 348, 352, 358, 364, 368, 369, 1113], "sponsor": 173, "lg": 173, "electron": 173, "microsoft": 173, "d": [173, 174, 182, 288, 330, 331, 344, 345, 349, 359, 368, 747, 756, 764, 852, 853, 854, 855, 856, 857, 858, 859, 865, 875, 877, 901, 903, 1040, 1042, 1113, 1119], "shaw": 173, "intel": 173, "togeth": [173, 177, 178, 358, 359, 369, 370, 382, 1156, 1157], "major": [173, 360, 361, 382, 1050, 1053], "involv": [173, 344, 348, 349, 360, 370, 423, 451, 510, 523, 679, 682, 1113, 1119], "anoth": [173, 177, 178, 345, 346, 355, 359, 360, 367, 370, 404, 410, 423, 430, 432, 435], "promis": 173, "pursuit": 173, "unif": [173, 344, 367, 1113, 1119], "clearli": [173, 347, 352], "lot": [173, 174, 357, 367, 382], "thought": [173, 345, 346, 363], "care": [173, 346, 370], "attent": [173, 346, 358, 359, 852, 863, 864, 1134, 1145], "gone": [173, 364], "simplifi": [173, 365, 366, 367, 369], "compat": [173, 363, 382, 423, 431, 510, 523, 526, 540, 543, 548, 551, 556, 559, 560, 563, 564, 567, 568, 571, 584, 587, 589, 592, 600, 608, 609, 612, 616, 617, 620, 633, 636, 637, 640, 657, 660, 661, 664, 669, 672, 673, 676, 679, 682, 688, 691, 696, 699, 700, 703, 728, 732, 865, 886, 895, 897, 904, 906, 911, 913, 920, 922, 926, 928, 929, 931, 951, 981, 984, 1050, 1052, 1071, 1076, 1079, 1080, 1083, 1084, 1087, 1088, 1091, 1092, 1095, 1096, 1100, 1103, 1104, 1105, 1108, 1109, 1112, 1113], "excit": [173, 344, 349, 1113], "complianc": 173, "hope": [173, 382], "due": [173, 345, 359, 362, 510, 679, 682], "suit": [173, 345, 346, 349, 353, 354, 368, 381], "some": [173, 174, 177, 178, 345, 346, 347, 350, 351, 352, 355, 358, 359, 360, 361, 362, 363, 366, 367, 368, 369, 381, 382, 510, 601, 604, 821, 823, 824, 826, 829, 831, 834, 836, 838, 840, 842, 844, 850, 852, 860, 1113, 1134, 1142], "motiv": [173, 367], "great": [173, 174, 354, 365, 367], "convinc": 173, "celebr": 173, "encourag": [173, 381, 382, 1113, 1119], "foundat": 173, "point": [174, 346, 351, 352, 358, 362, 363, 365, 367, 368, 381, 403, 404, 405, 407, 409, 411, 417, 421, 423, 429, 443, 448, 451, 510, 515, 518, 519, 522, 523, 526, 528, 531, 532, 535, 536, 539, 540, 543, 544, 547, 568, 571, 572, 575, 576, 579, 580, 583, 584, 597, 600, 601, 604, 605, 641, 644, 645, 648, 653, 656, 657, 660, 679, 682, 696, 699, 700, 703, 704, 707, 712, 715, 716, 719, 720, 723, 733, 737, 738, 742, 743, 746, 865, 866, 868, 872, 878, 880, 881, 883, 884, 886, 895, 897, 904, 906, 907, 909, 911, 913, 914, 929, 931, 1055, 1056, 1057, 1059, 1071, 1076, 1079, 1080, 1083, 1084, 1087, 1088, 1091, 1092, 1095, 1096, 1100, 1103], "mai": [174, 345, 346, 359, 367, 369, 404, 405, 410, 460, 505, 510, 589, 592, 616, 617, 620, 637, 640, 665, 668, 669, 672, 747, 768, 1055, 1056, 1057, 1059, 1060, 1061, 1064, 1066, 1069, 1071, 1076, 1079, 1080, 1083, 1084, 1087], "ask": [174, 365, 367, 382, 1113], "perfectli": 174, "happi": [174, 345, 382], "abund": 174, "better": [174, 346, 349, 364, 367, 368, 369], "ll": [174, 344, 346, 352, 359, 362, 368], "give": [174, 345, 346, 349, 351, 352, 356, 363, 367, 951, 981, 984], "two": [174, 179, 180, 182, 351, 352, 354, 358, 359, 364, 368, 370, 404, 405, 409, 415, 419, 420, 423, 450, 455, 510, 564, 567, 704, 707, 747, 755, 865, 866, 868, 872, 874, 875, 877, 878, 880, 881, 883, 884, 886, 887, 890, 891, 893, 895, 897, 898, 900, 901, 903, 904, 906, 907, 909, 910, 911, 913, 914, 916, 917, 919, 923, 925, 926, 928, 951, 999, 1002, 1055, 1056, 1057, 1058, 1059, 1113], "streamlin": 174, "workflow": [174, 346, 368, 380, 1113], "save": [174, 177, 178, 382, 747, 808, 1146, 1147], "week": [174, 346, 347, 1113], "let": [174, 351, 352, 359, 360, 361, 365, 367, 368, 369, 370, 1071, 1080, 1083, 1092, 1095, 1096, 1100, 1103, 1113], "sai": [174, 345, 357, 367], "deepmind": 174, "releas": [174, 345, 347, 1113], "awesom": 174, "paper": 174, "love": 174, "choic": [174, 345, 362, 368, 1071, 1092, 1095, 1100, 1103], "perceiverio": 174, "happen": [174, 345, 346, 368], "slew": 174, "rush": 174, "f": [174, 348, 349, 359, 365, 368, 370, 510, 613, 747, 788, 792], "g": [174, 349, 359, 382, 423, 428, 451, 460, 476, 1038, 1043, 1044, 1046, 1055, 1056, 1057, 1059, 1071, 1076, 1079, 1084, 1087, 1088, 1091, 1096], "inevit": 174, "deviat": [174, 1033, 1034, 1037, 1038, 1043, 1071, 1092, 1095, 1148, 1149], "origin": [174, 177, 178, 179, 180, 181, 356, 357, 360, 365, 367, 510, 540, 543, 865, 891, 893, 951, 981, 984, 985, 988], "often": [174, 355, 382], "erron": 174, "train": [174, 355, 359, 361, 368, 369, 370, 380, 381, 382, 821, 823, 824, 826, 834, 836, 1113], "poor": 174, "converg": 174, "perform": [174, 177, 178, 350, 352, 354, 355, 356, 358, 359, 361, 362, 363, 365, 368, 382, 393, 398, 404, 413, 414, 460, 747, 765, 769, 770, 771, 789, 790, 791, 821, 824, 826, 829, 831, 834, 836, 838, 840, 842, 844, 852, 860, 862, 865, 914, 1011, 1012, 1013, 1014, 1015, 1022, 1023, 1104, 1105, 1108, 1109, 1112], "issu": [174, 344, 347, 365, 367, 369, 382], "publish": [174, 382], "manag": [174, 344, 362, 382, 460], "get": [174, 177, 178, 344, 345, 347, 349, 355, 360, 361, 362, 365, 366, 367, 368, 369, 423, 441, 442, 443, 446, 460, 469, 470, 479, 480, 493, 494, 499, 503, 506, 509, 747, 754, 781, 782, 783, 802, 1113, 1119, 1134, 1143], "work": [174, 345, 346, 347, 349, 354, 359, 360, 361, 364, 365, 366, 367, 369, 370, 1113, 1119], "repositori": [174, 345, 346, 348, 353], "pull": [174, 344, 345, 348, 350, 382], "request": [174, 344, 350, 460, 496], "confus": [174, 362], "do": [174, 177, 178, 345, 346, 347, 350, 351, 352, 355, 356, 357, 358, 359, 360, 361, 362, 363, 365, 367, 368, 369, 370, 382, 510, 700, 703, 747, 791, 821, 833, 850, 1015, 1016, 1025, 1026, 1027], "expect": [174, 382, 747, 754, 1113], "codebas": [174, 344, 349, 350, 362, 364, 460, 502, 503, 1113], "total": [174, 177, 178, 179, 180, 181, 344, 346, 352, 354, 361, 368, 369, 382, 460, 506, 1050, 1053, 1071, 1092, 1095, 1100, 1103], "hour": 174, "spent": 174, "spin": 174, "off": [174, 364, 865, 875, 877, 923, 925], "test": [174, 345, 347, 349, 352, 382, 423, 448, 449, 510, 621, 624, 625, 628, 629, 632, 1104, 1105, 1108, 1109, 1112], "error": [174, 177, 178, 345, 354, 358, 361, 363, 367, 382, 393, 394, 460, 510, 593, 596, 1071, 1076, 1079, 1084, 1087, 1146, 1147, 1150, 1154], "address": [174, 346, 347, 358, 365], "sake": 174, "singl": [174, 177, 178, 346, 350, 352, 354, 355, 357, 359, 362, 363, 365, 368, 369, 370, 382, 460, 469, 470, 489, 490, 491, 492, 747, 817, 820, 1038, 1043, 1044, 1046, 1055, 1056], "multipl": [174, 177, 178, 182, 189, 274, 275, 279, 282, 288, 290, 312, 313, 314, 315, 326, 327, 330, 331, 346, 352, 355, 359, 382, 510, 527, 657, 679, 682, 747, 748, 750, 751, 752, 776, 780, 797, 865, 884, 951, 952, 955, 956, 985, 988, 989, 990, 1033, 1034, 1037, 1040, 1042, 1050, 1051, 1052, 1071, 1076, 1079, 1080, 1083, 1084, 1087, 1088, 1091, 1092, 1095, 1096, 1100, 1103, 1104, 1105, 1108, 1109, 1112, 1134, 1144], "line": [174, 345, 352, 358, 366, 367, 368, 369, 380, 1113, 1119], "directli": [174, 346, 350, 351, 355, 358, 359, 360, 361, 362, 363, 365, 367, 369, 370, 381, 382, 1015, 1027], "graph": [174, 355, 359, 366, 382, 821, 824, 826, 829, 831, 834, 836, 838, 840, 842, 844, 1055, 1056, 1057, 1059, 1146, 1147], "guarante": [174, 358, 382, 1055, 1056], "turn": [174, 352, 359], "step": [174, 177, 178, 182, 186, 232, 273, 284, 316, 317, 345, 346, 348, 352, 356, 358, 359, 360, 361, 365, 368, 369, 370, 381, 404, 405, 413, 414, 460, 821, 823, 824, 825, 826, 827, 829, 831, 834, 835, 836, 837, 838, 840, 842, 844, 1011, 1012, 1013, 1014, 1113, 1150, 1151, 1152, 1153, 1154, 1155], "take": [174, 344, 345, 346, 351, 352, 354, 359, 360, 361, 365, 367, 369, 370, 382, 510, 568, 571, 1113, 1119], "few": [174, 346, 347, 355, 359, 360, 361, 362, 366, 367, 368, 369, 380, 1113, 1119], "second": [174, 345, 352, 362, 367, 423, 450, 455, 460, 491, 510, 523, 526, 548, 551, 556, 559, 560, 563, 564, 567, 568, 571, 587, 589, 592, 600, 608, 609, 612, 616, 617, 620, 633, 636, 637, 640, 657, 660, 661, 664, 669, 672, 673, 676, 679, 682, 688, 691, 696, 699, 728, 732, 747, 755, 802, 807, 821, 823, 824, 826, 834, 836, 865, 869, 871, 875, 877, 878, 880, 887, 890, 901, 903, 907, 909, 914, 920, 922, 926, 928, 951, 995, 998, 999, 1002, 1011, 1013, 1055, 1056, 1057, 1150, 1151, 1152], "automat": [174, 345, 346, 355, 359, 363, 364, 365, 366, 369, 370, 1113], "everyon": [174, 344, 346, 382], "regardless": [174, 177, 178, 344, 367, 370, 401, 402], "wouldn": 174, "nice": [174, 354], "write": [174, 177, 178, 346, 347, 348, 349, 350, 351, 352, 354, 355, 356, 362, 365, 367, 370, 393, 396, 460, 505, 510, 511, 514, 515, 518, 519, 522, 523, 526, 528, 531, 532, 535, 536, 540, 543, 548, 551, 552, 555, 556, 559, 560, 563, 564, 567, 568, 571, 572, 575, 576, 579, 580, 583, 597, 600, 601, 604, 605, 621, 624, 625, 628, 629, 632, 633, 636, 641, 644, 645, 648, 649, 652, 653, 656, 657, 660, 661, 664, 665, 668, 669, 672, 673, 676, 679, 682, 684, 687, 688, 691, 696, 699, 700, 703, 704, 707, 708, 711, 712, 715, 716, 719, 720, 723, 724, 727, 728, 732, 733, 738, 747, 760, 762, 766, 773, 775, 935, 936, 939, 941, 944, 946, 949, 951, 952, 955, 965, 968, 969, 972, 973, 976, 977, 980, 985, 988, 991, 994, 995, 998, 999, 1002, 1033, 1034, 1037, 1038, 1040, 1041, 1060, 1061, 1064, 1066, 1069, 1071, 1072, 1075, 1076, 1079, 1080, 1083, 1084, 1087, 1088, 1091, 1092, 1095, 1096, 1099, 1100, 1103, 1104, 1105, 1108, 1109, 1112], "onc": [174, 345, 346, 359, 360, 361, 365, 368, 382, 460, 504, 865, 884, 914, 1038, 1039], "know": [174, 1055, 1056, 1057, 1059], "among": [174, 177, 178, 354], "frantic": 174, "port": 174, "lucid": 174, "honk": 174, "improv": [174, 346, 355, 365], "understand": [174, 345, 346, 347, 348, 349, 351, 352, 353, 363, 364], "pattern": [174, 177, 178, 351, 360, 747, 769, 770, 771], "hasn": 174, "now": [174, 177, 178, 345, 348, 350, 357, 359, 360, 363, 367, 368, 370, 381, 382, 1134, 1145, 1146, 1147], "spend": 174, "torchvis": 174, "probabl": [174, 852, 860, 1038, 1039, 1134, 1142], "sonnet": 174, "about": [174, 345, 346, 353, 364, 365, 369, 370, 382, 423, 443, 446], "next": [174, 345, 346, 347, 348, 351, 352, 356, 357, 367, 368, 423, 443, 1113, 1146, 1147, 1150, 1151, 1152, 1153, 1154, 1155], "everyth": [174, 346, 347, 366, 382], "zero": [174, 177, 178, 179, 180, 352, 358, 359, 360, 361, 363, 365, 368, 369, 393, 395, 396, 404, 407, 409, 415, 419, 420, 422, 423, 429, 510, 523, 528, 531, 556, 559, 580, 601, 604, 605, 665, 668, 669, 672, 677, 678, 679, 682, 684, 687, 688, 691, 696, 699, 700, 703, 704, 707, 720, 723, 724, 727, 733, 738, 747, 765, 800, 803, 804, 821, 823, 824, 826, 834, 836, 838, 840, 852, 860, 865, 872, 886, 887, 890, 895, 897, 904, 906, 926, 928, 929, 931, 951, 965, 968, 969, 972, 977, 980, 985, 988, 1007, 1010, 1033, 1034, 1037, 1038, 1040, 1041, 1050, 1051, 1052, 1053, 1055, 1056, 1057, 1059, 1071, 1076, 1079, 1080, 1083, 1084, 1087, 1088, 1091, 1092, 1095, 1096, 1100, 1103, 1104, 1105, 1108, 1109, 1112, 1113, 1125, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1144, 1150, 1151, 1152, 1153], "need": [174, 345, 346, 347, 348, 350, 351, 352, 353, 355, 358, 359, 362, 365, 367, 368, 381, 382, 747, 759, 760, 762, 951, 952, 955, 965, 968], "said": 174, "high": [174, 177, 178, 182, 258, 288, 289, 330, 331, 347, 368, 1038, 1040, 1041, 1042, 1044, 1045, 1046, 1047], "level": [174, 344, 347, 355, 364, 365, 368, 369, 370, 382], "optim": [174, 362, 366, 368, 370, 381, 460, 821, 824, 826, 829, 831, 834, 836, 838, 840, 842, 844, 1011, 1012, 1013, 1014, 1113, 1151, 1152, 1153, 1155], "trainer": [174, 380, 382, 1113], "statu": 174, "quo": 174, "kera": 174, "dopamin": 174, "ignit": 174, "catalyst": 174, "lightn": 174, "fastai": 174, "haiku": [174, 370], "flax": [174, 370, 382], "trax": [174, 370], "objax": [174, 370], "idea": [174, 381], "fulli": [174, 358, 359, 363, 365, 366, 367, 368, 369, 370, 382, 1134, 1144, 1145], "offer": [174, 369], "containerwithactiv": [175, 179, 180], "dict_in": [175, 176, 177, 178, 179, 180, 181, 182, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341], "queue": [175, 176, 177, 178, 179, 180, 181, 182, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 368, 460, 469, 470, 747, 802, 807], "queue_load_s": [175, 176, 177, 178, 179, 180, 181, 182, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341], "container_combine_method": [175, 176, 177, 178, 179, 180, 181, 182, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341], "list_join": [175, 176, 177, 178, 179, 180, 181, 182, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341], "queue_timeout": [175, 176, 177, 178, 179, 180, 181, 182, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 747], "print_limit": [175, 176, 177, 178, 179, 180, 181, 182, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341], "key_length_limit": [175, 176, 177, 178, 179, 180, 181, 182, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341], "print_ind": [175, 176, 177, 178, 179, 180, 181, 182, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341], "print_line_spac": [175, 176, 177, 178, 179, 180, 181, 182, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341], "ivyh": [175, 176, 177, 178, 179, 180, 181, 182, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341], "default_key_color": [175, 176, 177, 178, 179, 180, 181, 182, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341], "green": [175, 176, 177, 178, 179, 180, 181, 182, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 345, 346, 1159, 1160], "keyword_color_dict": [175, 176, 177, 178, 179, 180, 181, 182, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341], "rebuild_child_contain": [175, 176, 177, 178, 179, 180, 181, 182, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341], "types_to_iteratively_nest": [175, 176, 177, 178, 179, 180, 181, 182, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341], "alphabetical_kei": [175, 176, 177, 178, 179, 180, 181, 182, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341], "containerbas": [175, 176, 177, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 359], "__getitem__": [177, 178, 359], "queri": [177, 178, 359, 360, 367, 460, 493, 503, 852, 863, 864, 1134, 1145], "slice": [177, 178, 747, 775, 776, 779, 1015, 1024], "chain": [177, 178, 358, 359, 369, 370, 382, 1011, 1012, 1013, 1015, 1028, 1156, 1157], "element": [177, 178, 351, 365, 370, 393, 394, 395, 396, 397, 398, 399, 400, 404, 405, 411, 412, 419, 420, 460, 483, 487, 491, 510, 511, 514, 515, 518, 519, 522, 523, 526, 528, 531, 532, 535, 536, 539, 540, 543, 544, 547, 548, 551, 552, 555, 556, 559, 560, 563, 564, 567, 568, 571, 572, 575, 576, 579, 580, 583, 584, 587, 589, 592, 593, 596, 597, 600, 601, 604, 605, 608, 609, 612, 613, 616, 617, 620, 621, 624, 625, 628, 629, 632, 633, 636, 637, 640, 641, 644, 645, 648, 649, 652, 653, 656, 657, 660, 661, 664, 665, 668, 669, 672, 673, 676, 677, 678, 679, 682, 684, 687, 688, 691, 692, 695, 696, 699, 700, 703, 704, 707, 708, 711, 712, 715, 716, 719, 720, 723, 724, 727, 728, 732, 733, 737, 738, 742, 743, 746, 747, 755, 756, 759, 760, 762, 765, 766, 773, 787, 816, 817, 852, 860, 865, 869, 871, 878, 880, 887, 890, 907, 909, 914, 951, 952, 955, 969, 972, 977, 980, 985, 988, 990, 991, 994, 1038, 1039, 1050, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1066, 1069, 1071, 1072, 1075, 1076, 1079, 1080, 1083, 1084, 1087, 1088, 1091, 1092, 1095, 1096, 1099, 1100, 1103, 1104, 1105, 1108, 1109, 1112, 1134, 1142], "represent": [177, 178, 179, 180, 181, 381, 403, 423, 427, 428, 443, 446, 460, 476, 477, 510, 511, 514, 523, 548, 551, 560, 563, 568, 571, 673, 676, 679, 682, 747, 753, 810, 815], "dictionari": [177, 178, 179, 180, 181, 368, 382, 460, 503], "around": [177, 178, 179, 180, 181, 346, 355, 358, 363, 367, 382], "sequenc": [177, 178, 179, 180, 181, 352, 360, 381, 460, 469, 470, 747, 756, 797, 951, 990, 995, 998, 1038, 1040, 1041, 1071, 1076, 1079, 1134, 1143, 1148, 1149, 1156, 1157], "multiprocess": [177, 178, 179, 180, 181, 368, 382, 460, 469, 747], "asynchron": [177, 178, 179, 180, 181], "wait": [177, 178, 179, 180, 181, 346], "size": [177, 178, 179, 180, 181, 367, 368, 404, 413, 414, 460, 502, 503, 504, 747, 803, 809, 852, 864, 865, 875, 877, 891, 893, 901, 903, 907, 909, 914, 926, 928, 951, 965, 968, 985, 988, 990, 991, 994, 1038, 1039, 1043, 1044, 1046, 1050, 1051, 1053, 1104, 1105, 1108, 1109, 1112, 1134, 1135, 1136], "dimens": [177, 178, 179, 180, 181, 352, 365, 368, 393, 398, 404, 419, 420, 460, 491, 747, 769, 770, 771, 774, 784, 800, 819, 852, 853, 854, 855, 856, 857, 858, 859, 862, 865, 866, 868, 869, 871, 872, 875, 877, 878, 880, 881, 883, 884, 886, 887, 890, 891, 893, 895, 897, 898, 900, 904, 906, 907, 909, 911, 913, 914, 916, 917, 919, 923, 925, 926, 928, 929, 931, 935, 941, 944, 946, 949, 951, 957, 960, 965, 968, 969, 972, 973, 976, 977, 980, 981, 984, 985, 988, 990, 991, 994, 995, 998, 1011, 1012, 1013, 1014, 1038, 1049, 1050, 1051, 1052, 1053, 1055, 1056, 1057, 1059, 1071, 1072, 1075, 1076, 1079, 1080, 1083, 1084, 1087, 1088, 1091, 1092, 1095, 1096, 1099, 1100, 1103, 1104, 1105, 1108, 1109, 1112, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1144, 1145], "combin": [177, 178, 179, 180, 181, 346, 352, 354, 355, 358, 359, 370, 865, 869, 871], "arriv": [177, 178, 179, 180, 181], "timeout": [177, 178, 179, 180, 181, 460, 469, 470, 747, 802, 807], "limit": [177, 178, 179, 180, 181, 346, 352, 354, 365, 368, 370, 382, 423, 443, 446, 747, 759, 760, 762, 951, 952, 955], "maximum": [177, 178, 179, 180, 181, 352, 365, 368, 370, 460, 484, 488, 492, 504, 510, 747, 759, 760, 762, 774, 821, 834, 836, 951, 952, 955, 1015, 1027, 1050, 1051, 1071, 1076, 1079, 1084, 1087, 1113], "length": [177, 178, 179, 180, 181, 368, 404, 405, 415, 865, 914, 916, 917, 919, 951, 981, 984], "whitespac": [177, 178, 179, 180, 181], "indent": [177, 178, 179, 180, 181, 368], "extra": [177, 178, 179, 180, 181, 352, 357, 358, 365, 821, 828], "newlin": [177, 178, 179, 180, 181, 351], "handl": [177, 178, 179, 180, 181, 349, 354, 355, 357, 359, 360, 361, 362, 363, 369, 382, 401, 402, 460, 476, 477, 478, 479, 480, 494, 498, 499, 506, 509, 821, 824, 826, 829, 831, 834, 836, 838, 840, 842, 844, 1150, 1151, 1152, 1153, 1154, 1155], "result": [177, 178, 179, 180, 181, 350, 351, 352, 354, 358, 359, 360, 362, 363, 368, 382, 393, 396, 404, 405, 423, 451, 460, 469, 505, 510, 511, 514, 515, 518, 519, 522, 523, 526, 528, 531, 532, 535, 536, 540, 543, 548, 551, 552, 555, 556, 559, 560, 563, 564, 567, 568, 571, 572, 575, 576, 579, 580, 583, 584, 587, 589, 592, 597, 600, 601, 604, 605, 608, 609, 612, 613, 616, 617, 620, 621, 624, 625, 628, 629, 632, 633, 636, 637, 640, 641, 644, 645, 648, 649, 652, 653, 656, 657, 660, 661, 664, 665, 668, 669, 672, 673, 676, 679, 682, 684, 687, 688, 691, 696, 699, 700, 703, 704, 707, 708, 711, 712, 715, 716, 719, 720, 723, 724, 727, 728, 732, 733, 738, 743, 746, 747, 760, 762, 766, 773, 775, 803, 804, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 864, 865, 866, 868, 875, 877, 891, 893, 914, 929, 931, 935, 936, 939, 941, 944, 946, 949, 951, 952, 955, 965, 968, 969, 972, 973, 976, 977, 980, 985, 988, 991, 994, 995, 998, 999, 1002, 1015, 1028, 1033, 1034, 1037, 1038, 1040, 1041, 1050, 1051, 1052, 1055, 1056, 1060, 1061, 1064, 1066, 1069, 1071, 1072, 1075, 1076, 1079, 1080, 1083, 1084, 1087, 1088, 1091, 1092, 1095, 1096, 1099, 1100, 1103, 1104, 1105, 1108, 1109, 1112, 1113], "color": [177, 178, 179, 180, 181, 1159, 1160], "termin": [177, 178, 179, 180, 181, 345, 346, 348, 359, 365, 368], "map": [177, 178, 179, 180, 181, 354, 355, 359, 363, 368, 381, 382, 460, 469, 1015, 1022, 1023, 1027, 1028, 1134, 1145], "termcolor": [177, 178, 179, 180, 181], "rebuild": [177, 178, 179, 180, 181], "found": [177, 178, 179, 180, 181, 345, 346, 351, 358, 359, 460, 494], "constructor": [177, 178, 179, 180, 181, 360, 361, 367, 747, 754, 1156, 1157], "param": [177, 178, 179, 180, 181, 182, 282, 314, 315, 365, 370, 747, 753, 775, 776, 779, 780], "kept": [177, 178, 179, 180, 181, 346, 362, 1011, 1012, 1013], "structur": [177, 178, 179, 180, 181, 348, 350, 355, 358, 359, 368, 369, 747, 763, 1015, 1028], "alphabet": [177, 178, 179, 180, 181], "preserv": [177, 178, 179, 180, 181, 370, 382, 821, 847, 951, 969, 972], "__setitem__": [177, 178, 358, 359, 367], "val": [177, 178, 362, 367, 747, 789, 790, 791, 805, 806], "after": [177, 178, 352, 359, 360, 364, 423, 455, 510, 720, 723, 821, 824, 826, 828, 829, 831, 834, 836, 838, 840, 842, 844, 1033, 1034, 1037, 1150, 1151, 1152, 1153, 1154, 1155], "updat": [177, 178, 345, 346, 347, 348, 349, 352, 353, 357, 358, 359, 360, 363, 365, 367, 368, 370, 382, 460, 469, 747, 791, 803, 804, 821, 823, 824, 826, 829, 831, 834, 836, 838, 840, 842, 844, 852, 862, 1011, 1012, 1013, 1015, 1022, 1023, 1031, 1032, 1123, 1124, 1150, 1151, 1152, 1153, 1154, 1155], "all_fals": [177, 178], "assert_is_bool": [177, 178], "key_chain": [177, 178, 179, 180, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 308, 309, 312, 313, 314, 315, 316, 317, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 336, 337, 338, 339, 340, 341, 432, 434, 436, 511, 513, 517, 518, 519, 521, 525, 526, 527, 528, 530, 532, 534, 538, 539, 540, 542, 544, 546, 548, 550, 552, 554, 556, 558, 560, 562, 564, 566, 568, 570, 572, 574, 578, 579, 582, 583, 586, 587, 588, 591, 592, 593, 595, 599, 600, 601, 603, 607, 608, 609, 611, 615, 616, 617, 619, 621, 623, 625, 627, 629, 631, 633, 635, 637, 639, 641, 643, 645, 647, 649, 651, 653, 655, 657, 659, 661, 663, 665, 667, 669, 671, 673, 675, 679, 681, 683, 684, 686, 688, 690, 692, 694, 696, 698, 700, 702, 704, 706, 708, 710, 712, 714, 716, 718, 720, 722, 724, 726, 728, 729, 731, 734, 736, 737, 739, 741, 742, 743, 745, 748, 750, 752, 760, 761, 776, 778, 780, 824, 825, 827, 829, 830, 832, 834, 835, 837, 838, 839, 841, 842, 843, 845, 887, 889, 936, 938, 940, 941, 943, 945, 946, 948, 950, 952, 954, 956, 957, 959, 961, 963, 965, 967, 969, 971, 973, 975, 977, 979, 981, 983, 985, 987, 989, 991, 993, 995, 997, 999, 1001, 1003, 1005, 1007, 1009, 1015, 1028, 1034, 1036, 1040, 1042, 1044, 1045, 1047, 1061, 1063, 1065, 1066, 1068, 1070, 1072, 1074, 1076, 1078, 1080, 1082, 1084, 1086, 1088, 1090, 1092, 1094, 1098, 1099, 1100, 1102, 1105, 1107, 1109, 1111], "to_appli": [177, 178, 179, 180, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 308, 309, 312, 313, 314, 315, 316, 317, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 336, 337, 338, 339, 340, 341, 432, 434, 436, 511, 513, 517, 518, 519, 521, 525, 526, 527, 528, 530, 532, 534, 538, 539, 540, 542, 544, 546, 548, 550, 552, 554, 556, 558, 560, 562, 564, 566, 568, 570, 572, 574, 578, 579, 582, 583, 586, 587, 588, 591, 592, 593, 595, 599, 600, 601, 603, 607, 608, 609, 611, 615, 616, 617, 619, 621, 623, 625, 627, 629, 631, 633, 635, 637, 639, 641, 643, 645, 647, 649, 651, 653, 655, 657, 659, 661, 663, 665, 667, 669, 671, 673, 675, 679, 681, 683, 684, 686, 688, 690, 692, 694, 696, 698, 700, 702, 704, 706, 708, 710, 712, 714, 716, 718, 720, 722, 724, 726, 728, 729, 731, 734, 736, 737, 739, 741, 742, 743, 745, 748, 750, 752, 760, 761, 776, 778, 780, 824, 825, 827, 829, 830, 832, 834, 835, 837, 838, 839, 841, 842, 843, 845, 887, 889, 936, 938, 940, 941, 943, 945, 946, 948, 950, 952, 954, 956, 957, 959, 961, 963, 965, 967, 969, 971, 973, 975, 977, 979, 981, 983, 985, 987, 989, 991, 993, 995, 997, 999, 1001, 1003, 1005, 1007, 1009, 1015, 1028, 1034, 1036, 1044, 1045, 1047, 1061, 1063, 1065, 1066, 1068, 1070, 1072, 1074, 1076, 1078, 1080, 1082, 1084, 1086, 1088, 1090, 1092, 1094, 1098, 1099, 1100, 1102, 1105, 1107, 1109, 1111], "prune_unappli": [177, 178, 179, 180, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 308, 309, 312, 313, 314, 315, 316, 317, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 336, 337, 338, 339, 340, 341, 432, 434, 436, 511, 513, 517, 518, 519, 521, 525, 526, 527, 528, 530, 532, 534, 538, 539, 540, 542, 544, 546, 548, 550, 552, 554, 556, 558, 560, 562, 564, 566, 568, 570, 572, 574, 578, 579, 582, 583, 586, 587, 588, 591, 592, 593, 595, 599, 600, 601, 603, 607, 608, 609, 611, 615, 616, 617, 619, 621, 623, 625, 627, 629, 631, 633, 635, 637, 639, 641, 643, 645, 647, 649, 651, 653, 655, 657, 659, 661, 663, 665, 667, 669, 671, 673, 675, 679, 681, 683, 684, 686, 688, 690, 692, 694, 696, 698, 700, 702, 704, 706, 708, 710, 712, 714, 716, 718, 720, 722, 724, 726, 728, 729, 731, 734, 736, 737, 739, 741, 742, 743, 745, 748, 750, 752, 760, 761, 776, 778, 780, 824, 825, 827, 829, 830, 832, 834, 835, 837, 838, 839, 841, 842, 843, 845, 887, 889, 936, 938, 940, 941, 943, 945, 946, 948, 950, 952, 954, 956, 957, 959, 961, 963, 965, 967, 969, 971, 973, 975, 977, 979, 981, 983, 985, 987, 989, 991, 993, 995, 997, 999, 1001, 1003, 1005, 1007, 1009, 1015, 1028, 1034, 1036, 1044, 1045, 1047, 1061, 1063, 1065, 1066, 1068, 1070, 1072, 1074, 1076, 1078, 1080, 1082, 1084, 1086, 1088, 1090, 1092, 1094, 1098, 1099, 1100, 1102, 1105, 1107, 1109, 1111], "map_sequ": [177, 178, 179, 180, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 196, 198, 199, 201, 206, 207, 208, 209, 211, 212, 213, 214, 215, 216, 218, 219, 220, 221, 222, 223, 225, 226, 229, 230, 231, 232, 233, 234, 237, 238, 239, 240, 243, 247, 248, 249, 250, 251, 253, 254, 255, 257, 258, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 308, 309, 312, 313, 314, 315, 316, 317, 324, 325, 326, 327, 328, 329, 330, 331, 336, 337, 338, 339, 340, 341, 432, 434, 436, 511, 513, 517, 518, 519, 521, 525, 526, 527, 528, 530, 532, 534, 538, 539, 544, 546, 552, 554, 572, 574, 578, 579, 582, 583, 586, 588, 593, 595, 599, 601, 603, 607, 608, 609, 621, 623, 625, 627, 629, 631, 641, 643, 645, 647, 649, 651, 653, 655, 657, 665, 667, 679, 681, 683, 684, 686, 692, 694, 704, 706, 708, 710, 712, 714, 716, 718, 720, 722, 724, 726, 728, 729, 731, 734, 736, 737, 739, 741, 742, 743, 745, 748, 750, 752, 760, 761, 776, 778, 780, 824, 825, 827, 829, 830, 832, 834, 835, 837, 838, 839, 841, 842, 843, 845, 936, 938, 940, 941, 943, 945, 946, 948, 950, 952, 954, 956, 961, 963, 965, 967, 969, 971, 973, 975, 977, 979, 981, 983, 985, 987, 989, 991, 993, 999, 1001, 1003, 1005, 1007, 1009, 1034, 1036, 1044, 1045, 1047, 1061, 1063, 1065, 1066, 1068, 1070, 1072, 1074, 1076, 1078, 1080, 1082, 1084, 1086, 1088, 1090, 1092, 1094, 1098, 1099, 1100, 1102, 1105, 1107, 1109, 1111], "entri": [177, 178, 404, 413, 414, 951, 990, 1015, 1028], "boolean": [177, 178, 359, 404, 411, 423, 429, 447, 459, 460, 495, 507, 510, 548, 551, 552, 555, 560, 563, 568, 571, 661, 664, 665, 668, 669, 672, 673, 676, 747, 748, 751, 755, 756, 786, 787, 788, 792, 793, 794, 795, 796, 813, 820, 821, 833, 1011, 1012, 1013, 1015, 1025, 1071, 1084, 1087], "evalu": [177, 178, 359, 510, 597, 601, 604, 641, 644, 645, 648, 649, 652, 653, 656, 684, 687, 708, 711, 724, 727, 1015, 1016, 1025, 1026, 1104, 1105, 1108, 1109, 1112], "assert": [177, 178, 367, 368, 747, 757], "skip": [177, 178, 348, 354, 1015, 1028], "prune": [177, 178, 1015, 1028, 1029, 1030], "all_key_chain": [177, 178], "include_empti": [177, 178], "all_tru": [177, 178, 359, 368], "arrays_as_list": [177, 178], "intermedi": [177, 178], "as_arrai": [177, 178, 747, 784, 809], "as_bool": [177, 178], "as_on": [177, 178], "ones": [177, 178, 179, 180, 354, 365, 367, 368, 404, 409, 418, 510, 572, 575, 747, 800, 1113], "sub": [177, 178, 346, 347, 349, 354, 359, 367, 368, 369, 460, 485, 486, 489, 490, 491, 492, 865, 875, 877, 951, 990, 1011, 1012, 1013, 1014, 1113], "fill": [177, 178, 404, 407, 411, 412, 417, 418, 421, 422, 1038, 1040, 1041], "as_random_uniform": [177, 178], "low": [177, 178, 182, 258, 288, 289, 330, 331, 365, 1038, 1040, 1041, 1042, 1044, 1045, 1046, 1047], "uniform": [177, 178, 369, 1038, 1039, 1040, 1041, 1044, 1046, 1125, 1127, 1128, 1131, 1132], "lower": [177, 178, 346, 352, 365, 382, 404, 409, 419, 510, 677, 865, 866, 868, 1038, 1044, 1046], "boundari": [177, 178, 1038, 1044, 1046], "output": [177, 178, 345, 349, 350, 351, 352, 354, 355, 358, 359, 361, 362, 363, 365, 367, 369, 370, 382, 393, 396, 404, 405, 407, 408, 409, 411, 412, 415, 417, 418, 421, 422, 460, 469, 470, 504, 505, 510, 511, 514, 515, 518, 519, 522, 523, 526, 528, 531, 532, 535, 536, 540, 543, 548, 551, 552, 555, 556, 559, 560, 563, 564, 567, 568, 571, 572, 575, 576, 579, 580, 583, 597, 600, 601, 604, 605, 621, 624, 625, 628, 629, 632, 633, 636, 641, 644, 645, 648, 649, 652, 653, 656, 657, 660, 661, 664, 665, 668, 669, 672, 673, 676, 679, 682, 684, 687, 688, 691, 696, 699, 700, 703, 704, 707, 708, 711, 712, 715, 716, 719, 720, 723, 724, 727, 728, 732, 733, 738, 747, 758, 760, 762, 766, 773, 775, 821, 828, 852, 854, 856, 858, 860, 862, 863, 864, 865, 923, 925, 935, 936, 939, 941, 944, 946, 949, 951, 952, 955, 965, 968, 969, 972, 973, 976, 977, 980, 985, 988, 991, 994, 995, 998, 999, 1002, 1003, 1006, 1015, 1028, 1033, 1034, 1037, 1038, 1040, 1041, 1043, 1044, 1046, 1060, 1061, 1064, 1066, 1069, 1071, 1072, 1075, 1076, 1079, 1080, 1083, 1084, 1087, 1088, 1091, 1092, 1095, 1096, 1099, 1100, 1103, 1104, 1105, 1108, 1109, 1112, 1113, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1142, 1143, 1144, 1145], "interv": [177, 178, 365, 370, 404, 405, 413, 414, 865, 926, 928, 951, 952, 955, 995, 998, 1038, 1040, 1041, 1044, 1046, 1104, 1105, 1108, 1109, 1112], "as_vari": [177, 178], "as_zero": [177, 178], "assert_contains_sub_contain": [177, 178], "sub_cont": [177, 178], "partial": [177, 178, 346, 1146, 1147], "except": [177, 178, 351, 358, 362, 367, 382, 423, 431, 747, 757, 768, 791, 818, 865, 886, 904, 906, 951, 957, 960, 995, 998, 1050, 1053, 1104, 1105, 1108, 1109, 1112], "diff": [177, 178, 359, 368], "screen": [177, 178, 368], "assert_contains_sub_structur": [177, 178], "check_shap": [177, 178], "static": [177, 178, 182, 274, 275, 278, 279, 282, 288, 290, 294, 295, 308, 309, 312, 313, 314, 315, 316, 317, 324, 325, 326, 327, 330, 331, 336, 337, 342, 343, 347, 351, 352, 355, 382, 401, 402, 432, 436, 527, 539, 544, 657, 734, 739, 742, 748, 752, 776, 780, 952, 956, 985, 989, 1040, 1042], "assert_ident": [177, 178], "check_typ": [177, 178], "same_arrai": [177, 178, 368], "arrays_equ": [177, 178, 179, 180, 747], "datatyp": [177, 178, 404, 406, 416, 423, 437, 448, 449, 450], "exact": [177, 178, 346, 365, 1055, 1056], "assert_identical_structur": [177, 178], "at_key_chain": [177, 178], "ignore_key_error": [177, 178], "ignore_non": [177, 178], "at_kei": [177, 178], "ignor": [177, 178, 352, 382, 404, 415, 1015, 1026, 1150, 1154], "substr": [177, 178], "access": [177, 178, 346, 348, 360], "clip_min": [177, 178], "clip_max": [177, 178], "minimum": [177, 178, 365, 370, 460, 510, 511, 514, 747, 782, 783, 805, 806, 811, 812, 951, 952, 955, 1050, 1052, 1071, 1076, 1079, 1084, 1087, 1113], "config": [177, 178, 368, 1015, 1028], "right": [177, 178, 344, 345, 346, 349, 352, 368, 510, 556, 559, 564, 567, 865, 914], "duplic": [177, 178, 351, 356, 357, 367, 369], "compar": [177, 178, 354, 368, 747, 748, 751, 755, 756, 1055, 1056, 1057, 1059, 1060, 1061, 1064, 1066, 1069], "configur": [177, 178, 345, 346, 348, 360, 460, 503, 1015, 1028], "container_rightmost": [177, 178], "common_key_chain": [177, 178, 359], "across": [177, 178, 347, 352, 354, 355, 359, 360, 363, 460, 469, 470, 481, 482, 484, 485, 486, 487, 488, 492, 502, 503, 747, 755, 756, 1015, 1021, 1050, 1052], "properti": [177, 178, 352, 354, 355, 359, 367, 368, 369, 460, 472, 1146, 1147, 1150, 1151, 1152, 1153, 1155], "contains_sub_contain": [177, 178], "match": [177, 178, 359, 423, 429, 510, 700, 703, 747, 797], "contains_sub_structur": [177, 178], "copi": [177, 178, 348, 351, 356, 360, 365, 367, 368, 381, 382, 404, 406, 410, 423, 429, 460, 505, 747, 764, 816, 817, 951, 981, 984, 1015, 1017, 1060, 1066, 1069], "create_if_abs": [177, 178], "inplac": [177, 178, 182, 186, 226, 232, 233, 253, 273, 283, 284, 285, 287, 316, 317, 349, 352, 357, 358, 363, 367, 369, 747, 757, 788, 791, 792, 813, 821, 824, 825, 826, 827, 829, 830, 831, 832, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 1123, 1124, 1150, 1151, 1152, 1153, 1154, 1155], "correspond": [177, 178, 179, 180, 182, 346, 351, 352, 353, 355, 358, 359, 360, 363, 423, 430, 510, 540, 543, 696, 699, 865, 869, 871, 878, 880, 911, 913, 951, 957, 960, 985, 988, 1038, 1039, 1050, 1051, 1052, 1055, 1056, 1057, 1059, 1071, 1088, 1091, 1092, 1095, 1096, 1100, 1103], "alreadi": [177, 178, 345, 346, 356, 359, 363, 367, 382, 460, 510, 572, 575, 605, 679, 682, 704, 707, 743, 746, 865, 901, 903, 1113], "noth": [177, 178, 346], "cutoff_at_depth": [177, 178], "depth_cutoff": [177, 178], "summari": [177, 178, 346, 423, 438, 439, 440, 452, 453, 454, 460, 473, 474, 747, 763, 767, 785, 821, 846, 851], "cutoff_at_height": [177, 178], "height_cutoff": [177, 178], "deep_copi": [177, 178, 368], "intern": [177, 178, 351, 358, 359, 361, 362, 460, 821, 850, 1015, 1016, 1025, 1026, 1125, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1156, 1157], "dev": [177, 178, 179, 181, 182, 194, 345, 355, 361, 365, 367, 369, 460, 469, 494], "belong": [177, 178, 369], "dev_clon": [177, 178, 460], "clone": [177, 178, 346, 348, 460, 481, 482, 483, 484], "dev_dist": [177, 178, 460], "distribut": [177, 178, 347, 361, 382, 460, 481, 485, 486, 487, 488, 852, 860, 935, 936, 939, 941, 944, 946, 949, 1038, 1039, 1040, 1041, 1043, 1044, 1046, 1134, 1142, 1146, 1147], "along": [177, 178, 350, 362, 404, 413, 414, 460, 485, 486, 487, 488, 489, 490, 491, 492, 504, 747, 765, 766, 775, 819, 865, 891, 893, 923, 925, 926, 928, 929, 931, 935, 941, 944, 946, 949, 951, 957, 960, 969, 972, 977, 980, 985, 988, 990, 995, 998, 1003, 1006, 1011, 1012, 1013, 1014, 1038, 1049, 1050, 1051, 1052, 1060, 1061, 1064, 1066, 1069, 1071, 1072, 1075, 1076, 1079, 1080, 1083, 1084, 1087, 1088, 1091, 1092, 1095, 1096, 1099, 1100, 1103, 1104, 1105, 1108, 1109, 1112], "split": [177, 178, 344, 346, 364, 365, 382, 460, 469, 485, 486, 487, 488, 502, 503, 504, 747, 797, 951, 1113], "dev_str": [177, 178], "diff_kei": [177, 178], "detect_key_diff": [177, 178], "detect_value_diff": [177, 178], "detect_shape_diff": [177, 178], "thei": [177, 178, 347, 349, 350, 352, 355, 357, 359, 360, 361, 362, 367, 368, 369, 370, 382, 423, 450, 1011, 1012, 1013, 1038, 1039, 1113, 1156, 1157], "treat": [177, 178, 366, 370, 401, 402], "detect": [177, 178, 363, 368, 369, 1015, 1016, 1026], "without": [177, 178, 346, 350, 355, 358, 359, 361, 363, 365, 367, 368, 369, 381, 382, 747, 802, 807, 951, 981, 984, 1015, 1017, 1055, 1056, 1057, 1059], "flag": [177, 178, 346, 362, 367, 460, 479, 821, 833], "container0": [177, 178], "einops_rearrang": [177, 178, 747], "axes_length": [177, 178, 747, 769, 770, 771], "rearrang": [177, 178, 747, 769, 771], "addit": [177, 178, 345, 346, 350, 351, 354, 359, 360, 367, 368, 370, 460, 505, 510, 523, 747, 769, 770, 771, 1033, 1034, 1037, 1134, 1144], "einops_reduc": [177, 178, 747], "reduct": [177, 178, 360, 367, 747, 770, 803, 804, 1104, 1105, 1108, 1109, 1112, 1113], "One": [177, 178, 360, 365, 367, 368, 747, 770, 951, 981, 984, 1038, 1040, 1041], "callabl": [177, 178, 359, 365, 383, 384, 385, 386, 387, 388, 389, 390, 391, 401, 402, 423, 444, 445, 460, 504, 747, 753, 758, 768, 770, 1011, 1012, 1013, 1014, 1015, 1021, 1025, 1026, 1027], "einops_repeat": [177, 178, 747], "find_sub_contain": [177, 178], "sub_cont_to_find": [177, 178], "exsit": [177, 178], "find_sub_structur": [177, 178], "sub_struc_to_find": [177, 178], "flatten_key_chain": [177, 178, 368, 1146, 1147], "__": [177, 178, 352, 368], "above_height": [177, 178, 368], "below_depth": [177, 178, 368], "format_key_chain": [177, 178], "format_fn": [177, 178], "format": [177, 178, 348, 351, 360, 361, 365, 367, 368, 423, 441, 460, 480, 1071, 1072, 1075, 1099, 1113], "string": [177, 178, 356, 360, 361, 365, 368, 423, 427, 428, 441, 447, 459, 460, 476, 477, 478, 479, 493, 499, 505, 506, 509, 747, 767], "from_disk_as_hdf5": [177, 178, 368], "h5_obj_or_filepath": [177, 178], "slice_obj": [177, 178], "load": [177, 178, 382], "disk": [177, 178, 368], "h5py": [177, 178], "file": [177, 178, 345, 346, 348, 350, 351, 355, 356, 358, 359, 365, 368, 747, 808, 1146, 1147], "hdf5": [177, 178, 368, 1146, 1147], "filepath": [177, 178, 346], "h5": [177, 178], "from_disk_as_json": [177, 178, 368], "json_filepath": [177, 178], "json": [177, 178, 368], "were": [177, 178, 346, 350, 354, 359], "abl": [177, 178, 345, 346, 355, 360, 362, 367, 370], "dure": [177, 178, 355, 359, 360, 361, 362, 382, 401, 402, 460, 505, 747, 818, 821, 823, 824, 826, 834, 836, 865, 887, 890, 1011, 1012, 1013, 1014, 1071, 1092, 1095, 1100, 1103, 1146, 1147, 1150, 1151, 1152, 1154], "from_disk_as_pickl": [177, 178, 368], "pickle_filepath": [177, 178], "pickl": [177, 178, 359, 368], "from_flat_list": [177, 178], "flat_list": [177, 178], "hierarchi": [177, 178, 368], "flat": [177, 178, 747, 803, 951, 977, 980], "popul": [177, 178, 360, 361, 365, 1038, 1039, 1071, 1092, 1095, 1100, 1103], "from_numpi": [177, 178, 368], "gather": [177, 178, 747, 776, 779], "accord": [177, 178, 345, 348, 355, 360, 423, 432, 435, 443, 510, 523, 564, 567, 679, 682, 747, 775, 803, 804, 865, 926, 928, 951, 961, 964, 1007, 1010, 1071, 1092, 1095, 1100, 1103], "index": [177, 178, 348, 355, 359, 367, 403, 404, 409, 415, 460, 501, 747, 753, 775, 776, 779, 951, 995, 998, 1015, 1018, 1019, 1022, 1023, 1024, 1029, 1031, 1050, 1051, 1052, 1053, 1055, 1056, 1057, 1060, 1061, 1064, 1116, 1118], "h5_file_s": [177, 178], "content": [177, 178, 347, 348, 362, 365, 368], "batch": [177, 178, 355, 359, 368, 460, 502, 503, 747, 774, 852, 861, 865, 929, 931, 1011, 1012, 1013, 1014, 1033, 1034, 1037, 1148, 1149], "handle_inplac": [177, 178], "prime": [177, 178], "overwritten": [177, 178, 356, 358], "has_kei": [177, 178], "query_kei": [177, 178], "somewher": [177, 178], "has_key_chain": [177, 178], "has_nan": [177, 178, 747], "include_inf": [177, 178, 747, 786, 820], "leafwis": [177, 178], "nan": [177, 178, 350, 351, 403, 423, 429, 510, 511, 514, 515, 518, 519, 522, 523, 526, 528, 531, 532, 535, 536, 540, 543, 572, 575, 576, 579, 580, 583, 597, 600, 601, 604, 605, 621, 624, 629, 632, 641, 644, 645, 648, 653, 656, 657, 660, 679, 682, 696, 699, 700, 703, 704, 707, 712, 715, 716, 719, 720, 723, 733, 738, 743, 746, 747, 786, 820, 852, 864, 1055, 1056, 1057, 1059, 1071, 1076, 1079, 1080, 1083, 1084, 1087, 1092, 1095, 1096, 1100, 1103, 1104, 1105, 1108, 1109, 1112], "well": [177, 178, 354, 362, 369, 370, 381, 747, 786, 865, 911, 913], "inf": [177, 178, 403, 747, 786, 820, 865, 929, 931], "wise": [177, 178, 365, 370, 393, 394, 395, 396, 397, 398, 399, 400, 510, 511, 514, 515, 523, 526, 528, 531, 536, 540, 543, 548, 551, 552, 555, 556, 559, 560, 563, 564, 567, 568, 571, 584, 587, 589, 592, 593, 596, 600, 608, 609, 612, 613, 616, 617, 620, 633, 636, 637, 640, 657, 660, 661, 664, 665, 668, 669, 672, 673, 676, 677, 678, 679, 682, 688, 691, 696, 699, 700, 703, 728, 732, 747, 773, 951, 952, 955], "identical_array_shap": [177, 178], "exclus": [177, 178, 355, 359, 370, 404, 405, 747, 765, 793, 794, 796, 821, 833, 1038, 1040, 1041], "identical_config": [177, 178], "identical_structur": [177, 178], "if_exist": [177, 178], "inplace_upd": [177, 178, 362, 747, 1123, 1124], "key_chains_contain": [177, 178], "sub_str": [177, 178], "join": [177, 178, 951, 957, 960, 995, 998, 1113], "list_stack": [177, 178, 368], "dim": [177, 178, 360, 747, 800, 1134, 1145], "func": [177, 178, 359, 401, 402, 460, 504, 747, 758, 821, 828, 1015, 1028], "map_cont": [177, 178], "include_self": [177, 178], "possibi": [177, 178], "place": [177, 178, 346, 349, 350, 351, 352, 354, 355, 359, 361, 363, 370, 404, 405, 406, 407, 408, 409, 411, 412, 416, 417, 418, 421, 422, 423, 432, 435, 460, 505, 510, 523, 528, 531, 548, 551, 568, 571, 572, 575, 580, 605, 688, 691, 704, 707, 720, 723, 724, 727, 733, 738, 747, 775, 789, 790, 791, 852, 855, 864, 865, 872, 951, 965, 968, 969, 972, 985, 988, 1033, 1034, 1037, 1055, 1056, 1057, 1060, 1061, 1064, 1071, 1076, 1079, 1104, 1105, 1108, 1150, 1151, 1152, 1153, 1154, 1155], "matrix": [177, 178, 404, 415, 419, 420, 747, 748, 751, 759, 852, 861, 865, 866, 868, 872, 875, 877, 878, 880, 881, 883, 884, 886, 887, 890, 891, 893, 894, 895, 897, 898, 900, 904, 906, 907, 909, 911, 913, 914, 916, 917, 919, 923, 925, 932, 934, 1134, 1144], "p": [177, 178, 182, 209, 314, 315, 345, 346, 404, 415, 747, 759, 760, 761, 762, 852, 860, 865, 891, 893, 929, 931, 1134, 1142], "integ": [177, 178, 359, 360, 367, 404, 405, 411, 423, 446, 449, 451, 510, 511, 514, 548, 551, 552, 555, 556, 559, 560, 563, 564, 567, 568, 571, 572, 575, 587, 605, 608, 609, 612, 673, 676, 696, 699, 700, 703, 704, 707, 743, 746, 865, 894, 926, 928, 929, 931, 951, 990, 1038, 1040, 1041, 1048, 1071, 1076, 1079, 1080, 1083, 1084, 1087, 1088, 1091, 1092, 1095, 1096, 1100, 1103, 1104, 1105, 1108, 1109, 1112], "flatten": [177, 178, 747, 774, 865, 901, 903, 929, 931, 951, 977, 980, 985, 988, 1050, 1051, 1052, 1055, 1056, 1057, 1059], "left": [177, 178, 345, 346, 352, 360, 510, 556, 559, 865, 878, 880, 891, 893, 914, 1050, 1051, 1113], "broadcast": [177, 178, 350, 351, 352, 359, 360, 393, 396, 423, 430, 431, 460, 505, 510, 511, 514, 515, 518, 519, 522, 523, 526, 528, 531, 532, 535, 536, 540, 543, 548, 551, 552, 555, 556, 559, 560, 563, 564, 567, 568, 571, 572, 575, 576, 579, 580, 583, 584, 587, 589, 592, 597, 600, 601, 604, 605, 608, 609, 612, 616, 617, 620, 621, 624, 625, 628, 629, 632, 633, 636, 637, 640, 641, 644, 645, 648, 649, 652, 653, 656, 657, 660, 661, 664, 665, 668, 669, 672, 673, 676, 677, 678, 679, 682, 684, 687, 688, 691, 696, 699, 700, 703, 704, 707, 708, 711, 712, 715, 716, 719, 720, 723, 724, 727, 728, 732, 733, 738, 747, 760, 762, 773, 865, 886, 887, 890, 891, 893, 895, 897, 904, 906, 911, 913, 926, 928, 929, 931, 935, 936, 939, 941, 944, 946, 949, 951, 952, 955, 965, 968, 969, 972, 973, 976, 977, 980, 985, 988, 991, 994, 995, 998, 999, 1002, 1038, 1040, 1041, 1050, 1051, 1052, 1060, 1066, 1069, 1071, 1076, 1079, 1080, 1083, 1084, 1087, 1088, 1091, 1092, 1095, 1096, 1100, 1103, 1104, 1105, 1108, 1109, 1112], "correctli": [177, 178, 345, 354, 359, 360, 363, 369, 382, 865, 891, 893, 1050, 1051], "max_depth": [177, 178, 460, 464, 467, 474, 484, 488, 492, 747, 785, 1015, 1027], "multi_map": [177, 178, 359], "map_nest": [177, 178, 182, 197, 200, 202, 203, 204, 205, 210, 217, 224, 227, 228, 235, 236, 241, 242, 244, 245, 246, 252, 256, 259, 272, 312, 313, 322, 323, 326, 327, 526, 540, 542, 548, 550, 556, 558, 560, 562, 564, 566, 568, 570, 587, 591, 592, 600, 608, 609, 611, 615, 616, 617, 619, 633, 635, 637, 639, 657, 659, 661, 663, 669, 671, 673, 675, 688, 690, 696, 698, 700, 702, 887, 889, 957, 959, 995, 997], "leftmost": [177, 178, 1015, 1028], "multi_map_in_static_method": [177, 178, 359], "fn_name": [177, 178], "num_arrai": [177, 178], "overwrite_at_key_chain": [177, 178], "overwrit": [177, 178, 362, 365, 460, 504], "target_dict": [177, 178], "return_dict": [177, 178], "prune_empti": [177, 178], "keep_non": [177, 178], "empti": [177, 178, 179, 180, 358, 360, 361, 404, 405, 1071, 1092, 1095, 1096, 1104, 1105, 1108, 1109, 1112], "prune_key_chain": [177, 178], "key1": [177, 178, 369], "key2": [177, 178], "key3": [177, 178], "prune_key_from_key_chain": [177, 178], "absolut": [177, 178, 344, 510, 511, 514, 865, 874, 910], "certain": [177, 178, 345, 382, 404, 405, 413, 414], "decid": [177, 178, 345, 1015, 1026], "remov": [177, 178, 346, 347, 348, 351, 354, 355, 360, 362, 370, 865, 875, 877, 887, 890, 923, 925, 951, 991, 994, 1011, 1012, 1013], "prune_kei": [177, 178], "prune_keys_from_key_chain": [177, 178], "remove_key_length_limit": [177, 178], "remove_print_limit": [177, 178], "reshape_lik": [177, 178], "leading_shap": [177, 178], "return_cont": [177, 178], "restructur": [177, 178], "keep_orig": [177, 178], "transpos": [177, 178, 367, 370, 460, 491, 852, 854, 856, 858, 865, 886, 898, 900, 904, 906, 1113, 1134, 1136, 1138, 1140], "old": [177, 178, 345, 362], "keep": [177, 178, 345, 346, 353, 359, 366, 368, 370, 747, 819], "start": [177, 178, 344, 345, 346, 347, 348, 349, 351, 352, 360, 364, 365, 367, 368, 369, 381, 382, 404, 405, 413, 414, 460, 475], "restructure_key_chain": [177, 178], "keychain_map": [177, 178], "set_at_key_chain": [177, 178], "set_at_kei": [177, 178], "set_framework": [177, 178, 365, 367, 368, 370], "set_ivy_backend": [177, 178], "ivy_backend": [177, 178], "attribut": [177, 178, 351, 359, 360, 366, 367, 368, 369, 423, 443, 444, 445, 446, 460, 500], "show": [177, 178, 345, 346, 352, 362, 381, 382, 1113], "show_sub_contain": [177, 178], "sub_cont_or_keychain": [177, 178], "shuffl": [177, 178, 1038, 1113], "seed_valu": [177, 178, 1038, 1048], "align": [177, 178, 345, 365, 367, 1113, 1119], "seed": [177, 178, 179, 180, 1038, 1113], "shuffle_h5_fil": [177, 178], "dataset": [177, 178, 368, 380, 1113], "size_ordered_arrai": [177, 178], "keychain": [177, 178], "smallest": [177, 178, 423, 443, 446, 510, 572, 575], "largest": [177, 178, 381, 423, 443, 446, 865, 914], "slice_kei": [177, 178], "key_slic": [177, 178], "all_depth": [177, 178], "slice_via_kei": [177, 178], "sort_by_kei": [177, 178], "num_or_size_split": [177, 178, 365, 951, 990], "with_remaind": [177, 178, 951, 990], "constitu": [177, 178, 370], "dimension": [177, 178, 404, 405, 409, 415, 865, 869, 871, 872, 886, 887, 890, 895, 897, 901, 903, 904, 906, 926, 928, 929, 931, 951, 990, 1050, 1051, 1052, 1053, 1071, 1076, 1079, 1080, 1083, 1084, 1087, 1088, 1091, 1092, 1095, 1096, 1100, 1103, 1104, 1105, 1108, 1109, 1112], "evenli": [177, 178, 404, 405, 413, 414, 951, 990], "store": [177, 178, 351, 356, 358, 359, 365, 367, 368, 369, 747, 774, 821, 850, 865, 923, 925, 951, 990, 1146, 1147], "stop_gradi": [177, 178, 179, 180, 182, 186, 226, 232, 233, 253, 273, 283, 284, 285, 287, 316, 317, 369, 460, 504, 821, 824, 825, 826, 827, 829, 830, 831, 832, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 1011, 1012, 1013, 1014, 1113, 1150, 1151, 1152, 1153, 1154, 1155], "preserve_typ": [177, 178, 821, 847], "stop": [177, 178, 365, 382, 404, 405, 413, 414, 460, 475, 504, 821, 824, 826, 829, 831, 834, 836, 838, 840, 842, 844, 847, 1011, 1012, 1013, 1014, 1150, 1151, 1152, 1153, 1154, 1155], "alwai": [177, 178, 346, 347, 350, 351, 355, 356, 358, 359, 362, 363, 365, 367, 382, 423, 429, 510, 523, 679, 682, 747, 791, 821, 833, 847], "structural_diff": [177, 178], "to_devic": [177, 178, 460, 479], "move": [177, 178, 346, 350, 460, 505], "cuda": [177, 178, 365, 368, 382, 404, 413, 414, 460, 469, 476, 501, 747, 775, 776, 779, 800, 803, 804, 1038, 1039, 1040, 1041, 1044, 1046, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1154, 1156, 1157], "cpu": [177, 178, 346, 361, 382, 404, 413, 414, 460, 479, 480, 482, 496, 499, 501, 505, 506, 508, 509, 747, 775, 776, 779, 800, 803, 804, 1038, 1039, 1040, 1041, 1043, 1044, 1046, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1154, 1156, 1157], "target": [177, 178, 349, 364, 368, 369, 370, 460, 478, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 1113], "to_dict": [177, 178], "to_disk_as_hdf5": [177, 178, 368], "starting_index": [177, 178], "max_batch_s": [177, 178], "read": [177, 178, 348, 1113], "r": [177, 178, 345, 747, 756, 819, 865, 907, 909, 932, 934], "w": [177, 178, 182, 273, 283, 284, 285, 287, 316, 317, 365, 368, 369, 747, 756, 821, 823, 824, 826, 827, 829, 831, 832, 834, 836, 837, 838, 840, 841, 842, 844, 845, 852, 853, 854, 855, 856, 857, 858, 859], "later": [177, 178, 747, 758], "append": [177, 178, 348, 354, 365, 368, 510, 556, 559, 865, 875, 877, 887, 890], "to_disk_as_json": [177, 178, 368], "to_disk_as_pickl": [177, 178, 368], "to_flat_list": [177, 178], "to_iter": [177, 178, 359], "leaf_keys_onli": [177, 178], "to_iterator_kei": [177, 178], "to_iterator_valu": [177, 178], "to_json": [177, 178], "to_list": [177, 178, 747, 1113], "to_multi_dev": [177, 178], "multidevcontain": [177, 178, 179], "distributedarrai": [177, 178], "to_numpi": [177, 178, 368, 747, 1113], "update_backend": [177, 178], "to_raw": [177, 178], "raw": [177, 178, 351], "trim_kei": [177, 178], "max_length": [177, 178], "try_kc": [177, 178], "tri": [177, 178], "self": [177, 178, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 358, 359, 365, 367, 368, 369, 370, 432, 434, 460, 511, 513, 517, 518, 519, 521, 525, 526, 528, 530, 532, 534, 538, 539, 540, 542, 544, 546, 548, 550, 552, 554, 556, 558, 560, 562, 564, 566, 568, 570, 572, 574, 578, 579, 582, 583, 586, 587, 591, 592, 593, 595, 599, 600, 601, 603, 607, 608, 609, 611, 615, 616, 617, 619, 621, 623, 625, 627, 629, 631, 633, 635, 637, 639, 641, 643, 645, 647, 649, 651, 653, 655, 657, 659, 661, 663, 665, 667, 669, 671, 673, 675, 679, 681, 684, 686, 688, 690, 692, 694, 696, 698, 700, 702, 704, 706, 708, 710, 712, 714, 716, 718, 720, 722, 724, 726, 728, 731, 736, 737, 741, 742, 743, 745, 748, 750, 760, 761, 776, 778, 824, 825, 829, 830, 834, 835, 838, 839, 842, 843, 887, 889, 936, 938, 941, 943, 946, 948, 952, 954, 957, 959, 961, 963, 965, 967, 969, 971, 973, 975, 977, 979, 981, 983, 985, 987, 991, 993, 995, 997, 999, 1001, 1003, 1005, 1007, 1009, 1034, 1036, 1044, 1045, 1061, 1063, 1066, 1068, 1072, 1074, 1076, 1078, 1080, 1082, 1084, 1086, 1088, 1090, 1092, 1094, 1098, 1099, 1100, 1102, 1105, 1107, 1109, 1111, 1113, 1150, 1154], "arbitrari": [177, 178, 354, 355, 359, 362, 363, 369, 382, 404, 415, 423, 430, 451, 460, 489, 490, 492], "concatten": [177, 178, 460, 489, 490, 491, 492, 504], "unstack": [177, 178, 365, 368, 747, 1113], "dim_siz": [177, 178, 460], "update_config": [177, 178], "global_norm": [177, 178, 182, 209, 314, 315, 760, 761], "vector": [177, 178, 381, 404, 415, 747, 760, 762, 852, 861, 865, 869, 871, 878, 880, 887, 890, 901, 903, 914, 916, 917, 919, 926, 928, 929, 931, 932, 934, 1134, 1144], "with_default_key_color": [177, 178], "with_entries_as_list": [177, 178], "with_ivy_backend": [177, 178], "with_key_length_limit": [177, 178, 368], "with_print_ind": [177, 178, 368], "with_print_limit": [177, 178, 368], "with_print_line_spac": [177, 178], "containerwithcr": [179, 180, 306], "containerwithdatatyp": [179, 180, 308], "containerwithdevic": [179, 180, 310], "containerwithelementwis": [179, 180, 312, 359], "containerwithgener": [179, 180, 314], "containerwithgradi": [179, 180, 316], "containerwithimag": [179, 180, 318], "containerwithlay": [179, 180, 320], "containerwithlinearalgebra": [179, 180, 322], "containerwithloss": [179, 180, 324], "containerwithmanipul": [179, 180, 326, 347], "containerwithnorm": [179, 180, 328], "containerwithrandom": [179, 180, 330], "containerwithsearch": [179, 180, 332], "containerwithset": [179, 180, 334], "containerwithsort": [179, 180, 336], "containerwithstatist": [179, 180, 338], "containerwithutil": [179, 180, 340], "__add__": [179, 180, 182, 351, 352, 358, 359, 363, 367], "special": [179, 180, 182, 347, 350, 351, 352, 358, 363, 510, 511, 514, 515, 518, 519, 522, 523, 526, 528, 531, 532, 535, 536, 540, 543, 568, 571, 572, 575, 576, 579, 580, 583, 597, 600, 601, 604, 605, 641, 644, 645, 648, 653, 656, 657, 660, 679, 682, 696, 699, 700, 703, 704, 707, 708, 711, 712, 715, 716, 719, 720, 723, 733, 738, 743, 746, 1071, 1076, 1079, 1080, 1083, 1084, 1087, 1092, 1095, 1096, 1100, 1103], "11": [179, 180, 182, 187, 274, 288, 312, 313, 330, 331, 352, 359, 510, 523, 525, 527, 548, 551, 657, 704, 707, 747, 765, 775, 865, 875, 877, 901, 903, 935, 946, 949, 951, 969, 972, 977, 980, 1038, 1040, 1041, 1042, 1050, 1054, 1055, 1056, 1071, 1072, 1075, 1099], "__radd__": [179, 180, 182, 351, 352], "revers": [179, 180, 182, 347, 351, 352, 370, 382, 747, 768, 951, 969, 972], "adam_step": [179, 180, 821], "arang": [179, 180, 360, 404, 413, 414, 1071, 1072, 1075, 1099, 1113], "arg_info": [179, 180, 747], "arg_nam": [179, 180, 747], "argmax": [179, 180, 1050, 1113], "argmin": [179, 180, 1050, 1113], "array_equ": [179, 180, 747], "as_ivy_dev": [179, 180, 367, 460], "as_ivy_dtyp": [179, 180, 423], "as_native_dev": [179, 180, 460], "as_native_dtyp": [179, 180, 423], "asarrai": [179, 180, 362, 404, 852, 853, 1055, 1057], "assert_supports_inplac": [179, 180, 747], "astyp": [179, 180, 360, 362, 423], "broadcast_arrai": [179, 180, 423], "broadcast_to": [179, 180, 360, 423], "cache_fn": [179, 180, 355, 747], "clear_mem_on_dev": [179, 180, 460], "clip_matrix_norm": [179, 180, 747], "closest_valid_dtyp": [179, 180, 423], "container_typ": [179, 180, 747], "conv1d": [179, 180, 852, 1134], "conv1d_transpos": [179, 180, 852], "conv2d": [179, 180, 852, 1113, 1134], "conv2d_transpos": [179, 180, 852], "conv3d": [179, 180, 852, 1134], "conv3d_transpos": [179, 180, 852], "copy_arrai": [179, 180, 747], "cumprod": [179, 180, 370, 747], "cumsum": [179, 180, 747, 1113], "current_backend_str": [179, 180, 747], "default_devic": [179, 180, 361, 365, 460, 498, 501, 508], "default_dtyp": [179, 180, 355, 360, 423], "default_float_dtyp": [179, 180, 360, 423], "default_int_dtyp": [179, 180, 360, 423], "depthwise_conv2d": [179, 180, 852, 1113], "dev_clone_arrai": [179, 180, 460], "dev_clone_it": [179, 180, 460], "dev_clone_nest": [179, 180, 460], "dev_dist_arrai": [179, 180, 460], "dev_dist_it": [179, 180, 460], "dev_dist_nest": [179, 180, 460], "dev_unifi": [179, 180, 460], "dev_unify_arrai": [179, 180, 460], "dev_unify_it": [179, 180, 460], "dev_unify_nest": [179, 180, 460], "dev_util": [179, 180, 361, 460], "dropout": [179, 180, 368, 852, 1134, 1145], "dtype_bit": [179, 180, 423], "empty_lik": [179, 180, 404], "execute_with_gradi": [179, 180, 359, 368, 369, 370, 382, 821, 1113], "ey": [179, 180, 370, 404, 852, 855, 859], "finfo": [179, 180, 423], "floormod": [179, 180, 747, 1113], "fourier_encod": [179, 180, 747], "from_dlpack": [179, 180, 404], "full_lik": [179, 180, 404], "function_supported_dtyp": [179, 180, 423], "function_unsupported_dtyp": [179, 180, 423], "gelu": [179, 180, 393, 1120], "get_all_arrays_in_memori": [179, 180, 747], "get_all_ivy_arrays_on_dev": [179, 180, 361, 460], "get_min_bas": [179, 180, 747], "get_min_denomin": [179, 180, 747], "get_num_dim": [179, 180, 747, 1113], "get_referrers_recurs": [179, 180, 747], "gpu_is_avail": [179, 180, 460], "handle_nest": [179, 180, 355, 359, 383], "handle_out_argu": [179, 180, 357, 360, 361, 362, 363, 383], "iinfo": [179, 180, 423], "indices_wher": [179, 180, 747, 1113], "infer_devic": [179, 180, 360, 361, 363, 383], "infer_dtyp": [179, 180, 360, 361, 363, 383], "inplace_arrays_support": [179, 180, 747], "inplace_decr": [179, 180, 747], "inplace_incr": [179, 180, 747], "inplace_variables_support": [179, 180, 747], "inputs_to_native_arrai": [179, 180, 358, 383], "invalid_dtyp": [179, 180, 423], "is_float_dtyp": [179, 180, 423], "is_int_dtyp": [179, 180, 423, 747, 817], "is_ivy_contain": [179, 180, 747], "leaky_relu": [179, 180, 393, 1113], "linear": [179, 180, 351, 365, 368, 369, 370, 393, 394, 395, 396, 747, 774, 852, 860, 911, 913, 1113, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141], "linspac": [179, 180, 365, 404, 405, 1113], "logspac": [179, 180, 365, 404], "lstm_updat": [179, 180, 365, 852], "match_kwarg": [179, 180, 747], "matrix_pow": [179, 180, 865], "meshgrid": [179, 180, 404], "multi_head_attent": [179, 180, 359, 362, 852], "multinomi": [179, 180, 1038], "nonzero": [179, 180, 510, 523, 679, 682, 1050], "num_arrays_in_memori": [179, 180, 747], "num_cpu_cor": [179, 180, 361, 460], "num_gpu": [179, 180, 354, 361, 460], "num_ivy_arrays_on_dev": [179, 180, 460], "one_hot": [179, 180, 370, 747, 1113], "ones_lik": [179, 180, 370, 404, 1113], "outputs_to_ivy_arrai": [179, 180, 358, 360, 361, 363, 383], "percent_used_mem_on_dev": [179, 180, 460], "print_all_arrays_in_memori": [179, 180, 747], "print_all_ivy_arrays_on_dev": [179, 180, 460], "promote_typ": [179, 180, 423], "randint": [179, 180, 182, 288, 330, 331, 1038, 1042, 1113], "random_norm": [179, 180, 852, 855, 858, 859, 865, 914, 1038, 1055, 1056], "result_typ": [179, 180, 360, 423], "scaled_dot_product_attent": [179, 180, 852], "scatter_flat": [179, 180, 747], "scatter_nd": [179, 180, 367, 747, 1113], "set_default_devic": [179, 180, 361, 460, 508], "set_default_dtyp": [179, 180, 355, 360, 423], "set_default_float_dtyp": [179, 180, 360, 423], "set_default_int_dtyp": [179, 180, 360, 423], "set_min_bas": [179, 180, 747], "set_min_denomin": [179, 180, 747], "set_queue_timeout": [179, 180, 747], "set_split_factor": [179, 180, 460], "set_tmp_dir": [179, 180, 747], "set_with_grad": [179, 180, 821], "shape_to_tupl": [179, 180, 360, 747], "sigmoid": [179, 180, 365, 368, 369, 393, 1113], "slogdet": [179, 180, 865], "softplu": [179, 180, 393, 1113], "split_factor": [179, 180, 460, 469], "split_func_cal": [179, 180, 460], "stable_divid": [179, 180, 355, 747], "stable_pow": [179, 180, 747], "static_ab": [179, 180], "static_aco": [179, 180], "static_acosh": [179, 180], "static_adam_step": [179, 180], "static_al": [179, 180], "static_ani": [179, 180], "static_arang": [179, 180], "static_arg_info": [179, 180], "static_arg_nam": [179, 180], "static_argmax": [179, 180], "static_argmin": [179, 180], "static_arrai": [179, 180], "static_array_equ": [179, 180], "static_arrays_equ": [179, 180], "static_as_ivy_dev": [179, 180], "static_as_ivy_dtyp": [179, 180], "static_as_native_dev": [179, 180], "static_as_native_dtyp": [179, 180], "static_asarrai": [179, 180], "static_asin": [179, 180], "static_asinh": [179, 180], "static_assert_supports_inplac": [179, 180], "static_astyp": [179, 180], "static_atan": [179, 180], "static_atan2": [179, 180], "static_atanh": [179, 180], "static_bitwise_and": [179, 180], "static_bitwise_invert": [179, 180], "static_bitwise_left_shift": [179, 180], "static_bitwise_or": [179, 180], "static_bitwise_right_shift": [179, 180], "static_bitwise_xor": [179, 180], "static_broadcast_arrai": [179, 180], "static_broadcast_to": [179, 180], "static_cache_fn": [179, 180], "static_ceil": [179, 180], "static_choleski": [179, 180], "static_clear_mem_on_dev": [179, 180], "static_clip_matrix_norm": [179, 180], "static_clip_vector_norm": [179, 180], "static_closest_valid_dtyp": [179, 180], "static_concat": [179, 180], "static_constant_pad": [179, 180], "static_container_typ": [179, 180], "static_conv1d": [179, 180], "static_conv1d_transpos": [179, 180], "static_conv2d": [179, 180], "static_conv2d_transpos": [179, 180], "static_conv3d": [179, 180], "static_conv3d_transpos": [179, 180], "static_copy_arrai": [179, 180], "static_co": [179, 180], "static_cosh": [179, 180], "static_cross": [179, 180], "static_cumprod": [179, 180], "static_cumsum": [179, 180], "static_current_backend": [179, 180], "static_current_backend_str": [179, 180], "static_default": [179, 180], "static_default_devic": [179, 180], "static_default_dtyp": [179, 180], "static_default_float_dtyp": [179, 180], "static_default_int_dtyp": [179, 180], "static_depthwise_conv2d": [179, 180], "static_det": [179, 180], "static_dev": [179, 180], "static_dev_clon": [179, 180], "static_dev_clone_arrai": [179, 180], "static_dev_clone_it": [179, 180], "static_dev_clone_nest": [179, 180], "static_dev_dist": [179, 180], "static_dev_dist_arrai": [179, 180], "static_dev_dist_it": [179, 180], "static_dev_dist_nest": [179, 180], "static_dev_unifi": [179, 180], "static_dev_unify_arrai": [179, 180], "static_dev_unify_it": [179, 180], "static_dev_unify_nest": [179, 180], "static_dev_util": [179, 180], "static_diagon": [179, 180], "static_dropout": [179, 180], "static_dtyp": [179, 180], "static_dtype_bit": [179, 180], "static_eigh": [179, 180], "static_eigvalsh": [179, 180], "static_einops_rearrang": [179, 180], "static_einops_reduc": [179, 180], "static_einops_repeat": [179, 180], "static_einsum": [179, 180], "static_empti": [179, 180], "static_empty_lik": [179, 180], "static_equ": [179, 180], "static_erf": [179, 180], "static_execute_with_gradi": [179, 180], "static_exist": [179, 180], "static_exp": [179, 180], "static_expand_dim": [179, 180], "static_expm1": [179, 180], "static_ey": [179, 180], "static_finfo": [179, 180], "static_flip": [179, 180], "static_floor": [179, 180], "static_floor_divid": [179, 180], "static_floormod": [179, 180], "static_fourier_encod": [179, 180], "static_from_dlpack": [179, 180], "static_ful": [179, 180], "static_full_lik": [179, 180], "static_function_supported_dtyp": [179, 180], "static_function_unsupported_dtyp": [179, 180], "static_gath": [179, 180], "static_gelu": [179, 180], "static_get_all_arrays_in_memori": [179, 180], "static_get_all_ivy_arrays_on_dev": [179, 180], "static_get_min_bas": [179, 180], "static_get_min_denomin": [179, 180], "static_get_num_dim": [179, 180], "static_get_referrers_recurs": [179, 180], "static_gpu_is_avail": [179, 180], "static_great": [179, 180], "static_greater_equ": [179, 180], "static_handle_nest": [179, 180], "static_handle_out_argu": [179, 180], "static_has_nan": [179, 180], "static_iinfo": [179, 180], "static_indices_wher": [179, 180], "static_infer_devic": [179, 180], "static_infer_dtyp": [179, 180], "static_inplace_arrays_support": [179, 180], "static_inplace_decr": [179, 180], "static_inplace_incr": [179, 180], "static_inplace_upd": [179, 180], "static_inplace_variables_support": [179, 180], "static_inputs_to_native_arrai": [179, 180], "static_inv": [179, 180], "static_invalid_dtyp": [179, 180], "static_is_arrai": [179, 180], "static_is_float_dtyp": [179, 180], "static_is_int_dtyp": [179, 180], "static_is_ivy_arrai": [179, 180], "static_is_ivy_contain": [179, 180], "static_is_native_arrai": [179, 180], "static_is_vari": [179, 180], "static_isfinit": [179, 180], "static_isinf": [179, 180], "static_isnan": [179, 180], "static_layer_norm": [179, 180], "static_leaky_relu": [179, 180], "static_less": [179, 180], "static_less_equ": [179, 180], "static_linear": [179, 180], "static_linspac": [179, 180], "static_log": [179, 180], "static_log10": [179, 180], "static_log1p": [179, 180], "static_log2": [179, 180], "static_logaddexp": [179, 180], "static_logical_and": [179, 180], "static_logical_not": [179, 180], "static_logical_or": [179, 180], "static_logical_xor": [179, 180], "static_logspac": [179, 180], "static_lstm_upd": [179, 180], "static_match_kwarg": [179, 180], "static_matmul": [179, 180], "static_matrix_norm": [179, 180], "static_matrix_pow": [179, 180], "static_matrix_rank": [179, 180], "static_matrix_transpos": [179, 180], "static_max": [179, 180], "static_maximum": [179, 180], "static_mean": [179, 180], "static_meshgrid": [179, 180], "static_min": [179, 180], "static_minimum": [179, 180], "static_multi_head_attent": [179, 180], "static_multinomi": [179, 180], "static_multiprocess": [179, 180], "static_native_arrai": [179, 180], "static_neg": [179, 180], "static_nonzero": [179, 180], "static_not_equ": [179, 180], "static_num_arrays_in_memori": [179, 180], "static_num_cpu_cor": [179, 180], "static_num_gpu": [179, 180], "static_num_ivy_arrays_on_dev": [179, 180], "static_one_hot": [179, 180], "static_on": [179, 180], "static_ones_lik": [179, 180], "static_out": [179, 180], "static_outputs_to_ivy_arrai": [179, 180], "static_percent_used_mem_on_dev": [179, 180], "static_permute_dim": [179, 180], "static_pinv": [179, 180], "static_posit": [179, 180], "static_pow": [179, 180], "static_print_all_arrays_in_memori": [179, 180], "static_print_all_ivy_arrays_on_dev": [179, 180], "static_prod": [179, 180], "static_promote_typ": [179, 180], "static_qr": [179, 180], "static_queue_timeout": [179, 180], "static_random_norm": [179, 180], "static_relu": [179, 180], "static_remaind": [179, 180], "static_repeat": [179, 180], "static_reshap": [179, 180], "static_result_typ": [179, 180], "static_round": [179, 180], "static_scaled_dot_product_attent": [179, 180], "static_scatter_flat": [179, 180], "static_scatter_nd": [179, 180], "static_se": [179, 180], "static_set_default_devic": [179, 180], "static_set_default_dtyp": [179, 180], "static_set_default_float_dtyp": [179, 180], "static_set_default_int_dtyp": [179, 180], "static_set_min_bas": [179, 180], "static_set_min_denomin": [179, 180], "static_set_queue_timeout": [179, 180], "static_set_split_factor": [179, 180], "static_set_tmp_dir": [179, 180], "static_set_with_grad": [179, 180], "static_shap": [179, 180], "static_shape_to_tupl": [179, 180], "static_shuffl": [179, 180], "static_sigmoid": [179, 180], "static_sign": [179, 180], "static_sin": [179, 180], "static_sinh": [179, 180], "static_slogdet": [179, 180], "static_softmax": [179, 180], "static_softplu": [179, 180], "static_solv": [179, 180], "static_split": [179, 180], "static_split_factor": [179, 180], "static_split_func_cal": [179, 180], "static_sqrt": [179, 180], "static_squar": [179, 180], "static_squeez": [179, 180], "static_stable_divid": [179, 180], "static_stable_pow": [179, 180], "static_stack": [179, 180], "static_std": [179, 180], "static_stop_gradi": [179, 180], "static_sum": [179, 180], "static_supports_inplac": [179, 180], "static_svd": [179, 180], "static_svdv": [179, 180], "static_swapax": [179, 180], "static_tensordot": [179, 180], "static_til": [179, 180], "static_tmp_dir": [179, 180], "static_to_devic": [179, 180], "static_to_list": [179, 180], "static_to_native_arrays_and_back": [179, 180], "static_to_numpi": [179, 180], "static_to_scalar": [179, 180], "static_total_mem_on_dev": [179, 180], "static_tpu_is_avail": [179, 180], "static_trac": [179, 180], "static_tril": [179, 180], "static_triu": [179, 180], "static_trunc": [179, 180], "static_try_else_non": [179, 180], "static_type_promote_arrai": [179, 180], "static_unique_al": [179, 180], "static_unique_count": [179, 180], "static_unique_invers": [179, 180], "static_unique_valu": [179, 180], "static_unset_default_devic": [179, 180], "static_unset_default_dtyp": [179, 180], "static_unset_default_float_dtyp": [179, 180], "static_unset_default_int_dtyp": [179, 180], "static_unset_with_grad": [179, 180], "static_unstack": [179, 180], "static_used_mem_on_dev": [179, 180], "static_valid_dtyp": [179, 180], "static_value_is_nan": [179, 180], "static_var": [179, 180], "static_vari": [179, 180], "static_variable_data": [179, 180], "static_vecdot": [179, 180], "static_vector_norm": [179, 180], "static_vector_to_skew_symmetric_matrix": [179, 180], "static_wher": [179, 180], "static_with_grad": [179, 180], "static_zero_pad": [179, 180], "static_zero": [179, 180], "static_zeros_lik": [179, 180], "supports_inplac": [179, 180, 747], "tmp_dir": [179, 180, 747], "to_native_arrays_and_back": [179, 180, 357, 363, 383], "to_scalar": [179, 180, 747], "total_mem_on_dev": [179, 180, 361, 460], "tpu_is_avail": [179, 180, 460], "tril": [179, 180, 404], "triu": [179, 180, 404], "try_else_non": [179, 180, 747], "type_promote_arrai": [179, 180, 423], "unique_al": [179, 180, 1055], "unique_count": [179, 180, 1055], "unique_invers": [179, 180, 1055], "unique_valu": [179, 180, 1055], "unset_default_devic": [179, 180, 460], "unset_default_dtyp": [179, 180, 423], "unset_default_float_dtyp": [179, 180, 423], "unset_default_int_dtyp": [179, 180, 423], "unset_with_grad": [179, 180, 821], "used_mem_on_dev": [179, 180, 460], "valid_dtyp": [179, 180, 423], "value_is_nan": [179, 180, 747], "variable_data": [179, 180, 821], "with_grad": [179, 180, 821, 846], "zeros_lik": [179, 180, 404, 951, 952, 955, 1113], "at_dev": [179, 181, 182, 460, 473, 474], "container_method": [182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 432, 434, 436, 511, 513, 517, 518, 519, 521, 525, 526, 527, 528, 530, 532, 534, 538, 539, 540, 542, 544, 546, 548, 550, 552, 554, 556, 558, 560, 562, 564, 566, 568, 570, 572, 574, 578, 579, 582, 583, 586, 587, 588, 591, 592, 593, 595, 599, 600, 601, 603, 607, 608, 609, 611, 615, 616, 617, 619, 621, 623, 625, 627, 629, 631, 633, 635, 637, 639, 641, 643, 645, 647, 649, 651, 653, 655, 657, 659, 661, 663, 665, 667, 669, 671, 673, 675, 679, 681, 683, 684, 686, 688, 690, 692, 694, 696, 698, 700, 702, 704, 706, 708, 710, 712, 714, 716, 718, 720, 722, 724, 726, 728, 729, 731, 734, 736, 737, 739, 741, 742, 743, 745, 748, 750, 752, 760, 761, 776, 778, 780, 824, 825, 827, 829, 830, 832, 834, 835, 837, 838, 839, 841, 842, 843, 845, 887, 889, 936, 938, 940, 941, 943, 945, 946, 948, 950, 952, 954, 956, 957, 959, 961, 963, 965, 967, 969, 971, 973, 975, 977, 979, 981, 983, 985, 987, 989, 991, 993, 995, 997, 999, 1001, 1003, 1005, 1007, 1009, 1034, 1036, 1040, 1042, 1044, 1045, 1047, 1061, 1063, 1065, 1066, 1068, 1070, 1072, 1074, 1076, 1078, 1080, 1082, 1084, 1086, 1088, 1090, 1092, 1094, 1098, 1099, 1100, 1102, 1105, 1107, 1109, 1111], "adam_upd": [182, 316, 317, 369, 821], "dcdw": [182, 186, 226, 232, 233, 273, 283, 284, 285, 316, 317, 821, 823, 824, 825, 826, 827, 829, 830, 831, 832, 834, 835, 836, 837, 838, 839, 840, 841], "lr": [182, 186, 226, 232, 233, 253, 273, 283, 284, 285, 287, 316, 317, 368, 369, 821, 824, 825, 826, 827, 829, 830, 831, 832, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 1150, 1151, 1152, 1153, 1154, 1155], "mw_tm1": [182, 186, 232, 273, 284, 316, 317, 821, 824, 825, 826, 827, 834, 835, 836, 837], "vw_tm1": [182, 186, 232, 273, 284, 316, 317, 821, 824, 825, 826, 827, 834, 835, 836, 837], "beta1": [182, 186, 232, 273, 284, 316, 317, 369, 821, 823, 824, 825, 826, 827, 834, 835, 836, 837, 1150, 1151, 1152], "beta2": [182, 186, 232, 273, 284, 316, 317, 369, 821, 823, 824, 825, 826, 827, 834, 835, 836, 837, 1150, 1151, 1152], "999": [182, 186, 232, 273, 284, 295, 301, 312, 313, 316, 317, 369, 510, 539, 544, 738, 739, 741, 821, 823, 824, 825, 826, 827, 834, 835, 836, 837, 1150, 1151, 1152], "static_all_equ": [182, 189, 314, 315, 748, 750], "int32": [182, 206, 278, 308, 309, 360, 423, 432, 434, 435, 436, 444, 747, 816, 951, 965, 968, 1071, 1088, 1091, 1096], "int64": [182, 206, 278, 308, 309, 360, 423, 432, 434, 435, 436, 444, 510, 564, 567, 1050, 1051, 1052, 1071, 1088, 1091, 1096], "clip_vector_norm": [182, 314, 315, 747], "max_norm": [182, 209, 314, 315, 747, 759, 760, 761, 762], "gradient_descent_upd": [182, 316, 317, 821, 1011, 1012, 1013, 1014, 1113], "lamb_upd": [182, 316, 317, 821], "max_trust_ratio": [182, 232, 284, 316, 317, 821, 834, 835, 836, 837, 1150, 1152], "decay_lambda": [182, 232, 233, 284, 285, 316, 317, 821, 834, 835, 836, 837, 838, 839, 840, 841, 1150, 1152, 1153], "lars_upd": [182, 316, 317, 821], "optimizer_upd": [182, 316, 317, 821], "effective_grad": [182, 253, 287, 316, 317, 821, 842, 843, 844, 845], "random_uniform": [182, 330, 331, 361, 369, 1038, 1113], "static_adam_upd": [182, 316, 317, 824], "static_add": [182, 312, 313, 351, 352, 359, 657], "static_argsort": [182, 336, 337, 1061], "static_binary_cross_entropi": [182, 324, 325, 936], "static_can_cast": [182, 308, 309, 432], "from_": [182, 278, 308, 309, 423, 432, 435, 436], "static_clip": [182, 326, 327, 952], "static_rol": [182, 279, 326, 327, 352, 359, 952, 956, 985], "static_cross_entropi": [182, 324, 325, 941], "static_divid": [182, 312, 313, 359, 608, 609], "static_gather_nd": [182, 314, 315, 776], "static_gradient_descent_upd": [182, 316, 317, 829], "static_lamb_upd": [182, 316, 317, 834], "static_lars_upd": [182, 316, 317, 838], "static_multipli": [182, 312, 313, 359, 679], "static_optimizer_upd": [182, 316, 317, 842], "static_randint": [182, 330, 331, 1040], "20": [182, 288, 330, 331, 367, 510, 568, 571, 597, 704, 707, 720, 723, 865, 875, 877, 901, 903, 920, 922, 1038, 1040, 1041, 1042, 1050, 1053, 1054, 1071, 1072, 1075, 1099], "15": [182, 288, 330, 331, 345, 352, 510, 548, 551, 704, 707, 852, 855, 865, 875, 877, 901, 903, 920, 922, 951, 985, 988, 1033, 1034, 1037, 1038, 1040, 1041, 1042, 1050, 1053, 1055, 1056, 1071, 1072, 1075, 1099], "16": [182, 288, 294, 300, 312, 313, 330, 331, 346, 352, 368, 510, 539, 544, 733, 734, 736, 742, 852, 858, 865, 875, 877, 901, 903, 1040, 1042, 1050, 1054, 1071, 1072, 1075, 1099], "12": [182, 288, 330, 331, 345, 352, 359, 510, 548, 551, 568, 571, 580, 704, 707, 747, 765, 783, 865, 875, 877, 901, 903, 920, 922, 951, 969, 972, 977, 980, 985, 988, 1033, 1034, 1037, 1038, 1040, 1041, 1042, 1050, 1054, 1055, 1056, 1071, 1072, 1075, 1099], "40": [182, 288, 330, 331, 510, 580, 720, 723, 865, 901, 903, 1040, 1042, 1071, 1072, 1075, 1099], "gpu": [182, 288, 330, 331, 346, 361, 367, 382, 460, 479, 482, 495, 497, 501, 503, 508, 1040, 1042], "87": [182, 288, 330, 331, 1040, 1042], "62": [182, 288, 330, 331, 1040, 1042], "52": [182, 288, 330, 331, 865, 901, 903, 1040, 1042, 1055, 1056, 1071, 1072, 1075, 1099], "95": [182, 288, 330, 331, 1040, 1042], "37": [182, 288, 330, 331, 510, 733, 1033, 1034, 1037, 1040, 1042], "42": [182, 288, 330, 331, 370, 393, 399, 865, 901, 903, 1038, 1040, 1042, 1048, 1071, 1072, 1075, 1099], "14": [182, 288, 330, 331, 348, 352, 359, 510, 568, 571, 852, 864, 865, 875, 877, 901, 903, 1040, 1042, 1055, 1056, 1071, 1072, 1075, 1099], "13": [182, 288, 330, 331, 352, 359, 510, 548, 551, 568, 571, 580, 720, 723, 747, 765, 852, 864, 865, 875, 877, 901, 903, 1033, 1034, 1037, 1040, 1042, 1050, 1054, 1055, 1056, 1071, 1072, 1075, 1099], "static_random_uniform": [182, 330, 331, 1044], "static_sort": [182, 336, 337, 1066], "static_sparse_cross_entropi": [182, 324, 325, 946], "static_subtract": [182, 312, 313, 359, 728], "static_tan": [182, 312, 313, 352, 359, 539, 544, 742], "143": [182, 294, 300, 312, 313, 352, 510, 539, 544, 733, 734, 736, 742], "38": [182, 294, 300, 312, 313, 352, 510, 539, 544, 733, 734, 736, 742], "static_tanh": [182, 312, 313, 544], "76": [182, 295, 312, 313, 510, 544, 580, 739, 865, 920, 922, 1071, 1072, 1075, 1099], "96": [182, 295, 312, 313, 510, 544, 733, 739, 865, 901, 903, 1071, 1072, 1075, 1099], "995": [182, 295, 301, 312, 313, 510, 539, 544, 738, 739, 741], "9999": [182, 295, 312, 313, 544, 739], "add_ivy_container_instance_method": 342, "containerexampl": [342, 343], "strongli": [344, 345, 1113, 1119], "welcom": [344, 345, 346, 1113, 1119], "skill": 344, "vetern": 344, "beginn": 344, "aspect": [344, 368, 1113], "guid": [344, 345, 346, 354, 1113], "through": [344, 346, 347, 349, 352, 355, 356, 359, 364, 365, 367, 368, 369, 370, 381, 510, 540, 543], "journei": [344, 1113, 1119], "inclusvi": 344, "big": [344, 382], "team": [344, 345, 346], "board": 344, "contributor": [344, 345, 346, 364, 1113], "section": [344, 346, 347, 349, 350, 351, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 368, 369, 1055, 1056, 1057, 1059], "below": [344, 345, 347, 348, 349, 350, 352, 355, 359, 360, 361, 362, 365, 366, 367, 368, 369, 370, 381, 404, 415, 419, 420, 510, 548, 551, 568, 571, 580, 704, 707, 738, 865, 872, 875, 877, 923, 925, 951, 965, 968, 969, 972, 1055, 1056, 1057, 1060, 1061, 1064, 1113], "best": [344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 747, 797], "go": [344, 345, 346, 347, 349, 350, 352, 359, 364, 368, 382, 1015, 1026], "finish": [344, 345, 349, 1113], "dive": [344, 346, 347, 364, 367, 368, 382, 1113], "environ": [344, 346, 348, 381], "basic": [344, 347, 348], "fork": [344, 345, 747, 798], "doc": [344, 347, 351, 363, 365, 368, 369, 1113], "document": [344, 346, 366, 368, 370], "local": [344, 345, 348, 355], "task": [344, 346, 381, 1011, 1012, 1013, 1014, 1113], "help": [344, 345, 352, 356, 358, 359, 367, 368, 369, 380, 747, 753, 1071, 1096, 1113], "video": [344, 346, 351, 352, 363], "realli": [345, 359, 382], "contribut": [345, 346, 347, 365, 1119], "toward": [345, 365, 951, 985, 988, 1113, 1119], "page": [345, 346, 366, 370, 380, 1113, 1119], "explain": [345, 346, 347, 350, 351, 352, 354, 355, 356, 358, 359, 360, 361, 362, 363, 365, 366, 367, 368, 369, 370, 1113, 1119], "main": [345, 348, 357, 359, 404, 409, 419, 420, 865, 875, 877, 923, 925], "prefer": [345, 359], "git": [345, 346], "submodul": [345, 346, 347, 348, 353, 354, 355, 361, 364, 365, 369, 1113, 1148, 1149, 1156, 1157], "com": 345, "unifyai": [345, 348], "http": [345, 351, 423, 432, 435, 510, 528, 531, 568, 571, 572, 575, 580, 605, 688, 691, 720, 723, 724, 727, 821, 823, 824, 826, 951, 965, 968, 985, 988, 1055, 1056, 1057, 1060, 1061, 1064, 1071, 1076, 1079], "gh": 345, "your_fold": 345, "id": [345, 358, 359, 460, 479, 1146, 1147], "cours": [345, 346, 352, 368, 382], "whatev": [345, 382], "integr": [345, 354, 423, 429], "familiar": [345, 347], "sure": [345, 347, 353], "elig": 345, "free": [345, 346, 347, 348, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 381, 1113], "student": 345, "licenc": 345, "peopl": [345, 346, 349], "seem": [345, 369, 382], "miss": [345, 352, 354, 358, 359, 1150, 1154], "explicit": [345, 348, 359, 360, 362, 365, 382], "remind": 345, "channel": [345, 346, 347, 348, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 747, 774, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1143, 1144], "pace": 345, "suggest": [345, 346, 350], "latest": [345, 347, 348, 351, 382, 423, 432, 435, 510, 528, 531, 568, 571, 572, 575, 580, 605, 688, 691, 720, 723, 724, 727, 951, 965, 968, 985, 988, 1055, 1056, 1057, 1060, 1061, 1064, 1071, 1076, 1079, 1134, 1143], "packag": [345, 348, 382], "ensur": [345, 346, 354, 358, 360, 363, 747, 791], "pypi": [345, 347, 382], "person": [345, 346], "experi": [345, 366, 368, 382], "avoid": [345, 346, 354, 356, 357, 359, 367, 460, 510, 601, 604], "pip": [345, 381, 1113], "instal": [345, 348, 381, 1113], "abil": [345, 366, 382], "perhap": [345, 367, 368, 369, 382], "track": [345, 346, 460, 1015, 1027, 1146, 1147], "run": [345, 348, 353, 354, 356, 363, 365, 366, 367, 368, 369, 370, 381, 382, 460, 469, 821, 823, 824, 826, 834, 836, 1011, 1012, 1013, 1014, 1134, 1145, 1146, 1147], "command": [345, 348, 1113], "ivy_dev": [345, 346, 348], "name": [345, 346, 348, 351, 354, 365, 367, 368, 370, 401, 402, 747, 753, 865, 878, 880, 907, 909, 914, 1055, 1056, 1057], "setup": 345, "click": [345, 346, 351, 1113], "icon": [345, 346], "side": [345, 346], "choos": [345, 346, 370, 460, 505, 510, 665, 668, 669, 672, 1050, 1054, 1055, 1056, 1057, 1059, 1071, 1076, 1079, 1080, 1083, 1084, 1087], "panel": 345, "select": [345, 346, 354, 365, 367, 370, 382], "drop": [345, 382], "down": [345, 367], "path": [345, 348], "manual": [345, 346, 354, 369, 1015, 1016, 1025, 1026], "builtin": [345, 348, 367, 369], "requir": [345, 348, 350, 351, 352, 354, 357, 358, 360, 361, 363, 367, 382, 401, 402, 510, 720, 723, 865, 878, 880, 951, 995, 998, 1123, 1124], "cmd": [345, 348], "directori": [345, 346, 348, 747, 808], "folder": [345, 346, 348, 350, 353, 354, 355], "abov": [345, 346, 348, 351, 352, 355, 356, 358, 359, 362, 363, 367, 368, 369, 370, 404, 415, 419, 420, 423, 432, 435, 510, 523, 528, 531, 548, 551, 568, 571, 572, 575, 580, 605, 679, 682, 688, 691, 704, 707, 720, 723, 724, 727, 733, 738, 747, 775, 852, 855, 864, 865, 872, 875, 877, 878, 880, 923, 925, 951, 965, 968, 969, 972, 985, 988, 1033, 1034, 1037, 1038, 1040, 1041, 1055, 1056, 1057, 1060, 1061, 1064, 1071, 1076, 1079, 1088, 1091, 1092, 1095, 1096, 1104, 1105, 1108], "m": [345, 346, 348, 349, 365, 404, 415, 419, 420, 747, 756, 865, 866, 868, 872, 875, 877, 878, 880, 881, 883, 884, 886, 887, 890, 895, 897, 898, 900, 901, 903, 904, 906, 907, 909, 911, 913, 914, 916, 917, 919, 923, 925, 1038, 1043, 1044, 1046], "python3": [345, 348], "script": [345, 346, 348, 352, 365, 382], "bat": [345, 346, 348], "OR": [345, 346, 348, 510, 560, 563, 669, 672, 1104, 1109, 1112], "bin": [345, 346, 348], "mac": [345, 346, 348], "linux": [345, 346, 348], "virtualenv": 345, "os": 345, "note": [345, 346, 350, 351, 352, 359, 510, 700, 703, 865, 878, 880, 914, 951, 995, 998, 1055, 1057, 1071, 1080, 1083], "tick": [345, 346], "To": [345, 352, 355, 359, 368, 369, 370, 1113], "ivy_test": [345, 346], "test_array_api": [345, 346, 353, 354], "cd": [345, 346, 348], "txt": 345, "visual": [345, 382], "jetbrain": 345, "remot": 345, "mitig": 345, "potenti": [345, 364, 510, 601, 604], "conflict": [345, 346, 368], "yet": [345, 347, 359], "particular": [345, 346, 350, 362, 510, 511, 514], "system": [345, 382, 865, 911, 913], "instruct": [345, 347], "desktop": 345, "wsl": 345, "powershel": 345, "admin": 345, "visit": 345, "link": 345, "profession": 345, "execut": [345, 348, 359, 362, 365, 367, 370, 382, 747, 818], "deploy": 345, "top": [345, 346, 354, 368, 369, 1113], "press": [345, 368, 1113], "ok": 345, "caus": [345, 346, 352, 354, 359, 362, 382], "earlier": [345, 346], "might": [345, 346, 350, 354, 357, 365, 367, 368, 747, 768], "necessari": [345, 352, 356, 359, 362], "virtualis": 345, "detail": [345, 346, 347, 350, 353, 354, 355, 356, 357, 359, 363, 368, 369, 404, 410, 1055, 1056, 1057, 1059], "sudo": 345, "apt": 345, "ca": 345, "certif": 345, "curl": 345, "gnupg": 345, "lsb": 345, "mkdir": 345, "keyr": 345, "fssl": 345, "download": [345, 354], "gpg": 345, "dearmor": 345, "o": [345, 365, 747, 756], "echo": 345, "deb": 345, "arch": 345, "dpkg": 345, "architectur": [345, 370, 382], "lsb_releas": 345, "cs": 345, "tee": 345, "null": 345, "ce": 345, "cli": 345, "containerd": 345, "io": 345, "compos": [345, 359, 382], "plugin": 345, "systemctl": 345, "permiss": 345, "relat": [345, 346, 381, 460], "post": [345, 370, 1033, 1034, 1037, 1113, 1119], "It": [345, 346, 348, 349, 350, 351, 352, 356, 358, 359, 362, 365, 367, 368, 369, 393, 396, 460, 505, 510, 511, 514, 515, 518, 519, 522, 523, 526, 528, 531, 532, 535, 536, 540, 543, 548, 551, 552, 555, 556, 559, 560, 563, 564, 567, 568, 571, 572, 575, 576, 579, 580, 583, 597, 600, 601, 604, 605, 621, 624, 625, 628, 629, 632, 633, 636, 641, 644, 645, 648, 649, 652, 653, 656, 657, 660, 661, 664, 665, 668, 669, 672, 673, 676, 679, 682, 684, 687, 688, 691, 696, 699, 700, 703, 704, 707, 708, 711, 712, 715, 716, 719, 720, 723, 724, 727, 728, 732, 733, 738, 747, 760, 762, 773, 935, 936, 939, 941, 944, 946, 949, 951, 952, 955, 965, 968, 969, 972, 973, 976, 977, 980, 985, 988, 991, 994, 995, 998, 999, 1002, 1038, 1040, 1041, 1050, 1051, 1060, 1061, 1064, 1066, 1069, 1104, 1105, 1108, 1109, 1112], "headach": 345, "arm": 345, "m1": 345, "instead": [345, 346, 347, 351, 352, 354, 355, 359, 362, 363, 365, 367, 368, 382], "featur": [345, 350, 363, 368, 1113], "vm": 345, "azur": 345, "cloud": [345, 381], "defin": [345, 347, 350, 351, 360, 363, 367, 369, 382, 510, 679, 682, 700, 703, 747, 800, 865, 869, 871, 878, 880, 911, 913, 1038, 1040, 1041, 1071, 1076, 1079, 1080, 1083, 1084, 1087], "dockerfil": [345, 348], "longer": [345, 360, 362], "worri": 345, "platform": 345, "agnost": [345, 358, 363, 365, 367, 370, 382, 1113], "usual": 345, "studio": 345, "favourit": 345, "extens": [345, 346, 351, 404, 415, 423, 432, 435, 510, 523, 528, 531, 548, 551, 568, 571, 572, 575, 580, 605, 688, 691, 704, 707, 720, 723, 724, 727, 733, 738, 865, 872, 951, 965, 968, 969, 972, 985, 988, 1055, 1056, 1057, 1060, 1061, 1064, 1071, 1076, 1079, 1104, 1105, 1108], "theme": 345, "too": [345, 346, 382, 510, 523, 679, 682], "done": [345, 346, 352, 354, 368], "unsupport": [345, 360, 423, 444, 445], "slow": 345, "ipad": 345, "long": [345, 346, 352, 852, 862], "browser": 345, "cool": [345, 350], "requisit": 345, "head": [345, 359, 852, 863, 1113, 1134, 1145], "pane": [345, 346], "readi": [345, 347], "begin": [345, 1015, 1016, 1026], "outlin": [345, 346, 347, 349, 351, 354, 355, 359, 362, 367], "dropdown": 345, "tab": [345, 368, 1113], "master": [345, 346, 359], "vs": 345, "view": [345, 346, 404, 410, 852, 855, 859], "built": [345, 366, 404, 405, 460, 1134, 1145, 1146, 1147], "bottom": 345, "box": 345, "patient": 345, "upto": 345, "minut": 345, "launch": 345, "That": [345, 346, 367, 368, 369, 510, 700, 703], "refer": [345, 346, 354, 355, 360, 363, 382, 404, 409, 510, 601, 604, 649, 652, 821, 823, 824, 826, 865, 926, 928, 932, 934, 1071, 1092, 1095, 1100, 1103, 1104, 1105, 1108, 1109, 1112, 1134, 1144], "approach": [345, 346, 354, 355, 359, 367, 368, 382], "colour": 345, "applic": [345, 360, 361, 369, 852, 863, 864, 1015, 1021, 1027], "good": [345, 346, 347, 348, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 365, 369], "chanc": 345, "vscode": 345, "explor": [345, 366, 370, 381], "troubleshoot": 345, "sometim": [345, 346], "ever": [345, 346, 347, 348, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363], "64": [345, 368, 369, 510, 720, 723, 724, 727, 852, 858, 859, 865, 901, 903, 1071, 1072, 1075, 1099, 1113, 1134, 1145], "bit": [345, 352, 355, 359, 367, 423, 442, 443, 446, 510, 552, 555, 556, 559, 564, 567, 1071, 1088, 1091, 1096], "usr": 345, "more": [345, 346, 347, 349, 350, 352, 354, 355, 356, 357, 358, 359, 362, 363, 364, 365, 366, 367, 368, 369, 370, 381, 382, 404, 405, 423, 430, 510, 601, 604, 865, 887, 890, 951, 969, 972, 1055, 1056, 1057, 1059, 1113], "nutshel": [345, 363], "hook": 345, "lint": 345, "fix": [345, 346], "fail": [345, 347, 353, 354, 365, 367], "attempt": [345, 382], "succe": 345, "problemat": 345, "proce": [345, 346, 347, 348, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363], "modifi": [345, 346, 351, 355, 360, 361, 365], "properli": [345, 349], "enter": [345, 346, 358, 360, 361, 363, 460], "unsur": [345, 346, 347, 348, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363], "feel": [345, 346, 347, 348, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 1113], "server": [346, 1113], "context": [346, 352, 359, 360, 361, 460, 747, 798, 852, 863, 1134, 1145], "suitabl": [346, 350, 359], "quick": [346, 349, 369], "tendenc": 346, "land": 346, "end": [346, 359, 362, 364, 381, 382, 404, 405, 510, 540, 543, 1113, 1119], "world": 346, "come": [346, 347, 369, 380, 1113, 1119], "fly": 346, "hard": [346, 367], "receiv": [346, 354, 360, 361, 460, 469, 470, 747, 754, 797, 1134, 1144], "respons": [346, 348], "internship": 346, "comment": 346, "trigger": 346, "unansw": 346, "label": [346, 365, 366, 370, 935, 936, 939, 941, 944, 946, 949], "respond": 346, "someon": [346, 382], "els": [346, 347, 350, 355, 356, 362, 365, 367, 369, 370, 382, 747, 757, 768, 772, 1015, 1025], "strive": [346, 382], "repli": 346, "newli": [346, 362, 401, 402, 423, 429, 747, 758], "bug": [346, 354], "serv": [346, 354, 355, 358, 359, 363, 364, 1113], "suspect": 346, "behaviour": [346, 351, 354, 358, 359, 362, 363, 367], "observ": 346, "confid": 346, "wrong": 346, "someth": [346, 350, 368, 369, 382], "bet": 346, "act": [346, 352, 382], "placehold": [346, 358, 363, 1015, 1027], "mark": [346, 354], "ii": [346, 1071, 1072, 1075, 1099], "iii": 346, "titl": [346, 1113], "issue_numb": 346, "delet": [346, 348], "No": [346, 365], "progress": [346, 359, 366, 370], "pr": 346, "soon": [346, 359, 380, 382, 1113, 1119], "solut": [346, 354, 359, 865, 911, 913], "review": [346, 350], "merg": 346, "everi": [346, 347, 348, 352, 353, 354, 355, 356, 357, 359, 362, 363, 365, 367, 369, 404, 411, 412, 747, 748, 751], "dai": 346, "close": [346, 351, 510, 601, 604, 704, 707, 865, 914], "likewis": [346, 351, 355, 359, 360, 363, 368], "freed": 346, "purpos": [346, 348, 352, 354, 355, 357, 358, 359, 363, 364, 367, 510, 601, 604, 1113], "remain": [346, 352, 382, 510, 523, 679, 682, 700, 703, 951, 981, 984, 1015, 1021], "short": [346, 369, 852, 862], "basi": [346, 353, 368], "situat": [346, 370], "alloc": [346, 382, 404, 419, 420, 423, 429, 460], "upon": [346, 352, 354, 362, 382], "period": 346, "prevent": [346, 362, 367, 821, 823, 824, 826, 834, 836, 1071, 1096, 1150, 1151, 1152], "unabl": 346, "obvious": 346, "never": [346, 359], "reflect": [346, 358], "qualiti": 346, "hypothet": 346, "frustrat": 346, "delai": 346, "busi": 346, "fine": [346, 367, 370], "becaus": [346, 351, 354, 355, 356, 358, 360, 361, 362, 363, 365, 369, 370, 382], "inact": 346, "me": 346, "unfairli": 346, "definit": [346, 355, 360, 367, 865, 866, 868, 869, 871], "investig": 346, "Then": [346, 348, 367, 382], "practic": [346, 354], "separ": [346, 354, 358, 365, 367, 368], "branch": [346, 359, 382, 401, 402, 510, 540, 543], "role": [346, 366], "date": 346, "upstream": [346, 353], "complic": [346, 365], "root": [346, 348, 368, 510, 720, 723, 1038, 1039, 1043, 1044, 1046], "merge_with_upstream": 346, "sh": 346, "name_of_your_branch": 346, "resolv": [346, 1071, 1088, 1091, 1096], "push": [346, 353], "both": [346, 351, 352, 355, 359, 361, 362, 363, 365, 367, 368, 369, 370, 381, 382, 423, 432, 435, 450, 510, 523, 528, 531, 572, 575, 605, 688, 691, 696, 699, 720, 723, 724, 727, 733, 747, 775, 852, 855, 864, 865, 869, 871, 887, 890, 926, 928, 951, 985, 988, 1033, 1034, 1037, 1071, 1076, 1079, 1104, 1105, 1108], "abort": 346, "tediou": 346, "resolut": 346, "stash": 346, "reinstat": 346, "fetch": 346, "uncommit": 346, "unstag": 346, "untrack": 346, "comprehens": 346, "explan": [346, 351, 359, 363, 367], "atlassian": 346, "tutori": 346, "quit": [346, 347, 351, 355, 357, 358], "logic": [346, 357, 358, 360, 361, 367, 460, 496, 510, 661, 664, 665, 668, 669, 672, 1104, 1105, 1108, 1109, 1112, 1113], "blame": 346, "revis": 346, "author": [346, 1113], "eg": 346, "past": 346, "l": [346, 349, 865, 866, 868, 878, 880, 887, 890, 923, 925], "grep": 346, "v": [346, 365, 368, 369, 370, 852, 864, 1113, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1154, 1156, 1157], "commit_id": 346, "handi": 346, "histori": 346, "toggl": 346, "vertic": 346, "highlight": [346, 352], "previou": [346, 354, 363, 370, 382, 821, 824, 826, 834, 836], "inform": [346, 423, 443, 446, 747, 753, 821, 847], "whenev": [346, 367, 368], "tag": 346, "think": [346, 352], "interact": [346, 1113], "gain": [346, 364, 369, 1125], "yourself": [346, 347, 381], "simpler": [346, 367], "cannot": [346, 356, 360, 370], "least": [346, 352, 355, 358, 865, 887, 890], "final": [346, 351, 352, 355, 358, 360, 362, 365, 367, 368, 404, 413, 414, 747, 774, 1134, 1145], "tickbox": 346, "corner": 346, "span": 346, "intent": [346, 362], "larg": [346, 368, 510, 523, 679, 682], "discourag": 346, "philosophi": 346, "increment": [346, 747, 790], "frequent": [346, 347], "valuabl": 346, "infrequ": 346, "earli": [346, 1113], "wast": 346, "spot": [346, 355], "mistak": 346, "propos": 346, "mountain": 346, "advoc": [346, 382], "individu": [346, 347, 355], "per": [346, 368, 460, 852, 853, 854, 855, 856, 857, 858, 859, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141], "style": [346, 1050, 1053], "ve": [346, 364, 367, 1038, 1039, 1113], "actual": [346, 349, 355, 362, 364, 367, 369, 382], "aim": [346, 364], "part": [346, 350, 353, 354, 355, 365, 366, 370, 381, 382, 404, 419, 420, 821, 824, 826, 829, 831, 834, 836, 838, 840, 842, 844, 1146, 1147], "subsect": 346, "session": [346, 1113], "block": [346, 355, 364, 366, 370, 382, 460, 1113], "smaller": [346, 365, 370, 951, 952, 955, 985, 988, 1071, 1088, 1091, 1096], "edit": 346, "beauti": 346, "particularli": [346, 368, 382], "concern": [346, 349, 352, 359, 362, 364], "effici": [346, 354, 355, 359, 362, 363, 365, 368, 382], "difficult": [346, 354, 382, 1055, 1056, 1057, 1059], "undo": 346, "stress": 346, "frequenc": [346, 747, 774], "pycharm": 346, "pytest": [346, 354], "button": 346, "declar": 346, "insid": [346, 348, 350, 360], "exec": 346, "rm": 346, "rf": 346, "cp": 346, "ivy_contain": 346, "bash": [346, 348], "test_ivi": [346, 354], "test_funct": 346, "test_cor": 346, "test_imag": 346, "test_random_crop": 346, "header": 346, "q": [346, 382, 852, 864, 865, 878, 880, 907, 909], "array_api_test": 346, "test_creation_funct": 346, "test_arang": 346, "window": [346, 348, 852, 853, 854, 855, 856, 857, 858, 859, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141], "variou": [346, 351, 357, 363, 381], "wherebi": [347, 359, 1015, 1027], "broad": 347, "todo": [347, 354], "commit": [347, 354], "NOT": [347, 510, 665, 668], "resourc": 347, "hypothesi": 347, "cover": [347, 351, 352, 355, 357, 364], "lambda": [347, 365, 368, 1150, 1153, 1155], "direct": [347, 369, 370, 381, 1060, 1066, 1069], "bind": [347, 359], "aforement": 347, "categori": [347, 350, 358, 359, 360, 364, 1113], "parent": [347, 367], "hint": [347, 350, 351, 355, 358, 362, 363, 404, 415, 423, 432, 435, 510, 523, 528, 531, 548, 551, 568, 571, 572, 575, 580, 605, 688, 691, 704, 707, 720, 723, 724, 727, 733, 738, 747, 775, 852, 855, 864, 865, 872, 951, 965, 968, 969, 972, 985, 988, 1033, 1034, 1037, 1055, 1056, 1057, 1060, 1061, 1064, 1071, 1076, 1079, 1104, 1105, 1108], "its": [347, 348, 351, 423, 430, 460, 504, 865, 887, 890, 951, 965, 968, 981, 984, 985, 988, 999, 1002], "thorough": [347, 351, 354, 363], "transpil": [347, 364, 366, 1113, 1119], "builder": [348, 380, 382, 1113], "maco": 348, "ubuntu": 348, "uid": 348, "make_docs_without_dock": 348, "rel": [348, 821, 824, 826, 829, 831, 834, 836, 838, 840, 842, 844, 865, 875, 877, 886, 895, 897, 904, 906, 923, 925, 951, 969, 972, 985, 988, 1060, 1061, 1064, 1066, 1069, 1113], "synchron": 348, "rest": [348, 366, 370], "remove_doc": 348, "_": [348, 351, 359, 362, 367, 368, 423, 432, 435, 510, 528, 531, 568, 571, 572, 575, 580, 605, 688, 691, 720, 723, 724, 727, 821, 823, 824, 826, 865, 932, 934, 951, 965, 968, 985, 988, 1055, 1056, 1057, 1060, 1061, 1064, 1071, 1076, 1079], "privat": [348, 1150, 1154], "fulfil": [348, 364, 1113], "autogenerated_sourc": 348, "png": [348, 368], "_imag": 348, "lastli": 348, "rst": 348, "partial_sourc": 348, "conf": 348, "create_rst_fil": 348, "filter": [348, 852, 853, 854, 855, 856, 857, 858, 859, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141], "repres": [348, 367, 404, 415, 423, 442, 510, 518, 519, 522, 523, 532, 535, 539, 544, 547, 579, 580, 583, 679, 682, 716, 719, 737, 738, 742, 852, 861, 865, 874, 910, 911, 913], "overal": [348, 351, 359, 360, 361, 370], "markup": 348, "extract": [348, 350], "get_functions_and_class": 348, "doctr": 348, "readm": [348, 382], "module_nam": 348, "copy_readme_to_rst": 348, "tabl": 348, "toc": 348, "tree": 348, "append_toctree_to_rst": 348, "create_index_rst": 348, "\u03c0": [348, 510, 515, 528, 531, 536, 540, 543], "namespac": [348, 350, 360, 365, 370], "who": [349, 364, 382], "mainli": [349, 366, 368], "under": [349, 351, 352, 353, 354, 355, 359, 364, 365, 368, 370], "hood": [349, 352, 354, 355, 359, 364, 365, 368, 370], "weed": [349, 364], "behind": [349, 364, 366, 821, 824, 826, 829, 831, 834, 836, 838, 840, 842, 844], "navig": 349, "tour": 349, "primari": [349, 354, 356, 362, 382], "composit": [349, 354, 356, 358, 359, 362, 365, 369, 370, 382], "nestabl": [349, 351, 352, 354, 362, 423, 432, 435, 510, 523, 528, 531, 572, 575, 605, 688, 691, 720, 723, 724, 727, 733, 747, 775, 852, 855, 864, 951, 985, 988, 1033, 1034, 1037, 1071, 1076, 1079, 1104, 1105, 1108], "dynam": [349, 360, 361, 362, 365, 401, 402], "runtim": [349, 354, 460], "h": [349, 359, 852, 855, 856, 857, 858, 859], "j": [349, 747, 755, 756, 865, 923, 925, 1071, 1072, 1075, 1099], "k": [349, 365, 404, 409, 419, 420, 747, 755, 852, 864, 865, 887, 890, 907, 909, 911, 913, 914, 916, 917, 919, 923, 925, 1038, 1043, 1044, 1046, 1050, 1053], "borrow": 349, "n": [349, 404, 415, 419, 420, 747, 756, 852, 860, 865, 875, 877, 886, 887, 890, 894, 895, 897, 898, 900, 901, 903, 904, 906, 907, 909, 914, 916, 917, 919, 923, 925, 926, 928, 929, 931, 932, 934, 951, 961, 964, 965, 968, 973, 976, 995, 998, 1007, 1010, 1038, 1043, 1044, 1046, 1050, 1053, 1071, 1080, 1083, 1092, 1095, 1096, 1100, 1103, 1104, 1105, 1108, 1109, 1112], "taken": [350, 370, 865, 875, 877], "constant": [350, 355, 369, 370, 382, 460, 469, 470, 951, 961, 964, 1015, 1021, 1033, 1034, 1037, 1125, 1126, 1130, 1133, 1146, 1147, 1148, 1149], "compil": [350, 359, 364, 366, 382, 1113, 1146, 1147, 1150, 1151, 1152, 1153, 1154, 1155], "meta": [350, 358, 1012, 1013, 1014], "overlap": 350, "sever": [350, 382, 865, 884], "judgement": 350, "locat": [350, 354, 356, 361, 1038, 1039], "some_namespac": 350, "some_backend": 350, "another_backend": 350, "break": [350, 363, 367, 382, 1113], "anyth": [350, 1113], "refactor": 350, "ongo": 350, "subfold": [350, 354], "via": [350, 359, 360, 361, 362, 365, 367, 368, 381, 1015, 1016, 1025, 1026], "file_nam": 350, "my_func": [350, 352], "int": [350, 352, 355, 359, 360, 361, 362, 363, 370, 393, 398, 401, 402, 404, 407, 409, 411, 412, 413, 414, 417, 419, 420, 421, 423, 431, 440, 442, 443, 446, 449, 460, 482, 485, 486, 487, 488, 496, 497, 498, 504, 505, 510, 548, 551, 552, 555, 556, 559, 560, 563, 564, 567, 568, 571, 747, 753, 765, 766, 769, 770, 771, 774, 775, 784, 800, 803, 804, 809, 810, 819, 821, 823, 824, 826, 834, 836, 852, 853, 855, 857, 858, 859, 865, 869, 871, 875, 877, 920, 922, 923, 925, 926, 928, 929, 931, 935, 941, 944, 946, 949, 951, 957, 960, 961, 964, 965, 968, 969, 972, 973, 976, 977, 980, 985, 988, 990, 991, 994, 995, 998, 999, 1002, 1003, 1006, 1007, 1010, 1011, 1012, 1013, 1014, 1015, 1027, 1033, 1034, 1037, 1038, 1039, 1040, 1041, 1043, 1044, 1046, 1048, 1050, 1051, 1052, 1060, 1061, 1064, 1066, 1069, 1071, 1076, 1079, 1080, 1083, 1084, 1087, 1092, 1095, 1096, 1100, 1103, 1104, 1105, 1108, 1109, 1112], "nativedtyp": [350, 360, 361, 363, 404, 405, 406, 407, 408, 409, 411, 412, 416, 417, 418, 421, 422, 423, 428, 429, 439, 440, 441, 450, 1071, 1096], "nativedevic": [350, 360, 361, 363, 404, 405, 406, 407, 408, 409, 411, 412, 413, 414, 416, 417, 418, 421, 422, 460, 477, 478, 479, 493, 499, 501, 503, 505, 506, 509, 747, 800, 1038, 1039, 1040, 1041, 1043, 1044, 1046], "my": 350, "numer": [350, 369, 404, 415, 423, 429, 510, 511, 514, 523, 572, 575, 584, 587, 601, 604, 605, 608, 609, 612, 621, 624, 625, 628, 629, 632, 633, 636, 665, 668, 669, 672, 679, 682, 684, 687, 688, 691, 696, 699, 700, 703, 708, 711, 724, 727, 728, 732, 743, 746, 747, 782, 783, 805, 806, 811, 812, 865, 869, 871, 887, 890, 901, 903, 914, 920, 922, 923, 925, 926, 928, 1038, 1049, 1050, 1051, 1052, 1071, 1076, 1079, 1088, 1091, 1096, 1125], "cooler": 350, "produc": [350, 460, 469, 470, 852, 864], "something_cool": 350, "category_nam": [351, 355, 360, 361, 363], "contrast": [351, 363], "backend_nam": [351, 355, 356, 357, 360, 361, 363], "account": 351, "instanti": 351, "firstli": [351, 352, 355, 358, 360, 362, 368], "templat": [351, 1113], "spec": [351, 352], "api_specif": [351, 423, 432, 435, 510, 528, 531, 568, 571, 572, 575, 580, 605, 688, 691, 720, 723, 724, 727, 951, 965, 968, 985, 988, 1055, 1056, 1057, 1060, 1061, 1064, 1071, 1076, 1079], "array_api": 351, "preview": 351, "render": 351, "incorrectli": 351, "onlin": [351, 1113], "approxim": [351, 393, 394, 510, 515, 518, 519, 522, 528, 531, 532, 535, 536, 540, 543, 576, 579, 580, 583, 597, 601, 604, 641, 644, 645, 648, 649, 652, 653, 656, 696, 699, 712, 715, 716, 719, 733, 738, 865, 886, 895, 897, 904, 906], "tangent": [351, 393, 400, 510, 536, 539, 540, 543, 544, 547, 733, 737, 738, 742], "domain": [351, 510, 515, 518, 519, 522, 528, 531, 532, 535, 536, 540, 543, 576, 579, 580, 583, 597, 601, 604, 641, 644, 645, 648, 653, 656, 712, 715, 716, 719, 720, 723, 733, 738], "infin": [351, 403, 423, 429, 510, 511, 514, 518, 519, 522, 523, 526, 532, 535, 536, 540, 543, 572, 575, 576, 579, 580, 583, 587, 597, 600, 601, 604, 605, 608, 609, 612, 621, 624, 625, 628, 641, 644, 645, 648, 653, 656, 657, 660, 679, 682, 696, 699, 700, 703, 704, 707, 712, 715, 716, 719, 720, 723, 733, 738, 743, 746, 865, 929, 931, 1071, 1076, 1079, 1084, 1087, 1104, 1105, 1108, 1109, 1112], "codomain": [351, 510, 515, 518, 519, 522, 528, 531, 532, 535, 536, 540, 543, 576, 579, 580, 583, 597, 601, 604, 641, 644, 645, 648, 653, 656, 712, 715, 716, 719, 720, 723, 733, 738], "x_i": [351, 510, 511, 514, 515, 518, 519, 522, 528, 531, 532, 535, 536, 552, 555, 572, 575, 576, 579, 580, 583, 597, 601, 604, 605, 621, 624, 625, 628, 629, 632, 641, 644, 645, 648, 653, 656, 665, 668, 684, 687, 704, 707, 708, 711, 712, 715, 716, 719, 720, 723, 724, 727, 733, 738, 743, 746, 1055, 1056, 1057, 1059, 1071, 1076, 1079, 1080, 1083, 1084, 1087, 1092, 1095, 1096, 1100, 1103], "assum": [351, 356, 360, 367, 368, 382, 404, 415, 423, 432, 435, 510, 523, 528, 531, 548, 551, 568, 571, 572, 575, 576, 580, 605, 688, 691, 704, 707, 712, 715, 720, 723, 724, 727, 733, 738, 747, 775, 852, 855, 864, 865, 872, 951, 965, 968, 969, 972, 985, 988, 1033, 1034, 1037, 1055, 1056, 1057, 1060, 1061, 1064, 1071, 1076, 1079, 1104, 1105, 1108], "express": [351, 365, 370, 510, 515, 528, 531, 536, 540, 543, 576, 712, 715, 733], "radian": [351, 510, 515, 528, 531, 536, 540, 543, 576, 712, 715, 733], "float": [351, 355, 359, 360, 362, 363, 367, 369, 393, 395, 403, 404, 405, 407, 409, 411, 412, 413, 414, 417, 421, 423, 429, 439, 443, 448, 451, 460, 493, 499, 503, 506, 509, 510, 511, 514, 515, 518, 519, 522, 523, 526, 528, 531, 532, 535, 536, 539, 540, 543, 544, 547, 568, 571, 572, 575, 576, 579, 580, 583, 584, 587, 589, 592, 597, 600, 601, 604, 605, 608, 609, 612, 613, 616, 617, 620, 633, 636, 637, 640, 641, 644, 645, 648, 653, 656, 657, 660, 679, 682, 684, 687, 688, 691, 692, 695, 696, 699, 700, 703, 704, 707, 712, 715, 716, 719, 720, 723, 728, 732, 733, 737, 738, 742, 743, 746, 747, 759, 760, 762, 774, 782, 783, 805, 806, 811, 812, 821, 823, 824, 826, 829, 831, 834, 836, 838, 840, 842, 844, 852, 855, 859, 864, 865, 866, 868, 872, 878, 880, 881, 883, 884, 886, 895, 897, 904, 906, 907, 909, 911, 913, 914, 929, 931, 935, 936, 939, 941, 944, 946, 949, 1011, 1012, 1013, 1014, 1033, 1034, 1037, 1038, 1043, 1044, 1046, 1055, 1056, 1057, 1059, 1071, 1076, 1079, 1080, 1083, 1084, 1087, 1088, 1091, 1092, 1095, 1096, 1100, 1103], "operand": [351, 510, 515, 518, 519, 522, 523, 526, 528, 531, 532, 535, 536, 540, 543, 568, 571, 572, 575, 576, 579, 580, 583, 597, 600, 601, 604, 605, 641, 644, 645, 648, 653, 656, 657, 660, 679, 682, 696, 699, 700, 703, 704, 707, 712, 715, 716, 719, 720, 723, 733, 738, 743, 746, 1071, 1072, 1075, 1076, 1079, 1084, 1087, 1096, 1099], "whose": [351, 404, 419, 420, 510, 518, 519, 522, 532, 535, 539, 544, 547, 576, 579, 580, 583, 696, 699, 712, 715, 716, 719, 733, 737, 738, 742, 747, 758, 865, 866, 868, 872, 875, 877, 878, 880, 881, 883, 884, 886, 895, 897, 898, 900, 901, 903, 904, 906, 907, 909, 911, 913, 914, 916, 917, 919, 923, 925, 951, 969, 972, 985, 988, 1055, 1056, 1057, 1071, 1072, 1075, 1099], "ref": [351, 510, 564, 567, 633, 636, 679, 682, 688, 691, 700, 703, 728, 732, 951, 995, 998], "promot": [351, 355, 360, 423, 429, 432, 435, 450, 451, 455, 510, 515, 518, 519, 522, 523, 526, 528, 531, 532, 535, 536, 539, 544, 547, 548, 551, 556, 559, 560, 563, 564, 567, 568, 571, 576, 579, 580, 583, 584, 597, 600, 601, 604, 641, 644, 645, 648, 653, 656, 657, 660, 673, 676, 679, 682, 696, 699, 700, 703, 712, 715, 716, 719, 720, 723, 733, 737, 738, 742, 865, 866, 868, 869, 871, 884, 886, 887, 890, 895, 897, 901, 903, 904, 906, 911, 913, 926, 928, 929, 931, 951, 995, 998, 1071, 1080, 1083], "But": [351, 359, 370], "needless": 351, "info": [351, 1113], "subset": [351, 354, 363, 365], "extend": [351, 354, 356, 363], "renam": 351, "conform": [351, 404, 415, 423, 432, 435, 510, 523, 528, 531, 548, 551, 568, 571, 572, 575, 580, 601, 604, 605, 688, 691, 704, 707, 720, 723, 724, 727, 733, 738, 865, 872, 951, 965, 968, 969, 972, 985, 988, 1055, 1056, 1057, 1060, 1061, 1064, 1071, 1076, 1079, 1104, 1105, 1108], "org": [351, 423, 432, 435, 510, 528, 531, 568, 571, 572, 575, 580, 605, 688, 691, 720, 723, 724, 727, 821, 823, 824, 826, 951, 965, 968, 985, 988, 1055, 1056, 1057, 1060, 1061, 1064, 1071, 1076, 1079], "elementwise_funct": [351, 510, 528, 531, 568, 571, 572, 575, 580, 605, 688, 691, 720, 723, 724, 727, 951, 985, 988, 1055, 1056, 1057, 1060, 1061, 1064, 1071, 1076, 1079], "descript": [351, 359, 404, 415, 423, 432, 435, 510, 523, 528, 531, 548, 551, 568, 571, 572, 575, 580, 605, 688, 691, 704, 707, 720, 723, 724, 727, 733, 738, 747, 775, 852, 855, 864, 865, 872, 929, 931, 951, 965, 968, 969, 972, 985, 988, 1033, 1034, 1037, 1055, 1056, 1057, 1060, 1061, 1064, 1071, 1076, 1079, 1104, 1105, 1108], "simplic": [351, 369, 381, 404, 415, 423, 432, 435, 510, 523, 528, 531, 548, 551, 568, 571, 572, 575, 580, 605, 688, 691, 704, 707, 720, 723, 724, 727, 733, 738, 747, 775, 852, 855, 864, 865, 872, 951, 965, 968, 969, 972, 985, 988, 1033, 1034, 1037, 1055, 1056, 1057, 1060, 1061, 1064, 1071, 1076, 1079], "judgment": 351, "beyond": [351, 951, 985, 988], "text": 351, "func_nam": [351, 352, 355], "pure": [351, 367, 370, 382], "themselv": [351, 355, 359, 360, 361, 369, 1015, 1016], "operator_nam": 351, "succinct": 351, "contstructor": 351, "though": [351, 355, 360, 368, 382], "forward": [351, 370, 381, 382, 1146, 1147, 1150, 1154], "_forward": [351, 365, 368, 369, 1113], "former": 351, "trainabl": [351, 366, 368, 369, 821, 833, 1123, 1124, 1146, 1147, 1156], "explicitli": [351, 355, 356, 358, 359, 362, 365, 382, 865, 878, 880, 1134, 1143, 1145, 1146, 1147], "latter": [351, 356], "implicit": [351, 359, 365], "docst": 351, "eight": 352, "static_": 352, "op_nam": 352, "__r": 352, "four": [352, 355, 360, 363, 368], "__sub__": [352, 358, 359, 363, 367], "__mul__": [352, 358, 359, 363, 367], "__truediv__": [352, 358, 359], "respect": [352, 358, 359, 360, 363, 404, 415, 510, 511, 514, 523, 526, 540, 543, 548, 551, 556, 559, 560, 563, 564, 567, 568, 571, 584, 587, 589, 592, 600, 608, 609, 612, 613, 616, 617, 620, 633, 636, 637, 640, 657, 660, 661, 664, 669, 672, 673, 676, 679, 682, 688, 691, 700, 703, 728, 732, 821, 823, 824, 826, 828, 829, 831, 834, 836, 838, 840, 842, 844, 865, 907, 909, 1011, 1012, 1013, 1014], "recap": [352, 359, 369], "independ": [352, 353, 357, 359, 365, 370, 865, 869, 871, 911, 913, 1038, 1039], "combinatorili": 352, "variat": [352, 354], "grid": [352, 354, 381, 404, 415], "vari": [352, 354, 359, 367, 1055, 1056, 1057, 1059], "simplest": 352, "small": [352, 355, 365, 369, 382, 510, 679, 682, 865, 886, 895, 897, 904, 906, 1033, 1034, 1037, 1148, 1149], "unus": [352, 362, 401, 402], "18": [352, 359, 510, 568, 571, 865, 875, 877, 901, 903, 1071, 1072, 1075, 1099], "excess": [352, 356, 367], "showcas": [352, 381], "demonstr": [352, 367], "replic": [352, 360], "meant": 352, "imaginari": 352, "some_flag": 352, "another_flag": 352, "54": [352, 510, 576, 580, 720, 723, 852, 864, 865, 901, 903, 1038, 1043, 1071, 1072, 1075, 1099], "jointli": 352, "three": [352, 359, 364, 404, 415, 1113], "x0": [352, 747, 755], "procedur": 352, "sens": [352, 359, 367], "5574077": 352, "1850398": 352, "5463025": 352, "8422884": 352, "91601413": 352, "9647598": 352, "3738229": 352, "1597457": 352, "0963247": 352, "9955841": 352, "3278579": 352, "multi": [352, 359, 364, 382, 852, 863, 865, 869, 871, 1113, 1119, 1134, 1145], "seper": [352, 747, 774], "pars": [352, 382], "satisfi": [352, 865, 932, 934], "far": [352, 361, 366, 367, 1015, 1016, 1026], "asid": [352, 381], "irrelev": [352, 360], "increasingli": 352, "complex": [352, 368, 369, 370, 382, 865, 878, 880, 914], "rule": [352, 354, 355, 358, 359, 360, 423, 429, 432, 435, 451, 510, 539, 544, 547, 564, 567, 584, 679, 682, 700, 703, 737, 742, 865, 866, 868, 869, 871, 901, 903, 911, 913], "count": [352, 368, 460, 498, 865, 926, 928, 951, 969, 972, 1055, 1056, 1057, 1104, 1105, 1108, 1109, 1112], "14254655": 352, "1578213": 352, "380515": 352, "17": [352, 359, 393, 395, 865, 875, 877, 1038, 1043], "trivial": 352, "By": [352, 355, 359, 362, 369, 370, 747, 765, 766, 865, 926, 928, 951, 977, 980, 1071, 1076, 1079, 1080, 1083, 1084, 1087, 1088, 1091, 1092, 1095, 1096, 1100, 1103, 1104, 1105, 1108, 1109, 1112], "non": [352, 359, 360, 365, 401, 402, 423, 429, 447, 510, 665, 668, 669, 672, 852, 855, 865, 872, 895, 897, 914, 920, 922, 926, 928, 929, 931, 1050, 1051, 1052, 1053, 1071, 1076, 1079, 1080, 1083, 1084, 1087, 1088, 1091, 1100, 1103, 1104, 1105, 1108, 1109, 1112, 1146, 1147, 1150, 1154], "dictat": [352, 358, 362, 363], "exlud": 352, "unit": [353, 354, 382, 393, 394, 395, 396, 460], "thoroughli": [353, 354], "ci": [353, 354, 382], "failur": 353, "On": [354, 366, 370], "fixtur": 354, "consum": [354, 359, 363, 460], "300": [354, 510, 704, 707], "hit": [354, 365], "permit": [354, 358, 363], "action": 354, "eleg": 354, "intellig": 354, "sampl": [354, 852, 860, 1038, 1039, 1043, 1044, 1046, 1071, 1092, 1095, 1100, 1103, 1134, 1142], "rang": [354, 368, 369, 370, 404, 405, 413, 414, 1055, 1056, 1071, 1088, 1091, 1096, 1113], "cach": [354, 355, 460, 478, 747, 758], "unexplor": 354, "known": 354, "repeatedli": [354, 359, 1015, 1024], "upload": 354, "artifact": 354, "parametr": 354, "strategi": 354, "statement": [354, 382], "plai": [354, 370], "helper": [354, 368], "verifi": [354, 360, 361, 367, 1113, 1119], "truth": [354, 510, 589, 592, 613, 616, 617, 620, 633, 636, 637, 640, 688, 691], "opt": [354, 356, 362, 367], "defer": [354, 355, 358, 359, 360, 361, 362], "suffic": [354, 357], "catch": [354, 747, 768], "systemat": 354, "safeguard": 354, "inabl": 354, "fact": [354, 368], "categor": [355, 361], "mutual": [355, 359], "constitut": [355, 365, 1071, 1092, 1095, 1100, 1103], "venn": 355, "diagram": 355, "light": [355, 382], "wherea": [355, 358, 360, 361, 363, 370], "hand": [355, 382], "log_pr": [355, 359, 362], "array_arg": 355, "typic": 355, "whatsoev": [355, 359], "commonli": [355, 1071, 1092, 1095, 1100, 1103], "outsid": [355, 361, 365, 367, 370, 951, 952, 955, 995, 998], "denomin": [355, 382, 747, 773, 783, 806, 811, 812, 1033, 1034, 1037, 1148, 1149], "divis": [355, 510, 564, 567, 584, 587, 608, 609, 612, 700, 703, 747, 773, 783, 806, 811, 812, 821, 823, 824, 826, 834, 836, 1150, 1151, 1152], "piec": [355, 357, 358, 365], "deal": [355, 382], "concurr": [355, 359], "weight": [355, 359, 369, 370, 821, 823, 824, 826, 829, 831, 834, 836, 838, 840, 842, 844, 852, 861, 862, 864, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1143, 1144, 1146, 1147, 1150, 1152, 1153], "modif": 355, "decor": [355, 357, 359, 360, 361, 362], "group": [355, 359], "briefli": [355, 368], "cast": [355, 360, 423, 429, 432, 435, 951, 957, 960, 1071, 1088, 1091, 1096, 1113], "get_all_arrays_on_dev": 355, "nested_map": [355, 1015], "index_nest": [355, 1015], "implicit_backend": 356, "unless": [356, 361, 362, 382, 510, 679, 682, 747, 800], "__dict__": [356, 365, 367], "ivy_original_dict": [356, 365], "unmodifi": [356, 360], "moment": [356, 382, 821, 823, 824, 826, 834, 836, 1150, 1151, 1152], "fallback": 356, "freedom": [356, 1071, 1092, 1095, 1100, 1103], "recommend": [356, 510, 665, 668, 669, 672, 700, 703, 1071, 1080, 1083], "achiev": [357, 368, 370], "wrapper": [357, 358, 359, 360, 362, 363, 367], "topic": [357, 367], "tf": [358, 360, 361, 362, 363, 365, 370, 382, 1113], "_data": [358, 367], "organiz": [358, 359], "inherit": [358, 359, 367], "bear": [358, 359, 360], "mind": [358, 359], "necessarili": [358, 359], "although": [358, 359], "underpin": [358, 359, 365], "programmat": [358, 359], "backup": [358, 359], "accident": [358, 359], "readabl": [358, 359, 363, 367, 368], "absent": [358, 359], "perk": [358, 359], "auto": [358, 359, 368], "throw": [358, 367], "imposs": 358, "coupl": [358, 359, 367, 369], "anywai": 358, "secondli": [358, 360], "easier": 358, "five": [359, 368], "decis": [359, 365, 367], "displai": [359, 368], "arbitrarili": [359, 368], "__repr__": 359, "control": [359, 360, 362, 367, 368, 381], "__getattr__": 359, "underli": [359, 510, 548, 551, 560, 563, 568, 571, 673, 676], "__setattr__": 359, "__contains__": 359, "__getstate__": 359, "__setstate__": 359, "unpickl": 359, "expand": [359, 747, 774, 951, 965, 968], "children": 359, "shallowest": 359, "deepest": 359, "67": [359, 510, 568, 571, 580], "22": [359, 510, 568, 571, 865, 875, 877, 901, 903, 1050, 1054, 1071, 1072, 1075, 1099], "25": [359, 510, 720, 723, 724, 727, 865, 875, 877, 884, 935, 941, 944, 1033, 1034, 1037, 1071, 1072, 1075, 1099], "retain_grad": [359, 821, 828], "dy": [359, 821, 828], "dx": [359, 821, 828], "technic": [359, 362, 363, 382], "autograd": [359, 382], "grad": [359, 368, 369, 370, 1113, 1150, 1154], "redund": 359, "num_head": [359, 852, 863, 1134, 1145], "mask": [359, 852, 863, 864], "to_q_fn": [359, 852, 863], "to_kv_fn": [359, 852, 863], "to_out_fn": [359, 362, 852, 863], "to_q_v": [359, 852, 863], "to_kv_v": [359, 852, 863], "to_out_v": [359, 852, 863], "measur": [359, 852, 863, 1134, 1145], "dot": [359, 852, 863, 864, 865, 920, 922, 926, 928, 1134, 1145], "product": [359, 510, 679, 682, 747, 765, 852, 863, 864, 865, 869, 871, 887, 890, 901, 903, 920, 922, 926, 928, 1071, 1072, 1075, 1088, 1091, 1099, 1134, 1145], "implicitli": 359, "intuit": [359, 368, 369], "debug": [359, 368], "chronolog": 359, "had": [359, 362], "sequenti": [359, 369], "flow": [359, 381], "implic": 359, "slightli": [359, 365, 369], "eager": [359, 382], "int8": [360, 423, 444], "int16": [360, 423, 432, 435, 444, 1071, 1088, 1091, 1096], "uint8": [360, 423, 432, 435, 444], "uint16": [360, 423, 445, 1071, 1088, 1091, 1096], "uint32": [360, 423, 445, 1071, 1088, 1091, 1096], "uint64": [360, 423, 445, 1071, 1088, 1091, 1096], "bfloat16": [360, 423, 444], "float16": [360, 423, 445], "all_dtyp": 360, "all_numeric_dtyp": 360, "all_int_dtyp": 360, "all_float_dtyp": 360, "fall": [360, 364, 1113, 1146, 1147, 1150, 1154], "valid": [360, 365, 423, 437, 852, 853, 854, 855, 856, 857, 858, 859, 951, 995, 998, 1104, 1105, 1108, 1109, 1112, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141], "invalid": [360, 865, 926, 928, 1104, 1105, 1108, 1109, 1112], "thirdli": 360, "native_float32": 360, "importantli": [360, 367, 370, 381], "varieti": [360, 361], "conveni": [360, 361, 363, 366, 368, 369], "arguabl": [360, 361], "compound": 360, "overflow": [360, 510, 523, 1071, 1096], "arr": [360, 361, 1033, 1034, 1037], "scalar": [360, 365, 370, 382, 404, 412, 747, 800, 817, 820, 865, 929, 931], "settabl": [360, 361], "jnp": [360, 361, 362, 363, 370, 1113], "jaxarrai": [360, 361, 362, 363], "mx": [360, 361, 362, 1113], "nd": [360, 361, 362, 365, 370, 1113], "deleg": 360, "fill_valu": [360, 404, 411, 412, 510, 592, 616, 617, 620], "as_n": [360, 423, 438, 439, 440, 441, 460, 479, 480, 501], "idx": [361, 367, 747, 753], "tpu": [361, 460, 482, 507], "aliv": [361, 460, 494, 498, 500, 747, 781, 799, 801], "amount": [361, 460, 506, 935, 936, 939, 941, 944, 946, 949], "memori": [361, 362, 380, 382, 460, 478, 499, 504, 506, 509, 852, 862, 1113], "dual": 361, "thrown": [361, 382, 747, 791], "rare": [361, 382], "program": 362, "strictli": 362, "ration": 362, "speak": 362, "subtli": 362, "ensure_in_backend": [362, 747, 791], "x_nativ": 362, "val_n": 362, "is_ivy_arrai": [362, 367, 747], "is_vari": [362, 821], "assign": [362, 367], "elif": 362, "irrespect": [362, 367, 423, 429], "inclus": [362, 404, 405, 1038, 1040, 1041], "omit": [362, 363, 1055, 1056, 1057, 1059], "unspecifi": [362, 510, 696, 699, 700, 703, 865, 878, 880, 951, 995, 998], "predominantli": [362, 381], "math": [362, 370, 1113], "presenc": 362, "altern": [362, 368], "_wrap_fn": 362, "maxim": [362, 365], "inner": [362, 367, 865, 878, 880, 887, 890, 1011, 1012, 1013, 1014], "third": [362, 382, 865, 914, 1055, 1056], "addition": [362, 363], "leverag": 362, "equival": [362, 368, 370, 404, 405, 510, 564, 567, 665, 668, 669, 672, 700, 703, 865, 886, 895, 897, 904, 906, 911, 913, 929, 931], "input_arrai": 362, "adress": 363, "revisit": [363, 370], "dedic": [363, 367, 369, 821, 850, 1123, 1124], "__div__": 363, "dicat": 363, "futher": 363, "absenc": 363, "pep": 363, "484": 363, "annot": 363, "brittl": 363, "intend": [363, 1071, 1096], "freeli": 363, "inde": [363, 382], "flexibl": 363, "original_typ": 363, "cumbersom": 363, "sound": 364, "higher": [364, 365, 370, 382, 821, 824, 826, 829, 831, 834, 836, 838, 840, 842, 844], "overview": [364, 381], "handler": [364, 366, 370, 1113], "fledg": [365, 366], "syntact": [365, 370], "clip_by_valu": [365, 370], "clamp": [365, 370], "behavior": [365, 382, 510, 696, 699, 700, 703, 1055, 1056, 1057, 1059], "fit": [365, 951, 977, 980], "construct": [365, 366, 369, 370, 951, 1003, 1006, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1143, 1144, 1145, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157], "num": [365, 404, 413, 414], "power_seq": 365, "okai": 365, "bound": 365, "resid": [365, 369], "edg": [365, 370, 951, 952, 955, 961, 964, 1007, 1010, 1113], "larger": [365, 370, 423, 443, 951, 952, 955, 985, 988, 1071, 1092, 1095, 1100, 1103], "ml_framework": [365, 370, 404, 405], "current_framework": [365, 370], "furthermor": 365, "concaten": [365, 368, 460, 489, 747, 774, 951, 957, 960, 1113], "framework_handl": 365, "face": 365, "verbos": [365, 1113, 1160], "cprint": [365, 1159], "framework_stack": 365, "_determine_framework_from_arg": 365, "valueerror": [365, 951, 991, 994], "get_framework": 365, "neither": [365, 510, 523, 679, 682], "illustr": [365, 381], "un": [365, 423, 447], "nn": [365, 370, 404, 415, 1113], "init_h": [365, 852, 862], "init_c": [365, 852, 862], "kernel": [365, 382, 852, 862], "recurrent_kernel": [365, 852, 862], "bia": [365, 369, 852, 861, 862, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1144], "recurrent_bia": [365, 852, 862], "x_shape": 365, "batch_shap": [365, 367, 370, 747, 800, 852, 862, 863, 864, 865, 932, 934, 1038, 1039, 1134, 1143], "timestep": [365, 852, 862, 1134, 1143], "input_channel": [365, 369, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1143, 1144], "x_flat": 365, "wi": 365, "wi_x": 365, "wii_x": 365, "wif_x": 365, "wig_x": 365, "wio_x": 365, "recurr": [365, 852, 862], "wh": 365, "lstm": [365, 852, 862, 1134], "ht": 365, "ct": 365, "hts_list": 365, "unrol": [365, 368, 852, 862], "wii_xt": 365, "wif_xt": 365, "wig_xt": 365, "wio_xt": 365, "zip": 365, "htm1": 365, "ctm1": 365, "wh_htm1": 365, "whi_htm1": 365, "whf_htm1": 365, "whg_htm1": 365, "who_htm1": 365, "ft": 365, "gt": 365, "ot": 365, "offici": 365, "reliabl": 365, "sacrific": 365, "hear": 365, "virtu": 365, "pure_ivi": 365, "reduce_mean": [365, 368, 369, 370, 1113], "reduce_sum": [365, 1113], "reduce_var": 365, "compile_graph": [365, 370], "pure_torch": 365, "cat": [365, 370], "backbon": [365, 368], "_layer": 365, "super": [365, 368, 369, 370], "clean": [365, 366, 368], "random_unifrom": 365, "unclean": 365, "wx": 365, "temp": 365, "torchscript": 365, "fn": [365, 367, 383, 384, 385, 386, 387, 388, 389, 390, 391, 423, 444, 445, 460, 469, 470, 747, 753, 818, 1015, 1016, 1021, 1022, 1023, 1025, 1026, 1027, 1116, 1118], "example_input": [365, 401, 402], "static_argnum": [365, 401, 402], "static_argnam": [365, 401, 402], "jit": [365, 382], "frontend": 366, "primit": [366, 382], "describ": [366, 370, 1071, 1072, 1075, 1088, 1091, 1092, 1095, 1096, 1099], "hierarch": [366, 368, 369], "straight": [367, 1113], "arraywithlinalg": 367, "arraywithlog": 367, "arraywithmath": 367, "arraywithmeta": 367, "arraywithreduct": 367, "is_native_arrai": [367, 747], "_shape": 367, "_size": 367, "functool": 367, "mul": 367, "len": [367, 370, 404, 415], "_dtype": 367, "_devic": 367, "_dev_str": 367, "_pre_repr": 367, "_post_repr": 367, "ndim": [367, 865, 907, 909, 914], "mt": 367, "answer": [367, 382], "consol": 367, "typeerror": 367, "immut": 367, "behav": 367, "claim": 367, "truli": 367, "_native_wrapp": 367, "attributeerror": 367, "genuin": 367, "some_method": 367, "similarli": [367, 404, 415], "rewritten": 367, "__pow__": 367, "strang": 367, "power": [367, 368, 369, 510, 564, 567, 597, 696, 699, 747, 782, 805, 812, 865, 894, 1125], "enforc": 367, "notic": 367, "appear": [367, 951, 965, 968], "invers": [367, 381, 510, 515, 518, 519, 522, 528, 531, 532, 535, 536, 539, 540, 543, 544, 547, 579, 583, 737, 742, 865, 884, 886, 904, 906], "_wrap_method": 367, "func_wrapp": [367, 383, 384, 385, 386, 387, 388, 389, 390, 391], "__name__": 367, "non_wrapped_method": 367, "_method_wrap": 367, "native_arg": 367, "native_kwarg": 367, "inner_fn": 367, "whist": 367, "unwrap": 367, "transit": 367, "needlessli": 367, "randn": 367, "_unwrap_method": 367, "method_wrap": 367, "compartment": 367, "public": [367, 747, 763], "newshap": [367, 951, 981, 984], "new_shap": 367, "tidi": 367, "shorter": 367, "crystal": 367, "41": [367, 510, 568, 571, 720, 723, 865, 866, 868, 1071, 1096], "enough": [367, 368, 369], "ton": 368, "ado": [368, 369], "incred": [368, 382], "hash": 368, "soup": 368, "walk": [368, 369], "dct": 368, "cnt": 368, "combo": [368, 1113, 1119], "hold": [368, 747, 803, 804], "1000": [368, 510, 720, 723], "uda": 368, "3333": 368, "6667": 368, "178": 368, "new_weight": 368, "0600": 368, "3100": 368, "2400": 368, "6900": 368, "delimit": 368, "autocomplet": 368, "midwai": 368, "agent": 368, "total_spe": 368, "total_height": 368, "total_width": 368, "ag": 368, "tot": 368, "total_": 368, "total_h": 368, "batch_siz": [368, 852, 853, 854, 855, 856, 857, 858, 859, 1038, 1039], "dir": 368, "adam": [368, 369, 370, 821, 823, 824, 826, 834, 836, 1113, 1150, 1152], "cnt0": 368, "cnt1": 368, "diff_0": 368, "diff_1": 368, "config0": 368, "config1": 368, "Not": [368, 369, 382, 403], "decod": 368, "l0": 368, "l1": [368, 865, 929, 931], "depth": [368, 369, 370, 381, 460, 484, 488, 492, 747, 785, 800, 1015, 1027, 1146, 1147], "clearer": 368, "truncat": 368, "decoder__l0": 368, "decoder__l1": 368, "encoder__l0": 368, "encoder__l1": 368, "height": 368, "l0__b": 368, "l0__w": 368, "l1__b": 368, "l1__w": 368, "printabl": 368, "obviou": 368, "foresight": 368, "untidili": 368, "update_ag": 368, "normalize_img": 368, "img": 368, "img_max": 368, "reduce_max": [368, 1113], "img_min": 368, "reduce_min": [368, 1113], "img_rang": 368, "agent_posit": 368, "agent_veloc": 368, "agent_cam_front_rgb": 368, "agent_cam_front_depth": 368, "agent_cam_rear_rgb": 368, "agent_cam_rear_depth": 368, "agent_cam_lidar": 368, "normal": [368, 951, 995, 998, 1033, 1034, 1037, 1038, 1043, 1148, 1149], "cleaner": 368, "camera": 368, "front_rgb": 368, "front_depth": 368, "rear_rgb": 368, "rear_depth": 368, "lidar": 368, "rgb": 368, "rear": 368, "veloc": 368, "cam": 368, "cam_max": 368, "cam_min": 368, "cam_rang": 368, "Of": 368, "ideal": 368, "perman": 368, "afterward": 368, "thread": 368, "incorpor": 368, "pretti": 368, "straightforward": 368, "dataload": [368, 380, 1113], "_cnt": 368, "img_": 368, "_dataset_s": 368, "_batch_siz": 368, "_count": [368, 369], "__next__": 368, "filenam": 368, "img_fnam": 368, "fname": 368, "loaded_img": 368, "cv2": 368, "imread": 368, "loader": [368, 382], "32": [368, 393, 395, 510, 568, 571, 852, 855, 858, 865, 901, 903, 1050, 1054, 1071, 1072, 1075, 1099], "batch_slic": 368, "model": [368, 369, 1113], "mymodel": [368, 1113], "linear0": [368, 369, 1113], "linear1": [368, 369, 1113], "x_in": [368, 369, 370, 1113], "001": [368, 369, 1033, 1034, 1037], "loss_fn": [368, 369, 370, 1113], "0145": 368, "grad_fn": 368, "addbackward0": 368, "_create_vari": 369, "output_channel": [369, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1143, 1144], "with_bia": [369, 1134, 1144], "_input_channel": 369, "_output_channel": 369, "_w_shape": 369, "_b_shape": 369, "_with_bia": 369, "8979": 369, "3198": 369, "0196": 369, "3126": 369, "3717": 369, "9687": 369, "6958": 369, "5122": 369, "3902": 369, "8800": 369, "5613": 369, "1982": 369, "nightmar": 369, "overcom": 369, "fc": 369, "9563": 369, "impact": 369, "v0": 369, "v1": 369, "6440": 369, "key0": 369, "1823": 369, "8075": 369, "linear3": 369, "v2": 369, "2346": 369, "counter": 369, "hidden": [369, 852, 862, 1134, 1143], "fed": [369, 460, 504], "1300": 369, "decoupl": 369, "scheme": 369, "weight_initi": [369, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1143, 1144], "glorotuniform": [369, 1125, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1143, 1144], "bias_initi": [369, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1144], "_w_init": 369, "_b_init": 369, "create_vari": [369, 1125], "var_shap": [369, 1125], "fan_out": [369, 1125], "fan_in": [369, 1125], "fan_mod": [369, 1125], "fan_sum": 369, "slight": 369, "misnom": 369, "saw": 369, "vanilla": [369, 1011, 1013], "descent": [369, 821, 829, 831, 1150, 1155], "lar": [369, 821, 834, 836, 838, 840, 1150], "lamb": [369, 821, 834, 836, 1150], "compile_on_next_step": [369, 1146, 1147, 1150, 1151, 1152, 1153, 1154, 1155], "_beta1": 369, "_beta2": 369, "_epsilon": 369, "_mw": 369, "_vw": 369, "_first_pass": 369, "_should_compil": 369, "_step": [369, 1150, 1154], "new_v": 369, "_lr": 369, "isinst": [369, 370, 747, 815], "_inplac": 369, "_stop_gradi": 369, "set_stat": [369, 1150, 1151, 1152, 1153, 1154, 1155], "mw": [369, 821, 823, 824, 826], "vw": [369, 821, 823, 824, 826], "pre": [370, 382, 460], "captur": 370, "sparse_funct": 370, "num_class": [370, 1038, 1039], "num_dim": 370, "new_axi": 370, "_linear": 370, "to_backend": 370, "jax_graph": 370, "learnabl": [370, 1033, 1034, 1037, 1148, 1149], "to_ivy_modul": [370, 1123], "thinli": 370, "whilst": 370, "to_haiku_modul": 370, "hk": 370, "loss_fn_t": 370, "transform": [370, 381, 852, 860, 861], "without_apply_rng": 370, "rng": 370, "prngkei": 370, "init": 370, "update_rul": 370, "01": [370, 510, 704, 707], "tree_multimap": 370, "mechan": [380, 382, 1113], "vision": [380, 1113], "robot": [380, 1113], "focus": 381, "field": [381, 865, 878, 880, 907, 909, 914, 1055, 1056, 1057], "perfect": 381, "3d": [381, 1134, 1139, 1140], "differenti": 381, "demo": [381, 1113], "orient": 381, "pose": 381, "euler": [381, 403], "quaternion": 381, "rotat": 381, "matric": [381, 404, 415, 419, 420, 852, 861, 865, 866, 868, 872, 875, 877, 878, 880, 881, 883, 884, 886, 894, 895, 897, 898, 900, 904, 906, 907, 909, 911, 913, 914, 916, 917, 919, 923, 925], "angl": [381, 510, 540, 543, 580, 716, 719, 738], "ivy_mech": 381, "target_facing_rotation_matrix": 381, "polar_to_cartesian_coord": 381, "ordin": [381, 865, 911, 913], "warp": 381, "optic": 381, "voxel": 381, "ivy_vis": 381, "coords_to_voxel_grid": 381, "render_pixel_coord": 381, "neural": [381, 852, 1113, 1120, 1134], "radianc": 381, "nerf": 381, "trajectori": 381, "motion": 381, "plan": [381, 1113], "mobil": 381, "ivy_robot": 381, "sample_spline_path": 381, "rigidmobil": 381, "sample_bodi": 381, "drone": 381, "sample_link": 381, "openai": 381, "swimmer": 381, "cumul": [381, 747, 765, 766], "reward": 381, "supervis": 381, "reinforc": 381, "door": [381, 382], "intersect": 381, "cartpol": 381, "mountain_car": 381, "pendulum": 381, "reacher": 381, "polici": 381, "condit": [381, 401, 402, 1015, 1025, 1026, 1050, 1054], "learnt": 381, "ture": 381, "ntm": 381, "egospher": 381, "spatial": 381, "esm": 381, "ivy_memori": 381, "egocentr": 381, "room": 381, "inspir": 381, "doubt": 382, "grate": 382, "put": 382, "probe": 382, "undergo": 382, "remark": 382, "surpris": 382, "backward": [382, 510, 700, 703, 865, 926, 928, 1104, 1105, 1108, 1109, 1112], "lock": 382, "contunu": 382, "minor": 382, "xla": 382, "buffer": 382, "kind": [382, 423, 443, 446, 510, 696, 699, 1071, 1088, 1091, 1096], "gold": 382, "dex": 382, "phase": 382, "lax": 382, "scan": 382, "tricki": 382, "predictor": 382, "tight": 382, "driver": 382, "schedul": 382, "algorithm": [382, 852, 853, 854, 855, 856, 857, 858, 859, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141], "dispatch": 382, "Will": 382, "ast": 382, "dynamic": 382, "cond": 382, "jacobian": 382, "checkpoint": 382, "autodiff": 382, "shine": 382, "merci": 382, "superset": 382, "cluster": 382, "compet": 382, "paradigm": 382, "parallelis": [382, 460, 469, 470], "spmd": 382, "mixtur": 382, "expert": 382, "sophist": 382, "depart": 382, "routin": 382, "hundr": 382, "thousand": 382, "deepli": [382, 1015, 1017], "broadli": 382, "heavili": 382, "supplementari": 382, "Is": 382, "reusabl": 382, "fanci": 382, "fusion": 382, "lose": 382, "vmap": 382, "pmap": 382, "overhead": 382, "ineffici": 382, "eventu": 382, "supplement": 382, "backdoor": 382, "callback": 382, "record": 382, "metric": 382, "somewhat": 382, "outsourc": 382, "inputs_to_ivy_arrai": 383, "gaussian": [393, 394], "leaki": [393, 394, 395], "alpha": [393, 395], "rectifi": [393, 395, 396], "slope": [393, 395], "39": [393, 395, 510, 597, 865, 901, 903, 1071, 1072, 1075, 1099], "85": [393, 395, 510, 568, 571], "48": [393, 395, 510, 720, 723, 865, 901, 903, 1071, 1072, 1075, 1099], "88": [393, 395, 510, 568, 571, 865, 901, 903, 1071, 1072, 1075, 1099], "269": [393, 397], "731": [393, 397], "881": [393, 397], "214": [393, 397], "978": [393, 397], "891": [393, 397], "422": [393, 398], "155": [393, 398], "0768": [393, 398], "231": [393, 398], "693": [393, 398, 935, 946, 949], "49": [393, 398, 510, 720, 723, 1071, 1072, 1075, 1099], "147": [393, 398], "363": [393, 398], "3461": [393, 399], "6491": [393, 399], "535": [393, 399], "hyperbol": [393, 400, 510, 518, 519, 522, 532, 535, 539, 544, 547, 579, 580, 583, 716, 719, 737, 738, 742], "55": [393, 400, 852, 858, 865, 901, 903, 1071, 1072, 1075, 1099], "501": [393, 400], "faster": [401, 402], "invoc": [401, 402], "718281828459045": 403, "newaxi": 403, "alia": 403, "pi": 403, "141592653589793": 403, "mathemat": [403, 510, 523, 540, 543, 601, 604, 679, 682, 865, 929, 931], "half": [404, 405, 1038, 1040, 1041, 1044, 1046], "chosen": [404, 405, 510, 540, 543, 1050, 1054], "distanc": [404, 405], "adjac": [404, 405], "interpret": [404, 406, 416], "uniniti": [404, 407, 408], "n_row": [404, 409], "n_col": [404, 409], "elsewher": [404, 409, 1050, 1054], "row": [404, 409, 865, 911, 913, 914, 1038, 1039, 1050, 1053], "column": [404, 409, 865, 878, 880, 907, 909, 911, 913, 914], "__dlpack__": [404, 410, 460, 505], "interchang": [404, 410, 951, 999, 1002], "endpoint": [404, 413], "xy": [404, 415], "coordin": [404, 415, 510, 540, 543], "cartesian": [404, 415], "ij": [404, 415, 1071, 1072, 1075, 1099], "rank": [404, 415, 747, 819, 865, 869, 871, 895, 897, 907, 909, 911, 913, 923, 925, 926, 928, 929, 931, 951, 961, 964, 965, 968, 995, 998, 1007, 1010, 1050, 1053, 1104, 1105, 1108, 1109, 1112], "ni": [404, 415], "xi": [404, 415], "n1": [404, 415], "n2": [404, 415], "n3": [404, 415], "accordingli": [404, 415, 510, 601, 604, 865, 929, 931, 1050, 1052, 1055, 1056, 1057, 1059, 1071, 1076, 1079, 1080, 1083, 1084, 1087, 1088, 1091, 1092, 1095, 1096, 1100, 1103, 1104, 1105, 1108, 1109, 1112], "xv": [404, 415], "yv": [404, 415], "triangular": [404, 419, 420, 865, 866, 868, 907, 909], "innermost": [404, 419, 420, 865, 866, 868, 872, 875, 877, 878, 880, 881, 883, 884, 886, 895, 897, 898, 900, 904, 906, 907, 909, 911, 913, 914, 916, 917, 919, 923, 925], "mxn": [404, 419, 420, 865, 875, 877, 886, 895, 897, 898, 900, 904, 906, 907, 909, 916, 917, 919, 923, 925], "defaultdtyp": [423, 424], "defaultfloatdtyp": [423, 425], "float_dtyp": [423, 439, 453], "defaultintdtyp": [423, 426], "dtype_in": [423, 427, 428, 442, 447, 448, 449, 459], "incompat": [423, 431], "occur": [423, 432, 435, 1050, 1051, 1052, 1055, 1056, 1057, 1059], "data_type_funct": [423, 432, 435], "closest": [423, 437, 510, 572, 575, 587, 605, 608, 609, 612, 704, 707, 743, 746], "floatdtyp": [423, 439], "int_dtyp": [423, 440, 454], "intdtyp": [423, 440], "followng": [423, 443], "occupi": [423, 443, 446, 747, 803, 804], "ep": [423, 443, 865, 886, 895, 897, 904, 906], "smallest_norm": [423, 443], "precis": [423, 443, 510, 679, 682, 720, 723], "encapsul": [423, 446], "type1": [423, 450], "type2": [423, 450], "arrays_and_dtyp": [423, 451], "ret1": [423, 455], "ret2": [423, 455], "noinspect": [424, 425, 426, 461, 822], "pyshadowingnam": [424, 425, 426, 461, 822], "defaultdevic": [460, 461], "__enter__": 460, "_dev": 460, "initialis": 460, "devcloneditem": [460, 482], "multidevitem": [460, 462, 465], "devclonedit": 460, "multidevit": [460, 463, 466, 469, 470, 474], "devclonednest": 460, "multidevnest": [460, 464, 467], "devdistitem": 460, "devdistit": 460, "devdistnest": 460, "devmanag": [460, 468], "dev_mapp": 460, "da_dim_s": 460, "safety_factor": 460, "min_dev_dim_s": 460, "max_dev_dim_step_ratio": 460, "min_unit_dev_tune_step": 460, "min_sf_tune_step": 460, "starting_split_factor": 460, "max_split_factor_step_s": 460, "tune_dev_alloc": 460, "tune_dev_split": 460, "mapper": [460, 469, 470], "receivess": 460, "ratio": [460, 821, 834, 836, 1150, 1152], "safe": [460, 469], "oom": 460, "tune": 460, "da_tune_step": 460, "ds_tune_step": 460, "to_clon": 460, "to_distribut": 460, "multidevic": [460, 469], "parallel": [460, 469, 470], "mutlidevic": [460, 469], "repeated_config_check": 460, "tune_step": 460, "devmapp": [460, 470], "ret_fn": [460, 469, 470], "queue_class": [460, 469, 470], "worker_class": [460, 469, 470], "worker": [460, 469, 470], "used_dev": [460, 469], "sf": [460, 469], "devmappermultiproc": 460, "multidev": [460, 471, 472, 473, 492], "profil": 460, "save_dir": [460, 475], "deviceic": [460, 481], "spread": [460, 492], "139740789224448": [460, 494], "physic": [460, 496], "x3": [460, 498], "x4": [460, 498], "process_specif": [460, 499, 509], "percentag": [460, 499], "ram": [460, 499, 506, 509], "alon": [460, 499, 509], "attr_onli": [460, 500], "chunk": [460, 502, 503, 504], "max_chunk_s": [460, 504], "chunk_siz": [460, 504], "input_ax": [460, 504], "output_ax": [460, 504], "feed": [460, 504], "fist": [460, 504], "stream": [460, 505], "caveat": [460, 505], "portabl": [460, 505, 1113], "gb": [460, 506, 509], "reset": [460, 508], "magnitud": [510, 511, 514, 523, 679, 682, 865, 914, 916, 917, 919], "princip": [510, 515, 528, 531, 536], "cosin": [510, 515, 518, 519, 522, 576, 579, 580, 583], "x1_i": [510, 523, 526, 540, 543, 548, 551, 556, 559, 560, 563, 564, 567, 568, 571, 584, 587, 589, 592, 600, 608, 609, 612, 613, 616, 617, 620, 633, 636, 637, 640, 657, 660, 661, 664, 669, 672, 673, 676, 679, 682, 688, 691, 696, 699, 700, 703, 728, 732], "x2_i": [510, 523, 526, 540, 543, 548, 551, 556, 559, 560, 563, 564, 567, 568, 571, 584, 587, 589, 592, 600, 608, 609, 612, 613, 616, 617, 620, 633, 636, 637, 640, 657, 660, 661, 664, 669, 672, 673, 676, 679, 682, 688, 691, 696, 699, 700, 703, 728, 732], "finit": [510, 523, 540, 543, 621, 624, 679, 682, 696, 699, 700, 703], "nor": [510, 523, 679, 682], "nearest": [510, 523, 679, 682, 704, 707], "2019": [510, 523, 601, 604, 679, 682], "commut": [510, 523], "sine": [510, 528, 531, 532, 535, 712, 715, 716, 719], "57": [510, 528, 531, 568, 571, 580], "524": [510, 528, 531], "644": [510, 528, 531], "201": [510, 528, 531, 704, 707], "305": [510, 528, 531], "412": [510, 528, 531], "quotient": [510, 540, 543], "notat": [510, 540, 543, 1071, 1072, 1075, 1099], "denot": [510, 540, 543], "pair": [510, 540, 543, 852, 864, 865, 869, 871], "quadrant": [510, 540, 543], "3\u03c0": [510, 540, 543], "549": [510, 539, 544, 547, 737, 742], "bitwis": [510, 548, 551, 560, 563, 568, 571, 673, 676], "AND": [510, 548, 551, 661, 664, 1104, 1105, 1108], "binari": [510, 548, 551, 560, 563, 568, 571, 673, 676, 935, 936, 939], "invert": [510, 552, 555], "arithmet": [510, 564, 567, 1071, 1080, 1083], "propag": [510, 564, 567, 1071, 1076, 1079, 1080, 1083, 1084, 1087, 1092, 1095, 1096, 1100, 1103], "thu": [510, 564, 567, 696, 699, 700, 703, 865, 878, 880], "lh": [510, 564, 567], "rh": [510, 564, 567], "xor": [510, 568, 571, 673, 676], "78": [510, 568, 571, 865, 901, 903, 1071, 1072, 1075, 1099], "91": [510, 568, 571, 865, 901, 903, 1071, 1072, 1075, 1099], "23": [510, 568, 571, 852, 858, 865, 875, 877, 1050, 1054], "66": [510, 568, 571, 865, 901, 903, 1071, 1072, 1075, 1099], "77": [510, 568, 571, 865, 901, 903, 1071, 1072, 1075, 1099], "79": [510, 568, 571], "89": [510, 568, 571, 865, 920, 922, 1071, 1096], "98": [510, 568, 571, 865, 901, 903, 1050, 1054, 1071, 1072, 1075, 1099], "26": [510, 568, 571, 852, 859, 865, 875, 877, 901, 903, 920, 922, 1071, 1072, 1075, 1099], "21": [510, 568, 571, 747, 765, 865, 875, 877, 901, 903, 935, 946, 949, 1071, 1072, 1075, 1099], "34": [510, 568, 571, 720, 723], "24": [510, 568, 571, 720, 723, 747, 765, 865, 875, 877, 901, 903, 1071, 1072, 1075, 1099], "51": [510, 568, 571], "27": [510, 568, 571, 580, 720, 723, 852, 864, 865, 901, 903, 1071, 1072, 1075, 1099], "74": [510, 568, 571], "59": [510, 568, 571], "416": [510, 576], "122": [510, 580], "368": [510, 580], "670": [510, 580], "202": [510, 580, 704, 707], "548": [510, 580], "1490": [510, 580], "dividend": [510, 584, 700, 703], "divisor": [510, 584, 700, 703, 821, 823, 824, 826, 834, 836, 1071, 1092, 1095, 1100, 1103, 1150, 1151, 1152], "gauss": [510, 593, 596], "exponenti": [510, 526, 593, 596, 597, 600, 657, 660, 696, 699], "logarithm": [510, 526, 597, 600, 641, 644, 645, 648, 649, 652, 653, 656, 657, 660, 865, 874, 910], "72": [510, 597, 865, 901, 903, 1071, 1072, 1075, 1099], "accur": [510, 601, 604], "fdlibm": [510, 601, 604], "compliant": [510, 601, 604, 665, 668, 669, 672, 1071, 1076, 1079, 1080, 1083, 1084, 1087], "greatest": [510, 587, 605, 608, 609, 612], "out_i": [510, 621, 624, 625, 628, 629, 632], "threshold": [510, 677, 678], "exce": [510, 678], "y_i": [510, 684, 687], "expon": [510, 696, 699, 747, 812], "versu": [510, 696, 699], "odd": [510, 696, 699], "modulu": [510, 700, 703], "primarili": [510, 700, 703], "5654": [510, 704, 707], "034": [510, 704, 707], "433": [510, 704, 707], "343": [510, 704, 707], "44": [510, 704, 707, 720, 723, 724, 727, 865, 901, 903, 1050, 1054, 1071, 1072, 1075, 1099], "30": [510, 704, 707, 865, 901, 903, 1071, 1072, 1075, 1099, 1125, 1131], "81": [510, 704, 707, 724, 727, 1071, 1072, 1075, 1099], "527": [510, 704, 707], "301": [510, 704, 707], "indistinguish": [510, 720, 723], "infinit": [510, 720, 723], "83": [510, 720, 723], "32455532": [510, 720, 723], "89897949": [510, 720, 723], "50": [510, 720, 723, 865, 901, 903, 1050, 1053, 1071, 1072, 1075, 1099], "31": [510, 720, 723], "169": [510, 720, 723], "63": [510, 720, 723, 865, 866, 868, 901, 903, 1071, 1072, 1075, 1099], "47": [510, 720, 723], "73": [510, 720, 723, 865, 866, 868, 1033, 1034, 1037], "93": [510, 720, 723], "35": [510, 720, 723, 852, 864, 865, 869, 871, 1050, 1054, 1071, 1072, 1075, 1099], "09": [510, 724, 727, 852, 864], "61": [510, 724, 727, 935, 936, 939], "546": [510, 733], "842": [510, 733], "916": [510, 733, 935, 936, 939], "996": [510, 733], "328": [510, 733], "real": [510, 738], "462": [510, 738], "604": [510, 738], "984": [510, 738], "976": [510, 738], "997": [510, 738, 1033, 1034, 1037], "decim": [510, 743, 746], "inspect": [747, 753, 1117, 1118], "downscal": [747, 759, 760, 762], "60": [747, 765, 865, 901, 903, 1071, 1072, 1075, 1099], "default_v": [747, 768], "catch_except": [747, 768], "rev": [747, 768], "with_cal": [747, 768], "arrang": [747, 769], "123": [747, 772], "mod": [747, 773], "max_freq": [747, 774], "num_band": [747, 774], "pad": [747, 774, 852, 853, 854, 855, 856, 857, 858, 859, 951, 961, 964, 1007, 1010, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141], "fourier": [747, 774], "band": [747, 774], "linearli": [747, 774, 865, 911, 913], "oppos": [747, 774], "geometr": [747, 774], "seen_set": [747, 785], "local_set": [747, 785], "decrement": [747, 789], "is_arrai": 747, "allow_dupl": [747, 797], "forkserv": [747, 798], "spawn": [747, 798], "hot": [747, 800], "scatter": [747, 800, 803, 804], "overrid": [747, 800], "tmp_dr": [747, 808], "temporari": [747, 808], "min_denomin": [747, 811], "stabil": [747, 811, 812, 1060, 1061, 1064, 1066, 1069], "_min_denomin": [747, 811], "min_bas": [747, 812], "_min_bas": [747, 812, 1033, 1034, 1037, 1148, 1149], "100000023841858": [747, 815], "200000047683716": [747, 815], "299999952316284": [747, 815], "400000095367432": [747, 815], "599999904632568": [747, 815], "101": [747, 816], "unpack": [747, 819], "gradienttrack": [821, 822], "delta": [821, 823], "cost": [821, 823, 824, 826, 829, 831, 834, 836, 838, 840, 842, 844, 1011, 1012, 1013, 1014], "ws": [821, 823, 824, 826, 829, 831, 834, 836, 838, 840, 842, 844], "en": [821, 823, 824, 826], "wikipedia": [821, 823, 824, 826], "wiki": [821, 823, 824, 826], "stochastic_gradient_desc": [821, 823, 824, 826], "dc": [821, 823, 824, 826, 829, 831, 834, 836, 838, 840, 842, 844], "dw": [821, 823, 824, 826, 829, 831, 834, 836, 838, 840, 842, 844], "averag": [821, 823, 824, 826, 834, 836, 1011, 1012, 1013], "forget": [821, 823, 824, 826, 834, 836, 1150, 1151, 1152], "rate": [821, 824, 826, 829, 831, 834, 836, 838, 840, 842, 844, 1011, 1012, 1013, 1014, 1134, 1145, 1150, 1151, 1152, 1153, 1154, 1155], "ws_new": [821, 824, 826, 829, 831, 834, 836, 838, 840, 842, 844], "retain": [821, 828], "trust": [821, 834, 836, 1150, 1152], "decai": [821, 834, 836, 838, 840, 1150, 1152, 1153], "layerwis": [821, 838, 840, 1150, 1153], "stride": [852, 853, 854, 855, 856, 857, 858, 859, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141], "data_format": [852, 853, 854, 855, 856, 857, 858, 859, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141], "nwc": [852, 853, 854, 1134, 1135, 1136], "dilat": [852, 853, 854, 855, 856, 857, 858, 859, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141], "convolut": [852, 853, 854, 855, 856, 857, 858, 859, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141], "d_in": [852, 853, 854, 855, 856, 857, 858], "fw": [852, 853, 854, 855, 856, 857, 858, 859], "d_out": [852, 853, 854, 855, 856, 857, 858], "slide": [852, 853, 854, 855, 856, 857, 858, 859, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141], "ncw": [852, 853, 854, 1134, 1135, 1136], "wio": [852, 853], "output_shap": [852, 854, 856, 858, 1134, 1136, 1138, 1140], "nhwc": [852, 855, 856, 859, 1134, 1137, 1138, 1141], "fh": [852, 855, 856, 857, 858, 859], "nchw": [852, 855, 856, 859, 1134, 1137, 1138, 1141], "hwio": [852, 855], "unequ": [852, 855], "28": [852, 855, 858, 859, 865, 901, 903, 1071, 1072, 1075, 1099], "unsqueez": [852, 855, 859], "ndhwc": [852, 857, 858, 1134, 1139, 1140], "volum": [852, 857], "fd": [852, 857, 858], "ncdhw": [852, 857, 858, 1134, 1139, 1140], "dhwio": [852, 857], "256": [852, 858], "258": [852, 858], "128": [852, 858, 865, 901, 903], "depthwis": [852, 859, 1134, 1141], "333": [852, 859], "inp": [852, 859], "prob": [852, 860, 1038, 1039, 1134, 1142], "randomli": [852, 860, 1134, 1142], "bernoulli": [852, 860], "out_featur": [852, 860, 861], "incom": [852, 861], "outer_batch_shap": [852, 861], "inner_batch_shap": [852, 861], "in_featur": [852, 861], "cell": [852, 862, 1134, 1143], "num_queri": [852, 863, 864], "x_feat_dim": [852, 863], "num_kei": [852, 863, 864], "cont_feat_dim": [852, 863], "numhead": [852, 863], "feat_dim": [852, 863, 864], "out_feat_dim": [852, 863], "score": [852, 864], "04": [852, 864], "03": [852, 864, 1033, 1034, 1037], "08": [852, 864], "decomposit": [865, 866, 868, 907, 909, 914], "symmetr": [865, 866, 868, 878, 880, 881, 883, 932, 934], "u": [865, 866, 868, 914], "577": [865, 866, 868], "707": [865, 866, 868], "vif": [865, 869, 871], "92": [865, 872], "293": [865, 872], "46997": [865, 872], "eigendecomposit": [865, 878, 880], "qlq\u1d40": [865, 878, 880], "orthogon": [865, 878, 880], "eig": [865, 878, 880], "eigenvalu": [865, 878, 880, 881, 883], "eigenvector": [865, 878, 880], "75": [865, 884, 901, 903], "prepend": [865, 887, 890], "singular": [865, 886, 895, 897, 904, 906, 914, 916, 917, 919], "toler": [865, 886, 895, 897, 904, 906], "largest_singular_valu": [865, 886, 895, 897, 904, 906], "array_lik": [865, 901, 903], "33": [865, 901, 903, 1033, 1034, 1037, 1071, 1072, 1075, 1099], "36": [865, 901, 903, 1071, 1072, 1075, 1099], "45": [865, 901, 903, 951, 990, 1033, 1034, 1037, 1071, 1072, 1075, 1099], "65": [865, 901, 903, 1071, 1072, 1075, 1099], "84": [865, 901, 903, 1071, 1072, 1075, 1099], "105": [865, 901, 903, 935, 936, 939], "112": [865, 901, 903, 1071, 1072, 1075, 1099], "104": [865, 901, 903, 1071, 1072, 1075, 1099], "120": [865, 901, 903], "moor": [865, 886, 904, 906], "penros": [865, 886, 904, 906], "pseudo": [865, 886, 904, 906], "orthonorm": [865, 907, 909, 914], "2d": [865, 874, 910, 1134, 1137, 1138, 1141], "logdet": [865, 874, 910], "coeffici": [865, 911, 913], "usvh": [865, 914], "vh": [865, 914], "hermitian": [865, 914], "et": [865, 914], "cetera": [865, 914], "adjoint": [865, 914], "reconstruct": [865, 914, 1055, 1056, 1058], "reconstructed_x": [865, 914], "contract": [865, 920, 922, 1071, 1072, 1075, 1099], "doubl": [865, 920, 922], "singleton": [865, 929, 931, 951, 991, 994, 1050, 1052, 1071, 1076, 1079, 1080, 1083, 1084, 1087, 1088, 1091, 1092, 1095, 1096, 1100, 1103, 1104, 1105, 1108, 1109, 1112], "liter": [865, 929, 931], "manhattan": [865, 929, 931], "l2": [865, 929, 931], "euclidean": [865, 929, 931], "mathbf": [865, 932, 934], "mathbb": [865, 932, 934], "skew": [865, 932, 934], "entropi": [935, 936, 939, 941, 944, 946, 949], "predict": [935, 936, 939, 941, 944, 946, 949], "smooth": [935, 936, 939, 941, 944, 946, 949], "223": [935, 936, 939], "357": [935, 936, 939, 946, 949], "511": [935, 936, 939], "discret": [935, 941, 944], "3862944": [935, 941, 944], "35667497": [935, 941, 944], "spars": [935, 946, 949], "logit": [935, 946, 949], "793291": [935, 946, 949], "512926": [935, 946, 949], "before_1": [951, 961, 964, 1007, 1010], "after_1": [951, 961, 964, 1007, 1010], "before_n": [951, 961, 964, 1007, 1010], "after_n": [951, 961, 964, 1007, 1010], "insert": [951, 965, 968, 1015, 1020, 1050, 1051], "manipulation_funct": [951, 965, 968], "reorder": [951, 969, 972], "permut": [951, 973, 976, 999, 1002], "repetit": [951, 977, 980, 1003, 1006], "restor": [951, 985, 988], "classivi": [951, 990], "famili": [951, 995, 998], "intxx": [951, 995, 998], "floatxx": [951, 995, 998], "fomaml_step": 1011, "inner_cost_fn": [1011, 1012, 1013], "outer_cost_fn": [1011, 1012, 1013], "inner_grad_step": [1011, 1012, 1013, 1014], "inner_learning_r": [1011, 1012, 1013, 1014], "inner_optimization_step": [1011, 1012, 1013, 1014], "inner_batch_fn": [1011, 1012, 1013], "outer_batch_fn": [1011, 1012, 1013], "average_across_step": [1011, 1012, 1013], "inner_v": [1011, 1012, 1013], "keep_inner_v": [1011, 1012, 1013], "outer_v": [1011, 1012, 1013], "keep_outer_v": [1011, 1012, 1013], "return_inner_v": [1011, 1012, 1013, 1014], "num_task": [1011, 1012, 1013, 1014], "maml": [1011, 1012, 1013], "recev": [1011, 1012, 1013], "0x7fd33cd5d700": [1011, 1012, 1013, 1014], "maml_step": 1011, "rece": [1011, 1013], "reptile_step": 1011, "cost_fn": [1011, 1014], "reptil": [1011, 1014], "receivng": [1011, 1014], "all_nested_indic": 1015, "include_nest": [1015, 1016], "_index": [1015, 1016, 1026], "_base": [1015, 1016, 1025, 1026], "copy_nest": 1015, "to_mut": [1015, 1017, 1027], "mutabl": [1015, 1017, 1027], "insert_into_nest_at_index": 1015, "insert_into_nest_at_indic": 1015, "map_nest_at_index": 1015, "map_nest_at_indic": 1015, "multi_index_nest": 1015, "nested_ani": 1015, "check_nest": [1015, 1025, 1026], "conditon": [1015, 1025, 1026], "nested_indices_wher": 1015, "stop_after_n_found": [1015, 1026], "_depth": [1015, 1027], "_tuple_check_fn": [1015, 1027], "_list_check_fn": [1015, 1027], "_dict_check_fn": [1015, 1027], "nested_multi_map": 1015, "nest0": [1015, 1028], "ivy_arrai": [1015, 1028], "funciton": [1015, 1028], "prune_nest_at_index": 1015, "prune_nest_at_indic": 1015, "set_nest_at_index": 1015, "set_nest_at_indic": 1015, "mini": [1033, 1034, 1037, 1148, 1149], "gamma": [1033, 1034, 1037], "beta": [1033, 1034, 1037], "0976": [1033, 1034, 1037], "3452": [1033, 1034, 1037], "2740": [1033, 1034, 1037], "1047": [1033, 1034, 1037], "5886": [1033, 1034, 1037], "2732": [1033, 1034, 1037], "7696": [1033, 1034, 1037], "7024": [1033, 1034, 1037], "2518": [1033, 1034, 1037], "58": [1033, 1034, 1037, 1055, 1056], "283": [1033, 1034, 1037], "585": [1033, 1034, 1037], "909": [1033, 1034, 1037], "628": [1033, 1034, 1037], "225": [1033, 1034, 1037], "425": [1033, 1034, 1037], "norm_idx": [1033, 1034, 1037], "228": [1033, 1034, 1037], "0285": [1033, 1034, 1037], "199": [1033, 1034, 1037], "204": [1033, 1034, 1037], "population_s": [1038, 1039], "num_sampl": [1038, 1039], "draw": [1038, 1039, 1043, 1044, 1046], "unnorm": [1038, 1039], "drawn": [1038, 1039, 1040, 1041, 1043, 1044, 1046], "home": [1038, 1039, 1043, 1044, 1046], "uniformli": [1038, 1040, 1041, 1044, 1046], "highest": [1038, 1040, 1041], "parameter": [1038, 1043, 1044, 1046], "6444774682897879": [1038, 1043], "811": [1038, 1043], "508": [1038, 1043], "564": [1038, 1043], "7268672": [1038, 1043], "968": [1038, 1043], "175": [1038, 1043, 1055, 1056], "064": [1038, 1043], "40935726": [1038, 1043], "556": [1038, 1043], "26431865": [1038, 1044, 1046], "475": [1038, 1044, 1046], "878": [1038, 1044, 1046], "861": [1038, 1044, 1046], "89150229": [1038, 1044, 1046], "89629126": [1038, 1044, 1046], "94198485": [1038, 1044, 1046], "91405606": [1038, 1044, 1046], "72848724": [1038, 1044, 1046], "7550739": [1038, 1044, 1046], "624": [1038, 1044, 1046], "00109": [1038, 1044, 1046], "occurr": [1050, 1051, 1052, 1055, 1056], "yield": [1050, 1054], "43": [1050, 1054], "x_j": [1055, 1056, 1057, 1059], "impli": [1055, 1056, 1057, 1059], "inverse_indic": [1055, 1056, 1058], "aggreg": [1055, 1056], "fourth": [1055, 1056], "607": [1055, 1056], "735": [1055, 1056], "667": [1055, 1056], "381": [1055, 1056], "857": [1055, 1056], "0396": [1055, 1056], "166": [1055, 1056], "828": [1055, 1056], "144": [1055, 1056], "40501155": [1055, 1056], "77361575": [1055, 1056], "97776199": [1055, 1056], "36831157": [1055, 1056], "89148434": [1055, 1056], "9512272": [1055, 1056], "67542176": [1055, 1056], "41985657": [1055, 1056], "23478023": [1055, 1056], "1141": [1055, 1056], "8101": [1055, 1056], "9298": [1055, 1056], "8460": [1055, 1056], "2119": [1055, 1056], "3519": [1055, 1056], "6252": [1055, 1056], "4033": [1055, 1056], "7443": [1055, 1056], "2577": [1055, 1056], "3707": [1055, 1056], "0545": [1055, 1056], "3238": [1055, 1056], "5944": [1055, 1056], "0775": [1055, 1056], "4327": [1055, 1056], "176": [1055, 1056], "889": [1055, 1056], "763": [1055, 1056], "071": [1055, 1056], "262": [1055, 1056], "456": [1055, 1056], "114": [1055, 1056], "349": [1055, 1056], "615": [1055, 1056], "594": [1055, 1056], "335": [1055, 1056], "212": [1055, 1056], "457": [1055, 1056], "827": [1055, 1056], "209": [1055, 1056], "ascend": [1060, 1061, 1064], "einstein": [1071, 1072, 1075, 1099], "summat": [1071, 1072, 1075, 1099], "seq": [1071, 1072, 1075, 1099], "jk": [1071, 1072, 1075, 1099], "ik": [1071, 1072, 1075, 1099], "126": [1071, 1072, 1075, 1099], "510": [1071, 1072, 1075, 1099], "99": [1071, 1072, 1075, 1099], "108": [1071, 1072, 1075, 1099], "117": [1071, 1072, 1075, 1099], "sentinel": [1071, 1076, 1079, 1084, 1087], "unsign": [1071, 1088, 1091, 1096], "degre": [1071, 1092, 1095, 1100, 1103], "bessel": [1071, 1092, 1095, 1100, 1103], "8164966": [1071, 1092, 1095], "varianc": [1071, 1100, 1103], "unbias": [1071, 1100, 1103], "simplicit": [1104, 1105, 1108], "autom": 1113, "grow": 1113, "ai": 1113, "got": 1113, "colab": 1113, "sharp": 1113, "weekli": 1113, "event": 1113, "immedi": 1113, "favorit": 1113, "jax_concat": 1113, "tf_concat": 1113, "np_concat": 1113, "mx_concat": 1113, "torch_concat": 1113, "prompt": 1113, "get_devic": 1113, "reduce_prod": 1113, "gradient_imag": 1113, "linalg": 1113, "bilinear_resampl": 1113, "stack_imag": 1113, "neural_net": 1113, "ecosystem": [1113, 1119], "popular": [1113, 1119], "acceler": 1113, "articl": 1113, "lenton2021ivi": 1113, "inter": 1113, "lenton": 1113, "daniel": 1113, "pardo": 1113, "fabio": 1113, "falck": 1113, "fabian": 1113, "jame": 1113, "stephen": 1113, "clark": 1113, "ronald": 1113, "journal": 1113, "arxiv": 1113, "preprint": 1113, "2102": 1113, "02886": 1113, "2021": 1113, "add_array_spec": 1116, "fn_array_spec": 1116, "geglu": 1120, "native_modul": [1123, 1124], "native_module_class": [1123, 1124], "firstlayersiren": 1125, "kaimingnorm": [1125, 1129], "negative_slop": 1125, "Ones": 1125, "siren": 1125, "w0": [1125, 1131], "filter_s": [1134, 1135, 1136], "1d": [1134, 1135, 1136], "conv1dtranspos": 1134, "filter_shap": [1134, 1137, 1138, 1139, 1140, 1141], "conv2dtranspos": 1134, "conv3dtranspos": 1134, "depthwiseconv2d": 1134, "num_channel": [1134, 1141], "bernoul": [1134, 1142], "num_lay": [1134, 1143], "return_sequ": [1134, 1143], "return_st": [1134, 1143], "get_initial_st": [1134, 1143], "dens": [1134, 1144], "multiheadattent": 1134, "query_dim": [1134, 1145], "head_dim": [1134, 1145], "dropout_r": [1134, 1145], "context_dim": [1134, 1145], "with_to_q_fn": [1134, 1145], "with_to_kv_fn": [1134, 1145], "with_to_out_fn": [1134, 1145], "build_mod": [1134, 1145, 1146, 1147], "on_init": [1134, 1145, 1146, 1147], "__call__": [1134, 1145, 1146, 1147], "store_var": [1146, 1147], "arg_stateful_idx": [1146, 1147], "kwarg_stateful_idx": [1146, 1147], "fallback_to_non_compil": [1146, 1147, 1150, 1154], "with_partial_v": [1146, 1147], "initialz": [1146, 1147], "from_cal": [1146, 1147], "check_submod_ret": [1146, 1147], "get_mod_kei": [1146, 1147], "top_mod": [1146, 1147], "mod_depth": [1146, 1147], "mod_height": [1146, 1147], "mod_with_top_mod_key_chain": [1146, 1147], "save_weight": [1146, 1147], "weights_path": [1146, 1147], "show_mod_in_top_mod": [1146, 1147], "upper_depth": [1146, 1147], "lower_depth": [1146, 1147], "show_structur": [1146, 1147], "show_v_in_top_v": [1146, 1147], "sub_mod": [1146, 1147], "show_v": [1146, 1147], "track_submod_call_ord": [1146, 1147], "track_submod_ret": [1146, 1147], "v_with_top_v_key_chain": [1146, 1147], "layernorm": 1148, "normalized_shap": [1148, 1149], "elementwise_affin": [1148, 1149], "trail": [1148, 1149], "affin": [1148, 1149], "0001": [1150, 1151, 1152], "init_on_first_step": [1150, 1154], "ignore_miss": [1150, 1154], "overriden": [1150, 1154], "sgd": 1150, "stochast": [1150, 1155], "sub_modul": [1156, 1157]}, "objects": {"ivy.array": [[0, 0, 0, "-", "activations"], [115, 0, 0, "-", "conversions"], [120, 0, 0, "-", "creation"], [122, 0, 0, "-", "data_type"], [124, 0, 0, "-", "device"], [126, 0, 0, "-", "elementwise"], [128, 0, 0, "-", "general"], [130, 0, 0, "-", "gradients"], [132, 0, 0, "-", "image"], [134, 0, 0, "-", "layers"], [136, 0, 0, "-", "linear_algebra"], [138, 0, 0, "-", "losses"], [140, 0, 0, "-", "manipulation"], [142, 0, 0, "-", "norms"], [144, 0, 0, "-", "random"], [146, 0, 0, "-", "searching"], [148, 0, 0, "-", "set"], [150, 0, 0, "-", "sorting"], [152, 0, 0, "-", "statistical"], [154, 0, 0, "-", "utility"], [156, 0, 0, "-", "wrapping"]], "ivy.array.activations": [[1, 1, 1, "", "ArrayWithActivations"]], "ivy.array.conversions": [[116, 2, 1, "", "args_to_ivy"], [117, 2, 1, "", "args_to_native"], [118, 2, 1, "", "to_ivy"], [119, 2, 1, "", "to_native"]], "ivy.array.creation": [[121, 1, 1, "", "ArrayWithCreation"]], "ivy.array.data_type": [[123, 1, 1, "", "ArrayWithDataTypes"]], "ivy.array.data_type.ArrayWithDataTypes": [[123, 3, 1, "", "can_cast"]], "ivy.array.device": [[125, 1, 1, "", "ArrayWithDevice"]], "ivy.array.elementwise": [[127, 1, 1, "", "ArrayWithElementwise"]], "ivy.array.elementwise.ArrayWithElementwise": [[127, 3, 1, "", "abs"], [127, 3, 1, "", "acos"], [127, 3, 1, "", "acosh"], [127, 3, 1, "", "add"], [127, 3, 1, "", "asin"], [127, 3, 1, "", "asinh"], [127, 3, 1, "", "atan"], [127, 3, 1, "", "atan2"], [127, 3, 1, "", "atanh"], [127, 3, 1, "", "bitwise_and"], [127, 3, 1, "", "bitwise_invert"], [127, 3, 1, "", "bitwise_left_shift"], [127, 3, 1, "", "bitwise_or"], [127, 3, 1, "", "bitwise_right_shift"], [127, 3, 1, "", "bitwise_xor"], [127, 3, 1, "", "ceil"], [127, 3, 1, "", "cos"], [127, 3, 1, "", "cosh"], [127, 3, 1, "", "divide"], [127, 3, 1, "", "equal"], [127, 3, 1, "", "erf"], [127, 3, 1, "", "exp"], [127, 3, 1, "", "expm1"], [127, 3, 1, "", "floor"], [127, 3, 1, "", "floor_divide"], [127, 3, 1, "", "greater"], [127, 3, 1, "", "greater_equal"], [127, 3, 1, "", "isfinite"], [127, 3, 1, "", "isinf"], [127, 3, 1, "", "isnan"], [127, 3, 1, "", "less"], [127, 3, 1, "", "less_equal"], [127, 3, 1, "", "log"], [127, 3, 1, "", "log10"], [127, 3, 1, "", "log1p"], [127, 3, 1, "", "log2"], [127, 3, 1, "", "logaddexp"], [127, 3, 1, "", "logical_and"], [127, 3, 1, "", "logical_not"], [127, 3, 1, "", "logical_or"], [127, 3, 1, "", "logical_xor"], [127, 3, 1, "", "multiply"], [127, 3, 1, "", "negative"], [127, 3, 1, "", "not_equal"], [127, 3, 1, "", "positive"], [127, 3, 1, "", "pow"], [127, 3, 1, "", "remainder"], [127, 3, 1, "", "round"], [127, 3, 1, "", "sign"], [127, 3, 1, "", "sin"], [127, 3, 1, "", "sinh"], [127, 3, 1, "", "sqrt"], [127, 3, 1, "", "square"], [127, 3, 1, "", "subtract"], [127, 3, 1, "", "tan"], [127, 3, 1, "", "tanh"], [127, 3, 1, "", "trunc"]], "ivy.array.general": [[129, 1, 1, "", "ArrayWithGeneral"]], "ivy.array.general.ArrayWithGeneral": [[129, 3, 1, "", "all_equal"], [129, 3, 1, "", "gather_nd"]], "ivy.array.gradients": [[131, 1, 1, "", "ArrayWithGradients"]], "ivy.array.image": [[133, 1, 1, "", "ArrayWithImage"]], "ivy.array.layers": [[135, 1, 1, "", "ArrayWithLayers"]], "ivy.array.linear_algebra": [[137, 1, 1, "", "ArrayWithLinearAlgebra"]], "ivy.array.linear_algebra.ArrayWithLinearAlgebra": [[137, 3, 1, "", "cholesky"], [137, 3, 1, "", "cross"], [137, 3, 1, "", "det"], [137, 3, 1, "", "diagonal"], [137, 3, 1, "", "eigh"], [137, 3, 1, "", "eigvalsh"], [137, 3, 1, "", "inv"], [137, 3, 1, "", "matmul"], [137, 3, 1, "", "matrix_norm"], [137, 3, 1, "", "matrix_rank"], [137, 3, 1, "", "matrix_transpose"], [137, 3, 1, "", "outer"], [137, 3, 1, "", "pinv"], [137, 3, 1, "", "qr"], [137, 3, 1, "", "solve"], [137, 3, 1, "", "svd"], [137, 3, 1, "", "svdvals"], [137, 3, 1, "", "tensordot"], [137, 3, 1, "", "trace"], [137, 3, 1, "", "vecdot"], [137, 3, 1, "", "vector_norm"], [137, 3, 1, "", "vector_to_skew_symmetric_matrix"]], "ivy.array.losses": [[139, 1, 1, "", "ArrayWithLosses"]], "ivy.array.losses.ArrayWithLosses": [[139, 3, 1, "", "binary_cross_entropy"], [139, 3, 1, "", "cross_entropy"], [139, 3, 1, "", "sparse_cross_entropy"]], "ivy.array.manipulation": [[141, 1, 1, "", "ArrayWithManipulation"]], "ivy.array.manipulation.ArrayWithManipulation": [[141, 3, 1, "", "clip"], [141, 3, 1, "", "concat"], [141, 3, 1, "", "constant_pad"], [141, 3, 1, "", "expand_dims"], [141, 3, 1, "", "flip"], [141, 3, 1, "", "permute_dims"], [141, 3, 1, "", "repeat"], [141, 3, 1, "", "reshape"], [141, 3, 1, "", "roll"], [141, 3, 1, "", "squeeze"], [141, 3, 1, "", "stack"], [141, 3, 1, "", "swapaxes"], [141, 3, 1, "", "tile"], [141, 3, 1, "", "zero_pad"]], "ivy.array.norms": [[143, 1, 1, "", "ArrayWithNorms"]], "ivy.array.norms.ArrayWithNorms": [[143, 3, 1, "", "layer_norm"]], "ivy.array.random": [[145, 1, 1, "", "ArrayWithRandom"]], "ivy.array.searching": [[147, 1, 1, "", "ArrayWithSearching"]], "ivy.array.set": [[149, 1, 1, "", "ArrayWithSet"]], "ivy.array.sorting": [[151, 1, 1, "", "ArrayWithSorting"]], "ivy.array.sorting.ArrayWithSorting": [[151, 3, 1, "", "argsort"], [151, 3, 1, "", "sort"]], "ivy.array.statistical": [[153, 1, 1, "", "ArrayWithStatistical"]], "ivy.array.statistical.ArrayWithStatistical": [[153, 3, 1, "", "einsum"], [153, 3, 1, "", "max"], [153, 3, 1, "", "mean"], [153, 3, 1, "", "min"], [153, 3, 1, "", "prod"], [153, 3, 1, "", "std"], [153, 3, 1, "", "sum"], [153, 3, 1, "", "var"]], "ivy.array.utility": [[155, 1, 1, "", "ArrayWithUtility"]], "ivy.array.utility.ArrayWithUtility": [[155, 3, 1, "", "all"], [155, 3, 1, "", "any"]], "ivy.array.wrapping": [[157, 2, 1, "", "add_ivy_array_instance_methods"]], "ivy": [[158, 0, 0, "-", "backend_handler"], [383, 0, 0, "-", "func_wrapper"], [1116, 0, 0, "-", "inspection"], [1159, 0, 0, "-", "verbosity"]], "ivy.backend_handler": [[158, 1, 1, "", "ContextManager"], [160, 2, 1, "", "choose_random_backend"], [161, 2, 1, "", "clear_backend_stack"], [162, 2, 1, "", "current_backend"], [163, 2, 1, "", "get_backend"], [164, 2, 1, "", "set_backend"], [165, 2, 1, "", "try_import_ivy_jax"], [166, 2, 1, "", "try_import_ivy_mxnet"], [167, 2, 1, "", "try_import_ivy_numpy"], [168, 2, 1, "", "try_import_ivy_tf"], [169, 2, 1, "", "try_import_ivy_torch"], [170, 2, 1, "", "unset_backend"]], "ivy.backend_handler.ContextManager": [[158, 3, 1, "", "__init__"]], "ivy.container": [[175, 0, 0, "-", "activations"], [177, 0, 0, "-", "base"], [179, 0, 0, "-", "container"], [182, 0, 0, "-", "container_methods"], [306, 0, 0, "-", "creation"], [308, 0, 0, "-", "data_type"], [310, 0, 0, "-", "device"], [312, 0, 0, "-", "elementwise"], [314, 0, 0, "-", "general"], [316, 0, 0, "-", "gradients"], [318, 0, 0, "-", "image"], [320, 0, 0, "-", "layers"], [322, 0, 0, "-", "linear_algebra"], [324, 0, 0, "-", "losses"], [326, 0, 0, "-", "manipulation"], [328, 0, 0, "-", "norms"], [330, 0, 0, "-", "random"], [332, 0, 0, "-", "searching"], [334, 0, 0, "-", "set"], [336, 0, 0, "-", "sorting"], [338, 0, 0, "-", "statistical"], [340, 0, 0, "-", "utility"], [342, 0, 0, "-", "wrapping"]], "ivy.container.activations": [[176, 1, 1, "", "ContainerWithActivations"]], "ivy.container.base": [[178, 1, 1, "", "ContainerBase"]], "ivy.container.base.ContainerBase": [[178, 3, 1, "", "__getitem__"], [178, 3, 1, "", "__init__"], [178, 3, 1, "", "__setitem__"], [178, 3, 1, "", "all_false"], [178, 3, 1, "", "all_key_chains"], [178, 3, 1, "", "all_true"], [178, 3, 1, "", "arrays_as_lists"], [178, 3, 1, "", "as_arrays"], [178, 3, 1, "", "as_bools"], [178, 3, 1, "", "as_ones"], [178, 3, 1, "", "as_random_uniform"], [178, 3, 1, "", "as_variables"], [178, 3, 1, "", "as_zeros"], [178, 3, 1, "", "assert_contains_sub_container"], [178, 3, 1, "", "assert_contains_sub_structure"], [178, 3, 1, "", "assert_identical"], [178, 3, 1, "", "assert_identical_structure"], [178, 3, 1, "", "at_key_chain"], [178, 3, 1, "", "at_key_chains"], [178, 3, 1, "", "at_keys"], [178, 3, 1, "", "clip"], [178, 3, 1, "", "combine"], [178, 3, 1, "", "common_key_chains"], [178, 4, 1, "", "config"], [178, 3, 1, "", "contains_sub_container"], [178, 3, 1, "", "contains_sub_structure"], [178, 3, 1, "", "copy"], [178, 3, 1, "", "create_if_absent"], [178, 3, 1, "", "cutoff_at_depth"], [178, 3, 1, "", "cutoff_at_height"], [178, 3, 1, "", "deep_copy"], [178, 4, 1, "", "dev"], [178, 3, 1, "", "dev_clone"], [178, 3, 1, "", "dev_dist"], [178, 4, 1, "", "dev_str"], [178, 3, 1, "", "diff"], [178, 3, 1, "", "dtype"], [178, 3, 1, "", "einops_rearrange"], [178, 3, 1, "", "einops_reduce"], [178, 3, 1, "", "einops_repeat"], [178, 3, 1, "", "find_sub_container"], [178, 3, 1, "", "find_sub_structure"], [178, 3, 1, "", "flatten_key_chain"], [178, 3, 1, "", "flatten_key_chains"], [178, 3, 1, "", "format_key_chains"], [178, 3, 1, "", "from_disk_as_hdf5"], [178, 3, 1, "", "from_disk_as_json"], [178, 3, 1, "", "from_disk_as_pickled"], [178, 3, 1, "", "from_flat_list"], [178, 3, 1, "", "from_numpy"], [178, 3, 1, "", "gather"], [178, 3, 1, "", "gather_nd"], [178, 3, 1, "", "h5_file_size"], [178, 3, 1, "", "handle_inplace"], [178, 3, 1, "", "has_key"], [178, 3, 1, "", "has_key_chain"], [178, 3, 1, "", "has_nans"], [178, 3, 1, "", "identical"], [178, 3, 1, "", "identical_array_shapes"], [178, 3, 1, "", "identical_configs"], [178, 3, 1, "", "identical_structure"], [178, 3, 1, "", "if_exists"], [178, 3, 1, "", "inplace_update"], [178, 4, 1, "", "ivy"], [178, 3, 1, "", "key_chains_containing"], [178, 3, 1, "", "list_join"], [178, 3, 1, "", "list_stack"], [178, 3, 1, "", "map"], [178, 3, 1, "", "map_conts"], [178, 3, 1, "", "matrix_norm"], [178, 4, 1, "", "max_depth"], [178, 3, 1, "", "maximum"], [178, 3, 1, "", "minimum"], [178, 3, 1, "", "multi_map"], [178, 3, 1, "", "multi_map_in_static_method"], [178, 3, 1, "", "num_arrays"], [178, 3, 1, "", "overwrite_at_key_chain"], [178, 3, 1, "", "overwrite_at_key_chains"], [178, 3, 1, "", "prune_empty"], [178, 3, 1, "", "prune_key_chain"], [178, 3, 1, "", "prune_key_chains"], [178, 3, 1, "", "prune_key_from_key_chains"], [178, 3, 1, "", "prune_keys"], [178, 3, 1, "", "prune_keys_from_key_chains"], [178, 3, 1, "", "reduce"], [178, 3, 1, "", "remove_key_length_limit"], [178, 3, 1, "", "remove_print_limit"], [178, 3, 1, "", "reshape_like"], [178, 3, 1, "", "restructure"], [178, 3, 1, "", "restructure_key_chains"], [178, 3, 1, "", "set_at_key_chain"], [178, 3, 1, "", "set_at_key_chains"], [178, 3, 1, "", "set_at_keys"], [178, 3, 1, "", "set_framework"], [178, 3, 1, "", "set_ivy_backend"], [178, 4, 1, "", "shape"], [178, 4, 1, "", "shapes"], [178, 3, 1, "", "show"], [178, 3, 1, "", "show_sub_container"], [178, 3, 1, "", "shuffle"], [178, 3, 1, "", "shuffle_h5_file"], [178, 3, 1, "", "size_ordered_arrays"], [178, 3, 1, "", "slice_keys"], [178, 3, 1, "", "slice_via_key"], [178, 3, 1, "", "sort_by_key"], [178, 3, 1, "", "split"], [178, 3, 1, "", "stop_gradients"], [178, 3, 1, "", "structural_diff"], [178, 3, 1, "", "to_device"], [178, 3, 1, "", "to_dict"], [178, 3, 1, "", "to_disk_as_hdf5"], [178, 3, 1, "", "to_disk_as_json"], [178, 3, 1, "", "to_disk_as_pickled"], [178, 3, 1, "", "to_flat_list"], [178, 3, 1, "", "to_iterator"], [178, 3, 1, "", "to_iterator_keys"], [178, 3, 1, "", "to_iterator_values"], [178, 3, 1, "", "to_ivy"], [178, 3, 1, "", "to_jsonable"], [178, 3, 1, "", "to_list"], [178, 3, 1, "", "to_multi_dev"], [178, 3, 1, "", "to_native"], [178, 3, 1, "", "to_numpy"], [178, 3, 1, "", "to_raw"], [178, 3, 1, "", "trim_key"], [178, 3, 1, "", "try_kc"], [178, 3, 1, "", "unify"], [178, 3, 1, "", "unstack"], [178, 3, 1, "", "update_config"], [178, 3, 1, "", "vector_norm"], [178, 3, 1, "", "with_default_key_color"], [178, 3, 1, "", "with_entries_as_lists"], [178, 3, 1, "", "with_ivy_backend"], [178, 3, 1, "", "with_key_length_limit"], [178, 3, 1, "", "with_print_indent"], [178, 3, 1, "", "with_print_limit"], [178, 3, 1, "", "with_print_line_spacing"]], "ivy.container.container": [[180, 1, 1, "", "Container"], [181, 1, 1, "", "MultiDevContainer"]], "ivy.container.container.Container": [[180, 3, 1, "", "__add__"], [180, 3, 1, "", "__init__"], [180, 3, 1, "", "__radd__"], [180, 3, 1, "", "adam_step"], [180, 3, 1, "", "arange"], [180, 3, 1, "", "arg_info"], [180, 3, 1, "", "arg_names"], [180, 3, 1, "", "argmax"], [180, 3, 1, "", "argmin"], [180, 3, 1, "", "array"], [180, 3, 1, "", "array_equal"], [180, 3, 1, "", "arrays_equal"], [180, 3, 1, "", "as_ivy_dev"], [180, 3, 1, "", "as_ivy_dtype"], [180, 3, 1, "", "as_native_dev"], [180, 3, 1, "", "as_native_dtype"], [180, 3, 1, "", "asarray"], [180, 3, 1, "", "assert_supports_inplace"], [180, 3, 1, "", "astype"], [180, 3, 1, "", "broadcast_arrays"], [180, 3, 1, "", "broadcast_to"], [180, 3, 1, "", "cache_fn"], [180, 3, 1, "", "cholesky"], [180, 3, 1, "", "clear_mem_on_dev"], [180, 3, 1, "", "clip_matrix_norm"], [180, 3, 1, "", "closest_valid_dtype"], [180, 3, 1, "", "container_types"], [180, 3, 1, "", "conv1d"], [180, 3, 1, "", "conv1d_transpose"], [180, 3, 1, "", "conv2d"], [180, 3, 1, "", "conv2d_transpose"], [180, 3, 1, "", "conv3d"], [180, 3, 1, "", "conv3d_transpose"], [180, 3, 1, "", "copy_array"], [180, 3, 1, "", "cross"], [180, 3, 1, "", "cumprod"], [180, 3, 1, "", "cumsum"], [180, 3, 1, "", "current_backend"], [180, 3, 1, "", "current_backend_str"], [180, 3, 1, "", "default"], [180, 3, 1, "", "default_device"], [180, 3, 1, "", "default_dtype"], [180, 3, 1, "", "default_float_dtype"], [180, 3, 1, "", "default_int_dtype"], [180, 3, 1, "", "depthwise_conv2d"], [180, 3, 1, "", "det"], [180, 3, 1, "", "dev_clone_array"], [180, 3, 1, "", "dev_clone_iter"], [180, 3, 1, "", "dev_clone_nest"], [180, 3, 1, "", "dev_dist_array"], [180, 3, 1, "", "dev_dist_iter"], [180, 3, 1, "", "dev_dist_nest"], [180, 3, 1, "", "dev_unify"], [180, 3, 1, "", "dev_unify_array"], [180, 3, 1, "", "dev_unify_iter"], [180, 3, 1, "", "dev_unify_nest"], [180, 3, 1, "", "dev_util"], [180, 3, 1, "", "diagonal"], [180, 3, 1, "", "dropout"], [180, 3, 1, "", "dtype_bits"], [180, 3, 1, "", "eigh"], [180, 3, 1, "", "eigvalsh"], [180, 3, 1, "", "empty"], [180, 3, 1, "", "empty_like"], [180, 3, 1, "", "execute_with_gradients"], [180, 3, 1, "", "exists"], [180, 3, 1, "", "eye"], [180, 3, 1, "", "finfo"], [180, 3, 1, "", "floormod"], [180, 3, 1, "", "fourier_encode"], [180, 3, 1, "", "from_dlpack"], [180, 3, 1, "", "full"], [180, 3, 1, "", "full_like"], [180, 3, 1, "", "function_supported_dtypes"], [180, 3, 1, "", "function_unsupported_dtypes"], [180, 3, 1, "", "gelu"], [180, 3, 1, "", "get_all_arrays_in_memory"], [180, 3, 1, "", "get_all_ivy_arrays_on_dev"], [180, 3, 1, "", "get_min_base"], [180, 3, 1, "", "get_min_denominator"], [180, 3, 1, "", "get_num_dims"], [180, 3, 1, "", "get_referrers_recursive"], [180, 3, 1, "", "gpu_is_available"], [180, 3, 1, "", "handle_nestable"], [180, 3, 1, "", "handle_out_argument"], [180, 3, 1, "", "iinfo"], [180, 3, 1, "", "indices_where"], [180, 3, 1, "", "infer_device"], [180, 3, 1, "", "infer_dtype"], [180, 3, 1, "", "inplace_arrays_supported"], [180, 3, 1, "", "inplace_decrement"], [180, 3, 1, "", "inplace_increment"], [180, 3, 1, "", "inplace_variables_supported"], [180, 3, 1, "", "inputs_to_native_arrays"], [180, 3, 1, "", "inv"], [180, 3, 1, "", "invalid_dtype"], [180, 3, 1, "", "is_float_dtype"], [180, 3, 1, "", "is_int_dtype"], [180, 3, 1, "", "is_ivy_container"], [180, 3, 1, "", "leaky_relu"], [180, 3, 1, "", "linear"], [180, 3, 1, "", "linspace"], [180, 3, 1, "", "logspace"], [180, 3, 1, "", "lstm_update"], [180, 3, 1, "", "match_kwargs"], [180, 3, 1, "", "matrix_power"], [180, 3, 1, "", "matrix_rank"], [180, 3, 1, "", "matrix_transpose"], [180, 3, 1, "", "meshgrid"], [180, 3, 1, "", "multi_head_attention"], [180, 3, 1, "", "multinomial"], [180, 3, 1, "", "multiprocessing"], [180, 3, 1, "", "native_array"], [180, 3, 1, "", "nonzero"], [180, 3, 1, "", "num_arrays_in_memory"], [180, 3, 1, "", "num_cpu_cores"], [180, 3, 1, "", "num_gpus"], [180, 3, 1, "", "num_ivy_arrays_on_dev"], [180, 3, 1, "", "one_hot"], [180, 3, 1, "", "ones"], [180, 3, 1, "", "ones_like"], [180, 3, 1, "", "outer"], [180, 3, 1, "", "outputs_to_ivy_arrays"], [180, 3, 1, "", "percent_used_mem_on_dev"], [180, 3, 1, "", "pinv"], [180, 3, 1, "", "print_all_arrays_in_memory"], [180, 3, 1, "", "print_all_ivy_arrays_on_dev"], [180, 3, 1, "", "promote_types"], [180, 3, 1, "", "qr"], [180, 3, 1, "", "queue_timeout"], [180, 3, 1, "", "randint"], [180, 3, 1, "", "random_normal"], [180, 3, 1, "", "relu"], [180, 3, 1, "", "result_type"], [180, 3, 1, "", "scaled_dot_product_attention"], [180, 3, 1, "", "scatter_flat"], [180, 3, 1, "", "scatter_nd"], [180, 3, 1, "", "seed"], [180, 3, 1, "", "set_default_device"], [180, 3, 1, "", "set_default_dtype"], [180, 3, 1, "", "set_default_float_dtype"], [180, 3, 1, "", "set_default_int_dtype"], [180, 3, 1, "", "set_min_base"], [180, 3, 1, "", "set_min_denominator"], [180, 3, 1, "", "set_queue_timeout"], [180, 3, 1, "", "set_split_factor"], [180, 3, 1, "", "set_tmp_dir"], [180, 3, 1, "", "set_with_grads"], [180, 3, 1, "", "shape_to_tuple"], [180, 3, 1, "", "sigmoid"], [180, 3, 1, "", "slogdet"], [180, 3, 1, "", "softmax"], [180, 3, 1, "", "softplus"], [180, 3, 1, "", "solve"], [180, 3, 1, "", "split_factor"], [180, 3, 1, "", "split_func_call"], [180, 3, 1, "", "stable_divide"], [180, 3, 1, "", "stable_pow"], [180, 3, 1, "", "static_abs"], [180, 3, 1, "", "static_acos"], [180, 3, 1, "", "static_acosh"], [180, 3, 1, "", "static_adam_step"], [180, 3, 1, "", "static_all"], [180, 3, 1, "", "static_any"], [180, 3, 1, "", "static_arange"], [180, 3, 1, "", "static_arg_info"], [180, 3, 1, "", "static_arg_names"], [180, 3, 1, "", "static_argmax"], [180, 3, 1, "", "static_argmin"], [180, 3, 1, "", "static_array"], [180, 3, 1, "", "static_array_equal"], [180, 3, 1, "", "static_arrays_equal"], [180, 3, 1, "", "static_as_ivy_dev"], [180, 3, 1, "", "static_as_ivy_dtype"], [180, 3, 1, "", "static_as_native_dev"], [180, 3, 1, "", "static_as_native_dtype"], [180, 3, 1, "", "static_asarray"], [180, 3, 1, "", "static_asin"], [180, 3, 1, "", "static_asinh"], [180, 3, 1, "", "static_assert_supports_inplace"], [180, 3, 1, "", "static_astype"], [180, 3, 1, "", "static_atan"], [180, 3, 1, "", "static_atan2"], [180, 3, 1, "", "static_atanh"], [180, 3, 1, "", "static_bitwise_and"], [180, 3, 1, "", "static_bitwise_invert"], [180, 3, 1, "", "static_bitwise_left_shift"], [180, 3, 1, "", "static_bitwise_or"], [180, 3, 1, "", "static_bitwise_right_shift"], [180, 3, 1, "", "static_bitwise_xor"], [180, 3, 1, "", "static_broadcast_arrays"], [180, 3, 1, "", "static_broadcast_to"], [180, 3, 1, "", "static_cache_fn"], [180, 3, 1, "", "static_ceil"], [180, 3, 1, "", "static_cholesky"], [180, 3, 1, "", "static_clear_mem_on_dev"], [180, 3, 1, "", "static_clip_matrix_norm"], [180, 3, 1, "", "static_clip_vector_norm"], [180, 3, 1, "", "static_closest_valid_dtype"], [180, 3, 1, "", "static_concat"], [180, 3, 1, "", "static_constant_pad"], [180, 3, 1, "", "static_container_types"], [180, 3, 1, "", "static_conv1d"], [180, 3, 1, "", "static_conv1d_transpose"], [180, 3, 1, "", "static_conv2d"], [180, 3, 1, "", "static_conv2d_transpose"], [180, 3, 1, "", "static_conv3d"], [180, 3, 1, "", "static_conv3d_transpose"], [180, 3, 1, "", "static_copy_array"], [180, 3, 1, "", "static_cos"], [180, 3, 1, "", "static_cosh"], [180, 3, 1, "", "static_cross"], [180, 3, 1, "", "static_cumprod"], [180, 3, 1, "", "static_cumsum"], [180, 3, 1, "", "static_current_backend"], [180, 3, 1, "", "static_current_backend_str"], [180, 3, 1, "", "static_default"], [180, 3, 1, "", "static_default_device"], [180, 3, 1, "", "static_default_dtype"], [180, 3, 1, "", "static_default_float_dtype"], [180, 3, 1, "", "static_default_int_dtype"], [180, 3, 1, "", "static_depthwise_conv2d"], [180, 3, 1, "", "static_det"], [180, 3, 1, "", "static_dev"], [180, 3, 1, "", "static_dev_clone"], [180, 3, 1, "", "static_dev_clone_array"], [180, 3, 1, "", "static_dev_clone_iter"], [180, 3, 1, "", "static_dev_clone_nest"], [180, 3, 1, "", "static_dev_dist"], [180, 3, 1, "", "static_dev_dist_array"], [180, 3, 1, "", "static_dev_dist_iter"], [180, 3, 1, "", "static_dev_dist_nest"], [180, 3, 1, "", "static_dev_unify"], [180, 3, 1, "", "static_dev_unify_array"], [180, 3, 1, "", "static_dev_unify_iter"], [180, 3, 1, "", "static_dev_unify_nest"], [180, 3, 1, "", "static_dev_util"], [180, 3, 1, "", "static_diagonal"], [180, 3, 1, "", "static_dropout"], [180, 3, 1, "", "static_dtype"], [180, 3, 1, "", "static_dtype_bits"], [180, 3, 1, "", "static_eigh"], [180, 3, 1, "", "static_eigvalsh"], [180, 3, 1, "", "static_einops_rearrange"], [180, 3, 1, "", "static_einops_reduce"], [180, 3, 1, "", "static_einops_repeat"], [180, 3, 1, "", "static_einsum"], [180, 3, 1, "", "static_empty"], [180, 3, 1, "", "static_empty_like"], [180, 3, 1, "", "static_equal"], [180, 3, 1, "", "static_erf"], [180, 3, 1, "", "static_execute_with_gradients"], [180, 3, 1, "", "static_exists"], [180, 3, 1, "", "static_exp"], [180, 3, 1, "", "static_expand_dims"], [180, 3, 1, "", "static_expm1"], [180, 3, 1, "", "static_eye"], [180, 3, 1, "", "static_finfo"], [180, 3, 1, "", "static_flip"], [180, 3, 1, "", "static_floor"], [180, 3, 1, "", "static_floor_divide"], [180, 3, 1, "", "static_floormod"], [180, 3, 1, "", "static_fourier_encode"], [180, 3, 1, "", "static_from_dlpack"], [180, 3, 1, "", "static_full"], [180, 3, 1, "", "static_full_like"], [180, 3, 1, "", "static_function_supported_dtypes"], [180, 3, 1, "", "static_function_unsupported_dtypes"], [180, 3, 1, "", "static_gather"], [180, 3, 1, "", "static_gelu"], [180, 3, 1, "", "static_get_all_arrays_in_memory"], [180, 3, 1, "", "static_get_all_ivy_arrays_on_dev"], [180, 3, 1, "", "static_get_min_base"], [180, 3, 1, "", "static_get_min_denominator"], [180, 3, 1, "", "static_get_num_dims"], [180, 3, 1, "", "static_get_referrers_recursive"], [180, 3, 1, "", "static_gpu_is_available"], [180, 3, 1, "", "static_greater"], [180, 3, 1, "", "static_greater_equal"], [180, 3, 1, "", "static_handle_nestable"], [180, 3, 1, "", "static_handle_out_argument"], [180, 3, 1, "", "static_has_nans"], [180, 3, 1, "", "static_iinfo"], [180, 3, 1, "", "static_indices_where"], [180, 3, 1, "", "static_infer_device"], [180, 3, 1, "", "static_infer_dtype"], [180, 3, 1, "", "static_inplace_arrays_supported"], [180, 3, 1, "", "static_inplace_decrement"], [180, 3, 1, "", "static_inplace_increment"], [180, 3, 1, "", "static_inplace_update"], [180, 3, 1, "", "static_inplace_variables_supported"], [180, 3, 1, "", "static_inputs_to_native_arrays"], [180, 3, 1, "", "static_inv"], [180, 3, 1, "", "static_invalid_dtype"], [180, 3, 1, "", "static_is_array"], [180, 3, 1, "", "static_is_float_dtype"], [180, 3, 1, "", "static_is_int_dtype"], [180, 3, 1, "", "static_is_ivy_array"], [180, 3, 1, "", "static_is_ivy_container"], [180, 3, 1, "", "static_is_native_array"], [180, 3, 1, "", "static_is_variable"], [180, 3, 1, "", "static_isfinite"], [180, 3, 1, "", "static_isinf"], [180, 3, 1, "", "static_isnan"], [180, 3, 1, "", "static_layer_norm"], [180, 3, 1, "", "static_leaky_relu"], [180, 3, 1, "", "static_less"], [180, 3, 1, "", "static_less_equal"], [180, 3, 1, "", "static_linear"], [180, 3, 1, "", "static_linspace"], [180, 3, 1, "", "static_log"], [180, 3, 1, "", "static_log10"], [180, 3, 1, "", "static_log1p"], [180, 3, 1, "", "static_log2"], [180, 3, 1, "", "static_logaddexp"], [180, 3, 1, "", "static_logical_and"], [180, 3, 1, "", "static_logical_not"], [180, 3, 1, "", "static_logical_or"], [180, 3, 1, "", "static_logical_xor"], [180, 3, 1, "", "static_logspace"], [180, 3, 1, "", "static_lstm_update"], [180, 3, 1, "", "static_match_kwargs"], [180, 3, 1, "", "static_matmul"], [180, 3, 1, "", "static_matrix_norm"], [180, 3, 1, "", "static_matrix_power"], [180, 3, 1, "", "static_matrix_rank"], [180, 3, 1, "", "static_matrix_transpose"], [180, 3, 1, "", "static_max"], [180, 3, 1, "", "static_maximum"], [180, 3, 1, "", "static_mean"], [180, 3, 1, "", "static_meshgrid"], [180, 3, 1, "", "static_min"], [180, 3, 1, "", "static_minimum"], [180, 3, 1, "", "static_multi_head_attention"], [180, 3, 1, "", "static_multinomial"], [180, 3, 1, "", "static_multiprocessing"], [180, 3, 1, "", "static_native_array"], [180, 3, 1, "", "static_negative"], [180, 3, 1, "", "static_nonzero"], [180, 3, 1, "", "static_not_equal"], [180, 3, 1, "", "static_num_arrays_in_memory"], [180, 3, 1, "", "static_num_cpu_cores"], [180, 3, 1, "", "static_num_gpus"], [180, 3, 1, "", "static_num_ivy_arrays_on_dev"], [180, 3, 1, "", "static_one_hot"], [180, 3, 1, "", "static_ones"], [180, 3, 1, "", "static_ones_like"], [180, 3, 1, "", "static_outer"], [180, 3, 1, "", "static_outputs_to_ivy_arrays"], [180, 3, 1, "", "static_percent_used_mem_on_dev"], [180, 3, 1, "", "static_permute_dims"], [180, 3, 1, "", "static_pinv"], [180, 3, 1, "", "static_positive"], [180, 3, 1, "", "static_pow"], [180, 3, 1, "", "static_print_all_arrays_in_memory"], [180, 3, 1, "", "static_print_all_ivy_arrays_on_dev"], [180, 3, 1, "", "static_prod"], [180, 3, 1, "", "static_promote_types"], [180, 3, 1, "", "static_qr"], [180, 3, 1, "", "static_queue_timeout"], [180, 3, 1, "", "static_random_normal"], [180, 3, 1, "", "static_relu"], [180, 3, 1, "", "static_remainder"], [180, 3, 1, "", "static_repeat"], [180, 3, 1, "", "static_reshape"], [180, 3, 1, "", "static_result_type"], [180, 3, 1, "", "static_round"], [180, 3, 1, "", "static_scaled_dot_product_attention"], [180, 3, 1, "", "static_scatter_flat"], [180, 3, 1, "", "static_scatter_nd"], [180, 3, 1, "", "static_seed"], [180, 3, 1, "", "static_set_default_device"], [180, 3, 1, "", "static_set_default_dtype"], [180, 3, 1, "", "static_set_default_float_dtype"], [180, 3, 1, "", "static_set_default_int_dtype"], [180, 3, 1, "", "static_set_min_base"], [180, 3, 1, "", "static_set_min_denominator"], [180, 3, 1, "", "static_set_queue_timeout"], [180, 3, 1, "", "static_set_split_factor"], [180, 3, 1, "", "static_set_tmp_dir"], [180, 3, 1, "", "static_set_with_grads"], [180, 3, 1, "", "static_shape"], [180, 3, 1, "", "static_shape_to_tuple"], [180, 3, 1, "", "static_shuffle"], [180, 3, 1, "", "static_sigmoid"], [180, 3, 1, "", "static_sign"], [180, 3, 1, "", "static_sin"], [180, 3, 1, "", "static_sinh"], [180, 3, 1, "", "static_slogdet"], [180, 3, 1, "", "static_softmax"], [180, 3, 1, "", "static_softplus"], [180, 3, 1, "", "static_solve"], [180, 3, 1, "", "static_split"], [180, 3, 1, "", "static_split_factor"], [180, 3, 1, "", "static_split_func_call"], [180, 3, 1, "", "static_sqrt"], [180, 3, 1, "", "static_square"], [180, 3, 1, "", "static_squeeze"], [180, 3, 1, "", "static_stable_divide"], [180, 3, 1, "", "static_stable_pow"], [180, 3, 1, "", "static_stack"], [180, 3, 1, "", "static_std"], [180, 3, 1, "", "static_stop_gradient"], [180, 3, 1, "", "static_sum"], [180, 3, 1, "", "static_supports_inplace"], [180, 3, 1, "", "static_svd"], [180, 3, 1, "", "static_svdvals"], [180, 3, 1, "", "static_swapaxes"], [180, 3, 1, "", "static_tensordot"], [180, 3, 1, "", "static_tile"], [180, 3, 1, "", "static_tmp_dir"], [180, 3, 1, "", "static_to_device"], [180, 3, 1, "", "static_to_list"], [180, 3, 1, "", "static_to_native_arrays_and_back"], [180, 3, 1, "", "static_to_numpy"], [180, 3, 1, "", "static_to_scalar"], [180, 3, 1, "", "static_total_mem_on_dev"], [180, 3, 1, "", "static_tpu_is_available"], [180, 3, 1, "", "static_trace"], [180, 3, 1, "", "static_tril"], [180, 3, 1, "", "static_triu"], [180, 3, 1, "", "static_trunc"], [180, 3, 1, "", "static_try_else_none"], [180, 3, 1, "", "static_type_promote_arrays"], [180, 3, 1, "", "static_unique_all"], [180, 3, 1, "", "static_unique_counts"], [180, 3, 1, "", "static_unique_inverse"], [180, 3, 1, "", "static_unique_values"], [180, 3, 1, "", "static_unset_default_device"], [180, 3, 1, "", "static_unset_default_dtype"], [180, 3, 1, "", "static_unset_default_float_dtype"], [180, 3, 1, "", "static_unset_default_int_dtype"], [180, 3, 1, "", "static_unset_with_grads"], [180, 3, 1, "", "static_unstack"], [180, 3, 1, "", "static_used_mem_on_dev"], [180, 3, 1, "", "static_valid_dtype"], [180, 3, 1, "", "static_value_is_nan"], [180, 3, 1, "", "static_var"], [180, 3, 1, "", "static_variable"], [180, 3, 1, "", "static_variable_data"], [180, 3, 1, "", "static_vecdot"], [180, 3, 1, "", "static_vector_norm"], [180, 3, 1, "", "static_vector_to_skew_symmetric_matrix"], [180, 3, 1, "", "static_where"], [180, 3, 1, "", "static_with_grads"], [180, 3, 1, "", "static_zero_pad"], [180, 3, 1, "", "static_zeros"], [180, 3, 1, "", "static_zeros_like"], [180, 3, 1, "", "stop_gradient"], [180, 3, 1, "", "supports_inplace"], [180, 3, 1, "", "svd"], [180, 3, 1, "", "svdvals"], [180, 3, 1, "", "tensordot"], [180, 3, 1, "", "tmp_dir"], [180, 3, 1, "", "to_native_arrays_and_back"], [180, 3, 1, "", "to_scalar"], [180, 3, 1, "", "total_mem_on_dev"], [180, 3, 1, "", "tpu_is_available"], [180, 3, 1, "", "trace"], [180, 3, 1, "", "tril"], [180, 3, 1, "", "triu"], [180, 3, 1, "", "try_else_none"], [180, 3, 1, "", "type_promote_arrays"], [180, 3, 1, "", "unique_all"], [180, 3, 1, "", "unique_counts"], [180, 3, 1, "", "unique_inverse"], [180, 3, 1, "", "unique_values"], [180, 3, 1, "", "unset_default_device"], [180, 3, 1, "", "unset_default_dtype"], [180, 3, 1, "", "unset_default_float_dtype"], [180, 3, 1, "", "unset_default_int_dtype"], [180, 3, 1, "", "unset_with_grads"], [180, 3, 1, "", "used_mem_on_dev"], [180, 3, 1, "", "valid_dtype"], [180, 3, 1, "", "value_is_nan"], [180, 3, 1, "", "variable"], [180, 3, 1, "", "variable_data"], [180, 3, 1, "", "vecdot"], [180, 3, 1, "", "vector_to_skew_symmetric_matrix"], [180, 3, 1, "", "where"], [180, 3, 1, "", "with_grads"], [180, 3, 1, "", "zeros"], [180, 3, 1, "", "zeros_like"]], "ivy.container.container.MultiDevContainer": [[181, 3, 1, "", "__init__"], [181, 3, 1, "", "at_dev"], [181, 3, 1, "", "at_devs"]], "ivy.container.container_methods": [[182, 2, 1, "", "__add__"], [182, 2, 1, "", "__init__"], [182, 2, 1, "", "__radd__"], [513, 2, 1, "", "abs"], [519, 2, 1, "", "acos"], [583, 2, 1, "", "acosh"], [825, 2, 1, "", "adam_update"], [657, 2, 1, "", "add"], [1107, 2, 1, "", "all"], [750, 2, 1, "", "all_equal"], [1111, 2, 1, "", "any"], [1063, 2, 1, "", "argsort"], [530, 2, 1, "", "asin"], [534, 2, 1, "", "asinh"], [194, 2, 1, "", "at_dev"], [195, 2, 1, "", "at_devs"], [544, 2, 1, "", "atan"], [542, 2, 1, "", "atan2"], [742, 2, 1, "", "atanh"], [938, 2, 1, "", "binary_cross_entropy"], [550, 2, 1, "", "bitwise_and"], [554, 2, 1, "", "bitwise_invert"], [558, 2, 1, "", "bitwise_left_shift"], [562, 2, 1, "", "bitwise_or"], [566, 2, 1, "", "bitwise_right_shift"], [570, 2, 1, "", "bitwise_xor"], [434, 2, 1, "", "can_cast"], [574, 2, 1, "", "ceil"], [954, 2, 1, "", "clip"], [761, 2, 1, "", "clip_vector_norm"], [959, 2, 1, "", "concat"], [963, 2, 1, "", "constant_pad"], [583, 2, 1, "", "cos"], [582, 2, 1, "", "cosh"], [943, 2, 1, "", "cross_entropy"], [609, 2, 1, "", "divide"], [1099, 2, 1, "", "einsum"], [617, 2, 1, "", "equal"], [595, 2, 1, "", "erf"], [657, 2, 1, "", "exp"], [967, 2, 1, "", "expand_dims"], [603, 2, 1, "", "expm1"], [971, 2, 1, "", "flip"], [609, 2, 1, "", "floor"], [611, 2, 1, "", "floor_divide"], [778, 2, 1, "", "gather_nd"], [830, 2, 1, "", "gradient_descent_update"], [617, 2, 1, "", "greater"], [619, 2, 1, "", "greater_equal"], [623, 2, 1, "", "isfinite"], [627, 2, 1, "", "isinf"], [631, 2, 1, "", "isnan"], [835, 2, 1, "", "lamb_update"], [839, 2, 1, "", "lars_update"], [1036, 2, 1, "", "layer_norm"], [635, 2, 1, "", "less"], [639, 2, 1, "", "less_equal"], [643, 2, 1, "", "log"], [647, 2, 1, "", "log10"], [651, 2, 1, "", "log1p"], [655, 2, 1, "", "log2"], [659, 2, 1, "", "logaddexp"], [663, 2, 1, "", "logical_and"], [667, 2, 1, "", "logical_not"], [671, 2, 1, "", "logical_or"], [675, 2, 1, "", "logical_xor"], [889, 2, 1, "", "matmul"], [1078, 2, 1, "", "max"], [1082, 2, 1, "", "mean"], [1086, 2, 1, "", "min"], [681, 2, 1, "", "multiply"], [686, 2, 1, "", "negative"], [690, 2, 1, "", "not_equal"], [843, 2, 1, "", "optimizer_update"], [975, 2, 1, "", "permute_dims"], [694, 2, 1, "", "positive"], [698, 2, 1, "", "pow"], [1090, 2, 1, "", "prod"], [1045, 2, 1, "", "random_uniform"], [702, 2, 1, "", "remainder"], [979, 2, 1, "", "repeat"], [983, 2, 1, "", "reshape"], [987, 2, 1, "", "roll"], [706, 2, 1, "", "round"], [710, 2, 1, "", "sign"], [714, 2, 1, "", "sin"], [718, 2, 1, "", "sinh"], [1068, 2, 1, "", "sort"], [948, 2, 1, "", "sparse_cross_entropy"], [722, 2, 1, "", "sqrt"], [726, 2, 1, "", "square"], [993, 2, 1, "", "squeeze"], [997, 2, 1, "", "stack"], [827, 2, 1, "", "static_adam_update"], [657, 2, 1, "", "static_add"], [752, 2, 1, "", "static_all_equal"], [1065, 2, 1, "", "static_argsort"], [940, 2, 1, "", "static_binary_cross_entropy"], [436, 2, 1, "", "static_can_cast"], [956, 2, 1, "", "static_clip"], [945, 2, 1, "", "static_cross_entropy"], [609, 2, 1, "", "static_divide"], [780, 2, 1, "", "static_gather_nd"], [832, 2, 1, "", "static_gradient_descent_update"], [837, 2, 1, "", "static_lamb_update"], [841, 2, 1, "", "static_lars_update"], [683, 2, 1, "", "static_multiply"], [845, 2, 1, "", "static_optimizer_update"], [1042, 2, 1, "", "static_randint"], [1047, 2, 1, "", "static_random_uniform"], [989, 2, 1, "", "static_roll"], [1070, 2, 1, "", "static_sort"], [950, 2, 1, "", "static_sparse_cross_entropy"], [729, 2, 1, "", "static_subtract"], [742, 2, 1, "", "static_tan"], [739, 2, 1, "", "static_tanh"], [1094, 2, 1, "", "std"], [731, 2, 1, "", "subtract"], [1098, 2, 1, "", "sum"], [1001, 2, 1, "", "swapaxes"], [742, 2, 1, "", "tan"], [741, 2, 1, "", "tanh"], [1005, 2, 1, "", "tile"], [745, 2, 1, "", "trunc"], [1102, 2, 1, "", "var"], [1009, 2, 1, "", "zero_pad"]], "ivy.container.creation": [[307, 1, 1, "", "ContainerWithCreation"]], "ivy.container.data_type": [[309, 1, 1, "", "ContainerWithDataTypes"]], "ivy.container.data_type.ContainerWithDataTypes": [[309, 3, 1, "", "can_cast"], [309, 3, 1, "", "static_can_cast"]], "ivy.container.device": [[311, 1, 1, "", "ContainerWithDevice"]], "ivy.container.elementwise": [[313, 1, 1, "", "ContainerWithElementwise"]], "ivy.container.elementwise.ContainerWithElementwise": [[313, 3, 1, "", "abs"], [313, 3, 1, "", "acos"], [313, 3, 1, "", "acosh"], [313, 3, 1, "", "add"], [313, 3, 1, "", "asin"], [313, 3, 1, "", "asinh"], [313, 3, 1, "", "atan"], [313, 3, 1, "", "atan2"], [313, 3, 1, "", "atanh"], [313, 3, 1, "", "bitwise_and"], [313, 3, 1, "", "bitwise_invert"], [313, 3, 1, "", "bitwise_left_shift"], [313, 3, 1, "", "bitwise_or"], [313, 3, 1, "", "bitwise_right_shift"], [313, 3, 1, "", "bitwise_xor"], [313, 3, 1, "", "ceil"], [313, 3, 1, "", "cos"], [313, 3, 1, "", "cosh"], [313, 3, 1, "", "divide"], [313, 3, 1, "", "equal"], [313, 3, 1, "", "erf"], [313, 3, 1, "", "exp"], [313, 3, 1, "", "expm1"], [313, 3, 1, "", "floor"], [313, 3, 1, "", "floor_divide"], [313, 3, 1, "", "greater"], [313, 3, 1, "", "greater_equal"], [313, 3, 1, "", "isfinite"], [313, 3, 1, "", "isinf"], [313, 3, 1, "", "isnan"], [313, 3, 1, "", "less"], [313, 3, 1, "", "less_equal"], [313, 3, 1, "", "log"], [313, 3, 1, "", "log10"], [313, 3, 1, "", "log1p"], [313, 3, 1, "", "log2"], [313, 3, 1, "", "logaddexp"], [313, 3, 1, "", "logical_and"], [313, 3, 1, "", "logical_not"], [313, 3, 1, "", "logical_or"], [313, 3, 1, "", "logical_xor"], [313, 3, 1, "", "multiply"], [313, 3, 1, "", "negative"], [313, 3, 1, "", "not_equal"], [313, 3, 1, "", "positive"], [313, 3, 1, "", "pow"], [313, 3, 1, "", "remainder"], [313, 3, 1, "", "round"], [313, 3, 1, "", "sign"], [313, 3, 1, "", "sin"], [313, 3, 1, "", "sinh"], [313, 3, 1, "", "sqrt"], [313, 3, 1, "", "square"], [313, 3, 1, "", "static_add"], [313, 3, 1, "", "static_divide"], [313, 3, 1, "", "static_multiply"], [313, 3, 1, "", "static_subtract"], [313, 3, 1, "", "static_tan"], [313, 3, 1, "", "static_tanh"], [313, 3, 1, "", "subtract"], [313, 3, 1, "", "tan"], [313, 3, 1, "", "tanh"], [313, 3, 1, "", "trunc"]], "ivy.container.general": [[315, 1, 1, "", "ContainerWithGeneral"]], "ivy.container.general.ContainerWithGeneral": [[315, 3, 1, "", "all_equal"], [315, 3, 1, "", "clip_vector_norm"], [315, 3, 1, "", "gather_nd"], [315, 3, 1, "", "static_all_equal"], [315, 3, 1, "", "static_gather_nd"]], "ivy.container.gradients": [[317, 1, 1, "", "ContainerWithGradients"]], "ivy.container.gradients.ContainerWithGradients": [[317, 3, 1, "", "adam_update"], [317, 3, 1, "", "gradient_descent_update"], [317, 3, 1, "", "lamb_update"], [317, 3, 1, "", "lars_update"], [317, 3, 1, "", "optimizer_update"], [317, 3, 1, "", "static_adam_update"], [317, 3, 1, "", "static_gradient_descent_update"], [317, 3, 1, "", "static_lamb_update"], [317, 3, 1, "", "static_lars_update"], [317, 3, 1, "", "static_optimizer_update"]], "ivy.container.image": [[319, 1, 1, "", "ContainerWithImage"]], "ivy.container.layers": [[321, 1, 1, "", "ContainerWithLayers"]], "ivy.container.linear_algebra": [[323, 1, 1, "", "ContainerWithLinearAlgebra"]], "ivy.container.linear_algebra.ContainerWithLinearAlgebra": [[323, 3, 1, "", "matmul"]], "ivy.container.losses": [[325, 1, 1, "", "ContainerWithLosses"]], "ivy.container.losses.ContainerWithLosses": [[325, 3, 1, "", "binary_cross_entropy"], [325, 3, 1, "", "cross_entropy"], [325, 3, 1, "", "sparse_cross_entropy"], [325, 3, 1, "", "static_binary_cross_entropy"], [325, 3, 1, "", "static_cross_entropy"], [325, 3, 1, "", "static_sparse_cross_entropy"]], "ivy.container.manipulation": [[327, 1, 1, "", "ContainerWithManipulation"]], "ivy.container.manipulation.ContainerWithManipulation": [[327, 3, 1, "", "clip"], [327, 3, 1, "", "concat"], [327, 3, 1, "", "constant_pad"], [327, 3, 1, "", "expand_dims"], [327, 3, 1, "", "flip"], [327, 3, 1, "", "permute_dims"], [327, 3, 1, "", "repeat"], [327, 3, 1, "", "reshape"], [327, 3, 1, "", "roll"], [327, 3, 1, "", "squeeze"], [327, 3, 1, "", "stack"], [327, 3, 1, "", "static_clip"], [327, 3, 1, "", "static_roll"], [327, 3, 1, "", "swapaxes"], [327, 3, 1, "", "tile"], [327, 3, 1, "", "zero_pad"]], "ivy.container.norms": [[329, 1, 1, "", "ContainerWithNorms"]], "ivy.container.norms.ContainerWithNorms": [[329, 3, 1, "", "layer_norm"]], "ivy.container.random": [[331, 1, 1, "", "ContainerWithRandom"]], "ivy.container.random.ContainerWithRandom": [[331, 3, 1, "", "random_uniform"], [331, 3, 1, "", "static_randint"], [331, 3, 1, "", "static_random_uniform"]], "ivy.container.searching": [[333, 1, 1, "", "ContainerWithSearching"]], "ivy.container.set": [[335, 1, 1, "", "ContainerWithSet"]], "ivy.container.sorting": [[337, 1, 1, "", "ContainerWithSorting"]], "ivy.container.sorting.ContainerWithSorting": [[337, 3, 1, "", "argsort"], [337, 3, 1, "", "sort"], [337, 3, 1, "", "static_argsort"], [337, 3, 1, "", "static_sort"]], "ivy.container.statistical": [[339, 1, 1, "", "ContainerWithStatistical"]], "ivy.container.statistical.ContainerWithStatistical": [[339, 3, 1, "", "einsum"], [339, 3, 1, "", "max"], [339, 3, 1, "", "mean"], [339, 3, 1, "", "min"], [339, 3, 1, "", "prod"], [339, 3, 1, "", "std"], [339, 3, 1, "", "sum"], [339, 3, 1, "", "var"]], "ivy.container.utility": [[341, 1, 1, "", "ContainerWithUtility"]], "ivy.container.utility.ContainerWithUtility": [[341, 3, 1, "", "all"], [341, 3, 1, "", "any"]], "ivy.container.wrapping": [[343, 2, 1, "", "add_ivy_container_instance_methods"]], "ivy.func_wrapper": [[384, 2, 1, "", "handle_nestable"], [385, 2, 1, "", "handle_out_argument"], [386, 2, 1, "", "infer_device"], [387, 2, 1, "", "infer_dtype"], [388, 2, 1, "", "inputs_to_ivy_arrays"], [389, 2, 1, "", "inputs_to_native_arrays"], [390, 2, 1, "", "outputs_to_ivy_arrays"], [391, 2, 1, "", "to_native_arrays_and_back"]], "ivy.functional.ivy": [[393, 0, 0, "-", "activations"], [401, 0, 0, "-", "compilation"], [403, 0, 0, "-", "constants"], [404, 0, 0, "-", "creation"], [423, 0, 0, "-", "data_type"], [460, 0, 0, "-", "device"], [510, 0, 0, "-", "elementwise"], [747, 0, 0, "-", "general"], [821, 0, 0, "-", "gradients"], [852, 0, 0, "-", "layers"], [865, 0, 0, "-", "linear_algebra"], [935, 0, 0, "-", "losses"], [951, 0, 0, "-", "manipulation"], [1011, 0, 0, "-", "meta"], [1015, 0, 0, "-", "nest"], [1033, 0, 0, "-", "norms"], [1038, 0, 0, "-", "random"], [1050, 0, 0, "-", "searching"], [1055, 0, 0, "-", "set"], [1060, 0, 0, "-", "sorting"], [1071, 0, 0, "-", "statistical"], [1104, 0, 0, "-", "utility"]], "ivy.functional.ivy.activations": [[394, 2, 1, "", "gelu"], [395, 2, 1, "", "leaky_relu"], [396, 2, 1, "", "relu"], [397, 2, 1, "", "sigmoid"], [398, 2, 1, "", "softmax"], [399, 2, 1, "", "softplus"], [400, 2, 1, "", "tanh"]], "ivy.functional.ivy.compilation": [[402, 2, 1, "", "compile"]], "ivy.functional.ivy.constants": [[403, 5, 1, "", "e"], [403, 5, 1, "", "inf"], [403, 5, 1, "", "nan"], [403, 5, 1, "", "newaxis"], [403, 5, 1, "", "pi"]], "ivy.functional.ivy.creation": [[405, 2, 1, "", "arange"], [404, 2, 1, "", "array"], [406, 2, 1, "", "asarray"], [407, 2, 1, "", "empty"], [408, 2, 1, "", "empty_like"], [409, 2, 1, "", "eye"], [410, 2, 1, "", "from_dlpack"], [411, 2, 1, "", "full"], [412, 2, 1, "", "full_like"], [413, 2, 1, "", "linspace"], [414, 2, 1, "", "logspace"], [415, 2, 1, "", "meshgrid"], [416, 2, 1, "", "native_array"], [417, 2, 1, "", "ones"], [418, 2, 1, "", "ones_like"], [419, 2, 1, "", "tril"], [420, 2, 1, "", "triu"], [421, 2, 1, "", "zeros"], [422, 2, 1, "", "zeros_like"]], "ivy.functional.ivy.data_type": [[423, 1, 1, "", "DefaultDtype"], [423, 1, 1, "", "DefaultFloatDtype"], [423, 1, 1, "", "DefaultIntDtype"], [427, 2, 1, "", "as_ivy_dtype"], [428, 2, 1, "", "as_native_dtype"], [429, 2, 1, "", "astype"], [430, 2, 1, "", "broadcast_arrays"], [431, 2, 1, "", "broadcast_to"], [435, 2, 1, "", "can_cast"], [437, 2, 1, "", "closest_valid_dtype"], [438, 2, 1, "", "default_dtype"], [439, 2, 1, "", "default_float_dtype"], [440, 2, 1, "", "default_int_dtype"], [441, 2, 1, "", "dtype"], [442, 2, 1, "", "dtype_bits"], [443, 2, 1, "", "finfo"], [444, 2, 1, "", "function_supported_dtypes"], [445, 2, 1, "", "function_unsupported_dtypes"], [446, 2, 1, "", "iinfo"], [447, 2, 1, "", "invalid_dtype"], [448, 2, 1, "", "is_float_dtype"], [449, 2, 1, "", "is_int_dtype"], [450, 2, 1, "", "promote_types"], [451, 2, 1, "", "result_type"], [452, 2, 1, "", "set_default_dtype"], [453, 2, 1, "", "set_default_float_dtype"], [454, 2, 1, "", "set_default_int_dtype"], [455, 2, 1, "", "type_promote_arrays"], [456, 2, 1, "", "unset_default_dtype"], [457, 2, 1, "", "unset_default_float_dtype"], [458, 2, 1, "", "unset_default_int_dtype"], [459, 2, 1, "", "valid_dtype"]], "ivy.functional.ivy.data_type.DefaultDtype": [[423, 3, 1, "", "__init__"]], "ivy.functional.ivy.data_type.DefaultFloatDtype": [[423, 3, 1, "", "__init__"]], "ivy.functional.ivy.data_type.DefaultIntDtype": [[423, 3, 1, "", "__init__"]], "ivy.functional.ivy.device": [[460, 1, 1, "", "DefaultDevice"], [462, 1, 1, "", "DevClonedItem"], [463, 1, 1, "", "DevClonedIter"], [464, 1, 1, "", "DevClonedNest"], [465, 1, 1, "", "DevDistItem"], [466, 1, 1, "", "DevDistIter"], [467, 1, 1, "", "DevDistNest"], [460, 1, 1, "", "DevManager"], [469, 1, 1, "", "DevMapper"], [470, 1, 1, "", "DevMapperMultiProc"], [460, 1, 1, "", "MultiDev"], [472, 1, 1, "", "MultiDevItem"], [473, 1, 1, "", "MultiDevIter"], [474, 1, 1, "", "MultiDevNest"], [475, 1, 1, "", "Profiler"], [476, 2, 1, "", "as_ivy_dev"], [477, 2, 1, "", "as_native_dev"], [478, 2, 1, "", "clear_mem_on_dev"], [479, 2, 1, "", "default_device"], [480, 2, 1, "", "dev"], [481, 2, 1, "", "dev_clone"], [482, 2, 1, "", "dev_clone_array"], [483, 2, 1, "", "dev_clone_iter"], [484, 2, 1, "", "dev_clone_nest"], [485, 2, 1, "", "dev_dist"], [486, 2, 1, "", "dev_dist_array"], [487, 2, 1, "", "dev_dist_iter"], [488, 2, 1, "", "dev_dist_nest"], [489, 2, 1, "", "dev_unify"], [490, 2, 1, "", "dev_unify_array"], [491, 2, 1, "", "dev_unify_iter"], [492, 2, 1, "", "dev_unify_nest"], [493, 2, 1, "", "dev_util"], [494, 2, 1, "", "get_all_ivy_arrays_on_dev"], [495, 2, 1, "", "gpu_is_available"], [496, 2, 1, "", "num_cpu_cores"], [497, 2, 1, "", "num_gpus"], [498, 2, 1, "", "num_ivy_arrays_on_dev"], [499, 2, 1, "", "percent_used_mem_on_dev"], [500, 2, 1, "", "print_all_ivy_arrays_on_dev"], [501, 2, 1, "", "set_default_device"], [502, 2, 1, "", "set_split_factor"], [503, 2, 1, "", "split_factor"], [504, 2, 1, "", "split_func_call"], [505, 2, 1, "", "to_device"], [506, 2, 1, "", "total_mem_on_dev"], [507, 2, 1, "", "tpu_is_available"], [508, 2, 1, "", "unset_default_device"], [509, 2, 1, "", "used_mem_on_dev"]], "ivy.functional.ivy.device.DefaultDevice": [[460, 3, 1, "", "__enter__"], [460, 3, 1, "", "__init__"]], "ivy.functional.ivy.device.DevManager": [[460, 3, 1, "", "__init__"], [460, 3, 1, "", "da_tune_step"], [460, 4, 1, "", "dim_size"], [460, 3, 1, "", "ds_tune_step"], [460, 3, 1, "", "map"], [460, 3, 1, "", "repeated_config_check"], [460, 4, 1, "", "tune_step"], [460, 4, 1, "", "tuned"]], "ivy.functional.ivy.device.DevMapper": [[469, 3, 1, "", "__init__"], [469, 3, 1, "", "map"]], "ivy.functional.ivy.device.DevMapperMultiProc": [[470, 3, 1, "", "__init__"]], "ivy.functional.ivy.device.MultiDev": [[460, 3, 1, "", "__init__"]], "ivy.functional.ivy.device.MultiDevItem": [[472, 3, 1, "", "__init__"], [472, 3, 1, "", "items"], [472, 3, 1, "", "keys"], [472, 4, 1, "", "shape"], [472, 3, 1, "", "values"]], "ivy.functional.ivy.device.MultiDevIter": [[473, 3, 1, "", "__init__"], [473, 3, 1, "", "at_dev"], [473, 3, 1, "", "at_devs"]], "ivy.functional.ivy.device.MultiDevNest": [[474, 3, 1, "", "__init__"], [474, 3, 1, "", "at_dev"]], "ivy.functional.ivy.device.Profiler": [[475, 3, 1, "", "__init__"], [475, 3, 1, "", "start"], [475, 3, 1, "", "stop"]], "ivy.functional.ivy.elementwise": [[514, 2, 1, "", "abs"], [515, 2, 1, "", "acos"], [583, 2, 1, "", "acosh"], [523, 2, 1, "", "add"], [531, 2, 1, "", "asin"], [535, 2, 1, "", "asinh"], [536, 2, 1, "", "atan"], [543, 2, 1, "", "atan2"], [742, 2, 1, "", "atanh"], [551, 2, 1, "", "bitwise_and"], [555, 2, 1, "", "bitwise_invert"], [559, 2, 1, "", "bitwise_left_shift"], [563, 2, 1, "", "bitwise_or"], [567, 2, 1, "", "bitwise_right_shift"], [571, 2, 1, "", "bitwise_xor"], [575, 2, 1, "", "ceil"], [576, 2, 1, "", "cos"], [580, 2, 1, "", "cosh"], [584, 2, 1, "", "divide"], [589, 2, 1, "", "equal"], [596, 2, 1, "", "erf"], [597, 2, 1, "", "exp"], [604, 2, 1, "", "expm1"], [605, 2, 1, "", "floor"], [612, 2, 1, "", "floor_divide"], [613, 2, 1, "", "greater"], [620, 2, 1, "", "greater_equal"], [624, 2, 1, "", "isfinite"], [628, 2, 1, "", "isinf"], [632, 2, 1, "", "isnan"], [636, 2, 1, "", "less"], [640, 2, 1, "", "less_equal"], [644, 2, 1, "", "log"], [648, 2, 1, "", "log10"], [652, 2, 1, "", "log1p"], [656, 2, 1, "", "log2"], [660, 2, 1, "", "logaddexp"], [664, 2, 1, "", "logical_and"], [668, 2, 1, "", "logical_not"], [672, 2, 1, "", "logical_or"], [676, 2, 1, "", "logical_xor"], [677, 2, 1, "", "maximum"], [678, 2, 1, "", "minimum"], [682, 2, 1, "", "multiply"], [687, 2, 1, "", "negative"], [691, 2, 1, "", "not_equal"], [695, 2, 1, "", "positive"], [699, 2, 1, "", "pow"], [703, 2, 1, "", "remainder"], [707, 2, 1, "", "round"], [711, 2, 1, "", "sign"], [715, 2, 1, "", "sin"], [719, 2, 1, "", "sinh"], [723, 2, 1, "", "sqrt"], [727, 2, 1, "", "square"], [732, 2, 1, "", "subtract"], [733, 2, 1, "", "tan"], [738, 2, 1, "", "tanh"], [746, 2, 1, "", "trunc"]], "ivy.functional.ivy.general": [[751, 2, 1, "", "all_equal"], [753, 2, 1, "", "arg_info"], [754, 2, 1, "", "arg_names"], [755, 2, 1, "", "array_equal"], [756, 2, 1, "", "arrays_equal"], [757, 2, 1, "", "assert_supports_inplace"], [758, 2, 1, "", "cache_fn"], [759, 2, 1, "", "clip_matrix_norm"], [762, 2, 1, "", "clip_vector_norm"], [763, 2, 1, "", "container_types"], [764, 2, 1, "", "copy_array"], [765, 2, 1, "", "cumprod"], [766, 2, 1, "", "cumsum"], [767, 2, 1, "", "current_backend_str"], [768, 2, 1, "", "default"], [769, 2, 1, "", "einops_rearrange"], [770, 2, 1, "", "einops_reduce"], [771, 2, 1, "", "einops_repeat"], [772, 2, 1, "", "exists"], [773, 2, 1, "", "floormod"], [774, 2, 1, "", "fourier_encode"], [775, 2, 1, "", "gather"], [779, 2, 1, "", "gather_nd"], [781, 2, 1, "", "get_all_arrays_in_memory"], [782, 2, 1, "", "get_min_base"], [783, 2, 1, "", "get_min_denominator"], [784, 2, 1, "", "get_num_dims"], [785, 2, 1, "", "get_referrers_recursive"], [786, 2, 1, "", "has_nans"], [787, 2, 1, "", "indices_where"], [788, 2, 1, "", "inplace_arrays_supported"], [789, 2, 1, "", "inplace_decrement"], [790, 2, 1, "", "inplace_increment"], [791, 2, 1, "", "inplace_update"], [792, 2, 1, "", "inplace_variables_supported"], [793, 2, 1, "", "is_array"], [794, 2, 1, "", "is_ivy_array"], [795, 2, 1, "", "is_ivy_container"], [796, 2, 1, "", "is_native_array"], [797, 2, 1, "", "match_kwargs"], [798, 2, 1, "", "multiprocessing"], [799, 2, 1, "", "num_arrays_in_memory"], [800, 2, 1, "", "one_hot"], [801, 2, 1, "", "print_all_arrays_in_memory"], [802, 2, 1, "", "queue_timeout"], [803, 2, 1, "", "scatter_flat"], [804, 2, 1, "", "scatter_nd"], [805, 2, 1, "", "set_min_base"], [806, 2, 1, "", "set_min_denominator"], [807, 2, 1, "", "set_queue_timeout"], [808, 2, 1, "", "set_tmp_dir"], [809, 2, 1, "", "shape"], [810, 2, 1, "", "shape_to_tuple"], [811, 2, 1, "", "stable_divide"], [812, 2, 1, "", "stable_pow"], [813, 2, 1, "", "supports_inplace"], [814, 2, 1, "", "tmp_dir"], [815, 2, 1, "", "to_list"], [816, 2, 1, "", "to_numpy"], [817, 2, 1, "", "to_scalar"], [818, 2, 1, "", "try_else_none"], [819, 2, 1, "", "unstack"], [820, 2, 1, "", "value_is_nan"]], "ivy.functional.ivy.gradients": [[821, 1, 1, "", "GradientTracking"], [823, 2, 1, "", "adam_step"], [826, 2, 1, "", "adam_update"], [828, 2, 1, "", "execute_with_gradients"], [831, 2, 1, "", "gradient_descent_update"], [833, 2, 1, "", "is_variable"], [836, 2, 1, "", "lamb_update"], [840, 2, 1, "", "lars_update"], [844, 2, 1, "", "optimizer_update"], [846, 2, 1, "", "set_with_grads"], [847, 2, 1, "", "stop_gradient"], [848, 2, 1, "", "unset_with_grads"], [849, 2, 1, "", "variable"], [850, 2, 1, "", "variable_data"], [851, 2, 1, "", "with_grads"]], "ivy.functional.ivy.gradients.GradientTracking": [[821, 3, 1, "", "__init__"]], "ivy.functional.ivy.layers": [[853, 2, 1, "", "conv1d"], [854, 2, 1, "", "conv1d_transpose"], [855, 2, 1, "", "conv2d"], [856, 2, 1, "", "conv2d_transpose"], [857, 2, 1, "", "conv3d"], [858, 2, 1, "", "conv3d_transpose"], [859, 2, 1, "", "depthwise_conv2d"], [860, 2, 1, "", "dropout"], [861, 2, 1, "", "linear"], [862, 2, 1, "", "lstm_update"], [863, 2, 1, "", "multi_head_attention"], [864, 2, 1, "", "scaled_dot_product_attention"]], "ivy.functional.ivy.linear_algebra": [[868, 2, 1, "", "cholesky"], [871, 2, 1, "", "cross"], [872, 2, 1, "", "det"], [877, 2, 1, "", "diagonal"], [880, 2, 1, "", "eigh"], [883, 2, 1, "", "eigvalsh"], [884, 2, 1, "", "inv"], [890, 2, 1, "", "matmul"], [893, 2, 1, "", "matrix_norm"], [894, 2, 1, "", "matrix_power"], [897, 2, 1, "", "matrix_rank"], [900, 2, 1, "", "matrix_transpose"], [903, 2, 1, "", "outer"], [906, 2, 1, "", "pinv"], [909, 2, 1, "", "qr"], [910, 2, 1, "", "slogdet"], [913, 2, 1, "", "solve"], [914, 2, 1, "", "svd"], [919, 2, 1, "", "svdvals"], [922, 2, 1, "", "tensordot"], [925, 2, 1, "", "trace"], [928, 2, 1, "", "vecdot"], [931, 2, 1, "", "vector_norm"], [934, 2, 1, "", "vector_to_skew_symmetric_matrix"]], "ivy.functional.ivy.losses": [[939, 2, 1, "", "binary_cross_entropy"], [944, 2, 1, "", "cross_entropy"], [949, 2, 1, "", "sparse_cross_entropy"]], "ivy.functional.ivy.manipulation": [[955, 2, 1, "", "clip"], [960, 2, 1, "", "concat"], [964, 2, 1, "", "constant_pad"], [968, 2, 1, "", "expand_dims"], [972, 2, 1, "", "flip"], [976, 2, 1, "", "permute_dims"], [980, 2, 1, "", "repeat"], [984, 2, 1, "", "reshape"], [988, 2, 1, "", "roll"], [990, 2, 1, "", "split"], [994, 2, 1, "", "squeeze"], [998, 2, 1, "", "stack"], [1002, 2, 1, "", "swapaxes"], [1006, 2, 1, "", "tile"], [1010, 2, 1, "", "zero_pad"]], "ivy.functional.ivy.meta": [[1012, 2, 1, "", "fomaml_step"], [1013, 2, 1, "", "maml_step"], [1014, 2, 1, "", "reptile_step"]], "ivy.functional.ivy.nest": [[1016, 2, 1, "", "all_nested_indices"], [1017, 2, 1, "", "copy_nest"], [1018, 2, 1, "", "index_nest"], [1019, 2, 1, "", "insert_into_nest_at_index"], [1020, 2, 1, "", "insert_into_nest_at_indices"], [1021, 2, 1, "", "map"], [1022, 2, 1, "", "map_nest_at_index"], [1023, 2, 1, "", "map_nest_at_indices"], [1024, 2, 1, "", "multi_index_nest"], [1025, 2, 1, "", "nested_any"], [1026, 2, 1, "", "nested_indices_where"], [1027, 2, 1, "", "nested_map"], [1028, 2, 1, "", "nested_multi_map"], [1029, 2, 1, "", "prune_nest_at_index"], [1030, 2, 1, "", "prune_nest_at_indices"], [1031, 2, 1, "", "set_nest_at_index"], [1032, 2, 1, "", "set_nest_at_indices"]], "ivy.functional.ivy.norms": [[1037, 2, 1, "", "layer_norm"]], "ivy.functional.ivy.random": [[1039, 2, 1, "", "multinomial"], [1041, 2, 1, "", "randint"], [1043, 2, 1, "", "random_normal"], [1046, 2, 1, "", "random_uniform"], [1048, 2, 1, "", "seed"], [1049, 2, 1, "", "shuffle"]], "ivy.functional.ivy.searching": [[1051, 2, 1, "", "argmax"], [1052, 2, 1, "", "argmin"], [1053, 2, 1, "", "nonzero"], [1054, 2, 1, "", "where"]], "ivy.functional.ivy.set": [[1056, 2, 1, "", "unique_all"], [1057, 2, 1, "", "unique_counts"], [1058, 2, 1, "", "unique_inverse"], [1059, 2, 1, "", "unique_values"]], "ivy.functional.ivy.sorting": [[1064, 2, 1, "", "argsort"], [1069, 2, 1, "", "sort"]], "ivy.functional.ivy.statistical": [[1099, 2, 1, "", "einsum"], [1079, 2, 1, "", "max"], [1083, 2, 1, "", "mean"], [1087, 2, 1, "", "min"], [1091, 2, 1, "", "prod"], [1095, 2, 1, "", "std"], [1096, 2, 1, "", "sum"], [1103, 2, 1, "", "var"]], "ivy.functional.ivy.utility": [[1108, 2, 1, "", "all"], [1112, 2, 1, "", "any"]], "ivy.inspection": [[1117, 2, 1, "", "add_array_specs"], [1118, 2, 1, "", "fn_array_spec"]], "ivy.stateful": [[1120, 0, 0, "-", "activations"], [1123, 0, 0, "-", "converters"], [1125, 0, 0, "-", "initializers"], [1134, 0, 0, "-", "layers"], [1146, 0, 0, "-", "module"], [1148, 0, 0, "-", "norms"], [1150, 0, 0, "-", "optimizers"], [1156, 0, 0, "-", "sequential"]], "ivy.stateful.activations": [[1121, 1, 1, "", "GEGLU"], [1122, 1, 1, "", "GELU"]], "ivy.stateful.activations.GEGLU": [[1121, 3, 1, "", "__init__"]], "ivy.stateful.activations.GELU": [[1122, 3, 1, "", "__init__"]], "ivy.stateful.converters": [[1124, 2, 1, "", "to_ivy_module"]], "ivy.stateful.initializers": [[1125, 1, 1, "", "Constant"], [1127, 1, 1, "", "FirstLayerSiren"], [1128, 1, 1, "", "GlorotUniform"], [1125, 1, 1, "", "KaimingNormal"], [1130, 1, 1, "", "Ones"], [1131, 1, 1, "", "Siren"], [1125, 1, 1, "", "Uniform"], [1133, 1, 1, "", "Zeros"]], "ivy.stateful.initializers.Constant": [[1125, 3, 1, "", "__init__"], [1125, 3, 1, "", "create_variables"]], "ivy.stateful.initializers.FirstLayerSiren": [[1127, 3, 1, "", "__init__"]], "ivy.stateful.initializers.GlorotUniform": [[1128, 3, 1, "", "__init__"]], "ivy.stateful.initializers.KaimingNormal": [[1125, 3, 1, "", "__init__"], [1125, 3, 1, "", "create_variables"]], "ivy.stateful.initializers.Ones": [[1130, 3, 1, "", "__init__"]], "ivy.stateful.initializers.Siren": [[1131, 3, 1, "", "__init__"]], "ivy.stateful.initializers.Uniform": [[1125, 3, 1, "", "__init__"], [1125, 3, 1, "", "create_variables"]], "ivy.stateful.initializers.Zeros": [[1133, 3, 1, "", "__init__"]], "ivy.stateful.layers": [[1135, 1, 1, "", "Conv1D"], [1136, 1, 1, "", "Conv1DTranspose"], [1137, 1, 1, "", "Conv2D"], [1138, 1, 1, "", "Conv2DTranspose"], [1139, 1, 1, "", "Conv3D"], [1140, 1, 1, "", "Conv3DTranspose"], [1141, 1, 1, "", "DepthwiseConv2D"], [1142, 1, 1, "", "Dropout"], [1143, 1, 1, "", "LSTM"], [1144, 1, 1, "", "Linear"], [1145, 1, 1, "", "MultiHeadAttention"]], "ivy.stateful.layers.Conv1D": [[1135, 3, 1, "", "__init__"]], "ivy.stateful.layers.Conv1DTranspose": [[1136, 3, 1, "", "__init__"]], "ivy.stateful.layers.Conv2D": [[1137, 3, 1, "", "__init__"]], "ivy.stateful.layers.Conv2DTranspose": [[1138, 3, 1, "", "__init__"]], "ivy.stateful.layers.Conv3D": [[1139, 3, 1, "", "__init__"]], "ivy.stateful.layers.Conv3DTranspose": [[1140, 3, 1, "", "__init__"]], "ivy.stateful.layers.DepthwiseConv2D": [[1141, 3, 1, "", "__init__"]], "ivy.stateful.layers.Dropout": [[1142, 3, 1, "", "__init__"]], "ivy.stateful.layers.LSTM": [[1143, 3, 1, "", "__init__"], [1143, 3, 1, "", "get_initial_state"]], "ivy.stateful.layers.Linear": [[1144, 3, 1, "", "__init__"]], "ivy.stateful.layers.MultiHeadAttention": [[1145, 3, 1, "", "__init__"]], "ivy.stateful.module": [[1147, 1, 1, "", "Module"]], "ivy.stateful.module.Module": [[1147, 3, 1, "", "__init__"], [1147, 3, 1, "", "build"], [1147, 4, 1, "", "build_mode"], [1147, 4, 1, "", "built"], [1147, 3, 1, "", "check_submod_rets"], [1147, 3, 1, "", "get_mod_key"], [1147, 3, 1, "", "mod_depth"], [1147, 3, 1, "", "mod_height"], [1147, 3, 1, "", "mod_with_top_mod_key_chain"], [1147, 3, 1, "", "save_weights"], [1147, 3, 1, "", "show_mod_in_top_mod"], [1147, 3, 1, "", "show_structure"], [1147, 3, 1, "", "show_v_in_top_v"], [1147, 3, 1, "", "sub_mods"], [1147, 3, 1, "", "track_submod_call_order"], [1147, 3, 1, "", "track_submod_rets"], [1147, 3, 1, "", "v_with_top_v_key_chains"]], "ivy.stateful.norms": [[1149, 1, 1, "", "LayerNorm"]], "ivy.stateful.norms.LayerNorm": [[1149, 3, 1, "", "__init__"]], "ivy.stateful.optimizers": [[1151, 1, 1, "", "Adam"], [1152, 1, 1, "", "LAMB"], [1153, 1, 1, "", "LARS"], [1154, 1, 1, "", "Optimizer"], [1155, 1, 1, "", "SGD"]], "ivy.stateful.optimizers.Adam": [[1151, 3, 1, "", "__init__"], [1151, 3, 1, "", "set_state"], [1151, 4, 1, "", "state"]], "ivy.stateful.optimizers.LAMB": [[1152, 3, 1, "", "__init__"], [1152, 3, 1, "", "set_state"], [1152, 4, 1, "", "state"]], "ivy.stateful.optimizers.LARS": [[1153, 3, 1, "", "__init__"], [1153, 3, 1, "", "set_state"], [1153, 4, 1, "", "state"]], "ivy.stateful.optimizers.Optimizer": [[1154, 3, 1, "", "__init__"], [1154, 3, 1, "", "set_state"], [1154, 3, 1, "", "step"]], "ivy.stateful.optimizers.SGD": [[1155, 3, 1, "", "__init__"], [1155, 3, 1, "", "set_state"], [1155, 4, 1, "", "state"]], "ivy.stateful.sequential": [[1157, 1, 1, "", "Sequential"]], "ivy.stateful.sequential.Sequential": [[1157, 3, 1, "", "__init__"]], "ivy.verbosity": [[1160, 2, 1, "", "cprint"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:function", "3": "py:method", "4": "py:property", "5": "py:data"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "function", "Python function"], "3": ["py", "method", "Python method"], "4": ["py", "property", "Python property"], "5": ["py", "data", "Python data"]}, "titleterms": {"activ": [0, 175, 393, 1120], "arraywithactiv": 1, "arrai": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 173, 353, 358, 363, 367, 433, 512, 516, 520, 524, 529, 533, 537, 541, 545, 549, 553, 557, 561, 565, 569, 573, 577, 581, 585, 590, 594, 598, 602, 606, 610, 614, 618, 622, 626, 630, 634, 638, 642, 646, 650, 654, 658, 662, 666, 670, 674, 680, 685, 689, 693, 697, 701, 705, 709, 713, 717, 721, 725, 730, 735, 740, 744, 749, 777, 867, 870, 873, 876, 879, 882, 885, 888, 892, 896, 899, 902, 905, 908, 912, 915, 918, 921, 924, 927, 930, 933, 937, 942, 947, 953, 958, 962, 966, 970, 974, 978, 982, 986, 992, 996, 1000, 1004, 1008, 1035, 1062, 1067, 1073, 1077, 1081, 1085, 1089, 1093, 1097, 1101, 1106, 1110], "method": [2, 182, 359, 367, 368], "ab": [3, 183, 511, 512, 513, 514], "aco": [4, 184, 515, 516, 517], "acosh": [5, 185, 518, 519, 520, 521, 522, 579, 583], "add": [6, 187, 352, 523, 524, 525], "all": [7, 188, 1105, 1106, 1107, 1108], "all_equ": [8, 189, 748, 749, 750, 751], "ani": [9, 190, 1109, 1110, 1111, 1112], "argsort": [10, 191, 1061, 1062, 1063, 1064], "asin": [11, 192, 528, 529, 530, 531], "asinh": [12, 193, 532, 533, 534, 535], "atan": [13, 196, 536, 537, 538], "atan2": [14, 197, 540, 541, 542, 543], "atanh": [15, 198, 539, 544, 545, 546, 547, 737, 742], "binary_cross_entropi": [16, 199, 936, 937, 938, 939], "bitwise_and": [17, 200, 548, 549, 550, 551], "bitwise_invert": [18, 201, 552, 553, 554, 555], "bitwise_left_shift": [19, 202, 556, 557, 558, 559], "bitwise_or": [20, 203, 560, 561, 562, 563], "bitwise_right_shift": [21, 204, 564, 565, 566, 567], "bitwise_xor": [22, 205, 568, 569, 570, 571], "can_cast": [23, 206, 432, 433, 434, 435], "ceil": [24, 207, 572, 573, 574, 575], "choleski": [25, 866, 867, 868], "clip": [26, 208, 952, 953, 954, 955], "concat": [27, 210, 957, 958, 959, 960], "constant_pad": [28, 211, 961, 962, 963, 964], "co": [29, 212, 576, 577, 578], "cosh": [30, 213, 580, 581, 582], "cross": [31, 869, 870, 871], "cross_entropi": [32, 214, 941, 942, 943, 944], "det": [33, 872, 873], "diagon": [34, 875, 876, 877], "divid": [35, 215, 584, 585, 586], "eigh": [36, 878, 879, 880], "eigvalsh": [37, 881, 882, 883], "einsum": [38, 216, 1072, 1073, 1074, 1075, 1099], "equal": [39, 217, 589, 590, 591], "erf": [40, 218, 593, 594, 595, 596], "exp": [41, 219, 597, 598, 599], "expand_dim": [42, 220, 965, 966, 967, 968], "expm1": [43, 221, 601, 602, 603, 604], "flip": [44, 222, 969, 970, 971, 972], "floor": [45, 223, 605, 606, 607], "floor_divid": [46, 224, 587, 608, 609, 610, 611, 612], "gather_nd": [47, 225, 776, 777, 778, 779], "greater": [48, 227, 613, 614, 615], "greater_equ": [49, 228, 592, 616, 617, 618, 619, 620], "inv": [50, 884, 885], "isfinit": [51, 229, 621, 622, 623, 624], "isinf": [52, 230, 625, 626, 627, 628], "isnan": [53, 231, 629, 630, 631, 632], "layer_norm": [54, 234, 1034, 1035, 1036, 1037], "less": [55, 235, 633, 634, 635, 636], "less_equ": [56, 236, 637, 638, 639, 640], "log": [57, 237, 641, 642, 643, 644], "log10": [58, 238, 645, 646, 647, 648], "log1p": [59, 239, 649, 650, 651, 652], "log2": [60, 240, 653, 654, 655, 656], "logaddexp": [61, 241, 526, 600, 657, 658, 659, 660], "logical_and": [62, 242, 661, 662, 663, 664], "logical_not": [63, 243, 665, 666, 667, 668], "logical_or": [64, 244, 669, 670, 671, 672], "logical_xor": [65, 245, 673, 674, 675, 676], "matmul": [66, 246, 887, 888, 889, 890], "matrix_norm": [67, 891, 892, 893], "matrix_rank": [68, 895, 896, 897], "matrix_transpos": [69, 898, 899, 900], "max": [70, 247, 1076, 1077, 1078, 1079], "mean": [71, 248, 1080, 1081, 1082, 1083], "min": [72, 249, 1084, 1085, 1086, 1087], "multipli": [73, 250, 679, 680, 681, 682], "neg": [74, 251, 684, 685, 686, 687], "not_equ": [75, 252, 688, 689, 690, 691], "outer": [76, 901, 902, 903], "permute_dim": [77, 254, 973, 974, 975, 976], "pinv": [78, 886, 904, 905, 906], "posit": [79, 255, 692, 693, 694, 695], "pow": [80, 256, 696, 697, 698, 699], "prod": [81, 257, 1088, 1089, 1090, 1091], "qr": [82, 907, 908, 909], "remaind": [83, 259, 700, 701, 702, 703], "repeat": [84, 260, 977, 978, 979, 980], "reshap": [85, 261, 981, 982, 983, 984], "roll": [86, 262, 352, 985, 986, 987, 988], "round": [87, 263, 704, 705, 706, 707], "sign": [88, 264, 708, 709, 710, 711], "sin": [89, 265, 712, 713, 714, 715], "sinh": [90, 266, 716, 717, 718, 719], "solv": [91, 911, 912, 913], "sort": [92, 150, 267, 336, 1060, 1066, 1067, 1068, 1069], "sparse_cross_entropi": [93, 268, 946, 947, 948, 949], "sqrt": [94, 269, 720, 721, 722, 723], "squar": [95, 270, 724, 725, 726, 727], "squeez": [96, 271, 991, 992, 993, 994], "stack": [97, 272, 995, 996, 997, 998], "std": [98, 296, 1092, 1093, 1094, 1095], "subtract": [99, 297, 728, 730, 731, 732], "sum": [100, 298, 1096, 1097, 1098], "svd": [101, 914, 915], "svdval": [102, 916, 917, 918, 919], "swapax": [103, 299, 999, 1000, 1001, 1002], "tan": [104, 300, 352, 733, 735, 736], "tanh": [105, 301, 400, 738, 740, 741], "tensordot": [106, 920, 921, 922], "tile": [107, 302, 1003, 1004, 1005, 1006], "trace": [108, 923, 924, 925], "trunc": [109, 303, 743, 744, 745, 746], "var": [110, 304, 1100, 1101, 1102, 1103], "vecdot": [111, 926, 927, 928], "vector_norm": [112, 929, 930, 931], "vector_to_skew_symmetric_matrix": [113, 932, 933, 934], "zero_pad": [114, 305, 1007, 1008, 1009, 1010], "convers": 115, "args_to_ivi": 116, "args_to_n": 117, "to_ivi": 118, "to_n": 119, "creation": [120, 306, 404], "arraywithcr": 121, "data": [122, 308, 354, 360, 368, 382, 423, 1055, 1056, 1057, 1059], "type": [122, 308, 355, 360, 382, 423], "arraywithdatatyp": 123, "devic": [124, 310, 361, 363, 460], "arraywithdevic": 125, "elementwis": [126, 312, 510], "arraywithelementwis": 127, "gener": [128, 314, 354, 747], "arraywithgener": 129, "gradient": [130, 316, 821], "arraywithgradi": 131, "imag": [132, 318], "arraywithimag": 133, "layer": [134, 320, 852, 1134], "arraywithlay": 135, "linear": [136, 322, 861, 865, 1144], "algebra": [136, 322, 865], "arraywithlinearalgebra": 137, "loss": [138, 324, 935], "arraywithloss": 139, "manipul": [140, 326, 951], "arraywithmanipul": 141, "norm": [142, 328, 1033, 1148], "arraywithnorm": 143, "random": [144, 330, 1038], "arraywithrandom": 145, "search": [146, 332, 1050], "arraywithsearch": 147, "set": [148, 334, 345, 356, 1055], "arraywithset": 149, "arraywithsort": 151, "statist": [152, 338, 1071], "arraywithstatist": 153, "util": [154, 340, 1104], "arraywithutil": 155, "wrap": [156, 342, 357], "add_ivy_array_instance_method": 157, "backend": [158, 350, 356, 365, 382], "handler": [158, 365], "choose_random_backend": 160, "clear_backend_stack": 161, "current_backend": 162, "get_backend": 163, "set_backend": 164, "try_import_ivy_jax": 165, "try_import_ivy_mxnet": 166, "try_import_ivy_numpi": 167, "try_import_ivy_tf": 168, "try_import_ivy_torch": 169, "unset_backend": 170, "background": [171, 1113], "ml": 172, "explos": 172, "standard": 173, "skeptic": 173, "complimentari": 173, "vs": [173, 382], "competit": 173, "do": 173, "work": [173, 348], "The": [173, 346, 367, 382], "api": [173, 347, 350, 353, 359, 365, 367, 369, 370], "why": 174, "unifi": [174, 367], "No": [174, 345], "more": 174, "re": 174, "implement": 174, "infinit": 174, "shelf": 174, "life": 174, "containerwithactiv": 176, "base": 177, "containerbas": 178, "contain": [179, 180, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 359, 368, 434, 436, 513, 517, 521, 525, 527, 530, 534, 538, 542, 546, 550, 554, 558, 562, 566, 570, 574, 578, 582, 586, 588, 591, 595, 599, 603, 607, 611, 615, 619, 623, 627, 631, 635, 639, 643, 647, 651, 655, 659, 663, 667, 671, 675, 681, 683, 686, 690, 694, 698, 702, 706, 710, 714, 718, 722, 726, 729, 731, 734, 736, 739, 741, 745, 750, 752, 761, 778, 780, 825, 827, 830, 832, 835, 837, 839, 841, 843, 845, 889, 938, 940, 943, 945, 948, 950, 954, 956, 959, 963, 967, 971, 975, 979, 983, 987, 989, 993, 997, 1001, 1005, 1009, 1036, 1042, 1045, 1047, 1063, 1065, 1068, 1070, 1074, 1078, 1082, 1086, 1090, 1094, 1098, 1102, 1107, 1111], "multidevcontain": 181, "adam_upd": [186, 824, 825, 826], "at_dev": [194, 195], "clip_vector_norm": [209, 760, 761, 762], "gradient_descent_upd": [226, 829, 830, 831], "lamb_upd": [232, 834, 835, 836], "lars_upd": [233, 838, 839, 840], "optimizer_upd": [253, 842, 843, 844], "random_uniform": [258, 1044, 1045, 1046], "static_adam_upd": [273, 827], "static_add": [274, 527], "static_all_equ": [275, 752], "static_argsort": [276, 1065], "static_binary_cross_entropi": [277, 940], "static_can_cast": [278, 436], "static_clip": [279, 956], "static_cross_entropi": [280, 945], "static_divid": [281, 588], "static_gather_nd": [282, 780], "static_gradient_descent_upd": [283, 832], "static_lamb_upd": [284, 837], "static_lars_upd": [285, 841], "static_multipli": [286, 683], "static_optimizer_upd": [287, 845], "static_randint": [288, 1042], "static_random_uniform": [289, 1047], "static_rol": [290, 989], "static_sort": [291, 1070], "static_sparse_cross_entropi": [292, 950], "static_subtract": [293, 729], "static_tan": [294, 734], "static_tanh": [295, 739], "containerwithcr": 307, "containerwithdatatyp": 309, "containerwithdevic": 311, "containerwithelementwis": 313, "containerwithgener": 315, "containerwithgradi": 317, "containerwithimag": 319, "containerwithlay": 321, "containerwithlinearalgebra": 323, "containerwithloss": 325, "containerwithmanipul": 327, "containerwithnorm": 329, "containerwithrandom": 331, "containerwithsearch": 333, "containerwithset": 335, "containerwithsort": 337, "containerwithstatist": 339, "containerwithutil": 341, "add_ivy_container_instance_method": 343, "contribut": [344, 1113], "up": 345, "clone": 345, "ivi": [345, 350, 352, 354, 358, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 381], "pycharm": 345, "virtual": 345, "environ": 345, "docker": [345, 346, 348], "us": [345, 348, 368], "miniconda": [345, 348], "venv": [345, 348], "interpret": 345, "window": 345, "maco": 345, "ubuntu": 345, "github": 345, "codespac": 345, "pre": 345, "commit": [345, 346], "basic": 346, "get": 346, "help": 346, "todo": 346, "list": 346, "issu": 346, "manag": 346, "your": 346, "fork": 346, "who": 346, "To": 346, "ask": 346, "With": 346, "command": 346, "line": 346, "browser": 346, "pull": 346, "request": 346, "small": 346, "often": 346, "run": 346, "test": [346, 353, 354], "local": 346, "open": 347, "task": 347, "function": [347, 355, 357, 359, 360, 361, 363, 365, 370, 382, 435, 514, 518, 522, 526, 531, 535, 539, 543, 547, 551, 555, 559, 563, 567, 571, 575, 579, 583, 587, 592, 596, 600, 604, 608, 612, 616, 620, 624, 628, 632, 636, 640, 644, 648, 652, 656, 660, 664, 668, 672, 676, 682, 687, 691, 695, 699, 703, 707, 711, 715, 719, 723, 727, 732, 737, 742, 746, 751, 762, 779, 826, 831, 836, 840, 844, 868, 871, 874, 877, 880, 883, 886, 890, 893, 897, 900, 903, 906, 909, 913, 916, 919, 922, 925, 928, 931, 934, 939, 944, 949, 955, 960, 964, 968, 972, 976, 980, 984, 988, 994, 998, 1002, 1006, 1010, 1037, 1041, 1046, 1064, 1069, 1075, 1079, 1083, 1087, 1091, 1095, 1099, 1103, 1108, 1112], "format": 347, "frontend": [347, 370], "build": [348, 365], "doc": 348, "dockerless": 348, "document": 348, "pipelin": [348, 382], "make_doc": 348, "sh": 348, "entrypoint": 348, "_make_doc": 348, "generate_src_rst_fil": 348, "py": 348, "sphinx": 348, "correct_built_html_fil": 348, "remove_fil": 348, "deep": 349, "dive": 349, "navig": 350, "code": 350, "categor": 350, "submodul": 350, "design": [350, 364, 1113], "docstr": [351, 352], "exampl": [352, 363], "hypothesi": 354, "self": 354, "consist": 354, "explicit": 354, "test_array_funct": 354, "primari": 355, "composit": 355, "mix": 355, "standalon": 355, "nestabl": [355, 359, 363], "conveni": 355, "nativ": 358, "handl": 358, "instanc": [359, 367], "static": 359, "special": 359, "modul": [360, 361, 369, 1146, 1147], "argument": [360, 361, 362, 363], "other": [360, 361], "inplac": 362, "updat": 362, "out": [362, 363], "copi": 362, "dtype": [363, 441], "number": 363, "oper": [363, 367, 382], "integ": 363, "sequenc": 363, "block": 365, "framework": [365, 366], "graph": [365, 370], "compil": [365, 370, 401, 402], "class": 367, "monkei": 367, "patch": 367, "construct": 368, "represent": 368, "recurs": 368, "built": 368, "ins": 368, "access": 368, "save": 368, "load": 368, "comparison": 368, "custom": [368, 382], "case": 368, "compartment": 368, "configur": 368, "network": [368, 370], "weight": 368, "state": [369, 382], "initi": [369, 1125], "optim": [369, 1150, 1154], "transpil": 370, "role": 370, "convert": [370, 1123], "model": [370, 377, 382], "builder": 372, "ecosystem": 373, "gym": [374, 381], "mech": 375, "memori": [376, 381], "robot": [378, 381], "vision": [379, 381], "extens": [380, 1113], "appli": 381, "librari": 381, "mechan": 381, "faq": 382, "maintain": 382, "version": 382, "dynam": 382, "size": 382, "shape": [382, 809, 1055, 1056, 1057, 1059], "check": 382, "control": 382, "flow": 382, "auto": 382, "differenti": 382, "replica": 382, "parallel": 382, "support": 382, "altern": 382, "structur": 382, "func": 383, "wrapper": 383, "handle_nest": 384, "handle_out_argu": 385, "infer_devic": 386, "infer_dtyp": 387, "inputs_to_ivy_arrai": 388, "inputs_to_native_arrai": 389, "outputs_to_ivy_arrai": 390, "to_native_arrays_and_back": 391, "gelu": [394, 1122], "leaky_relu": 395, "relu": 396, "sigmoid": 397, "softmax": 398, "softplu": 399, "constant": 403, "note": [404, 410], "arang": 405, "asarrai": 406, "empti": 407, "empty_lik": 408, "ey": 409, "from_dlpack": 410, "full": 411, "full_lik": 412, "linspac": 413, "logspac": 414, "meshgrid": 415, "native_arrai": 416, "ones": 417, "ones_lik": 418, "tril": 419, "triu": 420, "zero": [421, 1133], "zeros_lik": 422, "as_ivy_dtyp": 427, "as_native_dtyp": 428, "astyp": 429, "broadcast_arrai": 430, "broadcast_to": 431, "closest_valid_dtyp": 437, "default_dtyp": 438, "default_float_dtyp": 439, "default_int_dtyp": 440, "dtype_bit": 442, "finfo": 443, "function_supported_dtyp": 444, "function_unsupported_dtyp": 445, "iinfo": 446, "invalid_dtyp": 447, "is_float_dtyp": 448, "is_int_dtyp": 449, "promote_typ": 450, "result_typ": 451, "set_default_dtyp": 452, "set_default_float_dtyp": 453, "set_default_int_dtyp": 454, "type_promote_arrai": 455, "unset_default_dtyp": 456, "unset_default_float_dtyp": 457, "unset_default_int_dtyp": 458, "valid_dtyp": 459, "devcloneditem": 462, "devclonedit": 463, "devclonednest": 464, "devdistitem": 465, "devdistit": 466, "devdistnest": 467, "devmapp": 469, "devmappermultiproc": 470, "multidevitem": 472, "multidevit": 473, "multidevnest": 474, "profil": 475, "as_ivy_dev": 476, "as_native_dev": 477, "clear_mem_on_dev": 478, "default_devic": 479, "dev": 480, "dev_clon": 481, "dev_clone_arrai": 482, "dev_clone_it": 483, "dev_clone_nest": 484, "dev_dist": 485, "dev_dist_arrai": 486, "dev_dist_it": 487, "dev_dist_nest": 488, "dev_unifi": 489, "dev_unify_arrai": 490, "dev_unify_it": 491, "dev_unify_nest": 492, "dev_util": 493, "get_all_ivy_arrays_on_dev": 494, "gpu_is_avail": 495, "num_cpu_cor": 496, "num_gpu": 497, "num_ivy_arrays_on_dev": 498, "percent_used_mem_on_dev": 499, "print_all_ivy_arrays_on_dev": 500, "set_default_devic": 501, "set_split_factor": 502, "split_factor": 503, "split_func_cal": 504, "to_devic": 505, "total_mem_on_dev": 506, "tpu_is_avail": 507, "unset_default_devic": 508, "used_mem_on_dev": 509, "maximum": 677, "minimum": 678, "arg_info": 753, "arg_nam": 754, "array_equ": 755, "arrays_equ": 756, "assert_supports_inplac": 757, "cache_fn": 758, "clip_matrix_norm": 759, "container_typ": 763, "copy_arrai": 764, "cumprod": 765, "cumsum": 766, "current_backend_str": 767, "default": 768, "einops_rearrang": 769, "einops_reduc": 770, "einops_repeat": 771, "exist": 772, "floormod": 773, "fourier_encod": 774, "gather": 775, "get_all_arrays_in_memori": 781, "get_min_bas": 782, "get_min_denomin": 783, "get_num_dim": 784, "get_referrers_recurs": 785, "has_nan": 786, "indices_wher": 787, "inplace_arrays_support": 788, "inplace_decr": 789, "inplace_incr": 790, "inplace_upd": 791, "inplace_variables_support": 792, "is_arrai": 793, "is_ivy_arrai": 794, "is_ivy_contain": 795, "is_native_arrai": 796, "match_kwarg": 797, "multiprocess": 798, "num_arrays_in_memori": 799, "one_hot": 800, "print_all_arrays_in_memori": 801, "queue_timeout": 802, "scatter_flat": 803, "scatter_nd": 804, "set_min_bas": 805, "set_min_denomin": 806, "set_queue_timeout": 807, "set_tmp_dir": 808, "shape_to_tupl": 810, "stable_divid": 811, "stable_pow": 812, "supports_inplac": 813, "tmp_dir": 814, "to_list": 815, "to_numpi": 816, "to_scalar": 817, "try_else_non": 818, "unstack": 819, "value_is_nan": 820, "adam_step": 823, "execute_with_gradi": 828, "is_vari": 833, "set_with_grad": 846, "stop_gradi": 847, "unset_with_grad": 848, "variabl": 849, "variable_data": 850, "with_grad": 851, "conv1d": [853, 1135], "conv1d_transpos": 854, "conv2d": [855, 1137], "conv2d_transpos": 856, "conv3d": [857, 1139], "conv3d_transpos": 858, "depthwise_conv2d": 859, "dropout": [860, 1142], "lstm_updat": 862, "multi_head_attent": 863, "scaled_dot_product_attent": 864, "slogdet": [874, 910], "matrix_pow": 894, "split": 990, "meta": 1011, "fomaml_step": 1012, "maml_step": 1013, "reptile_step": 1014, "nest": 1015, "all_nested_indic": 1016, "copy_nest": 1017, "index_nest": 1018, "insert_into_nest_at_index": 1019, "insert_into_nest_at_indic": 1020, "map": 1021, "map_nest_at_index": 1022, "map_nest_at_indic": 1023, "multi_index_nest": 1024, "nested_ani": 1025, "nested_indices_wher": 1026, "nested_map": 1027, "nested_multi_map": 1028, "prune_nest_at_index": 1029, "prune_nest_at_indic": 1030, "set_nest_at_index": 1031, "set_nest_at_indic": 1032, "multinomi": 1039, "randint": [1040, 1041], "random_norm": 1043, "seed": 1048, "shuffl": 1049, "argmax": 1051, "argmin": 1052, "nonzero": 1053, "where": 1054, "depend": [1055, 1056, 1057, 1059], "output": [1055, 1056, 1057, 1059], "unique_al": 1056, "unique_count": 1057, "unique_invers": 1058, "unique_valu": 1059, "content": 1113, "overview": 1113, "quick": 1113, "start": 1113, "roadmap": [1113, 1119], "citat": 1113, "inspect": 1116, "add_array_spec": 1117, "fn_array_spec": 1118, "geglu": 1121, "to_ivy_modul": 1124, "firstlayersiren": 1127, "glorotuniform": 1128, "Ones": 1130, "siren": 1131, "conv1dtranspos": 1136, "conv2dtranspos": 1138, "conv3dtranspos": 1140, "depthwiseconv2d": 1141, "lstm": 1143, "multiheadattent": 1145, "layernorm": 1149, "adam": 1151, "lamb": 1152, "lar": 1153, "sgd": 1155, "sequenti": [1156, 1157], "verbos": 1159, "cprint": 1160}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 6, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.viewcode": 1, "sphinx": 56}})