Search.setIndex({"docnames": ["array/activations", "array/activations/ArrayWithActivations", "array/conversions", "array/conversions/args_to_ivy", "array/conversions/args_to_native", "array/conversions/to_ivy", "array/conversions/to_native", "array/creation", "array/creation/ArrayWithCreation", "array/data_types", "array/data_types/ArrayWithDataTypes", "array/device", "array/device/ArrayWithDevice", "array/elementwise", "array/elementwise/ArrayWithElementwise", "array/general", "array/general/ArrayWithGeneral", "array/gradients", "array/gradients/ArrayWithGradients", "array/image", "array/image/ArrayWithImage", "array/layers", "array/layers/ArrayWithLayers", "array/linear_algebra", "array/linear_algebra/ArrayWithLinearAlgebra", "array/losses", "array/losses/ArrayWithLosses", "array/manipulation", "array/manipulation/ArrayWithManipulation", "array/norms", "array/norms/ArrayWithNorms", "array/random", "array/random/ArrayWithRandom", "array/searching", "array/searching/ArrayWithSearching", "array/set", "array/set/ArrayWithSet", "array/sorting", "array/sorting/ArrayWithSorting", "array/statistical", "array/statistical/ArrayWithStatistical", "array/utility", "array/utility/ArrayWithUtility", "array/wrapping", "array/wrapping/add_ivy_array_instance_methods", "backend_handler", "backend_handler/ContextManager:\n    def __init__", "backend_handler/choose_random_backend", "backend_handler/clear_backend_stack", "backend_handler/current_backend", "backend_handler/get_backend", "backend_handler/set_backend", "backend_handler/try_import_ivy_jax", "backend_handler/try_import_ivy_mxnet", "backend_handler/try_import_ivy_numpy", "backend_handler/try_import_ivy_tf", "backend_handler/try_import_ivy_torch", "backend_handler/unset_backend", "background", "background/ml_explosion", "background/standardization", "background/why_unify", "container/activations", "container/activations/ContainerWithActivations", "container/base", "container/base/ContainerBase", "container/container", "container/container/Container", "container/container/MultiDevContainer", "container/creation", "container/creation/ContainerWithCreation", "container/data_types", "container/data_types/ContainerWithDataTypes", "container/device", "container/device/ContainerWithDevice", "container/elementwise", "container/elementwise/ContainerWithElementwise", "container/general", "container/general/ContainerWithGeneral", "container/gradients", "container/gradients/ContainerWithGradients", "container/image", "container/image/ContainerWithImage", "container/layers", "container/layers/ContainerWithLayers", "container/linear_algebra", "container/linear_algebra/ContainerWithLinearAlgebra", "container/losses", "container/losses/ContainerWithLosses", "container/manipulation", "container/manipulation/ContainerWithManipulation", "container/norms", "container/norms/ContainerWithNorms", "container/random", "container/random/ContainerWithRandom", "container/searching", "container/searching/ContainerWithSearching", "container/set", "container/set/ContainerWithSet", "container/sorting", "container/sorting/ContainerWithSorting", "container/statistical", "container/statistical/ContainerWithStatistical", "container/utility", "container/utility/ContainerWithUtility", "container/wrapping", "container/wrapping/add_ivy_container_instance_methods", "contributing", "contributing/0_setting_up", "contributing/1_the_basics", "contributing/4_open_tasks", "contributing/building_the_docs", "deep_dive", "deep_dive/0_navigating_the_code", "deep_dive/10_docstrings", "deep_dive/11_docstring_examples", "deep_dive/12_array_api_tests", "deep_dive/13_ivy_tests", "deep_dive/1_function_types", "deep_dive/2_backend_setting", "deep_dive/3_function_wrapping", "deep_dive/4_arrays", "deep_dive/5_containers", "deep_dive/6_data_types", "deep_dive/7_devices", "deep_dive/8_inplace_updates", "deep_dive/9_function_arguments", "design", "design/building_blocks", "design/ivy_as_a_framework", "design/ivy_as_a_framework/ivy_array", "design/ivy_as_a_framework/ivy_container", "design/ivy_as_a_framework/ivy_stateful_api", "design/ivy_as_a_transpiler", "docs/ivy", "docs/ivy_builder", "docs/ivy_ecosystem", "docs/ivy_gym", "docs/ivy_mech", "docs/ivy_memory", "docs/ivy_models", "docs/ivy_robot", "docs/ivy_vision", "extensions", "extensions/applied_libraries", "faq", "func_wrapper", "func_wrapper/handle_nestable", "func_wrapper/handle_out_argument", "func_wrapper/infer_device", "func_wrapper/infer_dtype", "func_wrapper/inputs_to_ivy_arrays", "func_wrapper/inputs_to_native_arrays", "func_wrapper/outputs_to_ivy_arrays", "func_wrapper/to_native_arrays_and_back", "functional/ivy", "functional/ivy/activations", "functional/ivy/activations/gelu", "functional/ivy/activations/leaky_relu", "functional/ivy/activations/relu", "functional/ivy/activations/sigmoid", "functional/ivy/activations/softmax", "functional/ivy/activations/softplus", "functional/ivy/activations/tanh", "functional/ivy/compilation", "functional/ivy/compilation/compile", "functional/ivy/constants", "functional/ivy/creation", "functional/ivy/creation/arange", "functional/ivy/creation/asarray", "functional/ivy/creation/empty", "functional/ivy/creation/empty_like", "functional/ivy/creation/eye", "functional/ivy/creation/from_dlpack", "functional/ivy/creation/full", "functional/ivy/creation/full_like", "functional/ivy/creation/linspace", "functional/ivy/creation/logspace", "functional/ivy/creation/meshgrid", "functional/ivy/creation/native_array", "functional/ivy/creation/ones", "functional/ivy/creation/ones_like", "functional/ivy/creation/tril", "functional/ivy/creation/triu", "functional/ivy/creation/zeros", "functional/ivy/creation/zeros_like", "functional/ivy/data_type", "functional/ivy/data_type/DefaultDtype:\n    \"\"\"\"\"\"\n\n    # noinspection PyShadowingNames\n    def __init__", "functional/ivy/data_type/DefaultFloatDtype:\n    \"\"\"\"\"\"\n\n    # noinspection PyShadowingNames\n    def __init__", "functional/ivy/data_type/DefaultIntDtype:\n    \"\"\"\"\"\"\n\n    # noinspection PyShadowingNames\n    def __init__", "functional/ivy/data_type/as_ivy_dtype", "functional/ivy/data_type/as_native_dtype", "functional/ivy/data_type/astype", "functional/ivy/data_type/broadcast_arrays", "functional/ivy/data_type/broadcast_to", "functional/ivy/data_type/can_cast", "functional/ivy/data_type/closest_valid_dtype", "functional/ivy/data_type/default_dtype", "functional/ivy/data_type/default_float_dtype", "functional/ivy/data_type/default_int_dtype", "functional/ivy/data_type/dtype", "functional/ivy/data_type/dtype_bits", "functional/ivy/data_type/finfo", "functional/ivy/data_type/function_supported_dtypes", "functional/ivy/data_type/function_unsupported_dtypes", "functional/ivy/data_type/iinfo", "functional/ivy/data_type/invalid_dtype", "functional/ivy/data_type/is_float_dtype", "functional/ivy/data_type/is_int_dtype", "functional/ivy/data_type/promote_types", "functional/ivy/data_type/result_type", "functional/ivy/data_type/set_default_dtype", "functional/ivy/data_type/set_default_float_dtype", "functional/ivy/data_type/set_default_int_dtype", "functional/ivy/data_type/type_promote_arrays", "functional/ivy/data_type/unset_default_dtype", "functional/ivy/data_type/unset_default_float_dtype", "functional/ivy/data_type/unset_default_int_dtype", "functional/ivy/data_type/valid_dtype", "functional/ivy/device", "functional/ivy/device/DefaultDevice:\n    \"\"\"\"\"\"\n\n    # noinspection PyShadowingNames\n    def __init__", "functional/ivy/device/DevClonedItem", "functional/ivy/device/DevClonedIter", "functional/ivy/device/DevClonedNest", "functional/ivy/device/DevDistItem", "functional/ivy/device/DevDistIter", "functional/ivy/device/DevDistNest", "functional/ivy/device/DevManager:\n    \"\"\"\"\"\"\n\n    def __init__", "functional/ivy/device/DevMapper", "functional/ivy/device/DevMapperMultiProc", "functional/ivy/device/MultiDev:\n    def __init__", "functional/ivy/device/MultiDevItem", "functional/ivy/device/MultiDevIter", "functional/ivy/device/MultiDevNest", "functional/ivy/device/Profiler", "functional/ivy/device/as_ivy_dev", "functional/ivy/device/as_native_dev", "functional/ivy/device/clear_mem_on_dev", "functional/ivy/device/default_device", "functional/ivy/device/dev", "functional/ivy/device/dev_clone", "functional/ivy/device/dev_clone_array", "functional/ivy/device/dev_clone_iter", "functional/ivy/device/dev_clone_nest", "functional/ivy/device/dev_dist", "functional/ivy/device/dev_dist_array", "functional/ivy/device/dev_dist_iter", "functional/ivy/device/dev_dist_nest", "functional/ivy/device/dev_unify", "functional/ivy/device/dev_unify_array", "functional/ivy/device/dev_unify_iter", "functional/ivy/device/dev_unify_nest", "functional/ivy/device/dev_util", "functional/ivy/device/get_all_ivy_arrays_on_dev", "functional/ivy/device/gpu_is_available", "functional/ivy/device/num_cpu_cores", "functional/ivy/device/num_gpus", "functional/ivy/device/num_ivy_arrays_on_dev", "functional/ivy/device/percent_used_mem_on_dev", "functional/ivy/device/print_all_ivy_arrays_on_dev", "functional/ivy/device/set_default_device", "functional/ivy/device/set_split_factor", "functional/ivy/device/split_factor", "functional/ivy/device/split_func_call", "functional/ivy/device/to_device", "functional/ivy/device/total_mem_on_dev", "functional/ivy/device/tpu_is_available", "functional/ivy/device/unset_default_device", "functional/ivy/device/used_mem_on_dev", "functional/ivy/elementwise", "functional/ivy/elementwise/abs", "functional/ivy/elementwise/abs/abs_array", "functional/ivy/elementwise/abs/abs_functional", "functional/ivy/elementwise/acos", "functional/ivy/elementwise/acos/acos_array", "functional/ivy/elementwise/acos/acos_functional", "functional/ivy/elementwise/acosh", "functional/ivy/elementwise/acosh/acosh_array", "functional/ivy/elementwise/acosh/acosh_functional", "functional/ivy/elementwise/add", "functional/ivy/elementwise/add/add_array", "functional/ivy/elementwise/add/add_functional", "functional/ivy/elementwise/asin", "functional/ivy/elementwise/asin/asin_array", "functional/ivy/elementwise/asin/asin_functional", "functional/ivy/elementwise/asinh", "functional/ivy/elementwise/asinh/asinh_array", "functional/ivy/elementwise/asinh/asinh_functional", "functional/ivy/elementwise/atan", "functional/ivy/elementwise/atan/atan_array", "functional/ivy/elementwise/atan/atan_functional", "functional/ivy/elementwise/atan2", "functional/ivy/elementwise/atan2/atan2_array", "functional/ivy/elementwise/atan2/atan2_functional", "functional/ivy/elementwise/atanh", "functional/ivy/elementwise/atanh/atanh_array", "functional/ivy/elementwise/atanh/atanh_functional", "functional/ivy/elementwise/bitwise_and", "functional/ivy/elementwise/bitwise_and/bitwise_and_array", "functional/ivy/elementwise/bitwise_and/bitwise_and_functional", "functional/ivy/elementwise/bitwise_invert", "functional/ivy/elementwise/bitwise_invert/bitwise_invert_array", "functional/ivy/elementwise/bitwise_invert/bitwise_invert_functional", "functional/ivy/elementwise/bitwise_left_shift", "functional/ivy/elementwise/bitwise_left_shift/bitwise_left_shift_array", "functional/ivy/elementwise/bitwise_left_shift/bitwise_left_shift_functional", "functional/ivy/elementwise/bitwise_or", "functional/ivy/elementwise/bitwise_or/bitwise_or_array", "functional/ivy/elementwise/bitwise_or/bitwise_or_functional", "functional/ivy/elementwise/bitwise_right_shift", "functional/ivy/elementwise/bitwise_right_shift/bitwise_right_shift_array", "functional/ivy/elementwise/bitwise_right_shift/bitwise_right_shift_functional", "functional/ivy/elementwise/bitwise_xor", "functional/ivy/elementwise/bitwise_xor/bitwise_xor_array", "functional/ivy/elementwise/bitwise_xor/bitwise_xor_functional", "functional/ivy/elementwise/ceil", "functional/ivy/elementwise/ceil/ceil_array", "functional/ivy/elementwise/ceil/ceil_functional", "functional/ivy/elementwise/cos", "functional/ivy/elementwise/cos/cos_array", "functional/ivy/elementwise/cos/cos_functional", "functional/ivy/elementwise/cosh", "functional/ivy/elementwise/cosh/cosh_array", "functional/ivy/elementwise/cosh/cosh_functional", "functional/ivy/elementwise/divide", "functional/ivy/elementwise/divide/divide_array", "functional/ivy/elementwise/divide/divide_functional", "functional/ivy/elementwise/equal", "functional/ivy/elementwise/equal/equal_array", "functional/ivy/elementwise/equal/equal_functional", "functional/ivy/elementwise/erf", "functional/ivy/elementwise/erf/erf_array", "functional/ivy/elementwise/erf/erf_container", "functional/ivy/elementwise/erf/erf_functional", "functional/ivy/elementwise/exp", "functional/ivy/elementwise/exp/exp_array", "functional/ivy/elementwise/exp/exp_functional", "functional/ivy/elementwise/expm1", "functional/ivy/elementwise/expm1/expm1_array", "functional/ivy/elementwise/expm1/expm1_functional", "functional/ivy/elementwise/floor", "functional/ivy/elementwise/floor/floor_array", "functional/ivy/elementwise/floor/floor_functional", "functional/ivy/elementwise/floor_divide", "functional/ivy/elementwise/floor_divide/floor_divide_array", "functional/ivy/elementwise/floor_divide/floor_divide_functional", "functional/ivy/elementwise/greater", "functional/ivy/elementwise/greater/greater_array", "functional/ivy/elementwise/greater/greater_functional", "functional/ivy/elementwise/greater_equal", "functional/ivy/elementwise/greater_equal/greater_equal_array", "functional/ivy/elementwise/greater_equal/greater_equal_functional", "functional/ivy/elementwise/isfinite", "functional/ivy/elementwise/isfinite/isfinite_array", "functional/ivy/elementwise/isfinite/isfinite_functional", "functional/ivy/elementwise/isinf", "functional/ivy/elementwise/isinf/isinf_array", "functional/ivy/elementwise/isinf/isinf_functional", "functional/ivy/elementwise/isnan", "functional/ivy/elementwise/isnan/isnan_array", "functional/ivy/elementwise/isnan/isnan_functional", "functional/ivy/elementwise/less", "functional/ivy/elementwise/less/less_array", "functional/ivy/elementwise/less/less_functional", "functional/ivy/elementwise/less_equal", "functional/ivy/elementwise/less_equal/less_equal_array", "functional/ivy/elementwise/less_equal/less_equal_functional", "functional/ivy/elementwise/log", "functional/ivy/elementwise/log/log_array", "functional/ivy/elementwise/log/log_functional", "functional/ivy/elementwise/log10", "functional/ivy/elementwise/log10/log10_array", "functional/ivy/elementwise/log10/log10_functional", "functional/ivy/elementwise/log1p", "functional/ivy/elementwise/log1p/log1p_array", "functional/ivy/elementwise/log1p/log1p_functional", "functional/ivy/elementwise/log2", "functional/ivy/elementwise/log2/log2_array", "functional/ivy/elementwise/log2/log2_functional", "functional/ivy/elementwise/logaddexp", "functional/ivy/elementwise/logaddexp/logaddexp_array", "functional/ivy/elementwise/logaddexp/logaddexp_functional", "functional/ivy/elementwise/logical_and", "functional/ivy/elementwise/logical_and/logical_and_array", "functional/ivy/elementwise/logical_and/logical_and_functional", "functional/ivy/elementwise/logical_not", "functional/ivy/elementwise/logical_not/logical_not_array", "functional/ivy/elementwise/logical_not/logical_not_functional", "functional/ivy/elementwise/logical_or", "functional/ivy/elementwise/logical_or/logical_or_array", "functional/ivy/elementwise/logical_or/logical_or_functional", "functional/ivy/elementwise/logical_xor", "functional/ivy/elementwise/logical_xor/logical_xor_array", "functional/ivy/elementwise/logical_xor/logical_xor_functional", "functional/ivy/elementwise/maximum", "functional/ivy/elementwise/minimum", "functional/ivy/elementwise/multiply", "functional/ivy/elementwise/multiply/multiply_array", "functional/ivy/elementwise/multiply/multiply_functional", "functional/ivy/elementwise/negative", "functional/ivy/elementwise/negative/negative_array", "functional/ivy/elementwise/negative/negative_functional", "functional/ivy/elementwise/not_equal", "functional/ivy/elementwise/not_equal/not_equal_array", "functional/ivy/elementwise/not_equal/not_equal_functional", "functional/ivy/elementwise/positive", "functional/ivy/elementwise/positive/positive_array", "functional/ivy/elementwise/positive/positive_functional", "functional/ivy/elementwise/pow", "functional/ivy/elementwise/pow/pow_array", "functional/ivy/elementwise/pow/pow_functional", "functional/ivy/elementwise/remainder", "functional/ivy/elementwise/remainder/remainder_array", "functional/ivy/elementwise/remainder/remainder_functional", "functional/ivy/elementwise/round", "functional/ivy/elementwise/round/round_array", "functional/ivy/elementwise/round/round_functional", "functional/ivy/elementwise/sign", "functional/ivy/elementwise/sign/sign_array", "functional/ivy/elementwise/sign/sign_functional", "functional/ivy/elementwise/sin", "functional/ivy/elementwise/sin/sin_array", "functional/ivy/elementwise/sin/sin_container", "functional/ivy/elementwise/sin/sin_functional", "functional/ivy/elementwise/sinh", "functional/ivy/elementwise/sinh/sinh_array", "functional/ivy/elementwise/sinh/sinh_functional", "functional/ivy/elementwise/sqrt", "functional/ivy/elementwise/sqrt/sqrt_array", "functional/ivy/elementwise/sqrt/sqrt_functional", "functional/ivy/elementwise/square", "functional/ivy/elementwise/square/square_array", "functional/ivy/elementwise/square/square_functional", "functional/ivy/elementwise/subtract", "functional/ivy/elementwise/subtract/subtract_array", "functional/ivy/elementwise/subtract/subtract_functional", "functional/ivy/elementwise/tan", "functional/ivy/elementwise/tan/tan_array", "functional/ivy/elementwise/tan/tan_functional", "functional/ivy/elementwise/tanh", "functional/ivy/elementwise/tanh/tanh_array", "functional/ivy/elementwise/tanh/tanh_functional", "functional/ivy/elementwise/trunc", "functional/ivy/elementwise/trunc/trunc_array", "functional/ivy/elementwise/trunc/trunc_functional", "functional/ivy/general", "functional/ivy/general/all_equal", "functional/ivy/general/all_equal/all_equal_array", "functional/ivy/general/all_equal/all_equal_functional", "functional/ivy/general/arg_info", "functional/ivy/general/arg_names", "functional/ivy/general/array_equal", "functional/ivy/general/arrays_equal", "functional/ivy/general/assert_supports_inplace", "functional/ivy/general/cache_fn", "functional/ivy/general/clip_matrix_norm", "functional/ivy/general/clip_vector_norm", "functional/ivy/general/container_types", "functional/ivy/general/copy_array", "functional/ivy/general/cumprod", "functional/ivy/general/cumsum", "functional/ivy/general/current_backend_str", "functional/ivy/general/default", "functional/ivy/general/einops_rearrange", "functional/ivy/general/einops_reduce", "functional/ivy/general/einops_repeat", "functional/ivy/general/exists", "functional/ivy/general/floormod", "functional/ivy/general/fourier_encode", "functional/ivy/general/gather", "functional/ivy/general/gather_nd", "functional/ivy/general/get_all_arrays_in_memory", "functional/ivy/general/get_min_base", "functional/ivy/general/get_min_denominator", "functional/ivy/general/get_num_dims", "functional/ivy/general/get_referrers_recursive", "functional/ivy/general/has_nans", "functional/ivy/general/indices_where", "functional/ivy/general/inplace_arrays_supported", "functional/ivy/general/inplace_decrement", "functional/ivy/general/inplace_increment", "functional/ivy/general/inplace_update", "functional/ivy/general/inplace_variables_supported", "functional/ivy/general/is_array", "functional/ivy/general/is_ivy_array", "functional/ivy/general/is_ivy_container", "functional/ivy/general/is_native_array", "functional/ivy/general/match_kwargs", "functional/ivy/general/multiprocessing", "functional/ivy/general/num_arrays_in_memory", "functional/ivy/general/one_hot", "functional/ivy/general/print_all_arrays_in_memory", "functional/ivy/general/queue_timeout", "functional/ivy/general/scatter_flat", "functional/ivy/general/scatter_nd", "functional/ivy/general/set_min_base", "functional/ivy/general/set_min_denominator", "functional/ivy/general/set_queue_timeout", "functional/ivy/general/set_tmp_dir", "functional/ivy/general/shape", "functional/ivy/general/shape_to_tuple", "functional/ivy/general/stable_divide", "functional/ivy/general/stable_pow", "functional/ivy/general/supports_inplace", "functional/ivy/general/tmp_dir", "functional/ivy/general/to_list", "functional/ivy/general/to_numpy", "functional/ivy/general/to_scalar", "functional/ivy/general/try_else_none", "functional/ivy/general/unstack", "functional/ivy/general/value_is_nan", "functional/ivy/gradients", "functional/ivy/gradients/GradientTracking:\n    \"\"\"\"\"\"\n\n    # noinspection PyShadowingNames\n    def __init__", "functional/ivy/gradients/adam_step", "functional/ivy/gradients/adam_update", "functional/ivy/gradients/execute_with_gradients", "functional/ivy/gradients/gradient_descent_update", "functional/ivy/gradients/is_variable", "functional/ivy/gradients/lamb_update", "functional/ivy/gradients/lars_update", "functional/ivy/gradients/optimizer_update", "functional/ivy/gradients/set_with_grads", "functional/ivy/gradients/stop_gradient", "functional/ivy/gradients/unset_with_grads", "functional/ivy/gradients/variable", "functional/ivy/gradients/variable_data", "functional/ivy/gradients/with_grads", "functional/ivy/layers", "functional/ivy/layers/conv1d", "functional/ivy/layers/conv1d_transpose", "functional/ivy/layers/conv2d", "functional/ivy/layers/conv2d_transpose", "functional/ivy/layers/conv3d", "functional/ivy/layers/conv3d_transpose", "functional/ivy/layers/depthwise_conv2d", "functional/ivy/layers/dropout", "functional/ivy/layers/linear", "functional/ivy/layers/lstm_update", "functional/ivy/layers/multi_head_attention", "functional/ivy/layers/scaled_dot_product_attention", "functional/ivy/linear_algebra", "functional/ivy/linear_algebra/cholesky", "functional/ivy/linear_algebra/cross", "functional/ivy/linear_algebra/det", "functional/ivy/linear_algebra/diagonal", "functional/ivy/linear_algebra/eigh", "functional/ivy/linear_algebra/eigvalsh", "functional/ivy/linear_algebra/inv", "functional/ivy/linear_algebra/matmul", "functional/ivy/linear_algebra/matmul/matmul_array", "functional/ivy/linear_algebra/matmul/matmul_functional", "functional/ivy/linear_algebra/matrix_norm", "functional/ivy/linear_algebra/matrix_power", "functional/ivy/linear_algebra/matrix_rank", "functional/ivy/linear_algebra/matrix_transpose", "functional/ivy/linear_algebra/outer", "functional/ivy/linear_algebra/pinv", "functional/ivy/linear_algebra/qr", "functional/ivy/linear_algebra/slogdet", "functional/ivy/linear_algebra/solve", "functional/ivy/linear_algebra/svd", "functional/ivy/linear_algebra/svdvals", "functional/ivy/linear_algebra/tensordot", "functional/ivy/linear_algebra/trace", "functional/ivy/linear_algebra/vecdot", "functional/ivy/linear_algebra/vector_norm", "functional/ivy/linear_algebra/vector_to_skew_symmetric_matrix", "functional/ivy/losses", "functional/ivy/losses/binary_cross_entropy", "functional/ivy/losses/binary_cross_entropy/binary_cross_entropy_array", "functional/ivy/losses/binary_cross_entropy/binary_cross_entropy_functional", "functional/ivy/losses/cross_entropy", "functional/ivy/losses/cross_entropy/cross_entropy_array", "functional/ivy/losses/cross_entropy/cross_entropy_functional", "functional/ivy/losses/sparse_cross_entropy", "functional/ivy/losses/sparse_cross_entropy/sparse_cross_entropy_array", "functional/ivy/losses/sparse_cross_entropy/sparse_cross_entropy_functional", "functional/ivy/manipulation", "functional/ivy/manipulation/clip", "functional/ivy/manipulation/clip/clip_array", "functional/ivy/manipulation/clip/clip_functional", "functional/ivy/manipulation/clip/static_clip_container", "functional/ivy/manipulation/concat", "functional/ivy/manipulation/concat/concat_array", "functional/ivy/manipulation/concat/concat_functional", "functional/ivy/manipulation/constant_pad", "functional/ivy/manipulation/constant_pad/constant_pad_array", "functional/ivy/manipulation/constant_pad/constant_pad_functional", "functional/ivy/manipulation/expand_dims", "functional/ivy/manipulation/expand_dims/expand_dims_array", "functional/ivy/manipulation/expand_dims/expand_dims_functional", "functional/ivy/manipulation/flip", "functional/ivy/manipulation/flip/flip_array", "functional/ivy/manipulation/flip/flip_functional", "functional/ivy/manipulation/permute_dims", "functional/ivy/manipulation/permute_dims/permute_dims_array", "functional/ivy/manipulation/permute_dims/permute_dims_functional", "functional/ivy/manipulation/repeat", "functional/ivy/manipulation/repeat/repeat_array", "functional/ivy/manipulation/repeat/repeat_functional", "functional/ivy/manipulation/reshape", "functional/ivy/manipulation/reshape/reshape_array", "functional/ivy/manipulation/reshape/reshape_functional", "functional/ivy/manipulation/roll", "functional/ivy/manipulation/roll/roll_array", "functional/ivy/manipulation/roll/roll_functional", "functional/ivy/manipulation/split", "functional/ivy/manipulation/squeeze", "functional/ivy/manipulation/squeeze/squeeze_array", "functional/ivy/manipulation/squeeze/squeeze_functional", "functional/ivy/manipulation/stack", "functional/ivy/manipulation/stack/stack_array", "functional/ivy/manipulation/stack/stack_functional", "functional/ivy/manipulation/swapaxes", "functional/ivy/manipulation/swapaxes/swapaxes_array", "functional/ivy/manipulation/swapaxes/swapaxes_functional", "functional/ivy/manipulation/tile", "functional/ivy/manipulation/tile/tile_array", "functional/ivy/manipulation/tile/tile_functional", "functional/ivy/manipulation/zero_pad", "functional/ivy/manipulation/zero_pad/zero_pad_array", "functional/ivy/manipulation/zero_pad/zero_pad_functional", "functional/ivy/meta", "functional/ivy/meta/fomaml_step", "functional/ivy/meta/maml_step", "functional/ivy/meta/reptile_step", "functional/ivy/nest", "functional/ivy/nest/all_nested_indices", "functional/ivy/nest/copy_nest", "functional/ivy/nest/index_nest", "functional/ivy/nest/insert_into_nest_at_index", "functional/ivy/nest/insert_into_nest_at_indices", "functional/ivy/nest/map", "functional/ivy/nest/map_nest_at_index", "functional/ivy/nest/map_nest_at_indices", "functional/ivy/nest/multi_index_nest", "functional/ivy/nest/nested_any", "functional/ivy/nest/nested_indices_where", "functional/ivy/nest/nested_map", "functional/ivy/nest/nested_multi_map", "functional/ivy/nest/prune_nest_at_index", "functional/ivy/nest/prune_nest_at_indices", "functional/ivy/nest/set_nest_at_index", "functional/ivy/nest/set_nest_at_indices", "functional/ivy/norms", "functional/ivy/norms/layer_norm", "functional/ivy/norms/layer_norm/layer_norm_array", "functional/ivy/norms/layer_norm/layer_norm_functional", "functional/ivy/random", "functional/ivy/random/multinomial", "functional/ivy/random/randint", "functional/ivy/random/random_normal", "functional/ivy/random/random_uniform", "functional/ivy/random/seed", "functional/ivy/random/shuffle", "functional/ivy/searching", "functional/ivy/searching/argmax", "functional/ivy/searching/argmin", "functional/ivy/searching/nonzero", "functional/ivy/searching/where", "functional/ivy/set", "functional/ivy/set/unique_all", "functional/ivy/set/unique_counts", "functional/ivy/set/unique_inverse", "functional/ivy/set/unique_values", "functional/ivy/sorting", "functional/ivy/sorting/argsort", "functional/ivy/sorting/argsort/argsort_array", "functional/ivy/sorting/argsort/argsort_functional", "functional/ivy/sorting/sort", "functional/ivy/sorting/sort/sort_array", "functional/ivy/sorting/sort/sort_functional", "functional/ivy/statistical", "functional/ivy/statistical/einsum", "functional/ivy/statistical/einsum/einsum_array", "functional/ivy/statistical/einsum/einsum_functional", "functional/ivy/statistical/max", "functional/ivy/statistical/max/max_array", "functional/ivy/statistical/max/max_functional", "functional/ivy/statistical/mean", "functional/ivy/statistical/mean/mean_array", "functional/ivy/statistical/mean/mean_functional", "functional/ivy/statistical/min", "functional/ivy/statistical/min/min_array", "functional/ivy/statistical/min/min_functional", "functional/ivy/statistical/prod", "functional/ivy/statistical/prod/prod_array", "functional/ivy/statistical/prod/prod_functional", "functional/ivy/statistical/std", "functional/ivy/statistical/std/std_array", "functional/ivy/statistical/std/std_functional", "functional/ivy/statistical/sum", "functional/ivy/statistical/sum/sum_array", "functional/ivy/statistical/sum/sum_functional", "functional/ivy/statistical/var", "functional/ivy/statistical/var/var_array", "functional/ivy/statistical/var/var_functional", "functional/ivy/utility", "functional/ivy/utility/all", "functional/ivy/utility/all/all_array", "functional/ivy/utility/all/all_functional", "functional/ivy/utility/any", "functional/ivy/utility/any/any_array", "functional/ivy/utility/any/any_functional", "index", "index_append", "index_prepend", "inspection", "inspection/add_array_specs", "inspection/fn_array_spec", "roadmap", "stateful/activations", "stateful/activations/GEGLU", "stateful/activations/GELU", "stateful/converters", "stateful/converters/to_ivy_module", "stateful/initializers", "stateful/initializers/Constant:\n    def __init__", "stateful/initializers/FirstLayerSiren", "stateful/initializers/GlorotUniform", "stateful/initializers/KaimingNormal:\n    def __init__", "stateful/initializers/Ones", "stateful/initializers/Siren", "stateful/initializers/Uniform:\n    def __init__", "stateful/initializers/Zeros", "stateful/layers", "stateful/layers/Conv1D", "stateful/layers/Conv1DTranspose", "stateful/layers/Conv2D", "stateful/layers/Conv2DTranspose", "stateful/layers/Conv3D", "stateful/layers/Conv3DTranspose", "stateful/layers/DepthwiseConv2D", "stateful/layers/Dropout", "stateful/layers/LSTM", "stateful/layers/Linear", "stateful/layers/MultiHeadAttention", "stateful/module", "stateful/module/Module", "stateful/norms", "stateful/norms/LayerNorm", "stateful/optimizers", "stateful/optimizers/Adam", "stateful/optimizers/LAMB", "stateful/optimizers/LARS", "stateful/optimizers/Optimizer", "stateful/optimizers/SGD", "stateful/sequential", "stateful/sequential/Sequential", "supported_frameworks", "verbosity", "verbosity/cprint"], "filenames": ["array/activations.rst", "array/activations/ArrayWithActivations.rst", "array/conversions.rst", "array/conversions/args_to_ivy.rst", "array/conversions/args_to_native.rst", "array/conversions/to_ivy.rst", "array/conversions/to_native.rst", "array/creation.rst", "array/creation/ArrayWithCreation.rst", "array/data_types.rst", "array/data_types/ArrayWithDataTypes.rst", "array/device.rst", "array/device/ArrayWithDevice.rst", "array/elementwise.rst", "array/elementwise/ArrayWithElementwise.rst", "array/general.rst", "array/general/ArrayWithGeneral.rst", "array/gradients.rst", "array/gradients/ArrayWithGradients.rst", "array/image.rst", "array/image/ArrayWithImage.rst", "array/layers.rst", "array/layers/ArrayWithLayers.rst", "array/linear_algebra.rst", "array/linear_algebra/ArrayWithLinearAlgebra.rst", "array/losses.rst", "array/losses/ArrayWithLosses.rst", "array/manipulation.rst", "array/manipulation/ArrayWithManipulation.rst", "array/norms.rst", "array/norms/ArrayWithNorms.rst", "array/random.rst", "array/random/ArrayWithRandom.rst", "array/searching.rst", "array/searching/ArrayWithSearching.rst", "array/set.rst", "array/set/ArrayWithSet.rst", "array/sorting.rst", "array/sorting/ArrayWithSorting.rst", "array/statistical.rst", "array/statistical/ArrayWithStatistical.rst", "array/utility.rst", "array/utility/ArrayWithUtility.rst", "array/wrapping.rst", "array/wrapping/add_ivy_array_instance_methods.rst", "backend_handler.rst", "backend_handler/ContextManager:\n    def __init__.rst", "backend_handler/choose_random_backend.rst", "backend_handler/clear_backend_stack.rst", "backend_handler/current_backend.rst", "backend_handler/get_backend.rst", "backend_handler/set_backend.rst", "backend_handler/try_import_ivy_jax.rst", "backend_handler/try_import_ivy_mxnet.rst", "backend_handler/try_import_ivy_numpy.rst", "backend_handler/try_import_ivy_tf.rst", "backend_handler/try_import_ivy_torch.rst", "backend_handler/unset_backend.rst", "background.rst", "background/ml_explosion.rst", "background/standardization.rst", "background/why_unify.rst", "container/activations.rst", "container/activations/ContainerWithActivations.rst", "container/base.rst", "container/base/ContainerBase.rst", "container/container.rst", "container/container/Container.rst", "container/container/MultiDevContainer.rst", "container/creation.rst", "container/creation/ContainerWithCreation.rst", "container/data_types.rst", "container/data_types/ContainerWithDataTypes.rst", "container/device.rst", "container/device/ContainerWithDevice.rst", "container/elementwise.rst", "container/elementwise/ContainerWithElementwise.rst", "container/general.rst", "container/general/ContainerWithGeneral.rst", "container/gradients.rst", "container/gradients/ContainerWithGradients.rst", "container/image.rst", "container/image/ContainerWithImage.rst", "container/layers.rst", "container/layers/ContainerWithLayers.rst", "container/linear_algebra.rst", "container/linear_algebra/ContainerWithLinearAlgebra.rst", "container/losses.rst", "container/losses/ContainerWithLosses.rst", "container/manipulation.rst", "container/manipulation/ContainerWithManipulation.rst", "container/norms.rst", "container/norms/ContainerWithNorms.rst", "container/random.rst", "container/random/ContainerWithRandom.rst", "container/searching.rst", "container/searching/ContainerWithSearching.rst", "container/set.rst", "container/set/ContainerWithSet.rst", "container/sorting.rst", "container/sorting/ContainerWithSorting.rst", "container/statistical.rst", "container/statistical/ContainerWithStatistical.rst", "container/utility.rst", "container/utility/ContainerWithUtility.rst", "container/wrapping.rst", "container/wrapping/add_ivy_container_instance_methods.rst", "contributing.rst", "contributing/0_setting_up.rst", "contributing/1_the_basics.rst", "contributing/4_open_tasks.rst", "contributing/building_the_docs.rst", "deep_dive.rst", "deep_dive/0_navigating_the_code.rst", "deep_dive/10_docstrings.rst", "deep_dive/11_docstring_examples.rst", "deep_dive/12_array_api_tests.rst", "deep_dive/13_ivy_tests.rst", "deep_dive/1_function_types.rst", "deep_dive/2_backend_setting.rst", "deep_dive/3_function_wrapping.rst", "deep_dive/4_arrays.rst", "deep_dive/5_containers.rst", "deep_dive/6_data_types.rst", "deep_dive/7_devices.rst", "deep_dive/8_inplace_updates.rst", "deep_dive/9_function_arguments.rst", "design.rst", "design/building_blocks.rst", "design/ivy_as_a_framework.rst", "design/ivy_as_a_framework/ivy_array.rst", "design/ivy_as_a_framework/ivy_container.rst", "design/ivy_as_a_framework/ivy_stateful_api.rst", "design/ivy_as_a_transpiler.rst", "docs/ivy.rst", "docs/ivy_builder.rst", "docs/ivy_ecosystem.rst", "docs/ivy_gym.rst", "docs/ivy_mech.rst", "docs/ivy_memory.rst", "docs/ivy_models.rst", "docs/ivy_robot.rst", "docs/ivy_vision.rst", "extensions.rst", "extensions/applied_libraries.rst", "faq.rst", "func_wrapper.rst", "func_wrapper/handle_nestable.rst", "func_wrapper/handle_out_argument.rst", "func_wrapper/infer_device.rst", "func_wrapper/infer_dtype.rst", "func_wrapper/inputs_to_ivy_arrays.rst", "func_wrapper/inputs_to_native_arrays.rst", "func_wrapper/outputs_to_ivy_arrays.rst", "func_wrapper/to_native_arrays_and_back.rst", "functional/ivy.rst", "functional/ivy/activations.rst", "functional/ivy/activations/gelu.rst", "functional/ivy/activations/leaky_relu.rst", "functional/ivy/activations/relu.rst", "functional/ivy/activations/sigmoid.rst", "functional/ivy/activations/softmax.rst", "functional/ivy/activations/softplus.rst", "functional/ivy/activations/tanh.rst", "functional/ivy/compilation.rst", "functional/ivy/compilation/compile.rst", "functional/ivy/constants.rst", "functional/ivy/creation.rst", "functional/ivy/creation/arange.rst", "functional/ivy/creation/asarray.rst", "functional/ivy/creation/empty.rst", "functional/ivy/creation/empty_like.rst", "functional/ivy/creation/eye.rst", "functional/ivy/creation/from_dlpack.rst", "functional/ivy/creation/full.rst", "functional/ivy/creation/full_like.rst", "functional/ivy/creation/linspace.rst", "functional/ivy/creation/logspace.rst", "functional/ivy/creation/meshgrid.rst", "functional/ivy/creation/native_array.rst", "functional/ivy/creation/ones.rst", "functional/ivy/creation/ones_like.rst", "functional/ivy/creation/tril.rst", "functional/ivy/creation/triu.rst", "functional/ivy/creation/zeros.rst", "functional/ivy/creation/zeros_like.rst", "functional/ivy/data_type.rst", "functional/ivy/data_type/DefaultDtype:\n    \"\"\"\"\"\"\n\n    # noinspection PyShadowingNames\n    def __init__.rst", "functional/ivy/data_type/DefaultFloatDtype:\n    \"\"\"\"\"\"\n\n    # noinspection PyShadowingNames\n    def __init__.rst", "functional/ivy/data_type/DefaultIntDtype:\n    \"\"\"\"\"\"\n\n    # noinspection PyShadowingNames\n    def __init__.rst", "functional/ivy/data_type/as_ivy_dtype.rst", "functional/ivy/data_type/as_native_dtype.rst", "functional/ivy/data_type/astype.rst", "functional/ivy/data_type/broadcast_arrays.rst", "functional/ivy/data_type/broadcast_to.rst", "functional/ivy/data_type/can_cast.rst", "functional/ivy/data_type/closest_valid_dtype.rst", "functional/ivy/data_type/default_dtype.rst", "functional/ivy/data_type/default_float_dtype.rst", "functional/ivy/data_type/default_int_dtype.rst", "functional/ivy/data_type/dtype.rst", "functional/ivy/data_type/dtype_bits.rst", "functional/ivy/data_type/finfo.rst", "functional/ivy/data_type/function_supported_dtypes.rst", "functional/ivy/data_type/function_unsupported_dtypes.rst", "functional/ivy/data_type/iinfo.rst", "functional/ivy/data_type/invalid_dtype.rst", "functional/ivy/data_type/is_float_dtype.rst", "functional/ivy/data_type/is_int_dtype.rst", "functional/ivy/data_type/promote_types.rst", "functional/ivy/data_type/result_type.rst", "functional/ivy/data_type/set_default_dtype.rst", "functional/ivy/data_type/set_default_float_dtype.rst", "functional/ivy/data_type/set_default_int_dtype.rst", "functional/ivy/data_type/type_promote_arrays.rst", "functional/ivy/data_type/unset_default_dtype.rst", "functional/ivy/data_type/unset_default_float_dtype.rst", "functional/ivy/data_type/unset_default_int_dtype.rst", "functional/ivy/data_type/valid_dtype.rst", "functional/ivy/device.rst", "functional/ivy/device/DefaultDevice:\n    \"\"\"\"\"\"\n\n    # noinspection PyShadowingNames\n    def __init__.rst", "functional/ivy/device/DevClonedItem.rst", "functional/ivy/device/DevClonedIter.rst", "functional/ivy/device/DevClonedNest.rst", "functional/ivy/device/DevDistItem.rst", "functional/ivy/device/DevDistIter.rst", "functional/ivy/device/DevDistNest.rst", "functional/ivy/device/DevManager:\n    \"\"\"\"\"\"\n\n    def __init__.rst", "functional/ivy/device/DevMapper.rst", "functional/ivy/device/DevMapperMultiProc.rst", "functional/ivy/device/MultiDev:\n    def __init__.rst", "functional/ivy/device/MultiDevItem.rst", "functional/ivy/device/MultiDevIter.rst", "functional/ivy/device/MultiDevNest.rst", "functional/ivy/device/Profiler.rst", "functional/ivy/device/as_ivy_dev.rst", "functional/ivy/device/as_native_dev.rst", "functional/ivy/device/clear_mem_on_dev.rst", "functional/ivy/device/default_device.rst", "functional/ivy/device/dev.rst", "functional/ivy/device/dev_clone.rst", "functional/ivy/device/dev_clone_array.rst", "functional/ivy/device/dev_clone_iter.rst", "functional/ivy/device/dev_clone_nest.rst", "functional/ivy/device/dev_dist.rst", "functional/ivy/device/dev_dist_array.rst", "functional/ivy/device/dev_dist_iter.rst", "functional/ivy/device/dev_dist_nest.rst", "functional/ivy/device/dev_unify.rst", "functional/ivy/device/dev_unify_array.rst", "functional/ivy/device/dev_unify_iter.rst", "functional/ivy/device/dev_unify_nest.rst", "functional/ivy/device/dev_util.rst", "functional/ivy/device/get_all_ivy_arrays_on_dev.rst", "functional/ivy/device/gpu_is_available.rst", "functional/ivy/device/num_cpu_cores.rst", "functional/ivy/device/num_gpus.rst", "functional/ivy/device/num_ivy_arrays_on_dev.rst", "functional/ivy/device/percent_used_mem_on_dev.rst", "functional/ivy/device/print_all_ivy_arrays_on_dev.rst", "functional/ivy/device/set_default_device.rst", "functional/ivy/device/set_split_factor.rst", "functional/ivy/device/split_factor.rst", "functional/ivy/device/split_func_call.rst", "functional/ivy/device/to_device.rst", "functional/ivy/device/total_mem_on_dev.rst", "functional/ivy/device/tpu_is_available.rst", "functional/ivy/device/unset_default_device.rst", "functional/ivy/device/used_mem_on_dev.rst", "functional/ivy/elementwise.rst", "functional/ivy/elementwise/abs.rst", "functional/ivy/elementwise/abs/abs_array.rst", "functional/ivy/elementwise/abs/abs_functional.rst", "functional/ivy/elementwise/acos.rst", "functional/ivy/elementwise/acos/acos_array.rst", "functional/ivy/elementwise/acos/acos_functional.rst", "functional/ivy/elementwise/acosh.rst", "functional/ivy/elementwise/acosh/acosh_array.rst", "functional/ivy/elementwise/acosh/acosh_functional.rst", "functional/ivy/elementwise/add.rst", "functional/ivy/elementwise/add/add_array.rst", "functional/ivy/elementwise/add/add_functional.rst", "functional/ivy/elementwise/asin.rst", "functional/ivy/elementwise/asin/asin_array.rst", "functional/ivy/elementwise/asin/asin_functional.rst", "functional/ivy/elementwise/asinh.rst", "functional/ivy/elementwise/asinh/asinh_array.rst", "functional/ivy/elementwise/asinh/asinh_functional.rst", "functional/ivy/elementwise/atan.rst", "functional/ivy/elementwise/atan/atan_array.rst", "functional/ivy/elementwise/atan/atan_functional.rst", "functional/ivy/elementwise/atan2.rst", "functional/ivy/elementwise/atan2/atan2_array.rst", "functional/ivy/elementwise/atan2/atan2_functional.rst", "functional/ivy/elementwise/atanh.rst", "functional/ivy/elementwise/atanh/atanh_array.rst", "functional/ivy/elementwise/atanh/atanh_functional.rst", "functional/ivy/elementwise/bitwise_and.rst", "functional/ivy/elementwise/bitwise_and/bitwise_and_array.rst", "functional/ivy/elementwise/bitwise_and/bitwise_and_functional.rst", "functional/ivy/elementwise/bitwise_invert.rst", "functional/ivy/elementwise/bitwise_invert/bitwise_invert_array.rst", "functional/ivy/elementwise/bitwise_invert/bitwise_invert_functional.rst", "functional/ivy/elementwise/bitwise_left_shift.rst", "functional/ivy/elementwise/bitwise_left_shift/bitwise_left_shift_array.rst", "functional/ivy/elementwise/bitwise_left_shift/bitwise_left_shift_functional.rst", "functional/ivy/elementwise/bitwise_or.rst", "functional/ivy/elementwise/bitwise_or/bitwise_or_array.rst", "functional/ivy/elementwise/bitwise_or/bitwise_or_functional.rst", "functional/ivy/elementwise/bitwise_right_shift.rst", "functional/ivy/elementwise/bitwise_right_shift/bitwise_right_shift_array.rst", "functional/ivy/elementwise/bitwise_right_shift/bitwise_right_shift_functional.rst", "functional/ivy/elementwise/bitwise_xor.rst", "functional/ivy/elementwise/bitwise_xor/bitwise_xor_array.rst", "functional/ivy/elementwise/bitwise_xor/bitwise_xor_functional.rst", "functional/ivy/elementwise/ceil.rst", "functional/ivy/elementwise/ceil/ceil_array.rst", "functional/ivy/elementwise/ceil/ceil_functional.rst", "functional/ivy/elementwise/cos.rst", "functional/ivy/elementwise/cos/cos_array.rst", "functional/ivy/elementwise/cos/cos_functional.rst", "functional/ivy/elementwise/cosh.rst", "functional/ivy/elementwise/cosh/cosh_array.rst", "functional/ivy/elementwise/cosh/cosh_functional.rst", "functional/ivy/elementwise/divide.rst", "functional/ivy/elementwise/divide/divide_array.rst", "functional/ivy/elementwise/divide/divide_functional.rst", "functional/ivy/elementwise/equal.rst", "functional/ivy/elementwise/equal/equal_array.rst", "functional/ivy/elementwise/equal/equal_functional.rst", "functional/ivy/elementwise/erf.rst", "functional/ivy/elementwise/erf/erf_array.rst", "functional/ivy/elementwise/erf/erf_container.rst", "functional/ivy/elementwise/erf/erf_functional.rst", "functional/ivy/elementwise/exp.rst", "functional/ivy/elementwise/exp/exp_array.rst", "functional/ivy/elementwise/exp/exp_functional.rst", "functional/ivy/elementwise/expm1.rst", "functional/ivy/elementwise/expm1/expm1_array.rst", "functional/ivy/elementwise/expm1/expm1_functional.rst", "functional/ivy/elementwise/floor.rst", "functional/ivy/elementwise/floor/floor_array.rst", "functional/ivy/elementwise/floor/floor_functional.rst", "functional/ivy/elementwise/floor_divide.rst", "functional/ivy/elementwise/floor_divide/floor_divide_array.rst", "functional/ivy/elementwise/floor_divide/floor_divide_functional.rst", "functional/ivy/elementwise/greater.rst", "functional/ivy/elementwise/greater/greater_array.rst", "functional/ivy/elementwise/greater/greater_functional.rst", "functional/ivy/elementwise/greater_equal.rst", "functional/ivy/elementwise/greater_equal/greater_equal_array.rst", "functional/ivy/elementwise/greater_equal/greater_equal_functional.rst", "functional/ivy/elementwise/isfinite.rst", "functional/ivy/elementwise/isfinite/isfinite_array.rst", "functional/ivy/elementwise/isfinite/isfinite_functional.rst", "functional/ivy/elementwise/isinf.rst", "functional/ivy/elementwise/isinf/isinf_array.rst", "functional/ivy/elementwise/isinf/isinf_functional.rst", "functional/ivy/elementwise/isnan.rst", "functional/ivy/elementwise/isnan/isnan_array.rst", "functional/ivy/elementwise/isnan/isnan_functional.rst", "functional/ivy/elementwise/less.rst", "functional/ivy/elementwise/less/less_array.rst", "functional/ivy/elementwise/less/less_functional.rst", "functional/ivy/elementwise/less_equal.rst", "functional/ivy/elementwise/less_equal/less_equal_array.rst", "functional/ivy/elementwise/less_equal/less_equal_functional.rst", "functional/ivy/elementwise/log.rst", "functional/ivy/elementwise/log/log_array.rst", "functional/ivy/elementwise/log/log_functional.rst", "functional/ivy/elementwise/log10.rst", "functional/ivy/elementwise/log10/log10_array.rst", "functional/ivy/elementwise/log10/log10_functional.rst", "functional/ivy/elementwise/log1p.rst", "functional/ivy/elementwise/log1p/log1p_array.rst", "functional/ivy/elementwise/log1p/log1p_functional.rst", "functional/ivy/elementwise/log2.rst", "functional/ivy/elementwise/log2/log2_array.rst", "functional/ivy/elementwise/log2/log2_functional.rst", "functional/ivy/elementwise/logaddexp.rst", "functional/ivy/elementwise/logaddexp/logaddexp_array.rst", "functional/ivy/elementwise/logaddexp/logaddexp_functional.rst", "functional/ivy/elementwise/logical_and.rst", "functional/ivy/elementwise/logical_and/logical_and_array.rst", "functional/ivy/elementwise/logical_and/logical_and_functional.rst", "functional/ivy/elementwise/logical_not.rst", "functional/ivy/elementwise/logical_not/logical_not_array.rst", "functional/ivy/elementwise/logical_not/logical_not_functional.rst", "functional/ivy/elementwise/logical_or.rst", "functional/ivy/elementwise/logical_or/logical_or_array.rst", "functional/ivy/elementwise/logical_or/logical_or_functional.rst", "functional/ivy/elementwise/logical_xor.rst", "functional/ivy/elementwise/logical_xor/logical_xor_array.rst", "functional/ivy/elementwise/logical_xor/logical_xor_functional.rst", "functional/ivy/elementwise/maximum.rst", "functional/ivy/elementwise/minimum.rst", "functional/ivy/elementwise/multiply.rst", "functional/ivy/elementwise/multiply/multiply_array.rst", "functional/ivy/elementwise/multiply/multiply_functional.rst", "functional/ivy/elementwise/negative.rst", "functional/ivy/elementwise/negative/negative_array.rst", "functional/ivy/elementwise/negative/negative_functional.rst", "functional/ivy/elementwise/not_equal.rst", "functional/ivy/elementwise/not_equal/not_equal_array.rst", "functional/ivy/elementwise/not_equal/not_equal_functional.rst", "functional/ivy/elementwise/positive.rst", "functional/ivy/elementwise/positive/positive_array.rst", "functional/ivy/elementwise/positive/positive_functional.rst", "functional/ivy/elementwise/pow.rst", "functional/ivy/elementwise/pow/pow_array.rst", "functional/ivy/elementwise/pow/pow_functional.rst", "functional/ivy/elementwise/remainder.rst", "functional/ivy/elementwise/remainder/remainder_array.rst", "functional/ivy/elementwise/remainder/remainder_functional.rst", "functional/ivy/elementwise/round.rst", "functional/ivy/elementwise/round/round_array.rst", "functional/ivy/elementwise/round/round_functional.rst", "functional/ivy/elementwise/sign.rst", "functional/ivy/elementwise/sign/sign_array.rst", "functional/ivy/elementwise/sign/sign_functional.rst", "functional/ivy/elementwise/sin.rst", "functional/ivy/elementwise/sin/sin_array.rst", "functional/ivy/elementwise/sin/sin_container.rst", "functional/ivy/elementwise/sin/sin_functional.rst", "functional/ivy/elementwise/sinh.rst", "functional/ivy/elementwise/sinh/sinh_array.rst", "functional/ivy/elementwise/sinh/sinh_functional.rst", "functional/ivy/elementwise/sqrt.rst", "functional/ivy/elementwise/sqrt/sqrt_array.rst", "functional/ivy/elementwise/sqrt/sqrt_functional.rst", "functional/ivy/elementwise/square.rst", "functional/ivy/elementwise/square/square_array.rst", "functional/ivy/elementwise/square/square_functional.rst", "functional/ivy/elementwise/subtract.rst", "functional/ivy/elementwise/subtract/subtract_array.rst", "functional/ivy/elementwise/subtract/subtract_functional.rst", "functional/ivy/elementwise/tan.rst", "functional/ivy/elementwise/tan/tan_array.rst", "functional/ivy/elementwise/tan/tan_functional.rst", "functional/ivy/elementwise/tanh.rst", "functional/ivy/elementwise/tanh/tanh_array.rst", "functional/ivy/elementwise/tanh/tanh_functional.rst", "functional/ivy/elementwise/trunc.rst", "functional/ivy/elementwise/trunc/trunc_array.rst", "functional/ivy/elementwise/trunc/trunc_functional.rst", "functional/ivy/general.rst", "functional/ivy/general/all_equal.rst", "functional/ivy/general/all_equal/all_equal_array.rst", "functional/ivy/general/all_equal/all_equal_functional.rst", "functional/ivy/general/arg_info.rst", "functional/ivy/general/arg_names.rst", "functional/ivy/general/array_equal.rst", "functional/ivy/general/arrays_equal.rst", "functional/ivy/general/assert_supports_inplace.rst", "functional/ivy/general/cache_fn.rst", "functional/ivy/general/clip_matrix_norm.rst", "functional/ivy/general/clip_vector_norm.rst", "functional/ivy/general/container_types.rst", "functional/ivy/general/copy_array.rst", "functional/ivy/general/cumprod.rst", "functional/ivy/general/cumsum.rst", "functional/ivy/general/current_backend_str.rst", "functional/ivy/general/default.rst", "functional/ivy/general/einops_rearrange.rst", "functional/ivy/general/einops_reduce.rst", "functional/ivy/general/einops_repeat.rst", "functional/ivy/general/exists.rst", "functional/ivy/general/floormod.rst", "functional/ivy/general/fourier_encode.rst", "functional/ivy/general/gather.rst", "functional/ivy/general/gather_nd.rst", "functional/ivy/general/get_all_arrays_in_memory.rst", "functional/ivy/general/get_min_base.rst", "functional/ivy/general/get_min_denominator.rst", "functional/ivy/general/get_num_dims.rst", "functional/ivy/general/get_referrers_recursive.rst", "functional/ivy/general/has_nans.rst", "functional/ivy/general/indices_where.rst", "functional/ivy/general/inplace_arrays_supported.rst", "functional/ivy/general/inplace_decrement.rst", "functional/ivy/general/inplace_increment.rst", "functional/ivy/general/inplace_update.rst", "functional/ivy/general/inplace_variables_supported.rst", "functional/ivy/general/is_array.rst", "functional/ivy/general/is_ivy_array.rst", "functional/ivy/general/is_ivy_container.rst", "functional/ivy/general/is_native_array.rst", "functional/ivy/general/match_kwargs.rst", "functional/ivy/general/multiprocessing.rst", "functional/ivy/general/num_arrays_in_memory.rst", "functional/ivy/general/one_hot.rst", "functional/ivy/general/print_all_arrays_in_memory.rst", "functional/ivy/general/queue_timeout.rst", "functional/ivy/general/scatter_flat.rst", "functional/ivy/general/scatter_nd.rst", "functional/ivy/general/set_min_base.rst", "functional/ivy/general/set_min_denominator.rst", "functional/ivy/general/set_queue_timeout.rst", "functional/ivy/general/set_tmp_dir.rst", "functional/ivy/general/shape.rst", "functional/ivy/general/shape_to_tuple.rst", "functional/ivy/general/stable_divide.rst", "functional/ivy/general/stable_pow.rst", "functional/ivy/general/supports_inplace.rst", "functional/ivy/general/tmp_dir.rst", "functional/ivy/general/to_list.rst", "functional/ivy/general/to_numpy.rst", "functional/ivy/general/to_scalar.rst", "functional/ivy/general/try_else_none.rst", "functional/ivy/general/unstack.rst", "functional/ivy/general/value_is_nan.rst", "functional/ivy/gradients.rst", "functional/ivy/gradients/GradientTracking:\n    \"\"\"\"\"\"\n\n    # noinspection PyShadowingNames\n    def __init__.rst", "functional/ivy/gradients/adam_step.rst", "functional/ivy/gradients/adam_update.rst", "functional/ivy/gradients/execute_with_gradients.rst", "functional/ivy/gradients/gradient_descent_update.rst", "functional/ivy/gradients/is_variable.rst", "functional/ivy/gradients/lamb_update.rst", "functional/ivy/gradients/lars_update.rst", "functional/ivy/gradients/optimizer_update.rst", "functional/ivy/gradients/set_with_grads.rst", "functional/ivy/gradients/stop_gradient.rst", "functional/ivy/gradients/unset_with_grads.rst", "functional/ivy/gradients/variable.rst", "functional/ivy/gradients/variable_data.rst", "functional/ivy/gradients/with_grads.rst", "functional/ivy/layers.rst", "functional/ivy/layers/conv1d.rst", "functional/ivy/layers/conv1d_transpose.rst", "functional/ivy/layers/conv2d.rst", "functional/ivy/layers/conv2d_transpose.rst", "functional/ivy/layers/conv3d.rst", "functional/ivy/layers/conv3d_transpose.rst", "functional/ivy/layers/depthwise_conv2d.rst", "functional/ivy/layers/dropout.rst", "functional/ivy/layers/linear.rst", "functional/ivy/layers/lstm_update.rst", "functional/ivy/layers/multi_head_attention.rst", "functional/ivy/layers/scaled_dot_product_attention.rst", "functional/ivy/linear_algebra.rst", "functional/ivy/linear_algebra/cholesky.rst", "functional/ivy/linear_algebra/cross.rst", "functional/ivy/linear_algebra/det.rst", "functional/ivy/linear_algebra/diagonal.rst", "functional/ivy/linear_algebra/eigh.rst", "functional/ivy/linear_algebra/eigvalsh.rst", "functional/ivy/linear_algebra/inv.rst", "functional/ivy/linear_algebra/matmul.rst", "functional/ivy/linear_algebra/matmul/matmul_array.rst", "functional/ivy/linear_algebra/matmul/matmul_functional.rst", "functional/ivy/linear_algebra/matrix_norm.rst", "functional/ivy/linear_algebra/matrix_power.rst", "functional/ivy/linear_algebra/matrix_rank.rst", "functional/ivy/linear_algebra/matrix_transpose.rst", "functional/ivy/linear_algebra/outer.rst", "functional/ivy/linear_algebra/pinv.rst", "functional/ivy/linear_algebra/qr.rst", "functional/ivy/linear_algebra/slogdet.rst", "functional/ivy/linear_algebra/solve.rst", "functional/ivy/linear_algebra/svd.rst", "functional/ivy/linear_algebra/svdvals.rst", "functional/ivy/linear_algebra/tensordot.rst", "functional/ivy/linear_algebra/trace.rst", "functional/ivy/linear_algebra/vecdot.rst", "functional/ivy/linear_algebra/vector_norm.rst", "functional/ivy/linear_algebra/vector_to_skew_symmetric_matrix.rst", "functional/ivy/losses.rst", "functional/ivy/losses/binary_cross_entropy.rst", "functional/ivy/losses/binary_cross_entropy/binary_cross_entropy_array.rst", "functional/ivy/losses/binary_cross_entropy/binary_cross_entropy_functional.rst", "functional/ivy/losses/cross_entropy.rst", "functional/ivy/losses/cross_entropy/cross_entropy_array.rst", "functional/ivy/losses/cross_entropy/cross_entropy_functional.rst", "functional/ivy/losses/sparse_cross_entropy.rst", "functional/ivy/losses/sparse_cross_entropy/sparse_cross_entropy_array.rst", "functional/ivy/losses/sparse_cross_entropy/sparse_cross_entropy_functional.rst", "functional/ivy/manipulation.rst", "functional/ivy/manipulation/clip.rst", "functional/ivy/manipulation/clip/clip_array.rst", "functional/ivy/manipulation/clip/clip_functional.rst", "functional/ivy/manipulation/clip/static_clip_container.rst", "functional/ivy/manipulation/concat.rst", "functional/ivy/manipulation/concat/concat_array.rst", "functional/ivy/manipulation/concat/concat_functional.rst", "functional/ivy/manipulation/constant_pad.rst", "functional/ivy/manipulation/constant_pad/constant_pad_array.rst", "functional/ivy/manipulation/constant_pad/constant_pad_functional.rst", "functional/ivy/manipulation/expand_dims.rst", "functional/ivy/manipulation/expand_dims/expand_dims_array.rst", "functional/ivy/manipulation/expand_dims/expand_dims_functional.rst", "functional/ivy/manipulation/flip.rst", "functional/ivy/manipulation/flip/flip_array.rst", "functional/ivy/manipulation/flip/flip_functional.rst", "functional/ivy/manipulation/permute_dims.rst", "functional/ivy/manipulation/permute_dims/permute_dims_array.rst", "functional/ivy/manipulation/permute_dims/permute_dims_functional.rst", "functional/ivy/manipulation/repeat.rst", "functional/ivy/manipulation/repeat/repeat_array.rst", "functional/ivy/manipulation/repeat/repeat_functional.rst", "functional/ivy/manipulation/reshape.rst", "functional/ivy/manipulation/reshape/reshape_array.rst", "functional/ivy/manipulation/reshape/reshape_functional.rst", "functional/ivy/manipulation/roll.rst", "functional/ivy/manipulation/roll/roll_array.rst", "functional/ivy/manipulation/roll/roll_functional.rst", "functional/ivy/manipulation/split.rst", "functional/ivy/manipulation/squeeze.rst", "functional/ivy/manipulation/squeeze/squeeze_array.rst", "functional/ivy/manipulation/squeeze/squeeze_functional.rst", "functional/ivy/manipulation/stack.rst", "functional/ivy/manipulation/stack/stack_array.rst", "functional/ivy/manipulation/stack/stack_functional.rst", "functional/ivy/manipulation/swapaxes.rst", "functional/ivy/manipulation/swapaxes/swapaxes_array.rst", "functional/ivy/manipulation/swapaxes/swapaxes_functional.rst", "functional/ivy/manipulation/tile.rst", "functional/ivy/manipulation/tile/tile_array.rst", "functional/ivy/manipulation/tile/tile_functional.rst", "functional/ivy/manipulation/zero_pad.rst", "functional/ivy/manipulation/zero_pad/zero_pad_array.rst", "functional/ivy/manipulation/zero_pad/zero_pad_functional.rst", "functional/ivy/meta.rst", "functional/ivy/meta/fomaml_step.rst", "functional/ivy/meta/maml_step.rst", "functional/ivy/meta/reptile_step.rst", "functional/ivy/nest.rst", "functional/ivy/nest/all_nested_indices.rst", "functional/ivy/nest/copy_nest.rst", "functional/ivy/nest/index_nest.rst", "functional/ivy/nest/insert_into_nest_at_index.rst", "functional/ivy/nest/insert_into_nest_at_indices.rst", "functional/ivy/nest/map.rst", "functional/ivy/nest/map_nest_at_index.rst", "functional/ivy/nest/map_nest_at_indices.rst", "functional/ivy/nest/multi_index_nest.rst", "functional/ivy/nest/nested_any.rst", "functional/ivy/nest/nested_indices_where.rst", "functional/ivy/nest/nested_map.rst", "functional/ivy/nest/nested_multi_map.rst", "functional/ivy/nest/prune_nest_at_index.rst", "functional/ivy/nest/prune_nest_at_indices.rst", "functional/ivy/nest/set_nest_at_index.rst", "functional/ivy/nest/set_nest_at_indices.rst", "functional/ivy/norms.rst", "functional/ivy/norms/layer_norm.rst", "functional/ivy/norms/layer_norm/layer_norm_array.rst", "functional/ivy/norms/layer_norm/layer_norm_functional.rst", "functional/ivy/random.rst", "functional/ivy/random/multinomial.rst", "functional/ivy/random/randint.rst", "functional/ivy/random/random_normal.rst", "functional/ivy/random/random_uniform.rst", "functional/ivy/random/seed.rst", "functional/ivy/random/shuffle.rst", "functional/ivy/searching.rst", "functional/ivy/searching/argmax.rst", "functional/ivy/searching/argmin.rst", "functional/ivy/searching/nonzero.rst", "functional/ivy/searching/where.rst", "functional/ivy/set.rst", "functional/ivy/set/unique_all.rst", "functional/ivy/set/unique_counts.rst", "functional/ivy/set/unique_inverse.rst", "functional/ivy/set/unique_values.rst", "functional/ivy/sorting.rst", "functional/ivy/sorting/argsort.rst", "functional/ivy/sorting/argsort/argsort_array.rst", "functional/ivy/sorting/argsort/argsort_functional.rst", "functional/ivy/sorting/sort.rst", "functional/ivy/sorting/sort/sort_array.rst", "functional/ivy/sorting/sort/sort_functional.rst", "functional/ivy/statistical.rst", "functional/ivy/statistical/einsum.rst", "functional/ivy/statistical/einsum/einsum_array.rst", "functional/ivy/statistical/einsum/einsum_functional.rst", "functional/ivy/statistical/max.rst", "functional/ivy/statistical/max/max_array.rst", "functional/ivy/statistical/max/max_functional.rst", "functional/ivy/statistical/mean.rst", "functional/ivy/statistical/mean/mean_array.rst", "functional/ivy/statistical/mean/mean_functional.rst", "functional/ivy/statistical/min.rst", "functional/ivy/statistical/min/min_array.rst", "functional/ivy/statistical/min/min_functional.rst", "functional/ivy/statistical/prod.rst", "functional/ivy/statistical/prod/prod_array.rst", "functional/ivy/statistical/prod/prod_functional.rst", "functional/ivy/statistical/std.rst", "functional/ivy/statistical/std/std_array.rst", "functional/ivy/statistical/std/std_functional.rst", "functional/ivy/statistical/sum.rst", "functional/ivy/statistical/sum/sum_array.rst", "functional/ivy/statistical/sum/sum_functional.rst", "functional/ivy/statistical/var.rst", "functional/ivy/statistical/var/var_array.rst", "functional/ivy/statistical/var/var_functional.rst", "functional/ivy/utility.rst", "functional/ivy/utility/all.rst", "functional/ivy/utility/all/all_array.rst", "functional/ivy/utility/all/all_functional.rst", "functional/ivy/utility/any.rst", "functional/ivy/utility/any/any_array.rst", "functional/ivy/utility/any/any_functional.rst", "index.rst", "index_append.rst", "index_prepend.rst", "inspection.rst", "inspection/add_array_specs.rst", "inspection/fn_array_spec.rst", "roadmap.rst", "stateful/activations.rst", "stateful/activations/GEGLU.rst", "stateful/activations/GELU.rst", "stateful/converters.rst", "stateful/converters/to_ivy_module.rst", "stateful/initializers.rst", "stateful/initializers/Constant:\n    def __init__.rst", "stateful/initializers/FirstLayerSiren.rst", "stateful/initializers/GlorotUniform.rst", "stateful/initializers/KaimingNormal:\n    def __init__.rst", "stateful/initializers/Ones.rst", "stateful/initializers/Siren.rst", "stateful/initializers/Uniform:\n    def __init__.rst", "stateful/initializers/Zeros.rst", "stateful/layers.rst", "stateful/layers/Conv1D.rst", "stateful/layers/Conv1DTranspose.rst", "stateful/layers/Conv2D.rst", "stateful/layers/Conv2DTranspose.rst", "stateful/layers/Conv3D.rst", "stateful/layers/Conv3DTranspose.rst", "stateful/layers/DepthwiseConv2D.rst", "stateful/layers/Dropout.rst", "stateful/layers/LSTM.rst", "stateful/layers/Linear.rst", "stateful/layers/MultiHeadAttention.rst", "stateful/module.rst", "stateful/module/Module.rst", "stateful/norms.rst", "stateful/norms/LayerNorm.rst", "stateful/optimizers.rst", "stateful/optimizers/Adam.rst", "stateful/optimizers/LAMB.rst", "stateful/optimizers/LARS.rst", "stateful/optimizers/Optimizer.rst", "stateful/optimizers/SGD.rst", "stateful/sequential.rst", "stateful/sequential/Sequential.rst", "supported_frameworks.rst", "verbosity.rst", "verbosity/cprint.rst"], "titles": ["Activations", "ArrayWithActivations", "Conversions", "args_to_ivy", "args_to_native", "to_ivy", "to_native", "Creation", "ArrayWithCreation", "Data types", "ArrayWithDataTypes", "Device", "ArrayWithDevice", "Elementwise", "ArrayWithElementwise", "General", "ArrayWithGeneral", "Gradients", "ArrayWithGradients", "Image", "ArrayWithImage", "Layers", "ArrayWithLayers", "Linear algebra", "ArrayWithLinearAlgebra", "Losses", "ArrayWithLosses", "Manipulation", "ArrayWithManipulation", "Norms", "ArrayWithNorms", "Random", "ArrayWithRandom", "Searching", "ArrayWithSearching", "Set", "ArrayWithSet", "Sorting", "ArrayWithSorting", "Statistical", "ArrayWithStatistical", "Utility", "ArrayWithUtility", "Wrapping", "add_ivy_array_instance_methods", "Backend handler", "&lt;no title&gt;", "choose_random_backend", "clear_backend_stack", "current_backend", "get_backend", "set_backend", "try_import_ivy_jax", "try_import_ivy_mxnet", "try_import_ivy_numpy", "try_import_ivy_tf", "try_import_ivy_torch", "unset_backend", "Background", "ML Explosion", "Standardization", "Why Unify?", "Activations", "ContainerWithActivations", "Base", "ContainerBase", "Container", "Container", "MultiDevContainer", "Creation", "ContainerWithCreation", "Data types", "ContainerWithDataTypes", "Device", "ContainerWithDevice", "Elementwise", "ContainerWithElementwise", "General", "ContainerWithGeneral", "Gradients", "ContainerWithGradients", "Image", "ContainerWithImage", "Layers", "ContainerWithLayers", "Linear algebra", "ContainerWithLinearAlgebra", "Losses", "ContainerWithLosses", "Manipulation", "ContainerWithManipulation", "Norms", "ContainerWithNorms", "Random", "ContainerWithRandom", "Searching", "ContainerWithSearching", "Set", "ContainerWithSet", "Sorting", "ContainerWithSorting", "Statistical", "ContainerWithStatistical", "Utility", "ContainerWithUtility", "Wrapping", "add_ivy_container_instance_methods", "Contributing", "Setting Up", "The Basics", "Open Tasks", "Building the Docs", "Deep Dive", "Navigating the Code", "Docstrings", "Docstring Examples", "Array API Tests", "Ivy Tests", "Function Types", "Backend Setting", "Function Wrapping", "Arrays", "Containers", "Data Types", "Devices", "Inplace Updates", "Function Arguments", "Design", "Building Blocks", "Ivy as a Framework", "Ivy Array", "Ivy Container", "Ivy Stateful API", "Ivy as a Transpiler", "Ivy", "Ivy builder", "Ivy ecosystem", "Ivy gym", "Ivy mech", "Ivy memory", "Ivy models", "Ivy robot", "Ivy vision", "Extensions", "Applied Libraries", "FAQ", "Func wrapper", "handle_nestable", "handle_out_argument", "infer_device", "infer_dtype", "inputs_to_ivy_arrays", "inputs_to_native_arrays", "outputs_to_ivy_arrays", "to_native_arrays_and_back", "&lt;no title&gt;", "Activations", "gelu", "leaky_relu", "relu", "sigmoid", "softmax", "softplus", "tanh", "Compilation", "compile", "Constants", "Creation", "arange", "asarray", "empty", "empty_like", "eye", "from_dlpack", "full", "full_like", "linspace", "logspace", "meshgrid", "native_array", "ones", "ones_like", "tril", "triu", "zeros", "zeros_like", "Data type", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "as_ivy_dtype", "as_native_dtype", "astype", "broadcast_arrays", "broadcast_to", "can_cast", "closest_valid_dtype", "default_dtype", "default_float_dtype", "default_int_dtype", "dtype", "dtype_bits", "finfo", "function_supported_dtypes", "function_unsupported_dtypes", "iinfo", "invalid_dtype", "is_float_dtype", "is_int_dtype", "promote_types", "result_type", "set_default_dtype", "set_default_float_dtype", "set_default_int_dtype", "type_promote_arrays", "unset_default_dtype", "unset_default_float_dtype", "unset_default_int_dtype", "valid_dtype", "Device", "&lt;no title&gt;", "DevClonedItem", "DevClonedIter", "DevClonedNest", "DevDistItem", "DevDistIter", "DevDistNest", "&lt;no title&gt;", "DevMapper", "DevMapperMultiProc", "&lt;no title&gt;", "MultiDevItem", "MultiDevIter", "MultiDevNest", "Profiler", "as_ivy_dev", "as_native_dev", "clear_mem_on_dev", "default_device", "dev", "dev_clone", "dev_clone_array", "dev_clone_iter", "dev_clone_nest", "dev_dist", "dev_dist_array", "dev_dist_iter", "dev_dist_nest", "dev_unify", "dev_unify_array", "dev_unify_iter", "dev_unify_nest", "dev_util", "get_all_ivy_arrays_on_dev", "gpu_is_available", "num_cpu_cores", "num_gpus", "num_ivy_arrays_on_dev", "percent_used_mem_on_dev", "print_all_ivy_arrays_on_dev", "set_default_device", "set_split_factor", "split_factor", "split_func_call", "to_device", "total_mem_on_dev", "tpu_is_available", "unset_default_device", "used_mem_on_dev", "Elementwise", "abs", "abs array", "abs functional", "acos", "acos array", "acosh functional", "acosh", "acosh array", "acosh functional", "add", "add array", "logaddexp functional", "asin", "asin array", "asin functional", "asinh", "asinh array", "asinh functional", "atan", "atan array", "atanh functional", "atan2", "atan2 array", "atan2 functional", "atanh", "atanh array", "atanh functional", "bitwise_and", "bitwise_and array", "bitwise_and functional", "bitwise_invert", "bitwise_invert array", "bitwise_invert functional", "bitwise_left_shift", "bitwise_left_shift array", "bitwise_left_shift functional", "bitwise_or", "bitwise_or array", "bitwise_or functional", "bitwise_right_shift", "bitwise_right_shift array", "bitwise_right_shift functional", "bitwise_xor", "bitwise_xor array", "bitwise_xor functional", "ceil", "ceil array", "ceil functional", "cos", "cos array", "acosh functional", "cosh", "cosh array", "acosh functional", "divide", "divide array", "floor_divide functional", "equal", "equal array", "greater_equal functional", "erf", "erf array", "erf container", "erf functional", "exp", "exp array", "logaddexp functional", "expm1", "expm1 array", "expm1 functional", "floor", "floor array", "floor_divide functional", "floor_divide", "floor_divide array", "floor_divide functional", "greater", "greater array", "greater_equal functional", "greater_equal", "greater_equal array", "greater_equal functional", "isfinite", "isfinite array", "isfinite functional", "isinf", "isinf array", "isinf functional", "isnan", "isnan array", "isnan functional", "less", "less array", "less functional", "less_equal", "less_equal array", "less_equal functional", "log", "log array", "log functional", "log10", "log10 array", "log10 functional", "log1p", "log1p array", "log1p functional", "log2", "log2 array", "log2 functional", "logaddexp", "logaddexp array", "logaddexp functional", "logical_and", "logical_and array", "logical_and functional", "logical_not", "logical_not array", "logical_not functional", "logical_or", "logical_or array", "logical_or functional", "logical_xor", "logical_xor array", "logical_xor functional", "maximum", "minimum", "multiply", "multiply array", "multiply functional", "negative", "negative array", "negative functional", "not_equal", "not_equal array", "not_equal functional", "positive", "positive array", "positive functional", "pow", "pow array", "pow functional", "remainder", "remainder array", "remainder functional", "round", "round array", "round functional", "sign", "sign array", "sign functional", "sin", "sin array", "sin container", "sin functional", "sinh", "sinh array", "sinh functional", "sqrt", "sqrt array", "sqrt functional", "square", "square array", "square functional", "subtract", "subtract array", "subtract functional", "tan", "tan array", "atanh functional", "tanh", "tanh array", "atanh functional", "trunc", "trunc array", "trunc functional", "General", "all_equal", "all_equal array", "all_equal functional", "arg_info", "arg_names", "array_equal", "arrays_equal", "assert_supports_inplace", "cache_fn", "clip_matrix_norm", "clip_vector_norm", "container_types", "copy_array", "cumprod", "cumsum", "current_backend_str", "default", "einops_rearrange", "einops_reduce", "einops_repeat", "exists", "floormod", "fourier_encode", "gather", "gather_nd", "get_all_arrays_in_memory", "get_min_base", "get_min_denominator", "get_num_dims", "get_referrers_recursive", "has_nans", "indices_where", "inplace_arrays_supported", "inplace_decrement", "inplace_increment", "inplace_update", "inplace_variables_supported", "is_array", "is_ivy_array", "is_ivy_container", "is_native_array", "match_kwargs", "multiprocessing", "num_arrays_in_memory", "one_hot", "print_all_arrays_in_memory", "queue_timeout", "scatter_flat", "scatter_nd", "set_min_base", "set_min_denominator", "set_queue_timeout", "set_tmp_dir", "shape", "shape_to_tuple", "stable_divide", "stable_pow", "supports_inplace", "tmp_dir", "to_list", "to_numpy", "to_scalar", "try_else_none", "unstack", "value_is_nan", "Gradients", "&lt;no title&gt;", "adam_step", "adam_update", "execute_with_gradients", "gradient_descent_update", "is_variable", "lamb_update", "lars_update", "optimizer_update", "set_with_grads", "stop_gradient", "unset_with_grads", "variable", "variable_data", "with_grads", "Layers", "conv1d", "conv1d_transpose", "conv2d", "conv2d_transpose", "conv3d", "conv3d_transpose", "depthwise_conv2d", "dropout", "linear", "lstm_update", "multi_head_attention", "scaled_dot_product_attention", "Linear algebra", "cholesky", "cross", "det", "diagonal", "eigh", "eigvalsh", "inv", "matmul", "matmul array", "matmul functional", "matrix_norm", "matrix_power", "matrix_rank", "matrix_transpose", "outer", "pinv", "qr", "slogdet", "solve", "svd", "svdvals", "tensordot", "trace", "vecdot", "vector_norm", "vector_to_skew_symmetric_matrix", "Losses", "binary_cross_entropy", "binary_cross_entropy array", "binary_cross_entropy functional", "cross_entropy", "cross_entropy array", "cross_entropy functional", "sparse_cross_entropy", "sparse_cross_entropy array", "sparse_cross_entropy functional", "Manipulation", "clip", "clip array", "clip functional", "static_clip container", "concat", "concat array", "concat functional", "constant_pad", "constant_pad array", "constant_pad functional", "expand_dims", "expand_dims array", "expand_dims functional", "flip", "flip array", "flip functional", "permute_dims", "permute_dims array", "permute_dims functional", "repeat", "repeat array", "repeat functional", "reshape", "reshape array", "reshape functional", "roll", "roll array", "roll functional", "split", "squeeze", "squeeze array", "squeeze functional", "stack", "stack array", "stack functional", "swapaxes", "swapaxes array", "swapaxes functional", "tile", "tile array", "tile functional", "zero_pad", "zero_pad array", "zero_pad functional", "Meta", "fomaml_step", "maml_step", "reptile_step", "Nest", "all_nested_indices", "copy_nest", "index_nest", "insert_into_nest_at_index", "insert_into_nest_at_indices", "map", "map_nest_at_index", "map_nest_at_indices", "multi_index_nest", "nested_any", "nested_indices_where", "nested_map", "nested_multi_map", "prune_nest_at_index", "prune_nest_at_indices", "set_nest_at_index", "set_nest_at_indices", "Norms", "layer_norm", "layer_norm array", "layer_norm functional", "Random", "multinomial", "randint", "random_normal", "random_uniform", "seed", "shuffle", "Searching", "argmax", "argmin", "nonzero", "where", "Set", "unique_all", "unique_counts", "unique_inverse", "unique_values", "Sorting", "argsort", "argsort array", "argsort functional", "sort", "sort array", "sort functional", "Statistical", "einsum", "einsum array", "einsum functional", "max", "max array", "max functional", "mean", "mean array", "mean functional", "min", "min array", "min functional", "prod", "prod array", "prod functional", "std", "std array", "std functional", "sum", "sum array", "einsum functional", "var", "var array", "var functional", "Utility", "all", "all array", "all functional", "any", "any array", "any functional", "Contents", "&lt;no title&gt;", "&lt;no title&gt;", "Inspection", "add_array_specs", "fn_array_spec", "Roadmap", "Activations", "GEGLU", "GELU", "Converters", "to_ivy_module", "Initializers", "&lt;no title&gt;", "FirstLayerSiren", "GlorotUniform", "&lt;no title&gt;", "Ones", "Siren", "&lt;no title&gt;", "Zeros", "Layers", "Conv1D", "Conv1DTranspose", "Conv2D", "Conv2DTranspose", "Conv3D", "Conv3DTranspose", "DepthwiseConv2D", "Dropout", "LSTM", "Linear", "MultiHeadAttention", "Module", "Module", "Norms", "LayerNorm", "Optimizers", "Adam", "LAMB", "LARS", "Optimizer", "SGD", "Sequential", "Sequential", "&lt;no title&gt;", "Verbosity", "cprint"], "terms": {"class": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 51, 57, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 110, 111, 114, 115, 117, 121, 122, 123, 124, 126, 128, 129, 131, 132, 133, 143, 144, 145, 186, 205, 219, 221, 222, 223, 224, 225, 226, 228, 229, 231, 232, 233, 234, 445, 450, 481, 487, 506, 511, 525, 626, 628, 638, 655, 658, 704, 711, 712, 713, 714, 715, 716, 718, 719, 721, 722, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748], "ivi": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 109, 110, 111, 112, 114, 116, 118, 119, 120, 122, 123, 124, 125, 126, 127, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 228, 229, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 718, 719, 721, 722, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 750, 751], "arrai": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 49, 64, 65, 66, 67, 68, 75, 76, 77, 78, 89, 90, 93, 94, 108, 109, 110, 112, 113, 114, 115, 117, 118, 119, 120, 122, 123, 124, 125, 127, 128, 129, 131, 132, 133, 145, 146, 154, 156, 157, 158, 159, 160, 161, 162, 163, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 192, 193, 194, 195, 200, 202, 205, 207, 208, 210, 214, 219, 238, 239, 240, 241, 244, 245, 246, 247, 248, 249, 250, 251, 253, 257, 259, 263, 264, 269, 270, 272, 273, 275, 276, 278, 279, 281, 282, 284, 285, 287, 288, 290, 291, 293, 294, 296, 297, 299, 300, 302, 303, 305, 306, 308, 309, 311, 312, 314, 315, 317, 318, 320, 321, 323, 324, 326, 327, 329, 330, 333, 334, 336, 337, 339, 340, 342, 343, 345, 346, 348, 349, 351, 352, 354, 355, 357, 358, 360, 361, 363, 364, 366, 367, 369, 370, 372, 373, 375, 376, 378, 379, 381, 382, 384, 385, 387, 388, 390, 391, 393, 394, 395, 396, 398, 399, 401, 402, 404, 405, 407, 408, 410, 411, 413, 414, 416, 417, 419, 420, 423, 424, 426, 427, 429, 430, 432, 433, 435, 436, 438, 439, 441, 442, 444, 445, 446, 448, 451, 452, 453, 455, 456, 458, 459, 460, 463, 464, 465, 466, 467, 468, 469, 470, 471, 474, 476, 477, 478, 479, 480, 481, 483, 484, 486, 489, 490, 491, 493, 494, 499, 503, 505, 506, 507, 509, 510, 511, 513, 514, 516, 517, 518, 519, 520, 522, 524, 525, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 570, 571, 573, 574, 576, 577, 578, 580, 581, 582, 584, 585, 587, 588, 590, 591, 593, 594, 596, 597, 599, 600, 602, 603, 605, 606, 607, 609, 610, 612, 613, 615, 616, 618, 619, 621, 622, 623, 624, 625, 626, 628, 638, 639, 644, 645, 647, 648, 649, 650, 651, 652, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 668, 669, 671, 672, 673, 675, 676, 678, 679, 681, 682, 684, 685, 687, 688, 690, 691, 693, 694, 696, 697, 698, 700, 701, 703, 704, 707, 709, 725, 733, 736], "arraywithactiv": 0, "sourc": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 111, 121, 122, 146, 147, 148, 149, 150, 151, 152, 153, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 228, 229, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 707, 708, 709, 711, 712, 713, 714, 715, 716, 718, 719, 721, 722, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 750, 751], "base": [0, 1, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 45, 62, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 109, 117, 120, 122, 128, 144, 167, 177, 186, 219, 221, 222, 223, 224, 225, 226, 228, 229, 231, 232, 233, 234, 269, 334, 367, 369, 370, 372, 373, 375, 376, 378, 408, 410, 445, 472, 495, 502, 511, 660, 661, 662, 664, 672, 673, 675, 693, 711, 712, 713, 716, 718, 719, 721, 722, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748], "abc": [0, 1, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 64, 65, 130, 219, 228, 234, 445, 466, 737, 738, 741, 745], "activ": [1, 43, 44, 63, 105, 106, 108, 109, 111, 113, 132, 157, 158, 159, 160, 161, 162, 163, 704, 712, 713], "support": [1, 3, 4, 5, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 59, 60, 61, 63, 64, 65, 67, 68, 70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94, 96, 98, 100, 102, 104, 106, 114, 115, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 130, 131, 133, 147, 148, 149, 150, 151, 152, 153, 154, 157, 158, 159, 160, 161, 162, 163, 165, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 568, 569, 570, 571, 572, 573, 574, 575, 576, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 623, 624, 625, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 645, 646, 647, 649, 650, 651, 652, 653, 654, 656, 657, 658, 659, 661, 662, 663, 664, 666, 667, 668, 669, 670, 671, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 698, 699, 700, 701, 702, 703, 704, 708, 709, 710, 712, 713, 715, 717, 718, 719, 720, 721, 722, 723, 724, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 738, 740, 741, 742, 743, 744, 745, 746, 748, 749, 751], "framework": [1, 2, 3, 4, 5, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 59, 60, 61, 63, 64, 65, 67, 68, 70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94, 96, 98, 100, 102, 104, 106, 112, 116, 118, 119, 120, 121, 124, 126, 127, 130, 133, 144, 145, 147, 148, 149, 150, 151, 152, 153, 154, 157, 158, 159, 160, 161, 162, 163, 164, 165, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 568, 569, 570, 571, 572, 573, 574, 575, 576, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 623, 624, 625, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 645, 646, 647, 649, 650, 651, 652, 653, 654, 656, 657, 658, 659, 661, 662, 663, 664, 666, 667, 668, 669, 670, 671, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 698, 699, 700, 701, 702, 703, 704, 708, 709, 710, 712, 713, 714, 715, 717, 718, 719, 720, 721, 722, 723, 724, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 738, 740, 741, 742, 743, 744, 745, 746, 748, 749, 751], "collect": [2, 64, 65, 117, 144, 156, 164, 219, 445, 511, 527, 567, 626, 639, 644, 648, 711, 725, 739, 741], "function": [2, 13, 14, 15, 16, 27, 28, 43, 44, 45, 49, 50, 51, 59, 64, 65, 75, 76, 77, 78, 89, 90, 93, 94, 105, 106, 109, 111, 112, 113, 114, 115, 116, 117, 119, 121, 125, 127, 129, 130, 131, 132, 143, 144, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 228, 229, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 273, 276, 279, 280, 282, 285, 288, 291, 294, 297, 300, 303, 306, 309, 312, 315, 316, 318, 321, 324, 327, 330, 334, 337, 340, 343, 346, 349, 352, 355, 358, 361, 364, 367, 370, 373, 376, 379, 382, 385, 388, 391, 394, 395, 396, 399, 402, 405, 408, 411, 414, 417, 420, 424, 427, 430, 433, 436, 437, 439, 442, 445, 446, 447, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 571, 574, 577, 578, 579, 581, 582, 585, 588, 591, 594, 597, 600, 603, 604, 606, 607, 610, 613, 616, 619, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 669, 672, 673, 676, 679, 682, 685, 688, 691, 694, 697, 698, 701, 704, 707, 709, 711, 712, 713, 741, 744, 746], "wrap": [2, 13, 14, 15, 16, 27, 28, 44, 64, 65, 66, 67, 68, 75, 76, 77, 78, 89, 90, 93, 94, 106, 112, 114, 117, 118, 119, 121, 122, 123, 124, 125, 126, 128, 130, 133, 145, 146, 154, 270, 271, 280, 290, 294, 315, 316, 379, 437, 441, 445, 446, 447, 454, 511, 525, 578, 579, 581, 603, 604], "accept": [2, 108, 109, 114, 115, 117, 118, 121, 122, 124, 125, 126, 130, 167, 178, 269, 279, 282, 284, 297, 299, 312, 314, 315, 317, 321, 340, 385, 387, 388, 390, 411, 413, 414, 416, 427, 429, 430, 432, 436, 445, 469, 527, 530, 539, 540, 543, 577, 588, 590, 591, 593, 603, 605, 644, 645, 647, 660, 661, 662, 665, 666, 668, 672, 676, 678, 679, 681, 697, 698, 700, 704], "return": [2, 3, 4, 5, 6, 13, 14, 23, 24, 25, 26, 27, 28, 29, 30, 37, 38, 39, 40, 41, 42, 45, 49, 50, 57, 64, 65, 66, 67, 68, 75, 76, 77, 78, 79, 80, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 99, 100, 101, 102, 103, 104, 113, 114, 115, 117, 118, 120, 121, 122, 123, 124, 125, 126, 128, 130, 131, 132, 133, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 214, 218, 219, 228, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 448, 449, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 472, 473, 474, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 493, 494, 495, 496, 499, 500, 501, 502, 503, 505, 506, 507, 508, 509, 510, 511, 513, 514, 515, 516, 517, 518, 519, 520, 522, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 632, 636, 637, 638, 639, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 707, 709, 714, 715, 725, 734, 735, 741, 745], "instanc": [2, 3, 4, 5, 6, 13, 14, 15, 16, 27, 28, 43, 44, 64, 65, 66, 67, 75, 76, 77, 78, 89, 90, 105, 106, 110, 114, 115, 117, 118, 121, 123, 125, 126, 131, 132, 133, 146, 154, 156, 158, 159, 160, 161, 162, 163, 167, 178, 219, 228, 260, 269, 270, 271, 279, 280, 282, 284, 290, 294, 297, 299, 312, 314, 315, 316, 317, 321, 329, 340, 348, 349, 351, 379, 394, 395, 399, 401, 414, 416, 427, 429, 430, 432, 436, 437, 441, 445, 446, 447, 458, 469, 481, 505, 507, 527, 530, 533, 539, 540, 541, 542, 543, 567, 568, 570, 577, 578, 579, 588, 590, 591, 593, 597, 599, 603, 604, 605, 606, 613, 615, 644, 645, 647, 648, 651, 652, 655, 656, 657, 658, 659, 660, 661, 662, 665, 666, 668, 672, 673, 675, 676, 678, 693, 697, 698, 700, 714, 715], "args_to_ivi": 2, "arg": [2, 3, 4, 45, 49, 64, 65, 111, 128, 130, 132, 219, 228, 243, 247, 251, 263, 445, 494, 714, 715, 737, 738], "include_deriv": [2, 3, 4, 5, 6, 626, 628, 638], "none": [2, 3, 4, 5, 6, 13, 14, 23, 24, 25, 26, 27, 28, 29, 30, 37, 38, 39, 40, 41, 42, 45, 47, 50, 57, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 113, 115, 118, 122, 123, 124, 125, 126, 128, 130, 132, 133, 156, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 174, 175, 176, 177, 179, 180, 181, 182, 183, 184, 185, 186, 192, 194, 197, 198, 199, 202, 205, 219, 228, 229, 237, 238, 261, 262, 263, 264, 267, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 449, 455, 456, 458, 459, 460, 462, 463, 464, 465, 466, 467, 469, 470, 475, 477, 478, 482, 488, 490, 493, 494, 495, 496, 501, 502, 508, 511, 514, 516, 518, 519, 520, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 632, 637, 638, 639, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 659, 660, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 714, 715, 716, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748], "kwarg": [2, 3, 4, 45, 49, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 128, 130, 132, 219, 228, 243, 247, 251, 445, 487, 714, 715, 737, 738], "keyword": [2, 3, 4, 64, 65, 66, 67, 68, 113, 123, 124, 125, 126, 131, 167, 178, 219, 228, 229, 243, 247, 251, 445, 450, 487, 626, 632, 672, 691, 737, 738], "variabl": [2, 3, 4, 5, 6, 64, 65, 66, 67, 114, 119, 122, 123, 125, 126, 131, 132, 133, 145, 445, 453, 479, 480, 481, 482, 483, 484, 486, 503, 511, 514, 515, 516, 517, 518, 519, 520, 522, 525, 527, 538, 540, 559, 622, 623, 624, 625, 644, 645, 647, 704, 714, 715, 716, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748], "form": [2, 3, 4, 5, 6, 60, 64, 65, 107, 118, 132, 133, 167, 169, 179, 182, 183, 445, 449, 511, 514, 516, 518, 519, 520, 527, 540, 541, 543, 544, 545, 546, 547, 553, 554, 556, 557, 559, 560, 561, 563, 626, 628, 638], "all": [2, 3, 4, 5, 6, 41, 42, 43, 44, 59, 60, 61, 64, 65, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 130, 131, 132, 133, 144, 145, 146, 154, 164, 165, 167, 168, 182, 183, 219, 228, 253, 259, 445, 446, 448, 451, 452, 471, 491, 506, 527, 537, 540, 559, 562, 565, 577, 591, 593, 603, 605, 622, 623, 624, 625, 626, 627, 628, 637, 638, 639, 648, 649, 652, 697, 704, 707, 709], "nest": [2, 3, 4, 5, 6, 64, 65, 66, 67, 68, 113, 118, 121, 122, 130, 131, 132, 145, 219, 243, 247, 251, 445, 505, 622, 623, 624, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 737, 738, 741, 742, 743, 744, 745, 746], "otherwis": [2, 3, 4, 5, 6, 45, 57, 64, 65, 121, 123, 124, 126, 128, 130, 167, 168, 186, 192, 195, 197, 198, 199, 219, 238, 269, 352, 354, 355, 357, 358, 360, 445, 453, 508, 511, 517, 522, 540, 541, 543, 564, 565, 622, 623, 624, 626, 639, 655, 656, 657, 659, 672, 676, 678, 679, 681, 682, 684, 685, 687, 688, 690, 691, 694, 696, 697, 698, 700, 701, 703], "argument": [2, 3, 4, 5, 6, 45, 49, 50, 59, 64, 65, 66, 67, 68, 110, 112, 113, 114, 115, 117, 118, 119, 121, 122, 128, 130, 131, 164, 165, 167, 168, 186, 210, 219, 228, 229, 243, 247, 251, 269, 279, 282, 284, 315, 317, 340, 427, 429, 430, 432, 436, 445, 449, 450, 454, 462, 469, 487, 494, 527, 530, 539, 577, 603, 605, 626, 632, 644, 645, 647, 672, 676, 678, 691, 697, 698, 700, 707, 709, 714, 715, 737, 738], "ar": [2, 3, 4, 59, 60, 61, 64, 65, 66, 67, 68, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 144, 145, 146, 154, 167, 168, 219, 228, 229, 253, 257, 259, 263, 269, 318, 385, 387, 388, 390, 414, 416, 420, 423, 436, 445, 446, 448, 451, 452, 453, 471, 477, 478, 482, 489, 491, 503, 527, 536, 540, 542, 548, 550, 551, 553, 556, 560, 561, 564, 577, 578, 580, 591, 593, 603, 605, 626, 628, 632, 638, 648, 651, 652, 655, 656, 657, 658, 660, 661, 704, 747, 748], "unchang": [2, 3, 4, 5, 6], "paramet": [2, 3, 4, 5, 6, 43, 44, 45, 49, 50, 64, 65, 66, 67, 68, 105, 106, 113, 114, 117, 130, 131, 144, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 218, 219, 228, 229, 232, 233, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 255, 257, 258, 259, 260, 261, 262, 263, 264, 265, 268, 269, 270, 272, 273, 275, 276, 278, 279, 281, 282, 284, 285, 287, 288, 290, 291, 293, 294, 296, 297, 299, 300, 302, 303, 305, 306, 308, 309, 311, 312, 314, 315, 317, 318, 320, 321, 323, 324, 326, 327, 329, 330, 333, 334, 336, 337, 339, 340, 342, 343, 345, 346, 348, 349, 351, 352, 354, 355, 357, 358, 360, 361, 363, 364, 366, 367, 369, 370, 372, 373, 375, 376, 378, 379, 381, 382, 384, 385, 387, 388, 390, 391, 393, 394, 395, 396, 398, 399, 401, 402, 404, 405, 407, 408, 410, 411, 413, 414, 416, 417, 419, 420, 423, 424, 426, 427, 429, 430, 432, 433, 435, 436, 438, 439, 441, 442, 444, 445, 446, 448, 449, 450, 451, 452, 453, 454, 455, 456, 459, 460, 462, 463, 464, 465, 466, 467, 468, 469, 470, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 490, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 505, 506, 507, 508, 509, 510, 511, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 550, 551, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 570, 571, 573, 574, 576, 577, 578, 580, 582, 584, 585, 587, 588, 590, 591, 593, 594, 596, 597, 599, 600, 602, 603, 605, 606, 607, 609, 610, 612, 613, 615, 616, 618, 619, 621, 622, 623, 624, 625, 626, 627, 628, 629, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 668, 669, 671, 672, 673, 675, 676, 678, 679, 681, 682, 684, 685, 687, 688, 690, 691, 693, 694, 696, 697, 698, 700, 701, 703, 707, 709, 714, 715, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748], "iter": [2, 3, 4, 5, 6, 43, 44, 61, 64, 65, 66, 67, 68, 105, 106, 122, 128, 131, 164, 165, 219, 241, 242, 244, 245, 246, 247, 250, 263, 445, 446, 448, 494, 499, 577, 585, 587, 597, 599, 606, 616, 618, 619, 621, 626, 627, 628, 632, 636, 637, 638], "ani": [2, 3, 4, 41, 42, 43, 44, 45, 49, 57, 59, 60, 61, 64, 65, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 121, 122, 123, 124, 125, 126, 128, 130, 131, 132, 133, 144, 145, 164, 165, 167, 169, 179, 219, 264, 269, 279, 282, 284, 315, 317, 327, 329, 340, 348, 349, 351, 364, 366, 427, 429, 430, 432, 436, 445, 446, 448, 462, 463, 464, 465, 466, 469, 476, 483, 484, 485, 486, 501, 502, 511, 515, 527, 530, 539, 577, 603, 605, 622, 623, 624, 625, 626, 632, 636, 644, 645, 647, 648, 652, 672, 676, 678, 697, 698, 700, 704], "The": [2, 3, 4, 5, 6, 45, 49, 50, 58, 59, 61, 64, 65, 66, 67, 68, 107, 108, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 131, 132, 133, 144, 156, 157, 158, 161, 163, 164, 165, 167, 168, 173, 177, 178, 182, 183, 186, 190, 191, 192, 196, 201, 203, 204, 206, 209, 214, 218, 219, 228, 229, 235, 236, 237, 238, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 257, 258, 259, 260, 261, 262, 263, 265, 268, 269, 270, 272, 273, 275, 276, 278, 279, 281, 282, 284, 285, 287, 288, 290, 291, 293, 294, 296, 297, 299, 300, 302, 303, 305, 306, 308, 309, 311, 312, 314, 315, 317, 318, 320, 321, 323, 324, 326, 327, 329, 330, 333, 334, 336, 337, 339, 340, 342, 343, 345, 346, 348, 349, 351, 352, 354, 355, 357, 358, 360, 361, 363, 364, 366, 367, 369, 370, 372, 376, 378, 379, 381, 382, 384, 385, 387, 388, 390, 391, 393, 396, 398, 402, 404, 408, 410, 411, 413, 414, 416, 417, 419, 420, 423, 424, 426, 427, 429, 436, 438, 441, 442, 444, 445, 449, 451, 454, 455, 461, 462, 468, 470, 479, 480, 481, 483, 484, 485, 486, 488, 493, 494, 495, 496, 497, 500, 501, 502, 510, 511, 513, 514, 516, 518, 519, 520, 522, 525, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 551, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 567, 568, 570, 571, 573, 574, 576, 577, 582, 584, 585, 587, 588, 590, 591, 593, 594, 596, 597, 599, 600, 602, 606, 616, 618, 622, 623, 624, 625, 626, 627, 628, 629, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 647, 648, 649, 651, 655, 656, 657, 658, 660, 661, 662, 664, 665, 666, 668, 669, 671, 672, 673, 675, 676, 678, 679, 681, 682, 684, 685, 687, 688, 690, 691, 693, 694, 696, 697, 698, 700, 701, 703, 704, 714, 715, 725, 726, 727, 728, 729, 730, 731, 732, 733, 735, 736, 737, 738, 739, 740, 741, 743, 744, 745], "posit": [2, 3, 4, 13, 14, 75, 76, 126, 131, 144, 166, 167, 172, 186, 202, 219, 243, 247, 251, 269, 270, 272, 352, 354, 355, 357, 396, 398, 411, 413, 445, 468, 540, 541, 577, 588, 590, 603, 605, 648, 653, 655, 658, 697, 698, 700, 701, 703, 714, 715], "check": [2, 3, 4, 5, 6, 59, 60, 61, 64, 65, 108, 109, 122, 127, 128, 130, 131, 132, 133, 144, 186, 196, 203, 204, 206, 218, 219, 258, 268, 445, 453, 466, 476, 483, 484, 485, 486, 503, 510, 511, 517, 540, 545, 626, 627, 636, 637, 638, 704], "option": [2, 3, 4, 5, 6, 43, 44, 45, 50, 64, 65, 105, 106, 108, 109, 113, 114, 115, 118, 122, 123, 124, 125, 126, 128, 133, 145, 156, 158, 159, 161, 164, 165, 167, 168, 169, 170, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 184, 185, 186, 196, 197, 198, 199, 206, 218, 219, 238, 262, 263, 264, 269, 270, 272, 273, 275, 276, 278, 279, 281, 282, 284, 285, 287, 288, 291, 293, 297, 299, 300, 302, 303, 305, 306, 308, 309, 311, 312, 314, 315, 317, 318, 320, 321, 323, 334, 336, 337, 339, 340, 352, 354, 355, 357, 358, 360, 361, 363, 367, 369, 370, 372, 373, 375, 376, 378, 379, 381, 382, 384, 385, 387, 388, 390, 391, 393, 396, 398, 399, 401, 402, 404, 408, 410, 411, 413, 414, 416, 417, 419, 420, 423, 424, 426, 427, 429, 430, 432, 433, 435, 436, 445, 449, 456, 459, 460, 461, 467, 469, 488, 490, 493, 494, 501, 502, 511, 522, 527, 530, 533, 534, 539, 540, 551, 553, 556, 565, 567, 568, 570, 571, 573, 574, 576, 577, 578, 580, 582, 584, 588, 590, 591, 593, 594, 596, 597, 599, 603, 605, 606, 607, 609, 610, 612, 613, 615, 622, 623, 624, 625, 626, 627, 632, 637, 638, 644, 645, 647, 648, 649, 650, 651, 652, 655, 656, 657, 665, 666, 668, 669, 671, 672, 673, 675, 676, 678, 679, 681, 682, 684, 685, 687, 688, 690, 691, 693, 694, 696, 697, 698, 700, 701, 703], "dict": [2, 3, 4, 5, 6, 45, 57, 64, 65, 66, 67, 68, 122, 131, 132, 219, 228, 229, 238, 241, 244, 245, 246, 247, 445, 449, 463, 464, 465, 626, 628, 629, 632, 635, 638, 639], "type": [2, 3, 4, 5, 6, 13, 14, 23, 24, 25, 26, 27, 28, 29, 30, 37, 38, 39, 40, 41, 42, 43, 44, 45, 51, 57, 64, 65, 66, 67, 68, 75, 76, 77, 78, 79, 80, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 99, 100, 101, 102, 103, 104, 105, 106, 108, 110, 112, 113, 114, 115, 120, 121, 122, 124, 125, 126, 128, 130, 131, 133, 146, 147, 148, 149, 150, 151, 152, 153, 154, 156, 158, 159, 160, 161, 162, 163, 164, 165, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 214, 218, 219, 235, 236, 237, 238, 239, 241, 251, 252, 253, 254, 255, 256, 257, 258, 260, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 448, 449, 451, 452, 454, 455, 456, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 472, 473, 474, 476, 477, 479, 480, 481, 483, 484, 485, 486, 490, 493, 494, 495, 496, 499, 501, 502, 503, 505, 506, 507, 509, 510, 511, 513, 514, 516, 517, 518, 519, 520, 522, 524, 527, 528, 530, 532, 533, 534, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 632, 636, 637, 638, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736], "bool": [2, 3, 4, 5, 6, 64, 65, 105, 106, 115, 122, 123, 125, 133, 164, 165, 167, 174, 186, 192, 195, 197, 198, 199, 200, 203, 206, 207, 208, 218, 219, 238, 239, 254, 263, 266, 269, 297, 299, 300, 302, 306, 308, 312, 314, 327, 329, 346, 348, 349, 351, 352, 354, 355, 357, 358, 360, 361, 363, 364, 366, 382, 384, 385, 387, 388, 390, 402, 404, 445, 446, 448, 451, 452, 459, 462, 466, 468, 474, 476, 481, 483, 484, 485, 486, 499, 509, 510, 511, 522, 540, 541, 551, 560, 565, 577, 606, 622, 623, 624, 625, 626, 627, 628, 632, 636, 637, 638, 648, 649, 655, 656, 657, 665, 666, 668, 669, 671, 672, 676, 678, 679, 681, 682, 684, 685, 687, 688, 690, 691, 694, 696, 697, 698, 700, 701, 703], "whether": [2, 3, 4, 5, 6, 64, 65, 66, 67, 68, 105, 106, 107, 108, 123, 125, 126, 156, 157, 164, 165, 186, 192, 200, 206, 207, 208, 218, 219, 238, 239, 250, 254, 255, 258, 259, 263, 266, 268, 269, 358, 360, 445, 446, 448, 451, 452, 459, 462, 466, 468, 474, 476, 478, 481, 482, 483, 484, 485, 486, 487, 499, 503, 509, 510, 511, 514, 515, 516, 517, 518, 519, 520, 522, 527, 535, 540, 545, 622, 623, 624, 625, 626, 627, 628, 632, 636, 637, 638, 639, 648, 649, 697, 698, 700, 701, 703, 714, 715, 725, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746], "also": [2, 3, 4, 5, 6, 13, 14, 15, 16, 27, 28, 59, 60, 64, 65, 75, 76, 77, 78, 89, 90, 93, 94, 107, 108, 109, 112, 113, 114, 115, 117, 118, 120, 121, 122, 123, 124, 125, 126, 128, 130, 131, 132, 133, 144, 145, 167, 178, 269, 270, 271, 279, 280, 282, 284, 290, 294, 297, 299, 312, 314, 315, 316, 317, 321, 340, 379, 414, 416, 427, 429, 430, 432, 436, 437, 441, 445, 446, 447, 469, 481, 511, 514, 527, 530, 536, 539, 540, 543, 577, 578, 579, 581, 588, 590, 591, 593, 603, 604, 605, 622, 623, 624, 625, 626, 627, 628, 636, 637, 638, 644, 645, 647, 660, 661, 662, 665, 666, 668, 672, 676, 678, 697, 698, 700, 725, 735], "recurs": [2, 3, 4, 5, 6, 64, 65, 108, 111, 118, 122, 132, 145, 626, 627, 628, 636, 637, 638], "deriv": [2, 3, 4, 5, 6, 123, 124, 130, 132, 167, 171, 175, 181, 185, 511, 513, 514, 516, 518, 519, 520, 626, 628, 638, 737, 741, 745, 747], "from": [2, 3, 4, 5, 6, 43, 44, 45, 49, 50, 51, 59, 60, 61, 64, 65, 66, 67, 68, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 117, 119, 121, 122, 123, 124, 125, 126, 128, 130, 131, 132, 133, 144, 145, 167, 168, 169, 171, 173, 174, 175, 178, 179, 181, 185, 186, 195, 210, 219, 228, 229, 238, 253, 257, 262, 263, 269, 346, 427, 429, 445, 462, 469, 470, 505, 511, 514, 518, 527, 535, 538, 540, 544, 560, 564, 577, 591, 593, 600, 602, 607, 609, 622, 623, 624, 625, 626, 628, 638, 639, 648, 649, 650, 651, 652, 655, 659, 660, 661, 663, 672, 685, 687, 688, 690, 691, 694, 696, 697, 698, 700, 701, 703, 704, 710, 714, 715, 725, 733, 736, 741, 745], "tupl": [2, 3, 4, 5, 6, 64, 65, 113, 122, 123, 124, 126, 130, 131, 132, 145, 164, 165, 167, 169, 170, 174, 179, 180, 184, 186, 194, 204, 219, 238, 445, 468, 500, 527, 530, 533, 534, 540, 553, 556, 560, 562, 565, 577, 582, 584, 585, 587, 591, 593, 594, 596, 603, 605, 607, 609, 610, 612, 619, 621, 622, 623, 624, 625, 626, 628, 629, 631, 633, 634, 635, 637, 638, 640, 641, 642, 643, 648, 651, 652, 655, 658, 660, 661, 662, 663, 672, 676, 678, 679, 681, 682, 684, 685, 687, 688, 690, 691, 694, 696, 697, 698, 700, 701, 703], "list": [2, 3, 4, 5, 6, 43, 44, 64, 65, 105, 106, 108, 110, 111, 113, 115, 123, 124, 126, 128, 131, 132, 133, 145, 167, 168, 169, 170, 178, 179, 180, 184, 186, 193, 219, 228, 229, 238, 240, 241, 244, 245, 248, 249, 263, 445, 452, 500, 505, 509, 527, 528, 529, 530, 531, 532, 533, 534, 540, 562, 577, 582, 584, 591, 593, 606, 610, 612, 626, 627, 628, 632, 637, 638, 644, 645, 647, 655, 658, 697, 698, 700, 701, 703, 704, 725, 726, 727, 728, 729, 730, 731, 732], "default": [2, 3, 4, 5, 6, 43, 44, 45, 50, 64, 65, 66, 67, 68, 105, 106, 109, 114, 115, 118, 119, 122, 123, 124, 126, 132, 156, 157, 158, 159, 161, 164, 165, 167, 168, 169, 170, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 192, 197, 198, 199, 200, 219, 228, 229, 238, 239, 243, 244, 245, 246, 247, 248, 249, 250, 251, 258, 260, 261, 262, 263, 264, 267, 268, 269, 270, 272, 273, 275, 276, 278, 279, 281, 282, 284, 285, 287, 288, 291, 293, 297, 299, 300, 302, 303, 305, 306, 308, 309, 311, 312, 314, 315, 317, 318, 320, 321, 323, 334, 336, 337, 339, 340, 352, 354, 355, 357, 358, 360, 361, 363, 367, 369, 370, 372, 373, 375, 376, 378, 379, 381, 382, 384, 385, 387, 388, 390, 391, 393, 396, 398, 399, 401, 402, 404, 408, 410, 411, 413, 414, 416, 417, 419, 420, 423, 424, 426, 427, 429, 430, 432, 433, 435, 436, 445, 446, 448, 449, 455, 456, 459, 460, 467, 468, 469, 474, 475, 476, 478, 481, 482, 483, 484, 486, 487, 488, 490, 492, 493, 494, 497, 499, 501, 502, 509, 510, 511, 513, 514, 515, 516, 517, 518, 519, 520, 522, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 544, 551, 553, 556, 557, 560, 562, 563, 564, 565, 567, 568, 570, 571, 573, 574, 576, 577, 578, 580, 582, 584, 585, 587, 588, 590, 591, 593, 594, 596, 597, 599, 603, 605, 606, 607, 609, 610, 612, 613, 615, 622, 623, 624, 625, 626, 627, 628, 632, 636, 637, 638, 639, 644, 645, 647, 648, 649, 650, 651, 652, 653, 655, 656, 657, 658, 660, 661, 662, 665, 666, 668, 669, 671, 672, 673, 675, 676, 678, 679, 681, 682, 684, 685, 687, 688, 690, 691, 693, 694, 696, 697, 698, 700, 701, 703, 714, 715, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748], "fals": [2, 3, 4, 5, 6, 15, 16, 37, 38, 39, 40, 41, 42, 45, 52, 53, 54, 55, 56, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 115, 122, 125, 131, 132, 133, 186, 192, 195, 200, 219, 238, 239, 250, 254, 255, 258, 263, 266, 268, 269, 297, 299, 329, 330, 332, 346, 348, 349, 351, 352, 354, 355, 357, 358, 360, 361, 363, 385, 387, 388, 390, 420, 422, 445, 446, 447, 448, 451, 452, 459, 462, 466, 468, 474, 481, 483, 484, 486, 487, 499, 509, 511, 514, 515, 516, 517, 518, 519, 520, 540, 541, 551, 560, 565, 577, 578, 581, 606, 622, 623, 624, 625, 626, 627, 628, 632, 636, 637, 638, 639, 648, 649, 655, 656, 657, 659, 660, 661, 662, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 714, 715, 737, 738, 741, 742, 743, 744, 745, 746], "str": [2, 3, 4, 45, 50, 64, 65, 123, 124, 167, 178, 186, 190, 196, 197, 198, 201, 202, 205, 206, 207, 208, 211, 212, 213, 218, 219, 235, 238, 239, 241, 244, 245, 246, 247, 263, 445, 449, 461, 463, 464, 465, 488, 493, 494, 527, 528, 530, 532, 533, 534, 540, 557, 622, 623, 624, 625, 626, 632, 672, 673, 675, 693], "kei": [2, 3, 4, 64, 65, 66, 67, 68, 122, 131, 219, 231, 445, 449, 457, 527, 538, 539, 622, 623, 624, 626, 629, 635, 639, 714, 715, 725, 736, 741, 745], "word": [2, 3, 4, 167, 168, 648, 652, 714, 715], "ret": [2, 3, 4, 5, 6, 45, 49, 50, 57, 64, 65, 113, 114, 128, 133, 156, 157, 158, 159, 160, 161, 162, 163, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 190, 191, 192, 193, 194, 195, 196, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 218, 219, 228, 235, 236, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 262, 263, 264, 265, 266, 268, 269, 270, 272, 273, 275, 276, 278, 279, 281, 282, 284, 285, 287, 288, 290, 291, 293, 294, 296, 297, 299, 300, 302, 303, 305, 306, 308, 309, 311, 312, 314, 315, 317, 318, 320, 321, 323, 324, 326, 327, 329, 330, 333, 334, 336, 337, 339, 340, 342, 343, 345, 346, 348, 349, 351, 352, 354, 355, 357, 358, 360, 361, 363, 364, 366, 367, 369, 370, 372, 373, 375, 376, 378, 379, 381, 382, 384, 385, 387, 388, 390, 391, 393, 394, 395, 396, 398, 399, 401, 402, 404, 405, 407, 408, 410, 411, 413, 414, 416, 417, 419, 420, 423, 424, 426, 427, 429, 430, 432, 433, 435, 436, 438, 439, 441, 442, 444, 445, 446, 448, 449, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 473, 474, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 490, 493, 494, 499, 501, 502, 503, 505, 506, 507, 509, 510, 511, 513, 514, 515, 516, 517, 518, 519, 520, 522, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 550, 551, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 570, 571, 573, 574, 576, 577, 578, 580, 582, 584, 585, 587, 588, 590, 591, 593, 594, 596, 597, 599, 600, 602, 603, 605, 606, 607, 609, 610, 612, 613, 615, 616, 618, 619, 621, 622, 623, 624, 625, 626, 627, 628, 632, 636, 637, 638, 644, 645, 647, 648, 649, 650, 651, 652, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 668, 669, 671, 672, 673, 675, 676, 678, 679, 681, 682, 684, 685, 687, 688, 690, 691, 693, 694, 696, 697, 698, 700, 701, 703, 707, 709, 714, 715, 741, 745], "same": [2, 3, 4, 59, 61, 64, 65, 108, 109, 111, 113, 115, 117, 118, 121, 122, 124, 125, 126, 128, 130, 132, 133, 167, 168, 171, 175, 178, 181, 182, 183, 185, 186, 192, 193, 194, 219, 228, 229, 263, 269, 270, 272, 279, 300, 302, 315, 317, 340, 396, 398, 411, 413, 414, 416, 417, 419, 442, 444, 445, 467, 469, 470, 490, 493, 494, 511, 517, 522, 527, 528, 529, 530, 531, 532, 533, 534, 539, 540, 541, 542, 543, 544, 545, 546, 547, 554, 556, 557, 559, 560, 563, 564, 577, 582, 584, 591, 593, 594, 596, 603, 605, 607, 609, 610, 612, 622, 623, 624, 626, 639, 660, 661, 662, 664, 665, 666, 668, 669, 671, 672, 673, 675, 676, 678, 679, 681, 682, 684, 685, 687, 691, 693, 694, 696, 704, 725, 726, 727, 728, 729, 730, 731, 732], "convert": [2, 3, 4, 5, 6, 61, 64, 65, 121, 128, 145, 146, 154, 167, 169, 179, 186, 190, 191, 219, 235, 236, 237, 238, 258, 265, 268, 445, 500, 506, 507, 540, 566, 626, 628, 638, 639, 715], "args_to_n": [2, 125, 130], "nativ": [2, 4, 5, 6, 45, 51, 64, 65, 123, 125, 130, 131, 167, 179, 186, 190, 191, 196, 219, 235, 236, 237, 238, 239, 258, 265, 268, 445, 481, 483, 486, 714, 715], "backend": [2, 4, 6, 49, 50, 51, 57, 59, 64, 65, 109, 110, 112, 114, 116, 117, 118, 120, 121, 122, 123, 124, 125, 126, 129, 130, 133, 186, 203, 204, 206, 218, 219, 254, 256, 266, 445, 478, 481, 482, 488, 511, 514, 516, 518, 519, 520, 525, 704, 710, 714, 715, 741, 742, 743, 744, 745, 746], "to_ivi": [2, 64, 65, 130, 626, 639], "x": [2, 5, 6, 13, 14, 27, 28, 45, 49, 57, 64, 65, 66, 67, 75, 76, 89, 90, 93, 94, 99, 100, 111, 113, 114, 115, 118, 119, 122, 125, 126, 128, 130, 131, 132, 133, 156, 157, 158, 159, 160, 161, 162, 163, 167, 169, 171, 173, 175, 178, 179, 181, 182, 183, 184, 185, 186, 192, 194, 200, 219, 238, 239, 240, 241, 244, 245, 253, 257, 262, 264, 269, 270, 272, 273, 275, 276, 278, 279, 280, 282, 284, 285, 287, 288, 290, 291, 293, 294, 296, 297, 299, 300, 302, 312, 314, 315, 316, 317, 318, 320, 321, 323, 329, 330, 333, 334, 337, 339, 340, 346, 348, 349, 351, 352, 354, 355, 357, 358, 360, 361, 363, 367, 369, 370, 372, 373, 375, 376, 378, 379, 385, 387, 394, 395, 399, 401, 405, 407, 414, 416, 417, 419, 420, 423, 424, 426, 427, 429, 430, 432, 436, 437, 438, 439, 441, 442, 444, 445, 451, 452, 453, 455, 456, 458, 459, 460, 462, 463, 464, 465, 466, 467, 468, 469, 470, 473, 474, 476, 477, 479, 480, 481, 483, 484, 485, 486, 490, 499, 503, 505, 506, 507, 509, 510, 511, 515, 517, 522, 524, 525, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 551, 552, 553, 554, 555, 556, 557, 558, 560, 561, 562, 563, 565, 567, 568, 570, 571, 573, 574, 576, 577, 578, 579, 580, 581, 582, 584, 585, 587, 588, 590, 591, 593, 594, 596, 597, 599, 600, 602, 603, 604, 605, 606, 607, 609, 610, 611, 612, 613, 615, 616, 618, 619, 621, 626, 627, 632, 636, 637, 638, 644, 645, 647, 648, 650, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 668, 669, 671, 672, 673, 675, 676, 678, 679, 681, 682, 684, 685, 687, 688, 690, 691, 693, 694, 696, 697, 698, 700, 701, 703, 704, 725, 736], "input": [2, 5, 6, 64, 65, 66, 67, 68, 75, 76, 77, 78, 89, 90, 93, 94, 113, 114, 115, 117, 118, 119, 121, 122, 123, 124, 125, 126, 128, 130, 131, 132, 133, 145, 146, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 167, 169, 171, 173, 175, 178, 179, 181, 182, 183, 185, 186, 192, 193, 195, 196, 197, 198, 199, 200, 201, 207, 208, 209, 210, 214, 219, 228, 229, 238, 239, 240, 241, 243, 244, 247, 251, 257, 263, 264, 269, 270, 272, 273, 275, 276, 278, 279, 281, 282, 284, 285, 287, 288, 290, 291, 293, 294, 296, 297, 299, 300, 302, 303, 305, 306, 308, 309, 311, 312, 314, 315, 317, 318, 320, 321, 323, 324, 326, 327, 329, 334, 336, 337, 339, 340, 342, 343, 345, 346, 348, 349, 351, 352, 354, 355, 357, 358, 360, 361, 363, 364, 366, 367, 369, 370, 372, 373, 375, 376, 378, 379, 381, 382, 384, 385, 387, 388, 390, 391, 393, 394, 395, 396, 398, 399, 401, 402, 404, 405, 407, 408, 410, 411, 413, 414, 416, 417, 419, 420, 423, 424, 426, 427, 429, 430, 432, 433, 435, 436, 438, 439, 441, 442, 444, 445, 446, 448, 449, 451, 452, 453, 455, 456, 458, 459, 460, 462, 463, 464, 465, 466, 467, 468, 469, 474, 476, 477, 479, 480, 481, 483, 484, 485, 486, 499, 500, 503, 505, 506, 507, 509, 510, 511, 515, 517, 522, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 550, 551, 553, 554, 555, 556, 557, 560, 561, 562, 563, 564, 565, 567, 568, 570, 571, 573, 574, 576, 577, 578, 580, 581, 582, 584, 585, 587, 588, 590, 591, 593, 594, 596, 597, 599, 603, 605, 606, 607, 609, 610, 612, 613, 615, 616, 618, 619, 621, 622, 623, 624, 625, 644, 645, 647, 648, 649, 650, 651, 652, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 668, 669, 671, 672, 673, 675, 676, 678, 679, 681, 682, 684, 685, 687, 688, 690, 691, 693, 694, 696, 697, 698, 700, 701, 703, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 739, 740], "an": [2, 5, 6, 43, 44, 60, 61, 64, 65, 105, 106, 108, 109, 110, 111, 113, 114, 115, 117, 118, 119, 121, 122, 123, 124, 125, 126, 128, 130, 131, 132, 133, 144, 145, 156, 159, 160, 162, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 192, 193, 194, 202, 207, 208, 210, 219, 241, 245, 264, 269, 270, 272, 273, 275, 276, 278, 279, 281, 282, 284, 285, 287, 288, 290, 291, 293, 294, 296, 297, 299, 300, 302, 303, 305, 306, 308, 309, 311, 312, 314, 315, 317, 318, 320, 321, 323, 324, 326, 327, 329, 334, 336, 337, 339, 340, 342, 343, 345, 346, 348, 349, 351, 352, 354, 355, 357, 358, 360, 361, 363, 364, 366, 367, 369, 370, 372, 373, 375, 376, 378, 379, 381, 382, 384, 385, 387, 388, 390, 391, 393, 394, 395, 396, 398, 399, 401, 402, 404, 408, 410, 411, 413, 414, 416, 417, 419, 420, 423, 424, 426, 427, 429, 430, 432, 433, 435, 436, 438, 441, 442, 444, 445, 454, 455, 456, 458, 467, 468, 469, 477, 481, 483, 484, 485, 486, 506, 507, 508, 511, 517, 522, 524, 525, 527, 530, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 550, 552, 553, 554, 556, 557, 558, 559, 560, 563, 564, 565, 577, 578, 580, 582, 584, 585, 587, 588, 590, 591, 593, 594, 596, 600, 602, 603, 605, 606, 607, 609, 610, 612, 613, 615, 616, 618, 619, 621, 626, 632, 644, 645, 647, 648, 650, 654, 655, 658, 659, 660, 661, 662, 663, 664, 665, 666, 668, 669, 671, 672, 673, 675, 676, 678, 679, 681, 682, 684, 685, 687, 688, 690, 691, 693, 694, 696, 697, 698, 700, 701, 703, 704, 714, 715, 737, 738, 741, 742, 743, 745], "If": [2, 5, 6, 45, 49, 50, 51, 59, 64, 65, 107, 108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 130, 131, 133, 145, 167, 168, 170, 171, 172, 174, 175, 178, 180, 181, 182, 183, 184, 185, 186, 192, 194, 210, 219, 238, 262, 269, 270, 272, 273, 275, 276, 278, 279, 281, 282, 284, 285, 287, 288, 291, 293, 315, 317, 318, 320, 321, 323, 334, 336, 337, 339, 340, 367, 369, 370, 372, 376, 378, 379, 381, 385, 387, 388, 390, 396, 398, 408, 410, 411, 413, 414, 416, 417, 419, 420, 423, 424, 426, 427, 429, 436, 442, 444, 445, 481, 511, 514, 516, 518, 519, 520, 540, 541, 542, 551, 553, 556, 557, 559, 560, 564, 565, 567, 568, 570, 571, 573, 574, 576, 577, 588, 590, 591, 593, 603, 605, 606, 607, 609, 610, 612, 622, 623, 624, 626, 638, 639, 648, 651, 652, 655, 656, 657, 658, 660, 661, 662, 664, 665, 666, 668, 669, 671, 672, 676, 678, 679, 681, 682, 684, 685, 687, 688, 690, 691, 694, 696, 697, 698, 700, 701, 703, 704], "set": [2, 5, 6, 36, 45, 49, 50, 51, 57, 59, 64, 65, 98, 107, 109, 112, 113, 118, 120, 121, 122, 123, 124, 125, 128, 130, 131, 219, 238, 248, 249, 260, 261, 262, 263, 269, 291, 293, 445, 446, 448, 495, 496, 497, 498, 511, 514, 516, 517, 518, 519, 520, 540, 542, 551, 553, 556, 559, 626, 627, 636, 637, 638, 642, 643, 648, 653, 655, 656, 661, 662, 663, 664, 665, 666, 668, 669, 671, 672, 688, 690, 694, 696, 725, 734, 741, 742, 743, 744, 745, 746], "appli": [2, 5, 6, 13, 14, 15, 16, 27, 28, 64, 65, 75, 76, 77, 78, 89, 90, 93, 94, 108, 109, 110, 114, 115, 117, 118, 120, 122, 123, 124, 125, 126, 128, 130, 131, 132, 133, 143, 145, 156, 157, 158, 159, 160, 161, 162, 163, 186, 210, 270, 271, 280, 290, 294, 315, 316, 379, 437, 441, 445, 446, 447, 463, 464, 465, 511, 518, 519, 527, 536, 538, 539, 540, 553, 556, 567, 568, 570, 571, 573, 574, 576, 577, 578, 579, 581, 603, 604, 610, 612, 622, 623, 624, 626, 632, 635, 638, 639, 644, 645, 647, 704, 711, 712, 713, 739, 740], "leaf": [2, 5, 6, 64, 65, 118, 122, 131, 626, 627, 636, 637], "contain": [2, 5, 6, 15, 16, 59, 62, 63, 64, 65, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 108, 109, 110, 111, 112, 114, 115, 117, 118, 123, 125, 126, 127, 128, 129, 132, 133, 145, 156, 159, 160, 162, 167, 168, 171, 173, 180, 182, 183, 184, 219, 240, 241, 244, 253, 257, 269, 270, 272, 273, 275, 276, 278, 279, 281, 282, 284, 285, 287, 288, 290, 291, 293, 294, 296, 297, 299, 300, 302, 303, 305, 306, 308, 309, 311, 312, 314, 315, 317, 318, 320, 321, 323, 324, 326, 327, 329, 330, 334, 336, 337, 339, 340, 342, 343, 345, 346, 348, 349, 351, 352, 354, 355, 357, 358, 360, 361, 363, 364, 366, 367, 369, 370, 372, 373, 375, 376, 378, 379, 381, 382, 384, 385, 387, 388, 390, 391, 393, 394, 395, 396, 398, 399, 401, 402, 404, 408, 410, 411, 413, 414, 416, 417, 419, 420, 423, 424, 426, 427, 429, 430, 432, 433, 435, 436, 438, 441, 442, 444, 445, 446, 447, 448, 449, 452, 455, 456, 458, 459, 466, 469, 476, 485, 505, 506, 507, 527, 530, 533, 534, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 550, 553, 554, 555, 556, 557, 559, 560, 561, 562, 563, 564, 565, 567, 568, 570, 571, 573, 574, 576, 577, 578, 580, 588, 590, 591, 593, 594, 596, 597, 599, 603, 605, 606, 613, 615, 622, 623, 624, 625, 626, 639, 644, 645, 647, 648, 649, 651, 652, 655, 656, 657, 658, 659, 660, 661, 662, 664, 665, 666, 668, 672, 673, 675, 676, 678, 679, 681, 682, 684, 685, 687, 688, 690, 691, 693, 694, 696, 697, 698, 700, 701, 703, 704, 725, 726, 727, 728, 729, 730, 731, 732, 734, 735, 736, 737, 738, 741, 745, 747, 748], "within": [2, 5, 6, 109, 117, 132, 145, 167, 168, 648, 652], "union": [2, 5, 6, 64, 65, 113, 115, 118, 121, 122, 123, 124, 125, 126, 128, 133, 156, 158, 159, 160, 161, 162, 163, 164, 165, 167, 168, 169, 170, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 190, 191, 192, 193, 194, 196, 197, 198, 199, 200, 201, 202, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 218, 219, 235, 236, 237, 238, 239, 241, 244, 245, 246, 247, 252, 258, 260, 262, 263, 264, 265, 268, 269, 270, 272, 273, 275, 276, 278, 279, 281, 282, 284, 285, 287, 288, 290, 291, 293, 294, 296, 297, 299, 300, 302, 303, 305, 306, 308, 309, 311, 312, 314, 315, 317, 318, 320, 321, 323, 324, 326, 327, 329, 330, 333, 334, 336, 337, 339, 340, 342, 343, 345, 346, 348, 349, 351, 352, 354, 355, 357, 358, 360, 361, 363, 364, 366, 367, 369, 370, 372, 373, 375, 376, 378, 379, 381, 382, 384, 385, 387, 388, 390, 391, 393, 394, 395, 396, 398, 399, 401, 402, 404, 405, 407, 408, 410, 411, 413, 414, 416, 417, 419, 420, 423, 424, 426, 427, 429, 430, 432, 433, 435, 436, 438, 439, 441, 442, 444, 445, 446, 448, 451, 452, 455, 456, 459, 460, 463, 464, 465, 467, 468, 469, 470, 474, 476, 477, 479, 480, 481, 490, 493, 494, 499, 500, 505, 506, 507, 509, 510, 511, 513, 514, 516, 518, 519, 520, 522, 524, 527, 528, 530, 532, 533, 534, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 550, 551, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 570, 571, 573, 574, 576, 577, 578, 580, 582, 584, 585, 587, 588, 590, 591, 593, 594, 596, 597, 599, 600, 602, 603, 605, 606, 607, 609, 610, 612, 613, 615, 616, 618, 619, 621, 622, 623, 624, 625, 626, 627, 628, 637, 638, 644, 645, 647, 648, 649, 650, 651, 652, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 668, 669, 671, 672, 673, 675, 676, 678, 679, 681, 682, 684, 688, 690, 691, 693, 694, 696, 697, 698, 700, 701, 703], "nativearrai": [2, 5, 6, 15, 16, 113, 115, 118, 121, 122, 125, 126, 128, 130, 133, 146, 154, 156, 158, 159, 160, 161, 162, 163, 167, 168, 169, 171, 175, 176, 177, 178, 179, 181, 182, 183, 185, 186, 192, 193, 194, 200, 202, 205, 207, 208, 210, 214, 219, 238, 239, 241, 257, 263, 264, 269, 270, 272, 273, 275, 276, 278, 279, 281, 282, 284, 285, 287, 288, 290, 291, 293, 294, 296, 297, 299, 300, 302, 303, 305, 306, 308, 309, 311, 312, 314, 315, 317, 318, 320, 321, 323, 324, 326, 327, 329, 330, 333, 334, 336, 337, 339, 340, 342, 343, 345, 346, 348, 349, 351, 352, 354, 355, 357, 358, 360, 361, 363, 364, 366, 367, 369, 370, 372, 373, 375, 376, 378, 379, 381, 382, 384, 385, 387, 388, 390, 391, 393, 394, 395, 396, 398, 399, 401, 402, 404, 405, 407, 408, 410, 411, 413, 414, 416, 417, 419, 420, 423, 424, 426, 427, 429, 430, 432, 433, 435, 436, 438, 439, 441, 442, 444, 445, 446, 447, 448, 451, 452, 455, 456, 458, 459, 460, 463, 464, 465, 467, 468, 469, 470, 474, 476, 477, 479, 480, 481, 490, 493, 494, 499, 505, 506, 507, 509, 510, 511, 513, 514, 516, 518, 519, 520, 522, 524, 527, 528, 530, 532, 533, 534, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 550, 551, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 570, 571, 573, 574, 576, 577, 578, 580, 582, 584, 585, 587, 588, 590, 591, 593, 594, 596, 597, 599, 600, 602, 603, 605, 606, 607, 609, 610, 612, 613, 615, 616, 618, 619, 621, 626, 628, 638, 644, 645, 647, 648, 649, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 668, 669, 671, 672, 673, 675, 676, 678, 679, 681, 682, 684, 688, 690, 691, 693, 694, 696, 697, 698, 700, 701, 703], "mayb": [2, 5, 6, 108, 128, 130], "manner": [2, 5, 6, 59, 64, 65, 113, 114, 124, 131, 144, 145, 626, 638], "so": [2, 5, 6, 13, 14, 15, 16, 27, 28, 59, 60, 64, 65, 75, 76, 77, 78, 89, 90, 93, 94, 108, 109, 113, 114, 115, 117, 120, 121, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 145, 146, 154, 270, 271, 280, 290, 294, 315, 316, 379, 437, 441, 446, 447, 578, 579, 581, 603, 604, 626, 627, 637, 704], "travers": [2, 5, 6, 64, 65, 122, 128, 130, 626, 638], "lowest": [2, 5, 6, 64, 65, 118, 145, 626, 638, 648, 650], "leav": [2, 5, 6, 64, 65, 66, 67, 114, 115, 117, 118, 122, 123, 125, 126, 131, 132, 577, 610, 612, 626, 627, 628, 636, 637, 638], "search": [2, 5, 6, 34, 59, 64, 65, 96, 108, 113, 115, 117, 656, 657, 658, 659], "s": [2, 5, 6, 45, 49, 50, 51, 57, 60, 61, 64, 65, 107, 108, 109, 111, 112, 114, 115, 117, 119, 121, 122, 123, 124, 125, 126, 128, 130, 131, 132, 133, 144, 145, 166, 167, 178, 182, 183, 186, 203, 204, 219, 238, 262, 269, 411, 413, 445, 452, 511, 514, 516, 518, 520, 540, 560, 561, 626, 632, 638, 672, 688, 690, 694, 696, 704, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 745, 747, 748], "case": [2, 5, 6, 60, 64, 65, 66, 67, 68, 108, 109, 110, 113, 114, 115, 118, 119, 121, 122, 123, 124, 125, 126, 128, 130, 132, 133, 145, 167, 178, 219, 258, 265, 268, 269, 270, 272, 273, 275, 276, 278, 279, 281, 282, 284, 285, 287, 288, 291, 293, 312, 314, 315, 317, 318, 320, 321, 323, 334, 336, 337, 339, 340, 367, 369, 370, 372, 376, 378, 379, 381, 396, 398, 408, 410, 411, 413, 414, 416, 417, 419, 420, 423, 424, 426, 427, 429, 436, 442, 444, 445, 481, 493, 494, 540, 551, 577, 600, 602, 626, 629, 635, 672, 676, 678, 679, 681, 682, 684, 688, 690, 691, 694, 696, 725, 736, 737, 738, 741, 745], "to_n": [2, 64, 65], "item": [2, 6, 43, 44, 64, 65, 123, 128, 130, 131, 133, 186, 197, 219, 228, 229, 231, 238, 240, 242, 244, 246, 250, 445, 457, 475, 501, 502, 626, 631, 632, 633, 634, 638, 642, 643, 704, 737, 738], "convers": [3, 4, 5, 6, 61, 64, 65, 127, 129, 133, 144, 145, 704, 710], "arraywithcr": 7, "creation": [8, 64, 65, 66, 67, 68, 70, 113, 123, 124, 128, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185], "data_typ": [9, 10, 71, 72, 113, 123, 186, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218], "arraywithdatatyp": 9, "arraywithdevic": [11, 130], "devic": [12, 60, 64, 65, 74, 93, 94, 109, 112, 113, 118, 120, 123, 130, 131, 145, 167, 168, 169, 170, 171, 172, 174, 175, 176, 177, 179, 180, 181, 182, 183, 184, 185, 221, 222, 223, 224, 225, 226, 228, 229, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 445, 469, 470, 490, 493, 494, 648, 649, 650, 651, 652, 714, 715, 716, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 745, 747, 748], "arraywithelementwis": [13, 110, 121], "ab": [13, 14, 75, 76, 117, 120, 269, 408, 410, 540, 565, 704], "out": [13, 14, 23, 24, 25, 26, 27, 28, 29, 30, 37, 38, 39, 40, 41, 42, 59, 60, 61, 64, 65, 66, 67, 75, 76, 77, 78, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 99, 100, 101, 102, 103, 104, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 127, 128, 130, 131, 132, 133, 144, 156, 158, 159, 160, 161, 162, 163, 167, 168, 170, 171, 172, 174, 175, 180, 181, 182, 183, 184, 185, 186, 192, 194, 219, 264, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 455, 456, 458, 459, 460, 463, 464, 465, 467, 469, 470, 477, 490, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 644, 645, 646, 647, 648, 649, 650, 651, 652, 654, 655, 656, 657, 659, 660, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 725, 733], "method": [13, 14, 15, 16, 27, 28, 43, 44, 64, 65, 66, 67, 68, 75, 76, 77, 78, 89, 90, 93, 94, 105, 106, 110, 113, 114, 115, 117, 118, 121, 126, 128, 129, 132, 133, 145, 156, 158, 159, 160, 161, 162, 163, 167, 173, 178, 269, 270, 271, 280, 282, 284, 290, 294, 297, 299, 312, 314, 315, 316, 317, 321, 329, 340, 348, 349, 351, 379, 394, 395, 399, 401, 414, 416, 427, 429, 430, 432, 437, 441, 445, 446, 447, 457, 458, 469, 493, 494, 505, 507, 511, 518, 519, 527, 533, 539, 540, 541, 542, 543, 567, 568, 570, 577, 578, 579, 581, 588, 590, 591, 593, 597, 599, 603, 604, 606, 613, 615, 626, 627, 637, 638, 639, 644, 645, 647, 648, 651, 652, 655, 656, 657, 658, 659, 660, 661, 662, 665, 666, 668, 672, 673, 675, 676, 678, 693, 697, 698, 700, 704, 725, 736, 737, 738], "variant": [13, 14, 15, 16, 27, 28, 75, 76, 77, 78, 89, 90, 93, 94, 114, 115, 270, 271, 280, 290, 294, 315, 316, 379, 437, 441, 446, 447, 578, 579, 581, 603, 604], "thi": [13, 14, 15, 16, 27, 28, 59, 60, 61, 64, 65, 66, 67, 68, 75, 76, 77, 78, 89, 90, 93, 94, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 144, 145, 167, 168, 169, 178, 179, 219, 243, 247, 251, 258, 263, 268, 269, 270, 271, 272, 279, 280, 282, 284, 290, 294, 297, 299, 309, 311, 312, 314, 315, 316, 317, 321, 337, 339, 340, 379, 385, 387, 388, 390, 411, 413, 414, 416, 427, 429, 430, 432, 436, 437, 441, 445, 446, 447, 468, 469, 481, 492, 497, 511, 514, 516, 517, 518, 519, 520, 525, 527, 530, 536, 539, 540, 543, 551, 558, 577, 578, 579, 581, 588, 590, 591, 593, 600, 602, 603, 604, 605, 610, 612, 626, 632, 638, 639, 644, 645, 647, 655, 656, 660, 661, 662, 664, 665, 666, 668, 672, 676, 678, 679, 681, 688, 690, 694, 696, 697, 698, 700, 704, 710, 737, 738, 741, 742, 743, 744, 745, 746], "simpli": [13, 14, 15, 16, 27, 28, 64, 65, 75, 76, 77, 78, 89, 90, 93, 94, 109, 114, 115, 117, 118, 121, 122, 124, 125, 126, 128, 132, 133, 269, 270, 271, 280, 290, 294, 315, 316, 337, 339, 379, 437, 441, 446, 447, 578, 579, 581, 603, 604], "docstr": [13, 14, 15, 16, 27, 28, 75, 76, 77, 78, 89, 90, 93, 94, 110, 111, 112, 113, 118, 122, 126, 167, 178, 269, 270, 271, 279, 280, 282, 284, 290, 294, 297, 299, 312, 314, 315, 316, 317, 321, 340, 379, 414, 416, 427, 429, 430, 432, 436, 437, 441, 446, 447, 540, 543, 577, 578, 579, 581, 588, 590, 591, 593, 603, 604, 605, 660, 661, 662, 665, 666, 668, 672, 676, 678, 697, 698, 700], "minim": [13, 14, 15, 16, 27, 28, 75, 76, 77, 78, 89, 90, 93, 94, 114, 125, 128, 270, 271, 280, 290, 294, 315, 316, 379, 437, 441, 446, 447, 578, 579, 581, 603, 604], "chang": [13, 14, 15, 16, 27, 28, 61, 75, 76, 77, 78, 89, 90, 93, 94, 108, 109, 110, 111, 114, 116, 117, 122, 128, 132, 145, 219, 270, 271, 280, 290, 294, 315, 316, 379, 437, 441, 446, 447, 540, 542, 577, 578, 579, 581, 600, 602, 603, 604, 626, 628, 638, 704, 710], "aco": [13, 14, 75, 76, 269, 276, 704], "acosh": [13, 14, 75, 76, 186, 203, 204, 269, 704], "add": [13, 14, 43, 44, 64, 65, 66, 67, 75, 76, 77, 78, 105, 106, 108, 109, 110, 112, 113, 114, 118, 119, 121, 122, 126, 128, 130, 145, 269, 379, 644, 645, 647, 704, 710, 739, 740], "x2": [13, 14, 15, 16, 23, 24, 64, 65, 75, 76, 77, 78, 85, 86, 115, 126, 186, 214, 219, 257, 269, 279, 280, 281, 291, 292, 293, 297, 298, 299, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 324, 325, 326, 327, 328, 329, 336, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 361, 362, 363, 364, 365, 366, 379, 380, 381, 382, 383, 384, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 402, 403, 404, 408, 409, 410, 411, 412, 413, 433, 434, 435, 445, 446, 447, 448, 527, 532, 540, 542, 548, 549, 550, 555, 559, 562, 564, 655, 659], "exampl": [13, 14, 15, 16, 27, 28, 43, 44, 45, 49, 50, 51, 57, 61, 66, 67, 75, 76, 77, 78, 89, 90, 93, 94, 105, 106, 108, 109, 110, 112, 113, 114, 117, 118, 119, 120, 121, 122, 123, 124, 125, 128, 130, 131, 132, 133, 144, 145, 156, 158, 159, 160, 161, 162, 163, 164, 165, 167, 174, 175, 178, 180, 181, 184, 185, 186, 192, 203, 204, 219, 238, 239, 241, 253, 254, 255, 256, 257, 260, 262, 264, 266, 267, 269, 279, 280, 282, 284, 290, 294, 296, 297, 299, 300, 302, 309, 311, 312, 314, 315, 316, 317, 318, 321, 329, 334, 340, 346, 348, 349, 351, 361, 363, 379, 394, 395, 399, 401, 414, 416, 427, 429, 430, 432, 436, 437, 438, 441, 445, 446, 447, 448, 451, 452, 458, 459, 466, 469, 473, 484, 499, 505, 506, 507, 527, 528, 530, 532, 533, 534, 539, 540, 541, 542, 543, 544, 547, 553, 555, 560, 562, 563, 567, 568, 570, 571, 573, 574, 576, 577, 578, 579, 580, 581, 582, 584, 588, 590, 591, 593, 597, 599, 600, 602, 603, 604, 605, 606, 607, 609, 610, 612, 613, 615, 644, 645, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 665, 666, 668, 672, 673, 675, 688, 690, 691, 693, 697, 698, 700, 704], "1": [13, 14, 15, 16, 25, 26, 27, 28, 29, 30, 37, 38, 45, 51, 57, 60, 61, 64, 65, 66, 67, 75, 76, 77, 78, 87, 88, 89, 90, 91, 92, 93, 94, 99, 100, 111, 115, 118, 122, 125, 126, 127, 128, 130, 131, 132, 133, 145, 156, 158, 159, 160, 161, 163, 167, 168, 175, 176, 177, 178, 180, 181, 185, 186, 192, 202, 219, 223, 226, 228, 233, 238, 239, 241, 243, 247, 251, 253, 256, 257, 264, 269, 273, 275, 276, 278, 279, 280, 282, 284, 290, 291, 293, 294, 297, 299, 300, 302, 309, 311, 312, 314, 315, 316, 317, 318, 320, 321, 323, 329, 334, 337, 339, 340, 346, 348, 349, 351, 361, 363, 367, 369, 370, 372, 373, 375, 376, 378, 379, 394, 395, 399, 401, 408, 410, 414, 416, 417, 419, 420, 423, 427, 429, 430, 432, 436, 437, 441, 445, 446, 447, 448, 451, 452, 458, 459, 466, 469, 470, 484, 490, 493, 494, 499, 502, 505, 506, 507, 509, 527, 528, 529, 530, 531, 532, 533, 534, 535, 539, 540, 541, 542, 543, 544, 547, 553, 555, 559, 560, 562, 563, 564, 565, 567, 568, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 584, 588, 590, 591, 593, 594, 596, 597, 599, 600, 602, 603, 604, 605, 606, 607, 609, 610, 612, 613, 615, 626, 638, 644, 645, 646, 647, 648, 649, 650, 651, 652, 654, 655, 656, 657, 658, 659, 660, 661, 662, 665, 666, 667, 668, 669, 670, 671, 672, 673, 675, 676, 678, 688, 690, 691, 693, 694, 696, 697, 698, 700, 701, 703, 704, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 745, 747, 748], "2": [13, 14, 15, 16, 27, 28, 45, 49, 64, 65, 66, 67, 75, 76, 77, 78, 89, 90, 93, 94, 108, 109, 111, 115, 119, 122, 126, 127, 128, 130, 131, 132, 133, 145, 156, 158, 159, 160, 161, 163, 166, 167, 174, 175, 178, 180, 181, 185, 186, 192, 219, 238, 239, 241, 253, 255, 257, 264, 269, 279, 280, 282, 284, 288, 290, 291, 293, 294, 297, 299, 300, 302, 309, 311, 312, 314, 315, 316, 317, 318, 321, 329, 334, 340, 346, 348, 349, 351, 361, 363, 376, 378, 379, 394, 395, 399, 401, 414, 416, 427, 429, 430, 432, 436, 437, 441, 445, 446, 447, 448, 451, 452, 455, 456, 459, 466, 469, 484, 499, 505, 527, 530, 531, 532, 533, 534, 539, 540, 541, 542, 543, 544, 547, 548, 550, 551, 553, 555, 556, 557, 560, 562, 563, 565, 567, 568, 570, 574, 576, 577, 578, 579, 580, 581, 582, 584, 588, 590, 591, 593, 597, 599, 600, 602, 603, 604, 605, 606, 607, 609, 613, 615, 644, 645, 647, 648, 649, 650, 651, 652, 654, 655, 656, 657, 658, 659, 660, 661, 662, 665, 666, 668, 672, 673, 675, 676, 678, 693, 697, 698, 700, 704], "3": [13, 14, 15, 16, 27, 28, 66, 67, 75, 76, 77, 78, 89, 90, 93, 94, 108, 111, 115, 119, 122, 128, 130, 131, 132, 133, 156, 158, 159, 160, 161, 166, 167, 175, 178, 181, 184, 185, 219, 238, 241, 257, 264, 269, 279, 280, 282, 284, 297, 299, 309, 311, 312, 314, 315, 317, 321, 329, 334, 340, 346, 348, 349, 351, 361, 363, 379, 394, 395, 399, 401, 414, 416, 427, 429, 430, 432, 436, 445, 446, 447, 451, 452, 459, 466, 469, 499, 505, 507, 527, 528, 529, 530, 532, 533, 534, 539, 540, 541, 542, 543, 544, 547, 553, 555, 560, 562, 563, 566, 567, 568, 570, 574, 576, 577, 578, 579, 580, 581, 582, 584, 588, 590, 591, 593, 597, 599, 600, 602, 603, 605, 606, 607, 609, 613, 615, 644, 645, 647, 648, 649, 650, 651, 652, 654, 655, 656, 657, 658, 659, 660, 661, 662, 665, 666, 668, 672, 673, 675, 676, 678, 691, 693, 697, 698, 700, 704], "y": [13, 14, 15, 16, 27, 28, 66, 67, 75, 76, 77, 78, 89, 90, 93, 94, 113, 115, 119, 122, 128, 130, 156, 158, 159, 160, 161, 162, 163, 167, 174, 175, 178, 180, 181, 185, 186, 192, 219, 239, 253, 257, 262, 269, 279, 280, 282, 284, 290, 291, 293, 294, 297, 299, 300, 302, 309, 311, 312, 314, 315, 316, 317, 318, 321, 329, 334, 340, 348, 349, 351, 379, 394, 395, 399, 401, 414, 416, 427, 429, 430, 432, 436, 437, 441, 445, 446, 447, 448, 451, 452, 458, 459, 466, 467, 469, 499, 505, 506, 507, 511, 515, 527, 533, 534, 536, 540, 541, 542, 543, 547, 555, 562, 563, 567, 568, 570, 571, 573, 574, 576, 577, 578, 579, 580, 581, 582, 584, 588, 590, 591, 593, 597, 599, 600, 602, 603, 604, 605, 606, 613, 615, 648, 649, 650, 651, 652, 654, 655, 656, 657, 658, 659, 660, 662, 665, 666, 668, 672, 673, 675, 676, 678, 688, 690, 691, 693, 697, 698, 700], "4": [13, 14, 27, 28, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 111, 115, 119, 122, 128, 130, 131, 132, 133, 156, 158, 159, 161, 167, 175, 178, 181, 185, 219, 241, 257, 269, 279, 280, 282, 284, 291, 293, 297, 299, 312, 314, 315, 317, 321, 329, 340, 348, 349, 351, 379, 394, 395, 399, 401, 414, 416, 427, 429, 430, 432, 436, 445, 452, 459, 468, 469, 505, 527, 530, 531, 532, 534, 537, 539, 540, 542, 543, 544, 547, 553, 555, 562, 563, 567, 574, 576, 577, 578, 579, 580, 581, 582, 584, 588, 590, 591, 593, 597, 599, 600, 602, 603, 605, 606, 613, 615, 644, 645, 647, 648, 649, 654, 655, 656, 657, 658, 659, 660, 661, 662, 665, 666, 668, 672, 673, 675, 676, 678, 693, 697, 698, 700, 704, 741, 742, 743, 744, 746], "5": [13, 14, 15, 16, 27, 28, 66, 67, 75, 76, 89, 90, 93, 94, 109, 111, 115, 119, 126, 130, 131, 132, 156, 158, 159, 161, 167, 175, 178, 181, 184, 185, 219, 241, 257, 269, 279, 280, 282, 284, 290, 294, 296, 297, 299, 309, 311, 312, 314, 315, 316, 317, 321, 329, 340, 348, 349, 351, 379, 394, 395, 399, 401, 414, 416, 427, 429, 430, 432, 436, 438, 441, 445, 446, 447, 452, 459, 469, 505, 527, 530, 532, 533, 539, 540, 541, 542, 543, 544, 547, 555, 562, 563, 567, 574, 576, 577, 578, 579, 580, 581, 582, 584, 588, 590, 591, 593, 597, 599, 600, 602, 603, 605, 606, 613, 615, 644, 645, 647, 648, 649, 650, 654, 655, 657, 658, 659, 660, 661, 662, 665, 666, 668, 672, 673, 675, 676, 678, 693, 697, 698, 700, 725, 736], "6": [13, 14, 27, 28, 66, 67, 75, 76, 93, 94, 111, 115, 119, 122, 130, 131, 132, 156, 158, 159, 161, 167, 175, 219, 241, 257, 269, 279, 280, 282, 284, 297, 299, 300, 302, 312, 314, 315, 316, 317, 321, 329, 340, 348, 349, 351, 379, 394, 395, 399, 401, 414, 416, 427, 429, 430, 432, 436, 445, 452, 459, 469, 505, 527, 530, 533, 534, 539, 540, 542, 543, 544, 555, 560, 562, 567, 568, 570, 574, 576, 577, 578, 579, 580, 582, 584, 588, 590, 591, 593, 597, 599, 600, 602, 603, 605, 606, 613, 615, 644, 645, 647, 648, 649, 650, 655, 656, 659, 660, 661, 662, 672, 673, 675, 676, 678, 693], "z": [13, 14, 66, 67, 75, 76, 115, 119, 122, 128, 130, 219, 253, 269, 279, 280, 297, 299, 312, 314, 329, 348, 349, 351, 379, 394, 395, 445, 451, 452, 469, 499, 540, 542, 567, 568, 570, 571, 573, 577, 578, 580, 655, 656, 672, 673, 675, 676, 678, 693], "printasin": [13, 14, 75, 76, 269, 704], "asinh": [13, 14, 75, 76, 269, 704], "atan": [13, 14, 75, 76, 269, 294, 704], "atan2": [13, 14, 75, 76, 269, 704], "atanh": [13, 14, 75, 76, 269, 704], "bitwise_and": [13, 14, 75, 76, 269], "bitwise_invert": [13, 14, 75, 76, 269], "bitwise_left_shift": [13, 14, 75, 76, 269], "bitwise_or": [13, 14, 75, 76, 269], "bitwise_right_shift": [13, 14, 75, 76, 269], "bitwise_xor": [13, 14, 75, 76, 269], "ceil": [13, 14, 75, 76, 167, 168, 269, 704], "0": [13, 14, 15, 16, 27, 28, 29, 30, 39, 40, 45, 49, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 109, 113, 114, 115, 128, 130, 131, 132, 133, 156, 158, 159, 160, 161, 162, 163, 167, 168, 172, 176, 177, 181, 182, 183, 184, 185, 186, 192, 202, 219, 221, 224, 228, 231, 235, 238, 239, 241, 244, 245, 246, 247, 248, 249, 250, 251, 253, 257, 260, 262, 263, 267, 269, 270, 272, 273, 275, 276, 278, 279, 282, 284, 285, 287, 288, 290, 291, 293, 294, 296, 297, 299, 303, 305, 309, 311, 312, 314, 315, 316, 317, 318, 320, 321, 323, 329, 334, 337, 339, 340, 348, 349, 351, 367, 369, 370, 372, 376, 378, 394, 395, 396, 398, 399, 401, 408, 410, 411, 413, 414, 416, 417, 419, 420, 423, 424, 426, 427, 429, 430, 432, 436, 437, 438, 441, 442, 444, 445, 446, 447, 448, 451, 452, 455, 456, 458, 459, 460, 466, 469, 470, 475, 484, 490, 493, 494, 499, 505, 506, 507, 511, 513, 514, 518, 519, 527, 528, 530, 532, 533, 534, 539, 540, 541, 542, 543, 544, 547, 560, 562, 563, 565, 567, 568, 570, 571, 573, 574, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 593, 594, 596, 597, 599, 603, 604, 605, 606, 607, 609, 610, 611, 612, 613, 615, 626, 638, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 664, 665, 666, 668, 672, 673, 675, 676, 678, 679, 681, 688, 689, 690, 691, 693, 694, 695, 696, 697, 698, 700, 704, 716, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 747, 748], "co": [13, 14, 60, 75, 76, 128, 144, 269, 275, 276, 323, 445, 468, 704], "cosh": [13, 14, 75, 76, 269, 275, 276, 704], "divid": [13, 14, 64, 65, 75, 76, 115, 121, 269, 326, 342, 343, 345, 445, 501, 577, 606], "equal": [13, 14, 64, 65, 75, 76, 115, 122, 123, 167, 172, 174, 175, 186, 192, 269, 303, 305, 309, 311, 349, 352, 354, 355, 357, 408, 410, 414, 416, 445, 446, 448, 451, 452, 540, 544, 553, 556, 577, 578, 580, 585, 587, 606, 619, 621, 648, 652, 660, 661, 662, 664, 665, 666, 668, 669, 671, 672, 679, 681, 688, 690, 691, 694, 696], "erf": [13, 14, 75, 76, 269], "exp": [13, 14, 75, 76, 269, 281, 336, 337, 339, 379, 381, 704], "expm1": [13, 14, 75, 76, 269], "floor": [13, 14, 75, 76, 269, 309, 311, 326, 343, 445, 467, 704], "floor_divid": [13, 14, 75, 76, 269], "greater": [13, 14, 64, 65, 75, 76, 269, 273, 282, 284, 291, 293, 303, 305, 309, 311, 326, 329, 340, 342, 343, 345, 349, 408, 410, 411, 413, 417, 419, 442, 444, 540, 542, 577, 607, 609, 648, 652], "greater_equ": [13, 14, 75, 76, 269], "isfinit": [13, 14, 75, 76, 269], "isinf": [13, 14, 75, 76, 269], "isnan": [13, 14, 75, 76, 269], "less": [13, 14, 60, 64, 65, 75, 76, 109, 115, 122, 126, 127, 128, 269, 273, 275, 276, 278, 282, 284, 291, 293, 315, 317, 320, 323, 367, 369, 370, 372, 376, 378, 408, 410, 411, 413, 417, 419, 427, 429, 540, 553, 556, 565, 648, 652, 672, 694, 696], "less_equ": [13, 14, 75, 76, 269], "log": [13, 14, 75, 76, 108, 109, 118, 122, 125, 128, 131, 167, 177, 269, 281, 336, 373, 375, 379, 381, 540, 558, 704], "log10": [13, 14, 75, 76, 269], "log1p": [13, 14, 75, 76, 269], "log2": [13, 14, 75, 76, 269], "logaddexp": [13, 14, 75, 76, 269], "logical_and": [13, 14, 75, 76, 269, 704], "logical_not": [13, 14, 75, 76, 269, 704], "logical_or": [13, 14, 75, 76, 269, 704], "logical_xor": [13, 14, 75, 76, 269], "multipli": [13, 14, 75, 76, 115, 119, 121, 269, 445, 459], "neg": [13, 14, 75, 76, 118, 122, 125, 156, 158, 167, 168, 172, 269, 352, 354, 355, 357, 396, 398, 408, 410, 411, 413, 540, 560, 564, 565, 577, 591, 593, 603, 605, 697, 698, 700, 701, 703], "not_equ": [13, 14, 75, 76, 269], "pow": [13, 14, 75, 76, 269], "remaind": [13, 14, 64, 65, 75, 76, 269, 445, 467, 577, 606], "round": [13, 14, 59, 60, 61, 75, 76, 108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 128, 130, 131, 132, 133, 144, 269, 279, 315, 317, 326, 340, 342, 343, 345, 396, 398, 427, 429, 442, 444, 704], "sign": [13, 14, 60, 75, 76, 108, 129, 133, 167, 168, 269, 270, 272, 279, 291, 293, 309, 311, 396, 398, 411, 413, 540, 558, 660, 661, 662, 664, 672, 685, 687, 691], "sin": [13, 14, 75, 76, 121, 128, 269, 445, 468, 704], "sinh": [13, 14, 75, 76, 269, 704], "sqrt": [13, 14, 75, 76, 269, 540, 565], "squar": [13, 14, 75, 76, 269, 427, 429, 527, 530, 540, 541, 543, 545, 546, 547, 552, 558, 559, 560], "subtract": [13, 14, 75, 76, 115, 121, 269], "tan": [13, 14, 75, 76, 114, 118, 122, 125, 126, 128, 269, 282, 284, 290, 294, 441, 660, 661, 662, 665, 666, 668, 704], "56": [13, 14, 75, 76, 115, 269, 290, 294, 427, 429, 436, 437, 441, 540, 555, 672, 673, 675, 693], "19": [13, 14, 75, 76, 115, 269, 290, 294, 312, 314, 436, 437, 441, 540, 544], "tanh": [13, 14, 75, 76, 128, 156, 269, 290, 294, 704], "trunc": [13, 14, 75, 76, 269], "elementwis": [14, 64, 65, 76, 113, 118, 128, 133, 270, 272, 273, 275, 276, 278, 279, 281, 282, 284, 285, 287, 288, 290, 291, 293, 294, 296, 297, 299, 300, 302, 303, 305, 306, 308, 309, 311, 312, 314, 315, 317, 318, 320, 321, 323, 324, 326, 327, 329, 330, 333, 334, 336, 337, 339, 340, 342, 343, 345, 346, 348, 349, 351, 352, 354, 355, 357, 358, 360, 361, 363, 364, 366, 367, 369, 370, 372, 373, 375, 376, 378, 379, 381, 382, 384, 385, 387, 388, 390, 391, 393, 394, 395, 396, 398, 399, 401, 402, 404, 405, 407, 408, 410, 411, 413, 414, 416, 417, 419, 420, 423, 424, 426, 427, 429, 430, 432, 433, 435, 436, 438, 439, 441, 442, 444], "arraywithgener": [15, 130], "all_equ": [15, 16, 77, 78, 445], "equality_matrix": [15, 16, 77, 78, 445, 446, 447, 448], "With": [15, 16, 60, 61, 64, 65, 66, 67, 75, 76, 77, 78, 89, 90, 93, 94, 108, 115, 117, 128, 156, 158, 159, 160, 161, 162, 163, 167, 178, 219, 241, 257, 269, 279, 282, 284, 297, 299, 312, 314, 315, 317, 321, 329, 340, 348, 349, 351, 394, 395, 399, 401, 414, 416, 427, 429, 430, 432, 436, 445, 446, 447, 448, 452, 458, 459, 466, 469, 505, 506, 507, 527, 530, 533, 534, 539, 540, 541, 542, 543, 544, 551, 562, 567, 568, 570, 574, 576, 577, 578, 580, 581, 588, 590, 591, 593, 597, 599, 603, 605, 606, 613, 615, 644, 645, 647, 648, 649, 651, 652, 655, 656, 657, 658, 659, 660, 661, 662, 665, 666, 668, 672, 673, 675, 693, 697, 698, 700], "x1": [15, 16, 75, 76, 77, 78, 115, 126, 186, 214, 219, 257, 269, 279, 281, 291, 293, 297, 299, 303, 305, 306, 308, 309, 311, 312, 314, 324, 326, 327, 329, 336, 342, 343, 345, 346, 348, 349, 351, 361, 363, 364, 366, 379, 381, 382, 384, 388, 390, 391, 393, 394, 395, 396, 398, 402, 404, 408, 410, 411, 413, 433, 435, 445, 446, 447, 448, 451, 527, 532, 540, 542, 548, 550, 555, 559, 562, 564, 655, 659], "mix": [15, 16, 66, 67, 112, 115, 117, 128, 186, 210, 219, 257, 269, 279, 297, 299, 312, 314, 329, 348, 349, 351, 394, 395, 445, 446, 447, 458, 466, 469, 505, 506, 507, 527, 530, 533, 534, 539, 540, 562, 567, 568, 570, 574, 576, 577, 578, 580, 644, 645, 647, 655, 659, 672, 673, 675, 679, 681, 693], "native_arrai": [15, 16, 45, 51, 57, 66, 67, 77, 78, 156, 158, 159, 160, 161, 162, 163, 167, 178, 219, 241, 257, 269, 282, 284, 297, 299, 312, 314, 315, 317, 329, 340, 348, 349, 351, 394, 395, 399, 401, 427, 429, 430, 432, 445, 446, 447, 448, 452, 458, 459, 466, 469, 505, 506, 507, 527, 530, 533, 534, 539, 540, 542, 543, 544, 562, 567, 568, 570, 574, 576, 577, 578, 580, 588, 590, 591, 593, 597, 599, 606, 613, 615, 644, 645, 647, 648, 649, 655, 656, 657, 658, 659, 660, 661, 662, 672, 673, 675, 676, 678, 693, 697, 698, 700], "true": [15, 16, 37, 38, 43, 44, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 115, 117, 118, 122, 123, 125, 128, 130, 131, 132, 133, 156, 157, 164, 165, 167, 176, 186, 192, 195, 219, 238, 255, 259, 260, 269, 297, 299, 312, 314, 329, 330, 332, 346, 348, 349, 351, 352, 354, 355, 357, 358, 360, 361, 363, 385, 387, 388, 390, 420, 422, 445, 446, 447, 448, 451, 452, 453, 454, 459, 466, 468, 476, 477, 484, 499, 505, 507, 510, 511, 514, 516, 517, 518, 519, 520, 522, 527, 535, 540, 541, 551, 560, 565, 567, 568, 570, 571, 573, 574, 576, 577, 578, 581, 606, 622, 623, 624, 625, 626, 627, 636, 637, 639, 648, 649, 655, 656, 657, 659, 660, 661, 662, 664, 665, 666, 667, 668, 669, 670, 671, 672, 676, 678, 679, 681, 682, 684, 685, 687, 688, 690, 691, 694, 696, 697, 698, 700, 701, 703, 725, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746], "gener": [16, 43, 44, 64, 65, 78, 105, 106, 109, 110, 111, 112, 113, 114, 115, 118, 121, 122, 123, 124, 125, 126, 127, 128, 130, 132, 133, 144, 145, 164, 167, 168, 176, 177, 269, 282, 284, 312, 314, 315, 317, 321, 340, 411, 413, 427, 429, 430, 432, 446, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 517, 577, 588, 590, 603, 605, 648, 649, 650, 652, 653, 660, 661, 662, 665, 666, 668, 672, 676, 678, 704, 741, 745], "arraywithgradi": [17, 130], "gradient": [18, 64, 65, 80, 113, 122, 131, 132, 144, 145, 219, 263, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 622, 623, 624, 625, 704, 741, 742, 743, 744, 745, 746], "arraywithimag": [19, 130], "imag": [20, 82, 108, 111, 113, 128, 129, 131, 133, 144, 527, 528, 529, 530, 531, 533, 534, 704], "arraywithlay": 21, "layer": [22, 59, 84, 113, 114, 128, 129, 132, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 644, 645, 647, 704, 716, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 745, 747, 748], "linear_algebra": [23, 24, 85, 86, 113, 130, 540, 541, 542, 543, 544, 545, 546, 547, 548, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566], "arraywithlinearalgebra": 23, "matmul": [23, 24, 85, 86, 113, 119, 128, 540, 560, 704], "arraywithloss": 25, "binary_cross_entropi": [25, 26, 87, 88, 567], "pred": [25, 26, 87, 88, 118, 122, 125, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576], "epsilon": [25, 26, 29, 30, 79, 80, 87, 88, 91, 92, 118, 122, 125, 132, 511, 513, 514, 518, 540, 553, 556, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 644, 645, 646, 647, 739, 740, 741, 742, 743], "1e": [25, 26, 29, 30, 79, 80, 87, 88, 91, 92, 118, 122, 125, 132, 133, 445, 473, 511, 513, 514, 518, 540, 560, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 644, 645, 646, 647, 704, 741, 742, 743, 744, 746], "07": [25, 26, 79, 80, 87, 88, 132, 511, 513, 514, 518, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 741, 742, 743], "cross_entropi": [25, 26, 87, 88, 118, 122, 125, 567, 574, 576], "axi": [25, 26, 27, 28, 37, 38, 39, 40, 41, 42, 64, 65, 87, 88, 89, 90, 99, 100, 101, 102, 103, 104, 115, 118, 122, 123, 125, 126, 128, 130, 133, 144, 156, 161, 167, 176, 177, 219, 221, 224, 231, 244, 245, 246, 247, 248, 249, 250, 251, 263, 445, 459, 460, 469, 509, 540, 542, 544, 564, 565, 567, 571, 572, 573, 574, 575, 576, 577, 582, 583, 584, 585, 587, 588, 589, 590, 591, 592, 593, 597, 598, 599, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 615, 616, 618, 619, 621, 648, 654, 655, 656, 657, 665, 666, 667, 668, 669, 670, 671, 672, 673, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703], "sparse_cross_entropi": [25, 26, 87, 88, 567], "loss": [26, 88, 113, 118, 131, 132, 133, 568, 570, 571, 573, 574, 576, 704], "arraywithmanipul": 27, "clip": [27, 28, 64, 65, 89, 90, 118, 122, 125, 128, 131, 133, 269, 394, 395, 445, 455, 456, 577, 581, 704], "x_min": [27, 28, 64, 65, 89, 90, 128, 133, 577, 578, 579, 580, 581], "x_max": [27, 28, 64, 65, 89, 90, 128, 133, 577, 578, 579, 580, 581], "roll": [27, 28, 89, 90, 122, 126, 577, 578, 579], "8": [27, 28, 66, 67, 75, 76, 93, 94, 108, 111, 115, 122, 127, 131, 156, 160, 219, 241, 269, 279, 297, 299, 315, 317, 321, 329, 348, 349, 351, 394, 395, 414, 416, 427, 429, 430, 432, 445, 452, 469, 527, 534, 540, 542, 543, 544, 555, 562, 567, 568, 570, 577, 578, 579, 580, 591, 593, 597, 599, 606, 648, 649, 650, 655, 659, 660, 661, 672, 673, 675, 693, 704, 725, 736], "concat": [27, 28, 64, 65, 89, 90, 219, 248, 249, 250, 251, 263, 445, 468, 577, 704], "xs": [27, 28, 89, 90, 122, 219, 242, 246, 248, 249, 250, 445, 446, 448, 452, 511, 515, 577, 582, 583, 584], "constant_pad": [27, 28, 89, 90, 577], "pad_width": [27, 28, 89, 90, 577, 585, 586, 587, 619, 620, 621], "valu": [27, 28, 64, 65, 66, 67, 68, 89, 90, 109, 115, 117, 118, 122, 123, 124, 125, 126, 128, 130, 133, 145, 167, 168, 172, 174, 175, 176, 177, 186, 192, 197, 198, 199, 219, 231, 262, 263, 269, 270, 272, 273, 279, 282, 284, 288, 315, 317, 326, 327, 329, 330, 333, 340, 342, 343, 345, 346, 348, 349, 351, 361, 363, 364, 366, 394, 395, 396, 398, 402, 404, 405, 407, 408, 410, 414, 416, 442, 444, 445, 455, 456, 457, 462, 468, 469, 470, 475, 478, 482, 492, 493, 494, 495, 496, 497, 510, 511, 513, 514, 515, 518, 522, 526, 527, 528, 529, 530, 531, 532, 533, 534, 537, 538, 539, 540, 553, 556, 557, 558, 559, 560, 561, 565, 577, 578, 580, 585, 586, 587, 597, 599, 600, 602, 619, 621, 622, 623, 624, 626, 630, 631, 632, 633, 634, 639, 642, 643, 644, 645, 647, 648, 649, 650, 651, 652, 653, 655, 656, 657, 659, 660, 661, 662, 663, 664, 665, 666, 668, 669, 671, 672, 676, 678, 679, 681, 682, 684, 685, 687, 688, 690, 691, 694, 696, 725, 726, 727, 728, 729, 730, 731, 732, 736, 737, 738, 739, 740, 741, 742, 743, 745], "expand_dim": [27, 28, 89, 90, 128, 131, 577, 704], "flip": [27, 28, 89, 90, 130, 131, 133, 269, 300, 302, 577, 597, 599, 704], "permute_dim": [27, 28, 89, 90, 577], "ax": [27, 28, 64, 65, 89, 90, 113, 115, 123, 130, 219, 263, 445, 459, 540, 551, 559, 562, 565, 577, 585, 587, 591, 593, 594, 595, 596, 603, 605, 607, 609, 613, 615, 619, 621, 655, 656, 657, 672, 676, 678, 679, 681, 682, 684, 685, 687, 688, 690, 691, 694, 696, 697, 698, 700, 701, 703], "repeat": [27, 28, 64, 65, 89, 90, 109, 114, 115, 119, 121, 122, 445, 465, 577, 616, 618], "reshap": [27, 28, 64, 65, 89, 90, 125, 128, 130, 133, 577, 704], "shape": [27, 28, 64, 65, 89, 90, 93, 94, 109, 113, 114, 115, 123, 124, 125, 126, 128, 130, 131, 132, 133, 156, 159, 167, 170, 171, 174, 175, 178, 180, 181, 182, 183, 184, 185, 186, 192, 193, 194, 219, 231, 259, 264, 269, 270, 272, 273, 275, 276, 278, 279, 281, 282, 284, 285, 287, 288, 291, 293, 297, 299, 300, 302, 303, 305, 306, 308, 309, 311, 312, 314, 315, 317, 318, 320, 321, 323, 329, 334, 336, 337, 339, 340, 348, 349, 351, 352, 354, 355, 357, 358, 360, 361, 363, 367, 369, 370, 372, 373, 375, 376, 378, 379, 381, 382, 384, 385, 387, 388, 390, 391, 393, 396, 398, 399, 401, 402, 404, 408, 410, 411, 413, 414, 416, 417, 419, 420, 423, 424, 426, 427, 429, 430, 432, 433, 435, 436, 445, 456, 467, 470, 474, 490, 493, 494, 500, 527, 529, 530, 531, 533, 534, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 550, 553, 554, 555, 556, 557, 559, 560, 561, 563, 564, 567, 568, 570, 571, 573, 574, 576, 577, 578, 580, 582, 584, 585, 587, 588, 590, 591, 593, 594, 596, 597, 599, 600, 601, 602, 603, 605, 606, 607, 609, 610, 612, 613, 615, 619, 621, 648, 650, 651, 652, 655, 656, 658, 665, 666, 668, 669, 671, 672, 673, 675, 693, 697, 698, 700, 701, 703, 704, 725, 727, 728, 729, 730, 731, 732, 739, 740], "shift": [27, 28, 89, 90, 115, 126, 269, 303, 305, 309, 311, 577, 603, 604, 605], "squeez": [27, 28, 89, 90, 577, 704], "stack": [27, 28, 64, 65, 89, 90, 128, 167, 182, 183, 540, 543, 544, 545, 546, 547, 548, 550, 552, 553, 554, 556, 557, 560, 561, 563, 577, 626, 627, 636, 637, 704, 725, 734], "swapax": [27, 28, 89, 90, 577], "axis0": [27, 28, 89, 90, 577, 613, 614, 615], "axis1": [27, 28, 89, 90, 540, 544, 577, 613, 614, 615], "tile": [27, 28, 89, 90, 577, 704], "rep": [27, 28, 89, 90, 577, 616, 617, 618], "zero_pad": [27, 28, 89, 90, 577, 704], "manipul": [28, 59, 90, 113, 133, 144, 578, 580, 582, 584, 585, 587, 588, 590, 591, 593, 594, 596, 597, 599, 600, 602, 603, 605, 606, 607, 609, 610, 612, 613, 615, 616, 618, 619, 621], "arraywithnorm": 29, "layer_norm": [29, 30, 91, 92, 644], "normalized_idx": [29, 30, 91, 92, 644, 645, 646, 647], "05": [29, 30, 91, 92, 219, 644, 645, 646, 647], "scale": [29, 30, 91, 92, 122, 219, 261, 262, 511, 519, 527, 535, 538, 539, 644, 645, 646, 647, 725, 733, 736, 741, 744], "offset": [29, 30, 91, 92, 540, 544, 563, 644, 645, 646, 647], "new_std": [29, 30, 91, 92, 644, 645, 646, 647, 739, 740], "norm": [30, 64, 65, 92, 113, 445, 455, 456, 540, 551, 565, 645, 647, 704, 740, 741, 743], "arraywithrandom": [31, 130], "random": [32, 64, 65, 94, 113, 124, 133, 144, 649, 650, 651, 652, 653, 654, 704], "arraywithsearch": 33, "arraywithset": 35, "arraywithsort": 37, "argsort": [37, 38, 99, 100, 665], "descend": [37, 38, 99, 100, 540, 560, 561, 665, 666, 667, 668, 669, 670, 671], "stabl": [37, 38, 99, 100, 108, 128, 145, 445, 472, 473, 495, 496, 501, 502, 665, 666, 667, 668, 669, 670, 671], "sort": [38, 64, 65, 66, 67, 68, 100, 113, 540, 545, 560, 561, 666, 668], "arraywithstatist": 39, "einsum": [39, 40, 101, 102, 672], "equat": [39, 40, 101, 102, 540, 559, 672, 673, 674, 675, 693], "max": [39, 40, 64, 65, 101, 102, 186, 202, 205, 269, 394, 445, 455, 456, 464, 493, 494, 540, 553, 556, 672, 741, 743], "keepdim": [39, 40, 41, 42, 64, 65, 101, 102, 103, 104, 445, 509, 540, 551, 565, 655, 656, 657, 672, 673, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703], "mean": [39, 40, 64, 65, 101, 102, 105, 106, 108, 109, 112, 115, 118, 122, 123, 124, 125, 128, 130, 131, 132, 133, 144, 145, 219, 248, 249, 250, 251, 263, 445, 464, 622, 623, 624, 625, 626, 632, 648, 651, 660, 661, 672, 704, 716], "min": [39, 40, 64, 65, 101, 102, 186, 202, 205, 269, 395, 445, 464, 493, 494, 501, 540, 557, 560, 561, 565, 672], "prod": [39, 40, 64, 65, 101, 102, 115, 123, 445, 464, 672], "dtype": [39, 40, 64, 65, 101, 102, 113, 115, 118, 123, 124, 130, 167, 168, 169, 170, 171, 172, 174, 175, 176, 179, 180, 181, 184, 185, 186, 190, 191, 192, 193, 195, 196, 197, 198, 199, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 218, 219, 259, 269, 309, 311, 445, 451, 452, 490, 506, 527, 535, 577, 588, 590, 644, 645, 647, 648, 652, 655, 656, 657, 665, 669, 671, 672, 673, 685, 686, 687, 688, 690, 691, 692, 697, 698, 700, 704, 716, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 747, 748], "std": [39, 40, 101, 102, 115, 648, 651, 660, 661, 672], "correct": [39, 40, 101, 102, 109, 110, 112, 118, 122, 123, 124, 126, 186, 214, 577, 578, 580, 672, 688, 689, 690, 694, 695, 696, 704], "sum": [39, 40, 64, 65, 101, 102, 118, 122, 123, 125, 128, 219, 248, 249, 250, 251, 263, 269, 279, 281, 336, 379, 381, 445, 460, 464, 493, 494, 527, 539, 540, 560, 563, 565, 672, 673, 675, 688, 690, 693], "var": [39, 40, 101, 102, 105, 106, 115, 128, 622, 623, 624, 672], "statist": [40, 102, 105, 106, 113, 123, 673, 675, 676, 678, 679, 681, 682, 684, 685, 687, 688, 690, 691, 693, 694, 696], "arraywithutil": 41, "util": [42, 104, 113, 124, 219, 252, 698, 700, 701, 703], "add_ivy_array_instance_method": 43, "cl": [43, 44, 105, 106], "modul": [43, 44, 45, 49, 50, 61, 64, 65, 66, 67, 68, 105, 106, 108, 111, 117, 118, 119, 121, 125, 128, 129, 131, 133, 144, 145, 445, 488, 648, 649, 651, 652, 704, 711, 712, 713, 714, 715, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 739, 740, 747, 748], "to_ignor": [43, 44, 105, 106, 626, 637], "loop": [43, 44, 105, 106, 119, 145, 622, 623, 624, 625], "over": [43, 44, 45, 49, 59, 61, 64, 65, 105, 106, 108, 114, 115, 119, 125, 130, 145, 540, 551, 562, 564, 565, 644, 645, 647, 648, 652, 672, 676, 678, 679, 681, 682, 684, 685, 687, 688, 690, 691, 694, 696, 697, 698, 700, 701, 703, 739, 740], "etc": [43, 44, 61, 64, 65, 105, 106, 108, 109, 110, 113, 115, 117, 121, 122, 123, 126, 128, 130, 131, 145, 167, 176, 177, 445, 469, 470, 490, 493, 494, 648, 649, 650, 652, 660, 661, 662, 664, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 745, 747, 748], "us": [43, 44, 45, 50, 57, 60, 61, 64, 65, 66, 67, 68, 105, 106, 107, 109, 110, 112, 113, 114, 115, 116, 117, 118, 119, 121, 122, 123, 124, 125, 126, 127, 128, 130, 132, 133, 144, 145, 156, 158, 159, 160, 161, 162, 163, 166, 186, 201, 219, 228, 229, 254, 258, 261, 262, 263, 264, 266, 268, 269, 282, 284, 297, 299, 312, 314, 321, 329, 340, 348, 349, 351, 394, 395, 399, 401, 414, 416, 427, 429, 445, 469, 472, 473, 487, 493, 494, 495, 496, 501, 502, 511, 513, 514, 518, 519, 527, 533, 535, 536, 538, 539, 540, 543, 544, 551, 567, 568, 570, 577, 588, 590, 591, 593, 597, 599, 603, 605, 613, 615, 622, 623, 624, 625, 626, 627, 629, 635, 636, 637, 639, 644, 645, 647, 655, 656, 657, 658, 660, 661, 662, 672, 673, 675, 693, 697, 698, 700, 704, 725, 733, 736, 737, 738, 739, 740, 741, 743, 744], "_wrap_funct": [43, 44, 105, 106, 118, 120], "we": [43, 44, 45, 50, 51, 57, 58, 59, 60, 61, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 120, 121, 122, 123, 125, 126, 128, 129, 130, 131, 132, 133, 144, 145, 511, 515, 704, 710], "want": [43, 44, 45, 50, 60, 105, 106, 107, 108, 109, 117, 131, 132, 133, 145], "don": [43, 44, 61, 105, 106, 108, 109, 110, 123, 132, 145], "t": [43, 44, 45, 50, 60, 61, 105, 106, 108, 109, 110, 111, 115, 123, 128, 130, 131, 132, 133, 145, 445, 452, 527, 536, 537], "As": [43, 44, 59, 105, 106, 109, 117, 118, 121, 122, 123, 124, 125, 126, 128, 130, 131, 132, 145, 660, 661, 662, 664], "shown": [43, 44, 64, 65, 105, 106, 109, 115, 126, 128, 130, 145, 167, 178, 269, 297, 299, 312, 314, 321, 414, 416, 540, 543, 577, 588, 590, 591, 593, 660, 661, 662, 665, 666, 668], "appropri": [43, 44, 105, 106, 109, 120, 269, 279, 396, 398, 655, 656], "our": [43, 44, 59, 60, 105, 106, 107, 108, 109, 115, 122, 127, 130, 131, 132, 133, 145, 704], "toi": [43, 44, 105, 106], "arrayexampl": [43, 44], "import": [43, 44, 45, 49, 60, 105, 106, 110, 113, 114, 115, 119, 121, 122, 123, 124, 125, 128, 130, 131, 133, 145, 219, 260, 704, 710], "pass": [43, 44, 45, 49, 64, 65, 66, 67, 68, 105, 106, 110, 114, 115, 116, 117, 118, 119, 121, 122, 125, 126, 130, 145, 186, 196, 219, 228, 263, 269, 291, 293, 445, 454, 481, 511, 525, 622, 623, 624, 714, 715, 737, 738, 741, 745, 747, 748], "hasattr": [43, 44, 105, 106, 130], "relu": [43, 44, 66, 67, 131, 132, 156, 157, 158, 704], "softmax": [43, 44, 66, 67, 156, 527, 538, 539, 704], "backend_handl": [45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 704], "contextmanag": [45, 46], "object": [45, 64, 65, 66, 67, 68, 130, 133, 167, 173, 186, 202, 219, 264, 511, 626, 629, 631, 633, 634, 635, 640, 641, 642, 643, 648, 654, 716, 725, 726, 727, 728, 729, 730, 731, 732, 734, 735, 737, 738], "__init__": [45, 46, 49, 50, 64, 65, 66, 67, 68, 113, 119, 123, 128, 130, 131, 132, 133, 186, 187, 188, 189, 219, 220, 227, 228, 229, 230, 231, 232, 233, 234, 511, 512, 648, 649, 651, 652, 704, 711, 712, 713, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748], "choose_random_backend": 45, "exclud": [45, 47, 115, 128, 167, 168, 648, 652], "clear_backend_stack": 45, "current_backend": [45, 66, 67, 113, 118], "current": [45, 49, 50, 57, 61, 64, 65, 66, 67, 68, 108, 109, 110, 111, 118, 124, 128, 133, 144, 145, 186, 203, 204, 206, 218, 219, 228, 252, 253, 257, 259, 445, 471, 478, 482, 489, 491, 626, 627, 636, 637, 704], "prioriti": [45, 49, 64, 65, 109, 125], "global_backend": [45, 49], "which": [45, 49, 50, 59, 60, 61, 64, 65, 66, 67, 68, 108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 130, 131, 132, 133, 144, 145, 156, 161, 164, 165, 166, 167, 168, 169, 170, 171, 172, 174, 175, 176, 177, 179, 180, 181, 182, 183, 184, 185, 186, 195, 196, 200, 202, 205, 206, 218, 219, 228, 229, 239, 244, 245, 246, 247, 248, 249, 250, 251, 253, 257, 259, 261, 262, 263, 269, 411, 413, 445, 449, 459, 460, 462, 469, 470, 471, 477, 481, 489, 490, 491, 493, 494, 509, 511, 514, 515, 516, 518, 519, 520, 522, 524, 525, 527, 538, 540, 542, 544, 551, 559, 560, 564, 565, 567, 571, 573, 574, 576, 577, 582, 584, 591, 593, 597, 599, 603, 605, 606, 610, 612, 626, 631, 632, 633, 634, 639, 640, 641, 642, 643, 648, 649, 650, 652, 655, 656, 657, 658, 659, 660, 661, 662, 664, 665, 666, 668, 669, 671, 672, 676, 678, 679, 681, 682, 684, 685, 687, 688, 690, 691, 694, 696, 697, 698, 700, 701, 703, 704, 707, 709, 714, 715, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 745, 747, 748], "try": [45, 49, 58, 60, 61, 64, 65, 108, 109, 110, 111, 121, 122, 130, 145, 445, 508, 704], "infer": [45, 49, 112, 119, 123, 124, 128, 133, 164, 165, 167, 168, 169, 171, 174, 175, 179, 181, 185, 269, 346, 445, 474, 499, 577, 600, 602], "when": [45, 49, 59, 60, 64, 65, 66, 67, 68, 108, 109, 110, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 128, 130, 131, 133, 145, 186, 192, 219, 269, 279, 337, 339, 408, 410, 445, 454, 481, 502, 567, 568, 570, 571, 573, 574, 576, 626, 637, 655, 656, 657, 659, 672, 676, 678, 682, 684, 688, 690, 694, 696, 704, 737, 738], "global": [45, 49, 50, 51, 57, 64, 65, 66, 67, 68, 118, 119, 123, 124, 128, 186, 197, 198, 199, 219, 228, 229, 261, 262, 263, 445, 472, 473, 492, 495, 496, 497, 501, 502, 644, 645, 647, 739, 740], "numpi": [45, 49, 50, 51, 59, 60, 64, 65, 109, 110, 117, 119, 123, 124, 125, 126, 128, 130, 133, 445, 506, 672, 673, 675, 693, 704], "np": [45, 49, 121, 123, 124, 125, 126, 130, 131, 133, 704], "py": [45, 49, 50, 109, 113, 114, 118, 119, 123, 124, 126, 128, 130, 132, 133, 648, 649, 651, 652], "noqa": [45, 49, 50, 167, 178, 269, 279, 297, 299, 312, 314, 315, 317, 321, 414, 416, 427, 429, 430, 432, 436, 540, 543, 577, 588, 590, 591, 593, 603, 605, 672, 676, 678], "set_backend": [45, 49, 50, 57, 118, 119, 120, 123, 186, 203, 204, 219, 260, 445, 499, 704], "ha": [45, 49, 50, 59, 60, 61, 64, 65, 109, 114, 115, 118, 119, 120, 123, 124, 128, 130, 132, 133, 144, 145, 167, 178, 219, 238, 269, 270, 272, 396, 398, 408, 410, 540, 548, 550, 558, 559, 560, 563, 577, 588, 590, 607, 609, 660, 661, 662, 664, 672, 679, 681, 685, 687, 688, 690, 691, 694, 696], "jax": [45, 49, 50, 51, 60, 61, 109, 110, 119, 123, 124, 125, 126, 128, 130, 133, 145, 511, 517, 660, 661, 662, 664, 704], "get_backend": [45, 118, 119], "specifi": [45, 50, 64, 65, 112, 117, 118, 123, 124, 125, 126, 128, 131, 132, 133, 167, 168, 170, 174, 176, 177, 180, 182, 183, 184, 186, 192, 194, 219, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 253, 257, 259, 262, 263, 264, 269, 411, 413, 445, 449, 459, 469, 470, 476, 509, 540, 544, 551, 562, 563, 564, 565, 567, 568, 570, 571, 573, 574, 576, 577, 578, 580, 582, 584, 585, 587, 591, 593, 603, 605, 607, 609, 610, 612, 619, 621, 626, 631, 633, 634, 640, 641, 642, 643, 655, 656, 657, 660, 661, 662, 664, 665, 666, 668, 672, 673, 675, 685, 687, 691, 693, 697, 698, 700, 701, 703], "isn": [45, 50, 109, 131, 145], "associ": [45, 50, 109, 118, 120, 145, 269, 279, 396, 398, 540, 553, 556, 566], "retriev": [45, 50, 109, 445, 449], "i": [45, 50, 109, 111, 112, 128, 131, 133, 167, 168, 178, 269, 270, 272, 291, 293, 303, 305, 309, 311, 315, 317, 326, 340, 342, 343, 345, 352, 354, 394, 395, 399, 401, 408, 410, 411, 413, 445, 451, 452, 511, 514, 516, 518, 519, 520, 540, 542, 548, 550, 553, 556, 559, 560, 563, 565, 577, 610, 612, 660, 661, 662, 664, 665, 666, 668, 669, 671, 672, 673, 675, 676, 678, 679, 681, 682, 684, 688, 690, 691, 693, 694, 696], "e": [45, 50, 60, 61, 107, 109, 111, 112, 122, 131, 145, 166, 167, 178, 186, 191, 210, 219, 235, 269, 270, 272, 291, 293, 303, 305, 309, 311, 315, 317, 326, 334, 340, 342, 343, 345, 352, 354, 367, 369, 373, 375, 394, 395, 399, 401, 408, 410, 411, 413, 511, 514, 516, 518, 519, 520, 540, 542, 548, 550, 553, 556, 559, 560, 565, 577, 610, 612, 648, 651, 652, 660, 661, 662, 664, 665, 666, 668, 669, 671, 672, 676, 678, 679, 681, 682, 684, 685, 687, 688, 690, 691, 694, 696], "one": [45, 50, 60, 61, 64, 65, 75, 76, 77, 78, 89, 90, 93, 94, 108, 109, 115, 118, 121, 122, 123, 125, 126, 127, 130, 131, 133, 145, 167, 168, 178, 186, 193, 195, 219, 248, 249, 250, 251, 263, 445, 446, 448, 487, 490, 493, 494, 540, 548, 550, 551, 555, 557, 564, 565, 577, 578, 581, 588, 590, 591, 593, 603, 605, 607, 609, 655, 656, 658, 660, 661, 662, 663, 664, 672, 673, 675, 693, 704], "torch": [45, 50, 57, 109, 113, 118, 119, 121, 122, 123, 124, 125, 126, 128, 130, 131, 132, 133, 145, 164, 165, 186, 203, 204, 219, 260, 445, 499, 577, 588, 590, 704], "tensorflow": [45, 50, 57, 60, 61, 109, 110, 123, 124, 125, 126, 128, 133, 145, 704], "mxnet": [45, 50, 60, 110, 123, 124, 125, 128, 133, 704], "either": [45, 50, 57, 64, 65, 108, 109, 111, 114, 115, 118, 119, 122, 123, 124, 128, 130, 131, 145, 167, 173, 269, 279, 281, 291, 293, 336, 355, 357, 367, 369, 370, 372, 376, 378, 379, 381, 396, 398, 411, 413, 417, 419, 420, 423, 436, 445, 462, 483, 487, 488, 540, 548, 550, 622, 623, 624, 625, 672, 685, 687, 691, 725, 736, 737, 738], "doesn": [45, 50, 108, 111, 115, 123, 128, 145], "matter": [45, 50, 59, 115], "been": [45, 50, 109, 114, 118, 119, 122, 123, 124, 126, 128, 144, 145, 219, 238, 445, 463, 464, 465, 648, 649], "ivy_np": [45, 50], "ivy_jax": [45, 50], "subsequ": [45, 51, 108, 115, 117, 118, 121, 125, 126, 132], "call": [45, 51, 57, 60, 66, 67, 111, 113, 114, 115, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 128, 130, 131, 132, 133, 145, 219, 263, 445, 492, 497, 508, 511, 515, 626, 627, 632, 636, 637, 725, 736, 737, 738, 741, 745], "ndarrai": [45, 51, 121, 123, 124, 125, 126, 130, 167, 169, 179, 445, 506], "Or": [45, 51, 131], "jaxlib": [45, 51, 108, 123, 124, 126, 130], "xla_extens": [45, 51, 123, 124, 126, 130], "devicearrai": [45, 51, 130], "try_import_ivy_jax": 45, "warn": [45, 52, 53, 54, 55, 56], "try_import_ivy_mxnet": 45, "try_import_ivy_numpi": 45, "try_import_ivy_tf": 45, "try_import_ivy_torch": 45, "unset_backend": [45, 119], "unset": [45, 57, 119, 128, 130], "adjust": [45, 57, 672, 688, 690, 694, 696], "previous": [45, 57, 108, 111, 117, 118, 128, 445, 454], "implement": [45, 57, 109, 110, 114, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 128, 130, 131, 132, 133, 144, 145, 186, 192, 210, 219, 264, 269, 270, 272, 273, 275, 276, 278, 282, 284, 285, 287, 288, 291, 293, 318, 320, 321, 323, 334, 337, 339, 367, 369, 370, 372, 373, 375, 376, 378, 396, 398, 408, 410, 411, 413, 420, 423, 424, 426, 436, 540, 545, 660, 661, 662, 664, 665, 666, 668, 669, 671, 672, 676, 678, 679, 681, 682, 684, 704], "wa": [45, 57, 60, 64, 65, 115, 128, 130, 445, 508, 626, 639, 672, 676, 678, 679, 681, 682, 684, 685, 687, 688, 690, 691, 694, 696, 697, 698, 700, 701, 703], "last": [45, 57, 61, 64, 65, 109, 115, 119, 145, 156, 161, 219, 238, 527, 537, 540, 542, 544, 551, 563, 564, 567, 571, 573, 574, 576, 577, 591, 593, 603, 605, 606, 610, 612, 665, 666, 668, 669, 671, 697, 698, 700, 701, 703, 725, 735], "henc": [45, 57, 660, 661, 662, 664], "here": [45, 57, 108, 109, 110, 113, 115, 122, 126, 128, 129, 130, 131, 132, 133, 144, 145], "tensor": [45, 57, 59, 64, 65, 113, 118, 119, 121, 123, 124, 125, 126, 128, 130, 131, 132, 133, 145, 167, 176, 177, 186, 200, 269, 297, 299, 394, 395, 445, 490, 493, 494, 527, 535, 537, 540, 562, 577, 588, 590, 600, 602, 606, 648, 649, 655, 658, 704, 725, 733, 735], "howev": [45, 57, 60, 108, 110, 114, 117, 118, 119, 121, 122, 123, 124, 125, 126, 130, 131, 132, 133, 145], "befor": [45, 57, 64, 65, 108, 109, 110, 114, 117, 121, 123, 124, 125, 128, 131, 145, 219, 263, 269, 442, 444, 527, 538, 539, 622, 623, 624, 626, 638, 660, 661, 662, 664, 672, 685, 687, 691], "becom": [45, 57, 59, 61, 109, 115, 122, 128, 133, 145, 577, 578, 580], "swap": [45, 57, 577, 613, 615], "python": [45, 57, 58, 59, 60, 108, 109, 111, 128, 130, 131, 145, 167, 168, 219, 258, 268, 269, 411, 413, 704, 710], "op": [45, 57, 113, 128, 145], "eagertensor": [45, 57], "def": [46, 110, 113, 115, 118, 122, 123, 124, 125, 126, 128, 130, 131, 132, 133, 187, 188, 189, 220, 227, 230, 512, 704, 717, 720, 723], "ml": [58, 60, 61, 107, 127, 128, 129, 131, 132, 133, 144, 704, 710], "explos": [58, 60, 704], "A": [58, 59, 60, 61, 64, 65, 66, 67, 68, 111, 112, 117, 118, 122, 123, 124, 128, 131, 145, 167, 172, 179, 219, 228, 229, 263, 269, 405, 407, 439, 445, 473, 505, 540, 555, 558, 559, 560, 577, 606, 610, 612, 626, 627, 629, 631, 633, 634, 635, 636, 637, 640, 641, 642, 643, 672, 673, 675, 693, 697, 698, 700, 701, 703, 704, 747, 748], "huge": [58, 60, 131, 704], "number": [58, 59, 64, 65, 66, 67, 68, 108, 115, 122, 124, 125, 128, 131, 133, 164, 165, 166, 167, 168, 169, 172, 176, 177, 178, 179, 186, 193, 201, 202, 205, 207, 208, 210, 219, 255, 256, 257, 269, 279, 291, 293, 315, 317, 326, 340, 342, 343, 345, 394, 395, 396, 398, 408, 410, 411, 413, 414, 416, 417, 419, 442, 444, 445, 446, 448, 468, 473, 474, 489, 507, 510, 527, 538, 540, 545, 553, 558, 560, 564, 577, 578, 580, 585, 587, 594, 596, 597, 599, 603, 605, 606, 610, 612, 616, 618, 619, 621, 622, 623, 624, 625, 648, 649, 653, 655, 658, 660, 661, 662, 672, 676, 678, 679, 681, 682, 684, 685, 687, 688, 690, 691, 694, 696, 697, 698, 700, 701, 703, 704, 725, 726, 727, 728, 729, 730, 731, 732, 734, 735, 736], "tool": [58, 61, 109, 129, 133, 144, 145, 704], "have": [58, 59, 60, 61, 64, 65, 108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 128, 129, 130, 131, 132, 133, 144, 145, 156, 159, 167, 168, 170, 171, 174, 175, 178, 180, 181, 182, 183, 184, 185, 186, 192, 193, 194, 202, 219, 264, 269, 270, 272, 273, 275, 276, 278, 279, 281, 282, 284, 285, 287, 288, 290, 291, 293, 294, 296, 297, 299, 300, 302, 303, 305, 306, 308, 309, 311, 312, 314, 315, 317, 318, 320, 321, 323, 324, 326, 327, 329, 334, 336, 337, 339, 340, 342, 343, 345, 346, 348, 349, 351, 352, 354, 355, 357, 358, 360, 361, 363, 364, 366, 367, 369, 370, 372, 373, 375, 376, 378, 379, 381, 382, 384, 385, 387, 388, 390, 391, 393, 396, 398, 399, 401, 402, 404, 408, 410, 411, 413, 414, 416, 417, 419, 420, 423, 424, 426, 427, 429, 430, 432, 433, 435, 436, 438, 441, 442, 444, 445, 456, 463, 464, 465, 467, 511, 517, 525, 527, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 550, 553, 554, 555, 556, 557, 559, 560, 561, 562, 563, 564, 565, 567, 568, 570, 571, 573, 574, 576, 577, 578, 580, 582, 584, 588, 590, 591, 593, 594, 596, 597, 599, 603, 605, 607, 609, 610, 612, 613, 615, 648, 650, 654, 655, 656, 657, 658, 660, 661, 662, 664, 665, 666, 668, 669, 671, 672, 676, 678, 679, 681, 682, 684, 685, 687, 688, 690, 691, 694, 696, 697, 698, 700, 701, 703, 704], "explod": [58, 59, 704], "onto": [58, 59, 219, 248, 249, 626, 632, 638, 704], "scene": [58, 59, 112, 127, 129, 511, 514, 516, 518, 519, 520, 704], "b": [58, 61, 66, 67, 75, 76, 77, 78, 89, 90, 93, 94, 107, 112, 115, 118, 119, 122, 127, 128, 129, 131, 132, 133, 143, 219, 241, 269, 279, 282, 284, 297, 299, 312, 314, 315, 317, 321, 329, 340, 348, 349, 351, 399, 401, 414, 416, 427, 429, 430, 432, 436, 445, 446, 448, 451, 452, 458, 459, 466, 469, 507, 527, 530, 533, 534, 539, 540, 541, 542, 543, 555, 559, 562, 566, 567, 568, 570, 577, 578, 580, 581, 588, 590, 591, 593, 597, 599, 603, 605, 610, 612, 613, 615, 644, 645, 647, 648, 651, 652, 655, 657, 658, 659, 665, 666, 668, 672, 673, 675, 676, 678, 693, 697, 698, 700, 704, 710], "why": [58, 60, 109, 122, 125, 126, 130, 704], "unifi": [58, 60, 64, 65, 121, 128, 145, 219, 248, 249, 250, 251, 263, 704], "should": [58, 60, 64, 65, 66, 67, 68, 105, 106, 108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 130, 131, 132, 164, 165, 167, 178, 182, 183, 186, 194, 219, 269, 270, 272, 273, 275, 276, 278, 279, 281, 282, 284, 285, 287, 288, 290, 291, 293, 294, 296, 297, 299, 300, 302, 303, 305, 306, 308, 309, 311, 312, 314, 315, 317, 318, 320, 321, 323, 324, 334, 336, 337, 339, 340, 352, 354, 355, 357, 358, 360, 361, 363, 367, 369, 370, 372, 376, 378, 379, 381, 382, 384, 385, 387, 388, 390, 391, 393, 396, 398, 402, 404, 408, 410, 411, 413, 417, 419, 420, 423, 424, 426, 427, 429, 430, 432, 433, 435, 436, 438, 441, 442, 444, 445, 454, 481, 490, 511, 514, 516, 518, 519, 520, 527, 539, 540, 541, 542, 543, 544, 547, 548, 550, 553, 555, 556, 557, 559, 560, 562, 563, 564, 565, 577, 600, 602, 648, 654, 655, 656, 657, 660, 661, 662, 664, 672, 673, 675, 676, 678, 679, 681, 685, 687, 688, 690, 691, 693, 694, 696, 704], "them": [58, 59, 60, 61, 117, 119, 121, 122, 128, 130, 131, 132, 145, 704], "c": [58, 60, 61, 93, 94, 107, 112, 115, 118, 122, 127, 128, 129, 131, 145, 445, 451, 452, 458, 507, 511, 513, 514, 516, 518, 519, 520, 527, 533, 577, 610, 612, 655, 658, 672, 673, 675, 688, 690, 693, 694, 696, 704, 710], "standard": [58, 112, 113, 114, 116, 117, 121, 125, 126, 145, 167, 178, 186, 202, 269, 279, 282, 284, 297, 299, 312, 314, 315, 317, 321, 340, 414, 416, 427, 429, 430, 432, 436, 540, 543, 577, 588, 590, 591, 593, 603, 605, 644, 645, 647, 648, 651, 660, 661, 662, 665, 666, 668, 672, 676, 678, 688, 690, 694, 696, 697, 698, 700, 704, 710, 739, 740], "re": [58, 59, 60, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 130, 133, 145, 219, 263, 445, 463, 540, 562, 577, 603, 605, 655, 659, 704], "collabor": [58, 59, 60, 704], "consortium": [58, 60, 704, 710], "data": [58, 60, 64, 65, 66, 67, 68, 112, 113, 114, 118, 120, 122, 124, 125, 126, 130, 167, 168, 169, 170, 171, 172, 173, 174, 175, 178, 179, 180, 181, 182, 183, 184, 185, 190, 191, 192, 194, 195, 196, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 214, 218, 219, 221, 222, 223, 224, 225, 226, 231, 232, 233, 235, 269, 270, 272, 273, 275, 276, 278, 279, 281, 282, 284, 285, 287, 288, 290, 291, 293, 294, 296, 297, 299, 300, 302, 303, 305, 306, 308, 309, 311, 312, 314, 315, 317, 318, 320, 321, 323, 324, 326, 327, 329, 334, 336, 337, 339, 340, 342, 343, 345, 346, 348, 349, 351, 352, 354, 355, 357, 358, 360, 361, 363, 364, 366, 367, 369, 370, 372, 376, 378, 379, 381, 382, 384, 385, 387, 388, 390, 391, 393, 396, 398, 402, 404, 408, 410, 411, 413, 417, 419, 420, 423, 424, 426, 427, 429, 430, 432, 433, 435, 436, 438, 441, 442, 444, 445, 451, 452, 483, 484, 486, 503, 511, 517, 525, 527, 536, 540, 541, 542, 543, 544, 545, 546, 547, 548, 550, 553, 554, 555, 556, 557, 559, 560, 562, 563, 564, 565, 577, 588, 590, 591, 593, 594, 596, 600, 602, 603, 605, 607, 609, 610, 612, 648, 654, 655, 656, 657, 658, 665, 666, 668, 672, 676, 678, 679, 681, 682, 684, 685, 687, 688, 690, 691, 694, 696, 697, 698, 700, 701, 703, 704, 710, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736], "api": [58, 59, 108, 109, 112, 114, 115, 117, 118, 120, 121, 123, 124, 125, 126, 127, 129, 131, 145, 167, 178, 269, 279, 282, 284, 297, 299, 312, 314, 315, 317, 321, 340, 414, 416, 427, 429, 430, 432, 436, 540, 543, 577, 588, 590, 591, 593, 603, 605, 660, 661, 662, 665, 666, 668, 672, 676, 678, 697, 698, 700, 704, 710], "open": [59, 60, 61, 107, 108, 111, 114, 144, 167, 168, 648, 650, 652, 704], "project": [59, 60, 61, 108, 109, 111, 113, 119, 130, 132, 144, 145, 648, 649, 651, 652], "grown": 59, "consider": [59, 115, 126], "recent": [59, 60, 108, 109], "year": [59, 61, 145, 704], "especi": [59, 108], "deep": [59, 64, 65, 107, 109, 110, 127, 131, 704], "learn": [59, 60, 108, 110, 112, 118, 127, 133, 144, 269, 346, 511, 514, 516, 518, 519, 520, 622, 623, 624, 625, 704, 741, 742, 743, 744, 745, 746], "can": [59, 60, 61, 107, 108, 109, 112, 113, 114, 115, 116, 117, 118, 119, 122, 123, 124, 125, 126, 127, 128, 130, 131, 132, 133, 144, 145, 167, 169, 179, 186, 195, 219, 261, 262, 263, 540, 547, 577, 600, 602, 648, 650, 704, 710], "seen": [59, 60, 115, 130, 131], "rapidli": 59, "increas": [59, 219, 243, 247, 251, 577, 585, 587, 619, 621, 626, 638], "github": [59, 109, 110, 114, 117], "repo": [59, 60, 61, 108, 109, 116, 128, 130, 131, 132, 133, 144, 704, 710], "term": [59, 109, 122, 527, 537, 725, 735], "time": [59, 60, 61, 108, 109, 110, 117, 118, 122, 123, 126, 128, 131, 133, 145, 511, 514, 518, 527, 537, 577, 616, 618, 622, 623, 624, 625, 655, 656, 657, 660, 661, 662, 725, 736, 737, 738], "These": [59, 60, 61, 109, 114, 115, 117, 118, 122, 123, 125, 126, 128, 129, 131, 132, 133, 145, 540, 545, 704, 710], "written": [59, 108, 113, 114, 121, 125, 126, 128, 130, 133, 145], "mani": [59, 60, 61, 64, 65, 108, 109, 110, 114, 115, 118, 120, 121, 122, 123, 124, 125, 126, 128, 130, 131, 145, 577, 606], "differ": [59, 60, 61, 64, 65, 66, 67, 68, 108, 109, 112, 113, 114, 115, 117, 118, 121, 122, 124, 125, 126, 128, 129, 130, 131, 132, 133, 145, 186, 202, 219, 240, 241, 244, 245, 269, 279, 396, 398, 433, 435, 527, 536, 577, 610, 612, 672, 685, 687, 691, 704], "while": [59, 60, 64, 65, 66, 67, 68, 108, 109, 115, 119, 125, 132, 133, 145, 269, 385, 387, 388, 390, 660, 661, 672, 679, 681], "wonder": [59, 61, 130], "thing": [59, 60, 61, 108, 109, 110, 119, 130, 131], "research": [59, 144], "develop": [59, 60, 61, 107, 108, 109, 110, 144, 145, 704], "consid": [59, 60, 64, 65, 113, 118, 129, 130, 131, 269, 385, 387, 388, 390, 660, 661, 662, 664], "speed": 59, "evolv": 59, "sharabl": 59, "code": [59, 60, 61, 64, 65, 66, 67, 68, 108, 109, 110, 111, 112, 114, 115, 118, 119, 120, 121, 122, 125, 126, 127, 128, 129, 130, 131, 132, 133, 143, 145, 156, 158, 159, 160, 161, 162, 163, 219, 241, 264, 269, 312, 314, 430, 432, 527, 533, 534, 660, 661, 662, 665, 666, 668, 672, 673, 675, 693, 704, 710], "significantli": 59, "hinder": [59, 126], "librari": [59, 60, 61, 128, 133, 143, 145, 219, 264, 269, 337, 339, 385, 387, 388, 390, 540, 545, 660, 661, 662, 664, 672, 676, 678, 679, 681, 682, 684, 704], "outdat": 59, "month": 59, "rigor": 59, "maintain": [59, 109, 145, 665, 666, 668, 669, 671], "against": [59, 64, 65, 117, 145, 186, 193, 540, 548, 550, 551, 553, 556, 655, 656], "newest": 59, "version": [59, 60, 61, 108, 114, 128, 130, 540, 545, 704], "For": [59, 60, 61, 108, 109, 110, 111, 112, 113, 114, 115, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 128, 130, 131, 132, 133, 144, 145, 167, 168, 178, 269, 270, 272, 273, 275, 276, 278, 279, 281, 282, 284, 285, 287, 288, 291, 293, 315, 317, 318, 320, 321, 323, 334, 336, 337, 339, 340, 367, 369, 370, 372, 376, 378, 379, 381, 396, 398, 408, 410, 411, 413, 414, 416, 420, 423, 424, 426, 427, 429, 436, 442, 444, 511, 517, 525, 540, 560, 563, 577, 578, 580, 610, 612, 660, 661, 662, 664, 672, 676, 678, 682, 684, 691, 714, 715], "softwar": [59, 60, 108, 109], "pipelin": [59, 121, 133], "where": [59, 60, 61, 64, 65, 66, 67, 107, 108, 109, 110, 111, 114, 118, 119, 121, 122, 123, 124, 125, 128, 131, 132, 133, 145, 167, 174, 175, 178, 269, 291, 293, 334, 373, 375, 396, 398, 408, 410, 445, 477, 481, 490, 540, 545, 553, 556, 557, 560, 561, 563, 564, 577, 578, 580, 585, 587, 588, 590, 594, 596, 610, 612, 619, 621, 626, 627, 637, 648, 649, 655, 658, 672, 688, 690, 694, 696, 697, 698, 700, 701, 703, 704], "rapid": [59, 60, 108], "prototyp": 59, "vital": [59, 133], "signific": [59, 60, 145], "bottleneck": 59, "new": [59, 60, 61, 64, 65, 107, 108, 109, 110, 111, 112, 113, 114, 115, 117, 120, 122, 123, 125, 127, 130, 133, 144, 167, 170, 173, 174, 175, 180, 181, 184, 185, 186, 214, 269, 290, 294, 296, 373, 375, 405, 407, 438, 439, 441, 445, 463, 464, 465, 468, 469, 470, 493, 494, 495, 496, 501, 502, 511, 514, 516, 518, 519, 520, 577, 588, 590, 600, 602, 610, 612, 626, 631, 642, 643, 644, 645, 647, 704, 714, 715, 725, 735, 739, 740, 741, 742, 743, 744, 745, 746], "futur": [59, 61, 108, 109, 130, 145, 540, 545], "avail": [59, 64, 65, 108, 109, 114, 124, 145, 219, 238, 254, 255, 256, 266, 445, 464], "specif": [59, 64, 65, 110, 118, 121, 122, 123, 124, 125, 126, 128, 129, 130, 132, 133, 144, 145, 186, 210, 219, 261, 264, 269, 385, 387, 388, 390, 445, 463, 464, 465, 488, 540, 545, 562, 577, 610, 612, 622, 623, 624, 625, 648, 649, 672, 676, 678, 679, 681, 682, 684, 704, 707, 709, 710, 737, 738], "quickli": [59, 61, 108, 109, 131, 132], "obsolet": [59, 61], "user": [59, 60, 108, 109, 111, 112, 117, 119, 122, 125, 127, 145, 725, 736, 737, 738], "constantli": 59, "invent": 59, "wheel": 59, "desir": [59, 64, 65, 186, 192, 195, 219, 264, 445, 477, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736], "provid": [59, 64, 65, 108, 109, 114, 115, 118, 121, 122, 123, 124, 125, 126, 128, 132, 144, 145, 164, 165, 167, 178, 186, 197, 198, 199, 206, 210, 218, 219, 238, 445, 462, 490, 494, 511, 514, 516, 518, 519, 520, 540, 564, 577, 591, 593, 610, 612, 655, 656, 672, 688, 690, 694, 696, 697, 698, 700, 701, 703, 725, 726, 727, 728, 729, 730, 731, 732, 734, 735, 736, 741, 742, 743, 744, 745, 746], "simultan": [59, 61], "modern": [59, 60], "simpl": [59, 108, 109, 113, 114, 115, 117, 118, 121, 122, 123, 124, 125, 128, 130, 132, 133, 145, 445, 466], "scalabl": [59, 128], "must": [59, 61, 64, 65, 66, 67, 68, 108, 109, 110, 113, 114, 115, 118, 121, 122, 123, 124, 126, 128, 132, 133, 156, 159, 167, 168, 170, 171, 172, 174, 175, 178, 180, 181, 182, 183, 184, 185, 186, 192, 193, 194, 219, 248, 249, 250, 251, 263, 264, 269, 270, 272, 273, 275, 276, 278, 279, 281, 282, 284, 285, 287, 288, 290, 291, 293, 294, 296, 297, 299, 300, 302, 303, 305, 306, 308, 309, 311, 312, 314, 315, 317, 318, 320, 321, 323, 324, 326, 327, 329, 334, 336, 337, 339, 340, 342, 343, 345, 346, 348, 349, 351, 352, 354, 355, 357, 358, 360, 361, 363, 364, 366, 367, 369, 370, 372, 373, 375, 376, 378, 379, 381, 382, 384, 385, 387, 388, 390, 391, 393, 394, 395, 396, 398, 399, 401, 402, 404, 408, 410, 411, 413, 414, 416, 417, 419, 420, 423, 424, 426, 427, 429, 430, 432, 433, 435, 436, 438, 441, 442, 444, 445, 456, 467, 494, 540, 541, 542, 543, 544, 545, 546, 547, 548, 550, 553, 554, 555, 556, 557, 559, 560, 562, 563, 564, 565, 567, 568, 570, 571, 573, 574, 576, 577, 578, 580, 582, 584, 588, 590, 591, 593, 594, 596, 597, 599, 603, 605, 607, 609, 610, 612, 613, 615, 648, 650, 653, 655, 656, 657, 658, 660, 661, 662, 664, 665, 666, 668, 669, 671, 672, 676, 678, 679, 681, 682, 684, 685, 687, 688, 690, 691, 694, 696, 697, 698, 700, 701, 703, 741, 745], "determin": [59, 64, 65, 114, 118, 122, 123, 124, 186, 195, 196, 201, 206, 207, 208, 218, 219, 254, 255, 256, 266, 269, 273, 275, 276, 278, 279, 281, 282, 284, 285, 287, 288, 290, 291, 293, 294, 296, 297, 299, 303, 305, 306, 308, 309, 311, 312, 314, 318, 320, 321, 323, 324, 334, 336, 337, 339, 352, 354, 355, 357, 358, 360, 367, 369, 370, 372, 376, 378, 379, 381, 391, 393, 396, 398, 408, 410, 411, 413, 420, 423, 424, 426, 427, 429, 436, 438, 441, 445, 446, 448, 451, 452, 476, 478, 482, 483, 484, 485, 486, 503, 510, 511, 517, 527, 538, 540, 541, 542, 543, 544, 547, 548, 550, 553, 555, 556, 558, 559, 563, 564, 565, 622, 623, 624, 625, 660, 661, 662, 664, 697, 698, 700, 701, 703], "exactli": [59, 61, 115, 122, 124, 704, 710], "common": [59, 64, 65, 109, 110, 115, 118, 120, 122, 124, 145], "ground": [59, 117], "li": 59, "between": [59, 64, 65, 66, 67, 68, 115, 117, 118, 121, 122, 126, 127, 129, 130, 131, 133, 144, 167, 168, 186, 202, 269, 291, 293, 408, 410, 567, 568, 570, 571, 573, 574, 576, 577, 588, 590, 610, 612, 626, 632, 648, 650, 660, 661, 662, 664, 704, 741, 743], "find": [59, 64, 65, 108, 109, 128, 131, 660, 661, 662, 664, 704], "exist": [59, 60, 64, 65, 66, 67, 108, 110, 111, 114, 115, 116, 117, 118, 119, 120, 125, 128, 145, 445, 462, 741, 745], "essenti": [59, 60, 110, 115, 118, 124], "order": [59, 64, 65, 66, 67, 68, 108, 109, 111, 114, 115, 119, 121, 122, 123, 124, 126, 130, 131, 133, 145, 269, 291, 293, 511, 514, 516, 518, 519, 520, 540, 545, 551, 560, 561, 565, 577, 591, 593, 622, 623, 624, 655, 658, 660, 661, 662, 664, 665, 666, 668, 669, 671, 747, 748], "design": [59, 60, 112, 125, 128, 130, 145], "univers": 59, "abstract": [59, 122, 132, 145, 219, 234, 741, 745], "In": [59, 61, 108, 109, 113, 114, 115, 118, 119, 122, 123, 124, 125, 126, 128, 130, 131, 132, 133, 144, 145, 219, 258, 264, 265, 268, 269, 279, 396, 398, 411, 413, 445, 449, 481, 577, 600, 602, 648, 652, 704], "languag": [59, 61, 128], "first": [59, 60, 108, 109, 111, 115, 118, 121, 122, 126, 128, 130, 131, 133, 164, 165, 167, 176, 177, 186, 209, 214, 219, 238, 250, 269, 279, 281, 297, 299, 303, 305, 306, 308, 309, 311, 312, 314, 326, 327, 329, 336, 342, 343, 345, 348, 349, 351, 361, 363, 364, 366, 379, 381, 382, 384, 388, 390, 391, 393, 396, 398, 402, 404, 408, 410, 433, 435, 445, 451, 511, 515, 540, 542, 544, 545, 548, 550, 555, 557, 560, 562, 564, 577, 582, 584, 603, 605, 610, 612, 613, 615, 622, 623, 624, 625, 626, 627, 636, 637, 648, 654, 655, 656, 657, 660, 661, 662, 725, 736, 737, 738, 741, 745], "see": [59, 107, 108, 109, 110, 116, 118, 122, 124, 126, 130, 131, 144, 145, 167, 168, 173, 176, 177, 186, 194, 210, 269, 279, 281, 297, 299, 303, 305, 306, 308, 309, 311, 312, 314, 324, 336, 337, 339, 361, 363, 379, 381, 388, 390, 391, 393, 396, 398, 402, 404, 408, 410, 411, 413, 433, 435, 540, 553, 556, 559, 564, 565, 655, 657, 660, 661, 662, 664, 672, 676, 678, 679, 681, 682, 684, 685, 687, 688, 690, 691, 694, 696, 697, 698, 700, 701, 703, 704], "clear": [59, 60, 61, 109, 110, 115, 117, 123, 124, 128, 130, 219, 237], "front": [59, 127, 128, 131, 704, 710], "runner": 59, "look": [59, 108, 109, 111, 113, 115, 118, 119, 122, 123, 124, 126, 128, 130, 132, 133, 704], "littl": [59, 130], "deeper": [59, 109, 112, 127, 219, 243, 247, 251, 626, 637, 638], "follow": [59, 60, 64, 65, 108, 109, 110, 111, 113, 114, 115, 117, 119, 121, 122, 123, 124, 125, 127, 128, 130, 131, 132, 133, 145, 186, 205, 219, 263, 269, 411, 413, 445, 479, 480, 481, 501, 502, 511, 514, 516, 518, 519, 520, 527, 538, 539, 540, 557, 565, 626, 632, 638, 660, 661, 662, 664, 704, 725, 735, 741, 745], "core": [59, 108, 110, 124, 128, 133, 219, 255, 704], "principl": 59, "oper": [59, 64, 65, 66, 67, 108, 110, 114, 115, 118, 121, 122, 124, 125, 131, 132, 167, 176, 177, 186, 210, 269, 279, 309, 311, 312, 314, 329, 348, 349, 351, 399, 401, 411, 413, 430, 432, 445, 453, 463, 464, 465, 503, 511, 514, 516, 518, 519, 520, 527, 528, 529, 530, 531, 532, 533, 534, 536], "expos": [59, 128, 132, 445, 457], "almost": [59, 109, 122, 129, 131], "ident": [59, 61, 64, 65, 118, 120, 122, 130, 131, 145, 219, 253, 626, 639, 704], "uniqu": [59, 118, 122, 145, 219, 228, 229, 622, 623, 624, 625, 626, 632, 660, 661, 662, 663, 664], "syntax": [59, 60], "There": [59, 108, 109, 115, 118, 121, 122, 123, 128, 131, 145], "onli": [59, 64, 65, 107, 108, 109, 113, 115, 117, 118, 119, 121, 122, 123, 124, 125, 126, 128, 130, 131, 132, 133, 143, 145, 219, 259, 269, 385, 387, 388, 390, 540, 548, 550, 557, 577, 591, 593, 626, 627, 628, 636, 637, 655, 656, 657, 672, 679, 681, 704, 741, 742, 743, 744, 745, 746], "wai": [59, 60, 108, 119, 125, 130, 131, 132, 133, 145], "unsurprisingli": [59, 115], "fundament": [59, 122, 128], "consist": [59, 64, 65, 121, 125, 219, 251, 540, 545, 672, 673, 675, 693, 737, 738], "each": [59, 60, 61, 64, 65, 66, 67, 68, 109, 110, 112, 113, 114, 115, 116, 117, 118, 120, 121, 122, 123, 125, 126, 127, 128, 130, 131, 133, 144, 145, 156, 159, 160, 162, 167, 178, 186, 193, 219, 228, 229, 240, 241, 242, 243, 244, 245, 246, 250, 263, 269, 270, 272, 273, 275, 276, 278, 279, 281, 282, 284, 285, 287, 288, 290, 291, 293, 294, 296, 297, 299, 300, 302, 303, 305, 306, 308, 309, 311, 312, 314, 315, 317, 318, 320, 321, 323, 324, 326, 327, 329, 334, 336, 337, 339, 340, 342, 343, 345, 346, 348, 349, 351, 352, 354, 355, 357, 358, 360, 361, 363, 364, 366, 367, 369, 370, 372, 373, 375, 376, 378, 379, 381, 382, 384, 385, 387, 388, 390, 391, 393, 396, 398, 399, 401, 402, 404, 405, 407, 408, 410, 411, 413, 414, 416, 417, 419, 420, 423, 424, 426, 427, 429, 430, 432, 433, 435, 436, 438, 441, 442, 444, 445, 446, 448, 511, 514, 516, 518, 519, 520, 527, 528, 529, 530, 531, 532, 533, 534, 535, 540, 541, 542, 543, 545, 548, 550, 553, 554, 556, 559, 560, 577, 585, 587, 597, 599, 603, 605, 606, 610, 612, 616, 618, 619, 621, 626, 632, 639, 648, 649, 655, 658, 660, 661, 662, 672, 673, 675, 693, 704, 710, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 736, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748], "veri": [59, 60, 108, 109, 113, 115, 117, 118, 122, 124, 125, 126, 129, 131, 132, 133, 145, 704], "similar": [59, 113, 122, 123, 124, 131, 145, 269, 411, 413, 527, 538, 725, 736], "convent": [59, 144, 540, 548, 550, 672, 673, 675, 693], "those": [59, 64, 65, 108, 109, 110, 122, 128, 133, 167, 168, 511, 525, 540, 557, 560, 577, 578, 580], "introduc": [59, 122, 131, 577, 603, 605, 660, 661], "2006": 59, "therefor": [59, 109, 113, 114, 115, 116, 117, 118, 121, 122, 123, 124, 125, 126, 128, 130, 132, 145, 269, 279, 282, 284, 315, 317, 340, 427, 429, 430, 432, 436, 445, 469, 527, 530, 539, 577, 603, 605, 644, 645, 647, 672, 676, 678, 697, 698, 700], "present": [59, 64, 65, 109, 116, 122, 123, 124, 125, 126, 128], "itself": [59, 108, 109, 122, 125, 126, 132, 144, 145, 445, 449, 626, 638], "cut": 59, "cloth": 59, "adher": [59, 60, 114, 116, 128, 133], "semant": [59, 128, 133, 269, 411, 413], "up": [59, 60, 61, 107, 109, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 128, 129, 130, 131, 132, 133, 144, 145], "hopefulli": [59, 60, 61, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 128, 130, 131, 132, 133, 144], "paint": [59, 128], "pictur": [59, 128], "how": [59, 61, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 129, 130, 131, 132, 133, 144, 145, 704, 710, 725, 736, 737, 738], "pleas": [59, 60, 61, 108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 128, 130, 131, 132, 133, 144, 704], "discuss": [59, 60, 61, 107, 108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 128, 130, 131, 132, 133, 144, 145, 704], "faq": [59, 60, 61, 128, 130, 131, 132, 133, 144], "reach": [59, 60, 61, 108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 128, 130, 131, 132, 133, 144, 219, 243, 247, 251, 626, 638], "discord": [59, 60, 61, 108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 128, 130, 131, 132, 133, 144, 704], "you": [59, 60, 61, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 130, 131, 132, 133, 144, 145, 704, 710], "question": [59, 60, 61, 108, 109, 115, 117, 128, 130, 131, 132, 133, 144, 145, 704], "central": 60, "goal": [60, 110], "being": [60, 61, 64, 65, 108, 109, 115, 117, 120, 121, 122, 123, 124, 125, 126, 128, 131, 144, 145, 167, 168, 445, 492, 497, 660, 663, 704], "would": [60, 108, 109, 111, 112, 114, 115, 117, 119, 120, 121, 122, 125, 126, 127, 128, 130, 132, 133, 145, 156, 161, 219, 264, 704], "entir": [60, 61, 64, 65, 109, 115, 116, 117, 121, 122, 125, 130, 131, 132, 133, 145, 219, 263, 672, 676, 678, 679, 681, 682, 684, 685, 687, 688, 690, 691, 694, 696, 697, 698, 700, 701, 703, 725, 734], "forgiven": 60, "rais": [60, 64, 65, 109, 125, 128, 130, 186, 194, 269, 334, 408, 410, 445, 453, 472, 481, 495, 502, 508, 540, 548, 550, 552, 564, 577, 607, 609, 610, 612, 655, 658, 672, 676, 678, 682, 684, 697, 698, 700, 701, 703, 737, 738, 741, 745], "eyebrow": 60, "somehow": 60, "pytorch": [60, 61, 110, 118, 123, 124, 125, 126, 128, 130, 133, 145, 511, 514, 516, 518, 519, 520, 704, 741, 742, 743, 744, 745, 746], "other": [60, 64, 65, 66, 67, 108, 109, 113, 114, 115, 117, 118, 121, 122, 125, 128, 130, 132, 133, 143, 144, 145, 164, 165, 167, 168, 269, 337, 339, 445, 446, 448, 449, 511, 515, 648, 652, 660, 663, 672, 688, 690, 694, 696, 704], "strong": [60, 145], "industri": 60, "back": [60, 121, 127, 128, 130, 145, 704, 710, 737, 738, 741, 745], "momentum": 60, "won": [60, 61, 109, 133], "ad": [60, 105, 106, 108, 109, 110, 113, 114, 115, 117, 118, 120, 121, 122, 123, 125, 126, 128, 132, 145, 445, 501, 502, 540, 545, 577, 588, 590, 747, 748], "just": [60, 61, 108, 109, 114, 115, 117, 118, 125, 128, 130, 131, 145, 672, 673, 675, 693, 725, 734], "make": [60, 61, 108, 109, 110, 113, 114, 115, 116, 117, 118, 121, 122, 123, 124, 125, 126, 128, 130, 131, 133, 219], "problem": [60, 109, 121, 130], "even": [60, 61, 108, 109, 114, 118, 123, 124, 126, 130, 131, 132, 133, 145, 269, 408, 410, 414, 416], "wors": 60, "rather": [60, 64, 65, 113, 114, 117, 122, 133, 145, 167, 168, 219, 263, 445, 483, 484, 486, 511, 517], "funni": 60, "comic": 60, "strip": 60, "easi": [60, 108, 109, 118, 122], "feasibl": 60, "space": [60, 167, 168, 176, 177, 445, 468], "unlik": [60, 115, 122, 219], "charger": 60, "charact": 60, "encod": [60, 131, 445, 468], "instant": [60, 704], "messag": [60, 109, 128, 130, 750, 751], "much": [60, 109, 113, 121, 122, 125, 128, 130, 131], "doe": [60, 64, 65, 109, 111, 112, 113, 114, 115, 117, 118, 119, 123, 125, 126, 128, 130, 131, 145, 269, 312, 314, 445, 481, 577, 606], "mandat": [60, 117, 125], "adopt": [60, 109, 121], "continu": [60, 61, 116, 117, 145], "own": [60, 61, 108, 114, 128, 145], "signatur": [60, 113, 114, 115, 122, 123, 124, 125, 126, 269, 282, 284, 312, 314, 315, 317, 321, 340, 427, 429, 430, 432, 577, 588, 590, 603, 605, 660, 661, 662, 665, 666, 668, 672, 676, 678], "replac": [60, 64, 65, 109, 111, 115, 117, 120, 122, 123, 124, 128, 130, 133, 145, 445, 493, 494, 577, 578, 580, 648, 649], "your": [60, 61, 107, 108, 110, 111, 113, 114, 131, 132, 145, 704], "10": [60, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 108, 111, 115, 122, 128, 130, 131, 167, 174, 177, 219, 269, 297, 299, 300, 302, 321, 329, 348, 349, 351, 370, 372, 427, 429, 445, 459, 469, 492, 497, 511, 518, 527, 533, 540, 543, 544, 555, 562, 577, 591, 593, 597, 599, 606, 644, 645, 647, 648, 649, 650, 655, 658, 660, 661, 672, 673, 675, 676, 678, 693, 741, 743], "100": [60, 61, 93, 94, 131, 132, 133, 145, 269, 427, 429, 704], "despit": [60, 122, 124], "distinct": [60, 114, 122, 125, 127, 660, 661, 662, 664, 704], "still": [60, 64, 65, 114, 117, 123, 130, 132, 145, 704], "believ": [60, 109], "share": [60, 64, 65, 115, 117, 118, 119, 122, 128, 186, 214], "bring": [60, 128, 129], "benefit": [60, 61, 108, 109, 121, 122, 125, 130, 131, 145], "unrel": [60, 109], "what": [60, 61, 109, 112, 114, 115, 120, 122, 126, 127, 128, 130, 131, 132, 133, 144, 145, 704], "again": [60, 61, 109, 113, 115, 122, 125, 131, 133, 145], "contrari": 60, "bumpi": 60, "road": 60, "allud": [60, 131], "most": [60, 64, 65, 108, 109, 113, 117, 118, 121, 122, 123, 124, 125, 126, 128, 130, 131, 132, 145, 540, 545], "technolog": 60, "sector": [60, 269, 275, 276, 278, 285, 287, 290, 294, 296, 320, 323, 438, 441], "full": [60, 61, 66, 67, 109, 114, 123, 126, 128, 145, 167, 186, 202, 269, 329, 348, 349, 351, 527, 533, 540, 557, 559, 560, 644, 645, 647], "success": 60, "reason": [60, 109, 113, 115, 118, 121, 122, 123, 125, 128, 130, 269, 411, 413], "build": [60, 107, 108, 118, 127, 129, 132, 133, 145, 660, 661, 662, 664, 704, 725, 736, 737, 738], "custom": [60, 132], "comput": [60, 61, 64, 65, 108, 118, 122, 128, 131, 145, 219, 263, 269, 279, 297, 299, 306, 308, 312, 314, 327, 329, 330, 333, 346, 348, 349, 351, 361, 363, 364, 366, 382, 384, 385, 387, 388, 390, 391, 393, 396, 398, 399, 401, 402, 404, 445, 455, 456, 459, 460, 511, 513, 514, 515, 516, 518, 519, 520, 522, 524, 527, 528, 529, 530, 531, 532, 533, 534, 536, 538, 540, 541, 542, 545, 546, 547, 548, 550, 551, 557, 558, 559, 560, 564, 565, 567, 568, 570, 571, 573, 574, 576, 626, 632, 660, 661, 662, 664, 672, 673, 675, 676, 678, 679, 681, 682, 684, 685, 687, 688, 690, 691, 693, 694, 696], "thank": [60, 131], "interoper": 60, "compon": [60, 128], "bio": [60, 108], "hardwar": [60, 108], "initi": [60, 64, 65, 66, 67, 68, 109, 119, 123, 124, 219, 527, 537, 718, 719, 721, 722, 724, 725, 726, 727, 728, 729, 730, 731, 732, 734, 735, 736, 737, 738, 741, 745], "pcie": 60, "interfac": [60, 133, 145], "motherboard": 60, "raid": 60, "storag": [60, 131], "virtual": [60, 109, 111], "bluetooth": 60, "wireless": 60, "exchang": 60, "btx": 60, "factor": [60, 219, 228, 261, 262, 263, 511, 513, 514, 518, 519, 527, 528, 529, 530, 531, 532, 533, 534, 540, 541, 725, 726, 727, 728, 729, 730, 731, 732, 741, 742, 743, 744], "sata": 60, "connect": [60, 108, 132, 133, 725, 735, 736], "host": [60, 145], "bu": 60, "adapt": [60, 511, 519, 741, 744], "html": [60, 111, 114, 269, 282, 284, 312, 314, 315, 317, 321, 340, 427, 429, 430, 432, 577, 588, 590, 603, 605, 660, 661, 662, 665, 666, 668, 672, 676, 678], "enabl": [60, 64, 65, 66, 67, 68, 108, 109, 117, 118, 121, 122, 125, 127, 128, 129, 131, 133, 145], "anyon": [60, 107, 145], "websit": 60, "tcp": 60, "ip": 60, "node": [60, 64, 65, 122, 626, 627, 636, 637], "commun": [60, 107, 109, 110, 145, 704, 710], "network": [60, 118, 122, 128, 132, 144, 527, 536, 704, 711, 725, 737, 738], "smtp": 60, "possibl": [60, 107, 108, 109, 110, 114, 115, 117, 122, 123, 125, 128, 131, 144, 145, 445, 487, 505, 672, 676, 678, 682, 684], "send": 60, "gmail": 60, "outlook": 60, "pop": 60, "email": 60, "ieee": [60, 166, 186, 202, 269, 279, 337, 339, 396, 398, 411, 413, 427, 429], "754": [60, 166, 186, 202, 269, 279, 337, 339, 396, 398, 411, 413, 427, 429], "allow": [60, 128, 145, 167, 176, 177, 445, 487, 737, 738], "calcul": [60, 64, 65, 66, 67, 68, 114, 269, 270, 272, 273, 275, 276, 278, 279, 281, 282, 284, 285, 287, 288, 291, 293, 318, 320, 321, 323, 324, 334, 336, 337, 339, 367, 369, 370, 372, 373, 375, 376, 378, 379, 381, 396, 398, 408, 410, 420, 423, 424, 426, 427, 429, 433, 435, 436, 567, 568, 570, 571, 573, 574, 576, 672, 676, 678, 679, 681, 682, 684, 685, 687, 688, 690, 691, 694, 696], "live": [60, 61], "depend": [60, 108, 109, 114, 120, 122, 123, 128, 145, 186, 192, 269, 270, 272, 273, 275, 276, 278, 282, 284, 285, 287, 288, 291, 293, 318, 320, 321, 323, 334, 337, 339, 367, 369, 370, 372, 373, 375, 376, 378, 408, 410, 420, 423, 424, 426, 436, 540, 545, 557, 559, 560, 655, 659, 665, 666, 668, 669, 671], "did": [60, 110, 133], "aris": [60, 145], "until": [60, 109, 145, 704], "substanti": [60, 109, 117, 121], "innov": 60, "growth": 60, "usag": [60, 128, 219, 263], "relev": [60, 108, 110, 115, 122, 123, 131, 741, 742, 743, 744, 745, 746], "area": [60, 125, 143, 269, 275, 276, 278, 285, 287, 290, 294, 296, 320, 323, 438, 441, 704], "necess": 60, "parti": [60, 145], "could": [60, 61, 108, 109, 115, 117, 122, 123, 125, 128, 130, 131, 132, 660, 661, 662, 664], "easili": [60, 109, 131, 132, 133, 145, 704], "engag": [60, 107, 108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126], "regard": [60, 122, 219], "effect": [60, 114, 121, 122, 126, 145, 167, 178, 511, 520, 672, 688, 690, 694, 696], "2015": 60, "sinc": [60, 108, 109, 145], "alongsid": 60, "machin": [60, 108, 118, 144, 186, 202, 205, 269, 346, 540, 553, 556], "given": [60, 61, 64, 65, 108, 109, 110, 111, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 128, 130, 132, 133, 144, 167, 168, 170, 176, 177, 219, 252, 258, 260, 261, 262, 263, 265, 268, 445, 459, 460, 470, 493, 494, 509, 511, 513, 514, 516, 518, 519, 520, 527, 528, 529, 530, 531, 532, 533, 534, 540, 566, 567, 568, 570, 571, 573, 574, 576, 577, 578, 580, 588, 590, 591, 593, 597, 599, 603, 605, 606, 616, 618, 626, 633, 634, 648, 650, 651, 652, 654, 665, 669, 671, 714, 715], "frame": [60, 144], "matur": [60, 145], "state": [60, 114, 126, 127, 128, 129, 131, 144, 269, 396, 398, 527, 537, 704, 711, 712, 713, 714, 715, 716, 718, 719, 721, 722, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748], "than": [60, 64, 65, 109, 113, 115, 117, 122, 125, 128, 131, 132, 133, 145, 167, 168, 186, 202, 219, 263, 269, 273, 275, 276, 278, 282, 284, 291, 293, 303, 305, 309, 311, 315, 317, 320, 323, 326, 340, 342, 343, 345, 367, 369, 370, 372, 376, 378, 394, 408, 410, 411, 413, 417, 419, 427, 429, 442, 444, 445, 483, 484, 486, 511, 517, 540, 542, 548, 550, 553, 556, 565, 577, 578, 580, 591, 593, 607, 609, 648, 652, 660, 661, 662, 664, 672, 685, 687, 688, 690, 691, 694, 696], "preced": [60, 132], "mention": [60, 108, 109, 115, 118, 125, 126], "aros": 60, "70": [60, 540, 555, 672, 673, 675, 693], "80": [60, 540, 555, 672, 673, 675, 693], "90": [60, 93, 94, 269, 312, 314, 414, 416, 540, 555, 672, 673, 675, 693], "effort": [60, 107, 145], "stage": [60, 107, 109, 111, 112, 704], "complet": [60, 64, 65, 109, 110, 121, 122, 130, 131, 540, 557], "natur": [60, 115, 121, 122, 144, 269, 334, 367, 369, 373, 375, 540, 558], "like": [60, 108, 109, 111, 112, 113, 114, 115, 117, 124, 125, 126, 127, 128, 130, 131, 132, 133, 144, 145, 511, 517, 648, 652, 704], "certainli": 60, "mission": [60, 704], "creat": [60, 64, 65, 107, 108, 109, 111, 123, 124, 125, 128, 129, 132, 143, 144, 167, 168, 169, 170, 171, 172, 174, 175, 176, 177, 179, 180, 181, 184, 185, 219, 228, 229, 445, 469, 470, 490, 493, 494, 505, 511, 524, 648, 649, 650, 652, 704, 710, 714, 715, 716, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748], "At": [60, 110], "process": [60, 61, 107, 108, 109, 111, 118, 122, 128, 133, 219, 228, 229, 258, 268], "ourselv": 60, "lead": [60, 61, 64, 65, 66, 67, 68, 145, 540, 557, 560], "quansight": 60, "compani": 60, "made": [60, 109, 110, 122, 125, 128, 130], "organ": [60, 113, 118, 121, 122], "panda": 60, "scipi": 60, "conda": [60, 108, 111], "dask": [60, 660, 661, 662, 664], "apach": 60, "onnx": 60, "scikit": 60, "jupyt": 60, "aw": 60, "cupi": 60, "net": [60, 61, 128, 133], "sympi": 60, "rai": [60, 269, 291, 293], "modin": 60, "spyder": 60, "includ": [60, 64, 65, 109, 110, 113, 114, 115, 116, 117, 118, 119, 121, 122, 123, 124, 125, 126, 144, 145, 167, 168, 169, 179, 445, 476, 510, 540, 565, 626, 627, 648, 652, 655, 657, 672, 676, 678, 679, 681, 682, 684, 685, 687, 688, 690, 691, 694, 696, 697, 698, 700, 701, 703, 707, 709, 725, 735, 736, 739, 740], "member": [60, 109], "googl": [60, 704], "octoml": 60, "einop": [60, 64, 65, 445, 463, 464, 465], "further": [60, 61, 109, 111, 115, 121, 127, 131, 132, 704], "sponsor": 60, "lg": 60, "electron": 60, "microsoft": 60, "d": [60, 61, 93, 94, 107, 108, 112, 122, 131, 445, 452, 458, 527, 528, 529, 530, 531, 532, 533, 534, 540, 544, 555, 704, 710], "shaw": 60, "intel": 60, "togeth": [60, 64, 65, 121, 122, 132, 133, 145, 747, 748], "major": [60, 123, 124, 145, 655, 658], "involv": [60, 107, 111, 112, 123, 133, 186, 210, 269, 279, 396, 398, 704, 710], "anoth": [60, 64, 65, 108, 109, 118, 122, 123, 130, 133, 167, 173, 186, 193, 195], "promis": 60, "pursuit": 60, "unif": [60, 107, 130, 704, 710], "clearli": [60, 110, 115], "lot": [60, 61, 120, 130, 145], "thought": [60, 108, 109, 126], "care": [60, 109, 133], "attent": [60, 109, 121, 122, 527, 538, 539, 725, 736], "gone": [60, 127], "simplifi": [60, 128, 129, 130, 132], "compat": [60, 126, 145, 186, 194, 269, 279, 281, 291, 293, 297, 299, 303, 305, 306, 308, 309, 311, 312, 314, 324, 326, 327, 329, 336, 342, 343, 345, 348, 349, 351, 361, 363, 364, 366, 379, 381, 382, 384, 388, 390, 391, 393, 396, 398, 402, 404, 408, 410, 411, 413, 433, 435, 540, 553, 556, 559, 562, 564, 565, 577, 600, 602, 655, 657, 672, 676, 678, 679, 681, 682, 684, 685, 687, 688, 690, 691, 694, 696, 697, 698, 700, 701, 703, 704], "excit": [60, 107, 112, 704], "complianc": 60, "hope": [60, 145], "due": [60, 108, 122, 125, 269, 396, 398], "suit": [60, 108, 109, 112, 116, 117, 131, 144], "some": [60, 61, 64, 65, 108, 109, 110, 113, 114, 115, 118, 121, 122, 123, 124, 125, 126, 129, 130, 131, 132, 144, 145, 269, 337, 339, 511, 513, 514, 516, 518, 519, 520, 525, 527, 535, 704, 725, 733], "motiv": [60, 130], "great": [60, 61, 117, 128, 130], "convinc": 60, "celebr": 60, "encourag": [60, 144, 145, 704, 710], "foundat": 60, "point": [61, 109, 114, 115, 121, 125, 126, 128, 130, 131, 144, 166, 167, 168, 170, 172, 174, 180, 184, 186, 192, 202, 207, 210, 269, 273, 275, 276, 278, 279, 281, 282, 284, 285, 287, 288, 290, 291, 293, 294, 296, 312, 314, 315, 317, 318, 320, 321, 323, 324, 334, 336, 337, 339, 340, 367, 369, 370, 372, 376, 378, 379, 381, 396, 398, 408, 410, 411, 413, 414, 416, 420, 423, 424, 426, 427, 429, 436, 438, 441, 442, 444, 540, 541, 543, 545, 546, 547, 553, 556, 557, 559, 560, 565, 660, 661, 662, 664, 672, 676, 678, 679, 681, 682, 684, 685, 687, 688, 690, 691, 694, 696], "mai": [61, 108, 109, 122, 130, 132, 167, 168, 173, 219, 264, 269, 327, 329, 348, 349, 351, 364, 366, 385, 387, 388, 390, 445, 462, 660, 661, 662, 664, 665, 666, 668, 669, 671, 672, 676, 678, 679, 681, 682, 684], "ask": [61, 128, 130, 145, 704], "perfectli": 61, "happi": [61, 108, 145], "abund": 61, "better": [61, 109, 112, 127, 130, 131, 132], "ll": [61, 107, 109, 115, 122, 125, 131], "give": [61, 108, 109, 112, 114, 115, 119, 126, 130, 577, 600, 602], "two": [61, 66, 67, 114, 115, 117, 121, 122, 127, 131, 133, 167, 168, 172, 178, 182, 183, 186, 209, 214, 269, 309, 311, 414, 416, 445, 451, 540, 541, 543, 544, 545, 546, 547, 548, 550, 551, 553, 554, 555, 556, 557, 558, 559, 560, 561, 563, 564, 577, 613, 615, 660, 661, 662, 663, 664, 704], "streamlin": 61, "workflow": [61, 109, 131, 143, 704], "save": [61, 64, 65, 145, 445, 498, 737, 738], "week": [61, 109, 110, 704], "let": [61, 114, 115, 122, 123, 124, 128, 130, 131, 132, 133, 672, 679, 681, 688, 690, 691, 694, 696, 704], "sai": [61, 108, 120, 130], "deepmind": 61, "releas": [61, 108, 110, 704], "awesom": 61, "paper": 61, "love": 61, "choic": [61, 108, 125, 131, 672, 688, 690, 694, 696], "perceiverio": 61, "happen": [61, 108, 109, 131], "slew": 61, "rush": 61, "f": [61, 111, 112, 122, 128, 131, 133, 269, 346, 445, 478, 482], "g": [61, 112, 122, 145, 186, 191, 210, 219, 235, 648, 651, 652, 660, 661, 662, 664, 672, 676, 678, 682, 684, 685, 687, 691], "inevit": 61, "deviat": [61, 644, 645, 647, 648, 651, 672, 688, 690, 739, 740], "origin": [61, 64, 65, 66, 67, 68, 119, 120, 123, 128, 130, 269, 291, 293, 540, 551, 577, 600, 602, 603, 605], "often": [61, 118, 145], "erron": 61, "train": [61, 118, 122, 124, 131, 132, 133, 143, 144, 145, 511, 513, 514, 518, 704], "poor": 61, "converg": 61, "perform": [61, 64, 65, 113, 115, 117, 118, 119, 121, 122, 124, 125, 126, 128, 131, 145, 156, 161, 167, 176, 177, 219, 445, 459, 463, 464, 465, 479, 480, 481, 511, 514, 516, 518, 519, 520, 527, 535, 537, 540, 560, 622, 623, 624, 625, 626, 633, 634, 697, 698, 700, 701, 703], "issu": [61, 107, 110, 128, 130, 132, 145], "publish": [61, 145], "manag": [61, 107, 125, 145, 219], "get": [61, 64, 65, 107, 108, 110, 112, 118, 123, 124, 125, 128, 129, 130, 131, 132, 186, 200, 201, 202, 205, 219, 228, 229, 238, 239, 252, 253, 258, 262, 265, 268, 445, 450, 471, 472, 473, 492, 704, 710, 725, 734], "work": [61, 108, 109, 110, 112, 117, 122, 123, 124, 127, 128, 129, 130, 132, 133, 704, 710], "repositori": [61, 108, 109, 111, 116], "pull": [61, 107, 108, 111, 113, 145], "request": [61, 107, 113, 219, 255], "confus": [61, 125], "do": [61, 64, 65, 108, 109, 110, 113, 114, 115, 118, 119, 120, 121, 122, 123, 124, 125, 126, 128, 130, 131, 132, 133, 145, 269, 411, 413, 445, 481, 511, 517, 525, 626, 627, 636, 637, 638], "expect": [61, 145, 445, 450, 704], "codebas": [61, 107, 112, 113, 125, 127, 219, 261, 262, 704], "total": [61, 64, 65, 66, 67, 68, 107, 109, 115, 117, 124, 131, 132, 145, 219, 265, 655, 658, 672, 688, 690, 694, 696], "hour": 61, "spent": 61, "spin": 61, "off": [61, 127, 540, 544, 563], "test": [61, 108, 110, 112, 115, 145, 186, 207, 208, 269, 352, 354, 355, 357, 358, 360, 697, 698, 700, 701, 703], "error": [61, 64, 65, 108, 117, 121, 124, 126, 130, 145, 156, 157, 219, 269, 330, 333, 672, 676, 678, 682, 684, 737, 738, 741, 745], "address": [61, 109, 110, 121, 128], "sake": 61, "singl": [61, 64, 65, 109, 113, 115, 117, 118, 120, 122, 125, 126, 128, 131, 132, 133, 145, 219, 228, 229, 248, 249, 250, 251, 445, 507, 510, 648, 651, 652, 660, 661], "multipl": [61, 64, 65, 75, 76, 77, 78, 89, 90, 93, 94, 109, 115, 118, 122, 145, 269, 396, 398, 445, 446, 448, 487, 540, 547, 577, 578, 580, 581, 603, 605, 606, 644, 645, 647, 655, 656, 657, 672, 676, 678, 679, 681, 682, 684, 685, 687, 688, 690, 691, 694, 696, 697, 698, 700, 701, 703, 725, 735], "line": [61, 108, 115, 121, 129, 130, 131, 132, 143, 704, 710], "directli": [61, 109, 113, 114, 118, 121, 122, 123, 124, 125, 126, 128, 130, 132, 133, 144, 145, 626, 638], "graph": [61, 118, 122, 129, 145, 511, 514, 516, 518, 519, 520, 660, 661, 662, 664, 737, 738], "guarante": [61, 121, 145, 660, 661], "turn": [61, 115, 122], "step": [61, 64, 65, 79, 80, 108, 109, 111, 115, 119, 121, 122, 123, 124, 128, 131, 132, 133, 144, 167, 168, 176, 177, 219, 511, 513, 514, 516, 518, 519, 520, 622, 623, 624, 625, 704, 741, 742, 743, 744, 745, 746], "take": [61, 107, 108, 109, 114, 115, 117, 122, 123, 124, 128, 130, 132, 133, 145, 269, 312, 314, 704, 710], "few": [61, 109, 110, 118, 122, 123, 124, 125, 129, 130, 131, 132, 143, 704, 710], "second": [61, 108, 115, 125, 130, 186, 209, 214, 219, 250, 269, 279, 281, 297, 299, 303, 305, 306, 308, 309, 311, 312, 314, 326, 327, 329, 336, 342, 343, 345, 348, 349, 351, 361, 363, 364, 366, 379, 381, 382, 384, 388, 390, 391, 393, 396, 398, 402, 404, 408, 410, 433, 435, 445, 451, 492, 497, 511, 513, 514, 518, 540, 542, 544, 545, 548, 550, 555, 557, 560, 562, 564, 577, 610, 612, 613, 615, 622, 624, 660, 661, 662, 741, 742, 743], "automat": [61, 108, 109, 118, 122, 126, 127, 128, 129, 132, 133, 704], "everyon": [61, 107, 109, 145], "regardless": [61, 64, 65, 107, 130, 133, 164, 165], "wouldn": 61, "nice": [61, 117], "write": [61, 64, 65, 109, 110, 111, 112, 113, 114, 115, 117, 118, 119, 125, 128, 130, 133, 156, 159, 219, 264, 269, 270, 272, 273, 275, 276, 278, 279, 281, 282, 284, 285, 287, 288, 291, 293, 297, 299, 300, 302, 303, 305, 306, 308, 309, 311, 312, 314, 315, 317, 318, 320, 321, 323, 334, 336, 337, 339, 340, 352, 354, 355, 357, 358, 360, 361, 363, 367, 369, 370, 372, 373, 375, 376, 378, 379, 381, 382, 384, 385, 387, 388, 390, 391, 393, 396, 398, 399, 401, 402, 404, 408, 410, 411, 413, 414, 416, 417, 419, 420, 423, 424, 426, 427, 429, 430, 432, 433, 435, 436, 445, 456, 460, 467, 469, 567, 568, 570, 571, 573, 574, 576, 577, 578, 580, 588, 590, 591, 593, 594, 596, 597, 599, 603, 605, 607, 609, 610, 612, 613, 615, 644, 645, 647, 648, 650, 665, 666, 668, 669, 671, 672, 673, 675, 676, 678, 679, 681, 682, 684, 685, 687, 688, 690, 691, 693, 694, 696, 697, 698, 700, 701, 703], "onc": [61, 108, 109, 122, 123, 124, 128, 131, 145, 219, 263, 540, 547, 560, 648, 649], "know": [61, 660, 661, 662, 664], "among": [61, 64, 65, 117], "frantic": 61, "port": 61, "lucid": 61, "honk": 61, "improv": [61, 109, 118, 128], "understand": [61, 108, 109, 110, 111, 112, 114, 115, 116, 126, 127], "pattern": [61, 64, 65, 114, 123, 445, 463, 464, 465], "hasn": 61, "now": [61, 64, 65, 108, 111, 113, 120, 122, 123, 126, 130, 131, 133, 144, 145, 725, 736, 737, 738], "spend": 61, "torchvis": 61, "probabl": [61, 527, 535, 648, 649, 725, 733], "sonnet": 61, "about": [61, 108, 109, 116, 127, 128, 132, 133, 145, 186, 202, 205], "next": [61, 108, 109, 110, 111, 114, 115, 119, 120, 130, 131, 186, 202, 704, 737, 738, 741, 742, 743, 744, 745, 746], "everyth": [61, 109, 110, 129, 145], "zero": [61, 64, 65, 66, 67, 115, 121, 122, 123, 124, 126, 128, 131, 132, 156, 158, 159, 167, 170, 172, 178, 182, 183, 185, 186, 192, 269, 279, 282, 284, 303, 305, 321, 337, 339, 340, 385, 387, 388, 390, 394, 395, 396, 398, 399, 401, 408, 410, 411, 413, 414, 416, 427, 429, 430, 432, 436, 445, 459, 490, 493, 494, 511, 513, 514, 518, 519, 527, 535, 540, 543, 548, 550, 553, 556, 564, 565, 577, 588, 590, 591, 593, 597, 599, 603, 605, 619, 621, 644, 645, 647, 648, 650, 655, 656, 657, 658, 660, 661, 662, 664, 672, 676, 678, 679, 681, 682, 684, 685, 687, 688, 690, 691, 694, 696, 697, 698, 700, 701, 703, 704, 716, 725, 726, 727, 728, 729, 730, 731, 732, 733, 735, 741, 742, 743, 744], "need": [61, 108, 109, 110, 111, 113, 114, 115, 116, 118, 121, 122, 125, 128, 130, 131, 144, 145, 445, 455, 456, 577, 578, 580, 588, 590], "said": 61, "high": [61, 64, 65, 93, 94, 110, 131, 648, 650, 652], "level": [61, 107, 110, 118, 127, 128, 131, 132, 133, 145], "optim": [61, 125, 129, 131, 133, 144, 219, 511, 514, 516, 518, 519, 520, 622, 623, 624, 625, 704, 742, 743, 744, 746], "trainer": [61, 143, 145, 704], "statu": 61, "quo": 61, "kera": 61, "dopamin": 61, "ignit": 61, "catalyst": 61, "lightn": 61, "fastai": 61, "haiku": [61, 133], "flax": [61, 133, 145], "trax": [61, 133], "objax": [61, 133], "idea": [61, 144], "fulli": [61, 121, 122, 126, 128, 129, 130, 131, 132, 133, 145, 725, 735, 736], "offer": [61, 132], "containerwithactiv": [62, 66, 67], "dict_in": [62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104], "queue": [62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 131, 219, 228, 229, 445, 492, 497], "queue_load_s": [62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104], "container_combine_method": [62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104], "list_join": [62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104], "queue_timeout": [62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 445], "print_limit": [62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104], "key_length_limit": [62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104], "print_ind": [62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104], "print_line_spac": [62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104], "ivyh": [62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104], "default_key_color": [62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104], "green": [62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 108, 109, 750, 751], "keyword_color_dict": [62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104], "rebuild_child_contain": [62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104], "types_to_iteratively_nest": [62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104], "alphabetical_kei": [62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104], "containerbas": [62, 63, 64, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 122], "__getitem__": [64, 65, 122], "queri": [64, 65, 122, 123, 130, 219, 252, 262, 527, 538, 539, 725, 736], "slice": [64, 65, 445, 469, 470, 626, 635], "chain": [64, 65, 121, 122, 132, 133, 145, 622, 623, 624, 626, 639, 747, 748], "element": [64, 65, 114, 128, 133, 156, 157, 158, 159, 160, 161, 162, 163, 167, 168, 174, 175, 182, 183, 219, 242, 246, 250, 269, 270, 272, 273, 275, 276, 278, 279, 281, 282, 284, 285, 287, 288, 290, 291, 293, 294, 296, 297, 299, 300, 302, 303, 305, 306, 308, 309, 311, 312, 314, 315, 317, 318, 320, 321, 323, 324, 326, 327, 329, 330, 333, 334, 336, 337, 339, 340, 342, 343, 345, 346, 348, 349, 351, 352, 354, 355, 357, 358, 360, 361, 363, 364, 366, 367, 369, 370, 372, 373, 375, 376, 378, 379, 381, 382, 384, 385, 387, 388, 390, 391, 393, 394, 395, 396, 398, 399, 401, 402, 404, 405, 407, 408, 410, 411, 413, 414, 416, 417, 419, 420, 423, 424, 426, 427, 429, 430, 432, 433, 435, 436, 438, 439, 441, 442, 444, 445, 451, 452, 455, 456, 459, 460, 467, 477, 506, 507, 527, 535, 540, 542, 545, 548, 550, 557, 560, 577, 578, 580, 591, 593, 597, 599, 603, 605, 606, 607, 609, 648, 649, 655, 658, 659, 660, 661, 662, 663, 664, 665, 669, 671, 672, 673, 675, 676, 678, 679, 681, 682, 684, 685, 687, 688, 690, 691, 693, 694, 696, 697, 698, 700, 701, 703, 725, 733], "represent": [64, 65, 66, 67, 68, 144, 166, 186, 190, 191, 202, 205, 219, 235, 236, 269, 270, 272, 279, 297, 299, 306, 308, 312, 314, 391, 393, 396, 398, 445, 449, 500, 505], "dictionari": [64, 65, 66, 67, 68, 131, 145, 219, 262], "around": [64, 65, 66, 67, 68, 109, 118, 121, 126, 130, 145], "sequenc": [64, 65, 66, 67, 68, 115, 123, 144, 219, 228, 229, 445, 452, 487, 577, 606, 610, 612, 648, 650, 672, 676, 678, 725, 734, 739, 740, 747, 748], "multiprocess": [64, 65, 66, 67, 68, 131, 145, 219, 228, 445], "asynchron": [64, 65, 66, 67, 68], "wait": [64, 65, 66, 67, 68, 109], "size": [64, 65, 66, 67, 68, 130, 131, 167, 176, 177, 219, 261, 262, 263, 445, 493, 499, 527, 539, 540, 544, 551, 555, 557, 560, 564, 577, 588, 590, 603, 605, 606, 607, 609, 648, 649, 651, 652, 655, 656, 658, 697, 698, 700, 701, 703, 725, 726, 727], "dimens": [64, 65, 66, 67, 68, 115, 128, 131, 156, 161, 167, 182, 183, 219, 250, 445, 463, 464, 465, 468, 474, 490, 509, 527, 528, 529, 530, 531, 532, 533, 534, 537, 540, 541, 542, 543, 544, 545, 546, 547, 548, 550, 551, 553, 554, 556, 557, 559, 560, 561, 563, 564, 565, 567, 571, 573, 574, 576, 577, 582, 584, 588, 590, 591, 593, 594, 596, 597, 599, 600, 602, 603, 605, 606, 607, 609, 610, 612, 622, 623, 624, 625, 648, 654, 655, 656, 657, 658, 660, 661, 662, 664, 672, 673, 675, 676, 678, 679, 681, 682, 684, 685, 687, 688, 690, 691, 693, 694, 696, 697, 698, 700, 701, 703, 725, 726, 727, 728, 729, 730, 731, 732, 735, 736], "combin": [64, 65, 66, 67, 68, 109, 115, 117, 118, 121, 122, 133, 540, 542], "arriv": [64, 65, 66, 67, 68], "timeout": [64, 65, 66, 67, 68, 219, 228, 229, 445, 492, 497], "limit": [64, 65, 66, 67, 68, 109, 115, 117, 128, 131, 133, 145, 186, 202, 205, 445, 455, 456, 577, 578, 580], "maximum": [64, 65, 66, 67, 68, 115, 128, 131, 133, 219, 243, 247, 251, 263, 269, 445, 455, 456, 468, 511, 518, 577, 578, 580, 626, 638, 655, 656, 672, 676, 678, 682, 684, 704], "length": [64, 65, 66, 67, 68, 131, 167, 168, 178, 540, 560, 561, 577, 600, 602], "whitespac": [64, 65, 66, 67, 68], "indent": [64, 65, 66, 67, 68, 131], "extra": [64, 65, 66, 67, 68, 115, 120, 121, 128, 511, 515], "newlin": [64, 65, 66, 67, 68, 114], "handl": [64, 65, 66, 67, 68, 112, 117, 118, 120, 122, 123, 124, 125, 126, 132, 145, 164, 165, 219, 235, 236, 237, 238, 239, 253, 257, 258, 265, 268, 511, 514, 516, 518, 519, 520, 741, 742, 743, 744, 745, 746], "result": [64, 65, 66, 67, 68, 113, 114, 115, 117, 121, 122, 123, 125, 126, 131, 145, 156, 159, 167, 168, 186, 210, 219, 228, 264, 269, 270, 272, 273, 275, 276, 278, 279, 281, 282, 284, 285, 287, 288, 291, 293, 297, 299, 300, 302, 303, 305, 306, 308, 309, 311, 312, 314, 315, 317, 318, 320, 321, 323, 324, 326, 327, 329, 334, 336, 337, 339, 340, 342, 343, 345, 346, 348, 349, 351, 352, 354, 355, 357, 358, 360, 361, 363, 364, 366, 367, 369, 370, 372, 373, 375, 376, 378, 379, 381, 382, 384, 385, 387, 388, 390, 391, 393, 396, 398, 399, 401, 402, 404, 408, 410, 411, 413, 414, 416, 417, 419, 420, 423, 424, 426, 427, 429, 430, 432, 433, 435, 436, 442, 444, 445, 456, 460, 467, 469, 493, 494, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 539, 540, 541, 544, 551, 560, 565, 567, 568, 570, 571, 573, 574, 576, 577, 578, 580, 588, 590, 591, 593, 594, 596, 597, 599, 603, 605, 607, 609, 610, 612, 613, 615, 626, 639, 644, 645, 647, 648, 650, 655, 656, 657, 660, 661, 665, 666, 668, 669, 671, 672, 673, 675, 676, 678, 679, 681, 682, 684, 685, 687, 688, 690, 691, 693, 694, 696, 697, 698, 700, 701, 703, 704], "color": [64, 65, 66, 67, 68, 750, 751], "termin": [64, 65, 66, 67, 68, 108, 109, 111, 122, 128, 131], "map": [64, 65, 66, 67, 68, 117, 118, 122, 126, 131, 144, 145, 219, 228, 626, 633, 634, 638, 639, 725, 736], "termcolor": [64, 65, 66, 67, 68], "rebuild": [64, 65, 66, 67, 68], "found": [64, 65, 66, 67, 68, 108, 109, 114, 121, 122, 219, 253], "constructor": [64, 65, 66, 67, 68, 123, 124, 130, 445, 450, 747, 748], "param": [64, 65, 66, 67, 68, 128, 133, 445, 449, 469, 470], "kept": [64, 65, 66, 67, 68, 109, 125, 622, 623, 624], "structur": [64, 65, 66, 67, 68, 111, 113, 118, 121, 122, 131, 132, 445, 457, 626, 639], "alphabet": [64, 65, 66, 67, 68], "preserv": [64, 65, 66, 67, 68, 133, 145, 511, 522, 577, 591, 593], "__setitem__": [64, 65, 121, 122, 130], "val": [64, 65, 125, 130, 445, 479, 480, 481, 495, 496], "after": [64, 65, 115, 122, 123, 127, 186, 214, 269, 427, 429, 511, 514, 515, 516, 518, 519, 520, 644, 645, 647, 741, 742, 743, 744, 745, 746], "updat": [64, 65, 108, 109, 110, 111, 112, 115, 116, 120, 121, 122, 123, 126, 128, 130, 131, 133, 145, 219, 228, 445, 481, 493, 494, 511, 513, 514, 516, 518, 519, 520, 527, 537, 622, 623, 624, 626, 633, 634, 642, 643, 714, 715, 741, 742, 743, 744, 745, 746], "all_fals": [64, 65], "assert_is_bool": [64, 65], "key_chain": [64, 65, 66, 67, 75, 76, 77, 78, 79, 80, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 99, 100, 101, 102, 103, 104, 330, 332, 420, 422, 578, 581, 626, 639], "to_appli": [64, 65, 66, 67, 75, 76, 77, 78, 79, 80, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 99, 100, 101, 102, 103, 104, 330, 332, 420, 422, 578, 581, 626, 639], "prune_unappli": [64, 65, 66, 67, 75, 76, 77, 78, 79, 80, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 99, 100, 101, 102, 103, 104, 330, 332, 420, 422, 578, 581, 626, 639], "map_sequ": [64, 65, 66, 67, 75, 76, 77, 78, 79, 80, 87, 88, 89, 90, 91, 92, 93, 94, 99, 100, 101, 102, 103, 104, 330, 332, 420, 422, 578, 581], "entri": [64, 65, 167, 176, 177, 577, 606, 626, 639], "boolean": [64, 65, 122, 167, 174, 186, 192, 206, 218, 219, 254, 266, 269, 297, 299, 300, 302, 306, 308, 312, 314, 382, 384, 385, 387, 388, 390, 391, 393, 445, 446, 448, 451, 452, 476, 477, 478, 482, 483, 484, 485, 486, 503, 510, 511, 517, 622, 623, 624, 626, 636, 672, 682, 684], "evalu": [64, 65, 122, 269, 334, 337, 339, 367, 369, 370, 372, 373, 375, 376, 378, 399, 401, 417, 419, 430, 432, 626, 627, 636, 637, 697, 698, 700, 701, 703], "assert": [64, 65, 130, 131, 445, 453], "skip": [64, 65, 111, 117, 626, 639], "prune": [64, 65, 626, 639, 640, 641], "all_key_chain": [64, 65], "include_empti": [64, 65], "all_tru": [64, 65, 122, 131], "arrays_as_list": [64, 65], "intermedi": [64, 65], "as_arrai": [64, 65, 445, 474, 499], "as_bool": [64, 65], "as_on": [64, 65], "ones": [64, 65, 66, 67, 117, 128, 130, 131, 167, 172, 181, 269, 315, 317, 445, 490, 704], "sub": [64, 65, 109, 110, 112, 117, 122, 130, 131, 132, 219, 244, 245, 248, 249, 250, 251, 540, 544, 577, 606, 622, 623, 624, 625, 704], "fill": [64, 65, 167, 170, 174, 175, 180, 181, 184, 185, 648, 650], "as_random_uniform": [64, 65], "low": [64, 65, 93, 94, 128, 648, 650, 652], "uniform": [64, 65, 132, 648, 649, 650, 652, 716, 718, 719, 722, 723], "lower": [64, 65, 109, 115, 128, 145, 167, 172, 182, 269, 394, 540, 541, 648, 652], "boundari": [64, 65, 648, 652], "output": [64, 65, 108, 112, 113, 114, 115, 117, 118, 121, 122, 124, 125, 126, 128, 130, 132, 133, 145, 156, 159, 167, 168, 170, 171, 172, 174, 175, 178, 180, 181, 184, 185, 219, 228, 229, 263, 264, 269, 270, 272, 273, 275, 276, 278, 279, 281, 282, 284, 285, 287, 288, 291, 293, 297, 299, 300, 302, 303, 305, 306, 308, 309, 311, 312, 314, 315, 317, 318, 320, 321, 323, 334, 336, 337, 339, 340, 352, 354, 355, 357, 358, 360, 361, 363, 367, 369, 370, 372, 373, 375, 376, 378, 379, 381, 382, 384, 385, 387, 388, 390, 391, 393, 396, 398, 399, 401, 402, 404, 408, 410, 411, 413, 414, 416, 417, 419, 420, 423, 424, 426, 427, 429, 430, 432, 433, 435, 436, 445, 454, 456, 460, 467, 469, 511, 515, 527, 529, 531, 533, 535, 537, 538, 539, 540, 563, 567, 568, 570, 571, 573, 574, 576, 577, 578, 580, 588, 590, 591, 593, 594, 596, 597, 599, 603, 605, 607, 609, 610, 612, 613, 615, 616, 618, 626, 639, 644, 645, 647, 648, 650, 651, 652, 665, 666, 668, 669, 671, 672, 673, 675, 676, 678, 679, 681, 682, 684, 685, 687, 688, 690, 691, 693, 694, 696, 697, 698, 700, 701, 703, 704, 725, 726, 727, 728, 729, 730, 731, 733, 734, 735, 736], "interv": [64, 65, 128, 133, 167, 168, 176, 177, 540, 564, 577, 578, 580, 610, 612, 648, 650, 652, 697, 698, 700, 701, 703], "upper": [64, 65, 167, 172, 183, 540, 541, 557, 648, 652], "as_vari": [64, 65], "as_zero": [64, 65], "assert_contains_sub_contain": [64, 65], "sub_cont": [64, 65], "partial": [64, 65, 109, 737, 738], "except": [64, 65, 114, 121, 125, 130, 145, 186, 194, 445, 453, 462, 481, 508, 540, 556, 577, 582, 584, 610, 612, 655, 658, 697, 698, 700, 701, 703], "diff": [64, 65, 122, 131], "screen": [64, 65, 131], "assert_contains_sub_structur": [64, 65], "check_shap": [64, 65], "static": [64, 65, 75, 76, 77, 78, 79, 80, 87, 88, 89, 90, 93, 94, 99, 100, 105, 106, 110, 114, 115, 118, 145, 164, 165, 578, 581], "assert_ident": [64, 65], "check_typ": [64, 65], "same_arrai": [64, 65, 131], "arrays_equ": [64, 65, 66, 67, 445], "datatyp": [64, 65, 167, 169, 179, 186, 196, 207, 208, 209], "exact": [64, 65, 109, 128, 660, 661], "assert_identical_structur": [64, 65], "at_key_chain": [64, 65], "ignore_key_error": [64, 65], "ignore_non": [64, 65], "at_kei": [64, 65], "ignor": [64, 65, 115, 145, 167, 178, 626, 637, 741, 745], "substr": [64, 65], "access": [64, 65, 109, 111, 123], "clip_min": [64, 65], "clip_max": [64, 65], "minimum": [64, 65, 128, 133, 219, 269, 270, 272, 445, 472, 473, 495, 496, 501, 502, 577, 578, 580, 655, 657, 672, 676, 678, 682, 684, 704], "config": [64, 65, 131, 626, 639], "right": [64, 65, 107, 108, 109, 112, 115, 131, 269, 303, 305, 309, 311, 540, 560], "duplic": [64, 65, 114, 119, 120, 130, 132], "compar": [64, 65, 117, 131, 445, 446, 448, 451, 452, 660, 661, 662, 664, 665, 666, 668, 669, 671], "configur": [64, 65, 108, 109, 111, 123, 219, 262, 626, 639], "container_rightmost": [64, 65], "common_key_chain": [64, 65, 122], "across": [64, 65, 110, 115, 117, 118, 122, 123, 126, 219, 228, 229, 240, 241, 243, 244, 245, 246, 247, 251, 261, 262, 445, 451, 452, 626, 632, 655, 657], "properti": [64, 65, 115, 117, 118, 122, 130, 131, 132, 219, 231, 737, 738, 741, 742, 743, 744, 746], "contains_sub_contain": [64, 65], "match": [64, 65, 122, 186, 192, 269, 411, 413, 445, 487], "contains_sub_structur": [64, 65], "copi": [64, 65, 111, 114, 119, 123, 128, 130, 131, 144, 145, 167, 169, 173, 186, 192, 219, 264, 445, 458, 506, 507, 577, 600, 602, 626, 628, 665, 669, 671], "create_if_abs": [64, 65], "inplac": [64, 65, 79, 80, 112, 115, 120, 121, 126, 130, 132, 445, 453, 478, 481, 482, 503, 511, 514, 516, 518, 519, 520, 714, 715, 741, 742, 743, 744, 745, 746], "correspond": [64, 65, 66, 67, 109, 114, 115, 116, 118, 121, 122, 123, 126, 186, 193, 269, 291, 293, 408, 410, 540, 542, 545, 559, 577, 582, 584, 603, 605, 648, 649, 655, 656, 657, 660, 661, 662, 664, 672, 685, 687, 688, 690, 691, 694, 696], "alreadi": [64, 65, 108, 109, 119, 122, 126, 130, 145, 219, 269, 315, 317, 340, 396, 398, 414, 416, 442, 444, 540, 555, 704], "noth": [64, 65, 109], "cutoff_at_depth": [64, 65], "depth_cutoff": [64, 65], "summari": [64, 65, 109, 186, 197, 198, 199, 211, 212, 213, 219, 232, 233, 445, 457, 461, 475, 511, 521, 526], "cutoff_at_height": [64, 65], "height_cutoff": [64, 65], "deep_copi": [64, 65, 131], "intern": [64, 65, 114, 121, 122, 124, 125, 219, 511, 525, 626, 627, 636, 637, 716, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 747, 748], "dev": [64, 65, 66, 68, 108, 118, 124, 128, 130, 132, 219, 228, 253], "belong": [64, 65, 132], "dev_clon": [64, 65, 219], "clone": [64, 65, 109, 111, 219, 240, 241, 242, 243], "dev_dist": [64, 65, 219], "distribut": [64, 65, 110, 124, 145, 219, 240, 244, 245, 246, 247, 527, 535, 567, 568, 570, 571, 573, 574, 576, 648, 649, 650, 651, 652, 725, 733, 737, 738], "along": [64, 65, 113, 125, 167, 176, 177, 219, 244, 245, 246, 247, 248, 249, 250, 251, 263, 445, 459, 460, 469, 509, 540, 551, 563, 564, 565, 567, 571, 573, 574, 576, 577, 582, 584, 591, 593, 597, 599, 603, 605, 606, 610, 612, 616, 618, 622, 623, 624, 625, 648, 654, 655, 656, 657, 665, 666, 668, 669, 671, 672, 673, 675, 676, 678, 679, 681, 682, 684, 685, 687, 688, 690, 691, 693, 694, 696, 697, 698, 700, 701, 703], "split": [64, 65, 107, 109, 127, 128, 145, 219, 228, 244, 245, 246, 247, 261, 262, 263, 445, 487, 577, 704], "dev_str": [64, 65], "mode": [64, 65, 108, 115, 122, 145, 164, 165, 219, 248, 249, 250, 251, 263, 269, 279, 396, 398, 540, 557], "diff_kei": [64, 65], "detect_key_diff": [64, 65], "detect_value_diff": [64, 65], "detect_shape_diff": [64, 65], "thei": [64, 65, 110, 112, 113, 115, 118, 120, 122, 123, 124, 125, 130, 131, 132, 133, 145, 186, 209, 622, 623, 624, 648, 649, 704, 747, 748], "treat": [64, 65, 129, 133, 164, 165], "detect": [64, 65, 126, 131, 132, 626, 627, 637], "without": [64, 65, 109, 113, 118, 121, 122, 124, 126, 128, 130, 131, 132, 144, 145, 445, 492, 497, 577, 600, 602, 626, 628, 660, 661, 662, 664], "flag": [64, 65, 109, 125, 130, 219, 238, 511, 517], "container0": [64, 65], "einops_rearrang": [64, 65, 445], "axes_length": [64, 65, 445, 463, 464, 465], "rearrang": [64, 65, 445, 463, 465], "addit": [64, 65, 108, 109, 113, 114, 117, 122, 123, 130, 131, 133, 219, 264, 269, 279, 445, 463, 464, 465, 644, 645, 647, 725, 735], "einops_reduc": [64, 65, 445], "reduct": [64, 65, 123, 130, 445, 464, 493, 494, 697, 698, 700, 701, 703, 704], "reduc": [64, 65, 130, 219, 263, 445, 464, 540, 557, 655, 656, 657, 672, 676, 678, 679, 681, 682, 684, 685, 687, 688, 690, 691, 694, 696, 697, 698, 700, 701, 703], "One": [64, 65, 123, 128, 130, 131, 445, 464, 577, 600, 602, 648, 650], "callabl": [64, 65, 122, 128, 146, 147, 148, 149, 150, 151, 152, 153, 154, 164, 165, 186, 203, 204, 219, 263, 445, 449, 454, 462, 464, 622, 623, 624, 625, 626, 632, 636, 637, 638], "einops_repeat": [64, 65, 445], "find_sub_contain": [64, 65], "sub_cont_to_find": [64, 65], "exsit": [64, 65], "find_sub_structur": [64, 65], "sub_struc_to_find": [64, 65], "flatten_key_chain": [64, 65, 131, 737, 738], "__": [64, 65, 115, 131], "above_height": [64, 65, 131], "below_depth": [64, 65, 131], "format_key_chain": [64, 65], "format_fn": [64, 65], "format": [64, 65, 111, 114, 123, 124, 128, 130, 131, 186, 200, 219, 239, 672, 673, 675, 693, 704], "string": [64, 65, 119, 123, 124, 128, 131, 186, 190, 191, 200, 206, 218, 219, 235, 236, 237, 238, 252, 258, 264, 265, 268, 445, 461], "from_disk_as_hdf5": [64, 65, 131], "h5_obj_or_filepath": [64, 65], "slice_obj": [64, 65], "load": [64, 65, 145], "disk": [64, 65, 131], "h5py": [64, 65], "file": [64, 65, 108, 109, 111, 113, 114, 118, 119, 121, 122, 128, 131, 445, 498, 737, 738], "hdf5": [64, 65, 131, 737, 738], "filepath": [64, 65, 109], "h5": [64, 65], "from_disk_as_json": [64, 65, 131], "json_filepath": [64, 65], "json": [64, 65, 131], "were": [64, 65, 109, 113, 117, 122], "abl": [64, 65, 108, 109, 118, 123, 125, 130, 133], "dure": [64, 65, 118, 122, 123, 124, 125, 145, 164, 165, 219, 264, 445, 508, 511, 513, 514, 518, 540, 548, 550, 622, 623, 624, 625, 672, 688, 690, 694, 696, 737, 738, 741, 742, 743, 745], "from_disk_as_pickl": [64, 65, 131], "pickle_filepath": [64, 65], "pickl": [64, 65, 122, 131], "from_flat_list": [64, 65], "flat_list": [64, 65], "hierarchi": [64, 65, 131], "flat": [64, 65, 445, 493, 577, 597, 599], "popul": [64, 65, 123, 124, 128, 648, 649, 672, 688, 690, 694, 696], "from_numpi": [64, 65, 131], "gather": [64, 65, 445, 470], "indic": [64, 65, 111, 129, 133, 156, 161, 269, 417, 419, 445, 469, 470, 477, 490, 493, 494, 527, 528, 529, 530, 531, 532, 533, 534, 540, 565, 577, 603, 605, 626, 627, 629, 631, 633, 634, 635, 637, 640, 641, 642, 643, 644, 645, 647, 648, 649, 655, 656, 657, 658, 660, 661, 663, 665, 666, 668, 669, 671, 704, 707, 709, 725, 726, 727, 728, 729, 730, 731, 732, 737, 738], "accord": [64, 65, 108, 111, 118, 123, 186, 195, 202, 269, 279, 309, 311, 396, 398, 445, 469, 493, 494, 540, 564, 577, 585, 587, 619, 621, 672, 688, 690, 694, 696], "index": [64, 65, 111, 118, 122, 130, 166, 167, 172, 178, 219, 260, 445, 449, 469, 470, 577, 610, 612, 626, 629, 630, 633, 634, 635, 640, 642, 655, 656, 657, 658, 660, 661, 662, 665, 666, 668, 707, 709], "gather_nd": [64, 65, 445, 704], "h5_file_s": [64, 65], "content": [64, 65, 110, 111, 125, 128, 131], "batch": [64, 65, 118, 122, 131, 219, 261, 262, 445, 468, 527, 536, 540, 565, 622, 623, 624, 625, 644, 645, 647, 739, 740], "handle_inplac": [64, 65], "prime": [64, 65], "overwritten": [64, 65, 119, 121], "has_kei": [64, 65], "query_kei": [64, 65], "somewher": [64, 65], "has_key_chain": [64, 65], "has_nan": [64, 65, 445], "include_inf": [64, 65, 445, 476, 510], "leafwis": [64, 65], "nan": [64, 65, 113, 114, 166, 186, 192, 269, 270, 272, 273, 275, 276, 278, 279, 281, 282, 284, 285, 287, 288, 291, 293, 315, 317, 318, 320, 321, 323, 334, 336, 337, 339, 340, 352, 354, 358, 360, 367, 369, 370, 372, 376, 378, 379, 381, 396, 398, 408, 410, 411, 413, 414, 416, 420, 423, 424, 426, 427, 429, 436, 442, 444, 445, 476, 510, 527, 539, 660, 661, 662, 664, 672, 676, 678, 679, 681, 682, 684, 688, 690, 691, 694, 696, 697, 698, 700, 701, 703], "well": [64, 65, 117, 125, 132, 133, 144, 445, 476, 540, 559], "inf": [64, 65, 166, 445, 476, 510, 540, 565], "wise": [64, 65, 128, 133, 156, 157, 158, 159, 160, 161, 162, 163, 269, 270, 272, 273, 279, 281, 282, 284, 288, 291, 293, 297, 299, 300, 302, 303, 305, 306, 308, 309, 311, 312, 314, 324, 326, 327, 329, 330, 333, 336, 342, 343, 345, 346, 348, 349, 351, 361, 363, 364, 366, 379, 381, 382, 384, 385, 387, 388, 390, 391, 393, 394, 395, 396, 398, 402, 404, 408, 410, 411, 413, 433, 435, 445, 467, 577, 578, 580], "identical_array_shap": [64, 65], "exclus": [64, 65, 118, 122, 133, 167, 168, 445, 459, 483, 484, 486, 511, 517, 648, 650], "trace": [64, 65, 66, 67, 128, 145, 445, 483, 484, 486, 540], "identical_config": [64, 65], "identical_structur": [64, 65], "if_exist": [64, 65], "inplace_upd": [64, 65, 125, 445, 714, 715], "key_chains_contain": [64, 65], "sub_str": [64, 65], "join": [64, 65, 577, 582, 584, 610, 612, 704], "list_stack": [64, 65, 131], "dim": [64, 65, 123, 445, 490, 725, 736], "func": [64, 65, 122, 164, 165, 219, 263, 445, 454, 511, 515, 626, 639], "map_cont": [64, 65], "include_self": [64, 65], "possibi": [64, 65], "place": [64, 65, 109, 112, 113, 114, 115, 117, 118, 122, 124, 126, 133, 167, 168, 169, 170, 171, 172, 174, 175, 179, 180, 181, 184, 185, 219, 264, 269, 279, 282, 284, 297, 299, 312, 314, 315, 317, 321, 340, 414, 416, 427, 429, 430, 432, 436, 445, 469, 479, 480, 481, 527, 530, 539, 540, 543, 577, 588, 590, 591, 593, 603, 605, 644, 645, 647, 660, 661, 662, 665, 666, 668, 672, 676, 678, 697, 698, 700, 741, 742, 743, 744, 745, 746], "matrix_norm": [64, 65, 540], "ord": [64, 65, 540, 551, 565], "matrix": [64, 65, 167, 178, 182, 183, 445, 446, 448, 455, 527, 536, 540, 541, 543, 544, 545, 546, 547, 548, 550, 551, 552, 553, 554, 556, 557, 559, 560, 561, 563, 566, 725, 735], "p": [64, 65, 77, 78, 108, 109, 167, 178, 445, 455, 456, 527, 535, 540, 551, 565, 725, 733], "integ": [64, 65, 122, 123, 130, 167, 168, 174, 186, 205, 208, 210, 269, 270, 272, 297, 299, 300, 302, 303, 305, 306, 308, 309, 311, 312, 314, 315, 317, 326, 340, 342, 343, 345, 391, 393, 408, 410, 411, 413, 414, 416, 442, 444, 540, 552, 564, 565, 577, 606, 648, 650, 653, 672, 676, 678, 679, 681, 682, 684, 685, 687, 688, 690, 691, 694, 696, 697, 698, 700, 701, 703], "flatten": [64, 65, 445, 468, 540, 555, 565, 577, 597, 599, 603, 605, 655, 656, 657, 660, 661, 662, 664], "left": [64, 65, 108, 109, 115, 123, 269, 303, 305, 540, 545, 551, 560, 655, 656, 704], "broadcast": [64, 65, 113, 114, 115, 122, 123, 156, 159, 186, 193, 194, 219, 264, 269, 270, 272, 273, 275, 276, 278, 279, 281, 282, 284, 285, 287, 288, 291, 293, 297, 299, 300, 302, 303, 305, 306, 308, 309, 311, 312, 314, 315, 317, 318, 320, 321, 323, 324, 326, 327, 329, 334, 336, 337, 339, 340, 342, 343, 345, 348, 349, 351, 352, 354, 355, 357, 358, 360, 361, 363, 364, 366, 367, 369, 370, 372, 373, 375, 376, 378, 379, 381, 382, 384, 385, 387, 388, 390, 391, 393, 394, 395, 396, 398, 399, 401, 402, 404, 408, 410, 411, 413, 414, 416, 417, 419, 420, 423, 424, 426, 427, 429, 430, 432, 433, 435, 436, 445, 456, 467, 540, 548, 550, 551, 553, 556, 559, 564, 565, 567, 568, 570, 571, 573, 574, 576, 577, 578, 580, 588, 590, 591, 593, 594, 596, 597, 599, 603, 605, 607, 609, 610, 612, 613, 615, 648, 650, 655, 656, 657, 665, 669, 671, 672, 676, 678, 679, 681, 682, 684, 685, 687, 688, 690, 691, 694, 696, 697, 698, 700, 701, 703], "correctli": [64, 65, 108, 117, 122, 123, 126, 132, 145, 540, 551, 655, 656], "max_depth": [64, 65, 219, 223, 226, 233, 243, 247, 251, 445, 475, 626, 638], "multi_map": [64, 65, 122], "map_nest": [64, 65, 75, 76, 85, 86, 89, 90], "leftmost": [64, 65, 626, 639], "multi_map_in_static_method": [64, 65, 122], "fn_name": [64, 65], "num_arrai": [64, 65], "overwrite_at_key_chain": [64, 65], "overwrit": [64, 65, 125, 128, 219, 263], "target_dict": [64, 65], "return_dict": [64, 65], "prune_empti": [64, 65], "keep_non": [64, 65], "empti": [64, 65, 66, 67, 121, 123, 124, 167, 168, 672, 688, 690, 691, 697, 698, 700, 701, 703], "prune_key_chain": [64, 65], "key1": [64, 65, 132], "key2": [64, 65], "key3": [64, 65], "prune_key_from_key_chain": [64, 65], "absolut": [64, 65, 107, 269, 270, 272, 540, 558], "certain": [64, 65, 108, 145, 167, 168, 176, 177], "decid": [64, 65, 108, 626, 637], "remov": [64, 65, 109, 110, 111, 114, 117, 118, 123, 125, 133, 540, 544, 548, 550, 563, 577, 607, 609, 622, 623, 624], "prune_kei": [64, 65], "prune_keys_from_key_chain": [64, 65], "remove_key_length_limit": [64, 65], "remove_print_limit": [64, 65], "reshape_lik": [64, 65], "leading_shap": [64, 65], "return_cont": [64, 65], "restructur": [64, 65], "keep_orig": [64, 65], "transpos": [64, 65, 130, 133, 219, 250, 527, 529, 531, 533, 540, 554, 556, 704, 725, 727, 729, 731], "old": [64, 65, 108, 125], "keep": [64, 65, 108, 109, 116, 122, 129, 131, 133, 445, 509], "start": [64, 65, 107, 108, 109, 110, 111, 112, 114, 115, 123, 127, 128, 130, 131, 132, 144, 145, 167, 168, 176, 177, 219, 234], "restructure_key_chain": [64, 65], "keychain_map": [64, 65], "set_at_key_chain": [64, 65], "set_at_kei": [64, 65], "set_framework": [64, 65, 128, 130, 131, 133], "set_ivy_backend": [64, 65], "ivy_backend": [64, 65], "attribut": [64, 65, 114, 122, 123, 129, 130, 131, 132, 186, 202, 203, 204, 205, 219, 259], "show": [64, 65, 108, 109, 115, 125, 144, 145, 704], "show_sub_contain": [64, 65], "sub_cont_or_keychain": [64, 65], "shuffl": [64, 65, 648, 704], "seed_valu": [64, 65, 648, 653], "align": [64, 65, 108, 128, 130, 704, 710], "seed": [64, 65, 66, 67, 648, 704], "shuffle_h5_fil": [64, 65], "dataset": [64, 65, 131, 143, 704], "size_ordered_arrai": [64, 65], "keychain": [64, 65], "smallest": [64, 65, 186, 202, 205, 269, 315, 317], "largest": [64, 65, 144, 186, 202, 205, 540, 560], "slice_kei": [64, 65], "key_slic": [64, 65], "all_depth": [64, 65], "slice_via_kei": [64, 65], "sort_by_kei": [64, 65], "num_or_size_split": [64, 65, 128, 577, 606], "with_remaind": [64, 65, 577, 606], "constitu": [64, 65, 133], "dimension": [64, 65, 167, 168, 172, 178, 540, 542, 543, 548, 550, 553, 555, 556, 564, 565, 577, 606, 655, 656, 657, 658, 672, 676, 678, 679, 681, 682, 684, 685, 687, 688, 690, 691, 694, 696, 697, 698, 700, 701, 703], "evenli": [64, 65, 167, 168, 176, 177, 577, 606], "store": [64, 65, 114, 119, 121, 122, 128, 130, 131, 132, 445, 468, 511, 525, 540, 563, 577, 606, 737, 738], "stop_gradi": [64, 65, 66, 67, 79, 80, 132, 219, 263, 511, 514, 516, 518, 519, 520, 622, 623, 624, 625, 704, 741, 742, 743, 744, 745, 746], "preserve_typ": [64, 65, 511, 522], "stop": [64, 65, 128, 145, 167, 168, 176, 177, 219, 234, 263, 511, 514, 516, 518, 519, 520, 522, 622, 623, 624, 625, 741, 742, 743, 744, 745, 746], "alwai": [64, 65, 109, 110, 113, 114, 118, 119, 121, 122, 125, 126, 128, 130, 145, 186, 192, 269, 279, 396, 398, 445, 481, 511, 517, 522], "structural_diff": [64, 65], "to_devic": [64, 65, 219, 238], "move": [64, 65, 109, 113, 219, 264], "cuda": [64, 65, 128, 131, 145, 167, 176, 177, 219, 228, 235, 260, 445, 469, 470, 490, 493, 494, 648, 649, 650, 652, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 745, 747, 748], "cpu": [64, 65, 109, 124, 145, 167, 176, 177, 219, 238, 239, 241, 255, 258, 260, 264, 265, 267, 268, 445, 469, 470, 490, 493, 494, 648, 649, 650, 651, 652, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 745, 747, 748], "target": [64, 65, 112, 127, 131, 132, 133, 219, 237, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 704], "to_dict": [64, 65], "to_disk_as_hdf5": [64, 65, 131], "starting_index": [64, 65], "max_batch_s": [64, 65], "read": [64, 65, 111, 704], "r": [64, 65, 108, 445, 452, 509, 540, 557, 566], "w": [64, 65, 79, 80, 128, 131, 132, 445, 452, 511, 513, 514, 516, 518, 519, 520, 527, 528, 529, 530, 531, 532, 533, 534], "later": [64, 65, 445, 454], "append": [64, 65, 111, 117, 128, 131, 269, 303, 305, 540, 544, 548, 550], "to_disk_as_json": [64, 65, 131], "to_disk_as_pickl": [64, 65, 131], "to_flat_list": [64, 65], "to_iter": [64, 65, 122], "leaf_keys_onli": [64, 65], "to_iterator_kei": [64, 65], "to_iterator_valu": [64, 65], "to_json": [64, 65], "to_list": [64, 65, 445, 704], "to_multi_dev": [64, 65], "multidevcontain": [64, 65, 66], "distributedarrai": [64, 65], "to_numpi": [64, 65, 131, 445, 704], "update_backend": [64, 65], "to_raw": [64, 65], "raw": [64, 65, 114], "trim_kei": [64, 65], "max_length": [64, 65], "try_kc": [64, 65], "tri": [64, 65], "self": [64, 65, 121, 122, 128, 130, 131, 132, 133, 219, 270, 271, 274, 275, 276, 277, 280, 281, 282, 283, 285, 286, 289, 290, 291, 292, 294, 295, 297, 298, 300, 301, 303, 304, 306, 307, 309, 310, 312, 313, 315, 316, 319, 320, 322, 323, 325, 326, 328, 329, 330, 331, 332, 335, 336, 337, 338, 341, 342, 343, 344, 347, 348, 349, 350, 352, 353, 355, 356, 358, 359, 361, 362, 364, 365, 367, 368, 370, 371, 373, 374, 376, 377, 379, 380, 382, 383, 385, 386, 388, 389, 391, 392, 396, 397, 399, 400, 402, 403, 405, 406, 408, 409, 411, 412, 414, 415, 417, 418, 420, 421, 422, 424, 425, 427, 428, 430, 431, 433, 434, 437, 438, 440, 441, 442, 443, 446, 447, 548, 549, 568, 569, 571, 572, 574, 575, 578, 579, 582, 583, 585, 586, 588, 589, 591, 592, 594, 595, 597, 598, 600, 601, 603, 604, 607, 608, 610, 611, 613, 614, 616, 617, 619, 620, 645, 646, 666, 667, 669, 670, 673, 674, 676, 677, 679, 680, 682, 683, 685, 686, 688, 689, 692, 693, 694, 695, 698, 699, 701, 702, 704, 741, 745], "arbitrari": [64, 65, 117, 118, 122, 125, 126, 132, 145, 167, 178, 186, 193, 210, 219, 248, 249, 251], "concatten": [64, 65, 219, 248, 249, 250, 251, 263], "unstack": [64, 65, 128, 131, 445, 704], "dim_siz": [64, 65, 219], "update_config": [64, 65], "vector_norm": [64, 65, 540], "global_norm": [64, 65, 77, 78], "vector": [64, 65, 144, 167, 178, 445, 456, 527, 536, 540, 542, 545, 548, 550, 555, 560, 561, 564, 565, 566, 725, 735], "with_default_key_color": [64, 65], "with_entries_as_list": [64, 65], "with_ivy_backend": [64, 65], "with_key_length_limit": [64, 65, 131], "with_print_ind": [64, 65, 131], "with_print_limit": [64, 65, 131], "with_print_line_spac": [64, 65], "containerwithcr": [66, 67, 69], "containerwithdatatyp": [66, 67, 71], "containerwithdevic": [66, 67, 73], "containerwithelementwis": [66, 67, 75, 122], "containerwithgener": [66, 67, 77], "containerwithgradi": [66, 67, 79], "containerwithimag": [66, 67, 81], "containerwithlay": [66, 67, 83], "containerwithlinearalgebra": [66, 67, 85], "containerwithloss": [66, 67, 87], "containerwithmanipul": [66, 67, 89, 110], "containerwithnorm": [66, 67, 91], "containerwithrandom": [66, 67, 93], "containerwithsearch": [66, 67, 95], "containerwithset": [66, 67, 97], "containerwithsort": [66, 67, 99], "containerwithstatist": [66, 67, 101], "containerwithutil": [66, 67, 103], "__add__": [66, 67, 114, 115, 121, 122, 126, 130], "special": [66, 67, 110, 113, 114, 115, 121, 126, 269, 270, 272, 273, 275, 276, 278, 279, 281, 282, 284, 285, 287, 288, 291, 293, 312, 314, 315, 317, 318, 320, 321, 323, 334, 336, 337, 339, 340, 367, 369, 370, 372, 376, 378, 379, 381, 396, 398, 408, 410, 411, 413, 414, 416, 417, 419, 420, 423, 424, 426, 427, 429, 436, 442, 444, 672, 676, 678, 679, 681, 682, 684, 688, 690, 691, 694, 696], "11": [66, 67, 75, 76, 93, 94, 115, 122, 269, 279, 297, 299, 414, 416, 445, 459, 469, 540, 544, 555, 567, 574, 576, 577, 591, 593, 597, 599, 648, 650, 655, 659, 660, 661, 672, 673, 675, 693], "__radd__": [66, 67, 114, 115], "revers": [66, 67, 110, 114, 115, 133, 145, 445, 462, 577, 591, 593], "adam_step": [66, 67, 511], "arang": [66, 67, 123, 167, 176, 177, 672, 673, 675, 693, 704], "arg_info": [66, 67, 445], "arg_nam": [66, 67, 445], "argmax": [66, 67, 655, 704], "argmin": [66, 67, 655, 704], "array_equ": [66, 67, 445], "as_ivy_dev": [66, 67, 130, 219], "as_ivy_dtyp": [66, 67, 186], "as_native_dev": [66, 67, 219], "as_native_dtyp": [66, 67, 186], "asarrai": [66, 67, 125, 167, 527, 528, 660, 662], "assert_supports_inplac": [66, 67, 445], "astyp": [66, 67, 123, 125, 186], "broadcast_arrai": [66, 67, 186], "broadcast_to": [66, 67, 123, 186], "cache_fn": [66, 67, 118, 445], "can_cast": [66, 67, 118, 123, 186], "choleski": [66, 67, 540], "clear_mem_on_dev": [66, 67, 219], "clip_matrix_norm": [66, 67, 445], "closest_valid_dtyp": [66, 67, 186], "container_typ": [66, 67, 445], "conv1d": [66, 67, 527, 725], "conv1d_transpos": [66, 67, 527], "conv2d": [66, 67, 527, 704, 725], "conv2d_transpos": [66, 67, 527], "conv3d": [66, 67, 527, 725], "conv3d_transpos": [66, 67, 527], "copy_arrai": [66, 67, 445], "cross": [66, 67, 540, 567, 568, 570, 571, 573, 574, 576, 704], "cumprod": [66, 67, 133, 445], "cumsum": [66, 67, 445, 704], "current_backend_str": [66, 67, 445], "default_devic": [66, 67, 124, 128, 219, 257, 260, 267], "default_dtyp": [66, 67, 118, 123, 186], "default_float_dtyp": [66, 67, 123, 186], "default_int_dtyp": [66, 67, 123, 186], "depthwise_conv2d": [66, 67, 527, 704], "det": [66, 67, 540], "dev_clone_arrai": [66, 67, 219], "dev_clone_it": [66, 67, 219], "dev_clone_nest": [66, 67, 219], "dev_dist_arrai": [66, 67, 219], "dev_dist_it": [66, 67, 219], "dev_dist_nest": [66, 67, 219], "dev_unifi": [66, 67, 219], "dev_unify_arrai": [66, 67, 219], "dev_unify_it": [66, 67, 219], "dev_unify_nest": [66, 67, 219], "dev_util": [66, 67, 124, 219], "diagon": [66, 67, 167, 172, 182, 183, 540, 563], "dropout": [66, 67, 131, 527, 725, 736], "dtype_bit": [66, 67, 186], "eigh": [66, 67, 540], "eigvalsh": [66, 67, 540], "empty_lik": [66, 67, 167], "execute_with_gradi": [66, 67, 122, 131, 132, 133, 145, 511, 704], "ey": [66, 67, 133, 167, 527, 530, 534], "finfo": [66, 67, 186], "floormod": [66, 67, 445, 704], "fourier_encod": [66, 67, 445], "from_dlpack": [66, 67, 167], "full_lik": [66, 67, 167], "function_supported_dtyp": [66, 67, 186], "function_unsupported_dtyp": [66, 67, 186], "gelu": [66, 67, 156, 711], "get_all_arrays_in_memori": [66, 67, 445], "get_all_ivy_arrays_on_dev": [66, 67, 124, 219], "get_min_bas": [66, 67, 445], "get_min_denomin": [66, 67, 445], "get_num_dim": [66, 67, 445, 704], "get_referrers_recurs": [66, 67, 445], "gpu_is_avail": [66, 67, 219], "handle_nest": [66, 67, 118, 122, 146], "handle_out_argu": [66, 67, 120, 123, 124, 125, 126, 146], "iinfo": [66, 67, 186], "indices_wher": [66, 67, 445, 704], "infer_devic": [66, 67, 123, 124, 126, 146], "infer_dtyp": [66, 67, 123, 124, 126, 146], "inplace_arrays_support": [66, 67, 445], "inplace_decr": [66, 67, 445], "inplace_incr": [66, 67, 445], "inplace_variables_support": [66, 67, 445], "inputs_to_native_arrai": [66, 67, 121, 146], "inv": [66, 67, 130, 540, 704], "invalid_dtyp": [66, 67, 186], "is_float_dtyp": [66, 67, 186], "is_int_dtyp": [66, 67, 186, 445, 507], "is_ivy_contain": [66, 67, 445], "leaky_relu": [66, 67, 156, 704], "linear": [66, 67, 114, 128, 131, 132, 133, 156, 157, 158, 159, 445, 468, 527, 535, 559, 704, 725, 726, 727, 728, 729, 730, 731, 732], "linspac": [66, 67, 128, 167, 168, 704], "logspac": [66, 67, 128, 167], "lstm_updat": [66, 67, 128, 527], "match_kwarg": [66, 67, 445], "matrix_pow": [66, 67, 540], "matrix_rank": [66, 67, 540], "matrix_transpos": [66, 67, 130, 540], "meshgrid": [66, 67, 167], "multi_head_attent": [66, 67, 122, 125, 527], "multinomi": [66, 67, 648], "nonzero": [66, 67, 269, 279, 396, 398, 655], "num_arrays_in_memori": [66, 67, 445], "num_cpu_cor": [66, 67, 124, 219], "num_gpu": [66, 67, 117, 124, 219], "num_ivy_arrays_on_dev": [66, 67, 219], "one_hot": [66, 67, 133, 445, 704], "ones_lik": [66, 67, 133, 167, 704], "outer": [66, 67, 540, 622, 623, 624, 625], "outputs_to_ivy_arrai": [66, 67, 121, 123, 124, 126, 146], "percent_used_mem_on_dev": [66, 67, 219], "pinv": [66, 67, 540, 704], "print_all_arrays_in_memori": [66, 67, 445], "print_all_ivy_arrays_on_dev": [66, 67, 219], "promote_typ": [66, 67, 186], "qr": [66, 67, 540], "randint": [66, 67, 93, 94, 648, 704], "random_norm": [66, 67, 527, 530, 533, 534, 540, 560, 648, 660, 661], "result_typ": [66, 67, 123, 186], "scaled_dot_product_attent": [66, 67, 527], "scatter_flat": [66, 67, 445], "scatter_nd": [66, 67, 130, 445, 704], "set_default_devic": [66, 67, 124, 219, 267], "set_default_dtyp": [66, 67, 118, 123, 186], "set_default_float_dtyp": [66, 67, 123, 186], "set_default_int_dtyp": [66, 67, 123, 186], "set_min_bas": [66, 67, 445], "set_min_denomin": [66, 67, 445], "set_queue_timeout": [66, 67, 445], "set_split_factor": [66, 67, 219], "set_tmp_dir": [66, 67, 445], "set_with_grad": [66, 67, 511], "shape_to_tupl": [66, 67, 123, 445], "sigmoid": [66, 67, 128, 131, 132, 156, 704], "slogdet": [66, 67, 540], "softplu": [66, 67, 156, 704], "solv": [66, 67, 129, 144, 540], "split_factor": [66, 67, 219, 228], "split_func_cal": [66, 67, 219], "stable_divid": [66, 67, 118, 445], "stable_pow": [66, 67, 445], "static_ab": [66, 67], "static_aco": [66, 67], "static_acosh": [66, 67], "static_adam_step": [66, 67], "static_al": [66, 67], "static_ani": [66, 67], "static_arang": [66, 67], "static_arg_info": [66, 67], "static_arg_nam": [66, 67], "static_argmax": [66, 67], "static_argmin": [66, 67], "static_arrai": [66, 67], "static_array_equ": [66, 67], "static_arrays_equ": [66, 67], "static_as_ivy_dev": [66, 67], "static_as_ivy_dtyp": [66, 67], "static_as_native_dev": [66, 67], "static_as_native_dtyp": [66, 67], "static_asarrai": [66, 67], "static_asin": [66, 67], "static_asinh": [66, 67], "static_assert_supports_inplac": [66, 67], "static_astyp": [66, 67], "static_atan": [66, 67], "static_atan2": [66, 67], "static_atanh": [66, 67], "static_bitwise_and": [66, 67], "static_bitwise_invert": [66, 67], "static_bitwise_left_shift": [66, 67], "static_bitwise_or": [66, 67], "static_bitwise_right_shift": [66, 67], "static_bitwise_xor": [66, 67], "static_broadcast_arrai": [66, 67], "static_broadcast_to": [66, 67], "static_cache_fn": [66, 67], "static_can_cast": [66, 67], "static_ceil": [66, 67], "static_choleski": [66, 67], "static_clear_mem_on_dev": [66, 67], "static_clip_matrix_norm": [66, 67], "static_clip_vector_norm": [66, 67], "static_closest_valid_dtyp": [66, 67], "static_concat": [66, 67], "static_constant_pad": [66, 67], "static_container_typ": [66, 67], "static_conv1d": [66, 67], "static_conv1d_transpos": [66, 67], "static_conv2d": [66, 67], "static_conv2d_transpos": [66, 67], "static_conv3d": [66, 67], "static_conv3d_transpos": [66, 67], "static_copy_arrai": [66, 67], "static_co": [66, 67], "static_cosh": [66, 67], "static_cross": [66, 67], "static_cumprod": [66, 67], "static_cumsum": [66, 67], "static_current_backend": [66, 67], "static_current_backend_str": [66, 67], "static_default": [66, 67], "static_default_devic": [66, 67], "static_default_dtyp": [66, 67], "static_default_float_dtyp": [66, 67], "static_default_int_dtyp": [66, 67], "static_depthwise_conv2d": [66, 67], "static_det": [66, 67], "static_dev": [66, 67], "static_dev_clon": [66, 67], "static_dev_clone_arrai": [66, 67], "static_dev_clone_it": [66, 67], "static_dev_clone_nest": [66, 67], "static_dev_dist": [66, 67], "static_dev_dist_arrai": [66, 67], "static_dev_dist_it": [66, 67], "static_dev_dist_nest": [66, 67], "static_dev_unifi": [66, 67], "static_dev_unify_arrai": [66, 67], "static_dev_unify_it": [66, 67], "static_dev_unify_nest": [66, 67], "static_dev_util": [66, 67], "static_diagon": [66, 67], "static_dropout": [66, 67], "static_dtyp": [66, 67], "static_dtype_bit": [66, 67], "static_eigh": [66, 67], "static_eigvalsh": [66, 67], "static_einops_rearrang": [66, 67], "static_einops_reduc": [66, 67], "static_einops_repeat": [66, 67], "static_einsum": [66, 67], "static_empti": [66, 67], "static_empty_lik": [66, 67], "static_equ": [66, 67], "static_erf": [66, 67], "static_execute_with_gradi": [66, 67], "static_exist": [66, 67], "static_exp": [66, 67], "static_expand_dim": [66, 67], "static_expm1": [66, 67], "static_ey": [66, 67], "static_finfo": [66, 67], "static_flip": [66, 67], "static_floor": [66, 67], "static_floor_divid": [66, 67], "static_floormod": [66, 67], "static_fourier_encod": [66, 67], "static_from_dlpack": [66, 67], "static_ful": [66, 67], "static_full_lik": [66, 67], "static_function_supported_dtyp": [66, 67], "static_function_unsupported_dtyp": [66, 67], "static_gath": [66, 67], "static_gather_nd": [66, 67], "static_gelu": [66, 67], "static_get_all_arrays_in_memori": [66, 67], "static_get_all_ivy_arrays_on_dev": [66, 67], "static_get_min_bas": [66, 67], "static_get_min_denomin": [66, 67], "static_get_num_dim": [66, 67], "static_get_referrers_recurs": [66, 67], "static_gpu_is_avail": [66, 67], "static_great": [66, 67], "static_greater_equ": [66, 67], "static_handle_nest": [66, 67], "static_handle_out_argu": [66, 67], "static_has_nan": [66, 67], "static_iinfo": [66, 67], "static_indices_wher": [66, 67], "static_infer_devic": [66, 67], "static_infer_dtyp": [66, 67], "static_inplace_arrays_support": [66, 67], "static_inplace_decr": [66, 67], "static_inplace_incr": [66, 67], "static_inplace_upd": [66, 67], "static_inplace_variables_support": [66, 67], "static_inputs_to_native_arrai": [66, 67], "static_inv": [66, 67], "static_invalid_dtyp": [66, 67], "static_is_arrai": [66, 67], "static_is_float_dtyp": [66, 67], "static_is_int_dtyp": [66, 67], "static_is_ivy_arrai": [66, 67], "static_is_ivy_contain": [66, 67], "static_is_native_arrai": [66, 67], "static_is_vari": [66, 67], "static_isfinit": [66, 67], "static_isinf": [66, 67], "static_isnan": [66, 67], "static_layer_norm": [66, 67], "static_leaky_relu": [66, 67], "static_less": [66, 67], "static_less_equ": [66, 67], "static_linear": [66, 67], "static_linspac": [66, 67], "static_log": [66, 67], "static_log10": [66, 67], "static_log1p": [66, 67], "static_log2": [66, 67], "static_logaddexp": [66, 67], "static_logical_and": [66, 67], "static_logical_not": [66, 67], "static_logical_or": [66, 67], "static_logical_xor": [66, 67], "static_logspac": [66, 67], "static_lstm_upd": [66, 67], "static_match_kwarg": [66, 67], "static_matmul": [66, 67], "static_matrix_norm": [66, 67], "static_matrix_pow": [66, 67], "static_matrix_rank": [66, 67], "static_matrix_transpos": [66, 67], "static_max": [66, 67], "static_maximum": [66, 67], "static_mean": [66, 67], "static_meshgrid": [66, 67], "static_min": [66, 67], "static_minimum": [66, 67], "static_multi_head_attent": [66, 67], "static_multinomi": [66, 67], "static_multiprocess": [66, 67], "static_native_arrai": [66, 67], "static_neg": [66, 67], "static_nonzero": [66, 67], "static_not_equ": [66, 67], "static_num_arrays_in_memori": [66, 67], "static_num_cpu_cor": [66, 67], "static_num_gpu": [66, 67], "static_num_ivy_arrays_on_dev": [66, 67], "static_one_hot": [66, 67], "static_on": [66, 67], "static_ones_lik": [66, 67], "static_out": [66, 67], "static_outputs_to_ivy_arrai": [66, 67], "static_percent_used_mem_on_dev": [66, 67], "static_permute_dim": [66, 67], "static_pinv": [66, 67], "static_posit": [66, 67], "static_pow": [66, 67], "static_print_all_arrays_in_memori": [66, 67], "static_print_all_ivy_arrays_on_dev": [66, 67], "static_prod": [66, 67], "static_promote_typ": [66, 67], "static_qr": [66, 67], "static_queue_timeout": [66, 67], "static_random_norm": [66, 67], "static_relu": [66, 67], "static_remaind": [66, 67], "static_repeat": [66, 67], "static_reshap": [66, 67], "static_result_typ": [66, 67], "static_round": [66, 67], "static_scaled_dot_product_attent": [66, 67], "static_scatter_flat": [66, 67], "static_scatter_nd": [66, 67], "static_se": [66, 67], "static_set_default_devic": [66, 67], "static_set_default_dtyp": [66, 67], "static_set_default_float_dtyp": [66, 67], "static_set_default_int_dtyp": [66, 67], "static_set_min_bas": [66, 67], "static_set_min_denomin": [66, 67], "static_set_queue_timeout": [66, 67], "static_set_split_factor": [66, 67], "static_set_tmp_dir": [66, 67], "static_set_with_grad": [66, 67], "static_shap": [66, 67], "static_shape_to_tupl": [66, 67], "static_shuffl": [66, 67], "static_sigmoid": [66, 67], "static_sign": [66, 67], "static_sin": [66, 67], "static_sinh": [66, 67], "static_slogdet": [66, 67], "static_softmax": [66, 67], "static_softplu": [66, 67], "static_solv": [66, 67], "static_split": [66, 67], "static_split_factor": [66, 67], "static_split_func_cal": [66, 67], "static_sqrt": [66, 67], "static_squar": [66, 67], "static_squeez": [66, 67], "static_stable_divid": [66, 67], "static_stable_pow": [66, 67], "static_stack": [66, 67], "static_std": [66, 67], "static_stop_gradi": [66, 67], "static_sum": [66, 67], "static_supports_inplac": [66, 67], "static_svd": [66, 67], "static_svdv": [66, 67], "static_swapax": [66, 67], "static_tanh": [66, 67], "static_tensordot": [66, 67], "static_til": [66, 67], "static_tmp_dir": [66, 67], "static_to_devic": [66, 67], "static_to_list": [66, 67], "static_to_native_arrays_and_back": [66, 67], "static_to_numpi": [66, 67], "static_to_scalar": [66, 67], "static_total_mem_on_dev": [66, 67], "static_tpu_is_avail": [66, 67], "static_trac": [66, 67], "static_tril": [66, 67], "static_triu": [66, 67], "static_trunc": [66, 67], "static_try_else_non": [66, 67], "static_type_promote_arrai": [66, 67], "static_unique_al": [66, 67], "static_unique_count": [66, 67], "static_unique_invers": [66, 67], "static_unique_valu": [66, 67], "static_unset_default_devic": [66, 67], "static_unset_default_dtyp": [66, 67], "static_unset_default_float_dtyp": [66, 67], "static_unset_default_int_dtyp": [66, 67], "static_unset_with_grad": [66, 67], "static_unstack": [66, 67], "static_used_mem_on_dev": [66, 67], "static_valid_dtyp": [66, 67], "static_value_is_nan": [66, 67], "static_var": [66, 67], "static_vari": [66, 67], "static_variable_data": [66, 67], "static_vecdot": [66, 67], "static_vector_norm": [66, 67], "static_vector_to_skew_symmetric_matrix": [66, 67], "static_wher": [66, 67], "static_with_grad": [66, 67], "static_zero_pad": [66, 67], "static_zero": [66, 67], "static_zeros_lik": [66, 67], "supports_inplac": [66, 67, 445], "svd": [66, 67, 540, 704], "svdval": [66, 67, 540], "tensordot": [66, 67, 540], "tmp_dir": [66, 67, 445], "to_native_arrays_and_back": [66, 67, 120, 126, 146], "to_scalar": [66, 67, 445], "total_mem_on_dev": [66, 67, 124, 219], "tpu_is_avail": [66, 67, 219], "tril": [66, 67, 167], "triu": [66, 67, 167], "try_else_non": [66, 67, 445], "type_promote_arrai": [66, 67, 186], "unique_al": [66, 67, 660], "unique_count": [66, 67, 660], "unique_invers": [66, 67, 660], "unique_valu": [66, 67, 660], "unset_default_devic": [66, 67, 219], "unset_default_dtyp": [66, 67, 186], "unset_default_float_dtyp": [66, 67, 186], "unset_default_int_dtyp": [66, 67, 186], "unset_with_grad": [66, 67, 511], "used_mem_on_dev": [66, 67, 219], "valid_dtyp": [66, 67, 186], "value_is_nan": [66, 67, 445], "variable_data": [66, 67, 511], "vecdot": [66, 67, 540], "vector_to_skew_symmetric_matrix": [66, 67, 540, 704], "with_grad": [66, 67, 511, 521], "zeros_lik": [66, 67, 167, 577, 578, 580, 704], "at_dev": [66, 68, 219, 232, 233], "static_add": [75, 76, 114, 115, 122], "static_divid": [75, 76, 122], "static_multipli": [75, 76, 122], "static_subtract": [75, 76, 122], "static_tan": [75, 76, 115, 122], "143": [75, 76, 115, 269, 436], "16": [75, 76, 93, 94, 109, 115, 131, 269, 436, 527, 533, 540, 544, 555, 655, 659, 672, 673, 675, 693], "38": [75, 76, 115, 269, 436], "static_all_equ": [77, 78], "clip_vector_norm": [77, 78, 445], "max_norm": [77, 78, 445, 455, 456], "adam_upd": [79, 80, 132, 511], "dcdw": [79, 80, 511, 513, 514, 516, 518, 519], "lr": [79, 80, 131, 132, 511, 514, 516, 518, 519, 520, 741, 742, 743, 744, 745, 746], "mw_tm1": [79, 80, 511, 514, 518], "vw_tm1": [79, 80, 511, 514, 518], "beta1": [79, 80, 132, 511, 513, 514, 518, 741, 742, 743], "beta2": [79, 80, 132, 511, 513, 514, 518, 741, 742, 743], "999": [79, 80, 132, 511, 513, 514, 518, 741, 742, 743], "gradient_descent_upd": [79, 80, 511, 622, 623, 624, 625, 704], "lamb_upd": [79, 80, 511], "max_trust_ratio": [79, 80, 511, 518, 741, 743], "decay_lambda": [79, 80, 511, 518, 519, 741, 743, 744], "lars_upd": [79, 80, 511], "optimizer_upd": [79, 80, 511], "effective_grad": [79, 80, 511, 520], "static_adam_upd": [79, 80], "static_gradient_descent_upd": [79, 80], "static_lamb_upd": [79, 80], "static_lars_upd": [79, 80], "static_optimizer_upd": [79, 80], "static_binary_cross_entropi": [87, 88], "static_cross_entropi": [87, 88], "static_sparse_cross_entropi": [87, 88], "static_clip": [89, 90, 578], "static_rol": [89, 90, 115, 122, 578, 581], "random_uniform": [93, 94, 124, 132, 648, 704], "static_randint": [93, 94], "20": [93, 94, 130, 269, 312, 314, 334, 414, 416, 427, 429, 540, 544, 555, 562, 648, 650, 655, 658, 659, 672, 673, 675, 693], "15": [93, 94, 108, 115, 269, 297, 299, 414, 416, 527, 530, 540, 544, 555, 562, 577, 603, 605, 644, 645, 647, 648, 650, 655, 658, 660, 661, 672, 673, 675, 693], "12": [93, 94, 108, 115, 122, 269, 297, 299, 312, 314, 321, 414, 416, 445, 459, 473, 540, 544, 555, 562, 577, 591, 593, 597, 599, 603, 605, 644, 645, 647, 648, 650, 655, 659, 660, 661, 672, 673, 675, 693], "40": [93, 94, 269, 321, 427, 429, 540, 555, 672, 673, 675, 693], "gpu": [93, 94, 109, 124, 130, 145, 219, 238, 241, 254, 256, 260, 262, 267], "87": [93, 94], "62": [93, 94], "52": [93, 94, 540, 555, 660, 661, 672, 673, 675, 693], "95": [93, 94], "37": [93, 94, 269, 436, 644, 645, 647], "42": [93, 94, 133, 156, 162, 540, 555, 648, 653, 672, 673, 675, 693], "14": [93, 94, 111, 115, 122, 269, 312, 314, 527, 539, 540, 544, 555, 660, 661, 672, 673, 675, 693], "13": [93, 94, 115, 122, 269, 297, 299, 312, 314, 321, 427, 429, 445, 459, 527, 539, 540, 544, 555, 644, 645, 647, 655, 659, 660, 661, 672, 673, 675, 693], "static_random_uniform": [93, 94], "static_argsort": [99, 100], "static_sort": [99, 100], "add_ivy_container_instance_method": 105, "containerexampl": [105, 106], "strongli": [107, 108, 704, 710], "welcom": [107, 108, 109, 704, 710], "skill": 107, "vetern": 107, "beginn": 107, "aspect": [107, 131, 704], "guid": [107, 108, 109, 117, 704], "through": [107, 109, 110, 112, 115, 118, 119, 122, 127, 128, 130, 131, 132, 133, 144, 269, 291, 293], "journei": [107, 704, 710], "inclusvi": 107, "big": [107, 145], "team": [107, 108, 109], "board": 107, "contributor": [107, 108, 109, 127, 704], "section": [107, 109, 110, 112, 113, 114, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 131, 132, 660, 661, 662, 664], "below": [107, 108, 110, 111, 112, 113, 115, 118, 122, 123, 124, 125, 128, 129, 130, 131, 132, 133, 144, 167, 178, 182, 183, 269, 297, 299, 312, 314, 321, 414, 416, 540, 543, 544, 563, 577, 588, 590, 591, 593, 660, 661, 662, 665, 666, 668, 704], "best": [107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 445, 487], "go": [107, 108, 109, 110, 112, 113, 115, 122, 127, 131, 145, 626, 637], "finish": [107, 108, 112, 704], "dive": [107, 109, 110, 127, 130, 131, 145, 704], "environ": [107, 109, 111, 144], "basic": [107, 110, 111], "fork": [107, 108, 445, 488], "doc": [107, 110, 114, 126, 128, 131, 132, 704], "document": [107, 109, 129, 131, 133], "local": [107, 108, 111, 118], "task": [107, 109, 144, 622, 623, 624, 625, 704], "help": [107, 108, 115, 119, 121, 122, 130, 131, 132, 143, 445, 449, 672, 691, 704], "video": [107, 109, 114, 115, 126], "realli": [108, 122, 145], "contribut": [108, 109, 110, 128, 710], "toward": [108, 128, 577, 603, 605, 704, 710], "page": [108, 109, 129, 133, 143, 704, 710], "explain": [108, 109, 110, 113, 114, 115, 117, 118, 119, 121, 122, 123, 124, 125, 126, 128, 129, 130, 131, 132, 133, 704, 710], "main": [108, 111, 120, 122, 167, 172, 182, 183, 540, 544, 563], "prefer": [108, 122], "git": [108, 109], "submodul": [108, 109, 110, 111, 116, 117, 118, 124, 127, 128, 132, 704, 739, 740, 747, 748], "com": 108, "unifyai": [108, 111], "http": [108, 114, 269, 282, 284, 312, 314, 315, 317, 321, 340, 427, 429, 430, 432, 511, 513, 514, 577, 588, 590, 603, 605, 660, 661, 662, 665, 666, 668, 672, 676, 678], "gh": 108, "your_fold": 108, "id": [108, 121, 122, 219, 238, 737, 738], "cours": [108, 109, 115, 131, 145], "whatev": [108, 145], "integr": [108, 117, 186, 192], "familiar": [108, 110], "sure": [108, 110, 116], "elig": 108, "free": [108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 144, 704], "student": 108, "licenc": 108, "peopl": [108, 109, 112], "seem": [108, 132, 145], "miss": [108, 115, 117, 121, 122, 741, 745], "explicit": [108, 111, 122, 123, 125, 128, 145], "remind": 108, "channel": [108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 445, 468, 725, 726, 727, 728, 729, 730, 731, 732, 734, 735], "pace": 108, "suggest": [108, 109, 113], "latest": [108, 110, 111, 114, 145, 269, 282, 284, 312, 314, 315, 317, 321, 340, 427, 429, 430, 432, 577, 588, 590, 603, 605, 660, 661, 662, 665, 666, 668, 672, 676, 678, 725, 734], "packag": [108, 111, 145], "ensur": [108, 109, 117, 121, 123, 126, 445, 481], "pypi": [108, 110, 145], "person": [108, 109], "experi": [108, 129, 131, 145], "avoid": [108, 109, 117, 119, 120, 122, 130, 219, 269, 337, 339], "pip": [108, 144, 704], "instal": [108, 111, 144, 704], "abil": [108, 129, 145], "perhap": [108, 130, 131, 132, 145], "track": [108, 109, 219, 626, 638, 737, 738], "run": [108, 111, 116, 117, 119, 126, 128, 129, 130, 131, 132, 133, 144, 145, 219, 228, 511, 513, 514, 518, 622, 623, 624, 625, 725, 736, 737, 738], "command": [108, 111, 704], "ivy_dev": [108, 109, 111], "name": [108, 109, 111, 114, 117, 128, 130, 131, 133, 164, 165, 445, 449, 540, 545, 557, 560, 660, 661, 662], "setup": 108, "click": [108, 109, 114, 704], "icon": [108, 109], "side": [108, 109], "choos": [108, 109, 133, 219, 264, 269, 385, 387, 388, 390, 655, 659, 660, 661, 662, 664, 672, 676, 678, 679, 681, 682, 684], "panel": 108, "select": [108, 109, 117, 128, 130, 133, 145], "drop": [108, 145], "down": [108, 130], "path": [108, 111], "manual": [108, 109, 117, 132, 626, 627, 636, 637], "builtin": [108, 111, 130, 132], "requir": [108, 111, 113, 114, 115, 117, 120, 121, 123, 124, 126, 130, 145, 164, 165, 269, 427, 429, 540, 545, 577, 610, 612, 714, 715], "cmd": [108, 111], "directori": [108, 109, 111, 445, 498], "folder": [108, 109, 111, 113, 116, 117, 118], "abov": [108, 109, 111, 114, 115, 118, 119, 121, 122, 125, 126, 130, 131, 132, 133, 167, 178, 182, 183, 269, 279, 282, 284, 297, 299, 312, 314, 315, 317, 321, 340, 396, 398, 414, 416, 427, 429, 430, 432, 436, 445, 469, 527, 530, 539, 540, 543, 544, 545, 563, 577, 588, 590, 591, 593, 603, 605, 644, 645, 647, 648, 650, 660, 661, 662, 665, 666, 668, 672, 676, 678, 685, 687, 688, 690, 691, 697, 698, 700], "m": [108, 109, 111, 112, 128, 167, 178, 182, 183, 445, 452, 540, 541, 543, 544, 545, 546, 547, 548, 550, 553, 554, 555, 556, 557, 559, 560, 561, 563, 648, 651, 652], "python3": [108, 111], "script": [108, 109, 111, 115, 128, 145], "bat": [108, 109, 111], "OR": [108, 109, 111, 269, 306, 308, 388, 390, 697, 701, 703], "bin": [108, 109, 111], "mac": [108, 109, 111], "linux": [108, 109, 111], "virtualenv": 108, "os": 108, "note": [108, 109, 113, 114, 115, 122, 269, 411, 413, 540, 545, 560, 577, 610, 612, 660, 662, 672, 679, 681], "tick": [108, 109], "To": [108, 115, 118, 122, 131, 132, 133, 704], "ivy_test": [108, 109], "test_array_api": [108, 109, 116, 117], "cd": [108, 109, 111], "txt": 108, "visual": [108, 145], "jetbrain": 108, "remot": 108, "mitig": 108, "potenti": [108, 127, 269, 337, 339], "conflict": [108, 109, 131], "yet": [108, 110, 122], "particular": [108, 109, 113, 125, 269, 270, 272], "system": [108, 145, 540, 559], "instruct": [108, 110], "desktop": 108, "wsl": 108, "powershel": 108, "admin": 108, "visit": 108, "link": 108, "profession": 108, "execut": [108, 111, 122, 125, 128, 130, 133, 145, 445, 508], "deploy": 108, "top": [108, 109, 117, 131, 132, 704], "press": [108, 131, 704], "ok": 108, "caus": [108, 109, 115, 117, 122, 125, 145], "earlier": [108, 109], "might": [108, 109, 113, 117, 120, 128, 130, 131, 445, 462], "necessari": [108, 115, 119, 122, 125], "virtualis": 108, "detail": [108, 109, 110, 113, 116, 117, 118, 119, 120, 122, 126, 131, 132, 167, 173, 660, 661, 662, 664], "sudo": 108, "apt": 108, "ca": 108, "certif": 108, "curl": 108, "gnupg": 108, "lsb": 108, "mkdir": 108, "keyr": 108, "fssl": 108, "download": [108, 117], "gpg": 108, "dearmor": 108, "o": [108, 128, 445, 452], "echo": 108, "deb": 108, "arch": 108, "dpkg": 108, "architectur": [108, 133, 145], "lsb_releas": 108, "cs": 108, "tee": 108, "null": 108, "ce": 108, "cli": 108, "containerd": 108, "io": 108, "compos": [108, 122, 145], "plugin": 108, "systemctl": 108, "permiss": 108, "relat": [108, 109, 144, 219], "post": [108, 133, 644, 645, 647, 704, 710], "It": [108, 109, 111, 112, 113, 114, 115, 119, 121, 122, 125, 128, 130, 131, 132, 156, 159, 219, 264, 269, 270, 272, 273, 275, 276, 278, 279, 281, 282, 284, 285, 287, 288, 291, 293, 297, 299, 300, 302, 303, 305, 306, 308, 309, 311, 312, 314, 315, 317, 318, 320, 321, 323, 334, 336, 337, 339, 340, 352, 354, 355, 357, 358, 360, 361, 363, 367, 369, 370, 372, 373, 375, 376, 378, 379, 381, 382, 384, 385, 387, 388, 390, 391, 393, 396, 398, 399, 401, 402, 404, 408, 410, 411, 413, 414, 416, 417, 419, 420, 423, 424, 426, 427, 429, 430, 432, 433, 435, 436, 445, 456, 467, 567, 568, 570, 571, 573, 574, 576, 577, 578, 580, 588, 590, 591, 593, 594, 596, 597, 599, 603, 605, 607, 609, 610, 612, 613, 615, 648, 650, 655, 656, 665, 666, 668, 669, 671, 697, 698, 700, 701, 703], "headach": 108, "arm": 108, "m1": 108, "instead": [108, 109, 110, 114, 115, 117, 118, 122, 125, 126, 128, 130, 131, 145], "featur": [108, 113, 126, 131, 704], "vm": 108, "azur": 108, "cloud": [108, 144], "defin": [108, 110, 113, 114, 123, 126, 130, 132, 145, 269, 396, 398, 411, 413, 445, 490, 540, 542, 545, 559, 648, 650, 672, 676, 678, 679, 681, 682, 684], "dockerfil": [108, 111], "longer": [108, 123, 125], "worri": 108, "platform": 108, "agnost": [108, 121, 126, 128, 130, 133, 145, 704], "usual": 108, "studio": 108, "favourit": 108, "extens": [108, 109, 114, 167, 178, 269, 279, 282, 284, 297, 299, 312, 314, 315, 317, 321, 340, 414, 416, 427, 429, 430, 432, 436, 540, 543, 577, 588, 590, 591, 593, 603, 605, 660, 661, 662, 665, 666, 668, 672, 676, 678, 697, 698, 700], "theme": 108, "too": [108, 109, 145, 269, 279, 396, 398], "done": [108, 109, 115, 117, 131], "unsupport": [108, 123, 186, 203, 204], "slow": 108, "ipad": 108, "long": [108, 109, 115, 527, 537], "browser": 108, "cool": [108, 113], "requisit": 108, "head": [108, 122, 527, 538, 704, 725, 736], "pane": [108, 109], "readi": [108, 110], "begin": [108, 626, 627, 637], "outlin": [108, 109, 110, 112, 114, 117, 118, 122, 125, 130], "dropdown": 108, "tab": [108, 131, 704], "master": [108, 109, 122], "vs": 108, "view": [108, 109, 167, 173, 527, 530, 534], "built": [108, 129, 167, 168, 219, 725, 736, 737, 738], "bottom": 108, "box": 108, "patient": 108, "upto": 108, "minut": 108, "launch": 108, "That": [108, 109, 130, 131, 132, 269, 411, 413], "refer": [108, 109, 117, 118, 123, 126, 145, 167, 172, 269, 337, 339, 373, 375, 511, 513, 514, 540, 564, 566, 672, 688, 690, 694, 696, 697, 698, 700, 701, 703, 725, 735], "approach": [108, 109, 117, 118, 122, 130, 131, 145], "colour": 108, "applic": [108, 123, 124, 132, 527, 538, 539, 626, 632, 638], "good": [108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 128, 132], "chanc": 108, "vscode": 108, "explor": [108, 129, 133, 144], "troubleshoot": 108, "sometim": [108, 109], "ever": [108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126], "64": [108, 131, 132, 269, 427, 429, 430, 432, 527, 533, 534, 540, 555, 672, 673, 675, 693, 704, 725, 736], "bit": [108, 115, 118, 122, 130, 186, 201, 202, 205, 269, 300, 302, 303, 305, 309, 311, 672, 685, 687, 691], "usr": 108, "more": [108, 109, 110, 112, 113, 115, 117, 118, 119, 120, 121, 122, 125, 126, 127, 128, 129, 130, 131, 132, 133, 144, 145, 167, 168, 186, 193, 269, 337, 339, 540, 548, 550, 577, 591, 593, 660, 661, 662, 664, 704], "nutshel": [108, 126], "hook": 108, "lint": 108, "fix": [108, 109], "fail": [108, 110, 116, 117, 128, 130], "attempt": [108, 145], "succe": 108, "problemat": 108, "proce": [108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126], "modifi": [108, 109, 114, 118, 123, 124, 128], "properli": [108, 112], "enter": [108, 109, 121, 123, 124, 126, 219], "unsur": [108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126], "feel": [108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 704], "server": [109, 704], "context": [109, 115, 122, 123, 124, 219, 445, 488, 527, 538, 725, 736], "suitabl": [109, 113, 122], "quick": [109, 112, 132], "tendenc": 109, "land": 109, "end": [109, 122, 125, 127, 144, 145, 167, 168, 269, 291, 293, 704, 710], "world": 109, "come": [109, 110, 132, 143, 704, 710], "fly": 109, "hard": [109, 130], "receiv": [109, 117, 123, 124, 219, 228, 229, 445, 450, 487, 725, 735], "respons": [109, 111], "internship": 109, "comment": 109, "trigger": 109, "unansw": 109, "label": [109, 128, 129, 133, 567, 568, 570, 571, 573, 574, 576], "respond": 109, "someon": [109, 145], "els": [109, 110, 113, 118, 119, 125, 128, 130, 132, 133, 145, 445, 453, 462, 466, 626, 636], "strive": [109, 145], "repli": 109, "newli": [109, 125, 164, 165, 186, 192, 445, 454], "bug": [109, 117], "serv": [109, 117, 118, 121, 122, 126, 127, 704], "suspect": 109, "behaviour": [109, 114, 117, 121, 122, 125, 126, 130], "observ": 109, "confid": 109, "wrong": 109, "someth": [109, 113, 131, 132, 145], "bet": 109, "act": [109, 115, 145], "placehold": [109, 121, 126, 626, 638], "mark": [109, 117], "ii": [109, 672, 673, 675, 693], "iii": 109, "titl": [109, 704], "issue_numb": 109, "delet": [109, 111], "No": [109, 128], "progress": [109, 122, 129, 133], "pr": 109, "soon": [109, 122, 143, 145, 704, 710], "solut": [109, 117, 122, 540, 559], "review": [109, 113], "merg": 109, "everi": [109, 110, 111, 115, 116, 117, 118, 119, 120, 122, 125, 126, 128, 130, 132, 167, 174, 175, 445, 446, 448], "dai": 109, "close": [109, 114, 269, 337, 339, 414, 416, 540, 560], "likewis": [109, 114, 118, 122, 123, 126, 131], "freed": 109, "purpos": [109, 111, 115, 117, 118, 120, 121, 122, 126, 127, 130, 269, 337, 339, 704], "remain": [109, 115, 145, 269, 279, 396, 398, 411, 413, 577, 600, 602, 626, 632], "short": [109, 132, 527, 537], "basi": [109, 116, 131], "situat": [109, 133], "alloc": [109, 145, 167, 182, 183, 186, 192, 219], "upon": [109, 115, 117, 125, 145], "period": 109, "prevent": [109, 125, 130, 511, 513, 514, 518, 672, 691, 741, 742, 743], "unabl": 109, "obvious": 109, "never": [109, 122], "reflect": [109, 121], "qualiti": 109, "hypothet": 109, "frustrat": 109, "delai": 109, "busi": 109, "fine": [109, 130, 133], "becaus": [109, 114, 117, 118, 119, 121, 123, 124, 125, 126, 128, 132, 133, 145], "inact": 109, "me": 109, "unfairli": 109, "definit": [109, 118, 123, 130, 540, 541, 542], "investig": 109, "Then": [109, 111, 130, 145], "practic": [109, 117], "separ": [109, 117, 121, 128, 130, 131], "branch": [109, 122, 145, 164, 165, 269, 291, 293], "role": [109, 129], "date": 109, "upstream": [109, 116], "complic": [109, 128], "root": [109, 111, 131, 269, 427, 429, 648, 649, 651, 652], "merge_with_upstream": 109, "sh": 109, "name_of_your_branch": 109, "resolv": [109, 672, 685, 687, 691], "push": [109, 116], "both": [109, 114, 115, 118, 122, 124, 125, 126, 128, 130, 131, 132, 133, 144, 145, 186, 209, 269, 279, 282, 284, 315, 317, 340, 408, 410, 427, 429, 430, 432, 436, 445, 469, 527, 530, 539, 540, 542, 548, 550, 564, 577, 603, 605, 644, 645, 647, 672, 676, 678, 697, 698, 700], "abort": 109, "tediou": 109, "resolut": 109, "stash": 109, "reinstat": 109, "fetch": 109, "uncommit": 109, "unstag": 109, "untrack": 109, "comprehens": 109, "explan": [109, 114, 122, 126, 130], "atlassian": 109, "tutori": 109, "quit": [109, 110, 114, 118, 120, 121], "logic": [109, 120, 121, 123, 124, 130, 219, 255, 269, 382, 384, 385, 387, 388, 390, 697, 698, 700, 701, 703, 704], "blame": 109, "revis": 109, "author": [109, 704], "eg": 109, "past": 109, "l": [109, 112, 540, 541, 545, 548, 550, 563], "grep": 109, "v": [109, 128, 131, 132, 133, 527, 539, 704, 725, 726, 727, 728, 729, 730, 731, 732, 734, 735, 736, 737, 738, 739, 740, 741, 745, 747, 748], "commit_id": 109, "handi": 109, "histori": 109, "toggl": 109, "vertic": 109, "highlight": [109, 115], "previou": [109, 117, 126, 133, 145, 511, 514, 518], "inform": [109, 186, 202, 205, 445, 449, 511, 522], "whenev": [109, 130, 131], "tag": 109, "think": [109, 115], "interact": [109, 704], "gain": [109, 127, 132, 716], "yourself": [109, 110, 144], "simpler": [109, 130], "cannot": [109, 119, 123, 133], "least": [109, 115, 118, 121, 540, 548, 550], "final": [109, 114, 115, 118, 121, 123, 125, 128, 130, 131, 167, 176, 177, 445, 468, 725, 736], "tickbox": 109, "corner": 109, "span": 109, "intent": [109, 125], "larg": [109, 131, 269, 279, 396, 398], "discourag": 109, "philosophi": 109, "increment": [109, 445, 480], "frequent": [109, 110], "valuabl": 109, "infrequ": 109, "earli": [109, 704], "wast": 109, "spot": [109, 118], "mistak": 109, "propos": 109, "mountain": 109, "advoc": [109, 145], "individu": [109, 110, 118], "per": [109, 131, 219, 527, 528, 529, 530, 531, 532, 533, 534, 725, 726, 727, 728, 729, 730, 731, 732], "style": [109, 655, 658], "ve": [109, 127, 130, 648, 649, 704], "actual": [109, 112, 118, 125, 127, 130, 132, 145], "aim": [109, 127], "part": [109, 113, 116, 117, 118, 128, 129, 133, 144, 145, 167, 182, 183, 511, 514, 516, 518, 519, 520, 737, 738], "subsect": 109, "session": [109, 704], "block": [109, 118, 127, 129, 133, 145, 219, 704], "smaller": [109, 128, 133, 577, 578, 580, 603, 605, 672, 685, 687, 691], "edit": 109, "beauti": 109, "particularli": [109, 131, 145], "concern": [109, 112, 115, 122, 125, 127], "effici": [109, 117, 118, 122, 125, 126, 128, 131, 145], "difficult": [109, 117, 145, 660, 661, 662, 664], "undo": 109, "stress": 109, "frequenc": [109, 445, 468], "pycharm": 109, "pytest": [109, 117], "button": 109, "declar": 109, "insid": [109, 111, 113, 123], "exec": 109, "rm": 109, "rf": 109, "cp": 109, "ivy_contain": 109, "bash": [109, 111], "test_ivi": [109, 117], "test_funct": 109, "test_cor": 109, "test_imag": 109, "test_random_crop": 109, "header": 109, "q": [109, 145, 527, 539, 540, 545, 557], "array_api_test": 109, "test_creation_funct": 109, "test_arang": 109, "window": [109, 111, 527, 528, 529, 530, 531, 532, 533, 534, 725, 726, 727, 728, 729, 730, 731, 732], "variou": [109, 114, 120, 126, 144], "wherebi": [110, 122, 626, 638], "broad": 110, "todo": [110, 117], "commit": [110, 117], "NOT": [110, 269, 385, 387], "resourc": 110, "hypothesi": 110, "cover": [110, 114, 115, 118, 120, 127], "lambda": [110, 128, 131, 741, 744, 746], "direct": [110, 132, 133, 144, 665, 669, 671], "bind": [110, 122], "aforement": 110, "categori": [110, 113, 121, 122, 123, 127, 704], "parent": [110, 130], "hint": [110, 113, 114, 118, 121, 125, 126, 167, 178, 269, 279, 282, 284, 297, 299, 312, 314, 315, 317, 321, 340, 414, 416, 427, 429, 430, 432, 436, 445, 469, 527, 530, 539, 540, 543, 577, 588, 590, 591, 593, 603, 605, 644, 645, 647, 660, 661, 662, 665, 666, 668, 672, 676, 678, 697, 698, 700], "its": [110, 111, 114, 186, 193, 219, 263, 540, 548, 550, 577, 588, 590, 600, 602, 603, 605, 613, 615], "thorough": [110, 114, 117, 126], "transpil": [110, 127, 129, 704, 710], "builder": [111, 143, 145, 704], "maco": 111, "ubuntu": 111, "uid": 111, "make_docs_without_dock": 111, "rel": [111, 511, 514, 516, 518, 519, 520, 540, 544, 553, 556, 563, 577, 591, 593, 603, 605, 665, 666, 668, 669, 671, 704], "synchron": 111, "rest": [111, 129, 133], "remove_doc": 111, "_": [111, 114, 122, 125, 130, 131, 269, 282, 284, 312, 314, 315, 317, 321, 340, 427, 429, 430, 432, 511, 513, 514, 540, 566, 577, 588, 590, 603, 605, 660, 661, 662, 665, 666, 668, 672, 676, 678], "privat": [111, 741, 745], "fulfil": [111, 127, 704], "autogenerated_sourc": 111, "png": [111, 131], "_imag": 111, "lastli": 111, "rst": 111, "partial_sourc": 111, "conf": 111, "create_rst_fil": 111, "filter": [111, 527, 528, 529, 530, 531, 532, 533, 534, 725, 726, 727, 728, 729, 730, 731, 732], "repres": [111, 130, 167, 178, 186, 201, 269, 275, 276, 278, 279, 285, 287, 290, 294, 296, 320, 321, 323, 396, 398, 424, 426, 438, 441, 527, 536, 540, 558, 559], "overal": [111, 114, 122, 123, 124, 133], "markup": 111, "extract": [111, 113], "get_functions_and_class": 111, "doctr": 111, "readm": [111, 145], "module_nam": 111, "copy_readme_to_rst": 111, "tabl": 111, "toc": 111, "tree": 111, "append_toctree_to_rst": 111, "create_index_rst": 111, "\u03c0": [111, 269, 273, 282, 284, 288, 291, 293], "namespac": [111, 113, 123, 128, 133], "who": [112, 127, 145], "mainli": [112, 129, 131], "under": [112, 114, 115, 116, 117, 118, 122, 127, 128, 131, 133], "hood": [112, 115, 117, 118, 122, 127, 128, 131, 133], "weed": [112, 127], "behind": [112, 127, 129, 511, 514, 516, 518, 519, 520], "navig": 112, "tour": 112, "primari": [112, 117, 119, 125, 145], "composit": [112, 117, 119, 121, 122, 125, 128, 132, 133, 145], "nestabl": [112, 114, 115, 117, 125, 269, 279, 282, 284, 315, 317, 340, 427, 429, 430, 432, 436, 445, 469, 527, 530, 539, 577, 603, 605, 644, 645, 647, 672, 676, 678, 697, 698, 700], "dynam": [112, 123, 124, 125, 128, 164, 165], "runtim": [112, 117, 219], "h": [112, 122, 527, 530, 531, 532, 533, 534], "j": [112, 445, 451, 452, 540, 563, 672, 673, 675, 693], "k": [112, 128, 167, 172, 182, 183, 445, 451, 527, 539, 540, 548, 550, 557, 559, 560, 561, 563, 648, 651, 652, 655, 658], "borrow": 112, "n": [112, 167, 178, 182, 183, 445, 452, 527, 535, 540, 544, 548, 550, 552, 553, 554, 555, 556, 557, 560, 561, 563, 564, 565, 566, 577, 585, 587, 588, 590, 594, 596, 610, 612, 619, 621, 648, 651, 652, 655, 658, 672, 679, 681, 688, 690, 691, 694, 696, 697, 698, 700, 701, 703], "taken": [113, 133, 540, 544], "constant": [113, 118, 132, 133, 145, 219, 228, 229, 577, 585, 587, 626, 632, 644, 645, 647, 716, 717, 721, 724, 737, 738, 739, 740], "compil": [113, 122, 127, 129, 145, 704, 737, 738, 741, 742, 743, 744, 745, 746], "meta": [113, 121, 623, 624, 625], "overlap": 113, "sever": [113, 145, 540, 547], "judgement": 113, "locat": [113, 117, 119, 124, 648, 649], "some_namespac": 113, "some_backend": 113, "another_backend": 113, "break": [113, 126, 130, 145, 704], "anyth": [113, 704], "refactor": 113, "ongo": 113, "subfold": [113, 117], "via": [113, 122, 123, 124, 125, 128, 130, 131, 144, 626, 627, 636, 637], "file_nam": 113, "my_func": [113, 115], "int": [113, 115, 118, 122, 123, 124, 125, 126, 133, 156, 161, 164, 165, 167, 170, 172, 174, 175, 176, 177, 180, 182, 183, 184, 186, 194, 199, 201, 202, 205, 208, 219, 241, 244, 245, 246, 247, 255, 256, 257, 263, 264, 269, 297, 299, 300, 302, 303, 305, 306, 308, 309, 311, 312, 314, 445, 449, 459, 460, 463, 464, 465, 468, 469, 474, 490, 493, 494, 499, 500, 509, 511, 513, 514, 518, 527, 528, 530, 532, 533, 534, 540, 542, 544, 562, 563, 564, 565, 567, 571, 573, 574, 576, 577, 582, 584, 585, 587, 588, 590, 591, 593, 594, 596, 597, 599, 603, 605, 606, 607, 609, 610, 612, 613, 615, 616, 618, 619, 621, 622, 623, 624, 625, 626, 638, 644, 645, 647, 648, 649, 650, 651, 652, 653, 655, 656, 657, 665, 666, 668, 669, 671, 672, 676, 678, 679, 681, 682, 684, 688, 690, 691, 694, 696, 697, 698, 700, 701, 703], "nativedtyp": [113, 123, 124, 126, 167, 168, 169, 170, 171, 172, 174, 175, 179, 180, 181, 184, 185, 186, 191, 192, 198, 199, 200, 209, 672, 691], "nativedevic": [113, 123, 124, 126, 167, 168, 169, 170, 171, 172, 174, 175, 176, 177, 179, 180, 181, 184, 185, 219, 236, 237, 238, 252, 258, 260, 262, 264, 265, 268, 445, 490, 648, 649, 650, 651, 652], "my": 113, "numer": [113, 132, 167, 178, 186, 192, 269, 270, 272, 279, 315, 317, 324, 326, 337, 339, 340, 342, 343, 345, 352, 354, 355, 357, 358, 360, 361, 363, 385, 387, 388, 390, 396, 398, 399, 401, 402, 404, 408, 410, 411, 413, 417, 419, 430, 432, 433, 435, 442, 444, 445, 472, 473, 495, 496, 501, 502, 540, 542, 548, 550, 555, 560, 562, 563, 564, 648, 654, 655, 656, 657, 672, 676, 678, 685, 687, 691, 716], "cooler": 113, "produc": [113, 219, 228, 229, 527, 539], "something_cool": 113, "category_nam": [114, 118, 123, 124, 126], "contrast": [114, 126], "backend_nam": [114, 118, 119, 120, 123, 124, 126], "account": 114, "instanti": 114, "firstli": [114, 115, 118, 121, 123, 125, 131], "templat": [114, 704], "spec": [114, 115], "api_specif": [114, 269, 282, 284, 312, 314, 315, 317, 321, 340, 427, 429, 430, 432, 577, 588, 590, 603, 605, 660, 661, 662, 665, 666, 668, 672, 676, 678], "array_api": 114, "preview": 114, "render": 114, "incorrectli": 114, "onlin": [114, 704], "approxim": [114, 156, 157, 269, 273, 275, 276, 278, 282, 284, 285, 287, 288, 291, 293, 318, 320, 321, 323, 334, 337, 339, 367, 369, 370, 372, 373, 375, 376, 378, 408, 410, 420, 423, 424, 426, 436, 540, 553, 556], "tangent": [114, 156, 163, 269, 288, 290, 291, 293, 294, 296, 436, 438, 439, 441], "domain": [114, 269, 273, 275, 276, 278, 282, 284, 285, 287, 288, 291, 293, 318, 320, 321, 323, 334, 337, 339, 367, 369, 370, 372, 376, 378, 420, 423, 424, 426, 427, 429, 436], "infin": [114, 166, 186, 192, 269, 270, 272, 275, 276, 278, 279, 281, 285, 287, 288, 291, 293, 315, 317, 318, 320, 321, 323, 326, 334, 336, 337, 339, 340, 342, 343, 345, 352, 354, 355, 357, 367, 369, 370, 372, 376, 378, 379, 381, 396, 398, 408, 410, 411, 413, 414, 416, 420, 423, 424, 426, 427, 429, 436, 442, 444, 540, 565, 672, 676, 678, 682, 684, 697, 698, 700, 701, 703], "codomain": [114, 269, 273, 275, 276, 278, 282, 284, 285, 287, 288, 291, 293, 318, 320, 321, 323, 334, 337, 339, 367, 369, 370, 372, 376, 378, 420, 423, 424, 426, 427, 429, 436], "x_i": [114, 269, 270, 272, 273, 275, 276, 278, 282, 284, 285, 287, 288, 300, 302, 315, 317, 318, 320, 321, 323, 334, 337, 339, 340, 352, 354, 355, 357, 358, 360, 367, 369, 370, 372, 376, 378, 385, 387, 399, 401, 414, 416, 417, 419, 420, 423, 424, 426, 427, 429, 430, 432, 436, 442, 444, 660, 661, 662, 664, 672, 676, 678, 679, 681, 682, 684, 688, 690, 691, 694, 696], "assum": [114, 119, 123, 130, 131, 145, 167, 178, 269, 279, 282, 284, 297, 299, 312, 314, 315, 317, 318, 321, 340, 414, 416, 420, 423, 427, 429, 430, 432, 436, 445, 469, 527, 530, 539, 540, 543, 577, 588, 590, 591, 593, 603, 605, 644, 645, 647, 660, 661, 662, 665, 666, 668, 672, 676, 678, 697, 698, 700], "express": [114, 128, 133, 269, 273, 282, 284, 288, 291, 293, 318, 420, 423, 436], "radian": [114, 269, 273, 282, 284, 288, 291, 293, 318, 420, 423, 436], "float": [114, 118, 122, 123, 125, 126, 130, 132, 156, 158, 166, 167, 168, 170, 172, 174, 175, 176, 177, 180, 184, 186, 192, 198, 202, 207, 210, 219, 252, 258, 262, 265, 268, 269, 270, 272, 273, 275, 276, 278, 279, 281, 282, 284, 285, 287, 288, 290, 291, 293, 294, 296, 312, 314, 315, 317, 318, 320, 321, 323, 324, 326, 327, 329, 334, 336, 337, 339, 340, 342, 343, 345, 346, 348, 349, 351, 361, 363, 364, 366, 367, 369, 370, 372, 376, 378, 379, 381, 396, 398, 399, 401, 402, 404, 405, 407, 408, 410, 411, 413, 414, 416, 420, 423, 424, 426, 427, 429, 433, 435, 436, 438, 441, 442, 444, 445, 455, 456, 468, 472, 473, 495, 496, 501, 502, 511, 513, 514, 516, 518, 519, 520, 527, 530, 534, 539, 540, 541, 543, 545, 546, 547, 553, 556, 557, 559, 560, 565, 567, 568, 570, 571, 573, 574, 576, 622, 623, 624, 625, 644, 645, 647, 648, 651, 652, 660, 661, 662, 664, 672, 676, 678, 679, 681, 682, 684, 685, 687, 688, 690, 691, 694, 696], "operand": [114, 269, 273, 275, 276, 278, 279, 281, 282, 284, 285, 287, 288, 291, 293, 312, 314, 315, 317, 318, 320, 321, 323, 334, 336, 337, 339, 340, 367, 369, 370, 372, 376, 378, 379, 381, 396, 398, 408, 410, 411, 413, 414, 416, 420, 423, 424, 426, 427, 429, 436, 442, 444, 672, 673, 675, 676, 678, 682, 684, 691, 693], "whose": [114, 167, 182, 183, 269, 275, 276, 278, 285, 287, 290, 294, 296, 318, 320, 321, 323, 408, 410, 420, 423, 424, 426, 436, 438, 441, 445, 454, 540, 541, 543, 544, 545, 546, 547, 553, 554, 555, 556, 557, 559, 560, 561, 563, 577, 591, 593, 603, 605, 660, 661, 662, 672, 673, 675, 693], "ref": [114, 269, 309, 311, 361, 363, 396, 398, 402, 404, 411, 413, 433, 435, 577, 610, 612], "promot": [114, 118, 123, 186, 192, 195, 209, 210, 214, 269, 273, 275, 276, 278, 279, 281, 282, 284, 285, 287, 288, 290, 294, 296, 297, 299, 303, 305, 306, 308, 309, 311, 312, 314, 318, 320, 321, 323, 324, 334, 336, 337, 339, 367, 369, 370, 372, 376, 378, 379, 381, 391, 393, 396, 398, 408, 410, 411, 413, 420, 423, 424, 426, 427, 429, 436, 438, 441, 540, 541, 542, 547, 548, 550, 553, 555, 556, 559, 564, 565, 577, 610, 612, 672, 679, 681], "But": [114, 122, 133], "needless": 114, "info": [114, 704], "subset": [114, 117, 126, 128], "extend": [114, 117, 119, 126], "renam": 114, "conform": [114, 167, 178, 269, 279, 282, 284, 297, 299, 312, 314, 315, 317, 321, 337, 339, 340, 414, 416, 427, 429, 430, 432, 436, 540, 543, 577, 588, 590, 591, 593, 603, 605, 660, 661, 662, 665, 666, 668, 672, 676, 678, 697, 698, 700], "org": [114, 269, 282, 284, 312, 314, 315, 317, 321, 340, 427, 429, 430, 432, 511, 513, 514, 577, 588, 590, 603, 605, 660, 661, 662, 665, 666, 668, 672, 676, 678], "elementwise_funct": [114, 269, 282, 284, 312, 314, 315, 317, 321, 340, 427, 429, 430, 432, 577, 603, 605, 660, 661, 662, 665, 666, 668, 672, 676, 678], "descript": [114, 122, 167, 178, 269, 279, 282, 284, 297, 299, 312, 314, 315, 317, 321, 340, 414, 416, 427, 429, 430, 432, 436, 445, 469, 527, 530, 539, 540, 543, 565, 577, 588, 590, 591, 593, 603, 605, 644, 645, 647, 660, 661, 662, 665, 666, 668, 672, 676, 678, 697, 698, 700], "simplic": [114, 132, 144, 167, 178, 269, 279, 282, 284, 297, 299, 312, 314, 315, 317, 321, 340, 414, 416, 427, 429, 430, 432, 436, 445, 469, 527, 530, 539, 540, 543, 577, 588, 590, 591, 593, 603, 605, 644, 645, 647, 660, 661, 662, 665, 666, 668, 672, 676, 678], "judgment": 114, "beyond": [114, 577, 603, 605], "text": 114, "func_nam": [114, 115, 118], "pure": [114, 130, 133, 145], "themselv": [114, 118, 122, 123, 124, 132, 626, 627], "operator_nam": 114, "succinct": 114, "contstructor": 114, "though": [114, 118, 123, 131, 145], "forward": [114, 133, 144, 145, 737, 738, 741, 745], "_forward": [114, 128, 131, 132, 704], "former": 114, "trainabl": [114, 129, 131, 132, 511, 517, 714, 715, 737, 738, 747], "explicitli": [114, 118, 119, 121, 122, 125, 128, 145, 540, 545, 725, 734, 736, 737, 738], "latter": [114, 119], "implicit": [114, 122, 128], "docst": 114, "eight": 115, "static_": 115, "op_nam": 115, "__r": 115, "four": [115, 118, 123, 126, 131], "__sub__": [115, 121, 122, 126, 130], "__mul__": [115, 121, 122, 126, 130], "__truediv__": [115, 121, 122], "respect": [115, 121, 122, 123, 126, 167, 178, 269, 270, 272, 279, 281, 291, 293, 297, 299, 303, 305, 306, 308, 309, 311, 312, 314, 324, 326, 327, 329, 336, 342, 343, 345, 346, 348, 349, 351, 361, 363, 364, 366, 379, 381, 382, 384, 388, 390, 391, 393, 396, 398, 402, 404, 411, 413, 433, 435, 511, 513, 514, 515, 516, 518, 519, 520, 540, 557, 622, 623, 624, 625], "recap": [115, 122, 132], "independ": [115, 116, 120, 122, 128, 133, 540, 542, 559, 648, 649], "combinatorili": 115, "variat": [115, 117], "grid": [115, 117, 144, 167, 178], "vari": [115, 117, 122, 130, 660, 661, 662, 664], "simplest": 115, "small": [115, 118, 128, 132, 145, 269, 396, 398, 540, 553, 556, 644, 645, 647, 739, 740], "unus": [115, 125, 164, 165], "18": [115, 122, 269, 312, 314, 540, 544, 555, 672, 673, 675, 693], "excess": [115, 119, 130], "showcas": [115, 144], "demonstr": [115, 130], "replic": [115, 123], "meant": 115, "imaginari": 115, "some_flag": 115, "another_flag": 115, "54": [115, 269, 318, 321, 427, 429, 527, 539, 540, 555, 648, 651, 672, 673, 675, 693], "jointli": 115, "three": [115, 122, 127, 167, 178, 704], "x0": [115, 445, 451], "procedur": 115, "sens": [115, 122, 130], "5574077": 115, "1850398": 115, "5463025": 115, "8422884": 115, "91601413": 115, "9647598": 115, "3738229": 115, "1597457": 115, "0963247": 115, "9955841": 115, "3278579": 115, "multi": [115, 122, 127, 145, 527, 538, 540, 542, 704, 710, 725, 736], "seper": [115, 445, 468], "pars": [115, 145], "satisfi": [115, 540, 566], "far": [115, 124, 129, 130, 626, 627, 637], "asid": [115, 144], "irrelev": [115, 123], "increasingli": 115, "complex": [115, 131, 132, 133, 145, 540, 545, 560], "rule": [115, 117, 118, 121, 122, 123, 186, 192, 195, 210, 269, 290, 294, 296, 309, 311, 324, 396, 398, 411, 413, 438, 441, 540, 541, 542, 555, 559], "count": [115, 131, 219, 257, 540, 564, 577, 591, 593, 660, 661, 662, 697, 698, 700, 701, 703], "14254655": 115, "1578213": 115, "380515": 115, "17": [115, 122, 156, 158, 540, 544, 648, 651], "trivial": 115, "By": [115, 118, 122, 125, 132, 133, 445, 459, 460, 540, 564, 577, 597, 599, 672, 676, 678, 679, 681, 682, 684, 685, 687, 688, 690, 691, 694, 696, 697, 698, 700, 701, 703], "non": [115, 122, 123, 128, 164, 165, 186, 192, 206, 269, 385, 387, 388, 390, 527, 530, 540, 543, 553, 560, 562, 564, 565, 655, 656, 657, 658, 672, 676, 678, 679, 681, 682, 684, 685, 687, 694, 696, 697, 698, 700, 701, 703, 737, 738, 741, 745], "float32": [115, 123, 186, 190, 191, 203, 644, 645, 647], "dictat": [115, 121, 125, 126], "exlud": 115, "unit": [116, 117, 145, 156, 157, 158, 159, 219], "thoroughli": [116, 117], "ci": [116, 117, 145], "failur": 116, "On": [117, 129, 133], "fixtur": 117, "consum": [117, 122, 126, 219], "300": [117, 269, 414, 416], "hit": [117, 128], "permit": [117, 121, 126], "action": 117, "eleg": 117, "intellig": 117, "sampl": [117, 527, 535, 648, 649, 651, 652, 672, 688, 690, 694, 696, 725, 733], "rang": [117, 131, 132, 133, 167, 168, 176, 177, 660, 661, 672, 685, 687, 691, 704], "cach": [117, 118, 219, 237, 445, 454], "unexplor": 117, "known": 117, "repeatedli": [117, 122, 626, 635], "upload": 117, "artifact": 117, "parametr": 117, "strategi": 117, "statement": [117, 145], "plai": [117, 133], "helper": [117, 131], "verifi": [117, 123, 124, 130, 704, 710], "truth": [117, 269, 327, 329, 346, 348, 349, 351, 361, 363, 364, 366, 402, 404], "opt": [117, 119, 125, 130], "defer": [117, 118, 121, 122, 123, 124, 125], "suffic": [117, 120], "catch": [117, 445, 462], "systemat": 117, "safeguard": 117, "inabl": 117, "fact": [117, 131], "categor": [118, 124], "mutual": [118, 122], "constitut": [118, 128, 672, 688, 690, 694, 696], "venn": 118, "diagram": 118, "light": [118, 145], "wherea": [118, 121, 123, 124, 126, 133], "hand": [118, 145], "log_pr": [118, 122, 125], "array_arg": 118, "typic": 118, "whatsoev": [118, 122], "commonli": [118, 672, 688, 690, 694, 696], "outsid": [118, 124, 128, 130, 133, 577, 578, 580, 610, 612], "denomin": [118, 145, 445, 467, 473, 496, 501, 502, 644, 645, 647, 739, 740], "divis": [118, 269, 309, 311, 324, 326, 342, 343, 345, 411, 413, 445, 467, 473, 496, 501, 502, 511, 513, 514, 518, 741, 742, 743], "piec": [118, 120, 121, 128], "deal": [118, 145], "concurr": [118, 122], "weight": [118, 122, 132, 133, 511, 513, 514, 516, 518, 519, 520, 527, 536, 537, 539, 725, 726, 727, 728, 729, 730, 731, 732, 734, 735, 737, 738, 741, 743, 744], "modif": 118, "decor": [118, 120, 122, 123, 124, 125], "group": [118, 122], "briefli": [118, 131], "cast": [118, 123, 186, 192, 195, 577, 582, 584, 672, 685, 687, 691, 704], "get_all_arrays_on_dev": 118, "nested_map": [118, 626], "index_nest": [118, 626], "implicit_backend": 119, "unless": [119, 124, 125, 145, 269, 396, 398, 445, 490], "__dict__": [119, 128, 130], "ivy_original_dict": [119, 128], "unmodifi": [119, 123], "moment": [119, 145, 511, 513, 514, 518, 741, 742, 743], "fallback": 119, "freedom": [119, 672, 688, 690, 694, 696], "recommend": [119, 269, 385, 387, 388, 390, 411, 413, 672, 679, 681], "achiev": [120, 131, 133], "wrapper": [120, 121, 122, 123, 125, 126, 130], "topic": [120, 130], "tf": [121, 123, 124, 125, 126, 128, 133, 145, 704], "_data": [121, 130], "organiz": [121, 122], "inherit": [121, 122, 130], "bear": [121, 122, 123], "mind": [121, 122], "necessarili": [121, 122], "although": [121, 122], "underpin": [121, 122, 128], "programmat": [121, 122], "backup": [121, 122], "accident": [121, 122], "readabl": [121, 122, 126, 130, 131], "absent": [121, 122], "perk": [121, 122], "auto": [121, 122, 131], "throw": [121, 130], "imposs": 121, "coupl": [121, 122, 130, 132], "anywai": 121, "secondli": [121, 123], "easier": 121, "five": [122, 131], "decis": [122, 128, 130], "displai": [122, 131], "arbitrarili": [122, 131], "__repr__": 122, "control": [122, 123, 125, 130, 131, 144], "__getattr__": 122, "underli": [122, 269, 297, 299, 306, 308, 312, 314, 391, 393], "__setattr__": 122, "__contains__": 122, "__getstate__": 122, "__setstate__": 122, "unpickl": 122, "expand": [122, 445, 468, 577, 588, 590], "children": 122, "shallowest": 122, "deepest": 122, "67": [122, 269, 312, 314, 321], "22": [122, 269, 312, 314, 540, 544, 555, 655, 659, 672, 673, 675, 693], "25": [122, 269, 427, 429, 430, 432, 540, 544, 547, 567, 571, 573, 644, 645, 647, 672, 673, 675, 693], "retain_grad": [122, 511, 515], "dy": [122, 511, 515], "dx": [122, 511, 515], "technic": [122, 125, 126, 145], "autograd": [122, 145], "grad": [122, 131, 132, 133, 704, 741, 745], "redund": 122, "num_head": [122, 527, 538, 725, 736], "mask": [122, 527, 538, 539], "to_q_fn": [122, 527, 538], "to_kv_fn": [122, 527, 538], "to_out_fn": [122, 125, 527, 538], "to_q_v": [122, 527, 538], "to_kv_v": [122, 527, 538], "to_out_v": [122, 527, 538], "measur": [122, 527, 538, 725, 736], "dot": [122, 527, 538, 539, 540, 562, 564, 725, 736], "product": [122, 269, 396, 398, 445, 459, 527, 538, 539, 540, 542, 548, 550, 555, 562, 564, 672, 673, 675, 685, 687, 693, 725, 736], "implicitli": 122, "intuit": [122, 131, 132], "debug": [122, 131], "chronolog": 122, "had": [122, 125], "sequenti": [122, 132], "flow": [122, 144], "implic": 122, "slightli": [122, 128, 132], "eager": [122, 145], "int8": [123, 186, 203], "int16": [123, 186, 203, 672, 685, 687, 691], "int32": [123, 186, 203, 445, 506, 577, 588, 590, 672, 685, 687, 691], "int64": [123, 186, 203, 269, 309, 311, 655, 656, 657, 672, 685, 687, 691], "uint8": [123, 186, 203], "uint16": [123, 186, 204, 672, 685, 687, 691], "uint32": [123, 186, 204, 672, 685, 687, 691], "uint64": [123, 186, 204, 672, 685, 687, 691], "bfloat16": [123, 186, 203], "float16": [123, 186, 204], "float64": [123, 186, 192, 203], "all_dtyp": 123, "all_numeric_dtyp": 123, "all_int_dtyp": 123, "all_float_dtyp": 123, "fall": [123, 127, 704, 737, 738, 741, 745], "valid": [123, 128, 186, 196, 527, 528, 529, 530, 531, 532, 533, 534, 577, 610, 612, 697, 698, 700, 701, 703, 725, 726, 727, 728, 729, 730, 731, 732], "invalid": [123, 540, 564, 697, 698, 700, 701, 703], "thirdli": 123, "native_float32": 123, "importantli": [123, 130, 133, 144], "varieti": [123, 124], "conveni": [123, 124, 126, 129, 131, 132], "arguabl": [123, 124], "compound": 123, "overflow": [123, 269, 279, 672, 691], "arr": [123, 124, 644, 645, 647], "scalar": [123, 128, 133, 145, 167, 175, 445, 490, 507, 510, 540, 565], "settabl": [123, 124], "jnp": [123, 124, 125, 126, 133, 704], "jaxarrai": [123, 124, 125, 126], "mx": [123, 124, 125, 704], "nd": [123, 124, 125, 128, 133, 704], "deleg": 123, "fill_valu": [123, 167, 174, 175, 269, 329, 348, 349, 351], "as_n": [123, 186, 197, 198, 199, 200, 219, 238, 239, 260], "idx": [124, 130, 445, 449], "tpu": [124, 219, 241, 266], "aliv": [124, 219, 253, 257, 259, 445, 471, 489, 491], "amount": [124, 219, 265, 567, 568, 570, 571, 573, 574, 576], "memori": [124, 125, 143, 145, 219, 237, 258, 263, 265, 268, 527, 537, 704], "dual": 124, "thrown": [124, 145, 445, 481], "rare": [124, 145], "program": 125, "strictli": 125, "ration": 125, "speak": 125, "subtli": 125, "ensure_in_backend": [125, 445, 481], "x_nativ": 125, "val_n": 125, "is_ivy_arrai": [125, 130, 445], "is_vari": [125, 511], "assign": [125, 130], "elif": 125, "irrespect": [125, 130, 186, 192], "inclus": [125, 167, 168, 648, 650], "omit": [125, 126, 660, 661, 662, 664], "unspecifi": [125, 269, 408, 410, 411, 413, 540, 545, 577, 610, 612], "predominantli": [125, 144], "math": [125, 133, 704], "presenc": 125, "altern": [125, 131], "_wrap_fn": 125, "maxim": [125, 128], "inner": [125, 130, 540, 545, 548, 550, 622, 623, 624, 625], "third": [125, 145, 540, 560, 660, 661], "addition": [125, 126], "leverag": 125, "equival": [125, 131, 133, 167, 168, 269, 309, 311, 385, 387, 388, 390, 411, 413, 540, 553, 556, 559, 565], "input_arrai": 125, "adress": 126, "revisit": [126, 133], "dedic": [126, 130, 132, 511, 525, 714, 715], "__div__": 126, "dicat": 126, "futher": 126, "absenc": 126, "pep": 126, "484": 126, "annot": 126, "brittl": 126, "intend": [126, 672, 691], "freeli": 126, "inde": [126, 145], "flexibl": 126, "original_typ": 126, "cumbersom": 126, "sound": 127, "higher": [127, 128, 133, 145, 511, 514, 516, 518, 519, 520], "overview": [127, 144], "handler": [127, 129, 133, 704], "fledg": [128, 129], "syntact": [128, 133], "clip_by_valu": [128, 133], "clamp": [128, 133], "behavior": [128, 145, 269, 408, 410, 411, 413, 660, 661, 662, 664], "fit": [128, 577, 597, 599], "construct": [128, 129, 132, 133, 577, 616, 618, 725, 726, 727, 728, 729, 730, 731, 732, 734, 735, 736, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748], "num": [128, 167, 176, 177], "power_seq": 128, "okai": 128, "bound": 128, "resid": [128, 132], "edg": [128, 133, 577, 578, 580, 585, 587, 619, 621, 704], "larger": [128, 133, 186, 202, 577, 578, 580, 603, 605, 672, 688, 690, 694, 696], "ml_framework": [128, 133, 167, 168], "current_framework": [128, 133], "furthermor": 128, "concaten": [128, 131, 219, 248, 445, 468, 577, 582, 584, 704], "framework_handl": 128, "face": 128, "verbos": [128, 704, 751], "cprint": [128, 750], "framework_stack": 128, "_determine_framework_from_arg": 128, "valueerror": [128, 577, 607, 609], "get_framework": 128, "neither": [128, 269, 279, 396, 398], "illustr": [128, 144], "un": [128, 186, 206], "nn": [128, 133, 167, 178, 704], "init_h": [128, 527, 537], "init_c": [128, 527, 537], "kernel": [128, 145, 527, 537], "recurrent_kernel": [128, 527, 537], "bia": [128, 132, 527, 536, 537, 725, 726, 727, 728, 729, 730, 731, 732, 735], "recurrent_bia": [128, 527, 537], "x_shape": 128, "batch_shap": [128, 130, 133, 445, 490, 527, 537, 538, 539, 540, 566, 648, 649, 725, 734], "timestep": [128, 527, 537, 725, 734], "input_channel": [128, 132, 725, 726, 727, 728, 729, 730, 731, 734, 735], "x_flat": 128, "wi": 128, "wi_x": 128, "wii_x": 128, "wif_x": 128, "wig_x": 128, "wio_x": 128, "recurr": [128, 527, 537], "wh": 128, "lstm": [128, 527, 537, 725], "ht": 128, "ct": 128, "hts_list": 128, "unrol": [128, 131, 527, 537], "wii_xt": 128, "wif_xt": 128, "wig_xt": 128, "wio_xt": 128, "zip": 128, "htm1": 128, "ctm1": 128, "wh_htm1": 128, "whi_htm1": 128, "whf_htm1": 128, "whg_htm1": 128, "who_htm1": 128, "ft": 128, "gt": 128, "ot": 128, "offici": 128, "reliabl": 128, "sacrific": 128, "hear": 128, "virtu": 128, "pure_ivi": 128, "reduce_mean": [128, 131, 132, 133, 704], "reduce_sum": [128, 704], "reduce_var": 128, "compile_graph": [128, 133], "pure_torch": 128, "cat": [128, 133], "backbon": [128, 131], "_layer": 128, "super": [128, 131, 132, 133], "clean": [128, 129, 131], "random_unifrom": 128, "unclean": 128, "wx": 128, "temp": 128, "torchscript": 128, "fn": [128, 130, 146, 147, 148, 149, 150, 151, 152, 153, 154, 186, 203, 204, 219, 228, 229, 445, 449, 508, 626, 627, 632, 633, 634, 636, 637, 638, 707, 709], "example_input": [128, 164, 165], "static_argnum": [128, 164, 165], "static_argnam": [128, 164, 165], "jit": [128, 145], "frontend": 129, "primit": [129, 145], "describ": [129, 133, 672, 673, 675, 685, 687, 688, 690, 691, 693], "hierarch": [129, 131, 132], "straight": [130, 704], "arraywithlinalg": 130, "arraywithlog": 130, "arraywithmath": 130, "arraywithmeta": 130, "arraywithreduct": 130, "is_native_arrai": [130, 445], "_shape": 130, "_size": 130, "functool": 130, "mul": 130, "len": [130, 133, 167, 178], "_dtype": 130, "_devic": 130, "_dev_str": 130, "_pre_repr": 130, "_post_repr": 130, "ndim": [130, 540, 557, 560], "mt": 130, "answer": [130, 145], "consol": 130, "typeerror": 130, "immut": 130, "behav": 130, "claim": 130, "truli": 130, "_native_wrapp": 130, "attributeerror": 130, "genuin": 130, "some_method": 130, "similarli": [130, 167, 178], "rewritten": 130, "__pow__": 130, "strang": 130, "power": [130, 131, 132, 269, 309, 311, 334, 408, 410, 445, 472, 495, 502, 540, 552, 716], "enforc": 130, "notic": 130, "appear": [130, 577, 588, 590], "invers": [130, 144, 269, 273, 275, 276, 278, 282, 284, 285, 287, 288, 290, 291, 293, 294, 296, 320, 323, 438, 441, 540, 547, 556], "_wrap_method": 130, "func_wrapp": [130, 146, 147, 148, 149, 150, 151, 152, 153, 154], "__name__": 130, "non_wrapped_method": 130, "_method_wrap": 130, "native_arg": 130, "native_kwarg": 130, "inner_fn": 130, "whist": 130, "unwrap": 130, "transit": 130, "needlessli": 130, "randn": 130, "_unwrap_method": 130, "method_wrap": 130, "compartment": 130, "public": [130, 445, 457], "newshap": [130, 577, 600, 602], "new_shap": 130, "tidi": 130, "shorter": 130, "crystal": 130, "41": [130, 269, 312, 314, 427, 429, 540, 541, 672, 691], "enough": [130, 131, 132], "ton": 131, "ado": [131, 132], "incred": [131, 145], "hash": 131, "soup": 131, "walk": [131, 132], "dct": 131, "cnt": 131, "combo": [131, 704, 710], "hold": [131, 445, 493, 494], "1000": [131, 269, 427, 429], "uda": 131, "3333": 131, "6667": 131, "178": 131, "new_weight": 131, "0600": 131, "3100": 131, "2400": 131, "6900": 131, "delimit": 131, "autocomplet": 131, "midwai": 131, "agent": 131, "total_spe": 131, "total_height": 131, "total_width": 131, "ag": 131, "tot": 131, "total_": 131, "total_h": 131, "batch_siz": [131, 527, 528, 529, 530, 531, 532, 533, 534, 648, 649], "dir": 131, "adam": [131, 132, 133, 511, 513, 514, 518, 704, 741, 743], "cnt0": 131, "cnt1": 131, "diff_0": 131, "diff_1": 131, "config0": 131, "config1": 131, "Not": [131, 132, 145, 166], "decod": 131, "l0": 131, "l1": [131, 540, 565], "depth": [131, 132, 133, 144, 219, 243, 247, 251, 445, 475, 490, 626, 638, 737, 738], "clearer": 131, "truncat": 131, "decoder__l0": 131, "decoder__l1": 131, "encoder__l0": 131, "encoder__l1": 131, "height": 131, "l0__b": 131, "l0__w": 131, "l1__b": 131, "l1__w": 131, "printabl": 131, "obviou": 131, "foresight": 131, "untidili": 131, "update_ag": 131, "normalize_img": 131, "img": 131, "img_max": 131, "reduce_max": [131, 704], "img_min": 131, "reduce_min": [131, 704], "img_rang": 131, "agent_posit": 131, "agent_veloc": 131, "agent_cam_front_rgb": 131, "agent_cam_front_depth": 131, "agent_cam_rear_rgb": 131, "agent_cam_rear_depth": 131, "agent_cam_lidar": 131, "normal": [131, 577, 610, 612, 644, 645, 647, 648, 651, 739, 740], "cleaner": 131, "camera": 131, "front_rgb": 131, "front_depth": 131, "rear_rgb": 131, "rear_depth": 131, "lidar": 131, "rgb": 131, "rear": 131, "veloc": 131, "cam": 131, "cam_max": 131, "cam_min": 131, "cam_rang": 131, "Of": 131, "ideal": 131, "perman": 131, "afterward": 131, "thread": 131, "incorpor": 131, "pretti": 131, "straightforward": 131, "dataload": [131, 143, 704], "_cnt": 131, "img_": 131, "_dataset_s": 131, "_batch_siz": 131, "_count": [131, 132], "__next__": 131, "filenam": 131, "img_fnam": 131, "fname": 131, "loaded_img": 131, "cv2": 131, "imread": 131, "loader": [131, 145], "32": [131, 156, 158, 269, 312, 314, 527, 530, 533, 540, 555, 655, 659, 672, 673, 675, 693], "batch_slic": 131, "model": [131, 132, 704], "mymodel": [131, 704], "linear0": [131, 132, 704], "linear1": [131, 132, 704], "x_in": [131, 132, 133, 704], "001": [131, 132, 644, 645, 647], "loss_fn": [131, 132, 133, 704], "0145": 131, "grad_fn": 131, "addbackward0": 131, "_create_vari": 132, "output_channel": [132, 725, 726, 727, 728, 729, 730, 731, 734, 735], "with_bia": [132, 725, 735], "_input_channel": 132, "_output_channel": 132, "_w_shape": 132, "_b_shape": 132, "_with_bia": 132, "8979": 132, "3198": 132, "0196": 132, "3126": 132, "3717": 132, "9687": 132, "6958": 132, "5122": 132, "3902": 132, "8800": 132, "5613": 132, "1982": 132, "nightmar": 132, "overcom": 132, "fc": 132, "9563": 132, "impact": 132, "v0": 132, "v1": 132, "6440": 132, "key0": 132, "1823": 132, "8075": 132, "linear3": 132, "v2": 132, "2346": 132, "counter": 132, "hidden": [132, 527, 537, 725, 734], "fed": [132, 219, 263], "1300": 132, "decoupl": 132, "scheme": 132, "weight_initi": [132, 725, 726, 727, 728, 729, 730, 731, 732, 734, 735], "glorotuniform": [132, 716, 725, 726, 727, 728, 729, 730, 731, 732, 734, 735], "bias_initi": [132, 725, 726, 727, 728, 729, 730, 731, 732, 735], "_w_init": 132, "_b_init": 132, "create_vari": [132, 716], "var_shap": [132, 716], "fan_out": [132, 716], "fan_in": [132, 716], "fan_mod": [132, 716], "fan_sum": 132, "slight": 132, "misnom": 132, "saw": 132, "vanilla": [132, 622, 624], "descent": [132, 511, 516, 741, 746], "lar": [132, 511, 518, 519, 741], "lamb": [132, 511, 518, 741], "compile_on_next_step": [132, 737, 738, 741, 742, 743, 744, 745, 746], "_beta1": 132, "_beta2": 132, "_epsilon": 132, "_mw": 132, "_vw": 132, "_first_pass": 132, "_should_compil": 132, "_step": [132, 741, 745], "new_v": 132, "_lr": 132, "isinst": [132, 133, 445, 505], "_inplac": 132, "_stop_gradi": 132, "set_stat": [132, 741, 742, 743, 744, 745, 746], "mw": [132, 511, 513, 514], "vw": [132, 511, 513, 514], "pre": [133, 145, 219], "captur": 133, "sparse_funct": 133, "num_class": [133, 648, 649], "num_dim": 133, "new_axi": 133, "_linear": 133, "to_backend": 133, "jax_graph": 133, "learnabl": [133, 644, 645, 647, 739, 740], "to_ivy_modul": [133, 714], "thinli": 133, "whilst": 133, "to_haiku_modul": 133, "hk": 133, "loss_fn_t": 133, "transform": [133, 144, 527, 535, 536], "without_apply_rng": 133, "rng": 133, "prngkei": 133, "init": 133, "update_rul": 133, "01": [133, 269, 414, 416], "tree_multimap": 133, "mechan": [143, 145, 704], "vision": [143, 704], "robot": [143, 704], "focus": 144, "field": [144, 540, 545, 557, 560, 660, 661, 662], "perfect": 144, "3d": [144, 725, 730, 731], "differenti": 144, "demo": [144, 704], "orient": 144, "pose": 144, "euler": [144, 166], "quaternion": 144, "rotat": 144, "matric": [144, 167, 178, 182, 183, 527, 536, 540, 541, 543, 544, 545, 546, 547, 552, 553, 554, 556, 557, 559, 560, 561, 563], "angl": [144, 269, 291, 293, 321, 424, 426], "ivy_mech": 144, "target_facing_rotation_matrix": 144, "polar_to_cartesian_coord": 144, "ordin": [144, 540, 559], "warp": 144, "optic": 144, "voxel": 144, "ivy_vis": 144, "coords_to_voxel_grid": 144, "render_pixel_coord": 144, "neural": [144, 527, 704, 711, 725], "radianc": 144, "nerf": 144, "trajectori": 144, "motion": 144, "plan": [144, 704], "mobil": 144, "ivy_robot": 144, "sample_spline_path": 144, "rigidmobil": 144, "sample_bodi": 144, "drone": 144, "sample_link": 144, "openai": 144, "swimmer": 144, "cumul": [144, 445, 459, 460], "reward": 144, "supervis": 144, "reinforc": 144, "door": [144, 145], "intersect": 144, "cartpol": 144, "mountain_car": 144, "pendulum": 144, "reacher": 144, "polici": 144, "condit": [144, 164, 165, 626, 636, 637, 655, 659], "learnt": 144, "ture": 144, "ntm": 144, "egospher": 144, "spatial": 144, "esm": 144, "ivy_memori": 144, "egocentr": 144, "room": 144, "inspir": 144, "doubt": 145, "grate": 145, "put": 145, "probe": 145, "undergo": 145, "remark": 145, "surpris": 145, "backward": [145, 269, 411, 413, 540, 564, 697, 698, 700, 701, 703], "lock": 145, "contunu": 145, "minor": 145, "xla": 145, "buffer": 145, "kind": [145, 186, 202, 205, 269, 408, 410, 672, 685, 687, 691], "gold": 145, "dex": 145, "phase": 145, "lax": 145, "scan": 145, "tricki": 145, "predictor": 145, "tight": 145, "driver": 145, "schedul": 145, "algorithm": [145, 527, 528, 529, 530, 531, 532, 533, 534, 725, 726, 727, 728, 729, 730, 731, 732], "dispatch": 145, "Will": 145, "ast": 145, "dynamic": 145, "cond": 145, "jacobian": 145, "checkpoint": 145, "autodiff": 145, "shine": 145, "merci": 145, "superset": 145, "cluster": 145, "compet": 145, "paradigm": 145, "parallelis": [145, 219, 228, 229], "spmd": 145, "mixtur": 145, "expert": 145, "sophist": 145, "depart": 145, "routin": 145, "hundr": 145, "thousand": 145, "deepli": [145, 626, 628], "broadli": 145, "heavili": 145, "supplementari": 145, "Is": 145, "reusabl": 145, "fanci": 145, "fusion": 145, "lose": 145, "vmap": 145, "pmap": 145, "overhead": 145, "ineffici": 145, "eventu": 145, "supplement": 145, "backdoor": 145, "callback": 145, "record": 145, "metric": 145, "somewhat": 145, "outsourc": 145, "inputs_to_ivy_arrai": 146, "gaussian": [156, 157], "leaki": [156, 157, 158], "alpha": [156, 158], "rectifi": [156, 158, 159], "slope": [156, 158], "39": [156, 158, 269, 334, 540, 555, 672, 673, 675, 693], "85": [156, 158, 269, 312, 314], "48": [156, 158, 269, 427, 429, 540, 555, 672, 673, 675, 693], "88": [156, 158, 269, 312, 314, 540, 555, 672, 673, 675, 693], "269": [156, 160], "731": [156, 160], "881": [156, 160], "214": [156, 160], "978": [156, 160], "891": [156, 160], "422": [156, 161], "155": [156, 161], "0768": [156, 161], "231": [156, 161], "693": [156, 161, 567, 574, 576], "49": [156, 161, 269, 427, 429, 672, 673, 675, 693], "147": [156, 161], "363": [156, 161], "3461": [156, 162], "6491": [156, 162], "535": [156, 162], "hyperbol": [156, 163, 269, 275, 276, 278, 285, 287, 290, 294, 296, 320, 321, 323, 424, 426, 438, 439, 441], "55": [156, 163, 527, 533, 540, 555, 672, 673, 675, 693], "501": [156, 163], "762": [156, 163], "964": [156, 163], "faster": [164, 165], "invoc": [164, 165], "718281828459045": 166, "newaxi": 166, "alia": 166, "pi": 166, "141592653589793": 166, "mathemat": [166, 269, 279, 291, 293, 337, 339, 396, 398, 540, 565], "half": [167, 168, 648, 650, 652], "chosen": [167, 168, 269, 291, 293, 655, 659], "distanc": [167, 168], "adjac": [167, 168], "interpret": [167, 169, 179], "uniniti": [167, 170, 171], "n_row": [167, 172], "n_col": [167, 172], "elsewher": [167, 172, 655, 659], "row": [167, 172, 540, 559, 560, 648, 649, 655, 658], "column": [167, 172, 540, 545, 557, 559, 560], "__dlpack__": [167, 173, 219, 264], "interchang": [167, 173, 577, 613, 615], "endpoint": [167, 176], "xy": [167, 178], "coordin": [167, 178, 269, 291, 293], "cartesian": [167, 178], "ij": [167, 178, 672, 673, 675, 693], "rank": [167, 178, 445, 509, 540, 542, 553, 557, 559, 563, 564, 565, 577, 585, 587, 588, 590, 610, 612, 619, 621, 655, 658, 697, 698, 700, 701, 703], "ni": [167, 178], "xi": [167, 178], "n1": [167, 178], "n2": [167, 178], "n3": [167, 178], "accordingli": [167, 178, 269, 337, 339, 540, 565, 655, 657, 660, 661, 662, 664, 672, 676, 678, 679, 681, 682, 684, 685, 687, 688, 690, 691, 694, 696, 697, 698, 700, 701, 703], "xv": [167, 178], "yv": [167, 178], "triangular": [167, 182, 183, 540, 541, 557], "innermost": [167, 182, 183, 540, 541, 543, 544, 545, 546, 547, 553, 554, 556, 557, 559, 560, 561, 563], "mxn": [167, 182, 183, 540, 544, 553, 554, 556, 557, 561, 563], "defaultdtyp": [186, 187], "defaultfloatdtyp": [186, 188], "float_dtyp": [186, 198, 212], "defaultintdtyp": [186, 189], "dtype_in": [186, 190, 191, 201, 206, 207, 208, 218], "incompat": [186, 194], "from_": [186, 195], "occur": [186, 195, 655, 656, 657, 660, 661, 662, 664], "closest": [186, 196, 269, 315, 317, 326, 340, 342, 343, 345, 414, 416, 442, 444], "floatdtyp": [186, 198], "int_dtyp": [186, 199, 213], "intdtyp": [186, 199], "followng": [186, 202], "occupi": [186, 202, 205, 445, 493, 494], "ep": [186, 202, 540, 553, 556], "smallest_norm": [186, 202], "precis": [186, 202, 269, 396, 398, 427, 429], "encapsul": [186, 205], "type1": [186, 209], "type2": [186, 209], "arrays_and_dtyp": [186, 210], "ret1": [186, 214], "ret2": [186, 214], "noinspect": [187, 188, 189, 220, 512], "pyshadowingnam": [187, 188, 189, 220, 512], "defaultdevic": [219, 220], "__enter__": 219, "_dev": 219, "initialis": 219, "devcloneditem": [219, 241], "multidevitem": [219, 221, 224], "devclonedit": 219, "multidevit": [219, 222, 225, 228, 229, 233], "devclonednest": 219, "multidevnest": [219, 223, 226], "devdistitem": 219, "devdistit": 219, "devdistnest": 219, "devmanag": [219, 227], "dev_mapp": 219, "da_dim_s": 219, "safety_factor": 219, "min_dev_dim_s": 219, "max_dev_dim_step_ratio": 219, "min_unit_dev_tune_step": 219, "min_sf_tune_step": 219, "starting_split_factor": 219, "max_split_factor_step_s": 219, "tune_dev_alloc": 219, "tune_dev_split": 219, "mapper": [219, 228, 229], "receivess": 219, "ratio": [219, 511, 518, 741, 743], "safe": [219, 228], "oom": 219, "tune": 219, "da_tune_step": 219, "ds_tune_step": 219, "to_clon": 219, "to_distribut": 219, "multidevic": [219, 228], "parallel": [219, 228, 229], "mutlidevic": [219, 228], "repeated_config_check": 219, "tune_step": 219, "devmapp": [219, 229], "ret_fn": [219, 228, 229], "queue_class": [219, 228, 229], "worker_class": [219, 228, 229], "worker": [219, 228, 229], "used_dev": [219, 228], "sf": [219, 228], "devmappermultiproc": 219, "multidev": [219, 230, 231, 232, 251], "profil": 219, "save_dir": [219, 234], "deviceic": [219, 240], "spread": [219, 251], "139740789224448": [219, 253], "physic": [219, 255], "x3": [219, 257], "x4": [219, 257], "process_specif": [219, 258, 268], "percentag": [219, 258], "ram": [219, 258, 265, 268], "alon": [219, 258, 268], "attr_onli": [219, 259], "chunk": [219, 261, 262, 263], "max_chunk_s": [219, 263], "chunk_siz": [219, 263], "input_ax": [219, 263], "output_ax": [219, 263], "feed": [219, 263], "fist": [219, 263], "stream": [219, 264], "caveat": [219, 264], "portabl": [219, 264, 704], "gb": [219, 265, 268], "reset": [219, 267], "magnitud": [269, 270, 272, 279, 396, 398, 540, 560, 561], "princip": [269, 273, 282, 284, 288], "cosin": [269, 273, 275, 276, 278, 318, 320, 321, 323], "x1_i": [269, 279, 281, 291, 293, 297, 299, 303, 305, 306, 308, 309, 311, 312, 314, 324, 326, 327, 329, 336, 342, 343, 345, 346, 348, 349, 351, 361, 363, 364, 366, 379, 381, 382, 384, 388, 390, 391, 393, 396, 398, 402, 404, 408, 410, 411, 413, 433, 435], "x2_i": [269, 279, 281, 291, 293, 297, 299, 303, 305, 306, 308, 309, 311, 312, 314, 324, 326, 327, 329, 336, 342, 343, 345, 346, 348, 349, 351, 361, 363, 364, 366, 379, 381, 382, 384, 388, 390, 391, 393, 396, 398, 402, 404, 408, 410, 411, 413, 433, 435], "finit": [269, 279, 291, 293, 352, 354, 396, 398, 408, 410, 411, 413], "nor": [269, 279, 396, 398], "nearest": [269, 279, 396, 398, 414, 416], "2019": [269, 279, 337, 339, 396, 398], "commut": [269, 279], "sine": [269, 282, 284, 285, 287, 420, 423, 424, 426], "57": [269, 282, 284, 312, 314, 321], "524": [269, 282, 284], "644": [269, 282, 284], "201": [269, 282, 284, 414, 416], "305": [269, 282, 284], "412": [269, 282, 284], "quotient": [269, 291, 293], "notat": [269, 291, 293, 672, 673, 675, 693], "denot": [269, 291, 293], "pair": [269, 291, 293, 527, 539, 540, 542], "quadrant": [269, 291, 293], "3\u03c0": [269, 291, 293], "549": [269, 290, 294, 296, 438, 441], "bitwis": [269, 297, 299, 306, 308, 312, 314, 391, 393], "AND": [269, 297, 299, 382, 384, 697, 698, 700], "binari": [269, 297, 299, 306, 308, 312, 314, 391, 393, 567, 568, 570], "invert": [269, 300, 302], "arithmet": [269, 309, 311, 672, 679, 681], "propag": [269, 309, 311, 672, 676, 678, 679, 681, 682, 684, 688, 690, 691, 694, 696], "thu": [269, 309, 311, 408, 410, 411, 413, 540, 545], "lh": [269, 309, 311], "rh": [269, 309, 311], "xor": [269, 312, 314, 391, 393], "78": [269, 312, 314, 540, 555, 672, 673, 675, 693], "91": [269, 312, 314, 540, 555, 672, 673, 675, 693], "23": [269, 312, 314, 527, 533, 540, 544, 655, 659], "66": [269, 312, 314, 540, 555, 672, 673, 675, 693], "77": [269, 312, 314, 540, 555, 672, 673, 675, 693], "79": [269, 312, 314], "89": [269, 312, 314, 540, 562, 672, 691], "98": [269, 312, 314, 540, 555, 655, 659, 672, 673, 675, 693], "26": [269, 312, 314, 527, 534, 540, 544, 555, 562, 672, 673, 675, 693], "21": [269, 312, 314, 445, 459, 540, 544, 555, 567, 574, 576, 672, 673, 675, 693], "34": [269, 312, 314, 427, 429], "24": [269, 312, 314, 427, 429, 445, 459, 540, 544, 555, 672, 673, 675, 693], "51": [269, 312, 314], "27": [269, 312, 314, 321, 427, 429, 527, 539, 540, 555, 672, 673, 675, 693], "74": [269, 312, 314], "59": [269, 312, 314], "416": [269, 318], "76": [269, 321, 540, 562, 672, 673, 675, 693], "122": [269, 321], "368": [269, 321], "670": [269, 321], "202": [269, 321, 414, 416], "548": [269, 321], "1490": [269, 321], "dividend": [269, 324, 411, 413], "divisor": [269, 324, 411, 413, 511, 513, 514, 518, 672, 688, 690, 694, 696, 741, 742, 743], "gauss": [269, 330, 333], "exponenti": [269, 281, 330, 333, 334, 336, 379, 381, 408, 410], "logarithm": [269, 281, 334, 336, 367, 369, 370, 372, 373, 375, 376, 378, 379, 381, 540, 558], "72": [269, 334, 540, 555, 672, 673, 675, 693], "accur": [269, 337, 339], "fdlibm": [269, 337, 339], "compliant": [269, 337, 339, 385, 387, 388, 390, 672, 676, 678, 679, 681, 682, 684], "greatest": [269, 326, 340, 342, 343, 345], "out_i": [269, 352, 354, 355, 357, 358, 360], "threshold": [269, 394, 395], "exce": [269, 395], "y_i": [269, 399, 401], "expon": [269, 408, 410, 445, 502], "versu": [269, 408, 410], "odd": [269, 408, 410], "modulu": [269, 411, 413], "primarili": [269, 411, 413], "5654": [269, 414, 416], "034": [269, 414, 416], "433": [269, 414, 416], "343": [269, 414, 416], "44": [269, 414, 416, 427, 429, 430, 432, 540, 555, 655, 659, 672, 673, 675, 693], "30": [269, 414, 416, 540, 555, 672, 673, 675, 693, 716, 722], "81": [269, 414, 416, 430, 432, 672, 673, 675, 693], "527": [269, 414, 416], "301": [269, 414, 416], "indistinguish": [269, 427, 429], "infinit": [269, 427, 429], "83": [269, 427, 429], "32455532": [269, 427, 429], "89897949": [269, 427, 429], "50": [269, 427, 429, 540, 555, 655, 658, 672, 673, 675, 693], "31": [269, 427, 429], "169": [269, 427, 429], "63": [269, 427, 429, 540, 541, 555, 672, 673, 675, 693], "47": [269, 427, 429], "73": [269, 427, 429, 540, 541, 644, 645, 647], "93": [269, 427, 429], "35": [269, 427, 429, 527, 539, 540, 542, 655, 659, 672, 673, 675, 693], "09": [269, 430, 432, 527, 539], "61": [269, 430, 432, 567, 568, 570], "546": [269, 436], "842": [269, 436], "916": [269, 436, 567, 568, 570], "96": [269, 436, 540, 555, 672, 673, 675, 693], "996": [269, 436], "328": [269, 436], "decim": [269, 442, 444], "array_method": [270, 271, 274, 275, 276, 277, 280, 281, 282, 283, 285, 286, 289, 290, 291, 292, 294, 295, 297, 298, 300, 301, 303, 304, 306, 307, 309, 310, 312, 313, 315, 316, 319, 320, 322, 323, 325, 326, 328, 329, 330, 331, 335, 336, 337, 338, 341, 342, 343, 344, 347, 348, 349, 350, 352, 353, 355, 356, 358, 359, 361, 362, 364, 365, 367, 368, 370, 371, 373, 374, 376, 377, 379, 380, 382, 383, 385, 386, 388, 389, 391, 392, 396, 397, 399, 400, 402, 403, 405, 406, 408, 409, 411, 412, 414, 415, 417, 418, 420, 421, 424, 425, 427, 428, 430, 431, 433, 434, 437, 438, 440, 441, 442, 443, 446, 447, 548, 549, 568, 569, 571, 572, 574, 575, 578, 579, 582, 583, 585, 586, 588, 589, 591, 592, 594, 595, 597, 598, 600, 601, 603, 604, 607, 608, 610, 611, 613, 614, 616, 617, 619, 620, 645, 646, 666, 667, 669, 670, 673, 674, 676, 677, 679, 680, 682, 683, 685, 686, 688, 689, 692, 693, 694, 695, 698, 699, 701, 702], "container_method": [330, 332, 420, 422, 578, 581], "inspect": [445, 449, 708, 709], "downscal": [445, 455, 456], "60": [445, 459, 540, 555, 672, 673, 675, 693], "default_v": [445, 462], "catch_except": [445, 462], "rev": [445, 462], "with_cal": [445, 462], "arrang": [445, 463], "123": [445, 466], "mod": [445, 467], "max_freq": [445, 468], "num_band": [445, 468], "pad": [445, 468, 527, 528, 529, 530, 531, 532, 533, 534, 577, 585, 587, 619, 621, 725, 726, 727, 728, 729, 730, 731, 732], "fourier": [445, 468], "band": [445, 468], "linearli": [445, 468, 540, 559], "oppos": [445, 468], "geometr": [445, 468], "seen_set": [445, 475], "local_set": [445, 475], "decrement": [445, 479], "is_arrai": 445, "allow_dupl": [445, 487], "forkserv": [445, 488], "spawn": [445, 488], "hot": [445, 490], "scatter": [445, 490, 493, 494], "overrid": [445, 490], "tmp_dr": [445, 498], "temporari": [445, 498], "min_denomin": [445, 501], "stabil": [445, 501, 502, 665, 666, 668, 669, 671], "_min_denomin": [445, 501], "min_bas": [445, 502], "_min_bas": [445, 502, 644, 645, 647, 739, 740], "100000023841858": [445, 505], "200000047683716": [445, 505], "299999952316284": [445, 505], "400000095367432": [445, 505], "599999904632568": [445, 505], "101": [445, 506], "unpack": [445, 509], "gradienttrack": [511, 512], "delta": [511, 513], "cost": [511, 513, 514, 516, 518, 519, 520, 622, 623, 624, 625], "ws": [511, 513, 514, 516, 518, 519, 520], "en": [511, 513, 514], "wikipedia": [511, 513, 514], "wiki": [511, 513, 514], "stochastic_gradient_desc": [511, 513, 514], "dc": [511, 513, 514, 516, 518, 519, 520], "dw": [511, 513, 514, 516, 518, 519, 520], "averag": [511, 513, 514, 518, 622, 623, 624], "forget": [511, 513, 514, 518, 741, 742, 743], "rate": [511, 514, 516, 518, 519, 520, 622, 623, 624, 625, 725, 736, 741, 742, 743, 744, 745, 746], "ws_new": [511, 514, 516, 518, 519, 520], "retain": [511, 515], "trust": [511, 518, 741, 743], "decai": [511, 518, 519, 741, 743, 744], "layerwis": [511, 519, 741, 744], "stride": [527, 528, 529, 530, 531, 532, 533, 534, 725, 726, 727, 728, 729, 730, 731, 732], "data_format": [527, 528, 529, 530, 531, 532, 533, 534, 725, 726, 727, 728, 729, 730, 731, 732], "nwc": [527, 528, 529, 725, 726, 727], "dilat": [527, 528, 529, 530, 531, 532, 533, 534, 725, 726, 727, 728, 729, 730, 731, 732], "convolut": [527, 528, 529, 530, 531, 532, 533, 534, 725, 726, 727, 728, 729, 730, 731, 732], "d_in": [527, 528, 529, 530, 531, 532, 533], "fw": [527, 528, 529, 530, 531, 532, 533, 534], "d_out": [527, 528, 529, 530, 531, 532, 533], "slide": [527, 528, 529, 530, 531, 532, 533, 534, 725, 726, 727, 728, 729, 730, 731, 732], "ncw": [527, 528, 529, 725, 726, 727], "wio": [527, 528], "output_shap": [527, 529, 531, 533, 725, 727, 729, 731], "nhwc": [527, 530, 531, 534, 725, 728, 729, 732], "fh": [527, 530, 531, 532, 533, 534], "nchw": [527, 530, 531, 534, 725, 728, 729, 732], "hwio": [527, 530], "unequ": [527, 530], "28": [527, 530, 533, 534, 540, 555, 672, 673, 675, 693], "unsqueez": [527, 530, 534], "ndhwc": [527, 532, 533, 725, 730, 731], "volum": [527, 532], "fd": [527, 532, 533], "ncdhw": [527, 532, 533, 725, 730, 731], "dhwio": [527, 532], "256": [527, 533], "258": [527, 533], "128": [527, 533, 540, 555], "depthwis": [527, 534, 725, 732], "333": [527, 534], "inp": [527, 534], "prob": [527, 535, 648, 649, 725, 733], "randomli": [527, 535, 725, 733], "bernoulli": [527, 535], "out_featur": [527, 535, 536], "incom": [527, 536], "outer_batch_shap": [527, 536], "inner_batch_shap": [527, 536], "in_featur": [527, 536], "cell": [527, 537, 725, 734], "num_queri": [527, 538, 539], "x_feat_dim": [527, 538], "num_kei": [527, 538, 539], "cont_feat_dim": [527, 538], "numhead": [527, 538], "feat_dim": [527, 538, 539], "out_feat_dim": [527, 538], "score": [527, 539], "04": [527, 539], "03": [527, 539, 644, 645, 647], "08": [527, 539], "decomposit": [540, 541, 557, 560], "symmetr": [540, 541, 545, 546, 566], "u": [540, 541, 560], "577": [540, 541], "707": [540, 541], "vif": [540, 542], "92": [540, 543], "293": [540, 543], "46997": [540, 543], "axis2": [540, 544], "eigendecomposit": [540, 545], "qlq\u1d40": [540, 545], "orthogon": [540, 545], "eig": [540, 545], "namedtupl": [540, 545, 557, 560, 660, 661, 662], "eigenvalu": [540, 545, 546], "eigenvector": [540, 545], "75": [540, 547, 555], "prepend": [540, 548, 550], "fro": [540, 551], "rtol": [540, 553, 556], "singular": [540, 553, 556, 560, 561], "toler": [540, 553, 556], "largest_singular_valu": [540, 553, 556], "array_lik": [540, 555], "33": [540, 555, 644, 645, 647, 672, 673, 675, 693], "36": [540, 555, 672, 673, 675, 693], "45": [540, 555, 577, 606, 644, 645, 647, 672, 673, 675, 693], "65": [540, 555, 672, 673, 675, 693], "84": [540, 555, 672, 673, 675, 693], "105": [540, 555, 567, 568, 570], "112": [540, 555, 672, 673, 675, 693], "104": [540, 555, 672, 673, 675, 693], "120": [540, 555], "moor": [540, 556], "penros": [540, 556], "pseudo": [540, 556], "orthonorm": [540, 557, 560], "2d": [540, 558, 725, 728, 729, 732], "logdet": [540, 558], "coeffici": [540, 559], "full_matric": [540, 560], "usvh": [540, 560], "vh": [540, 560], "hermitian": [540, 560], "et": [540, 560], "cetera": [540, 560], "adjoint": [540, 560], "reconstruct": [540, 560, 660, 661, 663], "reconstructed_x": [540, 560], "contract": [540, 562, 672, 673, 675, 693], "doubl": [540, 562], "singleton": [540, 565, 577, 607, 609, 655, 657, 672, 676, 678, 679, 681, 682, 684, 685, 687, 688, 690, 691, 694, 696, 697, 698, 700, 701, 703], "liter": [540, 565], "manhattan": [540, 565], "l2": [540, 565], "euclidean": [540, 565], "mathbf": [540, 566], "mathbb": [540, 566], "skew": [540, 566], "entropi": [567, 568, 570, 571, 573, 574, 576], "predict": [567, 568, 570, 571, 573, 574, 576], "smooth": [567, 568, 570, 571, 573, 574, 576], "223": [567, 568, 570], "357": [567, 568, 570, 574, 576], "511": [567, 568, 570], "discret": [567, 571, 573], "3862944": [567, 571, 573], "35667497": [567, 571, 573], "spars": [567, 574, 576], "logit": [567, 574, 576], "793291": [567, 574, 576], "512926": [567, 574, 576], "before_1": [577, 585, 587, 619, 621], "after_1": [577, 585, 587, 619, 621], "before_n": [577, 585, 587, 619, 621], "after_n": [577, 585, 587, 619, 621], "insert": [577, 588, 590, 626, 631, 655, 656], "manipulation_funct": [577, 588, 590], "reorder": [577, 591, 593], "permut": [577, 594, 596, 613, 615], "repetit": [577, 597, 599, 616, 618], "restor": [577, 603, 605], "classivi": [577, 606], "famili": [577, 610, 612], "intxx": [577, 610, 612], "floatxx": [577, 610, 612], "fomaml_step": 622, "inner_cost_fn": [622, 623, 624], "outer_cost_fn": [622, 623, 624], "inner_grad_step": [622, 623, 624, 625], "inner_learning_r": [622, 623, 624, 625], "inner_optimization_step": [622, 623, 624, 625], "inner_batch_fn": [622, 623, 624], "outer_batch_fn": [622, 623, 624], "average_across_step": [622, 623, 624], "inner_v": [622, 623, 624], "keep_inner_v": [622, 623, 624], "outer_v": [622, 623, 624], "keep_outer_v": [622, 623, 624], "return_inner_v": [622, 623, 624, 625], "num_task": [622, 623, 624, 625], "maml": [622, 623, 624], "recev": [622, 623, 624], "0x7fe7f5fc7160": [622, 623, 624, 625], "maml_step": 622, "rece": [622, 624], "reptile_step": 622, "cost_fn": [622, 625], "reptil": [622, 625], "receivng": [622, 625], "all_nested_indic": 626, "include_nest": [626, 627], "_index": [626, 627, 637], "_base": [626, 627, 636, 637], "copy_nest": 626, "to_mut": [626, 628, 638], "mutabl": [626, 628, 638], "insert_into_nest_at_index": 626, "insert_into_nest_at_indic": 626, "map_nest_at_index": 626, "map_nest_at_indic": 626, "multi_index_nest": 626, "nested_ani": 626, "check_nest": [626, 636, 637], "conditon": [626, 636, 637], "nested_indices_wher": 626, "stop_after_n_found": [626, 637], "_depth": [626, 638], "_tuple_check_fn": [626, 638], "_list_check_fn": [626, 638], "_dict_check_fn": [626, 638], "nested_multi_map": 626, "nest0": [626, 639], "ivy_arrai": [626, 639], "funciton": [626, 639], "prune_nest_at_index": 626, "prune_nest_at_indic": 626, "set_nest_at_index": 626, "set_nest_at_indic": 626, "mini": [644, 645, 647, 739, 740], "gamma": [644, 645, 647], "beta": [644, 645, 647], "0976": [644, 645, 647], "3452": [644, 645, 647], "2740": [644, 645, 647], "1047": [644, 645, 647], "5886": [644, 645, 647], "2732": [644, 645, 647], "7696": [644, 645, 647], "7024": [644, 645, 647], "2518": [644, 645, 647], "58": [644, 645, 647, 660, 661], "283": [644, 645, 647], "585": [644, 645, 647], "909": [644, 645, 647], "628": [644, 645, 647], "997": [644, 645, 647], "225": [644, 645, 647], "425": [644, 645, 647], "norm_idx": [644, 645, 647], "228": [644, 645, 647], "0285": [644, 645, 647], "199": [644, 645, 647], "204": [644, 645, 647], "population_s": [648, 649], "num_sampl": [648, 649], "draw": [648, 649, 651, 652], "unnorm": [648, 649], "drawn": [648, 649, 650, 651, 652], "home": [648, 649, 651, 652], "uniformli": [648, 650, 652], "highest": [648, 650], "parameter": [648, 651, 652], "6444774682897879": [648, 651], "811": [648, 651], "508": [648, 651], "564": [648, 651], "7268672": [648, 651], "968": [648, 651], "175": [648, 651, 660, 661], "064": [648, 651], "40935726": [648, 651], "556": [648, 651], "26431865": [648, 652], "475": [648, 652], "878": [648, 652], "861": [648, 652], "89150229": [648, 652], "89629126": [648, 652], "94198485": [648, 652], "91405606": [648, 652], "72848724": [648, 652], "7550739": [648, 652], "624": [648, 652], "00109": [648, 652], "occurr": [655, 656, 657, 660, 661], "yield": [655, 659], "43": [655, 659], "x_j": [660, 661, 662, 664], "impli": [660, 661, 662, 664], "inverse_indic": [660, 661, 663], "aggreg": [660, 661], "fourth": [660, 661], "607": [660, 661], "735": [660, 661], "667": [660, 661], "381": [660, 661], "857": [660, 661], "0396": [660, 661], "166": [660, 661], "828": [660, 661], "144": [660, 661], "40501155": [660, 661], "77361575": [660, 661], "97776199": [660, 661], "36831157": [660, 661], "89148434": [660, 661], "9512272": [660, 661], "67542176": [660, 661], "41985657": [660, 661], "23478023": [660, 661], "1141": [660, 661], "8101": [660, 661], "9298": [660, 661], "8460": [660, 661], "2119": [660, 661], "3519": [660, 661], "6252": [660, 661], "4033": [660, 661], "7443": [660, 661], "2577": [660, 661], "3707": [660, 661], "0545": [660, 661], "3238": [660, 661], "5944": [660, 661], "0775": [660, 661], "4327": [660, 661], "176": [660, 661], "889": [660, 661], "763": [660, 661], "071": [660, 661], "262": [660, 661], "456": [660, 661], "114": [660, 661], "349": [660, 661], "615": [660, 661], "594": [660, 661], "335": [660, 661], "212": [660, 661], "457": [660, 661], "827": [660, 661], "209": [660, 661], "ascend": [665, 666, 668], "einstein": [672, 673, 675, 693], "summat": [672, 673, 675, 693], "seq": [672, 673, 675, 693], "jk": [672, 673, 675, 693], "ik": [672, 673, 675, 693], "126": [672, 673, 675, 693], "510": [672, 673, 675, 693], "99": [672, 673, 675, 693], "108": [672, 673, 675, 693], "117": [672, 673, 675, 693], "sentinel": [672, 676, 678, 682, 684], "unsign": [672, 685, 687, 691], "degre": [672, 688, 690, 694, 696], "bessel": [672, 688, 690, 694, 696], "8164966": [672, 688, 690], "varianc": [672, 694, 696], "unbias": [672, 694, 696], "simplicit": [697, 698, 700], "autom": 704, "grow": 704, "ai": 704, "got": 704, "colab": 704, "sharp": 704, "weekli": 704, "event": 704, "immedi": 704, "favorit": 704, "jax_concat": 704, "tf_concat": 704, "np_concat": 704, "mx_concat": 704, "torch_concat": 704, "prompt": 704, "get_devic": 704, "reduce_prod": 704, "gradient_imag": 704, "linalg": 704, "bilinear_resampl": 704, "stack_imag": 704, "neural_net": 704, "ecosystem": [704, 710], "popular": [704, 710], "acceler": 704, "articl": 704, "lenton2021ivi": 704, "inter": 704, "lenton": 704, "daniel": 704, "pardo": 704, "fabio": 704, "falck": 704, "fabian": 704, "jame": 704, "stephen": 704, "clark": 704, "ronald": 704, "journal": 704, "arxiv": 704, "preprint": 704, "2102": 704, "02886": 704, "2021": 704, "add_array_spec": 707, "fn_array_spec": 707, "geglu": 711, "native_modul": [714, 715], "native_module_class": [714, 715], "firstlayersiren": 716, "kaimingnorm": [716, 720], "negative_slop": 716, "Ones": 716, "siren": 716, "w0": [716, 722], "filter_s": [725, 726, 727], "1d": [725, 726, 727], "conv1dtranspos": 725, "filter_shap": [725, 728, 729, 730, 731, 732], "conv2dtranspos": 725, "conv3dtranspos": 725, "depthwiseconv2d": 725, "num_channel": [725, 732], "bernoul": [725, 733], "num_lay": [725, 734], "return_sequ": [725, 734], "return_st": [725, 734], "get_initial_st": [725, 734], "dens": [725, 735], "multiheadattent": 725, "query_dim": [725, 736], "head_dim": [725, 736], "dropout_r": [725, 736], "context_dim": [725, 736], "with_to_q_fn": [725, 736], "with_to_kv_fn": [725, 736], "with_to_out_fn": [725, 736], "build_mod": [725, 736, 737, 738], "on_init": [725, 736, 737, 738], "__call__": [725, 736, 737, 738], "store_var": [737, 738], "arg_stateful_idx": [737, 738], "kwarg_stateful_idx": [737, 738], "fallback_to_non_compil": [737, 738, 741, 745], "with_partial_v": [737, 738], "initialz": [737, 738], "from_cal": [737, 738], "check_submod_ret": [737, 738], "get_mod_kei": [737, 738], "top_mod": [737, 738], "mod_depth": [737, 738], "mod_height": [737, 738], "mod_with_top_mod_key_chain": [737, 738], "save_weight": [737, 738], "weights_path": [737, 738], "show_mod_in_top_mod": [737, 738], "upper_depth": [737, 738], "lower_depth": [737, 738], "show_structur": [737, 738], "show_v_in_top_v": [737, 738], "sub_mod": [737, 738], "show_v": [737, 738], "track_submod_call_ord": [737, 738], "track_submod_ret": [737, 738], "v_with_top_v_key_chain": [737, 738], "layernorm": 739, "normalized_shap": [739, 740], "elementwise_affin": [739, 740], "trail": [739, 740], "affin": [739, 740], "0001": [741, 742, 743], "init_on_first_step": [741, 745], "ignore_miss": [741, 745], "overriden": [741, 745], "sgd": 741, "stochast": [741, 746], "sub_modul": [747, 748]}, "objects": {"ivy.array": [[0, 0, 0, "-", "activations"], [2, 0, 0, "-", "conversions"], [7, 0, 0, "-", "creation"], [9, 0, 0, "-", "data_types"], [11, 0, 0, "-", "device"], [13, 0, 0, "-", "elementwise"], [15, 0, 0, "-", "general"], [17, 0, 0, "-", "gradients"], [19, 0, 0, "-", "image"], [21, 0, 0, "-", "layers"], [23, 0, 0, "-", "linear_algebra"], [25, 0, 0, "-", "losses"], [27, 0, 0, "-", "manipulation"], [29, 0, 0, "-", "norms"], [31, 0, 0, "-", "random"], [33, 0, 0, "-", "searching"], [35, 0, 0, "-", "set"], [37, 0, 0, "-", "sorting"], [39, 0, 0, "-", "statistical"], [41, 0, 0, "-", "utility"], [43, 0, 0, "-", "wrapping"]], "ivy.array.activations": [[1, 1, 1, "", "ArrayWithActivations"]], "ivy.array.array_methods": [[271, 2, 1, "", "abs"], [276, 2, 1, "", "acos"], [323, 2, 1, "", "acosh"], [379, 2, 1, "", "add"], [699, 2, 1, "", "all"], [447, 2, 1, "", "all_equal"], [702, 2, 1, "", "any"], [667, 2, 1, "", "argsort"], [283, 2, 1, "", "asin"], [286, 2, 1, "", "asinh"], [294, 2, 1, "", "atan"], [292, 2, 1, "", "atan2"], [441, 2, 1, "", "atanh"], [569, 2, 1, "", "binary_cross_entropy"], [298, 2, 1, "", "bitwise_and"], [301, 2, 1, "", "bitwise_invert"], [304, 2, 1, "", "bitwise_left_shift"], [307, 2, 1, "", "bitwise_or"], [310, 2, 1, "", "bitwise_right_shift"], [313, 2, 1, "", "bitwise_xor"], [316, 2, 1, "", "ceil"], [579, 2, 1, "", "clip"], [583, 2, 1, "", "concat"], [586, 2, 1, "", "constant_pad"], [323, 2, 1, "", "cos"], [322, 2, 1, "", "cosh"], [572, 2, 1, "", "cross_entropy"], [343, 2, 1, "", "divide"], [693, 2, 1, "", "einsum"], [349, 2, 1, "", "equal"], [331, 2, 1, "", "erf"], [379, 2, 1, "", "exp"], [589, 2, 1, "", "expand_dims"], [338, 2, 1, "", "expm1"], [592, 2, 1, "", "flip"], [343, 2, 1, "", "floor"], [344, 2, 1, "", "floor_divide"], [349, 2, 1, "", "greater"], [350, 2, 1, "", "greater_equal"], [353, 2, 1, "", "isfinite"], [356, 2, 1, "", "isinf"], [359, 2, 1, "", "isnan"], [646, 2, 1, "", "layer_norm"], [362, 2, 1, "", "less"], [365, 2, 1, "", "less_equal"], [368, 2, 1, "", "log"], [371, 2, 1, "", "log10"], [374, 2, 1, "", "log1p"], [377, 2, 1, "", "log2"], [380, 2, 1, "", "logaddexp"], [383, 2, 1, "", "logical_and"], [386, 2, 1, "", "logical_not"], [389, 2, 1, "", "logical_or"], [392, 2, 1, "", "logical_xor"], [549, 2, 1, "", "matmul"], [677, 2, 1, "", "max"], [680, 2, 1, "", "mean"], [683, 2, 1, "", "min"], [397, 2, 1, "", "multiply"], [400, 2, 1, "", "negative"], [403, 2, 1, "", "not_equal"], [595, 2, 1, "", "permute_dims"], [406, 2, 1, "", "positive"], [409, 2, 1, "", "pow"], [686, 2, 1, "", "prod"], [412, 2, 1, "", "remainder"], [598, 2, 1, "", "repeat"], [601, 2, 1, "", "reshape"], [604, 2, 1, "", "roll"], [415, 2, 1, "", "round"], [418, 2, 1, "", "sign"], [421, 2, 1, "", "sin"], [425, 2, 1, "", "sinh"], [670, 2, 1, "", "sort"], [575, 2, 1, "", "sparse_cross_entropy"], [428, 2, 1, "", "sqrt"], [431, 2, 1, "", "square"], [608, 2, 1, "", "squeeze"], [611, 2, 1, "", "stack"], [689, 2, 1, "", "std"], [434, 2, 1, "", "subtract"], [692, 2, 1, "", "sum"], [614, 2, 1, "", "swapaxes"], [441, 2, 1, "", "tan"], [440, 2, 1, "", "tanh"], [617, 2, 1, "", "tile"], [443, 2, 1, "", "trunc"], [695, 2, 1, "", "var"], [620, 2, 1, "", "zero_pad"]], "ivy.array.conversions": [[3, 2, 1, "", "args_to_ivy"], [4, 2, 1, "", "args_to_native"], [5, 2, 1, "", "to_ivy"], [6, 2, 1, "", "to_native"]], "ivy.array.creation": [[8, 1, 1, "", "ArrayWithCreation"]], "ivy.array.data_types": [[10, 1, 1, "", "ArrayWithDataTypes"]], "ivy.array.device": [[12, 1, 1, "", "ArrayWithDevice"]], "ivy.array.elementwise": [[14, 1, 1, "", "ArrayWithElementwise"]], "ivy.array.elementwise.ArrayWithElementwise": [[14, 3, 1, "", "abs"], [14, 3, 1, "", "acos"], [14, 3, 1, "", "acosh"], [14, 3, 1, "", "add"], [14, 3, 1, "", "asin"], [14, 3, 1, "", "asinh"], [14, 3, 1, "", "atan"], [14, 3, 1, "", "atan2"], [14, 3, 1, "", "atanh"], [14, 3, 1, "", "bitwise_and"], [14, 3, 1, "", "bitwise_invert"], [14, 3, 1, "", "bitwise_left_shift"], [14, 3, 1, "", "bitwise_or"], [14, 3, 1, "", "bitwise_right_shift"], [14, 3, 1, "", "bitwise_xor"], [14, 3, 1, "", "ceil"], [14, 3, 1, "", "cos"], [14, 3, 1, "", "cosh"], [14, 3, 1, "", "divide"], [14, 3, 1, "", "equal"], [14, 3, 1, "", "erf"], [14, 3, 1, "", "exp"], [14, 3, 1, "", "expm1"], [14, 3, 1, "", "floor"], [14, 3, 1, "", "floor_divide"], [14, 3, 1, "", "greater"], [14, 3, 1, "", "greater_equal"], [14, 3, 1, "", "isfinite"], [14, 3, 1, "", "isinf"], [14, 3, 1, "", "isnan"], [14, 3, 1, "", "less"], [14, 3, 1, "", "less_equal"], [14, 3, 1, "", "log"], [14, 3, 1, "", "log10"], [14, 3, 1, "", "log1p"], [14, 3, 1, "", "log2"], [14, 3, 1, "", "logaddexp"], [14, 3, 1, "", "logical_and"], [14, 3, 1, "", "logical_not"], [14, 3, 1, "", "logical_or"], [14, 3, 1, "", "logical_xor"], [14, 3, 1, "", "multiply"], [14, 3, 1, "", "negative"], [14, 3, 1, "", "not_equal"], [14, 3, 1, "", "positive"], [14, 3, 1, "", "pow"], [14, 3, 1, "", "remainder"], [14, 3, 1, "", "round"], [14, 3, 1, "", "sign"], [14, 3, 1, "", "sin"], [14, 3, 1, "", "sinh"], [14, 3, 1, "", "sqrt"], [14, 3, 1, "", "square"], [14, 3, 1, "", "subtract"], [14, 3, 1, "", "tan"], [14, 3, 1, "", "tanh"], [14, 3, 1, "", "trunc"]], "ivy.array.general": [[16, 1, 1, "", "ArrayWithGeneral"]], "ivy.array.general.ArrayWithGeneral": [[16, 3, 1, "", "all_equal"]], "ivy.array.gradients": [[18, 1, 1, "", "ArrayWithGradients"]], "ivy.array.image": [[20, 1, 1, "", "ArrayWithImage"]], "ivy.array.layers": [[22, 1, 1, "", "ArrayWithLayers"]], "ivy.array.linear_algebra": [[24, 1, 1, "", "ArrayWithLinearAlgebra"]], "ivy.array.linear_algebra.ArrayWithLinearAlgebra": [[24, 3, 1, "", "matmul"]], "ivy.array.losses": [[26, 1, 1, "", "ArrayWithLosses"]], "ivy.array.losses.ArrayWithLosses": [[26, 3, 1, "", "binary_cross_entropy"], [26, 3, 1, "", "cross_entropy"], [26, 3, 1, "", "sparse_cross_entropy"]], "ivy.array.manipulation": [[28, 1, 1, "", "ArrayWithManipulation"]], "ivy.array.manipulation.ArrayWithManipulation": [[28, 3, 1, "", "clip"], [28, 3, 1, "", "concat"], [28, 3, 1, "", "constant_pad"], [28, 3, 1, "", "expand_dims"], [28, 3, 1, "", "flip"], [28, 3, 1, "", "permute_dims"], [28, 3, 1, "", "repeat"], [28, 3, 1, "", "reshape"], [28, 3, 1, "", "roll"], [28, 3, 1, "", "squeeze"], [28, 3, 1, "", "stack"], [28, 3, 1, "", "swapaxes"], [28, 3, 1, "", "tile"], [28, 3, 1, "", "zero_pad"]], "ivy.array.norms": [[30, 1, 1, "", "ArrayWithNorms"]], "ivy.array.norms.ArrayWithNorms": [[30, 3, 1, "", "layer_norm"]], "ivy.array.random": [[32, 1, 1, "", "ArrayWithRandom"]], "ivy.array.searching": [[34, 1, 1, "", "ArrayWithSearching"]], "ivy.array.set": [[36, 1, 1, "", "ArrayWithSet"]], "ivy.array.sorting": [[38, 1, 1, "", "ArrayWithSorting"]], "ivy.array.sorting.ArrayWithSorting": [[38, 3, 1, "", "argsort"], [38, 3, 1, "", "sort"]], "ivy.array.statistical": [[40, 1, 1, "", "ArrayWithStatistical"]], "ivy.array.statistical.ArrayWithStatistical": [[40, 3, 1, "", "einsum"], [40, 3, 1, "", "max"], [40, 3, 1, "", "mean"], [40, 3, 1, "", "min"], [40, 3, 1, "", "prod"], [40, 3, 1, "", "std"], [40, 3, 1, "", "sum"], [40, 3, 1, "", "var"]], "ivy.array.utility": [[42, 1, 1, "", "ArrayWithUtility"]], "ivy.array.utility.ArrayWithUtility": [[42, 3, 1, "", "all"], [42, 3, 1, "", "any"]], "ivy.array.wrapping": [[44, 2, 1, "", "add_ivy_array_instance_methods"]], "ivy": [[45, 0, 0, "-", "backend_handler"], [146, 0, 0, "-", "func_wrapper"], [707, 0, 0, "-", "inspection"], [750, 0, 0, "-", "verbosity"]], "ivy.backend_handler": [[45, 1, 1, "", "ContextManager"], [47, 2, 1, "", "choose_random_backend"], [48, 2, 1, "", "clear_backend_stack"], [49, 2, 1, "", "current_backend"], [50, 2, 1, "", "get_backend"], [51, 2, 1, "", "set_backend"], [52, 2, 1, "", "try_import_ivy_jax"], [53, 2, 1, "", "try_import_ivy_mxnet"], [54, 2, 1, "", "try_import_ivy_numpy"], [55, 2, 1, "", "try_import_ivy_tf"], [56, 2, 1, "", "try_import_ivy_torch"], [57, 2, 1, "", "unset_backend"]], "ivy.backend_handler.ContextManager": [[45, 3, 1, "", "__init__"]], "ivy.container": [[62, 0, 0, "-", "activations"], [64, 0, 0, "-", "base"], [66, 0, 0, "-", "container"], [69, 0, 0, "-", "creation"], [71, 0, 0, "-", "data_types"], [73, 0, 0, "-", "device"], [75, 0, 0, "-", "elementwise"], [77, 0, 0, "-", "general"], [79, 0, 0, "-", "gradients"], [81, 0, 0, "-", "image"], [83, 0, 0, "-", "layers"], [85, 0, 0, "-", "linear_algebra"], [87, 0, 0, "-", "losses"], [89, 0, 0, "-", "manipulation"], [91, 0, 0, "-", "norms"], [93, 0, 0, "-", "random"], [95, 0, 0, "-", "searching"], [97, 0, 0, "-", "set"], [99, 0, 0, "-", "sorting"], [101, 0, 0, "-", "statistical"], [103, 0, 0, "-", "utility"], [105, 0, 0, "-", "wrapping"]], "ivy.container.activations": [[63, 1, 1, "", "ContainerWithActivations"]], "ivy.container.base": [[65, 1, 1, "", "ContainerBase"]], "ivy.container.base.ContainerBase": [[65, 3, 1, "", "__getitem__"], [65, 3, 1, "", "__init__"], [65, 3, 1, "", "__setitem__"], [65, 3, 1, "", "all_false"], [65, 3, 1, "", "all_key_chains"], [65, 3, 1, "", "all_true"], [65, 3, 1, "", "arrays_as_lists"], [65, 3, 1, "", "as_arrays"], [65, 3, 1, "", "as_bools"], [65, 3, 1, "", "as_ones"], [65, 3, 1, "", "as_random_uniform"], [65, 3, 1, "", "as_variables"], [65, 3, 1, "", "as_zeros"], [65, 3, 1, "", "assert_contains_sub_container"], [65, 3, 1, "", "assert_contains_sub_structure"], [65, 3, 1, "", "assert_identical"], [65, 3, 1, "", "assert_identical_structure"], [65, 3, 1, "", "at_key_chain"], [65, 3, 1, "", "at_key_chains"], [65, 3, 1, "", "at_keys"], [65, 3, 1, "", "clip"], [65, 3, 1, "", "combine"], [65, 3, 1, "", "common_key_chains"], [65, 4, 1, "", "config"], [65, 3, 1, "", "contains_sub_container"], [65, 3, 1, "", "contains_sub_structure"], [65, 3, 1, "", "copy"], [65, 3, 1, "", "create_if_absent"], [65, 3, 1, "", "cutoff_at_depth"], [65, 3, 1, "", "cutoff_at_height"], [65, 3, 1, "", "deep_copy"], [65, 4, 1, "", "dev"], [65, 3, 1, "", "dev_clone"], [65, 3, 1, "", "dev_dist"], [65, 4, 1, "", "dev_str"], [65, 3, 1, "", "diff"], [65, 3, 1, "", "dtype"], [65, 3, 1, "", "einops_rearrange"], [65, 3, 1, "", "einops_reduce"], [65, 3, 1, "", "einops_repeat"], [65, 3, 1, "", "find_sub_container"], [65, 3, 1, "", "find_sub_structure"], [65, 3, 1, "", "flatten_key_chain"], [65, 3, 1, "", "flatten_key_chains"], [65, 3, 1, "", "format_key_chains"], [65, 3, 1, "", "from_disk_as_hdf5"], [65, 3, 1, "", "from_disk_as_json"], [65, 3, 1, "", "from_disk_as_pickled"], [65, 3, 1, "", "from_flat_list"], [65, 3, 1, "", "from_numpy"], [65, 3, 1, "", "gather"], [65, 3, 1, "", "gather_nd"], [65, 3, 1, "", "h5_file_size"], [65, 3, 1, "", "handle_inplace"], [65, 3, 1, "", "has_key"], [65, 3, 1, "", "has_key_chain"], [65, 3, 1, "", "has_nans"], [65, 3, 1, "", "identical"], [65, 3, 1, "", "identical_array_shapes"], [65, 3, 1, "", "identical_configs"], [65, 3, 1, "", "identical_structure"], [65, 3, 1, "", "if_exists"], [65, 3, 1, "", "inplace_update"], [65, 4, 1, "", "ivy"], [65, 3, 1, "", "key_chains_containing"], [65, 3, 1, "", "list_join"], [65, 3, 1, "", "list_stack"], [65, 3, 1, "", "map"], [65, 3, 1, "", "map_conts"], [65, 3, 1, "", "matrix_norm"], [65, 4, 1, "", "max_depth"], [65, 3, 1, "", "maximum"], [65, 3, 1, "", "minimum"], [65, 3, 1, "", "multi_map"], [65, 3, 1, "", "multi_map_in_static_method"], [65, 3, 1, "", "num_arrays"], [65, 3, 1, "", "overwrite_at_key_chain"], [65, 3, 1, "", "overwrite_at_key_chains"], [65, 3, 1, "", "prune_empty"], [65, 3, 1, "", "prune_key_chain"], [65, 3, 1, "", "prune_key_chains"], [65, 3, 1, "", "prune_key_from_key_chains"], [65, 3, 1, "", "prune_keys"], [65, 3, 1, "", "prune_keys_from_key_chains"], [65, 3, 1, "", "reduce"], [65, 3, 1, "", "remove_key_length_limit"], [65, 3, 1, "", "remove_print_limit"], [65, 3, 1, "", "reshape_like"], [65, 3, 1, "", "restructure"], [65, 3, 1, "", "restructure_key_chains"], [65, 3, 1, "", "set_at_key_chain"], [65, 3, 1, "", "set_at_key_chains"], [65, 3, 1, "", "set_at_keys"], [65, 3, 1, "", "set_framework"], [65, 3, 1, "", "set_ivy_backend"], [65, 4, 1, "", "shape"], [65, 4, 1, "", "shapes"], [65, 3, 1, "", "show"], [65, 3, 1, "", "show_sub_container"], [65, 3, 1, "", "shuffle"], [65, 3, 1, "", "shuffle_h5_file"], [65, 3, 1, "", "size_ordered_arrays"], [65, 3, 1, "", "slice_keys"], [65, 3, 1, "", "slice_via_key"], [65, 3, 1, "", "sort_by_key"], [65, 3, 1, "", "split"], [65, 3, 1, "", "stop_gradients"], [65, 3, 1, "", "structural_diff"], [65, 3, 1, "", "to_device"], [65, 3, 1, "", "to_dict"], [65, 3, 1, "", "to_disk_as_hdf5"], [65, 3, 1, "", "to_disk_as_json"], [65, 3, 1, "", "to_disk_as_pickled"], [65, 3, 1, "", "to_flat_list"], [65, 3, 1, "", "to_iterator"], [65, 3, 1, "", "to_iterator_keys"], [65, 3, 1, "", "to_iterator_values"], [65, 3, 1, "", "to_ivy"], [65, 3, 1, "", "to_jsonable"], [65, 3, 1, "", "to_list"], [65, 3, 1, "", "to_multi_dev"], [65, 3, 1, "", "to_native"], [65, 3, 1, "", "to_numpy"], [65, 3, 1, "", "to_raw"], [65, 3, 1, "", "trim_key"], [65, 3, 1, "", "try_kc"], [65, 3, 1, "", "unify"], [65, 3, 1, "", "unstack"], [65, 3, 1, "", "update_config"], [65, 3, 1, "", "vector_norm"], [65, 3, 1, "", "with_default_key_color"], [65, 3, 1, "", "with_entries_as_lists"], [65, 3, 1, "", "with_ivy_backend"], [65, 3, 1, "", "with_key_length_limit"], [65, 3, 1, "", "with_print_indent"], [65, 3, 1, "", "with_print_limit"], [65, 3, 1, "", "with_print_line_spacing"]], "ivy.container.container": [[67, 1, 1, "", "Container"], [68, 1, 1, "", "MultiDevContainer"]], "ivy.container.container.Container": [[67, 3, 1, "", "__add__"], [67, 3, 1, "", "__init__"], [67, 3, 1, "", "__radd__"], [67, 3, 1, "", "adam_step"], [67, 3, 1, "", "arange"], [67, 3, 1, "", "arg_info"], [67, 3, 1, "", "arg_names"], [67, 3, 1, "", "argmax"], [67, 3, 1, "", "argmin"], [67, 3, 1, "", "array"], [67, 3, 1, "", "array_equal"], [67, 3, 1, "", "arrays_equal"], [67, 3, 1, "", "as_ivy_dev"], [67, 3, 1, "", "as_ivy_dtype"], [67, 3, 1, "", "as_native_dev"], [67, 3, 1, "", "as_native_dtype"], [67, 3, 1, "", "asarray"], [67, 3, 1, "", "assert_supports_inplace"], [67, 3, 1, "", "astype"], [67, 3, 1, "", "broadcast_arrays"], [67, 3, 1, "", "broadcast_to"], [67, 3, 1, "", "cache_fn"], [67, 3, 1, "", "can_cast"], [67, 3, 1, "", "cholesky"], [67, 3, 1, "", "clear_mem_on_dev"], [67, 3, 1, "", "clip_matrix_norm"], [67, 3, 1, "", "closest_valid_dtype"], [67, 3, 1, "", "container_types"], [67, 3, 1, "", "conv1d"], [67, 3, 1, "", "conv1d_transpose"], [67, 3, 1, "", "conv2d"], [67, 3, 1, "", "conv2d_transpose"], [67, 3, 1, "", "conv3d"], [67, 3, 1, "", "conv3d_transpose"], [67, 3, 1, "", "copy_array"], [67, 3, 1, "", "cross"], [67, 3, 1, "", "cumprod"], [67, 3, 1, "", "cumsum"], [67, 3, 1, "", "current_backend"], [67, 3, 1, "", "current_backend_str"], [67, 3, 1, "", "default"], [67, 3, 1, "", "default_device"], [67, 3, 1, "", "default_dtype"], [67, 3, 1, "", "default_float_dtype"], [67, 3, 1, "", "default_int_dtype"], [67, 3, 1, "", "depthwise_conv2d"], [67, 3, 1, "", "det"], [67, 3, 1, "", "dev_clone_array"], [67, 3, 1, "", "dev_clone_iter"], [67, 3, 1, "", "dev_clone_nest"], [67, 3, 1, "", "dev_dist_array"], [67, 3, 1, "", "dev_dist_iter"], [67, 3, 1, "", "dev_dist_nest"], [67, 3, 1, "", "dev_unify"], [67, 3, 1, "", "dev_unify_array"], [67, 3, 1, "", "dev_unify_iter"], [67, 3, 1, "", "dev_unify_nest"], [67, 3, 1, "", "dev_util"], [67, 3, 1, "", "diagonal"], [67, 3, 1, "", "dropout"], [67, 3, 1, "", "dtype_bits"], [67, 3, 1, "", "eigh"], [67, 3, 1, "", "eigvalsh"], [67, 3, 1, "", "empty"], [67, 3, 1, "", "empty_like"], [67, 3, 1, "", "execute_with_gradients"], [67, 3, 1, "", "exists"], [67, 3, 1, "", "eye"], [67, 3, 1, "", "finfo"], [67, 3, 1, "", "floormod"], [67, 3, 1, "", "fourier_encode"], [67, 3, 1, "", "from_dlpack"], [67, 3, 1, "", "full"], [67, 3, 1, "", "full_like"], [67, 3, 1, "", "function_supported_dtypes"], [67, 3, 1, "", "function_unsupported_dtypes"], [67, 3, 1, "", "gelu"], [67, 3, 1, "", "get_all_arrays_in_memory"], [67, 3, 1, "", "get_all_ivy_arrays_on_dev"], [67, 3, 1, "", "get_min_base"], [67, 3, 1, "", "get_min_denominator"], [67, 3, 1, "", "get_num_dims"], [67, 3, 1, "", "get_referrers_recursive"], [67, 3, 1, "", "gpu_is_available"], [67, 3, 1, "", "handle_nestable"], [67, 3, 1, "", "handle_out_argument"], [67, 3, 1, "", "iinfo"], [67, 3, 1, "", "indices_where"], [67, 3, 1, "", "infer_device"], [67, 3, 1, "", "infer_dtype"], [67, 3, 1, "", "inplace_arrays_supported"], [67, 3, 1, "", "inplace_decrement"], [67, 3, 1, "", "inplace_increment"], [67, 3, 1, "", "inplace_variables_supported"], [67, 3, 1, "", "inputs_to_native_arrays"], [67, 3, 1, "", "inv"], [67, 3, 1, "", "invalid_dtype"], [67, 3, 1, "", "is_float_dtype"], [67, 3, 1, "", "is_int_dtype"], [67, 3, 1, "", "is_ivy_container"], [67, 3, 1, "", "leaky_relu"], [67, 3, 1, "", "linear"], [67, 3, 1, "", "linspace"], [67, 3, 1, "", "logspace"], [67, 3, 1, "", "lstm_update"], [67, 3, 1, "", "match_kwargs"], [67, 3, 1, "", "matrix_power"], [67, 3, 1, "", "matrix_rank"], [67, 3, 1, "", "matrix_transpose"], [67, 3, 1, "", "meshgrid"], [67, 3, 1, "", "multi_head_attention"], [67, 3, 1, "", "multinomial"], [67, 3, 1, "", "multiprocessing"], [67, 3, 1, "", "native_array"], [67, 3, 1, "", "nonzero"], [67, 3, 1, "", "num_arrays_in_memory"], [67, 3, 1, "", "num_cpu_cores"], [67, 3, 1, "", "num_gpus"], [67, 3, 1, "", "num_ivy_arrays_on_dev"], [67, 3, 1, "", "one_hot"], [67, 3, 1, "", "ones"], [67, 3, 1, "", "ones_like"], [67, 3, 1, "", "outer"], [67, 3, 1, "", "outputs_to_ivy_arrays"], [67, 3, 1, "", "percent_used_mem_on_dev"], [67, 3, 1, "", "pinv"], [67, 3, 1, "", "print_all_arrays_in_memory"], [67, 3, 1, "", "print_all_ivy_arrays_on_dev"], [67, 3, 1, "", "promote_types"], [67, 3, 1, "", "qr"], [67, 3, 1, "", "queue_timeout"], [67, 3, 1, "", "randint"], [67, 3, 1, "", "random_normal"], [67, 3, 1, "", "relu"], [67, 3, 1, "", "result_type"], [67, 3, 1, "", "scaled_dot_product_attention"], [67, 3, 1, "", "scatter_flat"], [67, 3, 1, "", "scatter_nd"], [67, 3, 1, "", "seed"], [67, 3, 1, "", "set_default_device"], [67, 3, 1, "", "set_default_dtype"], [67, 3, 1, "", "set_default_float_dtype"], [67, 3, 1, "", "set_default_int_dtype"], [67, 3, 1, "", "set_min_base"], [67, 3, 1, "", "set_min_denominator"], [67, 3, 1, "", "set_queue_timeout"], [67, 3, 1, "", "set_split_factor"], [67, 3, 1, "", "set_tmp_dir"], [67, 3, 1, "", "set_with_grads"], [67, 3, 1, "", "shape_to_tuple"], [67, 3, 1, "", "sigmoid"], [67, 3, 1, "", "slogdet"], [67, 3, 1, "", "softmax"], [67, 3, 1, "", "softplus"], [67, 3, 1, "", "solve"], [67, 3, 1, "", "split_factor"], [67, 3, 1, "", "split_func_call"], [67, 3, 1, "", "stable_divide"], [67, 3, 1, "", "stable_pow"], [67, 3, 1, "", "static_abs"], [67, 3, 1, "", "static_acos"], [67, 3, 1, "", "static_acosh"], [67, 3, 1, "", "static_adam_step"], [67, 3, 1, "", "static_all"], [67, 3, 1, "", "static_any"], [67, 3, 1, "", "static_arange"], [67, 3, 1, "", "static_arg_info"], [67, 3, 1, "", "static_arg_names"], [67, 3, 1, "", "static_argmax"], [67, 3, 1, "", "static_argmin"], [67, 3, 1, "", "static_array"], [67, 3, 1, "", "static_array_equal"], [67, 3, 1, "", "static_arrays_equal"], [67, 3, 1, "", "static_as_ivy_dev"], [67, 3, 1, "", "static_as_ivy_dtype"], [67, 3, 1, "", "static_as_native_dev"], [67, 3, 1, "", "static_as_native_dtype"], [67, 3, 1, "", "static_asarray"], [67, 3, 1, "", "static_asin"], [67, 3, 1, "", "static_asinh"], [67, 3, 1, "", "static_assert_supports_inplace"], [67, 3, 1, "", "static_astype"], [67, 3, 1, "", "static_atan"], [67, 3, 1, "", "static_atan2"], [67, 3, 1, "", "static_atanh"], [67, 3, 1, "", "static_bitwise_and"], [67, 3, 1, "", "static_bitwise_invert"], [67, 3, 1, "", "static_bitwise_left_shift"], [67, 3, 1, "", "static_bitwise_or"], [67, 3, 1, "", "static_bitwise_right_shift"], [67, 3, 1, "", "static_bitwise_xor"], [67, 3, 1, "", "static_broadcast_arrays"], [67, 3, 1, "", "static_broadcast_to"], [67, 3, 1, "", "static_cache_fn"], [67, 3, 1, "", "static_can_cast"], [67, 3, 1, "", "static_ceil"], [67, 3, 1, "", "static_cholesky"], [67, 3, 1, "", "static_clear_mem_on_dev"], [67, 3, 1, "", "static_clip_matrix_norm"], [67, 3, 1, "", "static_clip_vector_norm"], [67, 3, 1, "", "static_closest_valid_dtype"], [67, 3, 1, "", "static_concat"], [67, 3, 1, "", "static_constant_pad"], [67, 3, 1, "", "static_container_types"], [67, 3, 1, "", "static_conv1d"], [67, 3, 1, "", "static_conv1d_transpose"], [67, 3, 1, "", "static_conv2d"], [67, 3, 1, "", "static_conv2d_transpose"], [67, 3, 1, "", "static_conv3d"], [67, 3, 1, "", "static_conv3d_transpose"], [67, 3, 1, "", "static_copy_array"], [67, 3, 1, "", "static_cos"], [67, 3, 1, "", "static_cosh"], [67, 3, 1, "", "static_cross"], [67, 3, 1, "", "static_cumprod"], [67, 3, 1, "", "static_cumsum"], [67, 3, 1, "", "static_current_backend"], [67, 3, 1, "", "static_current_backend_str"], [67, 3, 1, "", "static_default"], [67, 3, 1, "", "static_default_device"], [67, 3, 1, "", "static_default_dtype"], [67, 3, 1, "", "static_default_float_dtype"], [67, 3, 1, "", "static_default_int_dtype"], [67, 3, 1, "", "static_depthwise_conv2d"], [67, 3, 1, "", "static_det"], [67, 3, 1, "", "static_dev"], [67, 3, 1, "", "static_dev_clone"], [67, 3, 1, "", "static_dev_clone_array"], [67, 3, 1, "", "static_dev_clone_iter"], [67, 3, 1, "", "static_dev_clone_nest"], [67, 3, 1, "", "static_dev_dist"], [67, 3, 1, "", "static_dev_dist_array"], [67, 3, 1, "", "static_dev_dist_iter"], [67, 3, 1, "", "static_dev_dist_nest"], [67, 3, 1, "", "static_dev_unify"], [67, 3, 1, "", "static_dev_unify_array"], [67, 3, 1, "", "static_dev_unify_iter"], [67, 3, 1, "", "static_dev_unify_nest"], [67, 3, 1, "", "static_dev_util"], [67, 3, 1, "", "static_diagonal"], [67, 3, 1, "", "static_dropout"], [67, 3, 1, "", "static_dtype"], [67, 3, 1, "", "static_dtype_bits"], [67, 3, 1, "", "static_eigh"], [67, 3, 1, "", "static_eigvalsh"], [67, 3, 1, "", "static_einops_rearrange"], [67, 3, 1, "", "static_einops_reduce"], [67, 3, 1, "", "static_einops_repeat"], [67, 3, 1, "", "static_einsum"], [67, 3, 1, "", "static_empty"], [67, 3, 1, "", "static_empty_like"], [67, 3, 1, "", "static_equal"], [67, 3, 1, "", "static_erf"], [67, 3, 1, "", "static_execute_with_gradients"], [67, 3, 1, "", "static_exists"], [67, 3, 1, "", "static_exp"], [67, 3, 1, "", "static_expand_dims"], [67, 3, 1, "", "static_expm1"], [67, 3, 1, "", "static_eye"], [67, 3, 1, "", "static_finfo"], [67, 3, 1, "", "static_flip"], [67, 3, 1, "", "static_floor"], [67, 3, 1, "", "static_floor_divide"], [67, 3, 1, "", "static_floormod"], [67, 3, 1, "", "static_fourier_encode"], [67, 3, 1, "", "static_from_dlpack"], [67, 3, 1, "", "static_full"], [67, 3, 1, "", "static_full_like"], [67, 3, 1, "", "static_function_supported_dtypes"], [67, 3, 1, "", "static_function_unsupported_dtypes"], [67, 3, 1, "", "static_gather"], [67, 3, 1, "", "static_gather_nd"], [67, 3, 1, "", "static_gelu"], [67, 3, 1, "", "static_get_all_arrays_in_memory"], [67, 3, 1, "", "static_get_all_ivy_arrays_on_dev"], [67, 3, 1, "", "static_get_min_base"], [67, 3, 1, "", "static_get_min_denominator"], [67, 3, 1, "", "static_get_num_dims"], [67, 3, 1, "", "static_get_referrers_recursive"], [67, 3, 1, "", "static_gpu_is_available"], [67, 3, 1, "", "static_greater"], [67, 3, 1, "", "static_greater_equal"], [67, 3, 1, "", "static_handle_nestable"], [67, 3, 1, "", "static_handle_out_argument"], [67, 3, 1, "", "static_has_nans"], [67, 3, 1, "", "static_iinfo"], [67, 3, 1, "", "static_indices_where"], [67, 3, 1, "", "static_infer_device"], [67, 3, 1, "", "static_infer_dtype"], [67, 3, 1, "", "static_inplace_arrays_supported"], [67, 3, 1, "", "static_inplace_decrement"], [67, 3, 1, "", "static_inplace_increment"], [67, 3, 1, "", "static_inplace_update"], [67, 3, 1, "", "static_inplace_variables_supported"], [67, 3, 1, "", "static_inputs_to_native_arrays"], [67, 3, 1, "", "static_inv"], [67, 3, 1, "", "static_invalid_dtype"], [67, 3, 1, "", "static_is_array"], [67, 3, 1, "", "static_is_float_dtype"], [67, 3, 1, "", "static_is_int_dtype"], [67, 3, 1, "", "static_is_ivy_array"], [67, 3, 1, "", "static_is_ivy_container"], [67, 3, 1, "", "static_is_native_array"], [67, 3, 1, "", "static_is_variable"], [67, 3, 1, "", "static_isfinite"], [67, 3, 1, "", "static_isinf"], [67, 3, 1, "", "static_isnan"], [67, 3, 1, "", "static_layer_norm"], [67, 3, 1, "", "static_leaky_relu"], [67, 3, 1, "", "static_less"], [67, 3, 1, "", "static_less_equal"], [67, 3, 1, "", "static_linear"], [67, 3, 1, "", "static_linspace"], [67, 3, 1, "", "static_log"], [67, 3, 1, "", "static_log10"], [67, 3, 1, "", "static_log1p"], [67, 3, 1, "", "static_log2"], [67, 3, 1, "", "static_logaddexp"], [67, 3, 1, "", "static_logical_and"], [67, 3, 1, "", "static_logical_not"], [67, 3, 1, "", "static_logical_or"], [67, 3, 1, "", "static_logical_xor"], [67, 3, 1, "", "static_logspace"], [67, 3, 1, "", "static_lstm_update"], [67, 3, 1, "", "static_match_kwargs"], [67, 3, 1, "", "static_matmul"], [67, 3, 1, "", "static_matrix_norm"], [67, 3, 1, "", "static_matrix_power"], [67, 3, 1, "", "static_matrix_rank"], [67, 3, 1, "", "static_matrix_transpose"], [67, 3, 1, "", "static_max"], [67, 3, 1, "", "static_maximum"], [67, 3, 1, "", "static_mean"], [67, 3, 1, "", "static_meshgrid"], [67, 3, 1, "", "static_min"], [67, 3, 1, "", "static_minimum"], [67, 3, 1, "", "static_multi_head_attention"], [67, 3, 1, "", "static_multinomial"], [67, 3, 1, "", "static_multiprocessing"], [67, 3, 1, "", "static_native_array"], [67, 3, 1, "", "static_negative"], [67, 3, 1, "", "static_nonzero"], [67, 3, 1, "", "static_not_equal"], [67, 3, 1, "", "static_num_arrays_in_memory"], [67, 3, 1, "", "static_num_cpu_cores"], [67, 3, 1, "", "static_num_gpus"], [67, 3, 1, "", "static_num_ivy_arrays_on_dev"], [67, 3, 1, "", "static_one_hot"], [67, 3, 1, "", "static_ones"], [67, 3, 1, "", "static_ones_like"], [67, 3, 1, "", "static_outer"], [67, 3, 1, "", "static_outputs_to_ivy_arrays"], [67, 3, 1, "", "static_percent_used_mem_on_dev"], [67, 3, 1, "", "static_permute_dims"], [67, 3, 1, "", "static_pinv"], [67, 3, 1, "", "static_positive"], [67, 3, 1, "", "static_pow"], [67, 3, 1, "", "static_print_all_arrays_in_memory"], [67, 3, 1, "", "static_print_all_ivy_arrays_on_dev"], [67, 3, 1, "", "static_prod"], [67, 3, 1, "", "static_promote_types"], [67, 3, 1, "", "static_qr"], [67, 3, 1, "", "static_queue_timeout"], [67, 3, 1, "", "static_random_normal"], [67, 3, 1, "", "static_relu"], [67, 3, 1, "", "static_remainder"], [67, 3, 1, "", "static_repeat"], [67, 3, 1, "", "static_reshape"], [67, 3, 1, "", "static_result_type"], [67, 3, 1, "", "static_round"], [67, 3, 1, "", "static_scaled_dot_product_attention"], [67, 3, 1, "", "static_scatter_flat"], [67, 3, 1, "", "static_scatter_nd"], [67, 3, 1, "", "static_seed"], [67, 3, 1, "", "static_set_default_device"], [67, 3, 1, "", "static_set_default_dtype"], [67, 3, 1, "", "static_set_default_float_dtype"], [67, 3, 1, "", "static_set_default_int_dtype"], [67, 3, 1, "", "static_set_min_base"], [67, 3, 1, "", "static_set_min_denominator"], [67, 3, 1, "", "static_set_queue_timeout"], [67, 3, 1, "", "static_set_split_factor"], [67, 3, 1, "", "static_set_tmp_dir"], [67, 3, 1, "", "static_set_with_grads"], [67, 3, 1, "", "static_shape"], [67, 3, 1, "", "static_shape_to_tuple"], [67, 3, 1, "", "static_shuffle"], [67, 3, 1, "", "static_sigmoid"], [67, 3, 1, "", "static_sign"], [67, 3, 1, "", "static_sin"], [67, 3, 1, "", "static_sinh"], [67, 3, 1, "", "static_slogdet"], [67, 3, 1, "", "static_softmax"], [67, 3, 1, "", "static_softplus"], [67, 3, 1, "", "static_solve"], [67, 3, 1, "", "static_split"], [67, 3, 1, "", "static_split_factor"], [67, 3, 1, "", "static_split_func_call"], [67, 3, 1, "", "static_sqrt"], [67, 3, 1, "", "static_square"], [67, 3, 1, "", "static_squeeze"], [67, 3, 1, "", "static_stable_divide"], [67, 3, 1, "", "static_stable_pow"], [67, 3, 1, "", "static_stack"], [67, 3, 1, "", "static_std"], [67, 3, 1, "", "static_stop_gradient"], [67, 3, 1, "", "static_sum"], [67, 3, 1, "", "static_supports_inplace"], [67, 3, 1, "", "static_svd"], [67, 3, 1, "", "static_svdvals"], [67, 3, 1, "", "static_swapaxes"], [67, 3, 1, "", "static_tanh"], [67, 3, 1, "", "static_tensordot"], [67, 3, 1, "", "static_tile"], [67, 3, 1, "", "static_tmp_dir"], [67, 3, 1, "", "static_to_device"], [67, 3, 1, "", "static_to_list"], [67, 3, 1, "", "static_to_native_arrays_and_back"], [67, 3, 1, "", "static_to_numpy"], [67, 3, 1, "", "static_to_scalar"], [67, 3, 1, "", "static_total_mem_on_dev"], [67, 3, 1, "", "static_tpu_is_available"], [67, 3, 1, "", "static_trace"], [67, 3, 1, "", "static_tril"], [67, 3, 1, "", "static_triu"], [67, 3, 1, "", "static_trunc"], [67, 3, 1, "", "static_try_else_none"], [67, 3, 1, "", "static_type_promote_arrays"], [67, 3, 1, "", "static_unique_all"], [67, 3, 1, "", "static_unique_counts"], [67, 3, 1, "", "static_unique_inverse"], [67, 3, 1, "", "static_unique_values"], [67, 3, 1, "", "static_unset_default_device"], [67, 3, 1, "", "static_unset_default_dtype"], [67, 3, 1, "", "static_unset_default_float_dtype"], [67, 3, 1, "", "static_unset_default_int_dtype"], [67, 3, 1, "", "static_unset_with_grads"], [67, 3, 1, "", "static_unstack"], [67, 3, 1, "", "static_used_mem_on_dev"], [67, 3, 1, "", "static_valid_dtype"], [67, 3, 1, "", "static_value_is_nan"], [67, 3, 1, "", "static_var"], [67, 3, 1, "", "static_variable"], [67, 3, 1, "", "static_variable_data"], [67, 3, 1, "", "static_vecdot"], [67, 3, 1, "", "static_vector_norm"], [67, 3, 1, "", "static_vector_to_skew_symmetric_matrix"], [67, 3, 1, "", "static_where"], [67, 3, 1, "", "static_with_grads"], [67, 3, 1, "", "static_zero_pad"], [67, 3, 1, "", "static_zeros"], [67, 3, 1, "", "static_zeros_like"], [67, 3, 1, "", "stop_gradient"], [67, 3, 1, "", "supports_inplace"], [67, 3, 1, "", "svd"], [67, 3, 1, "", "svdvals"], [67, 3, 1, "", "tensordot"], [67, 3, 1, "", "tmp_dir"], [67, 3, 1, "", "to_native_arrays_and_back"], [67, 3, 1, "", "to_scalar"], [67, 3, 1, "", "total_mem_on_dev"], [67, 3, 1, "", "tpu_is_available"], [67, 3, 1, "", "trace"], [67, 3, 1, "", "tril"], [67, 3, 1, "", "triu"], [67, 3, 1, "", "try_else_none"], [67, 3, 1, "", "type_promote_arrays"], [67, 3, 1, "", "unique_all"], [67, 3, 1, "", "unique_counts"], [67, 3, 1, "", "unique_inverse"], [67, 3, 1, "", "unique_values"], [67, 3, 1, "", "unset_default_device"], [67, 3, 1, "", "unset_default_dtype"], [67, 3, 1, "", "unset_default_float_dtype"], [67, 3, 1, "", "unset_default_int_dtype"], [67, 3, 1, "", "unset_with_grads"], [67, 3, 1, "", "used_mem_on_dev"], [67, 3, 1, "", "valid_dtype"], [67, 3, 1, "", "value_is_nan"], [67, 3, 1, "", "variable"], [67, 3, 1, "", "variable_data"], [67, 3, 1, "", "vecdot"], [67, 3, 1, "", "vector_to_skew_symmetric_matrix"], [67, 3, 1, "", "where"], [67, 3, 1, "", "with_grads"], [67, 3, 1, "", "zeros"], [67, 3, 1, "", "zeros_like"]], "ivy.container.container.MultiDevContainer": [[68, 3, 1, "", "__init__"], [68, 3, 1, "", "at_dev"], [68, 3, 1, "", "at_devs"]], "ivy.container.container_methods": [[332, 2, 1, "", "erf"], [422, 2, 1, "", "sin"], [581, 2, 1, "", "static_clip"]], "ivy.container.creation": [[70, 1, 1, "", "ContainerWithCreation"]], "ivy.container.data_types": [[72, 1, 1, "", "ContainerWithDataTypes"]], "ivy.container.device": [[74, 1, 1, "", "ContainerWithDevice"]], "ivy.container.elementwise": [[76, 1, 1, "", "ContainerWithElementwise"]], "ivy.container.elementwise.ContainerWithElementwise": [[76, 3, 1, "", "abs"], [76, 3, 1, "", "acos"], [76, 3, 1, "", "acosh"], [76, 3, 1, "", "add"], [76, 3, 1, "", "asin"], [76, 3, 1, "", "asinh"], [76, 3, 1, "", "atan"], [76, 3, 1, "", "atan2"], [76, 3, 1, "", "atanh"], [76, 3, 1, "", "bitwise_and"], [76, 3, 1, "", "bitwise_invert"], [76, 3, 1, "", "bitwise_left_shift"], [76, 3, 1, "", "bitwise_or"], [76, 3, 1, "", "bitwise_right_shift"], [76, 3, 1, "", "bitwise_xor"], [76, 3, 1, "", "ceil"], [76, 3, 1, "", "cos"], [76, 3, 1, "", "cosh"], [76, 3, 1, "", "divide"], [76, 3, 1, "", "equal"], [76, 3, 1, "", "erf"], [76, 3, 1, "", "exp"], [76, 3, 1, "", "expm1"], [76, 3, 1, "", "floor"], [76, 3, 1, "", "floor_divide"], [76, 3, 1, "", "greater"], [76, 3, 1, "", "greater_equal"], [76, 3, 1, "", "isfinite"], [76, 3, 1, "", "isinf"], [76, 3, 1, "", "isnan"], [76, 3, 1, "", "less"], [76, 3, 1, "", "less_equal"], [76, 3, 1, "", "log"], [76, 3, 1, "", "log10"], [76, 3, 1, "", "log1p"], [76, 3, 1, "", "log2"], [76, 3, 1, "", "logaddexp"], [76, 3, 1, "", "logical_and"], [76, 3, 1, "", "logical_not"], [76, 3, 1, "", "logical_or"], [76, 3, 1, "", "logical_xor"], [76, 3, 1, "", "multiply"], [76, 3, 1, "", "negative"], [76, 3, 1, "", "not_equal"], [76, 3, 1, "", "positive"], [76, 3, 1, "", "pow"], [76, 3, 1, "", "remainder"], [76, 3, 1, "", "round"], [76, 3, 1, "", "sign"], [76, 3, 1, "", "sin"], [76, 3, 1, "", "sinh"], [76, 3, 1, "", "sqrt"], [76, 3, 1, "", "square"], [76, 3, 1, "", "static_add"], [76, 3, 1, "", "static_divide"], [76, 3, 1, "", "static_multiply"], [76, 3, 1, "", "static_subtract"], [76, 3, 1, "", "static_tan"], [76, 3, 1, "", "subtract"], [76, 3, 1, "", "tan"], [76, 3, 1, "", "tanh"], [76, 3, 1, "", "trunc"]], "ivy.container.general": [[78, 1, 1, "", "ContainerWithGeneral"]], "ivy.container.general.ContainerWithGeneral": [[78, 3, 1, "", "all_equal"], [78, 3, 1, "", "clip_vector_norm"], [78, 3, 1, "", "static_all_equal"]], "ivy.container.gradients": [[80, 1, 1, "", "ContainerWithGradients"]], "ivy.container.gradients.ContainerWithGradients": [[80, 3, 1, "", "adam_update"], [80, 3, 1, "", "gradient_descent_update"], [80, 3, 1, "", "lamb_update"], [80, 3, 1, "", "lars_update"], [80, 3, 1, "", "optimizer_update"], [80, 3, 1, "", "static_adam_update"], [80, 3, 1, "", "static_gradient_descent_update"], [80, 3, 1, "", "static_lamb_update"], [80, 3, 1, "", "static_lars_update"], [80, 3, 1, "", "static_optimizer_update"]], "ivy.container.image": [[82, 1, 1, "", "ContainerWithImage"]], "ivy.container.layers": [[84, 1, 1, "", "ContainerWithLayers"]], "ivy.container.linear_algebra": [[86, 1, 1, "", "ContainerWithLinearAlgebra"]], "ivy.container.linear_algebra.ContainerWithLinearAlgebra": [[86, 3, 1, "", "matmul"]], "ivy.container.losses": [[88, 1, 1, "", "ContainerWithLosses"]], "ivy.container.losses.ContainerWithLosses": [[88, 3, 1, "", "binary_cross_entropy"], [88, 3, 1, "", "cross_entropy"], [88, 3, 1, "", "sparse_cross_entropy"], [88, 3, 1, "", "static_binary_cross_entropy"], [88, 3, 1, "", "static_cross_entropy"], [88, 3, 1, "", "static_sparse_cross_entropy"]], "ivy.container.manipulation": [[90, 1, 1, "", "ContainerWithManipulation"]], "ivy.container.manipulation.ContainerWithManipulation": [[90, 3, 1, "", "clip"], [90, 3, 1, "", "concat"], [90, 3, 1, "", "constant_pad"], [90, 3, 1, "", "expand_dims"], [90, 3, 1, "", "flip"], [90, 3, 1, "", "permute_dims"], [90, 3, 1, "", "repeat"], [90, 3, 1, "", "reshape"], [90, 3, 1, "", "roll"], [90, 3, 1, "", "squeeze"], [90, 3, 1, "", "stack"], [90, 3, 1, "", "static_clip"], [90, 3, 1, "", "static_roll"], [90, 3, 1, "", "swapaxes"], [90, 3, 1, "", "tile"], [90, 3, 1, "", "zero_pad"]], "ivy.container.norms": [[92, 1, 1, "", "ContainerWithNorms"]], "ivy.container.norms.ContainerWithNorms": [[92, 3, 1, "", "layer_norm"]], "ivy.container.random": [[94, 1, 1, "", "ContainerWithRandom"]], "ivy.container.random.ContainerWithRandom": [[94, 3, 1, "", "random_uniform"], [94, 3, 1, "", "static_randint"], [94, 3, 1, "", "static_random_uniform"]], "ivy.container.searching": [[96, 1, 1, "", "ContainerWithSearching"]], "ivy.container.set": [[98, 1, 1, "", "ContainerWithSet"]], "ivy.container.sorting": [[100, 1, 1, "", "ContainerWithSorting"]], "ivy.container.sorting.ContainerWithSorting": [[100, 3, 1, "", "argsort"], [100, 3, 1, "", "sort"], [100, 3, 1, "", "static_argsort"], [100, 3, 1, "", "static_sort"]], "ivy.container.statistical": [[102, 1, 1, "", "ContainerWithStatistical"]], "ivy.container.statistical.ContainerWithStatistical": [[102, 3, 1, "", "einsum"], [102, 3, 1, "", "max"], [102, 3, 1, "", "mean"], [102, 3, 1, "", "min"], [102, 3, 1, "", "prod"], [102, 3, 1, "", "std"], [102, 3, 1, "", "sum"], [102, 3, 1, "", "var"]], "ivy.container.utility": [[104, 1, 1, "", "ContainerWithUtility"]], "ivy.container.utility.ContainerWithUtility": [[104, 3, 1, "", "all"], [104, 3, 1, "", "any"]], "ivy.container.wrapping": [[106, 2, 1, "", "add_ivy_container_instance_methods"]], "ivy.func_wrapper": [[147, 2, 1, "", "handle_nestable"], [148, 2, 1, "", "handle_out_argument"], [149, 2, 1, "", "infer_device"], [150, 2, 1, "", "infer_dtype"], [151, 2, 1, "", "inputs_to_ivy_arrays"], [152, 2, 1, "", "inputs_to_native_arrays"], [153, 2, 1, "", "outputs_to_ivy_arrays"], [154, 2, 1, "", "to_native_arrays_and_back"]], "ivy.functional.ivy": [[156, 0, 0, "-", "activations"], [164, 0, 0, "-", "compilation"], [166, 0, 0, "-", "constants"], [167, 0, 0, "-", "creation"], [186, 0, 0, "-", "data_type"], [219, 0, 0, "-", "device"], [269, 0, 0, "-", "elementwise"], [445, 0, 0, "-", "general"], [511, 0, 0, "-", "gradients"], [527, 0, 0, "-", "layers"], [540, 0, 0, "-", "linear_algebra"], [567, 0, 0, "-", "losses"], [577, 0, 0, "-", "manipulation"], [622, 0, 0, "-", "meta"], [626, 0, 0, "-", "nest"], [644, 0, 0, "-", "norms"], [648, 0, 0, "-", "random"], [655, 0, 0, "-", "searching"], [660, 0, 0, "-", "set"], [665, 0, 0, "-", "sorting"], [672, 0, 0, "-", "statistical"], [697, 0, 0, "-", "utility"]], "ivy.functional.ivy.activations": [[157, 2, 1, "", "gelu"], [158, 2, 1, "", "leaky_relu"], [159, 2, 1, "", "relu"], [160, 2, 1, "", "sigmoid"], [161, 2, 1, "", "softmax"], [162, 2, 1, "", "softplus"], [163, 2, 1, "", "tanh"]], "ivy.functional.ivy.compilation": [[165, 2, 1, "", "compile"]], "ivy.functional.ivy.constants": [[166, 5, 1, "", "e"], [166, 5, 1, "", "inf"], [166, 5, 1, "", "nan"], [166, 5, 1, "", "newaxis"], [166, 5, 1, "", "pi"]], "ivy.functional.ivy.creation": [[168, 2, 1, "", "arange"], [167, 2, 1, "", "array"], [169, 2, 1, "", "asarray"], [170, 2, 1, "", "empty"], [171, 2, 1, "", "empty_like"], [172, 2, 1, "", "eye"], [173, 2, 1, "", "from_dlpack"], [174, 2, 1, "", "full"], [175, 2, 1, "", "full_like"], [176, 2, 1, "", "linspace"], [177, 2, 1, "", "logspace"], [178, 2, 1, "", "meshgrid"], [179, 2, 1, "", "native_array"], [180, 2, 1, "", "ones"], [181, 2, 1, "", "ones_like"], [182, 2, 1, "", "tril"], [183, 2, 1, "", "triu"], [184, 2, 1, "", "zeros"], [185, 2, 1, "", "zeros_like"]], "ivy.functional.ivy.data_type": [[186, 1, 1, "", "DefaultDtype"], [186, 1, 1, "", "DefaultFloatDtype"], [186, 1, 1, "", "DefaultIntDtype"], [190, 2, 1, "", "as_ivy_dtype"], [191, 2, 1, "", "as_native_dtype"], [192, 2, 1, "", "astype"], [193, 2, 1, "", "broadcast_arrays"], [194, 2, 1, "", "broadcast_to"], [195, 2, 1, "", "can_cast"], [196, 2, 1, "", "closest_valid_dtype"], [197, 2, 1, "", "default_dtype"], [198, 2, 1, "", "default_float_dtype"], [199, 2, 1, "", "default_int_dtype"], [200, 2, 1, "", "dtype"], [201, 2, 1, "", "dtype_bits"], [202, 2, 1, "", "finfo"], [203, 2, 1, "", "function_supported_dtypes"], [204, 2, 1, "", "function_unsupported_dtypes"], [205, 2, 1, "", "iinfo"], [206, 2, 1, "", "invalid_dtype"], [207, 2, 1, "", "is_float_dtype"], [208, 2, 1, "", "is_int_dtype"], [209, 2, 1, "", "promote_types"], [210, 2, 1, "", "result_type"], [211, 2, 1, "", "set_default_dtype"], [212, 2, 1, "", "set_default_float_dtype"], [213, 2, 1, "", "set_default_int_dtype"], [214, 2, 1, "", "type_promote_arrays"], [215, 2, 1, "", "unset_default_dtype"], [216, 2, 1, "", "unset_default_float_dtype"], [217, 2, 1, "", "unset_default_int_dtype"], [218, 2, 1, "", "valid_dtype"]], "ivy.functional.ivy.data_type.DefaultDtype": [[186, 3, 1, "", "__init__"]], "ivy.functional.ivy.data_type.DefaultFloatDtype": [[186, 3, 1, "", "__init__"]], "ivy.functional.ivy.data_type.DefaultIntDtype": [[186, 3, 1, "", "__init__"]], "ivy.functional.ivy.device": [[219, 1, 1, "", "DefaultDevice"], [221, 1, 1, "", "DevClonedItem"], [222, 1, 1, "", "DevClonedIter"], [223, 1, 1, "", "DevClonedNest"], [224, 1, 1, "", "DevDistItem"], [225, 1, 1, "", "DevDistIter"], [226, 1, 1, "", "DevDistNest"], [219, 1, 1, "", "DevManager"], [228, 1, 1, "", "DevMapper"], [229, 1, 1, "", "DevMapperMultiProc"], [219, 1, 1, "", "MultiDev"], [231, 1, 1, "", "MultiDevItem"], [232, 1, 1, "", "MultiDevIter"], [233, 1, 1, "", "MultiDevNest"], [234, 1, 1, "", "Profiler"], [235, 2, 1, "", "as_ivy_dev"], [236, 2, 1, "", "as_native_dev"], [237, 2, 1, "", "clear_mem_on_dev"], [238, 2, 1, "", "default_device"], [239, 2, 1, "", "dev"], [240, 2, 1, "", "dev_clone"], [241, 2, 1, "", "dev_clone_array"], [242, 2, 1, "", "dev_clone_iter"], [243, 2, 1, "", "dev_clone_nest"], [244, 2, 1, "", "dev_dist"], [245, 2, 1, "", "dev_dist_array"], [246, 2, 1, "", "dev_dist_iter"], [247, 2, 1, "", "dev_dist_nest"], [248, 2, 1, "", "dev_unify"], [249, 2, 1, "", "dev_unify_array"], [250, 2, 1, "", "dev_unify_iter"], [251, 2, 1, "", "dev_unify_nest"], [252, 2, 1, "", "dev_util"], [253, 2, 1, "", "get_all_ivy_arrays_on_dev"], [254, 2, 1, "", "gpu_is_available"], [255, 2, 1, "", "num_cpu_cores"], [256, 2, 1, "", "num_gpus"], [257, 2, 1, "", "num_ivy_arrays_on_dev"], [258, 2, 1, "", "percent_used_mem_on_dev"], [259, 2, 1, "", "print_all_ivy_arrays_on_dev"], [260, 2, 1, "", "set_default_device"], [261, 2, 1, "", "set_split_factor"], [262, 2, 1, "", "split_factor"], [263, 2, 1, "", "split_func_call"], [264, 2, 1, "", "to_device"], [265, 2, 1, "", "total_mem_on_dev"], [266, 2, 1, "", "tpu_is_available"], [267, 2, 1, "", "unset_default_device"], [268, 2, 1, "", "used_mem_on_dev"]], "ivy.functional.ivy.device.DefaultDevice": [[219, 3, 1, "", "__enter__"], [219, 3, 1, "", "__init__"]], "ivy.functional.ivy.device.DevManager": [[219, 3, 1, "", "__init__"], [219, 3, 1, "", "da_tune_step"], [219, 4, 1, "", "dim_size"], [219, 3, 1, "", "ds_tune_step"], [219, 3, 1, "", "map"], [219, 3, 1, "", "repeated_config_check"], [219, 4, 1, "", "tune_step"], [219, 4, 1, "", "tuned"]], "ivy.functional.ivy.device.DevMapper": [[228, 3, 1, "", "__init__"], [228, 3, 1, "", "map"]], "ivy.functional.ivy.device.DevMapperMultiProc": [[229, 3, 1, "", "__init__"]], "ivy.functional.ivy.device.MultiDev": [[219, 3, 1, "", "__init__"]], "ivy.functional.ivy.device.MultiDevItem": [[231, 3, 1, "", "__init__"], [231, 3, 1, "", "items"], [231, 3, 1, "", "keys"], [231, 4, 1, "", "shape"], [231, 3, 1, "", "values"]], "ivy.functional.ivy.device.MultiDevIter": [[232, 3, 1, "", "__init__"], [232, 3, 1, "", "at_dev"], [232, 3, 1, "", "at_devs"]], "ivy.functional.ivy.device.MultiDevNest": [[233, 3, 1, "", "__init__"], [233, 3, 1, "", "at_dev"]], "ivy.functional.ivy.device.Profiler": [[234, 3, 1, "", "__init__"], [234, 3, 1, "", "start"], [234, 3, 1, "", "stop"]], "ivy.functional.ivy.elementwise": [[272, 2, 1, "", "abs"], [273, 2, 1, "", "acos"], [323, 2, 1, "", "acosh"], [279, 2, 1, "", "add"], [284, 2, 1, "", "asin"], [287, 2, 1, "", "asinh"], [288, 2, 1, "", "atan"], [293, 2, 1, "", "atan2"], [441, 2, 1, "", "atanh"], [299, 2, 1, "", "bitwise_and"], [302, 2, 1, "", "bitwise_invert"], [305, 2, 1, "", "bitwise_left_shift"], [308, 2, 1, "", "bitwise_or"], [311, 2, 1, "", "bitwise_right_shift"], [314, 2, 1, "", "bitwise_xor"], [317, 2, 1, "", "ceil"], [318, 2, 1, "", "cos"], [321, 2, 1, "", "cosh"], [324, 2, 1, "", "divide"], [327, 2, 1, "", "equal"], [333, 2, 1, "", "erf"], [334, 2, 1, "", "exp"], [339, 2, 1, "", "expm1"], [340, 2, 1, "", "floor"], [345, 2, 1, "", "floor_divide"], [346, 2, 1, "", "greater"], [351, 2, 1, "", "greater_equal"], [354, 2, 1, "", "isfinite"], [357, 2, 1, "", "isinf"], [360, 2, 1, "", "isnan"], [363, 2, 1, "", "less"], [366, 2, 1, "", "less_equal"], [369, 2, 1, "", "log"], [372, 2, 1, "", "log10"], [375, 2, 1, "", "log1p"], [378, 2, 1, "", "log2"], [381, 2, 1, "", "logaddexp"], [384, 2, 1, "", "logical_and"], [387, 2, 1, "", "logical_not"], [390, 2, 1, "", "logical_or"], [393, 2, 1, "", "logical_xor"], [394, 2, 1, "", "maximum"], [395, 2, 1, "", "minimum"], [398, 2, 1, "", "multiply"], [401, 2, 1, "", "negative"], [404, 2, 1, "", "not_equal"], [407, 2, 1, "", "positive"], [410, 2, 1, "", "pow"], [413, 2, 1, "", "remainder"], [416, 2, 1, "", "round"], [419, 2, 1, "", "sign"], [423, 2, 1, "", "sin"], [426, 2, 1, "", "sinh"], [429, 2, 1, "", "sqrt"], [432, 2, 1, "", "square"], [435, 2, 1, "", "subtract"], [436, 2, 1, "", "tan"], [439, 2, 1, "", "tanh"], [444, 2, 1, "", "trunc"]], "ivy.functional.ivy.general": [[448, 2, 1, "", "all_equal"], [449, 2, 1, "", "arg_info"], [450, 2, 1, "", "arg_names"], [451, 2, 1, "", "array_equal"], [452, 2, 1, "", "arrays_equal"], [453, 2, 1, "", "assert_supports_inplace"], [454, 2, 1, "", "cache_fn"], [455, 2, 1, "", "clip_matrix_norm"], [456, 2, 1, "", "clip_vector_norm"], [457, 2, 1, "", "container_types"], [458, 2, 1, "", "copy_array"], [459, 2, 1, "", "cumprod"], [460, 2, 1, "", "cumsum"], [461, 2, 1, "", "current_backend_str"], [462, 2, 1, "", "default"], [463, 2, 1, "", "einops_rearrange"], [464, 2, 1, "", "einops_reduce"], [465, 2, 1, "", "einops_repeat"], [466, 2, 1, "", "exists"], [467, 2, 1, "", "floormod"], [468, 2, 1, "", "fourier_encode"], [469, 2, 1, "", "gather"], [470, 2, 1, "", "gather_nd"], [471, 2, 1, "", "get_all_arrays_in_memory"], [472, 2, 1, "", "get_min_base"], [473, 2, 1, "", "get_min_denominator"], [474, 2, 1, "", "get_num_dims"], [475, 2, 1, "", "get_referrers_recursive"], [476, 2, 1, "", "has_nans"], [477, 2, 1, "", "indices_where"], [478, 2, 1, "", "inplace_arrays_supported"], [479, 2, 1, "", "inplace_decrement"], [480, 2, 1, "", "inplace_increment"], [481, 2, 1, "", "inplace_update"], [482, 2, 1, "", "inplace_variables_supported"], [483, 2, 1, "", "is_array"], [484, 2, 1, "", "is_ivy_array"], [485, 2, 1, "", "is_ivy_container"], [486, 2, 1, "", "is_native_array"], [487, 2, 1, "", "match_kwargs"], [488, 2, 1, "", "multiprocessing"], [489, 2, 1, "", "num_arrays_in_memory"], [490, 2, 1, "", "one_hot"], [491, 2, 1, "", "print_all_arrays_in_memory"], [492, 2, 1, "", "queue_timeout"], [493, 2, 1, "", "scatter_flat"], [494, 2, 1, "", "scatter_nd"], [495, 2, 1, "", "set_min_base"], [496, 2, 1, "", "set_min_denominator"], [497, 2, 1, "", "set_queue_timeout"], [498, 2, 1, "", "set_tmp_dir"], [499, 2, 1, "", "shape"], [500, 2, 1, "", "shape_to_tuple"], [501, 2, 1, "", "stable_divide"], [502, 2, 1, "", "stable_pow"], [503, 2, 1, "", "supports_inplace"], [504, 2, 1, "", "tmp_dir"], [505, 2, 1, "", "to_list"], [506, 2, 1, "", "to_numpy"], [507, 2, 1, "", "to_scalar"], [508, 2, 1, "", "try_else_none"], [509, 2, 1, "", "unstack"], [510, 2, 1, "", "value_is_nan"]], "ivy.functional.ivy.gradients": [[511, 1, 1, "", "GradientTracking"], [513, 2, 1, "", "adam_step"], [514, 2, 1, "", "adam_update"], [515, 2, 1, "", "execute_with_gradients"], [516, 2, 1, "", "gradient_descent_update"], [517, 2, 1, "", "is_variable"], [518, 2, 1, "", "lamb_update"], [519, 2, 1, "", "lars_update"], [520, 2, 1, "", "optimizer_update"], [521, 2, 1, "", "set_with_grads"], [522, 2, 1, "", "stop_gradient"], [523, 2, 1, "", "unset_with_grads"], [524, 2, 1, "", "variable"], [525, 2, 1, "", "variable_data"], [526, 2, 1, "", "with_grads"]], "ivy.functional.ivy.gradients.GradientTracking": [[511, 3, 1, "", "__init__"]], "ivy.functional.ivy.layers": [[528, 2, 1, "", "conv1d"], [529, 2, 1, "", "conv1d_transpose"], [530, 2, 1, "", "conv2d"], [531, 2, 1, "", "conv2d_transpose"], [532, 2, 1, "", "conv3d"], [533, 2, 1, "", "conv3d_transpose"], [534, 2, 1, "", "depthwise_conv2d"], [535, 2, 1, "", "dropout"], [536, 2, 1, "", "linear"], [537, 2, 1, "", "lstm_update"], [538, 2, 1, "", "multi_head_attention"], [539, 2, 1, "", "scaled_dot_product_attention"]], "ivy.functional.ivy.linear_algebra": [[541, 2, 1, "", "cholesky"], [542, 2, 1, "", "cross"], [543, 2, 1, "", "det"], [544, 2, 1, "", "diagonal"], [545, 2, 1, "", "eigh"], [546, 2, 1, "", "eigvalsh"], [547, 2, 1, "", "inv"], [550, 2, 1, "", "matmul"], [551, 2, 1, "", "matrix_norm"], [552, 2, 1, "", "matrix_power"], [553, 2, 1, "", "matrix_rank"], [554, 2, 1, "", "matrix_transpose"], [555, 2, 1, "", "outer"], [556, 2, 1, "", "pinv"], [557, 2, 1, "", "qr"], [558, 2, 1, "", "slogdet"], [559, 2, 1, "", "solve"], [560, 2, 1, "", "svd"], [561, 2, 1, "", "svdvals"], [562, 2, 1, "", "tensordot"], [563, 2, 1, "", "trace"], [564, 2, 1, "", "vecdot"], [565, 2, 1, "", "vector_norm"], [566, 2, 1, "", "vector_to_skew_symmetric_matrix"]], "ivy.functional.ivy.losses": [[570, 2, 1, "", "binary_cross_entropy"], [573, 2, 1, "", "cross_entropy"], [576, 2, 1, "", "sparse_cross_entropy"]], "ivy.functional.ivy.manipulation": [[580, 2, 1, "", "clip"], [584, 2, 1, "", "concat"], [587, 2, 1, "", "constant_pad"], [590, 2, 1, "", "expand_dims"], [593, 2, 1, "", "flip"], [596, 2, 1, "", "permute_dims"], [599, 2, 1, "", "repeat"], [602, 2, 1, "", "reshape"], [605, 2, 1, "", "roll"], [606, 2, 1, "", "split"], [609, 2, 1, "", "squeeze"], [612, 2, 1, "", "stack"], [615, 2, 1, "", "swapaxes"], [618, 2, 1, "", "tile"], [621, 2, 1, "", "zero_pad"]], "ivy.functional.ivy.meta": [[623, 2, 1, "", "fomaml_step"], [624, 2, 1, "", "maml_step"], [625, 2, 1, "", "reptile_step"]], "ivy.functional.ivy.nest": [[627, 2, 1, "", "all_nested_indices"], [628, 2, 1, "", "copy_nest"], [629, 2, 1, "", "index_nest"], [630, 2, 1, "", "insert_into_nest_at_index"], [631, 2, 1, "", "insert_into_nest_at_indices"], [632, 2, 1, "", "map"], [633, 2, 1, "", "map_nest_at_index"], [634, 2, 1, "", "map_nest_at_indices"], [635, 2, 1, "", "multi_index_nest"], [636, 2, 1, "", "nested_any"], [637, 2, 1, "", "nested_indices_where"], [638, 2, 1, "", "nested_map"], [639, 2, 1, "", "nested_multi_map"], [640, 2, 1, "", "prune_nest_at_index"], [641, 2, 1, "", "prune_nest_at_indices"], [642, 2, 1, "", "set_nest_at_index"], [643, 2, 1, "", "set_nest_at_indices"]], "ivy.functional.ivy.norms": [[647, 2, 1, "", "layer_norm"]], "ivy.functional.ivy.random": [[649, 2, 1, "", "multinomial"], [650, 2, 1, "", "randint"], [651, 2, 1, "", "random_normal"], [652, 2, 1, "", "random_uniform"], [653, 2, 1, "", "seed"], [654, 2, 1, "", "shuffle"]], "ivy.functional.ivy.searching": [[656, 2, 1, "", "argmax"], [657, 2, 1, "", "argmin"], [658, 2, 1, "", "nonzero"], [659, 2, 1, "", "where"]], "ivy.functional.ivy.set": [[661, 2, 1, "", "unique_all"], [662, 2, 1, "", "unique_counts"], [663, 2, 1, "", "unique_inverse"], [664, 2, 1, "", "unique_values"]], "ivy.functional.ivy.sorting": [[668, 2, 1, "", "argsort"], [671, 2, 1, "", "sort"]], "ivy.functional.ivy.statistical": [[693, 2, 1, "", "einsum"], [678, 2, 1, "", "max"], [681, 2, 1, "", "mean"], [684, 2, 1, "", "min"], [687, 2, 1, "", "prod"], [690, 2, 1, "", "std"], [691, 2, 1, "", "sum"], [696, 2, 1, "", "var"]], "ivy.functional.ivy.utility": [[700, 2, 1, "", "all"], [703, 2, 1, "", "any"]], "ivy.inspection": [[708, 2, 1, "", "add_array_specs"], [709, 2, 1, "", "fn_array_spec"]], "ivy.stateful": [[711, 0, 0, "-", "activations"], [714, 0, 0, "-", "converters"], [716, 0, 0, "-", "initializers"], [725, 0, 0, "-", "layers"], [737, 0, 0, "-", "module"], [739, 0, 0, "-", "norms"], [741, 0, 0, "-", "optimizers"], [747, 0, 0, "-", "sequential"]], "ivy.stateful.activations": [[712, 1, 1, "", "GEGLU"], [713, 1, 1, "", "GELU"]], "ivy.stateful.activations.GEGLU": [[712, 3, 1, "", "__init__"]], "ivy.stateful.activations.GELU": [[713, 3, 1, "", "__init__"]], "ivy.stateful.converters": [[715, 2, 1, "", "to_ivy_module"]], "ivy.stateful.initializers": [[716, 1, 1, "", "Constant"], [718, 1, 1, "", "FirstLayerSiren"], [719, 1, 1, "", "GlorotUniform"], [716, 1, 1, "", "KaimingNormal"], [721, 1, 1, "", "Ones"], [722, 1, 1, "", "Siren"], [716, 1, 1, "", "Uniform"], [724, 1, 1, "", "Zeros"]], "ivy.stateful.initializers.Constant": [[716, 3, 1, "", "__init__"], [716, 3, 1, "", "create_variables"]], "ivy.stateful.initializers.FirstLayerSiren": [[718, 3, 1, "", "__init__"]], "ivy.stateful.initializers.GlorotUniform": [[719, 3, 1, "", "__init__"]], "ivy.stateful.initializers.KaimingNormal": [[716, 3, 1, "", "__init__"], [716, 3, 1, "", "create_variables"]], "ivy.stateful.initializers.Ones": [[721, 3, 1, "", "__init__"]], "ivy.stateful.initializers.Siren": [[722, 3, 1, "", "__init__"]], "ivy.stateful.initializers.Uniform": [[716, 3, 1, "", "__init__"], [716, 3, 1, "", "create_variables"]], "ivy.stateful.initializers.Zeros": [[724, 3, 1, "", "__init__"]], "ivy.stateful.layers": [[726, 1, 1, "", "Conv1D"], [727, 1, 1, "", "Conv1DTranspose"], [728, 1, 1, "", "Conv2D"], [729, 1, 1, "", "Conv2DTranspose"], [730, 1, 1, "", "Conv3D"], [731, 1, 1, "", "Conv3DTranspose"], [732, 1, 1, "", "DepthwiseConv2D"], [733, 1, 1, "", "Dropout"], [734, 1, 1, "", "LSTM"], [735, 1, 1, "", "Linear"], [736, 1, 1, "", "MultiHeadAttention"]], "ivy.stateful.layers.Conv1D": [[726, 3, 1, "", "__init__"]], "ivy.stateful.layers.Conv1DTranspose": [[727, 3, 1, "", "__init__"]], "ivy.stateful.layers.Conv2D": [[728, 3, 1, "", "__init__"]], "ivy.stateful.layers.Conv2DTranspose": [[729, 3, 1, "", "__init__"]], "ivy.stateful.layers.Conv3D": [[730, 3, 1, "", "__init__"]], "ivy.stateful.layers.Conv3DTranspose": [[731, 3, 1, "", "__init__"]], "ivy.stateful.layers.DepthwiseConv2D": [[732, 3, 1, "", "__init__"]], "ivy.stateful.layers.Dropout": [[733, 3, 1, "", "__init__"]], "ivy.stateful.layers.LSTM": [[734, 3, 1, "", "__init__"], [734, 3, 1, "", "get_initial_state"]], "ivy.stateful.layers.Linear": [[735, 3, 1, "", "__init__"]], "ivy.stateful.layers.MultiHeadAttention": [[736, 3, 1, "", "__init__"]], "ivy.stateful.module": [[738, 1, 1, "", "Module"]], "ivy.stateful.module.Module": [[738, 3, 1, "", "__init__"], [738, 3, 1, "", "build"], [738, 4, 1, "", "build_mode"], [738, 4, 1, "", "built"], [738, 3, 1, "", "check_submod_rets"], [738, 3, 1, "", "get_mod_key"], [738, 3, 1, "", "mod_depth"], [738, 3, 1, "", "mod_height"], [738, 3, 1, "", "mod_with_top_mod_key_chain"], [738, 3, 1, "", "save_weights"], [738, 3, 1, "", "show_mod_in_top_mod"], [738, 3, 1, "", "show_structure"], [738, 3, 1, "", "show_v_in_top_v"], [738, 3, 1, "", "sub_mods"], [738, 3, 1, "", "track_submod_call_order"], [738, 3, 1, "", "track_submod_rets"], [738, 3, 1, "", "v_with_top_v_key_chains"]], "ivy.stateful.norms": [[740, 1, 1, "", "LayerNorm"]], "ivy.stateful.norms.LayerNorm": [[740, 3, 1, "", "__init__"]], "ivy.stateful.optimizers": [[742, 1, 1, "", "Adam"], [743, 1, 1, "", "LAMB"], [744, 1, 1, "", "LARS"], [745, 1, 1, "", "Optimizer"], [746, 1, 1, "", "SGD"]], "ivy.stateful.optimizers.Adam": [[742, 3, 1, "", "__init__"], [742, 3, 1, "", "set_state"], [742, 4, 1, "", "state"]], "ivy.stateful.optimizers.LAMB": [[743, 3, 1, "", "__init__"], [743, 3, 1, "", "set_state"], [743, 4, 1, "", "state"]], "ivy.stateful.optimizers.LARS": [[744, 3, 1, "", "__init__"], [744, 3, 1, "", "set_state"], [744, 4, 1, "", "state"]], "ivy.stateful.optimizers.Optimizer": [[745, 3, 1, "", "__init__"], [745, 3, 1, "", "set_state"], [745, 3, 1, "", "step"]], "ivy.stateful.optimizers.SGD": [[746, 3, 1, "", "__init__"], [746, 3, 1, "", "set_state"], [746, 4, 1, "", "state"]], "ivy.stateful.sequential": [[748, 1, 1, "", "Sequential"]], "ivy.stateful.sequential.Sequential": [[748, 3, 1, "", "__init__"]], "ivy.verbosity": [[751, 2, 1, "", "cprint"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:function", "3": "py:method", "4": "py:property", "5": "py:data"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "function", "Python function"], "3": ["py", "method", "Python method"], "4": ["py", "property", "Python property"], "5": ["py", "data", "Python data"]}, "titleterms": {"activ": [0, 62, 156, 711], "arraywithactiv": 1, "convers": 2, "args_to_ivi": 3, "args_to_n": 4, "to_ivi": 5, "to_n": 6, "creation": [7, 69, 167], "arraywithcr": 8, "data": [9, 71, 117, 123, 131, 145, 186, 660, 661, 662, 664], "type": [9, 71, 118, 123, 145, 186], "arraywithdatatyp": 10, "devic": [11, 73, 124, 126, 219], "arraywithdevic": 12, "elementwis": [13, 75, 269], "arraywithelementwis": 14, "gener": [15, 77, 117, 445], "arraywithgener": 16, "gradient": [17, 79, 511], "arraywithgradi": 18, "imag": [19, 81], "arraywithimag": 20, "layer": [21, 83, 527, 725], "arraywithlay": 22, "linear": [23, 85, 536, 540, 735], "algebra": [23, 85, 540], "arraywithlinearalgebra": 24, "loss": [25, 87, 567], "arraywithloss": 26, "manipul": [27, 89, 577], "arraywithmanipul": 28, "norm": [29, 91, 644, 739], "arraywithnorm": 30, "random": [31, 93, 648], "arraywithrandom": 32, "search": [33, 95, 655], "arraywithsearch": 34, "set": [35, 97, 108, 119, 660], "arraywithset": 36, "sort": [37, 99, 665, 669, 670, 671], "arraywithsort": 38, "statist": [39, 101, 672], "arraywithstatist": 40, "util": [41, 103, 697], "arraywithutil": 42, "wrap": [43, 105, 120], "add_ivy_array_instance_method": 44, "backend": [45, 113, 119, 128, 145], "handler": [45, 128], "choose_random_backend": 47, "clear_backend_stack": 48, "current_backend": 49, "get_backend": 50, "set_backend": 51, "try_import_ivy_jax": 52, "try_import_ivy_mxnet": 53, "try_import_ivy_numpi": 54, "try_import_ivy_tf": 55, "try_import_ivy_torch": 56, "unset_backend": 57, "background": [58, 704], "ml": 59, "explos": 59, "standard": 60, "skeptic": 60, "complimentari": 60, "vs": [60, 145], "competit": 60, "do": 60, "work": [60, 111], "The": [60, 109, 130, 145], "arrai": [60, 116, 121, 126, 130, 271, 274, 277, 280, 283, 286, 289, 292, 295, 298, 301, 304, 307, 310, 313, 316, 319, 322, 325, 328, 331, 335, 338, 341, 344, 347, 350, 353, 356, 359, 362, 365, 368, 371, 374, 377, 380, 383, 386, 389, 392, 397, 400, 403, 406, 409, 412, 415, 418, 421, 425, 428, 431, 434, 437, 440, 443, 447, 549, 569, 572, 575, 579, 583, 586, 589, 592, 595, 598, 601, 604, 608, 611, 614, 617, 620, 646, 667, 670, 674, 677, 680, 683, 686, 689, 692, 695, 699, 702], "api": [60, 110, 113, 116, 122, 128, 130, 132, 133], "why": 61, "unifi": [61, 130], "No": [61, 108], "more": 61, "re": 61, "implement": 61, "infinit": 61, "shelf": 61, "life": 61, "containerwithactiv": 63, "base": 64, "containerbas": 65, "contain": [66, 67, 122, 131, 332, 422, 581], "multidevcontain": 68, "containerwithcr": 70, "containerwithdatatyp": 72, "containerwithdevic": 74, "containerwithelementwis": 76, "containerwithgener": 78, "containerwithgradi": 80, "containerwithimag": 82, "containerwithlay": 84, "containerwithlinearalgebra": 86, "containerwithloss": 88, "containerwithmanipul": 90, "containerwithnorm": 92, "containerwithrandom": 94, "containerwithsearch": 96, "containerwithset": 98, "containerwithsort": 100, "containerwithstatist": 102, "containerwithutil": 104, "add_ivy_container_instance_method": 106, "contribut": [107, 704], "up": 108, "clone": 108, "ivi": [108, 113, 115, 117, 121, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 144], "pycharm": 108, "virtual": 108, "environ": 108, "docker": [108, 109, 111], "us": [108, 111, 131], "miniconda": [108, 111], "venv": [108, 111], "interpret": 108, "window": 108, "maco": 108, "ubuntu": 108, "github": 108, "codespac": 108, "pre": 108, "commit": [108, 109], "basic": 109, "get": 109, "help": 109, "todo": 109, "list": 109, "issu": 109, "manag": 109, "your": 109, "fork": 109, "who": 109, "To": 109, "ask": 109, "With": 109, "command": 109, "line": 109, "browser": 109, "pull": 109, "request": 109, "small": 109, "often": 109, "run": 109, "test": [109, 116, 117], "local": 109, "open": 110, "task": 110, "function": [110, 118, 120, 122, 123, 124, 126, 128, 133, 145, 272, 275, 278, 281, 284, 287, 290, 293, 296, 299, 302, 305, 308, 311, 314, 317, 320, 323, 326, 329, 333, 336, 339, 342, 345, 348, 351, 354, 357, 360, 363, 366, 369, 372, 375, 378, 381, 384, 387, 390, 393, 398, 401, 404, 407, 410, 413, 416, 419, 423, 426, 429, 432, 435, 438, 441, 444, 448, 550, 570, 573, 576, 580, 584, 587, 590, 593, 596, 599, 602, 605, 609, 612, 615, 618, 621, 647, 668, 671, 675, 678, 681, 684, 687, 690, 693, 696, 700, 703], "format": 110, "frontend": [110, 133], "build": [111, 128], "doc": 111, "dockerless": 111, "document": 111, "pipelin": [111, 145], "make_doc": 111, "sh": 111, "entrypoint": 111, "_make_doc": 111, "generate_src_rst_fil": 111, "py": 111, "sphinx": 111, "correct_built_html_fil": 111, "remove_fil": 111, "deep": 112, "dive": 112, "navig": 113, "code": 113, "categor": 113, "submodul": 113, "design": [113, 127, 704], "docstr": [114, 115], "exampl": [115, 126], "tan": [115, 436, 437], "roll": [115, 603, 604, 605], "add": [115, 279, 280], "hypothesi": 117, "self": 117, "consist": 117, "explicit": 117, "test_array_funct": 117, "primari": 118, "composit": 118, "mix": 118, "standalon": 118, "nestabl": [118, 122, 126], "conveni": 118, "nativ": 121, "handl": 121, "instanc": [122, 130], "method": [122, 130, 131], "static": 122, "special": 122, "modul": [123, 124, 132, 737, 738], "argument": [123, 124, 125, 126], "other": [123, 124], "inplac": 125, "updat": 125, "out": [125, 126], "copi": 125, "dtype": [126, 200], "number": 126, "oper": [126, 130, 145], "integ": 126, "sequenc": 126, "block": 128, "framework": [128, 129], "graph": [128, 133], "compil": [128, 133, 164, 165], "class": 130, "monkei": 130, "patch": 130, "construct": 131, "represent": 131, "recurs": 131, "built": 131, "ins": 131, "access": 131, "save": 131, "load": 131, "comparison": 131, "custom": [131, 145], "case": 131, "compartment": 131, "configur": 131, "network": [131, 133], "weight": 131, "state": [132, 145], "initi": [132, 716], "optim": [132, 741, 745], "transpil": 133, "role": 133, "convert": [133, 714], "model": [133, 140, 145], "builder": 135, "ecosystem": 136, "gym": [137, 144], "mech": 138, "memori": [139, 144], "robot": [141, 144], "vision": [142, 144], "extens": [143, 704], "appli": 144, "librari": 144, "mechan": 144, "faq": 145, "mana": 145, "version": 145, "dynam": 145, "size": 145, "shape": [145, 499, 660, 661, 662, 664], "check": 145, "control": 145, "flow": 145, "auto": 145, "differenti": 145, "replica": 145, "parallel": 145, "support": 145, "altern": 145, "structur": 145, "func": 146, "wrapper": 146, "handle_nest": 147, "handle_out_argu": 148, "infer_devic": 149, "infer_dtyp": 150, "inputs_to_ivy_arrai": 151, "inputs_to_native_arrai": 152, "outputs_to_ivy_arrai": 153, "to_native_arrays_and_back": 154, "gelu": [157, 713], "leaky_relu": 158, "relu": 159, "sigmoid": 160, "softmax": 161, "softplu": 162, "tanh": [163, 439, 440], "constant": 166, "note": [167, 173], "arang": 168, "asarrai": 169, "empti": 170, "empty_lik": 171, "ey": 172, "from_dlpack": 173, "full": 174, "full_lik": 175, "linspac": 176, "logspac": 177, "meshgrid": 178, "native_arrai": 179, "ones": 180, "ones_lik": 181, "tril": 182, "triu": 183, "zero": [184, 724], "zeros_lik": 185, "as_ivy_dtyp": 190, "as_native_dtyp": 191, "astyp": 192, "broadcast_arrai": 193, "broadcast_to": 194, "can_cast": 195, "closest_valid_dtyp": 196, "default_dtyp": 197, "default_float_dtyp": 198, "default_int_dtyp": 199, "dtype_bit": 201, "finfo": 202, "function_supported_dtyp": 203, "function_unsupported_dtyp": 204, "iinfo": 205, "invalid_dtyp": 206, "is_float_dtyp": 207, "is_int_dtyp": 208, "promote_typ": 209, "result_typ": 210, "set_default_dtyp": 211, "set_default_float_dtyp": 212, "set_default_int_dtyp": 213, "type_promote_arrai": 214, "unset_default_dtyp": 215, "unset_default_float_dtyp": 216, "unset_default_int_dtyp": 217, "valid_dtyp": 218, "devcloneditem": 221, "devclonedit": 222, "devclonednest": 223, "devdistitem": 224, "devdistit": 225, "devdistnest": 226, "devmapp": 228, "devmappermultiproc": 229, "multidevitem": 231, "multidevit": 232, "multidevnest": 233, "profil": 234, "as_ivy_dev": 235, "as_native_dev": 236, "clear_mem_on_dev": 237, "default_devic": 238, "dev": 239, "dev_clon": 240, "dev_clone_arrai": 241, "dev_clone_it": 242, "dev_clone_nest": 243, "dev_dist": 244, "dev_dist_arrai": 245, "dev_dist_it": 246, "dev_dist_nest": 247, "dev_unifi": 248, "dev_unify_arrai": 249, "dev_unify_it": 250, "dev_unify_nest": 251, "dev_util": 252, "get_all_ivy_arrays_on_dev": 253, "gpu_is_avail": 254, "num_cpu_cor": 255, "num_gpu": 256, "num_ivy_arrays_on_dev": 257, "percent_used_mem_on_dev": 258, "print_all_ivy_arrays_on_dev": 259, "set_default_devic": 260, "set_split_factor": 261, "split_factor": 262, "split_func_cal": 263, "to_devic": 264, "total_mem_on_dev": 265, "tpu_is_avail": 266, "unset_default_devic": 267, "used_mem_on_dev": 268, "ab": [270, 271, 272], "aco": [273, 274], "acosh": [275, 276, 277, 278, 320, 323], "logaddexp": [281, 336, 379, 380, 381], "asin": [282, 283, 284], "asinh": [285, 286, 287], "atan": [288, 289], "atanh": [290, 294, 295, 296, 438, 441], "atan2": [291, 292, 293], "bitwise_and": [297, 298, 299], "bitwise_invert": [300, 301, 302], "bitwise_left_shift": [303, 304, 305], "bitwise_or": [306, 307, 308], "bitwise_right_shift": [309, 310, 311], "bitwise_xor": [312, 313, 314], "ceil": [315, 316, 317], "co": [318, 319], "cosh": [321, 322], "divid": [324, 325], "floor_divid": [326, 342, 343, 344, 345], "equal": [327, 328], "greater_equ": [329, 348, 349, 350, 351], "erf": [330, 331, 332, 333], "exp": [334, 335], "expm1": [337, 338, 339], "floor": [340, 341], "greater": [346, 347], "isfinit": [352, 353, 354], "isinf": [355, 356, 357], "isnan": [358, 359, 360], "less": [361, 362, 363], "less_equ": [364, 365, 366], "log": [367, 368, 369], "log10": [370, 371, 372], "log1p": [373, 374, 375], "log2": [376, 377, 378], "logical_and": [382, 383, 384], "logical_not": [385, 386, 387], "logical_or": [388, 389, 390], "logical_xor": [391, 392, 393], "maximum": 394, "minimum": 395, "multipli": [396, 397, 398], "neg": [399, 400, 401], "not_equ": [402, 403, 404], "posit": [405, 406, 407], "pow": [408, 409, 410], "remaind": [411, 412, 413], "round": [414, 415, 416], "sign": [417, 418, 419], "sin": [420, 421, 422, 423], "sinh": [424, 425, 426], "sqrt": [427, 428, 429], "squar": [430, 431, 432], "subtract": [433, 434, 435], "trunc": [442, 443, 444], "all_equ": [446, 447, 448], "arg_info": 449, "arg_nam": 450, "array_equ": 451, "arrays_equ": 452, "assert_supports_inplac": 453, "cache_fn": 454, "clip_matrix_norm": 455, "clip_vector_norm": 456, "container_typ": 457, "copy_arrai": 458, "cumprod": 459, "cumsum": 460, "current_backend_str": 461, "default": 462, "einops_rearrang": 463, "einops_reduc": 464, "einops_repeat": 465, "exist": 466, "floormod": 467, "fourier_encod": 468, "gather": 469, "gather_nd": 470, "get_all_arrays_in_memori": 471, "get_min_bas": 472, "get_min_denomin": 473, "get_num_dim": 474, "get_referrers_recurs": 475, "has_nan": 476, "indices_wher": 477, "inplace_arrays_support": 478, "inplace_decr": 479, "inplace_incr": 480, "inplace_upd": 481, "inplace_variables_support": 482, "is_arrai": 483, "is_ivy_arrai": 484, "is_ivy_contain": 485, "is_native_arrai": 486, "match_kwarg": 487, "multiprocess": 488, "num_arrays_in_memori": 489, "one_hot": 490, "print_all_arrays_in_memori": 491, "queue_timeout": 492, "scatter_flat": 493, "scatter_nd": 494, "set_min_bas": 495, "set_min_denomin": 496, "set_queue_timeout": 497, "set_tmp_dir": 498, "shape_to_tupl": 500, "stable_divid": 501, "stable_pow": 502, "supports_inplac": 503, "tmp_dir": 504, "to_list": 505, "to_numpi": 506, "to_scalar": 507, "try_else_non": 508, "unstack": 509, "value_is_nan": 510, "adam_step": 513, "adam_upd": 514, "execute_with_gradi": 515, "gradient_descent_upd": 516, "is_vari": 517, "lamb_upd": 518, "lars_upd": 519, "optimizer_upd": 520, "set_with_grad": 521, "stop_gradi": 522, "unset_with_grad": 523, "variabl": 524, "variable_data": 525, "with_grad": 526, "conv1d": [528, 726], "conv1d_transpos": 529, "conv2d": [530, 728], "conv2d_transpos": 531, "conv3d": [532, 730], "conv3d_transpos": 533, "depthwise_conv2d": 534, "dropout": [535, 733], "lstm_updat": 537, "multi_head_attent": 538, "scaled_dot_product_attent": 539, "choleski": 541, "cross": 542, "det": 543, "diagon": 544, "eigh": 545, "eigvalsh": 546, "inv": 547, "matmul": [548, 549, 550], "matrix_norm": 551, "matrix_pow": 552, "matrix_rank": 553, "matrix_transpos": 554, "outer": 555, "pinv": 556, "qr": 557, "slogdet": 558, "solv": 559, "svd": 560, "svdval": 561, "tensordot": 562, "trace": 563, "vecdot": 564, "vector_norm": 565, "vector_to_skew_symmetric_matrix": 566, "binary_cross_entropi": [568, 569, 570], "cross_entropi": [571, 572, 573], "sparse_cross_entropi": [574, 575, 576], "clip": [578, 579, 580], "static_clip": 581, "concat": [582, 583, 584], "constant_pad": [585, 586, 587], "expand_dim": [588, 589, 590], "flip": [591, 592, 593], "permute_dim": [594, 595, 596], "repeat": [597, 598, 599], "reshap": [600, 601, 602], "split": 606, "squeez": [607, 608, 609], "stack": [610, 611, 612], "swapax": [613, 614, 615], "tile": [616, 617, 618], "zero_pad": [619, 620, 621], "meta": 622, "fomaml_step": 623, "maml_step": 624, "reptile_step": 625, "nest": 626, "all_nested_indic": 627, "copy_nest": 628, "index_nest": 629, "insert_into_nest_at_index": 630, "insert_into_nest_at_indic": 631, "map": 632, "map_nest_at_index": 633, "map_nest_at_indic": 634, "multi_index_nest": 635, "nested_ani": 636, "nested_indices_wher": 637, "nested_map": 638, "nested_multi_map": 639, "prune_nest_at_index": 640, "prune_nest_at_indic": 641, "set_nest_at_index": 642, "set_nest_at_indic": 643, "layer_norm": [645, 646, 647], "multinomi": 649, "randint": 650, "random_norm": 651, "random_uniform": 652, "seed": 653, "shuffl": 654, "argmax": 656, "argmin": 657, "nonzero": 658, "where": 659, "depend": [660, 661, 662, 664], "output": [660, 661, 662, 664], "unique_al": 661, "unique_count": 662, "unique_invers": 663, "unique_valu": 664, "argsort": [666, 667, 668], "einsum": [673, 674, 675, 693], "max": [676, 677, 678], "mean": [679, 680, 681], "min": [682, 683, 684], "prod": [685, 686, 687], "std": [688, 689, 690], "sum": [691, 692], "var": [694, 695, 696], "all": [698, 699, 700], "ani": [701, 702, 703], "content": 704, "overview": 704, "quick": 704, "start": 704, "roadmap": [704, 710], "citat": 704, "inspect": 707, "add_array_spec": 708, "fn_array_spec": 709, "geglu": 712, "to_ivy_modul": 715, "firstlayersiren": 718, "glorotuniform": 719, "Ones": 721, "siren": 722, "conv1dtranspos": 727, "conv2dtranspos": 729, "conv3dtranspos": 731, "depthwiseconv2d": 732, "lstm": 734, "multiheadattent": 736, "layernorm": 740, "adam": 742, "lamb": 743, "lar": 744, "sgd": 746, "sequenti": [747, 748], "verbos": 750, "cprint": 751}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 6, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.viewcode": 1, "sphinx": 56}})