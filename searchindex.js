Search.setIndex({"docnames": ["array/activations", "array/activations/ArrayWithActivations", "array/array_methods", "array/array_methods/abs", "array/array_methods/acos", "array/array_methods/acosh", "array/array_methods/adam_step", "array/array_methods/add", "array/array_methods/add_ivy_array_instance_methods", "array/array_methods/all", "array/array_methods/all_equal", "array/array_methods/any", "array/array_methods/argsort", "array/array_methods/asin", "array/array_methods/asinh", "array/array_methods/atan", "array/array_methods/atan2", "array/array_methods/atanh", "array/array_methods/binary_cross_entropy", "array/array_methods/bitwise_and", "array/array_methods/bitwise_invert", "array/array_methods/bitwise_left_shift", "array/array_methods/bitwise_or", "array/array_methods/bitwise_right_shift", "array/array_methods/bitwise_xor", "array/array_methods/can_cast", "array/array_methods/ceil", "array/array_methods/cholesky", "array/array_methods/clip", "array/array_methods/concat", "array/array_methods/constant_pad", "array/array_methods/cos", "array/array_methods/cosh", "array/array_methods/cross", "array/array_methods/cross_entropy", "array/array_methods/det", "array/array_methods/diagonal", "array/array_methods/divide", "array/array_methods/eigh", "array/array_methods/eigvalsh", "array/array_methods/einsum", "array/array_methods/equal", "array/array_methods/erf", "array/array_methods/exp", "array/array_methods/expand_dims", "array/array_methods/expm1", "array/array_methods/flip", "array/array_methods/floor", "array/array_methods/floor_divide", "array/array_methods/gather_nd", "array/array_methods/greater", "array/array_methods/greater_equal", "array/array_methods/inv", "array/array_methods/isfinite", "array/array_methods/isinf", "array/array_methods/isnan", "array/array_methods/layer_norm", "array/array_methods/less", "array/array_methods/less_equal", "array/array_methods/log", "array/array_methods/log10", "array/array_methods/log1p", "array/array_methods/log2", "array/array_methods/logaddexp", "array/array_methods/logical_and", "array/array_methods/logical_not", "array/array_methods/logical_or", "array/array_methods/logical_xor", "array/array_methods/matmul", "array/array_methods/matrix_norm", "array/array_methods/matrix_rank", "array/array_methods/matrix_transpose", "array/array_methods/max", "array/array_methods/mean", "array/array_methods/min", "array/array_methods/multiply", "array/array_methods/negative", "array/array_methods/not_equal", "array/array_methods/outer", "array/array_methods/permute_dims", "array/array_methods/pinv", "array/array_methods/positive", "array/array_methods/pow", "array/array_methods/prod", "array/array_methods/qr", "array/array_methods/remainder", "array/array_methods/repeat", "array/array_methods/reshape", "array/array_methods/roll", "array/array_methods/round", "array/array_methods/sign", "array/array_methods/sin", "array/array_methods/sinh", "array/array_methods/solve", "array/array_methods/sort", "array/array_methods/sparse_cross_entropy", "array/array_methods/sqrt", "array/array_methods/square", "array/array_methods/squeeze", "array/array_methods/stack", "array/array_methods/std", "array/array_methods/subtract", "array/array_methods/sum", "array/array_methods/svd", "array/array_methods/svdvals", "array/array_methods/swapaxes", "array/array_methods/tan", "array/array_methods/tanh", "array/array_methods/tensordot", "array/array_methods/tile", "array/array_methods/trace", "array/array_methods/trunc", "array/array_methods/var", "array/array_methods/vecdot", "array/array_methods/vector_norm", "array/array_methods/vector_to_skew_symmetric_matrix", "array/array_methods/zero_pad", "array/conversions", "array/conversions/args_to_ivy", "array/conversions/args_to_native", "array/conversions/to_ivy", "array/conversions/to_native", "array/creation", "array/creation/ArrayWithCreation", "array/data_type", "array/data_type/ArrayWithDataTypes", "array/device", "array/device/ArrayWithDevice", "array/elementwise", "array/elementwise/ArrayWithElementwise", "array/general", "array/general/ArrayWithGeneral", "array/gradients", "array/gradients/ArrayWithGradients", "array/image", "array/image/ArrayWithImage", "array/layers", "array/layers/ArrayWithLayers", "array/linear_algebra", "array/linear_algebra/ArrayWithLinearAlgebra", "array/losses", "array/losses/ArrayWithLosses", "array/manipulation", "array/manipulation/ArrayWithManipulation", "array/norms", "array/norms/ArrayWithNorms", "array/random", "array/random/ArrayWithRandom", "array/searching", "array/searching/ArrayWithSearching", "array/set", "array/set/ArrayWithSet", "array/sorting", "array/sorting/ArrayWithSorting", "array/statistical", "array/statistical/ArrayWithStatistical", "array/utility", "array/utility/ArrayWithUtility", "array/wrapping", "array/wrapping/add_ivy_array_instance_methods", "backend_handler", "backend_handler/ContextManager:\n    def __init__", "backend_handler/choose_random_backend", "backend_handler/clear_backend_stack", "backend_handler/current_backend", "backend_handler/get_backend", "backend_handler/set_backend", "backend_handler/try_import_ivy_jax", "backend_handler/try_import_ivy_mxnet", "backend_handler/try_import_ivy_numpy", "backend_handler/try_import_ivy_tf", "backend_handler/try_import_ivy_torch", "backend_handler/unset_backend", "background", "background/ml_explosion", "background/standardization", "background/why_unify", "container/activations", "container/activations/ContainerWithActivations", "container/base", "container/base/ContainerBase", "container/container", "container/container/Container", "container/container/MultiDevContainer", "container/container_methods", "container/container_methods/abs", "container/container_methods/acos", "container/container_methods/acosh", "container/container_methods/adam_step", "container/container_methods/adam_update", "container/container_methods/add", "container/container_methods/add_ivy_container_instance_methods", "container/container_methods/all", "container/container_methods/all_equal", "container/container_methods/any", "container/container_methods/argsort", "container/container_methods/asin", "container/container_methods/asinh", "container/container_methods/at_dev", "container/container_methods/at_devs", "container/container_methods/atan", "container/container_methods/atan2", "container/container_methods/atanh", "container/container_methods/binary_cross_entropy", "container/container_methods/bitwise_and", "container/container_methods/bitwise_invert", "container/container_methods/bitwise_left_shift", "container/container_methods/bitwise_or", "container/container_methods/bitwise_right_shift", "container/container_methods/bitwise_xor", "container/container_methods/can_cast", "container/container_methods/ceil", "container/container_methods/clip", "container/container_methods/clip_vector_norm", "container/container_methods/concat", "container/container_methods/constant_pad", "container/container_methods/cos", "container/container_methods/cosh", "container/container_methods/cross_entropy", "container/container_methods/divide", "container/container_methods/einsum", "container/container_methods/equal", "container/container_methods/erf", "container/container_methods/exp", "container/container_methods/expand_dims", "container/container_methods/expm1", "container/container_methods/flip", "container/container_methods/floor", "container/container_methods/floor_divide", "container/container_methods/gather_nd", "container/container_methods/gradient_descent_update", "container/container_methods/greater", "container/container_methods/greater_equal", "container/container_methods/isfinite", "container/container_methods/isinf", "container/container_methods/isnan", "container/container_methods/lamb_update", "container/container_methods/lars_update", "container/container_methods/layer_norm", "container/container_methods/less", "container/container_methods/less_equal", "container/container_methods/log", "container/container_methods/log10", "container/container_methods/log1p", "container/container_methods/log2", "container/container_methods/logaddexp", "container/container_methods/logical_and", "container/container_methods/logical_not", "container/container_methods/logical_or", "container/container_methods/logical_xor", "container/container_methods/matmul", "container/container_methods/max", "container/container_methods/mean", "container/container_methods/min", "container/container_methods/multiply", "container/container_methods/negative", "container/container_methods/not_equal", "container/container_methods/optimizer_update", "container/container_methods/permute_dims", "container/container_methods/positive", "container/container_methods/pow", "container/container_methods/prod", "container/container_methods/random_uniform", "container/container_methods/remainder", "container/container_methods/repeat", "container/container_methods/reshape", "container/container_methods/roll", "container/container_methods/round", "container/container_methods/sign", "container/container_methods/sin", "container/container_methods/sinh", "container/container_methods/sort", "container/container_methods/sparse_cross_entropy", "container/container_methods/sqrt", "container/container_methods/square", "container/container_methods/squeeze", "container/container_methods/stack", "container/container_methods/static_abs", "container/container_methods/static_adam_step", "container/container_methods/static_adam_update", "container/container_methods/static_add", "container/container_methods/static_all_equal", "container/container_methods/static_argsort", "container/container_methods/static_binary_cross_entropy", "container/container_methods/static_can_cast", "container/container_methods/static_clip", "container/container_methods/static_cross_entropy", "container/container_methods/static_divide", "container/container_methods/static_gather_nd", "container/container_methods/static_gradient_descent_update", "container/container_methods/static_lamb_update", "container/container_methods/static_lars_update", "container/container_methods/static_multiply", "container/container_methods/static_optimizer_update", "container/container_methods/static_randint", "container/container_methods/static_random_uniform", "container/container_methods/static_roll", "container/container_methods/static_sort", "container/container_methods/static_sparse_cross_entropy", "container/container_methods/static_subtract", "container/container_methods/static_tan", "container/container_methods/static_tanh", "container/container_methods/std", "container/container_methods/subtract", "container/container_methods/sum", "container/container_methods/swapaxes", "container/container_methods/tan", "container/container_methods/tanh", "container/container_methods/tile", "container/container_methods/trunc", "container/container_methods/var", "container/container_methods/zero_pad", "container/creation", "container/creation/ContainerWithCreation", "container/data_type", "container/data_type/ContainerWithDataTypes", "container/device", "container/device/ContainerWithDevice", "container/elementwise", "container/elementwise/ContainerWithElementwise", "container/general", "container/general/ContainerWithGeneral", "container/gradients", "container/gradients/ContainerWithGradients", "container/image", "container/image/ContainerWithImage", "container/layers", "container/layers/ContainerWithLayers", "container/linear_algebra", "container/linear_algebra/ContainerWithLinearAlgebra", "container/losses", "container/losses/ContainerWithLosses", "container/manipulation", "container/manipulation/ContainerWithManipulation", "container/norms", "container/norms/ContainerWithNorms", "container/random", "container/random/ContainerWithRandom", "container/searching", "container/searching/ContainerWithSearching", "container/set", "container/set/ContainerWithSet", "container/sorting", "container/sorting/ContainerWithSorting", "container/statistical", "container/statistical/ContainerWithStatistical", "container/utility", "container/utility/ContainerWithUtility", "container/wrapping", "container/wrapping/add_ivy_container_instance_methods", "contributing", "contributing/0_setting_up", "contributing/1_the_basics", "contributing/4_open_tasks", "contributing/building_the_docs", "deep_dive", "deep_dive/0_navigating_the_code", "deep_dive/10_docstrings", "deep_dive/11_docstring_examples", "deep_dive/12_array_api_tests", "deep_dive/13_ivy_tests", "deep_dive/1_function_types", "deep_dive/2_backend_setting", "deep_dive/3_function_wrapping", "deep_dive/4_arrays", "deep_dive/5_containers", "deep_dive/6_data_types", "deep_dive/7_devices", "deep_dive/8_inplace_updates", "deep_dive/9_function_arguments", "design", "design/building_blocks", "design/ivy_as_a_framework", "design/ivy_as_a_framework/ivy_array", "design/ivy_as_a_framework/ivy_container", "design/ivy_as_a_framework/ivy_stateful_api", "design/ivy_as_a_transpiler", "docs/ivy", "docs/ivy_builder", "docs/ivy_ecosystem", "docs/ivy_gym", "docs/ivy_mech", "docs/ivy_memory", "docs/ivy_models", "docs/ivy_robot", "docs/ivy_vision", "extensions", "extensions/applied_libraries", "faq", "func_wrapper", "func_wrapper/handle_nestable", "func_wrapper/handle_out_argument", "func_wrapper/infer_device", "func_wrapper/infer_dtype", "func_wrapper/inputs_to_ivy_arrays", "func_wrapper/inputs_to_native_arrays", "func_wrapper/outputs_to_ivy_arrays", "func_wrapper/to_native_arrays_and_back", "functional/ivy", "functional/ivy/activations", "functional/ivy/activations/gelu", "functional/ivy/activations/leaky_relu", "functional/ivy/activations/relu", "functional/ivy/activations/sigmoid", "functional/ivy/activations/softmax", "functional/ivy/activations/softplus", "functional/ivy/activations/tanh", "functional/ivy/compilation", "functional/ivy/compilation/compile", "functional/ivy/constants", "functional/ivy/creation", "functional/ivy/creation/arange", "functional/ivy/creation/asarray", "functional/ivy/creation/empty", "functional/ivy/creation/empty_like", "functional/ivy/creation/eye", "functional/ivy/creation/from_dlpack", "functional/ivy/creation/full", "functional/ivy/creation/full_like", "functional/ivy/creation/linspace", "functional/ivy/creation/logspace", "functional/ivy/creation/meshgrid", "functional/ivy/creation/native_array", "functional/ivy/creation/ones", "functional/ivy/creation/ones_like", "functional/ivy/creation/tril", "functional/ivy/creation/triu", "functional/ivy/creation/zeros", "functional/ivy/creation/zeros_like", "functional/ivy/data_type", "functional/ivy/data_type/DefaultDtype:\n    \"\"\"\"\"\"\n\n    # noinspection PyShadowingNames\n    def __init__", "functional/ivy/data_type/DefaultFloatDtype:\n    \"\"\"\"\"\"\n\n    # noinspection PyShadowingNames\n    def __init__", "functional/ivy/data_type/DefaultIntDtype:\n    \"\"\"\"\"\"\n\n    # noinspection PyShadowingNames\n    def __init__", "functional/ivy/data_type/as_ivy_dtype", "functional/ivy/data_type/as_native_dtype", "functional/ivy/data_type/astype", "functional/ivy/data_type/broadcast_arrays", "functional/ivy/data_type/broadcast_to", "functional/ivy/data_type/can_cast", "functional/ivy/data_type/can_cast/can_cast_array", "functional/ivy/data_type/can_cast/can_cast_container", "functional/ivy/data_type/can_cast/can_cast_functional", "functional/ivy/data_type/can_cast/static_can_cast_container", "functional/ivy/data_type/closest_valid_dtype", "functional/ivy/data_type/default_dtype", "functional/ivy/data_type/default_float_dtype", "functional/ivy/data_type/default_int_dtype", "functional/ivy/data_type/dtype", "functional/ivy/data_type/dtype_bits", "functional/ivy/data_type/finfo", "functional/ivy/data_type/function_supported_dtypes", "functional/ivy/data_type/function_unsupported_dtypes", "functional/ivy/data_type/iinfo", "functional/ivy/data_type/invalid_dtype", "functional/ivy/data_type/is_float_dtype", "functional/ivy/data_type/is_int_dtype", "functional/ivy/data_type/promote_types", "functional/ivy/data_type/result_type", "functional/ivy/data_type/set_default_dtype", "functional/ivy/data_type/set_default_float_dtype", "functional/ivy/data_type/set_default_int_dtype", "functional/ivy/data_type/type_promote_arrays", "functional/ivy/data_type/unset_default_dtype", "functional/ivy/data_type/unset_default_float_dtype", "functional/ivy/data_type/unset_default_int_dtype", "functional/ivy/data_type/valid_dtype", "functional/ivy/device", "functional/ivy/device/DefaultDevice:\n    \"\"\"\"\"\"\n\n    # noinspection PyShadowingNames\n    def __init__", "functional/ivy/device/DevClonedItem", "functional/ivy/device/DevClonedIter", "functional/ivy/device/DevClonedNest", "functional/ivy/device/DevDistItem", "functional/ivy/device/DevDistIter", "functional/ivy/device/DevDistNest", "functional/ivy/device/DevManager:\n    \"\"\"\"\"\"\n\n    def __init__", "functional/ivy/device/DevMapper", "functional/ivy/device/DevMapperMultiProc", "functional/ivy/device/MultiDev:\n    def __init__", "functional/ivy/device/MultiDevItem", "functional/ivy/device/MultiDevIter", "functional/ivy/device/MultiDevNest", "functional/ivy/device/Profiler", "functional/ivy/device/as_ivy_dev", "functional/ivy/device/as_native_dev", "functional/ivy/device/clear_mem_on_dev", "functional/ivy/device/default_device", "functional/ivy/device/dev", "functional/ivy/device/dev_clone", "functional/ivy/device/dev_clone_array", "functional/ivy/device/dev_clone_iter", "functional/ivy/device/dev_clone_nest", "functional/ivy/device/dev_dist", "functional/ivy/device/dev_dist_array", "functional/ivy/device/dev_dist_iter", "functional/ivy/device/dev_dist_nest", "functional/ivy/device/dev_unify", "functional/ivy/device/dev_unify_array", "functional/ivy/device/dev_unify_iter", "functional/ivy/device/dev_unify_nest", "functional/ivy/device/dev_util", "functional/ivy/device/get_all_ivy_arrays_on_dev", "functional/ivy/device/gpu_is_available", "functional/ivy/device/num_cpu_cores", "functional/ivy/device/num_gpus", "functional/ivy/device/num_ivy_arrays_on_dev", "functional/ivy/device/percent_used_mem_on_dev", "functional/ivy/device/print_all_ivy_arrays_on_dev", "functional/ivy/device/set_default_device", "functional/ivy/device/set_split_factor", "functional/ivy/device/split_factor", "functional/ivy/device/split_func_call", "functional/ivy/device/to_device", "functional/ivy/device/total_mem_on_dev", "functional/ivy/device/tpu_is_available", "functional/ivy/device/unset_default_device", "functional/ivy/device/used_mem_on_dev", "functional/ivy/elementwise", "functional/ivy/elementwise/abs", "functional/ivy/elementwise/abs/abs_array", "functional/ivy/elementwise/abs/abs_container", "functional/ivy/elementwise/abs/abs_functional", "functional/ivy/elementwise/abs/static_abs_container", "functional/ivy/elementwise/acos", "functional/ivy/elementwise/acos/acos_array", "functional/ivy/elementwise/acos/acos_container", "functional/ivy/elementwise/acos/acos_functional", "functional/ivy/elementwise/acosh", "functional/ivy/elementwise/acosh/acosh_array", "functional/ivy/elementwise/acosh/acosh_container", "functional/ivy/elementwise/acosh/acosh_functional", "functional/ivy/elementwise/add", "functional/ivy/elementwise/add/add_array", "functional/ivy/elementwise/add/add_container", "functional/ivy/elementwise/add/add_functional", "functional/ivy/elementwise/add/static_add_container", "functional/ivy/elementwise/asin", "functional/ivy/elementwise/asin/asin_array", "functional/ivy/elementwise/asin/asin_container", "functional/ivy/elementwise/asin/asin_functional", "functional/ivy/elementwise/asinh", "functional/ivy/elementwise/asinh/asinh_array", "functional/ivy/elementwise/asinh/asinh_container", "functional/ivy/elementwise/asinh/asinh_functional", "functional/ivy/elementwise/atan", "functional/ivy/elementwise/atan/atan_array", "functional/ivy/elementwise/atan/atan_container", "functional/ivy/elementwise/atan/atan_functional", "functional/ivy/elementwise/atan2", "functional/ivy/elementwise/atan2/atan2_array", "functional/ivy/elementwise/atan2/atan2_container", "functional/ivy/elementwise/atan2/atan2_functional", "functional/ivy/elementwise/atanh", "functional/ivy/elementwise/atanh/atanh_array", "functional/ivy/elementwise/atanh/atanh_container", "functional/ivy/elementwise/atanh/atanh_functional", "functional/ivy/elementwise/bitwise_and", "functional/ivy/elementwise/bitwise_and/bitwise_and_array", "functional/ivy/elementwise/bitwise_and/bitwise_and_container", "functional/ivy/elementwise/bitwise_and/bitwise_and_functional", "functional/ivy/elementwise/bitwise_invert", "functional/ivy/elementwise/bitwise_invert/bitwise_invert_array", "functional/ivy/elementwise/bitwise_invert/bitwise_invert_container", "functional/ivy/elementwise/bitwise_invert/bitwise_invert_functional", "functional/ivy/elementwise/bitwise_left_shift", "functional/ivy/elementwise/bitwise_left_shift/bitwise_left_shift_array", "functional/ivy/elementwise/bitwise_left_shift/bitwise_left_shift_container", "functional/ivy/elementwise/bitwise_left_shift/bitwise_left_shift_functional", "functional/ivy/elementwise/bitwise_or", "functional/ivy/elementwise/bitwise_or/bitwise_or_array", "functional/ivy/elementwise/bitwise_or/bitwise_or_container", "functional/ivy/elementwise/bitwise_or/bitwise_or_functional", "functional/ivy/elementwise/bitwise_right_shift", "functional/ivy/elementwise/bitwise_right_shift/bitwise_right_shift_array", "functional/ivy/elementwise/bitwise_right_shift/bitwise_right_shift_container", "functional/ivy/elementwise/bitwise_right_shift/bitwise_right_shift_functional", "functional/ivy/elementwise/bitwise_xor", "functional/ivy/elementwise/bitwise_xor/bitwise_xor_array", "functional/ivy/elementwise/bitwise_xor/bitwise_xor_container", "functional/ivy/elementwise/bitwise_xor/bitwise_xor_functional", "functional/ivy/elementwise/ceil", "functional/ivy/elementwise/ceil/ceil_array", "functional/ivy/elementwise/ceil/ceil_container", "functional/ivy/elementwise/ceil/ceil_functional", "functional/ivy/elementwise/cos", "functional/ivy/elementwise/cos/cos_array", "functional/ivy/elementwise/cos/cos_container", "functional/ivy/elementwise/cos/cos_functional", "functional/ivy/elementwise/cosh", "functional/ivy/elementwise/cosh/cosh_array", "functional/ivy/elementwise/cosh/cosh_container", "functional/ivy/elementwise/cosh/cosh_functional", "functional/ivy/elementwise/divide", "functional/ivy/elementwise/divide/divide_array", "functional/ivy/elementwise/divide/divide_container", "functional/ivy/elementwise/divide/divide_functional", "functional/ivy/elementwise/divide/static_divide_container", "functional/ivy/elementwise/equal", "functional/ivy/elementwise/equal/equal_array", "functional/ivy/elementwise/equal/equal_container", "functional/ivy/elementwise/equal/equal_functional", "functional/ivy/elementwise/erf", "functional/ivy/elementwise/erf/erf_array", "functional/ivy/elementwise/erf/erf_container", "functional/ivy/elementwise/erf/erf_functional", "functional/ivy/elementwise/exp", "functional/ivy/elementwise/exp/exp_array", "functional/ivy/elementwise/exp/exp_container", "functional/ivy/elementwise/exp/exp_functional", "functional/ivy/elementwise/expm1", "functional/ivy/elementwise/expm1/expm1_array", "functional/ivy/elementwise/expm1/expm1_container", "functional/ivy/elementwise/expm1/expm1_functional", "functional/ivy/elementwise/floor", "functional/ivy/elementwise/floor/floor_array", "functional/ivy/elementwise/floor/floor_container", "functional/ivy/elementwise/floor/floor_functional", "functional/ivy/elementwise/floor_divide", "functional/ivy/elementwise/floor_divide/floor_divide_array", "functional/ivy/elementwise/floor_divide/floor_divide_container", "functional/ivy/elementwise/floor_divide/floor_divide_functional", "functional/ivy/elementwise/greater", "functional/ivy/elementwise/greater/greater_array", "functional/ivy/elementwise/greater/greater_container", "functional/ivy/elementwise/greater/greater_functional", "functional/ivy/elementwise/greater_equal", "functional/ivy/elementwise/greater_equal/greater_equal_array", "functional/ivy/elementwise/greater_equal/greater_equal_container", "functional/ivy/elementwise/greater_equal/greater_equal_functional", "functional/ivy/elementwise/isfinite", "functional/ivy/elementwise/isfinite/isfinite_array", "functional/ivy/elementwise/isfinite/isfinite_container", "functional/ivy/elementwise/isfinite/isfinite_functional", "functional/ivy/elementwise/isinf", "functional/ivy/elementwise/isinf/isinf_array", "functional/ivy/elementwise/isinf/isinf_container", "functional/ivy/elementwise/isinf/isinf_functional", "functional/ivy/elementwise/isnan", "functional/ivy/elementwise/isnan/isnan_array", "functional/ivy/elementwise/isnan/isnan_container", "functional/ivy/elementwise/isnan/isnan_functional", "functional/ivy/elementwise/less", "functional/ivy/elementwise/less/less_array", "functional/ivy/elementwise/less/less_container", "functional/ivy/elementwise/less/less_functional", "functional/ivy/elementwise/less_equal", "functional/ivy/elementwise/less_equal/less_equal_array", "functional/ivy/elementwise/less_equal/less_equal_container", "functional/ivy/elementwise/less_equal/less_equal_functional", "functional/ivy/elementwise/log", "functional/ivy/elementwise/log/log_array", "functional/ivy/elementwise/log/log_container", "functional/ivy/elementwise/log/log_functional", "functional/ivy/elementwise/log10", "functional/ivy/elementwise/log10/log10_array", "functional/ivy/elementwise/log10/log10_container", "functional/ivy/elementwise/log10/log10_functional", "functional/ivy/elementwise/log1p", "functional/ivy/elementwise/log1p/log1p_array", "functional/ivy/elementwise/log1p/log1p_container", "functional/ivy/elementwise/log1p/log1p_functional", "functional/ivy/elementwise/log2", "functional/ivy/elementwise/log2/log2_array", "functional/ivy/elementwise/log2/log2_container", "functional/ivy/elementwise/log2/log2_functional", "functional/ivy/elementwise/logaddexp", "functional/ivy/elementwise/logaddexp/logaddexp_array", "functional/ivy/elementwise/logaddexp/logaddexp_container", "functional/ivy/elementwise/logaddexp/logaddexp_functional", "functional/ivy/elementwise/logical_and", "functional/ivy/elementwise/logical_and/logical_and_array", "functional/ivy/elementwise/logical_and/logical_and_container", "functional/ivy/elementwise/logical_and/logical_and_functional", "functional/ivy/elementwise/logical_not", "functional/ivy/elementwise/logical_not/logical_not_array", "functional/ivy/elementwise/logical_not/logical_not_container", "functional/ivy/elementwise/logical_not/logical_not_functional", "functional/ivy/elementwise/logical_or", "functional/ivy/elementwise/logical_or/logical_or_array", "functional/ivy/elementwise/logical_or/logical_or_container", "functional/ivy/elementwise/logical_or/logical_or_functional", "functional/ivy/elementwise/logical_xor", "functional/ivy/elementwise/logical_xor/logical_xor_array", "functional/ivy/elementwise/logical_xor/logical_xor_container", "functional/ivy/elementwise/logical_xor/logical_xor_functional", "functional/ivy/elementwise/maximum", "functional/ivy/elementwise/minimum", "functional/ivy/elementwise/multiply", "functional/ivy/elementwise/multiply/multiply_array", "functional/ivy/elementwise/multiply/multiply_container", "functional/ivy/elementwise/multiply/multiply_functional", "functional/ivy/elementwise/multiply/static_multiply_container", "functional/ivy/elementwise/negative", "functional/ivy/elementwise/negative/negative_array", "functional/ivy/elementwise/negative/negative_container", "functional/ivy/elementwise/negative/negative_functional", "functional/ivy/elementwise/not_equal", "functional/ivy/elementwise/not_equal/not_equal_array", "functional/ivy/elementwise/not_equal/not_equal_container", "functional/ivy/elementwise/not_equal/not_equal_functional", "functional/ivy/elementwise/positive", "functional/ivy/elementwise/positive/positive_array", "functional/ivy/elementwise/positive/positive_container", "functional/ivy/elementwise/positive/positive_functional", "functional/ivy/elementwise/pow", "functional/ivy/elementwise/pow/pow_array", "functional/ivy/elementwise/pow/pow_container", "functional/ivy/elementwise/pow/pow_functional", "functional/ivy/elementwise/remainder", "functional/ivy/elementwise/remainder/remainder_array", "functional/ivy/elementwise/remainder/remainder_container", "functional/ivy/elementwise/remainder/remainder_functional", "functional/ivy/elementwise/round", "functional/ivy/elementwise/round/round_array", "functional/ivy/elementwise/round/round_container", "functional/ivy/elementwise/round/round_functional", "functional/ivy/elementwise/sign", "functional/ivy/elementwise/sign/sign_array", "functional/ivy/elementwise/sign/sign_container", "functional/ivy/elementwise/sign/sign_functional", "functional/ivy/elementwise/sin", "functional/ivy/elementwise/sin/sin_array", "functional/ivy/elementwise/sin/sin_container", "functional/ivy/elementwise/sin/sin_functional", "functional/ivy/elementwise/sinh", "functional/ivy/elementwise/sinh/sinh_array", "functional/ivy/elementwise/sinh/sinh_container", "functional/ivy/elementwise/sinh/sinh_functional", "functional/ivy/elementwise/sqrt", "functional/ivy/elementwise/sqrt/sqrt_array", "functional/ivy/elementwise/sqrt/sqrt_container", "functional/ivy/elementwise/sqrt/sqrt_functional", "functional/ivy/elementwise/square", "functional/ivy/elementwise/square/square_array", "functional/ivy/elementwise/square/square_container", "functional/ivy/elementwise/square/square_functional", "functional/ivy/elementwise/subtract", "functional/ivy/elementwise/subtract/static_subtract_container", "functional/ivy/elementwise/subtract/subtract_array", "functional/ivy/elementwise/subtract/subtract_container", "functional/ivy/elementwise/subtract/subtract_functional", "functional/ivy/elementwise/tan", "functional/ivy/elementwise/tan/static_tan_container", "functional/ivy/elementwise/tan/tan_array", "functional/ivy/elementwise/tan/tan_container", "functional/ivy/elementwise/tan/tan_functional", "functional/ivy/elementwise/tanh", "functional/ivy/elementwise/tanh/static_tanh_container", "functional/ivy/elementwise/tanh/tanh_array", "functional/ivy/elementwise/tanh/tanh_container", "functional/ivy/elementwise/tanh/tanh_functional", "functional/ivy/elementwise/trunc", "functional/ivy/elementwise/trunc/trunc_array", "functional/ivy/elementwise/trunc/trunc_container", "functional/ivy/elementwise/trunc/trunc_functional", "functional/ivy/general", "functional/ivy/general/all_equal", "functional/ivy/general/all_equal/all_equal_array", "functional/ivy/general/all_equal/all_equal_container", "functional/ivy/general/all_equal/all_equal_functional", "functional/ivy/general/all_equal/static_all_equal_container", "functional/ivy/general/arg_info", "functional/ivy/general/arg_names", "functional/ivy/general/array_equal", "functional/ivy/general/arrays_equal", "functional/ivy/general/assert_supports_inplace", "functional/ivy/general/cache_fn", "functional/ivy/general/clip_matrix_norm", "functional/ivy/general/clip_vector_norm", "functional/ivy/general/clip_vector_norm/clip_vector_norm_container", "functional/ivy/general/clip_vector_norm/clip_vector_norm_functional", "functional/ivy/general/container_types", "functional/ivy/general/copy_array", "functional/ivy/general/cumprod", "functional/ivy/general/cumsum", "functional/ivy/general/current_backend_str", "functional/ivy/general/default", "functional/ivy/general/einops_rearrange", "functional/ivy/general/einops_reduce", "functional/ivy/general/einops_repeat", "functional/ivy/general/exists", "functional/ivy/general/floormod", "functional/ivy/general/fourier_encode", "functional/ivy/general/gather", "functional/ivy/general/gather_nd", "functional/ivy/general/gather_nd/gather_nd_array", "functional/ivy/general/gather_nd/gather_nd_container", "functional/ivy/general/gather_nd/gather_nd_functional", "functional/ivy/general/gather_nd/static_gather_nd_container", "functional/ivy/general/get_all_arrays_in_memory", "functional/ivy/general/get_min_base", "functional/ivy/general/get_min_denominator", "functional/ivy/general/get_num_dims", "functional/ivy/general/get_referrers_recursive", "functional/ivy/general/has_nans", "functional/ivy/general/indices_where", "functional/ivy/general/inplace_arrays_supported", "functional/ivy/general/inplace_decrement", "functional/ivy/general/inplace_increment", "functional/ivy/general/inplace_update", "functional/ivy/general/inplace_variables_supported", "functional/ivy/general/is_array", "functional/ivy/general/is_ivy_array", "functional/ivy/general/is_ivy_container", "functional/ivy/general/is_native_array", "functional/ivy/general/match_kwargs", "functional/ivy/general/multiprocessing", "functional/ivy/general/num_arrays_in_memory", "functional/ivy/general/one_hot", "functional/ivy/general/print_all_arrays_in_memory", "functional/ivy/general/queue_timeout", "functional/ivy/general/scatter_flat", "functional/ivy/general/scatter_nd", "functional/ivy/general/set_min_base", "functional/ivy/general/set_min_denominator", "functional/ivy/general/set_queue_timeout", "functional/ivy/general/set_tmp_dir", "functional/ivy/general/shape", "functional/ivy/general/shape_to_tuple", "functional/ivy/general/stable_divide", "functional/ivy/general/stable_pow", "functional/ivy/general/supports_inplace", "functional/ivy/general/tmp_dir", "functional/ivy/general/to_list", "functional/ivy/general/to_numpy", "functional/ivy/general/to_scalar", "functional/ivy/general/try_else_none", "functional/ivy/general/unstack", "functional/ivy/general/value_is_nan", "functional/ivy/gradients", "functional/ivy/gradients/GradientTracking:\n    \"\"\"\"\"\"\n\n    # noinspection PyShadowingNames\n    def __init__", "functional/ivy/gradients/adam_step", "functional/ivy/gradients/adam_step/adam_step_array", "functional/ivy/gradients/adam_step/adam_step_container", "functional/ivy/gradients/adam_step/adam_step_functional", "functional/ivy/gradients/adam_step/static_adam_step_container", "functional/ivy/gradients/adam_update", "functional/ivy/gradients/adam_update/adam_update_container", "functional/ivy/gradients/adam_update/adam_update_functional", "functional/ivy/gradients/adam_update/static_adam_update_container", "functional/ivy/gradients/execute_with_gradients", "functional/ivy/gradients/gradient_descent_update", "functional/ivy/gradients/gradient_descent_update/gradient_descent_update_container", "functional/ivy/gradients/gradient_descent_update/gradient_descent_update_functional", "functional/ivy/gradients/gradient_descent_update/static_gradient_descent_update_container", "functional/ivy/gradients/is_variable", "functional/ivy/gradients/lamb_update", "functional/ivy/gradients/lamb_update/lamb_update_container", "functional/ivy/gradients/lamb_update/lamb_update_functional", "functional/ivy/gradients/lamb_update/static_lamb_update_container", "functional/ivy/gradients/lars_update", "functional/ivy/gradients/lars_update/lars_update_container", "functional/ivy/gradients/lars_update/lars_update_functional", "functional/ivy/gradients/lars_update/static_lars_update_container", "functional/ivy/gradients/optimizer_update", "functional/ivy/gradients/optimizer_update/optimizer_update_container", "functional/ivy/gradients/optimizer_update/optimizer_update_functional", "functional/ivy/gradients/optimizer_update/static_optimizer_update_container", "functional/ivy/gradients/set_with_grads", "functional/ivy/gradients/stop_gradient", "functional/ivy/gradients/unset_with_grads", "functional/ivy/gradients/variable", "functional/ivy/gradients/variable_data", "functional/ivy/gradients/with_grads", "functional/ivy/layers", "functional/ivy/layers/conv1d", "functional/ivy/layers/conv1d_transpose", "functional/ivy/layers/conv2d", "functional/ivy/layers/conv2d_transpose", "functional/ivy/layers/conv3d", "functional/ivy/layers/conv3d_transpose", "functional/ivy/layers/depthwise_conv2d", "functional/ivy/layers/dropout", "functional/ivy/layers/linear", "functional/ivy/layers/lstm_update", "functional/ivy/layers/multi_head_attention", "functional/ivy/layers/scaled_dot_product_attention", "functional/ivy/linear_algebra", "functional/ivy/linear_algebra/cholesky", "functional/ivy/linear_algebra/cholesky/cholesky_array", "functional/ivy/linear_algebra/cholesky/cholesky_functional", "functional/ivy/linear_algebra/cross", "functional/ivy/linear_algebra/cross/cross_array", "functional/ivy/linear_algebra/cross/cross_functional", "functional/ivy/linear_algebra/det", "functional/ivy/linear_algebra/det/det_array", "functional/ivy/linear_algebra/det/det_functional", "functional/ivy/linear_algebra/diagonal", "functional/ivy/linear_algebra/diagonal/diagonal_array", "functional/ivy/linear_algebra/diagonal/diagonal_functional", "functional/ivy/linear_algebra/eigh", "functional/ivy/linear_algebra/eigh/eigh_array", "functional/ivy/linear_algebra/eigh/eigh_functional", "functional/ivy/linear_algebra/eigvalsh", "functional/ivy/linear_algebra/eigvalsh/eigvalsh_array", "functional/ivy/linear_algebra/eigvalsh/eigvalsh_functional", "functional/ivy/linear_algebra/inv", "functional/ivy/linear_algebra/inv/inv_array", "functional/ivy/linear_algebra/inv/inv_functional", "functional/ivy/linear_algebra/matmul", "functional/ivy/linear_algebra/matmul/matmul_array", "functional/ivy/linear_algebra/matmul/matmul_container", "functional/ivy/linear_algebra/matmul/matmul_functional", "functional/ivy/linear_algebra/matrix_norm", "functional/ivy/linear_algebra/matrix_norm/matrix_norm_array", "functional/ivy/linear_algebra/matrix_norm/matrix_norm_functional", "functional/ivy/linear_algebra/matrix_power", "functional/ivy/linear_algebra/matrix_rank", "functional/ivy/linear_algebra/matrix_rank/matrix_rank_array", "functional/ivy/linear_algebra/matrix_rank/matrix_rank_functional", "functional/ivy/linear_algebra/matrix_transpose", "functional/ivy/linear_algebra/matrix_transpose/matrix_transpose_array", "functional/ivy/linear_algebra/matrix_transpose/matrix_transpose_functional", "functional/ivy/linear_algebra/outer", "functional/ivy/linear_algebra/outer/outer_array", "functional/ivy/linear_algebra/outer/outer_functional", "functional/ivy/linear_algebra/pinv", "functional/ivy/linear_algebra/pinv/pinv_array", "functional/ivy/linear_algebra/pinv/pinv_functional", "functional/ivy/linear_algebra/qr", "functional/ivy/linear_algebra/qr/qr_array", "functional/ivy/linear_algebra/qr/qr_functional", "functional/ivy/linear_algebra/slogdet", "functional/ivy/linear_algebra/solve", "functional/ivy/linear_algebra/solve/solve_array", "functional/ivy/linear_algebra/solve/solve_functional", "functional/ivy/linear_algebra/svd", "functional/ivy/linear_algebra/svd/svd_array", "functional/ivy/linear_algebra/svd/svd_functional", "functional/ivy/linear_algebra/svdvals", "functional/ivy/linear_algebra/svdvals/svdvals_array", "functional/ivy/linear_algebra/svdvals/svdvals_functional", "functional/ivy/linear_algebra/tensordot", "functional/ivy/linear_algebra/tensordot/tensordot_array", "functional/ivy/linear_algebra/tensordot/tensordot_functional", "functional/ivy/linear_algebra/trace", "functional/ivy/linear_algebra/trace/trace_array", "functional/ivy/linear_algebra/trace/trace_functional", "functional/ivy/linear_algebra/vecdot", "functional/ivy/linear_algebra/vecdot/vecdot_array", "functional/ivy/linear_algebra/vecdot/vecdot_functional", "functional/ivy/linear_algebra/vector_norm", "functional/ivy/linear_algebra/vector_norm/vector_norm_array", "functional/ivy/linear_algebra/vector_norm/vector_norm_functional", "functional/ivy/linear_algebra/vector_to_skew_symmetric_matrix", "functional/ivy/linear_algebra/vector_to_skew_symmetric_matrix/vector_to_skew_symmetric_matrix_array", "functional/ivy/linear_algebra/vector_to_skew_symmetric_matrix/vector_to_skew_symmetric_matrix_functional", "functional/ivy/losses", "functional/ivy/losses/binary_cross_entropy", "functional/ivy/losses/binary_cross_entropy/binary_cross_entropy_array", "functional/ivy/losses/binary_cross_entropy/binary_cross_entropy_container", "functional/ivy/losses/binary_cross_entropy/binary_cross_entropy_functional", "functional/ivy/losses/binary_cross_entropy/static_binary_cross_entropy_container", "functional/ivy/losses/cross_entropy", "functional/ivy/losses/cross_entropy/cross_entropy_array", "functional/ivy/losses/cross_entropy/cross_entropy_container", "functional/ivy/losses/cross_entropy/cross_entropy_functional", "functional/ivy/losses/cross_entropy/static_cross_entropy_container", "functional/ivy/losses/sparse_cross_entropy", "functional/ivy/losses/sparse_cross_entropy/sparse_cross_entropy_array", "functional/ivy/losses/sparse_cross_entropy/sparse_cross_entropy_container", "functional/ivy/losses/sparse_cross_entropy/sparse_cross_entropy_functional", "functional/ivy/losses/sparse_cross_entropy/static_sparse_cross_entropy_container", "functional/ivy/manipulation", "functional/ivy/manipulation/clip", "functional/ivy/manipulation/clip/clip_array", "functional/ivy/manipulation/clip/clip_container", "functional/ivy/manipulation/clip/clip_functional", "functional/ivy/manipulation/clip/static_clip_container", "functional/ivy/manipulation/concat", "functional/ivy/manipulation/concat/concat_array", "functional/ivy/manipulation/concat/concat_container", "functional/ivy/manipulation/concat/concat_functional", "functional/ivy/manipulation/constant_pad", "functional/ivy/manipulation/constant_pad/constant_pad_array", "functional/ivy/manipulation/constant_pad/constant_pad_container", "functional/ivy/manipulation/constant_pad/constant_pad_functional", "functional/ivy/manipulation/expand_dims", "functional/ivy/manipulation/expand_dims/expand_dims_array", "functional/ivy/manipulation/expand_dims/expand_dims_container", "functional/ivy/manipulation/expand_dims/expand_dims_functional", "functional/ivy/manipulation/flip", "functional/ivy/manipulation/flip/flip_array", "functional/ivy/manipulation/flip/flip_container", "functional/ivy/manipulation/flip/flip_functional", "functional/ivy/manipulation/permute_dims", "functional/ivy/manipulation/permute_dims/permute_dims_array", "functional/ivy/manipulation/permute_dims/permute_dims_container", "functional/ivy/manipulation/permute_dims/permute_dims_functional", "functional/ivy/manipulation/repeat", "functional/ivy/manipulation/repeat/repeat_array", "functional/ivy/manipulation/repeat/repeat_container", "functional/ivy/manipulation/repeat/repeat_functional", "functional/ivy/manipulation/reshape", "functional/ivy/manipulation/reshape/reshape_array", "functional/ivy/manipulation/reshape/reshape_container", "functional/ivy/manipulation/reshape/reshape_functional", "functional/ivy/manipulation/roll", "functional/ivy/manipulation/roll/roll_array", "functional/ivy/manipulation/roll/roll_container", "functional/ivy/manipulation/roll/roll_functional", "functional/ivy/manipulation/roll/static_roll_container", "functional/ivy/manipulation/split", "functional/ivy/manipulation/squeeze", "functional/ivy/manipulation/squeeze/squeeze_array", "functional/ivy/manipulation/squeeze/squeeze_container", "functional/ivy/manipulation/squeeze/squeeze_functional", "functional/ivy/manipulation/stack", "functional/ivy/manipulation/stack/stack_array", "functional/ivy/manipulation/stack/stack_container", "functional/ivy/manipulation/stack/stack_functional", "functional/ivy/manipulation/swapaxes", "functional/ivy/manipulation/swapaxes/swapaxes_array", "functional/ivy/manipulation/swapaxes/swapaxes_container", "functional/ivy/manipulation/swapaxes/swapaxes_functional", "functional/ivy/manipulation/tile", "functional/ivy/manipulation/tile/tile_array", "functional/ivy/manipulation/tile/tile_container", "functional/ivy/manipulation/tile/tile_functional", "functional/ivy/manipulation/zero_pad", "functional/ivy/manipulation/zero_pad/zero_pad_array", "functional/ivy/manipulation/zero_pad/zero_pad_container", "functional/ivy/manipulation/zero_pad/zero_pad_functional", "functional/ivy/meta", "functional/ivy/meta/fomaml_step", "functional/ivy/meta/maml_step", "functional/ivy/meta/reptile_step", "functional/ivy/nest", "functional/ivy/nest/all_nested_indices", "functional/ivy/nest/copy_nest", "functional/ivy/nest/index_nest", "functional/ivy/nest/insert_into_nest_at_index", "functional/ivy/nest/insert_into_nest_at_indices", "functional/ivy/nest/map", "functional/ivy/nest/map_nest_at_index", "functional/ivy/nest/map_nest_at_indices", "functional/ivy/nest/multi_index_nest", "functional/ivy/nest/nested_any", "functional/ivy/nest/nested_indices_where", "functional/ivy/nest/nested_map", "functional/ivy/nest/nested_multi_map", "functional/ivy/nest/prune_nest_at_index", "functional/ivy/nest/prune_nest_at_indices", "functional/ivy/nest/set_nest_at_index", "functional/ivy/nest/set_nest_at_indices", "functional/ivy/norms", "functional/ivy/norms/layer_norm", "functional/ivy/norms/layer_norm/layer_norm_array", "functional/ivy/norms/layer_norm/layer_norm_container", "functional/ivy/norms/layer_norm/layer_norm_functional", "functional/ivy/random", "functional/ivy/random/multinomial", "functional/ivy/random/randint", "functional/ivy/random/randint/randint_functional", "functional/ivy/random/randint/static_randint_container", "functional/ivy/random/random_normal", "functional/ivy/random/random_uniform", "functional/ivy/random/random_uniform/random_uniform_container", "functional/ivy/random/random_uniform/random_uniform_functional", "functional/ivy/random/random_uniform/static_random_uniform_container", "functional/ivy/random/seed", "functional/ivy/random/shuffle", "functional/ivy/searching", "functional/ivy/searching/argmax", "functional/ivy/searching/argmin", "functional/ivy/searching/nonzero", "functional/ivy/searching/where", "functional/ivy/set", "functional/ivy/set/unique_all", "functional/ivy/set/unique_counts", "functional/ivy/set/unique_inverse", "functional/ivy/set/unique_values", "functional/ivy/sorting", "functional/ivy/sorting/argsort", "functional/ivy/sorting/argsort/argsort_array", "functional/ivy/sorting/argsort/argsort_container", "functional/ivy/sorting/argsort/argsort_functional", "functional/ivy/sorting/argsort/static_argsort_container", "functional/ivy/sorting/sort", "functional/ivy/sorting/sort/sort_array", "functional/ivy/sorting/sort/sort_container", "functional/ivy/sorting/sort/sort_functional", "functional/ivy/sorting/sort/static_sort_container", "functional/ivy/statistical", "functional/ivy/statistical/einsum", "functional/ivy/statistical/einsum/einsum_array", "functional/ivy/statistical/einsum/einsum_container", "functional/ivy/statistical/einsum/einsum_functional", "functional/ivy/statistical/max", "functional/ivy/statistical/max/max_array", "functional/ivy/statistical/max/max_container", "functional/ivy/statistical/max/max_functional", "functional/ivy/statistical/mean", "functional/ivy/statistical/mean/mean_array", "functional/ivy/statistical/mean/mean_container", "functional/ivy/statistical/mean/mean_functional", "functional/ivy/statistical/min", "functional/ivy/statistical/min/min_array", "functional/ivy/statistical/min/min_container", "functional/ivy/statistical/min/min_functional", "functional/ivy/statistical/prod", "functional/ivy/statistical/prod/prod_array", "functional/ivy/statistical/prod/prod_container", "functional/ivy/statistical/prod/prod_functional", "functional/ivy/statistical/std", "functional/ivy/statistical/std/std_array", "functional/ivy/statistical/std/std_container", "functional/ivy/statistical/std/std_functional", "functional/ivy/statistical/sum", "functional/ivy/statistical/sum/sum_array", "functional/ivy/statistical/sum/sum_container", "functional/ivy/statistical/sum/sum_functional", "functional/ivy/statistical/var", "functional/ivy/statistical/var/var_array", "functional/ivy/statistical/var/var_container", "functional/ivy/statistical/var/var_functional", "functional/ivy/utility", "functional/ivy/utility/all", "functional/ivy/utility/all/all_array", "functional/ivy/utility/all/all_container", "functional/ivy/utility/all/all_functional", "functional/ivy/utility/any", "functional/ivy/utility/any/any_array", "functional/ivy/utility/any/any_container", "functional/ivy/utility/any/any_functional", "index", "index_append", "index_prepend", "inspection", "inspection/add_array_specs", "inspection/fn_array_spec", "roadmap", "stateful/activations", "stateful/activations/GEGLU", "stateful/activations/GELU", "stateful/converters", "stateful/converters/to_ivy_module", "stateful/initializers", "stateful/initializers/Constant:\n    def __init__", "stateful/initializers/FirstLayerSiren", "stateful/initializers/GlorotUniform", "stateful/initializers/KaimingNormal:\n    def __init__", "stateful/initializers/Ones", "stateful/initializers/Siren", "stateful/initializers/Uniform:\n    def __init__", "stateful/initializers/Zeros", "stateful/layers", "stateful/layers/Conv1D", "stateful/layers/Conv1DTranspose", "stateful/layers/Conv2D", "stateful/layers/Conv2DTranspose", "stateful/layers/Conv3D", "stateful/layers/Conv3DTranspose", "stateful/layers/DepthwiseConv2D", "stateful/layers/Dropout", "stateful/layers/LSTM", "stateful/layers/Linear", "stateful/layers/MultiHeadAttention", "stateful/module", "stateful/module/Module", "stateful/norms", "stateful/norms/LayerNorm", "stateful/optimizers", "stateful/optimizers/Adam", "stateful/optimizers/LAMB", "stateful/optimizers/LARS", "stateful/optimizers/Optimizer", "stateful/optimizers/SGD", "stateful/sequential", "stateful/sequential/Sequential", "supported_frameworks", "verbosity", "verbosity/cprint"], "filenames": ["array/activations.rst", "array/activations/ArrayWithActivations.rst", "array/array_methods.rst", "array/array_methods/abs.rst", "array/array_methods/acos.rst", "array/array_methods/acosh.rst", "array/array_methods/adam_step.rst", "array/array_methods/add.rst", "array/array_methods/add_ivy_array_instance_methods.rst", "array/array_methods/all.rst", "array/array_methods/all_equal.rst", "array/array_methods/any.rst", "array/array_methods/argsort.rst", "array/array_methods/asin.rst", "array/array_methods/asinh.rst", "array/array_methods/atan.rst", "array/array_methods/atan2.rst", "array/array_methods/atanh.rst", "array/array_methods/binary_cross_entropy.rst", "array/array_methods/bitwise_and.rst", "array/array_methods/bitwise_invert.rst", "array/array_methods/bitwise_left_shift.rst", "array/array_methods/bitwise_or.rst", "array/array_methods/bitwise_right_shift.rst", "array/array_methods/bitwise_xor.rst", "array/array_methods/can_cast.rst", "array/array_methods/ceil.rst", "array/array_methods/cholesky.rst", "array/array_methods/clip.rst", "array/array_methods/concat.rst", "array/array_methods/constant_pad.rst", "array/array_methods/cos.rst", "array/array_methods/cosh.rst", "array/array_methods/cross.rst", "array/array_methods/cross_entropy.rst", "array/array_methods/det.rst", "array/array_methods/diagonal.rst", "array/array_methods/divide.rst", "array/array_methods/eigh.rst", "array/array_methods/eigvalsh.rst", "array/array_methods/einsum.rst", "array/array_methods/equal.rst", "array/array_methods/erf.rst", "array/array_methods/exp.rst", "array/array_methods/expand_dims.rst", "array/array_methods/expm1.rst", "array/array_methods/flip.rst", "array/array_methods/floor.rst", "array/array_methods/floor_divide.rst", "array/array_methods/gather_nd.rst", "array/array_methods/greater.rst", "array/array_methods/greater_equal.rst", "array/array_methods/inv.rst", "array/array_methods/isfinite.rst", "array/array_methods/isinf.rst", "array/array_methods/isnan.rst", "array/array_methods/layer_norm.rst", "array/array_methods/less.rst", "array/array_methods/less_equal.rst", "array/array_methods/log.rst", "array/array_methods/log10.rst", "array/array_methods/log1p.rst", "array/array_methods/log2.rst", "array/array_methods/logaddexp.rst", "array/array_methods/logical_and.rst", "array/array_methods/logical_not.rst", "array/array_methods/logical_or.rst", "array/array_methods/logical_xor.rst", "array/array_methods/matmul.rst", "array/array_methods/matrix_norm.rst", "array/array_methods/matrix_rank.rst", "array/array_methods/matrix_transpose.rst", "array/array_methods/max.rst", "array/array_methods/mean.rst", "array/array_methods/min.rst", "array/array_methods/multiply.rst", "array/array_methods/negative.rst", "array/array_methods/not_equal.rst", "array/array_methods/outer.rst", "array/array_methods/permute_dims.rst", "array/array_methods/pinv.rst", "array/array_methods/positive.rst", "array/array_methods/pow.rst", "array/array_methods/prod.rst", "array/array_methods/qr.rst", "array/array_methods/remainder.rst", "array/array_methods/repeat.rst", "array/array_methods/reshape.rst", "array/array_methods/roll.rst", "array/array_methods/round.rst", "array/array_methods/sign.rst", "array/array_methods/sin.rst", "array/array_methods/sinh.rst", "array/array_methods/solve.rst", "array/array_methods/sort.rst", "array/array_methods/sparse_cross_entropy.rst", "array/array_methods/sqrt.rst", "array/array_methods/square.rst", "array/array_methods/squeeze.rst", "array/array_methods/stack.rst", "array/array_methods/std.rst", "array/array_methods/subtract.rst", "array/array_methods/sum.rst", "array/array_methods/svd.rst", "array/array_methods/svdvals.rst", "array/array_methods/swapaxes.rst", "array/array_methods/tan.rst", "array/array_methods/tanh.rst", "array/array_methods/tensordot.rst", "array/array_methods/tile.rst", "array/array_methods/trace.rst", "array/array_methods/trunc.rst", "array/array_methods/var.rst", "array/array_methods/vecdot.rst", "array/array_methods/vector_norm.rst", "array/array_methods/vector_to_skew_symmetric_matrix.rst", "array/array_methods/zero_pad.rst", "array/conversions.rst", "array/conversions/args_to_ivy.rst", "array/conversions/args_to_native.rst", "array/conversions/to_ivy.rst", "array/conversions/to_native.rst", "array/creation.rst", "array/creation/ArrayWithCreation.rst", "array/data_type.rst", "array/data_type/ArrayWithDataTypes.rst", "array/device.rst", "array/device/ArrayWithDevice.rst", "array/elementwise.rst", "array/elementwise/ArrayWithElementwise.rst", "array/general.rst", "array/general/ArrayWithGeneral.rst", "array/gradients.rst", "array/gradients/ArrayWithGradients.rst", "array/image.rst", "array/image/ArrayWithImage.rst", "array/layers.rst", "array/layers/ArrayWithLayers.rst", "array/linear_algebra.rst", "array/linear_algebra/ArrayWithLinearAlgebra.rst", "array/losses.rst", "array/losses/ArrayWithLosses.rst", "array/manipulation.rst", "array/manipulation/ArrayWithManipulation.rst", "array/norms.rst", "array/norms/ArrayWithNorms.rst", "array/random.rst", "array/random/ArrayWithRandom.rst", "array/searching.rst", "array/searching/ArrayWithSearching.rst", "array/set.rst", "array/set/ArrayWithSet.rst", "array/sorting.rst", "array/sorting/ArrayWithSorting.rst", "array/statistical.rst", "array/statistical/ArrayWithStatistical.rst", "array/utility.rst", "array/utility/ArrayWithUtility.rst", "array/wrapping.rst", "array/wrapping/add_ivy_array_instance_methods.rst", "backend_handler.rst", "backend_handler/ContextManager:\n    def __init__.rst", "backend_handler/choose_random_backend.rst", "backend_handler/clear_backend_stack.rst", "backend_handler/current_backend.rst", "backend_handler/get_backend.rst", "backend_handler/set_backend.rst", "backend_handler/try_import_ivy_jax.rst", "backend_handler/try_import_ivy_mxnet.rst", "backend_handler/try_import_ivy_numpy.rst", "backend_handler/try_import_ivy_tf.rst", "backend_handler/try_import_ivy_torch.rst", "backend_handler/unset_backend.rst", "background.rst", "background/ml_explosion.rst", "background/standardization.rst", "background/why_unify.rst", "container/activations.rst", "container/activations/ContainerWithActivations.rst", "container/base.rst", "container/base/ContainerBase.rst", "container/container.rst", "container/container/Container.rst", "container/container/MultiDevContainer.rst", "container/container_methods.rst", "container/container_methods/abs.rst", "container/container_methods/acos.rst", "container/container_methods/acosh.rst", "container/container_methods/adam_step.rst", "container/container_methods/adam_update.rst", "container/container_methods/add.rst", "container/container_methods/add_ivy_container_instance_methods.rst", "container/container_methods/all.rst", "container/container_methods/all_equal.rst", "container/container_methods/any.rst", "container/container_methods/argsort.rst", "container/container_methods/asin.rst", "container/container_methods/asinh.rst", "container/container_methods/at_dev.rst", "container/container_methods/at_devs.rst", "container/container_methods/atan.rst", "container/container_methods/atan2.rst", "container/container_methods/atanh.rst", "container/container_methods/binary_cross_entropy.rst", "container/container_methods/bitwise_and.rst", "container/container_methods/bitwise_invert.rst", "container/container_methods/bitwise_left_shift.rst", "container/container_methods/bitwise_or.rst", "container/container_methods/bitwise_right_shift.rst", "container/container_methods/bitwise_xor.rst", "container/container_methods/can_cast.rst", "container/container_methods/ceil.rst", "container/container_methods/clip.rst", "container/container_methods/clip_vector_norm.rst", "container/container_methods/concat.rst", "container/container_methods/constant_pad.rst", "container/container_methods/cos.rst", "container/container_methods/cosh.rst", "container/container_methods/cross_entropy.rst", "container/container_methods/divide.rst", "container/container_methods/einsum.rst", "container/container_methods/equal.rst", "container/container_methods/erf.rst", "container/container_methods/exp.rst", "container/container_methods/expand_dims.rst", "container/container_methods/expm1.rst", "container/container_methods/flip.rst", "container/container_methods/floor.rst", "container/container_methods/floor_divide.rst", "container/container_methods/gather_nd.rst", "container/container_methods/gradient_descent_update.rst", "container/container_methods/greater.rst", "container/container_methods/greater_equal.rst", "container/container_methods/isfinite.rst", "container/container_methods/isinf.rst", "container/container_methods/isnan.rst", "container/container_methods/lamb_update.rst", "container/container_methods/lars_update.rst", "container/container_methods/layer_norm.rst", "container/container_methods/less.rst", "container/container_methods/less_equal.rst", "container/container_methods/log.rst", "container/container_methods/log10.rst", "container/container_methods/log1p.rst", "container/container_methods/log2.rst", "container/container_methods/logaddexp.rst", "container/container_methods/logical_and.rst", "container/container_methods/logical_not.rst", "container/container_methods/logical_or.rst", "container/container_methods/logical_xor.rst", "container/container_methods/matmul.rst", "container/container_methods/max.rst", "container/container_methods/mean.rst", "container/container_methods/min.rst", "container/container_methods/multiply.rst", "container/container_methods/negative.rst", "container/container_methods/not_equal.rst", "container/container_methods/optimizer_update.rst", "container/container_methods/permute_dims.rst", "container/container_methods/positive.rst", "container/container_methods/pow.rst", "container/container_methods/prod.rst", "container/container_methods/random_uniform.rst", "container/container_methods/remainder.rst", "container/container_methods/repeat.rst", "container/container_methods/reshape.rst", "container/container_methods/roll.rst", "container/container_methods/round.rst", "container/container_methods/sign.rst", "container/container_methods/sin.rst", "container/container_methods/sinh.rst", "container/container_methods/sort.rst", "container/container_methods/sparse_cross_entropy.rst", "container/container_methods/sqrt.rst", "container/container_methods/square.rst", "container/container_methods/squeeze.rst", "container/container_methods/stack.rst", "container/container_methods/static_abs.rst", "container/container_methods/static_adam_step.rst", "container/container_methods/static_adam_update.rst", "container/container_methods/static_add.rst", "container/container_methods/static_all_equal.rst", "container/container_methods/static_argsort.rst", "container/container_methods/static_binary_cross_entropy.rst", "container/container_methods/static_can_cast.rst", "container/container_methods/static_clip.rst", "container/container_methods/static_cross_entropy.rst", "container/container_methods/static_divide.rst", "container/container_methods/static_gather_nd.rst", "container/container_methods/static_gradient_descent_update.rst", "container/container_methods/static_lamb_update.rst", "container/container_methods/static_lars_update.rst", "container/container_methods/static_multiply.rst", "container/container_methods/static_optimizer_update.rst", "container/container_methods/static_randint.rst", "container/container_methods/static_random_uniform.rst", "container/container_methods/static_roll.rst", "container/container_methods/static_sort.rst", "container/container_methods/static_sparse_cross_entropy.rst", "container/container_methods/static_subtract.rst", "container/container_methods/static_tan.rst", "container/container_methods/static_tanh.rst", "container/container_methods/std.rst", "container/container_methods/subtract.rst", "container/container_methods/sum.rst", "container/container_methods/swapaxes.rst", "container/container_methods/tan.rst", "container/container_methods/tanh.rst", "container/container_methods/tile.rst", "container/container_methods/trunc.rst", "container/container_methods/var.rst", "container/container_methods/zero_pad.rst", "container/creation.rst", "container/creation/ContainerWithCreation.rst", "container/data_type.rst", "container/data_type/ContainerWithDataTypes.rst", "container/device.rst", "container/device/ContainerWithDevice.rst", "container/elementwise.rst", "container/elementwise/ContainerWithElementwise.rst", "container/general.rst", "container/general/ContainerWithGeneral.rst", "container/gradients.rst", "container/gradients/ContainerWithGradients.rst", "container/image.rst", "container/image/ContainerWithImage.rst", "container/layers.rst", "container/layers/ContainerWithLayers.rst", "container/linear_algebra.rst", "container/linear_algebra/ContainerWithLinearAlgebra.rst", "container/losses.rst", "container/losses/ContainerWithLosses.rst", "container/manipulation.rst", "container/manipulation/ContainerWithManipulation.rst", "container/norms.rst", "container/norms/ContainerWithNorms.rst", "container/random.rst", "container/random/ContainerWithRandom.rst", "container/searching.rst", "container/searching/ContainerWithSearching.rst", "container/set.rst", "container/set/ContainerWithSet.rst", "container/sorting.rst", "container/sorting/ContainerWithSorting.rst", "container/statistical.rst", "container/statistical/ContainerWithStatistical.rst", "container/utility.rst", "container/utility/ContainerWithUtility.rst", "container/wrapping.rst", "container/wrapping/add_ivy_container_instance_methods.rst", "contributing.rst", "contributing/0_setting_up.rst", "contributing/1_the_basics.rst", "contributing/4_open_tasks.rst", "contributing/building_the_docs.rst", "deep_dive.rst", "deep_dive/0_navigating_the_code.rst", "deep_dive/10_docstrings.rst", "deep_dive/11_docstring_examples.rst", "deep_dive/12_array_api_tests.rst", "deep_dive/13_ivy_tests.rst", "deep_dive/1_function_types.rst", "deep_dive/2_backend_setting.rst", "deep_dive/3_function_wrapping.rst", "deep_dive/4_arrays.rst", "deep_dive/5_containers.rst", "deep_dive/6_data_types.rst", "deep_dive/7_devices.rst", "deep_dive/8_inplace_updates.rst", "deep_dive/9_function_arguments.rst", "design.rst", "design/building_blocks.rst", "design/ivy_as_a_framework.rst", "design/ivy_as_a_framework/ivy_array.rst", "design/ivy_as_a_framework/ivy_container.rst", "design/ivy_as_a_framework/ivy_stateful_api.rst", "design/ivy_as_a_transpiler.rst", "docs/ivy.rst", "docs/ivy_builder.rst", "docs/ivy_ecosystem.rst", "docs/ivy_gym.rst", "docs/ivy_mech.rst", "docs/ivy_memory.rst", "docs/ivy_models.rst", "docs/ivy_robot.rst", "docs/ivy_vision.rst", "extensions.rst", "extensions/applied_libraries.rst", "faq.rst", "func_wrapper.rst", "func_wrapper/handle_nestable.rst", "func_wrapper/handle_out_argument.rst", "func_wrapper/infer_device.rst", "func_wrapper/infer_dtype.rst", "func_wrapper/inputs_to_ivy_arrays.rst", "func_wrapper/inputs_to_native_arrays.rst", "func_wrapper/outputs_to_ivy_arrays.rst", "func_wrapper/to_native_arrays_and_back.rst", "functional/ivy.rst", "functional/ivy/activations.rst", "functional/ivy/activations/gelu.rst", "functional/ivy/activations/leaky_relu.rst", "functional/ivy/activations/relu.rst", "functional/ivy/activations/sigmoid.rst", "functional/ivy/activations/softmax.rst", "functional/ivy/activations/softplus.rst", "functional/ivy/activations/tanh.rst", "functional/ivy/compilation.rst", "functional/ivy/compilation/compile.rst", "functional/ivy/constants.rst", "functional/ivy/creation.rst", "functional/ivy/creation/arange.rst", "functional/ivy/creation/asarray.rst", "functional/ivy/creation/empty.rst", "functional/ivy/creation/empty_like.rst", "functional/ivy/creation/eye.rst", "functional/ivy/creation/from_dlpack.rst", "functional/ivy/creation/full.rst", "functional/ivy/creation/full_like.rst", "functional/ivy/creation/linspace.rst", "functional/ivy/creation/logspace.rst", "functional/ivy/creation/meshgrid.rst", "functional/ivy/creation/native_array.rst", "functional/ivy/creation/ones.rst", "functional/ivy/creation/ones_like.rst", "functional/ivy/creation/tril.rst", "functional/ivy/creation/triu.rst", "functional/ivy/creation/zeros.rst", "functional/ivy/creation/zeros_like.rst", "functional/ivy/data_type.rst", "functional/ivy/data_type/DefaultDtype:\n    \"\"\"\"\"\"\n\n    # noinspection PyShadowingNames\n    def __init__.rst", "functional/ivy/data_type/DefaultFloatDtype:\n    \"\"\"\"\"\"\n\n    # noinspection PyShadowingNames\n    def __init__.rst", "functional/ivy/data_type/DefaultIntDtype:\n    \"\"\"\"\"\"\n\n    # noinspection PyShadowingNames\n    def __init__.rst", "functional/ivy/data_type/as_ivy_dtype.rst", "functional/ivy/data_type/as_native_dtype.rst", "functional/ivy/data_type/astype.rst", "functional/ivy/data_type/broadcast_arrays.rst", "functional/ivy/data_type/broadcast_to.rst", "functional/ivy/data_type/can_cast.rst", "functional/ivy/data_type/can_cast/can_cast_array.rst", "functional/ivy/data_type/can_cast/can_cast_container.rst", "functional/ivy/data_type/can_cast/can_cast_functional.rst", "functional/ivy/data_type/can_cast/static_can_cast_container.rst", "functional/ivy/data_type/closest_valid_dtype.rst", "functional/ivy/data_type/default_dtype.rst", "functional/ivy/data_type/default_float_dtype.rst", "functional/ivy/data_type/default_int_dtype.rst", "functional/ivy/data_type/dtype.rst", "functional/ivy/data_type/dtype_bits.rst", "functional/ivy/data_type/finfo.rst", "functional/ivy/data_type/function_supported_dtypes.rst", "functional/ivy/data_type/function_unsupported_dtypes.rst", "functional/ivy/data_type/iinfo.rst", "functional/ivy/data_type/invalid_dtype.rst", "functional/ivy/data_type/is_float_dtype.rst", "functional/ivy/data_type/is_int_dtype.rst", "functional/ivy/data_type/promote_types.rst", "functional/ivy/data_type/result_type.rst", "functional/ivy/data_type/set_default_dtype.rst", "functional/ivy/data_type/set_default_float_dtype.rst", "functional/ivy/data_type/set_default_int_dtype.rst", "functional/ivy/data_type/type_promote_arrays.rst", "functional/ivy/data_type/unset_default_dtype.rst", "functional/ivy/data_type/unset_default_float_dtype.rst", "functional/ivy/data_type/unset_default_int_dtype.rst", "functional/ivy/data_type/valid_dtype.rst", "functional/ivy/device.rst", "functional/ivy/device/DefaultDevice:\n    \"\"\"\"\"\"\n\n    # noinspection PyShadowingNames\n    def __init__.rst", "functional/ivy/device/DevClonedItem.rst", "functional/ivy/device/DevClonedIter.rst", "functional/ivy/device/DevClonedNest.rst", "functional/ivy/device/DevDistItem.rst", "functional/ivy/device/DevDistIter.rst", "functional/ivy/device/DevDistNest.rst", "functional/ivy/device/DevManager:\n    \"\"\"\"\"\"\n\n    def __init__.rst", "functional/ivy/device/DevMapper.rst", "functional/ivy/device/DevMapperMultiProc.rst", "functional/ivy/device/MultiDev:\n    def __init__.rst", "functional/ivy/device/MultiDevItem.rst", "functional/ivy/device/MultiDevIter.rst", "functional/ivy/device/MultiDevNest.rst", "functional/ivy/device/Profiler.rst", "functional/ivy/device/as_ivy_dev.rst", "functional/ivy/device/as_native_dev.rst", "functional/ivy/device/clear_mem_on_dev.rst", "functional/ivy/device/default_device.rst", "functional/ivy/device/dev.rst", "functional/ivy/device/dev_clone.rst", "functional/ivy/device/dev_clone_array.rst", "functional/ivy/device/dev_clone_iter.rst", "functional/ivy/device/dev_clone_nest.rst", "functional/ivy/device/dev_dist.rst", "functional/ivy/device/dev_dist_array.rst", "functional/ivy/device/dev_dist_iter.rst", "functional/ivy/device/dev_dist_nest.rst", "functional/ivy/device/dev_unify.rst", "functional/ivy/device/dev_unify_array.rst", "functional/ivy/device/dev_unify_iter.rst", "functional/ivy/device/dev_unify_nest.rst", "functional/ivy/device/dev_util.rst", "functional/ivy/device/get_all_ivy_arrays_on_dev.rst", "functional/ivy/device/gpu_is_available.rst", "functional/ivy/device/num_cpu_cores.rst", "functional/ivy/device/num_gpus.rst", "functional/ivy/device/num_ivy_arrays_on_dev.rst", "functional/ivy/device/percent_used_mem_on_dev.rst", "functional/ivy/device/print_all_ivy_arrays_on_dev.rst", "functional/ivy/device/set_default_device.rst", "functional/ivy/device/set_split_factor.rst", "functional/ivy/device/split_factor.rst", "functional/ivy/device/split_func_call.rst", "functional/ivy/device/to_device.rst", "functional/ivy/device/total_mem_on_dev.rst", "functional/ivy/device/tpu_is_available.rst", "functional/ivy/device/unset_default_device.rst", "functional/ivy/device/used_mem_on_dev.rst", "functional/ivy/elementwise.rst", "functional/ivy/elementwise/abs.rst", "functional/ivy/elementwise/abs/abs_array.rst", "functional/ivy/elementwise/abs/abs_container.rst", "functional/ivy/elementwise/abs/abs_functional.rst", "functional/ivy/elementwise/abs/static_abs_container.rst", "functional/ivy/elementwise/acos.rst", "functional/ivy/elementwise/acos/acos_array.rst", "functional/ivy/elementwise/acos/acos_container.rst", "functional/ivy/elementwise/acos/acos_functional.rst", "functional/ivy/elementwise/acosh.rst", "functional/ivy/elementwise/acosh/acosh_array.rst", "functional/ivy/elementwise/acosh/acosh_container.rst", "functional/ivy/elementwise/acosh/acosh_functional.rst", "functional/ivy/elementwise/add.rst", "functional/ivy/elementwise/add/add_array.rst", "functional/ivy/elementwise/add/add_container.rst", "functional/ivy/elementwise/add/add_functional.rst", "functional/ivy/elementwise/add/static_add_container.rst", "functional/ivy/elementwise/asin.rst", "functional/ivy/elementwise/asin/asin_array.rst", "functional/ivy/elementwise/asin/asin_container.rst", "functional/ivy/elementwise/asin/asin_functional.rst", "functional/ivy/elementwise/asinh.rst", "functional/ivy/elementwise/asinh/asinh_array.rst", "functional/ivy/elementwise/asinh/asinh_container.rst", "functional/ivy/elementwise/asinh/asinh_functional.rst", "functional/ivy/elementwise/atan.rst", "functional/ivy/elementwise/atan/atan_array.rst", "functional/ivy/elementwise/atan/atan_container.rst", "functional/ivy/elementwise/atan/atan_functional.rst", "functional/ivy/elementwise/atan2.rst", "functional/ivy/elementwise/atan2/atan2_array.rst", "functional/ivy/elementwise/atan2/atan2_container.rst", "functional/ivy/elementwise/atan2/atan2_functional.rst", "functional/ivy/elementwise/atanh.rst", "functional/ivy/elementwise/atanh/atanh_array.rst", "functional/ivy/elementwise/atanh/atanh_container.rst", "functional/ivy/elementwise/atanh/atanh_functional.rst", "functional/ivy/elementwise/bitwise_and.rst", "functional/ivy/elementwise/bitwise_and/bitwise_and_array.rst", "functional/ivy/elementwise/bitwise_and/bitwise_and_container.rst", "functional/ivy/elementwise/bitwise_and/bitwise_and_functional.rst", "functional/ivy/elementwise/bitwise_invert.rst", "functional/ivy/elementwise/bitwise_invert/bitwise_invert_array.rst", "functional/ivy/elementwise/bitwise_invert/bitwise_invert_container.rst", "functional/ivy/elementwise/bitwise_invert/bitwise_invert_functional.rst", "functional/ivy/elementwise/bitwise_left_shift.rst", "functional/ivy/elementwise/bitwise_left_shift/bitwise_left_shift_array.rst", "functional/ivy/elementwise/bitwise_left_shift/bitwise_left_shift_container.rst", "functional/ivy/elementwise/bitwise_left_shift/bitwise_left_shift_functional.rst", "functional/ivy/elementwise/bitwise_or.rst", "functional/ivy/elementwise/bitwise_or/bitwise_or_array.rst", "functional/ivy/elementwise/bitwise_or/bitwise_or_container.rst", "functional/ivy/elementwise/bitwise_or/bitwise_or_functional.rst", "functional/ivy/elementwise/bitwise_right_shift.rst", "functional/ivy/elementwise/bitwise_right_shift/bitwise_right_shift_array.rst", "functional/ivy/elementwise/bitwise_right_shift/bitwise_right_shift_container.rst", "functional/ivy/elementwise/bitwise_right_shift/bitwise_right_shift_functional.rst", "functional/ivy/elementwise/bitwise_xor.rst", "functional/ivy/elementwise/bitwise_xor/bitwise_xor_array.rst", "functional/ivy/elementwise/bitwise_xor/bitwise_xor_container.rst", "functional/ivy/elementwise/bitwise_xor/bitwise_xor_functional.rst", "functional/ivy/elementwise/ceil.rst", "functional/ivy/elementwise/ceil/ceil_array.rst", "functional/ivy/elementwise/ceil/ceil_container.rst", "functional/ivy/elementwise/ceil/ceil_functional.rst", "functional/ivy/elementwise/cos.rst", "functional/ivy/elementwise/cos/cos_array.rst", "functional/ivy/elementwise/cos/cos_container.rst", "functional/ivy/elementwise/cos/cos_functional.rst", "functional/ivy/elementwise/cosh.rst", "functional/ivy/elementwise/cosh/cosh_array.rst", "functional/ivy/elementwise/cosh/cosh_container.rst", "functional/ivy/elementwise/cosh/cosh_functional.rst", "functional/ivy/elementwise/divide.rst", "functional/ivy/elementwise/divide/divide_array.rst", "functional/ivy/elementwise/divide/divide_container.rst", "functional/ivy/elementwise/divide/divide_functional.rst", "functional/ivy/elementwise/divide/static_divide_container.rst", "functional/ivy/elementwise/equal.rst", "functional/ivy/elementwise/equal/equal_array.rst", "functional/ivy/elementwise/equal/equal_container.rst", "functional/ivy/elementwise/equal/equal_functional.rst", "functional/ivy/elementwise/erf.rst", "functional/ivy/elementwise/erf/erf_array.rst", "functional/ivy/elementwise/erf/erf_container.rst", "functional/ivy/elementwise/erf/erf_functional.rst", "functional/ivy/elementwise/exp.rst", "functional/ivy/elementwise/exp/exp_array.rst", "functional/ivy/elementwise/exp/exp_container.rst", "functional/ivy/elementwise/exp/exp_functional.rst", "functional/ivy/elementwise/expm1.rst", "functional/ivy/elementwise/expm1/expm1_array.rst", "functional/ivy/elementwise/expm1/expm1_container.rst", "functional/ivy/elementwise/expm1/expm1_functional.rst", "functional/ivy/elementwise/floor.rst", "functional/ivy/elementwise/floor/floor_array.rst", "functional/ivy/elementwise/floor/floor_container.rst", "functional/ivy/elementwise/floor/floor_functional.rst", "functional/ivy/elementwise/floor_divide.rst", "functional/ivy/elementwise/floor_divide/floor_divide_array.rst", "functional/ivy/elementwise/floor_divide/floor_divide_container.rst", "functional/ivy/elementwise/floor_divide/floor_divide_functional.rst", "functional/ivy/elementwise/greater.rst", "functional/ivy/elementwise/greater/greater_array.rst", "functional/ivy/elementwise/greater/greater_container.rst", "functional/ivy/elementwise/greater/greater_functional.rst", "functional/ivy/elementwise/greater_equal.rst", "functional/ivy/elementwise/greater_equal/greater_equal_array.rst", "functional/ivy/elementwise/greater_equal/greater_equal_container.rst", "functional/ivy/elementwise/greater_equal/greater_equal_functional.rst", "functional/ivy/elementwise/isfinite.rst", "functional/ivy/elementwise/isfinite/isfinite_array.rst", "functional/ivy/elementwise/isfinite/isfinite_container.rst", "functional/ivy/elementwise/isfinite/isfinite_functional.rst", "functional/ivy/elementwise/isinf.rst", "functional/ivy/elementwise/isinf/isinf_array.rst", "functional/ivy/elementwise/isinf/isinf_container.rst", "functional/ivy/elementwise/isinf/isinf_functional.rst", "functional/ivy/elementwise/isnan.rst", "functional/ivy/elementwise/isnan/isnan_array.rst", "functional/ivy/elementwise/isnan/isnan_container.rst", "functional/ivy/elementwise/isnan/isnan_functional.rst", "functional/ivy/elementwise/less.rst", "functional/ivy/elementwise/less/less_array.rst", "functional/ivy/elementwise/less/less_container.rst", "functional/ivy/elementwise/less/less_functional.rst", "functional/ivy/elementwise/less_equal.rst", "functional/ivy/elementwise/less_equal/less_equal_array.rst", "functional/ivy/elementwise/less_equal/less_equal_container.rst", "functional/ivy/elementwise/less_equal/less_equal_functional.rst", "functional/ivy/elementwise/log.rst", "functional/ivy/elementwise/log/log_array.rst", "functional/ivy/elementwise/log/log_container.rst", "functional/ivy/elementwise/log/log_functional.rst", "functional/ivy/elementwise/log10.rst", "functional/ivy/elementwise/log10/log10_array.rst", "functional/ivy/elementwise/log10/log10_container.rst", "functional/ivy/elementwise/log10/log10_functional.rst", "functional/ivy/elementwise/log1p.rst", "functional/ivy/elementwise/log1p/log1p_array.rst", "functional/ivy/elementwise/log1p/log1p_container.rst", "functional/ivy/elementwise/log1p/log1p_functional.rst", "functional/ivy/elementwise/log2.rst", "functional/ivy/elementwise/log2/log2_array.rst", "functional/ivy/elementwise/log2/log2_container.rst", "functional/ivy/elementwise/log2/log2_functional.rst", "functional/ivy/elementwise/logaddexp.rst", "functional/ivy/elementwise/logaddexp/logaddexp_array.rst", "functional/ivy/elementwise/logaddexp/logaddexp_container.rst", "functional/ivy/elementwise/logaddexp/logaddexp_functional.rst", "functional/ivy/elementwise/logical_and.rst", "functional/ivy/elementwise/logical_and/logical_and_array.rst", "functional/ivy/elementwise/logical_and/logical_and_container.rst", "functional/ivy/elementwise/logical_and/logical_and_functional.rst", "functional/ivy/elementwise/logical_not.rst", "functional/ivy/elementwise/logical_not/logical_not_array.rst", "functional/ivy/elementwise/logical_not/logical_not_container.rst", "functional/ivy/elementwise/logical_not/logical_not_functional.rst", "functional/ivy/elementwise/logical_or.rst", "functional/ivy/elementwise/logical_or/logical_or_array.rst", "functional/ivy/elementwise/logical_or/logical_or_container.rst", "functional/ivy/elementwise/logical_or/logical_or_functional.rst", "functional/ivy/elementwise/logical_xor.rst", "functional/ivy/elementwise/logical_xor/logical_xor_array.rst", "functional/ivy/elementwise/logical_xor/logical_xor_container.rst", "functional/ivy/elementwise/logical_xor/logical_xor_functional.rst", "functional/ivy/elementwise/maximum.rst", "functional/ivy/elementwise/minimum.rst", "functional/ivy/elementwise/multiply.rst", "functional/ivy/elementwise/multiply/multiply_array.rst", "functional/ivy/elementwise/multiply/multiply_container.rst", "functional/ivy/elementwise/multiply/multiply_functional.rst", "functional/ivy/elementwise/multiply/static_multiply_container.rst", "functional/ivy/elementwise/negative.rst", "functional/ivy/elementwise/negative/negative_array.rst", "functional/ivy/elementwise/negative/negative_container.rst", "functional/ivy/elementwise/negative/negative_functional.rst", "functional/ivy/elementwise/not_equal.rst", "functional/ivy/elementwise/not_equal/not_equal_array.rst", "functional/ivy/elementwise/not_equal/not_equal_container.rst", "functional/ivy/elementwise/not_equal/not_equal_functional.rst", "functional/ivy/elementwise/positive.rst", "functional/ivy/elementwise/positive/positive_array.rst", "functional/ivy/elementwise/positive/positive_container.rst", "functional/ivy/elementwise/positive/positive_functional.rst", "functional/ivy/elementwise/pow.rst", "functional/ivy/elementwise/pow/pow_array.rst", "functional/ivy/elementwise/pow/pow_container.rst", "functional/ivy/elementwise/pow/pow_functional.rst", "functional/ivy/elementwise/remainder.rst", "functional/ivy/elementwise/remainder/remainder_array.rst", "functional/ivy/elementwise/remainder/remainder_container.rst", "functional/ivy/elementwise/remainder/remainder_functional.rst", "functional/ivy/elementwise/round.rst", "functional/ivy/elementwise/round/round_array.rst", "functional/ivy/elementwise/round/round_container.rst", "functional/ivy/elementwise/round/round_functional.rst", "functional/ivy/elementwise/sign.rst", "functional/ivy/elementwise/sign/sign_array.rst", "functional/ivy/elementwise/sign/sign_container.rst", "functional/ivy/elementwise/sign/sign_functional.rst", "functional/ivy/elementwise/sin.rst", "functional/ivy/elementwise/sin/sin_array.rst", "functional/ivy/elementwise/sin/sin_container.rst", "functional/ivy/elementwise/sin/sin_functional.rst", "functional/ivy/elementwise/sinh.rst", "functional/ivy/elementwise/sinh/sinh_array.rst", "functional/ivy/elementwise/sinh/sinh_container.rst", "functional/ivy/elementwise/sinh/sinh_functional.rst", "functional/ivy/elementwise/sqrt.rst", "functional/ivy/elementwise/sqrt/sqrt_array.rst", "functional/ivy/elementwise/sqrt/sqrt_container.rst", "functional/ivy/elementwise/sqrt/sqrt_functional.rst", "functional/ivy/elementwise/square.rst", "functional/ivy/elementwise/square/square_array.rst", "functional/ivy/elementwise/square/square_container.rst", "functional/ivy/elementwise/square/square_functional.rst", "functional/ivy/elementwise/subtract.rst", "functional/ivy/elementwise/subtract/static_subtract_container.rst", "functional/ivy/elementwise/subtract/subtract_array.rst", "functional/ivy/elementwise/subtract/subtract_container.rst", "functional/ivy/elementwise/subtract/subtract_functional.rst", "functional/ivy/elementwise/tan.rst", "functional/ivy/elementwise/tan/static_tan_container.rst", "functional/ivy/elementwise/tan/tan_array.rst", "functional/ivy/elementwise/tan/tan_container.rst", "functional/ivy/elementwise/tan/tan_functional.rst", "functional/ivy/elementwise/tanh.rst", "functional/ivy/elementwise/tanh/static_tanh_container.rst", "functional/ivy/elementwise/tanh/tanh_array.rst", "functional/ivy/elementwise/tanh/tanh_container.rst", "functional/ivy/elementwise/tanh/tanh_functional.rst", "functional/ivy/elementwise/trunc.rst", "functional/ivy/elementwise/trunc/trunc_array.rst", "functional/ivy/elementwise/trunc/trunc_container.rst", "functional/ivy/elementwise/trunc/trunc_functional.rst", "functional/ivy/general.rst", "functional/ivy/general/all_equal.rst", "functional/ivy/general/all_equal/all_equal_array.rst", "functional/ivy/general/all_equal/all_equal_container.rst", "functional/ivy/general/all_equal/all_equal_functional.rst", "functional/ivy/general/all_equal/static_all_equal_container.rst", "functional/ivy/general/arg_info.rst", "functional/ivy/general/arg_names.rst", "functional/ivy/general/array_equal.rst", "functional/ivy/general/arrays_equal.rst", "functional/ivy/general/assert_supports_inplace.rst", "functional/ivy/general/cache_fn.rst", "functional/ivy/general/clip_matrix_norm.rst", "functional/ivy/general/clip_vector_norm.rst", "functional/ivy/general/clip_vector_norm/clip_vector_norm_container.rst", "functional/ivy/general/clip_vector_norm/clip_vector_norm_functional.rst", "functional/ivy/general/container_types.rst", "functional/ivy/general/copy_array.rst", "functional/ivy/general/cumprod.rst", "functional/ivy/general/cumsum.rst", "functional/ivy/general/current_backend_str.rst", "functional/ivy/general/default.rst", "functional/ivy/general/einops_rearrange.rst", "functional/ivy/general/einops_reduce.rst", "functional/ivy/general/einops_repeat.rst", "functional/ivy/general/exists.rst", "functional/ivy/general/floormod.rst", "functional/ivy/general/fourier_encode.rst", "functional/ivy/general/gather.rst", "functional/ivy/general/gather_nd.rst", "functional/ivy/general/gather_nd/gather_nd_array.rst", "functional/ivy/general/gather_nd/gather_nd_container.rst", "functional/ivy/general/gather_nd/gather_nd_functional.rst", "functional/ivy/general/gather_nd/static_gather_nd_container.rst", "functional/ivy/general/get_all_arrays_in_memory.rst", "functional/ivy/general/get_min_base.rst", "functional/ivy/general/get_min_denominator.rst", "functional/ivy/general/get_num_dims.rst", "functional/ivy/general/get_referrers_recursive.rst", "functional/ivy/general/has_nans.rst", "functional/ivy/general/indices_where.rst", "functional/ivy/general/inplace_arrays_supported.rst", "functional/ivy/general/inplace_decrement.rst", "functional/ivy/general/inplace_increment.rst", "functional/ivy/general/inplace_update.rst", "functional/ivy/general/inplace_variables_supported.rst", "functional/ivy/general/is_array.rst", "functional/ivy/general/is_ivy_array.rst", "functional/ivy/general/is_ivy_container.rst", "functional/ivy/general/is_native_array.rst", "functional/ivy/general/match_kwargs.rst", "functional/ivy/general/multiprocessing.rst", "functional/ivy/general/num_arrays_in_memory.rst", "functional/ivy/general/one_hot.rst", "functional/ivy/general/print_all_arrays_in_memory.rst", "functional/ivy/general/queue_timeout.rst", "functional/ivy/general/scatter_flat.rst", "functional/ivy/general/scatter_nd.rst", "functional/ivy/general/set_min_base.rst", "functional/ivy/general/set_min_denominator.rst", "functional/ivy/general/set_queue_timeout.rst", "functional/ivy/general/set_tmp_dir.rst", "functional/ivy/general/shape.rst", "functional/ivy/general/shape_to_tuple.rst", "functional/ivy/general/stable_divide.rst", "functional/ivy/general/stable_pow.rst", "functional/ivy/general/supports_inplace.rst", "functional/ivy/general/tmp_dir.rst", "functional/ivy/general/to_list.rst", "functional/ivy/general/to_numpy.rst", "functional/ivy/general/to_scalar.rst", "functional/ivy/general/try_else_none.rst", "functional/ivy/general/unstack.rst", "functional/ivy/general/value_is_nan.rst", "functional/ivy/gradients.rst", "functional/ivy/gradients/GradientTracking:\n    \"\"\"\"\"\"\n\n    # noinspection PyShadowingNames\n    def __init__.rst", "functional/ivy/gradients/adam_step.rst", "functional/ivy/gradients/adam_step/adam_step_array.rst", "functional/ivy/gradients/adam_step/adam_step_container.rst", "functional/ivy/gradients/adam_step/adam_step_functional.rst", "functional/ivy/gradients/adam_step/static_adam_step_container.rst", "functional/ivy/gradients/adam_update.rst", "functional/ivy/gradients/adam_update/adam_update_container.rst", "functional/ivy/gradients/adam_update/adam_update_functional.rst", "functional/ivy/gradients/adam_update/static_adam_update_container.rst", "functional/ivy/gradients/execute_with_gradients.rst", "functional/ivy/gradients/gradient_descent_update.rst", "functional/ivy/gradients/gradient_descent_update/gradient_descent_update_container.rst", "functional/ivy/gradients/gradient_descent_update/gradient_descent_update_functional.rst", "functional/ivy/gradients/gradient_descent_update/static_gradient_descent_update_container.rst", "functional/ivy/gradients/is_variable.rst", "functional/ivy/gradients/lamb_update.rst", "functional/ivy/gradients/lamb_update/lamb_update_container.rst", "functional/ivy/gradients/lamb_update/lamb_update_functional.rst", "functional/ivy/gradients/lamb_update/static_lamb_update_container.rst", "functional/ivy/gradients/lars_update.rst", "functional/ivy/gradients/lars_update/lars_update_container.rst", "functional/ivy/gradients/lars_update/lars_update_functional.rst", "functional/ivy/gradients/lars_update/static_lars_update_container.rst", "functional/ivy/gradients/optimizer_update.rst", "functional/ivy/gradients/optimizer_update/optimizer_update_container.rst", "functional/ivy/gradients/optimizer_update/optimizer_update_functional.rst", "functional/ivy/gradients/optimizer_update/static_optimizer_update_container.rst", "functional/ivy/gradients/set_with_grads.rst", "functional/ivy/gradients/stop_gradient.rst", "functional/ivy/gradients/unset_with_grads.rst", "functional/ivy/gradients/variable.rst", "functional/ivy/gradients/variable_data.rst", "functional/ivy/gradients/with_grads.rst", "functional/ivy/layers.rst", "functional/ivy/layers/conv1d.rst", "functional/ivy/layers/conv1d_transpose.rst", "functional/ivy/layers/conv2d.rst", "functional/ivy/layers/conv2d_transpose.rst", "functional/ivy/layers/conv3d.rst", "functional/ivy/layers/conv3d_transpose.rst", "functional/ivy/layers/depthwise_conv2d.rst", "functional/ivy/layers/dropout.rst", "functional/ivy/layers/linear.rst", "functional/ivy/layers/lstm_update.rst", "functional/ivy/layers/multi_head_attention.rst", "functional/ivy/layers/scaled_dot_product_attention.rst", "functional/ivy/linear_algebra.rst", "functional/ivy/linear_algebra/cholesky.rst", "functional/ivy/linear_algebra/cholesky/cholesky_array.rst", "functional/ivy/linear_algebra/cholesky/cholesky_functional.rst", "functional/ivy/linear_algebra/cross.rst", "functional/ivy/linear_algebra/cross/cross_array.rst", "functional/ivy/linear_algebra/cross/cross_functional.rst", "functional/ivy/linear_algebra/det.rst", "functional/ivy/linear_algebra/det/det_array.rst", "functional/ivy/linear_algebra/det/det_functional.rst", "functional/ivy/linear_algebra/diagonal.rst", "functional/ivy/linear_algebra/diagonal/diagonal_array.rst", "functional/ivy/linear_algebra/diagonal/diagonal_functional.rst", "functional/ivy/linear_algebra/eigh.rst", "functional/ivy/linear_algebra/eigh/eigh_array.rst", "functional/ivy/linear_algebra/eigh/eigh_functional.rst", "functional/ivy/linear_algebra/eigvalsh.rst", "functional/ivy/linear_algebra/eigvalsh/eigvalsh_array.rst", "functional/ivy/linear_algebra/eigvalsh/eigvalsh_functional.rst", "functional/ivy/linear_algebra/inv.rst", "functional/ivy/linear_algebra/inv/inv_array.rst", "functional/ivy/linear_algebra/inv/inv_functional.rst", "functional/ivy/linear_algebra/matmul.rst", "functional/ivy/linear_algebra/matmul/matmul_array.rst", "functional/ivy/linear_algebra/matmul/matmul_container.rst", "functional/ivy/linear_algebra/matmul/matmul_functional.rst", "functional/ivy/linear_algebra/matrix_norm.rst", "functional/ivy/linear_algebra/matrix_norm/matrix_norm_array.rst", "functional/ivy/linear_algebra/matrix_norm/matrix_norm_functional.rst", "functional/ivy/linear_algebra/matrix_power.rst", "functional/ivy/linear_algebra/matrix_rank.rst", "functional/ivy/linear_algebra/matrix_rank/matrix_rank_array.rst", "functional/ivy/linear_algebra/matrix_rank/matrix_rank_functional.rst", "functional/ivy/linear_algebra/matrix_transpose.rst", "functional/ivy/linear_algebra/matrix_transpose/matrix_transpose_array.rst", "functional/ivy/linear_algebra/matrix_transpose/matrix_transpose_functional.rst", "functional/ivy/linear_algebra/outer.rst", "functional/ivy/linear_algebra/outer/outer_array.rst", "functional/ivy/linear_algebra/outer/outer_functional.rst", "functional/ivy/linear_algebra/pinv.rst", "functional/ivy/linear_algebra/pinv/pinv_array.rst", "functional/ivy/linear_algebra/pinv/pinv_functional.rst", "functional/ivy/linear_algebra/qr.rst", "functional/ivy/linear_algebra/qr/qr_array.rst", "functional/ivy/linear_algebra/qr/qr_functional.rst", "functional/ivy/linear_algebra/slogdet.rst", "functional/ivy/linear_algebra/solve.rst", "functional/ivy/linear_algebra/solve/solve_array.rst", "functional/ivy/linear_algebra/solve/solve_functional.rst", "functional/ivy/linear_algebra/svd.rst", "functional/ivy/linear_algebra/svd/svd_array.rst", "functional/ivy/linear_algebra/svd/svd_functional.rst", "functional/ivy/linear_algebra/svdvals.rst", "functional/ivy/linear_algebra/svdvals/svdvals_array.rst", "functional/ivy/linear_algebra/svdvals/svdvals_functional.rst", "functional/ivy/linear_algebra/tensordot.rst", "functional/ivy/linear_algebra/tensordot/tensordot_array.rst", "functional/ivy/linear_algebra/tensordot/tensordot_functional.rst", "functional/ivy/linear_algebra/trace.rst", "functional/ivy/linear_algebra/trace/trace_array.rst", "functional/ivy/linear_algebra/trace/trace_functional.rst", "functional/ivy/linear_algebra/vecdot.rst", "functional/ivy/linear_algebra/vecdot/vecdot_array.rst", "functional/ivy/linear_algebra/vecdot/vecdot_functional.rst", "functional/ivy/linear_algebra/vector_norm.rst", "functional/ivy/linear_algebra/vector_norm/vector_norm_array.rst", "functional/ivy/linear_algebra/vector_norm/vector_norm_functional.rst", "functional/ivy/linear_algebra/vector_to_skew_symmetric_matrix.rst", "functional/ivy/linear_algebra/vector_to_skew_symmetric_matrix/vector_to_skew_symmetric_matrix_array.rst", "functional/ivy/linear_algebra/vector_to_skew_symmetric_matrix/vector_to_skew_symmetric_matrix_functional.rst", "functional/ivy/losses.rst", "functional/ivy/losses/binary_cross_entropy.rst", "functional/ivy/losses/binary_cross_entropy/binary_cross_entropy_array.rst", "functional/ivy/losses/binary_cross_entropy/binary_cross_entropy_container.rst", "functional/ivy/losses/binary_cross_entropy/binary_cross_entropy_functional.rst", "functional/ivy/losses/binary_cross_entropy/static_binary_cross_entropy_container.rst", "functional/ivy/losses/cross_entropy.rst", "functional/ivy/losses/cross_entropy/cross_entropy_array.rst", "functional/ivy/losses/cross_entropy/cross_entropy_container.rst", "functional/ivy/losses/cross_entropy/cross_entropy_functional.rst", "functional/ivy/losses/cross_entropy/static_cross_entropy_container.rst", "functional/ivy/losses/sparse_cross_entropy.rst", "functional/ivy/losses/sparse_cross_entropy/sparse_cross_entropy_array.rst", "functional/ivy/losses/sparse_cross_entropy/sparse_cross_entropy_container.rst", "functional/ivy/losses/sparse_cross_entropy/sparse_cross_entropy_functional.rst", "functional/ivy/losses/sparse_cross_entropy/static_sparse_cross_entropy_container.rst", "functional/ivy/manipulation.rst", "functional/ivy/manipulation/clip.rst", "functional/ivy/manipulation/clip/clip_array.rst", "functional/ivy/manipulation/clip/clip_container.rst", "functional/ivy/manipulation/clip/clip_functional.rst", "functional/ivy/manipulation/clip/static_clip_container.rst", "functional/ivy/manipulation/concat.rst", "functional/ivy/manipulation/concat/concat_array.rst", "functional/ivy/manipulation/concat/concat_container.rst", "functional/ivy/manipulation/concat/concat_functional.rst", "functional/ivy/manipulation/constant_pad.rst", "functional/ivy/manipulation/constant_pad/constant_pad_array.rst", "functional/ivy/manipulation/constant_pad/constant_pad_container.rst", "functional/ivy/manipulation/constant_pad/constant_pad_functional.rst", "functional/ivy/manipulation/expand_dims.rst", "functional/ivy/manipulation/expand_dims/expand_dims_array.rst", "functional/ivy/manipulation/expand_dims/expand_dims_container.rst", "functional/ivy/manipulation/expand_dims/expand_dims_functional.rst", "functional/ivy/manipulation/flip.rst", "functional/ivy/manipulation/flip/flip_array.rst", "functional/ivy/manipulation/flip/flip_container.rst", "functional/ivy/manipulation/flip/flip_functional.rst", "functional/ivy/manipulation/permute_dims.rst", "functional/ivy/manipulation/permute_dims/permute_dims_array.rst", "functional/ivy/manipulation/permute_dims/permute_dims_container.rst", "functional/ivy/manipulation/permute_dims/permute_dims_functional.rst", "functional/ivy/manipulation/repeat.rst", "functional/ivy/manipulation/repeat/repeat_array.rst", "functional/ivy/manipulation/repeat/repeat_container.rst", "functional/ivy/manipulation/repeat/repeat_functional.rst", "functional/ivy/manipulation/reshape.rst", "functional/ivy/manipulation/reshape/reshape_array.rst", "functional/ivy/manipulation/reshape/reshape_container.rst", "functional/ivy/manipulation/reshape/reshape_functional.rst", "functional/ivy/manipulation/roll.rst", "functional/ivy/manipulation/roll/roll_array.rst", "functional/ivy/manipulation/roll/roll_container.rst", "functional/ivy/manipulation/roll/roll_functional.rst", "functional/ivy/manipulation/roll/static_roll_container.rst", "functional/ivy/manipulation/split.rst", "functional/ivy/manipulation/squeeze.rst", "functional/ivy/manipulation/squeeze/squeeze_array.rst", "functional/ivy/manipulation/squeeze/squeeze_container.rst", "functional/ivy/manipulation/squeeze/squeeze_functional.rst", "functional/ivy/manipulation/stack.rst", "functional/ivy/manipulation/stack/stack_array.rst", "functional/ivy/manipulation/stack/stack_container.rst", "functional/ivy/manipulation/stack/stack_functional.rst", "functional/ivy/manipulation/swapaxes.rst", "functional/ivy/manipulation/swapaxes/swapaxes_array.rst", "functional/ivy/manipulation/swapaxes/swapaxes_container.rst", "functional/ivy/manipulation/swapaxes/swapaxes_functional.rst", "functional/ivy/manipulation/tile.rst", "functional/ivy/manipulation/tile/tile_array.rst", "functional/ivy/manipulation/tile/tile_container.rst", "functional/ivy/manipulation/tile/tile_functional.rst", "functional/ivy/manipulation/zero_pad.rst", "functional/ivy/manipulation/zero_pad/zero_pad_array.rst", "functional/ivy/manipulation/zero_pad/zero_pad_container.rst", "functional/ivy/manipulation/zero_pad/zero_pad_functional.rst", "functional/ivy/meta.rst", "functional/ivy/meta/fomaml_step.rst", "functional/ivy/meta/maml_step.rst", "functional/ivy/meta/reptile_step.rst", "functional/ivy/nest.rst", "functional/ivy/nest/all_nested_indices.rst", "functional/ivy/nest/copy_nest.rst", "functional/ivy/nest/index_nest.rst", "functional/ivy/nest/insert_into_nest_at_index.rst", "functional/ivy/nest/insert_into_nest_at_indices.rst", "functional/ivy/nest/map.rst", "functional/ivy/nest/map_nest_at_index.rst", "functional/ivy/nest/map_nest_at_indices.rst", "functional/ivy/nest/multi_index_nest.rst", "functional/ivy/nest/nested_any.rst", "functional/ivy/nest/nested_indices_where.rst", "functional/ivy/nest/nested_map.rst", "functional/ivy/nest/nested_multi_map.rst", "functional/ivy/nest/prune_nest_at_index.rst", "functional/ivy/nest/prune_nest_at_indices.rst", "functional/ivy/nest/set_nest_at_index.rst", "functional/ivy/nest/set_nest_at_indices.rst", "functional/ivy/norms.rst", "functional/ivy/norms/layer_norm.rst", "functional/ivy/norms/layer_norm/layer_norm_array.rst", "functional/ivy/norms/layer_norm/layer_norm_container.rst", "functional/ivy/norms/layer_norm/layer_norm_functional.rst", "functional/ivy/random.rst", "functional/ivy/random/multinomial.rst", "functional/ivy/random/randint.rst", "functional/ivy/random/randint/randint_functional.rst", "functional/ivy/random/randint/static_randint_container.rst", "functional/ivy/random/random_normal.rst", "functional/ivy/random/random_uniform.rst", "functional/ivy/random/random_uniform/random_uniform_container.rst", "functional/ivy/random/random_uniform/random_uniform_functional.rst", "functional/ivy/random/random_uniform/static_random_uniform_container.rst", "functional/ivy/random/seed.rst", "functional/ivy/random/shuffle.rst", "functional/ivy/searching.rst", "functional/ivy/searching/argmax.rst", "functional/ivy/searching/argmin.rst", "functional/ivy/searching/nonzero.rst", "functional/ivy/searching/where.rst", "functional/ivy/set.rst", "functional/ivy/set/unique_all.rst", "functional/ivy/set/unique_counts.rst", "functional/ivy/set/unique_inverse.rst", "functional/ivy/set/unique_values.rst", "functional/ivy/sorting.rst", "functional/ivy/sorting/argsort.rst", "functional/ivy/sorting/argsort/argsort_array.rst", "functional/ivy/sorting/argsort/argsort_container.rst", "functional/ivy/sorting/argsort/argsort_functional.rst", "functional/ivy/sorting/argsort/static_argsort_container.rst", "functional/ivy/sorting/sort.rst", "functional/ivy/sorting/sort/sort_array.rst", "functional/ivy/sorting/sort/sort_container.rst", "functional/ivy/sorting/sort/sort_functional.rst", "functional/ivy/sorting/sort/static_sort_container.rst", "functional/ivy/statistical.rst", "functional/ivy/statistical/einsum.rst", "functional/ivy/statistical/einsum/einsum_array.rst", "functional/ivy/statistical/einsum/einsum_container.rst", "functional/ivy/statistical/einsum/einsum_functional.rst", "functional/ivy/statistical/max.rst", "functional/ivy/statistical/max/max_array.rst", "functional/ivy/statistical/max/max_container.rst", "functional/ivy/statistical/max/max_functional.rst", "functional/ivy/statistical/mean.rst", "functional/ivy/statistical/mean/mean_array.rst", "functional/ivy/statistical/mean/mean_container.rst", "functional/ivy/statistical/mean/mean_functional.rst", "functional/ivy/statistical/min.rst", "functional/ivy/statistical/min/min_array.rst", "functional/ivy/statistical/min/min_container.rst", "functional/ivy/statistical/min/min_functional.rst", "functional/ivy/statistical/prod.rst", "functional/ivy/statistical/prod/prod_array.rst", "functional/ivy/statistical/prod/prod_container.rst", "functional/ivy/statistical/prod/prod_functional.rst", "functional/ivy/statistical/std.rst", "functional/ivy/statistical/std/std_array.rst", "functional/ivy/statistical/std/std_container.rst", "functional/ivy/statistical/std/std_functional.rst", "functional/ivy/statistical/sum.rst", "functional/ivy/statistical/sum/sum_array.rst", "functional/ivy/statistical/sum/sum_container.rst", "functional/ivy/statistical/sum/sum_functional.rst", "functional/ivy/statistical/var.rst", "functional/ivy/statistical/var/var_array.rst", "functional/ivy/statistical/var/var_container.rst", "functional/ivy/statistical/var/var_functional.rst", "functional/ivy/utility.rst", "functional/ivy/utility/all.rst", "functional/ivy/utility/all/all_array.rst", "functional/ivy/utility/all/all_container.rst", "functional/ivy/utility/all/all_functional.rst", "functional/ivy/utility/any.rst", "functional/ivy/utility/any/any_array.rst", "functional/ivy/utility/any/any_container.rst", "functional/ivy/utility/any/any_functional.rst", "index.rst", "index_append.rst", "index_prepend.rst", "inspection.rst", "inspection/add_array_specs.rst", "inspection/fn_array_spec.rst", "roadmap.rst", "stateful/activations.rst", "stateful/activations/GEGLU.rst", "stateful/activations/GELU.rst", "stateful/converters.rst", "stateful/converters/to_ivy_module.rst", "stateful/initializers.rst", "stateful/initializers/Constant:\n    def __init__.rst", "stateful/initializers/FirstLayerSiren.rst", "stateful/initializers/GlorotUniform.rst", "stateful/initializers/KaimingNormal:\n    def __init__.rst", "stateful/initializers/Ones.rst", "stateful/initializers/Siren.rst", "stateful/initializers/Uniform:\n    def __init__.rst", "stateful/initializers/Zeros.rst", "stateful/layers.rst", "stateful/layers/Conv1D.rst", "stateful/layers/Conv1DTranspose.rst", "stateful/layers/Conv2D.rst", "stateful/layers/Conv2DTranspose.rst", "stateful/layers/Conv3D.rst", "stateful/layers/Conv3DTranspose.rst", "stateful/layers/DepthwiseConv2D.rst", "stateful/layers/Dropout.rst", "stateful/layers/LSTM.rst", "stateful/layers/Linear.rst", "stateful/layers/MultiHeadAttention.rst", "stateful/module.rst", "stateful/module/Module.rst", "stateful/norms.rst", "stateful/norms/LayerNorm.rst", "stateful/optimizers.rst", "stateful/optimizers/Adam.rst", "stateful/optimizers/LAMB.rst", "stateful/optimizers/LARS.rst", "stateful/optimizers/Optimizer.rst", "stateful/optimizers/SGD.rst", "stateful/sequential.rst", "stateful/sequential/Sequential.rst", "supported_frameworks.rst", "verbosity.rst", "verbosity/cprint.rst"], "titles": ["Activations", "ArrayWithActivations", "Array methods", "abs array", "acos array", "acosh array", "adam_step array", "add array", "add_ivy_array_instance_methods array", "all array", "all_equal array", "any array", "argsort array", "asin array", "asinh array", "atan array", "atan2 array", "atanh array", "binary_cross_entropy array", "bitwise_and array", "bitwise_invert array", "bitwise_left_shift array", "bitwise_or array", "bitwise_right_shift array", "bitwise_xor array", "can_cast array", "ceil array", "cholesky array", "clip array", "concat array", "constant_pad array", "cos array", "cosh array", "cross array", "cross_entropy array", "det array", "diagonal array", "divide array", "eigh array", "eigvalsh array", "einsum array", "equal array", "erf array", "exp array", "expand_dims array", "expm1 array", "flip array", "floor array", "floor_divide array", "gather_nd array", "greater array", "greater_equal array", "inv array", "isfinite array", "isinf array", "isnan array", "layer_norm array", "less array", "less_equal array", "log array", "log10 array", "log1p array", "log2 array", "logaddexp array", "logical_and array", "logical_not array", "logical_or array", "logical_xor array", "matmul array", "matrix_norm array", "matrix_rank array", "matrix_transpose array", "max array", "mean array", "min array", "multiply array", "negative array", "not_equal array", "outer array", "permute_dims array", "pinv array", "positive array", "pow array", "prod array", "qr array", "remainder array", "repeat array", "reshape array", "roll array", "round array", "sign array", "sin array", "sinh array", "solve array", "sort array", "sparse_cross_entropy array", "sqrt array", "square array", "squeeze array", "stack array", "std array", "subtract array", "sum array", "svd array", "svdvals array", "swapaxes array", "tan array", "tanh array", "tensordot array", "tile array", "trace array", "trunc array", "var array", "vecdot array", "vector_norm array", "vector_to_skew_symmetric_matrix array", "zero_pad array", "Conversions", "args_to_ivy", "args_to_native", "to_ivy", "to_native", "Creation", "ArrayWithCreation", "Data type", "ArrayWithDataTypes", "Device", "ArrayWithDevice", "Elementwise", "ArrayWithElementwise", "General", "ArrayWithGeneral", "Gradients", "ArrayWithGradients", "Image", "ArrayWithImage", "Layers", "ArrayWithLayers", "Linear algebra", "ArrayWithLinearAlgebra", "Losses", "ArrayWithLosses", "Manipulation", "ArrayWithManipulation", "Norms", "ArrayWithNorms", "Random", "ArrayWithRandom", "Searching", "ArrayWithSearching", "Set", "ArrayWithSet", "Sorting", "ArrayWithSorting", "Statistical", "ArrayWithStatistical", "Utility", "ArrayWithUtility", "Wrapping", "add_ivy_array_instance_methods", "Backend handler", "&lt;no title&gt;", "choose_random_backend", "clear_backend_stack", "current_backend", "get_backend", "set_backend", "try_import_ivy_jax", "try_import_ivy_mxnet", "try_import_ivy_numpy", "try_import_ivy_tf", "try_import_ivy_torch", "unset_backend", "Background", "ML Explosion", "Standardization", "Why Unify?", "Activations", "ContainerWithActivations", "Base", "ContainerBase", "Container", "Container", "MultiDevContainer", "Container methods", "abs container", "acos container", "acosh container", "adam_step container", "adam_update container", "add container", "add_ivy_container_instance_methods container", "all container", "all_equal container", "any container", "argsort container", "asin container", "asinh container", "at_dev container", "at_devs container", "atan container", "atan2 container", "atanh container", "binary_cross_entropy container", "bitwise_and container", "bitwise_invert container", "bitwise_left_shift container", "bitwise_or container", "bitwise_right_shift container", "bitwise_xor container", "can_cast container", "ceil container", "clip container", "clip_vector_norm container", "concat container", "constant_pad container", "cos container", "cosh container", "cross_entropy container", "divide container", "einsum container", "equal container", "erf container", "exp container", "expand_dims container", "expm1 container", "flip container", "floor container", "floor_divide container", "gather_nd container", "gradient_descent_update container", "greater container", "greater_equal container", "isfinite container", "isinf container", "isnan container", "lamb_update container", "lars_update container", "layer_norm container", "less container", "less_equal container", "log container", "log10 container", "log1p container", "log2 container", "logaddexp container", "logical_and container", "logical_not container", "logical_or container", "logical_xor container", "matmul container", "max container", "mean container", "min container", "multiply container", "negative container", "not_equal container", "optimizer_update container", "permute_dims container", "positive container", "pow container", "prod container", "random_uniform container", "remainder container", "repeat container", "reshape container", "roll container", "round container", "sign container", "sin container", "sinh container", "sort container", "sparse_cross_entropy container", "sqrt container", "square container", "squeeze container", "stack container", "static_abs container", "static_adam_step container", "static_adam_update container", "static_add container", "static_all_equal container", "static_argsort container", "static_binary_cross_entropy container", "static_can_cast container", "static_clip container", "static_cross_entropy container", "static_divide container", "static_gather_nd container", "static_gradient_descent_update container", "static_lamb_update container", "static_lars_update container", "static_multiply container", "static_optimizer_update container", "static_randint container", "static_random_uniform container", "static_roll container", "static_sort container", "static_sparse_cross_entropy container", "static_subtract container", "static_tan container", "static_tanh container", "std container", "subtract container", "sum container", "swapaxes container", "tan container", "tanh container", "tile container", "trunc container", "var container", "zero_pad container", "Creation", "ContainerWithCreation", "Data type", "ContainerWithDataTypes", "Device", "ContainerWithDevice", "Elementwise", "ContainerWithElementwise", "General", "ContainerWithGeneral", "Gradients", "ContainerWithGradients", "Image", "ContainerWithImage", "Layers", "ContainerWithLayers", "Linear algebra", "ContainerWithLinearAlgebra", "Losses", "ContainerWithLosses", "Manipulation", "ContainerWithManipulation", "Norms", "ContainerWithNorms", "Random", "ContainerWithRandom", "Searching", "ContainerWithSearching", "Set", "ContainerWithSet", "Sorting", "ContainerWithSorting", "Statistical", "ContainerWithStatistical", "Utility", "ContainerWithUtility", "Wrapping", "add_ivy_container_instance_methods", "Contributing", "Setting Up", "The Basics", "Open Tasks", "Building the Docs", "Deep Dive", "Navigating the Code", "Docstrings", "Docstring Examples", "Array API Tests", "Ivy Tests", "Function Types", "Backend Setting", "Function Wrapping", "Arrays", "Containers", "Data Types", "Devices", "Inplace Updates", "Function Arguments", "Design", "Building Blocks", "Ivy as a Framework", "Ivy Array", "Ivy Container", "Ivy Stateful API", "Ivy as a Transpiler", "Ivy", "Ivy builder", "Ivy ecosystem", "Ivy gym", "Ivy mech", "Ivy memory", "Ivy models", "Ivy robot", "Ivy vision", "Extensions", "Applied Libraries", "FAQ", "Func wrapper", "handle_nestable", "handle_out_argument", "infer_device", "infer_dtype", "inputs_to_ivy_arrays", "inputs_to_native_arrays", "outputs_to_ivy_arrays", "to_native_arrays_and_back", "&lt;no title&gt;", "Activations", "gelu", "leaky_relu", "relu", "sigmoid", "softmax", "softplus", "tanh", "Compilation", "compile", "Constants", "Creation", "arange", "asarray", "empty", "empty_like", "eye", "from_dlpack", "full", "full_like", "linspace", "logspace", "meshgrid", "native_array", "ones", "ones_like", "tril", "triu", "zeros", "zeros_like", "Data type", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "as_ivy_dtype", "as_native_dtype", "astype", "broadcast_arrays", "broadcast_to", "can_cast", "ivy.Array.can_cast", "ivy.Container.can_cast", "ivy.can_cast", "ivy.Container.static_can_cast", "closest_valid_dtype", "default_dtype", "default_float_dtype", "default_int_dtype", "dtype", "dtype_bits", "finfo", "function_supported_dtypes", "function_unsupported_dtypes", "iinfo", "invalid_dtype", "is_float_dtype", "is_int_dtype", "promote_types", "result_type", "set_default_dtype", "set_default_float_dtype", "set_default_int_dtype", "type_promote_arrays", "unset_default_dtype", "unset_default_float_dtype", "unset_default_int_dtype", "valid_dtype", "Device", "&lt;no title&gt;", "DevClonedItem", "DevClonedIter", "DevClonedNest", "DevDistItem", "DevDistIter", "DevDistNest", "&lt;no title&gt;", "DevMapper", "DevMapperMultiProc", "&lt;no title&gt;", "MultiDevItem", "MultiDevIter", "MultiDevNest", "Profiler", "as_ivy_dev", "as_native_dev", "clear_mem_on_dev", "default_device", "dev", "dev_clone", "dev_clone_array", "dev_clone_iter", "dev_clone_nest", "dev_dist", "dev_dist_array", "dev_dist_iter", "dev_dist_nest", "dev_unify", "dev_unify_array", "dev_unify_iter", "dev_unify_nest", "dev_util", "get_all_ivy_arrays_on_dev", "gpu_is_available", "num_cpu_cores", "num_gpus", "num_ivy_arrays_on_dev", "percent_used_mem_on_dev", "print_all_ivy_arrays_on_dev", "set_default_device", "set_split_factor", "split_factor", "split_func_call", "to_device", "total_mem_on_dev", "tpu_is_available", "unset_default_device", "used_mem_on_dev", "Elementwise", "abs", "ivy.Array.abs", "ivy.Container.abs", "ivy.abs", "ivy.Container.static_abs", "acos", "ivy.Array.acos", "ivy.Container.acos", "ivy.acos", "acosh", "ivy.Array.acosh", "ivy.Container.acosh", "ivy.acosh", "add", "ivy.Array.add", "ivy.Container.add", "ivy.add", "ivy.Container.static_add", "asin", "ivy.Array.asin", "ivy.Container.asin", "ivy.asin", "asinh", "ivy.Array.asinh", "ivy.Container.asinh", "ivy.asinh", "atan", "ivy.Array.atan", "ivy.Container.atan", "ivy.atan", "atan2", "ivy.Array.atan2", "ivy.Container.atan2", "ivy.atan2", "atanh", "ivy.Array.atanh", "ivy.Container.atanh", "ivy.atanh", "bitwise_and", "ivy.Array.bitwise_and", "ivy.Container.bitwise_and", "ivy.bitwise_and", "bitwise_invert", "ivy.Array.bitwise_invert", "ivy.Container.bitwise_invert", "ivy.bitwise_invert", "bitwise_left_shift", "ivy.Array.bitwise_left_shift", "ivy.Container.bitwise_left_shift", "ivy.bitwise_left_shift", "bitwise_or", "ivy.Array.bitwise_or", "ivy.Container.bitwise_or", "ivy.bitwise_or", "bitwise_right_shift", "ivy.Array.bitwise_right_shift", "ivy.Container.bitwise_right_shift", "ivy.bitwise_right_shift", "bitwise_xor", "ivy.Array.bitwise_xor", "ivy.Container.bitwise_xor", "ivy.bitwise_xor", "ceil", "ivy.Array.ceil", "ivy.Container.ceil", "ivy.ceil", "cos", "ivy.Array.cos", "ivy.Container.cos", "ivy.cos", "cosh", "ivy.Array.cosh", "ivy.Container.cosh", "ivy.cosh", "divide", "ivy.Array.divide", "ivy.Container.divide", "ivy.divide", "ivy.Container.static_divide", "equal", "ivy.Array.equal", "ivy.Container.equal", "ivy.equal", "erf", "ivy.Array.erf", "ivy.Container.erf", "ivy.erf", "exp", "ivy.Array.exp", "ivy.Container.exp", "ivy.exp", "expm1", "ivy.Array.expm1", "ivy.Container.expm1", "ivy.expm1", "floor", "ivy.Array.floor", "ivy.Container.floor", "ivy.floor", "floor_divide", "ivy.Array.floor_divide", "ivy.Container.floor_divide", "ivy.floor_divide", "greater", "ivy.Array.greater", "ivy.Container.greater", "ivy.greater", "greater_equal", "ivy.Array.greater_equal", "ivy.Container.greater_equal", "ivy.greater_equal", "isfinite", "ivy.Array.isfinite", "ivy.Container.isfinite", "ivy.isfinite", "isinf", "ivy.Array.isinf", "ivy.Container.isinf", "ivy.isinf", "isnan", "ivy.Array.isnan", "ivy.Container.isnan", "ivy.isnan", "less", "ivy.Array.less", "ivy.Container.less", "ivy.less", "less_equal", "ivy.Array.less_equal", "ivy.Container.less_equal", "ivy.less_equal", "log", "ivy.Array.log", "ivy.Container.log", "ivy.log", "log10", "ivy.Array.log10", "ivy.Container.log10", "ivy.log10", "log1p", "ivy.Array.log1p", "ivy.Container.log1p", "ivy.log1p", "log2", "ivy.Array.log2", "ivy.Container.log2", "ivy.log2", "logaddexp", "ivy.Array.logaddexp", "ivy.Container.logaddexp", "ivy.logaddexp", "logical_and", "ivy.Array.logical_and", "ivy.Container.logical_and", "ivy.logical_and", "logical_not", "ivy.Array.logical_not", "ivy.Container.logical_not", "ivy.logical_not", "logical_or", "ivy.Array.logical_or", "ivy.Container.logical_or", "ivy.logical_or", "logical_xor", "ivy.Array.logical_xor", "ivy.Container.logical_xor", "ivy.logical_xor", "maximum", "minimum", "multiply", "ivy.Array.multiply", "ivy.Container.multiply", "ivy.multiply", "ivy.Container.static_multiply", "negative", "ivy.Array.negative", "ivy.Container.negative", "ivy.negative", "not_equal", "ivy.Array.not_equal", "ivy.Container.not_equal", "ivy.not_equal", "positive", "ivy.Array.positive", "ivy.Container.positive", "ivy.positive", "pow", "ivy.Array.pow", "ivy.Container.pow", "ivy.pow", "remainder", "ivy.Array.remainder", "ivy.Container.remainder", "ivy.remainder", "round", "ivy.Array.round", "ivy.Container.round", "ivy.round", "sign", "ivy.Array.sign", "ivy.Container.sign", "ivy.sign", "sin", "ivy.Array.sin", "ivy.Container.sin", "ivy.sin", "sinh", "ivy.Array.sinh", "ivy.Container.sinh", "ivy.sinh", "sqrt", "ivy.Array.sqrt", "ivy.Container.sqrt", "ivy.sqrt", "square", "ivy.Array.square", "ivy.Container.square", "ivy.square", "subtract", "ivy.Container.static_subtract", "ivy.Array.subtract", "ivy.Container.subtract", "ivy.subtract", "tan", "ivy.Container.static_tan", "ivy.Array.tan", "ivy.Container.tan", "ivy.tan", "tanh", "ivy.Container.static_tanh", "ivy.Array.tanh", "ivy.Container.tanh", "ivy.tanh", "trunc", "ivy.Array.trunc", "ivy.Container.trunc", "ivy.trunc", "General", "all_equal", "ivy.Array.all_equal", "ivy.Container.all_equal", "ivy.all_equal", "ivy.Container.static_all_equal", "arg_info", "arg_names", "array_equal", "arrays_equal", "assert_supports_inplace", "cache_fn", "clip_matrix_norm", "clip_vector_norm", "ivy.Container.clip_vector_norm", "ivy.clip_vector_norm", "container_types", "copy_array", "cumprod", "cumsum", "current_backend_str", "default", "einops_rearrange", "einops_reduce", "einops_repeat", "exists", "floormod", "fourier_encode", "gather", "gather_nd", "ivy.Array.gather_nd", "ivy.Container.gather_nd", "ivy.gather_nd", "ivy.Container.static_gather_nd", "get_all_arrays_in_memory", "get_min_base", "get_min_denominator", "get_num_dims", "get_referrers_recursive", "has_nans", "indices_where", "inplace_arrays_supported", "inplace_decrement", "inplace_increment", "inplace_update", "inplace_variables_supported", "is_array", "is_ivy_array", "is_ivy_container", "is_native_array", "match_kwargs", "multiprocessing", "num_arrays_in_memory", "one_hot", "print_all_arrays_in_memory", "queue_timeout", "scatter_flat", "scatter_nd", "set_min_base", "set_min_denominator", "set_queue_timeout", "set_tmp_dir", "shape", "shape_to_tuple", "stable_divide", "stable_pow", "supports_inplace", "tmp_dir", "to_list", "to_numpy", "to_scalar", "try_else_none", "unstack", "value_is_nan", "Gradients", "&lt;no title&gt;", "adam_step", "ivy.Array.adam_step", "ivy.Container.adam_step", "ivy.adam_step", "ivy.Container.static_adam_step", "adam_update", "ivy.Container.adam_update", "ivy.adam_update", "ivy.Container.static_adam_update", "execute_with_gradients", "gradient_descent_update", "ivy.Container.gradient_descent_update", "ivy.gradient_descent_update", "ivy.Container.static_gradient_descent_update", "is_variable", "lamb_update", "ivy.Container.lamb_update", "ivy.lamb_update", "ivy.Container.static_lamb_update", "lars_update", "ivy.Container.lars_update", "ivy.lars_update", "ivy.Container.static_lars_update", "optimizer_update", "ivy.Container.optimizer_update", "ivy.optimizer_update", "ivy.Container.static_optimizer_update", "set_with_grads", "stop_gradient", "unset_with_grads", "variable", "variable_data", "with_grads", "Layers", "conv1d", "conv1d_transpose", "conv2d", "conv2d_transpose", "conv3d", "conv3d_transpose", "depthwise_conv2d", "dropout", "linear", "lstm_update", "multi_head_attention", "scaled_dot_product_attention", "Linear algebra", "cholesky", "ivy.Array.cholesky", "ivy.cholesky", "cross", "ivy.Array.cross", "ivy.cross", "det", "ivy.Array.det", "ivy.det", "diagonal", "ivy.Array.diagonal", "ivy.diagonal", "eigh", "ivy.Array.eigh", "ivy.eigh", "eigvalsh", "ivy.Array.eigvalsh", "ivy.eigvalsh", "inv", "ivy.Array.inv", "ivy.inv", "matmul", "ivy.Array.matmul", "ivy.Container.matmul", "ivy.matmul", "matrix_norm", "ivy.Array.matrix_norm", "ivy.matrix_norm", "matrix_power", "matrix_rank", "ivy.Array.matrix_rank", "ivy.matrix_rank", "matrix_transpose", "ivy.Array.matrix_transpose", "ivy.matrix_transpose", "outer", "ivy.Array.outer", "ivy.outer", "pinv", "ivy.Array.pinv", "ivy.pinv", "qr", "ivy.Array.qr", "ivy.qr", "slogdet", "solve", "ivy.Array.solve", "ivy.solve", "svd", "ivy.Array.svd", "ivy.svd", "svdvals", "ivy.Array.svdvals", "ivy.svdvals", "tensordot", "ivy.Array.tensordot", "ivy.tensordot", "trace", "ivy.Array.trace", "ivy.trace", "vecdot", "ivy.Array.vecdot", "ivy.vecdot", "vector_norm", "ivy.Array.vector_norm", "ivy.vector_norm", "vector_to_skew_symmetric_matrix", "ivy.Array.vector_to_skew_symmetric_matrix", "ivy.vector_to_skew_symmetric_matrix", "Losses", "binary_cross_entropy", "ivy.Array.binary_cross_entropy", "ivy.Container.binary_cross_entropy", "ivy.binary_cross_entropy", "ivy.Container.static_binary_cross_entropy", "cross_entropy", "ivy.Array.cross_entropy", "ivy.Container.cross_entropy", "ivy.cross_entropy", "ivy.Container.static_cross_entropy", "sparse_cross_entropy", "ivy.Array.sparse_cross_entropy", "ivy.Container.sparse_cross_entropy", "ivy.sparse_cross_entropy", "ivy.Container.static_sparse_cross_entropy", "Manipulation", "clip", "ivy.Array.clip", "ivy.Container.clip", "ivy.clip", "ivy.Container.static_clip", "concat", "ivy.Array.concat", "ivy.Container.concat", "ivy.concat", "constant_pad", "ivy.Array.constant_pad", "ivy.Container.constant_pad", "ivy.constant_pad", "expand_dims", "ivy.Array.expand_dims", "ivy.Container.expand_dims", "ivy.expand_dims", "flip", "ivy.Array.flip", "ivy.Container.flip", "ivy.flip", "permute_dims", "ivy.Array.permute_dims", "ivy.Container.permute_dims", "ivy.permute_dims", "repeat", "ivy.Array.repeat", "ivy.Container.repeat", "ivy.repeat", "reshape", "ivy.Array.reshape", "ivy.Container.reshape", "ivy.reshape", "roll", "ivy.Array.roll", "ivy.Container.roll", "ivy.roll", "ivy.Container.static_roll", "split", "squeeze", "ivy.Array.squeeze", "ivy.Container.squeeze", "ivy.squeeze", "stack", "ivy.Array.stack", "ivy.Container.stack", "ivy.stack", "swapaxes", "ivy.Array.swapaxes", "ivy.Container.swapaxes", "ivy.swapaxes", "tile", "ivy.Array.tile", "ivy.Container.tile", "ivy.tile", "zero_pad", "ivy.Array.zero_pad", "ivy.Container.zero_pad", "ivy.zero_pad", "Meta", "fomaml_step", "maml_step", "reptile_step", "Nest", "all_nested_indices", "copy_nest", "index_nest", "insert_into_nest_at_index", "insert_into_nest_at_indices", "map", "map_nest_at_index", "map_nest_at_indices", "multi_index_nest", "nested_any", "nested_indices_where", "nested_map", "nested_multi_map", "prune_nest_at_index", "prune_nest_at_indices", "set_nest_at_index", "set_nest_at_indices", "Norms", "layer_norm", "ivy.Array.layer_norm", "ivy.Container.layer_norm", "ivy.layer_norm", "Random", "multinomial", "randint", "ivy.randint", "ivy.Container.static_randint", "random_normal", "random_uniform", "ivy.Container.random_uniform", "ivy.random_uniform", "ivy.Container.static_random_uniform", "seed", "shuffle", "Searching", "argmax", "argmin", "nonzero", "where", "Set", "unique_all", "unique_counts", "unique_inverse", "unique_values", "Sorting", "argsort", "ivy.Array.argsort", "ivy.Container.argsort", "ivy.argsort", "ivy.Container.static_argsort", "sort", "ivy.Array.sort", "ivy.Container.sort", "ivy.sort", "ivy.Container.static_sort", "Statistical", "einsum", "ivy.Array.einsum", "ivy.Container.einsum", "ivy.einsum", "max", "ivy.Array.max", "ivy.Container.max", "ivy.max", "mean", "ivy.Array.mean", "ivy.Container.mean", "ivy.mean", "min", "ivy.Array.min", "ivy.Container.min", "ivy.min", "prod", "ivy.Array.prod", "ivy.Container.prod", "ivy.prod", "std", "ivy.Array.std", "ivy.Container.std", "ivy.std", "sum", "ivy.Array.sum", "ivy.Container.sum", "ivy.sum", "var", "ivy.Array.var", "ivy.Container.var", "ivy.var", "Utility", "all", "ivy.Array.all", "ivy.Container.all", "ivy.all", "any", "ivy.Array.any", "ivy.Container.any", "ivy.any", "Contents", "&lt;no title&gt;", "&lt;no title&gt;", "Inspection", "add_array_specs", "fn_array_spec", "Roadmap", "Activations", "GEGLU", "GELU", "Converters", "to_ivy_module", "Initializers", "&lt;no title&gt;", "FirstLayerSiren", "GlorotUniform", "&lt;no title&gt;", "Ones", "Siren", "&lt;no title&gt;", "Zeros", "Layers", "Conv1D", "Conv1DTranspose", "Conv2D", "Conv2DTranspose", "Conv3D", "Conv3DTranspose", "DepthwiseConv2D", "Dropout", "LSTM", "Linear", "MultiHeadAttention", "Module", "Module", "Norms", "LayerNorm", "Optimizers", "Adam", "LAMB", "LARS", "Optimizer", "SGD", "Sequential", "Sequential", "&lt;no title&gt;", "Verbosity", "cprint"], "terms": {"class": [0, 1, 2, 8, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 166, 172, 177, 178, 179, 180, 181, 182, 183, 184, 188, 191, 278, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 353, 354, 357, 358, 360, 364, 365, 366, 367, 369, 371, 372, 374, 375, 376, 386, 387, 388, 429, 452, 466, 468, 469, 470, 471, 472, 473, 475, 476, 478, 479, 480, 481, 754, 761, 798, 804, 823, 828, 830, 832, 834, 861, 1026, 1028, 1038, 1061, 1064, 1124, 1131, 1132, 1133, 1134, 1135, 1136, 1138, 1139, 1141, 1142, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168], "ivi": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 352, 353, 354, 355, 357, 359, 361, 362, 363, 365, 366, 367, 368, 369, 370, 386, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 433, 434, 435, 436, 437, 438, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 468, 469, 470, 471, 472, 473, 475, 476, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 522, 526, 530, 535, 539, 543, 547, 551, 555, 559, 563, 567, 571, 575, 579, 583, 587, 591, 596, 600, 604, 608, 612, 616, 620, 624, 628, 632, 636, 640, 644, 648, 652, 656, 660, 664, 668, 672, 676, 680, 684, 685, 686, 691, 695, 699, 703, 707, 711, 715, 719, 723, 727, 731, 735, 740, 745, 750, 754, 755, 760, 761, 762, 763, 764, 765, 766, 767, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 830, 835, 839, 840, 844, 845, 849, 853, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 880, 883, 886, 889, 892, 895, 898, 902, 905, 906, 909, 912, 915, 918, 921, 922, 925, 928, 931, 934, 937, 940, 943, 946, 947, 952, 957, 962, 963, 968, 972, 976, 980, 984, 988, 992, 996, 1001, 1002, 1006, 1010, 1014, 1018, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1049, 1050, 1051, 1054, 1055, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1077, 1082, 1083, 1087, 1091, 1095, 1099, 1103, 1107, 1111, 1115, 1116, 1120, 1124, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1138, 1139, 1141, 1142, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1170, 1171], "arrai": [0, 1, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 164, 179, 180, 181, 182, 183, 184, 185, 188, 190, 193, 210, 211, 212, 227, 229, 266, 277, 278, 280, 281, 284, 285, 288, 294, 296, 300, 301, 306, 307, 314, 315, 318, 319, 320, 321, 322, 323, 332, 333, 336, 337, 351, 352, 353, 355, 356, 357, 358, 360, 361, 362, 363, 365, 366, 367, 368, 370, 371, 372, 374, 375, 376, 388, 389, 397, 399, 400, 401, 402, 403, 404, 405, 406, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 435, 436, 437, 438, 440, 441, 442, 447, 449, 452, 454, 455, 457, 461, 466, 485, 486, 487, 488, 491, 492, 493, 494, 495, 496, 497, 498, 500, 504, 506, 510, 511, 516, 517, 519, 520, 521, 522, 525, 526, 529, 530, 532, 533, 534, 535, 538, 539, 542, 543, 546, 547, 550, 551, 554, 555, 558, 559, 562, 563, 566, 567, 570, 571, 574, 575, 578, 579, 581, 582, 583, 586, 587, 590, 591, 594, 596, 599, 600, 603, 604, 607, 608, 611, 612, 614, 615, 616, 619, 620, 623, 624, 627, 628, 631, 632, 635, 636, 639, 640, 643, 644, 647, 648, 651, 652, 655, 656, 659, 660, 663, 664, 667, 668, 671, 672, 675, 676, 679, 680, 683, 684, 685, 686, 689, 691, 694, 695, 698, 699, 702, 703, 706, 707, 710, 711, 714, 715, 718, 719, 722, 723, 726, 727, 730, 731, 734, 735, 739, 740, 741, 743, 744, 745, 746, 748, 749, 750, 753, 754, 755, 757, 758, 759, 762, 763, 764, 766, 767, 769, 771, 772, 773, 776, 777, 778, 779, 780, 781, 782, 783, 785, 786, 787, 788, 791, 793, 794, 795, 796, 797, 798, 800, 801, 803, 806, 807, 808, 810, 811, 816, 817, 820, 822, 823, 824, 826, 827, 828, 830, 832, 833, 834, 835, 837, 840, 842, 844, 845, 847, 849, 851, 853, 855, 858, 860, 861, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 879, 880, 882, 883, 885, 886, 888, 889, 891, 892, 894, 895, 897, 898, 901, 902, 904, 905, 906, 908, 909, 911, 912, 914, 915, 917, 918, 920, 921, 922, 924, 925, 927, 928, 930, 931, 933, 934, 936, 937, 939, 940, 942, 943, 945, 946, 947, 950, 952, 955, 957, 960, 962, 963, 965, 966, 967, 968, 971, 972, 975, 976, 979, 980, 983, 984, 987, 988, 991, 992, 995, 996, 998, 999, 1000, 1001, 1002, 1005, 1006, 1009, 1010, 1013, 1014, 1017, 1018, 1021, 1022, 1023, 1024, 1025, 1026, 1028, 1038, 1039, 1044, 1045, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1057, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1075, 1077, 1080, 1082, 1083, 1086, 1087, 1090, 1091, 1094, 1095, 1098, 1099, 1102, 1103, 1106, 1107, 1110, 1111, 1114, 1115, 1116, 1119, 1120, 1123, 1124, 1127, 1129, 1145, 1153, 1156], "arraywithactiv": 0, "sourc": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 354, 364, 365, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 468, 469, 470, 471, 472, 473, 475, 476, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1127, 1128, 1129, 1131, 1132, 1133, 1134, 1135, 1136, 1138, 1139, 1141, 1142, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1170, 1171], "base": [0, 1, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 160, 177, 178, 180, 181, 182, 183, 184, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 352, 360, 363, 365, 371, 387, 410, 420, 429, 466, 468, 469, 470, 471, 472, 473, 475, 476, 478, 479, 480, 481, 516, 604, 648, 651, 652, 655, 656, 659, 660, 663, 703, 706, 754, 789, 812, 819, 828, 1066, 1067, 1068, 1070, 1082, 1083, 1086, 1110, 1131, 1132, 1133, 1136, 1138, 1139, 1141, 1142, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168], "abc": [0, 1, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 179, 180, 373, 466, 475, 481, 754, 779, 1157, 1158, 1161, 1165], "activ": [1, 2, 8, 158, 159, 178, 184, 191, 348, 349, 351, 352, 354, 356, 375, 400, 401, 402, 403, 404, 405, 406, 1124, 1132, 1133], "support": [1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 118, 119, 120, 121, 123, 125, 127, 129, 131, 133, 135, 137, 139, 141, 143, 145, 147, 149, 151, 153, 155, 157, 159, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 174, 175, 176, 178, 179, 180, 182, 183, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 313, 315, 317, 319, 321, 323, 325, 327, 329, 331, 333, 335, 337, 339, 341, 343, 345, 347, 349, 357, 358, 361, 363, 364, 365, 366, 367, 368, 369, 370, 371, 373, 374, 376, 390, 391, 392, 393, 394, 395, 396, 397, 400, 401, 402, 403, 404, 405, 406, 408, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1023, 1024, 1025, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1045, 1046, 1047, 1048, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1062, 1063, 1064, 1065, 1067, 1068, 1069, 1070, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1128, 1129, 1130, 1132, 1133, 1135, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1158, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1168, 1169, 1171], "framework": [1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 123, 125, 127, 129, 131, 133, 135, 137, 139, 141, 143, 145, 147, 149, 151, 153, 155, 157, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 174, 175, 176, 178, 179, 180, 182, 183, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 313, 315, 317, 319, 321, 323, 325, 327, 329, 331, 333, 335, 337, 339, 341, 343, 345, 347, 349, 355, 359, 361, 362, 363, 364, 367, 369, 370, 373, 376, 387, 388, 390, 391, 392, 393, 394, 395, 396, 397, 400, 401, 402, 403, 404, 405, 406, 407, 408, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1023, 1024, 1025, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1045, 1046, 1047, 1048, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1062, 1063, 1064, 1065, 1067, 1068, 1069, 1070, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1128, 1129, 1130, 1132, 1133, 1134, 1135, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1158, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1168, 1169, 1171], "array_method": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 438, 439, 517, 518, 523, 526, 527, 531, 535, 536, 539, 540, 544, 547, 548, 551, 552, 555, 556, 559, 560, 563, 564, 567, 568, 571, 572, 575, 576, 579, 580, 584, 588, 592, 597, 600, 601, 605, 608, 609, 613, 616, 617, 621, 624, 625, 628, 629, 632, 633, 636, 637, 640, 641, 644, 645, 648, 649, 652, 653, 656, 657, 660, 661, 664, 665, 668, 669, 672, 673, 676, 677, 680, 681, 686, 687, 691, 692, 695, 696, 699, 700, 703, 704, 707, 708, 711, 712, 715, 716, 719, 720, 723, 724, 727, 728, 731, 732, 735, 737, 742, 747, 750, 751, 755, 756, 783, 784, 830, 831, 877, 878, 880, 881, 884, 886, 887, 889, 890, 892, 893, 896, 897, 898, 899, 902, 903, 906, 907, 909, 910, 912, 913, 915, 916, 918, 919, 921, 922, 923, 926, 927, 928, 929, 931, 932, 934, 935, 937, 938, 940, 941, 943, 944, 947, 948, 952, 953, 957, 958, 963, 964, 968, 969, 972, 973, 976, 977, 980, 981, 984, 985, 988, 989, 992, 993, 996, 997, 1002, 1003, 1006, 1007, 1010, 1011, 1014, 1015, 1018, 1019, 1045, 1046, 1072, 1073, 1077, 1078, 1083, 1084, 1087, 1088, 1091, 1092, 1095, 1096, 1099, 1100, 1103, 1104, 1108, 1111, 1112, 1116, 1117, 1120, 1121], "ab": [2, 128, 129, 184, 277, 318, 319, 360, 363, 516, 521, 703, 706, 876, 940, 942, 1124], "self": [2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 179, 180, 184, 185, 186, 187, 188, 189, 190, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 364, 365, 371, 373, 374, 375, 376, 438, 439, 440, 466, 517, 518, 519, 523, 524, 525, 526, 527, 528, 531, 532, 533, 535, 536, 537, 539, 540, 541, 544, 545, 546, 547, 548, 549, 551, 552, 553, 555, 556, 557, 559, 560, 561, 563, 564, 565, 567, 568, 569, 571, 572, 573, 575, 576, 577, 579, 580, 581, 584, 585, 586, 588, 589, 590, 592, 593, 594, 597, 598, 599, 600, 601, 602, 605, 606, 607, 608, 609, 610, 613, 614, 615, 616, 617, 618, 621, 622, 623, 624, 625, 626, 628, 629, 630, 632, 633, 634, 636, 637, 638, 640, 641, 642, 644, 645, 646, 648, 649, 650, 652, 653, 654, 656, 657, 658, 660, 661, 662, 664, 665, 666, 668, 669, 670, 672, 673, 674, 676, 677, 678, 680, 681, 682, 686, 687, 688, 691, 692, 693, 695, 696, 697, 699, 700, 701, 703, 704, 705, 707, 708, 709, 711, 712, 713, 715, 716, 717, 719, 720, 721, 723, 724, 725, 727, 728, 729, 731, 732, 733, 735, 737, 738, 742, 743, 744, 747, 748, 749, 750, 751, 752, 755, 756, 757, 767, 768, 783, 784, 785, 830, 831, 832, 835, 836, 840, 841, 845, 846, 849, 850, 853, 854, 877, 878, 880, 881, 884, 886, 887, 889, 890, 892, 893, 896, 897, 898, 899, 900, 902, 903, 906, 907, 909, 910, 912, 913, 915, 916, 918, 919, 921, 922, 923, 926, 927, 928, 929, 931, 932, 934, 935, 937, 938, 940, 941, 943, 944, 947, 948, 949, 952, 953, 954, 957, 958, 959, 963, 964, 965, 968, 969, 970, 972, 973, 974, 976, 977, 978, 980, 981, 982, 984, 985, 986, 988, 989, 990, 992, 993, 994, 996, 997, 998, 1002, 1003, 1004, 1006, 1007, 1008, 1010, 1011, 1012, 1014, 1015, 1016, 1018, 1019, 1020, 1045, 1046, 1047, 1055, 1056, 1072, 1073, 1074, 1077, 1078, 1079, 1083, 1084, 1085, 1087, 1088, 1089, 1091, 1092, 1093, 1095, 1096, 1097, 1099, 1100, 1101, 1103, 1104, 1105, 1108, 1109, 1110, 1111, 1112, 1113, 1116, 1117, 1118, 1120, 1121, 1122, 1124, 1161, 1165], "out": [2, 3, 4, 5, 7, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 128, 129, 130, 131, 138, 139, 140, 141, 142, 143, 144, 145, 152, 153, 154, 155, 156, 157, 174, 175, 176, 179, 180, 181, 182, 184, 185, 186, 187, 190, 192, 194, 195, 196, 197, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 231, 232, 233, 234, 235, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 280, 282, 283, 285, 286, 287, 288, 292, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 318, 319, 320, 321, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 342, 343, 344, 345, 346, 347, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 370, 371, 373, 374, 375, 376, 387, 399, 400, 401, 402, 403, 404, 405, 406, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 423, 424, 425, 426, 427, 428, 429, 435, 437, 466, 511, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 766, 767, 768, 769, 771, 772, 773, 776, 777, 778, 780, 782, 783, 784, 785, 786, 787, 794, 807, 810, 811, 828, 858, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1060, 1061, 1062, 1063, 1065, 1066, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1145, 1153], "none": [2, 3, 4, 5, 7, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 128, 129, 130, 131, 138, 139, 140, 141, 142, 143, 144, 145, 152, 153, 154, 155, 156, 157, 160, 162, 165, 172, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 189, 190, 192, 193, 194, 195, 196, 197, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 356, 358, 361, 365, 366, 367, 368, 369, 371, 373, 375, 376, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 422, 423, 424, 425, 426, 427, 428, 429, 435, 437, 438, 440, 442, 444, 445, 446, 449, 452, 466, 475, 476, 484, 485, 508, 509, 510, 511, 514, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 757, 759, 760, 766, 767, 768, 769, 771, 772, 773, 775, 776, 777, 778, 779, 780, 782, 783, 784, 785, 786, 787, 792, 794, 795, 799, 805, 807, 810, 811, 812, 813, 818, 819, 825, 828, 835, 836, 837, 838, 840, 841, 842, 843, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 858, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 921, 922, 923, 924, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1032, 1037, 1038, 1039, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1065, 1066, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1134, 1135, 1136, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168], "instanc": [2, 3, 6, 7, 8, 10, 25, 26, 28, 47, 49, 88, 106, 107, 117, 118, 119, 120, 121, 124, 125, 128, 129, 130, 131, 132, 133, 142, 143, 158, 159, 179, 180, 181, 182, 184, 185, 188, 190, 191, 193, 210, 211, 212, 227, 229, 266, 278, 306, 307, 314, 315, 318, 319, 320, 321, 322, 323, 332, 333, 348, 349, 353, 357, 358, 360, 361, 364, 366, 368, 369, 374, 375, 376, 389, 397, 399, 401, 402, 403, 404, 405, 406, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 423, 424, 425, 426, 427, 428, 429, 438, 439, 440, 441, 466, 475, 507, 516, 517, 518, 519, 520, 530, 531, 532, 535, 538, 546, 551, 555, 558, 575, 578, 579, 580, 581, 582, 587, 599, 612, 613, 614, 616, 623, 624, 627, 664, 684, 685, 691, 694, 695, 698, 711, 714, 727, 730, 731, 734, 740, 742, 743, 745, 747, 748, 749, 754, 755, 756, 757, 771, 782, 783, 784, 785, 798, 822, 824, 830, 831, 832, 834, 863, 866, 869, 875, 876, 877, 879, 880, 882, 883, 946, 947, 950, 962, 963, 964, 965, 976, 979, 980, 983, 988, 991, 996, 997, 998, 999, 1001, 1010, 1013, 1044, 1045, 1048, 1049, 1054, 1055, 1057, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1071, 1072, 1075, 1082, 1083, 1086, 1087, 1090, 1110, 1115, 1116, 1119, 1134, 1135], "variant": [2, 3, 6, 7, 10, 25, 26, 28, 47, 49, 88, 106, 107, 124, 125, 128, 129, 130, 131, 132, 133, 142, 143, 184, 185, 188, 190, 193, 210, 211, 212, 227, 229, 266, 277, 278, 280, 281, 284, 285, 288, 294, 296, 300, 301, 306, 307, 314, 315, 318, 319, 320, 321, 322, 323, 332, 333, 336, 337, 357, 358, 438, 439, 440, 442, 517, 518, 519, 521, 531, 532, 534, 546, 551, 579, 580, 581, 613, 614, 616, 664, 741, 742, 743, 746, 747, 748, 749, 755, 756, 757, 759, 783, 784, 785, 787, 830, 831, 832, 834, 963, 964, 965, 967, 996, 997, 998, 1000, 1051, 1053], "thi": [2, 3, 6, 7, 10, 25, 26, 28, 47, 49, 88, 106, 107, 124, 125, 128, 129, 130, 131, 132, 133, 142, 143, 174, 175, 176, 179, 180, 181, 182, 183, 184, 185, 188, 190, 193, 210, 211, 212, 227, 229, 266, 277, 278, 280, 281, 284, 285, 288, 294, 296, 300, 301, 306, 307, 314, 315, 318, 319, 320, 321, 322, 323, 332, 333, 336, 337, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 387, 388, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 438, 439, 440, 441, 442, 466, 490, 494, 498, 505, 510, 515, 516, 517, 518, 519, 520, 521, 530, 531, 532, 534, 535, 538, 546, 551, 555, 558, 571, 574, 575, 578, 579, 580, 581, 582, 587, 608, 611, 612, 613, 614, 616, 664, 672, 675, 676, 679, 695, 698, 707, 710, 711, 714, 727, 730, 731, 734, 740, 741, 742, 743, 745, 746, 747, 748, 749, 754, 755, 756, 757, 759, 781, 782, 783, 784, 785, 787, 798, 809, 814, 828, 830, 831, 832, 834, 835, 837, 840, 842, 844, 845, 847, 849, 851, 853, 855, 861, 863, 866, 872, 875, 876, 883, 885, 902, 904, 921, 962, 963, 964, 965, 967, 976, 979, 980, 983, 992, 995, 996, 997, 998, 999, 1000, 1006, 1009, 1026, 1032, 1038, 1039, 1044, 1045, 1048, 1051, 1053, 1061, 1062, 1066, 1067, 1068, 1070, 1071, 1072, 1075, 1082, 1087, 1090, 1091, 1094, 1103, 1106, 1111, 1114, 1115, 1116, 1119, 1124, 1130, 1157, 1158, 1161, 1162, 1163, 1164, 1165, 1166], "simpli": [2, 3, 6, 7, 10, 25, 26, 28, 47, 49, 88, 106, 107, 124, 125, 128, 129, 130, 131, 132, 133, 142, 143, 179, 180, 184, 185, 188, 190, 193, 210, 211, 212, 227, 229, 266, 277, 278, 280, 281, 284, 285, 288, 294, 296, 300, 301, 306, 307, 314, 315, 318, 319, 320, 321, 322, 323, 332, 333, 336, 337, 352, 357, 358, 360, 361, 364, 365, 367, 368, 369, 371, 375, 376, 438, 439, 440, 442, 516, 517, 518, 519, 521, 531, 532, 534, 546, 551, 579, 580, 581, 608, 611, 613, 614, 616, 664, 741, 742, 743, 746, 747, 748, 749, 755, 756, 757, 759, 783, 784, 785, 787, 830, 831, 832, 834, 963, 964, 965, 967, 996, 997, 998, 1000, 1051, 1053], "wrap": [2, 3, 6, 7, 10, 25, 26, 28, 47, 49, 88, 106, 107, 117, 124, 125, 128, 129, 130, 131, 132, 133, 142, 143, 159, 179, 180, 181, 182, 183, 184, 185, 188, 190, 193, 210, 211, 212, 227, 229, 266, 277, 278, 280, 281, 284, 285, 288, 294, 296, 300, 301, 306, 307, 314, 315, 318, 319, 320, 321, 322, 323, 332, 333, 336, 337, 349, 355, 357, 360, 361, 362, 364, 365, 366, 367, 368, 369, 371, 373, 376, 388, 389, 397, 438, 439, 440, 442, 517, 518, 519, 521, 531, 532, 534, 546, 551, 579, 580, 581, 613, 614, 616, 664, 741, 742, 743, 746, 747, 748, 749, 754, 755, 756, 757, 759, 765, 783, 784, 785, 787, 828, 830, 831, 832, 834, 861, 963, 964, 965, 967, 996, 997, 998, 1000, 1051, 1053], "function": [2, 3, 6, 7, 8, 10, 25, 26, 28, 47, 49, 88, 106, 107, 117, 124, 125, 128, 129, 130, 131, 132, 133, 142, 143, 158, 159, 160, 164, 165, 166, 174, 179, 180, 184, 185, 188, 190, 191, 193, 210, 211, 212, 227, 229, 266, 277, 278, 280, 281, 284, 285, 288, 294, 296, 300, 301, 306, 307, 314, 315, 318, 319, 320, 321, 322, 323, 332, 333, 336, 337, 348, 349, 352, 354, 355, 356, 357, 358, 359, 360, 362, 364, 368, 370, 372, 373, 374, 375, 386, 387, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 468, 469, 470, 471, 472, 473, 475, 476, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 525, 526, 529, 530, 531, 532, 533, 534, 535, 538, 539, 542, 543, 546, 547, 550, 551, 554, 555, 558, 559, 562, 563, 566, 567, 570, 571, 574, 575, 578, 579, 580, 581, 582, 583, 586, 587, 590, 591, 594, 596, 599, 600, 603, 604, 607, 608, 611, 612, 613, 614, 615, 616, 619, 620, 623, 624, 627, 628, 631, 632, 635, 636, 639, 640, 643, 644, 647, 648, 651, 652, 655, 656, 659, 660, 663, 664, 667, 668, 671, 672, 675, 676, 679, 680, 683, 684, 685, 686, 689, 691, 694, 695, 698, 699, 702, 703, 706, 707, 710, 711, 714, 715, 718, 719, 722, 723, 726, 727, 730, 731, 734, 735, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 830, 831, 832, 833, 834, 835, 837, 839, 840, 842, 844, 845, 847, 849, 851, 853, 855, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 879, 880, 882, 883, 885, 886, 888, 889, 891, 892, 894, 895, 897, 898, 901, 902, 904, 905, 906, 908, 909, 911, 912, 914, 915, 917, 918, 920, 921, 922, 924, 925, 927, 928, 930, 931, 933, 934, 936, 937, 939, 940, 942, 943, 945, 946, 947, 950, 952, 955, 957, 960, 962, 963, 964, 965, 966, 967, 968, 971, 972, 975, 976, 979, 980, 983, 984, 987, 988, 991, 992, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1005, 1006, 1009, 1010, 1013, 1014, 1017, 1018, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1057, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1075, 1077, 1080, 1082, 1083, 1086, 1087, 1090, 1091, 1094, 1095, 1098, 1099, 1102, 1103, 1106, 1107, 1110, 1111, 1114, 1115, 1116, 1119, 1120, 1123, 1124, 1127, 1129, 1131, 1132, 1133, 1161, 1164, 1166], "so": [2, 3, 6, 7, 10, 25, 26, 28, 47, 49, 88, 106, 107, 117, 120, 121, 124, 125, 128, 129, 130, 131, 132, 133, 142, 143, 174, 175, 179, 180, 184, 185, 188, 190, 193, 210, 211, 212, 227, 229, 266, 277, 278, 280, 281, 284, 285, 288, 294, 296, 300, 301, 306, 307, 314, 315, 318, 319, 320, 321, 322, 323, 332, 333, 336, 337, 351, 352, 356, 357, 358, 360, 363, 364, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 388, 389, 397, 438, 439, 440, 442, 517, 518, 519, 521, 531, 532, 534, 546, 551, 579, 580, 581, 613, 614, 616, 664, 741, 742, 743, 746, 747, 748, 749, 755, 756, 757, 759, 783, 784, 785, 787, 830, 831, 832, 834, 963, 964, 965, 967, 996, 997, 998, 1000, 1026, 1027, 1037, 1051, 1053, 1124], "docstr": [2, 3, 6, 7, 10, 25, 26, 28, 47, 49, 88, 106, 107, 124, 125, 128, 129, 130, 131, 132, 133, 142, 143, 184, 185, 188, 190, 193, 210, 211, 212, 227, 229, 266, 277, 278, 280, 281, 284, 285, 288, 294, 296, 300, 301, 306, 307, 314, 315, 318, 319, 320, 321, 322, 323, 332, 333, 336, 337, 353, 354, 355, 356, 361, 365, 369, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 421, 423, 424, 425, 426, 427, 428, 429, 438, 439, 440, 441, 442, 516, 517, 518, 519, 520, 521, 530, 531, 532, 534, 535, 538, 546, 551, 555, 558, 575, 578, 579, 580, 581, 582, 587, 612, 613, 614, 616, 664, 695, 698, 711, 714, 727, 730, 731, 734, 740, 741, 742, 743, 745, 746, 747, 748, 749, 755, 756, 757, 759, 783, 784, 785, 787, 830, 831, 832, 834, 876, 883, 962, 963, 964, 965, 967, 976, 979, 980, 983, 996, 997, 998, 999, 1000, 1051, 1053, 1066, 1067, 1068, 1071, 1072, 1075, 1082, 1087, 1090, 1115, 1116, 1119], "also": [2, 3, 6, 7, 10, 25, 26, 28, 47, 49, 88, 106, 107, 117, 118, 119, 120, 121, 124, 125, 128, 129, 130, 131, 132, 133, 142, 143, 174, 175, 179, 180, 184, 185, 188, 190, 193, 210, 211, 212, 227, 229, 266, 277, 278, 280, 281, 284, 285, 288, 294, 296, 300, 301, 306, 307, 314, 315, 318, 319, 320, 321, 322, 323, 332, 333, 336, 337, 350, 351, 352, 355, 356, 357, 358, 360, 361, 363, 364, 365, 366, 367, 368, 369, 371, 373, 374, 375, 376, 387, 388, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 423, 424, 425, 426, 427, 428, 429, 438, 439, 440, 441, 442, 516, 517, 518, 519, 520, 521, 530, 531, 532, 534, 535, 538, 546, 551, 555, 558, 575, 578, 579, 580, 581, 582, 587, 612, 613, 614, 616, 664, 695, 698, 711, 714, 727, 730, 731, 734, 740, 741, 742, 743, 745, 746, 747, 748, 749, 754, 755, 756, 757, 759, 782, 783, 784, 785, 787, 798, 828, 830, 831, 832, 834, 835, 837, 863, 866, 872, 875, 876, 883, 962, 963, 964, 965, 967, 976, 979, 980, 983, 996, 997, 998, 999, 1000, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1036, 1037, 1038, 1044, 1045, 1048, 1051, 1053, 1066, 1067, 1068, 1071, 1072, 1075, 1082, 1087, 1090, 1115, 1116, 1119, 1145, 1155], "appli": [2, 3, 6, 7, 10, 25, 26, 28, 47, 49, 88, 106, 107, 117, 120, 121, 124, 125, 128, 129, 130, 131, 132, 133, 142, 143, 179, 180, 184, 185, 188, 190, 193, 210, 211, 212, 227, 229, 266, 277, 278, 280, 281, 284, 285, 288, 294, 296, 300, 301, 306, 307, 314, 315, 318, 319, 320, 321, 322, 323, 332, 333, 336, 337, 351, 352, 353, 357, 358, 360, 361, 363, 365, 366, 367, 368, 369, 371, 373, 374, 375, 376, 386, 388, 399, 400, 401, 402, 403, 404, 405, 406, 429, 438, 439, 440, 442, 457, 517, 518, 519, 521, 531, 532, 534, 546, 551, 579, 580, 581, 613, 614, 616, 664, 741, 742, 743, 746, 747, 748, 749, 754, 755, 756, 757, 759, 776, 777, 778, 783, 784, 785, 787, 828, 830, 831, 832, 834, 845, 847, 849, 851, 863, 872, 874, 875, 876, 897, 906, 908, 915, 917, 946, 947, 950, 952, 955, 957, 960, 962, 963, 964, 965, 967, 996, 997, 998, 1000, 1006, 1009, 1022, 1023, 1024, 1026, 1032, 1035, 1038, 1039, 1044, 1045, 1048, 1051, 1053, 1124, 1131, 1132, 1133, 1159, 1160], "minim": [2, 3, 6, 7, 10, 25, 26, 28, 47, 49, 88, 106, 107, 124, 125, 128, 129, 130, 131, 132, 133, 142, 143, 184, 185, 188, 190, 193, 210, 211, 212, 227, 229, 266, 277, 278, 280, 281, 284, 285, 288, 294, 296, 300, 301, 306, 307, 314, 315, 318, 319, 320, 321, 322, 323, 332, 333, 336, 337, 357, 368, 371, 438, 439, 440, 442, 517, 518, 519, 521, 531, 532, 534, 546, 551, 579, 580, 581, 613, 614, 616, 664, 741, 742, 743, 746, 747, 748, 749, 755, 756, 757, 759, 783, 784, 785, 787, 830, 831, 832, 834, 963, 964, 965, 967, 996, 997, 998, 1000, 1051, 1053], "chang": [2, 3, 6, 7, 10, 25, 26, 28, 47, 49, 88, 106, 107, 124, 125, 128, 129, 130, 131, 132, 133, 142, 143, 176, 184, 185, 188, 190, 193, 210, 211, 212, 227, 229, 266, 277, 278, 280, 281, 284, 285, 288, 294, 296, 300, 301, 306, 307, 314, 315, 318, 319, 320, 321, 322, 323, 332, 333, 336, 337, 351, 352, 353, 354, 357, 359, 360, 365, 371, 375, 388, 438, 439, 440, 442, 466, 517, 518, 519, 521, 531, 532, 534, 546, 551, 579, 580, 581, 613, 614, 616, 664, 741, 742, 743, 746, 747, 748, 749, 755, 756, 757, 759, 783, 784, 785, 787, 830, 831, 832, 834, 876, 880, 882, 962, 963, 964, 965, 967, 992, 995, 996, 997, 998, 1000, 1026, 1028, 1038, 1051, 1053, 1124, 1130], "exampl": [2, 3, 6, 7, 8, 10, 25, 26, 28, 47, 49, 88, 106, 107, 124, 125, 128, 129, 130, 131, 132, 133, 142, 143, 158, 159, 160, 164, 165, 166, 172, 176, 181, 182, 184, 185, 188, 190, 191, 193, 210, 211, 212, 227, 229, 266, 277, 278, 280, 281, 284, 285, 288, 294, 296, 300, 301, 306, 307, 314, 315, 318, 319, 320, 321, 322, 323, 332, 333, 336, 337, 348, 349, 351, 352, 353, 355, 356, 357, 360, 361, 362, 363, 364, 365, 366, 367, 368, 371, 373, 374, 375, 376, 387, 388, 399, 401, 402, 403, 404, 405, 406, 407, 408, 410, 417, 418, 421, 423, 424, 427, 428, 429, 435, 438, 439, 440, 441, 442, 450, 451, 466, 485, 486, 488, 500, 501, 502, 503, 504, 507, 509, 511, 513, 514, 516, 517, 518, 519, 520, 521, 530, 531, 532, 534, 535, 538, 546, 551, 554, 555, 558, 559, 562, 571, 574, 575, 578, 579, 580, 581, 582, 583, 587, 599, 604, 612, 613, 614, 616, 620, 623, 624, 627, 640, 643, 664, 684, 685, 691, 694, 695, 698, 711, 714, 727, 730, 731, 734, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 754, 755, 756, 757, 758, 759, 762, 763, 771, 772, 779, 782, 783, 784, 785, 786, 787, 790, 801, 816, 817, 822, 823, 824, 828, 830, 831, 832, 833, 834, 863, 864, 866, 868, 869, 870, 875, 876, 877, 879, 880, 882, 883, 886, 888, 895, 906, 908, 912, 914, 925, 931, 933, 934, 936, 946, 947, 950, 952, 955, 957, 960, 962, 963, 964, 965, 966, 967, 968, 971, 976, 979, 980, 983, 988, 991, 992, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1005, 1006, 1009, 1010, 1013, 1044, 1045, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1057, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1071, 1072, 1075, 1082, 1083, 1086, 1103, 1106, 1107, 1110, 1115, 1116, 1119, 1124], "us": [2, 3, 8, 128, 129, 158, 159, 160, 165, 172, 175, 176, 179, 180, 181, 182, 183, 184, 185, 191, 318, 319, 348, 349, 350, 352, 353, 355, 356, 357, 358, 359, 360, 361, 362, 364, 365, 366, 367, 368, 369, 370, 371, 373, 375, 376, 387, 388, 399, 401, 402, 403, 404, 405, 406, 409, 429, 448, 466, 475, 476, 501, 505, 508, 509, 510, 511, 513, 515, 516, 517, 518, 519, 535, 538, 555, 558, 575, 578, 587, 599, 623, 624, 627, 684, 685, 691, 694, 695, 698, 711, 714, 727, 730, 754, 782, 789, 790, 804, 810, 811, 812, 813, 818, 819, 828, 830, 833, 835, 837, 845, 847, 849, 851, 863, 869, 871, 872, 874, 875, 876, 883, 886, 888, 902, 904, 946, 947, 950, 962, 976, 979, 980, 983, 988, 991, 996, 999, 1010, 1013, 1022, 1023, 1024, 1025, 1026, 1027, 1029, 1035, 1036, 1037, 1039, 1044, 1045, 1048, 1061, 1062, 1063, 1064, 1066, 1067, 1068, 1082, 1083, 1086, 1110, 1115, 1116, 1119, 1124, 1145, 1153, 1156, 1157, 1158, 1159, 1160, 1161, 1163, 1164], "x": [2, 3, 7, 25, 26, 28, 47, 49, 88, 99, 106, 107, 117, 120, 121, 124, 125, 128, 129, 130, 131, 142, 143, 160, 164, 172, 179, 180, 181, 182, 184, 185, 190, 210, 211, 212, 227, 229, 266, 276, 277, 280, 282, 284, 285, 288, 294, 296, 297, 300, 301, 306, 307, 314, 315, 318, 319, 320, 321, 332, 333, 336, 337, 342, 343, 354, 356, 357, 358, 361, 362, 365, 368, 369, 371, 373, 374, 375, 376, 399, 400, 401, 402, 403, 404, 405, 406, 410, 412, 414, 416, 418, 421, 422, 424, 425, 426, 427, 428, 429, 435, 437, 438, 439, 440, 441, 442, 447, 466, 485, 486, 487, 488, 491, 492, 500, 504, 509, 511, 516, 517, 518, 519, 520, 521, 522, 525, 526, 529, 530, 531, 532, 534, 535, 538, 539, 542, 543, 546, 547, 550, 551, 554, 555, 558, 559, 562, 575, 578, 579, 580, 581, 582, 583, 586, 587, 590, 599, 600, 603, 604, 608, 611, 612, 613, 614, 616, 620, 623, 624, 627, 628, 631, 632, 635, 636, 639, 640, 643, 648, 651, 652, 655, 656, 659, 660, 663, 664, 672, 675, 684, 685, 691, 694, 699, 702, 711, 714, 715, 718, 719, 722, 723, 726, 727, 730, 731, 734, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 753, 754, 762, 763, 764, 766, 767, 769, 771, 772, 773, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 790, 791, 793, 794, 796, 797, 798, 800, 801, 802, 803, 807, 816, 817, 820, 822, 823, 824, 826, 827, 828, 839, 844, 858, 860, 861, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 879, 880, 882, 883, 885, 886, 888, 889, 891, 892, 894, 895, 897, 902, 904, 905, 906, 908, 909, 911, 912, 914, 915, 917, 918, 920, 921, 925, 927, 928, 930, 931, 933, 934, 936, 940, 942, 946, 947, 950, 952, 955, 957, 960, 962, 963, 964, 965, 966, 967, 968, 971, 972, 975, 976, 979, 980, 983, 984, 987, 988, 991, 992, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1005, 1006, 1007, 1008, 1009, 1010, 1013, 1014, 1017, 1018, 1021, 1026, 1027, 1032, 1036, 1037, 1038, 1044, 1045, 1048, 1049, 1051, 1052, 1053, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1075, 1076, 1077, 1080, 1081, 1082, 1083, 1086, 1087, 1090, 1091, 1094, 1095, 1098, 1099, 1102, 1103, 1106, 1107, 1110, 1111, 1114, 1115, 1116, 1119, 1120, 1123, 1124, 1145, 1156], "2": [2, 3, 6, 7, 10, 25, 26, 28, 36, 47, 49, 88, 106, 107, 108, 114, 124, 125, 128, 129, 130, 131, 132, 133, 138, 139, 142, 143, 160, 164, 179, 180, 181, 182, 184, 185, 188, 190, 193, 210, 211, 212, 227, 229, 266, 277, 278, 280, 284, 285, 288, 294, 296, 300, 301, 306, 307, 314, 315, 318, 319, 320, 321, 322, 323, 332, 333, 336, 337, 351, 352, 354, 358, 362, 365, 369, 370, 371, 373, 374, 375, 376, 388, 399, 401, 402, 403, 404, 406, 409, 410, 417, 418, 421, 423, 424, 428, 429, 435, 438, 439, 440, 441, 442, 466, 485, 486, 488, 500, 502, 504, 511, 516, 517, 518, 519, 520, 521, 530, 531, 532, 534, 535, 538, 543, 546, 547, 550, 551, 555, 558, 559, 562, 571, 574, 575, 578, 579, 580, 581, 582, 583, 587, 599, 604, 612, 613, 614, 616, 620, 623, 624, 627, 640, 643, 660, 663, 664, 684, 685, 691, 694, 695, 698, 711, 714, 727, 730, 731, 734, 740, 741, 742, 743, 745, 746, 747, 748, 749, 754, 755, 756, 757, 758, 762, 763, 766, 767, 769, 772, 779, 782, 783, 784, 785, 786, 787, 801, 816, 817, 822, 828, 830, 831, 832, 833, 834, 863, 866, 867, 868, 869, 870, 875, 876, 877, 879, 880, 882, 883, 886, 887, 888, 895, 897, 898, 901, 902, 904, 906, 908, 912, 914, 915, 917, 918, 920, 925, 931, 932, 933, 934, 936, 940, 941, 942, 946, 947, 950, 957, 960, 962, 963, 964, 965, 966, 967, 968, 971, 976, 979, 980, 983, 988, 991, 992, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1005, 1010, 1013, 1044, 1045, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1057, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1071, 1072, 1075, 1082, 1083, 1086, 1087, 1090, 1110, 1115, 1116, 1119, 1124], "6": [2, 3, 6, 7, 26, 28, 128, 129, 132, 133, 142, 143, 181, 182, 184, 185, 190, 211, 277, 280, 288, 294, 318, 319, 320, 321, 336, 337, 354, 358, 362, 365, 373, 374, 375, 399, 401, 402, 404, 410, 418, 466, 488, 504, 516, 517, 518, 519, 520, 521, 530, 531, 532, 534, 535, 538, 555, 558, 559, 562, 575, 578, 579, 580, 581, 582, 587, 599, 612, 623, 624, 627, 664, 684, 685, 691, 694, 711, 714, 727, 730, 731, 734, 740, 745, 754, 763, 772, 782, 783, 786, 787, 817, 822, 828, 830, 831, 833, 863, 866, 869, 870, 875, 876, 880, 882, 883, 886, 888, 912, 914, 925, 931, 933, 946, 947, 950, 957, 960, 962, 963, 964, 966, 968, 971, 976, 979, 980, 983, 988, 991, 992, 995, 996, 999, 1001, 1010, 1013, 1044, 1045, 1048, 1049, 1050, 1051, 1052, 1053, 1061, 1062, 1065, 1066, 1067, 1068, 1082, 1083, 1086, 1087, 1090, 1110], "1": [2, 3, 6, 7, 10, 12, 25, 26, 28, 33, 34, 36, 47, 49, 56, 88, 94, 95, 106, 107, 113, 124, 125, 128, 129, 130, 131, 132, 133, 138, 139, 140, 141, 142, 143, 144, 145, 152, 153, 160, 166, 172, 175, 176, 179, 180, 181, 182, 184, 185, 188, 190, 193, 195, 210, 211, 212, 218, 227, 229, 238, 262, 266, 271, 272, 278, 280, 281, 282, 284, 285, 286, 288, 294, 295, 296, 297, 298, 300, 301, 306, 307, 314, 315, 318, 319, 320, 321, 322, 323, 330, 331, 332, 333, 334, 335, 336, 337, 342, 343, 354, 358, 361, 365, 368, 369, 370, 371, 373, 374, 375, 376, 388, 399, 401, 402, 403, 404, 406, 410, 411, 418, 419, 420, 421, 423, 424, 428, 429, 435, 438, 439, 440, 441, 442, 449, 466, 470, 473, 475, 480, 485, 486, 488, 490, 494, 498, 500, 503, 504, 511, 516, 517, 518, 519, 520, 522, 525, 526, 529, 530, 531, 532, 534, 535, 538, 546, 547, 550, 551, 555, 558, 559, 562, 571, 574, 575, 578, 579, 580, 581, 582, 583, 586, 587, 590, 599, 604, 608, 611, 612, 613, 614, 616, 620, 623, 624, 627, 640, 643, 648, 651, 652, 655, 656, 659, 660, 663, 664, 684, 685, 691, 694, 695, 698, 703, 706, 711, 714, 715, 718, 719, 722, 727, 730, 731, 734, 740, 741, 742, 743, 745, 746, 747, 748, 749, 754, 755, 756, 757, 758, 759, 762, 763, 771, 772, 779, 782, 783, 784, 785, 786, 787, 801, 807, 810, 811, 816, 817, 819, 822, 823, 824, 826, 828, 830, 831, 832, 833, 834, 863, 864, 865, 866, 867, 868, 869, 870, 871, 875, 876, 877, 879, 880, 881, 882, 883, 886, 887, 888, 895, 906, 908, 912, 914, 922, 924, 925, 931, 933, 934, 936, 937, 938, 939, 940, 942, 946, 947, 950, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 971, 976, 979, 980, 983, 984, 987, 988, 991, 992, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1005, 1006, 1009, 1010, 1013, 1026, 1038, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1086, 1087, 1090, 1103, 1106, 1107, 1110, 1111, 1114, 1115, 1116, 1119, 1120, 1123, 1124, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1165, 1167, 1168], "0": [2, 3, 6, 10, 26, 28, 29, 30, 36, 44, 47, 56, 88, 99, 100, 106, 107, 110, 112, 128, 129, 130, 131, 132, 133, 138, 139, 142, 143, 144, 145, 154, 155, 160, 164, 177, 178, 179, 180, 181, 182, 183, 184, 188, 189, 193, 210, 211, 212, 214, 215, 224, 227, 236, 237, 238, 262, 266, 276, 277, 278, 279, 280, 281, 284, 285, 288, 290, 291, 294, 295, 296, 300, 301, 302, 306, 307, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 352, 356, 357, 358, 371, 373, 374, 375, 376, 399, 401, 402, 403, 404, 405, 406, 410, 411, 415, 419, 420, 424, 425, 426, 427, 428, 429, 435, 438, 440, 441, 442, 449, 466, 468, 471, 475, 478, 482, 485, 486, 488, 491, 492, 493, 494, 495, 496, 497, 498, 500, 504, 507, 509, 510, 514, 516, 517, 518, 520, 521, 522, 525, 526, 529, 530, 534, 535, 538, 539, 542, 543, 546, 547, 550, 551, 554, 555, 558, 563, 566, 571, 574, 575, 578, 579, 580, 581, 582, 583, 586, 587, 590, 599, 604, 608, 611, 612, 613, 614, 616, 623, 624, 627, 648, 651, 652, 655, 660, 663, 664, 684, 685, 686, 689, 691, 694, 695, 698, 703, 706, 707, 710, 711, 714, 715, 718, 719, 722, 723, 726, 727, 730, 731, 734, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 753, 754, 755, 756, 757, 758, 759, 762, 763, 766, 767, 769, 771, 772, 773, 779, 782, 783, 786, 787, 792, 801, 807, 810, 811, 816, 822, 823, 824, 828, 830, 831, 832, 833, 834, 835, 836, 837, 838, 845, 846, 847, 848, 849, 850, 851, 852, 863, 864, 866, 868, 869, 870, 875, 876, 877, 879, 880, 882, 883, 886, 887, 888, 895, 925, 931, 933, 934, 935, 936, 940, 942, 946, 947, 950, 952, 955, 957, 960, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 983, 984, 987, 988, 991, 996, 997, 998, 999, 1000, 1001, 1002, 1005, 1006, 1007, 1008, 1009, 1010, 1013, 1018, 1020, 1026, 1038, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1070, 1071, 1072, 1075, 1082, 1083, 1086, 1087, 1090, 1091, 1094, 1103, 1104, 1105, 1106, 1107, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1119, 1124, 1136, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1167, 1168], "y": [2, 3, 7, 10, 26, 28, 47, 49, 88, 106, 107, 128, 129, 130, 131, 142, 143, 181, 182, 184, 185, 190, 193, 211, 212, 227, 229, 266, 277, 280, 281, 285, 288, 294, 296, 300, 301, 306, 307, 318, 319, 320, 321, 332, 333, 336, 337, 356, 358, 362, 365, 371, 373, 399, 401, 402, 403, 404, 405, 406, 410, 417, 418, 421, 423, 424, 428, 429, 435, 466, 486, 500, 504, 509, 516, 517, 518, 519, 520, 521, 530, 531, 532, 534, 535, 538, 546, 547, 550, 551, 555, 558, 559, 562, 571, 574, 575, 578, 579, 580, 581, 582, 583, 587, 599, 604, 612, 613, 614, 616, 623, 624, 627, 664, 684, 685, 691, 694, 695, 698, 711, 714, 727, 730, 731, 734, 740, 741, 742, 743, 745, 746, 747, 748, 749, 754, 755, 756, 757, 758, 759, 762, 763, 771, 772, 779, 780, 782, 783, 784, 785, 786, 787, 816, 822, 823, 824, 828, 839, 863, 869, 870, 872, 876, 877, 879, 880, 882, 883, 895, 912, 914, 931, 933, 934, 936, 946, 947, 950, 952, 955, 957, 960, 962, 963, 964, 965, 966, 967, 968, 971, 976, 979, 980, 983, 988, 991, 992, 995, 996, 997, 998, 999, 1000, 1001, 1010, 1013, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1057, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1068, 1071, 1072, 1075, 1082, 1083, 1086, 1087, 1090, 1103, 1106, 1107, 1110, 1115, 1116, 1119], "print": [2, 3, 6, 7, 8, 10, 25, 26, 28, 47, 49, 88, 106, 107, 124, 125, 128, 129, 130, 131, 132, 133, 142, 143, 158, 159, 160, 164, 165, 166, 172, 179, 180, 181, 182, 183, 184, 185, 190, 191, 193, 210, 211, 212, 227, 229, 266, 277, 278, 280, 281, 284, 285, 288, 294, 296, 300, 301, 306, 307, 314, 315, 318, 319, 320, 321, 322, 323, 332, 333, 336, 337, 348, 349, 351, 358, 365, 371, 373, 374, 375, 399, 401, 402, 403, 404, 405, 406, 410, 417, 418, 421, 423, 424, 427, 428, 429, 435, 438, 439, 440, 441, 442, 450, 451, 466, 486, 500, 501, 502, 503, 504, 506, 509, 513, 516, 517, 518, 519, 520, 521, 530, 531, 532, 534, 535, 538, 546, 551, 554, 555, 558, 559, 562, 571, 574, 575, 578, 579, 580, 581, 582, 583, 587, 599, 604, 612, 613, 614, 616, 620, 623, 624, 627, 640, 643, 664, 684, 685, 691, 694, 695, 698, 711, 714, 727, 730, 731, 734, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 754, 755, 756, 757, 758, 759, 762, 763, 771, 772, 779, 782, 783, 784, 785, 786, 787, 790, 808, 816, 817, 822, 823, 824, 828, 830, 831, 833, 834, 863, 864, 866, 868, 869, 870, 875, 876, 877, 879, 880, 882, 883, 886, 888, 895, 912, 914, 925, 931, 933, 934, 936, 946, 947, 950, 952, 955, 957, 960, 962, 963, 964, 965, 966, 967, 976, 979, 980, 983, 988, 991, 992, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1005, 1010, 1013, 1044, 1045, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1057, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1071, 1072, 1075, 1082, 1083, 1086, 1087, 1090, 1103, 1106, 1107, 1110, 1115, 1116, 1119, 1124], "return": [2, 3, 4, 5, 6, 7, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 124, 125, 128, 129, 130, 131, 132, 133, 138, 139, 140, 141, 142, 143, 144, 145, 152, 153, 154, 155, 156, 157, 160, 164, 165, 172, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 190, 192, 193, 194, 195, 196, 197, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 231, 232, 233, 234, 235, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 314, 315, 318, 319, 320, 321, 322, 323, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 342, 343, 344, 345, 346, 347, 356, 357, 358, 360, 361, 363, 364, 365, 366, 367, 368, 369, 371, 373, 374, 375, 376, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 461, 465, 466, 475, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 757, 758, 759, 760, 762, 763, 764, 765, 766, 767, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 789, 790, 791, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 810, 811, 812, 813, 816, 817, 818, 819, 820, 822, 823, 824, 825, 826, 827, 828, 830, 831, 832, 833, 834, 835, 837, 838, 839, 840, 842, 843, 844, 845, 847, 848, 849, 851, 852, 853, 854, 855, 856, 858, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1032, 1036, 1037, 1038, 1039, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1127, 1129, 1134, 1135, 1145, 1154, 1155, 1161, 1165], "type": [2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 125, 128, 129, 130, 131, 132, 133, 138, 139, 140, 141, 142, 143, 144, 145, 152, 153, 154, 155, 156, 157, 158, 159, 160, 166, 172, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 190, 191, 192, 193, 194, 195, 196, 197, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 231, 232, 233, 234, 235, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 315, 318, 319, 320, 321, 322, 323, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 342, 343, 344, 345, 346, 347, 348, 349, 351, 353, 355, 356, 357, 358, 363, 364, 365, 367, 368, 369, 371, 373, 374, 376, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 401, 402, 403, 404, 405, 406, 407, 408, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 461, 465, 466, 482, 483, 484, 485, 486, 488, 498, 499, 500, 501, 502, 503, 504, 505, 507, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 757, 758, 759, 760, 762, 763, 765, 766, 767, 769, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 789, 790, 791, 793, 794, 796, 797, 798, 800, 801, 802, 803, 807, 810, 811, 812, 813, 816, 818, 819, 820, 822, 823, 824, 826, 827, 828, 830, 831, 832, 833, 834, 835, 837, 838, 840, 842, 843, 844, 845, 847, 848, 849, 851, 852, 853, 854, 855, 856, 858, 860, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1032, 1036, 1037, 1038, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156], "aco": [2, 128, 129, 184, 318, 319, 516, 526, 1124], "acosh": [2, 128, 129, 184, 318, 319, 429, 450, 451, 516, 525, 586, 590, 1124], "adam_step": [2, 132, 133, 184, 278, 322, 323, 828, 834], "mw": [2, 6, 132, 133, 184, 188, 278, 322, 323, 375, 828, 830, 831, 832, 833, 834, 835, 837], "vw": [2, 6, 132, 133, 184, 188, 278, 322, 323, 375, 828, 830, 831, 832, 833, 834, 835, 837], "step": [2, 6, 132, 133, 176, 179, 180, 184, 188, 189, 236, 278, 279, 290, 322, 323, 351, 352, 354, 358, 362, 364, 365, 366, 367, 371, 374, 375, 376, 387, 410, 411, 419, 420, 466, 828, 830, 831, 832, 833, 834, 835, 836, 837, 838, 840, 842, 845, 846, 847, 848, 849, 851, 853, 855, 1022, 1023, 1024, 1025, 1124, 1161, 1162, 1163, 1164, 1165, 1166], "beta1": [2, 6, 132, 133, 184, 188, 189, 236, 278, 279, 290, 322, 323, 375, 828, 830, 831, 832, 833, 834, 835, 836, 837, 838, 845, 846, 847, 848, 1161, 1162, 1163], "9": [2, 6, 7, 28, 128, 129, 132, 133, 142, 143, 181, 182, 184, 188, 189, 190, 236, 278, 279, 280, 290, 294, 318, 319, 322, 323, 336, 337, 354, 358, 374, 375, 516, 530, 531, 532, 534, 555, 558, 559, 562, 664, 684, 685, 711, 714, 727, 730, 731, 734, 754, 782, 828, 830, 831, 832, 833, 834, 835, 836, 837, 838, 845, 846, 847, 848, 863, 866, 869, 870, 876, 880, 882, 883, 886, 888, 912, 914, 925, 931, 933, 962, 963, 964, 966, 980, 983, 988, 991, 996, 999, 1001, 1049, 1050, 1051, 1052, 1053, 1061, 1065, 1066, 1067, 1082, 1083, 1086, 1110, 1161, 1162, 1163], "beta2": [2, 6, 132, 133, 184, 188, 189, 236, 278, 279, 290, 322, 323, 375, 828, 830, 831, 832, 833, 834, 835, 836, 837, 838, 845, 846, 847, 848, 1161, 1162, 1163], "999": [2, 6, 132, 133, 184, 188, 189, 236, 278, 279, 290, 301, 307, 318, 319, 322, 323, 375, 516, 546, 551, 745, 746, 748, 828, 830, 831, 832, 833, 834, 835, 836, 837, 838, 845, 846, 847, 848, 1161, 1162, 1163], "epsilon": [2, 6, 18, 34, 56, 95, 132, 133, 140, 141, 144, 145, 184, 188, 189, 203, 218, 236, 238, 272, 278, 279, 283, 286, 290, 298, 322, 323, 330, 331, 334, 335, 361, 365, 368, 375, 828, 830, 831, 832, 833, 834, 835, 836, 837, 838, 845, 846, 847, 848, 876, 897, 906, 908, 915, 917, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 1044, 1045, 1046, 1047, 1048, 1159, 1160, 1161, 1162, 1163], "1e": [2, 6, 18, 34, 56, 95, 132, 133, 140, 141, 144, 145, 184, 188, 189, 203, 218, 236, 238, 272, 278, 279, 283, 286, 290, 298, 322, 323, 330, 331, 334, 335, 361, 365, 368, 375, 376, 754, 790, 828, 830, 831, 832, 833, 834, 835, 836, 837, 838, 845, 846, 847, 848, 876, 925, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 1044, 1045, 1046, 1047, 1048, 1124, 1161, 1162, 1163, 1164, 1166], "07": [2, 6, 18, 34, 95, 132, 133, 140, 141, 184, 188, 189, 203, 218, 236, 272, 278, 279, 283, 286, 290, 298, 322, 323, 330, 331, 375, 828, 830, 831, 832, 833, 834, 835, 836, 837, 838, 845, 846, 847, 848, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 1161, 1162, 1163], "With": [2, 6, 10, 130, 131, 132, 133, 175, 176, 179, 180, 181, 182, 184, 193, 277, 280, 281, 285, 288, 294, 296, 300, 301, 318, 319, 320, 321, 332, 333, 336, 337, 351, 358, 360, 371, 399, 401, 402, 403, 404, 405, 406, 410, 421, 429, 438, 441, 466, 488, 504, 516, 517, 520, 521, 530, 534, 535, 538, 546, 551, 555, 558, 575, 578, 579, 582, 587, 599, 612, 623, 624, 627, 664, 684, 685, 691, 694, 695, 698, 711, 714, 727, 730, 731, 734, 740, 741, 745, 746, 749, 754, 755, 756, 757, 758, 759, 763, 771, 772, 779, 782, 783, 786, 787, 817, 822, 823, 824, 828, 830, 831, 833, 863, 866, 869, 870, 875, 876, 877, 879, 880, 882, 883, 886, 888, 902, 904, 931, 933, 946, 947, 950, 957, 960, 962, 963, 966, 967, 976, 979, 980, 983, 988, 991, 996, 999, 1000, 1001, 1010, 1013, 1044, 1045, 1048, 1049, 1050, 1051, 1053, 1054, 1055, 1057, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1071, 1072, 1075, 1082, 1083, 1086, 1110, 1115, 1116, 1119], "input": [2, 6, 117, 120, 121, 132, 133, 179, 180, 181, 182, 183, 184, 188, 277, 278, 280, 281, 285, 288, 294, 296, 300, 301, 318, 319, 320, 321, 322, 323, 332, 333, 336, 337, 356, 357, 358, 360, 361, 362, 364, 365, 366, 367, 368, 369, 371, 373, 374, 375, 376, 388, 389, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 435, 436, 437, 438, 441, 443, 444, 445, 446, 447, 448, 454, 455, 456, 457, 461, 466, 475, 476, 485, 486, 487, 488, 490, 491, 494, 498, 504, 510, 511, 516, 517, 520, 521, 522, 525, 526, 529, 530, 533, 534, 535, 538, 539, 542, 543, 546, 547, 550, 551, 554, 555, 558, 559, 562, 563, 566, 567, 570, 571, 574, 575, 578, 579, 582, 583, 586, 587, 590, 591, 594, 596, 599, 600, 603, 604, 607, 608, 611, 612, 615, 616, 619, 620, 623, 624, 627, 628, 631, 632, 635, 636, 639, 640, 643, 644, 647, 648, 651, 652, 655, 656, 659, 660, 663, 664, 667, 668, 671, 672, 675, 676, 679, 680, 683, 684, 685, 686, 689, 691, 694, 695, 698, 699, 702, 703, 706, 707, 710, 711, 714, 715, 718, 719, 722, 723, 726, 727, 730, 731, 734, 735, 739, 740, 741, 744, 745, 746, 749, 750, 753, 754, 755, 758, 759, 760, 762, 763, 764, 766, 767, 769, 771, 772, 773, 775, 776, 777, 778, 779, 780, 781, 782, 783, 786, 787, 791, 793, 794, 796, 797, 798, 800, 801, 802, 803, 807, 810, 811, 816, 817, 820, 822, 823, 824, 826, 827, 828, 830, 831, 832, 833, 834, 839, 844, 858, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 879, 880, 882, 883, 885, 886, 888, 889, 891, 892, 894, 895, 897, 898, 901, 902, 904, 906, 908, 909, 911, 912, 914, 915, 917, 918, 920, 921, 922, 924, 925, 927, 928, 930, 931, 933, 934, 936, 937, 939, 940, 942, 943, 945, 946, 947, 950, 952, 955, 957, 960, 962, 963, 966, 967, 968, 971, 972, 975, 976, 979, 980, 983, 984, 987, 988, 991, 992, 995, 996, 999, 1000, 1001, 1002, 1005, 1006, 1009, 1010, 1013, 1014, 1017, 1018, 1021, 1022, 1023, 1024, 1025, 1044, 1045, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1057, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1075, 1077, 1080, 1082, 1083, 1086, 1087, 1090, 1091, 1094, 1095, 1098, 1099, 1102, 1103, 1106, 1107, 1110, 1111, 1114, 1115, 1116, 1119, 1120, 1123, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1159, 1160], "dcdw": [2, 6, 132, 133, 184, 188, 189, 230, 236, 237, 278, 279, 289, 290, 291, 322, 323, 828, 830, 831, 832, 833, 834, 835, 836, 837, 838, 840, 841, 842, 843, 845, 846, 847, 848, 849, 850, 851, 852], "3": [2, 6, 7, 10, 25, 28, 47, 49, 124, 125, 128, 129, 130, 131, 132, 133, 142, 143, 181, 182, 184, 185, 188, 190, 193, 210, 211, 212, 227, 229, 266, 277, 278, 280, 284, 285, 288, 294, 296, 300, 301, 306, 307, 314, 315, 318, 319, 320, 321, 322, 323, 332, 333, 336, 337, 351, 354, 358, 362, 365, 371, 373, 374, 375, 376, 399, 401, 402, 403, 404, 409, 410, 418, 421, 424, 427, 428, 429, 438, 439, 440, 441, 442, 466, 485, 488, 504, 511, 516, 517, 519, 520, 521, 530, 531, 532, 534, 535, 538, 546, 551, 555, 558, 571, 574, 575, 578, 579, 581, 582, 587, 599, 604, 612, 613, 614, 616, 620, 623, 624, 627, 640, 643, 664, 684, 685, 691, 694, 695, 698, 711, 714, 727, 730, 731, 734, 740, 741, 743, 745, 746, 748, 749, 754, 755, 756, 757, 762, 763, 772, 779, 782, 783, 784, 785, 786, 787, 816, 817, 822, 824, 828, 830, 831, 832, 833, 834, 863, 864, 865, 866, 868, 869, 870, 875, 876, 877, 879, 880, 882, 883, 886, 888, 895, 906, 908, 912, 914, 925, 931, 933, 934, 936, 943, 945, 946, 947, 950, 957, 960, 962, 963, 964, 965, 966, 967, 968, 971, 976, 979, 980, 983, 988, 991, 992, 995, 996, 998, 999, 1000, 1001, 1002, 1005, 1010, 1013, 1044, 1045, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1057, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1071, 1072, 1075, 1082, 1083, 1086, 1087, 1090, 1107, 1110, 1115, 1116, 1119, 1124], "adam_step_delta": [2, 6, 132, 133, 184, 188, 278, 322, 323, 828, 830, 831, 832, 833, 834], "639": [2, 6, 132, 133, 828, 830, 831, 833], "11": [2, 6, 132, 133, 181, 182, 184, 190, 280, 294, 318, 319, 336, 337, 358, 365, 516, 530, 532, 534, 555, 558, 664, 711, 714, 754, 772, 782, 830, 831, 876, 886, 888, 912, 914, 946, 957, 960, 962, 980, 983, 988, 991, 1049, 1051, 1052, 1053, 1061, 1065, 1066, 1067, 1082, 1083, 1086, 1110], "32": [2, 6, 132, 133, 374, 399, 401, 516, 575, 578, 830, 831, 863, 866, 869, 876, 912, 914, 1061, 1065, 1082, 1083, 1086, 1110], "63": [2, 6, 132, 133, 516, 727, 730, 830, 831, 876, 877, 879, 912, 914, 1082, 1083, 1086, 1110], "00121": [2, 6, 132, 133, 830, 831], "0102": [2, 6, 132, 133, 830, 831], "0397": [2, 6, 132, 133, 830, 831], "add": [2, 8, 128, 129, 158, 159, 179, 180, 181, 182, 184, 191, 280, 281, 318, 319, 320, 321, 348, 349, 351, 352, 353, 355, 356, 357, 361, 362, 364, 365, 369, 371, 373, 388, 516, 517, 520, 534, 664, 755, 759, 1044, 1045, 1048, 1124, 1130, 1159, 1160], "x2": [2, 7, 10, 16, 19, 21, 22, 23, 24, 33, 37, 41, 48, 50, 51, 57, 58, 63, 64, 66, 67, 68, 75, 77, 78, 82, 85, 93, 101, 108, 113, 128, 129, 130, 131, 138, 139, 179, 180, 184, 190, 193, 201, 204, 206, 207, 208, 209, 219, 221, 228, 231, 232, 239, 240, 245, 246, 248, 249, 250, 254, 256, 260, 263, 280, 281, 287, 292, 299, 303, 318, 319, 320, 321, 328, 329, 358, 369, 429, 461, 466, 504, 516, 530, 531, 532, 533, 534, 547, 548, 549, 550, 555, 556, 557, 558, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 591, 592, 593, 594, 595, 596, 597, 598, 599, 607, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 640, 641, 642, 643, 644, 645, 646, 647, 664, 665, 666, 667, 668, 669, 670, 671, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 695, 696, 697, 698, 703, 704, 705, 706, 707, 708, 709, 710, 735, 736, 737, 738, 739, 754, 755, 756, 757, 758, 759, 863, 868, 876, 880, 881, 882, 898, 899, 900, 901, 912, 913, 914, 922, 923, 924, 931, 932, 933, 937, 938, 939, 1061, 1065], "4": [2, 7, 28, 128, 129, 142, 143, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 188, 190, 210, 211, 212, 227, 229, 266, 277, 278, 280, 284, 285, 288, 294, 296, 300, 301, 306, 307, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 354, 358, 362, 365, 371, 373, 374, 375, 376, 399, 401, 402, 404, 410, 418, 421, 424, 428, 429, 438, 440, 441, 442, 466, 488, 504, 516, 517, 519, 520, 521, 530, 531, 532, 534, 535, 538, 546, 547, 550, 551, 555, 558, 575, 578, 579, 581, 582, 587, 599, 612, 614, 616, 623, 624, 627, 664, 684, 685, 691, 694, 695, 698, 711, 714, 727, 730, 731, 734, 740, 741, 743, 745, 746, 748, 749, 754, 763, 772, 781, 782, 783, 785, 786, 787, 817, 822, 828, 830, 832, 833, 834, 863, 866, 867, 868, 870, 873, 875, 876, 880, 882, 883, 886, 888, 895, 906, 908, 912, 914, 931, 933, 934, 936, 946, 957, 960, 962, 963, 964, 965, 966, 967, 968, 971, 976, 979, 980, 983, 988, 991, 992, 995, 996, 998, 999, 1000, 1001, 1010, 1013, 1044, 1045, 1048, 1049, 1050, 1051, 1053, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1071, 1072, 1075, 1082, 1083, 1086, 1087, 1090, 1110, 1115, 1116, 1119, 1124, 1161, 1162, 1163, 1164, 1166], "5": [2, 7, 10, 26, 28, 47, 128, 129, 130, 131, 142, 143, 181, 182, 184, 185, 188, 190, 210, 211, 212, 227, 266, 277, 278, 280, 284, 285, 288, 294, 296, 300, 301, 306, 307, 314, 315, 318, 319, 320, 321, 322, 323, 332, 333, 336, 337, 352, 354, 358, 362, 369, 373, 374, 375, 399, 401, 402, 404, 410, 418, 421, 424, 427, 428, 429, 438, 440, 441, 442, 466, 488, 504, 516, 517, 519, 520, 521, 530, 531, 532, 534, 535, 538, 546, 551, 554, 555, 558, 571, 574, 575, 578, 579, 580, 581, 582, 587, 599, 612, 613, 614, 616, 623, 624, 627, 664, 684, 685, 691, 694, 695, 698, 711, 714, 727, 730, 731, 734, 740, 741, 743, 744, 745, 746, 748, 749, 754, 755, 756, 763, 772, 782, 783, 786, 787, 817, 822, 828, 830, 832, 833, 834, 863, 866, 868, 869, 875, 876, 877, 879, 880, 882, 883, 886, 888, 895, 912, 914, 931, 933, 934, 936, 946, 957, 960, 962, 963, 964, 965, 966, 967, 968, 971, 976, 979, 980, 983, 988, 991, 992, 995, 996, 998, 999, 1000, 1001, 1010, 1013, 1044, 1045, 1048, 1049, 1050, 1051, 1052, 1053, 1060, 1061, 1063, 1064, 1065, 1066, 1067, 1068, 1071, 1072, 1075, 1082, 1083, 1086, 1087, 1090, 1110, 1115, 1116, 1119, 1145, 1156], "z": [2, 7, 49, 128, 129, 130, 131, 181, 182, 184, 190, 229, 280, 288, 318, 319, 320, 321, 358, 362, 365, 371, 373, 466, 500, 516, 530, 531, 532, 534, 555, 558, 575, 578, 599, 623, 624, 627, 664, 684, 685, 754, 762, 763, 782, 783, 784, 785, 787, 816, 876, 880, 882, 946, 947, 950, 952, 955, 962, 963, 966, 1061, 1062, 1082, 1083, 1086, 1087, 1090, 1110], "7": [2, 7, 28, 128, 129, 142, 143, 181, 182, 184, 190, 280, 294, 318, 319, 336, 337, 352, 354, 358, 361, 365, 368, 399, 401, 402, 466, 488, 516, 517, 520, 530, 531, 532, 534, 555, 558, 559, 562, 575, 578, 579, 582, 587, 599, 604, 612, 623, 624, 627, 664, 684, 685, 711, 714, 727, 730, 740, 745, 754, 763, 772, 782, 828, 830, 833, 835, 837, 845, 847, 863, 869, 870, 875, 876, 880, 882, 883, 886, 888, 912, 914, 931, 933, 946, 947, 950, 952, 955, 957, 960, 962, 963, 964, 966, 976, 979, 980, 983, 988, 991, 1001, 1010, 1013, 1044, 1045, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1057, 1061, 1065, 1066, 1067, 1082, 1083, 1086, 1110], "add_ivy_array_instance_method": [2, 158], "cl": [2, 8, 158, 159, 184, 191, 348, 349], "modul": [2, 8, 158, 159, 160, 164, 165, 176, 179, 180, 181, 182, 183, 184, 191, 348, 349, 351, 354, 360, 361, 362, 364, 368, 371, 372, 374, 376, 387, 388, 754, 805, 1049, 1050, 1054, 1124, 1131, 1132, 1133, 1134, 1135, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1159, 1160, 1167, 1168], "to_ignor": [2, 8, 158, 159, 184, 191, 348, 349, 1026, 1037], "loop": [2, 8, 158, 159, 184, 191, 348, 349, 362, 388, 1022, 1023, 1024, 1025], "over": [2, 8, 158, 159, 160, 164, 174, 176, 179, 180, 184, 191, 348, 349, 351, 357, 358, 362, 368, 373, 388, 876, 902, 904, 931, 933, 937, 939, 940, 942, 1044, 1045, 1048, 1049, 1055, 1057, 1082, 1087, 1090, 1091, 1094, 1095, 1098, 1099, 1102, 1103, 1106, 1107, 1111, 1114, 1115, 1116, 1119, 1120, 1123, 1159, 1160], "all": [2, 8, 117, 118, 119, 120, 121, 156, 157, 158, 159, 174, 175, 176, 179, 180, 184, 191, 346, 347, 348, 349, 350, 351, 352, 353, 354, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 373, 374, 375, 376, 387, 388, 389, 397, 407, 408, 410, 411, 425, 426, 466, 475, 500, 506, 754, 755, 758, 762, 763, 788, 808, 823, 863, 873, 876, 922, 924, 931, 933, 940, 942, 962, 980, 983, 996, 999, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1037, 1038, 1039, 1049, 1050, 1055, 1057, 1115, 1124, 1127, 1129], "gener": [2, 8, 131, 158, 159, 179, 180, 184, 191, 321, 348, 349, 352, 353, 354, 355, 356, 357, 358, 361, 364, 365, 366, 367, 368, 369, 370, 371, 373, 375, 376, 387, 388, 407, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 423, 424, 425, 426, 427, 428, 429, 438, 441, 516, 517, 520, 535, 538, 575, 578, 579, 582, 587, 612, 695, 698, 707, 710, 727, 730, 731, 734, 755, 758, 760, 761, 762, 763, 764, 765, 766, 767, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 786, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 844, 962, 976, 979, 996, 999, 1049, 1050, 1051, 1052, 1055, 1057, 1059, 1066, 1067, 1068, 1071, 1072, 1075, 1082, 1087, 1090, 1124, 1161, 1165], "etc": [2, 8, 158, 159, 176, 179, 180, 184, 191, 348, 349, 351, 352, 353, 356, 358, 360, 364, 365, 366, 369, 371, 373, 374, 388, 410, 419, 420, 754, 782, 783, 786, 807, 810, 811, 1049, 1050, 1051, 1052, 1055, 1057, 1066, 1067, 1068, 1070, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1165, 1167, 1168], "_wrap_funct": [2, 8, 158, 159, 184, 191, 348, 349, 361, 363], "paramet": [2, 8, 117, 118, 119, 120, 121, 158, 159, 160, 164, 165, 179, 180, 181, 182, 183, 184, 191, 348, 349, 356, 357, 360, 373, 374, 387, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 433, 434, 435, 436, 437, 438, 441, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 465, 466, 475, 476, 479, 480, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 502, 504, 505, 506, 507, 508, 509, 510, 511, 512, 515, 516, 517, 520, 522, 525, 526, 529, 530, 533, 535, 538, 539, 542, 543, 546, 547, 550, 551, 554, 555, 558, 559, 562, 563, 566, 567, 570, 571, 574, 575, 578, 579, 582, 583, 586, 587, 590, 591, 594, 596, 599, 600, 603, 604, 607, 608, 611, 612, 615, 616, 619, 620, 623, 624, 627, 628, 631, 632, 635, 636, 639, 640, 643, 644, 647, 648, 651, 652, 655, 656, 659, 660, 663, 664, 667, 668, 671, 672, 675, 676, 679, 680, 683, 684, 685, 686, 689, 691, 694, 695, 698, 699, 702, 703, 706, 707, 710, 711, 714, 715, 718, 719, 722, 723, 726, 727, 730, 731, 734, 735, 739, 740, 744, 745, 749, 750, 753, 754, 755, 758, 760, 761, 762, 763, 764, 765, 766, 767, 769, 772, 773, 775, 776, 777, 778, 779, 780, 781, 782, 783, 786, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 807, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 822, 823, 824, 825, 826, 827, 828, 830, 833, 835, 837, 839, 840, 842, 844, 845, 847, 849, 851, 853, 855, 857, 858, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 879, 880, 882, 883, 885, 886, 888, 889, 891, 892, 894, 895, 897, 898, 901, 902, 904, 906, 908, 909, 911, 912, 914, 915, 917, 918, 920, 921, 922, 924, 925, 927, 928, 930, 931, 933, 934, 936, 937, 939, 940, 942, 943, 945, 946, 947, 950, 952, 955, 957, 960, 962, 963, 966, 968, 971, 972, 975, 976, 979, 980, 983, 984, 987, 988, 991, 992, 995, 996, 999, 1001, 1002, 1005, 1006, 1009, 1010, 1013, 1014, 1017, 1018, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1048, 1049, 1050, 1051, 1052, 1054, 1055, 1057, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1075, 1077, 1080, 1082, 1083, 1086, 1087, 1090, 1091, 1094, 1095, 1098, 1099, 1102, 1103, 1106, 1107, 1110, 1111, 1114, 1115, 1116, 1119, 1120, 1123, 1127, 1129, 1134, 1135, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168], "we": [2, 8, 158, 159, 160, 165, 166, 172, 173, 174, 175, 176, 184, 191, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 363, 364, 365, 366, 368, 369, 371, 372, 373, 374, 375, 376, 387, 388, 828, 839, 1124, 1130], "want": [2, 8, 158, 159, 160, 165, 175, 184, 191, 348, 349, 350, 351, 352, 360, 374, 375, 376, 388], "list": [2, 8, 117, 118, 119, 120, 121, 158, 159, 179, 180, 184, 188, 191, 278, 322, 323, 348, 349, 351, 353, 354, 356, 358, 366, 367, 369, 371, 374, 375, 376, 388, 410, 411, 412, 413, 421, 422, 423, 427, 429, 436, 466, 475, 476, 485, 487, 488, 491, 492, 495, 496, 510, 754, 763, 817, 822, 826, 830, 832, 834, 863, 864, 865, 866, 867, 868, 869, 870, 876, 931, 933, 962, 968, 971, 980, 983, 1001, 1006, 1009, 1026, 1027, 1028, 1032, 1037, 1038, 1044, 1045, 1048, 1061, 1064, 1115, 1116, 1119, 1120, 1123, 1124, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152], "option": [2, 8, 117, 118, 119, 120, 121, 158, 159, 160, 165, 179, 180, 181, 182, 184, 191, 348, 349, 351, 352, 356, 357, 358, 361, 365, 366, 367, 368, 369, 371, 376, 388, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 435, 437, 443, 444, 445, 446, 453, 465, 466, 485, 509, 510, 511, 516, 517, 520, 522, 525, 526, 529, 530, 533, 535, 538, 539, 542, 543, 546, 547, 550, 551, 554, 555, 558, 559, 562, 563, 566, 567, 570, 571, 574, 575, 578, 579, 582, 583, 586, 587, 590, 591, 594, 596, 599, 600, 603, 604, 607, 608, 611, 612, 615, 616, 619, 620, 623, 624, 627, 628, 631, 632, 635, 636, 639, 640, 643, 644, 647, 648, 651, 652, 655, 656, 659, 660, 663, 664, 667, 668, 671, 672, 675, 676, 679, 680, 683, 684, 685, 686, 689, 691, 694, 695, 698, 699, 702, 703, 706, 707, 710, 711, 714, 715, 718, 719, 722, 723, 726, 727, 730, 731, 734, 735, 739, 740, 744, 745, 749, 750, 753, 754, 760, 766, 767, 769, 772, 773, 774, 776, 777, 778, 780, 782, 783, 786, 794, 805, 807, 810, 811, 818, 819, 828, 858, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 879, 880, 882, 883, 885, 886, 888, 892, 894, 895, 897, 898, 901, 902, 904, 906, 908, 909, 911, 912, 914, 915, 917, 921, 922, 924, 925, 927, 928, 930, 931, 933, 934, 936, 937, 939, 940, 942, 943, 945, 946, 947, 950, 952, 955, 957, 960, 962, 963, 966, 968, 971, 972, 975, 976, 979, 980, 983, 984, 987, 988, 991, 992, 995, 996, 999, 1001, 1002, 1005, 1006, 1009, 1010, 1013, 1014, 1017, 1018, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1032, 1037, 1038, 1044, 1045, 1048, 1049, 1050, 1051, 1052, 1054, 1055, 1057, 1060, 1061, 1062, 1063, 1065, 1066, 1070, 1071, 1072, 1075, 1077, 1080, 1082, 1083, 1086, 1087, 1090, 1091, 1094, 1095, 1098, 1099, 1102, 1103, 1106, 1107, 1110, 1111, 1114, 1115, 1116, 1119, 1120, 1123], "iter": [2, 8, 117, 118, 119, 120, 121, 158, 159, 176, 179, 180, 181, 182, 183, 184, 191, 348, 349, 365, 371, 374, 407, 408, 466, 488, 489, 491, 492, 493, 494, 497, 510, 754, 755, 758, 811, 816, 962, 972, 975, 988, 991, 1001, 1014, 1017, 1018, 1021, 1026, 1027, 1028, 1032, 1036, 1037, 1038], "ani": [2, 8, 117, 118, 119, 156, 157, 158, 159, 160, 164, 172, 174, 175, 176, 179, 180, 184, 191, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 364, 365, 366, 367, 368, 369, 371, 373, 374, 375, 376, 387, 388, 407, 408, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 438, 441, 466, 511, 516, 517, 520, 530, 535, 538, 579, 582, 596, 599, 612, 623, 624, 627, 644, 647, 695, 698, 727, 730, 731, 734, 740, 754, 755, 758, 775, 776, 777, 778, 779, 782, 793, 800, 801, 802, 803, 818, 819, 828, 839, 863, 866, 873, 875, 962, 996, 999, 1022, 1023, 1024, 1025, 1026, 1032, 1036, 1044, 1045, 1048, 1049, 1055, 1057, 1082, 1087, 1090, 1115, 1116, 1119, 1124], "item": [2, 8, 117, 121, 158, 159, 179, 180, 366, 371, 373, 374, 376, 429, 444, 466, 475, 476, 478, 485, 487, 489, 491, 493, 497, 754, 770, 792, 818, 819, 1026, 1031, 1032, 1033, 1034, 1038, 1042, 1043, 1124, 1157, 1158], "don": [2, 8, 158, 159, 176, 184, 191, 348, 349, 351, 352, 353, 366, 375, 388], "t": [2, 8, 158, 159, 160, 165, 175, 176, 184, 191, 348, 349, 351, 352, 353, 354, 358, 366, 371, 373, 374, 375, 376, 388, 754, 763, 863, 872, 873], "an": [2, 8, 117, 120, 121, 158, 159, 175, 176, 179, 180, 184, 191, 348, 349, 351, 352, 353, 354, 356, 357, 358, 360, 361, 362, 364, 365, 366, 367, 368, 369, 371, 373, 374, 375, 376, 387, 388, 399, 402, 403, 405, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 435, 436, 437, 438, 441, 449, 454, 455, 457, 466, 488, 492, 511, 516, 517, 520, 522, 525, 526, 529, 530, 533, 535, 538, 539, 542, 543, 546, 547, 550, 551, 554, 555, 558, 559, 562, 563, 566, 567, 570, 571, 574, 575, 578, 579, 582, 583, 586, 587, 590, 591, 594, 596, 599, 604, 607, 608, 611, 612, 615, 616, 619, 620, 623, 624, 627, 628, 631, 632, 635, 636, 639, 640, 643, 644, 647, 648, 651, 652, 655, 656, 659, 660, 663, 664, 667, 668, 671, 672, 675, 676, 679, 680, 683, 684, 685, 686, 689, 691, 694, 695, 698, 703, 706, 707, 710, 711, 714, 715, 718, 719, 722, 723, 726, 727, 730, 731, 734, 735, 739, 740, 744, 745, 749, 750, 753, 754, 765, 766, 767, 769, 771, 780, 781, 782, 794, 798, 800, 801, 802, 803, 823, 824, 825, 828, 844, 858, 860, 861, 863, 866, 875, 876, 877, 879, 880, 882, 883, 885, 886, 888, 889, 891, 892, 894, 895, 897, 898, 901, 905, 906, 908, 909, 911, 915, 917, 918, 920, 921, 922, 924, 925, 934, 936, 937, 939, 940, 942, 962, 963, 966, 968, 971, 972, 975, 976, 979, 980, 983, 984, 987, 992, 995, 996, 999, 1001, 1002, 1005, 1006, 1009, 1010, 1013, 1014, 1017, 1018, 1021, 1026, 1032, 1044, 1045, 1048, 1049, 1051, 1052, 1060, 1061, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1075, 1077, 1080, 1082, 1083, 1086, 1087, 1090, 1091, 1094, 1095, 1098, 1099, 1102, 1103, 1106, 1107, 1110, 1111, 1114, 1115, 1116, 1119, 1120, 1123, 1124, 1134, 1135, 1157, 1158, 1161, 1162, 1163, 1165], "default": [2, 8, 117, 118, 119, 120, 121, 158, 159, 160, 165, 179, 180, 181, 182, 183, 184, 191, 348, 349, 352, 357, 358, 361, 362, 365, 366, 367, 369, 375, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 435, 437, 444, 445, 446, 447, 466, 475, 476, 485, 486, 490, 491, 492, 493, 494, 495, 496, 497, 498, 505, 507, 508, 509, 510, 511, 514, 515, 516, 517, 520, 522, 525, 526, 529, 530, 533, 535, 538, 539, 542, 543, 546, 547, 550, 551, 554, 555, 558, 559, 562, 563, 566, 567, 570, 571, 574, 575, 578, 579, 582, 583, 586, 587, 590, 591, 594, 596, 599, 600, 603, 604, 607, 608, 611, 612, 615, 616, 619, 620, 623, 624, 627, 628, 631, 632, 635, 636, 639, 640, 643, 644, 647, 648, 651, 652, 655, 656, 659, 660, 663, 664, 667, 668, 671, 672, 675, 676, 679, 680, 683, 684, 685, 686, 689, 691, 694, 695, 698, 699, 702, 703, 706, 707, 710, 711, 714, 715, 718, 719, 722, 723, 726, 727, 730, 731, 734, 735, 739, 740, 744, 745, 749, 750, 753, 754, 755, 758, 760, 766, 767, 769, 772, 773, 776, 777, 778, 780, 781, 782, 783, 786, 791, 792, 793, 794, 795, 798, 799, 800, 801, 803, 804, 805, 807, 809, 810, 811, 814, 816, 818, 819, 826, 827, 828, 830, 833, 835, 837, 839, 840, 842, 844, 845, 847, 849, 851, 853, 855, 858, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 879, 880, 882, 883, 885, 886, 888, 892, 894, 895, 897, 898, 901, 902, 904, 906, 908, 909, 911, 912, 914, 915, 917, 918, 920, 921, 922, 924, 925, 927, 928, 930, 931, 933, 934, 936, 937, 939, 940, 942, 943, 945, 946, 947, 950, 952, 955, 957, 960, 962, 963, 966, 968, 971, 972, 975, 976, 979, 980, 983, 984, 987, 988, 991, 992, 995, 996, 999, 1001, 1002, 1005, 1006, 1009, 1010, 1013, 1014, 1017, 1018, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1032, 1036, 1037, 1038, 1039, 1044, 1045, 1048, 1049, 1050, 1051, 1052, 1054, 1055, 1057, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1070, 1071, 1072, 1075, 1077, 1080, 1082, 1083, 1086, 1087, 1090, 1091, 1094, 1095, 1098, 1099, 1102, 1103, 1106, 1107, 1110, 1111, 1114, 1115, 1116, 1119, 1120, 1123, 1134, 1135, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168], "As": [2, 8, 158, 159, 174, 184, 191, 348, 349, 352, 360, 361, 364, 365, 366, 367, 368, 369, 371, 373, 374, 375, 388, 1066, 1067, 1068, 1070], "shown": [2, 8, 158, 159, 179, 180, 184, 191, 348, 349, 352, 358, 369, 371, 373, 388, 516, 555, 558, 575, 578, 587, 711, 714, 745, 876, 883, 962, 976, 979, 980, 983, 1066, 1067, 1068, 1071, 1072, 1075], "appropri": [2, 8, 158, 159, 184, 191, 348, 349, 352, 363, 516, 530, 686, 689, 1061, 1062], "from": [2, 8, 117, 118, 119, 120, 121, 158, 159, 160, 164, 165, 166, 174, 175, 176, 179, 180, 181, 182, 183, 184, 191, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 360, 362, 364, 365, 366, 367, 368, 369, 371, 373, 374, 375, 376, 387, 388, 410, 411, 412, 414, 416, 417, 418, 421, 422, 424, 428, 429, 438, 441, 457, 466, 475, 476, 485, 500, 504, 509, 510, 516, 620, 727, 730, 754, 775, 782, 783, 786, 822, 828, 835, 837, 845, 847, 863, 871, 874, 876, 886, 888, 925, 937, 939, 962, 980, 983, 992, 995, 1002, 1005, 1022, 1023, 1024, 1025, 1026, 1028, 1038, 1039, 1049, 1050, 1051, 1052, 1054, 1055, 1057, 1061, 1065, 1066, 1067, 1069, 1082, 1099, 1102, 1103, 1106, 1107, 1111, 1114, 1115, 1116, 1119, 1120, 1123, 1124, 1130, 1134, 1135, 1145, 1153, 1156, 1161, 1165], "our": [2, 8, 158, 159, 174, 175, 184, 191, 348, 349, 350, 351, 352, 358, 365, 370, 373, 374, 375, 376, 388, 1124], "toi": [2, 8, 158, 159, 184, 191, 348, 349], "arrayexampl": [2, 8, 158, 159], "import": [2, 8, 158, 159, 160, 164, 175, 184, 191, 348, 349, 353, 356, 357, 358, 362, 364, 365, 366, 367, 368, 371, 373, 374, 376, 388, 466, 507, 1124, 1130], "pass": [2, 8, 158, 159, 160, 164, 179, 180, 181, 182, 183, 184, 191, 348, 349, 353, 357, 358, 359, 360, 361, 362, 364, 365, 368, 369, 373, 388, 429, 443, 466, 475, 510, 516, 547, 550, 754, 765, 798, 828, 861, 1022, 1023, 1024, 1134, 1135, 1157, 1158, 1161, 1165, 1167, 1168], "hasattr": [2, 8, 158, 159, 184, 191, 348, 349, 373], "relu": [2, 8, 158, 159, 181, 182, 374, 375, 399, 400, 401, 1124], "softmax": [2, 8, 158, 159, 181, 182, 399, 863, 874, 875, 1124], "true": [2, 8, 10, 12, 25, 94, 103, 124, 125, 130, 131, 138, 139, 152, 153, 158, 159, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 189, 190, 191, 192, 193, 194, 195, 196, 197, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 358, 360, 361, 365, 366, 368, 371, 373, 374, 375, 376, 399, 400, 407, 408, 410, 419, 429, 435, 438, 439, 440, 441, 442, 466, 485, 502, 506, 507, 516, 517, 519, 521, 524, 525, 526, 528, 532, 533, 534, 535, 537, 539, 541, 545, 546, 547, 549, 551, 553, 555, 557, 558, 559, 561, 563, 565, 567, 569, 571, 573, 575, 577, 578, 579, 581, 585, 586, 589, 590, 593, 594, 595, 598, 599, 600, 602, 606, 607, 608, 610, 614, 615, 616, 618, 620, 622, 623, 624, 626, 627, 628, 630, 631, 632, 634, 635, 636, 638, 639, 640, 642, 643, 644, 646, 648, 650, 652, 654, 656, 658, 660, 662, 664, 666, 668, 670, 672, 674, 675, 676, 678, 679, 680, 682, 686, 688, 690, 691, 693, 695, 697, 698, 699, 701, 703, 705, 707, 709, 711, 713, 715, 717, 719, 721, 723, 725, 727, 729, 731, 733, 735, 736, 738, 741, 743, 744, 746, 748, 749, 750, 752, 754, 755, 756, 757, 758, 759, 762, 763, 764, 765, 767, 768, 772, 779, 781, 783, 785, 787, 793, 794, 801, 816, 822, 824, 827, 828, 835, 836, 837, 838, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 858, 863, 871, 876, 877, 879, 898, 900, 902, 904, 925, 926, 928, 940, 942, 946, 947, 949, 950, 951, 952, 954, 955, 956, 957, 959, 960, 961, 962, 963, 965, 967, 968, 970, 972, 974, 976, 978, 980, 982, 984, 986, 988, 990, 992, 994, 996, 998, 1000, 1001, 1002, 1004, 1006, 1008, 1010, 1012, 1014, 1016, 1018, 1020, 1022, 1023, 1024, 1025, 1026, 1027, 1036, 1037, 1039, 1045, 1047, 1049, 1050, 1055, 1056, 1058, 1061, 1062, 1063, 1065, 1066, 1067, 1068, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1085, 1087, 1089, 1090, 1091, 1093, 1094, 1095, 1097, 1098, 1099, 1101, 1102, 1103, 1105, 1106, 1107, 1109, 1110, 1111, 1113, 1114, 1115, 1116, 1118, 1119, 1120, 1122, 1123, 1145, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166], "axi": [2, 9, 11, 12, 29, 33, 34, 44, 46, 72, 73, 74, 83, 86, 88, 94, 95, 98, 99, 100, 102, 112, 113, 114, 138, 139, 140, 141, 142, 143, 152, 153, 154, 155, 156, 157, 179, 180, 184, 192, 194, 195, 214, 218, 224, 226, 251, 252, 253, 261, 264, 266, 271, 272, 275, 276, 282, 286, 296, 297, 298, 302, 304, 310, 330, 331, 332, 333, 342, 343, 344, 345, 346, 347, 358, 361, 365, 366, 368, 369, 371, 373, 376, 387, 399, 404, 410, 419, 420, 466, 468, 471, 478, 491, 492, 493, 494, 495, 496, 497, 498, 510, 754, 772, 773, 782, 826, 876, 880, 881, 882, 886, 888, 937, 938, 939, 940, 941, 942, 946, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 968, 969, 970, 971, 972, 975, 976, 977, 978, 979, 980, 981, 982, 983, 988, 989, 990, 991, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1013, 1014, 1017, 1018, 1021, 1049, 1060, 1061, 1062, 1063, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123], "keepdim": [2, 9, 11, 69, 72, 73, 74, 83, 100, 102, 112, 114, 138, 139, 154, 155, 156, 157, 179, 180, 184, 192, 194, 251, 252, 253, 261, 302, 304, 310, 344, 345, 346, 347, 754, 826, 876, 902, 903, 904, 940, 941, 942, 1061, 1062, 1063, 1082, 1083, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123], "fals": [2, 9, 10, 11, 12, 27, 69, 72, 73, 74, 83, 94, 100, 102, 112, 114, 117, 118, 119, 120, 121, 130, 131, 138, 139, 152, 153, 154, 155, 156, 157, 160, 167, 168, 169, 170, 171, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 189, 190, 191, 192, 193, 194, 195, 196, 197, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 358, 365, 368, 374, 375, 376, 429, 435, 438, 440, 441, 442, 447, 466, 485, 486, 497, 501, 502, 505, 510, 513, 515, 516, 517, 519, 521, 524, 525, 526, 528, 532, 533, 534, 535, 537, 539, 541, 545, 546, 547, 549, 551, 553, 555, 557, 558, 559, 561, 563, 565, 567, 569, 571, 573, 575, 577, 579, 581, 585, 586, 589, 590, 593, 594, 595, 598, 599, 600, 602, 606, 607, 608, 610, 614, 615, 616, 618, 620, 622, 623, 624, 626, 627, 628, 630, 631, 632, 634, 635, 636, 638, 639, 640, 642, 643, 644, 646, 648, 650, 652, 654, 656, 658, 660, 662, 664, 666, 668, 670, 672, 674, 675, 676, 678, 679, 680, 682, 686, 688, 690, 691, 693, 695, 697, 698, 699, 701, 703, 705, 707, 709, 711, 713, 715, 717, 719, 721, 723, 725, 727, 729, 731, 733, 735, 736, 738, 741, 743, 744, 746, 748, 749, 750, 752, 754, 755, 756, 757, 758, 759, 762, 763, 767, 768, 772, 775, 779, 781, 783, 785, 787, 791, 798, 800, 801, 803, 804, 816, 826, 828, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 876, 877, 878, 879, 898, 900, 902, 903, 904, 925, 940, 941, 942, 947, 949, 951, 952, 954, 956, 957, 959, 961, 962, 963, 965, 967, 968, 970, 972, 974, 976, 978, 980, 982, 984, 986, 988, 990, 992, 994, 996, 998, 1000, 1001, 1002, 1004, 1006, 1008, 1010, 1012, 1014, 1016, 1018, 1020, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1032, 1036, 1037, 1038, 1039, 1045, 1047, 1049, 1050, 1055, 1056, 1058, 1061, 1062, 1063, 1065, 1066, 1067, 1068, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1085, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1134, 1135, 1157, 1158, 1161, 1162, 1163, 1164, 1165, 1166], "all_equ": [2, 130, 131, 184, 281, 320, 321, 754, 759], "equality_matrix": [2, 10, 130, 131, 184, 193, 281, 320, 321, 754, 755, 756, 757, 758, 759], "contain": [2, 10, 117, 120, 121, 130, 131, 174, 177, 178, 179, 180, 183, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 351, 352, 353, 354, 355, 357, 358, 360, 361, 366, 368, 369, 370, 371, 372, 375, 376, 388, 399, 402, 403, 405, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 423, 424, 425, 426, 427, 428, 429, 438, 441, 466, 487, 488, 491, 500, 504, 516, 517, 520, 522, 525, 526, 529, 530, 533, 535, 538, 539, 542, 543, 546, 547, 550, 551, 554, 555, 558, 559, 562, 563, 566, 567, 570, 571, 574, 575, 578, 579, 582, 583, 586, 587, 590, 591, 594, 596, 599, 600, 604, 607, 608, 611, 612, 615, 616, 619, 620, 623, 624, 627, 628, 631, 632, 635, 636, 639, 640, 643, 644, 647, 648, 651, 652, 655, 656, 659, 660, 663, 664, 667, 668, 671, 672, 675, 676, 679, 680, 683, 684, 685, 686, 689, 691, 694, 695, 698, 699, 703, 706, 707, 710, 711, 714, 715, 718, 719, 722, 723, 726, 727, 730, 731, 734, 735, 739, 740, 744, 745, 749, 750, 753, 754, 755, 756, 758, 760, 763, 766, 767, 769, 771, 772, 779, 782, 783, 786, 793, 802, 822, 823, 824, 828, 830, 833, 835, 840, 845, 849, 853, 863, 866, 869, 870, 875, 876, 877, 879, 880, 882, 883, 886, 888, 889, 891, 892, 894, 895, 897, 898, 901, 906, 908, 909, 911, 912, 914, 915, 917, 918, 920, 922, 924, 925, 927, 928, 930, 931, 933, 934, 936, 937, 939, 940, 942, 946, 947, 950, 952, 955, 957, 960, 962, 963, 966, 968, 972, 976, 979, 980, 983, 984, 987, 988, 991, 992, 996, 999, 1001, 1002, 1006, 1010, 1013, 1014, 1018, 1022, 1023, 1024, 1025, 1026, 1039, 1044, 1045, 1048, 1049, 1050, 1051, 1054, 1055, 1057, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1070, 1071, 1072, 1075, 1077, 1082, 1083, 1086, 1087, 1090, 1091, 1094, 1095, 1098, 1099, 1102, 1103, 1106, 1107, 1110, 1111, 1114, 1115, 1116, 1119, 1120, 1123, 1124, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1154, 1155, 1156, 1157, 1158, 1161, 1165, 1167, 1168], "x1": [2, 10, 130, 131, 184, 193, 280, 281, 287, 292, 299, 318, 319, 320, 321, 358, 369, 429, 461, 466, 504, 516, 530, 533, 534, 547, 550, 555, 558, 563, 566, 567, 570, 571, 574, 575, 578, 591, 594, 595, 596, 599, 607, 615, 616, 619, 620, 623, 624, 627, 640, 643, 644, 647, 664, 667, 668, 671, 676, 679, 680, 683, 684, 685, 686, 689, 690, 695, 698, 703, 706, 707, 710, 735, 736, 739, 754, 755, 756, 757, 758, 759, 762, 863, 868, 876, 880, 882, 898, 901, 912, 914, 922, 924, 931, 933, 937, 939, 1061, 1065], "mix": [2, 10, 130, 131, 181, 182, 184, 355, 358, 360, 371, 429, 457, 466, 504, 516, 530, 555, 558, 575, 578, 599, 623, 624, 627, 684, 685, 695, 698, 754, 755, 756, 771, 779, 782, 783, 786, 822, 823, 824, 863, 866, 869, 870, 875, 876, 931, 933, 946, 947, 950, 957, 960, 962, 963, 966, 1044, 1045, 1048, 1061, 1065, 1082, 1083, 1086, 1091, 1094, 1110], "nativearrai": [2, 10, 49, 117, 120, 121, 130, 131, 356, 358, 361, 364, 365, 368, 369, 371, 373, 376, 389, 397, 399, 400, 401, 402, 403, 404, 405, 406, 410, 411, 412, 414, 418, 419, 420, 421, 422, 424, 425, 426, 428, 429, 435, 436, 437, 438, 441, 447, 449, 452, 454, 455, 457, 461, 466, 485, 486, 488, 504, 510, 511, 516, 517, 520, 522, 525, 526, 529, 530, 533, 535, 538, 539, 542, 543, 546, 547, 550, 551, 554, 555, 558, 559, 562, 563, 566, 567, 570, 571, 574, 575, 578, 579, 582, 583, 586, 587, 590, 591, 594, 596, 599, 600, 603, 604, 607, 608, 611, 612, 615, 616, 619, 620, 623, 624, 627, 628, 631, 632, 635, 636, 639, 640, 643, 644, 647, 648, 651, 652, 655, 656, 659, 660, 663, 664, 667, 672, 675, 676, 679, 680, 683, 684, 685, 686, 689, 691, 694, 695, 698, 699, 702, 703, 706, 707, 710, 711, 714, 715, 718, 719, 722, 723, 726, 727, 730, 731, 734, 735, 739, 740, 744, 745, 749, 750, 753, 754, 755, 756, 758, 762, 763, 766, 767, 769, 771, 772, 773, 776, 777, 778, 780, 781, 782, 783, 784, 786, 791, 793, 794, 796, 797, 798, 807, 810, 811, 816, 817, 822, 823, 824, 826, 827, 828, 830, 833, 835, 837, 840, 842, 845, 847, 849, 851, 853, 855, 858, 860, 863, 864, 865, 866, 867, 868, 869, 870, 872, 873, 875, 876, 877, 879, 880, 882, 883, 885, 886, 888, 889, 891, 892, 894, 895, 897, 898, 901, 902, 904, 906, 908, 909, 911, 912, 914, 915, 917, 918, 920, 921, 922, 924, 925, 927, 928, 930, 931, 933, 934, 936, 937, 939, 940, 942, 943, 945, 946, 947, 950, 952, 955, 957, 960, 962, 963, 966, 968, 971, 972, 975, 976, 979, 980, 983, 984, 987, 988, 991, 992, 995, 996, 999, 1001, 1002, 1005, 1006, 1009, 1010, 1013, 1014, 1017, 1018, 1021, 1026, 1028, 1038, 1044, 1045, 1048, 1049, 1050, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1075, 1077, 1080, 1082, 1083, 1086, 1087, 1090, 1091, 1094, 1095, 1098, 1103, 1106, 1107, 1110, 1111, 1114, 1115, 1116, 1119, 1120, 1123], "native_arrai": [2, 10, 130, 131, 160, 166, 172, 181, 182, 184, 193, 281, 320, 321, 399, 401, 402, 403, 404, 405, 406, 410, 421, 429, 438, 441, 466, 488, 504, 516, 517, 520, 535, 538, 555, 558, 575, 578, 579, 582, 599, 612, 623, 624, 627, 684, 685, 691, 694, 695, 698, 727, 730, 731, 734, 745, 754, 755, 756, 757, 758, 759, 763, 771, 772, 779, 782, 783, 786, 817, 822, 823, 824, 828, 830, 833, 863, 866, 869, 870, 875, 876, 880, 882, 883, 886, 888, 931, 933, 946, 947, 950, 957, 960, 962, 963, 966, 976, 979, 980, 983, 988, 991, 1001, 1010, 1013, 1044, 1045, 1048, 1049, 1050, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1082, 1083, 1086, 1087, 1090, 1110, 1115, 1116, 1119], "argsort": [2, 152, 153, 184, 342, 343, 1071], "descend": [2, 12, 94, 152, 153, 184, 195, 271, 282, 297, 342, 343, 876, 925, 927, 928, 930, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081], "stabl": [2, 12, 94, 152, 153, 184, 195, 271, 282, 297, 342, 343, 351, 371, 388, 754, 789, 790, 812, 813, 818, 819, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081], "asin": [2, 128, 129, 184, 318, 319, 516, 1124], "asinh": [2, 128, 129, 184, 318, 319, 516, 1124], "atan": [2, 128, 129, 184, 318, 319, 516, 551, 1124], "atan2": [2, 128, 129, 184, 318, 319, 516, 1124], "atanh": [2, 128, 129, 184, 318, 319, 516, 546, 744, 749, 1124], "binary_cross_entropi": [2, 140, 141, 184, 330, 331, 946], "pred": [2, 18, 34, 95, 140, 141, 184, 203, 218, 272, 283, 286, 298, 330, 331, 361, 365, 368, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961], "bitwise_and": [2, 128, 129, 184, 318, 319, 516], "bitwise_invert": [2, 128, 129, 184, 318, 319, 516], "bitwise_left_shift": [2, 128, 129, 184, 318, 319, 516], "bitwise_or": [2, 128, 129, 184, 318, 319, 516], "bitwise_right_shift": [2, 128, 129, 184, 318, 319, 516], "bitwise_xor": [2, 128, 129, 184, 318, 319, 516], "can_cast": [2, 124, 125, 184, 284, 314, 315, 361, 366, 429, 442], "dtype": [2, 25, 83, 102, 124, 125, 154, 155, 179, 180, 184, 210, 261, 284, 304, 314, 315, 344, 345, 356, 358, 361, 366, 367, 373, 410, 411, 412, 413, 414, 415, 417, 418, 419, 422, 423, 424, 427, 428, 429, 433, 434, 435, 436, 438, 439, 440, 441, 442, 443, 444, 445, 446, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 465, 466, 506, 516, 571, 574, 754, 762, 763, 807, 823, 863, 871, 962, 976, 979, 1044, 1045, 1048, 1049, 1055, 1057, 1061, 1062, 1063, 1071, 1077, 1080, 1082, 1083, 1099, 1100, 1101, 1102, 1103, 1106, 1107, 1108, 1109, 1115, 1116, 1119, 1124, 1136, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1167, 1168], "float32": [2, 25, 124, 125, 184, 210, 284, 314, 315, 358, 366, 429, 433, 434, 438, 439, 440, 441, 442, 450, 1044, 1045, 1048], "float64": [2, 25, 124, 125, 366, 429, 435, 438, 439, 441, 450], "bool": [2, 25, 117, 118, 119, 120, 121, 124, 125, 179, 180, 184, 191, 348, 349, 358, 365, 366, 368, 376, 407, 408, 410, 417, 429, 435, 438, 439, 441, 444, 445, 446, 447, 450, 453, 454, 455, 465, 466, 485, 486, 501, 510, 513, 516, 555, 558, 559, 562, 567, 570, 575, 578, 596, 599, 620, 623, 624, 627, 628, 631, 632, 635, 636, 639, 640, 643, 644, 647, 668, 671, 672, 675, 676, 679, 695, 698, 754, 755, 758, 762, 763, 772, 775, 779, 781, 791, 793, 798, 800, 801, 802, 803, 816, 826, 827, 828, 858, 876, 877, 879, 902, 904, 925, 940, 942, 962, 1001, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1032, 1036, 1037, 1038, 1049, 1050, 1061, 1062, 1063, 1071, 1072, 1075, 1077, 1080, 1082, 1087, 1090, 1091, 1094, 1095, 1098, 1099, 1102, 1103, 1106, 1107, 1111, 1114, 1115, 1116, 1119, 1120, 1123], "ceil": [2, 128, 129, 184, 318, 319, 410, 411, 516, 1124], "choleski": [2, 138, 139, 181, 182, 876], "upper": [2, 27, 138, 139, 179, 180, 410, 415, 426, 876, 877, 878, 879, 918, 920, 1049, 1055, 1057], "clip": [2, 142, 143, 179, 180, 184, 285, 332, 333, 361, 365, 368, 371, 374, 376, 516, 684, 685, 754, 766, 767, 769, 962, 967, 1124], "x_min": [2, 28, 142, 143, 179, 180, 184, 212, 285, 332, 333, 371, 376, 962, 963, 964, 965, 966, 967], "x_max": [2, 28, 142, 143, 179, 180, 184, 212, 285, 332, 333, 371, 376, 962, 963, 964, 965, 966, 967], "roll": [2, 28, 142, 143, 184, 296, 332, 333, 365, 369, 962, 963, 964, 1000], "8": [2, 28, 142, 143, 181, 182, 184, 280, 294, 318, 319, 336, 337, 351, 354, 358, 365, 370, 374, 399, 403, 466, 488, 516, 530, 534, 555, 558, 579, 582, 587, 599, 623, 624, 627, 664, 684, 685, 711, 714, 727, 730, 731, 734, 745, 754, 763, 782, 828, 830, 833, 863, 870, 876, 880, 882, 883, 886, 888, 912, 914, 931, 933, 946, 947, 950, 962, 963, 964, 966, 980, 983, 988, 991, 1001, 1049, 1050, 1051, 1052, 1053, 1061, 1065, 1066, 1067, 1082, 1083, 1086, 1110, 1124, 1145, 1156], "concat": [2, 142, 143, 179, 180, 184, 332, 333, 466, 495, 496, 497, 498, 510, 754, 781, 962, 1124], "xs": [2, 29, 142, 143, 184, 214, 332, 333, 365, 466, 489, 493, 495, 496, 497, 754, 755, 758, 763, 828, 839, 962, 968, 969, 970, 971], "constant_pad": [2, 142, 143, 184, 332, 333, 962], "pad_width": [2, 30, 116, 142, 143, 184, 215, 311, 332, 333, 962, 972, 973, 974, 975, 1018, 1019, 1020, 1021], "valu": [2, 30, 142, 143, 179, 180, 181, 182, 183, 184, 215, 311, 332, 333, 352, 358, 360, 361, 365, 366, 367, 368, 369, 371, 373, 376, 388, 410, 411, 415, 417, 418, 419, 420, 429, 435, 444, 445, 446, 466, 478, 509, 510, 516, 517, 520, 522, 530, 535, 538, 543, 579, 582, 594, 596, 599, 600, 603, 612, 615, 616, 619, 620, 623, 624, 627, 640, 643, 644, 647, 684, 685, 686, 689, 695, 698, 699, 702, 703, 706, 711, 714, 745, 750, 753, 754, 766, 767, 769, 770, 775, 781, 782, 783, 786, 792, 795, 799, 809, 810, 811, 812, 813, 814, 827, 828, 830, 833, 835, 837, 839, 845, 847, 858, 862, 863, 864, 865, 866, 867, 868, 869, 870, 873, 874, 875, 876, 885, 897, 906, 908, 915, 917, 918, 920, 921, 922, 924, 925, 927, 928, 930, 940, 942, 962, 963, 966, 972, 973, 974, 975, 988, 991, 992, 995, 1018, 1020, 1021, 1022, 1023, 1024, 1026, 1030, 1031, 1032, 1033, 1034, 1039, 1042, 1043, 1044, 1045, 1048, 1049, 1050, 1051, 1052, 1054, 1055, 1057, 1059, 1061, 1062, 1063, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1075, 1077, 1080, 1082, 1087, 1090, 1091, 1094, 1095, 1098, 1099, 1102, 1103, 1106, 1107, 1111, 1114, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1165], "co": [2, 128, 129, 175, 184, 318, 319, 371, 387, 516, 525, 526, 590, 754, 781, 1124], "cosh": [2, 128, 129, 184, 318, 319, 516, 525, 526, 1124], "cross": [2, 138, 139, 181, 182, 876, 946, 947, 950, 952, 955, 957, 960, 1124], "cross_entropi": [2, 140, 141, 184, 330, 331, 361, 365, 368, 946, 957, 960], "det": [2, 138, 139, 181, 182, 876, 921], "diagon": [2, 138, 139, 181, 182, 410, 415, 425, 426, 876, 934, 936], "offset": [2, 36, 56, 110, 138, 139, 144, 145, 184, 238, 334, 335, 876, 886, 887, 888, 934, 935, 936, 1044, 1045, 1046, 1047, 1048], "axis1": [2, 36, 105, 138, 139, 142, 143, 184, 305, 332, 333, 876, 886, 887, 888, 962, 1010, 1011, 1012, 1013], "axis2": [2, 36, 138, 139, 876, 886, 887, 888], "divid": [2, 128, 129, 179, 180, 184, 318, 319, 358, 364, 516, 615, 616, 619, 754, 818, 962, 1001], "eigh": [2, 138, 139, 181, 182, 876], "namedtupl": [2, 38, 84, 138, 139, 876, 889, 890, 891, 918, 919, 920, 925, 1066, 1067, 1068], "eigvalsh": [2, 138, 139, 181, 182, 876], "einsum": [2, 154, 155, 184, 344, 345, 1082, 1110], "equat": [2, 40, 154, 155, 184, 220, 344, 345, 876, 922, 924, 1082, 1083, 1084, 1085, 1086, 1110], "equal": [2, 128, 129, 179, 180, 184, 318, 319, 358, 365, 366, 410, 415, 417, 418, 429, 435, 516, 563, 566, 571, 574, 624, 628, 631, 632, 635, 703, 706, 711, 714, 754, 755, 758, 762, 763, 876, 886, 888, 897, 906, 908, 915, 917, 962, 963, 966, 972, 975, 1001, 1018, 1021, 1049, 1055, 1057, 1066, 1067, 1068, 1070, 1071, 1072, 1075, 1077, 1080, 1082, 1091, 1094, 1103, 1106, 1107, 1111, 1114], "erf": [2, 128, 129, 184, 318, 319, 516], "exp": [2, 128, 129, 184, 318, 319, 516, 533, 608, 611, 664, 667, 1124], "expand_dim": [2, 142, 143, 184, 332, 333, 371, 374, 962, 1124], "expm1": [2, 128, 129, 184, 318, 319, 516], "flip": [2, 142, 143, 184, 332, 333, 373, 374, 376, 516, 559, 562, 962, 988, 991, 1124], "floor": [2, 128, 129, 184, 318, 319, 516, 571, 574, 616, 754, 780, 1124], "floor_divid": [2, 128, 129, 184, 318, 319, 516, 594, 615], "gather_nd": [2, 130, 131, 179, 180, 184, 288, 320, 321, 754, 787, 1124], "indic": [2, 49, 130, 131, 179, 180, 184, 229, 288, 320, 321, 354, 372, 376, 399, 404, 516, 715, 718, 754, 782, 783, 784, 785, 786, 787, 794, 807, 810, 811, 863, 864, 865, 866, 867, 868, 869, 870, 876, 940, 942, 962, 996, 999, 1026, 1027, 1029, 1031, 1033, 1034, 1035, 1037, 1040, 1041, 1042, 1043, 1044, 1045, 1048, 1049, 1050, 1061, 1062, 1063, 1064, 1066, 1067, 1069, 1071, 1072, 1075, 1077, 1080, 1124, 1127, 1129, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1157, 1158], "union": [2, 49, 103, 117, 120, 121, 130, 131, 138, 139, 179, 180, 356, 358, 361, 364, 365, 366, 367, 368, 369, 371, 376, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 410, 411, 412, 413, 414, 415, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 433, 434, 435, 436, 437, 443, 444, 445, 446, 447, 448, 449, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 465, 466, 482, 483, 484, 485, 486, 488, 491, 492, 493, 494, 499, 505, 507, 509, 510, 511, 512, 515, 516, 517, 520, 522, 525, 526, 529, 530, 533, 535, 538, 539, 542, 543, 546, 547, 550, 551, 554, 555, 558, 559, 562, 563, 566, 567, 570, 571, 574, 575, 578, 579, 582, 583, 586, 587, 590, 591, 594, 596, 599, 600, 603, 604, 607, 608, 611, 612, 615, 616, 619, 620, 623, 624, 627, 628, 631, 632, 635, 636, 639, 640, 643, 644, 647, 648, 651, 652, 655, 656, 659, 660, 663, 664, 667, 672, 675, 676, 679, 680, 683, 684, 685, 686, 689, 691, 694, 695, 698, 699, 702, 703, 706, 707, 710, 711, 714, 715, 718, 719, 722, 723, 726, 727, 730, 731, 734, 735, 739, 740, 744, 745, 749, 750, 753, 754, 755, 758, 762, 763, 766, 767, 769, 772, 773, 776, 777, 778, 780, 781, 782, 783, 784, 786, 791, 793, 794, 796, 797, 798, 807, 810, 811, 816, 817, 822, 823, 824, 826, 827, 828, 830, 833, 835, 837, 840, 842, 845, 847, 849, 851, 853, 855, 858, 860, 863, 864, 865, 866, 867, 868, 869, 870, 872, 873, 875, 876, 877, 879, 880, 882, 883, 885, 886, 888, 889, 891, 892, 894, 895, 897, 898, 901, 902, 904, 906, 908, 909, 911, 912, 914, 915, 917, 918, 920, 921, 922, 924, 925, 926, 927, 928, 930, 931, 933, 934, 936, 937, 939, 940, 942, 943, 945, 946, 947, 950, 952, 955, 957, 960, 962, 963, 966, 968, 971, 972, 975, 976, 979, 980, 983, 984, 987, 988, 991, 992, 995, 996, 999, 1001, 1002, 1005, 1006, 1009, 1010, 1013, 1014, 1017, 1018, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1037, 1038, 1044, 1045, 1048, 1049, 1050, 1051, 1052, 1054, 1055, 1057, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1075, 1077, 1080, 1082, 1083, 1086, 1087, 1090, 1091, 1094, 1095, 1098, 1103, 1106, 1107, 1110, 1111, 1114, 1115, 1116, 1119, 1120, 1123], "greater": [2, 128, 129, 179, 180, 184, 318, 319, 516, 522, 535, 538, 547, 550, 563, 566, 571, 574, 594, 599, 612, 615, 616, 619, 624, 703, 706, 707, 710, 715, 718, 750, 753, 876, 880, 882, 962, 1002, 1005, 1049, 1055, 1057], "greater_equ": [2, 128, 129, 184, 318, 319, 516, 599, 623], "inv": [2, 138, 139, 181, 182, 373, 876, 915, 1124], "isfinit": [2, 128, 129, 184, 318, 319, 516], "isinf": [2, 128, 129, 184, 318, 319, 516], "isnan": [2, 128, 129, 184, 318, 319, 516], "layer_norm": [2, 144, 145, 184, 334, 335, 1044], "normalized_idx": [2, 56, 144, 145, 184, 238, 334, 335, 1044, 1045, 1046, 1047, 1048], "05": [2, 56, 144, 145, 184, 238, 334, 335, 466, 828, 830, 833, 1044, 1045, 1046, 1047, 1048], "scale": [2, 56, 144, 145, 184, 238, 334, 335, 365, 466, 508, 509, 828, 849, 851, 863, 871, 874, 875, 1044, 1045, 1046, 1047, 1048, 1145, 1153, 1156, 1161, 1164], "new_std": [2, 56, 144, 145, 184, 238, 334, 335, 1044, 1045, 1046, 1047, 1048, 1159, 1160], "less": [2, 128, 129, 175, 179, 180, 184, 318, 319, 352, 358, 365, 369, 370, 371, 516, 522, 525, 526, 529, 535, 538, 547, 550, 579, 582, 586, 590, 648, 651, 652, 655, 660, 663, 703, 706, 707, 710, 715, 718, 727, 730, 876, 897, 906, 908, 915, 917, 940, 942, 1049, 1055, 1057, 1082, 1111, 1114], "less_equ": [2, 128, 129, 184, 318, 319, 516], "log": [2, 128, 129, 184, 318, 319, 351, 352, 361, 365, 368, 371, 374, 410, 420, 516, 533, 607, 656, 659, 664, 667, 876, 885, 921, 1124], "log10": [2, 128, 129, 184, 318, 319, 516], "log1p": [2, 128, 129, 184, 318, 319, 516], "log2": [2, 128, 129, 184, 318, 319, 516], "logaddexp": [2, 128, 129, 184, 318, 319, 516, 533, 607], "logical_and": [2, 128, 129, 184, 318, 319, 516, 1124], "logical_not": [2, 128, 129, 184, 318, 319, 516, 1124], "logical_or": [2, 128, 129, 184, 318, 319, 516, 1124], "logical_xor": [2, 128, 129, 184, 318, 319, 516], "matmul": [2, 138, 139, 184, 328, 329, 356, 362, 371, 876, 925, 1124], "matrix_norm": [2, 138, 139, 179, 180, 876], "ord": [2, 69, 114, 138, 139, 179, 180, 876, 902, 903, 904, 940, 941, 942], "fro": [2, 69, 138, 139, 876, 902, 903, 904], "matrix_rank": [2, 138, 139, 181, 182, 876], "rtol": [2, 70, 80, 138, 139, 876, 897, 906, 907, 908, 915, 916, 917], "matrix_transpos": [2, 138, 139, 181, 182, 373, 876], "max": [2, 154, 155, 179, 180, 184, 344, 345, 429, 449, 452, 516, 684, 754, 766, 767, 769, 777, 810, 811, 876, 897, 906, 908, 915, 917, 1082, 1161, 1163], "mean": [2, 154, 155, 179, 180, 184, 191, 344, 345, 348, 349, 351, 352, 355, 358, 361, 365, 366, 367, 368, 371, 373, 374, 375, 376, 387, 388, 466, 495, 496, 497, 498, 510, 754, 777, 1022, 1023, 1024, 1025, 1026, 1032, 1049, 1054, 1066, 1067, 1082, 1124, 1136], "min": [2, 154, 155, 179, 180, 184, 344, 345, 429, 449, 452, 516, 685, 754, 777, 810, 811, 818, 876, 918, 920, 925, 927, 928, 930, 940, 942, 1082], "multipli": [2, 128, 129, 184, 318, 319, 358, 362, 364, 516, 754, 772], "neg": [2, 128, 129, 184, 318, 319, 361, 365, 368, 399, 401, 410, 411, 415, 516, 628, 631, 632, 635, 686, 689, 703, 706, 707, 710, 876, 925, 937, 939, 940, 942, 962, 980, 983, 996, 999, 1115, 1116, 1119, 1120, 1123], "not_equ": [2, 128, 129, 184, 318, 319, 516], "outer": [2, 138, 139, 181, 182, 876, 1022, 1023, 1024, 1025], "permute_dim": [2, 142, 143, 184, 332, 333, 962], "ax": [2, 79, 108, 138, 139, 142, 143, 179, 180, 184, 258, 332, 333, 356, 358, 366, 373, 466, 510, 754, 772, 876, 902, 904, 922, 924, 931, 932, 933, 940, 942, 962, 972, 975, 980, 983, 984, 985, 986, 987, 996, 999, 1002, 1005, 1010, 1013, 1018, 1021, 1061, 1062, 1063, 1082, 1087, 1090, 1091, 1094, 1095, 1098, 1099, 1102, 1103, 1106, 1107, 1111, 1114, 1115, 1116, 1119, 1120, 1123], "pinv": [2, 138, 139, 181, 182, 876, 897, 1124], "posit": [2, 117, 118, 119, 128, 129, 184, 318, 319, 369, 374, 387, 409, 410, 415, 429, 449, 466, 490, 494, 498, 516, 517, 520, 628, 631, 632, 635, 686, 689, 707, 710, 754, 781, 876, 877, 879, 962, 976, 979, 996, 999, 1049, 1059, 1061, 1064, 1115, 1116, 1119, 1120, 1123, 1134, 1135], "pow": [2, 128, 129, 184, 318, 319, 516], "prod": [2, 154, 155, 179, 180, 184, 344, 345, 358, 366, 754, 777, 1082], "qr": [2, 138, 139, 181, 182, 876], "mode": [2, 84, 138, 139, 179, 180, 351, 358, 365, 388, 407, 408, 466, 495, 496, 497, 498, 510, 516, 530, 686, 689, 876, 918, 919, 920], "reduc": [2, 84, 138, 139, 179, 180, 373, 466, 510, 754, 777, 876, 918, 919, 920, 1061, 1062, 1063, 1082, 1087, 1090, 1091, 1094, 1095, 1098, 1099, 1102, 1103, 1106, 1107, 1111, 1114, 1115, 1116, 1119, 1120, 1123], "remaind": [2, 128, 129, 179, 180, 184, 318, 319, 516, 754, 780, 962, 1001], "repeat": [2, 142, 143, 179, 180, 184, 332, 333, 352, 357, 358, 362, 364, 365, 754, 778, 962, 1014, 1017], "reshap": [2, 142, 143, 179, 180, 184, 332, 333, 368, 371, 373, 376, 962, 1124], "shape": [2, 87, 142, 143, 179, 180, 184, 188, 265, 278, 294, 295, 322, 323, 332, 333, 336, 337, 352, 356, 357, 358, 366, 367, 368, 369, 371, 373, 374, 375, 376, 399, 400, 401, 402, 403, 404, 405, 406, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 423, 424, 425, 426, 427, 428, 429, 435, 436, 437, 466, 478, 506, 511, 516, 517, 520, 522, 525, 526, 529, 530, 533, 535, 538, 539, 542, 543, 546, 547, 550, 551, 554, 555, 558, 559, 562, 563, 566, 567, 570, 571, 574, 575, 578, 579, 582, 583, 586, 587, 590, 591, 594, 596, 599, 600, 603, 604, 607, 608, 611, 612, 615, 616, 619, 620, 623, 624, 627, 628, 631, 632, 635, 636, 639, 640, 643, 644, 647, 648, 651, 652, 655, 656, 659, 660, 663, 664, 667, 668, 671, 672, 675, 676, 679, 680, 683, 684, 685, 686, 689, 691, 694, 695, 698, 699, 702, 703, 706, 707, 710, 711, 714, 715, 718, 719, 722, 723, 726, 727, 730, 731, 734, 735, 739, 740, 744, 745, 749, 750, 753, 754, 766, 767, 769, 772, 776, 777, 778, 780, 783, 786, 791, 794, 807, 810, 811, 817, 828, 830, 832, 834, 858, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 874, 875, 876, 877, 879, 880, 882, 883, 885, 886, 888, 889, 891, 892, 894, 895, 897, 898, 901, 902, 904, 906, 908, 909, 911, 912, 914, 915, 917, 918, 920, 921, 922, 924, 925, 927, 928, 930, 931, 933, 934, 936, 937, 939, 940, 942, 943, 945, 946, 947, 950, 952, 955, 957, 960, 962, 963, 966, 968, 971, 972, 975, 976, 979, 980, 983, 984, 987, 988, 991, 992, 993, 994, 995, 996, 999, 1001, 1002, 1005, 1006, 1009, 1010, 1013, 1014, 1017, 1018, 1021, 1044, 1045, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1057, 1058, 1060, 1061, 1062, 1064, 1065, 1071, 1072, 1075, 1077, 1080, 1082, 1083, 1086, 1110, 1115, 1116, 1119, 1120, 1123, 1124, 1145, 1147, 1148, 1149, 1150, 1151, 1152, 1159, 1160], "shift": [2, 88, 142, 143, 184, 266, 296, 332, 333, 358, 369, 516, 563, 566, 571, 574, 962, 996, 997, 998, 999, 1000], "round": [2, 128, 129, 174, 175, 176, 184, 318, 319, 351, 352, 353, 354, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 371, 373, 374, 375, 376, 387, 516, 530, 579, 582, 594, 612, 615, 616, 619, 686, 689, 727, 730, 750, 753, 1124], "sign": [2, 128, 129, 175, 184, 318, 319, 351, 372, 376, 410, 411, 516, 517, 520, 530, 547, 550, 571, 574, 686, 689, 707, 710, 876, 885, 921, 1066, 1067, 1068, 1070, 1082, 1099, 1102, 1107], "sin": [2, 128, 129, 184, 318, 319, 364, 371, 516, 754, 781, 1124], "sinh": [2, 128, 129, 184, 318, 319, 516, 1124], "solv": [2, 138, 139, 181, 182, 372, 387, 876], "sort": [2, 153, 179, 180, 181, 182, 183, 184, 343, 356, 876, 889, 891, 925, 927, 928, 930, 1072, 1075], "sparse_cross_entropi": [2, 140, 141, 184, 330, 331, 946], "sqrt": [2, 128, 129, 184, 318, 319, 516, 876, 940, 942], "squar": [2, 128, 129, 184, 318, 319, 516, 727, 730, 863, 866, 876, 877, 879, 883, 885, 889, 891, 892, 894, 895, 905, 921, 922, 924, 925], "squeez": [2, 142, 143, 184, 332, 333, 962, 1124], "stack": [2, 142, 143, 179, 180, 184, 332, 333, 371, 410, 425, 426, 876, 883, 886, 888, 889, 891, 892, 894, 895, 897, 898, 901, 905, 906, 908, 909, 911, 915, 917, 918, 920, 925, 927, 928, 930, 934, 936, 962, 1026, 1027, 1036, 1037, 1124, 1145, 1154], "std": [2, 154, 155, 184, 344, 345, 358, 1049, 1054, 1066, 1067, 1082], "correct": [2, 100, 112, 154, 155, 184, 302, 310, 344, 345, 352, 353, 355, 361, 365, 366, 367, 369, 429, 461, 962, 963, 966, 1082, 1103, 1104, 1105, 1106, 1111, 1112, 1113, 1114, 1124], "subtract": [2, 128, 129, 184, 318, 319, 358, 364, 516], "sum": [2, 154, 155, 179, 180, 184, 344, 345, 361, 365, 366, 368, 371, 466, 495, 496, 497, 498, 510, 516, 530, 533, 607, 664, 667, 754, 773, 777, 810, 811, 863, 875, 876, 925, 934, 936, 940, 942, 1082, 1083, 1086, 1103, 1106], "svd": [2, 138, 139, 181, 182, 876, 928, 1124], "full_matric": [2, 103, 138, 139, 876, 925, 926, 928], "tupl": [2, 103, 117, 118, 119, 120, 121, 138, 139, 179, 180, 356, 365, 366, 367, 369, 373, 374, 375, 388, 410, 412, 413, 417, 422, 423, 427, 429, 437, 451, 466, 485, 754, 781, 817, 863, 866, 869, 870, 873, 876, 897, 906, 908, 915, 917, 925, 926, 928, 931, 933, 940, 942, 962, 968, 971, 972, 975, 980, 983, 984, 987, 992, 995, 996, 999, 1002, 1005, 1006, 1009, 1018, 1021, 1022, 1023, 1024, 1025, 1026, 1028, 1029, 1031, 1033, 1034, 1035, 1037, 1038, 1040, 1041, 1042, 1043, 1049, 1054, 1055, 1057, 1061, 1064, 1066, 1067, 1068, 1069, 1082, 1087, 1090, 1091, 1094, 1095, 1098, 1099, 1102, 1103, 1106, 1107, 1111, 1114, 1115, 1116, 1119, 1120, 1123], "svdval": [2, 138, 139, 181, 182, 876, 927], "swapax": [2, 142, 143, 184, 332, 333, 962], "axis0": [2, 105, 142, 143, 184, 305, 332, 333, 962, 1010, 1011, 1012, 1013], "tan": [2, 128, 129, 184, 300, 318, 319, 357, 361, 365, 368, 369, 371, 516, 535, 538, 546, 551, 741, 749, 1066, 1067, 1068, 1071, 1072, 1075, 1124], "56": [2, 106, 128, 129, 184, 300, 306, 318, 319, 358, 516, 546, 551, 727, 730, 740, 741, 742, 743, 749, 828, 830, 833, 876, 912, 914, 1082, 1083, 1086, 1110], "19": [2, 106, 128, 129, 184, 300, 306, 318, 319, 358, 516, 546, 551, 575, 578, 740, 741, 742, 743, 749, 876, 886, 888], "tanh": [2, 128, 129, 184, 301, 318, 319, 371, 399, 516, 546, 551, 746, 1124], "762": [2, 107, 128, 129, 184, 307, 318, 319, 399, 406, 516, 546, 551, 745, 747, 748], "964": [2, 107, 128, 129, 184, 307, 318, 319, 399, 406, 516, 546, 551, 745, 747, 748], "tensordot": [2, 138, 139, 181, 182, 876], "tile": [2, 142, 143, 184, 332, 333, 962, 1124], "rep": [2, 109, 142, 143, 184, 308, 332, 333, 962, 1014, 1015, 1016, 1017], "trace": [2, 138, 139, 179, 180, 181, 182, 371, 388, 754, 800, 801, 803, 876], "trunc": [2, 128, 129, 184, 318, 319, 516], "var": [2, 154, 155, 184, 191, 344, 345, 348, 349, 358, 371, 1022, 1023, 1024, 1082], "vecdot": [2, 138, 139, 181, 182, 876], "vector_norm": [2, 138, 139, 179, 180, 876], "vector_to_skew_symmetric_matrix": [2, 138, 139, 181, 182, 876, 1124], "zero_pad": [2, 142, 143, 184, 332, 333, 962, 1124], "method": [3, 6, 7, 8, 10, 25, 26, 28, 47, 49, 88, 106, 107, 124, 125, 128, 129, 130, 131, 132, 133, 142, 143, 158, 159, 179, 180, 181, 182, 183, 185, 188, 190, 191, 193, 210, 211, 212, 227, 229, 266, 277, 278, 280, 281, 284, 285, 288, 294, 296, 300, 301, 306, 307, 314, 315, 318, 319, 320, 321, 322, 323, 332, 333, 336, 337, 348, 349, 353, 356, 357, 358, 360, 361, 364, 369, 371, 372, 375, 376, 388, 399, 401, 402, 403, 404, 405, 406, 410, 416, 438, 439, 440, 442, 516, 517, 518, 519, 521, 531, 532, 534, 535, 538, 546, 551, 555, 558, 575, 578, 579, 580, 581, 582, 587, 599, 612, 613, 614, 616, 623, 624, 627, 664, 684, 685, 691, 694, 695, 698, 711, 714, 727, 730, 731, 734, 741, 742, 743, 745, 746, 747, 748, 749, 754, 755, 756, 757, 759, 770, 771, 782, 783, 784, 785, 787, 810, 811, 822, 824, 828, 830, 831, 832, 834, 845, 847, 849, 851, 863, 869, 875, 876, 877, 879, 880, 882, 883, 946, 947, 950, 962, 963, 964, 965, 967, 976, 979, 980, 983, 988, 991, 996, 997, 998, 1000, 1001, 1010, 1013, 1026, 1027, 1037, 1038, 1039, 1044, 1045, 1048, 1049, 1051, 1053, 1054, 1055, 1057, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1071, 1072, 1075, 1082, 1083, 1086, 1087, 1090, 1110, 1115, 1116, 1119, 1124, 1145, 1156, 1157, 1158], "collect": [117, 179, 180, 360, 387, 399, 407, 466, 754, 828, 863, 946, 1026, 1039, 1044, 1049, 1131, 1145, 1159, 1161], "accept": [117, 351, 352, 357, 358, 360, 361, 364, 365, 367, 368, 369, 373, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 423, 424, 425, 426, 427, 428, 429, 438, 441, 516, 517, 520, 530, 535, 538, 555, 558, 575, 578, 579, 582, 587, 612, 672, 675, 676, 679, 695, 698, 707, 710, 711, 714, 727, 730, 731, 734, 740, 745, 754, 782, 863, 866, 875, 876, 883, 962, 976, 979, 980, 983, 996, 999, 1044, 1045, 1048, 1066, 1067, 1068, 1071, 1072, 1075, 1082, 1087, 1090, 1091, 1094, 1115, 1116, 1119, 1124], "args_to_ivi": 117, "arg": [117, 118, 119, 160, 164, 179, 180, 354, 371, 373, 375, 466, 475, 490, 494, 498, 510, 754, 811, 1134, 1135, 1157, 1158], "include_deriv": [117, 118, 119, 120, 121, 1026, 1028, 1038], "kwarg": [117, 118, 119, 160, 164, 177, 178, 179, 180, 181, 182, 183, 184, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 371, 373, 375, 466, 475, 490, 494, 498, 754, 804, 1134, 1135, 1157, 1158], "keyword": [117, 118, 119, 179, 180, 181, 182, 183, 356, 366, 367, 368, 369, 374, 410, 421, 466, 475, 476, 490, 494, 498, 754, 761, 804, 1026, 1032, 1082, 1107, 1157, 1158], "variabl": [117, 118, 119, 120, 121, 179, 180, 181, 182, 357, 362, 365, 366, 368, 369, 374, 375, 376, 388, 754, 764, 796, 797, 798, 799, 800, 801, 803, 820, 828, 835, 837, 839, 840, 842, 844, 845, 847, 849, 851, 853, 855, 858, 861, 863, 874, 876, 922, 924, 1022, 1023, 1024, 1025, 1044, 1045, 1048, 1124, 1134, 1135, 1136, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168], "form": [117, 118, 119, 120, 121, 175, 179, 180, 350, 361, 375, 376, 410, 412, 422, 425, 426, 754, 760, 828, 835, 837, 840, 842, 845, 847, 849, 851, 853, 855, 863, 876, 877, 879, 883, 886, 888, 889, 891, 892, 894, 895, 897, 906, 908, 909, 911, 915, 917, 918, 920, 922, 924, 925, 927, 928, 930, 934, 936, 1026, 1028, 1038], "nest": [117, 118, 119, 120, 121, 179, 180, 181, 182, 183, 356, 361, 364, 365, 373, 374, 375, 388, 466, 490, 494, 498, 754, 822, 1022, 1023, 1024, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1157, 1158, 1161, 1162, 1163, 1164, 1165, 1166], "otherwis": [117, 118, 119, 120, 121, 160, 172, 179, 180, 364, 366, 367, 369, 371, 373, 410, 411, 429, 435, 438, 441, 444, 445, 446, 466, 485, 516, 628, 631, 632, 635, 636, 639, 754, 764, 825, 828, 844, 858, 876, 877, 879, 883, 937, 939, 940, 942, 1022, 1023, 1024, 1026, 1039, 1061, 1062, 1063, 1065, 1082, 1087, 1090, 1091, 1094, 1095, 1098, 1099, 1102, 1103, 1106, 1107, 1111, 1114, 1115, 1116, 1119, 1120, 1123], "argument": [117, 118, 119, 120, 121, 160, 164, 165, 174, 179, 180, 181, 182, 183, 353, 355, 356, 357, 358, 360, 361, 362, 364, 365, 371, 373, 374, 407, 408, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 423, 424, 425, 426, 427, 428, 429, 438, 441, 457, 466, 475, 476, 490, 494, 498, 516, 517, 520, 530, 535, 538, 579, 582, 612, 695, 698, 727, 730, 731, 734, 740, 754, 760, 761, 765, 775, 782, 804, 811, 863, 866, 875, 962, 996, 999, 1026, 1032, 1044, 1045, 1048, 1082, 1087, 1090, 1107, 1115, 1116, 1119, 1127, 1129, 1134, 1135, 1157, 1158], "ar": [117, 118, 119, 174, 175, 176, 179, 180, 181, 182, 183, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 387, 388, 389, 397, 410, 411, 466, 475, 476, 500, 504, 506, 510, 516, 583, 672, 675, 676, 679, 711, 714, 719, 722, 740, 754, 755, 758, 762, 763, 764, 788, 794, 795, 799, 806, 808, 820, 863, 872, 876, 880, 882, 897, 898, 901, 902, 904, 906, 908, 915, 917, 925, 927, 928, 930, 937, 939, 962, 963, 966, 980, 983, 996, 999, 1026, 1028, 1032, 1038, 1049, 1054, 1055, 1057, 1061, 1062, 1063, 1064, 1066, 1067, 1124, 1167, 1168], "unchang": [117, 118, 119, 120, 121], "The": [117, 118, 119, 120, 121, 160, 164, 165, 173, 174, 176, 179, 180, 181, 182, 183, 350, 351, 353, 354, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 374, 375, 376, 387, 399, 400, 401, 404, 406, 407, 408, 410, 411, 416, 420, 425, 426, 429, 433, 434, 435, 443, 448, 450, 451, 453, 456, 461, 465, 466, 475, 476, 482, 483, 484, 485, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 504, 505, 506, 507, 508, 509, 510, 512, 515, 516, 517, 520, 522, 525, 526, 529, 530, 533, 535, 538, 539, 542, 543, 546, 547, 550, 551, 554, 555, 558, 559, 562, 563, 566, 567, 570, 571, 574, 575, 578, 579, 582, 583, 586, 587, 590, 591, 594, 596, 599, 600, 603, 604, 607, 608, 611, 612, 615, 616, 619, 620, 623, 624, 627, 628, 631, 632, 635, 636, 639, 640, 643, 644, 647, 648, 651, 652, 655, 660, 663, 664, 667, 668, 671, 672, 675, 676, 679, 680, 683, 686, 689, 695, 698, 703, 706, 707, 710, 711, 714, 715, 718, 719, 722, 723, 726, 727, 730, 740, 744, 745, 749, 750, 753, 754, 760, 762, 765, 766, 774, 775, 781, 783, 786, 796, 797, 798, 800, 801, 802, 803, 805, 810, 811, 812, 813, 814, 817, 818, 819, 827, 828, 830, 833, 835, 837, 840, 842, 845, 847, 849, 851, 853, 855, 858, 861, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 874, 875, 876, 877, 879, 880, 882, 883, 885, 886, 888, 889, 891, 892, 894, 895, 897, 902, 904, 906, 908, 909, 911, 912, 914, 915, 917, 918, 920, 921, 922, 924, 925, 927, 928, 930, 931, 933, 934, 936, 937, 939, 940, 942, 946, 947, 950, 952, 955, 957, 960, 962, 968, 971, 972, 975, 976, 979, 980, 983, 984, 987, 988, 991, 992, 995, 1001, 1014, 1017, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1048, 1049, 1050, 1054, 1061, 1062, 1063, 1064, 1066, 1067, 1068, 1070, 1071, 1072, 1075, 1077, 1080, 1082, 1083, 1086, 1087, 1090, 1091, 1094, 1095, 1098, 1099, 1102, 1103, 1106, 1107, 1110, 1111, 1114, 1115, 1116, 1119, 1120, 1123, 1124, 1134, 1135, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1163, 1164, 1165], "check": [117, 118, 119, 120, 121, 174, 175, 176, 179, 180, 351, 352, 365, 370, 371, 373, 374, 375, 376, 387, 429, 443, 450, 451, 453, 465, 466, 505, 515, 754, 764, 779, 793, 800, 801, 802, 803, 820, 827, 828, 844, 876, 889, 891, 1026, 1027, 1036, 1037, 1038, 1124], "dict": [117, 118, 119, 120, 121, 160, 172, 179, 180, 181, 182, 183, 365, 374, 375, 466, 475, 476, 485, 488, 491, 492, 493, 494, 754, 760, 776, 777, 778, 1026, 1028, 1029, 1032, 1035, 1038, 1039], "whether": [117, 118, 119, 120, 121, 179, 180, 181, 182, 183, 184, 191, 348, 349, 350, 351, 366, 368, 369, 399, 400, 407, 408, 429, 435, 447, 453, 454, 455, 465, 466, 485, 486, 497, 501, 502, 505, 506, 510, 513, 515, 516, 636, 639, 754, 755, 758, 762, 763, 772, 775, 779, 781, 791, 793, 795, 798, 799, 800, 801, 802, 803, 804, 816, 820, 826, 827, 828, 835, 837, 839, 840, 842, 844, 845, 847, 849, 851, 853, 855, 858, 863, 871, 876, 889, 891, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1032, 1036, 1037, 1038, 1039, 1049, 1050, 1115, 1116, 1119, 1120, 1123, 1134, 1135, 1145, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166], "recurs": [117, 118, 119, 120, 121, 179, 180, 351, 354, 361, 365, 375, 388, 1026, 1027, 1028, 1036, 1037, 1038], "deriv": [117, 118, 119, 120, 121, 366, 367, 373, 375, 410, 414, 418, 424, 428, 828, 830, 833, 835, 837, 840, 842, 845, 847, 849, 851, 853, 855, 1026, 1028, 1038, 1157, 1161, 1165, 1167], "str": [117, 118, 119, 160, 165, 179, 180, 366, 367, 407, 408, 410, 421, 429, 433, 443, 444, 445, 448, 449, 452, 453, 454, 455, 458, 459, 460, 465, 466, 482, 485, 486, 488, 491, 492, 493, 494, 510, 754, 760, 774, 776, 777, 778, 805, 810, 811, 863, 864, 866, 868, 869, 870, 876, 918, 920, 1022, 1023, 1024, 1025, 1026, 1032, 1082, 1083, 1086, 1110], "kei": [117, 118, 119, 179, 180, 181, 182, 183, 365, 374, 466, 478, 754, 760, 770, 863, 874, 875, 1022, 1023, 1024, 1026, 1029, 1035, 1039, 1134, 1135, 1145, 1156, 1161, 1165], "word": [117, 118, 119, 410, 411, 1049, 1055, 1057, 1134, 1135], "ret": [117, 118, 119, 120, 121, 160, 164, 165, 172, 179, 180, 356, 357, 371, 376, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 433, 434, 435, 436, 437, 438, 441, 443, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 465, 466, 475, 482, 483, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 509, 510, 511, 512, 513, 515, 516, 517, 520, 522, 525, 526, 529, 530, 533, 535, 538, 539, 542, 543, 546, 547, 550, 551, 554, 555, 558, 559, 562, 563, 566, 567, 570, 571, 574, 575, 578, 579, 582, 583, 586, 587, 590, 591, 594, 596, 599, 600, 603, 604, 607, 608, 611, 612, 615, 616, 619, 620, 623, 624, 627, 628, 631, 632, 635, 636, 639, 640, 643, 644, 647, 648, 651, 652, 655, 656, 659, 660, 663, 664, 667, 668, 671, 672, 675, 676, 679, 680, 683, 684, 685, 686, 689, 691, 694, 695, 698, 699, 702, 703, 706, 707, 710, 711, 714, 715, 718, 719, 722, 723, 726, 727, 730, 731, 734, 735, 739, 740, 744, 745, 749, 750, 753, 754, 755, 758, 760, 762, 763, 764, 765, 766, 767, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 786, 790, 791, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 807, 810, 811, 816, 818, 819, 820, 822, 823, 824, 826, 827, 828, 830, 833, 835, 837, 839, 840, 842, 844, 845, 847, 849, 851, 853, 855, 858, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 879, 880, 882, 883, 885, 886, 888, 889, 891, 892, 894, 895, 897, 898, 901, 902, 904, 906, 908, 909, 911, 912, 914, 915, 917, 918, 920, 921, 922, 924, 925, 927, 928, 930, 931, 933, 934, 936, 937, 939, 940, 942, 943, 945, 946, 947, 950, 952, 955, 957, 960, 962, 963, 966, 968, 971, 972, 975, 976, 979, 980, 983, 984, 987, 988, 991, 992, 995, 996, 999, 1001, 1002, 1005, 1006, 1009, 1010, 1013, 1014, 1017, 1018, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1032, 1036, 1037, 1038, 1044, 1045, 1048, 1049, 1050, 1051, 1052, 1054, 1055, 1057, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1075, 1077, 1080, 1082, 1083, 1086, 1087, 1090, 1091, 1094, 1095, 1098, 1099, 1102, 1103, 1106, 1107, 1110, 1111, 1114, 1115, 1116, 1119, 1120, 1123, 1127, 1129, 1134, 1135, 1161, 1165], "same": [117, 118, 119, 174, 176, 179, 180, 351, 352, 354, 356, 358, 360, 361, 364, 365, 367, 368, 369, 371, 373, 375, 376, 410, 411, 414, 418, 421, 424, 425, 426, 428, 429, 435, 436, 437, 466, 475, 476, 510, 516, 517, 520, 530, 559, 562, 579, 582, 612, 686, 689, 707, 710, 711, 714, 715, 718, 750, 753, 754, 780, 782, 783, 786, 807, 810, 811, 828, 844, 858, 863, 864, 865, 866, 867, 868, 869, 870, 875, 876, 877, 879, 880, 882, 883, 886, 888, 889, 891, 892, 894, 895, 897, 909, 911, 915, 917, 918, 920, 922, 924, 925, 934, 936, 937, 939, 962, 968, 971, 980, 983, 984, 987, 996, 999, 1002, 1005, 1006, 1009, 1022, 1023, 1024, 1026, 1039, 1066, 1067, 1068, 1070, 1071, 1072, 1075, 1077, 1080, 1082, 1083, 1086, 1087, 1090, 1091, 1094, 1095, 1098, 1099, 1102, 1107, 1110, 1111, 1114, 1124, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152], "convert": [117, 118, 119, 120, 121, 176, 179, 180, 364, 371, 388, 389, 397, 410, 412, 422, 429, 433, 434, 466, 482, 483, 484, 485, 505, 512, 515, 754, 817, 823, 824, 876, 943, 945, 1026, 1028, 1038, 1039, 1135], "args_to_n": [117, 368, 373], "nativ": [117, 119, 120, 121, 160, 166, 179, 180, 366, 368, 373, 374, 410, 422, 429, 433, 434, 443, 466, 482, 483, 484, 485, 486, 505, 512, 515, 754, 798, 800, 803, 1134, 1135], "backend": [117, 119, 121, 164, 165, 166, 172, 174, 179, 180, 352, 353, 355, 357, 359, 360, 361, 363, 364, 365, 366, 367, 368, 369, 372, 373, 376, 429, 450, 451, 453, 465, 466, 501, 503, 513, 754, 795, 798, 799, 805, 828, 835, 837, 840, 842, 845, 847, 849, 851, 853, 855, 861, 1124, 1130, 1134, 1135, 1161, 1162, 1163, 1164, 1165, 1166], "to_ivi": [117, 179, 180, 373, 1026, 1039], "If": [117, 120, 121, 160, 164, 165, 166, 174, 179, 180, 350, 351, 352, 353, 354, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 373, 374, 376, 388, 410, 411, 413, 414, 415, 417, 418, 421, 423, 424, 425, 426, 427, 428, 429, 435, 437, 457, 466, 485, 509, 516, 517, 520, 522, 525, 526, 529, 530, 533, 535, 538, 539, 542, 543, 547, 550, 579, 582, 583, 586, 587, 590, 604, 607, 608, 611, 612, 648, 651, 652, 655, 660, 663, 664, 667, 672, 675, 676, 679, 686, 689, 703, 706, 707, 710, 711, 714, 715, 718, 719, 722, 723, 726, 727, 730, 740, 745, 750, 753, 754, 798, 828, 835, 837, 840, 842, 845, 847, 849, 851, 853, 855, 876, 877, 879, 880, 882, 897, 902, 904, 906, 908, 915, 917, 918, 920, 922, 924, 925, 937, 939, 940, 942, 946, 947, 950, 952, 955, 957, 960, 962, 976, 979, 980, 983, 996, 999, 1001, 1002, 1005, 1006, 1009, 1022, 1023, 1024, 1026, 1038, 1039, 1049, 1054, 1055, 1057, 1061, 1062, 1063, 1064, 1066, 1067, 1068, 1070, 1071, 1072, 1075, 1077, 1080, 1082, 1087, 1090, 1091, 1094, 1095, 1098, 1099, 1102, 1103, 1106, 1107, 1111, 1114, 1115, 1116, 1119, 1120, 1123, 1124], "set": [117, 120, 121, 151, 160, 164, 165, 166, 172, 174, 179, 180, 341, 350, 352, 355, 356, 361, 363, 364, 365, 366, 367, 368, 371, 373, 374, 466, 485, 495, 496, 507, 508, 509, 510, 516, 547, 550, 754, 755, 758, 812, 813, 814, 815, 828, 835, 837, 840, 842, 844, 845, 847, 849, 851, 853, 855, 876, 880, 882, 897, 902, 904, 906, 908, 915, 917, 922, 924, 1026, 1027, 1036, 1037, 1038, 1042, 1043, 1049, 1059, 1061, 1062, 1067, 1068, 1069, 1070, 1071, 1072, 1075, 1077, 1080, 1082, 1103, 1106, 1111, 1114, 1145, 1154, 1161, 1162, 1163, 1164, 1165, 1166], "leaf": [117, 120, 121, 179, 180, 361, 365, 374, 1026, 1027, 1036, 1037], "within": [117, 120, 121, 352, 360, 375, 388, 410, 411, 1049, 1055, 1057], "mayb": [117, 120, 121, 351, 371, 373], "manner": [117, 120, 121, 174, 179, 180, 356, 357, 367, 374, 387, 388, 1026, 1038], "travers": [117, 120, 121, 179, 180, 365, 371, 373, 1026, 1038], "lowest": [117, 120, 121, 179, 180, 361, 388, 1026, 1038, 1049, 1051, 1052], "leav": [117, 120, 121, 179, 180, 181, 182, 184, 357, 358, 360, 361, 365, 366, 368, 369, 374, 375, 962, 1006, 1009, 1026, 1027, 1028, 1036, 1037, 1038], "search": [117, 120, 121, 149, 174, 179, 180, 339, 351, 356, 358, 360, 1062, 1063, 1064, 1065], "s": [117, 120, 121, 160, 164, 165, 166, 172, 175, 176, 179, 180, 350, 351, 352, 354, 355, 357, 358, 360, 362, 364, 365, 366, 367, 368, 369, 371, 373, 374, 375, 376, 387, 388, 409, 410, 421, 425, 426, 429, 450, 451, 466, 485, 509, 516, 707, 710, 754, 763, 828, 835, 837, 840, 842, 845, 847, 853, 855, 876, 925, 927, 928, 930, 1026, 1032, 1038, 1082, 1103, 1106, 1111, 1114, 1124, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1165, 1167, 1168], "case": [117, 120, 121, 175, 179, 180, 181, 182, 183, 351, 352, 353, 356, 357, 358, 361, 362, 364, 365, 366, 367, 368, 369, 371, 373, 375, 376, 388, 410, 421, 466, 505, 512, 515, 516, 517, 520, 522, 525, 526, 529, 530, 533, 535, 538, 539, 542, 543, 547, 550, 575, 578, 579, 582, 583, 586, 587, 590, 604, 607, 608, 611, 612, 648, 651, 652, 655, 660, 663, 664, 667, 686, 689, 703, 706, 707, 710, 711, 714, 715, 718, 719, 722, 723, 726, 727, 730, 740, 745, 750, 753, 754, 798, 810, 811, 876, 902, 904, 962, 992, 995, 1026, 1029, 1035, 1082, 1087, 1090, 1091, 1094, 1095, 1098, 1103, 1106, 1107, 1111, 1114, 1145, 1156, 1157, 1158, 1161, 1165], "to_n": [117, 179, 180], "convers": [118, 119, 120, 121, 176, 179, 180, 370, 372, 376, 387, 388, 1124, 1130], "arraywithcr": 122, "creation": [123, 179, 180, 181, 182, 183, 313, 356, 366, 367, 371, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428], "data_typ": [124, 125, 314, 315, 356, 366, 429, 433, 434, 435, 436, 437, 438, 441, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465], "arraywithdatatyp": 124, "arraywithdevic": [126, 373], "devic": [127, 175, 179, 180, 184, 262, 294, 295, 317, 336, 337, 352, 355, 356, 361, 363, 366, 373, 374, 388, 410, 411, 412, 413, 414, 415, 417, 418, 419, 420, 422, 423, 424, 425, 426, 427, 428, 468, 469, 470, 471, 472, 473, 475, 476, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 754, 782, 783, 786, 807, 810, 811, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1134, 1135, 1136, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1165, 1167, 1168], "arraywithelementwis": [128, 353, 364], "elementwis": [129, 179, 180, 319, 356, 361, 371, 376, 517, 520, 522, 525, 526, 529, 530, 533, 535, 538, 539, 542, 543, 546, 547, 550, 551, 554, 555, 558, 559, 562, 563, 566, 567, 570, 571, 574, 575, 578, 579, 582, 583, 586, 587, 590, 591, 594, 596, 599, 600, 603, 604, 607, 608, 611, 612, 615, 616, 619, 620, 623, 624, 627, 628, 631, 632, 635, 636, 639, 640, 643, 644, 647, 648, 651, 652, 655, 656, 659, 660, 663, 664, 667, 668, 671, 672, 675, 676, 679, 680, 683, 684, 685, 686, 689, 691, 694, 695, 698, 699, 702, 703, 706, 707, 710, 711, 714, 715, 718, 719, 722, 723, 726, 727, 730, 731, 734, 735, 739, 740, 744, 745, 749, 750, 753], "arraywithgener": [130, 373], "arraywithgradi": [132, 373], "gradient": [133, 179, 180, 323, 356, 365, 374, 375, 387, 388, 466, 510, 830, 833, 835, 837, 839, 840, 842, 844, 845, 847, 849, 851, 853, 855, 857, 858, 859, 860, 861, 862, 1022, 1023, 1024, 1025, 1124, 1161, 1162, 1163, 1164, 1165, 1166], "arraywithimag": [134, 373], "imag": [135, 325, 351, 354, 356, 371, 372, 374, 376, 387, 863, 864, 865, 866, 867, 869, 870, 1124], "arraywithlay": 136, "layer": [137, 174, 327, 356, 357, 371, 372, 375, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 1044, 1045, 1048, 1124, 1136, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1165, 1167, 1168], "linear_algebra": [138, 139, 328, 329, 356, 373, 876, 877, 879, 880, 882, 883, 885, 886, 888, 889, 891, 892, 894, 895, 897, 898, 901, 902, 904, 905, 906, 908, 909, 911, 912, 914, 915, 917, 918, 920, 921, 922, 924, 925, 927, 928, 930, 931, 933, 934, 936, 937, 939, 940, 942, 943, 945], "arraywithlinearalgebra": 138, "arraywithloss": 140, "loss": [141, 331, 356, 361, 374, 375, 376, 947, 950, 952, 955, 957, 960, 1124], "arraywithmanipul": 142, "manipul": [143, 174, 333, 356, 376, 387, 963, 966, 968, 971, 972, 975, 976, 979, 980, 983, 984, 987, 988, 991, 992, 995, 996, 999, 1001, 1002, 1005, 1006, 1009, 1010, 1013, 1014, 1017, 1018, 1021], "arraywithnorm": 144, "norm": [145, 179, 180, 335, 356, 754, 766, 767, 769, 876, 902, 904, 940, 942, 1045, 1048, 1124, 1160, 1161, 1163], "arraywithrandom": [146, 373], "random": [147, 179, 180, 337, 356, 367, 376, 387, 1050, 1051, 1052, 1054, 1055, 1057, 1059, 1060, 1124], "arraywithsearch": 148, "arraywithset": 150, "arraywithsort": 152, "arraywithstatist": 154, "statist": [155, 184, 191, 345, 348, 349, 356, 366, 1083, 1086, 1087, 1090, 1091, 1094, 1095, 1098, 1099, 1102, 1103, 1106, 1107, 1110, 1111, 1114], "arraywithutil": 156, "util": [157, 347, 356, 367, 466, 499, 1116, 1119, 1120, 1123], "backend_handl": [160, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 1124], "contextmanag": [160, 161], "object": [160, 179, 180, 181, 182, 183, 184, 373, 376, 410, 416, 429, 449, 466, 511, 828, 1026, 1029, 1031, 1033, 1034, 1035, 1040, 1041, 1042, 1043, 1049, 1060, 1136, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1154, 1155, 1157, 1158], "__init__": [160, 161, 164, 165, 179, 180, 181, 182, 183, 184, 356, 362, 366, 371, 373, 374, 375, 376, 429, 430, 431, 432, 466, 467, 474, 475, 476, 477, 478, 479, 480, 481, 828, 829, 1049, 1050, 1054, 1124, 1131, 1132, 1133, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168], "choose_random_backend": 160, "exclud": [160, 162, 358, 371, 410, 411, 1049, 1055, 1057], "clear_backend_stack": 160, "current_backend": [160, 181, 182, 356, 361], "current": [160, 164, 165, 172, 176, 179, 180, 181, 182, 183, 351, 352, 353, 354, 361, 367, 371, 376, 387, 388, 429, 450, 451, 453, 465, 466, 475, 499, 500, 504, 506, 754, 788, 795, 799, 806, 808, 1026, 1027, 1036, 1037, 1124], "prioriti": [160, 164, 179, 180, 352, 368], "global_backend": [160, 164], "which": [160, 164, 165, 174, 175, 176, 179, 180, 181, 182, 183, 351, 352, 353, 354, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 373, 374, 375, 376, 387, 388, 399, 404, 407, 408, 409, 410, 411, 412, 413, 414, 415, 417, 418, 419, 420, 422, 423, 424, 425, 426, 427, 428, 429, 438, 441, 443, 447, 449, 452, 453, 465, 466, 475, 476, 486, 491, 492, 493, 494, 495, 496, 497, 498, 500, 504, 506, 508, 509, 510, 516, 707, 710, 754, 760, 772, 773, 775, 782, 783, 786, 788, 794, 798, 806, 807, 808, 810, 811, 826, 828, 835, 837, 839, 840, 842, 845, 847, 849, 851, 853, 855, 858, 860, 861, 863, 874, 876, 880, 882, 886, 888, 902, 904, 922, 924, 925, 937, 939, 940, 942, 946, 952, 955, 957, 960, 962, 968, 971, 980, 983, 988, 991, 996, 999, 1001, 1006, 1009, 1026, 1031, 1032, 1033, 1034, 1039, 1040, 1041, 1042, 1043, 1049, 1050, 1051, 1052, 1055, 1057, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1070, 1071, 1072, 1075, 1077, 1080, 1082, 1087, 1090, 1091, 1094, 1095, 1098, 1099, 1102, 1103, 1106, 1107, 1111, 1114, 1115, 1116, 1119, 1120, 1123, 1124, 1127, 1129, 1134, 1135, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1165, 1167, 1168], "try": [160, 164, 173, 175, 176, 179, 180, 351, 352, 353, 354, 364, 365, 373, 388, 754, 825, 1124], "infer": [160, 164, 355, 362, 366, 367, 371, 376, 407, 408, 410, 411, 412, 414, 417, 418, 422, 424, 428, 516, 620, 754, 791, 816, 962, 992, 995], "when": [160, 164, 174, 175, 179, 180, 181, 182, 183, 351, 352, 353, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 371, 373, 374, 376, 388, 429, 435, 466, 516, 530, 608, 611, 703, 706, 754, 765, 798, 819, 946, 947, 950, 952, 955, 957, 960, 1026, 1037, 1061, 1062, 1063, 1065, 1082, 1087, 1090, 1095, 1098, 1103, 1106, 1111, 1114, 1124, 1157, 1158], "global": [160, 164, 165, 166, 172, 179, 180, 181, 182, 183, 361, 362, 366, 367, 371, 429, 444, 445, 446, 466, 475, 476, 508, 509, 510, 754, 789, 790, 809, 812, 813, 814, 818, 819, 1044, 1045, 1048, 1159, 1160], "numpi": [160, 164, 165, 166, 174, 175, 179, 180, 352, 353, 360, 362, 366, 367, 368, 369, 371, 373, 376, 754, 823, 1082, 1083, 1086, 1110, 1124], "np": [160, 164, 364, 366, 367, 368, 369, 373, 374, 376, 1124], "py": [160, 164, 165, 352, 356, 357, 361, 362, 366, 367, 369, 371, 373, 375, 376, 1049, 1050, 1054], "noqa": [160, 164, 165, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 421, 423, 424, 425, 426, 427, 428, 429, 438, 441, 516, 517, 520, 530, 555, 558, 575, 578, 579, 582, 587, 695, 698, 711, 714, 727, 730, 731, 734, 740, 745, 876, 883, 962, 976, 979, 980, 983, 996, 999, 1082, 1087, 1090], "set_backend": [160, 164, 165, 172, 361, 362, 363, 366, 429, 450, 451, 466, 507, 754, 816, 1124], "ha": [160, 164, 165, 174, 175, 176, 179, 180, 352, 357, 358, 361, 362, 363, 366, 367, 371, 373, 375, 376, 387, 388, 410, 421, 466, 485, 516, 517, 520, 686, 689, 703, 706, 876, 885, 898, 901, 921, 922, 924, 925, 934, 936, 962, 976, 979, 1002, 1005, 1066, 1067, 1068, 1070, 1082, 1091, 1094, 1099, 1102, 1103, 1106, 1107, 1111, 1114], "jax": [160, 164, 165, 166, 175, 176, 352, 353, 362, 366, 367, 368, 369, 371, 373, 376, 388, 828, 844, 1066, 1067, 1068, 1070, 1124], "get_backend": [160, 361, 362], "specifi": [160, 165, 179, 180, 355, 360, 361, 366, 367, 368, 369, 371, 374, 375, 376, 410, 411, 413, 417, 419, 420, 423, 425, 426, 427, 429, 435, 437, 466, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 500, 504, 506, 509, 510, 511, 516, 707, 710, 754, 760, 772, 782, 783, 786, 793, 826, 876, 886, 888, 902, 904, 931, 933, 934, 936, 937, 939, 940, 942, 946, 947, 950, 952, 955, 957, 960, 962, 963, 966, 968, 971, 972, 975, 980, 983, 996, 999, 1002, 1005, 1006, 1009, 1018, 1021, 1026, 1031, 1033, 1034, 1040, 1041, 1042, 1043, 1061, 1062, 1063, 1066, 1067, 1068, 1070, 1071, 1072, 1075, 1082, 1083, 1086, 1099, 1102, 1107, 1110, 1115, 1116, 1119, 1120, 1123], "isn": [160, 165, 352, 374, 388], "associ": [160, 165, 352, 361, 363, 388, 516, 530, 686, 689, 876, 897, 906, 908, 915, 917, 943, 945], "retriev": [160, 165, 352, 754, 760], "i": [160, 165, 352, 354, 355, 371, 374, 376, 410, 411, 421, 516, 517, 520, 547, 550, 563, 566, 571, 574, 579, 582, 594, 612, 615, 616, 619, 628, 631, 684, 685, 691, 694, 703, 706, 707, 710, 754, 762, 763, 828, 835, 837, 840, 842, 845, 847, 849, 851, 853, 855, 876, 880, 882, 897, 898, 901, 906, 908, 915, 917, 922, 924, 925, 934, 936, 940, 942, 962, 1006, 1009, 1066, 1067, 1068, 1070, 1071, 1072, 1075, 1077, 1080, 1082, 1083, 1086, 1087, 1090, 1091, 1094, 1095, 1098, 1103, 1106, 1107, 1110, 1111, 1114], "e": [160, 165, 175, 176, 350, 352, 354, 355, 365, 374, 388, 409, 410, 421, 429, 434, 457, 466, 482, 516, 517, 520, 547, 550, 563, 566, 571, 574, 579, 582, 594, 604, 612, 615, 616, 619, 628, 631, 648, 651, 656, 659, 684, 685, 691, 694, 703, 706, 707, 710, 828, 835, 837, 840, 842, 845, 847, 849, 851, 853, 855, 876, 880, 882, 897, 898, 901, 906, 908, 915, 917, 922, 924, 925, 940, 942, 962, 1006, 1009, 1049, 1054, 1055, 1057, 1066, 1067, 1068, 1070, 1071, 1072, 1075, 1077, 1080, 1082, 1087, 1090, 1091, 1094, 1095, 1098, 1099, 1102, 1103, 1106, 1107, 1111, 1114], "one": [160, 165, 175, 176, 179, 180, 184, 193, 277, 280, 281, 285, 288, 294, 296, 318, 319, 320, 321, 332, 333, 336, 337, 351, 352, 358, 361, 364, 365, 366, 368, 369, 370, 373, 374, 376, 388, 410, 411, 421, 429, 436, 438, 441, 466, 495, 496, 497, 498, 510, 517, 521, 534, 664, 754, 755, 757, 758, 759, 783, 787, 804, 807, 810, 811, 876, 898, 901, 902, 904, 912, 914, 918, 920, 937, 939, 940, 942, 962, 963, 967, 976, 979, 980, 983, 996, 999, 1000, 1002, 1005, 1051, 1053, 1061, 1062, 1064, 1066, 1067, 1068, 1069, 1070, 1082, 1083, 1086, 1110, 1124], "torch": [160, 165, 172, 352, 356, 361, 362, 364, 365, 366, 367, 368, 369, 371, 373, 374, 375, 376, 388, 407, 408, 429, 450, 451, 466, 507, 754, 816, 962, 976, 979, 1124], "tensorflow": [160, 165, 172, 175, 176, 352, 353, 366, 367, 368, 369, 371, 376, 388, 1124], "mxnet": [160, 165, 175, 353, 366, 367, 368, 371, 376, 1124], "either": [160, 165, 172, 179, 180, 351, 352, 354, 357, 358, 361, 362, 365, 366, 367, 371, 373, 374, 388, 410, 416, 516, 530, 533, 547, 550, 607, 632, 635, 648, 651, 652, 655, 660, 663, 664, 667, 686, 689, 707, 710, 715, 718, 719, 722, 740, 754, 775, 800, 804, 805, 876, 898, 901, 1022, 1023, 1024, 1025, 1082, 1099, 1102, 1107, 1145, 1156, 1157, 1158], "doesn": [160, 165, 351, 354, 358, 366, 371, 388], "matter": [160, 165, 174, 358], "been": [160, 165, 352, 357, 361, 362, 365, 366, 367, 369, 371, 387, 388, 466, 485, 754, 776, 777, 778, 1049, 1050], "ivy_np": [160, 165], "ivy_jax": [160, 165], "subsequ": [160, 166, 351, 358, 360, 361, 364, 368, 369, 375], "call": [160, 166, 172, 175, 181, 182, 184, 354, 356, 357, 358, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 371, 373, 374, 375, 376, 388, 466, 510, 754, 809, 814, 825, 828, 839, 1026, 1027, 1032, 1036, 1037, 1145, 1156, 1157, 1158, 1161, 1165], "ndarrai": [160, 166, 364, 366, 367, 368, 369, 373, 410, 412, 422, 754, 823], "Or": [160, 166, 374], "jaxlib": [160, 166, 351, 366, 367, 369, 373], "xla_extens": [160, 166, 366, 367, 369, 373], "devicearrai": [160, 166, 373], "try_import_ivy_jax": 160, "warn": [160, 167, 168, 169, 170, 171], "try_import_ivy_mxnet": 160, "try_import_ivy_numpi": 160, "try_import_ivy_tf": 160, "try_import_ivy_torch": 160, "unset_backend": [160, 362], "unset": [160, 172, 362, 371, 373], "adjust": [160, 172, 1082, 1103, 1106, 1111, 1114], "previous": [160, 172, 351, 354, 360, 361, 371, 754, 765], "implement": [160, 172, 353, 357, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 371, 373, 374, 375, 376, 387, 388, 429, 435, 457, 466, 511, 516, 517, 520, 522, 525, 526, 529, 535, 538, 539, 542, 543, 547, 550, 583, 586, 587, 590, 604, 608, 611, 648, 651, 652, 655, 656, 659, 660, 663, 686, 689, 703, 706, 707, 710, 719, 722, 723, 726, 740, 745, 876, 889, 891, 1066, 1067, 1068, 1070, 1071, 1072, 1075, 1077, 1080, 1082, 1087, 1090, 1091, 1094, 1095, 1098, 1124], "wa": [160, 172, 175, 179, 180, 358, 371, 373, 754, 825, 1026, 1039, 1082, 1087, 1090, 1091, 1094, 1095, 1098, 1099, 1102, 1103, 1106, 1107, 1111, 1114, 1115, 1116, 1119, 1120, 1123], "last": [160, 172, 176, 179, 180, 352, 358, 362, 388, 399, 404, 466, 485, 863, 873, 876, 880, 882, 886, 888, 902, 904, 934, 936, 937, 939, 946, 952, 955, 957, 960, 962, 980, 983, 996, 999, 1001, 1006, 1009, 1071, 1072, 1075, 1077, 1080, 1115, 1116, 1119, 1120, 1123, 1145, 1155], "henc": [160, 172, 1066, 1067, 1068, 1070], "here": [160, 172, 351, 352, 353, 356, 358, 365, 369, 371, 372, 373, 374, 375, 376, 387, 388], "tensor": [160, 172, 174, 179, 180, 356, 361, 362, 364, 366, 367, 368, 369, 371, 373, 374, 375, 376, 388, 410, 419, 420, 429, 447, 516, 555, 558, 684, 685, 754, 807, 810, 811, 863, 871, 873, 876, 931, 933, 962, 976, 979, 992, 995, 1001, 1049, 1050, 1061, 1064, 1124, 1145, 1153, 1155], "howev": [160, 172, 175, 351, 353, 357, 360, 361, 362, 364, 365, 366, 367, 368, 369, 373, 374, 375, 376, 388], "befor": [160, 172, 179, 180, 351, 352, 353, 357, 360, 364, 366, 367, 368, 371, 374, 388, 466, 510, 516, 750, 753, 863, 874, 875, 1022, 1023, 1024, 1026, 1038, 1066, 1067, 1068, 1070, 1082, 1099, 1102, 1107], "becom": [160, 172, 174, 176, 352, 358, 365, 371, 376, 388, 962, 963, 966], "swap": [160, 172, 962, 1010, 1013], "python": [160, 172, 173, 174, 175, 351, 352, 354, 371, 373, 374, 388, 410, 411, 466, 505, 515, 516, 707, 710, 1124, 1130], "op": [160, 172, 356, 371, 388], "eagertensor": [160, 172], "def": [161, 353, 356, 358, 361, 365, 366, 367, 368, 369, 371, 373, 374, 375, 376, 430, 431, 432, 467, 474, 477, 829, 1124, 1137, 1140, 1143], "ml": [173, 175, 176, 350, 370, 371, 372, 374, 375, 376, 387, 1124, 1130], "explos": [173, 175, 1124], "A": [173, 174, 175, 176, 179, 180, 181, 182, 183, 354, 355, 360, 361, 365, 366, 367, 371, 374, 388, 410, 415, 422, 466, 475, 476, 510, 516, 699, 702, 754, 790, 822, 876, 885, 912, 914, 921, 922, 924, 925, 962, 1001, 1006, 1009, 1026, 1027, 1029, 1031, 1033, 1034, 1035, 1036, 1037, 1040, 1041, 1042, 1043, 1082, 1083, 1086, 1110, 1115, 1116, 1119, 1120, 1123, 1124, 1167, 1168], "huge": [173, 175, 374, 1124], "number": [173, 174, 179, 180, 181, 182, 183, 184, 351, 358, 365, 367, 368, 371, 374, 376, 407, 408, 409, 410, 411, 412, 415, 419, 420, 421, 422, 429, 436, 448, 449, 452, 454, 455, 457, 466, 502, 503, 504, 516, 530, 547, 550, 579, 582, 594, 612, 615, 616, 619, 684, 685, 686, 689, 703, 706, 707, 710, 711, 714, 715, 718, 750, 753, 754, 755, 758, 781, 790, 791, 806, 824, 827, 863, 874, 876, 885, 889, 891, 906, 908, 921, 925, 937, 939, 962, 963, 966, 972, 975, 984, 987, 988, 991, 996, 999, 1001, 1006, 1009, 1014, 1017, 1018, 1021, 1022, 1023, 1024, 1025, 1049, 1050, 1059, 1061, 1064, 1066, 1067, 1068, 1082, 1087, 1090, 1091, 1094, 1095, 1098, 1099, 1102, 1103, 1106, 1107, 1111, 1114, 1115, 1116, 1119, 1120, 1123, 1124, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1154, 1155, 1156], "tool": [173, 176, 352, 372, 376, 387, 388, 1124], "have": [173, 174, 175, 176, 179, 180, 351, 352, 353, 354, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 371, 372, 373, 374, 375, 376, 387, 388, 399, 400, 401, 402, 403, 404, 405, 406, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 423, 424, 425, 426, 427, 428, 429, 435, 436, 437, 449, 466, 511, 516, 517, 520, 522, 525, 526, 529, 530, 533, 535, 538, 539, 542, 543, 546, 547, 550, 551, 554, 555, 558, 559, 562, 563, 566, 567, 570, 571, 574, 575, 578, 579, 582, 583, 586, 587, 590, 591, 594, 596, 599, 600, 603, 604, 607, 608, 611, 612, 615, 616, 619, 620, 623, 624, 627, 628, 631, 632, 635, 636, 639, 640, 643, 644, 647, 648, 651, 652, 655, 656, 659, 660, 663, 664, 667, 668, 671, 672, 675, 676, 679, 680, 683, 684, 685, 686, 689, 691, 694, 695, 698, 699, 702, 703, 706, 707, 710, 711, 714, 715, 718, 719, 722, 723, 726, 727, 730, 731, 734, 735, 739, 740, 744, 745, 749, 750, 753, 754, 766, 767, 769, 772, 776, 777, 778, 780, 783, 786, 794, 807, 810, 811, 828, 844, 858, 861, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 874, 875, 876, 877, 879, 880, 882, 883, 885, 886, 888, 889, 891, 892, 894, 895, 897, 898, 901, 902, 904, 906, 908, 909, 911, 912, 914, 915, 917, 918, 920, 921, 922, 924, 925, 927, 928, 930, 931, 933, 934, 936, 937, 939, 940, 942, 943, 945, 946, 947, 950, 952, 955, 957, 960, 962, 963, 966, 968, 971, 972, 975, 976, 979, 980, 983, 984, 987, 988, 991, 992, 995, 996, 999, 1002, 1005, 1006, 1009, 1010, 1013, 1014, 1017, 1018, 1021, 1044, 1045, 1048, 1049, 1050, 1051, 1052, 1054, 1055, 1057, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1070, 1071, 1072, 1075, 1077, 1080, 1082, 1087, 1090, 1091, 1094, 1095, 1098, 1099, 1102, 1103, 1106, 1107, 1111, 1114, 1115, 1116, 1119, 1120, 1123, 1124], "explod": [173, 174, 1124], "onto": [173, 174, 466, 495, 496, 1026, 1032, 1038, 1124], "scene": [173, 174, 355, 370, 372, 828, 835, 837, 840, 842, 845, 847, 849, 851, 853, 855, 1124], "b": [173, 176, 181, 182, 184, 185, 188, 190, 193, 210, 211, 212, 227, 229, 266, 277, 278, 280, 281, 284, 285, 288, 294, 296, 300, 301, 306, 307, 314, 315, 318, 319, 320, 321, 322, 323, 332, 333, 336, 337, 350, 355, 358, 361, 362, 365, 370, 371, 372, 374, 375, 376, 386, 429, 438, 440, 441, 442, 466, 488, 516, 517, 519, 520, 521, 530, 532, 534, 535, 538, 546, 551, 555, 558, 575, 578, 579, 581, 582, 587, 599, 612, 614, 616, 623, 624, 627, 664, 691, 694, 695, 698, 711, 714, 727, 730, 731, 734, 740, 741, 743, 745, 746, 748, 749, 754, 755, 757, 758, 759, 762, 763, 771, 772, 779, 782, 783, 785, 786, 787, 824, 828, 830, 832, 833, 834, 863, 866, 869, 870, 875, 876, 877, 879, 880, 882, 883, 912, 914, 922, 924, 931, 933, 943, 945, 946, 947, 950, 962, 963, 965, 966, 967, 976, 979, 980, 983, 988, 991, 996, 998, 999, 1000, 1006, 1009, 1010, 1013, 1044, 1045, 1048, 1049, 1051, 1053, 1054, 1055, 1057, 1061, 1063, 1064, 1065, 1071, 1072, 1075, 1082, 1083, 1086, 1087, 1090, 1110, 1115, 1116, 1119, 1124, 1130], "why": [173, 175, 352, 365, 368, 369, 373, 1124], "unifi": [173, 175, 179, 180, 364, 371, 388, 466, 495, 496, 497, 498, 510, 1124], "should": [173, 175, 179, 180, 181, 182, 183, 184, 191, 348, 349, 351, 352, 353, 354, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 373, 374, 375, 407, 408, 410, 421, 425, 426, 429, 437, 466, 516, 517, 520, 522, 525, 526, 529, 530, 533, 535, 538, 539, 542, 543, 546, 547, 550, 551, 554, 555, 558, 559, 562, 563, 566, 567, 570, 571, 574, 575, 578, 579, 582, 583, 586, 587, 590, 591, 604, 607, 608, 611, 612, 628, 631, 632, 635, 636, 639, 640, 643, 648, 651, 652, 655, 660, 663, 664, 667, 668, 671, 672, 675, 676, 679, 680, 683, 686, 689, 695, 698, 703, 706, 707, 710, 715, 718, 719, 722, 723, 726, 727, 730, 731, 734, 735, 739, 740, 744, 745, 749, 750, 753, 754, 765, 798, 807, 828, 835, 837, 840, 842, 845, 847, 849, 851, 853, 855, 863, 875, 876, 877, 879, 880, 882, 883, 886, 888, 895, 897, 898, 901, 906, 908, 912, 914, 915, 917, 918, 920, 922, 924, 925, 931, 933, 934, 936, 937, 939, 940, 942, 962, 992, 995, 1049, 1060, 1061, 1062, 1063, 1066, 1067, 1068, 1070, 1082, 1083, 1086, 1087, 1090, 1091, 1094, 1099, 1102, 1103, 1106, 1107, 1110, 1111, 1114, 1124], "them": [173, 174, 175, 176, 360, 362, 364, 365, 371, 373, 374, 375, 388, 1124], "c": [173, 175, 176, 184, 294, 336, 337, 350, 355, 358, 361, 365, 370, 371, 372, 374, 388, 516, 695, 698, 754, 762, 763, 771, 824, 828, 830, 833, 835, 837, 840, 842, 845, 847, 849, 851, 853, 855, 863, 869, 962, 1006, 1009, 1051, 1053, 1061, 1064, 1082, 1083, 1086, 1103, 1106, 1110, 1111, 1114, 1124, 1130], "standard": [173, 355, 356, 357, 359, 360, 364, 368, 369, 388, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 421, 423, 424, 425, 426, 427, 428, 429, 438, 441, 449, 516, 517, 520, 530, 535, 538, 555, 558, 575, 578, 579, 582, 587, 612, 695, 698, 711, 714, 727, 730, 731, 734, 740, 745, 876, 883, 962, 976, 979, 980, 983, 996, 999, 1044, 1045, 1048, 1049, 1054, 1066, 1067, 1068, 1071, 1072, 1075, 1082, 1087, 1090, 1103, 1106, 1111, 1114, 1115, 1116, 1119, 1124, 1130, 1159, 1160], "re": [173, 174, 175, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 373, 376, 388, 466, 510, 754, 776, 876, 931, 933, 962, 996, 999, 1061, 1065, 1124], "collabor": [173, 174, 175, 1124], "consortium": [173, 175, 1124, 1130], "data": [173, 175, 179, 180, 181, 182, 183, 355, 356, 357, 361, 363, 365, 367, 368, 369, 373, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 421, 422, 423, 424, 425, 426, 427, 428, 433, 434, 435, 437, 438, 441, 443, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 461, 465, 466, 468, 469, 470, 471, 472, 473, 478, 479, 480, 482, 516, 517, 520, 522, 525, 526, 529, 530, 533, 535, 538, 539, 542, 543, 546, 547, 550, 551, 554, 555, 558, 559, 562, 563, 566, 567, 570, 571, 574, 575, 578, 579, 582, 583, 586, 587, 590, 591, 594, 596, 599, 604, 607, 608, 611, 612, 615, 616, 619, 620, 623, 624, 627, 628, 631, 632, 635, 636, 639, 640, 643, 644, 647, 648, 651, 652, 655, 660, 663, 664, 667, 668, 671, 672, 675, 676, 679, 680, 683, 686, 689, 695, 698, 703, 706, 707, 710, 715, 718, 719, 722, 723, 726, 727, 730, 731, 734, 735, 739, 740, 744, 745, 749, 750, 753, 754, 762, 763, 800, 801, 803, 820, 828, 844, 861, 863, 872, 876, 877, 879, 880, 882, 883, 886, 888, 889, 891, 892, 894, 895, 897, 898, 901, 906, 908, 909, 911, 912, 914, 915, 917, 918, 920, 922, 924, 925, 931, 933, 934, 936, 937, 939, 940, 942, 962, 976, 979, 980, 983, 984, 987, 992, 995, 996, 999, 1002, 1005, 1006, 1009, 1049, 1060, 1061, 1062, 1063, 1064, 1071, 1072, 1075, 1082, 1087, 1090, 1091, 1094, 1095, 1098, 1099, 1102, 1103, 1106, 1107, 1111, 1114, 1115, 1116, 1119, 1120, 1123, 1124, 1130, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156], "api": [173, 174, 351, 352, 355, 357, 358, 360, 361, 363, 364, 366, 367, 368, 369, 370, 372, 374, 388, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 421, 423, 424, 425, 426, 427, 428, 429, 438, 441, 516, 517, 520, 530, 535, 538, 555, 558, 575, 578, 579, 582, 587, 612, 695, 698, 711, 714, 727, 730, 731, 734, 740, 745, 876, 883, 962, 976, 979, 980, 983, 996, 999, 1066, 1067, 1068, 1071, 1072, 1075, 1082, 1087, 1090, 1115, 1116, 1119, 1124, 1130], "open": [174, 175, 176, 350, 351, 354, 357, 387, 410, 411, 1049, 1051, 1052, 1055, 1057, 1124], "project": [174, 175, 176, 351, 352, 354, 356, 362, 373, 375, 387, 388, 1049, 1050, 1054], "grown": 174, "consider": [174, 358, 369], "recent": [174, 175, 351, 352], "year": [174, 176, 388, 1124], "especi": [174, 351], "deep": [174, 179, 180, 350, 352, 353, 370, 374, 1124], "learn": [174, 175, 351, 353, 355, 361, 370, 376, 387, 516, 620, 828, 835, 837, 840, 842, 845, 847, 849, 851, 853, 855, 1022, 1023, 1024, 1025, 1124, 1161, 1162, 1163, 1164, 1165, 1166], "can": [174, 175, 176, 350, 351, 352, 355, 356, 357, 358, 359, 360, 361, 362, 365, 366, 367, 368, 369, 370, 371, 373, 374, 375, 376, 387, 388, 410, 412, 422, 429, 438, 441, 466, 508, 509, 510, 876, 895, 962, 992, 995, 1049, 1051, 1052, 1124, 1130], "seen": [174, 175, 358, 373, 374], "rapidli": 174, "increas": [174, 466, 490, 494, 498, 962, 972, 975, 1018, 1021, 1026, 1038], "github": [174, 352, 353, 357, 360], "repo": [174, 175, 176, 351, 352, 359, 371, 373, 374, 375, 376, 387, 1124, 1130], "term": [174, 352, 365, 863, 873, 1145, 1155], "time": [174, 175, 176, 351, 352, 353, 360, 361, 365, 366, 369, 371, 374, 376, 388, 828, 835, 837, 845, 847, 863, 873, 962, 1014, 1017, 1022, 1023, 1024, 1025, 1061, 1062, 1063, 1066, 1067, 1068, 1145, 1156, 1157, 1158], "These": [174, 175, 176, 352, 357, 358, 360, 361, 365, 366, 368, 369, 371, 372, 374, 375, 376, 388, 876, 889, 891, 1124, 1130], "written": [174, 351, 356, 357, 364, 368, 369, 371, 373, 376, 388], "mani": [174, 175, 176, 179, 180, 351, 352, 353, 357, 358, 361, 363, 364, 365, 366, 367, 368, 369, 371, 373, 374, 388, 962, 1001], "differ": [174, 175, 176, 179, 180, 181, 182, 183, 351, 352, 355, 356, 357, 358, 360, 361, 364, 365, 367, 368, 369, 371, 372, 373, 374, 375, 376, 388, 429, 449, 466, 487, 488, 491, 492, 516, 530, 686, 689, 735, 739, 863, 872, 962, 1006, 1009, 1082, 1099, 1102, 1107, 1124], "while": [174, 175, 179, 180, 181, 182, 183, 351, 352, 358, 362, 368, 375, 376, 388, 516, 672, 675, 676, 679, 1066, 1067, 1082, 1091, 1094], "wonder": [174, 176, 373], "thing": [174, 175, 176, 351, 352, 353, 362, 373, 374], "research": [174, 387], "develop": [174, 175, 176, 350, 351, 352, 353, 387, 388, 1124], "consid": [174, 175, 179, 180, 356, 361, 372, 373, 374, 516, 672, 675, 676, 679, 1066, 1067, 1068, 1070], "speed": 174, "evolv": 174, "sharabl": 174, "code": [174, 175, 176, 179, 180, 181, 182, 183, 184, 188, 278, 322, 323, 351, 352, 353, 354, 355, 357, 358, 361, 362, 363, 364, 365, 368, 369, 370, 371, 372, 373, 374, 375, 376, 386, 388, 399, 401, 402, 403, 404, 405, 406, 466, 488, 511, 516, 575, 578, 731, 734, 828, 830, 832, 833, 834, 863, 869, 870, 1066, 1067, 1068, 1071, 1072, 1075, 1082, 1083, 1086, 1110, 1124, 1130], "significantli": 174, "hinder": [174, 369], "librari": [174, 175, 176, 371, 376, 386, 388, 466, 511, 516, 608, 611, 672, 675, 676, 679, 876, 889, 891, 1066, 1067, 1068, 1070, 1082, 1087, 1090, 1091, 1094, 1095, 1098, 1124], "outdat": 174, "month": 174, "rigor": 174, "maintain": [174, 352, 1071, 1072, 1075, 1077, 1080], "against": [174, 179, 180, 360, 388, 429, 436, 876, 897, 898, 901, 902, 904, 906, 908, 915, 917, 1061, 1062], "newest": 174, "version": [174, 175, 176, 351, 357, 371, 373, 876, 889, 891, 1124], "For": [174, 175, 176, 351, 352, 353, 354, 355, 356, 357, 358, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 371, 373, 374, 375, 376, 387, 388, 410, 411, 421, 516, 517, 520, 522, 525, 526, 529, 530, 533, 535, 538, 539, 542, 543, 547, 550, 579, 582, 583, 586, 587, 590, 604, 607, 608, 611, 612, 648, 651, 652, 655, 660, 663, 664, 667, 686, 689, 703, 706, 707, 710, 711, 714, 719, 722, 723, 726, 727, 730, 740, 745, 750, 753, 828, 844, 861, 876, 925, 934, 936, 962, 963, 966, 1006, 1009, 1066, 1067, 1068, 1070, 1082, 1087, 1090, 1095, 1098, 1107, 1134, 1135], "softwar": [174, 175, 351, 352], "pipelin": [174, 364, 376], "where": [174, 175, 176, 179, 180, 181, 182, 350, 351, 352, 353, 354, 357, 361, 362, 364, 365, 366, 367, 368, 371, 374, 375, 376, 388, 410, 417, 418, 421, 516, 547, 550, 604, 656, 659, 686, 689, 703, 706, 754, 794, 798, 807, 876, 889, 891, 897, 906, 908, 915, 917, 918, 920, 925, 927, 928, 930, 934, 936, 937, 939, 962, 963, 966, 972, 975, 976, 979, 984, 987, 1006, 1009, 1018, 1021, 1026, 1027, 1037, 1049, 1050, 1061, 1064, 1082, 1103, 1106, 1111, 1114, 1115, 1116, 1119, 1120, 1123, 1124], "rapid": [174, 175, 351], "prototyp": 174, "vital": [174, 376], "signific": [174, 175, 388], "bottleneck": 174, "new": [174, 175, 176, 179, 180, 350, 351, 352, 353, 354, 355, 356, 357, 358, 360, 363, 365, 366, 368, 370, 373, 376, 387, 410, 413, 416, 417, 418, 423, 424, 427, 428, 429, 461, 516, 546, 551, 554, 656, 659, 699, 702, 744, 749, 754, 776, 777, 778, 781, 782, 783, 786, 810, 811, 812, 813, 818, 819, 828, 835, 837, 840, 842, 845, 847, 849, 851, 853, 855, 962, 976, 979, 992, 995, 1006, 1009, 1026, 1031, 1042, 1043, 1044, 1045, 1048, 1124, 1134, 1135, 1145, 1155, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166], "futur": [174, 176, 351, 352, 373, 388, 876, 889, 891], "avail": [174, 179, 180, 351, 352, 357, 367, 388, 466, 485, 501, 502, 503, 513, 754, 777], "specif": [174, 179, 180, 353, 361, 364, 365, 366, 367, 368, 369, 371, 372, 373, 375, 376, 387, 388, 429, 457, 466, 508, 511, 516, 672, 675, 676, 679, 754, 776, 777, 778, 805, 876, 889, 891, 931, 933, 962, 1006, 1009, 1022, 1023, 1024, 1025, 1049, 1050, 1082, 1087, 1090, 1091, 1094, 1095, 1098, 1124, 1127, 1129, 1130, 1157, 1158], "quickli": [174, 176, 351, 352, 374, 375], "obsolet": [174, 176], "user": [174, 175, 351, 352, 354, 355, 360, 362, 365, 368, 370, 388, 1145, 1156, 1157, 1158], "constantli": 174, "invent": 174, "wheel": 174, "desir": [174, 179, 180, 429, 435, 438, 441, 466, 511, 754, 794, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156], "provid": [174, 179, 180, 351, 352, 357, 358, 361, 364, 365, 366, 367, 368, 369, 371, 375, 387, 388, 407, 408, 410, 421, 429, 444, 445, 446, 453, 457, 465, 466, 485, 754, 775, 807, 811, 828, 835, 837, 840, 842, 845, 847, 849, 851, 853, 855, 876, 937, 939, 962, 980, 983, 1006, 1009, 1061, 1062, 1082, 1103, 1106, 1111, 1114, 1115, 1116, 1119, 1120, 1123, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1154, 1155, 1156, 1161, 1162, 1163, 1164, 1165, 1166], "simultan": [174, 176], "modern": [174, 175], "simpl": [174, 351, 352, 356, 357, 358, 360, 361, 364, 365, 366, 367, 368, 371, 373, 375, 376, 388, 754, 779], "scalabl": [174, 371], "must": [174, 176, 179, 180, 181, 182, 183, 351, 352, 353, 356, 357, 358, 361, 364, 365, 366, 367, 369, 371, 375, 376, 399, 400, 401, 402, 403, 404, 405, 406, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 423, 424, 425, 426, 427, 428, 429, 435, 436, 437, 466, 495, 496, 497, 498, 510, 511, 516, 517, 520, 522, 525, 526, 529, 530, 533, 535, 538, 539, 542, 543, 546, 547, 550, 551, 554, 555, 558, 559, 562, 563, 566, 567, 570, 571, 574, 575, 578, 579, 582, 583, 586, 587, 590, 591, 594, 596, 599, 600, 603, 604, 607, 608, 611, 612, 615, 616, 619, 620, 623, 624, 627, 628, 631, 632, 635, 636, 639, 640, 643, 644, 647, 648, 651, 652, 655, 656, 659, 660, 663, 664, 667, 668, 671, 672, 675, 676, 679, 680, 683, 684, 685, 686, 689, 691, 694, 695, 698, 699, 702, 703, 706, 707, 710, 711, 714, 715, 718, 719, 722, 723, 726, 727, 730, 731, 734, 735, 739, 740, 744, 745, 749, 750, 753, 754, 766, 767, 769, 772, 776, 777, 778, 780, 783, 786, 794, 807, 810, 811, 828, 858, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 874, 875, 876, 877, 879, 880, 882, 883, 885, 886, 888, 889, 891, 892, 894, 895, 897, 898, 901, 902, 904, 906, 908, 909, 911, 912, 914, 915, 917, 918, 920, 921, 922, 924, 925, 927, 928, 930, 931, 933, 934, 936, 937, 939, 940, 942, 943, 945, 946, 947, 950, 952, 955, 957, 960, 962, 963, 966, 968, 971, 972, 975, 976, 979, 980, 983, 984, 987, 988, 991, 992, 995, 996, 999, 1002, 1005, 1006, 1009, 1010, 1013, 1014, 1017, 1018, 1021, 1044, 1045, 1048, 1049, 1050, 1051, 1052, 1054, 1055, 1057, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1070, 1071, 1072, 1075, 1077, 1080, 1082, 1087, 1090, 1091, 1094, 1095, 1098, 1099, 1102, 1103, 1106, 1107, 1111, 1114, 1115, 1116, 1119, 1120, 1123, 1161, 1165], "determin": [174, 179, 180, 357, 361, 365, 366, 367, 429, 438, 441, 443, 448, 453, 454, 455, 465, 466, 501, 502, 503, 513, 516, 522, 525, 526, 529, 530, 533, 535, 538, 539, 542, 543, 546, 547, 550, 551, 554, 555, 558, 563, 566, 567, 570, 571, 574, 575, 578, 583, 586, 587, 590, 591, 604, 607, 608, 611, 628, 631, 632, 635, 636, 639, 648, 651, 652, 655, 660, 663, 664, 667, 680, 683, 686, 689, 703, 706, 707, 710, 719, 722, 723, 726, 727, 730, 740, 744, 745, 749, 754, 755, 758, 762, 763, 793, 795, 799, 800, 801, 802, 803, 820, 827, 828, 844, 863, 874, 876, 877, 879, 880, 882, 883, 885, 886, 888, 895, 897, 898, 901, 906, 908, 912, 914, 915, 917, 921, 922, 924, 934, 936, 937, 939, 940, 942, 1022, 1023, 1024, 1025, 1066, 1067, 1068, 1070, 1115, 1116, 1119, 1120, 1123], "exactli": [174, 176, 358, 365, 367, 1124, 1130], "common": [174, 179, 180, 353, 358, 361, 363, 365, 367, 388], "ground": [174, 360], "li": 174, "between": [174, 179, 180, 181, 182, 183, 358, 360, 361, 364, 365, 369, 370, 372, 373, 374, 376, 387, 410, 411, 429, 449, 516, 547, 550, 703, 706, 946, 947, 950, 952, 955, 957, 960, 962, 976, 979, 1006, 1009, 1026, 1032, 1049, 1051, 1052, 1066, 1067, 1068, 1070, 1124, 1161, 1163], "find": [174, 179, 180, 351, 352, 371, 374, 1066, 1067, 1068, 1070, 1124], "exist": [174, 175, 179, 180, 181, 182, 351, 353, 354, 357, 358, 359, 360, 361, 362, 363, 368, 371, 388, 754, 775, 1161, 1165], "essenti": [174, 175, 353, 358, 361, 367], "order": [174, 179, 180, 181, 182, 183, 351, 352, 354, 357, 358, 362, 364, 365, 366, 367, 369, 373, 374, 376, 388, 516, 547, 550, 828, 835, 837, 840, 842, 845, 847, 849, 851, 853, 855, 876, 889, 891, 902, 904, 925, 927, 928, 930, 940, 942, 962, 980, 983, 1022, 1023, 1024, 1061, 1064, 1066, 1067, 1068, 1070, 1071, 1072, 1075, 1077, 1080, 1167, 1168], "design": [174, 175, 355, 368, 371, 373, 388], "univers": 174, "abstract": [174, 365, 375, 388, 466, 481, 1161, 1165], "In": [174, 176, 351, 352, 356, 357, 358, 361, 362, 365, 366, 367, 368, 369, 371, 373, 374, 375, 376, 387, 388, 466, 505, 511, 512, 515, 516, 530, 686, 689, 707, 710, 754, 760, 798, 962, 992, 995, 1049, 1055, 1057, 1124], "languag": [174, 176, 371], "first": [174, 175, 351, 352, 354, 358, 361, 364, 365, 369, 371, 373, 374, 376, 407, 408, 410, 419, 420, 429, 456, 461, 466, 485, 497, 516, 530, 533, 555, 558, 563, 566, 567, 570, 571, 574, 575, 578, 594, 596, 599, 607, 615, 616, 619, 623, 624, 627, 640, 643, 644, 647, 664, 667, 668, 671, 676, 679, 680, 683, 686, 689, 695, 698, 703, 706, 735, 739, 754, 762, 828, 839, 876, 880, 882, 886, 888, 889, 891, 898, 901, 912, 914, 918, 920, 925, 931, 933, 937, 939, 962, 968, 971, 996, 999, 1006, 1009, 1010, 1013, 1022, 1023, 1024, 1025, 1026, 1027, 1036, 1037, 1049, 1060, 1061, 1062, 1063, 1066, 1067, 1068, 1145, 1156, 1157, 1158, 1161, 1165], "see": [174, 350, 351, 352, 353, 359, 361, 365, 367, 369, 373, 374, 387, 388, 410, 411, 416, 419, 420, 429, 437, 457, 516, 530, 533, 555, 558, 563, 566, 567, 570, 571, 574, 575, 578, 591, 607, 608, 611, 640, 643, 664, 667, 676, 679, 680, 683, 686, 689, 695, 698, 703, 706, 707, 710, 735, 739, 876, 897, 906, 908, 915, 917, 922, 924, 937, 939, 940, 942, 1061, 1063, 1066, 1067, 1068, 1070, 1082, 1087, 1090, 1091, 1094, 1095, 1098, 1099, 1102, 1103, 1106, 1107, 1111, 1114, 1115, 1116, 1119, 1120, 1123, 1124], "clear": [174, 175, 176, 352, 353, 358, 360, 366, 367, 371, 373, 466, 484], "front": [174, 370, 371, 374, 1124, 1130], "runner": 174, "look": [174, 351, 352, 354, 356, 358, 361, 362, 365, 366, 367, 369, 371, 373, 375, 376, 1124], "littl": [174, 373], "deeper": [174, 352, 355, 370, 466, 490, 494, 498, 1026, 1037, 1038], "follow": [174, 175, 179, 180, 351, 352, 353, 354, 356, 357, 358, 360, 362, 364, 365, 366, 367, 368, 370, 371, 373, 374, 375, 376, 388, 429, 452, 466, 510, 516, 707, 710, 754, 796, 797, 798, 818, 819, 828, 835, 837, 840, 842, 845, 847, 849, 851, 853, 855, 863, 874, 875, 876, 918, 920, 940, 942, 1026, 1032, 1038, 1066, 1067, 1068, 1070, 1124, 1145, 1155, 1161, 1165], "core": [174, 351, 353, 367, 371, 376, 466, 502, 1124], "principl": 174, "oper": [174, 179, 180, 181, 182, 184, 351, 353, 357, 358, 361, 364, 365, 367, 368, 374, 375, 410, 419, 420, 429, 457, 516, 530, 571, 574, 575, 578, 599, 623, 624, 627, 691, 694, 695, 698, 707, 710, 731, 734, 754, 764, 776, 777, 778, 820, 828, 835, 837, 840, 842, 845, 847, 849, 851, 853, 855, 863, 864, 865, 866, 867, 868, 869, 870, 872], "expos": [174, 371, 375, 754, 770], "almost": [174, 352, 365, 372, 374], "ident": [174, 176, 179, 180, 361, 363, 365, 373, 374, 388, 466, 500, 1026, 1039, 1124], "uniqu": [174, 361, 365, 388, 466, 475, 476, 1022, 1023, 1024, 1025, 1026, 1032, 1066, 1067, 1068, 1069, 1070], "syntax": [174, 175], "There": [174, 351, 352, 358, 361, 364, 365, 366, 371, 374, 388], "onli": [174, 179, 180, 350, 351, 352, 356, 358, 360, 361, 362, 364, 365, 366, 367, 368, 369, 371, 373, 374, 375, 376, 386, 388, 466, 506, 516, 672, 675, 676, 679, 876, 898, 901, 918, 920, 962, 980, 983, 1026, 1027, 1028, 1036, 1037, 1061, 1062, 1063, 1082, 1091, 1094, 1124, 1161, 1162, 1163, 1164, 1165, 1166], "wai": [174, 175, 351, 362, 368, 373, 374, 375, 376, 388], "unsurprisingli": [174, 358], "fundament": [174, 365, 371], "consist": [174, 179, 180, 364, 368, 466, 498, 876, 889, 891, 1082, 1083, 1086, 1110, 1157, 1158], "each": [174, 175, 176, 179, 180, 181, 182, 183, 184, 352, 353, 355, 356, 357, 358, 359, 360, 361, 363, 364, 365, 366, 368, 369, 370, 371, 373, 374, 376, 387, 388, 399, 402, 403, 405, 410, 421, 429, 436, 466, 475, 476, 487, 488, 489, 490, 491, 492, 493, 497, 510, 516, 517, 520, 522, 525, 526, 529, 530, 533, 535, 538, 539, 542, 543, 546, 547, 550, 551, 554, 555, 558, 559, 562, 563, 566, 567, 570, 571, 574, 575, 578, 579, 582, 583, 586, 587, 590, 591, 594, 596, 599, 604, 607, 608, 611, 612, 615, 616, 619, 620, 623, 624, 627, 628, 631, 632, 635, 636, 639, 640, 643, 644, 647, 648, 651, 652, 655, 656, 659, 660, 663, 664, 667, 668, 671, 672, 675, 676, 679, 680, 683, 686, 689, 691, 694, 695, 698, 699, 702, 703, 706, 707, 710, 711, 714, 715, 718, 719, 722, 723, 726, 727, 730, 731, 734, 735, 739, 740, 744, 745, 749, 750, 753, 754, 755, 758, 828, 835, 837, 840, 842, 845, 847, 849, 851, 853, 855, 863, 864, 865, 866, 867, 868, 869, 870, 871, 876, 877, 879, 880, 882, 883, 889, 891, 897, 898, 901, 906, 908, 909, 911, 915, 917, 922, 924, 925, 962, 972, 975, 988, 991, 996, 999, 1001, 1006, 1009, 1014, 1017, 1018, 1021, 1026, 1032, 1039, 1049, 1050, 1061, 1064, 1066, 1067, 1068, 1082, 1083, 1086, 1110, 1124, 1130, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1156, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168], "veri": [174, 175, 351, 352, 356, 358, 360, 361, 365, 367, 368, 369, 372, 374, 375, 376, 388, 1124], "similar": [174, 356, 365, 366, 367, 374, 388, 516, 707, 710, 863, 874, 1145, 1156], "convent": [174, 387, 876, 898, 901, 1082, 1083, 1086, 1110], "those": [174, 179, 180, 351, 352, 353, 365, 371, 376, 410, 411, 828, 861, 876, 918, 920, 925, 962, 963, 966], "introduc": [174, 365, 374, 962, 996, 999, 1066, 1067], "2006": 174, "therefor": [174, 352, 356, 357, 358, 359, 360, 361, 364, 365, 366, 367, 368, 369, 371, 373, 375, 388, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 423, 424, 425, 426, 427, 428, 429, 438, 441, 516, 517, 520, 530, 535, 538, 579, 582, 612, 695, 698, 727, 730, 731, 734, 740, 754, 782, 863, 866, 875, 962, 996, 999, 1044, 1045, 1048, 1082, 1087, 1090, 1115, 1116, 1119], "present": [174, 179, 180, 352, 359, 365, 366, 367, 368, 369, 371], "itself": [174, 351, 352, 365, 368, 369, 375, 387, 388, 754, 760, 1026, 1038], "cut": 174, "cloth": 174, "adher": [174, 175, 357, 359, 371, 376], "semant": [174, 371, 376, 516, 707, 710], "up": [174, 175, 176, 350, 352, 353, 354, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 371, 372, 373, 374, 375, 376, 387, 388], "hopefulli": [174, 175, 176, 351, 352, 353, 354, 355, 356, 357, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 371, 373, 374, 375, 376, 387], "paint": [174, 371], "pictur": [174, 371], "how": [174, 176, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 372, 373, 374, 375, 376, 387, 388, 1124, 1130, 1145, 1156, 1157, 1158], "pleas": [174, 175, 176, 351, 352, 353, 354, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 371, 373, 374, 375, 376, 387, 1124], "discuss": [174, 175, 176, 350, 351, 352, 353, 354, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 371, 373, 374, 375, 376, 387, 388, 1124], "faq": [174, 175, 176, 371, 373, 374, 375, 376, 387], "reach": [174, 175, 176, 351, 352, 353, 354, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 371, 373, 374, 375, 376, 387, 466, 490, 494, 498, 1026, 1038], "discord": [174, 175, 176, 351, 352, 353, 354, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 371, 373, 374, 375, 376, 387, 1124], "you": [174, 175, 176, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 373, 374, 375, 376, 387, 388, 1124, 1130], "question": [174, 175, 176, 351, 352, 358, 360, 371, 373, 374, 375, 376, 387, 388, 1124], "central": 175, "goal": [175, 353], "being": [175, 176, 179, 180, 351, 352, 358, 360, 363, 364, 365, 366, 367, 368, 369, 371, 374, 387, 388, 410, 411, 754, 809, 814, 1066, 1069, 1124], "would": [175, 351, 352, 354, 355, 357, 358, 360, 362, 363, 364, 365, 368, 369, 370, 371, 373, 375, 376, 388, 399, 404, 466, 511, 1124], "entir": [175, 176, 179, 180, 352, 358, 359, 360, 364, 365, 368, 373, 374, 375, 376, 388, 466, 510, 1082, 1087, 1090, 1091, 1094, 1095, 1098, 1099, 1102, 1103, 1106, 1107, 1111, 1114, 1115, 1116, 1119, 1120, 1123, 1145, 1154], "forgiven": 175, "rais": [175, 179, 180, 352, 368, 371, 373, 429, 437, 516, 604, 703, 706, 754, 764, 789, 798, 812, 819, 825, 876, 898, 901, 905, 937, 939, 962, 1002, 1005, 1006, 1009, 1061, 1064, 1082, 1087, 1090, 1095, 1098, 1115, 1116, 1119, 1120, 1123, 1157, 1158, 1161, 1165], "eyebrow": 175, "somehow": 175, "pytorch": [175, 176, 353, 361, 366, 367, 368, 369, 371, 373, 376, 388, 828, 835, 837, 840, 842, 845, 847, 849, 851, 853, 855, 1124, 1161, 1162, 1163, 1164, 1165, 1166], "other": [175, 179, 180, 181, 182, 184, 351, 352, 356, 357, 358, 360, 361, 364, 365, 368, 371, 373, 375, 376, 386, 387, 388, 407, 408, 410, 411, 516, 608, 611, 754, 755, 758, 760, 828, 839, 1049, 1055, 1057, 1066, 1069, 1082, 1103, 1106, 1111, 1114, 1124], "strong": [175, 388], "industri": 175, "back": [175, 364, 370, 371, 373, 388, 1124, 1130, 1157, 1158, 1161, 1165], "momentum": 175, "won": [175, 176, 352, 376], "ad": [175, 184, 191, 348, 349, 351, 352, 353, 356, 357, 358, 360, 361, 363, 364, 365, 366, 368, 369, 371, 375, 388, 754, 818, 819, 876, 889, 891, 962, 976, 979, 1167, 1168], "just": [175, 176, 351, 352, 357, 358, 360, 361, 368, 371, 373, 374, 388, 1082, 1083, 1086, 1110, 1145, 1154], "make": [175, 176, 351, 352, 353, 356, 357, 358, 359, 360, 361, 364, 365, 366, 367, 368, 369, 371, 373, 374, 376, 466], "problem": [175, 352, 364, 373], "even": [175, 176, 351, 352, 357, 361, 366, 367, 369, 373, 374, 375, 376, 388, 516, 703, 706, 711, 714], "wors": 175, "rather": [175, 179, 180, 356, 357, 360, 365, 376, 388, 410, 411, 466, 510, 754, 800, 801, 803, 828, 844], "funni": 175, "comic": 175, "strip": 175, "easi": [175, 351, 352, 361, 365], "feasibl": 175, "space": [175, 410, 411, 419, 420, 754, 781], "unlik": [175, 358, 365, 466], "charger": 175, "charact": 175, "encod": [175, 374, 754, 781], "instant": [175, 1124], "messag": [175, 352, 371, 373, 1170, 1171], "much": [175, 352, 356, 364, 365, 368, 371, 373, 374], "doe": [175, 179, 180, 352, 354, 355, 356, 357, 358, 360, 361, 362, 366, 368, 369, 371, 373, 374, 388, 516, 575, 578, 754, 798, 962, 1001], "mandat": [175, 360, 368], "adopt": [175, 352, 364], "continu": [175, 176, 359, 360, 388], "own": [175, 176, 351, 357, 371, 388], "signatur": [175, 356, 357, 358, 365, 366, 367, 368, 369, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 423, 424, 425, 426, 427, 428, 429, 438, 441, 516, 517, 520, 535, 538, 575, 578, 579, 582, 587, 612, 695, 698, 727, 730, 731, 734, 962, 976, 979, 996, 999, 1066, 1067, 1068, 1071, 1072, 1075, 1082, 1087, 1090], "replac": [175, 179, 180, 352, 354, 358, 360, 363, 365, 366, 367, 371, 373, 376, 388, 754, 810, 811, 962, 963, 966, 1049, 1050], "your": [175, 176, 350, 351, 353, 354, 356, 357, 374, 375, 388, 1124], "10": [175, 177, 178, 179, 180, 181, 182, 183, 184, 236, 290, 294, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 351, 354, 358, 365, 371, 373, 374, 410, 417, 420, 466, 516, 555, 558, 559, 562, 587, 599, 623, 624, 627, 652, 655, 727, 730, 754, 772, 782, 809, 814, 828, 845, 846, 847, 848, 863, 869, 876, 883, 886, 888, 912, 914, 931, 933, 962, 980, 983, 988, 991, 1001, 1044, 1045, 1048, 1049, 1050, 1051, 1052, 1053, 1061, 1064, 1066, 1067, 1082, 1083, 1086, 1087, 1090, 1110, 1161, 1163], "100": [175, 176, 184, 294, 336, 337, 374, 375, 376, 388, 516, 727, 730, 1051, 1053, 1124], "despit": [175, 365, 367], "distinct": [175, 357, 365, 368, 370, 1066, 1067, 1068, 1070, 1124], "still": [175, 179, 180, 357, 360, 366, 373, 375, 388, 1124], "believ": [175, 352], "share": [175, 179, 180, 358, 360, 361, 362, 365, 371, 429, 461], "bring": [175, 371, 372], "benefit": [175, 176, 351, 352, 364, 365, 368, 373, 374, 388], "unrel": [175, 352], "what": [175, 176, 352, 355, 357, 358, 363, 365, 369, 370, 371, 373, 374, 375, 376, 387, 388, 1124], "again": [175, 176, 352, 356, 358, 365, 368, 374, 376, 388], "contrari": 175, "bumpi": 175, "road": 175, "allud": [175, 374], "most": [175, 179, 180, 351, 352, 356, 360, 361, 364, 365, 366, 367, 368, 369, 371, 373, 374, 375, 388, 876, 889, 891], "technolog": 175, "sector": [175, 516, 525, 526, 529, 539, 542, 546, 551, 554, 586, 590, 744, 749], "full": [175, 176, 181, 182, 352, 357, 366, 369, 371, 388, 410, 429, 449, 516, 599, 623, 624, 627, 863, 869, 876, 918, 920, 922, 924, 925, 1044, 1045, 1048], "success": 175, "reason": [175, 352, 356, 358, 361, 364, 365, 366, 368, 371, 373, 516, 707, 710], "build": [175, 350, 351, 361, 370, 372, 375, 376, 388, 1066, 1067, 1068, 1070, 1124, 1145, 1156, 1157, 1158], "custom": [175, 375], "comput": [175, 176, 179, 180, 351, 361, 365, 371, 374, 388, 466, 510, 516, 530, 555, 558, 567, 570, 575, 578, 596, 599, 600, 603, 620, 623, 624, 627, 640, 643, 644, 647, 668, 671, 672, 675, 676, 679, 680, 683, 686, 689, 691, 694, 695, 698, 754, 766, 767, 769, 772, 773, 828, 830, 833, 835, 837, 839, 840, 842, 845, 847, 849, 851, 853, 855, 858, 860, 863, 864, 865, 866, 867, 868, 869, 870, 872, 874, 876, 877, 879, 880, 882, 885, 889, 891, 892, 894, 895, 898, 901, 902, 904, 918, 920, 921, 922, 924, 925, 937, 939, 940, 942, 946, 947, 950, 952, 955, 957, 960, 1026, 1032, 1066, 1067, 1068, 1070, 1082, 1083, 1086, 1087, 1090, 1091, 1094, 1095, 1098, 1099, 1102, 1103, 1106, 1107, 1110, 1111, 1114], "thank": [175, 374], "interoper": 175, "compon": [175, 371], "bio": [175, 351], "hardwar": [175, 351], "initi": [175, 179, 180, 181, 182, 183, 352, 362, 366, 367, 466, 863, 873, 1138, 1139, 1141, 1142, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1154, 1155, 1156, 1157, 1158, 1161, 1165], "pcie": 175, "interfac": [175, 376, 388], "motherboard": 175, "raid": 175, "storag": [175, 374], "virtual": [175, 352, 354], "bluetooth": 175, "wireless": 175, "exchang": 175, "btx": 175, "factor": [175, 466, 475, 508, 509, 510, 828, 830, 833, 835, 837, 845, 847, 849, 851, 863, 864, 865, 866, 867, 868, 869, 870, 876, 877, 879, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1161, 1162, 1163, 1164], "sata": 175, "connect": [175, 351, 375, 376, 1145, 1155, 1156], "host": [175, 388], "bu": 175, "adapt": [175, 828, 849, 851, 1161, 1164], "html": [175, 354, 357, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 423, 424, 425, 426, 427, 428, 429, 438, 441, 516, 517, 520, 535, 538, 575, 578, 579, 582, 587, 612, 695, 698, 727, 730, 731, 734, 962, 976, 979, 996, 999, 1066, 1067, 1068, 1071, 1072, 1075, 1082, 1087, 1090], "enabl": [175, 179, 180, 181, 182, 183, 351, 352, 360, 361, 364, 365, 368, 370, 371, 372, 374, 376, 388], "anyon": [175, 350, 388], "websit": 175, "tcp": 175, "ip": 175, "node": [175, 179, 180, 365, 1026, 1027, 1036, 1037], "commun": [175, 350, 352, 353, 388, 1124, 1130], "network": [175, 361, 365, 371, 375, 387, 863, 872, 1124, 1131, 1145, 1157, 1158], "smtp": 175, "possibl": [175, 350, 351, 352, 353, 357, 358, 360, 365, 366, 368, 371, 374, 387, 388, 754, 804, 822, 1082, 1087, 1090, 1095, 1098], "send": 175, "gmail": 175, "outlook": 175, "pop": 175, "email": 175, "ieee": [175, 409, 429, 449, 516, 530, 608, 611, 686, 689, 707, 710, 727, 730], "754": [175, 409, 429, 449, 516, 530, 608, 611, 686, 689, 707, 710, 727, 730], "allow": [175, 371, 388, 410, 419, 420, 754, 804, 1157, 1158], "calcul": [175, 179, 180, 181, 182, 183, 357, 516, 517, 520, 522, 525, 526, 529, 530, 533, 535, 538, 539, 542, 543, 547, 550, 583, 586, 587, 590, 591, 604, 607, 608, 611, 648, 651, 652, 655, 656, 659, 660, 663, 664, 667, 686, 689, 703, 706, 719, 722, 723, 726, 727, 730, 735, 739, 740, 745, 946, 947, 950, 952, 955, 957, 960, 1082, 1087, 1090, 1091, 1094, 1095, 1098, 1099, 1102, 1103, 1106, 1107, 1111, 1114], "live": [175, 176], "depend": [175, 351, 352, 357, 363, 365, 366, 371, 388, 429, 435, 516, 517, 520, 522, 525, 526, 529, 535, 538, 539, 542, 543, 547, 550, 583, 586, 587, 590, 604, 608, 611, 648, 651, 652, 655, 656, 659, 660, 663, 703, 706, 719, 722, 723, 726, 740, 745, 876, 889, 891, 918, 920, 922, 924, 925, 1061, 1065, 1071, 1072, 1075, 1077, 1080], "did": [175, 353, 376], "aris": [175, 388], "until": [175, 352, 388, 1124], "substanti": [175, 352, 360, 364], "innov": 175, "growth": 175, "usag": [175, 371, 466, 510], "relev": [175, 351, 353, 358, 365, 366, 374, 1161, 1162, 1163, 1164, 1165, 1166], "area": [175, 368, 386, 516, 525, 526, 529, 539, 542, 546, 551, 554, 586, 590, 744, 749, 1124], "necess": 175, "parti": [175, 388], "could": [175, 176, 351, 352, 358, 360, 365, 366, 368, 371, 373, 374, 375, 1066, 1067, 1068, 1070], "easili": [175, 352, 374, 375, 376, 388, 1124], "engag": [175, 350, 351, 352, 353, 354, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369], "regard": [175, 365, 466], "effect": [175, 357, 364, 365, 369, 388, 410, 421, 828, 853, 855, 1082, 1103, 1106, 1111, 1114], "2015": 175, "sinc": [175, 351, 352, 388], "alongsid": 175, "machin": [175, 351, 361, 387, 429, 449, 452, 516, 620, 876, 897, 906, 908, 915, 917], "given": [175, 176, 179, 180, 351, 352, 353, 354, 356, 357, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 371, 373, 375, 376, 387, 410, 411, 413, 419, 420, 466, 499, 505, 507, 508, 509, 510, 512, 515, 754, 772, 773, 783, 786, 810, 811, 826, 828, 830, 833, 835, 837, 840, 842, 845, 847, 849, 851, 853, 855, 863, 864, 865, 866, 867, 868, 869, 870, 876, 943, 945, 946, 947, 950, 952, 955, 957, 960, 962, 963, 966, 976, 979, 980, 983, 988, 991, 996, 999, 1001, 1014, 1017, 1026, 1033, 1034, 1049, 1051, 1052, 1054, 1055, 1057, 1060, 1071, 1077, 1080, 1134, 1135], "frame": [175, 387], "matur": [175, 388], "state": [175, 357, 369, 370, 371, 372, 374, 387, 516, 686, 689, 863, 873, 1124, 1131, 1132, 1133, 1134, 1135, 1136, 1138, 1139, 1141, 1142, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168], "than": [175, 179, 180, 352, 356, 358, 360, 365, 368, 371, 374, 375, 376, 388, 410, 411, 429, 449, 466, 510, 516, 522, 525, 526, 529, 535, 538, 547, 550, 563, 566, 571, 574, 579, 582, 586, 590, 594, 612, 615, 616, 619, 648, 651, 652, 655, 660, 663, 684, 703, 706, 707, 710, 715, 718, 727, 730, 750, 753, 754, 800, 801, 803, 828, 844, 876, 880, 882, 897, 898, 901, 906, 908, 915, 917, 940, 942, 962, 963, 966, 980, 983, 1002, 1005, 1049, 1055, 1057, 1066, 1067, 1068, 1070, 1082, 1099, 1102, 1103, 1106, 1107, 1111, 1114], "preced": [175, 375], "mention": [175, 351, 352, 358, 361, 368, 369], "aros": 175, "70": [175, 876, 912, 914, 1082, 1083, 1086, 1110], "80": [175, 876, 912, 914, 1082, 1083, 1086, 1110], "90": [175, 184, 294, 336, 337, 516, 575, 578, 711, 714, 876, 912, 914, 1051, 1053, 1082, 1083, 1086, 1110], "effort": [175, 350, 388], "stage": [175, 350, 352, 354, 355, 1124], "complet": [175, 179, 180, 352, 353, 364, 365, 373, 374, 876, 918, 920], "natur": [175, 358, 364, 365, 387, 516, 604, 648, 651, 656, 659, 876, 885, 921], "like": [175, 351, 352, 354, 355, 356, 357, 358, 360, 367, 368, 369, 370, 371, 373, 374, 375, 376, 387, 388, 828, 844, 1049, 1055, 1057, 1124], "certainli": 175, "mission": [175, 1124], "creat": [175, 179, 180, 350, 351, 352, 354, 366, 367, 368, 371, 372, 375, 386, 387, 410, 411, 412, 413, 414, 415, 417, 418, 419, 420, 422, 423, 424, 427, 428, 466, 475, 476, 754, 782, 783, 786, 807, 810, 811, 822, 828, 860, 1049, 1050, 1051, 1052, 1055, 1057, 1124, 1130, 1134, 1135, 1136, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168], "At": [175, 353], "process": [175, 176, 350, 351, 352, 354, 361, 365, 371, 376, 466, 475, 476, 505, 515], "ourselv": 175, "lead": [175, 176, 179, 180, 181, 182, 183, 388, 876, 918, 920, 925], "quansight": 175, "compani": 175, "made": [175, 352, 353, 365, 368, 371, 373], "organ": [175, 356, 361, 364, 365], "panda": 175, "scipi": 175, "conda": [175, 351, 354], "dask": [175, 1066, 1067, 1068, 1070], "apach": 175, "onnx": 175, "scikit": 175, "jupyt": 175, "aw": 175, "cupi": 175, "net": [175, 176, 371, 376], "sympi": 175, "rai": [175, 516, 547, 550], "modin": 175, "spyder": 175, "includ": [175, 179, 180, 352, 353, 356, 357, 358, 359, 360, 361, 362, 364, 365, 366, 367, 368, 369, 387, 388, 410, 411, 412, 422, 754, 793, 827, 876, 940, 942, 1026, 1027, 1049, 1055, 1057, 1061, 1063, 1082, 1087, 1090, 1091, 1094, 1095, 1098, 1099, 1102, 1103, 1106, 1107, 1111, 1114, 1115, 1116, 1119, 1120, 1123, 1127, 1129, 1145, 1155, 1156, 1159, 1160], "member": [175, 352], "googl": [175, 1124], "octoml": 175, "einop": [175, 179, 180, 754, 776, 777, 778], "further": [175, 176, 352, 354, 358, 364, 370, 374, 375, 1124], "sponsor": 175, "lg": 175, "electron": 175, "microsoft": 175, "d": [175, 176, 184, 294, 336, 337, 350, 351, 355, 365, 374, 754, 763, 771, 863, 864, 865, 866, 867, 868, 869, 870, 876, 886, 888, 912, 914, 1051, 1053, 1124, 1130], "shaw": 175, "intel": 175, "togeth": [175, 179, 180, 364, 365, 375, 376, 388, 1167, 1168], "major": [175, 366, 367, 388, 1061, 1064], "involv": [175, 350, 354, 355, 366, 376, 429, 457, 516, 530, 686, 689, 1124, 1130], "anoth": [175, 179, 180, 351, 352, 361, 365, 366, 373, 376, 410, 416, 429, 436, 438, 441], "promis": 175, "pursuit": 175, "unif": [175, 350, 373, 1124, 1130], "clearli": [175, 353, 358], "lot": [175, 176, 363, 373, 388], "thought": [175, 351, 352, 369], "care": [175, 352, 376], "attent": [175, 352, 364, 365, 863, 874, 875, 1145, 1156], "gone": [175, 370], "simplifi": [175, 371, 372, 373, 375], "compat": [175, 369, 388, 429, 437, 516, 530, 533, 547, 550, 555, 558, 563, 566, 567, 570, 571, 574, 575, 578, 591, 594, 596, 599, 607, 615, 616, 619, 623, 624, 627, 640, 643, 644, 647, 664, 667, 668, 671, 676, 679, 680, 683, 686, 689, 695, 698, 703, 706, 707, 710, 735, 739, 876, 897, 906, 908, 915, 917, 922, 924, 931, 933, 937, 939, 940, 942, 962, 992, 995, 1061, 1063, 1082, 1087, 1090, 1091, 1094, 1095, 1098, 1099, 1102, 1103, 1106, 1107, 1111, 1114, 1115, 1116, 1119, 1120, 1123, 1124], "excit": [175, 350, 355, 1124], "complianc": 175, "hope": [175, 388], "due": [175, 351, 365, 368, 516, 686, 689], "suit": [175, 351, 355, 359, 360, 374, 387], "some": [175, 176, 179, 180, 351, 352, 353, 356, 357, 358, 361, 364, 365, 366, 367, 368, 369, 372, 373, 374, 375, 387, 388, 516, 608, 611, 828, 830, 833, 835, 837, 840, 842, 845, 847, 849, 851, 853, 855, 861, 863, 871, 1124, 1145, 1153], "motiv": [175, 373], "great": [175, 176, 360, 371, 373], "convinc": 175, "celebr": 175, "encourag": [175, 387, 388, 1124, 1130], "foundat": 175, "point": [176, 352, 357, 358, 364, 368, 369, 371, 373, 374, 387, 409, 410, 411, 413, 415, 417, 423, 427, 429, 435, 449, 454, 457, 516, 522, 525, 526, 529, 530, 533, 535, 538, 539, 542, 543, 546, 547, 550, 551, 554, 575, 578, 579, 582, 583, 586, 587, 590, 591, 604, 607, 608, 611, 612, 648, 651, 652, 655, 660, 663, 664, 667, 686, 689, 703, 706, 707, 710, 711, 714, 719, 722, 723, 726, 727, 730, 740, 744, 745, 749, 750, 753, 876, 877, 879, 883, 889, 891, 892, 894, 895, 897, 906, 908, 915, 917, 918, 920, 922, 924, 925, 940, 942, 1066, 1067, 1068, 1070, 1082, 1087, 1090, 1091, 1094, 1095, 1098, 1099, 1102, 1103, 1106, 1107, 1111, 1114], "mai": [176, 351, 352, 365, 373, 375, 410, 411, 416, 466, 511, 516, 596, 599, 623, 624, 627, 644, 647, 672, 675, 676, 679, 754, 775, 1066, 1067, 1068, 1070, 1071, 1072, 1075, 1077, 1080, 1082, 1087, 1090, 1091, 1094, 1095, 1098], "ask": [176, 371, 373, 388, 1124], "perfectli": 176, "happi": [176, 351, 388], "abund": 176, "better": [176, 355, 370, 373, 374, 375], "ll": [176, 350, 352, 358, 365, 368, 374], "give": [176, 351, 352, 355, 357, 358, 362, 369, 373, 962, 992, 995], "two": [176, 181, 182, 184, 357, 358, 360, 364, 365, 370, 374, 376, 410, 411, 415, 421, 425, 426, 429, 456, 461, 516, 571, 574, 711, 714, 754, 762, 876, 877, 879, 883, 885, 886, 888, 889, 891, 892, 894, 895, 897, 898, 901, 902, 904, 906, 908, 909, 911, 912, 914, 915, 917, 918, 920, 921, 922, 924, 925, 927, 928, 930, 934, 936, 937, 939, 962, 1010, 1013, 1066, 1067, 1068, 1069, 1070, 1124], "streamlin": 176, "workflow": [176, 352, 374, 386, 1124], "save": [176, 179, 180, 388, 754, 815, 1157, 1158], "week": [176, 352, 353, 1124], "let": [176, 357, 358, 365, 366, 367, 371, 373, 374, 375, 376, 1082, 1091, 1094, 1103, 1106, 1107, 1111, 1114, 1124], "sai": [176, 351, 363, 373], "deepmind": 176, "releas": [176, 351, 353, 1124], "awesom": 176, "paper": 176, "love": 176, "choic": [176, 351, 368, 374, 1082, 1103, 1106, 1111, 1114], "perceiverio": 176, "happen": [176, 351, 352, 374], "slew": 176, "rush": 176, "f": [176, 354, 355, 365, 371, 374, 376, 516, 620, 754, 795, 799], "g": [176, 355, 365, 388, 429, 434, 457, 466, 482, 1049, 1054, 1055, 1057, 1066, 1067, 1068, 1070, 1082, 1087, 1090, 1095, 1098, 1099, 1102, 1107], "inevit": 176, "deviat": [176, 1044, 1045, 1048, 1049, 1054, 1082, 1103, 1106, 1159, 1160], "origin": [176, 179, 180, 181, 182, 183, 362, 363, 366, 371, 373, 516, 547, 550, 876, 902, 904, 962, 992, 995, 996, 999], "often": [176, 361, 388], "erron": 176, "train": [176, 361, 365, 367, 374, 375, 376, 386, 387, 388, 828, 830, 833, 835, 837, 845, 847, 1124], "poor": 176, "converg": 176, "perform": [176, 179, 180, 356, 358, 360, 361, 362, 364, 365, 367, 368, 369, 371, 374, 388, 399, 404, 410, 419, 420, 466, 754, 772, 776, 777, 778, 796, 797, 798, 828, 835, 837, 840, 842, 845, 847, 849, 851, 853, 855, 863, 871, 873, 876, 925, 1022, 1023, 1024, 1025, 1026, 1033, 1034, 1115, 1116, 1119, 1120, 1123], "issu": [176, 350, 353, 371, 373, 375, 388], "publish": [176, 388], "manag": [176, 350, 368, 388, 466], "get": [176, 179, 180, 350, 351, 353, 355, 361, 366, 367, 368, 371, 372, 373, 374, 375, 429, 447, 448, 449, 452, 466, 475, 476, 485, 486, 499, 500, 505, 509, 512, 515, 754, 761, 788, 789, 790, 809, 1124, 1130, 1145, 1154], "work": [176, 351, 352, 353, 355, 360, 365, 366, 367, 370, 371, 372, 373, 375, 376, 1124, 1130], "repositori": [176, 351, 352, 354, 359], "pull": [176, 350, 351, 354, 356, 388], "request": [176, 350, 356, 466, 502], "confus": [176, 368], "do": [176, 179, 180, 351, 352, 353, 356, 357, 358, 361, 362, 363, 364, 365, 366, 367, 368, 369, 371, 373, 374, 375, 376, 388, 516, 707, 710, 754, 798, 828, 844, 861, 1026, 1027, 1036, 1037, 1038], "expect": [176, 388, 754, 761, 1124], "codebas": [176, 350, 355, 356, 368, 370, 466, 508, 509, 1124], "total": [176, 179, 180, 181, 182, 183, 350, 352, 358, 360, 367, 374, 375, 388, 466, 512, 1061, 1064, 1082, 1103, 1106, 1111, 1114], "hour": 176, "spent": 176, "spin": 176, "off": [176, 370, 876, 886, 888, 934, 936], "test": [176, 351, 353, 355, 358, 388, 429, 454, 455, 516, 628, 631, 632, 635, 636, 639, 1115, 1116, 1119, 1120, 1123], "error": [176, 179, 180, 351, 360, 364, 367, 369, 373, 388, 399, 400, 466, 516, 600, 603, 1082, 1087, 1090, 1095, 1098, 1157, 1158, 1161, 1165], "address": [176, 352, 353, 364, 371], "sake": 176, "singl": [176, 179, 180, 352, 356, 358, 360, 361, 363, 365, 368, 369, 371, 374, 375, 376, 388, 466, 475, 476, 495, 496, 497, 498, 754, 824, 827, 1049, 1054, 1055, 1057, 1066, 1067], "multipl": [176, 179, 180, 184, 193, 280, 281, 285, 288, 294, 296, 318, 319, 320, 321, 332, 333, 336, 337, 352, 358, 361, 365, 388, 516, 534, 664, 686, 689, 754, 755, 757, 758, 759, 783, 787, 804, 876, 895, 962, 963, 966, 967, 996, 999, 1000, 1001, 1044, 1045, 1048, 1051, 1053, 1061, 1062, 1063, 1082, 1087, 1090, 1091, 1094, 1095, 1098, 1099, 1102, 1103, 1106, 1107, 1111, 1114, 1115, 1116, 1119, 1120, 1123, 1145, 1155], "line": [176, 351, 358, 364, 372, 373, 374, 375, 386, 1124, 1130], "directli": [176, 352, 356, 357, 361, 364, 365, 366, 367, 368, 369, 371, 373, 375, 376, 387, 388, 1026, 1038], "graph": [176, 361, 365, 372, 388, 828, 835, 837, 840, 842, 845, 847, 849, 851, 853, 855, 1066, 1067, 1068, 1070, 1157, 1158], "guarante": [176, 364, 388, 1066, 1067], "turn": [176, 358, 365], "take": [176, 350, 351, 352, 357, 358, 360, 365, 366, 367, 371, 373, 375, 376, 388, 516, 575, 578, 1124, 1130], "few": [176, 352, 353, 361, 365, 366, 367, 368, 372, 373, 374, 375, 386, 1124, 1130], "second": [176, 351, 358, 368, 373, 429, 456, 461, 466, 497, 516, 530, 533, 555, 558, 563, 566, 567, 570, 571, 574, 575, 578, 594, 596, 599, 607, 615, 616, 619, 623, 624, 627, 640, 643, 644, 647, 664, 667, 668, 671, 676, 679, 680, 683, 686, 689, 695, 698, 703, 706, 735, 739, 754, 762, 809, 814, 828, 830, 833, 835, 837, 845, 847, 876, 880, 882, 886, 888, 889, 891, 898, 901, 912, 914, 918, 920, 925, 931, 933, 937, 939, 962, 1006, 1009, 1010, 1013, 1022, 1024, 1066, 1067, 1068, 1161, 1162, 1163], "automat": [176, 351, 352, 361, 365, 369, 370, 371, 372, 375, 376, 1124], "everyon": [176, 350, 352, 388], "regardless": [176, 179, 180, 350, 373, 376, 407, 408], "wouldn": 176, "nice": [176, 360], "write": [176, 179, 180, 352, 353, 354, 355, 356, 357, 358, 360, 361, 362, 368, 371, 373, 376, 399, 400, 401, 402, 403, 404, 405, 406, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 423, 424, 425, 426, 427, 428, 429, 435, 437, 466, 511, 516, 517, 520, 522, 525, 526, 529, 530, 533, 535, 538, 539, 542, 543, 546, 547, 550, 551, 554, 555, 558, 559, 562, 563, 566, 567, 570, 571, 574, 575, 578, 579, 582, 583, 586, 587, 590, 591, 594, 596, 599, 600, 603, 604, 607, 608, 611, 612, 615, 616, 619, 620, 623, 624, 627, 628, 631, 632, 635, 636, 639, 640, 643, 644, 647, 648, 651, 652, 655, 656, 659, 660, 663, 664, 667, 668, 671, 672, 675, 676, 679, 680, 683, 684, 685, 686, 689, 691, 694, 695, 698, 699, 702, 703, 706, 707, 710, 711, 714, 715, 718, 719, 722, 723, 726, 727, 730, 731, 734, 735, 739, 740, 744, 745, 749, 750, 753, 754, 766, 767, 769, 772, 773, 776, 777, 778, 780, 782, 783, 786, 794, 807, 810, 811, 828, 858, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 874, 875, 876, 877, 879, 880, 882, 883, 885, 886, 888, 892, 894, 895, 897, 898, 901, 902, 904, 906, 908, 909, 911, 912, 914, 915, 917, 921, 922, 924, 925, 927, 928, 930, 931, 933, 934, 936, 937, 939, 940, 942, 943, 945, 946, 947, 950, 952, 955, 957, 960, 962, 963, 966, 968, 971, 972, 975, 976, 979, 980, 983, 984, 987, 988, 991, 992, 995, 996, 999, 1002, 1005, 1006, 1009, 1010, 1013, 1014, 1017, 1018, 1021, 1044, 1045, 1048, 1049, 1050, 1051, 1052, 1054, 1055, 1057, 1060, 1061, 1065, 1066, 1070, 1071, 1072, 1075, 1077, 1080, 1082, 1083, 1086, 1087, 1090, 1091, 1094, 1095, 1098, 1099, 1102, 1103, 1106, 1107, 1110, 1111, 1114, 1115, 1116, 1119, 1120, 1123], "onc": [176, 351, 352, 365, 366, 367, 371, 374, 388, 466, 510, 876, 895, 925, 1049, 1050], "know": [176, 352, 1066, 1067, 1068, 1070], "among": [176, 179, 180, 360], "frantic": 176, "port": 176, "lucid": 176, "honk": 176, "improv": [176, 352, 361, 371], "understand": [176, 351, 352, 353, 354, 355, 357, 358, 359, 369, 370], "pattern": [176, 179, 180, 357, 366, 754, 776, 777, 778], "hasn": 176, "now": [176, 179, 180, 351, 354, 356, 363, 365, 366, 369, 373, 374, 376, 387, 388, 1145, 1156, 1157, 1158], "spend": 176, "torchvis": 176, "probabl": [176, 863, 871, 1049, 1050, 1145, 1153], "sonnet": 176, "about": [176, 351, 352, 359, 370, 371, 375, 376, 388, 429, 449, 452], "next": [176, 351, 352, 353, 354, 357, 358, 362, 363, 373, 374, 429, 449, 1124, 1157, 1158, 1161, 1162, 1163, 1164, 1165, 1166], "everyth": [176, 352, 353, 372, 388], "zero": [176, 179, 180, 181, 182, 358, 364, 365, 366, 367, 369, 371, 374, 375, 399, 401, 402, 410, 413, 415, 421, 425, 426, 428, 429, 435, 516, 530, 535, 538, 563, 566, 587, 608, 611, 612, 672, 675, 676, 679, 684, 685, 686, 689, 691, 694, 695, 698, 703, 706, 707, 710, 711, 714, 727, 730, 731, 734, 740, 745, 754, 772, 807, 810, 811, 828, 830, 833, 835, 837, 845, 847, 849, 851, 863, 871, 876, 883, 897, 898, 901, 906, 908, 915, 917, 937, 939, 940, 942, 962, 976, 979, 980, 983, 988, 991, 996, 999, 1018, 1021, 1044, 1045, 1048, 1049, 1051, 1052, 1061, 1062, 1063, 1064, 1066, 1067, 1068, 1070, 1082, 1087, 1090, 1091, 1094, 1095, 1098, 1099, 1102, 1103, 1106, 1107, 1111, 1114, 1115, 1116, 1119, 1120, 1123, 1124, 1136, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1155, 1161, 1162, 1163, 1164], "need": [176, 351, 352, 353, 354, 356, 357, 358, 359, 361, 364, 365, 368, 371, 373, 374, 387, 388, 754, 766, 767, 769, 962, 963, 966, 976, 979], "said": 176, "high": [176, 179, 180, 184, 262, 294, 295, 336, 337, 353, 374, 1049, 1051, 1052, 1053, 1055, 1056, 1057, 1058], "level": [176, 350, 353, 361, 370, 371, 374, 375, 376, 388], "optim": [176, 368, 372, 374, 376, 387, 466, 828, 835, 837, 840, 842, 845, 847, 849, 851, 853, 855, 1022, 1023, 1024, 1025, 1124, 1162, 1163, 1164, 1166], "trainer": [176, 386, 388, 1124], "statu": 176, "quo": 176, "kera": 176, "dopamin": 176, "ignit": 176, "catalyst": 176, "lightn": 176, "fastai": 176, "haiku": [176, 376], "flax": [176, 376, 388], "trax": [176, 376], "objax": [176, 376], "idea": [176, 387], "fulli": [176, 364, 365, 369, 371, 372, 373, 374, 375, 376, 388, 1145, 1155, 1156], "offer": [176, 375], "containerwithactiv": [177, 181, 182], "dict_in": [177, 178, 179, 180, 181, 182, 183, 184, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347], "queue": [177, 178, 179, 180, 181, 182, 183, 184, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 374, 466, 475, 476, 754, 809, 814], "queue_load_s": [177, 178, 179, 180, 181, 182, 183, 184, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347], "container_combine_method": [177, 178, 179, 180, 181, 182, 183, 184, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347], "list_join": [177, 178, 179, 180, 181, 182, 183, 184, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347], "queue_timeout": [177, 178, 179, 180, 181, 182, 183, 184, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 754], "print_limit": [177, 178, 179, 180, 181, 182, 183, 184, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347], "key_length_limit": [177, 178, 179, 180, 181, 182, 183, 184, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347], "print_ind": [177, 178, 179, 180, 181, 182, 183, 184, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347], "print_line_spac": [177, 178, 179, 180, 181, 182, 183, 184, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347], "ivyh": [177, 178, 179, 180, 181, 182, 183, 184, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347], "default_key_color": [177, 178, 179, 180, 181, 182, 183, 184, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347], "green": [177, 178, 179, 180, 181, 182, 183, 184, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 351, 352, 1170, 1171], "keyword_color_dict": [177, 178, 179, 180, 181, 182, 183, 184, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347], "rebuild_child_contain": [177, 178, 179, 180, 181, 182, 183, 184, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347], "types_to_iteratively_nest": [177, 178, 179, 180, 181, 182, 183, 184, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347], "alphabetical_kei": [177, 178, 179, 180, 181, 182, 183, 184, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347], "containerbas": [177, 178, 179, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 365], "__getitem__": [179, 180, 365], "queri": [179, 180, 365, 366, 373, 466, 499, 509, 863, 874, 875, 1145, 1156], "slice": [179, 180, 754, 782, 783, 786, 1026, 1035], "chain": [179, 180, 364, 365, 375, 376, 388, 1022, 1023, 1024, 1026, 1039, 1167, 1168], "element": [179, 180, 357, 371, 376, 399, 400, 401, 402, 403, 404, 405, 406, 410, 411, 417, 418, 425, 426, 466, 489, 493, 497, 516, 517, 520, 522, 525, 526, 529, 530, 533, 535, 538, 539, 542, 543, 546, 547, 550, 551, 554, 555, 558, 559, 562, 563, 566, 567, 570, 571, 574, 575, 578, 579, 582, 583, 586, 587, 590, 591, 594, 596, 599, 600, 603, 604, 607, 608, 611, 612, 615, 616, 619, 620, 623, 624, 627, 628, 631, 632, 635, 636, 639, 640, 643, 644, 647, 648, 651, 652, 655, 656, 659, 660, 663, 664, 667, 668, 671, 672, 675, 676, 679, 680, 683, 684, 685, 686, 689, 691, 694, 695, 698, 699, 702, 703, 706, 707, 710, 711, 714, 715, 718, 719, 722, 723, 726, 727, 730, 731, 734, 735, 739, 740, 744, 745, 749, 750, 753, 754, 762, 763, 766, 767, 769, 772, 773, 780, 794, 823, 824, 863, 871, 876, 880, 882, 889, 891, 898, 901, 918, 920, 925, 962, 963, 966, 980, 983, 988, 991, 996, 999, 1001, 1002, 1005, 1049, 1050, 1061, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1077, 1080, 1082, 1083, 1086, 1087, 1090, 1091, 1094, 1095, 1098, 1099, 1102, 1103, 1106, 1107, 1110, 1111, 1114, 1115, 1116, 1119, 1120, 1123, 1145, 1153], "represent": [179, 180, 181, 182, 183, 387, 409, 429, 433, 434, 449, 452, 466, 482, 483, 516, 517, 520, 530, 555, 558, 567, 570, 575, 578, 680, 683, 686, 689, 754, 760, 817, 822], "dictionari": [179, 180, 181, 182, 183, 374, 388, 466, 509], "around": [179, 180, 181, 182, 183, 352, 361, 364, 369, 373, 388], "sequenc": [179, 180, 181, 182, 183, 358, 366, 387, 407, 408, 466, 475, 476, 754, 763, 804, 962, 1001, 1006, 1009, 1049, 1051, 1052, 1082, 1087, 1090, 1145, 1154, 1159, 1160, 1167, 1168], "multiprocess": [179, 180, 181, 182, 183, 374, 388, 466, 475, 754], "asynchron": [179, 180, 181, 182, 183], "wait": [179, 180, 181, 182, 183, 352], "size": [179, 180, 181, 182, 183, 373, 374, 410, 419, 420, 466, 508, 509, 510, 754, 810, 816, 863, 875, 876, 886, 888, 902, 904, 912, 914, 918, 920, 925, 937, 939, 962, 976, 979, 996, 999, 1001, 1002, 1005, 1049, 1050, 1054, 1055, 1057, 1061, 1062, 1064, 1115, 1116, 1119, 1120, 1123, 1145, 1146, 1147], "dimens": [179, 180, 181, 182, 183, 358, 371, 374, 399, 404, 410, 425, 426, 466, 497, 754, 776, 777, 778, 781, 791, 807, 826, 863, 864, 865, 866, 867, 868, 869, 870, 873, 876, 877, 879, 880, 882, 883, 886, 888, 889, 891, 892, 894, 895, 897, 898, 901, 902, 904, 906, 908, 909, 911, 915, 917, 918, 920, 922, 924, 925, 927, 928, 930, 934, 936, 937, 939, 940, 942, 946, 952, 955, 957, 960, 962, 968, 971, 976, 979, 980, 983, 984, 987, 988, 991, 992, 995, 996, 999, 1001, 1002, 1005, 1006, 1009, 1022, 1023, 1024, 1025, 1049, 1060, 1061, 1062, 1063, 1064, 1066, 1067, 1068, 1070, 1082, 1083, 1086, 1087, 1090, 1091, 1094, 1095, 1098, 1099, 1102, 1103, 1106, 1107, 1110, 1111, 1114, 1115, 1116, 1119, 1120, 1123, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1155, 1156], "combin": [179, 180, 181, 182, 183, 352, 358, 360, 361, 364, 365, 376, 876, 880, 882], "arriv": [179, 180, 181, 182, 183], "timeout": [179, 180, 181, 182, 183, 466, 475, 476, 754, 809, 814], "limit": [179, 180, 181, 182, 183, 352, 358, 360, 371, 374, 376, 388, 429, 449, 452, 754, 766, 767, 769, 962, 963, 966], "maximum": [179, 180, 181, 182, 183, 358, 371, 374, 376, 466, 490, 494, 498, 510, 516, 754, 766, 767, 769, 781, 828, 845, 847, 962, 963, 966, 1026, 1038, 1061, 1062, 1082, 1087, 1090, 1095, 1098, 1124], "length": [179, 180, 181, 182, 183, 374, 410, 411, 421, 876, 925, 927, 928, 930, 962, 992, 995], "whitespac": [179, 180, 181, 182, 183], "indent": [179, 180, 181, 182, 183, 374], "extra": [179, 180, 181, 182, 183, 358, 363, 364, 371, 828, 839], "newlin": [179, 180, 181, 182, 183, 357], "handl": [179, 180, 181, 182, 183, 355, 360, 361, 363, 365, 366, 367, 368, 369, 375, 388, 407, 408, 466, 482, 483, 484, 485, 486, 500, 504, 505, 512, 515, 828, 835, 837, 840, 842, 845, 847, 849, 851, 853, 855, 1161, 1162, 1163, 1164, 1165, 1166], "result": [179, 180, 181, 182, 183, 356, 357, 358, 360, 364, 365, 366, 368, 369, 374, 388, 399, 400, 401, 402, 403, 404, 405, 406, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 423, 424, 425, 426, 427, 428, 429, 435, 437, 457, 466, 475, 511, 516, 517, 520, 522, 525, 526, 529, 530, 533, 535, 538, 539, 542, 543, 546, 547, 550, 551, 554, 555, 558, 559, 562, 563, 566, 567, 570, 571, 574, 575, 578, 579, 582, 583, 586, 587, 590, 591, 594, 596, 599, 600, 603, 604, 607, 608, 611, 612, 615, 616, 619, 620, 623, 624, 627, 628, 631, 632, 635, 636, 639, 640, 643, 644, 647, 648, 651, 652, 655, 656, 659, 660, 663, 664, 667, 668, 671, 672, 675, 676, 679, 680, 683, 684, 685, 686, 689, 691, 694, 695, 698, 699, 702, 703, 706, 707, 710, 711, 714, 715, 718, 719, 722, 723, 726, 727, 730, 731, 734, 735, 739, 740, 744, 745, 749, 750, 753, 754, 766, 767, 769, 772, 773, 776, 777, 778, 780, 782, 783, 786, 794, 807, 810, 811, 828, 858, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 874, 875, 876, 877, 879, 880, 882, 883, 885, 886, 888, 892, 894, 895, 897, 898, 901, 902, 904, 906, 908, 909, 911, 912, 914, 915, 917, 921, 922, 924, 925, 927, 928, 930, 931, 933, 934, 936, 937, 939, 940, 942, 943, 945, 946, 947, 950, 952, 955, 957, 960, 962, 963, 966, 968, 971, 972, 975, 976, 979, 980, 983, 984, 987, 988, 991, 992, 995, 996, 999, 1002, 1005, 1006, 1009, 1010, 1013, 1014, 1017, 1018, 1021, 1026, 1039, 1044, 1045, 1048, 1049, 1050, 1051, 1052, 1054, 1055, 1057, 1060, 1061, 1062, 1063, 1065, 1066, 1067, 1070, 1071, 1072, 1075, 1077, 1080, 1082, 1083, 1086, 1087, 1090, 1091, 1094, 1095, 1098, 1099, 1102, 1103, 1106, 1107, 1110, 1111, 1114, 1115, 1116, 1119, 1120, 1123, 1124], "color": [179, 180, 181, 182, 183, 1170, 1171], "termin": [179, 180, 181, 182, 183, 351, 352, 354, 365, 371, 374], "map": [179, 180, 181, 182, 183, 360, 361, 365, 369, 374, 387, 388, 466, 475, 1026, 1033, 1034, 1038, 1039, 1145, 1156], "termcolor": [179, 180, 181, 182, 183], "rebuild": [179, 180, 181, 182, 183], "found": [179, 180, 181, 182, 183, 351, 352, 357, 364, 365, 466, 500], "constructor": [179, 180, 181, 182, 183, 366, 367, 373, 754, 761, 1167, 1168], "param": [179, 180, 181, 182, 183, 184, 288, 320, 321, 371, 376, 754, 760, 782, 783, 786, 787], "kept": [179, 180, 181, 182, 183, 352, 368, 1022, 1023, 1024], "structur": [179, 180, 181, 182, 183, 354, 356, 361, 364, 365, 374, 375, 754, 770, 1026, 1039], "alphabet": [179, 180, 181, 182, 183], "preserv": [179, 180, 181, 182, 183, 376, 388, 828, 858, 962, 980, 983], "__setitem__": [179, 180, 364, 365, 373], "val": [179, 180, 368, 373, 754, 796, 797, 798, 812, 813], "after": [179, 180, 358, 365, 366, 370, 429, 461, 516, 727, 730, 828, 835, 837, 839, 840, 842, 845, 847, 849, 851, 853, 855, 1044, 1045, 1048, 1161, 1162, 1163, 1164, 1165, 1166], "updat": [179, 180, 351, 352, 353, 354, 355, 358, 359, 363, 364, 365, 366, 369, 371, 373, 374, 376, 388, 466, 475, 754, 798, 810, 811, 828, 830, 833, 835, 837, 840, 842, 845, 847, 849, 851, 853, 855, 863, 873, 1022, 1023, 1024, 1026, 1033, 1034, 1042, 1043, 1134, 1135, 1161, 1162, 1163, 1164, 1165, 1166], "all_fals": [179, 180], "assert_is_bool": [179, 180], "key_chain": [179, 180, 181, 182, 184, 185, 186, 187, 189, 190, 192, 193, 194, 195, 196, 197, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 314, 315, 318, 319, 320, 321, 322, 323, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 342, 343, 344, 345, 346, 347, 438, 440, 442, 517, 519, 521, 524, 525, 526, 528, 532, 533, 534, 535, 537, 539, 541, 545, 546, 547, 549, 551, 553, 555, 557, 559, 561, 563, 565, 567, 569, 571, 573, 575, 577, 579, 581, 585, 586, 589, 590, 593, 594, 595, 598, 599, 600, 602, 606, 607, 608, 610, 614, 615, 616, 618, 622, 623, 624, 626, 628, 630, 632, 634, 636, 638, 640, 642, 644, 646, 648, 650, 652, 654, 656, 658, 660, 662, 664, 666, 668, 670, 672, 674, 676, 678, 680, 682, 686, 688, 690, 691, 693, 695, 697, 699, 701, 703, 705, 707, 709, 711, 713, 715, 717, 719, 721, 723, 725, 727, 729, 731, 733, 735, 736, 738, 741, 743, 744, 746, 748, 749, 750, 752, 755, 757, 759, 767, 768, 783, 785, 787, 835, 836, 838, 840, 841, 843, 845, 846, 848, 849, 850, 852, 853, 854, 856, 898, 900, 947, 949, 951, 952, 954, 956, 957, 959, 961, 963, 965, 967, 968, 970, 972, 974, 976, 978, 980, 982, 984, 986, 988, 990, 992, 994, 996, 998, 1000, 1002, 1004, 1006, 1008, 1010, 1012, 1014, 1016, 1018, 1020, 1026, 1039, 1045, 1047, 1051, 1053, 1055, 1056, 1058, 1072, 1074, 1076, 1077, 1079, 1081, 1083, 1085, 1087, 1089, 1091, 1093, 1095, 1097, 1099, 1101, 1103, 1105, 1109, 1110, 1111, 1113, 1116, 1118, 1120, 1122], "to_appli": [179, 180, 181, 182, 184, 185, 186, 187, 189, 190, 192, 193, 194, 195, 196, 197, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 314, 315, 318, 319, 320, 321, 322, 323, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 342, 343, 344, 345, 346, 347, 438, 440, 442, 517, 519, 521, 524, 525, 526, 528, 532, 533, 534, 535, 537, 539, 541, 545, 546, 547, 549, 551, 553, 555, 557, 559, 561, 563, 565, 567, 569, 571, 573, 575, 577, 579, 581, 585, 586, 589, 590, 593, 594, 595, 598, 599, 600, 602, 606, 607, 608, 610, 614, 615, 616, 618, 622, 623, 624, 626, 628, 630, 632, 634, 636, 638, 640, 642, 644, 646, 648, 650, 652, 654, 656, 658, 660, 662, 664, 666, 668, 670, 672, 674, 676, 678, 680, 682, 686, 688, 690, 691, 693, 695, 697, 699, 701, 703, 705, 707, 709, 711, 713, 715, 717, 719, 721, 723, 725, 727, 729, 731, 733, 735, 736, 738, 741, 743, 744, 746, 748, 749, 750, 752, 755, 757, 759, 767, 768, 783, 785, 787, 835, 836, 838, 840, 841, 843, 845, 846, 848, 849, 850, 852, 853, 854, 856, 898, 900, 947, 949, 951, 952, 954, 956, 957, 959, 961, 963, 965, 967, 968, 970, 972, 974, 976, 978, 980, 982, 984, 986, 988, 990, 992, 994, 996, 998, 1000, 1002, 1004, 1006, 1008, 1010, 1012, 1014, 1016, 1018, 1020, 1026, 1039, 1045, 1047, 1055, 1056, 1058, 1072, 1074, 1076, 1077, 1079, 1081, 1083, 1085, 1087, 1089, 1091, 1093, 1095, 1097, 1099, 1101, 1103, 1105, 1109, 1110, 1111, 1113, 1116, 1118, 1120, 1122], "prune_unappli": [179, 180, 181, 182, 184, 185, 186, 187, 189, 190, 192, 193, 194, 195, 196, 197, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 314, 315, 318, 319, 320, 321, 322, 323, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 342, 343, 344, 345, 346, 347, 438, 440, 442, 517, 519, 521, 524, 525, 526, 528, 532, 533, 534, 535, 537, 539, 541, 545, 546, 547, 549, 551, 553, 555, 557, 559, 561, 563, 565, 567, 569, 571, 573, 575, 577, 579, 581, 585, 586, 589, 590, 593, 594, 595, 598, 599, 600, 602, 606, 607, 608, 610, 614, 615, 616, 618, 622, 623, 624, 626, 628, 630, 632, 634, 636, 638, 640, 642, 644, 646, 648, 650, 652, 654, 656, 658, 660, 662, 664, 666, 668, 670, 672, 674, 676, 678, 680, 682, 686, 688, 690, 691, 693, 695, 697, 699, 701, 703, 705, 707, 709, 711, 713, 715, 717, 719, 721, 723, 725, 727, 729, 731, 733, 735, 736, 738, 741, 743, 744, 746, 748, 749, 750, 752, 755, 757, 759, 767, 768, 783, 785, 787, 835, 836, 838, 840, 841, 843, 845, 846, 848, 849, 850, 852, 853, 854, 856, 898, 900, 947, 949, 951, 952, 954, 956, 957, 959, 961, 963, 965, 967, 968, 970, 972, 974, 976, 978, 980, 982, 984, 986, 988, 990, 992, 994, 996, 998, 1000, 1002, 1004, 1006, 1008, 1010, 1012, 1014, 1016, 1018, 1020, 1026, 1039, 1045, 1047, 1055, 1056, 1058, 1072, 1074, 1076, 1077, 1079, 1081, 1083, 1085, 1087, 1089, 1091, 1093, 1095, 1097, 1099, 1101, 1103, 1105, 1109, 1110, 1111, 1113, 1116, 1118, 1120, 1122], "map_sequ": [179, 180, 181, 182, 184, 185, 186, 187, 189, 190, 192, 193, 194, 195, 196, 197, 200, 202, 203, 205, 210, 211, 212, 213, 215, 216, 217, 218, 219, 220, 222, 223, 224, 225, 226, 227, 229, 230, 233, 234, 235, 236, 237, 238, 241, 242, 243, 244, 247, 251, 252, 253, 254, 255, 257, 258, 259, 261, 262, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 277, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 314, 315, 318, 319, 320, 321, 322, 323, 330, 331, 332, 333, 334, 335, 336, 337, 342, 343, 344, 345, 346, 347, 438, 440, 442, 517, 519, 521, 524, 525, 526, 528, 532, 533, 534, 535, 537, 539, 541, 545, 546, 551, 553, 559, 561, 579, 581, 585, 586, 589, 590, 593, 595, 600, 602, 606, 608, 610, 614, 615, 616, 628, 630, 632, 634, 636, 638, 648, 650, 652, 654, 656, 658, 660, 662, 664, 672, 674, 686, 688, 690, 691, 693, 699, 701, 711, 713, 715, 717, 719, 721, 723, 725, 727, 729, 731, 733, 735, 736, 738, 741, 743, 744, 746, 748, 749, 750, 752, 755, 757, 759, 767, 768, 783, 785, 787, 835, 836, 838, 840, 841, 843, 845, 846, 848, 849, 850, 852, 853, 854, 856, 947, 949, 951, 952, 954, 956, 957, 959, 961, 963, 965, 967, 972, 974, 976, 978, 980, 982, 984, 986, 988, 990, 992, 994, 996, 998, 1000, 1002, 1004, 1010, 1012, 1014, 1016, 1018, 1020, 1045, 1047, 1055, 1056, 1058, 1072, 1074, 1076, 1077, 1079, 1081, 1083, 1085, 1087, 1089, 1091, 1093, 1095, 1097, 1099, 1101, 1103, 1105, 1109, 1110, 1111, 1113, 1116, 1118, 1120, 1122], "entri": [179, 180, 410, 419, 420, 962, 1001, 1026, 1039], "boolean": [179, 180, 365, 410, 417, 429, 435, 453, 465, 466, 501, 513, 516, 555, 558, 559, 562, 567, 570, 575, 578, 668, 671, 672, 675, 676, 679, 680, 683, 754, 755, 758, 762, 763, 793, 794, 795, 799, 800, 801, 802, 803, 820, 827, 828, 844, 1022, 1023, 1024, 1026, 1036, 1082, 1095, 1098], "evalu": [179, 180, 365, 516, 604, 608, 611, 648, 651, 652, 655, 656, 659, 660, 663, 691, 694, 715, 718, 731, 734, 1026, 1027, 1036, 1037, 1115, 1116, 1119, 1120, 1123], "assert": [179, 180, 373, 374, 754, 764], "skip": [179, 180, 354, 360, 1026, 1039], "prune": [179, 180, 1026, 1039, 1040, 1041], "all_key_chain": [179, 180], "include_empti": [179, 180], "all_tru": [179, 180, 365, 374], "arrays_as_list": [179, 180], "intermedi": [179, 180], "as_arrai": [179, 180, 754, 791, 816], "as_bool": [179, 180], "as_on": [179, 180], "ones": [179, 180, 181, 182, 360, 371, 373, 374, 410, 415, 424, 516, 579, 582, 754, 807, 1124], "sub": [179, 180, 352, 353, 355, 360, 365, 373, 374, 375, 466, 491, 492, 495, 496, 497, 498, 876, 886, 888, 962, 1001, 1022, 1023, 1024, 1025, 1124], "fill": [179, 180, 410, 413, 417, 418, 423, 424, 427, 428, 1049, 1051, 1052], "as_random_uniform": [179, 180], "low": [179, 180, 184, 262, 294, 295, 336, 337, 371, 1049, 1051, 1052, 1053, 1055, 1056, 1057, 1058], "uniform": [179, 180, 375, 1049, 1050, 1051, 1052, 1055, 1057, 1136, 1138, 1139, 1142, 1143], "lower": [179, 180, 352, 358, 371, 388, 410, 415, 425, 516, 684, 876, 877, 879, 1049, 1055, 1057], "boundari": [179, 180, 1049, 1055, 1057], "output": [179, 180, 351, 355, 356, 357, 358, 360, 361, 364, 365, 367, 368, 369, 371, 373, 375, 376, 388, 399, 400, 401, 402, 403, 404, 405, 406, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 423, 424, 425, 426, 427, 428, 429, 435, 437, 466, 475, 476, 510, 511, 516, 517, 520, 522, 525, 526, 529, 530, 533, 535, 538, 539, 542, 543, 546, 547, 550, 551, 554, 555, 558, 559, 562, 563, 566, 567, 570, 571, 574, 575, 578, 579, 582, 583, 586, 587, 590, 591, 594, 596, 599, 600, 603, 604, 607, 608, 611, 612, 615, 616, 619, 620, 623, 624, 627, 628, 631, 632, 635, 636, 639, 640, 643, 644, 647, 648, 651, 652, 655, 656, 659, 660, 663, 664, 667, 668, 671, 672, 675, 676, 679, 680, 683, 684, 685, 686, 689, 691, 694, 695, 698, 699, 702, 703, 706, 707, 710, 711, 714, 715, 718, 719, 722, 723, 726, 727, 730, 731, 734, 735, 739, 740, 744, 745, 749, 750, 753, 754, 765, 766, 767, 769, 772, 773, 776, 777, 778, 780, 782, 783, 786, 794, 807, 810, 811, 828, 839, 858, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 879, 880, 882, 883, 885, 886, 888, 892, 894, 895, 897, 898, 901, 902, 904, 906, 908, 909, 911, 912, 914, 915, 917, 921, 922, 924, 925, 927, 928, 930, 931, 933, 934, 936, 937, 939, 940, 942, 943, 945, 946, 947, 950, 952, 955, 957, 960, 962, 963, 966, 968, 971, 972, 975, 976, 979, 980, 983, 984, 987, 988, 991, 992, 995, 996, 999, 1002, 1005, 1006, 1009, 1010, 1013, 1014, 1017, 1018, 1021, 1026, 1039, 1044, 1045, 1048, 1049, 1050, 1051, 1052, 1054, 1055, 1057, 1060, 1061, 1065, 1071, 1072, 1075, 1077, 1080, 1082, 1083, 1086, 1087, 1090, 1091, 1094, 1095, 1098, 1099, 1102, 1103, 1106, 1107, 1110, 1111, 1114, 1115, 1116, 1119, 1120, 1123, 1124, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1153, 1154, 1155, 1156], "interv": [179, 180, 371, 376, 410, 411, 419, 420, 876, 937, 939, 962, 963, 966, 1006, 1009, 1049, 1051, 1052, 1055, 1057, 1115, 1116, 1119, 1120, 1123], "as_vari": [179, 180], "as_zero": [179, 180], "assert_contains_sub_contain": [179, 180], "sub_cont": [179, 180], "partial": [179, 180, 352, 1157, 1158], "except": [179, 180, 357, 364, 368, 373, 388, 429, 437, 754, 764, 775, 798, 825, 876, 897, 915, 917, 962, 968, 971, 1006, 1009, 1061, 1064, 1115, 1116, 1119, 1120, 1123], "diff": [179, 180, 365, 374], "screen": [179, 180, 374], "assert_contains_sub_structur": [179, 180], "check_shap": [179, 180], "static": [179, 180, 184, 191, 277, 280, 281, 284, 285, 288, 294, 296, 300, 301, 314, 315, 318, 319, 320, 321, 322, 323, 330, 331, 332, 333, 336, 337, 342, 343, 348, 349, 353, 357, 358, 361, 388, 407, 408, 438, 442, 517, 521, 534, 546, 551, 664, 741, 746, 749, 755, 759, 783, 787, 963, 967, 996, 1000, 1051, 1053], "assert_ident": [179, 180], "check_typ": [179, 180], "same_arrai": [179, 180, 374], "arrays_equ": [179, 180, 181, 182, 754], "datatyp": [179, 180, 410, 412, 422, 429, 443, 454, 455, 456], "exact": [179, 180, 352, 371, 1066, 1067], "assert_identical_structur": [179, 180], "at_key_chain": [179, 180], "ignore_key_error": [179, 180], "ignore_non": [179, 180], "at_kei": [179, 180], "ignor": [179, 180, 358, 388, 410, 421, 1026, 1037, 1161, 1165], "substr": [179, 180], "access": [179, 180, 352, 354, 366], "clip_min": [179, 180], "clip_max": [179, 180], "minimum": [179, 180, 371, 376, 466, 516, 517, 520, 754, 789, 790, 812, 813, 818, 819, 962, 963, 966, 1061, 1063, 1082, 1087, 1090, 1095, 1098, 1124], "config": [179, 180, 374, 1026, 1039], "right": [179, 180, 350, 351, 352, 355, 358, 374, 516, 563, 566, 571, 574, 876, 925], "duplic": [179, 180, 357, 362, 363, 373, 375], "compar": [179, 180, 360, 374, 754, 755, 758, 762, 763, 1066, 1067, 1068, 1070, 1071, 1072, 1075, 1077, 1080], "configur": [179, 180, 351, 352, 354, 366, 466, 509, 1026, 1039], "container_rightmost": [179, 180], "common_key_chain": [179, 180, 365], "across": [179, 180, 353, 358, 360, 361, 365, 366, 369, 466, 475, 476, 487, 488, 490, 491, 492, 493, 494, 498, 508, 509, 754, 762, 763, 1026, 1032, 1061, 1063], "properti": [179, 180, 358, 360, 361, 365, 373, 374, 375, 466, 478, 1157, 1158, 1161, 1162, 1163, 1164, 1166], "contains_sub_contain": [179, 180], "match": [179, 180, 365, 429, 435, 516, 707, 710, 754, 804], "contains_sub_structur": [179, 180], "copi": [179, 180, 354, 357, 362, 366, 371, 373, 374, 387, 388, 410, 412, 416, 429, 435, 466, 511, 754, 771, 823, 824, 962, 992, 995, 1026, 1028, 1071, 1077, 1080], "create_if_abs": [179, 180], "inplac": [179, 180, 184, 189, 230, 236, 237, 257, 279, 289, 290, 291, 293, 322, 323, 355, 358, 363, 364, 369, 373, 375, 754, 764, 795, 798, 799, 820, 828, 835, 836, 837, 838, 840, 841, 842, 843, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 1134, 1135, 1161, 1162, 1163, 1164, 1165, 1166], "correspond": [179, 180, 181, 182, 184, 352, 357, 358, 359, 361, 364, 365, 366, 369, 429, 436, 516, 547, 550, 703, 706, 876, 880, 882, 889, 891, 922, 924, 962, 968, 971, 996, 999, 1049, 1050, 1061, 1062, 1063, 1066, 1067, 1068, 1070, 1082, 1099, 1102, 1103, 1106, 1107, 1111, 1114], "alreadi": [179, 180, 351, 352, 362, 365, 369, 373, 388, 466, 516, 579, 582, 612, 686, 689, 711, 714, 750, 753, 876, 912, 914, 1124], "noth": [179, 180, 352], "cutoff_at_depth": [179, 180], "depth_cutoff": [179, 180], "summari": [179, 180, 352, 429, 444, 445, 446, 458, 459, 460, 466, 479, 480, 754, 770, 774, 792, 828, 857, 862], "cutoff_at_height": [179, 180], "height_cutoff": [179, 180], "deep_copi": [179, 180, 374], "intern": [179, 180, 357, 364, 365, 367, 368, 466, 828, 861, 1026, 1027, 1036, 1037, 1136, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1167, 1168], "dev": [179, 180, 181, 183, 184, 198, 351, 361, 367, 371, 373, 375, 466, 475, 500], "belong": [179, 180, 375], "dev_clon": [179, 180, 466], "clone": [179, 180, 352, 354, 466, 487, 488, 489, 490], "dev_dist": [179, 180, 466], "distribut": [179, 180, 353, 367, 388, 466, 487, 491, 492, 493, 494, 863, 871, 946, 947, 950, 952, 955, 957, 960, 1049, 1050, 1051, 1052, 1054, 1055, 1057, 1145, 1153, 1157, 1158], "along": [179, 180, 356, 368, 410, 419, 420, 466, 491, 492, 493, 494, 495, 496, 497, 498, 510, 754, 772, 773, 782, 826, 876, 902, 904, 934, 936, 937, 939, 940, 942, 946, 952, 955, 957, 960, 962, 968, 971, 980, 983, 988, 991, 996, 999, 1001, 1006, 1009, 1014, 1017, 1022, 1023, 1024, 1025, 1049, 1060, 1061, 1062, 1063, 1071, 1072, 1075, 1077, 1080, 1082, 1083, 1086, 1087, 1090, 1091, 1094, 1095, 1098, 1099, 1102, 1103, 1106, 1107, 1110, 1111, 1114, 1115, 1116, 1119, 1120, 1123], "split": [179, 180, 350, 352, 370, 371, 388, 466, 475, 491, 492, 493, 494, 508, 509, 510, 754, 804, 962, 1124], "dev_str": [179, 180], "diff_kei": [179, 180], "detect_key_diff": [179, 180], "detect_value_diff": [179, 180], "detect_shape_diff": [179, 180], "thei": [179, 180, 353, 355, 356, 358, 361, 363, 365, 366, 367, 368, 373, 374, 375, 376, 388, 429, 456, 1022, 1023, 1024, 1049, 1050, 1124, 1167, 1168], "treat": [179, 180, 372, 376, 407, 408], "detect": [179, 180, 369, 374, 375, 1026, 1027, 1037], "without": [179, 180, 352, 356, 361, 364, 365, 367, 369, 371, 373, 374, 375, 387, 388, 754, 809, 814, 962, 992, 995, 1026, 1028, 1066, 1067, 1068, 1070], "flag": [179, 180, 352, 368, 373, 466, 485, 828, 844], "container0": [179, 180], "einops_rearrang": [179, 180, 754], "axes_length": [179, 180, 754, 776, 777, 778], "rearrang": [179, 180, 754, 776, 778], "addit": [179, 180, 351, 352, 356, 357, 360, 365, 366, 373, 374, 376, 466, 511, 516, 530, 754, 776, 777, 778, 1044, 1045, 1048, 1145, 1155], "einops_reduc": [179, 180, 754], "reduct": [179, 180, 366, 373, 754, 777, 810, 811, 1115, 1116, 1119, 1120, 1123, 1124], "One": [179, 180, 366, 371, 373, 374, 754, 777, 962, 992, 995, 1049, 1051, 1052], "callabl": [179, 180, 365, 371, 389, 390, 391, 392, 393, 394, 395, 396, 397, 407, 408, 429, 450, 451, 466, 510, 754, 760, 765, 775, 777, 1022, 1023, 1024, 1025, 1026, 1032, 1036, 1037, 1038], "einops_repeat": [179, 180, 754], "find_sub_contain": [179, 180], "sub_cont_to_find": [179, 180], "exsit": [179, 180], "find_sub_structur": [179, 180], "sub_struc_to_find": [179, 180], "flatten_key_chain": [179, 180, 374, 1157, 1158], "__": [179, 180, 358, 374], "above_height": [179, 180, 374], "below_depth": [179, 180, 374], "format_key_chain": [179, 180], "format_fn": [179, 180], "format": [179, 180, 354, 357, 366, 367, 371, 373, 374, 429, 447, 466, 486, 1082, 1083, 1086, 1110, 1124], "string": [179, 180, 362, 366, 367, 371, 374, 429, 433, 434, 447, 453, 465, 466, 482, 483, 484, 485, 499, 505, 511, 512, 515, 754, 774], "from_disk_as_hdf5": [179, 180, 374], "h5_obj_or_filepath": [179, 180], "slice_obj": [179, 180], "load": [179, 180, 388], "disk": [179, 180, 374], "h5py": [179, 180], "file": [179, 180, 351, 352, 354, 356, 357, 361, 362, 364, 365, 371, 374, 754, 815, 1157, 1158], "hdf5": [179, 180, 374, 1157, 1158], "filepath": [179, 180, 352], "h5": [179, 180], "from_disk_as_json": [179, 180, 374], "json_filepath": [179, 180], "json": [179, 180, 374], "were": [179, 180, 352, 356, 360, 365], "abl": [179, 180, 351, 352, 361, 366, 368, 373, 376], "dure": [179, 180, 361, 365, 366, 367, 368, 388, 407, 408, 466, 511, 754, 825, 828, 830, 833, 835, 837, 845, 847, 876, 898, 901, 1022, 1023, 1024, 1025, 1082, 1103, 1106, 1111, 1114, 1157, 1158, 1161, 1162, 1163, 1165], "from_disk_as_pickl": [179, 180, 374], "pickle_filepath": [179, 180], "pickl": [179, 180, 365, 374], "from_flat_list": [179, 180], "flat_list": [179, 180], "hierarchi": [179, 180, 374], "flat": [179, 180, 754, 810, 962, 988, 991], "popul": [179, 180, 366, 367, 371, 1049, 1050, 1082, 1103, 1106, 1111, 1114], "from_numpi": [179, 180, 374], "gather": [179, 180, 754, 783, 786], "accord": [179, 180, 351, 354, 361, 366, 429, 438, 441, 449, 516, 530, 571, 574, 686, 689, 754, 782, 810, 811, 876, 937, 939, 962, 972, 975, 1018, 1021, 1082, 1103, 1106, 1111, 1114], "index": [179, 180, 354, 361, 365, 373, 409, 410, 415, 421, 466, 507, 754, 760, 782, 783, 786, 962, 1006, 1009, 1026, 1029, 1030, 1033, 1034, 1035, 1040, 1042, 1061, 1062, 1063, 1064, 1066, 1067, 1068, 1071, 1072, 1075, 1127, 1129], "h5_file_s": [179, 180], "content": [179, 180, 353, 354, 368, 371, 374], "batch": [179, 180, 361, 365, 374, 466, 508, 509, 754, 781, 863, 872, 876, 940, 942, 1022, 1023, 1024, 1025, 1044, 1045, 1048, 1159, 1160], "handle_inplac": [179, 180], "prime": [179, 180], "overwritten": [179, 180, 362, 364], "has_kei": [179, 180], "query_kei": [179, 180], "somewher": [179, 180], "has_key_chain": [179, 180], "has_nan": [179, 180, 754], "include_inf": [179, 180, 754, 793, 827], "leafwis": [179, 180], "nan": [179, 180, 356, 357, 409, 429, 435, 516, 517, 520, 522, 525, 526, 529, 530, 533, 535, 538, 539, 542, 543, 547, 550, 579, 582, 583, 586, 587, 590, 604, 607, 608, 611, 612, 628, 631, 636, 639, 648, 651, 652, 655, 660, 663, 664, 667, 686, 689, 703, 706, 707, 710, 711, 714, 719, 722, 723, 726, 727, 730, 740, 745, 750, 753, 754, 793, 827, 863, 875, 1066, 1067, 1068, 1070, 1082, 1087, 1090, 1091, 1094, 1095, 1098, 1103, 1106, 1107, 1111, 1114, 1115, 1116, 1119, 1120, 1123], "well": [179, 180, 360, 368, 375, 376, 387, 754, 793, 876, 922, 924], "inf": [179, 180, 409, 754, 793, 827, 876, 940, 942], "wise": [179, 180, 371, 376, 399, 400, 401, 402, 403, 404, 405, 406, 516, 517, 520, 522, 530, 533, 535, 538, 543, 547, 550, 555, 558, 559, 562, 563, 566, 567, 570, 571, 574, 575, 578, 591, 594, 596, 599, 600, 603, 607, 615, 616, 619, 620, 623, 624, 627, 640, 643, 644, 647, 664, 667, 668, 671, 672, 675, 676, 679, 680, 683, 684, 685, 686, 689, 695, 698, 703, 706, 707, 710, 735, 739, 754, 780, 962, 963, 966], "identical_array_shap": [179, 180], "exclus": [179, 180, 361, 365, 376, 410, 411, 754, 772, 800, 801, 803, 828, 844, 1049, 1051, 1052], "identical_config": [179, 180], "identical_structur": [179, 180], "if_exist": [179, 180], "inplace_upd": [179, 180, 368, 754, 1134, 1135], "key_chains_contain": [179, 180], "sub_str": [179, 180], "join": [179, 180, 962, 968, 971, 1006, 1009, 1124], "list_stack": [179, 180, 374], "dim": [179, 180, 366, 754, 807, 1145, 1156], "func": [179, 180, 365, 407, 408, 466, 510, 754, 765, 828, 839, 1026, 1039], "map_cont": [179, 180], "include_self": [179, 180], "possibi": [179, 180], "place": [179, 180, 352, 355, 356, 357, 358, 360, 361, 365, 367, 369, 376, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 438, 441, 466, 511, 516, 517, 520, 530, 535, 538, 555, 558, 575, 578, 579, 582, 587, 612, 695, 698, 711, 714, 727, 730, 731, 734, 740, 745, 754, 782, 796, 797, 798, 863, 866, 875, 876, 883, 962, 976, 979, 980, 983, 996, 999, 1044, 1045, 1048, 1066, 1067, 1068, 1071, 1072, 1075, 1082, 1087, 1090, 1115, 1116, 1119, 1161, 1162, 1163, 1164, 1165, 1166], "matrix": [179, 180, 410, 421, 425, 426, 754, 755, 758, 766, 863, 872, 876, 877, 879, 883, 886, 888, 889, 891, 892, 894, 895, 897, 898, 901, 902, 904, 905, 906, 908, 909, 911, 915, 917, 918, 920, 922, 924, 925, 927, 928, 930, 934, 936, 943, 945, 1145, 1155], "p": [179, 180, 184, 213, 320, 321, 351, 352, 410, 421, 754, 766, 767, 768, 769, 863, 871, 876, 902, 904, 940, 942, 1145, 1153], "integ": [179, 180, 365, 366, 373, 410, 411, 417, 429, 452, 455, 457, 516, 517, 520, 555, 558, 559, 562, 563, 566, 567, 570, 571, 574, 575, 578, 579, 582, 594, 612, 615, 616, 619, 680, 683, 703, 706, 707, 710, 711, 714, 750, 753, 876, 905, 937, 939, 940, 942, 962, 1001, 1049, 1051, 1052, 1059, 1082, 1087, 1090, 1091, 1094, 1095, 1098, 1099, 1102, 1103, 1106, 1107, 1111, 1114, 1115, 1116, 1119, 1120, 1123], "flatten": [179, 180, 754, 781, 876, 912, 914, 940, 942, 962, 988, 991, 996, 999, 1061, 1062, 1063, 1066, 1067, 1068, 1070], "left": [179, 180, 351, 352, 358, 366, 516, 563, 566, 876, 889, 891, 902, 904, 925, 1061, 1062, 1124], "broadcast": [179, 180, 356, 357, 358, 365, 366, 399, 400, 401, 402, 403, 404, 405, 406, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 423, 424, 425, 426, 427, 428, 429, 435, 436, 437, 466, 511, 516, 517, 520, 522, 525, 526, 529, 530, 533, 535, 538, 539, 542, 543, 546, 547, 550, 551, 554, 555, 558, 559, 562, 563, 566, 567, 570, 571, 574, 575, 578, 579, 582, 583, 586, 587, 590, 591, 594, 596, 599, 600, 603, 604, 607, 608, 611, 612, 615, 616, 619, 620, 623, 624, 627, 628, 631, 632, 635, 636, 639, 640, 643, 644, 647, 648, 651, 652, 655, 656, 659, 660, 663, 664, 667, 668, 671, 672, 675, 676, 679, 680, 683, 684, 685, 686, 689, 691, 694, 695, 698, 699, 702, 703, 706, 707, 710, 711, 714, 715, 718, 719, 722, 723, 726, 727, 730, 731, 734, 735, 739, 740, 744, 745, 749, 750, 753, 754, 766, 767, 769, 772, 776, 777, 778, 780, 783, 786, 794, 807, 810, 811, 828, 858, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 874, 875, 876, 877, 879, 880, 882, 883, 885, 886, 888, 892, 894, 895, 897, 898, 901, 902, 904, 906, 908, 909, 911, 912, 914, 915, 917, 921, 922, 924, 925, 927, 928, 930, 931, 933, 934, 936, 937, 939, 940, 942, 943, 945, 946, 947, 950, 952, 955, 957, 960, 962, 963, 966, 968, 971, 972, 975, 976, 979, 980, 983, 984, 987, 988, 991, 992, 995, 996, 999, 1002, 1005, 1006, 1009, 1010, 1013, 1014, 1017, 1018, 1021, 1044, 1045, 1048, 1049, 1050, 1051, 1052, 1054, 1055, 1057, 1060, 1061, 1062, 1063, 1065, 1066, 1070, 1071, 1077, 1080, 1082, 1087, 1090, 1091, 1094, 1095, 1098, 1099, 1102, 1103, 1106, 1107, 1111, 1114, 1115, 1116, 1119, 1120, 1123], "correctli": [179, 180, 351, 360, 365, 366, 369, 375, 388, 876, 902, 904, 1061, 1062], "max_depth": [179, 180, 466, 470, 473, 480, 490, 494, 498, 754, 792, 1026, 1038], "multi_map": [179, 180, 365], "map_nest": [179, 180, 184, 201, 204, 206, 207, 208, 209, 214, 221, 228, 231, 232, 239, 240, 245, 246, 248, 249, 250, 256, 260, 263, 276, 318, 319, 328, 329, 332, 333, 533, 547, 549, 555, 557, 563, 565, 567, 569, 571, 573, 575, 577, 594, 598, 599, 607, 615, 616, 618, 622, 623, 624, 626, 640, 642, 644, 646, 664, 666, 668, 670, 676, 678, 680, 682, 695, 697, 703, 705, 707, 709, 898, 900, 968, 970, 1006, 1008], "leftmost": [179, 180, 1026, 1039], "multi_map_in_static_method": [179, 180, 365], "fn_name": [179, 180], "num_arrai": [179, 180], "overwrite_at_key_chain": [179, 180], "overwrit": [179, 180, 368, 371, 466, 510], "target_dict": [179, 180], "return_dict": [179, 180], "prune_empti": [179, 180], "keep_non": [179, 180], "empti": [179, 180, 181, 182, 364, 366, 367, 410, 411, 1082, 1103, 1106, 1107, 1115, 1116, 1119, 1120, 1123], "prune_key_chain": [179, 180], "key1": [179, 180, 375], "key2": [179, 180], "key3": [179, 180], "prune_key_from_key_chain": [179, 180], "absolut": [179, 180, 350, 516, 517, 520, 876, 885, 921], "certain": [179, 180, 351, 388, 410, 411, 419, 420], "decid": [179, 180, 351, 1026, 1037], "remov": [179, 180, 352, 353, 354, 357, 360, 361, 366, 368, 376, 876, 886, 888, 898, 901, 934, 936, 962, 1002, 1005, 1022, 1023, 1024], "prune_kei": [179, 180], "prune_keys_from_key_chain": [179, 180], "remove_key_length_limit": [179, 180], "remove_print_limit": [179, 180], "reshape_lik": [179, 180], "leading_shap": [179, 180], "return_cont": [179, 180], "restructur": [179, 180], "keep_orig": [179, 180], "transpos": [179, 180, 373, 376, 466, 497, 863, 865, 867, 869, 876, 897, 909, 911, 915, 917, 1124, 1145, 1147, 1149, 1151], "old": [179, 180, 351, 368], "keep": [179, 180, 351, 352, 359, 365, 372, 374, 376, 754, 826], "start": [179, 180, 350, 351, 352, 353, 354, 355, 357, 358, 366, 370, 371, 373, 374, 375, 387, 388, 410, 411, 419, 420, 466, 481], "restructure_key_chain": [179, 180], "keychain_map": [179, 180], "set_at_key_chain": [179, 180], "set_at_kei": [179, 180], "set_framework": [179, 180, 371, 373, 374, 376], "set_ivy_backend": [179, 180], "ivy_backend": [179, 180], "attribut": [179, 180, 357, 365, 366, 372, 373, 374, 375, 429, 449, 450, 451, 452, 466, 506], "show": [179, 180, 351, 352, 358, 368, 387, 388, 1124], "show_sub_contain": [179, 180], "sub_cont_or_keychain": [179, 180], "shuffl": [179, 180, 1049, 1124], "seed_valu": [179, 180, 1049, 1059], "align": [179, 180, 351, 371, 373, 1124, 1130], "seed": [179, 180, 181, 182, 1049, 1124], "shuffle_h5_fil": [179, 180], "dataset": [179, 180, 374, 386, 1124], "size_ordered_arrai": [179, 180], "keychain": [179, 180], "smallest": [179, 180, 429, 449, 452, 516, 579, 582], "largest": [179, 180, 387, 429, 449, 452, 876, 925], "slice_kei": [179, 180], "key_slic": [179, 180], "all_depth": [179, 180], "slice_via_kei": [179, 180], "sort_by_kei": [179, 180], "num_or_size_split": [179, 180, 371, 962, 1001], "with_remaind": [179, 180, 962, 1001], "constitu": [179, 180, 376], "dimension": [179, 180, 410, 411, 415, 421, 876, 880, 882, 883, 897, 898, 901, 906, 908, 912, 914, 915, 917, 937, 939, 940, 942, 962, 1001, 1061, 1062, 1063, 1064, 1082, 1087, 1090, 1091, 1094, 1095, 1098, 1099, 1102, 1103, 1106, 1107, 1111, 1114, 1115, 1116, 1119, 1120, 1123], "evenli": [179, 180, 410, 411, 419, 420, 962, 1001], "store": [179, 180, 357, 362, 364, 365, 371, 373, 374, 375, 754, 781, 828, 861, 876, 934, 936, 962, 1001, 1157, 1158], "stop_gradi": [179, 180, 181, 182, 184, 189, 230, 236, 237, 257, 279, 289, 290, 291, 293, 322, 323, 375, 466, 510, 828, 835, 836, 837, 838, 840, 841, 842, 843, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 1022, 1023, 1024, 1025, 1124, 1161, 1162, 1163, 1164, 1165, 1166], "preserve_typ": [179, 180, 828, 858], "stop": [179, 180, 371, 388, 410, 411, 419, 420, 466, 481, 510, 828, 835, 837, 840, 842, 845, 847, 849, 851, 853, 855, 858, 1022, 1023, 1024, 1025, 1161, 1162, 1163, 1164, 1165, 1166], "alwai": [179, 180, 352, 353, 356, 357, 361, 362, 364, 365, 368, 369, 371, 373, 388, 429, 435, 516, 530, 686, 689, 754, 798, 828, 844, 858], "structural_diff": [179, 180], "to_devic": [179, 180, 466, 485], "move": [179, 180, 352, 356, 466, 511], "cuda": [179, 180, 371, 374, 388, 410, 419, 420, 466, 475, 482, 507, 754, 782, 783, 786, 807, 810, 811, 1049, 1050, 1051, 1052, 1055, 1057, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1165, 1167, 1168], "cpu": [179, 180, 352, 367, 388, 410, 419, 420, 466, 485, 486, 488, 502, 505, 507, 511, 512, 514, 515, 754, 782, 783, 786, 807, 810, 811, 1049, 1050, 1051, 1052, 1054, 1055, 1057, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1165, 1167, 1168], "target": [179, 180, 355, 370, 374, 375, 376, 466, 484, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 1124], "to_dict": [179, 180], "to_disk_as_hdf5": [179, 180, 374], "starting_index": [179, 180], "max_batch_s": [179, 180], "read": [179, 180, 354, 1124], "r": [179, 180, 351, 754, 763, 826, 876, 918, 920, 943, 945], "w": [179, 180, 184, 279, 289, 290, 291, 293, 322, 323, 371, 374, 375, 754, 763, 828, 830, 833, 835, 837, 838, 840, 842, 843, 845, 847, 848, 849, 851, 852, 853, 855, 856, 863, 864, 865, 866, 867, 868, 869, 870], "later": [179, 180, 754, 765], "append": [179, 180, 354, 360, 371, 374, 516, 563, 566, 876, 886, 888, 898, 901], "to_disk_as_json": [179, 180, 374], "to_disk_as_pickl": [179, 180, 374], "to_flat_list": [179, 180], "to_iter": [179, 180, 365], "leaf_keys_onli": [179, 180], "to_iterator_kei": [179, 180], "to_iterator_valu": [179, 180], "to_json": [179, 180], "to_list": [179, 180, 754, 1124], "to_multi_dev": [179, 180], "multidevcontain": [179, 180, 181], "distributedarrai": [179, 180], "to_numpi": [179, 180, 374, 754, 1124], "update_backend": [179, 180], "to_raw": [179, 180], "raw": [179, 180, 357], "trim_kei": [179, 180], "max_length": [179, 180], "try_kc": [179, 180], "tri": [179, 180], "arbitrari": [179, 180, 360, 361, 365, 368, 369, 375, 388, 410, 421, 429, 436, 457, 466, 495, 496, 498], "concatten": [179, 180, 466, 495, 496, 497, 498, 510], "unstack": [179, 180, 371, 374, 754, 1124], "dim_siz": [179, 180, 466], "update_config": [179, 180], "global_norm": [179, 180, 184, 213, 320, 321, 767, 768], "vector": [179, 180, 387, 410, 421, 754, 767, 769, 863, 872, 876, 880, 882, 889, 891, 898, 901, 912, 914, 925, 927, 928, 930, 937, 939, 940, 942, 943, 945, 1145, 1155], "with_default_key_color": [179, 180], "with_entries_as_list": [179, 180], "with_ivy_backend": [179, 180], "with_key_length_limit": [179, 180, 374], "with_print_ind": [179, 180, 374], "with_print_limit": [179, 180, 374], "with_print_line_spac": [179, 180], "containerwithcr": [181, 182, 312], "containerwithdatatyp": [181, 182, 314], "containerwithdevic": [181, 182, 316], "containerwithelementwis": [181, 182, 318, 365], "containerwithgener": [181, 182, 320], "containerwithgradi": [181, 182, 322], "containerwithimag": [181, 182, 324], "containerwithlay": [181, 182, 326], "containerwithlinearalgebra": [181, 182, 328], "containerwithloss": [181, 182, 330], "containerwithmanipul": [181, 182, 332, 353], "containerwithnorm": [181, 182, 334], "containerwithrandom": [181, 182, 336], "containerwithsearch": [181, 182, 338], "containerwithset": [181, 182, 340], "containerwithsort": [181, 182, 342], "containerwithstatist": [181, 182, 344], "containerwithutil": [181, 182, 346], "__add__": [181, 182, 184, 357, 358, 364, 365, 369, 373], "special": [181, 182, 184, 353, 356, 357, 358, 364, 369, 516, 517, 520, 522, 525, 526, 529, 530, 533, 535, 538, 539, 542, 543, 547, 550, 575, 578, 579, 582, 583, 586, 587, 590, 604, 607, 608, 611, 612, 648, 651, 652, 655, 660, 663, 664, 667, 686, 689, 703, 706, 707, 710, 711, 714, 715, 718, 719, 722, 723, 726, 727, 730, 740, 745, 750, 753, 1082, 1087, 1090, 1091, 1094, 1095, 1098, 1103, 1106, 1107, 1111, 1114], "__radd__": [181, 182, 184, 357, 358], "revers": [181, 182, 184, 353, 357, 358, 376, 388, 754, 775, 962, 980, 983], "arang": [181, 182, 366, 410, 419, 420, 1082, 1083, 1086, 1110, 1124], "arg_info": [181, 182, 754], "arg_nam": [181, 182, 754], "argmax": [181, 182, 1061, 1124], "argmin": [181, 182, 1061, 1124], "array_equ": [181, 182, 754], "as_ivy_dev": [181, 182, 373, 466], "as_ivy_dtyp": [181, 182, 429], "as_native_dev": [181, 182, 466], "as_native_dtyp": [181, 182, 429], "asarrai": [181, 182, 368, 410, 863, 864, 1066, 1068], "assert_supports_inplac": [181, 182, 754], "astyp": [181, 182, 366, 368, 429], "broadcast_arrai": [181, 182, 429], "broadcast_to": [181, 182, 366, 429], "cache_fn": [181, 182, 361, 754], "clear_mem_on_dev": [181, 182, 466], "clip_matrix_norm": [181, 182, 754], "closest_valid_dtyp": [181, 182, 429], "container_typ": [181, 182, 754], "conv1d": [181, 182, 863, 1145], "conv1d_transpos": [181, 182, 863], "conv2d": [181, 182, 863, 1124, 1145], "conv2d_transpos": [181, 182, 863], "conv3d": [181, 182, 863, 1145], "conv3d_transpos": [181, 182, 863], "copy_arrai": [181, 182, 754], "cumprod": [181, 182, 376, 754], "cumsum": [181, 182, 754, 1124], "current_backend_str": [181, 182, 754], "default_devic": [181, 182, 367, 371, 466, 504, 507, 514], "default_dtyp": [181, 182, 361, 366, 429], "default_float_dtyp": [181, 182, 366, 429], "default_int_dtyp": [181, 182, 366, 429], "depthwise_conv2d": [181, 182, 863, 1124], "dev_clone_arrai": [181, 182, 466], "dev_clone_it": [181, 182, 466], "dev_clone_nest": [181, 182, 466], "dev_dist_arrai": [181, 182, 466], "dev_dist_it": [181, 182, 466], "dev_dist_nest": [181, 182, 466], "dev_unifi": [181, 182, 466], "dev_unify_arrai": [181, 182, 466], "dev_unify_it": [181, 182, 466], "dev_unify_nest": [181, 182, 466], "dev_util": [181, 182, 367, 466], "dropout": [181, 182, 374, 863, 1145, 1156], "dtype_bit": [181, 182, 429], "empty_lik": [181, 182, 410], "execute_with_gradi": [181, 182, 365, 374, 375, 376, 388, 828, 1124], "ey": [181, 182, 376, 410, 863, 866, 870], "finfo": [181, 182, 429], "floormod": [181, 182, 754, 1124], "fourier_encod": [181, 182, 754], "from_dlpack": [181, 182, 410], "full_lik": [181, 182, 410], "function_supported_dtyp": [181, 182, 429], "function_unsupported_dtyp": [181, 182, 429], "gelu": [181, 182, 399, 1131], "get_all_arrays_in_memori": [181, 182, 754], "get_all_ivy_arrays_on_dev": [181, 182, 367, 466], "get_min_bas": [181, 182, 754], "get_min_denomin": [181, 182, 754], "get_num_dim": [181, 182, 754, 1124], "get_referrers_recurs": [181, 182, 754], "gpu_is_avail": [181, 182, 466], "handle_nest": [181, 182, 361, 365, 389], "handle_out_argu": [181, 182, 363, 366, 367, 368, 369, 389], "iinfo": [181, 182, 429], "indices_wher": [181, 182, 754, 1124], "infer_devic": [181, 182, 366, 367, 369, 389], "infer_dtyp": [181, 182, 366, 367, 369, 389], "inplace_arrays_support": [181, 182, 754], "inplace_decr": [181, 182, 754], "inplace_incr": [181, 182, 754], "inplace_variables_support": [181, 182, 754], "inputs_to_native_arrai": [181, 182, 364, 389], "invalid_dtyp": [181, 182, 429], "is_float_dtyp": [181, 182, 429], "is_int_dtyp": [181, 182, 429, 754, 824], "is_ivy_contain": [181, 182, 754], "leaky_relu": [181, 182, 399, 1124], "linear": [181, 182, 357, 371, 374, 375, 376, 399, 400, 401, 402, 754, 781, 863, 871, 922, 924, 1124, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152], "linspac": [181, 182, 371, 410, 411, 1124], "logspac": [181, 182, 371, 410], "lstm_updat": [181, 182, 371, 863], "match_kwarg": [181, 182, 754], "matrix_pow": [181, 182, 876], "meshgrid": [181, 182, 410], "multi_head_attent": [181, 182, 365, 368, 863], "multinomi": [181, 182, 1049], "nonzero": [181, 182, 516, 530, 686, 689, 1061], "num_arrays_in_memori": [181, 182, 754], "num_cpu_cor": [181, 182, 367, 466], "num_gpu": [181, 182, 360, 367, 466], "num_ivy_arrays_on_dev": [181, 182, 466], "one_hot": [181, 182, 376, 754, 1124], "ones_lik": [181, 182, 376, 410, 1124], "outputs_to_ivy_arrai": [181, 182, 364, 366, 367, 369, 389], "percent_used_mem_on_dev": [181, 182, 466], "print_all_arrays_in_memori": [181, 182, 754], "print_all_ivy_arrays_on_dev": [181, 182, 466], "promote_typ": [181, 182, 429], "randint": [181, 182, 184, 294, 336, 337, 1049, 1053, 1124], "random_norm": [181, 182, 863, 866, 869, 870, 876, 925, 1049, 1066, 1067], "result_typ": [181, 182, 366, 429], "scaled_dot_product_attent": [181, 182, 863], "scatter_flat": [181, 182, 754], "scatter_nd": [181, 182, 373, 754, 1124], "set_default_devic": [181, 182, 367, 466, 514], "set_default_dtyp": [181, 182, 361, 366, 429], "set_default_float_dtyp": [181, 182, 366, 429], "set_default_int_dtyp": [181, 182, 366, 429], "set_min_bas": [181, 182, 754], "set_min_denomin": [181, 182, 754], "set_queue_timeout": [181, 182, 754], "set_split_factor": [181, 182, 466], "set_tmp_dir": [181, 182, 754], "set_with_grad": [181, 182, 828], "shape_to_tupl": [181, 182, 366, 754], "sigmoid": [181, 182, 371, 374, 375, 399, 1124], "slogdet": [181, 182, 876, 885], "softplu": [181, 182, 399, 1124], "split_factor": [181, 182, 466, 475], "split_func_cal": [181, 182, 466], "stable_divid": [181, 182, 361, 754], "stable_pow": [181, 182, 754], "static_aco": [181, 182], "static_acosh": [181, 182], "static_al": [181, 182], "static_ani": [181, 182], "static_arang": [181, 182], "static_arg_info": [181, 182], "static_arg_nam": [181, 182], "static_argmax": [181, 182], "static_argmin": [181, 182], "static_arrai": [181, 182], "static_array_equ": [181, 182], "static_arrays_equ": [181, 182], "static_as_ivy_dev": [181, 182], "static_as_ivy_dtyp": [181, 182], "static_as_native_dev": [181, 182], "static_as_native_dtyp": [181, 182], "static_asarrai": [181, 182], "static_asin": [181, 182], "static_asinh": [181, 182], "static_assert_supports_inplac": [181, 182], "static_astyp": [181, 182], "static_atan": [181, 182], "static_atan2": [181, 182], "static_atanh": [181, 182], "static_bitwise_and": [181, 182], "static_bitwise_invert": [181, 182], "static_bitwise_left_shift": [181, 182], "static_bitwise_or": [181, 182], "static_bitwise_right_shift": [181, 182], "static_bitwise_xor": [181, 182], "static_broadcast_arrai": [181, 182], "static_broadcast_to": [181, 182], "static_cache_fn": [181, 182], "static_ceil": [181, 182], "static_choleski": [181, 182], "static_clear_mem_on_dev": [181, 182], "static_clip_matrix_norm": [181, 182], "static_clip_vector_norm": [181, 182], "static_closest_valid_dtyp": [181, 182], "static_concat": [181, 182], "static_constant_pad": [181, 182], "static_container_typ": [181, 182], "static_conv1d": [181, 182], "static_conv1d_transpos": [181, 182], "static_conv2d": [181, 182], "static_conv2d_transpos": [181, 182], "static_conv3d": [181, 182], "static_conv3d_transpos": [181, 182], "static_copy_arrai": [181, 182], "static_co": [181, 182], "static_cosh": [181, 182], "static_cross": [181, 182], "static_cumprod": [181, 182], "static_cumsum": [181, 182], "static_current_backend": [181, 182], "static_current_backend_str": [181, 182], "static_default": [181, 182], "static_default_devic": [181, 182], "static_default_dtyp": [181, 182], "static_default_float_dtyp": [181, 182], "static_default_int_dtyp": [181, 182], "static_depthwise_conv2d": [181, 182], "static_det": [181, 182], "static_dev": [181, 182], "static_dev_clon": [181, 182], "static_dev_clone_arrai": [181, 182], "static_dev_clone_it": [181, 182], "static_dev_clone_nest": [181, 182], "static_dev_dist": [181, 182], "static_dev_dist_arrai": [181, 182], "static_dev_dist_it": [181, 182], "static_dev_dist_nest": [181, 182], "static_dev_unifi": [181, 182], "static_dev_unify_arrai": [181, 182], "static_dev_unify_it": [181, 182], "static_dev_unify_nest": [181, 182], "static_dev_util": [181, 182], "static_diagon": [181, 182], "static_dropout": [181, 182], "static_dtyp": [181, 182], "static_dtype_bit": [181, 182], "static_eigh": [181, 182], "static_eigvalsh": [181, 182], "static_einops_rearrang": [181, 182], "static_einops_reduc": [181, 182], "static_einops_repeat": [181, 182], "static_einsum": [181, 182], "static_empti": [181, 182], "static_empty_lik": [181, 182], "static_equ": [181, 182], "static_erf": [181, 182], "static_execute_with_gradi": [181, 182], "static_exist": [181, 182], "static_exp": [181, 182], "static_expand_dim": [181, 182], "static_expm1": [181, 182], "static_ey": [181, 182], "static_finfo": [181, 182], "static_flip": [181, 182], "static_floor": [181, 182], "static_floor_divid": [181, 182], "static_floormod": [181, 182], "static_fourier_encod": [181, 182], "static_from_dlpack": [181, 182], "static_ful": [181, 182], "static_full_lik": [181, 182], "static_function_supported_dtyp": [181, 182], "static_function_unsupported_dtyp": [181, 182], "static_gath": [181, 182], "static_gelu": [181, 182], "static_get_all_arrays_in_memori": [181, 182], "static_get_all_ivy_arrays_on_dev": [181, 182], "static_get_min_bas": [181, 182], "static_get_min_denomin": [181, 182], "static_get_num_dim": [181, 182], "static_get_referrers_recurs": [181, 182], "static_gpu_is_avail": [181, 182], "static_great": [181, 182], "static_greater_equ": [181, 182], "static_handle_nest": [181, 182], "static_handle_out_argu": [181, 182], "static_has_nan": [181, 182], "static_iinfo": [181, 182], "static_indices_wher": [181, 182], "static_infer_devic": [181, 182], "static_infer_dtyp": [181, 182], "static_inplace_arrays_support": [181, 182], "static_inplace_decr": [181, 182], "static_inplace_incr": [181, 182], "static_inplace_upd": [181, 182], "static_inplace_variables_support": [181, 182], "static_inputs_to_native_arrai": [181, 182], "static_inv": [181, 182], "static_invalid_dtyp": [181, 182], "static_is_arrai": [181, 182], "static_is_float_dtyp": [181, 182], "static_is_int_dtyp": [181, 182], "static_is_ivy_arrai": [181, 182], "static_is_ivy_contain": [181, 182], "static_is_native_arrai": [181, 182], "static_is_vari": [181, 182], "static_isfinit": [181, 182], "static_isinf": [181, 182], "static_isnan": [181, 182], "static_layer_norm": [181, 182], "static_leaky_relu": [181, 182], "static_less": [181, 182], "static_less_equ": [181, 182], "static_linear": [181, 182], "static_linspac": [181, 182], "static_log": [181, 182], "static_log10": [181, 182], "static_log1p": [181, 182], "static_log2": [181, 182], "static_logaddexp": [181, 182], "static_logical_and": [181, 182], "static_logical_not": [181, 182], "static_logical_or": [181, 182], "static_logical_xor": [181, 182], "static_logspac": [181, 182], "static_lstm_upd": [181, 182], "static_match_kwarg": [181, 182], "static_matmul": [181, 182], "static_matrix_norm": [181, 182], "static_matrix_pow": [181, 182], "static_matrix_rank": [181, 182], "static_matrix_transpos": [181, 182], "static_max": [181, 182], "static_maximum": [181, 182], "static_mean": [181, 182], "static_meshgrid": [181, 182], "static_min": [181, 182], "static_minimum": [181, 182], "static_multi_head_attent": [181, 182], "static_multinomi": [181, 182], "static_multiprocess": [181, 182], "static_native_arrai": [181, 182], "static_neg": [181, 182], "static_nonzero": [181, 182], "static_not_equ": [181, 182], "static_num_arrays_in_memori": [181, 182], "static_num_cpu_cor": [181, 182], "static_num_gpu": [181, 182], "static_num_ivy_arrays_on_dev": [181, 182], "static_one_hot": [181, 182], "static_on": [181, 182], "static_ones_lik": [181, 182], "static_out": [181, 182], "static_outputs_to_ivy_arrai": [181, 182], "static_percent_used_mem_on_dev": [181, 182], "static_permute_dim": [181, 182], "static_pinv": [181, 182], "static_posit": [181, 182], "static_pow": [181, 182], "static_print_all_arrays_in_memori": [181, 182], "static_print_all_ivy_arrays_on_dev": [181, 182], "static_prod": [181, 182], "static_promote_typ": [181, 182], "static_qr": [181, 182], "static_queue_timeout": [181, 182], "static_random_norm": [181, 182], "static_relu": [181, 182], "static_remaind": [181, 182], "static_repeat": [181, 182], "static_reshap": [181, 182], "static_result_typ": [181, 182], "static_round": [181, 182], "static_scaled_dot_product_attent": [181, 182], "static_scatter_flat": [181, 182], "static_scatter_nd": [181, 182], "static_se": [181, 182], "static_set_default_devic": [181, 182], "static_set_default_dtyp": [181, 182], "static_set_default_float_dtyp": [181, 182], "static_set_default_int_dtyp": [181, 182], "static_set_min_bas": [181, 182], "static_set_min_denomin": [181, 182], "static_set_queue_timeout": [181, 182], "static_set_split_factor": [181, 182], "static_set_tmp_dir": [181, 182], "static_set_with_grad": [181, 182], "static_shap": [181, 182], "static_shape_to_tupl": [181, 182], "static_shuffl": [181, 182], "static_sigmoid": [181, 182], "static_sign": [181, 182], "static_sin": [181, 182], "static_sinh": [181, 182], "static_slogdet": [181, 182], "static_softmax": [181, 182], "static_softplu": [181, 182], "static_solv": [181, 182], "static_split": [181, 182], "static_split_factor": [181, 182], "static_split_func_cal": [181, 182], "static_sqrt": [181, 182], "static_squar": [181, 182], "static_squeez": [181, 182], "static_stable_divid": [181, 182], "static_stable_pow": [181, 182], "static_stack": [181, 182], "static_std": [181, 182], "static_stop_gradi": [181, 182], "static_sum": [181, 182], "static_supports_inplac": [181, 182], "static_svd": [181, 182], "static_svdv": [181, 182], "static_swapax": [181, 182], "static_tensordot": [181, 182], "static_til": [181, 182], "static_tmp_dir": [181, 182], "static_to_devic": [181, 182], "static_to_list": [181, 182], "static_to_native_arrays_and_back": [181, 182], "static_to_numpi": [181, 182], "static_to_scalar": [181, 182], "static_total_mem_on_dev": [181, 182], "static_tpu_is_avail": [181, 182], "static_trac": [181, 182], "static_tril": [181, 182], "static_triu": [181, 182], "static_trunc": [181, 182], "static_try_else_non": [181, 182], "static_type_promote_arrai": [181, 182], "static_unique_al": [181, 182], "static_unique_count": [181, 182], "static_unique_invers": [181, 182], "static_unique_valu": [181, 182], "static_unset_default_devic": [181, 182], "static_unset_default_dtyp": [181, 182], "static_unset_default_float_dtyp": [181, 182], "static_unset_default_int_dtyp": [181, 182], "static_unset_with_grad": [181, 182], "static_unstack": [181, 182], "static_used_mem_on_dev": [181, 182], "static_valid_dtyp": [181, 182], "static_value_is_nan": [181, 182], "static_var": [181, 182], "static_vari": [181, 182], "static_variable_data": [181, 182], "static_vecdot": [181, 182], "static_vector_norm": [181, 182], "static_vector_to_skew_symmetric_matrix": [181, 182], "static_wher": [181, 182], "static_with_grad": [181, 182], "static_zero_pad": [181, 182], "static_zero": [181, 182], "static_zeros_lik": [181, 182], "supports_inplac": [181, 182, 754], "tmp_dir": [181, 182, 754], "to_native_arrays_and_back": [181, 182, 363, 369, 389], "to_scalar": [181, 182, 754], "total_mem_on_dev": [181, 182, 367, 466], "tpu_is_avail": [181, 182, 466], "tril": [181, 182, 410], "triu": [181, 182, 410], "try_else_non": [181, 182, 754], "type_promote_arrai": [181, 182, 429], "unique_al": [181, 182, 1066], "unique_count": [181, 182, 1066], "unique_invers": [181, 182, 1066], "unique_valu": [181, 182, 1066], "unset_default_devic": [181, 182, 466], "unset_default_dtyp": [181, 182, 429], "unset_default_float_dtyp": [181, 182, 429], "unset_default_int_dtyp": [181, 182, 429], "unset_with_grad": [181, 182, 828], "used_mem_on_dev": [181, 182, 466], "valid_dtyp": [181, 182, 429], "value_is_nan": [181, 182, 754], "variable_data": [181, 182, 828], "with_grad": [181, 182, 828, 857], "zeros_lik": [181, 182, 410, 962, 963, 966, 1124], "at_dev": [181, 183, 184, 466, 479, 480], "container_method": [184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 438, 440, 442, 517, 519, 521, 524, 525, 526, 528, 532, 533, 534, 535, 537, 539, 541, 545, 546, 547, 549, 551, 553, 555, 557, 559, 561, 563, 565, 567, 569, 571, 573, 575, 577, 579, 581, 585, 586, 589, 590, 593, 594, 595, 598, 599, 600, 602, 606, 607, 608, 610, 614, 615, 616, 618, 622, 623, 624, 626, 628, 630, 632, 634, 636, 638, 640, 642, 644, 646, 648, 650, 652, 654, 656, 658, 660, 662, 664, 666, 668, 670, 672, 674, 676, 678, 680, 682, 686, 688, 690, 691, 693, 695, 697, 699, 701, 703, 705, 707, 709, 711, 713, 715, 717, 719, 721, 723, 725, 727, 729, 731, 733, 735, 736, 738, 741, 743, 744, 746, 748, 749, 750, 752, 755, 757, 759, 767, 768, 783, 785, 787, 830, 832, 834, 835, 836, 838, 840, 841, 843, 845, 846, 848, 849, 850, 852, 853, 854, 856, 898, 900, 947, 949, 951, 952, 954, 956, 957, 959, 961, 963, 965, 967, 968, 970, 972, 974, 976, 978, 980, 982, 984, 986, 988, 990, 992, 994, 996, 998, 1000, 1002, 1004, 1006, 1008, 1010, 1012, 1014, 1016, 1018, 1020, 1045, 1047, 1051, 1053, 1055, 1056, 1058, 1072, 1074, 1076, 1077, 1079, 1081, 1083, 1085, 1087, 1089, 1091, 1093, 1095, 1097, 1099, 1101, 1103, 1105, 1109, 1110, 1111, 1113, 1116, 1118, 1120, 1122], "adam_upd": [184, 322, 323, 375, 828], "lr": [184, 189, 230, 236, 237, 257, 279, 289, 290, 291, 293, 322, 323, 374, 375, 828, 835, 836, 837, 838, 840, 841, 842, 843, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 1161, 1162, 1163, 1164, 1165, 1166], "mw_tm1": [184, 189, 236, 279, 290, 322, 323, 828, 835, 836, 837, 838, 845, 846, 847, 848], "vw_tm1": [184, 189, 236, 279, 290, 322, 323, 828, 835, 836, 837, 838, 845, 846, 847, 848], "add_ivy_container_instance_method": [184, 348], "containerexampl": [184, 191, 348, 349], "static_all_equ": [184, 193, 320, 321, 755, 757], "int32": [184, 210, 284, 314, 315, 366, 429, 438, 440, 441, 442, 450, 754, 823, 962, 976, 979, 1082, 1099, 1102, 1107], "int64": [184, 210, 284, 314, 315, 366, 429, 438, 440, 441, 442, 450, 516, 571, 574, 1061, 1062, 1063, 1082, 1099, 1102, 1107], "clip_vector_norm": [184, 320, 321, 754], "max_norm": [184, 213, 320, 321, 754, 766, 767, 768, 769], "gradient_descent_upd": [184, 322, 323, 828, 1022, 1023, 1024, 1025, 1124], "lamb_upd": [184, 322, 323, 828], "max_trust_ratio": [184, 236, 290, 322, 323, 828, 845, 846, 847, 848, 1161, 1163], "decay_lambda": [184, 236, 237, 290, 291, 322, 323, 828, 845, 846, 847, 848, 849, 850, 851, 852, 1161, 1163, 1164], "lars_upd": [184, 322, 323, 828], "optimizer_upd": [184, 322, 323, 828], "effective_grad": [184, 257, 293, 322, 323, 828, 853, 854, 855, 856], "random_uniform": [184, 336, 337, 367, 375, 1049, 1124], "static_ab": [184, 318, 319, 517], "static_adam_step": [184, 322, 323, 830], "87": [184, 278, 294, 322, 323, 336, 337, 828, 830, 833, 834, 1051, 1053], "976": [184, 278, 322, 323, 516, 745, 828, 830, 833, 834], "static_adam_upd": [184, 322, 323, 835], "static_add": [184, 318, 319, 357, 358, 365, 664], "static_argsort": [184, 342, 343, 1072], "static_binary_cross_entropi": [184, 330, 331, 947], "static_can_cast": [184, 314, 315, 438], "from_": [184, 284, 314, 315, 429, 438, 441, 442], "static_clip": [184, 332, 333, 963], "static_rol": [184, 285, 332, 333, 358, 365, 963, 967, 996], "static_cross_entropi": [184, 330, 331, 952], "static_divid": [184, 318, 319, 365, 615, 616], "static_gather_nd": [184, 320, 321, 783], "static_gradient_descent_upd": [184, 322, 323, 840], "static_lamb_upd": [184, 322, 323, 845], "static_lars_upd": [184, 322, 323, 849], "static_multipli": [184, 318, 319, 365, 686], "static_optimizer_upd": [184, 322, 323, 853], "static_randint": [184, 336, 337, 1051], "20": [184, 294, 336, 337, 373, 516, 575, 578, 604, 711, 714, 727, 730, 876, 886, 888, 912, 914, 931, 933, 1049, 1051, 1052, 1053, 1061, 1064, 1065, 1082, 1083, 1086, 1110], "15": [184, 294, 336, 337, 351, 358, 516, 555, 558, 711, 714, 863, 866, 876, 886, 888, 912, 914, 931, 933, 962, 996, 999, 1044, 1045, 1048, 1049, 1051, 1052, 1053, 1061, 1064, 1066, 1067, 1082, 1083, 1086, 1110], "16": [184, 294, 300, 306, 318, 319, 336, 337, 352, 358, 374, 516, 546, 551, 740, 741, 743, 749, 863, 869, 876, 886, 888, 912, 914, 1051, 1053, 1061, 1065, 1082, 1083, 1086, 1110], "12": [184, 294, 336, 337, 351, 358, 365, 516, 555, 558, 575, 578, 587, 711, 714, 754, 772, 790, 828, 830, 833, 876, 886, 888, 912, 914, 931, 933, 962, 980, 983, 988, 991, 996, 999, 1044, 1045, 1048, 1049, 1051, 1052, 1053, 1061, 1065, 1066, 1067, 1082, 1083, 1086, 1110], "40": [184, 294, 336, 337, 516, 587, 727, 730, 876, 912, 914, 1051, 1053, 1082, 1083, 1086, 1110], "gpu": [184, 294, 336, 337, 352, 367, 373, 388, 466, 485, 488, 501, 503, 507, 509, 514, 1051, 1053], "62": [184, 294, 336, 337, 1051, 1053], "52": [184, 294, 336, 337, 828, 830, 833, 876, 912, 914, 1051, 1053, 1066, 1067, 1082, 1083, 1086, 1110], "95": [184, 294, 336, 337, 828, 830, 833, 1051, 1053], "37": [184, 294, 336, 337, 516, 740, 1044, 1045, 1048, 1051, 1053], "42": [184, 294, 336, 337, 376, 399, 405, 828, 830, 833, 876, 912, 914, 1049, 1051, 1053, 1059, 1082, 1083, 1086, 1110], "14": [184, 294, 336, 337, 354, 358, 365, 516, 575, 578, 828, 830, 833, 863, 875, 876, 886, 888, 912, 914, 1051, 1053, 1066, 1067, 1082, 1083, 1086, 1110], "13": [184, 294, 336, 337, 358, 365, 516, 555, 558, 575, 578, 587, 727, 730, 754, 772, 828, 830, 833, 863, 875, 876, 886, 888, 912, 914, 1044, 1045, 1048, 1051, 1053, 1061, 1065, 1066, 1067, 1082, 1083, 1086, 1110], "static_random_uniform": [184, 336, 337, 1055], "static_sort": [184, 342, 343, 1077], "static_sparse_cross_entropi": [184, 330, 331, 957], "static_subtract": [184, 318, 319, 365, 735], "static_tan": [184, 318, 319, 358, 365, 546, 551, 749], "143": [184, 300, 306, 318, 319, 358, 516, 546, 551, 740, 741, 743, 749], "38": [184, 300, 306, 318, 319, 358, 516, 546, 551, 740, 741, 743, 749], "static_tanh": [184, 318, 319, 551], "76": [184, 301, 318, 319, 516, 551, 587, 746, 828, 830, 833, 876, 931, 933, 1082, 1083, 1086, 1110], "96": [184, 301, 318, 319, 516, 551, 740, 746, 828, 830, 833, 876, 912, 914, 1082, 1083, 1086, 1110], "995": [184, 301, 307, 318, 319, 516, 546, 551, 745, 746, 748], "9999": [184, 301, 318, 319, 551, 746], "strongli": [350, 351, 1124, 1130], "welcom": [350, 351, 352, 1124, 1130], "skill": 350, "vetern": 350, "beginn": 350, "aspect": [350, 374, 1124], "guid": [350, 351, 352, 360, 1124], "through": [350, 352, 353, 355, 358, 361, 362, 365, 370, 371, 373, 374, 375, 376, 387, 516, 547, 550], "journei": [350, 1124, 1130], "inclusvi": 350, "big": [350, 388], "team": [350, 351, 352], "board": 350, "contributor": [350, 351, 352, 370, 1124], "section": [350, 352, 353, 355, 356, 357, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 374, 375, 1066, 1067, 1068, 1070], "below": [350, 351, 353, 354, 355, 356, 358, 361, 365, 366, 367, 368, 371, 372, 373, 374, 375, 376, 387, 410, 425, 426, 516, 555, 558, 575, 578, 587, 711, 714, 745, 876, 883, 886, 888, 934, 936, 962, 976, 979, 980, 983, 1066, 1067, 1068, 1071, 1072, 1075, 1124], "best": [350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 754, 804], "go": [350, 351, 352, 353, 355, 356, 358, 365, 370, 374, 388, 1026, 1037], "finish": [350, 351, 355, 1124], "dive": [350, 352, 353, 370, 373, 374, 388, 1124], "environ": [350, 352, 354, 387], "basic": [350, 353, 354], "fork": [350, 351, 754, 805], "doc": [350, 353, 357, 369, 371, 374, 375, 1124], "document": [350, 352, 372, 374, 376], "local": [350, 351, 354, 361], "task": [350, 352, 387, 1022, 1023, 1024, 1025, 1124], "help": [350, 351, 358, 362, 364, 365, 373, 374, 375, 386, 754, 760, 1082, 1107, 1124], "video": [350, 352, 357, 358, 369], "realli": [351, 365, 388], "contribut": [351, 352, 353, 371, 1130], "toward": [351, 371, 962, 996, 999, 1124, 1130], "page": [351, 352, 372, 376, 386, 1124, 1130], "explain": [351, 352, 353, 356, 357, 358, 360, 361, 362, 364, 365, 366, 367, 368, 369, 371, 372, 373, 374, 375, 376, 1124, 1130], "main": [351, 354, 363, 365, 410, 415, 425, 426, 876, 886, 888, 934, 936], "prefer": [351, 365], "git": [351, 352], "submodul": [351, 352, 353, 354, 359, 360, 361, 367, 370, 371, 375, 1124, 1159, 1160, 1167, 1168], "com": 351, "unifyai": [351, 354], "http": [351, 357, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 423, 424, 425, 426, 427, 428, 429, 438, 441, 516, 517, 520, 535, 538, 575, 578, 579, 582, 587, 612, 695, 698, 727, 730, 731, 734, 828, 830, 833, 835, 837, 962, 976, 979, 996, 999, 1066, 1067, 1068, 1071, 1072, 1075, 1082, 1087, 1090], "gh": 351, "your_fold": 351, "id": [351, 364, 365, 466, 485, 1157, 1158], "cours": [351, 352, 358, 374, 388], "whatev": [351, 388], "integr": [351, 360, 429, 435], "familiar": [351, 353], "sure": [351, 353, 359], "elig": 351, "free": [351, 352, 353, 354, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 387, 1124], "student": 351, "licenc": 351, "peopl": [351, 352, 355], "seem": [351, 375, 388], "miss": [351, 358, 360, 364, 365, 1161, 1165], "explicit": [351, 354, 365, 366, 368, 371, 388], "remind": 351, "channel": [351, 352, 353, 354, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 754, 781, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1154, 1155], "pace": 351, "suggest": [351, 352, 356], "latest": [351, 353, 354, 357, 388, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 423, 424, 425, 426, 427, 428, 429, 438, 441, 516, 517, 520, 535, 538, 575, 578, 579, 582, 587, 612, 695, 698, 727, 730, 731, 734, 962, 976, 979, 996, 999, 1066, 1067, 1068, 1071, 1072, 1075, 1082, 1087, 1090, 1145, 1154], "packag": [351, 354, 388], "ensur": [351, 352, 360, 364, 366, 369, 754, 798], "pypi": [351, 353, 388], "person": [351, 352], "experi": [351, 372, 374, 388], "avoid": [351, 352, 360, 362, 363, 365, 373, 466, 516, 608, 611], "pip": [351, 387, 1124], "instal": [351, 354, 387, 1124], "abil": [351, 372, 388], "perhap": [351, 373, 374, 375, 388], "track": [351, 352, 466, 1026, 1038, 1157, 1158], "run": [351, 354, 359, 360, 362, 369, 371, 372, 373, 374, 375, 376, 387, 388, 466, 475, 828, 830, 833, 835, 837, 845, 847, 1022, 1023, 1024, 1025, 1145, 1156, 1157, 1158], "command": [351, 354, 1124], "ivy_dev": [351, 352, 354], "name": [351, 352, 354, 357, 360, 371, 373, 374, 376, 407, 408, 754, 760, 876, 889, 891, 918, 920, 925, 1066, 1067, 1068], "setup": 351, "click": [351, 352, 357, 1124], "icon": [351, 352], "side": [351, 352], "choos": [351, 352, 376, 466, 511, 516, 672, 675, 676, 679, 1061, 1065, 1066, 1067, 1068, 1070, 1082, 1087, 1090, 1091, 1094, 1095, 1098], "panel": 351, "select": [351, 352, 360, 371, 373, 376, 388], "drop": [351, 388], "down": [351, 373], "path": [351, 354], "manual": [351, 352, 360, 375, 1026, 1027, 1036, 1037], "builtin": [351, 354, 373, 375], "requir": [351, 354, 356, 357, 358, 360, 363, 364, 366, 367, 369, 373, 388, 407, 408, 516, 727, 730, 876, 889, 891, 962, 1006, 1009, 1134, 1135], "cmd": [351, 354], "directori": [351, 352, 354, 754, 815], "folder": [351, 352, 354, 356, 359, 360, 361], "abov": [351, 352, 354, 357, 358, 361, 362, 364, 365, 368, 369, 373, 374, 375, 376, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 423, 424, 425, 426, 427, 428, 429, 438, 441, 516, 517, 520, 530, 535, 538, 555, 558, 575, 578, 579, 582, 587, 612, 686, 689, 695, 698, 711, 714, 727, 730, 731, 734, 740, 745, 754, 782, 863, 866, 875, 876, 883, 886, 888, 889, 891, 934, 936, 962, 976, 979, 980, 983, 996, 999, 1044, 1045, 1048, 1049, 1051, 1052, 1066, 1067, 1068, 1071, 1072, 1075, 1082, 1087, 1090, 1099, 1102, 1103, 1106, 1107, 1115, 1116, 1119], "m": [351, 352, 354, 355, 371, 410, 421, 425, 426, 754, 763, 876, 877, 879, 883, 886, 888, 889, 891, 892, 894, 895, 897, 898, 901, 906, 908, 909, 911, 912, 914, 915, 917, 918, 920, 922, 924, 925, 927, 928, 930, 934, 936, 1049, 1054, 1055, 1057], "python3": [351, 354], "script": [351, 352, 354, 358, 371, 388], "bat": [351, 352, 354], "OR": [351, 352, 354, 516, 567, 570, 676, 679, 1115, 1120, 1123], "bin": [351, 352, 354], "mac": [351, 352, 354], "linux": [351, 352, 354], "virtualenv": 351, "os": 351, "note": [351, 352, 356, 357, 358, 365, 516, 707, 710, 876, 889, 891, 925, 962, 1006, 1009, 1066, 1068, 1082, 1091, 1094], "tick": [351, 352], "To": [351, 358, 361, 365, 374, 375, 376, 1124], "ivy_test": [351, 352], "test_array_api": [351, 352, 359, 360], "cd": [351, 352, 354], "txt": 351, "visual": [351, 388], "jetbrain": 351, "remot": 351, "mitig": 351, "potenti": [351, 370, 516, 608, 611], "conflict": [351, 352, 374], "yet": [351, 353, 365], "particular": [351, 352, 356, 368, 516, 517, 520], "system": [351, 388, 876, 922, 924], "instruct": [351, 353], "desktop": 351, "wsl": 351, "powershel": 351, "admin": 351, "visit": 351, "link": 351, "profession": 351, "execut": [351, 354, 365, 368, 371, 373, 376, 388, 754, 825], "deploy": 351, "top": [351, 352, 360, 374, 375, 1124], "press": [351, 374, 1124], "ok": 351, "caus": [351, 352, 358, 360, 365, 368, 388], "earlier": [351, 352], "might": [351, 352, 356, 360, 363, 371, 373, 374, 754, 775], "necessari": [351, 358, 362, 365, 368], "virtualis": 351, "detail": [351, 352, 353, 356, 359, 360, 361, 362, 363, 365, 369, 374, 375, 410, 416, 1066, 1067, 1068, 1070], "sudo": 351, "apt": 351, "ca": 351, "certif": 351, "curl": 351, "gnupg": 351, "lsb": 351, "mkdir": 351, "keyr": 351, "fssl": 351, "download": [351, 360], "gpg": 351, "dearmor": 351, "o": [351, 371, 754, 763], "echo": 351, "deb": 351, "arch": 351, "dpkg": 351, "architectur": [351, 376, 388], "lsb_releas": 351, "cs": 351, "tee": 351, "null": 351, "ce": 351, "cli": 351, "containerd": 351, "io": 351, "compos": [351, 365, 388], "plugin": 351, "systemctl": 351, "permiss": 351, "relat": [351, 352, 387, 466], "post": [351, 376, 1044, 1045, 1048, 1124, 1130], "It": [351, 352, 354, 355, 356, 357, 358, 362, 364, 365, 368, 371, 373, 374, 375, 399, 400, 401, 402, 403, 404, 405, 406, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 423, 424, 425, 426, 427, 428, 429, 435, 437, 466, 511, 516, 517, 520, 522, 525, 526, 529, 530, 533, 535, 538, 539, 542, 543, 546, 547, 550, 551, 554, 555, 558, 559, 562, 563, 566, 567, 570, 571, 574, 575, 578, 579, 582, 583, 586, 587, 590, 591, 594, 596, 599, 600, 603, 604, 607, 608, 611, 612, 615, 616, 619, 620, 623, 624, 627, 628, 631, 632, 635, 636, 639, 640, 643, 644, 647, 648, 651, 652, 655, 656, 659, 660, 663, 664, 667, 668, 671, 672, 675, 676, 679, 680, 683, 684, 685, 686, 689, 691, 694, 695, 698, 699, 702, 703, 706, 707, 710, 711, 714, 715, 718, 719, 722, 723, 726, 727, 730, 731, 734, 735, 739, 740, 744, 745, 749, 750, 753, 754, 766, 767, 769, 772, 776, 777, 778, 780, 783, 786, 794, 807, 810, 811, 828, 858, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 874, 875, 876, 877, 879, 880, 882, 883, 885, 886, 888, 892, 894, 895, 897, 898, 901, 902, 904, 906, 908, 909, 911, 912, 914, 915, 917, 921, 922, 924, 925, 927, 928, 930, 931, 933, 934, 936, 937, 939, 940, 942, 943, 945, 946, 947, 950, 952, 955, 957, 960, 962, 963, 966, 968, 971, 972, 975, 976, 979, 980, 983, 984, 987, 988, 991, 992, 995, 996, 999, 1002, 1005, 1006, 1009, 1010, 1013, 1014, 1017, 1018, 1021, 1044, 1045, 1048, 1049, 1050, 1051, 1052, 1054, 1055, 1057, 1060, 1061, 1062, 1065, 1066, 1070, 1071, 1072, 1075, 1077, 1080, 1115, 1116, 1119, 1120, 1123], "headach": 351, "arm": [351, 352], "m1": 351, "instead": [351, 352, 353, 357, 358, 360, 361, 365, 368, 369, 371, 373, 374, 388], "featur": [351, 356, 369, 374, 1124], "vm": 351, "azur": 351, "cloud": [351, 387], "defin": [351, 353, 356, 357, 366, 369, 373, 375, 388, 516, 686, 689, 707, 710, 754, 807, 876, 880, 882, 889, 891, 922, 924, 1049, 1051, 1052, 1082, 1087, 1090, 1091, 1094, 1095, 1098], "dockerfil": [351, 354], "longer": [351, 366, 368], "worri": 351, "platform": 351, "agnost": [351, 364, 369, 371, 373, 376, 388, 1124], "usual": 351, "studio": 351, "favourit": 351, "extens": [351, 352, 357, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 421, 423, 424, 425, 426, 427, 428, 429, 438, 441, 516, 517, 520, 530, 535, 538, 555, 558, 575, 578, 579, 582, 587, 612, 695, 698, 711, 714, 727, 730, 731, 734, 740, 745, 876, 883, 962, 976, 979, 980, 983, 996, 999, 1066, 1067, 1068, 1071, 1072, 1075, 1082, 1087, 1090, 1115, 1116, 1119], "theme": 351, "too": [351, 352, 388, 516, 530, 686, 689], "done": [351, 352, 358, 360, 374], "unsupport": [351, 366, 429, 450, 451], "slow": 351, "ipad": 351, "long": [351, 352, 358, 863, 873], "browser": 351, "cool": [351, 356], "requisit": 351, "head": [351, 365, 863, 874, 1124, 1145, 1156], "pane": [351, 352], "readi": [351, 353], "begin": [351, 1026, 1027, 1037], "outlin": [351, 352, 353, 355, 357, 360, 361, 365, 368, 373], "dropdown": 351, "tab": [351, 374, 1124], "master": [351, 352, 365], "vs": 351, "view": [351, 352, 410, 416, 863, 866, 870], "built": [351, 372, 410, 411, 466, 1145, 1156, 1157, 1158], "bottom": 351, "box": 351, "patient": 351, "upto": 351, "minut": 351, "launch": 351, "That": [351, 352, 373, 374, 375, 516, 707, 710], "refer": [351, 352, 360, 361, 366, 369, 388, 410, 415, 516, 608, 611, 656, 659, 828, 830, 833, 835, 837, 876, 937, 939, 943, 945, 1082, 1103, 1106, 1111, 1114, 1115, 1116, 1119, 1120, 1123, 1145, 1155], "approach": [351, 352, 360, 361, 365, 373, 374, 388], "colour": 351, "applic": [351, 366, 367, 375, 863, 874, 875, 1026, 1032, 1038], "good": [351, 352, 353, 354, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 371, 375], "chanc": 351, "vscode": 351, "explor": [351, 372, 376, 387], "troubleshoot": 351, "sometim": [351, 352], "ever": [351, 352, 353, 354, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369], "64": [351, 374, 375, 516, 727, 730, 731, 734, 863, 869, 870, 876, 912, 914, 1082, 1083, 1086, 1110, 1124, 1145, 1156], "bit": [351, 358, 361, 365, 373, 429, 448, 449, 452, 516, 559, 562, 563, 566, 571, 574, 1082, 1099, 1102, 1107], "usr": 351, "more": [351, 352, 353, 355, 356, 358, 360, 361, 362, 363, 364, 365, 368, 369, 370, 371, 372, 373, 374, 375, 376, 387, 388, 410, 411, 429, 436, 516, 608, 611, 876, 898, 901, 962, 980, 983, 1066, 1067, 1068, 1070, 1124], "nutshel": [351, 369], "hook": 351, "lint": 351, "fix": [351, 352], "fail": [351, 353, 359, 360, 371, 373], "attempt": [351, 388], "succe": 351, "problemat": 351, "proce": [351, 352, 353, 354, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369], "modifi": [351, 352, 357, 361, 366, 367, 371], "properli": [351, 355], "enter": [351, 352, 364, 366, 367, 369, 466], "unsur": [351, 352, 353, 354, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369], "feel": [351, 352, 353, 354, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 1124], "server": [352, 1124], "context": [352, 358, 365, 366, 367, 466, 754, 805, 863, 874, 1145, 1156], "suitabl": [352, 356, 365], "quick": [352, 355, 375], "tendenc": 352, "land": 352, "end": [352, 365, 368, 370, 387, 388, 410, 411, 516, 547, 550, 1124, 1130], "world": 352, "come": [352, 353, 375, 386, 1124, 1130], "fly": 352, "hard": [352, 373], "receiv": [352, 360, 366, 367, 466, 475, 476, 754, 761, 804, 1145, 1155], "respons": [352, 354], "internship": 352, "comment": 352, "trigger": 352, "unansw": 352, "label": [352, 371, 372, 376, 946, 947, 950, 952, 955, 957, 960], "respond": 352, "someon": [352, 388], "els": [352, 353, 356, 361, 362, 368, 371, 373, 375, 376, 388, 754, 764, 775, 779, 1026, 1036], "strive": [352, 388], "repli": 352, "newli": [352, 368, 407, 408, 429, 435, 754, 765], "bug": [352, 360], "serv": [352, 360, 361, 364, 365, 369, 370, 1124], "suspect": 352, "behaviour": [352, 357, 360, 364, 365, 368, 369, 373], "observ": 352, "confid": 352, "wrong": 352, "someth": [352, 356, 374, 375, 388], "bet": 352, "act": [352, 358, 388], "placehold": [352, 364, 369, 1026, 1038], "mark": [352, 360], "ii": [352, 1082, 1083, 1086, 1110], "iii": 352, "titl": [352, 1124], "issue_numb": 352, "delet": [352, 354], "No": [352, 371], "progress": [352, 365, 372, 376], "pr": 352, "soon": [352, 365, 386, 388, 1124, 1130], "solut": [352, 360, 365, 876, 922, 924], "review": [352, 356], "merg": 352, "everi": [352, 353, 354, 358, 359, 360, 361, 362, 363, 365, 368, 369, 371, 373, 375, 410, 417, 418, 754, 755, 758], "dai": 352, "close": [352, 357, 516, 608, 611, 711, 714, 876, 925], "likewis": [352, 357, 361, 365, 366, 369, 374], "freed": 352, "purpos": [352, 354, 358, 360, 361, 363, 364, 365, 369, 370, 373, 516, 608, 611, 1124], "remain": [352, 358, 388, 516, 530, 686, 689, 707, 710, 962, 992, 995, 1026, 1032], "short": [352, 375, 863, 873], "basi": [352, 359, 374], "situat": [352, 376], "alloc": [352, 388, 410, 425, 426, 429, 435, 466], "upon": [352, 358, 360, 368, 388], "period": 352, "prevent": [352, 368, 373, 828, 830, 833, 835, 837, 845, 847, 1082, 1107, 1161, 1162, 1163], "unabl": 352, "obvious": 352, "never": [352, 365], "reflect": [352, 364], "qualiti": 352, "hypothet": 352, "frustrat": 352, "delai": 352, "busi": 352, "fine": [352, 373, 376], "becaus": [352, 357, 360, 361, 362, 364, 366, 367, 368, 369, 371, 375, 376, 388], "inact": 352, "me": 352, "unfairli": 352, "definit": [352, 361, 366, 373, 876, 877, 879, 880, 882], "investig": 352, "Then": [352, 354, 373, 388], "practic": [352, 360], "separ": [352, 360, 364, 371, 373, 374], "branch": [352, 365, 388, 407, 408, 516, 547, 550], "role": [352, 372], "date": 352, "upstream": [352, 359], "complic": [352, 371], "root": [352, 354, 374, 516, 727, 730, 1049, 1050, 1054], "merge_with_upstream": 352, "sh": 352, "name_of_your_branch": 352, "resolv": [352, 1082, 1099, 1102, 1107], "push": [352, 359], "both": [352, 357, 358, 361, 365, 367, 368, 369, 371, 373, 374, 375, 376, 387, 388, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 423, 424, 425, 426, 427, 428, 429, 438, 441, 456, 516, 517, 520, 530, 535, 538, 579, 582, 612, 695, 698, 703, 706, 727, 730, 731, 734, 740, 754, 782, 828, 830, 833, 863, 866, 875, 876, 880, 882, 898, 901, 937, 939, 962, 996, 999, 1044, 1045, 1048, 1082, 1087, 1090, 1115, 1116, 1119], "abort": 352, "tediou": 352, "resolut": 352, "stash": 352, "reinstat": 352, "fetch": 352, "uncommit": 352, "unstag": 352, "untrack": 352, "comprehens": 352, "explan": [352, 357, 365, 369, 373], "atlassian": 352, "tutori": 352, "wrote": 352, "piec": [352, 361, 363, 364, 371], "inform": [352, 429, 449, 452, 754, 760, 828, 858], "tag": 352, "usu": 352, "describ": [352, 372, 376, 1082, 1083, 1086, 1099, 1102, 1103, 1106, 1107, 1110], "navig": [352, 355], "blame": 352, "revis": 352, "author": [352, 1124], "eg": 352, "past": 352, "l": [352, 355, 876, 877, 879, 889, 891, 898, 901, 934, 936], "grep": 352, "v": [352, 371, 374, 375, 376, 863, 875, 1124, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1165, 1167, 1168], "commit_id": 352, "handi": 352, "histori": 352, "toggl": 352, "vertic": 352, "highlight": [352, 358], "previou": [352, 360, 369, 376, 388, 828, 835, 837, 845, 847], "whenev": [352, 373, 374], "think": [352, 358], "interact": [352, 1124], "gain": [352, 370, 375, 1136], "quit": [352, 353, 357, 361, 363, 364], "yourself": [352, 353, 387], "simpler": [352, 373], "cannot": [352, 362, 366, 376], "least": [352, 358, 361, 364, 876, 898, 901], "final": [352, 357, 358, 361, 364, 366, 368, 371, 373, 374, 410, 419, 420, 754, 781, 1145, 1156], "tickbox": 352, "corner": 352, "span": 352, "intent": [352, 368], "larg": [352, 374, 516, 530, 686, 689], "discourag": 352, "philosophi": 352, "increment": [352, 754, 797], "frequent": [352, 353], "valuabl": 352, "infrequ": 352, "earli": [352, 1124], "wast": 352, "spot": [352, 361], "mistak": 352, "propos": 352, "mountain": 352, "advoc": [352, 388], "individu": [352, 353, 361], "per": [352, 374, 466, 863, 864, 865, 866, 867, 868, 869, 870, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152], "style": [352, 1061, 1064], "ve": [352, 370, 373, 1049, 1050, 1124], "actual": [352, 355, 361, 368, 370, 373, 375, 388], "aim": [352, 370], "part": [352, 356, 359, 360, 361, 371, 372, 376, 387, 388, 410, 425, 426, 828, 835, 837, 840, 842, 845, 847, 849, 851, 853, 855, 1157, 1158], "subsect": 352, "session": [352, 1124], "block": [352, 361, 370, 372, 376, 388, 466, 1124], "smaller": [352, 371, 376, 962, 963, 966, 996, 999, 1082, 1099, 1102, 1107], "edit": 352, "beauti": 352, "particularli": [352, 374, 388], "concern": [352, 355, 358, 365, 368, 370], "effici": [352, 360, 361, 365, 368, 369, 371, 374, 388], "difficult": [352, 360, 388, 1066, 1067, 1068, 1070], "undo": 352, "stress": 352, "frequenc": [352, 754, 781], "pycharm": 352, "pytest": [352, 360], "button": 352, "declar": 352, "insid": [352, 354, 356, 366], "exec": 352, "rm": 352, "rf": 352, "cp": 352, "ivy_contain": 352, "bash": [352, 354], "test_ivi": [352, 360], "test_funct": 352, "test_cor": 352, "test_imag": 352, "test_random_crop": 352, "header": 352, "q": [352, 388, 863, 875, 876, 889, 891, 918, 920], "array_api_test": 352, "test_creation_funct": 352, "test_arang": 352, "window": [352, 354, 863, 864, 865, 866, 867, 868, 869, 870, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152], "variou": [352, 357, 363, 369, 387], "wherebi": [353, 365, 1026, 1038], "broad": 353, "todo": [353, 360], "commit": [353, 360], "NOT": [353, 516, 672, 675], "resourc": 353, "hypothesi": 353, "cover": [353, 357, 358, 361, 363, 370], "lambda": [353, 371, 374, 1161, 1164, 1166], "direct": [353, 375, 376, 387, 1071, 1077, 1080], "bind": [353, 365], "aforement": 353, "categori": [353, 356, 364, 365, 366, 370, 1124], "parent": [353, 373], "hint": [353, 356, 357, 361, 364, 368, 369, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 423, 424, 425, 426, 427, 428, 429, 438, 441, 516, 517, 520, 530, 535, 538, 555, 558, 575, 578, 579, 582, 587, 612, 695, 698, 711, 714, 727, 730, 731, 734, 740, 745, 754, 782, 863, 866, 875, 876, 883, 962, 976, 979, 980, 983, 996, 999, 1044, 1045, 1048, 1066, 1067, 1068, 1071, 1072, 1075, 1082, 1087, 1090, 1115, 1116, 1119], "its": [353, 354, 357, 429, 436, 466, 510, 876, 898, 901, 962, 976, 979, 992, 995, 996, 999, 1010, 1013], "thorough": [353, 357, 360, 369], "transpil": [353, 370, 372, 1124, 1130], "builder": [354, 386, 388, 1124], "maco": 354, "ubuntu": 354, "uid": 354, "make_docs_without_dock": 354, "rel": [354, 828, 835, 837, 840, 842, 845, 847, 849, 851, 853, 855, 876, 886, 888, 897, 906, 908, 915, 917, 934, 936, 962, 980, 983, 996, 999, 1071, 1072, 1075, 1077, 1080, 1124], "synchron": 354, "rest": [354, 372, 376], "remove_doc": 354, "_": [354, 357, 365, 368, 373, 374, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 423, 424, 425, 426, 427, 428, 429, 438, 441, 516, 517, 520, 535, 538, 575, 578, 579, 582, 587, 612, 695, 698, 727, 730, 731, 734, 828, 830, 833, 835, 837, 876, 943, 945, 962, 976, 979, 996, 999, 1066, 1067, 1068, 1071, 1072, 1075, 1082, 1087, 1090], "privat": [354, 1161, 1165], "fulfil": [354, 370, 1124], "autogenerated_sourc": 354, "png": [354, 374], "_imag": 354, "lastli": 354, "rst": 354, "partial_sourc": 354, "conf": 354, "create_rst_fil": 354, "filter": [354, 863, 864, 865, 866, 867, 868, 869, 870, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152], "repres": [354, 373, 410, 421, 429, 448, 516, 525, 526, 529, 530, 539, 542, 546, 551, 554, 586, 587, 590, 686, 689, 723, 726, 744, 745, 749, 863, 872, 876, 885, 921, 922, 924], "overal": [354, 357, 365, 366, 367, 376], "markup": 354, "extract": [354, 356], "get_functions_and_class": 354, "doctr": 354, "readm": [354, 388], "module_nam": 354, "copy_readme_to_rst": 354, "tabl": 354, "toc": 354, "tree": 354, "append_toctree_to_rst": 354, "create_index_rst": 354, "\u03c0": [354, 516, 522, 535, 538, 543, 547, 550], "namespac": [354, 356, 366, 371, 376], "who": [355, 370, 388], "mainli": [355, 372, 374], "under": [355, 357, 358, 359, 360, 361, 365, 370, 371, 374, 376], "hood": [355, 358, 360, 361, 365, 370, 371, 374, 376], "weed": [355, 370], "behind": [355, 370, 372, 828, 835, 837, 840, 842, 845, 847, 849, 851, 853, 855], "tour": 355, "primari": [355, 360, 362, 368, 388], "composit": [355, 360, 362, 364, 365, 368, 371, 375, 376, 388], "nestabl": [355, 357, 358, 360, 368, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 423, 424, 425, 426, 427, 428, 429, 438, 441, 516, 517, 520, 530, 535, 538, 579, 582, 612, 695, 698, 727, 730, 731, 734, 740, 754, 782, 863, 866, 875, 962, 996, 999, 1044, 1045, 1048, 1082, 1087, 1090, 1115, 1116, 1119], "dynam": [355, 366, 367, 368, 371, 407, 408], "runtim": [355, 360, 466], "h": [355, 365, 863, 866, 867, 868, 869, 870], "j": [355, 754, 762, 763, 876, 934, 936, 1082, 1083, 1086, 1110], "k": [355, 371, 410, 415, 425, 426, 754, 762, 863, 875, 876, 898, 901, 918, 920, 922, 924, 925, 927, 928, 930, 934, 936, 1049, 1054, 1055, 1057, 1061, 1064], "borrow": 355, "n": [355, 410, 421, 425, 426, 754, 763, 863, 871, 876, 886, 888, 897, 898, 901, 905, 906, 908, 909, 911, 912, 914, 915, 917, 918, 920, 925, 927, 928, 930, 934, 936, 937, 939, 940, 942, 943, 945, 962, 972, 975, 976, 979, 984, 987, 1006, 1009, 1018, 1021, 1049, 1054, 1055, 1057, 1061, 1064, 1082, 1091, 1094, 1103, 1106, 1107, 1111, 1114, 1115, 1116, 1119, 1120, 1123], "taken": [356, 376, 876, 886, 888], "constant": [356, 361, 375, 376, 388, 466, 475, 476, 962, 972, 975, 1026, 1032, 1044, 1045, 1048, 1136, 1137, 1141, 1144, 1157, 1158, 1159, 1160], "compil": [356, 365, 370, 372, 388, 1124, 1157, 1158, 1161, 1162, 1163, 1164, 1165, 1166], "meta": [356, 364, 1023, 1024, 1025], "overlap": 356, "sever": [356, 388, 876, 895], "judgement": 356, "locat": [356, 360, 362, 367, 1049, 1050], "some_namespac": 356, "some_backend": 356, "another_backend": 356, "break": [356, 369, 373, 388, 1124], "anyth": [356, 1124], "refactor": 356, "ongo": 356, "subfold": [356, 360], "via": [356, 365, 366, 367, 368, 371, 373, 374, 387, 1026, 1027, 1036, 1037], "file_nam": 356, "my_func": [356, 358], "int": [356, 358, 361, 365, 366, 367, 368, 369, 376, 399, 404, 407, 408, 410, 413, 415, 417, 418, 419, 420, 423, 425, 426, 427, 429, 437, 446, 448, 449, 452, 455, 466, 488, 491, 492, 493, 494, 502, 503, 504, 510, 511, 516, 555, 558, 559, 562, 563, 566, 567, 570, 571, 574, 575, 578, 754, 760, 772, 773, 776, 777, 778, 781, 782, 791, 807, 810, 811, 816, 817, 826, 828, 830, 833, 835, 837, 845, 847, 863, 864, 866, 868, 869, 870, 876, 880, 882, 886, 888, 931, 933, 934, 936, 937, 939, 940, 942, 946, 952, 955, 957, 960, 962, 968, 971, 972, 975, 976, 979, 980, 983, 984, 987, 988, 991, 992, 995, 996, 999, 1001, 1002, 1005, 1006, 1009, 1010, 1013, 1014, 1017, 1018, 1021, 1022, 1023, 1024, 1025, 1026, 1038, 1044, 1045, 1048, 1049, 1050, 1051, 1052, 1054, 1055, 1057, 1059, 1061, 1062, 1063, 1071, 1072, 1075, 1077, 1080, 1082, 1087, 1090, 1091, 1094, 1095, 1098, 1103, 1106, 1107, 1111, 1114, 1115, 1116, 1119, 1120, 1123], "nativedtyp": [356, 366, 367, 369, 410, 411, 412, 413, 414, 415, 417, 418, 422, 423, 424, 427, 428, 429, 434, 435, 445, 446, 447, 456, 1082, 1107], "nativedevic": [356, 366, 367, 369, 410, 411, 412, 413, 414, 415, 417, 418, 419, 420, 422, 423, 424, 427, 428, 466, 483, 484, 485, 499, 505, 507, 509, 511, 512, 515, 754, 807, 1049, 1050, 1051, 1052, 1054, 1055, 1057], "my": 356, "numer": [356, 375, 410, 421, 429, 435, 516, 517, 520, 530, 579, 582, 591, 594, 608, 611, 612, 615, 616, 619, 628, 631, 632, 635, 636, 639, 640, 643, 672, 675, 676, 679, 686, 689, 691, 694, 695, 698, 703, 706, 707, 710, 715, 718, 731, 734, 735, 739, 750, 753, 754, 789, 790, 812, 813, 818, 819, 876, 880, 882, 898, 901, 912, 914, 925, 931, 933, 934, 936, 937, 939, 1049, 1060, 1061, 1062, 1063, 1082, 1087, 1090, 1099, 1102, 1107, 1136], "cooler": 356, "produc": [356, 466, 475, 476, 863, 875], "something_cool": 356, "category_nam": [357, 361, 366, 367, 369], "contrast": [357, 369], "backend_nam": [357, 361, 362, 363, 366, 367, 369], "account": 357, "instanti": 357, "firstli": [357, 358, 361, 364, 366, 368, 374], "templat": [357, 1124], "spec": [357, 358], "api_specif": [357, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 423, 424, 425, 426, 427, 428, 429, 438, 441, 516, 517, 520, 535, 538, 575, 578, 579, 582, 587, 612, 695, 698, 727, 730, 731, 734, 962, 976, 979, 996, 999, 1066, 1067, 1068, 1071, 1072, 1075, 1082, 1087, 1090], "array_api": 357, "preview": 357, "render": 357, "incorrectli": 357, "onlin": [357, 1124], "approxim": [357, 399, 400, 516, 522, 525, 526, 529, 535, 538, 539, 542, 543, 547, 550, 583, 586, 587, 590, 604, 608, 611, 648, 651, 652, 655, 656, 659, 660, 663, 703, 706, 719, 722, 723, 726, 740, 745, 876, 897, 906, 908, 915, 917], "tangent": [357, 399, 406, 516, 543, 546, 547, 550, 551, 554, 740, 744, 745, 749], "domain": [357, 516, 522, 525, 526, 529, 535, 538, 539, 542, 543, 547, 550, 583, 586, 587, 590, 604, 608, 611, 648, 651, 652, 655, 660, 663, 719, 722, 723, 726, 727, 730, 740, 745], "infin": [357, 409, 429, 435, 516, 517, 520, 525, 526, 529, 530, 533, 539, 542, 543, 547, 550, 579, 582, 583, 586, 587, 590, 594, 604, 607, 608, 611, 612, 615, 616, 619, 628, 631, 632, 635, 648, 651, 652, 655, 660, 663, 664, 667, 686, 689, 703, 706, 707, 710, 711, 714, 719, 722, 723, 726, 727, 730, 740, 745, 750, 753, 876, 940, 942, 1082, 1087, 1090, 1095, 1098, 1115, 1116, 1119, 1120, 1123], "codomain": [357, 516, 522, 525, 526, 529, 535, 538, 539, 542, 543, 547, 550, 583, 586, 587, 590, 604, 608, 611, 648, 651, 652, 655, 660, 663, 719, 722, 723, 726, 727, 730, 740, 745], "x_i": [357, 516, 517, 520, 522, 525, 526, 529, 535, 538, 539, 542, 543, 559, 562, 579, 582, 583, 586, 587, 590, 604, 608, 611, 612, 628, 631, 632, 635, 636, 639, 648, 651, 652, 655, 660, 663, 672, 675, 691, 694, 711, 714, 715, 718, 719, 722, 723, 726, 727, 730, 731, 734, 740, 745, 750, 753, 1066, 1067, 1068, 1070, 1082, 1087, 1090, 1091, 1094, 1095, 1098, 1103, 1106, 1107, 1111, 1114], "assum": [357, 362, 366, 373, 374, 388, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 423, 424, 425, 426, 427, 428, 429, 438, 441, 516, 517, 520, 530, 535, 538, 555, 558, 575, 578, 579, 582, 583, 587, 612, 695, 698, 711, 714, 719, 722, 727, 730, 731, 734, 740, 745, 754, 782, 863, 866, 875, 876, 883, 962, 976, 979, 980, 983, 996, 999, 1044, 1045, 1048, 1066, 1067, 1068, 1071, 1072, 1075, 1082, 1087, 1090, 1115, 1116, 1119], "express": [357, 371, 376, 516, 522, 535, 538, 543, 547, 550, 583, 719, 722, 740], "radian": [357, 516, 522, 535, 538, 543, 547, 550, 583, 719, 722, 740], "float": [357, 361, 365, 366, 368, 369, 373, 375, 399, 401, 409, 410, 411, 413, 415, 417, 418, 419, 420, 423, 427, 429, 435, 445, 449, 454, 457, 466, 499, 505, 509, 512, 515, 516, 517, 520, 522, 525, 526, 529, 530, 533, 535, 538, 539, 542, 543, 546, 547, 550, 551, 554, 575, 578, 579, 582, 583, 586, 587, 590, 591, 594, 596, 599, 604, 607, 608, 611, 612, 615, 616, 619, 620, 623, 624, 627, 640, 643, 644, 647, 648, 651, 652, 655, 660, 663, 664, 667, 686, 689, 691, 694, 695, 698, 699, 702, 703, 706, 707, 710, 711, 714, 719, 722, 723, 726, 727, 730, 735, 739, 740, 744, 745, 749, 750, 753, 754, 766, 767, 769, 781, 789, 790, 812, 813, 818, 819, 828, 830, 833, 835, 837, 840, 842, 845, 847, 849, 851, 853, 855, 863, 866, 870, 875, 876, 877, 879, 883, 889, 891, 892, 894, 895, 897, 906, 908, 915, 917, 918, 920, 922, 924, 925, 940, 942, 946, 947, 950, 952, 955, 957, 960, 1022, 1023, 1024, 1025, 1044, 1045, 1048, 1049, 1054, 1055, 1057, 1066, 1067, 1068, 1070, 1082, 1087, 1090, 1091, 1094, 1095, 1098, 1099, 1102, 1103, 1106, 1107, 1111, 1114], "operand": [357, 516, 522, 525, 526, 529, 530, 533, 535, 538, 539, 542, 543, 547, 550, 575, 578, 579, 582, 583, 586, 587, 590, 604, 607, 608, 611, 612, 648, 651, 652, 655, 660, 663, 664, 667, 686, 689, 703, 706, 707, 710, 711, 714, 719, 722, 723, 726, 727, 730, 740, 745, 750, 753, 1082, 1083, 1086, 1087, 1090, 1095, 1098, 1107, 1110], "whose": [357, 410, 425, 426, 516, 525, 526, 529, 539, 542, 546, 551, 554, 583, 586, 587, 590, 703, 706, 719, 722, 723, 726, 740, 744, 745, 749, 754, 765, 876, 877, 879, 883, 886, 888, 889, 891, 892, 894, 895, 897, 906, 908, 909, 911, 912, 914, 915, 917, 918, 920, 922, 924, 925, 927, 928, 930, 934, 936, 962, 980, 983, 996, 999, 1066, 1067, 1068, 1082, 1083, 1086, 1110], "ref": [357, 516, 571, 574, 640, 643, 686, 689, 695, 698, 707, 710, 735, 739, 962, 1006, 1009], "promot": [357, 361, 366, 429, 435, 438, 441, 456, 457, 461, 516, 522, 525, 526, 529, 530, 533, 535, 538, 539, 542, 543, 546, 551, 554, 555, 558, 563, 566, 567, 570, 571, 574, 575, 578, 583, 586, 587, 590, 591, 604, 607, 608, 611, 648, 651, 652, 655, 660, 663, 664, 667, 680, 683, 686, 689, 703, 706, 707, 710, 719, 722, 723, 726, 727, 730, 740, 744, 745, 749, 876, 877, 879, 880, 882, 895, 897, 898, 901, 906, 908, 912, 914, 915, 917, 922, 924, 937, 939, 940, 942, 962, 1006, 1009, 1082, 1091, 1094], "But": [357, 365, 376], "needless": 357, "info": [357, 1124], "subset": [357, 360, 369, 371], "extend": [357, 360, 362, 369], "renam": 357, "conform": [357, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 421, 423, 424, 425, 426, 427, 428, 429, 438, 441, 516, 517, 520, 530, 535, 538, 555, 558, 575, 578, 579, 582, 587, 608, 611, 612, 695, 698, 711, 714, 727, 730, 731, 734, 740, 745, 876, 883, 962, 976, 979, 980, 983, 996, 999, 1066, 1067, 1068, 1071, 1072, 1075, 1082, 1087, 1090, 1115, 1116, 1119], "org": [357, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 423, 424, 425, 426, 427, 428, 429, 438, 441, 516, 517, 520, 535, 538, 575, 578, 579, 582, 587, 612, 695, 698, 727, 730, 731, 734, 828, 830, 833, 835, 837, 962, 976, 979, 996, 999, 1066, 1067, 1068, 1071, 1072, 1075, 1082, 1087, 1090], "elementwise_funct": [357, 516, 517, 520, 535, 538, 575, 578, 579, 582, 587, 612, 695, 698, 727, 730, 731, 734, 962, 996, 999, 1066, 1067, 1068, 1071, 1072, 1075, 1082, 1087, 1090], "descript": [357, 365, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 423, 424, 425, 426, 427, 428, 429, 438, 441, 516, 517, 520, 530, 535, 538, 555, 558, 575, 578, 579, 582, 587, 612, 695, 698, 711, 714, 727, 730, 731, 734, 740, 745, 754, 782, 863, 866, 875, 876, 883, 940, 942, 962, 976, 979, 980, 983, 996, 999, 1044, 1045, 1048, 1066, 1067, 1068, 1071, 1072, 1075, 1082, 1087, 1090, 1115, 1116, 1119], "simplic": [357, 375, 387, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 423, 424, 425, 426, 427, 428, 429, 438, 441, 516, 517, 520, 530, 535, 538, 555, 558, 575, 578, 579, 582, 587, 612, 695, 698, 711, 714, 727, 730, 731, 734, 740, 745, 754, 782, 863, 866, 875, 876, 883, 962, 976, 979, 980, 983, 996, 999, 1044, 1045, 1048, 1066, 1067, 1068, 1071, 1072, 1075, 1082, 1087, 1090], "judgment": 357, "beyond": [357, 962, 996, 999], "text": 357, "func_nam": [357, 358, 361], "pure": [357, 373, 376, 388], "themselv": [357, 361, 365, 366, 367, 375, 1026, 1027], "operator_nam": 357, "succinct": 357, "contstructor": 357, "though": [357, 361, 366, 374, 388], "forward": [357, 376, 387, 388, 1157, 1158, 1161, 1165], "_forward": [357, 371, 374, 375, 1124], "former": 357, "trainabl": [357, 372, 374, 375, 828, 844, 1134, 1135, 1157, 1158, 1167], "explicitli": [357, 361, 362, 364, 365, 368, 371, 388, 876, 889, 891, 1145, 1154, 1156, 1157, 1158], "latter": [357, 362], "implicit": [357, 365, 371], "docst": 357, "eight": 358, "static_": 358, "op_nam": 358, "__r": 358, "four": [358, 361, 366, 369, 374], "__sub__": [358, 364, 365, 369, 373], "__mul__": [358, 364, 365, 369, 373], "__truediv__": [358, 364, 365], "respect": [358, 364, 365, 366, 369, 410, 421, 516, 517, 520, 530, 533, 547, 550, 555, 558, 563, 566, 567, 570, 571, 574, 575, 578, 591, 594, 596, 599, 607, 615, 616, 619, 620, 623, 624, 627, 640, 643, 644, 647, 664, 667, 668, 671, 676, 679, 680, 683, 686, 689, 695, 698, 707, 710, 735, 739, 828, 830, 833, 835, 837, 839, 840, 842, 845, 847, 849, 851, 853, 855, 876, 918, 920, 1022, 1023, 1024, 1025], "recap": [358, 365, 375], "independ": [358, 359, 363, 365, 371, 376, 876, 880, 882, 922, 924, 1049, 1050], "combinatorili": 358, "variat": [358, 360], "grid": [358, 360, 387, 410, 421], "vari": [358, 360, 365, 373, 1066, 1067, 1068, 1070], "simplest": 358, "small": [358, 361, 371, 375, 388, 516, 686, 689, 876, 897, 906, 908, 915, 917, 1044, 1045, 1048, 1159, 1160], "unus": [358, 368, 407, 408], "18": [358, 365, 516, 575, 578, 876, 886, 888, 912, 914, 1082, 1083, 1086, 1110], "excess": [358, 362, 373], "showcas": [358, 387], "demonstr": [358, 373], "replic": [358, 366], "meant": 358, "imaginari": 358, "some_flag": 358, "another_flag": 358, "54": [358, 516, 583, 587, 727, 730, 863, 875, 876, 912, 914, 1049, 1054, 1082, 1083, 1086, 1110], "jointli": 358, "three": [358, 365, 370, 410, 421, 1124], "x0": [358, 754, 762], "procedur": 358, "sens": [358, 365, 373], "5574077": 358, "1850398": 358, "5463025": 358, "8422884": 358, "91601413": 358, "9647598": 358, "3738229": 358, "1597457": 358, "0963247": 358, "9955841": 358, "3278579": 358, "multi": [358, 365, 370, 388, 863, 874, 876, 880, 882, 1124, 1130, 1145, 1156], "seper": [358, 754, 781], "pars": [358, 388], "satisfi": [358, 876, 943, 945], "far": [358, 367, 372, 373, 1026, 1027, 1037], "asid": [358, 387], "irrelev": [358, 366], "increasingli": 358, "complex": [358, 374, 375, 376, 388, 876, 889, 891, 925], "rule": [358, 360, 361, 364, 365, 366, 429, 435, 438, 441, 457, 516, 546, 551, 554, 571, 574, 591, 686, 689, 707, 710, 744, 749, 876, 877, 879, 880, 882, 912, 914, 922, 924], "count": [358, 374, 466, 504, 876, 937, 939, 962, 980, 983, 1066, 1067, 1068, 1115, 1116, 1119, 1120, 1123], "14254655": 358, "1578213": 358, "380515": 358, "17": [358, 365, 399, 401, 876, 886, 888, 1049, 1054], "trivial": 358, "By": [358, 361, 365, 368, 375, 376, 754, 772, 773, 876, 937, 939, 962, 988, 991, 1082, 1087, 1090, 1091, 1094, 1095, 1098, 1099, 1102, 1103, 1106, 1107, 1111, 1114, 1115, 1116, 1119, 1120, 1123], "non": [358, 365, 366, 371, 407, 408, 429, 435, 453, 516, 672, 675, 676, 679, 863, 866, 876, 883, 906, 908, 925, 931, 933, 937, 939, 940, 942, 1061, 1062, 1063, 1064, 1082, 1087, 1090, 1091, 1094, 1095, 1098, 1099, 1102, 1111, 1114, 1115, 1116, 1119, 1120, 1123, 1157, 1158, 1161, 1165], "dictat": [358, 364, 368, 369], "exlud": 358, "unit": [359, 360, 388, 399, 400, 401, 402, 466], "thoroughli": [359, 360], "ci": [359, 360, 388], "failur": 359, "On": [360, 372, 376], "fixtur": 360, "consum": [360, 365, 369, 466], "300": [360, 516, 711, 714], "hit": [360, 371], "permit": [360, 364, 369], "action": 360, "eleg": 360, "intellig": 360, "sampl": [360, 863, 871, 1049, 1050, 1054, 1055, 1057, 1082, 1103, 1106, 1111, 1114, 1145, 1153], "rang": [360, 374, 375, 376, 410, 411, 419, 420, 1066, 1067, 1082, 1099, 1102, 1107, 1124], "cach": [360, 361, 466, 484, 754, 765], "unexplor": 360, "known": 360, "repeatedli": [360, 365, 1026, 1035], "upload": 360, "artifact": 360, "parametr": 360, "strategi": 360, "statement": [360, 388], "plai": [360, 376], "helper": [360, 374], "verifi": [360, 366, 367, 373, 1124, 1130], "truth": [360, 516, 596, 599, 620, 623, 624, 627, 640, 643, 644, 647, 695, 698], "opt": [360, 362, 368, 373], "defer": [360, 361, 364, 365, 366, 367, 368], "suffic": [360, 363], "catch": [360, 754, 775], "systemat": 360, "safeguard": 360, "inabl": 360, "fact": [360, 374], "categor": [361, 367], "mutual": [361, 365], "constitut": [361, 371, 1082, 1103, 1106, 1111, 1114], "venn": 361, "diagram": 361, "light": [361, 388], "wherea": [361, 364, 366, 367, 369, 376], "hand": [361, 388], "log_pr": [361, 365, 368], "array_arg": 361, "typic": 361, "whatsoev": [361, 365], "commonli": [361, 1082, 1103, 1106, 1111, 1114], "outsid": [361, 367, 371, 373, 376, 962, 963, 966, 1006, 1009], "denomin": [361, 388, 754, 780, 790, 813, 818, 819, 1044, 1045, 1048, 1159, 1160], "divis": [361, 516, 571, 574, 591, 594, 615, 616, 619, 707, 710, 754, 780, 790, 813, 818, 819, 828, 830, 833, 835, 837, 845, 847, 1161, 1162, 1163], "deal": [361, 388], "concurr": [361, 365], "weight": [361, 365, 375, 376, 828, 830, 833, 835, 837, 840, 842, 845, 847, 849, 851, 853, 855, 863, 872, 873, 875, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1154, 1155, 1157, 1158, 1161, 1163, 1164], "modif": 361, "decor": [361, 363, 365, 366, 367, 368], "group": [361, 365], "briefli": [361, 374], "cast": [361, 366, 429, 435, 438, 441, 962, 968, 971, 1082, 1099, 1102, 1107, 1124], "get_all_arrays_on_dev": 361, "nested_map": [361, 1026], "index_nest": [361, 1026], "implicit_backend": 362, "unless": [362, 367, 368, 388, 516, 686, 689, 754, 807], "__dict__": [362, 371, 373], "ivy_original_dict": [362, 371], "unmodifi": [362, 366], "moment": [362, 388, 828, 830, 833, 835, 837, 845, 847, 1161, 1162, 1163], "fallback": 362, "freedom": [362, 1082, 1103, 1106, 1111, 1114], "recommend": [362, 516, 672, 675, 676, 679, 707, 710, 1082, 1091, 1094], "achiev": [363, 374, 376], "wrapper": [363, 364, 365, 366, 368, 369, 373], "logic": [363, 364, 366, 367, 373, 466, 502, 516, 668, 671, 672, 675, 676, 679, 1115, 1116, 1119, 1120, 1123, 1124], "topic": [363, 373], "tf": [364, 366, 367, 368, 369, 371, 376, 388, 1124], "_data": [364, 373], "organiz": [364, 365], "inherit": [364, 365, 373], "bear": [364, 365, 366], "mind": [364, 365], "necessarili": [364, 365], "although": [364, 365], "underpin": [364, 365, 371], "programmat": [364, 365], "backup": [364, 365], "accident": [364, 365], "readabl": [364, 365, 369, 373, 374], "absent": [364, 365], "perk": [364, 365], "auto": [364, 365, 374], "throw": [364, 373], "imposs": 364, "coupl": [364, 365, 373, 375], "anywai": 364, "secondli": [364, 366], "easier": 364, "five": [365, 374], "decis": [365, 371, 373], "displai": [365, 374], "arbitrarili": [365, 374], "__repr__": 365, "control": [365, 366, 368, 373, 374, 387], "__getattr__": 365, "underli": [365, 516, 555, 558, 567, 570, 575, 578, 680, 683], "__setattr__": 365, "__contains__": 365, "__getstate__": 365, "__setstate__": 365, "unpickl": 365, "expand": [365, 754, 781, 962, 976, 979], "children": 365, "shallowest": 365, "deepest": 365, "67": [365, 516, 575, 578, 587], "22": [365, 516, 575, 578, 876, 886, 888, 912, 914, 1061, 1065, 1082, 1083, 1086, 1110], "25": [365, 516, 727, 730, 731, 734, 876, 886, 888, 895, 946, 952, 955, 1044, 1045, 1048, 1082, 1083, 1086, 1110], "retain_grad": [365, 828, 839], "dy": [365, 828, 839], "dx": [365, 828, 839], "technic": [365, 368, 369, 388], "autograd": [365, 388], "grad": [365, 374, 375, 376, 1124, 1161, 1165], "redund": 365, "num_head": [365, 863, 874, 1145, 1156], "mask": [365, 863, 874, 875], "to_q_fn": [365, 863, 874], "to_kv_fn": [365, 863, 874], "to_out_fn": [365, 368, 863, 874], "to_q_v": [365, 863, 874], "to_kv_v": [365, 863, 874], "to_out_v": [365, 863, 874], "measur": [365, 863, 874, 1145, 1156], "dot": [365, 863, 874, 875, 876, 931, 933, 937, 939, 1145, 1156], "product": [365, 516, 686, 689, 754, 772, 863, 874, 875, 876, 880, 882, 898, 901, 912, 914, 931, 933, 937, 939, 1082, 1083, 1086, 1099, 1102, 1110, 1145, 1156], "implicitli": 365, "intuit": [365, 374, 375], "debug": [365, 374], "chronolog": 365, "had": [365, 368], "sequenti": [365, 375], "flow": [365, 387], "implic": 365, "slightli": [365, 371, 375], "eager": [365, 388], "int8": [366, 429, 450], "int16": [366, 429, 438, 441, 450, 1082, 1099, 1102, 1107], "uint8": [366, 429, 438, 441, 450], "uint16": [366, 429, 451, 1082, 1099, 1102, 1107], "uint32": [366, 429, 451, 1082, 1099, 1102, 1107], "uint64": [366, 429, 451, 1082, 1099, 1102, 1107], "bfloat16": [366, 429, 450], "float16": [366, 429, 451], "all_dtyp": 366, "all_numeric_dtyp": 366, "all_int_dtyp": 366, "all_float_dtyp": 366, "fall": [366, 370, 1124, 1157, 1158, 1161, 1165], "valid": [366, 371, 429, 443, 863, 864, 865, 866, 867, 868, 869, 870, 962, 1006, 1009, 1115, 1116, 1119, 1120, 1123, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152], "invalid": [366, 876, 937, 939, 1115, 1116, 1119, 1120, 1123], "thirdli": 366, "native_float32": 366, "importantli": [366, 373, 376, 387], "varieti": [366, 367], "conveni": [366, 367, 369, 372, 374, 375], "arguabl": [366, 367], "compound": 366, "overflow": [366, 516, 530, 1082, 1107], "arr": [366, 367, 1044, 1045, 1048], "scalar": [366, 371, 376, 388, 410, 418, 754, 807, 824, 827, 876, 940, 942], "settabl": [366, 367], "jnp": [366, 367, 368, 369, 376, 1124], "jaxarrai": [366, 367, 368, 369], "mx": [366, 367, 368, 1124], "nd": [366, 367, 368, 371, 376, 1124], "deleg": 366, "fill_valu": [366, 410, 417, 418, 516, 599, 623, 624, 627], "as_n": [366, 429, 444, 445, 446, 447, 466, 485, 486, 507], "idx": [367, 373, 754, 760], "tpu": [367, 466, 488, 513], "aliv": [367, 466, 500, 504, 506, 754, 788, 806, 808], "amount": [367, 466, 512, 946, 947, 950, 952, 955, 957, 960], "memori": [367, 368, 386, 388, 466, 484, 505, 510, 512, 515, 863, 873, 1124], "dual": 367, "thrown": [367, 388, 754, 798], "rare": [367, 388], "program": 368, "strictli": 368, "ration": 368, "speak": 368, "subtli": 368, "ensure_in_backend": [368, 754, 798], "x_nativ": 368, "val_n": 368, "is_ivy_arrai": [368, 373, 754], "is_vari": [368, 828], "assign": [368, 373], "elif": 368, "irrespect": [368, 373, 429, 435], "inclus": [368, 410, 411, 1049, 1051, 1052], "omit": [368, 369, 1066, 1067, 1068, 1070], "unspecifi": [368, 516, 703, 706, 707, 710, 876, 889, 891, 962, 1006, 1009], "predominantli": [368, 387], "math": [368, 376, 1124], "presenc": 368, "altern": [368, 374], "_wrap_fn": 368, "maxim": [368, 371], "inner": [368, 373, 876, 889, 891, 898, 901, 1022, 1023, 1024, 1025], "third": [368, 388, 876, 925, 1066, 1067], "addition": [368, 369], "leverag": 368, "equival": [368, 374, 376, 410, 411, 516, 571, 574, 672, 675, 676, 679, 707, 710, 876, 897, 906, 908, 915, 917, 922, 924, 940, 942], "input_arrai": 368, "adress": 369, "revisit": [369, 376], "dedic": [369, 373, 375, 828, 861, 1134, 1135], "__div__": 369, "dicat": 369, "futher": 369, "absenc": 369, "pep": 369, "484": 369, "annot": 369, "brittl": 369, "intend": [369, 1082, 1107], "freeli": 369, "inde": [369, 388], "flexibl": 369, "original_typ": 369, "cumbersom": 369, "sound": 370, "higher": [370, 371, 376, 388, 828, 835, 837, 840, 842, 845, 847, 849, 851, 853, 855], "overview": [370, 387], "handler": [370, 372, 376, 1124], "fledg": [371, 372], "syntact": [371, 376], "clip_by_valu": [371, 376], "clamp": [371, 376], "behavior": [371, 388, 516, 703, 706, 707, 710, 1066, 1067, 1068, 1070], "fit": [371, 962, 988, 991], "construct": [371, 372, 375, 376, 962, 1014, 1017, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1154, 1155, 1156, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168], "num": [371, 410, 419, 420], "power_seq": 371, "okai": 371, "bound": 371, "resid": [371, 375], "edg": [371, 376, 962, 963, 966, 972, 975, 1018, 1021, 1124], "larger": [371, 376, 429, 449, 962, 963, 966, 996, 999, 1082, 1103, 1106, 1111, 1114], "ml_framework": [371, 376, 410, 411], "current_framework": [371, 376], "furthermor": 371, "concaten": [371, 374, 466, 495, 754, 781, 962, 968, 971, 1124], "framework_handl": 371, "face": 371, "verbos": [371, 1124, 1171], "cprint": [371, 1170], "framework_stack": 371, "_determine_framework_from_arg": 371, "valueerror": [371, 962, 1002, 1005], "get_framework": 371, "neither": [371, 516, 530, 686, 689], "illustr": [371, 387], "un": [371, 429, 453], "nn": [371, 376, 410, 421, 1124], "init_h": [371, 863, 873], "init_c": [371, 863, 873], "kernel": [371, 388, 863, 873], "recurrent_kernel": [371, 863, 873], "bia": [371, 375, 863, 872, 873, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1155], "recurrent_bia": [371, 863, 873], "x_shape": 371, "batch_shap": [371, 373, 376, 754, 807, 863, 873, 874, 875, 876, 943, 945, 1049, 1050, 1145, 1154], "timestep": [371, 863, 873, 1145, 1154], "input_channel": [371, 375, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1154, 1155], "x_flat": 371, "wi": 371, "wi_x": 371, "wii_x": 371, "wif_x": 371, "wig_x": 371, "wio_x": 371, "recurr": [371, 863, 873], "wh": 371, "lstm": [371, 863, 873, 1145], "ht": 371, "ct": 371, "hts_list": 371, "unrol": [371, 374, 863, 873], "wii_xt": 371, "wif_xt": 371, "wig_xt": 371, "wio_xt": 371, "zip": 371, "htm1": 371, "ctm1": 371, "wh_htm1": 371, "whi_htm1": 371, "whf_htm1": 371, "whg_htm1": 371, "who_htm1": 371, "ft": 371, "gt": 371, "ot": 371, "offici": 371, "reliabl": 371, "sacrific": 371, "hear": 371, "virtu": 371, "pure_ivi": 371, "reduce_mean": [371, 374, 375, 376, 1124], "reduce_sum": [371, 1124], "reduce_var": 371, "compile_graph": [371, 376], "pure_torch": 371, "cat": [371, 376], "backbon": [371, 374], "_layer": 371, "super": [371, 374, 375, 376], "clean": [371, 372, 374], "random_unifrom": 371, "unclean": 371, "wx": 371, "temp": 371, "torchscript": 371, "fn": [371, 373, 389, 390, 391, 392, 393, 394, 395, 396, 397, 429, 450, 451, 466, 475, 476, 754, 760, 825, 1026, 1027, 1032, 1033, 1034, 1036, 1037, 1038, 1127, 1129], "example_input": [371, 407, 408], "static_argnum": [371, 407, 408], "static_argnam": [371, 407, 408], "jit": [371, 388], "frontend": 372, "primit": [372, 388], "hierarch": [372, 374, 375], "straight": [373, 1124], "arraywithlinalg": 373, "arraywithlog": 373, "arraywithmath": 373, "arraywithmeta": 373, "arraywithreduct": 373, "is_native_arrai": [373, 754], "_shape": 373, "_size": 373, "functool": 373, "mul": 373, "len": [373, 376, 410, 421], "_dtype": 373, "_devic": 373, "_dev_str": 373, "_pre_repr": 373, "_post_repr": 373, "ndim": [373, 876, 918, 920, 925], "mt": 373, "answer": [373, 388], "consol": 373, "typeerror": 373, "immut": 373, "behav": 373, "claim": 373, "truli": 373, "_native_wrapp": 373, "attributeerror": 373, "genuin": 373, "some_method": 373, "similarli": [373, 410, 421], "rewritten": 373, "__pow__": 373, "strang": 373, "power": [373, 374, 375, 516, 571, 574, 604, 703, 706, 754, 789, 812, 819, 876, 905, 1136], "enforc": 373, "notic": 373, "appear": [373, 962, 976, 979], "invers": [373, 387, 516, 522, 525, 526, 529, 535, 538, 539, 542, 543, 546, 547, 550, 551, 554, 586, 590, 744, 749, 876, 895, 897, 915, 917], "_wrap_method": 373, "func_wrapp": [373, 389, 390, 391, 392, 393, 394, 395, 396, 397], "__name__": 373, "non_wrapped_method": 373, "_method_wrap": 373, "native_arg": 373, "native_kwarg": 373, "inner_fn": 373, "whist": 373, "unwrap": 373, "transit": 373, "needlessli": 373, "randn": 373, "_unwrap_method": 373, "method_wrap": 373, "compartment": 373, "public": [373, 754, 770], "newshap": 373, "new_shap": 373, "tidi": 373, "shorter": 373, "crystal": 373, "41": [373, 516, 575, 578, 727, 730, 876, 877, 879, 1082, 1107], "enough": [373, 374, 375], "ton": 374, "ado": [374, 375], "incred": [374, 388], "hash": 374, "soup": 374, "walk": [374, 375], "dct": 374, "cnt": 374, "combo": [374, 1124, 1130], "hold": [374, 754, 810, 811], "1000": [374, 516, 727, 730], "uda": 374, "3333": 374, "6667": 374, "178": 374, "new_weight": 374, "0600": 374, "3100": 374, "2400": 374, "6900": 374, "delimit": 374, "autocomplet": 374, "midwai": 374, "agent": 374, "total_spe": 374, "total_height": 374, "total_width": 374, "ag": 374, "tot": 374, "total_": 374, "total_h": 374, "batch_siz": [374, 863, 864, 865, 866, 867, 868, 869, 870, 1049, 1050], "dir": 374, "adam": [374, 375, 376, 828, 830, 833, 835, 837, 845, 847, 1124, 1161, 1163], "cnt0": 374, "cnt1": 374, "diff_0": 374, "diff_1": 374, "config0": 374, "config1": 374, "Not": [374, 375, 388, 409], "decod": 374, "l0": 374, "l1": [374, 876, 940, 942], "depth": [374, 375, 376, 387, 466, 490, 494, 498, 754, 792, 807, 1026, 1038, 1157, 1158], "clearer": 374, "truncat": 374, "decoder__l0": 374, "decoder__l1": 374, "encoder__l0": 374, "encoder__l1": 374, "height": 374, "l0__b": 374, "l0__w": 374, "l1__b": 374, "l1__w": 374, "printabl": 374, "obviou": 374, "foresight": 374, "untidili": 374, "update_ag": 374, "normalize_img": 374, "img": 374, "img_max": 374, "reduce_max": [374, 1124], "img_min": 374, "reduce_min": [374, 1124], "img_rang": 374, "agent_posit": 374, "agent_veloc": 374, "agent_cam_front_rgb": 374, "agent_cam_front_depth": 374, "agent_cam_rear_rgb": 374, "agent_cam_rear_depth": 374, "agent_cam_lidar": 374, "normal": [374, 962, 1006, 1009, 1044, 1045, 1048, 1049, 1054, 1159, 1160], "cleaner": 374, "camera": 374, "front_rgb": 374, "front_depth": 374, "rear_rgb": 374, "rear_depth": 374, "lidar": 374, "rgb": 374, "rear": 374, "veloc": 374, "cam": 374, "cam_max": 374, "cam_min": 374, "cam_rang": 374, "Of": 374, "ideal": 374, "perman": 374, "afterward": 374, "thread": 374, "incorpor": 374, "pretti": 374, "straightforward": 374, "dataload": [374, 386, 1124], "_cnt": 374, "img_": 374, "_dataset_s": 374, "_batch_siz": 374, "_count": [374, 375], "__next__": 374, "filenam": 374, "img_fnam": 374, "fname": 374, "loaded_img": 374, "cv2": 374, "imread": 374, "loader": [374, 388], "batch_slic": 374, "model": [374, 375, 1124], "mymodel": [374, 1124], "linear0": [374, 375, 1124], "linear1": [374, 375, 1124], "x_in": [374, 375, 376, 1124], "001": [374, 375, 828, 830, 833, 1044, 1045, 1048], "loss_fn": [374, 375, 376, 1124], "0145": 374, "grad_fn": 374, "addbackward0": 374, "_create_vari": 375, "output_channel": [375, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1154, 1155], "with_bia": [375, 1145, 1155], "_input_channel": 375, "_output_channel": 375, "_w_shape": 375, "_b_shape": 375, "_with_bia": 375, "8979": 375, "3198": 375, "0196": 375, "3126": 375, "3717": 375, "9687": 375, "6958": 375, "5122": 375, "3902": 375, "8800": 375, "5613": 375, "1982": 375, "nightmar": 375, "overcom": 375, "fc": 375, "9563": 375, "impact": 375, "v0": 375, "v1": 375, "6440": 375, "key0": 375, "1823": 375, "8075": 375, "linear3": 375, "v2": 375, "2346": 375, "counter": 375, "hidden": [375, 863, 873, 1145, 1154], "fed": [375, 466, 510], "1300": 375, "decoupl": 375, "scheme": 375, "weight_initi": [375, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1154, 1155], "glorotuniform": [375, 1136, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1154, 1155], "bias_initi": [375, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1155], "_w_init": 375, "_b_init": 375, "create_vari": [375, 1136], "var_shap": [375, 1136], "fan_out": [375, 1136], "fan_in": [375, 1136], "fan_mod": [375, 1136], "fan_sum": 375, "slight": 375, "misnom": 375, "saw": 375, "vanilla": [375, 1022, 1024], "descent": [375, 828, 840, 842, 1161, 1166], "lar": [375, 828, 845, 847, 849, 851, 1161], "lamb": [375, 828, 845, 847, 1161], "compile_on_next_step": [375, 1157, 1158, 1161, 1162, 1163, 1164, 1165, 1166], "_beta1": 375, "_beta2": 375, "_epsilon": 375, "_mw": 375, "_vw": 375, "_first_pass": 375, "_should_compil": 375, "_step": [375, 1161, 1165], "new_v": 375, "_lr": 375, "isinst": [375, 376, 754, 822], "_inplac": 375, "_stop_gradi": 375, "set_stat": [375, 1161, 1162, 1163, 1164, 1165, 1166], "pre": [376, 388, 466], "captur": 376, "sparse_funct": 376, "num_class": [376, 1049, 1050], "num_dim": 376, "new_axi": 376, "_linear": 376, "to_backend": 376, "jax_graph": 376, "learnabl": [376, 1044, 1045, 1048, 1159, 1160], "to_ivy_modul": [376, 1134], "thinli": 376, "whilst": 376, "to_haiku_modul": 376, "hk": 376, "loss_fn_t": 376, "transform": [376, 387, 863, 871, 872], "without_apply_rng": 376, "rng": 376, "prngkei": 376, "init": 376, "update_rul": 376, "01": [376, 516, 711, 714], "tree_multimap": 376, "mechan": [386, 388, 1124], "vision": [386, 1124], "robot": [386, 1124], "focus": 387, "field": [387, 876, 889, 891, 918, 920, 925, 1066, 1067, 1068], "perfect": 387, "3d": [387, 1145, 1150, 1151], "differenti": 387, "demo": [387, 1124], "orient": 387, "pose": 387, "euler": [387, 409], "quaternion": 387, "rotat": 387, "matric": [387, 410, 421, 425, 426, 863, 872, 876, 877, 879, 883, 886, 888, 889, 891, 892, 894, 895, 897, 905, 906, 908, 909, 911, 915, 917, 918, 920, 922, 924, 925, 927, 928, 930, 934, 936], "angl": [387, 516, 547, 550, 587, 723, 726, 745], "ivy_mech": 387, "target_facing_rotation_matrix": 387, "polar_to_cartesian_coord": 387, "ordin": [387, 876, 922, 924], "warp": 387, "optic": 387, "voxel": 387, "ivy_vis": 387, "coords_to_voxel_grid": 387, "render_pixel_coord": 387, "neural": [387, 863, 1124, 1131, 1145], "radianc": 387, "nerf": 387, "trajectori": 387, "motion": 387, "plan": [387, 1124], "mobil": 387, "ivy_robot": 387, "sample_spline_path": 387, "rigidmobil": 387, "sample_bodi": 387, "drone": 387, "sample_link": 387, "openai": 387, "swimmer": 387, "cumul": [387, 754, 772, 773], "reward": 387, "supervis": 387, "reinforc": 387, "door": [387, 388], "intersect": 387, "cartpol": 387, "mountain_car": 387, "pendulum": 387, "reacher": 387, "polici": 387, "condit": [387, 407, 408, 1026, 1036, 1037, 1061, 1065], "learnt": 387, "ture": 387, "ntm": 387, "egospher": 387, "spatial": 387, "esm": 387, "ivy_memori": 387, "egocentr": 387, "room": 387, "inspir": 387, "doubt": 388, "grate": 388, "put": 388, "probe": 388, "undergo": 388, "remark": 388, "surpris": 388, "backward": [388, 516, 707, 710, 876, 937, 939, 1115, 1116, 1119, 1120, 1123], "lock": 388, "contunu": 388, "minor": 388, "xla": 388, "buffer": 388, "kind": [388, 429, 449, 452, 516, 703, 706, 1082, 1099, 1102, 1107], "gold": 388, "dex": 388, "phase": 388, "lax": 388, "scan": 388, "tricki": 388, "predictor": 388, "tight": 388, "driver": 388, "schedul": 388, "algorithm": [388, 863, 864, 865, 866, 867, 868, 869, 870, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152], "dispatch": 388, "Will": 388, "ast": 388, "dynamic": 388, "cond": 388, "jacobian": 388, "checkpoint": 388, "autodiff": 388, "shine": 388, "merci": 388, "superset": 388, "cluster": 388, "compet": 388, "paradigm": 388, "parallelis": [388, 466, 475, 476], "spmd": 388, "mixtur": [388, 828, 830, 833], "expert": 388, "sophist": 388, "depart": 388, "routin": 388, "hundr": 388, "thousand": 388, "deepli": [388, 1026, 1028], "broadli": 388, "heavili": 388, "supplementari": 388, "Is": 388, "reusabl": 388, "fanci": 388, "fusion": 388, "lose": 388, "vmap": 388, "pmap": 388, "overhead": 388, "ineffici": 388, "eventu": 388, "supplement": 388, "backdoor": 388, "callback": 388, "record": 388, "metric": 388, "somewhat": 388, "outsourc": 388, "inputs_to_ivy_arrai": 389, "gaussian": [399, 400], "leaki": [399, 400, 401], "alpha": [399, 401], "rectifi": [399, 401, 402], "slope": [399, 401], "39": [399, 401, 516, 604, 828, 830, 833, 876, 912, 914, 1082, 1083, 1086, 1110], "85": [399, 401, 516, 575, 578], "48": [399, 401, 516, 727, 730, 828, 830, 833, 876, 912, 914, 1082, 1083, 1086, 1110], "88": [399, 401, 516, 575, 578, 876, 912, 914, 1082, 1083, 1086, 1110], "269": [399, 403], "731": [399, 403], "881": [399, 403], "214": [399, 403], "978": [399, 403], "891": [399, 403], "422": [399, 404], "155": [399, 404], "0768": [399, 404], "231": [399, 404], "693": [399, 404, 946, 957, 960], "49": [399, 404, 516, 727, 730, 1082, 1083, 1086, 1110], "147": [399, 404], "363": [399, 404], "3461": [399, 405], "6491": [399, 405], "535": [399, 405], "hyperbol": [399, 406, 516, 525, 526, 529, 539, 542, 546, 551, 554, 586, 587, 590, 723, 726, 744, 745, 749], "55": [399, 406, 863, 869, 876, 912, 914, 1082, 1083, 1086, 1110], "501": [399, 406], "faster": [407, 408], "invoc": [407, 408], "718281828459045": 409, "newaxi": 409, "alia": 409, "pi": 409, "141592653589793": 409, "mathemat": [409, 516, 530, 547, 550, 608, 611, 686, 689, 876, 940, 942], "half": [410, 411, 1049, 1051, 1052, 1055, 1057], "chosen": [410, 411, 516, 547, 550, 1061, 1065], "distanc": [410, 411], "adjac": [410, 411], "creation_funct": [410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 423, 424, 425, 426, 427, 428], "interpret": [410, 412, 422], "uniniti": [410, 413, 414], "n_row": [410, 415], "n_col": [410, 415], "elsewher": [410, 415, 1061, 1065], "row": [410, 415, 876, 922, 924, 925, 1049, 1050, 1061, 1064], "column": [410, 415, 876, 889, 891, 918, 920, 922, 924, 925], "__dlpack__": [410, 416, 466, 511], "interchang": [410, 416, 962, 1010, 1013], "endpoint": [410, 419], "xy": [410, 421], "coordin": [410, 421, 516, 547, 550], "cartesian": [410, 421], "ij": [410, 421, 1082, 1083, 1086, 1110], "rank": [410, 421, 754, 826, 876, 880, 882, 906, 908, 918, 920, 922, 924, 934, 936, 937, 939, 940, 942, 962, 972, 975, 976, 979, 1006, 1009, 1018, 1021, 1061, 1064, 1115, 1116, 1119, 1120, 1123], "ni": [410, 421], "xi": [410, 421], "n1": [410, 421], "n2": [410, 421], "n3": [410, 421], "accordingli": [410, 421, 516, 608, 611, 876, 940, 942, 1061, 1063, 1066, 1067, 1068, 1070, 1082, 1087, 1090, 1091, 1094, 1095, 1098, 1099, 1102, 1103, 1106, 1107, 1111, 1114, 1115, 1116, 1119, 1120, 1123], "xv": [410, 421], "yv": [410, 421], "triangular": [410, 425, 426, 876, 877, 879, 918, 920], "innermost": [410, 425, 426, 876, 877, 879, 883, 886, 888, 889, 891, 892, 894, 895, 897, 906, 908, 909, 911, 915, 917, 918, 920, 922, 924, 925, 927, 928, 930, 934, 936], "mxn": [410, 425, 426, 876, 886, 888, 897, 906, 908, 909, 911, 915, 917, 918, 920, 927, 928, 930, 934, 936], "defaultdtyp": [429, 430], "defaultfloatdtyp": [429, 431], "float_dtyp": [429, 445, 459], "defaultintdtyp": [429, 432], "dtype_in": [429, 433, 434, 448, 453, 454, 455, 465], "incompat": [429, 437], "occur": [429, 438, 441, 1061, 1062, 1063, 1066, 1067, 1068, 1070], "data_type_funct": [429, 438, 441], "closest": [429, 443, 516, 579, 582, 594, 612, 615, 616, 619, 711, 714, 750, 753], "floatdtyp": [429, 445], "int_dtyp": [429, 446, 460], "intdtyp": [429, 446], "followng": [429, 449], "occupi": [429, 449, 452, 754, 810, 811], "ep": [429, 449, 876, 897, 906, 908, 915, 917], "smallest_norm": [429, 449], "precis": [429, 449, 516, 686, 689, 727, 730], "encapsul": [429, 452], "type1": [429, 456], "type2": [429, 456], "arrays_and_dtyp": [429, 457], "ret1": [429, 461], "ret2": [429, 461], "noinspect": [430, 431, 432, 467, 829], "pyshadowingnam": [430, 431, 432, 467, 829], "defaultdevic": [466, 467], "__enter__": 466, "_dev": 466, "initialis": 466, "devcloneditem": [466, 488], "multidevitem": [466, 468, 471], "devclonedit": 466, "multidevit": [466, 469, 472, 475, 476, 480], "devclonednest": 466, "multidevnest": [466, 470, 473], "devdistitem": 466, "devdistit": 466, "devdistnest": 466, "devmanag": [466, 474], "dev_mapp": 466, "da_dim_s": 466, "safety_factor": 466, "min_dev_dim_s": 466, "max_dev_dim_step_ratio": 466, "min_unit_dev_tune_step": 466, "min_sf_tune_step": 466, "starting_split_factor": 466, "max_split_factor_step_s": 466, "tune_dev_alloc": 466, "tune_dev_split": 466, "mapper": [466, 475, 476], "receivess": 466, "ratio": [466, 828, 845, 847, 1161, 1163], "safe": [466, 475], "oom": 466, "tune": 466, "da_tune_step": 466, "ds_tune_step": 466, "to_clon": 466, "to_distribut": 466, "multidevic": [466, 475], "parallel": [466, 475, 476], "mutlidevic": [466, 475], "repeated_config_check": 466, "tune_step": 466, "devmapp": [466, 476], "ret_fn": [466, 475, 476], "queue_class": [466, 475, 476], "worker_class": [466, 475, 476], "worker": [466, 475, 476], "used_dev": [466, 475], "sf": [466, 475], "devmappermultiproc": 466, "multidev": [466, 477, 478, 479, 498], "profil": 466, "save_dir": [466, 481], "deviceic": [466, 487], "spread": [466, 498], "139740789224448": [466, 500], "physic": [466, 502], "x3": [466, 504], "x4": [466, 504], "process_specif": [466, 505, 515], "percentag": [466, 505], "ram": [466, 505, 512, 515], "alon": [466, 505, 515], "attr_onli": [466, 506], "chunk": [466, 508, 509, 510], "max_chunk_s": [466, 510], "chunk_siz": [466, 510], "input_ax": [466, 510], "output_ax": [466, 510], "feed": [466, 510], "fist": [466, 510], "stream": [466, 511], "caveat": [466, 511], "portabl": [466, 511, 1124], "gb": [466, 512, 515], "reset": [466, 514], "magnitud": [516, 517, 520, 530, 686, 689, 876, 925, 927, 928, 930], "princip": [516, 522, 535, 538, 543], "cosin": [516, 522, 525, 526, 529, 583, 586, 587, 590], "x1_i": [516, 530, 533, 547, 550, 555, 558, 563, 566, 567, 570, 571, 574, 575, 578, 591, 594, 596, 599, 607, 615, 616, 619, 620, 623, 624, 627, 640, 643, 644, 647, 664, 667, 668, 671, 676, 679, 680, 683, 686, 689, 695, 698, 703, 706, 707, 710, 735, 739], "x2_i": [516, 530, 533, 547, 550, 555, 558, 563, 566, 567, 570, 571, 574, 575, 578, 591, 594, 596, 599, 607, 615, 616, 619, 620, 623, 624, 627, 640, 643, 644, 647, 664, 667, 668, 671, 676, 679, 680, 683, 686, 689, 695, 698, 703, 706, 707, 710, 735, 739], "finit": [516, 530, 547, 550, 628, 631, 686, 689, 703, 706, 707, 710], "nor": [516, 530, 686, 689], "nearest": [516, 530, 686, 689, 711, 714], "2019": [516, 530, 608, 611, 686, 689], "commut": [516, 530], "sine": [516, 535, 538, 539, 542, 719, 722, 723, 726], "57": [516, 535, 538, 575, 578, 587], "524": [516, 535, 538], "644": [516, 535, 538], "201": [516, 535, 538, 711, 714], "305": [516, 535, 538], "412": [516, 535, 538], "quotient": [516, 547, 550], "notat": [516, 547, 550, 1082, 1083, 1086, 1110], "denot": [516, 547, 550], "pair": [516, 547, 550, 863, 875, 876, 880, 882], "quadrant": [516, 547, 550], "3\u03c0": [516, 547, 550], "549": [516, 546, 551, 554, 744, 749], "bitwis": [516, 555, 558, 567, 570, 575, 578, 680, 683], "AND": [516, 555, 558, 668, 671, 1115, 1116, 1119], "binari": [516, 555, 558, 567, 570, 575, 578, 680, 683, 946, 947, 950], "invert": [516, 559, 562], "arithmet": [516, 571, 574, 1082, 1091, 1094], "propag": [516, 571, 574, 1082, 1087, 1090, 1091, 1094, 1095, 1098, 1103, 1106, 1107, 1111, 1114], "thu": [516, 571, 574, 703, 706, 707, 710, 876, 889, 891], "lh": [516, 571, 574], "rh": [516, 571, 574], "xor": [516, 575, 578, 680, 683], "78": [516, 575, 578, 876, 912, 914, 1082, 1083, 1086, 1110], "91": [516, 575, 578, 876, 912, 914, 1082, 1083, 1086, 1110], "23": [516, 575, 578, 863, 869, 876, 886, 888, 1061, 1065], "66": [516, 575, 578, 876, 912, 914, 1082, 1083, 1086, 1110], "77": [516, 575, 578, 876, 912, 914, 1082, 1083, 1086, 1110], "79": [516, 575, 578], "89": [516, 575, 578, 876, 931, 933, 1082, 1107], "98": [516, 575, 578, 876, 912, 914, 1061, 1065, 1082, 1083, 1086, 1110], "26": [516, 575, 578, 828, 830, 833, 863, 870, 876, 886, 888, 912, 914, 931, 933, 1082, 1083, 1086, 1110], "21": [516, 575, 578, 754, 772, 876, 886, 888, 912, 914, 946, 957, 960, 1082, 1083, 1086, 1110], "34": [516, 575, 578, 727, 730], "24": [516, 575, 578, 727, 730, 754, 772, 828, 830, 833, 876, 886, 888, 912, 914, 1082, 1083, 1086, 1110], "51": [516, 575, 578], "27": [516, 575, 578, 587, 727, 730, 863, 875, 876, 912, 914, 1082, 1083, 1086, 1110], "74": [516, 575, 578], "59": [516, 575, 578], "416": [516, 583], "122": [516, 587], "368": [516, 587], "670": [516, 587], "202": [516, 587, 711, 714], "548": [516, 587], "1490": [516, 587], "dividend": [516, 591, 707, 710], "divisor": [516, 591, 707, 710, 828, 830, 833, 835, 837, 845, 847, 1082, 1103, 1106, 1111, 1114, 1161, 1162, 1163], "gauss": [516, 600, 603], "exponenti": [516, 533, 600, 603, 604, 607, 664, 667, 703, 706], "logarithm": [516, 533, 604, 607, 648, 651, 652, 655, 656, 659, 660, 663, 664, 667, 876, 885, 921], "72": [516, 604, 828, 830, 833, 876, 912, 914, 1082, 1083, 1086, 1110], "accur": [516, 608, 611], "fdlibm": [516, 608, 611], "compliant": [516, 608, 611, 672, 675, 676, 679, 1082, 1087, 1090, 1091, 1094, 1095, 1098], "greatest": [516, 594, 612, 615, 616, 619], "out_i": [516, 628, 631, 632, 635, 636, 639], "threshold": [516, 684, 685], "exce": [516, 685], "y_i": [516, 691, 694], "expon": [516, 703, 706, 754, 819], "versu": [516, 703, 706], "odd": [516, 703, 706], "modulu": [516, 707, 710], "primarili": [516, 707, 710], "5654": [516, 711, 714], "034": [516, 711, 714], "433": [516, 711, 714], "343": [516, 711, 714], "44": [516, 711, 714, 727, 730, 731, 734, 876, 912, 914, 1061, 1065, 1082, 1083, 1086, 1110], "30": [516, 711, 714, 876, 912, 914, 1082, 1083, 1086, 1110, 1136, 1142], "81": [516, 711, 714, 731, 734, 1082, 1083, 1086, 1110], "527": [516, 711, 714], "301": [516, 711, 714], "indistinguish": [516, 727, 730], "infinit": [516, 727, 730], "83": [516, 727, 730], "32455532": [516, 727, 730], "89897949": [516, 727, 730], "50": [516, 727, 730, 876, 912, 914, 1061, 1064, 1082, 1083, 1086, 1110], "31": [516, 727, 730], "169": [516, 727, 730], "47": [516, 727, 730], "73": [516, 727, 730, 876, 877, 879, 1044, 1045, 1048], "93": [516, 727, 730], "35": [516, 727, 730, 863, 875, 876, 880, 882, 1061, 1065, 1082, 1083, 1086, 1110], "09": [516, 731, 734, 863, 875], "61": [516, 731, 734, 946, 947, 950], "546": [516, 740], "842": [516, 740], "916": [516, 740, 946, 947, 950], "996": [516, 740], "328": [516, 740], "real": [516, 745], "462": [516, 745], "604": [516, 745], "984": [516, 745], "997": [516, 745, 1044, 1045, 1048], "decim": [516, 750, 753], "inspect": [754, 760, 1128, 1129], "downscal": [754, 766, 767, 769], "60": [754, 772, 876, 912, 914, 1082, 1083, 1086, 1110], "default_v": [754, 775], "catch_except": [754, 775], "rev": [754, 775], "with_cal": [754, 775], "arrang": [754, 776], "123": [754, 779], "mod": [754, 780], "max_freq": [754, 781], "num_band": [754, 781], "pad": [754, 781, 863, 864, 865, 866, 867, 868, 869, 870, 962, 972, 975, 1018, 1021, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152], "fourier": [754, 781], "band": [754, 781], "linearli": [754, 781, 876, 922, 924], "oppos": [754, 781], "geometr": [754, 781], "seen_set": [754, 792], "local_set": [754, 792], "decrement": [754, 796], "is_arrai": 754, "allow_dupl": [754, 804], "forkserv": [754, 805], "spawn": [754, 805], "hot": [754, 807], "scatter": [754, 807, 810, 811], "overrid": [754, 807], "tmp_dr": [754, 815], "temporari": [754, 815], "min_denomin": [754, 818], "stabil": [754, 818, 819, 1071, 1072, 1075, 1077, 1080], "_min_denomin": [754, 818], "min_bas": [754, 819], "_min_bas": [754, 819, 1044, 1045, 1048, 1159, 1160], "100000023841858": [754, 822], "200000047683716": [754, 822], "299999952316284": [754, 822], "400000095367432": [754, 822], "599999904632568": [754, 822], "101": [754, 823], "unpack": [754, 826], "gradienttrack": [828, 829], "delta": [828, 830, 833], "cost": [828, 830, 833, 835, 837, 840, 842, 845, 847, 849, 851, 853, 855, 1022, 1023, 1024, 1025], "ws": [828, 830, 833, 835, 837, 840, 842, 845, 847, 849, 851, 853, 855], "en": [828, 830, 833, 835, 837], "wikipedia": [828, 830, 833, 835, 837], "wiki": [828, 830, 833, 835, 837], "stochastic_gradient_desc": [828, 830, 833, 835, 837], "dc": [828, 830, 833, 835, 837, 840, 842, 845, 847, 849, 851, 853, 855], "dw": [828, 830, 833, 835, 837, 840, 842, 845, 847, 849, 851, 853, 855], "averag": [828, 830, 833, 835, 837, 845, 847, 1022, 1023, 1024], "forget": [828, 830, 833, 835, 837, 845, 847, 1161, 1162, 1163], "004": [828, 830, 833], "009": [828, 830, 833], "86": [828, 830, 833], "28": [828, 830, 833, 863, 866, 869, 870, 876, 912, 914, 1082, 1083, 1086, 1110], "45": [828, 830, 833, 876, 912, 914, 962, 1001, 1044, 1045, 1048, 1082, 1083, 1086, 1110], "0125": [828, 830, 833], "601": [828, 830, 833], "581": [828, 830, 833], "025": [828, 830, 833], "992": [828, 830, 833], "209": [828, 830, 833, 1066, 1067], "271": [828, 830, 833], "0717": [828, 830, 833], "142": [828, 830, 833], "182": [828, 830, 833], "624": [828, 830, 833, 1049, 1055, 1057], "06": [828, 830, 833], "02": [828, 830, 833], "744": [828, 830, 833], "626": [828, 830, 833], "65": [828, 830, 833, 876, 912, 914, 1082, 1083, 1086, 1110], "024": [828, 830, 833], "096": [828, 830, 833], "216": [828, 830, 833], "384": [828, 830, 833], "rate": [828, 835, 837, 840, 842, 845, 847, 849, 851, 853, 855, 1022, 1023, 1024, 1025, 1145, 1156, 1161, 1162, 1163, 1164, 1165, 1166], "ws_new": [828, 835, 837, 840, 842, 845, 847, 849, 851, 853, 855], "retain": [828, 839], "trust": [828, 845, 847, 1161, 1163], "decai": [828, 845, 847, 849, 851, 1161, 1163, 1164], "layerwis": [828, 849, 851, 1161, 1164], "stride": [863, 864, 865, 866, 867, 868, 869, 870, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152], "data_format": [863, 864, 865, 866, 867, 868, 869, 870, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152], "nwc": [863, 864, 865, 1145, 1146, 1147], "dilat": [863, 864, 865, 866, 867, 868, 869, 870, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152], "convolut": [863, 864, 865, 866, 867, 868, 869, 870, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152], "d_in": [863, 864, 865, 866, 867, 868, 869], "fw": [863, 864, 865, 866, 867, 868, 869, 870], "d_out": [863, 864, 865, 866, 867, 868, 869], "slide": [863, 864, 865, 866, 867, 868, 869, 870, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152], "ncw": [863, 864, 865, 1145, 1146, 1147], "wio": [863, 864], "output_shap": [863, 865, 867, 869, 1145, 1147, 1149, 1151], "nhwc": [863, 866, 867, 870, 1145, 1148, 1149, 1152], "fh": [863, 866, 867, 868, 869, 870], "nchw": [863, 866, 867, 870, 1145, 1148, 1149, 1152], "hwio": [863, 866], "unequ": [863, 866], "unsqueez": [863, 866, 870], "ndhwc": [863, 868, 869, 1145, 1150, 1151], "volum": [863, 868], "fd": [863, 868, 869], "ncdhw": [863, 868, 869, 1145, 1150, 1151], "dhwio": [863, 868], "256": [863, 869], "258": [863, 869], "128": [863, 869, 876, 912, 914], "depthwis": [863, 870, 1145, 1152], "333": [863, 870], "inp": [863, 870], "prob": [863, 871, 1049, 1050, 1145, 1153], "randomli": [863, 871, 1145, 1153], "bernoulli": [863, 871], "out_featur": [863, 871, 872], "incom": [863, 872], "outer_batch_shap": [863, 872], "inner_batch_shap": [863, 872], "in_featur": [863, 872], "cell": [863, 873, 1145, 1154], "num_queri": [863, 874, 875], "x_feat_dim": [863, 874], "num_kei": [863, 874, 875], "cont_feat_dim": [863, 874], "numhead": [863, 874], "feat_dim": [863, 874, 875], "out_feat_dim": [863, 874], "score": [863, 875], "04": [863, 875], "03": [863, 875, 1044, 1045, 1048], "08": [863, 875], "decomposit": [876, 877, 879, 918, 920, 925], "symmetr": [876, 877, 879, 889, 891, 892, 894, 943, 945], "u": [876, 877, 879, 925], "577": [876, 877, 879], "707": [876, 877, 879], "vif": [876, 880, 882], "92": [876, 883], "293": [876, 883], "46997": [876, 883], "eigendecomposit": [876, 889, 891], "qlq\u1d40": [876, 889, 891], "orthogon": [876, 889, 891], "eig": [876, 889, 891], "eigenvalu": [876, 889, 891, 892, 894], "eigenvector": [876, 889, 891], "75": [876, 895, 912, 914], "prepend": [876, 898, 901], "singular": [876, 897, 906, 908, 915, 917, 925, 927, 928, 930], "toler": [876, 897, 906, 908, 915, 917], "largest_singular_valu": [876, 897, 906, 908, 915, 917], "array_lik": [876, 912, 914], "33": [876, 912, 914, 1044, 1045, 1048, 1082, 1083, 1086, 1110], "36": [876, 912, 914, 1082, 1083, 1086, 1110], "84": [876, 912, 914, 1082, 1083, 1086, 1110], "105": [876, 912, 914, 946, 947, 950], "112": [876, 912, 914, 1082, 1083, 1086, 1110], "104": [876, 912, 914, 1082, 1083, 1086, 1110], "120": [876, 912, 914], "moor": [876, 897, 915, 917], "penros": [876, 897, 915, 917], "pseudo": [876, 897, 915, 917], "orthonorm": [876, 918, 920, 925], "2d": [876, 885, 921, 1145, 1148, 1149, 1152], "logdet": [876, 885, 921], "coeffici": [876, 922, 924], "usvh": [876, 925], "vh": [876, 925], "hermitian": [876, 925], "et": [876, 925], "cetera": [876, 925], "adjoint": [876, 925], "reconstruct": [876, 925, 1066, 1067, 1069], "reconstructed_x": [876, 925], "contract": [876, 931, 933, 1082, 1083, 1086, 1110], "doubl": [876, 931, 933], "singleton": [876, 940, 942, 962, 1002, 1005, 1061, 1063, 1082, 1087, 1090, 1091, 1094, 1095, 1098, 1099, 1102, 1103, 1106, 1107, 1111, 1114, 1115, 1116, 1119, 1120, 1123], "liter": [876, 940, 942], "manhattan": [876, 940, 942], "l2": [876, 940, 942], "euclidean": [876, 940, 942], "mathbf": [876, 943, 945], "mathbb": [876, 943, 945], "skew": [876, 943, 945], "entropi": [946, 947, 950, 952, 955, 957, 960], "predict": [946, 947, 950, 952, 955, 957, 960], "smooth": [946, 947, 950, 952, 955, 957, 960], "223": [946, 947, 950], "357": [946, 947, 950, 957, 960], "511": [946, 947, 950], "discret": [946, 952, 955], "3862944": [946, 952, 955], "35667497": [946, 952, 955], "spars": [946, 957, 960], "logit": [946, 957, 960], "793291": [946, 957, 960], "512926": [946, 957, 960], "before_1": [962, 972, 975, 1018, 1021], "after_1": [962, 972, 975, 1018, 1021], "before_n": [962, 972, 975, 1018, 1021], "after_n": [962, 972, 975, 1018, 1021], "insert": [962, 976, 979, 1026, 1031, 1061, 1062], "manipulation_funct": [962, 976, 979], "reorder": [962, 980, 983], "permut": [962, 984, 987, 1010, 1013], "repetit": [962, 988, 991, 1014, 1017], "restor": [962, 996, 999], "classivi": [962, 1001], "famili": [962, 1006, 1009], "intxx": [962, 1006, 1009], "floatxx": [962, 1006, 1009], "fomaml_step": 1022, "inner_cost_fn": [1022, 1023, 1024], "outer_cost_fn": [1022, 1023, 1024], "inner_grad_step": [1022, 1023, 1024, 1025], "inner_learning_r": [1022, 1023, 1024, 1025], "inner_optimization_step": [1022, 1023, 1024, 1025], "inner_batch_fn": [1022, 1023, 1024], "outer_batch_fn": [1022, 1023, 1024], "average_across_step": [1022, 1023, 1024], "inner_v": [1022, 1023, 1024], "keep_inner_v": [1022, 1023, 1024], "outer_v": [1022, 1023, 1024], "keep_outer_v": [1022, 1023, 1024], "return_inner_v": [1022, 1023, 1024, 1025], "num_task": [1022, 1023, 1024, 1025], "maml": [1022, 1023, 1024], "recev": [1022, 1023, 1024], "0x7f01414b6820": [1022, 1023, 1024, 1025], "maml_step": 1022, "rece": [1022, 1024], "reptile_step": 1022, "cost_fn": [1022, 1025], "reptil": [1022, 1025], "receivng": [1022, 1025], "all_nested_indic": 1026, "include_nest": [1026, 1027], "_index": [1026, 1027, 1037], "_base": [1026, 1027, 1036, 1037], "copy_nest": 1026, "to_mut": [1026, 1028, 1038], "mutabl": [1026, 1028, 1038], "insert_into_nest_at_index": 1026, "insert_into_nest_at_indic": 1026, "map_nest_at_index": 1026, "map_nest_at_indic": 1026, "multi_index_nest": 1026, "nested_ani": 1026, "check_nest": [1026, 1036, 1037], "conditon": [1026, 1036, 1037], "nested_indices_wher": 1026, "stop_after_n_found": [1026, 1037], "_depth": [1026, 1038], "_tuple_check_fn": [1026, 1038], "_list_check_fn": [1026, 1038], "_dict_check_fn": [1026, 1038], "nested_multi_map": 1026, "nest0": [1026, 1039], "ivy_arrai": [1026, 1039], "funciton": [1026, 1039], "prune_nest_at_index": 1026, "prune_nest_at_indic": 1026, "set_nest_at_index": 1026, "set_nest_at_indic": 1026, "mini": [1044, 1045, 1048, 1159, 1160], "gamma": [1044, 1045, 1048], "beta": [1044, 1045, 1048], "0976": [1044, 1045, 1048], "3452": [1044, 1045, 1048], "2740": [1044, 1045, 1048], "1047": [1044, 1045, 1048], "5886": [1044, 1045, 1048], "2732": [1044, 1045, 1048], "7696": [1044, 1045, 1048], "7024": [1044, 1045, 1048], "2518": [1044, 1045, 1048], "58": [1044, 1045, 1048, 1066, 1067], "283": [1044, 1045, 1048], "585": [1044, 1045, 1048], "909": [1044, 1045, 1048], "628": [1044, 1045, 1048], "225": [1044, 1045, 1048], "425": [1044, 1045, 1048], "norm_idx": [1044, 1045, 1048], "228": [1044, 1045, 1048], "0285": [1044, 1045, 1048], "199": [1044, 1045, 1048], "204": [1044, 1045, 1048], "population_s": [1049, 1050], "num_sampl": [1049, 1050], "draw": [1049, 1050, 1054, 1055, 1057], "unnorm": [1049, 1050], "drawn": [1049, 1050, 1051, 1052, 1054, 1055, 1057], "home": [1049, 1050, 1054], "uniformli": [1049, 1051, 1052, 1055, 1057], "highest": [1049, 1051, 1052], "parameter": [1049, 1054, 1055, 1057], "6444774682897879": [1049, 1054], "811": [1049, 1054], "508": [1049, 1054], "564": [1049, 1054], "7268672": [1049, 1054], "968": [1049, 1054], "175": [1049, 1054, 1066, 1067], "064": [1049, 1054], "40935726": [1049, 1054], "556": [1049, 1054], "26431865": [1049, 1055, 1057], "475": [1049, 1055, 1057], "878": [1049, 1055, 1057], "861": [1049, 1055, 1057], "89150229": [1049, 1055, 1057], "89629126": [1049, 1055, 1057], "94198485": [1049, 1055, 1057], "91405606": [1049, 1055, 1057], "72848724": [1049, 1055, 1057], "7550739": [1049, 1055, 1057], "00109": [1049, 1055, 1057], "occurr": [1061, 1062, 1063, 1066, 1067], "yield": [1061, 1065], "43": [1061, 1065], "x_j": [1066, 1067, 1068, 1070], "impli": [1066, 1067, 1068, 1070], "inverse_indic": [1066, 1067, 1069], "aggreg": [1066, 1067], "fourth": [1066, 1067], "607": [1066, 1067], "735": [1066, 1067], "667": [1066, 1067], "381": [1066, 1067], "857": [1066, 1067], "0396": [1066, 1067], "166": [1066, 1067], "828": [1066, 1067], "144": [1066, 1067], "40501155": [1066, 1067], "77361575": [1066, 1067], "97776199": [1066, 1067], "36831157": [1066, 1067], "89148434": [1066, 1067], "9512272": [1066, 1067], "67542176": [1066, 1067], "41985657": [1066, 1067], "23478023": [1066, 1067], "1141": [1066, 1067], "8101": [1066, 1067], "9298": [1066, 1067], "8460": [1066, 1067], "2119": [1066, 1067], "3519": [1066, 1067], "6252": [1066, 1067], "4033": [1066, 1067], "7443": [1066, 1067], "2577": [1066, 1067], "3707": [1066, 1067], "0545": [1066, 1067], "3238": [1066, 1067], "5944": [1066, 1067], "0775": [1066, 1067], "4327": [1066, 1067], "176": [1066, 1067], "889": [1066, 1067], "763": [1066, 1067], "071": [1066, 1067], "262": [1066, 1067], "456": [1066, 1067], "114": [1066, 1067], "349": [1066, 1067], "615": [1066, 1067], "594": [1066, 1067], "335": [1066, 1067], "212": [1066, 1067], "457": [1066, 1067], "827": [1066, 1067], "ascend": [1071, 1072, 1075], "einstein": [1082, 1083, 1086, 1110], "summat": [1082, 1083, 1086, 1110], "seq": [1082, 1083, 1086, 1110], "jk": [1082, 1083, 1086, 1110], "ik": [1082, 1083, 1086, 1110], "126": [1082, 1083, 1086, 1110], "510": [1082, 1083, 1086, 1110], "99": [1082, 1083, 1086, 1110], "108": [1082, 1083, 1086, 1110], "117": [1082, 1083, 1086, 1110], "sentinel": [1082, 1087, 1090, 1095, 1098], "unsign": [1082, 1099, 1102, 1107], "degre": [1082, 1103, 1106, 1111, 1114], "bessel": [1082, 1103, 1106, 1111, 1114], "8164966": [1082, 1103, 1106], "varianc": [1082, 1111, 1114], "unbias": [1082, 1111, 1114], "simplicit": [1115, 1116, 1119], "autom": 1124, "grow": 1124, "ai": 1124, "got": 1124, "colab": 1124, "sharp": 1124, "weekli": 1124, "event": 1124, "immedi": 1124, "favorit": 1124, "jax_concat": 1124, "tf_concat": 1124, "np_concat": 1124, "mx_concat": 1124, "torch_concat": 1124, "prompt": 1124, "get_devic": 1124, "reduce_prod": 1124, "gradient_imag": 1124, "linalg": 1124, "bilinear_resampl": 1124, "stack_imag": 1124, "neural_net": 1124, "ecosystem": [1124, 1130], "popular": [1124, 1130], "acceler": 1124, "articl": 1124, "lenton2021ivi": 1124, "inter": 1124, "lenton": 1124, "daniel": 1124, "pardo": 1124, "fabio": 1124, "falck": 1124, "fabian": 1124, "jame": 1124, "stephen": 1124, "clark": 1124, "ronald": 1124, "journal": 1124, "arxiv": 1124, "preprint": 1124, "2102": 1124, "02886": 1124, "2021": 1124, "add_array_spec": 1127, "fn_array_spec": 1127, "geglu": 1131, "native_modul": [1134, 1135], "native_module_class": [1134, 1135], "firstlayersiren": 1136, "kaimingnorm": [1136, 1140], "negative_slop": 1136, "Ones": 1136, "siren": 1136, "w0": [1136, 1142], "filter_s": [1145, 1146, 1147], "1d": [1145, 1146, 1147], "conv1dtranspos": 1145, "filter_shap": [1145, 1148, 1149, 1150, 1151, 1152], "conv2dtranspos": 1145, "conv3dtranspos": 1145, "depthwiseconv2d": 1145, "num_channel": [1145, 1152], "bernoul": [1145, 1153], "num_lay": [1145, 1154], "return_sequ": [1145, 1154], "return_st": [1145, 1154], "get_initial_st": [1145, 1154], "dens": [1145, 1155], "multiheadattent": 1145, "query_dim": [1145, 1156], "head_dim": [1145, 1156], "dropout_r": [1145, 1156], "context_dim": [1145, 1156], "with_to_q_fn": [1145, 1156], "with_to_kv_fn": [1145, 1156], "with_to_out_fn": [1145, 1156], "build_mod": [1145, 1156, 1157, 1158], "on_init": [1145, 1156, 1157, 1158], "__call__": [1145, 1156, 1157, 1158], "store_var": [1157, 1158], "arg_stateful_idx": [1157, 1158], "kwarg_stateful_idx": [1157, 1158], "fallback_to_non_compil": [1157, 1158, 1161, 1165], "with_partial_v": [1157, 1158], "initialz": [1157, 1158], "from_cal": [1157, 1158], "check_submod_ret": [1157, 1158], "get_mod_kei": [1157, 1158], "top_mod": [1157, 1158], "mod_depth": [1157, 1158], "mod_height": [1157, 1158], "mod_with_top_mod_key_chain": [1157, 1158], "save_weight": [1157, 1158], "weights_path": [1157, 1158], "show_mod_in_top_mod": [1157, 1158], "upper_depth": [1157, 1158], "lower_depth": [1157, 1158], "show_structur": [1157, 1158], "show_v_in_top_v": [1157, 1158], "sub_mod": [1157, 1158], "show_v": [1157, 1158], "track_submod_call_ord": [1157, 1158], "track_submod_ret": [1157, 1158], "v_with_top_v_key_chain": [1157, 1158], "layernorm": 1159, "normalized_shap": [1159, 1160], "elementwise_affin": [1159, 1160], "trail": [1159, 1160], "affin": [1159, 1160], "0001": [1161, 1162, 1163], "init_on_first_step": [1161, 1165], "ignore_miss": [1161, 1165], "overriden": [1161, 1165], "sgd": 1161, "stochast": [1161, 1166], "sub_modul": [1167, 1168]}, "objects": {"ivy.array": [[0, 0, 0, "-", "activations"], [2, 0, 0, "-", "array_methods"], [117, 0, 0, "-", "conversions"], [122, 0, 0, "-", "creation"], [124, 0, 0, "-", "data_type"], [126, 0, 0, "-", "device"], [128, 0, 0, "-", "elementwise"], [130, 0, 0, "-", "general"], [132, 0, 0, "-", "gradients"], [134, 0, 0, "-", "image"], [136, 0, 0, "-", "layers"], [138, 0, 0, "-", "linear_algebra"], [140, 0, 0, "-", "losses"], [142, 0, 0, "-", "manipulation"], [144, 0, 0, "-", "norms"], [146, 0, 0, "-", "random"], [148, 0, 0, "-", "searching"], [150, 0, 0, "-", "set"], [152, 0, 0, "-", "sorting"], [154, 0, 0, "-", "statistical"], [156, 0, 0, "-", "utility"], [158, 0, 0, "-", "wrapping"]], "ivy.array.activations": [[1, 1, 1, "", "ArrayWithActivations"]], "ivy.array.array_methods": [[518, 2, 1, "", "abs"], [526, 2, 1, "", "acos"], [527, 2, 1, "", "acosh"], [831, 2, 1, "", "adam_step"], [664, 2, 1, "", "add"], [8, 2, 1, "", "add_ivy_array_instance_methods"], [1117, 2, 1, "", "all"], [756, 2, 1, "", "all_equal"], [1121, 2, 1, "", "any"], [1073, 2, 1, "", "argsort"], [536, 2, 1, "", "asin"], [540, 2, 1, "", "asinh"], [551, 2, 1, "", "atan"], [548, 2, 1, "", "atan2"], [552, 2, 1, "", "atanh"], [948, 2, 1, "", "binary_cross_entropy"], [556, 2, 1, "", "bitwise_and"], [560, 2, 1, "", "bitwise_invert"], [564, 2, 1, "", "bitwise_left_shift"], [568, 2, 1, "", "bitwise_or"], [572, 2, 1, "", "bitwise_right_shift"], [576, 2, 1, "", "bitwise_xor"], [439, 2, 1, "", "can_cast"], [580, 2, 1, "", "ceil"], [878, 2, 1, "", "cholesky"], [964, 2, 1, "", "clip"], [969, 2, 1, "", "concat"], [973, 2, 1, "", "constant_pad"], [584, 2, 1, "", "cos"], [588, 2, 1, "", "cosh"], [881, 2, 1, "", "cross"], [953, 2, 1, "", "cross_entropy"], [921, 2, 1, "", "det"], [887, 2, 1, "", "diagonal"], [616, 2, 1, "", "divide"], [890, 2, 1, "", "eigh"], [893, 2, 1, "", "eigvalsh"], [1084, 2, 1, "", "einsum"], [624, 2, 1, "", "equal"], [601, 2, 1, "", "erf"], [664, 2, 1, "", "exp"], [977, 2, 1, "", "expand_dims"], [609, 2, 1, "", "expm1"], [981, 2, 1, "", "flip"], [616, 2, 1, "", "floor"], [617, 2, 1, "", "floor_divide"], [784, 2, 1, "", "gather_nd"], [624, 2, 1, "", "greater"], [625, 2, 1, "", "greater_equal"], [915, 2, 1, "", "inv"], [629, 2, 1, "", "isfinite"], [633, 2, 1, "", "isinf"], [637, 2, 1, "", "isnan"], [1046, 2, 1, "", "layer_norm"], [641, 2, 1, "", "less"], [645, 2, 1, "", "less_equal"], [649, 2, 1, "", "log"], [653, 2, 1, "", "log10"], [657, 2, 1, "", "log1p"], [661, 2, 1, "", "log2"], [665, 2, 1, "", "logaddexp"], [669, 2, 1, "", "logical_and"], [673, 2, 1, "", "logical_not"], [677, 2, 1, "", "logical_or"], [681, 2, 1, "", "logical_xor"], [899, 2, 1, "", "matmul"], [903, 2, 1, "", "matrix_norm"], [907, 2, 1, "", "matrix_rank"], [910, 2, 1, "", "matrix_transpose"], [1088, 2, 1, "", "max"], [1092, 2, 1, "", "mean"], [1096, 2, 1, "", "min"], [687, 2, 1, "", "multiply"], [692, 2, 1, "", "negative"], [696, 2, 1, "", "not_equal"], [913, 2, 1, "", "outer"], [985, 2, 1, "", "permute_dims"], [916, 2, 1, "", "pinv"], [700, 2, 1, "", "positive"], [704, 2, 1, "", "pow"], [1100, 2, 1, "", "prod"], [919, 2, 1, "", "qr"], [708, 2, 1, "", "remainder"], [989, 2, 1, "", "repeat"], [993, 2, 1, "", "reshape"], [997, 2, 1, "", "roll"], [712, 2, 1, "", "round"], [716, 2, 1, "", "sign"], [720, 2, 1, "", "sin"], [724, 2, 1, "", "sinh"], [923, 2, 1, "", "solve"], [1078, 2, 1, "", "sort"], [958, 2, 1, "", "sparse_cross_entropy"], [728, 2, 1, "", "sqrt"], [732, 2, 1, "", "square"], [1003, 2, 1, "", "squeeze"], [1007, 2, 1, "", "stack"], [1104, 2, 1, "", "std"], [737, 2, 1, "", "subtract"], [1108, 2, 1, "", "sum"], [928, 2, 1, "", "svd"], [929, 2, 1, "", "svdvals"], [1011, 2, 1, "", "swapaxes"], [742, 2, 1, "", "tan"], [747, 2, 1, "", "tanh"], [932, 2, 1, "", "tensordot"], [1015, 2, 1, "", "tile"], [935, 2, 1, "", "trace"], [751, 2, 1, "", "trunc"], [1112, 2, 1, "", "var"], [938, 2, 1, "", "vecdot"], [941, 2, 1, "", "vector_norm"], [944, 2, 1, "", "vector_to_skew_symmetric_matrix"], [1019, 2, 1, "", "zero_pad"]], "ivy.array.conversions": [[118, 2, 1, "", "args_to_ivy"], [119, 2, 1, "", "args_to_native"], [120, 2, 1, "", "to_ivy"], [121, 2, 1, "", "to_native"]], "ivy.array.creation": [[123, 1, 1, "", "ArrayWithCreation"]], "ivy.array.data_type": [[125, 1, 1, "", "ArrayWithDataTypes"]], "ivy.array.data_type.ArrayWithDataTypes": [[125, 3, 1, "", "can_cast"]], "ivy.array.device": [[127, 1, 1, "", "ArrayWithDevice"]], "ivy.array.elementwise": [[129, 1, 1, "", "ArrayWithElementwise"]], "ivy.array.elementwise.ArrayWithElementwise": [[129, 3, 1, "", "abs"], [129, 3, 1, "", "acos"], [129, 3, 1, "", "acosh"], [129, 3, 1, "", "add"], [129, 3, 1, "", "asin"], [129, 3, 1, "", "asinh"], [129, 3, 1, "", "atan"], [129, 3, 1, "", "atan2"], [129, 3, 1, "", "atanh"], [129, 3, 1, "", "bitwise_and"], [129, 3, 1, "", "bitwise_invert"], [129, 3, 1, "", "bitwise_left_shift"], [129, 3, 1, "", "bitwise_or"], [129, 3, 1, "", "bitwise_right_shift"], [129, 3, 1, "", "bitwise_xor"], [129, 3, 1, "", "ceil"], [129, 3, 1, "", "cos"], [129, 3, 1, "", "cosh"], [129, 3, 1, "", "divide"], [129, 3, 1, "", "equal"], [129, 3, 1, "", "erf"], [129, 3, 1, "", "exp"], [129, 3, 1, "", "expm1"], [129, 3, 1, "", "floor"], [129, 3, 1, "", "floor_divide"], [129, 3, 1, "", "greater"], [129, 3, 1, "", "greater_equal"], [129, 3, 1, "", "isfinite"], [129, 3, 1, "", "isinf"], [129, 3, 1, "", "isnan"], [129, 3, 1, "", "less"], [129, 3, 1, "", "less_equal"], [129, 3, 1, "", "log"], [129, 3, 1, "", "log10"], [129, 3, 1, "", "log1p"], [129, 3, 1, "", "log2"], [129, 3, 1, "", "logaddexp"], [129, 3, 1, "", "logical_and"], [129, 3, 1, "", "logical_not"], [129, 3, 1, "", "logical_or"], [129, 3, 1, "", "logical_xor"], [129, 3, 1, "", "multiply"], [129, 3, 1, "", "negative"], [129, 3, 1, "", "not_equal"], [129, 3, 1, "", "positive"], [129, 3, 1, "", "pow"], [129, 3, 1, "", "remainder"], [129, 3, 1, "", "round"], [129, 3, 1, "", "sign"], [129, 3, 1, "", "sin"], [129, 3, 1, "", "sinh"], [129, 3, 1, "", "sqrt"], [129, 3, 1, "", "square"], [129, 3, 1, "", "subtract"], [129, 3, 1, "", "tan"], [129, 3, 1, "", "tanh"], [129, 3, 1, "", "trunc"]], "ivy.array.general": [[131, 1, 1, "", "ArrayWithGeneral"]], "ivy.array.general.ArrayWithGeneral": [[131, 3, 1, "", "all_equal"], [131, 3, 1, "", "gather_nd"]], "ivy.array.gradients": [[133, 1, 1, "", "ArrayWithGradients"]], "ivy.array.gradients.ArrayWithGradients": [[133, 3, 1, "", "adam_step"]], "ivy.array.image": [[135, 1, 1, "", "ArrayWithImage"]], "ivy.array.layers": [[137, 1, 1, "", "ArrayWithLayers"]], "ivy.array.linear_algebra": [[139, 1, 1, "", "ArrayWithLinearAlgebra"]], "ivy.array.linear_algebra.ArrayWithLinearAlgebra": [[139, 3, 1, "", "cholesky"], [139, 3, 1, "", "cross"], [139, 3, 1, "", "det"], [139, 3, 1, "", "diagonal"], [139, 3, 1, "", "eigh"], [139, 3, 1, "", "eigvalsh"], [139, 3, 1, "", "inv"], [139, 3, 1, "", "matmul"], [139, 3, 1, "", "matrix_norm"], [139, 3, 1, "", "matrix_rank"], [139, 3, 1, "", "matrix_transpose"], [139, 3, 1, "", "outer"], [139, 3, 1, "", "pinv"], [139, 3, 1, "", "qr"], [139, 3, 1, "", "solve"], [139, 3, 1, "", "svd"], [139, 3, 1, "", "svdvals"], [139, 3, 1, "", "tensordot"], [139, 3, 1, "", "trace"], [139, 3, 1, "", "vecdot"], [139, 3, 1, "", "vector_norm"], [139, 3, 1, "", "vector_to_skew_symmetric_matrix"]], "ivy.array.losses": [[141, 1, 1, "", "ArrayWithLosses"]], "ivy.array.losses.ArrayWithLosses": [[141, 3, 1, "", "binary_cross_entropy"], [141, 3, 1, "", "cross_entropy"], [141, 3, 1, "", "sparse_cross_entropy"]], "ivy.array.manipulation": [[143, 1, 1, "", "ArrayWithManipulation"]], "ivy.array.manipulation.ArrayWithManipulation": [[143, 3, 1, "", "clip"], [143, 3, 1, "", "concat"], [143, 3, 1, "", "constant_pad"], [143, 3, 1, "", "expand_dims"], [143, 3, 1, "", "flip"], [143, 3, 1, "", "permute_dims"], [143, 3, 1, "", "repeat"], [143, 3, 1, "", "reshape"], [143, 3, 1, "", "roll"], [143, 3, 1, "", "squeeze"], [143, 3, 1, "", "stack"], [143, 3, 1, "", "swapaxes"], [143, 3, 1, "", "tile"], [143, 3, 1, "", "zero_pad"]], "ivy.array.norms": [[145, 1, 1, "", "ArrayWithNorms"]], "ivy.array.norms.ArrayWithNorms": [[145, 3, 1, "", "layer_norm"]], "ivy.array.random": [[147, 1, 1, "", "ArrayWithRandom"]], "ivy.array.searching": [[149, 1, 1, "", "ArrayWithSearching"]], "ivy.array.set": [[151, 1, 1, "", "ArrayWithSet"]], "ivy.array.sorting": [[153, 1, 1, "", "ArrayWithSorting"]], "ivy.array.sorting.ArrayWithSorting": [[153, 3, 1, "", "argsort"], [153, 3, 1, "", "sort"]], "ivy.array.statistical": [[155, 1, 1, "", "ArrayWithStatistical"]], "ivy.array.statistical.ArrayWithStatistical": [[155, 3, 1, "", "einsum"], [155, 3, 1, "", "max"], [155, 3, 1, "", "mean"], [155, 3, 1, "", "min"], [155, 3, 1, "", "prod"], [155, 3, 1, "", "std"], [155, 3, 1, "", "sum"], [155, 3, 1, "", "var"]], "ivy.array.utility": [[157, 1, 1, "", "ArrayWithUtility"]], "ivy.array.utility.ArrayWithUtility": [[157, 3, 1, "", "all"], [157, 3, 1, "", "any"]], "ivy.array.wrapping": [[159, 2, 1, "", "add_ivy_array_instance_methods"]], "ivy": [[160, 0, 0, "-", "backend_handler"], [389, 0, 0, "-", "func_wrapper"], [1127, 0, 0, "-", "inspection"], [1170, 0, 0, "-", "verbosity"]], "ivy.backend_handler": [[160, 1, 1, "", "ContextManager"], [162, 2, 1, "", "choose_random_backend"], [163, 2, 1, "", "clear_backend_stack"], [164, 2, 1, "", "current_backend"], [165, 2, 1, "", "get_backend"], [166, 2, 1, "", "set_backend"], [167, 2, 1, "", "try_import_ivy_jax"], [168, 2, 1, "", "try_import_ivy_mxnet"], [169, 2, 1, "", "try_import_ivy_numpy"], [170, 2, 1, "", "try_import_ivy_tf"], [171, 2, 1, "", "try_import_ivy_torch"], [172, 2, 1, "", "unset_backend"]], "ivy.backend_handler.ContextManager": [[160, 3, 1, "", "__init__"]], "ivy.container": [[177, 0, 0, "-", "activations"], [179, 0, 0, "-", "base"], [181, 0, 0, "-", "container"], [184, 0, 0, "-", "container_methods"], [312, 0, 0, "-", "creation"], [314, 0, 0, "-", "data_type"], [316, 0, 0, "-", "device"], [318, 0, 0, "-", "elementwise"], [320, 0, 0, "-", "general"], [322, 0, 0, "-", "gradients"], [324, 0, 0, "-", "image"], [326, 0, 0, "-", "layers"], [328, 0, 0, "-", "linear_algebra"], [330, 0, 0, "-", "losses"], [332, 0, 0, "-", "manipulation"], [334, 0, 0, "-", "norms"], [336, 0, 0, "-", "random"], [338, 0, 0, "-", "searching"], [340, 0, 0, "-", "set"], [342, 0, 0, "-", "sorting"], [344, 0, 0, "-", "statistical"], [346, 0, 0, "-", "utility"], [348, 0, 0, "-", "wrapping"]], "ivy.container.activations": [[178, 1, 1, "", "ContainerWithActivations"]], "ivy.container.base": [[180, 1, 1, "", "ContainerBase"]], "ivy.container.base.ContainerBase": [[180, 3, 1, "", "__getitem__"], [180, 3, 1, "", "__init__"], [180, 3, 1, "", "__setitem__"], [180, 3, 1, "", "all_false"], [180, 3, 1, "", "all_key_chains"], [180, 3, 1, "", "all_true"], [180, 3, 1, "", "arrays_as_lists"], [180, 3, 1, "", "as_arrays"], [180, 3, 1, "", "as_bools"], [180, 3, 1, "", "as_ones"], [180, 3, 1, "", "as_random_uniform"], [180, 3, 1, "", "as_variables"], [180, 3, 1, "", "as_zeros"], [180, 3, 1, "", "assert_contains_sub_container"], [180, 3, 1, "", "assert_contains_sub_structure"], [180, 3, 1, "", "assert_identical"], [180, 3, 1, "", "assert_identical_structure"], [180, 3, 1, "", "at_key_chain"], [180, 3, 1, "", "at_key_chains"], [180, 3, 1, "", "at_keys"], [180, 3, 1, "", "clip"], [180, 3, 1, "", "combine"], [180, 3, 1, "", "common_key_chains"], [180, 4, 1, "", "config"], [180, 3, 1, "", "contains_sub_container"], [180, 3, 1, "", "contains_sub_structure"], [180, 3, 1, "", "copy"], [180, 3, 1, "", "create_if_absent"], [180, 3, 1, "", "cutoff_at_depth"], [180, 3, 1, "", "cutoff_at_height"], [180, 3, 1, "", "deep_copy"], [180, 4, 1, "", "dev"], [180, 3, 1, "", "dev_clone"], [180, 3, 1, "", "dev_dist"], [180, 4, 1, "", "dev_str"], [180, 3, 1, "", "diff"], [180, 3, 1, "", "dtype"], [180, 3, 1, "", "einops_rearrange"], [180, 3, 1, "", "einops_reduce"], [180, 3, 1, "", "einops_repeat"], [180, 3, 1, "", "find_sub_container"], [180, 3, 1, "", "find_sub_structure"], [180, 3, 1, "", "flatten_key_chain"], [180, 3, 1, "", "flatten_key_chains"], [180, 3, 1, "", "format_key_chains"], [180, 3, 1, "", "from_disk_as_hdf5"], [180, 3, 1, "", "from_disk_as_json"], [180, 3, 1, "", "from_disk_as_pickled"], [180, 3, 1, "", "from_flat_list"], [180, 3, 1, "", "from_numpy"], [180, 3, 1, "", "gather"], [180, 3, 1, "", "gather_nd"], [180, 3, 1, "", "h5_file_size"], [180, 3, 1, "", "handle_inplace"], [180, 3, 1, "", "has_key"], [180, 3, 1, "", "has_key_chain"], [180, 3, 1, "", "has_nans"], [180, 3, 1, "", "identical"], [180, 3, 1, "", "identical_array_shapes"], [180, 3, 1, "", "identical_configs"], [180, 3, 1, "", "identical_structure"], [180, 3, 1, "", "if_exists"], [180, 3, 1, "", "inplace_update"], [180, 4, 1, "", "ivy"], [180, 3, 1, "", "key_chains_containing"], [180, 3, 1, "", "list_join"], [180, 3, 1, "", "list_stack"], [180, 3, 1, "", "map"], [180, 3, 1, "", "map_conts"], [180, 3, 1, "", "matrix_norm"], [180, 4, 1, "", "max_depth"], [180, 3, 1, "", "maximum"], [180, 3, 1, "", "minimum"], [180, 3, 1, "", "multi_map"], [180, 3, 1, "", "multi_map_in_static_method"], [180, 3, 1, "", "num_arrays"], [180, 3, 1, "", "overwrite_at_key_chain"], [180, 3, 1, "", "overwrite_at_key_chains"], [180, 3, 1, "", "prune_empty"], [180, 3, 1, "", "prune_key_chain"], [180, 3, 1, "", "prune_key_chains"], [180, 3, 1, "", "prune_key_from_key_chains"], [180, 3, 1, "", "prune_keys"], [180, 3, 1, "", "prune_keys_from_key_chains"], [180, 3, 1, "", "reduce"], [180, 3, 1, "", "remove_key_length_limit"], [180, 3, 1, "", "remove_print_limit"], [180, 3, 1, "", "reshape_like"], [180, 3, 1, "", "restructure"], [180, 3, 1, "", "restructure_key_chains"], [180, 3, 1, "", "set_at_key_chain"], [180, 3, 1, "", "set_at_key_chains"], [180, 3, 1, "", "set_at_keys"], [180, 3, 1, "", "set_framework"], [180, 3, 1, "", "set_ivy_backend"], [180, 4, 1, "", "shape"], [180, 4, 1, "", "shapes"], [180, 3, 1, "", "show"], [180, 3, 1, "", "show_sub_container"], [180, 3, 1, "", "shuffle"], [180, 3, 1, "", "shuffle_h5_file"], [180, 3, 1, "", "size_ordered_arrays"], [180, 3, 1, "", "slice_keys"], [180, 3, 1, "", "slice_via_key"], [180, 3, 1, "", "sort_by_key"], [180, 3, 1, "", "split"], [180, 3, 1, "", "stop_gradients"], [180, 3, 1, "", "structural_diff"], [180, 3, 1, "", "to_device"], [180, 3, 1, "", "to_dict"], [180, 3, 1, "", "to_disk_as_hdf5"], [180, 3, 1, "", "to_disk_as_json"], [180, 3, 1, "", "to_disk_as_pickled"], [180, 3, 1, "", "to_flat_list"], [180, 3, 1, "", "to_iterator"], [180, 3, 1, "", "to_iterator_keys"], [180, 3, 1, "", "to_iterator_values"], [180, 3, 1, "", "to_ivy"], [180, 3, 1, "", "to_jsonable"], [180, 3, 1, "", "to_list"], [180, 3, 1, "", "to_multi_dev"], [180, 3, 1, "", "to_native"], [180, 3, 1, "", "to_numpy"], [180, 3, 1, "", "to_raw"], [180, 3, 1, "", "trim_key"], [180, 3, 1, "", "try_kc"], [180, 3, 1, "", "unify"], [180, 3, 1, "", "unstack"], [180, 3, 1, "", "update_config"], [180, 3, 1, "", "vector_norm"], [180, 3, 1, "", "with_default_key_color"], [180, 3, 1, "", "with_entries_as_lists"], [180, 3, 1, "", "with_ivy_backend"], [180, 3, 1, "", "with_key_length_limit"], [180, 3, 1, "", "with_print_indent"], [180, 3, 1, "", "with_print_limit"], [180, 3, 1, "", "with_print_line_spacing"]], "ivy.container.container": [[182, 1, 1, "", "Container"], [183, 1, 1, "", "MultiDevContainer"]], "ivy.container.container.Container": [[182, 3, 1, "", "__add__"], [182, 3, 1, "", "__init__"], [182, 3, 1, "", "__radd__"], [182, 3, 1, "", "arange"], [182, 3, 1, "", "arg_info"], [182, 3, 1, "", "arg_names"], [182, 3, 1, "", "argmax"], [182, 3, 1, "", "argmin"], [182, 3, 1, "", "array"], [182, 3, 1, "", "array_equal"], [182, 3, 1, "", "arrays_equal"], [182, 3, 1, "", "as_ivy_dev"], [182, 3, 1, "", "as_ivy_dtype"], [182, 3, 1, "", "as_native_dev"], [182, 3, 1, "", "as_native_dtype"], [182, 3, 1, "", "asarray"], [182, 3, 1, "", "assert_supports_inplace"], [182, 3, 1, "", "astype"], [182, 3, 1, "", "broadcast_arrays"], [182, 3, 1, "", "broadcast_to"], [182, 3, 1, "", "cache_fn"], [182, 3, 1, "", "cholesky"], [182, 3, 1, "", "clear_mem_on_dev"], [182, 3, 1, "", "clip_matrix_norm"], [182, 3, 1, "", "closest_valid_dtype"], [182, 3, 1, "", "container_types"], [182, 3, 1, "", "conv1d"], [182, 3, 1, "", "conv1d_transpose"], [182, 3, 1, "", "conv2d"], [182, 3, 1, "", "conv2d_transpose"], [182, 3, 1, "", "conv3d"], [182, 3, 1, "", "conv3d_transpose"], [182, 3, 1, "", "copy_array"], [182, 3, 1, "", "cross"], [182, 3, 1, "", "cumprod"], [182, 3, 1, "", "cumsum"], [182, 3, 1, "", "current_backend"], [182, 3, 1, "", "current_backend_str"], [182, 3, 1, "", "default"], [182, 3, 1, "", "default_device"], [182, 3, 1, "", "default_dtype"], [182, 3, 1, "", "default_float_dtype"], [182, 3, 1, "", "default_int_dtype"], [182, 3, 1, "", "depthwise_conv2d"], [182, 3, 1, "", "det"], [182, 3, 1, "", "dev_clone_array"], [182, 3, 1, "", "dev_clone_iter"], [182, 3, 1, "", "dev_clone_nest"], [182, 3, 1, "", "dev_dist_array"], [182, 3, 1, "", "dev_dist_iter"], [182, 3, 1, "", "dev_dist_nest"], [182, 3, 1, "", "dev_unify"], [182, 3, 1, "", "dev_unify_array"], [182, 3, 1, "", "dev_unify_iter"], [182, 3, 1, "", "dev_unify_nest"], [182, 3, 1, "", "dev_util"], [182, 3, 1, "", "diagonal"], [182, 3, 1, "", "dropout"], [182, 3, 1, "", "dtype_bits"], [182, 3, 1, "", "eigh"], [182, 3, 1, "", "eigvalsh"], [182, 3, 1, "", "empty"], [182, 3, 1, "", "empty_like"], [182, 3, 1, "", "execute_with_gradients"], [182, 3, 1, "", "exists"], [182, 3, 1, "", "eye"], [182, 3, 1, "", "finfo"], [182, 3, 1, "", "floormod"], [182, 3, 1, "", "fourier_encode"], [182, 3, 1, "", "from_dlpack"], [182, 3, 1, "", "full"], [182, 3, 1, "", "full_like"], [182, 3, 1, "", "function_supported_dtypes"], [182, 3, 1, "", "function_unsupported_dtypes"], [182, 3, 1, "", "gelu"], [182, 3, 1, "", "get_all_arrays_in_memory"], [182, 3, 1, "", "get_all_ivy_arrays_on_dev"], [182, 3, 1, "", "get_min_base"], [182, 3, 1, "", "get_min_denominator"], [182, 3, 1, "", "get_num_dims"], [182, 3, 1, "", "get_referrers_recursive"], [182, 3, 1, "", "gpu_is_available"], [182, 3, 1, "", "handle_nestable"], [182, 3, 1, "", "handle_out_argument"], [182, 3, 1, "", "iinfo"], [182, 3, 1, "", "indices_where"], [182, 3, 1, "", "infer_device"], [182, 3, 1, "", "infer_dtype"], [182, 3, 1, "", "inplace_arrays_supported"], [182, 3, 1, "", "inplace_decrement"], [182, 3, 1, "", "inplace_increment"], [182, 3, 1, "", "inplace_variables_supported"], [182, 3, 1, "", "inputs_to_native_arrays"], [182, 3, 1, "", "inv"], [182, 3, 1, "", "invalid_dtype"], [182, 3, 1, "", "is_float_dtype"], [182, 3, 1, "", "is_int_dtype"], [182, 3, 1, "", "is_ivy_container"], [182, 3, 1, "", "leaky_relu"], [182, 3, 1, "", "linear"], [182, 3, 1, "", "linspace"], [182, 3, 1, "", "logspace"], [182, 3, 1, "", "lstm_update"], [182, 3, 1, "", "match_kwargs"], [182, 3, 1, "", "matrix_power"], [182, 3, 1, "", "matrix_rank"], [182, 3, 1, "", "matrix_transpose"], [182, 3, 1, "", "meshgrid"], [182, 3, 1, "", "multi_head_attention"], [182, 3, 1, "", "multinomial"], [182, 3, 1, "", "multiprocessing"], [182, 3, 1, "", "native_array"], [182, 3, 1, "", "nonzero"], [182, 3, 1, "", "num_arrays_in_memory"], [182, 3, 1, "", "num_cpu_cores"], [182, 3, 1, "", "num_gpus"], [182, 3, 1, "", "num_ivy_arrays_on_dev"], [182, 3, 1, "", "one_hot"], [182, 3, 1, "", "ones"], [182, 3, 1, "", "ones_like"], [182, 3, 1, "", "outer"], [182, 3, 1, "", "outputs_to_ivy_arrays"], [182, 3, 1, "", "percent_used_mem_on_dev"], [182, 3, 1, "", "pinv"], [182, 3, 1, "", "print_all_arrays_in_memory"], [182, 3, 1, "", "print_all_ivy_arrays_on_dev"], [182, 3, 1, "", "promote_types"], [182, 3, 1, "", "qr"], [182, 3, 1, "", "queue_timeout"], [182, 3, 1, "", "randint"], [182, 3, 1, "", "random_normal"], [182, 3, 1, "", "relu"], [182, 3, 1, "", "result_type"], [182, 3, 1, "", "scaled_dot_product_attention"], [182, 3, 1, "", "scatter_flat"], [182, 3, 1, "", "scatter_nd"], [182, 3, 1, "", "seed"], [182, 3, 1, "", "set_default_device"], [182, 3, 1, "", "set_default_dtype"], [182, 3, 1, "", "set_default_float_dtype"], [182, 3, 1, "", "set_default_int_dtype"], [182, 3, 1, "", "set_min_base"], [182, 3, 1, "", "set_min_denominator"], [182, 3, 1, "", "set_queue_timeout"], [182, 3, 1, "", "set_split_factor"], [182, 3, 1, "", "set_tmp_dir"], [182, 3, 1, "", "set_with_grads"], [182, 3, 1, "", "shape_to_tuple"], [182, 3, 1, "", "sigmoid"], [182, 3, 1, "", "slogdet"], [182, 3, 1, "", "softmax"], [182, 3, 1, "", "softplus"], [182, 3, 1, "", "solve"], [182, 3, 1, "", "split_factor"], [182, 3, 1, "", "split_func_call"], [182, 3, 1, "", "stable_divide"], [182, 3, 1, "", "stable_pow"], [182, 3, 1, "", "static_acos"], [182, 3, 1, "", "static_acosh"], [182, 3, 1, "", "static_all"], [182, 3, 1, "", "static_any"], [182, 3, 1, "", "static_arange"], [182, 3, 1, "", "static_arg_info"], [182, 3, 1, "", "static_arg_names"], [182, 3, 1, "", "static_argmax"], [182, 3, 1, "", "static_argmin"], [182, 3, 1, "", "static_array"], [182, 3, 1, "", "static_array_equal"], [182, 3, 1, "", "static_arrays_equal"], [182, 3, 1, "", "static_as_ivy_dev"], [182, 3, 1, "", "static_as_ivy_dtype"], [182, 3, 1, "", "static_as_native_dev"], [182, 3, 1, "", "static_as_native_dtype"], [182, 3, 1, "", "static_asarray"], [182, 3, 1, "", "static_asin"], [182, 3, 1, "", "static_asinh"], [182, 3, 1, "", "static_assert_supports_inplace"], [182, 3, 1, "", "static_astype"], [182, 3, 1, "", "static_atan"], [182, 3, 1, "", "static_atan2"], [182, 3, 1, "", "static_atanh"], [182, 3, 1, "", "static_bitwise_and"], [182, 3, 1, "", "static_bitwise_invert"], [182, 3, 1, "", "static_bitwise_left_shift"], [182, 3, 1, "", "static_bitwise_or"], [182, 3, 1, "", "static_bitwise_right_shift"], [182, 3, 1, "", "static_bitwise_xor"], [182, 3, 1, "", "static_broadcast_arrays"], [182, 3, 1, "", "static_broadcast_to"], [182, 3, 1, "", "static_cache_fn"], [182, 3, 1, "", "static_ceil"], [182, 3, 1, "", "static_cholesky"], [182, 3, 1, "", "static_clear_mem_on_dev"], [182, 3, 1, "", "static_clip_matrix_norm"], [182, 3, 1, "", "static_clip_vector_norm"], [182, 3, 1, "", "static_closest_valid_dtype"], [182, 3, 1, "", "static_concat"], [182, 3, 1, "", "static_constant_pad"], [182, 3, 1, "", "static_container_types"], [182, 3, 1, "", "static_conv1d"], [182, 3, 1, "", "static_conv1d_transpose"], [182, 3, 1, "", "static_conv2d"], [182, 3, 1, "", "static_conv2d_transpose"], [182, 3, 1, "", "static_conv3d"], [182, 3, 1, "", "static_conv3d_transpose"], [182, 3, 1, "", "static_copy_array"], [182, 3, 1, "", "static_cos"], [182, 3, 1, "", "static_cosh"], [182, 3, 1, "", "static_cross"], [182, 3, 1, "", "static_cumprod"], [182, 3, 1, "", "static_cumsum"], [182, 3, 1, "", "static_current_backend"], [182, 3, 1, "", "static_current_backend_str"], [182, 3, 1, "", "static_default"], [182, 3, 1, "", "static_default_device"], [182, 3, 1, "", "static_default_dtype"], [182, 3, 1, "", "static_default_float_dtype"], [182, 3, 1, "", "static_default_int_dtype"], [182, 3, 1, "", "static_depthwise_conv2d"], [182, 3, 1, "", "static_det"], [182, 3, 1, "", "static_dev"], [182, 3, 1, "", "static_dev_clone"], [182, 3, 1, "", "static_dev_clone_array"], [182, 3, 1, "", "static_dev_clone_iter"], [182, 3, 1, "", "static_dev_clone_nest"], [182, 3, 1, "", "static_dev_dist"], [182, 3, 1, "", "static_dev_dist_array"], [182, 3, 1, "", "static_dev_dist_iter"], [182, 3, 1, "", "static_dev_dist_nest"], [182, 3, 1, "", "static_dev_unify"], [182, 3, 1, "", "static_dev_unify_array"], [182, 3, 1, "", "static_dev_unify_iter"], [182, 3, 1, "", "static_dev_unify_nest"], [182, 3, 1, "", "static_dev_util"], [182, 3, 1, "", "static_diagonal"], [182, 3, 1, "", "static_dropout"], [182, 3, 1, "", "static_dtype"], [182, 3, 1, "", "static_dtype_bits"], [182, 3, 1, "", "static_eigh"], [182, 3, 1, "", "static_eigvalsh"], [182, 3, 1, "", "static_einops_rearrange"], [182, 3, 1, "", "static_einops_reduce"], [182, 3, 1, "", "static_einops_repeat"], [182, 3, 1, "", "static_einsum"], [182, 3, 1, "", "static_empty"], [182, 3, 1, "", "static_empty_like"], [182, 3, 1, "", "static_equal"], [182, 3, 1, "", "static_erf"], [182, 3, 1, "", "static_execute_with_gradients"], [182, 3, 1, "", "static_exists"], [182, 3, 1, "", "static_exp"], [182, 3, 1, "", "static_expand_dims"], [182, 3, 1, "", "static_expm1"], [182, 3, 1, "", "static_eye"], [182, 3, 1, "", "static_finfo"], [182, 3, 1, "", "static_flip"], [182, 3, 1, "", "static_floor"], [182, 3, 1, "", "static_floor_divide"], [182, 3, 1, "", "static_floormod"], [182, 3, 1, "", "static_fourier_encode"], [182, 3, 1, "", "static_from_dlpack"], [182, 3, 1, "", "static_full"], [182, 3, 1, "", "static_full_like"], [182, 3, 1, "", "static_function_supported_dtypes"], [182, 3, 1, "", "static_function_unsupported_dtypes"], [182, 3, 1, "", "static_gather"], [182, 3, 1, "", "static_gelu"], [182, 3, 1, "", "static_get_all_arrays_in_memory"], [182, 3, 1, "", "static_get_all_ivy_arrays_on_dev"], [182, 3, 1, "", "static_get_min_base"], [182, 3, 1, "", "static_get_min_denominator"], [182, 3, 1, "", "static_get_num_dims"], [182, 3, 1, "", "static_get_referrers_recursive"], [182, 3, 1, "", "static_gpu_is_available"], [182, 3, 1, "", "static_greater"], [182, 3, 1, "", "static_greater_equal"], [182, 3, 1, "", "static_handle_nestable"], [182, 3, 1, "", "static_handle_out_argument"], [182, 3, 1, "", "static_has_nans"], [182, 3, 1, "", "static_iinfo"], [182, 3, 1, "", "static_indices_where"], [182, 3, 1, "", "static_infer_device"], [182, 3, 1, "", "static_infer_dtype"], [182, 3, 1, "", "static_inplace_arrays_supported"], [182, 3, 1, "", "static_inplace_decrement"], [182, 3, 1, "", "static_inplace_increment"], [182, 3, 1, "", "static_inplace_update"], [182, 3, 1, "", "static_inplace_variables_supported"], [182, 3, 1, "", "static_inputs_to_native_arrays"], [182, 3, 1, "", "static_inv"], [182, 3, 1, "", "static_invalid_dtype"], [182, 3, 1, "", "static_is_array"], [182, 3, 1, "", "static_is_float_dtype"], [182, 3, 1, "", "static_is_int_dtype"], [182, 3, 1, "", "static_is_ivy_array"], [182, 3, 1, "", "static_is_ivy_container"], [182, 3, 1, "", "static_is_native_array"], [182, 3, 1, "", "static_is_variable"], [182, 3, 1, "", "static_isfinite"], [182, 3, 1, "", "static_isinf"], [182, 3, 1, "", "static_isnan"], [182, 3, 1, "", "static_layer_norm"], [182, 3, 1, "", "static_leaky_relu"], [182, 3, 1, "", "static_less"], [182, 3, 1, "", "static_less_equal"], [182, 3, 1, "", "static_linear"], [182, 3, 1, "", "static_linspace"], [182, 3, 1, "", "static_log"], [182, 3, 1, "", "static_log10"], [182, 3, 1, "", "static_log1p"], [182, 3, 1, "", "static_log2"], [182, 3, 1, "", "static_logaddexp"], [182, 3, 1, "", "static_logical_and"], [182, 3, 1, "", "static_logical_not"], [182, 3, 1, "", "static_logical_or"], [182, 3, 1, "", "static_logical_xor"], [182, 3, 1, "", "static_logspace"], [182, 3, 1, "", "static_lstm_update"], [182, 3, 1, "", "static_match_kwargs"], [182, 3, 1, "", "static_matmul"], [182, 3, 1, "", "static_matrix_norm"], [182, 3, 1, "", "static_matrix_power"], [182, 3, 1, "", "static_matrix_rank"], [182, 3, 1, "", "static_matrix_transpose"], [182, 3, 1, "", "static_max"], [182, 3, 1, "", "static_maximum"], [182, 3, 1, "", "static_mean"], [182, 3, 1, "", "static_meshgrid"], [182, 3, 1, "", "static_min"], [182, 3, 1, "", "static_minimum"], [182, 3, 1, "", "static_multi_head_attention"], [182, 3, 1, "", "static_multinomial"], [182, 3, 1, "", "static_multiprocessing"], [182, 3, 1, "", "static_native_array"], [182, 3, 1, "", "static_negative"], [182, 3, 1, "", "static_nonzero"], [182, 3, 1, "", "static_not_equal"], [182, 3, 1, "", "static_num_arrays_in_memory"], [182, 3, 1, "", "static_num_cpu_cores"], [182, 3, 1, "", "static_num_gpus"], [182, 3, 1, "", "static_num_ivy_arrays_on_dev"], [182, 3, 1, "", "static_one_hot"], [182, 3, 1, "", "static_ones"], [182, 3, 1, "", "static_ones_like"], [182, 3, 1, "", "static_outer"], [182, 3, 1, "", "static_outputs_to_ivy_arrays"], [182, 3, 1, "", "static_percent_used_mem_on_dev"], [182, 3, 1, "", "static_permute_dims"], [182, 3, 1, "", "static_pinv"], [182, 3, 1, "", "static_positive"], [182, 3, 1, "", "static_pow"], [182, 3, 1, "", "static_print_all_arrays_in_memory"], [182, 3, 1, "", "static_print_all_ivy_arrays_on_dev"], [182, 3, 1, "", "static_prod"], [182, 3, 1, "", "static_promote_types"], [182, 3, 1, "", "static_qr"], [182, 3, 1, "", "static_queue_timeout"], [182, 3, 1, "", "static_random_normal"], [182, 3, 1, "", "static_relu"], [182, 3, 1, "", "static_remainder"], [182, 3, 1, "", "static_repeat"], [182, 3, 1, "", "static_reshape"], [182, 3, 1, "", "static_result_type"], [182, 3, 1, "", "static_round"], [182, 3, 1, "", "static_scaled_dot_product_attention"], [182, 3, 1, "", "static_scatter_flat"], [182, 3, 1, "", "static_scatter_nd"], [182, 3, 1, "", "static_seed"], [182, 3, 1, "", "static_set_default_device"], [182, 3, 1, "", "static_set_default_dtype"], [182, 3, 1, "", "static_set_default_float_dtype"], [182, 3, 1, "", "static_set_default_int_dtype"], [182, 3, 1, "", "static_set_min_base"], [182, 3, 1, "", "static_set_min_denominator"], [182, 3, 1, "", "static_set_queue_timeout"], [182, 3, 1, "", "static_set_split_factor"], [182, 3, 1, "", "static_set_tmp_dir"], [182, 3, 1, "", "static_set_with_grads"], [182, 3, 1, "", "static_shape"], [182, 3, 1, "", "static_shape_to_tuple"], [182, 3, 1, "", "static_shuffle"], [182, 3, 1, "", "static_sigmoid"], [182, 3, 1, "", "static_sign"], [182, 3, 1, "", "static_sin"], [182, 3, 1, "", "static_sinh"], [182, 3, 1, "", "static_slogdet"], [182, 3, 1, "", "static_softmax"], [182, 3, 1, "", "static_softplus"], [182, 3, 1, "", "static_solve"], [182, 3, 1, "", "static_split"], [182, 3, 1, "", "static_split_factor"], [182, 3, 1, "", "static_split_func_call"], [182, 3, 1, "", "static_sqrt"], [182, 3, 1, "", "static_square"], [182, 3, 1, "", "static_squeeze"], [182, 3, 1, "", "static_stable_divide"], [182, 3, 1, "", "static_stable_pow"], [182, 3, 1, "", "static_stack"], [182, 3, 1, "", "static_std"], [182, 3, 1, "", "static_stop_gradient"], [182, 3, 1, "", "static_sum"], [182, 3, 1, "", "static_supports_inplace"], [182, 3, 1, "", "static_svd"], [182, 3, 1, "", "static_svdvals"], [182, 3, 1, "", "static_swapaxes"], [182, 3, 1, "", "static_tensordot"], [182, 3, 1, "", "static_tile"], [182, 3, 1, "", "static_tmp_dir"], [182, 3, 1, "", "static_to_device"], [182, 3, 1, "", "static_to_list"], [182, 3, 1, "", "static_to_native_arrays_and_back"], [182, 3, 1, "", "static_to_numpy"], [182, 3, 1, "", "static_to_scalar"], [182, 3, 1, "", "static_total_mem_on_dev"], [182, 3, 1, "", "static_tpu_is_available"], [182, 3, 1, "", "static_trace"], [182, 3, 1, "", "static_tril"], [182, 3, 1, "", "static_triu"], [182, 3, 1, "", "static_trunc"], [182, 3, 1, "", "static_try_else_none"], [182, 3, 1, "", "static_type_promote_arrays"], [182, 3, 1, "", "static_unique_all"], [182, 3, 1, "", "static_unique_counts"], [182, 3, 1, "", "static_unique_inverse"], [182, 3, 1, "", "static_unique_values"], [182, 3, 1, "", "static_unset_default_device"], [182, 3, 1, "", "static_unset_default_dtype"], [182, 3, 1, "", "static_unset_default_float_dtype"], [182, 3, 1, "", "static_unset_default_int_dtype"], [182, 3, 1, "", "static_unset_with_grads"], [182, 3, 1, "", "static_unstack"], [182, 3, 1, "", "static_used_mem_on_dev"], [182, 3, 1, "", "static_valid_dtype"], [182, 3, 1, "", "static_value_is_nan"], [182, 3, 1, "", "static_var"], [182, 3, 1, "", "static_variable"], [182, 3, 1, "", "static_variable_data"], [182, 3, 1, "", "static_vecdot"], [182, 3, 1, "", "static_vector_norm"], [182, 3, 1, "", "static_vector_to_skew_symmetric_matrix"], [182, 3, 1, "", "static_where"], [182, 3, 1, "", "static_with_grads"], [182, 3, 1, "", "static_zero_pad"], [182, 3, 1, "", "static_zeros"], [182, 3, 1, "", "static_zeros_like"], [182, 3, 1, "", "stop_gradient"], [182, 3, 1, "", "supports_inplace"], [182, 3, 1, "", "svd"], [182, 3, 1, "", "svdvals"], [182, 3, 1, "", "tensordot"], [182, 3, 1, "", "tmp_dir"], [182, 3, 1, "", "to_native_arrays_and_back"], [182, 3, 1, "", "to_scalar"], [182, 3, 1, "", "total_mem_on_dev"], [182, 3, 1, "", "tpu_is_available"], [182, 3, 1, "", "trace"], [182, 3, 1, "", "tril"], [182, 3, 1, "", "triu"], [182, 3, 1, "", "try_else_none"], [182, 3, 1, "", "type_promote_arrays"], [182, 3, 1, "", "unique_all"], [182, 3, 1, "", "unique_counts"], [182, 3, 1, "", "unique_inverse"], [182, 3, 1, "", "unique_values"], [182, 3, 1, "", "unset_default_device"], [182, 3, 1, "", "unset_default_dtype"], [182, 3, 1, "", "unset_default_float_dtype"], [182, 3, 1, "", "unset_default_int_dtype"], [182, 3, 1, "", "unset_with_grads"], [182, 3, 1, "", "used_mem_on_dev"], [182, 3, 1, "", "valid_dtype"], [182, 3, 1, "", "value_is_nan"], [182, 3, 1, "", "variable"], [182, 3, 1, "", "variable_data"], [182, 3, 1, "", "vecdot"], [182, 3, 1, "", "vector_to_skew_symmetric_matrix"], [182, 3, 1, "", "where"], [182, 3, 1, "", "with_grads"], [182, 3, 1, "", "zeros"], [182, 3, 1, "", "zeros_like"]], "ivy.container.container.MultiDevContainer": [[183, 3, 1, "", "__init__"], [183, 3, 1, "", "at_dev"], [183, 3, 1, "", "at_devs"]], "ivy.container.container_methods": [[184, 2, 1, "", "__add__"], [184, 2, 1, "", "__init__"], [184, 2, 1, "", "__radd__"], [519, 2, 1, "", "abs"], [526, 2, 1, "", "acos"], [590, 2, 1, "", "acosh"], [832, 2, 1, "", "adam_step"], [836, 2, 1, "", "adam_update"], [664, 2, 1, "", "add"], [191, 2, 1, "", "add_ivy_container_instance_methods"], [1118, 2, 1, "", "all"], [757, 2, 1, "", "all_equal"], [1122, 2, 1, "", "any"], [1074, 2, 1, "", "argsort"], [537, 2, 1, "", "asin"], [541, 2, 1, "", "asinh"], [198, 2, 1, "", "at_dev"], [199, 2, 1, "", "at_devs"], [551, 2, 1, "", "atan"], [549, 2, 1, "", "atan2"], [749, 2, 1, "", "atanh"], [949, 2, 1, "", "binary_cross_entropy"], [557, 2, 1, "", "bitwise_and"], [561, 2, 1, "", "bitwise_invert"], [565, 2, 1, "", "bitwise_left_shift"], [569, 2, 1, "", "bitwise_or"], [573, 2, 1, "", "bitwise_right_shift"], [577, 2, 1, "", "bitwise_xor"], [440, 2, 1, "", "can_cast"], [581, 2, 1, "", "ceil"], [965, 2, 1, "", "clip"], [768, 2, 1, "", "clip_vector_norm"], [970, 2, 1, "", "concat"], [974, 2, 1, "", "constant_pad"], [590, 2, 1, "", "cos"], [589, 2, 1, "", "cosh"], [954, 2, 1, "", "cross_entropy"], [616, 2, 1, "", "divide"], [1110, 2, 1, "", "einsum"], [624, 2, 1, "", "equal"], [602, 2, 1, "", "erf"], [664, 2, 1, "", "exp"], [978, 2, 1, "", "expand_dims"], [610, 2, 1, "", "expm1"], [982, 2, 1, "", "flip"], [616, 2, 1, "", "floor"], [618, 2, 1, "", "floor_divide"], [785, 2, 1, "", "gather_nd"], [841, 2, 1, "", "gradient_descent_update"], [624, 2, 1, "", "greater"], [626, 2, 1, "", "greater_equal"], [630, 2, 1, "", "isfinite"], [634, 2, 1, "", "isinf"], [638, 2, 1, "", "isnan"], [846, 2, 1, "", "lamb_update"], [850, 2, 1, "", "lars_update"], [1047, 2, 1, "", "layer_norm"], [642, 2, 1, "", "less"], [646, 2, 1, "", "less_equal"], [650, 2, 1, "", "log"], [654, 2, 1, "", "log10"], [658, 2, 1, "", "log1p"], [662, 2, 1, "", "log2"], [666, 2, 1, "", "logaddexp"], [670, 2, 1, "", "logical_and"], [674, 2, 1, "", "logical_not"], [678, 2, 1, "", "logical_or"], [682, 2, 1, "", "logical_xor"], [900, 2, 1, "", "matmul"], [1089, 2, 1, "", "max"], [1093, 2, 1, "", "mean"], [1097, 2, 1, "", "min"], [688, 2, 1, "", "multiply"], [693, 2, 1, "", "negative"], [697, 2, 1, "", "not_equal"], [854, 2, 1, "", "optimizer_update"], [986, 2, 1, "", "permute_dims"], [701, 2, 1, "", "positive"], [705, 2, 1, "", "pow"], [1101, 2, 1, "", "prod"], [1056, 2, 1, "", "random_uniform"], [709, 2, 1, "", "remainder"], [990, 2, 1, "", "repeat"], [994, 2, 1, "", "reshape"], [998, 2, 1, "", "roll"], [713, 2, 1, "", "round"], [717, 2, 1, "", "sign"], [721, 2, 1, "", "sin"], [725, 2, 1, "", "sinh"], [1079, 2, 1, "", "sort"], [959, 2, 1, "", "sparse_cross_entropy"], [729, 2, 1, "", "sqrt"], [733, 2, 1, "", "square"], [1004, 2, 1, "", "squeeze"], [1008, 2, 1, "", "stack"], [521, 2, 1, "", "static_abs"], [834, 2, 1, "", "static_adam_step"], [838, 2, 1, "", "static_adam_update"], [664, 2, 1, "", "static_add"], [759, 2, 1, "", "static_all_equal"], [1076, 2, 1, "", "static_argsort"], [951, 2, 1, "", "static_binary_cross_entropy"], [442, 2, 1, "", "static_can_cast"], [967, 2, 1, "", "static_clip"], [956, 2, 1, "", "static_cross_entropy"], [616, 2, 1, "", "static_divide"], [787, 2, 1, "", "static_gather_nd"], [843, 2, 1, "", "static_gradient_descent_update"], [848, 2, 1, "", "static_lamb_update"], [852, 2, 1, "", "static_lars_update"], [690, 2, 1, "", "static_multiply"], [856, 2, 1, "", "static_optimizer_update"], [1053, 2, 1, "", "static_randint"], [1058, 2, 1, "", "static_random_uniform"], [1000, 2, 1, "", "static_roll"], [1081, 2, 1, "", "static_sort"], [961, 2, 1, "", "static_sparse_cross_entropy"], [736, 2, 1, "", "static_subtract"], [749, 2, 1, "", "static_tan"], [746, 2, 1, "", "static_tanh"], [1105, 2, 1, "", "std"], [738, 2, 1, "", "subtract"], [1109, 2, 1, "", "sum"], [1012, 2, 1, "", "swapaxes"], [749, 2, 1, "", "tan"], [748, 2, 1, "", "tanh"], [1016, 2, 1, "", "tile"], [752, 2, 1, "", "trunc"], [1113, 2, 1, "", "var"], [1020, 2, 1, "", "zero_pad"]], "ivy.container.creation": [[313, 1, 1, "", "ContainerWithCreation"]], "ivy.container.data_type": [[315, 1, 1, "", "ContainerWithDataTypes"]], "ivy.container.data_type.ContainerWithDataTypes": [[315, 3, 1, "", "can_cast"], [315, 3, 1, "", "static_can_cast"]], "ivy.container.device": [[317, 1, 1, "", "ContainerWithDevice"]], "ivy.container.elementwise": [[319, 1, 1, "", "ContainerWithElementwise"]], "ivy.container.elementwise.ContainerWithElementwise": [[319, 3, 1, "", "abs"], [319, 3, 1, "", "acos"], [319, 3, 1, "", "acosh"], [319, 3, 1, "", "add"], [319, 3, 1, "", "asin"], [319, 3, 1, "", "asinh"], [319, 3, 1, "", "atan"], [319, 3, 1, "", "atan2"], [319, 3, 1, "", "atanh"], [319, 3, 1, "", "bitwise_and"], [319, 3, 1, "", "bitwise_invert"], [319, 3, 1, "", "bitwise_left_shift"], [319, 3, 1, "", "bitwise_or"], [319, 3, 1, "", "bitwise_right_shift"], [319, 3, 1, "", "bitwise_xor"], [319, 3, 1, "", "ceil"], [319, 3, 1, "", "cos"], [319, 3, 1, "", "cosh"], [319, 3, 1, "", "divide"], [319, 3, 1, "", "equal"], [319, 3, 1, "", "erf"], [319, 3, 1, "", "exp"], [319, 3, 1, "", "expm1"], [319, 3, 1, "", "floor"], [319, 3, 1, "", "floor_divide"], [319, 3, 1, "", "greater"], [319, 3, 1, "", "greater_equal"], [319, 3, 1, "", "isfinite"], [319, 3, 1, "", "isinf"], [319, 3, 1, "", "isnan"], [319, 3, 1, "", "less"], [319, 3, 1, "", "less_equal"], [319, 3, 1, "", "log"], [319, 3, 1, "", "log10"], [319, 3, 1, "", "log1p"], [319, 3, 1, "", "log2"], [319, 3, 1, "", "logaddexp"], [319, 3, 1, "", "logical_and"], [319, 3, 1, "", "logical_not"], [319, 3, 1, "", "logical_or"], [319, 3, 1, "", "logical_xor"], [319, 3, 1, "", "multiply"], [319, 3, 1, "", "negative"], [319, 3, 1, "", "not_equal"], [319, 3, 1, "", "positive"], [319, 3, 1, "", "pow"], [319, 3, 1, "", "remainder"], [319, 3, 1, "", "round"], [319, 3, 1, "", "sign"], [319, 3, 1, "", "sin"], [319, 3, 1, "", "sinh"], [319, 3, 1, "", "sqrt"], [319, 3, 1, "", "square"], [319, 3, 1, "", "static_abs"], [319, 3, 1, "", "static_add"], [319, 3, 1, "", "static_divide"], [319, 3, 1, "", "static_multiply"], [319, 3, 1, "", "static_subtract"], [319, 3, 1, "", "static_tan"], [319, 3, 1, "", "static_tanh"], [319, 3, 1, "", "subtract"], [319, 3, 1, "", "tan"], [319, 3, 1, "", "tanh"], [319, 3, 1, "", "trunc"]], "ivy.container.general": [[321, 1, 1, "", "ContainerWithGeneral"]], "ivy.container.general.ContainerWithGeneral": [[321, 3, 1, "", "all_equal"], [321, 3, 1, "", "clip_vector_norm"], [321, 3, 1, "", "gather_nd"], [321, 3, 1, "", "static_all_equal"], [321, 3, 1, "", "static_gather_nd"]], "ivy.container.gradients": [[323, 1, 1, "", "ContainerWithGradients"]], "ivy.container.gradients.ContainerWithGradients": [[323, 3, 1, "", "adam_step"], [323, 3, 1, "", "adam_update"], [323, 3, 1, "", "gradient_descent_update"], [323, 3, 1, "", "lamb_update"], [323, 3, 1, "", "lars_update"], [323, 3, 1, "", "optimizer_update"], [323, 3, 1, "", "static_adam_step"], [323, 3, 1, "", "static_adam_update"], [323, 3, 1, "", "static_gradient_descent_update"], [323, 3, 1, "", "static_lamb_update"], [323, 3, 1, "", "static_lars_update"], [323, 3, 1, "", "static_optimizer_update"]], "ivy.container.image": [[325, 1, 1, "", "ContainerWithImage"]], "ivy.container.layers": [[327, 1, 1, "", "ContainerWithLayers"]], "ivy.container.linear_algebra": [[329, 1, 1, "", "ContainerWithLinearAlgebra"]], "ivy.container.linear_algebra.ContainerWithLinearAlgebra": [[329, 3, 1, "", "matmul"]], "ivy.container.losses": [[331, 1, 1, "", "ContainerWithLosses"]], "ivy.container.losses.ContainerWithLosses": [[331, 3, 1, "", "binary_cross_entropy"], [331, 3, 1, "", "cross_entropy"], [331, 3, 1, "", "sparse_cross_entropy"], [331, 3, 1, "", "static_binary_cross_entropy"], [331, 3, 1, "", "static_cross_entropy"], [331, 3, 1, "", "static_sparse_cross_entropy"]], "ivy.container.manipulation": [[333, 1, 1, "", "ContainerWithManipulation"]], "ivy.container.manipulation.ContainerWithManipulation": [[333, 3, 1, "", "clip"], [333, 3, 1, "", "concat"], [333, 3, 1, "", "constant_pad"], [333, 3, 1, "", "expand_dims"], [333, 3, 1, "", "flip"], [333, 3, 1, "", "permute_dims"], [333, 3, 1, "", "repeat"], [333, 3, 1, "", "reshape"], [333, 3, 1, "", "roll"], [333, 3, 1, "", "squeeze"], [333, 3, 1, "", "stack"], [333, 3, 1, "", "static_clip"], [333, 3, 1, "", "static_roll"], [333, 3, 1, "", "swapaxes"], [333, 3, 1, "", "tile"], [333, 3, 1, "", "zero_pad"]], "ivy.container.norms": [[335, 1, 1, "", "ContainerWithNorms"]], "ivy.container.norms.ContainerWithNorms": [[335, 3, 1, "", "layer_norm"]], "ivy.container.random": [[337, 1, 1, "", "ContainerWithRandom"]], "ivy.container.random.ContainerWithRandom": [[337, 3, 1, "", "random_uniform"], [337, 3, 1, "", "static_randint"], [337, 3, 1, "", "static_random_uniform"]], "ivy.container.searching": [[339, 1, 1, "", "ContainerWithSearching"]], "ivy.container.set": [[341, 1, 1, "", "ContainerWithSet"]], "ivy.container.sorting": [[343, 1, 1, "", "ContainerWithSorting"]], "ivy.container.sorting.ContainerWithSorting": [[343, 3, 1, "", "argsort"], [343, 3, 1, "", "sort"], [343, 3, 1, "", "static_argsort"], [343, 3, 1, "", "static_sort"]], "ivy.container.statistical": [[345, 1, 1, "", "ContainerWithStatistical"]], "ivy.container.statistical.ContainerWithStatistical": [[345, 3, 1, "", "einsum"], [345, 3, 1, "", "max"], [345, 3, 1, "", "mean"], [345, 3, 1, "", "min"], [345, 3, 1, "", "prod"], [345, 3, 1, "", "std"], [345, 3, 1, "", "sum"], [345, 3, 1, "", "var"]], "ivy.container.utility": [[347, 1, 1, "", "ContainerWithUtility"]], "ivy.container.utility.ContainerWithUtility": [[347, 3, 1, "", "all"], [347, 3, 1, "", "any"]], "ivy.container.wrapping": [[349, 2, 1, "", "add_ivy_container_instance_methods"]], "ivy.func_wrapper": [[390, 2, 1, "", "handle_nestable"], [391, 2, 1, "", "handle_out_argument"], [392, 2, 1, "", "infer_device"], [393, 2, 1, "", "infer_dtype"], [394, 2, 1, "", "inputs_to_ivy_arrays"], [395, 2, 1, "", "inputs_to_native_arrays"], [396, 2, 1, "", "outputs_to_ivy_arrays"], [397, 2, 1, "", "to_native_arrays_and_back"]], "ivy.functional.ivy": [[399, 0, 0, "-", "activations"], [407, 0, 0, "-", "compilation"], [409, 0, 0, "-", "constants"], [410, 0, 0, "-", "creation"], [429, 0, 0, "-", "data_type"], [466, 0, 0, "-", "device"], [516, 0, 0, "-", "elementwise"], [754, 0, 0, "-", "general"], [828, 0, 0, "-", "gradients"], [863, 0, 0, "-", "layers"], [876, 0, 0, "-", "linear_algebra"], [946, 0, 0, "-", "losses"], [962, 0, 0, "-", "manipulation"], [1022, 0, 0, "-", "meta"], [1026, 0, 0, "-", "nest"], [1044, 0, 0, "-", "norms"], [1049, 0, 0, "-", "random"], [1061, 0, 0, "-", "searching"], [1066, 0, 0, "-", "set"], [1071, 0, 0, "-", "sorting"], [1082, 0, 0, "-", "statistical"], [1115, 0, 0, "-", "utility"]], "ivy.functional.ivy.activations": [[400, 2, 1, "", "gelu"], [401, 2, 1, "", "leaky_relu"], [402, 2, 1, "", "relu"], [403, 2, 1, "", "sigmoid"], [404, 2, 1, "", "softmax"], [405, 2, 1, "", "softplus"], [406, 2, 1, "", "tanh"]], "ivy.functional.ivy.compilation": [[408, 2, 1, "", "compile"]], "ivy.functional.ivy.constants": [[409, 5, 1, "", "e"], [409, 5, 1, "", "inf"], [409, 5, 1, "", "nan"], [409, 5, 1, "", "newaxis"], [409, 5, 1, "", "pi"]], "ivy.functional.ivy.creation": [[411, 2, 1, "", "arange"], [410, 2, 1, "", "array"], [412, 2, 1, "", "asarray"], [413, 2, 1, "", "empty"], [414, 2, 1, "", "empty_like"], [415, 2, 1, "", "eye"], [416, 2, 1, "", "from_dlpack"], [417, 2, 1, "", "full"], [418, 2, 1, "", "full_like"], [419, 2, 1, "", "linspace"], [420, 2, 1, "", "logspace"], [421, 2, 1, "", "meshgrid"], [422, 2, 1, "", "native_array"], [423, 2, 1, "", "ones"], [424, 2, 1, "", "ones_like"], [425, 2, 1, "", "tril"], [426, 2, 1, "", "triu"], [427, 2, 1, "", "zeros"], [428, 2, 1, "", "zeros_like"]], "ivy.functional.ivy.data_type": [[429, 1, 1, "", "DefaultDtype"], [429, 1, 1, "", "DefaultFloatDtype"], [429, 1, 1, "", "DefaultIntDtype"], [433, 2, 1, "", "as_ivy_dtype"], [434, 2, 1, "", "as_native_dtype"], [435, 2, 1, "", "astype"], [436, 2, 1, "", "broadcast_arrays"], [437, 2, 1, "", "broadcast_to"], [441, 2, 1, "", "can_cast"], [443, 2, 1, "", "closest_valid_dtype"], [444, 2, 1, "", "default_dtype"], [445, 2, 1, "", "default_float_dtype"], [446, 2, 1, "", "default_int_dtype"], [447, 2, 1, "", "dtype"], [448, 2, 1, "", "dtype_bits"], [449, 2, 1, "", "finfo"], [450, 2, 1, "", "function_supported_dtypes"], [451, 2, 1, "", "function_unsupported_dtypes"], [452, 2, 1, "", "iinfo"], [453, 2, 1, "", "invalid_dtype"], [454, 2, 1, "", "is_float_dtype"], [455, 2, 1, "", "is_int_dtype"], [456, 2, 1, "", "promote_types"], [457, 2, 1, "", "result_type"], [458, 2, 1, "", "set_default_dtype"], [459, 2, 1, "", "set_default_float_dtype"], [460, 2, 1, "", "set_default_int_dtype"], [461, 2, 1, "", "type_promote_arrays"], [462, 2, 1, "", "unset_default_dtype"], [463, 2, 1, "", "unset_default_float_dtype"], [464, 2, 1, "", "unset_default_int_dtype"], [465, 2, 1, "", "valid_dtype"]], "ivy.functional.ivy.data_type.DefaultDtype": [[429, 3, 1, "", "__init__"]], "ivy.functional.ivy.data_type.DefaultFloatDtype": [[429, 3, 1, "", "__init__"]], "ivy.functional.ivy.data_type.DefaultIntDtype": [[429, 3, 1, "", "__init__"]], "ivy.functional.ivy.device": [[466, 1, 1, "", "DefaultDevice"], [468, 1, 1, "", "DevClonedItem"], [469, 1, 1, "", "DevClonedIter"], [470, 1, 1, "", "DevClonedNest"], [471, 1, 1, "", "DevDistItem"], [472, 1, 1, "", "DevDistIter"], [473, 1, 1, "", "DevDistNest"], [466, 1, 1, "", "DevManager"], [475, 1, 1, "", "DevMapper"], [476, 1, 1, "", "DevMapperMultiProc"], [466, 1, 1, "", "MultiDev"], [478, 1, 1, "", "MultiDevItem"], [479, 1, 1, "", "MultiDevIter"], [480, 1, 1, "", "MultiDevNest"], [481, 1, 1, "", "Profiler"], [482, 2, 1, "", "as_ivy_dev"], [483, 2, 1, "", "as_native_dev"], [484, 2, 1, "", "clear_mem_on_dev"], [485, 2, 1, "", "default_device"], [486, 2, 1, "", "dev"], [487, 2, 1, "", "dev_clone"], [488, 2, 1, "", "dev_clone_array"], [489, 2, 1, "", "dev_clone_iter"], [490, 2, 1, "", "dev_clone_nest"], [491, 2, 1, "", "dev_dist"], [492, 2, 1, "", "dev_dist_array"], [493, 2, 1, "", "dev_dist_iter"], [494, 2, 1, "", "dev_dist_nest"], [495, 2, 1, "", "dev_unify"], [496, 2, 1, "", "dev_unify_array"], [497, 2, 1, "", "dev_unify_iter"], [498, 2, 1, "", "dev_unify_nest"], [499, 2, 1, "", "dev_util"], [500, 2, 1, "", "get_all_ivy_arrays_on_dev"], [501, 2, 1, "", "gpu_is_available"], [502, 2, 1, "", "num_cpu_cores"], [503, 2, 1, "", "num_gpus"], [504, 2, 1, "", "num_ivy_arrays_on_dev"], [505, 2, 1, "", "percent_used_mem_on_dev"], [506, 2, 1, "", "print_all_ivy_arrays_on_dev"], [507, 2, 1, "", "set_default_device"], [508, 2, 1, "", "set_split_factor"], [509, 2, 1, "", "split_factor"], [510, 2, 1, "", "split_func_call"], [511, 2, 1, "", "to_device"], [512, 2, 1, "", "total_mem_on_dev"], [513, 2, 1, "", "tpu_is_available"], [514, 2, 1, "", "unset_default_device"], [515, 2, 1, "", "used_mem_on_dev"]], "ivy.functional.ivy.device.DefaultDevice": [[466, 3, 1, "", "__enter__"], [466, 3, 1, "", "__init__"]], "ivy.functional.ivy.device.DevManager": [[466, 3, 1, "", "__init__"], [466, 3, 1, "", "da_tune_step"], [466, 4, 1, "", "dim_size"], [466, 3, 1, "", "ds_tune_step"], [466, 3, 1, "", "map"], [466, 3, 1, "", "repeated_config_check"], [466, 4, 1, "", "tune_step"], [466, 4, 1, "", "tuned"]], "ivy.functional.ivy.device.DevMapper": [[475, 3, 1, "", "__init__"], [475, 3, 1, "", "map"]], "ivy.functional.ivy.device.DevMapperMultiProc": [[476, 3, 1, "", "__init__"]], "ivy.functional.ivy.device.MultiDev": [[466, 3, 1, "", "__init__"]], "ivy.functional.ivy.device.MultiDevItem": [[478, 3, 1, "", "__init__"], [478, 3, 1, "", "items"], [478, 3, 1, "", "keys"], [478, 4, 1, "", "shape"], [478, 3, 1, "", "values"]], "ivy.functional.ivy.device.MultiDevIter": [[479, 3, 1, "", "__init__"], [479, 3, 1, "", "at_dev"], [479, 3, 1, "", "at_devs"]], "ivy.functional.ivy.device.MultiDevNest": [[480, 3, 1, "", "__init__"], [480, 3, 1, "", "at_dev"]], "ivy.functional.ivy.device.Profiler": [[481, 3, 1, "", "__init__"], [481, 3, 1, "", "start"], [481, 3, 1, "", "stop"]], "ivy.functional.ivy.elementwise": [[520, 2, 1, "", "abs"], [522, 2, 1, "", "acos"], [590, 2, 1, "", "acosh"], [530, 2, 1, "", "add"], [538, 2, 1, "", "asin"], [542, 2, 1, "", "asinh"], [543, 2, 1, "", "atan"], [550, 2, 1, "", "atan2"], [749, 2, 1, "", "atanh"], [558, 2, 1, "", "bitwise_and"], [562, 2, 1, "", "bitwise_invert"], [566, 2, 1, "", "bitwise_left_shift"], [570, 2, 1, "", "bitwise_or"], [574, 2, 1, "", "bitwise_right_shift"], [578, 2, 1, "", "bitwise_xor"], [582, 2, 1, "", "ceil"], [583, 2, 1, "", "cos"], [587, 2, 1, "", "cosh"], [591, 2, 1, "", "divide"], [596, 2, 1, "", "equal"], [603, 2, 1, "", "erf"], [604, 2, 1, "", "exp"], [611, 2, 1, "", "expm1"], [612, 2, 1, "", "floor"], [619, 2, 1, "", "floor_divide"], [620, 2, 1, "", "greater"], [627, 2, 1, "", "greater_equal"], [631, 2, 1, "", "isfinite"], [635, 2, 1, "", "isinf"], [639, 2, 1, "", "isnan"], [643, 2, 1, "", "less"], [647, 2, 1, "", "less_equal"], [651, 2, 1, "", "log"], [655, 2, 1, "", "log10"], [659, 2, 1, "", "log1p"], [663, 2, 1, "", "log2"], [667, 2, 1, "", "logaddexp"], [671, 2, 1, "", "logical_and"], [675, 2, 1, "", "logical_not"], [679, 2, 1, "", "logical_or"], [683, 2, 1, "", "logical_xor"], [684, 2, 1, "", "maximum"], [685, 2, 1, "", "minimum"], [689, 2, 1, "", "multiply"], [694, 2, 1, "", "negative"], [698, 2, 1, "", "not_equal"], [702, 2, 1, "", "positive"], [706, 2, 1, "", "pow"], [710, 2, 1, "", "remainder"], [714, 2, 1, "", "round"], [718, 2, 1, "", "sign"], [722, 2, 1, "", "sin"], [726, 2, 1, "", "sinh"], [730, 2, 1, "", "sqrt"], [734, 2, 1, "", "square"], [739, 2, 1, "", "subtract"], [740, 2, 1, "", "tan"], [745, 2, 1, "", "tanh"], [753, 2, 1, "", "trunc"]], "ivy.functional.ivy.general": [[758, 2, 1, "", "all_equal"], [760, 2, 1, "", "arg_info"], [761, 2, 1, "", "arg_names"], [762, 2, 1, "", "array_equal"], [763, 2, 1, "", "arrays_equal"], [764, 2, 1, "", "assert_supports_inplace"], [765, 2, 1, "", "cache_fn"], [766, 2, 1, "", "clip_matrix_norm"], [769, 2, 1, "", "clip_vector_norm"], [770, 2, 1, "", "container_types"], [771, 2, 1, "", "copy_array"], [772, 2, 1, "", "cumprod"], [773, 2, 1, "", "cumsum"], [774, 2, 1, "", "current_backend_str"], [775, 2, 1, "", "default"], [776, 2, 1, "", "einops_rearrange"], [777, 2, 1, "", "einops_reduce"], [778, 2, 1, "", "einops_repeat"], [779, 2, 1, "", "exists"], [780, 2, 1, "", "floormod"], [781, 2, 1, "", "fourier_encode"], [782, 2, 1, "", "gather"], [786, 2, 1, "", "gather_nd"], [788, 2, 1, "", "get_all_arrays_in_memory"], [789, 2, 1, "", "get_min_base"], [790, 2, 1, "", "get_min_denominator"], [791, 2, 1, "", "get_num_dims"], [792, 2, 1, "", "get_referrers_recursive"], [793, 2, 1, "", "has_nans"], [794, 2, 1, "", "indices_where"], [795, 2, 1, "", "inplace_arrays_supported"], [796, 2, 1, "", "inplace_decrement"], [797, 2, 1, "", "inplace_increment"], [798, 2, 1, "", "inplace_update"], [799, 2, 1, "", "inplace_variables_supported"], [800, 2, 1, "", "is_array"], [801, 2, 1, "", "is_ivy_array"], [802, 2, 1, "", "is_ivy_container"], [803, 2, 1, "", "is_native_array"], [804, 2, 1, "", "match_kwargs"], [805, 2, 1, "", "multiprocessing"], [806, 2, 1, "", "num_arrays_in_memory"], [807, 2, 1, "", "one_hot"], [808, 2, 1, "", "print_all_arrays_in_memory"], [809, 2, 1, "", "queue_timeout"], [810, 2, 1, "", "scatter_flat"], [811, 2, 1, "", "scatter_nd"], [812, 2, 1, "", "set_min_base"], [813, 2, 1, "", "set_min_denominator"], [814, 2, 1, "", "set_queue_timeout"], [815, 2, 1, "", "set_tmp_dir"], [816, 2, 1, "", "shape"], [817, 2, 1, "", "shape_to_tuple"], [818, 2, 1, "", "stable_divide"], [819, 2, 1, "", "stable_pow"], [820, 2, 1, "", "supports_inplace"], [821, 2, 1, "", "tmp_dir"], [822, 2, 1, "", "to_list"], [823, 2, 1, "", "to_numpy"], [824, 2, 1, "", "to_scalar"], [825, 2, 1, "", "try_else_none"], [826, 2, 1, "", "unstack"], [827, 2, 1, "", "value_is_nan"]], "ivy.functional.ivy.gradients": [[828, 1, 1, "", "GradientTracking"], [833, 2, 1, "", "adam_step"], [837, 2, 1, "", "adam_update"], [839, 2, 1, "", "execute_with_gradients"], [842, 2, 1, "", "gradient_descent_update"], [844, 2, 1, "", "is_variable"], [847, 2, 1, "", "lamb_update"], [851, 2, 1, "", "lars_update"], [855, 2, 1, "", "optimizer_update"], [857, 2, 1, "", "set_with_grads"], [858, 2, 1, "", "stop_gradient"], [859, 2, 1, "", "unset_with_grads"], [860, 2, 1, "", "variable"], [861, 2, 1, "", "variable_data"], [862, 2, 1, "", "with_grads"]], "ivy.functional.ivy.gradients.GradientTracking": [[828, 3, 1, "", "__init__"]], "ivy.functional.ivy.layers": [[864, 2, 1, "", "conv1d"], [865, 2, 1, "", "conv1d_transpose"], [866, 2, 1, "", "conv2d"], [867, 2, 1, "", "conv2d_transpose"], [868, 2, 1, "", "conv3d"], [869, 2, 1, "", "conv3d_transpose"], [870, 2, 1, "", "depthwise_conv2d"], [871, 2, 1, "", "dropout"], [872, 2, 1, "", "linear"], [873, 2, 1, "", "lstm_update"], [874, 2, 1, "", "multi_head_attention"], [875, 2, 1, "", "scaled_dot_product_attention"]], "ivy.functional.ivy.linear_algebra": [[879, 2, 1, "", "cholesky"], [882, 2, 1, "", "cross"], [883, 2, 1, "", "det"], [888, 2, 1, "", "diagonal"], [891, 2, 1, "", "eigh"], [894, 2, 1, "", "eigvalsh"], [895, 2, 1, "", "inv"], [901, 2, 1, "", "matmul"], [904, 2, 1, "", "matrix_norm"], [905, 2, 1, "", "matrix_power"], [908, 2, 1, "", "matrix_rank"], [911, 2, 1, "", "matrix_transpose"], [914, 2, 1, "", "outer"], [917, 2, 1, "", "pinv"], [920, 2, 1, "", "qr"], [921, 2, 1, "", "slogdet"], [924, 2, 1, "", "solve"], [925, 2, 1, "", "svd"], [930, 2, 1, "", "svdvals"], [933, 2, 1, "", "tensordot"], [936, 2, 1, "", "trace"], [939, 2, 1, "", "vecdot"], [942, 2, 1, "", "vector_norm"], [945, 2, 1, "", "vector_to_skew_symmetric_matrix"]], "ivy.functional.ivy.losses": [[950, 2, 1, "", "binary_cross_entropy"], [955, 2, 1, "", "cross_entropy"], [960, 2, 1, "", "sparse_cross_entropy"]], "ivy.functional.ivy.manipulation": [[966, 2, 1, "", "clip"], [971, 2, 1, "", "concat"], [975, 2, 1, "", "constant_pad"], [979, 2, 1, "", "expand_dims"], [983, 2, 1, "", "flip"], [987, 2, 1, "", "permute_dims"], [991, 2, 1, "", "repeat"], [995, 2, 1, "", "reshape"], [999, 2, 1, "", "roll"], [1001, 2, 1, "", "split"], [1005, 2, 1, "", "squeeze"], [1009, 2, 1, "", "stack"], [1013, 2, 1, "", "swapaxes"], [1017, 2, 1, "", "tile"], [1021, 2, 1, "", "zero_pad"]], "ivy.functional.ivy.meta": [[1023, 2, 1, "", "fomaml_step"], [1024, 2, 1, "", "maml_step"], [1025, 2, 1, "", "reptile_step"]], "ivy.functional.ivy.nest": [[1027, 2, 1, "", "all_nested_indices"], [1028, 2, 1, "", "copy_nest"], [1029, 2, 1, "", "index_nest"], [1030, 2, 1, "", "insert_into_nest_at_index"], [1031, 2, 1, "", "insert_into_nest_at_indices"], [1032, 2, 1, "", "map"], [1033, 2, 1, "", "map_nest_at_index"], [1034, 2, 1, "", "map_nest_at_indices"], [1035, 2, 1, "", "multi_index_nest"], [1036, 2, 1, "", "nested_any"], [1037, 2, 1, "", "nested_indices_where"], [1038, 2, 1, "", "nested_map"], [1039, 2, 1, "", "nested_multi_map"], [1040, 2, 1, "", "prune_nest_at_index"], [1041, 2, 1, "", "prune_nest_at_indices"], [1042, 2, 1, "", "set_nest_at_index"], [1043, 2, 1, "", "set_nest_at_indices"]], "ivy.functional.ivy.norms": [[1048, 2, 1, "", "layer_norm"]], "ivy.functional.ivy.random": [[1050, 2, 1, "", "multinomial"], [1052, 2, 1, "", "randint"], [1054, 2, 1, "", "random_normal"], [1057, 2, 1, "", "random_uniform"], [1059, 2, 1, "", "seed"], [1060, 2, 1, "", "shuffle"]], "ivy.functional.ivy.searching": [[1062, 2, 1, "", "argmax"], [1063, 2, 1, "", "argmin"], [1064, 2, 1, "", "nonzero"], [1065, 2, 1, "", "where"]], "ivy.functional.ivy.set": [[1067, 2, 1, "", "unique_all"], [1068, 2, 1, "", "unique_counts"], [1069, 2, 1, "", "unique_inverse"], [1070, 2, 1, "", "unique_values"]], "ivy.functional.ivy.sorting": [[1075, 2, 1, "", "argsort"], [1080, 2, 1, "", "sort"]], "ivy.functional.ivy.statistical": [[1110, 2, 1, "", "einsum"], [1090, 2, 1, "", "max"], [1094, 2, 1, "", "mean"], [1098, 2, 1, "", "min"], [1102, 2, 1, "", "prod"], [1106, 2, 1, "", "std"], [1107, 2, 1, "", "sum"], [1114, 2, 1, "", "var"]], "ivy.functional.ivy.utility": [[1119, 2, 1, "", "all"], [1123, 2, 1, "", "any"]], "ivy.inspection": [[1128, 2, 1, "", "add_array_specs"], [1129, 2, 1, "", "fn_array_spec"]], "ivy.stateful": [[1131, 0, 0, "-", "activations"], [1134, 0, 0, "-", "converters"], [1136, 0, 0, "-", "initializers"], [1145, 0, 0, "-", "layers"], [1157, 0, 0, "-", "module"], [1159, 0, 0, "-", "norms"], [1161, 0, 0, "-", "optimizers"], [1167, 0, 0, "-", "sequential"]], "ivy.stateful.activations": [[1132, 1, 1, "", "GEGLU"], [1133, 1, 1, "", "GELU"]], "ivy.stateful.activations.GEGLU": [[1132, 3, 1, "", "__init__"]], "ivy.stateful.activations.GELU": [[1133, 3, 1, "", "__init__"]], "ivy.stateful.converters": [[1135, 2, 1, "", "to_ivy_module"]], "ivy.stateful.initializers": [[1136, 1, 1, "", "Constant"], [1138, 1, 1, "", "FirstLayerSiren"], [1139, 1, 1, "", "GlorotUniform"], [1136, 1, 1, "", "KaimingNormal"], [1141, 1, 1, "", "Ones"], [1142, 1, 1, "", "Siren"], [1136, 1, 1, "", "Uniform"], [1144, 1, 1, "", "Zeros"]], "ivy.stateful.initializers.Constant": [[1136, 3, 1, "", "__init__"], [1136, 3, 1, "", "create_variables"]], "ivy.stateful.initializers.FirstLayerSiren": [[1138, 3, 1, "", "__init__"]], "ivy.stateful.initializers.GlorotUniform": [[1139, 3, 1, "", "__init__"]], "ivy.stateful.initializers.KaimingNormal": [[1136, 3, 1, "", "__init__"], [1136, 3, 1, "", "create_variables"]], "ivy.stateful.initializers.Ones": [[1141, 3, 1, "", "__init__"]], "ivy.stateful.initializers.Siren": [[1142, 3, 1, "", "__init__"]], "ivy.stateful.initializers.Uniform": [[1136, 3, 1, "", "__init__"], [1136, 3, 1, "", "create_variables"]], "ivy.stateful.initializers.Zeros": [[1144, 3, 1, "", "__init__"]], "ivy.stateful.layers": [[1146, 1, 1, "", "Conv1D"], [1147, 1, 1, "", "Conv1DTranspose"], [1148, 1, 1, "", "Conv2D"], [1149, 1, 1, "", "Conv2DTranspose"], [1150, 1, 1, "", "Conv3D"], [1151, 1, 1, "", "Conv3DTranspose"], [1152, 1, 1, "", "DepthwiseConv2D"], [1153, 1, 1, "", "Dropout"], [1154, 1, 1, "", "LSTM"], [1155, 1, 1, "", "Linear"], [1156, 1, 1, "", "MultiHeadAttention"]], "ivy.stateful.layers.Conv1D": [[1146, 3, 1, "", "__init__"]], "ivy.stateful.layers.Conv1DTranspose": [[1147, 3, 1, "", "__init__"]], "ivy.stateful.layers.Conv2D": [[1148, 3, 1, "", "__init__"]], "ivy.stateful.layers.Conv2DTranspose": [[1149, 3, 1, "", "__init__"]], "ivy.stateful.layers.Conv3D": [[1150, 3, 1, "", "__init__"]], "ivy.stateful.layers.Conv3DTranspose": [[1151, 3, 1, "", "__init__"]], "ivy.stateful.layers.DepthwiseConv2D": [[1152, 3, 1, "", "__init__"]], "ivy.stateful.layers.Dropout": [[1153, 3, 1, "", "__init__"]], "ivy.stateful.layers.LSTM": [[1154, 3, 1, "", "__init__"], [1154, 3, 1, "", "get_initial_state"]], "ivy.stateful.layers.Linear": [[1155, 3, 1, "", "__init__"]], "ivy.stateful.layers.MultiHeadAttention": [[1156, 3, 1, "", "__init__"]], "ivy.stateful.module": [[1158, 1, 1, "", "Module"]], "ivy.stateful.module.Module": [[1158, 3, 1, "", "__init__"], [1158, 3, 1, "", "build"], [1158, 4, 1, "", "build_mode"], [1158, 4, 1, "", "built"], [1158, 3, 1, "", "check_submod_rets"], [1158, 3, 1, "", "get_mod_key"], [1158, 3, 1, "", "mod_depth"], [1158, 3, 1, "", "mod_height"], [1158, 3, 1, "", "mod_with_top_mod_key_chain"], [1158, 3, 1, "", "save_weights"], [1158, 3, 1, "", "show_mod_in_top_mod"], [1158, 3, 1, "", "show_structure"], [1158, 3, 1, "", "show_v_in_top_v"], [1158, 3, 1, "", "sub_mods"], [1158, 3, 1, "", "track_submod_call_order"], [1158, 3, 1, "", "track_submod_rets"], [1158, 3, 1, "", "v_with_top_v_key_chains"]], "ivy.stateful.norms": [[1160, 1, 1, "", "LayerNorm"]], "ivy.stateful.norms.LayerNorm": [[1160, 3, 1, "", "__init__"]], "ivy.stateful.optimizers": [[1162, 1, 1, "", "Adam"], [1163, 1, 1, "", "LAMB"], [1164, 1, 1, "", "LARS"], [1165, 1, 1, "", "Optimizer"], [1166, 1, 1, "", "SGD"]], "ivy.stateful.optimizers.Adam": [[1162, 3, 1, "", "__init__"], [1162, 3, 1, "", "set_state"], [1162, 4, 1, "", "state"]], "ivy.stateful.optimizers.LAMB": [[1163, 3, 1, "", "__init__"], [1163, 3, 1, "", "set_state"], [1163, 4, 1, "", "state"]], "ivy.stateful.optimizers.LARS": [[1164, 3, 1, "", "__init__"], [1164, 3, 1, "", "set_state"], [1164, 4, 1, "", "state"]], "ivy.stateful.optimizers.Optimizer": [[1165, 3, 1, "", "__init__"], [1165, 3, 1, "", "set_state"], [1165, 3, 1, "", "step"]], "ivy.stateful.optimizers.SGD": [[1166, 3, 1, "", "__init__"], [1166, 3, 1, "", "set_state"], [1166, 4, 1, "", "state"]], "ivy.stateful.sequential": [[1168, 1, 1, "", "Sequential"]], "ivy.stateful.sequential.Sequential": [[1168, 3, 1, "", "__init__"]], "ivy.verbosity": [[1171, 2, 1, "", "cprint"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:function", "3": "py:method", "4": "py:property", "5": "py:data"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "function", "Python function"], "3": ["py", "method", "Python method"], "4": ["py", "property", "Python property"], "5": ["py", "data", "Python data"]}, "titleterms": {"activ": [0, 177, 399, 1131], "arraywithactiv": 1, "arrai": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 175, 359, 364, 369, 373, 439, 518, 523, 527, 531, 536, 540, 544, 548, 552, 556, 560, 564, 568, 572, 576, 580, 584, 588, 592, 597, 601, 605, 609, 613, 617, 621, 625, 629, 633, 637, 641, 645, 649, 653, 657, 661, 665, 669, 673, 677, 681, 687, 692, 696, 700, 704, 708, 712, 716, 720, 724, 728, 732, 737, 742, 747, 751, 756, 784, 831, 878, 881, 884, 887, 890, 893, 896, 899, 903, 907, 910, 913, 916, 919, 923, 926, 929, 932, 935, 938, 941, 944, 948, 953, 958, 964, 969, 973, 977, 981, 985, 989, 993, 997, 1003, 1007, 1011, 1015, 1019, 1046, 1073, 1078, 1084, 1088, 1092, 1096, 1100, 1104, 1108, 1112, 1117, 1121], "method": [2, 184, 365, 373, 374], "ab": [3, 185, 517, 518, 519, 520], "aco": [4, 186, 522, 523, 524, 525], "acosh": [5, 187, 526, 527, 528, 529], "adam_step": [6, 188, 830, 831, 832, 833], "add": [7, 190, 358, 530, 531, 532, 533], "add_ivy_array_instance_method": [8, 159], "all": [9, 192, 1116, 1117, 1118, 1119], "all_equ": [10, 193, 755, 756, 757, 758], "ani": [11, 194, 1120, 1121, 1122, 1123], "argsort": [12, 195, 1072, 1073, 1074, 1075], "asin": [13, 196, 535, 536, 537, 538], "asinh": [14, 197, 539, 540, 541, 542], "atan": [15, 200, 543, 544, 545, 546], "atan2": [16, 201, 547, 548, 549, 550], "atanh": [17, 202, 551, 552, 553, 554], "binary_cross_entropi": [18, 203, 947, 948, 949, 950], "bitwise_and": [19, 204, 555, 556, 557, 558], "bitwise_invert": [20, 205, 559, 560, 561, 562], "bitwise_left_shift": [21, 206, 563, 564, 565, 566], "bitwise_or": [22, 207, 567, 568, 569, 570], "bitwise_right_shift": [23, 208, 571, 572, 573, 574], "bitwise_xor": [24, 209, 575, 576, 577, 578], "can_cast": [25, 210, 438, 439, 440, 441], "ceil": [26, 211, 579, 580, 581, 582], "choleski": [27, 877, 878, 879], "clip": [28, 212, 963, 964, 965, 966], "concat": [29, 214, 968, 969, 970, 971], "constant_pad": [30, 215, 972, 973, 974, 975], "co": [31, 216, 583, 584, 585, 586], "cosh": [32, 217, 587, 588, 589, 590], "cross": [33, 880, 881, 882], "cross_entropi": [34, 218, 952, 953, 954, 955], "det": [35, 883, 884, 885], "diagon": [36, 886, 887, 888], "divid": [37, 219, 591, 592, 593, 594], "eigh": [38, 889, 890, 891], "eigvalsh": [39, 892, 893, 894], "einsum": [40, 220, 1083, 1084, 1085, 1086], "equal": [41, 221, 596, 597, 598, 599], "erf": [42, 222, 600, 601, 602, 603], "exp": [43, 223, 604, 605, 606, 607], "expand_dim": [44, 224, 976, 977, 978, 979], "expm1": [45, 225, 608, 609, 610, 611], "flip": [46, 226, 980, 981, 982, 983], "floor": [47, 227, 612, 613, 614, 615], "floor_divid": [48, 228, 616, 617, 618, 619], "gather_nd": [49, 229, 783, 784, 785, 786], "greater": [50, 231, 620, 621, 622, 623], "greater_equ": [51, 232, 624, 625, 626, 627], "inv": [52, 895, 896, 897], "isfinit": [53, 233, 628, 629, 630, 631], "isinf": [54, 234, 632, 633, 634, 635], "isnan": [55, 235, 636, 637, 638, 639], "layer_norm": [56, 238, 1045, 1046, 1047, 1048], "less": [57, 239, 640, 641, 642, 643], "less_equ": [58, 240, 644, 645, 646, 647], "log": [59, 241, 648, 649, 650, 651], "log10": [60, 242, 652, 653, 654, 655], "log1p": [61, 243, 656, 657, 658, 659], "log2": [62, 244, 660, 661, 662, 663], "logaddexp": [63, 245, 664, 665, 666, 667], "logical_and": [64, 246, 668, 669, 670, 671], "logical_not": [65, 247, 672, 673, 674, 675], "logical_or": [66, 248, 676, 677, 678, 679], "logical_xor": [67, 249, 680, 681, 682, 683], "matmul": [68, 250, 898, 899, 900, 901], "matrix_norm": [69, 902, 903, 904], "matrix_rank": [70, 906, 907, 908], "matrix_transpos": [71, 909, 910, 911], "max": [72, 251, 1087, 1088, 1089, 1090], "mean": [73, 252, 1091, 1092, 1093, 1094], "min": [74, 253, 1095, 1096, 1097, 1098], "multipli": [75, 254, 686, 687, 688, 689], "neg": [76, 255, 691, 692, 693, 694], "not_equ": [77, 256, 695, 696, 697, 698], "outer": [78, 912, 913, 914], "permute_dim": [79, 258, 984, 985, 986, 987], "pinv": [80, 915, 916, 917], "posit": [81, 259, 699, 700, 701, 702], "pow": [82, 260, 703, 704, 705, 706], "prod": [83, 261, 1099, 1100, 1101, 1102], "qr": [84, 918, 919, 920], "remaind": [85, 263, 707, 708, 709, 710], "repeat": [86, 264, 988, 989, 990, 991], "reshap": [87, 265, 992, 993, 994, 995], "roll": [88, 266, 358, 996, 997, 998, 999], "round": [89, 267, 711, 712, 713, 714], "sign": [90, 268, 715, 716, 717, 718], "sin": [91, 269, 719, 720, 721, 722], "sinh": [92, 270, 723, 724, 725, 726], "solv": [93, 922, 923, 924], "sort": [94, 152, 271, 342, 1071, 1077, 1078, 1079, 1080], "sparse_cross_entropi": [95, 272, 957, 958, 959, 960], "sqrt": [96, 273, 727, 728, 729, 730], "squar": [97, 274, 731, 732, 733, 734], "squeez": [98, 275, 1002, 1003, 1004, 1005], "stack": [99, 276, 1006, 1007, 1008, 1009], "std": [100, 302, 1103, 1104, 1105, 1106], "subtract": [101, 303, 735, 737, 738, 739], "sum": [102, 304, 1107, 1108, 1109, 1110], "svd": [103, 925, 926, 927], "svdval": [104, 928, 929, 930], "swapax": [105, 305, 1010, 1011, 1012, 1013], "tan": [106, 306, 358, 740, 742, 743, 744], "tanh": [107, 307, 406, 745, 747, 748, 749], "tensordot": [108, 931, 932, 933], "tile": [109, 308, 1014, 1015, 1016, 1017], "trace": [110, 934, 935, 936], "trunc": [111, 309, 750, 751, 752, 753], "var": [112, 310, 1111, 1112, 1113, 1114], "vecdot": [113, 937, 938, 939], "vector_norm": [114, 940, 941, 942], "vector_to_skew_symmetric_matrix": [115, 943, 944, 945], "zero_pad": [116, 311, 1018, 1019, 1020, 1021], "convers": 117, "args_to_ivi": 118, "args_to_n": 119, "to_ivi": 120, "to_n": 121, "creation": [122, 312, 410], "arraywithcr": 123, "data": [124, 314, 360, 366, 374, 388, 429, 1066, 1067, 1068, 1070], "type": [124, 314, 361, 366, 388, 429], "arraywithdatatyp": 125, "devic": [126, 316, 367, 369, 466], "arraywithdevic": 127, "elementwis": [128, 318, 516], "arraywithelementwis": 129, "gener": [130, 320, 360, 754], "arraywithgener": 131, "gradient": [132, 322, 828], "arraywithgradi": 133, "imag": [134, 324], "arraywithimag": 135, "layer": [136, 326, 863, 1145], "arraywithlay": 137, "linear": [138, 328, 872, 876, 1155], "algebra": [138, 328, 876], "arraywithlinearalgebra": 139, "loss": [140, 330, 946], "arraywithloss": 141, "manipul": [142, 332, 962], "arraywithmanipul": 143, "norm": [144, 334, 1044, 1159], "arraywithnorm": 145, "random": [146, 336, 1049], "arraywithrandom": 147, "search": [148, 338, 1061], "arraywithsearch": 149, "set": [150, 340, 351, 362, 1066], "arraywithset": 151, "arraywithsort": 153, "statist": [154, 344, 1082], "arraywithstatist": 155, "util": [156, 346, 1115], "arraywithutil": 157, "wrap": [158, 348, 363], "backend": [160, 356, 362, 371, 388], "handler": [160, 371], "choose_random_backend": 162, "clear_backend_stack": 163, "current_backend": 164, "get_backend": 165, "set_backend": 166, "try_import_ivy_jax": 167, "try_import_ivy_mxnet": 168, "try_import_ivy_numpi": 169, "try_import_ivy_tf": 170, "try_import_ivy_torch": 171, "unset_backend": 172, "background": [173, 1124], "ml": 174, "explos": 174, "standard": 175, "skeptic": 175, "complimentari": 175, "vs": [175, 388], "competit": 175, "do": 175, "work": [175, 354], "The": [175, 352, 373, 388], "api": [175, 353, 356, 359, 365, 371, 373, 375, 376], "why": 176, "unifi": [176, 373], "No": [176, 351], "more": 176, "re": 176, "implement": 176, "infinit": 176, "shelf": 176, "life": 176, "containerwithactiv": 178, "base": 179, "containerbas": 180, "contain": [181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 365, 374, 440, 442, 519, 521, 524, 528, 532, 534, 537, 541, 545, 549, 553, 557, 561, 565, 569, 573, 577, 581, 585, 589, 593, 595, 598, 602, 606, 610, 614, 618, 622, 626, 630, 634, 638, 642, 646, 650, 654, 658, 662, 666, 670, 674, 678, 682, 688, 690, 693, 697, 701, 705, 709, 713, 717, 721, 725, 729, 733, 736, 738, 741, 743, 746, 748, 752, 757, 759, 768, 785, 787, 832, 834, 836, 838, 841, 843, 846, 848, 850, 852, 854, 856, 900, 949, 951, 954, 956, 959, 961, 965, 967, 970, 974, 978, 982, 986, 990, 994, 998, 1000, 1004, 1008, 1012, 1016, 1020, 1047, 1053, 1056, 1058, 1074, 1076, 1079, 1081, 1085, 1089, 1093, 1097, 1101, 1105, 1109, 1113, 1118, 1122], "multidevcontain": 183, "adam_upd": [189, 835, 836, 837], "add_ivy_container_instance_method": [191, 349], "at_dev": [198, 199], "clip_vector_norm": [213, 767, 768, 769], "gradient_descent_upd": [230, 840, 841, 842], "lamb_upd": [236, 845, 846, 847], "lars_upd": [237, 849, 850, 851], "optimizer_upd": [257, 853, 854, 855], "random_uniform": [262, 1055, 1056, 1057], "static_ab": [277, 521], "static_adam_step": [278, 834], "static_adam_upd": [279, 838], "static_add": [280, 534], "static_all_equ": [281, 759], "static_argsort": [282, 1076], "static_binary_cross_entropi": [283, 951], "static_can_cast": [284, 442], "static_clip": [285, 967], "static_cross_entropi": [286, 956], "static_divid": [287, 595], "static_gather_nd": [288, 787], "static_gradient_descent_upd": [289, 843], "static_lamb_upd": [290, 848], "static_lars_upd": [291, 852], "static_multipli": [292, 690], "static_optimizer_upd": [293, 856], "static_randint": [294, 1053], "static_random_uniform": [295, 1058], "static_rol": [296, 1000], "static_sort": [297, 1081], "static_sparse_cross_entropi": [298, 961], "static_subtract": [299, 736], "static_tan": [300, 741], "static_tanh": [301, 746], "containerwithcr": 313, "containerwithdatatyp": 315, "containerwithdevic": 317, "containerwithelementwis": 319, "containerwithgener": 321, "containerwithgradi": 323, "containerwithimag": 325, "containerwithlay": 327, "containerwithlinearalgebra": 329, "containerwithloss": 331, "containerwithmanipul": 333, "containerwithnorm": 335, "containerwithrandom": 337, "containerwithsearch": 339, "containerwithset": 341, "containerwithsort": 343, "containerwithstatist": 345, "containerwithutil": 347, "contribut": [350, 1124], "up": 351, "clone": 351, "ivi": [351, 356, 358, 360, 364, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 387, 439, 440, 441, 442, 518, 519, 520, 521, 523, 524, 525, 527, 528, 529, 531, 532, 533, 534, 536, 537, 538, 540, 541, 542, 544, 545, 546, 548, 549, 550, 552, 553, 554, 556, 557, 558, 560, 561, 562, 564, 565, 566, 568, 569, 570, 572, 573, 574, 576, 577, 578, 580, 581, 582, 584, 585, 586, 588, 589, 590, 592, 593, 594, 595, 597, 598, 599, 601, 602, 603, 605, 606, 607, 609, 610, 611, 613, 614, 615, 617, 618, 619, 621, 622, 623, 625, 626, 627, 629, 630, 631, 633, 634, 635, 637, 638, 639, 641, 642, 643, 645, 646, 647, 649, 650, 651, 653, 654, 655, 657, 658, 659, 661, 662, 663, 665, 666, 667, 669, 670, 671, 673, 674, 675, 677, 678, 679, 681, 682, 683, 687, 688, 689, 690, 692, 693, 694, 696, 697, 698, 700, 701, 702, 704, 705, 706, 708, 709, 710, 712, 713, 714, 716, 717, 718, 720, 721, 722, 724, 725, 726, 728, 729, 730, 732, 733, 734, 736, 737, 738, 739, 741, 742, 743, 744, 746, 747, 748, 749, 751, 752, 753, 756, 757, 758, 759, 768, 769, 784, 785, 786, 787, 831, 832, 833, 834, 836, 837, 838, 841, 842, 843, 846, 847, 848, 850, 851, 852, 854, 855, 856, 878, 879, 881, 882, 884, 885, 887, 888, 890, 891, 893, 894, 896, 897, 899, 900, 901, 903, 904, 907, 908, 910, 911, 913, 914, 916, 917, 919, 920, 923, 924, 926, 927, 929, 930, 932, 933, 935, 936, 938, 939, 941, 942, 944, 945, 948, 949, 950, 951, 953, 954, 955, 956, 958, 959, 960, 961, 964, 965, 966, 967, 969, 970, 971, 973, 974, 975, 977, 978, 979, 981, 982, 983, 985, 986, 987, 989, 990, 991, 993, 994, 995, 997, 998, 999, 1000, 1003, 1004, 1005, 1007, 1008, 1009, 1011, 1012, 1013, 1015, 1016, 1017, 1019, 1020, 1021, 1046, 1047, 1048, 1052, 1053, 1056, 1057, 1058, 1073, 1074, 1075, 1076, 1078, 1079, 1080, 1081, 1084, 1085, 1086, 1088, 1089, 1090, 1092, 1093, 1094, 1096, 1097, 1098, 1100, 1101, 1102, 1104, 1105, 1106, 1108, 1109, 1110, 1112, 1113, 1114, 1117, 1118, 1119, 1121, 1122, 1123], "pycharm": 351, "virtual": 351, "environ": 351, "docker": [351, 352, 354], "us": [351, 354, 374], "miniconda": [351, 354], "venv": [351, 354], "interpret": 351, "window": 351, "maco": 351, "ubuntu": 351, "github": 351, "codespac": 351, "pre": 351, "commit": [351, 352], "basic": 352, "get": 352, "help": 352, "todo": 352, "list": 352, "issu": 352, "manag": 352, "your": 352, "fork": 352, "who": 352, "To": 352, "ask": 352, "With": 352, "command": 352, "line": 352, "browser": 352, "pull": 352, "request": 352, "small": 352, "often": 352, "run": 352, "test": [352, 359, 360], "local": 352, "open": 353, "task": 353, "function": [353, 361, 363, 365, 366, 367, 369, 371, 376, 388], "format": 353, "frontend": [353, 376], "build": [354, 371], "doc": 354, "dockerless": 354, "document": 354, "pipelin": [354, 388], "make_doc": 354, "sh": 354, "entrypoint": 354, "_make_doc": 354, "generate_src_rst_fil": 354, "py": 354, "sphinx": 354, "correct_built_html_fil": 354, "remove_fil": 354, "deep": 355, "dive": 355, "navig": 356, "code": 356, "categor": 356, "submodul": 356, "design": [356, 370, 1124], "docstr": [357, 358], "exampl": [358, 369], "hypothesi": 360, "self": 360, "consist": 360, "explicit": 360, "test_array_funct": 360, "primari": 361, "composit": 361, "mix": 361, "standalon": 361, "nestabl": [361, 365, 369], "conveni": 361, "nativ": 364, "handl": 364, "instanc": [365, 373], "static": 365, "special": 365, "modul": [366, 367, 375, 1157, 1158], "argument": [366, 367, 368, 369], "other": [366, 367], "inplac": 368, "updat": 368, "out": [368, 369], "copi": 368, "dtype": [369, 447], "number": 369, "oper": [369, 373, 388], "integ": 369, "sequenc": 369, "block": 371, "framework": [371, 372], "graph": [371, 376], "compil": [371, 376, 407, 408], "class": 373, "monkei": 373, "patch": 373, "construct": 374, "represent": 374, "recurs": 374, "built": 374, "ins": 374, "access": 374, "save": 374, "load": 374, "comparison": 374, "custom": [374, 388], "case": 374, "compartment": 374, "configur": 374, "network": [374, 376], "weight": 374, "state": [375, 388], "initi": [375, 1136], "optim": [375, 1161, 1165], "transpil": 376, "role": 376, "convert": [376, 1134], "model": [376, 383, 388], "builder": 378, "ecosystem": 379, "gym": [380, 387], "mech": 381, "memori": [382, 387], "robot": [384, 387], "vision": [385, 387], "extens": [386, 1124], "appli": 387, "librari": 387, "mechan": 387, "faq": 388, "maintain": 388, "version": 388, "dynam": 388, "size": 388, "shape": [388, 816, 1066, 1067, 1068, 1070], "check": 388, "control": 388, "flow": 388, "auto": 388, "differenti": 388, "replica": 388, "parallel": 388, "support": 388, "altern": 388, "structur": 388, "func": 389, "wrapper": 389, "handle_nest": 390, "handle_out_argu": 391, "infer_devic": 392, "infer_dtyp": 393, "inputs_to_ivy_arrai": 394, "inputs_to_native_arrai": 395, "outputs_to_ivy_arrai": 396, "to_native_arrays_and_back": 397, "gelu": [400, 1133], "leaky_relu": 401, "relu": 402, "sigmoid": 403, "softmax": 404, "softplu": 405, "constant": 409, "note": [410, 416], "arang": 411, "asarrai": 412, "empti": 413, "empty_lik": 414, "ey": 415, "from_dlpack": 416, "full": 417, "full_lik": 418, "linspac": 419, "logspac": 420, "meshgrid": 421, "native_arrai": 422, "ones": 423, "ones_lik": 424, "tril": 425, "triu": 426, "zero": [427, 1144], "zeros_lik": 428, "as_ivy_dtyp": 433, "as_native_dtyp": 434, "astyp": 435, "broadcast_arrai": 436, "broadcast_to": 437, "closest_valid_dtyp": 443, "default_dtyp": 444, "default_float_dtyp": 445, "default_int_dtyp": 446, "dtype_bit": 448, "finfo": 449, "function_supported_dtyp": 450, "function_unsupported_dtyp": 451, "iinfo": 452, "invalid_dtyp": 453, "is_float_dtyp": 454, "is_int_dtyp": 455, "promote_typ": 456, "result_typ": 457, "set_default_dtyp": 458, "set_default_float_dtyp": 459, "set_default_int_dtyp": 460, "type_promote_arrai": 461, "unset_default_dtyp": 462, "unset_default_float_dtyp": 463, "unset_default_int_dtyp": 464, "valid_dtyp": 465, "devcloneditem": 468, "devclonedit": 469, "devclonednest": 470, "devdistitem": 471, "devdistit": 472, "devdistnest": 473, "devmapp": 475, "devmappermultiproc": 476, "multidevitem": 478, "multidevit": 479, "multidevnest": 480, "profil": 481, "as_ivy_dev": 482, "as_native_dev": 483, "clear_mem_on_dev": 484, "default_devic": 485, "dev": 486, "dev_clon": 487, "dev_clone_arrai": 488, "dev_clone_it": 489, "dev_clone_nest": 490, "dev_dist": 491, "dev_dist_arrai": 492, "dev_dist_it": 493, "dev_dist_nest": 494, "dev_unifi": 495, "dev_unify_arrai": 496, "dev_unify_it": 497, "dev_unify_nest": 498, "dev_util": 499, "get_all_ivy_arrays_on_dev": 500, "gpu_is_avail": 501, "num_cpu_cor": 502, "num_gpu": 503, "num_ivy_arrays_on_dev": 504, "percent_used_mem_on_dev": 505, "print_all_ivy_arrays_on_dev": 506, "set_default_devic": 507, "set_split_factor": 508, "split_factor": 509, "split_func_cal": 510, "to_devic": 511, "total_mem_on_dev": 512, "tpu_is_avail": 513, "unset_default_devic": 514, "used_mem_on_dev": 515, "maximum": 684, "minimum": 685, "arg_info": 760, "arg_nam": 761, "array_equ": 762, "arrays_equ": 763, "assert_supports_inplac": 764, "cache_fn": 765, "clip_matrix_norm": 766, "container_typ": 770, "copy_arrai": 771, "cumprod": 772, "cumsum": 773, "current_backend_str": 774, "default": 775, "einops_rearrang": 776, "einops_reduc": 777, "einops_repeat": 778, "exist": 779, "floormod": 780, "fourier_encod": 781, "gather": 782, "get_all_arrays_in_memori": 788, "get_min_bas": 789, "get_min_denomin": 790, "get_num_dim": 791, "get_referrers_recurs": 792, "has_nan": 793, "indices_wher": 794, "inplace_arrays_support": 795, "inplace_decr": 796, "inplace_incr": 797, "inplace_upd": 798, "inplace_variables_support": 799, "is_arrai": 800, "is_ivy_arrai": 801, "is_ivy_contain": 802, "is_native_arrai": 803, "match_kwarg": 804, "multiprocess": 805, "num_arrays_in_memori": 806, "one_hot": 807, "print_all_arrays_in_memori": 808, "queue_timeout": 809, "scatter_flat": 810, "scatter_nd": 811, "set_min_bas": 812, "set_min_denomin": 813, "set_queue_timeout": 814, "set_tmp_dir": 815, "shape_to_tupl": 817, "stable_divid": 818, "stable_pow": 819, "supports_inplac": 820, "tmp_dir": 821, "to_list": 822, "to_numpi": 823, "to_scalar": 824, "try_else_non": 825, "unstack": 826, "value_is_nan": 827, "execute_with_gradi": 839, "is_vari": 844, "set_with_grad": 857, "stop_gradi": 858, "unset_with_grad": 859, "variabl": 860, "variable_data": 861, "with_grad": 862, "conv1d": [864, 1146], "conv1d_transpos": 865, "conv2d": [866, 1148], "conv2d_transpos": 867, "conv3d": [868, 1150], "conv3d_transpos": 869, "depthwise_conv2d": 870, "dropout": [871, 1153], "lstm_updat": 873, "multi_head_attent": 874, "scaled_dot_product_attent": 875, "matrix_pow": 905, "slogdet": 921, "split": 1001, "meta": 1022, "fomaml_step": 1023, "maml_step": 1024, "reptile_step": 1025, "nest": 1026, "all_nested_indic": 1027, "copy_nest": 1028, "index_nest": 1029, "insert_into_nest_at_index": 1030, "insert_into_nest_at_indic": 1031, "map": 1032, "map_nest_at_index": 1033, "map_nest_at_indic": 1034, "multi_index_nest": 1035, "nested_ani": 1036, "nested_indices_wher": 1037, "nested_map": 1038, "nested_multi_map": 1039, "prune_nest_at_index": 1040, "prune_nest_at_indic": 1041, "set_nest_at_index": 1042, "set_nest_at_indic": 1043, "multinomi": 1050, "randint": [1051, 1052], "random_norm": 1054, "seed": 1059, "shuffl": 1060, "argmax": 1062, "argmin": 1063, "nonzero": 1064, "where": 1065, "depend": [1066, 1067, 1068, 1070], "output": [1066, 1067, 1068, 1070], "unique_al": 1067, "unique_count": 1068, "unique_invers": 1069, "unique_valu": 1070, "content": 1124, "overview": 1124, "quick": 1124, "start": 1124, "roadmap": [1124, 1130], "citat": 1124, "inspect": 1127, "add_array_spec": 1128, "fn_array_spec": 1129, "geglu": 1132, "to_ivy_modul": 1135, "firstlayersiren": 1138, "glorotuniform": 1139, "Ones": 1141, "siren": 1142, "conv1dtranspos": 1147, "conv2dtranspos": 1149, "conv3dtranspos": 1151, "depthwiseconv2d": 1152, "lstm": 1154, "multiheadattent": 1156, "layernorm": 1160, "adam": 1162, "lamb": 1163, "lar": 1164, "sgd": 1166, "sequenti": [1167, 1168], "verbos": 1170, "cprint": 1171}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 6, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.viewcode": 1, "sphinx": 56}})