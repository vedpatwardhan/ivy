Search.setIndex({"docnames": ["array/activations", "array/activations/ArrayWithActivations", "array/conversions", "array/conversions/args_to_ivy", "array/conversions/args_to_native", "array/conversions/to_ivy", "array/conversions/to_native", "array/creation", "array/creation/ArrayWithCreation", "array/data_type", "array/data_type/ArrayWithDataTypes", "array/device", "array/device/ArrayWithDevice", "array/elementwise", "array/elementwise/ArrayWithElementwise", "array/general", "array/general/ArrayWithGeneral", "array/gradients", "array/gradients/ArrayWithGradients", "array/image", "array/image/ArrayWithImage", "array/layers", "array/layers/ArrayWithLayers", "array/linear_algebra", "array/linear_algebra/ArrayWithLinearAlgebra", "array/losses", "array/losses/ArrayWithLosses", "array/manipulation", "array/manipulation/ArrayWithManipulation", "array/norms", "array/norms/ArrayWithNorms", "array/random", "array/random/ArrayWithRandom", "array/searching", "array/searching/ArrayWithSearching", "array/set", "array/set/ArrayWithSet", "array/sorting", "array/sorting/ArrayWithSorting", "array/statistical", "array/statistical/ArrayWithStatistical", "array/utility", "array/utility/ArrayWithUtility", "array/wrapping", "array/wrapping/add_ivy_array_instance_methods", "backend_handler", "backend_handler/ContextManager:\n    def __init__", "backend_handler/choose_random_backend", "backend_handler/clear_backend_stack", "backend_handler/current_backend", "backend_handler/get_backend", "backend_handler/set_backend", "backend_handler/try_import_ivy_jax", "backend_handler/try_import_ivy_mxnet", "backend_handler/try_import_ivy_numpy", "backend_handler/try_import_ivy_tf", "backend_handler/try_import_ivy_torch", "backend_handler/unset_backend", "background", "background/ml_explosion", "background/standardization", "background/why_unify", "container/activations", "container/activations/ContainerWithActivations", "container/base", "container/base/ContainerBase", "container/container", "container/container/Container", "container/container/MultiDevContainer", "container/creation", "container/creation/ContainerWithCreation", "container/data_type", "container/data_type/ContainerWithDataTypes", "container/device", "container/device/ContainerWithDevice", "container/elementwise", "container/elementwise/ContainerWithElementwise", "container/general", "container/general/ContainerWithGeneral", "container/gradients", "container/gradients/ContainerWithGradients", "container/image", "container/image/ContainerWithImage", "container/layers", "container/layers/ContainerWithLayers", "container/linear_algebra", "container/linear_algebra/ContainerWithLinearAlgebra", "container/losses", "container/losses/ContainerWithLosses", "container/manipulation", "container/manipulation/ContainerWithManipulation", "container/norms", "container/norms/ContainerWithNorms", "container/random", "container/random/ContainerWithRandom", "container/searching", "container/searching/ContainerWithSearching", "container/set", "container/set/ContainerWithSet", "container/sorting", "container/sorting/ContainerWithSorting", "container/statistical", "container/statistical/ContainerWithStatistical", "container/utility", "container/utility/ContainerWithUtility", "container/wrapping", "container/wrapping/add_ivy_container_instance_methods", "contributing", "contributing/0_setting_up", "contributing/1_the_basics", "contributing/4_open_tasks", "contributing/building_the_docs", "deep_dive", "deep_dive/0_navigating_the_code", "deep_dive/10_docstrings", "deep_dive/11_docstring_examples", "deep_dive/12_array_api_tests", "deep_dive/13_ivy_tests", "deep_dive/1_function_types", "deep_dive/2_backend_setting", "deep_dive/3_function_wrapping", "deep_dive/4_arrays", "deep_dive/5_containers", "deep_dive/6_data_types", "deep_dive/7_devices", "deep_dive/8_inplace_updates", "deep_dive/9_function_arguments", "design", "design/building_blocks", "design/ivy_as_a_framework", "design/ivy_as_a_framework/ivy_array", "design/ivy_as_a_framework/ivy_container", "design/ivy_as_a_framework/ivy_stateful_api", "design/ivy_as_a_transpiler", "docs/ivy", "docs/ivy_builder", "docs/ivy_ecosystem", "docs/ivy_gym", "docs/ivy_mech", "docs/ivy_memory", "docs/ivy_models", "docs/ivy_robot", "docs/ivy_vision", "extensions", "extensions/applied_libraries", "faq", "func_wrapper", "func_wrapper/handle_nestable", "func_wrapper/handle_out_argument", "func_wrapper/infer_device", "func_wrapper/infer_dtype", "func_wrapper/inputs_to_ivy_arrays", "func_wrapper/inputs_to_native_arrays", "func_wrapper/outputs_to_ivy_arrays", "func_wrapper/to_native_arrays_and_back", "functional/ivy", "functional/ivy/activations", "functional/ivy/activations/gelu", "functional/ivy/activations/leaky_relu", "functional/ivy/activations/relu", "functional/ivy/activations/sigmoid", "functional/ivy/activations/softmax", "functional/ivy/activations/softplus", "functional/ivy/activations/tanh", "functional/ivy/compilation", "functional/ivy/compilation/compile", "functional/ivy/constants", "functional/ivy/creation", "functional/ivy/creation/arange", "functional/ivy/creation/asarray", "functional/ivy/creation/empty", "functional/ivy/creation/empty_like", "functional/ivy/creation/eye", "functional/ivy/creation/from_dlpack", "functional/ivy/creation/full", "functional/ivy/creation/full_like", "functional/ivy/creation/linspace", "functional/ivy/creation/logspace", "functional/ivy/creation/meshgrid", "functional/ivy/creation/native_array", "functional/ivy/creation/ones", "functional/ivy/creation/ones_like", "functional/ivy/creation/tril", "functional/ivy/creation/triu", "functional/ivy/creation/zeros", "functional/ivy/creation/zeros_like", "functional/ivy/data_type", "functional/ivy/data_type/DefaultDtype:\n    \"\"\"\"\"\"\n\n    # noinspection PyShadowingNames\n    def __init__", "functional/ivy/data_type/DefaultFloatDtype:\n    \"\"\"\"\"\"\n\n    # noinspection PyShadowingNames\n    def __init__", "functional/ivy/data_type/DefaultIntDtype:\n    \"\"\"\"\"\"\n\n    # noinspection PyShadowingNames\n    def __init__", "functional/ivy/data_type/as_ivy_dtype", "functional/ivy/data_type/as_native_dtype", "functional/ivy/data_type/astype", "functional/ivy/data_type/broadcast_arrays", "functional/ivy/data_type/broadcast_to", "functional/ivy/data_type/can_cast", "functional/ivy/data_type/can_cast/can_cast_array", "functional/ivy/data_type/can_cast/can_cast_container", "functional/ivy/data_type/can_cast/can_cast_functional", "functional/ivy/data_type/can_cast/static_can_cast_container", "functional/ivy/data_type/closest_valid_dtype", "functional/ivy/data_type/default_dtype", "functional/ivy/data_type/default_float_dtype", "functional/ivy/data_type/default_int_dtype", "functional/ivy/data_type/dtype", "functional/ivy/data_type/dtype_bits", "functional/ivy/data_type/finfo", "functional/ivy/data_type/function_supported_dtypes", "functional/ivy/data_type/function_unsupported_dtypes", "functional/ivy/data_type/iinfo", "functional/ivy/data_type/invalid_dtype", "functional/ivy/data_type/is_float_dtype", "functional/ivy/data_type/is_int_dtype", "functional/ivy/data_type/promote_types", "functional/ivy/data_type/result_type", "functional/ivy/data_type/set_default_dtype", "functional/ivy/data_type/set_default_float_dtype", "functional/ivy/data_type/set_default_int_dtype", "functional/ivy/data_type/type_promote_arrays", "functional/ivy/data_type/unset_default_dtype", "functional/ivy/data_type/unset_default_float_dtype", "functional/ivy/data_type/unset_default_int_dtype", "functional/ivy/data_type/valid_dtype", "functional/ivy/device", "functional/ivy/device/DefaultDevice:\n    \"\"\"\"\"\"\n\n    # noinspection PyShadowingNames\n    def __init__", "functional/ivy/device/DevClonedItem", "functional/ivy/device/DevClonedIter", "functional/ivy/device/DevClonedNest", "functional/ivy/device/DevDistItem", "functional/ivy/device/DevDistIter", "functional/ivy/device/DevDistNest", "functional/ivy/device/DevManager:\n    \"\"\"\"\"\"\n\n    def __init__", "functional/ivy/device/DevMapper", "functional/ivy/device/DevMapperMultiProc", "functional/ivy/device/MultiDev:\n    def __init__", "functional/ivy/device/MultiDevItem", "functional/ivy/device/MultiDevIter", "functional/ivy/device/MultiDevNest", "functional/ivy/device/Profiler", "functional/ivy/device/as_ivy_dev", "functional/ivy/device/as_native_dev", "functional/ivy/device/clear_mem_on_dev", "functional/ivy/device/default_device", "functional/ivy/device/dev", "functional/ivy/device/dev_clone", "functional/ivy/device/dev_clone_array", "functional/ivy/device/dev_clone_iter", "functional/ivy/device/dev_clone_nest", "functional/ivy/device/dev_dist", "functional/ivy/device/dev_dist_array", "functional/ivy/device/dev_dist_iter", "functional/ivy/device/dev_dist_nest", "functional/ivy/device/dev_unify", "functional/ivy/device/dev_unify_array", "functional/ivy/device/dev_unify_iter", "functional/ivy/device/dev_unify_nest", "functional/ivy/device/dev_util", "functional/ivy/device/get_all_ivy_arrays_on_dev", "functional/ivy/device/gpu_is_available", "functional/ivy/device/num_cpu_cores", "functional/ivy/device/num_gpus", "functional/ivy/device/num_ivy_arrays_on_dev", "functional/ivy/device/percent_used_mem_on_dev", "functional/ivy/device/print_all_ivy_arrays_on_dev", "functional/ivy/device/set_default_device", "functional/ivy/device/set_split_factor", "functional/ivy/device/split_factor", "functional/ivy/device/split_func_call", "functional/ivy/device/to_device", "functional/ivy/device/total_mem_on_dev", "functional/ivy/device/tpu_is_available", "functional/ivy/device/unset_default_device", "functional/ivy/device/used_mem_on_dev", "functional/ivy/elementwise", "functional/ivy/elementwise/abs", "functional/ivy/elementwise/abs/abs_array", "functional/ivy/elementwise/abs/abs_container", "functional/ivy/elementwise/abs/abs_functional", "functional/ivy/elementwise/acos", "functional/ivy/elementwise/acos/acos_array", "functional/ivy/elementwise/acos/acos_container", "functional/ivy/elementwise/acos/acos_functional", "functional/ivy/elementwise/acosh", "functional/ivy/elementwise/acosh/acosh_array", "functional/ivy/elementwise/acosh/acosh_container", "functional/ivy/elementwise/acosh/acosh_functional", "functional/ivy/elementwise/add", "functional/ivy/elementwise/add/add_array", "functional/ivy/elementwise/add/add_container", "functional/ivy/elementwise/add/add_functional", "functional/ivy/elementwise/add/static_add_container", "functional/ivy/elementwise/asin", "functional/ivy/elementwise/asin/asin_array", "functional/ivy/elementwise/asin/asin_container", "functional/ivy/elementwise/asin/asin_functional", "functional/ivy/elementwise/asinh", "functional/ivy/elementwise/asinh/asinh_array", "functional/ivy/elementwise/asinh/asinh_container", "functional/ivy/elementwise/asinh/asinh_functional", "functional/ivy/elementwise/atan", "functional/ivy/elementwise/atan/atan_array", "functional/ivy/elementwise/atan/atan_container", "functional/ivy/elementwise/atan/atan_functional", "functional/ivy/elementwise/atan2", "functional/ivy/elementwise/atan2/atan2_array", "functional/ivy/elementwise/atan2/atan2_container", "functional/ivy/elementwise/atan2/atan2_functional", "functional/ivy/elementwise/atanh", "functional/ivy/elementwise/atanh/atanh_array", "functional/ivy/elementwise/atanh/atanh_container", "functional/ivy/elementwise/atanh/atanh_functional", "functional/ivy/elementwise/bitwise_and", "functional/ivy/elementwise/bitwise_and/bitwise_and_array", "functional/ivy/elementwise/bitwise_and/bitwise_and_container", "functional/ivy/elementwise/bitwise_and/bitwise_and_functional", "functional/ivy/elementwise/bitwise_invert", "functional/ivy/elementwise/bitwise_invert/bitwise_invert_array", "functional/ivy/elementwise/bitwise_invert/bitwise_invert_container", "functional/ivy/elementwise/bitwise_invert/bitwise_invert_functional", "functional/ivy/elementwise/bitwise_left_shift", "functional/ivy/elementwise/bitwise_left_shift/bitwise_left_shift_array", "functional/ivy/elementwise/bitwise_left_shift/bitwise_left_shift_container", "functional/ivy/elementwise/bitwise_left_shift/bitwise_left_shift_functional", "functional/ivy/elementwise/bitwise_or", "functional/ivy/elementwise/bitwise_or/bitwise_or_array", "functional/ivy/elementwise/bitwise_or/bitwise_or_container", "functional/ivy/elementwise/bitwise_or/bitwise_or_functional", "functional/ivy/elementwise/bitwise_right_shift", "functional/ivy/elementwise/bitwise_right_shift/bitwise_right_shift_array", "functional/ivy/elementwise/bitwise_right_shift/bitwise_right_shift_container", "functional/ivy/elementwise/bitwise_right_shift/bitwise_right_shift_functional", "functional/ivy/elementwise/bitwise_xor", "functional/ivy/elementwise/bitwise_xor/bitwise_xor_array", "functional/ivy/elementwise/bitwise_xor/bitwise_xor_container", "functional/ivy/elementwise/bitwise_xor/bitwise_xor_functional", "functional/ivy/elementwise/ceil", "functional/ivy/elementwise/ceil/ceil_array", "functional/ivy/elementwise/ceil/ceil_container", "functional/ivy/elementwise/ceil/ceil_functional", "functional/ivy/elementwise/cos", "functional/ivy/elementwise/cos/cos_array", "functional/ivy/elementwise/cos/cos_container", "functional/ivy/elementwise/cos/cos_functional", "functional/ivy/elementwise/cosh", "functional/ivy/elementwise/cosh/cosh_array", "functional/ivy/elementwise/cosh/cosh_container", "functional/ivy/elementwise/cosh/cosh_functional", "functional/ivy/elementwise/divide", "functional/ivy/elementwise/divide/divide_array", "functional/ivy/elementwise/divide/divide_container", "functional/ivy/elementwise/divide/divide_functional", "functional/ivy/elementwise/divide/static_divide_container", "functional/ivy/elementwise/equal", "functional/ivy/elementwise/equal/equal_array", "functional/ivy/elementwise/equal/equal_container", "functional/ivy/elementwise/equal/equal_functional", "functional/ivy/elementwise/erf", "functional/ivy/elementwise/erf/erf_array", "functional/ivy/elementwise/erf/erf_container", "functional/ivy/elementwise/erf/erf_functional", "functional/ivy/elementwise/exp", "functional/ivy/elementwise/exp/exp_array", "functional/ivy/elementwise/exp/exp_container", "functional/ivy/elementwise/exp/exp_functional", "functional/ivy/elementwise/expm1", "functional/ivy/elementwise/expm1/expm1_array", "functional/ivy/elementwise/expm1/expm1_container", "functional/ivy/elementwise/expm1/expm1_functional", "functional/ivy/elementwise/floor", "functional/ivy/elementwise/floor/floor_array", "functional/ivy/elementwise/floor/floor_container", "functional/ivy/elementwise/floor/floor_functional", "functional/ivy/elementwise/floor_divide", "functional/ivy/elementwise/floor_divide/floor_divide_array", "functional/ivy/elementwise/floor_divide/floor_divide_container", "functional/ivy/elementwise/floor_divide/floor_divide_functional", "functional/ivy/elementwise/greater", "functional/ivy/elementwise/greater/greater_array", "functional/ivy/elementwise/greater/greater_container", "functional/ivy/elementwise/greater/greater_functional", "functional/ivy/elementwise/greater_equal", "functional/ivy/elementwise/greater_equal/greater_equal_array", "functional/ivy/elementwise/greater_equal/greater_equal_container", "functional/ivy/elementwise/greater_equal/greater_equal_functional", "functional/ivy/elementwise/isfinite", "functional/ivy/elementwise/isfinite/isfinite_array", "functional/ivy/elementwise/isfinite/isfinite_container", "functional/ivy/elementwise/isfinite/isfinite_functional", "functional/ivy/elementwise/isinf", "functional/ivy/elementwise/isinf/isinf_array", "functional/ivy/elementwise/isinf/isinf_container", "functional/ivy/elementwise/isinf/isinf_functional", "functional/ivy/elementwise/isnan", "functional/ivy/elementwise/isnan/isnan_array", "functional/ivy/elementwise/isnan/isnan_container", "functional/ivy/elementwise/isnan/isnan_functional", "functional/ivy/elementwise/less", "functional/ivy/elementwise/less/less_array", "functional/ivy/elementwise/less/less_container", "functional/ivy/elementwise/less/less_functional", "functional/ivy/elementwise/less_equal", "functional/ivy/elementwise/less_equal/less_equal_array", "functional/ivy/elementwise/less_equal/less_equal_container", "functional/ivy/elementwise/less_equal/less_equal_functional", "functional/ivy/elementwise/log", "functional/ivy/elementwise/log/log_array", "functional/ivy/elementwise/log/log_container", "functional/ivy/elementwise/log/log_functional", "functional/ivy/elementwise/log10", "functional/ivy/elementwise/log10/log10_array", "functional/ivy/elementwise/log10/log10_container", "functional/ivy/elementwise/log10/log10_functional", "functional/ivy/elementwise/log1p", "functional/ivy/elementwise/log1p/log1p_array", "functional/ivy/elementwise/log1p/log1p_container", "functional/ivy/elementwise/log1p/log1p_functional", "functional/ivy/elementwise/log2", "functional/ivy/elementwise/log2/log2_array", "functional/ivy/elementwise/log2/log2_container", "functional/ivy/elementwise/log2/log2_functional", "functional/ivy/elementwise/logaddexp", "functional/ivy/elementwise/logaddexp/logaddexp_array", "functional/ivy/elementwise/logaddexp/logaddexp_container", "functional/ivy/elementwise/logaddexp/logaddexp_functional", "functional/ivy/elementwise/logical_and", "functional/ivy/elementwise/logical_and/logical_and_array", "functional/ivy/elementwise/logical_and/logical_and_container", "functional/ivy/elementwise/logical_and/logical_and_functional", "functional/ivy/elementwise/logical_not", "functional/ivy/elementwise/logical_not/logical_not_array", "functional/ivy/elementwise/logical_not/logical_not_container", "functional/ivy/elementwise/logical_not/logical_not_functional", "functional/ivy/elementwise/logical_or", "functional/ivy/elementwise/logical_or/logical_or_array", "functional/ivy/elementwise/logical_or/logical_or_container", "functional/ivy/elementwise/logical_or/logical_or_functional", "functional/ivy/elementwise/logical_xor", "functional/ivy/elementwise/logical_xor/logical_xor_array", "functional/ivy/elementwise/logical_xor/logical_xor_container", "functional/ivy/elementwise/logical_xor/logical_xor_functional", "functional/ivy/elementwise/maximum", "functional/ivy/elementwise/minimum", "functional/ivy/elementwise/multiply", "functional/ivy/elementwise/multiply/multiply_array", "functional/ivy/elementwise/multiply/multiply_container", "functional/ivy/elementwise/multiply/multiply_functional", "functional/ivy/elementwise/multiply/static_multiply_container", "functional/ivy/elementwise/negative", "functional/ivy/elementwise/negative/negative_array", "functional/ivy/elementwise/negative/negative_container", "functional/ivy/elementwise/negative/negative_functional", "functional/ivy/elementwise/not_equal", "functional/ivy/elementwise/not_equal/not_equal_array", "functional/ivy/elementwise/not_equal/not_equal_container", "functional/ivy/elementwise/not_equal/not_equal_functional", "functional/ivy/elementwise/positive", "functional/ivy/elementwise/positive/positive_array", "functional/ivy/elementwise/positive/positive_container", "functional/ivy/elementwise/positive/positive_functional", "functional/ivy/elementwise/pow", "functional/ivy/elementwise/pow/pow_array", "functional/ivy/elementwise/pow/pow_container", "functional/ivy/elementwise/pow/pow_functional", "functional/ivy/elementwise/remainder", "functional/ivy/elementwise/remainder/remainder_array", "functional/ivy/elementwise/remainder/remainder_container", "functional/ivy/elementwise/remainder/remainder_functional", "functional/ivy/elementwise/round", "functional/ivy/elementwise/round/round_array", "functional/ivy/elementwise/round/round_container", "functional/ivy/elementwise/round/round_functional", "functional/ivy/elementwise/sign", "functional/ivy/elementwise/sign/sign_array", "functional/ivy/elementwise/sign/sign_container", "functional/ivy/elementwise/sign/sign_functional", "functional/ivy/elementwise/sin", "functional/ivy/elementwise/sin/sin_array", "functional/ivy/elementwise/sin/sin_container", "functional/ivy/elementwise/sin/sin_functional", "functional/ivy/elementwise/sinh", "functional/ivy/elementwise/sinh/sinh_array", "functional/ivy/elementwise/sinh/sinh_container", "functional/ivy/elementwise/sinh/sinh_functional", "functional/ivy/elementwise/sqrt", "functional/ivy/elementwise/sqrt/sqrt_array", "functional/ivy/elementwise/sqrt/sqrt_container", "functional/ivy/elementwise/sqrt/sqrt_functional", "functional/ivy/elementwise/square", "functional/ivy/elementwise/square/square_array", "functional/ivy/elementwise/square/square_container", "functional/ivy/elementwise/square/square_functional", "functional/ivy/elementwise/subtract", "functional/ivy/elementwise/subtract/static_subtract_container", "functional/ivy/elementwise/subtract/subtract_array", "functional/ivy/elementwise/subtract/subtract_container", "functional/ivy/elementwise/subtract/subtract_functional", "functional/ivy/elementwise/tan", "functional/ivy/elementwise/tan/static_tan_container", "functional/ivy/elementwise/tan/tan_array", "functional/ivy/elementwise/tan/tan_container", "functional/ivy/elementwise/tan/tan_functional", "functional/ivy/elementwise/tanh", "functional/ivy/elementwise/tanh/tanh_array", "functional/ivy/elementwise/tanh/tanh_container", "functional/ivy/elementwise/tanh/tanh_functional", "functional/ivy/elementwise/trunc", "functional/ivy/elementwise/trunc/trunc_array", "functional/ivy/elementwise/trunc/trunc_container", "functional/ivy/elementwise/trunc/trunc_functional", "functional/ivy/general", "functional/ivy/general/all_equal", "functional/ivy/general/all_equal/all_equal_array", "functional/ivy/general/all_equal/all_equal_container", "functional/ivy/general/all_equal/all_equal_functional", "functional/ivy/general/all_equal/static_all_equal_container", "functional/ivy/general/arg_info", "functional/ivy/general/arg_names", "functional/ivy/general/array_equal", "functional/ivy/general/arrays_equal", "functional/ivy/general/assert_supports_inplace", "functional/ivy/general/cache_fn", "functional/ivy/general/clip_matrix_norm", "functional/ivy/general/clip_vector_norm", "functional/ivy/general/clip_vector_norm/clip_vector_norm_container", "functional/ivy/general/clip_vector_norm/clip_vector_norm_functional", "functional/ivy/general/container_types", "functional/ivy/general/copy_array", "functional/ivy/general/cumprod", "functional/ivy/general/cumsum", "functional/ivy/general/current_backend_str", "functional/ivy/general/default", "functional/ivy/general/einops_rearrange", "functional/ivy/general/einops_reduce", "functional/ivy/general/einops_repeat", "functional/ivy/general/exists", "functional/ivy/general/floormod", "functional/ivy/general/fourier_encode", "functional/ivy/general/gather", "functional/ivy/general/gather_nd", "functional/ivy/general/get_all_arrays_in_memory", "functional/ivy/general/get_min_base", "functional/ivy/general/get_min_denominator", "functional/ivy/general/get_num_dims", "functional/ivy/general/get_referrers_recursive", "functional/ivy/general/has_nans", "functional/ivy/general/indices_where", "functional/ivy/general/inplace_arrays_supported", "functional/ivy/general/inplace_decrement", "functional/ivy/general/inplace_increment", "functional/ivy/general/inplace_update", "functional/ivy/general/inplace_variables_supported", "functional/ivy/general/is_array", "functional/ivy/general/is_ivy_array", "functional/ivy/general/is_ivy_container", "functional/ivy/general/is_native_array", "functional/ivy/general/match_kwargs", "functional/ivy/general/multiprocessing", "functional/ivy/general/num_arrays_in_memory", "functional/ivy/general/one_hot", "functional/ivy/general/print_all_arrays_in_memory", "functional/ivy/general/queue_timeout", "functional/ivy/general/scatter_flat", "functional/ivy/general/scatter_nd", "functional/ivy/general/set_min_base", "functional/ivy/general/set_min_denominator", "functional/ivy/general/set_queue_timeout", "functional/ivy/general/set_tmp_dir", "functional/ivy/general/shape", "functional/ivy/general/shape_to_tuple", "functional/ivy/general/stable_divide", "functional/ivy/general/stable_pow", "functional/ivy/general/supports_inplace", "functional/ivy/general/tmp_dir", "functional/ivy/general/to_list", "functional/ivy/general/to_numpy", "functional/ivy/general/to_scalar", "functional/ivy/general/try_else_none", "functional/ivy/general/unstack", "functional/ivy/general/value_is_nan", "functional/ivy/gradients", "functional/ivy/gradients/GradientTracking:\n    \"\"\"\"\"\"\n\n    # noinspection PyShadowingNames\n    def __init__", "functional/ivy/gradients/adam_step", "functional/ivy/gradients/adam_update", "functional/ivy/gradients/adam_update/adam_update_container", "functional/ivy/gradients/adam_update/adam_update_functional", "functional/ivy/gradients/adam_update/static_adam_update_container", "functional/ivy/gradients/execute_with_gradients", "functional/ivy/gradients/gradient_descent_update", "functional/ivy/gradients/gradient_descent_update/gradient_descent_update_container", "functional/ivy/gradients/gradient_descent_update/gradient_descent_update_functional", "functional/ivy/gradients/gradient_descent_update/static_gradient_descent_update_container", "functional/ivy/gradients/is_variable", "functional/ivy/gradients/lamb_update", "functional/ivy/gradients/lamb_update/lamb_update_container", "functional/ivy/gradients/lamb_update/lamb_update_functional", "functional/ivy/gradients/lamb_update/static_lamb_update_container", "functional/ivy/gradients/lars_update", "functional/ivy/gradients/lars_update/lars_update_container", "functional/ivy/gradients/lars_update/lars_update_functional", "functional/ivy/gradients/lars_update/static_lars_update_container", "functional/ivy/gradients/optimizer_update", "functional/ivy/gradients/optimizer_update/optimizer_update_container", "functional/ivy/gradients/optimizer_update/optimizer_update_functional", "functional/ivy/gradients/optimizer_update/static_optimizer_update_container", "functional/ivy/gradients/set_with_grads", "functional/ivy/gradients/stop_gradient", "functional/ivy/gradients/unset_with_grads", "functional/ivy/gradients/variable", "functional/ivy/gradients/variable_data", "functional/ivy/gradients/with_grads", "functional/ivy/layers", "functional/ivy/layers/conv1d", "functional/ivy/layers/conv1d_transpose", "functional/ivy/layers/conv2d", "functional/ivy/layers/conv2d_transpose", "functional/ivy/layers/conv3d", "functional/ivy/layers/conv3d_transpose", "functional/ivy/layers/depthwise_conv2d", "functional/ivy/layers/dropout", "functional/ivy/layers/linear", "functional/ivy/layers/lstm_update", "functional/ivy/layers/multi_head_attention", "functional/ivy/layers/scaled_dot_product_attention", "functional/ivy/linear_algebra", "functional/ivy/linear_algebra/cholesky", "functional/ivy/linear_algebra/cross", "functional/ivy/linear_algebra/det", "functional/ivy/linear_algebra/diagonal", "functional/ivy/linear_algebra/eigh", "functional/ivy/linear_algebra/eigvalsh", "functional/ivy/linear_algebra/inv", "functional/ivy/linear_algebra/matmul", "functional/ivy/linear_algebra/matmul/matmul_array", "functional/ivy/linear_algebra/matmul/matmul_container", "functional/ivy/linear_algebra/matmul/matmul_functional", "functional/ivy/linear_algebra/matrix_norm", "functional/ivy/linear_algebra/matrix_power", "functional/ivy/linear_algebra/matrix_rank", "functional/ivy/linear_algebra/matrix_transpose", "functional/ivy/linear_algebra/outer", "functional/ivy/linear_algebra/pinv", "functional/ivy/linear_algebra/qr", "functional/ivy/linear_algebra/slogdet", "functional/ivy/linear_algebra/solve", "functional/ivy/linear_algebra/svd", "functional/ivy/linear_algebra/svdvals", "functional/ivy/linear_algebra/tensordot", "functional/ivy/linear_algebra/trace", "functional/ivy/linear_algebra/vecdot", "functional/ivy/linear_algebra/vector_norm", "functional/ivy/linear_algebra/vector_to_skew_symmetric_matrix", "functional/ivy/losses", "functional/ivy/losses/binary_cross_entropy", "functional/ivy/losses/binary_cross_entropy/binary_cross_entropy_array", "functional/ivy/losses/binary_cross_entropy/binary_cross_entropy_container", "functional/ivy/losses/binary_cross_entropy/binary_cross_entropy_functional", "functional/ivy/losses/binary_cross_entropy/static_binary_cross_entropy_container", "functional/ivy/losses/cross_entropy", "functional/ivy/losses/cross_entropy/cross_entropy_array", "functional/ivy/losses/cross_entropy/cross_entropy_container", "functional/ivy/losses/cross_entropy/cross_entropy_functional", "functional/ivy/losses/cross_entropy/static_cross_entropy_container", "functional/ivy/losses/sparse_cross_entropy", "functional/ivy/losses/sparse_cross_entropy/sparse_cross_entropy_array", "functional/ivy/losses/sparse_cross_entropy/sparse_cross_entropy_container", "functional/ivy/losses/sparse_cross_entropy/sparse_cross_entropy_functional", "functional/ivy/losses/sparse_cross_entropy/static_sparse_cross_entropy_container", "functional/ivy/manipulation", "functional/ivy/manipulation/clip", "functional/ivy/manipulation/clip/clip_array", "functional/ivy/manipulation/clip/clip_container", "functional/ivy/manipulation/clip/clip_functional", "functional/ivy/manipulation/clip/static_clip_container", "functional/ivy/manipulation/concat", "functional/ivy/manipulation/concat/concat_array", "functional/ivy/manipulation/concat/concat_container", "functional/ivy/manipulation/concat/concat_functional", "functional/ivy/manipulation/constant_pad", "functional/ivy/manipulation/constant_pad/constant_pad_array", "functional/ivy/manipulation/constant_pad/constant_pad_container", "functional/ivy/manipulation/constant_pad/constant_pad_functional", "functional/ivy/manipulation/expand_dims", "functional/ivy/manipulation/expand_dims/expand_dims_array", "functional/ivy/manipulation/expand_dims/expand_dims_container", "functional/ivy/manipulation/expand_dims/expand_dims_functional", "functional/ivy/manipulation/flip", "functional/ivy/manipulation/flip/flip_array", "functional/ivy/manipulation/flip/flip_container", "functional/ivy/manipulation/flip/flip_functional", "functional/ivy/manipulation/permute_dims", "functional/ivy/manipulation/permute_dims/permute_dims_array", "functional/ivy/manipulation/permute_dims/permute_dims_container", "functional/ivy/manipulation/permute_dims/permute_dims_functional", "functional/ivy/manipulation/repeat", "functional/ivy/manipulation/repeat/repeat_array", "functional/ivy/manipulation/repeat/repeat_container", "functional/ivy/manipulation/repeat/repeat_functional", "functional/ivy/manipulation/reshape", "functional/ivy/manipulation/reshape/reshape_array", "functional/ivy/manipulation/reshape/reshape_container", "functional/ivy/manipulation/reshape/reshape_functional", "functional/ivy/manipulation/roll", "functional/ivy/manipulation/roll/roll_array", "functional/ivy/manipulation/roll/roll_container", "functional/ivy/manipulation/roll/roll_functional", "functional/ivy/manipulation/roll/static_roll_container", "functional/ivy/manipulation/split", "functional/ivy/manipulation/squeeze", "functional/ivy/manipulation/squeeze/squeeze_array", "functional/ivy/manipulation/squeeze/squeeze_container", "functional/ivy/manipulation/squeeze/squeeze_functional", "functional/ivy/manipulation/stack", "functional/ivy/manipulation/stack/stack_array", "functional/ivy/manipulation/stack/stack_container", "functional/ivy/manipulation/stack/stack_functional", "functional/ivy/manipulation/swapaxes", "functional/ivy/manipulation/swapaxes/swapaxes_array", "functional/ivy/manipulation/swapaxes/swapaxes_container", "functional/ivy/manipulation/swapaxes/swapaxes_functional", "functional/ivy/manipulation/tile", "functional/ivy/manipulation/tile/tile_array", "functional/ivy/manipulation/tile/tile_container", "functional/ivy/manipulation/tile/tile_functional", "functional/ivy/manipulation/zero_pad", "functional/ivy/manipulation/zero_pad/zero_pad_array", "functional/ivy/manipulation/zero_pad/zero_pad_container", "functional/ivy/manipulation/zero_pad/zero_pad_functional", "functional/ivy/meta", "functional/ivy/meta/fomaml_step", "functional/ivy/meta/maml_step", "functional/ivy/meta/reptile_step", "functional/ivy/nest", "functional/ivy/nest/all_nested_indices", "functional/ivy/nest/copy_nest", "functional/ivy/nest/index_nest", "functional/ivy/nest/insert_into_nest_at_index", "functional/ivy/nest/insert_into_nest_at_indices", "functional/ivy/nest/map", "functional/ivy/nest/map_nest_at_index", "functional/ivy/nest/map_nest_at_indices", "functional/ivy/nest/multi_index_nest", "functional/ivy/nest/nested_any", "functional/ivy/nest/nested_indices_where", "functional/ivy/nest/nested_map", "functional/ivy/nest/nested_multi_map", "functional/ivy/nest/prune_nest_at_index", "functional/ivy/nest/prune_nest_at_indices", "functional/ivy/nest/set_nest_at_index", "functional/ivy/nest/set_nest_at_indices", "functional/ivy/norms", "functional/ivy/norms/layer_norm", "functional/ivy/norms/layer_norm/layer_norm_array", "functional/ivy/norms/layer_norm/layer_norm_container", "functional/ivy/norms/layer_norm/layer_norm_functional", "functional/ivy/random", "functional/ivy/random/multinomial", "functional/ivy/random/randint", "functional/ivy/random/randint/randint_functional", "functional/ivy/random/randint/static_randint_container", "functional/ivy/random/random_normal", "functional/ivy/random/random_uniform", "functional/ivy/random/random_uniform/random_uniform_container", "functional/ivy/random/random_uniform/random_uniform_functional", "functional/ivy/random/random_uniform/static_random_uniform_container", "functional/ivy/random/seed", "functional/ivy/random/shuffle", "functional/ivy/searching", "functional/ivy/searching/argmax", "functional/ivy/searching/argmin", "functional/ivy/searching/nonzero", "functional/ivy/searching/where", "functional/ivy/set", "functional/ivy/set/unique_all", "functional/ivy/set/unique_counts", "functional/ivy/set/unique_inverse", "functional/ivy/set/unique_values", "functional/ivy/sorting", "functional/ivy/sorting/argsort", "functional/ivy/sorting/argsort/argsort_array", "functional/ivy/sorting/argsort/argsort_container", "functional/ivy/sorting/argsort/argsort_functional", "functional/ivy/sorting/argsort/static_argsort_container", "functional/ivy/sorting/sort", "functional/ivy/sorting/sort/sort_array", "functional/ivy/sorting/sort/sort_container", "functional/ivy/sorting/sort/sort_functional", "functional/ivy/sorting/sort/static_sort_container", "functional/ivy/statistical", "functional/ivy/statistical/einsum", "functional/ivy/statistical/einsum/einsum_array", "functional/ivy/statistical/einsum/einsum_container", "functional/ivy/statistical/einsum/einsum_functional", "functional/ivy/statistical/max", "functional/ivy/statistical/max/max_array", "functional/ivy/statistical/max/max_container", "functional/ivy/statistical/max/max_functional", "functional/ivy/statistical/mean", "functional/ivy/statistical/mean/mean_array", "functional/ivy/statistical/mean/mean_container", "functional/ivy/statistical/mean/mean_functional", "functional/ivy/statistical/min", "functional/ivy/statistical/min/min_array", "functional/ivy/statistical/min/min_container", "functional/ivy/statistical/min/min_functional", "functional/ivy/statistical/prod", "functional/ivy/statistical/prod/prod_array", "functional/ivy/statistical/prod/prod_container", "functional/ivy/statistical/prod/prod_functional", "functional/ivy/statistical/std", "functional/ivy/statistical/std/std_array", "functional/ivy/statistical/std/std_container", "functional/ivy/statistical/std/std_functional", "functional/ivy/statistical/sum", "functional/ivy/statistical/sum/sum_array", "functional/ivy/statistical/sum/sum_container", "functional/ivy/statistical/sum/sum_functional", "functional/ivy/statistical/var", "functional/ivy/statistical/var/var_array", "functional/ivy/statistical/var/var_container", "functional/ivy/statistical/var/var_functional", "functional/ivy/utility", "functional/ivy/utility/all", "functional/ivy/utility/all/all_array", "functional/ivy/utility/all/all_container", "functional/ivy/utility/all/all_functional", "functional/ivy/utility/any", "functional/ivy/utility/any/any_array", "functional/ivy/utility/any/any_container", "functional/ivy/utility/any/any_functional", "index", "index_append", "index_prepend", "inspection", "inspection/add_array_specs", "inspection/fn_array_spec", "roadmap", "stateful/activations", "stateful/activations/GEGLU", "stateful/activations/GELU", "stateful/converters", "stateful/converters/to_ivy_module", "stateful/initializers", "stateful/initializers/Constant:\n    def __init__", "stateful/initializers/FirstLayerSiren", "stateful/initializers/GlorotUniform", "stateful/initializers/KaimingNormal:\n    def __init__", "stateful/initializers/Ones", "stateful/initializers/Siren", "stateful/initializers/Uniform:\n    def __init__", "stateful/initializers/Zeros", "stateful/layers", "stateful/layers/Conv1D", "stateful/layers/Conv1DTranspose", "stateful/layers/Conv2D", "stateful/layers/Conv2DTranspose", "stateful/layers/Conv3D", "stateful/layers/Conv3DTranspose", "stateful/layers/DepthwiseConv2D", "stateful/layers/Dropout", "stateful/layers/LSTM", "stateful/layers/Linear", "stateful/layers/MultiHeadAttention", "stateful/module", "stateful/module/Module", "stateful/norms", "stateful/norms/LayerNorm", "stateful/optimizers", "stateful/optimizers/Adam", "stateful/optimizers/LAMB", "stateful/optimizers/LARS", "stateful/optimizers/Optimizer", "stateful/optimizers/SGD", "stateful/sequential", "stateful/sequential/Sequential", "supported_frameworks", "verbosity", "verbosity/cprint"], "filenames": ["array/activations.rst", "array/activations/ArrayWithActivations.rst", "array/conversions.rst", "array/conversions/args_to_ivy.rst", "array/conversions/args_to_native.rst", "array/conversions/to_ivy.rst", "array/conversions/to_native.rst", "array/creation.rst", "array/creation/ArrayWithCreation.rst", "array/data_type.rst", "array/data_type/ArrayWithDataTypes.rst", "array/device.rst", "array/device/ArrayWithDevice.rst", "array/elementwise.rst", "array/elementwise/ArrayWithElementwise.rst", "array/general.rst", "array/general/ArrayWithGeneral.rst", "array/gradients.rst", "array/gradients/ArrayWithGradients.rst", "array/image.rst", "array/image/ArrayWithImage.rst", "array/layers.rst", "array/layers/ArrayWithLayers.rst", "array/linear_algebra.rst", "array/linear_algebra/ArrayWithLinearAlgebra.rst", "array/losses.rst", "array/losses/ArrayWithLosses.rst", "array/manipulation.rst", "array/manipulation/ArrayWithManipulation.rst", "array/norms.rst", "array/norms/ArrayWithNorms.rst", "array/random.rst", "array/random/ArrayWithRandom.rst", "array/searching.rst", "array/searching/ArrayWithSearching.rst", "array/set.rst", "array/set/ArrayWithSet.rst", "array/sorting.rst", "array/sorting/ArrayWithSorting.rst", "array/statistical.rst", "array/statistical/ArrayWithStatistical.rst", "array/utility.rst", "array/utility/ArrayWithUtility.rst", "array/wrapping.rst", "array/wrapping/add_ivy_array_instance_methods.rst", "backend_handler.rst", "backend_handler/ContextManager:\n    def __init__.rst", "backend_handler/choose_random_backend.rst", "backend_handler/clear_backend_stack.rst", "backend_handler/current_backend.rst", "backend_handler/get_backend.rst", "backend_handler/set_backend.rst", "backend_handler/try_import_ivy_jax.rst", "backend_handler/try_import_ivy_mxnet.rst", "backend_handler/try_import_ivy_numpy.rst", "backend_handler/try_import_ivy_tf.rst", "backend_handler/try_import_ivy_torch.rst", "backend_handler/unset_backend.rst", "background.rst", "background/ml_explosion.rst", "background/standardization.rst", "background/why_unify.rst", "container/activations.rst", "container/activations/ContainerWithActivations.rst", "container/base.rst", "container/base/ContainerBase.rst", "container/container.rst", "container/container/Container.rst", "container/container/MultiDevContainer.rst", "container/creation.rst", "container/creation/ContainerWithCreation.rst", "container/data_type.rst", "container/data_type/ContainerWithDataTypes.rst", "container/device.rst", "container/device/ContainerWithDevice.rst", "container/elementwise.rst", "container/elementwise/ContainerWithElementwise.rst", "container/general.rst", "container/general/ContainerWithGeneral.rst", "container/gradients.rst", "container/gradients/ContainerWithGradients.rst", "container/image.rst", "container/image/ContainerWithImage.rst", "container/layers.rst", "container/layers/ContainerWithLayers.rst", "container/linear_algebra.rst", "container/linear_algebra/ContainerWithLinearAlgebra.rst", "container/losses.rst", "container/losses/ContainerWithLosses.rst", "container/manipulation.rst", "container/manipulation/ContainerWithManipulation.rst", "container/norms.rst", "container/norms/ContainerWithNorms.rst", "container/random.rst", "container/random/ContainerWithRandom.rst", "container/searching.rst", "container/searching/ContainerWithSearching.rst", "container/set.rst", "container/set/ContainerWithSet.rst", "container/sorting.rst", "container/sorting/ContainerWithSorting.rst", "container/statistical.rst", "container/statistical/ContainerWithStatistical.rst", "container/utility.rst", "container/utility/ContainerWithUtility.rst", "container/wrapping.rst", "container/wrapping/add_ivy_container_instance_methods.rst", "contributing.rst", "contributing/0_setting_up.rst", "contributing/1_the_basics.rst", "contributing/4_open_tasks.rst", "contributing/building_the_docs.rst", "deep_dive.rst", "deep_dive/0_navigating_the_code.rst", "deep_dive/10_docstrings.rst", "deep_dive/11_docstring_examples.rst", "deep_dive/12_array_api_tests.rst", "deep_dive/13_ivy_tests.rst", "deep_dive/1_function_types.rst", "deep_dive/2_backend_setting.rst", "deep_dive/3_function_wrapping.rst", "deep_dive/4_arrays.rst", "deep_dive/5_containers.rst", "deep_dive/6_data_types.rst", "deep_dive/7_devices.rst", "deep_dive/8_inplace_updates.rst", "deep_dive/9_function_arguments.rst", "design.rst", "design/building_blocks.rst", "design/ivy_as_a_framework.rst", "design/ivy_as_a_framework/ivy_array.rst", "design/ivy_as_a_framework/ivy_container.rst", "design/ivy_as_a_framework/ivy_stateful_api.rst", "design/ivy_as_a_transpiler.rst", "docs/ivy.rst", "docs/ivy_builder.rst", "docs/ivy_ecosystem.rst", "docs/ivy_gym.rst", "docs/ivy_mech.rst", "docs/ivy_memory.rst", "docs/ivy_models.rst", "docs/ivy_robot.rst", "docs/ivy_vision.rst", "extensions.rst", "extensions/applied_libraries.rst", "faq.rst", "func_wrapper.rst", "func_wrapper/handle_nestable.rst", "func_wrapper/handle_out_argument.rst", "func_wrapper/infer_device.rst", "func_wrapper/infer_dtype.rst", "func_wrapper/inputs_to_ivy_arrays.rst", "func_wrapper/inputs_to_native_arrays.rst", "func_wrapper/outputs_to_ivy_arrays.rst", "func_wrapper/to_native_arrays_and_back.rst", "functional/ivy.rst", "functional/ivy/activations.rst", "functional/ivy/activations/gelu.rst", "functional/ivy/activations/leaky_relu.rst", "functional/ivy/activations/relu.rst", "functional/ivy/activations/sigmoid.rst", "functional/ivy/activations/softmax.rst", "functional/ivy/activations/softplus.rst", "functional/ivy/activations/tanh.rst", "functional/ivy/compilation.rst", "functional/ivy/compilation/compile.rst", "functional/ivy/constants.rst", "functional/ivy/creation.rst", "functional/ivy/creation/arange.rst", "functional/ivy/creation/asarray.rst", "functional/ivy/creation/empty.rst", "functional/ivy/creation/empty_like.rst", "functional/ivy/creation/eye.rst", "functional/ivy/creation/from_dlpack.rst", "functional/ivy/creation/full.rst", "functional/ivy/creation/full_like.rst", "functional/ivy/creation/linspace.rst", "functional/ivy/creation/logspace.rst", "functional/ivy/creation/meshgrid.rst", "functional/ivy/creation/native_array.rst", "functional/ivy/creation/ones.rst", "functional/ivy/creation/ones_like.rst", "functional/ivy/creation/tril.rst", "functional/ivy/creation/triu.rst", "functional/ivy/creation/zeros.rst", "functional/ivy/creation/zeros_like.rst", "functional/ivy/data_type.rst", "functional/ivy/data_type/DefaultDtype:\n    \"\"\"\"\"\"\n\n    # noinspection PyShadowingNames\n    def __init__.rst", "functional/ivy/data_type/DefaultFloatDtype:\n    \"\"\"\"\"\"\n\n    # noinspection PyShadowingNames\n    def __init__.rst", "functional/ivy/data_type/DefaultIntDtype:\n    \"\"\"\"\"\"\n\n    # noinspection PyShadowingNames\n    def __init__.rst", "functional/ivy/data_type/as_ivy_dtype.rst", "functional/ivy/data_type/as_native_dtype.rst", "functional/ivy/data_type/astype.rst", "functional/ivy/data_type/broadcast_arrays.rst", "functional/ivy/data_type/broadcast_to.rst", "functional/ivy/data_type/can_cast.rst", "functional/ivy/data_type/can_cast/can_cast_array.rst", "functional/ivy/data_type/can_cast/can_cast_container.rst", "functional/ivy/data_type/can_cast/can_cast_functional.rst", "functional/ivy/data_type/can_cast/static_can_cast_container.rst", "functional/ivy/data_type/closest_valid_dtype.rst", "functional/ivy/data_type/default_dtype.rst", "functional/ivy/data_type/default_float_dtype.rst", "functional/ivy/data_type/default_int_dtype.rst", "functional/ivy/data_type/dtype.rst", "functional/ivy/data_type/dtype_bits.rst", "functional/ivy/data_type/finfo.rst", "functional/ivy/data_type/function_supported_dtypes.rst", "functional/ivy/data_type/function_unsupported_dtypes.rst", "functional/ivy/data_type/iinfo.rst", "functional/ivy/data_type/invalid_dtype.rst", "functional/ivy/data_type/is_float_dtype.rst", "functional/ivy/data_type/is_int_dtype.rst", "functional/ivy/data_type/promote_types.rst", "functional/ivy/data_type/result_type.rst", "functional/ivy/data_type/set_default_dtype.rst", "functional/ivy/data_type/set_default_float_dtype.rst", "functional/ivy/data_type/set_default_int_dtype.rst", "functional/ivy/data_type/type_promote_arrays.rst", "functional/ivy/data_type/unset_default_dtype.rst", "functional/ivy/data_type/unset_default_float_dtype.rst", "functional/ivy/data_type/unset_default_int_dtype.rst", "functional/ivy/data_type/valid_dtype.rst", "functional/ivy/device.rst", "functional/ivy/device/DefaultDevice:\n    \"\"\"\"\"\"\n\n    # noinspection PyShadowingNames\n    def __init__.rst", "functional/ivy/device/DevClonedItem.rst", "functional/ivy/device/DevClonedIter.rst", "functional/ivy/device/DevClonedNest.rst", "functional/ivy/device/DevDistItem.rst", "functional/ivy/device/DevDistIter.rst", "functional/ivy/device/DevDistNest.rst", "functional/ivy/device/DevManager:\n    \"\"\"\"\"\"\n\n    def __init__.rst", "functional/ivy/device/DevMapper.rst", "functional/ivy/device/DevMapperMultiProc.rst", "functional/ivy/device/MultiDev:\n    def __init__.rst", "functional/ivy/device/MultiDevItem.rst", "functional/ivy/device/MultiDevIter.rst", "functional/ivy/device/MultiDevNest.rst", "functional/ivy/device/Profiler.rst", "functional/ivy/device/as_ivy_dev.rst", "functional/ivy/device/as_native_dev.rst", "functional/ivy/device/clear_mem_on_dev.rst", "functional/ivy/device/default_device.rst", "functional/ivy/device/dev.rst", "functional/ivy/device/dev_clone.rst", "functional/ivy/device/dev_clone_array.rst", "functional/ivy/device/dev_clone_iter.rst", "functional/ivy/device/dev_clone_nest.rst", "functional/ivy/device/dev_dist.rst", "functional/ivy/device/dev_dist_array.rst", "functional/ivy/device/dev_dist_iter.rst", "functional/ivy/device/dev_dist_nest.rst", "functional/ivy/device/dev_unify.rst", "functional/ivy/device/dev_unify_array.rst", "functional/ivy/device/dev_unify_iter.rst", "functional/ivy/device/dev_unify_nest.rst", "functional/ivy/device/dev_util.rst", "functional/ivy/device/get_all_ivy_arrays_on_dev.rst", "functional/ivy/device/gpu_is_available.rst", "functional/ivy/device/num_cpu_cores.rst", "functional/ivy/device/num_gpus.rst", "functional/ivy/device/num_ivy_arrays_on_dev.rst", "functional/ivy/device/percent_used_mem_on_dev.rst", "functional/ivy/device/print_all_ivy_arrays_on_dev.rst", "functional/ivy/device/set_default_device.rst", "functional/ivy/device/set_split_factor.rst", "functional/ivy/device/split_factor.rst", "functional/ivy/device/split_func_call.rst", "functional/ivy/device/to_device.rst", "functional/ivy/device/total_mem_on_dev.rst", "functional/ivy/device/tpu_is_available.rst", "functional/ivy/device/unset_default_device.rst", "functional/ivy/device/used_mem_on_dev.rst", "functional/ivy/elementwise.rst", "functional/ivy/elementwise/abs.rst", "functional/ivy/elementwise/abs/abs_array.rst", "functional/ivy/elementwise/abs/abs_container.rst", "functional/ivy/elementwise/abs/abs_functional.rst", "functional/ivy/elementwise/acos.rst", "functional/ivy/elementwise/acos/acos_array.rst", "functional/ivy/elementwise/acos/acos_container.rst", "functional/ivy/elementwise/acos/acos_functional.rst", "functional/ivy/elementwise/acosh.rst", "functional/ivy/elementwise/acosh/acosh_array.rst", "functional/ivy/elementwise/acosh/acosh_container.rst", "functional/ivy/elementwise/acosh/acosh_functional.rst", "functional/ivy/elementwise/add.rst", "functional/ivy/elementwise/add/add_array.rst", "functional/ivy/elementwise/add/add_container.rst", "functional/ivy/elementwise/add/add_functional.rst", "functional/ivy/elementwise/add/static_add_container.rst", "functional/ivy/elementwise/asin.rst", "functional/ivy/elementwise/asin/asin_array.rst", "functional/ivy/elementwise/asin/asin_container.rst", "functional/ivy/elementwise/asin/asin_functional.rst", "functional/ivy/elementwise/asinh.rst", "functional/ivy/elementwise/asinh/asinh_array.rst", "functional/ivy/elementwise/asinh/asinh_container.rst", "functional/ivy/elementwise/asinh/asinh_functional.rst", "functional/ivy/elementwise/atan.rst", "functional/ivy/elementwise/atan/atan_array.rst", "functional/ivy/elementwise/atan/atan_container.rst", "functional/ivy/elementwise/atan/atan_functional.rst", "functional/ivy/elementwise/atan2.rst", "functional/ivy/elementwise/atan2/atan2_array.rst", "functional/ivy/elementwise/atan2/atan2_container.rst", "functional/ivy/elementwise/atan2/atan2_functional.rst", "functional/ivy/elementwise/atanh.rst", "functional/ivy/elementwise/atanh/atanh_array.rst", "functional/ivy/elementwise/atanh/atanh_container.rst", "functional/ivy/elementwise/atanh/atanh_functional.rst", "functional/ivy/elementwise/bitwise_and.rst", "functional/ivy/elementwise/bitwise_and/bitwise_and_array.rst", "functional/ivy/elementwise/bitwise_and/bitwise_and_container.rst", "functional/ivy/elementwise/bitwise_and/bitwise_and_functional.rst", "functional/ivy/elementwise/bitwise_invert.rst", "functional/ivy/elementwise/bitwise_invert/bitwise_invert_array.rst", "functional/ivy/elementwise/bitwise_invert/bitwise_invert_container.rst", "functional/ivy/elementwise/bitwise_invert/bitwise_invert_functional.rst", "functional/ivy/elementwise/bitwise_left_shift.rst", "functional/ivy/elementwise/bitwise_left_shift/bitwise_left_shift_array.rst", "functional/ivy/elementwise/bitwise_left_shift/bitwise_left_shift_container.rst", "functional/ivy/elementwise/bitwise_left_shift/bitwise_left_shift_functional.rst", "functional/ivy/elementwise/bitwise_or.rst", "functional/ivy/elementwise/bitwise_or/bitwise_or_array.rst", "functional/ivy/elementwise/bitwise_or/bitwise_or_container.rst", "functional/ivy/elementwise/bitwise_or/bitwise_or_functional.rst", "functional/ivy/elementwise/bitwise_right_shift.rst", "functional/ivy/elementwise/bitwise_right_shift/bitwise_right_shift_array.rst", "functional/ivy/elementwise/bitwise_right_shift/bitwise_right_shift_container.rst", "functional/ivy/elementwise/bitwise_right_shift/bitwise_right_shift_functional.rst", "functional/ivy/elementwise/bitwise_xor.rst", "functional/ivy/elementwise/bitwise_xor/bitwise_xor_array.rst", "functional/ivy/elementwise/bitwise_xor/bitwise_xor_container.rst", "functional/ivy/elementwise/bitwise_xor/bitwise_xor_functional.rst", "functional/ivy/elementwise/ceil.rst", "functional/ivy/elementwise/ceil/ceil_array.rst", "functional/ivy/elementwise/ceil/ceil_container.rst", "functional/ivy/elementwise/ceil/ceil_functional.rst", "functional/ivy/elementwise/cos.rst", "functional/ivy/elementwise/cos/cos_array.rst", "functional/ivy/elementwise/cos/cos_container.rst", "functional/ivy/elementwise/cos/cos_functional.rst", "functional/ivy/elementwise/cosh.rst", "functional/ivy/elementwise/cosh/cosh_array.rst", "functional/ivy/elementwise/cosh/cosh_container.rst", "functional/ivy/elementwise/cosh/cosh_functional.rst", "functional/ivy/elementwise/divide.rst", "functional/ivy/elementwise/divide/divide_array.rst", "functional/ivy/elementwise/divide/divide_container.rst", "functional/ivy/elementwise/divide/divide_functional.rst", "functional/ivy/elementwise/divide/static_divide_container.rst", "functional/ivy/elementwise/equal.rst", "functional/ivy/elementwise/equal/equal_array.rst", "functional/ivy/elementwise/equal/equal_container.rst", "functional/ivy/elementwise/equal/equal_functional.rst", "functional/ivy/elementwise/erf.rst", "functional/ivy/elementwise/erf/erf_array.rst", "functional/ivy/elementwise/erf/erf_container.rst", "functional/ivy/elementwise/erf/erf_functional.rst", "functional/ivy/elementwise/exp.rst", "functional/ivy/elementwise/exp/exp_array.rst", "functional/ivy/elementwise/exp/exp_container.rst", "functional/ivy/elementwise/exp/exp_functional.rst", "functional/ivy/elementwise/expm1.rst", "functional/ivy/elementwise/expm1/expm1_array.rst", "functional/ivy/elementwise/expm1/expm1_container.rst", "functional/ivy/elementwise/expm1/expm1_functional.rst", "functional/ivy/elementwise/floor.rst", "functional/ivy/elementwise/floor/floor_array.rst", "functional/ivy/elementwise/floor/floor_container.rst", "functional/ivy/elementwise/floor/floor_functional.rst", "functional/ivy/elementwise/floor_divide.rst", "functional/ivy/elementwise/floor_divide/floor_divide_array.rst", "functional/ivy/elementwise/floor_divide/floor_divide_container.rst", "functional/ivy/elementwise/floor_divide/floor_divide_functional.rst", "functional/ivy/elementwise/greater.rst", "functional/ivy/elementwise/greater/greater_array.rst", "functional/ivy/elementwise/greater/greater_container.rst", "functional/ivy/elementwise/greater/greater_functional.rst", "functional/ivy/elementwise/greater_equal.rst", "functional/ivy/elementwise/greater_equal/greater_equal_array.rst", "functional/ivy/elementwise/greater_equal/greater_equal_container.rst", "functional/ivy/elementwise/greater_equal/greater_equal_functional.rst", "functional/ivy/elementwise/isfinite.rst", "functional/ivy/elementwise/isfinite/isfinite_array.rst", "functional/ivy/elementwise/isfinite/isfinite_container.rst", "functional/ivy/elementwise/isfinite/isfinite_functional.rst", "functional/ivy/elementwise/isinf.rst", "functional/ivy/elementwise/isinf/isinf_array.rst", "functional/ivy/elementwise/isinf/isinf_container.rst", "functional/ivy/elementwise/isinf/isinf_functional.rst", "functional/ivy/elementwise/isnan.rst", "functional/ivy/elementwise/isnan/isnan_array.rst", "functional/ivy/elementwise/isnan/isnan_container.rst", "functional/ivy/elementwise/isnan/isnan_functional.rst", "functional/ivy/elementwise/less.rst", "functional/ivy/elementwise/less/less_array.rst", "functional/ivy/elementwise/less/less_container.rst", "functional/ivy/elementwise/less/less_functional.rst", "functional/ivy/elementwise/less_equal.rst", "functional/ivy/elementwise/less_equal/less_equal_array.rst", "functional/ivy/elementwise/less_equal/less_equal_container.rst", "functional/ivy/elementwise/less_equal/less_equal_functional.rst", "functional/ivy/elementwise/log.rst", "functional/ivy/elementwise/log/log_array.rst", "functional/ivy/elementwise/log/log_container.rst", "functional/ivy/elementwise/log/log_functional.rst", "functional/ivy/elementwise/log10.rst", "functional/ivy/elementwise/log10/log10_array.rst", "functional/ivy/elementwise/log10/log10_container.rst", "functional/ivy/elementwise/log10/log10_functional.rst", "functional/ivy/elementwise/log1p.rst", "functional/ivy/elementwise/log1p/log1p_array.rst", "functional/ivy/elementwise/log1p/log1p_container.rst", "functional/ivy/elementwise/log1p/log1p_functional.rst", "functional/ivy/elementwise/log2.rst", "functional/ivy/elementwise/log2/log2_array.rst", "functional/ivy/elementwise/log2/log2_container.rst", "functional/ivy/elementwise/log2/log2_functional.rst", "functional/ivy/elementwise/logaddexp.rst", "functional/ivy/elementwise/logaddexp/logaddexp_array.rst", "functional/ivy/elementwise/logaddexp/logaddexp_container.rst", "functional/ivy/elementwise/logaddexp/logaddexp_functional.rst", "functional/ivy/elementwise/logical_and.rst", "functional/ivy/elementwise/logical_and/logical_and_array.rst", "functional/ivy/elementwise/logical_and/logical_and_container.rst", "functional/ivy/elementwise/logical_and/logical_and_functional.rst", "functional/ivy/elementwise/logical_not.rst", "functional/ivy/elementwise/logical_not/logical_not_array.rst", "functional/ivy/elementwise/logical_not/logical_not_container.rst", "functional/ivy/elementwise/logical_not/logical_not_functional.rst", "functional/ivy/elementwise/logical_or.rst", "functional/ivy/elementwise/logical_or/logical_or_array.rst", "functional/ivy/elementwise/logical_or/logical_or_container.rst", "functional/ivy/elementwise/logical_or/logical_or_functional.rst", "functional/ivy/elementwise/logical_xor.rst", "functional/ivy/elementwise/logical_xor/logical_xor_array.rst", "functional/ivy/elementwise/logical_xor/logical_xor_container.rst", "functional/ivy/elementwise/logical_xor/logical_xor_functional.rst", "functional/ivy/elementwise/maximum.rst", "functional/ivy/elementwise/minimum.rst", "functional/ivy/elementwise/multiply.rst", "functional/ivy/elementwise/multiply/multiply_array.rst", "functional/ivy/elementwise/multiply/multiply_container.rst", "functional/ivy/elementwise/multiply/multiply_functional.rst", "functional/ivy/elementwise/multiply/static_multiply_container.rst", "functional/ivy/elementwise/negative.rst", "functional/ivy/elementwise/negative/negative_array.rst", "functional/ivy/elementwise/negative/negative_container.rst", "functional/ivy/elementwise/negative/negative_functional.rst", "functional/ivy/elementwise/not_equal.rst", "functional/ivy/elementwise/not_equal/not_equal_array.rst", "functional/ivy/elementwise/not_equal/not_equal_container.rst", "functional/ivy/elementwise/not_equal/not_equal_functional.rst", "functional/ivy/elementwise/positive.rst", "functional/ivy/elementwise/positive/positive_array.rst", "functional/ivy/elementwise/positive/positive_container.rst", "functional/ivy/elementwise/positive/positive_functional.rst", "functional/ivy/elementwise/pow.rst", "functional/ivy/elementwise/pow/pow_array.rst", "functional/ivy/elementwise/pow/pow_container.rst", "functional/ivy/elementwise/pow/pow_functional.rst", "functional/ivy/elementwise/remainder.rst", "functional/ivy/elementwise/remainder/remainder_array.rst", "functional/ivy/elementwise/remainder/remainder_container.rst", "functional/ivy/elementwise/remainder/remainder_functional.rst", "functional/ivy/elementwise/round.rst", "functional/ivy/elementwise/round/round_array.rst", "functional/ivy/elementwise/round/round_container.rst", "functional/ivy/elementwise/round/round_functional.rst", "functional/ivy/elementwise/sign.rst", "functional/ivy/elementwise/sign/sign_array.rst", "functional/ivy/elementwise/sign/sign_container.rst", "functional/ivy/elementwise/sign/sign_functional.rst", "functional/ivy/elementwise/sin.rst", "functional/ivy/elementwise/sin/sin_array.rst", "functional/ivy/elementwise/sin/sin_container.rst", "functional/ivy/elementwise/sin/sin_functional.rst", "functional/ivy/elementwise/sinh.rst", "functional/ivy/elementwise/sinh/sinh_array.rst", "functional/ivy/elementwise/sinh/sinh_container.rst", "functional/ivy/elementwise/sinh/sinh_functional.rst", "functional/ivy/elementwise/sqrt.rst", "functional/ivy/elementwise/sqrt/sqrt_array.rst", "functional/ivy/elementwise/sqrt/sqrt_container.rst", "functional/ivy/elementwise/sqrt/sqrt_functional.rst", "functional/ivy/elementwise/square.rst", "functional/ivy/elementwise/square/square_array.rst", "functional/ivy/elementwise/square/square_container.rst", "functional/ivy/elementwise/square/square_functional.rst", "functional/ivy/elementwise/subtract.rst", "functional/ivy/elementwise/subtract/static_subtract_container.rst", "functional/ivy/elementwise/subtract/subtract_array.rst", "functional/ivy/elementwise/subtract/subtract_container.rst", "functional/ivy/elementwise/subtract/subtract_functional.rst", "functional/ivy/elementwise/tan.rst", "functional/ivy/elementwise/tan/static_tan_container.rst", "functional/ivy/elementwise/tan/tan_array.rst", "functional/ivy/elementwise/tan/tan_container.rst", "functional/ivy/elementwise/tan/tan_functional.rst", "functional/ivy/elementwise/tanh.rst", "functional/ivy/elementwise/tanh/tanh_array.rst", "functional/ivy/elementwise/tanh/tanh_container.rst", "functional/ivy/elementwise/tanh/tanh_functional.rst", "functional/ivy/elementwise/trunc.rst", "functional/ivy/elementwise/trunc/trunc_array.rst", "functional/ivy/elementwise/trunc/trunc_container.rst", "functional/ivy/elementwise/trunc/trunc_functional.rst", "functional/ivy/general.rst", "functional/ivy/general/all_equal.rst", "functional/ivy/general/all_equal/all_equal_array.rst", "functional/ivy/general/all_equal/all_equal_container.rst", "functional/ivy/general/all_equal/all_equal_functional.rst", "functional/ivy/general/all_equal/static_all_equal_container.rst", "functional/ivy/general/arg_info.rst", "functional/ivy/general/arg_names.rst", "functional/ivy/general/array_equal.rst", "functional/ivy/general/arrays_equal.rst", "functional/ivy/general/assert_supports_inplace.rst", "functional/ivy/general/cache_fn.rst", "functional/ivy/general/clip_matrix_norm.rst", "functional/ivy/general/clip_vector_norm.rst", "functional/ivy/general/clip_vector_norm/clip_vector_norm_container.rst", "functional/ivy/general/clip_vector_norm/clip_vector_norm_functional.rst", "functional/ivy/general/container_types.rst", "functional/ivy/general/copy_array.rst", "functional/ivy/general/cumprod.rst", "functional/ivy/general/cumsum.rst", "functional/ivy/general/current_backend_str.rst", "functional/ivy/general/default.rst", "functional/ivy/general/einops_rearrange.rst", "functional/ivy/general/einops_reduce.rst", "functional/ivy/general/einops_repeat.rst", "functional/ivy/general/exists.rst", "functional/ivy/general/floormod.rst", "functional/ivy/general/fourier_encode.rst", "functional/ivy/general/gather.rst", "functional/ivy/general/gather_nd.rst", "functional/ivy/general/get_all_arrays_in_memory.rst", "functional/ivy/general/get_min_base.rst", "functional/ivy/general/get_min_denominator.rst", "functional/ivy/general/get_num_dims.rst", "functional/ivy/general/get_referrers_recursive.rst", "functional/ivy/general/has_nans.rst", "functional/ivy/general/indices_where.rst", "functional/ivy/general/inplace_arrays_supported.rst", "functional/ivy/general/inplace_decrement.rst", "functional/ivy/general/inplace_increment.rst", "functional/ivy/general/inplace_update.rst", "functional/ivy/general/inplace_variables_supported.rst", "functional/ivy/general/is_array.rst", "functional/ivy/general/is_ivy_array.rst", "functional/ivy/general/is_ivy_container.rst", "functional/ivy/general/is_native_array.rst", "functional/ivy/general/match_kwargs.rst", "functional/ivy/general/multiprocessing.rst", "functional/ivy/general/num_arrays_in_memory.rst", "functional/ivy/general/one_hot.rst", "functional/ivy/general/print_all_arrays_in_memory.rst", "functional/ivy/general/queue_timeout.rst", "functional/ivy/general/scatter_flat.rst", "functional/ivy/general/scatter_nd.rst", "functional/ivy/general/set_min_base.rst", "functional/ivy/general/set_min_denominator.rst", "functional/ivy/general/set_queue_timeout.rst", "functional/ivy/general/set_tmp_dir.rst", "functional/ivy/general/shape.rst", "functional/ivy/general/shape_to_tuple.rst", "functional/ivy/general/stable_divide.rst", "functional/ivy/general/stable_pow.rst", "functional/ivy/general/supports_inplace.rst", "functional/ivy/general/tmp_dir.rst", "functional/ivy/general/to_list.rst", "functional/ivy/general/to_numpy.rst", "functional/ivy/general/to_scalar.rst", "functional/ivy/general/try_else_none.rst", "functional/ivy/general/unstack.rst", "functional/ivy/general/value_is_nan.rst", "functional/ivy/gradients.rst", "functional/ivy/gradients/GradientTracking:\n    \"\"\"\"\"\"\n\n    # noinspection PyShadowingNames\n    def __init__.rst", "functional/ivy/gradients/adam_step.rst", "functional/ivy/gradients/adam_update.rst", "functional/ivy/gradients/adam_update/adam_update_container.rst", "functional/ivy/gradients/adam_update/adam_update_functional.rst", "functional/ivy/gradients/adam_update/static_adam_update_container.rst", "functional/ivy/gradients/execute_with_gradients.rst", "functional/ivy/gradients/gradient_descent_update.rst", "functional/ivy/gradients/gradient_descent_update/gradient_descent_update_container.rst", "functional/ivy/gradients/gradient_descent_update/gradient_descent_update_functional.rst", "functional/ivy/gradients/gradient_descent_update/static_gradient_descent_update_container.rst", "functional/ivy/gradients/is_variable.rst", "functional/ivy/gradients/lamb_update.rst", "functional/ivy/gradients/lamb_update/lamb_update_container.rst", "functional/ivy/gradients/lamb_update/lamb_update_functional.rst", "functional/ivy/gradients/lamb_update/static_lamb_update_container.rst", "functional/ivy/gradients/lars_update.rst", "functional/ivy/gradients/lars_update/lars_update_container.rst", "functional/ivy/gradients/lars_update/lars_update_functional.rst", "functional/ivy/gradients/lars_update/static_lars_update_container.rst", "functional/ivy/gradients/optimizer_update.rst", "functional/ivy/gradients/optimizer_update/optimizer_update_container.rst", "functional/ivy/gradients/optimizer_update/optimizer_update_functional.rst", "functional/ivy/gradients/optimizer_update/static_optimizer_update_container.rst", "functional/ivy/gradients/set_with_grads.rst", "functional/ivy/gradients/stop_gradient.rst", "functional/ivy/gradients/unset_with_grads.rst", "functional/ivy/gradients/variable.rst", "functional/ivy/gradients/variable_data.rst", "functional/ivy/gradients/with_grads.rst", "functional/ivy/layers.rst", "functional/ivy/layers/conv1d.rst", "functional/ivy/layers/conv1d_transpose.rst", "functional/ivy/layers/conv2d.rst", "functional/ivy/layers/conv2d_transpose.rst", "functional/ivy/layers/conv3d.rst", "functional/ivy/layers/conv3d_transpose.rst", "functional/ivy/layers/depthwise_conv2d.rst", "functional/ivy/layers/dropout.rst", "functional/ivy/layers/linear.rst", "functional/ivy/layers/lstm_update.rst", "functional/ivy/layers/multi_head_attention.rst", "functional/ivy/layers/scaled_dot_product_attention.rst", "functional/ivy/linear_algebra.rst", "functional/ivy/linear_algebra/cholesky.rst", "functional/ivy/linear_algebra/cross.rst", "functional/ivy/linear_algebra/det.rst", "functional/ivy/linear_algebra/diagonal.rst", "functional/ivy/linear_algebra/eigh.rst", "functional/ivy/linear_algebra/eigvalsh.rst", "functional/ivy/linear_algebra/inv.rst", "functional/ivy/linear_algebra/matmul.rst", "functional/ivy/linear_algebra/matmul/matmul_array.rst", "functional/ivy/linear_algebra/matmul/matmul_container.rst", "functional/ivy/linear_algebra/matmul/matmul_functional.rst", "functional/ivy/linear_algebra/matrix_norm.rst", "functional/ivy/linear_algebra/matrix_power.rst", "functional/ivy/linear_algebra/matrix_rank.rst", "functional/ivy/linear_algebra/matrix_transpose.rst", "functional/ivy/linear_algebra/outer.rst", "functional/ivy/linear_algebra/pinv.rst", "functional/ivy/linear_algebra/qr.rst", "functional/ivy/linear_algebra/slogdet.rst", "functional/ivy/linear_algebra/solve.rst", "functional/ivy/linear_algebra/svd.rst", "functional/ivy/linear_algebra/svdvals.rst", "functional/ivy/linear_algebra/tensordot.rst", "functional/ivy/linear_algebra/trace.rst", "functional/ivy/linear_algebra/vecdot.rst", "functional/ivy/linear_algebra/vector_norm.rst", "functional/ivy/linear_algebra/vector_to_skew_symmetric_matrix.rst", "functional/ivy/losses.rst", "functional/ivy/losses/binary_cross_entropy.rst", "functional/ivy/losses/binary_cross_entropy/binary_cross_entropy_array.rst", "functional/ivy/losses/binary_cross_entropy/binary_cross_entropy_container.rst", "functional/ivy/losses/binary_cross_entropy/binary_cross_entropy_functional.rst", "functional/ivy/losses/binary_cross_entropy/static_binary_cross_entropy_container.rst", "functional/ivy/losses/cross_entropy.rst", "functional/ivy/losses/cross_entropy/cross_entropy_array.rst", "functional/ivy/losses/cross_entropy/cross_entropy_container.rst", "functional/ivy/losses/cross_entropy/cross_entropy_functional.rst", "functional/ivy/losses/cross_entropy/static_cross_entropy_container.rst", "functional/ivy/losses/sparse_cross_entropy.rst", "functional/ivy/losses/sparse_cross_entropy/sparse_cross_entropy_array.rst", "functional/ivy/losses/sparse_cross_entropy/sparse_cross_entropy_container.rst", "functional/ivy/losses/sparse_cross_entropy/sparse_cross_entropy_functional.rst", "functional/ivy/losses/sparse_cross_entropy/static_sparse_cross_entropy_container.rst", "functional/ivy/manipulation.rst", "functional/ivy/manipulation/clip.rst", "functional/ivy/manipulation/clip/clip_array.rst", "functional/ivy/manipulation/clip/clip_container.rst", "functional/ivy/manipulation/clip/clip_functional.rst", "functional/ivy/manipulation/clip/static_clip_container.rst", "functional/ivy/manipulation/concat.rst", "functional/ivy/manipulation/concat/concat_array.rst", "functional/ivy/manipulation/concat/concat_container.rst", "functional/ivy/manipulation/concat/concat_functional.rst", "functional/ivy/manipulation/constant_pad.rst", "functional/ivy/manipulation/constant_pad/constant_pad_array.rst", "functional/ivy/manipulation/constant_pad/constant_pad_container.rst", "functional/ivy/manipulation/constant_pad/constant_pad_functional.rst", "functional/ivy/manipulation/expand_dims.rst", "functional/ivy/manipulation/expand_dims/expand_dims_array.rst", "functional/ivy/manipulation/expand_dims/expand_dims_container.rst", "functional/ivy/manipulation/expand_dims/expand_dims_functional.rst", "functional/ivy/manipulation/flip.rst", "functional/ivy/manipulation/flip/flip_array.rst", "functional/ivy/manipulation/flip/flip_container.rst", "functional/ivy/manipulation/flip/flip_functional.rst", "functional/ivy/manipulation/permute_dims.rst", "functional/ivy/manipulation/permute_dims/permute_dims_array.rst", "functional/ivy/manipulation/permute_dims/permute_dims_container.rst", "functional/ivy/manipulation/permute_dims/permute_dims_functional.rst", "functional/ivy/manipulation/repeat.rst", "functional/ivy/manipulation/repeat/repeat_array.rst", "functional/ivy/manipulation/repeat/repeat_container.rst", "functional/ivy/manipulation/repeat/repeat_functional.rst", "functional/ivy/manipulation/reshape.rst", "functional/ivy/manipulation/reshape/reshape_array.rst", "functional/ivy/manipulation/reshape/reshape_container.rst", "functional/ivy/manipulation/reshape/reshape_functional.rst", "functional/ivy/manipulation/roll.rst", "functional/ivy/manipulation/roll/roll_array.rst", "functional/ivy/manipulation/roll/roll_container.rst", "functional/ivy/manipulation/roll/roll_functional.rst", "functional/ivy/manipulation/roll/static_roll_container.rst", "functional/ivy/manipulation/split.rst", "functional/ivy/manipulation/squeeze.rst", "functional/ivy/manipulation/squeeze/squeeze_array.rst", "functional/ivy/manipulation/squeeze/squeeze_container.rst", "functional/ivy/manipulation/squeeze/squeeze_functional.rst", "functional/ivy/manipulation/stack.rst", "functional/ivy/manipulation/stack/stack_array.rst", "functional/ivy/manipulation/stack/stack_container.rst", "functional/ivy/manipulation/stack/stack_functional.rst", "functional/ivy/manipulation/swapaxes.rst", "functional/ivy/manipulation/swapaxes/swapaxes_array.rst", "functional/ivy/manipulation/swapaxes/swapaxes_container.rst", "functional/ivy/manipulation/swapaxes/swapaxes_functional.rst", "functional/ivy/manipulation/tile.rst", "functional/ivy/manipulation/tile/tile_array.rst", "functional/ivy/manipulation/tile/tile_container.rst", "functional/ivy/manipulation/tile/tile_functional.rst", "functional/ivy/manipulation/zero_pad.rst", "functional/ivy/manipulation/zero_pad/zero_pad_array.rst", "functional/ivy/manipulation/zero_pad/zero_pad_container.rst", "functional/ivy/manipulation/zero_pad/zero_pad_functional.rst", "functional/ivy/meta.rst", "functional/ivy/meta/fomaml_step.rst", "functional/ivy/meta/maml_step.rst", "functional/ivy/meta/reptile_step.rst", "functional/ivy/nest.rst", "functional/ivy/nest/all_nested_indices.rst", "functional/ivy/nest/copy_nest.rst", "functional/ivy/nest/index_nest.rst", "functional/ivy/nest/insert_into_nest_at_index.rst", "functional/ivy/nest/insert_into_nest_at_indices.rst", "functional/ivy/nest/map.rst", "functional/ivy/nest/map_nest_at_index.rst", "functional/ivy/nest/map_nest_at_indices.rst", "functional/ivy/nest/multi_index_nest.rst", "functional/ivy/nest/nested_any.rst", "functional/ivy/nest/nested_indices_where.rst", "functional/ivy/nest/nested_map.rst", "functional/ivy/nest/nested_multi_map.rst", "functional/ivy/nest/prune_nest_at_index.rst", "functional/ivy/nest/prune_nest_at_indices.rst", "functional/ivy/nest/set_nest_at_index.rst", "functional/ivy/nest/set_nest_at_indices.rst", "functional/ivy/norms.rst", "functional/ivy/norms/layer_norm.rst", "functional/ivy/norms/layer_norm/layer_norm_array.rst", "functional/ivy/norms/layer_norm/layer_norm_container.rst", "functional/ivy/norms/layer_norm/layer_norm_functional.rst", "functional/ivy/random.rst", "functional/ivy/random/multinomial.rst", "functional/ivy/random/randint.rst", "functional/ivy/random/randint/randint_functional.rst", "functional/ivy/random/randint/static_randint_container.rst", "functional/ivy/random/random_normal.rst", "functional/ivy/random/random_uniform.rst", "functional/ivy/random/random_uniform/random_uniform_container.rst", "functional/ivy/random/random_uniform/random_uniform_functional.rst", "functional/ivy/random/random_uniform/static_random_uniform_container.rst", "functional/ivy/random/seed.rst", "functional/ivy/random/shuffle.rst", "functional/ivy/searching.rst", "functional/ivy/searching/argmax.rst", "functional/ivy/searching/argmin.rst", "functional/ivy/searching/nonzero.rst", "functional/ivy/searching/where.rst", "functional/ivy/set.rst", "functional/ivy/set/unique_all.rst", "functional/ivy/set/unique_counts.rst", "functional/ivy/set/unique_inverse.rst", "functional/ivy/set/unique_values.rst", "functional/ivy/sorting.rst", "functional/ivy/sorting/argsort.rst", "functional/ivy/sorting/argsort/argsort_array.rst", "functional/ivy/sorting/argsort/argsort_container.rst", "functional/ivy/sorting/argsort/argsort_functional.rst", "functional/ivy/sorting/argsort/static_argsort_container.rst", "functional/ivy/sorting/sort.rst", "functional/ivy/sorting/sort/sort_array.rst", "functional/ivy/sorting/sort/sort_container.rst", "functional/ivy/sorting/sort/sort_functional.rst", "functional/ivy/sorting/sort/static_sort_container.rst", "functional/ivy/statistical.rst", "functional/ivy/statistical/einsum.rst", "functional/ivy/statistical/einsum/einsum_array.rst", "functional/ivy/statistical/einsum/einsum_container.rst", "functional/ivy/statistical/einsum/einsum_functional.rst", "functional/ivy/statistical/max.rst", "functional/ivy/statistical/max/max_array.rst", "functional/ivy/statistical/max/max_container.rst", "functional/ivy/statistical/max/max_functional.rst", "functional/ivy/statistical/mean.rst", "functional/ivy/statistical/mean/mean_array.rst", "functional/ivy/statistical/mean/mean_container.rst", "functional/ivy/statistical/mean/mean_functional.rst", "functional/ivy/statistical/min.rst", "functional/ivy/statistical/min/min_array.rst", "functional/ivy/statistical/min/min_container.rst", "functional/ivy/statistical/min/min_functional.rst", "functional/ivy/statistical/prod.rst", "functional/ivy/statistical/prod/prod_array.rst", "functional/ivy/statistical/prod/prod_container.rst", "functional/ivy/statistical/prod/prod_functional.rst", "functional/ivy/statistical/std.rst", "functional/ivy/statistical/std/std_array.rst", "functional/ivy/statistical/std/std_container.rst", "functional/ivy/statistical/std/std_functional.rst", "functional/ivy/statistical/sum.rst", "functional/ivy/statistical/sum/sum_array.rst", "functional/ivy/statistical/sum/sum_container.rst", "functional/ivy/statistical/sum/sum_functional.rst", "functional/ivy/statistical/var.rst", "functional/ivy/statistical/var/var_array.rst", "functional/ivy/statistical/var/var_container.rst", "functional/ivy/statistical/var/var_functional.rst", "functional/ivy/utility.rst", "functional/ivy/utility/all.rst", "functional/ivy/utility/all/all_array.rst", "functional/ivy/utility/all/all_container.rst", "functional/ivy/utility/all/all_functional.rst", "functional/ivy/utility/any.rst", "functional/ivy/utility/any/any_array.rst", "functional/ivy/utility/any/any_container.rst", "functional/ivy/utility/any/any_functional.rst", "index.rst", "index_append.rst", "index_prepend.rst", "inspection.rst", "inspection/add_array_specs.rst", "inspection/fn_array_spec.rst", "roadmap.rst", "stateful/activations.rst", "stateful/activations/GEGLU.rst", "stateful/activations/GELU.rst", "stateful/converters.rst", "stateful/converters/to_ivy_module.rst", "stateful/initializers.rst", "stateful/initializers/Constant:\n    def __init__.rst", "stateful/initializers/FirstLayerSiren.rst", "stateful/initializers/GlorotUniform.rst", "stateful/initializers/KaimingNormal:\n    def __init__.rst", "stateful/initializers/Ones.rst", "stateful/initializers/Siren.rst", "stateful/initializers/Uniform:\n    def __init__.rst", "stateful/initializers/Zeros.rst", "stateful/layers.rst", "stateful/layers/Conv1D.rst", "stateful/layers/Conv1DTranspose.rst", "stateful/layers/Conv2D.rst", "stateful/layers/Conv2DTranspose.rst", "stateful/layers/Conv3D.rst", "stateful/layers/Conv3DTranspose.rst", "stateful/layers/DepthwiseConv2D.rst", "stateful/layers/Dropout.rst", "stateful/layers/LSTM.rst", "stateful/layers/Linear.rst", "stateful/layers/MultiHeadAttention.rst", "stateful/module.rst", "stateful/module/Module.rst", "stateful/norms.rst", "stateful/norms/LayerNorm.rst", "stateful/optimizers.rst", "stateful/optimizers/Adam.rst", "stateful/optimizers/LAMB.rst", "stateful/optimizers/LARS.rst", "stateful/optimizers/Optimizer.rst", "stateful/optimizers/SGD.rst", "stateful/sequential.rst", "stateful/sequential/Sequential.rst", "supported_frameworks.rst", "verbosity.rst", "verbosity/cprint.rst"], "titles": ["Activations", "ArrayWithActivations", "Conversions", "args_to_ivy", "args_to_native", "to_ivy", "to_native", "Creation", "ArrayWithCreation", "Data type", "ArrayWithDataTypes", "Device", "ArrayWithDevice", "Elementwise", "ArrayWithElementwise", "General", "ArrayWithGeneral", "Gradients", "ArrayWithGradients", "Image", "ArrayWithImage", "Layers", "ArrayWithLayers", "Linear algebra", "ArrayWithLinearAlgebra", "Losses", "ArrayWithLosses", "Manipulation", "ArrayWithManipulation", "Norms", "ArrayWithNorms", "Random", "ArrayWithRandom", "Searching", "ArrayWithSearching", "Set", "ArrayWithSet", "Sorting", "ArrayWithSorting", "Statistical", "ArrayWithStatistical", "Utility", "ArrayWithUtility", "Wrapping", "add_ivy_array_instance_methods", "Backend handler", "&lt;no title&gt;", "choose_random_backend", "clear_backend_stack", "current_backend", "get_backend", "set_backend", "try_import_ivy_jax", "try_import_ivy_mxnet", "try_import_ivy_numpy", "try_import_ivy_tf", "try_import_ivy_torch", "unset_backend", "Background", "ML Explosion", "Standardization", "Why Unify?", "Activations", "ContainerWithActivations", "Base", "ContainerBase", "Container", "Container", "MultiDevContainer", "Creation", "ContainerWithCreation", "Data type", "ContainerWithDataTypes", "Device", "ContainerWithDevice", "Elementwise", "ContainerWithElementwise", "General", "ContainerWithGeneral", "Gradients", "ContainerWithGradients", "Image", "ContainerWithImage", "Layers", "ContainerWithLayers", "Linear algebra", "ContainerWithLinearAlgebra", "Losses", "ContainerWithLosses", "Manipulation", "ContainerWithManipulation", "Norms", "ContainerWithNorms", "Random", "ContainerWithRandom", "Searching", "ContainerWithSearching", "Set", "ContainerWithSet", "Sorting", "ContainerWithSorting", "Statistical", "ContainerWithStatistical", "Utility", "ContainerWithUtility", "Wrapping", "add_ivy_container_instance_methods", "Contributing", "Setting Up", "The Basics", "Open Tasks", "Building the Docs", "Deep Dive", "Navigating the Code", "Docstrings", "Docstring Examples", "Array API Tests", "Ivy Tests", "Function Types", "Backend Setting", "Function Wrapping", "Arrays", "Containers", "Data Types", "Devices", "Inplace Updates", "Function Arguments", "Design", "Building Blocks", "Ivy as a Framework", "Ivy Array", "Ivy Container", "Ivy Stateful API", "Ivy as a Transpiler", "Ivy", "Ivy builder", "Ivy ecosystem", "Ivy gym", "Ivy mech", "Ivy memory", "Ivy models", "Ivy robot", "Ivy vision", "Extensions", "Applied Libraries", "FAQ", "Func wrapper", "handle_nestable", "handle_out_argument", "infer_device", "infer_dtype", "inputs_to_ivy_arrays", "inputs_to_native_arrays", "outputs_to_ivy_arrays", "to_native_arrays_and_back", "&lt;no title&gt;", "Activations", "gelu", "leaky_relu", "relu", "sigmoid", "softmax", "softplus", "tanh", "Compilation", "compile", "Constants", "Creation", "arange", "asarray", "empty", "empty_like", "eye", "from_dlpack", "full", "full_like", "linspace", "logspace", "meshgrid", "native_array", "ones", "ones_like", "tril", "triu", "zeros", "zeros_like", "Data type", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "as_ivy_dtype", "as_native_dtype", "astype", "broadcast_arrays", "broadcast_to", "can_cast", "can_cast array", "can_cast container", "can_cast functional", "static_can_cast container", "closest_valid_dtype", "default_dtype", "default_float_dtype", "default_int_dtype", "dtype", "dtype_bits", "finfo", "function_supported_dtypes", "function_unsupported_dtypes", "iinfo", "invalid_dtype", "is_float_dtype", "is_int_dtype", "promote_types", "result_type", "set_default_dtype", "set_default_float_dtype", "set_default_int_dtype", "type_promote_arrays", "unset_default_dtype", "unset_default_float_dtype", "unset_default_int_dtype", "valid_dtype", "Device", "&lt;no title&gt;", "DevClonedItem", "DevClonedIter", "DevClonedNest", "DevDistItem", "DevDistIter", "DevDistNest", "&lt;no title&gt;", "DevMapper", "DevMapperMultiProc", "&lt;no title&gt;", "MultiDevItem", "MultiDevIter", "MultiDevNest", "Profiler", "as_ivy_dev", "as_native_dev", "clear_mem_on_dev", "default_device", "dev", "dev_clone", "dev_clone_array", "dev_clone_iter", "dev_clone_nest", "dev_dist", "dev_dist_array", "dev_dist_iter", "dev_dist_nest", "dev_unify", "dev_unify_array", "dev_unify_iter", "dev_unify_nest", "dev_util", "get_all_ivy_arrays_on_dev", "gpu_is_available", "num_cpu_cores", "num_gpus", "num_ivy_arrays_on_dev", "percent_used_mem_on_dev", "print_all_ivy_arrays_on_dev", "set_default_device", "set_split_factor", "split_factor", "split_func_call", "to_device", "total_mem_on_dev", "tpu_is_available", "unset_default_device", "used_mem_on_dev", "Elementwise", "abs", "abs array", "abs container", "abs functional", "acos", "acos array", "acos container", "acosh functional", "acosh", "acosh array", "acosh container", "acosh functional", "add", "add array", "add container", "logaddexp functional", "static_add container", "asin", "asin array", "asin container", "asin functional", "asinh", "asinh array", "asinh container", "asinh functional", "atan", "atan array", "atan container", "atanh functional", "atan2", "atan2 array", "atan2 container", "atan2 functional", "atanh", "atanh array", "atanh container", "atanh functional", "bitwise_and", "bitwise_and array", "bitwise_and container", "bitwise_and functional", "bitwise_invert", "bitwise_invert array", "bitwise_invert container", "bitwise_invert functional", "bitwise_left_shift", "bitwise_left_shift array", "bitwise_left_shift container", "bitwise_left_shift functional", "bitwise_or", "bitwise_or array", "bitwise_or container", "bitwise_or functional", "bitwise_right_shift", "bitwise_right_shift array", "bitwise_right_shift container", "bitwise_right_shift functional", "bitwise_xor", "bitwise_xor array", "bitwise_xor container", "bitwise_xor functional", "ceil", "ceil array", "ceil container", "ceil functional", "cos", "cos array", "cos container", "acosh functional", "cosh", "cosh array", "cosh container", "acosh functional", "divide", "divide array", "divide container", "floor_divide functional", "static_divide container", "equal", "equal array", "equal container", "greater_equal functional", "erf", "erf array", "erf container", "erf functional", "exp", "exp array", "exp container", "logaddexp functional", "expm1", "expm1 array", "expm1 container", "expm1 functional", "floor", "floor array", "floor container", "floor_divide functional", "floor_divide", "floor_divide array", "floor_divide container", "floor_divide functional", "greater", "greater array", "greater container", "greater_equal functional", "greater_equal", "greater_equal array", "greater_equal container", "greater_equal functional", "isfinite", "isfinite array", "isfinite container", "isfinite functional", "isinf", "isinf array", "isinf container", "isinf functional", "isnan", "isnan array", "isnan container", "isnan functional", "less", "less array", "less container", "less functional", "less_equal", "less_equal array", "less_equal container", "less_equal functional", "log", "log array", "log container", "log functional", "log10", "log10 array", "log10 container", "log10 functional", "log1p", "log1p array", "log1p container", "log1p functional", "log2", "log2 array", "log2 container", "log2 functional", "logaddexp", "logaddexp array", "logaddexp container", "logaddexp functional", "logical_and", "logical_and array", "logical_and container", "logical_and functional", "logical_not", "logical_not array", "logical_not container", "logical_not functional", "logical_or", "logical_or array", "logical_or container", "logical_or functional", "logical_xor", "logical_xor array", "logical_xor container", "logical_xor functional", "maximum", "minimum", "multiply", "multiply array", "multiply container", "multiply functional", "static_multiply container", "negative", "negative array", "negative container", "negative functional", "not_equal", "not_equal array", "not_equal container", "not_equal functional", "positive", "positive array", "positive container", "positive functional", "pow", "pow array", "pow container", "pow functional", "remainder", "remainder array", "remainder container", "remainder functional", "round", "round array", "round container", "round functional", "sign", "sign array", "sign container", "sign functional", "sin", "sin array", "sin container", "sin functional", "sinh", "sinh array", "sinh container", "sinh functional", "sqrt", "sqrt array", "sqrt container", "sqrt functional", "square", "square array", "square container", "square functional", "subtract", "static_subtract container", "subtract array", "subtract container", "subtract functional", "tan", "static_tan container", "tan array", "tan container", "atanh functional", "tanh", "tanh array", "tanh container", "atanh functional", "trunc", "trunc array", "trunc container", "trunc functional", "General", "all_equal", "all_equal array", "all_equal container", "all_equal functional", "static_all_equal container", "arg_info", "arg_names", "array_equal", "arrays_equal", "assert_supports_inplace", "cache_fn", "clip_matrix_norm", "clip_vector_norm", "clip_vector_norm container", "clip_vector_norm functional", "container_types", "copy_array", "cumprod", "cumsum", "current_backend_str", "default", "einops_rearrange", "einops_reduce", "einops_repeat", "exists", "floormod", "fourier_encode", "gather", "gather_nd", "get_all_arrays_in_memory", "get_min_base", "get_min_denominator", "get_num_dims", "get_referrers_recursive", "has_nans", "indices_where", "inplace_arrays_supported", "inplace_decrement", "inplace_increment", "inplace_update", "inplace_variables_supported", "is_array", "is_ivy_array", "is_ivy_container", "is_native_array", "match_kwargs", "multiprocessing", "num_arrays_in_memory", "one_hot", "print_all_arrays_in_memory", "queue_timeout", "scatter_flat", "scatter_nd", "set_min_base", "set_min_denominator", "set_queue_timeout", "set_tmp_dir", "shape", "shape_to_tuple", "stable_divide", "stable_pow", "supports_inplace", "tmp_dir", "to_list", "to_numpy", "to_scalar", "try_else_none", "unstack", "value_is_nan", "Gradients", "&lt;no title&gt;", "adam_step", "adam_update", "adam_update container", "adam_update functional", "static_adam_update container", "execute_with_gradients", "gradient_descent_update", "gradient_descent_update container", "gradient_descent_update functional", "static_gradient_descent_update container", "is_variable", "lamb_update", "lamb_update container", "lamb_update functional", "static_lamb_update container", "lars_update", "lars_update container", "lars_update functional", "static_lars_update container", "optimizer_update", "optimizer_update container", "optimizer_update functional", "static_optimizer_update container", "set_with_grads", "stop_gradient", "unset_with_grads", "variable", "variable_data", "with_grads", "Layers", "conv1d", "conv1d_transpose", "conv2d", "conv2d_transpose", "conv3d", "conv3d_transpose", "depthwise_conv2d", "dropout", "linear", "lstm_update", "multi_head_attention", "scaled_dot_product_attention", "Linear algebra", "cholesky", "cross", "det", "diagonal", "eigh", "eigvalsh", "inv", "matmul", "matmul array", "matmul container", "matmul functional", "matrix_norm", "matrix_power", "matrix_rank", "matrix_transpose", "outer", "pinv", "qr", "slogdet", "solve", "svd", "svdvals", "tensordot", "trace", "vecdot", "vector_norm", "vector_to_skew_symmetric_matrix", "Losses", "binary_cross_entropy", "binary_cross_entropy array", "binary_cross_entropy container", "binary_cross_entropy functional", "static_binary_cross_entropy container", "cross_entropy", "cross_entropy array", "cross_entropy container", "cross_entropy functional", "static_cross_entropy container", "sparse_cross_entropy", "sparse_cross_entropy array", "sparse_cross_entropy container", "sparse_cross_entropy functional", "static_sparse_cross_entropy container", "Manipulation", "clip", "clip array", "clip container", "clip functional", "static_clip container", "concat", "concat array", "concat container", "concat functional", "constant_pad", "constant_pad array", "constant_pad container", "constant_pad functional", "expand_dims", "expand_dims array", "expand_dims container", "expand_dims functional", "flip", "flip array", "flip container", "flip functional", "permute_dims", "permute_dims array", "permute_dims container", "permute_dims functional", "repeat", "repeat array", "repeat container", "repeat functional", "reshape", "reshape array", "reshape container", "reshape functional", "roll", "roll array", "roll container", "roll functional", "static_roll container", "split", "squeeze", "squeeze array", "squeeze container", "squeeze functional", "stack", "stack array", "stack container", "stack functional", "swapaxes", "swapaxes array", "swapaxes container", "swapaxes functional", "tile", "tile array", "tile container", "tile functional", "zero_pad", "zero_pad array", "zero_pad container", "zero_pad functional", "Meta", "fomaml_step", "maml_step", "reptile_step", "Nest", "all_nested_indices", "copy_nest", "index_nest", "insert_into_nest_at_index", "insert_into_nest_at_indices", "map", "map_nest_at_index", "map_nest_at_indices", "multi_index_nest", "nested_any", "nested_indices_where", "nested_map", "nested_multi_map", "prune_nest_at_index", "prune_nest_at_indices", "set_nest_at_index", "set_nest_at_indices", "Norms", "layer_norm", "layer_norm array", "layer_norm container", "layer_norm functional", "Random", "multinomial", "randint", "randint functional", "static_randint container", "random_normal", "random_uniform", "random_uniform container", "random_uniform functional", "static_random_uniform container", "seed", "shuffle", "Searching", "argmax", "argmin", "nonzero", "where", "Set", "unique_all", "unique_counts", "unique_inverse", "unique_values", "Sorting", "argsort", "argsort array", "argsort container", "argsort functional", "static_argsort container", "sort", "sort array", "sort container", "sort functional", "static_sort container", "Statistical", "einsum", "einsum array", "einsum container", "einsum functional", "max", "max array", "max container", "max functional", "mean", "mean array", "mean container", "mean functional", "min", "min array", "min container", "min functional", "prod", "prod array", "prod container", "prod functional", "std", "std array", "std container", "std functional", "sum", "sum array", "sum container", "einsum functional", "var", "var array", "var container", "var functional", "Utility", "all", "all array", "all container", "all functional", "any", "any array", "any container", "any functional", "Contents", "&lt;no title&gt;", "&lt;no title&gt;", "Inspection", "add_array_specs", "fn_array_spec", "Roadmap", "Activations", "GEGLU", "GELU", "Converters", "to_ivy_module", "Initializers", "&lt;no title&gt;", "FirstLayerSiren", "GlorotUniform", "&lt;no title&gt;", "Ones", "Siren", "&lt;no title&gt;", "Zeros", "Layers", "Conv1D", "Conv1DTranspose", "Conv2D", "Conv2DTranspose", "Conv3D", "Conv3DTranspose", "DepthwiseConv2D", "Dropout", "LSTM", "Linear", "MultiHeadAttention", "Module", "Module", "Norms", "LayerNorm", "Optimizers", "Adam", "LAMB", "LARS", "Optimizer", "SGD", "Sequential", "Sequential", "&lt;no title&gt;", "Verbosity", "cprint"], "terms": {"class": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 51, 57, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 110, 111, 114, 115, 117, 121, 122, 123, 124, 126, 128, 129, 131, 132, 133, 143, 144, 145, 186, 209, 223, 225, 226, 227, 228, 229, 230, 232, 233, 235, 236, 237, 238, 509, 516, 549, 555, 574, 579, 608, 731, 733, 743, 766, 769, 829, 836, 837, 838, 839, 840, 841, 843, 844, 846, 847, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873], "ivi": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 109, 110, 111, 112, 114, 116, 118, 119, 120, 122, 123, 124, 125, 126, 127, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 225, 226, 227, 228, 229, 230, 232, 233, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 843, 844, 846, 847, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 875, 876], "arrai": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 49, 64, 65, 66, 67, 68, 71, 72, 75, 76, 77, 78, 89, 90, 93, 94, 108, 109, 110, 112, 113, 114, 115, 117, 118, 119, 120, 122, 123, 124, 125, 127, 128, 129, 131, 132, 133, 145, 146, 154, 156, 157, 158, 159, 160, 161, 162, 163, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 192, 193, 194, 195, 197, 198, 199, 204, 206, 209, 211, 212, 214, 218, 223, 242, 243, 244, 245, 248, 249, 250, 251, 252, 253, 254, 255, 257, 261, 263, 267, 268, 273, 274, 277, 278, 281, 282, 285, 286, 288, 289, 290, 291, 294, 295, 298, 299, 302, 303, 306, 307, 310, 311, 314, 315, 318, 319, 322, 323, 326, 327, 330, 331, 334, 335, 337, 338, 339, 342, 343, 346, 347, 350, 352, 355, 356, 359, 360, 363, 364, 367, 368, 371, 372, 375, 376, 379, 380, 383, 384, 387, 388, 391, 392, 395, 396, 399, 400, 403, 404, 407, 408, 411, 412, 415, 416, 419, 420, 423, 424, 427, 428, 431, 432, 435, 436, 439, 440, 441, 442, 445, 447, 450, 451, 454, 455, 458, 459, 462, 463, 466, 467, 470, 471, 474, 475, 478, 479, 482, 483, 486, 487, 490, 491, 495, 496, 497, 499, 500, 501, 504, 505, 508, 509, 510, 512, 513, 514, 517, 518, 519, 521, 522, 524, 526, 527, 528, 531, 532, 533, 534, 535, 536, 537, 538, 539, 542, 544, 545, 546, 547, 548, 549, 551, 552, 554, 557, 558, 559, 561, 562, 567, 571, 573, 574, 575, 577, 578, 579, 581, 582, 584, 587, 589, 591, 592, 594, 596, 598, 600, 602, 605, 607, 608, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 655, 657, 660, 662, 665, 667, 668, 670, 671, 672, 673, 676, 677, 680, 681, 684, 685, 688, 689, 692, 693, 696, 697, 700, 701, 703, 704, 705, 706, 707, 710, 711, 714, 715, 718, 719, 722, 723, 726, 727, 728, 729, 730, 731, 733, 743, 744, 749, 750, 753, 754, 755, 756, 757, 758, 759, 760, 762, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 780, 782, 785, 787, 788, 791, 792, 795, 796, 799, 800, 803, 804, 807, 808, 811, 812, 815, 816, 819, 820, 821, 824, 825, 828, 829, 832, 834, 850, 858, 861], "arraywithactiv": 0, "sourc": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 111, 121, 122, 146, 147, 148, 149, 150, 151, 152, 153, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 225, 226, 227, 228, 229, 230, 232, 233, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 832, 833, 834, 836, 837, 838, 839, 840, 841, 843, 844, 846, 847, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 875, 876], "base": [0, 1, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 45, 62, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 109, 117, 120, 122, 128, 144, 167, 177, 186, 223, 225, 226, 227, 228, 229, 230, 232, 233, 235, 236, 237, 238, 273, 360, 404, 407, 408, 411, 412, 415, 416, 419, 459, 462, 509, 540, 563, 570, 579, 771, 772, 773, 775, 787, 788, 791, 815, 836, 837, 838, 841, 843, 844, 846, 847, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873], "abc": [0, 1, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 64, 65, 130, 223, 232, 238, 509, 534, 862, 863, 866, 870], "activ": [1, 43, 44, 63, 105, 106, 108, 109, 111, 113, 132, 157, 158, 159, 160, 161, 162, 163, 829, 837, 838], "support": [1, 3, 4, 5, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 59, 60, 61, 63, 64, 65, 67, 68, 70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94, 96, 98, 100, 102, 104, 106, 114, 115, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 130, 131, 133, 147, 148, 149, 150, 151, 152, 153, 154, 157, 158, 159, 160, 161, 162, 163, 165, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 728, 729, 730, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 750, 751, 752, 753, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 767, 768, 769, 770, 772, 773, 774, 775, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 821, 822, 823, 824, 825, 826, 827, 828, 829, 833, 834, 835, 837, 838, 840, 842, 843, 844, 845, 846, 847, 848, 849, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 863, 865, 866, 867, 868, 869, 870, 871, 873, 874, 876], "framework": [1, 2, 3, 4, 5, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 59, 60, 61, 63, 64, 65, 67, 68, 70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94, 96, 98, 100, 102, 104, 106, 112, 116, 118, 119, 120, 121, 124, 126, 127, 130, 133, 144, 145, 147, 148, 149, 150, 151, 152, 153, 154, 157, 158, 159, 160, 161, 162, 163, 164, 165, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 728, 729, 730, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 750, 751, 752, 753, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 767, 768, 769, 770, 772, 773, 774, 775, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 821, 822, 823, 824, 825, 826, 827, 828, 829, 833, 834, 835, 837, 838, 839, 840, 842, 843, 844, 845, 846, 847, 848, 849, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 863, 865, 866, 867, 868, 869, 870, 871, 873, 874, 876], "collect": [2, 64, 65, 117, 144, 156, 164, 223, 509, 579, 610, 651, 731, 744, 749, 754, 836, 850, 864, 866], "function": [2, 9, 10, 13, 14, 15, 16, 27, 28, 43, 44, 45, 49, 50, 51, 59, 64, 65, 71, 72, 75, 76, 77, 78, 89, 90, 93, 94, 105, 106, 109, 111, 112, 113, 114, 115, 116, 117, 119, 121, 125, 127, 129, 130, 131, 132, 143, 144, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 190, 191, 192, 193, 194, 195, 196, 197, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 225, 226, 227, 228, 229, 230, 232, 233, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 278, 282, 286, 287, 288, 290, 291, 295, 299, 303, 307, 311, 315, 319, 323, 327, 331, 335, 336, 337, 339, 343, 347, 352, 356, 360, 364, 368, 372, 376, 380, 384, 388, 392, 396, 400, 404, 408, 412, 416, 420, 424, 428, 432, 436, 440, 441, 442, 447, 451, 455, 459, 463, 467, 471, 475, 479, 483, 487, 491, 496, 497, 498, 499, 501, 505, 509, 510, 511, 512, 514, 515, 516, 517, 518, 519, 520, 521, 522, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 581, 582, 586, 587, 591, 592, 596, 600, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 657, 662, 667, 668, 669, 670, 672, 673, 677, 681, 685, 689, 693, 697, 701, 702, 703, 705, 706, 707, 711, 715, 719, 723, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 754, 755, 756, 758, 759, 760, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 782, 787, 788, 792, 796, 800, 804, 808, 812, 816, 820, 821, 825, 829, 832, 834, 836, 837, 838, 866, 869, 871], "wrap": [2, 9, 10, 13, 14, 15, 16, 27, 28, 44, 64, 65, 66, 67, 68, 71, 72, 75, 76, 77, 78, 89, 90, 93, 94, 106, 112, 114, 117, 118, 119, 121, 122, 123, 124, 125, 126, 128, 130, 133, 145, 146, 154, 195, 196, 197, 199, 274, 275, 287, 288, 290, 302, 307, 335, 336, 337, 420, 497, 498, 499, 504, 509, 510, 511, 512, 514, 520, 579, 608, 668, 669, 670, 672, 701, 702, 703, 705, 756, 758], "accept": [2, 108, 109, 114, 115, 117, 118, 121, 122, 124, 125, 126, 130, 167, 178, 186, 195, 198, 273, 286, 291, 294, 311, 314, 331, 334, 335, 338, 343, 368, 428, 431, 432, 435, 463, 466, 467, 470, 483, 486, 487, 490, 496, 509, 537, 610, 613, 622, 623, 626, 667, 681, 684, 685, 688, 701, 704, 749, 750, 753, 771, 772, 773, 776, 777, 780, 787, 792, 795, 796, 799, 820, 821, 824, 829], "return": [2, 3, 4, 5, 6, 9, 10, 13, 14, 23, 24, 25, 26, 27, 28, 29, 30, 37, 38, 39, 40, 41, 42, 45, 49, 50, 57, 64, 65, 66, 67, 68, 71, 72, 75, 76, 77, 78, 79, 80, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 99, 100, 101, 102, 103, 104, 113, 114, 115, 117, 118, 120, 121, 122, 123, 124, 125, 126, 128, 130, 131, 132, 133, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 218, 222, 223, 232, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 512, 513, 514, 515, 517, 518, 519, 520, 521, 522, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 540, 541, 542, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 561, 562, 563, 564, 567, 568, 569, 570, 571, 573, 574, 575, 576, 577, 578, 579, 581, 582, 584, 585, 586, 587, 589, 590, 591, 592, 594, 595, 596, 598, 599, 600, 601, 602, 603, 605, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 737, 741, 742, 743, 744, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 832, 834, 839, 840, 850, 859, 860, 866, 870], "instanc": [2, 3, 4, 5, 6, 9, 10, 13, 14, 15, 16, 27, 28, 43, 44, 64, 65, 66, 67, 71, 72, 75, 76, 77, 78, 89, 90, 105, 106, 110, 114, 115, 117, 118, 121, 123, 125, 126, 131, 132, 133, 146, 154, 156, 158, 159, 160, 161, 162, 163, 167, 178, 186, 195, 196, 197, 198, 223, 232, 264, 273, 274, 275, 286, 287, 288, 291, 294, 302, 307, 311, 314, 331, 334, 335, 336, 337, 338, 343, 355, 368, 379, 380, 383, 420, 440, 441, 447, 450, 467, 470, 483, 486, 487, 490, 496, 498, 499, 504, 509, 510, 511, 512, 526, 537, 549, 573, 575, 610, 613, 616, 622, 623, 624, 625, 626, 651, 652, 655, 667, 668, 669, 670, 681, 684, 685, 688, 693, 696, 701, 702, 703, 704, 706, 715, 718, 749, 750, 753, 754, 759, 760, 762, 766, 767, 768, 769, 770, 771, 772, 773, 776, 777, 780, 787, 788, 791, 792, 795, 815, 820, 821, 824, 839, 840], "args_to_ivi": 2, "arg": [2, 3, 4, 45, 49, 64, 65, 111, 128, 130, 132, 223, 232, 247, 251, 255, 267, 509, 562, 839, 840, 862, 863], "include_deriv": [2, 3, 4, 5, 6, 731, 733, 743], "none": [2, 3, 4, 5, 6, 13, 14, 23, 24, 25, 26, 27, 28, 29, 30, 37, 38, 39, 40, 41, 42, 45, 47, 50, 57, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 113, 115, 118, 122, 123, 124, 125, 126, 128, 130, 132, 133, 156, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 174, 175, 176, 177, 179, 180, 181, 182, 183, 184, 185, 186, 192, 194, 195, 197, 199, 201, 202, 203, 206, 209, 223, 232, 233, 241, 242, 265, 266, 267, 268, 271, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 512, 514, 515, 521, 522, 523, 524, 526, 527, 528, 530, 531, 532, 533, 534, 535, 537, 538, 543, 545, 546, 550, 556, 558, 561, 562, 563, 564, 569, 570, 576, 579, 582, 583, 584, 585, 587, 588, 589, 590, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 737, 742, 743, 744, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 770, 771, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 839, 840, 841, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873], "kwarg": [2, 3, 4, 45, 49, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 128, 130, 132, 223, 232, 247, 251, 255, 509, 555, 839, 840, 862, 863], "keyword": [2, 3, 4, 64, 65, 66, 67, 68, 113, 123, 124, 125, 126, 131, 167, 178, 223, 232, 233, 247, 251, 255, 509, 516, 555, 731, 737, 787, 812, 862, 863], "variabl": [2, 3, 4, 5, 6, 64, 65, 66, 67, 114, 119, 122, 123, 125, 126, 131, 132, 133, 145, 509, 519, 547, 548, 549, 550, 551, 552, 554, 571, 579, 582, 584, 586, 587, 589, 591, 592, 594, 596, 598, 600, 602, 605, 608, 610, 621, 623, 643, 727, 728, 729, 730, 749, 750, 753, 829, 839, 840, 841, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873], "form": [2, 3, 4, 5, 6, 60, 64, 65, 107, 118, 132, 133, 167, 169, 179, 182, 183, 509, 515, 579, 582, 584, 587, 589, 592, 594, 596, 598, 600, 602, 610, 623, 624, 626, 627, 628, 629, 630, 637, 638, 640, 641, 643, 644, 645, 647, 731, 733, 743], "all": [2, 3, 4, 5, 6, 41, 42, 43, 44, 59, 60, 61, 64, 65, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 130, 131, 132, 133, 144, 145, 146, 154, 164, 165, 167, 168, 182, 183, 223, 232, 257, 263, 509, 510, 513, 517, 518, 539, 559, 574, 610, 620, 623, 643, 646, 649, 667, 685, 688, 701, 704, 727, 728, 729, 730, 731, 732, 733, 742, 743, 744, 754, 755, 760, 762, 820, 829, 832, 834], "nest": [2, 3, 4, 5, 6, 64, 65, 66, 67, 68, 113, 118, 121, 122, 130, 131, 132, 145, 223, 247, 251, 255, 509, 573, 727, 728, 729, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 862, 863, 866, 867, 868, 869, 870, 871], "otherwis": [2, 3, 4, 5, 6, 45, 57, 64, 65, 121, 123, 124, 126, 128, 130, 167, 168, 186, 192, 195, 198, 201, 202, 203, 223, 242, 273, 384, 387, 388, 391, 392, 395, 509, 519, 576, 579, 591, 605, 623, 624, 626, 648, 649, 727, 728, 729, 731, 744, 766, 767, 768, 770, 787, 792, 795, 796, 799, 800, 803, 804, 807, 808, 811, 812, 816, 819, 820, 821, 824, 825, 828], "argument": [2, 3, 4, 5, 6, 45, 49, 50, 59, 64, 65, 66, 67, 68, 110, 112, 113, 114, 115, 117, 118, 119, 121, 122, 128, 130, 131, 164, 165, 167, 168, 186, 195, 198, 214, 223, 232, 233, 247, 251, 255, 273, 286, 291, 294, 335, 338, 368, 483, 486, 487, 490, 496, 509, 515, 516, 520, 530, 537, 555, 562, 610, 613, 622, 667, 701, 704, 731, 737, 749, 750, 753, 787, 792, 795, 812, 820, 821, 824, 832, 834, 839, 840, 862, 863], "ar": [2, 3, 4, 59, 60, 61, 64, 65, 66, 67, 68, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 144, 145, 146, 154, 167, 168, 223, 232, 233, 257, 261, 263, 267, 273, 339, 428, 431, 432, 435, 467, 470, 475, 478, 496, 509, 510, 513, 517, 518, 519, 539, 545, 546, 550, 557, 559, 571, 610, 619, 623, 625, 631, 634, 635, 637, 640, 644, 645, 648, 667, 668, 671, 685, 688, 701, 704, 731, 733, 737, 743, 754, 759, 760, 762, 766, 767, 768, 769, 771, 772, 829, 872, 873], "unchang": [2, 3, 4, 5, 6], "paramet": [2, 3, 4, 5, 6, 43, 44, 45, 49, 50, 64, 65, 66, 67, 68, 105, 106, 113, 114, 117, 130, 131, 144, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 190, 191, 192, 193, 194, 195, 198, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 222, 223, 232, 233, 236, 237, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 259, 261, 262, 263, 264, 265, 266, 267, 268, 269, 272, 273, 274, 277, 278, 281, 282, 285, 286, 289, 291, 294, 295, 298, 299, 302, 303, 306, 307, 310, 311, 314, 315, 318, 319, 322, 323, 326, 327, 330, 331, 334, 335, 338, 339, 342, 343, 346, 347, 350, 352, 355, 356, 359, 360, 363, 364, 367, 368, 371, 372, 375, 376, 379, 380, 383, 384, 387, 388, 391, 392, 395, 396, 399, 400, 403, 404, 407, 408, 411, 412, 415, 416, 419, 420, 423, 424, 427, 428, 431, 432, 435, 436, 439, 440, 441, 442, 445, 447, 450, 451, 454, 455, 458, 459, 462, 463, 466, 467, 470, 471, 474, 475, 478, 479, 482, 483, 486, 487, 490, 491, 495, 496, 500, 501, 504, 505, 508, 509, 510, 513, 515, 516, 517, 518, 519, 520, 521, 522, 524, 527, 528, 530, 531, 532, 533, 534, 535, 536, 537, 538, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 558, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 573, 574, 575, 576, 577, 578, 579, 581, 582, 584, 586, 587, 589, 591, 592, 594, 596, 598, 600, 602, 604, 605, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 634, 635, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 655, 657, 660, 662, 665, 667, 668, 671, 673, 676, 677, 680, 681, 684, 685, 688, 689, 692, 693, 696, 697, 700, 701, 704, 706, 707, 710, 711, 714, 715, 718, 719, 722, 723, 726, 727, 728, 729, 730, 731, 732, 733, 734, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 753, 754, 755, 756, 757, 759, 760, 762, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 780, 782, 785, 787, 788, 791, 792, 795, 796, 799, 800, 803, 804, 807, 808, 811, 812, 815, 816, 819, 820, 821, 824, 825, 828, 832, 834, 839, 840, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873], "iter": [2, 3, 4, 5, 6, 43, 44, 61, 64, 65, 66, 67, 68, 105, 106, 122, 128, 131, 164, 165, 223, 245, 246, 248, 249, 250, 251, 254, 267, 509, 510, 513, 562, 567, 667, 677, 680, 693, 696, 706, 719, 722, 723, 726, 731, 732, 733, 737, 741, 742, 743], "ani": [2, 3, 4, 41, 42, 43, 44, 45, 49, 57, 59, 60, 61, 64, 65, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 121, 122, 123, 124, 125, 126, 128, 130, 131, 132, 133, 144, 145, 164, 165, 167, 169, 179, 186, 195, 198, 223, 268, 273, 286, 291, 294, 335, 338, 352, 355, 368, 379, 380, 383, 400, 403, 483, 486, 487, 490, 496, 509, 510, 513, 530, 531, 532, 533, 534, 537, 544, 551, 552, 553, 554, 569, 570, 579, 586, 610, 613, 622, 667, 701, 704, 727, 728, 729, 730, 731, 737, 741, 749, 750, 753, 754, 760, 762, 787, 792, 795, 820, 821, 824, 829], "The": [2, 3, 4, 5, 6, 45, 49, 50, 58, 59, 61, 64, 65, 66, 67, 68, 107, 108, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 131, 132, 133, 144, 156, 157, 158, 161, 163, 164, 165, 167, 168, 173, 177, 178, 182, 183, 186, 190, 191, 192, 200, 205, 207, 208, 210, 213, 218, 222, 223, 232, 233, 239, 240, 241, 242, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 261, 262, 263, 264, 265, 266, 267, 269, 272, 273, 274, 277, 278, 281, 282, 285, 286, 289, 291, 294, 295, 298, 299, 302, 303, 306, 307, 310, 311, 314, 315, 318, 319, 322, 323, 326, 327, 330, 331, 334, 335, 338, 339, 342, 343, 346, 347, 350, 352, 355, 356, 359, 360, 363, 364, 367, 368, 371, 372, 375, 376, 379, 380, 383, 384, 387, 388, 391, 392, 395, 396, 399, 400, 403, 404, 407, 408, 411, 416, 419, 420, 423, 424, 427, 428, 431, 432, 435, 436, 439, 442, 445, 451, 454, 459, 462, 463, 466, 467, 470, 471, 474, 475, 478, 479, 482, 483, 486, 496, 500, 504, 505, 508, 509, 515, 517, 520, 521, 529, 530, 536, 538, 547, 548, 549, 551, 552, 553, 554, 556, 561, 562, 563, 564, 565, 568, 569, 570, 578, 579, 581, 582, 584, 587, 589, 592, 594, 596, 598, 600, 602, 605, 608, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 635, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 651, 652, 655, 657, 660, 662, 665, 667, 673, 676, 677, 680, 681, 684, 685, 688, 689, 692, 693, 696, 697, 700, 706, 719, 722, 727, 728, 729, 730, 731, 732, 733, 734, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 753, 754, 755, 759, 766, 767, 768, 769, 771, 772, 773, 775, 776, 777, 780, 782, 785, 787, 788, 791, 792, 795, 796, 799, 800, 803, 804, 807, 808, 811, 812, 815, 816, 819, 820, 821, 824, 825, 828, 829, 839, 840, 850, 851, 852, 853, 854, 855, 856, 857, 858, 860, 861, 862, 863, 864, 865, 866, 868, 869, 870], "posit": [2, 3, 4, 13, 14, 75, 76, 126, 131, 144, 166, 167, 172, 186, 206, 223, 247, 251, 255, 273, 274, 277, 384, 387, 388, 391, 442, 445, 463, 466, 509, 536, 623, 624, 667, 681, 684, 701, 704, 754, 764, 766, 769, 820, 821, 824, 825, 828, 839, 840], "check": [2, 3, 4, 5, 6, 59, 60, 61, 64, 65, 108, 109, 122, 127, 128, 130, 131, 132, 133, 144, 186, 200, 207, 208, 210, 222, 223, 262, 272, 509, 519, 534, 544, 551, 552, 553, 554, 571, 578, 579, 591, 623, 628, 731, 732, 741, 742, 743, 829], "option": [2, 3, 4, 5, 6, 43, 44, 45, 50, 64, 65, 105, 106, 108, 109, 113, 114, 115, 118, 122, 123, 124, 125, 126, 128, 133, 145, 156, 158, 159, 161, 164, 165, 167, 168, 169, 170, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 184, 185, 186, 200, 201, 202, 203, 210, 222, 223, 242, 266, 267, 268, 273, 274, 277, 278, 281, 282, 285, 286, 289, 291, 294, 295, 298, 299, 303, 306, 311, 314, 315, 318, 319, 322, 323, 326, 327, 330, 331, 334, 335, 338, 339, 342, 343, 346, 360, 363, 364, 367, 368, 384, 387, 388, 391, 392, 395, 396, 399, 404, 407, 408, 411, 412, 415, 416, 419, 420, 423, 424, 427, 428, 431, 432, 435, 436, 439, 442, 445, 447, 450, 451, 454, 459, 462, 463, 466, 467, 470, 471, 474, 475, 478, 479, 482, 483, 486, 487, 490, 491, 495, 496, 509, 515, 522, 524, 527, 528, 529, 535, 537, 556, 558, 561, 562, 569, 570, 579, 605, 610, 613, 616, 617, 622, 623, 635, 637, 640, 649, 651, 652, 655, 657, 660, 662, 665, 667, 668, 671, 673, 676, 681, 684, 685, 688, 689, 692, 693, 696, 701, 704, 706, 707, 710, 711, 714, 715, 718, 727, 728, 729, 730, 731, 732, 737, 742, 743, 749, 750, 753, 754, 755, 756, 757, 759, 760, 762, 766, 767, 768, 776, 777, 780, 782, 785, 787, 788, 791, 792, 795, 796, 799, 800, 803, 804, 807, 808, 811, 812, 815, 816, 819, 820, 821, 824, 825, 828], "dict": [2, 3, 4, 5, 6, 45, 57, 64, 65, 66, 67, 68, 122, 131, 132, 223, 232, 233, 242, 245, 248, 249, 250, 251, 509, 515, 531, 532, 533, 731, 733, 734, 737, 740, 743, 744], "type": [2, 3, 4, 5, 6, 10, 13, 14, 23, 24, 25, 26, 27, 28, 29, 30, 37, 38, 39, 40, 41, 42, 43, 44, 45, 51, 57, 64, 65, 66, 67, 68, 72, 75, 76, 77, 78, 79, 80, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 99, 100, 101, 102, 103, 104, 105, 106, 108, 110, 112, 113, 114, 115, 120, 121, 122, 124, 125, 126, 128, 130, 131, 133, 146, 147, 148, 149, 150, 151, 152, 153, 154, 156, 158, 159, 160, 161, 162, 163, 164, 165, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 218, 222, 223, 239, 240, 241, 242, 243, 245, 255, 256, 257, 258, 259, 260, 261, 262, 264, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 512, 513, 514, 515, 517, 518, 520, 521, 522, 524, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 540, 541, 542, 544, 545, 547, 548, 549, 551, 552, 553, 554, 558, 561, 562, 563, 564, 567, 569, 570, 571, 573, 574, 575, 577, 578, 579, 581, 582, 584, 585, 587, 589, 590, 591, 592, 594, 595, 596, 598, 599, 600, 601, 602, 603, 605, 607, 610, 611, 613, 615, 616, 617, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 737, 741, 742, 743, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861], "bool": [2, 3, 4, 5, 6, 9, 10, 64, 65, 105, 106, 115, 122, 123, 125, 133, 164, 165, 167, 174, 186, 192, 195, 196, 198, 201, 202, 203, 204, 207, 210, 211, 212, 222, 223, 242, 243, 258, 267, 270, 273, 311, 314, 315, 318, 323, 326, 331, 334, 352, 355, 376, 379, 380, 383, 384, 387, 388, 391, 392, 395, 396, 399, 400, 403, 424, 427, 428, 431, 432, 435, 451, 454, 509, 510, 513, 517, 518, 527, 530, 534, 536, 542, 544, 549, 551, 552, 553, 554, 567, 577, 578, 579, 605, 623, 624, 635, 644, 649, 667, 706, 727, 728, 729, 730, 731, 732, 733, 737, 741, 742, 743, 754, 755, 766, 767, 768, 776, 777, 780, 782, 785, 787, 792, 795, 796, 799, 800, 803, 804, 807, 808, 811, 812, 816, 819, 820, 821, 824, 825, 828], "whether": [2, 3, 4, 5, 6, 64, 65, 66, 67, 68, 105, 106, 107, 108, 123, 125, 126, 156, 157, 164, 165, 186, 192, 204, 210, 211, 212, 222, 223, 242, 243, 254, 258, 259, 262, 263, 267, 270, 272, 273, 392, 395, 509, 510, 513, 517, 518, 527, 530, 534, 536, 542, 544, 546, 549, 550, 551, 552, 553, 554, 555, 567, 571, 577, 578, 579, 582, 584, 586, 587, 589, 591, 592, 594, 596, 598, 600, 602, 605, 610, 618, 623, 628, 727, 728, 729, 730, 731, 732, 733, 737, 741, 742, 743, 744, 754, 755, 820, 821, 824, 825, 828, 839, 840, 850, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871], "also": [2, 3, 4, 5, 6, 9, 10, 13, 14, 15, 16, 27, 28, 59, 60, 64, 65, 71, 72, 75, 76, 77, 78, 89, 90, 93, 94, 107, 108, 109, 112, 113, 114, 115, 117, 118, 120, 121, 122, 123, 124, 125, 126, 128, 130, 131, 132, 133, 144, 145, 167, 178, 186, 195, 196, 197, 198, 199, 273, 274, 275, 286, 287, 288, 290, 291, 294, 302, 307, 311, 314, 331, 334, 335, 336, 337, 338, 343, 368, 420, 467, 470, 483, 486, 487, 490, 496, 497, 498, 499, 504, 509, 510, 511, 512, 514, 537, 549, 579, 582, 584, 610, 613, 619, 622, 623, 626, 667, 668, 669, 670, 672, 681, 684, 685, 688, 701, 702, 703, 704, 705, 727, 728, 729, 730, 731, 732, 733, 741, 742, 743, 749, 750, 753, 756, 758, 771, 772, 773, 776, 777, 780, 787, 792, 795, 820, 821, 824, 850, 860], "recurs": [2, 3, 4, 5, 6, 64, 65, 108, 111, 118, 122, 132, 145, 731, 732, 733, 741, 742, 743], "deriv": [2, 3, 4, 5, 6, 123, 124, 130, 132, 167, 171, 175, 181, 185, 579, 581, 582, 584, 587, 589, 592, 594, 596, 598, 600, 602, 731, 733, 743, 862, 866, 870, 872], "from": [2, 3, 4, 5, 6, 43, 44, 45, 49, 50, 51, 59, 60, 61, 64, 65, 66, 67, 68, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 117, 119, 121, 122, 123, 124, 125, 126, 128, 130, 131, 132, 133, 144, 145, 167, 168, 169, 171, 173, 174, 175, 178, 179, 181, 185, 186, 195, 198, 214, 223, 232, 233, 242, 257, 261, 266, 267, 273, 376, 483, 486, 509, 530, 537, 538, 573, 579, 582, 584, 592, 594, 610, 618, 621, 623, 627, 644, 648, 667, 685, 688, 697, 700, 707, 710, 727, 728, 729, 730, 731, 733, 743, 744, 754, 755, 756, 757, 759, 760, 762, 766, 770, 771, 772, 774, 787, 804, 807, 808, 811, 812, 816, 819, 820, 821, 824, 825, 828, 829, 835, 839, 840, 850, 858, 861, 866, 870], "tupl": [2, 3, 4, 5, 6, 64, 65, 113, 122, 123, 124, 126, 130, 131, 132, 145, 164, 165, 167, 169, 170, 174, 179, 180, 184, 186, 194, 208, 223, 242, 509, 536, 568, 610, 613, 616, 617, 623, 637, 640, 644, 646, 649, 667, 673, 676, 677, 680, 685, 688, 689, 692, 701, 704, 707, 710, 711, 714, 723, 726, 727, 728, 729, 730, 731, 733, 734, 736, 738, 739, 740, 742, 743, 745, 746, 747, 748, 754, 759, 760, 762, 766, 769, 771, 772, 773, 774, 787, 792, 795, 796, 799, 800, 803, 804, 807, 808, 811, 812, 816, 819, 820, 821, 824, 825, 828], "list": [2, 3, 4, 5, 6, 43, 44, 64, 65, 105, 106, 108, 110, 111, 113, 115, 123, 124, 126, 128, 131, 132, 133, 145, 167, 168, 169, 170, 178, 179, 180, 184, 186, 193, 223, 232, 233, 242, 244, 245, 248, 249, 252, 253, 267, 509, 518, 568, 573, 577, 610, 611, 612, 613, 614, 615, 616, 617, 623, 646, 667, 673, 676, 685, 688, 706, 711, 714, 731, 732, 733, 737, 742, 743, 749, 750, 753, 766, 769, 820, 821, 824, 825, 828, 829, 850, 851, 852, 853, 854, 855, 856, 857], "default": [2, 3, 4, 5, 6, 43, 44, 45, 50, 64, 65, 66, 67, 68, 105, 106, 109, 114, 115, 118, 119, 122, 123, 124, 126, 132, 156, 157, 158, 159, 161, 164, 165, 167, 168, 169, 170, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 192, 201, 202, 203, 204, 223, 232, 233, 242, 243, 247, 248, 249, 250, 251, 252, 253, 254, 255, 262, 264, 265, 266, 267, 268, 271, 272, 273, 274, 277, 278, 281, 282, 285, 286, 289, 291, 294, 295, 298, 299, 303, 306, 311, 314, 315, 318, 319, 322, 323, 326, 327, 330, 331, 334, 335, 338, 339, 342, 343, 346, 360, 363, 364, 367, 368, 384, 387, 388, 391, 392, 395, 396, 399, 404, 407, 408, 411, 412, 415, 416, 419, 420, 423, 424, 427, 428, 431, 432, 435, 436, 439, 442, 445, 447, 450, 451, 454, 459, 462, 463, 466, 467, 470, 471, 474, 475, 478, 479, 482, 483, 486, 487, 490, 491, 495, 496, 509, 510, 513, 515, 521, 522, 524, 527, 528, 535, 536, 537, 542, 543, 544, 546, 549, 550, 551, 552, 554, 555, 556, 558, 560, 561, 562, 565, 567, 569, 570, 577, 578, 579, 581, 582, 584, 586, 587, 589, 591, 592, 594, 596, 598, 600, 602, 605, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 627, 635, 637, 640, 641, 644, 646, 647, 648, 649, 651, 652, 655, 657, 660, 662, 665, 667, 668, 671, 673, 676, 677, 680, 681, 684, 685, 688, 689, 692, 693, 696, 701, 704, 706, 707, 710, 711, 714, 715, 718, 727, 728, 729, 730, 731, 732, 733, 737, 741, 742, 743, 744, 749, 750, 753, 754, 755, 756, 757, 759, 760, 762, 764, 766, 767, 768, 769, 771, 772, 773, 776, 777, 780, 782, 785, 787, 788, 791, 792, 795, 796, 799, 800, 803, 804, 807, 808, 811, 812, 815, 816, 819, 820, 821, 824, 825, 828, 839, 840, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873], "fals": [2, 3, 4, 5, 6, 15, 16, 37, 38, 39, 40, 41, 42, 45, 52, 53, 54, 55, 56, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 115, 122, 125, 131, 132, 133, 186, 192, 195, 197, 198, 199, 204, 223, 242, 243, 254, 258, 259, 262, 267, 270, 272, 273, 274, 276, 280, 281, 282, 284, 288, 289, 290, 291, 293, 295, 297, 301, 302, 303, 305, 307, 309, 311, 313, 314, 315, 317, 319, 321, 323, 325, 327, 329, 331, 333, 335, 337, 341, 342, 345, 346, 349, 350, 351, 354, 355, 356, 358, 362, 363, 364, 366, 370, 371, 372, 374, 376, 378, 379, 380, 382, 383, 384, 386, 387, 388, 390, 391, 392, 394, 395, 396, 398, 399, 400, 402, 404, 406, 408, 410, 412, 414, 416, 418, 420, 422, 424, 426, 428, 430, 431, 432, 434, 435, 436, 438, 442, 444, 446, 447, 449, 451, 453, 455, 457, 459, 461, 463, 465, 467, 469, 471, 473, 475, 477, 479, 481, 483, 485, 487, 489, 491, 492, 494, 497, 499, 500, 503, 504, 505, 507, 509, 510, 511, 512, 513, 514, 517, 518, 522, 523, 527, 530, 534, 536, 542, 549, 551, 552, 554, 555, 567, 577, 579, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 623, 624, 631, 633, 635, 644, 649, 652, 654, 656, 657, 659, 661, 662, 664, 666, 667, 668, 670, 672, 673, 675, 677, 679, 681, 683, 685, 687, 689, 691, 693, 695, 697, 699, 701, 703, 705, 706, 707, 709, 711, 713, 715, 717, 719, 721, 723, 725, 727, 728, 729, 730, 731, 732, 733, 737, 741, 742, 743, 744, 750, 752, 754, 755, 760, 761, 763, 766, 767, 768, 770, 771, 772, 773, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 790, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 839, 840, 862, 863, 866, 867, 868, 869, 870, 871], "str": [2, 3, 4, 45, 50, 64, 65, 123, 124, 167, 178, 186, 190, 200, 201, 202, 205, 206, 209, 210, 211, 212, 215, 216, 217, 222, 223, 239, 242, 243, 245, 248, 249, 250, 251, 267, 509, 515, 529, 531, 532, 533, 556, 561, 562, 610, 611, 613, 615, 616, 617, 623, 641, 727, 728, 729, 730, 731, 737, 787, 788, 791, 815], "kei": [2, 3, 4, 64, 65, 66, 67, 68, 122, 131, 223, 235, 509, 515, 525, 610, 621, 622, 727, 728, 729, 731, 734, 740, 744, 839, 840, 850, 861, 866, 870], "word": [2, 3, 4, 167, 168, 754, 760, 762, 839, 840], "ret": [2, 3, 4, 5, 6, 45, 49, 50, 57, 64, 65, 113, 114, 128, 133, 156, 157, 158, 159, 160, 161, 162, 163, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 190, 191, 192, 193, 194, 195, 198, 200, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 222, 223, 232, 239, 240, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 266, 267, 268, 269, 270, 272, 273, 274, 277, 278, 281, 282, 285, 286, 289, 291, 294, 295, 298, 299, 302, 303, 306, 307, 310, 311, 314, 315, 318, 319, 322, 323, 326, 327, 330, 331, 334, 335, 338, 339, 342, 343, 346, 347, 350, 352, 355, 356, 359, 360, 363, 364, 367, 368, 371, 372, 375, 376, 379, 380, 383, 384, 387, 388, 391, 392, 395, 396, 399, 400, 403, 404, 407, 408, 411, 412, 415, 416, 419, 420, 423, 424, 427, 428, 431, 432, 435, 436, 439, 440, 441, 442, 445, 447, 450, 451, 454, 455, 458, 459, 462, 463, 466, 467, 470, 471, 474, 475, 478, 479, 482, 483, 486, 487, 490, 491, 495, 496, 500, 501, 504, 505, 508, 509, 510, 513, 515, 517, 518, 519, 520, 521, 522, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 541, 542, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 558, 561, 562, 567, 569, 570, 571, 573, 574, 575, 577, 578, 579, 581, 582, 584, 586, 587, 589, 591, 592, 594, 596, 598, 600, 602, 605, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 634, 635, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 655, 657, 660, 662, 665, 667, 668, 671, 673, 676, 677, 680, 681, 684, 685, 688, 689, 692, 693, 696, 697, 700, 701, 704, 706, 707, 710, 711, 714, 715, 718, 719, 722, 723, 726, 727, 728, 729, 730, 731, 732, 733, 737, 741, 742, 743, 749, 750, 753, 754, 755, 756, 757, 759, 760, 762, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 780, 782, 785, 787, 788, 791, 792, 795, 796, 799, 800, 803, 804, 807, 808, 811, 812, 815, 816, 819, 820, 821, 824, 825, 828, 832, 834, 839, 840, 866, 870], "same": [2, 3, 4, 59, 61, 64, 65, 108, 109, 111, 113, 115, 117, 118, 121, 122, 124, 125, 126, 128, 130, 132, 133, 167, 168, 171, 175, 178, 181, 182, 183, 185, 186, 192, 193, 194, 223, 232, 233, 267, 273, 274, 277, 286, 315, 318, 335, 338, 368, 442, 445, 463, 466, 467, 470, 471, 474, 505, 508, 509, 535, 537, 538, 558, 561, 562, 579, 591, 605, 610, 611, 612, 613, 614, 615, 616, 617, 622, 623, 624, 625, 626, 627, 628, 629, 630, 638, 640, 641, 643, 644, 647, 648, 667, 673, 676, 685, 688, 689, 692, 701, 704, 707, 710, 711, 714, 727, 728, 729, 731, 744, 771, 772, 773, 775, 776, 777, 780, 782, 785, 787, 788, 791, 792, 795, 796, 799, 800, 803, 804, 807, 812, 815, 816, 819, 829, 850, 851, 852, 853, 854, 855, 856, 857], "convert": [2, 3, 4, 5, 6, 61, 64, 65, 121, 128, 145, 146, 154, 167, 169, 179, 186, 190, 191, 223, 239, 240, 241, 242, 262, 269, 272, 509, 568, 574, 575, 623, 650, 731, 733, 743, 744, 840], "args_to_n": [2, 125, 130], "nativ": [2, 4, 5, 6, 45, 51, 64, 65, 123, 125, 130, 131, 167, 179, 186, 190, 191, 200, 223, 239, 240, 241, 242, 243, 262, 269, 272, 509, 549, 551, 554, 839, 840], "backend": [2, 4, 6, 49, 50, 51, 57, 59, 64, 65, 109, 110, 112, 114, 116, 117, 118, 120, 121, 122, 123, 124, 125, 126, 129, 130, 133, 186, 207, 208, 210, 222, 223, 258, 260, 270, 509, 546, 549, 550, 556, 579, 582, 584, 587, 589, 592, 594, 596, 598, 600, 602, 608, 829, 835, 839, 840, 866, 867, 868, 869, 870, 871], "to_ivi": [2, 64, 65, 130, 731, 744], "x": [2, 5, 6, 9, 10, 13, 14, 27, 28, 45, 49, 57, 64, 65, 66, 67, 71, 72, 75, 76, 89, 90, 93, 94, 99, 100, 111, 113, 114, 115, 118, 119, 122, 125, 126, 128, 130, 131, 132, 133, 156, 157, 158, 159, 160, 161, 162, 163, 167, 169, 171, 173, 175, 178, 179, 181, 182, 183, 184, 185, 186, 192, 194, 195, 196, 197, 198, 199, 204, 223, 242, 243, 244, 245, 248, 249, 257, 261, 266, 268, 273, 274, 277, 278, 281, 282, 285, 286, 287, 288, 290, 291, 294, 295, 298, 299, 302, 303, 306, 307, 310, 311, 314, 315, 318, 331, 334, 335, 336, 337, 338, 339, 342, 343, 346, 355, 356, 359, 360, 364, 367, 368, 376, 379, 380, 383, 384, 387, 388, 391, 392, 395, 396, 399, 404, 407, 408, 411, 412, 415, 416, 419, 420, 428, 431, 440, 441, 447, 450, 455, 458, 467, 470, 471, 474, 475, 478, 479, 482, 483, 486, 487, 490, 496, 497, 498, 499, 500, 501, 504, 505, 508, 509, 517, 518, 519, 521, 522, 524, 526, 527, 528, 530, 531, 532, 533, 534, 535, 536, 537, 538, 541, 542, 544, 545, 547, 548, 549, 551, 552, 553, 554, 558, 567, 571, 573, 574, 575, 577, 578, 579, 586, 591, 605, 607, 608, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 635, 636, 637, 638, 639, 640, 641, 642, 644, 645, 646, 647, 649, 651, 652, 655, 657, 660, 662, 665, 667, 668, 669, 670, 671, 672, 673, 676, 677, 680, 681, 684, 685, 688, 689, 692, 693, 696, 697, 700, 701, 702, 703, 704, 705, 706, 707, 710, 711, 712, 713, 714, 715, 718, 719, 722, 723, 726, 731, 732, 737, 741, 742, 743, 749, 750, 753, 754, 756, 757, 758, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 780, 781, 782, 785, 786, 787, 788, 791, 792, 795, 796, 799, 800, 803, 804, 807, 808, 811, 812, 815, 816, 819, 820, 821, 824, 825, 828, 829, 850, 861], "input": [2, 5, 6, 64, 65, 66, 67, 68, 75, 76, 77, 78, 89, 90, 93, 94, 113, 114, 115, 117, 118, 119, 121, 122, 123, 124, 125, 126, 128, 130, 131, 132, 133, 145, 146, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 167, 169, 171, 173, 175, 178, 179, 181, 182, 183, 185, 186, 192, 193, 195, 198, 200, 201, 202, 203, 204, 205, 211, 212, 213, 214, 218, 223, 232, 233, 242, 243, 244, 245, 247, 248, 251, 255, 261, 267, 268, 273, 274, 277, 278, 281, 282, 285, 286, 289, 290, 291, 294, 295, 298, 299, 302, 303, 306, 307, 310, 311, 314, 315, 318, 319, 322, 323, 326, 327, 330, 331, 334, 335, 338, 339, 342, 343, 346, 347, 350, 352, 355, 360, 363, 364, 367, 368, 371, 372, 375, 376, 379, 380, 383, 384, 387, 388, 391, 392, 395, 396, 399, 400, 403, 404, 407, 408, 411, 412, 415, 416, 419, 420, 423, 424, 427, 428, 431, 432, 435, 436, 439, 440, 441, 442, 445, 447, 450, 451, 454, 455, 458, 459, 462, 463, 466, 467, 470, 471, 474, 475, 478, 479, 482, 483, 486, 487, 490, 491, 495, 496, 497, 500, 501, 504, 505, 508, 509, 510, 513, 514, 515, 517, 518, 519, 521, 522, 524, 526, 527, 528, 530, 531, 532, 533, 534, 535, 536, 537, 542, 544, 545, 547, 548, 549, 551, 552, 553, 554, 567, 568, 571, 573, 574, 575, 577, 578, 579, 586, 591, 605, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 634, 635, 637, 638, 639, 640, 641, 644, 645, 646, 647, 648, 649, 651, 652, 655, 657, 660, 662, 665, 667, 668, 671, 672, 673, 676, 677, 680, 681, 684, 685, 688, 689, 692, 693, 696, 701, 704, 705, 706, 707, 710, 711, 714, 715, 718, 719, 722, 723, 726, 727, 728, 729, 730, 749, 750, 753, 754, 755, 756, 757, 758, 759, 760, 762, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 780, 782, 785, 787, 788, 791, 792, 795, 796, 799, 800, 803, 804, 807, 808, 811, 812, 815, 816, 819, 820, 821, 824, 825, 828, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 864, 865], "an": [2, 5, 6, 43, 44, 60, 61, 64, 65, 105, 106, 108, 109, 110, 111, 113, 114, 115, 117, 118, 119, 121, 122, 123, 124, 125, 126, 128, 130, 131, 132, 133, 144, 145, 156, 159, 160, 162, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 192, 193, 194, 195, 198, 206, 211, 212, 214, 223, 245, 249, 268, 273, 274, 277, 278, 281, 282, 285, 286, 289, 291, 294, 295, 298, 299, 302, 303, 306, 307, 310, 311, 314, 315, 318, 319, 322, 323, 326, 327, 330, 331, 334, 335, 338, 339, 342, 343, 346, 347, 350, 352, 355, 360, 363, 364, 367, 368, 371, 372, 375, 376, 379, 380, 383, 384, 387, 388, 391, 392, 395, 396, 399, 400, 403, 404, 407, 408, 411, 412, 415, 416, 419, 420, 423, 424, 427, 428, 431, 432, 435, 436, 439, 440, 441, 442, 445, 447, 450, 451, 454, 459, 462, 463, 466, 467, 470, 471, 474, 475, 478, 479, 482, 483, 486, 487, 490, 491, 495, 496, 500, 504, 505, 508, 509, 520, 521, 522, 524, 526, 535, 536, 537, 545, 549, 551, 552, 553, 554, 574, 575, 576, 579, 591, 605, 607, 608, 610, 613, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 634, 636, 637, 638, 640, 641, 642, 643, 644, 647, 648, 649, 667, 668, 671, 673, 676, 677, 680, 681, 684, 685, 688, 689, 692, 697, 700, 701, 704, 706, 707, 710, 711, 714, 715, 718, 719, 722, 723, 726, 731, 737, 749, 750, 753, 754, 756, 757, 765, 766, 769, 770, 771, 772, 773, 774, 775, 776, 777, 780, 782, 785, 787, 788, 791, 792, 795, 796, 799, 800, 803, 804, 807, 808, 811, 812, 815, 816, 819, 820, 821, 824, 825, 828, 829, 839, 840, 862, 863, 866, 867, 868, 870], "If": [2, 5, 6, 45, 49, 50, 51, 59, 64, 65, 107, 108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 130, 131, 133, 145, 167, 168, 170, 171, 172, 174, 175, 178, 180, 181, 182, 183, 184, 185, 186, 192, 194, 214, 223, 242, 266, 273, 274, 277, 278, 281, 282, 285, 286, 289, 291, 294, 295, 298, 299, 303, 306, 335, 338, 339, 342, 343, 346, 360, 363, 364, 367, 368, 404, 407, 408, 411, 416, 419, 420, 423, 428, 431, 432, 435, 442, 445, 459, 462, 463, 466, 467, 470, 471, 474, 475, 478, 479, 482, 483, 486, 496, 505, 508, 509, 549, 579, 582, 584, 587, 589, 592, 594, 596, 598, 600, 602, 623, 624, 625, 635, 637, 640, 641, 643, 644, 648, 649, 651, 652, 655, 657, 660, 662, 665, 667, 681, 684, 685, 688, 701, 704, 706, 707, 710, 711, 714, 727, 728, 729, 731, 743, 744, 754, 759, 760, 762, 766, 767, 768, 769, 771, 772, 773, 775, 776, 777, 780, 782, 785, 787, 792, 795, 796, 799, 800, 803, 804, 807, 808, 811, 812, 816, 819, 820, 821, 824, 825, 828, 829], "set": [2, 5, 6, 36, 45, 49, 50, 51, 57, 59, 64, 65, 98, 107, 109, 112, 113, 118, 120, 121, 122, 123, 124, 125, 128, 130, 131, 223, 242, 252, 253, 264, 265, 266, 267, 273, 303, 306, 509, 510, 513, 563, 564, 565, 566, 579, 582, 584, 587, 589, 591, 592, 594, 596, 598, 600, 602, 623, 625, 635, 637, 640, 643, 731, 732, 741, 742, 743, 747, 748, 754, 764, 766, 767, 772, 773, 774, 775, 776, 777, 780, 782, 785, 787, 808, 811, 816, 819, 850, 859, 866, 867, 868, 869, 870, 871], "appli": [2, 5, 6, 9, 10, 13, 14, 15, 16, 27, 28, 64, 65, 71, 72, 75, 76, 77, 78, 89, 90, 93, 94, 108, 109, 110, 114, 115, 117, 118, 120, 122, 123, 124, 125, 126, 128, 130, 131, 132, 133, 143, 145, 156, 157, 158, 159, 160, 161, 162, 163, 186, 195, 196, 197, 199, 214, 274, 275, 287, 288, 290, 302, 307, 335, 336, 337, 420, 497, 498, 499, 504, 509, 510, 511, 512, 514, 531, 532, 533, 579, 592, 594, 596, 598, 610, 619, 621, 622, 623, 637, 640, 651, 652, 655, 657, 660, 662, 665, 667, 668, 669, 670, 672, 701, 702, 703, 705, 711, 714, 727, 728, 729, 731, 737, 740, 743, 744, 749, 750, 753, 756, 758, 829, 836, 837, 838, 864, 865], "leaf": [2, 5, 6, 64, 65, 118, 122, 131, 731, 732, 741, 742], "contain": [2, 5, 6, 15, 16, 59, 62, 63, 64, 65, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 108, 109, 110, 111, 112, 114, 115, 117, 118, 123, 125, 126, 127, 128, 129, 132, 133, 145, 156, 159, 160, 162, 167, 168, 171, 173, 180, 182, 183, 184, 186, 195, 198, 223, 244, 245, 248, 257, 261, 273, 274, 277, 278, 281, 282, 285, 286, 289, 291, 294, 295, 298, 299, 302, 303, 306, 307, 310, 311, 314, 315, 318, 319, 322, 323, 326, 327, 330, 331, 334, 335, 338, 339, 342, 343, 346, 347, 350, 352, 355, 356, 360, 363, 364, 367, 368, 371, 372, 375, 376, 379, 380, 383, 384, 387, 388, 391, 392, 395, 396, 399, 400, 403, 404, 407, 408, 411, 412, 415, 416, 419, 420, 423, 424, 427, 428, 431, 432, 435, 436, 439, 440, 441, 442, 445, 447, 450, 451, 454, 455, 459, 462, 463, 466, 467, 470, 471, 474, 475, 478, 479, 482, 483, 486, 487, 490, 491, 495, 496, 500, 504, 505, 508, 509, 510, 511, 513, 515, 518, 521, 522, 524, 526, 527, 534, 537, 544, 553, 573, 574, 575, 582, 587, 592, 596, 600, 610, 613, 616, 617, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 634, 637, 638, 639, 640, 641, 643, 644, 645, 646, 647, 648, 649, 651, 652, 655, 657, 660, 662, 665, 667, 668, 671, 673, 677, 681, 684, 685, 688, 689, 692, 693, 696, 697, 701, 704, 706, 707, 711, 715, 718, 719, 723, 727, 728, 729, 730, 731, 744, 749, 750, 753, 754, 755, 756, 759, 760, 762, 766, 767, 768, 769, 770, 771, 772, 773, 775, 776, 777, 780, 782, 787, 788, 791, 792, 795, 796, 799, 800, 803, 804, 807, 808, 811, 812, 815, 816, 819, 820, 821, 824, 825, 828, 829, 850, 851, 852, 853, 854, 855, 856, 857, 859, 860, 861, 862, 863, 866, 870, 872, 873], "within": [2, 5, 6, 109, 117, 132, 145, 167, 168, 754, 760, 762], "union": [2, 5, 6, 64, 65, 113, 115, 118, 121, 122, 123, 124, 125, 126, 128, 133, 156, 158, 159, 160, 161, 162, 163, 164, 165, 167, 168, 169, 170, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 190, 191, 192, 193, 194, 200, 201, 202, 203, 204, 205, 206, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 222, 223, 239, 240, 241, 242, 243, 245, 248, 249, 250, 251, 256, 262, 264, 266, 267, 268, 269, 272, 273, 274, 277, 278, 281, 282, 285, 286, 289, 291, 294, 295, 298, 299, 302, 303, 306, 307, 310, 311, 314, 315, 318, 319, 322, 323, 326, 327, 330, 331, 334, 335, 338, 339, 342, 343, 346, 347, 350, 352, 355, 356, 359, 360, 363, 364, 367, 368, 371, 372, 375, 376, 379, 380, 383, 384, 387, 388, 391, 392, 395, 396, 399, 400, 403, 404, 407, 408, 411, 412, 415, 416, 419, 420, 423, 424, 427, 428, 431, 432, 435, 436, 439, 440, 441, 442, 445, 447, 450, 451, 454, 455, 458, 459, 462, 463, 466, 467, 470, 471, 474, 475, 478, 479, 482, 483, 486, 487, 490, 491, 495, 496, 500, 501, 504, 505, 508, 509, 510, 513, 517, 518, 521, 522, 524, 527, 528, 531, 532, 533, 535, 536, 537, 538, 542, 544, 545, 547, 548, 549, 558, 561, 562, 567, 568, 573, 574, 575, 577, 578, 579, 581, 582, 584, 587, 589, 592, 594, 596, 598, 600, 602, 605, 607, 610, 611, 613, 615, 616, 617, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 634, 635, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 655, 657, 660, 662, 665, 667, 668, 671, 673, 676, 677, 680, 681, 684, 685, 688, 689, 692, 693, 696, 697, 700, 701, 704, 706, 707, 710, 711, 714, 715, 718, 719, 722, 723, 726, 727, 728, 729, 730, 731, 732, 733, 742, 743, 749, 750, 753, 754, 755, 756, 757, 759, 760, 762, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 780, 782, 785, 787, 788, 791, 792, 795, 796, 799, 800, 803, 808, 811, 812, 815, 816, 819, 820, 821, 824, 825, 828], "nativearrai": [2, 5, 6, 15, 16, 113, 115, 118, 121, 122, 125, 126, 128, 130, 133, 146, 154, 156, 158, 159, 160, 161, 162, 163, 167, 168, 169, 171, 175, 176, 177, 178, 179, 181, 182, 183, 185, 186, 192, 193, 194, 195, 198, 204, 206, 209, 211, 212, 214, 218, 223, 242, 243, 245, 261, 267, 268, 273, 274, 277, 278, 281, 282, 285, 286, 289, 291, 294, 295, 298, 299, 302, 303, 306, 307, 310, 311, 314, 315, 318, 319, 322, 323, 326, 327, 330, 331, 334, 335, 338, 339, 342, 343, 346, 347, 350, 352, 355, 356, 359, 360, 363, 364, 367, 368, 371, 372, 375, 376, 379, 380, 383, 384, 387, 388, 391, 392, 395, 396, 399, 400, 403, 404, 407, 408, 411, 412, 415, 416, 419, 420, 423, 424, 427, 428, 431, 432, 435, 436, 439, 440, 441, 442, 445, 447, 450, 451, 454, 455, 458, 459, 462, 463, 466, 467, 470, 471, 474, 475, 478, 479, 482, 483, 486, 487, 490, 491, 495, 496, 500, 501, 504, 505, 508, 509, 510, 511, 513, 517, 518, 521, 522, 524, 526, 527, 528, 531, 532, 533, 535, 536, 537, 538, 542, 544, 545, 547, 548, 549, 558, 561, 562, 567, 573, 574, 575, 577, 578, 579, 581, 582, 584, 587, 589, 592, 594, 596, 598, 600, 602, 605, 607, 610, 611, 613, 615, 616, 617, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 634, 635, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 655, 657, 660, 662, 665, 667, 668, 671, 673, 676, 677, 680, 681, 684, 685, 688, 689, 692, 693, 696, 697, 700, 701, 704, 706, 707, 710, 711, 714, 715, 718, 719, 722, 723, 726, 731, 733, 743, 749, 750, 753, 754, 755, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 780, 782, 785, 787, 788, 791, 792, 795, 796, 799, 800, 803, 808, 811, 812, 815, 816, 819, 820, 821, 824, 825, 828], "mayb": [2, 5, 6, 108, 128, 130], "manner": [2, 5, 6, 59, 64, 65, 113, 114, 124, 131, 144, 145, 731, 743], "so": [2, 5, 6, 9, 10, 13, 14, 15, 16, 27, 28, 59, 60, 64, 65, 71, 72, 75, 76, 77, 78, 89, 90, 93, 94, 108, 109, 113, 114, 115, 117, 120, 121, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 145, 146, 154, 195, 196, 197, 199, 274, 275, 287, 288, 290, 302, 307, 335, 336, 337, 420, 497, 498, 499, 504, 510, 511, 512, 514, 668, 669, 670, 672, 701, 702, 703, 705, 731, 732, 742, 756, 758, 829], "travers": [2, 5, 6, 64, 65, 122, 128, 130, 731, 743], "lowest": [2, 5, 6, 64, 65, 118, 145, 731, 743, 754, 756, 757], "leav": [2, 5, 6, 64, 65, 66, 67, 114, 115, 117, 118, 122, 123, 125, 126, 131, 132, 667, 711, 714, 731, 732, 733, 741, 742, 743], "search": [2, 5, 6, 34, 59, 64, 65, 96, 108, 113, 115, 117, 767, 768, 769, 770], "s": [2, 5, 6, 45, 49, 50, 51, 57, 60, 61, 64, 65, 107, 108, 109, 111, 112, 114, 115, 117, 119, 121, 122, 123, 124, 125, 126, 128, 130, 131, 132, 133, 144, 145, 166, 167, 178, 182, 183, 186, 207, 208, 223, 242, 266, 273, 463, 466, 509, 518, 579, 582, 584, 587, 589, 592, 594, 600, 602, 623, 644, 645, 731, 737, 743, 787, 808, 811, 816, 819, 829, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 870, 872, 873], "case": [2, 5, 6, 60, 64, 65, 66, 67, 68, 108, 109, 110, 113, 114, 115, 118, 119, 121, 122, 123, 124, 125, 126, 128, 130, 132, 133, 145, 167, 178, 223, 262, 269, 272, 273, 274, 277, 278, 281, 282, 285, 286, 289, 291, 294, 295, 298, 299, 303, 306, 331, 334, 335, 338, 339, 342, 343, 346, 360, 363, 364, 367, 368, 404, 407, 408, 411, 416, 419, 420, 423, 442, 445, 459, 462, 463, 466, 467, 470, 471, 474, 475, 478, 479, 482, 483, 486, 496, 505, 508, 509, 549, 561, 562, 623, 635, 667, 697, 700, 731, 734, 740, 787, 792, 795, 796, 799, 800, 803, 808, 811, 812, 816, 819, 850, 861, 862, 863, 866, 870], "to_n": [2, 64, 65], "item": [2, 6, 43, 44, 64, 65, 123, 128, 130, 131, 133, 186, 201, 223, 232, 233, 235, 242, 244, 246, 248, 250, 254, 509, 525, 543, 569, 570, 731, 736, 737, 738, 739, 743, 747, 748, 829, 862, 863], "convers": [3, 4, 5, 6, 61, 64, 65, 127, 129, 133, 144, 145, 829, 835], "arraywithcr": 7, "creation": [8, 64, 65, 66, 67, 68, 70, 113, 123, 124, 128, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185], "data_typ": [9, 10, 71, 72, 113, 123, 186, 190, 191, 192, 193, 194, 195, 198, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222], "arraywithdatatyp": 9, "can_cast": [9, 10, 71, 72, 118, 123, 186, 199], "method": [9, 10, 13, 14, 15, 16, 27, 28, 43, 44, 64, 65, 66, 67, 68, 71, 72, 75, 76, 77, 78, 89, 90, 93, 94, 105, 106, 110, 113, 114, 115, 117, 118, 121, 126, 128, 129, 132, 133, 145, 156, 158, 159, 160, 161, 162, 163, 167, 173, 178, 195, 196, 197, 199, 273, 274, 275, 287, 288, 290, 291, 294, 302, 307, 311, 314, 331, 334, 335, 336, 337, 338, 343, 355, 368, 379, 380, 383, 420, 440, 441, 447, 450, 467, 470, 483, 486, 487, 490, 497, 498, 499, 504, 509, 510, 511, 512, 514, 525, 526, 537, 561, 562, 573, 575, 579, 592, 594, 596, 598, 610, 616, 622, 623, 624, 625, 626, 651, 652, 655, 667, 668, 669, 670, 672, 681, 684, 685, 688, 693, 696, 701, 702, 703, 705, 706, 715, 718, 731, 732, 742, 743, 744, 749, 750, 753, 754, 756, 758, 759, 760, 762, 766, 767, 768, 769, 770, 771, 772, 773, 776, 777, 780, 787, 788, 791, 792, 795, 815, 820, 821, 824, 829, 850, 861, 862, 863], "variant": [9, 10, 13, 14, 15, 16, 27, 28, 71, 72, 75, 76, 77, 78, 89, 90, 93, 94, 114, 115, 195, 196, 197, 199, 274, 275, 287, 288, 290, 302, 307, 335, 336, 337, 420, 497, 498, 499, 504, 510, 511, 512, 514, 668, 669, 670, 672, 701, 702, 703, 705, 756, 758], "thi": [9, 10, 13, 14, 15, 16, 27, 28, 59, 60, 61, 64, 65, 66, 67, 68, 71, 72, 75, 76, 77, 78, 89, 90, 93, 94, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 144, 145, 167, 168, 169, 178, 179, 186, 195, 196, 197, 198, 199, 223, 247, 251, 255, 262, 267, 272, 273, 274, 275, 277, 286, 287, 288, 290, 291, 294, 302, 307, 311, 314, 327, 330, 331, 334, 335, 336, 337, 338, 343, 364, 367, 368, 420, 428, 431, 432, 435, 463, 466, 467, 470, 483, 486, 487, 490, 496, 497, 498, 499, 504, 509, 510, 511, 512, 514, 536, 537, 549, 560, 565, 579, 582, 584, 587, 589, 591, 592, 594, 596, 598, 600, 602, 608, 610, 613, 619, 622, 623, 626, 635, 642, 667, 668, 669, 670, 672, 681, 684, 685, 688, 697, 700, 701, 702, 703, 704, 705, 711, 714, 731, 737, 743, 744, 749, 750, 753, 756, 758, 766, 767, 771, 772, 773, 775, 776, 777, 780, 787, 792, 795, 796, 799, 808, 811, 816, 819, 820, 821, 824, 829, 835, 862, 863, 866, 867, 868, 869, 870, 871], "simpli": [9, 10, 13, 14, 15, 16, 27, 28, 64, 65, 71, 72, 75, 76, 77, 78, 89, 90, 93, 94, 109, 114, 115, 117, 118, 121, 122, 124, 125, 126, 128, 132, 133, 195, 196, 197, 199, 273, 274, 275, 287, 288, 290, 302, 307, 335, 336, 337, 364, 367, 420, 497, 498, 499, 504, 510, 511, 512, 514, 668, 669, 670, 672, 701, 702, 703, 705, 756, 758], "docstr": [9, 10, 13, 14, 15, 16, 27, 28, 71, 72, 75, 76, 77, 78, 89, 90, 93, 94, 110, 111, 112, 113, 118, 122, 126, 167, 178, 186, 195, 196, 197, 198, 199, 273, 274, 275, 286, 287, 288, 290, 291, 294, 302, 307, 311, 314, 331, 334, 335, 336, 337, 338, 343, 368, 420, 467, 470, 483, 486, 487, 490, 496, 497, 498, 499, 504, 510, 511, 512, 514, 623, 626, 667, 668, 669, 670, 672, 681, 684, 685, 688, 701, 702, 703, 704, 705, 756, 758, 771, 772, 773, 776, 777, 780, 787, 792, 795, 820, 821, 824], "minim": [9, 10, 13, 14, 15, 16, 27, 28, 71, 72, 75, 76, 77, 78, 89, 90, 93, 94, 114, 125, 128, 195, 196, 197, 199, 274, 275, 287, 288, 290, 302, 307, 335, 336, 337, 420, 497, 498, 499, 504, 510, 511, 512, 514, 668, 669, 670, 672, 701, 702, 703, 705, 756, 758], "chang": [9, 10, 13, 14, 15, 16, 27, 28, 61, 71, 72, 75, 76, 77, 78, 89, 90, 93, 94, 108, 109, 110, 111, 114, 116, 117, 122, 128, 132, 145, 195, 196, 197, 199, 223, 274, 275, 287, 288, 290, 302, 307, 335, 336, 337, 420, 497, 498, 499, 504, 510, 511, 512, 514, 623, 625, 667, 668, 669, 670, 672, 697, 700, 701, 702, 703, 705, 731, 733, 743, 756, 758, 829, 835], "exampl": [9, 10, 13, 14, 15, 16, 27, 28, 43, 44, 45, 49, 50, 51, 57, 61, 66, 67, 71, 72, 75, 76, 77, 78, 89, 90, 93, 94, 105, 106, 108, 109, 110, 112, 113, 114, 117, 118, 119, 120, 121, 122, 123, 124, 125, 128, 130, 131, 132, 133, 144, 145, 156, 158, 159, 160, 161, 162, 163, 164, 165, 167, 174, 175, 178, 180, 181, 184, 185, 186, 192, 195, 196, 197, 198, 199, 207, 208, 223, 242, 243, 245, 257, 258, 259, 260, 261, 264, 266, 268, 270, 271, 273, 286, 287, 288, 290, 291, 294, 302, 307, 310, 311, 314, 315, 318, 327, 330, 331, 334, 335, 336, 337, 338, 339, 343, 355, 360, 368, 376, 379, 380, 383, 396, 399, 420, 440, 441, 447, 450, 467, 470, 483, 486, 487, 490, 496, 497, 498, 499, 500, 504, 509, 510, 511, 512, 513, 514, 517, 518, 526, 527, 534, 537, 541, 552, 567, 573, 574, 575, 610, 611, 613, 615, 616, 617, 622, 623, 624, 625, 626, 627, 630, 637, 639, 644, 646, 647, 651, 652, 655, 657, 660, 662, 665, 667, 668, 669, 670, 671, 672, 673, 676, 681, 684, 685, 688, 693, 696, 697, 700, 701, 702, 703, 704, 705, 706, 707, 710, 711, 714, 715, 718, 749, 750, 753, 754, 755, 756, 757, 758, 759, 760, 762, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 776, 777, 780, 787, 788, 791, 808, 811, 812, 815, 820, 821, 824, 829], "1": [9, 10, 13, 14, 15, 16, 25, 26, 27, 28, 29, 30, 37, 38, 45, 51, 57, 60, 61, 64, 65, 66, 67, 71, 72, 75, 76, 77, 78, 87, 88, 89, 90, 91, 92, 93, 94, 99, 100, 111, 115, 118, 122, 125, 126, 127, 128, 130, 131, 132, 133, 145, 156, 158, 159, 160, 161, 163, 167, 168, 175, 176, 177, 178, 180, 181, 185, 186, 192, 195, 196, 197, 198, 199, 206, 223, 227, 230, 232, 237, 242, 243, 245, 247, 251, 255, 257, 260, 261, 268, 273, 278, 281, 282, 285, 286, 287, 288, 290, 291, 294, 302, 303, 306, 307, 311, 314, 315, 318, 327, 330, 331, 334, 335, 336, 337, 338, 339, 342, 343, 346, 355, 360, 364, 367, 368, 376, 379, 380, 383, 396, 399, 404, 407, 408, 411, 412, 415, 416, 419, 420, 440, 441, 447, 450, 459, 462, 467, 470, 471, 474, 475, 478, 483, 486, 487, 490, 496, 497, 498, 499, 504, 509, 510, 511, 512, 513, 514, 517, 518, 526, 527, 534, 537, 538, 552, 558, 561, 562, 567, 570, 573, 574, 575, 577, 610, 611, 612, 613, 614, 615, 616, 617, 618, 622, 623, 624, 625, 626, 627, 630, 637, 639, 643, 644, 646, 647, 648, 649, 651, 652, 655, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 676, 681, 684, 685, 688, 689, 692, 693, 696, 697, 700, 701, 702, 703, 704, 705, 706, 707, 710, 711, 714, 715, 718, 731, 743, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 765, 766, 767, 768, 769, 770, 771, 772, 773, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 791, 792, 795, 808, 811, 812, 815, 816, 819, 820, 821, 824, 825, 828, 829, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 870, 872, 873], "2": [9, 10, 13, 14, 15, 16, 27, 28, 45, 49, 64, 65, 66, 67, 71, 72, 75, 76, 77, 78, 89, 90, 93, 94, 108, 109, 111, 115, 119, 122, 126, 127, 128, 130, 131, 132, 133, 145, 156, 158, 159, 160, 161, 163, 166, 167, 174, 175, 178, 180, 181, 185, 186, 192, 195, 196, 197, 198, 199, 223, 242, 243, 245, 257, 259, 261, 268, 273, 286, 287, 288, 290, 291, 294, 299, 302, 303, 306, 307, 311, 314, 315, 318, 327, 330, 331, 334, 335, 336, 337, 338, 339, 343, 355, 360, 368, 376, 379, 380, 383, 396, 399, 416, 419, 420, 440, 441, 447, 450, 467, 470, 483, 486, 487, 490, 496, 497, 498, 499, 504, 509, 510, 511, 512, 513, 517, 518, 521, 522, 524, 527, 534, 537, 552, 567, 573, 610, 613, 614, 615, 616, 617, 622, 623, 624, 625, 626, 627, 630, 631, 634, 635, 637, 639, 640, 641, 644, 646, 647, 649, 651, 652, 655, 662, 665, 667, 668, 669, 670, 671, 672, 673, 676, 681, 684, 685, 688, 693, 696, 697, 700, 701, 702, 703, 704, 705, 706, 707, 710, 715, 718, 749, 750, 753, 754, 755, 756, 757, 758, 759, 760, 762, 765, 766, 767, 768, 769, 770, 771, 772, 773, 776, 777, 780, 787, 788, 791, 792, 795, 815, 820, 821, 824, 829], "3": [9, 10, 13, 14, 15, 16, 27, 28, 66, 67, 71, 72, 75, 76, 77, 78, 89, 90, 93, 94, 108, 111, 115, 119, 122, 128, 130, 131, 132, 133, 156, 158, 159, 160, 161, 166, 167, 175, 178, 181, 184, 185, 186, 195, 196, 197, 198, 199, 223, 242, 245, 261, 268, 273, 286, 287, 288, 290, 291, 294, 302, 307, 311, 314, 327, 330, 331, 334, 335, 337, 338, 343, 355, 360, 368, 376, 379, 380, 383, 396, 399, 420, 440, 441, 447, 450, 467, 470, 483, 486, 487, 490, 496, 497, 499, 504, 509, 510, 511, 512, 517, 518, 527, 534, 537, 567, 573, 575, 610, 611, 612, 613, 615, 616, 617, 622, 623, 624, 625, 626, 627, 630, 637, 639, 644, 646, 647, 650, 651, 652, 655, 662, 665, 667, 668, 669, 670, 671, 672, 673, 676, 681, 684, 685, 688, 693, 696, 697, 700, 701, 703, 704, 705, 706, 707, 710, 715, 718, 749, 750, 753, 754, 755, 756, 757, 758, 759, 760, 762, 765, 766, 767, 768, 769, 770, 771, 772, 773, 776, 777, 780, 787, 788, 791, 792, 795, 812, 815, 820, 821, 824, 829], "print": [9, 10, 13, 14, 15, 16, 27, 28, 43, 44, 45, 49, 50, 51, 57, 64, 65, 66, 67, 68, 71, 72, 75, 76, 77, 78, 89, 90, 93, 94, 105, 106, 108, 115, 122, 128, 130, 131, 132, 156, 158, 159, 160, 161, 162, 163, 167, 174, 175, 178, 180, 181, 184, 185, 186, 192, 195, 196, 197, 198, 199, 207, 208, 223, 243, 257, 258, 259, 260, 261, 263, 266, 270, 273, 286, 287, 288, 290, 291, 294, 302, 307, 310, 311, 314, 315, 318, 327, 330, 331, 334, 335, 336, 337, 338, 339, 343, 355, 360, 368, 376, 379, 380, 383, 396, 399, 420, 440, 441, 447, 450, 467, 470, 483, 486, 487, 490, 496, 497, 498, 499, 500, 504, 509, 510, 511, 512, 513, 514, 517, 518, 526, 527, 534, 537, 541, 559, 567, 573, 574, 575, 610, 611, 613, 615, 616, 617, 622, 623, 624, 625, 626, 627, 630, 639, 644, 646, 647, 651, 652, 655, 657, 660, 662, 665, 667, 668, 669, 670, 671, 672, 681, 684, 685, 688, 693, 696, 697, 700, 701, 702, 703, 704, 705, 706, 707, 710, 715, 718, 749, 750, 753, 754, 755, 756, 757, 758, 759, 760, 762, 765, 766, 767, 768, 769, 770, 771, 772, 773, 776, 777, 780, 787, 788, 791, 792, 795, 808, 811, 812, 815, 820, 821, 824, 829], "dtype": [9, 10, 39, 40, 64, 65, 71, 72, 101, 102, 113, 115, 118, 123, 124, 130, 167, 168, 169, 170, 171, 172, 174, 175, 176, 179, 180, 181, 184, 185, 186, 190, 191, 192, 193, 195, 196, 197, 198, 199, 200, 201, 202, 203, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 222, 223, 263, 273, 327, 330, 509, 517, 518, 558, 574, 610, 618, 667, 681, 684, 749, 750, 753, 754, 760, 762, 766, 767, 768, 776, 782, 785, 787, 788, 804, 805, 806, 807, 808, 811, 812, 813, 814, 820, 821, 824, 829, 841, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 872, 873], "float32": [9, 10, 71, 72, 115, 123, 186, 190, 191, 195, 196, 197, 198, 199, 207, 749, 750, 753], "float64": [9, 10, 123, 186, 192, 195, 196, 198, 207], "true": [9, 10, 15, 16, 37, 38, 43, 44, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 115, 117, 118, 122, 123, 125, 128, 130, 131, 132, 133, 156, 157, 164, 165, 167, 176, 186, 192, 195, 196, 197, 198, 199, 223, 242, 259, 263, 264, 273, 274, 276, 280, 281, 282, 284, 288, 289, 290, 291, 293, 295, 297, 301, 302, 303, 305, 307, 309, 311, 313, 314, 315, 317, 319, 321, 323, 325, 327, 329, 331, 333, 334, 335, 337, 341, 342, 345, 346, 349, 350, 351, 354, 355, 356, 358, 362, 363, 364, 366, 370, 371, 372, 374, 376, 378, 379, 380, 382, 383, 384, 386, 387, 388, 390, 391, 392, 394, 395, 396, 398, 399, 400, 402, 404, 406, 408, 410, 412, 414, 416, 418, 420, 422, 424, 426, 428, 430, 431, 432, 434, 435, 436, 438, 442, 444, 446, 447, 449, 451, 453, 455, 457, 459, 461, 463, 465, 467, 469, 471, 473, 475, 477, 479, 481, 483, 485, 487, 489, 491, 492, 494, 497, 499, 500, 503, 504, 505, 507, 509, 510, 511, 512, 513, 514, 517, 518, 519, 520, 522, 523, 527, 534, 536, 544, 545, 552, 567, 573, 575, 578, 579, 582, 583, 584, 585, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 605, 610, 618, 623, 624, 631, 633, 635, 644, 649, 651, 652, 654, 655, 656, 657, 659, 660, 661, 662, 664, 665, 666, 667, 668, 670, 672, 673, 675, 677, 679, 681, 683, 685, 687, 689, 691, 693, 695, 697, 699, 701, 703, 705, 706, 707, 709, 711, 713, 715, 717, 719, 721, 723, 725, 727, 728, 729, 730, 731, 732, 741, 742, 744, 750, 752, 754, 755, 760, 761, 763, 766, 767, 768, 770, 771, 772, 773, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 790, 792, 794, 795, 796, 798, 799, 800, 802, 803, 804, 806, 807, 808, 810, 811, 812, 814, 815, 816, 818, 819, 820, 821, 823, 824, 825, 827, 828, 850, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871], "arraywithdevic": [11, 130], "devic": [12, 60, 64, 65, 74, 93, 94, 109, 112, 113, 118, 120, 123, 130, 131, 145, 167, 168, 169, 170, 171, 172, 174, 175, 176, 177, 179, 180, 181, 182, 183, 184, 185, 225, 226, 227, 228, 229, 230, 232, 233, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 509, 537, 538, 558, 561, 562, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 839, 840, 841, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 870, 872, 873], "arraywithelementwis": [13, 110, 121], "ab": [13, 14, 75, 76, 117, 120, 273, 459, 462, 623, 649, 829], "out": [13, 14, 23, 24, 25, 26, 27, 28, 29, 30, 37, 38, 39, 40, 41, 42, 59, 60, 61, 64, 65, 66, 67, 75, 76, 77, 78, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 99, 100, 101, 102, 103, 104, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 127, 128, 130, 131, 132, 133, 144, 156, 158, 159, 160, 161, 162, 163, 167, 168, 170, 171, 172, 174, 175, 180, 181, 182, 183, 184, 185, 186, 192, 194, 223, 268, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 521, 522, 523, 524, 526, 527, 528, 531, 532, 533, 535, 537, 538, 545, 558, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 765, 766, 767, 768, 770, 771, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 850, 858], "aco": [13, 14, 75, 76, 273, 282, 829], "acosh": [13, 14, 75, 76, 186, 207, 208, 273, 829], "add": [13, 14, 43, 44, 64, 65, 66, 67, 75, 76, 77, 78, 105, 106, 108, 109, 110, 112, 113, 114, 118, 119, 121, 122, 126, 128, 130, 145, 273, 290, 420, 510, 514, 749, 750, 753, 829, 835, 864, 865], "x2": [13, 14, 15, 16, 23, 24, 64, 65, 75, 76, 77, 78, 85, 86, 115, 126, 186, 218, 223, 261, 273, 286, 287, 288, 289, 290, 303, 304, 305, 306, 311, 312, 313, 314, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 347, 348, 349, 350, 351, 352, 353, 354, 355, 363, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 396, 397, 398, 399, 400, 401, 402, 403, 420, 421, 422, 423, 424, 425, 426, 427, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 451, 452, 453, 454, 459, 460, 461, 462, 463, 464, 465, 466, 491, 492, 493, 494, 495, 509, 510, 511, 512, 513, 514, 610, 615, 623, 625, 631, 632, 633, 634, 639, 643, 646, 648, 766, 770], "y": [13, 14, 15, 16, 27, 28, 66, 67, 75, 76, 77, 78, 89, 90, 93, 94, 113, 115, 119, 122, 128, 130, 156, 158, 159, 160, 161, 162, 163, 167, 174, 175, 178, 180, 181, 185, 186, 192, 223, 243, 257, 261, 266, 273, 286, 287, 288, 290, 291, 294, 302, 303, 306, 307, 311, 314, 315, 318, 327, 330, 331, 334, 335, 336, 337, 338, 339, 343, 355, 360, 368, 379, 380, 383, 420, 440, 441, 447, 450, 467, 470, 483, 486, 487, 490, 496, 497, 498, 499, 504, 509, 510, 511, 512, 513, 514, 517, 518, 526, 527, 534, 535, 537, 567, 573, 574, 575, 579, 586, 610, 616, 617, 619, 623, 624, 625, 626, 630, 639, 646, 647, 651, 652, 655, 657, 660, 662, 665, 667, 668, 669, 670, 671, 672, 673, 676, 681, 684, 685, 688, 693, 696, 697, 700, 701, 702, 703, 704, 705, 706, 715, 718, 754, 755, 756, 757, 758, 759, 760, 762, 765, 766, 767, 768, 769, 770, 771, 773, 776, 777, 780, 787, 788, 791, 792, 795, 808, 811, 812, 815, 820, 821, 824], "4": [13, 14, 27, 28, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 111, 115, 119, 122, 128, 130, 131, 132, 133, 156, 158, 159, 161, 167, 175, 178, 181, 185, 186, 195, 197, 198, 199, 223, 245, 261, 273, 286, 287, 288, 290, 291, 294, 302, 303, 306, 307, 311, 314, 331, 334, 335, 337, 338, 343, 355, 368, 379, 380, 383, 420, 440, 441, 447, 450, 467, 470, 483, 486, 487, 490, 496, 497, 499, 504, 509, 518, 527, 536, 537, 573, 610, 613, 614, 615, 617, 620, 622, 623, 625, 626, 627, 630, 637, 639, 646, 647, 651, 662, 665, 667, 668, 669, 670, 671, 672, 673, 676, 681, 684, 685, 688, 693, 696, 697, 700, 701, 703, 704, 705, 706, 715, 718, 749, 750, 753, 754, 755, 756, 758, 765, 766, 767, 768, 769, 770, 771, 772, 773, 776, 777, 780, 787, 788, 791, 792, 795, 815, 820, 821, 824, 829, 866, 867, 868, 869, 871], "5": [13, 14, 15, 16, 27, 28, 66, 67, 71, 72, 75, 76, 89, 90, 93, 94, 109, 111, 115, 119, 126, 130, 131, 132, 156, 158, 159, 161, 167, 175, 178, 181, 184, 185, 186, 195, 197, 198, 199, 223, 245, 261, 273, 286, 287, 288, 290, 291, 294, 302, 307, 310, 311, 314, 327, 330, 331, 334, 335, 336, 337, 338, 343, 355, 368, 379, 380, 383, 420, 440, 441, 447, 450, 467, 470, 483, 486, 487, 490, 496, 497, 499, 500, 504, 509, 510, 511, 518, 527, 537, 573, 610, 613, 615, 616, 622, 623, 624, 625, 626, 627, 630, 639, 646, 647, 651, 662, 665, 667, 668, 669, 670, 671, 672, 673, 676, 681, 684, 685, 688, 693, 696, 697, 700, 701, 703, 704, 705, 706, 715, 718, 749, 750, 753, 754, 755, 756, 757, 758, 765, 766, 768, 769, 770, 771, 772, 773, 776, 777, 780, 787, 788, 791, 792, 795, 815, 820, 821, 824, 850, 861], "6": [13, 14, 27, 28, 66, 67, 75, 76, 93, 94, 111, 115, 119, 122, 130, 131, 132, 156, 158, 159, 161, 167, 175, 223, 245, 261, 273, 286, 287, 288, 290, 291, 294, 311, 314, 315, 318, 331, 334, 335, 336, 337, 338, 343, 355, 368, 379, 380, 383, 420, 440, 441, 447, 450, 467, 470, 483, 486, 487, 490, 496, 509, 518, 527, 537, 573, 610, 613, 616, 617, 622, 623, 625, 626, 627, 639, 644, 646, 651, 652, 655, 662, 665, 667, 668, 669, 671, 673, 676, 681, 684, 685, 688, 693, 696, 697, 700, 701, 704, 706, 715, 718, 749, 750, 753, 754, 755, 756, 757, 758, 766, 767, 770, 771, 772, 773, 787, 788, 791, 792, 795, 815], "z": [13, 14, 66, 67, 75, 76, 115, 119, 122, 128, 130, 223, 257, 273, 286, 287, 288, 290, 311, 314, 331, 334, 355, 379, 380, 383, 420, 440, 441, 509, 517, 518, 537, 567, 623, 625, 651, 652, 655, 657, 660, 667, 668, 671, 766, 767, 787, 788, 791, 792, 795, 815], "7": [13, 14, 27, 28, 66, 67, 75, 76, 93, 94, 109, 111, 115, 118, 122, 125, 156, 158, 159, 223, 245, 273, 286, 287, 288, 290, 311, 314, 315, 318, 331, 334, 335, 338, 343, 355, 360, 368, 379, 380, 383, 420, 440, 441, 467, 470, 483, 486, 496, 509, 518, 527, 537, 579, 581, 582, 584, 592, 594, 610, 616, 617, 622, 623, 625, 626, 627, 639, 646, 651, 652, 655, 657, 660, 662, 665, 667, 668, 669, 671, 681, 684, 685, 688, 693, 696, 706, 715, 718, 749, 750, 753, 754, 755, 756, 757, 758, 759, 760, 762, 766, 770, 771, 772, 787, 788, 791, 815], "9": [13, 14, 27, 28, 66, 67, 75, 76, 79, 80, 93, 94, 111, 115, 131, 132, 273, 286, 287, 288, 290, 311, 314, 315, 318, 420, 440, 441, 467, 470, 483, 486, 487, 490, 509, 537, 579, 581, 582, 583, 584, 585, 592, 593, 594, 595, 610, 613, 616, 617, 623, 625, 626, 627, 639, 644, 646, 667, 668, 669, 671, 685, 688, 693, 696, 701, 704, 706, 754, 755, 756, 757, 758, 766, 770, 771, 772, 787, 788, 791, 815, 866, 867, 868], "asin": [13, 14, 75, 76, 273, 829], "asinh": [13, 14, 75, 76, 273, 829], "atan": [13, 14, 75, 76, 273, 307, 829], "atan2": [13, 14, 75, 76, 273, 829], "atanh": [13, 14, 75, 76, 273, 829], "bitwise_and": [13, 14, 75, 76, 273], "bitwise_invert": [13, 14, 75, 76, 273], "bitwise_left_shift": [13, 14, 75, 76, 273], "bitwise_or": [13, 14, 75, 76, 273], "bitwise_right_shift": [13, 14, 75, 76, 273], "bitwise_xor": [13, 14, 75, 76, 273], "ceil": [13, 14, 75, 76, 167, 168, 273, 829], "0": [13, 14, 15, 16, 27, 28, 29, 30, 39, 40, 45, 49, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 109, 113, 114, 115, 128, 130, 131, 132, 133, 156, 158, 159, 160, 161, 162, 163, 167, 168, 172, 176, 177, 181, 182, 183, 184, 185, 186, 192, 195, 197, 198, 199, 206, 223, 225, 228, 232, 235, 239, 242, 243, 245, 248, 249, 250, 251, 252, 253, 254, 255, 257, 261, 264, 266, 267, 271, 273, 274, 277, 278, 281, 282, 285, 286, 290, 291, 294, 295, 298, 299, 302, 303, 306, 307, 310, 311, 314, 319, 322, 327, 330, 331, 334, 335, 336, 337, 338, 339, 342, 343, 346, 355, 360, 364, 367, 368, 379, 380, 383, 404, 407, 408, 411, 416, 419, 420, 440, 441, 442, 445, 447, 450, 459, 462, 463, 466, 467, 470, 471, 474, 475, 478, 479, 482, 483, 486, 487, 490, 496, 497, 498, 499, 500, 504, 505, 508, 509, 510, 511, 512, 513, 514, 517, 518, 521, 522, 524, 526, 527, 528, 534, 537, 538, 543, 552, 558, 561, 562, 567, 573, 574, 575, 579, 581, 582, 583, 584, 585, 592, 593, 594, 595, 596, 597, 598, 599, 610, 611, 613, 615, 616, 617, 622, 623, 624, 625, 626, 627, 630, 644, 646, 647, 649, 651, 652, 655, 657, 660, 662, 665, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 688, 689, 692, 693, 696, 701, 702, 703, 704, 705, 706, 707, 710, 711, 712, 713, 714, 715, 718, 723, 725, 731, 743, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 775, 776, 777, 780, 787, 788, 791, 792, 795, 796, 799, 808, 809, 810, 811, 812, 815, 816, 817, 818, 819, 820, 821, 824, 829, 841, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 872, 873], "co": [13, 14, 60, 75, 76, 128, 144, 273, 281, 282, 346, 509, 536, 829], "cosh": [13, 14, 75, 76, 273, 281, 282, 829], "divid": [13, 14, 64, 65, 75, 76, 115, 121, 273, 350, 371, 372, 375, 509, 569, 667, 706], "equal": [13, 14, 64, 65, 75, 76, 115, 122, 123, 167, 172, 174, 175, 186, 192, 273, 319, 322, 327, 330, 380, 384, 387, 388, 391, 459, 462, 467, 470, 509, 510, 513, 517, 518, 623, 627, 637, 640, 667, 668, 671, 677, 680, 706, 723, 726, 754, 760, 762, 771, 772, 773, 775, 776, 777, 780, 782, 785, 787, 796, 799, 808, 811, 812, 816, 819], "erf": [13, 14, 75, 76, 273], "exp": [13, 14, 75, 76, 273, 289, 363, 364, 367, 420, 423, 829], "expm1": [13, 14, 75, 76, 273], "floor": [13, 14, 75, 76, 273, 327, 330, 372, 509, 535, 829], "floor_divid": [13, 14, 75, 76, 273], "greater": [13, 14, 64, 65, 75, 76, 273, 278, 291, 294, 303, 306, 319, 322, 327, 330, 350, 355, 368, 371, 372, 375, 380, 459, 462, 463, 466, 471, 474, 505, 508, 623, 625, 667, 707, 710, 754, 760, 762], "greater_equ": [13, 14, 75, 76, 273], "isfinit": [13, 14, 75, 76, 273], "isinf": [13, 14, 75, 76, 273], "isnan": [13, 14, 75, 76, 273], "less": [13, 14, 60, 64, 65, 75, 76, 109, 115, 122, 126, 127, 128, 273, 278, 281, 282, 285, 291, 294, 303, 306, 335, 338, 342, 346, 404, 407, 408, 411, 416, 419, 459, 462, 463, 466, 471, 474, 483, 486, 623, 637, 640, 649, 754, 760, 762, 787, 816, 819], "less_equ": [13, 14, 75, 76, 273], "log": [13, 14, 75, 76, 108, 109, 118, 122, 125, 128, 131, 167, 177, 273, 289, 363, 412, 415, 420, 423, 623, 642, 829], "log10": [13, 14, 75, 76, 273], "log1p": [13, 14, 75, 76, 273], "log2": [13, 14, 75, 76, 273], "logaddexp": [13, 14, 75, 76, 273], "logical_and": [13, 14, 75, 76, 273, 829], "logical_not": [13, 14, 75, 76, 273, 829], "logical_or": [13, 14, 75, 76, 273, 829], "logical_xor": [13, 14, 75, 76, 273], "multipli": [13, 14, 75, 76, 115, 119, 121, 273, 509, 527], "neg": [13, 14, 75, 76, 118, 122, 125, 156, 158, 167, 168, 172, 273, 384, 387, 388, 391, 442, 445, 459, 462, 463, 466, 623, 644, 648, 649, 667, 685, 688, 701, 704, 820, 821, 824, 825, 828], "not_equ": [13, 14, 75, 76, 273], "pow": [13, 14, 75, 76, 273], "remaind": [13, 14, 64, 65, 75, 76, 273, 509, 535, 667, 706], "round": [13, 14, 59, 60, 61, 75, 76, 108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 128, 130, 131, 132, 133, 144, 273, 286, 335, 338, 350, 368, 371, 372, 375, 442, 445, 483, 486, 505, 508, 829], "sign": [13, 14, 60, 75, 76, 108, 129, 133, 167, 168, 273, 274, 277, 286, 303, 306, 327, 330, 442, 445, 463, 466, 623, 642, 771, 772, 773, 775, 787, 804, 807, 812], "sin": [13, 14, 75, 76, 121, 128, 273, 509, 536, 829], "sinh": [13, 14, 75, 76, 273, 829], "sqrt": [13, 14, 75, 76, 273, 623, 649], "squar": [13, 14, 75, 76, 273, 483, 486, 610, 613, 623, 624, 626, 628, 629, 630, 636, 642, 643, 644], "subtract": [13, 14, 75, 76, 115, 121, 273], "tan": [13, 14, 75, 76, 114, 118, 122, 125, 126, 128, 273, 291, 294, 302, 307, 497, 504, 771, 772, 773, 776, 777, 780, 829], "56": [13, 14, 75, 76, 115, 273, 302, 307, 483, 486, 496, 497, 498, 499, 504, 623, 639, 787, 788, 791, 815], "19": [13, 14, 75, 76, 115, 273, 302, 307, 331, 334, 496, 497, 498, 499, 504, 623, 627], "tanh": [13, 14, 75, 76, 128, 156, 273, 302, 307, 829], "trunc": [13, 14, 75, 76, 273], "elementwis": [14, 64, 65, 76, 113, 118, 128, 133, 274, 277, 278, 281, 282, 285, 286, 289, 291, 294, 295, 298, 299, 302, 303, 306, 307, 310, 311, 314, 315, 318, 319, 322, 323, 326, 327, 330, 331, 334, 335, 338, 339, 342, 343, 346, 347, 350, 352, 355, 356, 359, 360, 363, 364, 367, 368, 371, 372, 375, 376, 379, 380, 383, 384, 387, 388, 391, 392, 395, 396, 399, 400, 403, 404, 407, 408, 411, 412, 415, 416, 419, 420, 423, 424, 427, 428, 431, 432, 435, 436, 439, 440, 441, 442, 445, 447, 450, 451, 454, 455, 458, 459, 462, 463, 466, 467, 470, 471, 474, 475, 478, 479, 482, 483, 486, 487, 490, 491, 495, 496, 500, 501, 504, 505, 508], "arraywithgener": [15, 130], "all_equ": [15, 16, 77, 78, 509, 514], "equality_matrix": [15, 16, 77, 78, 509, 510, 511, 512, 513, 514], "With": [15, 16, 60, 61, 64, 65, 66, 67, 75, 76, 77, 78, 89, 90, 93, 94, 108, 115, 117, 128, 156, 158, 159, 160, 161, 162, 163, 167, 178, 186, 195, 198, 223, 245, 261, 273, 286, 290, 291, 294, 302, 307, 311, 314, 331, 334, 335, 338, 343, 355, 368, 379, 380, 383, 420, 440, 441, 447, 450, 467, 470, 483, 486, 487, 490, 496, 497, 504, 509, 510, 511, 512, 513, 514, 518, 526, 527, 534, 537, 573, 574, 575, 610, 613, 616, 617, 622, 623, 624, 625, 626, 627, 635, 646, 651, 652, 655, 662, 665, 667, 668, 671, 672, 681, 684, 685, 688, 693, 696, 701, 704, 705, 706, 715, 718, 749, 750, 753, 754, 755, 756, 758, 759, 760, 762, 766, 767, 768, 769, 770, 771, 772, 773, 776, 777, 780, 787, 788, 791, 815, 820, 821, 824], "x1": [15, 16, 75, 76, 77, 78, 115, 126, 186, 218, 223, 261, 273, 286, 289, 290, 303, 306, 311, 314, 319, 322, 323, 326, 327, 330, 331, 334, 347, 350, 351, 352, 355, 363, 371, 372, 375, 376, 379, 380, 383, 396, 399, 400, 403, 420, 423, 424, 427, 432, 435, 436, 439, 440, 441, 442, 445, 446, 451, 454, 459, 462, 463, 466, 491, 492, 495, 509, 510, 511, 512, 513, 514, 517, 610, 615, 623, 625, 631, 634, 639, 643, 646, 648, 766, 770], "mix": [15, 16, 66, 67, 112, 115, 117, 128, 186, 214, 223, 261, 273, 286, 311, 314, 331, 334, 355, 379, 380, 383, 440, 441, 509, 510, 511, 526, 534, 537, 573, 574, 575, 610, 613, 616, 617, 622, 623, 646, 651, 652, 655, 662, 665, 667, 668, 671, 749, 750, 753, 766, 770, 787, 788, 791, 796, 799, 815], "native_arrai": [15, 16, 45, 51, 57, 66, 67, 77, 78, 156, 158, 159, 160, 161, 162, 163, 167, 178, 186, 195, 198, 223, 245, 261, 273, 291, 294, 311, 314, 331, 334, 335, 338, 355, 368, 379, 380, 383, 440, 441, 447, 450, 483, 486, 487, 490, 509, 510, 511, 512, 513, 514, 518, 526, 527, 534, 537, 573, 574, 575, 610, 613, 616, 617, 622, 623, 625, 626, 627, 646, 651, 652, 655, 662, 665, 667, 668, 671, 681, 684, 685, 688, 693, 696, 706, 715, 718, 749, 750, 753, 754, 755, 766, 767, 768, 769, 770, 771, 772, 773, 787, 788, 791, 792, 795, 815, 820, 821, 824], "gener": [16, 43, 44, 64, 65, 78, 105, 106, 109, 110, 111, 112, 113, 114, 115, 118, 121, 122, 123, 124, 125, 126, 127, 128, 130, 132, 133, 144, 145, 164, 167, 168, 176, 177, 186, 195, 198, 273, 291, 294, 331, 334, 335, 338, 343, 368, 463, 466, 483, 486, 487, 490, 510, 513, 515, 516, 517, 518, 519, 520, 521, 522, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 591, 667, 681, 684, 701, 704, 754, 755, 756, 757, 760, 762, 764, 771, 772, 773, 776, 777, 780, 787, 792, 795, 829, 866, 870], "arraywithgradi": [17, 130], "gradient": [18, 64, 65, 80, 113, 122, 131, 132, 144, 145, 223, 267, 581, 582, 584, 586, 587, 589, 591, 592, 594, 596, 598, 600, 602, 604, 605, 606, 607, 608, 609, 727, 728, 729, 730, 829, 866, 867, 868, 869, 870, 871], "arraywithimag": [19, 130], "imag": [20, 82, 108, 111, 113, 128, 129, 131, 133, 144, 610, 611, 612, 613, 614, 616, 617, 829], "arraywithlay": 21, "layer": [22, 59, 84, 113, 114, 128, 129, 132, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 749, 750, 753, 829, 841, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 870, 872, 873], "linear_algebra": [23, 24, 85, 86, 113, 130, 623, 624, 625, 626, 627, 628, 629, 630, 631, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650], "arraywithlinearalgebra": 23, "matmul": [23, 24, 85, 86, 113, 119, 128, 623, 644, 829], "arraywithloss": 25, "binary_cross_entropi": [25, 26, 87, 88, 651], "pred": [25, 26, 87, 88, 118, 122, 125, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666], "epsilon": [25, 26, 29, 30, 79, 80, 87, 88, 91, 92, 118, 122, 125, 132, 579, 581, 582, 583, 584, 585, 592, 593, 594, 595, 623, 637, 640, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 749, 750, 751, 752, 753, 864, 865, 866, 867, 868], "1e": [25, 26, 29, 30, 79, 80, 87, 88, 91, 92, 118, 122, 125, 132, 133, 509, 541, 579, 581, 582, 583, 584, 585, 592, 593, 594, 595, 623, 644, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 749, 750, 751, 752, 753, 829, 866, 867, 868, 869, 871], "07": [25, 26, 79, 80, 87, 88, 132, 579, 581, 582, 583, 584, 585, 592, 593, 594, 595, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 866, 867, 868], "cross_entropi": [25, 26, 87, 88, 118, 122, 125, 651, 662, 665], "axi": [25, 26, 27, 28, 37, 38, 39, 40, 41, 42, 64, 65, 87, 88, 89, 90, 99, 100, 101, 102, 103, 104, 115, 118, 122, 123, 125, 126, 128, 130, 133, 144, 156, 161, 167, 176, 177, 223, 225, 228, 235, 248, 249, 250, 251, 252, 253, 254, 255, 267, 509, 527, 528, 537, 577, 623, 625, 627, 648, 649, 651, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 673, 674, 675, 676, 677, 680, 681, 682, 683, 684, 685, 686, 687, 688, 693, 694, 695, 696, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 718, 719, 722, 723, 726, 754, 765, 766, 767, 768, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828], "sparse_cross_entropi": [25, 26, 87, 88, 651], "loss": [26, 88, 113, 118, 131, 132, 133, 652, 655, 657, 660, 662, 665, 829], "arraywithmanipul": 27, "clip": [27, 28, 64, 65, 89, 90, 118, 122, 125, 128, 131, 133, 273, 440, 441, 509, 521, 522, 524, 667, 672, 829], "x_min": [27, 28, 64, 65, 89, 90, 128, 133, 667, 668, 669, 670, 671, 672], "x_max": [27, 28, 64, 65, 89, 90, 128, 133, 667, 668, 669, 670, 671, 672], "roll": [27, 28, 89, 90, 122, 126, 667, 668, 669, 705], "8": [27, 28, 66, 67, 75, 76, 93, 94, 108, 111, 115, 122, 127, 131, 156, 160, 223, 245, 273, 286, 290, 311, 314, 335, 338, 343, 355, 379, 380, 383, 420, 440, 441, 467, 470, 483, 486, 487, 490, 509, 518, 537, 610, 617, 623, 625, 626, 627, 639, 646, 651, 652, 655, 667, 668, 669, 671, 685, 688, 693, 696, 706, 754, 755, 756, 757, 758, 766, 770, 771, 772, 787, 788, 791, 815, 829, 850, 861], "concat": [27, 28, 64, 65, 89, 90, 223, 252, 253, 254, 255, 267, 509, 536, 667, 829], "xs": [27, 28, 89, 90, 122, 223, 246, 250, 252, 253, 254, 509, 510, 513, 518, 579, 586, 667, 673, 674, 675, 676], "constant_pad": [27, 28, 89, 90, 667], "pad_width": [27, 28, 89, 90, 667, 677, 678, 679, 680, 723, 724, 725, 726], "valu": [27, 28, 64, 65, 66, 67, 68, 89, 90, 109, 115, 117, 118, 122, 123, 124, 125, 126, 128, 130, 133, 145, 167, 168, 172, 174, 175, 176, 177, 186, 192, 201, 202, 203, 223, 235, 266, 267, 273, 274, 277, 278, 286, 291, 294, 299, 335, 338, 350, 352, 355, 356, 359, 368, 371, 372, 375, 376, 379, 380, 383, 396, 399, 400, 403, 440, 441, 442, 445, 451, 454, 455, 458, 459, 462, 467, 470, 505, 508, 509, 521, 522, 524, 525, 530, 536, 537, 538, 543, 546, 550, 560, 561, 562, 563, 564, 565, 578, 579, 581, 582, 584, 586, 592, 594, 605, 609, 610, 611, 612, 613, 614, 615, 616, 617, 620, 621, 622, 623, 637, 640, 641, 642, 643, 644, 645, 649, 667, 668, 671, 677, 678, 679, 680, 693, 696, 697, 700, 723, 725, 726, 727, 728, 729, 731, 735, 736, 737, 738, 739, 744, 747, 748, 749, 750, 753, 754, 755, 756, 757, 759, 760, 762, 764, 766, 767, 768, 770, 771, 772, 773, 774, 775, 776, 777, 780, 782, 785, 787, 792, 795, 796, 799, 800, 803, 804, 807, 808, 811, 812, 816, 819, 850, 851, 852, 853, 854, 855, 856, 857, 861, 862, 863, 864, 865, 866, 867, 868, 870], "expand_dim": [27, 28, 89, 90, 128, 131, 667, 829], "flip": [27, 28, 89, 90, 130, 131, 133, 273, 315, 318, 667, 693, 696, 829], "permute_dim": [27, 28, 89, 90, 667], "ax": [27, 28, 64, 65, 89, 90, 113, 115, 123, 130, 223, 267, 509, 527, 623, 635, 643, 646, 649, 667, 677, 680, 685, 688, 689, 690, 691, 692, 701, 704, 707, 710, 715, 718, 723, 726, 766, 767, 768, 787, 792, 795, 796, 799, 800, 803, 804, 807, 808, 811, 812, 816, 819, 820, 821, 824, 825, 828], "repeat": [27, 28, 64, 65, 89, 90, 109, 114, 115, 119, 121, 122, 509, 533, 667, 719, 722], "reshap": [27, 28, 64, 65, 89, 90, 125, 128, 130, 133, 667, 829], "shape": [27, 28, 64, 65, 89, 90, 93, 94, 109, 113, 114, 115, 123, 124, 125, 126, 128, 130, 131, 132, 133, 156, 159, 167, 170, 171, 174, 175, 178, 180, 181, 182, 183, 184, 185, 186, 192, 193, 194, 223, 235, 263, 268, 273, 274, 277, 278, 281, 282, 285, 286, 289, 291, 294, 295, 298, 299, 303, 306, 311, 314, 315, 318, 319, 322, 323, 326, 327, 330, 331, 334, 335, 338, 339, 342, 343, 346, 355, 360, 363, 364, 367, 368, 379, 380, 383, 384, 387, 388, 391, 392, 395, 396, 399, 404, 407, 408, 411, 412, 415, 416, 419, 420, 423, 424, 427, 428, 431, 432, 435, 436, 439, 442, 445, 447, 450, 451, 454, 459, 462, 463, 466, 467, 470, 471, 474, 475, 478, 479, 482, 483, 486, 487, 490, 491, 495, 496, 509, 522, 524, 535, 538, 542, 558, 561, 562, 568, 610, 612, 613, 614, 616, 617, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 634, 637, 638, 639, 640, 641, 643, 644, 645, 647, 648, 651, 652, 655, 657, 660, 662, 665, 667, 668, 671, 673, 676, 677, 680, 681, 684, 685, 688, 689, 692, 693, 696, 697, 698, 699, 700, 701, 704, 706, 707, 710, 711, 714, 715, 718, 723, 726, 754, 756, 757, 758, 759, 760, 762, 763, 766, 767, 769, 776, 777, 780, 782, 785, 787, 788, 791, 815, 820, 821, 824, 825, 828, 829, 850, 852, 853, 854, 855, 856, 857, 864, 865], "shift": [27, 28, 89, 90, 115, 126, 273, 319, 322, 327, 330, 667, 701, 702, 703, 704, 705], "squeez": [27, 28, 89, 90, 667, 829], "stack": [27, 28, 64, 65, 89, 90, 128, 167, 182, 183, 623, 626, 627, 628, 629, 630, 631, 634, 636, 637, 638, 640, 641, 644, 645, 647, 667, 731, 732, 741, 742, 829, 850, 859], "swapax": [27, 28, 89, 90, 667], "axis0": [27, 28, 89, 90, 667, 715, 716, 717, 718], "axis1": [27, 28, 89, 90, 623, 627, 667, 715, 716, 717, 718], "tile": [27, 28, 89, 90, 667, 829], "rep": [27, 28, 89, 90, 667, 719, 720, 721, 722], "zero_pad": [27, 28, 89, 90, 667, 829], "manipul": [28, 59, 90, 113, 133, 144, 668, 671, 673, 676, 677, 680, 681, 684, 685, 688, 689, 692, 693, 696, 697, 700, 701, 704, 706, 707, 710, 711, 714, 715, 718, 719, 722, 723, 726], "arraywithnorm": 29, "layer_norm": [29, 30, 91, 92, 749], "normalized_idx": [29, 30, 91, 92, 749, 750, 751, 752, 753], "05": [29, 30, 91, 92, 223, 749, 750, 751, 752, 753], "scale": [29, 30, 91, 92, 122, 223, 265, 266, 579, 596, 598, 610, 618, 621, 622, 749, 750, 751, 752, 753, 850, 858, 861, 866, 869], "offset": [29, 30, 91, 92, 623, 627, 647, 749, 750, 751, 752, 753], "new_std": [29, 30, 91, 92, 749, 750, 751, 752, 753, 864, 865], "norm": [30, 64, 65, 92, 113, 509, 521, 522, 524, 623, 635, 649, 750, 753, 829, 865, 866, 868], "arraywithrandom": [31, 130], "random": [32, 64, 65, 94, 113, 124, 133, 144, 755, 756, 757, 759, 760, 762, 764, 765, 829], "arraywithsearch": 33, "arraywithset": 35, "arraywithsort": 37, "argsort": [37, 38, 99, 100, 776], "descend": [37, 38, 99, 100, 623, 644, 645, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786], "stabl": [37, 38, 99, 100, 108, 128, 145, 509, 540, 541, 563, 564, 569, 570, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786], "sort": [38, 64, 65, 66, 67, 68, 100, 113, 623, 628, 644, 645, 777, 780], "arraywithstatist": 39, "einsum": [39, 40, 101, 102, 787], "equat": [39, 40, 101, 102, 623, 643, 787, 788, 789, 790, 791, 815], "max": [39, 40, 64, 65, 101, 102, 186, 206, 209, 273, 440, 509, 521, 522, 524, 532, 561, 562, 623, 637, 640, 787, 866, 868], "keepdim": [39, 40, 41, 42, 64, 65, 101, 102, 103, 104, 509, 577, 623, 635, 649, 766, 767, 768, 787, 788, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828], "mean": [39, 40, 64, 65, 101, 102, 105, 106, 108, 109, 112, 115, 118, 122, 123, 124, 125, 128, 130, 131, 132, 133, 144, 145, 223, 252, 253, 254, 255, 267, 509, 532, 727, 728, 729, 730, 731, 737, 754, 759, 771, 772, 787, 829, 841], "min": [39, 40, 64, 65, 101, 102, 186, 206, 209, 273, 441, 509, 532, 561, 562, 569, 623, 641, 644, 645, 649, 787], "prod": [39, 40, 64, 65, 101, 102, 115, 123, 509, 532, 787], "std": [39, 40, 101, 102, 115, 754, 759, 771, 772, 787], "correct": [39, 40, 101, 102, 109, 110, 112, 118, 122, 123, 124, 126, 186, 218, 667, 668, 671, 787, 808, 809, 810, 811, 816, 817, 818, 819, 829], "sum": [39, 40, 64, 65, 101, 102, 118, 122, 123, 125, 128, 223, 252, 253, 254, 255, 267, 273, 286, 289, 363, 420, 423, 509, 528, 532, 561, 562, 610, 622, 623, 644, 647, 649, 787, 788, 791, 808, 811, 815], "var": [39, 40, 101, 102, 105, 106, 115, 128, 727, 728, 729, 787], "statist": [40, 102, 105, 106, 113, 123, 788, 791, 792, 795, 796, 799, 800, 803, 804, 807, 808, 811, 812, 815, 816, 819], "arraywithutil": 41, "util": [42, 104, 113, 124, 223, 256, 821, 824, 825, 828], "add_ivy_array_instance_method": 43, "cl": [43, 44, 105, 106], "modul": [43, 44, 45, 49, 50, 61, 64, 65, 66, 67, 68, 105, 106, 108, 111, 117, 118, 119, 121, 125, 128, 129, 131, 133, 144, 145, 509, 556, 754, 755, 759, 760, 762, 829, 836, 837, 838, 839, 840, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 864, 865, 872, 873], "to_ignor": [43, 44, 105, 106, 731, 742], "loop": [43, 44, 105, 106, 119, 145, 727, 728, 729, 730], "over": [43, 44, 45, 49, 59, 61, 64, 65, 105, 106, 108, 114, 115, 119, 125, 130, 145, 623, 635, 646, 648, 649, 749, 750, 753, 754, 760, 762, 787, 792, 795, 796, 799, 800, 803, 804, 807, 808, 811, 812, 816, 819, 820, 821, 824, 825, 828, 864, 865], "etc": [43, 44, 61, 64, 65, 105, 106, 108, 109, 110, 113, 115, 117, 121, 122, 123, 126, 128, 130, 131, 145, 167, 176, 177, 509, 537, 538, 558, 561, 562, 754, 755, 756, 757, 760, 762, 771, 772, 773, 775, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 870, 872, 873], "us": [43, 44, 45, 50, 57, 60, 61, 64, 65, 66, 67, 68, 105, 106, 107, 109, 110, 112, 113, 114, 115, 116, 117, 118, 119, 121, 122, 123, 124, 125, 126, 127, 128, 130, 132, 133, 144, 145, 156, 158, 159, 160, 161, 162, 163, 166, 186, 205, 223, 232, 233, 258, 262, 265, 266, 267, 268, 270, 272, 273, 291, 294, 311, 314, 331, 334, 343, 355, 368, 379, 380, 383, 440, 441, 447, 450, 467, 470, 483, 486, 509, 537, 540, 541, 555, 561, 562, 563, 564, 569, 570, 579, 581, 582, 584, 592, 594, 596, 598, 610, 616, 618, 619, 621, 622, 623, 626, 627, 635, 651, 652, 655, 667, 681, 684, 685, 688, 693, 696, 701, 704, 715, 718, 727, 728, 729, 730, 731, 732, 734, 740, 741, 742, 744, 749, 750, 753, 766, 767, 768, 769, 771, 772, 773, 787, 788, 791, 815, 820, 821, 824, 829, 850, 858, 861, 862, 863, 864, 865, 866, 868, 869], "_wrap_funct": [43, 44, 105, 106, 118, 120], "we": [43, 44, 45, 50, 51, 57, 58, 59, 60, 61, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 120, 121, 122, 123, 125, 126, 128, 129, 130, 131, 132, 133, 144, 145, 579, 586, 829, 835], "want": [43, 44, 45, 50, 60, 105, 106, 107, 108, 109, 117, 131, 132, 133, 145], "don": [43, 44, 61, 105, 106, 108, 109, 110, 123, 132, 145], "t": [43, 44, 45, 50, 60, 61, 105, 106, 108, 109, 110, 111, 115, 123, 128, 130, 131, 132, 133, 145, 509, 518, 610, 619, 620], "As": [43, 44, 59, 105, 106, 109, 117, 118, 121, 122, 123, 124, 125, 126, 128, 130, 131, 132, 145, 771, 772, 773, 775], "shown": [43, 44, 64, 65, 105, 106, 109, 115, 126, 128, 130, 145, 167, 178, 273, 311, 314, 331, 334, 343, 467, 470, 623, 626, 667, 681, 684, 685, 688, 771, 772, 773, 776, 777, 780], "appropri": [43, 44, 105, 106, 109, 120, 273, 286, 442, 445, 766, 767], "our": [43, 44, 59, 60, 105, 106, 107, 108, 109, 115, 122, 127, 130, 131, 132, 133, 145, 829], "toi": [43, 44, 105, 106], "arrayexampl": [43, 44], "import": [43, 44, 45, 49, 60, 105, 106, 110, 113, 114, 115, 119, 121, 122, 123, 124, 125, 128, 130, 131, 133, 145, 223, 264, 829, 835], "pass": [43, 44, 45, 49, 64, 65, 66, 67, 68, 105, 106, 110, 114, 115, 116, 117, 118, 119, 121, 122, 125, 126, 130, 145, 186, 200, 223, 232, 267, 273, 303, 306, 509, 520, 549, 579, 608, 727, 728, 729, 839, 840, 862, 863, 866, 870, 872, 873], "hasattr": [43, 44, 105, 106, 130], "relu": [43, 44, 66, 67, 131, 132, 156, 157, 158, 829], "softmax": [43, 44, 66, 67, 156, 610, 621, 622, 829], "backend_handl": [45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 829], "contextmanag": [45, 46], "object": [45, 64, 65, 66, 67, 68, 130, 133, 167, 173, 186, 206, 223, 268, 579, 731, 734, 736, 738, 739, 740, 745, 746, 747, 748, 754, 765, 841, 850, 851, 852, 853, 854, 855, 856, 857, 859, 860, 862, 863], "__init__": [45, 46, 49, 50, 64, 65, 66, 67, 68, 113, 119, 123, 128, 130, 131, 132, 133, 186, 187, 188, 189, 223, 224, 231, 232, 233, 234, 235, 236, 237, 238, 579, 580, 754, 755, 759, 760, 762, 829, 836, 837, 838, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873], "choose_random_backend": 45, "exclud": [45, 47, 115, 128, 167, 168, 754, 760, 762], "clear_backend_stack": 45, "current_backend": [45, 66, 67, 113, 118], "current": [45, 49, 50, 57, 61, 64, 65, 66, 67, 68, 108, 109, 110, 111, 118, 124, 128, 133, 144, 145, 186, 207, 208, 210, 222, 223, 232, 256, 257, 261, 263, 509, 539, 546, 550, 557, 559, 731, 732, 741, 742, 829], "prioriti": [45, 49, 64, 65, 109, 125], "global_backend": [45, 49], "which": [45, 49, 50, 59, 60, 61, 64, 65, 66, 67, 68, 108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 130, 131, 132, 133, 144, 145, 156, 161, 164, 165, 166, 167, 168, 169, 170, 171, 172, 174, 175, 176, 177, 179, 180, 181, 182, 183, 184, 185, 186, 195, 198, 200, 204, 206, 209, 210, 222, 223, 232, 233, 243, 248, 249, 250, 251, 252, 253, 254, 255, 257, 261, 263, 265, 266, 267, 273, 463, 466, 509, 515, 527, 528, 530, 537, 538, 539, 545, 549, 557, 558, 559, 561, 562, 577, 579, 582, 584, 586, 587, 589, 592, 594, 596, 598, 600, 602, 605, 607, 608, 610, 621, 623, 625, 627, 635, 643, 644, 648, 649, 651, 657, 660, 662, 665, 667, 673, 676, 685, 688, 693, 696, 701, 704, 706, 711, 714, 731, 736, 737, 738, 739, 744, 745, 746, 747, 748, 754, 755, 756, 757, 760, 762, 766, 767, 768, 769, 770, 771, 772, 773, 775, 776, 777, 780, 782, 785, 787, 792, 795, 796, 799, 800, 803, 804, 807, 808, 811, 812, 816, 819, 820, 821, 824, 825, 828, 829, 832, 834, 839, 840, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 870, 872, 873], "try": [45, 49, 58, 60, 61, 64, 65, 108, 109, 110, 111, 121, 122, 130, 145, 509, 576, 829], "infer": [45, 49, 112, 119, 123, 124, 128, 133, 164, 165, 167, 168, 169, 171, 174, 175, 179, 181, 185, 273, 376, 509, 542, 567, 667, 697, 700], "when": [45, 49, 59, 60, 64, 65, 66, 67, 68, 108, 109, 110, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 128, 130, 131, 133, 145, 186, 192, 223, 273, 286, 364, 367, 459, 462, 509, 520, 549, 570, 651, 652, 655, 657, 660, 662, 665, 731, 742, 766, 767, 768, 770, 787, 792, 795, 800, 803, 808, 811, 816, 819, 829, 862, 863], "global": [45, 49, 50, 51, 57, 64, 65, 66, 67, 68, 118, 119, 123, 124, 128, 186, 201, 202, 203, 223, 232, 233, 265, 266, 267, 509, 540, 541, 560, 563, 564, 565, 569, 570, 749, 750, 753, 864, 865], "numpi": [45, 49, 50, 51, 59, 60, 64, 65, 109, 110, 117, 119, 123, 124, 125, 126, 128, 130, 133, 509, 574, 787, 788, 791, 815, 829], "np": [45, 49, 121, 123, 124, 125, 126, 130, 131, 133, 829], "py": [45, 49, 50, 109, 113, 114, 118, 119, 123, 124, 126, 128, 130, 132, 133, 754, 755, 759, 760, 762], "noqa": [45, 49, 50, 167, 178, 186, 195, 198, 273, 286, 311, 314, 331, 334, 335, 338, 343, 467, 470, 483, 486, 487, 490, 496, 623, 626, 667, 681, 684, 685, 688, 701, 704, 787, 792, 795], "set_backend": [45, 49, 50, 57, 118, 119, 120, 123, 186, 207, 208, 223, 264, 509, 567, 829], "ha": [45, 49, 50, 59, 60, 61, 64, 65, 109, 114, 115, 118, 119, 120, 123, 124, 128, 130, 132, 133, 144, 145, 167, 178, 223, 242, 273, 274, 277, 442, 445, 459, 462, 623, 631, 634, 642, 643, 644, 647, 667, 681, 684, 707, 710, 771, 772, 773, 775, 787, 796, 799, 804, 807, 808, 811, 812, 816, 819], "jax": [45, 49, 50, 51, 60, 61, 109, 110, 119, 123, 124, 125, 126, 128, 130, 133, 145, 579, 591, 771, 772, 773, 775, 829], "get_backend": [45, 118, 119], "specifi": [45, 50, 64, 65, 112, 117, 118, 123, 124, 125, 126, 128, 131, 132, 133, 167, 168, 170, 174, 176, 177, 180, 182, 183, 184, 186, 192, 194, 223, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 257, 261, 263, 266, 267, 268, 273, 463, 466, 509, 515, 527, 537, 538, 544, 577, 623, 627, 635, 646, 647, 648, 649, 651, 652, 655, 657, 660, 662, 665, 667, 668, 671, 673, 676, 677, 680, 685, 688, 701, 704, 707, 710, 711, 714, 723, 726, 731, 736, 738, 739, 745, 746, 747, 748, 766, 767, 768, 771, 772, 773, 775, 776, 777, 780, 787, 788, 791, 804, 807, 812, 815, 820, 821, 824, 825, 828], "isn": [45, 50, 109, 131, 145], "associ": [45, 50, 109, 118, 120, 145, 273, 286, 442, 445, 623, 637, 640, 650], "retriev": [45, 50, 109, 509, 515], "i": [45, 50, 109, 111, 112, 128, 131, 133, 167, 168, 178, 273, 274, 277, 303, 306, 319, 322, 327, 330, 335, 338, 350, 368, 371, 372, 375, 384, 387, 440, 441, 447, 450, 459, 462, 463, 466, 509, 517, 518, 579, 582, 584, 587, 589, 592, 594, 596, 598, 600, 602, 623, 625, 631, 634, 637, 640, 643, 644, 647, 649, 667, 711, 714, 771, 772, 773, 775, 776, 777, 780, 782, 785, 787, 788, 791, 792, 795, 796, 799, 800, 803, 808, 811, 812, 815, 816, 819], "e": [45, 50, 60, 61, 107, 109, 111, 112, 122, 131, 145, 166, 167, 178, 186, 191, 214, 223, 239, 273, 274, 277, 303, 306, 319, 322, 327, 330, 335, 338, 350, 360, 368, 371, 372, 375, 384, 387, 404, 407, 412, 415, 440, 441, 447, 450, 459, 462, 463, 466, 579, 582, 584, 587, 589, 592, 594, 596, 598, 600, 602, 623, 625, 631, 634, 637, 640, 643, 644, 649, 667, 711, 714, 754, 759, 760, 762, 771, 772, 773, 775, 776, 777, 780, 782, 785, 787, 792, 795, 796, 799, 800, 803, 804, 807, 808, 811, 812, 816, 819], "one": [45, 50, 60, 61, 64, 65, 75, 76, 77, 78, 89, 90, 93, 94, 108, 109, 115, 118, 121, 122, 123, 125, 126, 127, 130, 131, 133, 145, 167, 168, 178, 186, 193, 195, 198, 223, 252, 253, 254, 255, 267, 290, 420, 509, 510, 512, 513, 514, 555, 558, 561, 562, 623, 631, 634, 635, 639, 641, 648, 649, 667, 668, 672, 681, 684, 685, 688, 701, 704, 705, 707, 710, 756, 758, 766, 767, 769, 771, 772, 773, 774, 775, 787, 788, 791, 815, 829], "torch": [45, 50, 57, 109, 113, 118, 119, 121, 122, 123, 124, 125, 126, 128, 130, 131, 132, 133, 145, 164, 165, 186, 207, 208, 223, 264, 509, 567, 667, 681, 684, 829], "tensorflow": [45, 50, 57, 60, 61, 109, 110, 123, 124, 125, 126, 128, 133, 145, 829], "mxnet": [45, 50, 60, 110, 123, 124, 125, 128, 133, 829], "either": [45, 50, 57, 64, 65, 108, 109, 111, 114, 115, 118, 119, 122, 123, 124, 128, 130, 131, 145, 167, 173, 273, 286, 289, 303, 306, 363, 388, 391, 404, 407, 408, 411, 416, 419, 420, 423, 442, 445, 463, 466, 471, 474, 475, 478, 496, 509, 530, 551, 555, 556, 623, 631, 634, 727, 728, 729, 730, 787, 804, 807, 812, 850, 861, 862, 863], "doesn": [45, 50, 108, 111, 115, 123, 128, 145], "matter": [45, 50, 59, 115], "been": [45, 50, 109, 114, 118, 119, 122, 123, 124, 126, 128, 144, 145, 223, 242, 509, 531, 532, 533, 754, 755], "ivy_np": [45, 50], "ivy_jax": [45, 50], "subsequ": [45, 51, 108, 115, 117, 118, 121, 125, 126, 132], "call": [45, 51, 57, 60, 66, 67, 111, 113, 114, 115, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 128, 130, 131, 132, 133, 145, 223, 267, 509, 560, 565, 576, 579, 586, 731, 732, 737, 741, 742, 850, 861, 862, 863, 866, 870], "ndarrai": [45, 51, 121, 123, 124, 125, 126, 130, 167, 169, 179, 509, 574], "Or": [45, 51, 131], "jaxlib": [45, 51, 108, 123, 124, 126, 130], "xla_extens": [45, 51, 123, 124, 126, 130], "devicearrai": [45, 51, 130], "try_import_ivy_jax": 45, "warn": [45, 52, 53, 54, 55, 56], "try_import_ivy_mxnet": 45, "try_import_ivy_numpi": 45, "try_import_ivy_tf": 45, "try_import_ivy_torch": 45, "unset_backend": [45, 119], "unset": [45, 57, 119, 128, 130], "adjust": [45, 57, 787, 808, 811, 816, 819], "previous": [45, 57, 108, 111, 117, 118, 128, 509, 520], "implement": [45, 57, 109, 110, 114, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 128, 130, 131, 132, 133, 144, 145, 186, 192, 214, 223, 268, 273, 274, 277, 278, 281, 282, 285, 291, 294, 295, 298, 299, 303, 306, 339, 342, 343, 346, 360, 364, 367, 404, 407, 408, 411, 412, 415, 416, 419, 442, 445, 459, 462, 463, 466, 475, 478, 479, 482, 496, 623, 628, 771, 772, 773, 775, 776, 777, 780, 782, 785, 787, 792, 795, 796, 799, 800, 803, 829], "wa": [45, 57, 60, 64, 65, 115, 128, 130, 509, 576, 731, 744, 787, 792, 795, 796, 799, 800, 803, 804, 807, 808, 811, 812, 816, 819, 820, 821, 824, 825, 828], "last": [45, 57, 61, 64, 65, 109, 115, 119, 145, 156, 161, 223, 242, 610, 620, 623, 625, 627, 635, 647, 648, 651, 657, 660, 662, 665, 667, 685, 688, 701, 704, 706, 711, 714, 776, 777, 780, 782, 785, 820, 821, 824, 825, 828, 850, 860], "henc": [45, 57, 771, 772, 773, 775], "here": [45, 57, 108, 109, 110, 113, 115, 122, 126, 128, 129, 130, 131, 132, 133, 144, 145], "tensor": [45, 57, 59, 64, 65, 113, 118, 119, 121, 123, 124, 125, 126, 128, 130, 131, 132, 133, 145, 167, 176, 177, 186, 204, 273, 311, 314, 440, 441, 509, 558, 561, 562, 610, 618, 620, 623, 646, 667, 681, 684, 697, 700, 706, 754, 755, 766, 769, 829, 850, 858, 860], "howev": [45, 57, 60, 108, 110, 114, 117, 118, 119, 121, 122, 123, 124, 125, 126, 130, 131, 132, 133, 145], "befor": [45, 57, 64, 65, 108, 109, 110, 114, 117, 121, 123, 124, 125, 128, 131, 145, 223, 267, 273, 505, 508, 610, 621, 622, 727, 728, 729, 731, 743, 771, 772, 773, 775, 787, 804, 807, 812], "becom": [45, 57, 59, 61, 109, 115, 122, 128, 133, 145, 667, 668, 671], "swap": [45, 57, 667, 715, 718], "python": [45, 57, 58, 59, 60, 108, 109, 111, 128, 130, 131, 145, 167, 168, 223, 262, 272, 273, 463, 466, 829, 835], "op": [45, 57, 113, 128, 145], "eagertensor": [45, 57], "def": [46, 110, 113, 115, 118, 122, 123, 124, 125, 126, 128, 130, 131, 132, 133, 187, 188, 189, 224, 231, 234, 580, 829, 842, 845, 848], "ml": [58, 60, 61, 107, 127, 128, 129, 131, 132, 133, 144, 829, 835], "explos": [58, 60, 829], "A": [58, 59, 60, 61, 64, 65, 66, 67, 68, 111, 112, 117, 118, 122, 123, 124, 128, 131, 145, 167, 172, 179, 223, 232, 233, 267, 273, 455, 458, 501, 509, 541, 573, 623, 639, 642, 643, 644, 667, 706, 711, 714, 731, 732, 734, 736, 738, 739, 740, 741, 742, 745, 746, 747, 748, 787, 788, 791, 815, 820, 821, 824, 825, 828, 829, 872, 873], "huge": [58, 60, 131, 829], "number": [58, 59, 64, 65, 66, 67, 68, 108, 115, 122, 124, 125, 128, 131, 133, 164, 165, 166, 167, 168, 169, 172, 176, 177, 178, 179, 186, 193, 205, 206, 209, 211, 212, 214, 223, 259, 260, 261, 273, 286, 303, 306, 335, 338, 350, 368, 371, 372, 375, 440, 441, 442, 445, 459, 462, 463, 466, 467, 470, 471, 474, 505, 508, 509, 510, 513, 536, 541, 542, 557, 575, 578, 610, 621, 623, 628, 637, 642, 644, 648, 667, 668, 671, 677, 680, 689, 692, 693, 696, 701, 704, 706, 711, 714, 719, 722, 723, 726, 727, 728, 729, 730, 754, 755, 764, 766, 769, 771, 772, 773, 787, 792, 795, 796, 799, 800, 803, 804, 807, 808, 811, 812, 816, 819, 820, 821, 824, 825, 828, 829, 850, 851, 852, 853, 854, 855, 856, 857, 859, 860, 861], "tool": [58, 61, 109, 129, 133, 144, 145, 829], "have": [58, 59, 60, 61, 64, 65, 108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 128, 129, 130, 131, 132, 133, 144, 145, 156, 159, 167, 168, 170, 171, 174, 175, 178, 180, 181, 182, 183, 184, 185, 186, 192, 193, 194, 206, 223, 268, 273, 274, 277, 278, 281, 282, 285, 286, 289, 291, 294, 295, 298, 299, 302, 303, 306, 307, 310, 311, 314, 315, 318, 319, 322, 323, 326, 327, 330, 331, 334, 335, 338, 339, 342, 343, 346, 347, 350, 352, 355, 360, 363, 364, 367, 368, 371, 372, 375, 376, 379, 380, 383, 384, 387, 388, 391, 392, 395, 396, 399, 400, 403, 404, 407, 408, 411, 412, 415, 416, 419, 420, 423, 424, 427, 428, 431, 432, 435, 436, 439, 442, 445, 447, 450, 451, 454, 459, 462, 463, 466, 467, 470, 471, 474, 475, 478, 479, 482, 483, 486, 487, 490, 491, 495, 496, 500, 504, 505, 508, 509, 522, 524, 531, 532, 533, 535, 579, 591, 608, 610, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 634, 637, 638, 639, 640, 641, 643, 644, 645, 646, 647, 648, 649, 651, 652, 655, 657, 660, 662, 665, 667, 668, 671, 673, 676, 681, 684, 685, 688, 689, 692, 693, 696, 701, 704, 707, 710, 711, 714, 715, 718, 754, 756, 757, 765, 766, 767, 768, 769, 771, 772, 773, 775, 776, 777, 780, 782, 785, 787, 792, 795, 796, 799, 800, 803, 804, 807, 808, 811, 812, 816, 819, 820, 821, 824, 825, 828, 829], "explod": [58, 59, 829], "onto": [58, 59, 223, 252, 253, 731, 737, 743, 829], "scene": [58, 59, 112, 127, 129, 579, 582, 584, 587, 589, 592, 594, 596, 598, 600, 602, 829], "b": [58, 61, 66, 67, 71, 72, 75, 76, 77, 78, 89, 90, 93, 94, 107, 112, 115, 118, 119, 122, 127, 128, 129, 131, 132, 133, 143, 186, 195, 197, 198, 199, 223, 245, 273, 286, 288, 290, 291, 294, 302, 307, 311, 314, 331, 334, 335, 337, 338, 343, 355, 368, 379, 380, 383, 420, 447, 450, 467, 470, 483, 486, 487, 490, 496, 497, 499, 504, 509, 510, 512, 513, 514, 517, 518, 526, 527, 534, 537, 575, 610, 613, 616, 617, 622, 623, 624, 625, 626, 639, 643, 646, 650, 651, 652, 655, 667, 668, 670, 671, 672, 681, 684, 685, 688, 693, 696, 701, 703, 704, 705, 711, 714, 715, 718, 749, 750, 753, 754, 756, 758, 759, 760, 762, 766, 768, 769, 770, 776, 777, 780, 787, 788, 791, 792, 795, 815, 820, 821, 824, 829, 835], "why": [58, 60, 109, 122, 125, 126, 130, 829], "unifi": [58, 60, 64, 65, 121, 128, 145, 223, 252, 253, 254, 255, 267, 829], "should": [58, 60, 64, 65, 66, 67, 68, 105, 106, 108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 130, 131, 132, 164, 165, 167, 178, 182, 183, 186, 194, 223, 273, 274, 277, 278, 281, 282, 285, 286, 289, 291, 294, 295, 298, 299, 302, 303, 306, 307, 310, 311, 314, 315, 318, 319, 322, 323, 326, 327, 330, 331, 334, 335, 338, 339, 342, 343, 346, 347, 360, 363, 364, 367, 368, 384, 387, 388, 391, 392, 395, 396, 399, 404, 407, 408, 411, 416, 419, 420, 423, 424, 427, 428, 431, 432, 435, 436, 439, 442, 445, 451, 454, 459, 462, 463, 466, 471, 474, 475, 478, 479, 482, 483, 486, 487, 490, 491, 495, 496, 500, 504, 505, 508, 509, 520, 549, 558, 579, 582, 584, 587, 589, 592, 594, 596, 598, 600, 602, 610, 622, 623, 624, 625, 626, 627, 630, 631, 634, 637, 639, 640, 641, 643, 644, 646, 647, 648, 649, 667, 697, 700, 754, 765, 766, 767, 768, 771, 772, 773, 775, 787, 788, 791, 792, 795, 796, 799, 804, 807, 808, 811, 812, 815, 816, 819, 829], "them": [58, 59, 60, 61, 117, 119, 121, 122, 128, 130, 131, 132, 145, 829], "c": [58, 60, 61, 93, 94, 107, 112, 115, 118, 122, 127, 128, 129, 131, 145, 509, 517, 518, 526, 575, 579, 581, 582, 584, 587, 589, 592, 594, 596, 598, 600, 602, 610, 616, 667, 711, 714, 756, 758, 766, 769, 787, 788, 791, 808, 811, 815, 816, 819, 829, 835], "standard": [58, 112, 113, 114, 116, 117, 121, 125, 126, 145, 167, 178, 186, 195, 198, 206, 273, 286, 291, 294, 311, 314, 331, 334, 335, 338, 343, 368, 467, 470, 483, 486, 487, 490, 496, 623, 626, 667, 681, 684, 685, 688, 701, 704, 749, 750, 753, 754, 759, 771, 772, 773, 776, 777, 780, 787, 792, 795, 808, 811, 816, 819, 820, 821, 824, 829, 835, 864, 865], "re": [58, 59, 60, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 130, 133, 145, 223, 267, 509, 531, 623, 646, 667, 701, 704, 766, 770, 829], "collabor": [58, 59, 60, 829], "consortium": [58, 60, 829, 835], "data": [58, 60, 64, 65, 66, 67, 68, 112, 113, 114, 118, 120, 122, 124, 125, 126, 130, 167, 168, 169, 170, 171, 172, 173, 174, 175, 178, 179, 180, 181, 182, 183, 184, 185, 190, 191, 192, 194, 195, 198, 200, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 218, 222, 223, 225, 226, 227, 228, 229, 230, 235, 236, 237, 239, 273, 274, 277, 278, 281, 282, 285, 286, 289, 291, 294, 295, 298, 299, 302, 303, 306, 307, 310, 311, 314, 315, 318, 319, 322, 323, 326, 327, 330, 331, 334, 335, 338, 339, 342, 343, 346, 347, 350, 352, 355, 360, 363, 364, 367, 368, 371, 372, 375, 376, 379, 380, 383, 384, 387, 388, 391, 392, 395, 396, 399, 400, 403, 404, 407, 408, 411, 416, 419, 420, 423, 424, 427, 428, 431, 432, 435, 436, 439, 442, 445, 451, 454, 459, 462, 463, 466, 471, 474, 475, 478, 479, 482, 483, 486, 487, 490, 491, 495, 496, 500, 504, 505, 508, 509, 517, 518, 551, 552, 554, 571, 579, 591, 608, 610, 619, 623, 624, 625, 626, 627, 628, 629, 630, 631, 634, 637, 638, 639, 640, 641, 643, 644, 646, 647, 648, 649, 667, 681, 684, 685, 688, 689, 692, 697, 700, 701, 704, 707, 710, 711, 714, 754, 765, 766, 767, 768, 769, 776, 777, 780, 787, 792, 795, 796, 799, 800, 803, 804, 807, 808, 811, 812, 816, 819, 820, 821, 824, 825, 828, 829, 835, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861], "api": [58, 59, 108, 109, 112, 114, 115, 117, 118, 120, 121, 123, 124, 125, 126, 127, 129, 131, 145, 167, 178, 186, 195, 198, 273, 286, 291, 294, 311, 314, 331, 334, 335, 338, 343, 368, 467, 470, 483, 486, 487, 490, 496, 623, 626, 667, 681, 684, 685, 688, 701, 704, 771, 772, 773, 776, 777, 780, 787, 792, 795, 820, 821, 824, 829, 835], "open": [59, 60, 61, 107, 108, 111, 114, 144, 167, 168, 754, 756, 757, 760, 762, 829], "project": [59, 60, 61, 108, 109, 111, 113, 119, 130, 132, 144, 145, 754, 755, 759, 760, 762], "grown": 59, "consider": [59, 115, 126], "recent": [59, 60, 108, 109], "year": [59, 61, 145, 829], "especi": [59, 108], "deep": [59, 64, 65, 107, 109, 110, 127, 131, 829], "learn": [59, 60, 108, 110, 112, 118, 127, 133, 144, 273, 376, 579, 582, 584, 587, 589, 592, 594, 596, 598, 600, 602, 727, 728, 729, 730, 829, 866, 867, 868, 869, 870, 871], "can": [59, 60, 61, 107, 108, 109, 112, 113, 114, 115, 116, 117, 118, 119, 122, 123, 124, 125, 126, 127, 128, 130, 131, 132, 133, 144, 145, 167, 169, 179, 186, 195, 198, 223, 265, 266, 267, 623, 630, 667, 697, 700, 754, 756, 757, 829, 835], "seen": [59, 60, 115, 130, 131], "rapidli": 59, "increas": [59, 223, 247, 251, 255, 667, 677, 680, 723, 726, 731, 743], "github": [59, 109, 110, 114, 117], "repo": [59, 60, 61, 108, 109, 116, 128, 130, 131, 132, 133, 144, 829, 835], "term": [59, 109, 122, 610, 620, 850, 860], "time": [59, 60, 61, 108, 109, 110, 117, 118, 122, 123, 126, 128, 131, 133, 145, 579, 582, 584, 592, 594, 610, 620, 667, 719, 722, 727, 728, 729, 730, 766, 767, 768, 771, 772, 773, 850, 861, 862, 863], "These": [59, 60, 61, 109, 114, 115, 117, 118, 122, 123, 125, 126, 128, 129, 131, 132, 133, 145, 623, 628, 829, 835], "written": [59, 108, 113, 114, 121, 125, 126, 128, 130, 133, 145], "mani": [59, 60, 61, 64, 65, 108, 109, 110, 114, 115, 118, 120, 121, 122, 123, 124, 125, 126, 128, 130, 131, 145, 667, 706], "differ": [59, 60, 61, 64, 65, 66, 67, 68, 108, 109, 112, 113, 114, 115, 117, 118, 121, 122, 124, 125, 126, 128, 129, 130, 131, 132, 133, 145, 186, 206, 223, 244, 245, 248, 249, 273, 286, 442, 445, 491, 495, 610, 619, 667, 711, 714, 787, 804, 807, 812, 829], "while": [59, 60, 64, 65, 66, 67, 68, 108, 109, 115, 119, 125, 132, 133, 145, 273, 428, 431, 432, 435, 771, 772, 787, 796, 799], "wonder": [59, 61, 130], "thing": [59, 60, 61, 108, 109, 110, 119, 130, 131], "research": [59, 144], "develop": [59, 60, 61, 107, 108, 109, 110, 144, 145, 829], "consid": [59, 60, 64, 65, 113, 118, 129, 130, 131, 273, 428, 431, 432, 435, 771, 772, 773, 775], "speed": 59, "evolv": 59, "sharabl": 59, "code": [59, 60, 61, 64, 65, 66, 67, 68, 108, 109, 110, 111, 112, 114, 115, 118, 119, 120, 121, 122, 125, 126, 127, 128, 129, 130, 131, 132, 133, 143, 145, 156, 158, 159, 160, 161, 162, 163, 223, 245, 268, 273, 331, 334, 487, 490, 610, 616, 617, 771, 772, 773, 776, 777, 780, 787, 788, 791, 815, 829, 835], "significantli": 59, "hinder": [59, 126], "librari": [59, 60, 61, 128, 133, 143, 145, 223, 268, 273, 364, 367, 428, 431, 432, 435, 623, 628, 771, 772, 773, 775, 787, 792, 795, 796, 799, 800, 803, 829], "outdat": 59, "month": 59, "rigor": 59, "maintain": [59, 109, 145, 776, 777, 780, 782, 785], "against": [59, 64, 65, 117, 145, 186, 193, 623, 631, 634, 635, 637, 640, 766, 767], "newest": 59, "version": [59, 60, 61, 108, 114, 128, 130, 623, 628, 829], "For": [59, 60, 61, 108, 109, 110, 111, 112, 113, 114, 115, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 128, 130, 131, 132, 133, 144, 145, 167, 168, 178, 273, 274, 277, 278, 281, 282, 285, 286, 289, 291, 294, 295, 298, 299, 303, 306, 335, 338, 339, 342, 343, 346, 360, 363, 364, 367, 368, 404, 407, 408, 411, 416, 419, 420, 423, 442, 445, 459, 462, 463, 466, 467, 470, 475, 478, 479, 482, 483, 486, 496, 505, 508, 579, 591, 608, 623, 644, 647, 667, 668, 671, 711, 714, 771, 772, 773, 775, 787, 792, 795, 800, 803, 812, 839, 840], "softwar": [59, 60, 108, 109], "pipelin": [59, 121, 133], "where": [59, 60, 61, 64, 65, 66, 67, 107, 108, 109, 110, 111, 114, 118, 119, 121, 122, 123, 124, 125, 128, 131, 132, 133, 145, 167, 174, 175, 178, 273, 303, 306, 360, 412, 415, 442, 445, 459, 462, 509, 545, 549, 558, 623, 628, 637, 640, 641, 644, 645, 647, 648, 667, 668, 671, 677, 680, 681, 684, 689, 692, 711, 714, 723, 726, 731, 732, 742, 754, 755, 766, 769, 787, 808, 811, 816, 819, 820, 821, 824, 825, 828, 829], "rapid": [59, 60, 108], "prototyp": 59, "vital": [59, 133], "signific": [59, 60, 145], "bottleneck": 59, "new": [59, 60, 61, 64, 65, 107, 108, 109, 110, 111, 112, 113, 114, 115, 117, 120, 122, 123, 125, 127, 130, 133, 144, 167, 170, 173, 174, 175, 180, 181, 184, 185, 186, 218, 273, 302, 307, 310, 412, 415, 455, 458, 500, 501, 504, 509, 531, 532, 533, 536, 537, 538, 561, 562, 563, 564, 569, 570, 579, 582, 584, 587, 589, 592, 594, 596, 598, 600, 602, 667, 681, 684, 697, 700, 711, 714, 731, 736, 747, 748, 749, 750, 753, 829, 839, 840, 850, 860, 864, 865, 866, 867, 868, 869, 870, 871], "futur": [59, 61, 108, 109, 130, 145, 623, 628], "avail": [59, 64, 65, 108, 109, 114, 124, 145, 223, 242, 258, 259, 260, 270, 509, 532], "specif": [59, 64, 65, 110, 118, 121, 122, 123, 124, 125, 126, 128, 129, 130, 132, 133, 144, 145, 186, 214, 223, 265, 268, 273, 428, 431, 432, 435, 509, 531, 532, 533, 556, 623, 628, 646, 667, 711, 714, 727, 728, 729, 730, 754, 755, 787, 792, 795, 796, 799, 800, 803, 829, 832, 834, 835, 862, 863], "quickli": [59, 61, 108, 109, 131, 132], "obsolet": [59, 61], "user": [59, 60, 108, 109, 111, 112, 117, 119, 122, 125, 127, 145, 850, 861, 862, 863], "constantli": 59, "invent": 59, "wheel": 59, "desir": [59, 64, 65, 186, 192, 195, 198, 223, 268, 509, 545, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861], "provid": [59, 64, 65, 108, 109, 114, 115, 118, 121, 122, 123, 124, 125, 126, 128, 132, 144, 145, 164, 165, 167, 178, 186, 201, 202, 203, 210, 214, 222, 223, 242, 509, 530, 558, 562, 579, 582, 584, 587, 589, 592, 594, 596, 598, 600, 602, 623, 648, 667, 685, 688, 711, 714, 766, 767, 787, 808, 811, 816, 819, 820, 821, 824, 825, 828, 850, 851, 852, 853, 854, 855, 856, 857, 859, 860, 861, 866, 867, 868, 869, 870, 871], "simultan": [59, 61], "modern": [59, 60], "simpl": [59, 108, 109, 113, 114, 115, 117, 118, 121, 122, 123, 124, 125, 128, 130, 132, 133, 145, 509, 534], "scalabl": [59, 128], "must": [59, 61, 64, 65, 66, 67, 68, 108, 109, 110, 113, 114, 115, 118, 121, 122, 123, 124, 126, 128, 132, 133, 156, 159, 167, 168, 170, 171, 172, 174, 175, 178, 180, 181, 182, 183, 184, 185, 186, 192, 193, 194, 223, 252, 253, 254, 255, 267, 268, 273, 274, 277, 278, 281, 282, 285, 286, 289, 291, 294, 295, 298, 299, 302, 303, 306, 307, 310, 311, 314, 315, 318, 319, 322, 323, 326, 327, 330, 331, 334, 335, 338, 339, 342, 343, 346, 347, 350, 352, 355, 360, 363, 364, 367, 368, 371, 372, 375, 376, 379, 380, 383, 384, 387, 388, 391, 392, 395, 396, 399, 400, 403, 404, 407, 408, 411, 412, 415, 416, 419, 420, 423, 424, 427, 428, 431, 432, 435, 436, 439, 440, 441, 442, 445, 447, 450, 451, 454, 459, 462, 463, 466, 467, 470, 471, 474, 475, 478, 479, 482, 483, 486, 487, 490, 491, 495, 496, 500, 504, 505, 508, 509, 522, 524, 535, 562, 623, 624, 625, 626, 627, 628, 629, 630, 631, 634, 637, 638, 639, 640, 641, 643, 644, 646, 647, 648, 649, 651, 652, 655, 657, 660, 662, 665, 667, 668, 671, 673, 676, 681, 684, 685, 688, 689, 692, 693, 696, 701, 704, 707, 710, 711, 714, 715, 718, 754, 756, 757, 764, 766, 767, 768, 769, 771, 772, 773, 775, 776, 777, 780, 782, 785, 787, 792, 795, 796, 799, 800, 803, 804, 807, 808, 811, 812, 816, 819, 820, 821, 824, 825, 828, 866, 870], "determin": [59, 64, 65, 114, 118, 122, 123, 124, 186, 195, 198, 200, 205, 210, 211, 212, 222, 223, 258, 259, 260, 270, 273, 278, 281, 282, 285, 286, 289, 291, 294, 295, 298, 299, 302, 303, 306, 307, 310, 311, 314, 319, 322, 323, 326, 327, 330, 331, 334, 339, 342, 343, 346, 347, 360, 363, 364, 367, 384, 387, 388, 391, 392, 395, 404, 407, 408, 411, 416, 419, 420, 423, 436, 439, 442, 445, 459, 462, 463, 466, 475, 478, 479, 482, 483, 486, 496, 500, 504, 509, 510, 513, 517, 518, 544, 546, 550, 551, 552, 553, 554, 571, 578, 579, 591, 610, 621, 623, 624, 625, 626, 627, 630, 631, 634, 637, 639, 640, 642, 643, 647, 648, 649, 727, 728, 729, 730, 771, 772, 773, 775, 820, 821, 824, 825, 828], "exactli": [59, 61, 115, 122, 124, 829, 835], "common": [59, 64, 65, 109, 110, 115, 118, 120, 122, 124, 145], "ground": [59, 117], "li": 59, "between": [59, 64, 65, 66, 67, 68, 115, 117, 118, 121, 122, 126, 127, 129, 130, 131, 133, 144, 167, 168, 186, 206, 273, 303, 306, 459, 462, 651, 652, 655, 657, 660, 662, 665, 667, 681, 684, 711, 714, 731, 737, 754, 756, 757, 771, 772, 773, 775, 829, 866, 868], "find": [59, 64, 65, 108, 109, 128, 131, 771, 772, 773, 775, 829], "exist": [59, 60, 64, 65, 66, 67, 108, 110, 111, 114, 115, 116, 117, 118, 119, 120, 125, 128, 145, 509, 530, 866, 870], "essenti": [59, 60, 110, 115, 118, 124], "order": [59, 64, 65, 66, 67, 68, 108, 109, 111, 114, 115, 119, 121, 122, 123, 124, 126, 130, 131, 133, 145, 273, 303, 306, 579, 582, 584, 587, 589, 592, 594, 596, 598, 600, 602, 623, 628, 635, 644, 645, 649, 667, 685, 688, 727, 728, 729, 766, 769, 771, 772, 773, 775, 776, 777, 780, 782, 785, 872, 873], "design": [59, 60, 112, 125, 128, 130, 145], "univers": 59, "abstract": [59, 122, 132, 145, 223, 238, 866, 870], "In": [59, 61, 108, 109, 113, 114, 115, 118, 119, 122, 123, 124, 125, 126, 128, 130, 131, 132, 133, 144, 145, 223, 262, 268, 269, 272, 273, 286, 442, 445, 463, 466, 509, 515, 549, 667, 697, 700, 754, 760, 762, 829], "languag": [59, 61, 128], "first": [59, 60, 108, 109, 111, 115, 118, 121, 122, 126, 128, 130, 131, 133, 164, 165, 167, 176, 177, 186, 213, 218, 223, 242, 254, 273, 286, 289, 311, 314, 319, 322, 323, 326, 327, 330, 331, 334, 350, 352, 355, 363, 371, 372, 375, 379, 380, 383, 396, 399, 400, 403, 420, 423, 424, 427, 432, 435, 436, 439, 442, 445, 451, 454, 459, 462, 491, 495, 509, 517, 579, 586, 623, 625, 627, 628, 631, 634, 639, 641, 644, 646, 648, 667, 673, 676, 701, 704, 711, 714, 715, 718, 727, 728, 729, 730, 731, 732, 741, 742, 754, 765, 766, 767, 768, 771, 772, 773, 850, 861, 862, 863, 866, 870], "see": [59, 107, 108, 109, 110, 116, 118, 122, 124, 126, 130, 131, 144, 145, 167, 168, 173, 176, 177, 186, 194, 214, 273, 286, 289, 311, 314, 319, 322, 323, 326, 327, 330, 331, 334, 347, 363, 364, 367, 396, 399, 420, 423, 432, 435, 436, 439, 442, 445, 451, 454, 459, 462, 463, 466, 491, 495, 623, 637, 640, 643, 648, 649, 766, 768, 771, 772, 773, 775, 787, 792, 795, 796, 799, 800, 803, 804, 807, 808, 811, 812, 816, 819, 820, 821, 824, 825, 828, 829], "clear": [59, 60, 61, 109, 110, 115, 117, 123, 124, 128, 130, 223, 241], "front": [59, 127, 128, 131, 829, 835], "runner": 59, "look": [59, 108, 109, 111, 113, 115, 118, 119, 122, 123, 124, 126, 128, 130, 132, 133, 829], "littl": [59, 130], "deeper": [59, 109, 112, 127, 223, 247, 251, 255, 731, 742, 743], "follow": [59, 60, 64, 65, 108, 109, 110, 111, 113, 114, 115, 117, 119, 121, 122, 123, 124, 125, 127, 128, 130, 131, 132, 133, 145, 186, 209, 223, 267, 273, 463, 466, 509, 547, 548, 549, 569, 570, 579, 582, 584, 587, 589, 592, 594, 596, 598, 600, 602, 610, 621, 622, 623, 641, 649, 731, 737, 743, 771, 772, 773, 775, 829, 850, 860, 866, 870], "core": [59, 108, 110, 124, 128, 133, 223, 259, 829], "principl": 59, "oper": [59, 64, 65, 66, 67, 108, 110, 114, 115, 118, 121, 122, 124, 125, 131, 132, 167, 176, 177, 186, 214, 273, 286, 327, 330, 331, 334, 355, 379, 380, 383, 447, 450, 463, 466, 487, 490, 509, 519, 531, 532, 533, 571, 579, 582, 584, 587, 589, 592, 594, 596, 598, 600, 602, 610, 611, 612, 613, 614, 615, 616, 617, 619], "expos": [59, 128, 132, 509, 525], "almost": [59, 109, 122, 129, 131], "ident": [59, 61, 64, 65, 118, 120, 122, 130, 131, 145, 223, 257, 731, 744, 829], "uniqu": [59, 118, 122, 145, 223, 232, 233, 727, 728, 729, 730, 731, 737, 771, 772, 773, 774, 775], "syntax": [59, 60], "There": [59, 108, 109, 115, 118, 121, 122, 123, 128, 131, 145], "onli": [59, 64, 65, 107, 108, 109, 113, 115, 117, 118, 119, 121, 122, 123, 124, 125, 126, 128, 130, 131, 132, 133, 143, 145, 223, 263, 273, 428, 431, 432, 435, 623, 631, 634, 641, 667, 685, 688, 731, 732, 733, 741, 742, 766, 767, 768, 787, 796, 799, 829, 866, 867, 868, 869, 870, 871], "wai": [59, 60, 108, 119, 125, 130, 131, 132, 133, 145], "unsurprisingli": [59, 115], "fundament": [59, 122, 128], "consist": [59, 64, 65, 121, 125, 223, 255, 623, 628, 787, 788, 791, 815, 862, 863], "each": [59, 60, 61, 64, 65, 66, 67, 68, 109, 110, 112, 113, 114, 115, 116, 117, 118, 120, 121, 122, 123, 125, 126, 127, 128, 130, 131, 133, 144, 145, 156, 159, 160, 162, 167, 178, 186, 193, 223, 232, 233, 244, 245, 246, 247, 248, 249, 250, 254, 267, 273, 274, 277, 278, 281, 282, 285, 286, 289, 291, 294, 295, 298, 299, 302, 303, 306, 307, 310, 311, 314, 315, 318, 319, 322, 323, 326, 327, 330, 331, 334, 335, 338, 339, 342, 343, 346, 347, 350, 352, 355, 360, 363, 364, 367, 368, 371, 372, 375, 376, 379, 380, 383, 384, 387, 388, 391, 392, 395, 396, 399, 400, 403, 404, 407, 408, 411, 412, 415, 416, 419, 420, 423, 424, 427, 428, 431, 432, 435, 436, 439, 442, 445, 447, 450, 451, 454, 455, 458, 459, 462, 463, 466, 467, 470, 471, 474, 475, 478, 479, 482, 483, 486, 487, 490, 491, 495, 496, 500, 504, 505, 508, 509, 510, 513, 579, 582, 584, 587, 589, 592, 594, 596, 598, 600, 602, 610, 611, 612, 613, 614, 615, 616, 617, 618, 623, 624, 625, 626, 628, 631, 634, 637, 638, 640, 643, 644, 667, 677, 680, 693, 696, 701, 704, 706, 711, 714, 719, 722, 723, 726, 731, 737, 744, 754, 755, 766, 769, 771, 772, 773, 787, 788, 791, 815, 829, 835, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 861, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873], "veri": [59, 60, 108, 109, 113, 115, 117, 118, 122, 124, 125, 126, 129, 131, 132, 133, 145, 829], "similar": [59, 113, 122, 123, 124, 131, 145, 273, 463, 466, 610, 621, 850, 861], "convent": [59, 144, 623, 631, 634, 787, 788, 791, 815], "those": [59, 64, 65, 108, 109, 110, 122, 128, 133, 167, 168, 579, 608, 623, 641, 644, 667, 668, 671], "introduc": [59, 122, 131, 667, 701, 704, 771, 772], "2006": 59, "therefor": [59, 109, 113, 114, 115, 116, 117, 118, 121, 122, 123, 124, 125, 126, 128, 130, 132, 145, 186, 195, 198, 273, 286, 291, 294, 335, 338, 368, 483, 486, 487, 490, 496, 509, 537, 610, 613, 622, 667, 701, 704, 749, 750, 753, 787, 792, 795, 820, 821, 824], "present": [59, 64, 65, 109, 116, 122, 123, 124, 125, 126, 128], "itself": [59, 108, 109, 122, 125, 126, 132, 144, 145, 509, 515, 731, 743], "cut": 59, "cloth": 59, "adher": [59, 60, 114, 116, 128, 133], "semant": [59, 128, 133, 273, 463, 466], "up": [59, 60, 61, 107, 109, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 128, 129, 130, 131, 132, 133, 144, 145], "hopefulli": [59, 60, 61, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 128, 130, 131, 132, 133, 144], "paint": [59, 128], "pictur": [59, 128], "how": [59, 61, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 129, 130, 131, 132, 133, 144, 145, 829, 835, 850, 861, 862, 863], "pleas": [59, 60, 61, 108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 128, 130, 131, 132, 133, 144, 829], "discuss": [59, 60, 61, 107, 108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 128, 130, 131, 132, 133, 144, 145, 829], "faq": [59, 60, 61, 128, 130, 131, 132, 133, 144], "reach": [59, 60, 61, 108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 128, 130, 131, 132, 133, 144, 223, 247, 251, 255, 731, 743], "discord": [59, 60, 61, 108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 128, 130, 131, 132, 133, 144, 829], "you": [59, 60, 61, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 130, 131, 132, 133, 144, 145, 829, 835], "question": [59, 60, 61, 108, 109, 115, 117, 128, 130, 131, 132, 133, 144, 145, 829], "central": 60, "goal": [60, 110], "being": [60, 61, 64, 65, 108, 109, 115, 117, 120, 121, 122, 123, 124, 125, 126, 128, 131, 144, 145, 167, 168, 509, 560, 565, 771, 774, 829], "would": [60, 108, 109, 111, 112, 114, 115, 117, 119, 120, 121, 122, 125, 126, 127, 128, 130, 132, 133, 145, 156, 161, 223, 268, 829], "entir": [60, 61, 64, 65, 109, 115, 116, 117, 121, 122, 125, 130, 131, 132, 133, 145, 223, 267, 787, 792, 795, 796, 799, 800, 803, 804, 807, 808, 811, 812, 816, 819, 820, 821, 824, 825, 828, 850, 859], "forgiven": 60, "rais": [60, 64, 65, 109, 125, 128, 130, 186, 194, 273, 360, 459, 462, 509, 519, 540, 549, 563, 570, 576, 623, 631, 634, 636, 648, 667, 707, 710, 711, 714, 766, 769, 787, 792, 795, 800, 803, 820, 821, 824, 825, 828, 862, 863, 866, 870], "eyebrow": 60, "somehow": 60, "pytorch": [60, 61, 110, 118, 123, 124, 125, 126, 128, 130, 133, 145, 579, 582, 584, 587, 589, 592, 594, 596, 598, 600, 602, 829, 866, 867, 868, 869, 870, 871], "other": [60, 64, 65, 66, 67, 108, 109, 113, 114, 115, 117, 118, 121, 122, 125, 128, 130, 132, 133, 143, 144, 145, 164, 165, 167, 168, 273, 364, 367, 509, 510, 513, 515, 579, 586, 754, 760, 762, 771, 774, 787, 808, 811, 816, 819, 829], "strong": [60, 145], "industri": 60, "back": [60, 121, 127, 128, 130, 145, 829, 835, 862, 863, 866, 870], "momentum": 60, "won": [60, 61, 109, 133], "ad": [60, 105, 106, 108, 109, 110, 113, 114, 115, 117, 118, 120, 121, 122, 123, 125, 126, 128, 132, 145, 509, 569, 570, 623, 628, 667, 681, 684, 872, 873], "just": [60, 61, 108, 109, 114, 115, 117, 118, 125, 128, 130, 131, 145, 787, 788, 791, 815, 850, 859], "make": [60, 61, 108, 109, 110, 113, 114, 115, 116, 117, 118, 121, 122, 123, 124, 125, 126, 128, 130, 131, 133, 223], "problem": [60, 109, 121, 130], "even": [60, 61, 108, 109, 114, 118, 123, 124, 126, 130, 131, 132, 133, 145, 273, 459, 462, 467, 470], "wors": 60, "rather": [60, 64, 65, 113, 114, 117, 122, 133, 145, 167, 168, 223, 267, 509, 551, 552, 554, 579, 591], "funni": 60, "comic": 60, "strip": 60, "easi": [60, 108, 109, 118, 122], "feasibl": 60, "space": [60, 167, 168, 176, 177, 509, 536], "unlik": [60, 115, 122, 223], "charger": 60, "charact": 60, "encod": [60, 131, 509, 536], "instant": [60, 829], "messag": [60, 109, 128, 130, 875, 876], "much": [60, 109, 113, 121, 122, 125, 128, 130, 131], "doe": [60, 64, 65, 109, 111, 112, 113, 114, 115, 117, 118, 119, 123, 125, 126, 128, 130, 131, 145, 273, 331, 334, 509, 549, 667, 706], "mandat": [60, 117, 125], "adopt": [60, 109, 121], "continu": [60, 61, 116, 117, 145], "own": [60, 61, 108, 114, 128, 145], "signatur": [60, 113, 114, 115, 122, 123, 124, 125, 126, 186, 195, 198, 273, 291, 294, 331, 334, 335, 338, 343, 368, 483, 486, 487, 490, 667, 681, 684, 701, 704, 771, 772, 773, 776, 777, 780, 787, 792, 795], "replac": [60, 64, 65, 109, 111, 115, 117, 120, 122, 123, 124, 128, 130, 133, 145, 509, 561, 562, 667, 668, 671, 754, 755], "your": [60, 61, 107, 108, 110, 111, 113, 114, 131, 132, 145, 829], "10": [60, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 108, 111, 115, 122, 128, 130, 131, 167, 174, 177, 223, 273, 311, 314, 315, 318, 343, 355, 379, 380, 383, 408, 411, 483, 486, 509, 527, 537, 560, 565, 579, 592, 593, 594, 595, 610, 616, 623, 626, 627, 639, 646, 667, 685, 688, 693, 696, 706, 749, 750, 753, 754, 755, 756, 757, 758, 766, 769, 771, 772, 787, 788, 791, 792, 795, 815, 866, 868], "100": [60, 61, 93, 94, 131, 132, 133, 145, 273, 483, 486, 756, 758, 829], "despit": [60, 122, 124], "distinct": [60, 114, 122, 125, 127, 771, 772, 773, 775, 829], "still": [60, 64, 65, 114, 117, 123, 130, 132, 145, 829], "believ": [60, 109], "share": [60, 64, 65, 115, 117, 118, 119, 122, 128, 186, 218], "bring": [60, 128, 129], "benefit": [60, 61, 108, 109, 121, 122, 125, 130, 131, 145], "unrel": [60, 109], "what": [60, 61, 109, 112, 114, 115, 120, 122, 126, 127, 128, 130, 131, 132, 133, 144, 145, 829], "again": [60, 61, 109, 113, 115, 122, 125, 131, 133, 145], "contrari": 60, "bumpi": 60, "road": 60, "allud": [60, 131], "most": [60, 64, 65, 108, 109, 113, 117, 118, 121, 122, 123, 124, 125, 126, 128, 130, 131, 132, 145, 623, 628], "technolog": 60, "sector": [60, 273, 281, 282, 285, 295, 298, 302, 307, 310, 342, 346, 500, 504], "full": [60, 61, 66, 67, 109, 114, 123, 126, 128, 145, 167, 186, 206, 273, 355, 379, 380, 383, 610, 616, 623, 641, 643, 644, 749, 750, 753], "success": 60, "reason": [60, 109, 113, 115, 118, 121, 122, 123, 125, 128, 130, 273, 463, 466], "build": [60, 107, 108, 118, 127, 129, 132, 133, 145, 771, 772, 773, 775, 829, 850, 861, 862, 863], "custom": [60, 132], "comput": [60, 61, 64, 65, 108, 118, 122, 128, 131, 145, 223, 267, 273, 286, 311, 314, 323, 326, 331, 334, 352, 355, 356, 359, 376, 379, 380, 383, 396, 399, 400, 403, 424, 427, 428, 431, 432, 435, 436, 439, 442, 445, 447, 450, 451, 454, 509, 521, 522, 524, 527, 528, 579, 581, 582, 584, 586, 587, 589, 592, 594, 596, 598, 600, 602, 605, 607, 610, 611, 612, 613, 614, 615, 616, 617, 619, 621, 623, 624, 625, 628, 629, 630, 631, 634, 635, 641, 642, 643, 644, 648, 649, 651, 652, 655, 657, 660, 662, 665, 731, 737, 771, 772, 773, 775, 787, 788, 791, 792, 795, 796, 799, 800, 803, 804, 807, 808, 811, 812, 815, 816, 819], "thank": [60, 131], "interoper": 60, "compon": [60, 128], "bio": [60, 108], "hardwar": [60, 108], "initi": [60, 64, 65, 66, 67, 68, 109, 119, 123, 124, 223, 610, 620, 843, 844, 846, 847, 849, 850, 851, 852, 853, 854, 855, 856, 857, 859, 860, 861, 862, 863, 866, 870], "pcie": 60, "interfac": [60, 133, 145], "motherboard": 60, "raid": 60, "storag": [60, 131], "virtual": [60, 109, 111], "bluetooth": 60, "wireless": 60, "exchang": 60, "btx": 60, "factor": [60, 223, 232, 265, 266, 267, 579, 581, 582, 584, 592, 594, 596, 598, 610, 611, 612, 613, 614, 615, 616, 617, 623, 624, 850, 851, 852, 853, 854, 855, 856, 857, 866, 867, 868, 869], "sata": 60, "connect": [60, 108, 132, 133, 850, 860, 861], "host": [60, 145], "bu": 60, "adapt": [60, 579, 596, 598, 866, 869], "html": [60, 111, 114, 186, 195, 198, 273, 291, 294, 331, 334, 335, 338, 343, 368, 483, 486, 487, 490, 667, 681, 684, 701, 704, 771, 772, 773, 776, 777, 780, 787, 792, 795], "enabl": [60, 64, 65, 66, 67, 68, 108, 109, 117, 118, 121, 122, 125, 127, 128, 129, 131, 133, 145], "anyon": [60, 107, 145], "websit": 60, "tcp": 60, "ip": 60, "node": [60, 64, 65, 122, 731, 732, 741, 742], "commun": [60, 107, 109, 110, 145, 829, 835], "network": [60, 118, 122, 128, 132, 144, 610, 619, 829, 836, 850, 862, 863], "smtp": 60, "possibl": [60, 107, 108, 109, 110, 114, 115, 117, 122, 123, 125, 128, 131, 144, 145, 509, 555, 573, 787, 792, 795, 800, 803], "send": 60, "gmail": 60, "outlook": 60, "pop": 60, "email": 60, "ieee": [60, 166, 186, 206, 273, 286, 364, 367, 442, 445, 463, 466, 483, 486], "754": [60, 166, 186, 206, 273, 286, 364, 367, 442, 445, 463, 466, 483, 486], "allow": [60, 128, 145, 167, 176, 177, 509, 555, 862, 863], "calcul": [60, 64, 65, 66, 67, 68, 114, 273, 274, 277, 278, 281, 282, 285, 286, 289, 291, 294, 295, 298, 299, 303, 306, 339, 342, 343, 346, 347, 360, 363, 364, 367, 404, 407, 408, 411, 412, 415, 416, 419, 420, 423, 442, 445, 459, 462, 475, 478, 479, 482, 483, 486, 491, 495, 496, 651, 652, 655, 657, 660, 662, 665, 787, 792, 795, 796, 799, 800, 803, 804, 807, 808, 811, 812, 816, 819], "live": [60, 61], "depend": [60, 108, 109, 114, 120, 122, 123, 128, 145, 186, 192, 273, 274, 277, 278, 281, 282, 285, 291, 294, 295, 298, 299, 303, 306, 339, 342, 343, 346, 360, 364, 367, 404, 407, 408, 411, 412, 415, 416, 419, 459, 462, 475, 478, 479, 482, 496, 623, 628, 641, 643, 644, 766, 770, 776, 777, 780, 782, 785], "did": [60, 110, 133], "aris": [60, 145], "until": [60, 109, 145, 829], "substanti": [60, 109, 117, 121], "innov": 60, "growth": 60, "usag": [60, 128, 223, 267], "relev": [60, 108, 110, 115, 122, 123, 131, 866, 867, 868, 869, 870, 871], "area": [60, 125, 143, 273, 281, 282, 285, 295, 298, 302, 307, 310, 342, 346, 500, 504, 829], "necess": 60, "parti": [60, 145], "could": [60, 61, 108, 109, 115, 117, 122, 123, 125, 128, 130, 131, 132, 771, 772, 773, 775], "easili": [60, 109, 131, 132, 133, 145, 829], "engag": [60, 107, 108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126], "regard": [60, 122, 223], "effect": [60, 114, 121, 122, 126, 145, 167, 178, 579, 600, 602, 787, 808, 811, 816, 819], "2015": 60, "sinc": [60, 108, 109, 145], "alongsid": 60, "machin": [60, 108, 118, 144, 186, 206, 209, 273, 376, 623, 637, 640], "given": [60, 61, 64, 65, 108, 109, 110, 111, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 128, 130, 132, 133, 144, 167, 168, 170, 176, 177, 223, 256, 262, 264, 265, 266, 267, 269, 272, 509, 527, 528, 538, 561, 562, 577, 579, 581, 582, 584, 587, 589, 592, 594, 596, 598, 600, 602, 610, 611, 612, 613, 614, 615, 616, 617, 623, 650, 651, 652, 655, 657, 660, 662, 665, 667, 668, 671, 681, 684, 685, 688, 693, 696, 701, 704, 706, 719, 722, 731, 738, 739, 754, 756, 757, 759, 760, 762, 765, 776, 782, 785, 839, 840], "frame": [60, 144], "matur": [60, 145], "state": [60, 114, 126, 127, 128, 129, 131, 144, 273, 442, 445, 610, 620, 829, 836, 837, 838, 839, 840, 841, 843, 844, 846, 847, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873], "than": [60, 64, 65, 109, 113, 115, 117, 122, 125, 128, 131, 132, 133, 145, 167, 168, 186, 206, 223, 267, 273, 278, 281, 282, 285, 291, 294, 303, 306, 319, 322, 327, 330, 335, 338, 342, 346, 350, 368, 371, 372, 375, 404, 407, 408, 411, 416, 419, 440, 459, 462, 463, 466, 471, 474, 483, 486, 505, 508, 509, 551, 552, 554, 579, 591, 623, 625, 631, 634, 637, 640, 649, 667, 668, 671, 685, 688, 707, 710, 754, 760, 762, 771, 772, 773, 775, 787, 804, 807, 808, 811, 812, 816, 819], "preced": [60, 132], "mention": [60, 108, 109, 115, 118, 125, 126], "aros": 60, "70": [60, 623, 639, 787, 788, 791, 815], "80": [60, 623, 639, 787, 788, 791, 815], "90": [60, 93, 94, 273, 331, 334, 467, 470, 623, 639, 756, 758, 787, 788, 791, 815], "effort": [60, 107, 145], "stage": [60, 107, 109, 111, 112, 829], "complet": [60, 64, 65, 109, 110, 121, 122, 130, 131, 623, 641], "natur": [60, 115, 121, 122, 144, 273, 360, 404, 407, 412, 415, 623, 642], "like": [60, 108, 109, 111, 112, 113, 114, 115, 117, 124, 125, 126, 127, 128, 130, 131, 132, 133, 144, 145, 579, 591, 754, 760, 762, 829], "certainli": 60, "mission": [60, 829], "creat": [60, 64, 65, 107, 108, 109, 111, 123, 124, 125, 128, 129, 132, 143, 144, 167, 168, 169, 170, 171, 172, 174, 175, 176, 177, 179, 180, 181, 184, 185, 223, 232, 233, 509, 537, 538, 558, 561, 562, 573, 579, 607, 754, 755, 756, 757, 760, 762, 829, 835, 839, 840, 841, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873], "At": [60, 110], "process": [60, 61, 107, 108, 109, 111, 118, 122, 128, 133, 223, 232, 233, 262, 272], "ourselv": 60, "lead": [60, 61, 64, 65, 66, 67, 68, 145, 623, 641, 644], "quansight": 60, "compani": 60, "made": [60, 109, 110, 122, 125, 128, 130], "organ": [60, 113, 118, 121, 122], "panda": 60, "scipi": 60, "conda": [60, 108, 111], "dask": [60, 771, 772, 773, 775], "apach": 60, "onnx": 60, "scikit": 60, "jupyt": 60, "aw": 60, "cupi": 60, "net": [60, 61, 128, 133], "sympi": 60, "rai": [60, 273, 303, 306], "modin": 60, "spyder": 60, "includ": [60, 64, 65, 109, 110, 113, 114, 115, 116, 117, 118, 119, 121, 122, 123, 124, 125, 126, 144, 145, 167, 168, 169, 179, 509, 544, 578, 623, 649, 731, 732, 754, 760, 762, 766, 768, 787, 792, 795, 796, 799, 800, 803, 804, 807, 808, 811, 812, 816, 819, 820, 821, 824, 825, 828, 832, 834, 850, 860, 861, 864, 865], "member": [60, 109], "googl": [60, 829], "octoml": 60, "einop": [60, 64, 65, 509, 531, 532, 533], "further": [60, 61, 109, 111, 115, 121, 127, 131, 132, 829], "sponsor": 60, "lg": 60, "electron": 60, "microsoft": 60, "d": [60, 61, 93, 94, 107, 108, 112, 122, 131, 509, 518, 526, 610, 611, 612, 613, 614, 615, 616, 617, 623, 627, 639, 756, 758, 829, 835], "shaw": 60, "intel": 60, "togeth": [60, 64, 65, 121, 122, 132, 133, 145, 872, 873], "major": [60, 123, 124, 145, 766, 769], "involv": [60, 107, 111, 112, 123, 133, 186, 214, 273, 286, 442, 445, 829, 835], "anoth": [60, 64, 65, 108, 109, 118, 122, 123, 130, 133, 167, 173, 186, 193, 195, 198], "promis": 60, "pursuit": 60, "unif": [60, 107, 130, 829, 835], "clearli": [60, 110, 115], "lot": [60, 61, 120, 130, 145], "thought": [60, 108, 109, 126], "care": [60, 109, 133], "attent": [60, 109, 121, 122, 610, 621, 622, 850, 861], "gone": [60, 127], "simplifi": [60, 128, 129, 130, 132], "compat": [60, 126, 145, 186, 194, 273, 286, 289, 303, 306, 311, 314, 319, 322, 323, 326, 327, 330, 331, 334, 347, 350, 352, 355, 363, 371, 372, 375, 379, 380, 383, 396, 399, 400, 403, 420, 423, 424, 427, 432, 435, 436, 439, 442, 445, 451, 454, 459, 462, 463, 466, 491, 495, 623, 637, 640, 643, 646, 648, 649, 667, 697, 700, 766, 768, 787, 792, 795, 796, 799, 800, 803, 804, 807, 808, 811, 812, 816, 819, 820, 821, 824, 825, 828, 829], "excit": [60, 107, 112, 829], "complianc": 60, "hope": [60, 145], "due": [60, 108, 122, 125, 273, 442, 445], "suit": [60, 108, 109, 112, 116, 117, 131, 144], "some": [60, 61, 64, 65, 108, 109, 110, 113, 114, 115, 118, 121, 122, 123, 124, 125, 126, 129, 130, 131, 132, 144, 145, 273, 364, 367, 579, 581, 582, 584, 587, 589, 592, 594, 596, 598, 600, 602, 608, 610, 618, 829, 850, 858], "motiv": [60, 130], "great": [60, 61, 117, 128, 130], "convinc": 60, "celebr": 60, "encourag": [60, 144, 145, 829, 835], "foundat": 60, "point": [61, 109, 114, 115, 121, 125, 126, 128, 130, 131, 144, 166, 167, 168, 170, 172, 174, 180, 184, 186, 192, 206, 211, 214, 273, 278, 281, 282, 285, 286, 289, 291, 294, 295, 298, 299, 302, 303, 306, 307, 310, 331, 334, 335, 338, 339, 342, 343, 346, 347, 360, 363, 364, 367, 368, 404, 407, 408, 411, 416, 419, 420, 423, 442, 445, 459, 462, 463, 466, 467, 470, 475, 478, 479, 482, 483, 486, 496, 500, 504, 505, 508, 623, 624, 626, 628, 629, 630, 637, 640, 641, 643, 644, 649, 771, 772, 773, 775, 787, 792, 795, 796, 799, 800, 803, 804, 807, 808, 811, 812, 816, 819], "mai": [61, 108, 109, 122, 130, 132, 167, 168, 173, 223, 268, 273, 352, 355, 379, 380, 383, 400, 403, 428, 431, 432, 435, 509, 530, 771, 772, 773, 775, 776, 777, 780, 782, 785, 787, 792, 795, 796, 799, 800, 803], "ask": [61, 128, 130, 145, 829], "perfectli": 61, "happi": [61, 108, 145], "abund": 61, "better": [61, 109, 112, 127, 130, 131, 132], "ll": [61, 107, 109, 115, 122, 125, 131], "give": [61, 108, 109, 112, 114, 115, 119, 126, 130, 667, 697, 700], "two": [61, 66, 67, 114, 115, 117, 121, 122, 127, 131, 133, 167, 168, 172, 178, 182, 183, 186, 213, 218, 273, 327, 330, 467, 470, 509, 517, 623, 624, 626, 627, 628, 629, 630, 631, 634, 635, 637, 638, 639, 640, 641, 642, 643, 644, 645, 647, 648, 667, 715, 718, 771, 772, 773, 774, 775, 829], "streamlin": 61, "workflow": [61, 109, 131, 143, 829], "save": [61, 64, 65, 145, 509, 566, 862, 863], "week": [61, 109, 110, 829], "let": [61, 114, 115, 122, 123, 124, 128, 130, 131, 132, 133, 787, 796, 799, 808, 811, 812, 816, 819, 829], "sai": [61, 108, 120, 130], "deepmind": 61, "releas": [61, 108, 110, 829], "awesom": 61, "paper": 61, "love": 61, "choic": [61, 108, 125, 131, 787, 808, 811, 816, 819], "perceiverio": 61, "happen": [61, 108, 109, 131], "slew": 61, "rush": 61, "f": [61, 111, 112, 122, 128, 131, 133, 273, 376, 509, 546, 550], "g": [61, 112, 122, 145, 186, 191, 214, 223, 239, 754, 759, 760, 762, 771, 772, 773, 775, 787, 792, 795, 800, 803, 804, 807, 812], "inevit": 61, "deviat": [61, 749, 750, 753, 754, 759, 787, 808, 811, 864, 865], "origin": [61, 64, 65, 66, 67, 68, 119, 120, 123, 128, 130, 273, 303, 306, 623, 635, 667, 697, 700, 701, 704], "often": [61, 118, 145], "erron": 61, "train": [61, 118, 122, 124, 131, 132, 133, 143, 144, 145, 579, 581, 582, 584, 592, 594, 829], "poor": 61, "converg": 61, "perform": [61, 64, 65, 113, 115, 117, 118, 119, 121, 122, 124, 125, 126, 128, 131, 145, 156, 161, 167, 176, 177, 223, 509, 527, 531, 532, 533, 547, 548, 549, 579, 582, 584, 587, 589, 592, 594, 596, 598, 600, 602, 610, 618, 620, 623, 644, 727, 728, 729, 730, 731, 738, 739, 820, 821, 824, 825, 828], "issu": [61, 107, 110, 128, 130, 132, 145], "publish": [61, 145], "manag": [61, 107, 125, 145, 223], "get": [61, 64, 65, 107, 108, 110, 112, 118, 123, 124, 125, 128, 129, 130, 131, 132, 186, 204, 205, 206, 209, 223, 232, 233, 242, 243, 256, 257, 262, 266, 269, 272, 509, 516, 539, 540, 541, 560, 829, 835, 850, 859], "work": [61, 108, 109, 110, 112, 117, 122, 123, 124, 127, 128, 129, 130, 132, 133, 829, 835], "repositori": [61, 108, 109, 111, 116], "pull": [61, 107, 108, 111, 113, 145], "request": [61, 107, 113, 223, 259], "confus": [61, 125], "do": [61, 64, 65, 108, 109, 110, 113, 114, 115, 118, 119, 120, 121, 122, 123, 124, 125, 126, 128, 130, 131, 132, 133, 145, 273, 463, 466, 509, 549, 579, 591, 608, 731, 732, 741, 742, 743], "expect": [61, 145, 509, 516, 829], "codebas": [61, 107, 112, 113, 125, 127, 223, 265, 266, 829], "total": [61, 64, 65, 66, 67, 68, 107, 109, 115, 117, 124, 131, 132, 145, 223, 269, 766, 769, 787, 808, 811, 816, 819], "hour": 61, "spent": 61, "spin": 61, "off": [61, 127, 623, 627, 647], "test": [61, 108, 110, 112, 115, 145, 186, 211, 212, 273, 384, 387, 388, 391, 392, 395, 820, 821, 824, 825, 828], "error": [61, 64, 65, 108, 117, 121, 124, 126, 130, 145, 156, 157, 223, 273, 356, 359, 787, 792, 795, 800, 803, 862, 863, 866, 870], "address": [61, 109, 110, 121, 128], "sake": 61, "singl": [61, 64, 65, 109, 113, 115, 117, 118, 120, 122, 125, 126, 128, 131, 132, 133, 145, 223, 232, 233, 252, 253, 254, 255, 509, 575, 578, 754, 759, 760, 762, 771, 772], "multipl": [61, 64, 65, 75, 76, 77, 78, 89, 90, 93, 94, 109, 115, 118, 122, 145, 273, 290, 420, 442, 445, 509, 510, 512, 513, 514, 555, 623, 630, 667, 668, 671, 672, 701, 704, 705, 706, 749, 750, 753, 756, 758, 766, 767, 768, 787, 792, 795, 796, 799, 800, 803, 804, 807, 808, 811, 812, 816, 819, 820, 821, 824, 825, 828, 850, 860], "line": [61, 108, 115, 121, 129, 130, 131, 132, 143, 829, 835], "directli": [61, 109, 113, 114, 118, 121, 122, 123, 124, 125, 126, 128, 130, 132, 133, 144, 145, 731, 743], "graph": [61, 118, 122, 129, 145, 579, 582, 584, 587, 589, 592, 594, 596, 598, 600, 602, 771, 772, 773, 775, 862, 863], "guarante": [61, 121, 145, 771, 772], "turn": [61, 115, 122], "step": [61, 64, 65, 79, 80, 108, 109, 111, 115, 119, 121, 122, 123, 124, 128, 131, 132, 133, 144, 167, 168, 176, 177, 223, 579, 581, 582, 583, 584, 585, 587, 589, 592, 593, 594, 595, 596, 598, 600, 602, 727, 728, 729, 730, 829, 866, 867, 868, 869, 870, 871], "take": [61, 107, 108, 109, 114, 115, 117, 122, 123, 124, 128, 130, 132, 133, 145, 273, 331, 334, 829, 835], "few": [61, 109, 110, 118, 122, 123, 124, 125, 129, 130, 131, 132, 143, 829, 835], "second": [61, 108, 115, 125, 130, 186, 213, 218, 223, 254, 273, 286, 289, 311, 314, 319, 322, 323, 326, 327, 330, 331, 334, 350, 352, 355, 363, 371, 372, 375, 379, 380, 383, 396, 399, 400, 403, 420, 423, 424, 427, 432, 435, 436, 439, 442, 445, 451, 454, 459, 462, 491, 495, 509, 517, 560, 565, 579, 581, 582, 584, 592, 594, 623, 625, 627, 628, 631, 634, 639, 641, 644, 646, 648, 667, 711, 714, 715, 718, 727, 729, 771, 772, 773, 866, 867, 868], "automat": [61, 108, 109, 118, 122, 126, 127, 128, 129, 132, 133, 829], "everyon": [61, 107, 109, 145], "regardless": [61, 64, 65, 107, 130, 133, 164, 165], "wouldn": 61, "nice": [61, 117], "write": [61, 64, 65, 109, 110, 111, 112, 113, 114, 115, 117, 118, 119, 125, 128, 130, 133, 156, 159, 223, 268, 273, 274, 277, 278, 281, 282, 285, 286, 289, 291, 294, 295, 298, 299, 303, 306, 311, 314, 315, 318, 319, 322, 323, 326, 327, 330, 331, 334, 335, 338, 339, 342, 343, 346, 360, 363, 364, 367, 368, 384, 387, 388, 391, 392, 395, 396, 399, 404, 407, 408, 411, 412, 415, 416, 419, 420, 423, 424, 427, 428, 431, 432, 435, 436, 439, 442, 445, 447, 450, 451, 454, 459, 462, 463, 466, 467, 470, 471, 474, 475, 478, 479, 482, 483, 486, 487, 490, 491, 495, 496, 509, 522, 524, 528, 535, 537, 651, 652, 655, 657, 660, 662, 665, 667, 668, 671, 681, 684, 685, 688, 689, 692, 693, 696, 701, 704, 707, 710, 711, 714, 715, 718, 749, 750, 753, 754, 756, 757, 776, 777, 780, 782, 785, 787, 788, 791, 792, 795, 796, 799, 800, 803, 804, 807, 808, 811, 812, 815, 816, 819, 820, 821, 824, 825, 828], "onc": [61, 108, 109, 122, 123, 124, 128, 131, 145, 223, 267, 623, 630, 644, 754, 755], "know": [61, 771, 772, 773, 775], "among": [61, 64, 65, 117], "frantic": 61, "port": 61, "lucid": 61, "honk": 61, "improv": [61, 109, 118, 128], "understand": [61, 108, 109, 110, 111, 112, 114, 115, 116, 126, 127], "pattern": [61, 64, 65, 114, 123, 509, 531, 532, 533], "hasn": 61, "now": [61, 64, 65, 108, 111, 113, 120, 122, 123, 126, 130, 131, 133, 144, 145, 850, 861, 862, 863], "spend": 61, "torchvis": 61, "probabl": [61, 610, 618, 754, 755, 850, 858], "sonnet": 61, "about": [61, 108, 109, 116, 127, 128, 132, 133, 145, 186, 206, 209], "next": [61, 108, 109, 110, 111, 114, 115, 119, 120, 130, 131, 186, 206, 829, 862, 863, 866, 867, 868, 869, 870, 871], "everyth": [61, 109, 110, 129, 145], "zero": [61, 64, 65, 66, 67, 115, 121, 122, 123, 124, 126, 128, 131, 132, 156, 158, 159, 167, 170, 172, 178, 182, 183, 185, 186, 192, 273, 286, 291, 294, 319, 322, 343, 364, 367, 368, 428, 431, 432, 435, 440, 441, 442, 445, 447, 450, 459, 462, 463, 466, 467, 470, 483, 486, 487, 490, 496, 509, 527, 558, 561, 562, 579, 581, 582, 584, 592, 594, 596, 598, 610, 618, 623, 626, 631, 634, 637, 640, 648, 649, 667, 681, 684, 685, 688, 693, 696, 701, 704, 723, 726, 749, 750, 753, 754, 756, 757, 766, 767, 768, 769, 771, 772, 773, 775, 787, 792, 795, 796, 799, 800, 803, 804, 807, 808, 811, 812, 816, 819, 820, 821, 824, 825, 828, 829, 841, 850, 851, 852, 853, 854, 855, 856, 857, 858, 860, 866, 867, 868, 869], "need": [61, 108, 109, 110, 111, 113, 114, 115, 116, 118, 121, 122, 125, 128, 130, 131, 144, 145, 509, 521, 522, 524, 667, 668, 671, 681, 684], "said": 61, "high": [61, 64, 65, 93, 94, 110, 131, 754, 756, 757, 758, 760, 761, 762, 763], "level": [61, 107, 110, 118, 127, 128, 131, 132, 133, 145], "optim": [61, 125, 129, 131, 133, 144, 223, 579, 582, 584, 587, 589, 592, 594, 596, 598, 600, 602, 727, 728, 729, 730, 829, 867, 868, 869, 871], "trainer": [61, 143, 145, 829], "statu": 61, "quo": 61, "kera": 61, "dopamin": 61, "ignit": 61, "catalyst": 61, "lightn": 61, "fastai": 61, "haiku": [61, 133], "flax": [61, 133, 145], "trax": [61, 133], "objax": [61, 133], "idea": [61, 144], "fulli": [61, 121, 122, 126, 128, 129, 130, 131, 132, 133, 145, 850, 860, 861], "offer": [61, 132], "containerwithactiv": [62, 66, 67], "dict_in": [62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104], "queue": [62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 131, 223, 232, 233, 509, 560, 565], "queue_load_s": [62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104], "container_combine_method": [62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104], "list_join": [62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104], "queue_timeout": [62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 509], "print_limit": [62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104], "key_length_limit": [62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104], "print_ind": [62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104], "print_line_spac": [62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104], "ivyh": [62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104], "default_key_color": [62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104], "green": [62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 108, 109, 875, 876], "keyword_color_dict": [62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104], "rebuild_child_contain": [62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104], "types_to_iteratively_nest": [62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104], "alphabetical_kei": [62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104], "containerbas": [62, 63, 64, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 122], "__getitem__": [64, 65, 122], "queri": [64, 65, 122, 123, 130, 223, 256, 266, 610, 621, 622, 850, 861], "slice": [64, 65, 509, 537, 538, 731, 740], "chain": [64, 65, 121, 122, 132, 133, 145, 727, 728, 729, 731, 744, 872, 873], "element": [64, 65, 114, 128, 133, 156, 157, 158, 159, 160, 161, 162, 163, 167, 168, 174, 175, 182, 183, 223, 246, 250, 254, 273, 274, 277, 278, 281, 282, 285, 286, 289, 291, 294, 295, 298, 299, 302, 303, 306, 307, 310, 311, 314, 315, 318, 319, 322, 323, 326, 327, 330, 331, 334, 335, 338, 339, 342, 343, 346, 347, 350, 352, 355, 356, 359, 360, 363, 364, 367, 368, 371, 372, 375, 376, 379, 380, 383, 384, 387, 388, 391, 392, 395, 396, 399, 400, 403, 404, 407, 408, 411, 412, 415, 416, 419, 420, 423, 424, 427, 428, 431, 432, 435, 436, 439, 440, 441, 442, 445, 447, 450, 451, 454, 455, 458, 459, 462, 463, 466, 467, 470, 471, 474, 475, 478, 479, 482, 483, 486, 487, 490, 491, 495, 496, 500, 501, 504, 505, 508, 509, 517, 518, 521, 522, 524, 527, 528, 535, 545, 574, 575, 610, 618, 623, 625, 628, 631, 634, 641, 644, 667, 668, 671, 685, 688, 693, 696, 701, 704, 706, 707, 710, 754, 755, 766, 769, 770, 771, 772, 773, 774, 775, 776, 782, 785, 787, 788, 791, 792, 795, 796, 799, 800, 803, 804, 807, 808, 811, 812, 815, 816, 819, 820, 821, 824, 825, 828, 850, 858], "represent": [64, 65, 66, 67, 68, 144, 166, 186, 190, 191, 206, 209, 223, 239, 240, 273, 274, 277, 286, 311, 314, 323, 326, 331, 334, 436, 439, 442, 445, 509, 515, 568, 573], "dictionari": [64, 65, 66, 67, 68, 131, 145, 223, 266], "around": [64, 65, 66, 67, 68, 109, 118, 121, 126, 130, 145], "sequenc": [64, 65, 66, 67, 68, 115, 123, 144, 223, 232, 233, 509, 518, 555, 667, 706, 711, 714, 754, 756, 757, 787, 792, 795, 850, 859, 864, 865, 872, 873], "multiprocess": [64, 65, 66, 67, 68, 131, 145, 223, 232, 509], "asynchron": [64, 65, 66, 67, 68], "wait": [64, 65, 66, 67, 68, 109], "size": [64, 65, 66, 67, 68, 130, 131, 167, 176, 177, 223, 265, 266, 267, 509, 561, 567, 610, 622, 623, 627, 635, 639, 641, 644, 648, 667, 681, 684, 701, 704, 706, 707, 710, 754, 755, 759, 760, 762, 766, 767, 769, 820, 821, 824, 825, 828, 850, 851, 852], "dimens": [64, 65, 66, 67, 68, 115, 128, 131, 156, 161, 167, 182, 183, 223, 254, 509, 531, 532, 533, 536, 542, 558, 577, 610, 611, 612, 613, 614, 615, 616, 617, 620, 623, 624, 625, 626, 627, 628, 629, 630, 631, 634, 635, 637, 638, 640, 641, 643, 644, 645, 647, 648, 649, 651, 657, 660, 662, 665, 667, 673, 676, 681, 684, 685, 688, 689, 692, 693, 696, 697, 700, 701, 704, 706, 707, 710, 711, 714, 727, 728, 729, 730, 754, 765, 766, 767, 768, 769, 771, 772, 773, 775, 787, 788, 791, 792, 795, 796, 799, 800, 803, 804, 807, 808, 811, 812, 815, 816, 819, 820, 821, 824, 825, 828, 850, 851, 852, 853, 854, 855, 856, 857, 860, 861], "combin": [64, 65, 66, 67, 68, 109, 115, 117, 118, 121, 122, 133, 623, 625], "arriv": [64, 65, 66, 67, 68], "timeout": [64, 65, 66, 67, 68, 223, 232, 233, 509, 560, 565], "limit": [64, 65, 66, 67, 68, 109, 115, 117, 128, 131, 133, 145, 186, 206, 209, 509, 521, 522, 524, 667, 668, 671], "maximum": [64, 65, 66, 67, 68, 115, 128, 131, 133, 223, 247, 251, 255, 267, 273, 509, 521, 522, 524, 536, 579, 592, 594, 667, 668, 671, 731, 743, 766, 767, 787, 792, 795, 800, 803, 829], "length": [64, 65, 66, 67, 68, 131, 167, 168, 178, 623, 644, 645, 667, 697, 700], "whitespac": [64, 65, 66, 67, 68], "indent": [64, 65, 66, 67, 68, 131], "extra": [64, 65, 66, 67, 68, 115, 120, 121, 128, 579, 586], "newlin": [64, 65, 66, 67, 68, 114], "handl": [64, 65, 66, 67, 68, 112, 117, 118, 120, 122, 123, 124, 125, 126, 132, 145, 164, 165, 223, 239, 240, 241, 242, 243, 257, 261, 262, 269, 272, 579, 582, 584, 587, 589, 592, 594, 596, 598, 600, 602, 866, 867, 868, 869, 870, 871], "result": [64, 65, 66, 67, 68, 113, 114, 115, 117, 121, 122, 123, 125, 126, 131, 145, 156, 159, 167, 168, 186, 214, 223, 232, 268, 273, 274, 277, 278, 281, 282, 285, 286, 289, 291, 294, 295, 298, 299, 303, 306, 311, 314, 315, 318, 319, 322, 323, 326, 327, 330, 331, 334, 335, 338, 339, 342, 343, 346, 347, 350, 352, 355, 360, 363, 364, 367, 368, 371, 372, 375, 376, 379, 380, 383, 384, 387, 388, 391, 392, 395, 396, 399, 400, 403, 404, 407, 408, 411, 412, 415, 416, 419, 420, 423, 424, 427, 428, 431, 432, 435, 436, 439, 442, 445, 447, 450, 451, 454, 459, 462, 463, 466, 467, 470, 471, 474, 475, 478, 479, 482, 483, 486, 487, 490, 491, 495, 496, 505, 508, 509, 522, 524, 528, 535, 537, 561, 562, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 622, 623, 624, 627, 635, 644, 649, 651, 652, 655, 657, 660, 662, 665, 667, 668, 671, 681, 684, 685, 688, 689, 692, 693, 696, 701, 704, 707, 710, 711, 714, 715, 718, 731, 744, 749, 750, 753, 754, 756, 757, 766, 767, 768, 771, 772, 776, 777, 780, 782, 785, 787, 788, 791, 792, 795, 796, 799, 800, 803, 804, 807, 808, 811, 812, 815, 816, 819, 820, 821, 824, 825, 828, 829], "color": [64, 65, 66, 67, 68, 875, 876], "termin": [64, 65, 66, 67, 68, 108, 109, 111, 122, 128, 131], "map": [64, 65, 66, 67, 68, 117, 118, 122, 126, 131, 144, 145, 223, 232, 731, 738, 739, 743, 744, 850, 861], "termcolor": [64, 65, 66, 67, 68], "rebuild": [64, 65, 66, 67, 68], "found": [64, 65, 66, 67, 68, 108, 109, 114, 121, 122, 223, 257], "constructor": [64, 65, 66, 67, 68, 123, 124, 130, 509, 516, 872, 873], "param": [64, 65, 66, 67, 68, 128, 133, 509, 515, 537, 538], "kept": [64, 65, 66, 67, 68, 109, 125, 727, 728, 729], "structur": [64, 65, 66, 67, 68, 111, 113, 118, 121, 122, 131, 132, 509, 525, 731, 744], "alphabet": [64, 65, 66, 67, 68], "preserv": [64, 65, 66, 67, 68, 133, 145, 579, 605, 667, 685, 688], "__setitem__": [64, 65, 121, 122, 130], "val": [64, 65, 125, 130, 509, 547, 548, 549, 563, 564], "after": [64, 65, 115, 122, 123, 127, 186, 218, 273, 483, 486, 579, 582, 584, 586, 587, 589, 592, 594, 596, 598, 600, 602, 749, 750, 753, 866, 867, 868, 869, 870, 871], "updat": [64, 65, 108, 109, 110, 111, 112, 115, 116, 120, 121, 122, 123, 126, 128, 130, 131, 133, 145, 223, 232, 509, 549, 561, 562, 579, 581, 582, 584, 587, 589, 592, 594, 596, 598, 600, 602, 610, 620, 727, 728, 729, 731, 738, 739, 747, 748, 839, 840, 866, 867, 868, 869, 870, 871], "all_fals": [64, 65], "assert_is_bool": [64, 65], "key_chain": [64, 65, 66, 67, 71, 72, 75, 76, 77, 78, 79, 80, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 99, 100, 101, 102, 103, 104, 195, 197, 199, 274, 276, 280, 281, 282, 284, 288, 289, 290, 291, 293, 295, 297, 301, 302, 303, 305, 307, 309, 311, 313, 315, 317, 319, 321, 323, 325, 327, 329, 331, 333, 335, 337, 341, 342, 345, 346, 349, 350, 351, 354, 355, 356, 358, 362, 363, 364, 366, 370, 371, 372, 374, 378, 379, 380, 382, 384, 386, 388, 390, 392, 394, 396, 398, 400, 402, 404, 406, 408, 410, 412, 414, 416, 418, 420, 422, 424, 426, 428, 430, 432, 434, 436, 438, 442, 444, 446, 447, 449, 451, 453, 455, 457, 459, 461, 463, 465, 467, 469, 471, 473, 475, 477, 479, 481, 483, 485, 487, 489, 491, 492, 494, 497, 499, 500, 503, 504, 505, 507, 510, 512, 514, 522, 523, 582, 583, 585, 587, 588, 590, 592, 593, 595, 596, 597, 599, 600, 601, 603, 631, 633, 652, 654, 656, 657, 659, 661, 662, 664, 666, 668, 670, 672, 673, 675, 677, 679, 681, 683, 685, 687, 689, 691, 693, 695, 697, 699, 701, 703, 705, 707, 709, 711, 713, 715, 717, 719, 721, 723, 725, 731, 744, 750, 752, 756, 758, 760, 761, 763, 777, 779, 781, 782, 784, 786, 788, 790, 792, 794, 796, 798, 800, 802, 804, 806, 808, 810, 814, 815, 816, 818, 821, 823, 825, 827], "to_appli": [64, 65, 66, 67, 71, 72, 75, 76, 77, 78, 79, 80, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 99, 100, 101, 102, 103, 104, 195, 197, 199, 274, 276, 280, 281, 282, 284, 288, 289, 290, 291, 293, 295, 297, 301, 302, 303, 305, 307, 309, 311, 313, 315, 317, 319, 321, 323, 325, 327, 329, 331, 333, 335, 337, 341, 342, 345, 346, 349, 350, 351, 354, 355, 356, 358, 362, 363, 364, 366, 370, 371, 372, 374, 378, 379, 380, 382, 384, 386, 388, 390, 392, 394, 396, 398, 400, 402, 404, 406, 408, 410, 412, 414, 416, 418, 420, 422, 424, 426, 428, 430, 432, 434, 436, 438, 442, 444, 446, 447, 449, 451, 453, 455, 457, 459, 461, 463, 465, 467, 469, 471, 473, 475, 477, 479, 481, 483, 485, 487, 489, 491, 492, 494, 497, 499, 500, 503, 504, 505, 507, 510, 512, 514, 522, 523, 582, 583, 585, 587, 588, 590, 592, 593, 595, 596, 597, 599, 600, 601, 603, 631, 633, 652, 654, 656, 657, 659, 661, 662, 664, 666, 668, 670, 672, 673, 675, 677, 679, 681, 683, 685, 687, 689, 691, 693, 695, 697, 699, 701, 703, 705, 707, 709, 711, 713, 715, 717, 719, 721, 723, 725, 731, 744, 750, 752, 760, 761, 763, 777, 779, 781, 782, 784, 786, 788, 790, 792, 794, 796, 798, 800, 802, 804, 806, 808, 810, 814, 815, 816, 818, 821, 823, 825, 827], "prune_unappli": [64, 65, 66, 67, 71, 72, 75, 76, 77, 78, 79, 80, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 99, 100, 101, 102, 103, 104, 195, 197, 199, 274, 276, 280, 281, 282, 284, 288, 289, 290, 291, 293, 295, 297, 301, 302, 303, 305, 307, 309, 311, 313, 315, 317, 319, 321, 323, 325, 327, 329, 331, 333, 335, 337, 341, 342, 345, 346, 349, 350, 351, 354, 355, 356, 358, 362, 363, 364, 366, 370, 371, 372, 374, 378, 379, 380, 382, 384, 386, 388, 390, 392, 394, 396, 398, 400, 402, 404, 406, 408, 410, 412, 414, 416, 418, 420, 422, 424, 426, 428, 430, 432, 434, 436, 438, 442, 444, 446, 447, 449, 451, 453, 455, 457, 459, 461, 463, 465, 467, 469, 471, 473, 475, 477, 479, 481, 483, 485, 487, 489, 491, 492, 494, 497, 499, 500, 503, 504, 505, 507, 510, 512, 514, 522, 523, 582, 583, 585, 587, 588, 590, 592, 593, 595, 596, 597, 599, 600, 601, 603, 631, 633, 652, 654, 656, 657, 659, 661, 662, 664, 666, 668, 670, 672, 673, 675, 677, 679, 681, 683, 685, 687, 689, 691, 693, 695, 697, 699, 701, 703, 705, 707, 709, 711, 713, 715, 717, 719, 721, 723, 725, 731, 744, 750, 752, 760, 761, 763, 777, 779, 781, 782, 784, 786, 788, 790, 792, 794, 796, 798, 800, 802, 804, 806, 808, 810, 814, 815, 816, 818, 821, 823, 825, 827], "map_sequ": [64, 65, 66, 67, 71, 72, 75, 76, 77, 78, 79, 80, 87, 88, 89, 90, 91, 92, 93, 94, 99, 100, 101, 102, 103, 104, 195, 197, 199, 274, 276, 280, 281, 282, 284, 288, 289, 290, 291, 293, 295, 297, 301, 302, 307, 309, 315, 317, 335, 337, 341, 342, 345, 346, 349, 351, 356, 358, 362, 364, 366, 370, 371, 372, 384, 386, 388, 390, 392, 394, 404, 406, 408, 410, 412, 414, 416, 418, 420, 428, 430, 442, 444, 446, 447, 449, 455, 457, 467, 469, 471, 473, 475, 477, 479, 481, 483, 485, 487, 489, 491, 492, 494, 497, 499, 500, 503, 504, 505, 507, 510, 512, 514, 522, 523, 582, 583, 585, 587, 588, 590, 592, 593, 595, 596, 597, 599, 600, 601, 603, 652, 654, 656, 657, 659, 661, 662, 664, 666, 668, 670, 672, 677, 679, 681, 683, 685, 687, 689, 691, 693, 695, 697, 699, 701, 703, 705, 707, 709, 715, 717, 719, 721, 723, 725, 750, 752, 760, 761, 763, 777, 779, 781, 782, 784, 786, 788, 790, 792, 794, 796, 798, 800, 802, 804, 806, 808, 810, 814, 815, 816, 818, 821, 823, 825, 827], "entri": [64, 65, 167, 176, 177, 667, 706, 731, 744], "boolean": [64, 65, 122, 167, 174, 186, 192, 210, 222, 223, 258, 270, 273, 311, 314, 315, 318, 323, 326, 331, 334, 424, 427, 428, 431, 432, 435, 436, 439, 509, 510, 513, 517, 518, 544, 545, 546, 550, 551, 552, 553, 554, 571, 578, 579, 591, 727, 728, 729, 731, 741, 787, 800, 803], "evalu": [64, 65, 122, 273, 360, 364, 367, 404, 407, 408, 411, 412, 415, 416, 419, 447, 450, 471, 474, 487, 490, 731, 732, 741, 742, 820, 821, 824, 825, 828], "assert": [64, 65, 130, 131, 509, 519], "skip": [64, 65, 111, 117, 731, 744], "prune": [64, 65, 731, 744, 745, 746], "all_key_chain": [64, 65], "include_empti": [64, 65], "all_tru": [64, 65, 122, 131], "arrays_as_list": [64, 65], "intermedi": [64, 65], "as_arrai": [64, 65, 509, 542, 567], "as_bool": [64, 65], "as_on": [64, 65], "ones": [64, 65, 66, 67, 117, 128, 130, 131, 167, 172, 181, 273, 335, 338, 509, 558, 829], "sub": [64, 65, 109, 110, 112, 117, 122, 130, 131, 132, 223, 248, 249, 252, 253, 254, 255, 623, 627, 667, 706, 727, 728, 729, 730, 829], "fill": [64, 65, 167, 170, 174, 175, 180, 181, 184, 185, 754, 756, 757], "as_random_uniform": [64, 65], "low": [64, 65, 93, 94, 128, 754, 756, 757, 758, 760, 761, 762, 763], "uniform": [64, 65, 132, 754, 755, 756, 757, 760, 762, 841, 843, 844, 847, 848], "lower": [64, 65, 109, 115, 128, 145, 167, 172, 182, 273, 440, 623, 624, 754, 760, 762], "boundari": [64, 65, 754, 760, 762], "output": [64, 65, 108, 112, 113, 114, 115, 117, 118, 121, 122, 124, 125, 126, 128, 130, 132, 133, 145, 156, 159, 167, 168, 170, 171, 172, 174, 175, 178, 180, 181, 184, 185, 223, 232, 233, 267, 268, 273, 274, 277, 278, 281, 282, 285, 286, 289, 291, 294, 295, 298, 299, 303, 306, 311, 314, 315, 318, 319, 322, 323, 326, 327, 330, 331, 334, 335, 338, 339, 342, 343, 346, 360, 363, 364, 367, 368, 384, 387, 388, 391, 392, 395, 396, 399, 404, 407, 408, 411, 412, 415, 416, 419, 420, 423, 424, 427, 428, 431, 432, 435, 436, 439, 442, 445, 447, 450, 451, 454, 459, 462, 463, 466, 467, 470, 471, 474, 475, 478, 479, 482, 483, 486, 487, 490, 491, 495, 496, 509, 520, 522, 524, 528, 535, 537, 579, 586, 610, 612, 614, 616, 618, 620, 621, 622, 623, 647, 651, 652, 655, 657, 660, 662, 665, 667, 668, 671, 681, 684, 685, 688, 689, 692, 693, 696, 701, 704, 707, 710, 711, 714, 715, 718, 719, 722, 731, 744, 749, 750, 753, 754, 756, 757, 759, 760, 762, 776, 777, 780, 782, 785, 787, 788, 791, 792, 795, 796, 799, 800, 803, 804, 807, 808, 811, 812, 815, 816, 819, 820, 821, 824, 825, 828, 829, 850, 851, 852, 853, 854, 855, 856, 858, 859, 860, 861], "interv": [64, 65, 128, 133, 167, 168, 176, 177, 623, 648, 667, 668, 671, 711, 714, 754, 756, 757, 760, 762, 820, 821, 824, 825, 828], "upper": [64, 65, 167, 172, 183, 623, 624, 641, 754, 760, 762], "as_vari": [64, 65], "as_zero": [64, 65], "assert_contains_sub_contain": [64, 65], "sub_cont": [64, 65], "partial": [64, 65, 109, 862, 863], "except": [64, 65, 114, 121, 125, 130, 145, 186, 194, 509, 519, 530, 549, 576, 623, 640, 667, 673, 676, 711, 714, 766, 769, 820, 821, 824, 825, 828], "diff": [64, 65, 122, 131], "screen": [64, 65, 131], "assert_contains_sub_structur": [64, 65], "check_shap": [64, 65], "static": [64, 65, 71, 72, 75, 76, 77, 78, 79, 80, 87, 88, 89, 90, 93, 94, 99, 100, 105, 106, 110, 114, 115, 118, 145, 164, 165, 195, 199, 290, 302, 307, 420, 497, 504, 510, 514, 668, 672, 701, 705, 756, 758], "assert_ident": [64, 65], "check_typ": [64, 65], "same_arrai": [64, 65, 131], "arrays_equ": [64, 65, 66, 67, 509], "datatyp": [64, 65, 167, 169, 179, 186, 200, 211, 212, 213], "exact": [64, 65, 109, 128, 771, 772], "assert_identical_structur": [64, 65], "at_key_chain": [64, 65], "ignore_key_error": [64, 65], "ignore_non": [64, 65], "at_kei": [64, 65], "ignor": [64, 65, 115, 145, 167, 178, 731, 742, 866, 870], "substr": [64, 65], "access": [64, 65, 109, 111, 123], "clip_min": [64, 65], "clip_max": [64, 65], "minimum": [64, 65, 128, 133, 223, 273, 274, 277, 509, 540, 541, 563, 564, 569, 570, 667, 668, 671, 766, 768, 787, 792, 795, 800, 803, 829], "config": [64, 65, 131, 731, 744], "right": [64, 65, 107, 108, 109, 112, 115, 131, 273, 319, 322, 327, 330, 623, 644], "duplic": [64, 65, 114, 119, 120, 130, 132], "compar": [64, 65, 117, 131, 509, 510, 513, 517, 518, 771, 772, 773, 775, 776, 777, 780, 782, 785], "configur": [64, 65, 108, 109, 111, 123, 223, 266, 731, 744], "container_rightmost": [64, 65], "common_key_chain": [64, 65, 122], "across": [64, 65, 110, 115, 117, 118, 122, 123, 126, 223, 232, 233, 244, 245, 247, 248, 249, 250, 251, 255, 265, 266, 509, 517, 518, 731, 737, 766, 768], "properti": [64, 65, 115, 117, 118, 122, 130, 131, 132, 223, 235, 862, 863, 866, 867, 868, 869, 871], "contains_sub_contain": [64, 65], "match": [64, 65, 122, 186, 192, 273, 463, 466, 509, 555], "contains_sub_structur": [64, 65], "copi": [64, 65, 111, 114, 119, 123, 128, 130, 131, 144, 145, 167, 169, 173, 186, 192, 223, 268, 509, 526, 574, 575, 667, 697, 700, 731, 733, 776, 782, 785], "create_if_abs": [64, 65], "inplac": [64, 65, 79, 80, 112, 115, 120, 121, 126, 130, 132, 509, 519, 546, 549, 550, 571, 579, 582, 583, 584, 585, 587, 588, 589, 590, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 839, 840, 866, 867, 868, 869, 870, 871], "correspond": [64, 65, 66, 67, 109, 114, 115, 116, 118, 121, 122, 123, 126, 186, 193, 273, 303, 306, 459, 462, 623, 625, 628, 643, 667, 673, 676, 701, 704, 754, 755, 766, 767, 768, 771, 772, 773, 775, 787, 804, 807, 808, 811, 812, 816, 819], "alreadi": [64, 65, 108, 109, 119, 122, 126, 130, 145, 223, 273, 335, 338, 368, 442, 445, 467, 470, 505, 508, 623, 639, 829], "noth": [64, 65, 109], "cutoff_at_depth": [64, 65], "depth_cutoff": [64, 65], "summari": [64, 65, 109, 186, 201, 202, 203, 215, 216, 217, 223, 236, 237, 509, 525, 529, 543, 579, 604, 609], "cutoff_at_height": [64, 65], "height_cutoff": [64, 65], "deep_copi": [64, 65, 131], "intern": [64, 65, 114, 121, 122, 124, 125, 223, 579, 608, 731, 732, 741, 742, 841, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 872, 873], "dev": [64, 65, 66, 68, 108, 118, 124, 128, 130, 132, 223, 232, 257], "belong": [64, 65, 132], "dev_clon": [64, 65, 223], "clone": [64, 65, 109, 111, 223, 244, 245, 246, 247], "dev_dist": [64, 65, 223], "distribut": [64, 65, 110, 124, 145, 223, 244, 248, 249, 250, 251, 610, 618, 651, 652, 655, 657, 660, 662, 665, 754, 755, 756, 757, 759, 760, 762, 850, 858, 862, 863], "along": [64, 65, 113, 125, 167, 176, 177, 223, 248, 249, 250, 251, 252, 253, 254, 255, 267, 509, 527, 528, 537, 577, 623, 635, 647, 648, 649, 651, 657, 660, 662, 665, 667, 673, 676, 685, 688, 693, 696, 701, 704, 706, 711, 714, 719, 722, 727, 728, 729, 730, 754, 765, 766, 767, 768, 776, 777, 780, 782, 785, 787, 788, 791, 792, 795, 796, 799, 800, 803, 804, 807, 808, 811, 812, 815, 816, 819, 820, 821, 824, 825, 828], "split": [64, 65, 107, 109, 127, 128, 145, 223, 232, 248, 249, 250, 251, 265, 266, 267, 509, 555, 667, 829], "dev_str": [64, 65], "mode": [64, 65, 108, 115, 122, 145, 164, 165, 223, 252, 253, 254, 255, 267, 273, 286, 442, 445, 623, 641], "diff_kei": [64, 65], "detect_key_diff": [64, 65], "detect_value_diff": [64, 65], "detect_shape_diff": [64, 65], "thei": [64, 65, 110, 112, 113, 115, 118, 120, 122, 123, 124, 125, 130, 131, 132, 133, 145, 186, 213, 727, 728, 729, 754, 755, 829, 872, 873], "treat": [64, 65, 129, 133, 164, 165], "detect": [64, 65, 126, 131, 132, 731, 732, 742], "without": [64, 65, 109, 113, 118, 121, 122, 124, 126, 128, 130, 131, 132, 144, 145, 509, 560, 565, 667, 697, 700, 731, 733, 771, 772, 773, 775], "flag": [64, 65, 109, 125, 130, 223, 242, 579, 591], "container0": [64, 65], "einops_rearrang": [64, 65, 509], "axes_length": [64, 65, 509, 531, 532, 533], "rearrang": [64, 65, 509, 531, 533], "addit": [64, 65, 108, 109, 113, 114, 117, 122, 123, 130, 131, 133, 223, 268, 273, 286, 509, 531, 532, 533, 749, 750, 753, 850, 860], "einops_reduc": [64, 65, 509], "reduct": [64, 65, 123, 130, 509, 532, 561, 562, 820, 821, 824, 825, 828, 829], "reduc": [64, 65, 130, 223, 267, 509, 532, 623, 641, 766, 767, 768, 787, 792, 795, 796, 799, 800, 803, 804, 807, 808, 811, 812, 816, 819, 820, 821, 824, 825, 828], "One": [64, 65, 123, 128, 130, 131, 509, 532, 667, 697, 700, 754, 756, 757], "callabl": [64, 65, 122, 128, 146, 147, 148, 149, 150, 151, 152, 153, 154, 164, 165, 186, 207, 208, 223, 267, 509, 515, 520, 530, 532, 727, 728, 729, 730, 731, 737, 741, 742, 743], "einops_repeat": [64, 65, 509], "find_sub_contain": [64, 65], "sub_cont_to_find": [64, 65], "exsit": [64, 65], "find_sub_structur": [64, 65], "sub_struc_to_find": [64, 65], "flatten_key_chain": [64, 65, 131, 862, 863], "__": [64, 65, 115, 131], "above_height": [64, 65, 131], "below_depth": [64, 65, 131], "format_key_chain": [64, 65], "format_fn": [64, 65], "format": [64, 65, 111, 114, 123, 124, 128, 130, 131, 186, 204, 223, 243, 787, 788, 791, 815, 829], "string": [64, 65, 119, 123, 124, 128, 131, 186, 190, 191, 204, 210, 222, 223, 239, 240, 241, 242, 256, 262, 268, 269, 272, 509, 529], "from_disk_as_hdf5": [64, 65, 131], "h5_obj_or_filepath": [64, 65], "slice_obj": [64, 65], "load": [64, 65, 145], "disk": [64, 65, 131], "h5py": [64, 65], "file": [64, 65, 108, 109, 111, 113, 114, 118, 119, 121, 122, 128, 131, 509, 566, 862, 863], "hdf5": [64, 65, 131, 862, 863], "filepath": [64, 65, 109], "h5": [64, 65], "from_disk_as_json": [64, 65, 131], "json_filepath": [64, 65], "json": [64, 65, 131], "were": [64, 65, 109, 113, 117, 122], "abl": [64, 65, 108, 109, 118, 123, 125, 130, 133], "dure": [64, 65, 118, 122, 123, 124, 125, 145, 164, 165, 223, 268, 509, 576, 579, 581, 582, 584, 592, 594, 623, 631, 634, 727, 728, 729, 730, 787, 808, 811, 816, 819, 862, 863, 866, 867, 868, 870], "from_disk_as_pickl": [64, 65, 131], "pickle_filepath": [64, 65], "pickl": [64, 65, 122, 131], "from_flat_list": [64, 65], "flat_list": [64, 65], "hierarchi": [64, 65, 131], "flat": [64, 65, 509, 561, 667, 693, 696], "popul": [64, 65, 123, 124, 128, 754, 755, 787, 808, 811, 816, 819], "from_numpi": [64, 65, 131], "gather": [64, 65, 509, 538], "indic": [64, 65, 111, 129, 133, 156, 161, 273, 471, 474, 509, 537, 538, 545, 558, 561, 562, 610, 611, 612, 613, 614, 615, 616, 617, 623, 649, 667, 701, 704, 731, 732, 734, 736, 738, 739, 740, 742, 745, 746, 747, 748, 749, 750, 753, 754, 755, 766, 767, 768, 769, 771, 772, 774, 776, 777, 780, 782, 785, 829, 832, 834, 850, 851, 852, 853, 854, 855, 856, 857, 862, 863], "accord": [64, 65, 108, 111, 118, 123, 186, 195, 198, 206, 273, 286, 327, 330, 442, 445, 509, 537, 561, 562, 623, 648, 667, 677, 680, 723, 726, 787, 808, 811, 816, 819], "index": [64, 65, 111, 118, 122, 130, 166, 167, 172, 178, 223, 264, 509, 515, 537, 538, 667, 711, 714, 731, 734, 735, 738, 739, 740, 745, 747, 766, 767, 768, 769, 771, 772, 773, 776, 777, 780, 832, 834], "gather_nd": [64, 65, 509, 829], "h5_file_s": [64, 65], "content": [64, 65, 110, 111, 125, 128, 131], "batch": [64, 65, 118, 122, 131, 223, 265, 266, 509, 536, 610, 619, 623, 649, 727, 728, 729, 730, 749, 750, 753, 864, 865], "handle_inplac": [64, 65], "prime": [64, 65], "overwritten": [64, 65, 119, 121], "has_kei": [64, 65], "query_kei": [64, 65], "somewher": [64, 65], "has_key_chain": [64, 65], "has_nan": [64, 65, 509], "include_inf": [64, 65, 509, 544, 578], "leafwis": [64, 65], "nan": [64, 65, 113, 114, 166, 186, 192, 273, 274, 277, 278, 281, 282, 285, 286, 289, 291, 294, 295, 298, 299, 303, 306, 335, 338, 339, 342, 343, 346, 360, 363, 364, 367, 368, 384, 387, 392, 395, 404, 407, 408, 411, 416, 419, 420, 423, 442, 445, 459, 462, 463, 466, 467, 470, 475, 478, 479, 482, 483, 486, 496, 505, 508, 509, 544, 578, 610, 622, 771, 772, 773, 775, 787, 792, 795, 796, 799, 800, 803, 808, 811, 812, 816, 819, 820, 821, 824, 825, 828], "well": [64, 65, 117, 125, 132, 133, 144, 509, 544, 623, 643], "inf": [64, 65, 166, 509, 544, 578, 623, 649], "wise": [64, 65, 128, 133, 156, 157, 158, 159, 160, 161, 162, 163, 273, 274, 277, 278, 286, 289, 291, 294, 299, 303, 306, 311, 314, 315, 318, 319, 322, 323, 326, 327, 330, 331, 334, 347, 350, 352, 355, 356, 359, 363, 371, 372, 375, 376, 379, 380, 383, 396, 399, 400, 403, 420, 423, 424, 427, 428, 431, 432, 435, 436, 439, 440, 441, 442, 445, 451, 454, 459, 462, 463, 466, 491, 495, 509, 535, 667, 668, 671], "identical_array_shap": [64, 65], "exclus": [64, 65, 118, 122, 133, 167, 168, 509, 527, 551, 552, 554, 579, 591, 754, 756, 757], "trace": [64, 65, 66, 67, 128, 145, 509, 551, 552, 554, 623], "identical_config": [64, 65], "identical_structur": [64, 65], "if_exist": [64, 65], "inplace_upd": [64, 65, 125, 509, 839, 840], "key_chains_contain": [64, 65], "sub_str": [64, 65], "join": [64, 65, 667, 673, 676, 711, 714, 829], "list_stack": [64, 65, 131], "dim": [64, 65, 123, 509, 558, 850, 861], "func": [64, 65, 122, 164, 165, 223, 267, 509, 520, 579, 586, 731, 744], "map_cont": [64, 65], "include_self": [64, 65], "possibi": [64, 65], "place": [64, 65, 109, 112, 113, 114, 115, 117, 118, 122, 124, 126, 133, 167, 168, 169, 170, 171, 172, 174, 175, 179, 180, 181, 184, 185, 186, 195, 198, 223, 268, 273, 286, 291, 294, 311, 314, 331, 334, 335, 338, 343, 368, 467, 470, 483, 486, 487, 490, 496, 509, 537, 547, 548, 549, 610, 613, 622, 623, 626, 667, 681, 684, 685, 688, 701, 704, 749, 750, 753, 771, 772, 773, 776, 777, 780, 787, 792, 795, 820, 821, 824, 866, 867, 868, 869, 870, 871], "matrix_norm": [64, 65, 623], "ord": [64, 65, 623, 635, 649], "matrix": [64, 65, 167, 178, 182, 183, 509, 510, 513, 521, 610, 619, 623, 624, 626, 627, 628, 629, 630, 631, 634, 635, 636, 637, 638, 640, 641, 643, 644, 645, 647, 650, 850, 860], "p": [64, 65, 77, 78, 108, 109, 167, 178, 509, 521, 522, 523, 524, 610, 618, 623, 635, 649, 850, 858], "integ": [64, 65, 122, 123, 130, 167, 168, 174, 186, 209, 212, 214, 273, 274, 277, 311, 314, 315, 318, 319, 322, 323, 326, 327, 330, 331, 334, 335, 338, 350, 368, 371, 372, 375, 436, 439, 459, 462, 463, 466, 467, 470, 505, 508, 623, 636, 648, 649, 667, 706, 754, 756, 757, 764, 787, 792, 795, 796, 799, 800, 803, 804, 807, 808, 811, 812, 816, 819, 820, 821, 824, 825, 828], "flatten": [64, 65, 509, 536, 623, 639, 649, 667, 693, 696, 701, 704, 766, 767, 768, 771, 772, 773, 775], "left": [64, 65, 108, 109, 115, 123, 273, 319, 322, 623, 628, 635, 644, 766, 767, 829], "broadcast": [64, 65, 113, 114, 115, 122, 123, 156, 159, 186, 193, 194, 223, 268, 273, 274, 277, 278, 281, 282, 285, 286, 289, 291, 294, 295, 298, 299, 303, 306, 311, 314, 315, 318, 319, 322, 323, 326, 327, 330, 331, 334, 335, 338, 339, 342, 343, 346, 347, 350, 352, 355, 360, 363, 364, 367, 368, 371, 372, 375, 379, 380, 383, 384, 387, 388, 391, 392, 395, 396, 399, 400, 403, 404, 407, 408, 411, 412, 415, 416, 419, 420, 423, 424, 427, 428, 431, 432, 435, 436, 439, 440, 441, 442, 445, 447, 450, 451, 454, 459, 462, 463, 466, 467, 470, 471, 474, 475, 478, 479, 482, 483, 486, 487, 490, 491, 495, 496, 509, 522, 524, 535, 623, 631, 634, 635, 637, 640, 643, 648, 649, 651, 652, 655, 657, 660, 662, 665, 667, 668, 671, 681, 684, 685, 688, 689, 692, 693, 696, 701, 704, 707, 710, 711, 714, 715, 718, 754, 756, 757, 766, 767, 768, 776, 782, 785, 787, 792, 795, 796, 799, 800, 803, 804, 807, 808, 811, 812, 816, 819, 820, 821, 824, 825, 828], "correctli": [64, 65, 108, 117, 122, 123, 126, 132, 145, 623, 635, 766, 767], "max_depth": [64, 65, 223, 227, 230, 237, 247, 251, 255, 509, 543, 731, 743], "multi_map": [64, 65, 122], "map_nest": [64, 65, 75, 76, 85, 86, 89, 90, 289, 303, 305, 311, 313, 319, 321, 323, 325, 327, 329, 331, 333, 350, 354, 355, 363, 371, 372, 374, 378, 379, 380, 382, 396, 398, 400, 402, 420, 422, 424, 426, 432, 434, 436, 438, 451, 453, 459, 461, 463, 465, 631, 633, 673, 675, 711, 713], "leftmost": [64, 65, 731, 744], "multi_map_in_static_method": [64, 65, 122], "fn_name": [64, 65], "num_arrai": [64, 65], "overwrite_at_key_chain": [64, 65], "overwrit": [64, 65, 125, 128, 223, 267], "target_dict": [64, 65], "return_dict": [64, 65], "prune_empti": [64, 65], "keep_non": [64, 65], "empti": [64, 65, 66, 67, 121, 123, 124, 167, 168, 787, 808, 811, 812, 820, 821, 824, 825, 828], "prune_key_chain": [64, 65], "key1": [64, 65, 132], "key2": [64, 65], "key3": [64, 65], "prune_key_from_key_chain": [64, 65], "absolut": [64, 65, 107, 273, 274, 277, 623, 642], "certain": [64, 65, 108, 145, 167, 168, 176, 177], "decid": [64, 65, 108, 731, 742], "remov": [64, 65, 109, 110, 111, 114, 117, 118, 123, 125, 133, 623, 627, 631, 634, 647, 667, 707, 710, 727, 728, 729], "prune_kei": [64, 65], "prune_keys_from_key_chain": [64, 65], "remove_key_length_limit": [64, 65], "remove_print_limit": [64, 65], "reshape_lik": [64, 65], "leading_shap": [64, 65], "return_cont": [64, 65], "restructur": [64, 65], "keep_orig": [64, 65], "transpos": [64, 65, 130, 133, 223, 254, 610, 612, 614, 616, 623, 638, 640, 829, 850, 852, 854, 856], "old": [64, 65, 108, 125], "keep": [64, 65, 108, 109, 116, 122, 129, 131, 133, 509, 577], "start": [64, 65, 107, 108, 109, 110, 111, 112, 114, 115, 123, 127, 128, 130, 131, 132, 144, 145, 167, 168, 176, 177, 223, 238], "restructure_key_chain": [64, 65], "keychain_map": [64, 65], "set_at_key_chain": [64, 65], "set_at_kei": [64, 65], "set_framework": [64, 65, 128, 130, 131, 133], "set_ivy_backend": [64, 65], "ivy_backend": [64, 65], "attribut": [64, 65, 114, 122, 123, 129, 130, 131, 132, 186, 206, 207, 208, 209, 223, 263], "show": [64, 65, 108, 109, 115, 125, 144, 145, 829], "show_sub_contain": [64, 65], "sub_cont_or_keychain": [64, 65], "shuffl": [64, 65, 754, 829], "seed_valu": [64, 65, 754, 764], "align": [64, 65, 108, 128, 130, 829, 835], "seed": [64, 65, 66, 67, 754, 829], "shuffle_h5_fil": [64, 65], "dataset": [64, 65, 131, 143, 829], "size_ordered_arrai": [64, 65], "keychain": [64, 65], "smallest": [64, 65, 186, 206, 209, 273, 335, 338], "largest": [64, 65, 144, 186, 206, 209, 623, 644], "slice_kei": [64, 65], "key_slic": [64, 65], "all_depth": [64, 65], "slice_via_kei": [64, 65], "sort_by_kei": [64, 65], "num_or_size_split": [64, 65, 128, 667, 706], "with_remaind": [64, 65, 667, 706], "constitu": [64, 65, 133], "dimension": [64, 65, 167, 168, 172, 178, 623, 625, 626, 631, 634, 637, 639, 640, 648, 649, 667, 706, 766, 767, 768, 769, 787, 792, 795, 796, 799, 800, 803, 804, 807, 808, 811, 812, 816, 819, 820, 821, 824, 825, 828], "evenli": [64, 65, 167, 168, 176, 177, 667, 706], "store": [64, 65, 114, 119, 121, 122, 128, 130, 131, 132, 509, 536, 579, 608, 623, 647, 667, 706, 862, 863], "stop_gradi": [64, 65, 66, 67, 79, 80, 132, 223, 267, 579, 582, 583, 584, 585, 587, 588, 589, 590, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 727, 728, 729, 730, 829, 866, 867, 868, 869, 870, 871], "preserve_typ": [64, 65, 579, 605], "stop": [64, 65, 128, 145, 167, 168, 176, 177, 223, 238, 267, 579, 582, 584, 587, 589, 592, 594, 596, 598, 600, 602, 605, 727, 728, 729, 730, 866, 867, 868, 869, 870, 871], "alwai": [64, 65, 109, 110, 113, 114, 118, 119, 121, 122, 125, 126, 128, 130, 145, 186, 192, 273, 286, 442, 445, 509, 549, 579, 591, 605], "structural_diff": [64, 65], "to_devic": [64, 65, 223, 242], "move": [64, 65, 109, 113, 223, 268], "cuda": [64, 65, 128, 131, 145, 167, 176, 177, 223, 232, 239, 264, 509, 537, 538, 558, 561, 562, 754, 755, 756, 757, 760, 762, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 870, 872, 873], "cpu": [64, 65, 109, 124, 145, 167, 176, 177, 223, 242, 243, 245, 259, 262, 264, 268, 269, 271, 272, 509, 537, 538, 558, 561, 562, 754, 755, 756, 757, 759, 760, 762, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 870, 872, 873], "target": [64, 65, 112, 127, 131, 132, 133, 223, 241, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 829], "to_dict": [64, 65], "to_disk_as_hdf5": [64, 65, 131], "starting_index": [64, 65], "max_batch_s": [64, 65], "read": [64, 65, 111, 829], "r": [64, 65, 108, 509, 518, 577, 623, 641, 650], "w": [64, 65, 79, 80, 128, 131, 132, 509, 518, 579, 581, 582, 584, 585, 587, 589, 590, 592, 594, 595, 596, 598, 599, 600, 602, 603, 610, 611, 612, 613, 614, 615, 616, 617], "later": [64, 65, 509, 520], "append": [64, 65, 111, 117, 128, 131, 273, 319, 322, 623, 627, 631, 634], "to_disk_as_json": [64, 65, 131], "to_disk_as_pickl": [64, 65, 131], "to_flat_list": [64, 65], "to_iter": [64, 65, 122], "leaf_keys_onli": [64, 65], "to_iterator_kei": [64, 65], "to_iterator_valu": [64, 65], "to_json": [64, 65], "to_list": [64, 65, 509, 829], "to_multi_dev": [64, 65], "multidevcontain": [64, 65, 66], "distributedarrai": [64, 65], "to_numpi": [64, 65, 131, 509, 829], "update_backend": [64, 65], "to_raw": [64, 65], "raw": [64, 65, 114], "trim_kei": [64, 65], "max_length": [64, 65], "try_kc": [64, 65], "tri": [64, 65], "self": [64, 65, 121, 122, 128, 130, 131, 132, 133, 195, 196, 197, 223, 274, 275, 276, 279, 280, 281, 282, 283, 284, 287, 288, 289, 291, 292, 293, 295, 296, 297, 300, 301, 302, 303, 304, 305, 307, 308, 309, 311, 312, 313, 315, 316, 317, 319, 320, 321, 323, 324, 325, 327, 328, 329, 331, 332, 333, 335, 336, 337, 340, 341, 342, 344, 345, 346, 348, 349, 350, 353, 354, 355, 356, 357, 358, 361, 362, 363, 364, 365, 366, 369, 370, 371, 372, 373, 374, 377, 378, 379, 380, 381, 382, 384, 385, 386, 388, 389, 390, 392, 393, 394, 396, 397, 398, 400, 401, 402, 404, 405, 406, 408, 409, 410, 412, 413, 414, 416, 417, 418, 420, 421, 422, 424, 425, 426, 428, 429, 430, 432, 433, 434, 436, 437, 438, 442, 443, 444, 447, 448, 449, 451, 452, 453, 455, 456, 457, 459, 460, 461, 463, 464, 465, 467, 468, 469, 471, 472, 473, 475, 476, 477, 479, 480, 481, 483, 484, 485, 487, 488, 489, 491, 493, 494, 498, 499, 500, 502, 503, 504, 505, 506, 507, 510, 511, 512, 522, 523, 582, 583, 587, 588, 592, 593, 596, 597, 600, 601, 631, 632, 633, 652, 653, 654, 657, 658, 659, 662, 663, 664, 668, 669, 670, 673, 674, 675, 677, 678, 679, 681, 682, 683, 685, 686, 687, 689, 690, 691, 693, 694, 695, 697, 698, 699, 701, 702, 703, 707, 708, 709, 711, 712, 713, 715, 716, 717, 719, 720, 721, 723, 724, 725, 750, 751, 752, 760, 761, 777, 778, 779, 782, 783, 784, 788, 789, 790, 792, 793, 794, 796, 797, 798, 800, 801, 802, 804, 805, 806, 808, 809, 810, 813, 814, 815, 816, 817, 818, 821, 822, 823, 825, 826, 827, 829, 866, 870], "arbitrari": [64, 65, 117, 118, 122, 125, 126, 132, 145, 167, 178, 186, 193, 214, 223, 252, 253, 255], "concatten": [64, 65, 223, 252, 253, 254, 255, 267], "unstack": [64, 65, 128, 131, 509, 829], "dim_siz": [64, 65, 223], "update_config": [64, 65], "vector_norm": [64, 65, 623], "global_norm": [64, 65, 77, 78, 522, 523], "vector": [64, 65, 144, 167, 178, 509, 522, 524, 610, 619, 623, 625, 628, 631, 634, 639, 644, 645, 648, 649, 650, 850, 860], "with_default_key_color": [64, 65], "with_entries_as_list": [64, 65], "with_ivy_backend": [64, 65], "with_key_length_limit": [64, 65, 131], "with_print_ind": [64, 65, 131], "with_print_limit": [64, 65, 131], "with_print_line_spac": [64, 65], "containerwithcr": [66, 67, 69], "containerwithdatatyp": [66, 67, 71], "containerwithdevic": [66, 67, 73], "containerwithelementwis": [66, 67, 75, 122], "containerwithgener": [66, 67, 77], "containerwithgradi": [66, 67, 79], "containerwithimag": [66, 67, 81], "containerwithlay": [66, 67, 83], "containerwithlinearalgebra": [66, 67, 85], "containerwithloss": [66, 67, 87], "containerwithmanipul": [66, 67, 89, 110], "containerwithnorm": [66, 67, 91], "containerwithrandom": [66, 67, 93], "containerwithsearch": [66, 67, 95], "containerwithset": [66, 67, 97], "containerwithsort": [66, 67, 99], "containerwithstatist": [66, 67, 101], "containerwithutil": [66, 67, 103], "__add__": [66, 67, 114, 115, 121, 122, 126, 130], "special": [66, 67, 110, 113, 114, 115, 121, 126, 273, 274, 277, 278, 281, 282, 285, 286, 289, 291, 294, 295, 298, 299, 303, 306, 331, 334, 335, 338, 339, 342, 343, 346, 360, 363, 364, 367, 368, 404, 407, 408, 411, 416, 419, 420, 423, 442, 445, 459, 462, 463, 466, 467, 470, 471, 474, 475, 478, 479, 482, 483, 486, 496, 505, 508, 787, 792, 795, 796, 799, 800, 803, 808, 811, 812, 816, 819], "11": [66, 67, 75, 76, 93, 94, 115, 122, 273, 286, 288, 290, 311, 314, 420, 467, 470, 509, 527, 537, 623, 627, 639, 651, 662, 665, 667, 685, 688, 693, 696, 754, 756, 757, 758, 766, 770, 771, 772, 787, 788, 791, 815], "__radd__": [66, 67, 114, 115], "revers": [66, 67, 110, 114, 115, 133, 145, 509, 530, 667, 685, 688], "adam_step": [66, 67, 579], "arang": [66, 67, 123, 167, 176, 177, 787, 788, 791, 815, 829], "arg_info": [66, 67, 509], "arg_nam": [66, 67, 509], "argmax": [66, 67, 766, 829], "argmin": [66, 67, 766, 829], "array_equ": [66, 67, 509], "as_ivy_dev": [66, 67, 130, 223], "as_ivy_dtyp": [66, 67, 186], "as_native_dev": [66, 67, 223], "as_native_dtyp": [66, 67, 186], "asarrai": [66, 67, 125, 167, 610, 611, 771, 773], "assert_supports_inplac": [66, 67, 509], "astyp": [66, 67, 123, 125, 186], "broadcast_arrai": [66, 67, 186], "broadcast_to": [66, 67, 123, 186], "cache_fn": [66, 67, 118, 509], "choleski": [66, 67, 623], "clear_mem_on_dev": [66, 67, 223], "clip_matrix_norm": [66, 67, 509], "closest_valid_dtyp": [66, 67, 186], "container_typ": [66, 67, 509], "conv1d": [66, 67, 610, 850], "conv1d_transpos": [66, 67, 610], "conv2d": [66, 67, 610, 829, 850], "conv2d_transpos": [66, 67, 610], "conv3d": [66, 67, 610, 850], "conv3d_transpos": [66, 67, 610], "copy_arrai": [66, 67, 509], "cross": [66, 67, 623, 651, 652, 655, 657, 660, 662, 665, 829], "cumprod": [66, 67, 133, 509], "cumsum": [66, 67, 509, 829], "current_backend_str": [66, 67, 509], "default_devic": [66, 67, 124, 128, 223, 261, 264, 271], "default_dtyp": [66, 67, 118, 123, 186], "default_float_dtyp": [66, 67, 123, 186], "default_int_dtyp": [66, 67, 123, 186], "depthwise_conv2d": [66, 67, 610, 829], "det": [66, 67, 623], "dev_clone_arrai": [66, 67, 223], "dev_clone_it": [66, 67, 223], "dev_clone_nest": [66, 67, 223], "dev_dist_arrai": [66, 67, 223], "dev_dist_it": [66, 67, 223], "dev_dist_nest": [66, 67, 223], "dev_unifi": [66, 67, 223], "dev_unify_arrai": [66, 67, 223], "dev_unify_it": [66, 67, 223], "dev_unify_nest": [66, 67, 223], "dev_util": [66, 67, 124, 223], "diagon": [66, 67, 167, 172, 182, 183, 623, 647], "dropout": [66, 67, 131, 610, 850, 861], "dtype_bit": [66, 67, 186], "eigh": [66, 67, 623], "eigvalsh": [66, 67, 623], "empty_lik": [66, 67, 167], "execute_with_gradi": [66, 67, 122, 131, 132, 133, 145, 579, 829], "ey": [66, 67, 133, 167, 610, 613, 617], "finfo": [66, 67, 186], "floormod": [66, 67, 509, 829], "fourier_encod": [66, 67, 509], "from_dlpack": [66, 67, 167], "full_lik": [66, 67, 167], "function_supported_dtyp": [66, 67, 186], "function_unsupported_dtyp": [66, 67, 186], "gelu": [66, 67, 156, 836], "get_all_arrays_in_memori": [66, 67, 509], "get_all_ivy_arrays_on_dev": [66, 67, 124, 223], "get_min_bas": [66, 67, 509], "get_min_denomin": [66, 67, 509], "get_num_dim": [66, 67, 509, 829], "get_referrers_recurs": [66, 67, 509], "gpu_is_avail": [66, 67, 223], "handle_nest": [66, 67, 118, 122, 146], "handle_out_argu": [66, 67, 120, 123, 124, 125, 126, 146], "iinfo": [66, 67, 186], "indices_wher": [66, 67, 509, 829], "infer_devic": [66, 67, 123, 124, 126, 146], "infer_dtyp": [66, 67, 123, 124, 126, 146], "inplace_arrays_support": [66, 67, 509], "inplace_decr": [66, 67, 509], "inplace_incr": [66, 67, 509], "inplace_variables_support": [66, 67, 509], "inputs_to_native_arrai": [66, 67, 121, 146], "inv": [66, 67, 130, 623, 829], "invalid_dtyp": [66, 67, 186], "is_float_dtyp": [66, 67, 186], "is_int_dtyp": [66, 67, 186, 509, 575], "is_ivy_contain": [66, 67, 509], "leaky_relu": [66, 67, 156, 829], "linear": [66, 67, 114, 128, 131, 132, 133, 156, 157, 158, 159, 509, 536, 610, 618, 643, 829, 850, 851, 852, 853, 854, 855, 856, 857], "linspac": [66, 67, 128, 167, 168, 829], "logspac": [66, 67, 128, 167], "lstm_updat": [66, 67, 128, 610], "match_kwarg": [66, 67, 509], "matrix_pow": [66, 67, 623], "matrix_rank": [66, 67, 623], "matrix_transpos": [66, 67, 130, 623], "meshgrid": [66, 67, 167], "multi_head_attent": [66, 67, 122, 125, 610], "multinomi": [66, 67, 754], "nonzero": [66, 67, 273, 286, 442, 445, 766], "num_arrays_in_memori": [66, 67, 509], "num_cpu_cor": [66, 67, 124, 223], "num_gpu": [66, 67, 117, 124, 223], "num_ivy_arrays_on_dev": [66, 67, 223], "one_hot": [66, 67, 133, 509, 829], "ones_lik": [66, 67, 133, 167, 829], "outer": [66, 67, 623, 727, 728, 729, 730], "outputs_to_ivy_arrai": [66, 67, 121, 123, 124, 126, 146], "percent_used_mem_on_dev": [66, 67, 223], "pinv": [66, 67, 623, 829], "print_all_arrays_in_memori": [66, 67, 509], "print_all_ivy_arrays_on_dev": [66, 67, 223], "promote_typ": [66, 67, 186], "qr": [66, 67, 623], "randint": [66, 67, 93, 94, 754, 758, 829], "random_norm": [66, 67, 610, 613, 616, 617, 623, 644, 754, 771, 772], "result_typ": [66, 67, 123, 186], "scaled_dot_product_attent": [66, 67, 610], "scatter_flat": [66, 67, 509], "scatter_nd": [66, 67, 130, 509, 829], "set_default_devic": [66, 67, 124, 223, 271], "set_default_dtyp": [66, 67, 118, 123, 186], "set_default_float_dtyp": [66, 67, 123, 186], "set_default_int_dtyp": [66, 67, 123, 186], "set_min_bas": [66, 67, 509], "set_min_denomin": [66, 67, 509], "set_queue_timeout": [66, 67, 509], "set_split_factor": [66, 67, 223], "set_tmp_dir": [66, 67, 509], "set_with_grad": [66, 67, 579], "shape_to_tupl": [66, 67, 123, 509], "sigmoid": [66, 67, 128, 131, 132, 156, 829], "slogdet": [66, 67, 623], "softplu": [66, 67, 156, 829], "solv": [66, 67, 129, 144, 623], "split_factor": [66, 67, 223, 232], "split_func_cal": [66, 67, 223], "stable_divid": [66, 67, 118, 509], "stable_pow": [66, 67, 509], "static_ab": [66, 67], "static_aco": [66, 67], "static_acosh": [66, 67], "static_adam_step": [66, 67], "static_al": [66, 67], "static_ani": [66, 67], "static_arang": [66, 67], "static_arg_info": [66, 67], "static_arg_nam": [66, 67], "static_argmax": [66, 67], "static_argmin": [66, 67], "static_arrai": [66, 67], "static_array_equ": [66, 67], "static_arrays_equ": [66, 67], "static_as_ivy_dev": [66, 67], "static_as_ivy_dtyp": [66, 67], "static_as_native_dev": [66, 67], "static_as_native_dtyp": [66, 67], "static_asarrai": [66, 67], "static_asin": [66, 67], "static_asinh": [66, 67], "static_assert_supports_inplac": [66, 67], "static_astyp": [66, 67], "static_atan": [66, 67], "static_atan2": [66, 67], "static_atanh": [66, 67], "static_bitwise_and": [66, 67], "static_bitwise_invert": [66, 67], "static_bitwise_left_shift": [66, 67], "static_bitwise_or": [66, 67], "static_bitwise_right_shift": [66, 67], "static_bitwise_xor": [66, 67], "static_broadcast_arrai": [66, 67], "static_broadcast_to": [66, 67], "static_cache_fn": [66, 67], "static_ceil": [66, 67], "static_choleski": [66, 67], "static_clear_mem_on_dev": [66, 67], "static_clip_matrix_norm": [66, 67], "static_clip_vector_norm": [66, 67], "static_closest_valid_dtyp": [66, 67], "static_concat": [66, 67], "static_constant_pad": [66, 67], "static_container_typ": [66, 67], "static_conv1d": [66, 67], "static_conv1d_transpos": [66, 67], "static_conv2d": [66, 67], "static_conv2d_transpos": [66, 67], "static_conv3d": [66, 67], "static_conv3d_transpos": [66, 67], "static_copy_arrai": [66, 67], "static_co": [66, 67], "static_cosh": [66, 67], "static_cross": [66, 67], "static_cumprod": [66, 67], "static_cumsum": [66, 67], "static_current_backend": [66, 67], "static_current_backend_str": [66, 67], "static_default": [66, 67], "static_default_devic": [66, 67], "static_default_dtyp": [66, 67], "static_default_float_dtyp": [66, 67], "static_default_int_dtyp": [66, 67], "static_depthwise_conv2d": [66, 67], "static_det": [66, 67], "static_dev": [66, 67], "static_dev_clon": [66, 67], "static_dev_clone_arrai": [66, 67], "static_dev_clone_it": [66, 67], "static_dev_clone_nest": [66, 67], "static_dev_dist": [66, 67], "static_dev_dist_arrai": [66, 67], "static_dev_dist_it": [66, 67], "static_dev_dist_nest": [66, 67], "static_dev_unifi": [66, 67], "static_dev_unify_arrai": [66, 67], "static_dev_unify_it": [66, 67], "static_dev_unify_nest": [66, 67], "static_dev_util": [66, 67], "static_diagon": [66, 67], "static_dropout": [66, 67], "static_dtyp": [66, 67], "static_dtype_bit": [66, 67], "static_eigh": [66, 67], "static_eigvalsh": [66, 67], "static_einops_rearrang": [66, 67], "static_einops_reduc": [66, 67], "static_einops_repeat": [66, 67], "static_einsum": [66, 67], "static_empti": [66, 67], "static_empty_lik": [66, 67], "static_equ": [66, 67], "static_erf": [66, 67], "static_execute_with_gradi": [66, 67], "static_exist": [66, 67], "static_exp": [66, 67], "static_expand_dim": [66, 67], "static_expm1": [66, 67], "static_ey": [66, 67], "static_finfo": [66, 67], "static_flip": [66, 67], "static_floor": [66, 67], "static_floor_divid": [66, 67], "static_floormod": [66, 67], "static_fourier_encod": [66, 67], "static_from_dlpack": [66, 67], "static_ful": [66, 67], "static_full_lik": [66, 67], "static_function_supported_dtyp": [66, 67], "static_function_unsupported_dtyp": [66, 67], "static_gath": [66, 67], "static_gather_nd": [66, 67], "static_gelu": [66, 67], "static_get_all_arrays_in_memori": [66, 67], "static_get_all_ivy_arrays_on_dev": [66, 67], "static_get_min_bas": [66, 67], "static_get_min_denomin": [66, 67], "static_get_num_dim": [66, 67], "static_get_referrers_recurs": [66, 67], "static_gpu_is_avail": [66, 67], "static_great": [66, 67], "static_greater_equ": [66, 67], "static_handle_nest": [66, 67], "static_handle_out_argu": [66, 67], "static_has_nan": [66, 67], "static_iinfo": [66, 67], "static_indices_wher": [66, 67], "static_infer_devic": [66, 67], "static_infer_dtyp": [66, 67], "static_inplace_arrays_support": [66, 67], "static_inplace_decr": [66, 67], "static_inplace_incr": [66, 67], "static_inplace_upd": [66, 67], "static_inplace_variables_support": [66, 67], "static_inputs_to_native_arrai": [66, 67], "static_inv": [66, 67], "static_invalid_dtyp": [66, 67], "static_is_arrai": [66, 67], "static_is_float_dtyp": [66, 67], "static_is_int_dtyp": [66, 67], "static_is_ivy_arrai": [66, 67], "static_is_ivy_contain": [66, 67], "static_is_native_arrai": [66, 67], "static_is_vari": [66, 67], "static_isfinit": [66, 67], "static_isinf": [66, 67], "static_isnan": [66, 67], "static_layer_norm": [66, 67], "static_leaky_relu": [66, 67], "static_less": [66, 67], "static_less_equ": [66, 67], "static_linear": [66, 67], "static_linspac": [66, 67], "static_log": [66, 67], "static_log10": [66, 67], "static_log1p": [66, 67], "static_log2": [66, 67], "static_logaddexp": [66, 67], "static_logical_and": [66, 67], "static_logical_not": [66, 67], "static_logical_or": [66, 67], "static_logical_xor": [66, 67], "static_logspac": [66, 67], "static_lstm_upd": [66, 67], "static_match_kwarg": [66, 67], "static_matmul": [66, 67], "static_matrix_norm": [66, 67], "static_matrix_pow": [66, 67], "static_matrix_rank": [66, 67], "static_matrix_transpos": [66, 67], "static_max": [66, 67], "static_maximum": [66, 67], "static_mean": [66, 67], "static_meshgrid": [66, 67], "static_min": [66, 67], "static_minimum": [66, 67], "static_multi_head_attent": [66, 67], "static_multinomi": [66, 67], "static_multiprocess": [66, 67], "static_native_arrai": [66, 67], "static_neg": [66, 67], "static_nonzero": [66, 67], "static_not_equ": [66, 67], "static_num_arrays_in_memori": [66, 67], "static_num_cpu_cor": [66, 67], "static_num_gpu": [66, 67], "static_num_ivy_arrays_on_dev": [66, 67], "static_one_hot": [66, 67], "static_on": [66, 67], "static_ones_lik": [66, 67], "static_out": [66, 67], "static_outputs_to_ivy_arrai": [66, 67], "static_percent_used_mem_on_dev": [66, 67], "static_permute_dim": [66, 67], "static_pinv": [66, 67], "static_posit": [66, 67], "static_pow": [66, 67], "static_print_all_arrays_in_memori": [66, 67], "static_print_all_ivy_arrays_on_dev": [66, 67], "static_prod": [66, 67], "static_promote_typ": [66, 67], "static_qr": [66, 67], "static_queue_timeout": [66, 67], "static_random_norm": [66, 67], "static_relu": [66, 67], "static_remaind": [66, 67], "static_repeat": [66, 67], "static_reshap": [66, 67], "static_result_typ": [66, 67], "static_round": [66, 67], "static_scaled_dot_product_attent": [66, 67], "static_scatter_flat": [66, 67], "static_scatter_nd": [66, 67], "static_se": [66, 67], "static_set_default_devic": [66, 67], "static_set_default_dtyp": [66, 67], "static_set_default_float_dtyp": [66, 67], "static_set_default_int_dtyp": [66, 67], "static_set_min_bas": [66, 67], "static_set_min_denomin": [66, 67], "static_set_queue_timeout": [66, 67], "static_set_split_factor": [66, 67], "static_set_tmp_dir": [66, 67], "static_set_with_grad": [66, 67], "static_shap": [66, 67], "static_shape_to_tupl": [66, 67], "static_shuffl": [66, 67], "static_sigmoid": [66, 67], "static_sign": [66, 67], "static_sin": [66, 67], "static_sinh": [66, 67], "static_slogdet": [66, 67], "static_softmax": [66, 67], "static_softplu": [66, 67], "static_solv": [66, 67], "static_split": [66, 67], "static_split_factor": [66, 67], "static_split_func_cal": [66, 67], "static_sqrt": [66, 67], "static_squar": [66, 67], "static_squeez": [66, 67], "static_stable_divid": [66, 67], "static_stable_pow": [66, 67], "static_stack": [66, 67], "static_std": [66, 67], "static_stop_gradi": [66, 67], "static_sum": [66, 67], "static_supports_inplac": [66, 67], "static_svd": [66, 67], "static_svdv": [66, 67], "static_swapax": [66, 67], "static_tanh": [66, 67], "static_tensordot": [66, 67], "static_til": [66, 67], "static_tmp_dir": [66, 67], "static_to_devic": [66, 67], "static_to_list": [66, 67], "static_to_native_arrays_and_back": [66, 67], "static_to_numpi": [66, 67], "static_to_scalar": [66, 67], "static_total_mem_on_dev": [66, 67], "static_tpu_is_avail": [66, 67], "static_trac": [66, 67], "static_tril": [66, 67], "static_triu": [66, 67], "static_trunc": [66, 67], "static_try_else_non": [66, 67], "static_type_promote_arrai": [66, 67], "static_unique_al": [66, 67], "static_unique_count": [66, 67], "static_unique_invers": [66, 67], "static_unique_valu": [66, 67], "static_unset_default_devic": [66, 67], "static_unset_default_dtyp": [66, 67], "static_unset_default_float_dtyp": [66, 67], "static_unset_default_int_dtyp": [66, 67], "static_unset_with_grad": [66, 67], "static_unstack": [66, 67], "static_used_mem_on_dev": [66, 67], "static_valid_dtyp": [66, 67], "static_value_is_nan": [66, 67], "static_var": [66, 67], "static_vari": [66, 67], "static_variable_data": [66, 67], "static_vecdot": [66, 67], "static_vector_norm": [66, 67], "static_vector_to_skew_symmetric_matrix": [66, 67], "static_wher": [66, 67], "static_with_grad": [66, 67], "static_zero_pad": [66, 67], "static_zero": [66, 67], "static_zeros_lik": [66, 67], "supports_inplac": [66, 67, 509], "svd": [66, 67, 623, 829], "svdval": [66, 67, 623], "tensordot": [66, 67, 623], "tmp_dir": [66, 67, 509], "to_native_arrays_and_back": [66, 67, 120, 126, 146], "to_scalar": [66, 67, 509], "total_mem_on_dev": [66, 67, 124, 223], "tpu_is_avail": [66, 67, 223], "tril": [66, 67, 167], "triu": [66, 67, 167], "try_else_non": [66, 67, 509], "type_promote_arrai": [66, 67, 186], "unique_al": [66, 67, 771], "unique_count": [66, 67, 771], "unique_invers": [66, 67, 771], "unique_valu": [66, 67, 771], "unset_default_devic": [66, 67, 223], "unset_default_dtyp": [66, 67, 186], "unset_default_float_dtyp": [66, 67, 186], "unset_default_int_dtyp": [66, 67, 186], "unset_with_grad": [66, 67, 579], "used_mem_on_dev": [66, 67, 223], "valid_dtyp": [66, 67, 186], "value_is_nan": [66, 67, 509], "variable_data": [66, 67, 579], "vecdot": [66, 67, 623], "vector_to_skew_symmetric_matrix": [66, 67, 623, 829], "with_grad": [66, 67, 579, 604], "zeros_lik": [66, 67, 167, 667, 668, 671, 829], "at_dev": [66, 68, 223, 236, 237], "int32": [71, 72, 123, 186, 195, 197, 198, 199, 207, 509, 574, 667, 681, 684, 787, 804, 807, 812], "int64": [71, 72, 123, 186, 195, 197, 198, 199, 207, 273, 327, 330, 766, 767, 768, 787, 804, 807, 812], "static_can_cast": [71, 72, 195], "from_": [71, 72, 186, 195, 198, 199], "static_add": [75, 76, 114, 115, 122, 420], "static_divid": [75, 76, 122, 371, 372], "static_multipli": [75, 76, 122, 442], "static_subtract": [75, 76, 122, 491], "static_tan": [75, 76, 115, 122, 302, 307, 504], "143": [75, 76, 115, 273, 302, 307, 496, 497, 499, 504], "16": [75, 76, 93, 94, 109, 115, 131, 273, 302, 307, 496, 497, 499, 504, 610, 616, 623, 627, 639, 756, 758, 766, 770, 787, 788, 791, 815], "38": [75, 76, 115, 273, 302, 307, 496, 497, 499, 504], "static_all_equ": [77, 78, 510, 512], "clip_vector_norm": [77, 78, 509], "max_norm": [77, 78, 509, 521, 522, 523, 524], "adam_upd": [79, 80, 132, 579], "dcdw": [79, 80, 579, 581, 582, 583, 584, 585, 587, 588, 589, 590, 592, 593, 594, 595, 596, 597, 598, 599], "lr": [79, 80, 131, 132, 579, 582, 583, 584, 585, 587, 588, 589, 590, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 866, 867, 868, 869, 870, 871], "mw_tm1": [79, 80, 579, 582, 583, 584, 585, 592, 593, 594, 595], "vw_tm1": [79, 80, 579, 582, 583, 584, 585, 592, 593, 594, 595], "beta1": [79, 80, 132, 579, 581, 582, 583, 584, 585, 592, 593, 594, 595, 866, 867, 868], "beta2": [79, 80, 132, 579, 581, 582, 583, 584, 585, 592, 593, 594, 595, 866, 867, 868], "999": [79, 80, 132, 579, 581, 582, 583, 584, 585, 592, 593, 594, 595, 866, 867, 868], "gradient_descent_upd": [79, 80, 579, 727, 728, 729, 730, 829], "lamb_upd": [79, 80, 579], "max_trust_ratio": [79, 80, 579, 592, 593, 594, 595, 866, 868], "decay_lambda": [79, 80, 579, 592, 593, 594, 595, 596, 597, 598, 599, 866, 868, 869], "lars_upd": [79, 80, 579], "optimizer_upd": [79, 80, 579], "effective_grad": [79, 80, 579, 600, 601, 602, 603], "static_adam_upd": [79, 80, 582], "static_gradient_descent_upd": [79, 80, 587], "static_lamb_upd": [79, 80, 592], "static_lars_upd": [79, 80, 596], "static_optimizer_upd": [79, 80, 600], "static_binary_cross_entropi": [87, 88, 652], "static_cross_entropi": [87, 88, 657], "static_sparse_cross_entropi": [87, 88, 662], "static_clip": [89, 90, 668], "static_rol": [89, 90, 115, 122, 668, 672, 701], "random_uniform": [93, 94, 124, 132, 754, 829], "static_randint": [93, 94, 756], "20": [93, 94, 130, 273, 331, 334, 360, 467, 470, 483, 486, 623, 627, 639, 646, 754, 756, 757, 758, 766, 769, 770, 787, 788, 791, 815], "15": [93, 94, 108, 115, 273, 311, 314, 467, 470, 610, 613, 623, 627, 639, 646, 667, 701, 704, 749, 750, 753, 754, 756, 757, 758, 766, 769, 771, 772, 787, 788, 791, 815], "12": [93, 94, 108, 115, 122, 273, 311, 314, 331, 334, 343, 467, 470, 509, 527, 541, 623, 627, 639, 646, 667, 685, 688, 693, 696, 701, 704, 749, 750, 753, 754, 756, 757, 758, 766, 770, 771, 772, 787, 788, 791, 815], "40": [93, 94, 273, 343, 483, 486, 623, 639, 756, 758, 787, 788, 791, 815], "gpu": [93, 94, 109, 124, 130, 145, 223, 242, 245, 258, 260, 264, 266, 271, 756, 758], "87": [93, 94, 756, 758], "62": [93, 94, 756, 758], "52": [93, 94, 623, 639, 756, 758, 771, 772, 787, 788, 791, 815], "95": [93, 94, 756, 758], "37": [93, 94, 273, 496, 749, 750, 753, 756, 758], "42": [93, 94, 133, 156, 162, 623, 639, 754, 756, 758, 764, 787, 788, 791, 815], "14": [93, 94, 111, 115, 122, 273, 331, 334, 610, 622, 623, 627, 639, 756, 758, 771, 772, 787, 788, 791, 815], "13": [93, 94, 115, 122, 273, 311, 314, 331, 334, 343, 483, 486, 509, 527, 610, 622, 623, 627, 639, 749, 750, 753, 756, 758, 766, 770, 771, 772, 787, 788, 791, 815], "static_random_uniform": [93, 94, 760], "static_argsort": [99, 100, 777], "static_sort": [99, 100, 782], "add_ivy_container_instance_method": 105, "containerexampl": [105, 106], "strongli": [107, 108, 829, 835], "welcom": [107, 108, 109, 829, 835], "skill": 107, "vetern": 107, "beginn": 107, "aspect": [107, 131, 829], "guid": [107, 108, 109, 117, 829], "through": [107, 109, 110, 112, 115, 118, 119, 122, 127, 128, 130, 131, 132, 133, 144, 273, 303, 306], "journei": [107, 829, 835], "inclusvi": 107, "big": [107, 145], "team": [107, 108, 109], "board": 107, "contributor": [107, 108, 109, 127, 829], "section": [107, 109, 110, 112, 113, 114, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 131, 132, 771, 772, 773, 775], "below": [107, 108, 110, 111, 112, 113, 115, 118, 122, 123, 124, 125, 128, 129, 130, 131, 132, 133, 144, 167, 178, 182, 183, 273, 311, 314, 331, 334, 343, 467, 470, 623, 626, 627, 647, 667, 681, 684, 685, 688, 771, 772, 773, 776, 777, 780, 829], "best": [107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 509, 555], "go": [107, 108, 109, 110, 112, 113, 115, 122, 127, 131, 145, 731, 742], "finish": [107, 108, 112, 829], "dive": [107, 109, 110, 127, 130, 131, 145, 829], "environ": [107, 109, 111, 144], "basic": [107, 110, 111], "fork": [107, 108, 509, 556], "doc": [107, 110, 114, 126, 128, 131, 132, 829], "document": [107, 109, 129, 131, 133], "local": [107, 108, 111, 118], "task": [107, 109, 144, 727, 728, 729, 730, 829], "help": [107, 108, 115, 119, 121, 122, 130, 131, 132, 143, 509, 515, 787, 812, 829], "video": [107, 109, 114, 115, 126], "realli": [108, 122, 145], "contribut": [108, 109, 110, 128, 835], "toward": [108, 128, 667, 701, 704, 829, 835], "page": [108, 109, 129, 133, 143, 829, 835], "explain": [108, 109, 110, 113, 114, 115, 117, 118, 119, 121, 122, 123, 124, 125, 126, 128, 129, 130, 131, 132, 133, 829, 835], "main": [108, 111, 120, 122, 167, 172, 182, 183, 623, 627, 647], "prefer": [108, 122], "git": [108, 109], "submodul": [108, 109, 110, 111, 116, 117, 118, 124, 127, 128, 132, 829, 864, 865, 872, 873], "com": 108, "unifyai": [108, 111], "http": [108, 114, 186, 195, 198, 273, 291, 294, 331, 334, 335, 338, 343, 368, 483, 486, 487, 490, 579, 581, 582, 584, 667, 681, 684, 701, 704, 771, 772, 773, 776, 777, 780, 787, 792, 795], "gh": 108, "your_fold": 108, "id": [108, 121, 122, 223, 242, 862, 863], "cours": [108, 109, 115, 131, 145], "whatev": [108, 145], "integr": [108, 117, 186, 192], "familiar": [108, 110], "sure": [108, 110, 116], "elig": 108, "free": [108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 144, 829], "student": 108, "licenc": 108, "peopl": [108, 109, 112], "seem": [108, 132, 145], "miss": [108, 115, 117, 121, 122, 866, 870], "explicit": [108, 111, 122, 123, 125, 128, 145], "remind": 108, "channel": [108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 509, 536, 850, 851, 852, 853, 854, 855, 856, 857, 859, 860], "pace": 108, "suggest": [108, 109, 113], "latest": [108, 110, 111, 114, 145, 186, 195, 198, 273, 291, 294, 331, 334, 335, 338, 343, 368, 483, 486, 487, 490, 667, 681, 684, 701, 704, 771, 772, 773, 776, 777, 780, 787, 792, 795, 850, 859], "packag": [108, 111, 145], "ensur": [108, 109, 117, 121, 123, 126, 509, 549], "pypi": [108, 110, 145], "person": [108, 109], "experi": [108, 129, 131, 145], "avoid": [108, 109, 117, 119, 120, 122, 130, 223, 273, 364, 367], "pip": [108, 144, 829], "instal": [108, 111, 144, 829], "abil": [108, 129, 145], "perhap": [108, 130, 131, 132, 145], "track": [108, 109, 223, 731, 743, 862, 863], "run": [108, 111, 116, 117, 119, 126, 128, 129, 130, 131, 132, 133, 144, 145, 223, 232, 579, 581, 582, 584, 592, 594, 727, 728, 729, 730, 850, 861, 862, 863], "command": [108, 111, 829], "ivy_dev": [108, 109, 111], "name": [108, 109, 111, 114, 117, 128, 130, 131, 133, 164, 165, 509, 515, 623, 628, 641, 644, 771, 772, 773], "setup": 108, "click": [108, 109, 114, 829], "icon": [108, 109], "side": [108, 109], "choos": [108, 109, 133, 223, 268, 273, 428, 431, 432, 435, 766, 770, 771, 772, 773, 775, 787, 792, 795, 796, 799, 800, 803], "panel": 108, "select": [108, 109, 117, 128, 130, 133, 145], "drop": [108, 145], "down": [108, 130], "path": [108, 111], "manual": [108, 109, 117, 132, 731, 732, 741, 742], "builtin": [108, 111, 130, 132], "requir": [108, 111, 113, 114, 115, 117, 120, 121, 123, 124, 126, 130, 145, 164, 165, 273, 483, 486, 623, 628, 667, 711, 714, 839, 840], "cmd": [108, 111], "directori": [108, 109, 111, 509, 566], "folder": [108, 109, 111, 113, 116, 117, 118], "abov": [108, 109, 111, 114, 115, 118, 119, 121, 122, 125, 126, 130, 131, 132, 133, 167, 178, 182, 183, 186, 195, 198, 273, 286, 291, 294, 311, 314, 331, 334, 335, 338, 343, 368, 442, 445, 467, 470, 483, 486, 487, 490, 496, 509, 537, 610, 613, 622, 623, 626, 627, 628, 647, 667, 681, 684, 685, 688, 701, 704, 749, 750, 753, 754, 756, 757, 771, 772, 773, 776, 777, 780, 787, 792, 795, 804, 807, 808, 811, 812, 820, 821, 824], "m": [108, 109, 111, 112, 128, 167, 178, 182, 183, 509, 518, 623, 624, 626, 627, 628, 629, 630, 631, 634, 637, 638, 639, 640, 641, 643, 644, 645, 647, 754, 759, 760, 762], "python3": [108, 111], "script": [108, 109, 111, 115, 128, 145], "bat": [108, 109, 111], "OR": [108, 109, 111, 273, 323, 326, 432, 435, 820, 825, 828], "bin": [108, 109, 111], "mac": [108, 109, 111], "linux": [108, 109, 111], "virtualenv": 108, "os": 108, "note": [108, 109, 113, 114, 115, 122, 273, 463, 466, 623, 628, 644, 667, 711, 714, 771, 773, 787, 796, 799], "tick": [108, 109], "To": [108, 115, 118, 122, 131, 132, 133, 829], "ivy_test": [108, 109], "test_array_api": [108, 109, 116, 117], "cd": [108, 109, 111], "txt": 108, "visual": [108, 145], "jetbrain": 108, "remot": 108, "mitig": 108, "potenti": [108, 127, 273, 364, 367], "conflict": [108, 109, 131], "yet": [108, 110, 122], "particular": [108, 109, 113, 125, 273, 274, 277], "system": [108, 145, 623, 643], "instruct": [108, 110], "desktop": 108, "wsl": 108, "powershel": 108, "admin": 108, "visit": 108, "link": 108, "profession": 108, "execut": [108, 111, 122, 125, 128, 130, 133, 145, 509, 576], "deploy": 108, "top": [108, 109, 117, 131, 132, 829], "press": [108, 131, 829], "ok": 108, "caus": [108, 109, 115, 117, 122, 125, 145], "earlier": [108, 109], "might": [108, 109, 113, 117, 120, 128, 130, 131, 509, 530], "necessari": [108, 115, 119, 122, 125], "virtualis": 108, "detail": [108, 109, 110, 113, 116, 117, 118, 119, 120, 122, 126, 131, 132, 167, 173, 771, 772, 773, 775], "sudo": 108, "apt": 108, "ca": 108, "certif": 108, "curl": 108, "gnupg": 108, "lsb": 108, "mkdir": 108, "keyr": 108, "fssl": 108, "download": [108, 117], "gpg": 108, "dearmor": 108, "o": [108, 128, 509, 518], "echo": 108, "deb": 108, "arch": 108, "dpkg": 108, "architectur": [108, 133, 145], "lsb_releas": 108, "cs": 108, "tee": 108, "null": 108, "ce": 108, "cli": 108, "containerd": 108, "io": 108, "compos": [108, 122, 145], "plugin": 108, "systemctl": 108, "permiss": 108, "relat": [108, 109, 144, 223], "post": [108, 133, 749, 750, 753, 829, 835], "It": [108, 109, 111, 112, 113, 114, 115, 119, 121, 122, 125, 128, 130, 131, 132, 156, 159, 223, 268, 273, 274, 277, 278, 281, 282, 285, 286, 289, 291, 294, 295, 298, 299, 303, 306, 311, 314, 315, 318, 319, 322, 323, 326, 327, 330, 331, 334, 335, 338, 339, 342, 343, 346, 360, 363, 364, 367, 368, 384, 387, 388, 391, 392, 395, 396, 399, 404, 407, 408, 411, 412, 415, 416, 419, 420, 423, 424, 427, 428, 431, 432, 435, 436, 439, 442, 445, 447, 450, 451, 454, 459, 462, 463, 466, 467, 470, 471, 474, 475, 478, 479, 482, 483, 486, 487, 490, 491, 495, 496, 509, 522, 524, 535, 651, 652, 655, 657, 660, 662, 665, 667, 668, 671, 681, 684, 685, 688, 689, 692, 693, 696, 701, 704, 707, 710, 711, 714, 715, 718, 754, 756, 757, 766, 767, 776, 777, 780, 782, 785, 820, 821, 824, 825, 828], "headach": 108, "arm": 108, "m1": 108, "instead": [108, 109, 110, 114, 115, 117, 118, 122, 125, 126, 128, 130, 131, 145], "featur": [108, 113, 126, 131, 829], "vm": 108, "azur": 108, "cloud": [108, 144], "defin": [108, 110, 113, 114, 123, 126, 130, 132, 145, 273, 442, 445, 463, 466, 509, 558, 623, 625, 628, 643, 754, 756, 757, 787, 792, 795, 796, 799, 800, 803], "dockerfil": [108, 111], "longer": [108, 123, 125], "worri": 108, "platform": 108, "agnost": [108, 121, 126, 128, 130, 133, 145, 829], "usual": 108, "studio": 108, "favourit": 108, "extens": [108, 109, 114, 167, 178, 186, 195, 198, 273, 286, 291, 294, 311, 314, 331, 334, 335, 338, 343, 368, 467, 470, 483, 486, 487, 490, 496, 623, 626, 667, 681, 684, 685, 688, 701, 704, 771, 772, 773, 776, 777, 780, 787, 792, 795, 820, 821, 824], "theme": 108, "too": [108, 109, 145, 273, 286, 442, 445], "done": [108, 109, 115, 117, 131], "unsupport": [108, 123, 186, 207, 208], "slow": 108, "ipad": 108, "long": [108, 109, 115, 610, 620], "browser": 108, "cool": [108, 113], "requisit": 108, "head": [108, 122, 610, 621, 829, 850, 861], "pane": [108, 109], "readi": [108, 110], "begin": [108, 731, 732, 742], "outlin": [108, 109, 110, 112, 114, 117, 118, 122, 125, 130], "dropdown": 108, "tab": [108, 131, 829], "master": [108, 109, 122], "vs": 108, "view": [108, 109, 167, 173, 610, 613, 617], "built": [108, 129, 167, 168, 223, 850, 861, 862, 863], "bottom": 108, "box": 108, "patient": 108, "upto": 108, "minut": 108, "launch": 108, "That": [108, 109, 130, 131, 132, 273, 463, 466], "refer": [108, 109, 117, 118, 123, 126, 145, 167, 172, 273, 364, 367, 412, 415, 579, 581, 582, 584, 623, 648, 650, 787, 808, 811, 816, 819, 820, 821, 824, 825, 828, 850, 860], "approach": [108, 109, 117, 118, 122, 130, 131, 145], "colour": 108, "applic": [108, 123, 124, 132, 610, 621, 622, 731, 737, 743], "good": [108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 128, 132], "chanc": 108, "vscode": 108, "explor": [108, 129, 133, 144], "troubleshoot": 108, "sometim": [108, 109], "ever": [108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126], "64": [108, 131, 132, 273, 483, 486, 487, 490, 610, 616, 617, 623, 639, 787, 788, 791, 815, 829, 850, 861], "bit": [108, 115, 118, 122, 130, 186, 205, 206, 209, 273, 315, 318, 319, 322, 327, 330, 787, 804, 807, 812], "usr": 108, "more": [108, 109, 110, 112, 113, 115, 117, 118, 119, 120, 121, 122, 125, 126, 127, 128, 129, 130, 131, 132, 133, 144, 145, 167, 168, 186, 193, 273, 364, 367, 623, 631, 634, 667, 685, 688, 771, 772, 773, 775, 829], "nutshel": [108, 126], "hook": 108, "lint": 108, "fix": [108, 109], "fail": [108, 110, 116, 117, 128, 130], "attempt": [108, 145], "succe": 108, "problemat": 108, "proce": [108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126], "modifi": [108, 109, 114, 118, 123, 124, 128], "properli": [108, 112], "enter": [108, 109, 121, 123, 124, 126, 223], "unsur": [108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126], "feel": [108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 829], "server": [109, 829], "context": [109, 115, 122, 123, 124, 223, 509, 556, 610, 621, 850, 861], "suitabl": [109, 113, 122], "quick": [109, 112, 132], "tendenc": 109, "land": 109, "end": [109, 122, 125, 127, 144, 145, 167, 168, 273, 303, 306, 829, 835], "world": 109, "come": [109, 110, 132, 143, 829, 835], "fly": 109, "hard": [109, 130], "receiv": [109, 117, 123, 124, 223, 232, 233, 509, 516, 555, 850, 860], "respons": [109, 111], "internship": 109, "comment": 109, "trigger": 109, "unansw": 109, "label": [109, 128, 129, 133, 651, 652, 655, 657, 660, 662, 665], "respond": 109, "someon": [109, 145], "els": [109, 110, 113, 118, 119, 125, 128, 130, 132, 133, 145, 509, 519, 530, 534, 731, 741], "strive": [109, 145], "repli": 109, "newli": [109, 125, 164, 165, 186, 192, 509, 520], "bug": [109, 117], "serv": [109, 117, 118, 121, 122, 126, 127, 829], "suspect": 109, "behaviour": [109, 114, 117, 121, 122, 125, 126, 130], "observ": 109, "confid": 109, "wrong": 109, "someth": [109, 113, 131, 132, 145], "bet": 109, "act": [109, 115, 145], "placehold": [109, 121, 126, 731, 743], "mark": [109, 117], "ii": [109, 787, 788, 791, 815], "iii": 109, "titl": [109, 829], "issue_numb": 109, "delet": [109, 111], "No": [109, 128], "progress": [109, 122, 129, 133], "pr": 109, "soon": [109, 122, 143, 145, 829, 835], "solut": [109, 117, 122, 623, 643], "review": [109, 113], "merg": 109, "everi": [109, 110, 111, 115, 116, 117, 118, 119, 120, 122, 125, 126, 128, 130, 132, 167, 174, 175, 509, 510, 513], "dai": 109, "close": [109, 114, 273, 364, 367, 467, 470, 623, 644], "likewis": [109, 114, 118, 122, 123, 126, 131], "freed": 109, "purpos": [109, 111, 115, 117, 118, 120, 121, 122, 126, 127, 130, 273, 364, 367, 829], "remain": [109, 115, 145, 273, 286, 442, 445, 463, 466, 667, 697, 700, 731, 737], "short": [109, 132, 610, 620], "basi": [109, 116, 131], "situat": [109, 133], "alloc": [109, 145, 167, 182, 183, 186, 192, 223], "upon": [109, 115, 117, 125, 145], "period": 109, "prevent": [109, 125, 130, 579, 581, 582, 584, 592, 594, 787, 812, 866, 867, 868], "unabl": 109, "obvious": 109, "never": [109, 122], "reflect": [109, 121], "qualiti": 109, "hypothet": 109, "frustrat": 109, "delai": 109, "busi": 109, "fine": [109, 130, 133], "becaus": [109, 114, 117, 118, 119, 121, 123, 124, 125, 126, 128, 132, 133, 145], "inact": 109, "me": 109, "unfairli": 109, "definit": [109, 118, 123, 130, 623, 624, 625], "investig": 109, "Then": [109, 111, 130, 145], "practic": [109, 117], "separ": [109, 117, 121, 128, 130, 131], "branch": [109, 122, 145, 164, 165, 273, 303, 306], "role": [109, 129], "date": 109, "upstream": [109, 116], "complic": [109, 128], "root": [109, 111, 131, 273, 483, 486, 754, 755, 759, 760, 762], "merge_with_upstream": 109, "sh": 109, "name_of_your_branch": 109, "resolv": [109, 787, 804, 807, 812], "push": [109, 116], "both": [109, 114, 115, 118, 122, 124, 125, 126, 128, 130, 131, 132, 133, 144, 145, 186, 195, 198, 213, 273, 286, 291, 294, 335, 338, 368, 459, 462, 483, 486, 487, 490, 496, 509, 537, 610, 613, 622, 623, 625, 631, 634, 648, 667, 701, 704, 749, 750, 753, 787, 792, 795, 820, 821, 824], "abort": 109, "tediou": 109, "resolut": 109, "stash": 109, "reinstat": 109, "fetch": 109, "uncommit": 109, "unstag": 109, "untrack": 109, "comprehens": 109, "explan": [109, 114, 122, 126, 130], "atlassian": 109, "tutori": 109, "quit": [109, 110, 114, 118, 120, 121], "logic": [109, 120, 121, 123, 124, 130, 223, 259, 273, 424, 427, 428, 431, 432, 435, 820, 821, 824, 825, 828, 829], "blame": 109, "revis": 109, "author": [109, 829], "eg": 109, "past": 109, "l": [109, 112, 623, 624, 628, 631, 634, 647], "grep": 109, "v": [109, 128, 131, 132, 133, 610, 622, 829, 850, 851, 852, 853, 854, 855, 856, 857, 859, 860, 861, 862, 863, 864, 865, 866, 870, 872, 873], "commit_id": 109, "handi": 109, "histori": 109, "toggl": 109, "vertic": 109, "highlight": [109, 115], "previou": [109, 117, 126, 133, 145, 579, 582, 584, 592, 594], "inform": [109, 186, 206, 209, 509, 515, 579, 605], "whenev": [109, 130, 131], "tag": 109, "think": [109, 115], "interact": [109, 829], "gain": [109, 127, 132, 841], "yourself": [109, 110, 144], "simpler": [109, 130], "cannot": [109, 119, 123, 133], "least": [109, 115, 118, 121, 623, 631, 634], "final": [109, 114, 115, 118, 121, 123, 125, 128, 130, 131, 167, 176, 177, 509, 536, 850, 861], "tickbox": 109, "corner": 109, "span": 109, "intent": [109, 125], "larg": [109, 131, 273, 286, 442, 445], "discourag": 109, "philosophi": 109, "increment": [109, 509, 548], "frequent": [109, 110], "valuabl": 109, "infrequ": 109, "earli": [109, 829], "wast": 109, "spot": [109, 118], "mistak": 109, "propos": 109, "mountain": 109, "advoc": [109, 145], "individu": [109, 110, 118], "per": [109, 131, 223, 610, 611, 612, 613, 614, 615, 616, 617, 850, 851, 852, 853, 854, 855, 856, 857], "style": [109, 766, 769], "ve": [109, 127, 130, 754, 755, 829], "actual": [109, 112, 118, 125, 127, 130, 132, 145], "aim": [109, 127], "part": [109, 113, 116, 117, 118, 128, 129, 133, 144, 145, 167, 182, 183, 579, 582, 584, 587, 589, 592, 594, 596, 598, 600, 602, 862, 863], "subsect": 109, "session": [109, 829], "block": [109, 118, 127, 129, 133, 145, 223, 829], "smaller": [109, 128, 133, 667, 668, 671, 701, 704, 787, 804, 807, 812], "edit": 109, "beauti": 109, "particularli": [109, 131, 145], "concern": [109, 112, 115, 122, 125, 127], "effici": [109, 117, 118, 122, 125, 126, 128, 131, 145], "difficult": [109, 117, 145, 771, 772, 773, 775], "undo": 109, "stress": 109, "frequenc": [109, 509, 536], "pycharm": 109, "pytest": [109, 117], "button": 109, "declar": 109, "insid": [109, 111, 113, 123], "exec": 109, "rm": 109, "rf": 109, "cp": 109, "ivy_contain": 109, "bash": [109, 111], "test_ivi": [109, 117], "test_funct": 109, "test_cor": 109, "test_imag": 109, "test_random_crop": 109, "header": 109, "q": [109, 145, 610, 622, 623, 628, 641], "array_api_test": 109, "test_creation_funct": 109, "test_arang": 109, "window": [109, 111, 610, 611, 612, 613, 614, 615, 616, 617, 850, 851, 852, 853, 854, 855, 856, 857], "variou": [109, 114, 120, 126, 144], "wherebi": [110, 122, 731, 743], "broad": 110, "todo": [110, 117], "commit": [110, 117], "NOT": [110, 273, 428, 431], "resourc": 110, "hypothesi": 110, "cover": [110, 114, 115, 118, 120, 127], "lambda": [110, 128, 131, 866, 869, 871], "direct": [110, 132, 133, 144, 776, 782, 785], "bind": [110, 122], "aforement": 110, "categori": [110, 113, 121, 122, 123, 127, 829], "parent": [110, 130], "hint": [110, 113, 114, 118, 121, 125, 126, 167, 178, 186, 195, 198, 273, 286, 291, 294, 311, 314, 331, 334, 335, 338, 343, 368, 467, 470, 483, 486, 487, 490, 496, 509, 537, 610, 613, 622, 623, 626, 667, 681, 684, 685, 688, 701, 704, 749, 750, 753, 771, 772, 773, 776, 777, 780, 787, 792, 795, 820, 821, 824], "its": [110, 111, 114, 186, 193, 223, 267, 623, 631, 634, 667, 681, 684, 697, 700, 701, 704, 715, 718], "thorough": [110, 114, 117, 126], "transpil": [110, 127, 129, 829, 835], "builder": [111, 143, 145, 829], "maco": 111, "ubuntu": 111, "uid": 111, "make_docs_without_dock": 111, "rel": [111, 579, 582, 584, 587, 589, 592, 594, 596, 598, 600, 602, 623, 627, 637, 640, 647, 667, 685, 688, 701, 704, 776, 777, 780, 782, 785, 829], "synchron": 111, "rest": [111, 129, 133], "remove_doc": 111, "_": [111, 114, 122, 125, 130, 131, 186, 195, 198, 273, 291, 294, 331, 334, 335, 338, 343, 368, 483, 486, 487, 490, 579, 581, 582, 584, 623, 650, 667, 681, 684, 701, 704, 771, 772, 773, 776, 777, 780, 787, 792, 795], "privat": [111, 866, 870], "fulfil": [111, 127, 829], "autogenerated_sourc": 111, "png": [111, 131], "_imag": 111, "lastli": 111, "rst": 111, "partial_sourc": 111, "conf": 111, "create_rst_fil": 111, "filter": [111, 610, 611, 612, 613, 614, 615, 616, 617, 850, 851, 852, 853, 854, 855, 856, 857], "repres": [111, 130, 167, 178, 186, 205, 273, 281, 282, 285, 286, 295, 298, 302, 307, 310, 342, 343, 346, 442, 445, 479, 482, 500, 504, 610, 619, 623, 642, 643], "overal": [111, 114, 122, 123, 124, 133], "markup": 111, "extract": [111, 113], "get_functions_and_class": 111, "doctr": 111, "readm": [111, 145], "module_nam": 111, "copy_readme_to_rst": 111, "tabl": 111, "toc": 111, "tree": 111, "append_toctree_to_rst": 111, "create_index_rst": 111, "\u03c0": [111, 273, 278, 291, 294, 299, 303, 306], "namespac": [111, 113, 123, 128, 133], "who": [112, 127, 145], "mainli": [112, 129, 131], "under": [112, 114, 115, 116, 117, 118, 122, 127, 128, 131, 133], "hood": [112, 115, 117, 118, 122, 127, 128, 131, 133], "weed": [112, 127], "behind": [112, 127, 129, 579, 582, 584, 587, 589, 592, 594, 596, 598, 600, 602], "navig": 112, "tour": 112, "primari": [112, 117, 119, 125, 145], "composit": [112, 117, 119, 121, 122, 125, 128, 132, 133, 145], "nestabl": [112, 114, 115, 117, 125, 186, 195, 198, 273, 286, 291, 294, 335, 338, 368, 483, 486, 487, 490, 496, 509, 537, 610, 613, 622, 667, 701, 704, 749, 750, 753, 787, 792, 795, 820, 821, 824], "dynam": [112, 123, 124, 125, 128, 164, 165], "runtim": [112, 117, 223], "h": [112, 122, 610, 613, 614, 615, 616, 617], "j": [112, 509, 517, 518, 623, 647, 787, 788, 791, 815], "k": [112, 128, 167, 172, 182, 183, 509, 517, 610, 622, 623, 631, 634, 641, 643, 644, 645, 647, 754, 759, 760, 762, 766, 769], "borrow": 112, "n": [112, 167, 178, 182, 183, 509, 518, 610, 618, 623, 627, 631, 634, 636, 637, 638, 639, 640, 641, 644, 645, 647, 648, 649, 650, 667, 677, 680, 681, 684, 689, 692, 711, 714, 723, 726, 754, 759, 760, 762, 766, 769, 787, 796, 799, 808, 811, 812, 816, 819, 820, 821, 824, 825, 828], "taken": [113, 133, 623, 627], "constant": [113, 118, 132, 133, 145, 223, 232, 233, 667, 677, 680, 731, 737, 749, 750, 753, 841, 842, 846, 849, 862, 863, 864, 865], "compil": [113, 122, 127, 129, 145, 829, 862, 863, 866, 867, 868, 869, 870, 871], "meta": [113, 121, 728, 729, 730], "overlap": 113, "sever": [113, 145, 623, 630], "judgement": 113, "locat": [113, 117, 119, 124, 754, 755], "some_namespac": 113, "some_backend": 113, "another_backend": 113, "break": [113, 126, 130, 145, 829], "anyth": [113, 829], "refactor": 113, "ongo": 113, "subfold": [113, 117], "via": [113, 122, 123, 124, 125, 128, 130, 131, 144, 731, 732, 741, 742], "file_nam": 113, "my_func": [113, 115], "int": [113, 115, 118, 122, 123, 124, 125, 126, 133, 156, 161, 164, 165, 167, 170, 172, 174, 175, 176, 177, 180, 182, 183, 184, 186, 194, 203, 205, 206, 209, 212, 223, 245, 248, 249, 250, 251, 259, 260, 261, 267, 268, 273, 311, 314, 315, 318, 319, 322, 323, 326, 327, 330, 331, 334, 509, 515, 527, 528, 531, 532, 533, 536, 537, 542, 558, 561, 562, 567, 568, 577, 579, 581, 582, 584, 592, 594, 610, 611, 613, 615, 616, 617, 623, 625, 627, 646, 647, 648, 649, 651, 657, 660, 662, 665, 667, 673, 676, 677, 680, 681, 684, 685, 688, 689, 692, 693, 696, 701, 704, 706, 707, 710, 711, 714, 715, 718, 719, 722, 723, 726, 727, 728, 729, 730, 731, 743, 749, 750, 753, 754, 755, 756, 757, 759, 760, 762, 764, 766, 767, 768, 776, 777, 780, 782, 785, 787, 792, 795, 796, 799, 800, 803, 808, 811, 812, 816, 819, 820, 821, 824, 825, 828], "nativedtyp": [113, 123, 124, 126, 167, 168, 169, 170, 171, 172, 174, 175, 179, 180, 181, 184, 185, 186, 191, 192, 202, 203, 204, 213, 787, 812], "nativedevic": [113, 123, 124, 126, 167, 168, 169, 170, 171, 172, 174, 175, 176, 177, 179, 180, 181, 184, 185, 223, 240, 241, 242, 256, 262, 264, 266, 268, 269, 272, 509, 558, 754, 755, 756, 757, 759, 760, 762], "my": 113, "numer": [113, 132, 167, 178, 186, 192, 273, 274, 277, 286, 335, 338, 347, 350, 364, 367, 368, 371, 372, 375, 384, 387, 388, 391, 392, 395, 396, 399, 428, 431, 432, 435, 442, 445, 447, 450, 451, 454, 459, 462, 463, 466, 471, 474, 487, 490, 491, 495, 505, 508, 509, 540, 541, 563, 564, 569, 570, 623, 625, 631, 634, 639, 644, 646, 647, 648, 754, 765, 766, 767, 768, 787, 792, 795, 804, 807, 812, 841], "cooler": 113, "produc": [113, 223, 232, 233, 610, 622], "something_cool": 113, "category_nam": [114, 118, 123, 124, 126], "contrast": [114, 126], "backend_nam": [114, 118, 119, 120, 123, 124, 126], "account": 114, "instanti": 114, "firstli": [114, 115, 118, 121, 123, 125, 131], "templat": [114, 829], "spec": [114, 115], "api_specif": [114, 186, 195, 198, 273, 291, 294, 331, 334, 335, 338, 343, 368, 483, 486, 487, 490, 667, 681, 684, 701, 704, 771, 772, 773, 776, 777, 780, 787, 792, 795], "array_api": 114, "preview": 114, "render": 114, "incorrectli": 114, "onlin": [114, 829], "approxim": [114, 156, 157, 273, 278, 281, 282, 285, 291, 294, 295, 298, 299, 303, 306, 339, 342, 343, 346, 360, 364, 367, 404, 407, 408, 411, 412, 415, 416, 419, 459, 462, 475, 478, 479, 482, 496, 623, 637, 640], "tangent": [114, 156, 163, 273, 299, 302, 303, 306, 307, 310, 496, 500, 501, 504], "domain": [114, 273, 278, 281, 282, 285, 291, 294, 295, 298, 299, 303, 306, 339, 342, 343, 346, 360, 364, 367, 404, 407, 408, 411, 416, 419, 475, 478, 479, 482, 483, 486, 496], "infin": [114, 166, 186, 192, 273, 274, 277, 281, 282, 285, 286, 289, 295, 298, 299, 303, 306, 335, 338, 339, 342, 343, 346, 350, 360, 363, 364, 367, 368, 371, 372, 375, 384, 387, 388, 391, 404, 407, 408, 411, 416, 419, 420, 423, 442, 445, 459, 462, 463, 466, 467, 470, 475, 478, 479, 482, 483, 486, 496, 505, 508, 623, 649, 787, 792, 795, 800, 803, 820, 821, 824, 825, 828], "codomain": [114, 273, 278, 281, 282, 285, 291, 294, 295, 298, 299, 303, 306, 339, 342, 343, 346, 360, 364, 367, 404, 407, 408, 411, 416, 419, 475, 478, 479, 482, 483, 486, 496], "x_i": [114, 273, 274, 277, 278, 281, 282, 285, 291, 294, 295, 298, 299, 315, 318, 335, 338, 339, 342, 343, 346, 360, 364, 367, 368, 384, 387, 388, 391, 392, 395, 404, 407, 408, 411, 416, 419, 428, 431, 447, 450, 467, 470, 471, 474, 475, 478, 479, 482, 483, 486, 487, 490, 496, 505, 508, 771, 772, 773, 775, 787, 792, 795, 796, 799, 800, 803, 808, 811, 812, 816, 819], "assum": [114, 119, 123, 130, 131, 145, 167, 178, 186, 195, 198, 273, 286, 291, 294, 311, 314, 331, 334, 335, 338, 339, 343, 368, 467, 470, 475, 478, 483, 486, 487, 490, 496, 509, 537, 610, 613, 622, 623, 626, 667, 681, 684, 685, 688, 701, 704, 749, 750, 753, 771, 772, 773, 776, 777, 780, 787, 792, 795, 820, 821, 824], "express": [114, 128, 133, 273, 278, 291, 294, 299, 303, 306, 339, 475, 478, 496], "radian": [114, 273, 278, 291, 294, 299, 303, 306, 339, 475, 478, 496], "float": [114, 118, 122, 123, 125, 126, 130, 132, 156, 158, 166, 167, 168, 170, 172, 174, 175, 176, 177, 180, 184, 186, 192, 202, 206, 211, 214, 223, 256, 262, 266, 269, 272, 273, 274, 277, 278, 281, 282, 285, 286, 289, 291, 294, 295, 298, 299, 302, 303, 306, 307, 310, 331, 334, 335, 338, 339, 342, 343, 346, 347, 350, 352, 355, 360, 363, 364, 367, 368, 371, 372, 375, 376, 379, 380, 383, 396, 399, 400, 403, 404, 407, 408, 411, 416, 419, 420, 423, 442, 445, 447, 450, 451, 454, 455, 458, 459, 462, 463, 466, 467, 470, 475, 478, 479, 482, 483, 486, 491, 495, 496, 500, 504, 505, 508, 509, 521, 522, 524, 536, 540, 541, 563, 564, 569, 570, 579, 581, 582, 584, 587, 589, 592, 594, 596, 598, 600, 602, 610, 613, 617, 622, 623, 624, 626, 628, 629, 630, 637, 640, 641, 643, 644, 649, 651, 652, 655, 657, 660, 662, 665, 727, 728, 729, 730, 749, 750, 753, 754, 759, 760, 762, 771, 772, 773, 775, 787, 792, 795, 796, 799, 800, 803, 804, 807, 808, 811, 812, 816, 819], "operand": [114, 273, 278, 281, 282, 285, 286, 289, 291, 294, 295, 298, 299, 303, 306, 331, 334, 335, 338, 339, 342, 343, 346, 360, 363, 364, 367, 368, 404, 407, 408, 411, 416, 419, 420, 423, 442, 445, 459, 462, 463, 466, 467, 470, 475, 478, 479, 482, 483, 486, 496, 505, 508, 787, 788, 791, 792, 795, 800, 803, 812, 815], "whose": [114, 167, 182, 183, 273, 281, 282, 285, 295, 298, 302, 307, 310, 339, 342, 343, 346, 459, 462, 475, 478, 479, 482, 496, 500, 504, 509, 520, 623, 624, 626, 627, 628, 629, 630, 637, 638, 639, 640, 641, 643, 644, 645, 647, 667, 685, 688, 701, 704, 771, 772, 773, 787, 788, 791, 815], "ref": [114, 273, 327, 330, 396, 399, 442, 445, 451, 454, 463, 466, 491, 495, 667, 711, 714], "promot": [114, 118, 123, 186, 192, 195, 198, 213, 214, 218, 273, 278, 281, 282, 285, 286, 289, 291, 294, 295, 298, 299, 302, 307, 310, 311, 314, 319, 322, 323, 326, 327, 330, 331, 334, 339, 342, 343, 346, 347, 360, 363, 364, 367, 404, 407, 408, 411, 416, 419, 420, 423, 436, 439, 442, 445, 459, 462, 463, 466, 475, 478, 479, 482, 483, 486, 496, 500, 504, 623, 624, 625, 630, 631, 634, 637, 639, 640, 643, 648, 649, 667, 711, 714, 787, 796, 799], "But": [114, 122, 133], "needless": 114, "info": [114, 829], "subset": [114, 117, 126, 128], "extend": [114, 117, 119, 126], "renam": 114, "conform": [114, 167, 178, 186, 195, 198, 273, 286, 291, 294, 311, 314, 331, 334, 335, 338, 343, 364, 367, 368, 467, 470, 483, 486, 487, 490, 496, 623, 626, 667, 681, 684, 685, 688, 701, 704, 771, 772, 773, 776, 777, 780, 787, 792, 795, 820, 821, 824], "org": [114, 186, 195, 198, 273, 291, 294, 331, 334, 335, 338, 343, 368, 483, 486, 487, 490, 579, 581, 582, 584, 667, 681, 684, 701, 704, 771, 772, 773, 776, 777, 780, 787, 792, 795], "elementwise_funct": [114, 273, 291, 294, 331, 334, 335, 338, 343, 368, 483, 486, 487, 490, 667, 701, 704, 771, 772, 773, 776, 777, 780, 787, 792, 795], "descript": [114, 122, 167, 178, 186, 195, 198, 273, 286, 291, 294, 311, 314, 331, 334, 335, 338, 343, 368, 467, 470, 483, 486, 487, 490, 496, 509, 537, 610, 613, 622, 623, 626, 649, 667, 681, 684, 685, 688, 701, 704, 749, 750, 753, 771, 772, 773, 776, 777, 780, 787, 792, 795, 820, 821, 824], "simplic": [114, 132, 144, 167, 178, 186, 195, 198, 273, 286, 291, 294, 311, 314, 331, 334, 335, 338, 343, 368, 467, 470, 483, 486, 487, 490, 496, 509, 537, 610, 613, 622, 623, 626, 667, 681, 684, 685, 688, 701, 704, 749, 750, 753, 771, 772, 773, 776, 777, 780, 787, 792, 795], "judgment": 114, "beyond": [114, 667, 701, 704], "text": 114, "func_nam": [114, 115, 118], "pure": [114, 130, 133, 145], "themselv": [114, 118, 122, 123, 124, 132, 731, 732], "operator_nam": 114, "succinct": 114, "contstructor": 114, "though": [114, 118, 123, 131, 145], "forward": [114, 133, 144, 145, 862, 863, 866, 870], "_forward": [114, 128, 131, 132, 829], "former": 114, "trainabl": [114, 129, 131, 132, 579, 591, 839, 840, 862, 863, 872], "explicitli": [114, 118, 119, 121, 122, 125, 128, 145, 623, 628, 850, 859, 861, 862, 863], "latter": [114, 119], "implicit": [114, 122, 128], "docst": 114, "eight": 115, "static_": 115, "op_nam": 115, "__r": 115, "four": [115, 118, 123, 126, 131], "__sub__": [115, 121, 122, 126, 130], "__mul__": [115, 121, 122, 126, 130], "__truediv__": [115, 121, 122], "respect": [115, 121, 122, 123, 126, 167, 178, 273, 274, 277, 286, 289, 303, 306, 311, 314, 319, 322, 323, 326, 327, 330, 331, 334, 347, 350, 352, 355, 363, 371, 372, 375, 376, 379, 380, 383, 396, 399, 400, 403, 420, 423, 424, 427, 432, 435, 436, 439, 442, 445, 451, 454, 463, 466, 491, 495, 579, 581, 582, 584, 586, 587, 589, 592, 594, 596, 598, 600, 602, 623, 641, 727, 728, 729, 730], "recap": [115, 122, 132], "independ": [115, 116, 120, 122, 128, 133, 623, 625, 643, 754, 755], "combinatorili": 115, "variat": [115, 117], "grid": [115, 117, 144, 167, 178], "vari": [115, 117, 122, 130, 771, 772, 773, 775], "simplest": 115, "small": [115, 118, 128, 132, 145, 273, 442, 445, 623, 637, 640, 749, 750, 753, 864, 865], "unus": [115, 125, 164, 165], "18": [115, 122, 273, 331, 334, 623, 627, 639, 787, 788, 791, 815], "excess": [115, 119, 130], "showcas": [115, 144], "demonstr": [115, 130], "replic": [115, 123], "meant": 115, "imaginari": 115, "some_flag": 115, "another_flag": 115, "54": [115, 273, 339, 343, 483, 486, 610, 622, 623, 639, 754, 759, 787, 788, 791, 815], "jointli": 115, "three": [115, 122, 127, 167, 178, 829], "x0": [115, 509, 517], "procedur": 115, "sens": [115, 122, 130], "5574077": 115, "1850398": 115, "5463025": 115, "8422884": 115, "91601413": 115, "9647598": 115, "3738229": 115, "1597457": 115, "0963247": 115, "9955841": 115, "3278579": 115, "multi": [115, 122, 127, 145, 610, 621, 623, 625, 829, 835, 850, 861], "seper": [115, 509, 536], "pars": [115, 145], "satisfi": [115, 623, 650], "far": [115, 124, 129, 130, 731, 732, 742], "asid": [115, 144], "irrelev": [115, 123], "increasingli": 115, "complex": [115, 131, 132, 133, 145, 623, 628, 644], "rule": [115, 117, 118, 121, 122, 123, 186, 192, 195, 198, 214, 273, 302, 307, 310, 327, 330, 347, 442, 445, 463, 466, 500, 504, 623, 624, 625, 639, 643], "count": [115, 131, 223, 261, 623, 648, 667, 685, 688, 771, 772, 773, 820, 821, 824, 825, 828], "14254655": 115, "1578213": 115, "380515": 115, "17": [115, 122, 156, 158, 623, 627, 754, 759], "trivial": 115, "By": [115, 118, 122, 125, 132, 133, 509, 527, 528, 623, 648, 667, 693, 696, 787, 792, 795, 796, 799, 800, 803, 804, 807, 808, 811, 812, 816, 819, 820, 821, 824, 825, 828], "non": [115, 122, 123, 128, 164, 165, 186, 192, 210, 273, 428, 431, 432, 435, 610, 613, 623, 626, 637, 644, 646, 648, 649, 766, 767, 768, 769, 787, 792, 795, 796, 799, 800, 803, 804, 807, 816, 819, 820, 821, 824, 825, 828, 862, 863, 866, 870], "dictat": [115, 121, 125, 126], "exlud": 115, "unit": [116, 117, 145, 156, 157, 158, 159, 223], "thoroughli": [116, 117], "ci": [116, 117, 145], "failur": 116, "On": [117, 129, 133], "fixtur": 117, "consum": [117, 122, 126, 223], "300": [117, 273, 467, 470], "hit": [117, 128], "permit": [117, 121, 126], "action": 117, "eleg": 117, "intellig": 117, "sampl": [117, 610, 618, 754, 755, 759, 760, 762, 787, 808, 811, 816, 819, 850, 858], "rang": [117, 131, 132, 133, 167, 168, 176, 177, 771, 772, 787, 804, 807, 812, 829], "cach": [117, 118, 223, 241, 509, 520], "unexplor": 117, "known": 117, "repeatedli": [117, 122, 731, 740], "upload": 117, "artifact": 117, "parametr": 117, "strategi": 117, "statement": [117, 145], "plai": [117, 133], "helper": [117, 131], "verifi": [117, 123, 124, 130, 829, 835], "truth": [117, 273, 352, 355, 376, 379, 380, 383, 396, 399, 400, 403, 451, 454], "opt": [117, 119, 125, 130], "defer": [117, 118, 121, 122, 123, 124, 125], "suffic": [117, 120], "catch": [117, 509, 530], "systemat": 117, "safeguard": 117, "inabl": 117, "fact": [117, 131], "categor": [118, 124], "mutual": [118, 122], "constitut": [118, 128, 787, 808, 811, 816, 819], "venn": 118, "diagram": 118, "light": [118, 145], "wherea": [118, 121, 123, 124, 126, 133], "hand": [118, 145], "log_pr": [118, 122, 125], "array_arg": 118, "typic": 118, "whatsoev": [118, 122], "commonli": [118, 787, 808, 811, 816, 819], "outsid": [118, 124, 128, 130, 133, 667, 668, 671, 711, 714], "denomin": [118, 145, 509, 535, 541, 564, 569, 570, 749, 750, 753, 864, 865], "divis": [118, 273, 327, 330, 347, 350, 371, 372, 375, 463, 466, 509, 535, 541, 564, 569, 570, 579, 581, 582, 584, 592, 594, 866, 867, 868], "piec": [118, 120, 121, 128], "deal": [118, 145], "concurr": [118, 122], "weight": [118, 122, 132, 133, 579, 581, 582, 584, 587, 589, 592, 594, 596, 598, 600, 602, 610, 619, 620, 622, 850, 851, 852, 853, 854, 855, 856, 857, 859, 860, 862, 863, 866, 868, 869], "modif": 118, "decor": [118, 120, 122, 123, 124, 125], "group": [118, 122], "briefli": [118, 131], "cast": [118, 123, 186, 192, 195, 198, 667, 673, 676, 787, 804, 807, 812, 829], "get_all_arrays_on_dev": 118, "nested_map": [118, 731], "index_nest": [118, 731], "implicit_backend": 119, "unless": [119, 124, 125, 145, 273, 442, 445, 509, 558], "__dict__": [119, 128, 130], "ivy_original_dict": [119, 128], "unmodifi": [119, 123], "moment": [119, 145, 579, 581, 582, 584, 592, 594, 866, 867, 868], "fallback": 119, "freedom": [119, 787, 808, 811, 816, 819], "recommend": [119, 273, 428, 431, 432, 435, 463, 466, 787, 796, 799], "achiev": [120, 131, 133], "wrapper": [120, 121, 122, 123, 125, 126, 130], "topic": [120, 130], "tf": [121, 123, 124, 125, 126, 128, 133, 145, 829], "_data": [121, 130], "organiz": [121, 122], "inherit": [121, 122, 130], "bear": [121, 122, 123], "mind": [121, 122], "necessarili": [121, 122], "although": [121, 122], "underpin": [121, 122, 128], "programmat": [121, 122], "backup": [121, 122], "accident": [121, 122], "readabl": [121, 122, 126, 130, 131], "absent": [121, 122], "perk": [121, 122], "auto": [121, 122, 131], "throw": [121, 130], "imposs": 121, "coupl": [121, 122, 130, 132], "anywai": 121, "secondli": [121, 123], "easier": 121, "five": [122, 131], "decis": [122, 128, 130], "displai": [122, 131], "arbitrarili": [122, 131], "__repr__": 122, "control": [122, 123, 125, 130, 131, 144], "__getattr__": 122, "underli": [122, 273, 311, 314, 323, 326, 331, 334, 436, 439], "__setattr__": 122, "__contains__": 122, "__getstate__": 122, "__setstate__": 122, "unpickl": 122, "expand": [122, 509, 536, 667, 681, 684], "children": 122, "shallowest": 122, "deepest": 122, "67": [122, 273, 331, 334, 343], "22": [122, 273, 331, 334, 623, 627, 639, 766, 770, 787, 788, 791, 815], "25": [122, 273, 483, 486, 487, 490, 623, 627, 630, 651, 657, 660, 749, 750, 753, 787, 788, 791, 815], "retain_grad": [122, 579, 586], "dy": [122, 579, 586], "dx": [122, 579, 586], "technic": [122, 125, 126, 145], "autograd": [122, 145], "grad": [122, 131, 132, 133, 829, 866, 870], "redund": 122, "num_head": [122, 610, 621, 850, 861], "mask": [122, 610, 621, 622], "to_q_fn": [122, 610, 621], "to_kv_fn": [122, 610, 621], "to_out_fn": [122, 125, 610, 621], "to_q_v": [122, 610, 621], "to_kv_v": [122, 610, 621], "to_out_v": [122, 610, 621], "measur": [122, 610, 621, 850, 861], "dot": [122, 610, 621, 622, 623, 646, 648, 850, 861], "product": [122, 273, 442, 445, 509, 527, 610, 621, 622, 623, 625, 631, 634, 639, 646, 648, 787, 788, 791, 804, 807, 815, 850, 861], "implicitli": 122, "intuit": [122, 131, 132], "debug": [122, 131], "chronolog": 122, "had": [122, 125], "sequenti": [122, 132], "flow": [122, 144], "implic": 122, "slightli": [122, 128, 132], "eager": [122, 145], "int8": [123, 186, 207], "int16": [123, 186, 195, 198, 207, 787, 804, 807, 812], "uint8": [123, 186, 195, 198, 207], "uint16": [123, 186, 208, 787, 804, 807, 812], "uint32": [123, 186, 208, 787, 804, 807, 812], "uint64": [123, 186, 208, 787, 804, 807, 812], "bfloat16": [123, 186, 207], "float16": [123, 186, 208], "all_dtyp": 123, "all_numeric_dtyp": 123, "all_int_dtyp": 123, "all_float_dtyp": 123, "fall": [123, 127, 829, 862, 863, 866, 870], "valid": [123, 128, 186, 200, 610, 611, 612, 613, 614, 615, 616, 617, 667, 711, 714, 820, 821, 824, 825, 828, 850, 851, 852, 853, 854, 855, 856, 857], "invalid": [123, 623, 648, 820, 821, 824, 825, 828], "thirdli": 123, "native_float32": 123, "importantli": [123, 130, 133, 144], "varieti": [123, 124], "conveni": [123, 124, 126, 129, 131, 132], "arguabl": [123, 124], "compound": 123, "overflow": [123, 273, 286, 787, 812], "arr": [123, 124, 749, 750, 753], "scalar": [123, 128, 133, 145, 167, 175, 509, 558, 575, 578, 623, 649], "settabl": [123, 124], "jnp": [123, 124, 125, 126, 133, 829], "jaxarrai": [123, 124, 125, 126], "mx": [123, 124, 125, 829], "nd": [123, 124, 125, 128, 133, 829], "deleg": 123, "fill_valu": [123, 167, 174, 175, 273, 355, 379, 380, 383], "as_n": [123, 186, 201, 202, 203, 204, 223, 242, 243, 264], "idx": [124, 130, 509, 515], "tpu": [124, 223, 245, 270], "aliv": [124, 223, 257, 261, 263, 509, 539, 557, 559], "amount": [124, 223, 269, 651, 652, 655, 657, 660, 662, 665], "memori": [124, 125, 143, 145, 223, 241, 262, 267, 269, 272, 610, 620, 829], "dual": 124, "thrown": [124, 145, 509, 549], "rare": [124, 145], "program": 125, "strictli": 125, "ration": 125, "speak": 125, "subtli": 125, "ensure_in_backend": [125, 509, 549], "x_nativ": 125, "val_n": 125, "is_ivy_arrai": [125, 130, 509], "is_vari": [125, 579], "assign": [125, 130], "elif": 125, "irrespect": [125, 130, 186, 192], "inclus": [125, 167, 168, 754, 756, 757], "omit": [125, 126, 771, 772, 773, 775], "unspecifi": [125, 273, 459, 462, 463, 466, 623, 628, 667, 711, 714], "predominantli": [125, 144], "math": [125, 133, 829], "presenc": 125, "altern": [125, 131], "_wrap_fn": 125, "maxim": [125, 128], "inner": [125, 130, 623, 628, 631, 634, 727, 728, 729, 730], "third": [125, 145, 623, 644, 771, 772], "addition": [125, 126], "leverag": 125, "equival": [125, 131, 133, 167, 168, 273, 327, 330, 428, 431, 432, 435, 463, 466, 623, 637, 640, 643, 649], "input_arrai": 125, "adress": 126, "revisit": [126, 133], "dedic": [126, 130, 132, 579, 608, 839, 840], "__div__": 126, "dicat": 126, "futher": 126, "absenc": 126, "pep": 126, "484": 126, "annot": 126, "brittl": 126, "intend": [126, 787, 812], "freeli": 126, "inde": [126, 145], "flexibl": 126, "original_typ": 126, "cumbersom": 126, "sound": 127, "higher": [127, 128, 133, 145, 579, 582, 584, 587, 589, 592, 594, 596, 598, 600, 602], "overview": [127, 144], "handler": [127, 129, 133, 829], "fledg": [128, 129], "syntact": [128, 133], "clip_by_valu": [128, 133], "clamp": [128, 133], "behavior": [128, 145, 273, 459, 462, 463, 466, 771, 772, 773, 775], "fit": [128, 667, 693, 696], "construct": [128, 129, 132, 133, 667, 719, 722, 850, 851, 852, 853, 854, 855, 856, 857, 859, 860, 861, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873], "num": [128, 167, 176, 177], "power_seq": 128, "okai": 128, "bound": 128, "resid": [128, 132], "edg": [128, 133, 667, 668, 671, 677, 680, 723, 726, 829], "larger": [128, 133, 186, 206, 667, 668, 671, 701, 704, 787, 808, 811, 816, 819], "ml_framework": [128, 133, 167, 168], "current_framework": [128, 133], "furthermor": 128, "concaten": [128, 131, 223, 252, 509, 536, 667, 673, 676, 829], "framework_handl": 128, "face": 128, "verbos": [128, 829, 876], "cprint": [128, 875], "framework_stack": 128, "_determine_framework_from_arg": 128, "valueerror": [128, 667, 707, 710], "get_framework": 128, "neither": [128, 273, 286, 442, 445], "illustr": [128, 144], "un": [128, 186, 210], "nn": [128, 133, 167, 178, 829], "init_h": [128, 610, 620], "init_c": [128, 610, 620], "kernel": [128, 145, 610, 620], "recurrent_kernel": [128, 610, 620], "bia": [128, 132, 610, 619, 620, 850, 851, 852, 853, 854, 855, 856, 857, 860], "recurrent_bia": [128, 610, 620], "x_shape": 128, "batch_shap": [128, 130, 133, 509, 558, 610, 620, 621, 622, 623, 650, 754, 755, 850, 859], "timestep": [128, 610, 620, 850, 859], "input_channel": [128, 132, 850, 851, 852, 853, 854, 855, 856, 859, 860], "x_flat": 128, "wi": 128, "wi_x": 128, "wii_x": 128, "wif_x": 128, "wig_x": 128, "wio_x": 128, "recurr": [128, 610, 620], "wh": 128, "lstm": [128, 610, 620, 850], "ht": 128, "ct": 128, "hts_list": 128, "unrol": [128, 131, 610, 620], "wii_xt": 128, "wif_xt": 128, "wig_xt": 128, "wio_xt": 128, "zip": 128, "htm1": 128, "ctm1": 128, "wh_htm1": 128, "whi_htm1": 128, "whf_htm1": 128, "whg_htm1": 128, "who_htm1": 128, "ft": 128, "gt": 128, "ot": 128, "offici": 128, "reliabl": 128, "sacrific": 128, "hear": 128, "virtu": 128, "pure_ivi": 128, "reduce_mean": [128, 131, 132, 133, 829], "reduce_sum": [128, 829], "reduce_var": 128, "compile_graph": [128, 133], "pure_torch": 128, "cat": [128, 133], "backbon": [128, 131], "_layer": 128, "super": [128, 131, 132, 133], "clean": [128, 129, 131], "random_unifrom": 128, "unclean": 128, "wx": 128, "temp": 128, "torchscript": 128, "fn": [128, 130, 146, 147, 148, 149, 150, 151, 152, 153, 154, 186, 207, 208, 223, 232, 233, 509, 515, 576, 731, 732, 737, 738, 739, 741, 742, 743, 832, 834], "example_input": [128, 164, 165], "static_argnum": [128, 164, 165], "static_argnam": [128, 164, 165], "jit": [128, 145], "frontend": 129, "primit": [129, 145], "describ": [129, 133, 787, 788, 791, 804, 807, 808, 811, 812, 815], "hierarch": [129, 131, 132], "straight": [130, 829], "arraywithlinalg": 130, "arraywithlog": 130, "arraywithmath": 130, "arraywithmeta": 130, "arraywithreduct": 130, "is_native_arrai": [130, 509], "_shape": 130, "_size": 130, "functool": 130, "mul": 130, "len": [130, 133, 167, 178], "_dtype": 130, "_devic": 130, "_dev_str": 130, "_pre_repr": 130, "_post_repr": 130, "ndim": [130, 623, 641, 644], "mt": 130, "answer": [130, 145], "consol": 130, "typeerror": 130, "immut": 130, "behav": 130, "claim": 130, "truli": 130, "_native_wrapp": 130, "attributeerror": 130, "genuin": 130, "some_method": 130, "similarli": [130, 167, 178], "rewritten": 130, "__pow__": 130, "strang": 130, "power": [130, 131, 132, 273, 327, 330, 360, 459, 462, 509, 540, 563, 570, 623, 636, 841], "enforc": 130, "notic": 130, "appear": [130, 667, 681, 684], "invers": [130, 144, 273, 278, 281, 282, 285, 291, 294, 295, 298, 299, 302, 303, 306, 307, 310, 342, 346, 500, 504, 623, 630, 640], "_wrap_method": 130, "func_wrapp": [130, 146, 147, 148, 149, 150, 151, 152, 153, 154], "__name__": 130, "non_wrapped_method": 130, "_method_wrap": 130, "native_arg": 130, "native_kwarg": 130, "inner_fn": 130, "whist": 130, "unwrap": 130, "transit": 130, "needlessli": 130, "randn": 130, "_unwrap_method": 130, "method_wrap": 130, "compartment": 130, "public": [130, 509, 525], "newshap": [130, 667, 697, 700], "new_shap": 130, "tidi": 130, "shorter": 130, "crystal": 130, "41": [130, 273, 331, 334, 483, 486, 623, 624, 787, 812], "enough": [130, 131, 132], "ton": 131, "ado": [131, 132], "incred": [131, 145], "hash": 131, "soup": 131, "walk": [131, 132], "dct": 131, "cnt": 131, "combo": [131, 829, 835], "hold": [131, 509, 561, 562], "1000": [131, 273, 483, 486], "uda": 131, "3333": 131, "6667": 131, "178": 131, "new_weight": 131, "0600": 131, "3100": 131, "2400": 131, "6900": 131, "delimit": 131, "autocomplet": 131, "midwai": 131, "agent": 131, "total_spe": 131, "total_height": 131, "total_width": 131, "ag": 131, "tot": 131, "total_": 131, "total_h": 131, "batch_siz": [131, 610, 611, 612, 613, 614, 615, 616, 617, 754, 755], "dir": 131, "adam": [131, 132, 133, 579, 581, 582, 584, 592, 594, 829, 866, 868], "cnt0": 131, "cnt1": 131, "diff_0": 131, "diff_1": 131, "config0": 131, "config1": 131, "Not": [131, 132, 145, 166], "decod": 131, "l0": 131, "l1": [131, 623, 649], "depth": [131, 132, 133, 144, 223, 247, 251, 255, 509, 543, 558, 731, 743, 862, 863], "clearer": 131, "truncat": 131, "decoder__l0": 131, "decoder__l1": 131, "encoder__l0": 131, "encoder__l1": 131, "height": 131, "l0__b": 131, "l0__w": 131, "l1__b": 131, "l1__w": 131, "printabl": 131, "obviou": 131, "foresight": 131, "untidili": 131, "update_ag": 131, "normalize_img": 131, "img": 131, "img_max": 131, "reduce_max": [131, 829], "img_min": 131, "reduce_min": [131, 829], "img_rang": 131, "agent_posit": 131, "agent_veloc": 131, "agent_cam_front_rgb": 131, "agent_cam_front_depth": 131, "agent_cam_rear_rgb": 131, "agent_cam_rear_depth": 131, "agent_cam_lidar": 131, "normal": [131, 667, 711, 714, 749, 750, 753, 754, 759, 864, 865], "cleaner": 131, "camera": 131, "front_rgb": 131, "front_depth": 131, "rear_rgb": 131, "rear_depth": 131, "lidar": 131, "rgb": 131, "rear": 131, "veloc": 131, "cam": 131, "cam_max": 131, "cam_min": 131, "cam_rang": 131, "Of": 131, "ideal": 131, "perman": 131, "afterward": 131, "thread": 131, "incorpor": 131, "pretti": 131, "straightforward": 131, "dataload": [131, 143, 829], "_cnt": 131, "img_": 131, "_dataset_s": 131, "_batch_siz": 131, "_count": [131, 132], "__next__": 131, "filenam": 131, "img_fnam": 131, "fname": 131, "loaded_img": 131, "cv2": 131, "imread": 131, "loader": [131, 145], "32": [131, 156, 158, 273, 331, 334, 610, 613, 616, 623, 639, 766, 770, 787, 788, 791, 815], "batch_slic": 131, "model": [131, 132, 829], "mymodel": [131, 829], "linear0": [131, 132, 829], "linear1": [131, 132, 829], "x_in": [131, 132, 133, 829], "001": [131, 132, 749, 750, 753], "loss_fn": [131, 132, 133, 829], "0145": 131, "grad_fn": 131, "addbackward0": 131, "_create_vari": 132, "output_channel": [132, 850, 851, 852, 853, 854, 855, 856, 859, 860], "with_bia": [132, 850, 860], "_input_channel": 132, "_output_channel": 132, "_w_shape": 132, "_b_shape": 132, "_with_bia": 132, "8979": 132, "3198": 132, "0196": 132, "3126": 132, "3717": 132, "9687": 132, "6958": 132, "5122": 132, "3902": 132, "8800": 132, "5613": 132, "1982": 132, "nightmar": 132, "overcom": 132, "fc": 132, "9563": 132, "impact": 132, "v0": 132, "v1": 132, "6440": 132, "key0": 132, "1823": 132, "8075": 132, "linear3": 132, "v2": 132, "2346": 132, "counter": 132, "hidden": [132, 610, 620, 850, 859], "fed": [132, 223, 267], "1300": 132, "decoupl": 132, "scheme": 132, "weight_initi": [132, 850, 851, 852, 853, 854, 855, 856, 857, 859, 860], "glorotuniform": [132, 841, 850, 851, 852, 853, 854, 855, 856, 857, 859, 860], "bias_initi": [132, 850, 851, 852, 853, 854, 855, 856, 857, 860], "_w_init": 132, "_b_init": 132, "create_vari": [132, 841], "var_shap": [132, 841], "fan_out": [132, 841], "fan_in": [132, 841], "fan_mod": [132, 841], "fan_sum": 132, "slight": 132, "misnom": 132, "saw": 132, "vanilla": [132, 727, 729], "descent": [132, 579, 587, 589, 866, 871], "lar": [132, 579, 592, 594, 596, 598, 866], "lamb": [132, 579, 592, 594, 866], "compile_on_next_step": [132, 862, 863, 866, 867, 868, 869, 870, 871], "_beta1": 132, "_beta2": 132, "_epsilon": 132, "_mw": 132, "_vw": 132, "_first_pass": 132, "_should_compil": 132, "_step": [132, 866, 870], "new_v": 132, "_lr": 132, "isinst": [132, 133, 509, 573], "_inplac": 132, "_stop_gradi": 132, "set_stat": [132, 866, 867, 868, 869, 870, 871], "mw": [132, 579, 581, 582, 584], "vw": [132, 579, 581, 582, 584], "pre": [133, 145, 223], "captur": 133, "sparse_funct": 133, "num_class": [133, 754, 755], "num_dim": 133, "new_axi": 133, "_linear": 133, "to_backend": 133, "jax_graph": 133, "learnabl": [133, 749, 750, 753, 864, 865], "to_ivy_modul": [133, 839], "thinli": 133, "whilst": 133, "to_haiku_modul": 133, "hk": 133, "loss_fn_t": 133, "transform": [133, 144, 610, 618, 619], "without_apply_rng": 133, "rng": 133, "prngkei": 133, "init": 133, "update_rul": 133, "01": [133, 273, 467, 470], "tree_multimap": 133, "mechan": [143, 145, 829], "vision": [143, 829], "robot": [143, 829], "focus": 144, "field": [144, 623, 628, 641, 644, 771, 772, 773], "perfect": 144, "3d": [144, 850, 855, 856], "differenti": 144, "demo": [144, 829], "orient": 144, "pose": 144, "euler": [144, 166], "quaternion": 144, "rotat": 144, "matric": [144, 167, 178, 182, 183, 610, 619, 623, 624, 626, 627, 628, 629, 630, 636, 637, 638, 640, 641, 643, 644, 645, 647], "angl": [144, 273, 303, 306, 343, 479, 482], "ivy_mech": 144, "target_facing_rotation_matrix": 144, "polar_to_cartesian_coord": 144, "ordin": [144, 623, 643], "warp": 144, "optic": 144, "voxel": 144, "ivy_vis": 144, "coords_to_voxel_grid": 144, "render_pixel_coord": 144, "neural": [144, 610, 829, 836, 850], "radianc": 144, "nerf": 144, "trajectori": 144, "motion": 144, "plan": [144, 829], "mobil": 144, "ivy_robot": 144, "sample_spline_path": 144, "rigidmobil": 144, "sample_bodi": 144, "drone": 144, "sample_link": 144, "openai": 144, "swimmer": 144, "cumul": [144, 509, 527, 528], "reward": 144, "supervis": 144, "reinforc": 144, "door": [144, 145], "intersect": 144, "cartpol": 144, "mountain_car": 144, "pendulum": 144, "reacher": 144, "polici": 144, "condit": [144, 164, 165, 731, 741, 742, 766, 770], "learnt": 144, "ture": 144, "ntm": 144, "egospher": 144, "spatial": 144, "esm": 144, "ivy_memori": 144, "egocentr": 144, "room": 144, "inspir": 144, "doubt": 145, "grate": 145, "put": 145, "probe": 145, "undergo": 145, "remark": 145, "surpris": 145, "backward": [145, 273, 463, 466, 623, 648, 820, 821, 824, 825, 828], "lock": 145, "contunu": 145, "minor": 145, "xla": 145, "buffer": 145, "kind": [145, 186, 206, 209, 273, 459, 462, 787, 804, 807, 812], "gold": 145, "dex": 145, "phase": 145, "lax": 145, "scan": 145, "tricki": 145, "predictor": 145, "tight": 145, "driver": 145, "schedul": 145, "algorithm": [145, 610, 611, 612, 613, 614, 615, 616, 617, 850, 851, 852, 853, 854, 855, 856, 857], "dispatch": 145, "Will": 145, "ast": 145, "dynamic": 145, "cond": 145, "jacobian": 145, "checkpoint": 145, "autodiff": 145, "shine": 145, "merci": 145, "superset": 145, "cluster": 145, "compet": 145, "paradigm": 145, "parallelis": [145, 223, 232, 233], "spmd": 145, "mixtur": 145, "expert": 145, "sophist": 145, "depart": 145, "routin": 145, "hundr": 145, "thousand": 145, "deepli": [145, 731, 733], "broadli": 145, "heavili": 145, "supplementari": 145, "Is": 145, "reusabl": 145, "fanci": 145, "fusion": 145, "lose": 145, "vmap": 145, "pmap": 145, "overhead": 145, "ineffici": 145, "eventu": 145, "supplement": 145, "backdoor": 145, "callback": 145, "record": 145, "metric": 145, "somewhat": 145, "outsourc": 145, "inputs_to_ivy_arrai": 146, "gaussian": [156, 157], "leaki": [156, 157, 158], "alpha": [156, 158], "rectifi": [156, 158, 159], "slope": [156, 158], "39": [156, 158, 273, 360, 623, 639, 787, 788, 791, 815], "85": [156, 158, 273, 331, 334], "48": [156, 158, 273, 483, 486, 623, 639, 787, 788, 791, 815], "88": [156, 158, 273, 331, 334, 623, 639, 787, 788, 791, 815], "269": [156, 160], "731": [156, 160], "881": [156, 160], "214": [156, 160], "978": [156, 160], "891": [156, 160], "422": [156, 161], "155": [156, 161], "0768": [156, 161], "231": [156, 161], "693": [156, 161, 651, 662, 665], "49": [156, 161, 273, 483, 486, 787, 788, 791, 815], "147": [156, 161], "363": [156, 161], "3461": [156, 162], "6491": [156, 162], "535": [156, 162], "hyperbol": [156, 163, 273, 281, 282, 285, 295, 298, 302, 307, 310, 342, 343, 346, 479, 482, 500, 501, 504], "55": [156, 163, 610, 616, 623, 639, 787, 788, 791, 815], "501": [156, 163], "762": [156, 163], "964": [156, 163], "faster": [164, 165], "invoc": [164, 165], "718281828459045": 166, "newaxi": 166, "alia": 166, "pi": 166, "141592653589793": 166, "mathemat": [166, 273, 286, 303, 306, 364, 367, 442, 445, 623, 649], "half": [167, 168, 754, 756, 757, 760, 762], "chosen": [167, 168, 273, 303, 306, 766, 770], "distanc": [167, 168], "adjac": [167, 168], "interpret": [167, 169, 179], "uniniti": [167, 170, 171], "n_row": [167, 172], "n_col": [167, 172], "elsewher": [167, 172, 766, 770], "row": [167, 172, 623, 643, 644, 754, 755, 766, 769], "column": [167, 172, 623, 628, 641, 643, 644], "__dlpack__": [167, 173, 223, 268], "interchang": [167, 173, 667, 715, 718], "endpoint": [167, 176], "xy": [167, 178], "coordin": [167, 178, 273, 303, 306], "cartesian": [167, 178], "ij": [167, 178, 787, 788, 791, 815], "rank": [167, 178, 509, 577, 623, 625, 637, 641, 643, 647, 648, 649, 667, 677, 680, 681, 684, 711, 714, 723, 726, 766, 769, 820, 821, 824, 825, 828], "ni": [167, 178], "xi": [167, 178], "n1": [167, 178], "n2": [167, 178], "n3": [167, 178], "accordingli": [167, 178, 273, 364, 367, 623, 649, 766, 768, 771, 772, 773, 775, 787, 792, 795, 796, 799, 800, 803, 804, 807, 808, 811, 812, 816, 819, 820, 821, 824, 825, 828], "xv": [167, 178], "yv": [167, 178], "triangular": [167, 182, 183, 623, 624, 641], "innermost": [167, 182, 183, 623, 624, 626, 627, 628, 629, 630, 637, 638, 640, 641, 643, 644, 645, 647], "mxn": [167, 182, 183, 623, 627, 637, 638, 640, 641, 645, 647], "defaultdtyp": [186, 187], "defaultfloatdtyp": [186, 188], "float_dtyp": [186, 202, 216], "defaultintdtyp": [186, 189], "dtype_in": [186, 190, 191, 205, 210, 211, 212, 222], "incompat": [186, 194], "occur": [186, 195, 198, 766, 767, 768, 771, 772, 773, 775], "data_type_funct": [186, 195, 198], "closest": [186, 200, 273, 335, 338, 350, 368, 371, 372, 375, 467, 470, 505, 508], "floatdtyp": [186, 202], "int_dtyp": [186, 203, 217], "intdtyp": [186, 203], "followng": [186, 206], "occupi": [186, 206, 209, 509, 561, 562], "ep": [186, 206, 623, 637, 640], "smallest_norm": [186, 206], "precis": [186, 206, 273, 442, 445, 483, 486], "encapsul": [186, 209], "type1": [186, 213], "type2": [186, 213], "arrays_and_dtyp": [186, 214], "ret1": [186, 218], "ret2": [186, 218], "noinspect": [187, 188, 189, 224, 580], "pyshadowingnam": [187, 188, 189, 224, 580], "array_method": [195, 196, 274, 275, 279, 282, 283, 287, 291, 292, 295, 296, 300, 303, 304, 307, 308, 311, 312, 315, 316, 319, 320, 323, 324, 327, 328, 331, 332, 335, 336, 340, 344, 348, 353, 356, 357, 361, 364, 365, 369, 372, 373, 377, 380, 381, 384, 385, 388, 389, 392, 393, 396, 397, 400, 401, 404, 405, 408, 409, 412, 413, 416, 417, 420, 421, 424, 425, 428, 429, 432, 433, 436, 437, 442, 443, 447, 448, 451, 452, 455, 456, 459, 460, 463, 464, 467, 468, 471, 472, 475, 476, 479, 480, 483, 484, 487, 488, 491, 493, 498, 502, 505, 506, 510, 511, 631, 632, 652, 653, 657, 658, 662, 663, 668, 669, 673, 674, 677, 678, 681, 682, 685, 686, 689, 690, 693, 694, 697, 698, 701, 702, 707, 708, 711, 712, 715, 716, 719, 720, 723, 724, 750, 751, 777, 778, 782, 783, 788, 789, 792, 793, 796, 797, 800, 801, 804, 805, 808, 809, 813, 816, 817, 821, 822, 825, 826], "container_method": [195, 197, 199, 274, 276, 280, 281, 282, 284, 288, 289, 290, 291, 293, 295, 297, 301, 302, 303, 305, 307, 309, 311, 313, 315, 317, 319, 321, 323, 325, 327, 329, 331, 333, 335, 337, 341, 342, 345, 346, 349, 350, 351, 354, 355, 356, 358, 362, 363, 364, 366, 370, 371, 372, 374, 378, 379, 380, 382, 384, 386, 388, 390, 392, 394, 396, 398, 400, 402, 404, 406, 408, 410, 412, 414, 416, 418, 420, 422, 424, 426, 428, 430, 432, 434, 436, 438, 442, 444, 446, 447, 449, 451, 453, 455, 457, 459, 461, 463, 465, 467, 469, 471, 473, 475, 477, 479, 481, 483, 485, 487, 489, 491, 492, 494, 497, 499, 500, 503, 504, 505, 507, 510, 512, 514, 522, 523, 582, 583, 585, 587, 588, 590, 592, 593, 595, 596, 597, 599, 600, 601, 603, 631, 633, 652, 654, 656, 657, 659, 661, 662, 664, 666, 668, 670, 672, 673, 675, 677, 679, 681, 683, 685, 687, 689, 691, 693, 695, 697, 699, 701, 703, 705, 707, 709, 711, 713, 715, 717, 719, 721, 723, 725, 750, 752, 756, 758, 760, 761, 763, 777, 779, 781, 782, 784, 786, 788, 790, 792, 794, 796, 798, 800, 802, 804, 806, 808, 810, 814, 815, 816, 818, 821, 823, 825, 827], "defaultdevic": [223, 224], "__enter__": 223, "_dev": 223, "initialis": 223, "devcloneditem": [223, 245], "multidevitem": [223, 225, 228], "devclonedit": 223, "multidevit": [223, 226, 229, 232, 233, 237], "devclonednest": 223, "multidevnest": [223, 227, 230], "devdistitem": 223, "devdistit": 223, "devdistnest": 223, "devmanag": [223, 231], "dev_mapp": 223, "da_dim_s": 223, "safety_factor": 223, "min_dev_dim_s": 223, "max_dev_dim_step_ratio": 223, "min_unit_dev_tune_step": 223, "min_sf_tune_step": 223, "starting_split_factor": 223, "max_split_factor_step_s": 223, "tune_dev_alloc": 223, "tune_dev_split": 223, "mapper": [223, 232, 233], "receivess": 223, "ratio": [223, 579, 592, 594, 866, 868], "safe": [223, 232], "oom": 223, "tune": 223, "da_tune_step": 223, "ds_tune_step": 223, "to_clon": 223, "to_distribut": 223, "multidevic": [223, 232], "parallel": [223, 232, 233], "mutlidevic": [223, 232], "repeated_config_check": 223, "tune_step": 223, "devmapp": [223, 233], "ret_fn": [223, 232, 233], "queue_class": [223, 232, 233], "worker_class": [223, 232, 233], "worker": [223, 232, 233], "used_dev": [223, 232], "sf": [223, 232], "devmappermultiproc": 223, "multidev": [223, 234, 235, 236, 255], "profil": 223, "save_dir": [223, 238], "deviceic": [223, 244], "spread": [223, 255], "139740789224448": [223, 257], "physic": [223, 259], "x3": [223, 261], "x4": [223, 261], "process_specif": [223, 262, 272], "percentag": [223, 262], "ram": [223, 262, 269, 272], "alon": [223, 262, 272], "attr_onli": [223, 263], "chunk": [223, 265, 266, 267], "max_chunk_s": [223, 267], "chunk_siz": [223, 267], "input_ax": [223, 267], "output_ax": [223, 267], "feed": [223, 267], "fist": [223, 267], "stream": [223, 268], "caveat": [223, 268], "portabl": [223, 268, 829], "gb": [223, 269, 272], "reset": [223, 271], "magnitud": [273, 274, 277, 286, 442, 445, 623, 644, 645], "princip": [273, 278, 291, 294, 299], "cosin": [273, 278, 281, 282, 285, 339, 342, 343, 346], "x1_i": [273, 286, 289, 303, 306, 311, 314, 319, 322, 323, 326, 327, 330, 331, 334, 347, 350, 352, 355, 363, 371, 372, 375, 376, 379, 380, 383, 396, 399, 400, 403, 420, 423, 424, 427, 432, 435, 436, 439, 442, 445, 451, 454, 459, 462, 463, 466, 491, 495], "x2_i": [273, 286, 289, 303, 306, 311, 314, 319, 322, 323, 326, 327, 330, 331, 334, 347, 350, 352, 355, 363, 371, 372, 375, 376, 379, 380, 383, 396, 399, 400, 403, 420, 423, 424, 427, 432, 435, 436, 439, 442, 445, 451, 454, 459, 462, 463, 466, 491, 495], "finit": [273, 286, 303, 306, 384, 387, 442, 445, 459, 462, 463, 466], "nor": [273, 286, 442, 445], "nearest": [273, 286, 442, 445, 467, 470], "2019": [273, 286, 364, 367, 442, 445], "commut": [273, 286], "sine": [273, 291, 294, 295, 298, 475, 478, 479, 482], "57": [273, 291, 294, 331, 334, 343], "524": [273, 291, 294], "644": [273, 291, 294], "201": [273, 291, 294, 467, 470], "305": [273, 291, 294], "412": [273, 291, 294], "quotient": [273, 303, 306], "notat": [273, 303, 306, 787, 788, 791, 815], "denot": [273, 303, 306], "pair": [273, 303, 306, 610, 622, 623, 625], "quadrant": [273, 303, 306], "3\u03c0": [273, 303, 306], "549": [273, 302, 307, 310, 500, 504], "bitwis": [273, 311, 314, 323, 326, 331, 334, 436, 439], "AND": [273, 311, 314, 424, 427, 820, 821, 824], "binari": [273, 311, 314, 323, 326, 331, 334, 436, 439, 651, 652, 655], "invert": [273, 315, 318], "arithmet": [273, 327, 330, 787, 796, 799], "propag": [273, 327, 330, 787, 792, 795, 796, 799, 800, 803, 808, 811, 812, 816, 819], "thu": [273, 327, 330, 459, 462, 463, 466, 623, 628], "lh": [273, 327, 330], "rh": [273, 327, 330], "xor": [273, 331, 334, 436, 439], "78": [273, 331, 334, 623, 639, 787, 788, 791, 815], "91": [273, 331, 334, 623, 639, 787, 788, 791, 815], "23": [273, 331, 334, 610, 616, 623, 627, 766, 770], "66": [273, 331, 334, 623, 639, 787, 788, 791, 815], "77": [273, 331, 334, 623, 639, 787, 788, 791, 815], "79": [273, 331, 334], "89": [273, 331, 334, 623, 646, 787, 812], "98": [273, 331, 334, 623, 639, 766, 770, 787, 788, 791, 815], "26": [273, 331, 334, 610, 617, 623, 627, 639, 646, 787, 788, 791, 815], "21": [273, 331, 334, 509, 527, 623, 627, 639, 651, 662, 665, 787, 788, 791, 815], "34": [273, 331, 334, 483, 486], "24": [273, 331, 334, 483, 486, 509, 527, 623, 627, 639, 787, 788, 791, 815], "51": [273, 331, 334], "27": [273, 331, 334, 343, 483, 486, 610, 622, 623, 639, 787, 788, 791, 815], "74": [273, 331, 334], "59": [273, 331, 334], "416": [273, 339], "76": [273, 343, 623, 646, 787, 788, 791, 815], "122": [273, 343], "368": [273, 343], "670": [273, 343], "202": [273, 343, 467, 470], "548": [273, 343], "1490": [273, 343], "dividend": [273, 347, 463, 466], "divisor": [273, 347, 463, 466, 579, 581, 582, 584, 592, 594, 787, 808, 811, 816, 819, 866, 867, 868], "gauss": [273, 356, 359], "exponenti": [273, 289, 356, 359, 360, 363, 420, 423, 459, 462], "logarithm": [273, 289, 360, 363, 404, 407, 408, 411, 412, 415, 416, 419, 420, 423, 623, 642], "72": [273, 360, 623, 639, 787, 788, 791, 815], "accur": [273, 364, 367], "fdlibm": [273, 364, 367], "compliant": [273, 364, 367, 428, 431, 432, 435, 787, 792, 795, 796, 799, 800, 803], "greatest": [273, 350, 368, 371, 372, 375], "out_i": [273, 384, 387, 388, 391, 392, 395], "threshold": [273, 440, 441], "exce": [273, 441], "y_i": [273, 447, 450], "expon": [273, 459, 462, 509, 570], "versu": [273, 459, 462], "odd": [273, 459, 462], "modulu": [273, 463, 466], "primarili": [273, 463, 466], "5654": [273, 467, 470], "034": [273, 467, 470], "433": [273, 467, 470], "343": [273, 467, 470], "44": [273, 467, 470, 483, 486, 487, 490, 623, 639, 766, 770, 787, 788, 791, 815], "30": [273, 467, 470, 623, 639, 787, 788, 791, 815, 841, 847], "81": [273, 467, 470, 487, 490, 787, 788, 791, 815], "527": [273, 467, 470], "301": [273, 467, 470], "indistinguish": [273, 483, 486], "infinit": [273, 483, 486], "83": [273, 483, 486], "32455532": [273, 483, 486], "89897949": [273, 483, 486], "50": [273, 483, 486, 623, 639, 766, 769, 787, 788, 791, 815], "31": [273, 483, 486], "169": [273, 483, 486], "63": [273, 483, 486, 623, 624, 639, 787, 788, 791, 815], "47": [273, 483, 486], "73": [273, 483, 486, 623, 624, 749, 750, 753], "93": [273, 483, 486], "35": [273, 483, 486, 610, 622, 623, 625, 766, 770, 787, 788, 791, 815], "09": [273, 487, 490, 610, 622], "61": [273, 487, 490, 651, 652, 655], "546": [273, 496], "842": [273, 496], "916": [273, 496, 651, 652, 655], "96": [273, 496, 623, 639, 787, 788, 791, 815], "996": [273, 496], "328": [273, 496], "decim": [273, 505, 508], "inspect": [509, 515, 833, 834], "downscal": [509, 521, 522, 524], "60": [509, 527, 623, 639, 787, 788, 791, 815], "default_v": [509, 530], "catch_except": [509, 530], "rev": [509, 530], "with_cal": [509, 530], "arrang": [509, 531], "123": [509, 534], "mod": [509, 535], "max_freq": [509, 536], "num_band": [509, 536], "pad": [509, 536, 610, 611, 612, 613, 614, 615, 616, 617, 667, 677, 680, 723, 726, 850, 851, 852, 853, 854, 855, 856, 857], "fourier": [509, 536], "band": [509, 536], "linearli": [509, 536, 623, 643], "oppos": [509, 536], "geometr": [509, 536], "seen_set": [509, 543], "local_set": [509, 543], "decrement": [509, 547], "is_arrai": 509, "allow_dupl": [509, 555], "forkserv": [509, 556], "spawn": [509, 556], "hot": [509, 558], "scatter": [509, 558, 561, 562], "overrid": [509, 558], "tmp_dr": [509, 566], "temporari": [509, 566], "min_denomin": [509, 569], "stabil": [509, 569, 570, 776, 777, 780, 782, 785], "_min_denomin": [509, 569], "min_bas": [509, 570], "_min_bas": [509, 570, 749, 750, 753, 864, 865], "100000023841858": [509, 573], "200000047683716": [509, 573], "299999952316284": [509, 573], "400000095367432": [509, 573], "599999904632568": [509, 573], "101": [509, 574], "unpack": [509, 577], "gradienttrack": [579, 580], "delta": [579, 581], "cost": [579, 581, 582, 584, 587, 589, 592, 594, 596, 598, 600, 602, 727, 728, 729, 730], "ws": [579, 581, 582, 584, 587, 589, 592, 594, 596, 598, 600, 602], "en": [579, 581, 582, 584], "wikipedia": [579, 581, 582, 584], "wiki": [579, 581, 582, 584], "stochastic_gradient_desc": [579, 581, 582, 584], "dc": [579, 581, 582, 584, 587, 589, 592, 594, 596, 598, 600, 602], "dw": [579, 581, 582, 584, 587, 589, 592, 594, 596, 598, 600, 602], "averag": [579, 581, 582, 584, 592, 594, 727, 728, 729], "forget": [579, 581, 582, 584, 592, 594, 866, 867, 868], "rate": [579, 582, 584, 587, 589, 592, 594, 596, 598, 600, 602, 727, 728, 729, 730, 850, 861, 866, 867, 868, 869, 870, 871], "ws_new": [579, 582, 584, 587, 589, 592, 594, 596, 598, 600, 602], "retain": [579, 586], "trust": [579, 592, 594, 866, 868], "decai": [579, 592, 594, 596, 598, 866, 868, 869], "layerwis": [579, 596, 598, 866, 869], "stride": [610, 611, 612, 613, 614, 615, 616, 617, 850, 851, 852, 853, 854, 855, 856, 857], "data_format": [610, 611, 612, 613, 614, 615, 616, 617, 850, 851, 852, 853, 854, 855, 856, 857], "nwc": [610, 611, 612, 850, 851, 852], "dilat": [610, 611, 612, 613, 614, 615, 616, 617, 850, 851, 852, 853, 854, 855, 856, 857], "convolut": [610, 611, 612, 613, 614, 615, 616, 617, 850, 851, 852, 853, 854, 855, 856, 857], "d_in": [610, 611, 612, 613, 614, 615, 616], "fw": [610, 611, 612, 613, 614, 615, 616, 617], "d_out": [610, 611, 612, 613, 614, 615, 616], "slide": [610, 611, 612, 613, 614, 615, 616, 617, 850, 851, 852, 853, 854, 855, 856, 857], "ncw": [610, 611, 612, 850, 851, 852], "wio": [610, 611], "output_shap": [610, 612, 614, 616, 850, 852, 854, 856], "nhwc": [610, 613, 614, 617, 850, 853, 854, 857], "fh": [610, 613, 614, 615, 616, 617], "nchw": [610, 613, 614, 617, 850, 853, 854, 857], "hwio": [610, 613], "unequ": [610, 613], "28": [610, 613, 616, 617, 623, 639, 787, 788, 791, 815], "unsqueez": [610, 613, 617], "ndhwc": [610, 615, 616, 850, 855, 856], "volum": [610, 615], "fd": [610, 615, 616], "ncdhw": [610, 615, 616, 850, 855, 856], "dhwio": [610, 615], "256": [610, 616], "258": [610, 616], "128": [610, 616, 623, 639], "depthwis": [610, 617, 850, 857], "333": [610, 617], "inp": [610, 617], "prob": [610, 618, 754, 755, 850, 858], "randomli": [610, 618, 850, 858], "bernoulli": [610, 618], "out_featur": [610, 618, 619], "incom": [610, 619], "outer_batch_shap": [610, 619], "inner_batch_shap": [610, 619], "in_featur": [610, 619], "cell": [610, 620, 850, 859], "num_queri": [610, 621, 622], "x_feat_dim": [610, 621], "num_kei": [610, 621, 622], "cont_feat_dim": [610, 621], "numhead": [610, 621], "feat_dim": [610, 621, 622], "out_feat_dim": [610, 621], "score": [610, 622], "04": [610, 622], "03": [610, 622, 749, 750, 753], "08": [610, 622], "decomposit": [623, 624, 641, 644], "symmetr": [623, 624, 628, 629, 650], "u": [623, 624, 644], "577": [623, 624], "707": [623, 624], "vif": [623, 625], "92": [623, 626], "293": [623, 626], "46997": [623, 626], "axis2": [623, 627], "eigendecomposit": [623, 628], "qlq\u1d40": [623, 628], "orthogon": [623, 628], "eig": [623, 628], "namedtupl": [623, 628, 641, 644, 771, 772, 773], "eigenvalu": [623, 628, 629], "eigenvector": [623, 628], "75": [623, 630, 639], "prepend": [623, 631, 634], "fro": [623, 635], "rtol": [623, 637, 640], "singular": [623, 637, 640, 644, 645], "toler": [623, 637, 640], "largest_singular_valu": [623, 637, 640], "array_lik": [623, 639], "33": [623, 639, 749, 750, 753, 787, 788, 791, 815], "36": [623, 639, 787, 788, 791, 815], "45": [623, 639, 667, 706, 749, 750, 753, 787, 788, 791, 815], "65": [623, 639, 787, 788, 791, 815], "84": [623, 639, 787, 788, 791, 815], "105": [623, 639, 651, 652, 655], "112": [623, 639, 787, 788, 791, 815], "104": [623, 639, 787, 788, 791, 815], "120": [623, 639], "moor": [623, 640], "penros": [623, 640], "pseudo": [623, 640], "orthonorm": [623, 641, 644], "2d": [623, 642, 850, 853, 854, 857], "logdet": [623, 642], "coeffici": [623, 643], "full_matric": [623, 644], "usvh": [623, 644], "vh": [623, 644], "hermitian": [623, 644], "et": [623, 644], "cetera": [623, 644], "adjoint": [623, 644], "reconstruct": [623, 644, 771, 772, 774], "reconstructed_x": [623, 644], "contract": [623, 646, 787, 788, 791, 815], "doubl": [623, 646], "singleton": [623, 649, 667, 707, 710, 766, 768, 787, 792, 795, 796, 799, 800, 803, 804, 807, 808, 811, 812, 816, 819, 820, 821, 824, 825, 828], "liter": [623, 649], "manhattan": [623, 649], "l2": [623, 649], "euclidean": [623, 649], "mathbf": [623, 650], "mathbb": [623, 650], "skew": [623, 650], "entropi": [651, 652, 655, 657, 660, 662, 665], "predict": [651, 652, 655, 657, 660, 662, 665], "smooth": [651, 652, 655, 657, 660, 662, 665], "223": [651, 652, 655], "357": [651, 652, 655, 662, 665], "511": [651, 652, 655], "discret": [651, 657, 660], "3862944": [651, 657, 660], "35667497": [651, 657, 660], "spars": [651, 662, 665], "logit": [651, 662, 665], "793291": [651, 662, 665], "512926": [651, 662, 665], "before_1": [667, 677, 680, 723, 726], "after_1": [667, 677, 680, 723, 726], "before_n": [667, 677, 680, 723, 726], "after_n": [667, 677, 680, 723, 726], "insert": [667, 681, 684, 731, 736, 766, 767], "manipulation_funct": [667, 681, 684], "reorder": [667, 685, 688], "permut": [667, 689, 692, 715, 718], "repetit": [667, 693, 696, 719, 722], "restor": [667, 701, 704], "classivi": [667, 706], "famili": [667, 711, 714], "intxx": [667, 711, 714], "floatxx": [667, 711, 714], "fomaml_step": 727, "inner_cost_fn": [727, 728, 729], "outer_cost_fn": [727, 728, 729], "inner_grad_step": [727, 728, 729, 730], "inner_learning_r": [727, 728, 729, 730], "inner_optimization_step": [727, 728, 729, 730], "inner_batch_fn": [727, 728, 729], "outer_batch_fn": [727, 728, 729], "average_across_step": [727, 728, 729], "inner_v": [727, 728, 729], "keep_inner_v": [727, 728, 729], "outer_v": [727, 728, 729], "keep_outer_v": [727, 728, 729], "return_inner_v": [727, 728, 729, 730], "num_task": [727, 728, 729, 730], "maml": [727, 728, 729], "recev": [727, 728, 729], "0x7f88e2b388b0": [727, 728, 729, 730], "maml_step": 727, "rece": [727, 729], "reptile_step": 727, "cost_fn": [727, 730], "reptil": [727, 730], "receivng": [727, 730], "all_nested_indic": 731, "include_nest": [731, 732], "_index": [731, 732, 742], "_base": [731, 732, 741, 742], "copy_nest": 731, "to_mut": [731, 733, 743], "mutabl": [731, 733, 743], "insert_into_nest_at_index": 731, "insert_into_nest_at_indic": 731, "map_nest_at_index": 731, "map_nest_at_indic": 731, "multi_index_nest": 731, "nested_ani": 731, "check_nest": [731, 741, 742], "conditon": [731, 741, 742], "nested_indices_wher": 731, "stop_after_n_found": [731, 742], "_depth": [731, 743], "_tuple_check_fn": [731, 743], "_list_check_fn": [731, 743], "_dict_check_fn": [731, 743], "nested_multi_map": 731, "nest0": [731, 744], "ivy_arrai": [731, 744], "funciton": [731, 744], "prune_nest_at_index": 731, "prune_nest_at_indic": 731, "set_nest_at_index": 731, "set_nest_at_indic": 731, "mini": [749, 750, 753, 864, 865], "gamma": [749, 750, 753], "beta": [749, 750, 753], "0976": [749, 750, 753], "3452": [749, 750, 753], "2740": [749, 750, 753], "1047": [749, 750, 753], "5886": [749, 750, 753], "2732": [749, 750, 753], "7696": [749, 750, 753], "7024": [749, 750, 753], "2518": [749, 750, 753], "58": [749, 750, 753, 771, 772], "283": [749, 750, 753], "585": [749, 750, 753], "909": [749, 750, 753], "628": [749, 750, 753], "997": [749, 750, 753], "225": [749, 750, 753], "425": [749, 750, 753], "norm_idx": [749, 750, 753], "228": [749, 750, 753], "0285": [749, 750, 753], "199": [749, 750, 753], "204": [749, 750, 753], "population_s": [754, 755], "num_sampl": [754, 755], "draw": [754, 755, 759, 760, 762], "unnorm": [754, 755], "drawn": [754, 755, 756, 757, 759, 760, 762], "home": [754, 755, 759, 760, 762], "uniformli": [754, 756, 757, 760, 762], "highest": [754, 756, 757], "parameter": [754, 759, 760, 762], "6444774682897879": [754, 759], "811": [754, 759], "508": [754, 759], "564": [754, 759], "7268672": [754, 759], "968": [754, 759], "175": [754, 759, 771, 772], "064": [754, 759], "40935726": [754, 759], "556": [754, 759], "26431865": [754, 760, 762], "475": [754, 760, 762], "878": [754, 760, 762], "861": [754, 760, 762], "89150229": [754, 760, 762], "89629126": [754, 760, 762], "94198485": [754, 760, 762], "91405606": [754, 760, 762], "72848724": [754, 760, 762], "7550739": [754, 760, 762], "624": [754, 760, 762], "00109": [754, 760, 762], "occurr": [766, 767, 768, 771, 772], "yield": [766, 770], "43": [766, 770], "x_j": [771, 772, 773, 775], "impli": [771, 772, 773, 775], "inverse_indic": [771, 772, 774], "aggreg": [771, 772], "fourth": [771, 772], "607": [771, 772], "735": [771, 772], "667": [771, 772], "381": [771, 772], "857": [771, 772], "0396": [771, 772], "166": [771, 772], "828": [771, 772], "144": [771, 772], "40501155": [771, 772], "77361575": [771, 772], "97776199": [771, 772], "36831157": [771, 772], "89148434": [771, 772], "9512272": [771, 772], "67542176": [771, 772], "41985657": [771, 772], "23478023": [771, 772], "1141": [771, 772], "8101": [771, 772], "9298": [771, 772], "8460": [771, 772], "2119": [771, 772], "3519": [771, 772], "6252": [771, 772], "4033": [771, 772], "7443": [771, 772], "2577": [771, 772], "3707": [771, 772], "0545": [771, 772], "3238": [771, 772], "5944": [771, 772], "0775": [771, 772], "4327": [771, 772], "176": [771, 772], "889": [771, 772], "763": [771, 772], "071": [771, 772], "262": [771, 772], "456": [771, 772], "114": [771, 772], "349": [771, 772], "615": [771, 772], "594": [771, 772], "335": [771, 772], "212": [771, 772], "457": [771, 772], "827": [771, 772], "209": [771, 772], "ascend": [776, 777, 780], "einstein": [787, 788, 791, 815], "summat": [787, 788, 791, 815], "seq": [787, 788, 791, 815], "jk": [787, 788, 791, 815], "ik": [787, 788, 791, 815], "126": [787, 788, 791, 815], "510": [787, 788, 791, 815], "99": [787, 788, 791, 815], "108": [787, 788, 791, 815], "117": [787, 788, 791, 815], "sentinel": [787, 792, 795, 800, 803], "unsign": [787, 804, 807, 812], "degre": [787, 808, 811, 816, 819], "bessel": [787, 808, 811, 816, 819], "8164966": [787, 808, 811], "varianc": [787, 816, 819], "unbias": [787, 816, 819], "simplicit": [820, 821, 824], "autom": 829, "grow": 829, "ai": 829, "got": 829, "colab": 829, "sharp": 829, "weekli": 829, "event": 829, "immedi": 829, "favorit": 829, "jax_concat": 829, "tf_concat": 829, "np_concat": 829, "mx_concat": 829, "torch_concat": 829, "prompt": 829, "get_devic": 829, "reduce_prod": 829, "gradient_imag": 829, "linalg": 829, "bilinear_resampl": 829, "stack_imag": 829, "neural_net": 829, "ecosystem": [829, 835], "popular": [829, 835], "acceler": 829, "articl": 829, "lenton2021ivi": 829, "inter": 829, "lenton": 829, "daniel": 829, "pardo": 829, "fabio": 829, "falck": 829, "fabian": 829, "jame": 829, "stephen": 829, "clark": 829, "ronald": 829, "journal": 829, "arxiv": 829, "preprint": 829, "2102": 829, "02886": 829, "2021": 829, "add_array_spec": 832, "fn_array_spec": 832, "geglu": 836, "native_modul": [839, 840], "native_module_class": [839, 840], "firstlayersiren": 841, "kaimingnorm": [841, 845], "negative_slop": 841, "Ones": 841, "siren": 841, "w0": [841, 847], "filter_s": [850, 851, 852], "1d": [850, 851, 852], "conv1dtranspos": 850, "filter_shap": [850, 853, 854, 855, 856, 857], "conv2dtranspos": 850, "conv3dtranspos": 850, "depthwiseconv2d": 850, "num_channel": [850, 857], "bernoul": [850, 858], "num_lay": [850, 859], "return_sequ": [850, 859], "return_st": [850, 859], "get_initial_st": [850, 859], "dens": [850, 860], "multiheadattent": 850, "query_dim": [850, 861], "head_dim": [850, 861], "dropout_r": [850, 861], "context_dim": [850, 861], "with_to_q_fn": [850, 861], "with_to_kv_fn": [850, 861], "with_to_out_fn": [850, 861], "build_mod": [850, 861, 862, 863], "on_init": [850, 861, 862, 863], "__call__": [850, 861, 862, 863], "store_var": [862, 863], "arg_stateful_idx": [862, 863], "kwarg_stateful_idx": [862, 863], "fallback_to_non_compil": [862, 863, 866, 870], "with_partial_v": [862, 863], "initialz": [862, 863], "from_cal": [862, 863], "check_submod_ret": [862, 863], "get_mod_kei": [862, 863], "top_mod": [862, 863], "mod_depth": [862, 863], "mod_height": [862, 863], "mod_with_top_mod_key_chain": [862, 863], "save_weight": [862, 863], "weights_path": [862, 863], "show_mod_in_top_mod": [862, 863], "upper_depth": [862, 863], "lower_depth": [862, 863], "show_structur": [862, 863], "show_v_in_top_v": [862, 863], "sub_mod": [862, 863], "show_v": [862, 863], "track_submod_call_ord": [862, 863], "track_submod_ret": [862, 863], "v_with_top_v_key_chain": [862, 863], "layernorm": 864, "normalized_shap": [864, 865], "elementwise_affin": [864, 865], "trail": [864, 865], "affin": [864, 865], "0001": [866, 867, 868], "init_on_first_step": [866, 870], "ignore_miss": [866, 870], "overriden": [866, 870], "sgd": 866, "stochast": [866, 871], "sub_modul": [872, 873]}, "objects": {"ivy.array": [[0, 0, 0, "-", "activations"], [2, 0, 0, "-", "conversions"], [7, 0, 0, "-", "creation"], [9, 0, 0, "-", "data_type"], [11, 0, 0, "-", "device"], [13, 0, 0, "-", "elementwise"], [15, 0, 0, "-", "general"], [17, 0, 0, "-", "gradients"], [19, 0, 0, "-", "image"], [21, 0, 0, "-", "layers"], [23, 0, 0, "-", "linear_algebra"], [25, 0, 0, "-", "losses"], [27, 0, 0, "-", "manipulation"], [29, 0, 0, "-", "norms"], [31, 0, 0, "-", "random"], [33, 0, 0, "-", "searching"], [35, 0, 0, "-", "set"], [37, 0, 0, "-", "sorting"], [39, 0, 0, "-", "statistical"], [41, 0, 0, "-", "utility"], [43, 0, 0, "-", "wrapping"]], "ivy.array.activations": [[1, 1, 1, "", "ArrayWithActivations"]], "ivy.array.array_methods": [[275, 2, 1, "", "abs"], [282, 2, 1, "", "acos"], [283, 2, 1, "", "acosh"], [420, 2, 1, "", "add"], [822, 2, 1, "", "all"], [511, 2, 1, "", "all_equal"], [826, 2, 1, "", "any"], [778, 2, 1, "", "argsort"], [292, 2, 1, "", "asin"], [296, 2, 1, "", "asinh"], [307, 2, 1, "", "atan"], [304, 2, 1, "", "atan2"], [308, 2, 1, "", "atanh"], [653, 2, 1, "", "binary_cross_entropy"], [312, 2, 1, "", "bitwise_and"], [316, 2, 1, "", "bitwise_invert"], [320, 2, 1, "", "bitwise_left_shift"], [324, 2, 1, "", "bitwise_or"], [328, 2, 1, "", "bitwise_right_shift"], [332, 2, 1, "", "bitwise_xor"], [196, 2, 1, "", "can_cast"], [336, 2, 1, "", "ceil"], [669, 2, 1, "", "clip"], [674, 2, 1, "", "concat"], [678, 2, 1, "", "constant_pad"], [340, 2, 1, "", "cos"], [344, 2, 1, "", "cosh"], [658, 2, 1, "", "cross_entropy"], [372, 2, 1, "", "divide"], [789, 2, 1, "", "einsum"], [380, 2, 1, "", "equal"], [357, 2, 1, "", "erf"], [420, 2, 1, "", "exp"], [682, 2, 1, "", "expand_dims"], [365, 2, 1, "", "expm1"], [686, 2, 1, "", "flip"], [372, 2, 1, "", "floor"], [373, 2, 1, "", "floor_divide"], [380, 2, 1, "", "greater"], [381, 2, 1, "", "greater_equal"], [385, 2, 1, "", "isfinite"], [389, 2, 1, "", "isinf"], [393, 2, 1, "", "isnan"], [751, 2, 1, "", "layer_norm"], [397, 2, 1, "", "less"], [401, 2, 1, "", "less_equal"], [405, 2, 1, "", "log"], [409, 2, 1, "", "log10"], [413, 2, 1, "", "log1p"], [417, 2, 1, "", "log2"], [421, 2, 1, "", "logaddexp"], [425, 2, 1, "", "logical_and"], [429, 2, 1, "", "logical_not"], [433, 2, 1, "", "logical_or"], [437, 2, 1, "", "logical_xor"], [632, 2, 1, "", "matmul"], [793, 2, 1, "", "max"], [797, 2, 1, "", "mean"], [801, 2, 1, "", "min"], [443, 2, 1, "", "multiply"], [448, 2, 1, "", "negative"], [452, 2, 1, "", "not_equal"], [690, 2, 1, "", "permute_dims"], [456, 2, 1, "", "positive"], [460, 2, 1, "", "pow"], [805, 2, 1, "", "prod"], [464, 2, 1, "", "remainder"], [694, 2, 1, "", "repeat"], [698, 2, 1, "", "reshape"], [702, 2, 1, "", "roll"], [468, 2, 1, "", "round"], [472, 2, 1, "", "sign"], [476, 2, 1, "", "sin"], [480, 2, 1, "", "sinh"], [783, 2, 1, "", "sort"], [663, 2, 1, "", "sparse_cross_entropy"], [484, 2, 1, "", "sqrt"], [488, 2, 1, "", "square"], [708, 2, 1, "", "squeeze"], [712, 2, 1, "", "stack"], [809, 2, 1, "", "std"], [493, 2, 1, "", "subtract"], [813, 2, 1, "", "sum"], [716, 2, 1, "", "swapaxes"], [498, 2, 1, "", "tan"], [502, 2, 1, "", "tanh"], [720, 2, 1, "", "tile"], [506, 2, 1, "", "trunc"], [817, 2, 1, "", "var"], [724, 2, 1, "", "zero_pad"]], "ivy.array.conversions": [[3, 2, 1, "", "args_to_ivy"], [4, 2, 1, "", "args_to_native"], [5, 2, 1, "", "to_ivy"], [6, 2, 1, "", "to_native"]], "ivy.array.creation": [[8, 1, 1, "", "ArrayWithCreation"]], "ivy.array.data_type": [[10, 1, 1, "", "ArrayWithDataTypes"]], "ivy.array.data_type.ArrayWithDataTypes": [[10, 3, 1, "", "can_cast"]], "ivy.array.device": [[12, 1, 1, "", "ArrayWithDevice"]], "ivy.array.elementwise": [[14, 1, 1, "", "ArrayWithElementwise"]], "ivy.array.elementwise.ArrayWithElementwise": [[14, 3, 1, "", "abs"], [14, 3, 1, "", "acos"], [14, 3, 1, "", "acosh"], [14, 3, 1, "", "add"], [14, 3, 1, "", "asin"], [14, 3, 1, "", "asinh"], [14, 3, 1, "", "atan"], [14, 3, 1, "", "atan2"], [14, 3, 1, "", "atanh"], [14, 3, 1, "", "bitwise_and"], [14, 3, 1, "", "bitwise_invert"], [14, 3, 1, "", "bitwise_left_shift"], [14, 3, 1, "", "bitwise_or"], [14, 3, 1, "", "bitwise_right_shift"], [14, 3, 1, "", "bitwise_xor"], [14, 3, 1, "", "ceil"], [14, 3, 1, "", "cos"], [14, 3, 1, "", "cosh"], [14, 3, 1, "", "divide"], [14, 3, 1, "", "equal"], [14, 3, 1, "", "erf"], [14, 3, 1, "", "exp"], [14, 3, 1, "", "expm1"], [14, 3, 1, "", "floor"], [14, 3, 1, "", "floor_divide"], [14, 3, 1, "", "greater"], [14, 3, 1, "", "greater_equal"], [14, 3, 1, "", "isfinite"], [14, 3, 1, "", "isinf"], [14, 3, 1, "", "isnan"], [14, 3, 1, "", "less"], [14, 3, 1, "", "less_equal"], [14, 3, 1, "", "log"], [14, 3, 1, "", "log10"], [14, 3, 1, "", "log1p"], [14, 3, 1, "", "log2"], [14, 3, 1, "", "logaddexp"], [14, 3, 1, "", "logical_and"], [14, 3, 1, "", "logical_not"], [14, 3, 1, "", "logical_or"], [14, 3, 1, "", "logical_xor"], [14, 3, 1, "", "multiply"], [14, 3, 1, "", "negative"], [14, 3, 1, "", "not_equal"], [14, 3, 1, "", "positive"], [14, 3, 1, "", "pow"], [14, 3, 1, "", "remainder"], [14, 3, 1, "", "round"], [14, 3, 1, "", "sign"], [14, 3, 1, "", "sin"], [14, 3, 1, "", "sinh"], [14, 3, 1, "", "sqrt"], [14, 3, 1, "", "square"], [14, 3, 1, "", "subtract"], [14, 3, 1, "", "tan"], [14, 3, 1, "", "tanh"], [14, 3, 1, "", "trunc"]], "ivy.array.general": [[16, 1, 1, "", "ArrayWithGeneral"]], "ivy.array.general.ArrayWithGeneral": [[16, 3, 1, "", "all_equal"]], "ivy.array.gradients": [[18, 1, 1, "", "ArrayWithGradients"]], "ivy.array.image": [[20, 1, 1, "", "ArrayWithImage"]], "ivy.array.layers": [[22, 1, 1, "", "ArrayWithLayers"]], "ivy.array.linear_algebra": [[24, 1, 1, "", "ArrayWithLinearAlgebra"]], "ivy.array.linear_algebra.ArrayWithLinearAlgebra": [[24, 3, 1, "", "matmul"]], "ivy.array.losses": [[26, 1, 1, "", "ArrayWithLosses"]], "ivy.array.losses.ArrayWithLosses": [[26, 3, 1, "", "binary_cross_entropy"], [26, 3, 1, "", "cross_entropy"], [26, 3, 1, "", "sparse_cross_entropy"]], "ivy.array.manipulation": [[28, 1, 1, "", "ArrayWithManipulation"]], "ivy.array.manipulation.ArrayWithManipulation": [[28, 3, 1, "", "clip"], [28, 3, 1, "", "concat"], [28, 3, 1, "", "constant_pad"], [28, 3, 1, "", "expand_dims"], [28, 3, 1, "", "flip"], [28, 3, 1, "", "permute_dims"], [28, 3, 1, "", "repeat"], [28, 3, 1, "", "reshape"], [28, 3, 1, "", "roll"], [28, 3, 1, "", "squeeze"], [28, 3, 1, "", "stack"], [28, 3, 1, "", "swapaxes"], [28, 3, 1, "", "tile"], [28, 3, 1, "", "zero_pad"]], "ivy.array.norms": [[30, 1, 1, "", "ArrayWithNorms"]], "ivy.array.norms.ArrayWithNorms": [[30, 3, 1, "", "layer_norm"]], "ivy.array.random": [[32, 1, 1, "", "ArrayWithRandom"]], "ivy.array.searching": [[34, 1, 1, "", "ArrayWithSearching"]], "ivy.array.set": [[36, 1, 1, "", "ArrayWithSet"]], "ivy.array.sorting": [[38, 1, 1, "", "ArrayWithSorting"]], "ivy.array.sorting.ArrayWithSorting": [[38, 3, 1, "", "argsort"], [38, 3, 1, "", "sort"]], "ivy.array.statistical": [[40, 1, 1, "", "ArrayWithStatistical"]], "ivy.array.statistical.ArrayWithStatistical": [[40, 3, 1, "", "einsum"], [40, 3, 1, "", "max"], [40, 3, 1, "", "mean"], [40, 3, 1, "", "min"], [40, 3, 1, "", "prod"], [40, 3, 1, "", "std"], [40, 3, 1, "", "sum"], [40, 3, 1, "", "var"]], "ivy.array.utility": [[42, 1, 1, "", "ArrayWithUtility"]], "ivy.array.utility.ArrayWithUtility": [[42, 3, 1, "", "all"], [42, 3, 1, "", "any"]], "ivy.array.wrapping": [[44, 2, 1, "", "add_ivy_array_instance_methods"]], "ivy": [[45, 0, 0, "-", "backend_handler"], [146, 0, 0, "-", "func_wrapper"], [832, 0, 0, "-", "inspection"], [875, 0, 0, "-", "verbosity"]], "ivy.backend_handler": [[45, 1, 1, "", "ContextManager"], [47, 2, 1, "", "choose_random_backend"], [48, 2, 1, "", "clear_backend_stack"], [49, 2, 1, "", "current_backend"], [50, 2, 1, "", "get_backend"], [51, 2, 1, "", "set_backend"], [52, 2, 1, "", "try_import_ivy_jax"], [53, 2, 1, "", "try_import_ivy_mxnet"], [54, 2, 1, "", "try_import_ivy_numpy"], [55, 2, 1, "", "try_import_ivy_tf"], [56, 2, 1, "", "try_import_ivy_torch"], [57, 2, 1, "", "unset_backend"]], "ivy.backend_handler.ContextManager": [[45, 3, 1, "", "__init__"]], "ivy.container": [[62, 0, 0, "-", "activations"], [64, 0, 0, "-", "base"], [66, 0, 0, "-", "container"], [69, 0, 0, "-", "creation"], [71, 0, 0, "-", "data_type"], [73, 0, 0, "-", "device"], [75, 0, 0, "-", "elementwise"], [77, 0, 0, "-", "general"], [79, 0, 0, "-", "gradients"], [81, 0, 0, "-", "image"], [83, 0, 0, "-", "layers"], [85, 0, 0, "-", "linear_algebra"], [87, 0, 0, "-", "losses"], [89, 0, 0, "-", "manipulation"], [91, 0, 0, "-", "norms"], [93, 0, 0, "-", "random"], [95, 0, 0, "-", "searching"], [97, 0, 0, "-", "set"], [99, 0, 0, "-", "sorting"], [101, 0, 0, "-", "statistical"], [103, 0, 0, "-", "utility"], [105, 0, 0, "-", "wrapping"]], "ivy.container.activations": [[63, 1, 1, "", "ContainerWithActivations"]], "ivy.container.base": [[65, 1, 1, "", "ContainerBase"]], "ivy.container.base.ContainerBase": [[65, 3, 1, "", "__getitem__"], [65, 3, 1, "", "__init__"], [65, 3, 1, "", "__setitem__"], [65, 3, 1, "", "all_false"], [65, 3, 1, "", "all_key_chains"], [65, 3, 1, "", "all_true"], [65, 3, 1, "", "arrays_as_lists"], [65, 3, 1, "", "as_arrays"], [65, 3, 1, "", "as_bools"], [65, 3, 1, "", "as_ones"], [65, 3, 1, "", "as_random_uniform"], [65, 3, 1, "", "as_variables"], [65, 3, 1, "", "as_zeros"], [65, 3, 1, "", "assert_contains_sub_container"], [65, 3, 1, "", "assert_contains_sub_structure"], [65, 3, 1, "", "assert_identical"], [65, 3, 1, "", "assert_identical_structure"], [65, 3, 1, "", "at_key_chain"], [65, 3, 1, "", "at_key_chains"], [65, 3, 1, "", "at_keys"], [65, 3, 1, "", "clip"], [65, 3, 1, "", "combine"], [65, 3, 1, "", "common_key_chains"], [65, 4, 1, "", "config"], [65, 3, 1, "", "contains_sub_container"], [65, 3, 1, "", "contains_sub_structure"], [65, 3, 1, "", "copy"], [65, 3, 1, "", "create_if_absent"], [65, 3, 1, "", "cutoff_at_depth"], [65, 3, 1, "", "cutoff_at_height"], [65, 3, 1, "", "deep_copy"], [65, 4, 1, "", "dev"], [65, 3, 1, "", "dev_clone"], [65, 3, 1, "", "dev_dist"], [65, 4, 1, "", "dev_str"], [65, 3, 1, "", "diff"], [65, 3, 1, "", "dtype"], [65, 3, 1, "", "einops_rearrange"], [65, 3, 1, "", "einops_reduce"], [65, 3, 1, "", "einops_repeat"], [65, 3, 1, "", "find_sub_container"], [65, 3, 1, "", "find_sub_structure"], [65, 3, 1, "", "flatten_key_chain"], [65, 3, 1, "", "flatten_key_chains"], [65, 3, 1, "", "format_key_chains"], [65, 3, 1, "", "from_disk_as_hdf5"], [65, 3, 1, "", "from_disk_as_json"], [65, 3, 1, "", "from_disk_as_pickled"], [65, 3, 1, "", "from_flat_list"], [65, 3, 1, "", "from_numpy"], [65, 3, 1, "", "gather"], [65, 3, 1, "", "gather_nd"], [65, 3, 1, "", "h5_file_size"], [65, 3, 1, "", "handle_inplace"], [65, 3, 1, "", "has_key"], [65, 3, 1, "", "has_key_chain"], [65, 3, 1, "", "has_nans"], [65, 3, 1, "", "identical"], [65, 3, 1, "", "identical_array_shapes"], [65, 3, 1, "", "identical_configs"], [65, 3, 1, "", "identical_structure"], [65, 3, 1, "", "if_exists"], [65, 3, 1, "", "inplace_update"], [65, 4, 1, "", "ivy"], [65, 3, 1, "", "key_chains_containing"], [65, 3, 1, "", "list_join"], [65, 3, 1, "", "list_stack"], [65, 3, 1, "", "map"], [65, 3, 1, "", "map_conts"], [65, 3, 1, "", "matrix_norm"], [65, 4, 1, "", "max_depth"], [65, 3, 1, "", "maximum"], [65, 3, 1, "", "minimum"], [65, 3, 1, "", "multi_map"], [65, 3, 1, "", "multi_map_in_static_method"], [65, 3, 1, "", "num_arrays"], [65, 3, 1, "", "overwrite_at_key_chain"], [65, 3, 1, "", "overwrite_at_key_chains"], [65, 3, 1, "", "prune_empty"], [65, 3, 1, "", "prune_key_chain"], [65, 3, 1, "", "prune_key_chains"], [65, 3, 1, "", "prune_key_from_key_chains"], [65, 3, 1, "", "prune_keys"], [65, 3, 1, "", "prune_keys_from_key_chains"], [65, 3, 1, "", "reduce"], [65, 3, 1, "", "remove_key_length_limit"], [65, 3, 1, "", "remove_print_limit"], [65, 3, 1, "", "reshape_like"], [65, 3, 1, "", "restructure"], [65, 3, 1, "", "restructure_key_chains"], [65, 3, 1, "", "set_at_key_chain"], [65, 3, 1, "", "set_at_key_chains"], [65, 3, 1, "", "set_at_keys"], [65, 3, 1, "", "set_framework"], [65, 3, 1, "", "set_ivy_backend"], [65, 4, 1, "", "shape"], [65, 4, 1, "", "shapes"], [65, 3, 1, "", "show"], [65, 3, 1, "", "show_sub_container"], [65, 3, 1, "", "shuffle"], [65, 3, 1, "", "shuffle_h5_file"], [65, 3, 1, "", "size_ordered_arrays"], [65, 3, 1, "", "slice_keys"], [65, 3, 1, "", "slice_via_key"], [65, 3, 1, "", "sort_by_key"], [65, 3, 1, "", "split"], [65, 3, 1, "", "stop_gradients"], [65, 3, 1, "", "structural_diff"], [65, 3, 1, "", "to_device"], [65, 3, 1, "", "to_dict"], [65, 3, 1, "", "to_disk_as_hdf5"], [65, 3, 1, "", "to_disk_as_json"], [65, 3, 1, "", "to_disk_as_pickled"], [65, 3, 1, "", "to_flat_list"], [65, 3, 1, "", "to_iterator"], [65, 3, 1, "", "to_iterator_keys"], [65, 3, 1, "", "to_iterator_values"], [65, 3, 1, "", "to_ivy"], [65, 3, 1, "", "to_jsonable"], [65, 3, 1, "", "to_list"], [65, 3, 1, "", "to_multi_dev"], [65, 3, 1, "", "to_native"], [65, 3, 1, "", "to_numpy"], [65, 3, 1, "", "to_raw"], [65, 3, 1, "", "trim_key"], [65, 3, 1, "", "try_kc"], [65, 3, 1, "", "unify"], [65, 3, 1, "", "unstack"], [65, 3, 1, "", "update_config"], [65, 3, 1, "", "vector_norm"], [65, 3, 1, "", "with_default_key_color"], [65, 3, 1, "", "with_entries_as_lists"], [65, 3, 1, "", "with_ivy_backend"], [65, 3, 1, "", "with_key_length_limit"], [65, 3, 1, "", "with_print_indent"], [65, 3, 1, "", "with_print_limit"], [65, 3, 1, "", "with_print_line_spacing"]], "ivy.container.container": [[67, 1, 1, "", "Container"], [68, 1, 1, "", "MultiDevContainer"]], "ivy.container.container.Container": [[67, 3, 1, "", "__add__"], [67, 3, 1, "", "__init__"], [67, 3, 1, "", "__radd__"], [67, 3, 1, "", "adam_step"], [67, 3, 1, "", "arange"], [67, 3, 1, "", "arg_info"], [67, 3, 1, "", "arg_names"], [67, 3, 1, "", "argmax"], [67, 3, 1, "", "argmin"], [67, 3, 1, "", "array"], [67, 3, 1, "", "array_equal"], [67, 3, 1, "", "arrays_equal"], [67, 3, 1, "", "as_ivy_dev"], [67, 3, 1, "", "as_ivy_dtype"], [67, 3, 1, "", "as_native_dev"], [67, 3, 1, "", "as_native_dtype"], [67, 3, 1, "", "asarray"], [67, 3, 1, "", "assert_supports_inplace"], [67, 3, 1, "", "astype"], [67, 3, 1, "", "broadcast_arrays"], [67, 3, 1, "", "broadcast_to"], [67, 3, 1, "", "cache_fn"], [67, 3, 1, "", "cholesky"], [67, 3, 1, "", "clear_mem_on_dev"], [67, 3, 1, "", "clip_matrix_norm"], [67, 3, 1, "", "closest_valid_dtype"], [67, 3, 1, "", "container_types"], [67, 3, 1, "", "conv1d"], [67, 3, 1, "", "conv1d_transpose"], [67, 3, 1, "", "conv2d"], [67, 3, 1, "", "conv2d_transpose"], [67, 3, 1, "", "conv3d"], [67, 3, 1, "", "conv3d_transpose"], [67, 3, 1, "", "copy_array"], [67, 3, 1, "", "cross"], [67, 3, 1, "", "cumprod"], [67, 3, 1, "", "cumsum"], [67, 3, 1, "", "current_backend"], [67, 3, 1, "", "current_backend_str"], [67, 3, 1, "", "default"], [67, 3, 1, "", "default_device"], [67, 3, 1, "", "default_dtype"], [67, 3, 1, "", "default_float_dtype"], [67, 3, 1, "", "default_int_dtype"], [67, 3, 1, "", "depthwise_conv2d"], [67, 3, 1, "", "det"], [67, 3, 1, "", "dev_clone_array"], [67, 3, 1, "", "dev_clone_iter"], [67, 3, 1, "", "dev_clone_nest"], [67, 3, 1, "", "dev_dist_array"], [67, 3, 1, "", "dev_dist_iter"], [67, 3, 1, "", "dev_dist_nest"], [67, 3, 1, "", "dev_unify"], [67, 3, 1, "", "dev_unify_array"], [67, 3, 1, "", "dev_unify_iter"], [67, 3, 1, "", "dev_unify_nest"], [67, 3, 1, "", "dev_util"], [67, 3, 1, "", "diagonal"], [67, 3, 1, "", "dropout"], [67, 3, 1, "", "dtype_bits"], [67, 3, 1, "", "eigh"], [67, 3, 1, "", "eigvalsh"], [67, 3, 1, "", "empty"], [67, 3, 1, "", "empty_like"], [67, 3, 1, "", "execute_with_gradients"], [67, 3, 1, "", "exists"], [67, 3, 1, "", "eye"], [67, 3, 1, "", "finfo"], [67, 3, 1, "", "floormod"], [67, 3, 1, "", "fourier_encode"], [67, 3, 1, "", "from_dlpack"], [67, 3, 1, "", "full"], [67, 3, 1, "", "full_like"], [67, 3, 1, "", "function_supported_dtypes"], [67, 3, 1, "", "function_unsupported_dtypes"], [67, 3, 1, "", "gelu"], [67, 3, 1, "", "get_all_arrays_in_memory"], [67, 3, 1, "", "get_all_ivy_arrays_on_dev"], [67, 3, 1, "", "get_min_base"], [67, 3, 1, "", "get_min_denominator"], [67, 3, 1, "", "get_num_dims"], [67, 3, 1, "", "get_referrers_recursive"], [67, 3, 1, "", "gpu_is_available"], [67, 3, 1, "", "handle_nestable"], [67, 3, 1, "", "handle_out_argument"], [67, 3, 1, "", "iinfo"], [67, 3, 1, "", "indices_where"], [67, 3, 1, "", "infer_device"], [67, 3, 1, "", "infer_dtype"], [67, 3, 1, "", "inplace_arrays_supported"], [67, 3, 1, "", "inplace_decrement"], [67, 3, 1, "", "inplace_increment"], [67, 3, 1, "", "inplace_variables_supported"], [67, 3, 1, "", "inputs_to_native_arrays"], [67, 3, 1, "", "inv"], [67, 3, 1, "", "invalid_dtype"], [67, 3, 1, "", "is_float_dtype"], [67, 3, 1, "", "is_int_dtype"], [67, 3, 1, "", "is_ivy_container"], [67, 3, 1, "", "leaky_relu"], [67, 3, 1, "", "linear"], [67, 3, 1, "", "linspace"], [67, 3, 1, "", "logspace"], [67, 3, 1, "", "lstm_update"], [67, 3, 1, "", "match_kwargs"], [67, 3, 1, "", "matrix_power"], [67, 3, 1, "", "matrix_rank"], [67, 3, 1, "", "matrix_transpose"], [67, 3, 1, "", "meshgrid"], [67, 3, 1, "", "multi_head_attention"], [67, 3, 1, "", "multinomial"], [67, 3, 1, "", "multiprocessing"], [67, 3, 1, "", "native_array"], [67, 3, 1, "", "nonzero"], [67, 3, 1, "", "num_arrays_in_memory"], [67, 3, 1, "", "num_cpu_cores"], [67, 3, 1, "", "num_gpus"], [67, 3, 1, "", "num_ivy_arrays_on_dev"], [67, 3, 1, "", "one_hot"], [67, 3, 1, "", "ones"], [67, 3, 1, "", "ones_like"], [67, 3, 1, "", "outer"], [67, 3, 1, "", "outputs_to_ivy_arrays"], [67, 3, 1, "", "percent_used_mem_on_dev"], [67, 3, 1, "", "pinv"], [67, 3, 1, "", "print_all_arrays_in_memory"], [67, 3, 1, "", "print_all_ivy_arrays_on_dev"], [67, 3, 1, "", "promote_types"], [67, 3, 1, "", "qr"], [67, 3, 1, "", "queue_timeout"], [67, 3, 1, "", "randint"], [67, 3, 1, "", "random_normal"], [67, 3, 1, "", "relu"], [67, 3, 1, "", "result_type"], [67, 3, 1, "", "scaled_dot_product_attention"], [67, 3, 1, "", "scatter_flat"], [67, 3, 1, "", "scatter_nd"], [67, 3, 1, "", "seed"], [67, 3, 1, "", "set_default_device"], [67, 3, 1, "", "set_default_dtype"], [67, 3, 1, "", "set_default_float_dtype"], [67, 3, 1, "", "set_default_int_dtype"], [67, 3, 1, "", "set_min_base"], [67, 3, 1, "", "set_min_denominator"], [67, 3, 1, "", "set_queue_timeout"], [67, 3, 1, "", "set_split_factor"], [67, 3, 1, "", "set_tmp_dir"], [67, 3, 1, "", "set_with_grads"], [67, 3, 1, "", "shape_to_tuple"], [67, 3, 1, "", "sigmoid"], [67, 3, 1, "", "slogdet"], [67, 3, 1, "", "softmax"], [67, 3, 1, "", "softplus"], [67, 3, 1, "", "solve"], [67, 3, 1, "", "split_factor"], [67, 3, 1, "", "split_func_call"], [67, 3, 1, "", "stable_divide"], [67, 3, 1, "", "stable_pow"], [67, 3, 1, "", "static_abs"], [67, 3, 1, "", "static_acos"], [67, 3, 1, "", "static_acosh"], [67, 3, 1, "", "static_adam_step"], [67, 3, 1, "", "static_all"], [67, 3, 1, "", "static_any"], [67, 3, 1, "", "static_arange"], [67, 3, 1, "", "static_arg_info"], [67, 3, 1, "", "static_arg_names"], [67, 3, 1, "", "static_argmax"], [67, 3, 1, "", "static_argmin"], [67, 3, 1, "", "static_array"], [67, 3, 1, "", "static_array_equal"], [67, 3, 1, "", "static_arrays_equal"], [67, 3, 1, "", "static_as_ivy_dev"], [67, 3, 1, "", "static_as_ivy_dtype"], [67, 3, 1, "", "static_as_native_dev"], [67, 3, 1, "", "static_as_native_dtype"], [67, 3, 1, "", "static_asarray"], [67, 3, 1, "", "static_asin"], [67, 3, 1, "", "static_asinh"], [67, 3, 1, "", "static_assert_supports_inplace"], [67, 3, 1, "", "static_astype"], [67, 3, 1, "", "static_atan"], [67, 3, 1, "", "static_atan2"], [67, 3, 1, "", "static_atanh"], [67, 3, 1, "", "static_bitwise_and"], [67, 3, 1, "", "static_bitwise_invert"], [67, 3, 1, "", "static_bitwise_left_shift"], [67, 3, 1, "", "static_bitwise_or"], [67, 3, 1, "", "static_bitwise_right_shift"], [67, 3, 1, "", "static_bitwise_xor"], [67, 3, 1, "", "static_broadcast_arrays"], [67, 3, 1, "", "static_broadcast_to"], [67, 3, 1, "", "static_cache_fn"], [67, 3, 1, "", "static_ceil"], [67, 3, 1, "", "static_cholesky"], [67, 3, 1, "", "static_clear_mem_on_dev"], [67, 3, 1, "", "static_clip_matrix_norm"], [67, 3, 1, "", "static_clip_vector_norm"], [67, 3, 1, "", "static_closest_valid_dtype"], [67, 3, 1, "", "static_concat"], [67, 3, 1, "", "static_constant_pad"], [67, 3, 1, "", "static_container_types"], [67, 3, 1, "", "static_conv1d"], [67, 3, 1, "", "static_conv1d_transpose"], [67, 3, 1, "", "static_conv2d"], [67, 3, 1, "", "static_conv2d_transpose"], [67, 3, 1, "", "static_conv3d"], [67, 3, 1, "", "static_conv3d_transpose"], [67, 3, 1, "", "static_copy_array"], [67, 3, 1, "", "static_cos"], [67, 3, 1, "", "static_cosh"], [67, 3, 1, "", "static_cross"], [67, 3, 1, "", "static_cumprod"], [67, 3, 1, "", "static_cumsum"], [67, 3, 1, "", "static_current_backend"], [67, 3, 1, "", "static_current_backend_str"], [67, 3, 1, "", "static_default"], [67, 3, 1, "", "static_default_device"], [67, 3, 1, "", "static_default_dtype"], [67, 3, 1, "", "static_default_float_dtype"], [67, 3, 1, "", "static_default_int_dtype"], [67, 3, 1, "", "static_depthwise_conv2d"], [67, 3, 1, "", "static_det"], [67, 3, 1, "", "static_dev"], [67, 3, 1, "", "static_dev_clone"], [67, 3, 1, "", "static_dev_clone_array"], [67, 3, 1, "", "static_dev_clone_iter"], [67, 3, 1, "", "static_dev_clone_nest"], [67, 3, 1, "", "static_dev_dist"], [67, 3, 1, "", "static_dev_dist_array"], [67, 3, 1, "", "static_dev_dist_iter"], [67, 3, 1, "", "static_dev_dist_nest"], [67, 3, 1, "", "static_dev_unify"], [67, 3, 1, "", "static_dev_unify_array"], [67, 3, 1, "", "static_dev_unify_iter"], [67, 3, 1, "", "static_dev_unify_nest"], [67, 3, 1, "", "static_dev_util"], [67, 3, 1, "", "static_diagonal"], [67, 3, 1, "", "static_dropout"], [67, 3, 1, "", "static_dtype"], [67, 3, 1, "", "static_dtype_bits"], [67, 3, 1, "", "static_eigh"], [67, 3, 1, "", "static_eigvalsh"], [67, 3, 1, "", "static_einops_rearrange"], [67, 3, 1, "", "static_einops_reduce"], [67, 3, 1, "", "static_einops_repeat"], [67, 3, 1, "", "static_einsum"], [67, 3, 1, "", "static_empty"], [67, 3, 1, "", "static_empty_like"], [67, 3, 1, "", "static_equal"], [67, 3, 1, "", "static_erf"], [67, 3, 1, "", "static_execute_with_gradients"], [67, 3, 1, "", "static_exists"], [67, 3, 1, "", "static_exp"], [67, 3, 1, "", "static_expand_dims"], [67, 3, 1, "", "static_expm1"], [67, 3, 1, "", "static_eye"], [67, 3, 1, "", "static_finfo"], [67, 3, 1, "", "static_flip"], [67, 3, 1, "", "static_floor"], [67, 3, 1, "", "static_floor_divide"], [67, 3, 1, "", "static_floormod"], [67, 3, 1, "", "static_fourier_encode"], [67, 3, 1, "", "static_from_dlpack"], [67, 3, 1, "", "static_full"], [67, 3, 1, "", "static_full_like"], [67, 3, 1, "", "static_function_supported_dtypes"], [67, 3, 1, "", "static_function_unsupported_dtypes"], [67, 3, 1, "", "static_gather"], [67, 3, 1, "", "static_gather_nd"], [67, 3, 1, "", "static_gelu"], [67, 3, 1, "", "static_get_all_arrays_in_memory"], [67, 3, 1, "", "static_get_all_ivy_arrays_on_dev"], [67, 3, 1, "", "static_get_min_base"], [67, 3, 1, "", "static_get_min_denominator"], [67, 3, 1, "", "static_get_num_dims"], [67, 3, 1, "", "static_get_referrers_recursive"], [67, 3, 1, "", "static_gpu_is_available"], [67, 3, 1, "", "static_greater"], [67, 3, 1, "", "static_greater_equal"], [67, 3, 1, "", "static_handle_nestable"], [67, 3, 1, "", "static_handle_out_argument"], [67, 3, 1, "", "static_has_nans"], [67, 3, 1, "", "static_iinfo"], [67, 3, 1, "", "static_indices_where"], [67, 3, 1, "", "static_infer_device"], [67, 3, 1, "", "static_infer_dtype"], [67, 3, 1, "", "static_inplace_arrays_supported"], [67, 3, 1, "", "static_inplace_decrement"], [67, 3, 1, "", "static_inplace_increment"], [67, 3, 1, "", "static_inplace_update"], [67, 3, 1, "", "static_inplace_variables_supported"], [67, 3, 1, "", "static_inputs_to_native_arrays"], [67, 3, 1, "", "static_inv"], [67, 3, 1, "", "static_invalid_dtype"], [67, 3, 1, "", "static_is_array"], [67, 3, 1, "", "static_is_float_dtype"], [67, 3, 1, "", "static_is_int_dtype"], [67, 3, 1, "", "static_is_ivy_array"], [67, 3, 1, "", "static_is_ivy_container"], [67, 3, 1, "", "static_is_native_array"], [67, 3, 1, "", "static_is_variable"], [67, 3, 1, "", "static_isfinite"], [67, 3, 1, "", "static_isinf"], [67, 3, 1, "", "static_isnan"], [67, 3, 1, "", "static_layer_norm"], [67, 3, 1, "", "static_leaky_relu"], [67, 3, 1, "", "static_less"], [67, 3, 1, "", "static_less_equal"], [67, 3, 1, "", "static_linear"], [67, 3, 1, "", "static_linspace"], [67, 3, 1, "", "static_log"], [67, 3, 1, "", "static_log10"], [67, 3, 1, "", "static_log1p"], [67, 3, 1, "", "static_log2"], [67, 3, 1, "", "static_logaddexp"], [67, 3, 1, "", "static_logical_and"], [67, 3, 1, "", "static_logical_not"], [67, 3, 1, "", "static_logical_or"], [67, 3, 1, "", "static_logical_xor"], [67, 3, 1, "", "static_logspace"], [67, 3, 1, "", "static_lstm_update"], [67, 3, 1, "", "static_match_kwargs"], [67, 3, 1, "", "static_matmul"], [67, 3, 1, "", "static_matrix_norm"], [67, 3, 1, "", "static_matrix_power"], [67, 3, 1, "", "static_matrix_rank"], [67, 3, 1, "", "static_matrix_transpose"], [67, 3, 1, "", "static_max"], [67, 3, 1, "", "static_maximum"], [67, 3, 1, "", "static_mean"], [67, 3, 1, "", "static_meshgrid"], [67, 3, 1, "", "static_min"], [67, 3, 1, "", "static_minimum"], [67, 3, 1, "", "static_multi_head_attention"], [67, 3, 1, "", "static_multinomial"], [67, 3, 1, "", "static_multiprocessing"], [67, 3, 1, "", "static_native_array"], [67, 3, 1, "", "static_negative"], [67, 3, 1, "", "static_nonzero"], [67, 3, 1, "", "static_not_equal"], [67, 3, 1, "", "static_num_arrays_in_memory"], [67, 3, 1, "", "static_num_cpu_cores"], [67, 3, 1, "", "static_num_gpus"], [67, 3, 1, "", "static_num_ivy_arrays_on_dev"], [67, 3, 1, "", "static_one_hot"], [67, 3, 1, "", "static_ones"], [67, 3, 1, "", "static_ones_like"], [67, 3, 1, "", "static_outer"], [67, 3, 1, "", "static_outputs_to_ivy_arrays"], [67, 3, 1, "", "static_percent_used_mem_on_dev"], [67, 3, 1, "", "static_permute_dims"], [67, 3, 1, "", "static_pinv"], [67, 3, 1, "", "static_positive"], [67, 3, 1, "", "static_pow"], [67, 3, 1, "", "static_print_all_arrays_in_memory"], [67, 3, 1, "", "static_print_all_ivy_arrays_on_dev"], [67, 3, 1, "", "static_prod"], [67, 3, 1, "", "static_promote_types"], [67, 3, 1, "", "static_qr"], [67, 3, 1, "", "static_queue_timeout"], [67, 3, 1, "", "static_random_normal"], [67, 3, 1, "", "static_relu"], [67, 3, 1, "", "static_remainder"], [67, 3, 1, "", "static_repeat"], [67, 3, 1, "", "static_reshape"], [67, 3, 1, "", "static_result_type"], [67, 3, 1, "", "static_round"], [67, 3, 1, "", "static_scaled_dot_product_attention"], [67, 3, 1, "", "static_scatter_flat"], [67, 3, 1, "", "static_scatter_nd"], [67, 3, 1, "", "static_seed"], [67, 3, 1, "", "static_set_default_device"], [67, 3, 1, "", "static_set_default_dtype"], [67, 3, 1, "", "static_set_default_float_dtype"], [67, 3, 1, "", "static_set_default_int_dtype"], [67, 3, 1, "", "static_set_min_base"], [67, 3, 1, "", "static_set_min_denominator"], [67, 3, 1, "", "static_set_queue_timeout"], [67, 3, 1, "", "static_set_split_factor"], [67, 3, 1, "", "static_set_tmp_dir"], [67, 3, 1, "", "static_set_with_grads"], [67, 3, 1, "", "static_shape"], [67, 3, 1, "", "static_shape_to_tuple"], [67, 3, 1, "", "static_shuffle"], [67, 3, 1, "", "static_sigmoid"], [67, 3, 1, "", "static_sign"], [67, 3, 1, "", "static_sin"], [67, 3, 1, "", "static_sinh"], [67, 3, 1, "", "static_slogdet"], [67, 3, 1, "", "static_softmax"], [67, 3, 1, "", "static_softplus"], [67, 3, 1, "", "static_solve"], [67, 3, 1, "", "static_split"], [67, 3, 1, "", "static_split_factor"], [67, 3, 1, "", "static_split_func_call"], [67, 3, 1, "", "static_sqrt"], [67, 3, 1, "", "static_square"], [67, 3, 1, "", "static_squeeze"], [67, 3, 1, "", "static_stable_divide"], [67, 3, 1, "", "static_stable_pow"], [67, 3, 1, "", "static_stack"], [67, 3, 1, "", "static_std"], [67, 3, 1, "", "static_stop_gradient"], [67, 3, 1, "", "static_sum"], [67, 3, 1, "", "static_supports_inplace"], [67, 3, 1, "", "static_svd"], [67, 3, 1, "", "static_svdvals"], [67, 3, 1, "", "static_swapaxes"], [67, 3, 1, "", "static_tanh"], [67, 3, 1, "", "static_tensordot"], [67, 3, 1, "", "static_tile"], [67, 3, 1, "", "static_tmp_dir"], [67, 3, 1, "", "static_to_device"], [67, 3, 1, "", "static_to_list"], [67, 3, 1, "", "static_to_native_arrays_and_back"], [67, 3, 1, "", "static_to_numpy"], [67, 3, 1, "", "static_to_scalar"], [67, 3, 1, "", "static_total_mem_on_dev"], [67, 3, 1, "", "static_tpu_is_available"], [67, 3, 1, "", "static_trace"], [67, 3, 1, "", "static_tril"], [67, 3, 1, "", "static_triu"], [67, 3, 1, "", "static_trunc"], [67, 3, 1, "", "static_try_else_none"], [67, 3, 1, "", "static_type_promote_arrays"], [67, 3, 1, "", "static_unique_all"], [67, 3, 1, "", "static_unique_counts"], [67, 3, 1, "", "static_unique_inverse"], [67, 3, 1, "", "static_unique_values"], [67, 3, 1, "", "static_unset_default_device"], [67, 3, 1, "", "static_unset_default_dtype"], [67, 3, 1, "", "static_unset_default_float_dtype"], [67, 3, 1, "", "static_unset_default_int_dtype"], [67, 3, 1, "", "static_unset_with_grads"], [67, 3, 1, "", "static_unstack"], [67, 3, 1, "", "static_used_mem_on_dev"], [67, 3, 1, "", "static_valid_dtype"], [67, 3, 1, "", "static_value_is_nan"], [67, 3, 1, "", "static_var"], [67, 3, 1, "", "static_variable"], [67, 3, 1, "", "static_variable_data"], [67, 3, 1, "", "static_vecdot"], [67, 3, 1, "", "static_vector_norm"], [67, 3, 1, "", "static_vector_to_skew_symmetric_matrix"], [67, 3, 1, "", "static_where"], [67, 3, 1, "", "static_with_grads"], [67, 3, 1, "", "static_zero_pad"], [67, 3, 1, "", "static_zeros"], [67, 3, 1, "", "static_zeros_like"], [67, 3, 1, "", "stop_gradient"], [67, 3, 1, "", "supports_inplace"], [67, 3, 1, "", "svd"], [67, 3, 1, "", "svdvals"], [67, 3, 1, "", "tensordot"], [67, 3, 1, "", "tmp_dir"], [67, 3, 1, "", "to_native_arrays_and_back"], [67, 3, 1, "", "to_scalar"], [67, 3, 1, "", "total_mem_on_dev"], [67, 3, 1, "", "tpu_is_available"], [67, 3, 1, "", "trace"], [67, 3, 1, "", "tril"], [67, 3, 1, "", "triu"], [67, 3, 1, "", "try_else_none"], [67, 3, 1, "", "type_promote_arrays"], [67, 3, 1, "", "unique_all"], [67, 3, 1, "", "unique_counts"], [67, 3, 1, "", "unique_inverse"], [67, 3, 1, "", "unique_values"], [67, 3, 1, "", "unset_default_device"], [67, 3, 1, "", "unset_default_dtype"], [67, 3, 1, "", "unset_default_float_dtype"], [67, 3, 1, "", "unset_default_int_dtype"], [67, 3, 1, "", "unset_with_grads"], [67, 3, 1, "", "used_mem_on_dev"], [67, 3, 1, "", "valid_dtype"], [67, 3, 1, "", "value_is_nan"], [67, 3, 1, "", "variable"], [67, 3, 1, "", "variable_data"], [67, 3, 1, "", "vecdot"], [67, 3, 1, "", "vector_to_skew_symmetric_matrix"], [67, 3, 1, "", "where"], [67, 3, 1, "", "with_grads"], [67, 3, 1, "", "zeros"], [67, 3, 1, "", "zeros_like"]], "ivy.container.container.MultiDevContainer": [[68, 3, 1, "", "__init__"], [68, 3, 1, "", "at_dev"], [68, 3, 1, "", "at_devs"]], "ivy.container.container_methods": [[276, 2, 1, "", "abs"], [282, 2, 1, "", "acos"], [346, 2, 1, "", "acosh"], [583, 2, 1, "", "adam_update"], [420, 2, 1, "", "add"], [823, 2, 1, "", "all"], [512, 2, 1, "", "all_equal"], [827, 2, 1, "", "any"], [779, 2, 1, "", "argsort"], [293, 2, 1, "", "asin"], [297, 2, 1, "", "asinh"], [307, 2, 1, "", "atan"], [305, 2, 1, "", "atan2"], [504, 2, 1, "", "atanh"], [654, 2, 1, "", "binary_cross_entropy"], [313, 2, 1, "", "bitwise_and"], [317, 2, 1, "", "bitwise_invert"], [321, 2, 1, "", "bitwise_left_shift"], [325, 2, 1, "", "bitwise_or"], [329, 2, 1, "", "bitwise_right_shift"], [333, 2, 1, "", "bitwise_xor"], [197, 2, 1, "", "can_cast"], [337, 2, 1, "", "ceil"], [670, 2, 1, "", "clip"], [523, 2, 1, "", "clip_vector_norm"], [675, 2, 1, "", "concat"], [679, 2, 1, "", "constant_pad"], [346, 2, 1, "", "cos"], [345, 2, 1, "", "cosh"], [659, 2, 1, "", "cross_entropy"], [372, 2, 1, "", "divide"], [815, 2, 1, "", "einsum"], [380, 2, 1, "", "equal"], [358, 2, 1, "", "erf"], [420, 2, 1, "", "exp"], [683, 2, 1, "", "expand_dims"], [366, 2, 1, "", "expm1"], [687, 2, 1, "", "flip"], [372, 2, 1, "", "floor"], [374, 2, 1, "", "floor_divide"], [588, 2, 1, "", "gradient_descent_update"], [380, 2, 1, "", "greater"], [382, 2, 1, "", "greater_equal"], [386, 2, 1, "", "isfinite"], [390, 2, 1, "", "isinf"], [394, 2, 1, "", "isnan"], [593, 2, 1, "", "lamb_update"], [597, 2, 1, "", "lars_update"], [752, 2, 1, "", "layer_norm"], [398, 2, 1, "", "less"], [402, 2, 1, "", "less_equal"], [406, 2, 1, "", "log"], [410, 2, 1, "", "log10"], [414, 2, 1, "", "log1p"], [418, 2, 1, "", "log2"], [422, 2, 1, "", "logaddexp"], [426, 2, 1, "", "logical_and"], [430, 2, 1, "", "logical_not"], [434, 2, 1, "", "logical_or"], [438, 2, 1, "", "logical_xor"], [633, 2, 1, "", "matmul"], [794, 2, 1, "", "max"], [798, 2, 1, "", "mean"], [802, 2, 1, "", "min"], [444, 2, 1, "", "multiply"], [449, 2, 1, "", "negative"], [453, 2, 1, "", "not_equal"], [601, 2, 1, "", "optimizer_update"], [691, 2, 1, "", "permute_dims"], [457, 2, 1, "", "positive"], [461, 2, 1, "", "pow"], [806, 2, 1, "", "prod"], [761, 2, 1, "", "random_uniform"], [465, 2, 1, "", "remainder"], [695, 2, 1, "", "repeat"], [699, 2, 1, "", "reshape"], [703, 2, 1, "", "roll"], [469, 2, 1, "", "round"], [473, 2, 1, "", "sign"], [477, 2, 1, "", "sin"], [481, 2, 1, "", "sinh"], [784, 2, 1, "", "sort"], [664, 2, 1, "", "sparse_cross_entropy"], [485, 2, 1, "", "sqrt"], [489, 2, 1, "", "square"], [709, 2, 1, "", "squeeze"], [713, 2, 1, "", "stack"], [585, 2, 1, "", "static_adam_update"], [420, 2, 1, "", "static_add"], [514, 2, 1, "", "static_all_equal"], [781, 2, 1, "", "static_argsort"], [656, 2, 1, "", "static_binary_cross_entropy"], [199, 2, 1, "", "static_can_cast"], [672, 2, 1, "", "static_clip"], [661, 2, 1, "", "static_cross_entropy"], [372, 2, 1, "", "static_divide"], [590, 2, 1, "", "static_gradient_descent_update"], [595, 2, 1, "", "static_lamb_update"], [599, 2, 1, "", "static_lars_update"], [446, 2, 1, "", "static_multiply"], [603, 2, 1, "", "static_optimizer_update"], [758, 2, 1, "", "static_randint"], [763, 2, 1, "", "static_random_uniform"], [705, 2, 1, "", "static_roll"], [786, 2, 1, "", "static_sort"], [666, 2, 1, "", "static_sparse_cross_entropy"], [492, 2, 1, "", "static_subtract"], [504, 2, 1, "", "static_tan"], [810, 2, 1, "", "std"], [494, 2, 1, "", "subtract"], [814, 2, 1, "", "sum"], [717, 2, 1, "", "swapaxes"], [504, 2, 1, "", "tan"], [503, 2, 1, "", "tanh"], [721, 2, 1, "", "tile"], [507, 2, 1, "", "trunc"], [818, 2, 1, "", "var"], [725, 2, 1, "", "zero_pad"]], "ivy.container.creation": [[70, 1, 1, "", "ContainerWithCreation"]], "ivy.container.data_type": [[72, 1, 1, "", "ContainerWithDataTypes"]], "ivy.container.data_type.ContainerWithDataTypes": [[72, 3, 1, "", "can_cast"], [72, 3, 1, "", "static_can_cast"]], "ivy.container.device": [[74, 1, 1, "", "ContainerWithDevice"]], "ivy.container.elementwise": [[76, 1, 1, "", "ContainerWithElementwise"]], "ivy.container.elementwise.ContainerWithElementwise": [[76, 3, 1, "", "abs"], [76, 3, 1, "", "acos"], [76, 3, 1, "", "acosh"], [76, 3, 1, "", "add"], [76, 3, 1, "", "asin"], [76, 3, 1, "", "asinh"], [76, 3, 1, "", "atan"], [76, 3, 1, "", "atan2"], [76, 3, 1, "", "atanh"], [76, 3, 1, "", "bitwise_and"], [76, 3, 1, "", "bitwise_invert"], [76, 3, 1, "", "bitwise_left_shift"], [76, 3, 1, "", "bitwise_or"], [76, 3, 1, "", "bitwise_right_shift"], [76, 3, 1, "", "bitwise_xor"], [76, 3, 1, "", "ceil"], [76, 3, 1, "", "cos"], [76, 3, 1, "", "cosh"], [76, 3, 1, "", "divide"], [76, 3, 1, "", "equal"], [76, 3, 1, "", "erf"], [76, 3, 1, "", "exp"], [76, 3, 1, "", "expm1"], [76, 3, 1, "", "floor"], [76, 3, 1, "", "floor_divide"], [76, 3, 1, "", "greater"], [76, 3, 1, "", "greater_equal"], [76, 3, 1, "", "isfinite"], [76, 3, 1, "", "isinf"], [76, 3, 1, "", "isnan"], [76, 3, 1, "", "less"], [76, 3, 1, "", "less_equal"], [76, 3, 1, "", "log"], [76, 3, 1, "", "log10"], [76, 3, 1, "", "log1p"], [76, 3, 1, "", "log2"], [76, 3, 1, "", "logaddexp"], [76, 3, 1, "", "logical_and"], [76, 3, 1, "", "logical_not"], [76, 3, 1, "", "logical_or"], [76, 3, 1, "", "logical_xor"], [76, 3, 1, "", "multiply"], [76, 3, 1, "", "negative"], [76, 3, 1, "", "not_equal"], [76, 3, 1, "", "positive"], [76, 3, 1, "", "pow"], [76, 3, 1, "", "remainder"], [76, 3, 1, "", "round"], [76, 3, 1, "", "sign"], [76, 3, 1, "", "sin"], [76, 3, 1, "", "sinh"], [76, 3, 1, "", "sqrt"], [76, 3, 1, "", "square"], [76, 3, 1, "", "static_add"], [76, 3, 1, "", "static_divide"], [76, 3, 1, "", "static_multiply"], [76, 3, 1, "", "static_subtract"], [76, 3, 1, "", "static_tan"], [76, 3, 1, "", "subtract"], [76, 3, 1, "", "tan"], [76, 3, 1, "", "tanh"], [76, 3, 1, "", "trunc"]], "ivy.container.general": [[78, 1, 1, "", "ContainerWithGeneral"]], "ivy.container.general.ContainerWithGeneral": [[78, 3, 1, "", "all_equal"], [78, 3, 1, "", "clip_vector_norm"], [78, 3, 1, "", "static_all_equal"]], "ivy.container.gradients": [[80, 1, 1, "", "ContainerWithGradients"]], "ivy.container.gradients.ContainerWithGradients": [[80, 3, 1, "", "adam_update"], [80, 3, 1, "", "gradient_descent_update"], [80, 3, 1, "", "lamb_update"], [80, 3, 1, "", "lars_update"], [80, 3, 1, "", "optimizer_update"], [80, 3, 1, "", "static_adam_update"], [80, 3, 1, "", "static_gradient_descent_update"], [80, 3, 1, "", "static_lamb_update"], [80, 3, 1, "", "static_lars_update"], [80, 3, 1, "", "static_optimizer_update"]], "ivy.container.image": [[82, 1, 1, "", "ContainerWithImage"]], "ivy.container.layers": [[84, 1, 1, "", "ContainerWithLayers"]], "ivy.container.linear_algebra": [[86, 1, 1, "", "ContainerWithLinearAlgebra"]], "ivy.container.linear_algebra.ContainerWithLinearAlgebra": [[86, 3, 1, "", "matmul"]], "ivy.container.losses": [[88, 1, 1, "", "ContainerWithLosses"]], "ivy.container.losses.ContainerWithLosses": [[88, 3, 1, "", "binary_cross_entropy"], [88, 3, 1, "", "cross_entropy"], [88, 3, 1, "", "sparse_cross_entropy"], [88, 3, 1, "", "static_binary_cross_entropy"], [88, 3, 1, "", "static_cross_entropy"], [88, 3, 1, "", "static_sparse_cross_entropy"]], "ivy.container.manipulation": [[90, 1, 1, "", "ContainerWithManipulation"]], "ivy.container.manipulation.ContainerWithManipulation": [[90, 3, 1, "", "clip"], [90, 3, 1, "", "concat"], [90, 3, 1, "", "constant_pad"], [90, 3, 1, "", "expand_dims"], [90, 3, 1, "", "flip"], [90, 3, 1, "", "permute_dims"], [90, 3, 1, "", "repeat"], [90, 3, 1, "", "reshape"], [90, 3, 1, "", "roll"], [90, 3, 1, "", "squeeze"], [90, 3, 1, "", "stack"], [90, 3, 1, "", "static_clip"], [90, 3, 1, "", "static_roll"], [90, 3, 1, "", "swapaxes"], [90, 3, 1, "", "tile"], [90, 3, 1, "", "zero_pad"]], "ivy.container.norms": [[92, 1, 1, "", "ContainerWithNorms"]], "ivy.container.norms.ContainerWithNorms": [[92, 3, 1, "", "layer_norm"]], "ivy.container.random": [[94, 1, 1, "", "ContainerWithRandom"]], "ivy.container.random.ContainerWithRandom": [[94, 3, 1, "", "random_uniform"], [94, 3, 1, "", "static_randint"], [94, 3, 1, "", "static_random_uniform"]], "ivy.container.searching": [[96, 1, 1, "", "ContainerWithSearching"]], "ivy.container.set": [[98, 1, 1, "", "ContainerWithSet"]], "ivy.container.sorting": [[100, 1, 1, "", "ContainerWithSorting"]], "ivy.container.sorting.ContainerWithSorting": [[100, 3, 1, "", "argsort"], [100, 3, 1, "", "sort"], [100, 3, 1, "", "static_argsort"], [100, 3, 1, "", "static_sort"]], "ivy.container.statistical": [[102, 1, 1, "", "ContainerWithStatistical"]], "ivy.container.statistical.ContainerWithStatistical": [[102, 3, 1, "", "einsum"], [102, 3, 1, "", "max"], [102, 3, 1, "", "mean"], [102, 3, 1, "", "min"], [102, 3, 1, "", "prod"], [102, 3, 1, "", "std"], [102, 3, 1, "", "sum"], [102, 3, 1, "", "var"]], "ivy.container.utility": [[104, 1, 1, "", "ContainerWithUtility"]], "ivy.container.utility.ContainerWithUtility": [[104, 3, 1, "", "all"], [104, 3, 1, "", "any"]], "ivy.container.wrapping": [[106, 2, 1, "", "add_ivy_container_instance_methods"]], "ivy.func_wrapper": [[147, 2, 1, "", "handle_nestable"], [148, 2, 1, "", "handle_out_argument"], [149, 2, 1, "", "infer_device"], [150, 2, 1, "", "infer_dtype"], [151, 2, 1, "", "inputs_to_ivy_arrays"], [152, 2, 1, "", "inputs_to_native_arrays"], [153, 2, 1, "", "outputs_to_ivy_arrays"], [154, 2, 1, "", "to_native_arrays_and_back"]], "ivy.functional.ivy": [[156, 0, 0, "-", "activations"], [164, 0, 0, "-", "compilation"], [166, 0, 0, "-", "constants"], [167, 0, 0, "-", "creation"], [186, 0, 0, "-", "data_type"], [223, 0, 0, "-", "device"], [273, 0, 0, "-", "elementwise"], [509, 0, 0, "-", "general"], [579, 0, 0, "-", "gradients"], [610, 0, 0, "-", "layers"], [623, 0, 0, "-", "linear_algebra"], [651, 0, 0, "-", "losses"], [667, 0, 0, "-", "manipulation"], [727, 0, 0, "-", "meta"], [731, 0, 0, "-", "nest"], [749, 0, 0, "-", "norms"], [754, 0, 0, "-", "random"], [766, 0, 0, "-", "searching"], [771, 0, 0, "-", "set"], [776, 0, 0, "-", "sorting"], [787, 0, 0, "-", "statistical"], [820, 0, 0, "-", "utility"]], "ivy.functional.ivy.activations": [[157, 2, 1, "", "gelu"], [158, 2, 1, "", "leaky_relu"], [159, 2, 1, "", "relu"], [160, 2, 1, "", "sigmoid"], [161, 2, 1, "", "softmax"], [162, 2, 1, "", "softplus"], [163, 2, 1, "", "tanh"]], "ivy.functional.ivy.compilation": [[165, 2, 1, "", "compile"]], "ivy.functional.ivy.constants": [[166, 5, 1, "", "e"], [166, 5, 1, "", "inf"], [166, 5, 1, "", "nan"], [166, 5, 1, "", "newaxis"], [166, 5, 1, "", "pi"]], "ivy.functional.ivy.creation": [[168, 2, 1, "", "arange"], [167, 2, 1, "", "array"], [169, 2, 1, "", "asarray"], [170, 2, 1, "", "empty"], [171, 2, 1, "", "empty_like"], [172, 2, 1, "", "eye"], [173, 2, 1, "", "from_dlpack"], [174, 2, 1, "", "full"], [175, 2, 1, "", "full_like"], [176, 2, 1, "", "linspace"], [177, 2, 1, "", "logspace"], [178, 2, 1, "", "meshgrid"], [179, 2, 1, "", "native_array"], [180, 2, 1, "", "ones"], [181, 2, 1, "", "ones_like"], [182, 2, 1, "", "tril"], [183, 2, 1, "", "triu"], [184, 2, 1, "", "zeros"], [185, 2, 1, "", "zeros_like"]], "ivy.functional.ivy.data_type": [[186, 1, 1, "", "DefaultDtype"], [186, 1, 1, "", "DefaultFloatDtype"], [186, 1, 1, "", "DefaultIntDtype"], [190, 2, 1, "", "as_ivy_dtype"], [191, 2, 1, "", "as_native_dtype"], [192, 2, 1, "", "astype"], [193, 2, 1, "", "broadcast_arrays"], [194, 2, 1, "", "broadcast_to"], [198, 2, 1, "", "can_cast"], [200, 2, 1, "", "closest_valid_dtype"], [201, 2, 1, "", "default_dtype"], [202, 2, 1, "", "default_float_dtype"], [203, 2, 1, "", "default_int_dtype"], [204, 2, 1, "", "dtype"], [205, 2, 1, "", "dtype_bits"], [206, 2, 1, "", "finfo"], [207, 2, 1, "", "function_supported_dtypes"], [208, 2, 1, "", "function_unsupported_dtypes"], [209, 2, 1, "", "iinfo"], [210, 2, 1, "", "invalid_dtype"], [211, 2, 1, "", "is_float_dtype"], [212, 2, 1, "", "is_int_dtype"], [213, 2, 1, "", "promote_types"], [214, 2, 1, "", "result_type"], [215, 2, 1, "", "set_default_dtype"], [216, 2, 1, "", "set_default_float_dtype"], [217, 2, 1, "", "set_default_int_dtype"], [218, 2, 1, "", "type_promote_arrays"], [219, 2, 1, "", "unset_default_dtype"], [220, 2, 1, "", "unset_default_float_dtype"], [221, 2, 1, "", "unset_default_int_dtype"], [222, 2, 1, "", "valid_dtype"]], "ivy.functional.ivy.data_type.DefaultDtype": [[186, 3, 1, "", "__init__"]], "ivy.functional.ivy.data_type.DefaultFloatDtype": [[186, 3, 1, "", "__init__"]], "ivy.functional.ivy.data_type.DefaultIntDtype": [[186, 3, 1, "", "__init__"]], "ivy.functional.ivy.device": [[223, 1, 1, "", "DefaultDevice"], [225, 1, 1, "", "DevClonedItem"], [226, 1, 1, "", "DevClonedIter"], [227, 1, 1, "", "DevClonedNest"], [228, 1, 1, "", "DevDistItem"], [229, 1, 1, "", "DevDistIter"], [230, 1, 1, "", "DevDistNest"], [223, 1, 1, "", "DevManager"], [232, 1, 1, "", "DevMapper"], [233, 1, 1, "", "DevMapperMultiProc"], [223, 1, 1, "", "MultiDev"], [235, 1, 1, "", "MultiDevItem"], [236, 1, 1, "", "MultiDevIter"], [237, 1, 1, "", "MultiDevNest"], [238, 1, 1, "", "Profiler"], [239, 2, 1, "", "as_ivy_dev"], [240, 2, 1, "", "as_native_dev"], [241, 2, 1, "", "clear_mem_on_dev"], [242, 2, 1, "", "default_device"], [243, 2, 1, "", "dev"], [244, 2, 1, "", "dev_clone"], [245, 2, 1, "", "dev_clone_array"], [246, 2, 1, "", "dev_clone_iter"], [247, 2, 1, "", "dev_clone_nest"], [248, 2, 1, "", "dev_dist"], [249, 2, 1, "", "dev_dist_array"], [250, 2, 1, "", "dev_dist_iter"], [251, 2, 1, "", "dev_dist_nest"], [252, 2, 1, "", "dev_unify"], [253, 2, 1, "", "dev_unify_array"], [254, 2, 1, "", "dev_unify_iter"], [255, 2, 1, "", "dev_unify_nest"], [256, 2, 1, "", "dev_util"], [257, 2, 1, "", "get_all_ivy_arrays_on_dev"], [258, 2, 1, "", "gpu_is_available"], [259, 2, 1, "", "num_cpu_cores"], [260, 2, 1, "", "num_gpus"], [261, 2, 1, "", "num_ivy_arrays_on_dev"], [262, 2, 1, "", "percent_used_mem_on_dev"], [263, 2, 1, "", "print_all_ivy_arrays_on_dev"], [264, 2, 1, "", "set_default_device"], [265, 2, 1, "", "set_split_factor"], [266, 2, 1, "", "split_factor"], [267, 2, 1, "", "split_func_call"], [268, 2, 1, "", "to_device"], [269, 2, 1, "", "total_mem_on_dev"], [270, 2, 1, "", "tpu_is_available"], [271, 2, 1, "", "unset_default_device"], [272, 2, 1, "", "used_mem_on_dev"]], "ivy.functional.ivy.device.DefaultDevice": [[223, 3, 1, "", "__enter__"], [223, 3, 1, "", "__init__"]], "ivy.functional.ivy.device.DevManager": [[223, 3, 1, "", "__init__"], [223, 3, 1, "", "da_tune_step"], [223, 4, 1, "", "dim_size"], [223, 3, 1, "", "ds_tune_step"], [223, 3, 1, "", "map"], [223, 3, 1, "", "repeated_config_check"], [223, 4, 1, "", "tune_step"], [223, 4, 1, "", "tuned"]], "ivy.functional.ivy.device.DevMapper": [[232, 3, 1, "", "__init__"], [232, 3, 1, "", "map"]], "ivy.functional.ivy.device.DevMapperMultiProc": [[233, 3, 1, "", "__init__"]], "ivy.functional.ivy.device.MultiDev": [[223, 3, 1, "", "__init__"]], "ivy.functional.ivy.device.MultiDevItem": [[235, 3, 1, "", "__init__"], [235, 3, 1, "", "items"], [235, 3, 1, "", "keys"], [235, 4, 1, "", "shape"], [235, 3, 1, "", "values"]], "ivy.functional.ivy.device.MultiDevIter": [[236, 3, 1, "", "__init__"], [236, 3, 1, "", "at_dev"], [236, 3, 1, "", "at_devs"]], "ivy.functional.ivy.device.MultiDevNest": [[237, 3, 1, "", "__init__"], [237, 3, 1, "", "at_dev"]], "ivy.functional.ivy.device.Profiler": [[238, 3, 1, "", "__init__"], [238, 3, 1, "", "start"], [238, 3, 1, "", "stop"]], "ivy.functional.ivy.elementwise": [[277, 2, 1, "", "abs"], [278, 2, 1, "", "acos"], [346, 2, 1, "", "acosh"], [286, 2, 1, "", "add"], [294, 2, 1, "", "asin"], [298, 2, 1, "", "asinh"], [299, 2, 1, "", "atan"], [306, 2, 1, "", "atan2"], [504, 2, 1, "", "atanh"], [314, 2, 1, "", "bitwise_and"], [318, 2, 1, "", "bitwise_invert"], [322, 2, 1, "", "bitwise_left_shift"], [326, 2, 1, "", "bitwise_or"], [330, 2, 1, "", "bitwise_right_shift"], [334, 2, 1, "", "bitwise_xor"], [338, 2, 1, "", "ceil"], [339, 2, 1, "", "cos"], [343, 2, 1, "", "cosh"], [347, 2, 1, "", "divide"], [352, 2, 1, "", "equal"], [359, 2, 1, "", "erf"], [360, 2, 1, "", "exp"], [367, 2, 1, "", "expm1"], [368, 2, 1, "", "floor"], [375, 2, 1, "", "floor_divide"], [376, 2, 1, "", "greater"], [383, 2, 1, "", "greater_equal"], [387, 2, 1, "", "isfinite"], [391, 2, 1, "", "isinf"], [395, 2, 1, "", "isnan"], [399, 2, 1, "", "less"], [403, 2, 1, "", "less_equal"], [407, 2, 1, "", "log"], [411, 2, 1, "", "log10"], [415, 2, 1, "", "log1p"], [419, 2, 1, "", "log2"], [423, 2, 1, "", "logaddexp"], [427, 2, 1, "", "logical_and"], [431, 2, 1, "", "logical_not"], [435, 2, 1, "", "logical_or"], [439, 2, 1, "", "logical_xor"], [440, 2, 1, "", "maximum"], [441, 2, 1, "", "minimum"], [445, 2, 1, "", "multiply"], [450, 2, 1, "", "negative"], [454, 2, 1, "", "not_equal"], [458, 2, 1, "", "positive"], [462, 2, 1, "", "pow"], [466, 2, 1, "", "remainder"], [470, 2, 1, "", "round"], [474, 2, 1, "", "sign"], [478, 2, 1, "", "sin"], [482, 2, 1, "", "sinh"], [486, 2, 1, "", "sqrt"], [490, 2, 1, "", "square"], [495, 2, 1, "", "subtract"], [496, 2, 1, "", "tan"], [501, 2, 1, "", "tanh"], [508, 2, 1, "", "trunc"]], "ivy.functional.ivy.general": [[513, 2, 1, "", "all_equal"], [515, 2, 1, "", "arg_info"], [516, 2, 1, "", "arg_names"], [517, 2, 1, "", "array_equal"], [518, 2, 1, "", "arrays_equal"], [519, 2, 1, "", "assert_supports_inplace"], [520, 2, 1, "", "cache_fn"], [521, 2, 1, "", "clip_matrix_norm"], [524, 2, 1, "", "clip_vector_norm"], [525, 2, 1, "", "container_types"], [526, 2, 1, "", "copy_array"], [527, 2, 1, "", "cumprod"], [528, 2, 1, "", "cumsum"], [529, 2, 1, "", "current_backend_str"], [530, 2, 1, "", "default"], [531, 2, 1, "", "einops_rearrange"], [532, 2, 1, "", "einops_reduce"], [533, 2, 1, "", "einops_repeat"], [534, 2, 1, "", "exists"], [535, 2, 1, "", "floormod"], [536, 2, 1, "", "fourier_encode"], [537, 2, 1, "", "gather"], [538, 2, 1, "", "gather_nd"], [539, 2, 1, "", "get_all_arrays_in_memory"], [540, 2, 1, "", "get_min_base"], [541, 2, 1, "", "get_min_denominator"], [542, 2, 1, "", "get_num_dims"], [543, 2, 1, "", "get_referrers_recursive"], [544, 2, 1, "", "has_nans"], [545, 2, 1, "", "indices_where"], [546, 2, 1, "", "inplace_arrays_supported"], [547, 2, 1, "", "inplace_decrement"], [548, 2, 1, "", "inplace_increment"], [549, 2, 1, "", "inplace_update"], [550, 2, 1, "", "inplace_variables_supported"], [551, 2, 1, "", "is_array"], [552, 2, 1, "", "is_ivy_array"], [553, 2, 1, "", "is_ivy_container"], [554, 2, 1, "", "is_native_array"], [555, 2, 1, "", "match_kwargs"], [556, 2, 1, "", "multiprocessing"], [557, 2, 1, "", "num_arrays_in_memory"], [558, 2, 1, "", "one_hot"], [559, 2, 1, "", "print_all_arrays_in_memory"], [560, 2, 1, "", "queue_timeout"], [561, 2, 1, "", "scatter_flat"], [562, 2, 1, "", "scatter_nd"], [563, 2, 1, "", "set_min_base"], [564, 2, 1, "", "set_min_denominator"], [565, 2, 1, "", "set_queue_timeout"], [566, 2, 1, "", "set_tmp_dir"], [567, 2, 1, "", "shape"], [568, 2, 1, "", "shape_to_tuple"], [569, 2, 1, "", "stable_divide"], [570, 2, 1, "", "stable_pow"], [571, 2, 1, "", "supports_inplace"], [572, 2, 1, "", "tmp_dir"], [573, 2, 1, "", "to_list"], [574, 2, 1, "", "to_numpy"], [575, 2, 1, "", "to_scalar"], [576, 2, 1, "", "try_else_none"], [577, 2, 1, "", "unstack"], [578, 2, 1, "", "value_is_nan"]], "ivy.functional.ivy.gradients": [[579, 1, 1, "", "GradientTracking"], [581, 2, 1, "", "adam_step"], [584, 2, 1, "", "adam_update"], [586, 2, 1, "", "execute_with_gradients"], [589, 2, 1, "", "gradient_descent_update"], [591, 2, 1, "", "is_variable"], [594, 2, 1, "", "lamb_update"], [598, 2, 1, "", "lars_update"], [602, 2, 1, "", "optimizer_update"], [604, 2, 1, "", "set_with_grads"], [605, 2, 1, "", "stop_gradient"], [606, 2, 1, "", "unset_with_grads"], [607, 2, 1, "", "variable"], [608, 2, 1, "", "variable_data"], [609, 2, 1, "", "with_grads"]], "ivy.functional.ivy.gradients.GradientTracking": [[579, 3, 1, "", "__init__"]], "ivy.functional.ivy.layers": [[611, 2, 1, "", "conv1d"], [612, 2, 1, "", "conv1d_transpose"], [613, 2, 1, "", "conv2d"], [614, 2, 1, "", "conv2d_transpose"], [615, 2, 1, "", "conv3d"], [616, 2, 1, "", "conv3d_transpose"], [617, 2, 1, "", "depthwise_conv2d"], [618, 2, 1, "", "dropout"], [619, 2, 1, "", "linear"], [620, 2, 1, "", "lstm_update"], [621, 2, 1, "", "multi_head_attention"], [622, 2, 1, "", "scaled_dot_product_attention"]], "ivy.functional.ivy.linear_algebra": [[624, 2, 1, "", "cholesky"], [625, 2, 1, "", "cross"], [626, 2, 1, "", "det"], [627, 2, 1, "", "diagonal"], [628, 2, 1, "", "eigh"], [629, 2, 1, "", "eigvalsh"], [630, 2, 1, "", "inv"], [634, 2, 1, "", "matmul"], [635, 2, 1, "", "matrix_norm"], [636, 2, 1, "", "matrix_power"], [637, 2, 1, "", "matrix_rank"], [638, 2, 1, "", "matrix_transpose"], [639, 2, 1, "", "outer"], [640, 2, 1, "", "pinv"], [641, 2, 1, "", "qr"], [642, 2, 1, "", "slogdet"], [643, 2, 1, "", "solve"], [644, 2, 1, "", "svd"], [645, 2, 1, "", "svdvals"], [646, 2, 1, "", "tensordot"], [647, 2, 1, "", "trace"], [648, 2, 1, "", "vecdot"], [649, 2, 1, "", "vector_norm"], [650, 2, 1, "", "vector_to_skew_symmetric_matrix"]], "ivy.functional.ivy.losses": [[655, 2, 1, "", "binary_cross_entropy"], [660, 2, 1, "", "cross_entropy"], [665, 2, 1, "", "sparse_cross_entropy"]], "ivy.functional.ivy.manipulation": [[671, 2, 1, "", "clip"], [676, 2, 1, "", "concat"], [680, 2, 1, "", "constant_pad"], [684, 2, 1, "", "expand_dims"], [688, 2, 1, "", "flip"], [692, 2, 1, "", "permute_dims"], [696, 2, 1, "", "repeat"], [700, 2, 1, "", "reshape"], [704, 2, 1, "", "roll"], [706, 2, 1, "", "split"], [710, 2, 1, "", "squeeze"], [714, 2, 1, "", "stack"], [718, 2, 1, "", "swapaxes"], [722, 2, 1, "", "tile"], [726, 2, 1, "", "zero_pad"]], "ivy.functional.ivy.meta": [[728, 2, 1, "", "fomaml_step"], [729, 2, 1, "", "maml_step"], [730, 2, 1, "", "reptile_step"]], "ivy.functional.ivy.nest": [[732, 2, 1, "", "all_nested_indices"], [733, 2, 1, "", "copy_nest"], [734, 2, 1, "", "index_nest"], [735, 2, 1, "", "insert_into_nest_at_index"], [736, 2, 1, "", "insert_into_nest_at_indices"], [737, 2, 1, "", "map"], [738, 2, 1, "", "map_nest_at_index"], [739, 2, 1, "", "map_nest_at_indices"], [740, 2, 1, "", "multi_index_nest"], [741, 2, 1, "", "nested_any"], [742, 2, 1, "", "nested_indices_where"], [743, 2, 1, "", "nested_map"], [744, 2, 1, "", "nested_multi_map"], [745, 2, 1, "", "prune_nest_at_index"], [746, 2, 1, "", "prune_nest_at_indices"], [747, 2, 1, "", "set_nest_at_index"], [748, 2, 1, "", "set_nest_at_indices"]], "ivy.functional.ivy.norms": [[753, 2, 1, "", "layer_norm"]], "ivy.functional.ivy.random": [[755, 2, 1, "", "multinomial"], [757, 2, 1, "", "randint"], [759, 2, 1, "", "random_normal"], [762, 2, 1, "", "random_uniform"], [764, 2, 1, "", "seed"], [765, 2, 1, "", "shuffle"]], "ivy.functional.ivy.searching": [[767, 2, 1, "", "argmax"], [768, 2, 1, "", "argmin"], [769, 2, 1, "", "nonzero"], [770, 2, 1, "", "where"]], "ivy.functional.ivy.set": [[772, 2, 1, "", "unique_all"], [773, 2, 1, "", "unique_counts"], [774, 2, 1, "", "unique_inverse"], [775, 2, 1, "", "unique_values"]], "ivy.functional.ivy.sorting": [[780, 2, 1, "", "argsort"], [785, 2, 1, "", "sort"]], "ivy.functional.ivy.statistical": [[815, 2, 1, "", "einsum"], [795, 2, 1, "", "max"], [799, 2, 1, "", "mean"], [803, 2, 1, "", "min"], [807, 2, 1, "", "prod"], [811, 2, 1, "", "std"], [812, 2, 1, "", "sum"], [819, 2, 1, "", "var"]], "ivy.functional.ivy.utility": [[824, 2, 1, "", "all"], [828, 2, 1, "", "any"]], "ivy.inspection": [[833, 2, 1, "", "add_array_specs"], [834, 2, 1, "", "fn_array_spec"]], "ivy.stateful": [[836, 0, 0, "-", "activations"], [839, 0, 0, "-", "converters"], [841, 0, 0, "-", "initializers"], [850, 0, 0, "-", "layers"], [862, 0, 0, "-", "module"], [864, 0, 0, "-", "norms"], [866, 0, 0, "-", "optimizers"], [872, 0, 0, "-", "sequential"]], "ivy.stateful.activations": [[837, 1, 1, "", "GEGLU"], [838, 1, 1, "", "GELU"]], "ivy.stateful.activations.GEGLU": [[837, 3, 1, "", "__init__"]], "ivy.stateful.activations.GELU": [[838, 3, 1, "", "__init__"]], "ivy.stateful.converters": [[840, 2, 1, "", "to_ivy_module"]], "ivy.stateful.initializers": [[841, 1, 1, "", "Constant"], [843, 1, 1, "", "FirstLayerSiren"], [844, 1, 1, "", "GlorotUniform"], [841, 1, 1, "", "KaimingNormal"], [846, 1, 1, "", "Ones"], [847, 1, 1, "", "Siren"], [841, 1, 1, "", "Uniform"], [849, 1, 1, "", "Zeros"]], "ivy.stateful.initializers.Constant": [[841, 3, 1, "", "__init__"], [841, 3, 1, "", "create_variables"]], "ivy.stateful.initializers.FirstLayerSiren": [[843, 3, 1, "", "__init__"]], "ivy.stateful.initializers.GlorotUniform": [[844, 3, 1, "", "__init__"]], "ivy.stateful.initializers.KaimingNormal": [[841, 3, 1, "", "__init__"], [841, 3, 1, "", "create_variables"]], "ivy.stateful.initializers.Ones": [[846, 3, 1, "", "__init__"]], "ivy.stateful.initializers.Siren": [[847, 3, 1, "", "__init__"]], "ivy.stateful.initializers.Uniform": [[841, 3, 1, "", "__init__"], [841, 3, 1, "", "create_variables"]], "ivy.stateful.initializers.Zeros": [[849, 3, 1, "", "__init__"]], "ivy.stateful.layers": [[851, 1, 1, "", "Conv1D"], [852, 1, 1, "", "Conv1DTranspose"], [853, 1, 1, "", "Conv2D"], [854, 1, 1, "", "Conv2DTranspose"], [855, 1, 1, "", "Conv3D"], [856, 1, 1, "", "Conv3DTranspose"], [857, 1, 1, "", "DepthwiseConv2D"], [858, 1, 1, "", "Dropout"], [859, 1, 1, "", "LSTM"], [860, 1, 1, "", "Linear"], [861, 1, 1, "", "MultiHeadAttention"]], "ivy.stateful.layers.Conv1D": [[851, 3, 1, "", "__init__"]], "ivy.stateful.layers.Conv1DTranspose": [[852, 3, 1, "", "__init__"]], "ivy.stateful.layers.Conv2D": [[853, 3, 1, "", "__init__"]], "ivy.stateful.layers.Conv2DTranspose": [[854, 3, 1, "", "__init__"]], "ivy.stateful.layers.Conv3D": [[855, 3, 1, "", "__init__"]], "ivy.stateful.layers.Conv3DTranspose": [[856, 3, 1, "", "__init__"]], "ivy.stateful.layers.DepthwiseConv2D": [[857, 3, 1, "", "__init__"]], "ivy.stateful.layers.Dropout": [[858, 3, 1, "", "__init__"]], "ivy.stateful.layers.LSTM": [[859, 3, 1, "", "__init__"], [859, 3, 1, "", "get_initial_state"]], "ivy.stateful.layers.Linear": [[860, 3, 1, "", "__init__"]], "ivy.stateful.layers.MultiHeadAttention": [[861, 3, 1, "", "__init__"]], "ivy.stateful.module": [[863, 1, 1, "", "Module"]], "ivy.stateful.module.Module": [[863, 3, 1, "", "__init__"], [863, 3, 1, "", "build"], [863, 4, 1, "", "build_mode"], [863, 4, 1, "", "built"], [863, 3, 1, "", "check_submod_rets"], [863, 3, 1, "", "get_mod_key"], [863, 3, 1, "", "mod_depth"], [863, 3, 1, "", "mod_height"], [863, 3, 1, "", "mod_with_top_mod_key_chain"], [863, 3, 1, "", "save_weights"], [863, 3, 1, "", "show_mod_in_top_mod"], [863, 3, 1, "", "show_structure"], [863, 3, 1, "", "show_v_in_top_v"], [863, 3, 1, "", "sub_mods"], [863, 3, 1, "", "track_submod_call_order"], [863, 3, 1, "", "track_submod_rets"], [863, 3, 1, "", "v_with_top_v_key_chains"]], "ivy.stateful.norms": [[865, 1, 1, "", "LayerNorm"]], "ivy.stateful.norms.LayerNorm": [[865, 3, 1, "", "__init__"]], "ivy.stateful.optimizers": [[867, 1, 1, "", "Adam"], [868, 1, 1, "", "LAMB"], [869, 1, 1, "", "LARS"], [870, 1, 1, "", "Optimizer"], [871, 1, 1, "", "SGD"]], "ivy.stateful.optimizers.Adam": [[867, 3, 1, "", "__init__"], [867, 3, 1, "", "set_state"], [867, 4, 1, "", "state"]], "ivy.stateful.optimizers.LAMB": [[868, 3, 1, "", "__init__"], [868, 3, 1, "", "set_state"], [868, 4, 1, "", "state"]], "ivy.stateful.optimizers.LARS": [[869, 3, 1, "", "__init__"], [869, 3, 1, "", "set_state"], [869, 4, 1, "", "state"]], "ivy.stateful.optimizers.Optimizer": [[870, 3, 1, "", "__init__"], [870, 3, 1, "", "set_state"], [870, 3, 1, "", "step"]], "ivy.stateful.optimizers.SGD": [[871, 3, 1, "", "__init__"], [871, 3, 1, "", "set_state"], [871, 4, 1, "", "state"]], "ivy.stateful.sequential": [[873, 1, 1, "", "Sequential"]], "ivy.stateful.sequential.Sequential": [[873, 3, 1, "", "__init__"]], "ivy.verbosity": [[876, 2, 1, "", "cprint"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:function", "3": "py:method", "4": "py:property", "5": "py:data"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "function", "Python function"], "3": ["py", "method", "Python method"], "4": ["py", "property", "Python property"], "5": ["py", "data", "Python data"]}, "titleterms": {"activ": [0, 62, 156, 836], "arraywithactiv": 1, "convers": 2, "args_to_ivi": 3, "args_to_n": 4, "to_ivi": 5, "to_n": 6, "creation": [7, 69, 167], "arraywithcr": 8, "data": [9, 71, 117, 123, 131, 145, 186, 771, 772, 773, 775], "type": [9, 71, 118, 123, 145, 186], "arraywithdatatyp": 10, "devic": [11, 73, 124, 126, 223], "arraywithdevic": 12, "elementwis": [13, 75, 273], "arraywithelementwis": 14, "gener": [15, 77, 117, 509], "arraywithgener": 16, "gradient": [17, 79, 579], "arraywithgradi": 18, "imag": [19, 81], "arraywithimag": 20, "layer": [21, 83, 610, 850], "arraywithlay": 22, "linear": [23, 85, 619, 623, 860], "algebra": [23, 85, 623], "arraywithlinearalgebra": 24, "loss": [25, 87, 651], "arraywithloss": 26, "manipul": [27, 89, 667], "arraywithmanipul": 28, "norm": [29, 91, 749, 864], "arraywithnorm": 30, "random": [31, 93, 754], "arraywithrandom": 32, "search": [33, 95, 766], "arraywithsearch": 34, "set": [35, 97, 108, 119, 771], "arraywithset": 36, "sort": [37, 99, 776, 782, 783, 784, 785], "arraywithsort": 38, "statist": [39, 101, 787], "arraywithstatist": 40, "util": [41, 103, 820], "arraywithutil": 42, "wrap": [43, 105, 120], "add_ivy_array_instance_method": 44, "backend": [45, 113, 119, 128, 145], "handler": [45, 128], "choose_random_backend": 47, "clear_backend_stack": 48, "current_backend": 49, "get_backend": 50, "set_backend": 51, "try_import_ivy_jax": 52, "try_import_ivy_mxnet": 53, "try_import_ivy_numpi": 54, "try_import_ivy_tf": 55, "try_import_ivy_torch": 56, "unset_backend": 57, "background": [58, 829], "ml": 59, "explos": 59, "standard": 60, "skeptic": 60, "complimentari": 60, "vs": [60, 145], "competit": 60, "do": 60, "work": [60, 111], "The": [60, 109, 130, 145], "arrai": [60, 116, 121, 126, 130, 196, 275, 279, 283, 287, 292, 296, 300, 304, 308, 312, 316, 320, 324, 328, 332, 336, 340, 344, 348, 353, 357, 361, 365, 369, 373, 377, 381, 385, 389, 393, 397, 401, 405, 409, 413, 417, 421, 425, 429, 433, 437, 443, 448, 452, 456, 460, 464, 468, 472, 476, 480, 484, 488, 493, 498, 502, 506, 511, 632, 653, 658, 663, 669, 674, 678, 682, 686, 690, 694, 698, 702, 708, 712, 716, 720, 724, 751, 778, 783, 789, 793, 797, 801, 805, 809, 813, 817, 822, 826], "api": [60, 110, 113, 116, 122, 128, 130, 132, 133], "why": 61, "unifi": [61, 130], "No": [61, 108], "more": 61, "re": 61, "implement": 61, "infinit": 61, "shelf": 61, "life": 61, "containerwithactiv": 63, "base": 64, "containerbas": 65, "contain": [66, 67, 122, 131, 197, 199, 276, 280, 284, 288, 290, 293, 297, 301, 305, 309, 313, 317, 321, 325, 329, 333, 337, 341, 345, 349, 351, 354, 358, 362, 366, 370, 374, 378, 382, 386, 390, 394, 398, 402, 406, 410, 414, 418, 422, 426, 430, 434, 438, 444, 446, 449, 453, 457, 461, 465, 469, 473, 477, 481, 485, 489, 492, 494, 497, 499, 503, 507, 512, 514, 523, 583, 585, 588, 590, 593, 595, 597, 599, 601, 603, 633, 654, 656, 659, 661, 664, 666, 670, 672, 675, 679, 683, 687, 691, 695, 699, 703, 705, 709, 713, 717, 721, 725, 752, 758, 761, 763, 779, 781, 784, 786, 790, 794, 798, 802, 806, 810, 814, 818, 823, 827], "multidevcontain": 68, "containerwithcr": 70, "containerwithdatatyp": 72, "containerwithdevic": 74, "containerwithelementwis": 76, "containerwithgener": 78, "containerwithgradi": 80, "containerwithimag": 82, "containerwithlay": 84, "containerwithlinearalgebra": 86, "containerwithloss": 88, "containerwithmanipul": 90, "containerwithnorm": 92, "containerwithrandom": 94, "containerwithsearch": 96, "containerwithset": 98, "containerwithsort": 100, "containerwithstatist": 102, "containerwithutil": 104, "add_ivy_container_instance_method": 106, "contribut": [107, 829], "up": 108, "clone": 108, "ivi": [108, 113, 115, 117, 121, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 144], "pycharm": 108, "virtual": 108, "environ": 108, "docker": [108, 109, 111], "us": [108, 111, 131], "miniconda": [108, 111], "venv": [108, 111], "interpret": 108, "window": 108, "maco": 108, "ubuntu": 108, "github": 108, "codespac": 108, "pre": 108, "commit": [108, 109], "basic": 109, "get": 109, "help": 109, "todo": 109, "list": 109, "issu": 109, "manag": 109, "your": 109, "fork": 109, "who": 109, "To": 109, "ask": 109, "With": 109, "command": 109, "line": 109, "browser": 109, "pull": 109, "request": 109, "small": 109, "often": 109, "run": 109, "test": [109, 116, 117], "local": 109, "open": 110, "task": 110, "function": [110, 118, 120, 122, 123, 124, 126, 128, 133, 145, 198, 277, 281, 285, 289, 294, 298, 302, 306, 310, 314, 318, 322, 326, 330, 334, 338, 342, 346, 350, 355, 359, 363, 367, 371, 375, 379, 383, 387, 391, 395, 399, 403, 407, 411, 415, 419, 423, 427, 431, 435, 439, 445, 450, 454, 458, 462, 466, 470, 474, 478, 482, 486, 490, 495, 500, 504, 508, 513, 524, 584, 589, 594, 598, 602, 634, 655, 660, 665, 671, 676, 680, 684, 688, 692, 696, 700, 704, 710, 714, 718, 722, 726, 753, 757, 762, 780, 785, 791, 795, 799, 803, 807, 811, 815, 819, 824, 828], "format": 110, "frontend": [110, 133], "build": [111, 128], "doc": 111, "dockerless": 111, "document": 111, "pipelin": [111, 145], "make_doc": 111, "sh": 111, "entrypoint": 111, "_make_doc": 111, "generate_src_rst_fil": 111, "py": 111, "sphinx": 111, "correct_built_html_fil": 111, "remove_fil": 111, "deep": 112, "dive": 112, "navig": 113, "code": 113, "categor": 113, "submodul": 113, "design": [113, 127, 829], "docstr": [114, 115], "exampl": [115, 126], "tan": [115, 496, 498, 499], "roll": [115, 701, 702, 703, 704], "add": [115, 286, 287, 288], "hypothesi": 117, "self": 117, "consist": 117, "explicit": 117, "test_array_funct": 117, "primari": 118, "composit": 118, "mix": 118, "standalon": 118, "nestabl": [118, 122, 126], "conveni": 118, "nativ": 121, "handl": 121, "instanc": [122, 130], "method": [122, 130, 131], "static": 122, "special": 122, "modul": [123, 124, 132, 862, 863], "argument": [123, 124, 125, 126], "other": [123, 124], "inplac": 125, "updat": 125, "out": [125, 126], "copi": 125, "dtype": [126, 204], "number": 126, "oper": [126, 130, 145], "integ": 126, "sequenc": 126, "block": 128, "framework": [128, 129], "graph": [128, 133], "compil": [128, 133, 164, 165], "class": 130, "monkei": 130, "patch": 130, "construct": 131, "represent": 131, "recurs": 131, "built": 131, "ins": 131, "access": 131, "save": 131, "load": 131, "comparison": 131, "custom": [131, 145], "case": 131, "compartment": 131, "configur": 131, "network": [131, 133], "weight": 131, "state": [132, 145], "initi": [132, 841], "optim": [132, 866, 870], "transpil": 133, "role": 133, "convert": [133, 839], "model": [133, 140, 145], "builder": 135, "ecosystem": 136, "gym": [137, 144], "mech": 138, "memori": [139, 144], "robot": [141, 144], "vision": [142, 144], "extens": [143, 829], "appli": 144, "librari": 144, "mechan": 144, "faq": 145, "mana": 145, "version": 145, "dynam": 145, "size": 145, "shape": [145, 567, 771, 772, 773, 775], "check": 145, "control": 145, "flow": 145, "auto": 145, "differenti": 145, "replica": 145, "parallel": 145, "support": 145, "altern": 145, "structur": 145, "func": 146, "wrapper": 146, "handle_nest": 147, "handle_out_argu": 148, "infer_devic": 149, "infer_dtyp": 150, "inputs_to_ivy_arrai": 151, "inputs_to_native_arrai": 152, "outputs_to_ivy_arrai": 153, "to_native_arrays_and_back": 154, "gelu": [157, 838], "leaky_relu": 158, "relu": 159, "sigmoid": 160, "softmax": 161, "softplu": 162, "tanh": [163, 501, 502, 503], "constant": 166, "note": [167, 173], "arang": 168, "asarrai": 169, "empti": 170, "empty_lik": 171, "ey": 172, "from_dlpack": 173, "full": 174, "full_lik": 175, "linspac": 176, "logspac": 177, "meshgrid": 178, "native_arrai": 179, "ones": 180, "ones_lik": 181, "tril": 182, "triu": 183, "zero": [184, 849], "zeros_lik": 185, "as_ivy_dtyp": 190, "as_native_dtyp": 191, "astyp": 192, "broadcast_arrai": 193, "broadcast_to": 194, "can_cast": [195, 196, 197, 198], "static_can_cast": 199, "closest_valid_dtyp": 200, "default_dtyp": 201, "default_float_dtyp": 202, "default_int_dtyp": 203, "dtype_bit": 205, "finfo": 206, "function_supported_dtyp": 207, "function_unsupported_dtyp": 208, "iinfo": 209, "invalid_dtyp": 210, "is_float_dtyp": 211, "is_int_dtyp": 212, "promote_typ": 213, "result_typ": 214, "set_default_dtyp": 215, "set_default_float_dtyp": 216, "set_default_int_dtyp": 217, "type_promote_arrai": 218, "unset_default_dtyp": 219, "unset_default_float_dtyp": 220, "unset_default_int_dtyp": 221, "valid_dtyp": 222, "devcloneditem": 225, "devclonedit": 226, "devclonednest": 227, "devdistitem": 228, "devdistit": 229, "devdistnest": 230, "devmapp": 232, "devmappermultiproc": 233, "multidevitem": 235, "multidevit": 236, "multidevnest": 237, "profil": 238, "as_ivy_dev": 239, "as_native_dev": 240, "clear_mem_on_dev": 241, "default_devic": 242, "dev": 243, "dev_clon": 244, "dev_clone_arrai": 245, "dev_clone_it": 246, "dev_clone_nest": 247, "dev_dist": 248, "dev_dist_arrai": 249, "dev_dist_it": 250, "dev_dist_nest": 251, "dev_unifi": 252, "dev_unify_arrai": 253, "dev_unify_it": 254, "dev_unify_nest": 255, "dev_util": 256, "get_all_ivy_arrays_on_dev": 257, "gpu_is_avail": 258, "num_cpu_cor": 259, "num_gpu": 260, "num_ivy_arrays_on_dev": 261, "percent_used_mem_on_dev": 262, "print_all_ivy_arrays_on_dev": 263, "set_default_devic": 264, "set_split_factor": 265, "split_factor": 266, "split_func_cal": 267, "to_devic": 268, "total_mem_on_dev": 269, "tpu_is_avail": 270, "unset_default_devic": 271, "used_mem_on_dev": 272, "ab": [274, 275, 276, 277], "aco": [278, 279, 280], "acosh": [281, 282, 283, 284, 285, 342, 346], "logaddexp": [289, 363, 420, 421, 422, 423], "static_add": 290, "asin": [291, 292, 293, 294], "asinh": [295, 296, 297, 298], "atan": [299, 300, 301], "atanh": [302, 307, 308, 309, 310, 500, 504], "atan2": [303, 304, 305, 306], "bitwise_and": [311, 312, 313, 314], "bitwise_invert": [315, 316, 317, 318], "bitwise_left_shift": [319, 320, 321, 322], "bitwise_or": [323, 324, 325, 326], "bitwise_right_shift": [327, 328, 329, 330], "bitwise_xor": [331, 332, 333, 334], "ceil": [335, 336, 337, 338], "co": [339, 340, 341], "cosh": [343, 344, 345], "divid": [347, 348, 349], "floor_divid": [350, 371, 372, 373, 374, 375], "static_divid": 351, "equal": [352, 353, 354], "greater_equ": [355, 379, 380, 381, 382, 383], "erf": [356, 357, 358, 359], "exp": [360, 361, 362], "expm1": [364, 365, 366, 367], "floor": [368, 369, 370], "greater": [376, 377, 378], "isfinit": [384, 385, 386, 387], "isinf": [388, 389, 390, 391], "isnan": [392, 393, 394, 395], "less": [396, 397, 398, 399], "less_equ": [400, 401, 402, 403], "log": [404, 405, 406, 407], "log10": [408, 409, 410, 411], "log1p": [412, 413, 414, 415], "log2": [416, 417, 418, 419], "logical_and": [424, 425, 426, 427], "logical_not": [428, 429, 430, 431], "logical_or": [432, 433, 434, 435], "logical_xor": [436, 437, 438, 439], "maximum": 440, "minimum": 441, "multipli": [442, 443, 444, 445], "static_multipli": 446, "neg": [447, 448, 449, 450], "not_equ": [451, 452, 453, 454], "posit": [455, 456, 457, 458], "pow": [459, 460, 461, 462], "remaind": [463, 464, 465, 466], "round": [467, 468, 469, 470], "sign": [471, 472, 473, 474], "sin": [475, 476, 477, 478], "sinh": [479, 480, 481, 482], "sqrt": [483, 484, 485, 486], "squar": [487, 488, 489, 490], "subtract": [491, 493, 494, 495], "static_subtract": 492, "static_tan": 497, "trunc": [505, 506, 507, 508], "all_equ": [510, 511, 512, 513], "static_all_equ": 514, "arg_info": 515, "arg_nam": 516, "array_equ": 517, "arrays_equ": 518, "assert_supports_inplac": 519, "cache_fn": 520, "clip_matrix_norm": 521, "clip_vector_norm": [522, 523, 524], "container_typ": 525, "copy_arrai": 526, "cumprod": 527, "cumsum": 528, "current_backend_str": 529, "default": 530, "einops_rearrang": 531, "einops_reduc": 532, "einops_repeat": 533, "exist": 534, "floormod": 535, "fourier_encod": 536, "gather": 537, "gather_nd": 538, "get_all_arrays_in_memori": 539, "get_min_bas": 540, "get_min_denomin": 541, "get_num_dim": 542, "get_referrers_recurs": 543, "has_nan": 544, "indices_wher": 545, "inplace_arrays_support": 546, "inplace_decr": 547, "inplace_incr": 548, "inplace_upd": 549, "inplace_variables_support": 550, "is_arrai": 551, "is_ivy_arrai": 552, "is_ivy_contain": 553, "is_native_arrai": 554, "match_kwarg": 555, "multiprocess": 556, "num_arrays_in_memori": 557, "one_hot": 558, "print_all_arrays_in_memori": 559, "queue_timeout": 560, "scatter_flat": 561, "scatter_nd": 562, "set_min_bas": 563, "set_min_denomin": 564, "set_queue_timeout": 565, "set_tmp_dir": 566, "shape_to_tupl": 568, "stable_divid": 569, "stable_pow": 570, "supports_inplac": 571, "tmp_dir": 572, "to_list": 573, "to_numpi": 574, "to_scalar": 575, "try_else_non": 576, "unstack": 577, "value_is_nan": 578, "adam_step": 581, "adam_upd": [582, 583, 584], "static_adam_upd": 585, "execute_with_gradi": 586, "gradient_descent_upd": [587, 588, 589], "static_gradient_descent_upd": 590, "is_vari": 591, "lamb_upd": [592, 593, 594], "static_lamb_upd": 595, "lars_upd": [596, 597, 598], "static_lars_upd": 599, "optimizer_upd": [600, 601, 602], "static_optimizer_upd": 603, "set_with_grad": 604, "stop_gradi": 605, "unset_with_grad": 606, "variabl": 607, "variable_data": 608, "with_grad": 609, "conv1d": [611, 851], "conv1d_transpos": 612, "conv2d": [613, 853], "conv2d_transpos": 614, "conv3d": [615, 855], "conv3d_transpos": 616, "depthwise_conv2d": 617, "dropout": [618, 858], "lstm_updat": 620, "multi_head_attent": 621, "scaled_dot_product_attent": 622, "choleski": 624, "cross": 625, "det": 626, "diagon": 627, "eigh": 628, "eigvalsh": 629, "inv": 630, "matmul": [631, 632, 633, 634], "matrix_norm": 635, "matrix_pow": 636, "matrix_rank": 637, "matrix_transpos": 638, "outer": 639, "pinv": 640, "qr": 641, "slogdet": 642, "solv": 643, "svd": 644, "svdval": 645, "tensordot": 646, "trace": 647, "vecdot": 648, "vector_norm": 649, "vector_to_skew_symmetric_matrix": 650, "binary_cross_entropi": [652, 653, 654, 655], "static_binary_cross_entropi": 656, "cross_entropi": [657, 658, 659, 660], "static_cross_entropi": 661, "sparse_cross_entropi": [662, 663, 664, 665], "static_sparse_cross_entropi": 666, "clip": [668, 669, 670, 671], "static_clip": 672, "concat": [673, 674, 675, 676], "constant_pad": [677, 678, 679, 680], "expand_dim": [681, 682, 683, 684], "flip": [685, 686, 687, 688], "permute_dim": [689, 690, 691, 692], "repeat": [693, 694, 695, 696], "reshap": [697, 698, 699, 700], "static_rol": 705, "split": 706, "squeez": [707, 708, 709, 710], "stack": [711, 712, 713, 714], "swapax": [715, 716, 717, 718], "tile": [719, 720, 721, 722], "zero_pad": [723, 724, 725, 726], "meta": 727, "fomaml_step": 728, "maml_step": 729, "reptile_step": 730, "nest": 731, "all_nested_indic": 732, "copy_nest": 733, "index_nest": 734, "insert_into_nest_at_index": 735, "insert_into_nest_at_indic": 736, "map": 737, "map_nest_at_index": 738, "map_nest_at_indic": 739, "multi_index_nest": 740, "nested_ani": 741, "nested_indices_wher": 742, "nested_map": 743, "nested_multi_map": 744, "prune_nest_at_index": 745, "prune_nest_at_indic": 746, "set_nest_at_index": 747, "set_nest_at_indic": 748, "layer_norm": [750, 751, 752, 753], "multinomi": 755, "randint": [756, 757], "static_randint": 758, "random_norm": 759, "random_uniform": [760, 761, 762], "static_random_uniform": 763, "seed": 764, "shuffl": 765, "argmax": 767, "argmin": 768, "nonzero": 769, "where": 770, "depend": [771, 772, 773, 775], "output": [771, 772, 773, 775], "unique_al": 772, "unique_count": 773, "unique_invers": 774, "unique_valu": 775, "argsort": [777, 778, 779, 780], "static_argsort": 781, "static_sort": 786, "einsum": [788, 789, 790, 791, 815], "max": [792, 793, 794, 795], "mean": [796, 797, 798, 799], "min": [800, 801, 802, 803], "prod": [804, 805, 806, 807], "std": [808, 809, 810, 811], "sum": [812, 813, 814], "var": [816, 817, 818, 819], "all": [821, 822, 823, 824], "ani": [825, 826, 827, 828], "content": 829, "overview": 829, "quick": 829, "start": 829, "roadmap": [829, 835], "citat": 829, "inspect": 832, "add_array_spec": 833, "fn_array_spec": 834, "geglu": 837, "to_ivy_modul": 840, "firstlayersiren": 843, "glorotuniform": 844, "Ones": 846, "siren": 847, "conv1dtranspos": 852, "conv2dtranspos": 854, "conv3dtranspos": 856, "depthwiseconv2d": 857, "lstm": 859, "multiheadattent": 861, "layernorm": 865, "adam": 867, "lamb": 868, "lar": 869, "sgd": 871, "sequenti": [872, 873], "verbos": 875, "cprint": 876}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 6, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.viewcode": 1, "sphinx": 56}})