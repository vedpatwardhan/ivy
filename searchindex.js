Search.setIndex({"docnames": ["array/activations", "array/activations/ArrayWithActivations", "array/array_methods", "array/array_methods/abs", "array/array_methods/acos", "array/array_methods/acosh", "array/array_methods/add", "array/array_methods/add_ivy_array_instance_methods", "array/array_methods/all", "array/array_methods/all_equal", "array/array_methods/any", "array/array_methods/argsort", "array/array_methods/asin", "array/array_methods/asinh", "array/array_methods/atan", "array/array_methods/atan2", "array/array_methods/atanh", "array/array_methods/binary_cross_entropy", "array/array_methods/bitwise_and", "array/array_methods/bitwise_invert", "array/array_methods/bitwise_left_shift", "array/array_methods/bitwise_or", "array/array_methods/bitwise_right_shift", "array/array_methods/bitwise_xor", "array/array_methods/can_cast", "array/array_methods/ceil", "array/array_methods/cholesky", "array/array_methods/clip", "array/array_methods/concat", "array/array_methods/constant_pad", "array/array_methods/cos", "array/array_methods/cosh", "array/array_methods/cross", "array/array_methods/cross_entropy", "array/array_methods/det", "array/array_methods/diagonal", "array/array_methods/divide", "array/array_methods/eigh", "array/array_methods/eigvalsh", "array/array_methods/einsum", "array/array_methods/equal", "array/array_methods/erf", "array/array_methods/exp", "array/array_methods/expand_dims", "array/array_methods/expm1", "array/array_methods/flip", "array/array_methods/floor", "array/array_methods/floor_divide", "array/array_methods/gather_nd", "array/array_methods/greater", "array/array_methods/greater_equal", "array/array_methods/inv", "array/array_methods/isfinite", "array/array_methods/isinf", "array/array_methods/isnan", "array/array_methods/layer_norm", "array/array_methods/less", "array/array_methods/less_equal", "array/array_methods/log", "array/array_methods/log10", "array/array_methods/log1p", "array/array_methods/log2", "array/array_methods/logaddexp", "array/array_methods/logical_and", "array/array_methods/logical_not", "array/array_methods/logical_or", "array/array_methods/logical_xor", "array/array_methods/matmul", "array/array_methods/matrix_norm", "array/array_methods/matrix_rank", "array/array_methods/matrix_transpose", "array/array_methods/max", "array/array_methods/mean", "array/array_methods/min", "array/array_methods/multiply", "array/array_methods/negative", "array/array_methods/not_equal", "array/array_methods/outer", "array/array_methods/permute_dims", "array/array_methods/pinv", "array/array_methods/positive", "array/array_methods/pow", "array/array_methods/prod", "array/array_methods/qr", "array/array_methods/remainder", "array/array_methods/repeat", "array/array_methods/reshape", "array/array_methods/roll", "array/array_methods/round", "array/array_methods/sign", "array/array_methods/sin", "array/array_methods/sinh", "array/array_methods/solve", "array/array_methods/sort", "array/array_methods/sparse_cross_entropy", "array/array_methods/sqrt", "array/array_methods/square", "array/array_methods/squeeze", "array/array_methods/stack", "array/array_methods/std", "array/array_methods/subtract", "array/array_methods/sum", "array/array_methods/svd", "array/array_methods/svdvals", "array/array_methods/swapaxes", "array/array_methods/tan", "array/array_methods/tanh", "array/array_methods/tensordot", "array/array_methods/tile", "array/array_methods/trace", "array/array_methods/trunc", "array/array_methods/var", "array/array_methods/vecdot", "array/array_methods/vector_norm", "array/array_methods/vector_to_skew_symmetric_matrix", "array/array_methods/zero_pad", "array/conversions", "array/conversions/args_to_ivy", "array/conversions/args_to_native", "array/conversions/to_ivy", "array/conversions/to_native", "array/creation", "array/creation/ArrayWithCreation", "array/data_type", "array/data_type/ArrayWithDataTypes", "array/device", "array/device/ArrayWithDevice", "array/elementwise", "array/elementwise/ArrayWithElementwise", "array/general", "array/general/ArrayWithGeneral", "array/gradients", "array/gradients/ArrayWithGradients", "array/image", "array/image/ArrayWithImage", "array/layers", "array/layers/ArrayWithLayers", "array/linear_algebra", "array/linear_algebra/ArrayWithLinearAlgebra", "array/losses", "array/losses/ArrayWithLosses", "array/manipulation", "array/manipulation/ArrayWithManipulation", "array/norms", "array/norms/ArrayWithNorms", "array/random", "array/random/ArrayWithRandom", "array/searching", "array/searching/ArrayWithSearching", "array/set", "array/set/ArrayWithSet", "array/sorting", "array/sorting/ArrayWithSorting", "array/statistical", "array/statistical/ArrayWithStatistical", "array/utility", "array/utility/ArrayWithUtility", "array/wrapping", "array/wrapping/add_ivy_array_instance_methods", "backend_handler", "backend_handler/ContextManager:\n    def __init__", "backend_handler/choose_random_backend", "backend_handler/clear_backend_stack", "backend_handler/current_backend", "backend_handler/get_backend", "backend_handler/set_backend", "backend_handler/try_import_ivy_jax", "backend_handler/try_import_ivy_mxnet", "backend_handler/try_import_ivy_numpy", "backend_handler/try_import_ivy_tf", "backend_handler/try_import_ivy_torch", "backend_handler/unset_backend", "background", "background/ml_explosion", "background/standardization", "background/why_unify", "container/activations", "container/activations/ContainerWithActivations", "container/base", "container/base/ContainerBase", "container/container", "container/container/Container", "container/container/MultiDevContainer", "container/container_methods", "container/container_methods/abs", "container/container_methods/acos", "container/container_methods/acosh", "container/container_methods/adam_update", "container/container_methods/add", "container/container_methods/add_ivy_container_instance_methods", "container/container_methods/all", "container/container_methods/all_equal", "container/container_methods/any", "container/container_methods/argsort", "container/container_methods/asin", "container/container_methods/asinh", "container/container_methods/at_dev", "container/container_methods/at_devs", "container/container_methods/atan", "container/container_methods/atan2", "container/container_methods/atanh", "container/container_methods/binary_cross_entropy", "container/container_methods/bitwise_and", "container/container_methods/bitwise_invert", "container/container_methods/bitwise_left_shift", "container/container_methods/bitwise_or", "container/container_methods/bitwise_right_shift", "container/container_methods/bitwise_xor", "container/container_methods/can_cast", "container/container_methods/ceil", "container/container_methods/clip", "container/container_methods/clip_vector_norm", "container/container_methods/concat", "container/container_methods/constant_pad", "container/container_methods/cos", "container/container_methods/cosh", "container/container_methods/cross_entropy", "container/container_methods/divide", "container/container_methods/einsum", "container/container_methods/equal", "container/container_methods/erf", "container/container_methods/exp", "container/container_methods/expand_dims", "container/container_methods/expm1", "container/container_methods/flip", "container/container_methods/floor", "container/container_methods/floor_divide", "container/container_methods/gather_nd", "container/container_methods/gradient_descent_update", "container/container_methods/greater", "container/container_methods/greater_equal", "container/container_methods/isfinite", "container/container_methods/isinf", "container/container_methods/isnan", "container/container_methods/lamb_update", "container/container_methods/lars_update", "container/container_methods/layer_norm", "container/container_methods/less", "container/container_methods/less_equal", "container/container_methods/log", "container/container_methods/log10", "container/container_methods/log1p", "container/container_methods/log2", "container/container_methods/logaddexp", "container/container_methods/logical_and", "container/container_methods/logical_not", "container/container_methods/logical_or", "container/container_methods/logical_xor", "container/container_methods/matmul", "container/container_methods/max", "container/container_methods/mean", "container/container_methods/min", "container/container_methods/multiply", "container/container_methods/negative", "container/container_methods/not_equal", "container/container_methods/optimizer_update", "container/container_methods/permute_dims", "container/container_methods/positive", "container/container_methods/pow", "container/container_methods/prod", "container/container_methods/random_uniform", "container/container_methods/remainder", "container/container_methods/repeat", "container/container_methods/reshape", "container/container_methods/roll", "container/container_methods/round", "container/container_methods/sign", "container/container_methods/sin", "container/container_methods/sinh", "container/container_methods/sort", "container/container_methods/sparse_cross_entropy", "container/container_methods/sqrt", "container/container_methods/square", "container/container_methods/squeeze", "container/container_methods/stack", "container/container_methods/static_adam_update", "container/container_methods/static_add", "container/container_methods/static_all_equal", "container/container_methods/static_argsort", "container/container_methods/static_binary_cross_entropy", "container/container_methods/static_can_cast", "container/container_methods/static_clip", "container/container_methods/static_cross_entropy", "container/container_methods/static_divide", "container/container_methods/static_gather_nd", "container/container_methods/static_gradient_descent_update", "container/container_methods/static_lamb_update", "container/container_methods/static_lars_update", "container/container_methods/static_multiply", "container/container_methods/static_optimizer_update", "container/container_methods/static_randint", "container/container_methods/static_random_uniform", "container/container_methods/static_roll", "container/container_methods/static_sort", "container/container_methods/static_sparse_cross_entropy", "container/container_methods/static_subtract", "container/container_methods/static_tan", "container/container_methods/static_tanh", "container/container_methods/std", "container/container_methods/subtract", "container/container_methods/sum", "container/container_methods/swapaxes", "container/container_methods/tan", "container/container_methods/tanh", "container/container_methods/tile", "container/container_methods/trunc", "container/container_methods/var", "container/container_methods/zero_pad", "container/creation", "container/creation/ContainerWithCreation", "container/data_type", "container/data_type/ContainerWithDataTypes", "container/device", "container/device/ContainerWithDevice", "container/elementwise", "container/elementwise/ContainerWithElementwise", "container/general", "container/general/ContainerWithGeneral", "container/gradients", "container/gradients/ContainerWithGradients", "container/image", "container/image/ContainerWithImage", "container/layers", "container/layers/ContainerWithLayers", "container/linear_algebra", "container/linear_algebra/ContainerWithLinearAlgebra", "container/losses", "container/losses/ContainerWithLosses", "container/manipulation", "container/manipulation/ContainerWithManipulation", "container/norms", "container/norms/ContainerWithNorms", "container/random", "container/random/ContainerWithRandom", "container/searching", "container/searching/ContainerWithSearching", "container/set", "container/set/ContainerWithSet", "container/sorting", "container/sorting/ContainerWithSorting", "container/statistical", "container/statistical/ContainerWithStatistical", "container/utility", "container/utility/ContainerWithUtility", "container/wrapping", "container/wrapping/add_ivy_container_instance_methods", "contributing", "contributing/0_setting_up", "contributing/1_the_basics", "contributing/4_open_tasks", "contributing/building_the_docs", "deep_dive", "deep_dive/0_navigating_the_code", "deep_dive/10_docstrings", "deep_dive/11_docstring_examples", "deep_dive/12_array_api_tests", "deep_dive/13_ivy_tests", "deep_dive/1_function_types", "deep_dive/2_backend_setting", "deep_dive/3_function_wrapping", "deep_dive/4_arrays", "deep_dive/5_containers", "deep_dive/6_data_types", "deep_dive/7_devices", "deep_dive/8_inplace_updates", "deep_dive/9_function_arguments", "design", "design/building_blocks", "design/ivy_as_a_framework", "design/ivy_as_a_framework/ivy_array", "design/ivy_as_a_framework/ivy_container", "design/ivy_as_a_framework/ivy_stateful_api", "design/ivy_as_a_transpiler", "docs/ivy", "docs/ivy_builder", "docs/ivy_ecosystem", "docs/ivy_gym", "docs/ivy_mech", "docs/ivy_memory", "docs/ivy_models", "docs/ivy_robot", "docs/ivy_vision", "extensions", "extensions/applied_libraries", "faq", "func_wrapper", "func_wrapper/handle_nestable", "func_wrapper/handle_out_argument", "func_wrapper/infer_device", "func_wrapper/infer_dtype", "func_wrapper/inputs_to_ivy_arrays", "func_wrapper/inputs_to_native_arrays", "func_wrapper/outputs_to_ivy_arrays", "func_wrapper/to_native_arrays_and_back", "functional/ivy", "functional/ivy/activations", "functional/ivy/activations/gelu", "functional/ivy/activations/leaky_relu", "functional/ivy/activations/relu", "functional/ivy/activations/sigmoid", "functional/ivy/activations/softmax", "functional/ivy/activations/softplus", "functional/ivy/activations/tanh", "functional/ivy/compilation", "functional/ivy/compilation/compile", "functional/ivy/constants", "functional/ivy/creation", "functional/ivy/creation/arange", "functional/ivy/creation/asarray", "functional/ivy/creation/empty", "functional/ivy/creation/empty_like", "functional/ivy/creation/eye", "functional/ivy/creation/from_dlpack", "functional/ivy/creation/full", "functional/ivy/creation/full_like", "functional/ivy/creation/linspace", "functional/ivy/creation/logspace", "functional/ivy/creation/meshgrid", "functional/ivy/creation/native_array", "functional/ivy/creation/ones", "functional/ivy/creation/ones_like", "functional/ivy/creation/tril", "functional/ivy/creation/triu", "functional/ivy/creation/zeros", "functional/ivy/creation/zeros_like", "functional/ivy/data_type", "functional/ivy/data_type/DefaultDtype:\n    \"\"\"\"\"\"\n\n    # noinspection PyShadowingNames\n    def __init__", "functional/ivy/data_type/DefaultFloatDtype:\n    \"\"\"\"\"\"\n\n    # noinspection PyShadowingNames\n    def __init__", "functional/ivy/data_type/DefaultIntDtype:\n    \"\"\"\"\"\"\n\n    # noinspection PyShadowingNames\n    def __init__", "functional/ivy/data_type/as_ivy_dtype", "functional/ivy/data_type/as_native_dtype", "functional/ivy/data_type/astype", "functional/ivy/data_type/broadcast_arrays", "functional/ivy/data_type/broadcast_to", "functional/ivy/data_type/can_cast", "functional/ivy/data_type/can_cast/can_cast_array", "functional/ivy/data_type/can_cast/can_cast_container", "functional/ivy/data_type/can_cast/can_cast_functional", "functional/ivy/data_type/can_cast/static_can_cast_container", "functional/ivy/data_type/closest_valid_dtype", "functional/ivy/data_type/default_dtype", "functional/ivy/data_type/default_float_dtype", "functional/ivy/data_type/default_int_dtype", "functional/ivy/data_type/dtype", "functional/ivy/data_type/dtype_bits", "functional/ivy/data_type/finfo", "functional/ivy/data_type/function_supported_dtypes", "functional/ivy/data_type/function_unsupported_dtypes", "functional/ivy/data_type/iinfo", "functional/ivy/data_type/invalid_dtype", "functional/ivy/data_type/is_float_dtype", "functional/ivy/data_type/is_int_dtype", "functional/ivy/data_type/promote_types", "functional/ivy/data_type/result_type", "functional/ivy/data_type/set_default_dtype", "functional/ivy/data_type/set_default_float_dtype", "functional/ivy/data_type/set_default_int_dtype", "functional/ivy/data_type/type_promote_arrays", "functional/ivy/data_type/unset_default_dtype", "functional/ivy/data_type/unset_default_float_dtype", "functional/ivy/data_type/unset_default_int_dtype", "functional/ivy/data_type/valid_dtype", "functional/ivy/device", "functional/ivy/device/DefaultDevice:\n    \"\"\"\"\"\"\n\n    # noinspection PyShadowingNames\n    def __init__", "functional/ivy/device/DevClonedItem", "functional/ivy/device/DevClonedIter", "functional/ivy/device/DevClonedNest", "functional/ivy/device/DevDistItem", "functional/ivy/device/DevDistIter", "functional/ivy/device/DevDistNest", "functional/ivy/device/DevManager:\n    \"\"\"\"\"\"\n\n    def __init__", "functional/ivy/device/DevMapper", "functional/ivy/device/DevMapperMultiProc", "functional/ivy/device/MultiDev:\n    def __init__", "functional/ivy/device/MultiDevItem", "functional/ivy/device/MultiDevIter", "functional/ivy/device/MultiDevNest", "functional/ivy/device/Profiler", "functional/ivy/device/as_ivy_dev", "functional/ivy/device/as_native_dev", "functional/ivy/device/clear_mem_on_dev", "functional/ivy/device/default_device", "functional/ivy/device/dev", "functional/ivy/device/dev_clone", "functional/ivy/device/dev_clone_array", "functional/ivy/device/dev_clone_iter", "functional/ivy/device/dev_clone_nest", "functional/ivy/device/dev_dist", "functional/ivy/device/dev_dist_array", "functional/ivy/device/dev_dist_iter", "functional/ivy/device/dev_dist_nest", "functional/ivy/device/dev_unify", "functional/ivy/device/dev_unify_array", "functional/ivy/device/dev_unify_iter", "functional/ivy/device/dev_unify_nest", "functional/ivy/device/dev_util", "functional/ivy/device/get_all_ivy_arrays_on_dev", "functional/ivy/device/gpu_is_available", "functional/ivy/device/num_cpu_cores", "functional/ivy/device/num_gpus", "functional/ivy/device/num_ivy_arrays_on_dev", "functional/ivy/device/percent_used_mem_on_dev", "functional/ivy/device/print_all_ivy_arrays_on_dev", "functional/ivy/device/set_default_device", "functional/ivy/device/set_split_factor", "functional/ivy/device/split_factor", "functional/ivy/device/split_func_call", "functional/ivy/device/to_device", "functional/ivy/device/total_mem_on_dev", "functional/ivy/device/tpu_is_available", "functional/ivy/device/unset_default_device", "functional/ivy/device/used_mem_on_dev", "functional/ivy/elementwise", "functional/ivy/elementwise/abs", "functional/ivy/elementwise/abs/abs_array", "functional/ivy/elementwise/abs/abs_container", "functional/ivy/elementwise/abs/abs_functional", "functional/ivy/elementwise/acos", "functional/ivy/elementwise/acos/acos_array", "functional/ivy/elementwise/acos/acos_container", "functional/ivy/elementwise/acos/acos_functional", "functional/ivy/elementwise/acosh", "functional/ivy/elementwise/acosh/acosh_array", "functional/ivy/elementwise/acosh/acosh_container", "functional/ivy/elementwise/acosh/acosh_functional", "functional/ivy/elementwise/add", "functional/ivy/elementwise/add/add_array", "functional/ivy/elementwise/add/add_container", "functional/ivy/elementwise/add/add_functional", "functional/ivy/elementwise/add/static_add_container", "functional/ivy/elementwise/asin", "functional/ivy/elementwise/asin/asin_array", "functional/ivy/elementwise/asin/asin_container", "functional/ivy/elementwise/asin/asin_functional", "functional/ivy/elementwise/asinh", "functional/ivy/elementwise/asinh/asinh_array", "functional/ivy/elementwise/asinh/asinh_container", "functional/ivy/elementwise/asinh/asinh_functional", "functional/ivy/elementwise/atan", "functional/ivy/elementwise/atan/atan_array", "functional/ivy/elementwise/atan/atan_container", "functional/ivy/elementwise/atan/atan_functional", "functional/ivy/elementwise/atan2", "functional/ivy/elementwise/atan2/atan2_array", "functional/ivy/elementwise/atan2/atan2_container", "functional/ivy/elementwise/atan2/atan2_functional", "functional/ivy/elementwise/atanh", "functional/ivy/elementwise/atanh/atanh_array", "functional/ivy/elementwise/atanh/atanh_container", "functional/ivy/elementwise/atanh/atanh_functional", "functional/ivy/elementwise/bitwise_and", "functional/ivy/elementwise/bitwise_and/bitwise_and_array", "functional/ivy/elementwise/bitwise_and/bitwise_and_container", "functional/ivy/elementwise/bitwise_and/bitwise_and_functional", "functional/ivy/elementwise/bitwise_invert", "functional/ivy/elementwise/bitwise_invert/bitwise_invert_array", "functional/ivy/elementwise/bitwise_invert/bitwise_invert_container", "functional/ivy/elementwise/bitwise_invert/bitwise_invert_functional", "functional/ivy/elementwise/bitwise_left_shift", "functional/ivy/elementwise/bitwise_left_shift/bitwise_left_shift_array", "functional/ivy/elementwise/bitwise_left_shift/bitwise_left_shift_container", "functional/ivy/elementwise/bitwise_left_shift/bitwise_left_shift_functional", "functional/ivy/elementwise/bitwise_or", "functional/ivy/elementwise/bitwise_or/bitwise_or_array", "functional/ivy/elementwise/bitwise_or/bitwise_or_container", "functional/ivy/elementwise/bitwise_or/bitwise_or_functional", "functional/ivy/elementwise/bitwise_right_shift", "functional/ivy/elementwise/bitwise_right_shift/bitwise_right_shift_array", "functional/ivy/elementwise/bitwise_right_shift/bitwise_right_shift_container", "functional/ivy/elementwise/bitwise_right_shift/bitwise_right_shift_functional", "functional/ivy/elementwise/bitwise_xor", "functional/ivy/elementwise/bitwise_xor/bitwise_xor_array", "functional/ivy/elementwise/bitwise_xor/bitwise_xor_container", "functional/ivy/elementwise/bitwise_xor/bitwise_xor_functional", "functional/ivy/elementwise/ceil", "functional/ivy/elementwise/ceil/ceil_array", "functional/ivy/elementwise/ceil/ceil_container", "functional/ivy/elementwise/ceil/ceil_functional", "functional/ivy/elementwise/cos", "functional/ivy/elementwise/cos/cos_array", "functional/ivy/elementwise/cos/cos_container", "functional/ivy/elementwise/cos/cos_functional", "functional/ivy/elementwise/cosh", "functional/ivy/elementwise/cosh/cosh_array", "functional/ivy/elementwise/cosh/cosh_container", "functional/ivy/elementwise/cosh/cosh_functional", "functional/ivy/elementwise/divide", "functional/ivy/elementwise/divide/divide_array", "functional/ivy/elementwise/divide/divide_container", "functional/ivy/elementwise/divide/divide_functional", "functional/ivy/elementwise/divide/static_divide_container", "functional/ivy/elementwise/equal", "functional/ivy/elementwise/equal/equal_array", "functional/ivy/elementwise/equal/equal_container", "functional/ivy/elementwise/equal/equal_functional", "functional/ivy/elementwise/erf", "functional/ivy/elementwise/erf/erf_array", "functional/ivy/elementwise/erf/erf_container", "functional/ivy/elementwise/erf/erf_functional", "functional/ivy/elementwise/exp", "functional/ivy/elementwise/exp/exp_array", "functional/ivy/elementwise/exp/exp_container", "functional/ivy/elementwise/exp/exp_functional", "functional/ivy/elementwise/expm1", "functional/ivy/elementwise/expm1/expm1_array", "functional/ivy/elementwise/expm1/expm1_container", "functional/ivy/elementwise/expm1/expm1_functional", "functional/ivy/elementwise/floor", "functional/ivy/elementwise/floor/floor_array", "functional/ivy/elementwise/floor/floor_container", "functional/ivy/elementwise/floor/floor_functional", "functional/ivy/elementwise/floor_divide", "functional/ivy/elementwise/floor_divide/floor_divide_array", "functional/ivy/elementwise/floor_divide/floor_divide_container", "functional/ivy/elementwise/floor_divide/floor_divide_functional", "functional/ivy/elementwise/greater", "functional/ivy/elementwise/greater/greater_array", "functional/ivy/elementwise/greater/greater_container", "functional/ivy/elementwise/greater/greater_functional", "functional/ivy/elementwise/greater_equal", "functional/ivy/elementwise/greater_equal/greater_equal_array", "functional/ivy/elementwise/greater_equal/greater_equal_container", "functional/ivy/elementwise/greater_equal/greater_equal_functional", "functional/ivy/elementwise/isfinite", "functional/ivy/elementwise/isfinite/isfinite_array", "functional/ivy/elementwise/isfinite/isfinite_container", "functional/ivy/elementwise/isfinite/isfinite_functional", "functional/ivy/elementwise/isinf", "functional/ivy/elementwise/isinf/isinf_array", "functional/ivy/elementwise/isinf/isinf_container", "functional/ivy/elementwise/isinf/isinf_functional", "functional/ivy/elementwise/isnan", "functional/ivy/elementwise/isnan/isnan_array", "functional/ivy/elementwise/isnan/isnan_container", "functional/ivy/elementwise/isnan/isnan_functional", "functional/ivy/elementwise/less", "functional/ivy/elementwise/less/less_array", "functional/ivy/elementwise/less/less_container", "functional/ivy/elementwise/less/less_functional", "functional/ivy/elementwise/less_equal", "functional/ivy/elementwise/less_equal/less_equal_array", "functional/ivy/elementwise/less_equal/less_equal_container", "functional/ivy/elementwise/less_equal/less_equal_functional", "functional/ivy/elementwise/log", "functional/ivy/elementwise/log/log_array", "functional/ivy/elementwise/log/log_container", "functional/ivy/elementwise/log/log_functional", "functional/ivy/elementwise/log10", "functional/ivy/elementwise/log10/log10_array", "functional/ivy/elementwise/log10/log10_container", "functional/ivy/elementwise/log10/log10_functional", "functional/ivy/elementwise/log1p", "functional/ivy/elementwise/log1p/log1p_array", "functional/ivy/elementwise/log1p/log1p_container", "functional/ivy/elementwise/log1p/log1p_functional", "functional/ivy/elementwise/log2", "functional/ivy/elementwise/log2/log2_array", "functional/ivy/elementwise/log2/log2_container", "functional/ivy/elementwise/log2/log2_functional", "functional/ivy/elementwise/logaddexp", "functional/ivy/elementwise/logaddexp/logaddexp_array", "functional/ivy/elementwise/logaddexp/logaddexp_container", "functional/ivy/elementwise/logaddexp/logaddexp_functional", "functional/ivy/elementwise/logical_and", "functional/ivy/elementwise/logical_and/logical_and_array", "functional/ivy/elementwise/logical_and/logical_and_container", "functional/ivy/elementwise/logical_and/logical_and_functional", "functional/ivy/elementwise/logical_not", "functional/ivy/elementwise/logical_not/logical_not_array", "functional/ivy/elementwise/logical_not/logical_not_container", "functional/ivy/elementwise/logical_not/logical_not_functional", "functional/ivy/elementwise/logical_or", "functional/ivy/elementwise/logical_or/logical_or_array", "functional/ivy/elementwise/logical_or/logical_or_container", "functional/ivy/elementwise/logical_or/logical_or_functional", "functional/ivy/elementwise/logical_xor", "functional/ivy/elementwise/logical_xor/logical_xor_array", "functional/ivy/elementwise/logical_xor/logical_xor_container", "functional/ivy/elementwise/logical_xor/logical_xor_functional", "functional/ivy/elementwise/maximum", "functional/ivy/elementwise/minimum", "functional/ivy/elementwise/multiply", "functional/ivy/elementwise/multiply/multiply_array", "functional/ivy/elementwise/multiply/multiply_container", "functional/ivy/elementwise/multiply/multiply_functional", "functional/ivy/elementwise/multiply/static_multiply_container", "functional/ivy/elementwise/negative", "functional/ivy/elementwise/negative/negative_array", "functional/ivy/elementwise/negative/negative_container", "functional/ivy/elementwise/negative/negative_functional", "functional/ivy/elementwise/not_equal", "functional/ivy/elementwise/not_equal/not_equal_array", "functional/ivy/elementwise/not_equal/not_equal_container", "functional/ivy/elementwise/not_equal/not_equal_functional", "functional/ivy/elementwise/positive", "functional/ivy/elementwise/positive/positive_array", "functional/ivy/elementwise/positive/positive_container", "functional/ivy/elementwise/positive/positive_functional", "functional/ivy/elementwise/pow", "functional/ivy/elementwise/pow/pow_array", "functional/ivy/elementwise/pow/pow_container", "functional/ivy/elementwise/pow/pow_functional", "functional/ivy/elementwise/remainder", "functional/ivy/elementwise/remainder/remainder_array", "functional/ivy/elementwise/remainder/remainder_container", "functional/ivy/elementwise/remainder/remainder_functional", "functional/ivy/elementwise/round", "functional/ivy/elementwise/round/round_array", "functional/ivy/elementwise/round/round_container", "functional/ivy/elementwise/round/round_functional", "functional/ivy/elementwise/sign", "functional/ivy/elementwise/sign/sign_array", "functional/ivy/elementwise/sign/sign_container", "functional/ivy/elementwise/sign/sign_functional", "functional/ivy/elementwise/sin", "functional/ivy/elementwise/sin/sin_array", "functional/ivy/elementwise/sin/sin_container", "functional/ivy/elementwise/sin/sin_functional", "functional/ivy/elementwise/sinh", "functional/ivy/elementwise/sinh/sinh_array", "functional/ivy/elementwise/sinh/sinh_container", "functional/ivy/elementwise/sinh/sinh_functional", "functional/ivy/elementwise/sqrt", "functional/ivy/elementwise/sqrt/sqrt_array", "functional/ivy/elementwise/sqrt/sqrt_container", "functional/ivy/elementwise/sqrt/sqrt_functional", "functional/ivy/elementwise/square", "functional/ivy/elementwise/square/square_array", "functional/ivy/elementwise/square/square_container", "functional/ivy/elementwise/square/square_functional", "functional/ivy/elementwise/subtract", "functional/ivy/elementwise/subtract/static_subtract_container", "functional/ivy/elementwise/subtract/subtract_array", "functional/ivy/elementwise/subtract/subtract_container", "functional/ivy/elementwise/subtract/subtract_functional", "functional/ivy/elementwise/tan", "functional/ivy/elementwise/tan/static_tan_container", "functional/ivy/elementwise/tan/tan_array", "functional/ivy/elementwise/tan/tan_container", "functional/ivy/elementwise/tan/tan_functional", "functional/ivy/elementwise/tanh", "functional/ivy/elementwise/tanh/static_tanh_container", "functional/ivy/elementwise/tanh/tanh_array", "functional/ivy/elementwise/tanh/tanh_container", "functional/ivy/elementwise/tanh/tanh_functional", "functional/ivy/elementwise/trunc", "functional/ivy/elementwise/trunc/trunc_array", "functional/ivy/elementwise/trunc/trunc_container", "functional/ivy/elementwise/trunc/trunc_functional", "functional/ivy/general", "functional/ivy/general/all_equal", "functional/ivy/general/all_equal/all_equal_array", "functional/ivy/general/all_equal/all_equal_container", "functional/ivy/general/all_equal/all_equal_functional", "functional/ivy/general/all_equal/static_all_equal_container", "functional/ivy/general/arg_info", "functional/ivy/general/arg_names", "functional/ivy/general/array_equal", "functional/ivy/general/arrays_equal", "functional/ivy/general/assert_supports_inplace", "functional/ivy/general/cache_fn", "functional/ivy/general/clip_matrix_norm", "functional/ivy/general/clip_vector_norm", "functional/ivy/general/clip_vector_norm/clip_vector_norm_container", "functional/ivy/general/clip_vector_norm/clip_vector_norm_functional", "functional/ivy/general/container_types", "functional/ivy/general/copy_array", "functional/ivy/general/cumprod", "functional/ivy/general/cumsum", "functional/ivy/general/current_backend_str", "functional/ivy/general/default", "functional/ivy/general/einops_rearrange", "functional/ivy/general/einops_reduce", "functional/ivy/general/einops_repeat", "functional/ivy/general/exists", "functional/ivy/general/floormod", "functional/ivy/general/fourier_encode", "functional/ivy/general/gather", "functional/ivy/general/gather_nd", "functional/ivy/general/gather_nd/gather_nd_array", "functional/ivy/general/gather_nd/gather_nd_container", "functional/ivy/general/gather_nd/gather_nd_functional", "functional/ivy/general/gather_nd/static_gather_nd_container", "functional/ivy/general/get_all_arrays_in_memory", "functional/ivy/general/get_min_base", "functional/ivy/general/get_min_denominator", "functional/ivy/general/get_num_dims", "functional/ivy/general/get_referrers_recursive", "functional/ivy/general/has_nans", "functional/ivy/general/indices_where", "functional/ivy/general/inplace_arrays_supported", "functional/ivy/general/inplace_decrement", "functional/ivy/general/inplace_increment", "functional/ivy/general/inplace_update", "functional/ivy/general/inplace_variables_supported", "functional/ivy/general/is_array", "functional/ivy/general/is_ivy_array", "functional/ivy/general/is_ivy_container", "functional/ivy/general/is_native_array", "functional/ivy/general/match_kwargs", "functional/ivy/general/multiprocessing", "functional/ivy/general/num_arrays_in_memory", "functional/ivy/general/one_hot", "functional/ivy/general/print_all_arrays_in_memory", "functional/ivy/general/queue_timeout", "functional/ivy/general/scatter_flat", "functional/ivy/general/scatter_nd", "functional/ivy/general/set_min_base", "functional/ivy/general/set_min_denominator", "functional/ivy/general/set_queue_timeout", "functional/ivy/general/set_tmp_dir", "functional/ivy/general/shape", "functional/ivy/general/shape_to_tuple", "functional/ivy/general/stable_divide", "functional/ivy/general/stable_pow", "functional/ivy/general/supports_inplace", "functional/ivy/general/tmp_dir", "functional/ivy/general/to_list", "functional/ivy/general/to_numpy", "functional/ivy/general/to_scalar", "functional/ivy/general/try_else_none", "functional/ivy/general/unstack", "functional/ivy/general/value_is_nan", "functional/ivy/gradients", "functional/ivy/gradients/GradientTracking:\n    \"\"\"\"\"\"\n\n    # noinspection PyShadowingNames\n    def __init__", "functional/ivy/gradients/adam_step", "functional/ivy/gradients/adam_update", "functional/ivy/gradients/adam_update/adam_update_container", "functional/ivy/gradients/adam_update/adam_update_functional", "functional/ivy/gradients/adam_update/static_adam_update_container", "functional/ivy/gradients/execute_with_gradients", "functional/ivy/gradients/gradient_descent_update", "functional/ivy/gradients/gradient_descent_update/gradient_descent_update_container", "functional/ivy/gradients/gradient_descent_update/gradient_descent_update_functional", "functional/ivy/gradients/gradient_descent_update/static_gradient_descent_update_container", "functional/ivy/gradients/is_variable", "functional/ivy/gradients/lamb_update", "functional/ivy/gradients/lamb_update/lamb_update_container", "functional/ivy/gradients/lamb_update/lamb_update_functional", "functional/ivy/gradients/lamb_update/static_lamb_update_container", "functional/ivy/gradients/lars_update", "functional/ivy/gradients/lars_update/lars_update_container", "functional/ivy/gradients/lars_update/lars_update_functional", "functional/ivy/gradients/lars_update/static_lars_update_container", "functional/ivy/gradients/optimizer_update", "functional/ivy/gradients/optimizer_update/optimizer_update_container", "functional/ivy/gradients/optimizer_update/optimizer_update_functional", "functional/ivy/gradients/optimizer_update/static_optimizer_update_container", "functional/ivy/gradients/set_with_grads", "functional/ivy/gradients/stop_gradient", "functional/ivy/gradients/unset_with_grads", "functional/ivy/gradients/variable", "functional/ivy/gradients/variable_data", "functional/ivy/gradients/with_grads", "functional/ivy/layers", "functional/ivy/layers/conv1d", "functional/ivy/layers/conv1d_transpose", "functional/ivy/layers/conv2d", "functional/ivy/layers/conv2d_transpose", "functional/ivy/layers/conv3d", "functional/ivy/layers/conv3d_transpose", "functional/ivy/layers/depthwise_conv2d", "functional/ivy/layers/dropout", "functional/ivy/layers/linear", "functional/ivy/layers/lstm_update", "functional/ivy/layers/multi_head_attention", "functional/ivy/layers/scaled_dot_product_attention", "functional/ivy/linear_algebra", "functional/ivy/linear_algebra/cholesky", "functional/ivy/linear_algebra/cholesky/cholesky_array", "functional/ivy/linear_algebra/cholesky/cholesky_functional", "functional/ivy/linear_algebra/cross", "functional/ivy/linear_algebra/cross/cross_array", "functional/ivy/linear_algebra/cross/cross_functional", "functional/ivy/linear_algebra/det", "functional/ivy/linear_algebra/det/det_array", "functional/ivy/linear_algebra/det/det_functional", "functional/ivy/linear_algebra/diagonal", "functional/ivy/linear_algebra/diagonal/diagonal_array", "functional/ivy/linear_algebra/diagonal/diagonal_functional", "functional/ivy/linear_algebra/eigh", "functional/ivy/linear_algebra/eigh/eigh_array", "functional/ivy/linear_algebra/eigh/eigh_functional", "functional/ivy/linear_algebra/eigvalsh", "functional/ivy/linear_algebra/eigvalsh/eigvalsh_array", "functional/ivy/linear_algebra/eigvalsh/eigvalsh_functional", "functional/ivy/linear_algebra/inv", "functional/ivy/linear_algebra/inv/inv_array", "functional/ivy/linear_algebra/inv/inv_functional", "functional/ivy/linear_algebra/matmul", "functional/ivy/linear_algebra/matmul/matmul_array", "functional/ivy/linear_algebra/matmul/matmul_container", "functional/ivy/linear_algebra/matmul/matmul_functional", "functional/ivy/linear_algebra/matrix_norm", "functional/ivy/linear_algebra/matrix_norm/matrix_norm_array", "functional/ivy/linear_algebra/matrix_norm/matrix_norm_functional", "functional/ivy/linear_algebra/matrix_power", "functional/ivy/linear_algebra/matrix_rank", "functional/ivy/linear_algebra/matrix_rank/matrix_rank_array", "functional/ivy/linear_algebra/matrix_rank/matrix_rank_functional", "functional/ivy/linear_algebra/matrix_transpose", "functional/ivy/linear_algebra/matrix_transpose/matrix_transpose_array", "functional/ivy/linear_algebra/matrix_transpose/matrix_transpose_functional", "functional/ivy/linear_algebra/outer", "functional/ivy/linear_algebra/outer/outer_array", "functional/ivy/linear_algebra/outer/outer_functional", "functional/ivy/linear_algebra/pinv", "functional/ivy/linear_algebra/pinv/pinv_array", "functional/ivy/linear_algebra/pinv/pinv_functional", "functional/ivy/linear_algebra/qr", "functional/ivy/linear_algebra/qr/qr_array", "functional/ivy/linear_algebra/qr/qr_functional", "functional/ivy/linear_algebra/slogdet", "functional/ivy/linear_algebra/solve", "functional/ivy/linear_algebra/solve/solve_array", "functional/ivy/linear_algebra/solve/solve_functional", "functional/ivy/linear_algebra/svd", "functional/ivy/linear_algebra/svd/svd_array", "functional/ivy/linear_algebra/svd/svd_functional", "functional/ivy/linear_algebra/svdvals", "functional/ivy/linear_algebra/svdvals/svdvals_array", "functional/ivy/linear_algebra/svdvals/svdvals_functional", "functional/ivy/linear_algebra/tensordot", "functional/ivy/linear_algebra/tensordot/tensordot_array", "functional/ivy/linear_algebra/tensordot/tensordot_functional", "functional/ivy/linear_algebra/trace", "functional/ivy/linear_algebra/trace/trace_array", "functional/ivy/linear_algebra/trace/trace_functional", "functional/ivy/linear_algebra/vecdot", "functional/ivy/linear_algebra/vecdot/vecdot_array", "functional/ivy/linear_algebra/vecdot/vecdot_functional", "functional/ivy/linear_algebra/vector_norm", "functional/ivy/linear_algebra/vector_norm/vector_norm_array", "functional/ivy/linear_algebra/vector_norm/vector_norm_functional", "functional/ivy/linear_algebra/vector_to_skew_symmetric_matrix", "functional/ivy/linear_algebra/vector_to_skew_symmetric_matrix/vector_to_skew_symmetric_matrix_array", "functional/ivy/linear_algebra/vector_to_skew_symmetric_matrix/vector_to_skew_symmetric_matrix_functional", "functional/ivy/losses", "functional/ivy/losses/binary_cross_entropy", "functional/ivy/losses/binary_cross_entropy/binary_cross_entropy_array", "functional/ivy/losses/binary_cross_entropy/binary_cross_entropy_container", "functional/ivy/losses/binary_cross_entropy/binary_cross_entropy_functional", "functional/ivy/losses/binary_cross_entropy/static_binary_cross_entropy_container", "functional/ivy/losses/cross_entropy", "functional/ivy/losses/cross_entropy/cross_entropy_array", "functional/ivy/losses/cross_entropy/cross_entropy_container", "functional/ivy/losses/cross_entropy/cross_entropy_functional", "functional/ivy/losses/cross_entropy/static_cross_entropy_container", "functional/ivy/losses/sparse_cross_entropy", "functional/ivy/losses/sparse_cross_entropy/sparse_cross_entropy_array", "functional/ivy/losses/sparse_cross_entropy/sparse_cross_entropy_container", "functional/ivy/losses/sparse_cross_entropy/sparse_cross_entropy_functional", "functional/ivy/losses/sparse_cross_entropy/static_sparse_cross_entropy_container", "functional/ivy/manipulation", "functional/ivy/manipulation/clip", "functional/ivy/manipulation/clip/clip_array", "functional/ivy/manipulation/clip/clip_container", "functional/ivy/manipulation/clip/clip_functional", "functional/ivy/manipulation/clip/static_clip_container", "functional/ivy/manipulation/concat", "functional/ivy/manipulation/concat/concat_array", "functional/ivy/manipulation/concat/concat_container", "functional/ivy/manipulation/concat/concat_functional", "functional/ivy/manipulation/constant_pad", "functional/ivy/manipulation/constant_pad/constant_pad_array", "functional/ivy/manipulation/constant_pad/constant_pad_container", "functional/ivy/manipulation/constant_pad/constant_pad_functional", "functional/ivy/manipulation/expand_dims", "functional/ivy/manipulation/expand_dims/expand_dims_array", "functional/ivy/manipulation/expand_dims/expand_dims_container", "functional/ivy/manipulation/expand_dims/expand_dims_functional", "functional/ivy/manipulation/flip", "functional/ivy/manipulation/flip/flip_array", "functional/ivy/manipulation/flip/flip_container", "functional/ivy/manipulation/flip/flip_functional", "functional/ivy/manipulation/permute_dims", "functional/ivy/manipulation/permute_dims/permute_dims_array", "functional/ivy/manipulation/permute_dims/permute_dims_container", "functional/ivy/manipulation/permute_dims/permute_dims_functional", "functional/ivy/manipulation/repeat", "functional/ivy/manipulation/repeat/repeat_array", "functional/ivy/manipulation/repeat/repeat_container", "functional/ivy/manipulation/repeat/repeat_functional", "functional/ivy/manipulation/reshape", "functional/ivy/manipulation/reshape/reshape_array", "functional/ivy/manipulation/reshape/reshape_container", "functional/ivy/manipulation/reshape/reshape_functional", "functional/ivy/manipulation/roll", "functional/ivy/manipulation/roll/roll_array", "functional/ivy/manipulation/roll/roll_container", "functional/ivy/manipulation/roll/roll_functional", "functional/ivy/manipulation/roll/static_roll_container", "functional/ivy/manipulation/split", "functional/ivy/manipulation/squeeze", "functional/ivy/manipulation/squeeze/squeeze_array", "functional/ivy/manipulation/squeeze/squeeze_container", "functional/ivy/manipulation/squeeze/squeeze_functional", "functional/ivy/manipulation/stack", "functional/ivy/manipulation/stack/stack_array", "functional/ivy/manipulation/stack/stack_container", "functional/ivy/manipulation/stack/stack_functional", "functional/ivy/manipulation/swapaxes", "functional/ivy/manipulation/swapaxes/swapaxes_array", "functional/ivy/manipulation/swapaxes/swapaxes_container", "functional/ivy/manipulation/swapaxes/swapaxes_functional", "functional/ivy/manipulation/tile", "functional/ivy/manipulation/tile/tile_array", "functional/ivy/manipulation/tile/tile_container", "functional/ivy/manipulation/tile/tile_functional", "functional/ivy/manipulation/zero_pad", "functional/ivy/manipulation/zero_pad/zero_pad_array", "functional/ivy/manipulation/zero_pad/zero_pad_container", "functional/ivy/manipulation/zero_pad/zero_pad_functional", "functional/ivy/meta", "functional/ivy/meta/fomaml_step", "functional/ivy/meta/maml_step", "functional/ivy/meta/reptile_step", "functional/ivy/nest", "functional/ivy/nest/all_nested_indices", "functional/ivy/nest/copy_nest", "functional/ivy/nest/index_nest", "functional/ivy/nest/insert_into_nest_at_index", "functional/ivy/nest/insert_into_nest_at_indices", "functional/ivy/nest/map", "functional/ivy/nest/map_nest_at_index", "functional/ivy/nest/map_nest_at_indices", "functional/ivy/nest/multi_index_nest", "functional/ivy/nest/nested_any", "functional/ivy/nest/nested_indices_where", "functional/ivy/nest/nested_map", "functional/ivy/nest/nested_multi_map", "functional/ivy/nest/prune_nest_at_index", "functional/ivy/nest/prune_nest_at_indices", "functional/ivy/nest/set_nest_at_index", "functional/ivy/nest/set_nest_at_indices", "functional/ivy/norms", "functional/ivy/norms/layer_norm", "functional/ivy/norms/layer_norm/layer_norm_array", "functional/ivy/norms/layer_norm/layer_norm_container", "functional/ivy/norms/layer_norm/layer_norm_functional", "functional/ivy/random", "functional/ivy/random/multinomial", "functional/ivy/random/randint", "functional/ivy/random/randint/randint_functional", "functional/ivy/random/randint/static_randint_container", "functional/ivy/random/random_normal", "functional/ivy/random/random_uniform", "functional/ivy/random/random_uniform/random_uniform_container", "functional/ivy/random/random_uniform/random_uniform_functional", "functional/ivy/random/random_uniform/static_random_uniform_container", "functional/ivy/random/seed", "functional/ivy/random/shuffle", "functional/ivy/searching", "functional/ivy/searching/argmax", "functional/ivy/searching/argmin", "functional/ivy/searching/nonzero", "functional/ivy/searching/where", "functional/ivy/set", "functional/ivy/set/unique_all", "functional/ivy/set/unique_counts", "functional/ivy/set/unique_inverse", "functional/ivy/set/unique_values", "functional/ivy/sorting", "functional/ivy/sorting/argsort", "functional/ivy/sorting/argsort/argsort_array", "functional/ivy/sorting/argsort/argsort_container", "functional/ivy/sorting/argsort/argsort_functional", "functional/ivy/sorting/argsort/static_argsort_container", "functional/ivy/sorting/sort", "functional/ivy/sorting/sort/sort_array", "functional/ivy/sorting/sort/sort_container", "functional/ivy/sorting/sort/sort_functional", "functional/ivy/sorting/sort/static_sort_container", "functional/ivy/statistical", "functional/ivy/statistical/einsum", "functional/ivy/statistical/einsum/einsum_array", "functional/ivy/statistical/einsum/einsum_container", "functional/ivy/statistical/einsum/einsum_functional", "functional/ivy/statistical/max", "functional/ivy/statistical/max/max_array", "functional/ivy/statistical/max/max_container", "functional/ivy/statistical/max/max_functional", "functional/ivy/statistical/mean", "functional/ivy/statistical/mean/mean_array", "functional/ivy/statistical/mean/mean_container", "functional/ivy/statistical/mean/mean_functional", "functional/ivy/statistical/min", "functional/ivy/statistical/min/min_array", "functional/ivy/statistical/min/min_container", "functional/ivy/statistical/min/min_functional", "functional/ivy/statistical/prod", "functional/ivy/statistical/prod/prod_array", "functional/ivy/statistical/prod/prod_container", "functional/ivy/statistical/prod/prod_functional", "functional/ivy/statistical/std", "functional/ivy/statistical/std/std_array", "functional/ivy/statistical/std/std_container", "functional/ivy/statistical/std/std_functional", "functional/ivy/statistical/sum", "functional/ivy/statistical/sum/sum_array", "functional/ivy/statistical/sum/sum_container", "functional/ivy/statistical/sum/sum_functional", "functional/ivy/statistical/var", "functional/ivy/statistical/var/var_array", "functional/ivy/statistical/var/var_container", "functional/ivy/statistical/var/var_functional", "functional/ivy/utility", "functional/ivy/utility/all", "functional/ivy/utility/all/all_array", "functional/ivy/utility/all/all_container", "functional/ivy/utility/all/all_functional", "functional/ivy/utility/any", "functional/ivy/utility/any/any_array", "functional/ivy/utility/any/any_container", "functional/ivy/utility/any/any_functional", "index", "index_append", "index_prepend", "inspection", "inspection/add_array_specs", "inspection/fn_array_spec", "roadmap", "stateful/activations", "stateful/activations/GEGLU", "stateful/activations/GELU", "stateful/converters", "stateful/converters/to_ivy_module", "stateful/initializers", "stateful/initializers/Constant:\n    def __init__", "stateful/initializers/FirstLayerSiren", "stateful/initializers/GlorotUniform", "stateful/initializers/KaimingNormal:\n    def __init__", "stateful/initializers/Ones", "stateful/initializers/Siren", "stateful/initializers/Uniform:\n    def __init__", "stateful/initializers/Zeros", "stateful/layers", "stateful/layers/Conv1D", "stateful/layers/Conv1DTranspose", "stateful/layers/Conv2D", "stateful/layers/Conv2DTranspose", "stateful/layers/Conv3D", "stateful/layers/Conv3DTranspose", "stateful/layers/DepthwiseConv2D", "stateful/layers/Dropout", "stateful/layers/LSTM", "stateful/layers/Linear", "stateful/layers/MultiHeadAttention", "stateful/module", "stateful/module/Module", "stateful/norms", "stateful/norms/LayerNorm", "stateful/optimizers", "stateful/optimizers/Adam", "stateful/optimizers/LAMB", "stateful/optimizers/LARS", "stateful/optimizers/Optimizer", "stateful/optimizers/SGD", "stateful/sequential", "stateful/sequential/Sequential", "supported_frameworks", "verbosity", "verbosity/cprint"], "filenames": ["array/activations.rst", "array/activations/ArrayWithActivations.rst", "array/array_methods.rst", "array/array_methods/abs.rst", "array/array_methods/acos.rst", "array/array_methods/acosh.rst", "array/array_methods/add.rst", "array/array_methods/add_ivy_array_instance_methods.rst", "array/array_methods/all.rst", "array/array_methods/all_equal.rst", "array/array_methods/any.rst", "array/array_methods/argsort.rst", "array/array_methods/asin.rst", "array/array_methods/asinh.rst", "array/array_methods/atan.rst", "array/array_methods/atan2.rst", "array/array_methods/atanh.rst", "array/array_methods/binary_cross_entropy.rst", "array/array_methods/bitwise_and.rst", "array/array_methods/bitwise_invert.rst", "array/array_methods/bitwise_left_shift.rst", "array/array_methods/bitwise_or.rst", "array/array_methods/bitwise_right_shift.rst", "array/array_methods/bitwise_xor.rst", "array/array_methods/can_cast.rst", "array/array_methods/ceil.rst", "array/array_methods/cholesky.rst", "array/array_methods/clip.rst", "array/array_methods/concat.rst", "array/array_methods/constant_pad.rst", "array/array_methods/cos.rst", "array/array_methods/cosh.rst", "array/array_methods/cross.rst", "array/array_methods/cross_entropy.rst", "array/array_methods/det.rst", "array/array_methods/diagonal.rst", "array/array_methods/divide.rst", "array/array_methods/eigh.rst", "array/array_methods/eigvalsh.rst", "array/array_methods/einsum.rst", "array/array_methods/equal.rst", "array/array_methods/erf.rst", "array/array_methods/exp.rst", "array/array_methods/expand_dims.rst", "array/array_methods/expm1.rst", "array/array_methods/flip.rst", "array/array_methods/floor.rst", "array/array_methods/floor_divide.rst", "array/array_methods/gather_nd.rst", "array/array_methods/greater.rst", "array/array_methods/greater_equal.rst", "array/array_methods/inv.rst", "array/array_methods/isfinite.rst", "array/array_methods/isinf.rst", "array/array_methods/isnan.rst", "array/array_methods/layer_norm.rst", "array/array_methods/less.rst", "array/array_methods/less_equal.rst", "array/array_methods/log.rst", "array/array_methods/log10.rst", "array/array_methods/log1p.rst", "array/array_methods/log2.rst", "array/array_methods/logaddexp.rst", "array/array_methods/logical_and.rst", "array/array_methods/logical_not.rst", "array/array_methods/logical_or.rst", "array/array_methods/logical_xor.rst", "array/array_methods/matmul.rst", "array/array_methods/matrix_norm.rst", "array/array_methods/matrix_rank.rst", "array/array_methods/matrix_transpose.rst", "array/array_methods/max.rst", "array/array_methods/mean.rst", "array/array_methods/min.rst", "array/array_methods/multiply.rst", "array/array_methods/negative.rst", "array/array_methods/not_equal.rst", "array/array_methods/outer.rst", "array/array_methods/permute_dims.rst", "array/array_methods/pinv.rst", "array/array_methods/positive.rst", "array/array_methods/pow.rst", "array/array_methods/prod.rst", "array/array_methods/qr.rst", "array/array_methods/remainder.rst", "array/array_methods/repeat.rst", "array/array_methods/reshape.rst", "array/array_methods/roll.rst", "array/array_methods/round.rst", "array/array_methods/sign.rst", "array/array_methods/sin.rst", "array/array_methods/sinh.rst", "array/array_methods/solve.rst", "array/array_methods/sort.rst", "array/array_methods/sparse_cross_entropy.rst", "array/array_methods/sqrt.rst", "array/array_methods/square.rst", "array/array_methods/squeeze.rst", "array/array_methods/stack.rst", "array/array_methods/std.rst", "array/array_methods/subtract.rst", "array/array_methods/sum.rst", "array/array_methods/svd.rst", "array/array_methods/svdvals.rst", "array/array_methods/swapaxes.rst", "array/array_methods/tan.rst", "array/array_methods/tanh.rst", "array/array_methods/tensordot.rst", "array/array_methods/tile.rst", "array/array_methods/trace.rst", "array/array_methods/trunc.rst", "array/array_methods/var.rst", "array/array_methods/vecdot.rst", "array/array_methods/vector_norm.rst", "array/array_methods/vector_to_skew_symmetric_matrix.rst", "array/array_methods/zero_pad.rst", "array/conversions.rst", "array/conversions/args_to_ivy.rst", "array/conversions/args_to_native.rst", "array/conversions/to_ivy.rst", "array/conversions/to_native.rst", "array/creation.rst", "array/creation/ArrayWithCreation.rst", "array/data_type.rst", "array/data_type/ArrayWithDataTypes.rst", "array/device.rst", "array/device/ArrayWithDevice.rst", "array/elementwise.rst", "array/elementwise/ArrayWithElementwise.rst", "array/general.rst", "array/general/ArrayWithGeneral.rst", "array/gradients.rst", "array/gradients/ArrayWithGradients.rst", "array/image.rst", "array/image/ArrayWithImage.rst", "array/layers.rst", "array/layers/ArrayWithLayers.rst", "array/linear_algebra.rst", "array/linear_algebra/ArrayWithLinearAlgebra.rst", "array/losses.rst", "array/losses/ArrayWithLosses.rst", "array/manipulation.rst", "array/manipulation/ArrayWithManipulation.rst", "array/norms.rst", "array/norms/ArrayWithNorms.rst", "array/random.rst", "array/random/ArrayWithRandom.rst", "array/searching.rst", "array/searching/ArrayWithSearching.rst", "array/set.rst", "array/set/ArrayWithSet.rst", "array/sorting.rst", "array/sorting/ArrayWithSorting.rst", "array/statistical.rst", "array/statistical/ArrayWithStatistical.rst", "array/utility.rst", "array/utility/ArrayWithUtility.rst", "array/wrapping.rst", "array/wrapping/add_ivy_array_instance_methods.rst", "backend_handler.rst", "backend_handler/ContextManager:\n    def __init__.rst", "backend_handler/choose_random_backend.rst", "backend_handler/clear_backend_stack.rst", "backend_handler/current_backend.rst", "backend_handler/get_backend.rst", "backend_handler/set_backend.rst", "backend_handler/try_import_ivy_jax.rst", "backend_handler/try_import_ivy_mxnet.rst", "backend_handler/try_import_ivy_numpy.rst", "backend_handler/try_import_ivy_tf.rst", "backend_handler/try_import_ivy_torch.rst", "backend_handler/unset_backend.rst", "background.rst", "background/ml_explosion.rst", "background/standardization.rst", "background/why_unify.rst", "container/activations.rst", "container/activations/ContainerWithActivations.rst", "container/base.rst", "container/base/ContainerBase.rst", "container/container.rst", "container/container/Container.rst", "container/container/MultiDevContainer.rst", "container/container_methods.rst", "container/container_methods/abs.rst", "container/container_methods/acos.rst", "container/container_methods/acosh.rst", "container/container_methods/adam_update.rst", "container/container_methods/add.rst", "container/container_methods/add_ivy_container_instance_methods.rst", "container/container_methods/all.rst", "container/container_methods/all_equal.rst", "container/container_methods/any.rst", "container/container_methods/argsort.rst", "container/container_methods/asin.rst", "container/container_methods/asinh.rst", "container/container_methods/at_dev.rst", "container/container_methods/at_devs.rst", "container/container_methods/atan.rst", "container/container_methods/atan2.rst", "container/container_methods/atanh.rst", "container/container_methods/binary_cross_entropy.rst", "container/container_methods/bitwise_and.rst", "container/container_methods/bitwise_invert.rst", "container/container_methods/bitwise_left_shift.rst", "container/container_methods/bitwise_or.rst", "container/container_methods/bitwise_right_shift.rst", "container/container_methods/bitwise_xor.rst", "container/container_methods/can_cast.rst", "container/container_methods/ceil.rst", "container/container_methods/clip.rst", "container/container_methods/clip_vector_norm.rst", "container/container_methods/concat.rst", "container/container_methods/constant_pad.rst", "container/container_methods/cos.rst", "container/container_methods/cosh.rst", "container/container_methods/cross_entropy.rst", "container/container_methods/divide.rst", "container/container_methods/einsum.rst", "container/container_methods/equal.rst", "container/container_methods/erf.rst", "container/container_methods/exp.rst", "container/container_methods/expand_dims.rst", "container/container_methods/expm1.rst", "container/container_methods/flip.rst", "container/container_methods/floor.rst", "container/container_methods/floor_divide.rst", "container/container_methods/gather_nd.rst", "container/container_methods/gradient_descent_update.rst", "container/container_methods/greater.rst", "container/container_methods/greater_equal.rst", "container/container_methods/isfinite.rst", "container/container_methods/isinf.rst", "container/container_methods/isnan.rst", "container/container_methods/lamb_update.rst", "container/container_methods/lars_update.rst", "container/container_methods/layer_norm.rst", "container/container_methods/less.rst", "container/container_methods/less_equal.rst", "container/container_methods/log.rst", "container/container_methods/log10.rst", "container/container_methods/log1p.rst", "container/container_methods/log2.rst", "container/container_methods/logaddexp.rst", "container/container_methods/logical_and.rst", "container/container_methods/logical_not.rst", "container/container_methods/logical_or.rst", "container/container_methods/logical_xor.rst", "container/container_methods/matmul.rst", "container/container_methods/max.rst", "container/container_methods/mean.rst", "container/container_methods/min.rst", "container/container_methods/multiply.rst", "container/container_methods/negative.rst", "container/container_methods/not_equal.rst", "container/container_methods/optimizer_update.rst", "container/container_methods/permute_dims.rst", "container/container_methods/positive.rst", "container/container_methods/pow.rst", "container/container_methods/prod.rst", "container/container_methods/random_uniform.rst", "container/container_methods/remainder.rst", "container/container_methods/repeat.rst", "container/container_methods/reshape.rst", "container/container_methods/roll.rst", "container/container_methods/round.rst", "container/container_methods/sign.rst", "container/container_methods/sin.rst", "container/container_methods/sinh.rst", "container/container_methods/sort.rst", "container/container_methods/sparse_cross_entropy.rst", "container/container_methods/sqrt.rst", "container/container_methods/square.rst", "container/container_methods/squeeze.rst", "container/container_methods/stack.rst", "container/container_methods/static_adam_update.rst", "container/container_methods/static_add.rst", "container/container_methods/static_all_equal.rst", "container/container_methods/static_argsort.rst", "container/container_methods/static_binary_cross_entropy.rst", "container/container_methods/static_can_cast.rst", "container/container_methods/static_clip.rst", "container/container_methods/static_cross_entropy.rst", "container/container_methods/static_divide.rst", "container/container_methods/static_gather_nd.rst", "container/container_methods/static_gradient_descent_update.rst", "container/container_methods/static_lamb_update.rst", "container/container_methods/static_lars_update.rst", "container/container_methods/static_multiply.rst", "container/container_methods/static_optimizer_update.rst", "container/container_methods/static_randint.rst", "container/container_methods/static_random_uniform.rst", "container/container_methods/static_roll.rst", "container/container_methods/static_sort.rst", "container/container_methods/static_sparse_cross_entropy.rst", "container/container_methods/static_subtract.rst", "container/container_methods/static_tan.rst", "container/container_methods/static_tanh.rst", "container/container_methods/std.rst", "container/container_methods/subtract.rst", "container/container_methods/sum.rst", "container/container_methods/swapaxes.rst", "container/container_methods/tan.rst", "container/container_methods/tanh.rst", "container/container_methods/tile.rst", "container/container_methods/trunc.rst", "container/container_methods/var.rst", "container/container_methods/zero_pad.rst", "container/creation.rst", "container/creation/ContainerWithCreation.rst", "container/data_type.rst", "container/data_type/ContainerWithDataTypes.rst", "container/device.rst", "container/device/ContainerWithDevice.rst", "container/elementwise.rst", "container/elementwise/ContainerWithElementwise.rst", "container/general.rst", "container/general/ContainerWithGeneral.rst", "container/gradients.rst", "container/gradients/ContainerWithGradients.rst", "container/image.rst", "container/image/ContainerWithImage.rst", "container/layers.rst", "container/layers/ContainerWithLayers.rst", "container/linear_algebra.rst", "container/linear_algebra/ContainerWithLinearAlgebra.rst", "container/losses.rst", "container/losses/ContainerWithLosses.rst", "container/manipulation.rst", "container/manipulation/ContainerWithManipulation.rst", "container/norms.rst", "container/norms/ContainerWithNorms.rst", "container/random.rst", "container/random/ContainerWithRandom.rst", "container/searching.rst", "container/searching/ContainerWithSearching.rst", "container/set.rst", "container/set/ContainerWithSet.rst", "container/sorting.rst", "container/sorting/ContainerWithSorting.rst", "container/statistical.rst", "container/statistical/ContainerWithStatistical.rst", "container/utility.rst", "container/utility/ContainerWithUtility.rst", "container/wrapping.rst", "container/wrapping/add_ivy_container_instance_methods.rst", "contributing.rst", "contributing/0_setting_up.rst", "contributing/1_the_basics.rst", "contributing/4_open_tasks.rst", "contributing/building_the_docs.rst", "deep_dive.rst", "deep_dive/0_navigating_the_code.rst", "deep_dive/10_docstrings.rst", "deep_dive/11_docstring_examples.rst", "deep_dive/12_array_api_tests.rst", "deep_dive/13_ivy_tests.rst", "deep_dive/1_function_types.rst", "deep_dive/2_backend_setting.rst", "deep_dive/3_function_wrapping.rst", "deep_dive/4_arrays.rst", "deep_dive/5_containers.rst", "deep_dive/6_data_types.rst", "deep_dive/7_devices.rst", "deep_dive/8_inplace_updates.rst", "deep_dive/9_function_arguments.rst", "design.rst", "design/building_blocks.rst", "design/ivy_as_a_framework.rst", "design/ivy_as_a_framework/ivy_array.rst", "design/ivy_as_a_framework/ivy_container.rst", "design/ivy_as_a_framework/ivy_stateful_api.rst", "design/ivy_as_a_transpiler.rst", "docs/ivy.rst", "docs/ivy_builder.rst", "docs/ivy_ecosystem.rst", "docs/ivy_gym.rst", "docs/ivy_mech.rst", "docs/ivy_memory.rst", "docs/ivy_models.rst", "docs/ivy_robot.rst", "docs/ivy_vision.rst", "extensions.rst", "extensions/applied_libraries.rst", "faq.rst", "func_wrapper.rst", "func_wrapper/handle_nestable.rst", "func_wrapper/handle_out_argument.rst", "func_wrapper/infer_device.rst", "func_wrapper/infer_dtype.rst", "func_wrapper/inputs_to_ivy_arrays.rst", "func_wrapper/inputs_to_native_arrays.rst", "func_wrapper/outputs_to_ivy_arrays.rst", "func_wrapper/to_native_arrays_and_back.rst", "functional/ivy.rst", "functional/ivy/activations.rst", "functional/ivy/activations/gelu.rst", "functional/ivy/activations/leaky_relu.rst", "functional/ivy/activations/relu.rst", "functional/ivy/activations/sigmoid.rst", "functional/ivy/activations/softmax.rst", "functional/ivy/activations/softplus.rst", "functional/ivy/activations/tanh.rst", "functional/ivy/compilation.rst", "functional/ivy/compilation/compile.rst", "functional/ivy/constants.rst", "functional/ivy/creation.rst", "functional/ivy/creation/arange.rst", "functional/ivy/creation/asarray.rst", "functional/ivy/creation/empty.rst", "functional/ivy/creation/empty_like.rst", "functional/ivy/creation/eye.rst", "functional/ivy/creation/from_dlpack.rst", "functional/ivy/creation/full.rst", "functional/ivy/creation/full_like.rst", "functional/ivy/creation/linspace.rst", "functional/ivy/creation/logspace.rst", "functional/ivy/creation/meshgrid.rst", "functional/ivy/creation/native_array.rst", "functional/ivy/creation/ones.rst", "functional/ivy/creation/ones_like.rst", "functional/ivy/creation/tril.rst", "functional/ivy/creation/triu.rst", "functional/ivy/creation/zeros.rst", "functional/ivy/creation/zeros_like.rst", "functional/ivy/data_type.rst", "functional/ivy/data_type/DefaultDtype:\n    \"\"\"\"\"\"\n\n    # noinspection PyShadowingNames\n    def __init__.rst", "functional/ivy/data_type/DefaultFloatDtype:\n    \"\"\"\"\"\"\n\n    # noinspection PyShadowingNames\n    def __init__.rst", "functional/ivy/data_type/DefaultIntDtype:\n    \"\"\"\"\"\"\n\n    # noinspection PyShadowingNames\n    def __init__.rst", "functional/ivy/data_type/as_ivy_dtype.rst", "functional/ivy/data_type/as_native_dtype.rst", "functional/ivy/data_type/astype.rst", "functional/ivy/data_type/broadcast_arrays.rst", "functional/ivy/data_type/broadcast_to.rst", "functional/ivy/data_type/can_cast.rst", "functional/ivy/data_type/can_cast/can_cast_array.rst", "functional/ivy/data_type/can_cast/can_cast_container.rst", "functional/ivy/data_type/can_cast/can_cast_functional.rst", "functional/ivy/data_type/can_cast/static_can_cast_container.rst", "functional/ivy/data_type/closest_valid_dtype.rst", "functional/ivy/data_type/default_dtype.rst", "functional/ivy/data_type/default_float_dtype.rst", "functional/ivy/data_type/default_int_dtype.rst", "functional/ivy/data_type/dtype.rst", "functional/ivy/data_type/dtype_bits.rst", "functional/ivy/data_type/finfo.rst", "functional/ivy/data_type/function_supported_dtypes.rst", "functional/ivy/data_type/function_unsupported_dtypes.rst", "functional/ivy/data_type/iinfo.rst", "functional/ivy/data_type/invalid_dtype.rst", "functional/ivy/data_type/is_float_dtype.rst", "functional/ivy/data_type/is_int_dtype.rst", "functional/ivy/data_type/promote_types.rst", "functional/ivy/data_type/result_type.rst", "functional/ivy/data_type/set_default_dtype.rst", "functional/ivy/data_type/set_default_float_dtype.rst", "functional/ivy/data_type/set_default_int_dtype.rst", "functional/ivy/data_type/type_promote_arrays.rst", "functional/ivy/data_type/unset_default_dtype.rst", "functional/ivy/data_type/unset_default_float_dtype.rst", "functional/ivy/data_type/unset_default_int_dtype.rst", "functional/ivy/data_type/valid_dtype.rst", "functional/ivy/device.rst", "functional/ivy/device/DefaultDevice:\n    \"\"\"\"\"\"\n\n    # noinspection PyShadowingNames\n    def __init__.rst", "functional/ivy/device/DevClonedItem.rst", "functional/ivy/device/DevClonedIter.rst", "functional/ivy/device/DevClonedNest.rst", "functional/ivy/device/DevDistItem.rst", "functional/ivy/device/DevDistIter.rst", "functional/ivy/device/DevDistNest.rst", "functional/ivy/device/DevManager:\n    \"\"\"\"\"\"\n\n    def __init__.rst", "functional/ivy/device/DevMapper.rst", "functional/ivy/device/DevMapperMultiProc.rst", "functional/ivy/device/MultiDev:\n    def __init__.rst", "functional/ivy/device/MultiDevItem.rst", "functional/ivy/device/MultiDevIter.rst", "functional/ivy/device/MultiDevNest.rst", "functional/ivy/device/Profiler.rst", "functional/ivy/device/as_ivy_dev.rst", "functional/ivy/device/as_native_dev.rst", "functional/ivy/device/clear_mem_on_dev.rst", "functional/ivy/device/default_device.rst", "functional/ivy/device/dev.rst", "functional/ivy/device/dev_clone.rst", "functional/ivy/device/dev_clone_array.rst", "functional/ivy/device/dev_clone_iter.rst", "functional/ivy/device/dev_clone_nest.rst", "functional/ivy/device/dev_dist.rst", "functional/ivy/device/dev_dist_array.rst", "functional/ivy/device/dev_dist_iter.rst", "functional/ivy/device/dev_dist_nest.rst", "functional/ivy/device/dev_unify.rst", "functional/ivy/device/dev_unify_array.rst", "functional/ivy/device/dev_unify_iter.rst", "functional/ivy/device/dev_unify_nest.rst", "functional/ivy/device/dev_util.rst", "functional/ivy/device/get_all_ivy_arrays_on_dev.rst", "functional/ivy/device/gpu_is_available.rst", "functional/ivy/device/num_cpu_cores.rst", "functional/ivy/device/num_gpus.rst", "functional/ivy/device/num_ivy_arrays_on_dev.rst", "functional/ivy/device/percent_used_mem_on_dev.rst", "functional/ivy/device/print_all_ivy_arrays_on_dev.rst", "functional/ivy/device/set_default_device.rst", "functional/ivy/device/set_split_factor.rst", "functional/ivy/device/split_factor.rst", "functional/ivy/device/split_func_call.rst", "functional/ivy/device/to_device.rst", "functional/ivy/device/total_mem_on_dev.rst", "functional/ivy/device/tpu_is_available.rst", "functional/ivy/device/unset_default_device.rst", "functional/ivy/device/used_mem_on_dev.rst", "functional/ivy/elementwise.rst", "functional/ivy/elementwise/abs.rst", "functional/ivy/elementwise/abs/abs_array.rst", "functional/ivy/elementwise/abs/abs_container.rst", "functional/ivy/elementwise/abs/abs_functional.rst", "functional/ivy/elementwise/acos.rst", "functional/ivy/elementwise/acos/acos_array.rst", "functional/ivy/elementwise/acos/acos_container.rst", "functional/ivy/elementwise/acos/acos_functional.rst", "functional/ivy/elementwise/acosh.rst", "functional/ivy/elementwise/acosh/acosh_array.rst", "functional/ivy/elementwise/acosh/acosh_container.rst", "functional/ivy/elementwise/acosh/acosh_functional.rst", "functional/ivy/elementwise/add.rst", "functional/ivy/elementwise/add/add_array.rst", "functional/ivy/elementwise/add/add_container.rst", "functional/ivy/elementwise/add/add_functional.rst", "functional/ivy/elementwise/add/static_add_container.rst", "functional/ivy/elementwise/asin.rst", "functional/ivy/elementwise/asin/asin_array.rst", "functional/ivy/elementwise/asin/asin_container.rst", "functional/ivy/elementwise/asin/asin_functional.rst", "functional/ivy/elementwise/asinh.rst", "functional/ivy/elementwise/asinh/asinh_array.rst", "functional/ivy/elementwise/asinh/asinh_container.rst", "functional/ivy/elementwise/asinh/asinh_functional.rst", "functional/ivy/elementwise/atan.rst", "functional/ivy/elementwise/atan/atan_array.rst", "functional/ivy/elementwise/atan/atan_container.rst", "functional/ivy/elementwise/atan/atan_functional.rst", "functional/ivy/elementwise/atan2.rst", "functional/ivy/elementwise/atan2/atan2_array.rst", "functional/ivy/elementwise/atan2/atan2_container.rst", "functional/ivy/elementwise/atan2/atan2_functional.rst", "functional/ivy/elementwise/atanh.rst", "functional/ivy/elementwise/atanh/atanh_array.rst", "functional/ivy/elementwise/atanh/atanh_container.rst", "functional/ivy/elementwise/atanh/atanh_functional.rst", "functional/ivy/elementwise/bitwise_and.rst", "functional/ivy/elementwise/bitwise_and/bitwise_and_array.rst", "functional/ivy/elementwise/bitwise_and/bitwise_and_container.rst", "functional/ivy/elementwise/bitwise_and/bitwise_and_functional.rst", "functional/ivy/elementwise/bitwise_invert.rst", "functional/ivy/elementwise/bitwise_invert/bitwise_invert_array.rst", "functional/ivy/elementwise/bitwise_invert/bitwise_invert_container.rst", "functional/ivy/elementwise/bitwise_invert/bitwise_invert_functional.rst", "functional/ivy/elementwise/bitwise_left_shift.rst", "functional/ivy/elementwise/bitwise_left_shift/bitwise_left_shift_array.rst", "functional/ivy/elementwise/bitwise_left_shift/bitwise_left_shift_container.rst", "functional/ivy/elementwise/bitwise_left_shift/bitwise_left_shift_functional.rst", "functional/ivy/elementwise/bitwise_or.rst", "functional/ivy/elementwise/bitwise_or/bitwise_or_array.rst", "functional/ivy/elementwise/bitwise_or/bitwise_or_container.rst", "functional/ivy/elementwise/bitwise_or/bitwise_or_functional.rst", "functional/ivy/elementwise/bitwise_right_shift.rst", "functional/ivy/elementwise/bitwise_right_shift/bitwise_right_shift_array.rst", "functional/ivy/elementwise/bitwise_right_shift/bitwise_right_shift_container.rst", "functional/ivy/elementwise/bitwise_right_shift/bitwise_right_shift_functional.rst", "functional/ivy/elementwise/bitwise_xor.rst", "functional/ivy/elementwise/bitwise_xor/bitwise_xor_array.rst", "functional/ivy/elementwise/bitwise_xor/bitwise_xor_container.rst", "functional/ivy/elementwise/bitwise_xor/bitwise_xor_functional.rst", "functional/ivy/elementwise/ceil.rst", "functional/ivy/elementwise/ceil/ceil_array.rst", "functional/ivy/elementwise/ceil/ceil_container.rst", "functional/ivy/elementwise/ceil/ceil_functional.rst", "functional/ivy/elementwise/cos.rst", "functional/ivy/elementwise/cos/cos_array.rst", "functional/ivy/elementwise/cos/cos_container.rst", "functional/ivy/elementwise/cos/cos_functional.rst", "functional/ivy/elementwise/cosh.rst", "functional/ivy/elementwise/cosh/cosh_array.rst", "functional/ivy/elementwise/cosh/cosh_container.rst", "functional/ivy/elementwise/cosh/cosh_functional.rst", "functional/ivy/elementwise/divide.rst", "functional/ivy/elementwise/divide/divide_array.rst", "functional/ivy/elementwise/divide/divide_container.rst", "functional/ivy/elementwise/divide/divide_functional.rst", "functional/ivy/elementwise/divide/static_divide_container.rst", "functional/ivy/elementwise/equal.rst", "functional/ivy/elementwise/equal/equal_array.rst", "functional/ivy/elementwise/equal/equal_container.rst", "functional/ivy/elementwise/equal/equal_functional.rst", "functional/ivy/elementwise/erf.rst", "functional/ivy/elementwise/erf/erf_array.rst", "functional/ivy/elementwise/erf/erf_container.rst", "functional/ivy/elementwise/erf/erf_functional.rst", "functional/ivy/elementwise/exp.rst", "functional/ivy/elementwise/exp/exp_array.rst", "functional/ivy/elementwise/exp/exp_container.rst", "functional/ivy/elementwise/exp/exp_functional.rst", "functional/ivy/elementwise/expm1.rst", "functional/ivy/elementwise/expm1/expm1_array.rst", "functional/ivy/elementwise/expm1/expm1_container.rst", "functional/ivy/elementwise/expm1/expm1_functional.rst", "functional/ivy/elementwise/floor.rst", "functional/ivy/elementwise/floor/floor_array.rst", "functional/ivy/elementwise/floor/floor_container.rst", "functional/ivy/elementwise/floor/floor_functional.rst", "functional/ivy/elementwise/floor_divide.rst", "functional/ivy/elementwise/floor_divide/floor_divide_array.rst", "functional/ivy/elementwise/floor_divide/floor_divide_container.rst", "functional/ivy/elementwise/floor_divide/floor_divide_functional.rst", "functional/ivy/elementwise/greater.rst", "functional/ivy/elementwise/greater/greater_array.rst", "functional/ivy/elementwise/greater/greater_container.rst", "functional/ivy/elementwise/greater/greater_functional.rst", "functional/ivy/elementwise/greater_equal.rst", "functional/ivy/elementwise/greater_equal/greater_equal_array.rst", "functional/ivy/elementwise/greater_equal/greater_equal_container.rst", "functional/ivy/elementwise/greater_equal/greater_equal_functional.rst", "functional/ivy/elementwise/isfinite.rst", "functional/ivy/elementwise/isfinite/isfinite_array.rst", "functional/ivy/elementwise/isfinite/isfinite_container.rst", "functional/ivy/elementwise/isfinite/isfinite_functional.rst", "functional/ivy/elementwise/isinf.rst", "functional/ivy/elementwise/isinf/isinf_array.rst", "functional/ivy/elementwise/isinf/isinf_container.rst", "functional/ivy/elementwise/isinf/isinf_functional.rst", "functional/ivy/elementwise/isnan.rst", "functional/ivy/elementwise/isnan/isnan_array.rst", "functional/ivy/elementwise/isnan/isnan_container.rst", "functional/ivy/elementwise/isnan/isnan_functional.rst", "functional/ivy/elementwise/less.rst", "functional/ivy/elementwise/less/less_array.rst", "functional/ivy/elementwise/less/less_container.rst", "functional/ivy/elementwise/less/less_functional.rst", "functional/ivy/elementwise/less_equal.rst", "functional/ivy/elementwise/less_equal/less_equal_array.rst", "functional/ivy/elementwise/less_equal/less_equal_container.rst", "functional/ivy/elementwise/less_equal/less_equal_functional.rst", "functional/ivy/elementwise/log.rst", "functional/ivy/elementwise/log/log_array.rst", "functional/ivy/elementwise/log/log_container.rst", "functional/ivy/elementwise/log/log_functional.rst", "functional/ivy/elementwise/log10.rst", "functional/ivy/elementwise/log10/log10_array.rst", "functional/ivy/elementwise/log10/log10_container.rst", "functional/ivy/elementwise/log10/log10_functional.rst", "functional/ivy/elementwise/log1p.rst", "functional/ivy/elementwise/log1p/log1p_array.rst", "functional/ivy/elementwise/log1p/log1p_container.rst", "functional/ivy/elementwise/log1p/log1p_functional.rst", "functional/ivy/elementwise/log2.rst", "functional/ivy/elementwise/log2/log2_array.rst", "functional/ivy/elementwise/log2/log2_container.rst", "functional/ivy/elementwise/log2/log2_functional.rst", "functional/ivy/elementwise/logaddexp.rst", "functional/ivy/elementwise/logaddexp/logaddexp_array.rst", "functional/ivy/elementwise/logaddexp/logaddexp_container.rst", "functional/ivy/elementwise/logaddexp/logaddexp_functional.rst", "functional/ivy/elementwise/logical_and.rst", "functional/ivy/elementwise/logical_and/logical_and_array.rst", "functional/ivy/elementwise/logical_and/logical_and_container.rst", "functional/ivy/elementwise/logical_and/logical_and_functional.rst", "functional/ivy/elementwise/logical_not.rst", "functional/ivy/elementwise/logical_not/logical_not_array.rst", "functional/ivy/elementwise/logical_not/logical_not_container.rst", "functional/ivy/elementwise/logical_not/logical_not_functional.rst", "functional/ivy/elementwise/logical_or.rst", "functional/ivy/elementwise/logical_or/logical_or_array.rst", "functional/ivy/elementwise/logical_or/logical_or_container.rst", "functional/ivy/elementwise/logical_or/logical_or_functional.rst", "functional/ivy/elementwise/logical_xor.rst", "functional/ivy/elementwise/logical_xor/logical_xor_array.rst", "functional/ivy/elementwise/logical_xor/logical_xor_container.rst", "functional/ivy/elementwise/logical_xor/logical_xor_functional.rst", "functional/ivy/elementwise/maximum.rst", "functional/ivy/elementwise/minimum.rst", "functional/ivy/elementwise/multiply.rst", "functional/ivy/elementwise/multiply/multiply_array.rst", "functional/ivy/elementwise/multiply/multiply_container.rst", "functional/ivy/elementwise/multiply/multiply_functional.rst", "functional/ivy/elementwise/multiply/static_multiply_container.rst", "functional/ivy/elementwise/negative.rst", "functional/ivy/elementwise/negative/negative_array.rst", "functional/ivy/elementwise/negative/negative_container.rst", "functional/ivy/elementwise/negative/negative_functional.rst", "functional/ivy/elementwise/not_equal.rst", "functional/ivy/elementwise/not_equal/not_equal_array.rst", "functional/ivy/elementwise/not_equal/not_equal_container.rst", "functional/ivy/elementwise/not_equal/not_equal_functional.rst", "functional/ivy/elementwise/positive.rst", "functional/ivy/elementwise/positive/positive_array.rst", "functional/ivy/elementwise/positive/positive_container.rst", "functional/ivy/elementwise/positive/positive_functional.rst", "functional/ivy/elementwise/pow.rst", "functional/ivy/elementwise/pow/pow_array.rst", "functional/ivy/elementwise/pow/pow_container.rst", "functional/ivy/elementwise/pow/pow_functional.rst", "functional/ivy/elementwise/remainder.rst", "functional/ivy/elementwise/remainder/remainder_array.rst", "functional/ivy/elementwise/remainder/remainder_container.rst", "functional/ivy/elementwise/remainder/remainder_functional.rst", "functional/ivy/elementwise/round.rst", "functional/ivy/elementwise/round/round_array.rst", "functional/ivy/elementwise/round/round_container.rst", "functional/ivy/elementwise/round/round_functional.rst", "functional/ivy/elementwise/sign.rst", "functional/ivy/elementwise/sign/sign_array.rst", "functional/ivy/elementwise/sign/sign_container.rst", "functional/ivy/elementwise/sign/sign_functional.rst", "functional/ivy/elementwise/sin.rst", "functional/ivy/elementwise/sin/sin_array.rst", "functional/ivy/elementwise/sin/sin_container.rst", "functional/ivy/elementwise/sin/sin_functional.rst", "functional/ivy/elementwise/sinh.rst", "functional/ivy/elementwise/sinh/sinh_array.rst", "functional/ivy/elementwise/sinh/sinh_container.rst", "functional/ivy/elementwise/sinh/sinh_functional.rst", "functional/ivy/elementwise/sqrt.rst", "functional/ivy/elementwise/sqrt/sqrt_array.rst", "functional/ivy/elementwise/sqrt/sqrt_container.rst", "functional/ivy/elementwise/sqrt/sqrt_functional.rst", "functional/ivy/elementwise/square.rst", "functional/ivy/elementwise/square/square_array.rst", "functional/ivy/elementwise/square/square_container.rst", "functional/ivy/elementwise/square/square_functional.rst", "functional/ivy/elementwise/subtract.rst", "functional/ivy/elementwise/subtract/static_subtract_container.rst", "functional/ivy/elementwise/subtract/subtract_array.rst", "functional/ivy/elementwise/subtract/subtract_container.rst", "functional/ivy/elementwise/subtract/subtract_functional.rst", "functional/ivy/elementwise/tan.rst", "functional/ivy/elementwise/tan/static_tan_container.rst", "functional/ivy/elementwise/tan/tan_array.rst", "functional/ivy/elementwise/tan/tan_container.rst", "functional/ivy/elementwise/tan/tan_functional.rst", "functional/ivy/elementwise/tanh.rst", "functional/ivy/elementwise/tanh/static_tanh_container.rst", "functional/ivy/elementwise/tanh/tanh_array.rst", "functional/ivy/elementwise/tanh/tanh_container.rst", "functional/ivy/elementwise/tanh/tanh_functional.rst", "functional/ivy/elementwise/trunc.rst", "functional/ivy/elementwise/trunc/trunc_array.rst", "functional/ivy/elementwise/trunc/trunc_container.rst", "functional/ivy/elementwise/trunc/trunc_functional.rst", "functional/ivy/general.rst", "functional/ivy/general/all_equal.rst", "functional/ivy/general/all_equal/all_equal_array.rst", "functional/ivy/general/all_equal/all_equal_container.rst", "functional/ivy/general/all_equal/all_equal_functional.rst", "functional/ivy/general/all_equal/static_all_equal_container.rst", "functional/ivy/general/arg_info.rst", "functional/ivy/general/arg_names.rst", "functional/ivy/general/array_equal.rst", "functional/ivy/general/arrays_equal.rst", "functional/ivy/general/assert_supports_inplace.rst", "functional/ivy/general/cache_fn.rst", "functional/ivy/general/clip_matrix_norm.rst", "functional/ivy/general/clip_vector_norm.rst", "functional/ivy/general/clip_vector_norm/clip_vector_norm_container.rst", "functional/ivy/general/clip_vector_norm/clip_vector_norm_functional.rst", "functional/ivy/general/container_types.rst", "functional/ivy/general/copy_array.rst", "functional/ivy/general/cumprod.rst", "functional/ivy/general/cumsum.rst", "functional/ivy/general/current_backend_str.rst", "functional/ivy/general/default.rst", "functional/ivy/general/einops_rearrange.rst", "functional/ivy/general/einops_reduce.rst", "functional/ivy/general/einops_repeat.rst", "functional/ivy/general/exists.rst", "functional/ivy/general/floormod.rst", "functional/ivy/general/fourier_encode.rst", "functional/ivy/general/gather.rst", "functional/ivy/general/gather_nd.rst", "functional/ivy/general/gather_nd/gather_nd_array.rst", "functional/ivy/general/gather_nd/gather_nd_container.rst", "functional/ivy/general/gather_nd/gather_nd_functional.rst", "functional/ivy/general/gather_nd/static_gather_nd_container.rst", "functional/ivy/general/get_all_arrays_in_memory.rst", "functional/ivy/general/get_min_base.rst", "functional/ivy/general/get_min_denominator.rst", "functional/ivy/general/get_num_dims.rst", "functional/ivy/general/get_referrers_recursive.rst", "functional/ivy/general/has_nans.rst", "functional/ivy/general/indices_where.rst", "functional/ivy/general/inplace_arrays_supported.rst", "functional/ivy/general/inplace_decrement.rst", "functional/ivy/general/inplace_increment.rst", "functional/ivy/general/inplace_update.rst", "functional/ivy/general/inplace_variables_supported.rst", "functional/ivy/general/is_array.rst", "functional/ivy/general/is_ivy_array.rst", "functional/ivy/general/is_ivy_container.rst", "functional/ivy/general/is_native_array.rst", "functional/ivy/general/match_kwargs.rst", "functional/ivy/general/multiprocessing.rst", "functional/ivy/general/num_arrays_in_memory.rst", "functional/ivy/general/one_hot.rst", "functional/ivy/general/print_all_arrays_in_memory.rst", "functional/ivy/general/queue_timeout.rst", "functional/ivy/general/scatter_flat.rst", "functional/ivy/general/scatter_nd.rst", "functional/ivy/general/set_min_base.rst", "functional/ivy/general/set_min_denominator.rst", "functional/ivy/general/set_queue_timeout.rst", "functional/ivy/general/set_tmp_dir.rst", "functional/ivy/general/shape.rst", "functional/ivy/general/shape_to_tuple.rst", "functional/ivy/general/stable_divide.rst", "functional/ivy/general/stable_pow.rst", "functional/ivy/general/supports_inplace.rst", "functional/ivy/general/tmp_dir.rst", "functional/ivy/general/to_list.rst", "functional/ivy/general/to_numpy.rst", "functional/ivy/general/to_scalar.rst", "functional/ivy/general/try_else_none.rst", "functional/ivy/general/unstack.rst", "functional/ivy/general/value_is_nan.rst", "functional/ivy/gradients.rst", "functional/ivy/gradients/GradientTracking:\n    \"\"\"\"\"\"\n\n    # noinspection PyShadowingNames\n    def __init__.rst", "functional/ivy/gradients/adam_step.rst", "functional/ivy/gradients/adam_update.rst", "functional/ivy/gradients/adam_update/adam_update_container.rst", "functional/ivy/gradients/adam_update/adam_update_functional.rst", "functional/ivy/gradients/adam_update/static_adam_update_container.rst", "functional/ivy/gradients/execute_with_gradients.rst", "functional/ivy/gradients/gradient_descent_update.rst", "functional/ivy/gradients/gradient_descent_update/gradient_descent_update_container.rst", "functional/ivy/gradients/gradient_descent_update/gradient_descent_update_functional.rst", "functional/ivy/gradients/gradient_descent_update/static_gradient_descent_update_container.rst", "functional/ivy/gradients/is_variable.rst", "functional/ivy/gradients/lamb_update.rst", "functional/ivy/gradients/lamb_update/lamb_update_container.rst", "functional/ivy/gradients/lamb_update/lamb_update_functional.rst", "functional/ivy/gradients/lamb_update/static_lamb_update_container.rst", "functional/ivy/gradients/lars_update.rst", "functional/ivy/gradients/lars_update/lars_update_container.rst", "functional/ivy/gradients/lars_update/lars_update_functional.rst", "functional/ivy/gradients/lars_update/static_lars_update_container.rst", "functional/ivy/gradients/optimizer_update.rst", "functional/ivy/gradients/optimizer_update/optimizer_update_container.rst", "functional/ivy/gradients/optimizer_update/optimizer_update_functional.rst", "functional/ivy/gradients/optimizer_update/static_optimizer_update_container.rst", "functional/ivy/gradients/set_with_grads.rst", "functional/ivy/gradients/stop_gradient.rst", "functional/ivy/gradients/unset_with_grads.rst", "functional/ivy/gradients/variable.rst", "functional/ivy/gradients/variable_data.rst", "functional/ivy/gradients/with_grads.rst", "functional/ivy/layers.rst", "functional/ivy/layers/conv1d.rst", "functional/ivy/layers/conv1d_transpose.rst", "functional/ivy/layers/conv2d.rst", "functional/ivy/layers/conv2d_transpose.rst", "functional/ivy/layers/conv3d.rst", "functional/ivy/layers/conv3d_transpose.rst", "functional/ivy/layers/depthwise_conv2d.rst", "functional/ivy/layers/dropout.rst", "functional/ivy/layers/linear.rst", "functional/ivy/layers/lstm_update.rst", "functional/ivy/layers/multi_head_attention.rst", "functional/ivy/layers/scaled_dot_product_attention.rst", "functional/ivy/linear_algebra.rst", "functional/ivy/linear_algebra/cholesky.rst", "functional/ivy/linear_algebra/cholesky/cholesky_array.rst", "functional/ivy/linear_algebra/cholesky/cholesky_functional.rst", "functional/ivy/linear_algebra/cross.rst", "functional/ivy/linear_algebra/cross/cross_array.rst", "functional/ivy/linear_algebra/cross/cross_functional.rst", "functional/ivy/linear_algebra/det.rst", "functional/ivy/linear_algebra/det/det_array.rst", "functional/ivy/linear_algebra/det/det_functional.rst", "functional/ivy/linear_algebra/diagonal.rst", "functional/ivy/linear_algebra/diagonal/diagonal_array.rst", "functional/ivy/linear_algebra/diagonal/diagonal_functional.rst", "functional/ivy/linear_algebra/eigh.rst", "functional/ivy/linear_algebra/eigh/eigh_array.rst", "functional/ivy/linear_algebra/eigh/eigh_functional.rst", "functional/ivy/linear_algebra/eigvalsh.rst", "functional/ivy/linear_algebra/eigvalsh/eigvalsh_array.rst", "functional/ivy/linear_algebra/eigvalsh/eigvalsh_functional.rst", "functional/ivy/linear_algebra/inv.rst", "functional/ivy/linear_algebra/inv/inv_array.rst", "functional/ivy/linear_algebra/inv/inv_functional.rst", "functional/ivy/linear_algebra/matmul.rst", "functional/ivy/linear_algebra/matmul/matmul_array.rst", "functional/ivy/linear_algebra/matmul/matmul_container.rst", "functional/ivy/linear_algebra/matmul/matmul_functional.rst", "functional/ivy/linear_algebra/matrix_norm.rst", "functional/ivy/linear_algebra/matrix_norm/matrix_norm_array.rst", "functional/ivy/linear_algebra/matrix_norm/matrix_norm_functional.rst", "functional/ivy/linear_algebra/matrix_power.rst", "functional/ivy/linear_algebra/matrix_rank.rst", "functional/ivy/linear_algebra/matrix_rank/matrix_rank_array.rst", "functional/ivy/linear_algebra/matrix_rank/matrix_rank_functional.rst", "functional/ivy/linear_algebra/matrix_transpose.rst", "functional/ivy/linear_algebra/matrix_transpose/matrix_transpose_array.rst", "functional/ivy/linear_algebra/matrix_transpose/matrix_transpose_functional.rst", "functional/ivy/linear_algebra/outer.rst", "functional/ivy/linear_algebra/outer/outer_array.rst", "functional/ivy/linear_algebra/outer/outer_functional.rst", "functional/ivy/linear_algebra/pinv.rst", "functional/ivy/linear_algebra/pinv/pinv_array.rst", "functional/ivy/linear_algebra/pinv/pinv_functional.rst", "functional/ivy/linear_algebra/qr.rst", "functional/ivy/linear_algebra/qr/qr_array.rst", "functional/ivy/linear_algebra/qr/qr_functional.rst", "functional/ivy/linear_algebra/slogdet.rst", "functional/ivy/linear_algebra/solve.rst", "functional/ivy/linear_algebra/solve/solve_array.rst", "functional/ivy/linear_algebra/solve/solve_functional.rst", "functional/ivy/linear_algebra/svd.rst", "functional/ivy/linear_algebra/svd/svd_array.rst", "functional/ivy/linear_algebra/svd/svd_functional.rst", "functional/ivy/linear_algebra/svdvals.rst", "functional/ivy/linear_algebra/svdvals/svdvals_array.rst", "functional/ivy/linear_algebra/svdvals/svdvals_functional.rst", "functional/ivy/linear_algebra/tensordot.rst", "functional/ivy/linear_algebra/tensordot/tensordot_array.rst", "functional/ivy/linear_algebra/tensordot/tensordot_functional.rst", "functional/ivy/linear_algebra/trace.rst", "functional/ivy/linear_algebra/trace/trace_array.rst", "functional/ivy/linear_algebra/trace/trace_functional.rst", "functional/ivy/linear_algebra/vecdot.rst", "functional/ivy/linear_algebra/vecdot/vecdot_array.rst", "functional/ivy/linear_algebra/vecdot/vecdot_functional.rst", "functional/ivy/linear_algebra/vector_norm.rst", "functional/ivy/linear_algebra/vector_norm/vector_norm_array.rst", "functional/ivy/linear_algebra/vector_norm/vector_norm_functional.rst", "functional/ivy/linear_algebra/vector_to_skew_symmetric_matrix.rst", "functional/ivy/linear_algebra/vector_to_skew_symmetric_matrix/vector_to_skew_symmetric_matrix_array.rst", "functional/ivy/linear_algebra/vector_to_skew_symmetric_matrix/vector_to_skew_symmetric_matrix_functional.rst", "functional/ivy/losses.rst", "functional/ivy/losses/binary_cross_entropy.rst", "functional/ivy/losses/binary_cross_entropy/binary_cross_entropy_array.rst", "functional/ivy/losses/binary_cross_entropy/binary_cross_entropy_container.rst", "functional/ivy/losses/binary_cross_entropy/binary_cross_entropy_functional.rst", "functional/ivy/losses/binary_cross_entropy/static_binary_cross_entropy_container.rst", "functional/ivy/losses/cross_entropy.rst", "functional/ivy/losses/cross_entropy/cross_entropy_array.rst", "functional/ivy/losses/cross_entropy/cross_entropy_container.rst", "functional/ivy/losses/cross_entropy/cross_entropy_functional.rst", "functional/ivy/losses/cross_entropy/static_cross_entropy_container.rst", "functional/ivy/losses/sparse_cross_entropy.rst", "functional/ivy/losses/sparse_cross_entropy/sparse_cross_entropy_array.rst", "functional/ivy/losses/sparse_cross_entropy/sparse_cross_entropy_container.rst", "functional/ivy/losses/sparse_cross_entropy/sparse_cross_entropy_functional.rst", "functional/ivy/losses/sparse_cross_entropy/static_sparse_cross_entropy_container.rst", "functional/ivy/manipulation.rst", "functional/ivy/manipulation/clip.rst", "functional/ivy/manipulation/clip/clip_array.rst", "functional/ivy/manipulation/clip/clip_container.rst", "functional/ivy/manipulation/clip/clip_functional.rst", "functional/ivy/manipulation/clip/static_clip_container.rst", "functional/ivy/manipulation/concat.rst", "functional/ivy/manipulation/concat/concat_array.rst", "functional/ivy/manipulation/concat/concat_container.rst", "functional/ivy/manipulation/concat/concat_functional.rst", "functional/ivy/manipulation/constant_pad.rst", "functional/ivy/manipulation/constant_pad/constant_pad_array.rst", "functional/ivy/manipulation/constant_pad/constant_pad_container.rst", "functional/ivy/manipulation/constant_pad/constant_pad_functional.rst", "functional/ivy/manipulation/expand_dims.rst", "functional/ivy/manipulation/expand_dims/expand_dims_array.rst", "functional/ivy/manipulation/expand_dims/expand_dims_container.rst", "functional/ivy/manipulation/expand_dims/expand_dims_functional.rst", "functional/ivy/manipulation/flip.rst", "functional/ivy/manipulation/flip/flip_array.rst", "functional/ivy/manipulation/flip/flip_container.rst", "functional/ivy/manipulation/flip/flip_functional.rst", "functional/ivy/manipulation/permute_dims.rst", "functional/ivy/manipulation/permute_dims/permute_dims_array.rst", "functional/ivy/manipulation/permute_dims/permute_dims_container.rst", "functional/ivy/manipulation/permute_dims/permute_dims_functional.rst", "functional/ivy/manipulation/repeat.rst", "functional/ivy/manipulation/repeat/repeat_array.rst", "functional/ivy/manipulation/repeat/repeat_container.rst", "functional/ivy/manipulation/repeat/repeat_functional.rst", "functional/ivy/manipulation/reshape.rst", "functional/ivy/manipulation/reshape/reshape_array.rst", "functional/ivy/manipulation/reshape/reshape_container.rst", "functional/ivy/manipulation/reshape/reshape_functional.rst", "functional/ivy/manipulation/roll.rst", "functional/ivy/manipulation/roll/roll_array.rst", "functional/ivy/manipulation/roll/roll_container.rst", "functional/ivy/manipulation/roll/roll_functional.rst", "functional/ivy/manipulation/roll/static_roll_container.rst", "functional/ivy/manipulation/split.rst", "functional/ivy/manipulation/squeeze.rst", "functional/ivy/manipulation/squeeze/squeeze_array.rst", "functional/ivy/manipulation/squeeze/squeeze_container.rst", "functional/ivy/manipulation/squeeze/squeeze_functional.rst", "functional/ivy/manipulation/stack.rst", "functional/ivy/manipulation/stack/stack_array.rst", "functional/ivy/manipulation/stack/stack_container.rst", "functional/ivy/manipulation/stack/stack_functional.rst", "functional/ivy/manipulation/swapaxes.rst", "functional/ivy/manipulation/swapaxes/swapaxes_array.rst", "functional/ivy/manipulation/swapaxes/swapaxes_container.rst", "functional/ivy/manipulation/swapaxes/swapaxes_functional.rst", "functional/ivy/manipulation/tile.rst", "functional/ivy/manipulation/tile/tile_array.rst", "functional/ivy/manipulation/tile/tile_container.rst", "functional/ivy/manipulation/tile/tile_functional.rst", "functional/ivy/manipulation/zero_pad.rst", "functional/ivy/manipulation/zero_pad/zero_pad_array.rst", "functional/ivy/manipulation/zero_pad/zero_pad_container.rst", "functional/ivy/manipulation/zero_pad/zero_pad_functional.rst", "functional/ivy/meta.rst", "functional/ivy/meta/fomaml_step.rst", "functional/ivy/meta/maml_step.rst", "functional/ivy/meta/reptile_step.rst", "functional/ivy/nest.rst", "functional/ivy/nest/all_nested_indices.rst", "functional/ivy/nest/copy_nest.rst", "functional/ivy/nest/index_nest.rst", "functional/ivy/nest/insert_into_nest_at_index.rst", "functional/ivy/nest/insert_into_nest_at_indices.rst", "functional/ivy/nest/map.rst", "functional/ivy/nest/map_nest_at_index.rst", "functional/ivy/nest/map_nest_at_indices.rst", "functional/ivy/nest/multi_index_nest.rst", "functional/ivy/nest/nested_any.rst", "functional/ivy/nest/nested_indices_where.rst", "functional/ivy/nest/nested_map.rst", "functional/ivy/nest/nested_multi_map.rst", "functional/ivy/nest/prune_nest_at_index.rst", "functional/ivy/nest/prune_nest_at_indices.rst", "functional/ivy/nest/set_nest_at_index.rst", "functional/ivy/nest/set_nest_at_indices.rst", "functional/ivy/norms.rst", "functional/ivy/norms/layer_norm.rst", "functional/ivy/norms/layer_norm/layer_norm_array.rst", "functional/ivy/norms/layer_norm/layer_norm_container.rst", "functional/ivy/norms/layer_norm/layer_norm_functional.rst", "functional/ivy/random.rst", "functional/ivy/random/multinomial.rst", "functional/ivy/random/randint.rst", "functional/ivy/random/randint/randint_functional.rst", "functional/ivy/random/randint/static_randint_container.rst", "functional/ivy/random/random_normal.rst", "functional/ivy/random/random_uniform.rst", "functional/ivy/random/random_uniform/random_uniform_container.rst", "functional/ivy/random/random_uniform/random_uniform_functional.rst", "functional/ivy/random/random_uniform/static_random_uniform_container.rst", "functional/ivy/random/seed.rst", "functional/ivy/random/shuffle.rst", "functional/ivy/searching.rst", "functional/ivy/searching/argmax.rst", "functional/ivy/searching/argmin.rst", "functional/ivy/searching/nonzero.rst", "functional/ivy/searching/where.rst", "functional/ivy/set.rst", "functional/ivy/set/unique_all.rst", "functional/ivy/set/unique_counts.rst", "functional/ivy/set/unique_inverse.rst", "functional/ivy/set/unique_values.rst", "functional/ivy/sorting.rst", "functional/ivy/sorting/argsort.rst", "functional/ivy/sorting/argsort/argsort_array.rst", "functional/ivy/sorting/argsort/argsort_container.rst", "functional/ivy/sorting/argsort/argsort_functional.rst", "functional/ivy/sorting/argsort/static_argsort_container.rst", "functional/ivy/sorting/sort.rst", "functional/ivy/sorting/sort/sort_array.rst", "functional/ivy/sorting/sort/sort_container.rst", "functional/ivy/sorting/sort/sort_functional.rst", "functional/ivy/sorting/sort/static_sort_container.rst", "functional/ivy/statistical.rst", "functional/ivy/statistical/einsum.rst", "functional/ivy/statistical/einsum/einsum_array.rst", "functional/ivy/statistical/einsum/einsum_container.rst", "functional/ivy/statistical/einsum/einsum_functional.rst", "functional/ivy/statistical/max.rst", "functional/ivy/statistical/max/max_array.rst", "functional/ivy/statistical/max/max_container.rst", "functional/ivy/statistical/max/max_functional.rst", "functional/ivy/statistical/mean.rst", "functional/ivy/statistical/mean/mean_array.rst", "functional/ivy/statistical/mean/mean_container.rst", "functional/ivy/statistical/mean/mean_functional.rst", "functional/ivy/statistical/min.rst", "functional/ivy/statistical/min/min_array.rst", "functional/ivy/statistical/min/min_container.rst", "functional/ivy/statistical/min/min_functional.rst", "functional/ivy/statistical/prod.rst", "functional/ivy/statistical/prod/prod_array.rst", "functional/ivy/statistical/prod/prod_container.rst", "functional/ivy/statistical/prod/prod_functional.rst", "functional/ivy/statistical/std.rst", "functional/ivy/statistical/std/std_array.rst", "functional/ivy/statistical/std/std_container.rst", "functional/ivy/statistical/std/std_functional.rst", "functional/ivy/statistical/sum.rst", "functional/ivy/statistical/sum/sum_array.rst", "functional/ivy/statistical/sum/sum_container.rst", "functional/ivy/statistical/sum/sum_functional.rst", "functional/ivy/statistical/var.rst", "functional/ivy/statistical/var/var_array.rst", "functional/ivy/statistical/var/var_container.rst", "functional/ivy/statistical/var/var_functional.rst", "functional/ivy/utility.rst", "functional/ivy/utility/all.rst", "functional/ivy/utility/all/all_array.rst", "functional/ivy/utility/all/all_container.rst", "functional/ivy/utility/all/all_functional.rst", "functional/ivy/utility/any.rst", "functional/ivy/utility/any/any_array.rst", "functional/ivy/utility/any/any_container.rst", "functional/ivy/utility/any/any_functional.rst", "index.rst", "index_append.rst", "index_prepend.rst", "inspection.rst", "inspection/add_array_specs.rst", "inspection/fn_array_spec.rst", "roadmap.rst", "stateful/activations.rst", "stateful/activations/GEGLU.rst", "stateful/activations/GELU.rst", "stateful/converters.rst", "stateful/converters/to_ivy_module.rst", "stateful/initializers.rst", "stateful/initializers/Constant:\n    def __init__.rst", "stateful/initializers/FirstLayerSiren.rst", "stateful/initializers/GlorotUniform.rst", "stateful/initializers/KaimingNormal:\n    def __init__.rst", "stateful/initializers/Ones.rst", "stateful/initializers/Siren.rst", "stateful/initializers/Uniform:\n    def __init__.rst", "stateful/initializers/Zeros.rst", "stateful/layers.rst", "stateful/layers/Conv1D.rst", "stateful/layers/Conv1DTranspose.rst", "stateful/layers/Conv2D.rst", "stateful/layers/Conv2DTranspose.rst", "stateful/layers/Conv3D.rst", "stateful/layers/Conv3DTranspose.rst", "stateful/layers/DepthwiseConv2D.rst", "stateful/layers/Dropout.rst", "stateful/layers/LSTM.rst", "stateful/layers/Linear.rst", "stateful/layers/MultiHeadAttention.rst", "stateful/module.rst", "stateful/module/Module.rst", "stateful/norms.rst", "stateful/norms/LayerNorm.rst", "stateful/optimizers.rst", "stateful/optimizers/Adam.rst", "stateful/optimizers/LAMB.rst", "stateful/optimizers/LARS.rst", "stateful/optimizers/Optimizer.rst", "stateful/optimizers/SGD.rst", "stateful/sequential.rst", "stateful/sequential/Sequential.rst", "supported_frameworks.rst", "verbosity.rst", "verbosity/cprint.rst"], "titles": ["Activations", "ArrayWithActivations", "Array methods", "abs array", "acos array", "acosh array", "add array", "add_ivy_array_instance_methods array", "all array", "all_equal array", "any array", "argsort array", "asin array", "asinh array", "atan array", "atan2 array", "atanh array", "binary_cross_entropy array", "bitwise_and array", "bitwise_invert array", "bitwise_left_shift array", "bitwise_or array", "bitwise_right_shift array", "bitwise_xor array", "can_cast array", "ceil array", "cholesky array", "clip array", "concat array", "constant_pad array", "cos array", "cosh array", "cross array", "cross_entropy array", "det array", "diagonal array", "divide array", "eigh array", "eigvalsh array", "einsum array", "equal array", "erf array", "exp array", "expand_dims array", "expm1 array", "flip array", "floor array", "floor_divide array", "gather_nd array", "greater array", "greater_equal array", "inv array", "isfinite array", "isinf array", "isnan array", "layer_norm array", "less array", "less_equal array", "log array", "log10 array", "log1p array", "log2 array", "logaddexp array", "logical_and array", "logical_not array", "logical_or array", "logical_xor array", "matmul array", "matrix_norm array", "matrix_rank array", "matrix_transpose array", "max array", "mean array", "min array", "multiply array", "negative array", "not_equal array", "outer array", "permute_dims array", "pinv array", "positive array", "pow array", "prod array", "qr array", "remainder array", "repeat array", "reshape array", "roll array", "round array", "sign array", "sin array", "sinh array", "solve array", "sort array", "sparse_cross_entropy array", "sqrt array", "square array", "squeeze array", "stack array", "std array", "subtract array", "sum array", "svd array", "svdvals array", "swapaxes array", "tan array", "tanh array", "tensordot array", "tile array", "trace array", "trunc array", "var array", "vecdot array", "vector_norm array", "vector_to_skew_symmetric_matrix array", "zero_pad array", "Conversions", "args_to_ivy", "args_to_native", "to_ivy", "to_native", "Creation", "ArrayWithCreation", "Data type", "ArrayWithDataTypes", "Device", "ArrayWithDevice", "Elementwise", "ArrayWithElementwise", "General", "ArrayWithGeneral", "Gradients", "ArrayWithGradients", "Image", "ArrayWithImage", "Layers", "ArrayWithLayers", "Linear algebra", "ArrayWithLinearAlgebra", "Losses", "ArrayWithLosses", "Manipulation", "ArrayWithManipulation", "Norms", "ArrayWithNorms", "Random", "ArrayWithRandom", "Searching", "ArrayWithSearching", "Set", "ArrayWithSet", "Sorting", "ArrayWithSorting", "Statistical", "ArrayWithStatistical", "Utility", "ArrayWithUtility", "Wrapping", "add_ivy_array_instance_methods", "Backend handler", "&lt;no title&gt;", "choose_random_backend", "clear_backend_stack", "current_backend", "get_backend", "set_backend", "try_import_ivy_jax", "try_import_ivy_mxnet", "try_import_ivy_numpy", "try_import_ivy_tf", "try_import_ivy_torch", "unset_backend", "Background", "ML Explosion", "Standardization", "Why Unify?", "Activations", "ContainerWithActivations", "Base", "ContainerBase", "Container", "Container", "MultiDevContainer", "Container methods", "abs container", "acos container", "acosh container", "adam_update container", "add container", "add_ivy_container_instance_methods container", "all container", "all_equal container", "any container", "argsort container", "asin container", "asinh container", "at_dev container", "at_devs container", "atan container", "atan2 container", "atanh container", "binary_cross_entropy container", "bitwise_and container", "bitwise_invert container", "bitwise_left_shift container", "bitwise_or container", "bitwise_right_shift container", "bitwise_xor container", "can_cast container", "ceil container", "clip container", "clip_vector_norm container", "concat container", "constant_pad container", "cos container", "cosh container", "cross_entropy container", "divide container", "einsum container", "equal container", "erf container", "exp container", "expand_dims container", "expm1 container", "flip container", "floor container", "floor_divide container", "gather_nd container", "gradient_descent_update container", "greater container", "greater_equal container", "isfinite container", "isinf container", "isnan container", "lamb_update container", "lars_update container", "layer_norm container", "less container", "less_equal container", "log container", "log10 container", "log1p container", "log2 container", "logaddexp container", "logical_and container", "logical_not container", "logical_or container", "logical_xor container", "matmul container", "max container", "mean container", "min container", "multiply container", "negative container", "not_equal container", "optimizer_update container", "permute_dims container", "positive container", "pow container", "prod container", "random_uniform container", "remainder container", "repeat container", "reshape container", "roll container", "round container", "sign container", "sin container", "sinh container", "sort container", "sparse_cross_entropy container", "sqrt container", "square container", "squeeze container", "stack container", "static_adam_update container", "static_add container", "static_all_equal container", "static_argsort container", "static_binary_cross_entropy container", "static_can_cast container", "static_clip container", "static_cross_entropy container", "static_divide container", "static_gather_nd container", "static_gradient_descent_update container", "static_lamb_update container", "static_lars_update container", "static_multiply container", "static_optimizer_update container", "static_randint container", "static_random_uniform container", "static_roll container", "static_sort container", "static_sparse_cross_entropy container", "static_subtract container", "static_tan container", "static_tanh container", "std container", "subtract container", "sum container", "swapaxes container", "tan container", "tanh container", "tile container", "trunc container", "var container", "zero_pad container", "Creation", "ContainerWithCreation", "Data type", "ContainerWithDataTypes", "Device", "ContainerWithDevice", "Elementwise", "ContainerWithElementwise", "General", "ContainerWithGeneral", "Gradients", "ContainerWithGradients", "Image", "ContainerWithImage", "Layers", "ContainerWithLayers", "Linear algebra", "ContainerWithLinearAlgebra", "Losses", "ContainerWithLosses", "Manipulation", "ContainerWithManipulation", "Norms", "ContainerWithNorms", "Random", "ContainerWithRandom", "Searching", "ContainerWithSearching", "Set", "ContainerWithSet", "Sorting", "ContainerWithSorting", "Statistical", "ContainerWithStatistical", "Utility", "ContainerWithUtility", "Wrapping", "add_ivy_container_instance_methods", "Contributing", "Setting Up", "The Basics", "Open Tasks", "Building the Docs", "Deep Dive", "Navigating the Code", "Docstrings", "Docstring Examples", "Array API Tests", "Ivy Tests", "Function Types", "Backend Setting", "Function Wrapping", "Arrays", "Containers", "Data Types", "Devices", "Inplace Updates", "Function Arguments", "Design", "Building Blocks", "Ivy as a Framework", "Ivy Array", "Ivy Container", "Ivy Stateful API", "Ivy as a Transpiler", "Ivy", "Ivy builder", "Ivy ecosystem", "Ivy gym", "Ivy mech", "Ivy memory", "Ivy models", "Ivy robot", "Ivy vision", "Extensions", "Applied Libraries", "FAQ", "Func wrapper", "handle_nestable", "handle_out_argument", "infer_device", "infer_dtype", "inputs_to_ivy_arrays", "inputs_to_native_arrays", "outputs_to_ivy_arrays", "to_native_arrays_and_back", "&lt;no title&gt;", "Activations", "gelu", "leaky_relu", "relu", "sigmoid", "softmax", "softplus", "tanh", "Compilation", "compile", "Constants", "Creation", "arange", "asarray", "empty", "empty_like", "eye", "from_dlpack", "full", "full_like", "linspace", "logspace", "meshgrid", "native_array", "ones", "ones_like", "tril", "triu", "zeros", "zeros_like", "Data type", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "as_ivy_dtype", "as_native_dtype", "astype", "broadcast_arrays", "broadcast_to", "can_cast", "ivy.Array.can_cast", "ivy.Container.can_cast", "ivy.can_cast", "ivy.Container.static_can_cast", "closest_valid_dtype", "default_dtype", "default_float_dtype", "default_int_dtype", "dtype", "dtype_bits", "finfo", "function_supported_dtypes", "function_unsupported_dtypes", "iinfo", "invalid_dtype", "is_float_dtype", "is_int_dtype", "promote_types", "result_type", "set_default_dtype", "set_default_float_dtype", "set_default_int_dtype", "type_promote_arrays", "unset_default_dtype", "unset_default_float_dtype", "unset_default_int_dtype", "valid_dtype", "Device", "&lt;no title&gt;", "DevClonedItem", "DevClonedIter", "DevClonedNest", "DevDistItem", "DevDistIter", "DevDistNest", "&lt;no title&gt;", "DevMapper", "DevMapperMultiProc", "&lt;no title&gt;", "MultiDevItem", "MultiDevIter", "MultiDevNest", "Profiler", "as_ivy_dev", "as_native_dev", "clear_mem_on_dev", "default_device", "dev", "dev_clone", "dev_clone_array", "dev_clone_iter", "dev_clone_nest", "dev_dist", "dev_dist_array", "dev_dist_iter", "dev_dist_nest", "dev_unify", "dev_unify_array", "dev_unify_iter", "dev_unify_nest", "dev_util", "get_all_ivy_arrays_on_dev", "gpu_is_available", "num_cpu_cores", "num_gpus", "num_ivy_arrays_on_dev", "percent_used_mem_on_dev", "print_all_ivy_arrays_on_dev", "set_default_device", "set_split_factor", "split_factor", "split_func_call", "to_device", "total_mem_on_dev", "tpu_is_available", "unset_default_device", "used_mem_on_dev", "Elementwise", "abs", "ivy.Array.abs", "ivy.Container.abs", "ivy.abs", "acos", "ivy.Array.acos", "ivy.Container.acos", "ivy.acos", "acosh", "ivy.Array.acosh", "ivy.Container.acosh", "ivy.acosh", "add", "ivy.Array.add", "ivy.Container.add", "ivy.add", "ivy.Container.static_add", "asin", "ivy.Array.asin", "ivy.Container.asin", "ivy.asin", "asinh", "ivy.Array.asinh", "ivy.Container.asinh", "ivy.asinh", "atan", "ivy.Array.atan", "ivy.Container.atan", "ivy.atan", "atan2", "ivy.Array.atan2", "ivy.Container.atan2", "ivy.atan2", "atanh", "ivy.Array.atanh", "ivy.Container.atanh", "ivy.atanh", "bitwise_and", "ivy.Array.bitwise_and", "ivy.Container.bitwise_and", "ivy.bitwise_and", "bitwise_invert", "ivy.Array.bitwise_invert", "ivy.Container.bitwise_invert", "ivy.bitwise_invert", "bitwise_left_shift", "ivy.Array.bitwise_left_shift", "ivy.Container.bitwise_left_shift", "ivy.bitwise_left_shift", "bitwise_or", "ivy.Array.bitwise_or", "ivy.Container.bitwise_or", "ivy.bitwise_or", "bitwise_right_shift", "ivy.Array.bitwise_right_shift", "ivy.Container.bitwise_right_shift", "ivy.bitwise_right_shift", "bitwise_xor", "ivy.Array.bitwise_xor", "ivy.Container.bitwise_xor", "ivy.bitwise_xor", "ceil", "ivy.Array.ceil", "ivy.Container.ceil", "ivy.ceil", "cos", "ivy.Array.cos", "ivy.Container.cos", "ivy.cos", "cosh", "ivy.Array.cosh", "ivy.Container.cosh", "ivy.cosh", "divide", "ivy.Array.divide", "ivy.Container.divide", "ivy.divide", "ivy.Container.static_divide", "equal", "ivy.Array.equal", "ivy.Container.equal", "ivy.equal", "erf", "ivy.Array.erf", "ivy.Container.erf", "ivy.erf", "exp", "ivy.Array.exp", "ivy.Container.exp", "ivy.exp", "expm1", "ivy.Array.expm1", "ivy.Container.expm1", "ivy.expm1", "floor", "ivy.Array.floor", "ivy.Container.floor", "ivy.floor", "floor_divide", "ivy.Array.floor_divide", "ivy.Container.floor_divide", "ivy.floor_divide", "greater", "ivy.Array.greater", "ivy.Container.greater", "ivy.greater", "greater_equal", "ivy.Array.greater_equal", "ivy.Container.greater_equal", "ivy.greater_equal", "isfinite", "ivy.Array.isfinite", "ivy.Container.isfinite", "ivy.isfinite", "isinf", "ivy.Array.isinf", "ivy.Container.isinf", "ivy.isinf", "isnan", "ivy.Array.isnan", "ivy.Container.isnan", "ivy.isnan", "less", "ivy.Array.less", "ivy.Container.less", "ivy.less", "less_equal", "ivy.Array.less_equal", "ivy.Container.less_equal", "ivy.less_equal", "log", "ivy.Array.log", "ivy.Container.log", "ivy.log", "log10", "ivy.Array.log10", "ivy.Container.log10", "ivy.log10", "log1p", "ivy.Array.log1p", "ivy.Container.log1p", "ivy.log1p", "log2", "ivy.Array.log2", "ivy.Container.log2", "ivy.log2", "logaddexp", "ivy.Array.logaddexp", "ivy.Container.logaddexp", "ivy.logaddexp", "logical_and", "ivy.Array.logical_and", "ivy.Container.logical_and", "ivy.logical_and", "logical_not", "ivy.Array.logical_not", "ivy.Container.logical_not", "ivy.logical_not", "logical_or", "ivy.Array.logical_or", "ivy.Container.logical_or", "ivy.logical_or", "logical_xor", "ivy.Array.logical_xor", "ivy.Container.logical_xor", "ivy.logical_xor", "maximum", "minimum", "multiply", "ivy.Array.multiply", "ivy.Container.multiply", "ivy.multiply", "ivy.Container.static_multiply", "negative", "ivy.Array.negative", "ivy.Container.negative", "ivy.negative", "not_equal", "ivy.Array.not_equal", "ivy.Container.not_equal", "ivy.not_equal", "positive", "ivy.Array.positive", "ivy.Container.positive", "ivy.positive", "pow", "ivy.Array.pow", "ivy.Container.pow", "ivy.pow", "remainder", "ivy.Array.remainder", "ivy.Container.remainder", "ivy.remainder", "round", "ivy.Array.round", "ivy.Container.round", "ivy.round", "sign", "ivy.Array.sign", "ivy.Container.sign", "ivy.sign", "sin", "ivy.Array.sin", "ivy.Container.sin", "ivy.sin", "sinh", "ivy.Array.sinh", "ivy.Container.sinh", "ivy.sinh", "sqrt", "ivy.Array.sqrt", "ivy.Container.sqrt", "ivy.sqrt", "square", "ivy.Array.square", "ivy.Container.square", "ivy.square", "subtract", "ivy.Container.static_subtract", "ivy.Array.subtract", "ivy.Container.subtract", "ivy.subtract", "tan", "ivy.Container.static_tan", "ivy.Array.tan", "ivy.Container.tan", "ivy.tan", "tanh", "ivy.Container.static_tanh", "ivy.Array.tanh", "ivy.Container.tanh", "ivy.tanh", "trunc", "ivy.Array.trunc", "ivy.Container.trunc", "ivy.trunc", "General", "all_equal", "ivy.Array.all_equal", "ivy.Container.all_equal", "ivy.all_equal", "ivy.Container.static_all_equal", "arg_info", "arg_names", "array_equal", "arrays_equal", "assert_supports_inplace", "cache_fn", "clip_matrix_norm", "clip_vector_norm", "ivy.Container.clip_vector_norm", "ivy.clip_vector_norm", "container_types", "copy_array", "cumprod", "cumsum", "current_backend_str", "default", "einops_rearrange", "einops_reduce", "einops_repeat", "exists", "floormod", "fourier_encode", "gather", "gather_nd", "ivy.Array.gather_nd", "ivy.Container.gather_nd", "ivy.gather_nd", "ivy.Container.static_gather_nd", "get_all_arrays_in_memory", "get_min_base", "get_min_denominator", "get_num_dims", "get_referrers_recursive", "has_nans", "indices_where", "inplace_arrays_supported", "inplace_decrement", "inplace_increment", "inplace_update", "inplace_variables_supported", "is_array", "is_ivy_array", "is_ivy_container", "is_native_array", "match_kwargs", "multiprocessing", "num_arrays_in_memory", "one_hot", "print_all_arrays_in_memory", "queue_timeout", "scatter_flat", "scatter_nd", "set_min_base", "set_min_denominator", "set_queue_timeout", "set_tmp_dir", "shape", "shape_to_tuple", "stable_divide", "stable_pow", "supports_inplace", "tmp_dir", "to_list", "to_numpy", "to_scalar", "try_else_none", "unstack", "value_is_nan", "Gradients", "&lt;no title&gt;", "adam_step", "adam_update", "ivy.Container.adam_update", "ivy.adam_update", "ivy.Container.static_adam_update", "execute_with_gradients", "gradient_descent_update", "ivy.Container.gradient_descent_update", "ivy.gradient_descent_update", "ivy.Container.static_gradient_descent_update", "is_variable", "lamb_update", "ivy.Container.lamb_update", "ivy.lamb_update", "ivy.Container.static_lamb_update", "lars_update", "ivy.Container.lars_update", "ivy.lars_update", "ivy.Container.static_lars_update", "optimizer_update", "ivy.Container.optimizer_update", "ivy.optimizer_update", "ivy.Container.static_optimizer_update", "set_with_grads", "stop_gradient", "unset_with_grads", "variable", "variable_data", "with_grads", "Layers", "conv1d", "conv1d_transpose", "conv2d", "conv2d_transpose", "conv3d", "conv3d_transpose", "depthwise_conv2d", "dropout", "linear", "lstm_update", "multi_head_attention", "scaled_dot_product_attention", "Linear algebra", "cholesky", "ivy.Array.cholesky", "ivy.cholesky", "cross", "ivy.Array.cross", "ivy.cross", "det", "ivy.Array.det", "ivy.det", "diagonal", "ivy.Array.diagonal", "ivy.diagonal", "eigh", "ivy.Array.eigh", "ivy.eigh", "eigvalsh", "ivy.Array.eigvalsh", "ivy.eigvalsh", "inv", "ivy.Array.inv", "ivy.inv", "matmul", "ivy.Array.matmul", "ivy.Container.matmul", "ivy.matmul", "matrix_norm", "ivy.Array.matrix_norm", "ivy.matrix_norm", "matrix_power", "matrix_rank", "ivy.Array.matrix_rank", "ivy.matrix_rank", "matrix_transpose", "ivy.Array.matrix_transpose", "ivy.matrix_transpose", "outer", "ivy.Array.outer", "ivy.outer", "pinv", "ivy.Array.pinv", "ivy.pinv", "qr", "ivy.Array.qr", "ivy.qr", "slogdet", "solve", "ivy.Array.solve", "ivy.solve", "svd", "ivy.Array.svd", "ivy.svd", "svdvals", "ivy.Array.svdvals", "ivy.svdvals", "tensordot", "ivy.Array.tensordot", "ivy.tensordot", "trace", "ivy.Array.trace", "ivy.trace", "vecdot", "ivy.Array.vecdot", "ivy.vecdot", "vector_norm", "ivy.Array.vector_norm", "ivy.vector_norm", "vector_to_skew_symmetric_matrix", "ivy.Array.vector_to_skew_symmetric_matrix", "ivy.vector_to_skew_symmetric_matrix", "Losses", "binary_cross_entropy", "ivy.Array.binary_cross_entropy", "ivy.Container.binary_cross_entropy", "ivy.binary_cross_entropy", "ivy.Container.static_binary_cross_entropy", "cross_entropy", "ivy.Array.cross_entropy", "ivy.Container.cross_entropy", "ivy.cross_entropy", "ivy.Container.static_cross_entropy", "sparse_cross_entropy", "ivy.Array.sparse_cross_entropy", "ivy.Container.sparse_cross_entropy", "ivy.sparse_cross_entropy", "ivy.Container.static_sparse_cross_entropy", "Manipulation", "clip", "ivy.Array.clip", "ivy.Container.clip", "ivy.clip", "ivy.Container.static_clip", "concat", "ivy.Array.concat", "ivy.Container.concat", "ivy.concat", "constant_pad", "ivy.Array.constant_pad", "ivy.Container.constant_pad", "ivy.constant_pad", "expand_dims", "ivy.Array.expand_dims", "ivy.Container.expand_dims", "ivy.expand_dims", "flip", "ivy.Array.flip", "ivy.Container.flip", "ivy.flip", "permute_dims", "ivy.Array.permute_dims", "ivy.Container.permute_dims", "ivy.permute_dims", "repeat", "ivy.Array.repeat", "ivy.Container.repeat", "ivy.repeat", "reshape", "ivy.Array.reshape", "ivy.Container.reshape", "ivy.reshape", "roll", "ivy.Array.roll", "ivy.Container.roll", "ivy.roll", "ivy.Container.static_roll", "split", "squeeze", "ivy.Array.squeeze", "ivy.Container.squeeze", "ivy.squeeze", "stack", "ivy.Array.stack", "ivy.Container.stack", "ivy.stack", "swapaxes", "ivy.Array.swapaxes", "ivy.Container.swapaxes", "ivy.swapaxes", "tile", "ivy.Array.tile", "ivy.Container.tile", "ivy.tile", "zero_pad", "ivy.Array.zero_pad", "ivy.Container.zero_pad", "ivy.zero_pad", "Meta", "fomaml_step", "maml_step", "reptile_step", "Nest", "all_nested_indices", "copy_nest", "index_nest", "insert_into_nest_at_index", "insert_into_nest_at_indices", "map", "map_nest_at_index", "map_nest_at_indices", "multi_index_nest", "nested_any", "nested_indices_where", "nested_map", "nested_multi_map", "prune_nest_at_index", "prune_nest_at_indices", "set_nest_at_index", "set_nest_at_indices", "Norms", "layer_norm", "ivy.Array.layer_norm", "ivy.Container.layer_norm", "ivy.layer_norm", "Random", "multinomial", "randint", "ivy.randint", "ivy.Container.static_randint", "random_normal", "random_uniform", "ivy.Container.random_uniform", "ivy.random_uniform", "ivy.Container.static_random_uniform", "seed", "shuffle", "Searching", "argmax", "argmin", "nonzero", "where", "Set", "unique_all", "unique_counts", "unique_inverse", "unique_values", "Sorting", "argsort", "ivy.Array.argsort", "ivy.Container.argsort", "ivy.argsort", "ivy.Container.static_argsort", "sort", "ivy.Array.sort", "ivy.Container.sort", "ivy.sort", "ivy.Container.static_sort", "Statistical", "einsum", "ivy.Array.einsum", "ivy.Container.einsum", "ivy.einsum", "max", "ivy.Array.max", "ivy.Container.max", "ivy.max", "mean", "ivy.Array.mean", "ivy.Container.mean", "ivy.mean", "min", "ivy.Array.min", "ivy.Container.min", "ivy.min", "prod", "ivy.Array.prod", "ivy.Container.prod", "ivy.prod", "std", "ivy.Array.std", "ivy.Container.std", "ivy.std", "sum", "ivy.Array.sum", "ivy.Container.sum", "ivy.sum", "var", "ivy.Array.var", "ivy.Container.var", "ivy.var", "Utility", "all", "ivy.Array.all", "ivy.Container.all", "ivy.all", "any", "ivy.Array.any", "ivy.Container.any", "ivy.any", "Contents", "&lt;no title&gt;", "&lt;no title&gt;", "Inspection", "add_array_specs", "fn_array_spec", "Roadmap", "Activations", "GEGLU", "GELU", "Converters", "to_ivy_module", "Initializers", "&lt;no title&gt;", "FirstLayerSiren", "GlorotUniform", "&lt;no title&gt;", "Ones", "Siren", "&lt;no title&gt;", "Zeros", "Layers", "Conv1D", "Conv1DTranspose", "Conv2D", "Conv2DTranspose", "Conv3D", "Conv3DTranspose", "DepthwiseConv2D", "Dropout", "LSTM", "Linear", "MultiHeadAttention", "Module", "Module", "Norms", "LayerNorm", "Optimizers", "Adam", "LAMB", "LARS", "Optimizer", "SGD", "Sequential", "Sequential", "&lt;no title&gt;", "Verbosity", "cprint"], "terms": {"class": [0, 1, 2, 7, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 165, 171, 176, 177, 178, 179, 180, 181, 182, 183, 189, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 349, 350, 353, 354, 356, 360, 361, 362, 363, 365, 367, 368, 370, 371, 372, 382, 383, 384, 425, 448, 462, 464, 465, 466, 467, 468, 469, 471, 472, 474, 475, 476, 477, 749, 756, 793, 799, 818, 823, 852, 1017, 1019, 1029, 1052, 1055, 1115, 1122, 1123, 1124, 1125, 1126, 1127, 1129, 1130, 1132, 1133, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159], "ivi": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 348, 349, 350, 351, 353, 355, 357, 358, 359, 361, 362, 363, 364, 365, 366, 382, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 429, 430, 431, 432, 433, 434, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 464, 465, 466, 467, 468, 469, 471, 472, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 517, 521, 525, 530, 534, 538, 542, 546, 550, 554, 558, 562, 566, 570, 574, 578, 582, 586, 591, 595, 599, 603, 607, 611, 615, 619, 623, 627, 631, 635, 639, 643, 647, 651, 655, 659, 663, 667, 671, 675, 679, 680, 681, 686, 690, 694, 698, 702, 706, 710, 714, 718, 722, 726, 730, 735, 740, 745, 749, 750, 755, 756, 757, 758, 759, 760, 761, 762, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 825, 826, 830, 831, 835, 836, 840, 844, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 871, 874, 877, 880, 883, 886, 889, 893, 896, 897, 900, 903, 906, 909, 912, 913, 916, 919, 922, 925, 928, 931, 934, 937, 938, 943, 948, 953, 954, 959, 963, 967, 971, 975, 979, 983, 987, 992, 993, 997, 1001, 1005, 1009, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1040, 1041, 1042, 1045, 1046, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1068, 1073, 1074, 1078, 1082, 1086, 1090, 1094, 1098, 1102, 1106, 1107, 1111, 1115, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1129, 1130, 1132, 1133, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1161, 1162], "arrai": [0, 1, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 163, 178, 179, 180, 181, 182, 183, 188, 191, 208, 209, 210, 225, 227, 264, 276, 277, 280, 281, 284, 290, 292, 296, 297, 302, 303, 310, 311, 314, 315, 316, 317, 328, 329, 332, 333, 347, 348, 349, 351, 352, 353, 354, 356, 357, 358, 359, 361, 362, 363, 364, 366, 367, 368, 370, 371, 372, 384, 385, 393, 395, 396, 397, 398, 399, 400, 401, 402, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 431, 432, 433, 434, 436, 437, 438, 443, 445, 448, 450, 451, 453, 457, 462, 481, 482, 483, 484, 487, 488, 489, 490, 491, 492, 493, 494, 496, 500, 502, 506, 507, 512, 513, 516, 517, 520, 521, 524, 525, 527, 528, 529, 530, 533, 534, 537, 538, 541, 542, 545, 546, 549, 550, 553, 554, 557, 558, 561, 562, 565, 566, 569, 570, 573, 574, 576, 577, 578, 581, 582, 585, 586, 589, 591, 594, 595, 598, 599, 602, 603, 606, 607, 609, 610, 611, 614, 615, 618, 619, 622, 623, 626, 627, 630, 631, 634, 635, 638, 639, 642, 643, 646, 647, 650, 651, 654, 655, 658, 659, 662, 663, 666, 667, 670, 671, 674, 675, 678, 679, 680, 681, 684, 686, 689, 690, 693, 694, 697, 698, 701, 702, 705, 706, 709, 710, 713, 714, 717, 718, 721, 722, 725, 726, 729, 730, 734, 735, 736, 738, 739, 740, 741, 743, 744, 745, 748, 749, 750, 752, 753, 754, 757, 758, 759, 761, 762, 764, 766, 767, 768, 771, 772, 773, 774, 775, 776, 777, 778, 780, 781, 782, 783, 786, 788, 789, 790, 791, 792, 793, 795, 796, 798, 801, 802, 803, 805, 806, 811, 812, 815, 817, 818, 819, 821, 822, 823, 825, 826, 828, 831, 833, 835, 836, 838, 840, 842, 844, 846, 849, 851, 852, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 870, 871, 873, 874, 876, 877, 879, 880, 882, 883, 885, 886, 888, 889, 892, 893, 895, 896, 897, 899, 900, 902, 903, 905, 906, 908, 909, 911, 912, 913, 915, 916, 918, 919, 921, 922, 924, 925, 927, 928, 930, 931, 933, 934, 936, 937, 938, 941, 943, 946, 948, 951, 953, 954, 956, 957, 958, 959, 962, 963, 966, 967, 970, 971, 974, 975, 978, 979, 982, 983, 986, 987, 989, 990, 991, 992, 993, 996, 997, 1000, 1001, 1004, 1005, 1008, 1009, 1012, 1013, 1014, 1015, 1016, 1017, 1019, 1029, 1030, 1035, 1036, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1048, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1066, 1068, 1071, 1073, 1074, 1077, 1078, 1081, 1082, 1085, 1086, 1089, 1090, 1093, 1094, 1097, 1098, 1101, 1102, 1105, 1106, 1107, 1110, 1111, 1114, 1115, 1118, 1120, 1136, 1144, 1147], "arraywithactiv": 0, "sourc": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 350, 360, 361, 385, 386, 387, 388, 389, 390, 391, 392, 393, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 464, 465, 466, 467, 468, 469, 471, 472, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1118, 1119, 1120, 1122, 1123, 1124, 1125, 1126, 1127, 1129, 1130, 1132, 1133, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1161, 1162], "base": [0, 1, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 159, 176, 177, 179, 180, 181, 182, 183, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 348, 356, 359, 361, 367, 383, 406, 416, 425, 462, 464, 465, 466, 467, 468, 469, 471, 472, 474, 475, 476, 477, 512, 599, 643, 646, 647, 650, 651, 654, 655, 658, 698, 701, 749, 784, 807, 814, 823, 1057, 1058, 1059, 1061, 1073, 1074, 1077, 1101, 1122, 1123, 1124, 1127, 1129, 1130, 1132, 1133, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159], "abc": [0, 1, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 178, 179, 369, 462, 471, 477, 749, 774, 1148, 1149, 1152, 1156], "activ": [1, 2, 7, 157, 158, 177, 183, 189, 344, 345, 347, 348, 350, 352, 371, 396, 397, 398, 399, 400, 401, 402, 1115, 1123, 1124], "support": [1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 117, 118, 119, 120, 122, 124, 126, 128, 130, 132, 134, 136, 138, 140, 142, 144, 146, 148, 150, 152, 154, 156, 158, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 173, 174, 175, 177, 178, 179, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 309, 311, 313, 315, 317, 319, 321, 323, 325, 327, 329, 331, 333, 335, 337, 339, 341, 343, 345, 353, 354, 357, 359, 360, 361, 362, 363, 364, 365, 366, 367, 369, 370, 372, 386, 387, 388, 389, 390, 391, 392, 393, 396, 397, 398, 399, 400, 401, 402, 404, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1014, 1015, 1016, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1036, 1037, 1038, 1039, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1053, 1054, 1055, 1056, 1058, 1059, 1060, 1061, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1119, 1120, 1121, 1123, 1124, 1126, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1149, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1159, 1160, 1162], "framework": [1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 122, 124, 126, 128, 130, 132, 134, 136, 138, 140, 142, 144, 146, 148, 150, 152, 154, 156, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 173, 174, 175, 177, 178, 179, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 309, 311, 313, 315, 317, 319, 321, 323, 325, 327, 329, 331, 333, 335, 337, 339, 341, 343, 345, 351, 355, 357, 358, 359, 360, 363, 365, 366, 369, 372, 383, 384, 386, 387, 388, 389, 390, 391, 392, 393, 396, 397, 398, 399, 400, 401, 402, 403, 404, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1014, 1015, 1016, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1036, 1037, 1038, 1039, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1053, 1054, 1055, 1056, 1058, 1059, 1060, 1061, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1119, 1120, 1121, 1123, 1124, 1125, 1126, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1149, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1159, 1160, 1162], "array_method": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 434, 435, 513, 514, 518, 521, 522, 526, 530, 531, 534, 535, 539, 542, 543, 546, 547, 550, 551, 554, 555, 558, 559, 562, 563, 566, 567, 570, 571, 574, 575, 579, 583, 587, 592, 595, 596, 600, 603, 604, 608, 611, 612, 616, 619, 620, 623, 624, 627, 628, 631, 632, 635, 636, 639, 640, 643, 644, 647, 648, 651, 652, 655, 656, 659, 660, 663, 664, 667, 668, 671, 672, 675, 676, 681, 682, 686, 687, 690, 691, 694, 695, 698, 699, 702, 703, 706, 707, 710, 711, 714, 715, 718, 719, 722, 723, 726, 727, 730, 732, 737, 742, 745, 746, 750, 751, 778, 779, 868, 869, 871, 872, 875, 877, 878, 880, 881, 883, 884, 887, 888, 889, 890, 893, 894, 897, 898, 900, 901, 903, 904, 906, 907, 909, 910, 912, 913, 914, 917, 918, 919, 920, 922, 923, 925, 926, 928, 929, 931, 932, 934, 935, 938, 939, 943, 944, 948, 949, 954, 955, 959, 960, 963, 964, 967, 968, 971, 972, 975, 976, 979, 980, 983, 984, 987, 988, 993, 994, 997, 998, 1001, 1002, 1005, 1006, 1009, 1010, 1036, 1037, 1063, 1064, 1068, 1069, 1074, 1075, 1078, 1079, 1082, 1083, 1086, 1087, 1090, 1091, 1094, 1095, 1099, 1102, 1103, 1107, 1108, 1111, 1112], "ab": [2, 127, 128, 183, 314, 315, 356, 359, 512, 698, 701, 867, 931, 933, 1115], "self": [2, 3, 4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 178, 179, 183, 184, 185, 186, 187, 188, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 360, 361, 367, 369, 370, 371, 372, 434, 435, 436, 462, 513, 514, 515, 518, 519, 520, 521, 522, 523, 526, 527, 528, 530, 531, 532, 534, 535, 536, 539, 540, 541, 542, 543, 544, 546, 547, 548, 550, 551, 552, 554, 555, 556, 558, 559, 560, 562, 563, 564, 566, 567, 568, 570, 571, 572, 574, 575, 576, 579, 580, 581, 583, 584, 585, 587, 588, 589, 592, 593, 594, 595, 596, 597, 600, 601, 602, 603, 604, 605, 608, 609, 610, 611, 612, 613, 616, 617, 618, 619, 620, 621, 623, 624, 625, 627, 628, 629, 631, 632, 633, 635, 636, 637, 639, 640, 641, 643, 644, 645, 647, 648, 649, 651, 652, 653, 655, 656, 657, 659, 660, 661, 663, 664, 665, 667, 668, 669, 671, 672, 673, 675, 676, 677, 681, 682, 683, 686, 687, 688, 690, 691, 692, 694, 695, 696, 698, 699, 700, 702, 703, 704, 706, 707, 708, 710, 711, 712, 714, 715, 716, 718, 719, 720, 722, 723, 724, 726, 727, 728, 730, 732, 733, 737, 738, 739, 742, 743, 744, 745, 746, 747, 750, 751, 752, 762, 763, 778, 779, 780, 826, 827, 831, 832, 836, 837, 840, 841, 844, 845, 868, 869, 871, 872, 875, 877, 878, 880, 881, 883, 884, 887, 888, 889, 890, 891, 893, 894, 897, 898, 900, 901, 903, 904, 906, 907, 909, 910, 912, 913, 914, 917, 918, 919, 920, 922, 923, 925, 926, 928, 929, 931, 932, 934, 935, 938, 939, 940, 943, 944, 945, 948, 949, 950, 954, 955, 956, 959, 960, 961, 963, 964, 965, 967, 968, 969, 971, 972, 973, 975, 976, 977, 979, 980, 981, 983, 984, 985, 987, 988, 989, 993, 994, 995, 997, 998, 999, 1001, 1002, 1003, 1005, 1006, 1007, 1009, 1010, 1011, 1036, 1037, 1038, 1046, 1047, 1063, 1064, 1065, 1068, 1069, 1070, 1074, 1075, 1076, 1078, 1079, 1080, 1082, 1083, 1084, 1086, 1087, 1088, 1090, 1091, 1092, 1094, 1095, 1096, 1099, 1100, 1101, 1102, 1103, 1104, 1107, 1108, 1109, 1111, 1112, 1113, 1115, 1152, 1156], "out": [2, 3, 4, 5, 6, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 127, 128, 129, 130, 137, 138, 139, 140, 141, 142, 143, 144, 151, 152, 153, 154, 155, 156, 173, 174, 175, 178, 179, 180, 181, 183, 184, 185, 186, 188, 190, 192, 193, 194, 195, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 230, 231, 232, 233, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 276, 278, 279, 281, 282, 283, 284, 288, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 314, 315, 316, 317, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 338, 339, 340, 341, 342, 343, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 366, 367, 369, 370, 371, 372, 383, 395, 397, 398, 399, 400, 401, 402, 406, 407, 409, 410, 411, 413, 414, 419, 420, 421, 422, 423, 424, 425, 431, 433, 462, 507, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 761, 762, 763, 764, 766, 767, 768, 771, 772, 773, 775, 777, 778, 779, 780, 781, 782, 789, 802, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1051, 1052, 1053, 1054, 1056, 1057, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1136, 1144], "none": [2, 3, 4, 5, 6, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 127, 128, 129, 130, 137, 138, 139, 140, 141, 142, 143, 144, 151, 152, 153, 154, 155, 156, 159, 161, 164, 171, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 190, 191, 192, 193, 194, 195, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 352, 354, 357, 361, 362, 363, 364, 365, 367, 369, 371, 372, 395, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 413, 414, 415, 416, 418, 419, 420, 421, 422, 423, 424, 425, 431, 433, 434, 436, 438, 440, 441, 442, 445, 448, 462, 471, 472, 480, 481, 504, 505, 506, 507, 510, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 752, 754, 755, 761, 762, 763, 764, 766, 767, 768, 770, 771, 772, 773, 774, 775, 777, 778, 779, 780, 781, 782, 787, 789, 790, 794, 800, 802, 805, 806, 807, 808, 813, 814, 820, 823, 826, 827, 828, 829, 831, 832, 833, 834, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1023, 1028, 1029, 1030, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1056, 1057, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1125, 1126, 1127, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159], "instanc": [2, 3, 6, 7, 9, 24, 25, 27, 46, 48, 87, 105, 106, 116, 117, 118, 119, 120, 123, 124, 127, 128, 129, 130, 141, 142, 157, 158, 178, 179, 180, 181, 183, 188, 189, 191, 208, 209, 210, 225, 227, 264, 302, 303, 310, 311, 314, 315, 316, 317, 328, 329, 344, 345, 349, 353, 354, 356, 357, 360, 362, 364, 365, 370, 371, 372, 385, 393, 395, 397, 398, 399, 400, 401, 402, 406, 417, 425, 434, 435, 436, 437, 462, 471, 503, 512, 513, 514, 525, 526, 527, 530, 533, 541, 546, 550, 553, 570, 573, 574, 575, 576, 577, 582, 594, 607, 608, 609, 611, 618, 619, 622, 659, 679, 680, 686, 689, 690, 693, 706, 709, 722, 725, 726, 729, 735, 737, 738, 740, 742, 743, 744, 749, 750, 751, 752, 766, 777, 778, 779, 780, 793, 817, 819, 854, 857, 860, 866, 867, 868, 870, 871, 873, 874, 937, 938, 941, 953, 954, 955, 956, 967, 970, 971, 974, 979, 982, 987, 988, 989, 990, 992, 1001, 1004, 1035, 1036, 1039, 1040, 1045, 1046, 1048, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1062, 1063, 1066, 1073, 1074, 1077, 1078, 1081, 1101, 1106, 1107, 1110, 1125, 1126], "variant": [2, 3, 6, 9, 24, 25, 27, 46, 48, 87, 105, 106, 123, 124, 127, 128, 129, 130, 141, 142, 183, 188, 191, 208, 209, 210, 225, 227, 264, 276, 277, 280, 281, 284, 290, 292, 296, 297, 302, 303, 310, 311, 314, 315, 316, 317, 328, 329, 332, 333, 353, 354, 434, 435, 436, 438, 513, 514, 526, 527, 529, 541, 546, 574, 575, 576, 608, 609, 611, 659, 736, 737, 738, 741, 742, 743, 744, 750, 751, 752, 754, 778, 779, 780, 782, 954, 955, 956, 958, 987, 988, 989, 991, 1042, 1044], "thi": [2, 3, 6, 9, 24, 25, 27, 46, 48, 87, 105, 106, 123, 124, 127, 128, 129, 130, 141, 142, 173, 174, 175, 178, 179, 180, 181, 182, 183, 188, 191, 208, 209, 210, 225, 227, 264, 276, 277, 280, 281, 284, 290, 292, 296, 297, 302, 303, 310, 311, 314, 315, 316, 317, 328, 329, 332, 333, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 383, 384, 406, 407, 408, 417, 418, 425, 434, 435, 436, 437, 438, 462, 486, 490, 494, 501, 506, 511, 512, 513, 514, 516, 525, 526, 527, 529, 530, 533, 541, 546, 550, 553, 566, 569, 570, 573, 574, 575, 576, 577, 582, 603, 606, 607, 608, 609, 611, 659, 667, 670, 671, 674, 690, 693, 702, 705, 706, 709, 722, 725, 726, 729, 735, 736, 737, 738, 740, 741, 742, 743, 744, 749, 750, 751, 752, 754, 776, 777, 778, 779, 780, 782, 793, 804, 809, 823, 826, 828, 831, 833, 835, 836, 838, 840, 842, 844, 846, 852, 854, 857, 863, 866, 867, 874, 876, 893, 895, 912, 953, 954, 955, 956, 958, 967, 970, 971, 974, 983, 986, 987, 988, 989, 990, 991, 997, 1000, 1017, 1023, 1029, 1030, 1035, 1036, 1039, 1042, 1044, 1052, 1053, 1057, 1058, 1059, 1061, 1062, 1063, 1066, 1073, 1078, 1081, 1082, 1085, 1094, 1097, 1102, 1105, 1106, 1107, 1110, 1115, 1121, 1148, 1149, 1152, 1153, 1154, 1155, 1156, 1157], "simpli": [2, 3, 6, 9, 24, 25, 27, 46, 48, 87, 105, 106, 123, 124, 127, 128, 129, 130, 141, 142, 178, 179, 183, 188, 191, 208, 209, 210, 225, 227, 264, 276, 277, 280, 281, 284, 290, 292, 296, 297, 302, 303, 310, 311, 314, 315, 316, 317, 328, 329, 332, 333, 348, 353, 354, 356, 357, 360, 361, 363, 364, 365, 367, 371, 372, 434, 435, 436, 438, 512, 513, 514, 526, 527, 529, 541, 546, 574, 575, 576, 603, 606, 608, 609, 611, 659, 736, 737, 738, 741, 742, 743, 744, 750, 751, 752, 754, 778, 779, 780, 782, 954, 955, 956, 958, 987, 988, 989, 991, 1042, 1044], "wrap": [2, 3, 6, 9, 24, 25, 27, 46, 48, 87, 105, 106, 116, 123, 124, 127, 128, 129, 130, 141, 142, 158, 178, 179, 180, 181, 182, 183, 188, 191, 208, 209, 210, 225, 227, 264, 276, 277, 280, 281, 284, 290, 292, 296, 297, 302, 303, 310, 311, 314, 315, 316, 317, 328, 329, 332, 333, 345, 351, 353, 356, 357, 358, 360, 361, 362, 363, 364, 365, 367, 369, 372, 384, 385, 393, 434, 435, 436, 438, 513, 514, 526, 527, 529, 541, 546, 574, 575, 576, 608, 609, 611, 659, 736, 737, 738, 741, 742, 743, 744, 749, 750, 751, 752, 754, 760, 778, 779, 780, 782, 823, 852, 954, 955, 956, 958, 987, 988, 989, 991, 1042, 1044], "function": [2, 3, 6, 7, 9, 24, 25, 27, 46, 48, 87, 105, 106, 116, 123, 124, 127, 128, 129, 130, 141, 142, 157, 158, 159, 163, 164, 165, 173, 178, 179, 183, 188, 189, 191, 208, 209, 210, 225, 227, 264, 276, 277, 280, 281, 284, 290, 292, 296, 297, 302, 303, 310, 311, 314, 315, 316, 317, 328, 329, 332, 333, 344, 345, 348, 350, 351, 352, 353, 354, 355, 356, 358, 360, 364, 366, 368, 369, 370, 371, 382, 383, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 464, 465, 466, 467, 468, 469, 471, 472, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 516, 517, 520, 521, 524, 525, 526, 527, 528, 529, 530, 533, 534, 537, 538, 541, 542, 545, 546, 549, 550, 553, 554, 557, 558, 561, 562, 565, 566, 569, 570, 573, 574, 575, 576, 577, 578, 581, 582, 585, 586, 589, 591, 594, 595, 598, 599, 602, 603, 606, 607, 608, 609, 610, 611, 614, 615, 618, 619, 622, 623, 626, 627, 630, 631, 634, 635, 638, 639, 642, 643, 646, 647, 650, 651, 654, 655, 658, 659, 662, 663, 666, 667, 670, 671, 674, 675, 678, 679, 680, 681, 684, 686, 689, 690, 693, 694, 697, 698, 701, 702, 705, 706, 709, 710, 713, 714, 717, 718, 721, 722, 725, 726, 729, 730, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 825, 826, 828, 830, 831, 833, 835, 836, 838, 840, 842, 844, 846, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 870, 871, 873, 874, 876, 877, 879, 880, 882, 883, 885, 886, 888, 889, 892, 893, 895, 896, 897, 899, 900, 902, 903, 905, 906, 908, 909, 911, 912, 913, 915, 916, 918, 919, 921, 922, 924, 925, 927, 928, 930, 931, 933, 934, 936, 937, 938, 941, 943, 946, 948, 951, 953, 954, 955, 956, 957, 958, 959, 962, 963, 966, 967, 970, 971, 974, 975, 978, 979, 982, 983, 986, 987, 988, 989, 990, 991, 992, 993, 996, 997, 1000, 1001, 1004, 1005, 1008, 1009, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1048, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1066, 1068, 1071, 1073, 1074, 1077, 1078, 1081, 1082, 1085, 1086, 1089, 1090, 1093, 1094, 1097, 1098, 1101, 1102, 1105, 1106, 1107, 1110, 1111, 1114, 1115, 1118, 1120, 1122, 1123, 1124, 1152, 1155, 1157], "so": [2, 3, 6, 9, 24, 25, 27, 46, 48, 87, 105, 106, 116, 119, 120, 123, 124, 127, 128, 129, 130, 141, 142, 173, 174, 178, 179, 183, 188, 191, 208, 209, 210, 225, 227, 264, 276, 277, 280, 281, 284, 290, 292, 296, 297, 302, 303, 310, 311, 314, 315, 316, 317, 328, 329, 332, 333, 347, 348, 352, 353, 354, 356, 359, 360, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 384, 385, 393, 434, 435, 436, 438, 513, 514, 526, 527, 529, 541, 546, 574, 575, 576, 608, 609, 611, 659, 736, 737, 738, 741, 742, 743, 744, 750, 751, 752, 754, 778, 779, 780, 782, 954, 955, 956, 958, 987, 988, 989, 991, 1017, 1018, 1028, 1042, 1044, 1115], "docstr": [2, 3, 6, 9, 24, 25, 27, 46, 48, 87, 105, 106, 123, 124, 127, 128, 129, 130, 141, 142, 183, 188, 191, 208, 209, 210, 225, 227, 264, 276, 277, 280, 281, 284, 290, 292, 296, 297, 302, 303, 310, 311, 314, 315, 316, 317, 328, 329, 332, 333, 349, 350, 351, 352, 357, 361, 365, 406, 417, 425, 434, 435, 436, 437, 438, 512, 513, 514, 525, 526, 527, 529, 530, 533, 541, 546, 550, 553, 570, 573, 574, 575, 576, 577, 582, 607, 608, 609, 611, 659, 690, 693, 706, 709, 722, 725, 726, 729, 735, 736, 737, 738, 740, 741, 742, 743, 744, 750, 751, 752, 754, 778, 779, 780, 782, 867, 874, 953, 954, 955, 956, 958, 967, 970, 971, 974, 987, 988, 989, 990, 991, 1042, 1044, 1057, 1058, 1059, 1062, 1063, 1066, 1073, 1078, 1081, 1106, 1107, 1110], "also": [2, 3, 6, 9, 24, 25, 27, 46, 48, 87, 105, 106, 116, 117, 118, 119, 120, 123, 124, 127, 128, 129, 130, 141, 142, 173, 174, 178, 179, 183, 188, 191, 208, 209, 210, 225, 227, 264, 276, 277, 280, 281, 284, 290, 292, 296, 297, 302, 303, 310, 311, 314, 315, 316, 317, 328, 329, 332, 333, 346, 347, 348, 351, 352, 353, 354, 356, 357, 359, 360, 361, 362, 363, 364, 365, 367, 369, 370, 371, 372, 383, 384, 406, 417, 425, 434, 435, 436, 437, 438, 512, 513, 514, 525, 526, 527, 529, 530, 533, 541, 546, 550, 553, 570, 573, 574, 575, 576, 577, 582, 607, 608, 609, 611, 659, 690, 693, 706, 709, 722, 725, 726, 729, 735, 736, 737, 738, 740, 741, 742, 743, 744, 749, 750, 751, 752, 754, 777, 778, 779, 780, 782, 793, 823, 826, 828, 854, 857, 863, 866, 867, 874, 953, 954, 955, 956, 958, 967, 970, 971, 974, 987, 988, 989, 990, 991, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1027, 1028, 1029, 1035, 1036, 1039, 1042, 1044, 1057, 1058, 1059, 1062, 1063, 1066, 1073, 1078, 1081, 1106, 1107, 1110, 1136, 1146], "appli": [2, 3, 6, 9, 24, 25, 27, 46, 48, 87, 105, 106, 116, 119, 120, 123, 124, 127, 128, 129, 130, 141, 142, 178, 179, 183, 188, 191, 208, 209, 210, 225, 227, 264, 276, 277, 280, 281, 284, 290, 292, 296, 297, 302, 303, 310, 311, 314, 315, 316, 317, 328, 329, 332, 333, 347, 348, 349, 353, 354, 356, 357, 359, 361, 362, 363, 364, 365, 367, 369, 370, 371, 372, 382, 384, 395, 396, 397, 398, 399, 400, 401, 402, 425, 434, 435, 436, 438, 453, 513, 514, 526, 527, 529, 541, 546, 574, 575, 576, 608, 609, 611, 659, 736, 737, 738, 741, 742, 743, 744, 749, 750, 751, 752, 754, 771, 772, 773, 778, 779, 780, 782, 823, 836, 838, 840, 842, 854, 863, 865, 866, 867, 888, 897, 899, 906, 908, 937, 938, 941, 943, 946, 948, 951, 953, 954, 955, 956, 958, 987, 988, 989, 991, 997, 1000, 1013, 1014, 1015, 1017, 1023, 1026, 1029, 1030, 1035, 1036, 1039, 1042, 1044, 1115, 1122, 1123, 1124, 1150, 1151], "minim": [2, 3, 6, 9, 24, 25, 27, 46, 48, 87, 105, 106, 123, 124, 127, 128, 129, 130, 141, 142, 183, 188, 191, 208, 209, 210, 225, 227, 264, 276, 277, 280, 281, 284, 290, 292, 296, 297, 302, 303, 310, 311, 314, 315, 316, 317, 328, 329, 332, 333, 353, 364, 367, 434, 435, 436, 438, 513, 514, 526, 527, 529, 541, 546, 574, 575, 576, 608, 609, 611, 659, 736, 737, 738, 741, 742, 743, 744, 750, 751, 752, 754, 778, 779, 780, 782, 954, 955, 956, 958, 987, 988, 989, 991, 1042, 1044], "chang": [2, 3, 6, 9, 24, 25, 27, 46, 48, 87, 105, 106, 123, 124, 127, 128, 129, 130, 141, 142, 175, 183, 188, 191, 208, 209, 210, 225, 227, 264, 276, 277, 280, 281, 284, 290, 292, 296, 297, 302, 303, 310, 311, 314, 315, 316, 317, 328, 329, 332, 333, 347, 348, 349, 350, 353, 355, 356, 361, 367, 371, 384, 434, 435, 436, 438, 462, 513, 514, 526, 527, 529, 541, 546, 574, 575, 576, 608, 609, 611, 659, 736, 737, 738, 741, 742, 743, 744, 750, 751, 752, 754, 778, 779, 780, 782, 867, 871, 873, 953, 954, 955, 956, 958, 983, 986, 987, 988, 989, 991, 1017, 1019, 1029, 1042, 1044, 1115, 1121], "return": [2, 3, 4, 5, 6, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 123, 124, 127, 128, 129, 130, 137, 138, 139, 140, 141, 142, 143, 144, 151, 152, 153, 154, 155, 156, 159, 163, 164, 171, 178, 179, 180, 181, 182, 183, 184, 185, 186, 188, 190, 191, 192, 193, 194, 195, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 230, 231, 232, 233, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 310, 311, 314, 315, 316, 317, 318, 319, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 338, 339, 340, 341, 342, 343, 352, 353, 354, 356, 357, 359, 360, 361, 362, 363, 364, 365, 367, 369, 370, 371, 372, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 457, 461, 462, 471, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 752, 753, 754, 755, 757, 758, 759, 760, 761, 762, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 784, 785, 786, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 805, 806, 807, 808, 811, 812, 813, 814, 815, 817, 818, 819, 820, 821, 822, 823, 825, 826, 828, 829, 830, 831, 833, 834, 835, 836, 838, 839, 840, 842, 843, 844, 845, 846, 847, 849, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1023, 1027, 1028, 1029, 1030, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1118, 1120, 1125, 1126, 1136, 1145, 1146, 1152, 1156], "type": [2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 124, 127, 128, 129, 130, 137, 138, 139, 140, 141, 142, 143, 144, 151, 152, 153, 154, 155, 156, 157, 158, 159, 165, 171, 178, 179, 180, 181, 182, 183, 184, 185, 186, 188, 189, 190, 191, 192, 193, 194, 195, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 230, 231, 232, 233, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 311, 314, 315, 316, 317, 318, 319, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 338, 339, 340, 341, 342, 343, 344, 345, 347, 349, 351, 352, 353, 354, 359, 360, 361, 363, 364, 365, 367, 369, 370, 372, 385, 386, 387, 388, 389, 390, 391, 392, 393, 395, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 457, 461, 462, 478, 479, 480, 481, 482, 484, 494, 495, 496, 497, 498, 499, 500, 501, 503, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 752, 753, 754, 755, 757, 758, 760, 761, 762, 764, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 784, 785, 786, 788, 789, 791, 792, 793, 795, 796, 797, 798, 802, 805, 806, 807, 808, 811, 813, 814, 815, 817, 818, 819, 821, 822, 823, 825, 826, 828, 829, 831, 833, 834, 835, 836, 838, 839, 840, 842, 843, 844, 845, 846, 847, 849, 851, 854, 855, 857, 859, 860, 861, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1023, 1027, 1028, 1029, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147], "aco": [2, 127, 128, 183, 314, 315, 512, 521, 1115], "acosh": [2, 127, 128, 183, 314, 315, 425, 446, 447, 512, 520, 581, 585, 1115], "add": [2, 7, 127, 128, 157, 158, 178, 179, 180, 181, 183, 189, 276, 277, 314, 315, 316, 317, 344, 345, 347, 348, 349, 351, 352, 353, 357, 358, 360, 361, 365, 367, 369, 384, 512, 529, 659, 750, 754, 1035, 1036, 1039, 1115, 1121, 1150, 1151], "x2": [2, 6, 9, 15, 18, 20, 21, 22, 23, 32, 36, 40, 47, 49, 50, 56, 57, 62, 63, 65, 66, 67, 74, 76, 77, 81, 84, 92, 100, 107, 112, 127, 128, 129, 130, 137, 138, 178, 179, 183, 188, 191, 199, 202, 204, 205, 206, 207, 217, 219, 226, 229, 230, 237, 238, 243, 244, 246, 247, 248, 252, 254, 258, 261, 276, 277, 283, 288, 295, 299, 314, 315, 316, 317, 324, 325, 354, 365, 425, 457, 462, 500, 512, 525, 526, 527, 528, 529, 542, 543, 544, 545, 550, 551, 552, 553, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 586, 587, 588, 589, 590, 591, 592, 593, 594, 602, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 635, 636, 637, 638, 639, 640, 641, 642, 659, 660, 661, 662, 663, 664, 665, 666, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 690, 691, 692, 693, 698, 699, 700, 701, 702, 703, 704, 705, 730, 731, 732, 733, 734, 749, 750, 751, 752, 753, 754, 854, 859, 867, 871, 872, 873, 889, 890, 891, 892, 903, 904, 905, 913, 914, 915, 922, 923, 924, 928, 929, 930, 1052, 1056], "exampl": [2, 6, 7, 9, 24, 25, 27, 46, 48, 87, 105, 106, 123, 124, 127, 128, 129, 130, 141, 142, 157, 158, 159, 163, 164, 165, 171, 175, 180, 181, 183, 188, 189, 191, 208, 209, 210, 225, 227, 264, 276, 277, 280, 281, 284, 290, 292, 296, 297, 302, 303, 310, 311, 314, 315, 316, 317, 328, 329, 332, 333, 344, 345, 347, 348, 349, 351, 352, 353, 356, 357, 358, 359, 360, 361, 362, 363, 364, 367, 369, 370, 371, 372, 383, 384, 395, 397, 398, 399, 400, 401, 402, 403, 404, 406, 413, 414, 417, 419, 420, 423, 424, 425, 431, 434, 435, 436, 437, 438, 446, 447, 462, 481, 482, 484, 496, 497, 498, 499, 500, 503, 505, 507, 509, 510, 512, 525, 526, 527, 529, 530, 533, 541, 546, 549, 550, 553, 554, 557, 566, 569, 570, 573, 574, 575, 576, 577, 578, 582, 594, 599, 607, 608, 609, 611, 615, 618, 619, 622, 635, 638, 659, 679, 680, 686, 689, 690, 693, 706, 709, 722, 725, 726, 729, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 749, 750, 751, 752, 753, 754, 757, 758, 766, 767, 774, 777, 778, 779, 780, 781, 782, 785, 796, 811, 812, 817, 818, 819, 854, 855, 857, 859, 860, 861, 866, 867, 868, 870, 871, 873, 874, 877, 879, 886, 897, 899, 903, 905, 916, 922, 924, 925, 927, 937, 938, 941, 943, 946, 948, 951, 953, 954, 955, 956, 957, 958, 959, 962, 967, 970, 971, 974, 979, 982, 983, 986, 987, 988, 989, 990, 991, 992, 993, 996, 997, 1000, 1001, 1004, 1035, 1036, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1048, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1062, 1063, 1066, 1073, 1074, 1077, 1094, 1097, 1098, 1101, 1106, 1107, 1110, 1115], "x": [2, 6, 24, 25, 27, 46, 48, 87, 98, 105, 106, 116, 119, 120, 123, 124, 127, 128, 129, 130, 141, 142, 159, 163, 171, 178, 179, 180, 181, 183, 188, 208, 209, 210, 225, 227, 264, 274, 276, 278, 280, 281, 284, 290, 292, 293, 296, 297, 302, 303, 310, 311, 314, 315, 316, 317, 328, 329, 332, 333, 338, 339, 350, 352, 353, 354, 357, 358, 361, 364, 365, 367, 369, 370, 371, 372, 395, 396, 397, 398, 399, 400, 401, 402, 406, 408, 410, 412, 414, 417, 418, 420, 421, 422, 423, 424, 425, 431, 433, 434, 435, 436, 437, 438, 443, 462, 481, 482, 483, 484, 487, 488, 496, 500, 505, 507, 512, 513, 516, 517, 520, 521, 524, 525, 526, 527, 529, 530, 533, 534, 537, 538, 541, 542, 545, 546, 549, 550, 553, 554, 557, 570, 573, 574, 575, 576, 577, 578, 581, 582, 585, 594, 595, 598, 599, 603, 606, 607, 608, 609, 611, 615, 618, 619, 622, 623, 626, 627, 630, 631, 634, 635, 638, 643, 646, 647, 650, 651, 654, 655, 658, 659, 667, 670, 679, 680, 686, 689, 694, 697, 706, 709, 710, 713, 714, 717, 718, 721, 722, 725, 726, 729, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 748, 749, 757, 758, 759, 761, 762, 764, 766, 767, 768, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 785, 786, 788, 789, 791, 792, 793, 795, 796, 797, 798, 802, 811, 812, 815, 817, 818, 819, 821, 822, 823, 830, 835, 849, 851, 852, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 870, 871, 873, 874, 876, 877, 879, 880, 882, 883, 885, 886, 888, 893, 895, 896, 897, 899, 900, 902, 903, 905, 906, 908, 909, 911, 912, 916, 918, 919, 921, 922, 924, 925, 927, 931, 933, 937, 938, 941, 943, 946, 948, 951, 953, 954, 955, 956, 957, 958, 959, 962, 963, 966, 967, 970, 971, 974, 975, 978, 979, 982, 983, 986, 987, 988, 989, 990, 991, 992, 993, 996, 997, 998, 999, 1000, 1001, 1004, 1005, 1008, 1009, 1012, 1017, 1018, 1023, 1027, 1028, 1029, 1035, 1036, 1039, 1040, 1042, 1043, 1044, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1066, 1067, 1068, 1071, 1072, 1073, 1074, 1077, 1078, 1081, 1082, 1085, 1086, 1089, 1090, 1093, 1094, 1097, 1098, 1101, 1102, 1105, 1106, 1107, 1110, 1111, 1114, 1115, 1136, 1147], "1": [2, 6, 9, 11, 24, 25, 27, 32, 33, 35, 46, 48, 55, 87, 93, 94, 105, 106, 112, 123, 124, 127, 128, 129, 130, 137, 138, 139, 140, 141, 142, 143, 144, 151, 152, 159, 165, 171, 174, 175, 178, 179, 180, 181, 183, 188, 191, 193, 208, 209, 210, 216, 225, 227, 236, 260, 264, 269, 270, 276, 277, 278, 280, 281, 282, 284, 290, 291, 292, 293, 294, 296, 297, 302, 303, 310, 311, 314, 315, 316, 317, 326, 327, 328, 329, 330, 331, 332, 333, 338, 339, 350, 354, 357, 361, 364, 365, 366, 367, 369, 370, 371, 372, 384, 395, 397, 398, 399, 400, 402, 406, 407, 414, 415, 416, 417, 419, 420, 424, 425, 431, 434, 435, 436, 437, 438, 445, 462, 466, 469, 471, 476, 481, 482, 484, 486, 490, 494, 496, 499, 500, 507, 512, 517, 520, 521, 524, 525, 526, 527, 529, 530, 533, 541, 542, 545, 546, 550, 553, 554, 557, 566, 569, 570, 573, 574, 575, 576, 577, 578, 581, 582, 585, 594, 599, 603, 606, 607, 608, 609, 611, 615, 618, 619, 622, 635, 638, 643, 646, 647, 650, 651, 654, 655, 658, 659, 679, 680, 686, 689, 690, 693, 698, 701, 706, 709, 710, 713, 714, 717, 722, 725, 726, 729, 735, 736, 737, 738, 740, 741, 742, 743, 744, 749, 750, 751, 752, 753, 754, 757, 758, 766, 767, 774, 777, 778, 779, 780, 781, 782, 796, 802, 805, 806, 811, 812, 814, 817, 818, 819, 821, 854, 855, 856, 857, 858, 859, 860, 861, 862, 866, 867, 868, 870, 871, 872, 873, 874, 877, 878, 879, 886, 897, 899, 903, 905, 913, 915, 916, 922, 924, 925, 927, 928, 929, 930, 931, 933, 937, 938, 941, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 962, 967, 970, 971, 974, 975, 978, 979, 982, 983, 986, 987, 988, 989, 990, 991, 992, 993, 996, 997, 1000, 1001, 1004, 1017, 1029, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1077, 1078, 1081, 1094, 1097, 1098, 1101, 1102, 1105, 1106, 1107, 1110, 1111, 1114, 1115, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1156, 1158, 1159], "2": [2, 6, 9, 24, 25, 27, 35, 46, 48, 87, 105, 106, 107, 113, 123, 124, 127, 128, 129, 130, 137, 138, 141, 142, 159, 163, 178, 179, 180, 181, 183, 188, 191, 208, 209, 210, 225, 227, 264, 276, 280, 281, 284, 290, 292, 296, 297, 302, 303, 310, 311, 314, 315, 316, 317, 328, 329, 332, 333, 347, 348, 350, 354, 358, 361, 365, 366, 367, 369, 370, 371, 372, 384, 395, 397, 398, 399, 400, 402, 405, 406, 413, 414, 417, 419, 420, 424, 425, 431, 434, 435, 436, 437, 438, 462, 481, 482, 484, 496, 498, 500, 507, 512, 525, 526, 527, 529, 530, 533, 538, 541, 542, 545, 546, 550, 553, 554, 557, 566, 569, 570, 573, 574, 575, 576, 577, 578, 582, 594, 599, 607, 608, 609, 611, 615, 618, 619, 622, 635, 638, 655, 658, 659, 679, 680, 686, 689, 690, 693, 706, 709, 722, 725, 726, 729, 735, 736, 737, 738, 740, 741, 742, 743, 744, 749, 750, 751, 752, 753, 757, 758, 761, 762, 764, 767, 774, 777, 778, 779, 780, 781, 782, 796, 811, 812, 817, 854, 857, 858, 859, 860, 861, 866, 867, 868, 870, 871, 873, 874, 877, 878, 879, 886, 888, 889, 892, 893, 895, 897, 899, 903, 905, 906, 908, 909, 911, 916, 922, 923, 924, 925, 927, 931, 932, 933, 937, 938, 941, 948, 951, 953, 954, 955, 956, 957, 958, 959, 962, 967, 970, 971, 974, 979, 982, 983, 986, 987, 988, 989, 990, 991, 992, 993, 996, 1001, 1004, 1035, 1036, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1048, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1062, 1063, 1066, 1073, 1074, 1077, 1078, 1081, 1101, 1106, 1107, 1110, 1115], "3": [2, 6, 9, 24, 27, 46, 48, 123, 124, 127, 128, 129, 130, 141, 142, 180, 181, 183, 188, 191, 208, 209, 210, 225, 227, 264, 276, 280, 281, 284, 290, 292, 296, 297, 302, 303, 310, 311, 314, 315, 316, 317, 328, 329, 332, 333, 347, 350, 354, 358, 361, 367, 369, 370, 371, 372, 395, 397, 398, 399, 400, 405, 406, 414, 417, 420, 423, 424, 425, 434, 435, 436, 437, 438, 462, 481, 484, 500, 507, 512, 525, 526, 527, 529, 530, 533, 541, 546, 550, 553, 566, 569, 570, 573, 574, 576, 577, 582, 594, 599, 607, 608, 609, 611, 615, 618, 619, 622, 635, 638, 659, 679, 680, 686, 689, 690, 693, 706, 709, 722, 725, 726, 729, 735, 736, 738, 740, 741, 743, 744, 749, 750, 751, 752, 757, 758, 767, 774, 777, 778, 779, 780, 781, 782, 811, 812, 817, 819, 854, 855, 856, 857, 859, 860, 861, 866, 867, 868, 870, 871, 873, 874, 877, 879, 886, 897, 899, 903, 905, 916, 922, 924, 925, 927, 934, 936, 937, 938, 941, 948, 951, 953, 954, 955, 956, 957, 958, 959, 962, 967, 970, 971, 974, 979, 982, 983, 986, 987, 989, 990, 991, 992, 993, 996, 1001, 1004, 1035, 1036, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1048, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1062, 1063, 1066, 1073, 1074, 1077, 1078, 1081, 1098, 1101, 1106, 1107, 1110, 1115], "y": [2, 6, 9, 25, 27, 46, 48, 87, 105, 106, 127, 128, 129, 130, 141, 142, 180, 181, 183, 188, 191, 209, 210, 225, 227, 264, 276, 277, 281, 284, 290, 292, 296, 297, 302, 303, 314, 315, 316, 317, 328, 329, 332, 333, 352, 354, 358, 361, 367, 369, 395, 397, 398, 399, 400, 401, 402, 406, 413, 414, 417, 419, 420, 424, 425, 431, 462, 482, 496, 500, 505, 512, 525, 526, 527, 529, 530, 533, 541, 542, 545, 546, 550, 553, 554, 557, 566, 569, 570, 573, 574, 575, 576, 577, 578, 582, 594, 599, 607, 608, 609, 611, 618, 619, 622, 659, 679, 680, 686, 689, 690, 693, 706, 709, 722, 725, 726, 729, 735, 736, 737, 738, 740, 741, 742, 743, 744, 749, 750, 751, 752, 753, 754, 757, 758, 766, 767, 774, 775, 777, 778, 779, 780, 781, 782, 811, 817, 818, 819, 823, 830, 854, 860, 861, 863, 867, 868, 870, 871, 873, 874, 886, 903, 905, 922, 924, 925, 927, 937, 938, 941, 943, 946, 948, 951, 953, 954, 955, 956, 957, 958, 959, 962, 967, 970, 971, 974, 979, 982, 983, 986, 987, 988, 989, 990, 991, 992, 1001, 1004, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1048, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1059, 1062, 1063, 1066, 1073, 1074, 1077, 1078, 1081, 1094, 1097, 1098, 1101, 1106, 1107, 1110], "4": [2, 6, 27, 127, 128, 141, 142, 175, 176, 177, 178, 179, 180, 181, 182, 183, 188, 208, 209, 210, 225, 227, 264, 276, 280, 281, 284, 290, 292, 296, 297, 302, 303, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 350, 354, 358, 361, 367, 369, 370, 371, 372, 395, 397, 398, 400, 406, 414, 417, 420, 424, 425, 434, 436, 437, 438, 462, 484, 500, 512, 525, 526, 527, 529, 530, 533, 541, 542, 545, 546, 550, 553, 570, 573, 574, 576, 577, 582, 594, 607, 609, 611, 618, 619, 622, 659, 679, 680, 686, 689, 690, 693, 706, 709, 722, 725, 726, 729, 735, 736, 738, 740, 741, 743, 744, 749, 758, 767, 776, 777, 778, 780, 781, 782, 812, 817, 854, 857, 858, 859, 861, 864, 866, 867, 871, 873, 874, 877, 879, 886, 897, 899, 903, 905, 922, 924, 925, 927, 937, 948, 951, 953, 954, 955, 956, 957, 958, 959, 962, 967, 970, 971, 974, 979, 982, 983, 986, 987, 989, 990, 991, 992, 1001, 1004, 1035, 1036, 1039, 1040, 1041, 1042, 1044, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1062, 1063, 1066, 1073, 1074, 1077, 1078, 1081, 1101, 1106, 1107, 1110, 1115, 1152, 1153, 1154, 1155, 1157], "5": [2, 6, 9, 25, 27, 46, 127, 128, 129, 130, 141, 142, 180, 181, 183, 188, 208, 209, 210, 225, 264, 276, 280, 281, 284, 290, 292, 296, 297, 302, 303, 310, 311, 314, 315, 316, 317, 328, 329, 332, 333, 348, 350, 354, 358, 365, 369, 370, 371, 395, 397, 398, 400, 406, 414, 417, 420, 423, 424, 425, 434, 436, 437, 438, 462, 484, 500, 512, 525, 526, 527, 529, 530, 533, 541, 546, 549, 550, 553, 566, 569, 570, 573, 574, 575, 576, 577, 582, 594, 607, 608, 609, 611, 618, 619, 622, 659, 679, 680, 686, 689, 690, 693, 706, 709, 722, 725, 726, 729, 735, 736, 738, 739, 740, 741, 743, 744, 749, 750, 751, 758, 767, 777, 778, 781, 782, 812, 817, 854, 857, 859, 860, 866, 867, 868, 870, 871, 873, 874, 877, 879, 886, 903, 905, 922, 924, 925, 927, 937, 948, 951, 953, 954, 955, 956, 957, 958, 959, 962, 967, 970, 971, 974, 979, 982, 983, 986, 987, 989, 990, 991, 992, 1001, 1004, 1035, 1036, 1039, 1040, 1041, 1042, 1043, 1044, 1051, 1052, 1054, 1055, 1056, 1057, 1058, 1059, 1062, 1063, 1066, 1073, 1074, 1077, 1078, 1081, 1101, 1106, 1107, 1110, 1136, 1147], "6": [2, 6, 25, 27, 127, 128, 141, 142, 180, 181, 183, 188, 209, 276, 284, 290, 314, 315, 316, 317, 332, 333, 350, 354, 358, 361, 369, 370, 371, 395, 397, 398, 400, 406, 414, 462, 484, 500, 512, 525, 526, 527, 529, 530, 533, 550, 553, 554, 557, 570, 573, 574, 575, 576, 577, 582, 594, 607, 618, 619, 622, 659, 679, 680, 686, 689, 706, 709, 722, 725, 726, 729, 735, 740, 749, 758, 767, 777, 778, 781, 782, 812, 817, 854, 857, 860, 861, 866, 867, 871, 873, 874, 877, 879, 903, 905, 916, 922, 924, 937, 938, 941, 948, 951, 953, 954, 955, 957, 959, 962, 967, 970, 971, 974, 979, 982, 983, 986, 987, 990, 992, 1001, 1004, 1035, 1036, 1039, 1040, 1041, 1042, 1043, 1044, 1052, 1053, 1056, 1057, 1058, 1059, 1073, 1074, 1077, 1078, 1081, 1101], "z": [2, 6, 48, 127, 128, 129, 130, 180, 181, 183, 188, 227, 276, 284, 314, 315, 316, 317, 354, 358, 361, 367, 369, 462, 496, 512, 525, 526, 527, 529, 550, 553, 570, 573, 594, 618, 619, 622, 659, 679, 680, 749, 757, 758, 777, 778, 779, 780, 782, 811, 867, 871, 873, 937, 938, 941, 943, 946, 953, 954, 957, 1052, 1053, 1073, 1074, 1077, 1078, 1081, 1101], "print": [2, 6, 7, 9, 24, 25, 27, 46, 48, 87, 105, 106, 123, 124, 127, 128, 129, 130, 141, 142, 157, 158, 159, 163, 164, 165, 171, 178, 179, 180, 181, 182, 183, 188, 189, 191, 208, 209, 210, 225, 227, 264, 276, 277, 280, 281, 284, 290, 292, 296, 297, 302, 303, 310, 311, 314, 315, 316, 317, 328, 329, 332, 333, 344, 345, 347, 354, 361, 367, 369, 370, 371, 395, 397, 398, 399, 400, 401, 402, 406, 413, 414, 417, 419, 420, 423, 424, 425, 431, 434, 435, 436, 437, 438, 446, 447, 462, 482, 496, 497, 498, 499, 500, 502, 505, 509, 512, 525, 526, 527, 529, 530, 533, 541, 546, 549, 550, 553, 554, 557, 566, 569, 570, 573, 574, 575, 576, 577, 578, 582, 594, 599, 607, 608, 609, 611, 615, 618, 619, 622, 635, 638, 659, 679, 680, 686, 689, 690, 693, 706, 709, 722, 725, 726, 729, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 749, 750, 751, 752, 753, 754, 757, 758, 766, 767, 774, 777, 778, 779, 780, 781, 782, 785, 803, 811, 812, 817, 818, 819, 854, 855, 857, 859, 860, 861, 866, 867, 868, 870, 871, 873, 874, 877, 879, 886, 903, 905, 916, 922, 924, 925, 927, 937, 938, 941, 943, 946, 948, 951, 953, 954, 955, 956, 957, 958, 967, 970, 971, 974, 979, 982, 983, 986, 987, 988, 989, 990, 991, 992, 993, 996, 1001, 1004, 1035, 1036, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1048, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1062, 1063, 1066, 1073, 1074, 1077, 1078, 1081, 1094, 1097, 1098, 1101, 1106, 1107, 1110, 1115], "7": [2, 6, 27, 127, 128, 141, 142, 180, 181, 183, 188, 276, 290, 314, 315, 332, 333, 348, 350, 354, 357, 361, 364, 395, 397, 398, 462, 484, 512, 525, 526, 527, 529, 550, 553, 554, 557, 570, 573, 574, 577, 582, 594, 599, 607, 618, 619, 622, 659, 679, 680, 706, 709, 722, 725, 735, 740, 749, 758, 767, 777, 823, 825, 826, 828, 836, 838, 854, 860, 861, 866, 867, 871, 873, 874, 877, 879, 903, 905, 922, 924, 937, 938, 941, 943, 946, 948, 951, 953, 954, 955, 957, 967, 970, 971, 974, 979, 982, 992, 1001, 1004, 1035, 1036, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1048, 1052, 1056, 1057, 1058, 1073, 1074, 1077, 1101], "9": [2, 6, 27, 127, 128, 141, 142, 180, 181, 183, 187, 188, 234, 275, 276, 286, 290, 314, 315, 318, 319, 332, 333, 350, 354, 370, 371, 512, 525, 526, 527, 529, 550, 553, 554, 557, 659, 679, 680, 706, 709, 722, 725, 726, 729, 749, 777, 823, 825, 826, 827, 828, 829, 836, 837, 838, 839, 854, 857, 860, 861, 867, 871, 873, 874, 877, 879, 903, 905, 916, 922, 924, 953, 954, 955, 957, 971, 974, 979, 982, 987, 990, 992, 1040, 1041, 1042, 1043, 1044, 1052, 1056, 1057, 1058, 1073, 1074, 1077, 1101, 1152, 1153, 1154], "add_ivy_array_instance_method": [2, 157], "cl": [2, 7, 157, 158, 183, 189, 344, 345], "modul": [2, 7, 157, 158, 159, 163, 164, 175, 178, 179, 180, 181, 182, 183, 189, 344, 345, 347, 350, 356, 357, 358, 360, 364, 367, 368, 370, 372, 383, 384, 749, 800, 1040, 1041, 1045, 1046, 1048, 1115, 1122, 1123, 1124, 1125, 1126, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1150, 1151, 1158, 1159], "to_ignor": [2, 7, 157, 158, 183, 189, 344, 345, 1017, 1028], "loop": [2, 7, 157, 158, 183, 189, 344, 345, 358, 384, 1013, 1014, 1015, 1016], "over": [2, 7, 157, 158, 159, 163, 173, 175, 178, 179, 183, 189, 344, 345, 347, 353, 354, 358, 364, 369, 384, 867, 893, 895, 922, 924, 928, 930, 931, 933, 1035, 1036, 1039, 1040, 1046, 1048, 1073, 1078, 1081, 1082, 1085, 1086, 1089, 1090, 1093, 1094, 1097, 1098, 1102, 1105, 1106, 1107, 1110, 1111, 1114, 1150, 1151], "all": [2, 7, 116, 117, 118, 119, 120, 155, 156, 157, 158, 173, 174, 175, 178, 179, 183, 189, 342, 343, 344, 345, 346, 347, 348, 349, 350, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 369, 370, 371, 372, 383, 384, 385, 393, 403, 404, 406, 407, 421, 422, 462, 471, 496, 502, 749, 750, 753, 757, 758, 783, 803, 818, 854, 864, 867, 913, 915, 922, 924, 931, 933, 953, 971, 974, 987, 990, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1028, 1029, 1030, 1040, 1041, 1046, 1048, 1106, 1115, 1118, 1120], "gener": [2, 7, 130, 157, 158, 178, 179, 183, 189, 317, 344, 345, 348, 349, 350, 351, 352, 353, 354, 357, 360, 361, 362, 363, 364, 365, 366, 367, 369, 371, 372, 383, 384, 403, 406, 407, 415, 416, 425, 434, 437, 512, 530, 533, 570, 573, 574, 577, 582, 607, 690, 693, 702, 705, 722, 725, 726, 729, 750, 753, 755, 756, 757, 758, 759, 760, 761, 762, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 781, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 835, 953, 967, 970, 987, 990, 1040, 1041, 1042, 1043, 1046, 1048, 1050, 1057, 1058, 1059, 1062, 1063, 1066, 1073, 1078, 1081, 1115, 1152, 1156], "etc": [2, 7, 157, 158, 175, 178, 179, 183, 189, 344, 345, 347, 348, 349, 352, 354, 356, 360, 361, 362, 365, 367, 369, 370, 384, 406, 415, 416, 749, 777, 778, 781, 802, 805, 806, 1040, 1041, 1042, 1043, 1046, 1048, 1057, 1058, 1059, 1061, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1156, 1158, 1159], "us": [2, 7, 157, 158, 159, 164, 171, 174, 175, 178, 179, 180, 181, 182, 183, 189, 344, 345, 346, 348, 349, 351, 352, 353, 354, 355, 356, 357, 358, 360, 361, 362, 363, 364, 365, 366, 367, 369, 371, 372, 383, 384, 395, 397, 398, 399, 400, 401, 402, 405, 425, 444, 462, 471, 472, 497, 501, 504, 505, 506, 507, 509, 511, 512, 530, 533, 550, 553, 570, 573, 582, 594, 618, 619, 622, 679, 680, 686, 689, 690, 693, 706, 709, 722, 725, 749, 777, 784, 785, 799, 805, 806, 807, 808, 813, 814, 823, 825, 826, 828, 836, 838, 840, 842, 854, 860, 862, 863, 865, 866, 867, 874, 877, 879, 893, 895, 937, 938, 941, 953, 967, 970, 971, 974, 979, 982, 987, 990, 1001, 1004, 1013, 1014, 1015, 1016, 1017, 1018, 1020, 1026, 1027, 1028, 1030, 1035, 1036, 1039, 1052, 1053, 1054, 1055, 1057, 1058, 1059, 1073, 1074, 1077, 1101, 1106, 1107, 1110, 1115, 1136, 1144, 1147, 1148, 1149, 1150, 1151, 1152, 1154, 1155], "_wrap_funct": [2, 7, 157, 158, 183, 189, 344, 345, 357, 359], "paramet": [2, 7, 116, 117, 118, 119, 120, 157, 158, 159, 163, 164, 178, 179, 180, 181, 182, 183, 189, 344, 345, 352, 353, 356, 369, 370, 383, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 429, 430, 431, 432, 433, 434, 437, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 461, 462, 471, 472, 475, 476, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 498, 500, 501, 502, 503, 504, 505, 506, 507, 508, 511, 512, 513, 516, 517, 520, 521, 524, 525, 528, 530, 533, 534, 537, 538, 541, 542, 545, 546, 549, 550, 553, 554, 557, 558, 561, 562, 565, 566, 569, 570, 573, 574, 577, 578, 581, 582, 585, 586, 589, 591, 594, 595, 598, 599, 602, 603, 606, 607, 610, 611, 614, 615, 618, 619, 622, 623, 626, 627, 630, 631, 634, 635, 638, 639, 642, 643, 646, 647, 650, 651, 654, 655, 658, 659, 662, 663, 666, 667, 670, 671, 674, 675, 678, 679, 680, 681, 684, 686, 689, 690, 693, 694, 697, 698, 701, 702, 705, 706, 709, 710, 713, 714, 717, 718, 721, 722, 725, 726, 729, 730, 734, 735, 739, 740, 744, 745, 748, 749, 750, 753, 755, 756, 757, 758, 759, 760, 761, 762, 764, 767, 768, 770, 771, 772, 773, 774, 775, 776, 777, 778, 781, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 802, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 817, 818, 819, 820, 821, 822, 823, 825, 826, 828, 830, 831, 833, 835, 836, 838, 840, 842, 844, 846, 848, 849, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 870, 871, 873, 874, 876, 877, 879, 880, 882, 883, 885, 886, 888, 889, 892, 893, 895, 897, 899, 900, 902, 903, 905, 906, 908, 909, 911, 912, 913, 915, 916, 918, 919, 921, 922, 924, 925, 927, 928, 930, 931, 933, 934, 936, 937, 938, 941, 943, 946, 948, 951, 953, 954, 957, 959, 962, 963, 966, 967, 970, 971, 974, 975, 978, 979, 982, 983, 986, 987, 990, 992, 993, 996, 997, 1000, 1001, 1004, 1005, 1008, 1009, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1039, 1040, 1041, 1042, 1043, 1045, 1046, 1048, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1066, 1068, 1071, 1073, 1074, 1077, 1078, 1081, 1082, 1085, 1086, 1089, 1090, 1093, 1094, 1097, 1098, 1101, 1102, 1105, 1106, 1107, 1110, 1111, 1114, 1118, 1120, 1125, 1126, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159], "we": [2, 7, 157, 158, 159, 164, 165, 171, 172, 173, 174, 175, 183, 189, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 360, 361, 362, 364, 365, 367, 368, 369, 370, 371, 372, 383, 384, 823, 830, 1115, 1121], "want": [2, 7, 157, 158, 159, 164, 174, 183, 189, 344, 345, 346, 347, 348, 356, 370, 371, 372, 384], "list": [2, 7, 116, 117, 118, 119, 120, 157, 158, 178, 179, 183, 189, 344, 345, 347, 349, 350, 352, 354, 362, 363, 365, 367, 370, 371, 372, 384, 406, 407, 408, 409, 417, 418, 419, 423, 425, 432, 462, 471, 472, 481, 483, 484, 487, 488, 491, 492, 506, 749, 758, 812, 817, 821, 854, 855, 856, 857, 858, 859, 860, 861, 867, 922, 924, 953, 959, 962, 971, 974, 992, 997, 1000, 1017, 1018, 1019, 1023, 1028, 1029, 1035, 1036, 1039, 1052, 1055, 1106, 1107, 1110, 1111, 1114, 1115, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143], "option": [2, 7, 116, 117, 118, 119, 120, 157, 158, 159, 164, 178, 179, 183, 189, 344, 345, 347, 348, 352, 353, 354, 357, 361, 362, 363, 364, 365, 367, 372, 384, 395, 397, 398, 400, 403, 404, 406, 407, 408, 409, 410, 411, 413, 414, 415, 416, 417, 418, 419, 420, 423, 424, 425, 439, 440, 441, 442, 449, 461, 462, 481, 505, 506, 507, 512, 513, 516, 517, 520, 521, 524, 525, 528, 530, 533, 534, 537, 538, 542, 545, 550, 553, 554, 557, 558, 561, 562, 565, 566, 569, 570, 573, 574, 577, 578, 581, 582, 585, 599, 602, 603, 606, 607, 623, 626, 627, 630, 631, 634, 635, 638, 643, 646, 647, 650, 651, 654, 655, 658, 659, 662, 663, 666, 667, 670, 671, 674, 675, 678, 681, 684, 686, 689, 690, 693, 698, 701, 702, 705, 706, 709, 710, 713, 714, 717, 718, 721, 722, 725, 726, 729, 730, 734, 735, 740, 749, 755, 762, 764, 767, 768, 769, 775, 777, 800, 802, 805, 806, 813, 814, 823, 849, 854, 857, 860, 861, 863, 866, 867, 888, 893, 895, 897, 899, 906, 908, 931, 933, 937, 938, 941, 943, 946, 948, 951, 953, 954, 957, 959, 962, 967, 970, 971, 974, 975, 978, 979, 982, 987, 990, 992, 993, 996, 997, 1000, 1001, 1004, 1013, 1014, 1015, 1016, 1017, 1018, 1023, 1028, 1029, 1035, 1036, 1039, 1040, 1041, 1042, 1043, 1045, 1046, 1048, 1052, 1053, 1054, 1062, 1063, 1066, 1068, 1071, 1073, 1074, 1077, 1078, 1081, 1082, 1085, 1086, 1089, 1090, 1093, 1094, 1097, 1098, 1101, 1102, 1105, 1106, 1107, 1110, 1111, 1114], "iter": [2, 7, 116, 117, 118, 119, 120, 157, 158, 175, 178, 179, 180, 181, 182, 183, 189, 344, 345, 361, 367, 370, 403, 404, 462, 484, 485, 487, 488, 489, 490, 493, 506, 749, 750, 753, 806, 811, 953, 963, 966, 979, 982, 992, 1005, 1008, 1009, 1012, 1017, 1018, 1019, 1023, 1027, 1028, 1029], "ani": [2, 7, 116, 117, 118, 155, 156, 157, 158, 159, 163, 171, 173, 174, 175, 178, 179, 183, 189, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 360, 361, 362, 363, 364, 365, 367, 369, 370, 371, 372, 383, 384, 403, 404, 406, 408, 418, 425, 434, 437, 462, 507, 512, 525, 530, 533, 574, 577, 591, 594, 607, 618, 619, 622, 639, 642, 690, 693, 722, 725, 726, 729, 735, 749, 750, 753, 770, 771, 772, 773, 774, 777, 788, 795, 796, 797, 798, 813, 814, 823, 830, 854, 857, 866, 953, 987, 990, 1013, 1014, 1015, 1016, 1017, 1023, 1027, 1035, 1036, 1039, 1040, 1046, 1048, 1073, 1078, 1081, 1106, 1107, 1110, 1115], "item": [2, 7, 116, 120, 157, 158, 178, 179, 362, 367, 369, 370, 372, 425, 440, 462, 471, 472, 474, 481, 483, 485, 487, 489, 493, 749, 765, 787, 813, 814, 1017, 1022, 1023, 1024, 1025, 1029, 1033, 1034, 1115, 1148, 1149], "don": [2, 7, 157, 158, 175, 183, 189, 344, 345, 347, 348, 349, 362, 371, 384], "t": [2, 7, 157, 158, 159, 164, 174, 175, 183, 189, 344, 345, 347, 348, 349, 350, 354, 362, 367, 369, 370, 371, 372, 384, 749, 758, 854, 863, 864], "an": [2, 7, 116, 119, 120, 157, 158, 174, 175, 178, 179, 183, 189, 344, 345, 347, 348, 349, 350, 352, 353, 354, 356, 357, 358, 360, 361, 362, 363, 364, 365, 367, 369, 370, 371, 372, 383, 384, 395, 398, 399, 401, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 431, 432, 433, 434, 437, 445, 450, 451, 453, 462, 484, 488, 507, 512, 513, 516, 517, 520, 521, 524, 525, 528, 530, 533, 534, 537, 538, 541, 542, 545, 546, 549, 550, 553, 554, 557, 558, 561, 562, 565, 566, 569, 570, 573, 574, 577, 578, 581, 582, 585, 586, 589, 591, 594, 599, 602, 603, 606, 607, 610, 611, 614, 615, 618, 619, 622, 623, 626, 627, 630, 631, 634, 635, 638, 639, 642, 643, 646, 647, 650, 651, 654, 655, 658, 659, 662, 663, 666, 667, 670, 671, 674, 675, 678, 679, 680, 681, 684, 686, 689, 690, 693, 698, 701, 702, 705, 706, 709, 710, 713, 714, 717, 718, 721, 722, 725, 726, 729, 730, 734, 735, 739, 740, 744, 745, 748, 749, 760, 761, 762, 764, 766, 775, 776, 777, 789, 793, 795, 796, 797, 798, 818, 819, 820, 823, 835, 849, 851, 852, 854, 857, 866, 867, 868, 870, 871, 873, 874, 876, 877, 879, 880, 882, 883, 885, 886, 888, 889, 892, 896, 897, 899, 900, 902, 906, 908, 909, 911, 912, 913, 915, 916, 925, 927, 928, 930, 931, 933, 953, 954, 957, 959, 962, 963, 966, 967, 970, 971, 974, 975, 978, 983, 986, 987, 990, 992, 993, 996, 997, 1000, 1001, 1004, 1005, 1008, 1009, 1012, 1017, 1023, 1035, 1036, 1039, 1040, 1042, 1043, 1051, 1052, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1066, 1068, 1071, 1073, 1074, 1077, 1078, 1081, 1082, 1085, 1086, 1089, 1090, 1093, 1094, 1097, 1098, 1101, 1102, 1105, 1106, 1107, 1110, 1111, 1114, 1115, 1125, 1126, 1148, 1149, 1152, 1153, 1154, 1156], "default": [2, 7, 116, 117, 118, 119, 120, 157, 158, 159, 164, 178, 179, 180, 181, 182, 183, 189, 344, 345, 348, 353, 354, 357, 358, 361, 362, 363, 365, 371, 395, 396, 397, 398, 400, 403, 404, 406, 407, 408, 409, 410, 411, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 431, 440, 441, 442, 443, 462, 471, 472, 481, 482, 486, 487, 488, 489, 490, 491, 492, 493, 494, 501, 503, 504, 505, 506, 507, 510, 511, 512, 513, 516, 517, 520, 521, 524, 525, 528, 530, 533, 534, 537, 538, 542, 545, 550, 553, 554, 557, 558, 561, 562, 565, 566, 569, 570, 573, 574, 577, 578, 581, 582, 585, 599, 602, 603, 606, 607, 623, 626, 627, 630, 631, 634, 635, 638, 643, 646, 647, 650, 651, 654, 655, 658, 659, 662, 663, 666, 667, 670, 671, 674, 675, 678, 681, 684, 686, 689, 690, 693, 698, 701, 702, 705, 706, 709, 710, 713, 714, 717, 718, 721, 722, 725, 726, 729, 730, 734, 735, 740, 749, 750, 753, 755, 761, 762, 764, 767, 768, 775, 776, 777, 786, 787, 788, 790, 793, 794, 795, 796, 798, 799, 800, 802, 804, 805, 806, 809, 811, 813, 814, 821, 822, 823, 825, 826, 828, 830, 831, 833, 835, 836, 838, 840, 842, 844, 846, 849, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 870, 871, 873, 877, 879, 888, 893, 895, 897, 899, 906, 908, 909, 911, 916, 922, 924, 925, 927, 928, 930, 931, 933, 937, 938, 941, 943, 946, 948, 951, 953, 954, 957, 959, 962, 963, 966, 967, 970, 971, 974, 975, 978, 979, 982, 987, 990, 992, 993, 996, 997, 1000, 1001, 1004, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1023, 1027, 1028, 1029, 1030, 1035, 1036, 1039, 1040, 1041, 1042, 1043, 1045, 1046, 1048, 1050, 1052, 1053, 1054, 1055, 1057, 1058, 1059, 1062, 1063, 1066, 1068, 1071, 1073, 1074, 1077, 1078, 1081, 1082, 1085, 1086, 1089, 1090, 1093, 1094, 1097, 1098, 1101, 1102, 1105, 1106, 1107, 1110, 1111, 1114, 1125, 1126, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159], "As": [2, 7, 157, 158, 173, 183, 189, 344, 345, 348, 356, 357, 360, 361, 362, 363, 364, 365, 367, 369, 370, 371, 384, 1057, 1058, 1059, 1061], "shown": [2, 7, 157, 158, 178, 179, 183, 189, 344, 345, 348, 354, 365, 367, 369, 384, 406, 417, 512, 550, 553, 570, 573, 582, 706, 709, 740, 867, 874, 953, 967, 970, 971, 974, 1057, 1058, 1059, 1062, 1063, 1066], "appropri": [2, 7, 157, 158, 183, 189, 344, 345, 348, 359, 512, 525, 681, 684, 1052, 1053], "from": [2, 7, 116, 117, 118, 119, 120, 157, 158, 159, 163, 164, 165, 173, 174, 175, 178, 179, 180, 181, 182, 183, 189, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 356, 358, 360, 361, 362, 363, 364, 365, 367, 369, 370, 371, 372, 383, 384, 406, 407, 408, 410, 412, 413, 414, 417, 418, 420, 424, 425, 434, 437, 453, 462, 471, 472, 481, 496, 500, 505, 506, 512, 615, 722, 725, 749, 770, 777, 778, 781, 817, 823, 826, 828, 836, 838, 854, 862, 865, 867, 877, 879, 916, 928, 930, 953, 971, 974, 983, 986, 993, 996, 1013, 1014, 1015, 1016, 1017, 1019, 1029, 1030, 1040, 1041, 1042, 1043, 1045, 1046, 1048, 1052, 1056, 1057, 1058, 1060, 1073, 1090, 1093, 1094, 1097, 1098, 1102, 1105, 1106, 1107, 1110, 1111, 1114, 1115, 1121, 1125, 1126, 1136, 1144, 1147, 1152, 1156], "our": [2, 7, 157, 158, 173, 174, 183, 189, 344, 345, 346, 347, 348, 354, 361, 366, 369, 370, 371, 372, 384, 1115], "toi": [2, 7, 157, 158, 183, 189, 344, 345], "arrayexampl": [2, 7, 157, 158], "import": [2, 7, 157, 158, 159, 163, 174, 183, 189, 344, 345, 349, 352, 353, 354, 358, 360, 361, 362, 363, 364, 367, 369, 370, 372, 384, 462, 503, 1115, 1121], "pass": [2, 7, 157, 158, 159, 163, 178, 179, 180, 181, 182, 183, 189, 344, 345, 349, 353, 354, 355, 356, 357, 358, 360, 361, 364, 365, 369, 384, 425, 439, 462, 471, 506, 512, 542, 545, 749, 760, 793, 823, 852, 1013, 1014, 1015, 1125, 1126, 1148, 1149, 1152, 1156, 1158, 1159], "hasattr": [2, 7, 157, 158, 183, 189, 344, 345, 369], "relu": [2, 7, 157, 158, 180, 181, 370, 371, 395, 396, 397, 1115], "softmax": [2, 7, 157, 158, 180, 181, 395, 854, 865, 866, 1115], "true": [2, 7, 9, 11, 24, 93, 102, 123, 124, 129, 130, 137, 138, 151, 152, 157, 158, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 354, 356, 357, 361, 362, 364, 367, 369, 370, 371, 372, 395, 396, 403, 404, 406, 415, 425, 431, 434, 435, 436, 437, 438, 462, 481, 498, 502, 503, 512, 513, 515, 519, 520, 521, 523, 527, 528, 529, 530, 532, 534, 536, 540, 541, 542, 544, 546, 548, 550, 552, 553, 554, 556, 558, 560, 562, 564, 566, 568, 570, 572, 573, 574, 576, 580, 581, 584, 585, 588, 589, 590, 593, 594, 595, 597, 601, 602, 603, 605, 609, 610, 611, 613, 615, 617, 618, 619, 621, 622, 623, 625, 626, 627, 629, 630, 631, 633, 634, 635, 637, 638, 639, 641, 643, 645, 647, 649, 651, 653, 655, 657, 659, 661, 663, 665, 667, 669, 670, 671, 673, 674, 675, 677, 681, 683, 685, 686, 688, 690, 692, 693, 694, 696, 698, 700, 702, 704, 706, 708, 710, 712, 714, 716, 718, 720, 722, 724, 726, 728, 730, 731, 733, 736, 738, 739, 741, 743, 744, 745, 747, 749, 750, 751, 752, 753, 754, 757, 758, 759, 760, 762, 763, 767, 774, 776, 778, 780, 782, 788, 789, 796, 811, 817, 819, 822, 823, 826, 827, 828, 829, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 849, 854, 862, 867, 868, 870, 889, 891, 893, 895, 916, 917, 919, 931, 933, 937, 938, 940, 941, 942, 943, 945, 946, 947, 948, 950, 951, 952, 953, 954, 956, 958, 959, 961, 963, 965, 967, 969, 971, 973, 975, 977, 979, 981, 983, 985, 987, 989, 991, 992, 993, 995, 997, 999, 1001, 1003, 1005, 1007, 1009, 1011, 1013, 1014, 1015, 1016, 1017, 1018, 1027, 1028, 1030, 1036, 1038, 1040, 1041, 1046, 1047, 1049, 1052, 1053, 1054, 1056, 1057, 1058, 1059, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1076, 1078, 1080, 1081, 1082, 1084, 1085, 1086, 1088, 1089, 1090, 1092, 1093, 1094, 1096, 1097, 1098, 1100, 1101, 1102, 1104, 1105, 1106, 1107, 1109, 1110, 1111, 1113, 1114, 1136, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157], "axi": [2, 8, 10, 11, 28, 32, 33, 43, 45, 71, 72, 73, 82, 85, 87, 93, 94, 97, 98, 99, 101, 111, 112, 113, 137, 138, 139, 140, 141, 142, 151, 152, 153, 154, 155, 156, 178, 179, 183, 190, 192, 193, 212, 216, 222, 224, 249, 250, 251, 259, 262, 264, 269, 270, 273, 274, 278, 282, 292, 293, 294, 298, 300, 306, 326, 327, 328, 329, 338, 339, 340, 341, 342, 343, 354, 357, 361, 362, 364, 365, 367, 369, 372, 383, 395, 400, 406, 415, 416, 462, 464, 467, 474, 487, 488, 489, 490, 491, 492, 493, 494, 506, 749, 767, 768, 777, 821, 867, 871, 872, 873, 877, 879, 928, 929, 930, 931, 932, 933, 937, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 959, 960, 961, 962, 963, 966, 967, 968, 969, 970, 971, 972, 973, 974, 979, 980, 981, 982, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1004, 1005, 1008, 1009, 1012, 1040, 1051, 1052, 1053, 1054, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114], "keepdim": [2, 8, 10, 68, 71, 72, 73, 82, 99, 101, 111, 113, 137, 138, 153, 154, 155, 156, 178, 179, 183, 190, 192, 249, 250, 251, 259, 298, 300, 306, 340, 341, 342, 343, 749, 821, 867, 893, 894, 895, 931, 932, 933, 1052, 1053, 1054, 1073, 1074, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114], "fals": [2, 8, 9, 10, 11, 26, 68, 71, 72, 73, 82, 93, 99, 101, 111, 113, 116, 117, 118, 119, 120, 129, 130, 137, 138, 151, 152, 153, 154, 155, 156, 159, 166, 167, 168, 169, 170, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 354, 361, 364, 370, 371, 372, 425, 431, 434, 436, 437, 438, 443, 462, 481, 482, 493, 497, 498, 501, 506, 509, 511, 512, 513, 515, 519, 520, 521, 523, 527, 528, 529, 530, 532, 534, 536, 540, 541, 542, 544, 546, 548, 550, 552, 553, 554, 556, 558, 560, 562, 564, 566, 568, 570, 572, 574, 576, 580, 581, 584, 585, 588, 589, 590, 593, 594, 595, 597, 601, 602, 603, 605, 609, 610, 611, 613, 615, 617, 618, 619, 621, 622, 623, 625, 626, 627, 629, 630, 631, 633, 634, 635, 637, 638, 639, 641, 643, 645, 647, 649, 651, 653, 655, 657, 659, 661, 663, 665, 667, 669, 670, 671, 673, 674, 675, 677, 681, 683, 685, 686, 688, 690, 692, 693, 694, 696, 698, 700, 702, 704, 706, 708, 710, 712, 714, 716, 718, 720, 722, 724, 726, 728, 730, 731, 733, 736, 738, 739, 741, 743, 744, 745, 747, 749, 750, 751, 752, 753, 754, 757, 758, 762, 763, 767, 770, 774, 776, 778, 780, 782, 786, 793, 795, 796, 798, 799, 811, 821, 823, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 867, 868, 869, 870, 889, 891, 893, 894, 895, 916, 931, 932, 933, 938, 940, 942, 943, 945, 947, 948, 950, 952, 953, 954, 956, 958, 959, 961, 963, 965, 967, 969, 971, 973, 975, 977, 979, 981, 983, 985, 987, 989, 991, 992, 993, 995, 997, 999, 1001, 1003, 1005, 1007, 1009, 1011, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1023, 1027, 1028, 1029, 1030, 1036, 1038, 1040, 1041, 1046, 1047, 1049, 1052, 1053, 1054, 1056, 1057, 1058, 1059, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1076, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1125, 1126, 1148, 1149, 1152, 1153, 1154, 1155, 1156, 1157], "all_equ": [2, 129, 130, 183, 277, 316, 317, 749, 754], "equality_matrix": [2, 9, 129, 130, 183, 191, 277, 316, 317, 749, 750, 751, 752, 753, 754], "contain": [2, 9, 116, 119, 120, 129, 130, 173, 176, 177, 178, 179, 182, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 347, 348, 349, 350, 351, 353, 354, 356, 357, 362, 364, 365, 366, 367, 368, 371, 372, 384, 395, 398, 399, 401, 406, 407, 410, 412, 419, 421, 422, 423, 425, 434, 437, 462, 483, 484, 487, 496, 500, 512, 513, 516, 517, 520, 521, 524, 525, 528, 530, 533, 534, 537, 538, 541, 542, 545, 546, 549, 550, 553, 554, 557, 558, 561, 562, 565, 566, 569, 570, 573, 574, 577, 578, 581, 582, 585, 586, 589, 591, 594, 595, 599, 602, 603, 606, 607, 610, 611, 614, 615, 618, 619, 622, 623, 626, 627, 630, 631, 634, 635, 638, 639, 642, 643, 646, 647, 650, 651, 654, 655, 658, 659, 662, 663, 666, 667, 670, 671, 674, 675, 678, 679, 680, 681, 684, 686, 689, 690, 693, 694, 698, 701, 702, 705, 706, 709, 710, 713, 714, 717, 718, 721, 722, 725, 726, 729, 730, 734, 735, 739, 740, 744, 745, 748, 749, 750, 751, 753, 755, 758, 761, 762, 764, 766, 767, 774, 777, 778, 781, 788, 797, 817, 818, 819, 826, 831, 836, 840, 844, 854, 857, 860, 861, 866, 867, 868, 870, 871, 873, 874, 877, 879, 880, 882, 883, 885, 886, 888, 889, 892, 897, 899, 900, 902, 903, 905, 906, 908, 909, 911, 913, 915, 916, 918, 919, 921, 922, 924, 925, 927, 928, 930, 931, 933, 937, 938, 941, 943, 946, 948, 951, 953, 954, 957, 959, 963, 967, 970, 971, 974, 975, 978, 979, 982, 983, 987, 990, 992, 993, 997, 1001, 1004, 1005, 1009, 1013, 1014, 1015, 1016, 1017, 1030, 1035, 1036, 1039, 1040, 1041, 1042, 1045, 1046, 1048, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1061, 1062, 1063, 1066, 1068, 1073, 1074, 1077, 1078, 1081, 1082, 1085, 1086, 1089, 1090, 1093, 1094, 1097, 1098, 1101, 1102, 1105, 1106, 1107, 1110, 1111, 1114, 1115, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1145, 1146, 1147, 1148, 1149, 1152, 1156, 1158, 1159], "With": [2, 9, 129, 130, 174, 175, 178, 179, 180, 181, 183, 191, 276, 277, 281, 284, 290, 292, 296, 297, 314, 315, 316, 317, 328, 329, 332, 333, 347, 354, 356, 367, 395, 397, 398, 399, 400, 401, 402, 406, 417, 425, 434, 437, 462, 484, 500, 512, 525, 529, 530, 533, 541, 546, 550, 553, 570, 573, 574, 577, 582, 594, 607, 618, 619, 622, 659, 679, 680, 686, 689, 690, 693, 706, 709, 722, 725, 726, 729, 735, 736, 740, 741, 744, 749, 750, 751, 752, 753, 754, 758, 766, 767, 774, 777, 778, 781, 782, 812, 817, 818, 819, 854, 857, 860, 861, 866, 867, 868, 870, 871, 873, 874, 877, 879, 893, 895, 922, 924, 937, 938, 941, 948, 951, 953, 954, 957, 958, 967, 970, 971, 974, 979, 982, 987, 990, 991, 992, 1001, 1004, 1035, 1036, 1039, 1040, 1041, 1042, 1044, 1045, 1046, 1048, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1062, 1063, 1066, 1073, 1074, 1077, 1101, 1106, 1107, 1110], "x1": [2, 9, 129, 130, 183, 191, 276, 277, 283, 288, 295, 314, 315, 316, 317, 354, 365, 425, 457, 462, 500, 512, 525, 528, 529, 542, 545, 550, 553, 558, 561, 562, 565, 566, 569, 570, 573, 586, 589, 590, 591, 594, 602, 610, 611, 614, 615, 618, 619, 622, 635, 638, 639, 642, 659, 662, 663, 666, 671, 674, 675, 678, 679, 680, 681, 684, 685, 690, 693, 698, 701, 702, 705, 730, 731, 734, 749, 750, 751, 752, 753, 754, 757, 854, 859, 867, 871, 873, 889, 892, 903, 905, 913, 915, 922, 924, 928, 930, 1052, 1056], "0": [2, 9, 25, 27, 28, 29, 35, 43, 46, 55, 87, 98, 99, 105, 106, 109, 111, 127, 128, 129, 130, 137, 138, 141, 142, 143, 144, 153, 154, 159, 163, 176, 177, 178, 179, 180, 181, 182, 183, 187, 191, 208, 209, 210, 212, 213, 222, 225, 234, 235, 236, 260, 264, 274, 275, 276, 277, 280, 281, 284, 286, 287, 290, 291, 292, 296, 297, 298, 302, 303, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 348, 352, 353, 354, 367, 369, 370, 371, 372, 395, 397, 398, 399, 400, 401, 402, 406, 407, 411, 415, 416, 420, 421, 422, 423, 424, 425, 431, 434, 436, 437, 438, 445, 462, 464, 467, 471, 474, 478, 481, 482, 484, 487, 488, 489, 490, 491, 492, 493, 494, 496, 500, 503, 505, 506, 510, 512, 513, 516, 517, 520, 521, 524, 525, 529, 530, 533, 534, 537, 538, 541, 542, 545, 546, 549, 550, 553, 558, 561, 566, 569, 570, 573, 574, 575, 576, 577, 578, 581, 582, 585, 594, 599, 603, 606, 607, 608, 609, 611, 618, 619, 622, 643, 646, 647, 650, 655, 658, 659, 679, 680, 681, 684, 686, 689, 690, 693, 698, 701, 702, 705, 706, 709, 710, 713, 714, 717, 718, 721, 722, 725, 726, 729, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 748, 749, 750, 751, 752, 753, 754, 757, 758, 761, 762, 764, 766, 767, 768, 774, 777, 778, 781, 782, 787, 796, 802, 805, 806, 811, 817, 818, 819, 823, 825, 826, 827, 828, 829, 836, 837, 838, 839, 840, 841, 842, 843, 854, 855, 857, 859, 860, 861, 866, 867, 868, 870, 871, 873, 874, 877, 878, 879, 886, 916, 922, 924, 925, 926, 927, 931, 933, 937, 938, 941, 943, 946, 948, 951, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 974, 975, 978, 979, 982, 987, 988, 989, 990, 991, 992, 993, 996, 997, 998, 999, 1000, 1001, 1004, 1009, 1011, 1017, 1029, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1061, 1062, 1063, 1066, 1073, 1074, 1077, 1078, 1081, 1082, 1085, 1094, 1095, 1096, 1097, 1098, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1110, 1115, 1127, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1158, 1159], "mix": [2, 9, 129, 130, 180, 181, 183, 351, 354, 356, 367, 425, 453, 462, 500, 512, 525, 550, 553, 570, 573, 594, 618, 619, 622, 679, 680, 690, 693, 749, 750, 751, 766, 774, 777, 778, 781, 817, 818, 819, 854, 857, 860, 861, 866, 867, 922, 924, 937, 938, 941, 948, 951, 953, 954, 957, 1035, 1036, 1039, 1052, 1056, 1073, 1074, 1077, 1082, 1085, 1101], "nativearrai": [2, 9, 48, 116, 119, 120, 129, 130, 352, 354, 357, 360, 361, 364, 365, 367, 369, 372, 385, 393, 395, 397, 398, 399, 400, 401, 402, 406, 407, 408, 410, 414, 415, 416, 417, 418, 420, 421, 422, 424, 425, 431, 432, 433, 434, 437, 443, 445, 448, 450, 451, 453, 457, 462, 481, 482, 484, 500, 506, 507, 512, 513, 516, 517, 520, 521, 524, 525, 528, 530, 533, 534, 537, 538, 541, 542, 545, 546, 549, 550, 553, 554, 557, 558, 561, 562, 565, 566, 569, 570, 573, 574, 577, 578, 581, 582, 585, 586, 589, 591, 594, 595, 598, 599, 602, 603, 606, 607, 610, 611, 614, 615, 618, 619, 622, 623, 626, 627, 630, 631, 634, 635, 638, 639, 642, 643, 646, 647, 650, 651, 654, 655, 658, 659, 662, 663, 666, 667, 670, 671, 674, 675, 678, 679, 680, 681, 684, 686, 689, 690, 693, 694, 697, 698, 701, 702, 705, 706, 709, 710, 713, 714, 717, 718, 721, 722, 725, 726, 729, 730, 734, 735, 739, 740, 744, 745, 748, 749, 750, 751, 753, 757, 758, 761, 762, 764, 766, 767, 768, 771, 772, 773, 775, 776, 777, 778, 779, 781, 786, 788, 789, 791, 792, 793, 802, 805, 806, 811, 812, 817, 818, 819, 821, 822, 823, 825, 826, 828, 831, 833, 836, 838, 840, 842, 844, 846, 849, 851, 854, 855, 857, 859, 860, 861, 863, 866, 867, 868, 870, 871, 873, 874, 876, 877, 879, 880, 882, 883, 885, 886, 888, 889, 892, 893, 895, 897, 899, 900, 902, 903, 905, 906, 908, 909, 911, 912, 913, 915, 916, 918, 919, 921, 922, 924, 925, 927, 928, 930, 931, 933, 934, 936, 937, 938, 941, 943, 946, 948, 951, 953, 954, 957, 959, 962, 963, 966, 967, 970, 971, 974, 975, 978, 979, 982, 983, 986, 987, 990, 992, 993, 996, 997, 1000, 1001, 1004, 1005, 1008, 1009, 1012, 1017, 1019, 1029, 1035, 1036, 1039, 1040, 1041, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1066, 1068, 1071, 1073, 1074, 1077, 1078, 1081, 1082, 1085, 1086, 1089, 1094, 1097, 1098, 1101, 1102, 1105, 1106, 1107, 1110, 1111, 1114], "native_arrai": [2, 9, 129, 130, 159, 165, 171, 180, 181, 183, 191, 277, 316, 317, 395, 397, 398, 399, 400, 401, 402, 406, 417, 425, 434, 437, 462, 484, 500, 512, 530, 533, 550, 553, 570, 573, 574, 577, 594, 607, 618, 619, 622, 679, 680, 686, 689, 690, 693, 722, 725, 726, 729, 740, 749, 750, 751, 752, 753, 754, 758, 766, 767, 774, 777, 778, 781, 812, 817, 818, 819, 854, 857, 860, 861, 866, 867, 871, 873, 874, 877, 879, 922, 924, 937, 938, 941, 948, 951, 953, 954, 957, 967, 970, 971, 974, 979, 982, 992, 1001, 1004, 1035, 1036, 1039, 1040, 1041, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1073, 1074, 1077, 1078, 1081, 1101, 1106, 1107, 1110], "argsort": [2, 151, 152, 183, 338, 339, 1062], "descend": [2, 11, 93, 151, 152, 183, 193, 269, 278, 293, 338, 339, 867, 916, 918, 919, 921, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072], "stabl": [2, 11, 93, 151, 152, 183, 193, 269, 278, 293, 338, 339, 347, 367, 384, 749, 784, 785, 807, 808, 813, 814, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072], "asin": [2, 127, 128, 183, 314, 315, 512, 1115], "asinh": [2, 127, 128, 183, 314, 315, 512, 1115], "atan": [2, 127, 128, 183, 314, 315, 512, 546, 1115], "atan2": [2, 127, 128, 183, 314, 315, 512, 1115], "atanh": [2, 127, 128, 183, 314, 315, 512, 541, 739, 744, 1115], "binary_cross_entropi": [2, 139, 140, 183, 326, 327, 937], "pred": [2, 17, 33, 94, 139, 140, 183, 201, 216, 270, 279, 282, 294, 326, 327, 357, 361, 364, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952], "epsilon": [2, 17, 33, 55, 94, 139, 140, 143, 144, 183, 187, 201, 216, 234, 236, 270, 275, 279, 282, 286, 294, 318, 319, 326, 327, 330, 331, 357, 361, 364, 371, 823, 825, 826, 827, 828, 829, 836, 837, 838, 839, 867, 888, 897, 899, 906, 908, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 1035, 1036, 1037, 1038, 1039, 1150, 1151, 1152, 1153, 1154], "1e": [2, 17, 33, 55, 94, 139, 140, 143, 144, 183, 187, 201, 216, 234, 236, 270, 275, 279, 282, 286, 294, 318, 319, 326, 327, 330, 331, 357, 361, 364, 371, 372, 749, 785, 823, 825, 826, 827, 828, 829, 836, 837, 838, 839, 867, 916, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 1035, 1036, 1037, 1038, 1039, 1115, 1152, 1153, 1154, 1155, 1157], "07": [2, 17, 33, 94, 139, 140, 183, 187, 201, 216, 234, 270, 275, 279, 282, 286, 294, 318, 319, 326, 327, 371, 823, 825, 826, 827, 828, 829, 836, 837, 838, 839, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 1152, 1153, 1154], "bitwise_and": [2, 127, 128, 183, 314, 315, 512], "bitwise_invert": [2, 127, 128, 183, 314, 315, 512], "bitwise_left_shift": [2, 127, 128, 183, 314, 315, 512], "bitwise_or": [2, 127, 128, 183, 314, 315, 512], "bitwise_right_shift": [2, 127, 128, 183, 314, 315, 512], "bitwise_xor": [2, 127, 128, 183, 314, 315, 512], "can_cast": [2, 123, 124, 183, 280, 310, 311, 357, 362, 425, 438], "dtype": [2, 24, 82, 101, 123, 124, 153, 154, 178, 179, 183, 208, 259, 280, 300, 310, 311, 340, 341, 352, 354, 357, 362, 363, 369, 406, 407, 408, 409, 410, 411, 413, 414, 415, 418, 419, 420, 423, 424, 425, 429, 430, 431, 432, 434, 435, 436, 437, 438, 439, 440, 441, 442, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 461, 462, 502, 512, 566, 569, 749, 757, 758, 802, 818, 854, 862, 953, 967, 970, 1035, 1036, 1039, 1040, 1046, 1048, 1052, 1053, 1054, 1062, 1068, 1071, 1073, 1074, 1090, 1091, 1092, 1093, 1094, 1097, 1098, 1099, 1100, 1106, 1107, 1110, 1115, 1127, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1158, 1159], "float32": [2, 24, 123, 124, 183, 208, 280, 310, 311, 354, 362, 425, 429, 430, 434, 435, 436, 437, 438, 446, 1035, 1036, 1039], "float64": [2, 24, 123, 124, 362, 425, 431, 434, 435, 437, 446], "bool": [2, 24, 116, 117, 118, 119, 120, 123, 124, 178, 179, 183, 189, 344, 345, 354, 361, 362, 364, 372, 403, 404, 406, 413, 425, 431, 434, 435, 437, 440, 441, 442, 443, 446, 449, 450, 451, 461, 462, 481, 482, 497, 506, 509, 512, 550, 553, 554, 557, 562, 565, 570, 573, 591, 594, 615, 618, 619, 622, 623, 626, 627, 630, 631, 634, 635, 638, 639, 642, 663, 666, 667, 670, 671, 674, 690, 693, 749, 750, 753, 757, 758, 767, 770, 774, 776, 786, 788, 793, 795, 796, 797, 798, 811, 821, 822, 823, 849, 867, 868, 870, 893, 895, 916, 931, 933, 953, 992, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1023, 1027, 1028, 1029, 1040, 1041, 1052, 1053, 1054, 1062, 1063, 1066, 1068, 1071, 1073, 1078, 1081, 1082, 1085, 1086, 1089, 1090, 1093, 1094, 1097, 1098, 1102, 1105, 1106, 1107, 1110, 1111, 1114], "ceil": [2, 127, 128, 183, 314, 315, 406, 407, 512, 1115], "choleski": [2, 137, 138, 180, 181, 867], "upper": [2, 26, 137, 138, 178, 179, 406, 411, 422, 867, 868, 869, 870, 909, 911, 1040, 1046, 1048], "clip": [2, 141, 142, 178, 179, 183, 281, 328, 329, 357, 361, 364, 367, 370, 372, 512, 679, 680, 749, 761, 762, 764, 953, 958, 1115], "x_min": [2, 27, 141, 142, 178, 179, 183, 210, 281, 328, 329, 367, 372, 953, 954, 955, 956, 957, 958], "x_max": [2, 27, 141, 142, 178, 179, 183, 210, 281, 328, 329, 367, 372, 953, 954, 955, 956, 957, 958], "roll": [2, 27, 141, 142, 183, 292, 328, 329, 361, 365, 953, 954, 955, 991], "8": [2, 27, 141, 142, 180, 181, 183, 276, 290, 314, 315, 332, 333, 347, 350, 354, 361, 366, 370, 395, 399, 462, 484, 512, 525, 529, 550, 553, 574, 577, 582, 594, 618, 619, 622, 659, 679, 680, 706, 709, 722, 725, 726, 729, 740, 749, 758, 777, 854, 861, 867, 871, 873, 874, 877, 879, 903, 905, 922, 924, 937, 938, 941, 953, 954, 955, 957, 971, 974, 979, 982, 992, 1040, 1041, 1042, 1043, 1044, 1052, 1056, 1057, 1058, 1073, 1074, 1077, 1101, 1115, 1136, 1147], "concat": [2, 141, 142, 178, 179, 183, 328, 329, 462, 491, 492, 493, 494, 506, 749, 776, 953, 1115], "xs": [2, 28, 141, 142, 183, 212, 328, 329, 361, 462, 485, 489, 491, 492, 493, 749, 750, 753, 758, 823, 830, 953, 959, 960, 961, 962], "constant_pad": [2, 141, 142, 183, 328, 329, 953], "pad_width": [2, 29, 115, 141, 142, 183, 213, 307, 328, 329, 953, 963, 964, 965, 966, 1009, 1010, 1011, 1012], "valu": [2, 29, 141, 142, 178, 179, 180, 181, 182, 183, 213, 307, 328, 329, 348, 354, 356, 357, 361, 362, 363, 364, 365, 367, 369, 372, 384, 406, 407, 411, 413, 414, 415, 416, 425, 431, 440, 441, 442, 462, 474, 505, 506, 512, 513, 516, 517, 525, 530, 533, 538, 574, 577, 589, 591, 594, 595, 598, 607, 610, 611, 614, 615, 618, 619, 622, 635, 638, 639, 642, 679, 680, 681, 684, 690, 693, 694, 697, 698, 701, 706, 709, 740, 745, 748, 749, 761, 762, 764, 765, 770, 776, 777, 778, 781, 787, 790, 794, 804, 805, 806, 807, 808, 809, 822, 823, 825, 826, 828, 830, 836, 838, 849, 853, 854, 855, 856, 857, 858, 859, 860, 861, 864, 865, 866, 867, 876, 888, 897, 899, 906, 908, 909, 911, 912, 913, 915, 916, 918, 919, 921, 931, 933, 953, 954, 957, 963, 964, 965, 966, 979, 982, 983, 986, 1009, 1011, 1012, 1013, 1014, 1015, 1017, 1021, 1022, 1023, 1024, 1025, 1030, 1033, 1034, 1035, 1036, 1039, 1040, 1041, 1042, 1043, 1045, 1046, 1048, 1050, 1052, 1053, 1054, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1066, 1068, 1071, 1073, 1078, 1081, 1082, 1085, 1086, 1089, 1090, 1093, 1094, 1097, 1098, 1102, 1105, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1156], "co": [2, 127, 128, 174, 183, 314, 315, 367, 383, 512, 520, 521, 585, 749, 776, 1115], "cosh": [2, 127, 128, 183, 314, 315, 512, 520, 521, 1115], "cross": [2, 137, 138, 180, 181, 867, 937, 938, 941, 943, 946, 948, 951, 1115], "cross_entropi": [2, 139, 140, 183, 326, 327, 357, 361, 364, 937, 948, 951], "det": [2, 137, 138, 180, 181, 867, 912], "diagon": [2, 137, 138, 180, 181, 406, 411, 421, 422, 867, 925, 927], "offset": [2, 35, 55, 109, 137, 138, 143, 144, 183, 236, 330, 331, 867, 877, 878, 879, 925, 926, 927, 1035, 1036, 1037, 1038, 1039], "axis1": [2, 35, 104, 137, 138, 141, 142, 183, 301, 328, 329, 867, 877, 878, 879, 953, 1001, 1002, 1003, 1004], "axis2": [2, 35, 137, 138, 867, 877, 878, 879], "divid": [2, 127, 128, 178, 179, 183, 314, 315, 354, 360, 512, 610, 611, 614, 749, 813, 953, 992], "eigh": [2, 137, 138, 180, 181, 867], "namedtupl": [2, 37, 83, 137, 138, 867, 880, 881, 882, 909, 910, 911, 916, 1057, 1058, 1059], "eigvalsh": [2, 137, 138, 180, 181, 867], "einsum": [2, 153, 154, 183, 340, 341, 1073, 1101], "equat": [2, 39, 153, 154, 183, 218, 340, 341, 867, 913, 915, 1073, 1074, 1075, 1076, 1077, 1101], "equal": [2, 127, 128, 178, 179, 183, 314, 315, 354, 361, 362, 406, 411, 413, 414, 425, 431, 512, 558, 561, 566, 569, 619, 623, 626, 627, 630, 698, 701, 706, 709, 749, 750, 753, 757, 758, 867, 877, 879, 888, 897, 899, 906, 908, 953, 954, 957, 963, 966, 992, 1009, 1012, 1040, 1046, 1048, 1057, 1058, 1059, 1061, 1062, 1063, 1066, 1068, 1071, 1073, 1082, 1085, 1094, 1097, 1098, 1102, 1105], "erf": [2, 127, 128, 183, 314, 315, 512], "exp": [2, 127, 128, 183, 314, 315, 512, 528, 603, 606, 659, 662, 1115], "expand_dim": [2, 141, 142, 183, 328, 329, 367, 370, 953, 1115], "expm1": [2, 127, 128, 183, 314, 315, 512], "flip": [2, 141, 142, 183, 328, 329, 369, 370, 372, 512, 554, 557, 953, 979, 982, 1115], "floor": [2, 127, 128, 183, 314, 315, 512, 566, 569, 611, 749, 775, 1115], "floor_divid": [2, 127, 128, 183, 314, 315, 512, 589, 610], "gather_nd": [2, 129, 130, 178, 179, 183, 284, 316, 317, 749, 782, 1115], "indic": [2, 48, 129, 130, 178, 179, 183, 227, 284, 316, 317, 350, 368, 372, 395, 400, 512, 710, 713, 749, 777, 778, 779, 780, 781, 782, 789, 802, 805, 806, 854, 855, 856, 857, 858, 859, 860, 861, 867, 931, 933, 953, 987, 990, 1017, 1018, 1020, 1022, 1024, 1025, 1026, 1028, 1031, 1032, 1033, 1034, 1035, 1036, 1039, 1040, 1041, 1052, 1053, 1054, 1055, 1057, 1058, 1060, 1062, 1063, 1066, 1068, 1071, 1115, 1118, 1120, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1148, 1149], "union": [2, 48, 102, 116, 119, 120, 129, 130, 137, 138, 178, 179, 352, 354, 357, 360, 361, 362, 363, 364, 365, 367, 372, 395, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 429, 430, 431, 432, 433, 439, 440, 441, 442, 443, 444, 445, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 461, 462, 478, 479, 480, 481, 482, 484, 487, 488, 489, 490, 495, 501, 503, 505, 506, 507, 508, 511, 512, 513, 516, 517, 520, 521, 524, 525, 528, 530, 533, 534, 537, 538, 541, 542, 545, 546, 549, 550, 553, 554, 557, 558, 561, 562, 565, 566, 569, 570, 573, 574, 577, 578, 581, 582, 585, 586, 589, 591, 594, 595, 598, 599, 602, 603, 606, 607, 610, 611, 614, 615, 618, 619, 622, 623, 626, 627, 630, 631, 634, 635, 638, 639, 642, 643, 646, 647, 650, 651, 654, 655, 658, 659, 662, 663, 666, 667, 670, 671, 674, 675, 678, 679, 680, 681, 684, 686, 689, 690, 693, 694, 697, 698, 701, 702, 705, 706, 709, 710, 713, 714, 717, 718, 721, 722, 725, 726, 729, 730, 734, 735, 739, 740, 744, 745, 748, 749, 750, 753, 757, 758, 761, 762, 764, 767, 768, 771, 772, 773, 775, 776, 777, 778, 779, 781, 786, 788, 789, 791, 792, 793, 802, 805, 806, 811, 812, 817, 818, 819, 821, 822, 823, 825, 826, 828, 831, 833, 836, 838, 840, 842, 844, 846, 849, 851, 854, 855, 857, 859, 860, 861, 863, 866, 867, 868, 870, 871, 873, 874, 876, 877, 879, 880, 882, 883, 885, 886, 888, 889, 892, 893, 895, 897, 899, 900, 902, 903, 905, 906, 908, 909, 911, 912, 913, 915, 916, 917, 918, 919, 921, 922, 924, 925, 927, 928, 930, 931, 933, 934, 936, 937, 938, 941, 943, 946, 948, 951, 953, 954, 957, 959, 962, 963, 966, 967, 970, 971, 974, 975, 978, 979, 982, 983, 986, 987, 990, 992, 993, 996, 997, 1000, 1001, 1004, 1005, 1008, 1009, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1028, 1029, 1035, 1036, 1039, 1040, 1041, 1042, 1043, 1045, 1046, 1048, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1066, 1068, 1071, 1073, 1074, 1077, 1078, 1081, 1082, 1085, 1086, 1089, 1094, 1097, 1098, 1101, 1102, 1105, 1106, 1107, 1110, 1111, 1114], "greater": [2, 127, 128, 178, 179, 183, 314, 315, 512, 517, 530, 533, 542, 545, 558, 561, 566, 569, 589, 594, 607, 610, 611, 614, 619, 698, 701, 702, 705, 710, 713, 745, 748, 867, 871, 873, 953, 993, 996, 1040, 1046, 1048], "greater_equ": [2, 127, 128, 183, 314, 315, 512, 594, 618], "inv": [2, 137, 138, 180, 181, 369, 867, 906, 1115], "isfinit": [2, 127, 128, 183, 314, 315, 512], "isinf": [2, 127, 128, 183, 314, 315, 512], "isnan": [2, 127, 128, 183, 314, 315, 512], "layer_norm": [2, 143, 144, 183, 330, 331, 1035], "normalized_idx": [2, 55, 143, 144, 183, 236, 330, 331, 1035, 1036, 1037, 1038, 1039], "05": [2, 55, 143, 144, 183, 236, 330, 331, 462, 1035, 1036, 1037, 1038, 1039], "scale": [2, 55, 143, 144, 183, 236, 330, 331, 361, 462, 504, 505, 823, 840, 842, 854, 862, 865, 866, 1035, 1036, 1037, 1038, 1039, 1136, 1144, 1147, 1152, 1155], "new_std": [2, 55, 143, 144, 183, 236, 330, 331, 1035, 1036, 1037, 1038, 1039, 1150, 1151], "less": [2, 127, 128, 174, 178, 179, 183, 314, 315, 348, 354, 361, 365, 366, 367, 512, 517, 520, 521, 524, 530, 533, 542, 545, 574, 577, 581, 585, 643, 646, 647, 650, 655, 658, 698, 701, 702, 705, 710, 713, 722, 725, 867, 888, 897, 899, 906, 908, 931, 933, 1040, 1046, 1048, 1073, 1102, 1105], "less_equ": [2, 127, 128, 183, 314, 315, 512], "log": [2, 127, 128, 183, 314, 315, 347, 348, 357, 361, 364, 367, 370, 406, 416, 512, 528, 602, 651, 654, 659, 662, 867, 876, 912, 1115], "log10": [2, 127, 128, 183, 314, 315, 512], "log1p": [2, 127, 128, 183, 314, 315, 512], "log2": [2, 127, 128, 183, 314, 315, 512], "logaddexp": [2, 127, 128, 183, 314, 315, 512, 528, 602], "logical_and": [2, 127, 128, 183, 314, 315, 512, 1115], "logical_not": [2, 127, 128, 183, 314, 315, 512, 1115], "logical_or": [2, 127, 128, 183, 314, 315, 512, 1115], "logical_xor": [2, 127, 128, 183, 314, 315, 512], "matmul": [2, 137, 138, 183, 324, 325, 352, 358, 367, 867, 916, 1115], "matrix_norm": [2, 137, 138, 178, 179, 867], "ord": [2, 68, 113, 137, 138, 178, 179, 867, 893, 894, 895, 931, 932, 933], "fro": [2, 68, 137, 138, 867, 893, 894, 895], "matrix_rank": [2, 137, 138, 180, 181, 867], "rtol": [2, 69, 79, 137, 138, 867, 888, 897, 898, 899, 906, 907, 908], "matrix_transpos": [2, 137, 138, 180, 181, 369, 867], "max": [2, 153, 154, 178, 179, 183, 340, 341, 425, 445, 448, 512, 679, 749, 761, 762, 764, 772, 805, 806, 867, 888, 897, 899, 906, 908, 1073, 1152, 1154], "mean": [2, 153, 154, 178, 179, 183, 189, 340, 341, 344, 345, 347, 348, 351, 354, 357, 361, 362, 363, 364, 367, 369, 370, 371, 372, 383, 384, 462, 491, 492, 493, 494, 506, 749, 772, 1013, 1014, 1015, 1016, 1017, 1023, 1040, 1045, 1057, 1058, 1073, 1115, 1127], "min": [2, 153, 154, 178, 179, 183, 340, 341, 425, 445, 448, 512, 680, 749, 772, 805, 806, 813, 867, 909, 911, 916, 918, 919, 921, 931, 933, 1073], "multipli": [2, 127, 128, 183, 314, 315, 354, 358, 360, 512, 749, 767], "neg": [2, 127, 128, 183, 314, 315, 357, 361, 364, 395, 397, 406, 407, 411, 512, 623, 626, 627, 630, 681, 684, 698, 701, 702, 705, 867, 916, 928, 930, 931, 933, 953, 971, 974, 987, 990, 1106, 1107, 1110, 1111, 1114], "not_equ": [2, 127, 128, 183, 314, 315, 512], "outer": [2, 137, 138, 180, 181, 867, 1013, 1014, 1015, 1016], "permute_dim": [2, 141, 142, 183, 328, 329, 953], "ax": [2, 78, 107, 137, 138, 141, 142, 178, 179, 183, 256, 328, 329, 352, 354, 362, 369, 462, 506, 749, 767, 867, 893, 895, 913, 915, 922, 923, 924, 931, 933, 953, 963, 966, 971, 974, 975, 976, 977, 978, 987, 990, 993, 996, 1001, 1004, 1009, 1012, 1052, 1053, 1054, 1073, 1078, 1081, 1082, 1085, 1086, 1089, 1090, 1093, 1094, 1097, 1098, 1102, 1105, 1106, 1107, 1110, 1111, 1114], "pinv": [2, 137, 138, 180, 181, 867, 888, 1115], "posit": [2, 116, 117, 118, 127, 128, 183, 314, 315, 365, 370, 383, 405, 406, 411, 425, 445, 462, 486, 490, 494, 512, 513, 516, 623, 626, 627, 630, 681, 684, 702, 705, 749, 776, 867, 868, 870, 953, 967, 970, 987, 990, 1040, 1050, 1052, 1055, 1106, 1107, 1110, 1111, 1114, 1125, 1126], "pow": [2, 127, 128, 183, 314, 315, 512], "prod": [2, 153, 154, 178, 179, 183, 340, 341, 354, 362, 749, 772, 1073], "qr": [2, 137, 138, 180, 181, 867], "mode": [2, 83, 137, 138, 178, 179, 347, 354, 361, 384, 403, 404, 462, 491, 492, 493, 494, 506, 512, 525, 681, 684, 867, 909, 910, 911], "reduc": [2, 83, 137, 138, 178, 179, 369, 462, 506, 749, 772, 867, 909, 910, 911, 1052, 1053, 1054, 1073, 1078, 1081, 1082, 1085, 1086, 1089, 1090, 1093, 1094, 1097, 1098, 1102, 1105, 1106, 1107, 1110, 1111, 1114], "remaind": [2, 127, 128, 178, 179, 183, 314, 315, 512, 749, 775, 953, 992], "repeat": [2, 141, 142, 178, 179, 183, 328, 329, 348, 353, 354, 358, 360, 361, 749, 773, 953, 1005, 1008], "reshap": [2, 141, 142, 178, 179, 183, 328, 329, 364, 367, 369, 372, 953, 1115], "shape": [2, 86, 141, 142, 178, 179, 183, 263, 290, 291, 328, 329, 332, 333, 348, 352, 353, 354, 362, 363, 364, 365, 367, 369, 370, 371, 372, 395, 398, 406, 409, 410, 413, 414, 417, 419, 420, 421, 422, 423, 424, 425, 431, 432, 433, 462, 474, 502, 507, 512, 513, 516, 517, 520, 521, 524, 525, 528, 530, 533, 534, 537, 538, 542, 545, 550, 553, 554, 557, 558, 561, 562, 565, 566, 569, 570, 573, 574, 577, 578, 581, 582, 585, 594, 599, 602, 603, 606, 607, 618, 619, 622, 623, 626, 627, 630, 631, 634, 635, 638, 643, 646, 647, 650, 651, 654, 655, 658, 659, 662, 663, 666, 667, 670, 671, 674, 675, 678, 681, 684, 686, 689, 690, 693, 698, 701, 702, 705, 706, 709, 710, 713, 714, 717, 718, 721, 722, 725, 726, 729, 730, 734, 735, 740, 749, 762, 764, 775, 778, 781, 786, 802, 805, 806, 812, 854, 856, 857, 858, 860, 861, 866, 867, 868, 870, 871, 873, 874, 877, 879, 880, 882, 883, 885, 886, 888, 889, 892, 897, 899, 900, 902, 903, 905, 906, 908, 909, 911, 913, 915, 916, 918, 919, 921, 925, 927, 928, 930, 937, 938, 941, 943, 946, 948, 951, 953, 954, 957, 959, 962, 963, 966, 967, 970, 971, 974, 975, 978, 979, 982, 983, 984, 985, 986, 987, 990, 992, 993, 996, 997, 1000, 1001, 1004, 1009, 1012, 1040, 1042, 1043, 1044, 1045, 1046, 1048, 1049, 1052, 1053, 1055, 1062, 1063, 1066, 1068, 1071, 1073, 1074, 1077, 1101, 1106, 1107, 1110, 1111, 1114, 1115, 1136, 1138, 1139, 1140, 1141, 1142, 1143, 1150, 1151], "shift": [2, 87, 141, 142, 183, 264, 292, 328, 329, 354, 365, 512, 558, 561, 566, 569, 953, 987, 988, 989, 990, 991], "round": [2, 127, 128, 173, 174, 175, 183, 314, 315, 347, 348, 349, 350, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 367, 369, 370, 371, 372, 383, 512, 525, 574, 577, 589, 607, 610, 611, 614, 681, 684, 722, 725, 745, 748, 1115], "sign": [2, 127, 128, 174, 183, 314, 315, 347, 368, 372, 406, 407, 512, 513, 516, 525, 542, 545, 566, 569, 681, 684, 702, 705, 867, 876, 912, 1057, 1058, 1059, 1061, 1073, 1090, 1093, 1098], "sin": [2, 127, 128, 183, 314, 315, 360, 367, 512, 749, 776, 1115], "sinh": [2, 127, 128, 183, 314, 315, 512, 1115], "solv": [2, 137, 138, 180, 181, 368, 383, 867], "sort": [2, 152, 178, 179, 180, 181, 182, 183, 339, 352, 867, 880, 882, 916, 918, 919, 921, 1063, 1066], "sparse_cross_entropi": [2, 139, 140, 183, 326, 327, 937], "sqrt": [2, 127, 128, 183, 314, 315, 512, 867, 931, 933], "squar": [2, 127, 128, 183, 314, 315, 512, 722, 725, 854, 857, 867, 868, 870, 874, 876, 880, 882, 883, 885, 886, 896, 912, 913, 915, 916], "squeez": [2, 141, 142, 183, 328, 329, 953, 1115], "stack": [2, 141, 142, 178, 179, 183, 328, 329, 367, 406, 421, 422, 867, 874, 877, 879, 880, 882, 883, 885, 886, 888, 889, 892, 896, 897, 899, 900, 902, 906, 908, 909, 911, 916, 918, 919, 921, 925, 927, 953, 1017, 1018, 1027, 1028, 1115, 1136, 1145], "std": [2, 153, 154, 183, 340, 341, 354, 1040, 1045, 1057, 1058, 1073], "correct": [2, 99, 111, 153, 154, 183, 298, 306, 340, 341, 348, 349, 351, 357, 361, 362, 363, 365, 425, 457, 953, 954, 957, 1073, 1094, 1095, 1096, 1097, 1102, 1103, 1104, 1105, 1115], "subtract": [2, 127, 128, 183, 314, 315, 354, 360, 512], "sum": [2, 153, 154, 178, 179, 183, 340, 341, 357, 361, 362, 364, 367, 462, 491, 492, 493, 494, 506, 512, 525, 528, 602, 659, 662, 749, 768, 772, 805, 806, 854, 866, 867, 916, 925, 927, 931, 933, 1073, 1074, 1077, 1094, 1097], "svd": [2, 137, 138, 180, 181, 867, 919, 1115], "full_matric": [2, 102, 137, 138, 867, 916, 917, 919], "tupl": [2, 102, 116, 117, 118, 119, 120, 137, 138, 178, 179, 352, 361, 362, 363, 365, 369, 370, 371, 384, 403, 404, 406, 408, 409, 413, 418, 419, 423, 425, 433, 447, 462, 481, 749, 776, 812, 854, 857, 860, 861, 867, 888, 897, 899, 906, 908, 916, 917, 919, 922, 924, 931, 933, 953, 959, 962, 963, 966, 971, 974, 975, 978, 987, 990, 993, 996, 997, 1000, 1009, 1012, 1013, 1014, 1015, 1016, 1017, 1019, 1020, 1022, 1024, 1025, 1026, 1028, 1029, 1031, 1032, 1033, 1034, 1040, 1045, 1046, 1048, 1052, 1055, 1057, 1058, 1059, 1060, 1073, 1078, 1081, 1082, 1085, 1086, 1089, 1090, 1093, 1094, 1097, 1098, 1102, 1105, 1106, 1107, 1110, 1111, 1114], "svdval": [2, 137, 138, 180, 181, 867, 918], "swapax": [2, 141, 142, 183, 328, 329, 953], "axis0": [2, 104, 141, 142, 183, 301, 328, 329, 953, 1001, 1002, 1003, 1004], "tan": [2, 127, 128, 183, 296, 314, 315, 353, 357, 361, 364, 365, 367, 512, 530, 533, 541, 546, 736, 744, 1057, 1058, 1059, 1062, 1063, 1066, 1115], "56": [2, 105, 127, 128, 183, 296, 302, 314, 315, 354, 512, 541, 546, 722, 725, 735, 736, 737, 738, 744, 867, 903, 905, 1073, 1074, 1077, 1101], "19": [2, 105, 127, 128, 183, 296, 302, 314, 315, 354, 512, 541, 546, 570, 573, 735, 736, 737, 738, 744, 867, 877, 879], "tanh": [2, 127, 128, 183, 297, 314, 315, 367, 395, 512, 541, 546, 741, 1115], "762": [2, 106, 127, 128, 183, 303, 314, 315, 395, 402, 512, 541, 546, 740, 742, 743], "964": [2, 106, 127, 128, 183, 303, 314, 315, 395, 402, 512, 541, 546, 740, 742, 743], "tensordot": [2, 137, 138, 180, 181, 867], "tile": [2, 141, 142, 183, 328, 329, 953, 1115], "rep": [2, 108, 141, 142, 183, 304, 328, 329, 953, 1005, 1006, 1007, 1008], "trace": [2, 137, 138, 178, 179, 180, 181, 367, 384, 749, 795, 796, 798, 867], "trunc": [2, 127, 128, 183, 314, 315, 512], "var": [2, 153, 154, 183, 189, 340, 341, 344, 345, 354, 367, 1013, 1014, 1015, 1073], "vecdot": [2, 137, 138, 180, 181, 867], "vector_norm": [2, 137, 138, 178, 179, 867], "vector_to_skew_symmetric_matrix": [2, 137, 138, 180, 181, 867, 1115], "zero_pad": [2, 141, 142, 183, 328, 329, 953, 1115], "method": [3, 6, 7, 9, 24, 25, 27, 46, 48, 87, 105, 106, 123, 124, 127, 128, 129, 130, 141, 142, 157, 158, 178, 179, 180, 181, 182, 188, 189, 191, 208, 209, 210, 225, 227, 264, 276, 277, 280, 281, 284, 290, 292, 296, 297, 302, 303, 310, 311, 314, 315, 316, 317, 328, 329, 332, 333, 344, 345, 349, 352, 353, 354, 356, 357, 360, 365, 367, 368, 371, 372, 384, 395, 397, 398, 399, 400, 401, 402, 406, 412, 417, 434, 435, 436, 438, 512, 513, 514, 526, 527, 529, 530, 533, 541, 546, 550, 553, 570, 573, 574, 575, 576, 577, 582, 594, 607, 608, 609, 611, 618, 619, 622, 659, 679, 680, 686, 689, 690, 693, 706, 709, 722, 725, 726, 729, 736, 737, 738, 740, 741, 742, 743, 744, 749, 750, 751, 752, 754, 765, 766, 777, 778, 779, 780, 782, 805, 806, 817, 819, 823, 836, 838, 840, 842, 854, 860, 866, 867, 868, 870, 871, 873, 874, 937, 938, 941, 953, 954, 955, 956, 958, 967, 970, 971, 974, 979, 982, 987, 988, 989, 991, 992, 1001, 1004, 1017, 1018, 1028, 1029, 1030, 1035, 1036, 1039, 1040, 1042, 1044, 1045, 1046, 1048, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1062, 1063, 1066, 1073, 1074, 1077, 1078, 1081, 1101, 1106, 1107, 1110, 1115, 1136, 1147, 1148, 1149], "collect": [116, 178, 179, 356, 383, 395, 403, 462, 749, 823, 854, 937, 1017, 1030, 1035, 1040, 1122, 1136, 1150, 1152], "accept": [116, 347, 348, 353, 354, 356, 357, 360, 361, 363, 364, 365, 369, 406, 417, 425, 434, 437, 512, 525, 530, 533, 550, 553, 570, 573, 574, 577, 582, 607, 667, 670, 671, 674, 690, 693, 702, 705, 706, 709, 722, 725, 726, 729, 735, 740, 749, 777, 854, 857, 866, 867, 874, 953, 967, 970, 971, 974, 987, 990, 1035, 1036, 1039, 1057, 1058, 1059, 1062, 1063, 1066, 1073, 1078, 1081, 1082, 1085, 1106, 1107, 1110, 1115], "args_to_ivi": 116, "arg": [116, 117, 118, 159, 163, 178, 179, 350, 367, 369, 371, 462, 471, 486, 490, 494, 506, 749, 806, 1125, 1126, 1148, 1149], "include_deriv": [116, 117, 118, 119, 120, 1017, 1019, 1029], "kwarg": [116, 117, 118, 159, 163, 176, 177, 178, 179, 180, 181, 182, 183, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 367, 369, 371, 462, 471, 486, 490, 494, 749, 799, 1125, 1126, 1148, 1149], "keyword": [116, 117, 118, 178, 179, 180, 181, 182, 352, 362, 363, 364, 365, 370, 406, 417, 462, 471, 472, 486, 490, 494, 749, 756, 799, 1017, 1023, 1073, 1098, 1148, 1149], "variabl": [116, 117, 118, 119, 120, 178, 179, 180, 181, 353, 358, 361, 362, 364, 365, 370, 371, 372, 384, 749, 759, 791, 792, 793, 794, 795, 796, 798, 815, 823, 826, 828, 830, 831, 833, 835, 836, 838, 840, 842, 844, 846, 849, 852, 854, 865, 867, 913, 915, 1013, 1014, 1015, 1016, 1035, 1036, 1039, 1115, 1125, 1126, 1127, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159], "form": [116, 117, 118, 119, 120, 174, 178, 179, 346, 357, 371, 372, 406, 408, 418, 421, 422, 749, 755, 823, 826, 828, 831, 833, 836, 838, 840, 842, 844, 846, 854, 867, 868, 870, 874, 877, 879, 880, 882, 883, 885, 886, 888, 897, 899, 900, 902, 906, 908, 909, 911, 913, 915, 916, 918, 919, 921, 925, 927, 1017, 1019, 1029], "nest": [116, 117, 118, 119, 120, 178, 179, 180, 181, 182, 352, 357, 360, 361, 369, 370, 371, 384, 462, 486, 490, 494, 749, 817, 1013, 1014, 1015, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1148, 1149, 1152, 1153, 1154, 1155, 1156, 1157], "otherwis": [116, 117, 118, 119, 120, 159, 171, 178, 179, 360, 362, 363, 365, 367, 369, 406, 407, 425, 431, 434, 437, 440, 441, 442, 462, 481, 512, 623, 626, 627, 630, 631, 634, 749, 759, 820, 823, 835, 849, 867, 868, 870, 874, 928, 930, 931, 933, 1013, 1014, 1015, 1017, 1030, 1052, 1053, 1054, 1056, 1073, 1078, 1081, 1082, 1085, 1086, 1089, 1090, 1093, 1094, 1097, 1098, 1102, 1105, 1106, 1107, 1110, 1111, 1114], "argument": [116, 117, 118, 119, 120, 159, 163, 164, 173, 178, 179, 180, 181, 182, 349, 351, 352, 353, 354, 356, 357, 358, 360, 361, 367, 369, 370, 403, 404, 406, 407, 425, 434, 437, 453, 462, 471, 472, 486, 490, 494, 512, 525, 530, 533, 574, 577, 607, 690, 693, 722, 725, 726, 729, 735, 749, 755, 756, 760, 770, 777, 799, 806, 854, 857, 866, 953, 987, 990, 1017, 1023, 1035, 1036, 1039, 1073, 1078, 1081, 1098, 1106, 1107, 1110, 1118, 1120, 1125, 1126, 1148, 1149], "ar": [116, 117, 118, 173, 174, 175, 178, 179, 180, 181, 182, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 383, 384, 385, 393, 406, 407, 462, 471, 472, 496, 500, 502, 506, 512, 578, 667, 670, 671, 674, 706, 709, 714, 717, 735, 749, 750, 753, 757, 758, 759, 783, 789, 790, 794, 801, 803, 815, 854, 863, 867, 871, 873, 888, 889, 892, 893, 895, 897, 899, 906, 908, 916, 918, 919, 921, 928, 930, 953, 954, 957, 971, 974, 987, 990, 1017, 1019, 1023, 1029, 1040, 1045, 1046, 1048, 1052, 1053, 1054, 1055, 1057, 1058, 1115, 1158, 1159], "unchang": [116, 117, 118, 119, 120], "The": [116, 117, 118, 119, 120, 159, 163, 164, 172, 173, 175, 178, 179, 180, 181, 182, 346, 347, 349, 350, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 370, 371, 372, 383, 395, 396, 397, 400, 402, 403, 404, 406, 407, 412, 416, 417, 421, 422, 425, 429, 430, 431, 439, 444, 446, 447, 449, 452, 457, 461, 462, 471, 472, 478, 479, 480, 481, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 500, 501, 502, 503, 504, 505, 506, 508, 511, 512, 513, 516, 517, 520, 521, 524, 525, 528, 530, 533, 534, 537, 538, 541, 542, 545, 546, 549, 550, 553, 554, 557, 558, 561, 562, 565, 566, 569, 570, 573, 574, 577, 578, 581, 582, 585, 586, 589, 591, 594, 595, 598, 599, 602, 603, 606, 607, 610, 611, 614, 615, 618, 619, 622, 623, 626, 627, 630, 631, 634, 635, 638, 639, 642, 643, 646, 647, 650, 655, 658, 659, 662, 663, 666, 667, 670, 671, 674, 675, 678, 681, 684, 690, 693, 698, 701, 702, 705, 706, 709, 710, 713, 714, 717, 718, 721, 722, 725, 735, 739, 740, 744, 745, 748, 749, 755, 757, 760, 761, 769, 770, 776, 778, 781, 791, 792, 793, 795, 796, 797, 798, 800, 805, 806, 807, 808, 809, 812, 813, 814, 822, 823, 825, 826, 828, 831, 833, 836, 838, 840, 842, 844, 846, 849, 852, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 865, 866, 867, 868, 870, 871, 873, 874, 876, 877, 879, 880, 882, 883, 885, 886, 888, 893, 895, 897, 899, 900, 902, 903, 905, 906, 908, 909, 911, 912, 913, 915, 916, 918, 919, 921, 922, 924, 925, 927, 928, 930, 931, 933, 937, 938, 941, 943, 946, 948, 951, 953, 959, 962, 963, 966, 967, 970, 971, 974, 975, 978, 979, 982, 983, 986, 992, 1005, 1008, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1039, 1040, 1041, 1045, 1052, 1053, 1054, 1055, 1057, 1058, 1059, 1061, 1062, 1063, 1066, 1068, 1071, 1073, 1074, 1077, 1078, 1081, 1082, 1085, 1086, 1089, 1090, 1093, 1094, 1097, 1098, 1101, 1102, 1105, 1106, 1107, 1110, 1111, 1114, 1115, 1125, 1126, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1154, 1155, 1156], "check": [116, 117, 118, 119, 120, 173, 174, 175, 178, 179, 347, 348, 361, 366, 367, 369, 370, 371, 372, 383, 425, 439, 446, 447, 449, 461, 462, 501, 511, 749, 759, 774, 788, 795, 796, 797, 798, 815, 822, 823, 835, 867, 880, 882, 1017, 1018, 1027, 1028, 1029, 1115], "dict": [116, 117, 118, 119, 120, 159, 171, 178, 179, 180, 181, 182, 361, 370, 371, 462, 471, 472, 481, 484, 487, 488, 489, 490, 749, 755, 771, 772, 773, 1017, 1019, 1020, 1023, 1026, 1029, 1030], "whether": [116, 117, 118, 119, 120, 178, 179, 180, 181, 182, 183, 189, 344, 345, 346, 347, 362, 364, 365, 395, 396, 403, 404, 425, 431, 443, 449, 450, 451, 461, 462, 481, 482, 493, 497, 498, 501, 502, 506, 509, 511, 512, 631, 634, 749, 750, 753, 757, 758, 767, 770, 774, 776, 786, 788, 790, 793, 794, 795, 796, 797, 798, 799, 811, 815, 821, 822, 823, 826, 828, 830, 831, 833, 835, 836, 838, 840, 842, 844, 846, 849, 854, 862, 867, 880, 882, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1023, 1027, 1028, 1029, 1030, 1040, 1041, 1106, 1107, 1110, 1111, 1114, 1125, 1126, 1136, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157], "recurs": [116, 117, 118, 119, 120, 178, 179, 347, 350, 357, 361, 371, 384, 1017, 1018, 1019, 1027, 1028, 1029], "deriv": [116, 117, 118, 119, 120, 362, 363, 369, 371, 406, 410, 414, 420, 424, 823, 825, 826, 828, 831, 833, 836, 838, 840, 842, 844, 846, 1017, 1019, 1029, 1148, 1152, 1156, 1158], "str": [116, 117, 118, 159, 164, 178, 179, 362, 363, 406, 417, 425, 429, 439, 440, 441, 444, 445, 448, 449, 450, 451, 454, 455, 456, 461, 462, 478, 481, 482, 484, 487, 488, 489, 490, 506, 749, 755, 769, 771, 772, 773, 800, 805, 806, 854, 855, 857, 859, 860, 861, 867, 909, 911, 1013, 1014, 1015, 1016, 1017, 1023, 1073, 1074, 1077, 1101], "kei": [116, 117, 118, 178, 179, 180, 181, 182, 361, 370, 462, 474, 749, 755, 765, 854, 865, 866, 1013, 1014, 1015, 1017, 1020, 1026, 1030, 1125, 1126, 1136, 1147, 1152, 1156], "word": [116, 117, 118, 406, 407, 1040, 1046, 1048, 1125, 1126], "ret": [116, 117, 118, 119, 120, 159, 163, 164, 171, 178, 179, 352, 353, 367, 372, 395, 396, 397, 398, 399, 400, 401, 402, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 429, 430, 431, 432, 433, 434, 437, 439, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 461, 462, 471, 478, 479, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 505, 506, 507, 508, 509, 511, 512, 513, 516, 517, 520, 521, 524, 525, 528, 530, 533, 534, 537, 538, 541, 542, 545, 546, 549, 550, 553, 554, 557, 558, 561, 562, 565, 566, 569, 570, 573, 574, 577, 578, 581, 582, 585, 586, 589, 591, 594, 595, 598, 599, 602, 603, 606, 607, 610, 611, 614, 615, 618, 619, 622, 623, 626, 627, 630, 631, 634, 635, 638, 639, 642, 643, 646, 647, 650, 651, 654, 655, 658, 659, 662, 663, 666, 667, 670, 671, 674, 675, 678, 679, 680, 681, 684, 686, 689, 690, 693, 694, 697, 698, 701, 702, 705, 706, 709, 710, 713, 714, 717, 718, 721, 722, 725, 726, 729, 730, 734, 735, 739, 740, 744, 745, 748, 749, 750, 753, 755, 757, 758, 759, 760, 761, 762, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 781, 785, 786, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 802, 805, 806, 811, 813, 814, 815, 817, 818, 819, 821, 822, 823, 825, 826, 828, 830, 831, 833, 835, 836, 838, 840, 842, 844, 846, 849, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 870, 871, 873, 874, 876, 877, 879, 880, 882, 883, 885, 886, 888, 889, 892, 893, 895, 897, 899, 900, 902, 903, 905, 906, 908, 909, 911, 912, 913, 915, 916, 918, 919, 921, 922, 924, 925, 927, 928, 930, 931, 933, 934, 936, 937, 938, 941, 943, 946, 948, 951, 953, 954, 957, 959, 962, 963, 966, 967, 970, 971, 974, 975, 978, 979, 982, 983, 986, 987, 990, 992, 993, 996, 997, 1000, 1001, 1004, 1005, 1008, 1009, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1023, 1027, 1028, 1029, 1035, 1036, 1039, 1040, 1041, 1042, 1043, 1045, 1046, 1048, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1066, 1068, 1071, 1073, 1074, 1077, 1078, 1081, 1082, 1085, 1086, 1089, 1090, 1093, 1094, 1097, 1098, 1101, 1102, 1105, 1106, 1107, 1110, 1111, 1114, 1118, 1120, 1125, 1126, 1152, 1156], "same": [116, 117, 118, 173, 175, 178, 179, 347, 348, 350, 352, 354, 356, 357, 360, 361, 363, 364, 365, 367, 369, 371, 372, 406, 407, 410, 414, 417, 420, 421, 422, 424, 425, 431, 432, 433, 462, 471, 472, 506, 512, 513, 516, 525, 554, 557, 574, 577, 607, 681, 684, 702, 705, 706, 709, 710, 713, 745, 748, 749, 775, 777, 778, 781, 802, 805, 806, 823, 835, 849, 854, 855, 856, 857, 858, 859, 860, 861, 866, 867, 868, 870, 871, 873, 874, 877, 879, 880, 882, 883, 885, 886, 888, 900, 902, 906, 908, 909, 911, 913, 915, 916, 925, 927, 928, 930, 953, 959, 962, 971, 974, 975, 978, 987, 990, 993, 996, 997, 1000, 1013, 1014, 1015, 1017, 1030, 1057, 1058, 1059, 1061, 1062, 1063, 1066, 1068, 1071, 1073, 1074, 1077, 1078, 1081, 1082, 1085, 1086, 1089, 1090, 1093, 1098, 1101, 1102, 1105, 1115, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143], "convert": [116, 117, 118, 119, 120, 175, 178, 179, 360, 367, 384, 385, 393, 406, 408, 418, 425, 429, 430, 462, 478, 479, 480, 481, 501, 508, 511, 749, 812, 818, 819, 867, 934, 936, 1017, 1019, 1029, 1030, 1126], "args_to_n": [116, 364, 369], "nativ": [116, 118, 119, 120, 159, 165, 178, 179, 362, 364, 369, 370, 406, 418, 425, 429, 430, 439, 462, 478, 479, 480, 481, 482, 501, 508, 511, 749, 793, 795, 798, 1125, 1126], "backend": [116, 118, 120, 163, 164, 165, 171, 173, 178, 179, 348, 349, 351, 353, 355, 356, 357, 359, 360, 361, 362, 363, 364, 365, 368, 369, 372, 425, 446, 447, 449, 461, 462, 497, 499, 509, 749, 790, 793, 794, 800, 823, 826, 828, 831, 833, 836, 838, 840, 842, 844, 846, 852, 1115, 1121, 1125, 1126, 1152, 1153, 1154, 1155, 1156, 1157], "to_ivi": [116, 178, 179, 369, 1017, 1030], "input": [116, 119, 120, 178, 179, 180, 181, 182, 183, 276, 277, 281, 284, 290, 292, 296, 297, 314, 315, 316, 317, 328, 329, 332, 333, 352, 353, 354, 356, 357, 358, 360, 361, 362, 363, 364, 365, 367, 369, 370, 371, 372, 384, 385, 393, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 408, 410, 412, 414, 417, 418, 420, 421, 422, 424, 425, 431, 432, 434, 437, 439, 440, 441, 442, 443, 444, 450, 451, 452, 453, 457, 462, 471, 472, 481, 482, 483, 484, 486, 487, 490, 494, 500, 506, 507, 512, 513, 516, 517, 520, 521, 524, 525, 528, 529, 530, 533, 534, 537, 538, 541, 542, 545, 546, 549, 550, 553, 554, 557, 558, 561, 562, 565, 566, 569, 570, 573, 574, 577, 578, 581, 582, 585, 586, 589, 591, 594, 599, 602, 603, 606, 607, 610, 611, 614, 615, 618, 619, 622, 623, 626, 627, 630, 631, 634, 635, 638, 639, 642, 643, 646, 647, 650, 651, 654, 655, 658, 659, 662, 663, 666, 667, 670, 671, 674, 675, 678, 679, 680, 681, 684, 686, 689, 690, 693, 694, 697, 698, 701, 702, 705, 706, 709, 710, 713, 714, 717, 718, 721, 722, 725, 726, 729, 730, 734, 735, 736, 739, 740, 741, 744, 745, 748, 749, 750, 753, 754, 755, 757, 758, 759, 761, 762, 764, 766, 767, 768, 770, 771, 772, 773, 774, 775, 776, 777, 778, 781, 782, 786, 788, 789, 791, 792, 793, 795, 796, 797, 798, 811, 812, 815, 817, 818, 819, 821, 822, 823, 830, 835, 849, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 870, 871, 873, 874, 877, 879, 880, 882, 883, 885, 886, 888, 889, 892, 893, 895, 897, 899, 900, 902, 903, 905, 906, 908, 909, 911, 916, 918, 919, 921, 922, 924, 925, 927, 928, 930, 931, 933, 937, 938, 941, 943, 946, 948, 951, 953, 954, 957, 958, 959, 962, 963, 966, 967, 970, 971, 974, 975, 978, 979, 982, 987, 990, 991, 992, 993, 996, 997, 1000, 1001, 1004, 1005, 1008, 1009, 1012, 1013, 1014, 1015, 1016, 1035, 1036, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1048, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1066, 1068, 1071, 1073, 1074, 1077, 1078, 1081, 1082, 1085, 1086, 1089, 1090, 1093, 1094, 1097, 1098, 1101, 1102, 1105, 1106, 1107, 1110, 1111, 1114, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1150, 1151], "If": [116, 119, 120, 159, 163, 164, 165, 173, 178, 179, 346, 347, 348, 349, 350, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 369, 370, 372, 384, 406, 407, 409, 410, 411, 413, 414, 417, 419, 420, 421, 422, 423, 424, 425, 431, 433, 453, 462, 481, 505, 512, 513, 516, 517, 520, 521, 524, 525, 528, 530, 533, 534, 537, 538, 542, 545, 574, 577, 578, 581, 582, 585, 599, 602, 603, 606, 607, 643, 646, 647, 650, 655, 658, 659, 662, 667, 670, 671, 674, 681, 684, 698, 701, 702, 705, 706, 709, 710, 713, 714, 717, 718, 721, 722, 725, 735, 740, 745, 748, 749, 793, 823, 826, 828, 831, 833, 836, 838, 840, 842, 844, 846, 867, 868, 870, 871, 873, 888, 893, 895, 897, 899, 906, 908, 909, 911, 913, 915, 916, 928, 930, 931, 933, 937, 938, 941, 943, 946, 948, 951, 953, 967, 970, 971, 974, 987, 990, 992, 993, 996, 997, 1000, 1013, 1014, 1015, 1017, 1029, 1030, 1040, 1045, 1046, 1048, 1052, 1053, 1054, 1055, 1057, 1058, 1059, 1061, 1062, 1063, 1066, 1068, 1071, 1073, 1078, 1081, 1082, 1085, 1086, 1089, 1090, 1093, 1094, 1097, 1098, 1102, 1105, 1106, 1107, 1110, 1111, 1114, 1115], "set": [116, 119, 120, 150, 159, 163, 164, 165, 171, 173, 178, 179, 337, 346, 348, 351, 352, 357, 359, 360, 361, 362, 363, 364, 367, 369, 370, 462, 481, 491, 492, 503, 504, 505, 506, 512, 542, 545, 749, 750, 753, 807, 808, 809, 810, 823, 826, 828, 831, 833, 835, 836, 838, 840, 842, 844, 846, 867, 871, 873, 888, 893, 895, 897, 899, 906, 908, 913, 915, 1017, 1018, 1027, 1028, 1029, 1033, 1034, 1040, 1050, 1052, 1053, 1058, 1059, 1060, 1061, 1062, 1063, 1066, 1068, 1071, 1073, 1094, 1097, 1102, 1105, 1136, 1145, 1152, 1153, 1154, 1155, 1156, 1157], "leaf": [116, 119, 120, 178, 179, 357, 361, 370, 1017, 1018, 1027, 1028], "within": [116, 119, 120, 348, 356, 371, 384, 406, 407, 1040, 1046, 1048], "mayb": [116, 119, 120, 347, 367, 369], "manner": [116, 119, 120, 173, 178, 179, 352, 353, 363, 370, 383, 384, 1017, 1029], "travers": [116, 119, 120, 178, 179, 361, 367, 369, 1017, 1029], "lowest": [116, 119, 120, 178, 179, 357, 384, 1017, 1029, 1040, 1042, 1043], "leav": [116, 119, 120, 178, 179, 180, 181, 183, 353, 354, 356, 357, 361, 362, 364, 365, 370, 371, 953, 997, 1000, 1017, 1018, 1019, 1027, 1028, 1029], "search": [116, 119, 120, 148, 173, 178, 179, 335, 347, 352, 354, 356, 1053, 1054, 1055, 1056], "s": [116, 119, 120, 159, 163, 164, 165, 171, 174, 175, 178, 179, 346, 347, 348, 350, 351, 353, 354, 356, 358, 360, 361, 362, 363, 364, 365, 367, 369, 370, 371, 372, 383, 384, 405, 406, 417, 421, 422, 425, 446, 447, 462, 481, 505, 512, 702, 705, 749, 758, 823, 826, 828, 831, 833, 836, 838, 844, 846, 867, 916, 918, 919, 921, 1017, 1023, 1029, 1073, 1094, 1097, 1102, 1105, 1115, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1156, 1158, 1159], "case": [116, 119, 120, 174, 178, 179, 180, 181, 182, 347, 348, 349, 352, 353, 354, 357, 358, 360, 361, 362, 363, 364, 365, 367, 369, 371, 372, 384, 406, 417, 462, 501, 508, 511, 512, 513, 516, 517, 520, 521, 524, 525, 528, 530, 533, 534, 537, 538, 542, 545, 570, 573, 574, 577, 578, 581, 582, 585, 599, 602, 603, 606, 607, 643, 646, 647, 650, 655, 658, 659, 662, 681, 684, 698, 701, 702, 705, 706, 709, 710, 713, 714, 717, 718, 721, 722, 725, 735, 740, 745, 748, 749, 793, 805, 806, 867, 893, 895, 953, 983, 986, 1017, 1020, 1026, 1073, 1078, 1081, 1082, 1085, 1086, 1089, 1094, 1097, 1098, 1102, 1105, 1136, 1147, 1148, 1149, 1152, 1156], "to_n": [116, 178, 179], "convers": [117, 118, 119, 120, 175, 178, 179, 366, 368, 372, 383, 384, 1115, 1121], "arraywithcr": 121, "creation": [122, 178, 179, 180, 181, 182, 309, 352, 362, 363, 367, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424], "data_typ": [123, 124, 310, 311, 352, 362, 425, 429, 430, 431, 432, 433, 434, 437, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461], "arraywithdatatyp": 123, "arraywithdevic": [125, 369], "devic": [126, 174, 178, 179, 183, 260, 290, 291, 313, 332, 333, 348, 351, 352, 357, 359, 362, 369, 370, 384, 406, 407, 408, 409, 410, 411, 413, 414, 415, 416, 418, 419, 420, 421, 422, 423, 424, 464, 465, 466, 467, 468, 469, 471, 472, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 749, 777, 778, 781, 802, 805, 806, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1125, 1126, 1127, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1156, 1158, 1159], "arraywithelementwis": [127, 349, 360], "elementwis": [128, 178, 179, 315, 352, 357, 367, 372, 513, 516, 517, 520, 521, 524, 525, 528, 530, 533, 534, 537, 538, 541, 542, 545, 546, 549, 550, 553, 554, 557, 558, 561, 562, 565, 566, 569, 570, 573, 574, 577, 578, 581, 582, 585, 586, 589, 591, 594, 595, 598, 599, 602, 603, 606, 607, 610, 611, 614, 615, 618, 619, 622, 623, 626, 627, 630, 631, 634, 635, 638, 639, 642, 643, 646, 647, 650, 651, 654, 655, 658, 659, 662, 663, 666, 667, 670, 671, 674, 675, 678, 679, 680, 681, 684, 686, 689, 690, 693, 694, 697, 698, 701, 702, 705, 706, 709, 710, 713, 714, 717, 718, 721, 722, 725, 726, 729, 730, 734, 735, 739, 740, 744, 745, 748], "arraywithgener": [129, 369], "arraywithgradi": [131, 369], "gradient": [132, 178, 179, 319, 352, 361, 370, 371, 383, 384, 462, 506, 825, 826, 828, 830, 831, 833, 835, 836, 838, 840, 842, 844, 846, 848, 849, 850, 851, 852, 853, 1013, 1014, 1015, 1016, 1115, 1152, 1153, 1154, 1155, 1156, 1157], "arraywithimag": [133, 369], "imag": [134, 321, 347, 350, 352, 367, 368, 370, 372, 383, 854, 855, 856, 857, 858, 860, 861, 1115], "arraywithlay": 135, "layer": [136, 173, 323, 352, 353, 367, 368, 371, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 1035, 1036, 1039, 1115, 1127, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1156, 1158, 1159], "linear_algebra": [137, 138, 324, 325, 352, 369, 867, 868, 870, 871, 873, 874, 876, 877, 879, 880, 882, 883, 885, 886, 888, 889, 892, 893, 895, 896, 897, 899, 900, 902, 903, 905, 906, 908, 909, 911, 912, 913, 915, 916, 918, 919, 921, 922, 924, 925, 927, 928, 930, 931, 933, 934, 936], "arraywithlinearalgebra": 137, "arraywithloss": 139, "loss": [140, 327, 352, 357, 370, 371, 372, 938, 941, 943, 946, 948, 951, 1115], "arraywithmanipul": 141, "manipul": [142, 173, 329, 352, 372, 383, 954, 957, 959, 962, 963, 966, 967, 970, 971, 974, 975, 978, 979, 982, 983, 986, 987, 990, 992, 993, 996, 997, 1000, 1001, 1004, 1005, 1008, 1009, 1012], "arraywithnorm": 143, "norm": [144, 178, 179, 331, 352, 749, 761, 762, 764, 867, 893, 895, 931, 933, 1036, 1039, 1115, 1151, 1152, 1154], "arraywithrandom": [145, 369], "random": [146, 178, 179, 333, 352, 363, 372, 383, 1041, 1042, 1043, 1045, 1046, 1048, 1050, 1051, 1115], "arraywithsearch": 147, "arraywithset": 149, "arraywithsort": 151, "arraywithstatist": 153, "statist": [154, 183, 189, 341, 344, 345, 352, 362, 1074, 1077, 1078, 1081, 1082, 1085, 1086, 1089, 1090, 1093, 1094, 1097, 1098, 1101, 1102, 1105], "arraywithutil": 155, "util": [156, 343, 352, 363, 462, 495, 1107, 1110, 1111, 1114], "backend_handl": [159, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 1115], "contextmanag": [159, 160], "object": [159, 178, 179, 180, 181, 182, 183, 369, 372, 406, 412, 425, 445, 462, 507, 823, 1017, 1020, 1022, 1024, 1025, 1026, 1031, 1032, 1033, 1034, 1040, 1051, 1127, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1145, 1146, 1148, 1149], "__init__": [159, 160, 163, 164, 178, 179, 180, 181, 182, 183, 352, 358, 362, 367, 369, 370, 371, 372, 425, 426, 427, 428, 462, 463, 470, 471, 472, 473, 474, 475, 476, 477, 823, 824, 1040, 1041, 1045, 1046, 1048, 1115, 1122, 1123, 1124, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159], "choose_random_backend": 159, "exclud": [159, 161, 354, 367, 406, 407, 1040, 1046, 1048], "clear_backend_stack": 159, "current_backend": [159, 180, 181, 352, 357], "current": [159, 163, 164, 171, 175, 178, 179, 180, 181, 182, 347, 348, 349, 350, 357, 363, 367, 372, 383, 384, 425, 446, 447, 449, 461, 462, 471, 495, 496, 500, 502, 749, 783, 790, 794, 801, 803, 1017, 1018, 1027, 1028, 1115], "prioriti": [159, 163, 178, 179, 348, 364], "global_backend": [159, 163], "which": [159, 163, 164, 173, 174, 175, 178, 179, 180, 181, 182, 347, 348, 349, 350, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 369, 370, 371, 372, 383, 384, 395, 400, 403, 404, 405, 406, 407, 408, 409, 410, 411, 413, 414, 415, 416, 418, 419, 420, 421, 422, 423, 424, 425, 434, 437, 439, 443, 445, 448, 449, 461, 462, 471, 472, 482, 487, 488, 489, 490, 491, 492, 493, 494, 496, 500, 502, 504, 505, 506, 512, 702, 705, 749, 755, 767, 768, 770, 777, 778, 781, 783, 789, 793, 801, 802, 803, 805, 806, 821, 823, 826, 828, 830, 831, 833, 836, 838, 840, 842, 844, 846, 849, 851, 852, 854, 865, 867, 871, 873, 877, 879, 893, 895, 913, 915, 916, 928, 930, 931, 933, 937, 943, 946, 948, 951, 953, 959, 962, 971, 974, 979, 982, 987, 990, 992, 997, 1000, 1017, 1022, 1023, 1024, 1025, 1030, 1031, 1032, 1033, 1034, 1040, 1041, 1042, 1043, 1046, 1048, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1061, 1062, 1063, 1066, 1068, 1071, 1073, 1078, 1081, 1082, 1085, 1086, 1089, 1090, 1093, 1094, 1097, 1098, 1102, 1105, 1106, 1107, 1110, 1111, 1114, 1115, 1118, 1120, 1125, 1126, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1156, 1158, 1159], "try": [159, 163, 172, 174, 175, 178, 179, 347, 348, 349, 350, 360, 361, 369, 384, 749, 820, 1115], "infer": [159, 163, 351, 358, 362, 363, 367, 372, 403, 404, 406, 407, 408, 410, 413, 414, 418, 420, 424, 512, 615, 749, 786, 811, 953, 983, 986], "when": [159, 163, 173, 174, 178, 179, 180, 181, 182, 347, 348, 349, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 367, 369, 370, 372, 384, 425, 431, 462, 512, 525, 603, 606, 698, 701, 749, 760, 793, 814, 937, 938, 941, 943, 946, 948, 951, 1017, 1028, 1052, 1053, 1054, 1056, 1073, 1078, 1081, 1086, 1089, 1094, 1097, 1102, 1105, 1115, 1148, 1149], "global": [159, 163, 164, 165, 171, 178, 179, 180, 181, 182, 357, 358, 362, 363, 367, 425, 440, 441, 442, 462, 471, 472, 504, 505, 506, 749, 784, 785, 804, 807, 808, 809, 813, 814, 1035, 1036, 1039, 1150, 1151], "numpi": [159, 163, 164, 165, 173, 174, 178, 179, 348, 349, 356, 358, 362, 363, 364, 365, 367, 369, 372, 749, 818, 1073, 1074, 1077, 1101, 1115], "np": [159, 163, 360, 362, 363, 364, 365, 369, 370, 372, 1115], "py": [159, 163, 164, 348, 352, 353, 357, 358, 362, 363, 365, 367, 369, 371, 372, 1040, 1041, 1045, 1046, 1048], "noqa": [159, 163, 164, 406, 417, 425, 434, 437, 512, 525, 550, 553, 570, 573, 574, 577, 582, 690, 693, 706, 709, 722, 725, 726, 729, 735, 740, 867, 874, 953, 967, 970, 971, 974, 987, 990, 1073, 1078, 1081], "set_backend": [159, 163, 164, 171, 357, 358, 359, 362, 425, 446, 447, 462, 503, 749, 811, 1115], "ha": [159, 163, 164, 173, 174, 175, 178, 179, 348, 353, 354, 357, 358, 359, 362, 363, 367, 369, 371, 372, 383, 384, 406, 417, 462, 481, 512, 513, 516, 681, 684, 698, 701, 867, 876, 889, 892, 912, 913, 915, 916, 925, 927, 953, 967, 970, 993, 996, 1057, 1058, 1059, 1061, 1073, 1082, 1085, 1090, 1093, 1094, 1097, 1098, 1102, 1105], "jax": [159, 163, 164, 165, 174, 175, 348, 349, 358, 362, 363, 364, 365, 367, 369, 372, 384, 823, 835, 1057, 1058, 1059, 1061, 1115], "get_backend": [159, 357, 358], "specifi": [159, 164, 178, 179, 351, 356, 357, 362, 363, 364, 365, 367, 370, 371, 372, 406, 407, 409, 413, 415, 416, 419, 421, 422, 423, 425, 431, 433, 462, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 496, 500, 502, 505, 506, 507, 512, 702, 705, 749, 755, 767, 777, 778, 781, 788, 821, 867, 877, 879, 893, 895, 922, 924, 925, 927, 928, 930, 931, 933, 937, 938, 941, 943, 946, 948, 951, 953, 954, 957, 959, 962, 963, 966, 971, 974, 987, 990, 993, 996, 997, 1000, 1009, 1012, 1017, 1022, 1024, 1025, 1031, 1032, 1033, 1034, 1052, 1053, 1054, 1057, 1058, 1059, 1061, 1062, 1063, 1066, 1073, 1074, 1077, 1090, 1093, 1098, 1101, 1106, 1107, 1110, 1111, 1114], "isn": [159, 164, 348, 370, 384], "associ": [159, 164, 348, 357, 359, 384, 512, 525, 681, 684, 867, 888, 897, 899, 906, 908, 934, 936], "retriev": [159, 164, 348, 749, 755], "i": [159, 164, 348, 350, 351, 367, 370, 372, 406, 407, 417, 512, 513, 516, 542, 545, 558, 561, 566, 569, 574, 577, 589, 607, 610, 611, 614, 623, 626, 679, 680, 686, 689, 698, 701, 702, 705, 749, 757, 758, 823, 826, 828, 831, 833, 836, 838, 840, 842, 844, 846, 867, 871, 873, 888, 889, 892, 897, 899, 906, 908, 913, 915, 916, 925, 927, 931, 933, 953, 997, 1000, 1057, 1058, 1059, 1061, 1062, 1063, 1066, 1068, 1071, 1073, 1074, 1077, 1078, 1081, 1082, 1085, 1086, 1089, 1094, 1097, 1098, 1101, 1102, 1105], "e": [159, 164, 174, 175, 346, 348, 350, 351, 361, 370, 384, 405, 406, 417, 425, 430, 453, 462, 478, 512, 513, 516, 542, 545, 558, 561, 566, 569, 574, 577, 589, 599, 607, 610, 611, 614, 623, 626, 643, 646, 651, 654, 679, 680, 686, 689, 698, 701, 702, 705, 823, 826, 828, 831, 833, 836, 838, 840, 842, 844, 846, 867, 871, 873, 888, 889, 892, 897, 899, 906, 908, 913, 915, 916, 931, 933, 953, 997, 1000, 1040, 1045, 1046, 1048, 1057, 1058, 1059, 1061, 1062, 1063, 1066, 1068, 1071, 1073, 1078, 1081, 1082, 1085, 1086, 1089, 1090, 1093, 1094, 1097, 1098, 1102, 1105], "one": [159, 164, 174, 175, 178, 179, 183, 191, 276, 277, 281, 284, 290, 292, 314, 315, 316, 317, 328, 329, 332, 333, 347, 348, 354, 357, 360, 361, 362, 364, 365, 366, 369, 370, 372, 384, 406, 407, 417, 425, 432, 434, 437, 462, 491, 492, 493, 494, 506, 529, 659, 749, 750, 752, 753, 754, 778, 782, 799, 802, 805, 806, 867, 889, 892, 893, 895, 903, 905, 909, 911, 928, 930, 931, 933, 953, 954, 958, 967, 970, 971, 974, 987, 990, 991, 993, 996, 1042, 1044, 1052, 1053, 1055, 1057, 1058, 1059, 1060, 1061, 1073, 1074, 1077, 1101, 1115], "torch": [159, 164, 171, 348, 352, 357, 358, 360, 361, 362, 363, 364, 365, 367, 369, 370, 371, 372, 384, 403, 404, 425, 446, 447, 462, 503, 749, 811, 953, 967, 970, 1115], "tensorflow": [159, 164, 171, 174, 175, 348, 349, 362, 363, 364, 365, 367, 372, 384, 1115], "mxnet": [159, 164, 174, 349, 362, 363, 364, 367, 372, 1115], "either": [159, 164, 171, 178, 179, 347, 348, 350, 353, 354, 357, 358, 361, 362, 363, 367, 369, 370, 384, 406, 412, 512, 525, 528, 542, 545, 602, 627, 630, 643, 646, 647, 650, 655, 658, 659, 662, 681, 684, 702, 705, 710, 713, 714, 717, 735, 749, 770, 795, 799, 800, 867, 889, 892, 1013, 1014, 1015, 1016, 1073, 1090, 1093, 1098, 1136, 1147, 1148, 1149], "doesn": [159, 164, 347, 350, 354, 362, 367, 384], "matter": [159, 164, 173, 354], "been": [159, 164, 348, 353, 357, 358, 361, 362, 363, 365, 367, 383, 384, 462, 481, 749, 771, 772, 773, 1040, 1041], "ivy_np": [159, 164], "ivy_jax": [159, 164], "subsequ": [159, 165, 347, 354, 356, 357, 360, 364, 365, 371], "call": [159, 165, 171, 174, 180, 181, 183, 350, 352, 353, 354, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 367, 369, 370, 371, 372, 384, 462, 506, 749, 804, 809, 820, 823, 830, 1017, 1018, 1023, 1027, 1028, 1136, 1147, 1148, 1149, 1152, 1156], "ndarrai": [159, 165, 360, 362, 363, 364, 365, 369, 406, 408, 418, 749, 818], "Or": [159, 165, 370], "jaxlib": [159, 165, 347, 362, 363, 365, 369], "xla_extens": [159, 165, 362, 363, 365, 369], "devicearrai": [159, 165, 369], "try_import_ivy_jax": 159, "warn": [159, 166, 167, 168, 169, 170], "try_import_ivy_mxnet": 159, "try_import_ivy_numpi": 159, "try_import_ivy_tf": 159, "try_import_ivy_torch": 159, "unset_backend": [159, 358], "unset": [159, 171, 358, 367, 369], "adjust": [159, 171, 1073, 1094, 1097, 1102, 1105], "previous": [159, 171, 347, 350, 356, 357, 367, 749, 760], "implement": [159, 171, 348, 349, 353, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 367, 369, 370, 371, 372, 383, 384, 425, 431, 453, 462, 507, 512, 513, 516, 517, 520, 521, 524, 530, 533, 534, 537, 538, 542, 545, 578, 581, 582, 585, 599, 603, 606, 643, 646, 647, 650, 651, 654, 655, 658, 681, 684, 698, 701, 702, 705, 714, 717, 718, 721, 735, 740, 867, 880, 882, 1057, 1058, 1059, 1061, 1062, 1063, 1066, 1068, 1071, 1073, 1078, 1081, 1082, 1085, 1086, 1089, 1115], "wa": [159, 171, 174, 178, 179, 354, 367, 369, 749, 820, 1017, 1030, 1073, 1078, 1081, 1082, 1085, 1086, 1089, 1090, 1093, 1094, 1097, 1098, 1102, 1105, 1106, 1107, 1110, 1111, 1114], "last": [159, 171, 175, 178, 179, 348, 354, 358, 384, 395, 400, 462, 481, 854, 864, 867, 871, 873, 877, 879, 893, 895, 925, 927, 928, 930, 937, 943, 946, 948, 951, 953, 971, 974, 987, 990, 992, 997, 1000, 1062, 1063, 1066, 1068, 1071, 1106, 1107, 1110, 1111, 1114, 1136, 1146], "henc": [159, 171, 1057, 1058, 1059, 1061], "here": [159, 171, 347, 348, 349, 352, 354, 361, 365, 367, 368, 369, 370, 371, 372, 383, 384], "tensor": [159, 171, 173, 178, 179, 352, 357, 358, 360, 362, 363, 364, 365, 367, 369, 370, 371, 372, 384, 406, 415, 416, 425, 443, 512, 550, 553, 679, 680, 749, 802, 805, 806, 854, 862, 864, 867, 922, 924, 953, 967, 970, 983, 986, 992, 1040, 1041, 1052, 1055, 1115, 1136, 1144, 1146], "howev": [159, 171, 174, 347, 349, 353, 356, 357, 358, 360, 361, 362, 363, 364, 365, 369, 370, 371, 372, 384], "befor": [159, 171, 178, 179, 347, 348, 349, 353, 356, 360, 362, 363, 364, 367, 370, 384, 462, 506, 512, 745, 748, 854, 865, 866, 1013, 1014, 1015, 1017, 1029, 1057, 1058, 1059, 1061, 1073, 1090, 1093, 1098], "becom": [159, 171, 173, 175, 348, 354, 361, 367, 372, 384, 953, 954, 957], "swap": [159, 171, 953, 1001, 1004], "python": [159, 171, 172, 173, 174, 347, 348, 350, 367, 369, 370, 384, 406, 407, 462, 501, 511, 512, 702, 705, 1115, 1121], "op": [159, 171, 352, 367, 384], "eagertensor": [159, 171], "def": [160, 349, 352, 354, 357, 361, 362, 363, 364, 365, 367, 369, 370, 371, 372, 426, 427, 428, 463, 470, 473, 824, 1115, 1128, 1131, 1134], "ml": [172, 174, 175, 346, 366, 367, 368, 370, 371, 372, 383, 1115, 1121], "explos": [172, 174, 1115], "A": [172, 173, 174, 175, 178, 179, 180, 181, 182, 350, 351, 356, 357, 361, 362, 363, 367, 370, 384, 406, 411, 418, 462, 471, 472, 506, 512, 694, 697, 749, 785, 817, 867, 876, 903, 905, 912, 913, 915, 916, 953, 992, 997, 1000, 1017, 1018, 1020, 1022, 1024, 1025, 1026, 1027, 1028, 1031, 1032, 1033, 1034, 1073, 1074, 1077, 1101, 1106, 1107, 1110, 1111, 1114, 1115, 1158, 1159], "huge": [172, 174, 370, 1115], "number": [172, 173, 178, 179, 180, 181, 182, 183, 347, 354, 361, 363, 364, 367, 370, 372, 403, 404, 405, 406, 407, 408, 411, 415, 416, 417, 418, 425, 432, 444, 445, 448, 450, 451, 453, 462, 498, 499, 500, 512, 525, 542, 545, 574, 577, 589, 607, 610, 611, 614, 679, 680, 681, 684, 698, 701, 702, 705, 706, 709, 710, 713, 745, 748, 749, 750, 753, 776, 785, 786, 801, 819, 822, 854, 865, 867, 876, 880, 882, 897, 899, 912, 916, 928, 930, 953, 954, 957, 963, 966, 975, 978, 979, 982, 987, 990, 992, 997, 1000, 1005, 1008, 1009, 1012, 1013, 1014, 1015, 1016, 1040, 1041, 1050, 1052, 1055, 1057, 1058, 1059, 1073, 1078, 1081, 1082, 1085, 1086, 1089, 1090, 1093, 1094, 1097, 1098, 1102, 1105, 1106, 1107, 1110, 1111, 1114, 1115, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1145, 1146, 1147], "tool": [172, 175, 348, 368, 372, 383, 384, 1115], "have": [172, 173, 174, 175, 178, 179, 347, 348, 349, 350, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 367, 368, 369, 370, 371, 372, 383, 384, 395, 398, 406, 407, 409, 410, 413, 414, 417, 419, 420, 421, 422, 423, 424, 425, 431, 432, 433, 445, 462, 507, 512, 513, 516, 517, 520, 521, 524, 525, 528, 530, 533, 534, 537, 538, 541, 542, 545, 546, 549, 550, 553, 554, 557, 558, 561, 562, 565, 566, 569, 570, 573, 574, 577, 578, 581, 582, 585, 586, 589, 591, 594, 599, 602, 603, 606, 607, 610, 611, 614, 615, 618, 619, 622, 623, 626, 627, 630, 631, 634, 635, 638, 639, 642, 643, 646, 647, 650, 651, 654, 655, 658, 659, 662, 663, 666, 667, 670, 671, 674, 675, 678, 681, 684, 686, 689, 690, 693, 698, 701, 702, 705, 706, 709, 710, 713, 714, 717, 718, 721, 722, 725, 726, 729, 730, 734, 735, 739, 740, 744, 745, 748, 749, 762, 764, 771, 772, 773, 775, 823, 835, 852, 854, 866, 867, 868, 870, 871, 873, 874, 877, 879, 880, 882, 883, 885, 886, 888, 889, 892, 897, 899, 900, 902, 903, 905, 906, 908, 909, 911, 913, 915, 916, 918, 919, 921, 922, 924, 925, 927, 928, 930, 931, 933, 937, 938, 941, 943, 946, 948, 951, 953, 954, 957, 959, 962, 967, 970, 971, 974, 975, 978, 979, 982, 987, 990, 993, 996, 997, 1000, 1001, 1004, 1040, 1042, 1043, 1051, 1052, 1053, 1054, 1055, 1057, 1058, 1059, 1061, 1062, 1063, 1066, 1068, 1071, 1073, 1078, 1081, 1082, 1085, 1086, 1089, 1090, 1093, 1094, 1097, 1098, 1102, 1105, 1106, 1107, 1110, 1111, 1114, 1115], "explod": [172, 173, 1115], "onto": [172, 173, 462, 491, 492, 1017, 1023, 1029, 1115], "scene": [172, 173, 351, 366, 368, 823, 826, 828, 831, 833, 836, 838, 840, 842, 844, 846, 1115], "b": [172, 175, 180, 181, 183, 188, 191, 208, 209, 210, 225, 227, 264, 276, 277, 280, 281, 284, 290, 292, 296, 297, 302, 303, 310, 311, 314, 315, 316, 317, 328, 329, 332, 333, 346, 351, 354, 357, 358, 361, 366, 367, 368, 370, 371, 372, 382, 425, 434, 436, 437, 438, 462, 484, 512, 525, 527, 529, 530, 533, 541, 546, 550, 553, 570, 573, 574, 576, 577, 582, 594, 607, 609, 611, 618, 619, 622, 659, 686, 689, 690, 693, 706, 709, 722, 725, 726, 729, 735, 736, 738, 740, 741, 743, 744, 749, 750, 752, 753, 754, 757, 758, 766, 767, 774, 777, 778, 780, 781, 782, 819, 854, 857, 860, 861, 866, 867, 868, 870, 871, 873, 874, 903, 905, 913, 915, 922, 924, 934, 936, 937, 938, 941, 953, 954, 956, 957, 958, 967, 970, 971, 974, 979, 982, 987, 989, 990, 991, 997, 1000, 1001, 1004, 1035, 1036, 1039, 1040, 1042, 1044, 1045, 1046, 1048, 1052, 1054, 1055, 1056, 1062, 1063, 1066, 1073, 1074, 1077, 1078, 1081, 1101, 1106, 1107, 1110, 1115, 1121], "why": [172, 174, 348, 361, 364, 365, 369, 1115], "unifi": [172, 174, 178, 179, 360, 367, 384, 462, 491, 492, 493, 494, 506, 1115], "should": [172, 174, 178, 179, 180, 181, 182, 183, 189, 344, 345, 347, 348, 349, 350, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 369, 370, 371, 403, 404, 406, 417, 421, 422, 425, 433, 462, 512, 513, 516, 517, 520, 521, 524, 525, 528, 530, 533, 534, 537, 538, 541, 542, 545, 546, 549, 550, 553, 554, 557, 558, 561, 562, 565, 566, 569, 570, 573, 574, 577, 578, 581, 582, 585, 586, 599, 602, 603, 606, 607, 623, 626, 627, 630, 631, 634, 635, 638, 643, 646, 647, 650, 655, 658, 659, 662, 663, 666, 667, 670, 671, 674, 675, 678, 681, 684, 690, 693, 698, 701, 702, 705, 710, 713, 714, 717, 718, 721, 722, 725, 726, 729, 730, 734, 735, 739, 740, 744, 745, 748, 749, 760, 793, 802, 823, 826, 828, 831, 833, 836, 838, 840, 842, 844, 846, 854, 866, 867, 868, 870, 871, 873, 874, 877, 879, 886, 888, 889, 892, 897, 899, 903, 905, 906, 908, 909, 911, 913, 915, 916, 922, 924, 925, 927, 928, 930, 931, 933, 953, 983, 986, 1040, 1051, 1052, 1053, 1054, 1057, 1058, 1059, 1061, 1073, 1074, 1077, 1078, 1081, 1082, 1085, 1090, 1093, 1094, 1097, 1098, 1101, 1102, 1105, 1115], "them": [172, 173, 174, 175, 356, 358, 360, 361, 367, 369, 370, 371, 384, 1115], "c": [172, 174, 175, 183, 290, 332, 333, 346, 351, 354, 357, 361, 366, 367, 368, 370, 384, 512, 690, 693, 749, 757, 758, 766, 819, 823, 825, 826, 828, 831, 833, 836, 838, 840, 842, 844, 846, 854, 860, 953, 997, 1000, 1042, 1044, 1052, 1055, 1073, 1074, 1077, 1094, 1097, 1101, 1102, 1105, 1115, 1121], "standard": [172, 351, 352, 353, 355, 356, 360, 364, 365, 384, 406, 417, 425, 434, 437, 445, 512, 525, 530, 533, 550, 553, 570, 573, 574, 577, 582, 607, 690, 693, 706, 709, 722, 725, 726, 729, 735, 740, 867, 874, 953, 967, 970, 971, 974, 987, 990, 1035, 1036, 1039, 1040, 1045, 1057, 1058, 1059, 1062, 1063, 1066, 1073, 1078, 1081, 1094, 1097, 1102, 1105, 1106, 1107, 1110, 1115, 1121, 1150, 1151], "re": [172, 173, 174, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 369, 372, 384, 462, 506, 749, 771, 867, 922, 924, 953, 987, 990, 1052, 1056, 1115], "collabor": [172, 173, 174, 1115], "consortium": [172, 174, 1115, 1121], "data": [172, 174, 178, 179, 180, 181, 182, 351, 352, 353, 357, 359, 361, 363, 364, 365, 369, 406, 407, 408, 409, 410, 411, 412, 413, 414, 417, 418, 419, 420, 421, 422, 423, 424, 429, 430, 431, 433, 434, 437, 439, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 457, 461, 462, 464, 465, 466, 467, 468, 469, 474, 475, 476, 478, 512, 513, 516, 517, 520, 521, 524, 525, 528, 530, 533, 534, 537, 538, 541, 542, 545, 546, 549, 550, 553, 554, 557, 558, 561, 562, 565, 566, 569, 570, 573, 574, 577, 578, 581, 582, 585, 586, 589, 591, 594, 599, 602, 603, 606, 607, 610, 611, 614, 615, 618, 619, 622, 623, 626, 627, 630, 631, 634, 635, 638, 639, 642, 643, 646, 647, 650, 655, 658, 659, 662, 663, 666, 667, 670, 671, 674, 675, 678, 681, 684, 690, 693, 698, 701, 702, 705, 710, 713, 714, 717, 718, 721, 722, 725, 726, 729, 730, 734, 735, 739, 740, 744, 745, 748, 749, 757, 758, 795, 796, 798, 815, 823, 835, 852, 854, 863, 867, 868, 870, 871, 873, 874, 877, 879, 880, 882, 883, 885, 886, 888, 889, 892, 897, 899, 900, 902, 903, 905, 906, 908, 909, 911, 913, 915, 916, 922, 924, 925, 927, 928, 930, 931, 933, 953, 967, 970, 971, 974, 975, 978, 983, 986, 987, 990, 993, 996, 997, 1000, 1040, 1051, 1052, 1053, 1054, 1055, 1062, 1063, 1066, 1073, 1078, 1081, 1082, 1085, 1086, 1089, 1090, 1093, 1094, 1097, 1098, 1102, 1105, 1106, 1107, 1110, 1111, 1114, 1115, 1121, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147], "api": [172, 173, 347, 348, 351, 353, 354, 356, 357, 359, 360, 362, 363, 364, 365, 366, 368, 370, 384, 406, 417, 425, 434, 437, 512, 525, 530, 533, 550, 553, 570, 573, 574, 577, 582, 607, 690, 693, 706, 709, 722, 725, 726, 729, 735, 740, 867, 874, 953, 967, 970, 971, 974, 987, 990, 1057, 1058, 1059, 1062, 1063, 1066, 1073, 1078, 1081, 1106, 1107, 1110, 1115, 1121], "open": [173, 174, 175, 346, 347, 350, 353, 383, 406, 407, 1040, 1042, 1043, 1046, 1048, 1115], "project": [173, 174, 175, 347, 348, 350, 352, 358, 369, 371, 383, 384, 1040, 1041, 1045, 1046, 1048], "grown": 173, "consider": [173, 354, 365], "recent": [173, 174, 347, 348], "year": [173, 175, 384, 1115], "especi": [173, 347], "deep": [173, 178, 179, 346, 348, 349, 366, 370, 1115], "learn": [173, 174, 347, 349, 351, 357, 366, 372, 383, 512, 615, 823, 826, 828, 831, 833, 836, 838, 840, 842, 844, 846, 1013, 1014, 1015, 1016, 1115, 1152, 1153, 1154, 1155, 1156, 1157], "can": [173, 174, 175, 346, 347, 348, 351, 352, 353, 354, 355, 356, 357, 358, 361, 362, 363, 364, 365, 366, 367, 369, 370, 371, 372, 383, 384, 406, 408, 418, 425, 434, 437, 462, 504, 505, 506, 867, 886, 953, 983, 986, 1040, 1042, 1043, 1115, 1121], "seen": [173, 174, 354, 369, 370], "rapidli": 173, "increas": [173, 462, 486, 490, 494, 953, 963, 966, 1009, 1012, 1017, 1029], "github": [173, 348, 349, 353, 356], "repo": [173, 174, 175, 347, 348, 355, 367, 369, 370, 371, 372, 383, 1115, 1121], "term": [173, 348, 361, 854, 864, 1136, 1146], "time": [173, 174, 175, 347, 348, 349, 356, 357, 361, 362, 365, 367, 370, 372, 384, 823, 826, 828, 836, 838, 854, 864, 953, 1005, 1008, 1013, 1014, 1015, 1016, 1052, 1053, 1054, 1057, 1058, 1059, 1136, 1147, 1148, 1149], "These": [173, 174, 175, 348, 353, 354, 356, 357, 361, 362, 364, 365, 367, 368, 370, 371, 372, 384, 867, 880, 882, 1115, 1121], "written": [173, 347, 352, 353, 360, 364, 365, 367, 369, 372, 384], "mani": [173, 174, 175, 178, 179, 347, 348, 349, 353, 354, 357, 359, 360, 361, 362, 363, 364, 365, 367, 369, 370, 384, 953, 992], "differ": [173, 174, 175, 178, 179, 180, 181, 182, 347, 348, 351, 352, 353, 354, 356, 357, 360, 361, 363, 364, 365, 367, 368, 369, 370, 371, 372, 384, 425, 445, 462, 483, 484, 487, 488, 512, 525, 681, 684, 730, 734, 854, 863, 953, 997, 1000, 1073, 1090, 1093, 1098, 1115], "while": [173, 174, 178, 179, 180, 181, 182, 347, 348, 354, 358, 364, 371, 372, 384, 512, 667, 670, 671, 674, 1057, 1058, 1073, 1082, 1085], "wonder": [173, 175, 369], "thing": [173, 174, 175, 347, 348, 349, 358, 369, 370], "research": [173, 383], "develop": [173, 174, 175, 346, 347, 348, 349, 383, 384, 1115], "consid": [173, 174, 178, 179, 352, 357, 368, 369, 370, 512, 667, 670, 671, 674, 1057, 1058, 1059, 1061], "speed": 173, "evolv": 173, "sharabl": 173, "code": [173, 174, 175, 178, 179, 180, 181, 182, 347, 348, 349, 350, 351, 353, 354, 357, 358, 359, 360, 361, 364, 365, 366, 367, 368, 369, 370, 371, 372, 382, 384, 395, 397, 398, 399, 400, 401, 402, 462, 484, 507, 512, 570, 573, 726, 729, 854, 860, 861, 1057, 1058, 1059, 1062, 1063, 1066, 1073, 1074, 1077, 1101, 1115, 1121], "significantli": 173, "hinder": [173, 365], "librari": [173, 174, 175, 367, 372, 382, 384, 462, 507, 512, 603, 606, 667, 670, 671, 674, 867, 880, 882, 1057, 1058, 1059, 1061, 1073, 1078, 1081, 1082, 1085, 1086, 1089, 1115], "outdat": 173, "month": 173, "rigor": 173, "maintain": [173, 348, 1062, 1063, 1066, 1068, 1071], "against": [173, 178, 179, 356, 384, 425, 432, 867, 888, 889, 892, 893, 895, 897, 899, 906, 908, 1052, 1053], "newest": 173, "version": [173, 174, 175, 347, 353, 367, 369, 867, 880, 882, 1115], "For": [173, 174, 175, 347, 348, 349, 350, 351, 352, 353, 354, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 367, 369, 370, 371, 372, 383, 384, 406, 407, 417, 512, 513, 516, 517, 520, 521, 524, 525, 528, 530, 533, 534, 537, 538, 542, 545, 574, 577, 578, 581, 582, 585, 599, 602, 603, 606, 607, 643, 646, 647, 650, 655, 658, 659, 662, 681, 684, 698, 701, 702, 705, 706, 709, 714, 717, 718, 721, 722, 725, 735, 740, 745, 748, 823, 835, 852, 867, 916, 925, 927, 953, 954, 957, 997, 1000, 1057, 1058, 1059, 1061, 1073, 1078, 1081, 1086, 1089, 1098, 1125, 1126], "softwar": [173, 174, 347, 348], "pipelin": [173, 360, 372], "where": [173, 174, 175, 178, 179, 180, 181, 346, 347, 348, 349, 350, 353, 357, 358, 360, 361, 362, 363, 364, 367, 370, 371, 372, 384, 406, 413, 414, 417, 512, 542, 545, 599, 651, 654, 681, 684, 698, 701, 749, 789, 793, 802, 867, 880, 882, 888, 897, 899, 906, 908, 909, 911, 916, 918, 919, 921, 925, 927, 928, 930, 953, 954, 957, 963, 966, 967, 970, 975, 978, 997, 1000, 1009, 1012, 1017, 1018, 1028, 1040, 1041, 1052, 1055, 1073, 1094, 1097, 1102, 1105, 1106, 1107, 1110, 1111, 1114, 1115], "rapid": [173, 174, 347], "prototyp": 173, "vital": [173, 372], "signific": [173, 174, 384], "bottleneck": 173, "new": [173, 174, 175, 178, 179, 346, 347, 348, 349, 350, 351, 352, 353, 354, 356, 359, 361, 362, 364, 366, 369, 372, 383, 406, 409, 412, 413, 414, 419, 420, 423, 424, 425, 457, 512, 541, 546, 549, 651, 654, 694, 697, 739, 744, 749, 771, 772, 773, 776, 777, 778, 781, 805, 806, 807, 808, 813, 814, 823, 826, 828, 831, 833, 836, 838, 840, 842, 844, 846, 953, 967, 970, 983, 986, 997, 1000, 1017, 1022, 1033, 1034, 1035, 1036, 1039, 1115, 1125, 1126, 1136, 1146, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157], "futur": [173, 175, 347, 348, 369, 384, 867, 880, 882], "avail": [173, 178, 179, 347, 348, 353, 363, 384, 462, 481, 497, 498, 499, 509, 749, 772], "specif": [173, 178, 179, 349, 357, 360, 361, 362, 363, 364, 365, 367, 368, 369, 371, 372, 383, 384, 425, 453, 462, 504, 507, 512, 667, 670, 671, 674, 749, 771, 772, 773, 800, 867, 880, 882, 922, 924, 953, 997, 1000, 1013, 1014, 1015, 1016, 1040, 1041, 1073, 1078, 1081, 1082, 1085, 1086, 1089, 1115, 1118, 1120, 1121, 1148, 1149], "quickli": [173, 175, 347, 348, 370, 371], "obsolet": [173, 175], "user": [173, 174, 347, 348, 350, 351, 356, 358, 361, 364, 366, 384, 1136, 1147, 1148, 1149], "constantli": 173, "invent": 173, "wheel": 173, "desir": [173, 178, 179, 425, 431, 434, 437, 462, 507, 749, 789, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147], "provid": [173, 178, 179, 347, 348, 353, 354, 357, 360, 361, 362, 363, 364, 365, 367, 371, 383, 384, 403, 404, 406, 417, 425, 440, 441, 442, 449, 453, 461, 462, 481, 749, 770, 802, 806, 823, 826, 828, 831, 833, 836, 838, 840, 842, 844, 846, 867, 928, 930, 953, 971, 974, 997, 1000, 1052, 1053, 1073, 1094, 1097, 1102, 1105, 1106, 1107, 1110, 1111, 1114, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1145, 1146, 1147, 1152, 1153, 1154, 1155, 1156, 1157], "simultan": [173, 175], "modern": [173, 174], "simpl": [173, 347, 348, 352, 353, 354, 356, 357, 360, 361, 362, 363, 364, 367, 369, 371, 372, 384, 749, 774], "scalabl": [173, 367], "must": [173, 175, 178, 179, 180, 181, 182, 347, 348, 349, 352, 353, 354, 357, 360, 361, 362, 363, 365, 367, 371, 372, 395, 398, 406, 407, 409, 410, 411, 413, 414, 417, 419, 420, 421, 422, 423, 424, 425, 431, 432, 433, 462, 491, 492, 493, 494, 506, 507, 512, 513, 516, 517, 520, 521, 524, 525, 528, 530, 533, 534, 537, 538, 541, 542, 545, 546, 549, 550, 553, 554, 557, 558, 561, 562, 565, 566, 569, 570, 573, 574, 577, 578, 581, 582, 585, 586, 589, 591, 594, 599, 602, 603, 606, 607, 610, 611, 614, 615, 618, 619, 622, 623, 626, 627, 630, 631, 634, 635, 638, 639, 642, 643, 646, 647, 650, 651, 654, 655, 658, 659, 662, 663, 666, 667, 670, 671, 674, 675, 678, 679, 680, 681, 684, 686, 689, 690, 693, 698, 701, 702, 705, 706, 709, 710, 713, 714, 717, 718, 721, 722, 725, 726, 729, 730, 734, 735, 739, 740, 744, 745, 748, 749, 762, 764, 775, 806, 867, 868, 870, 871, 873, 874, 877, 879, 880, 882, 883, 885, 886, 888, 889, 892, 897, 899, 900, 902, 903, 905, 906, 908, 909, 911, 913, 915, 916, 922, 924, 925, 927, 928, 930, 931, 933, 937, 938, 941, 943, 946, 948, 951, 953, 954, 957, 959, 962, 967, 970, 971, 974, 975, 978, 979, 982, 987, 990, 993, 996, 997, 1000, 1001, 1004, 1040, 1042, 1043, 1050, 1052, 1053, 1054, 1055, 1057, 1058, 1059, 1061, 1062, 1063, 1066, 1068, 1071, 1073, 1078, 1081, 1082, 1085, 1086, 1089, 1090, 1093, 1094, 1097, 1098, 1102, 1105, 1106, 1107, 1110, 1111, 1114, 1152, 1156], "determin": [173, 178, 179, 353, 357, 361, 362, 363, 425, 434, 437, 439, 444, 449, 450, 451, 461, 462, 497, 498, 499, 509, 512, 517, 520, 521, 524, 525, 528, 530, 533, 534, 537, 538, 541, 542, 545, 546, 549, 550, 553, 558, 561, 562, 565, 566, 569, 570, 573, 578, 581, 582, 585, 586, 599, 602, 603, 606, 623, 626, 627, 630, 631, 634, 643, 646, 647, 650, 655, 658, 659, 662, 675, 678, 681, 684, 698, 701, 702, 705, 714, 717, 718, 721, 722, 725, 735, 739, 740, 744, 749, 750, 753, 757, 758, 788, 790, 794, 795, 796, 797, 798, 815, 822, 823, 835, 854, 865, 867, 868, 870, 871, 873, 874, 876, 877, 879, 886, 888, 889, 892, 897, 899, 903, 905, 906, 908, 912, 913, 915, 925, 927, 928, 930, 931, 933, 1013, 1014, 1015, 1016, 1057, 1058, 1059, 1061, 1106, 1107, 1110, 1111, 1114], "exactli": [173, 175, 354, 361, 363, 1115, 1121], "common": [173, 178, 179, 348, 349, 354, 357, 359, 361, 363, 384], "ground": [173, 356], "li": 173, "between": [173, 178, 179, 180, 181, 182, 354, 356, 357, 360, 361, 365, 366, 368, 369, 370, 372, 383, 406, 407, 425, 445, 512, 542, 545, 698, 701, 937, 938, 941, 943, 946, 948, 951, 953, 967, 970, 997, 1000, 1017, 1023, 1040, 1042, 1043, 1057, 1058, 1059, 1061, 1115, 1152, 1154], "find": [173, 178, 179, 347, 348, 367, 370, 1057, 1058, 1059, 1061, 1115], "exist": [173, 174, 178, 179, 180, 181, 347, 349, 350, 353, 354, 355, 356, 357, 358, 359, 364, 367, 384, 749, 770, 1152, 1156], "essenti": [173, 174, 349, 354, 357, 363], "order": [173, 178, 179, 180, 181, 182, 347, 348, 350, 353, 354, 358, 360, 361, 362, 363, 365, 369, 370, 372, 384, 512, 542, 545, 823, 826, 828, 831, 833, 836, 838, 840, 842, 844, 846, 867, 880, 882, 893, 895, 916, 918, 919, 921, 931, 933, 953, 971, 974, 1013, 1014, 1015, 1052, 1055, 1057, 1058, 1059, 1061, 1062, 1063, 1066, 1068, 1071, 1158, 1159], "design": [173, 174, 351, 364, 367, 369, 384], "univers": 173, "abstract": [173, 361, 371, 384, 462, 477, 1152, 1156], "In": [173, 175, 347, 348, 352, 353, 354, 357, 358, 361, 362, 363, 364, 365, 367, 369, 370, 371, 372, 383, 384, 462, 501, 507, 508, 511, 512, 525, 681, 684, 702, 705, 749, 755, 793, 953, 983, 986, 1040, 1046, 1048, 1115], "languag": [173, 175, 367], "first": [173, 174, 347, 348, 350, 354, 357, 360, 361, 365, 367, 369, 370, 372, 403, 404, 406, 415, 416, 425, 452, 457, 462, 481, 493, 512, 525, 528, 550, 553, 558, 561, 562, 565, 566, 569, 570, 573, 589, 591, 594, 602, 610, 611, 614, 618, 619, 622, 635, 638, 639, 642, 659, 662, 663, 666, 671, 674, 675, 678, 681, 684, 690, 693, 698, 701, 730, 734, 749, 757, 823, 830, 867, 871, 873, 877, 879, 880, 882, 889, 892, 903, 905, 909, 911, 916, 922, 924, 928, 930, 953, 959, 962, 987, 990, 997, 1000, 1001, 1004, 1013, 1014, 1015, 1016, 1017, 1018, 1027, 1028, 1040, 1051, 1052, 1053, 1054, 1057, 1058, 1059, 1136, 1147, 1148, 1149, 1152, 1156], "see": [173, 346, 347, 348, 349, 355, 357, 361, 363, 365, 369, 370, 383, 384, 406, 407, 412, 415, 416, 425, 433, 453, 512, 525, 528, 550, 553, 558, 561, 562, 565, 566, 569, 570, 573, 586, 602, 603, 606, 635, 638, 659, 662, 671, 674, 675, 678, 681, 684, 690, 693, 698, 701, 702, 705, 730, 734, 867, 888, 897, 899, 906, 908, 913, 915, 928, 930, 931, 933, 1052, 1054, 1057, 1058, 1059, 1061, 1073, 1078, 1081, 1082, 1085, 1086, 1089, 1090, 1093, 1094, 1097, 1098, 1102, 1105, 1106, 1107, 1110, 1111, 1114, 1115], "clear": [173, 174, 175, 348, 349, 354, 356, 362, 363, 367, 369, 462, 480], "front": [173, 366, 367, 370, 1115, 1121], "runner": 173, "look": [173, 347, 348, 350, 352, 354, 357, 358, 361, 362, 363, 365, 367, 369, 371, 372, 1115], "littl": [173, 369], "deeper": [173, 348, 351, 366, 462, 486, 490, 494, 1017, 1028, 1029], "follow": [173, 174, 178, 179, 347, 348, 349, 350, 352, 353, 354, 356, 358, 360, 361, 362, 363, 364, 366, 367, 369, 370, 371, 372, 384, 425, 448, 462, 506, 512, 702, 705, 749, 791, 792, 793, 813, 814, 823, 826, 828, 831, 833, 836, 838, 840, 842, 844, 846, 854, 865, 866, 867, 909, 911, 931, 933, 1017, 1023, 1029, 1057, 1058, 1059, 1061, 1115, 1136, 1146, 1152, 1156], "core": [173, 347, 349, 363, 367, 372, 462, 498, 1115], "principl": 173, "oper": [173, 178, 179, 180, 181, 183, 347, 349, 353, 354, 357, 360, 361, 363, 364, 370, 371, 406, 415, 416, 425, 453, 512, 525, 566, 569, 570, 573, 594, 618, 619, 622, 686, 689, 690, 693, 702, 705, 726, 729, 749, 759, 771, 772, 773, 815, 823, 826, 828, 831, 833, 836, 838, 840, 842, 844, 846, 854, 855, 856, 857, 858, 859, 860, 861, 863], "expos": [173, 367, 371, 749, 765], "almost": [173, 348, 361, 368, 370], "ident": [173, 175, 178, 179, 357, 359, 361, 369, 370, 384, 462, 496, 1017, 1030, 1115], "uniqu": [173, 357, 361, 384, 462, 471, 472, 1013, 1014, 1015, 1016, 1017, 1023, 1057, 1058, 1059, 1060, 1061], "syntax": [173, 174], "There": [173, 347, 348, 354, 357, 360, 361, 362, 367, 370, 384], "onli": [173, 178, 179, 346, 347, 348, 352, 354, 356, 357, 358, 360, 361, 362, 363, 364, 365, 367, 369, 370, 371, 372, 382, 384, 462, 502, 512, 667, 670, 671, 674, 867, 889, 892, 909, 911, 953, 971, 974, 1017, 1018, 1019, 1027, 1028, 1052, 1053, 1054, 1073, 1082, 1085, 1115, 1152, 1153, 1154, 1155, 1156, 1157], "wai": [173, 174, 347, 358, 364, 369, 370, 371, 372, 384], "unsurprisingli": [173, 354], "fundament": [173, 361, 367], "consist": [173, 178, 179, 360, 364, 462, 494, 867, 880, 882, 1073, 1074, 1077, 1101, 1148, 1149], "each": [173, 174, 175, 178, 179, 180, 181, 182, 183, 348, 349, 351, 352, 353, 354, 355, 356, 357, 359, 360, 361, 362, 364, 365, 366, 367, 369, 370, 372, 383, 384, 395, 398, 399, 401, 406, 417, 425, 432, 462, 471, 472, 483, 484, 485, 486, 487, 488, 489, 493, 506, 512, 513, 516, 517, 520, 521, 524, 525, 528, 530, 533, 534, 537, 538, 541, 542, 545, 546, 549, 550, 553, 554, 557, 558, 561, 562, 565, 566, 569, 570, 573, 574, 577, 578, 581, 582, 585, 586, 589, 591, 594, 599, 602, 603, 606, 607, 610, 611, 614, 615, 618, 619, 622, 623, 626, 627, 630, 631, 634, 635, 638, 639, 642, 643, 646, 647, 650, 651, 654, 655, 658, 659, 662, 663, 666, 667, 670, 671, 674, 675, 678, 681, 684, 686, 689, 690, 693, 694, 697, 698, 701, 702, 705, 706, 709, 710, 713, 714, 717, 718, 721, 722, 725, 726, 729, 730, 734, 735, 739, 740, 744, 745, 748, 749, 750, 753, 823, 826, 828, 831, 833, 836, 838, 840, 842, 844, 846, 854, 855, 856, 857, 858, 859, 860, 861, 862, 867, 868, 870, 871, 873, 874, 880, 882, 888, 889, 892, 897, 899, 900, 902, 906, 908, 913, 915, 916, 953, 963, 966, 979, 982, 987, 990, 992, 997, 1000, 1005, 1008, 1009, 1012, 1017, 1023, 1030, 1040, 1041, 1052, 1055, 1057, 1058, 1059, 1073, 1074, 1077, 1101, 1115, 1121, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1147, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159], "veri": [173, 174, 347, 348, 352, 354, 356, 357, 361, 363, 364, 365, 368, 370, 371, 372, 384, 1115], "similar": [173, 352, 361, 362, 363, 370, 384, 512, 702, 705, 854, 865, 1136, 1147], "convent": [173, 383, 867, 889, 892, 1073, 1074, 1077, 1101], "those": [173, 178, 179, 347, 348, 349, 361, 367, 372, 406, 407, 823, 852, 867, 909, 911, 916, 953, 954, 957], "introduc": [173, 361, 370, 953, 987, 990, 1057, 1058], "2006": 173, "therefor": [173, 348, 352, 353, 354, 355, 356, 357, 360, 361, 362, 363, 364, 365, 367, 369, 371, 384, 425, 434, 437, 512, 525, 530, 533, 574, 577, 607, 690, 693, 722, 725, 726, 729, 735, 749, 777, 854, 857, 866, 953, 987, 990, 1035, 1036, 1039, 1073, 1078, 1081, 1106, 1107, 1110], "present": [173, 178, 179, 348, 355, 361, 362, 363, 364, 365, 367], "itself": [173, 347, 348, 361, 364, 365, 371, 383, 384, 749, 755, 1017, 1029], "cut": 173, "cloth": 173, "adher": [173, 174, 353, 355, 367, 372], "semant": [173, 367, 372, 512, 702, 705], "up": [173, 174, 175, 346, 348, 349, 350, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 367, 368, 369, 370, 371, 372, 383, 384], "hopefulli": [173, 174, 175, 347, 348, 349, 350, 351, 352, 353, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 367, 369, 370, 371, 372, 383], "paint": [173, 367], "pictur": [173, 367], "how": [173, 175, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 368, 369, 370, 371, 372, 383, 384, 1115, 1121, 1136, 1147, 1148, 1149], "pleas": [173, 174, 175, 347, 348, 349, 350, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 367, 369, 370, 371, 372, 383, 1115], "discuss": [173, 174, 175, 346, 347, 348, 349, 350, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 367, 369, 370, 371, 372, 383, 384, 1115], "faq": [173, 174, 175, 367, 369, 370, 371, 372, 383], "reach": [173, 174, 175, 347, 348, 349, 350, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 367, 369, 370, 371, 372, 383, 462, 486, 490, 494, 1017, 1029], "discord": [173, 174, 175, 347, 348, 349, 350, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 367, 369, 370, 371, 372, 383, 1115], "you": [173, 174, 175, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 369, 370, 371, 372, 383, 384, 1115, 1121], "question": [173, 174, 175, 347, 348, 354, 356, 367, 369, 370, 371, 372, 383, 384, 1115], "central": 174, "goal": [174, 349], "being": [174, 175, 178, 179, 347, 348, 354, 356, 359, 360, 361, 362, 363, 364, 365, 367, 370, 383, 384, 406, 407, 749, 804, 809, 1057, 1060, 1115], "would": [174, 347, 348, 350, 351, 353, 354, 356, 358, 359, 360, 361, 364, 365, 366, 367, 369, 371, 372, 384, 395, 400, 462, 507, 1115], "entir": [174, 175, 178, 179, 348, 354, 355, 356, 360, 361, 364, 369, 370, 371, 372, 384, 462, 506, 1073, 1078, 1081, 1082, 1085, 1086, 1089, 1090, 1093, 1094, 1097, 1098, 1102, 1105, 1106, 1107, 1110, 1111, 1114, 1136, 1145], "forgiven": 174, "rais": [174, 178, 179, 348, 364, 367, 369, 425, 433, 512, 599, 698, 701, 749, 759, 784, 793, 807, 814, 820, 867, 889, 892, 896, 928, 930, 953, 993, 996, 997, 1000, 1052, 1055, 1073, 1078, 1081, 1086, 1089, 1106, 1107, 1110, 1111, 1114, 1148, 1149, 1152, 1156], "eyebrow": 174, "somehow": 174, "pytorch": [174, 175, 349, 357, 362, 363, 364, 365, 367, 369, 372, 384, 823, 826, 828, 831, 833, 836, 838, 840, 842, 844, 846, 1115, 1152, 1153, 1154, 1155, 1156, 1157], "other": [174, 178, 179, 180, 181, 183, 347, 348, 352, 353, 354, 356, 357, 360, 361, 364, 367, 369, 371, 372, 382, 383, 384, 403, 404, 406, 407, 512, 603, 606, 749, 750, 753, 755, 823, 830, 1040, 1046, 1048, 1057, 1060, 1073, 1094, 1097, 1102, 1105, 1115], "strong": [174, 384], "industri": 174, "back": [174, 360, 366, 367, 369, 384, 1115, 1121, 1148, 1149, 1152, 1156], "momentum": 174, "won": [174, 175, 348, 372], "ad": [174, 183, 189, 344, 345, 347, 348, 349, 352, 353, 354, 356, 357, 359, 360, 361, 362, 364, 365, 367, 371, 384, 749, 813, 814, 867, 880, 882, 953, 967, 970, 1158, 1159], "just": [174, 175, 347, 348, 353, 354, 356, 357, 364, 367, 369, 370, 384, 1073, 1074, 1077, 1101, 1136, 1145], "make": [174, 175, 347, 348, 349, 352, 353, 354, 355, 356, 357, 360, 361, 362, 363, 364, 365, 367, 369, 370, 372, 462], "problem": [174, 348, 360, 369], "even": [174, 175, 347, 348, 353, 357, 362, 363, 365, 369, 370, 371, 372, 384, 512, 698, 701, 706, 709], "wors": 174, "rather": [174, 178, 179, 352, 353, 356, 361, 372, 384, 406, 407, 462, 506, 749, 795, 796, 798, 823, 835], "funni": 174, "comic": 174, "strip": 174, "easi": [174, 347, 348, 357, 361], "feasibl": 174, "space": [174, 406, 407, 415, 416, 749, 776], "unlik": [174, 354, 361, 462], "charger": 174, "charact": 174, "encod": [174, 370, 749, 776], "instant": [174, 1115], "messag": [174, 348, 367, 369, 1161, 1162], "much": [174, 348, 352, 360, 361, 364, 367, 369, 370], "doe": [174, 178, 179, 348, 350, 351, 352, 353, 354, 356, 357, 358, 362, 364, 365, 367, 369, 370, 384, 512, 570, 573, 749, 793, 953, 992], "mandat": [174, 356, 364], "adopt": [174, 348, 360], "continu": [174, 175, 355, 356, 384], "own": [174, 175, 347, 353, 367, 384], "signatur": [174, 352, 353, 354, 361, 362, 363, 364, 365, 425, 434, 437, 512, 530, 533, 570, 573, 574, 577, 582, 607, 690, 693, 722, 725, 726, 729, 953, 967, 970, 987, 990, 1057, 1058, 1059, 1062, 1063, 1066, 1073, 1078, 1081], "replac": [174, 178, 179, 348, 350, 354, 356, 359, 361, 362, 363, 367, 369, 372, 384, 749, 805, 806, 953, 954, 957, 1040, 1041], "your": [174, 175, 346, 347, 349, 350, 352, 353, 370, 371, 384, 1115], "10": [174, 176, 177, 178, 179, 180, 181, 182, 183, 234, 286, 290, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 347, 350, 354, 361, 367, 369, 370, 406, 413, 416, 462, 512, 550, 553, 554, 557, 582, 594, 618, 619, 622, 647, 650, 722, 725, 749, 767, 777, 804, 809, 823, 836, 837, 838, 839, 854, 860, 867, 874, 877, 879, 903, 905, 922, 924, 953, 971, 974, 979, 982, 992, 1035, 1036, 1039, 1040, 1041, 1042, 1043, 1044, 1052, 1055, 1057, 1058, 1073, 1074, 1077, 1078, 1081, 1101, 1152, 1154], "100": [174, 175, 183, 290, 332, 333, 370, 371, 372, 384, 512, 722, 725, 1042, 1044, 1115], "despit": [174, 361, 363], "distinct": [174, 353, 361, 364, 366, 1057, 1058, 1059, 1061, 1115], "still": [174, 178, 179, 353, 356, 362, 369, 371, 384, 1115], "believ": [174, 348], "share": [174, 178, 179, 354, 356, 357, 358, 361, 367, 425, 457], "bring": [174, 367, 368], "benefit": [174, 175, 347, 348, 360, 361, 364, 369, 370, 384], "unrel": [174, 348], "what": [174, 175, 348, 351, 353, 354, 359, 361, 365, 366, 367, 369, 370, 371, 372, 383, 384, 1115], "again": [174, 175, 348, 352, 354, 361, 364, 370, 372, 384], "contrari": 174, "bumpi": 174, "road": 174, "allud": [174, 370], "most": [174, 178, 179, 347, 348, 352, 356, 357, 360, 361, 362, 363, 364, 365, 367, 369, 370, 371, 384, 867, 880, 882], "technolog": 174, "sector": [174, 512, 520, 521, 524, 534, 537, 541, 546, 549, 581, 585, 739, 744], "full": [174, 175, 180, 181, 348, 353, 362, 365, 367, 384, 406, 425, 445, 512, 594, 618, 619, 622, 854, 860, 867, 909, 911, 913, 915, 916, 1035, 1036, 1039], "success": 174, "reason": [174, 348, 352, 354, 357, 360, 361, 362, 364, 367, 369, 512, 702, 705], "build": [174, 346, 347, 357, 366, 368, 371, 372, 384, 1057, 1058, 1059, 1061, 1115, 1136, 1147, 1148, 1149], "custom": [174, 371], "comput": [174, 175, 178, 179, 347, 357, 361, 367, 370, 384, 462, 506, 512, 525, 550, 553, 562, 565, 570, 573, 591, 594, 595, 598, 615, 618, 619, 622, 635, 638, 639, 642, 663, 666, 667, 670, 671, 674, 675, 678, 681, 684, 686, 689, 690, 693, 749, 761, 762, 764, 767, 768, 823, 825, 826, 828, 830, 831, 833, 836, 838, 840, 842, 844, 846, 849, 851, 854, 855, 856, 857, 858, 859, 860, 861, 863, 865, 867, 868, 870, 871, 873, 876, 880, 882, 883, 885, 886, 889, 892, 893, 895, 909, 911, 912, 913, 915, 916, 928, 930, 931, 933, 937, 938, 941, 943, 946, 948, 951, 1017, 1023, 1057, 1058, 1059, 1061, 1073, 1074, 1077, 1078, 1081, 1082, 1085, 1086, 1089, 1090, 1093, 1094, 1097, 1098, 1101, 1102, 1105], "thank": [174, 370], "interoper": 174, "compon": [174, 367], "bio": [174, 347], "hardwar": [174, 347], "initi": [174, 178, 179, 180, 181, 182, 348, 358, 362, 363, 462, 854, 864, 1129, 1130, 1132, 1133, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1145, 1146, 1147, 1148, 1149, 1152, 1156], "pcie": 174, "interfac": [174, 372, 384], "motherboard": 174, "raid": 174, "storag": [174, 370], "virtual": [174, 348, 350], "bluetooth": 174, "wireless": 174, "exchang": 174, "btx": 174, "factor": [174, 462, 471, 504, 505, 506, 823, 825, 826, 828, 836, 838, 840, 842, 854, 855, 856, 857, 858, 859, 860, 861, 867, 868, 870, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1152, 1153, 1154, 1155], "sata": 174, "connect": [174, 347, 371, 372, 1136, 1146, 1147], "host": [174, 384], "bu": 174, "adapt": [174, 823, 840, 842, 1152, 1155], "html": [174, 350, 353, 425, 434, 437, 512, 530, 533, 570, 573, 574, 577, 582, 607, 690, 693, 722, 725, 726, 729, 953, 967, 970, 987, 990, 1057, 1058, 1059, 1062, 1063, 1066, 1073, 1078, 1081], "enabl": [174, 178, 179, 180, 181, 182, 347, 348, 356, 357, 360, 361, 364, 366, 367, 368, 370, 372, 384], "anyon": [174, 346, 384], "websit": 174, "tcp": 174, "ip": 174, "node": [174, 178, 179, 361, 1017, 1018, 1027, 1028], "commun": [174, 346, 348, 349, 384, 1115, 1121], "network": [174, 357, 361, 367, 371, 383, 854, 863, 1115, 1122, 1136, 1148, 1149], "smtp": 174, "possibl": [174, 346, 347, 348, 349, 353, 354, 356, 361, 362, 364, 367, 370, 383, 384, 749, 799, 817, 1073, 1078, 1081, 1086, 1089], "send": 174, "gmail": 174, "outlook": 174, "pop": 174, "email": 174, "ieee": [174, 405, 425, 445, 512, 525, 603, 606, 681, 684, 702, 705, 722, 725], "754": [174, 405, 425, 445, 512, 525, 603, 606, 681, 684, 702, 705, 722, 725], "allow": [174, 367, 384, 406, 415, 416, 749, 799, 1148, 1149], "calcul": [174, 178, 179, 180, 181, 182, 353, 512, 513, 516, 517, 520, 521, 524, 525, 528, 530, 533, 534, 537, 538, 542, 545, 578, 581, 582, 585, 586, 599, 602, 603, 606, 643, 646, 647, 650, 651, 654, 655, 658, 659, 662, 681, 684, 698, 701, 714, 717, 718, 721, 722, 725, 730, 734, 735, 740, 937, 938, 941, 943, 946, 948, 951, 1073, 1078, 1081, 1082, 1085, 1086, 1089, 1090, 1093, 1094, 1097, 1098, 1102, 1105], "live": [174, 175], "depend": [174, 347, 348, 353, 359, 361, 362, 367, 384, 425, 431, 512, 513, 516, 517, 520, 521, 524, 530, 533, 534, 537, 538, 542, 545, 578, 581, 582, 585, 599, 603, 606, 643, 646, 647, 650, 651, 654, 655, 658, 698, 701, 714, 717, 718, 721, 735, 740, 867, 880, 882, 909, 911, 913, 915, 916, 1052, 1056, 1062, 1063, 1066, 1068, 1071], "did": [174, 349, 372], "aris": [174, 384], "until": [174, 348, 384, 1115], "substanti": [174, 348, 356, 360], "innov": 174, "growth": 174, "usag": [174, 367, 462, 506], "relev": [174, 347, 349, 354, 361, 362, 370, 1152, 1153, 1154, 1155, 1156, 1157], "area": [174, 364, 382, 512, 520, 521, 524, 534, 537, 541, 546, 549, 581, 585, 739, 744, 1115], "necess": 174, "parti": [174, 384], "could": [174, 175, 347, 348, 354, 356, 361, 362, 364, 367, 369, 370, 371, 1057, 1058, 1059, 1061], "easili": [174, 348, 370, 371, 372, 384, 1115], "engag": [174, 346, 347, 348, 349, 350, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365], "regard": [174, 361, 462], "effect": [174, 353, 360, 361, 365, 384, 406, 417, 823, 844, 846, 1073, 1094, 1097, 1102, 1105], "2015": 174, "sinc": [174, 347, 348, 384], "alongsid": 174, "machin": [174, 347, 357, 383, 425, 445, 448, 512, 615, 867, 888, 897, 899, 906, 908], "given": [174, 175, 178, 179, 347, 348, 349, 350, 352, 353, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 367, 369, 371, 372, 383, 406, 407, 409, 415, 416, 462, 495, 501, 503, 504, 505, 506, 508, 511, 749, 767, 768, 778, 781, 805, 806, 821, 823, 825, 826, 828, 831, 833, 836, 838, 840, 842, 844, 846, 854, 855, 856, 857, 858, 859, 860, 861, 867, 934, 936, 937, 938, 941, 943, 946, 948, 951, 953, 954, 957, 967, 970, 971, 974, 979, 982, 987, 990, 992, 1005, 1008, 1017, 1024, 1025, 1040, 1042, 1043, 1045, 1046, 1048, 1051, 1062, 1068, 1071, 1125, 1126], "frame": [174, 383], "matur": [174, 384], "state": [174, 353, 365, 366, 367, 368, 370, 383, 512, 681, 684, 854, 864, 1115, 1122, 1123, 1124, 1125, 1126, 1127, 1129, 1130, 1132, 1133, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159], "than": [174, 178, 179, 348, 352, 354, 356, 361, 364, 367, 370, 371, 372, 384, 406, 407, 425, 445, 462, 506, 512, 517, 520, 521, 524, 530, 533, 542, 545, 558, 561, 566, 569, 574, 577, 581, 585, 589, 607, 610, 611, 614, 643, 646, 647, 650, 655, 658, 679, 698, 701, 702, 705, 710, 713, 722, 725, 745, 748, 749, 795, 796, 798, 823, 835, 867, 871, 873, 888, 889, 892, 897, 899, 906, 908, 931, 933, 953, 954, 957, 971, 974, 993, 996, 1040, 1046, 1048, 1057, 1058, 1059, 1061, 1073, 1090, 1093, 1094, 1097, 1098, 1102, 1105], "preced": [174, 371], "mention": [174, 347, 348, 354, 357, 364, 365], "aros": 174, "70": [174, 867, 903, 905, 1073, 1074, 1077, 1101], "80": [174, 867, 903, 905, 1073, 1074, 1077, 1101], "90": [174, 183, 290, 332, 333, 512, 570, 573, 706, 709, 867, 903, 905, 1042, 1044, 1073, 1074, 1077, 1101], "effort": [174, 346, 384], "stage": [174, 346, 348, 350, 351, 1115], "complet": [174, 178, 179, 348, 349, 360, 361, 369, 370, 867, 909, 911], "natur": [174, 354, 360, 361, 383, 512, 599, 643, 646, 651, 654, 867, 876, 912], "like": [174, 347, 348, 350, 351, 352, 353, 354, 356, 363, 364, 365, 366, 367, 369, 370, 371, 372, 383, 384, 823, 835, 1040, 1046, 1048, 1115], "certainli": 174, "mission": [174, 1115], "creat": [174, 178, 179, 346, 347, 348, 350, 362, 363, 364, 367, 368, 371, 382, 383, 406, 407, 408, 409, 410, 411, 413, 414, 415, 416, 418, 419, 420, 423, 424, 462, 471, 472, 749, 777, 778, 781, 802, 805, 806, 817, 823, 851, 1040, 1041, 1042, 1043, 1046, 1048, 1115, 1121, 1125, 1126, 1127, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159], "At": [174, 349], "process": [174, 175, 346, 347, 348, 350, 357, 361, 367, 372, 462, 471, 472, 501, 511], "ourselv": 174, "lead": [174, 175, 178, 179, 180, 181, 182, 384, 867, 909, 911, 916], "quansight": 174, "compani": 174, "made": [174, 348, 349, 361, 364, 367, 369], "organ": [174, 352, 357, 360, 361], "panda": 174, "scipi": 174, "conda": [174, 347, 350], "dask": [174, 1057, 1058, 1059, 1061], "apach": 174, "onnx": 174, "scikit": 174, "jupyt": 174, "aw": 174, "cupi": 174, "net": [174, 175, 367, 372], "sympi": 174, "rai": [174, 512, 542, 545], "modin": 174, "spyder": 174, "includ": [174, 178, 179, 348, 349, 352, 353, 354, 355, 356, 357, 358, 360, 361, 362, 363, 364, 365, 383, 384, 406, 407, 408, 418, 749, 788, 822, 867, 931, 933, 1017, 1018, 1040, 1046, 1048, 1052, 1054, 1073, 1078, 1081, 1082, 1085, 1086, 1089, 1090, 1093, 1094, 1097, 1098, 1102, 1105, 1106, 1107, 1110, 1111, 1114, 1118, 1120, 1136, 1146, 1147, 1150, 1151], "member": [174, 348], "googl": [174, 1115], "octoml": 174, "einop": [174, 178, 179, 749, 771, 772, 773], "further": [174, 175, 348, 350, 354, 360, 366, 370, 371, 1115], "sponsor": 174, "lg": 174, "electron": 174, "microsoft": 174, "d": [174, 175, 183, 290, 332, 333, 346, 347, 351, 361, 370, 749, 758, 766, 854, 855, 856, 857, 858, 859, 860, 861, 867, 877, 879, 903, 905, 1042, 1044, 1115, 1121], "shaw": 174, "intel": 174, "togeth": [174, 178, 179, 360, 361, 371, 372, 384, 1158, 1159], "major": [174, 362, 363, 384, 1052, 1055], "involv": [174, 346, 350, 351, 362, 372, 425, 453, 512, 525, 681, 684, 1115, 1121], "anoth": [174, 178, 179, 347, 348, 357, 361, 362, 369, 372, 406, 412, 425, 432, 434, 437], "promis": 174, "pursuit": 174, "unif": [174, 346, 369, 1115, 1121], "clearli": [174, 349, 354], "lot": [174, 175, 359, 369, 384], "thought": [174, 347, 348, 365], "care": [174, 348, 372], "attent": [174, 348, 360, 361, 854, 865, 866, 1136, 1147], "gone": [174, 366], "simplifi": [174, 367, 368, 369, 371], "compat": [174, 365, 384, 425, 433, 512, 525, 528, 542, 545, 550, 553, 558, 561, 562, 565, 566, 569, 570, 573, 586, 589, 591, 594, 602, 610, 611, 614, 618, 619, 622, 635, 638, 639, 642, 659, 662, 663, 666, 671, 674, 675, 678, 681, 684, 690, 693, 698, 701, 702, 705, 730, 734, 867, 888, 897, 899, 906, 908, 913, 915, 922, 924, 928, 930, 931, 933, 953, 983, 986, 1052, 1054, 1073, 1078, 1081, 1082, 1085, 1086, 1089, 1090, 1093, 1094, 1097, 1098, 1102, 1105, 1106, 1107, 1110, 1111, 1114, 1115], "excit": [174, 346, 351, 1115], "complianc": 174, "hope": [174, 384], "due": [174, 347, 361, 364, 512, 681, 684], "suit": [174, 347, 348, 351, 355, 356, 370, 383], "some": [174, 175, 178, 179, 347, 348, 349, 352, 353, 354, 357, 360, 361, 362, 363, 364, 365, 368, 369, 370, 371, 383, 384, 512, 603, 606, 823, 825, 826, 828, 831, 833, 836, 838, 840, 842, 844, 846, 852, 854, 862, 1115, 1136, 1144], "motiv": [174, 369], "great": [174, 175, 356, 367, 369], "convinc": 174, "celebr": 174, "encourag": [174, 383, 384, 1115, 1121], "foundat": 174, "point": [175, 348, 353, 354, 360, 364, 365, 367, 369, 370, 383, 405, 406, 407, 409, 411, 413, 419, 423, 425, 431, 445, 450, 453, 512, 517, 520, 521, 524, 525, 528, 530, 533, 534, 537, 538, 541, 542, 545, 546, 549, 570, 573, 574, 577, 578, 581, 582, 585, 586, 599, 602, 603, 606, 607, 643, 646, 647, 650, 655, 658, 659, 662, 681, 684, 698, 701, 702, 705, 706, 709, 714, 717, 718, 721, 722, 725, 735, 739, 740, 744, 745, 748, 867, 868, 870, 874, 880, 882, 883, 885, 886, 888, 897, 899, 906, 908, 909, 911, 913, 915, 916, 931, 933, 1057, 1058, 1059, 1061, 1073, 1078, 1081, 1082, 1085, 1086, 1089, 1090, 1093, 1094, 1097, 1098, 1102, 1105], "mai": [175, 347, 348, 361, 369, 371, 406, 407, 412, 462, 507, 512, 591, 594, 618, 619, 622, 639, 642, 667, 670, 671, 674, 749, 770, 1057, 1058, 1059, 1061, 1062, 1063, 1066, 1068, 1071, 1073, 1078, 1081, 1082, 1085, 1086, 1089], "ask": [175, 367, 369, 384, 1115], "perfectli": 175, "happi": [175, 347, 384], "abund": 175, "better": [175, 348, 351, 366, 369, 370, 371], "ll": [175, 346, 348, 354, 361, 364, 370], "give": [175, 347, 348, 351, 353, 354, 358, 365, 369, 953, 983, 986], "two": [175, 180, 181, 183, 353, 354, 356, 360, 361, 366, 370, 372, 406, 407, 411, 417, 421, 422, 425, 452, 457, 512, 566, 569, 706, 709, 749, 757, 867, 868, 870, 874, 876, 877, 879, 880, 882, 883, 885, 886, 888, 889, 892, 893, 895, 897, 899, 900, 902, 903, 905, 906, 908, 909, 911, 912, 913, 915, 916, 918, 919, 921, 925, 927, 928, 930, 953, 1001, 1004, 1057, 1058, 1059, 1060, 1061, 1115], "streamlin": 175, "workflow": [175, 348, 370, 382, 1115], "save": [175, 178, 179, 384, 749, 810, 1148, 1149], "week": [175, 348, 349, 1115], "let": [175, 353, 354, 361, 362, 363, 367, 369, 370, 371, 372, 1073, 1082, 1085, 1094, 1097, 1098, 1102, 1105, 1115], "sai": [175, 347, 359, 369], "deepmind": 175, "releas": [175, 347, 349, 1115], "awesom": 175, "paper": 175, "love": 175, "choic": [175, 347, 364, 370, 1073, 1094, 1097, 1102, 1105], "perceiverio": 175, "happen": [175, 347, 348, 370], "slew": 175, "rush": 175, "f": [175, 350, 351, 361, 367, 370, 372, 512, 615, 749, 790, 794], "g": [175, 351, 361, 384, 425, 430, 453, 462, 478, 1040, 1045, 1046, 1048, 1057, 1058, 1059, 1061, 1073, 1078, 1081, 1086, 1089, 1090, 1093, 1098], "inevit": 175, "deviat": [175, 1035, 1036, 1039, 1040, 1045, 1073, 1094, 1097, 1150, 1151], "origin": [175, 178, 179, 180, 181, 182, 358, 359, 362, 367, 369, 512, 542, 545, 867, 893, 895, 953, 983, 986, 987, 990], "often": [175, 357, 384], "erron": 175, "train": [175, 357, 361, 363, 370, 371, 372, 382, 383, 384, 823, 825, 826, 828, 836, 838, 1115], "poor": 175, "converg": 175, "perform": [175, 178, 179, 352, 354, 356, 357, 358, 360, 361, 363, 364, 365, 367, 370, 384, 395, 400, 406, 415, 416, 462, 749, 767, 771, 772, 773, 791, 792, 793, 823, 826, 828, 831, 833, 836, 838, 840, 842, 844, 846, 854, 862, 864, 867, 916, 1013, 1014, 1015, 1016, 1017, 1024, 1025, 1106, 1107, 1110, 1111, 1114], "issu": [175, 346, 349, 367, 369, 371, 384], "publish": [175, 384], "manag": [175, 346, 364, 384, 462], "get": [175, 178, 179, 346, 347, 349, 351, 357, 362, 363, 364, 367, 368, 369, 370, 371, 425, 443, 444, 445, 448, 462, 471, 472, 481, 482, 495, 496, 501, 505, 508, 511, 749, 756, 783, 784, 785, 804, 1115, 1121, 1136, 1145], "work": [175, 347, 348, 349, 351, 356, 361, 362, 363, 366, 367, 368, 369, 371, 372, 1115, 1121], "repositori": [175, 347, 348, 350, 355], "pull": [175, 346, 347, 350, 352, 384], "request": [175, 346, 352, 462, 498], "confus": [175, 364], "do": [175, 178, 179, 347, 348, 349, 352, 353, 354, 357, 358, 359, 360, 361, 362, 363, 364, 365, 367, 369, 370, 371, 372, 384, 512, 702, 705, 749, 793, 823, 835, 852, 1017, 1018, 1027, 1028, 1029], "expect": [175, 384, 749, 756, 1115], "codebas": [175, 346, 351, 352, 364, 366, 462, 504, 505, 1115], "total": [175, 178, 179, 180, 181, 182, 346, 348, 354, 356, 363, 370, 371, 384, 462, 508, 1052, 1055, 1073, 1094, 1097, 1102, 1105], "hour": 175, "spent": 175, "spin": 175, "off": [175, 366, 867, 877, 879, 925, 927], "test": [175, 347, 349, 351, 354, 384, 425, 450, 451, 512, 623, 626, 627, 630, 631, 634, 1106, 1107, 1110, 1111, 1114], "error": [175, 178, 179, 347, 356, 360, 363, 365, 369, 384, 395, 396, 462, 512, 595, 598, 1073, 1078, 1081, 1086, 1089, 1148, 1149, 1152, 1156], "address": [175, 348, 349, 360, 367], "sake": 175, "singl": [175, 178, 179, 348, 352, 354, 356, 357, 359, 361, 364, 365, 367, 370, 371, 372, 384, 462, 471, 472, 491, 492, 493, 494, 749, 819, 822, 1040, 1045, 1046, 1048, 1057, 1058], "multipl": [175, 178, 179, 183, 191, 276, 277, 281, 284, 290, 292, 314, 315, 316, 317, 328, 329, 332, 333, 348, 354, 357, 361, 384, 512, 529, 659, 681, 684, 749, 750, 752, 753, 754, 778, 782, 799, 867, 886, 953, 954, 957, 958, 987, 990, 991, 992, 1035, 1036, 1039, 1042, 1044, 1052, 1053, 1054, 1073, 1078, 1081, 1082, 1085, 1086, 1089, 1090, 1093, 1094, 1097, 1098, 1102, 1105, 1106, 1107, 1110, 1111, 1114, 1136, 1146], "line": [175, 347, 354, 360, 368, 369, 370, 371, 382, 1115, 1121], "directli": [175, 348, 352, 353, 357, 360, 361, 362, 363, 364, 365, 367, 369, 371, 372, 383, 384, 1017, 1029], "graph": [175, 357, 361, 368, 384, 823, 826, 828, 831, 833, 836, 838, 840, 842, 844, 846, 1057, 1058, 1059, 1061, 1148, 1149], "guarante": [175, 360, 384, 1057, 1058], "turn": [175, 354, 361], "step": [175, 178, 179, 183, 187, 234, 275, 286, 318, 319, 347, 348, 350, 354, 358, 360, 361, 362, 363, 367, 370, 371, 372, 383, 406, 407, 415, 416, 462, 823, 825, 826, 827, 828, 829, 831, 833, 836, 837, 838, 839, 840, 842, 844, 846, 1013, 1014, 1015, 1016, 1115, 1152, 1153, 1154, 1155, 1156, 1157], "take": [175, 346, 347, 348, 353, 354, 356, 361, 362, 363, 367, 369, 371, 372, 384, 512, 570, 573, 1115, 1121], "few": [175, 348, 349, 357, 361, 362, 363, 364, 368, 369, 370, 371, 382, 1115, 1121], "second": [175, 347, 354, 364, 369, 425, 452, 457, 462, 493, 512, 525, 528, 550, 553, 558, 561, 562, 565, 566, 569, 570, 573, 589, 591, 594, 602, 610, 611, 614, 618, 619, 622, 635, 638, 639, 642, 659, 662, 663, 666, 671, 674, 675, 678, 681, 684, 690, 693, 698, 701, 730, 734, 749, 757, 804, 809, 823, 825, 826, 828, 836, 838, 867, 871, 873, 877, 879, 880, 882, 889, 892, 903, 905, 909, 911, 916, 922, 924, 928, 930, 953, 997, 1000, 1001, 1004, 1013, 1015, 1057, 1058, 1059, 1152, 1153, 1154], "automat": [175, 347, 348, 357, 361, 365, 366, 367, 368, 371, 372, 1115], "everyon": [175, 346, 348, 384], "regardless": [175, 178, 179, 346, 369, 372, 403, 404], "wouldn": 175, "nice": [175, 356], "write": [175, 178, 179, 348, 349, 350, 351, 352, 353, 354, 356, 357, 358, 364, 367, 369, 372, 395, 398, 462, 507, 512, 513, 516, 517, 520, 521, 524, 525, 528, 530, 533, 534, 537, 538, 542, 545, 550, 553, 554, 557, 558, 561, 562, 565, 566, 569, 570, 573, 574, 577, 578, 581, 582, 585, 599, 602, 603, 606, 607, 623, 626, 627, 630, 631, 634, 635, 638, 643, 646, 647, 650, 651, 654, 655, 658, 659, 662, 663, 666, 667, 670, 671, 674, 675, 678, 681, 684, 686, 689, 690, 693, 698, 701, 702, 705, 706, 709, 710, 713, 714, 717, 718, 721, 722, 725, 726, 729, 730, 734, 735, 740, 749, 762, 764, 768, 775, 777, 937, 938, 941, 943, 946, 948, 951, 953, 954, 957, 967, 970, 971, 974, 975, 978, 979, 982, 987, 990, 993, 996, 997, 1000, 1001, 1004, 1035, 1036, 1039, 1040, 1042, 1043, 1062, 1063, 1066, 1068, 1071, 1073, 1074, 1077, 1078, 1081, 1082, 1085, 1086, 1089, 1090, 1093, 1094, 1097, 1098, 1101, 1102, 1105, 1106, 1107, 1110, 1111, 1114], "onc": [175, 347, 348, 361, 362, 363, 367, 370, 384, 462, 506, 867, 886, 916, 1040, 1041], "know": [175, 1057, 1058, 1059, 1061], "among": [175, 178, 179, 356], "frantic": 175, "port": 175, "lucid": 175, "honk": 175, "improv": [175, 348, 357, 367], "understand": [175, 347, 348, 349, 350, 351, 353, 354, 355, 365, 366], "pattern": [175, 178, 179, 353, 362, 749, 771, 772, 773], "hasn": 175, "now": [175, 178, 179, 347, 350, 352, 359, 361, 362, 365, 369, 370, 372, 383, 384, 1136, 1147, 1148, 1149], "spend": 175, "torchvis": 175, "probabl": [175, 854, 862, 1040, 1041, 1136, 1144], "sonnet": 175, "about": [175, 347, 348, 355, 366, 367, 371, 372, 384, 425, 445, 448], "next": [175, 347, 348, 349, 350, 353, 354, 358, 359, 369, 370, 425, 445, 1115, 1148, 1149, 1152, 1153, 1154, 1155, 1156, 1157], "everyth": [175, 348, 349, 368, 384], "zero": [175, 178, 179, 180, 181, 354, 360, 361, 362, 363, 365, 367, 370, 371, 395, 397, 398, 406, 409, 411, 417, 421, 422, 424, 425, 431, 512, 525, 530, 533, 558, 561, 582, 603, 606, 607, 667, 670, 671, 674, 679, 680, 681, 684, 686, 689, 690, 693, 698, 701, 702, 705, 706, 709, 722, 725, 726, 729, 735, 740, 749, 767, 802, 805, 806, 823, 825, 826, 828, 836, 838, 840, 842, 854, 862, 867, 874, 888, 889, 892, 897, 899, 906, 908, 928, 930, 931, 933, 953, 967, 970, 971, 974, 979, 982, 987, 990, 1009, 1012, 1035, 1036, 1039, 1040, 1042, 1043, 1052, 1053, 1054, 1055, 1057, 1058, 1059, 1061, 1073, 1078, 1081, 1082, 1085, 1086, 1089, 1090, 1093, 1094, 1097, 1098, 1102, 1105, 1106, 1107, 1110, 1111, 1114, 1115, 1127, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1146, 1152, 1153, 1154, 1155], "need": [175, 347, 348, 349, 350, 352, 353, 354, 355, 357, 360, 361, 364, 367, 369, 370, 383, 384, 749, 761, 762, 764, 953, 954, 957, 967, 970], "said": 175, "high": [175, 178, 179, 183, 260, 290, 291, 332, 333, 349, 370, 1040, 1042, 1043, 1044, 1046, 1047, 1048, 1049], "level": [175, 346, 349, 357, 366, 367, 370, 371, 372, 384], "optim": [175, 364, 368, 370, 372, 383, 462, 823, 826, 828, 831, 833, 836, 838, 840, 842, 844, 846, 1013, 1014, 1015, 1016, 1115, 1153, 1154, 1155, 1157], "trainer": [175, 382, 384, 1115], "statu": 175, "quo": 175, "kera": 175, "dopamin": 175, "ignit": 175, "catalyst": 175, "lightn": 175, "fastai": 175, "haiku": [175, 372], "flax": [175, 372, 384], "trax": [175, 372], "objax": [175, 372], "idea": [175, 383], "fulli": [175, 360, 361, 365, 367, 368, 369, 370, 371, 372, 384, 1136, 1146, 1147], "offer": [175, 371], "containerwithactiv": [176, 180, 181], "dict_in": [176, 177, 178, 179, 180, 181, 182, 183, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343], "queue": [176, 177, 178, 179, 180, 181, 182, 183, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 370, 462, 471, 472, 749, 804, 809], "queue_load_s": [176, 177, 178, 179, 180, 181, 182, 183, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343], "container_combine_method": [176, 177, 178, 179, 180, 181, 182, 183, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343], "list_join": [176, 177, 178, 179, 180, 181, 182, 183, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343], "queue_timeout": [176, 177, 178, 179, 180, 181, 182, 183, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 749], "print_limit": [176, 177, 178, 179, 180, 181, 182, 183, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343], "key_length_limit": [176, 177, 178, 179, 180, 181, 182, 183, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343], "print_ind": [176, 177, 178, 179, 180, 181, 182, 183, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343], "print_line_spac": [176, 177, 178, 179, 180, 181, 182, 183, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343], "ivyh": [176, 177, 178, 179, 180, 181, 182, 183, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343], "default_key_color": [176, 177, 178, 179, 180, 181, 182, 183, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343], "green": [176, 177, 178, 179, 180, 181, 182, 183, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 347, 348, 1161, 1162], "keyword_color_dict": [176, 177, 178, 179, 180, 181, 182, 183, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343], "rebuild_child_contain": [176, 177, 178, 179, 180, 181, 182, 183, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343], "types_to_iteratively_nest": [176, 177, 178, 179, 180, 181, 182, 183, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343], "alphabetical_kei": [176, 177, 178, 179, 180, 181, 182, 183, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343], "containerbas": [176, 177, 178, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 361], "__getitem__": [178, 179, 361], "queri": [178, 179, 361, 362, 369, 462, 495, 505, 854, 865, 866, 1136, 1147], "slice": [178, 179, 749, 777, 778, 781, 1017, 1026], "chain": [178, 179, 360, 361, 371, 372, 384, 1013, 1014, 1015, 1017, 1030, 1158, 1159], "element": [178, 179, 353, 367, 372, 395, 396, 397, 398, 399, 400, 401, 402, 406, 407, 413, 414, 421, 422, 462, 485, 489, 493, 512, 513, 516, 517, 520, 521, 524, 525, 528, 530, 533, 534, 537, 538, 541, 542, 545, 546, 549, 550, 553, 554, 557, 558, 561, 562, 565, 566, 569, 570, 573, 574, 577, 578, 581, 582, 585, 586, 589, 591, 594, 595, 598, 599, 602, 603, 606, 607, 610, 611, 614, 615, 618, 619, 622, 623, 626, 627, 630, 631, 634, 635, 638, 639, 642, 643, 646, 647, 650, 651, 654, 655, 658, 659, 662, 663, 666, 667, 670, 671, 674, 675, 678, 679, 680, 681, 684, 686, 689, 690, 693, 694, 697, 698, 701, 702, 705, 706, 709, 710, 713, 714, 717, 718, 721, 722, 725, 726, 729, 730, 734, 735, 739, 740, 744, 745, 748, 749, 757, 758, 761, 762, 764, 767, 768, 775, 789, 818, 819, 854, 862, 867, 871, 873, 880, 882, 889, 892, 909, 911, 916, 953, 954, 957, 971, 974, 979, 982, 987, 990, 992, 993, 996, 1040, 1041, 1052, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1068, 1071, 1073, 1074, 1077, 1078, 1081, 1082, 1085, 1086, 1089, 1090, 1093, 1094, 1097, 1098, 1101, 1102, 1105, 1106, 1107, 1110, 1111, 1114, 1136, 1144], "represent": [178, 179, 180, 181, 182, 383, 405, 425, 429, 430, 445, 448, 462, 478, 479, 512, 513, 516, 525, 550, 553, 562, 565, 570, 573, 675, 678, 681, 684, 749, 755, 812, 817], "dictionari": [178, 179, 180, 181, 182, 370, 384, 462, 505], "around": [178, 179, 180, 181, 182, 348, 357, 360, 365, 369, 384], "sequenc": [178, 179, 180, 181, 182, 354, 362, 383, 462, 471, 472, 749, 758, 799, 953, 992, 997, 1000, 1040, 1042, 1043, 1073, 1078, 1081, 1136, 1145, 1150, 1151, 1158, 1159], "multiprocess": [178, 179, 180, 181, 182, 370, 384, 462, 471, 749], "asynchron": [178, 179, 180, 181, 182], "wait": [178, 179, 180, 181, 182, 348], "size": [178, 179, 180, 181, 182, 369, 370, 406, 415, 416, 462, 504, 505, 506, 749, 805, 811, 854, 866, 867, 877, 879, 893, 895, 903, 905, 909, 911, 916, 928, 930, 953, 967, 970, 987, 990, 992, 993, 996, 1040, 1041, 1045, 1046, 1048, 1052, 1053, 1055, 1106, 1107, 1110, 1111, 1114, 1136, 1137, 1138], "dimens": [178, 179, 180, 181, 182, 354, 367, 370, 395, 400, 406, 421, 422, 462, 493, 749, 771, 772, 773, 776, 786, 802, 821, 854, 855, 856, 857, 858, 859, 860, 861, 864, 867, 868, 870, 871, 873, 874, 877, 879, 880, 882, 883, 885, 886, 888, 889, 892, 893, 895, 897, 899, 900, 902, 906, 908, 909, 911, 913, 915, 916, 918, 919, 921, 925, 927, 928, 930, 931, 933, 937, 943, 946, 948, 951, 953, 959, 962, 967, 970, 971, 974, 975, 978, 979, 982, 983, 986, 987, 990, 992, 993, 996, 997, 1000, 1013, 1014, 1015, 1016, 1040, 1051, 1052, 1053, 1054, 1055, 1057, 1058, 1059, 1061, 1073, 1074, 1077, 1078, 1081, 1082, 1085, 1086, 1089, 1090, 1093, 1094, 1097, 1098, 1101, 1102, 1105, 1106, 1107, 1110, 1111, 1114, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1146, 1147], "combin": [178, 179, 180, 181, 182, 348, 354, 356, 357, 360, 361, 372, 867, 871, 873], "arriv": [178, 179, 180, 181, 182], "timeout": [178, 179, 180, 181, 182, 462, 471, 472, 749, 804, 809], "limit": [178, 179, 180, 181, 182, 348, 354, 356, 367, 370, 372, 384, 425, 445, 448, 749, 761, 762, 764, 953, 954, 957], "maximum": [178, 179, 180, 181, 182, 354, 367, 370, 372, 462, 486, 490, 494, 506, 512, 749, 761, 762, 764, 776, 823, 836, 838, 953, 954, 957, 1017, 1029, 1052, 1053, 1073, 1078, 1081, 1086, 1089, 1115], "length": [178, 179, 180, 181, 182, 370, 406, 407, 417, 867, 916, 918, 919, 921, 953, 983, 986], "whitespac": [178, 179, 180, 181, 182], "indent": [178, 179, 180, 181, 182, 370], "extra": [178, 179, 180, 181, 182, 354, 359, 360, 367, 823, 830], "newlin": [178, 179, 180, 181, 182, 353], "handl": [178, 179, 180, 181, 182, 351, 356, 357, 359, 361, 362, 363, 364, 365, 371, 384, 403, 404, 462, 478, 479, 480, 481, 482, 496, 500, 501, 508, 511, 823, 826, 828, 831, 833, 836, 838, 840, 842, 844, 846, 1152, 1153, 1154, 1155, 1156, 1157], "result": [178, 179, 180, 181, 182, 352, 353, 354, 356, 360, 361, 362, 364, 365, 370, 384, 395, 398, 406, 407, 425, 453, 462, 471, 507, 512, 513, 516, 517, 520, 521, 524, 525, 528, 530, 533, 534, 537, 538, 542, 545, 550, 553, 554, 557, 558, 561, 562, 565, 566, 569, 570, 573, 574, 577, 578, 581, 582, 585, 586, 589, 591, 594, 599, 602, 603, 606, 607, 610, 611, 614, 615, 618, 619, 622, 623, 626, 627, 630, 631, 634, 635, 638, 639, 642, 643, 646, 647, 650, 651, 654, 655, 658, 659, 662, 663, 666, 667, 670, 671, 674, 675, 678, 681, 684, 686, 689, 690, 693, 698, 701, 702, 705, 706, 709, 710, 713, 714, 717, 718, 721, 722, 725, 726, 729, 730, 734, 735, 740, 745, 748, 749, 762, 764, 768, 775, 777, 805, 806, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 866, 867, 868, 870, 877, 879, 893, 895, 916, 931, 933, 937, 938, 941, 943, 946, 948, 951, 953, 954, 957, 967, 970, 971, 974, 975, 978, 979, 982, 987, 990, 993, 996, 997, 1000, 1001, 1004, 1017, 1030, 1035, 1036, 1039, 1040, 1042, 1043, 1052, 1053, 1054, 1057, 1058, 1062, 1063, 1066, 1068, 1071, 1073, 1074, 1077, 1078, 1081, 1082, 1085, 1086, 1089, 1090, 1093, 1094, 1097, 1098, 1101, 1102, 1105, 1106, 1107, 1110, 1111, 1114, 1115], "color": [178, 179, 180, 181, 182, 1161, 1162], "termin": [178, 179, 180, 181, 182, 347, 348, 350, 361, 367, 370], "map": [178, 179, 180, 181, 182, 356, 357, 361, 365, 370, 383, 384, 462, 471, 1017, 1024, 1025, 1029, 1030, 1136, 1147], "termcolor": [178, 179, 180, 181, 182], "rebuild": [178, 179, 180, 181, 182], "found": [178, 179, 180, 181, 182, 347, 348, 353, 360, 361, 462, 496], "constructor": [178, 179, 180, 181, 182, 362, 363, 369, 749, 756, 1158, 1159], "param": [178, 179, 180, 181, 182, 183, 284, 316, 317, 367, 372, 749, 755, 777, 778, 781, 782], "kept": [178, 179, 180, 181, 182, 348, 364, 1013, 1014, 1015], "structur": [178, 179, 180, 181, 182, 350, 352, 357, 360, 361, 370, 371, 749, 765, 1017, 1030], "alphabet": [178, 179, 180, 181, 182], "preserv": [178, 179, 180, 181, 182, 372, 384, 823, 849, 953, 971, 974], "__setitem__": [178, 179, 360, 361, 369], "val": [178, 179, 364, 369, 749, 791, 792, 793, 807, 808], "after": [178, 179, 354, 361, 362, 366, 425, 457, 512, 722, 725, 823, 826, 828, 830, 831, 833, 836, 838, 840, 842, 844, 846, 1035, 1036, 1039, 1152, 1153, 1154, 1155, 1156, 1157], "updat": [178, 179, 347, 348, 349, 350, 351, 354, 355, 359, 360, 361, 362, 365, 367, 369, 370, 372, 384, 462, 471, 749, 793, 805, 806, 823, 825, 826, 828, 831, 833, 836, 838, 840, 842, 844, 846, 854, 864, 1013, 1014, 1015, 1017, 1024, 1025, 1033, 1034, 1125, 1126, 1152, 1153, 1154, 1155, 1156, 1157], "all_fals": [178, 179], "assert_is_bool": [178, 179], "key_chain": [178, 179, 180, 181, 183, 184, 185, 186, 187, 188, 190, 191, 192, 193, 194, 195, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 310, 311, 314, 315, 316, 317, 318, 319, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 338, 339, 340, 341, 342, 343, 434, 436, 438, 513, 515, 519, 520, 521, 523, 527, 528, 529, 530, 532, 534, 536, 540, 541, 542, 544, 546, 548, 550, 552, 554, 556, 558, 560, 562, 564, 566, 568, 570, 572, 574, 576, 580, 581, 584, 585, 588, 589, 590, 593, 594, 595, 597, 601, 602, 603, 605, 609, 610, 611, 613, 617, 618, 619, 621, 623, 625, 627, 629, 631, 633, 635, 637, 639, 641, 643, 645, 647, 649, 651, 653, 655, 657, 659, 661, 663, 665, 667, 669, 671, 673, 675, 677, 681, 683, 685, 686, 688, 690, 692, 694, 696, 698, 700, 702, 704, 706, 708, 710, 712, 714, 716, 718, 720, 722, 724, 726, 728, 730, 731, 733, 736, 738, 739, 741, 743, 744, 745, 747, 750, 752, 754, 762, 763, 778, 780, 782, 826, 827, 829, 831, 832, 834, 836, 837, 839, 840, 841, 843, 844, 845, 847, 889, 891, 938, 940, 942, 943, 945, 947, 948, 950, 952, 954, 956, 958, 959, 961, 963, 965, 967, 969, 971, 973, 975, 977, 979, 981, 983, 985, 987, 989, 991, 993, 995, 997, 999, 1001, 1003, 1005, 1007, 1009, 1011, 1017, 1030, 1036, 1038, 1042, 1044, 1046, 1047, 1049, 1063, 1065, 1067, 1068, 1070, 1072, 1074, 1076, 1078, 1080, 1082, 1084, 1086, 1088, 1090, 1092, 1094, 1096, 1100, 1101, 1102, 1104, 1107, 1109, 1111, 1113], "to_appli": [178, 179, 180, 181, 183, 184, 185, 186, 187, 188, 190, 191, 192, 193, 194, 195, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 310, 311, 314, 315, 316, 317, 318, 319, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 338, 339, 340, 341, 342, 343, 434, 436, 438, 513, 515, 519, 520, 521, 523, 527, 528, 529, 530, 532, 534, 536, 540, 541, 542, 544, 546, 548, 550, 552, 554, 556, 558, 560, 562, 564, 566, 568, 570, 572, 574, 576, 580, 581, 584, 585, 588, 589, 590, 593, 594, 595, 597, 601, 602, 603, 605, 609, 610, 611, 613, 617, 618, 619, 621, 623, 625, 627, 629, 631, 633, 635, 637, 639, 641, 643, 645, 647, 649, 651, 653, 655, 657, 659, 661, 663, 665, 667, 669, 671, 673, 675, 677, 681, 683, 685, 686, 688, 690, 692, 694, 696, 698, 700, 702, 704, 706, 708, 710, 712, 714, 716, 718, 720, 722, 724, 726, 728, 730, 731, 733, 736, 738, 739, 741, 743, 744, 745, 747, 750, 752, 754, 762, 763, 778, 780, 782, 826, 827, 829, 831, 832, 834, 836, 837, 839, 840, 841, 843, 844, 845, 847, 889, 891, 938, 940, 942, 943, 945, 947, 948, 950, 952, 954, 956, 958, 959, 961, 963, 965, 967, 969, 971, 973, 975, 977, 979, 981, 983, 985, 987, 989, 991, 993, 995, 997, 999, 1001, 1003, 1005, 1007, 1009, 1011, 1017, 1030, 1036, 1038, 1046, 1047, 1049, 1063, 1065, 1067, 1068, 1070, 1072, 1074, 1076, 1078, 1080, 1082, 1084, 1086, 1088, 1090, 1092, 1094, 1096, 1100, 1101, 1102, 1104, 1107, 1109, 1111, 1113], "prune_unappli": [178, 179, 180, 181, 183, 184, 185, 186, 187, 188, 190, 191, 192, 193, 194, 195, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 310, 311, 314, 315, 316, 317, 318, 319, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 338, 339, 340, 341, 342, 343, 434, 436, 438, 513, 515, 519, 520, 521, 523, 527, 528, 529, 530, 532, 534, 536, 540, 541, 542, 544, 546, 548, 550, 552, 554, 556, 558, 560, 562, 564, 566, 568, 570, 572, 574, 576, 580, 581, 584, 585, 588, 589, 590, 593, 594, 595, 597, 601, 602, 603, 605, 609, 610, 611, 613, 617, 618, 619, 621, 623, 625, 627, 629, 631, 633, 635, 637, 639, 641, 643, 645, 647, 649, 651, 653, 655, 657, 659, 661, 663, 665, 667, 669, 671, 673, 675, 677, 681, 683, 685, 686, 688, 690, 692, 694, 696, 698, 700, 702, 704, 706, 708, 710, 712, 714, 716, 718, 720, 722, 724, 726, 728, 730, 731, 733, 736, 738, 739, 741, 743, 744, 745, 747, 750, 752, 754, 762, 763, 778, 780, 782, 826, 827, 829, 831, 832, 834, 836, 837, 839, 840, 841, 843, 844, 845, 847, 889, 891, 938, 940, 942, 943, 945, 947, 948, 950, 952, 954, 956, 958, 959, 961, 963, 965, 967, 969, 971, 973, 975, 977, 979, 981, 983, 985, 987, 989, 991, 993, 995, 997, 999, 1001, 1003, 1005, 1007, 1009, 1011, 1017, 1030, 1036, 1038, 1046, 1047, 1049, 1063, 1065, 1067, 1068, 1070, 1072, 1074, 1076, 1078, 1080, 1082, 1084, 1086, 1088, 1090, 1092, 1094, 1096, 1100, 1101, 1102, 1104, 1107, 1109, 1111, 1113], "map_sequ": [178, 179, 180, 181, 183, 184, 185, 186, 187, 188, 190, 191, 192, 193, 194, 195, 198, 200, 201, 203, 208, 209, 210, 211, 213, 214, 215, 216, 217, 218, 220, 221, 222, 223, 224, 225, 227, 228, 231, 232, 233, 234, 235, 236, 239, 240, 241, 242, 245, 249, 250, 251, 252, 253, 255, 256, 257, 259, 260, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 310, 311, 314, 315, 316, 317, 318, 319, 326, 327, 328, 329, 330, 331, 332, 333, 338, 339, 340, 341, 342, 343, 434, 436, 438, 513, 515, 519, 520, 521, 523, 527, 528, 529, 530, 532, 534, 536, 540, 541, 546, 548, 554, 556, 574, 576, 580, 581, 584, 585, 588, 590, 595, 597, 601, 603, 605, 609, 610, 611, 623, 625, 627, 629, 631, 633, 643, 645, 647, 649, 651, 653, 655, 657, 659, 667, 669, 681, 683, 685, 686, 688, 694, 696, 706, 708, 710, 712, 714, 716, 718, 720, 722, 724, 726, 728, 730, 731, 733, 736, 738, 739, 741, 743, 744, 745, 747, 750, 752, 754, 762, 763, 778, 780, 782, 826, 827, 829, 831, 832, 834, 836, 837, 839, 840, 841, 843, 844, 845, 847, 938, 940, 942, 943, 945, 947, 948, 950, 952, 954, 956, 958, 963, 965, 967, 969, 971, 973, 975, 977, 979, 981, 983, 985, 987, 989, 991, 993, 995, 1001, 1003, 1005, 1007, 1009, 1011, 1036, 1038, 1046, 1047, 1049, 1063, 1065, 1067, 1068, 1070, 1072, 1074, 1076, 1078, 1080, 1082, 1084, 1086, 1088, 1090, 1092, 1094, 1096, 1100, 1101, 1102, 1104, 1107, 1109, 1111, 1113], "entri": [178, 179, 406, 415, 416, 953, 992, 1017, 1030], "boolean": [178, 179, 361, 406, 413, 425, 431, 449, 461, 462, 497, 509, 512, 550, 553, 554, 557, 562, 565, 570, 573, 663, 666, 667, 670, 671, 674, 675, 678, 749, 750, 753, 757, 758, 788, 789, 790, 794, 795, 796, 797, 798, 815, 822, 823, 835, 1013, 1014, 1015, 1017, 1027, 1073, 1086, 1089], "evalu": [178, 179, 361, 512, 599, 603, 606, 643, 646, 647, 650, 651, 654, 655, 658, 686, 689, 710, 713, 726, 729, 1017, 1018, 1027, 1028, 1106, 1107, 1110, 1111, 1114], "assert": [178, 179, 369, 370, 749, 759], "skip": [178, 179, 350, 356, 1017, 1030], "prune": [178, 179, 1017, 1030, 1031, 1032], "all_key_chain": [178, 179], "include_empti": [178, 179], "all_tru": [178, 179, 361, 370], "arrays_as_list": [178, 179], "intermedi": [178, 179], "as_arrai": [178, 179, 749, 786, 811], "as_bool": [178, 179], "as_on": [178, 179], "ones": [178, 179, 180, 181, 356, 367, 369, 370, 406, 411, 420, 512, 574, 577, 749, 802, 1115], "sub": [178, 179, 348, 349, 351, 356, 361, 369, 370, 371, 462, 487, 488, 491, 492, 493, 494, 867, 877, 879, 953, 992, 1013, 1014, 1015, 1016, 1115], "fill": [178, 179, 406, 409, 413, 414, 419, 420, 423, 424, 1040, 1042, 1043], "as_random_uniform": [178, 179], "low": [178, 179, 183, 260, 290, 291, 332, 333, 367, 1040, 1042, 1043, 1044, 1046, 1047, 1048, 1049], "uniform": [178, 179, 371, 1040, 1041, 1042, 1043, 1046, 1048, 1127, 1129, 1130, 1133, 1134], "lower": [178, 179, 348, 354, 367, 384, 406, 411, 421, 512, 679, 867, 868, 870, 1040, 1046, 1048], "boundari": [178, 179, 1040, 1046, 1048], "output": [178, 179, 347, 351, 352, 353, 354, 356, 357, 360, 361, 363, 364, 365, 367, 369, 371, 372, 384, 395, 398, 406, 407, 409, 410, 411, 413, 414, 417, 419, 420, 423, 424, 462, 471, 472, 506, 507, 512, 513, 516, 517, 520, 521, 524, 525, 528, 530, 533, 534, 537, 538, 542, 545, 550, 553, 554, 557, 558, 561, 562, 565, 566, 569, 570, 573, 574, 577, 578, 581, 582, 585, 599, 602, 603, 606, 607, 623, 626, 627, 630, 631, 634, 635, 638, 643, 646, 647, 650, 651, 654, 655, 658, 659, 662, 663, 666, 667, 670, 671, 674, 675, 678, 681, 684, 686, 689, 690, 693, 698, 701, 702, 705, 706, 709, 710, 713, 714, 717, 718, 721, 722, 725, 726, 729, 730, 734, 735, 740, 749, 760, 762, 764, 768, 775, 777, 823, 830, 854, 856, 858, 860, 862, 864, 865, 866, 867, 925, 927, 937, 938, 941, 943, 946, 948, 951, 953, 954, 957, 967, 970, 971, 974, 975, 978, 979, 982, 987, 990, 993, 996, 997, 1000, 1001, 1004, 1005, 1008, 1017, 1030, 1035, 1036, 1039, 1040, 1042, 1043, 1045, 1046, 1048, 1062, 1063, 1066, 1068, 1071, 1073, 1074, 1077, 1078, 1081, 1082, 1085, 1086, 1089, 1090, 1093, 1094, 1097, 1098, 1101, 1102, 1105, 1106, 1107, 1110, 1111, 1114, 1115, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1144, 1145, 1146, 1147], "interv": [178, 179, 367, 372, 406, 407, 415, 416, 867, 928, 930, 953, 954, 957, 997, 1000, 1040, 1042, 1043, 1046, 1048, 1106, 1107, 1110, 1111, 1114], "as_vari": [178, 179], "as_zero": [178, 179], "assert_contains_sub_contain": [178, 179], "sub_cont": [178, 179], "partial": [178, 179, 348, 1148, 1149], "except": [178, 179, 353, 360, 364, 369, 384, 425, 433, 749, 759, 770, 793, 820, 867, 888, 906, 908, 953, 959, 962, 997, 1000, 1052, 1055, 1106, 1107, 1110, 1111, 1114], "diff": [178, 179, 361, 370], "screen": [178, 179, 370], "assert_contains_sub_structur": [178, 179], "check_shap": [178, 179], "static": [178, 179, 183, 189, 276, 277, 280, 281, 284, 290, 292, 296, 297, 310, 311, 314, 315, 316, 317, 318, 319, 326, 327, 328, 329, 332, 333, 338, 339, 344, 345, 349, 353, 354, 357, 384, 403, 404, 434, 438, 529, 541, 546, 659, 736, 741, 744, 750, 754, 778, 782, 954, 958, 987, 991, 1042, 1044], "assert_ident": [178, 179], "check_typ": [178, 179], "same_arrai": [178, 179, 370], "arrays_equ": [178, 179, 180, 181, 749], "datatyp": [178, 179, 406, 408, 418, 425, 439, 450, 451, 452], "exact": [178, 179, 348, 367, 1057, 1058], "assert_identical_structur": [178, 179], "at_key_chain": [178, 179], "ignore_key_error": [178, 179], "ignore_non": [178, 179], "at_kei": [178, 179], "ignor": [178, 179, 354, 384, 406, 417, 1017, 1028, 1152, 1156], "substr": [178, 179], "access": [178, 179, 348, 350, 362], "clip_min": [178, 179], "clip_max": [178, 179], "minimum": [178, 179, 367, 372, 462, 512, 513, 516, 749, 784, 785, 807, 808, 813, 814, 953, 954, 957, 1052, 1054, 1073, 1078, 1081, 1086, 1089, 1115], "config": [178, 179, 370, 1017, 1030], "right": [178, 179, 346, 347, 348, 351, 354, 370, 512, 558, 561, 566, 569, 867, 916], "duplic": [178, 179, 353, 358, 359, 369, 371], "compar": [178, 179, 356, 370, 749, 750, 753, 757, 758, 1057, 1058, 1059, 1061, 1062, 1063, 1066, 1068, 1071], "configur": [178, 179, 347, 348, 350, 362, 462, 505, 1017, 1030], "container_rightmost": [178, 179], "common_key_chain": [178, 179, 361], "across": [178, 179, 349, 354, 356, 357, 361, 362, 365, 462, 471, 472, 483, 484, 486, 487, 488, 489, 490, 494, 504, 505, 749, 757, 758, 1017, 1023, 1052, 1054], "properti": [178, 179, 354, 356, 357, 361, 369, 370, 371, 462, 474, 1148, 1149, 1152, 1153, 1154, 1155, 1157], "contains_sub_contain": [178, 179], "match": [178, 179, 361, 425, 431, 512, 702, 705, 749, 799], "contains_sub_structur": [178, 179], "copi": [178, 179, 350, 353, 358, 362, 367, 369, 370, 383, 384, 406, 408, 412, 425, 431, 462, 507, 749, 766, 818, 819, 953, 983, 986, 1017, 1019, 1062, 1068, 1071], "create_if_abs": [178, 179], "inplac": [178, 179, 183, 187, 228, 234, 235, 255, 275, 285, 286, 287, 289, 318, 319, 351, 354, 359, 360, 365, 369, 371, 749, 759, 790, 793, 794, 815, 823, 826, 827, 828, 829, 831, 832, 833, 834, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 1125, 1126, 1152, 1153, 1154, 1155, 1156, 1157], "correspond": [178, 179, 180, 181, 183, 348, 353, 354, 355, 357, 360, 361, 362, 365, 425, 432, 512, 542, 545, 698, 701, 867, 871, 873, 880, 882, 913, 915, 953, 959, 962, 987, 990, 1040, 1041, 1052, 1053, 1054, 1057, 1058, 1059, 1061, 1073, 1090, 1093, 1094, 1097, 1098, 1102, 1105], "alreadi": [178, 179, 347, 348, 358, 361, 365, 369, 384, 462, 512, 574, 577, 607, 681, 684, 706, 709, 745, 748, 867, 903, 905, 1115], "noth": [178, 179, 348], "cutoff_at_depth": [178, 179], "depth_cutoff": [178, 179], "summari": [178, 179, 348, 425, 440, 441, 442, 454, 455, 456, 462, 475, 476, 749, 765, 769, 787, 823, 848, 853], "cutoff_at_height": [178, 179], "height_cutoff": [178, 179], "deep_copi": [178, 179, 370], "intern": [178, 179, 353, 360, 361, 363, 364, 462, 823, 852, 1017, 1018, 1027, 1028, 1127, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1158, 1159], "dev": [178, 179, 180, 182, 183, 196, 347, 357, 363, 367, 369, 371, 462, 471, 496], "belong": [178, 179, 371], "dev_clon": [178, 179, 462], "clone": [178, 179, 348, 350, 462, 483, 484, 485, 486], "dev_dist": [178, 179, 462], "distribut": [178, 179, 349, 363, 384, 462, 483, 487, 488, 489, 490, 854, 862, 937, 938, 941, 943, 946, 948, 951, 1040, 1041, 1042, 1043, 1045, 1046, 1048, 1136, 1144, 1148, 1149], "along": [178, 179, 352, 364, 406, 415, 416, 462, 487, 488, 489, 490, 491, 492, 493, 494, 506, 749, 767, 768, 777, 821, 867, 893, 895, 925, 927, 928, 930, 931, 933, 937, 943, 946, 948, 951, 953, 959, 962, 971, 974, 979, 982, 987, 990, 992, 997, 1000, 1005, 1008, 1013, 1014, 1015, 1016, 1040, 1051, 1052, 1053, 1054, 1062, 1063, 1066, 1068, 1071, 1073, 1074, 1077, 1078, 1081, 1082, 1085, 1086, 1089, 1090, 1093, 1094, 1097, 1098, 1101, 1102, 1105, 1106, 1107, 1110, 1111, 1114], "split": [178, 179, 346, 348, 366, 367, 384, 462, 471, 487, 488, 489, 490, 504, 505, 506, 749, 799, 953, 1115], "dev_str": [178, 179], "diff_kei": [178, 179], "detect_key_diff": [178, 179], "detect_value_diff": [178, 179], "detect_shape_diff": [178, 179], "thei": [178, 179, 349, 351, 352, 354, 357, 359, 361, 362, 363, 364, 369, 370, 371, 372, 384, 425, 452, 1013, 1014, 1015, 1040, 1041, 1115, 1158, 1159], "treat": [178, 179, 368, 372, 403, 404], "detect": [178, 179, 365, 370, 371, 1017, 1018, 1028], "without": [178, 179, 348, 352, 357, 360, 361, 363, 365, 367, 369, 370, 371, 383, 384, 749, 804, 809, 953, 983, 986, 1017, 1019, 1057, 1058, 1059, 1061], "flag": [178, 179, 348, 364, 369, 462, 481, 823, 835], "container0": [178, 179], "einops_rearrang": [178, 179, 749], "axes_length": [178, 179, 749, 771, 772, 773], "rearrang": [178, 179, 749, 771, 773], "addit": [178, 179, 347, 348, 352, 353, 356, 361, 362, 369, 370, 372, 462, 507, 512, 525, 749, 771, 772, 773, 1035, 1036, 1039, 1136, 1146], "einops_reduc": [178, 179, 749], "reduct": [178, 179, 362, 369, 749, 772, 805, 806, 1106, 1107, 1110, 1111, 1114, 1115], "One": [178, 179, 362, 367, 369, 370, 749, 772, 953, 983, 986, 1040, 1042, 1043], "callabl": [178, 179, 361, 367, 385, 386, 387, 388, 389, 390, 391, 392, 393, 403, 404, 425, 446, 447, 462, 506, 749, 755, 760, 770, 772, 1013, 1014, 1015, 1016, 1017, 1023, 1027, 1028, 1029], "einops_repeat": [178, 179, 749], "find_sub_contain": [178, 179], "sub_cont_to_find": [178, 179], "exsit": [178, 179], "find_sub_structur": [178, 179], "sub_struc_to_find": [178, 179], "flatten_key_chain": [178, 179, 370, 1148, 1149], "__": [178, 179, 354, 370], "above_height": [178, 179, 370], "below_depth": [178, 179, 370], "format_key_chain": [178, 179], "format_fn": [178, 179], "format": [178, 179, 350, 353, 362, 363, 367, 369, 370, 425, 443, 462, 482, 1073, 1074, 1077, 1101, 1115], "string": [178, 179, 358, 362, 363, 367, 370, 425, 429, 430, 443, 449, 461, 462, 478, 479, 480, 481, 495, 501, 507, 508, 511, 749, 769], "from_disk_as_hdf5": [178, 179, 370], "h5_obj_or_filepath": [178, 179], "slice_obj": [178, 179], "load": [178, 179, 384], "disk": [178, 179, 370], "h5py": [178, 179], "file": [178, 179, 347, 348, 350, 352, 353, 357, 358, 360, 361, 367, 370, 749, 810, 1148, 1149], "hdf5": [178, 179, 370, 1148, 1149], "filepath": [178, 179, 348], "h5": [178, 179], "from_disk_as_json": [178, 179, 370], "json_filepath": [178, 179], "json": [178, 179, 370], "were": [178, 179, 348, 352, 356, 361], "abl": [178, 179, 347, 348, 357, 362, 364, 369, 372], "dure": [178, 179, 357, 361, 362, 363, 364, 384, 403, 404, 462, 507, 749, 820, 823, 825, 826, 828, 836, 838, 867, 889, 892, 1013, 1014, 1015, 1016, 1073, 1094, 1097, 1102, 1105, 1148, 1149, 1152, 1153, 1154, 1156], "from_disk_as_pickl": [178, 179, 370], "pickle_filepath": [178, 179], "pickl": [178, 179, 361, 370], "from_flat_list": [178, 179], "flat_list": [178, 179], "hierarchi": [178, 179, 370], "flat": [178, 179, 749, 805, 953, 979, 982], "popul": [178, 179, 362, 363, 367, 1040, 1041, 1073, 1094, 1097, 1102, 1105], "from_numpi": [178, 179, 370], "gather": [178, 179, 749, 778, 781], "accord": [178, 179, 347, 350, 357, 362, 425, 434, 437, 445, 512, 525, 566, 569, 681, 684, 749, 777, 805, 806, 867, 928, 930, 953, 963, 966, 1009, 1012, 1073, 1094, 1097, 1102, 1105], "index": [178, 179, 350, 357, 361, 369, 405, 406, 411, 417, 462, 503, 749, 755, 777, 778, 781, 953, 997, 1000, 1017, 1020, 1021, 1024, 1025, 1026, 1031, 1033, 1052, 1053, 1054, 1055, 1057, 1058, 1059, 1062, 1063, 1066, 1118, 1120], "h5_file_s": [178, 179], "content": [178, 179, 349, 350, 364, 367, 370], "batch": [178, 179, 357, 361, 370, 462, 504, 505, 749, 776, 854, 863, 867, 931, 933, 1013, 1014, 1015, 1016, 1035, 1036, 1039, 1150, 1151], "handle_inplac": [178, 179], "prime": [178, 179], "overwritten": [178, 179, 358, 360], "has_kei": [178, 179], "query_kei": [178, 179], "somewher": [178, 179], "has_key_chain": [178, 179], "has_nan": [178, 179, 749], "include_inf": [178, 179, 749, 788, 822], "leafwis": [178, 179], "nan": [178, 179, 352, 353, 405, 425, 431, 512, 513, 516, 517, 520, 521, 524, 525, 528, 530, 533, 534, 537, 538, 542, 545, 574, 577, 578, 581, 582, 585, 599, 602, 603, 606, 607, 623, 626, 631, 634, 643, 646, 647, 650, 655, 658, 659, 662, 681, 684, 698, 701, 702, 705, 706, 709, 714, 717, 718, 721, 722, 725, 735, 740, 745, 748, 749, 788, 822, 854, 866, 1057, 1058, 1059, 1061, 1073, 1078, 1081, 1082, 1085, 1086, 1089, 1094, 1097, 1098, 1102, 1105, 1106, 1107, 1110, 1111, 1114], "well": [178, 179, 356, 364, 371, 372, 383, 749, 788, 867, 913, 915], "inf": [178, 179, 405, 749, 788, 822, 867, 931, 933], "wise": [178, 179, 367, 372, 395, 396, 397, 398, 399, 400, 401, 402, 512, 513, 516, 517, 525, 528, 530, 533, 538, 542, 545, 550, 553, 554, 557, 558, 561, 562, 565, 566, 569, 570, 573, 586, 589, 591, 594, 595, 598, 602, 610, 611, 614, 615, 618, 619, 622, 635, 638, 639, 642, 659, 662, 663, 666, 667, 670, 671, 674, 675, 678, 679, 680, 681, 684, 690, 693, 698, 701, 702, 705, 730, 734, 749, 775, 953, 954, 957], "identical_array_shap": [178, 179], "exclus": [178, 179, 357, 361, 372, 406, 407, 749, 767, 795, 796, 798, 823, 835, 1040, 1042, 1043], "identical_config": [178, 179], "identical_structur": [178, 179], "if_exist": [178, 179], "inplace_upd": [178, 179, 364, 749, 1125, 1126], "key_chains_contain": [178, 179], "sub_str": [178, 179], "join": [178, 179, 953, 959, 962, 997, 1000, 1115], "list_stack": [178, 179, 370], "dim": [178, 179, 362, 749, 802, 1136, 1147], "func": [178, 179, 361, 403, 404, 462, 506, 749, 760, 823, 830, 1017, 1030], "map_cont": [178, 179], "include_self": [178, 179], "possibi": [178, 179], "place": [178, 179, 348, 351, 352, 353, 354, 356, 357, 361, 363, 365, 372, 406, 407, 408, 409, 410, 411, 413, 414, 418, 419, 420, 423, 424, 425, 434, 437, 462, 507, 512, 525, 530, 533, 550, 553, 570, 573, 574, 577, 582, 607, 690, 693, 706, 709, 722, 725, 726, 729, 735, 740, 749, 777, 791, 792, 793, 854, 857, 866, 867, 874, 953, 967, 970, 971, 974, 987, 990, 1035, 1036, 1039, 1057, 1058, 1059, 1062, 1063, 1066, 1073, 1078, 1081, 1106, 1107, 1110, 1152, 1153, 1154, 1155, 1156, 1157], "matrix": [178, 179, 406, 417, 421, 422, 749, 750, 753, 761, 854, 863, 867, 868, 870, 874, 877, 879, 880, 882, 883, 885, 886, 888, 889, 892, 893, 895, 896, 897, 899, 900, 902, 906, 908, 909, 911, 913, 915, 916, 918, 919, 921, 925, 927, 934, 936, 1136, 1146], "p": [178, 179, 183, 211, 316, 317, 347, 348, 406, 417, 749, 761, 762, 763, 764, 854, 862, 867, 893, 895, 931, 933, 1136, 1144], "integ": [178, 179, 361, 362, 369, 406, 407, 413, 425, 448, 451, 453, 512, 513, 516, 550, 553, 554, 557, 558, 561, 562, 565, 566, 569, 570, 573, 574, 577, 589, 607, 610, 611, 614, 675, 678, 698, 701, 702, 705, 706, 709, 745, 748, 867, 896, 928, 930, 931, 933, 953, 992, 1040, 1042, 1043, 1050, 1073, 1078, 1081, 1082, 1085, 1086, 1089, 1090, 1093, 1094, 1097, 1098, 1102, 1105, 1106, 1107, 1110, 1111, 1114], "flatten": [178, 179, 749, 776, 867, 903, 905, 931, 933, 953, 979, 982, 987, 990, 1052, 1053, 1054, 1057, 1058, 1059, 1061], "left": [178, 179, 347, 348, 354, 362, 512, 558, 561, 867, 880, 882, 893, 895, 916, 1052, 1053, 1115], "broadcast": [178, 179, 352, 353, 354, 361, 362, 395, 398, 425, 432, 433, 462, 507, 512, 513, 516, 517, 520, 521, 524, 525, 528, 530, 533, 534, 537, 538, 542, 545, 550, 553, 554, 557, 558, 561, 562, 565, 566, 569, 570, 573, 574, 577, 578, 581, 582, 585, 586, 589, 591, 594, 599, 602, 603, 606, 607, 610, 611, 614, 618, 619, 622, 623, 626, 627, 630, 631, 634, 635, 638, 639, 642, 643, 646, 647, 650, 651, 654, 655, 658, 659, 662, 663, 666, 667, 670, 671, 674, 675, 678, 679, 680, 681, 684, 686, 689, 690, 693, 698, 701, 702, 705, 706, 709, 710, 713, 714, 717, 718, 721, 722, 725, 726, 729, 730, 734, 735, 740, 749, 762, 764, 775, 867, 888, 889, 892, 893, 895, 897, 899, 906, 908, 913, 915, 928, 930, 931, 933, 937, 938, 941, 943, 946, 948, 951, 953, 954, 957, 967, 970, 971, 974, 975, 978, 979, 982, 987, 990, 993, 996, 997, 1000, 1001, 1004, 1040, 1042, 1043, 1052, 1053, 1054, 1062, 1068, 1071, 1073, 1078, 1081, 1082, 1085, 1086, 1089, 1090, 1093, 1094, 1097, 1098, 1102, 1105, 1106, 1107, 1110, 1111, 1114], "correctli": [178, 179, 347, 356, 361, 362, 365, 371, 384, 867, 893, 895, 1052, 1053], "max_depth": [178, 179, 462, 466, 469, 476, 486, 490, 494, 749, 787, 1017, 1029], "multi_map": [178, 179, 361], "map_nest": [178, 179, 183, 199, 202, 204, 205, 206, 207, 212, 219, 226, 229, 230, 237, 238, 243, 244, 246, 247, 248, 254, 258, 261, 274, 314, 315, 324, 325, 328, 329, 528, 542, 544, 550, 552, 558, 560, 562, 564, 566, 568, 570, 572, 589, 593, 594, 602, 610, 611, 613, 617, 618, 619, 621, 635, 637, 639, 641, 659, 661, 663, 665, 671, 673, 675, 677, 690, 692, 698, 700, 702, 704, 889, 891, 959, 961, 997, 999], "leftmost": [178, 179, 1017, 1030], "multi_map_in_static_method": [178, 179, 361], "fn_name": [178, 179], "num_arrai": [178, 179], "overwrite_at_key_chain": [178, 179], "overwrit": [178, 179, 364, 367, 462, 506], "target_dict": [178, 179], "return_dict": [178, 179], "prune_empti": [178, 179], "keep_non": [178, 179], "empti": [178, 179, 180, 181, 360, 362, 363, 406, 407, 1073, 1094, 1097, 1098, 1106, 1107, 1110, 1111, 1114], "prune_key_chain": [178, 179], "key1": [178, 179, 371], "key2": [178, 179], "key3": [178, 179], "prune_key_from_key_chain": [178, 179], "absolut": [178, 179, 346, 512, 513, 516, 867, 876, 912], "certain": [178, 179, 347, 384, 406, 407, 415, 416], "decid": [178, 179, 347, 1017, 1028], "remov": [178, 179, 348, 349, 350, 353, 356, 357, 362, 364, 372, 867, 877, 879, 889, 892, 925, 927, 953, 993, 996, 1013, 1014, 1015], "prune_kei": [178, 179], "prune_keys_from_key_chain": [178, 179], "remove_key_length_limit": [178, 179], "remove_print_limit": [178, 179], "reshape_lik": [178, 179], "leading_shap": [178, 179], "return_cont": [178, 179], "restructur": [178, 179], "keep_orig": [178, 179], "transpos": [178, 179, 369, 372, 462, 493, 854, 856, 858, 860, 867, 888, 900, 902, 906, 908, 1115, 1136, 1138, 1140, 1142], "old": [178, 179, 347, 364], "keep": [178, 179, 347, 348, 355, 361, 368, 370, 372, 749, 821], "start": [178, 179, 346, 347, 348, 349, 350, 351, 353, 354, 362, 366, 367, 369, 370, 371, 383, 384, 406, 407, 415, 416, 462, 477], "restructure_key_chain": [178, 179], "keychain_map": [178, 179], "set_at_key_chain": [178, 179], "set_at_kei": [178, 179], "set_framework": [178, 179, 367, 369, 370, 372], "set_ivy_backend": [178, 179], "ivy_backend": [178, 179], "attribut": [178, 179, 353, 361, 362, 368, 369, 370, 371, 425, 445, 446, 447, 448, 462, 502], "show": [178, 179, 347, 348, 354, 364, 383, 384, 1115], "show_sub_contain": [178, 179], "sub_cont_or_keychain": [178, 179], "shuffl": [178, 179, 1040, 1115], "seed_valu": [178, 179, 1040, 1050], "align": [178, 179, 347, 367, 369, 1115, 1121], "seed": [178, 179, 180, 181, 1040, 1115], "shuffle_h5_fil": [178, 179], "dataset": [178, 179, 370, 382, 1115], "size_ordered_arrai": [178, 179], "keychain": [178, 179], "smallest": [178, 179, 425, 445, 448, 512, 574, 577], "largest": [178, 179, 383, 425, 445, 448, 867, 916], "slice_kei": [178, 179], "key_slic": [178, 179], "all_depth": [178, 179], "slice_via_kei": [178, 179], "sort_by_kei": [178, 179], "num_or_size_split": [178, 179, 367, 953, 992], "with_remaind": [178, 179, 953, 992], "constitu": [178, 179, 372], "dimension": [178, 179, 406, 407, 411, 417, 867, 871, 873, 874, 888, 889, 892, 897, 899, 903, 905, 906, 908, 928, 930, 931, 933, 953, 992, 1052, 1053, 1054, 1055, 1073, 1078, 1081, 1082, 1085, 1086, 1089, 1090, 1093, 1094, 1097, 1098, 1102, 1105, 1106, 1107, 1110, 1111, 1114], "evenli": [178, 179, 406, 407, 415, 416, 953, 992], "store": [178, 179, 353, 358, 360, 361, 367, 369, 370, 371, 749, 776, 823, 852, 867, 925, 927, 953, 992, 1148, 1149], "stop_gradi": [178, 179, 180, 181, 183, 187, 228, 234, 235, 255, 275, 285, 286, 287, 289, 318, 319, 371, 462, 506, 823, 826, 827, 828, 829, 831, 832, 833, 834, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 1013, 1014, 1015, 1016, 1115, 1152, 1153, 1154, 1155, 1156, 1157], "preserve_typ": [178, 179, 823, 849], "stop": [178, 179, 367, 384, 406, 407, 415, 416, 462, 477, 506, 823, 826, 828, 831, 833, 836, 838, 840, 842, 844, 846, 849, 1013, 1014, 1015, 1016, 1152, 1153, 1154, 1155, 1156, 1157], "alwai": [178, 179, 348, 349, 352, 353, 357, 358, 360, 361, 364, 365, 367, 369, 384, 425, 431, 512, 525, 681, 684, 749, 793, 823, 835, 849], "structural_diff": [178, 179], "to_devic": [178, 179, 462, 481], "move": [178, 179, 348, 352, 462, 507], "cuda": [178, 179, 367, 370, 384, 406, 415, 416, 462, 471, 478, 503, 749, 777, 778, 781, 802, 805, 806, 1040, 1041, 1042, 1043, 1046, 1048, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1156, 1158, 1159], "cpu": [178, 179, 348, 363, 384, 406, 415, 416, 462, 481, 482, 484, 498, 501, 503, 507, 508, 510, 511, 749, 777, 778, 781, 802, 805, 806, 1040, 1041, 1042, 1043, 1045, 1046, 1048, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1156, 1158, 1159], "target": [178, 179, 351, 366, 370, 371, 372, 462, 480, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 1115], "to_dict": [178, 179], "to_disk_as_hdf5": [178, 179, 370], "starting_index": [178, 179], "max_batch_s": [178, 179], "read": [178, 179, 350, 1115], "r": [178, 179, 347, 749, 758, 821, 867, 909, 911, 934, 936], "w": [178, 179, 183, 275, 285, 286, 287, 289, 318, 319, 367, 370, 371, 749, 758, 823, 825, 826, 828, 829, 831, 833, 834, 836, 838, 839, 840, 842, 843, 844, 846, 847, 854, 855, 856, 857, 858, 859, 860, 861], "later": [178, 179, 749, 760], "append": [178, 179, 350, 356, 367, 370, 512, 558, 561, 867, 877, 879, 889, 892], "to_disk_as_json": [178, 179, 370], "to_disk_as_pickl": [178, 179, 370], "to_flat_list": [178, 179], "to_iter": [178, 179, 361], "leaf_keys_onli": [178, 179], "to_iterator_kei": [178, 179], "to_iterator_valu": [178, 179], "to_json": [178, 179], "to_list": [178, 179, 749, 1115], "to_multi_dev": [178, 179], "multidevcontain": [178, 179, 180], "distributedarrai": [178, 179], "to_numpi": [178, 179, 370, 749, 1115], "update_backend": [178, 179], "to_raw": [178, 179], "raw": [178, 179, 353], "trim_kei": [178, 179], "max_length": [178, 179], "try_kc": [178, 179], "tri": [178, 179], "arbitrari": [178, 179, 356, 357, 361, 364, 365, 371, 384, 406, 417, 425, 432, 453, 462, 491, 492, 494], "concatten": [178, 179, 462, 491, 492, 493, 494, 506], "unstack": [178, 179, 367, 370, 749, 1115], "dim_siz": [178, 179, 462], "update_config": [178, 179], "global_norm": [178, 179, 183, 211, 316, 317, 762, 763], "vector": [178, 179, 383, 406, 417, 749, 762, 764, 854, 863, 867, 871, 873, 880, 882, 889, 892, 903, 905, 916, 918, 919, 921, 928, 930, 931, 933, 934, 936, 1136, 1146], "with_default_key_color": [178, 179], "with_entries_as_list": [178, 179], "with_ivy_backend": [178, 179], "with_key_length_limit": [178, 179, 370], "with_print_ind": [178, 179, 370], "with_print_limit": [178, 179, 370], "with_print_line_spac": [178, 179], "containerwithcr": [180, 181, 308], "containerwithdatatyp": [180, 181, 310], "containerwithdevic": [180, 181, 312], "containerwithelementwis": [180, 181, 314, 361], "containerwithgener": [180, 181, 316], "containerwithgradi": [180, 181, 318], "containerwithimag": [180, 181, 320], "containerwithlay": [180, 181, 322], "containerwithlinearalgebra": [180, 181, 324], "containerwithloss": [180, 181, 326], "containerwithmanipul": [180, 181, 328, 349], "containerwithnorm": [180, 181, 330], "containerwithrandom": [180, 181, 332], "containerwithsearch": [180, 181, 334], "containerwithset": [180, 181, 336], "containerwithsort": [180, 181, 338], "containerwithstatist": [180, 181, 340], "containerwithutil": [180, 181, 342], "__add__": [180, 181, 183, 353, 354, 360, 361, 365, 369], "special": [180, 181, 183, 349, 352, 353, 354, 360, 365, 512, 513, 516, 517, 520, 521, 524, 525, 528, 530, 533, 534, 537, 538, 542, 545, 570, 573, 574, 577, 578, 581, 582, 585, 599, 602, 603, 606, 607, 643, 646, 647, 650, 655, 658, 659, 662, 681, 684, 698, 701, 702, 705, 706, 709, 710, 713, 714, 717, 718, 721, 722, 725, 735, 740, 745, 748, 1073, 1078, 1081, 1082, 1085, 1086, 1089, 1094, 1097, 1098, 1102, 1105], "11": [180, 181, 183, 188, 276, 290, 314, 315, 332, 333, 354, 361, 512, 525, 527, 529, 550, 553, 659, 706, 709, 749, 767, 777, 867, 877, 879, 903, 905, 937, 948, 951, 953, 971, 974, 979, 982, 1040, 1042, 1043, 1044, 1052, 1056, 1057, 1058, 1073, 1074, 1077, 1101], "__radd__": [180, 181, 183, 353, 354], "revers": [180, 181, 183, 349, 353, 354, 372, 384, 749, 770, 953, 971, 974], "adam_step": [180, 181, 823], "arang": [180, 181, 362, 406, 415, 416, 1073, 1074, 1077, 1101, 1115], "arg_info": [180, 181, 749], "arg_nam": [180, 181, 749], "argmax": [180, 181, 1052, 1115], "argmin": [180, 181, 1052, 1115], "array_equ": [180, 181, 749], "as_ivy_dev": [180, 181, 369, 462], "as_ivy_dtyp": [180, 181, 425], "as_native_dev": [180, 181, 462], "as_native_dtyp": [180, 181, 425], "asarrai": [180, 181, 364, 406, 854, 855, 1057, 1059], "assert_supports_inplac": [180, 181, 749], "astyp": [180, 181, 362, 364, 425], "broadcast_arrai": [180, 181, 425], "broadcast_to": [180, 181, 362, 425], "cache_fn": [180, 181, 357, 749], "clear_mem_on_dev": [180, 181, 462], "clip_matrix_norm": [180, 181, 749], "closest_valid_dtyp": [180, 181, 425], "container_typ": [180, 181, 749], "conv1d": [180, 181, 854, 1136], "conv1d_transpos": [180, 181, 854], "conv2d": [180, 181, 854, 1115, 1136], "conv2d_transpos": [180, 181, 854], "conv3d": [180, 181, 854, 1136], "conv3d_transpos": [180, 181, 854], "copy_arrai": [180, 181, 749], "cumprod": [180, 181, 372, 749], "cumsum": [180, 181, 749, 1115], "current_backend_str": [180, 181, 749], "default_devic": [180, 181, 363, 367, 462, 500, 503, 510], "default_dtyp": [180, 181, 357, 362, 425], "default_float_dtyp": [180, 181, 362, 425], "default_int_dtyp": [180, 181, 362, 425], "depthwise_conv2d": [180, 181, 854, 1115], "dev_clone_arrai": [180, 181, 462], "dev_clone_it": [180, 181, 462], "dev_clone_nest": [180, 181, 462], "dev_dist_arrai": [180, 181, 462], "dev_dist_it": [180, 181, 462], "dev_dist_nest": [180, 181, 462], "dev_unifi": [180, 181, 462], "dev_unify_arrai": [180, 181, 462], "dev_unify_it": [180, 181, 462], "dev_unify_nest": [180, 181, 462], "dev_util": [180, 181, 363, 462], "dropout": [180, 181, 370, 854, 1136, 1147], "dtype_bit": [180, 181, 425], "empty_lik": [180, 181, 406], "execute_with_gradi": [180, 181, 361, 370, 371, 372, 384, 823, 1115], "ey": [180, 181, 372, 406, 854, 857, 861], "finfo": [180, 181, 425], "floormod": [180, 181, 749, 1115], "fourier_encod": [180, 181, 749], "from_dlpack": [180, 181, 406], "full_lik": [180, 181, 406], "function_supported_dtyp": [180, 181, 425], "function_unsupported_dtyp": [180, 181, 425], "gelu": [180, 181, 395, 1122], "get_all_arrays_in_memori": [180, 181, 749], "get_all_ivy_arrays_on_dev": [180, 181, 363, 462], "get_min_bas": [180, 181, 749], "get_min_denomin": [180, 181, 749], "get_num_dim": [180, 181, 749, 1115], "get_referrers_recurs": [180, 181, 749], "gpu_is_avail": [180, 181, 462], "handle_nest": [180, 181, 357, 361, 385], "handle_out_argu": [180, 181, 359, 362, 363, 364, 365, 385], "iinfo": [180, 181, 425], "indices_wher": [180, 181, 749, 1115], "infer_devic": [180, 181, 362, 363, 365, 385], "infer_dtyp": [180, 181, 362, 363, 365, 385], "inplace_arrays_support": [180, 181, 749], "inplace_decr": [180, 181, 749], "inplace_incr": [180, 181, 749], "inplace_variables_support": [180, 181, 749], "inputs_to_native_arrai": [180, 181, 360, 385], "invalid_dtyp": [180, 181, 425], "is_float_dtyp": [180, 181, 425], "is_int_dtyp": [180, 181, 425, 749, 819], "is_ivy_contain": [180, 181, 749], "leaky_relu": [180, 181, 395, 1115], "linear": [180, 181, 353, 367, 370, 371, 372, 395, 396, 397, 398, 749, 776, 854, 862, 913, 915, 1115, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143], "linspac": [180, 181, 367, 406, 407, 1115], "logspac": [180, 181, 367, 406], "lstm_updat": [180, 181, 367, 854], "match_kwarg": [180, 181, 749], "matrix_pow": [180, 181, 867], "meshgrid": [180, 181, 406], "multi_head_attent": [180, 181, 361, 364, 854], "multinomi": [180, 181, 1040], "nonzero": [180, 181, 512, 525, 681, 684, 1052], "num_arrays_in_memori": [180, 181, 749], "num_cpu_cor": [180, 181, 363, 462], "num_gpu": [180, 181, 356, 363, 462], "num_ivy_arrays_on_dev": [180, 181, 462], "one_hot": [180, 181, 372, 749, 1115], "ones_lik": [180, 181, 372, 406, 1115], "outputs_to_ivy_arrai": [180, 181, 360, 362, 363, 365, 385], "percent_used_mem_on_dev": [180, 181, 462], "print_all_arrays_in_memori": [180, 181, 749], "print_all_ivy_arrays_on_dev": [180, 181, 462], "promote_typ": [180, 181, 425], "randint": [180, 181, 183, 290, 332, 333, 1040, 1044, 1115], "random_norm": [180, 181, 854, 857, 860, 861, 867, 916, 1040, 1057, 1058], "result_typ": [180, 181, 362, 425], "scaled_dot_product_attent": [180, 181, 854], "scatter_flat": [180, 181, 749], "scatter_nd": [180, 181, 369, 749, 1115], "set_default_devic": [180, 181, 363, 462, 510], "set_default_dtyp": [180, 181, 357, 362, 425], "set_default_float_dtyp": [180, 181, 362, 425], "set_default_int_dtyp": [180, 181, 362, 425], "set_min_bas": [180, 181, 749], "set_min_denomin": [180, 181, 749], "set_queue_timeout": [180, 181, 749], "set_split_factor": [180, 181, 462], "set_tmp_dir": [180, 181, 749], "set_with_grad": [180, 181, 823], "shape_to_tupl": [180, 181, 362, 749], "sigmoid": [180, 181, 367, 370, 371, 395, 1115], "slogdet": [180, 181, 867, 876], "softplu": [180, 181, 395, 1115], "split_factor": [180, 181, 462, 471], "split_func_cal": [180, 181, 462], "stable_divid": [180, 181, 357, 749], "stable_pow": [180, 181, 749], "static_ab": [180, 181], "static_aco": [180, 181], "static_acosh": [180, 181], "static_adam_step": [180, 181], "static_al": [180, 181], "static_ani": [180, 181], "static_arang": [180, 181], "static_arg_info": [180, 181], "static_arg_nam": [180, 181], "static_argmax": [180, 181], "static_argmin": [180, 181], "static_arrai": [180, 181], "static_array_equ": [180, 181], "static_arrays_equ": [180, 181], "static_as_ivy_dev": [180, 181], "static_as_ivy_dtyp": [180, 181], "static_as_native_dev": [180, 181], "static_as_native_dtyp": [180, 181], "static_asarrai": [180, 181], "static_asin": [180, 181], "static_asinh": [180, 181], "static_assert_supports_inplac": [180, 181], "static_astyp": [180, 181], "static_atan": [180, 181], "static_atan2": [180, 181], "static_atanh": [180, 181], "static_bitwise_and": [180, 181], "static_bitwise_invert": [180, 181], "static_bitwise_left_shift": [180, 181], "static_bitwise_or": [180, 181], "static_bitwise_right_shift": [180, 181], "static_bitwise_xor": [180, 181], "static_broadcast_arrai": [180, 181], "static_broadcast_to": [180, 181], "static_cache_fn": [180, 181], "static_ceil": [180, 181], "static_choleski": [180, 181], "static_clear_mem_on_dev": [180, 181], "static_clip_matrix_norm": [180, 181], "static_clip_vector_norm": [180, 181], "static_closest_valid_dtyp": [180, 181], "static_concat": [180, 181], "static_constant_pad": [180, 181], "static_container_typ": [180, 181], "static_conv1d": [180, 181], "static_conv1d_transpos": [180, 181], "static_conv2d": [180, 181], "static_conv2d_transpos": [180, 181], "static_conv3d": [180, 181], "static_conv3d_transpos": [180, 181], "static_copy_arrai": [180, 181], "static_co": [180, 181], "static_cosh": [180, 181], "static_cross": [180, 181], "static_cumprod": [180, 181], "static_cumsum": [180, 181], "static_current_backend": [180, 181], "static_current_backend_str": [180, 181], "static_default": [180, 181], "static_default_devic": [180, 181], "static_default_dtyp": [180, 181], "static_default_float_dtyp": [180, 181], "static_default_int_dtyp": [180, 181], "static_depthwise_conv2d": [180, 181], "static_det": [180, 181], "static_dev": [180, 181], "static_dev_clon": [180, 181], "static_dev_clone_arrai": [180, 181], "static_dev_clone_it": [180, 181], "static_dev_clone_nest": [180, 181], "static_dev_dist": [180, 181], "static_dev_dist_arrai": [180, 181], "static_dev_dist_it": [180, 181], "static_dev_dist_nest": [180, 181], "static_dev_unifi": [180, 181], "static_dev_unify_arrai": [180, 181], "static_dev_unify_it": [180, 181], "static_dev_unify_nest": [180, 181], "static_dev_util": [180, 181], "static_diagon": [180, 181], "static_dropout": [180, 181], "static_dtyp": [180, 181], "static_dtype_bit": [180, 181], "static_eigh": [180, 181], "static_eigvalsh": [180, 181], "static_einops_rearrang": [180, 181], "static_einops_reduc": [180, 181], "static_einops_repeat": [180, 181], "static_einsum": [180, 181], "static_empti": [180, 181], "static_empty_lik": [180, 181], "static_equ": [180, 181], "static_erf": [180, 181], "static_execute_with_gradi": [180, 181], "static_exist": [180, 181], "static_exp": [180, 181], "static_expand_dim": [180, 181], "static_expm1": [180, 181], "static_ey": [180, 181], "static_finfo": [180, 181], "static_flip": [180, 181], "static_floor": [180, 181], "static_floor_divid": [180, 181], "static_floormod": [180, 181], "static_fourier_encod": [180, 181], "static_from_dlpack": [180, 181], "static_ful": [180, 181], "static_full_lik": [180, 181], "static_function_supported_dtyp": [180, 181], "static_function_unsupported_dtyp": [180, 181], "static_gath": [180, 181], "static_gelu": [180, 181], "static_get_all_arrays_in_memori": [180, 181], "static_get_all_ivy_arrays_on_dev": [180, 181], "static_get_min_bas": [180, 181], "static_get_min_denomin": [180, 181], "static_get_num_dim": [180, 181], "static_get_referrers_recurs": [180, 181], "static_gpu_is_avail": [180, 181], "static_great": [180, 181], "static_greater_equ": [180, 181], "static_handle_nest": [180, 181], "static_handle_out_argu": [180, 181], "static_has_nan": [180, 181], "static_iinfo": [180, 181], "static_indices_wher": [180, 181], "static_infer_devic": [180, 181], "static_infer_dtyp": [180, 181], "static_inplace_arrays_support": [180, 181], "static_inplace_decr": [180, 181], "static_inplace_incr": [180, 181], "static_inplace_upd": [180, 181], "static_inplace_variables_support": [180, 181], "static_inputs_to_native_arrai": [180, 181], "static_inv": [180, 181], "static_invalid_dtyp": [180, 181], "static_is_arrai": [180, 181], "static_is_float_dtyp": [180, 181], "static_is_int_dtyp": [180, 181], "static_is_ivy_arrai": [180, 181], "static_is_ivy_contain": [180, 181], "static_is_native_arrai": [180, 181], "static_is_vari": [180, 181], "static_isfinit": [180, 181], "static_isinf": [180, 181], "static_isnan": [180, 181], "static_layer_norm": [180, 181], "static_leaky_relu": [180, 181], "static_less": [180, 181], "static_less_equ": [180, 181], "static_linear": [180, 181], "static_linspac": [180, 181], "static_log": [180, 181], "static_log10": [180, 181], "static_log1p": [180, 181], "static_log2": [180, 181], "static_logaddexp": [180, 181], "static_logical_and": [180, 181], "static_logical_not": [180, 181], "static_logical_or": [180, 181], "static_logical_xor": [180, 181], "static_logspac": [180, 181], "static_lstm_upd": [180, 181], "static_match_kwarg": [180, 181], "static_matmul": [180, 181], "static_matrix_norm": [180, 181], "static_matrix_pow": [180, 181], "static_matrix_rank": [180, 181], "static_matrix_transpos": [180, 181], "static_max": [180, 181], "static_maximum": [180, 181], "static_mean": [180, 181], "static_meshgrid": [180, 181], "static_min": [180, 181], "static_minimum": [180, 181], "static_multi_head_attent": [180, 181], "static_multinomi": [180, 181], "static_multiprocess": [180, 181], "static_native_arrai": [180, 181], "static_neg": [180, 181], "static_nonzero": [180, 181], "static_not_equ": [180, 181], "static_num_arrays_in_memori": [180, 181], "static_num_cpu_cor": [180, 181], "static_num_gpu": [180, 181], "static_num_ivy_arrays_on_dev": [180, 181], "static_one_hot": [180, 181], "static_on": [180, 181], "static_ones_lik": [180, 181], "static_out": [180, 181], "static_outputs_to_ivy_arrai": [180, 181], "static_percent_used_mem_on_dev": [180, 181], "static_permute_dim": [180, 181], "static_pinv": [180, 181], "static_posit": [180, 181], "static_pow": [180, 181], "static_print_all_arrays_in_memori": [180, 181], "static_print_all_ivy_arrays_on_dev": [180, 181], "static_prod": [180, 181], "static_promote_typ": [180, 181], "static_qr": [180, 181], "static_queue_timeout": [180, 181], "static_random_norm": [180, 181], "static_relu": [180, 181], "static_remaind": [180, 181], "static_repeat": [180, 181], "static_reshap": [180, 181], "static_result_typ": [180, 181], "static_round": [180, 181], "static_scaled_dot_product_attent": [180, 181], "static_scatter_flat": [180, 181], "static_scatter_nd": [180, 181], "static_se": [180, 181], "static_set_default_devic": [180, 181], "static_set_default_dtyp": [180, 181], "static_set_default_float_dtyp": [180, 181], "static_set_default_int_dtyp": [180, 181], "static_set_min_bas": [180, 181], "static_set_min_denomin": [180, 181], "static_set_queue_timeout": [180, 181], "static_set_split_factor": [180, 181], "static_set_tmp_dir": [180, 181], "static_set_with_grad": [180, 181], "static_shap": [180, 181], "static_shape_to_tupl": [180, 181], "static_shuffl": [180, 181], "static_sigmoid": [180, 181], "static_sign": [180, 181], "static_sin": [180, 181], "static_sinh": [180, 181], "static_slogdet": [180, 181], "static_softmax": [180, 181], "static_softplu": [180, 181], "static_solv": [180, 181], "static_split": [180, 181], "static_split_factor": [180, 181], "static_split_func_cal": [180, 181], "static_sqrt": [180, 181], "static_squar": [180, 181], "static_squeez": [180, 181], "static_stable_divid": [180, 181], "static_stable_pow": [180, 181], "static_stack": [180, 181], "static_std": [180, 181], "static_stop_gradi": [180, 181], "static_sum": [180, 181], "static_supports_inplac": [180, 181], "static_svd": [180, 181], "static_svdv": [180, 181], "static_swapax": [180, 181], "static_tensordot": [180, 181], "static_til": [180, 181], "static_tmp_dir": [180, 181], "static_to_devic": [180, 181], "static_to_list": [180, 181], "static_to_native_arrays_and_back": [180, 181], "static_to_numpi": [180, 181], "static_to_scalar": [180, 181], "static_total_mem_on_dev": [180, 181], "static_tpu_is_avail": [180, 181], "static_trac": [180, 181], "static_tril": [180, 181], "static_triu": [180, 181], "static_trunc": [180, 181], "static_try_else_non": [180, 181], "static_type_promote_arrai": [180, 181], "static_unique_al": [180, 181], "static_unique_count": [180, 181], "static_unique_invers": [180, 181], "static_unique_valu": [180, 181], "static_unset_default_devic": [180, 181], "static_unset_default_dtyp": [180, 181], "static_unset_default_float_dtyp": [180, 181], "static_unset_default_int_dtyp": [180, 181], "static_unset_with_grad": [180, 181], "static_unstack": [180, 181], "static_used_mem_on_dev": [180, 181], "static_valid_dtyp": [180, 181], "static_value_is_nan": [180, 181], "static_var": [180, 181], "static_vari": [180, 181], "static_variable_data": [180, 181], "static_vecdot": [180, 181], "static_vector_norm": [180, 181], "static_vector_to_skew_symmetric_matrix": [180, 181], "static_wher": [180, 181], "static_with_grad": [180, 181], "static_zero_pad": [180, 181], "static_zero": [180, 181], "static_zeros_lik": [180, 181], "supports_inplac": [180, 181, 749], "tmp_dir": [180, 181, 749], "to_native_arrays_and_back": [180, 181, 359, 365, 385], "to_scalar": [180, 181, 749], "total_mem_on_dev": [180, 181, 363, 462], "tpu_is_avail": [180, 181, 462], "tril": [180, 181, 406], "triu": [180, 181, 406], "try_else_non": [180, 181, 749], "type_promote_arrai": [180, 181, 425], "unique_al": [180, 181, 1057], "unique_count": [180, 181, 1057], "unique_invers": [180, 181, 1057], "unique_valu": [180, 181, 1057], "unset_default_devic": [180, 181, 462], "unset_default_dtyp": [180, 181, 425], "unset_default_float_dtyp": [180, 181, 425], "unset_default_int_dtyp": [180, 181, 425], "unset_with_grad": [180, 181, 823], "used_mem_on_dev": [180, 181, 462], "valid_dtyp": [180, 181, 425], "value_is_nan": [180, 181, 749], "variable_data": [180, 181, 823], "with_grad": [180, 181, 823, 848], "zeros_lik": [180, 181, 406, 953, 954, 957, 1115], "at_dev": [180, 182, 183, 462, 475, 476], "container_method": [183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 434, 436, 438, 513, 515, 519, 520, 521, 523, 527, 528, 529, 530, 532, 534, 536, 540, 541, 542, 544, 546, 548, 550, 552, 554, 556, 558, 560, 562, 564, 566, 568, 570, 572, 574, 576, 580, 581, 584, 585, 588, 589, 590, 593, 594, 595, 597, 601, 602, 603, 605, 609, 610, 611, 613, 617, 618, 619, 621, 623, 625, 627, 629, 631, 633, 635, 637, 639, 641, 643, 645, 647, 649, 651, 653, 655, 657, 659, 661, 663, 665, 667, 669, 671, 673, 675, 677, 681, 683, 685, 686, 688, 690, 692, 694, 696, 698, 700, 702, 704, 706, 708, 710, 712, 714, 716, 718, 720, 722, 724, 726, 728, 730, 731, 733, 736, 738, 739, 741, 743, 744, 745, 747, 750, 752, 754, 762, 763, 778, 780, 782, 826, 827, 829, 831, 832, 834, 836, 837, 839, 840, 841, 843, 844, 845, 847, 889, 891, 938, 940, 942, 943, 945, 947, 948, 950, 952, 954, 956, 958, 959, 961, 963, 965, 967, 969, 971, 973, 975, 977, 979, 981, 983, 985, 987, 989, 991, 993, 995, 997, 999, 1001, 1003, 1005, 1007, 1009, 1011, 1036, 1038, 1042, 1044, 1046, 1047, 1049, 1063, 1065, 1067, 1068, 1070, 1072, 1074, 1076, 1078, 1080, 1082, 1084, 1086, 1088, 1090, 1092, 1094, 1096, 1100, 1101, 1102, 1104, 1107, 1109, 1111, 1113], "adam_upd": [183, 318, 319, 371, 823], "dcdw": [183, 187, 228, 234, 235, 275, 285, 286, 287, 318, 319, 823, 825, 826, 827, 828, 829, 831, 832, 833, 834, 836, 837, 838, 839, 840, 841, 842, 843], "lr": [183, 187, 228, 234, 235, 255, 275, 285, 286, 287, 289, 318, 319, 370, 371, 823, 826, 827, 828, 829, 831, 832, 833, 834, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 1152, 1153, 1154, 1155, 1156, 1157], "mw_tm1": [183, 187, 234, 275, 286, 318, 319, 823, 826, 827, 828, 829, 836, 837, 838, 839], "vw_tm1": [183, 187, 234, 275, 286, 318, 319, 823, 826, 827, 828, 829, 836, 837, 838, 839], "beta1": [183, 187, 234, 275, 286, 318, 319, 371, 823, 825, 826, 827, 828, 829, 836, 837, 838, 839, 1152, 1153, 1154], "beta2": [183, 187, 234, 275, 286, 318, 319, 371, 823, 825, 826, 827, 828, 829, 836, 837, 838, 839, 1152, 1153, 1154], "999": [183, 187, 234, 275, 286, 297, 303, 314, 315, 318, 319, 371, 512, 541, 546, 740, 741, 743, 823, 825, 826, 827, 828, 829, 836, 837, 838, 839, 1152, 1153, 1154], "add_ivy_container_instance_method": [183, 344], "containerexampl": [183, 189, 344, 345], "static_all_equ": [183, 191, 316, 317, 750, 752], "int32": [183, 208, 280, 310, 311, 362, 425, 434, 436, 437, 438, 446, 749, 818, 953, 967, 970, 1073, 1090, 1093, 1098], "int64": [183, 208, 280, 310, 311, 362, 425, 434, 436, 437, 438, 446, 512, 566, 569, 1052, 1053, 1054, 1073, 1090, 1093, 1098], "clip_vector_norm": [183, 316, 317, 749], "max_norm": [183, 211, 316, 317, 749, 761, 762, 763, 764], "gradient_descent_upd": [183, 318, 319, 823, 1013, 1014, 1015, 1016, 1115], "lamb_upd": [183, 318, 319, 823], "max_trust_ratio": [183, 234, 286, 318, 319, 823, 836, 837, 838, 839, 1152, 1154], "decay_lambda": [183, 234, 235, 286, 287, 318, 319, 823, 836, 837, 838, 839, 840, 841, 842, 843, 1152, 1154, 1155], "lars_upd": [183, 318, 319, 823], "optimizer_upd": [183, 318, 319, 823], "effective_grad": [183, 255, 289, 318, 319, 823, 844, 845, 846, 847], "random_uniform": [183, 332, 333, 363, 371, 1040, 1115], "static_adam_upd": [183, 318, 319, 826], "static_add": [183, 314, 315, 353, 354, 361, 659], "static_argsort": [183, 338, 339, 1063], "static_binary_cross_entropi": [183, 326, 327, 938], "static_can_cast": [183, 310, 311, 434], "from_": [183, 280, 310, 311, 425, 434, 437, 438], "static_clip": [183, 328, 329, 954], "static_rol": [183, 281, 328, 329, 354, 361, 954, 958, 987], "static_cross_entropi": [183, 326, 327, 943], "static_divid": [183, 314, 315, 361, 610, 611], "static_gather_nd": [183, 316, 317, 778], "static_gradient_descent_upd": [183, 318, 319, 831], "static_lamb_upd": [183, 318, 319, 836], "static_lars_upd": [183, 318, 319, 840], "static_multipli": [183, 314, 315, 361, 681], "static_optimizer_upd": [183, 318, 319, 844], "static_randint": [183, 332, 333, 1042], "20": [183, 290, 332, 333, 369, 512, 570, 573, 599, 706, 709, 722, 725, 867, 877, 879, 903, 905, 922, 924, 1040, 1042, 1043, 1044, 1052, 1055, 1056, 1073, 1074, 1077, 1101], "15": [183, 290, 332, 333, 347, 354, 512, 550, 553, 706, 709, 854, 857, 867, 877, 879, 903, 905, 922, 924, 953, 987, 990, 1035, 1036, 1039, 1040, 1042, 1043, 1044, 1052, 1055, 1057, 1058, 1073, 1074, 1077, 1101], "16": [183, 290, 296, 302, 314, 315, 332, 333, 348, 354, 370, 512, 541, 546, 735, 736, 738, 744, 854, 860, 867, 877, 879, 903, 905, 1042, 1044, 1052, 1056, 1073, 1074, 1077, 1101], "12": [183, 290, 332, 333, 347, 354, 361, 512, 550, 553, 570, 573, 582, 706, 709, 749, 767, 785, 867, 877, 879, 903, 905, 922, 924, 953, 971, 974, 979, 982, 987, 990, 1035, 1036, 1039, 1040, 1042, 1043, 1044, 1052, 1056, 1057, 1058, 1073, 1074, 1077, 1101], "40": [183, 290, 332, 333, 512, 582, 722, 725, 867, 903, 905, 1042, 1044, 1073, 1074, 1077, 1101], "gpu": [183, 290, 332, 333, 348, 363, 369, 384, 462, 481, 484, 497, 499, 503, 505, 510, 1042, 1044], "87": [183, 290, 332, 333, 1042, 1044], "62": [183, 290, 332, 333, 1042, 1044], "52": [183, 290, 332, 333, 867, 903, 905, 1042, 1044, 1057, 1058, 1073, 1074, 1077, 1101], "95": [183, 290, 332, 333, 1042, 1044], "37": [183, 290, 332, 333, 512, 735, 1035, 1036, 1039, 1042, 1044], "42": [183, 290, 332, 333, 372, 395, 401, 867, 903, 905, 1040, 1042, 1044, 1050, 1073, 1074, 1077, 1101], "14": [183, 290, 332, 333, 350, 354, 361, 512, 570, 573, 854, 866, 867, 877, 879, 903, 905, 1042, 1044, 1057, 1058, 1073, 1074, 1077, 1101], "13": [183, 290, 332, 333, 354, 361, 512, 550, 553, 570, 573, 582, 722, 725, 749, 767, 854, 866, 867, 877, 879, 903, 905, 1035, 1036, 1039, 1042, 1044, 1052, 1056, 1057, 1058, 1073, 1074, 1077, 1101], "static_random_uniform": [183, 332, 333, 1046], "static_sort": [183, 338, 339, 1068], "static_sparse_cross_entropi": [183, 326, 327, 948], "static_subtract": [183, 314, 315, 361, 730], "static_tan": [183, 314, 315, 354, 361, 541, 546, 744], "143": [183, 296, 302, 314, 315, 354, 512, 541, 546, 735, 736, 738, 744], "38": [183, 296, 302, 314, 315, 354, 512, 541, 546, 735, 736, 738, 744], "static_tanh": [183, 314, 315, 546], "76": [183, 297, 314, 315, 512, 546, 582, 741, 867, 922, 924, 1073, 1074, 1077, 1101], "96": [183, 297, 314, 315, 512, 546, 735, 741, 867, 903, 905, 1073, 1074, 1077, 1101], "995": [183, 297, 303, 314, 315, 512, 541, 546, 740, 741, 743], "9999": [183, 297, 314, 315, 546, 741], "strongli": [346, 347, 1115, 1121], "welcom": [346, 347, 348, 1115, 1121], "skill": 346, "vetern": 346, "beginn": 346, "aspect": [346, 370, 1115], "guid": [346, 347, 348, 356, 1115], "through": [346, 348, 349, 351, 354, 357, 358, 361, 366, 367, 369, 370, 371, 372, 383, 512, 542, 545], "journei": [346, 1115, 1121], "inclusvi": 346, "big": [346, 384], "team": [346, 347, 348], "board": 346, "contributor": [346, 347, 348, 366, 1115], "section": [346, 348, 349, 351, 352, 353, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 370, 371, 1057, 1058, 1059, 1061], "below": [346, 347, 349, 350, 351, 352, 354, 357, 361, 362, 363, 364, 367, 368, 369, 370, 371, 372, 383, 406, 417, 421, 422, 512, 550, 553, 570, 573, 582, 706, 709, 740, 867, 874, 877, 879, 925, 927, 953, 967, 970, 971, 974, 1057, 1058, 1059, 1062, 1063, 1066, 1115], "best": [346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 749, 799], "go": [346, 347, 348, 349, 351, 352, 354, 361, 366, 370, 384, 1017, 1028], "finish": [346, 347, 351, 1115], "dive": [346, 348, 349, 366, 369, 370, 384, 1115], "environ": [346, 348, 350, 383], "basic": [346, 349, 350], "fork": [346, 347, 749, 800], "doc": [346, 349, 353, 365, 367, 370, 371, 1115], "document": [346, 348, 368, 370, 372], "local": [346, 347, 350, 357], "task": [346, 348, 383, 1013, 1014, 1015, 1016, 1115], "help": [346, 347, 354, 358, 360, 361, 369, 370, 371, 382, 749, 755, 1073, 1098, 1115], "video": [346, 348, 353, 354, 365], "realli": [347, 361, 384], "contribut": [347, 348, 349, 367, 1121], "toward": [347, 367, 953, 987, 990, 1115, 1121], "page": [347, 348, 368, 372, 382, 1115, 1121], "explain": [347, 348, 349, 352, 353, 354, 356, 357, 358, 360, 361, 362, 363, 364, 365, 367, 368, 369, 370, 371, 372, 1115, 1121], "main": [347, 350, 359, 361, 406, 411, 421, 422, 867, 877, 879, 925, 927], "prefer": [347, 361], "git": [347, 348], "submodul": [347, 348, 349, 350, 355, 356, 357, 363, 366, 367, 371, 1115, 1150, 1151, 1158, 1159], "com": 347, "unifyai": [347, 350], "http": [347, 353, 425, 434, 437, 512, 530, 533, 570, 573, 574, 577, 582, 607, 690, 693, 722, 725, 726, 729, 823, 825, 826, 828, 953, 967, 970, 987, 990, 1057, 1058, 1059, 1062, 1063, 1066, 1073, 1078, 1081], "gh": 347, "your_fold": 347, "id": [347, 360, 361, 462, 481, 1148, 1149], "cours": [347, 348, 354, 370, 384], "whatev": [347, 384], "integr": [347, 356, 425, 431], "familiar": [347, 349], "sure": [347, 349, 355], "elig": 347, "free": [347, 348, 349, 350, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 383, 1115], "student": 347, "licenc": 347, "peopl": [347, 348, 351], "seem": [347, 371, 384], "miss": [347, 354, 356, 360, 361, 1152, 1156], "explicit": [347, 350, 361, 362, 364, 367, 384], "remind": 347, "channel": [347, 348, 349, 350, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 749, 776, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1145, 1146], "pace": 347, "suggest": [347, 348, 352], "latest": [347, 349, 350, 353, 384, 425, 434, 437, 512, 530, 533, 570, 573, 574, 577, 582, 607, 690, 693, 722, 725, 726, 729, 953, 967, 970, 987, 990, 1057, 1058, 1059, 1062, 1063, 1066, 1073, 1078, 1081, 1136, 1145], "packag": [347, 350, 384], "ensur": [347, 348, 356, 360, 362, 365, 749, 793], "pypi": [347, 349, 384], "person": [347, 348], "experi": [347, 368, 370, 384], "avoid": [347, 348, 356, 358, 359, 361, 369, 462, 512, 603, 606], "pip": [347, 383, 1115], "instal": [347, 350, 383, 1115], "abil": [347, 368, 384], "perhap": [347, 369, 370, 371, 384], "track": [347, 348, 462, 1017, 1029, 1148, 1149], "run": [347, 350, 355, 356, 358, 365, 367, 368, 369, 370, 371, 372, 383, 384, 462, 471, 823, 825, 826, 828, 836, 838, 1013, 1014, 1015, 1016, 1136, 1147, 1148, 1149], "command": [347, 350, 1115], "ivy_dev": [347, 348, 350], "name": [347, 348, 350, 353, 356, 367, 369, 370, 372, 403, 404, 749, 755, 867, 880, 882, 909, 911, 916, 1057, 1058, 1059], "setup": 347, "click": [347, 348, 353, 1115], "icon": [347, 348], "side": [347, 348], "choos": [347, 348, 372, 462, 507, 512, 667, 670, 671, 674, 1052, 1056, 1057, 1058, 1059, 1061, 1073, 1078, 1081, 1082, 1085, 1086, 1089], "panel": 347, "select": [347, 348, 356, 367, 369, 372, 384], "drop": [347, 384], "down": [347, 369], "path": [347, 350], "manual": [347, 348, 356, 371, 1017, 1018, 1027, 1028], "builtin": [347, 350, 369, 371], "requir": [347, 350, 352, 353, 354, 356, 359, 360, 362, 363, 365, 369, 384, 403, 404, 512, 722, 725, 867, 880, 882, 953, 997, 1000, 1125, 1126], "cmd": [347, 350], "directori": [347, 348, 350, 749, 810], "folder": [347, 348, 350, 352, 355, 356, 357], "abov": [347, 348, 350, 353, 354, 357, 358, 360, 361, 364, 365, 369, 370, 371, 372, 406, 417, 421, 422, 425, 434, 437, 512, 525, 530, 533, 550, 553, 570, 573, 574, 577, 582, 607, 681, 684, 690, 693, 706, 709, 722, 725, 726, 729, 735, 740, 749, 777, 854, 857, 866, 867, 874, 877, 879, 880, 882, 925, 927, 953, 967, 970, 971, 974, 987, 990, 1035, 1036, 1039, 1040, 1042, 1043, 1057, 1058, 1059, 1062, 1063, 1066, 1073, 1078, 1081, 1090, 1093, 1094, 1097, 1098, 1106, 1107, 1110], "m": [347, 348, 350, 351, 367, 406, 417, 421, 422, 749, 758, 867, 868, 870, 874, 877, 879, 880, 882, 883, 885, 886, 888, 889, 892, 897, 899, 900, 902, 903, 905, 906, 908, 909, 911, 913, 915, 916, 918, 919, 921, 925, 927, 1040, 1045, 1046, 1048], "python3": [347, 350], "script": [347, 348, 350, 354, 367, 384], "bat": [347, 348, 350], "OR": [347, 348, 350, 512, 562, 565, 671, 674, 1106, 1111, 1114], "bin": [347, 348, 350], "mac": [347, 348, 350], "linux": [347, 348, 350], "virtualenv": 347, "os": 347, "note": [347, 348, 352, 353, 354, 361, 512, 702, 705, 867, 880, 882, 916, 953, 997, 1000, 1057, 1059, 1073, 1082, 1085], "tick": [347, 348], "To": [347, 354, 357, 361, 370, 371, 372, 1115], "ivy_test": [347, 348], "test_array_api": [347, 348, 355, 356], "cd": [347, 348, 350], "txt": 347, "visual": [347, 384], "jetbrain": 347, "remot": 347, "mitig": 347, "potenti": [347, 366, 512, 603, 606], "conflict": [347, 348, 370], "yet": [347, 349, 361], "particular": [347, 348, 352, 364, 512, 513, 516], "system": [347, 384, 867, 913, 915], "instruct": [347, 349], "desktop": 347, "wsl": 347, "powershel": 347, "admin": 347, "visit": 347, "link": 347, "profession": 347, "execut": [347, 350, 361, 364, 367, 369, 372, 384, 749, 820], "deploy": 347, "top": [347, 348, 356, 370, 371, 1115], "press": [347, 370, 1115], "ok": 347, "caus": [347, 348, 354, 356, 361, 364, 384], "earlier": [347, 348], "might": [347, 348, 352, 356, 359, 367, 369, 370, 749, 770], "necessari": [347, 354, 358, 361, 364], "virtualis": 347, "detail": [347, 348, 349, 352, 355, 356, 357, 358, 359, 361, 365, 370, 371, 406, 412, 1057, 1058, 1059, 1061], "sudo": 347, "apt": 347, "ca": 347, "certif": 347, "curl": 347, "gnupg": 347, "lsb": 347, "mkdir": 347, "keyr": 347, "fssl": 347, "download": [347, 356], "gpg": 347, "dearmor": 347, "o": [347, 367, 749, 758], "echo": 347, "deb": 347, "arch": 347, "dpkg": 347, "architectur": [347, 372, 384], "lsb_releas": 347, "cs": 347, "tee": 347, "null": 347, "ce": 347, "cli": 347, "containerd": 347, "io": 347, "compos": [347, 361, 384], "plugin": 347, "systemctl": 347, "permiss": 347, "relat": [347, 348, 383, 462], "post": [347, 372, 1035, 1036, 1039, 1115, 1121], "It": [347, 348, 350, 351, 352, 353, 354, 358, 360, 361, 364, 367, 369, 370, 371, 395, 398, 462, 507, 512, 513, 516, 517, 520, 521, 524, 525, 528, 530, 533, 534, 537, 538, 542, 545, 550, 553, 554, 557, 558, 561, 562, 565, 566, 569, 570, 573, 574, 577, 578, 581, 582, 585, 599, 602, 603, 606, 607, 623, 626, 627, 630, 631, 634, 635, 638, 643, 646, 647, 650, 651, 654, 655, 658, 659, 662, 663, 666, 667, 670, 671, 674, 675, 678, 681, 684, 686, 689, 690, 693, 698, 701, 702, 705, 706, 709, 710, 713, 714, 717, 718, 721, 722, 725, 726, 729, 730, 734, 735, 740, 749, 762, 764, 775, 937, 938, 941, 943, 946, 948, 951, 953, 954, 957, 967, 970, 971, 974, 975, 978, 979, 982, 987, 990, 993, 996, 997, 1000, 1001, 1004, 1040, 1042, 1043, 1052, 1053, 1062, 1063, 1066, 1068, 1071, 1106, 1107, 1110, 1111, 1114], "headach": 347, "arm": 347, "m1": 347, "instead": [347, 348, 349, 353, 354, 356, 357, 361, 364, 365, 367, 369, 370, 384], "featur": [347, 352, 365, 370, 1115], "vm": 347, "azur": 347, "cloud": [347, 383], "defin": [347, 349, 352, 353, 362, 365, 369, 371, 384, 512, 681, 684, 702, 705, 749, 802, 867, 871, 873, 880, 882, 913, 915, 1040, 1042, 1043, 1073, 1078, 1081, 1082, 1085, 1086, 1089], "dockerfil": [347, 350], "longer": [347, 362, 364], "worri": 347, "platform": 347, "agnost": [347, 360, 365, 367, 369, 372, 384, 1115], "usual": 347, "studio": 347, "favourit": 347, "extens": [347, 348, 353, 406, 417, 425, 434, 437, 512, 525, 530, 533, 550, 553, 570, 573, 574, 577, 582, 607, 690, 693, 706, 709, 722, 725, 726, 729, 735, 740, 867, 874, 953, 967, 970, 971, 974, 987, 990, 1057, 1058, 1059, 1062, 1063, 1066, 1073, 1078, 1081, 1106, 1107, 1110], "theme": 347, "too": [347, 348, 384, 512, 525, 681, 684], "done": [347, 348, 354, 356, 370], "unsupport": [347, 362, 425, 446, 447], "slow": 347, "ipad": 347, "long": [347, 348, 354, 854, 864], "browser": 347, "cool": [347, 352], "requisit": 347, "head": [347, 361, 854, 865, 1115, 1136, 1147], "pane": [347, 348], "readi": [347, 349], "begin": [347, 1017, 1018, 1028], "outlin": [347, 348, 349, 351, 353, 356, 357, 361, 364, 369], "dropdown": 347, "tab": [347, 370, 1115], "master": [347, 348, 361], "vs": 347, "view": [347, 348, 406, 412, 854, 857, 861], "built": [347, 368, 406, 407, 462, 1136, 1147, 1148, 1149], "bottom": 347, "box": 347, "patient": 347, "upto": 347, "minut": 347, "launch": 347, "That": [347, 348, 369, 370, 371, 512, 702, 705], "refer": [347, 348, 356, 357, 362, 365, 384, 406, 411, 512, 603, 606, 651, 654, 823, 825, 826, 828, 867, 928, 930, 934, 936, 1073, 1094, 1097, 1102, 1105, 1106, 1107, 1110, 1111, 1114, 1136, 1146], "approach": [347, 348, 356, 357, 361, 369, 370, 384], "colour": 347, "applic": [347, 362, 363, 371, 854, 865, 866, 1017, 1023, 1029], "good": [347, 348, 349, 350, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 367, 371], "chanc": 347, "vscode": 347, "explor": [347, 368, 372, 383], "troubleshoot": 347, "sometim": [347, 348], "ever": [347, 348, 349, 350, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365], "64": [347, 370, 371, 512, 722, 725, 726, 729, 854, 860, 861, 867, 903, 905, 1073, 1074, 1077, 1101, 1115, 1136, 1147], "bit": [347, 354, 357, 361, 369, 425, 444, 445, 448, 512, 554, 557, 558, 561, 566, 569, 1073, 1090, 1093, 1098], "usr": 347, "more": [347, 348, 349, 351, 352, 354, 356, 357, 358, 359, 360, 361, 364, 365, 366, 367, 368, 369, 370, 371, 372, 383, 384, 406, 407, 425, 432, 512, 603, 606, 867, 889, 892, 953, 971, 974, 1057, 1058, 1059, 1061, 1115], "nutshel": [347, 365], "hook": 347, "lint": 347, "fix": [347, 348], "fail": [347, 349, 355, 356, 367, 369], "attempt": [347, 384], "succe": 347, "problemat": 347, "proce": [347, 348, 349, 350, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365], "modifi": [347, 348, 353, 357, 362, 363, 367], "properli": [347, 351], "enter": [347, 348, 360, 362, 363, 365, 462], "unsur": [347, 348, 349, 350, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365], "feel": [347, 348, 349, 350, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 1115], "server": [348, 1115], "context": [348, 354, 361, 362, 363, 462, 749, 800, 854, 865, 1136, 1147], "suitabl": [348, 352, 361], "quick": [348, 351, 371], "tendenc": 348, "land": 348, "end": [348, 361, 364, 366, 383, 384, 406, 407, 512, 542, 545, 1115, 1121], "world": 348, "come": [348, 349, 371, 382, 1115, 1121], "fly": 348, "hard": [348, 369], "receiv": [348, 356, 362, 363, 462, 471, 472, 749, 756, 799, 1136, 1146], "respons": [348, 350], "internship": 348, "comment": 348, "trigger": 348, "unansw": 348, "label": [348, 367, 368, 372, 937, 938, 941, 943, 946, 948, 951], "respond": 348, "someon": [348, 384], "els": [348, 349, 352, 357, 358, 364, 367, 369, 371, 372, 384, 749, 759, 770, 774, 1017, 1027], "strive": [348, 384], "repli": 348, "newli": [348, 364, 403, 404, 425, 431, 749, 760], "bug": [348, 356], "serv": [348, 356, 357, 360, 361, 365, 366, 1115], "suspect": 348, "behaviour": [348, 353, 356, 360, 361, 364, 365, 369], "observ": 348, "confid": 348, "wrong": 348, "someth": [348, 352, 370, 371, 384], "bet": 348, "act": [348, 354, 384], "placehold": [348, 360, 365, 1017, 1029], "mark": [348, 356], "ii": [348, 1073, 1074, 1077, 1101], "iii": 348, "titl": [348, 1115], "issue_numb": 348, "delet": [348, 350], "No": [348, 367], "progress": [348, 361, 368, 372], "pr": 348, "soon": [348, 361, 382, 384, 1115, 1121], "solut": [348, 356, 361, 867, 913, 915], "review": [348, 352], "merg": 348, "everi": [348, 349, 350, 354, 355, 356, 357, 358, 359, 361, 364, 365, 367, 369, 371, 406, 413, 414, 749, 750, 753], "dai": 348, "close": [348, 353, 512, 603, 606, 706, 709, 867, 916], "likewis": [348, 353, 357, 361, 362, 365, 370], "freed": 348, "purpos": [348, 350, 354, 356, 357, 359, 360, 361, 365, 366, 369, 512, 603, 606, 1115], "remain": [348, 354, 384, 512, 525, 681, 684, 702, 705, 953, 983, 986, 1017, 1023], "short": [348, 371, 854, 864], "basi": [348, 355, 370], "situat": [348, 372], "alloc": [348, 384, 406, 421, 422, 425, 431, 462], "upon": [348, 354, 356, 364, 384], "period": 348, "prevent": [348, 364, 369, 823, 825, 826, 828, 836, 838, 1073, 1098, 1152, 1153, 1154], "unabl": 348, "obvious": 348, "never": [348, 361], "reflect": [348, 360], "qualiti": 348, "hypothet": 348, "frustrat": 348, "delai": 348, "busi": 348, "fine": [348, 369, 372], "becaus": [348, 353, 356, 357, 358, 360, 362, 363, 364, 365, 367, 371, 372, 384], "inact": 348, "me": 348, "unfairli": 348, "definit": [348, 357, 362, 369, 867, 868, 870, 871, 873], "investig": 348, "Then": [348, 350, 369, 384], "practic": [348, 356], "separ": [348, 356, 360, 367, 369, 370], "branch": [348, 361, 384, 403, 404, 512, 542, 545], "role": [348, 368], "date": 348, "upstream": [348, 355], "complic": [348, 367], "root": [348, 350, 370, 512, 722, 725, 1040, 1041, 1045, 1046, 1048], "merge_with_upstream": 348, "sh": 348, "name_of_your_branch": 348, "resolv": [348, 1073, 1090, 1093, 1098], "push": [348, 355], "both": [348, 353, 354, 357, 361, 363, 364, 365, 367, 369, 370, 371, 372, 383, 384, 425, 434, 437, 452, 512, 525, 530, 533, 574, 577, 607, 690, 693, 698, 701, 722, 725, 726, 729, 735, 749, 777, 854, 857, 866, 867, 871, 873, 889, 892, 928, 930, 953, 987, 990, 1035, 1036, 1039, 1073, 1078, 1081, 1106, 1107, 1110], "abort": 348, "tediou": 348, "resolut": 348, "stash": 348, "reinstat": 348, "fetch": 348, "uncommit": 348, "unstag": 348, "untrack": 348, "comprehens": 348, "explan": [348, 353, 361, 365, 369], "atlassian": 348, "tutori": 348, "quit": [348, 349, 353, 357, 359, 360], "logic": [348, 359, 360, 362, 363, 369, 462, 498, 512, 663, 666, 667, 670, 671, 674, 1106, 1107, 1110, 1111, 1114, 1115], "blame": 348, "revis": 348, "author": [348, 1115], "eg": 348, "past": 348, "l": [348, 351, 867, 868, 870, 880, 882, 889, 892, 925, 927], "grep": 348, "v": [348, 367, 370, 371, 372, 854, 866, 1115, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1156, 1158, 1159], "commit_id": 348, "handi": 348, "histori": 348, "toggl": 348, "vertic": 348, "highlight": [348, 354], "previou": [348, 356, 365, 372, 384, 823, 826, 828, 836, 838], "inform": [348, 425, 445, 448, 749, 755, 823, 849], "whenev": [348, 369, 370], "tag": 348, "think": [348, 354], "interact": [348, 1115], "gain": [348, 366, 371, 1127], "yourself": [348, 349, 383], "simpler": [348, 369], "cannot": [348, 358, 362, 372], "least": [348, 354, 357, 360, 867, 889, 892], "final": [348, 353, 354, 357, 360, 362, 364, 367, 369, 370, 406, 415, 416, 749, 776, 1136, 1147], "tickbox": 348, "corner": 348, "span": 348, "intent": [348, 364], "larg": [348, 370, 512, 525, 681, 684], "discourag": 348, "philosophi": 348, "increment": [348, 749, 792], "frequent": [348, 349], "valuabl": 348, "infrequ": 348, "earli": [348, 1115], "wast": 348, "spot": [348, 357], "mistak": 348, "propos": 348, "mountain": 348, "advoc": [348, 384], "individu": [348, 349, 357], "per": [348, 370, 462, 854, 855, 856, 857, 858, 859, 860, 861, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143], "style": [348, 1052, 1055], "ve": [348, 366, 369, 1040, 1041, 1115], "actual": [348, 351, 357, 364, 366, 369, 371, 384], "aim": [348, 366], "part": [348, 352, 355, 356, 357, 367, 368, 372, 383, 384, 406, 421, 422, 823, 826, 828, 831, 833, 836, 838, 840, 842, 844, 846, 1148, 1149], "subsect": 348, "session": [348, 1115], "block": [348, 357, 366, 368, 372, 384, 462, 1115], "smaller": [348, 367, 372, 953, 954, 957, 987, 990, 1073, 1090, 1093, 1098], "edit": 348, "beauti": 348, "particularli": [348, 370, 384], "concern": [348, 351, 354, 361, 364, 366], "effici": [348, 356, 357, 361, 364, 365, 367, 370, 384], "difficult": [348, 356, 384, 1057, 1058, 1059, 1061], "undo": 348, "stress": 348, "frequenc": [348, 749, 776], "pycharm": 348, "pytest": [348, 356], "button": 348, "declar": 348, "insid": [348, 350, 352, 362], "exec": 348, "rm": 348, "rf": 348, "cp": 348, "ivy_contain": 348, "bash": [348, 350], "test_ivi": [348, 356], "test_funct": 348, "test_cor": 348, "test_imag": 348, "test_random_crop": 348, "header": 348, "q": [348, 384, 854, 866, 867, 880, 882, 909, 911], "array_api_test": 348, "test_creation_funct": 348, "test_arang": 348, "window": [348, 350, 854, 855, 856, 857, 858, 859, 860, 861, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143], "variou": [348, 353, 359, 365, 383], "wherebi": [349, 361, 1017, 1029], "broad": 349, "todo": [349, 356], "commit": [349, 356], "NOT": [349, 512, 667, 670], "resourc": 349, "hypothesi": 349, "cover": [349, 353, 354, 357, 359, 366], "lambda": [349, 367, 370, 1152, 1155, 1157], "direct": [349, 371, 372, 383, 1062, 1068, 1071], "bind": [349, 361], "aforement": 349, "categori": [349, 352, 360, 361, 362, 366, 1115], "parent": [349, 369], "hint": [349, 352, 353, 357, 360, 364, 365, 406, 417, 425, 434, 437, 512, 525, 530, 533, 550, 553, 570, 573, 574, 577, 582, 607, 690, 693, 706, 709, 722, 725, 726, 729, 735, 740, 749, 777, 854, 857, 866, 867, 874, 953, 967, 970, 971, 974, 987, 990, 1035, 1036, 1039, 1057, 1058, 1059, 1062, 1063, 1066, 1073, 1078, 1081, 1106, 1107, 1110], "its": [349, 350, 353, 425, 432, 462, 506, 867, 889, 892, 953, 967, 970, 983, 986, 987, 990, 1001, 1004], "thorough": [349, 353, 356, 365], "transpil": [349, 366, 368, 1115, 1121], "builder": [350, 382, 384, 1115], "maco": 350, "ubuntu": 350, "uid": 350, "make_docs_without_dock": 350, "rel": [350, 823, 826, 828, 831, 833, 836, 838, 840, 842, 844, 846, 867, 877, 879, 888, 897, 899, 906, 908, 925, 927, 953, 971, 974, 987, 990, 1062, 1063, 1066, 1068, 1071, 1115], "synchron": 350, "rest": [350, 368, 372], "remove_doc": 350, "_": [350, 353, 361, 364, 369, 370, 425, 434, 437, 512, 530, 533, 570, 573, 574, 577, 582, 607, 690, 693, 722, 725, 726, 729, 823, 825, 826, 828, 867, 934, 936, 953, 967, 970, 987, 990, 1057, 1058, 1059, 1062, 1063, 1066, 1073, 1078, 1081], "privat": [350, 1152, 1156], "fulfil": [350, 366, 1115], "autogenerated_sourc": 350, "png": [350, 370], "_imag": 350, "lastli": 350, "rst": 350, "partial_sourc": 350, "conf": 350, "create_rst_fil": 350, "filter": [350, 854, 855, 856, 857, 858, 859, 860, 861, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143], "repres": [350, 369, 406, 417, 425, 444, 512, 520, 521, 524, 525, 534, 537, 541, 546, 549, 581, 582, 585, 681, 684, 718, 721, 739, 740, 744, 854, 863, 867, 876, 912, 913, 915], "overal": [350, 353, 361, 362, 363, 372], "markup": 350, "extract": [350, 352], "get_functions_and_class": 350, "doctr": 350, "readm": [350, 384], "module_nam": 350, "copy_readme_to_rst": 350, "tabl": 350, "toc": 350, "tree": 350, "append_toctree_to_rst": 350, "create_index_rst": 350, "\u03c0": [350, 512, 517, 530, 533, 538, 542, 545], "namespac": [350, 352, 362, 367, 372], "who": [351, 366, 384], "mainli": [351, 368, 370], "under": [351, 353, 354, 355, 356, 357, 361, 366, 367, 370, 372], "hood": [351, 354, 356, 357, 361, 366, 367, 370, 372], "weed": [351, 366], "behind": [351, 366, 368, 823, 826, 828, 831, 833, 836, 838, 840, 842, 844, 846], "navig": 351, "tour": 351, "primari": [351, 356, 358, 364, 384], "composit": [351, 356, 358, 360, 361, 364, 367, 371, 372, 384], "nestabl": [351, 353, 354, 356, 364, 425, 434, 437, 512, 525, 530, 533, 574, 577, 607, 690, 693, 722, 725, 726, 729, 735, 749, 777, 854, 857, 866, 953, 987, 990, 1035, 1036, 1039, 1073, 1078, 1081, 1106, 1107, 1110], "dynam": [351, 362, 363, 364, 367, 403, 404], "runtim": [351, 356, 462], "h": [351, 361, 854, 857, 858, 859, 860, 861], "j": [351, 749, 757, 758, 867, 925, 927, 1073, 1074, 1077, 1101], "k": [351, 367, 406, 411, 421, 422, 749, 757, 854, 866, 867, 889, 892, 909, 911, 913, 915, 916, 918, 919, 921, 925, 927, 1040, 1045, 1046, 1048, 1052, 1055], "borrow": 351, "n": [351, 406, 417, 421, 422, 749, 758, 854, 862, 867, 877, 879, 888, 889, 892, 896, 897, 899, 900, 902, 903, 905, 906, 908, 909, 911, 916, 918, 919, 921, 925, 927, 928, 930, 931, 933, 934, 936, 953, 963, 966, 967, 970, 975, 978, 997, 1000, 1009, 1012, 1040, 1045, 1046, 1048, 1052, 1055, 1073, 1082, 1085, 1094, 1097, 1098, 1102, 1105, 1106, 1107, 1110, 1111, 1114], "taken": [352, 372, 867, 877, 879], "constant": [352, 357, 371, 372, 384, 462, 471, 472, 953, 963, 966, 1017, 1023, 1035, 1036, 1039, 1127, 1128, 1132, 1135, 1148, 1149, 1150, 1151], "compil": [352, 361, 366, 368, 384, 1115, 1148, 1149, 1152, 1153, 1154, 1155, 1156, 1157], "meta": [352, 360, 1014, 1015, 1016], "overlap": 352, "sever": [352, 384, 867, 886], "judgement": 352, "locat": [352, 356, 358, 363, 1040, 1041], "some_namespac": 352, "some_backend": 352, "another_backend": 352, "break": [352, 365, 369, 384, 1115], "anyth": [352, 1115], "refactor": 352, "ongo": 352, "subfold": [352, 356], "via": [352, 361, 362, 363, 364, 367, 369, 370, 383, 1017, 1018, 1027, 1028], "file_nam": 352, "my_func": [352, 354], "int": [352, 354, 357, 361, 362, 363, 364, 365, 372, 395, 400, 403, 404, 406, 409, 411, 413, 414, 415, 416, 419, 421, 422, 423, 425, 433, 442, 444, 445, 448, 451, 462, 484, 487, 488, 489, 490, 498, 499, 500, 506, 507, 512, 550, 553, 554, 557, 558, 561, 562, 565, 566, 569, 570, 573, 749, 755, 767, 768, 771, 772, 773, 776, 777, 786, 802, 805, 806, 811, 812, 821, 823, 825, 826, 828, 836, 838, 854, 855, 857, 859, 860, 861, 867, 871, 873, 877, 879, 922, 924, 925, 927, 928, 930, 931, 933, 937, 943, 946, 948, 951, 953, 959, 962, 963, 966, 967, 970, 971, 974, 975, 978, 979, 982, 987, 990, 992, 993, 996, 997, 1000, 1001, 1004, 1005, 1008, 1009, 1012, 1013, 1014, 1015, 1016, 1017, 1029, 1035, 1036, 1039, 1040, 1041, 1042, 1043, 1045, 1046, 1048, 1050, 1052, 1053, 1054, 1062, 1063, 1066, 1068, 1071, 1073, 1078, 1081, 1082, 1085, 1086, 1089, 1094, 1097, 1098, 1102, 1105, 1106, 1107, 1110, 1111, 1114], "nativedtyp": [352, 362, 363, 365, 406, 407, 408, 409, 410, 411, 413, 414, 418, 419, 420, 423, 424, 425, 430, 431, 441, 442, 443, 452, 1073, 1098], "nativedevic": [352, 362, 363, 365, 406, 407, 408, 409, 410, 411, 413, 414, 415, 416, 418, 419, 420, 423, 424, 462, 479, 480, 481, 495, 501, 503, 505, 507, 508, 511, 749, 802, 1040, 1041, 1042, 1043, 1045, 1046, 1048], "my": 352, "numer": [352, 371, 406, 417, 425, 431, 512, 513, 516, 525, 574, 577, 586, 589, 603, 606, 607, 610, 611, 614, 623, 626, 627, 630, 631, 634, 635, 638, 667, 670, 671, 674, 681, 684, 686, 689, 690, 693, 698, 701, 702, 705, 710, 713, 726, 729, 730, 734, 745, 748, 749, 784, 785, 807, 808, 813, 814, 867, 871, 873, 889, 892, 903, 905, 916, 922, 924, 925, 927, 928, 930, 1040, 1051, 1052, 1053, 1054, 1073, 1078, 1081, 1090, 1093, 1098, 1127], "cooler": 352, "produc": [352, 462, 471, 472, 854, 866], "something_cool": 352, "category_nam": [353, 357, 362, 363, 365], "contrast": [353, 365], "backend_nam": [353, 357, 358, 359, 362, 363, 365], "account": 353, "instanti": 353, "firstli": [353, 354, 357, 360, 362, 364, 370], "templat": [353, 1115], "spec": [353, 354], "api_specif": [353, 425, 434, 437, 512, 530, 533, 570, 573, 574, 577, 582, 607, 690, 693, 722, 725, 726, 729, 953, 967, 970, 987, 990, 1057, 1058, 1059, 1062, 1063, 1066, 1073, 1078, 1081], "array_api": 353, "preview": 353, "render": 353, "incorrectli": 353, "onlin": [353, 1115], "approxim": [353, 395, 396, 512, 517, 520, 521, 524, 530, 533, 534, 537, 538, 542, 545, 578, 581, 582, 585, 599, 603, 606, 643, 646, 647, 650, 651, 654, 655, 658, 698, 701, 714, 717, 718, 721, 735, 740, 867, 888, 897, 899, 906, 908], "tangent": [353, 395, 402, 512, 538, 541, 542, 545, 546, 549, 735, 739, 740, 744], "domain": [353, 512, 517, 520, 521, 524, 530, 533, 534, 537, 538, 542, 545, 578, 581, 582, 585, 599, 603, 606, 643, 646, 647, 650, 655, 658, 714, 717, 718, 721, 722, 725, 735, 740], "infin": [353, 405, 425, 431, 512, 513, 516, 520, 521, 524, 525, 528, 534, 537, 538, 542, 545, 574, 577, 578, 581, 582, 585, 589, 599, 602, 603, 606, 607, 610, 611, 614, 623, 626, 627, 630, 643, 646, 647, 650, 655, 658, 659, 662, 681, 684, 698, 701, 702, 705, 706, 709, 714, 717, 718, 721, 722, 725, 735, 740, 745, 748, 867, 931, 933, 1073, 1078, 1081, 1086, 1089, 1106, 1107, 1110, 1111, 1114], "codomain": [353, 512, 517, 520, 521, 524, 530, 533, 534, 537, 538, 542, 545, 578, 581, 582, 585, 599, 603, 606, 643, 646, 647, 650, 655, 658, 714, 717, 718, 721, 722, 725, 735, 740], "x_i": [353, 512, 513, 516, 517, 520, 521, 524, 530, 533, 534, 537, 538, 554, 557, 574, 577, 578, 581, 582, 585, 599, 603, 606, 607, 623, 626, 627, 630, 631, 634, 643, 646, 647, 650, 655, 658, 667, 670, 686, 689, 706, 709, 710, 713, 714, 717, 718, 721, 722, 725, 726, 729, 735, 740, 745, 748, 1057, 1058, 1059, 1061, 1073, 1078, 1081, 1082, 1085, 1086, 1089, 1094, 1097, 1098, 1102, 1105], "assum": [353, 358, 362, 369, 370, 384, 406, 417, 425, 434, 437, 512, 525, 530, 533, 550, 553, 570, 573, 574, 577, 578, 582, 607, 690, 693, 706, 709, 714, 717, 722, 725, 726, 729, 735, 740, 749, 777, 854, 857, 866, 867, 874, 953, 967, 970, 971, 974, 987, 990, 1035, 1036, 1039, 1057, 1058, 1059, 1062, 1063, 1066, 1073, 1078, 1081, 1106, 1107, 1110], "express": [353, 367, 372, 512, 517, 530, 533, 538, 542, 545, 578, 714, 717, 735], "radian": [353, 512, 517, 530, 533, 538, 542, 545, 578, 714, 717, 735], "float": [353, 357, 361, 362, 364, 365, 369, 371, 395, 397, 405, 406, 407, 409, 411, 413, 414, 415, 416, 419, 423, 425, 431, 441, 445, 450, 453, 462, 495, 501, 505, 508, 511, 512, 513, 516, 517, 520, 521, 524, 525, 528, 530, 533, 534, 537, 538, 541, 542, 545, 546, 549, 570, 573, 574, 577, 578, 581, 582, 585, 586, 589, 591, 594, 599, 602, 603, 606, 607, 610, 611, 614, 615, 618, 619, 622, 635, 638, 639, 642, 643, 646, 647, 650, 655, 658, 659, 662, 681, 684, 686, 689, 690, 693, 694, 697, 698, 701, 702, 705, 706, 709, 714, 717, 718, 721, 722, 725, 730, 734, 735, 739, 740, 744, 745, 748, 749, 761, 762, 764, 776, 784, 785, 807, 808, 813, 814, 823, 825, 826, 828, 831, 833, 836, 838, 840, 842, 844, 846, 854, 857, 861, 866, 867, 868, 870, 874, 880, 882, 883, 885, 886, 888, 897, 899, 906, 908, 909, 911, 913, 915, 916, 931, 933, 937, 938, 941, 943, 946, 948, 951, 1013, 1014, 1015, 1016, 1035, 1036, 1039, 1040, 1045, 1046, 1048, 1057, 1058, 1059, 1061, 1073, 1078, 1081, 1082, 1085, 1086, 1089, 1090, 1093, 1094, 1097, 1098, 1102, 1105], "operand": [353, 512, 517, 520, 521, 524, 525, 528, 530, 533, 534, 537, 538, 542, 545, 570, 573, 574, 577, 578, 581, 582, 585, 599, 602, 603, 606, 607, 643, 646, 647, 650, 655, 658, 659, 662, 681, 684, 698, 701, 702, 705, 706, 709, 714, 717, 718, 721, 722, 725, 735, 740, 745, 748, 1073, 1074, 1077, 1078, 1081, 1086, 1089, 1098, 1101], "whose": [353, 406, 421, 422, 512, 520, 521, 524, 534, 537, 541, 546, 549, 578, 581, 582, 585, 698, 701, 714, 717, 718, 721, 735, 739, 740, 744, 749, 760, 867, 868, 870, 874, 877, 879, 880, 882, 883, 885, 886, 888, 897, 899, 900, 902, 903, 905, 906, 908, 909, 911, 913, 915, 916, 918, 919, 921, 925, 927, 953, 971, 974, 987, 990, 1057, 1058, 1059, 1073, 1074, 1077, 1101], "ref": [353, 512, 566, 569, 635, 638, 681, 684, 690, 693, 702, 705, 730, 734, 953, 997, 1000], "promot": [353, 357, 362, 425, 431, 434, 437, 452, 453, 457, 512, 517, 520, 521, 524, 525, 528, 530, 533, 534, 537, 538, 541, 546, 549, 550, 553, 558, 561, 562, 565, 566, 569, 570, 573, 578, 581, 582, 585, 586, 599, 602, 603, 606, 643, 646, 647, 650, 655, 658, 659, 662, 675, 678, 681, 684, 698, 701, 702, 705, 714, 717, 718, 721, 722, 725, 735, 739, 740, 744, 867, 868, 870, 871, 873, 886, 888, 889, 892, 897, 899, 903, 905, 906, 908, 913, 915, 928, 930, 931, 933, 953, 997, 1000, 1073, 1082, 1085], "But": [353, 361, 372], "needless": 353, "info": [353, 1115], "subset": [353, 356, 365, 367], "extend": [353, 356, 358, 365], "renam": 353, "conform": [353, 406, 417, 425, 434, 437, 512, 525, 530, 533, 550, 553, 570, 573, 574, 577, 582, 603, 606, 607, 690, 693, 706, 709, 722, 725, 726, 729, 735, 740, 867, 874, 953, 967, 970, 971, 974, 987, 990, 1057, 1058, 1059, 1062, 1063, 1066, 1073, 1078, 1081, 1106, 1107, 1110], "org": [353, 425, 434, 437, 512, 530, 533, 570, 573, 574, 577, 582, 607, 690, 693, 722, 725, 726, 729, 823, 825, 826, 828, 953, 967, 970, 987, 990, 1057, 1058, 1059, 1062, 1063, 1066, 1073, 1078, 1081], "elementwise_funct": [353, 512, 530, 533, 570, 573, 574, 577, 582, 607, 690, 693, 722, 725, 726, 729, 953, 987, 990, 1057, 1058, 1059, 1062, 1063, 1066, 1073, 1078, 1081], "descript": [353, 361, 406, 417, 425, 434, 437, 512, 525, 530, 533, 550, 553, 570, 573, 574, 577, 582, 607, 690, 693, 706, 709, 722, 725, 726, 729, 735, 740, 749, 777, 854, 857, 866, 867, 874, 931, 933, 953, 967, 970, 971, 974, 987, 990, 1035, 1036, 1039, 1057, 1058, 1059, 1062, 1063, 1066, 1073, 1078, 1081, 1106, 1107, 1110], "simplic": [353, 371, 383, 406, 417, 425, 434, 437, 512, 525, 530, 533, 550, 553, 570, 573, 574, 577, 582, 607, 690, 693, 706, 709, 722, 725, 726, 729, 735, 740, 749, 777, 854, 857, 866, 867, 874, 953, 967, 970, 971, 974, 987, 990, 1035, 1036, 1039, 1057, 1058, 1059, 1062, 1063, 1066, 1073, 1078, 1081], "judgment": 353, "beyond": [353, 953, 987, 990], "text": 353, "func_nam": [353, 354, 357], "pure": [353, 369, 372, 384], "themselv": [353, 357, 361, 362, 363, 371, 1017, 1018], "operator_nam": 353, "succinct": 353, "contstructor": 353, "though": [353, 357, 362, 370, 384], "forward": [353, 372, 383, 384, 1148, 1149, 1152, 1156], "_forward": [353, 367, 370, 371, 1115], "former": 353, "trainabl": [353, 368, 370, 371, 823, 835, 1125, 1126, 1148, 1149, 1158], "explicitli": [353, 357, 358, 360, 361, 364, 367, 384, 867, 880, 882, 1136, 1145, 1147, 1148, 1149], "latter": [353, 358], "implicit": [353, 361, 367], "docst": 353, "eight": 354, "static_": 354, "op_nam": 354, "__r": 354, "four": [354, 357, 362, 365, 370], "__sub__": [354, 360, 361, 365, 369], "__mul__": [354, 360, 361, 365, 369], "__truediv__": [354, 360, 361], "respect": [354, 360, 361, 362, 365, 406, 417, 512, 513, 516, 525, 528, 542, 545, 550, 553, 558, 561, 562, 565, 566, 569, 570, 573, 586, 589, 591, 594, 602, 610, 611, 614, 615, 618, 619, 622, 635, 638, 639, 642, 659, 662, 663, 666, 671, 674, 675, 678, 681, 684, 690, 693, 702, 705, 730, 734, 823, 825, 826, 828, 830, 831, 833, 836, 838, 840, 842, 844, 846, 867, 909, 911, 1013, 1014, 1015, 1016], "recap": [354, 361, 371], "independ": [354, 355, 359, 361, 367, 372, 867, 871, 873, 913, 915, 1040, 1041], "combinatorili": 354, "variat": [354, 356], "grid": [354, 356, 383, 406, 417], "vari": [354, 356, 361, 369, 1057, 1058, 1059, 1061], "simplest": 354, "small": [354, 357, 367, 371, 384, 512, 681, 684, 867, 888, 897, 899, 906, 908, 1035, 1036, 1039, 1150, 1151], "unus": [354, 364, 403, 404], "18": [354, 361, 512, 570, 573, 867, 877, 879, 903, 905, 1073, 1074, 1077, 1101], "excess": [354, 358, 369], "showcas": [354, 383], "demonstr": [354, 369], "replic": [354, 362], "meant": 354, "imaginari": 354, "some_flag": 354, "another_flag": 354, "54": [354, 512, 578, 582, 722, 725, 854, 866, 867, 903, 905, 1040, 1045, 1073, 1074, 1077, 1101], "jointli": 354, "three": [354, 361, 366, 406, 417, 1115], "x0": [354, 749, 757], "procedur": 354, "sens": [354, 361, 369], "5574077": 354, "1850398": 354, "5463025": 354, "8422884": 354, "91601413": 354, "9647598": 354, "3738229": 354, "1597457": 354, "0963247": 354, "9955841": 354, "3278579": 354, "multi": [354, 361, 366, 384, 854, 865, 867, 871, 873, 1115, 1121, 1136, 1147], "seper": [354, 749, 776], "pars": [354, 384], "satisfi": [354, 867, 934, 936], "far": [354, 363, 368, 369, 1017, 1018, 1028], "asid": [354, 383], "irrelev": [354, 362], "increasingli": 354, "complex": [354, 370, 371, 372, 384, 867, 880, 882, 916], "rule": [354, 356, 357, 360, 361, 362, 425, 431, 434, 437, 453, 512, 541, 546, 549, 566, 569, 586, 681, 684, 702, 705, 739, 744, 867, 868, 870, 871, 873, 903, 905, 913, 915], "count": [354, 370, 462, 500, 867, 928, 930, 953, 971, 974, 1057, 1058, 1059, 1106, 1107, 1110, 1111, 1114], "14254655": 354, "1578213": 354, "380515": 354, "17": [354, 361, 395, 397, 867, 877, 879, 1040, 1045], "trivial": 354, "By": [354, 357, 361, 364, 371, 372, 749, 767, 768, 867, 928, 930, 953, 979, 982, 1073, 1078, 1081, 1082, 1085, 1086, 1089, 1090, 1093, 1094, 1097, 1098, 1102, 1105, 1106, 1107, 1110, 1111, 1114], "non": [354, 361, 362, 367, 403, 404, 425, 431, 449, 512, 667, 670, 671, 674, 854, 857, 867, 874, 897, 899, 916, 922, 924, 928, 930, 931, 933, 1052, 1053, 1054, 1055, 1073, 1078, 1081, 1082, 1085, 1086, 1089, 1090, 1093, 1102, 1105, 1106, 1107, 1110, 1111, 1114, 1148, 1149, 1152, 1156], "dictat": [354, 360, 364, 365], "exlud": 354, "unit": [355, 356, 384, 395, 396, 397, 398, 462], "thoroughli": [355, 356], "ci": [355, 356, 384], "failur": 355, "On": [356, 368, 372], "fixtur": 356, "consum": [356, 361, 365, 462], "300": [356, 512, 706, 709], "hit": [356, 367], "permit": [356, 360, 365], "action": 356, "eleg": 356, "intellig": 356, "sampl": [356, 854, 862, 1040, 1041, 1045, 1046, 1048, 1073, 1094, 1097, 1102, 1105, 1136, 1144], "rang": [356, 370, 371, 372, 406, 407, 415, 416, 1057, 1058, 1073, 1090, 1093, 1098, 1115], "cach": [356, 357, 462, 480, 749, 760], "unexplor": 356, "known": 356, "repeatedli": [356, 361, 1017, 1026], "upload": 356, "artifact": 356, "parametr": 356, "strategi": 356, "statement": [356, 384], "plai": [356, 372], "helper": [356, 370], "verifi": [356, 362, 363, 369, 1115, 1121], "truth": [356, 512, 591, 594, 615, 618, 619, 622, 635, 638, 639, 642, 690, 693], "opt": [356, 358, 364, 369], "defer": [356, 357, 360, 361, 362, 363, 364], "suffic": [356, 359], "catch": [356, 749, 770], "systemat": 356, "safeguard": 356, "inabl": 356, "fact": [356, 370], "categor": [357, 363], "mutual": [357, 361], "constitut": [357, 367, 1073, 1094, 1097, 1102, 1105], "venn": 357, "diagram": 357, "light": [357, 384], "wherea": [357, 360, 362, 363, 365, 372], "hand": [357, 384], "log_pr": [357, 361, 364], "array_arg": 357, "typic": 357, "whatsoev": [357, 361], "commonli": [357, 1073, 1094, 1097, 1102, 1105], "outsid": [357, 363, 367, 369, 372, 953, 954, 957, 997, 1000], "denomin": [357, 384, 749, 775, 785, 808, 813, 814, 1035, 1036, 1039, 1150, 1151], "divis": [357, 512, 566, 569, 586, 589, 610, 611, 614, 702, 705, 749, 775, 785, 808, 813, 814, 823, 825, 826, 828, 836, 838, 1152, 1153, 1154], "piec": [357, 359, 360, 367], "deal": [357, 384], "concurr": [357, 361], "weight": [357, 361, 371, 372, 823, 825, 826, 828, 831, 833, 836, 838, 840, 842, 844, 846, 854, 863, 864, 866, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1145, 1146, 1148, 1149, 1152, 1154, 1155], "modif": 357, "decor": [357, 359, 361, 362, 363, 364], "group": [357, 361], "briefli": [357, 370], "cast": [357, 362, 425, 431, 434, 437, 953, 959, 962, 1073, 1090, 1093, 1098, 1115], "get_all_arrays_on_dev": 357, "nested_map": [357, 1017], "index_nest": [357, 1017], "implicit_backend": 358, "unless": [358, 363, 364, 384, 512, 681, 684, 749, 802], "__dict__": [358, 367, 369], "ivy_original_dict": [358, 367], "unmodifi": [358, 362], "moment": [358, 384, 823, 825, 826, 828, 836, 838, 1152, 1153, 1154], "fallback": 358, "freedom": [358, 1073, 1094, 1097, 1102, 1105], "recommend": [358, 512, 667, 670, 671, 674, 702, 705, 1073, 1082, 1085], "achiev": [359, 370, 372], "wrapper": [359, 360, 361, 362, 364, 365, 369], "topic": [359, 369], "tf": [360, 362, 363, 364, 365, 367, 372, 384, 1115], "_data": [360, 369], "organiz": [360, 361], "inherit": [360, 361, 369], "bear": [360, 361, 362], "mind": [360, 361], "necessarili": [360, 361], "although": [360, 361], "underpin": [360, 361, 367], "programmat": [360, 361], "backup": [360, 361], "accident": [360, 361], "readabl": [360, 361, 365, 369, 370], "absent": [360, 361], "perk": [360, 361], "auto": [360, 361, 370], "throw": [360, 369], "imposs": 360, "coupl": [360, 361, 369, 371], "anywai": 360, "secondli": [360, 362], "easier": 360, "five": [361, 370], "decis": [361, 367, 369], "displai": [361, 370], "arbitrarili": [361, 370], "__repr__": 361, "control": [361, 362, 364, 369, 370, 383], "__getattr__": 361, "underli": [361, 512, 550, 553, 562, 565, 570, 573, 675, 678], "__setattr__": 361, "__contains__": 361, "__getstate__": 361, "__setstate__": 361, "unpickl": 361, "expand": [361, 749, 776, 953, 967, 970], "children": 361, "shallowest": 361, "deepest": 361, "67": [361, 512, 570, 573, 582], "22": [361, 512, 570, 573, 867, 877, 879, 903, 905, 1052, 1056, 1073, 1074, 1077, 1101], "25": [361, 512, 722, 725, 726, 729, 867, 877, 879, 886, 937, 943, 946, 1035, 1036, 1039, 1073, 1074, 1077, 1101], "retain_grad": [361, 823, 830], "dy": [361, 823, 830], "dx": [361, 823, 830], "technic": [361, 364, 365, 384], "autograd": [361, 384], "grad": [361, 370, 371, 372, 1115, 1152, 1156], "redund": 361, "num_head": [361, 854, 865, 1136, 1147], "mask": [361, 854, 865, 866], "to_q_fn": [361, 854, 865], "to_kv_fn": [361, 854, 865], "to_out_fn": [361, 364, 854, 865], "to_q_v": [361, 854, 865], "to_kv_v": [361, 854, 865], "to_out_v": [361, 854, 865], "measur": [361, 854, 865, 1136, 1147], "dot": [361, 854, 865, 866, 867, 922, 924, 928, 930, 1136, 1147], "product": [361, 512, 681, 684, 749, 767, 854, 865, 866, 867, 871, 873, 889, 892, 903, 905, 922, 924, 928, 930, 1073, 1074, 1077, 1090, 1093, 1101, 1136, 1147], "implicitli": 361, "intuit": [361, 370, 371], "debug": [361, 370], "chronolog": 361, "had": [361, 364], "sequenti": [361, 371], "flow": [361, 383], "implic": 361, "slightli": [361, 367, 371], "eager": [361, 384], "int8": [362, 425, 446], "int16": [362, 425, 434, 437, 446, 1073, 1090, 1093, 1098], "uint8": [362, 425, 434, 437, 446], "uint16": [362, 425, 447, 1073, 1090, 1093, 1098], "uint32": [362, 425, 447, 1073, 1090, 1093, 1098], "uint64": [362, 425, 447, 1073, 1090, 1093, 1098], "bfloat16": [362, 425, 446], "float16": [362, 425, 447], "all_dtyp": 362, "all_numeric_dtyp": 362, "all_int_dtyp": 362, "all_float_dtyp": 362, "fall": [362, 366, 1115, 1148, 1149, 1152, 1156], "valid": [362, 367, 425, 439, 854, 855, 856, 857, 858, 859, 860, 861, 953, 997, 1000, 1106, 1107, 1110, 1111, 1114, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143], "invalid": [362, 867, 928, 930, 1106, 1107, 1110, 1111, 1114], "thirdli": 362, "native_float32": 362, "importantli": [362, 369, 372, 383], "varieti": [362, 363], "conveni": [362, 363, 365, 368, 370, 371], "arguabl": [362, 363], "compound": 362, "overflow": [362, 512, 525, 1073, 1098], "arr": [362, 363, 1035, 1036, 1039], "scalar": [362, 367, 372, 384, 406, 414, 749, 802, 819, 822, 867, 931, 933], "settabl": [362, 363], "jnp": [362, 363, 364, 365, 372, 1115], "jaxarrai": [362, 363, 364, 365], "mx": [362, 363, 364, 1115], "nd": [362, 363, 364, 367, 372, 1115], "deleg": 362, "fill_valu": [362, 406, 413, 414, 512, 594, 618, 619, 622], "as_n": [362, 425, 440, 441, 442, 443, 462, 481, 482, 503], "idx": [363, 369, 749, 755], "tpu": [363, 462, 484, 509], "aliv": [363, 462, 496, 500, 502, 749, 783, 801, 803], "amount": [363, 462, 508, 937, 938, 941, 943, 946, 948, 951], "memori": [363, 364, 382, 384, 462, 480, 501, 506, 508, 511, 854, 864, 1115], "dual": 363, "thrown": [363, 384, 749, 793], "rare": [363, 384], "program": 364, "strictli": 364, "ration": 364, "speak": 364, "subtli": 364, "ensure_in_backend": [364, 749, 793], "x_nativ": 364, "val_n": 364, "is_ivy_arrai": [364, 369, 749], "is_vari": [364, 823], "assign": [364, 369], "elif": 364, "irrespect": [364, 369, 425, 431], "inclus": [364, 406, 407, 1040, 1042, 1043], "omit": [364, 365, 1057, 1058, 1059, 1061], "unspecifi": [364, 512, 698, 701, 702, 705, 867, 880, 882, 953, 997, 1000], "predominantli": [364, 383], "math": [364, 372, 1115], "presenc": 364, "altern": [364, 370], "_wrap_fn": 364, "maxim": [364, 367], "inner": [364, 369, 867, 880, 882, 889, 892, 1013, 1014, 1015, 1016], "third": [364, 384, 867, 916, 1057, 1058], "addition": [364, 365], "leverag": 364, "equival": [364, 370, 372, 406, 407, 512, 566, 569, 667, 670, 671, 674, 702, 705, 867, 888, 897, 899, 906, 908, 913, 915, 931, 933], "input_arrai": 364, "adress": 365, "revisit": [365, 372], "dedic": [365, 369, 371, 823, 852, 1125, 1126], "__div__": 365, "dicat": 365, "futher": 365, "absenc": 365, "pep": 365, "484": 365, "annot": 365, "brittl": 365, "intend": [365, 1073, 1098], "freeli": 365, "inde": [365, 384], "flexibl": 365, "original_typ": 365, "cumbersom": 365, "sound": 366, "higher": [366, 367, 372, 384, 823, 826, 828, 831, 833, 836, 838, 840, 842, 844, 846], "overview": [366, 383], "handler": [366, 368, 372, 1115], "fledg": [367, 368], "syntact": [367, 372], "clip_by_valu": [367, 372], "clamp": [367, 372], "behavior": [367, 384, 512, 698, 701, 702, 705, 1057, 1058, 1059, 1061], "fit": [367, 953, 979, 982], "construct": [367, 368, 371, 372, 953, 1005, 1008, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1145, 1146, 1147, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159], "num": [367, 406, 415, 416], "power_seq": 367, "okai": 367, "bound": 367, "resid": [367, 371], "edg": [367, 372, 953, 954, 957, 963, 966, 1009, 1012, 1115], "larger": [367, 372, 425, 445, 953, 954, 957, 987, 990, 1073, 1094, 1097, 1102, 1105], "ml_framework": [367, 372, 406, 407], "current_framework": [367, 372], "furthermor": 367, "concaten": [367, 370, 462, 491, 749, 776, 953, 959, 962, 1115], "framework_handl": 367, "face": 367, "verbos": [367, 1115, 1162], "cprint": [367, 1161], "framework_stack": 367, "_determine_framework_from_arg": 367, "valueerror": [367, 953, 993, 996], "get_framework": 367, "neither": [367, 512, 525, 681, 684], "illustr": [367, 383], "un": [367, 425, 449], "nn": [367, 372, 406, 417, 1115], "init_h": [367, 854, 864], "init_c": [367, 854, 864], "kernel": [367, 384, 854, 864], "recurrent_kernel": [367, 854, 864], "bia": [367, 371, 854, 863, 864, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1146], "recurrent_bia": [367, 854, 864], "x_shape": 367, "batch_shap": [367, 369, 372, 406, 411, 749, 802, 854, 864, 865, 866, 867, 934, 936, 1040, 1041, 1136, 1145], "timestep": [367, 854, 864, 1136, 1145], "input_channel": [367, 371, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1145, 1146], "x_flat": 367, "wi": 367, "wi_x": 367, "wii_x": 367, "wif_x": 367, "wig_x": 367, "wio_x": 367, "recurr": [367, 854, 864], "wh": 367, "lstm": [367, 854, 864, 1136], "ht": 367, "ct": 367, "hts_list": 367, "unrol": [367, 370, 854, 864], "wii_xt": 367, "wif_xt": 367, "wig_xt": 367, "wio_xt": 367, "zip": 367, "htm1": 367, "ctm1": 367, "wh_htm1": 367, "whi_htm1": 367, "whf_htm1": 367, "whg_htm1": 367, "who_htm1": 367, "ft": 367, "gt": 367, "ot": 367, "offici": 367, "reliabl": 367, "sacrific": 367, "hear": 367, "virtu": 367, "pure_ivi": 367, "reduce_mean": [367, 370, 371, 372, 1115], "reduce_sum": [367, 1115], "reduce_var": 367, "compile_graph": [367, 372], "pure_torch": 367, "cat": [367, 372], "backbon": [367, 370], "_layer": 367, "super": [367, 370, 371, 372], "clean": [367, 368, 370], "random_unifrom": 367, "unclean": 367, "wx": 367, "temp": 367, "torchscript": 367, "fn": [367, 369, 385, 386, 387, 388, 389, 390, 391, 392, 393, 425, 446, 447, 462, 471, 472, 749, 755, 820, 1017, 1018, 1023, 1024, 1025, 1027, 1028, 1029, 1118, 1120], "example_input": [367, 403, 404], "static_argnum": [367, 403, 404], "static_argnam": [367, 403, 404], "jit": [367, 384], "frontend": 368, "primit": [368, 384], "describ": [368, 372, 1073, 1074, 1077, 1090, 1093, 1094, 1097, 1098, 1101], "hierarch": [368, 370, 371], "straight": [369, 1115], "arraywithlinalg": 369, "arraywithlog": 369, "arraywithmath": 369, "arraywithmeta": 369, "arraywithreduct": 369, "is_native_arrai": [369, 749], "_shape": 369, "_size": 369, "functool": 369, "mul": 369, "len": [369, 372, 406, 417], "_dtype": 369, "_devic": 369, "_dev_str": 369, "_pre_repr": 369, "_post_repr": 369, "ndim": [369, 867, 909, 911, 916], "mt": 369, "answer": [369, 384], "consol": 369, "typeerror": 369, "immut": 369, "behav": 369, "claim": 369, "truli": 369, "_native_wrapp": 369, "attributeerror": 369, "genuin": 369, "some_method": 369, "similarli": [369, 406, 417], "rewritten": 369, "__pow__": 369, "strang": 369, "power": [369, 370, 371, 512, 566, 569, 599, 698, 701, 749, 784, 807, 814, 867, 896, 1127], "enforc": 369, "notic": 369, "appear": [369, 953, 967, 970], "invers": [369, 383, 512, 517, 520, 521, 524, 530, 533, 534, 537, 538, 541, 542, 545, 546, 549, 581, 585, 739, 744, 867, 886, 888, 906, 908], "_wrap_method": 369, "func_wrapp": [369, 385, 386, 387, 388, 389, 390, 391, 392, 393], "__name__": 369, "non_wrapped_method": 369, "_method_wrap": 369, "native_arg": 369, "native_kwarg": 369, "inner_fn": 369, "whist": 369, "unwrap": 369, "transit": 369, "needlessli": 369, "randn": 369, "_unwrap_method": 369, "method_wrap": 369, "compartment": 369, "public": [369, 749, 765], "newshap": [369, 953, 983, 986], "new_shap": 369, "tidi": 369, "shorter": 369, "crystal": 369, "41": [369, 512, 570, 573, 722, 725, 867, 868, 870, 1073, 1098], "enough": [369, 370, 371], "ton": 370, "ado": [370, 371], "incred": [370, 384], "hash": 370, "soup": 370, "walk": [370, 371], "dct": 370, "cnt": 370, "combo": [370, 1115, 1121], "hold": [370, 749, 805, 806], "1000": [370, 512, 722, 725], "uda": 370, "3333": 370, "6667": 370, "178": 370, "new_weight": 370, "0600": 370, "3100": 370, "2400": 370, "6900": 370, "delimit": 370, "autocomplet": 370, "midwai": 370, "agent": 370, "total_spe": 370, "total_height": 370, "total_width": 370, "ag": 370, "tot": 370, "total_": 370, "total_h": 370, "batch_siz": [370, 854, 855, 856, 857, 858, 859, 860, 861, 1040, 1041], "dir": 370, "adam": [370, 371, 372, 823, 825, 826, 828, 836, 838, 1115, 1152, 1154], "cnt0": 370, "cnt1": 370, "diff_0": 370, "diff_1": 370, "config0": 370, "config1": 370, "Not": [370, 371, 384, 405], "decod": 370, "l0": 370, "l1": [370, 867, 931, 933], "depth": [370, 371, 372, 383, 462, 486, 490, 494, 749, 787, 802, 1017, 1029, 1148, 1149], "clearer": 370, "truncat": 370, "decoder__l0": 370, "decoder__l1": 370, "encoder__l0": 370, "encoder__l1": 370, "height": 370, "l0__b": 370, "l0__w": 370, "l1__b": 370, "l1__w": 370, "printabl": 370, "obviou": 370, "foresight": 370, "untidili": 370, "update_ag": 370, "normalize_img": 370, "img": 370, "img_max": 370, "reduce_max": [370, 1115], "img_min": 370, "reduce_min": [370, 1115], "img_rang": 370, "agent_posit": 370, "agent_veloc": 370, "agent_cam_front_rgb": 370, "agent_cam_front_depth": 370, "agent_cam_rear_rgb": 370, "agent_cam_rear_depth": 370, "agent_cam_lidar": 370, "normal": [370, 953, 997, 1000, 1035, 1036, 1039, 1040, 1045, 1150, 1151], "cleaner": 370, "camera": 370, "front_rgb": 370, "front_depth": 370, "rear_rgb": 370, "rear_depth": 370, "lidar": 370, "rgb": 370, "rear": 370, "veloc": 370, "cam": 370, "cam_max": 370, "cam_min": 370, "cam_rang": 370, "Of": 370, "ideal": 370, "perman": 370, "afterward": 370, "thread": 370, "incorpor": 370, "pretti": 370, "straightforward": 370, "dataload": [370, 382, 1115], "_cnt": 370, "img_": 370, "_dataset_s": 370, "_batch_siz": 370, "_count": [370, 371], "__next__": 370, "filenam": 370, "img_fnam": 370, "fname": 370, "loaded_img": 370, "cv2": 370, "imread": 370, "loader": [370, 384], "32": [370, 395, 397, 512, 570, 573, 854, 857, 860, 867, 903, 905, 1052, 1056, 1073, 1074, 1077, 1101], "batch_slic": 370, "model": [370, 371, 1115], "mymodel": [370, 1115], "linear0": [370, 371, 1115], "linear1": [370, 371, 1115], "x_in": [370, 371, 372, 1115], "001": [370, 371, 1035, 1036, 1039], "loss_fn": [370, 371, 372, 1115], "0145": 370, "grad_fn": 370, "addbackward0": 370, "_create_vari": 371, "output_channel": [371, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1145, 1146], "with_bia": [371, 1136, 1146], "_input_channel": 371, "_output_channel": 371, "_w_shape": 371, "_b_shape": 371, "_with_bia": 371, "8979": 371, "3198": 371, "0196": 371, "3126": 371, "3717": 371, "9687": 371, "6958": 371, "5122": 371, "3902": 371, "8800": 371, "5613": 371, "1982": 371, "nightmar": 371, "overcom": 371, "fc": 371, "9563": 371, "impact": 371, "v0": 371, "v1": 371, "6440": 371, "key0": 371, "1823": 371, "8075": 371, "linear3": 371, "v2": 371, "2346": 371, "counter": 371, "hidden": [371, 854, 864, 1136, 1145], "fed": [371, 462, 506], "1300": 371, "decoupl": 371, "scheme": 371, "weight_initi": [371, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1145, 1146], "glorotuniform": [371, 1127, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1145, 1146], "bias_initi": [371, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1146], "_w_init": 371, "_b_init": 371, "create_vari": [371, 1127], "var_shap": [371, 1127], "fan_out": [371, 1127], "fan_in": [371, 1127], "fan_mod": [371, 1127], "fan_sum": 371, "slight": 371, "misnom": 371, "saw": 371, "vanilla": [371, 1013, 1015], "descent": [371, 823, 831, 833, 1152, 1157], "lar": [371, 823, 836, 838, 840, 842, 1152], "lamb": [371, 823, 836, 838, 1152], "compile_on_next_step": [371, 1148, 1149, 1152, 1153, 1154, 1155, 1156, 1157], "_beta1": 371, "_beta2": 371, "_epsilon": 371, "_mw": 371, "_vw": 371, "_first_pass": 371, "_should_compil": 371, "_step": [371, 1152, 1156], "new_v": 371, "_lr": 371, "isinst": [371, 372, 749, 817], "_inplac": 371, "_stop_gradi": 371, "set_stat": [371, 1152, 1153, 1154, 1155, 1156, 1157], "mw": [371, 823, 825, 826, 828], "vw": [371, 823, 825, 826, 828], "pre": [372, 384, 462], "captur": 372, "sparse_funct": 372, "num_class": [372, 1040, 1041], "num_dim": 372, "new_axi": 372, "_linear": 372, "to_backend": 372, "jax_graph": 372, "learnabl": [372, 1035, 1036, 1039, 1150, 1151], "to_ivy_modul": [372, 1125], "thinli": 372, "whilst": 372, "to_haiku_modul": 372, "hk": 372, "loss_fn_t": 372, "transform": [372, 383, 854, 862, 863], "without_apply_rng": 372, "rng": 372, "prngkei": 372, "init": 372, "update_rul": 372, "01": [372, 512, 706, 709], "tree_multimap": 372, "mechan": [382, 384, 1115], "vision": [382, 1115], "robot": [382, 1115], "focus": 383, "field": [383, 867, 880, 882, 909, 911, 916, 1057, 1058, 1059], "perfect": 383, "3d": [383, 1136, 1141, 1142], "differenti": 383, "demo": [383, 1115], "orient": 383, "pose": 383, "euler": [383, 405], "quaternion": 383, "rotat": 383, "matric": [383, 406, 417, 421, 422, 854, 863, 867, 868, 870, 874, 877, 879, 880, 882, 883, 885, 886, 888, 896, 897, 899, 900, 902, 906, 908, 909, 911, 913, 915, 916, 918, 919, 921, 925, 927], "angl": [383, 512, 542, 545, 582, 718, 721, 740], "ivy_mech": 383, "target_facing_rotation_matrix": 383, "polar_to_cartesian_coord": 383, "ordin": [383, 867, 913, 915], "warp": 383, "optic": 383, "voxel": 383, "ivy_vis": 383, "coords_to_voxel_grid": 383, "render_pixel_coord": 383, "neural": [383, 854, 1115, 1122, 1136], "radianc": 383, "nerf": 383, "trajectori": 383, "motion": 383, "plan": [383, 1115], "mobil": 383, "ivy_robot": 383, "sample_spline_path": 383, "rigidmobil": 383, "sample_bodi": 383, "drone": 383, "sample_link": 383, "openai": 383, "swimmer": 383, "cumul": [383, 749, 767, 768], "reward": 383, "supervis": 383, "reinforc": 383, "door": [383, 384], "intersect": 383, "cartpol": 383, "mountain_car": 383, "pendulum": 383, "reacher": 383, "polici": 383, "condit": [383, 403, 404, 1017, 1027, 1028, 1052, 1056], "learnt": 383, "ture": 383, "ntm": 383, "egospher": 383, "spatial": 383, "esm": 383, "ivy_memori": 383, "egocentr": 383, "room": 383, "inspir": 383, "doubt": 384, "grate": 384, "put": 384, "probe": 384, "undergo": 384, "remark": 384, "surpris": 384, "backward": [384, 512, 702, 705, 867, 928, 930, 1106, 1107, 1110, 1111, 1114], "lock": 384, "contunu": 384, "minor": 384, "xla": 384, "buffer": 384, "kind": [384, 425, 445, 448, 512, 698, 701, 1073, 1090, 1093, 1098], "gold": 384, "dex": 384, "phase": 384, "lax": 384, "scan": 384, "tricki": 384, "predictor": 384, "tight": 384, "driver": 384, "schedul": 384, "algorithm": [384, 854, 855, 856, 857, 858, 859, 860, 861, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143], "dispatch": 384, "Will": 384, "ast": 384, "dynamic": 384, "cond": 384, "jacobian": 384, "checkpoint": 384, "autodiff": 384, "shine": 384, "merci": 384, "superset": 384, "cluster": 384, "compet": 384, "paradigm": 384, "parallelis": [384, 462, 471, 472], "spmd": 384, "mixtur": 384, "expert": 384, "sophist": 384, "depart": 384, "routin": 384, "hundr": 384, "thousand": 384, "deepli": [384, 1017, 1019], "broadli": 384, "heavili": 384, "supplementari": 384, "Is": 384, "reusabl": 384, "fanci": 384, "fusion": 384, "lose": 384, "vmap": 384, "pmap": 384, "overhead": 384, "ineffici": 384, "eventu": 384, "supplement": 384, "backdoor": 384, "callback": 384, "record": 384, "metric": 384, "somewhat": 384, "outsourc": 384, "inputs_to_ivy_arrai": 385, "gaussian": [395, 396], "leaki": [395, 396, 397], "alpha": [395, 397], "rectifi": [395, 397, 398], "slope": [395, 397], "39": [395, 397, 512, 599, 867, 903, 905, 1073, 1074, 1077, 1101], "85": [395, 397, 512, 570, 573], "48": [395, 397, 512, 722, 725, 867, 903, 905, 1073, 1074, 1077, 1101], "88": [395, 397, 512, 570, 573, 867, 903, 905, 1073, 1074, 1077, 1101], "269": [395, 399], "731": [395, 399], "881": [395, 399], "214": [395, 399], "978": [395, 399], "891": [395, 399], "422": [395, 400], "155": [395, 400], "0768": [395, 400], "231": [395, 400], "693": [395, 400, 937, 948, 951], "49": [395, 400, 512, 722, 725, 1073, 1074, 1077, 1101], "147": [395, 400], "363": [395, 400], "3461": [395, 401], "6491": [395, 401], "535": [395, 401], "hyperbol": [395, 402, 512, 520, 521, 524, 534, 537, 541, 546, 549, 581, 582, 585, 718, 721, 739, 740, 744], "55": [395, 402, 854, 860, 867, 903, 905, 1073, 1074, 1077, 1101], "501": [395, 402], "faster": [403, 404], "invoc": [403, 404], "718281828459045": 405, "newaxi": 405, "alia": 405, "pi": 405, "141592653589793": 405, "mathemat": [405, 512, 525, 542, 545, 603, 606, 681, 684, 867, 931, 933], "half": [406, 407, 1040, 1042, 1043, 1046, 1048], "chosen": [406, 407, 512, 542, 545, 1052, 1056], "distanc": [406, 407], "adjac": [406, 407], "interpret": [406, 408, 418], "uniniti": [406, 409, 410], "n_row": [406, 411], "n_col": [406, 411], "elsewher": [406, 411, 1052, 1056], "row": [406, 411, 867, 913, 915, 916, 1040, 1041, 1052, 1055], "column": [406, 411, 867, 880, 882, 909, 911, 913, 915, 916], "__dlpack__": [406, 412, 462, 507], "interchang": [406, 412, 953, 1001, 1004], "endpoint": [406, 415], "xy": [406, 417], "coordin": [406, 417, 512, 542, 545], "cartesian": [406, 417], "ij": [406, 417, 1073, 1074, 1077, 1101], "rank": [406, 417, 749, 821, 867, 871, 873, 897, 899, 909, 911, 913, 915, 925, 927, 928, 930, 931, 933, 953, 963, 966, 967, 970, 997, 1000, 1009, 1012, 1052, 1055, 1106, 1107, 1110, 1111, 1114], "ni": [406, 417], "xi": [406, 417], "n1": [406, 417], "n2": [406, 417], "n3": [406, 417], "accordingli": [406, 417, 512, 603, 606, 867, 931, 933, 1052, 1054, 1057, 1058, 1059, 1061, 1073, 1078, 1081, 1082, 1085, 1086, 1089, 1090, 1093, 1094, 1097, 1098, 1102, 1105, 1106, 1107, 1110, 1111, 1114], "xv": [406, 417], "yv": [406, 417], "triangular": [406, 421, 422, 867, 868, 870, 909, 911], "innermost": [406, 421, 422, 867, 868, 870, 874, 877, 879, 880, 882, 883, 885, 886, 888, 897, 899, 900, 902, 906, 908, 909, 911, 913, 915, 916, 918, 919, 921, 925, 927], "mxn": [406, 421, 422, 867, 877, 879, 888, 897, 899, 900, 902, 906, 908, 909, 911, 918, 919, 921, 925, 927], "defaultdtyp": [425, 426], "defaultfloatdtyp": [425, 427], "float_dtyp": [425, 441, 455], "defaultintdtyp": [425, 428], "dtype_in": [425, 429, 430, 444, 449, 450, 451, 461], "incompat": [425, 433], "occur": [425, 434, 437, 1052, 1053, 1054, 1057, 1058, 1059, 1061], "data_type_funct": [425, 434, 437], "closest": [425, 439, 512, 574, 577, 589, 607, 610, 611, 614, 706, 709, 745, 748], "floatdtyp": [425, 441], "int_dtyp": [425, 442, 456], "intdtyp": [425, 442], "followng": [425, 445], "occupi": [425, 445, 448, 749, 805, 806], "ep": [425, 445, 867, 888, 897, 899, 906, 908], "smallest_norm": [425, 445], "precis": [425, 445, 512, 681, 684, 722, 725], "encapsul": [425, 448], "type1": [425, 452], "type2": [425, 452], "arrays_and_dtyp": [425, 453], "ret1": [425, 457], "ret2": [425, 457], "noinspect": [426, 427, 428, 463, 824], "pyshadowingnam": [426, 427, 428, 463, 824], "defaultdevic": [462, 463], "__enter__": 462, "_dev": 462, "initialis": 462, "devcloneditem": [462, 484], "multidevitem": [462, 464, 467], "devclonedit": 462, "multidevit": [462, 465, 468, 471, 472, 476], "devclonednest": 462, "multidevnest": [462, 466, 469], "devdistitem": 462, "devdistit": 462, "devdistnest": 462, "devmanag": [462, 470], "dev_mapp": 462, "da_dim_s": 462, "safety_factor": 462, "min_dev_dim_s": 462, "max_dev_dim_step_ratio": 462, "min_unit_dev_tune_step": 462, "min_sf_tune_step": 462, "starting_split_factor": 462, "max_split_factor_step_s": 462, "tune_dev_alloc": 462, "tune_dev_split": 462, "mapper": [462, 471, 472], "receivess": 462, "ratio": [462, 823, 836, 838, 1152, 1154], "safe": [462, 471], "oom": 462, "tune": 462, "da_tune_step": 462, "ds_tune_step": 462, "to_clon": 462, "to_distribut": 462, "multidevic": [462, 471], "parallel": [462, 471, 472], "mutlidevic": [462, 471], "repeated_config_check": 462, "tune_step": 462, "devmapp": [462, 472], "ret_fn": [462, 471, 472], "queue_class": [462, 471, 472], "worker_class": [462, 471, 472], "worker": [462, 471, 472], "used_dev": [462, 471], "sf": [462, 471], "devmappermultiproc": 462, "multidev": [462, 473, 474, 475, 494], "profil": 462, "save_dir": [462, 477], "deviceic": [462, 483], "spread": [462, 494], "139740789224448": [462, 496], "physic": [462, 498], "x3": [462, 500], "x4": [462, 500], "process_specif": [462, 501, 511], "percentag": [462, 501], "ram": [462, 501, 508, 511], "alon": [462, 501, 511], "attr_onli": [462, 502], "chunk": [462, 504, 505, 506], "max_chunk_s": [462, 506], "chunk_siz": [462, 506], "input_ax": [462, 506], "output_ax": [462, 506], "feed": [462, 506], "fist": [462, 506], "stream": [462, 507], "caveat": [462, 507], "portabl": [462, 507, 1115], "gb": [462, 508, 511], "reset": [462, 510], "magnitud": [512, 513, 516, 525, 681, 684, 867, 916, 918, 919, 921], "princip": [512, 517, 530, 533, 538], "cosin": [512, 517, 520, 521, 524, 578, 581, 582, 585], "x1_i": [512, 525, 528, 542, 545, 550, 553, 558, 561, 562, 565, 566, 569, 570, 573, 586, 589, 591, 594, 602, 610, 611, 614, 615, 618, 619, 622, 635, 638, 639, 642, 659, 662, 663, 666, 671, 674, 675, 678, 681, 684, 690, 693, 698, 701, 702, 705, 730, 734], "x2_i": [512, 525, 528, 542, 545, 550, 553, 558, 561, 562, 565, 566, 569, 570, 573, 586, 589, 591, 594, 602, 610, 611, 614, 615, 618, 619, 622, 635, 638, 639, 642, 659, 662, 663, 666, 671, 674, 675, 678, 681, 684, 690, 693, 698, 701, 702, 705, 730, 734], "finit": [512, 525, 542, 545, 623, 626, 681, 684, 698, 701, 702, 705], "nor": [512, 525, 681, 684], "nearest": [512, 525, 681, 684, 706, 709], "2019": [512, 525, 603, 606, 681, 684], "commut": [512, 525], "sine": [512, 530, 533, 534, 537, 714, 717, 718, 721], "57": [512, 530, 533, 570, 573, 582], "524": [512, 530, 533], "644": [512, 530, 533], "201": [512, 530, 533, 706, 709], "305": [512, 530, 533], "412": [512, 530, 533], "quotient": [512, 542, 545], "notat": [512, 542, 545, 1073, 1074, 1077, 1101], "denot": [512, 542, 545], "pair": [512, 542, 545, 854, 866, 867, 871, 873], "quadrant": [512, 542, 545], "3\u03c0": [512, 542, 545], "549": [512, 541, 546, 549, 739, 744], "bitwis": [512, 550, 553, 562, 565, 570, 573, 675, 678], "AND": [512, 550, 553, 663, 666, 1106, 1107, 1110], "binari": [512, 550, 553, 562, 565, 570, 573, 675, 678, 937, 938, 941], "invert": [512, 554, 557], "arithmet": [512, 566, 569, 1073, 1082, 1085], "propag": [512, 566, 569, 1073, 1078, 1081, 1082, 1085, 1086, 1089, 1094, 1097, 1098, 1102, 1105], "thu": [512, 566, 569, 698, 701, 702, 705, 867, 880, 882], "lh": [512, 566, 569], "rh": [512, 566, 569], "xor": [512, 570, 573, 675, 678], "78": [512, 570, 573, 867, 903, 905, 1073, 1074, 1077, 1101], "91": [512, 570, 573, 867, 903, 905, 1073, 1074, 1077, 1101], "23": [512, 570, 573, 854, 860, 867, 877, 879, 1052, 1056], "66": [512, 570, 573, 867, 903, 905, 1073, 1074, 1077, 1101], "77": [512, 570, 573, 867, 903, 905, 1073, 1074, 1077, 1101], "79": [512, 570, 573], "89": [512, 570, 573, 867, 922, 924, 1073, 1098], "98": [512, 570, 573, 867, 903, 905, 1052, 1056, 1073, 1074, 1077, 1101], "26": [512, 570, 573, 854, 861, 867, 877, 879, 903, 905, 922, 924, 1073, 1074, 1077, 1101], "21": [512, 570, 573, 749, 767, 867, 877, 879, 903, 905, 937, 948, 951, 1073, 1074, 1077, 1101], "34": [512, 570, 573, 722, 725], "24": [512, 570, 573, 722, 725, 749, 767, 867, 877, 879, 903, 905, 1073, 1074, 1077, 1101], "51": [512, 570, 573], "27": [512, 570, 573, 582, 722, 725, 854, 866, 867, 903, 905, 1073, 1074, 1077, 1101], "74": [512, 570, 573], "59": [512, 570, 573], "416": [512, 578], "122": [512, 582], "368": [512, 582], "670": [512, 582], "202": [512, 582, 706, 709], "548": [512, 582], "1490": [512, 582], "dividend": [512, 586, 702, 705], "divisor": [512, 586, 702, 705, 823, 825, 826, 828, 836, 838, 1073, 1094, 1097, 1102, 1105, 1152, 1153, 1154], "gauss": [512, 595, 598], "exponenti": [512, 528, 595, 598, 599, 602, 659, 662, 698, 701], "logarithm": [512, 528, 599, 602, 643, 646, 647, 650, 651, 654, 655, 658, 659, 662, 867, 876, 912], "72": [512, 599, 867, 903, 905, 1073, 1074, 1077, 1101], "accur": [512, 603, 606], "fdlibm": [512, 603, 606], "compliant": [512, 603, 606, 667, 670, 671, 674, 1073, 1078, 1081, 1082, 1085, 1086, 1089], "greatest": [512, 589, 607, 610, 611, 614], "out_i": [512, 623, 626, 627, 630, 631, 634], "threshold": [512, 679, 680], "exce": [512, 680], "y_i": [512, 686, 689], "expon": [512, 698, 701, 749, 814], "versu": [512, 698, 701], "odd": [512, 698, 701], "modulu": [512, 702, 705], "primarili": [512, 702, 705], "5654": [512, 706, 709], "034": [512, 706, 709], "433": [512, 706, 709], "343": [512, 706, 709], "44": [512, 706, 709, 722, 725, 726, 729, 867, 903, 905, 1052, 1056, 1073, 1074, 1077, 1101], "30": [512, 706, 709, 867, 903, 905, 1073, 1074, 1077, 1101, 1127, 1133], "81": [512, 706, 709, 726, 729, 1073, 1074, 1077, 1101], "527": [512, 706, 709], "301": [512, 706, 709], "indistinguish": [512, 722, 725], "infinit": [512, 722, 725], "83": [512, 722, 725], "32455532": [512, 722, 725], "89897949": [512, 722, 725], "50": [512, 722, 725, 867, 903, 905, 1052, 1055, 1073, 1074, 1077, 1101], "31": [512, 722, 725], "169": [512, 722, 725], "63": [512, 722, 725, 867, 868, 870, 903, 905, 1073, 1074, 1077, 1101], "47": [512, 722, 725], "73": [512, 722, 725, 867, 868, 870, 1035, 1036, 1039], "93": [512, 722, 725], "35": [512, 722, 725, 854, 866, 867, 871, 873, 1052, 1056, 1073, 1074, 1077, 1101], "09": [512, 726, 729, 854, 866], "61": [512, 726, 729, 937, 938, 941], "546": [512, 735], "842": [512, 735], "916": [512, 735, 937, 938, 941], "996": [512, 735], "328": [512, 735], "real": [512, 740], "462": [512, 740], "604": [512, 740], "984": [512, 740], "976": [512, 740], "997": [512, 740, 1035, 1036, 1039], "decim": [512, 745, 748], "inspect": [749, 755, 1119, 1120], "downscal": [749, 761, 762, 764], "60": [749, 767, 867, 903, 905, 1073, 1074, 1077, 1101], "default_v": [749, 770], "catch_except": [749, 770], "rev": [749, 770], "with_cal": [749, 770], "arrang": [749, 771], "123": [749, 774], "mod": [749, 775], "max_freq": [749, 776], "num_band": [749, 776], "pad": [749, 776, 854, 855, 856, 857, 858, 859, 860, 861, 953, 963, 966, 1009, 1012, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143], "fourier": [749, 776], "band": [749, 776], "linearli": [749, 776, 867, 913, 915], "oppos": [749, 776], "geometr": [749, 776], "seen_set": [749, 787], "local_set": [749, 787], "decrement": [749, 791], "is_arrai": 749, "allow_dupl": [749, 799], "forkserv": [749, 800], "spawn": [749, 800], "hot": [749, 802], "scatter": [749, 802, 805, 806], "overrid": [749, 802], "tmp_dr": [749, 810], "temporari": [749, 810], "min_denomin": [749, 813], "stabil": [749, 813, 814, 1062, 1063, 1066, 1068, 1071], "_min_denomin": [749, 813], "min_bas": [749, 814], "_min_bas": [749, 814, 1035, 1036, 1039, 1150, 1151], "100000023841858": [749, 817], "200000047683716": [749, 817], "299999952316284": [749, 817], "400000095367432": [749, 817], "599999904632568": [749, 817], "101": [749, 818], "unpack": [749, 821], "gradienttrack": [823, 824], "delta": [823, 825], "cost": [823, 825, 826, 828, 831, 833, 836, 838, 840, 842, 844, 846, 1013, 1014, 1015, 1016], "ws": [823, 825, 826, 828, 831, 833, 836, 838, 840, 842, 844, 846], "en": [823, 825, 826, 828], "wikipedia": [823, 825, 826, 828], "wiki": [823, 825, 826, 828], "stochastic_gradient_desc": [823, 825, 826, 828], "dc": [823, 825, 826, 828, 831, 833, 836, 838, 840, 842, 844, 846], "dw": [823, 825, 826, 828, 831, 833, 836, 838, 840, 842, 844, 846], "averag": [823, 825, 826, 828, 836, 838, 1013, 1014, 1015], "forget": [823, 825, 826, 828, 836, 838, 1152, 1153, 1154], "rate": [823, 826, 828, 831, 833, 836, 838, 840, 842, 844, 846, 1013, 1014, 1015, 1016, 1136, 1147, 1152, 1153, 1154, 1155, 1156, 1157], "ws_new": [823, 826, 828, 831, 833, 836, 838, 840, 842, 844, 846], "retain": [823, 830], "trust": [823, 836, 838, 1152, 1154], "decai": [823, 836, 838, 840, 842, 1152, 1154, 1155], "layerwis": [823, 840, 842, 1152, 1155], "stride": [854, 855, 856, 857, 858, 859, 860, 861, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143], "data_format": [854, 855, 856, 857, 858, 859, 860, 861, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143], "nwc": [854, 855, 856, 1136, 1137, 1138], "dilat": [854, 855, 856, 857, 858, 859, 860, 861, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143], "convolut": [854, 855, 856, 857, 858, 859, 860, 861, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143], "d_in": [854, 855, 856, 857, 858, 859, 860], "fw": [854, 855, 856, 857, 858, 859, 860, 861], "d_out": [854, 855, 856, 857, 858, 859, 860], "slide": [854, 855, 856, 857, 858, 859, 860, 861, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143], "ncw": [854, 855, 856, 1136, 1137, 1138], "wio": [854, 855], "output_shap": [854, 856, 858, 860, 1136, 1138, 1140, 1142], "nhwc": [854, 857, 858, 861, 1136, 1139, 1140, 1143], "fh": [854, 857, 858, 859, 860, 861], "nchw": [854, 857, 858, 861, 1136, 1139, 1140, 1143], "hwio": [854, 857], "unequ": [854, 857], "28": [854, 857, 860, 861, 867, 903, 905, 1073, 1074, 1077, 1101], "unsqueez": [854, 857, 861], "ndhwc": [854, 859, 860, 1136, 1141, 1142], "volum": [854, 859], "fd": [854, 859, 860], "ncdhw": [854, 859, 860, 1136, 1141, 1142], "dhwio": [854, 859], "256": [854, 860], "258": [854, 860], "128": [854, 860, 867, 903, 905], "depthwis": [854, 861, 1136, 1143], "333": [854, 861], "inp": [854, 861], "prob": [854, 862, 1040, 1041, 1136, 1144], "randomli": [854, 862, 1136, 1144], "bernoulli": [854, 862], "out_featur": [854, 862, 863], "incom": [854, 863], "outer_batch_shap": [854, 863], "inner_batch_shap": [854, 863], "in_featur": [854, 863], "cell": [854, 864, 1136, 1145], "num_queri": [854, 865, 866], "x_feat_dim": [854, 865], "num_kei": [854, 865, 866], "cont_feat_dim": [854, 865], "numhead": [854, 865], "feat_dim": [854, 865, 866], "out_feat_dim": [854, 865], "score": [854, 866], "04": [854, 866], "03": [854, 866, 1035, 1036, 1039], "08": [854, 866], "decomposit": [867, 868, 870, 909, 911, 916], "symmetr": [867, 868, 870, 880, 882, 883, 885, 934, 936], "u": [867, 868, 870, 916], "577": [867, 868, 870], "707": [867, 868, 870], "vif": [867, 871, 873], "92": [867, 874], "293": [867, 874], "46997": [867, 874], "eigendecomposit": [867, 880, 882], "qlq\u1d40": [867, 880, 882], "orthogon": [867, 880, 882], "eig": [867, 880, 882], "eigenvalu": [867, 880, 882, 883, 885], "eigenvector": [867, 880, 882], "75": [867, 886, 903, 905], "prepend": [867, 889, 892], "singular": [867, 888, 897, 899, 906, 908, 916, 918, 919, 921], "toler": [867, 888, 897, 899, 906, 908], "largest_singular_valu": [867, 888, 897, 899, 906, 908], "array_lik": [867, 903, 905], "33": [867, 903, 905, 1035, 1036, 1039, 1073, 1074, 1077, 1101], "36": [867, 903, 905, 1073, 1074, 1077, 1101], "45": [867, 903, 905, 953, 992, 1035, 1036, 1039, 1073, 1074, 1077, 1101], "65": [867, 903, 905, 1073, 1074, 1077, 1101], "84": [867, 903, 905, 1073, 1074, 1077, 1101], "105": [867, 903, 905, 937, 938, 941], "112": [867, 903, 905, 1073, 1074, 1077, 1101], "104": [867, 903, 905, 1073, 1074, 1077, 1101], "120": [867, 903, 905], "moor": [867, 888, 906, 908], "penros": [867, 888, 906, 908], "pseudo": [867, 888, 906, 908], "orthonorm": [867, 909, 911, 916], "2d": [867, 876, 912, 1136, 1139, 1140, 1143], "logdet": [867, 876, 912], "coeffici": [867, 913, 915], "usvh": [867, 916], "vh": [867, 916], "hermitian": [867, 916], "et": [867, 916], "cetera": [867, 916], "adjoint": [867, 916], "reconstruct": [867, 916, 1057, 1058, 1060], "reconstructed_x": [867, 916], "contract": [867, 922, 924, 1073, 1074, 1077, 1101], "doubl": [867, 922, 924], "singleton": [867, 931, 933, 953, 993, 996, 1052, 1054, 1073, 1078, 1081, 1082, 1085, 1086, 1089, 1090, 1093, 1094, 1097, 1098, 1102, 1105, 1106, 1107, 1110, 1111, 1114], "liter": [867, 931, 933], "manhattan": [867, 931, 933], "l2": [867, 931, 933], "euclidean": [867, 931, 933], "mathbf": [867, 934, 936], "mathbb": [867, 934, 936], "skew": [867, 934, 936], "entropi": [937, 938, 941, 943, 946, 948, 951], "predict": [937, 938, 941, 943, 946, 948, 951], "smooth": [937, 938, 941, 943, 946, 948, 951], "223": [937, 938, 941], "357": [937, 938, 941, 948, 951], "511": [937, 938, 941], "discret": [937, 943, 946], "3862944": [937, 943, 946], "35667497": [937, 943, 946], "spars": [937, 948, 951], "logit": [937, 948, 951], "793291": [937, 948, 951], "512926": [937, 948, 951], "before_1": [953, 963, 966, 1009, 1012], "after_1": [953, 963, 966, 1009, 1012], "before_n": [953, 963, 966, 1009, 1012], "after_n": [953, 963, 966, 1009, 1012], "insert": [953, 967, 970, 1017, 1022, 1052, 1053], "manipulation_funct": [953, 967, 970], "reorder": [953, 971, 974], "permut": [953, 975, 978, 1001, 1004], "repetit": [953, 979, 982, 1005, 1008], "restor": [953, 987, 990], "classivi": [953, 992], "famili": [953, 997, 1000], "intxx": [953, 997, 1000], "floatxx": [953, 997, 1000], "fomaml_step": 1013, "inner_cost_fn": [1013, 1014, 1015], "outer_cost_fn": [1013, 1014, 1015], "inner_grad_step": [1013, 1014, 1015, 1016], "inner_learning_r": [1013, 1014, 1015, 1016], "inner_optimization_step": [1013, 1014, 1015, 1016], "inner_batch_fn": [1013, 1014, 1015], "outer_batch_fn": [1013, 1014, 1015], "average_across_step": [1013, 1014, 1015], "inner_v": [1013, 1014, 1015], "keep_inner_v": [1013, 1014, 1015], "outer_v": [1013, 1014, 1015], "keep_outer_v": [1013, 1014, 1015], "return_inner_v": [1013, 1014, 1015, 1016], "num_task": [1013, 1014, 1015, 1016], "maml": [1013, 1014, 1015], "recev": [1013, 1014, 1015], "0x7f740fcfb700": [1013, 1014, 1015, 1016], "maml_step": 1013, "rece": [1013, 1015], "reptile_step": 1013, "cost_fn": [1013, 1016], "reptil": [1013, 1016], "receivng": [1013, 1016], "all_nested_indic": 1017, "include_nest": [1017, 1018], "_index": [1017, 1018, 1028], "_base": [1017, 1018, 1027, 1028], "copy_nest": 1017, "to_mut": [1017, 1019, 1029], "mutabl": [1017, 1019, 1029], "insert_into_nest_at_index": 1017, "insert_into_nest_at_indic": 1017, "map_nest_at_index": 1017, "map_nest_at_indic": 1017, "multi_index_nest": 1017, "nested_ani": 1017, "check_nest": [1017, 1027, 1028], "conditon": [1017, 1027, 1028], "nested_indices_wher": 1017, "stop_after_n_found": [1017, 1028], "_depth": [1017, 1029], "_tuple_check_fn": [1017, 1029], "_list_check_fn": [1017, 1029], "_dict_check_fn": [1017, 1029], "nested_multi_map": 1017, "nest0": [1017, 1030], "ivy_arrai": [1017, 1030], "funciton": [1017, 1030], "prune_nest_at_index": 1017, "prune_nest_at_indic": 1017, "set_nest_at_index": 1017, "set_nest_at_indic": 1017, "mini": [1035, 1036, 1039, 1150, 1151], "gamma": [1035, 1036, 1039], "beta": [1035, 1036, 1039], "0976": [1035, 1036, 1039], "3452": [1035, 1036, 1039], "2740": [1035, 1036, 1039], "1047": [1035, 1036, 1039], "5886": [1035, 1036, 1039], "2732": [1035, 1036, 1039], "7696": [1035, 1036, 1039], "7024": [1035, 1036, 1039], "2518": [1035, 1036, 1039], "58": [1035, 1036, 1039, 1057, 1058], "283": [1035, 1036, 1039], "585": [1035, 1036, 1039], "909": [1035, 1036, 1039], "628": [1035, 1036, 1039], "225": [1035, 1036, 1039], "425": [1035, 1036, 1039], "norm_idx": [1035, 1036, 1039], "228": [1035, 1036, 1039], "0285": [1035, 1036, 1039], "199": [1035, 1036, 1039], "204": [1035, 1036, 1039], "population_s": [1040, 1041], "num_sampl": [1040, 1041], "draw": [1040, 1041, 1045, 1046, 1048], "unnorm": [1040, 1041], "drawn": [1040, 1041, 1042, 1043, 1045, 1046, 1048], "home": [1040, 1041, 1045, 1046, 1048], "uniformli": [1040, 1042, 1043, 1046, 1048], "highest": [1040, 1042, 1043], "parameter": [1040, 1045, 1046, 1048], "6444774682897879": [1040, 1045], "811": [1040, 1045], "508": [1040, 1045], "564": [1040, 1045], "7268672": [1040, 1045], "968": [1040, 1045], "175": [1040, 1045, 1057, 1058], "064": [1040, 1045], "40935726": [1040, 1045], "556": [1040, 1045], "26431865": [1040, 1046, 1048], "475": [1040, 1046, 1048], "878": [1040, 1046, 1048], "861": [1040, 1046, 1048], "89150229": [1040, 1046, 1048], "89629126": [1040, 1046, 1048], "94198485": [1040, 1046, 1048], "91405606": [1040, 1046, 1048], "72848724": [1040, 1046, 1048], "7550739": [1040, 1046, 1048], "624": [1040, 1046, 1048], "00109": [1040, 1046, 1048], "occurr": [1052, 1053, 1054, 1057, 1058], "yield": [1052, 1056], "43": [1052, 1056], "x_j": [1057, 1058, 1059, 1061], "impli": [1057, 1058, 1059, 1061], "inverse_indic": [1057, 1058, 1060], "aggreg": [1057, 1058], "fourth": [1057, 1058], "607": [1057, 1058], "735": [1057, 1058], "667": [1057, 1058], "381": [1057, 1058], "857": [1057, 1058], "0396": [1057, 1058], "166": [1057, 1058], "828": [1057, 1058], "144": [1057, 1058], "40501155": [1057, 1058], "77361575": [1057, 1058], "97776199": [1057, 1058], "36831157": [1057, 1058], "89148434": [1057, 1058], "9512272": [1057, 1058], "67542176": [1057, 1058], "41985657": [1057, 1058], "23478023": [1057, 1058], "1141": [1057, 1058], "8101": [1057, 1058], "9298": [1057, 1058], "8460": [1057, 1058], "2119": [1057, 1058], "3519": [1057, 1058], "6252": [1057, 1058], "4033": [1057, 1058], "7443": [1057, 1058], "2577": [1057, 1058], "3707": [1057, 1058], "0545": [1057, 1058], "3238": [1057, 1058], "5944": [1057, 1058], "0775": [1057, 1058], "4327": [1057, 1058], "176": [1057, 1058], "889": [1057, 1058], "763": [1057, 1058], "071": [1057, 1058], "262": [1057, 1058], "456": [1057, 1058], "114": [1057, 1058], "349": [1057, 1058], "615": [1057, 1058], "594": [1057, 1058], "335": [1057, 1058], "212": [1057, 1058], "457": [1057, 1058], "827": [1057, 1058], "209": [1057, 1058], "ascend": [1062, 1063, 1066], "einstein": [1073, 1074, 1077, 1101], "summat": [1073, 1074, 1077, 1101], "seq": [1073, 1074, 1077, 1101], "jk": [1073, 1074, 1077, 1101], "ik": [1073, 1074, 1077, 1101], "126": [1073, 1074, 1077, 1101], "510": [1073, 1074, 1077, 1101], "99": [1073, 1074, 1077, 1101], "108": [1073, 1074, 1077, 1101], "117": [1073, 1074, 1077, 1101], "sentinel": [1073, 1078, 1081, 1086, 1089], "unsign": [1073, 1090, 1093, 1098], "degre": [1073, 1094, 1097, 1102, 1105], "bessel": [1073, 1094, 1097, 1102, 1105], "8164966": [1073, 1094, 1097], "varianc": [1073, 1102, 1105], "unbias": [1073, 1102, 1105], "simplicit": [1106, 1107, 1110], "autom": 1115, "grow": 1115, "ai": 1115, "got": 1115, "colab": 1115, "sharp": 1115, "weekli": 1115, "event": 1115, "immedi": 1115, "favorit": 1115, "jax_concat": 1115, "tf_concat": 1115, "np_concat": 1115, "mx_concat": 1115, "torch_concat": 1115, "prompt": 1115, "get_devic": 1115, "reduce_prod": 1115, "gradient_imag": 1115, "linalg": 1115, "bilinear_resampl": 1115, "stack_imag": 1115, "neural_net": 1115, "ecosystem": [1115, 1121], "popular": [1115, 1121], "acceler": 1115, "articl": 1115, "lenton2021ivi": 1115, "inter": 1115, "lenton": 1115, "daniel": 1115, "pardo": 1115, "fabio": 1115, "falck": 1115, "fabian": 1115, "jame": 1115, "stephen": 1115, "clark": 1115, "ronald": 1115, "journal": 1115, "arxiv": 1115, "preprint": 1115, "2102": 1115, "02886": 1115, "2021": 1115, "add_array_spec": 1118, "fn_array_spec": 1118, "geglu": 1122, "native_modul": [1125, 1126], "native_module_class": [1125, 1126], "firstlayersiren": 1127, "kaimingnorm": [1127, 1131], "negative_slop": 1127, "Ones": 1127, "siren": 1127, "w0": [1127, 1133], "filter_s": [1136, 1137, 1138], "1d": [1136, 1137, 1138], "conv1dtranspos": 1136, "filter_shap": [1136, 1139, 1140, 1141, 1142, 1143], "conv2dtranspos": 1136, "conv3dtranspos": 1136, "depthwiseconv2d": 1136, "num_channel": [1136, 1143], "bernoul": [1136, 1144], "num_lay": [1136, 1145], "return_sequ": [1136, 1145], "return_st": [1136, 1145], "get_initial_st": [1136, 1145], "dens": [1136, 1146], "multiheadattent": 1136, "query_dim": [1136, 1147], "head_dim": [1136, 1147], "dropout_r": [1136, 1147], "context_dim": [1136, 1147], "with_to_q_fn": [1136, 1147], "with_to_kv_fn": [1136, 1147], "with_to_out_fn": [1136, 1147], "build_mod": [1136, 1147, 1148, 1149], "on_init": [1136, 1147, 1148, 1149], "__call__": [1136, 1147, 1148, 1149], "store_var": [1148, 1149], "arg_stateful_idx": [1148, 1149], "kwarg_stateful_idx": [1148, 1149], "fallback_to_non_compil": [1148, 1149, 1152, 1156], "with_partial_v": [1148, 1149], "initialz": [1148, 1149], "from_cal": [1148, 1149], "check_submod_ret": [1148, 1149], "get_mod_kei": [1148, 1149], "top_mod": [1148, 1149], "mod_depth": [1148, 1149], "mod_height": [1148, 1149], "mod_with_top_mod_key_chain": [1148, 1149], "save_weight": [1148, 1149], "weights_path": [1148, 1149], "show_mod_in_top_mod": [1148, 1149], "upper_depth": [1148, 1149], "lower_depth": [1148, 1149], "show_structur": [1148, 1149], "show_v_in_top_v": [1148, 1149], "sub_mod": [1148, 1149], "show_v": [1148, 1149], "track_submod_call_ord": [1148, 1149], "track_submod_ret": [1148, 1149], "v_with_top_v_key_chain": [1148, 1149], "layernorm": 1150, "normalized_shap": [1150, 1151], "elementwise_affin": [1150, 1151], "trail": [1150, 1151], "affin": [1150, 1151], "0001": [1152, 1153, 1154], "init_on_first_step": [1152, 1156], "ignore_miss": [1152, 1156], "overriden": [1152, 1156], "sgd": 1152, "stochast": [1152, 1157], "sub_modul": [1158, 1159]}, "objects": {"ivy.array": [[0, 0, 0, "-", "activations"], [2, 0, 0, "-", "array_methods"], [116, 0, 0, "-", "conversions"], [121, 0, 0, "-", "creation"], [123, 0, 0, "-", "data_type"], [125, 0, 0, "-", "device"], [127, 0, 0, "-", "elementwise"], [129, 0, 0, "-", "general"], [131, 0, 0, "-", "gradients"], [133, 0, 0, "-", "image"], [135, 0, 0, "-", "layers"], [137, 0, 0, "-", "linear_algebra"], [139, 0, 0, "-", "losses"], [141, 0, 0, "-", "manipulation"], [143, 0, 0, "-", "norms"], [145, 0, 0, "-", "random"], [147, 0, 0, "-", "searching"], [149, 0, 0, "-", "set"], [151, 0, 0, "-", "sorting"], [153, 0, 0, "-", "statistical"], [155, 0, 0, "-", "utility"], [157, 0, 0, "-", "wrapping"]], "ivy.array.activations": [[1, 1, 1, "", "ArrayWithActivations"]], "ivy.array.array_methods": [[514, 2, 1, "", "abs"], [521, 2, 1, "", "acos"], [522, 2, 1, "", "acosh"], [659, 2, 1, "", "add"], [7, 2, 1, "", "add_ivy_array_instance_methods"], [1108, 2, 1, "", "all"], [751, 2, 1, "", "all_equal"], [1112, 2, 1, "", "any"], [1064, 2, 1, "", "argsort"], [531, 2, 1, "", "asin"], [535, 2, 1, "", "asinh"], [546, 2, 1, "", "atan"], [543, 2, 1, "", "atan2"], [547, 2, 1, "", "atanh"], [939, 2, 1, "", "binary_cross_entropy"], [551, 2, 1, "", "bitwise_and"], [555, 2, 1, "", "bitwise_invert"], [559, 2, 1, "", "bitwise_left_shift"], [563, 2, 1, "", "bitwise_or"], [567, 2, 1, "", "bitwise_right_shift"], [571, 2, 1, "", "bitwise_xor"], [435, 2, 1, "", "can_cast"], [575, 2, 1, "", "ceil"], [869, 2, 1, "", "cholesky"], [955, 2, 1, "", "clip"], [960, 2, 1, "", "concat"], [964, 2, 1, "", "constant_pad"], [579, 2, 1, "", "cos"], [583, 2, 1, "", "cosh"], [872, 2, 1, "", "cross"], [944, 2, 1, "", "cross_entropy"], [912, 2, 1, "", "det"], [878, 2, 1, "", "diagonal"], [611, 2, 1, "", "divide"], [881, 2, 1, "", "eigh"], [884, 2, 1, "", "eigvalsh"], [1075, 2, 1, "", "einsum"], [619, 2, 1, "", "equal"], [596, 2, 1, "", "erf"], [659, 2, 1, "", "exp"], [968, 2, 1, "", "expand_dims"], [604, 2, 1, "", "expm1"], [972, 2, 1, "", "flip"], [611, 2, 1, "", "floor"], [612, 2, 1, "", "floor_divide"], [779, 2, 1, "", "gather_nd"], [619, 2, 1, "", "greater"], [620, 2, 1, "", "greater_equal"], [906, 2, 1, "", "inv"], [624, 2, 1, "", "isfinite"], [628, 2, 1, "", "isinf"], [632, 2, 1, "", "isnan"], [1037, 2, 1, "", "layer_norm"], [636, 2, 1, "", "less"], [640, 2, 1, "", "less_equal"], [644, 2, 1, "", "log"], [648, 2, 1, "", "log10"], [652, 2, 1, "", "log1p"], [656, 2, 1, "", "log2"], [660, 2, 1, "", "logaddexp"], [664, 2, 1, "", "logical_and"], [668, 2, 1, "", "logical_not"], [672, 2, 1, "", "logical_or"], [676, 2, 1, "", "logical_xor"], [890, 2, 1, "", "matmul"], [894, 2, 1, "", "matrix_norm"], [898, 2, 1, "", "matrix_rank"], [901, 2, 1, "", "matrix_transpose"], [1079, 2, 1, "", "max"], [1083, 2, 1, "", "mean"], [1087, 2, 1, "", "min"], [682, 2, 1, "", "multiply"], [687, 2, 1, "", "negative"], [691, 2, 1, "", "not_equal"], [904, 2, 1, "", "outer"], [976, 2, 1, "", "permute_dims"], [907, 2, 1, "", "pinv"], [695, 2, 1, "", "positive"], [699, 2, 1, "", "pow"], [1091, 2, 1, "", "prod"], [910, 2, 1, "", "qr"], [703, 2, 1, "", "remainder"], [980, 2, 1, "", "repeat"], [984, 2, 1, "", "reshape"], [988, 2, 1, "", "roll"], [707, 2, 1, "", "round"], [711, 2, 1, "", "sign"], [715, 2, 1, "", "sin"], [719, 2, 1, "", "sinh"], [914, 2, 1, "", "solve"], [1069, 2, 1, "", "sort"], [949, 2, 1, "", "sparse_cross_entropy"], [723, 2, 1, "", "sqrt"], [727, 2, 1, "", "square"], [994, 2, 1, "", "squeeze"], [998, 2, 1, "", "stack"], [1095, 2, 1, "", "std"], [732, 2, 1, "", "subtract"], [1099, 2, 1, "", "sum"], [919, 2, 1, "", "svd"], [920, 2, 1, "", "svdvals"], [1002, 2, 1, "", "swapaxes"], [737, 2, 1, "", "tan"], [742, 2, 1, "", "tanh"], [923, 2, 1, "", "tensordot"], [1006, 2, 1, "", "tile"], [926, 2, 1, "", "trace"], [746, 2, 1, "", "trunc"], [1103, 2, 1, "", "var"], [929, 2, 1, "", "vecdot"], [932, 2, 1, "", "vector_norm"], [935, 2, 1, "", "vector_to_skew_symmetric_matrix"], [1010, 2, 1, "", "zero_pad"]], "ivy.array.conversions": [[117, 2, 1, "", "args_to_ivy"], [118, 2, 1, "", "args_to_native"], [119, 2, 1, "", "to_ivy"], [120, 2, 1, "", "to_native"]], "ivy.array.creation": [[122, 1, 1, "", "ArrayWithCreation"]], "ivy.array.data_type": [[124, 1, 1, "", "ArrayWithDataTypes"]], "ivy.array.data_type.ArrayWithDataTypes": [[124, 3, 1, "", "can_cast"]], "ivy.array.device": [[126, 1, 1, "", "ArrayWithDevice"]], "ivy.array.elementwise": [[128, 1, 1, "", "ArrayWithElementwise"]], "ivy.array.elementwise.ArrayWithElementwise": [[128, 3, 1, "", "abs"], [128, 3, 1, "", "acos"], [128, 3, 1, "", "acosh"], [128, 3, 1, "", "add"], [128, 3, 1, "", "asin"], [128, 3, 1, "", "asinh"], [128, 3, 1, "", "atan"], [128, 3, 1, "", "atan2"], [128, 3, 1, "", "atanh"], [128, 3, 1, "", "bitwise_and"], [128, 3, 1, "", "bitwise_invert"], [128, 3, 1, "", "bitwise_left_shift"], [128, 3, 1, "", "bitwise_or"], [128, 3, 1, "", "bitwise_right_shift"], [128, 3, 1, "", "bitwise_xor"], [128, 3, 1, "", "ceil"], [128, 3, 1, "", "cos"], [128, 3, 1, "", "cosh"], [128, 3, 1, "", "divide"], [128, 3, 1, "", "equal"], [128, 3, 1, "", "erf"], [128, 3, 1, "", "exp"], [128, 3, 1, "", "expm1"], [128, 3, 1, "", "floor"], [128, 3, 1, "", "floor_divide"], [128, 3, 1, "", "greater"], [128, 3, 1, "", "greater_equal"], [128, 3, 1, "", "isfinite"], [128, 3, 1, "", "isinf"], [128, 3, 1, "", "isnan"], [128, 3, 1, "", "less"], [128, 3, 1, "", "less_equal"], [128, 3, 1, "", "log"], [128, 3, 1, "", "log10"], [128, 3, 1, "", "log1p"], [128, 3, 1, "", "log2"], [128, 3, 1, "", "logaddexp"], [128, 3, 1, "", "logical_and"], [128, 3, 1, "", "logical_not"], [128, 3, 1, "", "logical_or"], [128, 3, 1, "", "logical_xor"], [128, 3, 1, "", "multiply"], [128, 3, 1, "", "negative"], [128, 3, 1, "", "not_equal"], [128, 3, 1, "", "positive"], [128, 3, 1, "", "pow"], [128, 3, 1, "", "remainder"], [128, 3, 1, "", "round"], [128, 3, 1, "", "sign"], [128, 3, 1, "", "sin"], [128, 3, 1, "", "sinh"], [128, 3, 1, "", "sqrt"], [128, 3, 1, "", "square"], [128, 3, 1, "", "subtract"], [128, 3, 1, "", "tan"], [128, 3, 1, "", "tanh"], [128, 3, 1, "", "trunc"]], "ivy.array.general": [[130, 1, 1, "", "ArrayWithGeneral"]], "ivy.array.general.ArrayWithGeneral": [[130, 3, 1, "", "all_equal"], [130, 3, 1, "", "gather_nd"]], "ivy.array.gradients": [[132, 1, 1, "", "ArrayWithGradients"]], "ivy.array.image": [[134, 1, 1, "", "ArrayWithImage"]], "ivy.array.layers": [[136, 1, 1, "", "ArrayWithLayers"]], "ivy.array.linear_algebra": [[138, 1, 1, "", "ArrayWithLinearAlgebra"]], "ivy.array.linear_algebra.ArrayWithLinearAlgebra": [[138, 3, 1, "", "cholesky"], [138, 3, 1, "", "cross"], [138, 3, 1, "", "det"], [138, 3, 1, "", "diagonal"], [138, 3, 1, "", "eigh"], [138, 3, 1, "", "eigvalsh"], [138, 3, 1, "", "inv"], [138, 3, 1, "", "matmul"], [138, 3, 1, "", "matrix_norm"], [138, 3, 1, "", "matrix_rank"], [138, 3, 1, "", "matrix_transpose"], [138, 3, 1, "", "outer"], [138, 3, 1, "", "pinv"], [138, 3, 1, "", "qr"], [138, 3, 1, "", "solve"], [138, 3, 1, "", "svd"], [138, 3, 1, "", "svdvals"], [138, 3, 1, "", "tensordot"], [138, 3, 1, "", "trace"], [138, 3, 1, "", "vecdot"], [138, 3, 1, "", "vector_norm"], [138, 3, 1, "", "vector_to_skew_symmetric_matrix"]], "ivy.array.losses": [[140, 1, 1, "", "ArrayWithLosses"]], "ivy.array.losses.ArrayWithLosses": [[140, 3, 1, "", "binary_cross_entropy"], [140, 3, 1, "", "cross_entropy"], [140, 3, 1, "", "sparse_cross_entropy"]], "ivy.array.manipulation": [[142, 1, 1, "", "ArrayWithManipulation"]], "ivy.array.manipulation.ArrayWithManipulation": [[142, 3, 1, "", "clip"], [142, 3, 1, "", "concat"], [142, 3, 1, "", "constant_pad"], [142, 3, 1, "", "expand_dims"], [142, 3, 1, "", "flip"], [142, 3, 1, "", "permute_dims"], [142, 3, 1, "", "repeat"], [142, 3, 1, "", "reshape"], [142, 3, 1, "", "roll"], [142, 3, 1, "", "squeeze"], [142, 3, 1, "", "stack"], [142, 3, 1, "", "swapaxes"], [142, 3, 1, "", "tile"], [142, 3, 1, "", "zero_pad"]], "ivy.array.norms": [[144, 1, 1, "", "ArrayWithNorms"]], "ivy.array.norms.ArrayWithNorms": [[144, 3, 1, "", "layer_norm"]], "ivy.array.random": [[146, 1, 1, "", "ArrayWithRandom"]], "ivy.array.searching": [[148, 1, 1, "", "ArrayWithSearching"]], "ivy.array.set": [[150, 1, 1, "", "ArrayWithSet"]], "ivy.array.sorting": [[152, 1, 1, "", "ArrayWithSorting"]], "ivy.array.sorting.ArrayWithSorting": [[152, 3, 1, "", "argsort"], [152, 3, 1, "", "sort"]], "ivy.array.statistical": [[154, 1, 1, "", "ArrayWithStatistical"]], "ivy.array.statistical.ArrayWithStatistical": [[154, 3, 1, "", "einsum"], [154, 3, 1, "", "max"], [154, 3, 1, "", "mean"], [154, 3, 1, "", "min"], [154, 3, 1, "", "prod"], [154, 3, 1, "", "std"], [154, 3, 1, "", "sum"], [154, 3, 1, "", "var"]], "ivy.array.utility": [[156, 1, 1, "", "ArrayWithUtility"]], "ivy.array.utility.ArrayWithUtility": [[156, 3, 1, "", "all"], [156, 3, 1, "", "any"]], "ivy.array.wrapping": [[158, 2, 1, "", "add_ivy_array_instance_methods"]], "ivy": [[159, 0, 0, "-", "backend_handler"], [385, 0, 0, "-", "func_wrapper"], [1118, 0, 0, "-", "inspection"], [1161, 0, 0, "-", "verbosity"]], "ivy.backend_handler": [[159, 1, 1, "", "ContextManager"], [161, 2, 1, "", "choose_random_backend"], [162, 2, 1, "", "clear_backend_stack"], [163, 2, 1, "", "current_backend"], [164, 2, 1, "", "get_backend"], [165, 2, 1, "", "set_backend"], [166, 2, 1, "", "try_import_ivy_jax"], [167, 2, 1, "", "try_import_ivy_mxnet"], [168, 2, 1, "", "try_import_ivy_numpy"], [169, 2, 1, "", "try_import_ivy_tf"], [170, 2, 1, "", "try_import_ivy_torch"], [171, 2, 1, "", "unset_backend"]], "ivy.backend_handler.ContextManager": [[159, 3, 1, "", "__init__"]], "ivy.container": [[176, 0, 0, "-", "activations"], [178, 0, 0, "-", "base"], [180, 0, 0, "-", "container"], [183, 0, 0, "-", "container_methods"], [308, 0, 0, "-", "creation"], [310, 0, 0, "-", "data_type"], [312, 0, 0, "-", "device"], [314, 0, 0, "-", "elementwise"], [316, 0, 0, "-", "general"], [318, 0, 0, "-", "gradients"], [320, 0, 0, "-", "image"], [322, 0, 0, "-", "layers"], [324, 0, 0, "-", "linear_algebra"], [326, 0, 0, "-", "losses"], [328, 0, 0, "-", "manipulation"], [330, 0, 0, "-", "norms"], [332, 0, 0, "-", "random"], [334, 0, 0, "-", "searching"], [336, 0, 0, "-", "set"], [338, 0, 0, "-", "sorting"], [340, 0, 0, "-", "statistical"], [342, 0, 0, "-", "utility"], [344, 0, 0, "-", "wrapping"]], "ivy.container.activations": [[177, 1, 1, "", "ContainerWithActivations"]], "ivy.container.base": [[179, 1, 1, "", "ContainerBase"]], "ivy.container.base.ContainerBase": [[179, 3, 1, "", "__getitem__"], [179, 3, 1, "", "__init__"], [179, 3, 1, "", "__setitem__"], [179, 3, 1, "", "all_false"], [179, 3, 1, "", "all_key_chains"], [179, 3, 1, "", "all_true"], [179, 3, 1, "", "arrays_as_lists"], [179, 3, 1, "", "as_arrays"], [179, 3, 1, "", "as_bools"], [179, 3, 1, "", "as_ones"], [179, 3, 1, "", "as_random_uniform"], [179, 3, 1, "", "as_variables"], [179, 3, 1, "", "as_zeros"], [179, 3, 1, "", "assert_contains_sub_container"], [179, 3, 1, "", "assert_contains_sub_structure"], [179, 3, 1, "", "assert_identical"], [179, 3, 1, "", "assert_identical_structure"], [179, 3, 1, "", "at_key_chain"], [179, 3, 1, "", "at_key_chains"], [179, 3, 1, "", "at_keys"], [179, 3, 1, "", "clip"], [179, 3, 1, "", "combine"], [179, 3, 1, "", "common_key_chains"], [179, 4, 1, "", "config"], [179, 3, 1, "", "contains_sub_container"], [179, 3, 1, "", "contains_sub_structure"], [179, 3, 1, "", "copy"], [179, 3, 1, "", "create_if_absent"], [179, 3, 1, "", "cutoff_at_depth"], [179, 3, 1, "", "cutoff_at_height"], [179, 3, 1, "", "deep_copy"], [179, 4, 1, "", "dev"], [179, 3, 1, "", "dev_clone"], [179, 3, 1, "", "dev_dist"], [179, 4, 1, "", "dev_str"], [179, 3, 1, "", "diff"], [179, 3, 1, "", "dtype"], [179, 3, 1, "", "einops_rearrange"], [179, 3, 1, "", "einops_reduce"], [179, 3, 1, "", "einops_repeat"], [179, 3, 1, "", "find_sub_container"], [179, 3, 1, "", "find_sub_structure"], [179, 3, 1, "", "flatten_key_chain"], [179, 3, 1, "", "flatten_key_chains"], [179, 3, 1, "", "format_key_chains"], [179, 3, 1, "", "from_disk_as_hdf5"], [179, 3, 1, "", "from_disk_as_json"], [179, 3, 1, "", "from_disk_as_pickled"], [179, 3, 1, "", "from_flat_list"], [179, 3, 1, "", "from_numpy"], [179, 3, 1, "", "gather"], [179, 3, 1, "", "gather_nd"], [179, 3, 1, "", "h5_file_size"], [179, 3, 1, "", "handle_inplace"], [179, 3, 1, "", "has_key"], [179, 3, 1, "", "has_key_chain"], [179, 3, 1, "", "has_nans"], [179, 3, 1, "", "identical"], [179, 3, 1, "", "identical_array_shapes"], [179, 3, 1, "", "identical_configs"], [179, 3, 1, "", "identical_structure"], [179, 3, 1, "", "if_exists"], [179, 3, 1, "", "inplace_update"], [179, 4, 1, "", "ivy"], [179, 3, 1, "", "key_chains_containing"], [179, 3, 1, "", "list_join"], [179, 3, 1, "", "list_stack"], [179, 3, 1, "", "map"], [179, 3, 1, "", "map_conts"], [179, 3, 1, "", "matrix_norm"], [179, 4, 1, "", "max_depth"], [179, 3, 1, "", "maximum"], [179, 3, 1, "", "minimum"], [179, 3, 1, "", "multi_map"], [179, 3, 1, "", "multi_map_in_static_method"], [179, 3, 1, "", "num_arrays"], [179, 3, 1, "", "overwrite_at_key_chain"], [179, 3, 1, "", "overwrite_at_key_chains"], [179, 3, 1, "", "prune_empty"], [179, 3, 1, "", "prune_key_chain"], [179, 3, 1, "", "prune_key_chains"], [179, 3, 1, "", "prune_key_from_key_chains"], [179, 3, 1, "", "prune_keys"], [179, 3, 1, "", "prune_keys_from_key_chains"], [179, 3, 1, "", "reduce"], [179, 3, 1, "", "remove_key_length_limit"], [179, 3, 1, "", "remove_print_limit"], [179, 3, 1, "", "reshape_like"], [179, 3, 1, "", "restructure"], [179, 3, 1, "", "restructure_key_chains"], [179, 3, 1, "", "set_at_key_chain"], [179, 3, 1, "", "set_at_key_chains"], [179, 3, 1, "", "set_at_keys"], [179, 3, 1, "", "set_framework"], [179, 3, 1, "", "set_ivy_backend"], [179, 4, 1, "", "shape"], [179, 4, 1, "", "shapes"], [179, 3, 1, "", "show"], [179, 3, 1, "", "show_sub_container"], [179, 3, 1, "", "shuffle"], [179, 3, 1, "", "shuffle_h5_file"], [179, 3, 1, "", "size_ordered_arrays"], [179, 3, 1, "", "slice_keys"], [179, 3, 1, "", "slice_via_key"], [179, 3, 1, "", "sort_by_key"], [179, 3, 1, "", "split"], [179, 3, 1, "", "stop_gradients"], [179, 3, 1, "", "structural_diff"], [179, 3, 1, "", "to_device"], [179, 3, 1, "", "to_dict"], [179, 3, 1, "", "to_disk_as_hdf5"], [179, 3, 1, "", "to_disk_as_json"], [179, 3, 1, "", "to_disk_as_pickled"], [179, 3, 1, "", "to_flat_list"], [179, 3, 1, "", "to_iterator"], [179, 3, 1, "", "to_iterator_keys"], [179, 3, 1, "", "to_iterator_values"], [179, 3, 1, "", "to_ivy"], [179, 3, 1, "", "to_jsonable"], [179, 3, 1, "", "to_list"], [179, 3, 1, "", "to_multi_dev"], [179, 3, 1, "", "to_native"], [179, 3, 1, "", "to_numpy"], [179, 3, 1, "", "to_raw"], [179, 3, 1, "", "trim_key"], [179, 3, 1, "", "try_kc"], [179, 3, 1, "", "unify"], [179, 3, 1, "", "unstack"], [179, 3, 1, "", "update_config"], [179, 3, 1, "", "vector_norm"], [179, 3, 1, "", "with_default_key_color"], [179, 3, 1, "", "with_entries_as_lists"], [179, 3, 1, "", "with_ivy_backend"], [179, 3, 1, "", "with_key_length_limit"], [179, 3, 1, "", "with_print_indent"], [179, 3, 1, "", "with_print_limit"], [179, 3, 1, "", "with_print_line_spacing"]], "ivy.container.container": [[181, 1, 1, "", "Container"], [182, 1, 1, "", "MultiDevContainer"]], "ivy.container.container.Container": [[181, 3, 1, "", "__add__"], [181, 3, 1, "", "__init__"], [181, 3, 1, "", "__radd__"], [181, 3, 1, "", "adam_step"], [181, 3, 1, "", "arange"], [181, 3, 1, "", "arg_info"], [181, 3, 1, "", "arg_names"], [181, 3, 1, "", "argmax"], [181, 3, 1, "", "argmin"], [181, 3, 1, "", "array"], [181, 3, 1, "", "array_equal"], [181, 3, 1, "", "arrays_equal"], [181, 3, 1, "", "as_ivy_dev"], [181, 3, 1, "", "as_ivy_dtype"], [181, 3, 1, "", "as_native_dev"], [181, 3, 1, "", "as_native_dtype"], [181, 3, 1, "", "asarray"], [181, 3, 1, "", "assert_supports_inplace"], [181, 3, 1, "", "astype"], [181, 3, 1, "", "broadcast_arrays"], [181, 3, 1, "", "broadcast_to"], [181, 3, 1, "", "cache_fn"], [181, 3, 1, "", "cholesky"], [181, 3, 1, "", "clear_mem_on_dev"], [181, 3, 1, "", "clip_matrix_norm"], [181, 3, 1, "", "closest_valid_dtype"], [181, 3, 1, "", "container_types"], [181, 3, 1, "", "conv1d"], [181, 3, 1, "", "conv1d_transpose"], [181, 3, 1, "", "conv2d"], [181, 3, 1, "", "conv2d_transpose"], [181, 3, 1, "", "conv3d"], [181, 3, 1, "", "conv3d_transpose"], [181, 3, 1, "", "copy_array"], [181, 3, 1, "", "cross"], [181, 3, 1, "", "cumprod"], [181, 3, 1, "", "cumsum"], [181, 3, 1, "", "current_backend"], [181, 3, 1, "", "current_backend_str"], [181, 3, 1, "", "default"], [181, 3, 1, "", "default_device"], [181, 3, 1, "", "default_dtype"], [181, 3, 1, "", "default_float_dtype"], [181, 3, 1, "", "default_int_dtype"], [181, 3, 1, "", "depthwise_conv2d"], [181, 3, 1, "", "det"], [181, 3, 1, "", "dev_clone_array"], [181, 3, 1, "", "dev_clone_iter"], [181, 3, 1, "", "dev_clone_nest"], [181, 3, 1, "", "dev_dist_array"], [181, 3, 1, "", "dev_dist_iter"], [181, 3, 1, "", "dev_dist_nest"], [181, 3, 1, "", "dev_unify"], [181, 3, 1, "", "dev_unify_array"], [181, 3, 1, "", "dev_unify_iter"], [181, 3, 1, "", "dev_unify_nest"], [181, 3, 1, "", "dev_util"], [181, 3, 1, "", "diagonal"], [181, 3, 1, "", "dropout"], [181, 3, 1, "", "dtype_bits"], [181, 3, 1, "", "eigh"], [181, 3, 1, "", "eigvalsh"], [181, 3, 1, "", "empty"], [181, 3, 1, "", "empty_like"], [181, 3, 1, "", "execute_with_gradients"], [181, 3, 1, "", "exists"], [181, 3, 1, "", "eye"], [181, 3, 1, "", "finfo"], [181, 3, 1, "", "floormod"], [181, 3, 1, "", "fourier_encode"], [181, 3, 1, "", "from_dlpack"], [181, 3, 1, "", "full"], [181, 3, 1, "", "full_like"], [181, 3, 1, "", "function_supported_dtypes"], [181, 3, 1, "", "function_unsupported_dtypes"], [181, 3, 1, "", "gelu"], [181, 3, 1, "", "get_all_arrays_in_memory"], [181, 3, 1, "", "get_all_ivy_arrays_on_dev"], [181, 3, 1, "", "get_min_base"], [181, 3, 1, "", "get_min_denominator"], [181, 3, 1, "", "get_num_dims"], [181, 3, 1, "", "get_referrers_recursive"], [181, 3, 1, "", "gpu_is_available"], [181, 3, 1, "", "handle_nestable"], [181, 3, 1, "", "handle_out_argument"], [181, 3, 1, "", "iinfo"], [181, 3, 1, "", "indices_where"], [181, 3, 1, "", "infer_device"], [181, 3, 1, "", "infer_dtype"], [181, 3, 1, "", "inplace_arrays_supported"], [181, 3, 1, "", "inplace_decrement"], [181, 3, 1, "", "inplace_increment"], [181, 3, 1, "", "inplace_variables_supported"], [181, 3, 1, "", "inputs_to_native_arrays"], [181, 3, 1, "", "inv"], [181, 3, 1, "", "invalid_dtype"], [181, 3, 1, "", "is_float_dtype"], [181, 3, 1, "", "is_int_dtype"], [181, 3, 1, "", "is_ivy_container"], [181, 3, 1, "", "leaky_relu"], [181, 3, 1, "", "linear"], [181, 3, 1, "", "linspace"], [181, 3, 1, "", "logspace"], [181, 3, 1, "", "lstm_update"], [181, 3, 1, "", "match_kwargs"], [181, 3, 1, "", "matrix_power"], [181, 3, 1, "", "matrix_rank"], [181, 3, 1, "", "matrix_transpose"], [181, 3, 1, "", "meshgrid"], [181, 3, 1, "", "multi_head_attention"], [181, 3, 1, "", "multinomial"], [181, 3, 1, "", "multiprocessing"], [181, 3, 1, "", "native_array"], [181, 3, 1, "", "nonzero"], [181, 3, 1, "", "num_arrays_in_memory"], [181, 3, 1, "", "num_cpu_cores"], [181, 3, 1, "", "num_gpus"], [181, 3, 1, "", "num_ivy_arrays_on_dev"], [181, 3, 1, "", "one_hot"], [181, 3, 1, "", "ones"], [181, 3, 1, "", "ones_like"], [181, 3, 1, "", "outer"], [181, 3, 1, "", "outputs_to_ivy_arrays"], [181, 3, 1, "", "percent_used_mem_on_dev"], [181, 3, 1, "", "pinv"], [181, 3, 1, "", "print_all_arrays_in_memory"], [181, 3, 1, "", "print_all_ivy_arrays_on_dev"], [181, 3, 1, "", "promote_types"], [181, 3, 1, "", "qr"], [181, 3, 1, "", "queue_timeout"], [181, 3, 1, "", "randint"], [181, 3, 1, "", "random_normal"], [181, 3, 1, "", "relu"], [181, 3, 1, "", "result_type"], [181, 3, 1, "", "scaled_dot_product_attention"], [181, 3, 1, "", "scatter_flat"], [181, 3, 1, "", "scatter_nd"], [181, 3, 1, "", "seed"], [181, 3, 1, "", "set_default_device"], [181, 3, 1, "", "set_default_dtype"], [181, 3, 1, "", "set_default_float_dtype"], [181, 3, 1, "", "set_default_int_dtype"], [181, 3, 1, "", "set_min_base"], [181, 3, 1, "", "set_min_denominator"], [181, 3, 1, "", "set_queue_timeout"], [181, 3, 1, "", "set_split_factor"], [181, 3, 1, "", "set_tmp_dir"], [181, 3, 1, "", "set_with_grads"], [181, 3, 1, "", "shape_to_tuple"], [181, 3, 1, "", "sigmoid"], [181, 3, 1, "", "slogdet"], [181, 3, 1, "", "softmax"], [181, 3, 1, "", "softplus"], [181, 3, 1, "", "solve"], [181, 3, 1, "", "split_factor"], [181, 3, 1, "", "split_func_call"], [181, 3, 1, "", "stable_divide"], [181, 3, 1, "", "stable_pow"], [181, 3, 1, "", "static_abs"], [181, 3, 1, "", "static_acos"], [181, 3, 1, "", "static_acosh"], [181, 3, 1, "", "static_adam_step"], [181, 3, 1, "", "static_all"], [181, 3, 1, "", "static_any"], [181, 3, 1, "", "static_arange"], [181, 3, 1, "", "static_arg_info"], [181, 3, 1, "", "static_arg_names"], [181, 3, 1, "", "static_argmax"], [181, 3, 1, "", "static_argmin"], [181, 3, 1, "", "static_array"], [181, 3, 1, "", "static_array_equal"], [181, 3, 1, "", "static_arrays_equal"], [181, 3, 1, "", "static_as_ivy_dev"], [181, 3, 1, "", "static_as_ivy_dtype"], [181, 3, 1, "", "static_as_native_dev"], [181, 3, 1, "", "static_as_native_dtype"], [181, 3, 1, "", "static_asarray"], [181, 3, 1, "", "static_asin"], [181, 3, 1, "", "static_asinh"], [181, 3, 1, "", "static_assert_supports_inplace"], [181, 3, 1, "", "static_astype"], [181, 3, 1, "", "static_atan"], [181, 3, 1, "", "static_atan2"], [181, 3, 1, "", "static_atanh"], [181, 3, 1, "", "static_bitwise_and"], [181, 3, 1, "", "static_bitwise_invert"], [181, 3, 1, "", "static_bitwise_left_shift"], [181, 3, 1, "", "static_bitwise_or"], [181, 3, 1, "", "static_bitwise_right_shift"], [181, 3, 1, "", "static_bitwise_xor"], [181, 3, 1, "", "static_broadcast_arrays"], [181, 3, 1, "", "static_broadcast_to"], [181, 3, 1, "", "static_cache_fn"], [181, 3, 1, "", "static_ceil"], [181, 3, 1, "", "static_cholesky"], [181, 3, 1, "", "static_clear_mem_on_dev"], [181, 3, 1, "", "static_clip_matrix_norm"], [181, 3, 1, "", "static_clip_vector_norm"], [181, 3, 1, "", "static_closest_valid_dtype"], [181, 3, 1, "", "static_concat"], [181, 3, 1, "", "static_constant_pad"], [181, 3, 1, "", "static_container_types"], [181, 3, 1, "", "static_conv1d"], [181, 3, 1, "", "static_conv1d_transpose"], [181, 3, 1, "", "static_conv2d"], [181, 3, 1, "", "static_conv2d_transpose"], [181, 3, 1, "", "static_conv3d"], [181, 3, 1, "", "static_conv3d_transpose"], [181, 3, 1, "", "static_copy_array"], [181, 3, 1, "", "static_cos"], [181, 3, 1, "", "static_cosh"], [181, 3, 1, "", "static_cross"], [181, 3, 1, "", "static_cumprod"], [181, 3, 1, "", "static_cumsum"], [181, 3, 1, "", "static_current_backend"], [181, 3, 1, "", "static_current_backend_str"], [181, 3, 1, "", "static_default"], [181, 3, 1, "", "static_default_device"], [181, 3, 1, "", "static_default_dtype"], [181, 3, 1, "", "static_default_float_dtype"], [181, 3, 1, "", "static_default_int_dtype"], [181, 3, 1, "", "static_depthwise_conv2d"], [181, 3, 1, "", "static_det"], [181, 3, 1, "", "static_dev"], [181, 3, 1, "", "static_dev_clone"], [181, 3, 1, "", "static_dev_clone_array"], [181, 3, 1, "", "static_dev_clone_iter"], [181, 3, 1, "", "static_dev_clone_nest"], [181, 3, 1, "", "static_dev_dist"], [181, 3, 1, "", "static_dev_dist_array"], [181, 3, 1, "", "static_dev_dist_iter"], [181, 3, 1, "", "static_dev_dist_nest"], [181, 3, 1, "", "static_dev_unify"], [181, 3, 1, "", "static_dev_unify_array"], [181, 3, 1, "", "static_dev_unify_iter"], [181, 3, 1, "", "static_dev_unify_nest"], [181, 3, 1, "", "static_dev_util"], [181, 3, 1, "", "static_diagonal"], [181, 3, 1, "", "static_dropout"], [181, 3, 1, "", "static_dtype"], [181, 3, 1, "", "static_dtype_bits"], [181, 3, 1, "", "static_eigh"], [181, 3, 1, "", "static_eigvalsh"], [181, 3, 1, "", "static_einops_rearrange"], [181, 3, 1, "", "static_einops_reduce"], [181, 3, 1, "", "static_einops_repeat"], [181, 3, 1, "", "static_einsum"], [181, 3, 1, "", "static_empty"], [181, 3, 1, "", "static_empty_like"], [181, 3, 1, "", "static_equal"], [181, 3, 1, "", "static_erf"], [181, 3, 1, "", "static_execute_with_gradients"], [181, 3, 1, "", "static_exists"], [181, 3, 1, "", "static_exp"], [181, 3, 1, "", "static_expand_dims"], [181, 3, 1, "", "static_expm1"], [181, 3, 1, "", "static_eye"], [181, 3, 1, "", "static_finfo"], [181, 3, 1, "", "static_flip"], [181, 3, 1, "", "static_floor"], [181, 3, 1, "", "static_floor_divide"], [181, 3, 1, "", "static_floormod"], [181, 3, 1, "", "static_fourier_encode"], [181, 3, 1, "", "static_from_dlpack"], [181, 3, 1, "", "static_full"], [181, 3, 1, "", "static_full_like"], [181, 3, 1, "", "static_function_supported_dtypes"], [181, 3, 1, "", "static_function_unsupported_dtypes"], [181, 3, 1, "", "static_gather"], [181, 3, 1, "", "static_gelu"], [181, 3, 1, "", "static_get_all_arrays_in_memory"], [181, 3, 1, "", "static_get_all_ivy_arrays_on_dev"], [181, 3, 1, "", "static_get_min_base"], [181, 3, 1, "", "static_get_min_denominator"], [181, 3, 1, "", "static_get_num_dims"], [181, 3, 1, "", "static_get_referrers_recursive"], [181, 3, 1, "", "static_gpu_is_available"], [181, 3, 1, "", "static_greater"], [181, 3, 1, "", "static_greater_equal"], [181, 3, 1, "", "static_handle_nestable"], [181, 3, 1, "", "static_handle_out_argument"], [181, 3, 1, "", "static_has_nans"], [181, 3, 1, "", "static_iinfo"], [181, 3, 1, "", "static_indices_where"], [181, 3, 1, "", "static_infer_device"], [181, 3, 1, "", "static_infer_dtype"], [181, 3, 1, "", "static_inplace_arrays_supported"], [181, 3, 1, "", "static_inplace_decrement"], [181, 3, 1, "", "static_inplace_increment"], [181, 3, 1, "", "static_inplace_update"], [181, 3, 1, "", "static_inplace_variables_supported"], [181, 3, 1, "", "static_inputs_to_native_arrays"], [181, 3, 1, "", "static_inv"], [181, 3, 1, "", "static_invalid_dtype"], [181, 3, 1, "", "static_is_array"], [181, 3, 1, "", "static_is_float_dtype"], [181, 3, 1, "", "static_is_int_dtype"], [181, 3, 1, "", "static_is_ivy_array"], [181, 3, 1, "", "static_is_ivy_container"], [181, 3, 1, "", "static_is_native_array"], [181, 3, 1, "", "static_is_variable"], [181, 3, 1, "", "static_isfinite"], [181, 3, 1, "", "static_isinf"], [181, 3, 1, "", "static_isnan"], [181, 3, 1, "", "static_layer_norm"], [181, 3, 1, "", "static_leaky_relu"], [181, 3, 1, "", "static_less"], [181, 3, 1, "", "static_less_equal"], [181, 3, 1, "", "static_linear"], [181, 3, 1, "", "static_linspace"], [181, 3, 1, "", "static_log"], [181, 3, 1, "", "static_log10"], [181, 3, 1, "", "static_log1p"], [181, 3, 1, "", "static_log2"], [181, 3, 1, "", "static_logaddexp"], [181, 3, 1, "", "static_logical_and"], [181, 3, 1, "", "static_logical_not"], [181, 3, 1, "", "static_logical_or"], [181, 3, 1, "", "static_logical_xor"], [181, 3, 1, "", "static_logspace"], [181, 3, 1, "", "static_lstm_update"], [181, 3, 1, "", "static_match_kwargs"], [181, 3, 1, "", "static_matmul"], [181, 3, 1, "", "static_matrix_norm"], [181, 3, 1, "", "static_matrix_power"], [181, 3, 1, "", "static_matrix_rank"], [181, 3, 1, "", "static_matrix_transpose"], [181, 3, 1, "", "static_max"], [181, 3, 1, "", "static_maximum"], [181, 3, 1, "", "static_mean"], [181, 3, 1, "", "static_meshgrid"], [181, 3, 1, "", "static_min"], [181, 3, 1, "", "static_minimum"], [181, 3, 1, "", "static_multi_head_attention"], [181, 3, 1, "", "static_multinomial"], [181, 3, 1, "", "static_multiprocessing"], [181, 3, 1, "", "static_native_array"], [181, 3, 1, "", "static_negative"], [181, 3, 1, "", "static_nonzero"], [181, 3, 1, "", "static_not_equal"], [181, 3, 1, "", "static_num_arrays_in_memory"], [181, 3, 1, "", "static_num_cpu_cores"], [181, 3, 1, "", "static_num_gpus"], [181, 3, 1, "", "static_num_ivy_arrays_on_dev"], [181, 3, 1, "", "static_one_hot"], [181, 3, 1, "", "static_ones"], [181, 3, 1, "", "static_ones_like"], [181, 3, 1, "", "static_outer"], [181, 3, 1, "", "static_outputs_to_ivy_arrays"], [181, 3, 1, "", "static_percent_used_mem_on_dev"], [181, 3, 1, "", "static_permute_dims"], [181, 3, 1, "", "static_pinv"], [181, 3, 1, "", "static_positive"], [181, 3, 1, "", "static_pow"], [181, 3, 1, "", "static_print_all_arrays_in_memory"], [181, 3, 1, "", "static_print_all_ivy_arrays_on_dev"], [181, 3, 1, "", "static_prod"], [181, 3, 1, "", "static_promote_types"], [181, 3, 1, "", "static_qr"], [181, 3, 1, "", "static_queue_timeout"], [181, 3, 1, "", "static_random_normal"], [181, 3, 1, "", "static_relu"], [181, 3, 1, "", "static_remainder"], [181, 3, 1, "", "static_repeat"], [181, 3, 1, "", "static_reshape"], [181, 3, 1, "", "static_result_type"], [181, 3, 1, "", "static_round"], [181, 3, 1, "", "static_scaled_dot_product_attention"], [181, 3, 1, "", "static_scatter_flat"], [181, 3, 1, "", "static_scatter_nd"], [181, 3, 1, "", "static_seed"], [181, 3, 1, "", "static_set_default_device"], [181, 3, 1, "", "static_set_default_dtype"], [181, 3, 1, "", "static_set_default_float_dtype"], [181, 3, 1, "", "static_set_default_int_dtype"], [181, 3, 1, "", "static_set_min_base"], [181, 3, 1, "", "static_set_min_denominator"], [181, 3, 1, "", "static_set_queue_timeout"], [181, 3, 1, "", "static_set_split_factor"], [181, 3, 1, "", "static_set_tmp_dir"], [181, 3, 1, "", "static_set_with_grads"], [181, 3, 1, "", "static_shape"], [181, 3, 1, "", "static_shape_to_tuple"], [181, 3, 1, "", "static_shuffle"], [181, 3, 1, "", "static_sigmoid"], [181, 3, 1, "", "static_sign"], [181, 3, 1, "", "static_sin"], [181, 3, 1, "", "static_sinh"], [181, 3, 1, "", "static_slogdet"], [181, 3, 1, "", "static_softmax"], [181, 3, 1, "", "static_softplus"], [181, 3, 1, "", "static_solve"], [181, 3, 1, "", "static_split"], [181, 3, 1, "", "static_split_factor"], [181, 3, 1, "", "static_split_func_call"], [181, 3, 1, "", "static_sqrt"], [181, 3, 1, "", "static_square"], [181, 3, 1, "", "static_squeeze"], [181, 3, 1, "", "static_stable_divide"], [181, 3, 1, "", "static_stable_pow"], [181, 3, 1, "", "static_stack"], [181, 3, 1, "", "static_std"], [181, 3, 1, "", "static_stop_gradient"], [181, 3, 1, "", "static_sum"], [181, 3, 1, "", "static_supports_inplace"], [181, 3, 1, "", "static_svd"], [181, 3, 1, "", "static_svdvals"], [181, 3, 1, "", "static_swapaxes"], [181, 3, 1, "", "static_tensordot"], [181, 3, 1, "", "static_tile"], [181, 3, 1, "", "static_tmp_dir"], [181, 3, 1, "", "static_to_device"], [181, 3, 1, "", "static_to_list"], [181, 3, 1, "", "static_to_native_arrays_and_back"], [181, 3, 1, "", "static_to_numpy"], [181, 3, 1, "", "static_to_scalar"], [181, 3, 1, "", "static_total_mem_on_dev"], [181, 3, 1, "", "static_tpu_is_available"], [181, 3, 1, "", "static_trace"], [181, 3, 1, "", "static_tril"], [181, 3, 1, "", "static_triu"], [181, 3, 1, "", "static_trunc"], [181, 3, 1, "", "static_try_else_none"], [181, 3, 1, "", "static_type_promote_arrays"], [181, 3, 1, "", "static_unique_all"], [181, 3, 1, "", "static_unique_counts"], [181, 3, 1, "", "static_unique_inverse"], [181, 3, 1, "", "static_unique_values"], [181, 3, 1, "", "static_unset_default_device"], [181, 3, 1, "", "static_unset_default_dtype"], [181, 3, 1, "", "static_unset_default_float_dtype"], [181, 3, 1, "", "static_unset_default_int_dtype"], [181, 3, 1, "", "static_unset_with_grads"], [181, 3, 1, "", "static_unstack"], [181, 3, 1, "", "static_used_mem_on_dev"], [181, 3, 1, "", "static_valid_dtype"], [181, 3, 1, "", "static_value_is_nan"], [181, 3, 1, "", "static_var"], [181, 3, 1, "", "static_variable"], [181, 3, 1, "", "static_variable_data"], [181, 3, 1, "", "static_vecdot"], [181, 3, 1, "", "static_vector_norm"], [181, 3, 1, "", "static_vector_to_skew_symmetric_matrix"], [181, 3, 1, "", "static_where"], [181, 3, 1, "", "static_with_grads"], [181, 3, 1, "", "static_zero_pad"], [181, 3, 1, "", "static_zeros"], [181, 3, 1, "", "static_zeros_like"], [181, 3, 1, "", "stop_gradient"], [181, 3, 1, "", "supports_inplace"], [181, 3, 1, "", "svd"], [181, 3, 1, "", "svdvals"], [181, 3, 1, "", "tensordot"], [181, 3, 1, "", "tmp_dir"], [181, 3, 1, "", "to_native_arrays_and_back"], [181, 3, 1, "", "to_scalar"], [181, 3, 1, "", "total_mem_on_dev"], [181, 3, 1, "", "tpu_is_available"], [181, 3, 1, "", "trace"], [181, 3, 1, "", "tril"], [181, 3, 1, "", "triu"], [181, 3, 1, "", "try_else_none"], [181, 3, 1, "", "type_promote_arrays"], [181, 3, 1, "", "unique_all"], [181, 3, 1, "", "unique_counts"], [181, 3, 1, "", "unique_inverse"], [181, 3, 1, "", "unique_values"], [181, 3, 1, "", "unset_default_device"], [181, 3, 1, "", "unset_default_dtype"], [181, 3, 1, "", "unset_default_float_dtype"], [181, 3, 1, "", "unset_default_int_dtype"], [181, 3, 1, "", "unset_with_grads"], [181, 3, 1, "", "used_mem_on_dev"], [181, 3, 1, "", "valid_dtype"], [181, 3, 1, "", "value_is_nan"], [181, 3, 1, "", "variable"], [181, 3, 1, "", "variable_data"], [181, 3, 1, "", "vecdot"], [181, 3, 1, "", "vector_to_skew_symmetric_matrix"], [181, 3, 1, "", "where"], [181, 3, 1, "", "with_grads"], [181, 3, 1, "", "zeros"], [181, 3, 1, "", "zeros_like"]], "ivy.container.container.MultiDevContainer": [[182, 3, 1, "", "__init__"], [182, 3, 1, "", "at_dev"], [182, 3, 1, "", "at_devs"]], "ivy.container.container_methods": [[183, 2, 1, "", "__add__"], [183, 2, 1, "", "__init__"], [183, 2, 1, "", "__radd__"], [515, 2, 1, "", "abs"], [521, 2, 1, "", "acos"], [585, 2, 1, "", "acosh"], [827, 2, 1, "", "adam_update"], [659, 2, 1, "", "add"], [189, 2, 1, "", "add_ivy_container_instance_methods"], [1109, 2, 1, "", "all"], [752, 2, 1, "", "all_equal"], [1113, 2, 1, "", "any"], [1065, 2, 1, "", "argsort"], [532, 2, 1, "", "asin"], [536, 2, 1, "", "asinh"], [196, 2, 1, "", "at_dev"], [197, 2, 1, "", "at_devs"], [546, 2, 1, "", "atan"], [544, 2, 1, "", "atan2"], [744, 2, 1, "", "atanh"], [940, 2, 1, "", "binary_cross_entropy"], [552, 2, 1, "", "bitwise_and"], [556, 2, 1, "", "bitwise_invert"], [560, 2, 1, "", "bitwise_left_shift"], [564, 2, 1, "", "bitwise_or"], [568, 2, 1, "", "bitwise_right_shift"], [572, 2, 1, "", "bitwise_xor"], [436, 2, 1, "", "can_cast"], [576, 2, 1, "", "ceil"], [956, 2, 1, "", "clip"], [763, 2, 1, "", "clip_vector_norm"], [961, 2, 1, "", "concat"], [965, 2, 1, "", "constant_pad"], [585, 2, 1, "", "cos"], [584, 2, 1, "", "cosh"], [945, 2, 1, "", "cross_entropy"], [611, 2, 1, "", "divide"], [1101, 2, 1, "", "einsum"], [619, 2, 1, "", "equal"], [597, 2, 1, "", "erf"], [659, 2, 1, "", "exp"], [969, 2, 1, "", "expand_dims"], [605, 2, 1, "", "expm1"], [973, 2, 1, "", "flip"], [611, 2, 1, "", "floor"], [613, 2, 1, "", "floor_divide"], [780, 2, 1, "", "gather_nd"], [832, 2, 1, "", "gradient_descent_update"], [619, 2, 1, "", "greater"], [621, 2, 1, "", "greater_equal"], [625, 2, 1, "", "isfinite"], [629, 2, 1, "", "isinf"], [633, 2, 1, "", "isnan"], [837, 2, 1, "", "lamb_update"], [841, 2, 1, "", "lars_update"], [1038, 2, 1, "", "layer_norm"], [637, 2, 1, "", "less"], [641, 2, 1, "", "less_equal"], [645, 2, 1, "", "log"], [649, 2, 1, "", "log10"], [653, 2, 1, "", "log1p"], [657, 2, 1, "", "log2"], [661, 2, 1, "", "logaddexp"], [665, 2, 1, "", "logical_and"], [669, 2, 1, "", "logical_not"], [673, 2, 1, "", "logical_or"], [677, 2, 1, "", "logical_xor"], [891, 2, 1, "", "matmul"], [1080, 2, 1, "", "max"], [1084, 2, 1, "", "mean"], [1088, 2, 1, "", "min"], [683, 2, 1, "", "multiply"], [688, 2, 1, "", "negative"], [692, 2, 1, "", "not_equal"], [845, 2, 1, "", "optimizer_update"], [977, 2, 1, "", "permute_dims"], [696, 2, 1, "", "positive"], [700, 2, 1, "", "pow"], [1092, 2, 1, "", "prod"], [1047, 2, 1, "", "random_uniform"], [704, 2, 1, "", "remainder"], [981, 2, 1, "", "repeat"], [985, 2, 1, "", "reshape"], [989, 2, 1, "", "roll"], [708, 2, 1, "", "round"], [712, 2, 1, "", "sign"], [716, 2, 1, "", "sin"], [720, 2, 1, "", "sinh"], [1070, 2, 1, "", "sort"], [950, 2, 1, "", "sparse_cross_entropy"], [724, 2, 1, "", "sqrt"], [728, 2, 1, "", "square"], [995, 2, 1, "", "squeeze"], [999, 2, 1, "", "stack"], [829, 2, 1, "", "static_adam_update"], [659, 2, 1, "", "static_add"], [754, 2, 1, "", "static_all_equal"], [1067, 2, 1, "", "static_argsort"], [942, 2, 1, "", "static_binary_cross_entropy"], [438, 2, 1, "", "static_can_cast"], [958, 2, 1, "", "static_clip"], [947, 2, 1, "", "static_cross_entropy"], [611, 2, 1, "", "static_divide"], [782, 2, 1, "", "static_gather_nd"], [834, 2, 1, "", "static_gradient_descent_update"], [839, 2, 1, "", "static_lamb_update"], [843, 2, 1, "", "static_lars_update"], [685, 2, 1, "", "static_multiply"], [847, 2, 1, "", "static_optimizer_update"], [1044, 2, 1, "", "static_randint"], [1049, 2, 1, "", "static_random_uniform"], [991, 2, 1, "", "static_roll"], [1072, 2, 1, "", "static_sort"], [952, 2, 1, "", "static_sparse_cross_entropy"], [731, 2, 1, "", "static_subtract"], [744, 2, 1, "", "static_tan"], [741, 2, 1, "", "static_tanh"], [1096, 2, 1, "", "std"], [733, 2, 1, "", "subtract"], [1100, 2, 1, "", "sum"], [1003, 2, 1, "", "swapaxes"], [744, 2, 1, "", "tan"], [743, 2, 1, "", "tanh"], [1007, 2, 1, "", "tile"], [747, 2, 1, "", "trunc"], [1104, 2, 1, "", "var"], [1011, 2, 1, "", "zero_pad"]], "ivy.container.creation": [[309, 1, 1, "", "ContainerWithCreation"]], "ivy.container.data_type": [[311, 1, 1, "", "ContainerWithDataTypes"]], "ivy.container.data_type.ContainerWithDataTypes": [[311, 3, 1, "", "can_cast"], [311, 3, 1, "", "static_can_cast"]], "ivy.container.device": [[313, 1, 1, "", "ContainerWithDevice"]], "ivy.container.elementwise": [[315, 1, 1, "", "ContainerWithElementwise"]], "ivy.container.elementwise.ContainerWithElementwise": [[315, 3, 1, "", "abs"], [315, 3, 1, "", "acos"], [315, 3, 1, "", "acosh"], [315, 3, 1, "", "add"], [315, 3, 1, "", "asin"], [315, 3, 1, "", "asinh"], [315, 3, 1, "", "atan"], [315, 3, 1, "", "atan2"], [315, 3, 1, "", "atanh"], [315, 3, 1, "", "bitwise_and"], [315, 3, 1, "", "bitwise_invert"], [315, 3, 1, "", "bitwise_left_shift"], [315, 3, 1, "", "bitwise_or"], [315, 3, 1, "", "bitwise_right_shift"], [315, 3, 1, "", "bitwise_xor"], [315, 3, 1, "", "ceil"], [315, 3, 1, "", "cos"], [315, 3, 1, "", "cosh"], [315, 3, 1, "", "divide"], [315, 3, 1, "", "equal"], [315, 3, 1, "", "erf"], [315, 3, 1, "", "exp"], [315, 3, 1, "", "expm1"], [315, 3, 1, "", "floor"], [315, 3, 1, "", "floor_divide"], [315, 3, 1, "", "greater"], [315, 3, 1, "", "greater_equal"], [315, 3, 1, "", "isfinite"], [315, 3, 1, "", "isinf"], [315, 3, 1, "", "isnan"], [315, 3, 1, "", "less"], [315, 3, 1, "", "less_equal"], [315, 3, 1, "", "log"], [315, 3, 1, "", "log10"], [315, 3, 1, "", "log1p"], [315, 3, 1, "", "log2"], [315, 3, 1, "", "logaddexp"], [315, 3, 1, "", "logical_and"], [315, 3, 1, "", "logical_not"], [315, 3, 1, "", "logical_or"], [315, 3, 1, "", "logical_xor"], [315, 3, 1, "", "multiply"], [315, 3, 1, "", "negative"], [315, 3, 1, "", "not_equal"], [315, 3, 1, "", "positive"], [315, 3, 1, "", "pow"], [315, 3, 1, "", "remainder"], [315, 3, 1, "", "round"], [315, 3, 1, "", "sign"], [315, 3, 1, "", "sin"], [315, 3, 1, "", "sinh"], [315, 3, 1, "", "sqrt"], [315, 3, 1, "", "square"], [315, 3, 1, "", "static_add"], [315, 3, 1, "", "static_divide"], [315, 3, 1, "", "static_multiply"], [315, 3, 1, "", "static_subtract"], [315, 3, 1, "", "static_tan"], [315, 3, 1, "", "static_tanh"], [315, 3, 1, "", "subtract"], [315, 3, 1, "", "tan"], [315, 3, 1, "", "tanh"], [315, 3, 1, "", "trunc"]], "ivy.container.general": [[317, 1, 1, "", "ContainerWithGeneral"]], "ivy.container.general.ContainerWithGeneral": [[317, 3, 1, "", "all_equal"], [317, 3, 1, "", "clip_vector_norm"], [317, 3, 1, "", "gather_nd"], [317, 3, 1, "", "static_all_equal"], [317, 3, 1, "", "static_gather_nd"]], "ivy.container.gradients": [[319, 1, 1, "", "ContainerWithGradients"]], "ivy.container.gradients.ContainerWithGradients": [[319, 3, 1, "", "adam_update"], [319, 3, 1, "", "gradient_descent_update"], [319, 3, 1, "", "lamb_update"], [319, 3, 1, "", "lars_update"], [319, 3, 1, "", "optimizer_update"], [319, 3, 1, "", "static_adam_update"], [319, 3, 1, "", "static_gradient_descent_update"], [319, 3, 1, "", "static_lamb_update"], [319, 3, 1, "", "static_lars_update"], [319, 3, 1, "", "static_optimizer_update"]], "ivy.container.image": [[321, 1, 1, "", "ContainerWithImage"]], "ivy.container.layers": [[323, 1, 1, "", "ContainerWithLayers"]], "ivy.container.linear_algebra": [[325, 1, 1, "", "ContainerWithLinearAlgebra"]], "ivy.container.linear_algebra.ContainerWithLinearAlgebra": [[325, 3, 1, "", "matmul"]], "ivy.container.losses": [[327, 1, 1, "", "ContainerWithLosses"]], "ivy.container.losses.ContainerWithLosses": [[327, 3, 1, "", "binary_cross_entropy"], [327, 3, 1, "", "cross_entropy"], [327, 3, 1, "", "sparse_cross_entropy"], [327, 3, 1, "", "static_binary_cross_entropy"], [327, 3, 1, "", "static_cross_entropy"], [327, 3, 1, "", "static_sparse_cross_entropy"]], "ivy.container.manipulation": [[329, 1, 1, "", "ContainerWithManipulation"]], "ivy.container.manipulation.ContainerWithManipulation": [[329, 3, 1, "", "clip"], [329, 3, 1, "", "concat"], [329, 3, 1, "", "constant_pad"], [329, 3, 1, "", "expand_dims"], [329, 3, 1, "", "flip"], [329, 3, 1, "", "permute_dims"], [329, 3, 1, "", "repeat"], [329, 3, 1, "", "reshape"], [329, 3, 1, "", "roll"], [329, 3, 1, "", "squeeze"], [329, 3, 1, "", "stack"], [329, 3, 1, "", "static_clip"], [329, 3, 1, "", "static_roll"], [329, 3, 1, "", "swapaxes"], [329, 3, 1, "", "tile"], [329, 3, 1, "", "zero_pad"]], "ivy.container.norms": [[331, 1, 1, "", "ContainerWithNorms"]], "ivy.container.norms.ContainerWithNorms": [[331, 3, 1, "", "layer_norm"]], "ivy.container.random": [[333, 1, 1, "", "ContainerWithRandom"]], "ivy.container.random.ContainerWithRandom": [[333, 3, 1, "", "random_uniform"], [333, 3, 1, "", "static_randint"], [333, 3, 1, "", "static_random_uniform"]], "ivy.container.searching": [[335, 1, 1, "", "ContainerWithSearching"]], "ivy.container.set": [[337, 1, 1, "", "ContainerWithSet"]], "ivy.container.sorting": [[339, 1, 1, "", "ContainerWithSorting"]], "ivy.container.sorting.ContainerWithSorting": [[339, 3, 1, "", "argsort"], [339, 3, 1, "", "sort"], [339, 3, 1, "", "static_argsort"], [339, 3, 1, "", "static_sort"]], "ivy.container.statistical": [[341, 1, 1, "", "ContainerWithStatistical"]], "ivy.container.statistical.ContainerWithStatistical": [[341, 3, 1, "", "einsum"], [341, 3, 1, "", "max"], [341, 3, 1, "", "mean"], [341, 3, 1, "", "min"], [341, 3, 1, "", "prod"], [341, 3, 1, "", "std"], [341, 3, 1, "", "sum"], [341, 3, 1, "", "var"]], "ivy.container.utility": [[343, 1, 1, "", "ContainerWithUtility"]], "ivy.container.utility.ContainerWithUtility": [[343, 3, 1, "", "all"], [343, 3, 1, "", "any"]], "ivy.container.wrapping": [[345, 2, 1, "", "add_ivy_container_instance_methods"]], "ivy.func_wrapper": [[386, 2, 1, "", "handle_nestable"], [387, 2, 1, "", "handle_out_argument"], [388, 2, 1, "", "infer_device"], [389, 2, 1, "", "infer_dtype"], [390, 2, 1, "", "inputs_to_ivy_arrays"], [391, 2, 1, "", "inputs_to_native_arrays"], [392, 2, 1, "", "outputs_to_ivy_arrays"], [393, 2, 1, "", "to_native_arrays_and_back"]], "ivy.functional.ivy": [[395, 0, 0, "-", "activations"], [403, 0, 0, "-", "compilation"], [405, 0, 0, "-", "constants"], [406, 0, 0, "-", "creation"], [425, 0, 0, "-", "data_type"], [462, 0, 0, "-", "device"], [512, 0, 0, "-", "elementwise"], [749, 0, 0, "-", "general"], [823, 0, 0, "-", "gradients"], [854, 0, 0, "-", "layers"], [867, 0, 0, "-", "linear_algebra"], [937, 0, 0, "-", "losses"], [953, 0, 0, "-", "manipulation"], [1013, 0, 0, "-", "meta"], [1017, 0, 0, "-", "nest"], [1035, 0, 0, "-", "norms"], [1040, 0, 0, "-", "random"], [1052, 0, 0, "-", "searching"], [1057, 0, 0, "-", "set"], [1062, 0, 0, "-", "sorting"], [1073, 0, 0, "-", "statistical"], [1106, 0, 0, "-", "utility"]], "ivy.functional.ivy.activations": [[396, 2, 1, "", "gelu"], [397, 2, 1, "", "leaky_relu"], [398, 2, 1, "", "relu"], [399, 2, 1, "", "sigmoid"], [400, 2, 1, "", "softmax"], [401, 2, 1, "", "softplus"], [402, 2, 1, "", "tanh"]], "ivy.functional.ivy.compilation": [[404, 2, 1, "", "compile"]], "ivy.functional.ivy.constants": [[405, 5, 1, "", "e"], [405, 5, 1, "", "inf"], [405, 5, 1, "", "nan"], [405, 5, 1, "", "newaxis"], [405, 5, 1, "", "pi"]], "ivy.functional.ivy.creation": [[407, 2, 1, "", "arange"], [406, 2, 1, "", "array"], [408, 2, 1, "", "asarray"], [409, 2, 1, "", "empty"], [410, 2, 1, "", "empty_like"], [411, 2, 1, "", "eye"], [412, 2, 1, "", "from_dlpack"], [413, 2, 1, "", "full"], [414, 2, 1, "", "full_like"], [415, 2, 1, "", "linspace"], [416, 2, 1, "", "logspace"], [417, 2, 1, "", "meshgrid"], [418, 2, 1, "", "native_array"], [419, 2, 1, "", "ones"], [420, 2, 1, "", "ones_like"], [421, 2, 1, "", "tril"], [422, 2, 1, "", "triu"], [423, 2, 1, "", "zeros"], [424, 2, 1, "", "zeros_like"]], "ivy.functional.ivy.data_type": [[425, 1, 1, "", "DefaultDtype"], [425, 1, 1, "", "DefaultFloatDtype"], [425, 1, 1, "", "DefaultIntDtype"], [429, 2, 1, "", "as_ivy_dtype"], [430, 2, 1, "", "as_native_dtype"], [431, 2, 1, "", "astype"], [432, 2, 1, "", "broadcast_arrays"], [433, 2, 1, "", "broadcast_to"], [437, 2, 1, "", "can_cast"], [439, 2, 1, "", "closest_valid_dtype"], [440, 2, 1, "", "default_dtype"], [441, 2, 1, "", "default_float_dtype"], [442, 2, 1, "", "default_int_dtype"], [443, 2, 1, "", "dtype"], [444, 2, 1, "", "dtype_bits"], [445, 2, 1, "", "finfo"], [446, 2, 1, "", "function_supported_dtypes"], [447, 2, 1, "", "function_unsupported_dtypes"], [448, 2, 1, "", "iinfo"], [449, 2, 1, "", "invalid_dtype"], [450, 2, 1, "", "is_float_dtype"], [451, 2, 1, "", "is_int_dtype"], [452, 2, 1, "", "promote_types"], [453, 2, 1, "", "result_type"], [454, 2, 1, "", "set_default_dtype"], [455, 2, 1, "", "set_default_float_dtype"], [456, 2, 1, "", "set_default_int_dtype"], [457, 2, 1, "", "type_promote_arrays"], [458, 2, 1, "", "unset_default_dtype"], [459, 2, 1, "", "unset_default_float_dtype"], [460, 2, 1, "", "unset_default_int_dtype"], [461, 2, 1, "", "valid_dtype"]], "ivy.functional.ivy.data_type.DefaultDtype": [[425, 3, 1, "", "__init__"]], "ivy.functional.ivy.data_type.DefaultFloatDtype": [[425, 3, 1, "", "__init__"]], "ivy.functional.ivy.data_type.DefaultIntDtype": [[425, 3, 1, "", "__init__"]], "ivy.functional.ivy.device": [[462, 1, 1, "", "DefaultDevice"], [464, 1, 1, "", "DevClonedItem"], [465, 1, 1, "", "DevClonedIter"], [466, 1, 1, "", "DevClonedNest"], [467, 1, 1, "", "DevDistItem"], [468, 1, 1, "", "DevDistIter"], [469, 1, 1, "", "DevDistNest"], [462, 1, 1, "", "DevManager"], [471, 1, 1, "", "DevMapper"], [472, 1, 1, "", "DevMapperMultiProc"], [462, 1, 1, "", "MultiDev"], [474, 1, 1, "", "MultiDevItem"], [475, 1, 1, "", "MultiDevIter"], [476, 1, 1, "", "MultiDevNest"], [477, 1, 1, "", "Profiler"], [478, 2, 1, "", "as_ivy_dev"], [479, 2, 1, "", "as_native_dev"], [480, 2, 1, "", "clear_mem_on_dev"], [481, 2, 1, "", "default_device"], [482, 2, 1, "", "dev"], [483, 2, 1, "", "dev_clone"], [484, 2, 1, "", "dev_clone_array"], [485, 2, 1, "", "dev_clone_iter"], [486, 2, 1, "", "dev_clone_nest"], [487, 2, 1, "", "dev_dist"], [488, 2, 1, "", "dev_dist_array"], [489, 2, 1, "", "dev_dist_iter"], [490, 2, 1, "", "dev_dist_nest"], [491, 2, 1, "", "dev_unify"], [492, 2, 1, "", "dev_unify_array"], [493, 2, 1, "", "dev_unify_iter"], [494, 2, 1, "", "dev_unify_nest"], [495, 2, 1, "", "dev_util"], [496, 2, 1, "", "get_all_ivy_arrays_on_dev"], [497, 2, 1, "", "gpu_is_available"], [498, 2, 1, "", "num_cpu_cores"], [499, 2, 1, "", "num_gpus"], [500, 2, 1, "", "num_ivy_arrays_on_dev"], [501, 2, 1, "", "percent_used_mem_on_dev"], [502, 2, 1, "", "print_all_ivy_arrays_on_dev"], [503, 2, 1, "", "set_default_device"], [504, 2, 1, "", "set_split_factor"], [505, 2, 1, "", "split_factor"], [506, 2, 1, "", "split_func_call"], [507, 2, 1, "", "to_device"], [508, 2, 1, "", "total_mem_on_dev"], [509, 2, 1, "", "tpu_is_available"], [510, 2, 1, "", "unset_default_device"], [511, 2, 1, "", "used_mem_on_dev"]], "ivy.functional.ivy.device.DefaultDevice": [[462, 3, 1, "", "__enter__"], [462, 3, 1, "", "__init__"]], "ivy.functional.ivy.device.DevManager": [[462, 3, 1, "", "__init__"], [462, 3, 1, "", "da_tune_step"], [462, 4, 1, "", "dim_size"], [462, 3, 1, "", "ds_tune_step"], [462, 3, 1, "", "map"], [462, 3, 1, "", "repeated_config_check"], [462, 4, 1, "", "tune_step"], [462, 4, 1, "", "tuned"]], "ivy.functional.ivy.device.DevMapper": [[471, 3, 1, "", "__init__"], [471, 3, 1, "", "map"]], "ivy.functional.ivy.device.DevMapperMultiProc": [[472, 3, 1, "", "__init__"]], "ivy.functional.ivy.device.MultiDev": [[462, 3, 1, "", "__init__"]], "ivy.functional.ivy.device.MultiDevItem": [[474, 3, 1, "", "__init__"], [474, 3, 1, "", "items"], [474, 3, 1, "", "keys"], [474, 4, 1, "", "shape"], [474, 3, 1, "", "values"]], "ivy.functional.ivy.device.MultiDevIter": [[475, 3, 1, "", "__init__"], [475, 3, 1, "", "at_dev"], [475, 3, 1, "", "at_devs"]], "ivy.functional.ivy.device.MultiDevNest": [[476, 3, 1, "", "__init__"], [476, 3, 1, "", "at_dev"]], "ivy.functional.ivy.device.Profiler": [[477, 3, 1, "", "__init__"], [477, 3, 1, "", "start"], [477, 3, 1, "", "stop"]], "ivy.functional.ivy.elementwise": [[516, 2, 1, "", "abs"], [517, 2, 1, "", "acos"], [585, 2, 1, "", "acosh"], [525, 2, 1, "", "add"], [533, 2, 1, "", "asin"], [537, 2, 1, "", "asinh"], [538, 2, 1, "", "atan"], [545, 2, 1, "", "atan2"], [744, 2, 1, "", "atanh"], [553, 2, 1, "", "bitwise_and"], [557, 2, 1, "", "bitwise_invert"], [561, 2, 1, "", "bitwise_left_shift"], [565, 2, 1, "", "bitwise_or"], [569, 2, 1, "", "bitwise_right_shift"], [573, 2, 1, "", "bitwise_xor"], [577, 2, 1, "", "ceil"], [578, 2, 1, "", "cos"], [582, 2, 1, "", "cosh"], [586, 2, 1, "", "divide"], [591, 2, 1, "", "equal"], [598, 2, 1, "", "erf"], [599, 2, 1, "", "exp"], [606, 2, 1, "", "expm1"], [607, 2, 1, "", "floor"], [614, 2, 1, "", "floor_divide"], [615, 2, 1, "", "greater"], [622, 2, 1, "", "greater_equal"], [626, 2, 1, "", "isfinite"], [630, 2, 1, "", "isinf"], [634, 2, 1, "", "isnan"], [638, 2, 1, "", "less"], [642, 2, 1, "", "less_equal"], [646, 2, 1, "", "log"], [650, 2, 1, "", "log10"], [654, 2, 1, "", "log1p"], [658, 2, 1, "", "log2"], [662, 2, 1, "", "logaddexp"], [666, 2, 1, "", "logical_and"], [670, 2, 1, "", "logical_not"], [674, 2, 1, "", "logical_or"], [678, 2, 1, "", "logical_xor"], [679, 2, 1, "", "maximum"], [680, 2, 1, "", "minimum"], [684, 2, 1, "", "multiply"], [689, 2, 1, "", "negative"], [693, 2, 1, "", "not_equal"], [697, 2, 1, "", "positive"], [701, 2, 1, "", "pow"], [705, 2, 1, "", "remainder"], [709, 2, 1, "", "round"], [713, 2, 1, "", "sign"], [717, 2, 1, "", "sin"], [721, 2, 1, "", "sinh"], [725, 2, 1, "", "sqrt"], [729, 2, 1, "", "square"], [734, 2, 1, "", "subtract"], [735, 2, 1, "", "tan"], [740, 2, 1, "", "tanh"], [748, 2, 1, "", "trunc"]], "ivy.functional.ivy.general": [[753, 2, 1, "", "all_equal"], [755, 2, 1, "", "arg_info"], [756, 2, 1, "", "arg_names"], [757, 2, 1, "", "array_equal"], [758, 2, 1, "", "arrays_equal"], [759, 2, 1, "", "assert_supports_inplace"], [760, 2, 1, "", "cache_fn"], [761, 2, 1, "", "clip_matrix_norm"], [764, 2, 1, "", "clip_vector_norm"], [765, 2, 1, "", "container_types"], [766, 2, 1, "", "copy_array"], [767, 2, 1, "", "cumprod"], [768, 2, 1, "", "cumsum"], [769, 2, 1, "", "current_backend_str"], [770, 2, 1, "", "default"], [771, 2, 1, "", "einops_rearrange"], [772, 2, 1, "", "einops_reduce"], [773, 2, 1, "", "einops_repeat"], [774, 2, 1, "", "exists"], [775, 2, 1, "", "floormod"], [776, 2, 1, "", "fourier_encode"], [777, 2, 1, "", "gather"], [781, 2, 1, "", "gather_nd"], [783, 2, 1, "", "get_all_arrays_in_memory"], [784, 2, 1, "", "get_min_base"], [785, 2, 1, "", "get_min_denominator"], [786, 2, 1, "", "get_num_dims"], [787, 2, 1, "", "get_referrers_recursive"], [788, 2, 1, "", "has_nans"], [789, 2, 1, "", "indices_where"], [790, 2, 1, "", "inplace_arrays_supported"], [791, 2, 1, "", "inplace_decrement"], [792, 2, 1, "", "inplace_increment"], [793, 2, 1, "", "inplace_update"], [794, 2, 1, "", "inplace_variables_supported"], [795, 2, 1, "", "is_array"], [796, 2, 1, "", "is_ivy_array"], [797, 2, 1, "", "is_ivy_container"], [798, 2, 1, "", "is_native_array"], [799, 2, 1, "", "match_kwargs"], [800, 2, 1, "", "multiprocessing"], [801, 2, 1, "", "num_arrays_in_memory"], [802, 2, 1, "", "one_hot"], [803, 2, 1, "", "print_all_arrays_in_memory"], [804, 2, 1, "", "queue_timeout"], [805, 2, 1, "", "scatter_flat"], [806, 2, 1, "", "scatter_nd"], [807, 2, 1, "", "set_min_base"], [808, 2, 1, "", "set_min_denominator"], [809, 2, 1, "", "set_queue_timeout"], [810, 2, 1, "", "set_tmp_dir"], [811, 2, 1, "", "shape"], [812, 2, 1, "", "shape_to_tuple"], [813, 2, 1, "", "stable_divide"], [814, 2, 1, "", "stable_pow"], [815, 2, 1, "", "supports_inplace"], [816, 2, 1, "", "tmp_dir"], [817, 2, 1, "", "to_list"], [818, 2, 1, "", "to_numpy"], [819, 2, 1, "", "to_scalar"], [820, 2, 1, "", "try_else_none"], [821, 2, 1, "", "unstack"], [822, 2, 1, "", "value_is_nan"]], "ivy.functional.ivy.gradients": [[823, 1, 1, "", "GradientTracking"], [825, 2, 1, "", "adam_step"], [828, 2, 1, "", "adam_update"], [830, 2, 1, "", "execute_with_gradients"], [833, 2, 1, "", "gradient_descent_update"], [835, 2, 1, "", "is_variable"], [838, 2, 1, "", "lamb_update"], [842, 2, 1, "", "lars_update"], [846, 2, 1, "", "optimizer_update"], [848, 2, 1, "", "set_with_grads"], [849, 2, 1, "", "stop_gradient"], [850, 2, 1, "", "unset_with_grads"], [851, 2, 1, "", "variable"], [852, 2, 1, "", "variable_data"], [853, 2, 1, "", "with_grads"]], "ivy.functional.ivy.gradients.GradientTracking": [[823, 3, 1, "", "__init__"]], "ivy.functional.ivy.layers": [[855, 2, 1, "", "conv1d"], [856, 2, 1, "", "conv1d_transpose"], [857, 2, 1, "", "conv2d"], [858, 2, 1, "", "conv2d_transpose"], [859, 2, 1, "", "conv3d"], [860, 2, 1, "", "conv3d_transpose"], [861, 2, 1, "", "depthwise_conv2d"], [862, 2, 1, "", "dropout"], [863, 2, 1, "", "linear"], [864, 2, 1, "", "lstm_update"], [865, 2, 1, "", "multi_head_attention"], [866, 2, 1, "", "scaled_dot_product_attention"]], "ivy.functional.ivy.linear_algebra": [[870, 2, 1, "", "cholesky"], [873, 2, 1, "", "cross"], [874, 2, 1, "", "det"], [879, 2, 1, "", "diagonal"], [882, 2, 1, "", "eigh"], [885, 2, 1, "", "eigvalsh"], [886, 2, 1, "", "inv"], [892, 2, 1, "", "matmul"], [895, 2, 1, "", "matrix_norm"], [896, 2, 1, "", "matrix_power"], [899, 2, 1, "", "matrix_rank"], [902, 2, 1, "", "matrix_transpose"], [905, 2, 1, "", "outer"], [908, 2, 1, "", "pinv"], [911, 2, 1, "", "qr"], [912, 2, 1, "", "slogdet"], [915, 2, 1, "", "solve"], [916, 2, 1, "", "svd"], [921, 2, 1, "", "svdvals"], [924, 2, 1, "", "tensordot"], [927, 2, 1, "", "trace"], [930, 2, 1, "", "vecdot"], [933, 2, 1, "", "vector_norm"], [936, 2, 1, "", "vector_to_skew_symmetric_matrix"]], "ivy.functional.ivy.losses": [[941, 2, 1, "", "binary_cross_entropy"], [946, 2, 1, "", "cross_entropy"], [951, 2, 1, "", "sparse_cross_entropy"]], "ivy.functional.ivy.manipulation": [[957, 2, 1, "", "clip"], [962, 2, 1, "", "concat"], [966, 2, 1, "", "constant_pad"], [970, 2, 1, "", "expand_dims"], [974, 2, 1, "", "flip"], [978, 2, 1, "", "permute_dims"], [982, 2, 1, "", "repeat"], [986, 2, 1, "", "reshape"], [990, 2, 1, "", "roll"], [992, 2, 1, "", "split"], [996, 2, 1, "", "squeeze"], [1000, 2, 1, "", "stack"], [1004, 2, 1, "", "swapaxes"], [1008, 2, 1, "", "tile"], [1012, 2, 1, "", "zero_pad"]], "ivy.functional.ivy.meta": [[1014, 2, 1, "", "fomaml_step"], [1015, 2, 1, "", "maml_step"], [1016, 2, 1, "", "reptile_step"]], "ivy.functional.ivy.nest": [[1018, 2, 1, "", "all_nested_indices"], [1019, 2, 1, "", "copy_nest"], [1020, 2, 1, "", "index_nest"], [1021, 2, 1, "", "insert_into_nest_at_index"], [1022, 2, 1, "", "insert_into_nest_at_indices"], [1023, 2, 1, "", "map"], [1024, 2, 1, "", "map_nest_at_index"], [1025, 2, 1, "", "map_nest_at_indices"], [1026, 2, 1, "", "multi_index_nest"], [1027, 2, 1, "", "nested_any"], [1028, 2, 1, "", "nested_indices_where"], [1029, 2, 1, "", "nested_map"], [1030, 2, 1, "", "nested_multi_map"], [1031, 2, 1, "", "prune_nest_at_index"], [1032, 2, 1, "", "prune_nest_at_indices"], [1033, 2, 1, "", "set_nest_at_index"], [1034, 2, 1, "", "set_nest_at_indices"]], "ivy.functional.ivy.norms": [[1039, 2, 1, "", "layer_norm"]], "ivy.functional.ivy.random": [[1041, 2, 1, "", "multinomial"], [1043, 2, 1, "", "randint"], [1045, 2, 1, "", "random_normal"], [1048, 2, 1, "", "random_uniform"], [1050, 2, 1, "", "seed"], [1051, 2, 1, "", "shuffle"]], "ivy.functional.ivy.searching": [[1053, 2, 1, "", "argmax"], [1054, 2, 1, "", "argmin"], [1055, 2, 1, "", "nonzero"], [1056, 2, 1, "", "where"]], "ivy.functional.ivy.set": [[1058, 2, 1, "", "unique_all"], [1059, 2, 1, "", "unique_counts"], [1060, 2, 1, "", "unique_inverse"], [1061, 2, 1, "", "unique_values"]], "ivy.functional.ivy.sorting": [[1066, 2, 1, "", "argsort"], [1071, 2, 1, "", "sort"]], "ivy.functional.ivy.statistical": [[1101, 2, 1, "", "einsum"], [1081, 2, 1, "", "max"], [1085, 2, 1, "", "mean"], [1089, 2, 1, "", "min"], [1093, 2, 1, "", "prod"], [1097, 2, 1, "", "std"], [1098, 2, 1, "", "sum"], [1105, 2, 1, "", "var"]], "ivy.functional.ivy.utility": [[1110, 2, 1, "", "all"], [1114, 2, 1, "", "any"]], "ivy.inspection": [[1119, 2, 1, "", "add_array_specs"], [1120, 2, 1, "", "fn_array_spec"]], "ivy.stateful": [[1122, 0, 0, "-", "activations"], [1125, 0, 0, "-", "converters"], [1127, 0, 0, "-", "initializers"], [1136, 0, 0, "-", "layers"], [1148, 0, 0, "-", "module"], [1150, 0, 0, "-", "norms"], [1152, 0, 0, "-", "optimizers"], [1158, 0, 0, "-", "sequential"]], "ivy.stateful.activations": [[1123, 1, 1, "", "GEGLU"], [1124, 1, 1, "", "GELU"]], "ivy.stateful.activations.GEGLU": [[1123, 3, 1, "", "__init__"]], "ivy.stateful.activations.GELU": [[1124, 3, 1, "", "__init__"]], "ivy.stateful.converters": [[1126, 2, 1, "", "to_ivy_module"]], "ivy.stateful.initializers": [[1127, 1, 1, "", "Constant"], [1129, 1, 1, "", "FirstLayerSiren"], [1130, 1, 1, "", "GlorotUniform"], [1127, 1, 1, "", "KaimingNormal"], [1132, 1, 1, "", "Ones"], [1133, 1, 1, "", "Siren"], [1127, 1, 1, "", "Uniform"], [1135, 1, 1, "", "Zeros"]], "ivy.stateful.initializers.Constant": [[1127, 3, 1, "", "__init__"], [1127, 3, 1, "", "create_variables"]], "ivy.stateful.initializers.FirstLayerSiren": [[1129, 3, 1, "", "__init__"]], "ivy.stateful.initializers.GlorotUniform": [[1130, 3, 1, "", "__init__"]], "ivy.stateful.initializers.KaimingNormal": [[1127, 3, 1, "", "__init__"], [1127, 3, 1, "", "create_variables"]], "ivy.stateful.initializers.Ones": [[1132, 3, 1, "", "__init__"]], "ivy.stateful.initializers.Siren": [[1133, 3, 1, "", "__init__"]], "ivy.stateful.initializers.Uniform": [[1127, 3, 1, "", "__init__"], [1127, 3, 1, "", "create_variables"]], "ivy.stateful.initializers.Zeros": [[1135, 3, 1, "", "__init__"]], "ivy.stateful.layers": [[1137, 1, 1, "", "Conv1D"], [1138, 1, 1, "", "Conv1DTranspose"], [1139, 1, 1, "", "Conv2D"], [1140, 1, 1, "", "Conv2DTranspose"], [1141, 1, 1, "", "Conv3D"], [1142, 1, 1, "", "Conv3DTranspose"], [1143, 1, 1, "", "DepthwiseConv2D"], [1144, 1, 1, "", "Dropout"], [1145, 1, 1, "", "LSTM"], [1146, 1, 1, "", "Linear"], [1147, 1, 1, "", "MultiHeadAttention"]], "ivy.stateful.layers.Conv1D": [[1137, 3, 1, "", "__init__"]], "ivy.stateful.layers.Conv1DTranspose": [[1138, 3, 1, "", "__init__"]], "ivy.stateful.layers.Conv2D": [[1139, 3, 1, "", "__init__"]], "ivy.stateful.layers.Conv2DTranspose": [[1140, 3, 1, "", "__init__"]], "ivy.stateful.layers.Conv3D": [[1141, 3, 1, "", "__init__"]], "ivy.stateful.layers.Conv3DTranspose": [[1142, 3, 1, "", "__init__"]], "ivy.stateful.layers.DepthwiseConv2D": [[1143, 3, 1, "", "__init__"]], "ivy.stateful.layers.Dropout": [[1144, 3, 1, "", "__init__"]], "ivy.stateful.layers.LSTM": [[1145, 3, 1, "", "__init__"], [1145, 3, 1, "", "get_initial_state"]], "ivy.stateful.layers.Linear": [[1146, 3, 1, "", "__init__"]], "ivy.stateful.layers.MultiHeadAttention": [[1147, 3, 1, "", "__init__"]], "ivy.stateful.module": [[1149, 1, 1, "", "Module"]], "ivy.stateful.module.Module": [[1149, 3, 1, "", "__init__"], [1149, 3, 1, "", "build"], [1149, 4, 1, "", "build_mode"], [1149, 4, 1, "", "built"], [1149, 3, 1, "", "check_submod_rets"], [1149, 3, 1, "", "get_mod_key"], [1149, 3, 1, "", "mod_depth"], [1149, 3, 1, "", "mod_height"], [1149, 3, 1, "", "mod_with_top_mod_key_chain"], [1149, 3, 1, "", "save_weights"], [1149, 3, 1, "", "show_mod_in_top_mod"], [1149, 3, 1, "", "show_structure"], [1149, 3, 1, "", "show_v_in_top_v"], [1149, 3, 1, "", "sub_mods"], [1149, 3, 1, "", "track_submod_call_order"], [1149, 3, 1, "", "track_submod_rets"], [1149, 3, 1, "", "v_with_top_v_key_chains"]], "ivy.stateful.norms": [[1151, 1, 1, "", "LayerNorm"]], "ivy.stateful.norms.LayerNorm": [[1151, 3, 1, "", "__init__"]], "ivy.stateful.optimizers": [[1153, 1, 1, "", "Adam"], [1154, 1, 1, "", "LAMB"], [1155, 1, 1, "", "LARS"], [1156, 1, 1, "", "Optimizer"], [1157, 1, 1, "", "SGD"]], "ivy.stateful.optimizers.Adam": [[1153, 3, 1, "", "__init__"], [1153, 3, 1, "", "set_state"], [1153, 4, 1, "", "state"]], "ivy.stateful.optimizers.LAMB": [[1154, 3, 1, "", "__init__"], [1154, 3, 1, "", "set_state"], [1154, 4, 1, "", "state"]], "ivy.stateful.optimizers.LARS": [[1155, 3, 1, "", "__init__"], [1155, 3, 1, "", "set_state"], [1155, 4, 1, "", "state"]], "ivy.stateful.optimizers.Optimizer": [[1156, 3, 1, "", "__init__"], [1156, 3, 1, "", "set_state"], [1156, 3, 1, "", "step"]], "ivy.stateful.optimizers.SGD": [[1157, 3, 1, "", "__init__"], [1157, 3, 1, "", "set_state"], [1157, 4, 1, "", "state"]], "ivy.stateful.sequential": [[1159, 1, 1, "", "Sequential"]], "ivy.stateful.sequential.Sequential": [[1159, 3, 1, "", "__init__"]], "ivy.verbosity": [[1162, 2, 1, "", "cprint"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:function", "3": "py:method", "4": "py:property", "5": "py:data"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "function", "Python function"], "3": ["py", "method", "Python method"], "4": ["py", "property", "Python property"], "5": ["py", "data", "Python data"]}, "titleterms": {"activ": [0, 176, 395, 1122], "arraywithactiv": 1, "arrai": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 174, 355, 360, 365, 369, 435, 514, 518, 522, 526, 531, 535, 539, 543, 547, 551, 555, 559, 563, 567, 571, 575, 579, 583, 587, 592, 596, 600, 604, 608, 612, 616, 620, 624, 628, 632, 636, 640, 644, 648, 652, 656, 660, 664, 668, 672, 676, 682, 687, 691, 695, 699, 703, 707, 711, 715, 719, 723, 727, 732, 737, 742, 746, 751, 779, 869, 872, 875, 878, 881, 884, 887, 890, 894, 898, 901, 904, 907, 910, 914, 917, 920, 923, 926, 929, 932, 935, 939, 944, 949, 955, 960, 964, 968, 972, 976, 980, 984, 988, 994, 998, 1002, 1006, 1010, 1037, 1064, 1069, 1075, 1079, 1083, 1087, 1091, 1095, 1099, 1103, 1108, 1112], "method": [2, 183, 361, 369, 370], "ab": [3, 184, 513, 514, 515, 516], "aco": [4, 185, 517, 518, 519, 520], "acosh": [5, 186, 521, 522, 523, 524], "add": [6, 188, 354, 525, 526, 527, 528], "add_ivy_array_instance_method": [7, 158], "all": [8, 190, 1107, 1108, 1109, 1110], "all_equ": [9, 191, 750, 751, 752, 753], "ani": [10, 192, 1111, 1112, 1113, 1114], "argsort": [11, 193, 1063, 1064, 1065, 1066], "asin": [12, 194, 530, 531, 532, 533], "asinh": [13, 195, 534, 535, 536, 537], "atan": [14, 198, 538, 539, 540, 541], "atan2": [15, 199, 542, 543, 544, 545], "atanh": [16, 200, 546, 547, 548, 549], "binary_cross_entropi": [17, 201, 938, 939, 940, 941], "bitwise_and": [18, 202, 550, 551, 552, 553], "bitwise_invert": [19, 203, 554, 555, 556, 557], "bitwise_left_shift": [20, 204, 558, 559, 560, 561], "bitwise_or": [21, 205, 562, 563, 564, 565], "bitwise_right_shift": [22, 206, 566, 567, 568, 569], "bitwise_xor": [23, 207, 570, 571, 572, 573], "can_cast": [24, 208, 434, 435, 436, 437], "ceil": [25, 209, 574, 575, 576, 577], "choleski": [26, 868, 869, 870], "clip": [27, 210, 954, 955, 956, 957], "concat": [28, 212, 959, 960, 961, 962], "constant_pad": [29, 213, 963, 964, 965, 966], "co": [30, 214, 578, 579, 580, 581], "cosh": [31, 215, 582, 583, 584, 585], "cross": [32, 871, 872, 873], "cross_entropi": [33, 216, 943, 944, 945, 946], "det": [34, 874, 875, 876], "diagon": [35, 877, 878, 879], "divid": [36, 217, 586, 587, 588, 589], "eigh": [37, 880, 881, 882], "eigvalsh": [38, 883, 884, 885], "einsum": [39, 218, 1074, 1075, 1076, 1077], "equal": [40, 219, 591, 592, 593, 594], "erf": [41, 220, 595, 596, 597, 598], "exp": [42, 221, 599, 600, 601, 602], "expand_dim": [43, 222, 967, 968, 969, 970], "expm1": [44, 223, 603, 604, 605, 606], "flip": [45, 224, 971, 972, 973, 974], "floor": [46, 225, 607, 608, 609, 610], "floor_divid": [47, 226, 611, 612, 613, 614], "gather_nd": [48, 227, 778, 779, 780, 781], "greater": [49, 229, 615, 616, 617, 618], "greater_equ": [50, 230, 619, 620, 621, 622], "inv": [51, 886, 887, 888], "isfinit": [52, 231, 623, 624, 625, 626], "isinf": [53, 232, 627, 628, 629, 630], "isnan": [54, 233, 631, 632, 633, 634], "layer_norm": [55, 236, 1036, 1037, 1038, 1039], "less": [56, 237, 635, 636, 637, 638], "less_equ": [57, 238, 639, 640, 641, 642], "log": [58, 239, 643, 644, 645, 646], "log10": [59, 240, 647, 648, 649, 650], "log1p": [60, 241, 651, 652, 653, 654], "log2": [61, 242, 655, 656, 657, 658], "logaddexp": [62, 243, 659, 660, 661, 662], "logical_and": [63, 244, 663, 664, 665, 666], "logical_not": [64, 245, 667, 668, 669, 670], "logical_or": [65, 246, 671, 672, 673, 674], "logical_xor": [66, 247, 675, 676, 677, 678], "matmul": [67, 248, 889, 890, 891, 892], "matrix_norm": [68, 893, 894, 895], "matrix_rank": [69, 897, 898, 899], "matrix_transpos": [70, 900, 901, 902], "max": [71, 249, 1078, 1079, 1080, 1081], "mean": [72, 250, 1082, 1083, 1084, 1085], "min": [73, 251, 1086, 1087, 1088, 1089], "multipli": [74, 252, 681, 682, 683, 684], "neg": [75, 253, 686, 687, 688, 689], "not_equ": [76, 254, 690, 691, 692, 693], "outer": [77, 903, 904, 905], "permute_dim": [78, 256, 975, 976, 977, 978], "pinv": [79, 906, 907, 908], "posit": [80, 257, 694, 695, 696, 697], "pow": [81, 258, 698, 699, 700, 701], "prod": [82, 259, 1090, 1091, 1092, 1093], "qr": [83, 909, 910, 911], "remaind": [84, 261, 702, 703, 704, 705], "repeat": [85, 262, 979, 980, 981, 982], "reshap": [86, 263, 983, 984, 985, 986], "roll": [87, 264, 354, 987, 988, 989, 990], "round": [88, 265, 706, 707, 708, 709], "sign": [89, 266, 710, 711, 712, 713], "sin": [90, 267, 714, 715, 716, 717], "sinh": [91, 268, 718, 719, 720, 721], "solv": [92, 913, 914, 915], "sort": [93, 151, 269, 338, 1062, 1068, 1069, 1070, 1071], "sparse_cross_entropi": [94, 270, 948, 949, 950, 951], "sqrt": [95, 271, 722, 723, 724, 725], "squar": [96, 272, 726, 727, 728, 729], "squeez": [97, 273, 993, 994, 995, 996], "stack": [98, 274, 997, 998, 999, 1000], "std": [99, 298, 1094, 1095, 1096, 1097], "subtract": [100, 299, 730, 732, 733, 734], "sum": [101, 300, 1098, 1099, 1100, 1101], "svd": [102, 916, 917, 918], "svdval": [103, 919, 920, 921], "swapax": [104, 301, 1001, 1002, 1003, 1004], "tan": [105, 302, 354, 735, 737, 738, 739], "tanh": [106, 303, 402, 740, 742, 743, 744], "tensordot": [107, 922, 923, 924], "tile": [108, 304, 1005, 1006, 1007, 1008], "trace": [109, 925, 926, 927], "trunc": [110, 305, 745, 746, 747, 748], "var": [111, 306, 1102, 1103, 1104, 1105], "vecdot": [112, 928, 929, 930], "vector_norm": [113, 931, 932, 933], "vector_to_skew_symmetric_matrix": [114, 934, 935, 936], "zero_pad": [115, 307, 1009, 1010, 1011, 1012], "convers": 116, "args_to_ivi": 117, "args_to_n": 118, "to_ivi": 119, "to_n": 120, "creation": [121, 308, 406], "arraywithcr": 122, "data": [123, 310, 356, 362, 370, 384, 425, 1057, 1058, 1059, 1061], "type": [123, 310, 357, 362, 384, 425], "arraywithdatatyp": 124, "devic": [125, 312, 363, 365, 462], "arraywithdevic": 126, "elementwis": [127, 314, 512], "arraywithelementwis": 128, "gener": [129, 316, 356, 749], "arraywithgener": 130, "gradient": [131, 318, 823], "arraywithgradi": 132, "imag": [133, 320], "arraywithimag": 134, "layer": [135, 322, 854, 1136], "arraywithlay": 136, "linear": [137, 324, 863, 867, 1146], "algebra": [137, 324, 867], "arraywithlinearalgebra": 138, "loss": [139, 326, 937], "arraywithloss": 140, "manipul": [141, 328, 953], "arraywithmanipul": 142, "norm": [143, 330, 1035, 1150], "arraywithnorm": 144, "random": [145, 332, 1040], "arraywithrandom": 146, "search": [147, 334, 1052], "arraywithsearch": 148, "set": [149, 336, 347, 358, 1057], "arraywithset": 150, "arraywithsort": 152, "statist": [153, 340, 1073], "arraywithstatist": 154, "util": [155, 342, 1106], "arraywithutil": 156, "wrap": [157, 344, 359], "backend": [159, 352, 358, 367, 384], "handler": [159, 367], "choose_random_backend": 161, "clear_backend_stack": 162, "current_backend": 163, "get_backend": 164, "set_backend": 165, "try_import_ivy_jax": 166, "try_import_ivy_mxnet": 167, "try_import_ivy_numpi": 168, "try_import_ivy_tf": 169, "try_import_ivy_torch": 170, "unset_backend": 171, "background": [172, 1115], "ml": 173, "explos": 173, "standard": 174, "skeptic": 174, "complimentari": 174, "vs": [174, 384], "competit": 174, "do": 174, "work": [174, 350], "The": [174, 348, 369, 384], "api": [174, 349, 352, 355, 361, 367, 369, 371, 372], "why": 175, "unifi": [175, 369], "No": [175, 347], "more": 175, "re": 175, "implement": 175, "infinit": 175, "shelf": 175, "life": 175, "containerwithactiv": 177, "base": 178, "containerbas": 179, "contain": [180, 181, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 361, 370, 436, 438, 515, 519, 523, 527, 529, 532, 536, 540, 544, 548, 552, 556, 560, 564, 568, 572, 576, 580, 584, 588, 590, 593, 597, 601, 605, 609, 613, 617, 621, 625, 629, 633, 637, 641, 645, 649, 653, 657, 661, 665, 669, 673, 677, 683, 685, 688, 692, 696, 700, 704, 708, 712, 716, 720, 724, 728, 731, 733, 736, 738, 741, 743, 747, 752, 754, 763, 780, 782, 827, 829, 832, 834, 837, 839, 841, 843, 845, 847, 891, 940, 942, 945, 947, 950, 952, 956, 958, 961, 965, 969, 973, 977, 981, 985, 989, 991, 995, 999, 1003, 1007, 1011, 1038, 1044, 1047, 1049, 1065, 1067, 1070, 1072, 1076, 1080, 1084, 1088, 1092, 1096, 1100, 1104, 1109, 1113], "multidevcontain": 182, "adam_upd": [187, 826, 827, 828], "add_ivy_container_instance_method": [189, 345], "at_dev": [196, 197], "clip_vector_norm": [211, 762, 763, 764], "gradient_descent_upd": [228, 831, 832, 833], "lamb_upd": [234, 836, 837, 838], "lars_upd": [235, 840, 841, 842], "optimizer_upd": [255, 844, 845, 846], "random_uniform": [260, 1046, 1047, 1048], "static_adam_upd": [275, 829], "static_add": [276, 529], "static_all_equ": [277, 754], "static_argsort": [278, 1067], "static_binary_cross_entropi": [279, 942], "static_can_cast": [280, 438], "static_clip": [281, 958], "static_cross_entropi": [282, 947], "static_divid": [283, 590], "static_gather_nd": [284, 782], "static_gradient_descent_upd": [285, 834], "static_lamb_upd": [286, 839], "static_lars_upd": [287, 843], "static_multipli": [288, 685], "static_optimizer_upd": [289, 847], "static_randint": [290, 1044], "static_random_uniform": [291, 1049], "static_rol": [292, 991], "static_sort": [293, 1072], "static_sparse_cross_entropi": [294, 952], "static_subtract": [295, 731], "static_tan": [296, 736], "static_tanh": [297, 741], "containerwithcr": 309, "containerwithdatatyp": 311, "containerwithdevic": 313, "containerwithelementwis": 315, "containerwithgener": 317, "containerwithgradi": 319, "containerwithimag": 321, "containerwithlay": 323, "containerwithlinearalgebra": 325, "containerwithloss": 327, "containerwithmanipul": 329, "containerwithnorm": 331, "containerwithrandom": 333, "containerwithsearch": 335, "containerwithset": 337, "containerwithsort": 339, "containerwithstatist": 341, "containerwithutil": 343, "contribut": [346, 1115], "up": 347, "clone": 347, "ivi": [347, 352, 354, 356, 360, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 383, 435, 436, 437, 438, 514, 515, 516, 518, 519, 520, 522, 523, 524, 526, 527, 528, 529, 531, 532, 533, 535, 536, 537, 539, 540, 541, 543, 544, 545, 547, 548, 549, 551, 552, 553, 555, 556, 557, 559, 560, 561, 563, 564, 565, 567, 568, 569, 571, 572, 573, 575, 576, 577, 579, 580, 581, 583, 584, 585, 587, 588, 589, 590, 592, 593, 594, 596, 597, 598, 600, 601, 602, 604, 605, 606, 608, 609, 610, 612, 613, 614, 616, 617, 618, 620, 621, 622, 624, 625, 626, 628, 629, 630, 632, 633, 634, 636, 637, 638, 640, 641, 642, 644, 645, 646, 648, 649, 650, 652, 653, 654, 656, 657, 658, 660, 661, 662, 664, 665, 666, 668, 669, 670, 672, 673, 674, 676, 677, 678, 682, 683, 684, 685, 687, 688, 689, 691, 692, 693, 695, 696, 697, 699, 700, 701, 703, 704, 705, 707, 708, 709, 711, 712, 713, 715, 716, 717, 719, 720, 721, 723, 724, 725, 727, 728, 729, 731, 732, 733, 734, 736, 737, 738, 739, 741, 742, 743, 744, 746, 747, 748, 751, 752, 753, 754, 763, 764, 779, 780, 781, 782, 827, 828, 829, 832, 833, 834, 837, 838, 839, 841, 842, 843, 845, 846, 847, 869, 870, 872, 873, 875, 876, 878, 879, 881, 882, 884, 885, 887, 888, 890, 891, 892, 894, 895, 898, 899, 901, 902, 904, 905, 907, 908, 910, 911, 914, 915, 917, 918, 920, 921, 923, 924, 926, 927, 929, 930, 932, 933, 935, 936, 939, 940, 941, 942, 944, 945, 946, 947, 949, 950, 951, 952, 955, 956, 957, 958, 960, 961, 962, 964, 965, 966, 968, 969, 970, 972, 973, 974, 976, 977, 978, 980, 981, 982, 984, 985, 986, 988, 989, 990, 991, 994, 995, 996, 998, 999, 1000, 1002, 1003, 1004, 1006, 1007, 1008, 1010, 1011, 1012, 1037, 1038, 1039, 1043, 1044, 1047, 1048, 1049, 1064, 1065, 1066, 1067, 1069, 1070, 1071, 1072, 1075, 1076, 1077, 1079, 1080, 1081, 1083, 1084, 1085, 1087, 1088, 1089, 1091, 1092, 1093, 1095, 1096, 1097, 1099, 1100, 1101, 1103, 1104, 1105, 1108, 1109, 1110, 1112, 1113, 1114], "pycharm": 347, "virtual": 347, "environ": 347, "docker": [347, 348, 350], "us": [347, 350, 370], "miniconda": [347, 350], "venv": [347, 350], "interpret": 347, "window": 347, "maco": 347, "ubuntu": 347, "github": 347, "codespac": 347, "pre": 347, "commit": [347, 348], "basic": 348, "get": 348, "help": 348, "todo": 348, "list": 348, "issu": 348, "manag": 348, "your": 348, "fork": 348, "who": 348, "To": 348, "ask": 348, "With": 348, "command": 348, "line": 348, "browser": 348, "pull": 348, "request": 348, "small": 348, "often": 348, "run": 348, "test": [348, 355, 356], "local": 348, "open": 349, "task": 349, "function": [349, 357, 359, 361, 362, 363, 365, 367, 372, 384], "format": 349, "frontend": [349, 372], "build": [350, 367], "doc": 350, "dockerless": 350, "document": 350, "pipelin": [350, 384], "make_doc": 350, "sh": 350, "entrypoint": 350, "_make_doc": 350, "generate_src_rst_fil": 350, "py": 350, "sphinx": 350, "correct_built_html_fil": 350, "remove_fil": 350, "deep": 351, "dive": 351, "navig": 352, "code": 352, "categor": 352, "submodul": 352, "design": [352, 366, 1115], "docstr": [353, 354], "exampl": [354, 365], "hypothesi": 356, "self": 356, "consist": 356, "explicit": 356, "test_array_funct": 356, "primari": 357, "composit": 357, "mix": 357, "standalon": 357, "nestabl": [357, 361, 365], "conveni": 357, "nativ": 360, "handl": 360, "instanc": [361, 369], "static": 361, "special": 361, "modul": [362, 363, 371, 1148, 1149], "argument": [362, 363, 364, 365], "other": [362, 363], "inplac": 364, "updat": 364, "out": [364, 365], "copi": 364, "dtype": [365, 443], "number": 365, "oper": [365, 369, 384], "integ": 365, "sequenc": 365, "block": 367, "framework": [367, 368], "graph": [367, 372], "compil": [367, 372, 403, 404], "class": 369, "monkei": 369, "patch": 369, "construct": 370, "represent": 370, "recurs": 370, "built": 370, "ins": 370, "access": 370, "save": 370, "load": 370, "comparison": 370, "custom": [370, 384], "case": 370, "compartment": 370, "configur": 370, "network": [370, 372], "weight": 370, "state": [371, 384], "initi": [371, 1127], "optim": [371, 1152, 1156], "transpil": 372, "role": 372, "convert": [372, 1125], "model": [372, 379, 384], "builder": 374, "ecosystem": 375, "gym": [376, 383], "mech": 377, "memori": [378, 383], "robot": [380, 383], "vision": [381, 383], "extens": [382, 1115], "appli": 383, "librari": 383, "mechan": 383, "faq": 384, "maintain": 384, "version": 384, "dynam": 384, "size": 384, "shape": [384, 811, 1057, 1058, 1059, 1061], "check": 384, "control": 384, "flow": 384, "auto": 384, "differenti": 384, "replica": 384, "parallel": 384, "support": 384, "altern": 384, "structur": 384, "func": 385, "wrapper": 385, "handle_nest": 386, "handle_out_argu": 387, "infer_devic": 388, "infer_dtyp": 389, "inputs_to_ivy_arrai": 390, "inputs_to_native_arrai": 391, "outputs_to_ivy_arrai": 392, "to_native_arrays_and_back": 393, "gelu": [396, 1124], "leaky_relu": 397, "relu": 398, "sigmoid": 399, "softmax": 400, "softplu": 401, "constant": 405, "note": [406, 412], "arang": 407, "asarrai": 408, "empti": 409, "empty_lik": 410, "ey": 411, "from_dlpack": 412, "full": 413, "full_lik": 414, "linspac": 415, "logspac": 416, "meshgrid": 417, "native_arrai": 418, "ones": 419, "ones_lik": 420, "tril": 421, "triu": 422, "zero": [423, 1135], "zeros_lik": 424, "as_ivy_dtyp": 429, "as_native_dtyp": 430, "astyp": 431, "broadcast_arrai": 432, "broadcast_to": 433, "closest_valid_dtyp": 439, "default_dtyp": 440, "default_float_dtyp": 441, "default_int_dtyp": 442, "dtype_bit": 444, "finfo": 445, "function_supported_dtyp": 446, "function_unsupported_dtyp": 447, "iinfo": 448, "invalid_dtyp": 449, "is_float_dtyp": 450, "is_int_dtyp": 451, "promote_typ": 452, "result_typ": 453, "set_default_dtyp": 454, "set_default_float_dtyp": 455, "set_default_int_dtyp": 456, "type_promote_arrai": 457, "unset_default_dtyp": 458, "unset_default_float_dtyp": 459, "unset_default_int_dtyp": 460, "valid_dtyp": 461, "devcloneditem": 464, "devclonedit": 465, "devclonednest": 466, "devdistitem": 467, "devdistit": 468, "devdistnest": 469, "devmapp": 471, "devmappermultiproc": 472, "multidevitem": 474, "multidevit": 475, "multidevnest": 476, "profil": 477, "as_ivy_dev": 478, "as_native_dev": 479, "clear_mem_on_dev": 480, "default_devic": 481, "dev": 482, "dev_clon": 483, "dev_clone_arrai": 484, "dev_clone_it": 485, "dev_clone_nest": 486, "dev_dist": 487, "dev_dist_arrai": 488, "dev_dist_it": 489, "dev_dist_nest": 490, "dev_unifi": 491, "dev_unify_arrai": 492, "dev_unify_it": 493, "dev_unify_nest": 494, "dev_util": 495, "get_all_ivy_arrays_on_dev": 496, "gpu_is_avail": 497, "num_cpu_cor": 498, "num_gpu": 499, "num_ivy_arrays_on_dev": 500, "percent_used_mem_on_dev": 501, "print_all_ivy_arrays_on_dev": 502, "set_default_devic": 503, "set_split_factor": 504, "split_factor": 505, "split_func_cal": 506, "to_devic": 507, "total_mem_on_dev": 508, "tpu_is_avail": 509, "unset_default_devic": 510, "used_mem_on_dev": 511, "maximum": 679, "minimum": 680, "arg_info": 755, "arg_nam": 756, "array_equ": 757, "arrays_equ": 758, "assert_supports_inplac": 759, "cache_fn": 760, "clip_matrix_norm": 761, "container_typ": 765, "copy_arrai": 766, "cumprod": 767, "cumsum": 768, "current_backend_str": 769, "default": 770, "einops_rearrang": 771, "einops_reduc": 772, "einops_repeat": 773, "exist": 774, "floormod": 775, "fourier_encod": 776, "gather": 777, "get_all_arrays_in_memori": 783, "get_min_bas": 784, "get_min_denomin": 785, "get_num_dim": 786, "get_referrers_recurs": 787, "has_nan": 788, "indices_wher": 789, "inplace_arrays_support": 790, "inplace_decr": 791, "inplace_incr": 792, "inplace_upd": 793, "inplace_variables_support": 794, "is_arrai": 795, "is_ivy_arrai": 796, "is_ivy_contain": 797, "is_native_arrai": 798, "match_kwarg": 799, "multiprocess": 800, "num_arrays_in_memori": 801, "one_hot": 802, "print_all_arrays_in_memori": 803, "queue_timeout": 804, "scatter_flat": 805, "scatter_nd": 806, "set_min_bas": 807, "set_min_denomin": 808, "set_queue_timeout": 809, "set_tmp_dir": 810, "shape_to_tupl": 812, "stable_divid": 813, "stable_pow": 814, "supports_inplac": 815, "tmp_dir": 816, "to_list": 817, "to_numpi": 818, "to_scalar": 819, "try_else_non": 820, "unstack": 821, "value_is_nan": 822, "adam_step": 825, "execute_with_gradi": 830, "is_vari": 835, "set_with_grad": 848, "stop_gradi": 849, "unset_with_grad": 850, "variabl": 851, "variable_data": 852, "with_grad": 853, "conv1d": [855, 1137], "conv1d_transpos": 856, "conv2d": [857, 1139], "conv2d_transpos": 858, "conv3d": [859, 1141], "conv3d_transpos": 860, "depthwise_conv2d": 861, "dropout": [862, 1144], "lstm_updat": 864, "multi_head_attent": 865, "scaled_dot_product_attent": 866, "matrix_pow": 896, "slogdet": 912, "split": 992, "meta": 1013, "fomaml_step": 1014, "maml_step": 1015, "reptile_step": 1016, "nest": 1017, "all_nested_indic": 1018, "copy_nest": 1019, "index_nest": 1020, "insert_into_nest_at_index": 1021, "insert_into_nest_at_indic": 1022, "map": 1023, "map_nest_at_index": 1024, "map_nest_at_indic": 1025, "multi_index_nest": 1026, "nested_ani": 1027, "nested_indices_wher": 1028, "nested_map": 1029, "nested_multi_map": 1030, "prune_nest_at_index": 1031, "prune_nest_at_indic": 1032, "set_nest_at_index": 1033, "set_nest_at_indic": 1034, "multinomi": 1041, "randint": [1042, 1043], "random_norm": 1045, "seed": 1050, "shuffl": 1051, "argmax": 1053, "argmin": 1054, "nonzero": 1055, "where": 1056, "depend": [1057, 1058, 1059, 1061], "output": [1057, 1058, 1059, 1061], "unique_al": 1058, "unique_count": 1059, "unique_invers": 1060, "unique_valu": 1061, "content": 1115, "overview": 1115, "quick": 1115, "start": 1115, "roadmap": [1115, 1121], "citat": 1115, "inspect": 1118, "add_array_spec": 1119, "fn_array_spec": 1120, "geglu": 1123, "to_ivy_modul": 1126, "firstlayersiren": 1129, "glorotuniform": 1130, "Ones": 1132, "siren": 1133, "conv1dtranspos": 1138, "conv2dtranspos": 1140, "conv3dtranspos": 1142, "depthwiseconv2d": 1143, "lstm": 1145, "multiheadattent": 1147, "layernorm": 1151, "adam": 1153, "lamb": 1154, "lar": 1155, "sgd": 1157, "sequenti": [1158, 1159], "verbos": 1161, "cprint": 1162}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 6, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.viewcode": 1, "sphinx": 56}})