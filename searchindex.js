Search.setIndex({"docnames": ["backend_handler", "backend_handler/ContextManager:\n    def __init__", "backend_handler/choose_random_backend", "backend_handler/clear_backend_stack", "backend_handler/current_backend", "backend_handler/get_backend", "backend_handler/set_backend", "backend_handler/try_import_ivy_jax", "backend_handler/try_import_ivy_mxnet", "backend_handler/try_import_ivy_numpy", "backend_handler/try_import_ivy_tf", "backend_handler/try_import_ivy_torch", "backend_handler/unset_backend", "background", "background/ml_explosion", "background/standardization", "background/why_unify", "contributing", "contributing/0_setting_up", "contributing/1_the_basics", "contributing/4_open_tasks", "contributing/building_the_docs", "data_classes/array/activations", "data_classes/array/activations/ArrayWithActivations", "data_classes/array/array", "data_classes/array/array/Array", "data_classes/array/array/Variable", "data_classes/array/conversions", "data_classes/array/conversions/args_to_ivy", "data_classes/array/conversions/args_to_native", "data_classes/array/conversions/to_ivy", "data_classes/array/conversions/to_native", "data_classes/array/creation", "data_classes/array/creation/ArrayWithCreation", "data_classes/array/data_type", "data_classes/array/data_type/ArrayWithDataTypes", "data_classes/array/device", "data_classes/array/device/ArrayWithDevice", "data_classes/array/elementwise", "data_classes/array/elementwise/ArrayWithElementwise", "data_classes/array/general", "data_classes/array/general/ArrayWithGeneral", "data_classes/array/gradients", "data_classes/array/gradients/ArrayWithGradients", "data_classes/array/image", "data_classes/array/image/ArrayWithImage", "data_classes/array/layers", "data_classes/array/layers/ArrayWithLayers", "data_classes/array/linear_algebra", "data_classes/array/linear_algebra/ArrayWithLinearAlgebra", "data_classes/array/losses", "data_classes/array/losses/ArrayWithLosses", "data_classes/array/manipulation", "data_classes/array/manipulation/ArrayWithManipulation", "data_classes/array/norms", "data_classes/array/norms/ArrayWithNorms", "data_classes/array/random", "data_classes/array/random/ArrayWithRandom", "data_classes/array/searching", "data_classes/array/searching/ArrayWithSearching", "data_classes/array/set", "data_classes/array/set/ArrayWithSet", "data_classes/array/sorting", "data_classes/array/sorting/ArrayWithSorting", "data_classes/array/statistical", "data_classes/array/statistical/ArrayWithStatistical", "data_classes/array/utility", "data_classes/array/utility/ArrayWithUtility", "data_classes/array/wrapping", "data_classes/array/wrapping/add_ivy_array_instance_methods", "data_classes/container/activations", "data_classes/container/activations/ContainerWithActivations", "data_classes/container/base", "data_classes/container/base/ContainerBase", "data_classes/container/container", "data_classes/container/container/Container", "data_classes/container/container/MultiDevContainer", "data_classes/container/creation", "data_classes/container/creation/ContainerWithCreation", "data_classes/container/data_type", "data_classes/container/data_type/ContainerWithDataTypes", "data_classes/container/device", "data_classes/container/device/ContainerWithDevice", "data_classes/container/elementwise", "data_classes/container/elementwise/ContainerWithElementwise", "data_classes/container/general", "data_classes/container/general/ContainerWithGeneral", "data_classes/container/gradients", "data_classes/container/gradients/ContainerWithGradients", "data_classes/container/image", "data_classes/container/image/ContainerWithImage", "data_classes/container/layers", "data_classes/container/layers/ContainerWithLayers", "data_classes/container/linear_algebra", "data_classes/container/linear_algebra/ContainerWithLinearAlgebra", "data_classes/container/losses", "data_classes/container/losses/ContainerWithLosses", "data_classes/container/manipulation", "data_classes/container/manipulation/ContainerWithManipulation", "data_classes/container/norms", "data_classes/container/norms/ContainerWithNorms", "data_classes/container/random", "data_classes/container/random/ContainerWithRandom", "data_classes/container/searching", "data_classes/container/searching/ContainerWithSearching", "data_classes/container/set", "data_classes/container/set/ContainerWithSet", "data_classes/container/sorting", "data_classes/container/sorting/ContainerWithSorting", "data_classes/container/statistical", "data_classes/container/statistical/ContainerWithStatistical", "data_classes/container/utility", "data_classes/container/utility/ContainerWithUtility", "data_classes/container/wrapping", "data_classes/container/wrapping/add_ivy_container_instance_methods", "deep_dive", "deep_dive/0_navigating_the_code", "deep_dive/10_function_arguments", "deep_dive/11_docstrings", "deep_dive/12_docstring_examples", "deep_dive/13_array_api_tests", "deep_dive/14_ivy_tests", "deep_dive/1_function_types", "deep_dive/2_backend_setting", "deep_dive/3_function_wrapping", "deep_dive/4_arrays", "deep_dive/5_containers", "deep_dive/6_data_types", "deep_dive/7_devices", "deep_dive/8_inplace_updates", "deep_dive/9_formatting", "design", "design/building_blocks", "design/ivy_as_a_framework", "design/ivy_as_a_framework/ivy_array", "design/ivy_as_a_framework/ivy_container", "design/ivy_as_a_framework/ivy_stateful_api", "design/ivy_as_a_transpiler", "docs/ivy", "docs/ivy_builder", "docs/ivy_ecosystem", "docs/ivy_gym", "docs/ivy_mech", "docs/ivy_memory", "docs/ivy_models", "docs/ivy_robot", "docs/ivy_vision", "extensions", "extensions/applied_libraries", "faq", "func_wrapper", "func_wrapper/handle_nestable", "func_wrapper/handle_out_argument", "func_wrapper/infer_device", "func_wrapper/infer_dtype", "func_wrapper/inputs_to_ivy_arrays", "func_wrapper/inputs_to_native_arrays", "func_wrapper/outputs_to_ivy_arrays", "func_wrapper/to_native_arrays_and_back", "functional/ivy", "functional/ivy/activations", "functional/ivy/activations/gelu", "functional/ivy/activations/leaky_relu", "functional/ivy/activations/relu", "functional/ivy/activations/sigmoid", "functional/ivy/activations/softmax", "functional/ivy/activations/softplus", "functional/ivy/activations/softplus/softplus_array", "functional/ivy/activations/softplus/softplus_container", "functional/ivy/activations/softplus/softplus_functional", "functional/ivy/activations/softplus/static_softplus_container", "functional/ivy/activations/tanh", "functional/ivy/compilation", "functional/ivy/compilation/compile", "functional/ivy/constants", "functional/ivy/creation", "functional/ivy/creation/arange", "functional/ivy/creation/arange/arange_functional", "functional/ivy/creation/arange/static_arange_container", "functional/ivy/creation/asarray", "functional/ivy/creation/asarray/asarray_array", "functional/ivy/creation/asarray/asarray_container", "functional/ivy/creation/asarray/asarray_functional", "functional/ivy/creation/asarray/static_asarray_container", "functional/ivy/creation/empty", "functional/ivy/creation/empty_like", "functional/ivy/creation/empty_like/empty_like_array", "functional/ivy/creation/empty_like/empty_like_container", "functional/ivy/creation/empty_like/empty_like_functional", "functional/ivy/creation/empty_like/static_empty_like_container", "functional/ivy/creation/eye", "functional/ivy/creation/eye/eye_functional", "functional/ivy/creation/eye/static_eye_container", "functional/ivy/creation/from_dlpack", "functional/ivy/creation/from_dlpack/from_dlpack_array", "functional/ivy/creation/from_dlpack/from_dlpack_container", "functional/ivy/creation/from_dlpack/from_dlpack_functional", "functional/ivy/creation/from_dlpack/static_from_dlpack_container", "functional/ivy/creation/full", "functional/ivy/creation/full_like", "functional/ivy/creation/full_like/full_like_array", "functional/ivy/creation/full_like/full_like_container", "functional/ivy/creation/full_like/full_like_functional", "functional/ivy/creation/full_like/static_full_like_container", "functional/ivy/creation/linspace", "functional/ivy/creation/linspace/linspace_functional", "functional/ivy/creation/linspace/static_linspace_container", "functional/ivy/creation/logspace", "functional/ivy/creation/logspace/logspace_functional", "functional/ivy/creation/logspace/static_logspace_container", "functional/ivy/creation/meshgrid", "functional/ivy/creation/meshgrid/meshgrid_array", "functional/ivy/creation/meshgrid/meshgrid_container", "functional/ivy/creation/meshgrid/meshgrid_functional", "functional/ivy/creation/meshgrid/static_meshgrid_container", "functional/ivy/creation/native_array", "functional/ivy/creation/native_array/native_array_array", "functional/ivy/creation/native_array/native_array_container", "functional/ivy/creation/native_array/native_array_functional", "functional/ivy/creation/native_array/static_native_array_container", "functional/ivy/creation/ones", "functional/ivy/creation/ones/ones_functional", "functional/ivy/creation/ones/static_ones_container", "functional/ivy/creation/ones_like", "functional/ivy/creation/ones_like/ones_like_array", "functional/ivy/creation/ones_like/ones_like_container", "functional/ivy/creation/ones_like/ones_like_functional", "functional/ivy/creation/ones_like/static_ones_like_container", "functional/ivy/creation/tril", "functional/ivy/creation/tril/static_tril_container", "functional/ivy/creation/tril/tril_array", "functional/ivy/creation/tril/tril_container", "functional/ivy/creation/tril/tril_functional", "functional/ivy/creation/triu", "functional/ivy/creation/triu/static_triu_container", "functional/ivy/creation/triu/triu_array", "functional/ivy/creation/triu/triu_container", "functional/ivy/creation/triu/triu_functional", "functional/ivy/creation/zeros", "functional/ivy/creation/zeros/static_zeros_container", "functional/ivy/creation/zeros/zeros_functional", "functional/ivy/creation/zeros_like", "functional/ivy/creation/zeros_like/static_zeros_like_container", "functional/ivy/creation/zeros_like/zeros_like_array", "functional/ivy/creation/zeros_like/zeros_like_container", "functional/ivy/creation/zeros_like/zeros_like_functional", "functional/ivy/data_type", "functional/ivy/data_type/DefaultDtype:\n    \"\"\"\"\"\"\n\n    # noinspection PyShadowingNames\n    def __init__", "functional/ivy/data_type/DefaultFloatDtype:\n    \"\"\"\"\"\"\n\n    # noinspection PyShadowingNames\n    def __init__", "functional/ivy/data_type/DefaultIntDtype:\n    \"\"\"\"\"\"\n\n    # noinspection PyShadowingNames\n    def __init__", "functional/ivy/data_type/as_ivy_dtype", "functional/ivy/data_type/as_native_dtype", "functional/ivy/data_type/astype", "functional/ivy/data_type/astype/astype_array", "functional/ivy/data_type/astype/astype_container", "functional/ivy/data_type/astype/astype_functional", "functional/ivy/data_type/astype/static_astype_container", "functional/ivy/data_type/broadcast_arrays", "functional/ivy/data_type/broadcast_arrays/broadcast_arrays_array", "functional/ivy/data_type/broadcast_arrays/broadcast_arrays_container", "functional/ivy/data_type/broadcast_arrays/broadcast_arrays_functional", "functional/ivy/data_type/broadcast_arrays/static_broadcast_arrays_container", "functional/ivy/data_type/broadcast_to", "functional/ivy/data_type/broadcast_to/broadcast_to_array", "functional/ivy/data_type/broadcast_to/broadcast_to_container", "functional/ivy/data_type/broadcast_to/broadcast_to_functional", "functional/ivy/data_type/broadcast_to/static_broadcast_to_container", "functional/ivy/data_type/can_cast", "functional/ivy/data_type/can_cast/can_cast_array", "functional/ivy/data_type/can_cast/can_cast_container", "functional/ivy/data_type/can_cast/can_cast_functional", "functional/ivy/data_type/can_cast/static_can_cast_container", "functional/ivy/data_type/closest_valid_dtype", "functional/ivy/data_type/default_dtype", "functional/ivy/data_type/default_float_dtype", "functional/ivy/data_type/default_int_dtype", "functional/ivy/data_type/dtype", "functional/ivy/data_type/dtype/dtype_array", "functional/ivy/data_type/dtype/dtype_container", "functional/ivy/data_type/dtype/dtype_functional", "functional/ivy/data_type/dtype_bits", "functional/ivy/data_type/finfo", "functional/ivy/data_type/finfo/finfo_array", "functional/ivy/data_type/finfo/finfo_container", "functional/ivy/data_type/finfo/finfo_functional", "functional/ivy/data_type/finfo/static_finfo_container", "functional/ivy/data_type/function_supported_dtypes", "functional/ivy/data_type/function_unsupported_dtypes", "functional/ivy/data_type/iinfo", "functional/ivy/data_type/iinfo/iinfo_array", "functional/ivy/data_type/iinfo/iinfo_container", "functional/ivy/data_type/iinfo/iinfo_functional", "functional/ivy/data_type/iinfo/static_iinfo_container", "functional/ivy/data_type/invalid_dtype", "functional/ivy/data_type/is_float_dtype", "functional/ivy/data_type/is_float_dtype/is_float_dtype_array", "functional/ivy/data_type/is_float_dtype/is_float_dtype_container", "functional/ivy/data_type/is_float_dtype/is_float_dtype_functional", "functional/ivy/data_type/is_float_dtype/static_is_float_dtype_container", "functional/ivy/data_type/is_int_dtype", "functional/ivy/data_type/is_int_dtype/is_int_dtype_array", "functional/ivy/data_type/is_int_dtype/is_int_dtype_container", "functional/ivy/data_type/is_int_dtype/is_int_dtype_functional", "functional/ivy/data_type/is_int_dtype/static_is_int_dtype_container", "functional/ivy/data_type/promote_types", "functional/ivy/data_type/result_type", "functional/ivy/data_type/result_type/result_type_array", "functional/ivy/data_type/result_type/result_type_container", "functional/ivy/data_type/result_type/result_type_functional", "functional/ivy/data_type/result_type/static_result_type_container", "functional/ivy/data_type/set_default_dtype", "functional/ivy/data_type/set_default_float_dtype", "functional/ivy/data_type/set_default_int_dtype", "functional/ivy/data_type/type_promote_arrays", "functional/ivy/data_type/unset_default_dtype", "functional/ivy/data_type/unset_default_float_dtype", "functional/ivy/data_type/unset_default_int_dtype", "functional/ivy/data_type/valid_dtype", "functional/ivy/device", "functional/ivy/device/DefaultDevice:\n    \"\"\"\"\"\"\n\n    # noinspection PyShadowingNames\n    def __init__", "functional/ivy/device/DevClonedItem", "functional/ivy/device/DevClonedIter", "functional/ivy/device/DevClonedNest", "functional/ivy/device/DevDistItem", "functional/ivy/device/DevDistIter", "functional/ivy/device/DevDistNest", "functional/ivy/device/DevManager:\n    \"\"\"\"\"\"\n\n    def __init__", "functional/ivy/device/DevMapper", "functional/ivy/device/DevMapperMultiProc", "functional/ivy/device/MultiDev:\n    def __init__", "functional/ivy/device/MultiDevItem", "functional/ivy/device/MultiDevIter", "functional/ivy/device/MultiDevNest", "functional/ivy/device/Profiler", "functional/ivy/device/as_ivy_dev", "functional/ivy/device/as_native_dev", "functional/ivy/device/clear_mem_on_dev", "functional/ivy/device/default_device", "functional/ivy/device/dev", "functional/ivy/device/dev_clone", "functional/ivy/device/dev_clone_array", "functional/ivy/device/dev_clone_iter", "functional/ivy/device/dev_clone_nest", "functional/ivy/device/dev_dist", "functional/ivy/device/dev_dist_array", "functional/ivy/device/dev_dist_iter", "functional/ivy/device/dev_dist_nest", "functional/ivy/device/dev_unify", "functional/ivy/device/dev_unify_array", "functional/ivy/device/dev_unify_iter", "functional/ivy/device/dev_unify_nest", "functional/ivy/device/dev_util", "functional/ivy/device/get_all_ivy_arrays_on_dev", "functional/ivy/device/gpu_is_available", "functional/ivy/device/num_cpu_cores", "functional/ivy/device/num_gpus", "functional/ivy/device/num_ivy_arrays_on_dev", "functional/ivy/device/percent_used_mem_on_dev", "functional/ivy/device/print_all_ivy_arrays_on_dev", "functional/ivy/device/set_default_device", "functional/ivy/device/set_split_factor", "functional/ivy/device/split_factor", "functional/ivy/device/split_func_call", "functional/ivy/device/to_device", "functional/ivy/device/total_mem_on_dev", "functional/ivy/device/tpu_is_available", "functional/ivy/device/unset_default_device", "functional/ivy/device/used_mem_on_dev", "functional/ivy/elementwise", "functional/ivy/elementwise/abs", "functional/ivy/elementwise/abs/abs_array", "functional/ivy/elementwise/abs/abs_container", "functional/ivy/elementwise/abs/abs_functional", "functional/ivy/elementwise/abs/static_abs_container", "functional/ivy/elementwise/acos", "functional/ivy/elementwise/acos/acos_array", "functional/ivy/elementwise/acos/acos_container", "functional/ivy/elementwise/acos/acos_functional", "functional/ivy/elementwise/acosh", "functional/ivy/elementwise/acosh/acosh_array", "functional/ivy/elementwise/acosh/acosh_container", "functional/ivy/elementwise/acosh/acosh_functional", "functional/ivy/elementwise/add", "functional/ivy/elementwise/add/add_array", "functional/ivy/elementwise/add/add_container", "functional/ivy/elementwise/add/add_functional", "functional/ivy/elementwise/add/static_add_container", "functional/ivy/elementwise/asin", "functional/ivy/elementwise/asin/asin_array", "functional/ivy/elementwise/asin/asin_container", "functional/ivy/elementwise/asin/asin_functional", "functional/ivy/elementwise/asinh", "functional/ivy/elementwise/asinh/asinh_array", "functional/ivy/elementwise/asinh/asinh_container", "functional/ivy/elementwise/asinh/asinh_functional", "functional/ivy/elementwise/asinh/static_asinh_container", "functional/ivy/elementwise/atan", "functional/ivy/elementwise/atan/atan_array", "functional/ivy/elementwise/atan/atan_container", "functional/ivy/elementwise/atan/atan_functional", "functional/ivy/elementwise/atan2", "functional/ivy/elementwise/atan2/atan2_array", "functional/ivy/elementwise/atan2/atan2_container", "functional/ivy/elementwise/atan2/atan2_functional", "functional/ivy/elementwise/atanh", "functional/ivy/elementwise/atanh/atanh_array", "functional/ivy/elementwise/atanh/atanh_container", "functional/ivy/elementwise/atanh/atanh_functional", "functional/ivy/elementwise/bitwise_and", "functional/ivy/elementwise/bitwise_and/bitwise_and_array", "functional/ivy/elementwise/bitwise_and/bitwise_and_container", "functional/ivy/elementwise/bitwise_and/bitwise_and_functional", "functional/ivy/elementwise/bitwise_invert", "functional/ivy/elementwise/bitwise_invert/bitwise_invert_array", "functional/ivy/elementwise/bitwise_invert/bitwise_invert_container", "functional/ivy/elementwise/bitwise_invert/bitwise_invert_functional", "functional/ivy/elementwise/bitwise_left_shift", "functional/ivy/elementwise/bitwise_left_shift/bitwise_left_shift_array", "functional/ivy/elementwise/bitwise_left_shift/bitwise_left_shift_container", "functional/ivy/elementwise/bitwise_left_shift/bitwise_left_shift_functional", "functional/ivy/elementwise/bitwise_or", "functional/ivy/elementwise/bitwise_or/bitwise_or_array", "functional/ivy/elementwise/bitwise_or/bitwise_or_container", "functional/ivy/elementwise/bitwise_or/bitwise_or_functional", "functional/ivy/elementwise/bitwise_right_shift", "functional/ivy/elementwise/bitwise_right_shift/bitwise_right_shift_array", "functional/ivy/elementwise/bitwise_right_shift/bitwise_right_shift_container", "functional/ivy/elementwise/bitwise_right_shift/bitwise_right_shift_functional", "functional/ivy/elementwise/bitwise_xor", "functional/ivy/elementwise/bitwise_xor/bitwise_xor_array", "functional/ivy/elementwise/bitwise_xor/bitwise_xor_container", "functional/ivy/elementwise/bitwise_xor/bitwise_xor_functional", "functional/ivy/elementwise/ceil", "functional/ivy/elementwise/ceil/ceil_array", "functional/ivy/elementwise/ceil/ceil_container", "functional/ivy/elementwise/ceil/ceil_functional", "functional/ivy/elementwise/cos", "functional/ivy/elementwise/cos/cos_array", "functional/ivy/elementwise/cos/cos_container", "functional/ivy/elementwise/cos/cos_functional", "functional/ivy/elementwise/cosh", "functional/ivy/elementwise/cosh/cosh_array", "functional/ivy/elementwise/cosh/cosh_container", "functional/ivy/elementwise/cosh/cosh_functional", "functional/ivy/elementwise/divide", "functional/ivy/elementwise/divide/divide_array", "functional/ivy/elementwise/divide/divide_container", "functional/ivy/elementwise/divide/divide_functional", "functional/ivy/elementwise/divide/static_divide_container", "functional/ivy/elementwise/equal", "functional/ivy/elementwise/equal/equal_array", "functional/ivy/elementwise/equal/equal_container", "functional/ivy/elementwise/equal/equal_functional", "functional/ivy/elementwise/erf", "functional/ivy/elementwise/erf/erf_array", "functional/ivy/elementwise/erf/erf_container", "functional/ivy/elementwise/erf/erf_functional", "functional/ivy/elementwise/exp", "functional/ivy/elementwise/exp/exp_array", "functional/ivy/elementwise/exp/exp_container", "functional/ivy/elementwise/exp/exp_functional", "functional/ivy/elementwise/expm1", "functional/ivy/elementwise/expm1/expm1_array", "functional/ivy/elementwise/expm1/expm1_container", "functional/ivy/elementwise/expm1/expm1_functional", "functional/ivy/elementwise/floor", "functional/ivy/elementwise/floor/floor_array", "functional/ivy/elementwise/floor/floor_container", "functional/ivy/elementwise/floor/floor_functional", "functional/ivy/elementwise/floor_divide", "functional/ivy/elementwise/floor_divide/floor_divide_array", "functional/ivy/elementwise/floor_divide/floor_divide_container", "functional/ivy/elementwise/floor_divide/floor_divide_functional", "functional/ivy/elementwise/greater", "functional/ivy/elementwise/greater/greater_array", "functional/ivy/elementwise/greater/greater_container", "functional/ivy/elementwise/greater/greater_functional", "functional/ivy/elementwise/greater_equal", "functional/ivy/elementwise/greater_equal/greater_equal_array", "functional/ivy/elementwise/greater_equal/greater_equal_container", "functional/ivy/elementwise/greater_equal/greater_equal_functional", "functional/ivy/elementwise/isfinite", "functional/ivy/elementwise/isfinite/isfinite_array", "functional/ivy/elementwise/isfinite/isfinite_container", "functional/ivy/elementwise/isfinite/isfinite_functional", "functional/ivy/elementwise/isinf", "functional/ivy/elementwise/isinf/isinf_array", "functional/ivy/elementwise/isinf/isinf_container", "functional/ivy/elementwise/isinf/isinf_functional", "functional/ivy/elementwise/isnan", "functional/ivy/elementwise/isnan/isnan_array", "functional/ivy/elementwise/isnan/isnan_container", "functional/ivy/elementwise/isnan/isnan_functional", "functional/ivy/elementwise/less", "functional/ivy/elementwise/less/less_array", "functional/ivy/elementwise/less/less_container", "functional/ivy/elementwise/less/less_functional", "functional/ivy/elementwise/less_equal", "functional/ivy/elementwise/less_equal/less_equal_array", "functional/ivy/elementwise/less_equal/less_equal_container", "functional/ivy/elementwise/less_equal/less_equal_functional", "functional/ivy/elementwise/log", "functional/ivy/elementwise/log/log_array", "functional/ivy/elementwise/log/log_container", "functional/ivy/elementwise/log/log_functional", "functional/ivy/elementwise/log10", "functional/ivy/elementwise/log10/log10_array", "functional/ivy/elementwise/log10/log10_container", "functional/ivy/elementwise/log10/log10_functional", "functional/ivy/elementwise/log1p", "functional/ivy/elementwise/log1p/log1p_array", "functional/ivy/elementwise/log1p/log1p_container", "functional/ivy/elementwise/log1p/log1p_functional", "functional/ivy/elementwise/log2", "functional/ivy/elementwise/log2/log2_array", "functional/ivy/elementwise/log2/log2_container", "functional/ivy/elementwise/log2/log2_functional", "functional/ivy/elementwise/logaddexp", "functional/ivy/elementwise/logaddexp/logaddexp_array", "functional/ivy/elementwise/logaddexp/logaddexp_container", "functional/ivy/elementwise/logaddexp/logaddexp_functional", "functional/ivy/elementwise/logical_and", "functional/ivy/elementwise/logical_and/logical_and_array", "functional/ivy/elementwise/logical_and/logical_and_container", "functional/ivy/elementwise/logical_and/logical_and_functional", "functional/ivy/elementwise/logical_not", "functional/ivy/elementwise/logical_not/logical_not_array", "functional/ivy/elementwise/logical_not/logical_not_container", "functional/ivy/elementwise/logical_not/logical_not_functional", "functional/ivy/elementwise/logical_or", "functional/ivy/elementwise/logical_or/logical_or_array", "functional/ivy/elementwise/logical_or/logical_or_container", "functional/ivy/elementwise/logical_or/logical_or_functional", "functional/ivy/elementwise/logical_xor", "functional/ivy/elementwise/logical_xor/logical_xor_array", "functional/ivy/elementwise/logical_xor/logical_xor_container", "functional/ivy/elementwise/logical_xor/logical_xor_functional", "functional/ivy/elementwise/maximum", "functional/ivy/elementwise/minimum", "functional/ivy/elementwise/multiply", "functional/ivy/elementwise/multiply/multiply_array", "functional/ivy/elementwise/multiply/multiply_container", "functional/ivy/elementwise/multiply/multiply_functional", "functional/ivy/elementwise/multiply/static_multiply_container", "functional/ivy/elementwise/negative", "functional/ivy/elementwise/negative/negative_array", "functional/ivy/elementwise/negative/negative_container", "functional/ivy/elementwise/negative/negative_functional", "functional/ivy/elementwise/not_equal", "functional/ivy/elementwise/not_equal/not_equal_array", "functional/ivy/elementwise/not_equal/not_equal_container", "functional/ivy/elementwise/not_equal/not_equal_functional", "functional/ivy/elementwise/positive", "functional/ivy/elementwise/positive/positive_array", "functional/ivy/elementwise/positive/positive_container", "functional/ivy/elementwise/positive/positive_functional", "functional/ivy/elementwise/pow", "functional/ivy/elementwise/pow/pow_array", "functional/ivy/elementwise/pow/pow_container", "functional/ivy/elementwise/pow/pow_functional", "functional/ivy/elementwise/remainder", "functional/ivy/elementwise/remainder/remainder_array", "functional/ivy/elementwise/remainder/remainder_container", "functional/ivy/elementwise/remainder/remainder_functional", "functional/ivy/elementwise/round", "functional/ivy/elementwise/round/round_array", "functional/ivy/elementwise/round/round_container", "functional/ivy/elementwise/round/round_functional", "functional/ivy/elementwise/sign", "functional/ivy/elementwise/sign/sign_array", "functional/ivy/elementwise/sign/sign_container", "functional/ivy/elementwise/sign/sign_functional", "functional/ivy/elementwise/sign/static_sign_container", "functional/ivy/elementwise/sin", "functional/ivy/elementwise/sin/sin_array", "functional/ivy/elementwise/sin/sin_container", "functional/ivy/elementwise/sin/sin_functional", "functional/ivy/elementwise/sin/static_sin_container", "functional/ivy/elementwise/sinh", "functional/ivy/elementwise/sinh/sinh_array", "functional/ivy/elementwise/sinh/sinh_container", "functional/ivy/elementwise/sinh/sinh_functional", "functional/ivy/elementwise/sinh/static_sinh_container", "functional/ivy/elementwise/sqrt", "functional/ivy/elementwise/sqrt/sqrt_array", "functional/ivy/elementwise/sqrt/sqrt_container", "functional/ivy/elementwise/sqrt/sqrt_functional", "functional/ivy/elementwise/square", "functional/ivy/elementwise/square/square_array", "functional/ivy/elementwise/square/square_container", "functional/ivy/elementwise/square/square_functional", "functional/ivy/elementwise/subtract", "functional/ivy/elementwise/subtract/static_subtract_container", "functional/ivy/elementwise/subtract/subtract_array", "functional/ivy/elementwise/subtract/subtract_container", "functional/ivy/elementwise/subtract/subtract_functional", "functional/ivy/elementwise/tan", "functional/ivy/elementwise/tan/static_tan_container", "functional/ivy/elementwise/tan/tan_array", "functional/ivy/elementwise/tan/tan_container", "functional/ivy/elementwise/tan/tan_functional", "functional/ivy/elementwise/tanh", "functional/ivy/elementwise/tanh/static_tanh_container", "functional/ivy/elementwise/tanh/tanh_array", "functional/ivy/elementwise/tanh/tanh_container", "functional/ivy/elementwise/tanh/tanh_functional", "functional/ivy/elementwise/trunc", "functional/ivy/elementwise/trunc/trunc_array", "functional/ivy/elementwise/trunc/trunc_container", "functional/ivy/elementwise/trunc/trunc_functional", "functional/ivy/general", "functional/ivy/general/all_equal", "functional/ivy/general/all_equal/all_equal_array", "functional/ivy/general/all_equal/all_equal_container", "functional/ivy/general/all_equal/all_equal_functional", "functional/ivy/general/all_equal/static_all_equal_container", "functional/ivy/general/arg_info", "functional/ivy/general/arg_names", "functional/ivy/general/array_equal", "functional/ivy/general/arrays_equal", "functional/ivy/general/assert_supports_inplace", "functional/ivy/general/cache_fn", "functional/ivy/general/clip_matrix_norm", "functional/ivy/general/clip_vector_norm", "functional/ivy/general/clip_vector_norm/clip_vector_norm_container", "functional/ivy/general/clip_vector_norm/clip_vector_norm_functional", "functional/ivy/general/container_types", "functional/ivy/general/copy_array", "functional/ivy/general/cumprod", "functional/ivy/general/cumsum", "functional/ivy/general/current_backend_str", "functional/ivy/general/default", "functional/ivy/general/einops_rearrange", "functional/ivy/general/einops_reduce", "functional/ivy/general/einops_repeat", "functional/ivy/general/exists", "functional/ivy/general/floormod", "functional/ivy/general/fourier_encode", "functional/ivy/general/gather", "functional/ivy/general/gather_nd", "functional/ivy/general/gather_nd/gather_nd_array", "functional/ivy/general/gather_nd/gather_nd_container", "functional/ivy/general/gather_nd/gather_nd_functional", "functional/ivy/general/gather_nd/static_gather_nd_container", "functional/ivy/general/get_all_arrays_in_memory", "functional/ivy/general/get_min_base", "functional/ivy/general/get_min_denominator", "functional/ivy/general/get_num_dims", "functional/ivy/general/get_referrers_recursive", "functional/ivy/general/has_nans", "functional/ivy/general/indices_where", "functional/ivy/general/inplace_arrays_supported", "functional/ivy/general/inplace_decrement", "functional/ivy/general/inplace_increment", "functional/ivy/general/inplace_update", "functional/ivy/general/inplace_variables_supported", "functional/ivy/general/is_array", "functional/ivy/general/is_ivy_array", "functional/ivy/general/is_ivy_container", "functional/ivy/general/is_native_array", "functional/ivy/general/match_kwargs", "functional/ivy/general/multiprocessing", "functional/ivy/general/num_arrays_in_memory", "functional/ivy/general/one_hot", "functional/ivy/general/print_all_arrays_in_memory", "functional/ivy/general/queue_timeout", "functional/ivy/general/scatter_flat", "functional/ivy/general/scatter_nd", "functional/ivy/general/set_min_base", "functional/ivy/general/set_min_denominator", "functional/ivy/general/set_queue_timeout", "functional/ivy/general/set_shape_array_mode", "functional/ivy/general/set_tmp_dir", "functional/ivy/general/shape", "functional/ivy/general/shape_array_mode", "functional/ivy/general/shape_to_tuple", "functional/ivy/general/stable_divide", "functional/ivy/general/stable_pow", "functional/ivy/general/supports_inplace", "functional/ivy/general/tmp_dir", "functional/ivy/general/to_list", "functional/ivy/general/to_numpy", "functional/ivy/general/to_numpy/static_to_numpy_container", "functional/ivy/general/to_numpy/to_numpy_array", "functional/ivy/general/to_numpy/to_numpy_container", "functional/ivy/general/to_numpy/to_numpy_functional", "functional/ivy/general/to_scalar", "functional/ivy/general/try_else_none", "functional/ivy/general/unset_shape_array_mode", "functional/ivy/general/unstack", "functional/ivy/general/value_is_nan", "functional/ivy/gradients", "functional/ivy/gradients/GradientTracking:\n    \"\"\"\"\"\"\n\n    # noinspection PyShadowingNames\n    def __init__", "functional/ivy/gradients/adam_step", "functional/ivy/gradients/adam_step/adam_step_array", "functional/ivy/gradients/adam_step/adam_step_container", "functional/ivy/gradients/adam_step/adam_step_functional", "functional/ivy/gradients/adam_step/static_adam_step_container", "functional/ivy/gradients/adam_update", "functional/ivy/gradients/adam_update/adam_update_container", "functional/ivy/gradients/adam_update/adam_update_functional", "functional/ivy/gradients/adam_update/static_adam_update_container", "functional/ivy/gradients/execute_with_gradients", "functional/ivy/gradients/gradient_descent_update", "functional/ivy/gradients/gradient_descent_update/gradient_descent_update_container", "functional/ivy/gradients/gradient_descent_update/gradient_descent_update_functional", "functional/ivy/gradients/gradient_descent_update/static_gradient_descent_update_container", "functional/ivy/gradients/is_variable", "functional/ivy/gradients/is_variable/is_variable_container", "functional/ivy/gradients/is_variable/is_variable_functional", "functional/ivy/gradients/is_variable/static_is_variable_container", "functional/ivy/gradients/lamb_update", "functional/ivy/gradients/lamb_update/lamb_update_container", "functional/ivy/gradients/lamb_update/lamb_update_functional", "functional/ivy/gradients/lamb_update/static_lamb_update_container", "functional/ivy/gradients/lars_update", "functional/ivy/gradients/lars_update/lars_update_container", "functional/ivy/gradients/lars_update/lars_update_functional", "functional/ivy/gradients/lars_update/static_lars_update_container", "functional/ivy/gradients/optimizer_update", "functional/ivy/gradients/optimizer_update/optimizer_update_container", "functional/ivy/gradients/optimizer_update/optimizer_update_functional", "functional/ivy/gradients/optimizer_update/static_optimizer_update_container", "functional/ivy/gradients/set_with_grads", "functional/ivy/gradients/stop_gradient", "functional/ivy/gradients/unset_with_grads", "functional/ivy/gradients/variable", "functional/ivy/gradients/variable_data", "functional/ivy/gradients/with_grads", "functional/ivy/layers", "functional/ivy/layers/conv1d", "functional/ivy/layers/conv1d_transpose", "functional/ivy/layers/conv2d", "functional/ivy/layers/conv2d_transpose", "functional/ivy/layers/conv3d", "functional/ivy/layers/conv3d_transpose", "functional/ivy/layers/depthwise_conv2d", "functional/ivy/layers/dropout", "functional/ivy/layers/linear", "functional/ivy/layers/lstm_update", "functional/ivy/layers/multi_head_attention", "functional/ivy/layers/scaled_dot_product_attention", "functional/ivy/linear_algebra", "functional/ivy/linear_algebra/cholesky", "functional/ivy/linear_algebra/cholesky/cholesky_array", "functional/ivy/linear_algebra/cholesky/cholesky_container", "functional/ivy/linear_algebra/cholesky/cholesky_functional", "functional/ivy/linear_algebra/cholesky/static_cholesky_container", "functional/ivy/linear_algebra/cross", "functional/ivy/linear_algebra/cross/cross_array", "functional/ivy/linear_algebra/cross/cross_functional", "functional/ivy/linear_algebra/det", "functional/ivy/linear_algebra/det/det_array", "functional/ivy/linear_algebra/det/det_functional", "functional/ivy/linear_algebra/diagonal", "functional/ivy/linear_algebra/diagonal/diagonal_array", "functional/ivy/linear_algebra/diagonal/diagonal_functional", "functional/ivy/linear_algebra/eigh", "functional/ivy/linear_algebra/eigh/eigh_array", "functional/ivy/linear_algebra/eigh/eigh_functional", "functional/ivy/linear_algebra/eigvalsh", "functional/ivy/linear_algebra/eigvalsh/eigvalsh_array", "functional/ivy/linear_algebra/eigvalsh/eigvalsh_functional", "functional/ivy/linear_algebra/inv", "functional/ivy/linear_algebra/inv/inv_array", "functional/ivy/linear_algebra/inv/inv_functional", "functional/ivy/linear_algebra/matmul", "functional/ivy/linear_algebra/matmul/matmul_array", "functional/ivy/linear_algebra/matmul/matmul_container", "functional/ivy/linear_algebra/matmul/matmul_functional", "functional/ivy/linear_algebra/matrix_norm", "functional/ivy/linear_algebra/matrix_norm/matrix_norm_array", "functional/ivy/linear_algebra/matrix_norm/matrix_norm_functional", "functional/ivy/linear_algebra/matrix_power", "functional/ivy/linear_algebra/matrix_rank", "functional/ivy/linear_algebra/matrix_rank/matrix_rank_array", "functional/ivy/linear_algebra/matrix_rank/matrix_rank_functional", "functional/ivy/linear_algebra/matrix_transpose", "functional/ivy/linear_algebra/matrix_transpose/matrix_transpose_array", "functional/ivy/linear_algebra/matrix_transpose/matrix_transpose_functional", "functional/ivy/linear_algebra/outer", "functional/ivy/linear_algebra/outer/outer_array", "functional/ivy/linear_algebra/outer/outer_functional", "functional/ivy/linear_algebra/pinv", "functional/ivy/linear_algebra/pinv/pinv_array", "functional/ivy/linear_algebra/pinv/pinv_functional", "functional/ivy/linear_algebra/qr", "functional/ivy/linear_algebra/qr/qr_array", "functional/ivy/linear_algebra/qr/qr_functional", "functional/ivy/linear_algebra/slogdet", "functional/ivy/linear_algebra/solve", "functional/ivy/linear_algebra/solve/solve_array", "functional/ivy/linear_algebra/solve/solve_functional", "functional/ivy/linear_algebra/svd", "functional/ivy/linear_algebra/svd/svd_array", "functional/ivy/linear_algebra/svd/svd_functional", "functional/ivy/linear_algebra/svdvals", "functional/ivy/linear_algebra/svdvals/svdvals_array", "functional/ivy/linear_algebra/svdvals/svdvals_functional", "functional/ivy/linear_algebra/tensordot", "functional/ivy/linear_algebra/tensordot/tensordot_array", "functional/ivy/linear_algebra/tensordot/tensordot_functional", "functional/ivy/linear_algebra/trace", "functional/ivy/linear_algebra/trace/trace_array", "functional/ivy/linear_algebra/trace/trace_functional", "functional/ivy/linear_algebra/vecdot", "functional/ivy/linear_algebra/vecdot/vecdot_array", "functional/ivy/linear_algebra/vecdot/vecdot_functional", "functional/ivy/linear_algebra/vector_norm", "functional/ivy/linear_algebra/vector_norm/vector_norm_array", "functional/ivy/linear_algebra/vector_norm/vector_norm_functional", "functional/ivy/linear_algebra/vector_to_skew_symmetric_matrix", "functional/ivy/linear_algebra/vector_to_skew_symmetric_matrix/vector_to_skew_symmetric_matrix_array", "functional/ivy/linear_algebra/vector_to_skew_symmetric_matrix/vector_to_skew_symmetric_matrix_functional", "functional/ivy/losses", "functional/ivy/losses/binary_cross_entropy", "functional/ivy/losses/binary_cross_entropy/binary_cross_entropy_array", "functional/ivy/losses/binary_cross_entropy/binary_cross_entropy_container", "functional/ivy/losses/binary_cross_entropy/binary_cross_entropy_functional", "functional/ivy/losses/binary_cross_entropy/static_binary_cross_entropy_container", "functional/ivy/losses/cross_entropy", "functional/ivy/losses/cross_entropy/cross_entropy_array", "functional/ivy/losses/cross_entropy/cross_entropy_container", "functional/ivy/losses/cross_entropy/cross_entropy_functional", "functional/ivy/losses/cross_entropy/static_cross_entropy_container", "functional/ivy/losses/sparse_cross_entropy", "functional/ivy/losses/sparse_cross_entropy/sparse_cross_entropy_array", "functional/ivy/losses/sparse_cross_entropy/sparse_cross_entropy_container", "functional/ivy/losses/sparse_cross_entropy/sparse_cross_entropy_functional", "functional/ivy/losses/sparse_cross_entropy/static_sparse_cross_entropy_container", "functional/ivy/manipulation", "functional/ivy/manipulation/clip", "functional/ivy/manipulation/clip/clip_array", "functional/ivy/manipulation/clip/clip_container", "functional/ivy/manipulation/clip/clip_functional", "functional/ivy/manipulation/clip/static_clip_container", "functional/ivy/manipulation/concat", "functional/ivy/manipulation/concat/concat_array", "functional/ivy/manipulation/concat/concat_container", "functional/ivy/manipulation/concat/concat_functional", "functional/ivy/manipulation/constant_pad", "functional/ivy/manipulation/constant_pad/constant_pad_array", "functional/ivy/manipulation/constant_pad/constant_pad_container", "functional/ivy/manipulation/constant_pad/constant_pad_functional", "functional/ivy/manipulation/expand_dims", "functional/ivy/manipulation/expand_dims/expand_dims_array", "functional/ivy/manipulation/expand_dims/expand_dims_container", "functional/ivy/manipulation/expand_dims/expand_dims_functional", "functional/ivy/manipulation/flip", "functional/ivy/manipulation/flip/flip_array", "functional/ivy/manipulation/flip/flip_container", "functional/ivy/manipulation/flip/flip_functional", "functional/ivy/manipulation/permute_dims", "functional/ivy/manipulation/permute_dims/permute_dims_array", "functional/ivy/manipulation/permute_dims/permute_dims_container", "functional/ivy/manipulation/permute_dims/permute_dims_functional", "functional/ivy/manipulation/repeat", "functional/ivy/manipulation/repeat/repeat_array", "functional/ivy/manipulation/repeat/repeat_container", "functional/ivy/manipulation/repeat/repeat_functional", "functional/ivy/manipulation/reshape", "functional/ivy/manipulation/reshape/reshape_array", "functional/ivy/manipulation/reshape/reshape_container", "functional/ivy/manipulation/reshape/reshape_functional", "functional/ivy/manipulation/roll", "functional/ivy/manipulation/roll/roll_array", "functional/ivy/manipulation/roll/roll_container", "functional/ivy/manipulation/roll/roll_functional", "functional/ivy/manipulation/roll/static_roll_container", "functional/ivy/manipulation/split", "functional/ivy/manipulation/squeeze", "functional/ivy/manipulation/squeeze/squeeze_array", "functional/ivy/manipulation/squeeze/squeeze_container", "functional/ivy/manipulation/squeeze/squeeze_functional", "functional/ivy/manipulation/stack", "functional/ivy/manipulation/stack/stack_array", "functional/ivy/manipulation/stack/stack_container", "functional/ivy/manipulation/stack/stack_functional", "functional/ivy/manipulation/swapaxes", "functional/ivy/manipulation/swapaxes/swapaxes_array", "functional/ivy/manipulation/swapaxes/swapaxes_container", "functional/ivy/manipulation/swapaxes/swapaxes_functional", "functional/ivy/manipulation/tile", "functional/ivy/manipulation/tile/tile_array", "functional/ivy/manipulation/tile/tile_container", "functional/ivy/manipulation/tile/tile_functional", "functional/ivy/manipulation/zero_pad", "functional/ivy/manipulation/zero_pad/zero_pad_array", "functional/ivy/manipulation/zero_pad/zero_pad_container", "functional/ivy/manipulation/zero_pad/zero_pad_functional", "functional/ivy/meta", "functional/ivy/meta/fomaml_step", "functional/ivy/meta/maml_step", "functional/ivy/meta/reptile_step", "functional/ivy/nest", "functional/ivy/nest/all_nested_indices", "functional/ivy/nest/copy_nest", "functional/ivy/nest/index_nest", "functional/ivy/nest/insert_into_nest_at_index", "functional/ivy/nest/insert_into_nest_at_indices", "functional/ivy/nest/map", "functional/ivy/nest/map_nest_at_index", "functional/ivy/nest/map_nest_at_indices", "functional/ivy/nest/multi_index_nest", "functional/ivy/nest/nested_any", "functional/ivy/nest/nested_indices_where", "functional/ivy/nest/nested_map", "functional/ivy/nest/nested_multi_map", "functional/ivy/nest/prune_nest_at_index", "functional/ivy/nest/prune_nest_at_indices", "functional/ivy/nest/set_nest_at_index", "functional/ivy/nest/set_nest_at_indices", "functional/ivy/norms", "functional/ivy/norms/layer_norm", "functional/ivy/norms/layer_norm/layer_norm_array", "functional/ivy/norms/layer_norm/layer_norm_container", "functional/ivy/norms/layer_norm/layer_norm_functional", "functional/ivy/norms/layer_norm/static_layer_norm_container", "functional/ivy/random", "functional/ivy/random/multinomial", "functional/ivy/random/randint", "functional/ivy/random/randint/randint_functional", "functional/ivy/random/randint/static_randint_container", "functional/ivy/random/random_normal", "functional/ivy/random/random_uniform", "functional/ivy/random/random_uniform/random_uniform_container", "functional/ivy/random/random_uniform/random_uniform_functional", "functional/ivy/random/random_uniform/static_random_uniform_container", "functional/ivy/random/seed", "functional/ivy/random/shuffle", "functional/ivy/searching", "functional/ivy/searching/argmax", "functional/ivy/searching/argmin", "functional/ivy/searching/nonzero", "functional/ivy/searching/where", "functional/ivy/set", "functional/ivy/set/unique_all", "functional/ivy/set/unique_counts", "functional/ivy/set/unique_counts/static_unique_counts_container", "functional/ivy/set/unique_counts/unique_counts_array", "functional/ivy/set/unique_counts/unique_counts_container", "functional/ivy/set/unique_counts/unique_counts_functional", "functional/ivy/set/unique_inverse", "functional/ivy/set/unique_values", "functional/ivy/sorting", "functional/ivy/sorting/argsort", "functional/ivy/sorting/argsort/argsort_array", "functional/ivy/sorting/argsort/argsort_container", "functional/ivy/sorting/argsort/argsort_functional", "functional/ivy/sorting/argsort/static_argsort_container", "functional/ivy/sorting/sort", "functional/ivy/sorting/sort/sort_array", "functional/ivy/sorting/sort/sort_container", "functional/ivy/sorting/sort/sort_functional", "functional/ivy/sorting/sort/static_sort_container", "functional/ivy/statistical", "functional/ivy/statistical/einsum", "functional/ivy/statistical/einsum/einsum_array", "functional/ivy/statistical/einsum/einsum_container", "functional/ivy/statistical/einsum/einsum_functional", "functional/ivy/statistical/max", "functional/ivy/statistical/max/max_array", "functional/ivy/statistical/max/max_container", "functional/ivy/statistical/max/max_functional", "functional/ivy/statistical/mean", "functional/ivy/statistical/mean/mean_array", "functional/ivy/statistical/mean/mean_container", "functional/ivy/statistical/mean/mean_functional", "functional/ivy/statistical/min", "functional/ivy/statistical/min/min_array", "functional/ivy/statistical/min/min_container", "functional/ivy/statistical/min/min_functional", "functional/ivy/statistical/prod", "functional/ivy/statistical/prod/prod_array", "functional/ivy/statistical/prod/prod_container", "functional/ivy/statistical/prod/prod_functional", "functional/ivy/statistical/std", "functional/ivy/statistical/std/std_array", "functional/ivy/statistical/std/std_container", "functional/ivy/statistical/std/std_functional", "functional/ivy/statistical/sum", "functional/ivy/statistical/sum/sum_array", "functional/ivy/statistical/sum/sum_container", "functional/ivy/statistical/sum/sum_functional", "functional/ivy/statistical/var", "functional/ivy/statistical/var/var_array", "functional/ivy/statistical/var/var_container", "functional/ivy/statistical/var/var_functional", "functional/ivy/utility", "functional/ivy/utility/all", "functional/ivy/utility/all/all_array", "functional/ivy/utility/all/all_container", "functional/ivy/utility/all/all_functional", "functional/ivy/utility/all/static_all_container", "functional/ivy/utility/any", "functional/ivy/utility/any/any_array", "functional/ivy/utility/any/any_container", "functional/ivy/utility/any/any_functional", "functional/ivy/utility/any/static_any_container", "index", "index_append", "index_prepend", "inspection", "inspection/add_array_specs", "inspection/fn_array_spec", "roadmap", "stateful/activations", "stateful/activations/GEGLU", "stateful/activations/GELU", "stateful/converters", "stateful/converters/to_ivy_module", "stateful/initializers", "stateful/initializers/Constant:\n    def __init__", "stateful/initializers/FirstLayerSiren", "stateful/initializers/GlorotUniform", "stateful/initializers/KaimingNormal:\n    def __init__", "stateful/initializers/Ones", "stateful/initializers/Siren", "stateful/initializers/Uniform:\n    def __init__", "stateful/initializers/Zeros", "stateful/layers", "stateful/layers/Conv1D", "stateful/layers/Conv1DTranspose", "stateful/layers/Conv2D", "stateful/layers/Conv2DTranspose", "stateful/layers/Conv3D", "stateful/layers/Conv3DTranspose", "stateful/layers/DepthwiseConv2D", "stateful/layers/Dropout", "stateful/layers/LSTM", "stateful/layers/Linear", "stateful/layers/MultiHeadAttention", "stateful/module", "stateful/module/Module", "stateful/norms", "stateful/norms/LayerNorm", "stateful/optimizers", "stateful/optimizers/Adam", "stateful/optimizers/LAMB", "stateful/optimizers/LARS", "stateful/optimizers/Optimizer", "stateful/optimizers/SGD", "stateful/sequential", "stateful/sequential/Sequential", "supported_frameworks", "verbosity", "verbosity/cprint"], "filenames": ["backend_handler.rst", "backend_handler/ContextManager:\n    def __init__.rst", "backend_handler/choose_random_backend.rst", "backend_handler/clear_backend_stack.rst", "backend_handler/current_backend.rst", "backend_handler/get_backend.rst", "backend_handler/set_backend.rst", "backend_handler/try_import_ivy_jax.rst", "backend_handler/try_import_ivy_mxnet.rst", "backend_handler/try_import_ivy_numpy.rst", "backend_handler/try_import_ivy_tf.rst", "backend_handler/try_import_ivy_torch.rst", "backend_handler/unset_backend.rst", "background.rst", "background/ml_explosion.rst", "background/standardization.rst", "background/why_unify.rst", "contributing.rst", "contributing/0_setting_up.rst", "contributing/1_the_basics.rst", "contributing/4_open_tasks.rst", "contributing/building_the_docs.rst", "data_classes/array/activations.rst", "data_classes/array/activations/ArrayWithActivations.rst", "data_classes/array/array.rst", "data_classes/array/array/Array.rst", "data_classes/array/array/Variable.rst", "data_classes/array/conversions.rst", "data_classes/array/conversions/args_to_ivy.rst", "data_classes/array/conversions/args_to_native.rst", "data_classes/array/conversions/to_ivy.rst", "data_classes/array/conversions/to_native.rst", "data_classes/array/creation.rst", "data_classes/array/creation/ArrayWithCreation.rst", "data_classes/array/data_type.rst", "data_classes/array/data_type/ArrayWithDataTypes.rst", "data_classes/array/device.rst", "data_classes/array/device/ArrayWithDevice.rst", "data_classes/array/elementwise.rst", "data_classes/array/elementwise/ArrayWithElementwise.rst", "data_classes/array/general.rst", "data_classes/array/general/ArrayWithGeneral.rst", "data_classes/array/gradients.rst", "data_classes/array/gradients/ArrayWithGradients.rst", "data_classes/array/image.rst", "data_classes/array/image/ArrayWithImage.rst", "data_classes/array/layers.rst", "data_classes/array/layers/ArrayWithLayers.rst", "data_classes/array/linear_algebra.rst", "data_classes/array/linear_algebra/ArrayWithLinearAlgebra.rst", "data_classes/array/losses.rst", "data_classes/array/losses/ArrayWithLosses.rst", "data_classes/array/manipulation.rst", "data_classes/array/manipulation/ArrayWithManipulation.rst", "data_classes/array/norms.rst", "data_classes/array/norms/ArrayWithNorms.rst", "data_classes/array/random.rst", "data_classes/array/random/ArrayWithRandom.rst", "data_classes/array/searching.rst", "data_classes/array/searching/ArrayWithSearching.rst", "data_classes/array/set.rst", "data_classes/array/set/ArrayWithSet.rst", "data_classes/array/sorting.rst", "data_classes/array/sorting/ArrayWithSorting.rst", "data_classes/array/statistical.rst", "data_classes/array/statistical/ArrayWithStatistical.rst", "data_classes/array/utility.rst", "data_classes/array/utility/ArrayWithUtility.rst", "data_classes/array/wrapping.rst", "data_classes/array/wrapping/add_ivy_array_instance_methods.rst", "data_classes/container/activations.rst", "data_classes/container/activations/ContainerWithActivations.rst", "data_classes/container/base.rst", "data_classes/container/base/ContainerBase.rst", "data_classes/container/container.rst", "data_classes/container/container/Container.rst", "data_classes/container/container/MultiDevContainer.rst", "data_classes/container/creation.rst", "data_classes/container/creation/ContainerWithCreation.rst", "data_classes/container/data_type.rst", "data_classes/container/data_type/ContainerWithDataTypes.rst", "data_classes/container/device.rst", "data_classes/container/device/ContainerWithDevice.rst", "data_classes/container/elementwise.rst", "data_classes/container/elementwise/ContainerWithElementwise.rst", "data_classes/container/general.rst", "data_classes/container/general/ContainerWithGeneral.rst", "data_classes/container/gradients.rst", "data_classes/container/gradients/ContainerWithGradients.rst", "data_classes/container/image.rst", "data_classes/container/image/ContainerWithImage.rst", "data_classes/container/layers.rst", "data_classes/container/layers/ContainerWithLayers.rst", "data_classes/container/linear_algebra.rst", "data_classes/container/linear_algebra/ContainerWithLinearAlgebra.rst", "data_classes/container/losses.rst", "data_classes/container/losses/ContainerWithLosses.rst", "data_classes/container/manipulation.rst", "data_classes/container/manipulation/ContainerWithManipulation.rst", "data_classes/container/norms.rst", "data_classes/container/norms/ContainerWithNorms.rst", "data_classes/container/random.rst", "data_classes/container/random/ContainerWithRandom.rst", "data_classes/container/searching.rst", "data_classes/container/searching/ContainerWithSearching.rst", "data_classes/container/set.rst", "data_classes/container/set/ContainerWithSet.rst", "data_classes/container/sorting.rst", "data_classes/container/sorting/ContainerWithSorting.rst", "data_classes/container/statistical.rst", "data_classes/container/statistical/ContainerWithStatistical.rst", "data_classes/container/utility.rst", "data_classes/container/utility/ContainerWithUtility.rst", "data_classes/container/wrapping.rst", "data_classes/container/wrapping/add_ivy_container_instance_methods.rst", "deep_dive.rst", "deep_dive/0_navigating_the_code.rst", "deep_dive/10_function_arguments.rst", "deep_dive/11_docstrings.rst", "deep_dive/12_docstring_examples.rst", "deep_dive/13_array_api_tests.rst", "deep_dive/14_ivy_tests.rst", "deep_dive/1_function_types.rst", "deep_dive/2_backend_setting.rst", "deep_dive/3_function_wrapping.rst", "deep_dive/4_arrays.rst", "deep_dive/5_containers.rst", "deep_dive/6_data_types.rst", "deep_dive/7_devices.rst", "deep_dive/8_inplace_updates.rst", "deep_dive/9_formatting.rst", "design.rst", "design/building_blocks.rst", "design/ivy_as_a_framework.rst", "design/ivy_as_a_framework/ivy_array.rst", "design/ivy_as_a_framework/ivy_container.rst", "design/ivy_as_a_framework/ivy_stateful_api.rst", "design/ivy_as_a_transpiler.rst", "docs/ivy.rst", "docs/ivy_builder.rst", "docs/ivy_ecosystem.rst", "docs/ivy_gym.rst", "docs/ivy_mech.rst", "docs/ivy_memory.rst", "docs/ivy_models.rst", "docs/ivy_robot.rst", "docs/ivy_vision.rst", "extensions.rst", "extensions/applied_libraries.rst", "faq.rst", "func_wrapper.rst", "func_wrapper/handle_nestable.rst", "func_wrapper/handle_out_argument.rst", "func_wrapper/infer_device.rst", "func_wrapper/infer_dtype.rst", "func_wrapper/inputs_to_ivy_arrays.rst", "func_wrapper/inputs_to_native_arrays.rst", "func_wrapper/outputs_to_ivy_arrays.rst", "func_wrapper/to_native_arrays_and_back.rst", "functional/ivy.rst", "functional/ivy/activations.rst", "functional/ivy/activations/gelu.rst", "functional/ivy/activations/leaky_relu.rst", "functional/ivy/activations/relu.rst", "functional/ivy/activations/sigmoid.rst", "functional/ivy/activations/softmax.rst", "functional/ivy/activations/softplus.rst", "functional/ivy/activations/softplus/softplus_array.rst", "functional/ivy/activations/softplus/softplus_container.rst", "functional/ivy/activations/softplus/softplus_functional.rst", "functional/ivy/activations/softplus/static_softplus_container.rst", "functional/ivy/activations/tanh.rst", "functional/ivy/compilation.rst", "functional/ivy/compilation/compile.rst", "functional/ivy/constants.rst", "functional/ivy/creation.rst", "functional/ivy/creation/arange.rst", "functional/ivy/creation/arange/arange_functional.rst", "functional/ivy/creation/arange/static_arange_container.rst", "functional/ivy/creation/asarray.rst", "functional/ivy/creation/asarray/asarray_array.rst", "functional/ivy/creation/asarray/asarray_container.rst", "functional/ivy/creation/asarray/asarray_functional.rst", "functional/ivy/creation/asarray/static_asarray_container.rst", "functional/ivy/creation/empty.rst", "functional/ivy/creation/empty_like.rst", "functional/ivy/creation/empty_like/empty_like_array.rst", "functional/ivy/creation/empty_like/empty_like_container.rst", "functional/ivy/creation/empty_like/empty_like_functional.rst", "functional/ivy/creation/empty_like/static_empty_like_container.rst", "functional/ivy/creation/eye.rst", "functional/ivy/creation/eye/eye_functional.rst", "functional/ivy/creation/eye/static_eye_container.rst", "functional/ivy/creation/from_dlpack.rst", "functional/ivy/creation/from_dlpack/from_dlpack_array.rst", "functional/ivy/creation/from_dlpack/from_dlpack_container.rst", "functional/ivy/creation/from_dlpack/from_dlpack_functional.rst", "functional/ivy/creation/from_dlpack/static_from_dlpack_container.rst", "functional/ivy/creation/full.rst", "functional/ivy/creation/full_like.rst", "functional/ivy/creation/full_like/full_like_array.rst", "functional/ivy/creation/full_like/full_like_container.rst", "functional/ivy/creation/full_like/full_like_functional.rst", "functional/ivy/creation/full_like/static_full_like_container.rst", "functional/ivy/creation/linspace.rst", "functional/ivy/creation/linspace/linspace_functional.rst", "functional/ivy/creation/linspace/static_linspace_container.rst", "functional/ivy/creation/logspace.rst", "functional/ivy/creation/logspace/logspace_functional.rst", "functional/ivy/creation/logspace/static_logspace_container.rst", "functional/ivy/creation/meshgrid.rst", "functional/ivy/creation/meshgrid/meshgrid_array.rst", "functional/ivy/creation/meshgrid/meshgrid_container.rst", "functional/ivy/creation/meshgrid/meshgrid_functional.rst", "functional/ivy/creation/meshgrid/static_meshgrid_container.rst", "functional/ivy/creation/native_array.rst", "functional/ivy/creation/native_array/native_array_array.rst", "functional/ivy/creation/native_array/native_array_container.rst", "functional/ivy/creation/native_array/native_array_functional.rst", "functional/ivy/creation/native_array/static_native_array_container.rst", "functional/ivy/creation/ones.rst", "functional/ivy/creation/ones/ones_functional.rst", "functional/ivy/creation/ones/static_ones_container.rst", "functional/ivy/creation/ones_like.rst", "functional/ivy/creation/ones_like/ones_like_array.rst", "functional/ivy/creation/ones_like/ones_like_container.rst", "functional/ivy/creation/ones_like/ones_like_functional.rst", "functional/ivy/creation/ones_like/static_ones_like_container.rst", "functional/ivy/creation/tril.rst", "functional/ivy/creation/tril/static_tril_container.rst", "functional/ivy/creation/tril/tril_array.rst", "functional/ivy/creation/tril/tril_container.rst", "functional/ivy/creation/tril/tril_functional.rst", "functional/ivy/creation/triu.rst", "functional/ivy/creation/triu/static_triu_container.rst", "functional/ivy/creation/triu/triu_array.rst", "functional/ivy/creation/triu/triu_container.rst", "functional/ivy/creation/triu/triu_functional.rst", "functional/ivy/creation/zeros.rst", "functional/ivy/creation/zeros/static_zeros_container.rst", "functional/ivy/creation/zeros/zeros_functional.rst", "functional/ivy/creation/zeros_like.rst", "functional/ivy/creation/zeros_like/static_zeros_like_container.rst", "functional/ivy/creation/zeros_like/zeros_like_array.rst", "functional/ivy/creation/zeros_like/zeros_like_container.rst", "functional/ivy/creation/zeros_like/zeros_like_functional.rst", "functional/ivy/data_type.rst", "functional/ivy/data_type/DefaultDtype:\n    \"\"\"\"\"\"\n\n    # noinspection PyShadowingNames\n    def __init__.rst", "functional/ivy/data_type/DefaultFloatDtype:\n    \"\"\"\"\"\"\n\n    # noinspection PyShadowingNames\n    def __init__.rst", "functional/ivy/data_type/DefaultIntDtype:\n    \"\"\"\"\"\"\n\n    # noinspection PyShadowingNames\n    def __init__.rst", "functional/ivy/data_type/as_ivy_dtype.rst", "functional/ivy/data_type/as_native_dtype.rst", "functional/ivy/data_type/astype.rst", "functional/ivy/data_type/astype/astype_array.rst", "functional/ivy/data_type/astype/astype_container.rst", "functional/ivy/data_type/astype/astype_functional.rst", "functional/ivy/data_type/astype/static_astype_container.rst", "functional/ivy/data_type/broadcast_arrays.rst", "functional/ivy/data_type/broadcast_arrays/broadcast_arrays_array.rst", "functional/ivy/data_type/broadcast_arrays/broadcast_arrays_container.rst", "functional/ivy/data_type/broadcast_arrays/broadcast_arrays_functional.rst", "functional/ivy/data_type/broadcast_arrays/static_broadcast_arrays_container.rst", "functional/ivy/data_type/broadcast_to.rst", "functional/ivy/data_type/broadcast_to/broadcast_to_array.rst", "functional/ivy/data_type/broadcast_to/broadcast_to_container.rst", "functional/ivy/data_type/broadcast_to/broadcast_to_functional.rst", "functional/ivy/data_type/broadcast_to/static_broadcast_to_container.rst", "functional/ivy/data_type/can_cast.rst", "functional/ivy/data_type/can_cast/can_cast_array.rst", "functional/ivy/data_type/can_cast/can_cast_container.rst", "functional/ivy/data_type/can_cast/can_cast_functional.rst", "functional/ivy/data_type/can_cast/static_can_cast_container.rst", "functional/ivy/data_type/closest_valid_dtype.rst", "functional/ivy/data_type/default_dtype.rst", "functional/ivy/data_type/default_float_dtype.rst", "functional/ivy/data_type/default_int_dtype.rst", "functional/ivy/data_type/dtype.rst", "functional/ivy/data_type/dtype/dtype_array.rst", "functional/ivy/data_type/dtype/dtype_container.rst", "functional/ivy/data_type/dtype/dtype_functional.rst", "functional/ivy/data_type/dtype_bits.rst", "functional/ivy/data_type/finfo.rst", "functional/ivy/data_type/finfo/finfo_array.rst", "functional/ivy/data_type/finfo/finfo_container.rst", "functional/ivy/data_type/finfo/finfo_functional.rst", "functional/ivy/data_type/finfo/static_finfo_container.rst", "functional/ivy/data_type/function_supported_dtypes.rst", "functional/ivy/data_type/function_unsupported_dtypes.rst", "functional/ivy/data_type/iinfo.rst", "functional/ivy/data_type/iinfo/iinfo_array.rst", "functional/ivy/data_type/iinfo/iinfo_container.rst", "functional/ivy/data_type/iinfo/iinfo_functional.rst", "functional/ivy/data_type/iinfo/static_iinfo_container.rst", "functional/ivy/data_type/invalid_dtype.rst", "functional/ivy/data_type/is_float_dtype.rst", "functional/ivy/data_type/is_float_dtype/is_float_dtype_array.rst", "functional/ivy/data_type/is_float_dtype/is_float_dtype_container.rst", "functional/ivy/data_type/is_float_dtype/is_float_dtype_functional.rst", "functional/ivy/data_type/is_float_dtype/static_is_float_dtype_container.rst", "functional/ivy/data_type/is_int_dtype.rst", "functional/ivy/data_type/is_int_dtype/is_int_dtype_array.rst", "functional/ivy/data_type/is_int_dtype/is_int_dtype_container.rst", "functional/ivy/data_type/is_int_dtype/is_int_dtype_functional.rst", "functional/ivy/data_type/is_int_dtype/static_is_int_dtype_container.rst", "functional/ivy/data_type/promote_types.rst", "functional/ivy/data_type/result_type.rst", "functional/ivy/data_type/result_type/result_type_array.rst", "functional/ivy/data_type/result_type/result_type_container.rst", "functional/ivy/data_type/result_type/result_type_functional.rst", "functional/ivy/data_type/result_type/static_result_type_container.rst", "functional/ivy/data_type/set_default_dtype.rst", "functional/ivy/data_type/set_default_float_dtype.rst", "functional/ivy/data_type/set_default_int_dtype.rst", "functional/ivy/data_type/type_promote_arrays.rst", "functional/ivy/data_type/unset_default_dtype.rst", "functional/ivy/data_type/unset_default_float_dtype.rst", "functional/ivy/data_type/unset_default_int_dtype.rst", "functional/ivy/data_type/valid_dtype.rst", "functional/ivy/device.rst", "functional/ivy/device/DefaultDevice:\n    \"\"\"\"\"\"\n\n    # noinspection PyShadowingNames\n    def __init__.rst", "functional/ivy/device/DevClonedItem.rst", "functional/ivy/device/DevClonedIter.rst", "functional/ivy/device/DevClonedNest.rst", "functional/ivy/device/DevDistItem.rst", "functional/ivy/device/DevDistIter.rst", "functional/ivy/device/DevDistNest.rst", "functional/ivy/device/DevManager:\n    \"\"\"\"\"\"\n\n    def __init__.rst", "functional/ivy/device/DevMapper.rst", "functional/ivy/device/DevMapperMultiProc.rst", "functional/ivy/device/MultiDev:\n    def __init__.rst", "functional/ivy/device/MultiDevItem.rst", "functional/ivy/device/MultiDevIter.rst", "functional/ivy/device/MultiDevNest.rst", "functional/ivy/device/Profiler.rst", "functional/ivy/device/as_ivy_dev.rst", "functional/ivy/device/as_native_dev.rst", "functional/ivy/device/clear_mem_on_dev.rst", "functional/ivy/device/default_device.rst", "functional/ivy/device/dev.rst", "functional/ivy/device/dev_clone.rst", "functional/ivy/device/dev_clone_array.rst", "functional/ivy/device/dev_clone_iter.rst", "functional/ivy/device/dev_clone_nest.rst", "functional/ivy/device/dev_dist.rst", "functional/ivy/device/dev_dist_array.rst", "functional/ivy/device/dev_dist_iter.rst", "functional/ivy/device/dev_dist_nest.rst", "functional/ivy/device/dev_unify.rst", "functional/ivy/device/dev_unify_array.rst", "functional/ivy/device/dev_unify_iter.rst", "functional/ivy/device/dev_unify_nest.rst", "functional/ivy/device/dev_util.rst", "functional/ivy/device/get_all_ivy_arrays_on_dev.rst", "functional/ivy/device/gpu_is_available.rst", "functional/ivy/device/num_cpu_cores.rst", "functional/ivy/device/num_gpus.rst", "functional/ivy/device/num_ivy_arrays_on_dev.rst", "functional/ivy/device/percent_used_mem_on_dev.rst", "functional/ivy/device/print_all_ivy_arrays_on_dev.rst", "functional/ivy/device/set_default_device.rst", "functional/ivy/device/set_split_factor.rst", "functional/ivy/device/split_factor.rst", "functional/ivy/device/split_func_call.rst", "functional/ivy/device/to_device.rst", "functional/ivy/device/total_mem_on_dev.rst", "functional/ivy/device/tpu_is_available.rst", "functional/ivy/device/unset_default_device.rst", "functional/ivy/device/used_mem_on_dev.rst", "functional/ivy/elementwise.rst", "functional/ivy/elementwise/abs.rst", "functional/ivy/elementwise/abs/abs_array.rst", "functional/ivy/elementwise/abs/abs_container.rst", "functional/ivy/elementwise/abs/abs_functional.rst", "functional/ivy/elementwise/abs/static_abs_container.rst", "functional/ivy/elementwise/acos.rst", "functional/ivy/elementwise/acos/acos_array.rst", "functional/ivy/elementwise/acos/acos_container.rst", "functional/ivy/elementwise/acos/acos_functional.rst", "functional/ivy/elementwise/acosh.rst", "functional/ivy/elementwise/acosh/acosh_array.rst", "functional/ivy/elementwise/acosh/acosh_container.rst", "functional/ivy/elementwise/acosh/acosh_functional.rst", "functional/ivy/elementwise/add.rst", "functional/ivy/elementwise/add/add_array.rst", "functional/ivy/elementwise/add/add_container.rst", "functional/ivy/elementwise/add/add_functional.rst", "functional/ivy/elementwise/add/static_add_container.rst", "functional/ivy/elementwise/asin.rst", "functional/ivy/elementwise/asin/asin_array.rst", "functional/ivy/elementwise/asin/asin_container.rst", "functional/ivy/elementwise/asin/asin_functional.rst", "functional/ivy/elementwise/asinh.rst", "functional/ivy/elementwise/asinh/asinh_array.rst", "functional/ivy/elementwise/asinh/asinh_container.rst", "functional/ivy/elementwise/asinh/asinh_functional.rst", "functional/ivy/elementwise/asinh/static_asinh_container.rst", "functional/ivy/elementwise/atan.rst", "functional/ivy/elementwise/atan/atan_array.rst", "functional/ivy/elementwise/atan/atan_container.rst", "functional/ivy/elementwise/atan/atan_functional.rst", "functional/ivy/elementwise/atan2.rst", "functional/ivy/elementwise/atan2/atan2_array.rst", "functional/ivy/elementwise/atan2/atan2_container.rst", "functional/ivy/elementwise/atan2/atan2_functional.rst", "functional/ivy/elementwise/atanh.rst", "functional/ivy/elementwise/atanh/atanh_array.rst", "functional/ivy/elementwise/atanh/atanh_container.rst", "functional/ivy/elementwise/atanh/atanh_functional.rst", "functional/ivy/elementwise/bitwise_and.rst", "functional/ivy/elementwise/bitwise_and/bitwise_and_array.rst", "functional/ivy/elementwise/bitwise_and/bitwise_and_container.rst", "functional/ivy/elementwise/bitwise_and/bitwise_and_functional.rst", "functional/ivy/elementwise/bitwise_invert.rst", "functional/ivy/elementwise/bitwise_invert/bitwise_invert_array.rst", "functional/ivy/elementwise/bitwise_invert/bitwise_invert_container.rst", "functional/ivy/elementwise/bitwise_invert/bitwise_invert_functional.rst", "functional/ivy/elementwise/bitwise_left_shift.rst", "functional/ivy/elementwise/bitwise_left_shift/bitwise_left_shift_array.rst", "functional/ivy/elementwise/bitwise_left_shift/bitwise_left_shift_container.rst", "functional/ivy/elementwise/bitwise_left_shift/bitwise_left_shift_functional.rst", "functional/ivy/elementwise/bitwise_or.rst", "functional/ivy/elementwise/bitwise_or/bitwise_or_array.rst", "functional/ivy/elementwise/bitwise_or/bitwise_or_container.rst", "functional/ivy/elementwise/bitwise_or/bitwise_or_functional.rst", "functional/ivy/elementwise/bitwise_right_shift.rst", "functional/ivy/elementwise/bitwise_right_shift/bitwise_right_shift_array.rst", "functional/ivy/elementwise/bitwise_right_shift/bitwise_right_shift_container.rst", "functional/ivy/elementwise/bitwise_right_shift/bitwise_right_shift_functional.rst", "functional/ivy/elementwise/bitwise_xor.rst", "functional/ivy/elementwise/bitwise_xor/bitwise_xor_array.rst", "functional/ivy/elementwise/bitwise_xor/bitwise_xor_container.rst", "functional/ivy/elementwise/bitwise_xor/bitwise_xor_functional.rst", "functional/ivy/elementwise/ceil.rst", "functional/ivy/elementwise/ceil/ceil_array.rst", "functional/ivy/elementwise/ceil/ceil_container.rst", "functional/ivy/elementwise/ceil/ceil_functional.rst", "functional/ivy/elementwise/cos.rst", "functional/ivy/elementwise/cos/cos_array.rst", "functional/ivy/elementwise/cos/cos_container.rst", "functional/ivy/elementwise/cos/cos_functional.rst", "functional/ivy/elementwise/cosh.rst", "functional/ivy/elementwise/cosh/cosh_array.rst", "functional/ivy/elementwise/cosh/cosh_container.rst", "functional/ivy/elementwise/cosh/cosh_functional.rst", "functional/ivy/elementwise/divide.rst", "functional/ivy/elementwise/divide/divide_array.rst", "functional/ivy/elementwise/divide/divide_container.rst", "functional/ivy/elementwise/divide/divide_functional.rst", "functional/ivy/elementwise/divide/static_divide_container.rst", "functional/ivy/elementwise/equal.rst", "functional/ivy/elementwise/equal/equal_array.rst", "functional/ivy/elementwise/equal/equal_container.rst", "functional/ivy/elementwise/equal/equal_functional.rst", "functional/ivy/elementwise/erf.rst", "functional/ivy/elementwise/erf/erf_array.rst", "functional/ivy/elementwise/erf/erf_container.rst", "functional/ivy/elementwise/erf/erf_functional.rst", "functional/ivy/elementwise/exp.rst", "functional/ivy/elementwise/exp/exp_array.rst", "functional/ivy/elementwise/exp/exp_container.rst", "functional/ivy/elementwise/exp/exp_functional.rst", "functional/ivy/elementwise/expm1.rst", "functional/ivy/elementwise/expm1/expm1_array.rst", "functional/ivy/elementwise/expm1/expm1_container.rst", "functional/ivy/elementwise/expm1/expm1_functional.rst", "functional/ivy/elementwise/floor.rst", "functional/ivy/elementwise/floor/floor_array.rst", "functional/ivy/elementwise/floor/floor_container.rst", "functional/ivy/elementwise/floor/floor_functional.rst", "functional/ivy/elementwise/floor_divide.rst", "functional/ivy/elementwise/floor_divide/floor_divide_array.rst", "functional/ivy/elementwise/floor_divide/floor_divide_container.rst", "functional/ivy/elementwise/floor_divide/floor_divide_functional.rst", "functional/ivy/elementwise/greater.rst", "functional/ivy/elementwise/greater/greater_array.rst", "functional/ivy/elementwise/greater/greater_container.rst", "functional/ivy/elementwise/greater/greater_functional.rst", "functional/ivy/elementwise/greater_equal.rst", "functional/ivy/elementwise/greater_equal/greater_equal_array.rst", "functional/ivy/elementwise/greater_equal/greater_equal_container.rst", "functional/ivy/elementwise/greater_equal/greater_equal_functional.rst", "functional/ivy/elementwise/isfinite.rst", "functional/ivy/elementwise/isfinite/isfinite_array.rst", "functional/ivy/elementwise/isfinite/isfinite_container.rst", "functional/ivy/elementwise/isfinite/isfinite_functional.rst", "functional/ivy/elementwise/isinf.rst", "functional/ivy/elementwise/isinf/isinf_array.rst", "functional/ivy/elementwise/isinf/isinf_container.rst", "functional/ivy/elementwise/isinf/isinf_functional.rst", "functional/ivy/elementwise/isnan.rst", "functional/ivy/elementwise/isnan/isnan_array.rst", "functional/ivy/elementwise/isnan/isnan_container.rst", "functional/ivy/elementwise/isnan/isnan_functional.rst", "functional/ivy/elementwise/less.rst", "functional/ivy/elementwise/less/less_array.rst", "functional/ivy/elementwise/less/less_container.rst", "functional/ivy/elementwise/less/less_functional.rst", "functional/ivy/elementwise/less_equal.rst", "functional/ivy/elementwise/less_equal/less_equal_array.rst", "functional/ivy/elementwise/less_equal/less_equal_container.rst", "functional/ivy/elementwise/less_equal/less_equal_functional.rst", "functional/ivy/elementwise/log.rst", "functional/ivy/elementwise/log/log_array.rst", "functional/ivy/elementwise/log/log_container.rst", "functional/ivy/elementwise/log/log_functional.rst", "functional/ivy/elementwise/log10.rst", "functional/ivy/elementwise/log10/log10_array.rst", "functional/ivy/elementwise/log10/log10_container.rst", "functional/ivy/elementwise/log10/log10_functional.rst", "functional/ivy/elementwise/log1p.rst", "functional/ivy/elementwise/log1p/log1p_array.rst", "functional/ivy/elementwise/log1p/log1p_container.rst", "functional/ivy/elementwise/log1p/log1p_functional.rst", "functional/ivy/elementwise/log2.rst", "functional/ivy/elementwise/log2/log2_array.rst", "functional/ivy/elementwise/log2/log2_container.rst", "functional/ivy/elementwise/log2/log2_functional.rst", "functional/ivy/elementwise/logaddexp.rst", "functional/ivy/elementwise/logaddexp/logaddexp_array.rst", "functional/ivy/elementwise/logaddexp/logaddexp_container.rst", "functional/ivy/elementwise/logaddexp/logaddexp_functional.rst", "functional/ivy/elementwise/logical_and.rst", "functional/ivy/elementwise/logical_and/logical_and_array.rst", "functional/ivy/elementwise/logical_and/logical_and_container.rst", "functional/ivy/elementwise/logical_and/logical_and_functional.rst", "functional/ivy/elementwise/logical_not.rst", "functional/ivy/elementwise/logical_not/logical_not_array.rst", "functional/ivy/elementwise/logical_not/logical_not_container.rst", "functional/ivy/elementwise/logical_not/logical_not_functional.rst", "functional/ivy/elementwise/logical_or.rst", "functional/ivy/elementwise/logical_or/logical_or_array.rst", "functional/ivy/elementwise/logical_or/logical_or_container.rst", "functional/ivy/elementwise/logical_or/logical_or_functional.rst", "functional/ivy/elementwise/logical_xor.rst", "functional/ivy/elementwise/logical_xor/logical_xor_array.rst", "functional/ivy/elementwise/logical_xor/logical_xor_container.rst", "functional/ivy/elementwise/logical_xor/logical_xor_functional.rst", "functional/ivy/elementwise/maximum.rst", "functional/ivy/elementwise/minimum.rst", "functional/ivy/elementwise/multiply.rst", "functional/ivy/elementwise/multiply/multiply_array.rst", "functional/ivy/elementwise/multiply/multiply_container.rst", "functional/ivy/elementwise/multiply/multiply_functional.rst", "functional/ivy/elementwise/multiply/static_multiply_container.rst", "functional/ivy/elementwise/negative.rst", "functional/ivy/elementwise/negative/negative_array.rst", "functional/ivy/elementwise/negative/negative_container.rst", "functional/ivy/elementwise/negative/negative_functional.rst", "functional/ivy/elementwise/not_equal.rst", "functional/ivy/elementwise/not_equal/not_equal_array.rst", "functional/ivy/elementwise/not_equal/not_equal_container.rst", "functional/ivy/elementwise/not_equal/not_equal_functional.rst", "functional/ivy/elementwise/positive.rst", "functional/ivy/elementwise/positive/positive_array.rst", "functional/ivy/elementwise/positive/positive_container.rst", "functional/ivy/elementwise/positive/positive_functional.rst", "functional/ivy/elementwise/pow.rst", "functional/ivy/elementwise/pow/pow_array.rst", "functional/ivy/elementwise/pow/pow_container.rst", "functional/ivy/elementwise/pow/pow_functional.rst", "functional/ivy/elementwise/remainder.rst", "functional/ivy/elementwise/remainder/remainder_array.rst", "functional/ivy/elementwise/remainder/remainder_container.rst", "functional/ivy/elementwise/remainder/remainder_functional.rst", "functional/ivy/elementwise/round.rst", "functional/ivy/elementwise/round/round_array.rst", "functional/ivy/elementwise/round/round_container.rst", "functional/ivy/elementwise/round/round_functional.rst", "functional/ivy/elementwise/sign.rst", "functional/ivy/elementwise/sign/sign_array.rst", "functional/ivy/elementwise/sign/sign_container.rst", "functional/ivy/elementwise/sign/sign_functional.rst", "functional/ivy/elementwise/sign/static_sign_container.rst", "functional/ivy/elementwise/sin.rst", "functional/ivy/elementwise/sin/sin_array.rst", "functional/ivy/elementwise/sin/sin_container.rst", "functional/ivy/elementwise/sin/sin_functional.rst", "functional/ivy/elementwise/sin/static_sin_container.rst", "functional/ivy/elementwise/sinh.rst", "functional/ivy/elementwise/sinh/sinh_array.rst", "functional/ivy/elementwise/sinh/sinh_container.rst", "functional/ivy/elementwise/sinh/sinh_functional.rst", "functional/ivy/elementwise/sinh/static_sinh_container.rst", "functional/ivy/elementwise/sqrt.rst", "functional/ivy/elementwise/sqrt/sqrt_array.rst", "functional/ivy/elementwise/sqrt/sqrt_container.rst", "functional/ivy/elementwise/sqrt/sqrt_functional.rst", "functional/ivy/elementwise/square.rst", "functional/ivy/elementwise/square/square_array.rst", "functional/ivy/elementwise/square/square_container.rst", "functional/ivy/elementwise/square/square_functional.rst", "functional/ivy/elementwise/subtract.rst", "functional/ivy/elementwise/subtract/static_subtract_container.rst", "functional/ivy/elementwise/subtract/subtract_array.rst", "functional/ivy/elementwise/subtract/subtract_container.rst", "functional/ivy/elementwise/subtract/subtract_functional.rst", "functional/ivy/elementwise/tan.rst", "functional/ivy/elementwise/tan/static_tan_container.rst", "functional/ivy/elementwise/tan/tan_array.rst", "functional/ivy/elementwise/tan/tan_container.rst", "functional/ivy/elementwise/tan/tan_functional.rst", "functional/ivy/elementwise/tanh.rst", "functional/ivy/elementwise/tanh/static_tanh_container.rst", "functional/ivy/elementwise/tanh/tanh_array.rst", "functional/ivy/elementwise/tanh/tanh_container.rst", "functional/ivy/elementwise/tanh/tanh_functional.rst", "functional/ivy/elementwise/trunc.rst", "functional/ivy/elementwise/trunc/trunc_array.rst", "functional/ivy/elementwise/trunc/trunc_container.rst", "functional/ivy/elementwise/trunc/trunc_functional.rst", "functional/ivy/general.rst", "functional/ivy/general/all_equal.rst", "functional/ivy/general/all_equal/all_equal_array.rst", "functional/ivy/general/all_equal/all_equal_container.rst", "functional/ivy/general/all_equal/all_equal_functional.rst", "functional/ivy/general/all_equal/static_all_equal_container.rst", "functional/ivy/general/arg_info.rst", "functional/ivy/general/arg_names.rst", "functional/ivy/general/array_equal.rst", "functional/ivy/general/arrays_equal.rst", "functional/ivy/general/assert_supports_inplace.rst", "functional/ivy/general/cache_fn.rst", "functional/ivy/general/clip_matrix_norm.rst", "functional/ivy/general/clip_vector_norm.rst", "functional/ivy/general/clip_vector_norm/clip_vector_norm_container.rst", "functional/ivy/general/clip_vector_norm/clip_vector_norm_functional.rst", "functional/ivy/general/container_types.rst", "functional/ivy/general/copy_array.rst", "functional/ivy/general/cumprod.rst", "functional/ivy/general/cumsum.rst", "functional/ivy/general/current_backend_str.rst", "functional/ivy/general/default.rst", "functional/ivy/general/einops_rearrange.rst", "functional/ivy/general/einops_reduce.rst", "functional/ivy/general/einops_repeat.rst", "functional/ivy/general/exists.rst", "functional/ivy/general/floormod.rst", "functional/ivy/general/fourier_encode.rst", "functional/ivy/general/gather.rst", "functional/ivy/general/gather_nd.rst", "functional/ivy/general/gather_nd/gather_nd_array.rst", "functional/ivy/general/gather_nd/gather_nd_container.rst", "functional/ivy/general/gather_nd/gather_nd_functional.rst", "functional/ivy/general/gather_nd/static_gather_nd_container.rst", "functional/ivy/general/get_all_arrays_in_memory.rst", "functional/ivy/general/get_min_base.rst", "functional/ivy/general/get_min_denominator.rst", "functional/ivy/general/get_num_dims.rst", "functional/ivy/general/get_referrers_recursive.rst", "functional/ivy/general/has_nans.rst", "functional/ivy/general/indices_where.rst", "functional/ivy/general/inplace_arrays_supported.rst", "functional/ivy/general/inplace_decrement.rst", "functional/ivy/general/inplace_increment.rst", "functional/ivy/general/inplace_update.rst", "functional/ivy/general/inplace_variables_supported.rst", "functional/ivy/general/is_array.rst", "functional/ivy/general/is_ivy_array.rst", "functional/ivy/general/is_ivy_container.rst", "functional/ivy/general/is_native_array.rst", "functional/ivy/general/match_kwargs.rst", "functional/ivy/general/multiprocessing.rst", "functional/ivy/general/num_arrays_in_memory.rst", "functional/ivy/general/one_hot.rst", "functional/ivy/general/print_all_arrays_in_memory.rst", "functional/ivy/general/queue_timeout.rst", "functional/ivy/general/scatter_flat.rst", "functional/ivy/general/scatter_nd.rst", "functional/ivy/general/set_min_base.rst", "functional/ivy/general/set_min_denominator.rst", "functional/ivy/general/set_queue_timeout.rst", "functional/ivy/general/set_shape_array_mode.rst", "functional/ivy/general/set_tmp_dir.rst", "functional/ivy/general/shape.rst", "functional/ivy/general/shape_array_mode.rst", "functional/ivy/general/shape_to_tuple.rst", "functional/ivy/general/stable_divide.rst", "functional/ivy/general/stable_pow.rst", "functional/ivy/general/supports_inplace.rst", "functional/ivy/general/tmp_dir.rst", "functional/ivy/general/to_list.rst", "functional/ivy/general/to_numpy.rst", "functional/ivy/general/to_numpy/static_to_numpy_container.rst", "functional/ivy/general/to_numpy/to_numpy_array.rst", "functional/ivy/general/to_numpy/to_numpy_container.rst", "functional/ivy/general/to_numpy/to_numpy_functional.rst", "functional/ivy/general/to_scalar.rst", "functional/ivy/general/try_else_none.rst", "functional/ivy/general/unset_shape_array_mode.rst", "functional/ivy/general/unstack.rst", "functional/ivy/general/value_is_nan.rst", "functional/ivy/gradients.rst", "functional/ivy/gradients/GradientTracking:\n    \"\"\"\"\"\"\n\n    # noinspection PyShadowingNames\n    def __init__.rst", "functional/ivy/gradients/adam_step.rst", "functional/ivy/gradients/adam_step/adam_step_array.rst", "functional/ivy/gradients/adam_step/adam_step_container.rst", "functional/ivy/gradients/adam_step/adam_step_functional.rst", "functional/ivy/gradients/adam_step/static_adam_step_container.rst", "functional/ivy/gradients/adam_update.rst", "functional/ivy/gradients/adam_update/adam_update_container.rst", "functional/ivy/gradients/adam_update/adam_update_functional.rst", "functional/ivy/gradients/adam_update/static_adam_update_container.rst", "functional/ivy/gradients/execute_with_gradients.rst", "functional/ivy/gradients/gradient_descent_update.rst", "functional/ivy/gradients/gradient_descent_update/gradient_descent_update_container.rst", "functional/ivy/gradients/gradient_descent_update/gradient_descent_update_functional.rst", "functional/ivy/gradients/gradient_descent_update/static_gradient_descent_update_container.rst", "functional/ivy/gradients/is_variable.rst", "functional/ivy/gradients/is_variable/is_variable_container.rst", "functional/ivy/gradients/is_variable/is_variable_functional.rst", "functional/ivy/gradients/is_variable/static_is_variable_container.rst", "functional/ivy/gradients/lamb_update.rst", "functional/ivy/gradients/lamb_update/lamb_update_container.rst", "functional/ivy/gradients/lamb_update/lamb_update_functional.rst", "functional/ivy/gradients/lamb_update/static_lamb_update_container.rst", "functional/ivy/gradients/lars_update.rst", "functional/ivy/gradients/lars_update/lars_update_container.rst", "functional/ivy/gradients/lars_update/lars_update_functional.rst", "functional/ivy/gradients/lars_update/static_lars_update_container.rst", "functional/ivy/gradients/optimizer_update.rst", "functional/ivy/gradients/optimizer_update/optimizer_update_container.rst", "functional/ivy/gradients/optimizer_update/optimizer_update_functional.rst", "functional/ivy/gradients/optimizer_update/static_optimizer_update_container.rst", "functional/ivy/gradients/set_with_grads.rst", "functional/ivy/gradients/stop_gradient.rst", "functional/ivy/gradients/unset_with_grads.rst", "functional/ivy/gradients/variable.rst", "functional/ivy/gradients/variable_data.rst", "functional/ivy/gradients/with_grads.rst", "functional/ivy/layers.rst", "functional/ivy/layers/conv1d.rst", "functional/ivy/layers/conv1d_transpose.rst", "functional/ivy/layers/conv2d.rst", "functional/ivy/layers/conv2d_transpose.rst", "functional/ivy/layers/conv3d.rst", "functional/ivy/layers/conv3d_transpose.rst", "functional/ivy/layers/depthwise_conv2d.rst", "functional/ivy/layers/dropout.rst", "functional/ivy/layers/linear.rst", "functional/ivy/layers/lstm_update.rst", "functional/ivy/layers/multi_head_attention.rst", "functional/ivy/layers/scaled_dot_product_attention.rst", "functional/ivy/linear_algebra.rst", "functional/ivy/linear_algebra/cholesky.rst", "functional/ivy/linear_algebra/cholesky/cholesky_array.rst", "functional/ivy/linear_algebra/cholesky/cholesky_container.rst", "functional/ivy/linear_algebra/cholesky/cholesky_functional.rst", "functional/ivy/linear_algebra/cholesky/static_cholesky_container.rst", "functional/ivy/linear_algebra/cross.rst", "functional/ivy/linear_algebra/cross/cross_array.rst", "functional/ivy/linear_algebra/cross/cross_functional.rst", "functional/ivy/linear_algebra/det.rst", "functional/ivy/linear_algebra/det/det_array.rst", "functional/ivy/linear_algebra/det/det_functional.rst", "functional/ivy/linear_algebra/diagonal.rst", "functional/ivy/linear_algebra/diagonal/diagonal_array.rst", "functional/ivy/linear_algebra/diagonal/diagonal_functional.rst", "functional/ivy/linear_algebra/eigh.rst", "functional/ivy/linear_algebra/eigh/eigh_array.rst", "functional/ivy/linear_algebra/eigh/eigh_functional.rst", "functional/ivy/linear_algebra/eigvalsh.rst", "functional/ivy/linear_algebra/eigvalsh/eigvalsh_array.rst", "functional/ivy/linear_algebra/eigvalsh/eigvalsh_functional.rst", "functional/ivy/linear_algebra/inv.rst", "functional/ivy/linear_algebra/inv/inv_array.rst", "functional/ivy/linear_algebra/inv/inv_functional.rst", "functional/ivy/linear_algebra/matmul.rst", "functional/ivy/linear_algebra/matmul/matmul_array.rst", "functional/ivy/linear_algebra/matmul/matmul_container.rst", "functional/ivy/linear_algebra/matmul/matmul_functional.rst", "functional/ivy/linear_algebra/matrix_norm.rst", "functional/ivy/linear_algebra/matrix_norm/matrix_norm_array.rst", "functional/ivy/linear_algebra/matrix_norm/matrix_norm_functional.rst", "functional/ivy/linear_algebra/matrix_power.rst", "functional/ivy/linear_algebra/matrix_rank.rst", "functional/ivy/linear_algebra/matrix_rank/matrix_rank_array.rst", "functional/ivy/linear_algebra/matrix_rank/matrix_rank_functional.rst", "functional/ivy/linear_algebra/matrix_transpose.rst", "functional/ivy/linear_algebra/matrix_transpose/matrix_transpose_array.rst", "functional/ivy/linear_algebra/matrix_transpose/matrix_transpose_functional.rst", "functional/ivy/linear_algebra/outer.rst", "functional/ivy/linear_algebra/outer/outer_array.rst", "functional/ivy/linear_algebra/outer/outer_functional.rst", "functional/ivy/linear_algebra/pinv.rst", "functional/ivy/linear_algebra/pinv/pinv_array.rst", "functional/ivy/linear_algebra/pinv/pinv_functional.rst", "functional/ivy/linear_algebra/qr.rst", "functional/ivy/linear_algebra/qr/qr_array.rst", "functional/ivy/linear_algebra/qr/qr_functional.rst", "functional/ivy/linear_algebra/slogdet.rst", "functional/ivy/linear_algebra/solve.rst", "functional/ivy/linear_algebra/solve/solve_array.rst", "functional/ivy/linear_algebra/solve/solve_functional.rst", "functional/ivy/linear_algebra/svd.rst", "functional/ivy/linear_algebra/svd/svd_array.rst", "functional/ivy/linear_algebra/svd/svd_functional.rst", "functional/ivy/linear_algebra/svdvals.rst", "functional/ivy/linear_algebra/svdvals/svdvals_array.rst", "functional/ivy/linear_algebra/svdvals/svdvals_functional.rst", "functional/ivy/linear_algebra/tensordot.rst", "functional/ivy/linear_algebra/tensordot/tensordot_array.rst", "functional/ivy/linear_algebra/tensordot/tensordot_functional.rst", "functional/ivy/linear_algebra/trace.rst", "functional/ivy/linear_algebra/trace/trace_array.rst", "functional/ivy/linear_algebra/trace/trace_functional.rst", "functional/ivy/linear_algebra/vecdot.rst", "functional/ivy/linear_algebra/vecdot/vecdot_array.rst", "functional/ivy/linear_algebra/vecdot/vecdot_functional.rst", "functional/ivy/linear_algebra/vector_norm.rst", "functional/ivy/linear_algebra/vector_norm/vector_norm_array.rst", "functional/ivy/linear_algebra/vector_norm/vector_norm_functional.rst", "functional/ivy/linear_algebra/vector_to_skew_symmetric_matrix.rst", "functional/ivy/linear_algebra/vector_to_skew_symmetric_matrix/vector_to_skew_symmetric_matrix_array.rst", "functional/ivy/linear_algebra/vector_to_skew_symmetric_matrix/vector_to_skew_symmetric_matrix_functional.rst", "functional/ivy/losses.rst", "functional/ivy/losses/binary_cross_entropy.rst", "functional/ivy/losses/binary_cross_entropy/binary_cross_entropy_array.rst", "functional/ivy/losses/binary_cross_entropy/binary_cross_entropy_container.rst", "functional/ivy/losses/binary_cross_entropy/binary_cross_entropy_functional.rst", "functional/ivy/losses/binary_cross_entropy/static_binary_cross_entropy_container.rst", "functional/ivy/losses/cross_entropy.rst", "functional/ivy/losses/cross_entropy/cross_entropy_array.rst", "functional/ivy/losses/cross_entropy/cross_entropy_container.rst", "functional/ivy/losses/cross_entropy/cross_entropy_functional.rst", "functional/ivy/losses/cross_entropy/static_cross_entropy_container.rst", "functional/ivy/losses/sparse_cross_entropy.rst", "functional/ivy/losses/sparse_cross_entropy/sparse_cross_entropy_array.rst", "functional/ivy/losses/sparse_cross_entropy/sparse_cross_entropy_container.rst", "functional/ivy/losses/sparse_cross_entropy/sparse_cross_entropy_functional.rst", "functional/ivy/losses/sparse_cross_entropy/static_sparse_cross_entropy_container.rst", "functional/ivy/manipulation.rst", "functional/ivy/manipulation/clip.rst", "functional/ivy/manipulation/clip/clip_array.rst", "functional/ivy/manipulation/clip/clip_container.rst", "functional/ivy/manipulation/clip/clip_functional.rst", "functional/ivy/manipulation/clip/static_clip_container.rst", "functional/ivy/manipulation/concat.rst", "functional/ivy/manipulation/concat/concat_array.rst", "functional/ivy/manipulation/concat/concat_container.rst", "functional/ivy/manipulation/concat/concat_functional.rst", "functional/ivy/manipulation/constant_pad.rst", "functional/ivy/manipulation/constant_pad/constant_pad_array.rst", "functional/ivy/manipulation/constant_pad/constant_pad_container.rst", "functional/ivy/manipulation/constant_pad/constant_pad_functional.rst", "functional/ivy/manipulation/expand_dims.rst", "functional/ivy/manipulation/expand_dims/expand_dims_array.rst", "functional/ivy/manipulation/expand_dims/expand_dims_container.rst", "functional/ivy/manipulation/expand_dims/expand_dims_functional.rst", "functional/ivy/manipulation/flip.rst", "functional/ivy/manipulation/flip/flip_array.rst", "functional/ivy/manipulation/flip/flip_container.rst", "functional/ivy/manipulation/flip/flip_functional.rst", "functional/ivy/manipulation/permute_dims.rst", "functional/ivy/manipulation/permute_dims/permute_dims_array.rst", "functional/ivy/manipulation/permute_dims/permute_dims_container.rst", "functional/ivy/manipulation/permute_dims/permute_dims_functional.rst", "functional/ivy/manipulation/repeat.rst", "functional/ivy/manipulation/repeat/repeat_array.rst", "functional/ivy/manipulation/repeat/repeat_container.rst", "functional/ivy/manipulation/repeat/repeat_functional.rst", "functional/ivy/manipulation/reshape.rst", "functional/ivy/manipulation/reshape/reshape_array.rst", "functional/ivy/manipulation/reshape/reshape_container.rst", "functional/ivy/manipulation/reshape/reshape_functional.rst", "functional/ivy/manipulation/roll.rst", "functional/ivy/manipulation/roll/roll_array.rst", "functional/ivy/manipulation/roll/roll_container.rst", "functional/ivy/manipulation/roll/roll_functional.rst", "functional/ivy/manipulation/roll/static_roll_container.rst", "functional/ivy/manipulation/split.rst", "functional/ivy/manipulation/squeeze.rst", "functional/ivy/manipulation/squeeze/squeeze_array.rst", "functional/ivy/manipulation/squeeze/squeeze_container.rst", "functional/ivy/manipulation/squeeze/squeeze_functional.rst", "functional/ivy/manipulation/stack.rst", "functional/ivy/manipulation/stack/stack_array.rst", "functional/ivy/manipulation/stack/stack_container.rst", "functional/ivy/manipulation/stack/stack_functional.rst", "functional/ivy/manipulation/swapaxes.rst", "functional/ivy/manipulation/swapaxes/swapaxes_array.rst", "functional/ivy/manipulation/swapaxes/swapaxes_container.rst", "functional/ivy/manipulation/swapaxes/swapaxes_functional.rst", "functional/ivy/manipulation/tile.rst", "functional/ivy/manipulation/tile/tile_array.rst", "functional/ivy/manipulation/tile/tile_container.rst", "functional/ivy/manipulation/tile/tile_functional.rst", "functional/ivy/manipulation/zero_pad.rst", "functional/ivy/manipulation/zero_pad/zero_pad_array.rst", "functional/ivy/manipulation/zero_pad/zero_pad_container.rst", "functional/ivy/manipulation/zero_pad/zero_pad_functional.rst", "functional/ivy/meta.rst", "functional/ivy/meta/fomaml_step.rst", "functional/ivy/meta/maml_step.rst", "functional/ivy/meta/reptile_step.rst", "functional/ivy/nest.rst", "functional/ivy/nest/all_nested_indices.rst", "functional/ivy/nest/copy_nest.rst", "functional/ivy/nest/index_nest.rst", "functional/ivy/nest/insert_into_nest_at_index.rst", "functional/ivy/nest/insert_into_nest_at_indices.rst", "functional/ivy/nest/map.rst", "functional/ivy/nest/map_nest_at_index.rst", "functional/ivy/nest/map_nest_at_indices.rst", "functional/ivy/nest/multi_index_nest.rst", "functional/ivy/nest/nested_any.rst", "functional/ivy/nest/nested_indices_where.rst", "functional/ivy/nest/nested_map.rst", "functional/ivy/nest/nested_multi_map.rst", "functional/ivy/nest/prune_nest_at_index.rst", "functional/ivy/nest/prune_nest_at_indices.rst", "functional/ivy/nest/set_nest_at_index.rst", "functional/ivy/nest/set_nest_at_indices.rst", "functional/ivy/norms.rst", "functional/ivy/norms/layer_norm.rst", "functional/ivy/norms/layer_norm/layer_norm_array.rst", "functional/ivy/norms/layer_norm/layer_norm_container.rst", "functional/ivy/norms/layer_norm/layer_norm_functional.rst", "functional/ivy/norms/layer_norm/static_layer_norm_container.rst", "functional/ivy/random.rst", "functional/ivy/random/multinomial.rst", "functional/ivy/random/randint.rst", "functional/ivy/random/randint/randint_functional.rst", "functional/ivy/random/randint/static_randint_container.rst", "functional/ivy/random/random_normal.rst", "functional/ivy/random/random_uniform.rst", "functional/ivy/random/random_uniform/random_uniform_container.rst", "functional/ivy/random/random_uniform/random_uniform_functional.rst", "functional/ivy/random/random_uniform/static_random_uniform_container.rst", "functional/ivy/random/seed.rst", "functional/ivy/random/shuffle.rst", "functional/ivy/searching.rst", "functional/ivy/searching/argmax.rst", "functional/ivy/searching/argmin.rst", "functional/ivy/searching/nonzero.rst", "functional/ivy/searching/where.rst", "functional/ivy/set.rst", "functional/ivy/set/unique_all.rst", "functional/ivy/set/unique_counts.rst", "functional/ivy/set/unique_counts/static_unique_counts_container.rst", "functional/ivy/set/unique_counts/unique_counts_array.rst", "functional/ivy/set/unique_counts/unique_counts_container.rst", "functional/ivy/set/unique_counts/unique_counts_functional.rst", "functional/ivy/set/unique_inverse.rst", "functional/ivy/set/unique_values.rst", "functional/ivy/sorting.rst", "functional/ivy/sorting/argsort.rst", "functional/ivy/sorting/argsort/argsort_array.rst", "functional/ivy/sorting/argsort/argsort_container.rst", "functional/ivy/sorting/argsort/argsort_functional.rst", "functional/ivy/sorting/argsort/static_argsort_container.rst", "functional/ivy/sorting/sort.rst", "functional/ivy/sorting/sort/sort_array.rst", "functional/ivy/sorting/sort/sort_container.rst", "functional/ivy/sorting/sort/sort_functional.rst", "functional/ivy/sorting/sort/static_sort_container.rst", "functional/ivy/statistical.rst", "functional/ivy/statistical/einsum.rst", "functional/ivy/statistical/einsum/einsum_array.rst", "functional/ivy/statistical/einsum/einsum_container.rst", "functional/ivy/statistical/einsum/einsum_functional.rst", "functional/ivy/statistical/max.rst", "functional/ivy/statistical/max/max_array.rst", "functional/ivy/statistical/max/max_container.rst", "functional/ivy/statistical/max/max_functional.rst", "functional/ivy/statistical/mean.rst", "functional/ivy/statistical/mean/mean_array.rst", "functional/ivy/statistical/mean/mean_container.rst", "functional/ivy/statistical/mean/mean_functional.rst", "functional/ivy/statistical/min.rst", "functional/ivy/statistical/min/min_array.rst", "functional/ivy/statistical/min/min_container.rst", "functional/ivy/statistical/min/min_functional.rst", "functional/ivy/statistical/prod.rst", "functional/ivy/statistical/prod/prod_array.rst", "functional/ivy/statistical/prod/prod_container.rst", "functional/ivy/statistical/prod/prod_functional.rst", "functional/ivy/statistical/std.rst", "functional/ivy/statistical/std/std_array.rst", "functional/ivy/statistical/std/std_container.rst", "functional/ivy/statistical/std/std_functional.rst", "functional/ivy/statistical/sum.rst", "functional/ivy/statistical/sum/sum_array.rst", "functional/ivy/statistical/sum/sum_container.rst", "functional/ivy/statistical/sum/sum_functional.rst", "functional/ivy/statistical/var.rst", "functional/ivy/statistical/var/var_array.rst", "functional/ivy/statistical/var/var_container.rst", "functional/ivy/statistical/var/var_functional.rst", "functional/ivy/utility.rst", "functional/ivy/utility/all.rst", "functional/ivy/utility/all/all_array.rst", "functional/ivy/utility/all/all_container.rst", "functional/ivy/utility/all/all_functional.rst", "functional/ivy/utility/all/static_all_container.rst", "functional/ivy/utility/any.rst", "functional/ivy/utility/any/any_array.rst", "functional/ivy/utility/any/any_container.rst", "functional/ivy/utility/any/any_functional.rst", "functional/ivy/utility/any/static_any_container.rst", "index.rst", "index_append.rst", "index_prepend.rst", "inspection.rst", "inspection/add_array_specs.rst", "inspection/fn_array_spec.rst", "roadmap.rst", "stateful/activations.rst", "stateful/activations/GEGLU.rst", "stateful/activations/GELU.rst", "stateful/converters.rst", "stateful/converters/to_ivy_module.rst", "stateful/initializers.rst", "stateful/initializers/Constant:\n    def __init__.rst", "stateful/initializers/FirstLayerSiren.rst", "stateful/initializers/GlorotUniform.rst", "stateful/initializers/KaimingNormal:\n    def __init__.rst", "stateful/initializers/Ones.rst", "stateful/initializers/Siren.rst", "stateful/initializers/Uniform:\n    def __init__.rst", "stateful/initializers/Zeros.rst", "stateful/layers.rst", "stateful/layers/Conv1D.rst", "stateful/layers/Conv1DTranspose.rst", "stateful/layers/Conv2D.rst", "stateful/layers/Conv2DTranspose.rst", "stateful/layers/Conv3D.rst", "stateful/layers/Conv3DTranspose.rst", "stateful/layers/DepthwiseConv2D.rst", "stateful/layers/Dropout.rst", "stateful/layers/LSTM.rst", "stateful/layers/Linear.rst", "stateful/layers/MultiHeadAttention.rst", "stateful/module.rst", "stateful/module/Module.rst", "stateful/norms.rst", "stateful/norms/LayerNorm.rst", "stateful/optimizers.rst", "stateful/optimizers/Adam.rst", "stateful/optimizers/LAMB.rst", "stateful/optimizers/LARS.rst", "stateful/optimizers/Optimizer.rst", "stateful/optimizers/SGD.rst", "stateful/sequential.rst", "stateful/sequential/Sequential.rst", "supported_frameworks.rst", "verbosity.rst", "verbosity/cprint.rst"], "titles": ["Backend handler", "&lt;no title&gt;", "choose_random_backend", "clear_backend_stack", "current_backend", "get_backend", "set_backend", "try_import_ivy_jax", "try_import_ivy_mxnet", "try_import_ivy_numpy", "try_import_ivy_tf", "try_import_ivy_torch", "unset_backend", "Background", "ML Explosion", "Standardization", "Why Unify?", "Contributing", "Setting Up", "The Basics", "Open Tasks", "Building the Docs", "Activations", "ArrayWithActivations", "Array", "Array", "Variable", "Conversions", "args_to_ivy", "args_to_native", "to_ivy", "to_native", "Creation", "ArrayWithCreation", "Data type", "ArrayWithDataTypes", "Device", "ArrayWithDevice", "Elementwise", "ArrayWithElementwise", "General", "ArrayWithGeneral", "Gradients", "ArrayWithGradients", "Image", "ArrayWithImage", "Layers", "ArrayWithLayers", "Linear algebra", "ArrayWithLinearAlgebra", "Losses", "ArrayWithLosses", "Manipulation", "ArrayWithManipulation", "Norms", "ArrayWithNorms", "Random", "ArrayWithRandom", "Searching", "ArrayWithSearching", "Set", "ArrayWithSet", "Sorting", "ArrayWithSorting", "Statistical", "ArrayWithStatistical", "Utility", "ArrayWithUtility", "Wrapping", "add_ivy_array_instance_methods", "Activations", "ContainerWithActivations", "Base", "ContainerBase", "Container", "Container", "MultiDevContainer", "Creation", "ContainerWithCreation", "Data type", "ContainerWithDataTypes", "Device", "ContainerWithDevice", "Elementwise", "ContainerWithElementwise", "General", "ContainerWithGeneral", "Gradients", "ContainerWithGradients", "Image", "ContainerWithImage", "Layers", "ContainerWithLayers", "Linear algebra", "ContainerWithLinearAlgebra", "Losses", "ContainerWithLosses", "Manipulation", "ContainerWithManipulation", "Norms", "ContainerWithNorms", "Random", "ContainerWithRandom", "Searching", "ContainerWithSearching", "Set", "ContainerWithSet", "Sorting", "ContainerWithSorting", "Statistical", "ContainerWithStatistical", "Utility", "ContainerWithUtility", "Wrapping", "add_ivy_container_instance_methods", "Deep Dive", "Navigating the Code", "Function Arguments", "Docstrings", "Docstring Examples", "Array API Tests", "Ivy Tests", "Function Types", "Backend Setting", "Function Wrapping", "Arrays", "Containers", "Data Types", "Devices", "Inplace Updates", "Formatting", "Design", "Building Blocks", "Ivy as a Framework", "Ivy Array", "Ivy Container", "Ivy Stateful API", "Ivy as a Transpiler", "Ivy", "Ivy builder", "Ivy ecosystem", "Ivy gym", "Ivy mech", "Ivy memory", "Ivy models", "Ivy robot", "Ivy vision", "Extensions", "Applied Libraries", "FAQ", "Func wrapper", "handle_nestable", "handle_out_argument", "infer_device", "infer_dtype", "inputs_to_ivy_arrays", "inputs_to_native_arrays", "outputs_to_ivy_arrays", "to_native_arrays_and_back", "&lt;no title&gt;", "Activations", "gelu", "leaky_relu", "relu", "sigmoid", "softmax", "softplus", "ivy.Array.softplus", "ivy.Container.softplus", "ivy.softplus", "ivy.Container.static_softplus", "tanh", "Compilation", "compile", "Constants", "Creation", "arange", "ivy.arange", "ivy.Container.static_arange", "asarray", "ivy.Array.asarray", "ivy.Container.asarray", "ivy.asarray", "ivy.Container.static_asarray", "empty", "empty_like", "ivy.Array.empty_like", "ivy.Container.empty_like", "ivy.empty_like", "ivy.Container.static_empty_like", "eye", "ivy.eye", "ivy.Container.static_eye", "from_dlpack", "ivy.Array.from_dlpack", "ivy.Container.from_dlpack", "ivy.from_dlpack", "ivy.Container.static_from_dlpack", "full", "full_like", "ivy.Array.full_like", "ivy.Container.full_like", "ivy.full_like", "ivy.Container.static_full_like", "linspace", "ivy.linspace", "ivy.Container.static_linspace", "logspace", "ivy.logspace", "ivy.Container.static_logspace", "meshgrid", "ivy.Array.meshgrid", "ivy.Container.meshgrid", "ivy.meshgrid", "ivy.Container.static_meshgrid", "native_array", "ivy.Array.native_array", "ivy.Container.native_array", "ivy.native_array", "ivy.Container.static_native_array", "ones", "ivy.ones", "ivy.Container.static_ones", "ones_like", "ivy.Array.ones_like", "ivy.Container.ones_like", "ivy.ones_like", "ivy.Container.static_ones_like", "tril", "ivy.Container.static_tril", "ivy.Array.tril", "ivy.Container.tril", "ivy.tril", "triu", "ivy.Container.static_triu", "ivy.Array.triu", "ivy.Container.triu", "ivy.triu", "zeros", "ivy.Container.static_zeros", "ivy.zeros", "zeros_like", "ivy.Container.static_zeros_like", "ivy.Array.zeros_like", "ivy.Container.zeros_like", "ivy.zeros_like", "Data type", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "as_ivy_dtype", "as_native_dtype", "astype", "ivy.Array.astype", "ivy.Container.astype", "ivy.astype", "ivy.Container.static_astype", "broadcast_arrays", "ivy.Array.broadcast_arrays", "ivy.Container.broadcast_arrays", "ivy.broadcast_arrays", "ivy.Container.static_broadcast_arrays", "broadcast_to", "ivy.Array.broadcast_to", "ivy.Container.broadcast_to", "ivy.broadcast_to", "ivy.Container.static_broadcast_to", "can_cast", "ivy.Array.can_cast", "ivy.Container.can_cast", "ivy.can_cast", "ivy.Container.static_can_cast", "closest_valid_dtype", "default_dtype", "default_float_dtype", "default_int_dtype", "dtype", "ivy.Array.dtype", "ivy.Container.dtype", "ivy.dtype", "dtype_bits", "finfo", "ivy.Array.finfo", "ivy.Container.finfo", "ivy.finfo", "ivy.Container.static_finfo", "function_supported_dtypes", "function_unsupported_dtypes", "iinfo", "ivy.Array.iinfo", "ivy.Container.iinfo", "ivy.iinfo", "ivy.Container.static_iinfo", "invalid_dtype", "is_float_dtype", "ivy.Array.is_float_dtype", "ivy.Container.is_float_dtype", "ivy.is_float_dtype", "ivy.Container.static_is_float_dtype", "is_int_dtype", "ivy.Array.is_int_dtype", "ivy.Container.is_int_dtype", "ivy.is_int_dtype", "ivy.Container.static_is_int_dtype", "promote_types", "result_type", "ivy.Array.result_type", "ivy.Container.result_type", "ivy.result_type", "ivy.Container.static_result_type", "set_default_dtype", "set_default_float_dtype", "set_default_int_dtype", "type_promote_arrays", "unset_default_dtype", "unset_default_float_dtype", "unset_default_int_dtype", "valid_dtype", "Device", "&lt;no title&gt;", "DevClonedItem", "DevClonedIter", "DevClonedNest", "DevDistItem", "DevDistIter", "DevDistNest", "&lt;no title&gt;", "DevMapper", "DevMapperMultiProc", "&lt;no title&gt;", "MultiDevItem", "MultiDevIter", "MultiDevNest", "Profiler", "as_ivy_dev", "as_native_dev", "clear_mem_on_dev", "default_device", "dev", "dev_clone", "dev_clone_array", "dev_clone_iter", "dev_clone_nest", "dev_dist", "dev_dist_array", "dev_dist_iter", "dev_dist_nest", "dev_unify", "dev_unify_array", "dev_unify_iter", "dev_unify_nest", "dev_util", "get_all_ivy_arrays_on_dev", "gpu_is_available", "num_cpu_cores", "num_gpus", "num_ivy_arrays_on_dev", "percent_used_mem_on_dev", "print_all_ivy_arrays_on_dev", "set_default_device", "set_split_factor", "split_factor", "split_func_call", "to_device", "total_mem_on_dev", "tpu_is_available", "unset_default_device", "used_mem_on_dev", "Elementwise", "abs", "ivy.Array.abs", "ivy.Container.abs", "ivy.abs", "ivy.Container.static_abs", "acos", "ivy.Array.acos", "ivy.Container.acos", "ivy.acos", "acosh", "ivy.Array.acosh", "ivy.Container.acosh", "ivy.acosh", "add", "ivy.Array.add", "ivy.Container.add", "ivy.add", "ivy.Container.static_add", "asin", "ivy.Array.asin", "ivy.Container.asin", "ivy.asin", "asinh", "ivy.Array.asinh", "ivy.Container.asinh", "ivy.asinh", "ivy.Container.static_asinh", "atan", "ivy.Array.atan", "ivy.Container.atan", "ivy.atan", "atan2", "ivy.Array.atan2", "ivy.Container.atan2", "ivy.atan2", "atanh", "ivy.Array.atanh", "ivy.Container.atanh", "ivy.atanh", "bitwise_and", "ivy.Array.bitwise_and", "ivy.Container.bitwise_and", "ivy.bitwise_and", "bitwise_invert", "ivy.Array.bitwise_invert", "ivy.Container.bitwise_invert", "ivy.bitwise_invert", "bitwise_left_shift", "ivy.Array.bitwise_left_shift", "ivy.Container.bitwise_left_shift", "ivy.bitwise_left_shift", "bitwise_or", "ivy.Array.bitwise_or", "ivy.Container.bitwise_or", "ivy.bitwise_or", "bitwise_right_shift", "ivy.Array.bitwise_right_shift", "ivy.Container.bitwise_right_shift", "ivy.bitwise_right_shift", "bitwise_xor", "ivy.Array.bitwise_xor", "ivy.Container.bitwise_xor", "ivy.bitwise_xor", "ceil", "ivy.Array.ceil", "ivy.Container.ceil", "ivy.ceil", "cos", "ivy.Array.cos", "ivy.Container.cos", "ivy.cos", "cosh", "ivy.Array.cosh", "ivy.Container.cosh", "ivy.cosh", "divide", "ivy.Array.divide", "ivy.Container.divide", "ivy.divide", "ivy.Container.static_divide", "equal", "ivy.Array.equal", "ivy.Container.equal", "ivy.equal", "erf", "ivy.Array.erf", "ivy.Container.erf", "ivy.erf", "exp", "ivy.Array.exp", "ivy.Container.exp", "ivy.exp", "expm1", "ivy.Array.expm1", "ivy.Container.expm1", "ivy.expm1", "floor", "ivy.Array.floor", "ivy.Container.floor", "ivy.floor", "floor_divide", "ivy.Array.floor_divide", "ivy.Container.floor_divide", "ivy.floor_divide", "greater", "ivy.Array.greater", "ivy.Container.greater", "ivy.greater", "greater_equal", "ivy.Array.greater_equal", "ivy.Container.greater_equal", "ivy.greater_equal", "isfinite", "ivy.Array.isfinite", "ivy.Container.isfinite", "ivy.isfinite", "isinf", "ivy.Array.isinf", "ivy.Container.isinf", "ivy.isinf", "isnan", "ivy.Array.isnan", "ivy.Container.isnan", "ivy.isnan", "less", "ivy.Array.less", "ivy.Container.less", "ivy.less", "less_equal", "ivy.Array.less_equal", "ivy.Container.less_equal", "ivy.less_equal", "log", "ivy.Array.log", "ivy.Container.log", "ivy.log", "log10", "ivy.Array.log10", "ivy.Container.log10", "ivy.log10", "log1p", "ivy.Array.log1p", "ivy.Container.log1p", "ivy.log1p", "log2", "ivy.Array.log2", "ivy.Container.log2", "ivy.log2", "logaddexp", "ivy.Array.logaddexp", "ivy.Container.logaddexp", "ivy.logaddexp", "logical_and", "ivy.Array.logical_and", "ivy.Container.logical_and", "ivy.logical_and", "logical_not", "ivy.Array.logical_not", "ivy.Container.logical_not", "ivy.logical_not", "logical_or", "ivy.Array.logical_or", "ivy.Container.logical_or", "ivy.logical_or", "logical_xor", "ivy.Array.logical_xor", "ivy.Container.logical_xor", "ivy.logical_xor", "maximum", "minimum", "multiply", "ivy.Array.multiply", "ivy.Container.multiply", "ivy.multiply", "ivy.Container.static_multiply", "negative", "ivy.Array.negative", "ivy.Container.negative", "ivy.negative", "not_equal", "ivy.Array.not_equal", "ivy.Container.not_equal", "ivy.not_equal", "positive", "ivy.Array.positive", "ivy.Container.positive", "ivy.positive", "pow", "ivy.Array.pow", "ivy.Container.pow", "ivy.pow", "remainder", "ivy.Array.remainder", "ivy.Container.remainder", "ivy.remainder", "round", "ivy.Array.round", "ivy.Container.round", "ivy.round", "sign", "ivy.Array.sign", "ivy.Container.sign", "ivy.sign", "ivy.Container.static_sign", "sin", "ivy.Array.sin", "ivy.Container.sin", "ivy.sin", "ivy.Container.static_sin", "sinh", "ivy.Array.sinh", "ivy.Container.sinh", "ivy.sinh", "ivy.Container.static_sinh", "sqrt", "ivy.Array.sqrt", "ivy.Container.sqrt", "ivy.sqrt", "square", "ivy.Array.square", "ivy.Container.square", "ivy.square", "subtract", "ivy.Container.static_subtract", "ivy.Array.subtract", "ivy.Container.subtract", "ivy.subtract", "tan", "ivy.Container.static_tan", "ivy.Array.tan", "ivy.Container.tan", "ivy.tan", "tanh", "ivy.Container.static_tanh", "ivy.Array.tanh", "ivy.Container.tanh", "ivy.tanh", "trunc", "ivy.Array.trunc", "ivy.Container.trunc", "ivy.trunc", "General", "all_equal", "ivy.Array.all_equal", "ivy.Container.all_equal", "ivy.all_equal", "ivy.Container.static_all_equal", "arg_info", "arg_names", "array_equal", "arrays_equal", "assert_supports_inplace", "cache_fn", "clip_matrix_norm", "clip_vector_norm", "ivy.Container.clip_vector_norm", "ivy.clip_vector_norm", "container_types", "copy_array", "cumprod", "cumsum", "current_backend_str", "default", "einops_rearrange", "einops_reduce", "einops_repeat", "exists", "floormod", "fourier_encode", "gather", "gather_nd", "ivy.Array.gather_nd", "ivy.Container.gather_nd", "ivy.gather_nd", "ivy.Container.static_gather_nd", "get_all_arrays_in_memory", "get_min_base", "get_min_denominator", "get_num_dims", "get_referrers_recursive", "has_nans", "indices_where", "inplace_arrays_supported", "inplace_decrement", "inplace_increment", "inplace_update", "inplace_variables_supported", "is_array", "is_ivy_array", "is_ivy_container", "is_native_array", "match_kwargs", "multiprocessing", "num_arrays_in_memory", "one_hot", "print_all_arrays_in_memory", "queue_timeout", "scatter_flat", "scatter_nd", "set_min_base", "set_min_denominator", "set_queue_timeout", "set_shape_array_mode", "set_tmp_dir", "shape", "shape_array_mode", "shape_to_tuple", "stable_divide", "stable_pow", "supports_inplace", "tmp_dir", "to_list", "to_numpy", "ivy.Container.static_to_numpy", "ivy.Array.to_numpy", "ivy.Container.to_numpy", "ivy.to_numpy", "to_scalar", "try_else_none", "unset_shape_array_mode", "unstack", "value_is_nan", "Gradients", "&lt;no title&gt;", "adam_step", "ivy.Array.adam_step", "ivy.Container.adam_step", "ivy.adam_step", "ivy.Container.static_adam_step", "adam_update", "ivy.Container.adam_update", "ivy.adam_update", "ivy.Container.static_adam_update", "execute_with_gradients", "gradient_descent_update", "ivy.Container.gradient_descent_update", "ivy.gradient_descent_update", "ivy.Container.static_gradient_descent_update", "is_variable", "ivy.Container.is_variable", "ivy.is_variable", "ivy.Container.static_is_variable", "lamb_update", "ivy.Container.lamb_update", "ivy.lamb_update", "ivy.Container.static_lamb_update", "lars_update", "ivy.Container.lars_update", "ivy.lars_update", "ivy.Container.static_lars_update", "optimizer_update", "ivy.Container.optimizer_update", "ivy.optimizer_update", "ivy.Container.static_optimizer_update", "set_with_grads", "stop_gradient", "unset_with_grads", "variable", "variable_data", "with_grads", "Layers", "conv1d", "conv1d_transpose", "conv2d", "conv2d_transpose", "conv3d", "conv3d_transpose", "depthwise_conv2d", "dropout", "linear", "lstm_update", "multi_head_attention", "scaled_dot_product_attention", "Linear algebra", "cholesky", "ivy.Array.cholesky", "ivy.Container.cholesky", "ivy.cholesky", "ivy.Container.static_cholesky", "cross", "ivy.Array.cross", "ivy.cross", "det", "ivy.Array.det", "ivy.det", "diagonal", "ivy.Array.diagonal", "ivy.diagonal", "eigh", "ivy.Array.eigh", "ivy.eigh", "eigvalsh", "ivy.Array.eigvalsh", "ivy.eigvalsh", "inv", "ivy.Array.inv", "ivy.inv", "matmul", "ivy.Array.matmul", "ivy.Container.matmul", "ivy.matmul", "matrix_norm", "ivy.Array.matrix_norm", "ivy.matrix_norm", "matrix_power", "matrix_rank", "ivy.Array.matrix_rank", "ivy.matrix_rank", "matrix_transpose", "ivy.Array.matrix_transpose", "ivy.matrix_transpose", "outer", "ivy.Array.outer", "ivy.outer", "pinv", "ivy.Array.pinv", "ivy.pinv", "qr", "ivy.Array.qr", "ivy.qr", "slogdet", "solve", "ivy.Array.solve", "ivy.solve", "svd", "ivy.Array.svd", "ivy.svd", "svdvals", "ivy.Array.svdvals", "ivy.svdvals", "tensordot", "ivy.Array.tensordot", "ivy.tensordot", "trace", "ivy.Array.trace", "ivy.trace", "vecdot", "ivy.Array.vecdot", "ivy.vecdot", "vector_norm", "ivy.Array.vector_norm", "ivy.vector_norm", "vector_to_skew_symmetric_matrix", "ivy.Array.vector_to_skew_symmetric_matrix", "ivy.vector_to_skew_symmetric_matrix", "Losses", "binary_cross_entropy", "ivy.Array.binary_cross_entropy", "ivy.Container.binary_cross_entropy", "ivy.binary_cross_entropy", "ivy.Container.static_binary_cross_entropy", "cross_entropy", "ivy.Array.cross_entropy", "ivy.Container.cross_entropy", "ivy.cross_entropy", "ivy.Container.static_cross_entropy", "sparse_cross_entropy", "ivy.Array.sparse_cross_entropy", "ivy.Container.sparse_cross_entropy", "ivy.sparse_cross_entropy", "ivy.Container.static_sparse_cross_entropy", "Manipulation", "clip", "ivy.Array.clip", "ivy.Container.clip", "ivy.clip", "ivy.Container.static_clip", "concat", "ivy.Array.concat", "ivy.Container.concat", "ivy.concat", "constant_pad", "ivy.Array.constant_pad", "ivy.Container.constant_pad", "ivy.constant_pad", "expand_dims", "ivy.Array.expand_dims", "ivy.Container.expand_dims", "ivy.expand_dims", "flip", "ivy.Array.flip", "ivy.Container.flip", "ivy.flip", "permute_dims", "ivy.Array.permute_dims", "ivy.Container.permute_dims", "ivy.permute_dims", "repeat", "ivy.Array.repeat", "ivy.Container.repeat", "ivy.repeat", "reshape", "ivy.Array.reshape", "ivy.Container.reshape", "ivy.reshape", "roll", "ivy.Array.roll", "ivy.Container.roll", "ivy.roll", "ivy.Container.static_roll", "split", "squeeze", "ivy.Array.squeeze", "ivy.Container.squeeze", "ivy.squeeze", "stack", "ivy.Array.stack", "ivy.Container.stack", "ivy.stack", "swapaxes", "ivy.Array.swapaxes", "ivy.Container.swapaxes", "ivy.swapaxes", "tile", "ivy.Array.tile", "ivy.Container.tile", "ivy.tile", "zero_pad", "ivy.Array.zero_pad", "ivy.Container.zero_pad", "ivy.zero_pad", "Meta", "fomaml_step", "maml_step", "reptile_step", "Nest", "all_nested_indices", "copy_nest", "index_nest", "insert_into_nest_at_index", "insert_into_nest_at_indices", "map", "map_nest_at_index", "map_nest_at_indices", "multi_index_nest", "nested_any", "nested_indices_where", "nested_map", "nested_multi_map", "prune_nest_at_index", "prune_nest_at_indices", "set_nest_at_index", "set_nest_at_indices", "Norms", "layer_norm", "ivy.Array.layer_norm", "ivy.Container.layer_norm", "ivy.layer_norm", "ivy.Container.static_layer_norm", "Random", "multinomial", "randint", "ivy.randint", "ivy.Container.static_randint", "random_normal", "random_uniform", "ivy.Container.random_uniform", "ivy.random_uniform", "ivy.Container.static_random_uniform", "seed", "shuffle", "Searching", "argmax", "argmin", "nonzero", "where", "Set", "unique_all", "unique_counts", "ivy.Container.static_unique_counts", "ivy.Array.unique_counts", "ivy.Container.unique_counts", "ivy.unique_counts", "unique_inverse", "unique_values", "Sorting", "argsort", "ivy.Array.argsort", "ivy.Container.argsort", "ivy.argsort", "ivy.Container.static_argsort", "sort", "ivy.Array.sort", "ivy.Container.sort", "ivy.sort", "ivy.Container.static_sort", "Statistical", "einsum", "ivy.Array.einsum", "ivy.Container.einsum", "ivy.einsum", "max", "ivy.Array.max", "ivy.Container.max", "ivy.max", "mean", "ivy.Array.mean", "ivy.Container.mean", "ivy.mean", "min", "ivy.Array.min", "ivy.Container.min", "ivy.min", "prod", "ivy.Array.prod", "ivy.Container.prod", "ivy.prod", "std", "ivy.Array.std", "ivy.Container.std", "ivy.std", "sum", "ivy.Array.sum", "ivy.Container.sum", "ivy.sum", "var", "ivy.Array.var", "ivy.Container.var", "ivy.var", "Utility", "all", "ivy.Array.all", "ivy.Container.all", "ivy.all", "ivy.Container.static_all", "any", "ivy.Array.any", "ivy.Container.any", "ivy.any", "ivy.Container.static_any", "Contents", "&lt;no title&gt;", "&lt;no title&gt;", "Inspection", "add_array_specs", "fn_array_spec", "Roadmap", "Activations", "GEGLU", "GELU", "Converters", "to_ivy_module", "Initializers", "&lt;no title&gt;", "FirstLayerSiren", "GlorotUniform", "&lt;no title&gt;", "Ones", "Siren", "&lt;no title&gt;", "Zeros", "Layers", "Conv1D", "Conv1DTranspose", "Conv2D", "Conv2DTranspose", "Conv3D", "Conv3DTranspose", "DepthwiseConv2D", "Dropout", "LSTM", "Linear", "MultiHeadAttention", "Module", "Module", "Norms", "LayerNorm", "Optimizers", "Adam", "LAMB", "LARS", "Optimizer", "SGD", "Sequential", "Sequential", "&lt;no title&gt;", "Verbosity", "cprint"], "terms": {"class": [0, 6, 12, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 117, 118, 119, 121, 125, 126, 127, 128, 132, 133, 135, 136, 137, 147, 148, 149, 246, 288, 291, 318, 320, 321, 322, 323, 324, 325, 327, 328, 330, 331, 332, 333, 610, 617, 654, 660, 691, 693, 695, 697, 727, 894, 896, 906, 930, 933, 999, 1006, 1007, 1008, 1009, 1010, 1011, 1013, 1014, 1016, 1017, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043], "ivi": [0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 15, 16, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 117, 118, 120, 122, 123, 124, 126, 127, 128, 129, 130, 131, 147, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 160, 161, 162, 163, 164, 165, 166, 171, 172, 173, 174, 175, 176, 179, 184, 185, 190, 193, 198, 199, 204, 207, 210, 215, 220, 223, 228, 233, 238, 241, 246, 250, 251, 252, 257, 262, 267, 272, 273, 274, 275, 276, 280, 281, 286, 287, 288, 293, 294, 299, 304, 305, 310, 311, 312, 313, 314, 315, 316, 317, 318, 320, 321, 322, 323, 324, 325, 327, 328, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 374, 378, 382, 387, 391, 396, 400, 404, 408, 412, 416, 420, 424, 428, 432, 436, 440, 444, 449, 453, 457, 461, 465, 469, 473, 477, 481, 485, 489, 493, 497, 501, 505, 509, 513, 517, 521, 525, 529, 533, 537, 538, 539, 544, 548, 552, 556, 560, 564, 568, 573, 578, 583, 587, 591, 596, 601, 606, 610, 611, 616, 617, 618, 619, 620, 621, 622, 623, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 686, 687, 688, 689, 690, 691, 693, 698, 702, 703, 707, 711, 715, 719, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 748, 751, 754, 757, 760, 763, 766, 770, 773, 774, 777, 780, 783, 786, 789, 790, 793, 796, 799, 802, 805, 808, 811, 814, 815, 820, 825, 830, 831, 836, 840, 844, 848, 852, 856, 860, 864, 869, 870, 874, 878, 882, 886, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 918, 919, 920, 923, 924, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 942, 943, 944, 945, 950, 955, 956, 960, 964, 968, 972, 976, 980, 984, 988, 989, 994, 999, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1013, 1014, 1016, 1017, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1045, 1046], "backend_handl": [0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 999], "contextmanag": [0, 1], "modul": [0, 4, 5, 16, 18, 21, 68, 69, 72, 73, 74, 75, 76, 113, 114, 121, 122, 123, 125, 129, 130, 132, 133, 135, 137, 148, 149, 610, 661, 918, 919, 923, 999, 1006, 1007, 1008, 1009, 1010, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1034, 1035, 1042, 1043], "sourc": [0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 125, 126, 150, 151, 152, 153, 154, 155, 156, 157, 158, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 320, 321, 322, 323, 324, 325, 327, 328, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1002, 1003, 1004, 1006, 1007, 1008, 1009, 1010, 1011, 1013, 1014, 1016, 1017, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1045, 1046], "base": [0, 19, 22, 23, 24, 25, 26, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 70, 71, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 121, 124, 126, 132, 148, 175, 207, 208, 209, 246, 318, 320, 321, 322, 323, 324, 325, 327, 328, 330, 331, 332, 333, 368, 457, 460, 501, 504, 505, 508, 509, 512, 513, 516, 556, 559, 610, 645, 668, 677, 691, 935, 936, 937, 941, 943, 955, 956, 959, 1006, 1007, 1008, 1011, 1013, 1014, 1016, 1017, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043], "object": [0, 72, 73, 74, 75, 76, 121, 134, 137, 175, 193, 196, 246, 281, 284, 318, 363, 691, 894, 897, 899, 901, 902, 903, 908, 909, 910, 911, 918, 929, 1011, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1029, 1030, 1032, 1033], "__init__": [0, 1, 4, 5, 24, 25, 26, 72, 73, 74, 75, 76, 116, 123, 127, 132, 134, 135, 136, 137, 246, 247, 248, 249, 318, 319, 326, 327, 328, 329, 330, 331, 332, 333, 691, 692, 918, 919, 923, 999, 1006, 1007, 1008, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043], "choose_random_backend": 0, "exclud": [0, 2, 119, 132, 175, 176, 177, 918, 924, 926], "none": [0, 2, 5, 12, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 38, 39, 40, 41, 48, 49, 50, 51, 52, 53, 54, 55, 62, 63, 64, 65, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 116, 117, 119, 121, 122, 126, 127, 128, 129, 130, 132, 134, 136, 137, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 212, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 252, 253, 254, 255, 256, 257, 259, 261, 262, 263, 264, 265, 266, 267, 269, 271, 273, 274, 275, 276, 278, 281, 283, 284, 285, 288, 290, 291, 292, 294, 296, 298, 299, 301, 303, 305, 307, 309, 317, 318, 327, 328, 336, 337, 360, 361, 362, 363, 366, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 613, 615, 616, 622, 623, 624, 625, 627, 628, 629, 631, 632, 633, 634, 635, 636, 638, 639, 640, 641, 642, 643, 648, 650, 651, 655, 661, 663, 666, 667, 668, 669, 671, 676, 677, 681, 682, 684, 687, 688, 691, 698, 699, 700, 701, 703, 704, 705, 706, 707, 708, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 724, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 789, 790, 791, 792, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 900, 905, 906, 907, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 934, 935, 937, 938, 940, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 1009, 1010, 1011, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043], "clear_backend_stack": 0, "current_backend": [0, 24, 25, 74, 75, 116, 122], "arg": [0, 4, 21, 24, 25, 27, 28, 29, 72, 73, 132, 134, 136, 318, 327, 342, 346, 350, 362, 610, 667, 1009, 1010, 1032, 1033], "kwarg": [0, 4, 24, 25, 27, 28, 29, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 132, 134, 136, 318, 327, 342, 346, 350, 610, 660, 1009, 1010, 1032, 1033], "return": [0, 4, 5, 12, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 38, 39, 40, 41, 42, 43, 48, 49, 50, 51, 52, 53, 54, 55, 60, 61, 62, 63, 64, 65, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 83, 84, 85, 86, 87, 88, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 105, 106, 107, 108, 109, 110, 111, 112, 116, 117, 118, 119, 121, 122, 124, 125, 126, 127, 128, 129, 130, 132, 134, 135, 136, 137, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 283, 284, 285, 286, 287, 288, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 313, 317, 318, 327, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 666, 667, 668, 669, 671, 673, 674, 675, 676, 677, 678, 680, 681, 682, 684, 685, 686, 687, 688, 689, 690, 691, 693, 694, 695, 696, 697, 698, 700, 701, 702, 703, 705, 706, 707, 708, 709, 710, 711, 713, 714, 715, 717, 718, 719, 720, 721, 722, 724, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 900, 904, 905, 906, 907, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1002, 1004, 1009, 1010, 1020, 1029, 1030, 1036, 1040], "current": [0, 4, 5, 12, 16, 18, 19, 20, 21, 24, 25, 72, 73, 74, 75, 76, 122, 128, 132, 137, 148, 149, 246, 286, 287, 293, 317, 318, 327, 351, 352, 356, 358, 610, 644, 651, 655, 662, 664, 674, 691, 728, 894, 895, 904, 905, 999], "prioriti": [0, 4, 19, 72, 73, 129], "global_backend": [0, 4], "argument": [0, 4, 5, 14, 20, 27, 28, 29, 30, 31, 72, 73, 74, 75, 76, 115, 116, 118, 119, 121, 122, 123, 125, 126, 130, 132, 134, 135, 172, 173, 175, 176, 177, 179, 182, 184, 185, 188, 190, 191, 193, 196, 198, 199, 202, 204, 205, 207, 208, 210, 213, 220, 221, 223, 226, 228, 232, 233, 237, 238, 240, 241, 245, 246, 267, 270, 305, 308, 318, 327, 328, 342, 346, 350, 368, 369, 372, 382, 385, 387, 390, 391, 394, 432, 435, 465, 468, 537, 548, 551, 568, 571, 573, 576, 583, 586, 587, 590, 596, 600, 610, 616, 617, 621, 631, 638, 660, 667, 729, 732, 741, 742, 743, 746, 754, 756, 830, 864, 867, 894, 900, 912, 913, 916, 935, 937, 941, 955, 960, 963, 980, 983, 988, 989, 992, 1002, 1004, 1009, 1010, 1032, 1033], "s": [0, 4, 5, 6, 12, 15, 16, 17, 18, 19, 21, 24, 25, 27, 30, 31, 72, 73, 115, 117, 118, 119, 121, 123, 125, 126, 127, 128, 129, 130, 132, 134, 135, 136, 137, 148, 149, 174, 175, 210, 213, 228, 232, 233, 237, 246, 286, 287, 318, 337, 361, 368, 560, 563, 610, 619, 691, 698, 700, 703, 705, 711, 713, 719, 721, 742, 793, 795, 796, 798, 894, 900, 906, 955, 976, 979, 984, 987, 999, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1040, 1042, 1043], "paramet": [0, 4, 5, 24, 25, 27, 28, 29, 30, 31, 68, 69, 72, 73, 74, 75, 76, 113, 114, 116, 118, 121, 134, 135, 148, 160, 161, 162, 163, 164, 165, 166, 169, 171, 172, 173, 175, 176, 177, 179, 182, 184, 185, 188, 190, 191, 193, 196, 198, 199, 202, 204, 205, 207, 208, 210, 213, 215, 218, 220, 221, 223, 226, 228, 232, 233, 237, 238, 240, 241, 245, 246, 250, 251, 252, 255, 257, 260, 262, 265, 267, 270, 272, 273, 274, 275, 276, 279, 280, 281, 284, 286, 287, 288, 291, 293, 294, 297, 299, 302, 304, 305, 308, 310, 311, 312, 313, 317, 318, 327, 328, 331, 332, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 354, 356, 357, 358, 359, 360, 361, 362, 363, 364, 367, 368, 369, 372, 374, 377, 378, 381, 382, 385, 387, 390, 391, 394, 396, 399, 400, 403, 404, 407, 408, 411, 412, 415, 416, 419, 420, 423, 424, 427, 428, 431, 432, 435, 436, 439, 440, 443, 444, 447, 449, 452, 453, 456, 457, 460, 461, 464, 465, 468, 469, 472, 473, 476, 477, 480, 481, 484, 485, 488, 489, 492, 493, 496, 497, 500, 501, 504, 505, 508, 509, 512, 513, 516, 517, 520, 521, 524, 525, 528, 529, 532, 533, 536, 537, 538, 539, 542, 544, 547, 548, 551, 552, 555, 556, 559, 560, 563, 564, 567, 568, 571, 573, 576, 578, 581, 583, 586, 587, 590, 591, 595, 596, 600, 601, 605, 606, 609, 610, 611, 614, 616, 617, 618, 619, 620, 621, 622, 623, 625, 628, 629, 631, 632, 633, 634, 635, 636, 637, 638, 639, 642, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 663, 666, 667, 668, 669, 670, 672, 673, 675, 676, 677, 678, 680, 681, 685, 686, 687, 689, 690, 691, 693, 696, 698, 700, 702, 703, 705, 707, 709, 711, 713, 715, 717, 719, 721, 723, 724, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 746, 748, 750, 751, 753, 754, 756, 757, 759, 760, 762, 763, 765, 766, 769, 770, 772, 774, 776, 777, 779, 780, 782, 783, 785, 786, 788, 789, 790, 792, 793, 795, 796, 798, 799, 801, 802, 804, 805, 807, 808, 810, 811, 813, 814, 815, 818, 820, 823, 825, 828, 830, 831, 834, 836, 839, 840, 843, 844, 847, 848, 851, 852, 855, 856, 859, 860, 863, 864, 867, 869, 870, 873, 874, 877, 878, 881, 882, 885, 886, 889, 890, 891, 892, 893, 894, 895, 896, 897, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 916, 918, 919, 920, 921, 923, 924, 926, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 941, 942, 943, 944, 945, 948, 950, 953, 955, 956, 959, 960, 963, 964, 967, 968, 971, 972, 975, 976, 979, 980, 983, 984, 987, 988, 989, 992, 994, 997, 1002, 1004, 1009, 1010, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043], "from": [0, 4, 5, 6, 14, 15, 16, 17, 18, 19, 20, 21, 24, 25, 27, 28, 29, 30, 31, 68, 69, 72, 73, 74, 75, 76, 113, 114, 115, 116, 117, 118, 119, 121, 123, 125, 126, 127, 128, 129, 130, 132, 134, 135, 136, 137, 148, 149, 175, 176, 177, 179, 182, 185, 188, 193, 196, 198, 199, 202, 210, 213, 215, 218, 223, 226, 241, 245, 246, 267, 270, 305, 308, 318, 327, 328, 337, 352, 356, 361, 362, 368, 473, 476, 583, 586, 610, 631, 638, 639, 642, 680, 691, 698, 700, 711, 713, 729, 737, 740, 742, 754, 756, 793, 795, 805, 807, 830, 848, 851, 860, 863, 870, 873, 890, 891, 892, 893, 894, 896, 906, 907, 918, 919, 920, 921, 923, 924, 926, 930, 934, 935, 936, 942, 955, 972, 975, 976, 979, 980, 983, 984, 987, 988, 989, 992, 994, 997, 999, 1005, 1009, 1010, 1020, 1028, 1031, 1036, 1040], "which": [0, 4, 5, 14, 15, 16, 18, 19, 20, 21, 24, 25, 72, 73, 74, 75, 76, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 134, 135, 136, 137, 148, 149, 160, 165, 172, 173, 174, 175, 176, 177, 179, 182, 184, 185, 188, 190, 191, 198, 199, 202, 204, 205, 207, 208, 215, 218, 220, 221, 223, 226, 228, 232, 233, 237, 238, 240, 241, 245, 246, 267, 270, 272, 276, 279, 281, 284, 288, 291, 293, 317, 318, 327, 328, 338, 343, 344, 345, 346, 347, 348, 349, 350, 352, 356, 358, 360, 361, 362, 368, 560, 563, 610, 616, 628, 629, 631, 638, 639, 642, 644, 650, 654, 662, 663, 664, 666, 667, 689, 691, 698, 700, 702, 703, 705, 711, 713, 715, 717, 719, 721, 724, 726, 727, 729, 740, 742, 748, 750, 754, 756, 770, 772, 790, 792, 793, 795, 805, 807, 808, 810, 814, 820, 823, 825, 828, 830, 836, 839, 848, 851, 856, 859, 864, 867, 869, 874, 877, 894, 899, 900, 901, 902, 907, 908, 909, 910, 911, 918, 919, 920, 921, 924, 926, 930, 931, 932, 933, 934, 935, 936, 937, 941, 943, 944, 945, 948, 950, 953, 955, 960, 963, 964, 967, 968, 971, 972, 975, 976, 979, 980, 983, 984, 987, 988, 989, 992, 994, 997, 999, 1002, 1004, 1009, 1010, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1040, 1042, 1043], "try": [0, 4, 13, 15, 16, 18, 19, 20, 21, 72, 73, 125, 126, 130, 134, 149, 610, 687, 999], "infer": [0, 4, 115, 123, 127, 128, 132, 137, 172, 173, 175, 176, 177, 179, 182, 185, 188, 198, 199, 202, 215, 218, 223, 226, 241, 245, 368, 473, 476, 610, 647, 673, 830, 860, 863], "when": [0, 4, 14, 15, 18, 19, 20, 72, 73, 74, 75, 76, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 134, 135, 137, 149, 246, 252, 255, 318, 368, 382, 385, 461, 464, 556, 559, 610, 621, 654, 677, 814, 815, 818, 820, 823, 825, 828, 894, 905, 930, 931, 932, 934, 955, 960, 963, 968, 971, 976, 979, 984, 987, 999, 1032, 1033], "global": [0, 4, 5, 6, 12, 72, 73, 74, 75, 76, 122, 123, 127, 128, 132, 246, 273, 274, 275, 318, 327, 328, 360, 361, 362, 610, 645, 646, 665, 668, 669, 670, 676, 677, 691, 728, 912, 913, 916, 1034, 1035], "set": [0, 4, 5, 6, 12, 14, 17, 19, 27, 30, 31, 61, 72, 73, 106, 115, 116, 121, 122, 124, 125, 126, 127, 128, 129, 132, 134, 135, 318, 337, 347, 348, 359, 360, 361, 362, 368, 400, 403, 610, 611, 614, 668, 669, 670, 671, 672, 691, 698, 700, 703, 705, 707, 709, 711, 713, 715, 717, 719, 721, 742, 748, 750, 770, 772, 774, 776, 783, 785, 790, 792, 894, 895, 904, 905, 906, 910, 911, 918, 928, 930, 931, 936, 937, 941, 942, 943, 944, 945, 948, 950, 953, 955, 976, 979, 984, 987, 1020, 1029, 1036, 1037, 1038, 1039, 1040, 1041], "ret": [0, 4, 5, 12, 24, 25, 27, 28, 29, 30, 31, 72, 73, 79, 80, 116, 118, 132, 137, 160, 161, 162, 163, 164, 165, 166, 169, 171, 172, 173, 175, 176, 177, 179, 182, 184, 185, 188, 190, 191, 193, 196, 198, 199, 202, 204, 205, 207, 208, 210, 213, 215, 218, 220, 221, 223, 226, 228, 232, 233, 237, 238, 240, 241, 245, 246, 250, 251, 252, 255, 257, 260, 262, 265, 267, 270, 272, 276, 279, 280, 281, 284, 286, 287, 288, 291, 293, 294, 297, 299, 302, 304, 305, 308, 317, 318, 327, 334, 335, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 361, 362, 363, 364, 365, 367, 368, 369, 372, 374, 377, 378, 381, 382, 385, 387, 390, 391, 394, 396, 399, 400, 403, 404, 407, 408, 411, 412, 415, 416, 419, 420, 423, 424, 427, 428, 431, 432, 435, 436, 439, 440, 443, 444, 447, 449, 452, 453, 456, 457, 460, 461, 464, 465, 468, 469, 472, 473, 476, 477, 480, 481, 484, 485, 488, 489, 492, 493, 496, 497, 500, 501, 504, 505, 508, 509, 512, 513, 516, 517, 520, 521, 524, 525, 528, 529, 532, 533, 536, 537, 538, 539, 542, 544, 547, 548, 551, 552, 555, 556, 559, 560, 563, 564, 567, 568, 571, 573, 576, 578, 581, 583, 586, 587, 590, 591, 595, 596, 600, 601, 605, 606, 609, 610, 611, 614, 616, 618, 619, 620, 621, 622, 623, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 642, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 663, 666, 667, 673, 676, 677, 678, 680, 681, 685, 686, 689, 690, 691, 693, 696, 698, 700, 702, 703, 705, 707, 709, 711, 713, 715, 717, 719, 721, 724, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 746, 748, 750, 751, 753, 754, 756, 757, 759, 760, 762, 763, 765, 766, 769, 770, 772, 774, 776, 777, 779, 780, 782, 783, 785, 786, 788, 789, 790, 792, 793, 795, 796, 798, 799, 801, 802, 804, 805, 807, 808, 810, 811, 813, 814, 815, 818, 820, 823, 825, 828, 830, 831, 834, 836, 839, 840, 843, 844, 847, 848, 851, 852, 855, 856, 859, 860, 863, 864, 867, 869, 870, 873, 874, 877, 878, 881, 882, 885, 886, 889, 890, 891, 892, 893, 894, 895, 896, 897, 900, 904, 905, 906, 912, 913, 916, 918, 919, 920, 921, 923, 924, 926, 929, 930, 931, 932, 933, 934, 935, 936, 937, 941, 942, 943, 944, 945, 948, 950, 953, 955, 956, 959, 960, 963, 964, 967, 968, 971, 972, 975, 976, 979, 980, 983, 984, 987, 988, 989, 992, 994, 997, 1002, 1004, 1009, 1010, 1036, 1040], "exampl": [0, 4, 5, 6, 12, 16, 18, 19, 20, 24, 25, 34, 35, 38, 39, 40, 41, 42, 43, 48, 49, 50, 51, 52, 53, 54, 55, 60, 61, 66, 67, 68, 69, 74, 75, 79, 80, 83, 84, 85, 86, 87, 88, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 105, 106, 111, 112, 113, 114, 115, 116, 118, 121, 122, 123, 124, 125, 126, 127, 128, 129, 132, 134, 135, 136, 137, 148, 149, 160, 162, 163, 164, 165, 166, 169, 171, 172, 173, 175, 198, 199, 202, 210, 213, 220, 221, 223, 226, 238, 240, 241, 245, 246, 252, 255, 267, 268, 269, 270, 271, 286, 287, 317, 318, 337, 338, 340, 352, 353, 354, 355, 356, 359, 361, 363, 365, 366, 368, 369, 370, 371, 372, 373, 382, 383, 384, 385, 386, 387, 390, 391, 392, 393, 394, 395, 404, 407, 408, 411, 412, 415, 424, 427, 428, 431, 432, 433, 434, 435, 436, 439, 440, 443, 457, 460, 465, 466, 467, 468, 473, 476, 477, 480, 493, 496, 497, 500, 537, 538, 544, 547, 548, 551, 564, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 586, 587, 590, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 610, 611, 612, 613, 614, 615, 618, 619, 627, 628, 635, 638, 639, 640, 641, 642, 643, 646, 657, 671, 673, 674, 675, 680, 681, 682, 683, 684, 685, 686, 688, 691, 693, 694, 695, 696, 697, 728, 729, 730, 732, 734, 735, 736, 741, 742, 743, 744, 745, 746, 747, 748, 750, 751, 753, 754, 756, 763, 765, 774, 776, 780, 782, 793, 795, 799, 801, 802, 804, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 839, 844, 847, 848, 851, 856, 859, 860, 863, 864, 865, 866, 867, 868, 869, 870, 873, 874, 877, 878, 881, 894, 897, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 926, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 944, 945, 948, 955, 956, 959, 960, 963, 976, 979, 980, 983, 988, 989, 990, 991, 992, 993, 994, 995, 996, 998, 999], "If": [0, 4, 5, 6, 14, 17, 18, 19, 20, 21, 27, 30, 31, 72, 73, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 134, 135, 137, 149, 175, 176, 177, 184, 185, 188, 190, 191, 198, 199, 202, 210, 213, 220, 221, 223, 226, 228, 232, 233, 237, 238, 240, 241, 245, 246, 252, 255, 262, 265, 305, 308, 318, 337, 361, 368, 369, 372, 374, 377, 378, 381, 382, 385, 387, 390, 391, 394, 396, 399, 400, 403, 432, 435, 436, 439, 440, 443, 457, 460, 461, 464, 465, 468, 501, 504, 505, 508, 513, 516, 517, 520, 525, 528, 529, 532, 539, 542, 556, 559, 560, 563, 564, 567, 568, 571, 573, 576, 578, 581, 583, 586, 596, 600, 601, 605, 606, 609, 610, 654, 691, 698, 700, 703, 705, 711, 713, 715, 717, 719, 721, 728, 742, 743, 746, 748, 750, 770, 772, 774, 776, 783, 785, 786, 788, 790, 792, 793, 795, 805, 807, 808, 810, 814, 815, 818, 820, 823, 825, 828, 830, 844, 847, 848, 851, 864, 867, 869, 870, 873, 874, 877, 890, 891, 892, 894, 906, 907, 918, 923, 924, 926, 930, 931, 932, 933, 935, 936, 937, 941, 943, 944, 945, 948, 950, 953, 955, 960, 963, 964, 967, 968, 971, 972, 975, 976, 979, 980, 983, 984, 987, 988, 989, 992, 994, 997, 999], "import": [0, 4, 15, 20, 68, 69, 113, 114, 116, 118, 119, 123, 125, 126, 127, 128, 129, 130, 132, 134, 135, 137, 149, 318, 359, 999, 1005], "numpi": [0, 4, 5, 6, 14, 15, 19, 20, 72, 73, 117, 121, 123, 127, 128, 129, 132, 134, 137, 610, 681, 685, 955, 956, 959, 999], "np": [0, 4, 117, 121, 125, 127, 128, 129, 134, 135, 137, 999], "x": [0, 4, 12, 21, 24, 25, 27, 30, 31, 34, 35, 38, 39, 40, 41, 48, 49, 50, 51, 52, 53, 54, 55, 60, 61, 66, 67, 70, 71, 72, 73, 74, 75, 77, 78, 79, 80, 83, 84, 85, 86, 87, 88, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 105, 106, 107, 108, 111, 112, 116, 117, 118, 119, 121, 122, 123, 126, 129, 130, 132, 134, 135, 136, 137, 160, 161, 162, 163, 164, 165, 166, 169, 170, 171, 175, 179, 182, 183, 185, 188, 189, 193, 196, 197, 199, 202, 203, 210, 213, 215, 218, 219, 223, 226, 227, 228, 229, 232, 233, 234, 237, 238, 240, 241, 242, 245, 246, 252, 255, 256, 262, 265, 266, 267, 268, 269, 270, 271, 276, 279, 318, 337, 338, 339, 340, 343, 344, 352, 356, 361, 363, 368, 369, 370, 371, 372, 373, 374, 377, 378, 381, 382, 383, 384, 385, 386, 387, 390, 391, 392, 393, 394, 395, 396, 399, 400, 403, 404, 407, 408, 411, 412, 415, 428, 431, 432, 433, 434, 435, 436, 439, 440, 443, 453, 456, 457, 460, 461, 464, 465, 466, 467, 468, 473, 476, 477, 480, 481, 484, 485, 488, 489, 492, 493, 496, 497, 500, 501, 504, 505, 508, 509, 512, 513, 516, 525, 528, 537, 538, 544, 547, 552, 555, 564, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 586, 587, 590, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 609, 610, 618, 619, 620, 622, 623, 625, 627, 628, 629, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 646, 647, 649, 650, 652, 653, 654, 656, 657, 658, 659, 663, 673, 675, 678, 680, 681, 682, 683, 684, 685, 686, 689, 690, 691, 702, 707, 709, 710, 724, 726, 727, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 750, 751, 753, 754, 756, 757, 759, 760, 762, 763, 765, 770, 772, 773, 774, 776, 777, 779, 780, 782, 783, 785, 786, 788, 789, 793, 795, 796, 798, 799, 801, 802, 804, 808, 810, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 839, 840, 843, 844, 847, 848, 851, 852, 855, 856, 859, 860, 863, 864, 865, 866, 867, 868, 869, 870, 873, 874, 875, 876, 877, 878, 881, 882, 885, 886, 889, 894, 895, 897, 900, 904, 905, 906, 912, 913, 914, 915, 916, 917, 918, 920, 921, 922, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 948, 949, 950, 953, 954, 955, 956, 959, 960, 963, 964, 967, 968, 971, 972, 975, 976, 979, 980, 983, 984, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1020, 1031], "arrai": [0, 4, 18, 19, 20, 22, 23, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 72, 73, 74, 75, 76, 77, 78, 79, 80, 83, 84, 85, 86, 87, 88, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 105, 106, 111, 112, 115, 116, 118, 119, 121, 122, 123, 124, 126, 127, 128, 129, 130, 131, 132, 133, 135, 136, 137, 149, 150, 158, 160, 161, 162, 163, 164, 165, 166, 169, 171, 174, 175, 176, 177, 179, 182, 184, 185, 188, 190, 191, 193, 196, 198, 199, 202, 204, 205, 207, 208, 210, 212, 213, 214, 215, 218, 220, 221, 223, 226, 228, 232, 233, 237, 238, 240, 241, 245, 246, 252, 255, 257, 259, 260, 261, 262, 265, 267, 269, 270, 271, 276, 279, 281, 284, 288, 291, 294, 297, 299, 302, 305, 308, 313, 318, 337, 338, 339, 340, 343, 344, 345, 346, 347, 348, 349, 350, 352, 356, 358, 362, 363, 368, 369, 371, 372, 373, 374, 377, 378, 381, 382, 384, 385, 386, 387, 390, 391, 393, 394, 395, 396, 399, 400, 403, 404, 407, 408, 411, 412, 415, 416, 419, 420, 423, 424, 427, 428, 431, 432, 434, 435, 436, 439, 440, 443, 444, 447, 449, 452, 453, 456, 457, 460, 461, 464, 465, 467, 468, 469, 472, 473, 476, 477, 480, 481, 484, 485, 488, 489, 492, 493, 496, 497, 500, 501, 504, 505, 508, 509, 512, 513, 516, 517, 520, 521, 524, 525, 528, 529, 532, 533, 536, 537, 538, 539, 542, 544, 547, 548, 551, 552, 555, 556, 559, 560, 563, 564, 567, 568, 570, 571, 572, 573, 575, 576, 577, 578, 580, 581, 582, 583, 586, 587, 590, 591, 595, 596, 597, 599, 600, 601, 602, 604, 605, 606, 609, 610, 611, 613, 614, 615, 618, 619, 620, 622, 623, 625, 627, 628, 629, 632, 633, 634, 635, 636, 637, 638, 639, 641, 642, 643, 644, 647, 649, 650, 651, 652, 653, 654, 656, 657, 659, 662, 663, 664, 666, 667, 671, 673, 675, 678, 680, 681, 682, 684, 685, 686, 688, 689, 690, 691, 693, 695, 696, 697, 698, 700, 703, 705, 707, 709, 711, 713, 715, 717, 719, 721, 724, 726, 727, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 745, 746, 747, 748, 750, 751, 753, 754, 756, 757, 759, 760, 762, 763, 765, 766, 769, 770, 772, 773, 774, 776, 777, 779, 780, 782, 783, 785, 786, 788, 789, 790, 792, 793, 795, 796, 798, 799, 801, 802, 804, 805, 807, 808, 810, 811, 813, 814, 815, 817, 818, 819, 820, 822, 823, 824, 825, 827, 828, 829, 830, 831, 833, 834, 835, 836, 839, 840, 843, 844, 847, 848, 851, 852, 855, 856, 859, 860, 863, 864, 866, 867, 868, 869, 870, 873, 874, 877, 878, 881, 882, 885, 886, 889, 890, 891, 892, 893, 894, 896, 897, 906, 907, 912, 913, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 926, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 940, 941, 942, 943, 944, 945, 948, 950, 953, 955, 956, 959, 960, 963, 964, 967, 968, 971, 972, 975, 976, 979, 980, 983, 984, 987, 988, 989, 991, 992, 993, 994, 996, 997, 998, 999, 1002, 1004, 1020, 1028, 1031], "2": [0, 4, 18, 19, 21, 24, 25, 34, 35, 38, 39, 40, 41, 42, 43, 48, 49, 50, 51, 52, 53, 54, 55, 60, 61, 66, 67, 72, 73, 74, 75, 79, 80, 83, 84, 85, 86, 87, 88, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 105, 106, 111, 112, 117, 119, 121, 123, 126, 131, 132, 134, 135, 136, 137, 149, 160, 162, 163, 164, 165, 171, 174, 175, 198, 199, 202, 210, 213, 220, 221, 223, 226, 241, 245, 246, 252, 255, 267, 268, 269, 270, 271, 318, 337, 338, 340, 352, 354, 356, 363, 368, 369, 370, 371, 372, 373, 382, 383, 384, 385, 386, 387, 390, 391, 393, 394, 395, 396, 399, 400, 403, 408, 411, 412, 415, 424, 427, 428, 431, 432, 433, 434, 435, 436, 439, 440, 443, 457, 460, 465, 466, 467, 468, 473, 476, 477, 480, 493, 496, 497, 500, 513, 516, 537, 538, 544, 547, 548, 551, 564, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 586, 587, 590, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 610, 611, 612, 613, 614, 618, 619, 622, 623, 625, 628, 635, 638, 639, 640, 641, 642, 643, 657, 673, 675, 680, 691, 693, 694, 695, 696, 697, 729, 732, 733, 734, 735, 736, 741, 742, 743, 744, 745, 746, 747, 748, 750, 751, 753, 754, 755, 756, 763, 765, 766, 769, 770, 772, 774, 776, 780, 782, 783, 785, 786, 788, 793, 795, 799, 800, 801, 802, 804, 808, 809, 810, 814, 815, 816, 817, 818, 819, 820, 822, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 839, 844, 847, 848, 851, 856, 859, 860, 863, 864, 865, 866, 867, 868, 869, 870, 873, 878, 881, 894, 897, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 926, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 944, 945, 948, 955, 956, 959, 960, 963, 988, 989, 990, 991, 992, 993, 994, 995, 996, 998, 999], "0": [0, 4, 19, 24, 25, 32, 33, 38, 39, 40, 41, 42, 43, 48, 49, 50, 51, 52, 53, 54, 55, 60, 61, 64, 65, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 116, 118, 119, 121, 132, 134, 135, 136, 137, 160, 162, 163, 164, 165, 166, 169, 171, 175, 176, 177, 190, 191, 192, 204, 205, 207, 208, 209, 223, 226, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 240, 241, 245, 246, 252, 255, 267, 269, 270, 271, 281, 284, 318, 320, 323, 327, 330, 334, 337, 338, 340, 343, 344, 345, 346, 347, 348, 349, 350, 352, 356, 359, 361, 362, 366, 368, 369, 370, 372, 373, 374, 377, 378, 381, 382, 385, 386, 387, 390, 391, 392, 393, 394, 395, 396, 399, 400, 403, 404, 407, 408, 411, 416, 419, 424, 427, 428, 431, 432, 433, 434, 435, 436, 439, 440, 443, 457, 460, 461, 464, 465, 466, 467, 468, 477, 480, 497, 500, 501, 504, 505, 508, 513, 516, 537, 538, 539, 542, 544, 547, 548, 551, 556, 559, 560, 563, 564, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 586, 587, 590, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 609, 610, 611, 612, 613, 614, 615, 618, 619, 622, 623, 625, 627, 628, 629, 635, 638, 639, 642, 643, 648, 657, 663, 666, 667, 673, 680, 681, 682, 683, 684, 685, 686, 691, 693, 694, 695, 696, 697, 698, 699, 700, 701, 711, 712, 713, 714, 715, 716, 717, 718, 729, 730, 732, 734, 735, 736, 741, 742, 743, 744, 745, 746, 747, 748, 750, 751, 753, 754, 755, 756, 763, 765, 793, 795, 799, 801, 802, 803, 804, 808, 810, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 851, 852, 855, 856, 859, 864, 865, 866, 867, 868, 869, 870, 873, 874, 875, 876, 877, 878, 881, 886, 888, 894, 897, 906, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 943, 944, 945, 948, 955, 956, 959, 960, 963, 964, 967, 976, 977, 978, 979, 980, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 998, 999, 1011, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1042, 1043], "print": [0, 4, 5, 6, 12, 18, 24, 25, 34, 35, 38, 39, 40, 41, 42, 43, 48, 49, 50, 51, 52, 53, 54, 55, 60, 61, 66, 67, 68, 69, 72, 73, 74, 75, 76, 79, 80, 83, 84, 85, 86, 87, 88, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 105, 106, 111, 112, 113, 114, 119, 121, 126, 132, 134, 135, 136, 160, 162, 163, 164, 165, 166, 169, 171, 175, 198, 199, 202, 210, 213, 220, 221, 223, 226, 238, 240, 241, 245, 246, 252, 255, 267, 268, 269, 270, 271, 286, 287, 317, 318, 338, 352, 353, 354, 355, 356, 358, 361, 365, 368, 369, 370, 371, 372, 373, 382, 383, 384, 385, 386, 387, 390, 391, 392, 393, 394, 395, 404, 407, 408, 411, 412, 415, 424, 427, 428, 431, 432, 433, 434, 435, 436, 439, 440, 443, 457, 460, 465, 466, 467, 468, 473, 476, 477, 480, 493, 496, 497, 500, 537, 538, 544, 547, 548, 551, 564, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 586, 587, 590, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 610, 611, 612, 613, 614, 615, 618, 619, 627, 628, 635, 638, 639, 640, 641, 642, 643, 646, 664, 673, 675, 680, 681, 682, 683, 684, 685, 686, 691, 693, 694, 696, 697, 728, 729, 730, 732, 734, 735, 736, 741, 742, 743, 744, 745, 746, 747, 748, 750, 751, 753, 754, 756, 763, 765, 780, 782, 793, 795, 799, 801, 802, 804, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 844, 847, 848, 851, 856, 859, 860, 863, 864, 865, 866, 867, 868, 869, 870, 873, 878, 881, 894, 897, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 926, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 944, 945, 948, 955, 956, 959, 960, 963, 976, 979, 980, 983, 988, 989, 990, 991, 992, 993, 994, 995, 996, 998, 999], "function": [0, 4, 5, 6, 14, 19, 21, 22, 23, 24, 25, 27, 32, 33, 34, 35, 38, 39, 40, 41, 42, 43, 48, 49, 50, 51, 52, 53, 54, 55, 60, 61, 66, 67, 68, 69, 70, 71, 72, 73, 79, 80, 83, 84, 85, 86, 87, 88, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 105, 106, 111, 112, 113, 114, 115, 116, 118, 119, 120, 123, 125, 129, 130, 131, 133, 134, 135, 136, 147, 148, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 179, 180, 182, 184, 185, 186, 188, 190, 191, 193, 194, 196, 198, 199, 200, 202, 204, 205, 207, 208, 210, 213, 215, 216, 218, 220, 221, 223, 224, 226, 228, 230, 232, 233, 235, 237, 238, 240, 241, 243, 245, 246, 250, 251, 252, 255, 257, 260, 262, 265, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 279, 280, 281, 284, 286, 287, 288, 291, 293, 294, 297, 299, 302, 304, 305, 308, 310, 311, 312, 313, 314, 315, 316, 317, 318, 320, 321, 322, 323, 324, 325, 327, 328, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 377, 378, 381, 382, 383, 384, 385, 386, 387, 390, 391, 392, 393, 394, 395, 396, 399, 400, 403, 404, 407, 408, 411, 412, 415, 416, 419, 420, 423, 424, 427, 428, 431, 432, 433, 434, 435, 436, 439, 440, 443, 444, 447, 449, 452, 453, 456, 457, 460, 461, 464, 465, 466, 467, 468, 469, 472, 473, 476, 477, 480, 481, 484, 485, 488, 489, 492, 493, 496, 497, 500, 501, 504, 505, 508, 509, 512, 513, 516, 517, 520, 521, 524, 525, 528, 529, 532, 533, 536, 537, 538, 539, 542, 544, 547, 548, 551, 552, 555, 556, 559, 560, 563, 564, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 586, 587, 590, 591, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 693, 694, 695, 696, 697, 698, 700, 702, 703, 705, 707, 709, 711, 713, 715, 717, 719, 721, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 750, 751, 753, 754, 756, 757, 759, 760, 762, 763, 765, 766, 769, 770, 772, 773, 774, 776, 777, 779, 780, 782, 783, 785, 786, 788, 789, 790, 792, 793, 795, 796, 798, 799, 801, 802, 804, 805, 807, 808, 810, 811, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 839, 840, 843, 844, 847, 848, 851, 852, 855, 856, 859, 860, 863, 864, 865, 866, 867, 868, 869, 870, 873, 874, 877, 878, 881, 882, 885, 886, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 926, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 948, 950, 953, 955, 956, 959, 960, 963, 964, 967, 968, 971, 972, 975, 976, 979, 980, 983, 984, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1002, 1004, 1006, 1007, 1008, 1036, 1039, 1041], "py": [0, 4, 5, 19, 116, 117, 118, 121, 122, 123, 127, 128, 130, 132, 134, 136, 137, 918, 919, 923], "noqa": [0, 4, 5, 175, 176, 177, 179, 182, 184, 185, 188, 190, 191, 193, 196, 198, 199, 202, 204, 205, 210, 213, 220, 221, 223, 226, 228, 232, 233, 237, 238, 240, 241, 245, 246, 267, 270, 368, 369, 372, 382, 385, 391, 394, 408, 411, 428, 431, 432, 435, 440, 443, 497, 500, 537, 548, 551, 564, 567, 568, 571, 583, 586, 587, 590, 596, 600, 601, 605, 742, 751, 753, 754, 756, 830, 844, 847, 848, 851, 864, 867, 955, 960, 963], "The": [0, 4, 5, 13, 14, 16, 17, 18, 20, 21, 24, 25, 27, 28, 29, 30, 31, 72, 73, 74, 75, 76, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 135, 136, 137, 148, 160, 161, 162, 165, 171, 172, 173, 175, 176, 177, 193, 196, 207, 208, 228, 232, 233, 237, 246, 250, 251, 252, 255, 272, 280, 286, 287, 293, 294, 297, 299, 302, 304, 313, 317, 318, 327, 328, 334, 335, 336, 337, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 356, 357, 358, 359, 360, 361, 362, 364, 367, 368, 369, 372, 374, 377, 378, 381, 382, 385, 387, 390, 391, 394, 396, 399, 400, 403, 404, 407, 408, 411, 412, 415, 416, 419, 420, 423, 424, 427, 428, 431, 432, 435, 436, 439, 440, 443, 444, 447, 449, 452, 453, 456, 457, 460, 461, 464, 465, 468, 469, 472, 473, 476, 477, 480, 481, 484, 485, 488, 489, 492, 493, 496, 497, 500, 501, 504, 505, 508, 513, 516, 517, 520, 521, 524, 525, 528, 529, 532, 533, 536, 539, 542, 548, 551, 556, 559, 560, 563, 564, 567, 568, 571, 573, 576, 578, 581, 583, 586, 596, 600, 601, 605, 606, 609, 610, 616, 618, 621, 622, 630, 631, 637, 639, 642, 652, 653, 654, 656, 657, 658, 659, 661, 666, 667, 668, 669, 670, 675, 676, 677, 690, 691, 693, 696, 698, 700, 703, 705, 711, 713, 715, 717, 719, 721, 724, 727, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 740, 741, 742, 743, 746, 748, 750, 751, 753, 754, 756, 757, 759, 760, 762, 763, 765, 770, 772, 774, 776, 777, 779, 780, 782, 783, 785, 786, 788, 789, 790, 792, 793, 795, 796, 798, 799, 801, 802, 804, 805, 807, 808, 810, 814, 815, 818, 820, 823, 825, 828, 830, 836, 839, 840, 843, 844, 847, 848, 851, 852, 855, 856, 859, 860, 863, 869, 882, 885, 890, 891, 892, 893, 894, 895, 896, 897, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 916, 918, 919, 923, 930, 931, 932, 933, 935, 936, 937, 941, 943, 944, 945, 948, 950, 953, 955, 956, 959, 960, 963, 964, 967, 968, 971, 972, 975, 976, 979, 980, 983, 984, 987, 988, 989, 992, 994, 997, 999, 1009, 1010, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1038, 1039, 1040], "set_backend": [0, 4, 5, 12, 122, 123, 124, 127, 246, 286, 287, 318, 359, 610, 673, 999], "ha": [0, 4, 5, 14, 15, 16, 19, 72, 73, 118, 119, 121, 122, 123, 124, 127, 128, 130, 132, 134, 136, 137, 148, 149, 175, 210, 213, 318, 337, 368, 369, 372, 539, 542, 556, 559, 691, 728, 742, 766, 769, 789, 790, 792, 793, 795, 802, 804, 830, 844, 847, 870, 873, 935, 936, 937, 941, 943, 955, 964, 967, 972, 975, 976, 979, 980, 983, 984, 987], "over": [0, 4, 14, 16, 18, 68, 69, 72, 73, 113, 114, 118, 119, 121, 123, 129, 134, 149, 742, 770, 772, 799, 801, 805, 807, 808, 810, 912, 913, 916, 918, 924, 926, 955, 960, 963, 964, 967, 968, 971, 972, 975, 976, 979, 980, 983, 984, 987, 988, 989, 992, 994, 997, 1034, 1035], "ani": [0, 4, 12, 14, 15, 16, 17, 18, 19, 20, 21, 27, 28, 29, 66, 67, 68, 69, 72, 73, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 125, 126, 127, 128, 129, 132, 134, 135, 136, 137, 148, 149, 172, 173, 175, 176, 177, 179, 182, 184, 185, 188, 190, 191, 193, 196, 198, 199, 202, 204, 205, 207, 208, 210, 213, 215, 218, 220, 221, 223, 226, 228, 232, 233, 237, 238, 240, 241, 245, 246, 267, 270, 318, 363, 368, 369, 372, 382, 385, 387, 390, 391, 394, 432, 435, 449, 452, 465, 468, 477, 480, 497, 500, 537, 548, 551, 568, 571, 573, 576, 583, 586, 587, 590, 596, 600, 610, 611, 614, 631, 632, 633, 634, 635, 638, 649, 656, 657, 658, 659, 676, 677, 691, 702, 729, 732, 739, 741, 742, 743, 746, 754, 756, 830, 864, 867, 890, 891, 892, 893, 894, 897, 900, 904, 912, 913, 916, 918, 924, 926, 935, 937, 941, 955, 960, 963, 988, 989, 992, 998, 999], "pass": [0, 4, 20, 68, 69, 72, 73, 74, 75, 76, 113, 114, 117, 118, 119, 120, 121, 122, 123, 125, 126, 129, 130, 134, 149, 246, 272, 318, 327, 362, 368, 400, 403, 610, 621, 654, 691, 727, 890, 891, 892, 1009, 1010, 1032, 1033, 1036, 1040, 1042, 1043], "jax": [0, 4, 5, 6, 15, 16, 19, 20, 117, 121, 123, 127, 128, 129, 132, 134, 137, 149, 691, 707, 709, 935, 936, 937, 941, 943, 999], "get_backend": [0, 122, 123], "specifi": [0, 5, 72, 73, 115, 117, 121, 122, 127, 128, 129, 132, 135, 136, 137, 175, 176, 177, 184, 198, 204, 205, 207, 208, 220, 221, 228, 232, 233, 237, 238, 240, 246, 252, 255, 262, 265, 318, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 352, 356, 358, 361, 362, 363, 368, 560, 563, 610, 616, 628, 638, 639, 642, 649, 689, 742, 754, 756, 770, 772, 799, 801, 802, 804, 805, 807, 808, 810, 814, 815, 818, 820, 823, 825, 828, 830, 831, 834, 836, 839, 840, 843, 848, 851, 864, 867, 870, 873, 874, 877, 886, 889, 894, 899, 901, 902, 908, 909, 910, 911, 930, 931, 932, 935, 936, 937, 941, 943, 944, 945, 948, 955, 956, 959, 972, 975, 980, 983, 988, 989, 992, 994, 997], "isn": [0, 5, 19, 135, 149], "t": [0, 5, 15, 16, 18, 19, 20, 21, 24, 25, 68, 69, 113, 114, 119, 121, 127, 132, 134, 135, 136, 137, 149, 610, 619, 729, 738, 739], "associ": [0, 5, 19, 121, 122, 124, 149, 368, 382, 385, 539, 542, 742, 774, 776, 783, 785, 811, 813], "option": [0, 5, 18, 19, 27, 28, 29, 30, 31, 68, 69, 72, 73, 74, 75, 113, 114, 116, 117, 118, 119, 121, 122, 126, 127, 128, 129, 130, 132, 137, 149, 160, 161, 162, 163, 164, 165, 166, 169, 171, 172, 173, 175, 176, 177, 179, 182, 184, 185, 188, 190, 191, 193, 196, 198, 199, 202, 204, 205, 207, 208, 210, 213, 215, 218, 220, 221, 223, 226, 228, 232, 233, 237, 238, 240, 241, 245, 246, 252, 255, 262, 265, 272, 273, 274, 275, 293, 317, 318, 337, 361, 362, 363, 368, 369, 372, 374, 377, 378, 381, 382, 385, 387, 390, 391, 394, 396, 399, 400, 403, 404, 407, 408, 411, 412, 415, 416, 419, 420, 423, 424, 427, 428, 431, 432, 435, 436, 439, 440, 443, 444, 447, 449, 452, 453, 456, 457, 460, 461, 464, 465, 468, 469, 472, 473, 476, 477, 480, 481, 484, 485, 488, 489, 492, 493, 496, 501, 504, 505, 508, 509, 512, 513, 516, 517, 520, 521, 524, 525, 528, 529, 532, 533, 536, 537, 538, 539, 542, 544, 547, 548, 551, 552, 555, 556, 559, 560, 563, 564, 567, 568, 571, 573, 576, 578, 581, 583, 586, 587, 590, 591, 595, 596, 600, 601, 605, 606, 609, 610, 616, 622, 623, 625, 628, 629, 630, 632, 633, 634, 636, 638, 639, 642, 650, 661, 663, 666, 667, 676, 677, 691, 724, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 746, 748, 750, 751, 753, 754, 756, 760, 762, 763, 765, 766, 769, 770, 772, 774, 776, 777, 779, 780, 782, 783, 785, 789, 790, 792, 793, 795, 796, 798, 799, 801, 802, 804, 805, 807, 808, 810, 811, 813, 814, 815, 818, 820, 823, 825, 828, 830, 831, 834, 836, 839, 840, 843, 844, 847, 848, 851, 852, 855, 856, 859, 860, 863, 864, 867, 869, 870, 873, 874, 877, 878, 881, 882, 885, 886, 889, 890, 891, 892, 893, 894, 895, 900, 905, 906, 912, 913, 916, 918, 919, 920, 921, 923, 924, 926, 929, 930, 931, 932, 934, 935, 943, 944, 945, 948, 950, 953, 955, 956, 959, 960, 963, 964, 967, 968, 971, 972, 975, 976, 979, 980, 983, 984, 987, 988, 989, 992, 994, 997], "str": [0, 5, 27, 28, 29, 72, 73, 127, 128, 130, 172, 173, 175, 210, 213, 246, 250, 272, 273, 274, 280, 281, 284, 288, 291, 293, 294, 297, 299, 302, 310, 311, 312, 317, 318, 334, 337, 338, 340, 343, 344, 345, 346, 362, 610, 616, 630, 632, 633, 634, 661, 666, 667, 729, 730, 731, 732, 733, 734, 735, 736, 742, 786, 788, 890, 891, 892, 893, 894, 900, 955, 956, 959], "we": [0, 5, 6, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 68, 69, 113, 114, 115, 116, 117, 118, 119, 120, 122, 124, 125, 126, 127, 129, 130, 132, 133, 134, 135, 136, 137, 148, 149, 691, 702, 999, 1005], "want": [0, 5, 15, 17, 18, 19, 68, 69, 113, 114, 121, 135, 136, 137, 149], "retriev": [0, 5, 19, 610, 616], "i": [0, 5, 19, 21, 115, 121, 132, 135, 137, 175, 176, 177, 210, 213, 368, 369, 372, 400, 403, 416, 419, 424, 427, 432, 435, 465, 468, 469, 472, 481, 484, 537, 538, 544, 547, 556, 559, 560, 563, 610, 618, 619, 691, 698, 700, 703, 705, 711, 713, 715, 717, 719, 721, 742, 748, 750, 766, 769, 774, 776, 783, 785, 790, 792, 793, 795, 802, 804, 808, 810, 830, 874, 877, 894, 897, 935, 936, 937, 941, 943, 944, 945, 948, 950, 953, 955, 956, 959, 960, 963, 964, 967, 968, 971, 976, 979, 980, 983, 984, 987], "e": [0, 5, 15, 16, 17, 19, 21, 115, 121, 126, 135, 149, 174, 175, 210, 213, 246, 251, 305, 308, 318, 334, 368, 369, 372, 400, 403, 416, 419, 424, 427, 432, 435, 457, 460, 465, 468, 469, 472, 481, 484, 501, 504, 509, 512, 537, 538, 544, 547, 556, 559, 560, 563, 691, 698, 700, 703, 705, 711, 713, 715, 717, 719, 721, 742, 748, 750, 766, 769, 774, 776, 783, 785, 790, 792, 793, 795, 808, 810, 830, 874, 877, 894, 897, 918, 923, 924, 926, 935, 936, 937, 941, 943, 944, 945, 948, 950, 953, 955, 960, 963, 964, 967, 968, 971, 972, 975, 976, 979, 980, 983, 984, 987], "one": [0, 5, 15, 16, 18, 19, 24, 25, 72, 73, 83, 84, 85, 86, 93, 94, 97, 98, 99, 100, 101, 102, 117, 119, 121, 122, 125, 126, 127, 129, 130, 131, 134, 135, 137, 149, 175, 176, 177, 210, 213, 246, 257, 260, 267, 270, 318, 347, 348, 349, 350, 362, 368, 369, 373, 382, 386, 391, 395, 537, 568, 572, 573, 577, 610, 611, 613, 614, 615, 639, 643, 660, 663, 666, 667, 681, 682, 684, 742, 743, 747, 766, 769, 770, 772, 780, 782, 786, 788, 805, 807, 808, 810, 830, 831, 835, 844, 847, 848, 851, 864, 867, 868, 870, 873, 912, 913, 915, 916, 917, 920, 922, 930, 931, 933, 935, 936, 937, 941, 942, 943, 955, 956, 959, 999], "default": [0, 5, 19, 24, 25, 27, 28, 29, 30, 31, 68, 69, 72, 73, 74, 75, 76, 113, 114, 117, 118, 119, 121, 122, 123, 126, 127, 128, 136, 160, 161, 162, 163, 164, 165, 166, 169, 171, 172, 173, 175, 176, 177, 179, 182, 184, 185, 188, 190, 191, 193, 196, 198, 199, 202, 204, 205, 207, 208, 210, 213, 215, 218, 220, 221, 223, 226, 228, 232, 233, 237, 238, 240, 241, 245, 246, 252, 255, 262, 265, 273, 274, 275, 276, 279, 318, 327, 328, 337, 338, 342, 343, 344, 345, 346, 347, 348, 349, 350, 357, 359, 360, 361, 362, 363, 366, 367, 368, 369, 372, 374, 377, 378, 381, 382, 385, 387, 390, 391, 394, 396, 399, 400, 403, 404, 407, 408, 411, 412, 415, 416, 419, 420, 423, 424, 427, 428, 431, 432, 435, 436, 439, 440, 443, 444, 447, 449, 452, 453, 456, 457, 460, 461, 464, 465, 468, 469, 472, 473, 476, 477, 480, 481, 484, 485, 488, 489, 492, 493, 496, 501, 504, 505, 508, 509, 512, 513, 516, 517, 520, 521, 524, 525, 528, 529, 532, 533, 536, 537, 538, 539, 542, 544, 547, 548, 551, 552, 555, 556, 559, 560, 563, 564, 567, 568, 571, 573, 576, 578, 581, 583, 586, 587, 590, 591, 595, 596, 600, 601, 605, 606, 609, 610, 611, 614, 616, 622, 623, 625, 628, 629, 632, 633, 634, 636, 637, 638, 639, 642, 647, 648, 649, 650, 651, 654, 655, 656, 657, 659, 660, 661, 663, 665, 666, 667, 670, 673, 676, 677, 689, 690, 691, 693, 696, 698, 700, 702, 703, 705, 707, 709, 711, 713, 715, 717, 719, 721, 724, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 746, 748, 750, 751, 753, 754, 756, 760, 762, 763, 765, 766, 769, 770, 772, 774, 776, 777, 779, 780, 782, 783, 785, 786, 788, 789, 790, 792, 793, 795, 796, 798, 799, 801, 802, 804, 805, 807, 808, 810, 811, 813, 814, 815, 818, 820, 823, 825, 828, 830, 831, 834, 836, 839, 840, 843, 844, 847, 848, 851, 852, 855, 856, 859, 860, 863, 864, 867, 869, 870, 873, 874, 877, 878, 881, 882, 885, 886, 889, 890, 891, 892, 893, 894, 895, 896, 900, 904, 905, 906, 907, 912, 913, 916, 918, 919, 920, 921, 923, 924, 926, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 941, 943, 944, 945, 948, 950, 953, 955, 956, 959, 960, 963, 964, 967, 968, 971, 972, 975, 976, 979, 980, 983, 984, 987, 988, 989, 992, 994, 997, 1009, 1010, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043], "torch": [0, 5, 12, 19, 116, 117, 121, 122, 123, 125, 126, 127, 128, 129, 132, 134, 135, 136, 137, 149, 172, 173, 246, 286, 287, 318, 359, 610, 673, 830, 844, 847, 999], "tensorflow": [0, 5, 12, 15, 16, 19, 20, 117, 121, 127, 128, 129, 132, 137, 149, 999], "mxnet": [0, 5, 15, 20, 127, 128, 129, 132, 137, 999], "either": [0, 5, 12, 18, 19, 21, 72, 73, 118, 119, 121, 122, 123, 126, 127, 128, 132, 134, 135, 149, 175, 193, 196, 368, 382, 385, 400, 403, 485, 488, 501, 504, 505, 508, 513, 516, 517, 520, 539, 542, 560, 563, 568, 571, 573, 576, 596, 600, 610, 631, 656, 660, 661, 742, 766, 769, 890, 891, 892, 893, 955, 972, 975, 980, 983, 1020, 1031, 1032, 1033], "doesn": [0, 5, 18, 21, 119, 121, 127, 132, 149], "matter": [0, 5, 14, 119], "been": [0, 5, 19, 117, 118, 121, 122, 123, 126, 127, 128, 130, 132, 148, 149, 318, 337, 610, 632, 633, 634, 918, 919], "ivy_np": [0, 5, 121], "us": [0, 5, 12, 15, 16, 17, 19, 20, 38, 39, 68, 69, 72, 73, 74, 75, 76, 83, 84, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 125, 126, 127, 128, 129, 130, 131, 132, 134, 136, 137, 148, 149, 160, 162, 163, 164, 165, 166, 169, 171, 174, 246, 280, 318, 327, 328, 353, 357, 360, 361, 362, 363, 365, 367, 368, 369, 370, 371, 387, 390, 391, 392, 393, 408, 411, 428, 431, 440, 443, 477, 480, 497, 500, 538, 544, 547, 548, 551, 564, 567, 568, 569, 570, 583, 586, 610, 638, 645, 646, 660, 666, 667, 668, 669, 676, 677, 691, 693, 696, 698, 700, 711, 713, 715, 717, 729, 735, 737, 738, 740, 741, 742, 751, 753, 754, 756, 770, 772, 814, 815, 818, 830, 844, 847, 848, 851, 856, 859, 864, 867, 878, 881, 890, 891, 892, 893, 894, 895, 897, 903, 904, 905, 907, 912, 913, 916, 930, 931, 932, 933, 935, 936, 955, 956, 959, 988, 989, 992, 999, 1020, 1028, 1031, 1032, 1033, 1034, 1035, 1036, 1038, 1039], "ivy_jax": [0, 5], "subsequ": [0, 6, 18, 117, 119, 121, 122, 125, 129, 136], "call": [0, 6, 12, 15, 21, 74, 75, 116, 117, 118, 119, 121, 122, 123, 124, 125, 126, 127, 128, 129, 132, 134, 135, 136, 137, 149, 318, 362, 610, 665, 670, 687, 691, 702, 894, 895, 900, 904, 905, 1020, 1031, 1032, 1033, 1036, 1040], "nativ": [0, 6, 27, 29, 30, 31, 72, 73, 121, 127, 129, 134, 135, 175, 215, 218, 246, 250, 251, 272, 318, 334, 335, 336, 337, 338, 357, 364, 367, 610, 654, 656, 659, 1009, 1010], "native_arrai": [0, 6, 12, 32, 33, 40, 41, 77, 78, 85, 86, 121, 160, 162, 163, 164, 165, 166, 169, 171, 175, 210, 213, 246, 267, 270, 318, 340, 356, 368, 369, 372, 387, 390, 391, 394, 408, 411, 428, 431, 432, 435, 465, 468, 477, 480, 497, 500, 538, 544, 547, 548, 551, 568, 571, 573, 576, 578, 581, 583, 586, 587, 590, 601, 605, 610, 611, 612, 613, 614, 615, 619, 627, 628, 635, 638, 639, 642, 675, 680, 681, 682, 684, 685, 686, 691, 693, 696, 729, 732, 735, 736, 741, 742, 748, 750, 751, 753, 754, 756, 799, 801, 814, 815, 818, 825, 828, 830, 831, 834, 844, 847, 848, 851, 856, 859, 869, 878, 881, 918, 919, 930, 931, 932, 933, 934, 935, 936, 937, 941, 955, 956, 959, 960, 963, 988, 989, 992], "1": [0, 6, 12, 15, 16, 21, 24, 25, 34, 35, 38, 39, 40, 41, 42, 43, 48, 49, 50, 51, 52, 53, 54, 55, 60, 61, 62, 63, 66, 67, 72, 73, 74, 75, 77, 78, 79, 80, 83, 84, 85, 86, 87, 88, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 105, 106, 107, 108, 111, 112, 117, 119, 121, 122, 126, 129, 130, 131, 132, 134, 135, 136, 137, 149, 160, 162, 163, 164, 165, 171, 175, 176, 177, 178, 199, 202, 204, 205, 207, 208, 210, 213, 220, 221, 223, 226, 241, 245, 246, 252, 255, 267, 268, 269, 270, 271, 281, 284, 318, 322, 325, 327, 332, 337, 338, 340, 342, 346, 350, 352, 355, 356, 363, 368, 369, 370, 371, 372, 374, 377, 378, 381, 382, 383, 384, 385, 386, 387, 390, 391, 392, 393, 394, 395, 400, 403, 408, 411, 412, 415, 424, 427, 428, 431, 432, 433, 434, 435, 436, 439, 440, 443, 457, 460, 461, 464, 465, 466, 467, 468, 473, 476, 477, 480, 493, 496, 497, 500, 501, 504, 505, 508, 509, 512, 513, 516, 537, 538, 544, 547, 548, 551, 556, 559, 564, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 586, 587, 590, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 610, 611, 612, 613, 614, 615, 618, 619, 627, 628, 635, 638, 639, 640, 641, 642, 643, 657, 663, 666, 667, 673, 675, 677, 680, 681, 682, 683, 684, 685, 686, 689, 691, 693, 694, 695, 696, 697, 729, 730, 731, 732, 733, 734, 735, 736, 737, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 753, 754, 755, 756, 763, 765, 774, 776, 780, 782, 790, 792, 793, 795, 799, 801, 802, 804, 805, 806, 807, 808, 810, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 839, 844, 847, 848, 851, 852, 855, 856, 859, 860, 863, 864, 865, 866, 867, 868, 869, 870, 873, 874, 877, 878, 881, 894, 897, 906, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 959, 960, 963, 976, 979, 980, 983, 984, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1040, 1042, 1043], "type": [0, 6, 12, 18, 20, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 35, 38, 39, 40, 41, 42, 43, 48, 49, 50, 51, 52, 53, 54, 55, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 83, 84, 85, 86, 87, 88, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 121, 124, 125, 126, 128, 129, 130, 132, 134, 135, 137, 150, 151, 152, 153, 154, 155, 156, 157, 158, 160, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 283, 284, 285, 286, 287, 288, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 313, 317, 318, 334, 335, 336, 337, 338, 340, 350, 351, 352, 353, 354, 355, 356, 357, 359, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 613, 614, 615, 616, 618, 619, 621, 622, 623, 625, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 645, 646, 647, 649, 650, 652, 653, 654, 656, 657, 658, 659, 663, 666, 667, 668, 669, 671, 673, 674, 676, 677, 678, 680, 681, 682, 684, 685, 686, 688, 689, 690, 691, 693, 694, 695, 696, 697, 698, 700, 701, 703, 705, 706, 707, 708, 709, 710, 711, 713, 714, 715, 717, 718, 719, 720, 721, 722, 724, 726, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 900, 904, 905, 906, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031], "ndarrai": [0, 6, 117, 125, 127, 128, 129, 134, 175, 179, 182, 215, 218, 610, 681, 685], "Or": [0, 6, 135], "jaxlib": [0, 6, 18, 117, 127, 128, 134], "xla_extens": [0, 6, 117, 127, 128, 134], "devicearrai": [0, 6, 134], "try_import_ivy_jax": 0, "warn": [0, 7, 8, 9, 10, 11], "fals": [0, 7, 8, 9, 10, 11, 24, 25, 27, 28, 29, 30, 31, 34, 35, 40, 41, 48, 49, 62, 63, 64, 65, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 119, 121, 126, 129, 130, 135, 136, 137, 166, 168, 170, 176, 178, 179, 181, 183, 185, 187, 189, 190, 192, 193, 195, 197, 199, 201, 203, 204, 206, 207, 209, 210, 212, 214, 215, 217, 219, 220, 222, 223, 225, 227, 228, 229, 231, 233, 234, 236, 238, 239, 241, 242, 244, 246, 252, 254, 255, 256, 257, 259, 261, 262, 264, 266, 267, 269, 270, 271, 276, 277, 278, 279, 281, 283, 285, 288, 290, 292, 294, 296, 298, 299, 301, 303, 305, 307, 309, 317, 318, 337, 338, 349, 353, 354, 357, 362, 365, 367, 368, 369, 371, 373, 374, 376, 378, 380, 382, 384, 386, 387, 389, 391, 393, 395, 396, 398, 400, 402, 404, 406, 408, 410, 411, 412, 414, 416, 418, 420, 422, 424, 426, 428, 430, 432, 434, 436, 438, 440, 442, 444, 446, 448, 449, 451, 453, 455, 457, 459, 461, 463, 465, 467, 469, 471, 473, 475, 476, 477, 479, 480, 481, 483, 484, 485, 487, 488, 489, 491, 492, 493, 495, 496, 497, 499, 500, 501, 503, 505, 507, 509, 511, 513, 515, 517, 519, 521, 523, 525, 527, 528, 529, 531, 532, 533, 535, 539, 541, 543, 544, 546, 548, 550, 551, 552, 554, 556, 558, 560, 562, 564, 566, 568, 570, 572, 573, 575, 577, 578, 580, 582, 583, 585, 587, 589, 591, 592, 594, 596, 597, 599, 601, 602, 604, 606, 608, 610, 611, 612, 613, 614, 615, 618, 619, 623, 624, 628, 631, 635, 637, 639, 641, 643, 647, 654, 656, 657, 659, 660, 671, 673, 674, 681, 682, 684, 688, 689, 691, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 728, 742, 743, 744, 745, 746, 747, 766, 768, 770, 771, 772, 793, 795, 808, 809, 810, 815, 817, 819, 820, 822, 824, 825, 827, 829, 830, 831, 833, 835, 836, 838, 840, 842, 844, 846, 848, 850, 852, 854, 856, 858, 860, 862, 864, 866, 868, 869, 870, 872, 874, 876, 878, 880, 882, 884, 886, 888, 890, 891, 892, 893, 894, 895, 896, 900, 904, 905, 906, 907, 913, 915, 917, 918, 919, 924, 925, 927, 930, 931, 932, 934, 935, 936, 937, 938, 940, 941, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 958, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 1009, 1010, 1032, 1033, 1036, 1037, 1038, 1039, 1040, 1041], "try_import_ivy_mxnet": 0, "try_import_ivy_numpi": 0, "try_import_ivy_tf": 0, "try_import_ivy_torch": 0, "unset_backend": [0, 123], "unset": [0, 12, 123, 132, 134], "adjust": [0, 12, 955, 976, 979, 984, 987], "dict": [0, 12, 27, 28, 29, 30, 31, 72, 73, 74, 75, 76, 126, 130, 135, 136, 318, 327, 328, 337, 340, 343, 344, 345, 346, 610, 616, 632, 633, 634, 894, 896, 897, 900, 903, 906, 907], "previous": [0, 12, 18, 21, 121, 122, 132, 610, 621], "otherwis": [0, 12, 24, 25, 27, 28, 29, 30, 31, 72, 73, 117, 121, 125, 127, 128, 132, 134, 175, 176, 177, 246, 252, 255, 267, 270, 273, 274, 275, 318, 337, 368, 481, 484, 485, 488, 489, 492, 610, 620, 687, 691, 707, 709, 724, 742, 743, 746, 751, 753, 805, 807, 808, 810, 890, 891, 892, 894, 907, 930, 931, 932, 934, 955, 960, 963, 964, 967, 968, 971, 972, 975, 976, 979, 980, 983, 984, 987, 988, 989, 992, 994, 997], "implement": [0, 12, 20, 117, 118, 121, 122, 123, 124, 125, 126, 127, 128, 129, 132, 134, 135, 136, 137, 148, 149, 246, 252, 255, 305, 308, 318, 363, 368, 369, 372, 374, 377, 378, 381, 387, 390, 391, 394, 396, 399, 400, 403, 436, 439, 440, 443, 457, 460, 461, 464, 501, 504, 505, 508, 509, 512, 513, 516, 539, 542, 556, 559, 560, 563, 573, 576, 578, 581, 596, 600, 601, 605, 742, 757, 759, 935, 936, 937, 941, 943, 944, 945, 948, 950, 953, 955, 960, 963, 964, 967, 968, 971, 999], "wa": [0, 12, 15, 72, 73, 119, 132, 134, 610, 687, 894, 907, 955, 960, 963, 964, 967, 968, 971, 972, 975, 976, 979, 980, 983, 984, 987, 988, 989, 992, 994, 997], "last": [0, 12, 16, 19, 72, 73, 119, 121, 123, 130, 149, 160, 165, 318, 337, 691, 728, 729, 739, 742, 748, 750, 754, 756, 770, 772, 802, 804, 805, 807, 814, 820, 823, 825, 828, 830, 848, 851, 864, 867, 869, 874, 877, 944, 945, 948, 950, 953, 988, 989, 992, 994, 997, 1020, 1030], "henc": [0, 12, 121, 935, 936, 937, 941, 943], "here": [0, 12, 18, 19, 20, 116, 117, 119, 121, 126, 132, 133, 134, 135, 136, 137, 148, 149], "tensor": [0, 12, 14, 72, 73, 116, 117, 122, 123, 125, 127, 128, 129, 132, 134, 135, 136, 137, 149, 175, 204, 205, 207, 208, 246, 276, 279, 368, 408, 411, 537, 538, 610, 663, 666, 667, 729, 737, 739, 742, 799, 801, 830, 844, 847, 860, 863, 869, 918, 919, 930, 933, 999, 1020, 1028, 1030], "howev": [0, 12, 15, 18, 20, 117, 118, 121, 122, 123, 125, 126, 127, 128, 129, 134, 135, 136, 137, 149], "befor": [0, 12, 18, 19, 20, 72, 73, 118, 121, 125, 127, 128, 129, 132, 135, 149, 318, 362, 368, 606, 609, 729, 740, 741, 890, 891, 892, 894, 906, 935, 936, 937, 941, 943, 955, 972, 975, 980, 983], "becom": [0, 12, 14, 16, 19, 119, 126, 132, 137, 149, 830, 831, 834], "swap": [0, 12, 830, 878, 881], "python": [0, 12, 13, 14, 15, 18, 19, 21, 121, 130, 132, 134, 135, 149, 175, 176, 177, 318, 357, 367, 368, 560, 563, 999, 1005], "framework": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 14, 15, 16, 23, 25, 26, 27, 28, 29, 30, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69, 71, 72, 73, 75, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94, 96, 98, 100, 102, 104, 106, 108, 110, 112, 114, 115, 117, 120, 122, 123, 124, 125, 128, 131, 134, 137, 148, 149, 151, 152, 153, 154, 155, 156, 157, 158, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 891, 892, 893, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 913, 914, 915, 916, 917, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 931, 932, 933, 934, 936, 937, 938, 939, 940, 941, 942, 943, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1003, 1004, 1005, 1007, 1008, 1009, 1010, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1033, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1043, 1044, 1046], "op": [0, 12, 116, 132, 149], "eagertensor": [0, 12], "def": [1, 20, 116, 117, 119, 121, 122, 126, 127, 128, 129, 130, 132, 134, 135, 136, 137, 247, 248, 249, 319, 326, 329, 692, 999, 1012, 1015, 1018], "support": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 14, 15, 16, 23, 25, 26, 28, 29, 30, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69, 71, 72, 73, 75, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94, 96, 98, 100, 102, 104, 106, 108, 110, 112, 114, 117, 118, 119, 121, 122, 124, 125, 126, 127, 128, 129, 131, 132, 134, 135, 137, 151, 152, 153, 154, 155, 156, 157, 158, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 173, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 891, 892, 893, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 913, 914, 915, 916, 917, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 931, 932, 933, 934, 936, 937, 938, 939, 940, 941, 942, 943, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1003, 1004, 1005, 1007, 1008, 1010, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1033, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1043, 1044, 1046], "backend": [4, 5, 6, 12, 14, 19, 20, 27, 29, 31, 72, 73, 115, 117, 118, 120, 121, 122, 124, 125, 126, 127, 128, 129, 133, 134, 137, 246, 286, 287, 293, 317, 318, 353, 355, 365, 610, 651, 654, 655, 661, 691, 698, 700, 703, 705, 711, 713, 715, 717, 719, 721, 727, 999, 1005, 1009, 1010, 1036, 1037, 1038, 1039, 1040, 1041], "ml": [13, 15, 16, 17, 131, 132, 133, 135, 136, 137, 148, 999, 1005], "explos": [13, 15, 999], "A": [13, 14, 15, 16, 21, 72, 73, 74, 75, 76, 115, 121, 122, 126, 127, 128, 132, 135, 149, 175, 190, 191, 215, 218, 318, 327, 328, 362, 368, 552, 555, 610, 646, 680, 742, 780, 782, 789, 790, 792, 793, 795, 830, 869, 874, 877, 894, 895, 897, 899, 901, 902, 903, 904, 905, 908, 909, 910, 911, 955, 956, 959, 988, 989, 992, 994, 997, 999, 1042, 1043], "huge": [13, 15, 135, 999], "number": [13, 14, 18, 24, 25, 72, 73, 74, 75, 76, 119, 121, 126, 128, 129, 132, 135, 137, 172, 173, 174, 175, 176, 177, 179, 182, 190, 191, 204, 205, 207, 208, 210, 213, 215, 218, 246, 257, 260, 280, 281, 284, 288, 291, 294, 297, 299, 302, 305, 308, 318, 354, 355, 356, 368, 382, 385, 400, 403, 432, 435, 465, 468, 469, 472, 537, 538, 539, 542, 556, 559, 560, 563, 564, 567, 568, 571, 606, 609, 610, 611, 614, 637, 646, 647, 662, 686, 690, 729, 740, 742, 754, 756, 757, 759, 774, 776, 789, 793, 795, 805, 807, 830, 831, 834, 840, 843, 852, 855, 856, 859, 864, 867, 869, 874, 877, 882, 885, 886, 889, 890, 891, 892, 893, 918, 919, 928, 930, 933, 935, 936, 937, 941, 955, 960, 963, 964, 967, 968, 971, 972, 975, 976, 979, 980, 983, 984, 987, 988, 989, 992, 994, 997, 999, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1029, 1030, 1031], "tool": [13, 16, 19, 133, 137, 148, 149, 999], "have": [13, 14, 15, 16, 18, 19, 20, 21, 24, 25, 72, 73, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 132, 133, 134, 135, 136, 137, 148, 149, 160, 161, 162, 163, 164, 165, 166, 169, 171, 175, 176, 177, 179, 182, 184, 185, 188, 190, 191, 193, 196, 198, 199, 202, 204, 205, 207, 208, 210, 213, 220, 221, 223, 226, 228, 232, 233, 237, 238, 240, 241, 245, 246, 252, 255, 257, 260, 262, 265, 281, 284, 318, 363, 368, 369, 372, 374, 377, 378, 381, 382, 385, 387, 390, 391, 394, 396, 399, 400, 403, 404, 407, 408, 411, 412, 415, 416, 419, 420, 423, 424, 427, 428, 431, 432, 435, 436, 439, 440, 443, 444, 447, 449, 452, 453, 456, 457, 460, 461, 464, 465, 468, 469, 472, 473, 476, 477, 480, 481, 484, 485, 488, 489, 492, 493, 496, 497, 500, 501, 504, 505, 508, 509, 512, 513, 516, 517, 520, 521, 524, 525, 528, 529, 532, 533, 536, 537, 538, 539, 542, 544, 547, 548, 551, 552, 555, 556, 559, 560, 563, 564, 567, 568, 571, 573, 576, 578, 581, 583, 586, 587, 590, 591, 595, 596, 600, 601, 605, 606, 609, 610, 622, 623, 625, 628, 632, 633, 634, 636, 639, 642, 650, 663, 666, 667, 691, 707, 709, 724, 727, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 740, 741, 742, 743, 746, 748, 750, 751, 753, 754, 756, 757, 759, 760, 762, 763, 765, 766, 769, 770, 772, 774, 776, 777, 779, 780, 782, 783, 785, 786, 788, 789, 790, 792, 793, 795, 796, 798, 799, 801, 802, 804, 805, 807, 808, 810, 811, 813, 814, 815, 818, 820, 823, 825, 828, 830, 831, 834, 836, 839, 840, 843, 844, 847, 848, 851, 852, 855, 856, 859, 860, 863, 864, 867, 870, 873, 874, 877, 878, 881, 882, 885, 886, 889, 912, 913, 916, 918, 919, 920, 921, 923, 924, 926, 929, 930, 931, 932, 933, 934, 935, 936, 937, 941, 943, 944, 945, 948, 950, 953, 955, 960, 963, 964, 967, 968, 971, 972, 975, 976, 979, 980, 983, 984, 987, 988, 989, 992, 994, 997, 999], "explod": [13, 14, 999], "onto": [13, 14, 318, 347, 348, 894, 900, 906, 999], "scene": [13, 14, 115, 131, 133, 691, 698, 700, 703, 705, 711, 713, 715, 717, 719, 721, 999], "b": [13, 16, 17, 24, 25, 74, 75, 79, 80, 83, 84, 85, 86, 87, 88, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 105, 106, 111, 112, 115, 119, 122, 123, 126, 131, 132, 133, 135, 136, 137, 147, 246, 267, 269, 270, 271, 318, 340, 368, 369, 371, 372, 373, 382, 384, 385, 386, 387, 390, 391, 393, 394, 395, 408, 411, 428, 431, 432, 434, 435, 440, 443, 465, 467, 468, 477, 480, 497, 500, 537, 544, 547, 548, 551, 564, 567, 568, 570, 571, 572, 573, 575, 576, 577, 578, 580, 581, 582, 583, 586, 587, 590, 596, 597, 599, 600, 601, 602, 604, 605, 610, 611, 613, 614, 615, 618, 619, 627, 628, 635, 638, 639, 641, 642, 643, 681, 682, 684, 685, 686, 691, 693, 695, 696, 697, 729, 732, 735, 736, 741, 742, 743, 745, 746, 747, 748, 750, 751, 753, 754, 756, 780, 782, 790, 792, 799, 801, 811, 813, 814, 815, 817, 818, 819, 820, 822, 824, 825, 827, 829, 830, 831, 833, 834, 835, 844, 847, 848, 851, 856, 859, 864, 866, 867, 868, 874, 877, 878, 881, 894, 897, 912, 913, 915, 916, 917, 918, 920, 922, 923, 924, 926, 930, 932, 933, 934, 935, 937, 938, 940, 941, 944, 945, 948, 955, 956, 959, 960, 963, 988, 989, 991, 992, 993, 994, 996, 998, 999, 1005], "why": [13, 15, 19, 117, 126, 129, 134, 999], "unifi": [13, 15, 72, 73, 125, 132, 149, 318, 347, 348, 349, 350, 362, 999], "should": [13, 15, 18, 19, 20, 21, 72, 73, 74, 75, 76, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 134, 135, 136, 172, 173, 175, 210, 213, 228, 232, 233, 237, 246, 262, 265, 318, 368, 369, 372, 374, 377, 378, 381, 382, 385, 387, 390, 391, 394, 396, 399, 400, 403, 404, 407, 408, 411, 412, 415, 416, 419, 420, 423, 424, 427, 428, 431, 432, 435, 436, 439, 440, 443, 444, 447, 457, 460, 461, 464, 465, 468, 481, 484, 485, 488, 489, 492, 493, 496, 501, 504, 505, 508, 513, 516, 517, 520, 521, 524, 525, 528, 529, 532, 533, 536, 539, 542, 548, 551, 556, 559, 560, 563, 568, 571, 573, 576, 578, 581, 583, 586, 587, 590, 591, 595, 596, 600, 601, 605, 606, 609, 610, 621, 654, 663, 691, 698, 700, 703, 705, 711, 713, 715, 717, 719, 721, 729, 741, 742, 743, 746, 748, 750, 751, 753, 754, 756, 763, 765, 766, 769, 774, 776, 780, 782, 783, 785, 786, 788, 790, 792, 793, 795, 799, 801, 802, 804, 805, 807, 808, 810, 830, 860, 863, 918, 929, 930, 931, 932, 935, 936, 937, 941, 943, 955, 956, 959, 960, 963, 964, 967, 972, 975, 976, 979, 980, 983, 984, 987, 999], "them": [13, 14, 15, 16, 121, 123, 125, 126, 132, 134, 135, 136, 149, 999], "c": [13, 15, 16, 17, 83, 84, 101, 102, 115, 119, 122, 126, 131, 132, 133, 135, 149, 368, 548, 551, 568, 570, 571, 610, 618, 619, 627, 686, 691, 693, 696, 698, 700, 703, 705, 711, 713, 715, 717, 719, 721, 729, 735, 830, 874, 877, 894, 897, 920, 922, 930, 933, 955, 956, 959, 976, 979, 984, 987, 999, 1005], "standard": [13, 115, 116, 117, 118, 120, 121, 125, 129, 149, 175, 176, 177, 179, 182, 184, 185, 188, 190, 191, 193, 196, 198, 199, 202, 204, 205, 210, 213, 220, 221, 223, 226, 228, 232, 233, 237, 238, 240, 241, 245, 246, 267, 270, 281, 284, 368, 369, 372, 382, 385, 387, 390, 391, 394, 408, 411, 428, 431, 432, 435, 440, 443, 465, 468, 497, 500, 537, 548, 551, 564, 567, 568, 571, 573, 576, 583, 586, 587, 590, 596, 600, 601, 605, 742, 751, 753, 754, 756, 830, 844, 847, 848, 851, 864, 867, 912, 913, 916, 918, 923, 935, 936, 937, 941, 944, 945, 948, 955, 960, 963, 976, 979, 984, 987, 988, 989, 992, 999, 1005, 1034, 1035], "re": [13, 14, 15, 17, 18, 19, 20, 21, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 134, 137, 149, 318, 362, 610, 632, 742, 799, 801, 830, 864, 867, 930, 934, 999], "collabor": [13, 14, 15, 999], "consortium": [13, 15, 999, 1005], "data": [13, 15, 24, 25, 26, 72, 73, 74, 75, 76, 115, 116, 117, 118, 122, 124, 126, 128, 129, 134, 175, 176, 177, 179, 182, 184, 185, 188, 190, 191, 193, 196, 198, 199, 202, 204, 205, 210, 213, 215, 218, 220, 221, 223, 226, 228, 232, 233, 237, 238, 240, 241, 245, 250, 251, 252, 255, 262, 265, 267, 270, 272, 276, 279, 280, 281, 284, 286, 287, 288, 291, 293, 294, 297, 299, 302, 304, 313, 317, 318, 320, 321, 322, 323, 324, 325, 330, 331, 332, 334, 368, 369, 372, 374, 377, 378, 381, 382, 385, 387, 390, 391, 394, 396, 399, 400, 403, 404, 407, 408, 411, 412, 415, 416, 419, 420, 423, 424, 427, 428, 431, 432, 435, 436, 439, 440, 443, 444, 447, 449, 452, 457, 460, 461, 464, 465, 468, 469, 472, 473, 476, 477, 480, 481, 484, 485, 488, 489, 492, 493, 496, 497, 500, 501, 504, 505, 508, 513, 516, 517, 520, 521, 524, 525, 528, 529, 532, 533, 536, 537, 539, 542, 548, 551, 556, 559, 560, 563, 568, 571, 573, 576, 578, 581, 583, 586, 587, 590, 591, 595, 596, 600, 601, 605, 606, 609, 610, 618, 619, 656, 657, 659, 678, 691, 707, 709, 727, 729, 738, 742, 743, 746, 748, 750, 751, 753, 754, 756, 757, 759, 760, 762, 763, 765, 766, 769, 774, 776, 777, 779, 780, 782, 783, 785, 786, 788, 790, 792, 793, 795, 799, 801, 802, 804, 805, 807, 808, 810, 830, 844, 847, 848, 851, 852, 855, 860, 863, 864, 867, 870, 873, 874, 877, 918, 929, 930, 931, 932, 933, 944, 945, 948, 955, 960, 963, 964, 967, 968, 971, 972, 975, 976, 979, 980, 983, 984, 987, 988, 989, 992, 994, 997, 999, 1005, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031], "api": [13, 14, 18, 19, 115, 117, 118, 119, 121, 122, 124, 125, 127, 128, 129, 131, 133, 135, 149, 175, 176, 177, 179, 182, 184, 185, 188, 190, 191, 193, 196, 198, 199, 202, 204, 205, 210, 213, 220, 221, 223, 226, 228, 232, 233, 237, 238, 240, 241, 245, 246, 267, 270, 368, 369, 372, 382, 385, 387, 390, 391, 394, 408, 411, 428, 431, 432, 435, 440, 443, 465, 468, 497, 500, 537, 548, 551, 564, 567, 568, 571, 573, 576, 583, 586, 587, 590, 596, 600, 601, 605, 742, 751, 753, 754, 756, 830, 844, 847, 848, 851, 864, 867, 935, 936, 937, 941, 944, 945, 948, 955, 960, 963, 988, 989, 992, 999, 1005], "open": [14, 15, 16, 17, 18, 21, 118, 148, 175, 176, 177, 918, 920, 921, 924, 926, 999], "project": [14, 15, 16, 18, 19, 21, 116, 121, 123, 134, 136, 148, 149, 918, 919, 923], "grown": 14, "consider": [14, 117, 119], "recent": [14, 15, 18, 19, 121], "year": [14, 16, 149, 999], "especi": [14, 18], "deep": [14, 17, 19, 20, 72, 73, 131, 135, 999], "learn": [14, 15, 18, 20, 115, 122, 131, 137, 148, 368, 473, 476, 691, 698, 700, 703, 705, 711, 713, 715, 717, 719, 721, 890, 891, 892, 893, 999, 1036, 1037, 1038, 1039, 1040, 1041], "can": [14, 15, 16, 17, 18, 19, 115, 116, 117, 118, 119, 120, 121, 122, 123, 126, 127, 128, 129, 130, 131, 132, 134, 135, 136, 137, 148, 149, 175, 179, 182, 215, 218, 246, 267, 270, 318, 360, 361, 362, 742, 763, 765, 830, 860, 863, 918, 920, 921, 999, 1005], "seen": [14, 15, 119, 121, 134, 135], "rapidli": 14, "increas": [14, 318, 342, 346, 350, 830, 840, 843, 886, 889, 894, 906], "github": [14, 19, 20, 118, 121], "repo": [14, 15, 16, 18, 19, 120, 132, 134, 135, 136, 137, 148, 999, 1005], "contain": [14, 18, 19, 20, 21, 24, 25, 27, 30, 31, 40, 41, 70, 71, 72, 73, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 117, 118, 119, 121, 122, 127, 129, 131, 132, 133, 136, 137, 149, 160, 163, 164, 166, 169, 175, 176, 177, 179, 182, 184, 185, 188, 190, 191, 193, 196, 198, 199, 202, 204, 205, 207, 208, 210, 213, 215, 220, 221, 223, 226, 228, 232, 233, 237, 238, 240, 241, 245, 246, 252, 257, 262, 267, 270, 276, 281, 288, 294, 299, 305, 318, 339, 340, 343, 352, 356, 368, 369, 372, 374, 377, 378, 381, 382, 385, 387, 390, 391, 394, 396, 399, 400, 403, 404, 407, 408, 411, 412, 415, 416, 419, 420, 423, 424, 427, 428, 431, 432, 435, 436, 439, 440, 443, 444, 447, 449, 452, 453, 457, 460, 461, 464, 465, 468, 469, 472, 473, 476, 477, 480, 481, 484, 485, 488, 489, 492, 493, 496, 497, 500, 501, 504, 505, 508, 509, 512, 513, 516, 517, 520, 521, 524, 525, 528, 529, 532, 533, 536, 537, 538, 539, 542, 544, 547, 548, 551, 552, 556, 559, 560, 563, 564, 567, 568, 571, 573, 576, 578, 581, 583, 586, 587, 590, 591, 595, 596, 600, 601, 605, 606, 609, 610, 611, 612, 614, 616, 619, 622, 623, 625, 627, 628, 635, 638, 639, 642, 649, 658, 680, 681, 683, 685, 686, 691, 693, 696, 698, 703, 707, 711, 715, 719, 729, 732, 735, 736, 741, 742, 743, 746, 748, 750, 751, 753, 754, 756, 757, 759, 760, 762, 763, 765, 766, 769, 774, 776, 777, 779, 780, 782, 783, 785, 786, 788, 790, 792, 793, 795, 796, 798, 799, 801, 802, 804, 805, 807, 808, 810, 814, 815, 818, 820, 823, 825, 828, 830, 831, 834, 836, 840, 844, 847, 848, 851, 852, 855, 856, 859, 860, 864, 867, 869, 870, 874, 878, 881, 882, 886, 890, 891, 892, 893, 894, 907, 912, 913, 916, 918, 919, 920, 923, 924, 926, 930, 931, 932, 933, 934, 935, 936, 937, 941, 943, 944, 945, 948, 950, 955, 956, 959, 960, 963, 964, 967, 968, 971, 972, 975, 976, 979, 980, 983, 984, 987, 988, 989, 992, 994, 997, 999, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1029, 1030, 1031, 1032, 1033, 1036, 1040, 1042, 1043], "term": [14, 19, 126, 729, 739, 1020, 1030], "time": [14, 15, 16, 18, 19, 20, 117, 121, 122, 126, 127, 132, 135, 137, 149, 691, 698, 700, 711, 713, 729, 739, 830, 882, 885, 890, 891, 892, 893, 930, 931, 932, 935, 936, 937, 941, 1020, 1031, 1032, 1033], "These": [14, 15, 16, 19, 117, 118, 119, 121, 122, 126, 127, 129, 132, 133, 135, 136, 137, 149, 742, 757, 759, 999, 1005], "ar": [14, 15, 16, 17, 18, 19, 20, 21, 24, 25, 27, 28, 29, 72, 73, 74, 75, 76, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 148, 149, 150, 158, 175, 176, 177, 318, 327, 328, 352, 356, 358, 362, 368, 436, 439, 525, 528, 529, 532, 564, 567, 573, 576, 596, 600, 610, 611, 614, 618, 619, 620, 644, 650, 651, 655, 662, 664, 678, 691, 728, 729, 738, 742, 748, 750, 766, 769, 770, 772, 774, 776, 783, 785, 793, 795, 796, 798, 805, 807, 830, 831, 834, 848, 851, 864, 867, 894, 896, 900, 906, 918, 923, 924, 926, 930, 931, 932, 933, 935, 936, 999, 1042, 1043], "written": [14, 18, 116, 117, 118, 121, 125, 129, 132, 134, 137, 149], "mani": [14, 15, 16, 18, 19, 20, 72, 73, 117, 118, 119, 121, 122, 124, 125, 126, 127, 128, 129, 130, 132, 134, 135, 149, 830, 869], "differ": [14, 15, 16, 18, 19, 72, 73, 74, 75, 76, 115, 116, 117, 118, 119, 121, 122, 125, 126, 128, 129, 130, 132, 133, 134, 135, 136, 137, 149, 246, 281, 284, 318, 339, 340, 343, 344, 368, 382, 385, 539, 542, 591, 595, 729, 738, 830, 874, 877, 955, 972, 975, 980, 983, 999], "while": [14, 15, 18, 19, 72, 73, 74, 75, 76, 119, 121, 123, 129, 130, 136, 137, 149, 368, 525, 528, 529, 532, 935, 936, 955, 964, 967], "thi": [14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 32, 33, 34, 35, 38, 39, 40, 41, 42, 43, 48, 49, 50, 51, 52, 53, 54, 55, 60, 61, 66, 67, 70, 71, 72, 73, 74, 75, 76, 79, 80, 83, 84, 85, 86, 87, 88, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 105, 106, 111, 112, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 148, 149, 166, 167, 168, 170, 175, 176, 177, 179, 180, 182, 184, 185, 186, 188, 190, 191, 193, 194, 196, 198, 199, 200, 202, 204, 205, 207, 208, 210, 213, 215, 216, 218, 220, 221, 223, 224, 226, 228, 230, 232, 233, 235, 237, 238, 240, 241, 243, 245, 246, 267, 268, 269, 270, 271, 318, 342, 346, 350, 357, 362, 367, 368, 369, 370, 371, 372, 373, 382, 383, 384, 385, 386, 387, 390, 391, 392, 393, 394, 395, 408, 411, 424, 427, 428, 431, 432, 433, 434, 435, 440, 443, 461, 464, 465, 466, 467, 468, 497, 500, 525, 528, 529, 532, 537, 548, 551, 560, 563, 564, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 582, 583, 586, 587, 590, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 610, 611, 612, 613, 615, 637, 638, 639, 640, 641, 643, 654, 665, 670, 681, 682, 683, 684, 691, 693, 694, 695, 697, 698, 700, 703, 705, 707, 709, 711, 713, 715, 717, 719, 721, 727, 728, 729, 732, 738, 741, 742, 743, 744, 745, 746, 747, 751, 753, 754, 756, 770, 772, 789, 815, 816, 817, 819, 820, 821, 822, 824, 825, 826, 827, 829, 830, 831, 832, 833, 835, 844, 847, 848, 851, 860, 863, 864, 865, 866, 867, 868, 874, 877, 894, 900, 906, 907, 912, 913, 914, 915, 916, 917, 920, 922, 930, 931, 935, 936, 937, 938, 939, 940, 941, 943, 944, 945, 948, 955, 960, 963, 964, 967, 976, 979, 984, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 998, 999, 1005, 1032, 1033, 1036, 1037, 1038, 1039, 1040, 1041], "wonder": [14, 16, 134], "thing": [14, 15, 16, 18, 19, 20, 121, 123, 134, 135], "research": [14, 148], "develop": [14, 15, 16, 17, 18, 19, 20, 148, 149, 999], "also": [14, 15, 17, 18, 19, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 38, 39, 40, 41, 42, 43, 48, 49, 50, 51, 52, 53, 54, 55, 60, 61, 66, 67, 70, 71, 72, 73, 79, 80, 83, 84, 85, 86, 87, 88, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 105, 106, 111, 112, 115, 116, 117, 118, 119, 121, 122, 124, 125, 126, 127, 128, 129, 132, 134, 135, 136, 137, 148, 149, 166, 167, 168, 170, 175, 176, 177, 179, 180, 182, 184, 185, 186, 188, 190, 191, 193, 194, 196, 198, 199, 200, 202, 204, 205, 207, 208, 210, 213, 215, 216, 220, 221, 223, 224, 226, 228, 230, 232, 233, 235, 237, 238, 240, 241, 243, 245, 246, 267, 268, 269, 270, 271, 368, 369, 370, 371, 372, 373, 382, 383, 384, 385, 386, 387, 390, 391, 392, 393, 394, 395, 408, 411, 428, 431, 432, 433, 434, 435, 440, 443, 465, 466, 467, 468, 537, 548, 551, 564, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 582, 583, 586, 587, 590, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 610, 611, 612, 613, 615, 638, 639, 640, 641, 643, 654, 681, 682, 683, 684, 691, 693, 694, 695, 697, 698, 700, 729, 732, 738, 741, 742, 743, 744, 745, 746, 747, 751, 753, 754, 756, 815, 816, 817, 819, 820, 821, 822, 824, 825, 826, 827, 829, 830, 831, 832, 833, 835, 844, 847, 848, 851, 864, 865, 866, 867, 868, 890, 891, 892, 893, 894, 895, 896, 904, 905, 906, 912, 913, 914, 915, 916, 917, 920, 922, 935, 936, 937, 938, 939, 940, 941, 944, 945, 948, 955, 960, 963, 988, 989, 990, 991, 992, 993, 994, 995, 996, 998, 1020, 1030], "consid": [14, 15, 72, 73, 116, 122, 133, 134, 135, 368, 525, 528, 529, 532, 935, 936, 937, 941, 943], "speed": [14, 121], "evolv": 14, "sharabl": 14, "code": [14, 15, 16, 18, 19, 20, 21, 72, 73, 74, 75, 76, 87, 88, 115, 117, 118, 119, 121, 122, 123, 124, 125, 126, 129, 130, 131, 132, 133, 134, 135, 136, 137, 147, 149, 160, 162, 163, 164, 165, 166, 169, 171, 318, 340, 363, 368, 428, 431, 587, 590, 691, 693, 695, 696, 697, 728, 729, 735, 736, 935, 936, 937, 941, 944, 945, 948, 955, 956, 959, 999, 1005], "significantli": 14, "hinder": [14, 117], "librari": [14, 15, 16, 24, 25, 132, 137, 147, 149, 318, 363, 368, 461, 464, 525, 528, 529, 532, 742, 757, 759, 935, 936, 937, 941, 943, 955, 960, 963, 964, 967, 968, 971, 999], "outdat": 14, "month": 14, "rigor": [14, 121], "maintain": [14, 19, 944, 945, 948, 950, 953], "against": [14, 72, 73, 121, 149, 246, 257, 260, 742, 766, 769, 770, 772, 774, 776, 783, 785, 930, 931], "newest": 14, "version": [14, 15, 16, 18, 118, 132, 134, 742, 757, 759, 999], "For": [14, 15, 16, 18, 19, 20, 21, 24, 25, 115, 116, 117, 118, 119, 121, 122, 123, 124, 125, 126, 127, 128, 129, 132, 134, 135, 136, 137, 148, 149, 175, 176, 177, 210, 213, 368, 369, 372, 374, 377, 378, 381, 382, 385, 387, 390, 391, 394, 396, 399, 400, 403, 432, 435, 436, 439, 440, 443, 457, 460, 461, 464, 465, 468, 501, 504, 505, 508, 513, 516, 517, 520, 539, 542, 556, 559, 560, 563, 564, 567, 573, 576, 578, 581, 583, 586, 596, 600, 601, 605, 606, 609, 691, 707, 709, 727, 742, 793, 795, 802, 804, 830, 831, 834, 874, 877, 935, 936, 937, 941, 943, 955, 960, 963, 968, 971, 980, 983, 1009, 1010], "softwar": [14, 15, 18, 19], "pipelin": [14, 125, 137], "where": [14, 15, 16, 17, 18, 19, 20, 21, 24, 25, 72, 73, 74, 75, 118, 121, 122, 123, 125, 126, 127, 128, 129, 130, 132, 135, 136, 137, 149, 175, 198, 199, 202, 210, 213, 368, 400, 403, 457, 460, 509, 512, 539, 542, 556, 559, 610, 650, 654, 663, 691, 728, 742, 757, 759, 774, 776, 783, 785, 786, 788, 793, 795, 796, 798, 802, 804, 805, 807, 830, 831, 834, 840, 843, 844, 847, 852, 855, 874, 877, 886, 889, 894, 895, 905, 918, 919, 930, 933, 955, 976, 979, 984, 987, 988, 989, 992, 994, 997, 999], "rapid": [14, 15, 18], "prototyp": 14, "vital": [14, 137], "signific": [14, 15, 149], "bottleneck": 14, "As": [14, 19, 68, 69, 113, 114, 117, 121, 122, 125, 126, 127, 128, 129, 132, 134, 135, 136, 149, 935, 936, 937, 941, 943], "new": [14, 15, 16, 17, 18, 19, 20, 21, 24, 25, 72, 73, 79, 80, 115, 116, 118, 119, 121, 124, 126, 127, 129, 131, 134, 137, 148, 175, 184, 193, 196, 198, 199, 202, 220, 221, 223, 226, 238, 240, 241, 245, 246, 313, 368, 404, 407, 509, 512, 552, 555, 610, 632, 633, 634, 637, 638, 639, 642, 666, 667, 668, 669, 676, 677, 691, 698, 700, 703, 705, 711, 713, 715, 717, 719, 721, 830, 844, 847, 860, 863, 874, 877, 894, 899, 910, 911, 912, 913, 916, 999, 1009, 1010, 1020, 1030, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041], "futur": [14, 16, 18, 19, 134, 149, 742, 757, 759], "avail": [14, 18, 19, 72, 73, 118, 128, 149, 318, 337, 353, 354, 355, 365, 610, 633], "specif": [14, 20, 72, 73, 117, 121, 122, 125, 126, 127, 128, 129, 132, 133, 134, 136, 137, 148, 149, 246, 305, 308, 318, 360, 363, 368, 525, 528, 529, 532, 610, 632, 633, 634, 661, 742, 757, 759, 799, 801, 830, 874, 877, 890, 891, 892, 893, 918, 919, 955, 960, 963, 964, 967, 968, 971, 999, 1002, 1004, 1005, 1032, 1033], "quickli": [14, 16, 18, 19, 135, 136], "obsolet": [14, 16], "user": [14, 15, 18, 19, 21, 115, 121, 123, 126, 129, 131, 149, 1020, 1031, 1032, 1033], "constantli": 14, "invent": 14, "wheel": 14, "our": [14, 15, 17, 18, 19, 68, 69, 113, 114, 119, 121, 126, 130, 131, 134, 135, 136, 137, 149, 999], "desir": [14, 72, 73, 246, 252, 255, 267, 270, 318, 363, 610, 650, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031], "provid": [14, 18, 19, 72, 73, 117, 118, 119, 121, 122, 125, 126, 127, 128, 129, 132, 136, 148, 149, 172, 173, 175, 210, 213, 246, 273, 274, 275, 293, 305, 308, 317, 318, 337, 610, 631, 663, 667, 691, 698, 700, 703, 705, 711, 713, 715, 717, 719, 721, 742, 805, 807, 830, 848, 851, 874, 877, 930, 931, 955, 976, 979, 984, 987, 988, 989, 992, 994, 997, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1029, 1030, 1031, 1036, 1037, 1038, 1039, 1040, 1041], "simultan": [14, 16], "all": [14, 15, 16, 17, 18, 19, 20, 21, 27, 28, 29, 30, 31, 66, 67, 68, 69, 72, 73, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 134, 135, 136, 137, 148, 149, 150, 158, 172, 173, 175, 176, 177, 228, 232, 233, 237, 318, 327, 352, 358, 610, 611, 614, 618, 619, 644, 664, 681, 685, 729, 739, 742, 790, 792, 799, 801, 808, 810, 830, 848, 851, 864, 867, 890, 891, 892, 893, 894, 895, 896, 905, 906, 907, 918, 919, 924, 926, 988, 993, 999, 1002, 1004], "modern": [14, 15], "simpl": [14, 18, 19, 116, 118, 119, 121, 122, 125, 126, 127, 128, 129, 132, 134, 136, 137, 149, 610, 635], "scalabl": [14, 132], "manner": [14, 27, 30, 31, 72, 73, 116, 118, 121, 128, 135, 148, 149, 894, 906], "must": [14, 16, 18, 19, 20, 24, 25, 72, 73, 74, 75, 76, 116, 117, 118, 119, 122, 125, 126, 127, 128, 132, 136, 137, 160, 161, 162, 163, 164, 165, 166, 169, 171, 175, 176, 177, 179, 182, 184, 185, 188, 190, 191, 193, 196, 198, 199, 202, 204, 205, 207, 208, 210, 213, 220, 221, 223, 226, 228, 232, 233, 237, 238, 240, 241, 245, 246, 252, 255, 257, 260, 262, 265, 318, 347, 348, 349, 350, 362, 363, 368, 369, 372, 374, 377, 378, 381, 382, 385, 387, 390, 391, 394, 396, 399, 400, 403, 404, 407, 408, 411, 412, 415, 416, 419, 420, 423, 424, 427, 428, 431, 432, 435, 436, 439, 440, 443, 444, 447, 449, 452, 453, 456, 457, 460, 461, 464, 465, 468, 469, 472, 473, 476, 477, 480, 481, 484, 485, 488, 489, 492, 493, 496, 497, 500, 501, 504, 505, 508, 509, 512, 513, 516, 517, 520, 521, 524, 525, 528, 529, 532, 533, 536, 537, 538, 539, 542, 544, 547, 548, 551, 552, 555, 556, 559, 560, 563, 564, 567, 568, 571, 573, 576, 578, 581, 583, 586, 587, 590, 591, 595, 596, 600, 601, 605, 606, 609, 610, 622, 623, 625, 628, 632, 633, 634, 636, 639, 642, 650, 663, 666, 667, 691, 724, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 740, 741, 742, 743, 746, 748, 750, 751, 753, 754, 756, 757, 759, 760, 762, 763, 765, 766, 769, 770, 772, 774, 776, 777, 779, 780, 782, 783, 785, 786, 788, 789, 790, 792, 793, 795, 796, 798, 799, 801, 802, 804, 805, 807, 808, 810, 811, 813, 814, 815, 818, 820, 823, 825, 828, 830, 831, 834, 836, 839, 840, 843, 844, 847, 848, 851, 852, 855, 856, 859, 860, 863, 864, 867, 870, 873, 874, 877, 878, 881, 882, 885, 886, 889, 912, 913, 916, 918, 919, 920, 921, 923, 924, 926, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 941, 943, 944, 945, 948, 950, 953, 955, 960, 963, 964, 967, 968, 971, 972, 975, 976, 979, 980, 983, 984, 987, 988, 989, 992, 994, 997, 1036, 1040], "determin": [14, 24, 25, 72, 73, 118, 122, 126, 127, 128, 246, 267, 270, 272, 280, 293, 294, 297, 299, 302, 317, 318, 353, 354, 355, 365, 368, 374, 377, 378, 381, 382, 385, 387, 390, 391, 394, 396, 399, 400, 403, 404, 407, 408, 411, 416, 419, 420, 423, 424, 427, 428, 431, 436, 439, 440, 443, 444, 447, 457, 460, 461, 464, 481, 484, 485, 488, 489, 492, 501, 504, 505, 508, 513, 516, 517, 520, 533, 536, 539, 542, 556, 559, 560, 563, 573, 576, 578, 581, 583, 586, 596, 600, 601, 605, 610, 611, 614, 618, 619, 649, 651, 655, 656, 657, 658, 659, 678, 690, 691, 707, 709, 729, 740, 742, 743, 746, 748, 750, 751, 753, 754, 756, 763, 765, 766, 769, 774, 776, 780, 782, 783, 785, 789, 790, 792, 802, 804, 805, 807, 808, 810, 890, 891, 892, 893, 935, 936, 937, 941, 943, 988, 989, 992, 994, 997], "exactli": [14, 16, 119, 126, 128, 999, 1005], "common": [14, 20, 72, 73, 119, 122, 124, 126, 128, 130, 149], "ground": [14, 121], "li": 14, "between": [14, 72, 73, 74, 75, 76, 117, 119, 121, 122, 125, 126, 131, 133, 134, 135, 137, 148, 175, 176, 177, 246, 281, 284, 368, 400, 403, 556, 559, 814, 815, 818, 820, 823, 825, 828, 830, 844, 847, 874, 877, 894, 900, 918, 920, 921, 935, 936, 937, 941, 943, 999, 1036, 1038], "find": [14, 18, 19, 72, 73, 121, 132, 135, 935, 936, 937, 941, 943, 999], "exist": [14, 15, 18, 20, 21, 24, 25, 72, 73, 74, 75, 118, 119, 120, 121, 122, 123, 124, 129, 132, 149, 610, 631, 1036, 1040], "essenti": [14, 15, 20, 119, 122, 128], "order": [14, 18, 19, 21, 72, 73, 74, 75, 76, 117, 118, 119, 123, 125, 126, 127, 128, 134, 135, 137, 149, 368, 400, 403, 691, 698, 700, 703, 705, 711, 713, 715, 717, 719, 721, 742, 757, 759, 770, 772, 793, 795, 796, 798, 808, 810, 830, 848, 851, 890, 891, 892, 930, 933, 935, 936, 937, 941, 943, 944, 945, 948, 950, 953, 1042, 1043], "design": [14, 15, 115, 129, 132, 134, 149], "univers": 14, "abstract": [14, 126, 136, 149, 318, 333, 1036, 1040], "In": [14, 16, 18, 19, 116, 117, 118, 119, 121, 122, 123, 126, 127, 128, 129, 130, 132, 134, 135, 136, 137, 148, 149, 318, 357, 363, 364, 367, 368, 382, 385, 539, 542, 560, 563, 610, 616, 654, 830, 860, 863, 918, 924, 926, 999], "search": [14, 18, 27, 30, 31, 59, 72, 73, 104, 116, 119, 121, 931, 932, 933, 934], "languag": [14, 16, 132], "first": [14, 15, 18, 19, 21, 24, 25, 117, 119, 121, 122, 125, 126, 132, 134, 135, 137, 172, 173, 175, 204, 205, 207, 208, 246, 304, 313, 318, 337, 349, 368, 382, 385, 408, 411, 416, 419, 420, 423, 424, 427, 428, 431, 449, 452, 469, 472, 477, 480, 493, 496, 497, 500, 517, 520, 521, 524, 529, 532, 533, 536, 539, 542, 548, 551, 556, 559, 591, 595, 610, 618, 691, 702, 742, 748, 750, 754, 756, 757, 759, 766, 769, 780, 782, 786, 788, 793, 795, 799, 801, 805, 807, 830, 836, 839, 864, 867, 874, 877, 878, 881, 890, 891, 892, 893, 894, 895, 904, 905, 918, 929, 930, 931, 932, 935, 936, 937, 941, 1020, 1031, 1032, 1033, 1036, 1040], "see": [14, 17, 18, 19, 20, 117, 120, 122, 126, 128, 134, 135, 148, 149, 175, 176, 177, 193, 196, 204, 205, 207, 208, 246, 262, 265, 305, 308, 368, 382, 385, 408, 411, 416, 419, 420, 423, 424, 427, 428, 431, 444, 447, 461, 464, 493, 496, 517, 520, 529, 532, 533, 536, 539, 542, 548, 551, 556, 559, 560, 563, 591, 595, 742, 774, 776, 783, 785, 790, 792, 805, 807, 808, 810, 930, 932, 935, 936, 937, 941, 943, 955, 960, 963, 964, 967, 968, 971, 972, 975, 976, 979, 980, 983, 984, 987, 988, 989, 992, 994, 997, 999], "clear": [14, 15, 16, 19, 20, 119, 127, 128, 132, 134, 318, 336], "front": [14, 131, 132, 135, 999, 1005], "runner": 14, "look": [14, 18, 19, 21, 116, 117, 119, 121, 122, 123, 126, 127, 128, 132, 134, 136, 137, 999], "littl": [14, 134], "deeper": [14, 19, 115, 131, 318, 342, 346, 350, 894, 905, 906], "follow": [14, 15, 18, 19, 20, 21, 72, 73, 116, 118, 119, 121, 123, 125, 126, 127, 128, 129, 131, 132, 134, 135, 136, 137, 149, 246, 288, 291, 318, 362, 368, 560, 563, 610, 652, 653, 654, 676, 677, 691, 698, 700, 703, 705, 711, 713, 715, 717, 719, 721, 729, 740, 741, 742, 786, 788, 808, 810, 894, 900, 906, 935, 936, 937, 941, 943, 999, 1020, 1030, 1036, 1040], "same": [14, 16, 18, 19, 21, 27, 28, 29, 72, 73, 116, 117, 119, 121, 122, 125, 126, 128, 129, 130, 132, 134, 136, 137, 175, 176, 177, 185, 188, 199, 202, 210, 213, 223, 226, 228, 232, 233, 237, 241, 245, 246, 252, 255, 257, 260, 262, 265, 318, 327, 328, 362, 368, 369, 372, 382, 385, 412, 415, 432, 435, 465, 468, 539, 542, 560, 563, 564, 567, 568, 571, 606, 609, 610, 636, 638, 639, 642, 663, 666, 667, 691, 707, 709, 724, 729, 730, 731, 732, 733, 734, 735, 736, 741, 742, 743, 746, 748, 750, 751, 753, 754, 756, 757, 759, 760, 762, 763, 765, 777, 779, 783, 785, 786, 788, 790, 792, 793, 795, 802, 804, 805, 807, 830, 836, 839, 848, 851, 852, 855, 864, 867, 870, 873, 874, 877, 890, 891, 892, 894, 907, 935, 936, 937, 941, 943, 944, 945, 948, 950, 953, 955, 956, 959, 960, 963, 964, 967, 968, 971, 972, 975, 980, 983, 984, 987, 999, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027], "core": [14, 18, 20, 128, 132, 137, 318, 354, 999], "principl": 14, "oper": [14, 18, 20, 24, 25, 72, 73, 74, 75, 118, 119, 121, 122, 125, 126, 128, 129, 135, 136, 175, 204, 205, 207, 208, 246, 305, 308, 368, 382, 385, 424, 427, 428, 431, 477, 480, 544, 547, 548, 551, 560, 563, 587, 590, 610, 620, 632, 633, 634, 678, 691, 698, 700, 703, 705, 711, 713, 715, 717, 719, 721, 729, 730, 731, 732, 733, 734, 735, 736, 738], "expos": [14, 132, 136, 610, 626], "almost": [14, 19, 126, 133, 135], "ident": [14, 16, 72, 73, 122, 124, 126, 134, 135, 149, 318, 352, 894, 907, 999], "uniqu": [14, 121, 122, 126, 149, 318, 327, 328, 890, 891, 892, 893, 894, 900, 935, 936, 937, 941, 942, 943], "syntax": [14, 15, 130], "There": [14, 18, 19, 119, 122, 125, 126, 127, 130, 132, 135, 149], "onli": [14, 17, 18, 19, 24, 25, 72, 73, 116, 117, 119, 121, 122, 123, 125, 126, 127, 128, 129, 132, 134, 135, 136, 137, 147, 149, 318, 358, 368, 525, 528, 529, 532, 742, 766, 769, 786, 788, 830, 848, 851, 894, 895, 896, 904, 905, 930, 931, 932, 955, 964, 967, 999, 1036, 1037, 1038, 1039, 1040, 1041], "so": [14, 15, 18, 19, 22, 23, 24, 25, 27, 30, 31, 32, 33, 34, 35, 38, 39, 40, 41, 42, 43, 48, 49, 50, 51, 52, 53, 54, 55, 60, 61, 66, 67, 70, 71, 72, 73, 79, 80, 83, 84, 85, 86, 87, 88, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 105, 106, 111, 112, 116, 117, 118, 119, 121, 124, 125, 127, 128, 129, 131, 132, 133, 134, 135, 136, 137, 149, 150, 158, 166, 167, 168, 170, 179, 180, 185, 186, 193, 194, 199, 200, 215, 216, 223, 224, 228, 230, 233, 235, 241, 243, 267, 268, 269, 271, 369, 370, 371, 373, 382, 383, 384, 386, 391, 392, 393, 395, 432, 433, 434, 465, 466, 467, 568, 569, 570, 572, 573, 574, 575, 577, 578, 579, 580, 582, 596, 597, 598, 599, 601, 602, 603, 604, 611, 612, 613, 615, 639, 640, 641, 643, 681, 682, 683, 684, 693, 694, 695, 697, 743, 744, 745, 747, 815, 816, 817, 819, 820, 821, 822, 824, 825, 826, 827, 829, 831, 832, 833, 835, 864, 865, 866, 868, 894, 895, 905, 913, 914, 915, 917, 920, 922, 937, 938, 939, 940, 989, 990, 991, 993, 994, 995, 996, 998, 999], "wai": [14, 15, 18, 121, 123, 129, 134, 135, 136, 137, 149], "manipul": [14, 53, 98, 116, 137, 148, 831, 834, 836, 839, 840, 843, 844, 847, 848, 851, 852, 855, 856, 859, 860, 863, 864, 867, 869, 870, 873, 874, 877, 878, 881, 882, 885, 886, 889], "unsurprisingli": [14, 119], "fundament": [14, 126, 132], "consist": [14, 72, 73, 125, 129, 318, 350, 742, 757, 759, 955, 956, 959, 1032, 1033], "each": [14, 15, 16, 19, 20, 72, 73, 74, 75, 76, 115, 116, 117, 118, 119, 120, 121, 122, 124, 125, 126, 127, 129, 130, 131, 132, 134, 135, 137, 148, 149, 160, 163, 164, 166, 169, 175, 210, 213, 246, 257, 260, 318, 327, 328, 339, 340, 341, 342, 343, 344, 345, 349, 362, 368, 369, 372, 374, 377, 378, 381, 382, 385, 387, 390, 391, 394, 396, 399, 400, 403, 404, 407, 408, 411, 412, 415, 416, 419, 420, 423, 424, 427, 428, 431, 432, 435, 436, 439, 440, 443, 444, 447, 449, 452, 457, 460, 461, 464, 465, 468, 469, 472, 473, 476, 477, 480, 481, 484, 485, 488, 489, 492, 493, 496, 497, 500, 501, 504, 505, 508, 509, 512, 513, 516, 517, 520, 521, 524, 525, 528, 529, 532, 533, 536, 539, 542, 544, 547, 548, 551, 552, 555, 556, 559, 560, 563, 564, 567, 568, 571, 573, 576, 578, 581, 583, 586, 587, 590, 591, 595, 596, 600, 601, 605, 606, 609, 610, 611, 614, 691, 698, 700, 703, 705, 711, 713, 715, 717, 719, 721, 729, 730, 731, 732, 733, 734, 735, 736, 737, 742, 743, 746, 748, 750, 751, 753, 757, 759, 766, 769, 774, 776, 777, 779, 783, 785, 790, 792, 793, 795, 830, 840, 843, 856, 859, 864, 867, 869, 874, 877, 882, 885, 886, 889, 894, 900, 907, 918, 919, 930, 933, 935, 936, 937, 941, 955, 956, 959, 999, 1005, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1031, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043], "veri": [14, 15, 18, 19, 116, 117, 119, 121, 122, 126, 128, 129, 133, 135, 136, 137, 149, 999], "similar": [14, 116, 121, 126, 127, 128, 135, 149, 368, 560, 563, 729, 740, 1020, 1031], "convent": [14, 148, 742, 766, 769, 955, 956, 959], "those": [14, 18, 19, 20, 72, 73, 121, 126, 132, 137, 175, 176, 177, 691, 727, 742, 786, 788, 793, 795, 830, 831, 834], "introduc": [14, 126, 135, 830, 864, 867, 935, 936], "2006": 14, "layer": [14, 47, 92, 116, 118, 132, 133, 136, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 912, 913, 916, 999, 1011, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1040, 1042, 1043], "therefor": [14, 19, 116, 117, 118, 119, 120, 121, 122, 125, 126, 127, 128, 129, 132, 134, 136, 149, 175, 176, 177, 179, 182, 184, 185, 188, 190, 191, 193, 196, 198, 199, 202, 204, 205, 207, 208, 210, 213, 220, 221, 223, 226, 228, 232, 233, 237, 238, 240, 241, 245, 246, 267, 270, 368, 369, 372, 382, 385, 387, 390, 391, 394, 432, 435, 465, 468, 537, 548, 551, 568, 571, 573, 576, 583, 586, 587, 590, 596, 600, 610, 638, 729, 732, 741, 742, 743, 746, 754, 756, 830, 864, 867, 912, 913, 916, 935, 937, 941, 955, 960, 963, 988, 989, 992], "present": [14, 19, 72, 73, 117, 120, 126, 127, 128, 129, 132], "itself": [14, 18, 19, 117, 126, 129, 136, 148, 149, 610, 616, 894, 906], "cut": 14, "cloth": 14, "adher": [14, 15, 118, 120, 132, 137], "semant": [14, 132, 137, 368, 560, 563], "round": [14, 15, 16, 18, 19, 20, 21, 38, 39, 83, 84, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 132, 134, 135, 136, 137, 148, 368, 382, 385, 432, 435, 465, 468, 469, 472, 539, 542, 583, 586, 606, 609, 999], "up": [14, 15, 16, 17, 19, 20, 21, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 132, 133, 134, 135, 136, 137, 148, 149], "hopefulli": [14, 15, 16, 18, 19, 20, 21, 115, 116, 117, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 132, 134, 135, 136, 137, 148], "paint": [14, 132], "pictur": [14, 132], "how": [14, 16, 17, 18, 19, 20, 21, 115, 116, 117, 118, 119, 120, 122, 123, 124, 125, 126, 127, 128, 129, 131, 133, 134, 135, 136, 137, 148, 149, 999, 1005, 1020, 1031, 1032, 1033], "pleas": [14, 15, 16, 18, 19, 20, 21, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 132, 134, 135, 136, 137, 148, 999], "check": [14, 15, 16, 18, 19, 27, 28, 29, 30, 31, 72, 73, 121, 126, 131, 132, 134, 135, 136, 137, 148, 246, 272, 286, 287, 293, 294, 297, 299, 302, 317, 318, 357, 367, 610, 620, 635, 649, 656, 657, 658, 659, 678, 690, 691, 707, 709, 742, 757, 759, 894, 895, 904, 905, 906, 999], "out": [14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 32, 33, 34, 35, 38, 39, 40, 41, 48, 49, 50, 51, 52, 53, 54, 55, 62, 63, 64, 65, 66, 67, 70, 71, 72, 73, 74, 75, 77, 78, 79, 80, 83, 84, 85, 86, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 107, 108, 109, 110, 111, 112, 115, 116, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 130, 131, 132, 134, 135, 136, 137, 148, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 175, 176, 177, 178, 179, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 212, 214, 215, 217, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 252, 253, 254, 255, 256, 262, 263, 264, 265, 266, 276, 278, 318, 363, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 622, 623, 624, 625, 627, 628, 629, 632, 633, 634, 636, 638, 639, 640, 641, 642, 643, 650, 663, 666, 667, 691, 724, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 789, 790, 791, 792, 793, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 929, 930, 931, 932, 934, 935, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1020, 1028], "discuss": [14, 15, 16, 17, 18, 19, 20, 21, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 132, 134, 135, 136, 137, 148, 149, 999], "faq": [14, 15, 16, 132, 134, 135, 136, 137, 148], "reach": [14, 15, 16, 18, 19, 20, 21, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 132, 134, 135, 136, 137, 148, 318, 342, 346, 350, 894, 906], "discord": [14, 15, 16, 18, 19, 20, 21, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 132, 134, 135, 136, 137, 148, 999], "you": [14, 15, 16, 17, 18, 19, 20, 21, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 131, 132, 134, 135, 136, 137, 148, 149, 999, 1005], "question": [14, 15, 16, 18, 19, 119, 121, 132, 134, 135, 136, 137, 148, 149, 999], "With": [15, 16, 18, 24, 25, 38, 39, 40, 41, 42, 43, 60, 61, 72, 73, 74, 75, 83, 84, 85, 86, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 105, 106, 119, 121, 132, 160, 162, 163, 164, 165, 166, 169, 171, 175, 210, 213, 246, 267, 270, 318, 340, 356, 368, 369, 372, 373, 382, 385, 386, 387, 390, 391, 394, 395, 408, 411, 428, 431, 432, 435, 440, 443, 465, 468, 477, 480, 497, 500, 537, 538, 544, 547, 548, 551, 564, 567, 568, 571, 572, 573, 576, 577, 578, 579, 580, 581, 582, 583, 586, 587, 590, 596, 597, 600, 601, 602, 605, 610, 611, 612, 613, 614, 615, 619, 627, 628, 635, 638, 639, 642, 643, 675, 680, 681, 682, 683, 684, 685, 686, 691, 693, 694, 696, 729, 732, 735, 736, 741, 742, 743, 746, 747, 748, 750, 751, 753, 754, 756, 770, 772, 799, 801, 814, 815, 818, 819, 820, 824, 825, 828, 829, 830, 831, 834, 835, 844, 847, 848, 851, 856, 859, 864, 867, 868, 869, 878, 881, 894, 897, 912, 913, 915, 916, 917, 918, 919, 920, 922, 923, 924, 926, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 944, 945, 948, 955, 956, 959, 960, 963, 988, 989, 992], "central": 15, "goal": [15, 20], "being": [15, 16, 18, 19, 72, 73, 117, 119, 121, 124, 125, 126, 127, 128, 129, 130, 132, 135, 148, 149, 175, 176, 177, 610, 665, 670, 935, 942, 999], "would": [15, 18, 19, 21, 115, 117, 118, 119, 121, 123, 124, 125, 126, 129, 131, 132, 134, 136, 137, 149, 160, 165, 318, 363, 999], "entir": [15, 16, 19, 72, 73, 119, 120, 121, 125, 126, 129, 134, 135, 136, 137, 149, 318, 362, 955, 960, 963, 964, 967, 968, 971, 972, 975, 976, 979, 980, 983, 984, 987, 988, 989, 992, 994, 997, 1020, 1029], "forgiven": 15, "rais": [15, 19, 72, 73, 129, 130, 132, 134, 246, 262, 265, 368, 457, 460, 556, 559, 610, 620, 645, 654, 668, 677, 687, 691, 728, 742, 766, 769, 773, 805, 807, 830, 870, 873, 874, 877, 930, 933, 955, 960, 963, 968, 971, 988, 989, 992, 994, 997, 1032, 1033, 1036, 1040], "an": [15, 16, 18, 19, 20, 21, 24, 25, 27, 30, 31, 68, 69, 72, 73, 113, 114, 116, 117, 118, 119, 121, 122, 123, 125, 126, 127, 128, 129, 130, 132, 134, 135, 136, 137, 148, 149, 160, 163, 164, 166, 169, 174, 175, 176, 177, 179, 182, 184, 185, 188, 190, 191, 193, 196, 198, 199, 202, 204, 205, 207, 208, 210, 213, 215, 218, 220, 221, 223, 226, 228, 232, 233, 237, 238, 240, 241, 245, 246, 252, 255, 257, 260, 262, 265, 267, 270, 281, 284, 299, 302, 305, 308, 318, 340, 344, 363, 368, 369, 372, 374, 377, 378, 381, 382, 385, 387, 390, 391, 394, 396, 399, 400, 403, 404, 407, 408, 411, 412, 415, 416, 419, 420, 423, 424, 427, 428, 431, 432, 435, 436, 439, 440, 443, 444, 447, 449, 452, 457, 460, 461, 464, 465, 468, 469, 472, 473, 476, 477, 480, 481, 484, 485, 488, 489, 492, 493, 496, 497, 500, 501, 504, 505, 508, 509, 512, 513, 516, 517, 520, 521, 524, 525, 528, 529, 532, 533, 536, 537, 538, 539, 542, 544, 547, 548, 551, 556, 559, 560, 563, 564, 567, 568, 571, 573, 576, 578, 581, 583, 586, 587, 590, 591, 595, 596, 600, 601, 605, 606, 609, 610, 621, 622, 623, 625, 627, 636, 637, 638, 650, 654, 656, 657, 658, 659, 681, 685, 686, 687, 691, 707, 709, 724, 726, 727, 728, 729, 732, 741, 742, 743, 746, 748, 750, 751, 753, 754, 756, 757, 759, 760, 762, 763, 765, 766, 769, 773, 774, 776, 777, 779, 783, 785, 786, 788, 789, 790, 792, 793, 795, 802, 804, 805, 807, 808, 810, 830, 831, 834, 836, 839, 840, 843, 844, 847, 848, 851, 852, 855, 860, 863, 864, 867, 869, 870, 873, 874, 877, 878, 881, 882, 885, 886, 889, 894, 900, 912, 913, 916, 918, 920, 921, 929, 930, 933, 934, 935, 936, 937, 941, 942, 943, 944, 945, 948, 950, 953, 955, 956, 959, 960, 963, 964, 967, 968, 971, 972, 975, 976, 979, 980, 983, 984, 987, 988, 989, 992, 994, 997, 999, 1009, 1010, 1032, 1033, 1036, 1037, 1038, 1040], "eyebrow": 15, "somehow": 15, "pytorch": [15, 16, 20, 117, 122, 127, 128, 129, 132, 134, 137, 149, 691, 698, 700, 703, 705, 711, 713, 715, 717, 719, 721, 999, 1036, 1037, 1038, 1039, 1040, 1041], "other": [15, 18, 19, 24, 25, 72, 73, 74, 75, 116, 118, 119, 121, 122, 125, 126, 129, 130, 132, 134, 136, 137, 147, 148, 149, 172, 173, 175, 176, 177, 368, 461, 464, 610, 611, 614, 616, 691, 702, 918, 924, 926, 935, 942, 955, 976, 979, 984, 987, 999], "strong": [15, 149], "industri": 15, "back": [15, 125, 131, 132, 134, 149, 999, 1005, 1032, 1033, 1036, 1040], "momentum": 15, "won": [15, 16, 19, 137], "ad": [15, 18, 19, 20, 113, 114, 116, 117, 118, 119, 121, 122, 124, 125, 126, 127, 129, 132, 136, 149, 610, 676, 677, 742, 757, 759, 830, 844, 847, 1042, 1043], "just": [15, 16, 18, 19, 118, 119, 121, 122, 129, 132, 134, 135, 149, 955, 956, 959, 1020, 1029], "make": [15, 16, 18, 19, 20, 116, 117, 118, 119, 120, 121, 122, 125, 126, 127, 128, 129, 130, 132, 134, 135, 137, 318], "problem": [15, 19, 125, 134], "even": [15, 16, 18, 19, 117, 118, 122, 127, 128, 134, 135, 136, 137, 149, 368, 556, 559, 564, 567], "wors": 15, "rather": [15, 72, 73, 116, 118, 121, 126, 137, 149, 175, 176, 177, 318, 362, 610, 656, 657, 659, 691, 707, 709], "funni": 15, "comic": 15, "strip": 15, "easi": [15, 18, 19, 122, 126], "feasibl": 15, "space": [15, 175, 176, 177, 204, 205, 207, 208, 610, 637, 691, 728], "case": [15, 18, 19, 20, 27, 30, 31, 72, 73, 74, 75, 76, 116, 117, 118, 119, 121, 122, 123, 125, 126, 127, 128, 129, 130, 132, 134, 136, 137, 149, 175, 210, 213, 318, 357, 364, 367, 368, 369, 372, 374, 377, 378, 381, 382, 385, 387, 390, 391, 394, 396, 399, 400, 403, 428, 431, 432, 435, 436, 439, 440, 443, 457, 460, 461, 464, 465, 468, 501, 504, 505, 508, 513, 516, 517, 520, 539, 542, 556, 559, 560, 563, 564, 567, 568, 571, 573, 576, 578, 581, 583, 586, 596, 600, 601, 605, 606, 609, 610, 654, 666, 667, 742, 770, 772, 830, 860, 863, 894, 897, 903, 955, 960, 963, 964, 967, 968, 971, 976, 979, 980, 983, 984, 987, 1020, 1031, 1032, 1033, 1036, 1040], "unlik": [15, 119, 126, 318], "charger": 15, "charact": [15, 130], "encod": [15, 135, 610, 637], "instant": [15, 999], "messag": [15, 19, 130, 132, 134, 1045, 1046], "much": [15, 19, 116, 125, 126, 129, 132, 134, 135], "doe": [15, 19, 21, 72, 73, 115, 116, 117, 118, 119, 121, 122, 123, 127, 129, 132, 134, 135, 149, 368, 428, 431, 610, 654, 830, 869], "mandat": [15, 121, 129], "adopt": [15, 19, 125], "continu": [15, 16, 120, 121, 130, 149], "own": [15, 16, 18, 118, 121, 130, 132, 149], "signatur": [15, 116, 117, 118, 119, 121, 126, 127, 128, 129, 175, 176, 177, 179, 182, 184, 185, 188, 190, 191, 193, 196, 198, 199, 202, 204, 205, 220, 221, 223, 226, 228, 232, 233, 237, 238, 240, 241, 245, 246, 267, 270, 368, 369, 372, 387, 390, 391, 394, 428, 431, 432, 435, 440, 443, 465, 468, 537, 548, 551, 573, 576, 583, 586, 587, 590, 742, 754, 756, 830, 844, 847, 864, 867, 935, 936, 937, 941, 944, 945, 948, 955, 960, 963], "replac": [15, 19, 21, 72, 73, 119, 121, 124, 126, 127, 128, 132, 134, 137, 149, 610, 666, 667, 830, 831, 834, 918, 919], "your": [15, 16, 17, 18, 20, 21, 116, 118, 135, 136, 149, 999], "10": [15, 18, 21, 38, 39, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 119, 121, 126, 132, 134, 135, 175, 198, 207, 208, 209, 318, 368, 408, 411, 412, 415, 440, 443, 477, 480, 497, 500, 505, 508, 578, 579, 580, 581, 582, 583, 586, 610, 628, 638, 665, 670, 691, 711, 712, 713, 714, 729, 735, 742, 751, 753, 754, 756, 780, 782, 799, 801, 830, 848, 851, 856, 859, 869, 912, 913, 915, 916, 917, 918, 919, 920, 921, 922, 930, 933, 935, 936, 955, 956, 959, 960, 963, 1036, 1038], "100": [15, 16, 101, 102, 121, 135, 136, 137, 149, 368, 583, 586, 920, 922, 999], "despit": [15, 126, 128], "distinct": [15, 118, 126, 129, 131, 935, 936, 937, 941, 943, 999], "still": [15, 72, 73, 118, 121, 127, 134, 136, 149, 999], "believ": [15, 19], "share": [15, 72, 73, 119, 121, 122, 123, 126, 132, 246, 313], "bring": [15, 121, 132, 133], "benefit": [15, 16, 18, 19, 125, 126, 129, 134, 135, 149], "unrel": [15, 19], "what": [15, 16, 19, 115, 117, 118, 119, 121, 124, 126, 130, 131, 132, 134, 135, 136, 137, 148, 149, 999], "again": [15, 16, 19, 116, 119, 121, 126, 129, 135, 137, 149], "contrari": 15, "bumpi": 15, "road": 15, "allud": [15, 135], "most": [15, 18, 19, 72, 73, 116, 117, 121, 122, 125, 126, 127, 128, 129, 130, 132, 134, 135, 136, 149, 742, 757, 759], "technolog": 15, "sector": [15, 368, 378, 381, 391, 394, 404, 407], "full": [15, 16, 19, 24, 25, 74, 75, 117, 118, 121, 127, 132, 149, 175, 246, 281, 284, 368, 477, 480, 497, 500, 729, 735, 742, 786, 788, 790, 792, 793, 795], "success": 15, "reason": [15, 19, 116, 119, 122, 125, 126, 127, 129, 132, 134, 368, 560, 563], "build": [15, 17, 18, 122, 131, 133, 136, 137, 149, 935, 936, 937, 941, 943, 999, 1020, 1031, 1032, 1033], "custom": [15, 121, 136], "comput": [15, 16, 18, 24, 25, 72, 73, 121, 122, 126, 132, 135, 149, 318, 362, 368, 382, 385, 408, 411, 420, 423, 428, 431, 449, 452, 453, 456, 473, 476, 477, 480, 493, 496, 497, 500, 521, 524, 525, 528, 529, 532, 533, 536, 539, 542, 544, 547, 548, 551, 610, 622, 623, 625, 628, 629, 691, 693, 696, 698, 700, 702, 703, 705, 711, 713, 715, 717, 719, 721, 724, 726, 728, 729, 730, 731, 732, 733, 734, 735, 736, 738, 740, 742, 743, 746, 748, 750, 757, 759, 760, 762, 763, 765, 766, 769, 770, 772, 786, 788, 789, 790, 792, 793, 795, 805, 807, 808, 810, 814, 815, 818, 820, 823, 825, 828, 894, 900, 935, 936, 937, 941, 943, 955, 956, 959, 960, 963, 964, 967, 968, 971, 972, 975, 976, 979, 980, 983, 984, 987], "thank": [15, 135], "interoper": 15, "compon": [15, 132, 691, 728], "bio": [15, 18], "hardwar": [15, 18], "initi": [15, 19, 72, 73, 74, 75, 76, 121, 123, 127, 128, 318, 729, 739, 1013, 1014, 1016, 1017, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1029, 1030, 1031, 1032, 1033, 1036, 1040], "pcie": 15, "interfac": [15, 137, 149], "motherboard": 15, "raid": 15, "storag": [15, 135], "virtual": [15, 19, 21], "bluetooth": 15, "wireless": 15, "exchang": 15, "btx": 15, "form": [15, 17, 27, 28, 29, 30, 31, 72, 73, 121, 122, 136, 137, 175, 179, 182, 215, 218, 228, 232, 233, 237, 610, 616, 691, 698, 700, 703, 705, 711, 713, 715, 717, 719, 721, 729, 742, 743, 746, 751, 753, 754, 756, 757, 759, 760, 762, 763, 765, 774, 776, 777, 779, 783, 785, 786, 788, 790, 792, 793, 795, 796, 798, 802, 804, 894, 896, 906], "factor": [15, 318, 327, 360, 361, 362, 691, 693, 696, 698, 700, 711, 713, 715, 717, 729, 730, 731, 732, 733, 734, 735, 736, 742, 743, 746, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1036, 1037, 1038, 1039], "sata": 15, "connect": [15, 18, 136, 137, 1020, 1030, 1031], "host": [15, 149], "bu": 15, "adapt": [15, 691, 715, 717, 1036, 1039], "devic": [15, 19, 24, 25, 32, 33, 37, 72, 73, 77, 78, 82, 101, 102, 115, 116, 122, 124, 127, 134, 135, 149, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 232, 233, 237, 238, 239, 240, 241, 242, 243, 244, 245, 320, 321, 322, 323, 324, 325, 327, 328, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 610, 638, 639, 642, 663, 666, 667, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 1009, 1010, 1011, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1040, 1042, 1043], "html": [15, 21, 118, 175, 176, 177, 179, 182, 184, 185, 188, 190, 191, 193, 196, 198, 199, 202, 204, 205, 220, 221, 223, 226, 228, 232, 233, 237, 238, 240, 241, 245, 246, 267, 270, 368, 369, 372, 387, 390, 391, 394, 428, 431, 432, 435, 440, 443, 465, 468, 537, 548, 551, 573, 576, 583, 586, 587, 590, 742, 754, 756, 830, 844, 847, 864, 867, 935, 936, 937, 941, 944, 945, 948, 955, 960, 963], "enabl": [15, 18, 19, 72, 73, 74, 75, 76, 121, 122, 125, 126, 129, 131, 132, 133, 135, 137, 149, 691, 728], "anyon": [15, 17, 149], "websit": 15, "tcp": 15, "ip": 15, "node": [15, 72, 73, 126, 894, 895, 904, 905], "commun": [15, 17, 19, 20, 149, 999, 1005], "network": [15, 122, 126, 132, 136, 148, 729, 738, 999, 1006, 1020, 1032, 1033], "smtp": 15, "possibl": [15, 17, 18, 19, 20, 118, 119, 121, 126, 127, 129, 132, 135, 148, 149, 610, 660, 680, 955, 960, 963, 968, 971], "send": 15, "gmail": 15, "outlook": 15, "pop": 15, "email": 15, "ieee": [15, 174, 246, 281, 284, 368, 382, 385, 461, 464, 539, 542, 560, 563, 583, 586], "754": [15, 174, 246, 281, 284, 368, 382, 385, 461, 464, 539, 542, 560, 563, 583, 586], "allow": [15, 121, 132, 149, 175, 204, 205, 207, 208, 610, 660, 1032, 1033], "calcul": [15, 72, 73, 74, 75, 76, 118, 368, 369, 372, 374, 377, 378, 381, 382, 385, 387, 390, 391, 394, 396, 399, 400, 403, 436, 439, 440, 443, 444, 447, 457, 460, 461, 464, 501, 504, 505, 508, 509, 512, 513, 516, 517, 520, 539, 542, 556, 559, 573, 576, 578, 581, 583, 586, 591, 595, 596, 600, 601, 605, 814, 815, 818, 820, 823, 825, 828, 955, 960, 963, 964, 967, 968, 971, 972, 975, 976, 979, 980, 983, 984, 987], "live": [15, 16], "depend": [15, 18, 19, 24, 25, 118, 121, 124, 126, 127, 132, 149, 246, 252, 255, 368, 369, 372, 374, 377, 378, 381, 387, 390, 391, 394, 396, 399, 400, 403, 436, 439, 440, 443, 457, 460, 461, 464, 501, 504, 505, 508, 509, 512, 513, 516, 556, 559, 573, 576, 578, 581, 596, 600, 601, 605, 742, 757, 759, 786, 788, 790, 792, 793, 795, 930, 934, 944, 945, 948, 950, 953], "did": [15, 20, 137], "aris": [15, 149], "until": [15, 19, 130, 149, 999], "substanti": [15, 19, 121, 125], "innov": 15, "growth": 15, "usag": [15, 132, 318, 362], "relev": [15, 18, 20, 119, 126, 127, 135, 1036, 1037, 1038, 1039, 1040, 1041], "area": [15, 129, 147, 368, 378, 381, 391, 394, 404, 407, 999], "necess": 15, "parti": [15, 149], "could": [15, 16, 18, 19, 119, 121, 126, 127, 129, 132, 134, 135, 136, 935, 936, 937, 941, 943], "easili": [15, 19, 135, 136, 137, 149, 999], "engag": [15, 17, 18, 19, 20, 21, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129], "regard": [15, 126, 318], "effect": [15, 117, 118, 125, 126, 149, 175, 210, 213, 691, 719, 721, 955, 976, 979, 984, 987], "2015": 15, "sinc": [15, 18, 19, 121, 149], "alongsid": 15, "machin": [15, 18, 122, 148, 246, 281, 284, 288, 291, 368, 473, 476, 742, 774, 776, 783, 785], "given": [15, 16, 18, 19, 20, 21, 72, 73, 116, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 132, 134, 136, 137, 148, 175, 176, 177, 184, 204, 205, 207, 208, 318, 351, 357, 359, 360, 361, 362, 364, 367, 610, 628, 629, 639, 642, 666, 667, 671, 689, 691, 693, 696, 698, 700, 703, 705, 711, 713, 715, 717, 719, 721, 729, 730, 731, 732, 733, 734, 735, 736, 742, 811, 813, 814, 815, 818, 820, 823, 825, 828, 830, 831, 834, 844, 847, 848, 851, 856, 859, 864, 867, 869, 882, 885, 894, 901, 902, 918, 920, 921, 923, 924, 926, 929, 944, 950, 953, 1009, 1010], "frame": [15, 148], "less": [15, 19, 24, 25, 38, 39, 72, 73, 83, 84, 117, 119, 126, 131, 132, 368, 374, 377, 378, 381, 387, 390, 400, 403, 432, 435, 501, 504, 505, 508, 513, 516, 556, 559, 560, 563, 568, 571, 583, 586, 742, 774, 776, 783, 785, 808, 810, 918, 924, 926, 955, 984, 987], "matur": [15, 149], "state": [15, 117, 118, 121, 131, 132, 133, 135, 148, 368, 539, 542, 610, 674, 688, 729, 739, 999, 1006, 1007, 1008, 1009, 1010, 1011, 1013, 1014, 1016, 1017, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043], "than": [15, 19, 24, 25, 72, 73, 116, 119, 121, 126, 129, 132, 135, 136, 137, 149, 175, 176, 177, 246, 281, 284, 318, 362, 368, 374, 377, 378, 381, 387, 390, 400, 403, 416, 419, 424, 427, 432, 435, 465, 468, 469, 472, 501, 504, 505, 508, 513, 516, 537, 556, 559, 560, 563, 568, 571, 583, 586, 606, 609, 610, 656, 657, 659, 691, 707, 709, 742, 748, 750, 766, 769, 774, 776, 783, 785, 808, 810, 830, 831, 834, 848, 851, 870, 873, 918, 924, 926, 935, 936, 937, 941, 943, 955, 972, 975, 976, 979, 980, 983, 984, 987], "preced": [15, 136], "mention": [15, 18, 19, 117, 119, 122, 129], "aros": 15, "70": [15, 742, 780, 782, 955, 956, 959], "80": [15, 742, 780, 782, 955, 956, 959], "90": [15, 101, 102, 368, 428, 431, 564, 567, 742, 780, 782, 920, 922, 955, 956, 959], "effort": [15, 17, 149], "stage": [15, 17, 19, 21, 115, 130, 999], "complet": [15, 19, 20, 72, 73, 125, 126, 134, 135, 742, 786, 788], "natur": [15, 119, 125, 126, 148, 368, 457, 460, 501, 504, 509, 512, 742, 789], "like": [15, 18, 19, 21, 115, 116, 117, 118, 119, 121, 128, 129, 131, 132, 134, 135, 136, 137, 148, 149, 691, 707, 709, 918, 924, 926, 999], "certainli": 15, "mission": [15, 999], "creat": [15, 17, 18, 19, 21, 72, 73, 121, 127, 128, 129, 132, 133, 136, 147, 148, 175, 176, 177, 179, 182, 184, 185, 188, 190, 191, 198, 199, 202, 204, 205, 207, 208, 215, 218, 220, 221, 223, 226, 238, 240, 241, 245, 318, 327, 328, 610, 638, 639, 642, 663, 666, 667, 680, 691, 726, 918, 919, 920, 921, 924, 926, 999, 1005, 1009, 1010, 1011, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043], "At": [15, 20], "process": [15, 16, 17, 18, 19, 21, 121, 122, 126, 132, 137, 318, 327, 328, 357, 367], "ourselv": 15, "lead": [15, 16, 72, 73, 74, 75, 76, 149, 742, 786, 788, 793, 795], "quansight": 15, "compani": 15, "made": [15, 19, 20, 126, 129, 132, 134], "organ": [15, 116, 122, 125, 126], "panda": 15, "scipi": 15, "conda": [15, 18, 21], "dask": [15, 935, 936, 937, 941, 943], "apach": 15, "onnx": 15, "scikit": 15, "jupyt": 15, "aw": 15, "cupi": 15, "net": [15, 16, 132, 137], "sympi": 15, "rai": [15, 368, 400, 403], "modin": 15, "spyder": 15, "includ": [15, 19, 20, 72, 73, 116, 117, 118, 119, 120, 121, 122, 123, 125, 126, 127, 128, 129, 130, 148, 149, 175, 176, 177, 179, 182, 215, 218, 610, 649, 690, 742, 808, 810, 894, 895, 918, 924, 926, 930, 932, 955, 960, 963, 964, 967, 968, 971, 972, 975, 976, 979, 980, 983, 984, 987, 988, 989, 992, 994, 997, 1002, 1004, 1020, 1030, 1031, 1034, 1035], "member": [15, 19], "googl": [15, 999], "octoml": 15, "einop": [15, 72, 73, 610, 632, 633, 634], "further": [15, 16, 19, 21, 119, 125, 131, 135, 136, 999], "sponsor": 15, "lg": 15, "electron": 15, "microsoft": 15, "d": [15, 16, 17, 18, 101, 102, 115, 126, 135, 610, 619, 627, 729, 730, 731, 732, 733, 734, 735, 736, 742, 754, 756, 780, 782, 894, 897, 920, 922, 999, 1005], "shaw": 15, "co": [15, 38, 39, 83, 84, 132, 148, 368, 610, 637, 999], "intel": 15, "togeth": [15, 72, 73, 125, 126, 130, 136, 137, 149, 1042, 1043], "major": [15, 121, 127, 128, 149, 930, 933], "involv": [15, 17, 21, 115, 127, 137, 246, 305, 308, 368, 382, 385, 539, 542, 999, 1005], "anoth": [15, 18, 19, 72, 73, 121, 122, 126, 127, 134, 137, 175, 193, 196, 246, 257, 260, 267, 270], "promis": 15, "sign": [15, 18, 38, 39, 83, 84, 133, 137, 175, 176, 177, 368, 369, 372, 382, 385, 400, 403, 424, 427, 539, 542, 560, 563, 572, 742, 789, 935, 936, 937, 941, 943, 955, 972, 975, 980, 983], "pursuit": 15, "unif": [15, 17, 134, 999, 1005], "clearli": [15, 20, 119, 121], "lot": [15, 16, 124, 134, 149], "thought": [15, 18, 19, 117], "care": [15, 19, 137], "attent": [15, 19, 125, 126, 729, 740, 741, 1020, 1031], "gone": [15, 131], "simplifi": [15, 132, 133, 134, 136], "compat": [15, 117, 149, 246, 262, 265, 368, 382, 385, 400, 403, 408, 411, 416, 419, 420, 423, 424, 427, 428, 431, 444, 447, 449, 452, 469, 472, 477, 480, 493, 496, 497, 500, 517, 520, 521, 524, 529, 532, 533, 536, 539, 542, 548, 551, 556, 559, 560, 563, 591, 595, 742, 774, 776, 783, 785, 790, 792, 799, 801, 805, 807, 808, 810, 830, 860, 863, 930, 932, 955, 960, 963, 964, 967, 968, 971, 972, 975, 976, 979, 980, 983, 984, 987, 988, 989, 992, 994, 997, 999], "excit": [15, 17, 115, 999], "complianc": 15, "hope": [15, 149], "due": [15, 18, 24, 25, 126, 129, 368, 539, 542], "suit": [15, 18, 115, 120, 121, 135, 148], "some": [15, 16, 18, 19, 20, 72, 73, 116, 117, 118, 119, 121, 122, 125, 126, 127, 128, 129, 130, 133, 134, 135, 136, 148, 149, 368, 461, 464, 691, 693, 696, 698, 700, 703, 705, 711, 713, 715, 717, 719, 721, 727, 729, 737, 999, 1020, 1028], "motiv": [15, 134], "great": [15, 16, 121, 132, 134], "convinc": 15, "celebr": 15, "encourag": [15, 148, 149, 999, 1005], "foundat": 15, "point": [16, 19, 117, 118, 119, 121, 125, 129, 132, 134, 135, 148, 174, 175, 176, 177, 184, 190, 191, 198, 220, 221, 238, 240, 246, 252, 255, 281, 284, 294, 297, 305, 308, 368, 374, 377, 378, 381, 382, 385, 387, 390, 391, 394, 396, 399, 400, 403, 404, 407, 428, 431, 432, 435, 436, 439, 440, 443, 444, 447, 457, 460, 461, 464, 465, 468, 501, 504, 505, 508, 513, 516, 517, 520, 539, 542, 556, 559, 560, 563, 564, 567, 573, 576, 578, 581, 583, 586, 596, 600, 601, 605, 606, 609, 742, 743, 746, 751, 753, 757, 759, 760, 762, 763, 765, 774, 776, 783, 785, 786, 788, 790, 792, 793, 795, 808, 810, 935, 936, 937, 941, 943, 955, 960, 963, 964, 967, 968, 971, 972, 975, 976, 979, 980, 983, 984, 987], "mai": [16, 18, 19, 24, 25, 121, 126, 134, 136, 175, 176, 177, 193, 196, 318, 363, 368, 449, 452, 477, 480, 497, 500, 525, 528, 529, 532, 610, 631, 935, 936, 937, 941, 943, 944, 945, 948, 950, 953, 955, 960, 963, 964, 967, 968, 971], "ask": [16, 132, 134, 149, 999], "perfectli": 16, "happi": [16, 18, 149], "abund": 16, "better": [16, 115, 130, 131, 134, 135, 136], "ll": [16, 17, 19, 119, 126, 129, 135], "give": [16, 18, 19, 115, 117, 118, 119, 123, 134, 830, 860, 863], "two": [16, 74, 75, 118, 119, 121, 125, 126, 131, 135, 137, 175, 176, 177, 190, 191, 210, 213, 228, 232, 233, 237, 246, 304, 313, 368, 424, 427, 564, 567, 610, 618, 742, 743, 746, 751, 753, 754, 756, 757, 759, 760, 762, 763, 765, 766, 769, 770, 772, 774, 776, 777, 779, 780, 782, 783, 785, 786, 788, 789, 790, 792, 793, 795, 796, 798, 802, 804, 805, 807, 830, 878, 881, 935, 936, 937, 941, 942, 943, 999], "streamlin": 16, "workflow": [16, 19, 135, 147, 999], "save": [16, 72, 73, 121, 130, 149, 610, 672, 1032, 1033], "week": [16, 19, 20, 999], "let": [16, 118, 119, 121, 126, 127, 128, 132, 134, 135, 136, 137, 955, 964, 967, 976, 979, 980, 983, 984, 987, 999], "sai": [16, 18, 124, 134], "deepmind": 16, "releas": [16, 18, 20, 999], "awesom": 16, "paper": 16, "love": 16, "choic": [16, 18, 129, 135, 955, 976, 979, 984, 987], "perceiverio": 16, "happen": [16, 18, 19, 121, 135], "slew": 16, "rush": 16, "f": [16, 21, 115, 121, 126, 130, 132, 135, 137, 368, 473, 476, 610, 651, 655, 894, 897], "g": [16, 115, 126, 149, 246, 251, 305, 308, 318, 334, 894, 897, 918, 923, 924, 926, 935, 936, 937, 941, 943, 955, 960, 963, 968, 971, 972, 975, 980, 983], "inevit": 16, "deviat": [16, 121, 912, 913, 916, 918, 923, 955, 976, 979, 1034, 1035], "origin": [16, 72, 73, 74, 75, 76, 123, 124, 127, 132, 134, 368, 400, 403, 742, 770, 772, 830, 860, 863, 864, 867], "often": [16, 121, 122, 130, 149], "erron": 16, "train": [16, 122, 126, 128, 135, 136, 137, 147, 148, 149, 691, 693, 696, 698, 700, 711, 713, 999], "poor": 16, "converg": 16, "perform": [16, 72, 73, 116, 117, 119, 121, 122, 123, 125, 126, 128, 129, 132, 135, 149, 160, 165, 175, 204, 205, 207, 208, 318, 610, 628, 632, 633, 634, 652, 653, 654, 691, 698, 700, 703, 705, 711, 713, 715, 717, 719, 721, 729, 737, 739, 742, 793, 795, 890, 891, 892, 893, 894, 901, 902, 988, 989, 992, 994, 997], "issu": [16, 17, 20, 121, 132, 134, 136, 149], "etc": [16, 18, 19, 20, 68, 69, 72, 73, 113, 114, 116, 117, 119, 121, 125, 126, 127, 132, 134, 135, 149, 175, 204, 205, 207, 208, 610, 638, 639, 642, 663, 666, 667, 918, 919, 920, 921, 924, 926, 935, 936, 937, 941, 943, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1040, 1042, 1043], "publish": [16, 149], "manag": [16, 17, 129, 149, 318], "get": [16, 17, 18, 20, 72, 73, 115, 121, 122, 127, 128, 129, 132, 133, 134, 135, 136, 246, 276, 279, 280, 281, 284, 288, 291, 318, 327, 328, 337, 338, 351, 352, 357, 361, 364, 367, 610, 617, 644, 645, 646, 665, 674, 999, 1005, 1020, 1029], "work": [16, 18, 19, 20, 115, 121, 126, 127, 128, 131, 132, 133, 134, 136, 137, 999, 1005], "repositori": [16, 18, 19, 21, 120, 130], "pull": [16, 17, 18, 21, 116, 149], "request": [16, 17, 116, 318, 354], "confus": [16, 129], "do": [16, 18, 19, 20, 72, 73, 116, 117, 118, 119, 122, 123, 124, 125, 126, 127, 128, 129, 132, 134, 135, 136, 137, 149, 368, 560, 563, 610, 654, 691, 707, 709, 727, 894, 895, 904, 905, 906], "don": [16, 18, 19, 20, 68, 69, 113, 114, 121, 127, 136, 149], "expect": [16, 121, 149, 610, 617, 999], "codebas": [16, 17, 115, 116, 129, 131, 318, 360, 361, 999], "total": [16, 17, 19, 72, 73, 74, 75, 76, 119, 121, 128, 135, 136, 149, 318, 364, 930, 933, 955, 976, 979, 984, 987], "hour": 16, "spent": 16, "spin": 16, "off": [16, 131, 742, 754, 756, 802, 804], "test": [16, 18, 20, 115, 119, 130, 149, 368, 481, 484, 485, 488, 489, 492, 988, 989, 992, 994, 997], "error": [16, 18, 72, 73, 117, 121, 125, 128, 130, 134, 149, 160, 161, 318, 368, 453, 456, 955, 960, 963, 968, 971, 1032, 1033, 1036, 1040], "iter": [16, 27, 28, 29, 30, 31, 68, 69, 72, 73, 74, 75, 76, 113, 114, 126, 132, 135, 172, 173, 318, 340, 341, 343, 344, 345, 346, 349, 362, 610, 611, 614, 830, 840, 843, 856, 859, 869, 882, 885, 886, 889, 894, 895, 896, 897, 900, 904, 905, 906], "address": [16, 19, 20, 125, 132], "sake": 16, "singl": [16, 19, 72, 73, 116, 117, 119, 121, 122, 124, 126, 129, 132, 135, 136, 137, 149, 318, 327, 328, 347, 348, 349, 350, 610, 686, 690, 918, 923, 924, 926, 935, 936], "multipl": [16, 19, 72, 73, 83, 84, 85, 86, 93, 94, 97, 98, 99, 100, 101, 102, 119, 122, 126, 149, 368, 382, 386, 537, 539, 542, 610, 611, 613, 614, 615, 639, 643, 660, 742, 743, 746, 747, 763, 765, 830, 831, 834, 835, 864, 867, 868, 869, 912, 913, 915, 916, 917, 920, 922, 930, 931, 932, 955, 960, 963, 964, 967, 968, 971, 972, 975, 976, 979, 980, 983, 984, 987, 988, 989, 992, 994, 997, 1020, 1030], "line": [16, 18, 119, 121, 125, 130, 133, 134, 135, 136, 147, 999, 1005], "convert": [16, 27, 28, 29, 30, 31, 72, 73, 121, 125, 132, 149, 150, 158, 175, 179, 182, 215, 218, 246, 250, 251, 318, 334, 335, 336, 337, 357, 364, 367, 610, 675, 681, 685, 686, 742, 811, 813, 894, 896, 906, 907, 1010], "directli": [16, 19, 116, 117, 118, 121, 122, 125, 126, 127, 128, 129, 132, 134, 136, 137, 148, 149, 894, 906], "graph": [16, 24, 25, 122, 126, 133, 149, 691, 698, 700, 703, 705, 711, 713, 715, 717, 719, 721, 935, 936, 937, 941, 943, 1032, 1033], "guarante": [16, 125, 149, 935, 936], "turn": [16, 119, 121, 126], "4": [16, 21, 24, 25, 38, 39, 48, 49, 52, 53, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 119, 121, 123, 126, 132, 134, 135, 136, 137, 160, 162, 163, 165, 175, 199, 202, 210, 213, 223, 226, 241, 245, 246, 267, 269, 270, 271, 318, 340, 356, 368, 369, 371, 372, 373, 382, 383, 384, 385, 386, 387, 390, 391, 393, 394, 395, 400, 403, 408, 411, 428, 431, 432, 434, 435, 440, 443, 465, 467, 468, 477, 480, 497, 500, 537, 538, 544, 547, 548, 551, 564, 567, 568, 570, 571, 573, 575, 576, 577, 578, 581, 583, 586, 587, 590, 596, 597, 599, 600, 601, 602, 604, 605, 610, 619, 628, 637, 638, 639, 641, 642, 643, 675, 680, 691, 693, 695, 696, 697, 729, 732, 733, 734, 736, 739, 741, 742, 743, 744, 746, 748, 750, 751, 753, 754, 756, 763, 765, 774, 776, 780, 782, 799, 801, 802, 804, 814, 825, 828, 830, 831, 832, 833, 834, 835, 836, 839, 844, 847, 848, 851, 856, 859, 860, 863, 864, 866, 867, 868, 869, 878, 881, 894, 897, 912, 913, 915, 916, 917, 918, 919, 920, 922, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 940, 941, 944, 945, 948, 955, 956, 959, 960, 963, 988, 989, 992, 999, 1036, 1037, 1038, 1039, 1041], "step": [16, 18, 19, 21, 42, 43, 72, 73, 77, 78, 87, 88, 119, 123, 125, 126, 127, 128, 132, 135, 136, 137, 148, 175, 176, 177, 178, 204, 205, 207, 208, 318, 691, 693, 694, 695, 696, 697, 698, 699, 700, 701, 703, 705, 711, 712, 713, 714, 715, 717, 719, 721, 890, 891, 892, 893, 999, 1036, 1037, 1038, 1039, 1040, 1041], "take": [16, 17, 18, 19, 118, 119, 121, 126, 127, 128, 132, 134, 136, 137, 149, 368, 428, 431, 999, 1005], "few": [16, 19, 20, 121, 122, 126, 127, 128, 129, 130, 133, 134, 135, 136, 147, 999, 1005], "second": [16, 18, 119, 121, 129, 134, 246, 304, 313, 318, 349, 368, 382, 385, 408, 411, 416, 419, 420, 423, 424, 427, 428, 431, 449, 452, 469, 472, 477, 480, 493, 496, 497, 500, 517, 520, 521, 524, 529, 532, 533, 536, 539, 542, 548, 551, 556, 559, 591, 595, 610, 618, 665, 670, 691, 693, 696, 698, 700, 711, 713, 742, 748, 750, 754, 756, 757, 759, 766, 769, 780, 782, 786, 788, 793, 795, 799, 801, 805, 807, 830, 874, 877, 878, 881, 890, 892, 935, 936, 937, 941, 1036, 1037, 1038], "automat": [16, 18, 19, 115, 117, 122, 126, 131, 132, 133, 136, 137, 999], "convers": [16, 28, 29, 30, 31, 72, 73, 131, 133, 137, 148, 149, 999, 1005], "everyon": [16, 17, 19, 149], "regardless": [16, 17, 72, 73, 134, 137, 172, 173], "wouldn": 16, "nice": [16, 121], "write": [16, 19, 20, 21, 72, 73, 115, 116, 118, 119, 122, 123, 129, 132, 134, 137, 160, 161, 162, 163, 164, 165, 166, 169, 171, 175, 176, 177, 179, 182, 184, 185, 188, 190, 191, 193, 196, 198, 199, 202, 204, 205, 207, 208, 220, 221, 223, 226, 228, 232, 233, 237, 238, 240, 241, 245, 246, 252, 255, 262, 265, 318, 363, 368, 369, 372, 374, 377, 378, 381, 382, 385, 387, 390, 391, 394, 396, 399, 400, 403, 404, 407, 408, 411, 412, 415, 416, 419, 420, 423, 424, 427, 428, 431, 432, 435, 436, 439, 440, 443, 444, 447, 449, 452, 453, 456, 457, 460, 461, 464, 465, 468, 469, 472, 473, 476, 477, 480, 481, 484, 485, 488, 489, 492, 493, 496, 501, 504, 505, 508, 509, 512, 513, 516, 517, 520, 521, 524, 525, 528, 529, 532, 533, 536, 537, 538, 539, 542, 544, 547, 548, 551, 552, 555, 556, 559, 560, 563, 564, 567, 568, 571, 573, 576, 578, 581, 583, 586, 587, 590, 591, 595, 596, 600, 601, 605, 606, 609, 610, 622, 623, 625, 628, 629, 632, 633, 634, 636, 638, 639, 642, 650, 663, 666, 667, 691, 724, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 740, 741, 742, 743, 746, 748, 750, 751, 753, 754, 756, 760, 762, 763, 765, 766, 769, 770, 772, 774, 776, 777, 779, 780, 782, 783, 785, 789, 790, 792, 793, 795, 796, 798, 799, 801, 802, 804, 805, 807, 808, 810, 811, 813, 814, 815, 818, 820, 823, 825, 828, 830, 831, 834, 836, 839, 840, 843, 844, 847, 848, 851, 852, 855, 856, 859, 860, 863, 864, 867, 870, 873, 874, 877, 878, 881, 882, 885, 886, 889, 912, 913, 916, 918, 919, 920, 921, 923, 924, 926, 929, 930, 934, 935, 943, 944, 945, 948, 950, 953, 955, 956, 959, 960, 963, 964, 967, 968, 971, 972, 975, 976, 979, 980, 983, 984, 987, 988, 989, 992, 994, 997], "onc": [16, 18, 19, 121, 126, 127, 128, 132, 135, 149, 318, 362, 742, 763, 765, 793, 795, 918, 919], "know": [16, 19, 121, 935, 936, 937, 941, 943], "among": [16, 72, 73, 121], "frantic": 16, "port": 16, "lucid": 16, "honk": 16, "improv": [16, 19, 122, 132], "understand": [16, 18, 19, 20, 21, 115, 117, 118, 119, 120, 130, 131], "pattern": [16, 72, 73, 118, 127, 610, 632, 633, 634], "hasn": 16, "chang": [16, 18, 19, 20, 21, 22, 23, 24, 25, 32, 33, 34, 35, 38, 39, 40, 41, 42, 43, 48, 49, 50, 51, 52, 53, 54, 55, 60, 61, 66, 67, 70, 71, 79, 80, 83, 84, 85, 86, 87, 88, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 105, 106, 111, 112, 118, 120, 121, 126, 132, 136, 149, 166, 167, 168, 170, 179, 180, 185, 186, 193, 194, 199, 200, 215, 216, 223, 224, 228, 230, 233, 235, 241, 243, 267, 268, 269, 271, 318, 369, 370, 371, 373, 382, 383, 384, 386, 391, 392, 393, 395, 432, 433, 434, 465, 466, 467, 568, 569, 570, 572, 573, 574, 575, 577, 578, 579, 580, 582, 596, 597, 598, 599, 601, 602, 603, 604, 611, 612, 613, 615, 639, 640, 641, 643, 681, 682, 683, 684, 693, 694, 695, 697, 742, 743, 744, 745, 747, 748, 750, 815, 816, 817, 819, 820, 821, 822, 824, 825, 826, 827, 829, 830, 831, 832, 833, 835, 860, 863, 864, 865, 866, 868, 894, 896, 906, 913, 914, 915, 917, 920, 922, 937, 938, 939, 940, 989, 990, 991, 993, 994, 995, 996, 998, 999, 1005], "now": [16, 18, 21, 72, 73, 116, 117, 121, 124, 126, 127, 130, 134, 135, 137, 148, 149, 1020, 1031, 1032, 1033], "spend": 16, "torchvis": 16, "probabl": [16, 121, 729, 737, 918, 919, 1020, 1028], "sonnet": 16, "about": [16, 18, 19, 120, 121, 131, 132, 136, 137, 149, 246, 281, 284, 288, 291], "next": [16, 18, 19, 20, 21, 118, 119, 123, 124, 130, 134, 135, 246, 281, 284, 999, 1032, 1033, 1036, 1037, 1038, 1039, 1040, 1041], "everyth": [16, 19, 20, 121, 133, 149], "zero": [16, 24, 25, 38, 39, 72, 73, 74, 75, 83, 84, 117, 119, 125, 126, 127, 128, 132, 135, 136, 160, 162, 163, 175, 184, 190, 191, 210, 213, 228, 232, 233, 237, 241, 245, 246, 252, 255, 368, 382, 385, 387, 390, 391, 394, 416, 419, 440, 443, 461, 464, 465, 468, 525, 528, 529, 532, 537, 538, 539, 542, 544, 547, 548, 551, 556, 559, 560, 563, 564, 567, 573, 576, 578, 579, 580, 582, 583, 586, 587, 590, 596, 600, 601, 605, 610, 628, 663, 666, 667, 691, 693, 696, 698, 700, 711, 713, 715, 717, 729, 737, 742, 743, 746, 751, 753, 766, 769, 774, 776, 783, 785, 805, 807, 808, 810, 830, 844, 847, 848, 851, 856, 859, 864, 867, 886, 889, 912, 913, 916, 918, 920, 921, 930, 931, 932, 933, 935, 936, 937, 941, 943, 955, 960, 963, 964, 967, 968, 971, 972, 975, 976, 979, 980, 983, 984, 987, 988, 989, 992, 994, 997, 999, 1011, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1030, 1036, 1037, 1038, 1039], "need": [16, 18, 19, 20, 21, 116, 118, 119, 120, 122, 125, 126, 129, 132, 134, 135, 148, 149, 610, 622, 623, 625, 830, 831, 834, 844, 847], "said": 16, "high": [16, 20, 72, 73, 101, 102, 135, 918, 920, 921, 922, 924, 925, 926, 927], "level": [16, 17, 20, 122, 131, 132, 135, 136, 137, 149], "optim": [16, 129, 133, 135, 137, 148, 318, 691, 698, 700, 703, 705, 711, 713, 715, 717, 719, 721, 890, 891, 892, 893, 999, 1037, 1038, 1039, 1041], "trainer": [16, 147, 149, 999], "statu": 16, "quo": 16, "kera": 16, "dopamin": 16, "ignit": 16, "catalyst": 16, "lightn": 16, "fastai": 16, "haiku": [16, 137], "flax": [16, 137, 149], "trax": [16, 137], "objax": [16, 137], "idea": [16, 130, 148], "fulli": [16, 117, 125, 126, 132, 133, 134, 135, 136, 137, 149, 1020, 1030, 1031], "offer": [16, 136], "strongli": [17, 18, 999, 1005], "welcom": [17, 18, 19, 999, 1005], "absolut": [17, 72, 73, 368, 369, 372, 742, 789], "skill": 17, "whether": [17, 18, 24, 25, 27, 28, 29, 30, 31, 72, 73, 74, 75, 76, 113, 114, 117, 127, 129, 160, 161, 172, 173, 246, 252, 255, 276, 279, 293, 294, 297, 299, 302, 317, 318, 337, 338, 349, 353, 354, 357, 358, 362, 365, 367, 368, 489, 492, 610, 611, 614, 618, 619, 628, 631, 635, 637, 647, 649, 651, 654, 655, 656, 657, 658, 659, 660, 671, 673, 678, 689, 690, 691, 698, 700, 702, 703, 705, 707, 709, 711, 713, 715, 717, 719, 721, 724, 728, 729, 737, 742, 757, 759, 890, 891, 892, 893, 894, 895, 896, 900, 904, 905, 906, 907, 918, 919, 988, 989, 992, 994, 997, 1009, 1010, 1020, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041], "vetern": 17, "beginn": 17, "start": [17, 18, 19, 20, 21, 72, 73, 77, 78, 115, 118, 119, 127, 131, 132, 134, 135, 136, 148, 149, 175, 176, 177, 178, 204, 205, 206, 207, 208, 209, 318, 333], "aspect": [17, 135, 999], "guid": [17, 18, 19, 130, 999], "through": [17, 19, 20, 115, 119, 121, 122, 123, 126, 130, 131, 132, 134, 135, 136, 137, 148, 368, 400, 403, 894, 897], "journei": [17, 999, 1005], "inclusvi": 17, "big": [17, 149], "team": [17, 18, 19], "board": 17, "contributor": [17, 18, 19, 131, 999], "split": [17, 19, 24, 25, 72, 73, 131, 132, 149, 318, 327, 343, 344, 345, 346, 360, 361, 362, 610, 660, 830, 999], "section": [17, 19, 20, 115, 116, 117, 118, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 135, 136, 935, 936, 937, 941, 943], "below": [17, 18, 20, 21, 115, 116, 119, 121, 122, 126, 127, 128, 129, 130, 132, 133, 134, 135, 136, 137, 148, 175, 228, 232, 233, 237, 368, 408, 411, 428, 431, 440, 443, 564, 567, 601, 605, 742, 751, 753, 754, 756, 802, 804, 830, 844, 847, 848, 851, 935, 936, 944, 945, 948, 999], "best": [17, 18, 19, 20, 21, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 610, 660], "go": [17, 18, 19, 20, 115, 116, 119, 126, 131, 135, 149, 894, 905], "finish": [17, 18, 115, 999], "dive": [17, 19, 20, 131, 134, 135, 149, 999], "right": [17, 18, 19, 72, 73, 115, 119, 135, 368, 416, 419, 424, 427, 742, 793, 795], "environ": [17, 19, 21, 148], "basic": [17, 20, 21], "fork": [17, 18, 610, 661], "doc": [17, 20, 117, 118, 132, 135, 136, 999], "document": [17, 19, 121, 133, 135, 137], "local": [17, 18, 21, 122], "task": [17, 19, 148, 890, 891, 892, 893, 999], "help": [17, 18, 119, 121, 123, 125, 126, 134, 135, 136, 147, 610, 616, 955, 980, 983, 999], "video": [17, 19, 117, 118, 119, 121], "realli": [18, 126, 149], "contribut": [18, 19, 20, 132, 1005], "toward": [18, 132, 830, 864, 867, 999, 1005], "page": [18, 19, 133, 137, 147, 999, 1005], "explain": [18, 19, 20, 116, 117, 118, 119, 121, 122, 123, 125, 126, 127, 128, 129, 130, 132, 133, 134, 135, 136, 137, 999, 1005], "main": [18, 21, 124, 126, 175, 190, 191, 228, 232, 233, 237, 742, 754, 756, 802, 804], "prefer": [18, 126], "mode": [18, 48, 49, 72, 73, 119, 126, 149, 172, 173, 318, 347, 348, 349, 350, 362, 368, 382, 385, 539, 542, 610, 671, 688, 742, 786, 787, 788], "git": [18, 19, 121], "recurs": [18, 21, 27, 28, 29, 30, 31, 72, 73, 122, 126, 136, 149, 894, 895, 896, 904, 905, 906], "submodul": [18, 19, 20, 21, 120, 121, 122, 128, 131, 132, 136, 999, 1034, 1035, 1042, 1043], "com": 18, "unifyai": [18, 21], "http": [18, 118, 175, 176, 177, 179, 182, 184, 185, 188, 190, 191, 193, 196, 198, 199, 202, 204, 205, 220, 221, 223, 226, 228, 232, 233, 237, 238, 240, 241, 245, 246, 267, 270, 368, 369, 372, 387, 390, 391, 394, 428, 431, 432, 435, 440, 443, 465, 468, 537, 548, 551, 573, 576, 583, 586, 587, 590, 691, 693, 696, 698, 700, 742, 754, 756, 830, 844, 847, 864, 867, 935, 936, 937, 941, 944, 945, 948, 955, 960, 963], "gh": 18, "your_fold": 18, "id": [18, 125, 126, 130, 318, 337, 1032, 1033], "cours": [18, 19, 119, 135, 149], "whatev": [18, 149], "integr": [18, 246, 252, 255], "familiar": [18, 20], "decid": [18, 72, 73, 894, 905], "sure": [18, 20, 120, 121], "elig": 18, "free": [18, 19, 20, 21, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 131, 148, 999], "student": 18, "licenc": 18, "peopl": [18, 19, 115], "seem": [18, 136, 149], "miss": [18, 119, 121, 125, 126, 130, 1036, 1040], "add": [18, 19, 20, 24, 25, 38, 39, 68, 69, 72, 73, 74, 75, 83, 84, 85, 86, 113, 114, 115, 116, 117, 118, 121, 122, 123, 125, 126, 132, 134, 149, 368, 369, 372, 386, 537, 611, 615, 691, 728, 912, 913, 916, 999, 1005, 1034, 1035], "explicit": [18, 21, 126, 127, 129, 132, 149], "remind": 18, "channel": [18, 19, 20, 21, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 610, 637, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1029, 1030], "pace": 18, "updat": [18, 19, 20, 21, 72, 73, 115, 117, 119, 120, 124, 125, 126, 127, 132, 134, 135, 137, 149, 318, 327, 610, 654, 666, 667, 691, 693, 696, 698, 700, 703, 705, 711, 713, 715, 717, 719, 721, 729, 739, 890, 891, 892, 894, 901, 902, 910, 911, 1009, 1010, 1036, 1037, 1038, 1039, 1040, 1041], "suggest": [18, 19, 116, 121], "latest": [18, 20, 21, 118, 149, 175, 176, 177, 179, 182, 184, 185, 188, 190, 191, 193, 196, 198, 199, 202, 204, 205, 220, 221, 223, 226, 228, 232, 233, 237, 238, 240, 241, 245, 246, 267, 270, 368, 369, 372, 387, 390, 391, 394, 428, 431, 432, 435, 440, 443, 465, 468, 537, 548, 551, 573, 576, 583, 586, 587, 590, 742, 754, 756, 830, 844, 847, 864, 867, 935, 936, 937, 941, 944, 945, 948, 955, 960, 963, 1020, 1029], "packag": [18, 21, 130, 149], "ensur": [18, 19, 117, 121, 125, 127, 130, 610, 654], "align": [18, 72, 73, 132, 134, 999, 1005], "accord": [18, 21, 72, 73, 122, 127, 246, 267, 270, 281, 284, 368, 382, 385, 424, 427, 539, 542, 610, 638, 666, 667, 742, 805, 807, 830, 840, 843, 886, 889, 955, 976, 979, 984, 987], "stabl": [18, 62, 63, 107, 108, 132, 149, 610, 645, 646, 668, 669, 676, 677, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954], "pypi": [18, 20, 149], "mayb": [18, 27, 30, 31, 132, 134], "person": [18, 19], "experi": [18, 133, 135, 149], "avoid": [18, 19, 121, 123, 124, 126, 130, 134, 318, 368, 461, 464], "pip": [18, 148, 999], "instal": [18, 21, 130, 148, 999], "abil": [18, 133, 149], "certain": [18, 72, 73, 121, 149, 175, 176, 177, 204, 205, 207, 208], "perhap": [18, 134, 135, 136, 149], "keep": [18, 19, 72, 73, 120, 121, 126, 133, 135, 137, 610, 689], "track": [18, 19, 318, 894, 906, 1032, 1033], "termin": [18, 19, 21, 72, 73, 74, 75, 76, 126, 132, 135], "run": [18, 21, 117, 120, 121, 123, 130, 132, 133, 134, 135, 136, 137, 148, 149, 318, 327, 691, 693, 696, 698, 700, 711, 713, 890, 891, 892, 893, 1020, 1031, 1032, 1033], "command": [18, 21, 999], "ivy_dev": [18, 19, 21], "name": [18, 19, 21, 24, 25, 118, 121, 130, 132, 134, 135, 137, 172, 173, 610, 616, 742, 757, 759, 786, 788, 793, 795, 935, 936, 937, 941], "3": [18, 21, 24, 25, 34, 35, 38, 39, 40, 41, 42, 43, 48, 49, 52, 53, 74, 75, 79, 80, 83, 84, 85, 86, 87, 88, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 105, 106, 119, 121, 123, 126, 132, 134, 135, 136, 137, 160, 162, 163, 164, 165, 174, 175, 199, 202, 210, 213, 223, 226, 238, 240, 241, 245, 246, 267, 268, 269, 270, 271, 318, 337, 340, 356, 363, 368, 369, 371, 372, 373, 382, 383, 384, 385, 386, 387, 390, 391, 392, 393, 394, 395, 408, 411, 424, 427, 428, 431, 432, 434, 435, 440, 443, 457, 460, 465, 466, 467, 468, 473, 476, 477, 480, 493, 496, 497, 500, 537, 538, 544, 547, 548, 551, 564, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 586, 587, 590, 596, 597, 599, 600, 601, 602, 604, 605, 610, 611, 612, 613, 618, 619, 628, 635, 638, 639, 640, 641, 642, 643, 673, 675, 680, 686, 691, 693, 694, 695, 696, 697, 729, 730, 731, 732, 734, 735, 736, 741, 742, 743, 744, 745, 746, 747, 748, 750, 751, 753, 754, 756, 763, 765, 774, 776, 780, 782, 793, 795, 799, 801, 802, 804, 811, 813, 814, 815, 817, 818, 819, 820, 822, 824, 825, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 839, 844, 847, 848, 851, 856, 859, 860, 863, 864, 866, 867, 868, 869, 870, 873, 878, 881, 894, 897, 912, 913, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 926, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 940, 941, 944, 945, 948, 955, 956, 959, 960, 963, 980, 983, 988, 989, 992, 999], "8": [18, 21, 24, 25, 38, 39, 50, 51, 52, 53, 74, 75, 83, 84, 95, 96, 101, 102, 119, 121, 126, 131, 135, 160, 164, 318, 340, 368, 382, 385, 386, 391, 394, 395, 408, 411, 432, 435, 440, 443, 477, 480, 497, 500, 537, 538, 564, 567, 568, 569, 570, 571, 572, 583, 586, 587, 590, 601, 605, 610, 619, 638, 691, 693, 696, 729, 736, 742, 748, 750, 751, 753, 754, 756, 780, 782, 799, 801, 814, 815, 816, 817, 818, 819, 820, 822, 824, 825, 826, 827, 829, 830, 831, 832, 834, 848, 851, 856, 859, 869, 918, 919, 920, 921, 922, 930, 934, 935, 936, 955, 956, 959, 999, 1020, 1031], "activ": [18, 19, 21, 23, 68, 69, 71, 113, 114, 116, 136, 161, 162, 163, 164, 165, 166, 169, 171, 999, 1007, 1008], "setup": 18, "click": [18, 19, 118, 999], "icon": [18, 19], "side": [18, 19], "choos": [18, 19, 137, 318, 363, 368, 525, 528, 529, 532, 930, 934, 935, 936, 937, 941, 943, 955, 960, 963, 964, 967, 968, 971], "left": [18, 19, 72, 73, 119, 127, 368, 416, 419, 742, 757, 759, 770, 772, 793, 795, 930, 931, 999], "panel": 18, "select": [18, 19, 121, 132, 134, 137, 149], "drop": [18, 149], "down": [18, 121, 134], "path": [18, 21], "manual": [18, 19, 121, 136, 894, 895, 904, 905], "builtin": [18, 21, 134, 136], "requir": [18, 21, 116, 117, 118, 119, 121, 124, 125, 127, 128, 134, 149, 172, 173, 368, 583, 586, 742, 757, 759, 830, 874, 877, 1009, 1010], "cmd": [18, 21], "directori": [18, 19, 21, 121, 610, 672], "folder": [18, 19, 21, 116, 120, 121, 122], "file": [18, 19, 21, 72, 73, 116, 118, 121, 122, 123, 125, 126, 130, 132, 135, 610, 672, 1032, 1033], "abov": [18, 19, 21, 117, 118, 119, 121, 122, 123, 125, 126, 129, 130, 134, 135, 136, 137, 175, 176, 177, 179, 182, 184, 185, 188, 190, 191, 193, 196, 198, 199, 202, 204, 205, 207, 208, 210, 213, 220, 221, 223, 226, 228, 232, 233, 237, 238, 240, 241, 245, 246, 267, 270, 368, 369, 372, 382, 385, 387, 390, 391, 394, 408, 411, 428, 431, 432, 435, 440, 443, 465, 468, 537, 539, 542, 548, 551, 564, 567, 568, 571, 573, 576, 583, 586, 587, 590, 596, 600, 601, 605, 610, 638, 729, 732, 741, 742, 743, 746, 751, 753, 754, 756, 757, 759, 802, 804, 830, 844, 847, 848, 851, 864, 867, 912, 913, 916, 918, 920, 921, 935, 936, 937, 941, 944, 945, 948, 955, 960, 963, 972, 975, 976, 979, 980, 983, 988, 989, 992], "m": [18, 19, 21, 115, 132, 175, 210, 213, 228, 232, 233, 237, 610, 619, 742, 743, 746, 751, 753, 754, 756, 757, 759, 760, 762, 763, 765, 766, 769, 774, 776, 777, 779, 780, 782, 783, 785, 786, 788, 790, 792, 793, 795, 796, 798, 802, 804, 918, 923, 924, 926], "python3": [18, 21], "script": [18, 19, 21, 119, 132, 149], "bat": [18, 19, 21], "OR": [18, 19, 21, 368, 420, 423, 529, 532, 988, 994, 997], "bin": [18, 19, 21], "mac": [18, 19, 21], "linux": [18, 19, 21], "virtualenv": 18, "found": [18, 19, 72, 73, 74, 75, 76, 118, 125, 126, 130, 318, 352], "os": 18, "note": [18, 19, 116, 118, 119, 121, 126, 368, 560, 563, 742, 757, 759, 793, 795, 830, 874, 877, 935, 937, 941, 955, 964, 967], "tick": [18, 19], "abl": [18, 19, 72, 73, 122, 127, 129, 130, 134, 137], "To": [18, 119, 121, 122, 126, 130, 135, 136, 137, 999], "ivy_test": [18, 19], "test_array_api": [18, 19, 120, 121], "cd": [18, 19, 21], "r": [18, 72, 73, 610, 619, 689, 742, 786, 788, 811, 813], "txt": 18, "visual": [18, 130, 149], "jetbrain": 18, "remot": 18, "mitig": 18, "potenti": [18, 131, 368, 461, 464], "conflict": [18, 19, 135], "addit": [18, 19, 72, 73, 116, 118, 121, 126, 127, 134, 135, 137, 318, 363, 368, 382, 385, 610, 632, 633, 634, 912, 913, 916, 1020, 1030], "yet": [18, 20, 126], "particular": [18, 19, 116, 121, 129, 368, 369, 372], "system": [18, 149, 742, 790, 792], "instruct": [18, 20], "desktop": 18, "wsl": 18, "powershel": 18, "admin": 18, "visit": 18, "link": 18, "imag": [18, 21, 45, 90, 116, 132, 133, 135, 137, 148, 729, 730, 731, 732, 733, 735, 736, 999], "profession": 18, "execut": [18, 21, 126, 129, 132, 134, 137, 149, 610, 687], "deploy": 18, "top": [18, 19, 121, 135, 136, 999], "press": [18, 135, 999], "ok": 18, "correctli": [18, 72, 73, 117, 121, 126, 127, 130, 136, 149, 742, 770, 772, 930, 931], "caus": [18, 19, 119, 121, 126, 129, 130, 149], "earlier": [18, 19], "might": [18, 19, 116, 121, 124, 132, 134, 135, 610, 631], "necessari": [18, 119, 123, 126, 129], "virtualis": 18, "detail": [18, 19, 20, 116, 117, 120, 121, 122, 123, 124, 126, 135, 136, 175, 193, 196, 935, 936, 937, 941, 943], "sudo": 18, "apt": 18, "ca": 18, "certif": 18, "curl": 18, "gnupg": 18, "lsb": 18, "mkdir": 18, "p": [18, 19, 72, 73, 85, 86, 175, 210, 213, 610, 622, 623, 624, 625, 729, 737, 742, 770, 772, 808, 810, 1020, 1028], "keyr": 18, "fssl": 18, "download": [18, 121], "gpg": 18, "dearmor": 18, "o": [18, 115, 132, 610, 619], "echo": 18, "deb": 18, "arch": 18, "dpkg": 18, "architectur": [18, 137, 149], "lsb_releas": 18, "cs": 18, "tee": 18, "list": [18, 20, 21, 27, 28, 29, 30, 31, 32, 33, 34, 35, 68, 69, 72, 73, 87, 88, 105, 106, 113, 114, 116, 117, 119, 121, 127, 128, 130, 132, 135, 136, 137, 149, 175, 176, 177, 179, 182, 210, 211, 213, 215, 218, 246, 257, 258, 260, 318, 327, 328, 337, 339, 340, 343, 344, 347, 348, 362, 610, 619, 675, 680, 689, 691, 693, 695, 697, 728, 729, 730, 731, 732, 733, 734, 735, 736, 742, 799, 801, 830, 836, 839, 848, 851, 869, 874, 877, 894, 895, 896, 897, 900, 905, 906, 912, 913, 916, 930, 933, 935, 937, 938, 940, 941, 999, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027], "dev": [18, 24, 25, 72, 73, 74, 76, 122, 128, 132, 134, 136, 318, 327, 352], "null": 18, "ce": 18, "cli": 18, "containerd": 18, "io": 18, "compos": [18, 121, 126, 149], "plugin": 18, "systemctl": 18, "permiss": 18, "relat": [18, 19, 121, 130, 148, 318], "post": [18, 137, 912, 913, 916, 999, 1005], "It": [18, 19, 21, 115, 116, 118, 119, 121, 123, 125, 126, 129, 132, 134, 135, 136, 160, 161, 162, 163, 164, 165, 166, 169, 171, 175, 176, 177, 179, 182, 184, 185, 188, 190, 191, 193, 196, 198, 199, 202, 204, 205, 207, 208, 220, 221, 223, 226, 228, 232, 233, 237, 238, 240, 241, 245, 246, 252, 255, 262, 265, 318, 363, 368, 369, 372, 374, 377, 378, 381, 382, 385, 387, 390, 391, 394, 396, 399, 400, 403, 404, 407, 408, 411, 412, 415, 416, 419, 420, 423, 424, 427, 428, 431, 432, 435, 436, 439, 440, 443, 444, 447, 449, 452, 453, 456, 457, 460, 461, 464, 465, 468, 469, 472, 473, 476, 477, 480, 481, 484, 485, 488, 489, 492, 493, 496, 501, 504, 505, 508, 509, 512, 513, 516, 517, 520, 521, 524, 525, 528, 529, 532, 533, 536, 537, 538, 539, 542, 544, 547, 548, 551, 552, 555, 556, 559, 560, 563, 564, 567, 568, 571, 573, 576, 578, 581, 583, 586, 587, 590, 591, 595, 596, 600, 601, 605, 606, 609, 610, 622, 623, 625, 628, 632, 633, 634, 636, 639, 642, 650, 663, 666, 667, 691, 724, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 740, 741, 742, 743, 746, 748, 750, 751, 753, 754, 756, 760, 762, 763, 765, 766, 769, 770, 772, 774, 776, 777, 779, 780, 782, 783, 785, 789, 790, 792, 793, 795, 796, 798, 799, 801, 802, 804, 805, 807, 808, 810, 811, 813, 814, 815, 818, 820, 823, 825, 828, 830, 831, 834, 836, 839, 840, 843, 844, 847, 848, 851, 852, 855, 856, 859, 860, 863, 864, 867, 870, 873, 874, 877, 878, 881, 882, 885, 886, 889, 912, 913, 916, 918, 919, 920, 921, 923, 924, 926, 929, 930, 931, 934, 935, 943, 944, 945, 948, 950, 953, 988, 989, 992, 994, 997], "headach": 18, "arm": [18, 19], "m1": 18, "instead": [18, 19, 20, 117, 118, 119, 121, 122, 126, 129, 132, 134, 135, 149], "featur": [18, 116, 117, 135, 999], "vm": 18, "azur": 18, "cloud": [18, 148], "mean": [18, 19, 64, 65, 72, 73, 109, 110, 113, 114, 115, 119, 121, 122, 126, 127, 128, 129, 132, 134, 135, 136, 137, 148, 149, 318, 347, 348, 349, 350, 362, 610, 633, 890, 891, 892, 893, 894, 900, 918, 923, 935, 936, 955, 999, 1011], "configur": [18, 19, 21, 72, 73, 127, 318, 361, 894, 907], "defin": [18, 20, 116, 117, 118, 121, 127, 134, 136, 149, 368, 539, 542, 560, 563, 610, 663, 742, 748, 750, 757, 759, 790, 792, 918, 920, 921, 955, 960, 963, 964, 967, 968, 971], "dockerfil": [18, 21], "longer": [18, 121, 127, 129], "worri": 18, "platform": 18, "agnost": [18, 117, 125, 132, 134, 137, 149, 999], "usual": [18, 121], "studio": 18, "favourit": 18, "extens": [18, 19, 118, 121, 175, 176, 177, 179, 182, 184, 185, 188, 190, 191, 193, 196, 198, 199, 202, 204, 205, 210, 213, 220, 221, 223, 226, 228, 232, 233, 237, 238, 240, 241, 245, 246, 267, 270, 368, 369, 372, 382, 385, 387, 390, 391, 394, 408, 411, 428, 431, 432, 435, 440, 443, 465, 468, 497, 500, 537, 548, 551, 564, 567, 568, 571, 573, 576, 583, 586, 587, 590, 596, 600, 601, 605, 742, 751, 753, 754, 756, 830, 844, 847, 848, 851, 864, 867, 935, 936, 937, 941, 944, 945, 948, 955, 960, 963, 988, 989, 992], "theme": 18, "too": [18, 19, 130, 149, 368, 382, 385, 539, 542], "done": [18, 19, 119, 121, 130, 135], "unsupport": [18, 127, 130, 246, 286, 287], "old": [18, 72, 73, 129], "slow": 18, "ipad": 18, "long": [18, 19, 119, 729, 739], "browser": 18, "cool": [18, 116], "requisit": 18, "head": [18, 126, 729, 740, 999, 1020, 1031], "pane": [18, 19], "readi": [18, 20], "begin": [18, 894, 895, 905], "outlin": [18, 19, 20, 115, 118, 121, 122, 126, 129, 134], "green": [18, 19, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 1045, 1046], "dropdown": 18, "tab": [18, 135, 999], "master": [18, 19, 126], "vs": [18, 121], "view": [18, 19, 175, 193, 196, 729, 732, 736], "log": [18, 19, 38, 39, 83, 84, 122, 126, 129, 132, 135, 175, 207, 208, 368, 509, 512, 517, 520, 742, 789, 999], "built": [18, 121, 133, 175, 176, 177, 318, 1020, 1031, 1032, 1033], "bottom": 18, "box": 18, "patient": 18, "upto": 18, "15": [18, 38, 39, 101, 102, 119, 121, 368, 408, 411, 564, 567, 568, 569, 729, 732, 742, 754, 756, 780, 782, 799, 801, 830, 864, 867, 918, 920, 921, 922, 930, 933, 935, 936, 955, 956, 959], "minut": 18, "launch": 18, "12": [18, 83, 84, 99, 100, 101, 102, 119, 121, 126, 368, 408, 411, 428, 431, 440, 443, 564, 567, 578, 580, 582, 610, 628, 646, 691, 693, 696, 742, 754, 756, 780, 782, 799, 801, 830, 848, 851, 856, 859, 864, 867, 912, 913, 915, 916, 917, 918, 920, 921, 922, 930, 934, 935, 936, 955, 956, 959], "output": [18, 72, 73, 115, 116, 117, 118, 119, 121, 122, 125, 126, 128, 129, 132, 134, 136, 137, 149, 160, 161, 162, 163, 164, 165, 166, 169, 171, 175, 176, 177, 179, 182, 184, 185, 188, 190, 191, 193, 196, 198, 199, 202, 204, 205, 207, 208, 210, 213, 220, 221, 223, 226, 228, 232, 233, 237, 238, 240, 241, 245, 246, 252, 255, 262, 265, 318, 327, 328, 362, 363, 368, 369, 372, 374, 377, 378, 381, 382, 385, 387, 390, 391, 394, 396, 399, 400, 403, 404, 407, 408, 411, 412, 415, 416, 419, 420, 423, 424, 427, 428, 431, 432, 435, 436, 439, 440, 443, 444, 447, 449, 452, 453, 456, 457, 460, 461, 464, 465, 468, 469, 472, 473, 476, 477, 480, 481, 484, 485, 488, 489, 492, 493, 496, 501, 504, 505, 508, 509, 512, 513, 516, 517, 520, 521, 524, 525, 528, 529, 532, 533, 536, 537, 538, 539, 542, 544, 547, 548, 551, 552, 555, 556, 559, 560, 563, 564, 567, 568, 571, 573, 576, 578, 581, 583, 586, 587, 590, 591, 595, 596, 600, 601, 605, 606, 609, 610, 621, 622, 623, 625, 628, 629, 632, 633, 634, 636, 638, 639, 642, 650, 663, 666, 667, 691, 702, 724, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 746, 748, 750, 751, 753, 754, 756, 760, 762, 763, 765, 766, 769, 770, 772, 774, 776, 777, 779, 780, 782, 783, 785, 789, 790, 792, 793, 795, 796, 798, 799, 801, 802, 804, 805, 807, 808, 810, 811, 813, 814, 815, 818, 820, 823, 825, 828, 830, 831, 834, 836, 839, 840, 843, 844, 847, 848, 851, 852, 855, 856, 859, 860, 863, 864, 867, 870, 873, 874, 877, 878, 881, 882, 885, 886, 889, 894, 907, 912, 913, 916, 918, 919, 920, 921, 923, 924, 926, 929, 930, 934, 944, 945, 948, 950, 953, 955, 956, 959, 960, 963, 964, 967, 968, 971, 972, 975, 976, 979, 980, 983, 984, 987, 988, 989, 992, 994, 997, 999, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1028, 1029, 1030, 1031], "That": [18, 19, 121, 134, 135, 136, 368, 560, 563], "alreadi": [18, 19, 72, 73, 117, 123, 126, 134, 149, 318, 368, 432, 435, 465, 468, 539, 542, 564, 567, 606, 609, 742, 780, 782, 999], "refer": [18, 19, 117, 121, 122, 127, 149, 175, 190, 191, 368, 461, 464, 509, 512, 691, 693, 696, 698, 700, 742, 805, 807, 811, 813, 955, 976, 979, 984, 987, 988, 989, 992, 994, 997, 1020, 1030], "approach": [18, 19, 121, 122, 126, 134, 135, 149], "colour": 18, "applic": [18, 127, 128, 136, 729, 740, 741, 894, 900, 906], "good": [18, 19, 20, 21, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 132, 136], "chanc": 18, "vscode": 18, "show": [18, 19, 72, 73, 119, 121, 129, 148, 149, 999], "explor": [18, 133, 137, 148], "troubleshoot": 18, "sometim": [18, 19, 121], "ever": [18, 19, 20, 21, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129], "64": [18, 121, 135, 136, 368, 583, 586, 587, 590, 729, 735, 736, 742, 780, 782, 955, 956, 959, 999, 1020, 1031], "bit": [18, 119, 121, 122, 126, 134, 246, 280, 281, 284, 288, 291, 368, 412, 415, 416, 419, 424, 427, 955, 972, 975, 980, 983], "usr": 18, "more": [18, 19, 20, 24, 25, 115, 116, 117, 119, 121, 122, 123, 124, 125, 126, 129, 130, 131, 132, 133, 134, 135, 136, 137, 148, 149, 175, 176, 177, 246, 257, 260, 368, 461, 464, 742, 766, 769, 830, 848, 851, 935, 936, 937, 941, 943, 999], "nutshel": [18, 117], "hook": 18, "lint": 18, "accept": [18, 19, 27, 117, 118, 119, 121, 122, 125, 126, 128, 129, 134, 175, 176, 177, 179, 182, 184, 185, 188, 190, 191, 193, 196, 198, 199, 202, 204, 205, 207, 208, 210, 213, 220, 221, 223, 226, 228, 232, 233, 237, 238, 240, 241, 245, 246, 267, 270, 368, 369, 372, 382, 385, 387, 390, 391, 394, 408, 411, 428, 431, 432, 435, 440, 443, 465, 468, 525, 528, 529, 532, 537, 548, 551, 560, 563, 564, 567, 568, 571, 573, 576, 583, 586, 587, 590, 596, 600, 601, 605, 610, 638, 729, 732, 741, 742, 743, 746, 751, 753, 754, 756, 830, 844, 847, 848, 851, 864, 867, 912, 913, 916, 935, 936, 937, 941, 944, 945, 948, 955, 960, 963, 964, 967, 988, 989, 992, 999], "fix": [18, 19], "fail": [18, 20, 120, 121, 130, 132, 134], "attempt": [18, 130, 149], "succe": 18, "problemat": 18, "appli": [18, 19, 20, 22, 23, 24, 25, 27, 30, 31, 32, 33, 34, 35, 38, 39, 40, 41, 42, 43, 48, 49, 50, 51, 52, 53, 54, 55, 60, 61, 66, 67, 70, 71, 72, 73, 79, 80, 83, 84, 85, 86, 87, 88, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 105, 106, 111, 112, 117, 118, 119, 121, 122, 124, 126, 127, 128, 129, 132, 134, 135, 136, 137, 147, 149, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 179, 180, 185, 186, 193, 194, 199, 200, 215, 216, 223, 224, 228, 230, 233, 235, 241, 243, 246, 267, 268, 269, 271, 305, 308, 369, 370, 371, 373, 382, 383, 384, 386, 391, 392, 393, 395, 432, 433, 434, 465, 466, 467, 568, 569, 570, 572, 573, 574, 575, 577, 578, 579, 580, 582, 596, 597, 598, 599, 601, 602, 603, 604, 610, 611, 612, 613, 615, 632, 633, 634, 639, 640, 641, 643, 681, 682, 683, 684, 691, 693, 694, 695, 697, 711, 713, 715, 717, 729, 738, 740, 741, 742, 743, 744, 745, 747, 774, 776, 783, 785, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 835, 864, 865, 866, 868, 874, 877, 890, 891, 892, 894, 900, 903, 906, 907, 912, 913, 914, 915, 916, 917, 920, 922, 937, 938, 939, 940, 989, 990, 991, 993, 994, 995, 996, 998, 999, 1006, 1007, 1008, 1034, 1035], "proce": [18, 19, 20, 21, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129], "modifi": [18, 19, 118, 122, 127, 128, 130, 132], "properli": [18, 115], "enter": [18, 19, 117, 125, 127, 128, 318, 691, 728], "unsur": [18, 19, 20, 21, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129], "feel": [18, 19, 20, 21, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 131, 999], "server": [19, 999], "appropri": [19, 68, 69, 113, 114, 121, 124, 368, 382, 385, 539, 542, 930, 931], "context": [19, 119, 121, 126, 127, 128, 318, 610, 661, 729, 740, 1020, 1031], "suitabl": [19, 116, 126], "quick": [19, 115, 136], "alwai": [19, 20, 72, 73, 116, 117, 118, 121, 122, 123, 125, 126, 129, 130, 132, 134, 149, 246, 252, 255, 368, 382, 385, 539, 542, 610, 654, 691, 707, 709, 724], "correct": [19, 20, 64, 65, 109, 110, 115, 117, 122, 126, 127, 128, 130, 246, 313, 830, 831, 834, 955, 976, 977, 978, 979, 984, 985, 986, 987, 999], "tendenc": 19, "gener": [19, 20, 21, 41, 68, 69, 72, 73, 86, 113, 114, 115, 116, 117, 118, 119, 122, 125, 126, 127, 128, 129, 130, 131, 132, 134, 136, 137, 148, 149, 172, 175, 176, 177, 179, 182, 184, 185, 188, 190, 191, 193, 196, 198, 199, 202, 204, 205, 207, 208, 220, 221, 223, 226, 228, 232, 233, 237, 238, 240, 241, 245, 246, 267, 270, 368, 369, 372, 387, 390, 391, 394, 428, 431, 432, 435, 440, 443, 465, 468, 537, 548, 551, 560, 563, 573, 576, 583, 586, 587, 590, 611, 614, 616, 617, 618, 619, 620, 621, 622, 623, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 642, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 685, 686, 687, 688, 689, 690, 691, 707, 709, 742, 754, 756, 830, 844, 847, 864, 867, 918, 919, 920, 921, 924, 926, 928, 935, 936, 937, 941, 944, 945, 948, 955, 960, 963, 999, 1036, 1040], "land": 19, "end": [19, 126, 129, 131, 148, 149, 175, 176, 177, 368, 400, 403, 999, 1005], "world": 19, "come": [19, 20, 121, 136, 147, 999, 1005], "fly": 19, "hard": [19, 134], "receiv": [19, 121, 127, 128, 318, 327, 328, 610, 617, 660, 1020, 1030], "respons": [19, 21], "internship": 19, "comment": [19, 130], "trigger": 19, "unansw": 19, "label": [19, 132, 133, 137, 814, 815, 818, 820, 823, 825, 828], "respond": 19, "remov": [19, 20, 21, 72, 73, 118, 121, 122, 127, 129, 137, 742, 754, 756, 766, 769, 802, 804, 830, 870, 873, 890, 891, 892], "someon": [19, 149], "els": [19, 20, 116, 122, 123, 129, 132, 134, 136, 137, 149, 610, 620, 631, 635, 894, 904], "strive": [19, 121, 149], "repli": 19, "newli": [19, 121, 129, 172, 173, 246, 252, 255, 610, 621], "place": [19, 72, 73, 115, 116, 117, 118, 119, 121, 122, 126, 128, 130, 137, 175, 176, 177, 179, 182, 184, 185, 188, 190, 191, 193, 196, 198, 199, 202, 204, 205, 207, 208, 210, 213, 215, 218, 220, 221, 223, 226, 228, 232, 233, 237, 238, 240, 241, 245, 246, 267, 270, 318, 363, 368, 369, 372, 382, 385, 387, 390, 391, 394, 408, 411, 428, 431, 432, 435, 440, 443, 465, 468, 537, 548, 551, 564, 567, 568, 571, 573, 576, 583, 586, 587, 590, 596, 600, 601, 605, 610, 638, 652, 653, 654, 729, 732, 741, 742, 743, 746, 751, 753, 754, 756, 830, 844, 847, 848, 851, 864, 867, 912, 913, 916, 935, 936, 937, 941, 944, 945, 948, 955, 960, 963, 988, 989, 992, 1036, 1037, 1038, 1039, 1040, 1041], "bug": [19, 121], "serv": [19, 117, 121, 122, 125, 126, 131, 999], "suspect": 19, "behaviour": [19, 117, 118, 121, 125, 126, 129, 134], "observ": 19, "confid": 19, "noth": [19, 72, 73], "wrong": 19, "someth": [19, 116, 135, 136, 149], "bet": 19, "act": [19, 119, 149], "placehold": [19, 117, 125, 130, 894, 906], "sub": [19, 20, 72, 73, 115, 121, 126, 134, 135, 136, 318, 343, 344, 347, 348, 349, 350, 742, 754, 756, 830, 869, 890, 891, 892, 893, 999], "mark": [19, 121], "ii": [19, 955, 956, 959], "iii": 19, "titl": [19, 999], "issue_numb": 19, "delet": [19, 21], "No": [19, 132], "wait": [19, 72, 73, 74, 75, 76], "progress": [19, 126, 133, 137], "pr": 19, "soon": [19, 126, 147, 149, 999, 1005], "partial": [19, 72, 73, 1032, 1033], "solut": [19, 121, 126, 742, 790, 792], "review": [19, 116], "merg": 19, "everi": [19, 20, 21, 117, 119, 120, 121, 122, 123, 124, 126, 129, 132, 134, 136, 175, 198, 199, 202, 610, 611, 614], "shape": [19, 24, 25, 34, 35, 52, 53, 72, 73, 77, 78, 79, 80, 87, 88, 97, 98, 101, 102, 105, 106, 116, 117, 118, 119, 121, 127, 128, 129, 132, 134, 135, 136, 137, 160, 161, 162, 163, 164, 165, 166, 169, 171, 175, 176, 177, 179, 182, 184, 185, 188, 190, 191, 193, 196, 198, 199, 202, 204, 205, 207, 208, 210, 213, 220, 221, 222, 223, 226, 228, 232, 233, 237, 238, 239, 240, 241, 245, 246, 252, 255, 257, 260, 262, 263, 264, 265, 266, 318, 330, 358, 363, 368, 369, 372, 374, 377, 378, 381, 382, 385, 387, 390, 391, 394, 396, 399, 400, 403, 404, 407, 408, 411, 412, 415, 416, 419, 420, 423, 424, 427, 428, 431, 432, 435, 436, 439, 440, 443, 444, 447, 449, 452, 453, 456, 457, 460, 461, 464, 465, 468, 469, 472, 473, 476, 477, 480, 481, 484, 485, 488, 489, 492, 493, 496, 497, 500, 501, 504, 505, 508, 509, 512, 513, 516, 517, 520, 521, 524, 525, 528, 529, 532, 533, 536, 537, 538, 539, 542, 544, 547, 548, 551, 552, 555, 556, 559, 560, 563, 564, 567, 568, 571, 573, 576, 578, 581, 583, 586, 587, 590, 591, 595, 596, 600, 601, 605, 606, 609, 610, 622, 623, 625, 628, 632, 633, 634, 636, 639, 642, 647, 650, 663, 666, 667, 671, 675, 688, 691, 693, 695, 697, 724, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 740, 741, 742, 743, 746, 748, 750, 751, 753, 754, 756, 757, 759, 760, 762, 763, 765, 766, 769, 770, 772, 774, 776, 777, 779, 780, 782, 783, 785, 786, 788, 789, 790, 792, 793, 795, 796, 798, 799, 801, 802, 804, 805, 807, 808, 810, 811, 813, 814, 815, 818, 820, 823, 825, 828, 830, 831, 834, 836, 839, 840, 843, 844, 847, 848, 851, 852, 855, 856, 859, 860, 861, 862, 863, 864, 867, 869, 870, 873, 874, 877, 878, 881, 882, 885, 886, 889, 912, 913, 916, 918, 919, 920, 921, 922, 923, 924, 926, 927, 929, 930, 931, 933, 934, 938, 940, 944, 945, 948, 950, 953, 955, 956, 959, 988, 989, 992, 994, 997, 999, 1020, 1022, 1023, 1024, 1025, 1026, 1027, 1034, 1035], "move": [19, 72, 73, 116, 318, 363], "within": [19, 27, 30, 31, 121, 136, 149, 175, 176, 177, 918, 924, 926], "7": [19, 21, 24, 25, 38, 39, 50, 51, 52, 53, 74, 75, 83, 84, 95, 96, 99, 100, 101, 102, 119, 121, 122, 126, 129, 160, 162, 163, 318, 340, 368, 369, 372, 382, 383, 384, 385, 386, 391, 393, 408, 411, 412, 415, 428, 431, 432, 435, 440, 443, 457, 460, 465, 468, 477, 480, 497, 500, 537, 538, 564, 567, 568, 569, 570, 571, 573, 576, 578, 581, 583, 586, 596, 600, 601, 605, 610, 619, 628, 638, 691, 693, 696, 698, 700, 711, 713, 729, 735, 736, 741, 742, 748, 750, 751, 753, 754, 756, 780, 782, 799, 801, 814, 815, 816, 818, 819, 820, 823, 825, 826, 828, 829, 830, 831, 832, 834, 844, 847, 848, 851, 856, 859, 869, 878, 881, 912, 913, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 926, 930, 934, 935, 936, 955, 956, 959], "dai": 19, "close": [19, 118, 368, 461, 464, 564, 567, 742, 793, 795], "likewis": [19, 117, 118, 122, 126, 127, 135], "freed": 19, "flag": [19, 72, 73, 129, 134, 318, 337, 691, 707, 709], "purpos": [19, 21, 117, 119, 121, 122, 124, 125, 126, 131, 134, 368, 461, 464, 999], "remain": [19, 119, 149, 368, 382, 385, 539, 542, 560, 563, 830, 860, 863, 894, 900], "access": [19, 21, 72, 73, 127], "short": [19, 136, 729, 739], "basi": [19, 120, 135], "situat": [19, 137], "alloc": [19, 149, 175, 228, 232, 233, 237, 246, 252, 255, 318], "upon": [19, 119, 121, 129, 149], "period": 19, "prevent": [19, 129, 130, 134, 691, 693, 696, 698, 700, 711, 713, 955, 980, 983, 1036, 1037, 1038], "unabl": 19, "obvious": 19, "never": [19, 121, 126], "reflect": [19, 125], "qualiti": 19, "hypothet": 19, "frustrat": 19, "delai": 19, "busi": 19, "fine": [19, 134, 137], "becaus": [19, 117, 118, 121, 122, 123, 125, 127, 128, 129, 132, 136, 137, 149], "inact": 19, "limit": [19, 72, 73, 74, 75, 76, 119, 121, 130, 132, 135, 137, 149, 246, 281, 284, 288, 291, 610, 622, 623, 625, 830, 831, 834], "me": 19, "unfairli": 19, "definit": [19, 122, 127, 134, 742, 743, 746, 748, 750], "investig": 19, "Then": [19, 21, 134, 149], "practic": 19, "separ": [19, 121, 125, 130, 132, 134, 135], "branch": [19, 126, 149, 172, 173, 368, 400, 403], "simpli": [19, 22, 23, 24, 25, 32, 33, 34, 35, 38, 39, 40, 41, 42, 43, 48, 49, 50, 51, 52, 53, 54, 55, 60, 61, 66, 67, 70, 71, 72, 73, 79, 80, 83, 84, 85, 86, 87, 88, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 105, 106, 111, 112, 117, 118, 119, 121, 122, 125, 126, 128, 129, 132, 136, 137, 166, 167, 168, 170, 179, 180, 185, 186, 193, 194, 199, 200, 215, 216, 223, 224, 228, 230, 233, 235, 241, 243, 267, 268, 269, 271, 368, 369, 370, 371, 373, 382, 383, 384, 386, 391, 392, 393, 395, 432, 433, 434, 461, 464, 465, 466, 467, 568, 569, 570, 572, 573, 574, 575, 577, 578, 579, 580, 582, 596, 597, 598, 599, 601, 602, 603, 604, 611, 612, 613, 615, 639, 640, 641, 643, 681, 682, 683, 684, 693, 694, 695, 697, 743, 744, 745, 747, 815, 816, 817, 819, 820, 821, 822, 824, 825, 826, 827, 829, 831, 832, 833, 835, 864, 865, 866, 868, 913, 914, 915, 917, 920, 922, 937, 938, 939, 940, 989, 990, 991, 993, 994, 995, 996, 998], "role": [19, 133], "kept": [19, 72, 73, 74, 75, 76, 129, 890, 891, 892], "date": 19, "upstream": [19, 120], "complic": [19, 132], "root": [19, 21, 135, 368, 583, 586, 918, 919, 923], "merge_with_upstream": 19, "sh": 19, "name_of_your_branch": 19, "resolv": [19, 955, 972, 975, 980, 983], "clone": [19, 21, 72, 73, 318, 339, 340, 341, 342], "push": [19, 120, 130], "both": [19, 117, 118, 119, 121, 122, 126, 128, 129, 132, 134, 135, 136, 137, 148, 149, 175, 176, 177, 179, 182, 184, 185, 188, 190, 191, 193, 196, 198, 199, 202, 204, 205, 207, 208, 210, 213, 220, 221, 223, 226, 228, 232, 233, 237, 238, 240, 241, 245, 246, 267, 270, 304, 368, 369, 372, 382, 385, 387, 390, 391, 394, 432, 435, 465, 468, 537, 548, 551, 556, 559, 568, 571, 573, 576, 583, 586, 587, 590, 596, 600, 610, 638, 691, 693, 696, 729, 732, 741, 742, 743, 746, 748, 750, 754, 756, 766, 769, 805, 807, 830, 864, 867, 912, 913, 916, 935, 937, 941, 955, 960, 963, 988, 989, 992], "abort": 19, "tediou": 19, "resolut": 19, "stash": 19, "reinstat": 19, "correspond": [19, 72, 73, 74, 75, 117, 118, 119, 120, 121, 122, 125, 126, 127, 246, 257, 260, 368, 400, 403, 556, 559, 742, 748, 750, 757, 759, 790, 792, 830, 836, 839, 864, 867, 918, 919, 930, 931, 932, 935, 936, 937, 941, 943, 955, 972, 975, 976, 979, 980, 983, 984, 987], "fetch": 19, "uncommit": 19, "unstag": 19, "untrack": 19, "comprehens": 19, "explan": [19, 117, 118, 126, 134], "atlassian": 19, "tutori": 19, "wrote": 19, "piec": [19, 122, 124, 125, 132], "inform": [19, 121, 130, 246, 281, 284, 288, 291, 610, 616, 691, 724], "tag": 19, "usu": 19, "describ": [19, 121, 133, 137, 955, 956, 959, 972, 975, 976, 979, 980, 983], "navig": [19, 115], "blame": 19, "revis": 19, "author": [19, 999], "eg": [19, 121], "16": [19, 48, 49, 83, 84, 101, 102, 119, 121, 135, 368, 596, 597, 599, 600, 729, 735, 742, 743, 744, 746, 754, 756, 780, 782, 920, 922, 930, 934, 955, 956, 959], "5": [19, 21, 24, 25, 38, 39, 40, 41, 48, 49, 52, 53, 54, 55, 74, 75, 79, 80, 83, 84, 85, 86, 87, 88, 97, 98, 99, 100, 101, 102, 117, 119, 121, 123, 134, 135, 136, 160, 162, 163, 165, 175, 199, 202, 210, 213, 223, 226, 238, 240, 241, 245, 246, 267, 269, 270, 271, 318, 340, 356, 368, 369, 371, 372, 373, 382, 383, 384, 385, 386, 387, 390, 391, 393, 394, 395, 404, 407, 408, 411, 424, 427, 428, 431, 432, 433, 434, 435, 440, 443, 465, 466, 467, 468, 477, 480, 497, 500, 537, 538, 544, 547, 548, 551, 564, 567, 568, 569, 570, 571, 573, 575, 576, 577, 583, 586, 587, 590, 596, 597, 599, 600, 601, 602, 604, 605, 610, 611, 612, 619, 628, 638, 639, 642, 643, 675, 680, 691, 693, 695, 696, 697, 729, 732, 734, 735, 741, 742, 743, 744, 746, 748, 750, 751, 753, 754, 756, 763, 765, 780, 782, 799, 801, 802, 804, 814, 825, 828, 830, 831, 832, 833, 834, 835, 836, 839, 844, 847, 848, 851, 856, 859, 860, 863, 864, 866, 867, 868, 869, 878, 881, 894, 897, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 929, 930, 932, 933, 934, 935, 936, 937, 941, 944, 945, 948, 955, 956, 959, 960, 963, 988, 989, 992, 1020, 1031], "past": 19, "l": [19, 115, 742, 743, 746, 757, 759, 766, 769, 802, 804], "filepath": [19, 72, 73], "grep": 19, "v": [19, 132, 135, 136, 137, 729, 741, 999, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1040, 1042, 1043], "commit_id": 19, "handi": [19, 121], "histori": 19, "toggl": 19, "vertic": 19, "highlight": [19, 119], "previou": [19, 117, 121, 137, 149, 610, 688, 691, 698, 700, 711, 713], "shown": [19, 68, 69, 72, 73, 113, 114, 117, 119, 121, 130, 132, 134, 149, 368, 408, 411, 428, 431, 440, 443, 564, 567, 601, 605, 742, 751, 753, 830, 844, 847, 848, 851, 935, 936, 944, 945, 948], "whenev": [19, 121, 134, 135], "think": [19, 119], "interact": [19, 121, 999], "gain": [19, 131, 136, 1011], "quit": [19, 20, 118, 121, 122, 124, 125], "repeat": [19, 52, 53, 72, 73, 97, 98, 118, 119, 121, 123, 125, 126, 130, 610, 634, 830, 882, 885], "yourself": [19, 20, 121, 148], "simpler": [19, 134], "cannot": [19, 123, 127, 137], "least": [19, 119, 121, 122, 125, 742, 766, 769], "final": [19, 118, 119, 122, 125, 127, 129, 130, 132, 134, 135, 175, 204, 205, 207, 208, 610, 637, 1020, 1031], "tickbox": 19, "lower": [19, 72, 73, 119, 121, 132, 149, 175, 190, 191, 228, 232, 368, 537, 742, 743, 746, 918, 924, 926], "corner": 19, "without": [19, 72, 73, 116, 117, 122, 125, 126, 128, 130, 132, 134, 135, 136, 148, 149, 610, 665, 670, 830, 860, 863, 894, 896, 935, 936, 937, 941, 943], "span": 19, "intent": [19, 129], "larg": [19, 135, 368, 382, 385, 539, 542], "discourag": 19, "philosophi": 19, "increment": [19, 610, 653], "frequent": [19, 20], "valuabl": 19, "infrequ": 19, "earli": [19, 999], "wast": 19, "spot": [19, 122], "mistak": [19, 130], "propos": 19, "mountain": 19, "around": [19, 72, 73, 74, 75, 76, 117, 122, 125, 134, 149], "advoc": [19, 149], "individu": [19, 20, 122], "per": [19, 121, 135, 318, 729, 730, 731, 732, 733, 734, 735, 736, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027], "style": [19, 930, 933], "ve": [19, 131, 134, 918, 919, 999], "were": [19, 72, 73, 116, 121, 126, 130], "actual": [19, 115, 122, 129, 131, 134, 136, 149], "aim": [19, 131], "part": [19, 116, 120, 121, 122, 132, 133, 137, 148, 149, 175, 228, 232, 233, 237, 691, 698, 700, 703, 705, 711, 713, 715, 717, 719, 721, 1032, 1033], "subsect": 19, "session": [19, 999], "block": [19, 121, 122, 130, 131, 133, 137, 149, 318, 691, 728, 999], "smaller": [19, 132, 137, 830, 831, 834, 864, 867, 955, 972, 975, 980, 983], "edit": 19, "exact": [19, 72, 73, 132, 935, 936], "beauti": 19, "particularli": [19, 135, 149], "concern": [19, 115, 119, 126, 129, 131], "effici": [19, 117, 121, 122, 126, 129, 130, 132, 135, 149], "difficult": [19, 121, 149, 935, 936, 937, 941, 943], "undo": 19, "stress": 19, "frequenc": [19, 610, 637], "pycharm": 19, "pytest": [19, 121], "button": 19, "declar": 19, "insid": [19, 21, 116, 121, 127], "exec": 19, "rm": 19, "rf": 19, "cp": 19, "ivy_contain": 19, "bash": [19, 21], "test_ivi": [19, 121], "test_funct": [19, 121], "test_cor": 19, "test_imag": 19, "test_random_crop": 19, "header": 19, "summari": [19, 72, 73, 79, 80, 121, 246, 273, 274, 275, 310, 311, 312, 318, 331, 332, 610, 626, 630, 648, 691, 723], "q": [19, 149, 729, 741, 742, 757, 759, 786, 788], "array_api_test": 19, "test_creation_funct": 19, "test_arang": 19, "window": [19, 21, 729, 730, 731, 732, 733, 734, 735, 736, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027], "variou": [19, 117, 118, 124, 148], "valu": [19, 24, 25, 52, 53, 60, 61, 72, 73, 74, 75, 76, 97, 98, 117, 119, 121, 122, 126, 127, 128, 129, 130, 132, 134, 137, 149, 175, 176, 177, 190, 191, 198, 199, 202, 204, 205, 207, 208, 246, 252, 255, 273, 274, 275, 318, 330, 361, 362, 368, 369, 372, 374, 377, 382, 385, 387, 390, 396, 399, 432, 435, 449, 452, 453, 456, 465, 468, 469, 472, 473, 476, 477, 480, 493, 496, 497, 500, 537, 538, 539, 542, 548, 551, 552, 555, 556, 559, 564, 567, 601, 605, 606, 609, 610, 622, 623, 625, 626, 631, 637, 638, 639, 642, 648, 651, 655, 665, 666, 667, 668, 669, 670, 690, 691, 693, 696, 698, 700, 702, 711, 713, 724, 728, 729, 730, 731, 732, 733, 734, 735, 736, 739, 740, 741, 742, 774, 776, 783, 785, 786, 788, 789, 790, 792, 793, 795, 796, 798, 808, 810, 830, 831, 834, 840, 841, 842, 843, 856, 859, 860, 863, 886, 888, 889, 890, 891, 892, 894, 898, 899, 900, 901, 902, 907, 910, 911, 912, 913, 916, 918, 919, 920, 921, 923, 924, 926, 928, 930, 931, 932, 934, 935, 936, 937, 939, 941, 942, 943, 944, 945, 948, 950, 953, 955, 960, 963, 964, 967, 968, 971, 972, 975, 976, 979, 980, 983, 984, 987, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1040], "cpu": [19, 72, 73, 128, 149, 175, 204, 205, 207, 208, 318, 337, 338, 340, 354, 357, 359, 363, 364, 366, 367, 610, 638, 639, 642, 663, 666, 667, 918, 919, 920, 921, 923, 924, 926, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1040, 1042, 1043], "gpu": [19, 101, 102, 128, 134, 149, 318, 337, 340, 353, 355, 359, 361, 366, 920, 922], "combin": [19, 72, 73, 74, 75, 76, 119, 121, 122, 125, 126, 137, 742, 748, 750], "wherebi": [20, 126, 894, 906], "broad": 20, "distribut": [20, 72, 73, 121, 128, 149, 318, 339, 343, 344, 345, 346, 729, 737, 814, 815, 818, 820, 823, 825, 828, 918, 919, 920, 921, 923, 924, 926, 1020, 1028, 1032, 1033], "across": [20, 72, 73, 117, 119, 121, 122, 126, 127, 318, 327, 328, 339, 340, 342, 343, 344, 345, 346, 350, 360, 361, 610, 618, 619, 894, 900, 930, 932], "todo": 20, "commit": [20, 121], "NOT": [20, 368, 525, 528], "static": [20, 70, 71, 72, 73, 77, 78, 79, 80, 83, 84, 85, 86, 87, 88, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 105, 106, 107, 108, 111, 112, 113, 114, 118, 119, 122, 149, 166, 170, 172, 173, 267, 271, 369, 373, 382, 386, 391, 395, 568, 572, 573, 577, 596, 597, 601, 602, 611, 615, 639, 643, 681, 682, 743, 747, 815, 819, 820, 824, 825, 829, 831, 835, 864, 868, 913, 917, 920, 922, 937, 938, 989, 993, 994, 998], "method": [20, 22, 23, 24, 25, 32, 33, 34, 35, 38, 39, 40, 41, 42, 43, 48, 49, 50, 51, 52, 53, 54, 55, 60, 61, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 79, 80, 83, 84, 85, 86, 87, 88, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 105, 106, 111, 112, 113, 114, 116, 117, 118, 119, 121, 122, 125, 130, 132, 133, 136, 137, 149, 160, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 175, 179, 180, 185, 186, 193, 194, 196, 199, 200, 215, 216, 223, 224, 228, 230, 233, 235, 241, 243, 267, 268, 269, 271, 368, 369, 370, 371, 373, 382, 383, 384, 386, 387, 390, 391, 392, 393, 395, 408, 411, 428, 431, 432, 433, 434, 435, 440, 443, 465, 466, 467, 468, 477, 480, 497, 500, 538, 544, 547, 548, 551, 564, 567, 568, 569, 570, 572, 573, 574, 575, 576, 577, 578, 579, 580, 582, 583, 586, 587, 590, 596, 597, 598, 599, 601, 602, 603, 604, 605, 610, 611, 612, 613, 615, 626, 627, 638, 639, 640, 641, 643, 666, 667, 680, 681, 682, 683, 684, 685, 686, 691, 693, 694, 695, 697, 711, 713, 715, 717, 728, 729, 735, 741, 742, 743, 744, 745, 747, 748, 750, 751, 753, 814, 815, 816, 817, 818, 819, 820, 821, 822, 824, 825, 826, 827, 829, 830, 831, 832, 833, 835, 844, 847, 848, 851, 856, 859, 864, 865, 866, 868, 869, 878, 881, 894, 895, 905, 906, 907, 913, 914, 915, 917, 918, 920, 922, 923, 924, 926, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 944, 945, 948, 955, 956, 959, 960, 963, 988, 989, 990, 991, 992, 993, 994, 995, 996, 998, 999, 1020, 1031, 1032, 1033], "instanc": [20, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 38, 39, 40, 41, 42, 43, 48, 49, 50, 51, 52, 53, 54, 55, 60, 61, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 79, 80, 83, 84, 85, 86, 87, 88, 93, 94, 95, 96, 97, 98, 99, 100, 105, 106, 111, 112, 113, 114, 117, 118, 119, 121, 122, 125, 127, 129, 135, 136, 137, 150, 158, 160, 162, 163, 164, 165, 166, 167, 168, 169, 171, 175, 176, 177, 179, 180, 182, 184, 185, 186, 188, 190, 191, 193, 194, 196, 198, 199, 200, 202, 204, 205, 207, 208, 210, 213, 215, 216, 220, 221, 223, 224, 226, 228, 230, 232, 233, 235, 237, 238, 240, 241, 243, 245, 246, 267, 268, 269, 270, 318, 327, 359, 368, 369, 370, 371, 372, 382, 383, 384, 385, 387, 390, 391, 392, 393, 394, 408, 411, 428, 431, 432, 433, 434, 435, 440, 443, 465, 466, 467, 468, 477, 480, 497, 500, 537, 538, 544, 547, 548, 551, 564, 567, 568, 569, 570, 571, 573, 574, 575, 576, 578, 579, 580, 582, 583, 586, 587, 590, 596, 598, 599, 600, 601, 603, 604, 605, 610, 611, 612, 613, 627, 638, 639, 640, 641, 654, 671, 680, 681, 683, 684, 685, 686, 693, 694, 695, 697, 729, 732, 735, 741, 742, 743, 744, 745, 746, 748, 750, 751, 753, 754, 756, 814, 815, 816, 817, 818, 820, 821, 822, 825, 826, 827, 830, 831, 832, 833, 844, 847, 848, 851, 856, 859, 864, 865, 866, 867, 869, 878, 881, 912, 913, 914, 915, 916, 918, 923, 924, 926, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 944, 945, 948, 955, 956, 959, 960, 963, 988, 989, 990, 991, 992, 994, 995, 996, 1009, 1010], "revers": [20, 24, 25, 74, 75, 118, 119, 137, 149, 610, 631, 830, 848, 851], "resourc": 20, "content": [20, 21, 72, 73, 129, 132, 135], "thei": [20, 72, 73, 115, 116, 119, 121, 122, 124, 126, 127, 128, 129, 130, 134, 135, 136, 137, 149, 246, 304, 890, 891, 892, 918, 919, 999, 1042, 1043], "hypothesi": 20, "cover": [20, 118, 119, 121, 122, 124, 131], "lambda": [20, 132, 135, 1036, 1039, 1041], "direct": [20, 136, 137, 148, 944, 950, 953], "bind": [20, 126], "special": [20, 24, 25, 74, 75, 116, 117, 118, 119, 125, 368, 369, 372, 374, 377, 378, 381, 382, 385, 387, 390, 391, 394, 396, 399, 400, 403, 428, 431, 432, 435, 436, 439, 440, 443, 457, 460, 461, 464, 465, 468, 501, 504, 505, 508, 513, 516, 517, 520, 539, 542, 556, 559, 560, 563, 564, 567, 568, 571, 573, 576, 578, 581, 583, 586, 596, 600, 601, 605, 606, 609, 955, 960, 963, 964, 967, 968, 971, 976, 979, 980, 983, 984, 987], "aforement": 20, "categori": [20, 116, 125, 126, 127, 131, 999], "parent": [20, 134, 691, 728], "arraywithelementwis": [20, 24, 25, 38, 125], "containerwithmanipul": [20, 74, 75, 97], "hint": [20, 116, 117, 118, 122, 125, 129, 130, 175, 176, 177, 179, 182, 184, 185, 188, 190, 191, 193, 196, 198, 199, 202, 204, 205, 207, 208, 210, 213, 220, 221, 223, 226, 228, 232, 233, 237, 238, 240, 241, 245, 246, 267, 270, 368, 369, 372, 382, 385, 387, 390, 391, 394, 408, 411, 428, 431, 432, 435, 440, 443, 465, 468, 537, 548, 551, 564, 567, 568, 571, 573, 576, 583, 586, 587, 590, 596, 600, 601, 605, 610, 638, 729, 732, 741, 742, 743, 746, 751, 753, 754, 756, 830, 844, 847, 848, 851, 864, 867, 912, 913, 916, 935, 936, 937, 941, 944, 945, 948, 955, 960, 963, 988, 989, 992], "its": [20, 21, 118, 121, 130, 246, 257, 260, 318, 362, 742, 766, 769, 830, 844, 847, 860, 863, 864, 867, 878, 881], "docstr": [20, 21, 22, 23, 24, 25, 32, 33, 34, 35, 38, 39, 40, 41, 42, 43, 48, 49, 50, 51, 52, 53, 54, 55, 60, 61, 66, 67, 70, 71, 79, 80, 83, 84, 85, 86, 87, 88, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 105, 106, 111, 112, 115, 116, 117, 122, 126, 130, 166, 167, 168, 170, 175, 176, 177, 179, 180, 182, 184, 185, 186, 188, 190, 191, 193, 194, 196, 198, 199, 200, 202, 204, 205, 210, 213, 215, 216, 220, 221, 223, 224, 226, 228, 230, 232, 233, 235, 237, 238, 240, 241, 243, 245, 246, 267, 268, 269, 270, 271, 368, 369, 370, 371, 372, 373, 382, 383, 384, 385, 386, 387, 390, 391, 392, 393, 394, 395, 408, 411, 428, 431, 432, 433, 434, 435, 440, 443, 465, 466, 467, 468, 497, 500, 537, 548, 551, 564, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 582, 583, 586, 587, 590, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 611, 612, 613, 615, 639, 640, 641, 643, 681, 682, 683, 684, 693, 694, 695, 697, 742, 743, 744, 745, 747, 751, 753, 754, 756, 815, 816, 817, 819, 820, 821, 822, 824, 825, 826, 827, 829, 830, 831, 832, 833, 835, 844, 847, 848, 851, 864, 865, 866, 867, 868, 913, 914, 915, 917, 920, 922, 935, 936, 937, 938, 939, 940, 941, 944, 945, 948, 955, 960, 963, 988, 989, 990, 991, 992, 993, 994, 995, 996, 998], "thorough": [20, 117, 118, 121], "transpil": [20, 131, 133, 999, 1005], "builder": [21, 147, 149, 999], "maco": 21, "ubuntu": 21, "uid": 21, "make_docs_without_dock": 21, "rel": [21, 691, 698, 700, 703, 705, 711, 713, 715, 717, 719, 721, 742, 754, 756, 774, 776, 783, 785, 802, 804, 830, 848, 851, 864, 867, 944, 945, 948, 950, 953, 999], "synchron": 21, "rest": [21, 133, 137], "remove_doc": 21, "_": [21, 118, 121, 126, 129, 134, 135, 175, 176, 177, 179, 182, 184, 185, 188, 190, 191, 193, 196, 198, 199, 202, 204, 205, 220, 221, 223, 226, 228, 232, 233, 237, 238, 240, 241, 245, 246, 267, 270, 368, 369, 372, 387, 390, 391, 394, 428, 431, 432, 435, 440, 443, 465, 468, 537, 548, 551, 573, 576, 583, 586, 587, 590, 691, 693, 696, 698, 700, 742, 754, 756, 811, 813, 830, 844, 847, 864, 867, 935, 936, 944, 945, 948, 955, 960, 963], "indic": [21, 40, 41, 72, 73, 85, 86, 130, 133, 137, 160, 165, 368, 568, 571, 610, 638, 639, 640, 641, 642, 643, 650, 663, 666, 667, 729, 730, 731, 732, 733, 734, 735, 736, 742, 808, 810, 830, 864, 867, 894, 895, 897, 899, 901, 902, 903, 905, 908, 909, 910, 911, 912, 913, 916, 918, 919, 930, 931, 932, 933, 935, 936, 942, 944, 945, 948, 950, 953, 999, 1002, 1004, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1032, 1033], "privat": [21, 121, 1036, 1040], "fulfil": [21, 131, 999], "autogenerated_sourc": 21, "format": [21, 72, 73, 115, 118, 127, 128, 132, 134, 135, 246, 276, 279, 318, 338, 955, 956, 959, 999], "png": [21, 135], "_imag": 21, "lastli": 21, "structur": [21, 72, 73, 74, 75, 76, 116, 122, 125, 126, 135, 136, 610, 626, 894, 907], "rst": 21, "skip": [21, 72, 73, 121, 894, 907], "read": [21, 72, 73, 999], "partial_sourc": 21, "conf": 21, "copi": [21, 32, 33, 34, 35, 72, 73, 77, 78, 79, 80, 118, 123, 127, 132, 134, 135, 148, 149, 175, 179, 180, 181, 182, 183, 193, 196, 246, 252, 253, 254, 255, 256, 318, 363, 610, 627, 681, 685, 686, 830, 860, 863, 894, 896, 944, 950, 953], "create_rst_fil": 21, "filter": [21, 121, 729, 730, 731, 732, 733, 734, 735, 736, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027], "repres": [21, 121, 134, 175, 210, 213, 246, 280, 368, 378, 381, 382, 385, 391, 394, 404, 407, 440, 443, 539, 542, 578, 581, 601, 605, 691, 728, 729, 738, 742, 789, 790, 792], "overal": [21, 118, 126, 127, 128, 137], "markup": 21, "6": [21, 24, 25, 38, 39, 42, 43, 52, 53, 74, 75, 83, 84, 85, 86, 95, 96, 99, 100, 101, 102, 119, 121, 123, 126, 134, 135, 136, 160, 162, 163, 165, 175, 199, 202, 318, 340, 356, 368, 369, 370, 371, 372, 373, 382, 383, 384, 385, 386, 387, 390, 391, 394, 408, 411, 412, 415, 428, 431, 432, 433, 434, 435, 440, 443, 465, 468, 477, 480, 497, 500, 537, 538, 544, 547, 564, 567, 568, 569, 570, 571, 572, 573, 575, 576, 577, 583, 586, 587, 590, 596, 600, 601, 605, 610, 619, 628, 638, 639, 642, 643, 675, 680, 691, 693, 694, 696, 729, 732, 735, 736, 741, 742, 748, 750, 751, 753, 754, 756, 780, 782, 793, 795, 799, 801, 814, 815, 817, 818, 819, 820, 822, 824, 825, 827, 828, 829, 830, 831, 832, 834, 836, 839, 844, 847, 848, 851, 856, 859, 860, 863, 864, 867, 869, 878, 881, 912, 913, 915, 916, 917, 918, 919, 920, 921, 922, 930, 931, 934, 935, 936, 937, 941, 955, 956, 959, 960, 963], "extract": [21, 116], "get_functions_and_class": 21, "doctr": 21, "readm": [21, 149], "module_nam": 21, "copy_readme_to_rst": 21, "tabl": 21, "toc": 21, "tree": 21, "append": [21, 72, 73, 121, 132, 135, 368, 416, 419, 742, 754, 756, 766, 769], "append_toctree_to_rst": 21, "9": [21, 24, 25, 38, 39, 42, 43, 52, 53, 74, 75, 83, 84, 87, 88, 101, 102, 119, 121, 135, 136, 368, 382, 383, 384, 385, 386, 391, 394, 408, 411, 412, 415, 537, 538, 564, 567, 568, 571, 583, 586, 587, 590, 610, 638, 691, 693, 694, 695, 696, 697, 698, 699, 700, 701, 711, 712, 713, 714, 729, 732, 735, 736, 742, 748, 750, 751, 753, 754, 756, 780, 782, 793, 795, 799, 801, 830, 831, 832, 834, 848, 851, 856, 859, 864, 867, 869, 918, 919, 920, 921, 922, 930, 934, 935, 936, 955, 956, 959, 1036, 1037, 1038], "index": [21, 32, 33, 72, 73, 77, 78, 122, 126, 134, 174, 175, 190, 191, 210, 211, 212, 213, 214, 318, 359, 610, 616, 638, 639, 642, 830, 874, 877, 894, 897, 898, 901, 902, 903, 908, 910, 930, 931, 932, 933, 935, 936, 937, 941, 944, 945, 948, 1002, 1004], "create_index_rst": 21, "14": [21, 83, 84, 99, 100, 101, 102, 119, 121, 126, 368, 391, 394, 428, 431, 568, 572, 578, 580, 582, 691, 693, 696, 729, 741, 742, 754, 756, 780, 782, 913, 915, 917, 920, 922, 935, 936, 955, 956, 959], "\u03c0": [21, 368, 374, 377, 387, 390, 396, 399, 400, 403], "namespac": [21, 116, 127, 132, 137], "arraywithactiv": [22, 24, 25], "abc": [22, 23, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 72, 73, 134, 318, 327, 333, 610, 635, 1032, 1033, 1036, 1040], "softplu": [22, 23, 70, 71, 160, 170, 999], "variant": [22, 23, 24, 25, 32, 33, 34, 35, 38, 39, 40, 41, 42, 43, 48, 49, 50, 51, 52, 53, 54, 55, 60, 61, 66, 67, 70, 71, 79, 80, 83, 84, 85, 86, 87, 88, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 105, 106, 111, 112, 118, 119, 166, 167, 168, 170, 179, 180, 185, 186, 193, 194, 199, 200, 215, 216, 223, 224, 228, 230, 233, 235, 241, 243, 267, 268, 269, 271, 369, 370, 371, 373, 382, 383, 384, 386, 391, 392, 393, 395, 432, 433, 434, 465, 466, 467, 568, 569, 570, 572, 573, 574, 575, 577, 578, 579, 580, 582, 596, 597, 598, 599, 601, 602, 603, 604, 611, 612, 613, 615, 639, 640, 641, 643, 681, 682, 683, 684, 693, 694, 695, 697, 743, 744, 745, 747, 815, 816, 817, 819, 820, 821, 822, 824, 825, 826, 827, 829, 831, 832, 833, 835, 864, 865, 866, 868, 913, 914, 915, 917, 920, 922, 937, 938, 939, 940, 989, 990, 991, 993, 994, 995, 996, 998], "wrap": [22, 23, 24, 25, 27, 32, 33, 34, 35, 38, 39, 40, 41, 42, 43, 48, 49, 50, 51, 52, 53, 54, 55, 60, 61, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 79, 80, 83, 84, 85, 86, 87, 88, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 105, 106, 111, 112, 114, 115, 117, 118, 121, 122, 123, 125, 126, 127, 128, 129, 132, 134, 137, 149, 150, 158, 166, 167, 168, 170, 179, 180, 185, 186, 193, 194, 199, 200, 215, 216, 223, 224, 228, 230, 233, 235, 241, 243, 267, 268, 269, 271, 369, 370, 371, 373, 382, 383, 384, 386, 391, 392, 393, 395, 432, 433, 434, 465, 466, 467, 568, 569, 570, 572, 573, 574, 575, 577, 578, 579, 580, 582, 596, 597, 598, 599, 601, 602, 603, 604, 610, 611, 612, 613, 615, 621, 639, 640, 641, 643, 681, 682, 683, 684, 691, 693, 694, 695, 697, 727, 743, 744, 745, 747, 815, 816, 817, 819, 820, 821, 822, 824, 825, 826, 827, 829, 831, 832, 833, 835, 864, 865, 866, 868, 913, 914, 915, 917, 920, 922, 937, 938, 939, 940, 989, 990, 991, 993, 994, 995, 996, 998], "minim": [22, 23, 24, 25, 32, 33, 34, 35, 38, 39, 40, 41, 42, 43, 48, 49, 50, 51, 52, 53, 54, 55, 60, 61, 66, 67, 70, 71, 79, 80, 83, 84, 85, 86, 87, 88, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 105, 106, 111, 112, 118, 129, 132, 166, 167, 168, 170, 179, 180, 185, 186, 193, 194, 199, 200, 215, 216, 223, 224, 228, 230, 233, 235, 241, 243, 267, 268, 269, 271, 369, 370, 371, 373, 382, 383, 384, 386, 391, 392, 393, 395, 432, 433, 434, 465, 466, 467, 568, 569, 570, 572, 573, 574, 575, 577, 578, 579, 580, 582, 596, 597, 598, 599, 601, 602, 603, 604, 611, 612, 613, 615, 639, 640, 641, 643, 681, 682, 683, 684, 693, 694, 695, 697, 743, 744, 745, 747, 815, 816, 817, 819, 820, 821, 822, 824, 825, 826, 827, 829, 831, 832, 833, 835, 864, 865, 866, 868, 913, 914, 915, 917, 920, 922, 937, 938, 939, 940, 989, 990, 991, 993, 994, 995, 996, 998], "arraywithcr": [24, 25, 32], "arraywithdatatyp": [24, 25, 34], "arraywithdevic": [24, 25, 36, 134], "arraywithgener": [24, 25, 40, 134], "arraywithgradi": [24, 25, 42, 134], "arraywithimag": [24, 25, 44, 134], "arraywithlay": [24, 25, 46], "arraywithlinearalgebra": [24, 25, 48], "arraywithloss": [24, 25, 50], "arraywithmanipul": [24, 25, 52], "arraywithnorm": [24, 25, 54], "arraywithrandom": [24, 25, 56, 134], "arraywithsearch": [24, 25, 58], "arraywithset": [24, 25, 60], "arraywithsort": [24, 25, 62], "arraywithstatist": [24, 25, 64], "arraywithutil": [24, 25, 66], "properti": [24, 25, 72, 73, 119, 121, 122, 126, 134, 135, 136, 318, 330, 1032, 1033, 1036, 1037, 1038, 1039, 1041], "__add__": [24, 25, 74, 75, 117, 118, 119, 125, 126, 134], "y": [24, 25, 38, 39, 40, 41, 48, 49, 50, 51, 52, 53, 60, 61, 66, 67, 74, 75, 83, 84, 85, 86, 93, 94, 95, 96, 97, 98, 101, 102, 105, 106, 111, 112, 116, 119, 123, 126, 132, 134, 160, 162, 163, 164, 165, 166, 169, 171, 175, 198, 199, 202, 210, 213, 220, 221, 223, 226, 241, 245, 246, 252, 255, 318, 338, 352, 356, 361, 368, 369, 370, 371, 372, 373, 382, 383, 384, 385, 386, 387, 390, 391, 392, 393, 394, 395, 400, 403, 408, 411, 412, 415, 424, 427, 428, 431, 432, 433, 434, 435, 436, 439, 440, 443, 457, 460, 465, 466, 467, 468, 477, 480, 497, 500, 537, 538, 544, 547, 548, 551, 564, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 586, 587, 590, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 610, 611, 612, 613, 614, 615, 618, 619, 627, 628, 635, 636, 638, 639, 640, 641, 642, 643, 673, 680, 681, 682, 683, 684, 685, 686, 691, 702, 729, 735, 736, 738, 742, 743, 744, 745, 746, 747, 748, 750, 751, 753, 763, 765, 780, 782, 799, 801, 802, 804, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 839, 844, 847, 848, 851, 856, 859, 860, 863, 864, 865, 866, 867, 868, 869, 878, 881, 894, 897, 918, 919, 920, 921, 922, 923, 924, 926, 929, 930, 931, 932, 933, 934, 935, 937, 938, 939, 940, 941, 944, 945, 948, 955, 956, 959, 960, 963, 976, 979, 980, 983, 988, 989, 990, 991, 992, 993, 994, 995, 996, 998], "z": [24, 25, 38, 39, 40, 41, 50, 51, 74, 75, 83, 84, 85, 86, 95, 96, 119, 123, 126, 132, 134, 318, 352, 368, 382, 383, 384, 385, 386, 408, 411, 428, 431, 477, 480, 497, 500, 537, 538, 610, 618, 619, 638, 639, 640, 641, 643, 673, 742, 748, 750, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 829, 830, 831, 834, 894, 897, 930, 931, 955, 956, 959, 960, 963], "mix": [24, 25, 40, 41, 74, 75, 95, 96, 115, 119, 121, 132, 246, 305, 308, 318, 356, 368, 382, 385, 408, 411, 428, 431, 477, 480, 497, 500, 538, 548, 551, 610, 611, 612, 627, 635, 638, 639, 642, 680, 681, 685, 686, 729, 732, 735, 736, 741, 742, 743, 746, 799, 801, 814, 815, 818, 819, 820, 824, 825, 828, 829, 830, 831, 834, 912, 913, 916, 930, 934, 955, 956, 959, 964, 967], "__le__": [24, 25], "equal": [24, 25, 38, 39, 72, 73, 83, 84, 119, 126, 127, 175, 190, 191, 198, 199, 202, 246, 252, 255, 368, 416, 419, 424, 427, 481, 484, 485, 488, 556, 559, 564, 567, 610, 611, 614, 618, 619, 742, 754, 756, 774, 776, 783, 785, 830, 831, 834, 840, 843, 869, 886, 889, 918, 924, 926, 935, 936, 937, 941, 943, 944, 945, 948, 950, 953, 955, 964, 967, 976, 979, 980, 983, 984, 987], "element": [24, 25, 72, 73, 118, 121, 132, 137, 160, 161, 162, 163, 164, 165, 166, 169, 171, 175, 176, 177, 198, 199, 202, 228, 232, 233, 237, 318, 341, 345, 349, 368, 369, 372, 374, 377, 378, 381, 382, 385, 387, 390, 391, 394, 396, 399, 400, 403, 404, 407, 408, 411, 412, 415, 416, 419, 420, 423, 424, 427, 428, 431, 432, 435, 436, 439, 440, 443, 444, 447, 449, 452, 453, 456, 457, 460, 461, 464, 465, 468, 469, 472, 473, 476, 477, 480, 481, 484, 485, 488, 489, 492, 493, 496, 497, 500, 501, 504, 505, 508, 509, 512, 513, 516, 517, 520, 521, 524, 525, 528, 529, 532, 533, 536, 537, 538, 539, 542, 544, 547, 548, 551, 552, 555, 556, 559, 560, 563, 564, 567, 568, 571, 573, 576, 578, 581, 583, 586, 587, 590, 591, 595, 596, 600, 601, 605, 606, 609, 610, 618, 619, 622, 623, 625, 628, 629, 636, 650, 681, 685, 686, 691, 728, 729, 737, 742, 748, 750, 757, 759, 766, 769, 786, 788, 793, 795, 830, 831, 834, 848, 851, 856, 859, 864, 867, 869, 870, 873, 894, 897, 918, 919, 930, 933, 934, 935, 936, 937, 941, 942, 943, 944, 950, 953, 955, 956, 959, 960, 963, 964, 967, 968, 971, 972, 975, 976, 979, 980, 983, 984, 987, 988, 989, 992, 994, 997, 1020, 1028], "wise": [24, 25, 72, 73, 132, 137, 160, 161, 162, 163, 164, 165, 166, 169, 171, 368, 369, 372, 374, 377, 382, 385, 387, 390, 396, 399, 400, 403, 408, 411, 412, 415, 416, 419, 420, 423, 424, 427, 428, 431, 444, 447, 449, 452, 453, 456, 469, 472, 473, 476, 477, 480, 493, 496, 497, 500, 517, 520, 521, 524, 525, 528, 529, 532, 533, 536, 537, 538, 539, 542, 548, 551, 556, 559, 560, 563, 591, 595, 610, 636, 830, 831, 834], "result": [24, 25, 72, 73, 74, 75, 76, 116, 117, 118, 119, 121, 125, 126, 127, 129, 135, 149, 160, 161, 162, 163, 164, 165, 166, 169, 171, 175, 176, 177, 179, 182, 184, 185, 188, 190, 191, 193, 196, 198, 199, 202, 204, 205, 207, 208, 220, 221, 223, 226, 228, 232, 233, 237, 238, 240, 241, 245, 246, 252, 255, 262, 265, 305, 308, 318, 327, 363, 368, 369, 372, 374, 377, 378, 381, 382, 385, 387, 390, 391, 394, 396, 399, 400, 403, 404, 407, 408, 411, 412, 415, 416, 419, 420, 423, 424, 427, 428, 431, 432, 435, 436, 439, 440, 443, 444, 447, 449, 452, 453, 456, 457, 460, 461, 464, 465, 468, 469, 472, 473, 476, 477, 480, 481, 484, 485, 488, 489, 492, 493, 496, 497, 500, 501, 504, 505, 508, 509, 512, 513, 516, 517, 520, 521, 524, 525, 528, 529, 532, 533, 536, 537, 538, 539, 542, 544, 547, 548, 551, 552, 555, 556, 559, 560, 563, 564, 567, 568, 571, 573, 576, 578, 581, 583, 586, 587, 590, 591, 595, 596, 600, 601, 605, 606, 609, 610, 622, 623, 625, 628, 629, 632, 633, 634, 636, 638, 639, 642, 650, 663, 666, 667, 691, 724, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 740, 741, 742, 743, 746, 748, 750, 751, 753, 754, 756, 760, 762, 763, 765, 766, 769, 770, 772, 774, 776, 777, 779, 780, 782, 783, 785, 789, 790, 792, 793, 795, 796, 798, 799, 801, 802, 804, 805, 807, 808, 810, 811, 813, 814, 815, 818, 820, 823, 825, 828, 830, 831, 834, 836, 839, 840, 843, 844, 847, 848, 851, 852, 855, 856, 859, 860, 863, 864, 867, 870, 873, 874, 877, 878, 881, 882, 885, 886, 889, 894, 897, 907, 912, 913, 916, 918, 919, 920, 921, 923, 924, 926, 929, 930, 931, 932, 934, 935, 936, 943, 944, 945, 948, 950, 953, 955, 956, 959, 960, 963, 964, 967, 968, 971, 972, 975, 976, 979, 980, 983, 984, 987, 988, 989, 992, 994, 997, 999], "bool": [24, 25, 27, 28, 29, 30, 31, 34, 35, 72, 73, 113, 114, 119, 126, 127, 129, 130, 137, 172, 173, 175, 198, 246, 252, 255, 267, 268, 270, 273, 274, 275, 276, 279, 286, 293, 294, 295, 297, 299, 300, 302, 317, 318, 337, 338, 353, 362, 365, 368, 408, 411, 412, 415, 420, 423, 428, 431, 449, 452, 473, 476, 477, 480, 481, 484, 485, 488, 489, 492, 493, 496, 497, 500, 521, 524, 525, 528, 529, 532, 548, 551, 610, 611, 614, 618, 619, 628, 631, 635, 637, 647, 649, 654, 656, 657, 658, 659, 673, 674, 689, 690, 691, 724, 728, 742, 743, 746, 770, 772, 793, 795, 808, 810, 830, 869, 890, 891, 892, 893, 894, 895, 896, 900, 904, 905, 906, 918, 919, 930, 931, 932, 944, 945, 948, 950, 953, 955, 960, 963, 964, 967, 968, 971, 972, 975, 976, 979, 980, 983, 984, 987, 988, 989, 992, 994, 997], "true": [24, 25, 34, 35, 40, 41, 48, 49, 62, 63, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 119, 121, 122, 126, 127, 129, 130, 132, 134, 135, 136, 137, 160, 161, 166, 168, 170, 172, 173, 175, 176, 178, 179, 181, 183, 185, 187, 189, 190, 192, 193, 195, 197, 199, 201, 203, 204, 205, 206, 207, 209, 210, 212, 214, 215, 217, 219, 220, 222, 223, 225, 227, 228, 229, 231, 233, 234, 236, 238, 239, 241, 242, 244, 246, 252, 253, 254, 255, 256, 257, 259, 261, 262, 264, 266, 267, 268, 269, 270, 271, 276, 278, 281, 283, 285, 288, 290, 292, 294, 296, 298, 299, 301, 303, 305, 307, 309, 317, 318, 337, 354, 358, 359, 368, 369, 371, 373, 374, 376, 378, 380, 382, 384, 386, 387, 389, 391, 393, 395, 396, 398, 400, 402, 404, 406, 408, 410, 411, 412, 414, 416, 418, 420, 422, 424, 426, 428, 430, 431, 432, 434, 436, 438, 440, 442, 444, 446, 448, 449, 451, 453, 455, 457, 459, 461, 463, 465, 467, 469, 471, 473, 475, 476, 477, 479, 480, 481, 483, 484, 485, 487, 488, 489, 491, 492, 493, 495, 496, 497, 499, 500, 501, 503, 505, 507, 509, 511, 513, 515, 517, 519, 521, 523, 525, 527, 528, 529, 531, 532, 533, 535, 539, 541, 543, 544, 546, 548, 550, 551, 552, 554, 556, 558, 560, 562, 564, 566, 568, 570, 572, 573, 575, 577, 578, 580, 582, 583, 585, 587, 589, 591, 592, 594, 596, 597, 599, 601, 602, 604, 606, 608, 610, 611, 612, 613, 614, 615, 618, 619, 620, 621, 623, 624, 628, 635, 637, 639, 641, 643, 649, 650, 657, 671, 673, 674, 680, 681, 682, 684, 686, 688, 690, 691, 698, 699, 700, 701, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 724, 728, 729, 737, 742, 743, 745, 746, 747, 766, 768, 770, 772, 793, 794, 795, 808, 810, 814, 815, 817, 818, 819, 820, 822, 823, 824, 825, 827, 828, 829, 830, 831, 833, 835, 836, 838, 840, 842, 844, 846, 848, 850, 852, 854, 856, 858, 860, 862, 864, 866, 868, 869, 870, 872, 874, 876, 878, 880, 882, 884, 886, 888, 890, 891, 892, 893, 894, 895, 904, 905, 907, 913, 915, 917, 918, 919, 924, 925, 927, 930, 931, 932, 934, 935, 936, 937, 938, 940, 941, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 958, 960, 962, 963, 964, 966, 967, 968, 970, 971, 972, 974, 975, 976, 978, 979, 980, 982, 983, 984, 986, 987, 988, 989, 991, 992, 993, 994, 995, 996, 997, 998, 1020, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041], "__radd__": [24, 25, 74, 75, 118, 119], "adam_upd": [24, 25, 87, 88, 136, 691], "invok": [24, 25], "function_nam": [24, 25], "variabl": [24, 25, 27, 28, 29, 30, 31, 72, 73, 74, 75, 117, 118, 121, 123, 126, 127, 129, 130, 135, 136, 137, 149, 610, 620, 652, 653, 654, 655, 656, 657, 659, 678, 691, 698, 700, 702, 703, 705, 707, 709, 711, 713, 715, 717, 719, 721, 724, 727, 729, 740, 742, 790, 792, 890, 891, 892, 893, 912, 913, 916, 999, 1009, 1010, 1011, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043], "input": [24, 25, 27, 30, 31, 38, 39, 42, 43, 72, 73, 74, 75, 76, 83, 84, 85, 86, 87, 88, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 116, 117, 118, 119, 121, 122, 123, 125, 126, 127, 128, 129, 132, 134, 135, 136, 137, 149, 150, 158, 160, 161, 162, 163, 164, 165, 166, 169, 171, 172, 173, 175, 176, 177, 179, 182, 184, 185, 188, 190, 191, 193, 196, 198, 199, 202, 204, 205, 207, 208, 210, 213, 215, 218, 220, 221, 223, 226, 228, 232, 233, 237, 238, 240, 241, 245, 246, 252, 255, 257, 260, 262, 265, 267, 270, 272, 273, 274, 275, 276, 279, 280, 294, 297, 299, 302, 304, 305, 308, 313, 317, 318, 327, 328, 337, 338, 339, 340, 342, 343, 346, 350, 356, 362, 363, 368, 369, 372, 373, 374, 377, 378, 381, 382, 385, 386, 387, 390, 391, 394, 395, 396, 399, 400, 403, 404, 407, 408, 411, 412, 415, 416, 419, 420, 423, 424, 427, 428, 431, 432, 435, 436, 439, 440, 443, 444, 447, 449, 452, 453, 456, 457, 460, 461, 464, 465, 468, 469, 472, 473, 476, 477, 480, 481, 484, 485, 488, 489, 492, 493, 496, 497, 500, 501, 504, 505, 508, 509, 512, 513, 516, 517, 520, 521, 524, 525, 528, 529, 532, 533, 536, 537, 538, 539, 542, 544, 547, 548, 551, 552, 555, 556, 559, 560, 563, 564, 567, 568, 571, 572, 573, 576, 577, 578, 579, 580, 581, 582, 583, 586, 587, 590, 591, 595, 596, 597, 600, 601, 602, 605, 606, 609, 610, 611, 614, 615, 616, 618, 619, 620, 622, 623, 625, 627, 628, 629, 631, 632, 633, 634, 635, 636, 637, 638, 639, 642, 643, 647, 649, 650, 652, 653, 654, 656, 657, 658, 659, 663, 666, 667, 673, 675, 678, 680, 681, 682, 685, 686, 689, 690, 691, 693, 694, 695, 696, 697, 702, 707, 709, 724, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 746, 747, 748, 750, 751, 753, 754, 756, 757, 759, 760, 762, 763, 765, 766, 769, 770, 772, 774, 776, 777, 779, 780, 782, 783, 785, 786, 788, 789, 790, 792, 793, 795, 796, 798, 799, 801, 802, 804, 805, 807, 808, 810, 811, 813, 814, 815, 818, 819, 820, 823, 824, 825, 828, 829, 830, 831, 834, 835, 836, 839, 840, 843, 844, 847, 848, 851, 852, 855, 856, 859, 860, 863, 864, 867, 868, 869, 870, 873, 874, 877, 878, 881, 882, 885, 886, 889, 890, 891, 892, 893, 894, 897, 912, 913, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 926, 929, 930, 931, 932, 933, 934, 935, 936, 937, 941, 942, 943, 944, 945, 948, 950, 953, 955, 956, 959, 960, 963, 964, 967, 968, 971, 972, 975, 976, 979, 980, 983, 984, 987, 988, 989, 992, 994, 997, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1034, 1035], "arang": [24, 25, 74, 75, 127, 175, 204, 205, 207, 208, 955, 956, 959, 999], "arg_info": [24, 25, 74, 75, 610], "arg_nam": [24, 25, 74, 75, 610], "argmax": [24, 25, 74, 75, 930, 999], "argmin": [24, 25, 74, 75, 930, 999], "array_equ": [24, 25, 74, 75, 610], "arrays_equ": [24, 25, 72, 73, 74, 75, 610], "as_ivy_dev": [24, 25, 74, 75, 134, 318], "as_ivy_dtyp": [24, 25, 74, 75, 246], "as_native_dev": [24, 25, 74, 75, 318], "as_native_dtyp": [24, 25, 74, 75, 246], "assert_supports_inplac": [24, 25, 74, 75, 610], "cache_fn": [24, 25, 74, 75, 122, 610], "clear_mem_on_dev": [24, 25, 74, 75, 318], "clip_matrix_norm": [24, 25, 74, 75, 610], "clip_vector_norm": [24, 25, 85, 86, 610], "closest_valid_dtyp": [24, 25, 74, 75, 246], "container_typ": [24, 25, 74, 75, 610], "conv1d": [24, 25, 74, 75, 729, 1020], "conv1d_transpos": [24, 25, 74, 75, 729], "conv2d": [24, 25, 74, 75, 729, 999, 1020], "conv2d_transpos": [24, 25, 74, 75, 729], "conv3d": [24, 25, 74, 75, 729, 1020], "conv3d_transpos": [24, 25, 74, 75, 729], "copy_arrai": [24, 25, 74, 75, 610], "cumprod": [24, 25, 74, 75, 137, 610], "cumsum": [24, 25, 74, 75, 610, 999], "current_backend_str": [24, 25, 74, 75, 610], "default_devic": [24, 25, 74, 75, 128, 132, 318, 356, 359, 366], "default_dtyp": [24, 25, 74, 75, 122, 127, 246], "default_float_dtyp": [24, 25, 74, 75, 127, 246], "default_int_dtyp": [24, 25, 74, 75, 127, 246], "depthwise_conv2d": [24, 25, 74, 75, 729, 999], "dev_clon": [24, 25, 72, 73, 318], "dev_clone_arrai": [24, 25, 74, 75, 318], "dev_clone_it": [24, 25, 74, 75, 318], "dev_clone_nest": [24, 25, 74, 75, 318], "dev_dist": [24, 25, 72, 73, 318], "dev_dist_arrai": [24, 25, 74, 75, 318], "dev_dist_it": [24, 25, 74, 75, 318], "dev_dist_nest": [24, 25, 74, 75, 318], "dev_unifi": [24, 25, 74, 75, 318], "dev_unify_arrai": [24, 25, 74, 75, 318], "dev_unify_it": [24, 25, 74, 75, 318], "dev_unify_nest": [24, 25, 74, 75, 318], "dev_util": [24, 25, 74, 75, 128, 318], "dropout": [24, 25, 74, 75, 135, 729, 1020, 1031], "dtype": [24, 25, 32, 33, 34, 35, 64, 65, 72, 73, 77, 78, 79, 80, 85, 86, 109, 110, 116, 119, 121, 122, 127, 128, 130, 134, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 198, 199, 200, 201, 202, 203, 204, 205, 206, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 238, 239, 240, 241, 242, 243, 244, 245, 246, 250, 251, 252, 253, 254, 255, 256, 257, 260, 267, 268, 269, 270, 271, 272, 273, 274, 275, 280, 281, 284, 286, 287, 288, 291, 293, 294, 297, 299, 302, 304, 305, 306, 308, 310, 311, 312, 317, 318, 358, 368, 424, 427, 610, 618, 619, 663, 681, 682, 684, 685, 729, 737, 830, 844, 847, 918, 924, 926, 930, 931, 932, 944, 950, 953, 955, 972, 973, 974, 975, 976, 979, 980, 981, 982, 983, 988, 989, 992, 999, 1011, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1042, 1043], "dtype_bit": [24, 25, 74, 75, 246], "einops_rearrang": [24, 25, 72, 73, 610], "einops_reduc": [24, 25, 72, 73, 610], "einops_repeat": [24, 25, 72, 73, 610], "empti": [24, 25, 72, 73, 74, 75, 125, 127, 128, 175, 176, 177, 691, 728, 955, 976, 979, 980, 983, 988, 989, 992, 994, 997], "execute_with_gradi": [24, 25, 74, 75, 126, 135, 136, 137, 149, 691, 999], "ey": [24, 25, 74, 75, 137, 175, 729, 732, 736], "floormod": [24, 25, 74, 75, 610, 999], "fourier_encod": [24, 25, 74, 75, 610], "function_supported_dtyp": [24, 25, 74, 75, 246], "function_unsupported_dtyp": [24, 25, 74, 75, 246], "gather": [24, 25, 72, 73, 610, 639, 642], "gelu": [24, 25, 74, 75, 160, 1006], "get_all_arrays_in_memori": [24, 25, 74, 75, 610], "get_all_ivy_arrays_on_dev": [24, 25, 74, 75, 128, 318], "get_min_bas": [24, 25, 74, 75, 610], "get_min_denomin": [24, 25, 74, 75, 610], "get_num_dim": [24, 25, 74, 75, 610, 999], "get_referrers_recurs": [24, 25, 74, 75, 610], "gpu_is_avail": [24, 25, 74, 75, 318], "gradient_descent_upd": [24, 25, 87, 88, 691, 890, 891, 892, 893, 999], "handle_nest": [24, 25, 74, 75, 122, 126, 150], "handle_out_argu": [24, 25, 74, 75, 117, 124, 127, 128, 129, 150], "has_nan": [24, 25, 72, 73, 610], "indices_wher": [24, 25, 74, 75, 130, 610, 999], "infer_devic": [24, 25, 74, 75, 117, 127, 128, 150], "infer_dtyp": [24, 25, 74, 75, 117, 127, 128, 150], "inplace_arrays_support": [24, 25, 74, 75, 610], "inplace_decr": [24, 25, 74, 75, 610], "inplace_incr": [24, 25, 74, 75, 610], "inplace_upd": [24, 25, 72, 73, 129, 610, 1009, 1010], "inplace_variables_support": [24, 25, 74, 75, 610], "inputs_to_native_arrai": [24, 25, 74, 75, 125, 150], "invalid_dtyp": [24, 25, 74, 75, 246], "is_arrai": [24, 25, 610], "is_ivy_arrai": [24, 25, 129, 134, 610], "is_ivy_contain": [24, 25, 74, 75, 610], "is_native_arrai": [24, 25, 134, 610], "is_vari": [24, 25, 87, 88, 129, 691], "boolean": [24, 25, 72, 73, 121, 126, 175, 198, 246, 252, 255, 293, 317, 318, 353, 365, 368, 408, 411, 412, 415, 420, 423, 428, 431, 521, 524, 525, 528, 529, 532, 533, 536, 610, 611, 614, 618, 619, 649, 650, 651, 655, 656, 657, 658, 659, 671, 678, 690, 691, 707, 709, 728, 890, 891, 892, 894, 904, 955, 968, 971], "trainabl": [24, 25, 118, 133, 135, 136, 691, 707, 709, 1009, 1010, 1032, 1033, 1042], "lamb_upd": [24, 25, 87, 88, 691], "lars_upd": [24, 25, 87, 88, 691], "leaky_relu": [24, 25, 74, 75, 121, 160, 999], "linear": [24, 25, 74, 75, 118, 132, 135, 136, 137, 160, 161, 162, 163, 610, 637, 729, 737, 790, 792, 999, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027], "linspac": [24, 25, 74, 75, 132, 175, 176, 177, 999], "logspac": [24, 25, 74, 75, 132, 175], "lstm_updat": [24, 25, 74, 75, 132, 729], "mt": [24, 25, 134], "match_kwarg": [24, 25, 74, 75, 610], "matrix_pow": [24, 25, 74, 75, 742], "maximum": [24, 25, 72, 73, 74, 75, 76, 119, 132, 135, 137, 318, 342, 346, 350, 362, 368, 610, 622, 623, 625, 637, 691, 711, 713, 830, 831, 834, 894, 906, 930, 931, 955, 960, 963, 968, 971, 999], "minimum": [24, 25, 72, 73, 132, 137, 318, 368, 369, 372, 610, 645, 646, 668, 669, 676, 677, 830, 831, 834, 930, 932, 955, 960, 963, 968, 971, 999], "multi_head_attent": [24, 25, 74, 75, 126, 129, 729], "multinomi": [24, 25, 74, 75, 918], "multiprocess": [24, 25, 72, 73, 74, 75, 76, 135, 149, 318, 327, 610], "ndim": [24, 25, 121, 134, 742, 786, 788, 793, 795], "dimens": [24, 25, 72, 73, 74, 75, 76, 119, 121, 132, 135, 160, 165, 175, 228, 232, 233, 237, 318, 349, 610, 632, 633, 634, 637, 647, 663, 689, 729, 730, 731, 732, 733, 734, 735, 736, 739, 742, 743, 746, 748, 750, 751, 753, 754, 756, 757, 759, 760, 762, 763, 765, 766, 769, 770, 772, 774, 776, 777, 779, 783, 785, 786, 788, 790, 792, 793, 795, 796, 798, 802, 804, 805, 807, 808, 810, 814, 820, 823, 825, 828, 830, 836, 839, 844, 847, 848, 851, 852, 855, 856, 859, 860, 863, 864, 867, 869, 870, 873, 874, 877, 890, 891, 892, 893, 918, 929, 930, 931, 932, 933, 935, 936, 937, 941, 943, 955, 956, 959, 960, 963, 964, 967, 968, 971, 972, 975, 976, 979, 980, 983, 984, 987, 988, 989, 992, 994, 997, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1030, 1031], "ax": [24, 25, 48, 49, 52, 53, 72, 73, 97, 98, 116, 119, 121, 127, 134, 318, 362, 610, 628, 742, 770, 772, 790, 792, 799, 800, 801, 808, 810, 830, 840, 843, 848, 851, 852, 853, 854, 855, 864, 867, 870, 873, 878, 881, 886, 889, 930, 931, 932, 955, 960, 963, 964, 967, 968, 971, 972, 975, 976, 979, 980, 983, 984, 987, 988, 989, 992, 994, 997], "nonzero": [24, 25, 74, 75, 368, 382, 385, 539, 542, 930], "num_arrays_in_memori": [24, 25, 74, 75, 610], "num_cpu_cor": [24, 25, 74, 75, 128, 318], "num_gpu": [24, 25, 74, 75, 121, 128, 318], "num_ivy_arrays_on_dev": [24, 25, 74, 75, 318], "one_hot": [24, 25, 74, 75, 137, 610, 999], "ones": [24, 25, 72, 73, 74, 75, 121, 132, 134, 135, 175, 190, 191, 223, 226, 368, 432, 435, 610, 663, 999], "optimizer_upd": [24, 25, 87, 88, 691], "outputs_to_ivy_arrai": [24, 25, 74, 75, 117, 125, 127, 128, 150], "percent_used_mem_on_dev": [24, 25, 74, 75, 318], "print_all_arrays_in_memori": [24, 25, 74, 75, 610], "print_all_ivy_arrays_on_dev": [24, 25, 74, 75, 318], "promote_typ": [24, 25, 74, 75, 246], "queue_timeout": [24, 25, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 610], "randint": [24, 25, 74, 75, 101, 102, 918, 922, 999], "random_norm": [24, 25, 74, 75, 121, 729, 732, 735, 736, 742, 793, 795, 918, 935, 936], "random_uniform": [24, 25, 101, 102, 121, 128, 136, 918, 999], "relu": [24, 25, 68, 69, 74, 75, 135, 136, 160, 161, 162, 999], "scaled_dot_product_attent": [24, 25, 74, 75, 729], "scatter_flat": [24, 25, 74, 75, 610], "scatter_nd": [24, 25, 74, 75, 134, 610, 999], "seed": [24, 25, 72, 73, 74, 75, 918, 999], "set_default_devic": [24, 25, 74, 75, 128, 318, 366], "set_default_dtyp": [24, 25, 74, 75, 122, 127, 246], "set_default_float_dtyp": [24, 25, 74, 75, 127, 246], "set_default_int_dtyp": [24, 25, 74, 75, 127, 246], "set_min_bas": [24, 25, 74, 75, 610], "set_min_denomin": [24, 25, 74, 75, 610], "set_queue_timeout": [24, 25, 74, 75, 610], "set_shape_array_mod": [24, 25, 74, 75, 610, 674, 688], "set_split_factor": [24, 25, 74, 75, 318], "set_tmp_dir": [24, 25, 74, 75, 610], "set_with_grad": [24, 25, 74, 75, 691, 728], "shape_array_mod": [24, 25, 74, 75, 610, 671, 688], "shape_to_tupl": [24, 25, 74, 75, 127, 610], "shuffl": [24, 25, 72, 73, 918, 999], "sigmoid": [24, 25, 74, 75, 132, 135, 136, 160, 999], "size": [24, 25, 72, 73, 74, 75, 76, 121, 134, 135, 175, 204, 205, 207, 208, 318, 360, 361, 362, 610, 666, 673, 729, 741, 742, 754, 756, 770, 772, 780, 782, 786, 788, 793, 795, 805, 807, 830, 844, 847, 864, 867, 869, 870, 873, 918, 919, 923, 924, 926, 930, 931, 933, 988, 989, 992, 994, 997, 1020, 1021, 1022], "product": [24, 25, 126, 368, 539, 542, 610, 628, 729, 740, 741, 742, 748, 750, 766, 769, 780, 782, 799, 801, 805, 807, 955, 956, 959, 972, 975, 1020, 1031], "unknown": [24, 25], "model": [24, 25, 135, 136, 999], "slogdet": [24, 25, 74, 75, 742], "softmax": [24, 25, 68, 69, 74, 75, 160, 729, 740, 741, 999], "split_factor": [24, 25, 74, 75, 318, 327], "split_func_cal": [24, 25, 74, 75, 318], "stable_divid": [24, 25, 74, 75, 122, 610], "stable_pow": [24, 25, 74, 75, 610], "stop_gradi": [24, 25, 72, 73, 74, 75, 87, 88, 136, 318, 362, 691, 698, 699, 700, 701, 703, 704, 705, 706, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 890, 891, 892, 893, 999, 1036, 1037, 1038, 1039, 1040, 1041], "supports_inplac": [24, 25, 74, 75, 610], "tmp_dir": [24, 25, 74, 75, 610], "to_devic": [24, 25, 72, 73, 318, 337], "to_list": [24, 25, 72, 73, 610, 999], "to_native_arrays_and_back": [24, 25, 74, 75, 117, 124, 150], "to_scalar": [24, 25, 74, 75, 610], "total_mem_on_dev": [24, 25, 74, 75, 128, 318], "tpu_is_avail": [24, 25, 74, 75, 318], "try_else_non": [24, 25, 74, 75, 610], "type_promote_arrai": [24, 25, 74, 75, 246], "unique_al": [24, 25, 74, 75, 935], "unique_invers": [24, 25, 74, 75, 935], "unique_valu": [24, 25, 74, 75, 935], "unset_default_devic": [24, 25, 74, 75, 318], "unset_default_dtyp": [24, 25, 74, 75, 246], "unset_default_float_dtyp": [24, 25, 74, 75, 246], "unset_default_int_dtyp": [24, 25, 74, 75, 246], "unset_shape_array_mod": [24, 25, 74, 75, 610], "unset_with_grad": [24, 25, 74, 75, 691], "unstack": [24, 25, 72, 73, 132, 135, 610, 999], "used_mem_on_dev": [24, 25, 74, 75, 318], "valid_dtyp": [24, 25, 74, 75, 246], "value_is_nan": [24, 25, 74, 75, 610], "variable_data": [24, 25, 74, 75, 691], "with_grad": [24, 25, 74, 75, 691, 723], "collect": [27, 72, 73, 121, 148, 160, 172, 318, 610, 691, 729, 814, 894, 907, 912, 918, 1006, 1020, 1034, 1036], "args_to_ivi": 27, "include_deriv": [27, 28, 29, 30, 31, 894, 896, 906], "keyword": [27, 28, 29, 72, 73, 74, 75, 76, 116, 117, 121, 127, 128, 129, 135, 175, 210, 213, 318, 327, 328, 342, 346, 350, 610, 617, 660, 894, 900, 955, 980, 983, 1032, 1033], "nest": [27, 28, 29, 30, 31, 72, 73, 74, 75, 76, 116, 121, 122, 125, 126, 134, 135, 136, 149, 318, 342, 346, 350, 610, 680, 691, 728, 890, 891, 892, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 1032, 1033, 1036, 1037, 1038, 1039, 1040, 1041], "unchang": [27, 28, 29, 30, 31], "posit": [27, 28, 29, 38, 39, 83, 84, 117, 121, 135, 148, 174, 175, 190, 191, 246, 281, 284, 318, 342, 346, 350, 368, 369, 372, 481, 484, 485, 488, 539, 542, 560, 563, 610, 637, 742, 743, 746, 830, 844, 847, 864, 867, 918, 928, 930, 933, 988, 989, 992, 994, 997, 1009, 1010], "deriv": [27, 28, 29, 30, 31, 127, 128, 134, 136, 175, 185, 188, 199, 202, 223, 226, 241, 245, 691, 693, 696, 698, 700, 703, 705, 711, 713, 715, 717, 719, 721, 894, 896, 906, 1032, 1036, 1040, 1042], "tupl": [27, 28, 29, 30, 31, 48, 49, 60, 61, 72, 73, 116, 117, 121, 126, 127, 128, 130, 134, 135, 136, 149, 175, 179, 182, 215, 218, 246, 262, 265, 287, 313, 318, 337, 610, 637, 675, 729, 732, 735, 736, 739, 742, 774, 776, 783, 785, 793, 794, 795, 799, 801, 808, 810, 830, 836, 839, 840, 843, 848, 851, 852, 855, 864, 867, 870, 873, 874, 877, 886, 889, 890, 891, 892, 893, 894, 896, 897, 899, 901, 902, 903, 905, 906, 908, 909, 910, 911, 930, 933, 935, 936, 937, 939, 941, 942, 955, 960, 963, 964, 967, 968, 971, 972, 975, 976, 979, 980, 983, 984, 987, 988, 989, 992, 994, 997], "kei": [27, 28, 29, 72, 73, 74, 75, 76, 121, 126, 130, 135, 318, 330, 610, 616, 626, 729, 740, 741, 890, 891, 892, 894, 897, 903, 907, 1009, 1010, 1020, 1031, 1036, 1040], "word": [27, 28, 29, 175, 176, 177, 918, 924, 926, 1009, 1010], "args_to_n": [27, 129, 134], "to_ivi": [27, 72, 73, 134, 894, 907], "leaf": [27, 30, 31, 72, 73, 122, 126, 135, 894, 895, 904, 905], "union": [27, 30, 31, 40, 41, 48, 49, 72, 73, 116, 117, 119, 122, 125, 126, 127, 128, 129, 130, 132, 137, 160, 161, 162, 163, 164, 165, 166, 169, 171, 172, 173, 175, 176, 177, 179, 182, 184, 185, 188, 190, 191, 198, 199, 202, 204, 205, 207, 208, 210, 213, 215, 218, 220, 221, 223, 226, 228, 232, 233, 237, 238, 240, 241, 245, 246, 250, 251, 252, 255, 257, 260, 262, 265, 272, 273, 274, 275, 276, 279, 280, 281, 284, 288, 291, 293, 294, 297, 299, 302, 304, 305, 308, 310, 311, 312, 313, 317, 318, 334, 335, 336, 337, 338, 340, 343, 344, 345, 346, 351, 357, 359, 361, 362, 363, 364, 367, 368, 369, 372, 374, 377, 378, 381, 382, 385, 387, 390, 391, 394, 396, 399, 400, 403, 404, 407, 408, 411, 412, 415, 416, 419, 420, 423, 424, 427, 428, 431, 432, 435, 436, 439, 440, 443, 444, 447, 449, 452, 453, 456, 457, 460, 461, 464, 465, 468, 469, 472, 473, 476, 477, 480, 481, 484, 485, 488, 489, 492, 493, 496, 497, 500, 501, 504, 505, 508, 509, 512, 513, 516, 517, 520, 525, 528, 529, 532, 533, 536, 537, 538, 539, 542, 544, 547, 548, 551, 552, 555, 556, 559, 560, 563, 564, 567, 568, 571, 573, 576, 578, 581, 583, 586, 587, 590, 591, 595, 596, 600, 601, 605, 606, 609, 610, 611, 614, 618, 619, 622, 623, 625, 628, 629, 632, 633, 634, 636, 637, 638, 639, 640, 642, 647, 649, 650, 652, 653, 654, 663, 666, 667, 673, 675, 680, 681, 685, 686, 689, 690, 691, 693, 696, 698, 700, 703, 705, 711, 713, 715, 717, 719, 721, 724, 726, 729, 730, 731, 732, 733, 734, 735, 736, 738, 739, 741, 742, 743, 746, 748, 750, 751, 753, 754, 756, 757, 759, 760, 762, 763, 765, 766, 769, 770, 772, 774, 776, 777, 779, 780, 782, 783, 785, 786, 788, 789, 790, 792, 793, 794, 795, 796, 798, 799, 801, 802, 804, 805, 807, 808, 810, 811, 813, 814, 815, 818, 820, 823, 825, 828, 830, 831, 834, 836, 839, 840, 843, 844, 847, 848, 851, 852, 855, 856, 859, 860, 863, 864, 867, 869, 870, 873, 874, 877, 878, 881, 882, 885, 886, 889, 890, 891, 892, 893, 894, 895, 896, 897, 905, 906, 912, 913, 916, 918, 919, 920, 921, 923, 924, 926, 929, 930, 931, 932, 933, 934, 935, 936, 937, 941, 942, 943, 944, 945, 948, 950, 953, 955, 956, 959, 960, 963, 964, 967, 968, 971, 976, 979, 980, 983, 984, 987, 988, 989, 992, 994, 997], "nativearrai": [27, 30, 31, 32, 33, 40, 41, 116, 117, 119, 122, 125, 126, 129, 130, 132, 134, 137, 150, 158, 160, 161, 162, 163, 164, 165, 166, 169, 171, 175, 176, 177, 179, 182, 185, 188, 199, 202, 204, 205, 207, 208, 210, 213, 215, 216, 218, 223, 226, 228, 232, 233, 237, 241, 245, 246, 252, 255, 257, 260, 262, 265, 267, 270, 276, 279, 281, 284, 288, 291, 294, 297, 299, 302, 305, 308, 313, 318, 337, 338, 340, 356, 362, 363, 368, 369, 372, 374, 377, 378, 381, 382, 385, 387, 390, 391, 394, 396, 399, 400, 403, 404, 407, 408, 411, 412, 415, 416, 419, 420, 423, 424, 427, 428, 431, 432, 435, 436, 439, 440, 443, 444, 447, 449, 452, 453, 456, 457, 460, 461, 464, 465, 468, 469, 472, 473, 476, 477, 480, 481, 484, 485, 488, 489, 492, 493, 496, 497, 500, 501, 504, 505, 508, 509, 512, 513, 516, 517, 520, 525, 528, 529, 532, 533, 536, 537, 538, 539, 542, 544, 547, 548, 551, 552, 555, 556, 559, 560, 563, 564, 567, 568, 571, 573, 576, 578, 581, 583, 586, 587, 590, 591, 595, 596, 600, 601, 605, 606, 609, 610, 611, 612, 614, 618, 619, 622, 623, 625, 627, 628, 629, 632, 633, 634, 636, 637, 638, 639, 640, 642, 647, 649, 650, 652, 653, 654, 663, 666, 667, 673, 675, 680, 681, 685, 686, 689, 690, 691, 693, 696, 698, 700, 703, 705, 711, 713, 715, 717, 719, 721, 724, 726, 729, 730, 731, 732, 733, 734, 735, 736, 738, 739, 741, 742, 743, 746, 748, 750, 751, 753, 754, 756, 757, 759, 760, 762, 763, 765, 766, 769, 770, 772, 774, 776, 777, 779, 780, 782, 783, 785, 786, 788, 789, 790, 792, 793, 795, 796, 798, 799, 801, 802, 804, 805, 807, 808, 810, 811, 813, 814, 815, 818, 820, 823, 825, 828, 830, 831, 834, 836, 839, 840, 843, 844, 847, 848, 851, 852, 855, 856, 859, 860, 863, 864, 867, 869, 870, 873, 874, 877, 878, 881, 882, 885, 886, 889, 894, 896, 897, 906, 912, 913, 916, 918, 919, 929, 930, 931, 932, 933, 934, 935, 936, 937, 941, 942, 943, 944, 945, 948, 950, 953, 955, 956, 959, 960, 963, 964, 967, 968, 971, 976, 979, 980, 983, 984, 987, 988, 989, 992, 994, 997], "travers": [27, 30, 31, 72, 73, 126, 132, 134, 894, 906], "lowest": [27, 30, 31, 72, 73, 122, 149, 894, 906, 918, 920, 921], "leav": [27, 30, 31, 72, 73, 74, 75, 117, 118, 119, 121, 122, 126, 127, 129, 135, 136, 830, 874, 877, 894, 895, 896, 904, 905, 906], "to_n": [27, 72, 73], "item": [27, 31, 68, 69, 72, 73, 127, 132, 134, 135, 137, 246, 273, 318, 327, 328, 330, 337, 339, 341, 343, 345, 349, 610, 626, 648, 676, 677, 894, 899, 900, 901, 902, 906, 910, 911, 999, 1032, 1033], "asarrai": [32, 33, 77, 78, 121, 129, 175, 729, 730, 935, 937, 941], "empty_lik": [32, 33, 77, 78, 175], "from_dlpack": [32, 33, 77, 78, 175], "full_lik": [32, 33, 77, 78, 175], "fill_valu": [32, 33, 77, 78, 127, 175, 198, 199, 200, 201, 202, 203, 368, 477, 480, 497, 500], "meshgrid": [32, 33, 77, 78, 175], "xy": [32, 33, 77, 78, 175, 210, 211, 212, 213, 214], "ones_lik": [32, 33, 77, 78, 137, 175, 999], "tril": [32, 33, 77, 78, 175], "k": [32, 33, 77, 78, 115, 132, 175, 190, 191, 192, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 610, 618, 729, 741, 742, 766, 769, 786, 788, 790, 792, 793, 795, 796, 798, 802, 804, 918, 923, 924, 926, 930, 933], "triu": [32, 33, 77, 78, 175], "zeros_lik": [32, 33, 77, 78, 175, 830, 831, 834, 999], "creation": [33, 72, 73, 74, 75, 76, 78, 116, 121, 127, 128, 132, 176, 177, 179, 182, 184, 185, 188, 190, 191, 193, 196, 198, 199, 202, 204, 205, 207, 208, 210, 213, 215, 218, 220, 221, 223, 226, 228, 232, 233, 237, 238, 240, 241, 245], "data_typ": [34, 35, 79, 80, 116, 121, 127, 246, 250, 251, 252, 255, 257, 260, 262, 265, 267, 270, 272, 273, 274, 275, 276, 279, 280, 281, 284, 286, 287, 288, 291, 293, 294, 297, 299, 302, 304, 305, 308, 310, 311, 312, 313, 314, 315, 316, 317], "astyp": [34, 35, 79, 80, 127, 129, 246], "broadcast_arrai": [34, 35, 79, 80, 246], "broadcast_to": [34, 35, 79, 80, 127, 246], "can_cast": [34, 35, 79, 80, 122, 127, 246, 271], "float32": [34, 35, 79, 80, 85, 86, 119, 121, 127, 246, 250, 251, 267, 268, 269, 271, 286, 317, 610, 681, 682, 685], "float64": [34, 35, 121, 127, 246, 252, 255, 267, 268, 270, 286, 317], "as_n": [34, 35, 79, 80, 127, 246, 273, 274, 275, 276, 277, 278, 279, 318, 337, 338, 359], "finfo": [34, 35, 79, 80, 246], "iinfo": [34, 35, 79, 80, 130, 246], "is_float_dtyp": [34, 35, 79, 80, 246], "is_int_dtyp": [34, 35, 79, 80, 246, 610, 686], "result_typ": [34, 35, 79, 80, 127, 246], "arrays_and_dtyp": [34, 35, 79, 80, 246, 305, 306, 307, 308, 309], "ab": [38, 39, 83, 84, 121, 124, 368, 373, 556, 559, 742, 808, 810, 999], "aco": [38, 39, 83, 84, 368, 999], "acosh": [38, 39, 83, 84, 246, 286, 287, 368, 999], "x2": [38, 39, 40, 41, 48, 49, 72, 73, 83, 84, 85, 86, 93, 94, 117, 119, 246, 313, 318, 356, 368, 382, 383, 384, 385, 386, 400, 401, 402, 403, 408, 409, 410, 411, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 444, 445, 446, 447, 448, 449, 450, 451, 452, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 493, 494, 495, 496, 497, 498, 499, 500, 517, 518, 519, 520, 521, 522, 523, 524, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 548, 549, 550, 551, 556, 557, 558, 559, 560, 561, 562, 563, 591, 592, 593, 594, 595, 610, 611, 612, 613, 614, 615, 729, 734, 742, 748, 749, 750, 766, 767, 768, 769, 780, 781, 782, 790, 791, 792, 799, 800, 801, 805, 806, 807, 930, 934], "asin": [38, 39, 83, 84, 368, 999], "asinh": [38, 39, 83, 84, 368, 395, 999], "881": [38, 39, 83, 84, 160, 164, 368, 391, 392, 393, 394], "82": [38, 39, 391, 392], "atan": [38, 39, 83, 84, 368, 999], "atan2": [38, 39, 83, 84, 368, 999], "atanh": [38, 39, 83, 84, 368, 999], "bitwise_and": [38, 39, 83, 84, 368], "bitwise_invert": [38, 39, 83, 84, 368], "bitwise_left_shift": [38, 39, 83, 84, 368], "bitwise_or": [38, 39, 83, 84, 368], "bitwise_right_shift": [38, 39, 83, 84, 368], "bitwise_xor": [38, 39, 83, 84, 368], "ceil": [38, 39, 83, 84, 175, 176, 177, 368, 999], "cosh": [38, 39, 83, 84, 368, 999], "divid": [38, 39, 72, 73, 83, 84, 119, 125, 368, 469, 472, 610, 676, 830, 869], "erf": [38, 39, 83, 84, 368], "exp": [38, 39, 83, 84, 368, 461, 464, 517, 520, 999], "expm1": [38, 39, 83, 84, 368], "floor": [38, 39, 83, 84, 368, 424, 427, 610, 636, 999], "floor_divid": [38, 39, 83, 84, 368], "greater": [38, 39, 72, 73, 83, 84, 368, 374, 377, 387, 390, 400, 403, 416, 419, 424, 427, 465, 468, 469, 472, 556, 559, 560, 563, 568, 571, 606, 609, 742, 748, 750, 830, 870, 873, 918, 924, 926], "greater_equ": [38, 39, 83, 84, 368], "isfinit": [38, 39, 83, 84, 121, 368], "isinf": [38, 39, 83, 84, 368], "isnan": [38, 39, 83, 84, 368], "less_equ": [38, 39, 83, 84, 368], "log10": [38, 39, 83, 84, 368], "log1p": [38, 39, 83, 84, 368], "log2": [38, 39, 83, 84, 368], "logaddexp": [38, 39, 83, 84, 368], "logical_and": [38, 39, 83, 84, 368, 999], "logical_not": [38, 39, 83, 84, 368, 999], "logical_or": [38, 39, 83, 84, 368, 999], "logical_xor": [38, 39, 83, 84, 368], "multipli": [38, 39, 83, 84, 119, 123, 125, 368, 610, 628], "neg": [38, 39, 83, 84, 122, 126, 129, 160, 162, 175, 176, 177, 190, 191, 368, 481, 484, 485, 488, 539, 542, 556, 559, 560, 563, 742, 793, 795, 805, 807, 808, 810, 830, 848, 851, 864, 867, 988, 989, 992, 994, 997], "not_equ": [38, 39, 83, 84, 368], "pow": [38, 39, 83, 84, 368], "remaind": [38, 39, 72, 73, 83, 84, 368, 610, 636, 830, 869], "94": [38, 39, 83, 84, 391, 395, 568, 569], "256": [38, 39, 568, 569, 729, 735], "0001": [38, 39, 568, 569, 1036, 1037, 1038], "36": [38, 39, 568, 569, 742, 780, 782, 955, 956, 959], "67": [38, 39, 83, 84, 126, 368, 428, 431, 440, 443, 568, 569, 578, 580, 582], "45": [38, 39, 121, 568, 569, 691, 693, 696, 742, 780, 782, 830, 869, 912, 913, 916, 955, 956, 959], "24": [38, 39, 99, 100, 368, 428, 431, 568, 569, 583, 586, 610, 628, 691, 693, 696, 742, 754, 756, 780, 782, 912, 913, 915, 916, 917, 955, 956, 959], "678": [38, 39, 568, 569], "32": [38, 39, 42, 43, 121, 135, 160, 162, 368, 428, 431, 568, 569, 693, 694, 729, 732, 735, 742, 780, 782, 930, 934, 955, 956, 959], "sin": [38, 39, 83, 84, 125, 132, 368, 577, 610, 637, 999], "841": [38, 39, 83, 84, 368, 573, 574, 575, 576, 577], "909": [38, 39, 83, 84, 368, 573, 574, 575, 576, 577], "141": [38, 39, 83, 84, 368, 573, 574, 575, 576, 577], "sinh": [38, 39, 83, 84, 368, 582, 999], "18": [38, 39, 83, 84, 119, 126, 368, 428, 431, 578, 579, 580, 581, 582, 742, 754, 756, 780, 782, 955, 956, 959], "63": [38, 39, 42, 43, 83, 84, 93, 94, 368, 578, 579, 580, 581, 582, 583, 586, 693, 694, 742, 743, 745, 746, 747, 780, 782, 955, 956, 959], "23": [38, 39, 83, 84, 368, 428, 431, 568, 571, 578, 579, 580, 581, 582, 729, 735, 742, 754, 756, 930, 934], "232": [38, 39, 83, 84, 368, 578, 579, 580, 581, 582], "51": [38, 39, 368, 428, 431, 578, 579, 581], "sqrt": [38, 39, 83, 84, 368, 742, 808, 810], "squar": [38, 39, 83, 84, 121, 368, 583, 586, 729, 732, 742, 743, 746, 751, 753, 757, 759, 760, 762, 763, 765, 773, 789, 790, 792, 793, 795], "subtract": [38, 39, 83, 84, 119, 125, 368], "tan": [38, 39, 83, 84, 117, 118, 122, 126, 129, 132, 368, 387, 390, 391, 394, 597, 742, 754, 756, 935, 936, 944, 945, 948, 999], "56": [38, 39, 83, 84, 119, 368, 583, 586, 596, 597, 598, 599, 600, 691, 693, 696, 742, 780, 782, 955, 956, 959], "19": [38, 39, 83, 84, 119, 368, 391, 393, 395, 428, 431, 596, 597, 598, 599, 600, 742, 754, 756], "tanh": [38, 39, 83, 84, 132, 160, 368, 602, 999], "762": [38, 39, 83, 84, 160, 171, 368, 601, 603, 604, 605], "964": [38, 39, 83, 84, 160, 171, 368, 601, 603, 604, 605], "trunc": [38, 39, 83, 84, 368], "elementwis": [39, 72, 73, 84, 116, 122, 132, 137, 369, 372, 374, 377, 378, 381, 382, 385, 387, 390, 391, 394, 396, 399, 400, 403, 404, 407, 408, 411, 412, 415, 416, 419, 420, 423, 424, 427, 428, 431, 432, 435, 436, 439, 440, 443, 444, 447, 449, 452, 453, 456, 457, 460, 461, 464, 465, 468, 469, 472, 473, 476, 477, 480, 481, 484, 485, 488, 489, 492, 493, 496, 497, 500, 501, 504, 505, 508, 509, 512, 513, 516, 517, 520, 521, 524, 525, 528, 529, 532, 533, 536, 537, 538, 539, 542, 544, 547, 548, 551, 552, 555, 556, 559, 560, 563, 564, 567, 568, 571, 573, 576, 578, 581, 583, 586, 587, 590, 591, 595, 596, 600, 601, 605, 606, 609], "all_equ": [40, 41, 85, 86, 610, 615], "equality_matrix": [40, 41, 85, 86, 610, 611, 612, 613, 614, 615], "x1": [40, 41, 83, 84, 85, 86, 117, 119, 246, 313, 318, 356, 368, 382, 385, 386, 400, 403, 408, 411, 416, 419, 420, 423, 424, 427, 428, 431, 444, 447, 448, 449, 452, 469, 472, 473, 476, 477, 480, 493, 496, 497, 500, 517, 520, 521, 524, 529, 532, 533, 536, 537, 538, 539, 542, 543, 548, 551, 556, 559, 560, 563, 591, 592, 595, 610, 611, 612, 613, 614, 615, 618, 729, 734, 742, 748, 750, 766, 769, 780, 782, 790, 792, 799, 801, 805, 807, 930, 934], "gather_nd": [40, 41, 72, 73, 85, 86, 610, 643, 999], "to_numpi": [40, 41, 72, 73, 85, 86, 135, 610, 682, 999], "adam_step": [42, 43, 87, 88, 691, 697], "mw": [42, 43, 87, 88, 136, 691, 693, 694, 695, 696, 697, 698, 700], "vw": [42, 43, 87, 88, 136, 691, 693, 694, 695, 696, 697, 698, 700], "beta1": [42, 43, 87, 88, 136, 691, 693, 694, 695, 696, 697, 698, 699, 700, 701, 711, 712, 713, 714, 1036, 1037, 1038], "beta2": [42, 43, 87, 88, 136, 691, 693, 694, 695, 696, 697, 698, 699, 700, 701, 711, 712, 713, 714, 1036, 1037, 1038], "999": [42, 43, 83, 84, 87, 88, 136, 368, 601, 602, 604, 605, 691, 693, 694, 695, 696, 697, 698, 699, 700, 701, 711, 712, 713, 714, 1036, 1037, 1038], "epsilon": [42, 43, 50, 51, 54, 55, 87, 88, 95, 96, 99, 100, 122, 126, 129, 136, 691, 693, 694, 695, 696, 697, 698, 699, 700, 701, 711, 712, 713, 714, 742, 774, 776, 783, 785, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 912, 913, 914, 915, 916, 917, 1034, 1035, 1036, 1037, 1038], "1e": [42, 43, 50, 51, 54, 55, 87, 88, 95, 96, 99, 100, 122, 126, 129, 136, 137, 610, 646, 691, 693, 694, 695, 696, 697, 698, 699, 700, 701, 711, 712, 713, 714, 742, 793, 795, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 912, 913, 914, 915, 916, 917, 999, 1036, 1037, 1038, 1039, 1041], "07": [42, 43, 50, 51, 87, 88, 95, 96, 136, 368, 568, 571, 691, 693, 694, 695, 696, 697, 698, 699, 700, 701, 711, 712, 713, 714, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 1036, 1037, 1038], "dcdw": [42, 43, 87, 88, 691, 693, 694, 695, 696, 697, 698, 699, 700, 701, 703, 704, 705, 706, 711, 712, 713, 714, 715, 716, 717, 718], "adam_step_delta": [42, 43, 87, 88, 691, 693, 694, 695, 696, 697], "639": [42, 43, 691, 693, 694, 696], "11": [42, 43, 74, 75, 83, 84, 101, 102, 119, 121, 126, 368, 382, 384, 385, 386, 408, 411, 564, 567, 610, 628, 638, 693, 694, 742, 754, 756, 780, 782, 814, 825, 828, 830, 848, 851, 856, 859, 918, 920, 921, 922, 930, 934, 935, 936, 955, 956, 959], "00121": [42, 43, 693, 694], "0102": [42, 43, 693, 694], "0397": [42, 43, 693, 694], "gradient": [43, 72, 73, 88, 116, 126, 135, 136, 148, 149, 318, 362, 693, 696, 698, 700, 702, 703, 705, 707, 709, 711, 713, 715, 717, 719, 721, 723, 724, 725, 726, 727, 728, 890, 891, 892, 893, 999, 1036, 1037, 1038, 1039, 1040, 1041], "linear_algebra": [48, 49, 93, 94, 116, 134, 742, 743, 746, 748, 750, 751, 753, 754, 756, 757, 759, 760, 762, 763, 765, 766, 769, 770, 772, 773, 774, 776, 777, 779, 780, 782, 783, 785, 786, 788, 789, 790, 792, 793, 795, 796, 798, 799, 801, 802, 804, 805, 807, 808, 810, 811, 813], "choleski": [48, 49, 93, 94, 742, 747], "upper": [48, 49, 72, 73, 93, 94, 121, 175, 190, 191, 233, 237, 742, 743, 744, 745, 746, 747, 786, 788, 918, 924, 926], "625": [48, 49, 742, 743, 744, 746], "25": [48, 49, 50, 51, 99, 100, 126, 368, 578, 581, 583, 586, 587, 590, 742, 743, 744, 746, 754, 756, 763, 765, 814, 820, 821, 823, 912, 913, 915, 916, 917, 955, 956, 959], "cross": [48, 49, 74, 75, 742, 814, 815, 818, 820, 823, 825, 828, 999], "axi": [48, 49, 50, 51, 52, 53, 62, 63, 64, 65, 66, 67, 72, 73, 77, 78, 95, 96, 97, 98, 107, 108, 109, 110, 111, 112, 117, 119, 121, 122, 126, 127, 129, 130, 132, 134, 137, 148, 160, 165, 175, 204, 205, 206, 207, 208, 209, 318, 320, 323, 330, 343, 344, 345, 346, 347, 348, 349, 350, 362, 610, 628, 629, 638, 689, 742, 748, 749, 750, 754, 756, 805, 806, 807, 808, 809, 810, 814, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 836, 837, 838, 839, 840, 843, 844, 845, 846, 847, 848, 849, 850, 851, 856, 857, 858, 859, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 881, 882, 885, 886, 889, 918, 929, 930, 931, 932, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998], "det": [48, 49, 74, 75, 742], "diagon": [48, 49, 74, 75, 175, 190, 191, 228, 232, 233, 237, 742, 802, 804], "offset": [48, 49, 54, 55, 99, 100, 742, 754, 755, 756, 802, 803, 804, 912, 913, 914, 915, 916, 917], "axis1": [48, 49, 52, 53, 97, 98, 742, 754, 755, 756, 830, 878, 879, 880, 881], "axis2": [48, 49, 742, 754, 755, 756], "eigh": [48, 49, 74, 75, 742], "namedtupl": [48, 49, 742, 757, 758, 759, 786, 787, 788, 793, 795, 935, 936, 937, 941], "eigvalsh": [48, 49, 74, 75, 742], "inv": [48, 49, 74, 75, 134, 742, 999], "matmul": [48, 49, 93, 94, 116, 121, 123, 132, 742, 793, 795, 999], "matrix_norm": [48, 49, 72, 73, 742], "ord": [48, 49, 72, 73, 742, 770, 771, 772, 808, 809, 810], "fro": [48, 49, 742, 770, 771, 772], "keepdim": [48, 49, 64, 65, 66, 67, 72, 73, 109, 110, 111, 112, 130, 610, 689, 742, 770, 771, 772, 808, 809, 810, 930, 931, 932, 955, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998], "matrix_rank": [48, 49, 74, 75, 742], "rtol": [48, 49, 742, 774, 775, 776, 783, 784, 785], "matrix_transpos": [48, 49, 74, 75, 134, 742], "outer": [48, 49, 74, 75, 742, 890, 891, 892, 893], "pinv": [48, 49, 74, 75, 742, 999], "qr": [48, 49, 74, 75, 742], "reduc": [48, 49, 72, 73, 134, 318, 362, 610, 633, 742, 786, 787, 788, 930, 931, 932, 955, 960, 963, 964, 967, 968, 971, 972, 975, 976, 979, 980, 983, 984, 987, 988, 989, 992, 994, 997], "solv": [48, 49, 74, 75, 133, 148, 742], "svd": [48, 49, 74, 75, 742, 999], "full_matric": [48, 49, 742, 793, 794, 795], "svdval": [48, 49, 74, 75, 742], "tensordot": [48, 49, 74, 75, 742], "trace": [48, 49, 72, 73, 74, 75, 132, 149, 610, 656, 657, 659, 742], "vecdot": [48, 49, 74, 75, 742], "vector_norm": [48, 49, 72, 73, 742], "vector_to_skew_symmetric_matrix": [48, 49, 74, 75, 742, 999], "binary_cross_entropi": [50, 51, 95, 96, 814, 819], "pred": [50, 51, 95, 96, 122, 126, 129, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829], "357": [50, 51, 95, 96, 814, 815, 816, 817, 818, 819, 825, 826, 828, 829], "223": [50, 51, 95, 96, 814, 815, 816, 817, 818, 819, 825, 826, 827, 829], "cross_entropi": [50, 51, 95, 96, 122, 126, 129, 814, 824, 825, 828], "3862944": [50, 51, 814, 820, 821, 823], "sparse_cross_entropi": [50, 51, 95, 96, 814, 829], "loss": [51, 96, 116, 122, 135, 136, 137, 815, 818, 820, 823, 825, 828, 999], "clip": [52, 53, 72, 73, 97, 98, 122, 126, 129, 132, 135, 137, 368, 537, 538, 610, 622, 623, 625, 830, 835, 999], "x_min": [52, 53, 72, 73, 97, 98, 132, 137, 830, 831, 832, 833, 834, 835], "x_max": [52, 53, 72, 73, 97, 98, 132, 137, 830, 831, 832, 833, 834, 835], "roll": [52, 53, 97, 98, 117, 126, 830, 831, 832, 868], "concat": [52, 53, 72, 73, 97, 98, 318, 347, 348, 349, 350, 362, 610, 637, 830, 999], "xs": [52, 53, 97, 98, 126, 318, 341, 345, 347, 348, 349, 610, 611, 614, 619, 691, 702, 830, 836, 837, 838, 839], "constant_pad": [52, 53, 97, 98, 830], "pad_width": [52, 53, 97, 98, 830, 840, 841, 842, 843, 886, 887, 888, 889], "expand_dim": [52, 53, 97, 98, 132, 135, 830, 999], "flip": [52, 53, 97, 98, 134, 135, 137, 368, 412, 415, 830, 856, 859, 999], "permute_dim": [52, 53, 97, 98, 830], "reshap": [52, 53, 72, 73, 97, 98, 121, 129, 132, 134, 137, 830, 999], "shift": [52, 53, 97, 98, 117, 119, 368, 416, 419, 424, 427, 830, 864, 865, 866, 867, 868], "squeez": [52, 53, 97, 98, 830, 999], "stack": [52, 53, 72, 73, 97, 98, 132, 175, 228, 232, 233, 237, 742, 751, 753, 754, 756, 757, 759, 760, 762, 763, 765, 766, 769, 773, 774, 776, 777, 779, 783, 785, 786, 788, 793, 795, 796, 798, 802, 804, 830, 894, 895, 904, 905, 999, 1020, 1029], "swapax": [52, 53, 97, 98, 830], "axis0": [52, 53, 97, 98, 830, 878, 879, 880, 881], "tile": [52, 53, 97, 98, 830, 999], "rep": [52, 53, 97, 98, 830, 882, 883, 884, 885], "zero_pad": [52, 53, 97, 98, 830, 999], "layer_norm": [54, 55, 99, 100, 912, 917], "normalized_idx": [54, 55, 99, 100, 912, 913, 914, 915, 916, 917], "05": [54, 55, 99, 100, 121, 318, 691, 693, 696, 912, 913, 914, 915, 916, 917], "scale": [54, 55, 99, 100, 126, 318, 360, 361, 691, 715, 717, 729, 737, 740, 741, 912, 913, 914, 915, 916, 917, 1020, 1028, 1031, 1036, 1039], "new_std": [54, 55, 99, 100, 912, 913, 914, 915, 916, 917, 1034, 1035], "0976": [54, 55, 912, 913, 914, 916], "3452": [54, 55, 912, 913, 914, 916], "2740": [54, 55, 912, 913, 914, 916], "1047": [54, 55, 912, 913, 914, 916], "5886": [54, 55, 912, 913, 914, 916], "2732": [54, 55, 912, 913, 914, 916], "7696": [54, 55, 912, 913, 914, 916], "7024": [54, 55, 912, 913, 914, 916], "2518": [54, 55, 912, 913, 914, 916], "001": [54, 55, 135, 136, 368, 568, 571, 691, 693, 696, 912, 913, 914, 916], "576": [54, 55, 912, 913, 914, 916], "292": [54, 55, 912, 913, 914, 916], "33": [54, 55, 83, 84, 391, 393, 742, 780, 782, 912, 913, 914, 916, 955, 956, 959], "581": [54, 55, 691, 693, 696, 912, 913, 914, 916], "891": [54, 55, 160, 164, 912, 913, 914, 916], "01": [54, 55, 137, 368, 564, 567, 568, 571, 912, 913, 914, 916], "579": [54, 55, 912, 913, 914, 916], "931": [54, 55, 912, 913, 914, 916], "norm": [55, 72, 73, 100, 116, 610, 622, 623, 625, 742, 770, 772, 808, 810, 913, 914, 915, 916, 917, 999, 1035, 1036, 1038], "random": [57, 72, 73, 102, 116, 128, 137, 148, 919, 920, 921, 923, 924, 926, 928, 929, 999], "unique_count": [60, 61, 105, 106, 935, 938], "uc": [60, 61, 937, 939], "count": [60, 61, 119, 135, 318, 356, 742, 805, 807, 830, 848, 851, 935, 936, 937, 939, 941, 988, 989, 992, 994, 997], "argsort": [62, 63, 107, 108, 944], "descend": [62, 63, 107, 108, 742, 793, 795, 796, 798, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954], "sort": [63, 72, 73, 74, 75, 76, 108, 116, 742, 757, 759, 793, 795, 796, 798, 945, 948], "einsum": [64, 65, 109, 110, 955], "equat": [64, 65, 109, 110, 742, 790, 792, 955, 956, 957, 958, 959], "max": [64, 65, 72, 73, 109, 110, 246, 281, 284, 288, 291, 368, 537, 610, 622, 623, 625, 633, 666, 667, 742, 774, 776, 783, 785, 955, 1036, 1038], "min": [64, 65, 72, 73, 109, 110, 246, 281, 284, 288, 291, 368, 538, 610, 633, 666, 667, 676, 742, 786, 788, 793, 795, 796, 798, 808, 810, 955], "prod": [64, 65, 72, 73, 109, 110, 119, 127, 610, 633, 955], "std": [64, 65, 109, 110, 119, 918, 923, 935, 936, 955], "sum": [64, 65, 72, 73, 109, 110, 122, 126, 127, 129, 132, 318, 347, 348, 349, 350, 362, 368, 382, 385, 517, 520, 610, 629, 633, 666, 667, 729, 741, 742, 793, 795, 802, 804, 808, 810, 955, 956, 959, 976, 979], "var": [64, 65, 109, 110, 113, 114, 119, 132, 890, 891, 892, 955], "statist": [65, 110, 113, 114, 116, 121, 127, 956, 959, 960, 963, 964, 967, 968, 971, 972, 975, 976, 979, 980, 983, 984, 987], "util": [67, 112, 116, 128, 318, 351, 989, 992, 994, 997], "add_ivy_array_instance_method": 68, "cl": [68, 69, 113, 114], "to_ignor": [68, 69, 113, 114, 894, 905], "loop": [68, 69, 113, 114, 123, 130, 149, 890, 891, 892, 893], "_wrap_funct": [68, 69, 113, 114, 122, 124], "toi": [68, 69, 113, 114], "arrayexampl": [68, 69], "hasattr": [68, 69, 113, 114, 134], "containerwithactiv": [70, 74, 75], "dict_in": [70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112], "queue": [70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 135, 318, 327, 328, 610, 665, 670], "queue_load_s": [70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112], "container_combine_method": [70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112], "list_join": [70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112], "print_limit": [70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112], "key_length_limit": [70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112], "print_ind": [70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112], "print_line_spac": [70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112], "ivyh": [70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112], "default_key_color": [70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112], "keyword_color_dict": [70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112], "rebuild_child_contain": [70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112], "types_to_iteratively_nest": [70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112], "alphabetical_kei": [70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112], "containerbas": [70, 71, 72, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 126], "key_chain": [70, 71, 72, 73, 74, 75, 77, 78, 79, 80, 83, 84, 85, 86, 87, 88, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 105, 106, 107, 108, 109, 110, 111, 112, 166, 168, 170, 176, 178, 179, 181, 183, 185, 187, 189, 190, 192, 193, 195, 197, 199, 201, 203, 204, 206, 207, 209, 210, 212, 214, 215, 217, 219, 220, 222, 223, 225, 227, 228, 229, 231, 233, 234, 236, 238, 239, 241, 242, 244, 252, 254, 256, 257, 259, 261, 262, 264, 266, 267, 269, 271, 276, 278, 281, 283, 285, 288, 290, 292, 294, 296, 298, 299, 301, 303, 305, 307, 309, 369, 371, 373, 374, 376, 378, 380, 382, 384, 386, 387, 389, 391, 393, 395, 396, 398, 400, 402, 404, 406, 408, 410, 412, 414, 416, 418, 420, 422, 424, 426, 428, 430, 432, 434, 436, 438, 440, 442, 444, 446, 448, 449, 451, 453, 455, 457, 459, 461, 463, 465, 467, 469, 471, 473, 475, 477, 479, 481, 483, 485, 487, 489, 491, 493, 495, 497, 499, 501, 503, 505, 507, 509, 511, 513, 515, 517, 519, 521, 523, 525, 527, 529, 531, 533, 535, 539, 541, 543, 544, 546, 548, 550, 552, 554, 556, 558, 560, 562, 564, 566, 568, 570, 572, 573, 575, 577, 578, 580, 582, 583, 585, 587, 589, 591, 592, 594, 596, 597, 599, 601, 602, 604, 606, 608, 611, 613, 615, 623, 624, 639, 641, 643, 681, 682, 684, 698, 699, 701, 703, 704, 706, 707, 708, 710, 711, 712, 714, 715, 716, 718, 719, 720, 722, 743, 745, 747, 766, 768, 815, 817, 819, 820, 822, 824, 825, 827, 829, 831, 833, 835, 836, 838, 840, 842, 844, 846, 848, 850, 852, 854, 856, 858, 860, 862, 864, 866, 868, 870, 872, 874, 876, 878, 880, 882, 884, 886, 888, 894, 907, 913, 915, 917, 920, 922, 924, 925, 927, 937, 938, 940, 945, 947, 949, 950, 952, 954, 956, 958, 960, 962, 964, 966, 968, 970, 972, 974, 976, 978, 980, 982, 984, 986, 989, 991, 993, 994, 996, 998], "to_appli": [70, 71, 72, 73, 74, 75, 77, 78, 79, 80, 83, 84, 85, 86, 87, 88, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 105, 106, 107, 108, 109, 110, 111, 112, 166, 168, 170, 176, 178, 179, 181, 183, 185, 187, 189, 190, 192, 193, 195, 197, 199, 201, 203, 204, 206, 207, 209, 210, 212, 214, 215, 217, 219, 220, 222, 223, 225, 227, 228, 229, 231, 233, 234, 236, 238, 239, 241, 242, 244, 252, 254, 256, 257, 259, 261, 262, 264, 266, 267, 269, 271, 276, 278, 281, 283, 285, 288, 290, 292, 294, 296, 298, 299, 301, 303, 305, 307, 309, 369, 371, 373, 374, 376, 378, 380, 382, 384, 386, 387, 389, 391, 393, 395, 396, 398, 400, 402, 404, 406, 408, 410, 412, 414, 416, 418, 420, 422, 424, 426, 428, 430, 432, 434, 436, 438, 440, 442, 444, 446, 448, 449, 451, 453, 455, 457, 459, 461, 463, 465, 467, 469, 471, 473, 475, 477, 479, 481, 483, 485, 487, 489, 491, 493, 495, 497, 499, 501, 503, 505, 507, 509, 511, 513, 515, 517, 519, 521, 523, 525, 527, 529, 531, 533, 535, 539, 541, 543, 544, 546, 548, 550, 552, 554, 556, 558, 560, 562, 564, 566, 568, 570, 572, 573, 575, 577, 578, 580, 582, 583, 585, 587, 589, 591, 592, 594, 596, 597, 599, 601, 602, 604, 606, 608, 611, 613, 615, 623, 624, 639, 641, 643, 681, 682, 684, 698, 699, 701, 703, 704, 706, 707, 708, 710, 711, 712, 714, 715, 716, 718, 719, 720, 722, 743, 745, 747, 766, 768, 815, 817, 819, 820, 822, 824, 825, 827, 829, 831, 833, 835, 836, 838, 840, 842, 844, 846, 848, 850, 852, 854, 856, 858, 860, 862, 864, 866, 868, 870, 872, 874, 876, 878, 880, 882, 884, 886, 888, 894, 907, 913, 915, 917, 924, 925, 927, 937, 938, 940, 945, 947, 949, 950, 952, 954, 956, 958, 960, 962, 964, 966, 968, 970, 972, 974, 976, 978, 980, 982, 984, 986, 989, 991, 993, 994, 996, 998], "prune_unappli": [70, 71, 72, 73, 74, 75, 77, 78, 79, 80, 83, 84, 85, 86, 87, 88, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 105, 106, 107, 108, 109, 110, 111, 112, 166, 168, 170, 176, 178, 179, 181, 183, 185, 187, 189, 190, 192, 193, 195, 197, 199, 201, 203, 204, 206, 207, 209, 210, 212, 214, 215, 217, 219, 220, 222, 223, 225, 227, 228, 229, 231, 233, 234, 236, 238, 239, 241, 242, 244, 252, 254, 256, 257, 259, 261, 262, 264, 266, 267, 269, 271, 276, 278, 281, 283, 285, 288, 290, 292, 294, 296, 298, 299, 301, 303, 305, 307, 309, 369, 371, 373, 374, 376, 378, 380, 382, 384, 386, 387, 389, 391, 393, 395, 396, 398, 400, 402, 404, 406, 408, 410, 412, 414, 416, 418, 420, 422, 424, 426, 428, 430, 432, 434, 436, 438, 440, 442, 444, 446, 448, 449, 451, 453, 455, 457, 459, 461, 463, 465, 467, 469, 471, 473, 475, 477, 479, 481, 483, 485, 487, 489, 491, 493, 495, 497, 499, 501, 503, 505, 507, 509, 511, 513, 515, 517, 519, 521, 523, 525, 527, 529, 531, 533, 535, 539, 541, 543, 544, 546, 548, 550, 552, 554, 556, 558, 560, 562, 564, 566, 568, 570, 572, 573, 575, 577, 578, 580, 582, 583, 585, 587, 589, 591, 592, 594, 596, 597, 599, 601, 602, 604, 606, 608, 611, 613, 615, 623, 624, 639, 641, 643, 681, 682, 684, 698, 699, 701, 703, 704, 706, 707, 708, 710, 711, 712, 714, 715, 716, 718, 719, 720, 722, 743, 745, 747, 766, 768, 815, 817, 819, 820, 822, 824, 825, 827, 829, 831, 833, 835, 836, 838, 840, 842, 844, 846, 848, 850, 852, 854, 856, 858, 860, 862, 864, 866, 868, 870, 872, 874, 876, 878, 880, 882, 884, 886, 888, 894, 907, 913, 915, 917, 924, 925, 927, 937, 938, 940, 945, 947, 949, 950, 952, 954, 956, 958, 960, 962, 964, 966, 968, 970, 972, 974, 976, 978, 980, 982, 984, 986, 989, 991, 993, 994, 996, 998], "map_sequ": [70, 71, 72, 73, 74, 75, 77, 78, 79, 80, 83, 84, 85, 86, 87, 88, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 105, 106, 107, 108, 109, 110, 111, 112, 166, 168, 170, 176, 178, 179, 181, 183, 185, 187, 189, 190, 192, 193, 195, 197, 199, 201, 203, 204, 206, 207, 209, 210, 212, 214, 215, 217, 219, 220, 222, 223, 225, 227, 228, 229, 231, 233, 234, 236, 238, 239, 241, 242, 244, 252, 254, 256, 257, 259, 261, 262, 264, 266, 267, 269, 271, 276, 278, 281, 283, 285, 288, 290, 292, 294, 296, 298, 299, 301, 303, 305, 307, 309, 369, 371, 373, 374, 376, 378, 380, 382, 384, 386, 387, 389, 391, 393, 395, 396, 398, 404, 406, 412, 414, 432, 434, 436, 438, 440, 442, 444, 446, 448, 453, 455, 457, 459, 461, 463, 465, 467, 481, 483, 485, 487, 489, 491, 501, 503, 505, 507, 509, 511, 513, 515, 525, 527, 539, 541, 543, 544, 546, 552, 554, 564, 566, 568, 570, 572, 573, 575, 577, 578, 580, 582, 583, 585, 587, 589, 591, 592, 594, 596, 597, 599, 601, 602, 604, 606, 608, 611, 613, 615, 623, 624, 639, 641, 643, 681, 682, 684, 698, 699, 701, 703, 704, 706, 707, 708, 710, 711, 712, 714, 715, 716, 718, 719, 720, 722, 743, 745, 747, 815, 817, 819, 820, 822, 824, 825, 827, 829, 831, 833, 835, 840, 842, 844, 846, 848, 850, 852, 854, 856, 858, 860, 862, 864, 866, 868, 870, 872, 878, 880, 882, 884, 886, 888, 913, 915, 917, 924, 925, 927, 937, 938, 940, 945, 947, 949, 950, 952, 954, 956, 958, 960, 962, 964, 966, 968, 970, 972, 974, 976, 978, 980, 982, 984, 986, 989, 991, 993, 994, 996, 998], "static_softplu": [70, 71, 166], "__getitem__": [72, 73, 126], "queri": [72, 73, 126, 127, 134, 318, 351, 361, 729, 740, 741, 1020, 1031], "slice": [72, 73, 610, 638, 639, 642, 894, 903], "chain": [72, 73, 125, 126, 136, 137, 149, 890, 891, 892, 894, 907, 1042, 1043], "represent": [72, 73, 74, 75, 76, 148, 174, 246, 250, 251, 281, 284, 288, 291, 318, 334, 335, 368, 369, 372, 382, 385, 408, 411, 420, 423, 428, 431, 533, 536, 539, 542, 610, 616, 675, 680], "dictionari": [72, 73, 74, 75, 76, 135, 149, 318, 361], "sequenc": [72, 73, 74, 75, 76, 119, 121, 127, 130, 148, 172, 173, 318, 327, 328, 610, 619, 660, 830, 869, 874, 877, 918, 920, 921, 955, 960, 963, 988, 989, 992, 994, 997, 1020, 1029, 1034, 1035, 1042, 1043], "asynchron": [72, 73, 74, 75, 76], "arriv": [72, 73, 74, 75, 76], "timeout": [72, 73, 74, 75, 76, 318, 327, 328, 610, 665, 670], "length": [72, 73, 74, 75, 76, 121, 130, 135, 175, 176, 177, 210, 213, 742, 793, 795, 796, 798, 830, 860, 863], "whitespac": [72, 73, 74, 75, 76], "indent": [72, 73, 74, 75, 76, 135], "extra": [72, 73, 74, 75, 76, 119, 124, 125, 132, 691, 702], "newlin": [72, 73, 74, 75, 76, 118], "handl": [72, 73, 74, 75, 76, 115, 117, 121, 122, 124, 126, 127, 128, 129, 136, 149, 172, 173, 318, 334, 335, 336, 337, 338, 352, 356, 357, 364, 367, 691, 698, 700, 703, 705, 711, 713, 715, 717, 719, 721, 1036, 1037, 1038, 1039, 1040, 1041], "color": [72, 73, 74, 75, 76, 1045, 1046], "map": [72, 73, 74, 75, 76, 117, 121, 122, 126, 135, 148, 149, 318, 327, 894, 901, 902, 906, 907, 1020, 1031], "termcolor": [72, 73, 74, 75, 76], "rebuild": [72, 73, 74, 75, 76], "constructor": [72, 73, 74, 75, 76, 127, 128, 134, 610, 617, 1042, 1043], "param": [72, 73, 74, 75, 76, 85, 86, 132, 137, 610, 616, 638, 639, 642, 643], "alphabet": [72, 73, 74, 75, 76], "preserv": [72, 73, 74, 75, 76, 121, 137, 149, 691, 724, 830, 848, 851], "__setitem__": [72, 73, 125, 126, 134], "val": [72, 73, 129, 134, 610, 652, 653, 654, 668, 669], "after": [72, 73, 119, 121, 126, 127, 131, 246, 313, 318, 368, 583, 586, 691, 698, 700, 702, 703, 705, 711, 713, 715, 717, 719, 721, 912, 913, 916, 1036, 1037, 1038, 1039, 1040, 1041], "all_fals": [72, 73], "assert_is_bool": [72, 73], "entri": [72, 73, 175, 204, 205, 207, 208, 830, 869, 894, 907], "evalu": [72, 73, 126, 368, 457, 460, 461, 464, 501, 504, 505, 508, 509, 512, 513, 516, 544, 547, 568, 571, 587, 590, 894, 895, 904, 905, 988, 989, 992, 994, 997], "assert": [72, 73, 121, 130, 134, 135, 610, 620], "prune": [72, 73, 894, 907, 908, 909], "all_key_chain": [72, 73], "include_empti": [72, 73], "all_tru": [72, 73, 126, 135], "arrays_as_list": [72, 73], "intermedi": [72, 73], "as_arrai": [72, 73, 610, 647, 673], "as_bool": [72, 73], "as_on": [72, 73], "fill": [72, 73, 175, 184, 198, 199, 202, 220, 221, 223, 226, 238, 240, 241, 245, 918, 920, 921], "as_random_uniform": [72, 73], "low": [72, 73, 101, 102, 132, 918, 920, 921, 922, 924, 925, 926, 927], "uniform": [72, 73, 136, 918, 919, 920, 921, 924, 926, 1011, 1013, 1014, 1017, 1018], "boundari": [72, 73, 918, 924, 926], "interv": [72, 73, 132, 137, 175, 176, 177, 204, 205, 207, 208, 742, 805, 807, 830, 831, 834, 874, 877, 918, 920, 921, 924, 926, 988, 989, 992, 994, 997], "as_vari": [72, 73, 121], "as_zero": [72, 73], "assert_contains_sub_contain": [72, 73], "sub_cont": [72, 73], "except": [72, 73, 118, 125, 129, 130, 134, 149, 246, 262, 265, 610, 620, 631, 654, 687, 742, 783, 785, 830, 836, 839, 874, 877, 930, 933, 988, 989, 992, 994, 997], "diff": [72, 73, 126, 135], "screen": [72, 73, 135], "assert_contains_sub_structur": [72, 73], "check_shap": [72, 73], "assert_ident": [72, 73], "check_typ": [72, 73], "same_arrai": [72, 73, 135], "datatyp": [72, 73, 79, 80, 175, 179, 182, 215, 218, 246, 272, 304], "assert_identical_structur": [72, 73], "at_key_chain": [72, 73], "ignore_key_error": [72, 73], "ignore_non": [72, 73], "at_kei": [72, 73], "ignor": [72, 73, 119, 121, 149, 175, 210, 213, 894, 905, 1036, 1040], "substr": [72, 73], "clip_min": [72, 73], "clip_max": [72, 73], "config": [72, 73, 135, 894, 907], "duplic": [72, 73, 118, 123, 124, 130, 134, 136], "compar": [72, 73, 121, 130, 135, 610, 611, 614, 618, 619, 935, 936, 937, 941, 943, 944, 945, 948, 950, 953], "container_rightmost": [72, 73], "common_key_chain": [72, 73, 126], "contains_sub_contain": [72, 73], "match": [72, 73, 126, 246, 252, 255, 368, 560, 563, 610, 660], "contains_sub_structur": [72, 73], "create_if_abs": [72, 73], "inplac": [72, 73, 87, 88, 115, 117, 119, 124, 125, 134, 136, 610, 620, 651, 654, 655, 678, 691, 698, 699, 700, 701, 703, 704, 705, 706, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 1009, 1010, 1036, 1037, 1038, 1039, 1040, 1041], "cutoff_at_depth": [72, 73], "depth_cutoff": [72, 73], "cutoff_at_height": [72, 73], "height_cutoff": [72, 73], "deep_copi": [72, 73, 135], "intern": [72, 73, 118, 121, 125, 126, 128, 129, 318, 691, 727, 894, 895, 904, 905, 1011, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1042, 1043], "belong": [72, 73, 136], "along": [72, 73, 116, 129, 175, 204, 205, 207, 208, 318, 343, 344, 345, 346, 347, 348, 349, 350, 362, 610, 628, 629, 638, 689, 742, 770, 772, 802, 804, 805, 807, 808, 810, 814, 820, 823, 825, 828, 830, 836, 839, 848, 851, 856, 859, 864, 867, 869, 874, 877, 882, 885, 890, 891, 892, 893, 918, 929, 930, 931, 932, 944, 945, 948, 950, 953, 955, 956, 959, 960, 963, 964, 967, 968, 971, 972, 975, 976, 979, 980, 983, 984, 987, 988, 989, 992, 994, 997], "dev_str": [72, 73], "diff_kei": [72, 73], "detect_key_diff": [72, 73], "detect_value_diff": [72, 73], "detect_shape_diff": [72, 73], "treat": [72, 73, 121, 133, 137, 172, 173], "detect": [72, 73, 117, 121, 130, 135, 136, 894, 895, 905], "container0": [72, 73], "axes_length": [72, 73, 610, 632, 633, 634], "rearrang": [72, 73, 610, 632, 634], "reduct": [72, 73, 121, 127, 134, 610, 633, 666, 667, 988, 989, 992, 994, 997, 999], "One": [72, 73, 121, 127, 132, 134, 135, 610, 633, 830, 860, 863, 918, 920, 921], "callabl": [72, 73, 121, 126, 132, 150, 151, 152, 153, 154, 155, 156, 157, 158, 172, 173, 246, 286, 287, 318, 362, 610, 616, 621, 631, 633, 890, 891, 892, 893, 894, 900, 904, 905, 906], "find_sub_contain": [72, 73], "sub_cont_to_find": [72, 73], "exsit": [72, 73], "find_sub_structur": [72, 73], "sub_struc_to_find": [72, 73], "flatten_key_chain": [72, 73, 135, 1032, 1033], "__": [72, 73, 119, 135], "above_height": [72, 73, 135], "below_depth": [72, 73, 135], "format_key_chain": [72, 73], "format_fn": [72, 73], "string": [72, 73, 123, 127, 128, 130, 132, 135, 246, 250, 251, 276, 279, 293, 317, 318, 334, 335, 336, 337, 351, 357, 363, 364, 367, 610, 630], "from_disk_as_hdf5": [72, 73, 135], "h5_obj_or_filepath": [72, 73], "slice_obj": [72, 73], "load": [72, 73, 149], "disk": [72, 73, 135], "h5py": [72, 73], "hdf5": [72, 73, 135, 1032, 1033], "h5": [72, 73], "from_disk_as_json": [72, 73, 135], "json_filepath": [72, 73], "json": [72, 73, 135], "dure": [72, 73, 122, 126, 127, 128, 129, 149, 172, 173, 318, 363, 610, 687, 691, 693, 696, 698, 700, 711, 713, 742, 766, 769, 890, 891, 892, 893, 955, 976, 979, 984, 987, 1032, 1033, 1036, 1037, 1038, 1040], "from_disk_as_pickl": [72, 73, 135], "pickle_filepath": [72, 73], "pickl": [72, 73, 126, 135], "from_flat_list": [72, 73], "flat_list": [72, 73], "hierarchi": [72, 73, 135], "flat": [72, 73, 610, 666, 830, 856, 859], "popul": [72, 73, 121, 127, 128, 132, 918, 919, 955, 976, 979, 984, 987], "from_numpi": [72, 73, 135], "h5_file_s": [72, 73], "batch": [72, 73, 122, 126, 135, 318, 360, 361, 610, 637, 729, 738, 742, 808, 810, 890, 891, 892, 893, 912, 913, 916, 1034, 1035], "handle_inplac": [72, 73], "prime": [72, 73], "overwritten": [72, 73, 123, 125], "has_kei": [72, 73], "query_kei": [72, 73], "somewher": [72, 73], "has_key_chain": [72, 73], "include_inf": [72, 73, 610, 649, 690], "leafwis": [72, 73], "nan": [72, 73, 116, 118, 121, 174, 246, 252, 255, 368, 369, 372, 374, 377, 378, 381, 382, 385, 387, 390, 391, 394, 396, 399, 400, 403, 432, 435, 436, 439, 440, 443, 457, 460, 461, 464, 465, 468, 481, 484, 489, 492, 501, 504, 505, 508, 513, 516, 517, 520, 539, 542, 556, 559, 560, 563, 564, 567, 573, 576, 578, 581, 583, 586, 596, 600, 601, 605, 606, 609, 610, 649, 690, 729, 741, 935, 936, 937, 941, 943, 955, 960, 963, 964, 967, 968, 971, 976, 979, 980, 983, 984, 987, 988, 989, 992, 994, 997], "well": [72, 73, 121, 129, 136, 137, 148, 610, 649, 742, 790, 792], "inf": [72, 73, 121, 174, 610, 649, 690, 742, 808, 810], "identical_array_shap": [72, 73], "exclus": [72, 73, 87, 88, 121, 122, 126, 137, 175, 176, 177, 610, 628, 656, 657, 659, 691, 707, 708, 709, 710, 918, 920, 921], "identical_config": [72, 73], "identical_structur": [72, 73], "if_exist": [72, 73], "key_chains_contain": [72, 73], "sub_str": [72, 73], "join": [72, 73, 830, 836, 839, 874, 877, 999], "list_stack": [72, 73, 135], "dim": [72, 73, 127, 610, 663, 1020, 1031], "func": [72, 73, 126, 172, 173, 318, 362, 610, 621, 691, 702, 894, 907], "map_cont": [72, 73], "include_self": [72, 73], "possibi": [72, 73], "matrix": [72, 73, 175, 210, 213, 228, 232, 233, 237, 610, 611, 614, 622, 729, 738, 742, 743, 746, 751, 753, 754, 756, 757, 759, 760, 762, 763, 765, 766, 769, 770, 772, 773, 774, 776, 777, 779, 783, 785, 786, 788, 790, 792, 793, 795, 796, 798, 802, 804, 811, 813, 1020, 1030], "integ": [72, 73, 121, 126, 127, 134, 175, 176, 177, 198, 246, 288, 291, 299, 302, 305, 308, 368, 369, 372, 408, 411, 412, 415, 416, 419, 420, 423, 424, 427, 428, 431, 432, 435, 465, 468, 469, 472, 533, 536, 556, 559, 560, 563, 564, 567, 606, 609, 742, 773, 805, 807, 808, 810, 830, 869, 918, 920, 921, 928, 955, 960, 963, 964, 967, 968, 971, 972, 975, 976, 979, 980, 983, 984, 987, 988, 989, 992, 994, 997], "flatten": [72, 73, 610, 637, 742, 780, 782, 808, 810, 830, 856, 859, 864, 867, 930, 931, 932, 935, 936, 937, 941, 943], "broadcast": [72, 73, 116, 118, 119, 121, 126, 127, 160, 161, 162, 163, 164, 165, 166, 169, 171, 175, 176, 177, 179, 182, 184, 185, 188, 190, 191, 193, 196, 198, 199, 202, 204, 205, 207, 208, 220, 221, 223, 226, 228, 232, 233, 237, 238, 240, 241, 245, 246, 252, 255, 257, 260, 262, 265, 318, 363, 368, 369, 372, 374, 377, 378, 381, 382, 385, 387, 390, 391, 394, 396, 399, 400, 403, 404, 407, 408, 411, 412, 415, 416, 419, 420, 423, 424, 427, 428, 431, 432, 435, 436, 439, 440, 443, 444, 447, 449, 452, 453, 456, 457, 460, 461, 464, 465, 468, 469, 472, 473, 476, 477, 480, 481, 484, 485, 488, 489, 492, 493, 496, 497, 500, 501, 504, 505, 508, 509, 512, 513, 516, 517, 520, 521, 524, 525, 528, 529, 532, 533, 536, 537, 538, 539, 542, 544, 547, 548, 551, 552, 555, 556, 559, 560, 563, 564, 567, 568, 571, 573, 576, 578, 581, 583, 586, 587, 590, 591, 595, 596, 600, 601, 605, 606, 609, 610, 622, 623, 625, 628, 632, 633, 634, 636, 639, 642, 650, 663, 666, 667, 691, 724, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 740, 741, 742, 743, 746, 748, 750, 751, 753, 754, 756, 760, 762, 763, 765, 766, 769, 770, 772, 774, 776, 777, 779, 780, 782, 783, 785, 789, 790, 792, 793, 795, 796, 798, 799, 801, 802, 804, 805, 807, 808, 810, 811, 813, 814, 815, 818, 820, 823, 825, 828, 830, 831, 834, 836, 839, 840, 843, 844, 847, 848, 851, 852, 855, 856, 859, 860, 863, 864, 867, 870, 873, 874, 877, 878, 881, 882, 885, 886, 889, 912, 913, 916, 918, 919, 920, 921, 923, 924, 926, 929, 930, 931, 932, 934, 935, 943, 944, 950, 953, 955, 960, 963, 964, 967, 968, 971, 972, 975, 976, 979, 980, 983, 984, 987, 988, 989, 992, 994, 997], "max_depth": [72, 73, 318, 322, 325, 332, 342, 346, 350, 610, 648, 894, 906], "multi_map": [72, 73, 126], "map_nest": [72, 73, 83, 84, 93, 94, 97, 98, 400, 402, 408, 410, 416, 418, 420, 422, 424, 426, 428, 430, 449, 451, 469, 471, 473, 475, 477, 479, 493, 495, 497, 499, 517, 519, 521, 523, 529, 531, 533, 535, 548, 550, 556, 558, 560, 562, 766, 768, 836, 838, 874, 876], "leftmost": [72, 73, 894, 907], "multi_map_in_static_method": [72, 73, 126], "fn_name": [72, 73], "num_arrai": [72, 73, 121], "overwrite_at_key_chain": [72, 73], "overwrit": [72, 73, 129, 132, 318, 362], "target_dict": [72, 73], "return_dict": [72, 73], "prune_empti": [72, 73], "keep_non": [72, 73], "prune_key_chain": [72, 73], "key1": [72, 73, 136], "key2": [72, 73], "key3": [72, 73], "prune_key_from_key_chain": [72, 73], "prune_kei": [72, 73], "prune_keys_from_key_chain": [72, 73], "remove_key_length_limit": [72, 73], "remove_print_limit": [72, 73], "reshape_lik": [72, 73], "leading_shap": [72, 73], "return_cont": [72, 73], "restructur": [72, 73], "keep_orig": [72, 73], "transpos": [72, 73, 134, 137, 318, 349, 729, 731, 733, 735, 742, 777, 779, 783, 785, 999, 1020, 1022, 1024, 1026], "restructure_key_chain": [72, 73], "keychain_map": [72, 73], "set_at_key_chain": [72, 73], "set_at_kei": [72, 73], "set_framework": [72, 73, 132, 134, 135, 137], "set_ivy_backend": [72, 73], "ivy_backend": [72, 73], "attribut": [72, 73, 118, 126, 127, 133, 134, 135, 136, 246, 281, 284, 286, 287, 288, 291, 318, 358], "show_sub_contain": [72, 73], "sub_cont_or_keychain": [72, 73], "seed_valu": [72, 73, 918, 928], "shuffle_h5_fil": [72, 73], "dataset": [72, 73, 135, 147, 999], "size_ordered_arrai": [72, 73], "keychain": [72, 73], "smallest": [72, 73, 246, 281, 284, 288, 291, 368, 432, 435], "largest": [72, 73, 148, 246, 281, 284, 288, 291, 742, 793, 795], "slice_kei": [72, 73], "key_slic": [72, 73], "all_depth": [72, 73], "slice_via_kei": [72, 73], "sort_by_kei": [72, 73], "num_or_size_split": [72, 73, 132, 830, 869], "with_remaind": [72, 73, 830, 869], "constitu": [72, 73, 137], "dimension": [72, 73, 175, 176, 177, 190, 191, 210, 213, 742, 748, 750, 751, 753, 766, 769, 774, 776, 780, 782, 783, 785, 805, 807, 808, 810, 830, 869, 930, 931, 932, 933, 955, 960, 963, 964, 967, 968, 971, 972, 975, 976, 979, 980, 983, 984, 987, 988, 989, 992, 994, 997], "evenli": [72, 73, 175, 176, 177, 204, 205, 207, 208, 830, 869], "store": [72, 73, 118, 123, 125, 126, 132, 134, 135, 136, 610, 637, 691, 727, 742, 802, 804, 830, 869, 1032, 1033], "preserve_typ": [72, 73, 691, 724], "stop": [72, 73, 77, 78, 132, 149, 175, 176, 177, 178, 204, 205, 206, 207, 208, 209, 318, 333, 362, 691, 698, 700, 703, 705, 711, 713, 715, 717, 719, 721, 724, 890, 891, 892, 893, 1036, 1037, 1038, 1039, 1040, 1041], "structural_diff": [72, 73], "cuda": [72, 73, 132, 135, 149, 175, 204, 205, 207, 208, 318, 327, 334, 359, 610, 638, 639, 642, 663, 666, 667, 918, 919, 920, 921, 924, 926, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1040, 1042, 1043], "target": [72, 73, 115, 131, 135, 136, 137, 318, 336, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 999], "to_dict": [72, 73], "to_disk_as_hdf5": [72, 73, 135], "starting_index": [72, 73], "max_batch_s": [72, 73], "w": [72, 73, 87, 88, 132, 135, 136, 610, 619, 691, 693, 696, 698, 700, 701, 703, 705, 706, 711, 713, 714, 715, 717, 718, 719, 721, 722, 729, 730, 731, 732, 733, 734, 735, 736], "later": [72, 73, 121, 610, 621], "to_disk_as_json": [72, 73, 135], "to_disk_as_pickl": [72, 73, 135], "to_flat_list": [72, 73], "to_iter": [72, 73, 126], "leaf_keys_onli": [72, 73], "to_iterator_kei": [72, 73], "to_iterator_valu": [72, 73], "to_json": [72, 73], "to_multi_dev": [72, 73], "multidevcontain": [72, 73, 74], "distributedarrai": [72, 73], "update_backend": [72, 73], "to_raw": [72, 73], "raw": [72, 73, 118], "trim_kei": [72, 73], "max_length": [72, 73], "try_kc": [72, 73], "tri": [72, 73], "self": [72, 73, 125, 126, 132, 134, 135, 136, 137, 166, 167, 168, 179, 180, 181, 185, 186, 187, 193, 194, 195, 199, 200, 201, 210, 211, 212, 215, 216, 217, 223, 224, 225, 228, 230, 231, 233, 235, 236, 241, 243, 244, 252, 253, 254, 257, 258, 259, 262, 263, 264, 267, 268, 269, 276, 277, 278, 281, 282, 283, 288, 289, 290, 294, 295, 296, 299, 300, 301, 305, 306, 307, 318, 369, 370, 371, 374, 375, 376, 378, 379, 380, 382, 383, 384, 387, 388, 389, 391, 392, 393, 396, 397, 398, 400, 401, 402, 404, 405, 406, 408, 409, 410, 412, 413, 414, 416, 417, 418, 420, 421, 422, 424, 425, 426, 428, 429, 430, 432, 433, 434, 436, 437, 438, 440, 441, 442, 444, 445, 446, 449, 450, 451, 453, 454, 455, 457, 458, 459, 461, 462, 463, 465, 466, 467, 469, 470, 471, 473, 474, 475, 477, 478, 479, 481, 482, 483, 485, 486, 487, 489, 490, 491, 493, 494, 495, 497, 498, 499, 501, 502, 503, 505, 506, 507, 509, 510, 511, 513, 514, 515, 517, 518, 519, 521, 522, 523, 525, 526, 527, 529, 530, 531, 533, 534, 535, 539, 540, 541, 544, 545, 546, 548, 549, 550, 552, 553, 554, 556, 557, 558, 560, 561, 562, 564, 565, 566, 568, 569, 570, 573, 574, 575, 578, 579, 580, 583, 584, 585, 587, 588, 589, 591, 593, 594, 596, 598, 599, 601, 603, 604, 606, 607, 608, 611, 612, 613, 623, 624, 639, 640, 641, 681, 683, 684, 693, 694, 695, 698, 699, 703, 704, 707, 708, 711, 712, 715, 716, 719, 720, 743, 744, 745, 748, 749, 751, 752, 754, 755, 757, 758, 760, 761, 763, 764, 766, 767, 768, 770, 771, 774, 775, 777, 778, 780, 781, 783, 784, 786, 787, 790, 791, 793, 794, 796, 797, 799, 800, 802, 803, 805, 806, 808, 809, 811, 812, 815, 816, 817, 820, 821, 822, 825, 826, 827, 831, 832, 833, 836, 837, 838, 840, 841, 842, 844, 845, 846, 848, 849, 850, 852, 853, 854, 856, 857, 858, 860, 861, 862, 864, 865, 866, 870, 871, 872, 874, 875, 876, 878, 879, 880, 882, 883, 884, 886, 887, 888, 913, 914, 915, 924, 925, 937, 939, 940, 945, 946, 947, 950, 951, 952, 956, 957, 958, 960, 961, 962, 964, 965, 966, 968, 969, 970, 972, 973, 974, 976, 977, 978, 980, 981, 982, 984, 985, 986, 989, 990, 991, 994, 995, 996, 999, 1036, 1040], "arbitrari": [72, 73, 117, 121, 122, 126, 129, 136, 149, 175, 210, 213, 246, 257, 260, 305, 308, 318, 347, 348, 350], "concatten": [72, 73, 318, 347, 348, 349, 350, 362], "dim_siz": [72, 73, 318], "update_config": [72, 73], "global_norm": [72, 73, 85, 86, 623, 624], "vector": [72, 73, 148, 175, 210, 213, 610, 623, 625, 729, 738, 742, 748, 750, 757, 759, 766, 769, 780, 782, 793, 795, 796, 798, 805, 807, 808, 810, 811, 813, 1020, 1030], "with_default_key_color": [72, 73], "with_entries_as_list": [72, 73], "with_ivy_backend": [72, 73], "with_key_length_limit": [72, 73, 135], "with_print_ind": [72, 73, 135], "with_print_limit": [72, 73, 135], "with_print_line_spac": [72, 73], "containerwithcr": [74, 75, 77], "containerwithdatatyp": [74, 75, 79], "containerwithdevic": [74, 75, 81], "containerwithelementwis": [74, 75, 83, 126], "containerwithgener": [74, 75, 85], "containerwithgradi": [74, 75, 87], "containerwithimag": [74, 75, 89], "containerwithlay": [74, 75, 91], "containerwithlinearalgebra": [74, 75, 93], "containerwithloss": [74, 75, 95], "containerwithnorm": [74, 75, 99], "containerwithrandom": [74, 75, 101], "containerwithsearch": [74, 75, 103], "containerwithset": [74, 75, 105], "containerwithsort": [74, 75, 107], "containerwithstatist": [74, 75, 109], "containerwithutil": [74, 75, 111], "static_aco": [74, 75], "static_acosh": [74, 75], "static_arg_info": [74, 75], "static_arg_nam": [74, 75], "static_argmax": [74, 75], "static_argmin": [74, 75], "static_arrai": [74, 75], "static_array_equ": [74, 75], "static_arrays_equ": [74, 75], "static_as_ivy_dev": [74, 75], "static_as_ivy_dtyp": [74, 75], "static_as_native_dev": [74, 75], "static_as_native_dtyp": [74, 75], "static_asin": [74, 75], "static_assert_supports_inplac": [74, 75], "static_atan": [74, 75], "static_atan2": [74, 75], "static_atanh": [74, 75], "static_bitwise_and": [74, 75], "static_bitwise_invert": [74, 75], "static_bitwise_left_shift": [74, 75], "static_bitwise_or": [74, 75], "static_bitwise_right_shift": [74, 75], "static_bitwise_xor": [74, 75], "static_cache_fn": [74, 75], "static_ceil": [74, 75], "static_clear_mem_on_dev": [74, 75], "static_clip_matrix_norm": [74, 75], "static_clip_vector_norm": [74, 75], "static_closest_valid_dtyp": [74, 75], "static_concat": [74, 75], "static_constant_pad": [74, 75], "static_container_typ": [74, 75], "static_conv1d": [74, 75], "static_conv1d_transpos": [74, 75], "static_conv2d": [74, 75], "static_conv2d_transpos": [74, 75], "static_conv3d": [74, 75], "static_conv3d_transpos": [74, 75], "static_copy_arrai": [74, 75], "static_co": [74, 75], "static_cosh": [74, 75], "static_cross": [74, 75], "static_cumprod": [74, 75], "static_cumsum": [74, 75], "static_current_backend": [74, 75], "static_current_backend_str": [74, 75], "static_default": [74, 75], "static_default_devic": [74, 75], "static_default_dtyp": [74, 75], "static_default_float_dtyp": [74, 75], "static_default_int_dtyp": [74, 75], "static_depthwise_conv2d": [74, 75], "static_det": [74, 75], "static_dev": [74, 75], "static_dev_clon": [74, 75], "static_dev_clone_arrai": [74, 75], "static_dev_clone_it": [74, 75], "static_dev_clone_nest": [74, 75], "static_dev_dist": [74, 75], "static_dev_dist_arrai": [74, 75], "static_dev_dist_it": [74, 75], "static_dev_dist_nest": [74, 75], "static_dev_unifi": [74, 75], "static_dev_unify_arrai": [74, 75], "static_dev_unify_it": [74, 75], "static_dev_unify_nest": [74, 75], "static_dev_util": [74, 75], "static_diagon": [74, 75], "static_dropout": [74, 75], "static_dtyp": [74, 75], "static_dtype_bit": [74, 75], "static_eigh": [74, 75], "static_eigvalsh": [74, 75], "static_einops_rearrang": [74, 75], "static_einops_reduc": [74, 75], "static_einops_repeat": [74, 75], "static_einsum": [74, 75], "static_empti": [74, 75], "static_equ": [74, 75], "static_erf": [74, 75], "static_execute_with_gradi": [74, 75], "static_exist": [74, 75], "static_exp": [74, 75], "static_expand_dim": [74, 75], "static_expm1": [74, 75], "static_flip": [74, 75], "static_floor": [74, 75], "static_floor_divid": [74, 75], "static_floormod": [74, 75], "static_fourier_encod": [74, 75], "static_ful": [74, 75], "static_function_supported_dtyp": [74, 75], "static_function_unsupported_dtyp": [74, 75], "static_gath": [74, 75], "static_gelu": [74, 75], "static_get_all_arrays_in_memori": [74, 75], "static_get_all_ivy_arrays_on_dev": [74, 75], "static_get_min_bas": [74, 75], "static_get_min_denomin": [74, 75], "static_get_num_dim": [74, 75], "static_get_referrers_recurs": [74, 75], "static_gpu_is_avail": [74, 75], "static_great": [74, 75], "static_greater_equ": [74, 75], "static_handle_nest": [74, 75], "static_handle_out_argu": [74, 75], "static_has_nan": [74, 75], "static_indices_wher": [74, 75], "static_infer_devic": [74, 75], "static_infer_dtyp": [74, 75], "static_inplace_arrays_support": [74, 75], "static_inplace_decr": [74, 75], "static_inplace_incr": [74, 75], "static_inplace_upd": [74, 75], "static_inplace_variables_support": [74, 75], "static_inputs_to_native_arrai": [74, 75], "static_inv": [74, 75], "static_invalid_dtyp": [74, 75], "static_is_arrai": [74, 75], "static_is_ivy_arrai": [74, 75], "static_is_ivy_contain": [74, 75], "static_is_native_arrai": [74, 75], "static_isfinit": [74, 75], "static_isinf": [74, 75], "static_isnan": [74, 75], "static_leaky_relu": [74, 75], "static_less": [74, 75], "static_less_equ": [74, 75], "static_linear": [74, 75], "static_log": [74, 75], "static_log10": [74, 75], "static_log1p": [74, 75], "static_log2": [74, 75], "static_logaddexp": [74, 75], "static_logical_and": [74, 75], "static_logical_not": [74, 75], "static_logical_or": [74, 75], "static_logical_xor": [74, 75], "static_lstm_upd": [74, 75], "static_match_kwarg": [74, 75], "static_matmul": [74, 75], "static_matrix_norm": [74, 75], "static_matrix_pow": [74, 75], "static_matrix_rank": [74, 75], "static_matrix_transpos": [74, 75], "static_max": [74, 75], "static_maximum": [74, 75], "static_mean": [74, 75], "static_min": [74, 75], "static_minimum": [74, 75], "static_multi_head_attent": [74, 75], "static_multinomi": [74, 75], "static_multiprocess": [74, 75], "static_neg": [74, 75], "static_nonzero": [74, 75], "static_not_equ": [74, 75], "static_num_arrays_in_memori": [74, 75], "static_num_cpu_cor": [74, 75], "static_num_gpu": [74, 75], "static_num_ivy_arrays_on_dev": [74, 75], "static_one_hot": [74, 75], "static_out": [74, 75], "static_outputs_to_ivy_arrai": [74, 75], "static_percent_used_mem_on_dev": [74, 75], "static_permute_dim": [74, 75], "static_pinv": [74, 75], "static_posit": [74, 75], "static_pow": [74, 75], "static_print_all_arrays_in_memori": [74, 75], "static_print_all_ivy_arrays_on_dev": [74, 75], "static_prod": [74, 75], "static_promote_typ": [74, 75], "static_qr": [74, 75], "static_queue_timeout": [74, 75], "static_random_norm": [74, 75], "static_relu": [74, 75], "static_remaind": [74, 75], "static_repeat": [74, 75], "static_reshap": [74, 75], "static_round": [74, 75], "static_scaled_dot_product_attent": [74, 75], "static_scatter_flat": [74, 75], "static_scatter_nd": [74, 75], "static_se": [74, 75], "static_set_default_devic": [74, 75], "static_set_default_dtyp": [74, 75], "static_set_default_float_dtyp": [74, 75], "static_set_default_int_dtyp": [74, 75], "static_set_min_bas": [74, 75], "static_set_min_denomin": [74, 75], "static_set_queue_timeout": [74, 75], "static_set_shape_array_mod": [74, 75], "static_set_split_factor": [74, 75], "static_set_tmp_dir": [74, 75], "static_set_with_grad": [74, 75], "static_shap": [74, 75], "static_shape_array_mod": [74, 75], "static_shape_to_tupl": [74, 75], "static_shuffl": [74, 75], "static_sigmoid": [74, 75], "static_slogdet": [74, 75], "static_softmax": [74, 75], "static_solv": [74, 75], "static_split": [74, 75], "static_split_factor": [74, 75], "static_split_func_cal": [74, 75], "static_sqrt": [74, 75], "static_squar": [74, 75], "static_squeez": [74, 75], "static_stable_divid": [74, 75], "static_stable_pow": [74, 75], "static_stack": [74, 75], "static_std": [74, 75], "static_stop_gradi": [74, 75], "static_sum": [74, 75], "static_supports_inplac": [74, 75], "static_svd": [74, 75], "static_svdv": [74, 75], "static_swapax": [74, 75], "static_tensordot": [74, 75], "static_til": [74, 75], "static_tmp_dir": [74, 75], "static_to_devic": [74, 75], "static_to_list": [74, 75], "static_to_native_arrays_and_back": [74, 75], "static_to_scalar": [74, 75], "static_total_mem_on_dev": [74, 75], "static_tpu_is_avail": [74, 75], "static_trac": [74, 75], "static_trunc": [74, 75], "static_try_else_non": [74, 75], "static_type_promote_arrai": [74, 75], "static_unique_al": [74, 75], "static_unique_invers": [74, 75], "static_unique_valu": [74, 75], "static_unset_default_devic": [74, 75], "static_unset_default_dtyp": [74, 75], "static_unset_default_float_dtyp": [74, 75], "static_unset_default_int_dtyp": [74, 75], "static_unset_shape_array_mod": [74, 75], "static_unset_with_grad": [74, 75], "static_unstack": [74, 75], "static_used_mem_on_dev": [74, 75], "static_valid_dtyp": [74, 75], "static_value_is_nan": [74, 75], "static_var": [74, 75], "static_vari": [74, 75], "static_variable_data": [74, 75], "static_vecdot": [74, 75], "static_vector_norm": [74, 75], "static_vector_to_skew_symmetric_matrix": [74, 75], "static_wher": [74, 75], "static_with_grad": [74, 75], "static_zero_pad": [74, 75], "at_dev": [74, 76, 318, 331, 332], "static_arang": [77, 78, 176], "static_asarrai": [77, 78, 179], "static_empty_lik": [77, 78, 185], "static_ey": [77, 78, 190], "n_row": [77, 78, 175, 190, 191, 192], "n_col": [77, 78, 175, 190, 191, 192], "static_from_dlpack": [77, 78, 193], "static_full_lik": [77, 78, 199], "static_linspac": [77, 78, 204], "num": [77, 78, 132, 175, 204, 205, 206, 207, 208, 209], "endpoint": [77, 78, 175, 204, 205, 206, 207, 209], "static_logspac": [77, 78, 207], "static_meshgrid": [77, 78, 210], "static_native_arrai": [77, 78, 215], "static_on": [77, 78, 220], "static_ones_lik": [77, 78, 223], "static_tril": [77, 78, 228], "static_triu": [77, 78, 233], "static_zero": [77, 78, 238], "static_zeros_lik": [77, 78, 241], "int32": [79, 80, 85, 86, 121, 127, 246, 267, 269, 270, 271, 286, 610, 681, 682, 684, 685, 830, 844, 847, 955, 972, 975, 980, 983], "int64": [79, 80, 121, 127, 246, 267, 269, 270, 271, 286, 317, 368, 424, 427, 930, 931, 932, 955, 972, 975, 980, 983], "static_astyp": [79, 80, 252], "static_broadcast_arrai": [79, 80, 257], "static_broadcast_to": [79, 80, 262], "static_can_cast": [79, 80, 267], "from_": [79, 80, 246, 267, 270, 271], "static_finfo": [79, 80, 281], "static_iinfo": [79, 80, 288], "static_is_float_dtyp": [79, 80, 294], "dtype_in": [79, 80, 246, 250, 251, 280, 293, 294, 297, 298, 299, 302, 303, 317], "static_is_int_dtyp": [79, 80, 299], "static_result_typ": [79, 80, 305], "02": [83, 84, 391, 393, 691, 693, 696], "21": [83, 84, 368, 391, 393, 428, 431, 610, 628, 742, 754, 756, 780, 782, 814, 825, 828, 955, 956, 959], "61": [83, 84, 95, 96, 368, 391, 393, 587, 590, 814, 815, 817, 818, 819, 825, 827, 829], "757": [83, 84, 368, 573, 575, 576, 577], "959": [83, 84, 368, 573, 575, 576, 577], "279": [83, 84, 368, 573, 575, 576, 577], "76": [83, 84, 368, 440, 443, 578, 580, 582, 601, 602, 691, 693, 696, 742, 799, 801, 955, 956, 959], "37": [83, 84, 101, 102, 368, 391, 394, 395, 578, 580, 582, 596, 600, 920, 922], "835": [83, 84, 578, 580, 582], "34": [83, 84, 368, 428, 431, 578, 580, 582, 583, 586], "98": [83, 84, 368, 428, 431, 578, 580, 582, 742, 780, 782, 930, 934, 955, 956, 959], "347": [83, 84, 578, 580, 582], "721": [83, 84, 578, 580, 582], "static_ab": [83, 84, 369], "static_add": [83, 84, 118, 119, 126, 382], "static_asinh": [83, 84, 391], "97": [83, 84, 368, 391, 394, 395], "75": [83, 84, 368, 391, 394, 395, 742, 763, 765, 780, 782], "static_divid": [83, 84, 126, 444], "static_multipli": [83, 84, 126, 539], "static_sign": [83, 84, 568], "static_sin": [83, 84, 573], "static_sinh": [83, 84, 578], "static_subtract": [83, 84, 126, 591], "static_tan": [83, 84, 119, 126, 596], "143": [83, 84, 119, 368, 596, 597, 599, 600], "38": [83, 84, 119, 368, 596, 597, 599, 600], "static_tanh": [83, 84, 601], "96": [83, 84, 368, 596, 600, 601, 602, 691, 693, 696, 742, 780, 782, 955, 956, 959], "995": [83, 84, 368, 601, 602, 604, 605], "9999": [83, 84, 601, 602], "static_all_equ": [85, 86, 611, 613], "max_norm": [85, 86, 610, 622, 623, 624, 625], "static_gather_nd": [85, 86, 639], "static_to_numpi": [85, 86, 681, 684], "lr": [87, 88, 135, 136, 691, 698, 699, 700, 701, 703, 704, 705, 706, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 1036, 1037, 1038, 1039, 1040, 1041], "mw_tm1": [87, 88, 691, 698, 699, 700, 701, 711, 712, 713, 714], "vw_tm1": [87, 88, 691, 698, 699, 700, 701, 711, 712, 713, 714], "max_trust_ratio": [87, 88, 691, 711, 712, 713, 714, 1036, 1038], "decay_lambda": [87, 88, 691, 711, 712, 713, 714, 715, 716, 717, 718, 1036, 1038, 1039], "effective_grad": [87, 88, 691, 719, 720, 721, 722], "static_adam_step": [87, 88, 693], "87": [87, 88, 101, 102, 691, 693, 696, 697, 920, 922], "976": [87, 88, 368, 601, 605, 691, 693, 696, 697], "static_adam_upd": [87, 88, 698], "static_gradient_descent_upd": [87, 88, 703], "static_is_vari": [87, 88, 707], "static_lamb_upd": [87, 88, 711], "static_lars_upd": [87, 88, 715], "static_optimizer_upd": [87, 88, 719], "73": [93, 94, 121, 368, 583, 586, 742, 743, 745, 746, 747, 912, 913, 916], "577": [93, 94, 742, 743, 745, 746, 747], "41": [93, 94, 134, 368, 428, 431, 583, 586, 742, 743, 745, 746, 747, 955, 980, 983], "707": [93, 94, 742, 743, 745, 746, 747], "static_choleski": [93, 94, 743], "static_rol": [93, 94, 97, 98, 119, 126, 743, 747, 831, 835, 864], "511": [95, 96, 814, 815, 817, 818, 819, 825, 827, 829], "5108256": [95, 96, 820, 822], "609438": [95, 96, 820, 822], "static_binary_cross_entropi": [95, 96, 815], "static_cross_entropi": [95, 96, 820], "20397282": [95, 96, 820, 824], "83258148": [95, 96, 820, 824], "60943794": [95, 96, 820, 824], "static_sparse_cross_entropi": [95, 96, 825], "static_clip": [97, 98, 831], "658": [99, 100, 912, 913, 915, 916, 917], "04": [99, 100, 729, 741, 912, 913, 915, 916, 917], "759": [99, 100, 912, 913, 915, 916, 917], "42": [99, 100, 101, 102, 137, 160, 166, 169, 691, 693, 696, 742, 780, 782, 913, 915, 917, 918, 920, 922, 928, 955, 956, 959], "403": [99, 100, 913, 915, 917], "62": [99, 100, 101, 102, 368, 578, 581, 913, 915, 917, 920, 922], "54": [99, 100, 119, 368, 436, 439, 440, 443, 583, 586, 729, 741, 742, 780, 782, 913, 915, 917, 918, 923, 955, 956, 959], "static_layer_norm": [99, 100, 913], "static_randint": [101, 102, 920], "20": [101, 102, 134, 368, 428, 431, 457, 460, 564, 567, 583, 586, 742, 754, 756, 780, 782, 799, 801, 918, 920, 921, 922, 930, 933, 934, 955, 956, 959], "40": [101, 102, 368, 440, 443, 583, 586, 742, 780, 782, 920, 922, 955, 956, 959], "52": [101, 102, 691, 693, 696, 742, 780, 782, 920, 922, 935, 936, 955, 956, 959], "95": [101, 102, 368, 568, 571, 691, 693, 696, 920, 922], "13": [101, 102, 119, 121, 126, 368, 408, 411, 428, 431, 440, 443, 583, 586, 610, 628, 691, 693, 696, 729, 741, 742, 754, 756, 780, 782, 920, 922, 930, 934, 935, 936, 955, 956, 959], "static_random_uniform": [101, 102, 924], "static_unique_count": [105, 106, 937], "classivi": [105, 106, 830, 869, 935, 937, 938, 940, 941], "static_argsort": [107, 108, 945], "static_sort": [107, 108, 950], "static_al": [111, 112, 989], "static_ani": [111, 112, 994], "add_ivy_container_instance_method": 113, "containerexampl": [113, 114], "who": [115, 131, 149], "mainli": [115, 133, 135], "under": [115, 118, 119, 120, 121, 122, 126, 131, 132, 135, 137], "hood": [115, 119, 121, 122, 126, 131, 132, 135, 137], "weed": [115, 131], "behind": [115, 121, 131, 133, 691, 698, 700, 703, 705, 711, 713, 715, 717, 719, 721], "tour": 115, "primari": [115, 121, 123, 129, 149], "composit": [115, 121, 123, 125, 126, 129, 132, 136, 137, 149], "nestabl": [115, 118, 119, 121, 129, 175, 176, 177, 179, 182, 184, 185, 188, 190, 191, 193, 196, 198, 199, 202, 204, 205, 207, 208, 210, 213, 220, 221, 223, 226, 228, 232, 233, 237, 238, 240, 241, 245, 246, 267, 270, 368, 369, 372, 382, 385, 387, 390, 391, 394, 432, 435, 465, 468, 537, 548, 551, 568, 571, 573, 576, 583, 586, 587, 590, 596, 600, 610, 638, 729, 732, 741, 742, 743, 746, 754, 756, 830, 864, 867, 912, 913, 916, 935, 937, 941, 955, 960, 963, 988, 989, 992], "dynam": [115, 127, 128, 129, 132, 172, 173], "runtim": [115, 121, 318], "h": [115, 126, 729, 732, 733, 734, 735, 736, 894, 897], "j": [115, 610, 618, 619, 742, 802, 804, 955, 956, 959], "n": [115, 121, 175, 210, 213, 228, 232, 233, 237, 610, 619, 729, 737, 742, 754, 756, 766, 769, 773, 774, 776, 777, 779, 780, 782, 783, 785, 786, 788, 793, 795, 796, 798, 802, 804, 805, 807, 808, 810, 811, 813, 830, 840, 843, 844, 847, 852, 855, 874, 877, 886, 889, 918, 923, 924, 926, 930, 933, 955, 964, 967, 976, 979, 980, 983, 984, 987, 988, 989, 992, 994, 997], "borrow": 115, "taken": [116, 130, 137, 742, 754, 756], "constant": [116, 122, 136, 137, 149, 318, 327, 328, 830, 840, 843, 894, 900, 912, 913, 916, 1011, 1012, 1016, 1019, 1032, 1033, 1034, 1035], "compil": [116, 126, 131, 133, 149, 999, 1032, 1033, 1036, 1037, 1038, 1039, 1040, 1041], "meta": [116, 125, 891, 892, 893], "overlap": 116, "sever": [116, 149, 742, 763, 765], "judgement": 116, "locat": [116, 121, 123, 128, 918, 919], "some_namespac": 116, "some_backend": 116, "another_backend": 116, "break": [116, 117, 130, 134, 149, 999], "anyth": [116, 121, 999], "refactor": 116, "ongo": 116, "subfold": [116, 121], "via": [116, 126, 127, 128, 129, 132, 134, 135, 148, 894, 895, 904, 905], "file_nam": [116, 121], "my_func": [116, 119], "int": [116, 117, 119, 122, 126, 127, 128, 129, 130, 137, 160, 165, 172, 173, 175, 190, 191, 198, 199, 202, 204, 205, 207, 208, 228, 232, 233, 237, 246, 262, 265, 275, 280, 281, 284, 288, 291, 299, 302, 318, 340, 343, 344, 345, 346, 354, 355, 356, 362, 363, 368, 408, 411, 412, 415, 416, 419, 420, 423, 424, 427, 428, 431, 610, 616, 628, 629, 632, 633, 634, 637, 638, 647, 663, 666, 675, 689, 691, 693, 696, 698, 700, 711, 713, 729, 730, 732, 734, 735, 736, 742, 748, 750, 754, 756, 799, 801, 802, 804, 805, 807, 808, 810, 814, 820, 823, 825, 828, 830, 836, 839, 840, 843, 844, 847, 848, 851, 852, 855, 856, 859, 864, 867, 869, 870, 873, 874, 877, 878, 881, 882, 885, 886, 889, 890, 891, 892, 893, 894, 897, 906, 912, 913, 916, 918, 919, 920, 921, 928, 930, 931, 932, 944, 945, 948, 950, 953, 955, 960, 963, 964, 967, 968, 971, 976, 979, 980, 983, 984, 987, 988, 989, 992, 994, 997], "nativedtyp": [116, 117, 127, 128, 175, 176, 177, 179, 182, 184, 185, 188, 190, 191, 198, 199, 202, 215, 218, 220, 221, 223, 226, 238, 240, 241, 245, 246, 251, 252, 255, 274, 275, 276, 279, 304, 317, 955, 980, 983], "nativedevic": [116, 117, 127, 128, 175, 176, 177, 179, 182, 184, 185, 188, 190, 191, 198, 199, 202, 204, 205, 207, 208, 215, 218, 220, 221, 223, 226, 238, 240, 241, 245, 318, 335, 336, 337, 351, 357, 359, 361, 363, 364, 367, 610, 663, 918, 919, 920, 921, 923, 924, 926], "my": 116, "numer": [116, 136, 175, 210, 213, 246, 252, 255, 368, 369, 372, 382, 385, 432, 435, 444, 447, 461, 464, 465, 468, 469, 472, 481, 484, 485, 488, 489, 492, 493, 496, 525, 528, 529, 532, 539, 542, 544, 547, 548, 551, 556, 559, 560, 563, 568, 571, 587, 590, 591, 595, 606, 609, 610, 645, 646, 668, 669, 676, 677, 742, 748, 750, 766, 769, 780, 782, 793, 795, 799, 801, 802, 804, 805, 807, 918, 929, 930, 931, 932, 955, 960, 963, 972, 975, 980, 983, 1011], "cooler": 116, "produc": [116, 121, 318, 327, 328, 729, 741], "something_cool": 116, "category_nam": [117, 118, 122, 127, 128], "backend_nam": [117, 118, 122, 123, 124, 127, 128], "adress": 117, "conveni": [117, 127, 128, 133, 135, 136], "revisit": [117, 137], "dedic": [117, 134, 136, 691, 727, 1009, 1010], "four": [117, 119, 122, 127, 135], "float": [117, 118, 121, 122, 126, 127, 129, 134, 136, 160, 162, 174, 175, 176, 177, 184, 190, 191, 198, 199, 202, 204, 205, 207, 208, 220, 221, 238, 240, 246, 252, 255, 274, 281, 284, 294, 297, 305, 308, 318, 351, 357, 361, 364, 367, 368, 369, 372, 374, 377, 378, 381, 382, 385, 387, 390, 391, 394, 396, 399, 400, 403, 404, 407, 428, 431, 432, 435, 436, 439, 440, 443, 444, 447, 449, 452, 457, 460, 461, 464, 465, 468, 469, 472, 473, 476, 477, 480, 493, 496, 501, 504, 505, 508, 513, 516, 517, 520, 539, 542, 544, 547, 548, 551, 552, 555, 556, 559, 560, 563, 564, 567, 573, 576, 578, 581, 583, 586, 591, 595, 596, 600, 601, 605, 606, 609, 610, 622, 623, 625, 637, 645, 646, 668, 669, 676, 677, 691, 693, 696, 698, 700, 703, 705, 711, 713, 715, 717, 719, 721, 729, 732, 736, 741, 742, 743, 746, 751, 753, 757, 759, 760, 762, 763, 765, 774, 776, 783, 785, 786, 788, 790, 792, 793, 795, 808, 810, 814, 815, 818, 820, 823, 825, 828, 890, 891, 892, 893, 912, 913, 916, 918, 923, 924, 926, 935, 936, 937, 941, 943, 955, 960, 963, 964, 967, 968, 971, 972, 975, 976, 979, 980, 983, 984, 987], "tf": [117, 125, 127, 128, 129, 132, 137, 149, 999], "jnp": [117, 127, 128, 129, 137, 999], "jaxarrai": [117, 127, 128, 129], "wherea": [117, 119, 121, 122, 125, 127, 128, 137], "__sub__": [117, 119, 125, 126, 134], "__mul__": [117, 119, 125, 126, 134], "__div__": 117, "permit": [117, 121, 125], "dicat": 117, "addition": [117, 129], "omit": [117, 129, 935, 936, 937, 941, 943], "wrapper": [117, 124, 125, 126, 127, 129, 134], "contrast": [117, 118], "futher": 117, "respect": [117, 119, 121, 125, 126, 127, 130, 175, 210, 213, 368, 369, 372, 382, 385, 400, 403, 408, 411, 416, 419, 420, 423, 424, 427, 428, 431, 444, 447, 449, 452, 469, 472, 473, 476, 477, 480, 493, 496, 497, 500, 517, 520, 521, 524, 529, 532, 533, 536, 539, 542, 548, 551, 560, 563, 591, 595, 691, 693, 696, 698, 700, 702, 703, 705, 711, 713, 715, 717, 719, 721, 742, 786, 788, 890, 891, 892, 893], "absenc": 117, "pep": 117, "484": 117, "annot": [117, 130], "dictat": [117, 119, 125, 129], "brittl": 117, "intend": [117, 955, 980, 983], "subset": [117, 118, 121, 132], "freeli": 117, "extend": [117, 118, 123], "consum": [117, 121, 126, 318], "inde": [117, 149], "flexibl": 117, "technic": [117, 126, 129, 149], "original_typ": 117, "cumbersom": 117, "readabl": [117, 125, 126, 134, 135], "account": 118, "instanti": 118, "firstli": [118, 119, 122, 125, 127, 129, 135], "templat": [118, 121, 999], "spec": [118, 119], "api_specif": [118, 175, 176, 177, 179, 182, 184, 185, 188, 190, 191, 193, 196, 198, 199, 202, 204, 205, 220, 221, 223, 226, 228, 232, 233, 237, 238, 240, 241, 245, 246, 267, 270, 368, 369, 372, 387, 390, 391, 394, 428, 431, 432, 435, 440, 443, 465, 468, 537, 548, 551, 573, 576, 583, 586, 587, 590, 742, 754, 756, 830, 844, 847, 864, 867, 935, 936, 937, 941, 944, 945, 948, 955, 960, 963], "array_api": 118, "preview": 118, "render": 118, "incorrectli": [118, 130], "onlin": [118, 999], "approxim": [118, 160, 161, 368, 374, 377, 378, 381, 387, 390, 391, 394, 396, 399, 400, 403, 436, 439, 440, 443, 457, 460, 461, 464, 501, 504, 505, 508, 509, 512, 513, 516, 556, 559, 573, 576, 578, 581, 596, 600, 601, 605, 742, 774, 776, 783, 785], "tangent": [118, 160, 171, 368, 396, 399, 400, 403, 404, 407, 596, 600, 601, 605], "domain": [118, 368, 374, 377, 378, 381, 387, 390, 391, 394, 396, 399, 400, 403, 436, 439, 440, 443, 457, 460, 461, 464, 501, 504, 505, 508, 513, 516, 573, 576, 578, 581, 583, 586, 596, 600, 601, 605], "infin": [118, 174, 246, 252, 255, 368, 369, 372, 378, 381, 382, 385, 391, 394, 396, 399, 400, 403, 432, 435, 436, 439, 440, 443, 457, 460, 461, 464, 465, 468, 469, 472, 481, 484, 485, 488, 501, 504, 505, 508, 513, 516, 517, 520, 539, 542, 556, 559, 560, 563, 564, 567, 573, 576, 578, 581, 583, 586, 596, 600, 601, 605, 606, 609, 742, 808, 810, 955, 960, 963, 968, 971, 988, 989, 992, 994, 997], "codomain": [118, 368, 374, 377, 378, 381, 387, 390, 391, 394, 396, 399, 400, 403, 436, 439, 440, 443, 457, 460, 461, 464, 501, 504, 505, 508, 513, 516, 573, 576, 578, 581, 583, 586, 596, 600, 601, 605], "x_i": [118, 368, 369, 372, 374, 377, 378, 381, 387, 390, 391, 394, 396, 399, 412, 415, 432, 435, 436, 439, 440, 443, 457, 460, 461, 464, 465, 468, 481, 484, 485, 488, 489, 492, 501, 504, 505, 508, 513, 516, 525, 528, 544, 547, 564, 567, 568, 571, 573, 576, 578, 581, 583, 586, 587, 590, 596, 600, 601, 605, 606, 609, 935, 936, 937, 941, 943, 955, 960, 963, 964, 967, 968, 971, 976, 979, 980, 983, 984, 987], "assum": [118, 121, 123, 127, 134, 135, 149, 175, 176, 177, 179, 182, 184, 185, 188, 190, 191, 193, 196, 198, 199, 202, 204, 205, 207, 208, 210, 213, 220, 221, 223, 226, 228, 232, 233, 237, 238, 240, 241, 245, 246, 267, 270, 368, 369, 372, 382, 385, 387, 390, 391, 394, 408, 411, 428, 431, 432, 435, 436, 439, 440, 443, 465, 468, 537, 548, 551, 564, 567, 568, 571, 573, 576, 583, 586, 587, 590, 596, 600, 601, 605, 610, 638, 729, 732, 741, 742, 743, 746, 751, 753, 754, 756, 830, 844, 847, 848, 851, 864, 867, 912, 913, 916, 935, 936, 937, 941, 944, 945, 948, 955, 960, 963, 988, 989, 992], "express": [118, 130, 132, 137, 368, 374, 377, 387, 390, 396, 399, 400, 403, 436, 439, 573, 576, 596, 600], "radian": [118, 368, 374, 377, 387, 390, 396, 399, 400, 403, 436, 439, 573, 576, 596, 600], "operand": [118, 368, 374, 377, 378, 381, 382, 385, 387, 390, 391, 394, 396, 399, 400, 403, 428, 431, 432, 435, 436, 439, 440, 443, 457, 460, 461, 464, 465, 468, 501, 504, 505, 508, 513, 516, 517, 520, 539, 542, 556, 559, 560, 563, 564, 567, 573, 576, 578, 581, 583, 586, 596, 600, 601, 605, 606, 609, 955, 956, 959, 960, 963, 968, 971, 980, 983], "whose": [118, 121, 175, 228, 232, 233, 237, 368, 378, 381, 391, 394, 404, 407, 436, 439, 440, 443, 556, 559, 573, 576, 578, 581, 596, 600, 601, 605, 610, 621, 742, 743, 746, 751, 753, 754, 756, 757, 759, 760, 762, 763, 765, 774, 776, 777, 779, 780, 782, 783, 785, 786, 788, 790, 792, 793, 795, 796, 798, 802, 804, 830, 848, 851, 864, 867, 935, 936, 937, 941, 955, 956, 959], "ref": [118, 368, 424, 427, 493, 496, 539, 542, 548, 551, 560, 563, 591, 595, 830, 874, 877], "promot": [118, 122, 127, 246, 252, 255, 267, 270, 304, 305, 308, 313, 368, 374, 377, 378, 381, 382, 385, 387, 390, 391, 394, 396, 399, 404, 407, 408, 411, 416, 419, 420, 423, 424, 427, 428, 431, 436, 439, 440, 443, 444, 447, 457, 460, 461, 464, 501, 504, 505, 508, 513, 516, 517, 520, 533, 536, 539, 542, 556, 559, 560, 563, 573, 576, 578, 581, 583, 586, 596, 600, 601, 605, 742, 743, 746, 748, 750, 763, 765, 766, 769, 774, 776, 780, 782, 783, 785, 790, 792, 805, 807, 808, 810, 830, 874, 877, 955, 964, 967], "But": [118, 126, 137], "needless": 118, "info": [118, 999], "renam": 118, "conform": [118, 175, 176, 177, 179, 182, 184, 185, 188, 190, 191, 193, 196, 198, 199, 202, 204, 205, 210, 213, 220, 221, 223, 226, 228, 232, 233, 237, 238, 240, 241, 245, 246, 267, 270, 368, 369, 372, 382, 385, 387, 390, 391, 394, 408, 411, 428, 431, 432, 435, 440, 443, 461, 464, 465, 468, 497, 500, 537, 548, 551, 564, 567, 568, 571, 573, 576, 583, 586, 587, 590, 596, 600, 601, 605, 742, 751, 753, 754, 756, 830, 844, 847, 848, 851, 864, 867, 935, 936, 937, 941, 944, 945, 948, 955, 960, 963, 988, 989, 992], "org": [118, 175, 176, 177, 179, 182, 184, 185, 188, 190, 191, 193, 196, 198, 199, 202, 204, 205, 220, 221, 223, 226, 228, 232, 233, 237, 238, 240, 241, 245, 246, 267, 270, 368, 369, 372, 387, 390, 391, 394, 428, 431, 432, 435, 440, 443, 465, 468, 537, 548, 551, 573, 576, 583, 586, 587, 590, 691, 693, 696, 698, 700, 742, 754, 756, 830, 844, 847, 864, 867, 935, 936, 937, 941, 944, 945, 948, 955, 960, 963], "elementwise_funct": [118, 368, 369, 372, 387, 390, 391, 394, 428, 431, 432, 435, 440, 443, 465, 468, 537, 548, 551, 573, 576, 583, 586, 587, 590, 742, 754, 756, 830, 864, 867, 935, 936, 944, 945, 948, 955, 960, 963], "descript": [118, 121, 126, 175, 176, 177, 179, 182, 184, 185, 188, 190, 191, 193, 196, 198, 199, 202, 204, 205, 207, 208, 210, 213, 220, 221, 223, 226, 228, 232, 233, 237, 238, 240, 241, 245, 246, 267, 270, 368, 369, 372, 382, 385, 387, 390, 391, 394, 408, 411, 428, 431, 432, 435, 440, 443, 465, 468, 537, 548, 551, 564, 567, 568, 571, 573, 576, 583, 586, 587, 590, 596, 600, 601, 605, 610, 638, 729, 732, 741, 742, 743, 746, 751, 753, 754, 756, 808, 810, 830, 844, 847, 848, 851, 864, 867, 912, 913, 916, 935, 936, 937, 941, 944, 945, 948, 955, 960, 963, 988, 989, 992], "simplic": [118, 136, 148, 175, 176, 177, 179, 182, 184, 185, 188, 190, 191, 193, 196, 198, 199, 202, 204, 205, 207, 208, 210, 213, 220, 221, 223, 226, 228, 232, 233, 237, 238, 240, 241, 245, 246, 267, 270, 368, 369, 372, 382, 385, 387, 390, 391, 394, 408, 411, 428, 431, 432, 435, 440, 443, 465, 468, 537, 548, 551, 564, 567, 568, 571, 573, 576, 583, 586, 587, 590, 596, 600, 601, 605, 610, 638, 729, 732, 741, 742, 743, 746, 751, 753, 754, 756, 830, 844, 847, 848, 851, 864, 867, 912, 913, 916, 935, 936, 937, 941, 944, 945, 948, 955, 960, 963], "judgment": 118, "beyond": [118, 830, 864, 867], "text": 118, "func_nam": [118, 119, 122], "pure": [118, 134, 137, 149], "themselv": [118, 122, 126, 127, 128, 136, 894, 895], "operator_nam": 118, "succinct": 118, "contstructor": 118, "though": [118, 122, 127, 135, 149], "forward": [118, 121, 137, 148, 149, 1032, 1033, 1036, 1040], "_forward": [118, 132, 135, 136, 999], "former": 118, "explicitli": [118, 122, 123, 125, 126, 129, 132, 149, 742, 757, 759, 1020, 1029, 1031, 1032, 1033], "latter": [118, 123], "implicit": [118, 121, 126, 132], "docst": 118, "eight": 119, "static_": 119, "op_nam": 119, "__r": 119, "__truediv__": [119, 125, 126], "recap": [119, 126, 136], "independ": [119, 120, 124, 126, 132, 137, 742, 748, 750, 790, 792, 918, 919], "combinatorili": 119, "variat": [119, 121], "grid": [119, 121, 148, 175, 210, 213], "vari": [119, 121, 126, 134, 935, 936, 937, 941, 943], "simplest": [119, 121], "small": [119, 122, 132, 136, 149, 368, 539, 542, 742, 774, 776, 783, 785, 912, 913, 916, 1034, 1035], "unus": [119, 129, 130, 172, 173], "excess": [119, 123, 134], "okai": [119, 132], "showcas": [119, 148], "demonstr": [119, 134], "replic": [119, 127], "meant": 119, "imaginari": 119, "some_flag": 119, "another_flag": 119, "jointli": 119, "three": [119, 121, 126, 131, 175, 210, 213, 999], "x0": [119, 610, 618], "procedur": 119, "sens": [119, 126, 134], "5574077": 119, "1850398": 119, "5463025": 119, "8422884": 119, "91601413": 119, "9647598": 119, "3738229": 119, "1597457": 119, "0963247": 119, "9955841": 119, "3278579": 119, "multi": [119, 126, 131, 149, 729, 740, 742, 748, 750, 999, 1005, 1020, 1031], "seper": [119, 610, 637], "pars": [119, 149], "satisfi": [119, 742, 811, 813], "far": [119, 128, 133, 134, 894, 895, 905], "asid": [119, 148], "irrelev": [119, 127], "increasingli": 119, "complex": [119, 135, 136, 137, 149, 742, 757, 759, 793, 795], "rule": [119, 121, 122, 125, 126, 127, 130, 246, 252, 255, 267, 270, 305, 308, 368, 404, 407, 424, 427, 444, 447, 539, 542, 560, 563, 742, 743, 746, 748, 750, 780, 782, 790, 792], "14254655": 119, "1578213": 119, "380515": 119, "17": [119, 126, 160, 162, 742, 754, 756, 918, 923], "trivial": 119, "By": [119, 122, 126, 129, 136, 137, 610, 628, 629, 742, 805, 807, 830, 856, 859, 955, 960, 963, 964, 967, 968, 971, 972, 975, 976, 979, 980, 983, 984, 987, 988, 989, 992, 994, 997], "non": [119, 126, 127, 132, 172, 173, 246, 252, 255, 293, 368, 525, 528, 529, 532, 729, 732, 742, 751, 753, 774, 776, 793, 795, 799, 801, 805, 807, 808, 810, 930, 931, 932, 933, 955, 960, 963, 964, 967, 968, 971, 972, 975, 984, 987, 988, 989, 992, 994, 997, 1032, 1033, 1036, 1040], "exlud": 119, "unit": [120, 121, 149, 160, 161, 162, 163, 318], "thoroughli": 120, "ci": [120, 121, 149], "failur": 120, "On": [121, 130, 133, 137], "fixtur": 121, "300": [121, 368, 564, 567], "hit": [121, 132], "action": 121, "eleg": 121, "intellig": 121, "sampl": [121, 729, 737, 918, 919, 923, 924, 926, 955, 976, 979, 984, 987, 1020, 1028], "rang": [121, 135, 136, 137, 175, 176, 177, 204, 205, 207, 208, 935, 936, 955, 972, 975, 980, 983, 999], "cach": [121, 122, 318, 336, 610, 621], "unexplor": 121, "known": 121, "repeatedli": [121, 126, 894, 903], "upload": 121, "artifact": 121, "parametr": 121, "statement": [121, 130, 149], "plai": [121, 137], "varieti": [121, 127, 128], "wide": 121, "valid_int_dtyp": 121, "int8": [121, 127, 246, 286, 317], "int16": [121, 127, 246, 267, 270, 286, 955, 972, 975, 980, 983], "uint8": [121, 127, 246, 267, 270, 286, 317], "uint16": [121, 127, 246, 287, 955, 972, 975, 980, 983], "uint32": [121, 127, 246, 287, 955, 972, 975, 980, 983], "uint64": [121, 127, 246, 287, 955, 972, 975, 980, 983], "custom_strategi": 121, "st": 121, "sampled_from": 121, "min_siz": 121, "max_siz": 121, "wherein": 121, "referenc": 121, "print_hypothesis_exampl": 121, "searchstrategi": 121, "randomis": 121, "simplist": 121, "intricaci": 121, "briefli": [121, 122, 135], "bound": [121, 132], "mechan": [121, 147, 149, 999], "power": [121, 134, 135, 136, 368, 424, 427, 457, 460, 556, 559, 610, 645, 668, 677, 742, 773, 1011], "math": [121, 129, 137, 999], "inclus": [121, 129, 175, 176, 177, 918, 920, 921], "width": 121, "losslessli": 121, "mostli": 121, "drawn": [121, 918, 919, 920, 921, 923, 924, 926], "one_of": 121, "datum": 121, "pipe": 121, "overload": 121, "shorthand": 121, "draw": [121, 918, 919, 923, 924, 926], "input_dtyp": 121, "reject": 121, "flatmap": 121, "suppos": 121, "valid": [121, 127, 132, 246, 272, 729, 730, 731, 732, 733, 734, 735, 736, 830, 874, 877, 988, 989, 992, 994, 997, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027], "dataobject": 121, "test_argsort": 121, "decor": [121, 122, 124, 126, 127, 128, 129], "initialis": [121, 318], "snippet": 121, "dtype_and_x": 121, "dtype_and_valu": 121, "valid_float_dtyp": 121, "list_of_length": 121, "num_positional_arg": 121, "instance_method": 121, "alpha": [121, 160, 162], "test_leaky_relu": 121, "fw": [121, 729, 730, 731, 732, 733, 734, 735, 736], "float16": [121, 127, 246, 287, 317], "exhaust": 121, "num_posit": 121, "indirectli": 121, "advis": 121, "seri": 121, "9433925": 121, "401298464324817e": 121, "574352379": 121, "99999": 121, "2250738585072014e": 121, "308": 121, "103515625e": 121, "unpack": [121, 130, 610, 689], "seamlessli": 121, "edg": [121, 132, 137, 830, 831, 834, 840, 843, 886, 889, 999], "encount": 121, "criterion": 121, "straight": [121, 134, 999], "array_valu": 121, "valid_ax": 121, "hand": [121, 122, 130, 149], "craft": 121, "polici": [121, 148], "hoc": 121, "overview": [121, 131, 148], "array_dtyp": 121, "array_bool": 121, "na": 121, "test_concat": 121, "test_devic": 121, "array_shap": 121, "test_manipul": 121, "common_shap": 121, "test_lay": 121, "size_bound": 121, "precis": [121, 246, 281, 284, 368, 539, 542, 583, 586], "283405296074752": 121, "564049465049088": 121, "0417876997507982e": 121, "min_valu": 121, "max_valu": 121, "allow_inf": 121, "min_num_dim": 121, "wherev": 121, "reshape_shap": 121, "larger": [121, 132, 137, 246, 281, 284, 830, 831, 834, 864, 867, 955, 976, 979, 984, 987], "stand": 121, "alon": [121, 318, 357, 367], "fashion": 121, "some_sequ": 121, "06": [121, 691, 693, 696], "allow_subnorm": 121, "exclude_min": 121, "960464477539063e": 121, "08": [121, 368, 391, 394, 729, 741], "coverag": 121, "allow_nan": 121, "Such": 121, "kind": [121, 149, 246, 281, 284, 288, 291, 368, 556, 559, 955, 972, 975, 980, 983], "get_shap": 121, "allow_non": 121, "max_num_dim": 121, "min_dim_s": 121, "none_or_list_of_float": 121, "200": 121, "199": [121, 368, 391, 394], "99999999999997": 121, "000000000000002": 121, "125": 121, "43759670925832": 121, "get_mean_std": 121, "probabilist": 121, "811428143185347e": 121, "89": [121, 368, 428, 431, 742, 799, 801, 955, 980, 983], "none_or_list_float": 121, "get_bound": 121, "arrays_valu": 121, "put": [121, 149], "36418": 121, "213": 121, "21716926": 121, "get_prob": 121, "unnorm": [121, 918, 919], "099609375": 121, "get_axi": 121, "number_positional_argu": 121, "mind": [121, 125, 126], "bodi": 121, "test_valu": 121, "logic": [121, 124, 125, 127, 128, 134, 318, 354, 368, 521, 524, 525, 528, 529, 532, 988, 989, 992, 994, 997, 999], "enough": [121, 134, 135, 136], "autom": [121, 999], "report": 121, "test_demo": 121, "falsifi": 121, "failing_test": 121, "traceback": 121, "123": [121, 610, 635], "assertionerror": [121, 691, 728], "shrink": 121, "prescrib": 121, "behavior": [121, 132, 149, 368, 556, 559, 560, 563, 935, 936, 937, 941, 943], "identifi": 121, "closest": [121, 246, 272, 368, 432, 435, 465, 468, 469, 472, 564, 567, 606, 609], "checkout": 121, "scratch": 121, "databas": 121, "therebi": 121, "debug": [121, 126, 135], "event": [121, 999], "test_gelu": 121, "test_fil": 121, "brief": 121, "phase": [121, 149], "reus": 121, "notabl": 121, "displai": [121, 126, 135], "verbos": [121, 132, 999, 1046], "newer": 121, "max_exampl": 121, "impact": [121, 136], "deadlin": 121, "weird": 121, "verifi": [121, 127, 128, 134, 999, 1005], "truth": [121, 368, 449, 452, 473, 476, 477, 480, 493, 496, 497, 500, 548, 551], "opt": [121, 123, 129, 134], "defer": [121, 122, 125, 126, 127, 128, 129], "suffic": [121, 124], "catch": [121, 610, 631], "systemat": 121, "safeguard": 121, "inabl": 121, "fact": [121, 135], "categor": [122, 128], "mutual": [122, 126], "constitut": [122, 132, 955, 976, 979, 984, 987], "venn": 122, "diagram": 122, "light": [122, 149], "log_pr": [122, 126, 129], "array_arg": 122, "typic": 122, "whatsoev": [122, 126], "commonli": [122, 955, 976, 979, 984, 987], "outsid": [122, 128, 130, 132, 134, 137, 830, 831, 834, 874, 877], "denomin": [122, 149, 610, 636, 646, 669, 676, 677, 912, 913, 916, 1034, 1035], "divis": [122, 368, 424, 427, 444, 447, 469, 472, 560, 563, 610, 636, 646, 669, 676, 677, 691, 693, 696, 698, 700, 711, 713, 1036, 1037, 1038], "deal": [122, 149], "concurr": [122, 126], "weight": [122, 126, 136, 137, 691, 693, 696, 698, 700, 703, 705, 711, 713, 715, 717, 719, 721, 729, 738, 739, 741, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1029, 1030, 1032, 1033, 1036, 1038, 1039], "modif": 122, "group": [122, 126], "cast": [122, 127, 246, 252, 255, 267, 270, 830, 836, 839, 955, 972, 975, 980, 983, 999], "get_all_arrays_on_dev": 122, "nested_map": [122, 894], "index_nest": [122, 894], "implicit_backend": 123, "unless": [123, 128, 129, 149, 368, 539, 542, 610, 663], "__dict__": [123, 132, 134], "ivy_original_dict": [123, 132], "unmodifi": [123, 127], "moment": [123, 149, 691, 693, 696, 698, 700, 711, 713, 1036, 1037, 1038], "fallback": 123, "freedom": [123, 955, 976, 979, 984, 987], "recommend": [123, 368, 525, 528, 529, 532, 560, 563, 955, 964, 967], "achiev": [124, 130, 135, 137], "topic": [124, 134], "_data": [125, 134], "organiz": [125, 126], "inherit": [125, 126, 134], "bear": [125, 126, 127], "necessarili": [125, 126], "although": [125, 126], "underpin": [125, 126, 132], "programmat": [125, 126], "backup": [125, 126], "accident": [125, 126], "absent": [125, 126], "perk": [125, 126], "auto": [125, 126, 135], "throw": [125, 134], "imposs": 125, "coupl": [125, 126, 134, 136], "anywai": 125, "secondli": [125, 127], "easier": 125, "five": [126, 135], "decis": [126, 132, 134], "arbitrarili": [126, 135], "__repr__": 126, "control": [126, 127, 129, 134, 135, 148], "__getattr__": 126, "underli": [126, 368, 408, 411, 420, 423, 428, 431, 533, 536], "__setattr__": 126, "__contains__": 126, "__getstate__": 126, "__setstate__": 126, "unpickl": 126, "expand": [126, 610, 637, 830, 844, 847], "children": 126, "shallowest": 126, "deepest": 126, "22": [126, 368, 428, 431, 742, 754, 756, 780, 782, 930, 934, 955, 956, 959], "retain_grad": [126, 691, 702], "dy": [126, 691, 702], "dx": [126, 691, 702], "autograd": [126, 149], "grad": [126, 135, 136, 137, 999, 1036, 1040], "redund": 126, "num_head": [126, 729, 740, 1020, 1031], "mask": [126, 729, 740, 741], "to_q_fn": [126, 729, 740], "to_kv_fn": [126, 729, 740], "to_out_fn": [126, 129, 729, 740], "to_q_v": [126, 729, 740], "to_kv_v": [126, 729, 740], "to_out_v": [126, 729, 740], "measur": [126, 729, 740, 1020, 1031], "dot": [126, 729, 740, 741, 742, 799, 801, 805, 807, 1020, 1031], "implicitli": 126, "intuit": [126, 135, 136], "chronolog": 126, "had": [126, 129], "sequenti": [126, 136], "flow": [126, 148], "implic": 126, "slightli": [126, 132, 136], "eager": [126, 149], "bfloat16": [127, 246, 286], "all_dtyp": 127, "all_numeric_dtyp": 127, "all_int_dtyp": 127, "all_float_dtyp": 127, "fall": [127, 131, 999, 1032, 1033, 1036, 1040], "invalid": [127, 130, 742, 805, 807, 988, 989, 992, 994, 997], "thirdli": 127, "native_float32": [127, 246, 317], "importantli": [127, 134, 137, 148], "arguabl": [127, 128], "compound": 127, "overflow": [127, 368, 382, 385, 955, 980, 983], "arr": [127, 128], "scalar": [127, 132, 137, 149, 175, 199, 202, 610, 663, 686, 690, 742, 808, 810], "settabl": [127, 128], "mx": [127, 128, 129, 999], "nd": [127, 128, 129, 132, 137, 999], "deleg": 127, "idx": [128, 134, 610, 616], "tpu": [128, 318, 340, 365], "aliv": [128, 318, 352, 356, 358, 610, 644, 662, 664], "amount": [128, 318, 364, 814, 815, 818, 820, 823, 825, 828], "memori": [128, 129, 147, 149, 318, 336, 357, 362, 364, 367, 729, 739, 999], "dual": 128, "thrown": [128, 149, 610, 654], "rare": [128, 149], "program": 129, "strictli": 129, "ration": 129, "speak": 129, "subtli": 129, "ensure_in_backend": [129, 610, 654], "x_nativ": 129, "val_n": 129, "assign": [129, 130, 134], "elif": 129, "irrespect": [129, 134, 246, 252, 255], "unspecifi": [129, 368, 556, 559, 560, 563, 742, 757, 759, 830, 874, 877], "predominantli": [129, 148], "presenc": 129, "altern": [129, 135], "_wrap_fn": 129, "maxim": [129, 132], "inner": [129, 134, 742, 757, 759, 766, 769, 890, 891, 892, 893], "third": [129, 149, 742, 793, 795, 935, 936], "leverag": 129, "equival": [129, 135, 137, 175, 176, 177, 368, 424, 427, 525, 528, 529, 532, 560, 563, 742, 774, 776, 783, 785, 790, 792, 808, 810], "input_arrai": 129, "clean": [130, 132, 133, 135], "flake8": 130, "undefin": 130, "yield": [130, 930, 934], "handler": [130, 131, 133, 137, 999], "liter": [130, 742, 808, 810], "carri": 130, "star": 130, "byte": 130, "notimpl": 130, "notimplementederror": 130, "unsuccess": 130, "exce": [130, 368, 538], "black": 130, "disobei": 130, "successfulli": 130, "accordingli": [130, 175, 210, 213, 368, 461, 464, 742, 808, 810, 930, 932, 935, 936, 937, 941, 943, 955, 960, 963, 964, 967, 968, 971, 972, 975, 976, 979, 980, 983, 984, 987, 988, 989, 992, 994, 997], "comparison": 130, "sound": 131, "higher": [131, 132, 137, 149, 691, 698, 700, 703, 705, 711, 713, 715, 717, 719, 721], "fledg": [132, 133], "syntact": [132, 137], "clip_by_valu": [132, 137], "clamp": [132, 137], "fit": [132, 830, 856, 859], "construct": [132, 133, 136, 137, 830, 882, 885, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1029, 1030, 1031, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043], "power_seq": 132, "resid": [132, 136], "ml_framework": [132, 137, 175, 176, 177], "current_framework": [132, 137], "furthermor": 132, "concaten": [132, 135, 318, 347, 610, 637, 830, 836, 839, 999], "framework_handl": 132, "face": 132, "cprint": [132, 1045], "framework_stack": 132, "_determine_framework_from_arg": 132, "valueerror": [132, 830, 870, 873], "get_framework": 132, "neither": [132, 368, 382, 385, 539, 542, 691, 728], "illustr": [132, 148], "un": [132, 246, 293], "nn": [132, 137, 175, 210, 213, 999], "init_h": [132, 729, 739], "init_c": [132, 729, 739], "kernel": [132, 149, 729, 739], "recurrent_kernel": [132, 729, 739], "bia": [132, 136, 729, 738, 739, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1030], "recurrent_bia": [132, 729, 739], "x_shape": 132, "batch_shap": [132, 134, 137, 610, 663, 729, 739, 740, 741, 742, 811, 813, 918, 919, 1020, 1029], "timestep": [132, 729, 739, 1020, 1029], "input_channel": [132, 136, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1029, 1030], "x_flat": 132, "wi": 132, "wi_x": 132, "wii_x": 132, "wif_x": 132, "wig_x": 132, "wio_x": 132, "recurr": [132, 729, 739], "wh": 132, "lstm": [132, 729, 739, 1020], "ht": 132, "ct": 132, "hts_list": 132, "unrol": [132, 135, 729, 739], "wii_xt": 132, "wif_xt": 132, "wig_xt": 132, "wio_xt": 132, "zip": 132, "htm1": 132, "ctm1": 132, "wh_htm1": 132, "whi_htm1": 132, "whf_htm1": 132, "whg_htm1": 132, "who_htm1": 132, "ft": 132, "gt": 132, "ot": 132, "offici": 132, "reliabl": 132, "sacrific": 132, "hear": 132, "virtu": 132, "pure_ivi": 132, "reduce_mean": [132, 135, 136, 137, 999], "reduce_sum": [132, 999], "reduce_var": 132, "compile_graph": [132, 137], "pure_torch": 132, "cat": [132, 137], "backbon": [132, 135], "_layer": 132, "super": [132, 135, 136, 137], "random_unifrom": 132, "unclean": 132, "wx": 132, "temp": 132, "torchscript": 132, "fn": [132, 134, 150, 151, 152, 153, 154, 155, 156, 157, 158, 246, 286, 287, 318, 327, 328, 610, 616, 687, 894, 895, 900, 901, 902, 904, 905, 906, 1002, 1004], "example_input": [132, 172, 173], "static_argnum": [132, 172, 173], "static_argnam": [132, 172, 173], "jit": [132, 149], "frontend": 133, "primit": [133, 149], "hierarch": [133, 135, 136], "arraywithlinalg": 134, "arraywithlog": 134, "arraywithmath": 134, "arraywithmeta": 134, "arraywithreduct": 134, "_shape": 134, "_size": 134, "functool": 134, "mul": 134, "len": [134, 137, 175, 210, 213], "_dtype": 134, "_devic": 134, "_dev_str": 134, "_pre_repr": 134, "_post_repr": 134, "answer": [134, 149], "consol": 134, "typeerror": 134, "immut": 134, "behav": 134, "claim": 134, "truli": 134, "_native_wrapp": 134, "attributeerror": 134, "genuin": 134, "some_method": 134, "similarli": [134, 175, 210, 213], "rewritten": 134, "__pow__": 134, "strang": 134, "enforc": 134, "notic": 134, "appear": [134, 830, 844, 847], "invers": [134, 148, 368, 374, 377, 378, 381, 387, 390, 391, 394, 396, 399, 400, 403, 404, 407, 742, 763, 765, 783, 785], "_wrap_method": 134, "func_wrapp": [134, 150, 151, 152, 153, 154, 155, 156, 157, 158], "__name__": 134, "non_wrapped_method": 134, "_method_wrap": 134, "native_arg": 134, "native_kwarg": 134, "inner_fn": 134, "whist": 134, "unwrap": 134, "transit": 134, "needlessli": 134, "randn": 134, "_unwrap_method": 134, "method_wrap": 134, "compartment": 134, "public": [134, 610, 626], "newshap": 134, "new_shap": 134, "tidi": 134, "shorter": 134, "crystal": 134, "ton": 135, "ado": [135, 136], "incred": [135, 149], "hash": 135, "soup": 135, "walk": [135, 136], "dct": 135, "cnt": 135, "combo": [135, 999, 1005], "hold": [135, 610, 666, 667], "1000": [135, 368, 583, 586], "uda": 135, "3333": 135, "6667": 135, "178": 135, "new_weight": 135, "0600": 135, "3100": 135, "2400": 135, "6900": 135, "delimit": 135, "autocomplet": 135, "midwai": 135, "agent": 135, "total_spe": 135, "total_height": 135, "total_width": 135, "ag": 135, "tot": 135, "total_": 135, "total_h": 135, "batch_siz": [135, 729, 730, 731, 732, 733, 734, 735, 736, 918, 919], "dir": 135, "adam": [135, 136, 137, 691, 693, 696, 698, 700, 711, 713, 999, 1036, 1038], "cnt0": 135, "cnt1": 135, "diff_0": 135, "diff_1": 135, "config0": 135, "config1": 135, "Not": [135, 136, 149, 174], "helper": 135, "decod": 135, "l0": 135, "l1": [135, 742, 808, 810], "depth": [135, 136, 137, 148, 318, 342, 346, 350, 610, 648, 663, 894, 906, 1032, 1033], "clearer": 135, "truncat": 135, "decoder__l0": 135, "decoder__l1": 135, "encoder__l0": 135, "encoder__l1": 135, "height": 135, "l0__b": 135, "l0__w": 135, "l1__b": 135, "l1__w": 135, "printabl": 135, "obviou": 135, "foresight": 135, "untidili": 135, "update_ag": 135, "normalize_img": 135, "img": 135, "img_max": 135, "reduce_max": [135, 999], "img_min": 135, "reduce_min": [135, 999], "img_rang": 135, "agent_posit": 135, "agent_veloc": 135, "agent_cam_front_rgb": 135, "agent_cam_front_depth": 135, "agent_cam_rear_rgb": 135, "agent_cam_rear_depth": 135, "agent_cam_lidar": 135, "normal": [135, 830, 874, 877, 912, 913, 916, 918, 923, 1034, 1035], "cleaner": 135, "camera": 135, "front_rgb": 135, "front_depth": 135, "rear_rgb": 135, "rear_depth": 135, "lidar": 135, "rgb": 135, "rear": 135, "veloc": 135, "cam": 135, "cam_max": 135, "cam_min": 135, "cam_rang": 135, "Of": 135, "ideal": 135, "perman": 135, "afterward": 135, "thread": 135, "incorpor": 135, "pretti": 135, "straightforward": 135, "dataload": [135, 147, 999], "_cnt": 135, "img_": 135, "_dataset_s": 135, "_batch_siz": 135, "_count": [135, 136], "__next__": 135, "filenam": 135, "img_fnam": 135, "fname": 135, "loaded_img": 135, "cv2": 135, "imread": 135, "loader": [135, 149], "batch_slic": 135, "mymodel": [135, 999], "linear0": [135, 136, 999], "linear1": [135, 136, 999], "x_in": [135, 136, 137, 999], "loss_fn": [135, 136, 137, 999], "0145": 135, "grad_fn": 135, "addbackward0": 135, "_create_vari": 136, "output_channel": [136, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1029, 1030], "with_bia": [136, 1020, 1030], "_input_channel": 136, "_output_channel": 136, "_w_shape": 136, "_b_shape": 136, "_with_bia": 136, "8979": 136, "3198": 136, "0196": 136, "3126": 136, "3717": 136, "9687": 136, "6958": 136, "5122": 136, "3902": 136, "8800": 136, "5613": 136, "1982": 136, "nightmar": 136, "overcom": 136, "fc": 136, "9563": 136, "v0": 136, "v1": 136, "6440": 136, "key0": 136, "1823": 136, "8075": 136, "linear3": 136, "v2": 136, "2346": 136, "counter": 136, "hidden": [136, 729, 739, 1020, 1029], "fed": [136, 318, 362], "1300": 136, "decoupl": 136, "scheme": 136, "weight_initi": [136, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1029, 1030], "glorotuniform": [136, 1011, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1029, 1030], "bias_initi": [136, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1030], "_w_init": 136, "_b_init": 136, "create_vari": [136, 1011], "var_shap": [136, 1011], "fan_out": [136, 1011], "fan_in": [136, 1011], "fan_mod": [136, 1011], "fan_sum": 136, "slight": 136, "misnom": 136, "saw": 136, "vanilla": [136, 890, 892], "descent": [136, 691, 703, 705, 1036, 1041], "lar": [136, 691, 711, 713, 715, 717, 1036], "lamb": [136, 691, 711, 713, 1036], "compile_on_next_step": [136, 1032, 1033, 1036, 1037, 1038, 1039, 1040, 1041], "_beta1": 136, "_beta2": 136, "_epsilon": 136, "_mw": 136, "_vw": 136, "_first_pass": 136, "_should_compil": 136, "_step": [136, 1036, 1040], "new_v": 136, "_lr": 136, "isinst": [136, 137, 610, 680], "_inplac": 136, "_stop_gradi": 136, "set_stat": [136, 1036, 1037, 1038, 1039, 1040, 1041], "pre": [137, 149, 318], "captur": 137, "sparse_funct": 137, "num_class": [137, 918, 919], "num_dim": 137, "new_axi": 137, "_linear": 137, "to_backend": 137, "jax_graph": 137, "learnabl": [137, 912, 913, 916, 1034, 1035], "to_ivy_modul": [137, 1009], "thinli": 137, "whilst": 137, "to_haiku_modul": 137, "hk": 137, "loss_fn_t": 137, "transform": [137, 148, 729, 737, 738], "without_apply_rng": 137, "rng": 137, "prngkei": 137, "init": 137, "update_rul": 137, "tree_multimap": 137, "vision": [147, 999], "robot": [147, 999], "focus": 148, "field": [148, 742, 757, 759, 786, 788, 793, 795, 935, 936, 937, 941], "perfect": 148, "3d": [148, 1020, 1025, 1026], "differenti": 148, "demo": [148, 999], "orient": 148, "pose": 148, "euler": [148, 174], "quaternion": 148, "rotat": 148, "matric": [148, 175, 210, 213, 228, 232, 233, 237, 729, 738, 742, 743, 746, 751, 753, 754, 756, 757, 759, 760, 762, 763, 765, 773, 774, 776, 777, 779, 783, 785, 786, 788, 790, 792, 793, 795, 796, 798, 802, 804], "angl": [148, 368, 400, 403, 440, 443, 578, 581, 601, 605], "ivy_mech": 148, "target_facing_rotation_matrix": 148, "polar_to_cartesian_coord": 148, "ordin": [148, 742, 790, 792], "warp": 148, "optic": 148, "voxel": 148, "ivy_vis": 148, "coords_to_voxel_grid": 148, "render_pixel_coord": 148, "neural": [148, 729, 999, 1006, 1020], "radianc": 148, "nerf": 148, "trajectori": 148, "motion": 148, "plan": [148, 999], "mobil": 148, "ivy_robot": 148, "sample_spline_path": 148, "rigidmobil": 148, "sample_bodi": 148, "drone": 148, "sample_link": 148, "openai": 148, "swimmer": 148, "cumul": [148, 610, 628, 629], "reward": 148, "supervis": 148, "reinforc": 148, "door": [148, 149], "intersect": 148, "cartpol": 148, "mountain_car": 148, "pendulum": 148, "reacher": 148, "condit": [148, 172, 173, 894, 904, 905, 930, 934], "learnt": 148, "ture": 148, "ntm": 148, "egospher": 148, "spatial": 148, "esm": 148, "ivy_memori": 148, "egocentr": 148, "room": 148, "inspir": 148, "doubt": 149, "grate": 149, "probe": 149, "undergo": 149, "remark": 149, "surpris": 149, "backward": [149, 368, 560, 563, 742, 805, 807, 988, 989, 992, 994, 997], "lock": 149, "contunu": 149, "minor": 149, "xla": 149, "buffer": 149, "gold": 149, "dex": 149, "lax": 149, "scan": 149, "tricki": 149, "predictor": 149, "tight": 149, "driver": 149, "schedul": 149, "algorithm": [149, 729, 730, 731, 732, 733, 734, 735, 736, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027], "dispatch": 149, "Will": 149, "ast": 149, "dynamic": 149, "cond": 149, "jacobian": 149, "checkpoint": 149, "autodiff": 149, "shine": 149, "merci": 149, "superset": 149, "cluster": 149, "compet": 149, "paradigm": 149, "parallelis": [149, 318, 327, 328], "spmd": 149, "mixtur": [149, 691, 693, 696], "expert": 149, "sophist": 149, "depart": 149, "routin": 149, "hundr": 149, "thousand": 149, "deepli": [149, 894, 896], "broadli": 149, "heavili": 149, "supplementari": 149, "Is": 149, "reusabl": 149, "fanci": 149, "fusion": 149, "lose": 149, "vmap": 149, "pmap": 149, "overhead": 149, "ineffici": 149, "eventu": 149, "supplement": 149, "backdoor": 149, "callback": 149, "record": 149, "metric": 149, "somewhat": 149, "outsourc": 149, "inputs_to_ivy_arrai": 150, "gaussian": [160, 161], "leaki": [160, 161, 162], "rectifi": [160, 162, 163], "slope": [160, 162], "39": [160, 162, 368, 391, 394, 457, 460, 691, 693, 696, 742, 780, 782, 955, 956, 959], "85": [160, 162, 368, 428, 431], "48": [160, 162, 368, 583, 586, 691, 693, 696, 742, 780, 782, 955, 956, 959], "88": [160, 162, 368, 428, 431, 742, 780, 782, 955, 956, 959], "269": [160, 164], "731": [160, 164], "214": [160, 164], "978": [160, 164], "422": [160, 165], "155": [160, 165], "0768": [160, 165], "231": [160, 165], "693": [160, 165, 368, 391, 394, 814, 825, 828], "49": [160, 165, 368, 583, 586, 955, 956, 959], "147": [160, 165], "363": [160, 165], "3461": [160, 166, 169], "6491": [160, 166, 169], "535": [160, 166, 169], "hyperbol": [160, 171, 368, 378, 381, 391, 394, 404, 407, 440, 443, 578, 581, 601, 605], "55": [160, 171, 729, 735, 742, 780, 782, 955, 956, 959], "501": [160, 171], "array_method": [166, 167, 179, 180, 185, 186, 193, 194, 199, 200, 210, 211, 215, 216, 223, 224, 228, 230, 233, 235, 241, 243, 252, 253, 257, 258, 262, 263, 267, 268, 276, 277, 281, 282, 288, 289, 294, 295, 299, 300, 305, 306, 369, 370, 374, 375, 378, 379, 382, 383, 387, 388, 391, 392, 396, 397, 400, 401, 404, 405, 408, 409, 412, 413, 416, 417, 420, 421, 424, 425, 428, 429, 432, 433, 436, 437, 440, 441, 444, 445, 449, 450, 453, 454, 457, 458, 461, 462, 465, 466, 469, 470, 473, 474, 477, 478, 481, 482, 485, 486, 489, 490, 493, 494, 497, 498, 501, 502, 505, 506, 509, 510, 513, 514, 517, 518, 521, 522, 525, 526, 529, 530, 533, 534, 539, 540, 544, 545, 548, 549, 552, 553, 556, 557, 560, 561, 564, 565, 568, 569, 573, 574, 578, 579, 583, 584, 587, 588, 591, 593, 596, 598, 601, 603, 606, 607, 611, 612, 639, 640, 681, 683, 693, 694, 743, 744, 748, 749, 751, 752, 754, 755, 757, 758, 760, 761, 763, 764, 766, 767, 770, 771, 774, 775, 777, 778, 780, 781, 783, 784, 786, 787, 790, 791, 793, 794, 796, 797, 799, 800, 802, 803, 805, 806, 808, 809, 811, 812, 815, 816, 820, 821, 825, 826, 831, 832, 836, 837, 840, 841, 844, 845, 848, 849, 852, 853, 856, 857, 860, 861, 864, 865, 870, 871, 874, 875, 878, 879, 882, 883, 886, 887, 913, 914, 937, 939, 945, 946, 950, 951, 956, 957, 960, 961, 964, 965, 968, 969, 972, 973, 976, 977, 980, 981, 984, 985, 989, 990, 994, 995], "container_method": [166, 168, 170, 176, 178, 179, 181, 183, 185, 187, 189, 190, 192, 193, 195, 197, 199, 201, 203, 204, 206, 207, 209, 210, 212, 214, 215, 217, 219, 220, 222, 223, 225, 227, 228, 229, 231, 233, 234, 236, 238, 239, 241, 242, 244, 252, 254, 256, 257, 259, 261, 262, 264, 266, 267, 269, 271, 276, 278, 281, 283, 285, 288, 290, 292, 294, 296, 298, 299, 301, 303, 305, 307, 309, 369, 371, 373, 374, 376, 378, 380, 382, 384, 386, 387, 389, 391, 393, 395, 396, 398, 400, 402, 404, 406, 408, 410, 412, 414, 416, 418, 420, 422, 424, 426, 428, 430, 432, 434, 436, 438, 440, 442, 444, 446, 448, 449, 451, 453, 455, 457, 459, 461, 463, 465, 467, 469, 471, 473, 475, 477, 479, 481, 483, 485, 487, 489, 491, 493, 495, 497, 499, 501, 503, 505, 507, 509, 511, 513, 515, 517, 519, 521, 523, 525, 527, 529, 531, 533, 535, 539, 541, 543, 544, 546, 548, 550, 552, 554, 556, 558, 560, 562, 564, 566, 568, 570, 572, 573, 575, 577, 578, 580, 582, 583, 585, 587, 589, 591, 592, 594, 596, 597, 599, 601, 602, 604, 606, 608, 611, 613, 615, 623, 624, 639, 641, 643, 681, 682, 684, 693, 695, 697, 698, 699, 701, 703, 704, 706, 707, 708, 710, 711, 712, 714, 715, 716, 718, 719, 720, 722, 743, 745, 747, 766, 768, 815, 817, 819, 820, 822, 824, 825, 827, 829, 831, 833, 835, 836, 838, 840, 842, 844, 846, 848, 850, 852, 854, 856, 858, 860, 862, 864, 866, 868, 870, 872, 874, 876, 878, 880, 882, 884, 886, 888, 913, 915, 917, 920, 922, 924, 925, 927, 937, 938, 940, 945, 947, 949, 950, 952, 954, 956, 958, 960, 962, 964, 966, 968, 970, 972, 974, 976, 978, 980, 982, 984, 986, 989, 991, 993, 994, 996, 998], "faster": [172, 173], "invoc": [172, 173], "718281828459045": 174, "newaxi": 174, "alia": 174, "pi": 174, "141592653589793": 174, "mathemat": [174, 368, 382, 385, 400, 403, 461, 464, 539, 542, 742, 808, 810], "half": [175, 176, 177, 918, 920, 921, 924, 926], "chosen": [175, 176, 177, 368, 400, 403, 930, 934], "distanc": [175, 176, 177], "adjac": [175, 176, 177], "creation_funct": [175, 176, 177, 179, 182, 184, 185, 188, 190, 191, 193, 196, 198, 199, 202, 204, 205, 220, 221, 223, 226, 228, 232, 233, 237, 238, 240, 241, 245], "interpret": [175, 179, 182, 215, 218], "nativeshap": [175, 184, 198, 220, 221, 238, 240, 610, 667, 673, 675, 729, 731, 733, 735, 830, 860, 863, 918, 920, 921, 923, 924, 926], "uniniti": [175, 184, 185, 188], "elsewher": [175, 190, 191, 930, 934], "row": [175, 190, 191, 742, 790, 792, 793, 795, 918, 919, 930, 933], "column": [175, 190, 191, 742, 757, 759, 786, 788, 790, 792, 793, 795], "__dlpack__": [175, 193, 196, 318, 363], "interchang": [175, 193, 196, 830, 878, 881], "coordin": [175, 210, 213, 368, 400, 403], "cartesian": [175, 210, 213], "ij": [175, 210, 213, 955, 956, 959], "rank": [175, 210, 213, 610, 689, 742, 748, 750, 774, 776, 786, 788, 790, 792, 802, 804, 805, 807, 808, 810, 830, 840, 843, 844, 847, 874, 877, 886, 889, 930, 933, 988, 989, 992, 994, 997], "ni": [175, 210, 213], "xi": [175, 210, 213], "n1": [175, 210, 213], "n2": [175, 210, 213], "n3": [175, 210, 213], "xv": [175, 210, 213], "yv": [175, 210, 213], "triangular": [175, 228, 232, 233, 237, 742, 743, 746, 786, 788], "innermost": [175, 228, 232, 233, 237, 742, 743, 746, 751, 753, 754, 756, 757, 759, 760, 762, 763, 765, 774, 776, 777, 779, 783, 785, 786, 788, 790, 792, 793, 795, 796, 798, 802, 804], "mxn": [175, 228, 232, 233, 237, 742, 754, 756, 774, 776, 777, 779, 783, 785, 786, 788, 796, 798, 802, 804], "defaultdtyp": [246, 247], "defaultfloatdtyp": [246, 248], "float_dtyp": [246, 274, 311], "defaultintdtyp": [246, 249], "incompat": [246, 262, 265], "occur": [246, 267, 270, 930, 931, 932, 935, 936, 937, 941, 943], "data_type_funct": [246, 267, 270], "floatdtyp": [246, 274], "int_dtyp": [246, 275, 312], "intdtyp": [246, 275], "followng": [246, 281, 284], "occupi": [246, 281, 284, 288, 291, 610, 666, 667], "ep": [246, 281, 284, 742, 774, 776, 783, 785], "smallest_norm": [246, 281, 284], "encapsul": [246, 288, 291], "type1": [246, 304], "type2": [246, 304], "ret1": [246, 313], "ret2": [246, 313], "native_bool": [246, 317], "native_float16": [246, 317], "native_float64": [246, 317], "native_int8": [246, 317], "native_int16": [246, 317], "native_int32": [246, 317], "native_int64": [246, 317], "native_uint8": [246, 317], "native_uint64": [246, 317], "noinspect": [247, 248, 249, 319, 692], "pyshadowingnam": [247, 248, 249, 319, 692], "defaultdevic": [318, 319], "__enter__": 318, "_dev": 318, "__exit__": 318, "exc_typ": 318, "exc_val": 318, "exc_tb": 318, "exit": 318, "devcloneditem": [318, 340], "multidevitem": [318, 320, 323], "devclonedit": 318, "multidevit": [318, 321, 324, 327, 328, 332], "devclonednest": 318, "multidevnest": [318, 322, 325], "devdistitem": 318, "devdistit": 318, "devdistnest": 318, "devmanag": [318, 326], "dev_mapp": 318, "da_dim_s": 318, "safety_factor": 318, "min_dev_dim_s": 318, "max_dev_dim_step_ratio": 318, "min_unit_dev_tune_step": 318, "min_sf_tune_step": 318, "starting_split_factor": 318, "max_split_factor_step_s": 318, "tune_dev_alloc": 318, "tune_dev_split": 318, "mapper": [318, 327, 328], "receivess": 318, "ratio": [318, 691, 711, 713, 1036, 1038], "safe": [318, 327], "oom": 318, "tune": 318, "da_tune_step": 318, "ds_tune_step": 318, "to_clon": 318, "to_distribut": 318, "multidevic": [318, 327], "parallel": [318, 327, 328], "mutlidevic": [318, 327], "repeated_config_check": 318, "tune_step": 318, "devmapp": [318, 328], "ret_fn": [318, 327, 328], "queue_class": [318, 327, 328], "worker_class": [318, 327, 328], "worker": [318, 327, 328], "used_dev": [318, 327], "sf": [318, 327], "devmappermultiproc": 318, "multidev": [318, 329, 330, 331, 350], "profil": 318, "save_dir": [318, 333], "deviceic": [318, 339], "spread": [318, 350], "139740789224448": [318, 352], "physic": [318, 354], "x3": [318, 356], "x4": [318, 356], "process_specif": [318, 357, 367], "percentag": [318, 357], "ram": [318, 357, 364, 367], "attr_onli": [318, 358], "chunk": [318, 360, 361, 362], "max_chunk_s": [318, 362], "chunk_siz": [318, 362], "input_ax": [318, 362], "output_ax": [318, 362], "feed": [318, 362], "fist": [318, 362], "stream": [318, 363], "caveat": [318, 363], "portabl": [318, 363, 999], "gb": [318, 364, 367], "reset": [318, 366, 610, 688], "magnitud": [368, 369, 372, 382, 385, 539, 542, 742, 793, 795, 796, 798], "princip": [368, 374, 377, 387, 390, 396, 399], "cosin": [368, 374, 377, 378, 381, 436, 439, 440, 443], "x1_i": [368, 382, 385, 400, 403, 408, 411, 416, 419, 420, 423, 424, 427, 428, 431, 444, 447, 449, 452, 469, 472, 473, 476, 477, 480, 493, 496, 497, 500, 517, 520, 521, 524, 529, 532, 533, 536, 539, 542, 548, 551, 556, 559, 560, 563, 591, 595], "x2_i": [368, 382, 385, 400, 403, 408, 411, 416, 419, 420, 423, 424, 427, 428, 431, 444, 447, 449, 452, 469, 472, 473, 476, 477, 480, 493, 496, 497, 500, 517, 520, 521, 524, 529, 532, 533, 536, 539, 542, 548, 551, 556, 559, 560, 563, 591, 595], "finit": [368, 382, 385, 400, 403, 481, 484, 539, 542, 556, 559, 560, 563], "nor": [368, 382, 385, 539, 542, 691, 728], "nearest": [368, 382, 385, 539, 542, 564, 567], "2019": [368, 382, 385, 461, 464, 539, 542], "commut": [368, 382, 385], "sine": [368, 387, 390, 391, 394, 573, 576, 578, 581], "57": [368, 387, 390, 391, 394, 428, 431, 440, 443], "524": [368, 387, 390], "644": [368, 387, 390], "201": [368, 387, 390, 564, 567], "305": [368, 387, 390], "412": [368, 387, 390], "44": [368, 391, 394, 564, 567, 583, 586, 587, 590, 742, 780, 782, 930, 934, 955, 956, 959], "809": [368, 391, 394], "569": [368, 391, 394], "733": [368, 391, 394], "68": [368, 391, 394, 912, 913, 916], "99": [368, 391, 394, 955, 956, 959], "quotient": [368, 400, 403], "notat": [368, 400, 403, 955, 956, 959], "denot": [368, 400, 403, 691, 728], "pair": [368, 400, 403, 729, 741, 742, 748, 750], "quadrant": [368, 400, 403], "3\u03c0": [368, 400, 403], "549": [368, 404, 407], "bitwis": [368, 408, 411, 420, 423, 428, 431, 533, 536], "AND": [368, 408, 411, 521, 524, 988, 989, 992], "binari": [368, 408, 411, 420, 423, 428, 431, 533, 536, 814, 815, 818], "invert": [368, 412, 415], "arithmet": [368, 424, 427, 955, 964, 967], "propag": [368, 424, 427, 955, 960, 963, 964, 967, 968, 971, 976, 979, 980, 983, 984, 987], "thu": [368, 424, 427, 556, 559, 560, 563, 742, 757, 759], "lh": [368, 424, 427], "rh": [368, 424, 427], "xor": [368, 428, 431, 533, 536], "78": [368, 428, 431, 568, 571, 742, 780, 782, 955, 956, 959], "91": [368, 428, 431, 742, 780, 782, 955, 956, 959], "66": [368, 428, 431, 742, 780, 782, 955, 956, 959], "77": [368, 428, 431, 742, 780, 782, 955, 956, 959], "79": [368, 428, 431], "26": [368, 428, 431, 578, 581, 691, 693, 696, 729, 736, 742, 754, 756, 780, 782, 799, 801, 955, 956, 959], "27": [368, 428, 431, 440, 443, 578, 581, 583, 586, 729, 741, 742, 780, 782, 955, 956, 959], "74": [368, 428, 431], "59": [368, 428, 431], "416": [368, 436, 439], "122": [368, 440, 443], "368": [368, 440, 443], "670": [368, 440, 443], "202": [368, 440, 443, 564, 567], "548": [368, 440, 443, 578, 581], "1490": [368, 440, 443], "dividend": [368, 444, 447, 560, 563], "divisor": [368, 444, 447, 560, 563, 691, 693, 696, 698, 700, 711, 713, 955, 976, 979, 984, 987, 1036, 1037, 1038], "gauss": [368, 453, 456], "exponenti": [368, 453, 456, 457, 460, 517, 520, 556, 559], "logarithm": [368, 457, 460, 501, 504, 505, 508, 509, 512, 513, 516, 517, 520, 742, 789], "72": [368, 457, 460, 691, 693, 696, 742, 780, 782, 955, 956, 959], "accur": [368, 461, 464], "fdlibm": [368, 461, 464], "compliant": [368, 461, 464, 525, 528, 529, 532, 955, 960, 963, 964, 967, 968, 971], "greatest": [368, 465, 468, 469, 472], "out_i": [368, 481, 484, 485, 488, 489, 492], "threshold": [368, 537, 538], "y_i": [368, 544, 547], "expon": [368, 556, 559, 610, 677], "versu": [368, 556, 559], "odd": [368, 556, 559], "modulu": [368, 560, 563], "primarili": [368, 560, 563], "5654": [368, 564, 567], "034": [368, 564, 567], "433": [368, 564, 567], "343": [368, 564, 567], "30": [368, 564, 567, 742, 780, 782, 955, 956, 959, 1011, 1017], "81": [368, 564, 567, 587, 590, 955, 956, 959], "527": [368, 564, 567], "301": [368, 564, 567], "124": [368, 568, 571], "46": [368, 568, 571], "932": [368, 573, 576], "746": [368, 573, 576], "443": [368, 573, 576], "657": [368, 573, 576], "253": [368, 578, 581], "indistinguish": [368, 583, 586], "infinit": [368, 583, 586], "83": [368, 583, 586], "32455532": [368, 583, 586], "89897949": [368, 583, 586], "50": [368, 583, 586, 742, 780, 782, 930, 933, 955, 956, 959], "31": [368, 583, 586], "169": [368, 583, 586], "47": [368, 583, 586], "93": [368, 583, 586], "35": [368, 583, 586, 729, 741, 742, 748, 750, 930, 934, 955, 956, 959], "09": [368, 587, 590, 729, 741], "546": [368, 596, 600], "842": [368, 596, 600], "916": [368, 596, 600, 814, 815, 818], "996": [368, 596, 600], "328": [368, 596, 600], "real": [368, 601, 605], "462": [368, 601, 605], "604": [368, 601, 605], "984": [368, 601, 605], "997": [368, 601, 605], "decim": [368, 606, 609], "inspect": [610, 616, 1003, 1004], "downscal": [610, 622, 623, 625], "60": [610, 628, 742, 780, 782, 955, 956, 959], "default_v": [610, 631], "catch_except": [610, 631], "rev": [610, 631], "with_cal": [610, 631], "arrang": [610, 632], "mod": [610, 636], "max_freq": [610, 637], "num_band": [610, 637], "pad": [610, 637, 729, 730, 731, 732, 733, 734, 735, 736, 830, 840, 843, 886, 889, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027], "fourier": [610, 637], "band": [610, 637], "linearli": [610, 637, 742, 790, 792], "oppos": [610, 637], "geometr": [610, 637], "seen_set": [610, 648], "local_set": [610, 648], "decrement": [610, 652], "allow_dupl": [610, 660], "forkserv": [610, 661], "spawn": [610, 661], "hot": [610, 663], "scatter": [610, 663, 666, 667], "overrid": [610, 663], "tmp_dr": [610, 672], "temporari": [610, 672], "min_denomin": [610, 676], "stabil": [610, 676, 677, 944, 945, 948, 950, 953], "_min_denomin": [610, 676], "min_bas": [610, 677], "_min_bas": [610, 677, 912, 913, 916, 1034, 1035], "100000023841858": [610, 680], "200000047683716": [610, 680], "299999952316284": [610, 680], "400000095367432": [610, 680], "599999904632568": [610, 680], "gradienttrack": [691, 692], "delta": [691, 693, 696], "cost": [691, 693, 696, 698, 700, 703, 705, 711, 713, 715, 717, 719, 721, 890, 891, 892, 893], "ws": [691, 693, 696, 698, 700, 703, 705, 711, 713, 715, 717, 719, 721], "en": [691, 693, 696, 698, 700], "wikipedia": [691, 693, 696, 698, 700], "wiki": [691, 693, 696, 698, 700], "stochastic_gradient_desc": [691, 693, 696, 698, 700], "dc": [691, 693, 696, 698, 700, 703, 705, 711, 713, 715, 717, 719, 721], "dw": [691, 693, 696, 698, 700, 703, 705, 711, 713, 715, 717, 719, 721], "averag": [691, 693, 696, 698, 700, 711, 713, 890, 891, 892], "forget": [691, 693, 696, 698, 700, 711, 713, 1036, 1037, 1038], "004": [691, 693, 696], "009": [691, 693, 696], "86": [691, 693, 696], "28": [691, 693, 696, 729, 732, 735, 736, 742, 780, 782, 955, 956, 959], "0125": [691, 693, 696], "601": [691, 693, 696], "025": [691, 693, 696], "992": [691, 693, 696], "209": [691, 693, 696, 935, 936], "271": [691, 693, 696], "0717": [691, 693, 696], "142": [691, 693, 696], "182": [691, 693, 696], "624": [691, 693, 696, 918, 924, 926], "744": [691, 693, 696], "626": [691, 693, 696], "65": [691, 693, 696, 742, 780, 782, 955, 956, 959], "024": [691, 693, 696], "096": [691, 693, 696], "216": [691, 693, 696], "384": [691, 693, 696], "rate": [691, 698, 700, 703, 705, 711, 713, 715, 717, 719, 721, 890, 891, 892, 893, 1020, 1031, 1036, 1037, 1038, 1039, 1040, 1041], "ws_new": [691, 698, 700, 703, 705, 711, 713, 715, 717, 719, 721], "retain": [691, 702], "trust": [691, 711, 713, 1036, 1038], "decai": [691, 711, 713, 715, 717, 1036, 1038, 1039], "layerwis": [691, 715, 717, 1036, 1039], "with_grads_stack": [691, 728], "stride": [729, 730, 731, 732, 733, 734, 735, 736, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027], "data_format": [729, 730, 731, 732, 733, 734, 735, 736, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027], "nwc": [729, 730, 731, 1020, 1021, 1022], "dilat": [729, 730, 731, 732, 733, 734, 735, 736, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027], "convolut": [729, 730, 731, 732, 733, 734, 735, 736, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027], "d_in": [729, 730, 731, 732, 733, 734, 735], "d_out": [729, 730, 731, 732, 733, 734, 735], "slide": [729, 730, 731, 732, 733, 734, 735, 736, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027], "ncw": [729, 730, 731, 1020, 1021, 1022], "wio": [729, 730], "output_shap": [729, 731, 733, 735, 1020, 1022, 1024, 1026], "nhwc": [729, 732, 733, 736, 1020, 1023, 1024, 1027], "fh": [729, 732, 733, 734, 735, 736], "nchw": [729, 732, 733, 736, 1020, 1023, 1024, 1027], "hwio": [729, 732], "unequ": [729, 732], "unsqueez": [729, 732, 736], "ndhwc": [729, 734, 735, 1020, 1025, 1026], "volum": [729, 734], "fd": [729, 734, 735], "ncdhw": [729, 734, 735, 1020, 1025, 1026], "dhwio": [729, 734], "258": [729, 735], "128": [729, 735, 742, 780, 782], "depthwis": [729, 736, 1020, 1027], "333": [729, 736], "inp": [729, 736], "prob": [729, 737, 918, 919, 1020, 1028], "randomli": [729, 737, 1020, 1028], "bernoulli": [729, 737], "out_featur": [729, 737, 738], "incom": [729, 738], "outer_batch_shap": [729, 738], "inner_batch_shap": [729, 738], "in_featur": [729, 738], "cell": [729, 739, 1020, 1029], "num_queri": [729, 740, 741], "x_feat_dim": [729, 740], "num_kei": [729, 740, 741], "cont_feat_dim": [729, 740], "numhead": [729, 740], "feat_dim": [729, 740, 741], "out_feat_dim": [729, 740], "score": [729, 741], "03": [729, 741, 912, 913, 916], "decomposit": [742, 743, 746, 786, 788, 793, 795], "symmetr": [742, 743, 746, 757, 759, 760, 762, 811, 813], "u": [742, 743, 746, 793, 795], "vif": [742, 748, 750], "92": [742, 751, 753], "293": [742, 751, 753], "46997": [742, 751, 753], "eigendecomposit": [742, 757, 759], "qlq\u1d40": [742, 757, 759], "orthogon": [742, 757, 759], "eig": [742, 757, 759], "eigenvalu": [742, 757, 759, 760, 762], "eigenvector": [742, 757, 759], "prepend": [742, 766, 769], "singular": [742, 774, 776, 783, 785, 793, 795, 796, 798], "toler": [742, 774, 776, 783, 785], "largest_singular_valu": [742, 774, 776, 783, 785], "array_lik": [742, 780, 782], "84": [742, 780, 782, 955, 956, 959], "105": [742, 780, 782, 814, 815, 818], "112": [742, 780, 782, 955, 956, 959], "104": [742, 780, 782, 955, 956, 959], "120": [742, 780, 782], "moor": [742, 783, 785], "penros": [742, 783, 785], "pseudo": [742, 783, 785], "orthonorm": [742, 786, 788, 793, 795], "2d": [742, 789, 1020, 1023, 1024, 1027], "logdet": [742, 789], "coeffici": [742, 790, 792], "usvh": [742, 793, 795], "vh": [742, 793, 795], "hermitian": [742, 793, 795], "et": [742, 793, 795], "cetera": [742, 793, 795], "adjoint": [742, 793, 795], "reconstruct": [742, 793, 795, 935, 936, 942], "reconstructed_x": [742, 793, 795], "contract": [742, 799, 801, 955, 956, 959], "doubl": [742, 799, 801], "singleton": [742, 808, 810, 830, 870, 873, 930, 932, 955, 960, 963, 964, 967, 968, 971, 972, 975, 976, 979, 980, 983, 984, 987, 988, 989, 992, 994, 997], "manhattan": [742, 808, 810], "l2": [742, 808, 810], "euclidean": [742, 808, 810], "mathbf": [742, 811, 813], "mathbb": [742, 811, 813], "skew": [742, 811, 813], "entropi": [814, 815, 818, 820, 823, 825, 828], "predict": [814, 815, 818, 820, 823, 825, 828], "smooth": [814, 815, 818, 820, 823, 825, 828], "discret": [814, 820, 823], "35667497": [814, 820, 823], "spars": [814, 825, 828], "logit": [814, 825, 828], "793291": [814, 825, 828], "512926": [814, 825, 828], "before_1": [830, 840, 843, 886, 889], "after_1": [830, 840, 843, 886, 889], "before_n": [830, 840, 843, 886, 889], "after_n": [830, 840, 843, 886, 889], "insert": [830, 844, 847, 894, 899, 930, 931], "manipulation_funct": [830, 844, 847], "reorder": [830, 848, 851], "permut": [830, 852, 855, 878, 881], "repetit": [830, 856, 859, 882, 885], "restor": [830, 864, 867], "famili": [830, 874, 877], "intxx": [830, 874, 877], "floatxx": [830, 874, 877], "fomaml_step": 890, "inner_cost_fn": [890, 891, 892], "outer_cost_fn": [890, 891, 892], "inner_grad_step": [890, 891, 892, 893], "inner_learning_r": [890, 891, 892, 893], "inner_optimization_step": [890, 891, 892, 893], "inner_batch_fn": [890, 891, 892], "outer_batch_fn": [890, 891, 892], "average_across_step": [890, 891, 892], "inner_v": [890, 891, 892], "keep_inner_v": [890, 891, 892], "outer_v": [890, 891, 892], "keep_outer_v": [890, 891, 892], "return_inner_v": [890, 891, 892, 893], "num_task": [890, 891, 892, 893], "maml": [890, 891, 892], "recev": [890, 891, 892], "0x7f9e198c4a60": [890, 891, 892, 893], "maml_step": 890, "rece": [890, 892], "reptile_step": 890, "cost_fn": [890, 893], "reptil": [890, 893], "receivng": [890, 893], "all_nested_indic": 894, "include_nest": [894, 895], "_index": [894, 895, 905], "_base": [894, 895, 904, 905], "copy_nest": 894, "to_mut": [894, 896, 906], "mutabl": [894, 896, 906], "insert_into_nest_at_index": 894, "insert_into_nest_at_indic": 894, "map_nest_at_index": 894, "map_nest_at_indic": 894, "multi_index_nest": 894, "nested_ani": 894, "check_nest": [894, 904, 905], "conditon": [894, 904, 905], "nested_indices_wher": 894, "stop_after_n_found": [894, 905], "_depth": [894, 906], "_tuple_check_fn": [894, 906], "_list_check_fn": [894, 906], "_dict_check_fn": [894, 906], "nested_multi_map": 894, "nest0": [894, 907], "ivy_arrai": [894, 907], "funciton": [894, 907], "prune_nest_at_index": 894, "prune_nest_at_indic": 894, "set_nest_at_index": 894, "set_nest_at_indic": 894, "mini": [912, 913, 916, 1034, 1035], "gamma": [912, 913, 916], "beta": [912, 913, 916], "894": [912, 913, 916], "772": [912, 913, 916], "796": [912, 913, 916], "population_s": [918, 919], "num_sampl": [918, 919], "home": [918, 919, 923], "uniformli": [918, 920, 921, 924, 926], "highest": [918, 920, 921], "parameter": [918, 923, 924, 926], "6444774682897879": [918, 923], "811": [918, 923], "508": [918, 923], "564": [918, 923], "7268672": [918, 923], "968": [918, 923], "175": [918, 923, 935, 936], "064": [918, 923], "40935726": [918, 923], "556": [918, 923], "26431865": [918, 924, 926], "475": [918, 924, 926], "878": [918, 924, 926], "861": [918, 924, 926], "89150229": [918, 924, 926], "89629126": [918, 924, 926], "94198485": [918, 924, 926], "91405606": [918, 924, 926], "72848724": [918, 924, 926], "7550739": [918, 924, 926], "00109": [918, 924, 926], "occurr": [930, 931, 932, 935, 936], "43": [930, 934], "x_j": [935, 936, 937, 941, 943], "impli": [935, 936, 937, 941, 943], "inverse_indic": [935, 936, 942], "aggreg": [935, 936], "fourth": [935, 936], "607": [935, 936], "735": [935, 936], "667": [935, 936], "381": [935, 936], "857": [935, 936], "0396": [935, 936], "166": [935, 936], "58": [935, 936], "828": [935, 936], "144": [935, 936], "40501155": [935, 936], "77361575": [935, 936], "97776199": [935, 936], "36831157": [935, 936], "89148434": [935, 936], "9512272": [935, 936], "67542176": [935, 936], "41985657": [935, 936], "23478023": [935, 936], "1141": [935, 936], "8101": [935, 936], "9298": [935, 936], "8460": [935, 936], "2119": [935, 936], "3519": [935, 936], "6252": [935, 936], "4033": [935, 936], "7443": [935, 936], "2577": [935, 936], "3707": [935, 936], "0545": [935, 936], "3238": [935, 936], "5944": [935, 936], "0775": [935, 936], "4327": [935, 936], "176": [935, 936], "889": [935, 936], "763": [935, 936], "071": [935, 936], "262": [935, 936], "456": [935, 936], "114": [935, 936], "349": [935, 936], "615": [935, 936], "594": [935, 936], "335": [935, 936], "212": [935, 936], "457": [935, 936], "827": [935, 936], "set_funct": [935, 937, 941], "ascend": [944, 945, 948], "einstein": [955, 956, 959], "summat": [955, 956, 959], "seq": [955, 956, 959], "jk": [955, 956, 959], "ik": [955, 956, 959], "126": [955, 956, 959], "510": [955, 956, 959], "108": [955, 956, 959], "117": [955, 956, 959], "sentinel": [955, 960, 963, 968, 971], "unsign": [955, 972, 975, 980, 983], "degre": [955, 976, 979, 984, 987], "bessel": [955, 976, 979, 984, 987], "8164966": [955, 976, 979], "varianc": [955, 984, 987], "unbias": [955, 984, 987], "simplicit": [988, 989, 992], "grow": 999, "ai": 999, "got": 999, "colab": 999, "sharp": 999, "weekli": 999, "immedi": 999, "favorit": 999, "jax_concat": 999, "tf_concat": 999, "np_concat": 999, "mx_concat": 999, "torch_concat": 999, "prompt": 999, "get_devic": 999, "reduce_prod": 999, "gradient_imag": 999, "linalg": 999, "bilinear_resampl": 999, "stack_imag": 999, "neural_net": 999, "ecosystem": [999, 1005], "popular": [999, 1005], "acceler": 999, "articl": 999, "lenton2021ivi": 999, "inter": 999, "lenton": 999, "daniel": 999, "pardo": 999, "fabio": 999, "falck": 999, "fabian": 999, "jame": 999, "stephen": 999, "clark": 999, "ronald": 999, "journal": 999, "arxiv": 999, "preprint": 999, "2102": 999, "02886": 999, "2021": 999, "add_array_spec": 1002, "fn_array_spec": 1002, "geglu": 1006, "native_modul": [1009, 1010], "native_module_class": [1009, 1010], "firstlayersiren": 1011, "kaimingnorm": [1011, 1015], "negative_slop": 1011, "Ones": 1011, "siren": 1011, "w0": [1011, 1017], "filter_s": [1020, 1021, 1022], "1d": [1020, 1021, 1022], "conv1dtranspos": 1020, "filter_shap": [1020, 1023, 1024, 1025, 1026, 1027], "conv2dtranspos": 1020, "conv3dtranspos": 1020, "depthwiseconv2d": 1020, "num_channel": [1020, 1027], "bernoul": [1020, 1028], "num_lay": [1020, 1029], "return_sequ": [1020, 1029], "return_st": [1020, 1029], "get_initial_st": [1020, 1029], "dens": [1020, 1030], "multiheadattent": 1020, "query_dim": [1020, 1031], "head_dim": [1020, 1031], "dropout_r": [1020, 1031], "context_dim": [1020, 1031], "with_to_q_fn": [1020, 1031], "with_to_kv_fn": [1020, 1031], "with_to_out_fn": [1020, 1031], "build_mod": [1020, 1031, 1032, 1033], "on_init": [1020, 1031, 1032, 1033], "__call__": [1020, 1031, 1032, 1033], "store_var": [1032, 1033], "arg_stateful_idx": [1032, 1033], "kwarg_stateful_idx": [1032, 1033], "fallback_to_non_compil": [1032, 1033, 1036, 1040], "with_partial_v": [1032, 1033], "initialz": [1032, 1033], "from_cal": [1032, 1033], "check_submod_ret": [1032, 1033], "get_mod_kei": [1032, 1033], "top_mod": [1032, 1033], "mod_depth": [1032, 1033], "mod_height": [1032, 1033], "mod_with_top_mod_key_chain": [1032, 1033], "save_weight": [1032, 1033], "weights_path": [1032, 1033], "show_mod_in_top_mod": [1032, 1033], "upper_depth": [1032, 1033], "lower_depth": [1032, 1033], "show_structur": [1032, 1033], "show_v_in_top_v": [1032, 1033], "sub_mod": [1032, 1033], "show_v": [1032, 1033], "track_submod_call_ord": [1032, 1033], "track_submod_ret": [1032, 1033], "v_with_top_v_key_chain": [1032, 1033], "layernorm": 1034, "normalized_shap": [1034, 1035], "elementwise_affin": [1034, 1035], "trail": [1034, 1035], "affin": [1034, 1035], "init_on_first_step": [1036, 1040], "ignore_miss": [1036, 1040], "overriden": [1036, 1040], "sgd": 1036, "stochast": [1036, 1041], "sub_modul": [1042, 1043]}, "objects": {"ivy.array": [[22, 0, 0, "-", "activations"], [24, 0, 0, "-", "array"], [27, 0, 0, "-", "conversions"], [32, 0, 0, "-", "creation"], [34, 0, 0, "-", "data_type"], [36, 0, 0, "-", "device"], [38, 0, 0, "-", "elementwise"], [40, 0, 0, "-", "general"], [42, 0, 0, "-", "gradients"], [44, 0, 0, "-", "image"], [46, 0, 0, "-", "layers"], [48, 0, 0, "-", "linear_algebra"], [50, 0, 0, "-", "losses"], [52, 0, 0, "-", "manipulation"], [54, 0, 0, "-", "norms"], [56, 0, 0, "-", "random"], [58, 0, 0, "-", "searching"], [60, 0, 0, "-", "set"], [62, 0, 0, "-", "sorting"], [64, 0, 0, "-", "statistical"], [66, 0, 0, "-", "utility"], [68, 0, 0, "-", "wrapping"]], "ivy.array.activations": [[23, 1, 1, "", "ArrayWithActivations"]], "ivy.array.activations.ArrayWithActivations": [[23, 2, 1, "", "softplus"]], "ivy.array.array": [[25, 1, 1, "", "Array"], [26, 1, 1, "", "Variable"]], "ivy.array.array.Array": [[25, 3, 1, "", "T"], [25, 2, 1, "", "__add__"], [25, 2, 1, "", "__init__"], [25, 2, 1, "", "__le__"], [25, 2, 1, "", "__radd__"], [25, 2, 1, "", "adam_update"], [25, 2, 1, "", "arange"], [25, 2, 1, "", "arg_info"], [25, 2, 1, "", "arg_names"], [25, 2, 1, "", "argmax"], [25, 2, 1, "", "argmin"], [25, 2, 1, "", "array"], [25, 2, 1, "", "array_equal"], [25, 2, 1, "", "arrays_equal"], [25, 2, 1, "", "as_ivy_dev"], [25, 2, 1, "", "as_ivy_dtype"], [25, 2, 1, "", "as_native_dev"], [25, 2, 1, "", "as_native_dtype"], [25, 2, 1, "", "assert_supports_inplace"], [25, 2, 1, "", "cache_fn"], [25, 2, 1, "", "clear_mem_on_dev"], [25, 2, 1, "", "clip_matrix_norm"], [25, 2, 1, "", "clip_vector_norm"], [25, 2, 1, "", "closest_valid_dtype"], [25, 2, 1, "", "container_types"], [25, 2, 1, "", "conv1d"], [25, 2, 1, "", "conv1d_transpose"], [25, 2, 1, "", "conv2d"], [25, 2, 1, "", "conv2d_transpose"], [25, 2, 1, "", "conv3d"], [25, 2, 1, "", "conv3d_transpose"], [25, 2, 1, "", "copy_array"], [25, 2, 1, "", "cumprod"], [25, 2, 1, "", "cumsum"], [25, 2, 1, "", "current_backend"], [25, 2, 1, "", "current_backend_str"], [25, 3, 1, "", "data"], [25, 2, 1, "", "default"], [25, 2, 1, "", "default_device"], [25, 2, 1, "", "default_dtype"], [25, 2, 1, "", "default_float_dtype"], [25, 2, 1, "", "default_int_dtype"], [25, 2, 1, "", "depthwise_conv2d"], [25, 2, 1, "", "dev"], [25, 2, 1, "", "dev_clone"], [25, 2, 1, "", "dev_clone_array"], [25, 2, 1, "", "dev_clone_iter"], [25, 2, 1, "", "dev_clone_nest"], [25, 2, 1, "", "dev_dist"], [25, 2, 1, "", "dev_dist_array"], [25, 2, 1, "", "dev_dist_iter"], [25, 2, 1, "", "dev_dist_nest"], [25, 2, 1, "", "dev_unify"], [25, 2, 1, "", "dev_unify_array"], [25, 2, 1, "", "dev_unify_iter"], [25, 2, 1, "", "dev_unify_nest"], [25, 2, 1, "", "dev_util"], [25, 3, 1, "", "device"], [25, 2, 1, "", "dropout"], [25, 3, 1, "", "dtype"], [25, 2, 1, "", "dtype_bits"], [25, 2, 1, "", "einops_rearrange"], [25, 2, 1, "", "einops_reduce"], [25, 2, 1, "", "einops_repeat"], [25, 2, 1, "", "empty"], [25, 2, 1, "", "execute_with_gradients"], [25, 2, 1, "", "exists"], [25, 2, 1, "", "eye"], [25, 2, 1, "", "floormod"], [25, 2, 1, "", "fourier_encode"], [25, 2, 1, "", "full"], [25, 2, 1, "", "function_supported_dtypes"], [25, 2, 1, "", "function_unsupported_dtypes"], [25, 2, 1, "", "gather"], [25, 2, 1, "", "gelu"], [25, 2, 1, "", "get_all_arrays_in_memory"], [25, 2, 1, "", "get_all_ivy_arrays_on_dev"], [25, 2, 1, "", "get_min_base"], [25, 2, 1, "", "get_min_denominator"], [25, 2, 1, "", "get_num_dims"], [25, 2, 1, "", "get_referrers_recursive"], [25, 2, 1, "", "gpu_is_available"], [25, 2, 1, "", "gradient_descent_update"], [25, 2, 1, "", "handle_nestable"], [25, 2, 1, "", "handle_out_argument"], [25, 2, 1, "", "has_nans"], [25, 2, 1, "", "indices_where"], [25, 2, 1, "", "infer_device"], [25, 2, 1, "", "infer_dtype"], [25, 2, 1, "", "inplace_arrays_supported"], [25, 2, 1, "", "inplace_decrement"], [25, 2, 1, "", "inplace_increment"], [25, 2, 1, "", "inplace_update"], [25, 2, 1, "", "inplace_variables_supported"], [25, 2, 1, "", "inputs_to_native_arrays"], [25, 2, 1, "", "invalid_dtype"], [25, 2, 1, "", "is_array"], [25, 2, 1, "", "is_ivy_array"], [25, 2, 1, "", "is_ivy_container"], [25, 2, 1, "", "is_native_array"], [25, 3, 1, "", "is_variable"], [25, 2, 1, "", "lamb_update"], [25, 2, 1, "", "lars_update"], [25, 2, 1, "", "leaky_relu"], [25, 2, 1, "", "linear"], [25, 2, 1, "", "linspace"], [25, 2, 1, "", "logspace"], [25, 2, 1, "", "lstm_update"], [25, 3, 1, "", "mT"], [25, 2, 1, "", "match_kwargs"], [25, 2, 1, "", "matrix_power"], [25, 2, 1, "", "maximum"], [25, 2, 1, "", "minimum"], [25, 2, 1, "", "multi_head_attention"], [25, 2, 1, "", "multinomial"], [25, 2, 1, "", "multiprocessing"], [25, 3, 1, "", "ndim"], [25, 2, 1, "", "nonzero"], [25, 2, 1, "", "num_arrays_in_memory"], [25, 2, 1, "", "num_cpu_cores"], [25, 2, 1, "", "num_gpus"], [25, 2, 1, "", "num_ivy_arrays_on_dev"], [25, 2, 1, "", "one_hot"], [25, 2, 1, "", "ones"], [25, 2, 1, "", "optimizer_update"], [25, 2, 1, "", "outputs_to_ivy_arrays"], [25, 2, 1, "", "percent_used_mem_on_dev"], [25, 2, 1, "", "print_all_arrays_in_memory"], [25, 2, 1, "", "print_all_ivy_arrays_on_dev"], [25, 2, 1, "", "promote_types"], [25, 2, 1, "", "queue_timeout"], [25, 2, 1, "", "randint"], [25, 2, 1, "", "random_normal"], [25, 2, 1, "", "random_uniform"], [25, 2, 1, "", "relu"], [25, 2, 1, "", "scaled_dot_product_attention"], [25, 2, 1, "", "scatter_flat"], [25, 2, 1, "", "scatter_nd"], [25, 2, 1, "", "seed"], [25, 2, 1, "", "set_default_device"], [25, 2, 1, "", "set_default_dtype"], [25, 2, 1, "", "set_default_float_dtype"], [25, 2, 1, "", "set_default_int_dtype"], [25, 2, 1, "", "set_min_base"], [25, 2, 1, "", "set_min_denominator"], [25, 2, 1, "", "set_queue_timeout"], [25, 2, 1, "", "set_shape_array_mode"], [25, 2, 1, "", "set_split_factor"], [25, 2, 1, "", "set_tmp_dir"], [25, 2, 1, "", "set_with_grads"], [25, 3, 1, "", "shape"], [25, 2, 1, "", "shape_array_mode"], [25, 2, 1, "", "shape_to_tuple"], [25, 2, 1, "", "shuffle"], [25, 2, 1, "", "sigmoid"], [25, 3, 1, "", "size"], [25, 2, 1, "", "slogdet"], [25, 2, 1, "", "softmax"], [25, 2, 1, "", "split"], [25, 2, 1, "", "split_factor"], [25, 2, 1, "", "split_func_call"], [25, 2, 1, "", "stable_divide"], [25, 2, 1, "", "stable_pow"], [25, 2, 1, "", "stop_gradient"], [25, 2, 1, "", "supports_inplace"], [25, 2, 1, "", "tmp_dir"], [25, 2, 1, "", "to_device"], [25, 2, 1, "", "to_list"], [25, 2, 1, "", "to_native_arrays_and_back"], [25, 2, 1, "", "to_scalar"], [25, 2, 1, "", "total_mem_on_dev"], [25, 2, 1, "", "tpu_is_available"], [25, 2, 1, "", "try_else_none"], [25, 2, 1, "", "type_promote_arrays"], [25, 2, 1, "", "unique_all"], [25, 2, 1, "", "unique_inverse"], [25, 2, 1, "", "unique_values"], [25, 2, 1, "", "unset_default_device"], [25, 2, 1, "", "unset_default_dtype"], [25, 2, 1, "", "unset_default_float_dtype"], [25, 2, 1, "", "unset_default_int_dtype"], [25, 2, 1, "", "unset_shape_array_mode"], [25, 2, 1, "", "unset_with_grads"], [25, 2, 1, "", "unstack"], [25, 2, 1, "", "used_mem_on_dev"], [25, 2, 1, "", "valid_dtype"], [25, 2, 1, "", "value_is_nan"], [25, 2, 1, "", "variable"], [25, 2, 1, "", "variable_data"], [25, 2, 1, "", "where"], [25, 2, 1, "", "with_grads"], [25, 2, 1, "", "zeros"]], "ivy.array.array.Variable": [[26, 2, 1, "", "__init__"]], "ivy.array.array_methods": [[370, 4, 1, "", "abs"], [375, 4, 1, "", "acos"], [379, 4, 1, "", "acosh"], [694, 4, 1, "", "adam_step"], [383, 4, 1, "", "add"], [990, 4, 1, "", "all"], [612, 4, 1, "", "all_equal"], [995, 4, 1, "", "any"], [946, 4, 1, "", "argsort"], [180, 4, 1, "", "asarray"], [388, 4, 1, "", "asin"], [392, 4, 1, "", "asinh"], [253, 4, 1, "", "astype"], [397, 4, 1, "", "atan"], [401, 4, 1, "", "atan2"], [405, 4, 1, "", "atanh"], [816, 4, 1, "", "binary_cross_entropy"], [409, 4, 1, "", "bitwise_and"], [413, 4, 1, "", "bitwise_invert"], [417, 4, 1, "", "bitwise_left_shift"], [421, 4, 1, "", "bitwise_or"], [425, 4, 1, "", "bitwise_right_shift"], [429, 4, 1, "", "bitwise_xor"], [258, 4, 1, "", "broadcast_arrays"], [263, 4, 1, "", "broadcast_to"], [268, 4, 1, "", "can_cast"], [433, 4, 1, "", "ceil"], [744, 4, 1, "", "cholesky"], [832, 4, 1, "", "clip"], [837, 4, 1, "", "concat"], [841, 4, 1, "", "constant_pad"], [437, 4, 1, "", "cos"], [441, 4, 1, "", "cosh"], [749, 4, 1, "", "cross"], [821, 4, 1, "", "cross_entropy"], [752, 4, 1, "", "det"], [755, 4, 1, "", "diagonal"], [445, 4, 1, "", "divide"], [277, 4, 1, "", "dtype"], [758, 4, 1, "", "eigh"], [761, 4, 1, "", "eigvalsh"], [957, 4, 1, "", "einsum"], [186, 4, 1, "", "empty_like"], [450, 4, 1, "", "equal"], [454, 4, 1, "", "erf"], [458, 4, 1, "", "exp"], [845, 4, 1, "", "expand_dims"], [462, 4, 1, "", "expm1"], [282, 4, 1, "", "finfo"], [849, 4, 1, "", "flip"], [466, 4, 1, "", "floor"], [470, 4, 1, "", "floor_divide"], [194, 4, 1, "", "from_dlpack"], [200, 4, 1, "", "full_like"], [640, 4, 1, "", "gather_nd"], [474, 4, 1, "", "greater"], [478, 4, 1, "", "greater_equal"], [289, 4, 1, "", "iinfo"], [764, 4, 1, "", "inv"], [295, 4, 1, "", "is_float_dtype"], [300, 4, 1, "", "is_int_dtype"], [482, 4, 1, "", "isfinite"], [486, 4, 1, "", "isinf"], [490, 4, 1, "", "isnan"], [914, 4, 1, "", "layer_norm"], [494, 4, 1, "", "less"], [498, 4, 1, "", "less_equal"], [502, 4, 1, "", "log"], [506, 4, 1, "", "log10"], [510, 4, 1, "", "log1p"], [514, 4, 1, "", "log2"], [518, 4, 1, "", "logaddexp"], [522, 4, 1, "", "logical_and"], [526, 4, 1, "", "logical_not"], [530, 4, 1, "", "logical_or"], [534, 4, 1, "", "logical_xor"], [767, 4, 1, "", "matmul"], [771, 4, 1, "", "matrix_norm"], [775, 4, 1, "", "matrix_rank"], [778, 4, 1, "", "matrix_transpose"], [961, 4, 1, "", "max"], [965, 4, 1, "", "mean"], [211, 4, 1, "", "meshgrid"], [969, 4, 1, "", "min"], [540, 4, 1, "", "multiply"], [216, 4, 1, "", "native_array"], [545, 4, 1, "", "negative"], [549, 4, 1, "", "not_equal"], [224, 4, 1, "", "ones_like"], [781, 4, 1, "", "outer"], [853, 4, 1, "", "permute_dims"], [784, 4, 1, "", "pinv"], [553, 4, 1, "", "positive"], [557, 4, 1, "", "pow"], [973, 4, 1, "", "prod"], [787, 4, 1, "", "qr"], [561, 4, 1, "", "remainder"], [857, 4, 1, "", "repeat"], [861, 4, 1, "", "reshape"], [306, 4, 1, "", "result_type"], [865, 4, 1, "", "roll"], [565, 4, 1, "", "round"], [569, 4, 1, "", "sign"], [574, 4, 1, "", "sin"], [579, 4, 1, "", "sinh"], [167, 4, 1, "", "softplus"], [791, 4, 1, "", "solve"], [951, 4, 1, "", "sort"], [826, 4, 1, "", "sparse_cross_entropy"], [584, 4, 1, "", "sqrt"], [588, 4, 1, "", "square"], [871, 4, 1, "", "squeeze"], [875, 4, 1, "", "stack"], [977, 4, 1, "", "std"], [593, 4, 1, "", "subtract"], [981, 4, 1, "", "sum"], [794, 4, 1, "", "svd"], [797, 4, 1, "", "svdvals"], [879, 4, 1, "", "swapaxes"], [598, 4, 1, "", "tan"], [603, 4, 1, "", "tanh"], [800, 4, 1, "", "tensordot"], [883, 4, 1, "", "tile"], [683, 4, 1, "", "to_numpy"], [803, 4, 1, "", "trace"], [230, 4, 1, "", "tril"], [235, 4, 1, "", "triu"], [607, 4, 1, "", "trunc"], [939, 4, 1, "", "unique_counts"], [985, 4, 1, "", "var"], [806, 4, 1, "", "vecdot"], [809, 4, 1, "", "vector_norm"], [812, 4, 1, "", "vector_to_skew_symmetric_matrix"], [887, 4, 1, "", "zero_pad"], [243, 4, 1, "", "zeros_like"]], "ivy.array.conversions": [[28, 4, 1, "", "args_to_ivy"], [29, 4, 1, "", "args_to_native"], [30, 4, 1, "", "to_ivy"], [31, 4, 1, "", "to_native"]], "ivy.array.creation": [[33, 1, 1, "", "ArrayWithCreation"]], "ivy.array.creation.ArrayWithCreation": [[33, 2, 1, "", "asarray"], [33, 2, 1, "", "empty_like"], [33, 2, 1, "", "from_dlpack"], [33, 2, 1, "", "full_like"], [33, 2, 1, "", "meshgrid"], [33, 2, 1, "", "native_array"], [33, 2, 1, "", "ones_like"], [33, 2, 1, "", "tril"], [33, 2, 1, "", "triu"], [33, 2, 1, "", "zeros_like"]], "ivy.array.data_type": [[35, 1, 1, "", "ArrayWithDataTypes"]], "ivy.array.data_type.ArrayWithDataTypes": [[35, 2, 1, "", "astype"], [35, 2, 1, "", "broadcast_arrays"], [35, 2, 1, "", "broadcast_to"], [35, 2, 1, "", "can_cast"], [35, 2, 1, "", "dtype"], [35, 2, 1, "", "finfo"], [35, 2, 1, "", "iinfo"], [35, 2, 1, "", "is_float_dtype"], [35, 2, 1, "", "is_int_dtype"], [35, 2, 1, "", "result_type"]], "ivy.array.device": [[37, 1, 1, "", "ArrayWithDevice"]], "ivy.array.elementwise": [[39, 1, 1, "", "ArrayWithElementwise"]], "ivy.array.elementwise.ArrayWithElementwise": [[39, 2, 1, "", "abs"], [39, 2, 1, "", "acos"], [39, 2, 1, "", "acosh"], [39, 2, 1, "", "add"], [39, 2, 1, "", "asin"], [39, 2, 1, "", "asinh"], [39, 2, 1, "", "atan"], [39, 2, 1, "", "atan2"], [39, 2, 1, "", "atanh"], [39, 2, 1, "", "bitwise_and"], [39, 2, 1, "", "bitwise_invert"], [39, 2, 1, "", "bitwise_left_shift"], [39, 2, 1, "", "bitwise_or"], [39, 2, 1, "", "bitwise_right_shift"], [39, 2, 1, "", "bitwise_xor"], [39, 2, 1, "", "ceil"], [39, 2, 1, "", "cos"], [39, 2, 1, "", "cosh"], [39, 2, 1, "", "divide"], [39, 2, 1, "", "equal"], [39, 2, 1, "", "erf"], [39, 2, 1, "", "exp"], [39, 2, 1, "", "expm1"], [39, 2, 1, "", "floor"], [39, 2, 1, "", "floor_divide"], [39, 2, 1, "", "greater"], [39, 2, 1, "", "greater_equal"], [39, 2, 1, "", "isfinite"], [39, 2, 1, "", "isinf"], [39, 2, 1, "", "isnan"], [39, 2, 1, "", "less"], [39, 2, 1, "", "less_equal"], [39, 2, 1, "", "log"], [39, 2, 1, "", "log10"], [39, 2, 1, "", "log1p"], [39, 2, 1, "", "log2"], [39, 2, 1, "", "logaddexp"], [39, 2, 1, "", "logical_and"], [39, 2, 1, "", "logical_not"], [39, 2, 1, "", "logical_or"], [39, 2, 1, "", "logical_xor"], [39, 2, 1, "", "multiply"], [39, 2, 1, "", "negative"], [39, 2, 1, "", "not_equal"], [39, 2, 1, "", "positive"], [39, 2, 1, "", "pow"], [39, 2, 1, "", "remainder"], [39, 2, 1, "", "round"], [39, 2, 1, "", "sign"], [39, 2, 1, "", "sin"], [39, 2, 1, "", "sinh"], [39, 2, 1, "", "sqrt"], [39, 2, 1, "", "square"], [39, 2, 1, "", "subtract"], [39, 2, 1, "", "tan"], [39, 2, 1, "", "tanh"], [39, 2, 1, "", "trunc"]], "ivy.array.general": [[41, 1, 1, "", "ArrayWithGeneral"]], "ivy.array.general.ArrayWithGeneral": [[41, 2, 1, "", "all_equal"], [41, 2, 1, "", "gather_nd"], [41, 2, 1, "", "to_numpy"]], "ivy.array.gradients": [[43, 1, 1, "", "ArrayWithGradients"]], "ivy.array.gradients.ArrayWithGradients": [[43, 2, 1, "", "adam_step"]], "ivy.array.image": [[45, 1, 1, "", "ArrayWithImage"]], "ivy.array.layers": [[47, 1, 1, "", "ArrayWithLayers"]], "ivy.array.linear_algebra": [[49, 1, 1, "", "ArrayWithLinearAlgebra"]], "ivy.array.linear_algebra.ArrayWithLinearAlgebra": [[49, 2, 1, "", "cholesky"], [49, 2, 1, "", "cross"], [49, 2, 1, "", "det"], [49, 2, 1, "", "diagonal"], [49, 2, 1, "", "eigh"], [49, 2, 1, "", "eigvalsh"], [49, 2, 1, "", "inv"], [49, 2, 1, "", "matmul"], [49, 2, 1, "", "matrix_norm"], [49, 2, 1, "", "matrix_rank"], [49, 2, 1, "", "matrix_transpose"], [49, 2, 1, "", "outer"], [49, 2, 1, "", "pinv"], [49, 2, 1, "", "qr"], [49, 2, 1, "", "solve"], [49, 2, 1, "", "svd"], [49, 2, 1, "", "svdvals"], [49, 2, 1, "", "tensordot"], [49, 2, 1, "", "trace"], [49, 2, 1, "", "vecdot"], [49, 2, 1, "", "vector_norm"], [49, 2, 1, "", "vector_to_skew_symmetric_matrix"]], "ivy.array.losses": [[51, 1, 1, "", "ArrayWithLosses"]], "ivy.array.losses.ArrayWithLosses": [[51, 2, 1, "", "binary_cross_entropy"], [51, 2, 1, "", "cross_entropy"], [51, 2, 1, "", "sparse_cross_entropy"]], "ivy.array.manipulation": [[53, 1, 1, "", "ArrayWithManipulation"]], "ivy.array.manipulation.ArrayWithManipulation": [[53, 2, 1, "", "clip"], [53, 2, 1, "", "concat"], [53, 2, 1, "", "constant_pad"], [53, 2, 1, "", "expand_dims"], [53, 2, 1, "", "flip"], [53, 2, 1, "", "permute_dims"], [53, 2, 1, "", "repeat"], [53, 2, 1, "", "reshape"], [53, 2, 1, "", "roll"], [53, 2, 1, "", "squeeze"], [53, 2, 1, "", "stack"], [53, 2, 1, "", "swapaxes"], [53, 2, 1, "", "tile"], [53, 2, 1, "", "zero_pad"]], "ivy.array.norms": [[55, 1, 1, "", "ArrayWithNorms"]], "ivy.array.norms.ArrayWithNorms": [[55, 2, 1, "", "layer_norm"]], "ivy.array.random": [[57, 1, 1, "", "ArrayWithRandom"]], "ivy.array.searching": [[59, 1, 1, "", "ArrayWithSearching"]], "ivy.array.set": [[61, 1, 1, "", "ArrayWithSet"]], "ivy.array.set.ArrayWithSet": [[61, 2, 1, "", "unique_counts"]], "ivy.array.sorting": [[63, 1, 1, "", "ArrayWithSorting"]], "ivy.array.sorting.ArrayWithSorting": [[63, 2, 1, "", "argsort"], [63, 2, 1, "", "sort"]], "ivy.array.statistical": [[65, 1, 1, "", "ArrayWithStatistical"]], "ivy.array.statistical.ArrayWithStatistical": [[65, 2, 1, "", "einsum"], [65, 2, 1, "", "max"], [65, 2, 1, "", "mean"], [65, 2, 1, "", "min"], [65, 2, 1, "", "prod"], [65, 2, 1, "", "std"], [65, 2, 1, "", "sum"], [65, 2, 1, "", "var"]], "ivy.array.utility": [[67, 1, 1, "", "ArrayWithUtility"]], "ivy.array.utility.ArrayWithUtility": [[67, 2, 1, "", "all"], [67, 2, 1, "", "any"]], "ivy.array.wrapping": [[69, 4, 1, "", "add_ivy_array_instance_methods"]], "ivy": [[0, 0, 0, "-", "backend_handler"], [150, 0, 0, "-", "func_wrapper"], [1002, 0, 0, "-", "inspection"], [1045, 0, 0, "-", "verbosity"]], "ivy.backend_handler": [[0, 1, 1, "", "ContextManager"], [2, 4, 1, "", "choose_random_backend"], [3, 4, 1, "", "clear_backend_stack"], [4, 4, 1, "", "current_backend"], [5, 4, 1, "", "get_backend"], [6, 4, 1, "", "set_backend"], [7, 4, 1, "", "try_import_ivy_jax"], [8, 4, 1, "", "try_import_ivy_mxnet"], [9, 4, 1, "", "try_import_ivy_numpy"], [10, 4, 1, "", "try_import_ivy_tf"], [11, 4, 1, "", "try_import_ivy_torch"], [12, 4, 1, "", "unset_backend"]], "ivy.backend_handler.ContextManager": [[0, 2, 1, "", "__init__"]], "ivy.container": [[70, 0, 0, "-", "activations"], [72, 0, 0, "-", "base"], [74, 0, 0, "-", "container"], [77, 0, 0, "-", "creation"], [79, 0, 0, "-", "data_type"], [81, 0, 0, "-", "device"], [83, 0, 0, "-", "elementwise"], [85, 0, 0, "-", "general"], [87, 0, 0, "-", "gradients"], [89, 0, 0, "-", "image"], [91, 0, 0, "-", "layers"], [93, 0, 0, "-", "linear_algebra"], [95, 0, 0, "-", "losses"], [97, 0, 0, "-", "manipulation"], [99, 0, 0, "-", "norms"], [101, 0, 0, "-", "random"], [103, 0, 0, "-", "searching"], [105, 0, 0, "-", "set"], [107, 0, 0, "-", "sorting"], [109, 0, 0, "-", "statistical"], [111, 0, 0, "-", "utility"], [113, 0, 0, "-", "wrapping"]], "ivy.container.activations": [[71, 1, 1, "", "ContainerWithActivations"]], "ivy.container.activations.ContainerWithActivations": [[71, 2, 1, "", "softplus"], [71, 2, 1, "", "static_softplus"]], "ivy.container.base": [[73, 1, 1, "", "ContainerBase"]], "ivy.container.base.ContainerBase": [[73, 2, 1, "", "__getitem__"], [73, 2, 1, "", "__init__"], [73, 2, 1, "", "__setitem__"], [73, 2, 1, "", "all_false"], [73, 2, 1, "", "all_key_chains"], [73, 2, 1, "", "all_true"], [73, 2, 1, "", "arrays_as_lists"], [73, 2, 1, "", "as_arrays"], [73, 2, 1, "", "as_bools"], [73, 2, 1, "", "as_ones"], [73, 2, 1, "", "as_random_uniform"], [73, 2, 1, "", "as_variables"], [73, 2, 1, "", "as_zeros"], [73, 2, 1, "", "assert_contains_sub_container"], [73, 2, 1, "", "assert_contains_sub_structure"], [73, 2, 1, "", "assert_identical"], [73, 2, 1, "", "assert_identical_structure"], [73, 2, 1, "", "at_key_chain"], [73, 2, 1, "", "at_key_chains"], [73, 2, 1, "", "at_keys"], [73, 2, 1, "", "clip"], [73, 2, 1, "", "combine"], [73, 2, 1, "", "common_key_chains"], [73, 3, 1, "", "config"], [73, 2, 1, "", "contains_sub_container"], [73, 2, 1, "", "contains_sub_structure"], [73, 2, 1, "", "copy"], [73, 2, 1, "", "create_if_absent"], [73, 2, 1, "", "cutoff_at_depth"], [73, 2, 1, "", "cutoff_at_height"], [73, 2, 1, "", "deep_copy"], [73, 3, 1, "", "dev"], [73, 2, 1, "", "dev_clone"], [73, 2, 1, "", "dev_dist"], [73, 3, 1, "", "dev_str"], [73, 2, 1, "", "diff"], [73, 2, 1, "", "dtype"], [73, 2, 1, "", "einops_rearrange"], [73, 2, 1, "", "einops_reduce"], [73, 2, 1, "", "einops_repeat"], [73, 2, 1, "", "find_sub_container"], [73, 2, 1, "", "find_sub_structure"], [73, 2, 1, "", "flatten_key_chain"], [73, 2, 1, "", "flatten_key_chains"], [73, 2, 1, "", "format_key_chains"], [73, 2, 1, "", "from_disk_as_hdf5"], [73, 2, 1, "", "from_disk_as_json"], [73, 2, 1, "", "from_disk_as_pickled"], [73, 2, 1, "", "from_flat_list"], [73, 2, 1, "", "from_numpy"], [73, 2, 1, "", "gather"], [73, 2, 1, "", "gather_nd"], [73, 2, 1, "", "h5_file_size"], [73, 2, 1, "", "handle_inplace"], [73, 2, 1, "", "has_key"], [73, 2, 1, "", "has_key_chain"], [73, 2, 1, "", "has_nans"], [73, 2, 1, "", "identical"], [73, 2, 1, "", "identical_array_shapes"], [73, 2, 1, "", "identical_configs"], [73, 2, 1, "", "identical_structure"], [73, 2, 1, "", "if_exists"], [73, 2, 1, "", "inplace_update"], [73, 3, 1, "", "ivy"], [73, 2, 1, "", "key_chains_containing"], [73, 2, 1, "", "list_join"], [73, 2, 1, "", "list_stack"], [73, 2, 1, "", "map"], [73, 2, 1, "", "map_conts"], [73, 2, 1, "", "matrix_norm"], [73, 3, 1, "", "max_depth"], [73, 2, 1, "", "maximum"], [73, 2, 1, "", "minimum"], [73, 2, 1, "", "multi_map"], [73, 2, 1, "", "multi_map_in_static_method"], [73, 2, 1, "", "num_arrays"], [73, 2, 1, "", "overwrite_at_key_chain"], [73, 2, 1, "", "overwrite_at_key_chains"], [73, 2, 1, "", "prune_empty"], [73, 2, 1, "", "prune_key_chain"], [73, 2, 1, "", "prune_key_chains"], [73, 2, 1, "", "prune_key_from_key_chains"], [73, 2, 1, "", "prune_keys"], [73, 2, 1, "", "prune_keys_from_key_chains"], [73, 2, 1, "", "reduce"], [73, 2, 1, "", "remove_key_length_limit"], [73, 2, 1, "", "remove_print_limit"], [73, 2, 1, "", "reshape_like"], [73, 2, 1, "", "restructure"], [73, 2, 1, "", "restructure_key_chains"], [73, 2, 1, "", "set_at_key_chain"], [73, 2, 1, "", "set_at_key_chains"], [73, 2, 1, "", "set_at_keys"], [73, 2, 1, "", "set_framework"], [73, 2, 1, "", "set_ivy_backend"], [73, 3, 1, "", "shape"], [73, 3, 1, "", "shapes"], [73, 2, 1, "", "show"], [73, 2, 1, "", "show_sub_container"], [73, 2, 1, "", "shuffle"], [73, 2, 1, "", "shuffle_h5_file"], [73, 2, 1, "", "size_ordered_arrays"], [73, 2, 1, "", "slice_keys"], [73, 2, 1, "", "slice_via_key"], [73, 2, 1, "", "sort_by_key"], [73, 2, 1, "", "split"], [73, 2, 1, "", "stop_gradients"], [73, 2, 1, "", "structural_diff"], [73, 2, 1, "", "to_device"], [73, 2, 1, "", "to_dict"], [73, 2, 1, "", "to_disk_as_hdf5"], [73, 2, 1, "", "to_disk_as_json"], [73, 2, 1, "", "to_disk_as_pickled"], [73, 2, 1, "", "to_flat_list"], [73, 2, 1, "", "to_iterator"], [73, 2, 1, "", "to_iterator_keys"], [73, 2, 1, "", "to_iterator_values"], [73, 2, 1, "", "to_ivy"], [73, 2, 1, "", "to_jsonable"], [73, 2, 1, "", "to_list"], [73, 2, 1, "", "to_multi_dev"], [73, 2, 1, "", "to_native"], [73, 2, 1, "", "to_numpy"], [73, 2, 1, "", "to_raw"], [73, 2, 1, "", "trim_key"], [73, 2, 1, "", "try_kc"], [73, 2, 1, "", "unify"], [73, 2, 1, "", "unstack"], [73, 2, 1, "", "update_config"], [73, 2, 1, "", "vector_norm"], [73, 2, 1, "", "with_default_key_color"], [73, 2, 1, "", "with_entries_as_lists"], [73, 2, 1, "", "with_ivy_backend"], [73, 2, 1, "", "with_key_length_limit"], [73, 2, 1, "", "with_print_indent"], [73, 2, 1, "", "with_print_limit"], [73, 2, 1, "", "with_print_line_spacing"]], "ivy.container.container": [[75, 1, 1, "", "Container"], [76, 1, 1, "", "MultiDevContainer"]], "ivy.container.container.Container": [[75, 2, 1, "", "__add__"], [75, 2, 1, "", "__init__"], [75, 2, 1, "", "__radd__"], [75, 2, 1, "", "arange"], [75, 2, 1, "", "arg_info"], [75, 2, 1, "", "arg_names"], [75, 2, 1, "", "argmax"], [75, 2, 1, "", "argmin"], [75, 2, 1, "", "array"], [75, 2, 1, "", "array_equal"], [75, 2, 1, "", "arrays_equal"], [75, 2, 1, "", "as_ivy_dev"], [75, 2, 1, "", "as_ivy_dtype"], [75, 2, 1, "", "as_native_dev"], [75, 2, 1, "", "as_native_dtype"], [75, 2, 1, "", "assert_supports_inplace"], [75, 2, 1, "", "cache_fn"], [75, 2, 1, "", "clear_mem_on_dev"], [75, 2, 1, "", "clip_matrix_norm"], [75, 2, 1, "", "closest_valid_dtype"], [75, 2, 1, "", "container_types"], [75, 2, 1, "", "conv1d"], [75, 2, 1, "", "conv1d_transpose"], [75, 2, 1, "", "conv2d"], [75, 2, 1, "", "conv2d_transpose"], [75, 2, 1, "", "conv3d"], [75, 2, 1, "", "conv3d_transpose"], [75, 2, 1, "", "copy_array"], [75, 2, 1, "", "cross"], [75, 2, 1, "", "cumprod"], [75, 2, 1, "", "cumsum"], [75, 2, 1, "", "current_backend"], [75, 2, 1, "", "current_backend_str"], [75, 2, 1, "", "default"], [75, 2, 1, "", "default_device"], [75, 2, 1, "", "default_dtype"], [75, 2, 1, "", "default_float_dtype"], [75, 2, 1, "", "default_int_dtype"], [75, 2, 1, "", "depthwise_conv2d"], [75, 2, 1, "", "det"], [75, 2, 1, "", "dev_clone_array"], [75, 2, 1, "", "dev_clone_iter"], [75, 2, 1, "", "dev_clone_nest"], [75, 2, 1, "", "dev_dist_array"], [75, 2, 1, "", "dev_dist_iter"], [75, 2, 1, "", "dev_dist_nest"], [75, 2, 1, "", "dev_unify"], [75, 2, 1, "", "dev_unify_array"], [75, 2, 1, "", "dev_unify_iter"], [75, 2, 1, "", "dev_unify_nest"], [75, 2, 1, "", "dev_util"], [75, 2, 1, "", "diagonal"], [75, 2, 1, "", "dropout"], [75, 2, 1, "", "dtype_bits"], [75, 2, 1, "", "eigh"], [75, 2, 1, "", "eigvalsh"], [75, 2, 1, "", "empty"], [75, 2, 1, "", "execute_with_gradients"], [75, 2, 1, "", "exists"], [75, 2, 1, "", "eye"], [75, 2, 1, "", "floormod"], [75, 2, 1, "", "fourier_encode"], [75, 2, 1, "", "full"], [75, 2, 1, "", "function_supported_dtypes"], [75, 2, 1, "", "function_unsupported_dtypes"], [75, 2, 1, "", "gelu"], [75, 2, 1, "", "get_all_arrays_in_memory"], [75, 2, 1, "", "get_all_ivy_arrays_on_dev"], [75, 2, 1, "", "get_min_base"], [75, 2, 1, "", "get_min_denominator"], [75, 2, 1, "", "get_num_dims"], [75, 2, 1, "", "get_referrers_recursive"], [75, 2, 1, "", "gpu_is_available"], [75, 2, 1, "", "handle_nestable"], [75, 2, 1, "", "handle_out_argument"], [75, 2, 1, "", "indices_where"], [75, 2, 1, "", "infer_device"], [75, 2, 1, "", "infer_dtype"], [75, 2, 1, "", "inplace_arrays_supported"], [75, 2, 1, "", "inplace_decrement"], [75, 2, 1, "", "inplace_increment"], [75, 2, 1, "", "inplace_variables_supported"], [75, 2, 1, "", "inputs_to_native_arrays"], [75, 2, 1, "", "inv"], [75, 2, 1, "", "invalid_dtype"], [75, 2, 1, "", "is_ivy_container"], [75, 2, 1, "", "leaky_relu"], [75, 2, 1, "", "linear"], [75, 2, 1, "", "linspace"], [75, 2, 1, "", "logspace"], [75, 2, 1, "", "lstm_update"], [75, 2, 1, "", "match_kwargs"], [75, 2, 1, "", "matrix_power"], [75, 2, 1, "", "matrix_rank"], [75, 2, 1, "", "matrix_transpose"], [75, 2, 1, "", "multi_head_attention"], [75, 2, 1, "", "multinomial"], [75, 2, 1, "", "multiprocessing"], [75, 2, 1, "", "nonzero"], [75, 2, 1, "", "num_arrays_in_memory"], [75, 2, 1, "", "num_cpu_cores"], [75, 2, 1, "", "num_gpus"], [75, 2, 1, "", "num_ivy_arrays_on_dev"], [75, 2, 1, "", "one_hot"], [75, 2, 1, "", "ones"], [75, 2, 1, "", "outer"], [75, 2, 1, "", "outputs_to_ivy_arrays"], [75, 2, 1, "", "percent_used_mem_on_dev"], [75, 2, 1, "", "pinv"], [75, 2, 1, "", "print_all_arrays_in_memory"], [75, 2, 1, "", "print_all_ivy_arrays_on_dev"], [75, 2, 1, "", "promote_types"], [75, 2, 1, "", "qr"], [75, 2, 1, "", "queue_timeout"], [75, 2, 1, "", "randint"], [75, 2, 1, "", "random_normal"], [75, 2, 1, "", "relu"], [75, 2, 1, "", "scaled_dot_product_attention"], [75, 2, 1, "", "scatter_flat"], [75, 2, 1, "", "scatter_nd"], [75, 2, 1, "", "seed"], [75, 2, 1, "", "set_default_device"], [75, 2, 1, "", "set_default_dtype"], [75, 2, 1, "", "set_default_float_dtype"], [75, 2, 1, "", "set_default_int_dtype"], [75, 2, 1, "", "set_min_base"], [75, 2, 1, "", "set_min_denominator"], [75, 2, 1, "", "set_queue_timeout"], [75, 2, 1, "", "set_shape_array_mode"], [75, 2, 1, "", "set_split_factor"], [75, 2, 1, "", "set_tmp_dir"], [75, 2, 1, "", "set_with_grads"], [75, 2, 1, "", "shape_array_mode"], [75, 2, 1, "", "shape_to_tuple"], [75, 2, 1, "", "sigmoid"], [75, 2, 1, "", "slogdet"], [75, 2, 1, "", "softmax"], [75, 2, 1, "", "solve"], [75, 2, 1, "", "split_factor"], [75, 2, 1, "", "split_func_call"], [75, 2, 1, "", "stable_divide"], [75, 2, 1, "", "stable_pow"], [75, 2, 1, "", "static_acos"], [75, 2, 1, "", "static_acosh"], [75, 2, 1, "", "static_arg_info"], [75, 2, 1, "", "static_arg_names"], [75, 2, 1, "", "static_argmax"], [75, 2, 1, "", "static_argmin"], [75, 2, 1, "", "static_array"], [75, 2, 1, "", "static_array_equal"], [75, 2, 1, "", "static_arrays_equal"], [75, 2, 1, "", "static_as_ivy_dev"], [75, 2, 1, "", "static_as_ivy_dtype"], [75, 2, 1, "", "static_as_native_dev"], [75, 2, 1, "", "static_as_native_dtype"], [75, 2, 1, "", "static_asin"], [75, 2, 1, "", "static_assert_supports_inplace"], [75, 2, 1, "", "static_atan"], [75, 2, 1, "", "static_atan2"], [75, 2, 1, "", "static_atanh"], [75, 2, 1, "", "static_bitwise_and"], [75, 2, 1, "", "static_bitwise_invert"], [75, 2, 1, "", "static_bitwise_left_shift"], [75, 2, 1, "", "static_bitwise_or"], [75, 2, 1, "", "static_bitwise_right_shift"], [75, 2, 1, "", "static_bitwise_xor"], [75, 2, 1, "", "static_cache_fn"], [75, 2, 1, "", "static_ceil"], [75, 2, 1, "", "static_clear_mem_on_dev"], [75, 2, 1, "", "static_clip_matrix_norm"], [75, 2, 1, "", "static_clip_vector_norm"], [75, 2, 1, "", "static_closest_valid_dtype"], [75, 2, 1, "", "static_concat"], [75, 2, 1, "", "static_constant_pad"], [75, 2, 1, "", "static_container_types"], [75, 2, 1, "", "static_conv1d"], [75, 2, 1, "", "static_conv1d_transpose"], [75, 2, 1, "", "static_conv2d"], [75, 2, 1, "", "static_conv2d_transpose"], [75, 2, 1, "", "static_conv3d"], [75, 2, 1, "", "static_conv3d_transpose"], [75, 2, 1, "", "static_copy_array"], [75, 2, 1, "", "static_cos"], [75, 2, 1, "", "static_cosh"], [75, 2, 1, "", "static_cross"], [75, 2, 1, "", "static_cumprod"], [75, 2, 1, "", "static_cumsum"], [75, 2, 1, "", "static_current_backend"], [75, 2, 1, "", "static_current_backend_str"], [75, 2, 1, "", "static_default"], [75, 2, 1, "", "static_default_device"], [75, 2, 1, "", "static_default_dtype"], [75, 2, 1, "", "static_default_float_dtype"], [75, 2, 1, "", "static_default_int_dtype"], [75, 2, 1, "", "static_depthwise_conv2d"], [75, 2, 1, "", "static_det"], [75, 2, 1, "", "static_dev"], [75, 2, 1, "", "static_dev_clone"], [75, 2, 1, "", "static_dev_clone_array"], [75, 2, 1, "", "static_dev_clone_iter"], [75, 2, 1, "", "static_dev_clone_nest"], [75, 2, 1, "", "static_dev_dist"], [75, 2, 1, "", "static_dev_dist_array"], [75, 2, 1, "", "static_dev_dist_iter"], [75, 2, 1, "", "static_dev_dist_nest"], [75, 2, 1, "", "static_dev_unify"], [75, 2, 1, "", "static_dev_unify_array"], [75, 2, 1, "", "static_dev_unify_iter"], [75, 2, 1, "", "static_dev_unify_nest"], [75, 2, 1, "", "static_dev_util"], [75, 2, 1, "", "static_diagonal"], [75, 2, 1, "", "static_dropout"], [75, 2, 1, "", "static_dtype"], [75, 2, 1, "", "static_dtype_bits"], [75, 2, 1, "", "static_eigh"], [75, 2, 1, "", "static_eigvalsh"], [75, 2, 1, "", "static_einops_rearrange"], [75, 2, 1, "", "static_einops_reduce"], [75, 2, 1, "", "static_einops_repeat"], [75, 2, 1, "", "static_einsum"], [75, 2, 1, "", "static_empty"], [75, 2, 1, "", "static_equal"], [75, 2, 1, "", "static_erf"], [75, 2, 1, "", "static_execute_with_gradients"], [75, 2, 1, "", "static_exists"], [75, 2, 1, "", "static_exp"], [75, 2, 1, "", "static_expand_dims"], [75, 2, 1, "", "static_expm1"], [75, 2, 1, "", "static_flip"], [75, 2, 1, "", "static_floor"], [75, 2, 1, "", "static_floor_divide"], [75, 2, 1, "", "static_floormod"], [75, 2, 1, "", "static_fourier_encode"], [75, 2, 1, "", "static_full"], [75, 2, 1, "", "static_function_supported_dtypes"], [75, 2, 1, "", "static_function_unsupported_dtypes"], [75, 2, 1, "", "static_gather"], [75, 2, 1, "", "static_gelu"], [75, 2, 1, "", "static_get_all_arrays_in_memory"], [75, 2, 1, "", "static_get_all_ivy_arrays_on_dev"], [75, 2, 1, "", "static_get_min_base"], [75, 2, 1, "", "static_get_min_denominator"], [75, 2, 1, "", "static_get_num_dims"], [75, 2, 1, "", "static_get_referrers_recursive"], [75, 2, 1, "", "static_gpu_is_available"], [75, 2, 1, "", "static_greater"], [75, 2, 1, "", "static_greater_equal"], [75, 2, 1, "", "static_handle_nestable"], [75, 2, 1, "", "static_handle_out_argument"], [75, 2, 1, "", "static_has_nans"], [75, 2, 1, "", "static_indices_where"], [75, 2, 1, "", "static_infer_device"], [75, 2, 1, "", "static_infer_dtype"], [75, 2, 1, "", "static_inplace_arrays_supported"], [75, 2, 1, "", "static_inplace_decrement"], [75, 2, 1, "", "static_inplace_increment"], [75, 2, 1, "", "static_inplace_update"], [75, 2, 1, "", "static_inplace_variables_supported"], [75, 2, 1, "", "static_inputs_to_native_arrays"], [75, 2, 1, "", "static_inv"], [75, 2, 1, "", "static_invalid_dtype"], [75, 2, 1, "", "static_is_array"], [75, 2, 1, "", "static_is_ivy_array"], [75, 2, 1, "", "static_is_ivy_container"], [75, 2, 1, "", "static_is_native_array"], [75, 2, 1, "", "static_isfinite"], [75, 2, 1, "", "static_isinf"], [75, 2, 1, "", "static_isnan"], [75, 2, 1, "", "static_leaky_relu"], [75, 2, 1, "", "static_less"], [75, 2, 1, "", "static_less_equal"], [75, 2, 1, "", "static_linear"], [75, 2, 1, "", "static_log"], [75, 2, 1, "", "static_log10"], [75, 2, 1, "", "static_log1p"], [75, 2, 1, "", "static_log2"], [75, 2, 1, "", "static_logaddexp"], [75, 2, 1, "", "static_logical_and"], [75, 2, 1, "", "static_logical_not"], [75, 2, 1, "", "static_logical_or"], [75, 2, 1, "", "static_logical_xor"], [75, 2, 1, "", "static_lstm_update"], [75, 2, 1, "", "static_match_kwargs"], [75, 2, 1, "", "static_matmul"], [75, 2, 1, "", "static_matrix_norm"], [75, 2, 1, "", "static_matrix_power"], [75, 2, 1, "", "static_matrix_rank"], [75, 2, 1, "", "static_matrix_transpose"], [75, 2, 1, "", "static_max"], [75, 2, 1, "", "static_maximum"], [75, 2, 1, "", "static_mean"], [75, 2, 1, "", "static_min"], [75, 2, 1, "", "static_minimum"], [75, 2, 1, "", "static_multi_head_attention"], [75, 2, 1, "", "static_multinomial"], [75, 2, 1, "", "static_multiprocessing"], [75, 2, 1, "", "static_negative"], [75, 2, 1, "", "static_nonzero"], [75, 2, 1, "", "static_not_equal"], [75, 2, 1, "", "static_num_arrays_in_memory"], [75, 2, 1, "", "static_num_cpu_cores"], [75, 2, 1, "", "static_num_gpus"], [75, 2, 1, "", "static_num_ivy_arrays_on_dev"], [75, 2, 1, "", "static_one_hot"], [75, 2, 1, "", "static_outer"], [75, 2, 1, "", "static_outputs_to_ivy_arrays"], [75, 2, 1, "", "static_percent_used_mem_on_dev"], [75, 2, 1, "", "static_permute_dims"], [75, 2, 1, "", "static_pinv"], [75, 2, 1, "", "static_positive"], [75, 2, 1, "", "static_pow"], [75, 2, 1, "", "static_print_all_arrays_in_memory"], [75, 2, 1, "", "static_print_all_ivy_arrays_on_dev"], [75, 2, 1, "", "static_prod"], [75, 2, 1, "", "static_promote_types"], [75, 2, 1, "", "static_qr"], [75, 2, 1, "", "static_queue_timeout"], [75, 2, 1, "", "static_random_normal"], [75, 2, 1, "", "static_relu"], [75, 2, 1, "", "static_remainder"], [75, 2, 1, "", "static_repeat"], [75, 2, 1, "", "static_reshape"], [75, 2, 1, "", "static_round"], [75, 2, 1, "", "static_scaled_dot_product_attention"], [75, 2, 1, "", "static_scatter_flat"], [75, 2, 1, "", "static_scatter_nd"], [75, 2, 1, "", "static_seed"], [75, 2, 1, "", "static_set_default_device"], [75, 2, 1, "", "static_set_default_dtype"], [75, 2, 1, "", "static_set_default_float_dtype"], [75, 2, 1, "", "static_set_default_int_dtype"], [75, 2, 1, "", "static_set_min_base"], [75, 2, 1, "", "static_set_min_denominator"], [75, 2, 1, "", "static_set_queue_timeout"], [75, 2, 1, "", "static_set_shape_array_mode"], [75, 2, 1, "", "static_set_split_factor"], [75, 2, 1, "", "static_set_tmp_dir"], [75, 2, 1, "", "static_set_with_grads"], [75, 2, 1, "", "static_shape"], [75, 2, 1, "", "static_shape_array_mode"], [75, 2, 1, "", "static_shape_to_tuple"], [75, 2, 1, "", "static_shuffle"], [75, 2, 1, "", "static_sigmoid"], [75, 2, 1, "", "static_slogdet"], [75, 2, 1, "", "static_softmax"], [75, 2, 1, "", "static_solve"], [75, 2, 1, "", "static_split"], [75, 2, 1, "", "static_split_factor"], [75, 2, 1, "", "static_split_func_call"], [75, 2, 1, "", "static_sqrt"], [75, 2, 1, "", "static_square"], [75, 2, 1, "", "static_squeeze"], [75, 2, 1, "", "static_stable_divide"], [75, 2, 1, "", "static_stable_pow"], [75, 2, 1, "", "static_stack"], [75, 2, 1, "", "static_std"], [75, 2, 1, "", "static_stop_gradient"], [75, 2, 1, "", "static_sum"], [75, 2, 1, "", "static_supports_inplace"], [75, 2, 1, "", "static_svd"], [75, 2, 1, "", "static_svdvals"], [75, 2, 1, "", "static_swapaxes"], [75, 2, 1, "", "static_tensordot"], [75, 2, 1, "", "static_tile"], [75, 2, 1, "", "static_tmp_dir"], [75, 2, 1, "", "static_to_device"], [75, 2, 1, "", "static_to_list"], [75, 2, 1, "", "static_to_native_arrays_and_back"], [75, 2, 1, "", "static_to_scalar"], [75, 2, 1, "", "static_total_mem_on_dev"], [75, 2, 1, "", "static_tpu_is_available"], [75, 2, 1, "", "static_trace"], [75, 2, 1, "", "static_trunc"], [75, 2, 1, "", "static_try_else_none"], [75, 2, 1, "", "static_type_promote_arrays"], [75, 2, 1, "", "static_unique_all"], [75, 2, 1, "", "static_unique_inverse"], [75, 2, 1, "", "static_unique_values"], [75, 2, 1, "", "static_unset_default_device"], [75, 2, 1, "", "static_unset_default_dtype"], [75, 2, 1, "", "static_unset_default_float_dtype"], [75, 2, 1, "", "static_unset_default_int_dtype"], [75, 2, 1, "", "static_unset_shape_array_mode"], [75, 2, 1, "", "static_unset_with_grads"], [75, 2, 1, "", "static_unstack"], [75, 2, 1, "", "static_used_mem_on_dev"], [75, 2, 1, "", "static_valid_dtype"], [75, 2, 1, "", "static_value_is_nan"], [75, 2, 1, "", "static_var"], [75, 2, 1, "", "static_variable"], [75, 2, 1, "", "static_variable_data"], [75, 2, 1, "", "static_vecdot"], [75, 2, 1, "", "static_vector_norm"], [75, 2, 1, "", "static_vector_to_skew_symmetric_matrix"], [75, 2, 1, "", "static_where"], [75, 2, 1, "", "static_with_grads"], [75, 2, 1, "", "static_zero_pad"], [75, 2, 1, "", "stop_gradient"], [75, 2, 1, "", "supports_inplace"], [75, 2, 1, "", "svd"], [75, 2, 1, "", "svdvals"], [75, 2, 1, "", "tensordot"], [75, 2, 1, "", "tmp_dir"], [75, 2, 1, "", "to_native_arrays_and_back"], [75, 2, 1, "", "to_scalar"], [75, 2, 1, "", "total_mem_on_dev"], [75, 2, 1, "", "tpu_is_available"], [75, 2, 1, "", "trace"], [75, 2, 1, "", "try_else_none"], [75, 2, 1, "", "type_promote_arrays"], [75, 2, 1, "", "unique_all"], [75, 2, 1, "", "unique_inverse"], [75, 2, 1, "", "unique_values"], [75, 2, 1, "", "unset_default_device"], [75, 2, 1, "", "unset_default_dtype"], [75, 2, 1, "", "unset_default_float_dtype"], [75, 2, 1, "", "unset_default_int_dtype"], [75, 2, 1, "", "unset_shape_array_mode"], [75, 2, 1, "", "unset_with_grads"], [75, 2, 1, "", "used_mem_on_dev"], [75, 2, 1, "", "valid_dtype"], [75, 2, 1, "", "value_is_nan"], [75, 2, 1, "", "variable"], [75, 2, 1, "", "variable_data"], [75, 2, 1, "", "vecdot"], [75, 2, 1, "", "vector_to_skew_symmetric_matrix"], [75, 2, 1, "", "where"], [75, 2, 1, "", "with_grads"], [75, 2, 1, "", "zeros"]], "ivy.container.container.MultiDevContainer": [[76, 2, 1, "", "__init__"], [76, 2, 1, "", "at_dev"], [76, 2, 1, "", "at_devs"]], "ivy.container.container_methods": [[371, 4, 1, "", "abs"], [376, 4, 1, "", "acos"], [380, 4, 1, "", "acosh"], [695, 4, 1, "", "adam_step"], [699, 4, 1, "", "adam_update"], [384, 4, 1, "", "add"], [991, 4, 1, "", "all"], [613, 4, 1, "", "all_equal"], [996, 4, 1, "", "any"], [947, 4, 1, "", "argsort"], [181, 4, 1, "", "asarray"], [389, 4, 1, "", "asin"], [393, 4, 1, "", "asinh"], [254, 4, 1, "", "astype"], [398, 4, 1, "", "atan"], [402, 4, 1, "", "atan2"], [406, 4, 1, "", "atanh"], [817, 4, 1, "", "binary_cross_entropy"], [410, 4, 1, "", "bitwise_and"], [414, 4, 1, "", "bitwise_invert"], [418, 4, 1, "", "bitwise_left_shift"], [422, 4, 1, "", "bitwise_or"], [426, 4, 1, "", "bitwise_right_shift"], [430, 4, 1, "", "bitwise_xor"], [259, 4, 1, "", "broadcast_arrays"], [264, 4, 1, "", "broadcast_to"], [269, 4, 1, "", "can_cast"], [434, 4, 1, "", "ceil"], [745, 4, 1, "", "cholesky"], [833, 4, 1, "", "clip"], [624, 4, 1, "", "clip_vector_norm"], [838, 4, 1, "", "concat"], [842, 4, 1, "", "constant_pad"], [438, 4, 1, "", "cos"], [442, 4, 1, "", "cosh"], [822, 4, 1, "", "cross_entropy"], [446, 4, 1, "", "divide"], [278, 4, 1, "", "dtype"], [958, 4, 1, "", "einsum"], [187, 4, 1, "", "empty_like"], [451, 4, 1, "", "equal"], [455, 4, 1, "", "erf"], [459, 4, 1, "", "exp"], [846, 4, 1, "", "expand_dims"], [463, 4, 1, "", "expm1"], [283, 4, 1, "", "finfo"], [850, 4, 1, "", "flip"], [467, 4, 1, "", "floor"], [471, 4, 1, "", "floor_divide"], [195, 4, 1, "", "from_dlpack"], [201, 4, 1, "", "full_like"], [641, 4, 1, "", "gather_nd"], [704, 4, 1, "", "gradient_descent_update"], [475, 4, 1, "", "greater"], [479, 4, 1, "", "greater_equal"], [290, 4, 1, "", "iinfo"], [296, 4, 1, "", "is_float_dtype"], [301, 4, 1, "", "is_int_dtype"], [708, 4, 1, "", "is_variable"], [483, 4, 1, "", "isfinite"], [487, 4, 1, "", "isinf"], [491, 4, 1, "", "isnan"], [712, 4, 1, "", "lamb_update"], [716, 4, 1, "", "lars_update"], [915, 4, 1, "", "layer_norm"], [495, 4, 1, "", "less"], [499, 4, 1, "", "less_equal"], [503, 4, 1, "", "log"], [507, 4, 1, "", "log10"], [511, 4, 1, "", "log1p"], [515, 4, 1, "", "log2"], [519, 4, 1, "", "logaddexp"], [523, 4, 1, "", "logical_and"], [527, 4, 1, "", "logical_not"], [531, 4, 1, "", "logical_or"], [535, 4, 1, "", "logical_xor"], [768, 4, 1, "", "matmul"], [962, 4, 1, "", "max"], [966, 4, 1, "", "mean"], [212, 4, 1, "", "meshgrid"], [970, 4, 1, "", "min"], [541, 4, 1, "", "multiply"], [217, 4, 1, "", "native_array"], [546, 4, 1, "", "negative"], [550, 4, 1, "", "not_equal"], [225, 4, 1, "", "ones_like"], [720, 4, 1, "", "optimizer_update"], [854, 4, 1, "", "permute_dims"], [554, 4, 1, "", "positive"], [558, 4, 1, "", "pow"], [974, 4, 1, "", "prod"], [925, 4, 1, "", "random_uniform"], [562, 4, 1, "", "remainder"], [858, 4, 1, "", "repeat"], [862, 4, 1, "", "reshape"], [307, 4, 1, "", "result_type"], [866, 4, 1, "", "roll"], [566, 4, 1, "", "round"], [570, 4, 1, "", "sign"], [575, 4, 1, "", "sin"], [580, 4, 1, "", "sinh"], [168, 4, 1, "", "softplus"], [952, 4, 1, "", "sort"], [827, 4, 1, "", "sparse_cross_entropy"], [585, 4, 1, "", "sqrt"], [589, 4, 1, "", "square"], [872, 4, 1, "", "squeeze"], [876, 4, 1, "", "stack"], [373, 4, 1, "", "static_abs"], [697, 4, 1, "", "static_adam_step"], [701, 4, 1, "", "static_adam_update"], [386, 4, 1, "", "static_add"], [993, 4, 1, "", "static_all"], [615, 4, 1, "", "static_all_equal"], [998, 4, 1, "", "static_any"], [178, 4, 1, "", "static_arange"], [949, 4, 1, "", "static_argsort"], [183, 4, 1, "", "static_asarray"], [395, 4, 1, "", "static_asinh"], [256, 4, 1, "", "static_astype"], [819, 4, 1, "", "static_binary_cross_entropy"], [261, 4, 1, "", "static_broadcast_arrays"], [266, 4, 1, "", "static_broadcast_to"], [271, 4, 1, "", "static_can_cast"], [747, 4, 1, "", "static_cholesky"], [835, 4, 1, "", "static_clip"], [824, 4, 1, "", "static_cross_entropy"], [448, 4, 1, "", "static_divide"], [189, 4, 1, "", "static_empty_like"], [192, 4, 1, "", "static_eye"], [285, 4, 1, "", "static_finfo"], [197, 4, 1, "", "static_from_dlpack"], [203, 4, 1, "", "static_full_like"], [643, 4, 1, "", "static_gather_nd"], [706, 4, 1, "", "static_gradient_descent_update"], [292, 4, 1, "", "static_iinfo"], [298, 4, 1, "", "static_is_float_dtype"], [303, 4, 1, "", "static_is_int_dtype"], [710, 4, 1, "", "static_is_variable"], [714, 4, 1, "", "static_lamb_update"], [718, 4, 1, "", "static_lars_update"], [917, 4, 1, "", "static_layer_norm"], [206, 4, 1, "", "static_linspace"], [209, 4, 1, "", "static_logspace"], [214, 4, 1, "", "static_meshgrid"], [543, 4, 1, "", "static_multiply"], [219, 4, 1, "", "static_native_array"], [222, 4, 1, "", "static_ones"], [227, 4, 1, "", "static_ones_like"], [722, 4, 1, "", "static_optimizer_update"], [922, 4, 1, "", "static_randint"], [927, 4, 1, "", "static_random_uniform"], [309, 4, 1, "", "static_result_type"], [868, 4, 1, "", "static_roll"], [572, 4, 1, "", "static_sign"], [577, 4, 1, "", "static_sin"], [582, 4, 1, "", "static_sinh"], [170, 4, 1, "", "static_softplus"], [954, 4, 1, "", "static_sort"], [829, 4, 1, "", "static_sparse_cross_entropy"], [592, 4, 1, "", "static_subtract"], [597, 4, 1, "", "static_tan"], [602, 4, 1, "", "static_tanh"], [682, 4, 1, "", "static_to_numpy"], [229, 4, 1, "", "static_tril"], [234, 4, 1, "", "static_triu"], [938, 4, 1, "", "static_unique_counts"], [239, 4, 1, "", "static_zeros"], [242, 4, 1, "", "static_zeros_like"], [978, 4, 1, "", "std"], [594, 4, 1, "", "subtract"], [982, 4, 1, "", "sum"], [880, 4, 1, "", "swapaxes"], [599, 4, 1, "", "tan"], [604, 4, 1, "", "tanh"], [884, 4, 1, "", "tile"], [684, 4, 1, "", "to_numpy"], [231, 4, 1, "", "tril"], [236, 4, 1, "", "triu"], [608, 4, 1, "", "trunc"], [940, 4, 1, "", "unique_counts"], [986, 4, 1, "", "var"], [888, 4, 1, "", "zero_pad"], [244, 4, 1, "", "zeros_like"]], "ivy.container.creation": [[78, 1, 1, "", "ContainerWithCreation"]], "ivy.container.creation.ContainerWithCreation": [[78, 2, 1, "", "asarray"], [78, 2, 1, "", "empty_like"], [78, 2, 1, "", "from_dlpack"], [78, 2, 1, "", "full_like"], [78, 2, 1, "", "meshgrid"], [78, 2, 1, "", "native_array"], [78, 2, 1, "", "ones_like"], [78, 2, 1, "", "static_arange"], [78, 2, 1, "", "static_asarray"], [78, 2, 1, "", "static_empty_like"], [78, 2, 1, "", "static_eye"], [78, 2, 1, "", "static_from_dlpack"], [78, 2, 1, "", "static_full_like"], [78, 2, 1, "", "static_linspace"], [78, 2, 1, "", "static_logspace"], [78, 2, 1, "", "static_meshgrid"], [78, 2, 1, "", "static_native_array"], [78, 2, 1, "", "static_ones"], [78, 2, 1, "", "static_ones_like"], [78, 2, 1, "", "static_tril"], [78, 2, 1, "", "static_triu"], [78, 2, 1, "", "static_zeros"], [78, 2, 1, "", "static_zeros_like"], [78, 2, 1, "", "tril"], [78, 2, 1, "", "triu"], [78, 2, 1, "", "zeros_like"]], "ivy.container.data_type": [[80, 1, 1, "", "ContainerWithDataTypes"]], "ivy.container.data_type.ContainerWithDataTypes": [[80, 2, 1, "", "astype"], [80, 2, 1, "", "broadcast_arrays"], [80, 2, 1, "", "broadcast_to"], [80, 2, 1, "", "can_cast"], [80, 2, 1, "", "dtype"], [80, 2, 1, "", "finfo"], [80, 2, 1, "", "iinfo"], [80, 2, 1, "", "is_float_dtype"], [80, 2, 1, "", "is_int_dtype"], [80, 2, 1, "", "result_type"], [80, 2, 1, "", "static_astype"], [80, 2, 1, "", "static_broadcast_arrays"], [80, 2, 1, "", "static_broadcast_to"], [80, 2, 1, "", "static_can_cast"], [80, 2, 1, "", "static_finfo"], [80, 2, 1, "", "static_iinfo"], [80, 2, 1, "", "static_is_float_dtype"], [80, 2, 1, "", "static_is_int_dtype"], [80, 2, 1, "", "static_result_type"]], "ivy.container.device": [[82, 1, 1, "", "ContainerWithDevice"]], "ivy.container.elementwise": [[84, 1, 1, "", "ContainerWithElementwise"]], "ivy.container.elementwise.ContainerWithElementwise": [[84, 2, 1, "", "abs"], [84, 2, 1, "", "acos"], [84, 2, 1, "", "acosh"], [84, 2, 1, "", "add"], [84, 2, 1, "", "asin"], [84, 2, 1, "", "asinh"], [84, 2, 1, "", "atan"], [84, 2, 1, "", "atan2"], [84, 2, 1, "", "atanh"], [84, 2, 1, "", "bitwise_and"], [84, 2, 1, "", "bitwise_invert"], [84, 2, 1, "", "bitwise_left_shift"], [84, 2, 1, "", "bitwise_or"], [84, 2, 1, "", "bitwise_right_shift"], [84, 2, 1, "", "bitwise_xor"], [84, 2, 1, "", "ceil"], [84, 2, 1, "", "cos"], [84, 2, 1, "", "cosh"], [84, 2, 1, "", "divide"], [84, 2, 1, "", "equal"], [84, 2, 1, "", "erf"], [84, 2, 1, "", "exp"], [84, 2, 1, "", "expm1"], [84, 2, 1, "", "floor"], [84, 2, 1, "", "floor_divide"], [84, 2, 1, "", "greater"], [84, 2, 1, "", "greater_equal"], [84, 2, 1, "", "isfinite"], [84, 2, 1, "", "isinf"], [84, 2, 1, "", "isnan"], [84, 2, 1, "", "less"], [84, 2, 1, "", "less_equal"], [84, 2, 1, "", "log"], [84, 2, 1, "", "log10"], [84, 2, 1, "", "log1p"], [84, 2, 1, "", "log2"], [84, 2, 1, "", "logaddexp"], [84, 2, 1, "", "logical_and"], [84, 2, 1, "", "logical_not"], [84, 2, 1, "", "logical_or"], [84, 2, 1, "", "logical_xor"], [84, 2, 1, "", "multiply"], [84, 2, 1, "", "negative"], [84, 2, 1, "", "not_equal"], [84, 2, 1, "", "positive"], [84, 2, 1, "", "pow"], [84, 2, 1, "", "remainder"], [84, 2, 1, "", "round"], [84, 2, 1, "", "sign"], [84, 2, 1, "", "sin"], [84, 2, 1, "", "sinh"], [84, 2, 1, "", "sqrt"], [84, 2, 1, "", "square"], [84, 2, 1, "", "static_abs"], [84, 2, 1, "", "static_add"], [84, 2, 1, "", "static_asinh"], [84, 2, 1, "", "static_divide"], [84, 2, 1, "", "static_multiply"], [84, 2, 1, "", "static_sign"], [84, 2, 1, "", "static_sin"], [84, 2, 1, "", "static_sinh"], [84, 2, 1, "", "static_subtract"], [84, 2, 1, "", "static_tan"], [84, 2, 1, "", "static_tanh"], [84, 2, 1, "", "subtract"], [84, 2, 1, "", "tan"], [84, 2, 1, "", "tanh"], [84, 2, 1, "", "trunc"]], "ivy.container.general": [[86, 1, 1, "", "ContainerWithGeneral"]], "ivy.container.general.ContainerWithGeneral": [[86, 2, 1, "", "all_equal"], [86, 2, 1, "", "clip_vector_norm"], [86, 2, 1, "", "gather_nd"], [86, 2, 1, "", "static_all_equal"], [86, 2, 1, "", "static_gather_nd"], [86, 2, 1, "", "static_to_numpy"], [86, 2, 1, "", "to_numpy"]], "ivy.container.gradients": [[88, 1, 1, "", "ContainerWithGradients"]], "ivy.container.gradients.ContainerWithGradients": [[88, 2, 1, "", "adam_step"], [88, 2, 1, "", "adam_update"], [88, 2, 1, "", "gradient_descent_update"], [88, 2, 1, "", "is_variable"], [88, 2, 1, "", "lamb_update"], [88, 2, 1, "", "lars_update"], [88, 2, 1, "", "optimizer_update"], [88, 2, 1, "", "static_adam_step"], [88, 2, 1, "", "static_adam_update"], [88, 2, 1, "", "static_gradient_descent_update"], [88, 2, 1, "", "static_is_variable"], [88, 2, 1, "", "static_lamb_update"], [88, 2, 1, "", "static_lars_update"], [88, 2, 1, "", "static_optimizer_update"]], "ivy.container.image": [[90, 1, 1, "", "ContainerWithImage"]], "ivy.container.layers": [[92, 1, 1, "", "ContainerWithLayers"]], "ivy.container.linear_algebra": [[94, 1, 1, "", "ContainerWithLinearAlgebra"]], "ivy.container.linear_algebra.ContainerWithLinearAlgebra": [[94, 2, 1, "", "cholesky"], [94, 2, 1, "", "matmul"], [94, 2, 1, "", "static_cholesky"]], "ivy.container.losses": [[96, 1, 1, "", "ContainerWithLosses"]], "ivy.container.losses.ContainerWithLosses": [[96, 2, 1, "", "binary_cross_entropy"], [96, 2, 1, "", "cross_entropy"], [96, 2, 1, "", "sparse_cross_entropy"], [96, 2, 1, "", "static_binary_cross_entropy"], [96, 2, 1, "", "static_cross_entropy"], [96, 2, 1, "", "static_sparse_cross_entropy"]], "ivy.container.manipulation": [[98, 1, 1, "", "ContainerWithManipulation"]], "ivy.container.manipulation.ContainerWithManipulation": [[98, 2, 1, "", "clip"], [98, 2, 1, "", "concat"], [98, 2, 1, "", "constant_pad"], [98, 2, 1, "", "expand_dims"], [98, 2, 1, "", "flip"], [98, 2, 1, "", "permute_dims"], [98, 2, 1, "", "repeat"], [98, 2, 1, "", "reshape"], [98, 2, 1, "", "roll"], [98, 2, 1, "", "squeeze"], [98, 2, 1, "", "stack"], [98, 2, 1, "", "static_clip"], [98, 2, 1, "", "static_roll"], [98, 2, 1, "", "swapaxes"], [98, 2, 1, "", "tile"], [98, 2, 1, "", "zero_pad"]], "ivy.container.norms": [[100, 1, 1, "", "ContainerWithNorms"]], "ivy.container.norms.ContainerWithNorms": [[100, 2, 1, "", "layer_norm"], [100, 2, 1, "", "static_layer_norm"]], "ivy.container.random": [[102, 1, 1, "", "ContainerWithRandom"]], "ivy.container.random.ContainerWithRandom": [[102, 2, 1, "", "random_uniform"], [102, 2, 1, "", "static_randint"], [102, 2, 1, "", "static_random_uniform"]], "ivy.container.searching": [[104, 1, 1, "", "ContainerWithSearching"]], "ivy.container.set": [[106, 1, 1, "", "ContainerWithSet"]], "ivy.container.set.ContainerWithSet": [[106, 2, 1, "", "static_unique_counts"], [106, 2, 1, "", "unique_counts"]], "ivy.container.sorting": [[108, 1, 1, "", "ContainerWithSorting"]], "ivy.container.sorting.ContainerWithSorting": [[108, 2, 1, "", "argsort"], [108, 2, 1, "", "sort"], [108, 2, 1, "", "static_argsort"], [108, 2, 1, "", "static_sort"]], "ivy.container.statistical": [[110, 1, 1, "", "ContainerWithStatistical"]], "ivy.container.statistical.ContainerWithStatistical": [[110, 2, 1, "", "einsum"], [110, 2, 1, "", "max"], [110, 2, 1, "", "mean"], [110, 2, 1, "", "min"], [110, 2, 1, "", "prod"], [110, 2, 1, "", "std"], [110, 2, 1, "", "sum"], [110, 2, 1, "", "var"]], "ivy.container.utility": [[112, 1, 1, "", "ContainerWithUtility"]], "ivy.container.utility.ContainerWithUtility": [[112, 2, 1, "", "all"], [112, 2, 1, "", "any"], [112, 2, 1, "", "static_all"], [112, 2, 1, "", "static_any"]], "ivy.container.wrapping": [[114, 4, 1, "", "add_ivy_container_instance_methods"]], "ivy.func_wrapper": [[151, 4, 1, "", "handle_nestable"], [152, 4, 1, "", "handle_out_argument"], [153, 4, 1, "", "infer_device"], [154, 4, 1, "", "infer_dtype"], [155, 4, 1, "", "inputs_to_ivy_arrays"], [156, 4, 1, "", "inputs_to_native_arrays"], [157, 4, 1, "", "outputs_to_ivy_arrays"], [158, 4, 1, "", "to_native_arrays_and_back"]], "ivy.functional.ivy": [[160, 0, 0, "-", "activations"], [172, 0, 0, "-", "compilation"], [174, 0, 0, "-", "constants"], [175, 0, 0, "-", "creation"], [246, 0, 0, "-", "data_type"], [318, 0, 0, "-", "device"], [368, 0, 0, "-", "elementwise"], [610, 0, 0, "-", "general"], [691, 0, 0, "-", "gradients"], [729, 0, 0, "-", "layers"], [742, 0, 0, "-", "linear_algebra"], [814, 0, 0, "-", "losses"], [830, 0, 0, "-", "manipulation"], [890, 0, 0, "-", "meta"], [894, 0, 0, "-", "nest"], [912, 0, 0, "-", "norms"], [918, 0, 0, "-", "random"], [930, 0, 0, "-", "searching"], [935, 0, 0, "-", "set"], [944, 0, 0, "-", "sorting"], [955, 0, 0, "-", "statistical"], [988, 0, 0, "-", "utility"]], "ivy.functional.ivy.activations": [[161, 4, 1, "", "gelu"], [162, 4, 1, "", "leaky_relu"], [163, 4, 1, "", "relu"], [164, 4, 1, "", "sigmoid"], [165, 4, 1, "", "softmax"], [169, 4, 1, "", "softplus"], [171, 4, 1, "", "tanh"]], "ivy.functional.ivy.compilation": [[173, 4, 1, "", "compile"]], "ivy.functional.ivy.constants": [[174, 5, 1, "", "e"], [174, 5, 1, "", "inf"], [174, 5, 1, "", "nan"], [174, 5, 1, "", "newaxis"], [174, 5, 1, "", "pi"]], "ivy.functional.ivy.creation": [[177, 4, 1, "", "arange"], [175, 4, 1, "", "array"], [182, 4, 1, "", "asarray"], [184, 4, 1, "", "empty"], [188, 4, 1, "", "empty_like"], [191, 4, 1, "", "eye"], [196, 4, 1, "", "from_dlpack"], [198, 4, 1, "", "full"], [202, 4, 1, "", "full_like"], [205, 4, 1, "", "linspace"], [208, 4, 1, "", "logspace"], [213, 4, 1, "", "meshgrid"], [218, 4, 1, "", "native_array"], [221, 4, 1, "", "ones"], [226, 4, 1, "", "ones_like"], [232, 4, 1, "", "tril"], [237, 4, 1, "", "triu"], [240, 4, 1, "", "zeros"], [245, 4, 1, "", "zeros_like"]], "ivy.functional.ivy.data_type": [[246, 1, 1, "", "DefaultDtype"], [246, 1, 1, "", "DefaultFloatDtype"], [246, 1, 1, "", "DefaultIntDtype"], [250, 4, 1, "", "as_ivy_dtype"], [251, 4, 1, "", "as_native_dtype"], [255, 4, 1, "", "astype"], [260, 4, 1, "", "broadcast_arrays"], [265, 4, 1, "", "broadcast_to"], [270, 4, 1, "", "can_cast"], [272, 4, 1, "", "closest_valid_dtype"], [273, 4, 1, "", "default_dtype"], [274, 4, 1, "", "default_float_dtype"], [275, 4, 1, "", "default_int_dtype"], [279, 4, 1, "", "dtype"], [280, 4, 1, "", "dtype_bits"], [284, 4, 1, "", "finfo"], [286, 4, 1, "", "function_supported_dtypes"], [287, 4, 1, "", "function_unsupported_dtypes"], [291, 4, 1, "", "iinfo"], [293, 4, 1, "", "invalid_dtype"], [297, 4, 1, "", "is_float_dtype"], [302, 4, 1, "", "is_int_dtype"], [304, 4, 1, "", "promote_types"], [308, 4, 1, "", "result_type"], [310, 4, 1, "", "set_default_dtype"], [311, 4, 1, "", "set_default_float_dtype"], [312, 4, 1, "", "set_default_int_dtype"], [313, 4, 1, "", "type_promote_arrays"], [314, 4, 1, "", "unset_default_dtype"], [315, 4, 1, "", "unset_default_float_dtype"], [316, 4, 1, "", "unset_default_int_dtype"], [317, 4, 1, "", "valid_dtype"]], "ivy.functional.ivy.data_type.DefaultDtype": [[246, 2, 1, "", "__init__"]], "ivy.functional.ivy.data_type.DefaultFloatDtype": [[246, 2, 1, "", "__init__"]], "ivy.functional.ivy.data_type.DefaultIntDtype": [[246, 2, 1, "", "__init__"]], "ivy.functional.ivy.device": [[318, 1, 1, "", "DefaultDevice"], [320, 1, 1, "", "DevClonedItem"], [321, 1, 1, "", "DevClonedIter"], [322, 1, 1, "", "DevClonedNest"], [323, 1, 1, "", "DevDistItem"], [324, 1, 1, "", "DevDistIter"], [325, 1, 1, "", "DevDistNest"], [318, 1, 1, "", "DevManager"], [327, 1, 1, "", "DevMapper"], [328, 1, 1, "", "DevMapperMultiProc"], [318, 1, 1, "", "MultiDev"], [330, 1, 1, "", "MultiDevItem"], [331, 1, 1, "", "MultiDevIter"], [332, 1, 1, "", "MultiDevNest"], [333, 1, 1, "", "Profiler"], [334, 4, 1, "", "as_ivy_dev"], [335, 4, 1, "", "as_native_dev"], [336, 4, 1, "", "clear_mem_on_dev"], [337, 4, 1, "", "default_device"], [338, 4, 1, "", "dev"], [339, 4, 1, "", "dev_clone"], [340, 4, 1, "", "dev_clone_array"], [341, 4, 1, "", "dev_clone_iter"], [342, 4, 1, "", "dev_clone_nest"], [343, 4, 1, "", "dev_dist"], [344, 4, 1, "", "dev_dist_array"], [345, 4, 1, "", "dev_dist_iter"], [346, 4, 1, "", "dev_dist_nest"], [347, 4, 1, "", "dev_unify"], [348, 4, 1, "", "dev_unify_array"], [349, 4, 1, "", "dev_unify_iter"], [350, 4, 1, "", "dev_unify_nest"], [351, 4, 1, "", "dev_util"], [352, 4, 1, "", "get_all_ivy_arrays_on_dev"], [353, 4, 1, "", "gpu_is_available"], [354, 4, 1, "", "num_cpu_cores"], [355, 4, 1, "", "num_gpus"], [356, 4, 1, "", "num_ivy_arrays_on_dev"], [357, 4, 1, "", "percent_used_mem_on_dev"], [358, 4, 1, "", "print_all_ivy_arrays_on_dev"], [359, 4, 1, "", "set_default_device"], [360, 4, 1, "", "set_split_factor"], [361, 4, 1, "", "split_factor"], [362, 4, 1, "", "split_func_call"], [363, 4, 1, "", "to_device"], [364, 4, 1, "", "total_mem_on_dev"], [365, 4, 1, "", "tpu_is_available"], [366, 4, 1, "", "unset_default_device"], [367, 4, 1, "", "used_mem_on_dev"]], "ivy.functional.ivy.device.DefaultDevice": [[318, 2, 1, "", "__enter__"], [318, 2, 1, "", "__exit__"], [318, 2, 1, "", "__init__"]], "ivy.functional.ivy.device.DevManager": [[318, 2, 1, "", "__init__"], [318, 2, 1, "", "da_tune_step"], [318, 3, 1, "", "dim_size"], [318, 2, 1, "", "ds_tune_step"], [318, 2, 1, "", "map"], [318, 2, 1, "", "repeated_config_check"], [318, 3, 1, "", "tune_step"], [318, 3, 1, "", "tuned"]], "ivy.functional.ivy.device.DevMapper": [[327, 2, 1, "", "__init__"], [327, 2, 1, "", "map"]], "ivy.functional.ivy.device.DevMapperMultiProc": [[328, 2, 1, "", "__init__"]], "ivy.functional.ivy.device.MultiDev": [[318, 2, 1, "", "__init__"]], "ivy.functional.ivy.device.MultiDevItem": [[330, 2, 1, "", "__init__"], [330, 2, 1, "", "items"], [330, 2, 1, "", "keys"], [330, 3, 1, "", "shape"], [330, 2, 1, "", "values"]], "ivy.functional.ivy.device.MultiDevIter": [[331, 2, 1, "", "__init__"], [331, 2, 1, "", "at_dev"], [331, 2, 1, "", "at_devs"]], "ivy.functional.ivy.device.MultiDevNest": [[332, 2, 1, "", "__init__"], [332, 2, 1, "", "at_dev"]], "ivy.functional.ivy.device.Profiler": [[333, 2, 1, "", "__init__"], [333, 2, 1, "", "start"], [333, 2, 1, "", "stop"]], "ivy.functional.ivy.elementwise": [[372, 4, 1, "", "abs"], [377, 4, 1, "", "acos"], [381, 4, 1, "", "acosh"], [385, 4, 1, "", "add"], [390, 4, 1, "", "asin"], [394, 4, 1, "", "asinh"], [399, 4, 1, "", "atan"], [403, 4, 1, "", "atan2"], [407, 4, 1, "", "atanh"], [411, 4, 1, "", "bitwise_and"], [415, 4, 1, "", "bitwise_invert"], [419, 4, 1, "", "bitwise_left_shift"], [423, 4, 1, "", "bitwise_or"], [427, 4, 1, "", "bitwise_right_shift"], [431, 4, 1, "", "bitwise_xor"], [435, 4, 1, "", "ceil"], [439, 4, 1, "", "cos"], [443, 4, 1, "", "cosh"], [447, 4, 1, "", "divide"], [452, 4, 1, "", "equal"], [456, 4, 1, "", "erf"], [460, 4, 1, "", "exp"], [464, 4, 1, "", "expm1"], [468, 4, 1, "", "floor"], [472, 4, 1, "", "floor_divide"], [476, 4, 1, "", "greater"], [480, 4, 1, "", "greater_equal"], [484, 4, 1, "", "isfinite"], [488, 4, 1, "", "isinf"], [492, 4, 1, "", "isnan"], [496, 4, 1, "", "less"], [500, 4, 1, "", "less_equal"], [504, 4, 1, "", "log"], [508, 4, 1, "", "log10"], [512, 4, 1, "", "log1p"], [516, 4, 1, "", "log2"], [520, 4, 1, "", "logaddexp"], [524, 4, 1, "", "logical_and"], [528, 4, 1, "", "logical_not"], [532, 4, 1, "", "logical_or"], [536, 4, 1, "", "logical_xor"], [537, 4, 1, "", "maximum"], [538, 4, 1, "", "minimum"], [542, 4, 1, "", "multiply"], [547, 4, 1, "", "negative"], [551, 4, 1, "", "not_equal"], [555, 4, 1, "", "positive"], [559, 4, 1, "", "pow"], [563, 4, 1, "", "remainder"], [567, 4, 1, "", "round"], [571, 4, 1, "", "sign"], [576, 4, 1, "", "sin"], [581, 4, 1, "", "sinh"], [586, 4, 1, "", "sqrt"], [590, 4, 1, "", "square"], [595, 4, 1, "", "subtract"], [600, 4, 1, "", "tan"], [605, 4, 1, "", "tanh"], [609, 4, 1, "", "trunc"]], "ivy.functional.ivy.general": [[614, 4, 1, "", "all_equal"], [616, 4, 1, "", "arg_info"], [617, 4, 1, "", "arg_names"], [618, 4, 1, "", "array_equal"], [619, 4, 1, "", "arrays_equal"], [620, 4, 1, "", "assert_supports_inplace"], [621, 4, 1, "", "cache_fn"], [622, 4, 1, "", "clip_matrix_norm"], [625, 4, 1, "", "clip_vector_norm"], [626, 4, 1, "", "container_types"], [627, 4, 1, "", "copy_array"], [628, 4, 1, "", "cumprod"], [629, 4, 1, "", "cumsum"], [630, 4, 1, "", "current_backend_str"], [631, 4, 1, "", "default"], [632, 4, 1, "", "einops_rearrange"], [633, 4, 1, "", "einops_reduce"], [634, 4, 1, "", "einops_repeat"], [635, 4, 1, "", "exists"], [636, 4, 1, "", "floormod"], [637, 4, 1, "", "fourier_encode"], [638, 4, 1, "", "gather"], [642, 4, 1, "", "gather_nd"], [644, 4, 1, "", "get_all_arrays_in_memory"], [645, 4, 1, "", "get_min_base"], [646, 4, 1, "", "get_min_denominator"], [647, 4, 1, "", "get_num_dims"], [648, 4, 1, "", "get_referrers_recursive"], [649, 4, 1, "", "has_nans"], [650, 4, 1, "", "indices_where"], [651, 4, 1, "", "inplace_arrays_supported"], [652, 4, 1, "", "inplace_decrement"], [653, 4, 1, "", "inplace_increment"], [654, 4, 1, "", "inplace_update"], [655, 4, 1, "", "inplace_variables_supported"], [656, 4, 1, "", "is_array"], [657, 4, 1, "", "is_ivy_array"], [658, 4, 1, "", "is_ivy_container"], [659, 4, 1, "", "is_native_array"], [660, 4, 1, "", "match_kwargs"], [661, 4, 1, "", "multiprocessing"], [662, 4, 1, "", "num_arrays_in_memory"], [663, 4, 1, "", "one_hot"], [664, 4, 1, "", "print_all_arrays_in_memory"], [665, 4, 1, "", "queue_timeout"], [666, 4, 1, "", "scatter_flat"], [667, 4, 1, "", "scatter_nd"], [668, 4, 1, "", "set_min_base"], [669, 4, 1, "", "set_min_denominator"], [670, 4, 1, "", "set_queue_timeout"], [671, 4, 1, "", "set_shape_array_mode"], [672, 4, 1, "", "set_tmp_dir"], [673, 4, 1, "", "shape"], [674, 4, 1, "", "shape_array_mode"], [675, 4, 1, "", "shape_to_tuple"], [676, 4, 1, "", "stable_divide"], [677, 4, 1, "", "stable_pow"], [678, 4, 1, "", "supports_inplace"], [679, 4, 1, "", "tmp_dir"], [680, 4, 1, "", "to_list"], [685, 4, 1, "", "to_numpy"], [686, 4, 1, "", "to_scalar"], [687, 4, 1, "", "try_else_none"], [688, 4, 1, "", "unset_shape_array_mode"], [689, 4, 1, "", "unstack"], [690, 4, 1, "", "value_is_nan"]], "ivy.functional.ivy.gradients": [[691, 1, 1, "", "GradientTracking"], [696, 4, 1, "", "adam_step"], [700, 4, 1, "", "adam_update"], [702, 4, 1, "", "execute_with_gradients"], [705, 4, 1, "", "gradient_descent_update"], [709, 4, 1, "", "is_variable"], [713, 4, 1, "", "lamb_update"], [717, 4, 1, "", "lars_update"], [721, 4, 1, "", "optimizer_update"], [723, 4, 1, "", "set_with_grads"], [724, 4, 1, "", "stop_gradient"], [725, 4, 1, "", "unset_with_grads"], [726, 4, 1, "", "variable"], [727, 4, 1, "", "variable_data"], [728, 4, 1, "", "with_grads"]], "ivy.functional.ivy.gradients.GradientTracking": [[691, 2, 1, "", "__init__"]], "ivy.functional.ivy.layers": [[730, 4, 1, "", "conv1d"], [731, 4, 1, "", "conv1d_transpose"], [732, 4, 1, "", "conv2d"], [733, 4, 1, "", "conv2d_transpose"], [734, 4, 1, "", "conv3d"], [735, 4, 1, "", "conv3d_transpose"], [736, 4, 1, "", "depthwise_conv2d"], [737, 4, 1, "", "dropout"], [738, 4, 1, "", "linear"], [739, 4, 1, "", "lstm_update"], [740, 4, 1, "", "multi_head_attention"], [741, 4, 1, "", "scaled_dot_product_attention"]], "ivy.functional.ivy.linear_algebra": [[746, 4, 1, "", "cholesky"], [750, 4, 1, "", "cross"], [753, 4, 1, "", "det"], [756, 4, 1, "", "diagonal"], [759, 4, 1, "", "eigh"], [762, 4, 1, "", "eigvalsh"], [765, 4, 1, "", "inv"], [769, 4, 1, "", "matmul"], [772, 4, 1, "", "matrix_norm"], [773, 4, 1, "", "matrix_power"], [776, 4, 1, "", "matrix_rank"], [779, 4, 1, "", "matrix_transpose"], [782, 4, 1, "", "outer"], [785, 4, 1, "", "pinv"], [788, 4, 1, "", "qr"], [789, 4, 1, "", "slogdet"], [792, 4, 1, "", "solve"], [795, 4, 1, "", "svd"], [798, 4, 1, "", "svdvals"], [801, 4, 1, "", "tensordot"], [804, 4, 1, "", "trace"], [807, 4, 1, "", "vecdot"], [810, 4, 1, "", "vector_norm"], [813, 4, 1, "", "vector_to_skew_symmetric_matrix"]], "ivy.functional.ivy.losses": [[818, 4, 1, "", "binary_cross_entropy"], [823, 4, 1, "", "cross_entropy"], [828, 4, 1, "", "sparse_cross_entropy"]], "ivy.functional.ivy.manipulation": [[834, 4, 1, "", "clip"], [839, 4, 1, "", "concat"], [843, 4, 1, "", "constant_pad"], [847, 4, 1, "", "expand_dims"], [851, 4, 1, "", "flip"], [855, 4, 1, "", "permute_dims"], [859, 4, 1, "", "repeat"], [863, 4, 1, "", "reshape"], [867, 4, 1, "", "roll"], [869, 4, 1, "", "split"], [873, 4, 1, "", "squeeze"], [877, 4, 1, "", "stack"], [881, 4, 1, "", "swapaxes"], [885, 4, 1, "", "tile"], [889, 4, 1, "", "zero_pad"]], "ivy.functional.ivy.meta": [[891, 4, 1, "", "fomaml_step"], [892, 4, 1, "", "maml_step"], [893, 4, 1, "", "reptile_step"]], "ivy.functional.ivy.nest": [[895, 4, 1, "", "all_nested_indices"], [896, 4, 1, "", "copy_nest"], [897, 4, 1, "", "index_nest"], [898, 4, 1, "", "insert_into_nest_at_index"], [899, 4, 1, "", "insert_into_nest_at_indices"], [900, 4, 1, "", "map"], [901, 4, 1, "", "map_nest_at_index"], [902, 4, 1, "", "map_nest_at_indices"], [903, 4, 1, "", "multi_index_nest"], [904, 4, 1, "", "nested_any"], [905, 4, 1, "", "nested_indices_where"], [906, 4, 1, "", "nested_map"], [907, 4, 1, "", "nested_multi_map"], [908, 4, 1, "", "prune_nest_at_index"], [909, 4, 1, "", "prune_nest_at_indices"], [910, 4, 1, "", "set_nest_at_index"], [911, 4, 1, "", "set_nest_at_indices"]], "ivy.functional.ivy.norms": [[916, 4, 1, "", "layer_norm"]], "ivy.functional.ivy.random": [[919, 4, 1, "", "multinomial"], [921, 4, 1, "", "randint"], [923, 4, 1, "", "random_normal"], [926, 4, 1, "", "random_uniform"], [928, 4, 1, "", "seed"], [929, 4, 1, "", "shuffle"]], "ivy.functional.ivy.searching": [[931, 4, 1, "", "argmax"], [932, 4, 1, "", "argmin"], [933, 4, 1, "", "nonzero"], [934, 4, 1, "", "where"]], "ivy.functional.ivy.set": [[936, 4, 1, "", "unique_all"], [941, 4, 1, "", "unique_counts"], [942, 4, 1, "", "unique_inverse"], [943, 4, 1, "", "unique_values"]], "ivy.functional.ivy.sorting": [[948, 4, 1, "", "argsort"], [953, 4, 1, "", "sort"]], "ivy.functional.ivy.statistical": [[959, 4, 1, "", "einsum"], [963, 4, 1, "", "max"], [967, 4, 1, "", "mean"], [971, 4, 1, "", "min"], [975, 4, 1, "", "prod"], [979, 4, 1, "", "std"], [983, 4, 1, "", "sum"], [987, 4, 1, "", "var"]], "ivy.functional.ivy.utility": [[992, 4, 1, "", "all"], [997, 4, 1, "", "any"]], "ivy.inspection": [[1003, 4, 1, "", "add_array_specs"], [1004, 4, 1, "", "fn_array_spec"]], "ivy.stateful": [[1006, 0, 0, "-", "activations"], [1009, 0, 0, "-", "converters"], [1011, 0, 0, "-", "initializers"], [1020, 0, 0, "-", "layers"], [1032, 0, 0, "-", "module"], [1034, 0, 0, "-", "norms"], [1036, 0, 0, "-", "optimizers"], [1042, 0, 0, "-", "sequential"]], "ivy.stateful.activations": [[1007, 1, 1, "", "GEGLU"], [1008, 1, 1, "", "GELU"]], "ivy.stateful.activations.GEGLU": [[1007, 2, 1, "", "__init__"]], "ivy.stateful.activations.GELU": [[1008, 2, 1, "", "__init__"]], "ivy.stateful.converters": [[1010, 4, 1, "", "to_ivy_module"]], "ivy.stateful.initializers": [[1011, 1, 1, "", "Constant"], [1013, 1, 1, "", "FirstLayerSiren"], [1014, 1, 1, "", "GlorotUniform"], [1011, 1, 1, "", "KaimingNormal"], [1016, 1, 1, "", "Ones"], [1017, 1, 1, "", "Siren"], [1011, 1, 1, "", "Uniform"], [1019, 1, 1, "", "Zeros"]], "ivy.stateful.initializers.Constant": [[1011, 2, 1, "", "__init__"], [1011, 2, 1, "", "create_variables"]], "ivy.stateful.initializers.FirstLayerSiren": [[1013, 2, 1, "", "__init__"]], "ivy.stateful.initializers.GlorotUniform": [[1014, 2, 1, "", "__init__"]], "ivy.stateful.initializers.KaimingNormal": [[1011, 2, 1, "", "__init__"], [1011, 2, 1, "", "create_variables"]], "ivy.stateful.initializers.Ones": [[1016, 2, 1, "", "__init__"]], "ivy.stateful.initializers.Siren": [[1017, 2, 1, "", "__init__"]], "ivy.stateful.initializers.Uniform": [[1011, 2, 1, "", "__init__"], [1011, 2, 1, "", "create_variables"]], "ivy.stateful.initializers.Zeros": [[1019, 2, 1, "", "__init__"]], "ivy.stateful.layers": [[1021, 1, 1, "", "Conv1D"], [1022, 1, 1, "", "Conv1DTranspose"], [1023, 1, 1, "", "Conv2D"], [1024, 1, 1, "", "Conv2DTranspose"], [1025, 1, 1, "", "Conv3D"], [1026, 1, 1, "", "Conv3DTranspose"], [1027, 1, 1, "", "DepthwiseConv2D"], [1028, 1, 1, "", "Dropout"], [1029, 1, 1, "", "LSTM"], [1030, 1, 1, "", "Linear"], [1031, 1, 1, "", "MultiHeadAttention"]], "ivy.stateful.layers.Conv1D": [[1021, 2, 1, "", "__init__"]], "ivy.stateful.layers.Conv1DTranspose": [[1022, 2, 1, "", "__init__"]], "ivy.stateful.layers.Conv2D": [[1023, 2, 1, "", "__init__"]], "ivy.stateful.layers.Conv2DTranspose": [[1024, 2, 1, "", "__init__"]], "ivy.stateful.layers.Conv3D": [[1025, 2, 1, "", "__init__"]], "ivy.stateful.layers.Conv3DTranspose": [[1026, 2, 1, "", "__init__"]], "ivy.stateful.layers.DepthwiseConv2D": [[1027, 2, 1, "", "__init__"]], "ivy.stateful.layers.Dropout": [[1028, 2, 1, "", "__init__"]], "ivy.stateful.layers.LSTM": [[1029, 2, 1, "", "__init__"], [1029, 2, 1, "", "get_initial_state"]], "ivy.stateful.layers.Linear": [[1030, 2, 1, "", "__init__"]], "ivy.stateful.layers.MultiHeadAttention": [[1031, 2, 1, "", "__init__"]], "ivy.stateful.module": [[1033, 1, 1, "", "Module"]], "ivy.stateful.module.Module": [[1033, 2, 1, "", "__init__"], [1033, 2, 1, "", "build"], [1033, 3, 1, "", "build_mode"], [1033, 3, 1, "", "built"], [1033, 2, 1, "", "check_submod_rets"], [1033, 2, 1, "", "get_mod_key"], [1033, 2, 1, "", "mod_depth"], [1033, 2, 1, "", "mod_height"], [1033, 2, 1, "", "mod_with_top_mod_key_chain"], [1033, 2, 1, "", "save_weights"], [1033, 2, 1, "", "show_mod_in_top_mod"], [1033, 2, 1, "", "show_structure"], [1033, 2, 1, "", "show_v_in_top_v"], [1033, 2, 1, "", "sub_mods"], [1033, 2, 1, "", "track_submod_call_order"], [1033, 2, 1, "", "track_submod_rets"], [1033, 2, 1, "", "v_with_top_v_key_chains"]], "ivy.stateful.norms": [[1035, 1, 1, "", "LayerNorm"]], "ivy.stateful.norms.LayerNorm": [[1035, 2, 1, "", "__init__"]], "ivy.stateful.optimizers": [[1037, 1, 1, "", "Adam"], [1038, 1, 1, "", "LAMB"], [1039, 1, 1, "", "LARS"], [1040, 1, 1, "", "Optimizer"], [1041, 1, 1, "", "SGD"]], "ivy.stateful.optimizers.Adam": [[1037, 2, 1, "", "__init__"], [1037, 2, 1, "", "set_state"], [1037, 3, 1, "", "state"]], "ivy.stateful.optimizers.LAMB": [[1038, 2, 1, "", "__init__"], [1038, 2, 1, "", "set_state"], [1038, 3, 1, "", "state"]], "ivy.stateful.optimizers.LARS": [[1039, 2, 1, "", "__init__"], [1039, 2, 1, "", "set_state"], [1039, 3, 1, "", "state"]], "ivy.stateful.optimizers.Optimizer": [[1040, 2, 1, "", "__init__"], [1040, 2, 1, "", "set_state"], [1040, 2, 1, "", "step"]], "ivy.stateful.optimizers.SGD": [[1041, 2, 1, "", "__init__"], [1041, 2, 1, "", "set_state"], [1041, 3, 1, "", "state"]], "ivy.stateful.sequential": [[1043, 1, 1, "", "Sequential"]], "ivy.stateful.sequential.Sequential": [[1043, 2, 1, "", "__init__"]], "ivy.verbosity": [[1046, 4, 1, "", "cprint"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:method", "3": "py:property", "4": "py:function", "5": "py:data"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "method", "Python method"], "3": ["py", "property", "Python property"], "4": ["py", "function", "Python function"], "5": ["py", "data", "Python data"]}, "titleterms": {"backend": [0, 116, 123, 132, 149], "handler": [0, 132], "choose_random_backend": 2, "clear_backend_stack": 3, "current_backend": 4, "get_backend": 5, "set_backend": 6, "try_import_ivy_jax": 7, "try_import_ivy_mxnet": 8, "try_import_ivy_numpi": 9, "try_import_ivy_tf": 10, "try_import_ivy_torch": 11, "unset_backend": 12, "background": [13, 999], "ml": 14, "explos": 14, "standard": 15, "skeptic": 15, "complimentari": 15, "vs": [15, 149], "competit": 15, "do": [15, 121], "work": [15, 21], "The": [15, 19, 134, 149], "arrai": [15, 24, 25, 117, 120, 125, 134, 167, 180, 186, 194, 200, 211, 216, 224, 230, 235, 243, 253, 258, 263, 268, 277, 282, 289, 295, 300, 306, 370, 375, 379, 383, 388, 392, 397, 401, 405, 409, 413, 417, 421, 425, 429, 433, 437, 441, 445, 450, 454, 458, 462, 466, 470, 474, 478, 482, 486, 490, 494, 498, 502, 506, 510, 514, 518, 522, 526, 530, 534, 540, 545, 549, 553, 557, 561, 565, 569, 574, 579, 584, 588, 593, 598, 603, 607, 612, 640, 683, 694, 744, 749, 752, 755, 758, 761, 764, 767, 771, 775, 778, 781, 784, 787, 791, 794, 797, 800, 803, 806, 809, 812, 816, 821, 826, 832, 837, 841, 845, 849, 853, 857, 861, 865, 871, 875, 879, 883, 887, 914, 939, 946, 951, 957, 961, 965, 969, 973, 977, 981, 985, 990, 995], "api": [15, 20, 116, 120, 126, 132, 134, 136, 137], "why": [16, 121], "unifi": [16, 134], "No": [16, 18], "more": 16, "re": 16, "implement": 16, "infinit": 16, "shelf": 16, "life": 16, "contribut": [17, 999], "set": [18, 60, 105, 123, 935], "up": 18, "clone": 18, "ivi": [18, 116, 119, 121, 125, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 167, 168, 169, 170, 177, 178, 180, 181, 182, 183, 186, 187, 188, 189, 191, 192, 194, 195, 196, 197, 200, 201, 202, 203, 205, 206, 208, 209, 211, 212, 213, 214, 216, 217, 218, 219, 221, 222, 224, 225, 226, 227, 229, 230, 231, 232, 234, 235, 236, 237, 239, 240, 242, 243, 244, 245, 253, 254, 255, 256, 258, 259, 260, 261, 263, 264, 265, 266, 268, 269, 270, 271, 277, 278, 279, 282, 283, 284, 285, 289, 290, 291, 292, 295, 296, 297, 298, 300, 301, 302, 303, 306, 307, 308, 309, 370, 371, 372, 373, 375, 376, 377, 379, 380, 381, 383, 384, 385, 386, 388, 389, 390, 392, 393, 394, 395, 397, 398, 399, 401, 402, 403, 405, 406, 407, 409, 410, 411, 413, 414, 415, 417, 418, 419, 421, 422, 423, 425, 426, 427, 429, 430, 431, 433, 434, 435, 437, 438, 439, 441, 442, 443, 445, 446, 447, 448, 450, 451, 452, 454, 455, 456, 458, 459, 460, 462, 463, 464, 466, 467, 468, 470, 471, 472, 474, 475, 476, 478, 479, 480, 482, 483, 484, 486, 487, 488, 490, 491, 492, 494, 495, 496, 498, 499, 500, 502, 503, 504, 506, 507, 508, 510, 511, 512, 514, 515, 516, 518, 519, 520, 522, 523, 524, 526, 527, 528, 530, 531, 532, 534, 535, 536, 540, 541, 542, 543, 545, 546, 547, 549, 550, 551, 553, 554, 555, 557, 558, 559, 561, 562, 563, 565, 566, 567, 569, 570, 571, 572, 574, 575, 576, 577, 579, 580, 581, 582, 584, 585, 586, 588, 589, 590, 592, 593, 594, 595, 597, 598, 599, 600, 602, 603, 604, 605, 607, 608, 609, 612, 613, 614, 615, 624, 625, 640, 641, 642, 643, 682, 683, 684, 685, 694, 695, 696, 697, 699, 700, 701, 704, 705, 706, 708, 709, 710, 712, 713, 714, 716, 717, 718, 720, 721, 722, 744, 745, 746, 747, 749, 750, 752, 753, 755, 756, 758, 759, 761, 762, 764, 765, 767, 768, 769, 771, 772, 775, 776, 778, 779, 781, 782, 784, 785, 787, 788, 791, 792, 794, 795, 797, 798, 800, 801, 803, 804, 806, 807, 809, 810, 812, 813, 816, 817, 818, 819, 821, 822, 823, 824, 826, 827, 828, 829, 832, 833, 834, 835, 837, 838, 839, 841, 842, 843, 845, 846, 847, 849, 850, 851, 853, 854, 855, 857, 858, 859, 861, 862, 863, 865, 866, 867, 868, 871, 872, 873, 875, 876, 877, 879, 880, 881, 883, 884, 885, 887, 888, 889, 914, 915, 916, 917, 921, 922, 925, 926, 927, 938, 939, 940, 941, 946, 947, 948, 949, 951, 952, 953, 954, 957, 958, 959, 961, 962, 963, 965, 966, 967, 969, 970, 971, 973, 974, 975, 977, 978, 979, 981, 982, 983, 985, 986, 987, 990, 991, 992, 993, 995, 996, 997, 998], "pycharm": 18, "virtual": 18, "environ": 18, "docker": [18, 19, 21], "us": [18, 21, 135], "miniconda": [18, 21], "venv": [18, 21], "interpret": 18, "window": 18, "maco": 18, "ubuntu": 18, "github": 18, "codespac": 18, "pre": [18, 130], "commit": [18, 19, 130], "basic": 19, "get": 19, "help": 19, "todo": 19, "list": 19, "issu": 19, "manag": 19, "your": 19, "fork": 19, "who": 19, "To": 19, "ask": 19, "With": 19, "command": 19, "line": 19, "browser": 19, "pull": 19, "request": 19, "small": 19, "often": 19, "run": 19, "test": [19, 120, 121], "local": 19, "open": 20, "task": 20, "function": [20, 117, 121, 122, 124, 126, 127, 128, 132, 137, 149], "format": [20, 130], "frontend": [20, 137], "build": [21, 132], "doc": 21, "dockerless": 21, "document": 21, "pipelin": [21, 149], "make_doc": 21, "sh": 21, "entrypoint": 21, "_make_doc": 21, "generate_src_rst_fil": 21, "py": 21, "sphinx": 21, "correct_built_html_fil": 21, "remove_fil": 21, "activ": [22, 70, 160, 1006], "arraywithactiv": 23, "variabl": [26, 726], "convers": 27, "args_to_ivi": 28, "args_to_n": 29, "to_ivi": 30, "to_n": 31, "creation": [32, 77, 175], "arraywithcr": 33, "data": [34, 79, 121, 127, 135, 149, 246, 935, 936, 937, 941, 943], "type": [34, 79, 122, 127, 149, 246], "arraywithdatatyp": 35, "devic": [36, 81, 117, 128, 318], "arraywithdevic": 37, "elementwis": [38, 83, 368], "arraywithelementwis": 39, "gener": [40, 85, 121, 610], "arraywithgener": 41, "gradient": [42, 87, 691], "arraywithgradi": 43, "imag": [44, 89], "arraywithimag": 45, "layer": [46, 91, 729, 1020], "arraywithlay": 47, "linear": [48, 93, 738, 742, 1030], "algebra": [48, 93, 742], "arraywithlinearalgebra": 49, "loss": [50, 95, 814], "arraywithloss": 51, "manipul": [52, 97, 830], "arraywithmanipul": 53, "norm": [54, 99, 912, 1034], "arraywithnorm": 55, "random": [56, 101, 918], "arraywithrandom": 57, "search": [58, 103, 930], "arraywithsearch": 59, "arraywithset": 61, "sort": [62, 107, 944, 950, 951, 952, 953], "arraywithsort": 63, "statist": [64, 109, 955], "arraywithstatist": 65, "util": [66, 111, 988], "arraywithutil": 67, "wrap": [68, 113, 124], "add_ivy_array_instance_method": 69, "containerwithactiv": 71, "base": 72, "containerbas": 73, "contain": [74, 75, 126, 135, 168, 170, 178, 181, 183, 187, 189, 192, 195, 197, 201, 203, 206, 209, 212, 214, 217, 219, 222, 225, 227, 229, 231, 234, 236, 239, 242, 244, 254, 256, 259, 261, 264, 266, 269, 271, 278, 283, 285, 290, 292, 296, 298, 301, 303, 307, 309, 371, 373, 376, 380, 384, 386, 389, 393, 395, 398, 402, 406, 410, 414, 418, 422, 426, 430, 434, 438, 442, 446, 448, 451, 455, 459, 463, 467, 471, 475, 479, 483, 487, 491, 495, 499, 503, 507, 511, 515, 519, 523, 527, 531, 535, 541, 543, 546, 550, 554, 558, 562, 566, 570, 572, 575, 577, 580, 582, 585, 589, 592, 594, 597, 599, 602, 604, 608, 613, 615, 624, 641, 643, 682, 684, 695, 697, 699, 701, 704, 706, 708, 710, 712, 714, 716, 718, 720, 722, 745, 747, 768, 817, 819, 822, 824, 827, 829, 833, 835, 838, 842, 846, 850, 854, 858, 862, 866, 868, 872, 876, 880, 884, 888, 915, 917, 922, 925, 927, 938, 940, 947, 949, 952, 954, 958, 962, 966, 970, 974, 978, 982, 986, 991, 993, 996, 998], "multidevcontain": 76, "containerwithcr": 78, "containerwithdatatyp": 80, "containerwithdevic": 82, "containerwithelementwis": 84, "containerwithgener": 86, "containerwithgradi": 88, "containerwithimag": 90, "containerwithlay": 92, "containerwithlinearalgebra": 94, "containerwithloss": 96, "containerwithmanipul": 98, "containerwithnorm": 100, "containerwithrandom": 102, "containerwithsearch": 104, "containerwithset": 106, "containerwithsort": 108, "containerwithstatist": 110, "containerwithutil": 112, "add_ivy_container_instance_method": 114, "deep": 115, "dive": 115, "navig": 116, "code": 116, "categor": 116, "submodul": 116, "design": [116, 131, 999], "argument": [117, 127, 128, 129], "exampl": [117, 119, 130], "out": [117, 129], "dtype": [117, 276, 277, 278, 279], "number": 117, "oper": [117, 134, 149], "integ": 117, "sequenc": 117, "nestabl": [117, 122, 126], "docstr": [118, 119], "tan": [119, 596, 598, 599, 600], "roll": [119, 864, 865, 866, 867], "add": [119, 382, 383, 384, 385], "hypothesi": 121, "import": 121, "strategi": 121, "integr": 121, "we": 121, "need": 121, "helper": 121, "how": 121, "write": 121, "effect": 121, "bonu": 121, "extend": 121, "featur": 121, "self": 121, "consist": 121, "explicit": 121, "test_array_funct": 121, "primari": 122, "composit": 122, "mix": 122, "standalon": 122, "conveni": 122, "nativ": 125, "handl": 125, "instanc": [126, 134], "method": [126, 134, 135], "static": 126, "special": 126, "modul": [127, 128, 136, 1032, 1033], "other": [127, 128], "inplac": 129, "updat": 129, "copi": 129, "lint": 130, "check": [130, 149], "hook": 130, "automat": 130, "reformat": 130, "befor": 130, "block": 132, "framework": [132, 133], "graph": [132, 137], "compil": [132, 137, 172, 173], "class": 134, "monkei": 134, "patch": 134, "construct": 135, "represent": 135, "recurs": 135, "built": 135, "ins": 135, "access": 135, "save": 135, "load": 135, "comparison": 135, "custom": [135, 149], "case": 135, "compartment": 135, "configur": 135, "network": [135, 137], "weight": 135, "state": [136, 149], "initi": [136, 1011], "optim": [136, 1036, 1040], "transpil": 137, "role": 137, "convert": [137, 1009], "model": [137, 144, 149], "builder": 139, "ecosystem": 140, "gym": [141, 148], "mech": 142, "memori": [143, 148], "robot": [145, 148], "vision": [146, 148], "extens": [147, 999], "appli": 148, "librari": 148, "mechan": 148, "faq": 149, "maintain": 149, "version": 149, "dynam": 149, "size": 149, "shape": [149, 673, 935, 936, 937, 941, 943], "control": 149, "flow": 149, "auto": 149, "differenti": 149, "replica": 149, "parallel": 149, "support": 149, "altern": 149, "structur": 149, "func": 150, "wrapper": 150, "handle_nest": 151, "handle_out_argu": 152, "infer_devic": 153, "infer_dtyp": 154, "inputs_to_ivy_arrai": 155, "inputs_to_native_arrai": 156, "outputs_to_ivy_arrai": 157, "to_native_arrays_and_back": 158, "gelu": [161, 1008], "leaky_relu": 162, "relu": 163, "sigmoid": 164, "softmax": 165, "softplu": [166, 167, 168, 169], "static_softplu": 170, "tanh": [171, 601, 603, 604, 605], "constant": 174, "note": [175, 193, 196], "arang": [176, 177], "static_arang": 178, "asarrai": [179, 180, 181, 182], "static_asarrai": 183, "empti": 184, "empty_lik": [185, 186, 187, 188], "static_empty_lik": 189, "ey": [190, 191], "static_ey": 192, "from_dlpack": [193, 194, 195, 196], "static_from_dlpack": 197, "full": 198, "full_lik": [199, 200, 201, 202], "static_full_lik": 203, "linspac": [204, 205], "static_linspac": 206, "logspac": [207, 208], "static_logspac": 209, "meshgrid": [210, 211, 212, 213], "static_meshgrid": 214, "native_arrai": [215, 216, 217, 218], "static_native_arrai": 219, "ones": [220, 221], "static_on": 222, "ones_lik": [223, 224, 225, 226], "static_ones_lik": 227, "tril": [228, 230, 231, 232], "static_tril": 229, "triu": [233, 235, 236, 237], "static_triu": 234, "zero": [238, 240, 1019], "static_zero": 239, "zeros_lik": [241, 243, 244, 245], "static_zeros_lik": 242, "as_ivy_dtyp": 250, "as_native_dtyp": 251, "astyp": [252, 253, 254, 255], "static_astyp": 256, "broadcast_arrai": [257, 258, 259, 260], "static_broadcast_arrai": 261, "broadcast_to": [262, 263, 264, 265], "static_broadcast_to": 266, "can_cast": [267, 268, 269, 270], "static_can_cast": 271, "closest_valid_dtyp": 272, "default_dtyp": 273, "default_float_dtyp": 274, "default_int_dtyp": 275, "dtype_bit": 280, "finfo": [281, 282, 283, 284], "static_finfo": 285, "function_supported_dtyp": 286, "function_unsupported_dtyp": 287, "iinfo": [288, 289, 290, 291], "static_iinfo": 292, "invalid_dtyp": 293, "is_float_dtyp": [294, 295, 296, 297], "static_is_float_dtyp": 298, "is_int_dtyp": [299, 300, 301, 302], "static_is_int_dtyp": 303, "promote_typ": 304, "result_typ": [305, 306, 307, 308], "static_result_typ": 309, "set_default_dtyp": 310, "set_default_float_dtyp": 311, "set_default_int_dtyp": 312, "type_promote_arrai": 313, "unset_default_dtyp": 314, "unset_default_float_dtyp": 315, "unset_default_int_dtyp": 316, "valid_dtyp": 317, "devcloneditem": 320, "devclonedit": 321, "devclonednest": 322, "devdistitem": 323, "devdistit": 324, "devdistnest": 325, "devmapp": 327, "devmappermultiproc": 328, "multidevitem": 330, "multidevit": 331, "multidevnest": 332, "profil": 333, "as_ivy_dev": 334, "as_native_dev": 335, "clear_mem_on_dev": 336, "default_devic": 337, "dev": 338, "dev_clon": 339, "dev_clone_arrai": 340, "dev_clone_it": 341, "dev_clone_nest": 342, "dev_dist": 343, "dev_dist_arrai": 344, "dev_dist_it": 345, "dev_dist_nest": 346, "dev_unifi": 347, "dev_unify_arrai": 348, "dev_unify_it": 349, "dev_unify_nest": 350, "dev_util": 351, "get_all_ivy_arrays_on_dev": 352, "gpu_is_avail": 353, "num_cpu_cor": 354, "num_gpu": 355, "num_ivy_arrays_on_dev": 356, "percent_used_mem_on_dev": 357, "print_all_ivy_arrays_on_dev": 358, "set_default_devic": 359, "set_split_factor": 360, "split_factor": 361, "split_func_cal": 362, "to_devic": 363, "total_mem_on_dev": 364, "tpu_is_avail": 365, "unset_default_devic": 366, "used_mem_on_dev": 367, "ab": [369, 370, 371, 372], "static_ab": 373, "aco": [374, 375, 376, 377], "acosh": [378, 379, 380, 381], "static_add": 386, "asin": [387, 388, 389, 390], "asinh": [391, 392, 393, 394], "static_asinh": 395, "atan": [396, 397, 398, 399], "atan2": [400, 401, 402, 403], "atanh": [404, 405, 406, 407], "bitwise_and": [408, 409, 410, 411], "bitwise_invert": [412, 413, 414, 415], "bitwise_left_shift": [416, 417, 418, 419], "bitwise_or": [420, 421, 422, 423], "bitwise_right_shift": [424, 425, 426, 427], "bitwise_xor": [428, 429, 430, 431], "ceil": [432, 433, 434, 435], "co": [436, 437, 438, 439], "cosh": [440, 441, 442, 443], "divid": [444, 445, 446, 447], "static_divid": 448, "equal": [449, 450, 451, 452], "erf": [453, 454, 455, 456], "exp": [457, 458, 459, 460], "expm1": [461, 462, 463, 464], "floor": [465, 466, 467, 468], "floor_divid": [469, 470, 471, 472], "greater": [473, 474, 475, 476], "greater_equ": [477, 478, 479, 480], "isfinit": [481, 482, 483, 484], "isinf": [485, 486, 487, 488], "isnan": [489, 490, 491, 492], "less": [493, 494, 495, 496], "less_equ": [497, 498, 499, 500], "log": [501, 502, 503, 504], "log10": [505, 506, 507, 508], "log1p": [509, 510, 511, 512], "log2": [513, 514, 515, 516], "logaddexp": [517, 518, 519, 520], "logical_and": [521, 522, 523, 524], "logical_not": [525, 526, 527, 528], "logical_or": [529, 530, 531, 532], "logical_xor": [533, 534, 535, 536], "maximum": 537, "minimum": 538, "multipli": [539, 540, 541, 542], "static_multipli": 543, "neg": [544, 545, 546, 547], "not_equ": [548, 549, 550, 551], "posit": [552, 553, 554, 555], "pow": [556, 557, 558, 559], "remaind": [560, 561, 562, 563], "round": [564, 565, 566, 567], "sign": [568, 569, 570, 571], "static_sign": 572, "sin": [573, 574, 575, 576], "static_sin": 577, "sinh": [578, 579, 580, 581], "static_sinh": 582, "sqrt": [583, 584, 585, 586], "squar": [587, 588, 589, 590], "subtract": [591, 593, 594, 595], "static_subtract": 592, "static_tan": 597, "static_tanh": 602, "trunc": [606, 607, 608, 609], "all_equ": [611, 612, 613, 614], "static_all_equ": 615, "arg_info": 616, "arg_nam": 617, "array_equ": 618, "arrays_equ": 619, "assert_supports_inplac": 620, "cache_fn": 621, "clip_matrix_norm": 622, "clip_vector_norm": [623, 624, 625], "container_typ": 626, "copy_arrai": 627, "cumprod": 628, "cumsum": 629, "current_backend_str": 630, "default": 631, "einops_rearrang": 632, "einops_reduc": 633, "einops_repeat": 634, "exist": 635, "floormod": 636, "fourier_encod": 637, "gather": 638, "gather_nd": [639, 640, 641, 642], "static_gather_nd": 643, "get_all_arrays_in_memori": 644, "get_min_bas": 645, "get_min_denomin": 646, "get_num_dim": 647, "get_referrers_recurs": 648, "has_nan": 649, "indices_wher": 650, "inplace_arrays_support": 651, "inplace_decr": 652, "inplace_incr": 653, "inplace_upd": 654, "inplace_variables_support": 655, "is_arrai": 656, "is_ivy_arrai": 657, "is_ivy_contain": 658, "is_native_arrai": 659, "match_kwarg": 660, "multiprocess": 661, "num_arrays_in_memori": 662, "one_hot": 663, "print_all_arrays_in_memori": 664, "queue_timeout": 665, "scatter_flat": 666, "scatter_nd": 667, "set_min_bas": 668, "set_min_denomin": 669, "set_queue_timeout": 670, "set_shape_array_mod": 671, "set_tmp_dir": 672, "shape_array_mod": 674, "shape_to_tupl": 675, "stable_divid": 676, "stable_pow": 677, "supports_inplac": 678, "tmp_dir": 679, "to_list": 680, "to_numpi": [681, 683, 684, 685], "static_to_numpi": 682, "to_scalar": 686, "try_else_non": 687, "unset_shape_array_mod": 688, "unstack": 689, "value_is_nan": 690, "adam_step": [693, 694, 695, 696], "static_adam_step": 697, "adam_upd": [698, 699, 700], "static_adam_upd": 701, "execute_with_gradi": 702, "gradient_descent_upd": [703, 704, 705], "static_gradient_descent_upd": 706, "is_vari": [707, 708, 709], "static_is_vari": 710, "lamb_upd": [711, 712, 713], "static_lamb_upd": 714, "lars_upd": [715, 716, 717], "static_lars_upd": 718, "optimizer_upd": [719, 720, 721], "static_optimizer_upd": 722, "set_with_grad": 723, "stop_gradi": 724, "unset_with_grad": 725, "variable_data": 727, "with_grad": 728, "conv1d": [730, 1021], "conv1d_transpos": 731, "conv2d": [732, 1023], "conv2d_transpos": 733, "conv3d": [734, 1025], "conv3d_transpos": 735, "depthwise_conv2d": 736, "dropout": [737, 1028], "lstm_updat": 739, "multi_head_attent": 740, "scaled_dot_product_attent": 741, "choleski": [743, 744, 745, 746], "static_choleski": 747, "cross": [748, 749, 750], "det": [751, 752, 753], "diagon": [754, 755, 756], "eigh": [757, 758, 759], "eigvalsh": [760, 761, 762], "inv": [763, 764, 765], "matmul": [766, 767, 768, 769], "matrix_norm": [770, 771, 772], "matrix_pow": 773, "matrix_rank": [774, 775, 776], "matrix_transpos": [777, 778, 779], "outer": [780, 781, 782], "pinv": [783, 784, 785], "qr": [786, 787, 788], "slogdet": 789, "solv": [790, 791, 792], "svd": [793, 794, 795], "svdval": [796, 797, 798], "tensordot": [799, 800, 801], "trace": [802, 803, 804], "vecdot": [805, 806, 807], "vector_norm": [808, 809, 810], "vector_to_skew_symmetric_matrix": [811, 812, 813], "binary_cross_entropi": [815, 816, 817, 818], "static_binary_cross_entropi": 819, "cross_entropi": [820, 821, 822, 823], "static_cross_entropi": 824, "sparse_cross_entropi": [825, 826, 827, 828], "static_sparse_cross_entropi": 829, "clip": [831, 832, 833, 834], "static_clip": 835, "concat": [836, 837, 838, 839], "constant_pad": [840, 841, 842, 843], "expand_dim": [844, 845, 846, 847], "flip": [848, 849, 850, 851], "permute_dim": [852, 853, 854, 855], "repeat": [856, 857, 858, 859], "reshap": [860, 861, 862, 863], "static_rol": 868, "split": 869, "squeez": [870, 871, 872, 873], "stack": [874, 875, 876, 877], "swapax": [878, 879, 880, 881], "tile": [882, 883, 884, 885], "zero_pad": [886, 887, 888, 889], "meta": 890, "fomaml_step": 891, "maml_step": 892, "reptile_step": 893, "nest": 894, "all_nested_indic": 895, "copy_nest": 896, "index_nest": 897, "insert_into_nest_at_index": 898, "insert_into_nest_at_indic": 899, "map": 900, "map_nest_at_index": 901, "map_nest_at_indic": 902, "multi_index_nest": 903, "nested_ani": 904, "nested_indices_wher": 905, "nested_map": 906, "nested_multi_map": 907, "prune_nest_at_index": 908, "prune_nest_at_indic": 909, "set_nest_at_index": 910, "set_nest_at_indic": 911, "layer_norm": [913, 914, 915, 916], "static_layer_norm": 917, "multinomi": 919, "randint": [920, 921], "static_randint": 922, "random_norm": 923, "random_uniform": [924, 925, 926], "static_random_uniform": 927, "seed": 928, "shuffl": 929, "argmax": 931, "argmin": 932, "nonzero": 933, "where": 934, "depend": [935, 936, 937, 941, 943], "output": [935, 936, 937, 941, 943], "unique_al": 936, "unique_count": [937, 939, 940, 941], "static_unique_count": 938, "unique_invers": 942, "unique_valu": 943, "argsort": [945, 946, 947, 948], "static_argsort": 949, "static_sort": 954, "einsum": [956, 957, 958, 959], "max": [960, 961, 962, 963], "mean": [964, 965, 966, 967], "min": [968, 969, 970, 971], "prod": [972, 973, 974, 975], "std": [976, 977, 978, 979], "sum": [980, 981, 982, 983], "var": [984, 985, 986, 987], "all": [989, 990, 991, 992], "static_al": 993, "ani": [994, 995, 996, 997], "static_ani": 998, "content": 999, "overview": 999, "quick": 999, "start": 999, "roadmap": [999, 1005], "citat": 999, "inspect": 1002, "add_array_spec": 1003, "fn_array_spec": 1004, "geglu": 1007, "to_ivy_modul": 1010, "firstlayersiren": 1013, "glorotuniform": 1014, "Ones": 1016, "siren": 1017, "conv1dtranspos": 1022, "conv2dtranspos": 1024, "conv3dtranspos": 1026, "depthwiseconv2d": 1027, "lstm": 1029, "multiheadattent": 1031, "layernorm": 1035, "adam": 1037, "lamb": 1038, "lar": 1039, "sgd": 1041, "sequenti": [1042, 1043], "verbos": 1045, "cprint": 1046}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 6, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.viewcode": 1, "sphinx": 56}})