Search.setIndex({"docnames": ["array/activations", "array/activations/ArrayWithActivations", "array/conversions", "array/conversions/args_to_ivy", "array/conversions/args_to_native", "array/conversions/to_ivy", "array/conversions/to_native", "array/creation", "array/creation/ArrayWithCreation", "array/data_types", "array/data_types/ArrayWithDataTypes", "array/device", "array/device/ArrayWithDevice", "array/elementwise", "array/elementwise/ArrayWithElementwise", "array/general", "array/general/ArrayWithGeneral", "array/gradients", "array/gradients/ArrayWithGradients", "array/image", "array/image/ArrayWithImage", "array/layers", "array/layers/ArrayWithLayers", "array/linear_algebra", "array/linear_algebra/ArrayWithLinearAlgebra", "array/losses", "array/losses/ArrayWithLosses", "array/manipulation", "array/manipulation/ArrayWithManipulation", "array/norms", "array/norms/ArrayWithNorms", "array/random", "array/random/ArrayWithRandom", "array/searching", "array/searching/ArrayWithSearching", "array/set", "array/set/ArrayWithSet", "array/sorting", "array/sorting/ArrayWithSorting", "array/statistical", "array/statistical/ArrayWithStatistical", "array/utility", "array/utility/ArrayWithUtility", "array/wrapping", "array/wrapping/add_ivy_array_instance_methods", "backend_handler", "backend_handler/ContextManager:\n    def __init__", "backend_handler/choose_random_backend", "backend_handler/clear_backend_stack", "backend_handler/current_backend", "backend_handler/get_backend", "backend_handler/set_backend", "backend_handler/try_import_ivy_jax", "backend_handler/try_import_ivy_mxnet", "backend_handler/try_import_ivy_numpy", "backend_handler/try_import_ivy_tf", "backend_handler/try_import_ivy_torch", "backend_handler/unset_backend", "background", "background/ml_explosion", "background/standardization", "background/why_unify", "container/activations", "container/activations/ContainerWithActivations", "container/base", "container/base/ContainerBase", "container/container", "container/container/Container", "container/container/MultiDevContainer", "container/creation", "container/creation/ContainerWithCreation", "container/data_types", "container/data_types/ContainerWithDataTypes", "container/device", "container/device/ContainerWithDevice", "container/elementwise", "container/elementwise/ContainerWithElementwise", "container/general", "container/general/ContainerWithGeneral", "container/gradients", "container/gradients/ContainerWithGradients", "container/image", "container/image/ContainerWithImage", "container/layers", "container/layers/ContainerWithLayers", "container/linear_algebra", "container/linear_algebra/ContainerWithLinearAlgebra", "container/losses", "container/losses/ContainerWithLosses", "container/manipulation", "container/manipulation/ContainerWithManipulation", "container/norms", "container/norms/ContainerWithNorms", "container/random", "container/random/ContainerWithRandom", "container/searching", "container/searching/ContainerWithSearching", "container/set", "container/set/ContainerWithSet", "container/sorting", "container/sorting/ContainerWithSorting", "container/statistical", "container/statistical/ContainerWithStatistical", "container/utility", "container/utility/ContainerWithUtility", "container/wrapping", "container/wrapping/add_ivy_container_instance_methods", "contributing", "contributing/0_setting_up", "contributing/1_the_basics", "contributing/4_open_tasks", "contributing/building_the_docs", "deep_dive", "deep_dive/0_navigating_the_code", "deep_dive/10_docstrings", "deep_dive/11_docstring_examples", "deep_dive/12_array_api_tests", "deep_dive/13_ivy_tests", "deep_dive/1_function_types", "deep_dive/2_backend_setting", "deep_dive/3_function_wrapping", "deep_dive/4_arrays", "deep_dive/5_containers", "deep_dive/6_data_types", "deep_dive/7_devices", "deep_dive/8_inplace_updates", "deep_dive/9_function_arguments", "design", "design/building_blocks", "design/ivy_as_a_framework", "design/ivy_as_a_framework/ivy_array", "design/ivy_as_a_framework/ivy_container", "design/ivy_as_a_framework/ivy_stateful_api", "design/ivy_as_a_transpiler", "docs/ivy", "docs/ivy_builder", "docs/ivy_ecosystem", "docs/ivy_gym", "docs/ivy_mech", "docs/ivy_memory", "docs/ivy_models", "docs/ivy_robot", "docs/ivy_vision", "extensions", "extensions/applied_libraries", "faq", "func_wrapper", "func_wrapper/handle_nestable", "func_wrapper/handle_out_argument", "func_wrapper/infer_device", "func_wrapper/infer_dtype", "func_wrapper/inputs_to_ivy_arrays", "func_wrapper/inputs_to_native_arrays", "func_wrapper/outputs_to_ivy_arrays", "func_wrapper/to_native_arrays_and_back", "functional/ivy", "functional/ivy/activations", "functional/ivy/activations/gelu", "functional/ivy/activations/leaky_relu", "functional/ivy/activations/relu", "functional/ivy/activations/sigmoid", "functional/ivy/activations/softmax", "functional/ivy/activations/softplus", "functional/ivy/activations/tanh", "functional/ivy/compilation", "functional/ivy/compilation/compile", "functional/ivy/constants", "functional/ivy/creation", "functional/ivy/creation/arange", "functional/ivy/creation/asarray", "functional/ivy/creation/empty", "functional/ivy/creation/empty_like", "functional/ivy/creation/eye", "functional/ivy/creation/from_dlpack", "functional/ivy/creation/full", "functional/ivy/creation/full_like", "functional/ivy/creation/linspace", "functional/ivy/creation/logspace", "functional/ivy/creation/meshgrid", "functional/ivy/creation/native_array", "functional/ivy/creation/ones", "functional/ivy/creation/ones_like", "functional/ivy/creation/tril", "functional/ivy/creation/triu", "functional/ivy/creation/zeros", "functional/ivy/creation/zeros_like", "functional/ivy/data_type", "functional/ivy/data_type/DefaultDtype:\n    \"\"\"\"\"\"\n\n    # noinspection PyShadowingNames\n    def __init__", "functional/ivy/data_type/DefaultFloatDtype:\n    \"\"\"\"\"\"\n\n    # noinspection PyShadowingNames\n    def __init__", "functional/ivy/data_type/DefaultIntDtype:\n    \"\"\"\"\"\"\n\n    # noinspection PyShadowingNames\n    def __init__", "functional/ivy/data_type/as_ivy_dtype", "functional/ivy/data_type/as_native_dtype", "functional/ivy/data_type/astype", "functional/ivy/data_type/broadcast_arrays", "functional/ivy/data_type/broadcast_to", "functional/ivy/data_type/can_cast", "functional/ivy/data_type/closest_valid_dtype", "functional/ivy/data_type/default_dtype", "functional/ivy/data_type/default_float_dtype", "functional/ivy/data_type/default_int_dtype", "functional/ivy/data_type/dtype", "functional/ivy/data_type/dtype_bits", "functional/ivy/data_type/finfo", "functional/ivy/data_type/function_supported_dtypes", "functional/ivy/data_type/function_unsupported_dtypes", "functional/ivy/data_type/iinfo", "functional/ivy/data_type/invalid_dtype", "functional/ivy/data_type/is_float_dtype", "functional/ivy/data_type/is_int_dtype", "functional/ivy/data_type/promote_types", "functional/ivy/data_type/result_type", "functional/ivy/data_type/set_default_dtype", "functional/ivy/data_type/set_default_float_dtype", "functional/ivy/data_type/set_default_int_dtype", "functional/ivy/data_type/type_promote_arrays", "functional/ivy/data_type/unset_default_dtype", "functional/ivy/data_type/unset_default_float_dtype", "functional/ivy/data_type/unset_default_int_dtype", "functional/ivy/data_type/valid_dtype", "functional/ivy/device", "functional/ivy/device/DefaultDevice:\n    \"\"\"\"\"\"\n\n    # noinspection PyShadowingNames\n    def __init__", "functional/ivy/device/DevClonedItem", "functional/ivy/device/DevClonedIter", "functional/ivy/device/DevClonedNest", "functional/ivy/device/DevDistItem", "functional/ivy/device/DevDistIter", "functional/ivy/device/DevDistNest", "functional/ivy/device/DevManager:\n    \"\"\"\"\"\"\n\n    def __init__", "functional/ivy/device/DevMapper", "functional/ivy/device/DevMapperMultiProc", "functional/ivy/device/MultiDev:\n    def __init__", "functional/ivy/device/MultiDevItem", "functional/ivy/device/MultiDevIter", "functional/ivy/device/MultiDevNest", "functional/ivy/device/Profiler", "functional/ivy/device/as_ivy_dev", "functional/ivy/device/as_native_dev", "functional/ivy/device/clear_mem_on_dev", "functional/ivy/device/default_device", "functional/ivy/device/dev", "functional/ivy/device/dev_clone", "functional/ivy/device/dev_clone_array", "functional/ivy/device/dev_clone_iter", "functional/ivy/device/dev_clone_nest", "functional/ivy/device/dev_dist", "functional/ivy/device/dev_dist_array", "functional/ivy/device/dev_dist_iter", "functional/ivy/device/dev_dist_nest", "functional/ivy/device/dev_unify", "functional/ivy/device/dev_unify_array", "functional/ivy/device/dev_unify_iter", "functional/ivy/device/dev_unify_nest", "functional/ivy/device/dev_util", "functional/ivy/device/get_all_ivy_arrays_on_dev", "functional/ivy/device/gpu_is_available", "functional/ivy/device/num_cpu_cores", "functional/ivy/device/num_gpus", "functional/ivy/device/num_ivy_arrays_on_dev", "functional/ivy/device/percent_used_mem_on_dev", "functional/ivy/device/print_all_ivy_arrays_on_dev", "functional/ivy/device/set_default_device", "functional/ivy/device/set_split_factor", "functional/ivy/device/split_factor", "functional/ivy/device/split_func_call", "functional/ivy/device/to_device", "functional/ivy/device/total_mem_on_dev", "functional/ivy/device/tpu_is_available", "functional/ivy/device/unset_default_device", "functional/ivy/device/used_mem_on_dev", "functional/ivy/elementwise", "functional/ivy/elementwise/abs", "functional/ivy/elementwise/acos", "functional/ivy/elementwise/acosh", "functional/ivy/elementwise/add", "functional/ivy/elementwise/asin", "functional/ivy/elementwise/asinh", "functional/ivy/elementwise/atan", "functional/ivy/elementwise/atan2", "functional/ivy/elementwise/atanh", "functional/ivy/elementwise/bitwise_and", "functional/ivy/elementwise/bitwise_invert", "functional/ivy/elementwise/bitwise_left_shift", "functional/ivy/elementwise/bitwise_or", "functional/ivy/elementwise/bitwise_right_shift", "functional/ivy/elementwise/bitwise_xor", "functional/ivy/elementwise/ceil", "functional/ivy/elementwise/cos", "functional/ivy/elementwise/cosh", "functional/ivy/elementwise/divide", "functional/ivy/elementwise/equal", "functional/ivy/elementwise/erf", "functional/ivy/elementwise/exp", "functional/ivy/elementwise/expm1", "functional/ivy/elementwise/floor", "functional/ivy/elementwise/floor_divide", "functional/ivy/elementwise/greater", "functional/ivy/elementwise/greater_equal", "functional/ivy/elementwise/isfinite", "functional/ivy/elementwise/isinf", "functional/ivy/elementwise/isnan", "functional/ivy/elementwise/less", "functional/ivy/elementwise/less_equal", "functional/ivy/elementwise/log", "functional/ivy/elementwise/log10", "functional/ivy/elementwise/log1p", "functional/ivy/elementwise/log2", "functional/ivy/elementwise/logaddexp", "functional/ivy/elementwise/logical_and", "functional/ivy/elementwise/logical_not", "functional/ivy/elementwise/logical_or", "functional/ivy/elementwise/logical_xor", "functional/ivy/elementwise/maximum", "functional/ivy/elementwise/minimum", "functional/ivy/elementwise/multiply", "functional/ivy/elementwise/negative", "functional/ivy/elementwise/not_equal", "functional/ivy/elementwise/positive", "functional/ivy/elementwise/pow", "functional/ivy/elementwise/remainder", "functional/ivy/elementwise/round", "functional/ivy/elementwise/sign", "functional/ivy/elementwise/sin", "functional/ivy/elementwise/sinh", "functional/ivy/elementwise/sqrt", "functional/ivy/elementwise/square", "functional/ivy/elementwise/subtract", "functional/ivy/elementwise/tan", "functional/ivy/elementwise/tanh", "functional/ivy/elementwise/trunc", "functional/ivy/general", "functional/ivy/general/all_equal", "functional/ivy/general/arg_info", "functional/ivy/general/arg_names", "functional/ivy/general/array_equal", "functional/ivy/general/arrays_equal", "functional/ivy/general/assert_supports_inplace", "functional/ivy/general/cache_fn", "functional/ivy/general/clip_matrix_norm", "functional/ivy/general/clip_vector_norm", "functional/ivy/general/container_types", "functional/ivy/general/copy_array", "functional/ivy/general/cumprod", "functional/ivy/general/cumsum", "functional/ivy/general/current_backend_str", "functional/ivy/general/default", "functional/ivy/general/einops_rearrange", "functional/ivy/general/einops_reduce", "functional/ivy/general/einops_repeat", "functional/ivy/general/exists", "functional/ivy/general/floormod", "functional/ivy/general/fourier_encode", "functional/ivy/general/gather", "functional/ivy/general/gather_nd", "functional/ivy/general/get_all_arrays_in_memory", "functional/ivy/general/get_min_base", "functional/ivy/general/get_min_denominator", "functional/ivy/general/get_num_dims", "functional/ivy/general/get_referrers_recursive", "functional/ivy/general/has_nans", "functional/ivy/general/indices_where", "functional/ivy/general/inplace_arrays_supported", "functional/ivy/general/inplace_decrement", "functional/ivy/general/inplace_increment", "functional/ivy/general/inplace_update", "functional/ivy/general/inplace_variables_supported", "functional/ivy/general/is_array", "functional/ivy/general/is_ivy_array", "functional/ivy/general/is_ivy_container", "functional/ivy/general/is_native_array", "functional/ivy/general/match_kwargs", "functional/ivy/general/multiprocessing", "functional/ivy/general/num_arrays_in_memory", "functional/ivy/general/one_hot", "functional/ivy/general/print_all_arrays_in_memory", "functional/ivy/general/queue_timeout", "functional/ivy/general/scatter_flat", "functional/ivy/general/scatter_nd", "functional/ivy/general/set_min_base", "functional/ivy/general/set_min_denominator", "functional/ivy/general/set_queue_timeout", "functional/ivy/general/set_tmp_dir", "functional/ivy/general/shape", "functional/ivy/general/shape_to_tuple", "functional/ivy/general/stable_divide", "functional/ivy/general/stable_pow", "functional/ivy/general/supports_inplace", "functional/ivy/general/tmp_dir", "functional/ivy/general/to_list", "functional/ivy/general/to_numpy", "functional/ivy/general/to_scalar", "functional/ivy/general/try_else_none", "functional/ivy/general/unstack", "functional/ivy/general/value_is_nan", "functional/ivy/gradients", "functional/ivy/gradients/GradientTracking:\n    \"\"\"\"\"\"\n\n    # noinspection PyShadowingNames\n    def __init__", "functional/ivy/gradients/adam_step", "functional/ivy/gradients/adam_update", "functional/ivy/gradients/execute_with_gradients", "functional/ivy/gradients/gradient_descent_update", "functional/ivy/gradients/is_variable", "functional/ivy/gradients/lamb_update", "functional/ivy/gradients/lars_update", "functional/ivy/gradients/optimizer_update", "functional/ivy/gradients/set_with_grads", "functional/ivy/gradients/stop_gradient", "functional/ivy/gradients/unset_with_grads", "functional/ivy/gradients/variable", "functional/ivy/gradients/variable_data", "functional/ivy/gradients/with_grads", "functional/ivy/layers", "functional/ivy/layers/conv1d", "functional/ivy/layers/conv1d_transpose", "functional/ivy/layers/conv2d", "functional/ivy/layers/conv2d_transpose", "functional/ivy/layers/conv3d", "functional/ivy/layers/conv3d_transpose", "functional/ivy/layers/depthwise_conv2d", "functional/ivy/layers/dropout", "functional/ivy/layers/linear", "functional/ivy/layers/lstm_update", "functional/ivy/layers/multi_head_attention", "functional/ivy/layers/scaled_dot_product_attention", "functional/ivy/linear_algebra", "functional/ivy/linear_algebra/cholesky", "functional/ivy/linear_algebra/cross", "functional/ivy/linear_algebra/det", "functional/ivy/linear_algebra/diagonal", "functional/ivy/linear_algebra/eigh", "functional/ivy/linear_algebra/eigvalsh", "functional/ivy/linear_algebra/inv", "functional/ivy/linear_algebra/matmul", "functional/ivy/linear_algebra/matrix_norm", "functional/ivy/linear_algebra/matrix_power", "functional/ivy/linear_algebra/matrix_rank", "functional/ivy/linear_algebra/matrix_transpose", "functional/ivy/linear_algebra/outer", "functional/ivy/linear_algebra/pinv", "functional/ivy/linear_algebra/qr", "functional/ivy/linear_algebra/slogdet", "functional/ivy/linear_algebra/solve", "functional/ivy/linear_algebra/svd", "functional/ivy/linear_algebra/svdvals", "functional/ivy/linear_algebra/tensordot", "functional/ivy/linear_algebra/trace", "functional/ivy/linear_algebra/vecdot", "functional/ivy/linear_algebra/vector_norm", "functional/ivy/linear_algebra/vector_to_skew_symmetric_matrix", "functional/ivy/losses", "functional/ivy/losses/binary_cross_entropy", "functional/ivy/losses/cross_entropy", "functional/ivy/losses/sparse_cross_entropy", "functional/ivy/manipulation", "functional/ivy/manipulation/clip", "functional/ivy/manipulation/concat", "functional/ivy/manipulation/constant_pad", "functional/ivy/manipulation/expand_dims", "functional/ivy/manipulation/flip", "functional/ivy/manipulation/permute_dims", "functional/ivy/manipulation/repeat", "functional/ivy/manipulation/reshape", "functional/ivy/manipulation/roll", "functional/ivy/manipulation/split", "functional/ivy/manipulation/squeeze", "functional/ivy/manipulation/stack", "functional/ivy/manipulation/swapaxes", "functional/ivy/manipulation/tile", "functional/ivy/manipulation/zero_pad", "functional/ivy/meta", "functional/ivy/meta/fomaml_step", "functional/ivy/meta/maml_step", "functional/ivy/meta/reptile_step", "functional/ivy/nest", "functional/ivy/nest/all_nested_indices", "functional/ivy/nest/copy_nest", "functional/ivy/nest/index_nest", "functional/ivy/nest/insert_into_nest_at_index", "functional/ivy/nest/insert_into_nest_at_indices", "functional/ivy/nest/map", "functional/ivy/nest/map_nest_at_index", "functional/ivy/nest/map_nest_at_indices", "functional/ivy/nest/multi_index_nest", "functional/ivy/nest/nested_any", "functional/ivy/nest/nested_indices_where", "functional/ivy/nest/nested_map", "functional/ivy/nest/nested_multi_map", "functional/ivy/nest/prune_nest_at_index", "functional/ivy/nest/prune_nest_at_indices", "functional/ivy/nest/set_nest_at_index", "functional/ivy/nest/set_nest_at_indices", "functional/ivy/norms", "functional/ivy/norms/layer_norm", "functional/ivy/random", "functional/ivy/random/multinomial", "functional/ivy/random/randint", "functional/ivy/random/random_normal", "functional/ivy/random/random_uniform", "functional/ivy/random/seed", "functional/ivy/random/shuffle", "functional/ivy/searching", "functional/ivy/searching/argmax", "functional/ivy/searching/argmin", "functional/ivy/searching/nonzero", "functional/ivy/searching/where", "functional/ivy/set", "functional/ivy/set/unique_all", "functional/ivy/set/unique_counts", "functional/ivy/set/unique_inverse", "functional/ivy/set/unique_values", "functional/ivy/sorting", "functional/ivy/sorting/argsort", "functional/ivy/sorting/sort", "functional/ivy/statistical", "functional/ivy/statistical/einsum", "functional/ivy/statistical/max", "functional/ivy/statistical/mean", "functional/ivy/statistical/min", "functional/ivy/statistical/prod", "functional/ivy/statistical/std", "functional/ivy/statistical/sum", "functional/ivy/statistical/var", "functional/ivy/utility", "functional/ivy/utility/all", "functional/ivy/utility/any", "index", "index_append", "index_prepend", "inspection", "inspection/add_array_specs", "inspection/fn_array_spec", "roadmap", "stateful/activations", "stateful/activations/GEGLU", "stateful/activations/GELU", "stateful/converters", "stateful/converters/to_ivy_module", "stateful/initializers", "stateful/initializers/Constant:\n    def __init__", "stateful/initializers/FirstLayerSiren", "stateful/initializers/GlorotUniform", "stateful/initializers/KaimingNormal:\n    def __init__", "stateful/initializers/Ones", "stateful/initializers/Siren", "stateful/initializers/Uniform:\n    def __init__", "stateful/initializers/Zeros", "stateful/layers", "stateful/layers/Conv1D", "stateful/layers/Conv1DTranspose", "stateful/layers/Conv2D", "stateful/layers/Conv2DTranspose", "stateful/layers/Conv3D", "stateful/layers/Conv3DTranspose", "stateful/layers/DepthwiseConv2D", "stateful/layers/Dropout", "stateful/layers/LSTM", "stateful/layers/Linear", "stateful/layers/MultiHeadAttention", "stateful/module", "stateful/module/Module", "stateful/norms", "stateful/norms/LayerNorm", "stateful/optimizers", "stateful/optimizers/Adam", "stateful/optimizers/LAMB", "stateful/optimizers/LARS", "stateful/optimizers/Optimizer", "stateful/optimizers/SGD", "stateful/sequential", "stateful/sequential/Sequential", "supported_frameworks", "verbosity", "verbosity/cprint"], "filenames": ["array/activations.rst", "array/activations/ArrayWithActivations.rst", "array/conversions.rst", "array/conversions/args_to_ivy.rst", "array/conversions/args_to_native.rst", "array/conversions/to_ivy.rst", "array/conversions/to_native.rst", "array/creation.rst", "array/creation/ArrayWithCreation.rst", "array/data_types.rst", "array/data_types/ArrayWithDataTypes.rst", "array/device.rst", "array/device/ArrayWithDevice.rst", "array/elementwise.rst", "array/elementwise/ArrayWithElementwise.rst", "array/general.rst", "array/general/ArrayWithGeneral.rst", "array/gradients.rst", "array/gradients/ArrayWithGradients.rst", "array/image.rst", "array/image/ArrayWithImage.rst", "array/layers.rst", "array/layers/ArrayWithLayers.rst", "array/linear_algebra.rst", "array/linear_algebra/ArrayWithLinearAlgebra.rst", "array/losses.rst", "array/losses/ArrayWithLosses.rst", "array/manipulation.rst", "array/manipulation/ArrayWithManipulation.rst", "array/norms.rst", "array/norms/ArrayWithNorms.rst", "array/random.rst", "array/random/ArrayWithRandom.rst", "array/searching.rst", "array/searching/ArrayWithSearching.rst", "array/set.rst", "array/set/ArrayWithSet.rst", "array/sorting.rst", "array/sorting/ArrayWithSorting.rst", "array/statistical.rst", "array/statistical/ArrayWithStatistical.rst", "array/utility.rst", "array/utility/ArrayWithUtility.rst", "array/wrapping.rst", "array/wrapping/add_ivy_array_instance_methods.rst", "backend_handler.rst", "backend_handler/ContextManager:\n    def __init__.rst", "backend_handler/choose_random_backend.rst", "backend_handler/clear_backend_stack.rst", "backend_handler/current_backend.rst", "backend_handler/get_backend.rst", "backend_handler/set_backend.rst", "backend_handler/try_import_ivy_jax.rst", "backend_handler/try_import_ivy_mxnet.rst", "backend_handler/try_import_ivy_numpy.rst", "backend_handler/try_import_ivy_tf.rst", "backend_handler/try_import_ivy_torch.rst", "backend_handler/unset_backend.rst", "background.rst", "background/ml_explosion.rst", "background/standardization.rst", "background/why_unify.rst", "container/activations.rst", "container/activations/ContainerWithActivations.rst", "container/base.rst", "container/base/ContainerBase.rst", "container/container.rst", "container/container/Container.rst", "container/container/MultiDevContainer.rst", "container/creation.rst", "container/creation/ContainerWithCreation.rst", "container/data_types.rst", "container/data_types/ContainerWithDataTypes.rst", "container/device.rst", "container/device/ContainerWithDevice.rst", "container/elementwise.rst", "container/elementwise/ContainerWithElementwise.rst", "container/general.rst", "container/general/ContainerWithGeneral.rst", "container/gradients.rst", "container/gradients/ContainerWithGradients.rst", "container/image.rst", "container/image/ContainerWithImage.rst", "container/layers.rst", "container/layers/ContainerWithLayers.rst", "container/linear_algebra.rst", "container/linear_algebra/ContainerWithLinearAlgebra.rst", "container/losses.rst", "container/losses/ContainerWithLosses.rst", "container/manipulation.rst", "container/manipulation/ContainerWithManipulation.rst", "container/norms.rst", "container/norms/ContainerWithNorms.rst", "container/random.rst", "container/random/ContainerWithRandom.rst", "container/searching.rst", "container/searching/ContainerWithSearching.rst", "container/set.rst", "container/set/ContainerWithSet.rst", "container/sorting.rst", "container/sorting/ContainerWithSorting.rst", "container/statistical.rst", "container/statistical/ContainerWithStatistical.rst", "container/utility.rst", "container/utility/ContainerWithUtility.rst", "container/wrapping.rst", "container/wrapping/add_ivy_container_instance_methods.rst", "contributing.rst", "contributing/0_setting_up.rst", "contributing/1_the_basics.rst", "contributing/4_open_tasks.rst", "contributing/building_the_docs.rst", "deep_dive.rst", "deep_dive/0_navigating_the_code.rst", "deep_dive/10_docstrings.rst", "deep_dive/11_docstring_examples.rst", "deep_dive/12_array_api_tests.rst", "deep_dive/13_ivy_tests.rst", "deep_dive/1_function_types.rst", "deep_dive/2_backend_setting.rst", "deep_dive/3_function_wrapping.rst", "deep_dive/4_arrays.rst", "deep_dive/5_containers.rst", "deep_dive/6_data_types.rst", "deep_dive/7_devices.rst", "deep_dive/8_inplace_updates.rst", "deep_dive/9_function_arguments.rst", "design.rst", "design/building_blocks.rst", "design/ivy_as_a_framework.rst", "design/ivy_as_a_framework/ivy_array.rst", "design/ivy_as_a_framework/ivy_container.rst", "design/ivy_as_a_framework/ivy_stateful_api.rst", "design/ivy_as_a_transpiler.rst", "docs/ivy.rst", "docs/ivy_builder.rst", "docs/ivy_ecosystem.rst", "docs/ivy_gym.rst", "docs/ivy_mech.rst", "docs/ivy_memory.rst", "docs/ivy_models.rst", "docs/ivy_robot.rst", "docs/ivy_vision.rst", "extensions.rst", "extensions/applied_libraries.rst", "faq.rst", "func_wrapper.rst", "func_wrapper/handle_nestable.rst", "func_wrapper/handle_out_argument.rst", "func_wrapper/infer_device.rst", "func_wrapper/infer_dtype.rst", "func_wrapper/inputs_to_ivy_arrays.rst", "func_wrapper/inputs_to_native_arrays.rst", "func_wrapper/outputs_to_ivy_arrays.rst", "func_wrapper/to_native_arrays_and_back.rst", "functional/ivy.rst", "functional/ivy/activations.rst", "functional/ivy/activations/gelu.rst", "functional/ivy/activations/leaky_relu.rst", "functional/ivy/activations/relu.rst", "functional/ivy/activations/sigmoid.rst", "functional/ivy/activations/softmax.rst", "functional/ivy/activations/softplus.rst", "functional/ivy/activations/tanh.rst", "functional/ivy/compilation.rst", "functional/ivy/compilation/compile.rst", "functional/ivy/constants.rst", "functional/ivy/creation.rst", "functional/ivy/creation/arange.rst", "functional/ivy/creation/asarray.rst", "functional/ivy/creation/empty.rst", "functional/ivy/creation/empty_like.rst", "functional/ivy/creation/eye.rst", "functional/ivy/creation/from_dlpack.rst", "functional/ivy/creation/full.rst", "functional/ivy/creation/full_like.rst", "functional/ivy/creation/linspace.rst", "functional/ivy/creation/logspace.rst", "functional/ivy/creation/meshgrid.rst", "functional/ivy/creation/native_array.rst", "functional/ivy/creation/ones.rst", "functional/ivy/creation/ones_like.rst", "functional/ivy/creation/tril.rst", "functional/ivy/creation/triu.rst", "functional/ivy/creation/zeros.rst", "functional/ivy/creation/zeros_like.rst", "functional/ivy/data_type.rst", "functional/ivy/data_type/DefaultDtype:\n    \"\"\"\"\"\"\n\n    # noinspection PyShadowingNames\n    def __init__.rst", "functional/ivy/data_type/DefaultFloatDtype:\n    \"\"\"\"\"\"\n\n    # noinspection PyShadowingNames\n    def __init__.rst", "functional/ivy/data_type/DefaultIntDtype:\n    \"\"\"\"\"\"\n\n    # noinspection PyShadowingNames\n    def __init__.rst", "functional/ivy/data_type/as_ivy_dtype.rst", "functional/ivy/data_type/as_native_dtype.rst", "functional/ivy/data_type/astype.rst", "functional/ivy/data_type/broadcast_arrays.rst", "functional/ivy/data_type/broadcast_to.rst", "functional/ivy/data_type/can_cast.rst", "functional/ivy/data_type/closest_valid_dtype.rst", "functional/ivy/data_type/default_dtype.rst", "functional/ivy/data_type/default_float_dtype.rst", "functional/ivy/data_type/default_int_dtype.rst", "functional/ivy/data_type/dtype.rst", "functional/ivy/data_type/dtype_bits.rst", "functional/ivy/data_type/finfo.rst", "functional/ivy/data_type/function_supported_dtypes.rst", "functional/ivy/data_type/function_unsupported_dtypes.rst", "functional/ivy/data_type/iinfo.rst", "functional/ivy/data_type/invalid_dtype.rst", "functional/ivy/data_type/is_float_dtype.rst", "functional/ivy/data_type/is_int_dtype.rst", "functional/ivy/data_type/promote_types.rst", "functional/ivy/data_type/result_type.rst", "functional/ivy/data_type/set_default_dtype.rst", "functional/ivy/data_type/set_default_float_dtype.rst", "functional/ivy/data_type/set_default_int_dtype.rst", "functional/ivy/data_type/type_promote_arrays.rst", "functional/ivy/data_type/unset_default_dtype.rst", "functional/ivy/data_type/unset_default_float_dtype.rst", "functional/ivy/data_type/unset_default_int_dtype.rst", "functional/ivy/data_type/valid_dtype.rst", "functional/ivy/device.rst", "functional/ivy/device/DefaultDevice:\n    \"\"\"\"\"\"\n\n    # noinspection PyShadowingNames\n    def __init__.rst", "functional/ivy/device/DevClonedItem.rst", "functional/ivy/device/DevClonedIter.rst", "functional/ivy/device/DevClonedNest.rst", "functional/ivy/device/DevDistItem.rst", "functional/ivy/device/DevDistIter.rst", "functional/ivy/device/DevDistNest.rst", "functional/ivy/device/DevManager:\n    \"\"\"\"\"\"\n\n    def __init__.rst", "functional/ivy/device/DevMapper.rst", "functional/ivy/device/DevMapperMultiProc.rst", "functional/ivy/device/MultiDev:\n    def __init__.rst", "functional/ivy/device/MultiDevItem.rst", "functional/ivy/device/MultiDevIter.rst", "functional/ivy/device/MultiDevNest.rst", "functional/ivy/device/Profiler.rst", "functional/ivy/device/as_ivy_dev.rst", "functional/ivy/device/as_native_dev.rst", "functional/ivy/device/clear_mem_on_dev.rst", "functional/ivy/device/default_device.rst", "functional/ivy/device/dev.rst", "functional/ivy/device/dev_clone.rst", "functional/ivy/device/dev_clone_array.rst", "functional/ivy/device/dev_clone_iter.rst", "functional/ivy/device/dev_clone_nest.rst", "functional/ivy/device/dev_dist.rst", "functional/ivy/device/dev_dist_array.rst", "functional/ivy/device/dev_dist_iter.rst", "functional/ivy/device/dev_dist_nest.rst", "functional/ivy/device/dev_unify.rst", "functional/ivy/device/dev_unify_array.rst", "functional/ivy/device/dev_unify_iter.rst", "functional/ivy/device/dev_unify_nest.rst", "functional/ivy/device/dev_util.rst", "functional/ivy/device/get_all_ivy_arrays_on_dev.rst", "functional/ivy/device/gpu_is_available.rst", "functional/ivy/device/num_cpu_cores.rst", "functional/ivy/device/num_gpus.rst", "functional/ivy/device/num_ivy_arrays_on_dev.rst", "functional/ivy/device/percent_used_mem_on_dev.rst", "functional/ivy/device/print_all_ivy_arrays_on_dev.rst", "functional/ivy/device/set_default_device.rst", "functional/ivy/device/set_split_factor.rst", "functional/ivy/device/split_factor.rst", "functional/ivy/device/split_func_call.rst", "functional/ivy/device/to_device.rst", "functional/ivy/device/total_mem_on_dev.rst", "functional/ivy/device/tpu_is_available.rst", "functional/ivy/device/unset_default_device.rst", "functional/ivy/device/used_mem_on_dev.rst", "functional/ivy/elementwise.rst", "functional/ivy/elementwise/abs.rst", "functional/ivy/elementwise/acos.rst", "functional/ivy/elementwise/acosh.rst", "functional/ivy/elementwise/add.rst", "functional/ivy/elementwise/asin.rst", "functional/ivy/elementwise/asinh.rst", "functional/ivy/elementwise/atan.rst", "functional/ivy/elementwise/atan2.rst", "functional/ivy/elementwise/atanh.rst", "functional/ivy/elementwise/bitwise_and.rst", "functional/ivy/elementwise/bitwise_invert.rst", "functional/ivy/elementwise/bitwise_left_shift.rst", "functional/ivy/elementwise/bitwise_or.rst", "functional/ivy/elementwise/bitwise_right_shift.rst", "functional/ivy/elementwise/bitwise_xor.rst", "functional/ivy/elementwise/ceil.rst", "functional/ivy/elementwise/cos.rst", "functional/ivy/elementwise/cosh.rst", "functional/ivy/elementwise/divide.rst", "functional/ivy/elementwise/equal.rst", "functional/ivy/elementwise/erf.rst", "functional/ivy/elementwise/exp.rst", "functional/ivy/elementwise/expm1.rst", "functional/ivy/elementwise/floor.rst", "functional/ivy/elementwise/floor_divide.rst", "functional/ivy/elementwise/greater.rst", "functional/ivy/elementwise/greater_equal.rst", "functional/ivy/elementwise/isfinite.rst", "functional/ivy/elementwise/isinf.rst", "functional/ivy/elementwise/isnan.rst", "functional/ivy/elementwise/less.rst", "functional/ivy/elementwise/less_equal.rst", "functional/ivy/elementwise/log.rst", "functional/ivy/elementwise/log10.rst", "functional/ivy/elementwise/log1p.rst", "functional/ivy/elementwise/log2.rst", "functional/ivy/elementwise/logaddexp.rst", "functional/ivy/elementwise/logical_and.rst", "functional/ivy/elementwise/logical_not.rst", "functional/ivy/elementwise/logical_or.rst", "functional/ivy/elementwise/logical_xor.rst", "functional/ivy/elementwise/maximum.rst", "functional/ivy/elementwise/minimum.rst", "functional/ivy/elementwise/multiply.rst", "functional/ivy/elementwise/negative.rst", "functional/ivy/elementwise/not_equal.rst", "functional/ivy/elementwise/positive.rst", "functional/ivy/elementwise/pow.rst", "functional/ivy/elementwise/remainder.rst", "functional/ivy/elementwise/round.rst", "functional/ivy/elementwise/sign.rst", "functional/ivy/elementwise/sin.rst", "functional/ivy/elementwise/sinh.rst", "functional/ivy/elementwise/sqrt.rst", "functional/ivy/elementwise/square.rst", "functional/ivy/elementwise/subtract.rst", "functional/ivy/elementwise/tan.rst", "functional/ivy/elementwise/tanh.rst", "functional/ivy/elementwise/trunc.rst", "functional/ivy/general.rst", "functional/ivy/general/all_equal.rst", "functional/ivy/general/arg_info.rst", "functional/ivy/general/arg_names.rst", "functional/ivy/general/array_equal.rst", "functional/ivy/general/arrays_equal.rst", "functional/ivy/general/assert_supports_inplace.rst", "functional/ivy/general/cache_fn.rst", "functional/ivy/general/clip_matrix_norm.rst", "functional/ivy/general/clip_vector_norm.rst", "functional/ivy/general/container_types.rst", "functional/ivy/general/copy_array.rst", "functional/ivy/general/cumprod.rst", "functional/ivy/general/cumsum.rst", "functional/ivy/general/current_backend_str.rst", "functional/ivy/general/default.rst", "functional/ivy/general/einops_rearrange.rst", "functional/ivy/general/einops_reduce.rst", "functional/ivy/general/einops_repeat.rst", "functional/ivy/general/exists.rst", "functional/ivy/general/floormod.rst", "functional/ivy/general/fourier_encode.rst", "functional/ivy/general/gather.rst", "functional/ivy/general/gather_nd.rst", "functional/ivy/general/get_all_arrays_in_memory.rst", "functional/ivy/general/get_min_base.rst", "functional/ivy/general/get_min_denominator.rst", "functional/ivy/general/get_num_dims.rst", "functional/ivy/general/get_referrers_recursive.rst", "functional/ivy/general/has_nans.rst", "functional/ivy/general/indices_where.rst", "functional/ivy/general/inplace_arrays_supported.rst", "functional/ivy/general/inplace_decrement.rst", "functional/ivy/general/inplace_increment.rst", "functional/ivy/general/inplace_update.rst", "functional/ivy/general/inplace_variables_supported.rst", "functional/ivy/general/is_array.rst", "functional/ivy/general/is_ivy_array.rst", "functional/ivy/general/is_ivy_container.rst", "functional/ivy/general/is_native_array.rst", "functional/ivy/general/match_kwargs.rst", "functional/ivy/general/multiprocessing.rst", "functional/ivy/general/num_arrays_in_memory.rst", "functional/ivy/general/one_hot.rst", "functional/ivy/general/print_all_arrays_in_memory.rst", "functional/ivy/general/queue_timeout.rst", "functional/ivy/general/scatter_flat.rst", "functional/ivy/general/scatter_nd.rst", "functional/ivy/general/set_min_base.rst", "functional/ivy/general/set_min_denominator.rst", "functional/ivy/general/set_queue_timeout.rst", "functional/ivy/general/set_tmp_dir.rst", "functional/ivy/general/shape.rst", "functional/ivy/general/shape_to_tuple.rst", "functional/ivy/general/stable_divide.rst", "functional/ivy/general/stable_pow.rst", "functional/ivy/general/supports_inplace.rst", "functional/ivy/general/tmp_dir.rst", "functional/ivy/general/to_list.rst", "functional/ivy/general/to_numpy.rst", "functional/ivy/general/to_scalar.rst", "functional/ivy/general/try_else_none.rst", "functional/ivy/general/unstack.rst", "functional/ivy/general/value_is_nan.rst", "functional/ivy/gradients.rst", "functional/ivy/gradients/GradientTracking:\n    \"\"\"\"\"\"\n\n    # noinspection PyShadowingNames\n    def __init__.rst", "functional/ivy/gradients/adam_step.rst", "functional/ivy/gradients/adam_update.rst", "functional/ivy/gradients/execute_with_gradients.rst", "functional/ivy/gradients/gradient_descent_update.rst", "functional/ivy/gradients/is_variable.rst", "functional/ivy/gradients/lamb_update.rst", "functional/ivy/gradients/lars_update.rst", "functional/ivy/gradients/optimizer_update.rst", "functional/ivy/gradients/set_with_grads.rst", "functional/ivy/gradients/stop_gradient.rst", "functional/ivy/gradients/unset_with_grads.rst", "functional/ivy/gradients/variable.rst", "functional/ivy/gradients/variable_data.rst", "functional/ivy/gradients/with_grads.rst", "functional/ivy/layers.rst", "functional/ivy/layers/conv1d.rst", "functional/ivy/layers/conv1d_transpose.rst", "functional/ivy/layers/conv2d.rst", "functional/ivy/layers/conv2d_transpose.rst", "functional/ivy/layers/conv3d.rst", "functional/ivy/layers/conv3d_transpose.rst", "functional/ivy/layers/depthwise_conv2d.rst", "functional/ivy/layers/dropout.rst", "functional/ivy/layers/linear.rst", "functional/ivy/layers/lstm_update.rst", "functional/ivy/layers/multi_head_attention.rst", "functional/ivy/layers/scaled_dot_product_attention.rst", "functional/ivy/linear_algebra.rst", "functional/ivy/linear_algebra/cholesky.rst", "functional/ivy/linear_algebra/cross.rst", "functional/ivy/linear_algebra/det.rst", "functional/ivy/linear_algebra/diagonal.rst", "functional/ivy/linear_algebra/eigh.rst", "functional/ivy/linear_algebra/eigvalsh.rst", "functional/ivy/linear_algebra/inv.rst", "functional/ivy/linear_algebra/matmul.rst", "functional/ivy/linear_algebra/matrix_norm.rst", "functional/ivy/linear_algebra/matrix_power.rst", "functional/ivy/linear_algebra/matrix_rank.rst", "functional/ivy/linear_algebra/matrix_transpose.rst", "functional/ivy/linear_algebra/outer.rst", "functional/ivy/linear_algebra/pinv.rst", "functional/ivy/linear_algebra/qr.rst", "functional/ivy/linear_algebra/slogdet.rst", "functional/ivy/linear_algebra/solve.rst", "functional/ivy/linear_algebra/svd.rst", "functional/ivy/linear_algebra/svdvals.rst", "functional/ivy/linear_algebra/tensordot.rst", "functional/ivy/linear_algebra/trace.rst", "functional/ivy/linear_algebra/vecdot.rst", "functional/ivy/linear_algebra/vector_norm.rst", "functional/ivy/linear_algebra/vector_to_skew_symmetric_matrix.rst", "functional/ivy/losses.rst", "functional/ivy/losses/binary_cross_entropy.rst", "functional/ivy/losses/cross_entropy.rst", "functional/ivy/losses/sparse_cross_entropy.rst", "functional/ivy/manipulation.rst", "functional/ivy/manipulation/clip.rst", "functional/ivy/manipulation/concat.rst", "functional/ivy/manipulation/constant_pad.rst", "functional/ivy/manipulation/expand_dims.rst", "functional/ivy/manipulation/flip.rst", "functional/ivy/manipulation/permute_dims.rst", "functional/ivy/manipulation/repeat.rst", "functional/ivy/manipulation/reshape.rst", "functional/ivy/manipulation/roll.rst", "functional/ivy/manipulation/split.rst", "functional/ivy/manipulation/squeeze.rst", "functional/ivy/manipulation/stack.rst", "functional/ivy/manipulation/swapaxes.rst", "functional/ivy/manipulation/tile.rst", "functional/ivy/manipulation/zero_pad.rst", "functional/ivy/meta.rst", "functional/ivy/meta/fomaml_step.rst", "functional/ivy/meta/maml_step.rst", "functional/ivy/meta/reptile_step.rst", "functional/ivy/nest.rst", "functional/ivy/nest/all_nested_indices.rst", "functional/ivy/nest/copy_nest.rst", "functional/ivy/nest/index_nest.rst", "functional/ivy/nest/insert_into_nest_at_index.rst", "functional/ivy/nest/insert_into_nest_at_indices.rst", "functional/ivy/nest/map.rst", "functional/ivy/nest/map_nest_at_index.rst", "functional/ivy/nest/map_nest_at_indices.rst", "functional/ivy/nest/multi_index_nest.rst", "functional/ivy/nest/nested_any.rst", "functional/ivy/nest/nested_indices_where.rst", "functional/ivy/nest/nested_map.rst", "functional/ivy/nest/nested_multi_map.rst", "functional/ivy/nest/prune_nest_at_index.rst", "functional/ivy/nest/prune_nest_at_indices.rst", "functional/ivy/nest/set_nest_at_index.rst", "functional/ivy/nest/set_nest_at_indices.rst", "functional/ivy/norms.rst", "functional/ivy/norms/layer_norm.rst", "functional/ivy/random.rst", "functional/ivy/random/multinomial.rst", "functional/ivy/random/randint.rst", "functional/ivy/random/random_normal.rst", "functional/ivy/random/random_uniform.rst", "functional/ivy/random/seed.rst", "functional/ivy/random/shuffle.rst", "functional/ivy/searching.rst", "functional/ivy/searching/argmax.rst", "functional/ivy/searching/argmin.rst", "functional/ivy/searching/nonzero.rst", "functional/ivy/searching/where.rst", "functional/ivy/set.rst", "functional/ivy/set/unique_all.rst", "functional/ivy/set/unique_counts.rst", "functional/ivy/set/unique_inverse.rst", "functional/ivy/set/unique_values.rst", "functional/ivy/sorting.rst", "functional/ivy/sorting/argsort.rst", "functional/ivy/sorting/sort.rst", "functional/ivy/statistical.rst", "functional/ivy/statistical/einsum.rst", "functional/ivy/statistical/max.rst", "functional/ivy/statistical/mean.rst", "functional/ivy/statistical/min.rst", "functional/ivy/statistical/prod.rst", "functional/ivy/statistical/std.rst", "functional/ivy/statistical/sum.rst", "functional/ivy/statistical/var.rst", "functional/ivy/utility.rst", "functional/ivy/utility/all.rst", "functional/ivy/utility/any.rst", "index.rst", "index_append.rst", "index_prepend.rst", "inspection.rst", "inspection/add_array_specs.rst", "inspection/fn_array_spec.rst", "roadmap.rst", "stateful/activations.rst", "stateful/activations/GEGLU.rst", "stateful/activations/GELU.rst", "stateful/converters.rst", "stateful/converters/to_ivy_module.rst", "stateful/initializers.rst", "stateful/initializers/Constant:\n    def __init__.rst", "stateful/initializers/FirstLayerSiren.rst", "stateful/initializers/GlorotUniform.rst", "stateful/initializers/KaimingNormal:\n    def __init__.rst", "stateful/initializers/Ones.rst", "stateful/initializers/Siren.rst", "stateful/initializers/Uniform:\n    def __init__.rst", "stateful/initializers/Zeros.rst", "stateful/layers.rst", "stateful/layers/Conv1D.rst", "stateful/layers/Conv1DTranspose.rst", "stateful/layers/Conv2D.rst", "stateful/layers/Conv2DTranspose.rst", "stateful/layers/Conv3D.rst", "stateful/layers/Conv3DTranspose.rst", "stateful/layers/DepthwiseConv2D.rst", "stateful/layers/Dropout.rst", "stateful/layers/LSTM.rst", "stateful/layers/Linear.rst", "stateful/layers/MultiHeadAttention.rst", "stateful/module.rst", "stateful/module/Module.rst", "stateful/norms.rst", "stateful/norms/LayerNorm.rst", "stateful/optimizers.rst", "stateful/optimizers/Adam.rst", "stateful/optimizers/LAMB.rst", "stateful/optimizers/LARS.rst", "stateful/optimizers/Optimizer.rst", "stateful/optimizers/SGD.rst", "stateful/sequential.rst", "stateful/sequential/Sequential.rst", "supported_frameworks.rst", "verbosity.rst", "verbosity/cprint.rst"], "titles": ["Activations", "ArrayWithActivations", "Conversions", "args_to_ivy", "args_to_native", "to_ivy", "to_native", "Creation", "ArrayWithCreation", "Data types", "ArrayWithDataTypes", "Device", "ArrayWithDevice", "Elementwise", "ArrayWithElementwise", "General", "ArrayWithGeneral", "Gradients", "ArrayWithGradients", "Image", "ArrayWithImage", "Layers", "ArrayWithLayers", "Linear algebra", "ArrayWithLinearAlgebra", "Losses", "ArrayWithLosses", "Manipulation", "ArrayWithManipulation", "Norms", "ArrayWithNorms", "Random", "ArrayWithRandom", "Searching", "ArrayWithSearching", "Set", "ArrayWithSet", "Sorting", "ArrayWithSorting", "Statistical", "ArrayWithStatistical", "Utility", "ArrayWithUtility", "Wrapping", "add_ivy_array_instance_methods", "Backend handler", "&lt;no title&gt;", "choose_random_backend", "clear_backend_stack", "current_backend", "get_backend", "set_backend", "try_import_ivy_jax", "try_import_ivy_mxnet", "try_import_ivy_numpy", "try_import_ivy_tf", "try_import_ivy_torch", "unset_backend", "Background", "ML Explosion", "Standardization", "Why Unify?", "Activations", "ContainerWithActivations", "Base", "ContainerBase", "Container", "Container", "MultiDevContainer", "Creation", "ContainerWithCreation", "Data types", "ContainerWithDataTypes", "Device", "ContainerWithDevice", "Elementwise", "ContainerWithElementwise", "General", "ContainerWithGeneral", "Gradients", "ContainerWithGradients", "Image", "ContainerWithImage", "Layers", "ContainerWithLayers", "Linear algebra", "ContainerWithLinearAlgebra", "Losses", "ContainerWithLosses", "Manipulation", "ContainerWithManipulation", "Norms", "ContainerWithNorms", "Random", "ContainerWithRandom", "Searching", "ContainerWithSearching", "Set", "ContainerWithSet", "Sorting", "ContainerWithSorting", "Statistical", "ContainerWithStatistical", "Utility", "ContainerWithUtility", "Wrapping", "add_ivy_container_instance_methods", "Contributing", "Setting Up", "The Basics", "Open Tasks", "Building the Docs", "Deep Dive", "Navigating the Code", "Docstrings", "Docstring Examples", "Array API Tests", "Ivy Tests", "Function Types", "Backend Setting", "Function Wrapping", "Arrays", "Containers", "Data Types", "Devices", "Inplace Updates", "Function Arguments", "Design", "Building Blocks", "Ivy as a Framework", "Ivy Array", "Ivy Container", "Ivy Stateful API", "Ivy as a Transpiler", "Ivy", "Ivy builder", "Ivy ecosystem", "Ivy gym", "Ivy mech", "Ivy memory", "Ivy models", "Ivy robot", "Ivy vision", "Extensions", "Applied Libraries", "FAQ", "Func wrapper", "handle_nestable", "handle_out_argument", "infer_device", "infer_dtype", "inputs_to_ivy_arrays", "inputs_to_native_arrays", "outputs_to_ivy_arrays", "to_native_arrays_and_back", "&lt;no title&gt;", "Activations", "gelu", "leaky_relu", "relu", "sigmoid", "softmax", "softplus", "tanh", "Compilation", "compile", "Constants", "Creation", "arange", "asarray", "empty", "empty_like", "eye", "from_dlpack", "full", "full_like", "linspace", "logspace", "meshgrid", "native_array", "ones", "ones_like", "tril", "triu", "zeros", "zeros_like", "Data type", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "as_ivy_dtype", "as_native_dtype", "astype", "broadcast_arrays", "broadcast_to", "can_cast", "closest_valid_dtype", "default_dtype", "default_float_dtype", "default_int_dtype", "dtype", "dtype_bits", "finfo", "function_supported_dtypes", "function_unsupported_dtypes", "iinfo", "invalid_dtype", "is_float_dtype", "is_int_dtype", "promote_types", "result_type", "set_default_dtype", "set_default_float_dtype", "set_default_int_dtype", "type_promote_arrays", "unset_default_dtype", "unset_default_float_dtype", "unset_default_int_dtype", "valid_dtype", "Device", "&lt;no title&gt;", "DevClonedItem", "DevClonedIter", "DevClonedNest", "DevDistItem", "DevDistIter", "DevDistNest", "&lt;no title&gt;", "DevMapper", "DevMapperMultiProc", "&lt;no title&gt;", "MultiDevItem", "MultiDevIter", "MultiDevNest", "Profiler", "as_ivy_dev", "as_native_dev", "clear_mem_on_dev", "default_device", "dev", "dev_clone", "dev_clone_array", "dev_clone_iter", "dev_clone_nest", "dev_dist", "dev_dist_array", "dev_dist_iter", "dev_dist_nest", "dev_unify", "dev_unify_array", "dev_unify_iter", "dev_unify_nest", "dev_util", "get_all_ivy_arrays_on_dev", "gpu_is_available", "num_cpu_cores", "num_gpus", "num_ivy_arrays_on_dev", "percent_used_mem_on_dev", "print_all_ivy_arrays_on_dev", "set_default_device", "set_split_factor", "split_factor", "split_func_call", "to_device", "total_mem_on_dev", "tpu_is_available", "unset_default_device", "used_mem_on_dev", "Elementwise", "abs", "acos", "acosh", "add", "asin", "asinh", "atan", "atan2", "atanh", "bitwise_and", "bitwise_invert", "bitwise_left_shift", "bitwise_or", "bitwise_right_shift", "bitwise_xor", "ceil", "cos", "cosh", "divide", "equal", "erf", "exp", "expm1", "floor", "floor_divide", "greater", "greater_equal", "isfinite", "isinf", "isnan", "less", "less_equal", "log", "log10", "log1p", "log2", "logaddexp", "logical_and", "logical_not", "logical_or", "logical_xor", "maximum", "minimum", "multiply", "negative", "not_equal", "positive", "pow", "remainder", "round", "sign", "sin", "sinh", "sqrt", "square", "subtract", "tan", "tanh", "trunc", "General", "all_equal", "arg_info", "arg_names", "array_equal", "arrays_equal", "assert_supports_inplace", "cache_fn", "clip_matrix_norm", "clip_vector_norm", "container_types", "copy_array", "cumprod", "cumsum", "current_backend_str", "default", "einops_rearrange", "einops_reduce", "einops_repeat", "exists", "floormod", "fourier_encode", "gather", "gather_nd", "get_all_arrays_in_memory", "get_min_base", "get_min_denominator", "get_num_dims", "get_referrers_recursive", "has_nans", "indices_where", "inplace_arrays_supported", "inplace_decrement", "inplace_increment", "inplace_update", "inplace_variables_supported", "is_array", "is_ivy_array", "is_ivy_container", "is_native_array", "match_kwargs", "multiprocessing", "num_arrays_in_memory", "one_hot", "print_all_arrays_in_memory", "queue_timeout", "scatter_flat", "scatter_nd", "set_min_base", "set_min_denominator", "set_queue_timeout", "set_tmp_dir", "shape", "shape_to_tuple", "stable_divide", "stable_pow", "supports_inplace", "tmp_dir", "to_list", "to_numpy", "to_scalar", "try_else_none", "unstack", "value_is_nan", "Gradients", "&lt;no title&gt;", "adam_step", "adam_update", "execute_with_gradients", "gradient_descent_update", "is_variable", "lamb_update", "lars_update", "optimizer_update", "set_with_grads", "stop_gradient", "unset_with_grads", "variable", "variable_data", "with_grads", "Layers", "conv1d", "conv1d_transpose", "conv2d", "conv2d_transpose", "conv3d", "conv3d_transpose", "depthwise_conv2d", "dropout", "linear", "lstm_update", "multi_head_attention", "scaled_dot_product_attention", "Linear algebra", "cholesky", "cross", "det", "diagonal", "eigh", "eigvalsh", "inv", "matmul", "matrix_norm", "matrix_power", "matrix_rank", "matrix_transpose", "outer", "pinv", "qr", "slogdet", "solve", "svd", "svdvals", "tensordot", "trace", "vecdot", "vector_norm", "vector_to_skew_symmetric_matrix", "Losses", "binary_cross_entropy", "cross_entropy", "sparse_cross_entropy", "Manipulation", "clip", "concat", "constant_pad", "expand_dims", "flip", "permute_dims", "repeat", "reshape", "roll", "split", "squeeze", "stack", "swapaxes", "tile", "zero_pad", "Meta", "fomaml_step", "maml_step", "reptile_step", "Nest", "all_nested_indices", "copy_nest", "index_nest", "insert_into_nest_at_index", "insert_into_nest_at_indices", "map", "map_nest_at_index", "map_nest_at_indices", "multi_index_nest", "nested_any", "nested_indices_where", "nested_map", "nested_multi_map", "prune_nest_at_index", "prune_nest_at_indices", "set_nest_at_index", "set_nest_at_indices", "Norms", "layer_norm", "Random", "multinomial", "randint", "random_normal", "random_uniform", "seed", "shuffle", "Searching", "argmax", "argmin", "nonzero", "where", "Set", "unique_all", "unique_counts", "unique_inverse", "unique_values", "Sorting", "argsort", "sort", "Statistical", "einsum", "max", "mean", "min", "prod", "std", "sum", "var", "Utility", "all", "any", "Contents", "&lt;no title&gt;", "&lt;no title&gt;", "Inspection", "add_array_specs", "fn_array_spec", "Roadmap", "Activations", "GEGLU", "GELU", "Converters", "to_ivy_module", "Initializers", "&lt;no title&gt;", "FirstLayerSiren", "GlorotUniform", "&lt;no title&gt;", "Ones", "Siren", "&lt;no title&gt;", "Zeros", "Layers", "Conv1D", "Conv1DTranspose", "Conv2D", "Conv2DTranspose", "Conv3D", "Conv3DTranspose", "DepthwiseConv2D", "Dropout", "LSTM", "Linear", "MultiHeadAttention", "Module", "Module", "Norms", "LayerNorm", "Optimizers", "Adam", "LAMB", "LARS", "Optimizer", "SGD", "Sequential", "Sequential", "&lt;no title&gt;", "Verbosity", "cprint"], "terms": {"class": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 51, 57, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 110, 111, 114, 115, 117, 121, 122, 123, 124, 126, 128, 129, 131, 132, 133, 143, 144, 145, 186, 205, 219, 221, 222, 223, 224, 225, 226, 228, 229, 231, 232, 233, 234, 329, 332, 363, 369, 388, 393, 407, 471, 473, 483, 498, 501, 523, 530, 531, 532, 533, 534, 535, 537, 538, 540, 541, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567], "ivi": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 109, 110, 111, 112, 114, 116, 118, 119, 120, 122, 123, 124, 125, 126, 127, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 228, 229, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 537, 538, 540, 541, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 569, 570], "arrai": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 49, 64, 65, 66, 67, 68, 75, 76, 77, 78, 89, 90, 93, 94, 108, 109, 110, 112, 113, 114, 115, 117, 118, 119, 120, 122, 123, 124, 125, 127, 128, 129, 131, 132, 133, 145, 146, 154, 156, 157, 158, 159, 160, 161, 162, 163, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 192, 193, 194, 195, 200, 202, 205, 207, 208, 210, 214, 219, 238, 239, 240, 241, 244, 245, 246, 247, 248, 249, 250, 251, 253, 257, 259, 263, 264, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 333, 334, 335, 337, 338, 340, 341, 342, 345, 346, 347, 348, 349, 350, 351, 352, 353, 356, 358, 359, 360, 361, 362, 363, 365, 366, 368, 371, 372, 373, 375, 376, 381, 385, 387, 388, 389, 391, 392, 393, 395, 396, 398, 399, 400, 401, 402, 404, 406, 407, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 473, 483, 484, 489, 490, 491, 492, 493, 494, 495, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 526, 528, 544, 552, 555], "arraywithactiv": 0, "sourc": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 111, 121, 122, 146, 147, 148, 149, 150, 151, 152, 153, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 228, 229, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 526, 527, 528, 530, 531, 532, 533, 534, 535, 537, 538, 540, 541, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 569, 570], "base": [0, 1, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 45, 62, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 109, 117, 120, 122, 128, 144, 167, 177, 186, 219, 221, 222, 223, 224, 225, 226, 228, 229, 231, 232, 233, 234, 269, 291, 302, 303, 304, 305, 317, 329, 354, 377, 384, 393, 503, 504, 505, 507, 511, 512, 530, 531, 532, 535, 537, 538, 540, 541, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567], "abc": [0, 1, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 64, 65, 130, 219, 228, 234, 329, 348, 556, 557, 560, 564], "activ": [1, 43, 44, 63, 105, 106, 108, 109, 111, 113, 132, 157, 158, 159, 160, 161, 162, 163, 523, 531, 532], "support": [1, 3, 4, 5, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 59, 60, 61, 63, 64, 65, 67, 68, 70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94, 96, 98, 100, 102, 104, 106, 114, 115, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 130, 131, 133, 147, 148, 149, 150, 151, 152, 153, 154, 157, 158, 159, 160, 161, 162, 163, 165, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 448, 449, 450, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 468, 469, 470, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 490, 492, 493, 494, 495, 496, 497, 499, 500, 501, 502, 504, 505, 506, 507, 509, 510, 512, 513, 514, 515, 516, 517, 518, 519, 521, 522, 523, 527, 528, 529, 531, 532, 534, 536, 537, 538, 539, 540, 541, 542, 543, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 557, 559, 560, 561, 562, 563, 564, 565, 567, 568, 570], "framework": [1, 2, 3, 4, 5, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 59, 60, 61, 63, 64, 65, 67, 68, 70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94, 96, 98, 100, 102, 104, 106, 112, 116, 118, 119, 120, 121, 124, 126, 127, 130, 133, 144, 145, 147, 148, 149, 150, 151, 152, 153, 154, 157, 158, 159, 160, 161, 162, 163, 164, 165, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 448, 449, 450, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 468, 469, 470, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 490, 492, 493, 494, 495, 496, 497, 499, 500, 501, 502, 504, 505, 506, 507, 509, 510, 512, 513, 514, 515, 516, 517, 518, 519, 521, 522, 523, 527, 528, 529, 531, 532, 533, 534, 536, 537, 538, 539, 540, 541, 542, 543, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 557, 559, 560, 561, 562, 563, 564, 565, 567, 568, 570], "collect": [2, 64, 65, 117, 144, 156, 164, 219, 329, 393, 409, 447, 471, 484, 489, 491, 530, 544, 558, 560], "function": [2, 13, 14, 15, 16, 27, 28, 43, 44, 45, 49, 50, 51, 59, 64, 65, 75, 76, 77, 78, 89, 90, 93, 94, 105, 106, 109, 111, 112, 113, 114, 115, 116, 117, 119, 121, 125, 127, 129, 130, 131, 132, 143, 144, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 228, 229, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 526, 528, 530, 531, 532, 560, 563, 565], "wrap": [2, 13, 14, 15, 16, 27, 28, 44, 64, 65, 66, 67, 68, 75, 76, 77, 78, 89, 90, 93, 94, 106, 112, 114, 117, 118, 119, 121, 122, 123, 124, 125, 126, 128, 130, 133, 145, 146, 154, 329, 336, 393, 407], "accept": [2, 108, 109, 114, 115, 117, 118, 121, 122, 124, 125, 126, 130, 167, 178, 269, 273, 274, 279, 284, 285, 287, 293, 308, 309, 318, 319, 323, 324, 326, 329, 351, 409, 412, 421, 422, 425, 451, 455, 456, 460, 489, 490, 503, 504, 505, 508, 509, 511, 513, 514, 520, 521, 523], "return": [2, 3, 4, 5, 6, 13, 14, 23, 24, 25, 26, 27, 28, 29, 30, 37, 38, 39, 40, 41, 42, 45, 49, 50, 57, 64, 65, 66, 67, 68, 75, 76, 77, 78, 79, 80, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 99, 100, 101, 102, 103, 104, 113, 114, 115, 117, 118, 120, 121, 122, 123, 124, 125, 126, 128, 130, 131, 132, 133, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 214, 218, 219, 228, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 375, 376, 377, 378, 381, 382, 383, 384, 385, 387, 388, 389, 390, 391, 392, 393, 395, 396, 397, 398, 399, 400, 401, 402, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 477, 481, 482, 483, 484, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 526, 528, 533, 534, 544, 553, 554, 560, 564], "instanc": [2, 3, 4, 5, 6, 13, 14, 15, 16, 27, 28, 43, 44, 64, 65, 66, 67, 75, 76, 77, 78, 89, 90, 105, 106, 110, 114, 115, 117, 118, 121, 123, 125, 126, 131, 132, 133, 146, 154, 156, 158, 159, 160, 161, 162, 163, 167, 178, 219, 228, 260, 269, 273, 274, 279, 284, 285, 287, 293, 296, 311, 312, 314, 319, 323, 324, 326, 329, 340, 351, 363, 387, 389, 409, 412, 415, 421, 422, 423, 424, 425, 447, 448, 451, 455, 456, 458, 460, 461, 464, 489, 490, 491, 494, 495, 498, 499, 500, 501, 502, 503, 504, 505, 508, 509, 511, 512, 513, 520, 521, 533, 534], "args_to_ivi": 2, "arg": [2, 3, 4, 45, 49, 64, 65, 111, 128, 130, 132, 219, 228, 243, 247, 251, 263, 329, 376, 533, 534, 556, 557], "include_deriv": [2, 3, 4, 5, 6, 471, 473, 483], "none": [2, 3, 4, 5, 6, 13, 14, 23, 24, 25, 26, 27, 28, 29, 30, 37, 38, 39, 40, 41, 42, 45, 47, 50, 57, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 113, 115, 118, 122, 123, 124, 125, 126, 128, 130, 132, 133, 156, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 174, 175, 176, 177, 179, 180, 181, 182, 183, 184, 185, 186, 192, 194, 197, 198, 199, 202, 205, 219, 228, 229, 237, 238, 261, 262, 263, 264, 267, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 331, 337, 338, 340, 341, 342, 344, 345, 346, 347, 348, 349, 351, 352, 357, 359, 360, 364, 370, 372, 375, 376, 377, 378, 383, 384, 390, 393, 396, 398, 400, 401, 402, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 428, 429, 430, 431, 432, 433, 434, 435, 436, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 477, 482, 483, 484, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 502, 503, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 533, 534, 535, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567], "kwarg": [2, 3, 4, 45, 49, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 128, 130, 132, 219, 228, 243, 247, 251, 329, 369, 533, 534, 556, 557], "keyword": [2, 3, 4, 64, 65, 66, 67, 68, 113, 123, 124, 125, 126, 131, 167, 178, 219, 228, 229, 243, 247, 251, 329, 332, 369, 471, 477, 511, 518, 556, 557], "variabl": [2, 3, 4, 5, 6, 64, 65, 66, 67, 114, 119, 122, 123, 125, 126, 131, 132, 133, 145, 329, 335, 361, 362, 363, 364, 365, 366, 368, 385, 393, 396, 397, 398, 399, 400, 401, 402, 404, 407, 409, 420, 422, 439, 467, 468, 469, 470, 489, 490, 523, 533, 534, 535, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567], "form": [2, 3, 4, 5, 6, 60, 64, 65, 107, 118, 132, 133, 167, 169, 179, 182, 183, 329, 331, 393, 396, 398, 400, 401, 402, 409, 422, 423, 425, 426, 427, 428, 429, 433, 434, 436, 437, 439, 440, 441, 443, 471, 473, 483], "all": [2, 3, 4, 5, 6, 41, 42, 43, 44, 59, 60, 61, 64, 65, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 130, 131, 132, 133, 144, 145, 146, 154, 164, 165, 167, 168, 182, 183, 219, 228, 253, 259, 329, 330, 333, 334, 353, 373, 388, 409, 419, 422, 439, 442, 445, 451, 456, 460, 467, 468, 469, 470, 471, 472, 473, 482, 483, 484, 491, 492, 495, 520, 523, 526, 528], "nest": [2, 3, 4, 5, 6, 64, 65, 66, 67, 68, 113, 118, 121, 122, 130, 131, 132, 145, 219, 243, 247, 251, 329, 387, 467, 468, 469, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 556, 557, 560, 561, 562, 563, 564, 565], "otherwis": [2, 3, 4, 5, 6, 45, 57, 64, 65, 121, 123, 124, 126, 128, 130, 167, 168, 186, 192, 195, 197, 198, 199, 219, 238, 269, 297, 298, 299, 329, 335, 390, 393, 399, 404, 422, 423, 425, 444, 445, 467, 468, 469, 471, 484, 498, 499, 500, 502, 511, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522], "argument": [2, 3, 4, 5, 6, 45, 49, 50, 59, 64, 65, 66, 67, 68, 110, 112, 113, 114, 115, 117, 118, 119, 121, 122, 128, 130, 131, 164, 165, 167, 168, 186, 210, 219, 228, 229, 243, 247, 251, 269, 273, 274, 285, 293, 323, 324, 326, 329, 331, 332, 336, 344, 351, 369, 376, 409, 412, 421, 451, 460, 471, 477, 489, 490, 511, 513, 518, 520, 521, 526, 528, 533, 534, 556, 557], "ar": [2, 3, 4, 59, 60, 61, 64, 65, 66, 67, 68, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 144, 145, 146, 154, 167, 168, 219, 228, 229, 253, 257, 259, 263, 269, 286, 308, 309, 319, 321, 326, 329, 330, 333, 334, 335, 353, 359, 360, 364, 371, 373, 385, 409, 418, 422, 424, 430, 431, 433, 436, 440, 441, 444, 451, 452, 456, 460, 471, 473, 477, 483, 491, 494, 495, 498, 499, 500, 501, 503, 504, 523, 566, 567], "unchang": [2, 3, 4, 5, 6], "paramet": [2, 3, 4, 5, 6, 43, 44, 45, 49, 50, 64, 65, 66, 67, 68, 105, 106, 113, 114, 117, 130, 131, 144, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 218, 219, 228, 229, 232, 233, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 255, 257, 258, 259, 260, 261, 262, 263, 264, 265, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 341, 342, 344, 345, 346, 347, 348, 349, 350, 351, 352, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 372, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 387, 388, 389, 390, 391, 392, 393, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 526, 528, 533, 534, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567], "iter": [2, 3, 4, 5, 6, 43, 44, 61, 64, 65, 66, 67, 68, 105, 106, 122, 128, 131, 164, 165, 219, 241, 242, 244, 245, 246, 247, 250, 263, 329, 330, 376, 381, 451, 454, 458, 461, 465, 466, 471, 472, 473, 477, 481, 482, 483], "ani": [2, 3, 4, 41, 42, 43, 44, 45, 49, 57, 59, 60, 61, 64, 65, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 121, 122, 123, 124, 125, 126, 128, 130, 131, 132, 133, 144, 145, 164, 165, 167, 169, 179, 219, 264, 269, 273, 274, 285, 289, 293, 296, 301, 323, 324, 326, 329, 330, 344, 345, 346, 347, 348, 351, 358, 365, 366, 367, 368, 383, 384, 393, 397, 409, 412, 421, 451, 460, 467, 468, 469, 470, 471, 477, 481, 489, 490, 491, 495, 511, 513, 520, 521, 523], "The": [2, 3, 4, 5, 6, 45, 49, 50, 58, 59, 61, 64, 65, 66, 67, 68, 107, 108, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 131, 132, 133, 144, 156, 157, 158, 161, 163, 164, 165, 167, 168, 173, 177, 178, 182, 183, 186, 190, 191, 192, 196, 201, 203, 204, 206, 209, 214, 218, 219, 228, 229, 235, 236, 237, 238, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 257, 258, 259, 260, 261, 262, 263, 265, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 305, 306, 307, 308, 309, 310, 313, 315, 317, 318, 319, 320, 321, 322, 323, 326, 328, 329, 331, 333, 336, 337, 343, 344, 350, 352, 361, 362, 363, 365, 366, 367, 368, 370, 375, 376, 377, 378, 379, 382, 383, 384, 392, 393, 395, 396, 398, 400, 401, 402, 404, 407, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 431, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 447, 448, 449, 450, 451, 453, 454, 455, 456, 457, 458, 459, 461, 465, 467, 468, 469, 470, 471, 472, 473, 474, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 494, 498, 499, 500, 501, 503, 504, 505, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 533, 534, 544, 545, 546, 547, 548, 549, 550, 551, 552, 554, 555, 556, 557, 558, 559, 560, 562, 563, 564], "posit": [2, 3, 4, 13, 14, 75, 76, 126, 131, 144, 166, 167, 172, 186, 202, 219, 243, 247, 251, 269, 270, 297, 298, 313, 318, 329, 350, 422, 423, 451, 455, 460, 491, 496, 498, 501, 520, 521, 522, 533, 534], "check": [2, 3, 4, 5, 6, 59, 60, 61, 64, 65, 108, 109, 122, 127, 128, 130, 131, 132, 133, 144, 186, 196, 203, 204, 206, 218, 219, 258, 268, 329, 335, 348, 358, 365, 366, 367, 368, 385, 392, 393, 399, 422, 427, 471, 472, 481, 482, 483, 523], "option": [2, 3, 4, 5, 6, 43, 44, 45, 50, 64, 65, 105, 106, 108, 109, 113, 114, 115, 118, 122, 123, 124, 125, 126, 128, 133, 145, 156, 158, 159, 161, 164, 165, 167, 168, 169, 170, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 184, 185, 186, 196, 197, 198, 199, 206, 218, 219, 238, 262, 263, 264, 269, 270, 271, 272, 273, 274, 275, 276, 277, 279, 280, 281, 282, 283, 284, 285, 286, 287, 291, 292, 293, 297, 298, 299, 300, 302, 303, 304, 305, 306, 307, 308, 309, 310, 313, 314, 315, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 329, 331, 338, 341, 342, 343, 349, 351, 370, 372, 375, 376, 383, 384, 393, 404, 409, 412, 415, 416, 421, 422, 431, 433, 436, 445, 447, 448, 449, 450, 451, 452, 453, 455, 456, 457, 458, 460, 461, 462, 463, 464, 467, 468, 469, 470, 471, 472, 477, 482, 483, 489, 490, 491, 492, 493, 494, 495, 498, 499, 500, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522], "dict": [2, 3, 4, 5, 6, 45, 57, 64, 65, 66, 67, 68, 122, 131, 132, 219, 228, 229, 238, 241, 244, 245, 246, 247, 329, 331, 345, 346, 347, 471, 473, 474, 477, 480, 483, 484], "type": [2, 3, 4, 5, 6, 13, 14, 23, 24, 25, 26, 27, 28, 29, 30, 37, 38, 39, 40, 41, 42, 43, 44, 45, 51, 57, 64, 65, 66, 67, 68, 75, 76, 77, 78, 79, 80, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 99, 100, 101, 102, 103, 104, 105, 106, 108, 110, 112, 113, 114, 115, 120, 121, 122, 124, 125, 126, 128, 130, 131, 133, 146, 147, 148, 149, 150, 151, 152, 153, 154, 156, 158, 159, 160, 161, 162, 163, 164, 165, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 214, 218, 219, 235, 236, 237, 238, 239, 241, 251, 252, 253, 254, 255, 256, 257, 258, 260, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 333, 334, 336, 337, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 354, 355, 356, 358, 359, 361, 362, 363, 365, 366, 367, 368, 372, 375, 376, 377, 378, 381, 383, 384, 385, 387, 388, 389, 391, 392, 393, 395, 396, 398, 399, 400, 401, 402, 404, 406, 409, 410, 412, 414, 415, 416, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 477, 481, 482, 483, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555], "bool": [2, 3, 4, 5, 6, 64, 65, 105, 106, 115, 122, 123, 125, 133, 164, 165, 167, 174, 186, 192, 195, 197, 198, 199, 200, 203, 206, 207, 208, 218, 219, 238, 239, 254, 263, 266, 269, 279, 280, 282, 284, 289, 295, 296, 297, 298, 299, 300, 301, 307, 308, 309, 315, 329, 330, 333, 334, 341, 344, 348, 350, 356, 358, 363, 365, 366, 367, 368, 381, 391, 392, 393, 404, 422, 423, 431, 440, 445, 451, 461, 467, 468, 469, 470, 471, 472, 473, 477, 481, 482, 483, 491, 492, 498, 499, 500, 508, 509, 510, 511, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522], "whether": [2, 3, 4, 5, 6, 64, 65, 66, 67, 68, 105, 106, 107, 108, 123, 125, 126, 156, 157, 164, 165, 186, 192, 200, 206, 207, 208, 218, 219, 238, 239, 250, 254, 255, 258, 259, 263, 266, 268, 269, 299, 329, 330, 333, 334, 341, 344, 348, 350, 356, 358, 360, 363, 364, 365, 366, 367, 368, 369, 381, 385, 391, 392, 393, 396, 397, 398, 399, 400, 401, 402, 404, 409, 417, 422, 427, 467, 468, 469, 470, 471, 472, 473, 477, 481, 482, 483, 484, 491, 492, 520, 521, 522, 533, 534, 544, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565], "also": [2, 3, 4, 5, 6, 13, 14, 15, 16, 27, 28, 59, 60, 64, 65, 75, 76, 77, 78, 89, 90, 93, 94, 107, 108, 109, 112, 113, 114, 115, 117, 118, 120, 121, 122, 123, 124, 125, 126, 128, 130, 131, 132, 133, 144, 145, 167, 178, 269, 273, 274, 279, 284, 285, 287, 293, 319, 323, 324, 326, 329, 351, 363, 393, 396, 409, 412, 418, 421, 422, 425, 451, 455, 456, 460, 467, 468, 469, 470, 471, 472, 473, 481, 482, 483, 489, 490, 503, 504, 505, 508, 509, 511, 513, 520, 521, 544, 554], "recurs": [2, 3, 4, 5, 6, 64, 65, 108, 111, 118, 122, 132, 145, 471, 472, 473, 481, 482, 483], "deriv": [2, 3, 4, 5, 6, 123, 124, 130, 132, 167, 171, 175, 181, 185, 393, 395, 396, 398, 400, 401, 402, 471, 473, 483, 556, 560, 564, 566], "from": [2, 3, 4, 5, 6, 43, 44, 45, 49, 50, 51, 59, 60, 61, 64, 65, 66, 67, 68, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 117, 119, 121, 122, 123, 124, 125, 126, 128, 130, 131, 132, 133, 144, 145, 167, 168, 169, 171, 173, 174, 175, 178, 179, 181, 185, 186, 195, 210, 219, 228, 229, 238, 253, 257, 262, 263, 269, 295, 323, 329, 344, 351, 352, 387, 393, 396, 400, 409, 417, 420, 422, 426, 440, 444, 451, 456, 459, 462, 467, 468, 469, 470, 471, 473, 483, 484, 491, 492, 493, 494, 495, 498, 502, 503, 504, 506, 511, 516, 517, 518, 519, 520, 521, 522, 523, 529, 533, 534, 544, 552, 555, 560, 564], "tupl": [2, 3, 4, 5, 6, 64, 65, 113, 122, 123, 124, 126, 130, 131, 132, 145, 164, 165, 167, 169, 170, 174, 179, 180, 184, 186, 194, 204, 219, 238, 329, 350, 382, 409, 412, 415, 416, 422, 433, 436, 440, 442, 445, 451, 453, 454, 456, 457, 460, 462, 463, 466, 467, 468, 469, 470, 471, 473, 474, 476, 478, 479, 480, 482, 483, 485, 486, 487, 488, 491, 494, 495, 498, 501, 503, 504, 505, 506, 511, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522], "list": [2, 3, 4, 5, 6, 43, 44, 64, 65, 105, 106, 108, 110, 111, 113, 115, 123, 124, 126, 128, 131, 132, 133, 145, 167, 168, 169, 170, 178, 179, 180, 184, 186, 193, 219, 228, 229, 238, 240, 241, 244, 245, 248, 249, 263, 329, 334, 382, 387, 391, 409, 410, 411, 412, 413, 414, 415, 416, 422, 442, 451, 453, 456, 461, 463, 471, 472, 473, 477, 482, 483, 489, 490, 498, 501, 520, 521, 522, 523, 544, 545, 546, 547, 548, 549, 550, 551], "default": [2, 3, 4, 5, 6, 43, 44, 45, 50, 64, 65, 66, 67, 68, 105, 106, 109, 114, 115, 118, 119, 122, 123, 124, 126, 132, 156, 157, 158, 159, 161, 164, 165, 167, 168, 169, 170, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 192, 197, 198, 199, 200, 219, 228, 229, 238, 239, 243, 244, 245, 246, 247, 248, 249, 250, 251, 258, 260, 261, 262, 263, 264, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 279, 280, 281, 282, 283, 284, 285, 286, 287, 291, 292, 293, 297, 298, 299, 300, 302, 303, 304, 305, 306, 307, 308, 309, 310, 313, 314, 315, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 329, 330, 331, 337, 338, 341, 342, 349, 350, 351, 356, 357, 358, 360, 363, 364, 365, 366, 368, 369, 370, 372, 374, 375, 376, 379, 381, 383, 384, 391, 392, 393, 395, 396, 397, 398, 399, 400, 401, 402, 404, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 426, 431, 433, 436, 437, 440, 442, 443, 444, 445, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 460, 461, 462, 463, 464, 467, 468, 469, 470, 471, 472, 473, 477, 481, 482, 483, 484, 489, 490, 491, 492, 493, 494, 495, 496, 498, 499, 500, 501, 503, 504, 505, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 533, 534, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567], "fals": [2, 3, 4, 5, 6, 15, 16, 37, 38, 39, 40, 41, 42, 45, 52, 53, 54, 55, 56, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 115, 122, 125, 131, 132, 133, 186, 192, 195, 200, 219, 238, 239, 250, 254, 255, 258, 263, 266, 268, 269, 279, 295, 296, 297, 298, 299, 300, 308, 309, 329, 330, 333, 334, 341, 344, 348, 350, 356, 363, 365, 366, 368, 369, 381, 391, 393, 396, 397, 398, 399, 400, 401, 402, 422, 423, 431, 440, 445, 451, 461, 467, 468, 469, 470, 471, 472, 473, 477, 481, 482, 483, 484, 491, 492, 498, 499, 500, 502, 503, 504, 505, 507, 508, 509, 510, 511, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 533, 534, 556, 557, 560, 561, 562, 563, 564, 565], "str": [2, 3, 4, 45, 50, 64, 65, 123, 124, 167, 178, 186, 190, 196, 197, 198, 201, 202, 205, 206, 207, 208, 211, 212, 213, 218, 219, 235, 238, 239, 241, 244, 245, 246, 247, 263, 329, 331, 343, 345, 346, 347, 370, 375, 376, 409, 410, 412, 414, 415, 416, 422, 437, 467, 468, 469, 470, 471, 477, 511, 512], "kei": [2, 3, 4, 64, 65, 66, 67, 68, 122, 131, 219, 231, 329, 331, 339, 409, 420, 421, 467, 468, 469, 471, 474, 480, 484, 533, 534, 544, 555, 560, 564], "word": [2, 3, 4, 167, 168, 491, 495, 533, 534], "ret": [2, 3, 4, 5, 6, 45, 49, 50, 57, 64, 65, 113, 114, 128, 133, 156, 157, 158, 159, 160, 161, 162, 163, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 190, 191, 192, 193, 194, 195, 196, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 218, 219, 228, 235, 236, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 262, 263, 264, 265, 266, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 372, 375, 376, 381, 383, 384, 385, 387, 388, 389, 391, 392, 393, 395, 396, 397, 398, 399, 400, 401, 402, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 477, 481, 482, 483, 489, 490, 491, 492, 493, 494, 495, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 526, 528, 533, 534, 560, 564], "same": [2, 3, 4, 59, 61, 64, 65, 108, 109, 111, 113, 115, 117, 118, 121, 122, 124, 125, 126, 128, 130, 132, 133, 167, 168, 171, 175, 178, 181, 182, 183, 185, 186, 192, 193, 194, 219, 228, 229, 263, 269, 270, 273, 280, 285, 293, 313, 318, 319, 320, 328, 329, 349, 351, 352, 372, 375, 376, 393, 399, 404, 409, 410, 411, 412, 413, 414, 415, 416, 421, 422, 423, 424, 425, 426, 427, 428, 429, 434, 436, 437, 439, 440, 443, 444, 451, 453, 456, 457, 460, 462, 463, 467, 468, 469, 471, 484, 503, 504, 505, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 518, 519, 523, 544, 545, 546, 547, 548, 549, 550, 551], "convert": [2, 3, 4, 5, 6, 61, 64, 65, 121, 128, 145, 146, 154, 167, 169, 179, 186, 190, 191, 219, 235, 236, 237, 238, 258, 265, 268, 329, 382, 388, 389, 422, 446, 471, 473, 483, 484, 534], "args_to_n": [2, 125, 130], "nativ": [2, 4, 5, 6, 45, 51, 64, 65, 123, 125, 130, 131, 167, 179, 186, 190, 191, 196, 219, 235, 236, 237, 238, 239, 258, 265, 268, 329, 363, 365, 368, 533, 534], "backend": [2, 4, 6, 49, 50, 51, 57, 59, 64, 65, 109, 110, 112, 114, 116, 117, 118, 120, 121, 122, 123, 124, 125, 126, 129, 130, 133, 186, 203, 204, 206, 218, 219, 254, 256, 266, 329, 360, 363, 364, 370, 393, 396, 398, 400, 401, 402, 407, 523, 529, 533, 534, 560, 561, 562, 563, 564, 565], "to_ivi": [2, 64, 65, 130, 471, 484], "x": [2, 5, 6, 13, 14, 27, 28, 45, 49, 57, 64, 65, 66, 67, 75, 76, 89, 90, 93, 94, 99, 100, 111, 113, 114, 115, 118, 119, 122, 125, 126, 128, 130, 131, 132, 133, 156, 157, 158, 159, 160, 161, 162, 163, 167, 169, 171, 173, 175, 178, 179, 181, 182, 183, 184, 185, 186, 192, 194, 200, 219, 238, 239, 240, 241, 244, 245, 253, 257, 262, 264, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 284, 285, 286, 287, 290, 291, 292, 293, 295, 296, 297, 298, 299, 300, 302, 303, 304, 305, 308, 311, 312, 314, 316, 319, 320, 321, 322, 323, 324, 326, 327, 328, 329, 333, 334, 335, 337, 338, 340, 341, 342, 344, 345, 346, 347, 348, 349, 350, 351, 352, 355, 356, 358, 359, 361, 362, 363, 365, 366, 367, 368, 372, 381, 385, 387, 388, 389, 391, 392, 393, 397, 399, 404, 406, 407, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 431, 432, 433, 434, 435, 436, 437, 438, 440, 441, 442, 443, 445, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 471, 472, 477, 481, 482, 483, 489, 490, 491, 493, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 544, 555], "input": [2, 5, 6, 64, 65, 66, 67, 68, 75, 76, 77, 78, 89, 90, 93, 94, 113, 114, 115, 117, 118, 119, 121, 122, 123, 124, 125, 126, 128, 130, 131, 132, 133, 145, 146, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 167, 169, 171, 173, 175, 178, 179, 181, 182, 183, 185, 186, 192, 193, 195, 196, 197, 198, 199, 200, 201, 207, 208, 209, 210, 214, 219, 228, 229, 238, 239, 240, 241, 243, 244, 247, 251, 257, 263, 264, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 333, 334, 335, 337, 338, 340, 341, 342, 344, 345, 346, 347, 348, 349, 350, 351, 356, 358, 359, 361, 362, 363, 365, 366, 367, 368, 381, 382, 385, 387, 388, 389, 391, 392, 393, 397, 399, 404, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 433, 434, 435, 436, 437, 440, 441, 442, 443, 444, 445, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 489, 490, 491, 492, 493, 494, 495, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 558, 559], "an": [2, 5, 6, 43, 44, 60, 61, 64, 65, 105, 106, 108, 109, 110, 111, 113, 114, 115, 117, 118, 119, 121, 122, 123, 124, 125, 126, 128, 130, 131, 132, 133, 144, 145, 156, 159, 160, 162, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 192, 193, 194, 202, 207, 208, 210, 219, 241, 245, 264, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 328, 329, 336, 337, 338, 340, 349, 350, 351, 359, 363, 365, 366, 367, 368, 388, 389, 390, 393, 399, 404, 406, 407, 409, 412, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 432, 433, 434, 436, 437, 438, 439, 440, 443, 444, 445, 451, 452, 453, 454, 455, 456, 457, 459, 460, 461, 462, 463, 464, 465, 466, 471, 477, 489, 490, 491, 493, 497, 498, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 533, 534, 556, 557, 560, 561, 562, 564], "If": [2, 5, 6, 45, 49, 50, 51, 59, 64, 65, 107, 108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 130, 131, 133, 145, 167, 168, 170, 171, 172, 174, 175, 178, 180, 181, 182, 183, 184, 185, 186, 192, 194, 210, 219, 238, 262, 269, 270, 271, 272, 273, 274, 275, 276, 277, 285, 286, 287, 291, 292, 293, 302, 303, 305, 306, 308, 309, 313, 317, 318, 319, 320, 321, 322, 323, 326, 328, 329, 363, 393, 396, 398, 400, 401, 402, 422, 423, 424, 431, 433, 436, 437, 439, 440, 444, 445, 447, 448, 449, 450, 451, 455, 456, 460, 461, 462, 463, 467, 468, 469, 471, 483, 484, 491, 494, 495, 498, 499, 500, 501, 503, 504, 505, 507, 508, 509, 510, 511, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523], "set": [2, 5, 6, 36, 45, 49, 50, 51, 57, 59, 64, 65, 98, 107, 109, 112, 113, 118, 120, 121, 122, 123, 124, 125, 128, 130, 131, 219, 238, 248, 249, 260, 261, 262, 263, 269, 277, 329, 330, 377, 378, 379, 380, 393, 396, 398, 399, 400, 401, 402, 422, 424, 431, 433, 436, 439, 471, 472, 481, 482, 483, 487, 488, 491, 496, 498, 499, 504, 505, 506, 507, 508, 509, 510, 511, 517, 519, 544, 553, 560, 561, 562, 563, 564, 565], "appli": [2, 5, 6, 13, 14, 15, 16, 27, 28, 64, 65, 75, 76, 77, 78, 89, 90, 93, 94, 108, 109, 110, 114, 115, 117, 118, 120, 122, 123, 124, 125, 126, 128, 130, 131, 132, 133, 143, 145, 156, 157, 158, 159, 160, 161, 162, 163, 186, 210, 329, 345, 346, 347, 393, 400, 401, 409, 418, 420, 421, 422, 433, 436, 447, 448, 449, 450, 451, 463, 467, 468, 469, 471, 477, 480, 483, 484, 489, 490, 523, 530, 531, 532, 558, 559], "leaf": [2, 5, 6, 64, 65, 118, 122, 131, 471, 472, 481, 482], "contain": [2, 5, 6, 15, 16, 59, 62, 63, 64, 65, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 108, 109, 110, 111, 112, 114, 115, 117, 118, 123, 125, 126, 127, 128, 129, 132, 133, 145, 156, 159, 160, 162, 167, 168, 171, 173, 180, 182, 183, 184, 219, 240, 241, 244, 253, 257, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 328, 329, 330, 331, 334, 337, 338, 340, 341, 348, 351, 358, 367, 387, 388, 389, 409, 412, 415, 416, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 433, 434, 435, 436, 437, 439, 440, 441, 442, 443, 444, 445, 447, 448, 449, 450, 451, 452, 455, 456, 457, 458, 460, 461, 464, 467, 468, 469, 470, 471, 484, 489, 490, 491, 492, 494, 495, 498, 499, 500, 501, 502, 503, 504, 505, 507, 508, 509, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 544, 545, 546, 547, 548, 549, 550, 551, 553, 554, 555, 556, 557, 560, 564, 566, 567], "within": [2, 5, 6, 109, 117, 132, 145, 167, 168, 491, 495], "union": [2, 5, 6, 64, 65, 113, 115, 118, 121, 122, 123, 124, 125, 126, 128, 133, 156, 158, 159, 160, 161, 162, 163, 164, 165, 167, 168, 169, 170, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 190, 191, 192, 193, 194, 196, 197, 198, 199, 200, 201, 202, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 218, 219, 235, 236, 237, 238, 239, 241, 244, 245, 246, 247, 252, 258, 260, 262, 263, 264, 265, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 333, 334, 337, 338, 341, 342, 345, 346, 347, 349, 350, 351, 352, 356, 358, 359, 361, 362, 363, 372, 375, 376, 381, 382, 387, 388, 389, 391, 392, 393, 395, 396, 398, 400, 401, 402, 404, 406, 409, 410, 412, 414, 415, 416, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 482, 483, 489, 490, 491, 492, 493, 494, 495, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 517, 518, 519, 520, 521, 522], "nativearrai": [2, 5, 6, 15, 16, 113, 115, 118, 121, 122, 125, 126, 128, 130, 133, 146, 154, 156, 158, 159, 160, 161, 162, 163, 167, 168, 169, 171, 175, 176, 177, 178, 179, 181, 182, 183, 185, 186, 192, 193, 194, 200, 202, 205, 207, 208, 210, 214, 219, 238, 239, 241, 257, 263, 264, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 333, 334, 337, 338, 340, 341, 342, 345, 346, 347, 349, 350, 351, 352, 356, 358, 359, 361, 362, 363, 372, 375, 376, 381, 387, 388, 389, 391, 392, 393, 395, 396, 398, 400, 401, 402, 404, 406, 409, 410, 412, 414, 415, 416, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 471, 473, 483, 489, 490, 491, 492, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 517, 518, 519, 520, 521, 522], "mayb": [2, 5, 6, 108, 128, 130], "manner": [2, 5, 6, 59, 64, 65, 113, 114, 124, 131, 144, 145, 471, 483], "so": [2, 5, 6, 13, 14, 15, 16, 27, 28, 59, 60, 64, 65, 75, 76, 77, 78, 89, 90, 93, 94, 108, 109, 113, 114, 115, 117, 120, 121, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 145, 146, 154, 471, 472, 482, 523], "travers": [2, 5, 6, 64, 65, 122, 128, 130, 471, 483], "lowest": [2, 5, 6, 64, 65, 118, 145, 471, 483, 491, 493], "leav": [2, 5, 6, 64, 65, 66, 67, 114, 115, 117, 118, 122, 123, 125, 126, 131, 132, 451, 463, 471, 472, 473, 481, 482, 483], "search": [2, 5, 6, 34, 59, 64, 65, 96, 108, 113, 115, 117, 499, 500, 501, 502], "s": [2, 5, 6, 45, 49, 50, 51, 57, 60, 61, 64, 65, 107, 108, 109, 111, 112, 114, 115, 117, 119, 121, 122, 123, 124, 125, 126, 128, 130, 131, 132, 133, 144, 145, 166, 167, 178, 182, 183, 186, 203, 204, 219, 238, 262, 269, 318, 329, 334, 393, 396, 398, 400, 402, 422, 440, 441, 471, 477, 483, 511, 517, 519, 523, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 564, 566, 567], "case": [2, 5, 6, 60, 64, 65, 66, 67, 68, 108, 109, 110, 113, 114, 115, 118, 119, 121, 122, 123, 124, 125, 126, 128, 130, 132, 133, 145, 167, 178, 219, 258, 265, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 284, 285, 286, 287, 291, 292, 293, 302, 303, 305, 306, 313, 317, 318, 319, 320, 321, 322, 323, 326, 328, 329, 363, 375, 376, 422, 431, 451, 459, 471, 474, 480, 511, 513, 514, 515, 517, 518, 519, 544, 555, 556, 557, 560, 564], "to_n": [2, 64, 65], "item": [2, 6, 43, 44, 64, 65, 123, 128, 130, 131, 133, 186, 197, 219, 228, 229, 231, 238, 240, 242, 244, 246, 250, 329, 339, 357, 383, 384, 471, 476, 477, 478, 479, 483, 487, 488, 523, 556, 557], "convers": [3, 4, 5, 6, 61, 64, 65, 127, 129, 133, 144, 145, 523, 529], "arraywithcr": 7, "creation": [8, 64, 65, 66, 67, 68, 70, 113, 123, 124, 128, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185], "data_typ": [9, 10, 71, 72, 113, 123, 186, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218], "arraywithdatatyp": 9, "arraywithdevic": [11, 130], "devic": [12, 60, 64, 65, 74, 93, 94, 109, 112, 113, 118, 120, 123, 130, 131, 145, 167, 168, 169, 170, 171, 172, 174, 175, 176, 177, 179, 180, 181, 182, 183, 184, 185, 221, 222, 223, 224, 225, 226, 228, 229, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 329, 351, 352, 372, 375, 376, 491, 492, 493, 494, 495, 533, 534, 535, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 564, 566, 567], "arraywithelementwis": [13, 110, 121], "ab": [13, 14, 75, 76, 117, 120, 269, 317, 422, 445, 523], "out": [13, 14, 23, 24, 25, 26, 27, 28, 29, 30, 37, 38, 39, 40, 41, 42, 59, 60, 61, 64, 65, 66, 67, 75, 76, 77, 78, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 99, 100, 101, 102, 103, 104, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 127, 128, 130, 131, 132, 133, 144, 156, 158, 159, 160, 161, 162, 163, 167, 168, 170, 171, 172, 174, 175, 180, 181, 182, 183, 184, 185, 186, 192, 194, 219, 264, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 337, 338, 340, 341, 342, 345, 346, 347, 349, 351, 352, 359, 372, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 428, 429, 430, 431, 432, 433, 434, 435, 436, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 462, 463, 464, 465, 466, 489, 490, 491, 492, 493, 494, 495, 497, 498, 499, 500, 502, 503, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 544, 552], "method": [13, 14, 15, 16, 27, 28, 43, 44, 64, 65, 66, 67, 68, 75, 76, 77, 78, 89, 90, 93, 94, 105, 106, 110, 113, 114, 115, 117, 118, 121, 126, 128, 129, 132, 133, 145, 156, 158, 159, 160, 161, 162, 163, 167, 173, 178, 269, 274, 279, 284, 285, 287, 293, 296, 311, 312, 314, 319, 323, 324, 329, 339, 340, 351, 375, 376, 387, 389, 393, 400, 401, 409, 415, 421, 422, 423, 424, 425, 447, 448, 451, 455, 456, 458, 461, 464, 471, 472, 482, 483, 484, 489, 490, 491, 494, 495, 498, 499, 500, 501, 502, 503, 504, 505, 508, 509, 511, 512, 513, 520, 521, 523, 544, 555, 556, 557], "variant": [13, 14, 15, 16, 27, 28, 75, 76, 77, 78, 89, 90, 93, 94, 114, 115], "thi": [13, 14, 15, 16, 27, 28, 59, 60, 61, 64, 65, 66, 67, 68, 75, 76, 77, 78, 89, 90, 93, 94, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 144, 145, 167, 168, 169, 178, 179, 219, 243, 247, 251, 258, 263, 268, 269, 270, 273, 274, 279, 283, 284, 285, 287, 292, 293, 308, 309, 318, 319, 323, 324, 326, 329, 350, 351, 363, 374, 379, 393, 396, 398, 399, 400, 401, 402, 407, 409, 412, 418, 421, 422, 425, 431, 438, 451, 455, 456, 459, 460, 463, 471, 477, 483, 484, 489, 490, 498, 499, 503, 504, 505, 507, 508, 509, 511, 513, 514, 517, 519, 520, 521, 523, 529, 556, 557, 560, 561, 562, 563, 564, 565], "simpli": [13, 14, 15, 16, 27, 28, 64, 65, 75, 76, 77, 78, 89, 90, 93, 94, 109, 114, 115, 117, 118, 121, 122, 124, 125, 126, 128, 132, 133, 269, 292], "docstr": [13, 14, 15, 16, 27, 28, 75, 76, 77, 78, 89, 90, 93, 94, 110, 111, 112, 113, 118, 122, 126, 167, 178, 269, 273, 274, 279, 284, 285, 287, 293, 319, 323, 324, 326, 422, 425, 451, 455, 456, 460, 503, 504, 505, 508, 509, 511, 513, 520, 521], "minim": [13, 14, 15, 16, 27, 28, 75, 76, 77, 78, 89, 90, 93, 94, 114, 125, 128], "chang": [13, 14, 15, 16, 27, 28, 61, 75, 76, 77, 78, 89, 90, 93, 94, 108, 109, 110, 111, 114, 116, 117, 122, 128, 132, 145, 219, 422, 424, 451, 459, 471, 473, 483, 523, 529], "aco": [13, 14, 75, 76, 269, 523], "acosh": [13, 14, 75, 76, 186, 203, 204, 269, 523], "add": [13, 14, 43, 44, 64, 65, 66, 67, 75, 76, 77, 78, 105, 106, 108, 109, 110, 112, 113, 114, 118, 119, 121, 122, 126, 128, 130, 145, 269, 489, 490, 523, 529, 558, 559], "x2": [13, 14, 15, 16, 23, 24, 64, 65, 75, 76, 77, 78, 85, 86, 115, 126, 186, 214, 219, 257, 269, 273, 277, 279, 281, 282, 283, 284, 288, 289, 294, 295, 296, 300, 301, 306, 307, 309, 310, 311, 312, 313, 315, 317, 318, 325, 329, 330, 409, 414, 422, 424, 430, 435, 439, 442, 444, 498, 502], "exampl": [13, 14, 15, 16, 27, 28, 43, 44, 45, 49, 50, 51, 57, 61, 66, 67, 75, 76, 77, 78, 89, 90, 93, 94, 105, 106, 108, 109, 110, 112, 113, 114, 117, 118, 119, 120, 121, 122, 123, 124, 125, 128, 130, 131, 132, 133, 144, 145, 156, 158, 159, 160, 161, 162, 163, 164, 165, 167, 174, 175, 178, 180, 181, 184, 185, 186, 192, 203, 204, 219, 238, 239, 241, 253, 254, 255, 256, 257, 260, 262, 264, 266, 267, 269, 273, 274, 278, 279, 280, 283, 284, 285, 286, 287, 291, 293, 295, 296, 300, 311, 312, 314, 319, 323, 324, 326, 329, 330, 333, 334, 340, 341, 348, 351, 355, 366, 381, 387, 388, 389, 409, 410, 412, 414, 415, 416, 421, 422, 423, 424, 425, 426, 429, 433, 435, 440, 442, 443, 447, 448, 449, 450, 451, 452, 453, 455, 456, 458, 459, 460, 461, 462, 463, 464, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 508, 509, 511, 512, 517, 518, 520, 521, 523], "1": [13, 14, 15, 16, 25, 26, 27, 28, 29, 30, 37, 38, 45, 51, 57, 60, 61, 64, 65, 66, 67, 75, 76, 77, 78, 87, 88, 89, 90, 91, 92, 93, 94, 99, 100, 111, 115, 118, 122, 125, 126, 127, 128, 130, 131, 132, 133, 145, 156, 158, 159, 160, 161, 163, 167, 168, 175, 176, 177, 178, 180, 181, 185, 186, 192, 202, 219, 223, 226, 228, 233, 238, 239, 241, 243, 247, 251, 253, 256, 257, 264, 269, 271, 272, 273, 274, 277, 279, 280, 283, 284, 285, 286, 287, 291, 292, 293, 295, 296, 300, 302, 303, 304, 305, 311, 312, 314, 317, 319, 320, 321, 323, 324, 326, 329, 330, 333, 334, 340, 341, 348, 351, 352, 366, 372, 375, 376, 381, 384, 387, 388, 389, 391, 409, 410, 411, 412, 413, 414, 415, 416, 417, 421, 422, 423, 424, 425, 426, 429, 433, 435, 439, 440, 442, 443, 444, 445, 447, 448, 449, 450, 451, 452, 453, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 471, 483, 489, 490, 491, 492, 493, 494, 495, 497, 498, 499, 500, 501, 502, 503, 504, 505, 508, 509, 510, 511, 512, 513, 517, 518, 519, 520, 521, 522, 523, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 564, 566, 567], "2": [13, 14, 15, 16, 27, 28, 45, 49, 64, 65, 66, 67, 75, 76, 77, 78, 89, 90, 93, 94, 108, 109, 111, 115, 119, 122, 126, 127, 128, 130, 131, 132, 133, 145, 156, 158, 159, 160, 161, 163, 166, 167, 174, 175, 178, 180, 181, 185, 186, 192, 219, 238, 239, 241, 253, 255, 257, 264, 269, 273, 274, 276, 277, 279, 280, 283, 284, 285, 286, 287, 291, 293, 295, 296, 300, 305, 311, 312, 314, 319, 323, 324, 326, 329, 330, 333, 334, 337, 338, 341, 348, 351, 366, 381, 387, 409, 412, 413, 414, 415, 416, 421, 422, 423, 424, 425, 426, 429, 430, 431, 433, 435, 436, 437, 440, 442, 443, 445, 447, 448, 450, 451, 452, 453, 455, 456, 458, 459, 460, 461, 462, 464, 489, 490, 491, 492, 493, 494, 495, 497, 498, 499, 500, 501, 502, 503, 504, 505, 508, 509, 511, 512, 513, 520, 521, 523], "3": [13, 14, 15, 16, 27, 28, 66, 67, 75, 76, 77, 78, 89, 90, 93, 94, 108, 111, 115, 119, 122, 128, 130, 131, 132, 133, 156, 158, 159, 160, 161, 166, 167, 175, 178, 181, 184, 185, 219, 238, 241, 257, 264, 269, 273, 274, 279, 283, 284, 285, 287, 291, 293, 295, 296, 300, 311, 312, 314, 319, 323, 324, 326, 329, 333, 334, 341, 348, 351, 381, 387, 389, 409, 410, 411, 412, 414, 415, 416, 421, 422, 423, 424, 425, 426, 429, 433, 435, 440, 442, 443, 446, 447, 448, 450, 451, 452, 453, 455, 456, 458, 459, 460, 461, 462, 464, 489, 490, 491, 492, 493, 494, 495, 497, 498, 499, 500, 501, 502, 503, 504, 505, 508, 509, 511, 512, 513, 518, 520, 521, 523], "y": [13, 14, 15, 16, 27, 28, 66, 67, 75, 76, 77, 78, 89, 90, 93, 94, 113, 115, 119, 122, 128, 130, 156, 158, 159, 160, 161, 162, 163, 167, 174, 175, 178, 180, 181, 185, 186, 192, 219, 239, 253, 257, 262, 269, 273, 274, 277, 279, 280, 283, 284, 285, 286, 287, 291, 293, 296, 311, 312, 314, 319, 323, 324, 326, 329, 330, 333, 334, 340, 341, 348, 349, 351, 381, 387, 388, 389, 393, 397, 409, 415, 416, 418, 422, 423, 424, 425, 429, 435, 442, 443, 447, 448, 449, 450, 451, 452, 453, 455, 456, 458, 459, 460, 461, 464, 491, 492, 493, 494, 495, 497, 498, 499, 500, 501, 502, 503, 505, 508, 509, 511, 512, 513, 517, 518, 520, 521], "4": [13, 14, 27, 28, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 111, 115, 119, 122, 128, 130, 131, 132, 133, 156, 158, 159, 161, 167, 175, 178, 181, 185, 219, 241, 257, 269, 273, 274, 277, 279, 284, 285, 287, 293, 296, 311, 312, 314, 319, 323, 324, 326, 329, 334, 341, 350, 351, 387, 409, 412, 413, 414, 416, 419, 421, 422, 424, 425, 426, 429, 433, 435, 442, 443, 447, 450, 451, 452, 453, 455, 456, 458, 459, 460, 461, 464, 489, 490, 491, 492, 497, 498, 499, 500, 501, 502, 503, 504, 505, 508, 509, 511, 512, 513, 520, 521, 523, 560, 561, 562, 563, 565], "5": [13, 14, 15, 16, 27, 28, 66, 67, 75, 76, 89, 90, 93, 94, 109, 111, 115, 119, 126, 130, 131, 132, 156, 158, 159, 161, 167, 175, 178, 181, 184, 185, 219, 241, 257, 269, 273, 274, 278, 279, 283, 284, 285, 287, 293, 296, 311, 312, 314, 319, 323, 324, 326, 329, 334, 341, 351, 387, 409, 412, 414, 415, 421, 422, 423, 424, 425, 426, 429, 435, 442, 443, 447, 450, 451, 452, 453, 455, 456, 458, 459, 460, 461, 464, 489, 490, 491, 492, 493, 497, 498, 500, 501, 502, 503, 504, 505, 508, 509, 511, 512, 513, 520, 521, 544, 555], "6": [13, 14, 27, 28, 66, 67, 75, 76, 93, 94, 111, 115, 119, 122, 130, 131, 132, 156, 158, 159, 161, 167, 175, 219, 241, 257, 269, 273, 274, 279, 280, 284, 285, 287, 293, 296, 311, 312, 314, 319, 323, 324, 326, 329, 334, 341, 351, 387, 409, 412, 415, 416, 421, 422, 424, 425, 426, 435, 440, 442, 447, 448, 450, 451, 452, 453, 455, 456, 458, 459, 460, 461, 464, 489, 490, 491, 492, 493, 498, 499, 502, 503, 504, 505, 511, 512, 513], "z": [13, 14, 66, 67, 75, 76, 115, 119, 122, 128, 130, 219, 253, 269, 273, 279, 284, 296, 311, 312, 329, 333, 334, 351, 381, 422, 424, 447, 448, 449, 451, 452, 498, 499, 511, 512, 513], "print": [13, 14, 15, 16, 27, 28, 43, 44, 45, 49, 50, 51, 57, 64, 65, 66, 67, 68, 75, 76, 77, 78, 89, 90, 93, 94, 105, 106, 108, 115, 122, 128, 130, 131, 132, 156, 158, 159, 160, 161, 162, 163, 167, 174, 175, 178, 180, 181, 184, 185, 186, 192, 203, 204, 219, 239, 253, 254, 255, 256, 257, 259, 262, 266, 269, 273, 274, 278, 279, 280, 283, 284, 285, 286, 287, 291, 293, 295, 296, 300, 311, 312, 314, 319, 323, 324, 326, 329, 330, 333, 334, 340, 341, 348, 351, 355, 373, 381, 387, 388, 389, 409, 410, 412, 414, 415, 416, 421, 422, 423, 424, 425, 426, 429, 435, 440, 442, 443, 447, 448, 449, 450, 451, 452, 455, 456, 458, 459, 460, 461, 462, 464, 489, 490, 491, 492, 493, 494, 495, 497, 498, 499, 500, 501, 502, 503, 504, 505, 508, 509, 511, 512, 513, 517, 518, 520, 521, 523], "7": [13, 14, 27, 28, 66, 67, 75, 76, 93, 94, 109, 111, 115, 118, 122, 125, 156, 158, 159, 219, 241, 269, 273, 279, 280, 284, 285, 287, 291, 293, 296, 311, 312, 319, 323, 326, 329, 334, 341, 351, 393, 395, 396, 400, 409, 415, 416, 421, 422, 424, 425, 426, 435, 442, 447, 448, 449, 450, 451, 452, 455, 456, 458, 461, 464, 489, 490, 491, 492, 493, 494, 495, 498, 502, 503, 504, 511, 512], "9": [13, 14, 27, 28, 66, 67, 75, 76, 79, 80, 93, 94, 111, 115, 131, 132, 269, 273, 279, 280, 311, 312, 319, 323, 324, 329, 351, 393, 395, 396, 400, 409, 412, 415, 416, 422, 424, 425, 426, 435, 440, 442, 451, 452, 456, 458, 460, 461, 491, 492, 493, 498, 502, 503, 504, 511, 512, 560, 561, 562], "asin": [13, 14, 75, 76, 269, 523], "asinh": [13, 14, 75, 76, 269, 523], "atan": [13, 14, 75, 76, 269, 523], "atan2": [13, 14, 75, 76, 269, 523], "atanh": [13, 14, 75, 76, 269, 523], "bitwise_and": [13, 14, 75, 76, 269], "bitwise_invert": [13, 14, 75, 76, 269], "bitwise_left_shift": [13, 14, 75, 76, 269], "bitwise_or": [13, 14, 75, 76, 269], "bitwise_right_shift": [13, 14, 75, 76, 269], "bitwise_xor": [13, 14, 75, 76, 269], "ceil": [13, 14, 75, 76, 167, 168, 269, 523], "0": [13, 14, 15, 16, 27, 28, 29, 30, 39, 40, 45, 49, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 109, 113, 114, 115, 128, 130, 131, 132, 133, 156, 158, 159, 160, 161, 162, 163, 167, 168, 172, 176, 177, 181, 182, 183, 184, 185, 186, 192, 202, 219, 221, 224, 228, 231, 235, 238, 239, 241, 244, 245, 246, 247, 248, 249, 250, 251, 253, 257, 260, 262, 263, 267, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 281, 283, 284, 285, 286, 287, 291, 292, 293, 296, 302, 303, 305, 311, 312, 313, 314, 317, 318, 319, 320, 321, 322, 323, 324, 326, 328, 329, 330, 333, 334, 337, 338, 340, 341, 342, 348, 351, 352, 357, 366, 372, 375, 376, 381, 387, 388, 389, 393, 395, 396, 400, 401, 409, 410, 412, 414, 415, 416, 421, 422, 423, 424, 425, 426, 429, 440, 442, 443, 445, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 460, 461, 462, 463, 464, 471, 483, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 507, 508, 509, 511, 512, 513, 514, 517, 518, 519, 520, 521, 523, 535, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 566, 567], "co": [13, 14, 60, 75, 76, 128, 144, 269, 329, 350, 523], "cosh": [13, 14, 75, 76, 269, 523], "divid": [13, 14, 64, 65, 75, 76, 115, 121, 269, 294, 329, 383, 451, 461], "equal": [13, 14, 64, 65, 75, 76, 115, 122, 123, 167, 172, 174, 175, 186, 192, 269, 281, 283, 297, 298, 317, 319, 329, 330, 333, 334, 422, 426, 433, 436, 451, 452, 454, 461, 466, 491, 495, 503, 504, 505, 507, 508, 509, 510, 511, 514, 517, 518, 519], "erf": [13, 14, 75, 76, 269], "exp": [13, 14, 75, 76, 269, 292, 306, 523], "expm1": [13, 14, 75, 76, 269], "floor": [13, 14, 75, 76, 269, 283, 329, 349, 523], "floor_divid": [13, 14, 75, 76, 269], "greater": [13, 14, 64, 65, 75, 76, 269, 271, 274, 277, 281, 283, 293, 294, 317, 318, 320, 328, 422, 424, 451, 462, 491, 495], "greater_equ": [13, 14, 75, 76, 269], "isfinit": [13, 14, 75, 76, 269], "isinf": [13, 14, 75, 76, 269], "isnan": [13, 14, 75, 76, 269], "less": [13, 14, 60, 64, 65, 75, 76, 109, 115, 122, 126, 127, 128, 269, 271, 272, 274, 277, 285, 302, 303, 305, 317, 318, 320, 323, 422, 433, 436, 445, 491, 495, 511, 519], "less_equ": [13, 14, 75, 76, 269], "log": [13, 14, 75, 76, 108, 109, 118, 122, 125, 128, 131, 167, 177, 269, 304, 306, 422, 438, 523], "log10": [13, 14, 75, 76, 269], "log1p": [13, 14, 75, 76, 269], "log2": [13, 14, 75, 76, 269], "logaddexp": [13, 14, 75, 76, 269], "logical_and": [13, 14, 75, 76, 269, 523], "logical_not": [13, 14, 75, 76, 269, 523], "logical_or": [13, 14, 75, 76, 269, 523], "logical_xor": [13, 14, 75, 76, 269], "multipli": [13, 14, 75, 76, 115, 119, 121, 269, 329, 341], "neg": [13, 14, 75, 76, 118, 122, 125, 156, 158, 167, 168, 172, 269, 297, 298, 313, 317, 318, 422, 440, 444, 445, 451, 456, 460, 520, 521, 522], "not_equ": [13, 14, 75, 76, 269], "pow": [13, 14, 75, 76, 269], "remaind": [13, 14, 64, 65, 75, 76, 269, 329, 349, 451, 461], "round": [13, 14, 59, 60, 61, 75, 76, 108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 128, 130, 131, 132, 133, 144, 269, 273, 285, 293, 294, 313, 323, 328, 523], "sign": [13, 14, 60, 75, 76, 108, 129, 133, 167, 168, 269, 270, 273, 277, 283, 313, 318, 422, 438, 503, 504, 505, 507, 511, 516, 518], "sin": [13, 14, 75, 76, 121, 128, 269, 329, 350, 523], "sinh": [13, 14, 75, 76, 269, 523], "sqrt": [13, 14, 75, 76, 269, 422, 445], "squar": [13, 14, 75, 76, 269, 323, 409, 412, 422, 423, 425, 427, 428, 429, 432, 438, 439, 440], "subtract": [13, 14, 75, 76, 115, 121, 269], "tan": [13, 14, 75, 76, 114, 118, 122, 125, 126, 128, 269, 274, 503, 504, 505, 508, 509, 523], "56": [13, 14, 75, 76, 115, 269, 323, 326, 422, 435, 511, 512], "19": [13, 14, 75, 76, 115, 269, 284, 326, 422, 426], "tanh": [13, 14, 75, 76, 128, 156, 269, 523], "trunc": [13, 14, 75, 76, 269], "elementwis": [14, 64, 65, 76, 113, 118, 128, 133, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328], "arraywithgener": [15, 130], "all_equ": [15, 16, 77, 78, 329], "equality_matrix": [15, 16, 77, 78, 329, 330], "With": [15, 16, 60, 61, 64, 65, 66, 67, 75, 76, 77, 78, 89, 90, 93, 94, 108, 115, 117, 128, 156, 158, 159, 160, 161, 162, 163, 167, 178, 219, 241, 257, 269, 273, 274, 279, 284, 285, 287, 293, 296, 311, 312, 314, 319, 323, 324, 326, 329, 330, 334, 340, 341, 348, 351, 387, 388, 389, 409, 412, 415, 416, 421, 422, 423, 424, 425, 426, 431, 442, 447, 448, 450, 451, 452, 455, 456, 458, 460, 461, 464, 489, 490, 491, 492, 494, 495, 498, 499, 500, 501, 502, 503, 504, 505, 508, 509, 511, 512, 520, 521], "x1": [15, 16, 75, 76, 77, 78, 115, 126, 186, 214, 219, 257, 269, 273, 277, 279, 281, 282, 283, 284, 288, 289, 294, 295, 296, 300, 301, 306, 307, 309, 310, 311, 312, 313, 315, 317, 318, 325, 329, 330, 333, 409, 414, 422, 424, 430, 435, 439, 442, 444, 498, 502], "mix": [15, 16, 66, 67, 112, 115, 117, 128, 186, 210, 219, 257, 269, 273, 279, 284, 296, 311, 312, 329, 340, 348, 351, 387, 388, 389, 409, 412, 415, 416, 421, 422, 442, 447, 448, 450, 451, 452, 489, 490, 498, 502, 511, 512, 514], "native_arrai": [15, 16, 45, 51, 57, 66, 67, 77, 78, 156, 158, 159, 160, 161, 162, 163, 167, 178, 219, 241, 257, 269, 274, 279, 284, 285, 293, 296, 311, 312, 314, 323, 324, 329, 330, 334, 340, 341, 348, 351, 387, 388, 389, 409, 412, 415, 416, 421, 422, 424, 425, 426, 442, 447, 448, 450, 451, 452, 455, 456, 458, 461, 464, 489, 490, 491, 492, 498, 499, 500, 501, 502, 503, 504, 505, 511, 512, 513, 520, 521], "true": [15, 16, 37, 38, 43, 44, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 115, 117, 118, 122, 123, 125, 128, 130, 131, 132, 133, 156, 157, 164, 165, 167, 176, 186, 192, 195, 219, 238, 255, 259, 260, 269, 279, 284, 295, 296, 297, 298, 299, 300, 308, 309, 329, 330, 333, 334, 335, 336, 341, 348, 350, 358, 359, 366, 381, 387, 389, 392, 393, 396, 398, 399, 400, 401, 402, 404, 409, 417, 422, 423, 431, 440, 445, 447, 448, 449, 450, 451, 461, 467, 468, 469, 470, 471, 472, 481, 482, 484, 491, 492, 498, 499, 500, 502, 503, 504, 505, 507, 508, 509, 510, 511, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 544, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565], "gener": [16, 43, 44, 64, 65, 78, 105, 106, 109, 110, 111, 112, 113, 114, 115, 118, 121, 122, 123, 124, 125, 126, 127, 128, 130, 132, 133, 144, 145, 164, 167, 168, 176, 177, 269, 274, 284, 285, 287, 293, 318, 323, 324, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 399, 451, 455, 460, 491, 492, 493, 495, 496, 503, 504, 505, 508, 509, 511, 513, 523, 560, 564], "arraywithgradi": [17, 130], "gradient": [18, 64, 65, 80, 113, 122, 131, 132, 144, 145, 219, 263, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 467, 468, 469, 470, 523, 560, 561, 562, 563, 564, 565], "arraywithimag": [19, 130], "imag": [20, 82, 108, 111, 113, 128, 129, 131, 133, 144, 409, 410, 411, 412, 413, 415, 416, 523], "arraywithlay": 21, "layer": [22, 59, 84, 113, 114, 128, 129, 132, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 489, 490, 523, 535, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 564, 566, 567], "linear_algebra": [23, 24, 85, 86, 113, 130, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446], "arraywithlinearalgebra": 23, "matmul": [23, 24, 85, 86, 113, 119, 128, 422, 440, 523], "arraywithloss": 25, "binary_cross_entropi": [25, 26, 87, 88, 447], "pred": [25, 26, 87, 88, 118, 122, 125, 447, 448, 449, 450], "epsilon": [25, 26, 29, 30, 79, 80, 87, 88, 91, 92, 118, 122, 125, 132, 393, 395, 396, 400, 422, 433, 436, 447, 448, 449, 450, 489, 490, 558, 559, 560, 561, 562], "1e": [25, 26, 29, 30, 79, 80, 87, 88, 91, 92, 118, 122, 125, 132, 133, 329, 355, 393, 395, 396, 400, 422, 440, 447, 448, 449, 450, 489, 490, 523, 560, 561, 562, 563, 565], "07": [25, 26, 79, 80, 87, 88, 132, 393, 395, 396, 400, 447, 448, 449, 450, 560, 561, 562], "cross_entropi": [25, 26, 87, 88, 118, 122, 125, 447, 450], "axi": [25, 26, 27, 28, 37, 38, 39, 40, 41, 42, 64, 65, 87, 88, 89, 90, 99, 100, 101, 102, 103, 104, 115, 118, 122, 123, 125, 126, 128, 130, 133, 144, 156, 161, 167, 176, 177, 219, 221, 224, 231, 244, 245, 246, 247, 248, 249, 250, 251, 263, 329, 341, 342, 351, 391, 422, 424, 426, 444, 445, 447, 449, 450, 451, 453, 454, 455, 456, 458, 460, 461, 462, 463, 464, 465, 466, 491, 497, 498, 499, 500, 508, 509, 510, 511, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522], "sparse_cross_entropi": [25, 26, 87, 88, 447], "loss": [26, 88, 113, 118, 131, 132, 133, 448, 449, 450, 523], "arraywithmanipul": 27, "clip": [27, 28, 64, 65, 89, 90, 118, 122, 125, 128, 131, 133, 269, 311, 312, 329, 337, 338, 451, 523], "x_min": [27, 28, 64, 65, 89, 90, 128, 133, 451, 452], "x_max": [27, 28, 64, 65, 89, 90, 128, 133, 451, 452], "roll": [27, 28, 89, 90, 122, 126, 451], "8": [27, 28, 66, 67, 75, 76, 93, 94, 108, 111, 115, 122, 127, 131, 156, 160, 219, 241, 269, 273, 279, 285, 287, 296, 311, 312, 319, 323, 324, 329, 334, 351, 409, 416, 422, 424, 425, 426, 435, 442, 447, 448, 451, 452, 456, 458, 461, 491, 492, 493, 498, 502, 503, 504, 511, 512, 523, 544, 555], "concat": [27, 28, 64, 65, 89, 90, 219, 248, 249, 250, 251, 263, 329, 350, 451, 523], "xs": [27, 28, 89, 90, 122, 219, 242, 246, 248, 249, 250, 329, 330, 334, 393, 397, 451, 453], "constant_pad": [27, 28, 89, 90, 451], "pad_width": [27, 28, 89, 90, 451, 454, 466], "valu": [27, 28, 64, 65, 66, 67, 68, 89, 90, 109, 115, 117, 118, 122, 123, 124, 125, 126, 128, 130, 133, 145, 167, 168, 172, 174, 175, 176, 177, 186, 192, 197, 198, 199, 219, 231, 262, 263, 269, 270, 271, 273, 274, 276, 285, 289, 290, 293, 294, 295, 296, 300, 301, 311, 312, 313, 315, 316, 317, 319, 328, 329, 337, 338, 339, 344, 350, 351, 352, 357, 360, 364, 374, 375, 376, 377, 378, 379, 392, 393, 395, 396, 397, 400, 404, 408, 409, 410, 411, 412, 413, 414, 415, 416, 419, 420, 421, 422, 433, 436, 437, 438, 439, 440, 441, 445, 451, 452, 454, 458, 459, 466, 467, 468, 469, 471, 475, 476, 477, 478, 479, 484, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 498, 499, 500, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 513, 514, 515, 516, 517, 518, 519, 544, 545, 546, 547, 548, 549, 550, 551, 555, 556, 557, 558, 559, 560, 561, 562, 564], "expand_dim": [27, 28, 89, 90, 128, 131, 451, 523], "flip": [27, 28, 89, 90, 130, 131, 133, 269, 280, 451, 458, 523], "permute_dim": [27, 28, 89, 90, 451], "ax": [27, 28, 64, 65, 89, 90, 113, 115, 123, 130, 219, 263, 329, 341, 422, 431, 439, 442, 445, 451, 454, 456, 457, 460, 462, 464, 466, 498, 499, 500, 511, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522], "repeat": [27, 28, 64, 65, 89, 90, 109, 114, 115, 119, 121, 122, 329, 347, 451, 465], "reshap": [27, 28, 64, 65, 89, 90, 125, 128, 130, 133, 451, 523], "shape": [27, 28, 64, 65, 89, 90, 93, 94, 109, 113, 114, 115, 123, 124, 125, 126, 128, 130, 131, 132, 133, 156, 159, 167, 170, 171, 174, 175, 178, 180, 181, 182, 183, 184, 185, 186, 192, 193, 194, 219, 231, 259, 264, 269, 270, 271, 272, 273, 274, 275, 276, 277, 279, 280, 281, 282, 283, 284, 285, 286, 287, 291, 292, 293, 296, 297, 298, 299, 300, 302, 303, 304, 305, 306, 307, 308, 309, 310, 313, 314, 315, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 329, 338, 349, 352, 356, 372, 375, 376, 382, 409, 411, 412, 413, 415, 416, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 433, 434, 435, 436, 437, 439, 440, 441, 443, 444, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 466, 491, 493, 494, 495, 498, 499, 501, 508, 509, 510, 511, 512, 520, 521, 522, 523, 544, 546, 547, 548, 549, 550, 551, 558, 559], "shift": [27, 28, 89, 90, 115, 126, 269, 281, 283, 451, 460], "squeez": [27, 28, 89, 90, 451, 523], "stack": [27, 28, 64, 65, 89, 90, 128, 167, 182, 183, 422, 425, 426, 427, 428, 429, 430, 432, 433, 434, 436, 437, 440, 441, 443, 451, 471, 472, 481, 482, 523, 544, 553], "swapax": [27, 28, 89, 90, 451], "axis0": [27, 28, 89, 90, 451, 464], "axis1": [27, 28, 89, 90, 422, 426, 451, 464], "tile": [27, 28, 89, 90, 451, 523], "rep": [27, 28, 89, 90, 451, 465], "zero_pad": [27, 28, 89, 90, 451, 523], "manipul": [28, 59, 90, 113, 133, 144, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466], "arraywithnorm": 29, "layer_norm": [29, 30, 91, 92, 489], "normalized_idx": [29, 30, 91, 92, 489, 490], "05": [29, 30, 91, 92, 219, 489, 490], "scale": [29, 30, 91, 92, 122, 219, 261, 262, 393, 401, 409, 417, 420, 421, 489, 490, 544, 552, 555, 560, 563], "offset": [29, 30, 91, 92, 422, 426, 443, 489, 490], "new_std": [29, 30, 91, 92, 489, 490, 558, 559], "norm": [30, 64, 65, 92, 113, 329, 337, 338, 422, 431, 445, 490, 523, 559, 560, 562], "arraywithrandom": [31, 130], "random": [32, 64, 65, 94, 113, 124, 133, 144, 492, 493, 494, 495, 496, 497, 523], "arraywithsearch": 33, "arraywithset": 35, "arraywithsort": 37, "argsort": [37, 38, 99, 100, 508], "descend": [37, 38, 99, 100, 422, 440, 441, 508, 509, 510], "stabl": [37, 38, 99, 100, 108, 128, 145, 329, 354, 355, 377, 378, 383, 384, 508, 509, 510], "sort": [38, 64, 65, 66, 67, 68, 100, 113, 422, 427, 440, 441, 509], "arraywithstatist": 39, "einsum": [39, 40, 101, 102, 511], "equat": [39, 40, 101, 102, 422, 439, 511, 512], "max": [39, 40, 64, 65, 101, 102, 186, 202, 205, 269, 311, 329, 337, 338, 346, 375, 376, 422, 433, 436, 511, 560, 562], "keepdim": [39, 40, 41, 42, 64, 65, 101, 102, 103, 104, 329, 391, 422, 431, 445, 498, 499, 500, 511, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522], "mean": [39, 40, 64, 65, 101, 102, 105, 106, 108, 109, 112, 115, 118, 122, 123, 124, 125, 128, 130, 131, 132, 133, 144, 145, 219, 248, 249, 250, 251, 263, 329, 346, 467, 468, 469, 470, 471, 477, 491, 494, 503, 504, 511, 523, 535], "min": [39, 40, 64, 65, 101, 102, 186, 202, 205, 269, 312, 329, 346, 375, 376, 383, 422, 437, 440, 441, 445, 511], "prod": [39, 40, 64, 65, 101, 102, 115, 123, 329, 346, 511], "dtype": [39, 40, 64, 65, 101, 102, 113, 115, 118, 123, 124, 130, 167, 168, 169, 170, 171, 172, 174, 175, 176, 179, 180, 181, 184, 185, 186, 190, 191, 192, 193, 195, 196, 197, 198, 199, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 218, 219, 259, 269, 283, 329, 333, 334, 372, 388, 409, 417, 451, 455, 489, 490, 491, 495, 498, 499, 500, 508, 510, 511, 516, 517, 518, 520, 521, 523, 535, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 566, 567], "std": [39, 40, 101, 102, 115, 491, 494, 503, 504, 511], "correct": [39, 40, 101, 102, 109, 110, 112, 118, 122, 123, 124, 126, 186, 214, 451, 452, 511, 517, 519, 523], "sum": [39, 40, 64, 65, 101, 102, 118, 122, 123, 125, 128, 219, 248, 249, 250, 251, 263, 269, 273, 306, 329, 342, 346, 375, 376, 409, 421, 422, 440, 443, 445, 511, 512, 517], "var": [39, 40, 101, 102, 105, 106, 115, 128, 467, 468, 469, 511], "statist": [40, 102, 105, 106, 113, 123, 512, 513, 514, 515, 516, 517, 518, 519], "arraywithutil": 41, "util": [42, 104, 113, 124, 219, 252, 521, 522], "add_ivy_array_instance_method": 43, "cl": [43, 44, 105, 106], "modul": [43, 44, 45, 49, 50, 61, 64, 65, 66, 67, 68, 105, 106, 108, 111, 117, 118, 119, 121, 125, 128, 129, 131, 133, 144, 145, 329, 370, 491, 492, 494, 495, 523, 530, 531, 532, 533, 534, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 558, 559, 566, 567], "to_ignor": [43, 44, 105, 106, 471, 482], "loop": [43, 44, 105, 106, 119, 145, 467, 468, 469, 470], "over": [43, 44, 45, 49, 59, 61, 64, 65, 105, 106, 108, 114, 115, 119, 125, 130, 145, 422, 431, 442, 444, 445, 489, 490, 491, 495, 511, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 558, 559], "etc": [43, 44, 61, 64, 65, 105, 106, 108, 109, 110, 113, 115, 117, 121, 122, 123, 126, 128, 130, 131, 145, 167, 176, 177, 329, 351, 352, 372, 375, 376, 491, 492, 493, 495, 503, 504, 505, 507, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 564, 566, 567], "us": [43, 44, 45, 50, 57, 60, 61, 64, 65, 66, 67, 68, 105, 106, 107, 109, 110, 112, 113, 114, 115, 116, 117, 118, 119, 121, 122, 123, 124, 125, 126, 127, 128, 130, 132, 133, 144, 145, 156, 158, 159, 160, 161, 162, 163, 166, 186, 201, 219, 228, 229, 254, 258, 261, 262, 263, 264, 266, 268, 269, 274, 279, 284, 287, 293, 296, 311, 312, 314, 319, 323, 329, 351, 354, 355, 369, 375, 376, 377, 378, 383, 384, 393, 395, 396, 400, 401, 409, 415, 417, 418, 420, 421, 422, 425, 426, 431, 447, 448, 451, 455, 456, 458, 460, 464, 467, 468, 469, 470, 471, 472, 474, 480, 481, 482, 484, 489, 490, 498, 499, 500, 501, 503, 504, 505, 511, 512, 520, 521, 523, 544, 552, 555, 556, 557, 558, 559, 560, 562, 563], "_wrap_funct": [43, 44, 105, 106, 118, 120], "we": [43, 44, 45, 50, 51, 57, 58, 59, 60, 61, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 120, 121, 122, 123, 125, 126, 128, 129, 130, 131, 132, 133, 144, 145, 393, 397, 523, 529], "want": [43, 44, 45, 50, 60, 105, 106, 107, 108, 109, 117, 131, 132, 133, 145], "don": [43, 44, 61, 105, 106, 108, 109, 110, 123, 132, 145], "t": [43, 44, 45, 50, 60, 61, 105, 106, 108, 109, 110, 111, 115, 123, 128, 130, 131, 132, 133, 145, 329, 334, 409, 418, 419], "As": [43, 44, 59, 105, 106, 109, 117, 118, 121, 122, 123, 124, 125, 126, 128, 130, 131, 132, 145, 503, 504, 505, 507], "shown": [43, 44, 64, 65, 105, 106, 109, 115, 126, 128, 130, 145, 167, 178, 269, 279, 284, 287, 319, 422, 425, 451, 455, 456, 503, 504, 505, 508, 509], "appropri": [43, 44, 105, 106, 109, 120, 269, 273, 313, 498, 499], "our": [43, 44, 59, 60, 105, 106, 107, 108, 109, 115, 122, 127, 130, 131, 132, 133, 145, 523], "toi": [43, 44, 105, 106], "arrayexampl": [43, 44], "import": [43, 44, 45, 49, 60, 105, 106, 110, 113, 114, 115, 119, 121, 122, 123, 124, 125, 128, 130, 131, 133, 145, 219, 260, 523, 529], "pass": [43, 44, 45, 49, 64, 65, 66, 67, 68, 105, 106, 110, 114, 115, 116, 117, 118, 119, 121, 122, 125, 126, 130, 145, 186, 196, 219, 228, 263, 269, 277, 329, 336, 363, 393, 407, 467, 468, 469, 533, 534, 556, 557, 560, 564, 566, 567], "hasattr": [43, 44, 105, 106, 130], "relu": [43, 44, 66, 67, 131, 132, 156, 157, 158, 523], "softmax": [43, 44, 66, 67, 156, 409, 420, 421, 523], "backend_handl": [45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 523], "contextmanag": [45, 46], "object": [45, 64, 65, 66, 67, 68, 130, 133, 167, 173, 186, 202, 219, 264, 393, 471, 474, 476, 478, 479, 480, 485, 486, 487, 488, 491, 497, 535, 544, 545, 546, 547, 548, 549, 550, 551, 553, 554, 556, 557], "__init__": [45, 46, 49, 50, 64, 65, 66, 67, 68, 113, 119, 123, 128, 130, 131, 132, 133, 186, 187, 188, 189, 219, 220, 227, 228, 229, 230, 231, 232, 233, 234, 393, 394, 491, 492, 494, 495, 523, 530, 531, 532, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567], "choose_random_backend": 45, "exclud": [45, 47, 115, 128, 167, 168, 491, 495], "clear_backend_stack": 45, "current_backend": [45, 66, 67, 113, 118], "current": [45, 49, 50, 57, 61, 64, 65, 66, 67, 68, 108, 109, 110, 111, 118, 124, 128, 133, 144, 145, 186, 203, 204, 206, 218, 219, 228, 252, 253, 257, 259, 329, 353, 360, 364, 371, 373, 471, 472, 481, 482, 523], "prioriti": [45, 49, 64, 65, 109, 125], "global_backend": [45, 49], "which": [45, 49, 50, 59, 60, 61, 64, 65, 66, 67, 68, 108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 130, 131, 132, 133, 144, 145, 156, 161, 164, 165, 166, 167, 168, 169, 170, 171, 172, 174, 175, 176, 177, 179, 180, 181, 182, 183, 184, 185, 186, 195, 196, 200, 202, 205, 206, 218, 219, 228, 229, 239, 244, 245, 246, 247, 248, 249, 250, 251, 253, 257, 259, 261, 262, 263, 269, 318, 329, 331, 341, 342, 344, 351, 352, 353, 359, 363, 371, 372, 373, 375, 376, 391, 393, 396, 397, 398, 400, 401, 402, 404, 406, 407, 409, 420, 422, 424, 426, 431, 439, 440, 444, 445, 447, 449, 450, 451, 453, 456, 458, 460, 461, 463, 471, 476, 477, 478, 479, 484, 485, 486, 487, 488, 491, 492, 493, 495, 498, 499, 500, 501, 502, 503, 504, 505, 507, 508, 509, 510, 511, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 526, 528, 533, 534, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 564, 566, 567], "try": [45, 49, 58, 60, 61, 64, 65, 108, 109, 110, 111, 121, 122, 130, 145, 329, 390, 523], "infer": [45, 49, 112, 119, 123, 124, 128, 133, 164, 165, 167, 168, 169, 171, 174, 175, 179, 181, 185, 269, 295, 329, 356, 381, 451, 459], "when": [45, 49, 59, 60, 64, 65, 66, 67, 68, 108, 109, 110, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 128, 130, 131, 133, 145, 186, 192, 219, 269, 273, 292, 317, 329, 336, 363, 384, 447, 448, 449, 450, 471, 482, 498, 499, 500, 502, 511, 513, 515, 517, 519, 523, 556, 557], "global": [45, 49, 50, 51, 57, 64, 65, 66, 67, 68, 118, 119, 123, 124, 128, 186, 197, 198, 199, 219, 228, 229, 261, 262, 263, 329, 354, 355, 374, 377, 378, 379, 383, 384, 489, 490, 558, 559], "numpi": [45, 49, 50, 51, 59, 60, 64, 65, 109, 110, 117, 119, 123, 124, 125, 126, 128, 130, 133, 329, 388, 511, 512, 523], "np": [45, 49, 121, 123, 124, 125, 126, 130, 131, 133, 523], "py": [45, 49, 50, 109, 113, 114, 118, 119, 123, 124, 126, 128, 130, 132, 133, 491, 492, 494, 495], "noqa": [45, 49, 50, 167, 178, 269, 273, 279, 284, 285, 287, 319, 323, 324, 326, 422, 425, 451, 455, 456, 460, 511, 513], "set_backend": [45, 49, 50, 57, 118, 119, 120, 123, 186, 203, 204, 219, 260, 329, 381, 523], "ha": [45, 49, 50, 59, 60, 61, 64, 65, 109, 114, 115, 118, 119, 120, 123, 124, 128, 130, 132, 133, 144, 145, 167, 178, 219, 238, 269, 270, 313, 317, 422, 430, 438, 439, 440, 443, 451, 455, 462, 503, 504, 505, 507, 511, 514, 516, 517, 518, 519], "jax": [45, 49, 50, 51, 60, 61, 109, 110, 119, 123, 124, 125, 126, 128, 130, 133, 145, 393, 399, 503, 504, 505, 507, 523], "get_backend": [45, 118, 119], "specifi": [45, 50, 64, 65, 112, 117, 118, 123, 124, 125, 126, 128, 131, 132, 133, 167, 168, 170, 174, 176, 177, 180, 182, 183, 184, 186, 192, 194, 219, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 253, 257, 259, 262, 263, 264, 269, 318, 329, 331, 341, 351, 352, 358, 391, 422, 426, 431, 442, 443, 444, 445, 447, 448, 449, 450, 451, 452, 453, 454, 456, 460, 462, 463, 466, 471, 476, 478, 479, 485, 486, 487, 488, 498, 499, 500, 503, 504, 505, 507, 508, 509, 511, 512, 516, 518, 520, 521, 522], "isn": [45, 50, 109, 131, 145], "associ": [45, 50, 109, 118, 120, 145, 269, 273, 313, 422, 433, 436, 446], "retriev": [45, 50, 109, 329, 331], "i": [45, 50, 109, 111, 112, 128, 131, 133, 167, 168, 178, 269, 270, 277, 281, 283, 285, 293, 294, 297, 311, 312, 314, 317, 318, 329, 333, 334, 393, 396, 398, 400, 401, 402, 422, 424, 430, 433, 436, 439, 440, 443, 445, 451, 463, 503, 504, 505, 507, 508, 509, 510, 511, 512, 513, 514, 515, 517, 518, 519], "e": [45, 50, 60, 61, 107, 109, 111, 112, 122, 131, 145, 166, 167, 178, 186, 191, 210, 219, 235, 269, 270, 277, 281, 283, 285, 291, 293, 294, 297, 302, 304, 311, 312, 314, 317, 318, 393, 396, 398, 400, 401, 402, 422, 424, 430, 433, 436, 439, 440, 445, 451, 463, 491, 494, 495, 503, 504, 505, 507, 508, 509, 510, 511, 513, 514, 515, 516, 517, 518, 519], "one": [45, 50, 60, 61, 64, 65, 75, 76, 77, 78, 89, 90, 93, 94, 108, 109, 115, 118, 121, 122, 123, 125, 126, 127, 130, 131, 133, 145, 167, 168, 178, 186, 193, 195, 219, 248, 249, 250, 251, 263, 329, 330, 369, 372, 375, 376, 422, 430, 431, 435, 437, 444, 445, 451, 455, 456, 460, 462, 498, 499, 501, 503, 504, 505, 506, 507, 511, 512, 523], "torch": [45, 50, 57, 109, 113, 118, 119, 121, 122, 123, 124, 125, 126, 128, 130, 131, 132, 133, 145, 164, 165, 186, 203, 204, 219, 260, 329, 381, 451, 455, 523], "tensorflow": [45, 50, 57, 60, 61, 109, 110, 123, 124, 125, 126, 128, 133, 145, 523], "mxnet": [45, 50, 60, 110, 123, 124, 125, 128, 133, 523], "either": [45, 50, 57, 64, 65, 108, 109, 111, 114, 115, 118, 119, 122, 123, 124, 128, 130, 131, 145, 167, 173, 269, 273, 277, 298, 302, 303, 305, 306, 313, 318, 320, 321, 326, 329, 344, 365, 369, 370, 422, 430, 467, 468, 469, 470, 511, 516, 518, 544, 555, 556, 557], "doesn": [45, 50, 108, 111, 115, 123, 128, 145], "matter": [45, 50, 59, 115], "been": [45, 50, 109, 114, 118, 119, 122, 123, 124, 126, 128, 144, 145, 219, 238, 329, 345, 346, 347, 491, 492], "ivy_np": [45, 50], "ivy_jax": [45, 50], "subsequ": [45, 51, 108, 115, 117, 118, 121, 125, 126, 132], "call": [45, 51, 57, 60, 66, 67, 111, 113, 114, 115, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 128, 130, 131, 132, 133, 145, 219, 263, 329, 374, 379, 390, 393, 397, 471, 472, 477, 481, 482, 544, 555, 556, 557, 560, 564], "ndarrai": [45, 51, 121, 123, 124, 125, 126, 130, 167, 169, 179, 329, 388], "Or": [45, 51, 131], "jaxlib": [45, 51, 108, 123, 124, 126, 130], "xla_extens": [45, 51, 123, 124, 126, 130], "devicearrai": [45, 51, 130], "try_import_ivy_jax": 45, "warn": [45, 52, 53, 54, 55, 56], "try_import_ivy_mxnet": 45, "try_import_ivy_numpi": 45, "try_import_ivy_tf": 45, "try_import_ivy_torch": 45, "unset_backend": [45, 119], "unset": [45, 57, 119, 128, 130], "adjust": [45, 57, 511, 517, 519], "previous": [45, 57, 108, 111, 117, 118, 128, 329, 336], "implement": [45, 57, 109, 110, 114, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 128, 130, 131, 132, 133, 144, 145, 186, 192, 210, 219, 264, 269, 270, 271, 272, 274, 275, 276, 277, 286, 287, 291, 292, 302, 303, 304, 305, 313, 317, 318, 321, 322, 326, 422, 427, 503, 504, 505, 507, 508, 509, 510, 511, 513, 514, 515, 523], "wa": [45, 57, 60, 64, 65, 115, 128, 130, 329, 390, 471, 484, 511, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522], "last": [45, 57, 61, 64, 65, 109, 115, 119, 145, 156, 161, 219, 238, 409, 419, 422, 424, 426, 431, 443, 444, 447, 449, 450, 451, 456, 460, 461, 463, 508, 509, 510, 520, 521, 522, 544, 554], "henc": [45, 57, 503, 504, 505, 507], "here": [45, 57, 108, 109, 110, 113, 115, 122, 126, 128, 129, 130, 131, 132, 133, 144, 145], "tensor": [45, 57, 59, 64, 65, 113, 118, 119, 121, 123, 124, 125, 126, 128, 130, 131, 132, 133, 145, 167, 176, 177, 186, 200, 269, 279, 311, 312, 329, 372, 375, 376, 409, 417, 419, 422, 442, 451, 455, 459, 461, 491, 492, 498, 501, 523, 544, 552, 554], "howev": [45, 57, 60, 108, 110, 114, 117, 118, 119, 121, 122, 123, 124, 125, 126, 130, 131, 132, 133, 145], "befor": [45, 57, 64, 65, 108, 109, 110, 114, 117, 121, 123, 124, 125, 128, 131, 145, 219, 263, 269, 328, 409, 420, 421, 467, 468, 469, 471, 483, 503, 504, 505, 507, 511, 516, 518], "becom": [45, 57, 59, 61, 109, 115, 122, 128, 133, 145, 451, 452], "swap": [45, 57, 451, 464], "python": [45, 57, 58, 59, 60, 108, 109, 111, 128, 130, 131, 145, 167, 168, 219, 258, 268, 269, 318, 523, 529], "op": [45, 57, 113, 128, 145], "eagertensor": [45, 57], "def": [46, 110, 113, 115, 118, 122, 123, 124, 125, 126, 128, 130, 131, 132, 133, 187, 188, 189, 220, 227, 230, 394, 523, 536, 539, 542], "ml": [58, 60, 61, 107, 127, 128, 129, 131, 132, 133, 144, 523, 529], "explos": [58, 60, 523], "A": [58, 59, 60, 61, 64, 65, 66, 67, 68, 111, 112, 117, 118, 122, 123, 124, 128, 131, 145, 167, 172, 179, 219, 228, 229, 263, 269, 316, 327, 329, 355, 387, 422, 435, 438, 439, 440, 451, 461, 463, 471, 472, 474, 476, 478, 479, 480, 481, 482, 485, 486, 487, 488, 511, 512, 520, 521, 522, 523, 566, 567], "huge": [58, 60, 131, 523], "number": [58, 59, 64, 65, 66, 67, 68, 108, 115, 122, 124, 125, 128, 131, 133, 164, 165, 166, 167, 168, 169, 172, 176, 177, 178, 179, 186, 193, 201, 202, 205, 207, 208, 210, 219, 255, 256, 257, 269, 273, 277, 285, 293, 294, 311, 312, 313, 317, 318, 319, 320, 328, 329, 330, 350, 355, 356, 371, 389, 392, 409, 420, 422, 427, 433, 438, 440, 444, 451, 452, 454, 457, 458, 460, 461, 463, 465, 466, 467, 468, 469, 470, 491, 492, 496, 498, 501, 503, 504, 505, 511, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 544, 545, 546, 547, 548, 549, 550, 551, 553, 554, 555], "tool": [58, 61, 109, 129, 133, 144, 145, 523], "have": [58, 59, 60, 61, 64, 65, 108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 128, 129, 130, 131, 132, 133, 144, 145, 156, 159, 167, 168, 170, 171, 174, 175, 178, 180, 181, 182, 183, 184, 185, 186, 192, 193, 194, 202, 219, 264, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 313, 314, 315, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 328, 329, 338, 345, 346, 347, 349, 393, 399, 407, 409, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 433, 434, 435, 436, 437, 439, 440, 441, 442, 443, 444, 445, 447, 448, 449, 450, 451, 452, 453, 455, 456, 457, 458, 460, 462, 463, 464, 491, 493, 497, 498, 499, 500, 501, 503, 504, 505, 507, 508, 509, 510, 511, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523], "explod": [58, 59, 523], "onto": [58, 59, 219, 248, 249, 471, 477, 483, 523], "scene": [58, 59, 112, 127, 129, 393, 396, 398, 400, 401, 402, 523], "b": [58, 61, 66, 67, 75, 76, 77, 78, 89, 90, 93, 94, 107, 112, 115, 118, 119, 122, 127, 128, 129, 131, 132, 133, 143, 219, 241, 269, 273, 274, 279, 284, 285, 287, 293, 296, 314, 319, 323, 324, 326, 329, 330, 333, 334, 340, 341, 348, 351, 389, 409, 412, 415, 416, 421, 422, 423, 424, 425, 435, 439, 442, 446, 447, 448, 451, 452, 455, 456, 458, 460, 463, 464, 489, 490, 491, 494, 495, 498, 500, 501, 502, 508, 509, 511, 512, 513, 520, 521, 523, 529], "why": [58, 60, 109, 122, 125, 126, 130, 523], "unifi": [58, 60, 64, 65, 121, 128, 145, 219, 248, 249, 250, 251, 263, 523], "should": [58, 60, 64, 65, 66, 67, 68, 105, 106, 108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 130, 131, 132, 164, 165, 167, 178, 182, 183, 186, 194, 219, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 291, 292, 293, 297, 298, 299, 300, 302, 303, 305, 306, 307, 308, 309, 310, 313, 315, 317, 318, 320, 321, 322, 323, 324, 325, 326, 328, 329, 336, 363, 372, 393, 396, 398, 400, 401, 402, 409, 421, 422, 423, 424, 425, 426, 429, 430, 433, 435, 436, 437, 439, 440, 442, 443, 444, 445, 451, 459, 491, 497, 498, 499, 500, 503, 504, 505, 507, 511, 512, 513, 514, 516, 517, 518, 519, 523], "them": [58, 59, 60, 61, 117, 119, 121, 122, 128, 130, 131, 132, 145, 523], "c": [58, 60, 61, 93, 94, 107, 112, 115, 118, 122, 127, 128, 129, 131, 145, 329, 333, 334, 340, 389, 393, 395, 396, 398, 400, 401, 402, 409, 415, 451, 463, 498, 501, 511, 512, 517, 519, 523, 529], "standard": [58, 112, 113, 114, 116, 117, 121, 125, 126, 145, 167, 178, 186, 202, 269, 273, 274, 279, 284, 285, 287, 293, 319, 323, 324, 326, 422, 425, 451, 455, 456, 460, 489, 490, 491, 494, 503, 504, 505, 508, 509, 511, 513, 517, 519, 520, 521, 523, 529, 558, 559], "re": [58, 59, 60, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 130, 133, 145, 219, 263, 329, 345, 422, 442, 451, 460, 498, 502, 523], "collabor": [58, 59, 60, 523], "consortium": [58, 60, 523, 529], "data": [58, 60, 64, 65, 66, 67, 68, 112, 113, 114, 118, 120, 122, 124, 125, 126, 130, 167, 168, 169, 170, 171, 172, 173, 174, 175, 178, 179, 180, 181, 182, 183, 184, 185, 190, 191, 192, 194, 195, 196, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 214, 218, 219, 221, 222, 223, 224, 225, 226, 231, 232, 233, 235, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 305, 306, 307, 308, 309, 310, 313, 315, 317, 318, 320, 321, 322, 323, 324, 325, 326, 328, 329, 333, 334, 365, 366, 368, 385, 393, 399, 407, 409, 418, 422, 423, 424, 425, 426, 427, 428, 429, 430, 433, 434, 435, 436, 437, 439, 440, 442, 443, 444, 445, 451, 455, 456, 457, 459, 460, 462, 463, 491, 497, 498, 499, 500, 501, 508, 509, 511, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 529, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555], "api": [58, 59, 108, 109, 112, 114, 115, 117, 118, 120, 121, 123, 124, 125, 126, 127, 129, 131, 145, 167, 178, 269, 273, 274, 279, 284, 285, 287, 293, 319, 323, 324, 326, 422, 425, 451, 455, 456, 460, 503, 504, 505, 508, 509, 511, 513, 520, 521, 523, 529], "open": [59, 60, 61, 107, 108, 111, 114, 144, 167, 168, 491, 493, 495, 523], "project": [59, 60, 61, 108, 109, 111, 113, 119, 130, 132, 144, 145, 491, 492, 494, 495], "grown": 59, "consider": [59, 115, 126], "recent": [59, 60, 108, 109], "year": [59, 61, 145, 523], "especi": [59, 108], "deep": [59, 64, 65, 107, 109, 110, 127, 131, 523], "learn": [59, 60, 108, 110, 112, 118, 127, 133, 144, 269, 295, 393, 396, 398, 400, 401, 402, 467, 468, 469, 470, 523, 560, 561, 562, 563, 564, 565], "can": [59, 60, 61, 107, 108, 109, 112, 113, 114, 115, 116, 117, 118, 119, 122, 123, 124, 125, 126, 127, 128, 130, 131, 132, 133, 144, 145, 167, 169, 179, 186, 195, 219, 261, 262, 263, 422, 429, 451, 459, 491, 493, 523, 529], "seen": [59, 60, 115, 130, 131], "rapidli": 59, "increas": [59, 219, 243, 247, 251, 451, 454, 466, 471, 483], "github": [59, 109, 110, 114, 117], "repo": [59, 60, 61, 108, 109, 116, 128, 130, 131, 132, 133, 144, 523, 529], "term": [59, 109, 122, 409, 419, 544, 554], "time": [59, 60, 61, 108, 109, 110, 117, 118, 122, 123, 126, 128, 131, 133, 145, 393, 396, 400, 409, 419, 451, 465, 467, 468, 469, 470, 498, 499, 500, 503, 504, 505, 544, 555, 556, 557], "These": [59, 60, 61, 109, 114, 115, 117, 118, 122, 123, 125, 126, 128, 129, 131, 132, 133, 145, 422, 427, 523, 529], "written": [59, 108, 113, 114, 121, 125, 126, 128, 130, 133, 145], "mani": [59, 60, 61, 64, 65, 108, 109, 110, 114, 115, 118, 120, 121, 122, 123, 124, 125, 126, 128, 130, 131, 145, 451, 461], "differ": [59, 60, 61, 64, 65, 66, 67, 68, 108, 109, 112, 113, 114, 115, 117, 118, 121, 122, 124, 125, 126, 128, 129, 130, 131, 132, 133, 145, 186, 202, 219, 240, 241, 244, 245, 269, 273, 313, 325, 409, 418, 451, 463, 511, 516, 518, 523], "while": [59, 60, 64, 65, 66, 67, 68, 108, 109, 115, 119, 125, 132, 133, 145, 269, 308, 309, 503, 504, 511, 514], "wonder": [59, 61, 130], "thing": [59, 60, 61, 108, 109, 110, 119, 130, 131], "research": [59, 144], "develop": [59, 60, 61, 107, 108, 109, 110, 144, 145, 523], "consid": [59, 60, 64, 65, 113, 118, 129, 130, 131, 269, 308, 309, 503, 504, 505, 507], "speed": 59, "evolv": 59, "sharabl": 59, "code": [59, 60, 61, 64, 65, 66, 67, 68, 108, 109, 110, 111, 112, 114, 115, 118, 119, 120, 121, 122, 125, 126, 127, 128, 129, 130, 131, 132, 133, 143, 145, 156, 158, 159, 160, 161, 162, 163, 219, 241, 264, 269, 284, 324, 409, 415, 416, 503, 504, 505, 508, 509, 511, 512, 523, 529], "significantli": 59, "hinder": [59, 126], "librari": [59, 60, 61, 128, 133, 143, 145, 219, 264, 269, 292, 308, 309, 422, 427, 503, 504, 505, 507, 511, 513, 514, 515, 523], "outdat": 59, "month": 59, "rigor": 59, "maintain": [59, 109, 145, 508, 509, 510], "against": [59, 64, 65, 117, 145, 186, 193, 422, 430, 431, 433, 436, 498, 499], "newest": 59, "version": [59, 60, 61, 108, 114, 128, 130, 422, 427, 523], "For": [59, 60, 61, 108, 109, 110, 111, 112, 113, 114, 115, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 128, 130, 131, 132, 133, 144, 145, 167, 168, 178, 269, 270, 271, 272, 273, 274, 275, 276, 277, 285, 286, 287, 291, 292, 293, 302, 303, 305, 306, 313, 317, 318, 319, 321, 322, 323, 326, 328, 393, 399, 407, 422, 440, 443, 451, 452, 463, 503, 504, 505, 507, 511, 513, 515, 518, 533, 534], "softwar": [59, 60, 108, 109], "pipelin": [59, 121, 133], "where": [59, 60, 61, 64, 65, 66, 67, 107, 108, 109, 110, 111, 114, 118, 119, 121, 122, 123, 124, 125, 128, 131, 132, 133, 145, 167, 174, 175, 178, 269, 277, 291, 304, 313, 317, 329, 359, 363, 372, 422, 427, 433, 436, 437, 440, 441, 443, 444, 451, 452, 454, 455, 457, 463, 466, 471, 472, 482, 491, 492, 498, 501, 511, 517, 519, 520, 521, 522, 523], "rapid": [59, 60, 108], "prototyp": 59, "vital": [59, 133], "signific": [59, 60, 145], "bottleneck": 59, "new": [59, 60, 61, 64, 65, 107, 108, 109, 110, 111, 112, 113, 114, 115, 117, 120, 122, 123, 125, 127, 130, 133, 144, 167, 170, 173, 174, 175, 180, 181, 184, 185, 186, 214, 269, 278, 304, 316, 327, 329, 345, 346, 347, 350, 351, 352, 375, 376, 377, 378, 383, 384, 393, 396, 398, 400, 401, 402, 451, 455, 459, 463, 471, 476, 487, 488, 489, 490, 523, 533, 534, 544, 554, 558, 559, 560, 561, 562, 563, 564, 565], "futur": [59, 61, 108, 109, 130, 145, 422, 427], "avail": [59, 64, 65, 108, 109, 114, 124, 145, 219, 238, 254, 255, 256, 266, 329, 346], "specif": [59, 64, 65, 110, 118, 121, 122, 123, 124, 125, 126, 128, 129, 130, 132, 133, 144, 145, 186, 210, 219, 261, 264, 269, 308, 309, 329, 345, 346, 347, 370, 422, 427, 442, 451, 463, 467, 468, 469, 470, 491, 492, 511, 513, 514, 515, 523, 526, 528, 529, 556, 557], "quickli": [59, 61, 108, 109, 131, 132], "obsolet": [59, 61], "user": [59, 60, 108, 109, 111, 112, 117, 119, 122, 125, 127, 145, 544, 555, 556, 557], "constantli": 59, "invent": 59, "wheel": 59, "desir": [59, 64, 65, 186, 192, 195, 219, 264, 329, 359, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555], "provid": [59, 64, 65, 108, 109, 114, 115, 118, 121, 122, 123, 124, 125, 126, 128, 132, 144, 145, 164, 165, 167, 178, 186, 197, 198, 199, 206, 210, 218, 219, 238, 329, 344, 372, 376, 393, 396, 398, 400, 401, 402, 422, 444, 451, 456, 463, 498, 499, 511, 517, 519, 520, 521, 522, 544, 545, 546, 547, 548, 549, 550, 551, 553, 554, 555, 560, 561, 562, 563, 564, 565], "simultan": [59, 61], "modern": [59, 60], "simpl": [59, 108, 109, 113, 114, 115, 117, 118, 121, 122, 123, 124, 125, 128, 130, 132, 133, 145, 329, 348], "scalabl": [59, 128], "must": [59, 61, 64, 65, 66, 67, 68, 108, 109, 110, 113, 114, 115, 118, 121, 122, 123, 124, 126, 128, 132, 133, 156, 159, 167, 168, 170, 171, 172, 174, 175, 178, 180, 181, 182, 183, 184, 185, 186, 192, 193, 194, 219, 248, 249, 250, 251, 263, 264, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 328, 329, 338, 349, 376, 422, 423, 424, 425, 426, 427, 428, 429, 430, 433, 434, 435, 436, 437, 439, 440, 442, 443, 444, 445, 447, 448, 449, 450, 451, 452, 453, 455, 456, 457, 458, 460, 462, 463, 464, 491, 493, 496, 498, 499, 500, 501, 503, 504, 505, 507, 508, 509, 510, 511, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 560, 564], "determin": [59, 64, 65, 114, 118, 122, 123, 124, 186, 195, 196, 201, 206, 207, 208, 218, 219, 254, 255, 256, 266, 269, 271, 272, 273, 274, 275, 276, 277, 278, 279, 281, 282, 283, 284, 286, 287, 288, 291, 292, 297, 298, 299, 302, 303, 305, 306, 310, 313, 317, 318, 321, 322, 323, 326, 329, 330, 333, 334, 358, 360, 364, 365, 366, 367, 368, 385, 392, 393, 399, 409, 420, 422, 423, 424, 425, 426, 429, 430, 433, 435, 436, 438, 439, 443, 444, 445, 467, 468, 469, 470, 503, 504, 505, 507, 520, 521, 522], "exactli": [59, 61, 115, 122, 124, 523, 529], "common": [59, 64, 65, 109, 110, 115, 118, 120, 122, 124, 145], "ground": [59, 117], "li": 59, "between": [59, 64, 65, 66, 67, 68, 115, 117, 118, 121, 122, 126, 127, 129, 130, 131, 133, 144, 167, 168, 186, 202, 269, 277, 317, 447, 448, 449, 450, 451, 455, 463, 471, 477, 491, 493, 503, 504, 505, 507, 523, 560, 562], "find": [59, 64, 65, 108, 109, 128, 131, 503, 504, 505, 507, 523], "exist": [59, 60, 64, 65, 66, 67, 108, 110, 111, 114, 115, 116, 117, 118, 119, 120, 125, 128, 145, 329, 344, 560, 564], "essenti": [59, 60, 110, 115, 118, 124], "order": [59, 64, 65, 66, 67, 68, 108, 109, 111, 114, 115, 119, 121, 122, 123, 124, 126, 130, 131, 133, 145, 269, 277, 393, 396, 398, 400, 401, 402, 422, 427, 431, 440, 441, 445, 451, 456, 467, 468, 469, 498, 501, 503, 504, 505, 507, 508, 509, 510, 566, 567], "design": [59, 60, 112, 125, 128, 130, 145], "univers": 59, "abstract": [59, 122, 132, 145, 219, 234, 560, 564], "In": [59, 61, 108, 109, 113, 114, 115, 118, 119, 122, 123, 124, 125, 126, 128, 130, 131, 132, 133, 144, 145, 219, 258, 264, 265, 268, 269, 273, 313, 318, 329, 331, 363, 451, 459, 491, 495, 523], "languag": [59, 61, 128], "first": [59, 60, 108, 109, 111, 115, 118, 121, 122, 126, 128, 130, 131, 133, 164, 165, 167, 176, 177, 186, 209, 214, 219, 238, 250, 269, 273, 279, 281, 282, 283, 284, 289, 294, 296, 300, 301, 306, 307, 309, 310, 313, 315, 317, 325, 329, 333, 393, 397, 422, 424, 426, 427, 430, 435, 437, 440, 442, 444, 451, 453, 460, 463, 464, 467, 468, 469, 470, 471, 472, 481, 482, 491, 497, 498, 499, 500, 503, 504, 505, 544, 555, 556, 557, 560, 564], "see": [59, 107, 108, 109, 110, 116, 118, 122, 124, 126, 130, 131, 144, 145, 167, 168, 173, 176, 177, 186, 194, 210, 269, 273, 279, 281, 282, 283, 284, 288, 292, 300, 306, 309, 310, 313, 315, 317, 318, 325, 422, 433, 436, 439, 444, 445, 498, 500, 503, 504, 505, 507, 511, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523], "clear": [59, 60, 61, 109, 110, 115, 117, 123, 124, 128, 130, 219, 237], "front": [59, 127, 128, 131, 523, 529], "runner": 59, "look": [59, 108, 109, 111, 113, 115, 118, 119, 122, 123, 124, 126, 128, 130, 132, 133, 523], "littl": [59, 130], "deeper": [59, 109, 112, 127, 219, 243, 247, 251, 471, 482, 483], "follow": [59, 60, 64, 65, 108, 109, 110, 111, 113, 114, 115, 117, 119, 121, 122, 123, 124, 125, 127, 128, 130, 131, 132, 133, 145, 186, 205, 219, 263, 269, 318, 329, 361, 362, 363, 383, 384, 393, 396, 398, 400, 401, 402, 409, 420, 421, 422, 437, 445, 471, 477, 483, 503, 504, 505, 507, 523, 544, 554, 560, 564], "core": [59, 108, 110, 124, 128, 133, 219, 255, 523], "principl": 59, "oper": [59, 64, 65, 66, 67, 108, 110, 114, 115, 118, 121, 122, 124, 125, 131, 132, 167, 176, 177, 186, 210, 269, 273, 283, 284, 296, 314, 318, 324, 329, 335, 345, 346, 347, 385, 393, 396, 398, 400, 401, 402, 409, 410, 411, 412, 413, 414, 415, 416, 418], "expos": [59, 128, 132, 329, 339], "almost": [59, 109, 122, 129, 131], "ident": [59, 61, 64, 65, 118, 120, 122, 130, 131, 145, 219, 253, 471, 484, 523], "uniqu": [59, 118, 122, 145, 219, 228, 229, 467, 468, 469, 470, 471, 477, 503, 504, 505, 506, 507], "syntax": [59, 60], "There": [59, 108, 109, 115, 118, 121, 122, 123, 128, 131, 145], "onli": [59, 64, 65, 107, 108, 109, 113, 115, 117, 118, 119, 121, 122, 123, 124, 125, 126, 128, 130, 131, 132, 133, 143, 145, 219, 259, 269, 308, 309, 422, 430, 437, 451, 456, 471, 472, 473, 481, 482, 498, 499, 500, 511, 514, 523, 560, 561, 562, 563, 564, 565], "wai": [59, 60, 108, 119, 125, 130, 131, 132, 133, 145], "unsurprisingli": [59, 115], "fundament": [59, 122, 128], "consist": [59, 64, 65, 121, 125, 219, 251, 422, 427, 511, 512, 556, 557], "each": [59, 60, 61, 64, 65, 66, 67, 68, 109, 110, 112, 113, 114, 115, 116, 117, 118, 120, 121, 122, 123, 125, 126, 127, 128, 130, 131, 133, 144, 145, 156, 159, 160, 162, 167, 178, 186, 193, 219, 228, 229, 240, 241, 242, 243, 244, 245, 246, 250, 263, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 328, 329, 330, 393, 396, 398, 400, 401, 402, 409, 410, 411, 412, 413, 414, 415, 416, 417, 422, 423, 424, 425, 427, 430, 433, 434, 436, 439, 440, 451, 454, 458, 460, 461, 463, 465, 466, 471, 477, 484, 491, 492, 498, 501, 503, 504, 505, 511, 512, 523, 529, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 555, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567], "veri": [59, 60, 108, 109, 113, 115, 117, 118, 122, 124, 125, 126, 129, 131, 132, 133, 145, 523], "similar": [59, 113, 122, 123, 124, 131, 145, 269, 318, 409, 420, 544, 555], "convent": [59, 144, 422, 430, 511, 512], "those": [59, 64, 65, 108, 109, 110, 122, 128, 133, 167, 168, 393, 407, 422, 437, 440, 451, 452], "introduc": [59, 122, 131, 451, 460, 503, 504], "2006": 59, "therefor": [59, 109, 113, 114, 115, 116, 117, 118, 121, 122, 123, 124, 125, 126, 128, 130, 132, 145, 269, 273, 274, 285, 293, 323, 324, 326, 329, 351, 409, 412, 421, 451, 460, 489, 490, 511, 513, 520, 521], "present": [59, 64, 65, 109, 116, 122, 123, 124, 125, 126, 128], "itself": [59, 108, 109, 122, 125, 126, 132, 144, 145, 329, 331, 471, 483], "cut": 59, "cloth": 59, "adher": [59, 60, 114, 116, 128, 133], "semant": [59, 128, 133, 269, 318], "up": [59, 60, 61, 107, 109, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 128, 129, 130, 131, 132, 133, 144, 145], "hopefulli": [59, 60, 61, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 128, 130, 131, 132, 133, 144], "paint": [59, 128], "pictur": [59, 128], "how": [59, 61, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 129, 130, 131, 132, 133, 144, 145, 523, 529, 544, 555, 556, 557], "pleas": [59, 60, 61, 108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 128, 130, 131, 132, 133, 144, 523], "discuss": [59, 60, 61, 107, 108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 128, 130, 131, 132, 133, 144, 145, 523], "faq": [59, 60, 61, 128, 130, 131, 132, 133, 144], "reach": [59, 60, 61, 108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 128, 130, 131, 132, 133, 144, 219, 243, 247, 251, 471, 483], "discord": [59, 60, 61, 108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 128, 130, 131, 132, 133, 144, 523], "you": [59, 60, 61, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 130, 131, 132, 133, 144, 145, 523, 529], "question": [59, 60, 61, 108, 109, 115, 117, 128, 130, 131, 132, 133, 144, 145, 523], "central": 60, "goal": [60, 110], "being": [60, 61, 64, 65, 108, 109, 115, 117, 120, 121, 122, 123, 124, 125, 126, 128, 131, 144, 145, 167, 168, 329, 374, 379, 503, 506, 523], "would": [60, 108, 109, 111, 112, 114, 115, 117, 119, 120, 121, 122, 125, 126, 127, 128, 130, 132, 133, 145, 156, 161, 219, 264, 523], "entir": [60, 61, 64, 65, 109, 115, 116, 117, 121, 122, 125, 130, 131, 132, 133, 145, 219, 263, 511, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 544, 553], "forgiven": 60, "rais": [60, 64, 65, 109, 125, 128, 130, 186, 194, 269, 291, 317, 329, 335, 354, 363, 377, 384, 390, 422, 430, 432, 444, 451, 462, 463, 498, 501, 511, 513, 515, 520, 521, 522, 556, 557, 560, 564], "eyebrow": 60, "somehow": 60, "pytorch": [60, 61, 110, 118, 123, 124, 125, 126, 128, 130, 133, 145, 393, 396, 398, 400, 401, 402, 523, 560, 561, 562, 563, 564, 565], "other": [60, 64, 65, 66, 67, 108, 109, 113, 114, 115, 117, 118, 121, 122, 125, 128, 130, 132, 133, 143, 144, 145, 164, 165, 167, 168, 269, 292, 329, 330, 331, 393, 397, 491, 495, 503, 506, 511, 517, 519, 523], "strong": [60, 145], "industri": 60, "back": [60, 121, 127, 128, 130, 145, 523, 529, 556, 557, 560, 564], "momentum": 60, "won": [60, 61, 109, 133], "ad": [60, 105, 106, 108, 109, 110, 113, 114, 115, 117, 118, 120, 121, 122, 123, 125, 126, 128, 132, 145, 329, 383, 384, 422, 427, 451, 455, 566, 567], "just": [60, 61, 108, 109, 114, 115, 117, 118, 125, 128, 130, 131, 145, 511, 512, 544, 553], "make": [60, 61, 108, 109, 110, 113, 114, 115, 116, 117, 118, 121, 122, 123, 124, 125, 126, 128, 130, 131, 133, 219], "problem": [60, 109, 121, 130], "even": [60, 61, 108, 109, 114, 118, 123, 124, 126, 130, 131, 132, 133, 145, 269, 317, 319], "wors": 60, "rather": [60, 64, 65, 113, 114, 117, 122, 133, 145, 167, 168, 219, 263, 329, 365, 366, 368, 393, 399], "funni": 60, "comic": 60, "strip": 60, "easi": [60, 108, 109, 118, 122], "feasibl": 60, "space": [60, 167, 168, 176, 177, 329, 350], "unlik": [60, 115, 122, 219], "charger": 60, "charact": 60, "encod": [60, 131, 329, 350], "instant": [60, 523], "messag": [60, 109, 128, 130, 569, 570], "much": [60, 109, 113, 121, 122, 125, 128, 130, 131], "doe": [60, 64, 65, 109, 111, 112, 113, 114, 115, 117, 118, 119, 123, 125, 126, 128, 130, 131, 145, 269, 284, 329, 363, 451, 461], "mandat": [60, 117, 125], "adopt": [60, 109, 121], "continu": [60, 61, 116, 117, 145], "own": [60, 61, 108, 114, 128, 145], "signatur": [60, 113, 114, 115, 122, 123, 124, 125, 126, 269, 274, 284, 285, 287, 293, 323, 324, 451, 455, 460, 503, 504, 505, 508, 509, 511, 513], "replac": [60, 64, 65, 109, 111, 115, 117, 120, 122, 123, 124, 128, 130, 133, 145, 329, 375, 376, 451, 452, 491, 492], "your": [60, 61, 107, 108, 110, 111, 113, 114, 131, 132, 145, 523], "10": [60, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 108, 111, 115, 122, 128, 130, 131, 167, 174, 177, 219, 269, 279, 280, 287, 296, 303, 323, 329, 341, 351, 374, 379, 393, 400, 409, 415, 422, 425, 426, 435, 442, 451, 456, 458, 461, 489, 490, 491, 492, 493, 498, 501, 503, 504, 511, 512, 513, 560, 562], "100": [60, 61, 93, 94, 131, 132, 133, 145, 269, 323, 523], "despit": [60, 122, 124], "distinct": [60, 114, 122, 125, 127, 503, 504, 505, 507, 523], "still": [60, 64, 65, 114, 117, 123, 130, 132, 145, 523], "believ": [60, 109], "share": [60, 64, 65, 115, 117, 118, 119, 122, 128, 186, 214], "bring": [60, 128, 129], "benefit": [60, 61, 108, 109, 121, 122, 125, 130, 131, 145], "unrel": [60, 109], "what": [60, 61, 109, 112, 114, 115, 120, 122, 126, 127, 128, 130, 131, 132, 133, 144, 145, 523], "again": [60, 61, 109, 113, 115, 122, 125, 131, 133, 145], "contrari": 60, "bumpi": 60, "road": 60, "allud": [60, 131], "most": [60, 64, 65, 108, 109, 113, 117, 118, 121, 122, 123, 124, 125, 126, 128, 130, 131, 132, 145, 422, 427], "technolog": 60, "sector": [60, 269, 272, 275, 278], "full": [60, 61, 66, 67, 109, 114, 123, 126, 128, 145, 167, 186, 202, 269, 296, 409, 415, 422, 437, 439, 440, 489, 490], "success": 60, "reason": [60, 109, 113, 115, 118, 121, 122, 123, 125, 128, 130, 269, 318], "build": [60, 107, 108, 118, 127, 129, 132, 133, 145, 503, 504, 505, 507, 523, 544, 555, 556, 557], "custom": [60, 132], "comput": [60, 61, 64, 65, 108, 118, 122, 128, 131, 145, 219, 263, 269, 273, 279, 282, 284, 289, 290, 295, 296, 300, 301, 307, 308, 309, 310, 313, 314, 315, 329, 337, 338, 341, 342, 393, 395, 396, 397, 398, 400, 401, 402, 404, 406, 409, 410, 411, 412, 413, 414, 415, 416, 418, 420, 422, 423, 424, 427, 428, 429, 430, 431, 437, 438, 439, 440, 444, 445, 447, 448, 449, 450, 471, 477, 503, 504, 505, 507, 511, 512, 513, 514, 515, 516, 517, 518, 519], "thank": [60, 131], "interoper": 60, "compon": [60, 128], "bio": [60, 108], "hardwar": [60, 108], "initi": [60, 64, 65, 66, 67, 68, 109, 119, 123, 124, 219, 409, 419, 537, 538, 540, 541, 543, 544, 545, 546, 547, 548, 549, 550, 551, 553, 554, 555, 556, 557, 560, 564], "pcie": 60, "interfac": [60, 133, 145], "motherboard": 60, "raid": 60, "storag": [60, 131], "virtual": [60, 109, 111], "bluetooth": 60, "wireless": 60, "exchang": 60, "btx": 60, "factor": [60, 219, 228, 261, 262, 263, 393, 395, 396, 400, 401, 409, 410, 411, 412, 413, 414, 415, 416, 422, 423, 544, 545, 546, 547, 548, 549, 550, 551, 560, 561, 562, 563], "sata": 60, "connect": [60, 108, 132, 133, 544, 554, 555], "host": [60, 145], "bu": 60, "adapt": [60, 393, 401, 560, 563], "html": [60, 111, 114, 269, 274, 284, 285, 287, 293, 323, 324, 451, 455, 460, 503, 504, 505, 508, 509, 511, 513], "enabl": [60, 64, 65, 66, 67, 68, 108, 109, 117, 118, 121, 122, 125, 127, 128, 129, 131, 133, 145], "anyon": [60, 107, 145], "websit": 60, "tcp": 60, "ip": 60, "node": [60, 64, 65, 122, 471, 472, 481, 482], "commun": [60, 107, 109, 110, 145, 523, 529], "network": [60, 118, 122, 128, 132, 144, 409, 418, 523, 530, 544, 556, 557], "smtp": 60, "possibl": [60, 107, 108, 109, 110, 114, 115, 117, 122, 123, 125, 128, 131, 144, 145, 329, 369, 387, 511, 513, 515], "send": 60, "gmail": 60, "outlook": 60, "pop": 60, "email": 60, "ieee": [60, 166, 186, 202, 269, 273, 292, 313, 318, 323], "754": [60, 166, 186, 202, 269, 273, 292, 313, 318, 323], "allow": [60, 128, 145, 167, 176, 177, 329, 369, 556, 557], "calcul": [60, 64, 65, 66, 67, 68, 114, 269, 270, 271, 272, 273, 274, 275, 276, 277, 286, 287, 288, 291, 292, 302, 303, 304, 305, 306, 313, 317, 321, 322, 323, 325, 326, 447, 448, 449, 450, 511, 513, 514, 515, 516, 517, 518, 519], "live": [60, 61], "depend": [60, 108, 109, 114, 120, 122, 123, 128, 145, 186, 192, 269, 270, 271, 272, 274, 275, 276, 277, 286, 287, 291, 292, 302, 303, 304, 305, 317, 321, 322, 326, 422, 427, 437, 439, 440, 498, 502, 508, 509, 510], "did": [60, 110, 133], "aris": [60, 145], "until": [60, 109, 145, 523], "substanti": [60, 109, 117, 121], "innov": 60, "growth": 60, "usag": [60, 128, 219, 263], "relev": [60, 108, 110, 115, 122, 123, 131, 560, 561, 562, 563, 564, 565], "area": [60, 125, 143, 269, 272, 275, 278, 523], "necess": 60, "parti": [60, 145], "could": [60, 61, 108, 109, 115, 117, 122, 123, 125, 128, 130, 131, 132, 503, 504, 505, 507], "easili": [60, 109, 131, 132, 133, 145, 523], "engag": [60, 107, 108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126], "regard": [60, 122, 219], "effect": [60, 114, 121, 122, 126, 145, 167, 178, 393, 402, 511, 517, 519], "2015": 60, "sinc": [60, 108, 109, 145], "alongsid": 60, "machin": [60, 108, 118, 144, 186, 202, 205, 269, 295, 422, 433, 436], "given": [60, 61, 64, 65, 108, 109, 110, 111, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 128, 130, 132, 133, 144, 167, 168, 170, 176, 177, 219, 252, 258, 260, 261, 262, 263, 265, 268, 329, 341, 342, 352, 375, 376, 391, 393, 395, 396, 398, 400, 401, 402, 409, 410, 411, 412, 413, 414, 415, 416, 422, 446, 447, 448, 449, 450, 451, 452, 455, 456, 458, 460, 461, 465, 471, 478, 479, 491, 493, 494, 495, 497, 508, 510, 533, 534], "frame": [60, 144], "matur": [60, 145], "state": [60, 114, 126, 127, 128, 129, 131, 144, 269, 313, 409, 419, 523, 530, 531, 532, 533, 534, 535, 537, 538, 540, 541, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567], "than": [60, 64, 65, 109, 113, 115, 117, 122, 125, 128, 131, 132, 133, 145, 167, 168, 186, 202, 219, 263, 269, 271, 272, 274, 277, 281, 283, 285, 293, 294, 302, 303, 305, 311, 317, 318, 320, 323, 328, 329, 365, 366, 368, 393, 399, 422, 424, 430, 433, 436, 445, 451, 452, 456, 462, 491, 495, 503, 504, 505, 507, 511, 516, 517, 518, 519], "preced": [60, 132], "mention": [60, 108, 109, 115, 118, 125, 126], "aros": 60, "70": [60, 422, 435, 511, 512], "80": [60, 422, 435, 511, 512], "90": [60, 93, 94, 269, 284, 319, 422, 435, 511, 512], "effort": [60, 107, 145], "stage": [60, 107, 109, 111, 112, 523], "complet": [60, 64, 65, 109, 110, 121, 122, 130, 131, 422, 437], "natur": [60, 115, 121, 122, 144, 269, 291, 302, 304, 422, 438], "like": [60, 108, 109, 111, 112, 113, 114, 115, 117, 124, 125, 126, 127, 128, 130, 131, 132, 133, 144, 145, 393, 399, 491, 495, 523], "certainli": 60, "mission": [60, 523], "creat": [60, 64, 65, 107, 108, 109, 111, 123, 124, 125, 128, 129, 132, 143, 144, 167, 168, 169, 170, 171, 172, 174, 175, 176, 177, 179, 180, 181, 184, 185, 219, 228, 229, 329, 351, 352, 372, 375, 376, 387, 393, 406, 491, 492, 493, 495, 523, 529, 533, 534, 535, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567], "At": [60, 110], "process": [60, 61, 107, 108, 109, 111, 118, 122, 128, 133, 219, 228, 229, 258, 268], "ourselv": 60, "lead": [60, 61, 64, 65, 66, 67, 68, 145, 422, 437, 440], "quansight": 60, "compani": 60, "made": [60, 109, 110, 122, 125, 128, 130], "organ": [60, 113, 118, 121, 122], "panda": 60, "scipi": 60, "conda": [60, 108, 111], "dask": [60, 503, 504, 505, 507], "apach": 60, "onnx": 60, "scikit": 60, "jupyt": 60, "aw": 60, "cupi": 60, "net": [60, 61, 128, 133], "sympi": 60, "rai": [60, 269, 277], "modin": 60, "spyder": 60, "includ": [60, 64, 65, 109, 110, 113, 114, 115, 116, 117, 118, 119, 121, 122, 123, 124, 125, 126, 144, 145, 167, 168, 169, 179, 329, 358, 392, 422, 445, 471, 472, 491, 495, 498, 500, 511, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 526, 528, 544, 554, 555, 558, 559], "member": [60, 109], "googl": [60, 523], "octoml": 60, "einop": [60, 64, 65, 329, 345, 346, 347], "further": [60, 61, 109, 111, 115, 121, 127, 131, 132, 523], "sponsor": 60, "lg": 60, "electron": 60, "microsoft": 60, "d": [60, 61, 93, 94, 107, 108, 112, 122, 131, 329, 334, 340, 409, 410, 411, 412, 413, 414, 415, 416, 422, 426, 435, 523, 529], "shaw": 60, "intel": 60, "togeth": [60, 64, 65, 121, 122, 132, 133, 145, 566, 567], "major": [60, 123, 124, 145, 498, 501], "involv": [60, 107, 111, 112, 123, 133, 186, 210, 269, 273, 313, 523, 529], "anoth": [60, 64, 65, 108, 109, 118, 122, 123, 130, 133, 167, 173, 186, 193, 195], "promis": 60, "pursuit": 60, "unif": [60, 107, 130, 523, 529], "clearli": [60, 110, 115], "lot": [60, 61, 120, 130, 145], "thought": [60, 108, 109, 126], "care": [60, 109, 133], "attent": [60, 109, 121, 122, 409, 420, 421, 544, 555], "gone": [60, 127], "simplifi": [60, 128, 129, 130, 132], "compat": [60, 126, 145, 186, 194, 269, 273, 277, 279, 281, 282, 283, 284, 288, 289, 294, 296, 300, 301, 306, 307, 309, 310, 313, 315, 317, 318, 325, 422, 433, 436, 439, 442, 444, 445, 451, 459, 498, 500, 511, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523], "excit": [60, 107, 112, 523], "complianc": 60, "hope": [60, 145], "due": [60, 108, 122, 125, 269, 313], "suit": [60, 108, 109, 112, 116, 117, 131, 144], "some": [60, 61, 64, 65, 108, 109, 110, 113, 114, 115, 118, 121, 122, 123, 124, 125, 126, 129, 130, 131, 132, 144, 145, 269, 292, 393, 395, 396, 398, 400, 401, 402, 407, 409, 417, 523, 544, 552], "motiv": [60, 130], "great": [60, 61, 117, 128, 130], "convinc": 60, "celebr": 60, "encourag": [60, 144, 145, 523, 529], "foundat": 60, "point": [61, 109, 114, 115, 121, 125, 126, 128, 130, 131, 144, 166, 167, 168, 170, 172, 174, 180, 184, 186, 192, 202, 207, 210, 269, 271, 272, 273, 274, 275, 276, 277, 278, 284, 285, 286, 287, 288, 291, 292, 293, 302, 303, 305, 306, 313, 317, 318, 319, 321, 322, 323, 326, 328, 422, 423, 425, 427, 428, 429, 433, 436, 437, 439, 440, 445, 503, 504, 505, 507, 511, 513, 514, 515, 516, 517, 518, 519], "mai": [61, 108, 109, 122, 130, 132, 167, 168, 173, 219, 264, 269, 289, 296, 301, 308, 309, 329, 344, 503, 504, 505, 507, 508, 509, 510, 511, 513, 514, 515], "ask": [61, 128, 130, 145, 523], "perfectli": 61, "happi": [61, 108, 145], "abund": 61, "better": [61, 109, 112, 127, 130, 131, 132], "ll": [61, 107, 109, 115, 122, 125, 131], "give": [61, 108, 109, 112, 114, 115, 119, 126, 130, 451, 459], "two": [61, 66, 67, 114, 115, 117, 121, 122, 127, 131, 133, 167, 168, 172, 178, 182, 183, 186, 209, 214, 269, 283, 319, 329, 333, 422, 423, 425, 426, 427, 428, 429, 430, 431, 433, 434, 435, 436, 437, 438, 439, 440, 441, 443, 444, 451, 464, 503, 504, 505, 506, 507, 523], "streamlin": 61, "workflow": [61, 109, 131, 143, 523], "save": [61, 64, 65, 145, 329, 380, 556, 557], "week": [61, 109, 110, 523], "let": [61, 114, 115, 122, 123, 124, 128, 130, 131, 132, 133, 511, 514, 517, 518, 519, 523], "sai": [61, 108, 120, 130], "deepmind": 61, "releas": [61, 108, 110, 523], "awesom": 61, "paper": 61, "love": 61, "choic": [61, 108, 125, 131, 511, 517, 519], "perceiverio": 61, "happen": [61, 108, 109, 131], "slew": 61, "rush": 61, "f": [61, 111, 112, 122, 128, 131, 133, 269, 295, 329, 360, 364], "g": [61, 112, 122, 145, 186, 191, 210, 219, 235, 491, 494, 495, 503, 504, 505, 507, 511, 513, 515, 516, 518], "inevit": 61, "deviat": [61, 489, 490, 491, 494, 511, 517, 558, 559], "origin": [61, 64, 65, 66, 67, 68, 119, 120, 123, 128, 130, 269, 277, 422, 431, 451, 459, 460], "often": [61, 118, 145], "erron": 61, "train": [61, 118, 122, 124, 131, 132, 133, 143, 144, 145, 393, 395, 396, 400, 523], "poor": 61, "converg": 61, "perform": [61, 64, 65, 113, 115, 117, 118, 119, 121, 122, 124, 125, 126, 128, 131, 145, 156, 161, 167, 176, 177, 219, 329, 341, 345, 346, 347, 361, 362, 363, 393, 396, 398, 400, 401, 402, 409, 417, 419, 422, 440, 467, 468, 469, 470, 471, 478, 479, 520, 521, 522], "issu": [61, 107, 110, 128, 130, 132, 145], "publish": [61, 145], "manag": [61, 107, 125, 145, 219], "get": [61, 64, 65, 107, 108, 110, 112, 118, 123, 124, 125, 128, 129, 130, 131, 132, 186, 200, 201, 202, 205, 219, 228, 229, 238, 239, 252, 253, 258, 262, 265, 268, 329, 332, 353, 354, 355, 374, 523, 529, 544, 553], "work": [61, 108, 109, 110, 112, 117, 122, 123, 124, 127, 128, 129, 130, 132, 133, 523, 529], "repositori": [61, 108, 109, 111, 116], "pull": [61, 107, 108, 111, 113, 145], "request": [61, 107, 113, 219, 255], "confus": [61, 125], "do": [61, 64, 65, 108, 109, 110, 113, 114, 115, 118, 119, 120, 121, 122, 123, 124, 125, 126, 128, 130, 131, 132, 133, 145, 269, 318, 329, 363, 393, 399, 407, 471, 472, 481, 482, 483], "expect": [61, 145, 329, 332, 523], "codebas": [61, 107, 112, 113, 125, 127, 219, 261, 262, 523], "total": [61, 64, 65, 66, 67, 68, 107, 109, 115, 117, 124, 131, 132, 145, 219, 265, 498, 501, 511, 517, 519], "hour": 61, "spent": 61, "spin": 61, "off": [61, 127, 422, 426, 443], "test": [61, 108, 110, 112, 115, 145, 186, 207, 208, 269, 297, 298, 299, 520, 521, 522], "error": [61, 64, 65, 108, 117, 121, 124, 126, 130, 145, 156, 157, 219, 269, 290, 511, 513, 515, 556, 557, 560, 564], "address": [61, 109, 110, 121, 128], "sake": 61, "singl": [61, 64, 65, 109, 113, 115, 117, 118, 120, 122, 125, 126, 128, 131, 132, 133, 145, 219, 228, 229, 248, 249, 250, 251, 329, 389, 392, 491, 494, 495, 503, 504], "multipl": [61, 64, 65, 75, 76, 77, 78, 89, 90, 93, 94, 109, 115, 118, 122, 145, 269, 313, 329, 330, 369, 422, 429, 451, 452, 460, 461, 489, 490, 498, 499, 500, 511, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 544, 554], "line": [61, 108, 115, 121, 129, 130, 131, 132, 143, 523, 529], "directli": [61, 109, 113, 114, 118, 121, 122, 123, 124, 125, 126, 128, 130, 132, 133, 144, 145, 471, 483], "graph": [61, 118, 122, 129, 145, 393, 396, 398, 400, 401, 402, 503, 504, 505, 507, 556, 557], "guarante": [61, 121, 145, 503, 504], "turn": [61, 115, 122], "step": [61, 64, 65, 79, 80, 108, 109, 111, 115, 119, 121, 122, 123, 124, 128, 131, 132, 133, 144, 167, 168, 176, 177, 219, 393, 395, 396, 398, 400, 401, 402, 467, 468, 469, 470, 523, 560, 561, 562, 563, 564, 565], "take": [61, 107, 108, 109, 114, 115, 117, 122, 123, 124, 128, 130, 132, 133, 145, 269, 284, 523, 529], "few": [61, 109, 110, 118, 122, 123, 124, 125, 129, 130, 131, 132, 143, 523, 529], "second": [61, 108, 115, 125, 130, 186, 209, 214, 219, 250, 269, 273, 279, 281, 282, 283, 284, 289, 294, 296, 300, 301, 306, 307, 309, 310, 313, 315, 317, 325, 329, 333, 374, 379, 393, 395, 396, 400, 422, 424, 426, 427, 430, 435, 437, 440, 442, 444, 451, 463, 464, 467, 469, 503, 504, 505, 560, 561, 562], "automat": [61, 108, 109, 118, 122, 126, 127, 128, 129, 132, 133, 523], "everyon": [61, 107, 109, 145], "regardless": [61, 64, 65, 107, 130, 133, 164, 165], "wouldn": 61, "nice": [61, 117], "write": [61, 64, 65, 109, 110, 111, 112, 113, 114, 115, 117, 118, 119, 125, 128, 130, 133, 156, 159, 219, 264, 269, 270, 271, 272, 273, 274, 275, 276, 277, 279, 280, 281, 282, 283, 284, 285, 286, 287, 291, 292, 293, 297, 298, 299, 300, 302, 303, 304, 305, 306, 307, 308, 309, 310, 313, 314, 315, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 329, 338, 342, 349, 351, 447, 448, 449, 450, 451, 452, 455, 456, 457, 458, 460, 462, 463, 464, 489, 490, 491, 493, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522], "onc": [61, 108, 109, 122, 123, 124, 128, 131, 145, 219, 263, 422, 429, 440, 491, 492], "know": [61, 503, 504, 505, 507], "among": [61, 64, 65, 117], "frantic": 61, "port": 61, "lucid": 61, "honk": 61, "improv": [61, 109, 118, 128], "understand": [61, 108, 109, 110, 111, 112, 114, 115, 116, 126, 127], "pattern": [61, 64, 65, 114, 123, 329, 345, 346, 347], "hasn": 61, "now": [61, 64, 65, 108, 111, 113, 120, 122, 123, 126, 130, 131, 133, 144, 145, 544, 555, 556, 557], "spend": 61, "torchvis": 61, "probabl": [61, 409, 417, 491, 492, 544, 552], "sonnet": 61, "about": [61, 108, 109, 116, 127, 128, 132, 133, 145, 186, 202, 205], "next": [61, 108, 109, 110, 111, 114, 115, 119, 120, 130, 131, 186, 202, 523, 556, 557, 560, 561, 562, 563, 564, 565], "everyth": [61, 109, 110, 129, 145], "zero": [61, 64, 65, 66, 67, 115, 121, 122, 123, 124, 126, 128, 131, 132, 156, 158, 159, 167, 170, 172, 178, 182, 183, 185, 186, 192, 269, 273, 274, 281, 287, 292, 293, 308, 309, 311, 312, 313, 314, 317, 318, 319, 323, 324, 326, 329, 341, 372, 375, 376, 393, 395, 396, 400, 401, 409, 417, 422, 425, 430, 433, 436, 444, 445, 451, 455, 456, 458, 460, 466, 489, 490, 491, 493, 498, 499, 500, 501, 503, 504, 505, 507, 511, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 535, 544, 545, 546, 547, 548, 549, 550, 551, 552, 554, 560, 561, 562, 563], "need": [61, 108, 109, 110, 111, 113, 114, 115, 116, 118, 121, 122, 125, 128, 130, 131, 144, 145, 329, 337, 338, 451, 452, 455], "said": 61, "high": [61, 64, 65, 93, 94, 110, 131, 491, 493, 495], "level": [61, 107, 110, 118, 127, 128, 131, 132, 133, 145], "optim": [61, 125, 129, 131, 133, 144, 219, 393, 396, 398, 400, 401, 402, 467, 468, 469, 470, 523, 561, 562, 563, 565], "trainer": [61, 143, 145, 523], "statu": 61, "quo": 61, "kera": 61, "dopamin": 61, "ignit": 61, "catalyst": 61, "lightn": 61, "fastai": 61, "haiku": [61, 133], "flax": [61, 133, 145], "trax": [61, 133], "objax": [61, 133], "idea": [61, 144], "fulli": [61, 121, 122, 126, 128, 129, 130, 131, 132, 133, 145, 544, 554, 555], "offer": [61, 132], "containerwithactiv": [62, 66, 67], "dict_in": [62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104], "queue": [62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 131, 219, 228, 229, 329, 374, 379], "queue_load_s": [62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104], "container_combine_method": [62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104], "list_join": [62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104], "queue_timeout": [62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 329], "print_limit": [62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104], "key_length_limit": [62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104], "print_ind": [62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104], "print_line_spac": [62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104], "ivyh": [62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104], "default_key_color": [62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104], "green": [62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 108, 109, 569, 570], "keyword_color_dict": [62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104], "rebuild_child_contain": [62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104], "types_to_iteratively_nest": [62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104], "alphabetical_kei": [62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104], "containerbas": [62, 63, 64, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 122], "__getitem__": [64, 65, 122], "queri": [64, 65, 122, 123, 130, 219, 252, 262, 409, 420, 421, 544, 555], "slice": [64, 65, 329, 351, 352, 471, 480], "chain": [64, 65, 121, 122, 132, 133, 145, 467, 468, 469, 471, 484, 566, 567], "element": [64, 65, 114, 128, 133, 156, 157, 158, 159, 160, 161, 162, 163, 167, 168, 174, 175, 182, 183, 219, 242, 246, 250, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 333, 334, 337, 338, 341, 342, 349, 359, 388, 389, 409, 417, 422, 424, 427, 430, 437, 440, 451, 452, 456, 458, 460, 461, 462, 491, 492, 498, 501, 502, 503, 504, 505, 506, 507, 508, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 544, 552], "represent": [64, 65, 66, 67, 68, 144, 166, 186, 190, 191, 202, 205, 219, 235, 236, 269, 270, 273, 279, 282, 284, 310, 313, 329, 331, 382, 387], "dictionari": [64, 65, 66, 67, 68, 131, 145, 219, 262], "around": [64, 65, 66, 67, 68, 109, 118, 121, 126, 130, 145], "sequenc": [64, 65, 66, 67, 68, 115, 123, 144, 219, 228, 229, 329, 334, 369, 451, 461, 463, 491, 493, 511, 513, 544, 553, 558, 559, 566, 567], "multiprocess": [64, 65, 66, 67, 68, 131, 145, 219, 228, 329], "asynchron": [64, 65, 66, 67, 68], "wait": [64, 65, 66, 67, 68, 109], "size": [64, 65, 66, 67, 68, 130, 131, 167, 176, 177, 219, 261, 262, 263, 329, 375, 381, 409, 421, 422, 426, 431, 435, 437, 440, 444, 451, 455, 460, 461, 462, 491, 492, 494, 495, 498, 499, 501, 520, 521, 522, 544, 545, 546], "dimens": [64, 65, 66, 67, 68, 115, 128, 131, 156, 161, 167, 182, 183, 219, 250, 329, 345, 346, 347, 350, 356, 372, 391, 409, 410, 411, 412, 413, 414, 415, 416, 419, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 433, 434, 436, 437, 439, 440, 441, 443, 444, 445, 447, 449, 450, 451, 453, 455, 456, 457, 458, 459, 460, 461, 462, 463, 467, 468, 469, 470, 491, 497, 498, 499, 500, 501, 503, 504, 505, 507, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 544, 545, 546, 547, 548, 549, 550, 551, 554, 555], "combin": [64, 65, 66, 67, 68, 109, 115, 117, 118, 121, 122, 133, 422, 424], "arriv": [64, 65, 66, 67, 68], "timeout": [64, 65, 66, 67, 68, 219, 228, 229, 329, 374, 379], "limit": [64, 65, 66, 67, 68, 109, 115, 117, 128, 131, 133, 145, 186, 202, 205, 329, 337, 338, 451, 452], "maximum": [64, 65, 66, 67, 68, 115, 128, 131, 133, 219, 243, 247, 251, 263, 269, 329, 337, 338, 350, 393, 400, 451, 452, 471, 483, 498, 499, 511, 513, 515, 523], "length": [64, 65, 66, 67, 68, 131, 167, 168, 178, 422, 440, 441, 451, 459], "whitespac": [64, 65, 66, 67, 68], "indent": [64, 65, 66, 67, 68, 131], "extra": [64, 65, 66, 67, 68, 115, 120, 121, 128, 393, 397], "newlin": [64, 65, 66, 67, 68, 114], "handl": [64, 65, 66, 67, 68, 112, 117, 118, 120, 122, 123, 124, 125, 126, 132, 145, 164, 165, 219, 235, 236, 237, 238, 239, 253, 257, 258, 265, 268, 393, 396, 398, 400, 401, 402, 560, 561, 562, 563, 564, 565], "result": [64, 65, 66, 67, 68, 113, 114, 115, 117, 121, 122, 123, 125, 126, 131, 145, 156, 159, 167, 168, 186, 210, 219, 228, 264, 269, 270, 271, 272, 273, 274, 275, 276, 277, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 313, 314, 315, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 328, 329, 338, 342, 349, 351, 375, 376, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 421, 422, 423, 426, 431, 440, 445, 447, 448, 449, 450, 451, 452, 455, 456, 457, 458, 460, 462, 463, 464, 471, 484, 489, 490, 491, 493, 498, 499, 500, 503, 504, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523], "color": [64, 65, 66, 67, 68, 569, 570], "termin": [64, 65, 66, 67, 68, 108, 109, 111, 122, 128, 131], "map": [64, 65, 66, 67, 68, 117, 118, 122, 126, 131, 144, 145, 219, 228, 471, 478, 479, 483, 484, 544, 555], "termcolor": [64, 65, 66, 67, 68], "rebuild": [64, 65, 66, 67, 68], "found": [64, 65, 66, 67, 68, 108, 109, 114, 121, 122, 219, 253], "constructor": [64, 65, 66, 67, 68, 123, 124, 130, 329, 332, 566, 567], "param": [64, 65, 66, 67, 68, 128, 133, 329, 331, 351, 352], "kept": [64, 65, 66, 67, 68, 109, 125, 467, 468, 469], "structur": [64, 65, 66, 67, 68, 111, 113, 118, 121, 122, 131, 132, 329, 339, 471, 484], "alphabet": [64, 65, 66, 67, 68], "preserv": [64, 65, 66, 67, 68, 133, 145, 393, 404, 451, 456], "__setitem__": [64, 65, 121, 122, 130], "val": [64, 65, 125, 130, 329, 361, 362, 363, 377, 378], "after": [64, 65, 115, 122, 123, 127, 186, 214, 269, 323, 393, 396, 397, 398, 400, 401, 402, 489, 490, 560, 561, 562, 563, 564, 565], "updat": [64, 65, 108, 109, 110, 111, 112, 115, 116, 120, 121, 122, 123, 126, 128, 130, 131, 133, 145, 219, 228, 329, 363, 375, 376, 393, 395, 396, 398, 400, 401, 402, 409, 419, 467, 468, 469, 471, 478, 479, 487, 488, 533, 534, 560, 561, 562, 563, 564, 565], "all_fals": [64, 65], "assert_is_bool": [64, 65], "key_chain": [64, 65, 66, 67, 75, 76, 77, 78, 79, 80, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 99, 100, 101, 102, 103, 104, 471, 484], "to_appli": [64, 65, 66, 67, 75, 76, 77, 78, 79, 80, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 99, 100, 101, 102, 103, 104, 471, 484], "prune_unappli": [64, 65, 66, 67, 75, 76, 77, 78, 79, 80, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 99, 100, 101, 102, 103, 104, 471, 484], "map_sequ": [64, 65, 66, 67, 75, 76, 77, 78, 79, 80, 87, 88, 89, 90, 91, 92, 93, 94, 99, 100, 101, 102, 103, 104], "entri": [64, 65, 167, 176, 177, 451, 461, 471, 484], "boolean": [64, 65, 122, 167, 174, 186, 192, 206, 218, 219, 254, 266, 269, 279, 280, 282, 284, 307, 308, 309, 310, 329, 330, 333, 334, 358, 359, 360, 364, 365, 366, 367, 368, 385, 392, 393, 399, 467, 468, 469, 471, 481, 511, 515], "evalu": [64, 65, 122, 269, 291, 292, 302, 303, 304, 305, 314, 320, 324, 471, 472, 481, 482, 520, 521, 522], "assert": [64, 65, 130, 131, 329, 335], "skip": [64, 65, 111, 117, 471, 484], "prune": [64, 65, 471, 484, 485, 486], "all_key_chain": [64, 65], "include_empti": [64, 65], "all_tru": [64, 65, 122, 131], "arrays_as_list": [64, 65], "intermedi": [64, 65], "as_arrai": [64, 65, 329, 356, 381], "as_bool": [64, 65], "as_on": [64, 65], "ones": [64, 65, 66, 67, 117, 128, 130, 131, 167, 172, 181, 269, 285, 329, 372, 523], "sub": [64, 65, 109, 110, 112, 117, 122, 130, 131, 132, 219, 244, 245, 248, 249, 250, 251, 422, 426, 451, 461, 467, 468, 469, 470, 523], "fill": [64, 65, 167, 170, 174, 175, 180, 181, 184, 185, 491, 493], "as_random_uniform": [64, 65], "low": [64, 65, 93, 94, 128, 491, 493, 495], "uniform": [64, 65, 132, 491, 492, 493, 495, 535, 537, 538, 541, 542], "lower": [64, 65, 109, 115, 128, 145, 167, 172, 182, 269, 311, 422, 423, 491, 495], "boundari": [64, 65, 491, 495], "output": [64, 65, 108, 112, 113, 114, 115, 117, 118, 121, 122, 124, 125, 126, 128, 130, 132, 133, 145, 156, 159, 167, 168, 170, 171, 172, 174, 175, 178, 180, 181, 184, 185, 219, 228, 229, 263, 264, 269, 270, 271, 272, 273, 274, 275, 276, 277, 279, 280, 281, 282, 283, 284, 285, 286, 287, 291, 292, 293, 297, 298, 299, 300, 302, 303, 304, 305, 306, 307, 308, 309, 310, 313, 314, 315, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 329, 336, 338, 342, 349, 351, 393, 397, 409, 411, 413, 415, 417, 419, 420, 421, 422, 443, 447, 448, 449, 450, 451, 452, 455, 456, 457, 458, 460, 462, 463, 464, 465, 471, 484, 489, 490, 491, 493, 494, 495, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 544, 545, 546, 547, 548, 549, 550, 552, 553, 554, 555], "interv": [64, 65, 128, 133, 167, 168, 176, 177, 422, 444, 451, 452, 463, 491, 493, 495, 520, 521, 522], "upper": [64, 65, 167, 172, 183, 422, 423, 437, 491, 495], "as_vari": [64, 65], "as_zero": [64, 65], "assert_contains_sub_contain": [64, 65], "sub_cont": [64, 65], "partial": [64, 65, 109, 556, 557], "except": [64, 65, 114, 121, 125, 130, 145, 186, 194, 329, 335, 344, 363, 390, 422, 436, 451, 453, 463, 498, 501, 520, 521, 522], "diff": [64, 65, 122, 131], "screen": [64, 65, 131], "assert_contains_sub_structur": [64, 65], "check_shap": [64, 65], "static": [64, 65, 75, 76, 77, 78, 79, 80, 87, 88, 89, 90, 93, 94, 99, 100, 105, 106, 110, 114, 115, 118, 145, 164, 165], "assert_ident": [64, 65], "check_typ": [64, 65], "same_arrai": [64, 65, 131], "arrays_equ": [64, 65, 66, 67, 329], "datatyp": [64, 65, 167, 169, 179, 186, 196, 207, 208, 209], "exact": [64, 65, 109, 128, 503, 504], "assert_identical_structur": [64, 65], "at_key_chain": [64, 65], "ignore_key_error": [64, 65], "ignore_non": [64, 65], "at_kei": [64, 65], "ignor": [64, 65, 115, 145, 167, 178, 471, 482, 560, 564], "substr": [64, 65], "access": [64, 65, 109, 111, 123], "clip_min": [64, 65], "clip_max": [64, 65], "minimum": [64, 65, 128, 133, 219, 269, 270, 329, 354, 355, 377, 378, 383, 384, 451, 452, 498, 500, 511, 513, 515, 523], "config": [64, 65, 131, 471, 484], "right": [64, 65, 107, 108, 109, 112, 115, 131, 269, 281, 283, 422, 440], "duplic": [64, 65, 114, 119, 120, 130, 132], "compar": [64, 65, 117, 131, 329, 330, 333, 334, 503, 504, 505, 507, 508, 509, 510], "configur": [64, 65, 108, 109, 111, 123, 219, 262, 471, 484], "container_rightmost": [64, 65], "common_key_chain": [64, 65, 122], "across": [64, 65, 110, 115, 117, 118, 122, 123, 126, 219, 228, 229, 240, 241, 243, 244, 245, 246, 247, 251, 261, 262, 329, 333, 334, 471, 477, 498, 500], "properti": [64, 65, 115, 117, 118, 122, 130, 131, 132, 219, 231, 556, 557, 560, 561, 562, 563, 565], "contains_sub_contain": [64, 65], "match": [64, 65, 122, 186, 192, 269, 318, 329, 369], "contains_sub_structur": [64, 65], "copi": [64, 65, 111, 114, 119, 123, 128, 130, 131, 144, 145, 167, 169, 173, 186, 192, 219, 264, 329, 340, 388, 389, 451, 459, 471, 473, 508, 510], "create_if_abs": [64, 65], "inplac": [64, 65, 79, 80, 112, 115, 120, 121, 126, 130, 132, 329, 335, 360, 363, 364, 385, 393, 396, 398, 400, 401, 402, 533, 534, 560, 561, 562, 563, 564, 565], "correspond": [64, 65, 66, 67, 109, 114, 115, 116, 118, 121, 122, 123, 126, 186, 193, 269, 277, 317, 422, 424, 427, 439, 451, 453, 460, 491, 492, 498, 499, 500, 503, 504, 505, 507, 511, 516, 517, 518, 519], "alreadi": [64, 65, 108, 109, 119, 122, 126, 130, 145, 219, 269, 285, 293, 313, 319, 328, 422, 435, 523], "noth": [64, 65, 109], "cutoff_at_depth": [64, 65], "depth_cutoff": [64, 65], "summari": [64, 65, 109, 186, 197, 198, 199, 211, 212, 213, 219, 232, 233, 329, 339, 343, 357, 393, 403, 408], "cutoff_at_height": [64, 65], "height_cutoff": [64, 65], "deep_copi": [64, 65, 131], "intern": [64, 65, 114, 121, 122, 124, 125, 219, 393, 407, 471, 472, 481, 482, 535, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 566, 567], "dev": [64, 65, 66, 68, 108, 118, 124, 128, 130, 132, 219, 228, 253], "belong": [64, 65, 132], "dev_clon": [64, 65, 219], "clone": [64, 65, 109, 111, 219, 240, 241, 242, 243], "dev_dist": [64, 65, 219], "distribut": [64, 65, 110, 124, 145, 219, 240, 244, 245, 246, 247, 409, 417, 447, 448, 449, 450, 491, 492, 493, 494, 495, 544, 552, 556, 557], "along": [64, 65, 113, 125, 167, 176, 177, 219, 244, 245, 246, 247, 248, 249, 250, 251, 263, 329, 341, 342, 351, 391, 422, 431, 443, 444, 445, 447, 449, 450, 451, 453, 456, 458, 460, 461, 463, 465, 467, 468, 469, 470, 491, 497, 498, 499, 500, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522], "split": [64, 65, 107, 109, 127, 128, 145, 219, 228, 244, 245, 246, 247, 261, 262, 263, 329, 369, 451, 523], "dev_str": [64, 65], "mode": [64, 65, 108, 115, 122, 145, 164, 165, 219, 248, 249, 250, 251, 263, 269, 273, 313, 422, 437], "diff_kei": [64, 65], "detect_key_diff": [64, 65], "detect_value_diff": [64, 65], "detect_shape_diff": [64, 65], "thei": [64, 65, 110, 112, 113, 115, 118, 120, 122, 123, 124, 125, 130, 131, 132, 133, 145, 186, 209, 467, 468, 469, 491, 492, 523, 566, 567], "treat": [64, 65, 129, 133, 164, 165], "detect": [64, 65, 126, 131, 132, 471, 472, 482], "without": [64, 65, 109, 113, 118, 121, 122, 124, 126, 128, 130, 131, 132, 144, 145, 329, 374, 379, 451, 459, 471, 473, 503, 504, 505, 507], "flag": [64, 65, 109, 125, 130, 219, 238, 393, 399], "container0": [64, 65], "einops_rearrang": [64, 65, 329], "axes_length": [64, 65, 329, 345, 346, 347], "rearrang": [64, 65, 329, 345, 347], "addit": [64, 65, 108, 109, 113, 114, 117, 122, 123, 130, 131, 133, 219, 264, 269, 273, 329, 345, 346, 347, 489, 490, 544, 554], "einops_reduc": [64, 65, 329], "reduct": [64, 65, 123, 130, 329, 346, 375, 376, 520, 521, 522, 523], "reduc": [64, 65, 130, 219, 263, 329, 346, 422, 437, 498, 499, 500, 511, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522], "One": [64, 65, 123, 128, 130, 131, 329, 346, 451, 459, 491, 493], "callabl": [64, 65, 122, 128, 146, 147, 148, 149, 150, 151, 152, 153, 154, 164, 165, 186, 203, 204, 219, 263, 329, 331, 336, 344, 346, 467, 468, 469, 470, 471, 477, 481, 482, 483], "einops_repeat": [64, 65, 329], "find_sub_contain": [64, 65], "sub_cont_to_find": [64, 65], "exsit": [64, 65], "find_sub_structur": [64, 65], "sub_struc_to_find": [64, 65], "flatten_key_chain": [64, 65, 131, 556, 557], "__": [64, 65, 115, 131], "above_height": [64, 65, 131], "below_depth": [64, 65, 131], "format_key_chain": [64, 65], "format_fn": [64, 65], "format": [64, 65, 111, 114, 123, 124, 128, 130, 131, 186, 200, 219, 239, 511, 512, 523], "string": [64, 65, 119, 123, 124, 128, 131, 186, 190, 191, 200, 206, 218, 219, 235, 236, 237, 238, 252, 258, 264, 265, 268, 329, 343], "from_disk_as_hdf5": [64, 65, 131], "h5_obj_or_filepath": [64, 65], "slice_obj": [64, 65], "load": [64, 65, 145], "disk": [64, 65, 131], "h5py": [64, 65], "file": [64, 65, 108, 109, 111, 113, 114, 118, 119, 121, 122, 128, 131, 329, 380, 556, 557], "hdf5": [64, 65, 131, 556, 557], "filepath": [64, 65, 109], "h5": [64, 65], "from_disk_as_json": [64, 65, 131], "json_filepath": [64, 65], "json": [64, 65, 131], "were": [64, 65, 109, 113, 117, 122], "abl": [64, 65, 108, 109, 118, 123, 125, 130, 133], "dure": [64, 65, 118, 122, 123, 124, 125, 145, 164, 165, 219, 264, 329, 390, 393, 395, 396, 400, 422, 430, 467, 468, 469, 470, 511, 517, 519, 556, 557, 560, 561, 562, 564], "from_disk_as_pickl": [64, 65, 131], "pickle_filepath": [64, 65], "pickl": [64, 65, 122, 131], "from_flat_list": [64, 65], "flat_list": [64, 65], "hierarchi": [64, 65, 131], "flat": [64, 65, 329, 375, 451, 458], "popul": [64, 65, 123, 124, 128, 491, 492, 511, 517, 519], "from_numpi": [64, 65, 131], "gather": [64, 65, 329, 352], "indic": [64, 65, 111, 129, 133, 156, 161, 269, 320, 329, 351, 352, 359, 372, 375, 376, 409, 410, 411, 412, 413, 414, 415, 416, 422, 445, 451, 460, 471, 472, 474, 476, 478, 479, 480, 482, 485, 486, 487, 488, 489, 490, 491, 492, 498, 499, 500, 501, 503, 504, 506, 508, 509, 510, 523, 526, 528, 544, 545, 546, 547, 548, 549, 550, 551, 556, 557], "accord": [64, 65, 108, 111, 118, 123, 186, 195, 202, 269, 273, 283, 313, 329, 351, 375, 376, 422, 444, 451, 454, 466, 511, 517, 519], "index": [64, 65, 111, 118, 122, 130, 166, 167, 172, 178, 219, 260, 329, 331, 351, 352, 451, 463, 471, 474, 475, 478, 479, 480, 485, 487, 498, 499, 500, 501, 503, 504, 505, 508, 509, 526, 528], "gather_nd": [64, 65, 329, 523], "h5_file_s": [64, 65], "content": [64, 65, 110, 111, 125, 128, 131], "batch": [64, 65, 118, 122, 131, 219, 261, 262, 329, 350, 409, 418, 422, 445, 467, 468, 469, 470, 489, 490, 558, 559], "handle_inplac": [64, 65], "prime": [64, 65], "overwritten": [64, 65, 119, 121], "has_kei": [64, 65], "query_kei": [64, 65], "somewher": [64, 65], "has_key_chain": [64, 65], "has_nan": [64, 65, 329], "include_inf": [64, 65, 329, 358, 392], "leafwis": [64, 65], "nan": [64, 65, 113, 114, 166, 186, 192, 269, 270, 271, 272, 273, 274, 275, 276, 277, 285, 286, 287, 291, 292, 293, 297, 299, 302, 303, 305, 306, 313, 317, 318, 319, 321, 322, 323, 326, 328, 329, 358, 392, 409, 421, 503, 504, 505, 507, 511, 513, 514, 515, 517, 518, 519, 520, 521, 522], "well": [64, 65, 117, 125, 132, 133, 144, 329, 358, 422, 439], "inf": [64, 65, 166, 329, 358, 392, 422, 445], "wise": [64, 65, 128, 133, 156, 157, 158, 159, 160, 161, 162, 163, 269, 270, 271, 273, 274, 276, 277, 279, 280, 281, 282, 283, 284, 288, 289, 290, 294, 295, 296, 300, 301, 306, 307, 308, 309, 310, 311, 312, 313, 315, 317, 318, 325, 329, 349, 451, 452], "identical_array_shap": [64, 65], "exclus": [64, 65, 118, 122, 133, 167, 168, 329, 341, 365, 366, 368, 393, 399, 491, 493], "trace": [64, 65, 66, 67, 128, 145, 329, 365, 366, 368, 422], "identical_config": [64, 65], "identical_structur": [64, 65], "if_exist": [64, 65], "inplace_upd": [64, 65, 125, 329, 533, 534], "key_chains_contain": [64, 65], "sub_str": [64, 65], "join": [64, 65, 451, 453, 463, 523], "list_stack": [64, 65, 131], "dim": [64, 65, 123, 329, 372, 544, 555], "func": [64, 65, 122, 164, 165, 219, 263, 329, 336, 393, 397, 471, 484], "map_cont": [64, 65], "include_self": [64, 65], "possibi": [64, 65], "place": [64, 65, 109, 112, 113, 114, 115, 117, 118, 122, 124, 126, 133, 167, 168, 169, 170, 171, 172, 174, 175, 179, 180, 181, 184, 185, 219, 264, 269, 273, 274, 279, 284, 285, 287, 293, 319, 323, 324, 326, 329, 351, 361, 362, 363, 409, 412, 421, 422, 425, 451, 455, 456, 460, 489, 490, 503, 504, 505, 508, 509, 511, 513, 520, 521, 560, 561, 562, 563, 564, 565], "matrix_norm": [64, 65, 422], "ord": [64, 65, 422, 431, 445], "matrix": [64, 65, 167, 178, 182, 183, 329, 330, 337, 409, 418, 422, 423, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 436, 437, 439, 440, 441, 443, 446, 544, 554], "p": [64, 65, 77, 78, 108, 109, 167, 178, 329, 337, 338, 409, 417, 422, 431, 445, 544, 552], "integ": [64, 65, 122, 123, 130, 167, 168, 174, 186, 205, 208, 210, 269, 270, 279, 280, 281, 282, 283, 284, 285, 293, 294, 310, 317, 318, 319, 328, 422, 432, 444, 445, 451, 461, 491, 493, 496, 511, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522], "flatten": [64, 65, 329, 350, 422, 435, 445, 451, 458, 460, 498, 499, 500, 503, 504, 505, 507], "left": [64, 65, 108, 109, 115, 123, 269, 281, 422, 427, 431, 440, 498, 499, 523], "broadcast": [64, 65, 113, 114, 115, 122, 123, 156, 159, 186, 193, 194, 219, 264, 269, 270, 271, 272, 273, 274, 275, 276, 277, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 291, 292, 293, 294, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 329, 338, 349, 422, 430, 431, 433, 436, 439, 444, 445, 447, 448, 449, 450, 451, 452, 455, 456, 457, 458, 460, 462, 463, 464, 491, 493, 498, 499, 500, 508, 510, 511, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522], "correctli": [64, 65, 108, 117, 122, 123, 126, 132, 145, 422, 431, 498, 499], "max_depth": [64, 65, 219, 223, 226, 233, 243, 247, 251, 329, 357, 471, 483], "multi_map": [64, 65, 122], "map_nest": [64, 65, 75, 76, 85, 86, 89, 90], "leftmost": [64, 65, 471, 484], "multi_map_in_static_method": [64, 65, 122], "fn_name": [64, 65], "num_arrai": [64, 65], "overwrite_at_key_chain": [64, 65], "overwrit": [64, 65, 125, 128, 219, 263], "target_dict": [64, 65], "return_dict": [64, 65], "prune_empti": [64, 65], "keep_non": [64, 65], "empti": [64, 65, 66, 67, 121, 123, 124, 167, 168, 511, 517, 518, 520, 521, 522], "prune_key_chain": [64, 65], "key1": [64, 65, 132], "key2": [64, 65], "key3": [64, 65], "prune_key_from_key_chain": [64, 65], "absolut": [64, 65, 107, 269, 270, 422, 438], "certain": [64, 65, 108, 145, 167, 168, 176, 177], "decid": [64, 65, 108, 471, 482], "remov": [64, 65, 109, 110, 111, 114, 117, 118, 123, 125, 133, 422, 426, 430, 443, 451, 462, 467, 468, 469], "prune_kei": [64, 65], "prune_keys_from_key_chain": [64, 65], "remove_key_length_limit": [64, 65], "remove_print_limit": [64, 65], "reshape_lik": [64, 65], "leading_shap": [64, 65], "return_cont": [64, 65], "restructur": [64, 65], "keep_orig": [64, 65], "transpos": [64, 65, 130, 133, 219, 250, 409, 411, 413, 415, 422, 434, 436, 523, 544, 546, 548, 550], "old": [64, 65, 108, 125], "keep": [64, 65, 108, 109, 116, 122, 129, 131, 133, 329, 391], "start": [64, 65, 107, 108, 109, 110, 111, 112, 114, 115, 123, 127, 128, 130, 131, 132, 144, 145, 167, 168, 176, 177, 219, 234], "restructure_key_chain": [64, 65], "keychain_map": [64, 65], "set_at_key_chain": [64, 65], "set_at_kei": [64, 65], "set_framework": [64, 65, 128, 130, 131, 133], "set_ivy_backend": [64, 65], "ivy_backend": [64, 65], "attribut": [64, 65, 114, 122, 123, 129, 130, 131, 132, 186, 202, 203, 204, 205, 219, 259], "show": [64, 65, 108, 109, 115, 125, 144, 145, 523], "show_sub_contain": [64, 65], "sub_cont_or_keychain": [64, 65], "shuffl": [64, 65, 491, 523], "seed_valu": [64, 65, 491, 496], "align": [64, 65, 108, 128, 130, 523, 529], "seed": [64, 65, 66, 67, 491, 523], "shuffle_h5_fil": [64, 65], "dataset": [64, 65, 131, 143, 523], "size_ordered_arrai": [64, 65], "keychain": [64, 65], "smallest": [64, 65, 186, 202, 205, 269, 285], "largest": [64, 65, 144, 186, 202, 205, 422, 440], "slice_kei": [64, 65], "key_slic": [64, 65], "all_depth": [64, 65], "slice_via_kei": [64, 65], "sort_by_kei": [64, 65], "num_or_size_split": [64, 65, 128, 451, 461], "with_remaind": [64, 65, 451, 461], "constitu": [64, 65, 133], "dimension": [64, 65, 167, 168, 172, 178, 422, 424, 425, 430, 433, 435, 436, 444, 445, 451, 461, 498, 499, 500, 501, 511, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522], "evenli": [64, 65, 167, 168, 176, 177, 451, 461], "store": [64, 65, 114, 119, 121, 122, 128, 130, 131, 132, 329, 350, 393, 407, 422, 443, 451, 461, 556, 557], "stop_gradi": [64, 65, 66, 67, 79, 80, 132, 219, 263, 393, 396, 398, 400, 401, 402, 467, 468, 469, 470, 523, 560, 561, 562, 563, 564, 565], "preserve_typ": [64, 65, 393, 404], "stop": [64, 65, 128, 145, 167, 168, 176, 177, 219, 234, 263, 393, 396, 398, 400, 401, 402, 404, 467, 468, 469, 470, 560, 561, 562, 563, 564, 565], "alwai": [64, 65, 109, 110, 113, 114, 118, 119, 121, 122, 125, 126, 128, 130, 145, 186, 192, 269, 273, 313, 329, 363, 393, 399, 404], "structural_diff": [64, 65], "to_devic": [64, 65, 219, 238], "move": [64, 65, 109, 113, 219, 264], "cuda": [64, 65, 128, 131, 145, 167, 176, 177, 219, 228, 235, 260, 329, 351, 352, 372, 375, 376, 491, 492, 493, 495, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 564, 566, 567], "cpu": [64, 65, 109, 124, 145, 167, 176, 177, 219, 238, 239, 241, 255, 258, 260, 264, 265, 267, 268, 329, 351, 352, 372, 375, 376, 491, 492, 493, 494, 495, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 564, 566, 567], "target": [64, 65, 112, 127, 131, 132, 133, 219, 237, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 523], "to_dict": [64, 65], "to_disk_as_hdf5": [64, 65, 131], "starting_index": [64, 65], "max_batch_s": [64, 65], "read": [64, 65, 111, 523], "r": [64, 65, 108, 329, 334, 391, 422, 437, 446], "w": [64, 65, 79, 80, 128, 131, 132, 329, 334, 393, 395, 396, 398, 400, 401, 402, 409, 410, 411, 412, 413, 414, 415, 416], "later": [64, 65, 329, 336], "append": [64, 65, 111, 117, 128, 131, 269, 281, 422, 426, 430], "to_disk_as_json": [64, 65, 131], "to_disk_as_pickl": [64, 65, 131], "to_flat_list": [64, 65], "to_iter": [64, 65, 122], "leaf_keys_onli": [64, 65], "to_iterator_kei": [64, 65], "to_iterator_valu": [64, 65], "to_json": [64, 65], "to_list": [64, 65, 329, 523], "to_multi_dev": [64, 65], "multidevcontain": [64, 65, 66], "distributedarrai": [64, 65], "to_numpi": [64, 65, 131, 329, 523], "update_backend": [64, 65], "to_raw": [64, 65], "raw": [64, 65, 114], "trim_kei": [64, 65], "max_length": [64, 65], "try_kc": [64, 65], "tri": [64, 65], "self": [64, 65, 121, 122, 128, 130, 131, 132, 133, 219, 523, 560, 564], "arbitrari": [64, 65, 117, 118, 122, 125, 126, 132, 145, 167, 178, 186, 193, 210, 219, 248, 249, 251], "concatten": [64, 65, 219, 248, 249, 250, 251, 263], "unstack": [64, 65, 128, 131, 329, 523], "dim_siz": [64, 65, 219], "update_config": [64, 65], "vector_norm": [64, 65, 422], "global_norm": [64, 65, 77, 78], "vector": [64, 65, 144, 167, 178, 329, 338, 409, 418, 422, 424, 427, 430, 435, 440, 441, 444, 445, 446, 544, 554], "with_default_key_color": [64, 65], "with_entries_as_list": [64, 65], "with_ivy_backend": [64, 65], "with_key_length_limit": [64, 65, 131], "with_print_ind": [64, 65, 131], "with_print_limit": [64, 65, 131], "with_print_line_spac": [64, 65], "containerwithcr": [66, 67, 69], "containerwithdatatyp": [66, 67, 71], "containerwithdevic": [66, 67, 73], "containerwithelementwis": [66, 67, 75, 122], "containerwithgener": [66, 67, 77], "containerwithgradi": [66, 67, 79], "containerwithimag": [66, 67, 81], "containerwithlay": [66, 67, 83], "containerwithlinearalgebra": [66, 67, 85], "containerwithloss": [66, 67, 87], "containerwithmanipul": [66, 67, 89, 110], "containerwithnorm": [66, 67, 91], "containerwithrandom": [66, 67, 93], "containerwithsearch": [66, 67, 95], "containerwithset": [66, 67, 97], "containerwithsort": [66, 67, 99], "containerwithstatist": [66, 67, 101], "containerwithutil": [66, 67, 103], "__add__": [66, 67, 114, 115, 121, 122, 126, 130], "special": [66, 67, 110, 113, 114, 115, 121, 126, 269, 270, 271, 272, 273, 274, 275, 276, 277, 284, 285, 286, 287, 291, 292, 293, 302, 303, 305, 306, 313, 317, 318, 319, 320, 321, 322, 323, 326, 328, 511, 513, 514, 515, 517, 518, 519], "11": [66, 67, 75, 76, 93, 94, 115, 122, 269, 273, 279, 319, 329, 341, 351, 422, 426, 435, 447, 450, 451, 456, 458, 491, 493, 498, 502, 503, 504, 511, 512], "__radd__": [66, 67, 114, 115], "revers": [66, 67, 110, 114, 115, 133, 145, 329, 344, 451, 456], "adam_step": [66, 67, 393], "arang": [66, 67, 123, 167, 176, 177, 511, 512, 523], "arg_info": [66, 67, 329], "arg_nam": [66, 67, 329], "argmax": [66, 67, 498, 523], "argmin": [66, 67, 498, 523], "array_equ": [66, 67, 329], "as_ivy_dev": [66, 67, 130, 219], "as_ivy_dtyp": [66, 67, 186], "as_native_dev": [66, 67, 219], "as_native_dtyp": [66, 67, 186], "asarrai": [66, 67, 125, 167, 409, 410, 503, 505], "assert_supports_inplac": [66, 67, 329], "astyp": [66, 67, 123, 125, 186], "broadcast_arrai": [66, 67, 186], "broadcast_to": [66, 67, 123, 186], "cache_fn": [66, 67, 118, 329], "can_cast": [66, 67, 118, 123, 186], "choleski": [66, 67, 422], "clear_mem_on_dev": [66, 67, 219], "clip_matrix_norm": [66, 67, 329], "closest_valid_dtyp": [66, 67, 186], "container_typ": [66, 67, 329], "conv1d": [66, 67, 409, 544], "conv1d_transpos": [66, 67, 409], "conv2d": [66, 67, 409, 523, 544], "conv2d_transpos": [66, 67, 409], "conv3d": [66, 67, 409, 544], "conv3d_transpos": [66, 67, 409], "copy_arrai": [66, 67, 329], "cross": [66, 67, 422, 447, 448, 449, 450, 523], "cumprod": [66, 67, 133, 329], "cumsum": [66, 67, 329, 523], "current_backend_str": [66, 67, 329], "default_devic": [66, 67, 124, 128, 219, 257, 260, 267], "default_dtyp": [66, 67, 118, 123, 186], "default_float_dtyp": [66, 67, 123, 186], "default_int_dtyp": [66, 67, 123, 186], "depthwise_conv2d": [66, 67, 409, 523], "det": [66, 67, 422], "dev_clone_arrai": [66, 67, 219], "dev_clone_it": [66, 67, 219], "dev_clone_nest": [66, 67, 219], "dev_dist_arrai": [66, 67, 219], "dev_dist_it": [66, 67, 219], "dev_dist_nest": [66, 67, 219], "dev_unifi": [66, 67, 219], "dev_unify_arrai": [66, 67, 219], "dev_unify_it": [66, 67, 219], "dev_unify_nest": [66, 67, 219], "dev_util": [66, 67, 124, 219], "diagon": [66, 67, 167, 172, 182, 183, 422, 443], "dropout": [66, 67, 131, 409, 544, 555], "dtype_bit": [66, 67, 186], "eigh": [66, 67, 422], "eigvalsh": [66, 67, 422], "empty_lik": [66, 67, 167], "execute_with_gradi": [66, 67, 122, 131, 132, 133, 145, 393, 523], "ey": [66, 67, 133, 167, 409, 412, 416], "finfo": [66, 67, 186], "floormod": [66, 67, 329, 523], "fourier_encod": [66, 67, 329], "from_dlpack": [66, 67, 167], "full_lik": [66, 67, 167], "function_supported_dtyp": [66, 67, 186], "function_unsupported_dtyp": [66, 67, 186], "gelu": [66, 67, 156, 530], "get_all_arrays_in_memori": [66, 67, 329], "get_all_ivy_arrays_on_dev": [66, 67, 124, 219], "get_min_bas": [66, 67, 329], "get_min_denomin": [66, 67, 329], "get_num_dim": [66, 67, 329, 523], "get_referrers_recurs": [66, 67, 329], "gpu_is_avail": [66, 67, 219], "handle_nest": [66, 67, 118, 122, 146], "handle_out_argu": [66, 67, 120, 123, 124, 125, 126, 146], "iinfo": [66, 67, 186], "indices_wher": [66, 67, 329, 523], "infer_devic": [66, 67, 123, 124, 126, 146], "infer_dtyp": [66, 67, 123, 124, 126, 146], "inplace_arrays_support": [66, 67, 329], "inplace_decr": [66, 67, 329], "inplace_incr": [66, 67, 329], "inplace_variables_support": [66, 67, 329], "inputs_to_native_arrai": [66, 67, 121, 146], "inv": [66, 67, 130, 422, 523], "invalid_dtyp": [66, 67, 186], "is_float_dtyp": [66, 67, 186], "is_int_dtyp": [66, 67, 186, 329, 389], "is_ivy_contain": [66, 67, 329], "leaky_relu": [66, 67, 156, 523], "linear": [66, 67, 114, 128, 131, 132, 133, 156, 157, 158, 159, 329, 350, 409, 417, 439, 523, 544, 545, 546, 547, 548, 549, 550, 551], "linspac": [66, 67, 128, 167, 168, 523], "logspac": [66, 67, 128, 167], "lstm_updat": [66, 67, 128, 409], "match_kwarg": [66, 67, 329], "matrix_pow": [66, 67, 422], "matrix_rank": [66, 67, 422], "matrix_transpos": [66, 67, 130, 422], "meshgrid": [66, 67, 167], "multi_head_attent": [66, 67, 122, 125, 409], "multinomi": [66, 67, 491], "nonzero": [66, 67, 269, 273, 313, 498], "num_arrays_in_memori": [66, 67, 329], "num_cpu_cor": [66, 67, 124, 219], "num_gpu": [66, 67, 117, 124, 219], "num_ivy_arrays_on_dev": [66, 67, 219], "one_hot": [66, 67, 133, 329, 523], "ones_lik": [66, 67, 133, 167, 523], "outer": [66, 67, 422, 467, 468, 469, 470], "outputs_to_ivy_arrai": [66, 67, 121, 123, 124, 126, 146], "percent_used_mem_on_dev": [66, 67, 219], "pinv": [66, 67, 422, 523], "print_all_arrays_in_memori": [66, 67, 329], "print_all_ivy_arrays_on_dev": [66, 67, 219], "promote_typ": [66, 67, 186], "qr": [66, 67, 422], "randint": [66, 67, 93, 94, 491, 523], "random_norm": [66, 67, 409, 412, 415, 416, 422, 440, 491, 503, 504], "result_typ": [66, 67, 123, 186], "scaled_dot_product_attent": [66, 67, 409], "scatter_flat": [66, 67, 329], "scatter_nd": [66, 67, 130, 329, 523], "set_default_devic": [66, 67, 124, 219, 267], "set_default_dtyp": [66, 67, 118, 123, 186], "set_default_float_dtyp": [66, 67, 123, 186], "set_default_int_dtyp": [66, 67, 123, 186], "set_min_bas": [66, 67, 329], "set_min_denomin": [66, 67, 329], "set_queue_timeout": [66, 67, 329], "set_split_factor": [66, 67, 219], "set_tmp_dir": [66, 67, 329], "set_with_grad": [66, 67, 393], "shape_to_tupl": [66, 67, 123, 329], "sigmoid": [66, 67, 128, 131, 132, 156, 523], "slogdet": [66, 67, 422], "softplu": [66, 67, 156, 523], "solv": [66, 67, 129, 144, 422], "split_factor": [66, 67, 219, 228], "split_func_cal": [66, 67, 219], "stable_divid": [66, 67, 118, 329], "stable_pow": [66, 67, 329], "static_ab": [66, 67], "static_aco": [66, 67], "static_acosh": [66, 67], "static_adam_step": [66, 67], "static_al": [66, 67], "static_ani": [66, 67], "static_arang": [66, 67], "static_arg_info": [66, 67], "static_arg_nam": [66, 67], "static_argmax": [66, 67], "static_argmin": [66, 67], "static_arrai": [66, 67], "static_array_equ": [66, 67], "static_arrays_equ": [66, 67], "static_as_ivy_dev": [66, 67], "static_as_ivy_dtyp": [66, 67], "static_as_native_dev": [66, 67], "static_as_native_dtyp": [66, 67], "static_asarrai": [66, 67], "static_asin": [66, 67], "static_asinh": [66, 67], "static_assert_supports_inplac": [66, 67], "static_astyp": [66, 67], "static_atan": [66, 67], "static_atan2": [66, 67], "static_atanh": [66, 67], "static_bitwise_and": [66, 67], "static_bitwise_invert": [66, 67], "static_bitwise_left_shift": [66, 67], "static_bitwise_or": [66, 67], "static_bitwise_right_shift": [66, 67], "static_bitwise_xor": [66, 67], "static_broadcast_arrai": [66, 67], "static_broadcast_to": [66, 67], "static_cache_fn": [66, 67], "static_can_cast": [66, 67], "static_ceil": [66, 67], "static_choleski": [66, 67], "static_clear_mem_on_dev": [66, 67], "static_clip_matrix_norm": [66, 67], "static_clip_vector_norm": [66, 67], "static_closest_valid_dtyp": [66, 67], "static_concat": [66, 67], "static_constant_pad": [66, 67], "static_container_typ": [66, 67], "static_conv1d": [66, 67], "static_conv1d_transpos": [66, 67], "static_conv2d": [66, 67], "static_conv2d_transpos": [66, 67], "static_conv3d": [66, 67], "static_conv3d_transpos": [66, 67], "static_copy_arrai": [66, 67], "static_co": [66, 67], "static_cosh": [66, 67], "static_cross": [66, 67], "static_cumprod": [66, 67], "static_cumsum": [66, 67], "static_current_backend": [66, 67], "static_current_backend_str": [66, 67], "static_default": [66, 67], "static_default_devic": [66, 67], "static_default_dtyp": [66, 67], "static_default_float_dtyp": [66, 67], "static_default_int_dtyp": [66, 67], "static_depthwise_conv2d": [66, 67], "static_det": [66, 67], "static_dev": [66, 67], "static_dev_clon": [66, 67], "static_dev_clone_arrai": [66, 67], "static_dev_clone_it": [66, 67], "static_dev_clone_nest": [66, 67], "static_dev_dist": [66, 67], "static_dev_dist_arrai": [66, 67], "static_dev_dist_it": [66, 67], "static_dev_dist_nest": [66, 67], "static_dev_unifi": [66, 67], "static_dev_unify_arrai": [66, 67], "static_dev_unify_it": [66, 67], "static_dev_unify_nest": [66, 67], "static_dev_util": [66, 67], "static_diagon": [66, 67], "static_dropout": [66, 67], "static_dtyp": [66, 67], "static_dtype_bit": [66, 67], "static_eigh": [66, 67], "static_eigvalsh": [66, 67], "static_einops_rearrang": [66, 67], "static_einops_reduc": [66, 67], "static_einops_repeat": [66, 67], "static_einsum": [66, 67], "static_empti": [66, 67], "static_empty_lik": [66, 67], "static_equ": [66, 67], "static_erf": [66, 67], "static_execute_with_gradi": [66, 67], "static_exist": [66, 67], "static_exp": [66, 67], "static_expand_dim": [66, 67], "static_expm1": [66, 67], "static_ey": [66, 67], "static_finfo": [66, 67], "static_flip": [66, 67], "static_floor": [66, 67], "static_floor_divid": [66, 67], "static_floormod": [66, 67], "static_fourier_encod": [66, 67], "static_from_dlpack": [66, 67], "static_ful": [66, 67], "static_full_lik": [66, 67], "static_function_supported_dtyp": [66, 67], "static_function_unsupported_dtyp": [66, 67], "static_gath": [66, 67], "static_gather_nd": [66, 67], "static_gelu": [66, 67], "static_get_all_arrays_in_memori": [66, 67], "static_get_all_ivy_arrays_on_dev": [66, 67], "static_get_min_bas": [66, 67], "static_get_min_denomin": [66, 67], "static_get_num_dim": [66, 67], "static_get_referrers_recurs": [66, 67], "static_gpu_is_avail": [66, 67], "static_great": [66, 67], "static_greater_equ": [66, 67], "static_handle_nest": [66, 67], "static_handle_out_argu": [66, 67], "static_has_nan": [66, 67], "static_iinfo": [66, 67], "static_indices_wher": [66, 67], "static_infer_devic": [66, 67], "static_infer_dtyp": [66, 67], "static_inplace_arrays_support": [66, 67], "static_inplace_decr": [66, 67], "static_inplace_incr": [66, 67], "static_inplace_upd": [66, 67], "static_inplace_variables_support": [66, 67], "static_inputs_to_native_arrai": [66, 67], "static_inv": [66, 67], "static_invalid_dtyp": [66, 67], "static_is_arrai": [66, 67], "static_is_float_dtyp": [66, 67], "static_is_int_dtyp": [66, 67], "static_is_ivy_arrai": [66, 67], "static_is_ivy_contain": [66, 67], "static_is_native_arrai": [66, 67], "static_is_vari": [66, 67], "static_isfinit": [66, 67], "static_isinf": [66, 67], "static_isnan": [66, 67], "static_layer_norm": [66, 67], "static_leaky_relu": [66, 67], "static_less": [66, 67], "static_less_equ": [66, 67], "static_linear": [66, 67], "static_linspac": [66, 67], "static_log": [66, 67], "static_log10": [66, 67], "static_log1p": [66, 67], "static_log2": [66, 67], "static_logaddexp": [66, 67], "static_logical_and": [66, 67], "static_logical_not": [66, 67], "static_logical_or": [66, 67], "static_logical_xor": [66, 67], "static_logspac": [66, 67], "static_lstm_upd": [66, 67], "static_match_kwarg": [66, 67], "static_matmul": [66, 67], "static_matrix_norm": [66, 67], "static_matrix_pow": [66, 67], "static_matrix_rank": [66, 67], "static_matrix_transpos": [66, 67], "static_max": [66, 67], "static_maximum": [66, 67], "static_mean": [66, 67], "static_meshgrid": [66, 67], "static_min": [66, 67], "static_minimum": [66, 67], "static_multi_head_attent": [66, 67], "static_multinomi": [66, 67], "static_multiprocess": [66, 67], "static_native_arrai": [66, 67], "static_neg": [66, 67], "static_nonzero": [66, 67], "static_not_equ": [66, 67], "static_num_arrays_in_memori": [66, 67], "static_num_cpu_cor": [66, 67], "static_num_gpu": [66, 67], "static_num_ivy_arrays_on_dev": [66, 67], "static_one_hot": [66, 67], "static_on": [66, 67], "static_ones_lik": [66, 67], "static_out": [66, 67], "static_outputs_to_ivy_arrai": [66, 67], "static_percent_used_mem_on_dev": [66, 67], "static_permute_dim": [66, 67], "static_pinv": [66, 67], "static_posit": [66, 67], "static_pow": [66, 67], "static_print_all_arrays_in_memori": [66, 67], "static_print_all_ivy_arrays_on_dev": [66, 67], "static_prod": [66, 67], "static_promote_typ": [66, 67], "static_qr": [66, 67], "static_queue_timeout": [66, 67], "static_random_norm": [66, 67], "static_relu": [66, 67], "static_remaind": [66, 67], "static_repeat": [66, 67], "static_reshap": [66, 67], "static_result_typ": [66, 67], "static_round": [66, 67], "static_scaled_dot_product_attent": [66, 67], "static_scatter_flat": [66, 67], "static_scatter_nd": [66, 67], "static_se": [66, 67], "static_set_default_devic": [66, 67], "static_set_default_dtyp": [66, 67], "static_set_default_float_dtyp": [66, 67], "static_set_default_int_dtyp": [66, 67], "static_set_min_bas": [66, 67], "static_set_min_denomin": [66, 67], "static_set_queue_timeout": [66, 67], "static_set_split_factor": [66, 67], "static_set_tmp_dir": [66, 67], "static_set_with_grad": [66, 67], "static_shap": [66, 67], "static_shape_to_tupl": [66, 67], "static_shuffl": [66, 67], "static_sigmoid": [66, 67], "static_sign": [66, 67], "static_sin": [66, 67], "static_sinh": [66, 67], "static_slogdet": [66, 67], "static_softmax": [66, 67], "static_softplu": [66, 67], "static_solv": [66, 67], "static_split": [66, 67], "static_split_factor": [66, 67], "static_split_func_cal": [66, 67], "static_sqrt": [66, 67], "static_squar": [66, 67], "static_squeez": [66, 67], "static_stable_divid": [66, 67], "static_stable_pow": [66, 67], "static_stack": [66, 67], "static_std": [66, 67], "static_stop_gradi": [66, 67], "static_sum": [66, 67], "static_supports_inplac": [66, 67], "static_svd": [66, 67], "static_svdv": [66, 67], "static_swapax": [66, 67], "static_tanh": [66, 67], "static_tensordot": [66, 67], "static_til": [66, 67], "static_tmp_dir": [66, 67], "static_to_devic": [66, 67], "static_to_list": [66, 67], "static_to_native_arrays_and_back": [66, 67], "static_to_numpi": [66, 67], "static_to_scalar": [66, 67], "static_total_mem_on_dev": [66, 67], "static_tpu_is_avail": [66, 67], "static_trac": [66, 67], "static_tril": [66, 67], "static_triu": [66, 67], "static_trunc": [66, 67], "static_try_else_non": [66, 67], "static_type_promote_arrai": [66, 67], "static_unique_al": [66, 67], "static_unique_count": [66, 67], "static_unique_invers": [66, 67], "static_unique_valu": [66, 67], "static_unset_default_devic": [66, 67], "static_unset_default_dtyp": [66, 67], "static_unset_default_float_dtyp": [66, 67], "static_unset_default_int_dtyp": [66, 67], "static_unset_with_grad": [66, 67], "static_unstack": [66, 67], "static_used_mem_on_dev": [66, 67], "static_valid_dtyp": [66, 67], "static_value_is_nan": [66, 67], "static_var": [66, 67], "static_vari": [66, 67], "static_variable_data": [66, 67], "static_vecdot": [66, 67], "static_vector_norm": [66, 67], "static_vector_to_skew_symmetric_matrix": [66, 67], "static_wher": [66, 67], "static_with_grad": [66, 67], "static_zero_pad": [66, 67], "static_zero": [66, 67], "static_zeros_lik": [66, 67], "supports_inplac": [66, 67, 329], "svd": [66, 67, 422, 523], "svdval": [66, 67, 422], "tensordot": [66, 67, 422], "tmp_dir": [66, 67, 329], "to_native_arrays_and_back": [66, 67, 120, 126, 146], "to_scalar": [66, 67, 329], "total_mem_on_dev": [66, 67, 124, 219], "tpu_is_avail": [66, 67, 219], "tril": [66, 67, 167], "triu": [66, 67, 167], "try_else_non": [66, 67, 329], "type_promote_arrai": [66, 67, 186], "unique_al": [66, 67, 503], "unique_count": [66, 67, 503], "unique_invers": [66, 67, 503], "unique_valu": [66, 67, 503], "unset_default_devic": [66, 67, 219], "unset_default_dtyp": [66, 67, 186], "unset_default_float_dtyp": [66, 67, 186], "unset_default_int_dtyp": [66, 67, 186], "unset_with_grad": [66, 67, 393], "used_mem_on_dev": [66, 67, 219], "valid_dtyp": [66, 67, 186], "value_is_nan": [66, 67, 329], "variable_data": [66, 67, 393], "vecdot": [66, 67, 422], "vector_to_skew_symmetric_matrix": [66, 67, 422, 523], "with_grad": [66, 67, 393, 403], "zeros_lik": [66, 67, 167, 451, 452, 523], "at_dev": [66, 68, 219, 232, 233], "static_add": [75, 76, 114, 115, 122], "static_divid": [75, 76, 122], "static_multipli": [75, 76, 122], "static_subtract": [75, 76, 122], "static_tan": [75, 76, 115, 122], "143": [75, 76, 115, 269, 326], "16": [75, 76, 93, 94, 109, 115, 131, 269, 326, 409, 415, 422, 426, 435, 498, 502, 511, 512], "38": [75, 76, 115, 269, 326], "static_all_equ": [77, 78], "clip_vector_norm": [77, 78, 329], "max_norm": [77, 78, 329, 337, 338], "adam_upd": [79, 80, 132, 393], "dcdw": [79, 80, 393, 395, 396, 398, 400, 401], "lr": [79, 80, 131, 132, 393, 396, 398, 400, 401, 402, 560, 561, 562, 563, 564, 565], "mw_tm1": [79, 80, 393, 396, 400], "vw_tm1": [79, 80, 393, 396, 400], "beta1": [79, 80, 132, 393, 395, 396, 400, 560, 561, 562], "beta2": [79, 80, 132, 393, 395, 396, 400, 560, 561, 562], "999": [79, 80, 132, 393, 395, 396, 400, 560, 561, 562], "gradient_descent_upd": [79, 80, 393, 467, 468, 469, 470, 523], "lamb_upd": [79, 80, 393], "max_trust_ratio": [79, 80, 393, 400, 560, 562], "decay_lambda": [79, 80, 393, 400, 401, 560, 562, 563], "lars_upd": [79, 80, 393], "optimizer_upd": [79, 80, 393], "effective_grad": [79, 80, 393, 402], "static_adam_upd": [79, 80], "static_gradient_descent_upd": [79, 80], "static_lamb_upd": [79, 80], "static_lars_upd": [79, 80], "static_optimizer_upd": [79, 80], "static_binary_cross_entropi": [87, 88], "static_cross_entropi": [87, 88], "static_sparse_cross_entropi": [87, 88], "static_clip": [89, 90], "static_rol": [89, 90, 115, 122], "random_uniform": [93, 94, 124, 132, 491, 523], "static_randint": [93, 94], "20": [93, 94, 130, 269, 284, 291, 319, 323, 422, 426, 435, 442, 491, 493, 498, 501, 502, 511, 512], "15": [93, 94, 108, 115, 269, 279, 319, 409, 412, 422, 426, 435, 442, 451, 460, 489, 490, 491, 493, 498, 501, 503, 504, 511, 512], "12": [93, 94, 108, 115, 122, 269, 279, 284, 287, 319, 329, 341, 355, 422, 426, 435, 442, 451, 456, 458, 460, 489, 490, 491, 493, 498, 502, 503, 504, 511, 512], "40": [93, 94, 269, 287, 323, 422, 435, 511, 512], "gpu": [93, 94, 109, 124, 130, 145, 219, 238, 241, 254, 256, 260, 262, 267], "87": [93, 94], "62": [93, 94], "52": [93, 94, 422, 435, 503, 504, 511, 512], "95": [93, 94], "37": [93, 94, 269, 326, 489, 490], "42": [93, 94, 133, 156, 162, 422, 435, 491, 496, 511, 512], "14": [93, 94, 111, 115, 122, 269, 284, 409, 421, 422, 426, 435, 503, 504, 511, 512], "13": [93, 94, 115, 122, 269, 279, 284, 287, 323, 329, 341, 409, 421, 422, 426, 435, 489, 490, 498, 502, 503, 504, 511, 512], "static_random_uniform": [93, 94], "static_argsort": [99, 100], "static_sort": [99, 100], "add_ivy_container_instance_method": 105, "containerexampl": [105, 106], "strongli": [107, 108, 523, 529], "welcom": [107, 108, 109, 523, 529], "skill": 107, "vetern": 107, "beginn": 107, "aspect": [107, 131, 523], "guid": [107, 108, 109, 117, 523], "through": [107, 109, 110, 112, 115, 118, 119, 122, 127, 128, 130, 131, 132, 133, 144, 269, 277], "journei": [107, 523, 529], "inclusvi": 107, "big": [107, 145], "team": [107, 108, 109], "board": 107, "contributor": [107, 108, 109, 127, 523], "section": [107, 109, 110, 112, 113, 114, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 131, 132, 503, 504, 505, 507], "below": [107, 108, 110, 111, 112, 113, 115, 118, 122, 123, 124, 125, 128, 129, 130, 131, 132, 133, 144, 167, 178, 182, 183, 269, 279, 284, 287, 319, 422, 425, 426, 443, 451, 455, 456, 503, 504, 505, 508, 509, 523], "best": [107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 329, 369], "go": [107, 108, 109, 110, 112, 113, 115, 122, 127, 131, 145, 471, 482], "finish": [107, 108, 112, 523], "dive": [107, 109, 110, 127, 130, 131, 145, 523], "environ": [107, 109, 111, 144], "basic": [107, 110, 111], "fork": [107, 108, 329, 370], "doc": [107, 110, 114, 126, 128, 131, 132, 523], "document": [107, 109, 129, 131, 133], "local": [107, 108, 111, 118], "task": [107, 109, 144, 467, 468, 469, 470, 523], "help": [107, 108, 115, 119, 121, 122, 130, 131, 132, 143, 329, 331, 511, 518, 523], "video": [107, 109, 114, 115, 126], "realli": [108, 122, 145], "contribut": [108, 109, 110, 128, 529], "toward": [108, 128, 451, 460, 523, 529], "page": [108, 109, 129, 133, 143, 523, 529], "explain": [108, 109, 110, 113, 114, 115, 117, 118, 119, 121, 122, 123, 124, 125, 126, 128, 129, 130, 131, 132, 133, 523, 529], "main": [108, 111, 120, 122, 167, 172, 182, 183, 422, 426, 443], "prefer": [108, 122], "git": [108, 109], "submodul": [108, 109, 110, 111, 116, 117, 118, 124, 127, 128, 132, 523, 558, 559, 566, 567], "com": 108, "unifyai": [108, 111], "http": [108, 114, 269, 274, 284, 285, 287, 293, 323, 324, 393, 395, 396, 451, 455, 460, 503, 504, 505, 508, 509, 511, 513], "gh": 108, "your_fold": 108, "id": [108, 121, 122, 219, 238, 556, 557], "cours": [108, 109, 115, 131, 145], "whatev": [108, 145], "integr": [108, 117, 186, 192], "familiar": [108, 110], "sure": [108, 110, 116], "elig": 108, "free": [108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 144, 523], "student": 108, "licenc": 108, "peopl": [108, 109, 112], "seem": [108, 132, 145], "miss": [108, 115, 117, 121, 122, 560, 564], "explicit": [108, 111, 122, 123, 125, 128, 145], "remind": 108, "channel": [108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 329, 350, 544, 545, 546, 547, 548, 549, 550, 551, 553, 554], "pace": 108, "suggest": [108, 109, 113], "latest": [108, 110, 111, 114, 145, 269, 274, 284, 285, 287, 293, 323, 324, 451, 455, 460, 503, 504, 505, 508, 509, 511, 513, 544, 553], "packag": [108, 111, 145], "ensur": [108, 109, 117, 121, 123, 126, 329, 363], "pypi": [108, 110, 145], "person": [108, 109], "experi": [108, 129, 131, 145], "avoid": [108, 109, 117, 119, 120, 122, 130, 219, 269, 292], "pip": [108, 144, 523], "instal": [108, 111, 144, 523], "abil": [108, 129, 145], "perhap": [108, 130, 131, 132, 145], "track": [108, 109, 219, 471, 483, 556, 557], "run": [108, 111, 116, 117, 119, 126, 128, 129, 130, 131, 132, 133, 144, 145, 219, 228, 393, 395, 396, 400, 467, 468, 469, 470, 544, 555, 556, 557], "command": [108, 111, 523], "ivy_dev": [108, 109, 111], "name": [108, 109, 111, 114, 117, 128, 130, 131, 133, 164, 165, 329, 331, 422, 427, 437, 440, 503, 504, 505], "setup": 108, "click": [108, 109, 114, 523], "icon": [108, 109], "side": [108, 109], "choos": [108, 109, 133, 219, 264, 269, 308, 309, 498, 502, 503, 504, 505, 507, 511, 513, 514, 515], "panel": 108, "select": [108, 109, 117, 128, 130, 133, 145], "drop": [108, 145], "down": [108, 130], "path": [108, 111], "manual": [108, 109, 117, 132, 471, 472, 481, 482], "builtin": [108, 111, 130, 132], "requir": [108, 111, 113, 114, 115, 117, 120, 121, 123, 124, 126, 130, 145, 164, 165, 269, 323, 422, 427, 451, 463, 533, 534], "cmd": [108, 111], "directori": [108, 109, 111, 329, 380], "folder": [108, 109, 111, 113, 116, 117, 118], "abov": [108, 109, 111, 114, 115, 118, 119, 121, 122, 125, 126, 130, 131, 132, 133, 167, 178, 182, 183, 269, 273, 274, 279, 284, 285, 287, 293, 313, 319, 323, 324, 326, 329, 351, 409, 412, 421, 422, 425, 426, 427, 443, 451, 455, 456, 460, 489, 490, 491, 493, 503, 504, 505, 508, 509, 511, 513, 516, 517, 518, 520, 521], "m": [108, 109, 111, 112, 128, 167, 178, 182, 183, 329, 334, 422, 423, 425, 426, 427, 428, 429, 430, 433, 434, 435, 436, 437, 439, 440, 441, 443, 491, 494, 495], "python3": [108, 111], "script": [108, 109, 111, 115, 128, 145], "bat": [108, 109, 111], "OR": [108, 109, 111, 269, 282, 309, 520, 522], "bin": [108, 109, 111], "mac": [108, 109, 111], "linux": [108, 109, 111], "virtualenv": 108, "os": 108, "note": [108, 109, 113, 114, 115, 122, 269, 318, 422, 427, 440, 451, 463, 503, 505, 511, 514], "tick": [108, 109], "To": [108, 115, 118, 122, 131, 132, 133, 523], "ivy_test": [108, 109], "test_array_api": [108, 109, 116, 117], "cd": [108, 109, 111], "txt": 108, "visual": [108, 145], "jetbrain": 108, "remot": 108, "mitig": 108, "potenti": [108, 127, 269, 292], "conflict": [108, 109, 131], "yet": [108, 110, 122], "particular": [108, 109, 113, 125, 269, 270], "system": [108, 145, 422, 439], "instruct": [108, 110], "desktop": 108, "wsl": 108, "powershel": 108, "admin": 108, "visit": 108, "link": 108, "profession": 108, "execut": [108, 111, 122, 125, 128, 130, 133, 145, 329, 390], "deploy": 108, "top": [108, 109, 117, 131, 132, 523], "press": [108, 131, 523], "ok": 108, "caus": [108, 109, 115, 117, 122, 125, 145], "earlier": [108, 109], "might": [108, 109, 113, 117, 120, 128, 130, 131, 329, 344], "necessari": [108, 115, 119, 122, 125], "virtualis": 108, "detail": [108, 109, 110, 113, 116, 117, 118, 119, 120, 122, 126, 131, 132, 167, 173, 503, 504, 505, 507], "sudo": 108, "apt": 108, "ca": 108, "certif": 108, "curl": 108, "gnupg": 108, "lsb": 108, "mkdir": 108, "keyr": 108, "fssl": 108, "download": [108, 117], "gpg": 108, "dearmor": 108, "o": [108, 128, 329, 334], "echo": 108, "deb": 108, "arch": 108, "dpkg": 108, "architectur": [108, 133, 145], "lsb_releas": 108, "cs": 108, "tee": 108, "null": 108, "ce": 108, "cli": 108, "containerd": 108, "io": 108, "compos": [108, 122, 145], "plugin": 108, "systemctl": 108, "permiss": 108, "relat": [108, 109, 144, 219], "post": [108, 133, 489, 490, 523, 529], "It": [108, 109, 111, 112, 113, 114, 115, 119, 121, 122, 125, 128, 130, 131, 132, 156, 159, 219, 264, 269, 270, 271, 272, 273, 274, 275, 276, 277, 279, 280, 281, 282, 283, 284, 285, 286, 287, 291, 292, 293, 297, 298, 299, 300, 302, 303, 304, 305, 306, 307, 308, 309, 310, 313, 314, 315, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 329, 338, 349, 447, 448, 449, 450, 451, 452, 455, 456, 457, 458, 460, 462, 463, 464, 491, 493, 498, 499, 508, 509, 510, 520, 521, 522], "headach": 108, "arm": 108, "m1": 108, "instead": [108, 109, 110, 114, 115, 117, 118, 122, 125, 126, 128, 130, 131, 145], "featur": [108, 113, 126, 131, 523], "vm": 108, "azur": 108, "cloud": [108, 144], "defin": [108, 110, 113, 114, 123, 126, 130, 132, 145, 269, 313, 318, 329, 372, 422, 424, 427, 439, 491, 493, 511, 513, 514, 515], "dockerfil": [108, 111], "longer": [108, 123, 125], "worri": 108, "platform": 108, "agnost": [108, 121, 126, 128, 130, 133, 145, 523], "usual": 108, "studio": 108, "favourit": 108, "extens": [108, 109, 114, 167, 178, 269, 273, 274, 279, 284, 285, 287, 293, 319, 323, 324, 326, 422, 425, 451, 455, 456, 460, 503, 504, 505, 508, 509, 511, 513, 520, 521], "theme": 108, "too": [108, 109, 145, 269, 273, 313], "done": [108, 109, 115, 117, 131], "unsupport": [108, 123, 186, 203, 204], "slow": 108, "ipad": 108, "long": [108, 109, 115, 409, 419], "browser": 108, "cool": [108, 113], "requisit": 108, "head": [108, 122, 409, 420, 523, 544, 555], "pane": [108, 109], "readi": [108, 110], "begin": [108, 471, 472, 482], "outlin": [108, 109, 110, 112, 114, 117, 118, 122, 125, 130], "dropdown": 108, "tab": [108, 131, 523], "master": [108, 109, 122], "vs": 108, "view": [108, 109, 167, 173, 409, 412, 416], "built": [108, 129, 167, 168, 219, 544, 555, 556, 557], "bottom": 108, "box": 108, "patient": 108, "upto": 108, "minut": 108, "launch": 108, "That": [108, 109, 130, 131, 132, 269, 318], "refer": [108, 109, 117, 118, 123, 126, 145, 167, 172, 269, 292, 304, 393, 395, 396, 422, 444, 446, 511, 517, 519, 520, 521, 522, 544, 554], "approach": [108, 109, 117, 118, 122, 130, 131, 145], "colour": 108, "applic": [108, 123, 124, 132, 409, 420, 421, 471, 477, 483], "good": [108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 128, 132], "chanc": 108, "vscode": 108, "explor": [108, 129, 133, 144], "troubleshoot": 108, "sometim": [108, 109], "ever": [108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126], "64": [108, 131, 132, 269, 323, 324, 409, 415, 416, 422, 435, 511, 512, 523, 544, 555], "bit": [108, 115, 118, 122, 130, 186, 201, 202, 205, 269, 280, 281, 283, 511, 516, 518], "usr": 108, "more": [108, 109, 110, 112, 113, 115, 117, 118, 119, 120, 121, 122, 125, 126, 127, 128, 129, 130, 131, 132, 133, 144, 145, 167, 168, 186, 193, 269, 292, 422, 430, 451, 456, 503, 504, 505, 507, 523], "nutshel": [108, 126], "hook": 108, "lint": 108, "fix": [108, 109], "fail": [108, 110, 116, 117, 128, 130], "attempt": [108, 145], "succe": 108, "problemat": 108, "proce": [108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126], "modifi": [108, 109, 114, 118, 123, 124, 128], "properli": [108, 112], "enter": [108, 109, 121, 123, 124, 126, 219], "unsur": [108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126], "feel": [108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 523], "server": [109, 523], "context": [109, 115, 122, 123, 124, 219, 329, 370, 409, 420, 544, 555], "suitabl": [109, 113, 122], "quick": [109, 112, 132], "tendenc": 109, "land": 109, "end": [109, 122, 125, 127, 144, 145, 167, 168, 269, 277, 523, 529], "world": 109, "come": [109, 110, 132, 143, 523, 529], "fly": 109, "hard": [109, 130], "receiv": [109, 117, 123, 124, 219, 228, 229, 329, 332, 369, 544, 554], "respons": [109, 111], "internship": 109, "comment": 109, "trigger": 109, "unansw": 109, "label": [109, 128, 129, 133, 447, 448, 449, 450], "respond": 109, "someon": [109, 145], "els": [109, 110, 113, 118, 119, 125, 128, 130, 132, 133, 145, 329, 335, 344, 348, 471, 481], "strive": [109, 145], "repli": 109, "newli": [109, 125, 164, 165, 186, 192, 329, 336], "bug": [109, 117], "serv": [109, 117, 118, 121, 122, 126, 127, 523], "suspect": 109, "behaviour": [109, 114, 117, 121, 122, 125, 126, 130], "observ": 109, "confid": 109, "wrong": 109, "someth": [109, 113, 131, 132, 145], "bet": 109, "act": [109, 115, 145], "placehold": [109, 121, 126, 471, 483], "mark": [109, 117], "ii": [109, 511, 512], "iii": 109, "titl": [109, 523], "issue_numb": 109, "delet": [109, 111], "No": [109, 128], "progress": [109, 122, 129, 133], "pr": 109, "soon": [109, 122, 143, 145, 523, 529], "solut": [109, 117, 122, 422, 439], "review": [109, 113], "merg": 109, "everi": [109, 110, 111, 115, 116, 117, 118, 119, 120, 122, 125, 126, 128, 130, 132, 167, 174, 175, 329, 330], "dai": 109, "close": [109, 114, 269, 292, 319, 422, 440], "likewis": [109, 114, 118, 122, 123, 126, 131], "freed": 109, "purpos": [109, 111, 115, 117, 118, 120, 121, 122, 126, 127, 130, 269, 292, 523], "remain": [109, 115, 145, 269, 273, 313, 318, 451, 459, 471, 477], "short": [109, 132, 409, 419], "basi": [109, 116, 131], "situat": [109, 133], "alloc": [109, 145, 167, 182, 183, 186, 192, 219], "upon": [109, 115, 117, 125, 145], "period": 109, "prevent": [109, 125, 130, 393, 395, 396, 400, 511, 518, 560, 561, 562], "unabl": 109, "obvious": 109, "never": [109, 122], "reflect": [109, 121], "qualiti": 109, "hypothet": 109, "frustrat": 109, "delai": 109, "busi": 109, "fine": [109, 130, 133], "becaus": [109, 114, 117, 118, 119, 121, 123, 124, 125, 126, 128, 132, 133, 145], "inact": 109, "me": 109, "unfairli": 109, "definit": [109, 118, 123, 130, 422, 423, 424], "investig": 109, "Then": [109, 111, 130, 145], "practic": [109, 117], "separ": [109, 117, 121, 128, 130, 131], "branch": [109, 122, 145, 164, 165, 269, 277], "role": [109, 129], "date": 109, "upstream": [109, 116], "complic": [109, 128], "root": [109, 111, 131, 269, 323, 491, 492, 494, 495], "merge_with_upstream": 109, "sh": 109, "name_of_your_branch": 109, "resolv": [109, 511, 516, 518], "push": [109, 116], "both": [109, 114, 115, 118, 122, 124, 125, 126, 128, 130, 131, 132, 133, 144, 145, 186, 209, 269, 273, 274, 285, 293, 317, 323, 324, 326, 329, 351, 409, 412, 421, 422, 424, 430, 444, 451, 460, 489, 490, 511, 513, 520, 521], "abort": 109, "tediou": 109, "resolut": 109, "stash": 109, "reinstat": 109, "fetch": 109, "uncommit": 109, "unstag": 109, "untrack": 109, "comprehens": 109, "explan": [109, 114, 122, 126, 130], "atlassian": 109, "tutori": 109, "quit": [109, 110, 114, 118, 120, 121], "logic": [109, 120, 121, 123, 124, 130, 219, 255, 269, 307, 308, 309, 520, 521, 522, 523], "blame": 109, "revis": 109, "author": [109, 523], "eg": 109, "past": 109, "l": [109, 112, 422, 423, 427, 430, 443], "grep": 109, "v": [109, 128, 131, 132, 133, 409, 421, 523, 544, 545, 546, 547, 548, 549, 550, 551, 553, 554, 555, 556, 557, 558, 559, 560, 564, 566, 567], "commit_id": 109, "handi": 109, "histori": 109, "toggl": 109, "vertic": 109, "highlight": [109, 115], "previou": [109, 117, 126, 133, 145, 393, 396, 400], "inform": [109, 186, 202, 205, 329, 331, 393, 404], "whenev": [109, 130, 131], "tag": 109, "think": [109, 115], "interact": [109, 523], "gain": [109, 127, 132, 535], "yourself": [109, 110, 144], "simpler": [109, 130], "cannot": [109, 119, 123, 133], "least": [109, 115, 118, 121, 422, 430], "final": [109, 114, 115, 118, 121, 123, 125, 128, 130, 131, 167, 176, 177, 329, 350, 544, 555], "tickbox": 109, "corner": 109, "span": 109, "intent": [109, 125], "larg": [109, 131, 269, 273, 313], "discourag": 109, "philosophi": 109, "increment": [109, 329, 362], "frequent": [109, 110], "valuabl": 109, "infrequ": 109, "earli": [109, 523], "wast": 109, "spot": [109, 118], "mistak": 109, "propos": 109, "mountain": 109, "advoc": [109, 145], "individu": [109, 110, 118], "per": [109, 131, 219, 409, 410, 411, 412, 413, 414, 415, 416, 544, 545, 546, 547, 548, 549, 550, 551], "style": [109, 498, 501], "ve": [109, 127, 130, 491, 492, 523], "actual": [109, 112, 118, 125, 127, 130, 132, 145], "aim": [109, 127], "part": [109, 113, 116, 117, 118, 128, 129, 133, 144, 145, 167, 182, 183, 393, 396, 398, 400, 401, 402, 556, 557], "subsect": 109, "session": [109, 523], "block": [109, 118, 127, 129, 133, 145, 219, 523], "smaller": [109, 128, 133, 451, 452, 460, 511, 516, 518], "edit": 109, "beauti": 109, "particularli": [109, 131, 145], "concern": [109, 112, 115, 122, 125, 127], "effici": [109, 117, 118, 122, 125, 126, 128, 131, 145], "difficult": [109, 117, 145, 503, 504, 505, 507], "undo": 109, "stress": 109, "frequenc": [109, 329, 350], "pycharm": 109, "pytest": [109, 117], "button": 109, "declar": 109, "insid": [109, 111, 113, 123], "exec": 109, "rm": 109, "rf": 109, "cp": 109, "ivy_contain": 109, "bash": [109, 111], "test_ivi": [109, 117], "test_funct": 109, "test_cor": 109, "test_imag": 109, "test_random_crop": 109, "header": 109, "q": [109, 145, 409, 421, 422, 427, 437], "array_api_test": 109, "test_creation_funct": 109, "test_arang": 109, "window": [109, 111, 409, 410, 411, 412, 413, 414, 415, 416, 544, 545, 546, 547, 548, 549, 550, 551], "variou": [109, 114, 120, 126, 144], "wherebi": [110, 122, 471, 483], "broad": 110, "todo": [110, 117], "commit": [110, 117], "NOT": [110, 269, 308], "resourc": 110, "hypothesi": 110, "cover": [110, 114, 115, 118, 120, 127], "lambda": [110, 128, 131, 560, 563, 565], "direct": [110, 132, 133, 144, 508, 510], "bind": [110, 122], "aforement": 110, "categori": [110, 113, 121, 122, 123, 127, 523], "parent": [110, 130], "hint": [110, 113, 114, 118, 121, 125, 126, 167, 178, 269, 273, 274, 279, 284, 285, 287, 293, 319, 323, 324, 326, 329, 351, 409, 412, 421, 422, 425, 451, 455, 456, 460, 489, 490, 503, 504, 505, 508, 509, 511, 513, 520, 521], "its": [110, 111, 114, 186, 193, 219, 263, 422, 430, 451, 455, 459, 460, 464], "thorough": [110, 114, 117, 126], "transpil": [110, 127, 129, 523, 529], "builder": [111, 143, 145, 523], "maco": 111, "ubuntu": 111, "uid": 111, "make_docs_without_dock": 111, "rel": [111, 393, 396, 398, 400, 401, 402, 422, 426, 433, 436, 443, 451, 456, 460, 508, 509, 510, 523], "synchron": 111, "rest": [111, 129, 133], "remove_doc": 111, "_": [111, 114, 122, 125, 130, 131, 269, 274, 284, 285, 287, 293, 323, 324, 393, 395, 396, 422, 446, 451, 455, 460, 503, 504, 505, 508, 509, 511, 513], "privat": [111, 560, 564], "fulfil": [111, 127, 523], "autogenerated_sourc": 111, "png": [111, 131], "_imag": 111, "lastli": 111, "rst": 111, "partial_sourc": 111, "conf": 111, "create_rst_fil": 111, "filter": [111, 409, 410, 411, 412, 413, 414, 415, 416, 544, 545, 546, 547, 548, 549, 550, 551], "repres": [111, 130, 167, 178, 186, 201, 269, 272, 273, 275, 278, 287, 313, 322, 409, 418, 422, 438, 439], "overal": [111, 114, 122, 123, 124, 133], "markup": 111, "extract": [111, 113], "get_functions_and_class": 111, "doctr": 111, "readm": [111, 145], "module_nam": 111, "copy_readme_to_rst": 111, "tabl": 111, "toc": 111, "tree": 111, "append_toctree_to_rst": 111, "create_index_rst": 111, "\u03c0": [111, 269, 271, 274, 276, 277], "namespac": [111, 113, 123, 128, 133], "who": [112, 127, 145], "mainli": [112, 129, 131], "under": [112, 114, 115, 116, 117, 118, 122, 127, 128, 131, 133], "hood": [112, 115, 117, 118, 122, 127, 128, 131, 133], "weed": [112, 127], "behind": [112, 127, 129, 393, 396, 398, 400, 401, 402], "navig": 112, "tour": 112, "primari": [112, 117, 119, 125, 145], "composit": [112, 117, 119, 121, 122, 125, 128, 132, 133, 145], "nestabl": [112, 114, 115, 117, 125, 269, 273, 274, 285, 293, 323, 324, 326, 329, 351, 409, 412, 421, 451, 460, 489, 490, 511, 513, 520, 521], "dynam": [112, 123, 124, 125, 128, 164, 165], "runtim": [112, 117, 219], "h": [112, 122, 409, 412, 413, 414, 415, 416], "j": [112, 329, 333, 334, 422, 443, 511, 512], "k": [112, 128, 167, 172, 182, 183, 329, 333, 409, 421, 422, 430, 437, 439, 440, 441, 443, 491, 494, 495, 498, 501], "borrow": 112, "n": [112, 167, 178, 182, 183, 329, 334, 409, 417, 422, 426, 430, 432, 433, 434, 435, 436, 437, 440, 441, 443, 444, 445, 446, 451, 454, 455, 457, 463, 466, 491, 494, 495, 498, 501, 511, 514, 517, 518, 519, 520, 521, 522], "taken": [113, 133, 422, 426], "constant": [113, 118, 132, 133, 145, 219, 228, 229, 451, 454, 471, 477, 489, 490, 535, 536, 540, 543, 556, 557, 558, 559], "compil": [113, 122, 127, 129, 145, 523, 556, 557, 560, 561, 562, 563, 564, 565], "meta": [113, 121, 468, 469, 470], "overlap": 113, "sever": [113, 145, 422, 429], "judgement": 113, "locat": [113, 117, 119, 124, 491, 492], "some_namespac": 113, "some_backend": 113, "another_backend": 113, "break": [113, 126, 130, 145, 523], "anyth": [113, 523], "refactor": 113, "ongo": 113, "subfold": [113, 117], "via": [113, 122, 123, 124, 125, 128, 130, 131, 144, 471, 472, 481, 482], "file_nam": 113, "my_func": [113, 115], "int": [113, 115, 118, 122, 123, 124, 125, 126, 133, 156, 161, 164, 165, 167, 170, 172, 174, 175, 176, 177, 180, 182, 183, 184, 186, 194, 199, 201, 202, 205, 208, 219, 241, 244, 245, 246, 247, 255, 256, 257, 263, 264, 269, 279, 280, 281, 282, 283, 284, 329, 331, 341, 342, 345, 346, 347, 350, 351, 356, 372, 375, 376, 381, 382, 391, 393, 395, 396, 400, 409, 410, 412, 414, 415, 416, 422, 424, 426, 442, 443, 444, 445, 447, 449, 450, 451, 453, 454, 455, 456, 457, 458, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 483, 489, 490, 491, 492, 493, 494, 495, 496, 498, 499, 500, 508, 509, 510, 511, 513, 514, 515, 517, 518, 519, 520, 521, 522], "nativedtyp": [113, 123, 124, 126, 167, 168, 169, 170, 171, 172, 174, 175, 179, 180, 181, 184, 185, 186, 191, 192, 198, 199, 200, 209, 511, 518], "nativedevic": [113, 123, 124, 126, 167, 168, 169, 170, 171, 172, 174, 175, 176, 177, 179, 180, 181, 184, 185, 219, 236, 237, 238, 252, 258, 260, 262, 264, 265, 268, 329, 372, 491, 492, 493, 494, 495], "my": 113, "numer": [113, 132, 167, 178, 186, 192, 269, 270, 273, 285, 288, 292, 293, 294, 297, 298, 299, 300, 308, 309, 313, 314, 315, 317, 318, 320, 324, 325, 328, 329, 354, 355, 377, 378, 383, 384, 422, 424, 430, 435, 440, 442, 443, 444, 491, 497, 498, 499, 500, 511, 513, 516, 518, 535], "cooler": 113, "produc": [113, 219, 228, 229, 409, 421], "something_cool": 113, "category_nam": [114, 118, 123, 124, 126], "contrast": [114, 126], "backend_nam": [114, 118, 119, 120, 123, 124, 126], "account": 114, "instanti": 114, "firstli": [114, 115, 118, 121, 123, 125, 131], "templat": [114, 523], "spec": [114, 115], "api_specif": [114, 269, 274, 284, 285, 287, 293, 323, 324, 451, 455, 460, 503, 504, 505, 508, 509, 511, 513], "array_api": 114, "preview": 114, "render": 114, "incorrectli": 114, "onlin": [114, 523], "approxim": [114, 156, 157, 269, 271, 272, 274, 275, 276, 277, 286, 287, 291, 292, 302, 303, 304, 305, 317, 321, 322, 326, 422, 433, 436], "tangent": [114, 156, 163, 269, 276, 277, 278, 326, 327], "domain": [114, 269, 271, 272, 274, 275, 276, 277, 286, 287, 291, 292, 302, 303, 305, 321, 322, 323, 326], "infin": [114, 166, 186, 192, 269, 270, 272, 273, 275, 276, 277, 285, 286, 287, 291, 292, 293, 294, 297, 298, 302, 303, 305, 306, 313, 317, 318, 319, 321, 322, 323, 326, 328, 422, 445, 511, 513, 515, 520, 521, 522], "codomain": [114, 269, 271, 272, 274, 275, 276, 277, 286, 287, 291, 292, 302, 303, 305, 321, 322, 323, 326], "x_i": [114, 269, 270, 271, 272, 274, 275, 276, 280, 285, 286, 287, 291, 292, 293, 297, 298, 299, 302, 303, 305, 308, 314, 319, 320, 321, 322, 323, 324, 326, 328, 503, 504, 505, 507, 511, 513, 514, 515, 517, 518, 519], "assum": [114, 119, 123, 130, 131, 145, 167, 178, 269, 273, 274, 279, 284, 285, 286, 287, 293, 319, 321, 323, 324, 326, 329, 351, 409, 412, 421, 422, 425, 451, 455, 456, 460, 489, 490, 503, 504, 505, 508, 509, 511, 513, 520, 521], "express": [114, 128, 133, 269, 271, 274, 276, 277, 286, 321, 326], "radian": [114, 269, 271, 274, 276, 277, 286, 321, 326], "float": [114, 118, 122, 123, 125, 126, 130, 132, 156, 158, 166, 167, 168, 170, 172, 174, 175, 176, 177, 180, 184, 186, 192, 198, 202, 207, 210, 219, 252, 258, 262, 265, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 284, 285, 286, 287, 288, 289, 291, 292, 293, 294, 295, 296, 300, 301, 302, 303, 305, 306, 313, 314, 315, 316, 317, 318, 319, 321, 322, 323, 325, 326, 328, 329, 337, 338, 350, 354, 355, 377, 378, 383, 384, 393, 395, 396, 398, 400, 401, 402, 409, 412, 416, 421, 422, 423, 425, 427, 428, 429, 433, 436, 437, 439, 440, 445, 447, 448, 449, 450, 467, 468, 469, 470, 489, 490, 491, 494, 495, 503, 504, 505, 507, 511, 513, 514, 515, 516, 517, 518, 519], "operand": [114, 269, 271, 272, 273, 274, 275, 276, 277, 284, 285, 286, 287, 291, 292, 293, 302, 303, 305, 306, 313, 317, 318, 319, 321, 322, 323, 326, 328, 511, 512, 513, 515, 518], "whose": [114, 167, 182, 183, 269, 272, 275, 278, 286, 287, 317, 321, 322, 326, 329, 336, 422, 423, 425, 426, 427, 428, 429, 433, 434, 435, 436, 437, 439, 440, 441, 443, 451, 456, 460, 503, 504, 505, 511, 512], "ref": [114, 269, 283, 300, 313, 315, 318, 325, 451, 463], "promot": [114, 118, 123, 186, 192, 195, 209, 210, 214, 269, 271, 272, 273, 274, 275, 276, 278, 279, 281, 282, 283, 284, 286, 287, 288, 291, 292, 302, 303, 305, 306, 310, 313, 317, 318, 321, 322, 323, 326, 422, 423, 424, 429, 430, 433, 435, 436, 439, 444, 445, 451, 463, 511, 514], "But": [114, 122, 133], "needless": 114, "info": [114, 523], "subset": [114, 117, 126, 128], "extend": [114, 117, 119, 126], "renam": 114, "conform": [114, 167, 178, 269, 273, 274, 279, 284, 285, 287, 292, 293, 319, 323, 324, 326, 422, 425, 451, 455, 456, 460, 503, 504, 505, 508, 509, 511, 513, 520, 521], "org": [114, 269, 274, 284, 285, 287, 293, 323, 324, 393, 395, 396, 451, 455, 460, 503, 504, 505, 508, 509, 511, 513], "elementwise_funct": [114, 269, 274, 284, 285, 287, 293, 323, 324, 451, 460, 503, 504, 505, 508, 509, 511, 513], "descript": [114, 122, 167, 178, 269, 273, 274, 279, 284, 285, 287, 293, 319, 323, 324, 326, 329, 351, 409, 412, 421, 422, 425, 445, 451, 455, 456, 460, 489, 490, 503, 504, 505, 508, 509, 511, 513, 520, 521], "simplic": [114, 132, 144, 167, 178, 269, 273, 274, 279, 284, 285, 287, 293, 319, 323, 324, 326, 329, 351, 409, 412, 421, 422, 425, 451, 455, 456, 460, 489, 490, 503, 504, 505, 508, 509, 511, 513], "judgment": 114, "beyond": [114, 451, 460], "text": 114, "func_nam": [114, 115, 118], "pure": [114, 130, 133, 145], "themselv": [114, 118, 122, 123, 124, 132, 471, 472], "operator_nam": 114, "succinct": 114, "contstructor": 114, "though": [114, 118, 123, 131, 145], "forward": [114, 133, 144, 145, 556, 557, 560, 564], "_forward": [114, 128, 131, 132, 523], "former": 114, "trainabl": [114, 129, 131, 132, 393, 399, 533, 534, 556, 557, 566], "explicitli": [114, 118, 119, 121, 122, 125, 128, 145, 422, 427, 544, 553, 555, 556, 557], "latter": [114, 119], "implicit": [114, 122, 128], "docst": 114, "eight": 115, "static_": 115, "op_nam": 115, "__r": 115, "four": [115, 118, 123, 126, 131], "__sub__": [115, 121, 122, 126, 130], "__mul__": [115, 121, 122, 126, 130], "__truediv__": [115, 121, 122], "respect": [115, 121, 122, 123, 126, 167, 178, 269, 270, 273, 277, 279, 281, 282, 283, 284, 288, 289, 294, 295, 296, 300, 301, 306, 307, 309, 310, 313, 315, 318, 325, 393, 395, 396, 397, 398, 400, 401, 402, 422, 437, 467, 468, 469, 470], "recap": [115, 122, 132], "independ": [115, 116, 120, 122, 128, 133, 422, 424, 439, 491, 492], "combinatorili": 115, "variat": [115, 117], "grid": [115, 117, 144, 167, 178], "vari": [115, 117, 122, 130, 503, 504, 505, 507], "simplest": 115, "small": [115, 118, 128, 132, 145, 269, 313, 422, 433, 436, 489, 490, 558, 559], "unus": [115, 125, 164, 165], "18": [115, 122, 269, 284, 422, 426, 435, 511, 512], "excess": [115, 119, 130], "showcas": [115, 144], "demonstr": [115, 130], "replic": [115, 123], "meant": 115, "imaginari": 115, "some_flag": 115, "another_flag": 115, "54": [115, 269, 286, 287, 323, 409, 421, 422, 435, 491, 494, 511, 512], "jointli": 115, "three": [115, 122, 127, 167, 178, 523], "x0": [115, 329, 333], "procedur": 115, "sens": [115, 122, 130], "5574077": 115, "1850398": 115, "5463025": 115, "8422884": 115, "91601413": 115, "9647598": 115, "3738229": 115, "1597457": 115, "0963247": 115, "9955841": 115, "3278579": 115, "multi": [115, 122, 127, 145, 409, 420, 422, 424, 523, 529, 544, 555], "seper": [115, 329, 350], "pars": [115, 145], "satisfi": [115, 422, 446], "far": [115, 124, 129, 130, 471, 472, 482], "asid": [115, 144], "irrelev": [115, 123], "increasingli": 115, "complex": [115, 131, 132, 133, 145, 422, 427, 440], "rule": [115, 117, 118, 121, 122, 123, 186, 192, 195, 210, 269, 278, 283, 288, 313, 318, 422, 423, 424, 435, 439], "count": [115, 131, 219, 257, 422, 444, 451, 456, 503, 504, 505, 520, 521, 522], "14254655": 115, "1578213": 115, "380515": 115, "17": [115, 122, 156, 158, 422, 426, 491, 494], "trivial": 115, "By": [115, 118, 122, 125, 132, 133, 329, 341, 342, 422, 444, 451, 458, 511, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522], "non": [115, 122, 123, 128, 164, 165, 186, 192, 206, 269, 308, 309, 409, 412, 422, 425, 433, 440, 442, 444, 445, 498, 499, 500, 501, 511, 513, 514, 515, 516, 519, 520, 521, 522, 556, 557, 560, 564], "float32": [115, 123, 186, 190, 191, 203, 489, 490], "dictat": [115, 121, 125, 126], "exlud": 115, "unit": [116, 117, 145, 156, 157, 158, 159, 219], "thoroughli": [116, 117], "ci": [116, 117, 145], "failur": 116, "On": [117, 129, 133], "fixtur": 117, "consum": [117, 122, 126, 219], "300": [117, 269, 319], "hit": [117, 128], "permit": [117, 121, 126], "action": 117, "eleg": 117, "intellig": 117, "sampl": [117, 409, 417, 491, 492, 494, 495, 511, 517, 519, 544, 552], "rang": [117, 131, 132, 133, 167, 168, 176, 177, 503, 504, 511, 516, 518, 523], "cach": [117, 118, 219, 237, 329, 336], "unexplor": 117, "known": 117, "repeatedli": [117, 122, 471, 480], "upload": 117, "artifact": 117, "parametr": 117, "strategi": 117, "statement": [117, 145], "plai": [117, 133], "helper": [117, 131], "verifi": [117, 123, 124, 130, 523, 529], "truth": [117, 269, 289, 295, 296, 300, 301, 315], "opt": [117, 119, 125, 130], "defer": [117, 118, 121, 122, 123, 124, 125], "suffic": [117, 120], "catch": [117, 329, 344], "systemat": 117, "safeguard": 117, "inabl": 117, "fact": [117, 131], "categor": [118, 124], "mutual": [118, 122], "constitut": [118, 128, 511, 517, 519], "venn": 118, "diagram": 118, "light": [118, 145], "wherea": [118, 121, 123, 124, 126, 133], "hand": [118, 145], "log_pr": [118, 122, 125], "array_arg": 118, "typic": 118, "whatsoev": [118, 122], "commonli": [118, 511, 517, 519], "outsid": [118, 124, 128, 130, 133, 451, 452, 463], "denomin": [118, 145, 329, 349, 355, 378, 383, 384, 489, 490, 558, 559], "divis": [118, 269, 283, 288, 294, 318, 329, 349, 355, 378, 383, 384, 393, 395, 396, 400, 560, 561, 562], "piec": [118, 120, 121, 128], "deal": [118, 145], "concurr": [118, 122], "weight": [118, 122, 132, 133, 393, 395, 396, 398, 400, 401, 402, 409, 418, 419, 421, 544, 545, 546, 547, 548, 549, 550, 551, 553, 554, 556, 557, 560, 562, 563], "modif": 118, "decor": [118, 120, 122, 123, 124, 125], "group": [118, 122], "briefli": [118, 131], "cast": [118, 123, 186, 192, 195, 451, 453, 511, 516, 518, 523], "get_all_arrays_on_dev": 118, "nested_map": [118, 471], "index_nest": [118, 471], "implicit_backend": 119, "unless": [119, 124, 125, 145, 269, 313, 329, 372], "__dict__": [119, 128, 130], "ivy_original_dict": [119, 128], "unmodifi": [119, 123], "moment": [119, 145, 393, 395, 396, 400, 560, 561, 562], "fallback": 119, "freedom": [119, 511, 517, 519], "recommend": [119, 269, 308, 309, 318, 511, 514], "achiev": [120, 131, 133], "wrapper": [120, 121, 122, 123, 125, 126, 130], "topic": [120, 130], "tf": [121, 123, 124, 125, 126, 128, 133, 145, 523], "_data": [121, 130], "organiz": [121, 122], "inherit": [121, 122, 130], "bear": [121, 122, 123], "mind": [121, 122], "necessarili": [121, 122], "although": [121, 122], "underpin": [121, 122, 128], "programmat": [121, 122], "backup": [121, 122], "accident": [121, 122], "readabl": [121, 122, 126, 130, 131], "absent": [121, 122], "perk": [121, 122], "auto": [121, 122, 131], "throw": [121, 130], "imposs": 121, "coupl": [121, 122, 130, 132], "anywai": 121, "secondli": [121, 123], "easier": 121, "five": [122, 131], "decis": [122, 128, 130], "displai": [122, 131], "arbitrarili": [122, 131], "__repr__": 122, "control": [122, 123, 125, 130, 131, 144], "__getattr__": 122, "underli": [122, 269, 279, 282, 284, 310], "__setattr__": 122, "__contains__": 122, "__getstate__": 122, "__setstate__": 122, "unpickl": 122, "expand": [122, 329, 350, 451, 455], "children": 122, "shallowest": 122, "deepest": 122, "67": [122, 269, 284, 287], "22": [122, 269, 284, 422, 426, 435, 498, 502, 511, 512], "25": [122, 269, 323, 324, 422, 426, 429, 447, 449, 489, 490, 511, 512], "retain_grad": [122, 393, 397], "dy": [122, 393, 397], "dx": [122, 393, 397], "technic": [122, 125, 126, 145], "autograd": [122, 145], "grad": [122, 131, 132, 133, 523, 560, 564], "redund": 122, "num_head": [122, 409, 420, 544, 555], "mask": [122, 409, 420, 421], "to_q_fn": [122, 409, 420], "to_kv_fn": [122, 409, 420], "to_out_fn": [122, 125, 409, 420], "to_q_v": [122, 409, 420], "to_kv_v": [122, 409, 420], "to_out_v": [122, 409, 420], "measur": [122, 409, 420, 544, 555], "dot": [122, 409, 420, 421, 422, 442, 444, 544, 555], "product": [122, 269, 313, 329, 341, 409, 420, 421, 422, 424, 430, 435, 442, 444, 511, 512, 516, 544, 555], "implicitli": 122, "intuit": [122, 131, 132], "debug": [122, 131], "chronolog": 122, "had": [122, 125], "sequenti": [122, 132], "flow": [122, 144], "implic": 122, "slightli": [122, 128, 132], "eager": [122, 145], "int8": [123, 186, 203], "int16": [123, 186, 203, 511, 516, 518], "int32": [123, 186, 203, 329, 388, 451, 455, 511, 516, 518], "int64": [123, 186, 203, 269, 283, 498, 499, 500, 511, 516, 518], "uint8": [123, 186, 203], "uint16": [123, 186, 204, 511, 516, 518], "uint32": [123, 186, 204, 511, 516, 518], "uint64": [123, 186, 204, 511, 516, 518], "bfloat16": [123, 186, 203], "float16": [123, 186, 204], "float64": [123, 186, 192, 203], "all_dtyp": 123, "all_numeric_dtyp": 123, "all_int_dtyp": 123, "all_float_dtyp": 123, "fall": [123, 127, 523, 556, 557, 560, 564], "valid": [123, 128, 186, 196, 409, 410, 411, 412, 413, 414, 415, 416, 451, 463, 520, 521, 522, 544, 545, 546, 547, 548, 549, 550, 551], "invalid": [123, 422, 444, 520, 521, 522], "thirdli": 123, "native_float32": 123, "importantli": [123, 130, 133, 144], "varieti": [123, 124], "conveni": [123, 124, 126, 129, 131, 132], "arguabl": [123, 124], "compound": 123, "overflow": [123, 269, 273, 511, 518], "arr": [123, 124, 489, 490], "scalar": [123, 128, 133, 145, 167, 175, 329, 372, 389, 392, 422, 445], "settabl": [123, 124], "jnp": [123, 124, 125, 126, 133, 523], "jaxarrai": [123, 124, 125, 126], "mx": [123, 124, 125, 523], "nd": [123, 124, 125, 128, 133, 523], "deleg": 123, "fill_valu": [123, 167, 174, 175, 269, 296], "as_n": [123, 186, 197, 198, 199, 200, 219, 238, 239, 260], "idx": [124, 130, 329, 331], "tpu": [124, 219, 241, 266], "aliv": [124, 219, 253, 257, 259, 329, 353, 371, 373], "amount": [124, 219, 265, 447, 448, 449, 450], "memori": [124, 125, 143, 145, 219, 237, 258, 263, 265, 268, 409, 419, 523], "dual": 124, "thrown": [124, 145, 329, 363], "rare": [124, 145], "program": 125, "strictli": 125, "ration": 125, "speak": 125, "subtli": 125, "ensure_in_backend": [125, 329, 363], "x_nativ": 125, "val_n": 125, "is_ivy_arrai": [125, 130, 329], "is_vari": [125, 393], "assign": [125, 130], "elif": 125, "irrespect": [125, 130, 186, 192], "inclus": [125, 167, 168, 491, 493], "omit": [125, 126, 503, 504, 505, 507], "unspecifi": [125, 269, 317, 318, 422, 427, 451, 463], "predominantli": [125, 144], "math": [125, 133, 523], "presenc": 125, "altern": [125, 131], "_wrap_fn": 125, "maxim": [125, 128], "inner": [125, 130, 422, 427, 430, 467, 468, 469, 470], "third": [125, 145, 422, 440, 503, 504], "addition": [125, 126], "leverag": 125, "equival": [125, 131, 133, 167, 168, 269, 283, 308, 309, 318, 422, 433, 436, 439, 445], "input_arrai": 125, "adress": 126, "revisit": [126, 133], "dedic": [126, 130, 132, 393, 407, 533, 534], "__div__": 126, "dicat": 126, "futher": 126, "absenc": 126, "pep": 126, "484": 126, "annot": 126, "brittl": 126, "intend": [126, 511, 518], "freeli": 126, "inde": [126, 145], "flexibl": 126, "original_typ": 126, "cumbersom": 126, "sound": 127, "higher": [127, 128, 133, 145, 393, 396, 398, 400, 401, 402], "overview": [127, 144], "handler": [127, 129, 133, 523], "fledg": [128, 129], "syntact": [128, 133], "clip_by_valu": [128, 133], "clamp": [128, 133], "behavior": [128, 145, 269, 317, 318, 503, 504, 505, 507], "fit": [128, 451, 458], "construct": [128, 129, 132, 133, 451, 465, 544, 545, 546, 547, 548, 549, 550, 551, 553, 554, 555, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567], "num": [128, 167, 176, 177], "power_seq": 128, "okai": 128, "bound": 128, "resid": [128, 132], "edg": [128, 133, 451, 452, 454, 466, 523], "larger": [128, 133, 186, 202, 451, 452, 460, 511, 517, 519], "ml_framework": [128, 133, 167, 168], "current_framework": [128, 133], "furthermor": 128, "concaten": [128, 131, 219, 248, 329, 350, 451, 453, 523], "framework_handl": 128, "face": 128, "verbos": [128, 523, 570], "cprint": [128, 569], "framework_stack": 128, "_determine_framework_from_arg": 128, "valueerror": [128, 451, 462], "get_framework": 128, "neither": [128, 269, 273, 313], "illustr": [128, 144], "un": [128, 186, 206], "nn": [128, 133, 167, 178, 523], "init_h": [128, 409, 419], "init_c": [128, 409, 419], "kernel": [128, 145, 409, 419], "recurrent_kernel": [128, 409, 419], "bia": [128, 132, 409, 418, 419, 544, 545, 546, 547, 548, 549, 550, 551, 554], "recurrent_bia": [128, 409, 419], "x_shape": 128, "batch_shap": [128, 130, 133, 329, 372, 409, 419, 420, 421, 422, 446, 491, 492, 544, 553], "timestep": [128, 409, 419, 544, 553], "input_channel": [128, 132, 544, 545, 546, 547, 548, 549, 550, 553, 554], "x_flat": 128, "wi": 128, "wi_x": 128, "wii_x": 128, "wif_x": 128, "wig_x": 128, "wio_x": 128, "recurr": [128, 409, 419], "wh": 128, "lstm": [128, 409, 419, 544], "ht": 128, "ct": 128, "hts_list": 128, "unrol": [128, 131, 409, 419], "wii_xt": 128, "wif_xt": 128, "wig_xt": 128, "wio_xt": 128, "zip": 128, "htm1": 128, "ctm1": 128, "wh_htm1": 128, "whi_htm1": 128, "whf_htm1": 128, "whg_htm1": 128, "who_htm1": 128, "ft": 128, "gt": 128, "ot": 128, "offici": 128, "reliabl": 128, "sacrific": 128, "hear": 128, "virtu": 128, "pure_ivi": 128, "reduce_mean": [128, 131, 132, 133, 523], "reduce_sum": [128, 523], "reduce_var": 128, "compile_graph": [128, 133], "pure_torch": 128, "cat": [128, 133], "backbon": [128, 131], "_layer": 128, "super": [128, 131, 132, 133], "clean": [128, 129, 131], "random_unifrom": 128, "unclean": 128, "wx": 128, "temp": 128, "torchscript": 128, "fn": [128, 130, 146, 147, 148, 149, 150, 151, 152, 153, 154, 186, 203, 204, 219, 228, 229, 329, 331, 390, 471, 472, 477, 478, 479, 481, 482, 483, 526, 528], "example_input": [128, 164, 165], "static_argnum": [128, 164, 165], "static_argnam": [128, 164, 165], "jit": [128, 145], "frontend": 129, "primit": [129, 145], "describ": [129, 133, 511, 512, 516, 517, 518], "hierarch": [129, 131, 132], "straight": [130, 523], "arraywithlinalg": 130, "arraywithlog": 130, "arraywithmath": 130, "arraywithmeta": 130, "arraywithreduct": 130, "is_native_arrai": [130, 329], "_shape": 130, "_size": 130, "functool": 130, "mul": 130, "len": [130, 133, 167, 178], "_dtype": 130, "_devic": 130, "_dev_str": 130, "_pre_repr": 130, "_post_repr": 130, "ndim": [130, 422, 437, 440], "mt": 130, "answer": [130, 145], "consol": 130, "typeerror": 130, "immut": 130, "behav": 130, "claim": 130, "truli": 130, "_native_wrapp": 130, "attributeerror": 130, "genuin": 130, "some_method": 130, "similarli": [130, 167, 178], "rewritten": 130, "__pow__": 130, "strang": 130, "power": [130, 131, 132, 269, 283, 291, 317, 329, 354, 377, 384, 422, 432, 535], "enforc": 130, "notic": 130, "appear": [130, 451, 455], "invers": [130, 144, 269, 271, 272, 274, 275, 276, 277, 278, 422, 429, 436], "_wrap_method": 130, "func_wrapp": [130, 146, 147, 148, 149, 150, 151, 152, 153, 154], "__name__": 130, "non_wrapped_method": 130, "_method_wrap": 130, "native_arg": 130, "native_kwarg": 130, "inner_fn": 130, "whist": 130, "unwrap": 130, "transit": 130, "needlessli": 130, "randn": 130, "_unwrap_method": 130, "method_wrap": 130, "compartment": 130, "public": [130, 329, 339], "newshap": [130, 451, 459], "new_shap": 130, "tidi": 130, "shorter": 130, "crystal": 130, "41": [130, 269, 284, 323, 422, 423, 511, 518], "enough": [130, 131, 132], "ton": 131, "ado": [131, 132], "incred": [131, 145], "hash": 131, "soup": 131, "walk": [131, 132], "dct": 131, "cnt": 131, "combo": [131, 523, 529], "hold": [131, 329, 375, 376], "1000": [131, 269, 323], "uda": 131, "3333": 131, "6667": 131, "178": 131, "new_weight": 131, "0600": 131, "3100": 131, "2400": 131, "6900": 131, "delimit": 131, "autocomplet": 131, "midwai": 131, "agent": 131, "total_spe": 131, "total_height": 131, "total_width": 131, "ag": 131, "tot": 131, "total_": 131, "total_h": 131, "batch_siz": [131, 409, 410, 411, 412, 413, 414, 415, 416, 491, 492], "dir": 131, "adam": [131, 132, 133, 393, 395, 396, 400, 523, 560, 562], "cnt0": 131, "cnt1": 131, "diff_0": 131, "diff_1": 131, "config0": 131, "config1": 131, "Not": [131, 132, 145, 166], "decod": 131, "l0": 131, "l1": [131, 422, 445], "depth": [131, 132, 133, 144, 219, 243, 247, 251, 329, 357, 372, 471, 483, 556, 557], "clearer": 131, "truncat": 131, "decoder__l0": 131, "decoder__l1": 131, "encoder__l0": 131, "encoder__l1": 131, "height": 131, "l0__b": 131, "l0__w": 131, "l1__b": 131, "l1__w": 131, "printabl": 131, "obviou": 131, "foresight": 131, "untidili": 131, "update_ag": 131, "normalize_img": 131, "img": 131, "img_max": 131, "reduce_max": [131, 523], "img_min": 131, "reduce_min": [131, 523], "img_rang": 131, "agent_posit": 131, "agent_veloc": 131, "agent_cam_front_rgb": 131, "agent_cam_front_depth": 131, "agent_cam_rear_rgb": 131, "agent_cam_rear_depth": 131, "agent_cam_lidar": 131, "normal": [131, 451, 463, 489, 490, 491, 494, 558, 559], "cleaner": 131, "camera": 131, "front_rgb": 131, "front_depth": 131, "rear_rgb": 131, "rear_depth": 131, "lidar": 131, "rgb": 131, "rear": 131, "veloc": 131, "cam": 131, "cam_max": 131, "cam_min": 131, "cam_rang": 131, "Of": 131, "ideal": 131, "perman": 131, "afterward": 131, "thread": 131, "incorpor": 131, "pretti": 131, "straightforward": 131, "dataload": [131, 143, 523], "_cnt": 131, "img_": 131, "_dataset_s": 131, "_batch_siz": 131, "_count": [131, 132], "__next__": 131, "filenam": 131, "img_fnam": 131, "fname": 131, "loaded_img": 131, "cv2": 131, "imread": 131, "loader": [131, 145], "32": [131, 156, 158, 269, 284, 409, 412, 415, 422, 435, 498, 502, 511, 512], "batch_slic": 131, "model": [131, 132, 523], "mymodel": [131, 523], "linear0": [131, 132, 523], "linear1": [131, 132, 523], "x_in": [131, 132, 133, 523], "001": [131, 132, 489, 490], "loss_fn": [131, 132, 133, 523], "0145": 131, "grad_fn": 131, "addbackward0": 131, "_create_vari": 132, "output_channel": [132, 544, 545, 546, 547, 548, 549, 550, 553, 554], "with_bia": [132, 544, 554], "_input_channel": 132, "_output_channel": 132, "_w_shape": 132, "_b_shape": 132, "_with_bia": 132, "8979": 132, "3198": 132, "0196": 132, "3126": 132, "3717": 132, "9687": 132, "6958": 132, "5122": 132, "3902": 132, "8800": 132, "5613": 132, "1982": 132, "nightmar": 132, "overcom": 132, "fc": 132, "9563": 132, "impact": 132, "v0": 132, "v1": 132, "6440": 132, "key0": 132, "1823": 132, "8075": 132, "linear3": 132, "v2": 132, "2346": 132, "counter": 132, "hidden": [132, 409, 419, 544, 553], "fed": [132, 219, 263], "1300": 132, "decoupl": 132, "scheme": 132, "weight_initi": [132, 544, 545, 546, 547, 548, 549, 550, 551, 553, 554], "glorotuniform": [132, 535, 544, 545, 546, 547, 548, 549, 550, 551, 553, 554], "bias_initi": [132, 544, 545, 546, 547, 548, 549, 550, 551, 554], "_w_init": 132, "_b_init": 132, "create_vari": [132, 535], "var_shap": [132, 535], "fan_out": [132, 535], "fan_in": [132, 535], "fan_mod": [132, 535], "fan_sum": 132, "slight": 132, "misnom": 132, "saw": 132, "vanilla": [132, 467, 469], "descent": [132, 393, 398, 560, 565], "lar": [132, 393, 400, 401, 560], "lamb": [132, 393, 400, 560], "compile_on_next_step": [132, 556, 557, 560, 561, 562, 563, 564, 565], "_beta1": 132, "_beta2": 132, "_epsilon": 132, "_mw": 132, "_vw": 132, "_first_pass": 132, "_should_compil": 132, "_step": [132, 560, 564], "new_v": 132, "_lr": 132, "isinst": [132, 133, 329, 387], "_inplac": 132, "_stop_gradi": 132, "set_stat": [132, 560, 561, 562, 563, 564, 565], "mw": [132, 393, 395, 396], "vw": [132, 393, 395, 396], "pre": [133, 145, 219], "captur": 133, "sparse_funct": 133, "num_class": [133, 491, 492], "num_dim": 133, "new_axi": 133, "_linear": 133, "to_backend": 133, "jax_graph": 133, "learnabl": [133, 489, 490, 558, 559], "to_ivy_modul": [133, 533], "thinli": 133, "whilst": 133, "to_haiku_modul": 133, "hk": 133, "loss_fn_t": 133, "transform": [133, 144, 409, 417, 418], "without_apply_rng": 133, "rng": 133, "prngkei": 133, "init": 133, "update_rul": 133, "01": [133, 269, 319], "tree_multimap": 133, "mechan": [143, 145, 523], "vision": [143, 523], "robot": [143, 523], "focus": 144, "field": [144, 422, 427, 437, 440, 503, 504, 505], "perfect": 144, "3d": [144, 544, 549, 550], "differenti": 144, "demo": [144, 523], "orient": 144, "pose": 144, "euler": [144, 166], "quaternion": 144, "rotat": 144, "matric": [144, 167, 178, 182, 183, 409, 418, 422, 423, 425, 426, 427, 428, 429, 432, 433, 434, 436, 437, 439, 440, 441, 443], "angl": [144, 269, 277, 287, 322], "ivy_mech": 144, "target_facing_rotation_matrix": 144, "polar_to_cartesian_coord": 144, "ordin": [144, 422, 439], "warp": 144, "optic": 144, "voxel": 144, "ivy_vis": 144, "coords_to_voxel_grid": 144, "render_pixel_coord": 144, "neural": [144, 409, 523, 530, 544], "radianc": 144, "nerf": 144, "trajectori": 144, "motion": 144, "plan": [144, 523], "mobil": 144, "ivy_robot": 144, "sample_spline_path": 144, "rigidmobil": 144, "sample_bodi": 144, "drone": 144, "sample_link": 144, "openai": 144, "swimmer": 144, "cumul": [144, 329, 341, 342], "reward": 144, "supervis": 144, "reinforc": 144, "door": [144, 145], "intersect": 144, "cartpol": 144, "mountain_car": 144, "pendulum": 144, "reacher": 144, "polici": 144, "condit": [144, 164, 165, 471, 481, 482, 498, 502], "learnt": 144, "ture": 144, "ntm": 144, "egospher": 144, "spatial": 144, "esm": 144, "ivy_memori": 144, "egocentr": 144, "room": 144, "inspir": 144, "doubt": 145, "grate": 145, "put": 145, "probe": 145, "undergo": 145, "remark": 145, "surpris": 145, "backward": [145, 269, 318, 422, 444, 520, 521, 522], "lock": 145, "contunu": 145, "minor": 145, "xla": 145, "buffer": 145, "kind": [145, 186, 202, 205, 269, 317, 511, 516, 518], "gold": 145, "dex": 145, "phase": 145, "lax": 145, "scan": 145, "tricki": 145, "predictor": 145, "tight": 145, "driver": 145, "schedul": 145, "algorithm": [145, 409, 410, 411, 412, 413, 414, 415, 416, 544, 545, 546, 547, 548, 549, 550, 551], "dispatch": 145, "Will": 145, "ast": 145, "dynamic": 145, "cond": 145, "jacobian": 145, "checkpoint": 145, "autodiff": 145, "shine": 145, "merci": 145, "superset": 145, "cluster": 145, "compet": 145, "paradigm": 145, "parallelis": [145, 219, 228, 229], "spmd": 145, "mixtur": 145, "expert": 145, "sophist": 145, "depart": 145, "routin": 145, "hundr": 145, "thousand": 145, "deepli": [145, 471, 473], "broadli": 145, "heavili": 145, "supplementari": 145, "Is": 145, "reusabl": 145, "fanci": 145, "fusion": 145, "lose": 145, "vmap": 145, "pmap": 145, "overhead": 145, "ineffici": 145, "eventu": 145, "supplement": 145, "backdoor": 145, "callback": 145, "record": 145, "metric": 145, "somewhat": 145, "outsourc": 145, "inputs_to_ivy_arrai": 146, "gaussian": [156, 157], "leaki": [156, 157, 158], "alpha": [156, 158], "rectifi": [156, 158, 159], "slope": [156, 158], "39": [156, 158, 269, 291, 422, 435, 511, 512], "85": [156, 158, 269, 284], "48": [156, 158, 269, 323, 422, 435, 511, 512], "88": [156, 158, 269, 284, 422, 435, 511, 512], "269": [156, 160], "731": [156, 160], "881": [156, 160], "214": [156, 160], "978": [156, 160], "891": [156, 160], "422": [156, 161], "155": [156, 161], "0768": [156, 161], "231": [156, 161], "693": [156, 161, 447, 450], "49": [156, 161, 269, 323, 511, 512], "147": [156, 161], "363": [156, 161], "3461": [156, 162], "6491": [156, 162], "535": [156, 162], "hyperbol": [156, 163, 269, 272, 275, 278, 287, 322, 327], "55": [156, 163, 409, 415, 422, 435, 511, 512], "501": [156, 163], "762": [156, 163], "964": [156, 163], "faster": [164, 165], "invoc": [164, 165], "718281828459045": 166, "newaxi": 166, "alia": 166, "pi": 166, "141592653589793": 166, "mathemat": [166, 269, 273, 277, 292, 313, 422, 445], "half": [167, 168, 491, 493, 495], "chosen": [167, 168, 269, 277, 498, 502], "distanc": [167, 168], "adjac": [167, 168], "interpret": [167, 169, 179], "uniniti": [167, 170, 171], "n_row": [167, 172], "n_col": [167, 172], "elsewher": [167, 172, 498, 502], "row": [167, 172, 422, 439, 440, 491, 492, 498, 501], "column": [167, 172, 422, 427, 437, 439, 440], "__dlpack__": [167, 173, 219, 264], "interchang": [167, 173, 451, 464], "endpoint": [167, 176], "xy": [167, 178], "coordin": [167, 178, 269, 277], "cartesian": [167, 178], "ij": [167, 178, 511, 512], "rank": [167, 178, 329, 391, 422, 424, 433, 437, 439, 443, 444, 445, 451, 454, 455, 463, 466, 498, 501, 520, 521, 522], "ni": [167, 178], "xi": [167, 178], "n1": [167, 178], "n2": [167, 178], "n3": [167, 178], "accordingli": [167, 178, 269, 292, 422, 445, 498, 500, 503, 504, 505, 507, 511, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522], "xv": [167, 178], "yv": [167, 178], "triangular": [167, 182, 183, 422, 423, 437], "innermost": [167, 182, 183, 422, 423, 425, 426, 427, 428, 429, 433, 434, 436, 437, 439, 440, 441, 443], "mxn": [167, 182, 183, 422, 426, 433, 434, 436, 437, 441, 443], "defaultdtyp": [186, 187], "defaultfloatdtyp": [186, 188], "float_dtyp": [186, 198, 212], "defaultintdtyp": [186, 189], "dtype_in": [186, 190, 191, 201, 206, 207, 208, 218], "incompat": [186, 194], "from_": [186, 195], "occur": [186, 195, 498, 499, 500, 503, 504, 505, 507], "closest": [186, 196, 269, 285, 293, 294, 319, 328], "floatdtyp": [186, 198], "int_dtyp": [186, 199, 213], "intdtyp": [186, 199], "followng": [186, 202], "occupi": [186, 202, 205, 329, 375, 376], "ep": [186, 202, 422, 433, 436], "smallest_norm": [186, 202], "precis": [186, 202, 269, 313, 323], "encapsul": [186, 205], "type1": [186, 209], "type2": [186, 209], "arrays_and_dtyp": [186, 210], "ret1": [186, 214], "ret2": [186, 214], "noinspect": [187, 188, 189, 220, 394], "pyshadowingnam": [187, 188, 189, 220, 394], "defaultdevic": [219, 220], "__enter__": 219, "_dev": 219, "initialis": 219, "devcloneditem": [219, 241], "multidevitem": [219, 221, 224], "devclonedit": 219, "multidevit": [219, 222, 225, 228, 229, 233], "devclonednest": 219, "multidevnest": [219, 223, 226], "devdistitem": 219, "devdistit": 219, "devdistnest": 219, "devmanag": [219, 227], "dev_mapp": 219, "da_dim_s": 219, "safety_factor": 219, "min_dev_dim_s": 219, "max_dev_dim_step_ratio": 219, "min_unit_dev_tune_step": 219, "min_sf_tune_step": 219, "starting_split_factor": 219, "max_split_factor_step_s": 219, "tune_dev_alloc": 219, "tune_dev_split": 219, "mapper": [219, 228, 229], "receivess": 219, "ratio": [219, 393, 400, 560, 562], "safe": [219, 228], "oom": 219, "tune": 219, "da_tune_step": 219, "ds_tune_step": 219, "to_clon": 219, "to_distribut": 219, "multidevic": [219, 228], "parallel": [219, 228, 229], "mutlidevic": [219, 228], "repeated_config_check": 219, "tune_step": 219, "devmapp": [219, 229], "ret_fn": [219, 228, 229], "queue_class": [219, 228, 229], "worker_class": [219, 228, 229], "worker": [219, 228, 229], "used_dev": [219, 228], "sf": [219, 228], "devmappermultiproc": 219, "multidev": [219, 230, 231, 232, 251], "profil": 219, "save_dir": [219, 234], "deviceic": [219, 240], "spread": [219, 251], "139740789224448": [219, 253], "physic": [219, 255], "x3": [219, 257], "x4": [219, 257], "process_specif": [219, 258, 268], "percentag": [219, 258], "ram": [219, 258, 265, 268], "alon": [219, 258, 268], "attr_onli": [219, 259], "chunk": [219, 261, 262, 263], "max_chunk_s": [219, 263], "chunk_siz": [219, 263], "input_ax": [219, 263], "output_ax": [219, 263], "feed": [219, 263], "fist": [219, 263], "stream": [219, 264], "caveat": [219, 264], "portabl": [219, 264, 523], "gb": [219, 265, 268], "reset": [219, 267], "magnitud": [269, 270, 273, 313, 422, 440, 441], "princip": [269, 271, 274, 276], "cosin": [269, 271, 272, 286, 287], "x1_i": [269, 273, 277, 279, 281, 282, 283, 284, 288, 289, 294, 295, 296, 300, 301, 306, 307, 309, 310, 313, 315, 317, 318, 325], "x2_i": [269, 273, 277, 279, 281, 282, 283, 284, 288, 289, 294, 295, 296, 300, 301, 306, 307, 309, 310, 313, 315, 317, 318, 325], "finit": [269, 273, 277, 297, 313, 317, 318], "nor": [269, 273, 313], "nearest": [269, 273, 313, 319], "2019": [269, 273, 292, 313], "commut": [269, 273], "sine": [269, 274, 275, 321, 322], "57": [269, 274, 284, 287], "524": [269, 274], "644": [269, 274], "201": [269, 274, 319], "305": [269, 274], "412": [269, 274], "quotient": [269, 277], "notat": [269, 277, 511, 512], "denot": [269, 277], "pair": [269, 277, 409, 421, 422, 424], "quadrant": [269, 277], "3\u03c0": [269, 277], "549": [269, 278], "bitwis": [269, 279, 282, 284, 310], "AND": [269, 279, 307, 520, 521], "binari": [269, 279, 282, 284, 310, 447, 448], "invert": [269, 280], "arithmet": [269, 283, 511, 514], "propag": [269, 283, 511, 513, 514, 515, 517, 518, 519], "thu": [269, 283, 317, 318, 422, 427], "lh": [269, 283], "rh": [269, 283], "xor": [269, 284, 310], "78": [269, 284, 422, 435, 511, 512], "91": [269, 284, 422, 435, 511, 512], "23": [269, 284, 409, 415, 422, 426, 498, 502], "66": [269, 284, 422, 435, 511, 512], "77": [269, 284, 422, 435, 511, 512], "79": [269, 284], "89": [269, 284, 422, 442, 511, 518], "98": [269, 284, 422, 435, 498, 502, 511, 512], "26": [269, 284, 409, 416, 422, 426, 435, 442, 511, 512], "21": [269, 284, 329, 341, 422, 426, 435, 447, 450, 511, 512], "34": [269, 284, 323], "24": [269, 284, 323, 329, 341, 422, 426, 435, 511, 512], "51": [269, 284], "27": [269, 284, 287, 323, 409, 421, 422, 435, 511, 512], "74": [269, 284], "59": [269, 284], "416": [269, 286], "76": [269, 287, 422, 442, 511, 512], "122": [269, 287], "368": [269, 287], "670": [269, 287], "202": [269, 287, 319], "548": [269, 287], "1490": [269, 287], "dividend": [269, 288, 318], "divisor": [269, 288, 318, 393, 395, 396, 400, 511, 517, 519, 560, 561, 562], "gauss": [269, 290], "exponenti": [269, 290, 291, 306, 317], "logarithm": [269, 291, 302, 303, 304, 305, 306, 422, 438], "72": [269, 291, 422, 435, 511, 512], "accur": [269, 292], "fdlibm": [269, 292], "compliant": [269, 292, 308, 309, 511, 513, 514, 515], "greatest": [269, 293, 294], "out_i": [269, 297, 298, 299], "threshold": [269, 311, 312], "exce": [269, 312], "y_i": [269, 314], "expon": [269, 317, 329, 384], "versu": [269, 317], "odd": [269, 317], "modulu": [269, 318], "primarili": [269, 318], "5654": [269, 319], "034": [269, 319], "433": [269, 319], "343": [269, 319], "44": [269, 319, 323, 324, 422, 435, 498, 502, 511, 512], "30": [269, 319, 422, 435, 511, 512, 535, 541], "81": [269, 319, 324, 511, 512], "527": [269, 319], "301": [269, 319], "indistinguish": [269, 323], "infinit": [269, 323], "83": [269, 323], "32455532": [269, 323], "89897949": [269, 323], "50": [269, 323, 422, 435, 498, 501, 511, 512], "31": [269, 323], "169": [269, 323], "63": [269, 323, 422, 423, 435, 511, 512], "47": [269, 323], "73": [269, 323, 422, 423, 489, 490], "93": [269, 323], "35": [269, 323, 409, 421, 422, 424, 498, 502, 511, 512], "09": [269, 324, 409, 421], "61": [269, 324, 447, 448], "546": [269, 326], "842": [269, 326], "916": [269, 326, 447, 448], "96": [269, 326, 422, 435, 511, 512], "996": [269, 326], "328": [269, 326], "decim": [269, 328], "inspect": [329, 331, 527, 528], "downscal": [329, 337, 338], "60": [329, 341, 422, 435, 511, 512], "default_v": [329, 344], "catch_except": [329, 344], "rev": [329, 344], "with_cal": [329, 344], "arrang": [329, 345], "123": [329, 348], "mod": [329, 349], "max_freq": [329, 350], "num_band": [329, 350], "pad": [329, 350, 409, 410, 411, 412, 413, 414, 415, 416, 451, 454, 466, 544, 545, 546, 547, 548, 549, 550, 551], "fourier": [329, 350], "band": [329, 350], "linearli": [329, 350, 422, 439], "oppos": [329, 350], "geometr": [329, 350], "seen_set": [329, 357], "local_set": [329, 357], "decrement": [329, 361], "is_arrai": 329, "allow_dupl": [329, 369], "forkserv": [329, 370], "spawn": [329, 370], "hot": [329, 372], "scatter": [329, 372, 375, 376], "overrid": [329, 372], "tmp_dr": [329, 380], "temporari": [329, 380], "min_denomin": [329, 383], "stabil": [329, 383, 384, 508, 509, 510], "_min_denomin": [329, 383], "min_bas": [329, 384], "_min_bas": [329, 384, 489, 490, 558, 559], "100000023841858": [329, 387], "200000047683716": [329, 387], "299999952316284": [329, 387], "400000095367432": [329, 387], "599999904632568": [329, 387], "101": [329, 388], "unpack": [329, 391], "gradienttrack": [393, 394], "delta": [393, 395], "cost": [393, 395, 396, 398, 400, 401, 402, 467, 468, 469, 470], "ws": [393, 395, 396, 398, 400, 401, 402], "en": [393, 395, 396], "wikipedia": [393, 395, 396], "wiki": [393, 395, 396], "stochastic_gradient_desc": [393, 395, 396], "dc": [393, 395, 396, 398, 400, 401, 402], "dw": [393, 395, 396, 398, 400, 401, 402], "averag": [393, 395, 396, 400, 467, 468, 469], "forget": [393, 395, 396, 400, 560, 561, 562], "rate": [393, 396, 398, 400, 401, 402, 467, 468, 469, 470, 544, 555, 560, 561, 562, 563, 564, 565], "ws_new": [393, 396, 398, 400, 401, 402], "retain": [393, 397], "trust": [393, 400, 560, 562], "decai": [393, 400, 401, 560, 562, 563], "layerwis": [393, 401, 560, 563], "stride": [409, 410, 411, 412, 413, 414, 415, 416, 544, 545, 546, 547, 548, 549, 550, 551], "data_format": [409, 410, 411, 412, 413, 414, 415, 416, 544, 545, 546, 547, 548, 549, 550, 551], "nwc": [409, 410, 411, 544, 545, 546], "dilat": [409, 410, 411, 412, 413, 414, 415, 416, 544, 545, 546, 547, 548, 549, 550, 551], "convolut": [409, 410, 411, 412, 413, 414, 415, 416, 544, 545, 546, 547, 548, 549, 550, 551], "d_in": [409, 410, 411, 412, 413, 414, 415], "fw": [409, 410, 411, 412, 413, 414, 415, 416], "d_out": [409, 410, 411, 412, 413, 414, 415], "slide": [409, 410, 411, 412, 413, 414, 415, 416, 544, 545, 546, 547, 548, 549, 550, 551], "ncw": [409, 410, 411, 544, 545, 546], "wio": [409, 410], "output_shap": [409, 411, 413, 415, 544, 546, 548, 550], "nhwc": [409, 412, 413, 416, 544, 547, 548, 551], "fh": [409, 412, 413, 414, 415, 416], "nchw": [409, 412, 413, 416, 544, 547, 548, 551], "hwio": [409, 412], "unequ": [409, 412], "28": [409, 412, 415, 416, 422, 435, 511, 512], "unsqueez": [409, 412, 416], "ndhwc": [409, 414, 415, 544, 549, 550], "volum": [409, 414], "fd": [409, 414, 415], "ncdhw": [409, 414, 415, 544, 549, 550], "dhwio": [409, 414], "256": [409, 415], "258": [409, 415], "128": [409, 415, 422, 435], "depthwis": [409, 416, 544, 551], "333": [409, 416], "inp": [409, 416], "prob": [409, 417, 491, 492, 544, 552], "randomli": [409, 417, 544, 552], "bernoulli": [409, 417], "out_featur": [409, 417, 418], "incom": [409, 418], "outer_batch_shap": [409, 418], "inner_batch_shap": [409, 418], "in_featur": [409, 418], "cell": [409, 419, 544, 553], "num_queri": [409, 420, 421], "x_feat_dim": [409, 420], "num_kei": [409, 420, 421], "cont_feat_dim": [409, 420], "numhead": [409, 420], "feat_dim": [409, 420, 421], "out_feat_dim": [409, 420], "score": [409, 421], "04": [409, 421], "03": [409, 421, 489, 490], "08": [409, 421], "decomposit": [422, 423, 437, 440], "symmetr": [422, 423, 427, 428, 446], "u": [422, 423, 440], "577": [422, 423], "707": [422, 423], "vif": [422, 424], "92": [422, 425], "293": [422, 425], "46997": [422, 425], "axis2": [422, 426], "eigendecomposit": [422, 427], "qlq\u1d40": [422, 427], "orthogon": [422, 427], "eig": [422, 427], "namedtupl": [422, 427, 437, 440, 503, 504, 505], "eigenvalu": [422, 427, 428], "eigenvector": [422, 427], "75": [422, 429, 435], "prepend": [422, 430], "fro": [422, 431], "rtol": [422, 433, 436], "singular": [422, 433, 436, 440, 441], "toler": [422, 433, 436], "largest_singular_valu": [422, 433, 436], "array_lik": [422, 435], "33": [422, 435, 489, 490, 511, 512], "36": [422, 435, 511, 512], "45": [422, 435, 451, 461, 489, 490, 511, 512], "65": [422, 435, 511, 512], "84": [422, 435, 511, 512], "105": [422, 435, 447, 448], "112": [422, 435, 511, 512], "104": [422, 435, 511, 512], "120": [422, 435], "moor": [422, 436], "penros": [422, 436], "pseudo": [422, 436], "orthonorm": [422, 437, 440], "2d": [422, 438, 544, 547, 548, 551], "logdet": [422, 438], "coeffici": [422, 439], "full_matric": [422, 440], "usvh": [422, 440], "vh": [422, 440], "hermitian": [422, 440], "et": [422, 440], "cetera": [422, 440], "adjoint": [422, 440], "reconstruct": [422, 440, 503, 504, 506], "reconstructed_x": [422, 440], "contract": [422, 442, 511, 512], "doubl": [422, 442], "singleton": [422, 445, 451, 462, 498, 500, 511, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522], "liter": [422, 445], "manhattan": [422, 445], "l2": [422, 445], "euclidean": [422, 445], "mathbf": [422, 446], "mathbb": [422, 446], "skew": [422, 446], "entropi": [447, 448, 449, 450], "predict": [447, 448, 449, 450], "smooth": [447, 448, 449, 450], "223": [447, 448], "357": [447, 448, 450], "511": [447, 448], "discret": [447, 449], "3862944": [447, 449], "35667497": [447, 449], "spars": [447, 450], "logit": [447, 450], "793291": [447, 450], "512926": [447, 450], "before_1": [451, 454, 466], "after_1": [451, 454, 466], "before_n": [451, 454, 466], "after_n": [451, 454, 466], "insert": [451, 455, 471, 476, 498, 499], "manipulation_funct": [451, 455], "reorder": [451, 456], "permut": [451, 457, 464], "repetit": [451, 458, 465], "restor": [451, 460], "classivi": [451, 461], "famili": [451, 463], "intxx": [451, 463], "floatxx": [451, 463], "fomaml_step": 467, "inner_cost_fn": [467, 468, 469], "outer_cost_fn": [467, 468, 469], "inner_grad_step": [467, 468, 469, 470], "inner_learning_r": [467, 468, 469, 470], "inner_optimization_step": [467, 468, 469, 470], "inner_batch_fn": [467, 468, 469], "outer_batch_fn": [467, 468, 469], "average_across_step": [467, 468, 469], "inner_v": [467, 468, 469], "keep_inner_v": [467, 468, 469], "outer_v": [467, 468, 469], "keep_outer_v": [467, 468, 469], "return_inner_v": [467, 468, 469, 470], "num_task": [467, 468, 469, 470], "maml": [467, 468, 469], "recev": [467, 468, 469], "0x7f2b24f38d30": [467, 468, 469, 470], "maml_step": 467, "rece": [467, 469], "reptile_step": 467, "cost_fn": [467, 470], "reptil": [467, 470], "receivng": [467, 470], "all_nested_indic": 471, "include_nest": [471, 472], "_index": [471, 472, 482], "_base": [471, 472, 481, 482], "copy_nest": 471, "to_mut": [471, 473, 483], "mutabl": [471, 473, 483], "insert_into_nest_at_index": 471, "insert_into_nest_at_indic": 471, "map_nest_at_index": 471, "map_nest_at_indic": 471, "multi_index_nest": 471, "nested_ani": 471, "check_nest": [471, 481, 482], "conditon": [471, 481, 482], "nested_indices_wher": 471, "stop_after_n_found": [471, 482], "_depth": [471, 483], "_tuple_check_fn": [471, 483], "_list_check_fn": [471, 483], "_dict_check_fn": [471, 483], "nested_multi_map": 471, "nest0": [471, 484], "ivy_arrai": [471, 484], "funciton": [471, 484], "prune_nest_at_index": 471, "prune_nest_at_indic": 471, "set_nest_at_index": 471, "set_nest_at_indic": 471, "mini": [489, 490, 558, 559], "gamma": [489, 490], "beta": [489, 490], "0976": [489, 490], "3452": [489, 490], "2740": [489, 490], "1047": [489, 490], "5886": [489, 490], "2732": [489, 490], "7696": [489, 490], "7024": [489, 490], "2518": [489, 490], "58": [489, 490, 503, 504], "283": [489, 490], "585": [489, 490], "909": [489, 490], "628": [489, 490], "997": [489, 490], "225": [489, 490], "425": [489, 490], "norm_idx": [489, 490], "228": [489, 490], "0285": [489, 490], "199": [489, 490], "204": [489, 490], "population_s": [491, 492], "num_sampl": [491, 492], "draw": [491, 492, 494, 495], "unnorm": [491, 492], "drawn": [491, 492, 493, 494, 495], "home": [491, 492, 494, 495], "uniformli": [491, 493, 495], "highest": [491, 493], "parameter": [491, 494, 495], "6444774682897879": [491, 494], "811": [491, 494], "508": [491, 494], "564": [491, 494], "7268672": [491, 494], "968": [491, 494], "175": [491, 494, 503, 504], "064": [491, 494], "40935726": [491, 494], "556": [491, 494], "26431865": [491, 495], "475": [491, 495], "878": [491, 495], "861": [491, 495], "89150229": [491, 495], "89629126": [491, 495], "94198485": [491, 495], "91405606": [491, 495], "72848724": [491, 495], "7550739": [491, 495], "624": [491, 495], "00109": [491, 495], "occurr": [498, 499, 500, 503, 504], "yield": [498, 502], "43": [498, 502], "x_j": [503, 504, 505, 507], "impli": [503, 504, 505, 507], "inverse_indic": [503, 504, 506], "aggreg": [503, 504], "fourth": [503, 504], "607": [503, 504], "735": [503, 504], "667": [503, 504], "381": [503, 504], "857": [503, 504], "0396": [503, 504], "166": [503, 504], "828": [503, 504], "144": [503, 504], "40501155": [503, 504], "77361575": [503, 504], "97776199": [503, 504], "36831157": [503, 504], "89148434": [503, 504], "9512272": [503, 504], "67542176": [503, 504], "41985657": [503, 504], "23478023": [503, 504], "1141": [503, 504], "8101": [503, 504], "9298": [503, 504], "8460": [503, 504], "2119": [503, 504], "3519": [503, 504], "6252": [503, 504], "4033": [503, 504], "7443": [503, 504], "2577": [503, 504], "3707": [503, 504], "0545": [503, 504], "3238": [503, 504], "5944": [503, 504], "0775": [503, 504], "4327": [503, 504], "176": [503, 504], "889": [503, 504], "763": [503, 504], "071": [503, 504], "262": [503, 504], "456": [503, 504], "114": [503, 504], "349": [503, 504], "615": [503, 504], "594": [503, 504], "335": [503, 504], "212": [503, 504], "457": [503, 504], "827": [503, 504], "209": [503, 504], "ascend": [508, 509], "einstein": [511, 512], "summat": [511, 512], "seq": [511, 512], "jk": [511, 512], "ik": [511, 512], "126": [511, 512], "510": [511, 512], "99": [511, 512], "108": [511, 512], "117": [511, 512], "sentinel": [511, 513, 515], "unsign": [511, 516, 518], "degre": [511, 517, 519], "bessel": [511, 517, 519], "8164966": [511, 517], "varianc": [511, 519], "unbias": [511, 519], "simplicit": [520, 521], "autom": 523, "grow": 523, "ai": 523, "got": 523, "colab": 523, "sharp": 523, "weekli": 523, "event": 523, "immedi": 523, "favorit": 523, "jax_concat": 523, "tf_concat": 523, "np_concat": 523, "mx_concat": 523, "torch_concat": 523, "prompt": 523, "get_devic": 523, "reduce_prod": 523, "gradient_imag": 523, "linalg": 523, "bilinear_resampl": 523, "stack_imag": 523, "neural_net": 523, "ecosystem": [523, 529], "popular": [523, 529], "acceler": 523, "articl": 523, "lenton2021ivi": 523, "inter": 523, "lenton": 523, "daniel": 523, "pardo": 523, "fabio": 523, "falck": 523, "fabian": 523, "jame": 523, "stephen": 523, "clark": 523, "ronald": 523, "journal": 523, "arxiv": 523, "preprint": 523, "2102": 523, "02886": 523, "2021": 523, "add_array_spec": 526, "fn_array_spec": 526, "geglu": 530, "native_modul": [533, 534], "native_module_class": [533, 534], "firstlayersiren": 535, "kaimingnorm": [535, 539], "negative_slop": 535, "Ones": 535, "siren": 535, "w0": [535, 541], "filter_s": [544, 545, 546], "1d": [544, 545, 546], "conv1dtranspos": 544, "filter_shap": [544, 547, 548, 549, 550, 551], "conv2dtranspos": 544, "conv3dtranspos": 544, "depthwiseconv2d": 544, "num_channel": [544, 551], "bernoul": [544, 552], "num_lay": [544, 553], "return_sequ": [544, 553], "return_st": [544, 553], "get_initial_st": [544, 553], "dens": [544, 554], "multiheadattent": 544, "query_dim": [544, 555], "head_dim": [544, 555], "dropout_r": [544, 555], "context_dim": [544, 555], "with_to_q_fn": [544, 555], "with_to_kv_fn": [544, 555], "with_to_out_fn": [544, 555], "build_mod": [544, 555, 556, 557], "on_init": [544, 555, 556, 557], "__call__": [544, 555, 556, 557], "store_var": [556, 557], "arg_stateful_idx": [556, 557], "kwarg_stateful_idx": [556, 557], "fallback_to_non_compil": [556, 557, 560, 564], "with_partial_v": [556, 557], "initialz": [556, 557], "from_cal": [556, 557], "check_submod_ret": [556, 557], "get_mod_kei": [556, 557], "top_mod": [556, 557], "mod_depth": [556, 557], "mod_height": [556, 557], "mod_with_top_mod_key_chain": [556, 557], "save_weight": [556, 557], "weights_path": [556, 557], "show_mod_in_top_mod": [556, 557], "upper_depth": [556, 557], "lower_depth": [556, 557], "show_structur": [556, 557], "show_v_in_top_v": [556, 557], "sub_mod": [556, 557], "show_v": [556, 557], "track_submod_call_ord": [556, 557], "track_submod_ret": [556, 557], "v_with_top_v_key_chain": [556, 557], "layernorm": 558, "normalized_shap": [558, 559], "elementwise_affin": [558, 559], "trail": [558, 559], "affin": [558, 559], "0001": [560, 561, 562], "init_on_first_step": [560, 564], "ignore_miss": [560, 564], "overriden": [560, 564], "sgd": 560, "stochast": [560, 565], "sub_modul": [566, 567]}, "objects": {"ivy.array": [[0, 0, 0, "-", "activations"], [2, 0, 0, "-", "conversions"], [7, 0, 0, "-", "creation"], [9, 0, 0, "-", "data_types"], [11, 0, 0, "-", "device"], [13, 0, 0, "-", "elementwise"], [15, 0, 0, "-", "general"], [17, 0, 0, "-", "gradients"], [19, 0, 0, "-", "image"], [21, 0, 0, "-", "layers"], [23, 0, 0, "-", "linear_algebra"], [25, 0, 0, "-", "losses"], [27, 0, 0, "-", "manipulation"], [29, 0, 0, "-", "norms"], [31, 0, 0, "-", "random"], [33, 0, 0, "-", "searching"], [35, 0, 0, "-", "set"], [37, 0, 0, "-", "sorting"], [39, 0, 0, "-", "statistical"], [41, 0, 0, "-", "utility"], [43, 0, 0, "-", "wrapping"]], "ivy.array.activations": [[1, 1, 1, "", "ArrayWithActivations"]], "ivy.array.conversions": [[3, 2, 1, "", "args_to_ivy"], [4, 2, 1, "", "args_to_native"], [5, 2, 1, "", "to_ivy"], [6, 2, 1, "", "to_native"]], "ivy.array.creation": [[8, 1, 1, "", "ArrayWithCreation"]], "ivy.array.data_types": [[10, 1, 1, "", "ArrayWithDataTypes"]], "ivy.array.device": [[12, 1, 1, "", "ArrayWithDevice"]], "ivy.array.elementwise": [[14, 1, 1, "", "ArrayWithElementwise"]], "ivy.array.elementwise.ArrayWithElementwise": [[14, 3, 1, "", "abs"], [14, 3, 1, "", "acos"], [14, 3, 1, "", "acosh"], [14, 3, 1, "", "add"], [14, 3, 1, "", "asin"], [14, 3, 1, "", "asinh"], [14, 3, 1, "", "atan"], [14, 3, 1, "", "atan2"], [14, 3, 1, "", "atanh"], [14, 3, 1, "", "bitwise_and"], [14, 3, 1, "", "bitwise_invert"], [14, 3, 1, "", "bitwise_left_shift"], [14, 3, 1, "", "bitwise_or"], [14, 3, 1, "", "bitwise_right_shift"], [14, 3, 1, "", "bitwise_xor"], [14, 3, 1, "", "ceil"], [14, 3, 1, "", "cos"], [14, 3, 1, "", "cosh"], [14, 3, 1, "", "divide"], [14, 3, 1, "", "equal"], [14, 3, 1, "", "erf"], [14, 3, 1, "", "exp"], [14, 3, 1, "", "expm1"], [14, 3, 1, "", "floor"], [14, 3, 1, "", "floor_divide"], [14, 3, 1, "", "greater"], [14, 3, 1, "", "greater_equal"], [14, 3, 1, "", "isfinite"], [14, 3, 1, "", "isinf"], [14, 3, 1, "", "isnan"], [14, 3, 1, "", "less"], [14, 3, 1, "", "less_equal"], [14, 3, 1, "", "log"], [14, 3, 1, "", "log10"], [14, 3, 1, "", "log1p"], [14, 3, 1, "", "log2"], [14, 3, 1, "", "logaddexp"], [14, 3, 1, "", "logical_and"], [14, 3, 1, "", "logical_not"], [14, 3, 1, "", "logical_or"], [14, 3, 1, "", "logical_xor"], [14, 3, 1, "", "multiply"], [14, 3, 1, "", "negative"], [14, 3, 1, "", "not_equal"], [14, 3, 1, "", "positive"], [14, 3, 1, "", "pow"], [14, 3, 1, "", "remainder"], [14, 3, 1, "", "round"], [14, 3, 1, "", "sign"], [14, 3, 1, "", "sin"], [14, 3, 1, "", "sinh"], [14, 3, 1, "", "sqrt"], [14, 3, 1, "", "square"], [14, 3, 1, "", "subtract"], [14, 3, 1, "", "tan"], [14, 3, 1, "", "tanh"], [14, 3, 1, "", "trunc"]], "ivy.array.general": [[16, 1, 1, "", "ArrayWithGeneral"]], "ivy.array.general.ArrayWithGeneral": [[16, 3, 1, "", "all_equal"]], "ivy.array.gradients": [[18, 1, 1, "", "ArrayWithGradients"]], "ivy.array.image": [[20, 1, 1, "", "ArrayWithImage"]], "ivy.array.layers": [[22, 1, 1, "", "ArrayWithLayers"]], "ivy.array.linear_algebra": [[24, 1, 1, "", "ArrayWithLinearAlgebra"]], "ivy.array.linear_algebra.ArrayWithLinearAlgebra": [[24, 3, 1, "", "matmul"]], "ivy.array.losses": [[26, 1, 1, "", "ArrayWithLosses"]], "ivy.array.losses.ArrayWithLosses": [[26, 3, 1, "", "binary_cross_entropy"], [26, 3, 1, "", "cross_entropy"], [26, 3, 1, "", "sparse_cross_entropy"]], "ivy.array.manipulation": [[28, 1, 1, "", "ArrayWithManipulation"]], "ivy.array.manipulation.ArrayWithManipulation": [[28, 3, 1, "", "clip"], [28, 3, 1, "", "concat"], [28, 3, 1, "", "constant_pad"], [28, 3, 1, "", "expand_dims"], [28, 3, 1, "", "flip"], [28, 3, 1, "", "permute_dims"], [28, 3, 1, "", "repeat"], [28, 3, 1, "", "reshape"], [28, 3, 1, "", "roll"], [28, 3, 1, "", "squeeze"], [28, 3, 1, "", "stack"], [28, 3, 1, "", "swapaxes"], [28, 3, 1, "", "tile"], [28, 3, 1, "", "zero_pad"]], "ivy.array.norms": [[30, 1, 1, "", "ArrayWithNorms"]], "ivy.array.norms.ArrayWithNorms": [[30, 3, 1, "", "layer_norm"]], "ivy.array.random": [[32, 1, 1, "", "ArrayWithRandom"]], "ivy.array.searching": [[34, 1, 1, "", "ArrayWithSearching"]], "ivy.array.set": [[36, 1, 1, "", "ArrayWithSet"]], "ivy.array.sorting": [[38, 1, 1, "", "ArrayWithSorting"]], "ivy.array.sorting.ArrayWithSorting": [[38, 3, 1, "", "argsort"], [38, 3, 1, "", "sort"]], "ivy.array.statistical": [[40, 1, 1, "", "ArrayWithStatistical"]], "ivy.array.statistical.ArrayWithStatistical": [[40, 3, 1, "", "einsum"], [40, 3, 1, "", "max"], [40, 3, 1, "", "mean"], [40, 3, 1, "", "min"], [40, 3, 1, "", "prod"], [40, 3, 1, "", "std"], [40, 3, 1, "", "sum"], [40, 3, 1, "", "var"]], "ivy.array.utility": [[42, 1, 1, "", "ArrayWithUtility"]], "ivy.array.utility.ArrayWithUtility": [[42, 3, 1, "", "all"], [42, 3, 1, "", "any"]], "ivy.array.wrapping": [[44, 2, 1, "", "add_ivy_array_instance_methods"]], "ivy": [[45, 0, 0, "-", "backend_handler"], [146, 0, 0, "-", "func_wrapper"], [526, 0, 0, "-", "inspection"], [569, 0, 0, "-", "verbosity"]], "ivy.backend_handler": [[45, 1, 1, "", "ContextManager"], [47, 2, 1, "", "choose_random_backend"], [48, 2, 1, "", "clear_backend_stack"], [49, 2, 1, "", "current_backend"], [50, 2, 1, "", "get_backend"], [51, 2, 1, "", "set_backend"], [52, 2, 1, "", "try_import_ivy_jax"], [53, 2, 1, "", "try_import_ivy_mxnet"], [54, 2, 1, "", "try_import_ivy_numpy"], [55, 2, 1, "", "try_import_ivy_tf"], [56, 2, 1, "", "try_import_ivy_torch"], [57, 2, 1, "", "unset_backend"]], "ivy.backend_handler.ContextManager": [[45, 3, 1, "", "__init__"]], "ivy.container": [[62, 0, 0, "-", "activations"], [64, 0, 0, "-", "base"], [66, 0, 0, "-", "container"], [69, 0, 0, "-", "creation"], [71, 0, 0, "-", "data_types"], [73, 0, 0, "-", "device"], [75, 0, 0, "-", "elementwise"], [77, 0, 0, "-", "general"], [79, 0, 0, "-", "gradients"], [81, 0, 0, "-", "image"], [83, 0, 0, "-", "layers"], [85, 0, 0, "-", "linear_algebra"], [87, 0, 0, "-", "losses"], [89, 0, 0, "-", "manipulation"], [91, 0, 0, "-", "norms"], [93, 0, 0, "-", "random"], [95, 0, 0, "-", "searching"], [97, 0, 0, "-", "set"], [99, 0, 0, "-", "sorting"], [101, 0, 0, "-", "statistical"], [103, 0, 0, "-", "utility"], [105, 0, 0, "-", "wrapping"]], "ivy.container.activations": [[63, 1, 1, "", "ContainerWithActivations"]], "ivy.container.base": [[65, 1, 1, "", "ContainerBase"]], "ivy.container.base.ContainerBase": [[65, 3, 1, "", "__getitem__"], [65, 3, 1, "", "__init__"], [65, 3, 1, "", "__setitem__"], [65, 3, 1, "", "all_false"], [65, 3, 1, "", "all_key_chains"], [65, 3, 1, "", "all_true"], [65, 3, 1, "", "arrays_as_lists"], [65, 3, 1, "", "as_arrays"], [65, 3, 1, "", "as_bools"], [65, 3, 1, "", "as_ones"], [65, 3, 1, "", "as_random_uniform"], [65, 3, 1, "", "as_variables"], [65, 3, 1, "", "as_zeros"], [65, 3, 1, "", "assert_contains_sub_container"], [65, 3, 1, "", "assert_contains_sub_structure"], [65, 3, 1, "", "assert_identical"], [65, 3, 1, "", "assert_identical_structure"], [65, 3, 1, "", "at_key_chain"], [65, 3, 1, "", "at_key_chains"], [65, 3, 1, "", "at_keys"], [65, 3, 1, "", "clip"], [65, 3, 1, "", "combine"], [65, 3, 1, "", "common_key_chains"], [65, 4, 1, "", "config"], [65, 3, 1, "", "contains_sub_container"], [65, 3, 1, "", "contains_sub_structure"], [65, 3, 1, "", "copy"], [65, 3, 1, "", "create_if_absent"], [65, 3, 1, "", "cutoff_at_depth"], [65, 3, 1, "", "cutoff_at_height"], [65, 3, 1, "", "deep_copy"], [65, 4, 1, "", "dev"], [65, 3, 1, "", "dev_clone"], [65, 3, 1, "", "dev_dist"], [65, 4, 1, "", "dev_str"], [65, 3, 1, "", "diff"], [65, 3, 1, "", "dtype"], [65, 3, 1, "", "einops_rearrange"], [65, 3, 1, "", "einops_reduce"], [65, 3, 1, "", "einops_repeat"], [65, 3, 1, "", "find_sub_container"], [65, 3, 1, "", "find_sub_structure"], [65, 3, 1, "", "flatten_key_chain"], [65, 3, 1, "", "flatten_key_chains"], [65, 3, 1, "", "format_key_chains"], [65, 3, 1, "", "from_disk_as_hdf5"], [65, 3, 1, "", "from_disk_as_json"], [65, 3, 1, "", "from_disk_as_pickled"], [65, 3, 1, "", "from_flat_list"], [65, 3, 1, "", "from_numpy"], [65, 3, 1, "", "gather"], [65, 3, 1, "", "gather_nd"], [65, 3, 1, "", "h5_file_size"], [65, 3, 1, "", "handle_inplace"], [65, 3, 1, "", "has_key"], [65, 3, 1, "", "has_key_chain"], [65, 3, 1, "", "has_nans"], [65, 3, 1, "", "identical"], [65, 3, 1, "", "identical_array_shapes"], [65, 3, 1, "", "identical_configs"], [65, 3, 1, "", "identical_structure"], [65, 3, 1, "", "if_exists"], [65, 3, 1, "", "inplace_update"], [65, 4, 1, "", "ivy"], [65, 3, 1, "", "key_chains_containing"], [65, 3, 1, "", "list_join"], [65, 3, 1, "", "list_stack"], [65, 3, 1, "", "map"], [65, 3, 1, "", "map_conts"], [65, 3, 1, "", "matrix_norm"], [65, 4, 1, "", "max_depth"], [65, 3, 1, "", "maximum"], [65, 3, 1, "", "minimum"], [65, 3, 1, "", "multi_map"], [65, 3, 1, "", "multi_map_in_static_method"], [65, 3, 1, "", "num_arrays"], [65, 3, 1, "", "overwrite_at_key_chain"], [65, 3, 1, "", "overwrite_at_key_chains"], [65, 3, 1, "", "prune_empty"], [65, 3, 1, "", "prune_key_chain"], [65, 3, 1, "", "prune_key_chains"], [65, 3, 1, "", "prune_key_from_key_chains"], [65, 3, 1, "", "prune_keys"], [65, 3, 1, "", "prune_keys_from_key_chains"], [65, 3, 1, "", "reduce"], [65, 3, 1, "", "remove_key_length_limit"], [65, 3, 1, "", "remove_print_limit"], [65, 3, 1, "", "reshape_like"], [65, 3, 1, "", "restructure"], [65, 3, 1, "", "restructure_key_chains"], [65, 3, 1, "", "set_at_key_chain"], [65, 3, 1, "", "set_at_key_chains"], [65, 3, 1, "", "set_at_keys"], [65, 3, 1, "", "set_framework"], [65, 3, 1, "", "set_ivy_backend"], [65, 4, 1, "", "shape"], [65, 4, 1, "", "shapes"], [65, 3, 1, "", "show"], [65, 3, 1, "", "show_sub_container"], [65, 3, 1, "", "shuffle"], [65, 3, 1, "", "shuffle_h5_file"], [65, 3, 1, "", "size_ordered_arrays"], [65, 3, 1, "", "slice_keys"], [65, 3, 1, "", "slice_via_key"], [65, 3, 1, "", "sort_by_key"], [65, 3, 1, "", "split"], [65, 3, 1, "", "stop_gradients"], [65, 3, 1, "", "structural_diff"], [65, 3, 1, "", "to_device"], [65, 3, 1, "", "to_dict"], [65, 3, 1, "", "to_disk_as_hdf5"], [65, 3, 1, "", "to_disk_as_json"], [65, 3, 1, "", "to_disk_as_pickled"], [65, 3, 1, "", "to_flat_list"], [65, 3, 1, "", "to_iterator"], [65, 3, 1, "", "to_iterator_keys"], [65, 3, 1, "", "to_iterator_values"], [65, 3, 1, "", "to_ivy"], [65, 3, 1, "", "to_jsonable"], [65, 3, 1, "", "to_list"], [65, 3, 1, "", "to_multi_dev"], [65, 3, 1, "", "to_native"], [65, 3, 1, "", "to_numpy"], [65, 3, 1, "", "to_raw"], [65, 3, 1, "", "trim_key"], [65, 3, 1, "", "try_kc"], [65, 3, 1, "", "unify"], [65, 3, 1, "", "unstack"], [65, 3, 1, "", "update_config"], [65, 3, 1, "", "vector_norm"], [65, 3, 1, "", "with_default_key_color"], [65, 3, 1, "", "with_entries_as_lists"], [65, 3, 1, "", "with_ivy_backend"], [65, 3, 1, "", "with_key_length_limit"], [65, 3, 1, "", "with_print_indent"], [65, 3, 1, "", "with_print_limit"], [65, 3, 1, "", "with_print_line_spacing"]], "ivy.container.container": [[67, 1, 1, "", "Container"], [68, 1, 1, "", "MultiDevContainer"]], "ivy.container.container.Container": [[67, 3, 1, "", "__add__"], [67, 3, 1, "", "__init__"], [67, 3, 1, "", "__radd__"], [67, 3, 1, "", "adam_step"], [67, 3, 1, "", "arange"], [67, 3, 1, "", "arg_info"], [67, 3, 1, "", "arg_names"], [67, 3, 1, "", "argmax"], [67, 3, 1, "", "argmin"], [67, 3, 1, "", "array"], [67, 3, 1, "", "array_equal"], [67, 3, 1, "", "arrays_equal"], [67, 3, 1, "", "as_ivy_dev"], [67, 3, 1, "", "as_ivy_dtype"], [67, 3, 1, "", "as_native_dev"], [67, 3, 1, "", "as_native_dtype"], [67, 3, 1, "", "asarray"], [67, 3, 1, "", "assert_supports_inplace"], [67, 3, 1, "", "astype"], [67, 3, 1, "", "broadcast_arrays"], [67, 3, 1, "", "broadcast_to"], [67, 3, 1, "", "cache_fn"], [67, 3, 1, "", "can_cast"], [67, 3, 1, "", "cholesky"], [67, 3, 1, "", "clear_mem_on_dev"], [67, 3, 1, "", "clip_matrix_norm"], [67, 3, 1, "", "closest_valid_dtype"], [67, 3, 1, "", "container_types"], [67, 3, 1, "", "conv1d"], [67, 3, 1, "", "conv1d_transpose"], [67, 3, 1, "", "conv2d"], [67, 3, 1, "", "conv2d_transpose"], [67, 3, 1, "", "conv3d"], [67, 3, 1, "", "conv3d_transpose"], [67, 3, 1, "", "copy_array"], [67, 3, 1, "", "cross"], [67, 3, 1, "", "cumprod"], [67, 3, 1, "", "cumsum"], [67, 3, 1, "", "current_backend"], [67, 3, 1, "", "current_backend_str"], [67, 3, 1, "", "default"], [67, 3, 1, "", "default_device"], [67, 3, 1, "", "default_dtype"], [67, 3, 1, "", "default_float_dtype"], [67, 3, 1, "", "default_int_dtype"], [67, 3, 1, "", "depthwise_conv2d"], [67, 3, 1, "", "det"], [67, 3, 1, "", "dev_clone_array"], [67, 3, 1, "", "dev_clone_iter"], [67, 3, 1, "", "dev_clone_nest"], [67, 3, 1, "", "dev_dist_array"], [67, 3, 1, "", "dev_dist_iter"], [67, 3, 1, "", "dev_dist_nest"], [67, 3, 1, "", "dev_unify"], [67, 3, 1, "", "dev_unify_array"], [67, 3, 1, "", "dev_unify_iter"], [67, 3, 1, "", "dev_unify_nest"], [67, 3, 1, "", "dev_util"], [67, 3, 1, "", "diagonal"], [67, 3, 1, "", "dropout"], [67, 3, 1, "", "dtype_bits"], [67, 3, 1, "", "eigh"], [67, 3, 1, "", "eigvalsh"], [67, 3, 1, "", "empty"], [67, 3, 1, "", "empty_like"], [67, 3, 1, "", "execute_with_gradients"], [67, 3, 1, "", "exists"], [67, 3, 1, "", "eye"], [67, 3, 1, "", "finfo"], [67, 3, 1, "", "floormod"], [67, 3, 1, "", "fourier_encode"], [67, 3, 1, "", "from_dlpack"], [67, 3, 1, "", "full"], [67, 3, 1, "", "full_like"], [67, 3, 1, "", "function_supported_dtypes"], [67, 3, 1, "", "function_unsupported_dtypes"], [67, 3, 1, "", "gelu"], [67, 3, 1, "", "get_all_arrays_in_memory"], [67, 3, 1, "", "get_all_ivy_arrays_on_dev"], [67, 3, 1, "", "get_min_base"], [67, 3, 1, "", "get_min_denominator"], [67, 3, 1, "", "get_num_dims"], [67, 3, 1, "", "get_referrers_recursive"], [67, 3, 1, "", "gpu_is_available"], [67, 3, 1, "", "handle_nestable"], [67, 3, 1, "", "handle_out_argument"], [67, 3, 1, "", "iinfo"], [67, 3, 1, "", "indices_where"], [67, 3, 1, "", "infer_device"], [67, 3, 1, "", "infer_dtype"], [67, 3, 1, "", "inplace_arrays_supported"], [67, 3, 1, "", "inplace_decrement"], [67, 3, 1, "", "inplace_increment"], [67, 3, 1, "", "inplace_variables_supported"], [67, 3, 1, "", "inputs_to_native_arrays"], [67, 3, 1, "", "inv"], [67, 3, 1, "", "invalid_dtype"], [67, 3, 1, "", "is_float_dtype"], [67, 3, 1, "", "is_int_dtype"], [67, 3, 1, "", "is_ivy_container"], [67, 3, 1, "", "leaky_relu"], [67, 3, 1, "", "linear"], [67, 3, 1, "", "linspace"], [67, 3, 1, "", "logspace"], [67, 3, 1, "", "lstm_update"], [67, 3, 1, "", "match_kwargs"], [67, 3, 1, "", "matrix_power"], [67, 3, 1, "", "matrix_rank"], [67, 3, 1, "", "matrix_transpose"], [67, 3, 1, "", "meshgrid"], [67, 3, 1, "", "multi_head_attention"], [67, 3, 1, "", "multinomial"], [67, 3, 1, "", "multiprocessing"], [67, 3, 1, "", "native_array"], [67, 3, 1, "", "nonzero"], [67, 3, 1, "", "num_arrays_in_memory"], [67, 3, 1, "", "num_cpu_cores"], [67, 3, 1, "", "num_gpus"], [67, 3, 1, "", "num_ivy_arrays_on_dev"], [67, 3, 1, "", "one_hot"], [67, 3, 1, "", "ones"], [67, 3, 1, "", "ones_like"], [67, 3, 1, "", "outer"], [67, 3, 1, "", "outputs_to_ivy_arrays"], [67, 3, 1, "", "percent_used_mem_on_dev"], [67, 3, 1, "", "pinv"], [67, 3, 1, "", "print_all_arrays_in_memory"], [67, 3, 1, "", "print_all_ivy_arrays_on_dev"], [67, 3, 1, "", "promote_types"], [67, 3, 1, "", "qr"], [67, 3, 1, "", "queue_timeout"], [67, 3, 1, "", "randint"], [67, 3, 1, "", "random_normal"], [67, 3, 1, "", "relu"], [67, 3, 1, "", "result_type"], [67, 3, 1, "", "scaled_dot_product_attention"], [67, 3, 1, "", "scatter_flat"], [67, 3, 1, "", "scatter_nd"], [67, 3, 1, "", "seed"], [67, 3, 1, "", "set_default_device"], [67, 3, 1, "", "set_default_dtype"], [67, 3, 1, "", "set_default_float_dtype"], [67, 3, 1, "", "set_default_int_dtype"], [67, 3, 1, "", "set_min_base"], [67, 3, 1, "", "set_min_denominator"], [67, 3, 1, "", "set_queue_timeout"], [67, 3, 1, "", "set_split_factor"], [67, 3, 1, "", "set_tmp_dir"], [67, 3, 1, "", "set_with_grads"], [67, 3, 1, "", "shape_to_tuple"], [67, 3, 1, "", "sigmoid"], [67, 3, 1, "", "slogdet"], [67, 3, 1, "", "softmax"], [67, 3, 1, "", "softplus"], [67, 3, 1, "", "solve"], [67, 3, 1, "", "split_factor"], [67, 3, 1, "", "split_func_call"], [67, 3, 1, "", "stable_divide"], [67, 3, 1, "", "stable_pow"], [67, 3, 1, "", "static_abs"], [67, 3, 1, "", "static_acos"], [67, 3, 1, "", "static_acosh"], [67, 3, 1, "", "static_adam_step"], [67, 3, 1, "", "static_all"], [67, 3, 1, "", "static_any"], [67, 3, 1, "", "static_arange"], [67, 3, 1, "", "static_arg_info"], [67, 3, 1, "", "static_arg_names"], [67, 3, 1, "", "static_argmax"], [67, 3, 1, "", "static_argmin"], [67, 3, 1, "", "static_array"], [67, 3, 1, "", "static_array_equal"], [67, 3, 1, "", "static_arrays_equal"], [67, 3, 1, "", "static_as_ivy_dev"], [67, 3, 1, "", "static_as_ivy_dtype"], [67, 3, 1, "", "static_as_native_dev"], [67, 3, 1, "", "static_as_native_dtype"], [67, 3, 1, "", "static_asarray"], [67, 3, 1, "", "static_asin"], [67, 3, 1, "", "static_asinh"], [67, 3, 1, "", "static_assert_supports_inplace"], [67, 3, 1, "", "static_astype"], [67, 3, 1, "", "static_atan"], [67, 3, 1, "", "static_atan2"], [67, 3, 1, "", "static_atanh"], [67, 3, 1, "", "static_bitwise_and"], [67, 3, 1, "", "static_bitwise_invert"], [67, 3, 1, "", "static_bitwise_left_shift"], [67, 3, 1, "", "static_bitwise_or"], [67, 3, 1, "", "static_bitwise_right_shift"], [67, 3, 1, "", "static_bitwise_xor"], [67, 3, 1, "", "static_broadcast_arrays"], [67, 3, 1, "", "static_broadcast_to"], [67, 3, 1, "", "static_cache_fn"], [67, 3, 1, "", "static_can_cast"], [67, 3, 1, "", "static_ceil"], [67, 3, 1, "", "static_cholesky"], [67, 3, 1, "", "static_clear_mem_on_dev"], [67, 3, 1, "", "static_clip_matrix_norm"], [67, 3, 1, "", "static_clip_vector_norm"], [67, 3, 1, "", "static_closest_valid_dtype"], [67, 3, 1, "", "static_concat"], [67, 3, 1, "", "static_constant_pad"], [67, 3, 1, "", "static_container_types"], [67, 3, 1, "", "static_conv1d"], [67, 3, 1, "", "static_conv1d_transpose"], [67, 3, 1, "", "static_conv2d"], [67, 3, 1, "", "static_conv2d_transpose"], [67, 3, 1, "", "static_conv3d"], [67, 3, 1, "", "static_conv3d_transpose"], [67, 3, 1, "", "static_copy_array"], [67, 3, 1, "", "static_cos"], [67, 3, 1, "", "static_cosh"], [67, 3, 1, "", "static_cross"], [67, 3, 1, "", "static_cumprod"], [67, 3, 1, "", "static_cumsum"], [67, 3, 1, "", "static_current_backend"], [67, 3, 1, "", "static_current_backend_str"], [67, 3, 1, "", "static_default"], [67, 3, 1, "", "static_default_device"], [67, 3, 1, "", "static_default_dtype"], [67, 3, 1, "", "static_default_float_dtype"], [67, 3, 1, "", "static_default_int_dtype"], [67, 3, 1, "", "static_depthwise_conv2d"], [67, 3, 1, "", "static_det"], [67, 3, 1, "", "static_dev"], [67, 3, 1, "", "static_dev_clone"], [67, 3, 1, "", "static_dev_clone_array"], [67, 3, 1, "", "static_dev_clone_iter"], [67, 3, 1, "", "static_dev_clone_nest"], [67, 3, 1, "", "static_dev_dist"], [67, 3, 1, "", "static_dev_dist_array"], [67, 3, 1, "", "static_dev_dist_iter"], [67, 3, 1, "", "static_dev_dist_nest"], [67, 3, 1, "", "static_dev_unify"], [67, 3, 1, "", "static_dev_unify_array"], [67, 3, 1, "", "static_dev_unify_iter"], [67, 3, 1, "", "static_dev_unify_nest"], [67, 3, 1, "", "static_dev_util"], [67, 3, 1, "", "static_diagonal"], [67, 3, 1, "", "static_dropout"], [67, 3, 1, "", "static_dtype"], [67, 3, 1, "", "static_dtype_bits"], [67, 3, 1, "", "static_eigh"], [67, 3, 1, "", "static_eigvalsh"], [67, 3, 1, "", "static_einops_rearrange"], [67, 3, 1, "", "static_einops_reduce"], [67, 3, 1, "", "static_einops_repeat"], [67, 3, 1, "", "static_einsum"], [67, 3, 1, "", "static_empty"], [67, 3, 1, "", "static_empty_like"], [67, 3, 1, "", "static_equal"], [67, 3, 1, "", "static_erf"], [67, 3, 1, "", "static_execute_with_gradients"], [67, 3, 1, "", "static_exists"], [67, 3, 1, "", "static_exp"], [67, 3, 1, "", "static_expand_dims"], [67, 3, 1, "", "static_expm1"], [67, 3, 1, "", "static_eye"], [67, 3, 1, "", "static_finfo"], [67, 3, 1, "", "static_flip"], [67, 3, 1, "", "static_floor"], [67, 3, 1, "", "static_floor_divide"], [67, 3, 1, "", "static_floormod"], [67, 3, 1, "", "static_fourier_encode"], [67, 3, 1, "", "static_from_dlpack"], [67, 3, 1, "", "static_full"], [67, 3, 1, "", "static_full_like"], [67, 3, 1, "", "static_function_supported_dtypes"], [67, 3, 1, "", "static_function_unsupported_dtypes"], [67, 3, 1, "", "static_gather"], [67, 3, 1, "", "static_gather_nd"], [67, 3, 1, "", "static_gelu"], [67, 3, 1, "", "static_get_all_arrays_in_memory"], [67, 3, 1, "", "static_get_all_ivy_arrays_on_dev"], [67, 3, 1, "", "static_get_min_base"], [67, 3, 1, "", "static_get_min_denominator"], [67, 3, 1, "", "static_get_num_dims"], [67, 3, 1, "", "static_get_referrers_recursive"], [67, 3, 1, "", "static_gpu_is_available"], [67, 3, 1, "", "static_greater"], [67, 3, 1, "", "static_greater_equal"], [67, 3, 1, "", "static_handle_nestable"], [67, 3, 1, "", "static_handle_out_argument"], [67, 3, 1, "", "static_has_nans"], [67, 3, 1, "", "static_iinfo"], [67, 3, 1, "", "static_indices_where"], [67, 3, 1, "", "static_infer_device"], [67, 3, 1, "", "static_infer_dtype"], [67, 3, 1, "", "static_inplace_arrays_supported"], [67, 3, 1, "", "static_inplace_decrement"], [67, 3, 1, "", "static_inplace_increment"], [67, 3, 1, "", "static_inplace_update"], [67, 3, 1, "", "static_inplace_variables_supported"], [67, 3, 1, "", "static_inputs_to_native_arrays"], [67, 3, 1, "", "static_inv"], [67, 3, 1, "", "static_invalid_dtype"], [67, 3, 1, "", "static_is_array"], [67, 3, 1, "", "static_is_float_dtype"], [67, 3, 1, "", "static_is_int_dtype"], [67, 3, 1, "", "static_is_ivy_array"], [67, 3, 1, "", "static_is_ivy_container"], [67, 3, 1, "", "static_is_native_array"], [67, 3, 1, "", "static_is_variable"], [67, 3, 1, "", "static_isfinite"], [67, 3, 1, "", "static_isinf"], [67, 3, 1, "", "static_isnan"], [67, 3, 1, "", "static_layer_norm"], [67, 3, 1, "", "static_leaky_relu"], [67, 3, 1, "", "static_less"], [67, 3, 1, "", "static_less_equal"], [67, 3, 1, "", "static_linear"], [67, 3, 1, "", "static_linspace"], [67, 3, 1, "", "static_log"], [67, 3, 1, "", "static_log10"], [67, 3, 1, "", "static_log1p"], [67, 3, 1, "", "static_log2"], [67, 3, 1, "", "static_logaddexp"], [67, 3, 1, "", "static_logical_and"], [67, 3, 1, "", "static_logical_not"], [67, 3, 1, "", "static_logical_or"], [67, 3, 1, "", "static_logical_xor"], [67, 3, 1, "", "static_logspace"], [67, 3, 1, "", "static_lstm_update"], [67, 3, 1, "", "static_match_kwargs"], [67, 3, 1, "", "static_matmul"], [67, 3, 1, "", "static_matrix_norm"], [67, 3, 1, "", "static_matrix_power"], [67, 3, 1, "", "static_matrix_rank"], [67, 3, 1, "", "static_matrix_transpose"], [67, 3, 1, "", "static_max"], [67, 3, 1, "", "static_maximum"], [67, 3, 1, "", "static_mean"], [67, 3, 1, "", "static_meshgrid"], [67, 3, 1, "", "static_min"], [67, 3, 1, "", "static_minimum"], [67, 3, 1, "", "static_multi_head_attention"], [67, 3, 1, "", "static_multinomial"], [67, 3, 1, "", "static_multiprocessing"], [67, 3, 1, "", "static_native_array"], [67, 3, 1, "", "static_negative"], [67, 3, 1, "", "static_nonzero"], [67, 3, 1, "", "static_not_equal"], [67, 3, 1, "", "static_num_arrays_in_memory"], [67, 3, 1, "", "static_num_cpu_cores"], [67, 3, 1, "", "static_num_gpus"], [67, 3, 1, "", "static_num_ivy_arrays_on_dev"], [67, 3, 1, "", "static_one_hot"], [67, 3, 1, "", "static_ones"], [67, 3, 1, "", "static_ones_like"], [67, 3, 1, "", "static_outer"], [67, 3, 1, "", "static_outputs_to_ivy_arrays"], [67, 3, 1, "", "static_percent_used_mem_on_dev"], [67, 3, 1, "", "static_permute_dims"], [67, 3, 1, "", "static_pinv"], [67, 3, 1, "", "static_positive"], [67, 3, 1, "", "static_pow"], [67, 3, 1, "", "static_print_all_arrays_in_memory"], [67, 3, 1, "", "static_print_all_ivy_arrays_on_dev"], [67, 3, 1, "", "static_prod"], [67, 3, 1, "", "static_promote_types"], [67, 3, 1, "", "static_qr"], [67, 3, 1, "", "static_queue_timeout"], [67, 3, 1, "", "static_random_normal"], [67, 3, 1, "", "static_relu"], [67, 3, 1, "", "static_remainder"], [67, 3, 1, "", "static_repeat"], [67, 3, 1, "", "static_reshape"], [67, 3, 1, "", "static_result_type"], [67, 3, 1, "", "static_round"], [67, 3, 1, "", "static_scaled_dot_product_attention"], [67, 3, 1, "", "static_scatter_flat"], [67, 3, 1, "", "static_scatter_nd"], [67, 3, 1, "", "static_seed"], [67, 3, 1, "", "static_set_default_device"], [67, 3, 1, "", "static_set_default_dtype"], [67, 3, 1, "", "static_set_default_float_dtype"], [67, 3, 1, "", "static_set_default_int_dtype"], [67, 3, 1, "", "static_set_min_base"], [67, 3, 1, "", "static_set_min_denominator"], [67, 3, 1, "", "static_set_queue_timeout"], [67, 3, 1, "", "static_set_split_factor"], [67, 3, 1, "", "static_set_tmp_dir"], [67, 3, 1, "", "static_set_with_grads"], [67, 3, 1, "", "static_shape"], [67, 3, 1, "", "static_shape_to_tuple"], [67, 3, 1, "", "static_shuffle"], [67, 3, 1, "", "static_sigmoid"], [67, 3, 1, "", "static_sign"], [67, 3, 1, "", "static_sin"], [67, 3, 1, "", "static_sinh"], [67, 3, 1, "", "static_slogdet"], [67, 3, 1, "", "static_softmax"], [67, 3, 1, "", "static_softplus"], [67, 3, 1, "", "static_solve"], [67, 3, 1, "", "static_split"], [67, 3, 1, "", "static_split_factor"], [67, 3, 1, "", "static_split_func_call"], [67, 3, 1, "", "static_sqrt"], [67, 3, 1, "", "static_square"], [67, 3, 1, "", "static_squeeze"], [67, 3, 1, "", "static_stable_divide"], [67, 3, 1, "", "static_stable_pow"], [67, 3, 1, "", "static_stack"], [67, 3, 1, "", "static_std"], [67, 3, 1, "", "static_stop_gradient"], [67, 3, 1, "", "static_sum"], [67, 3, 1, "", "static_supports_inplace"], [67, 3, 1, "", "static_svd"], [67, 3, 1, "", "static_svdvals"], [67, 3, 1, "", "static_swapaxes"], [67, 3, 1, "", "static_tanh"], [67, 3, 1, "", "static_tensordot"], [67, 3, 1, "", "static_tile"], [67, 3, 1, "", "static_tmp_dir"], [67, 3, 1, "", "static_to_device"], [67, 3, 1, "", "static_to_list"], [67, 3, 1, "", "static_to_native_arrays_and_back"], [67, 3, 1, "", "static_to_numpy"], [67, 3, 1, "", "static_to_scalar"], [67, 3, 1, "", "static_total_mem_on_dev"], [67, 3, 1, "", "static_tpu_is_available"], [67, 3, 1, "", "static_trace"], [67, 3, 1, "", "static_tril"], [67, 3, 1, "", "static_triu"], [67, 3, 1, "", "static_trunc"], [67, 3, 1, "", "static_try_else_none"], [67, 3, 1, "", "static_type_promote_arrays"], [67, 3, 1, "", "static_unique_all"], [67, 3, 1, "", "static_unique_counts"], [67, 3, 1, "", "static_unique_inverse"], [67, 3, 1, "", "static_unique_values"], [67, 3, 1, "", "static_unset_default_device"], [67, 3, 1, "", "static_unset_default_dtype"], [67, 3, 1, "", "static_unset_default_float_dtype"], [67, 3, 1, "", "static_unset_default_int_dtype"], [67, 3, 1, "", "static_unset_with_grads"], [67, 3, 1, "", "static_unstack"], [67, 3, 1, "", "static_used_mem_on_dev"], [67, 3, 1, "", "static_valid_dtype"], [67, 3, 1, "", "static_value_is_nan"], [67, 3, 1, "", "static_var"], [67, 3, 1, "", "static_variable"], [67, 3, 1, "", "static_variable_data"], [67, 3, 1, "", "static_vecdot"], [67, 3, 1, "", "static_vector_norm"], [67, 3, 1, "", "static_vector_to_skew_symmetric_matrix"], [67, 3, 1, "", "static_where"], [67, 3, 1, "", "static_with_grads"], [67, 3, 1, "", "static_zero_pad"], [67, 3, 1, "", "static_zeros"], [67, 3, 1, "", "static_zeros_like"], [67, 3, 1, "", "stop_gradient"], [67, 3, 1, "", "supports_inplace"], [67, 3, 1, "", "svd"], [67, 3, 1, "", "svdvals"], [67, 3, 1, "", "tensordot"], [67, 3, 1, "", "tmp_dir"], [67, 3, 1, "", "to_native_arrays_and_back"], [67, 3, 1, "", "to_scalar"], [67, 3, 1, "", "total_mem_on_dev"], [67, 3, 1, "", "tpu_is_available"], [67, 3, 1, "", "trace"], [67, 3, 1, "", "tril"], [67, 3, 1, "", "triu"], [67, 3, 1, "", "try_else_none"], [67, 3, 1, "", "type_promote_arrays"], [67, 3, 1, "", "unique_all"], [67, 3, 1, "", "unique_counts"], [67, 3, 1, "", "unique_inverse"], [67, 3, 1, "", "unique_values"], [67, 3, 1, "", "unset_default_device"], [67, 3, 1, "", "unset_default_dtype"], [67, 3, 1, "", "unset_default_float_dtype"], [67, 3, 1, "", "unset_default_int_dtype"], [67, 3, 1, "", "unset_with_grads"], [67, 3, 1, "", "used_mem_on_dev"], [67, 3, 1, "", "valid_dtype"], [67, 3, 1, "", "value_is_nan"], [67, 3, 1, "", "variable"], [67, 3, 1, "", "variable_data"], [67, 3, 1, "", "vecdot"], [67, 3, 1, "", "vector_to_skew_symmetric_matrix"], [67, 3, 1, "", "where"], [67, 3, 1, "", "with_grads"], [67, 3, 1, "", "zeros"], [67, 3, 1, "", "zeros_like"]], "ivy.container.container.MultiDevContainer": [[68, 3, 1, "", "__init__"], [68, 3, 1, "", "at_dev"], [68, 3, 1, "", "at_devs"]], "ivy.container.creation": [[70, 1, 1, "", "ContainerWithCreation"]], "ivy.container.data_types": [[72, 1, 1, "", "ContainerWithDataTypes"]], "ivy.container.device": [[74, 1, 1, "", "ContainerWithDevice"]], "ivy.container.elementwise": [[76, 1, 1, "", "ContainerWithElementwise"]], "ivy.container.elementwise.ContainerWithElementwise": [[76, 3, 1, "", "abs"], [76, 3, 1, "", "acos"], [76, 3, 1, "", "acosh"], [76, 3, 1, "", "add"], [76, 3, 1, "", "asin"], [76, 3, 1, "", "asinh"], [76, 3, 1, "", "atan"], [76, 3, 1, "", "atan2"], [76, 3, 1, "", "atanh"], [76, 3, 1, "", "bitwise_and"], [76, 3, 1, "", "bitwise_invert"], [76, 3, 1, "", "bitwise_left_shift"], [76, 3, 1, "", "bitwise_or"], [76, 3, 1, "", "bitwise_right_shift"], [76, 3, 1, "", "bitwise_xor"], [76, 3, 1, "", "ceil"], [76, 3, 1, "", "cos"], [76, 3, 1, "", "cosh"], [76, 3, 1, "", "divide"], [76, 3, 1, "", "equal"], [76, 3, 1, "", "erf"], [76, 3, 1, "", "exp"], [76, 3, 1, "", "expm1"], [76, 3, 1, "", "floor"], [76, 3, 1, "", "floor_divide"], [76, 3, 1, "", "greater"], [76, 3, 1, "", "greater_equal"], [76, 3, 1, "", "isfinite"], [76, 3, 1, "", "isinf"], [76, 3, 1, "", "isnan"], [76, 3, 1, "", "less"], [76, 3, 1, "", "less_equal"], [76, 3, 1, "", "log"], [76, 3, 1, "", "log10"], [76, 3, 1, "", "log1p"], [76, 3, 1, "", "log2"], [76, 3, 1, "", "logaddexp"], [76, 3, 1, "", "logical_and"], [76, 3, 1, "", "logical_not"], [76, 3, 1, "", "logical_or"], [76, 3, 1, "", "logical_xor"], [76, 3, 1, "", "multiply"], [76, 3, 1, "", "negative"], [76, 3, 1, "", "not_equal"], [76, 3, 1, "", "positive"], [76, 3, 1, "", "pow"], [76, 3, 1, "", "remainder"], [76, 3, 1, "", "round"], [76, 3, 1, "", "sign"], [76, 3, 1, "", "sin"], [76, 3, 1, "", "sinh"], [76, 3, 1, "", "sqrt"], [76, 3, 1, "", "square"], [76, 3, 1, "", "static_add"], [76, 3, 1, "", "static_divide"], [76, 3, 1, "", "static_multiply"], [76, 3, 1, "", "static_subtract"], [76, 3, 1, "", "static_tan"], [76, 3, 1, "", "subtract"], [76, 3, 1, "", "tan"], [76, 3, 1, "", "tanh"], [76, 3, 1, "", "trunc"]], "ivy.container.general": [[78, 1, 1, "", "ContainerWithGeneral"]], "ivy.container.general.ContainerWithGeneral": [[78, 3, 1, "", "all_equal"], [78, 3, 1, "", "clip_vector_norm"], [78, 3, 1, "", "static_all_equal"]], "ivy.container.gradients": [[80, 1, 1, "", "ContainerWithGradients"]], "ivy.container.gradients.ContainerWithGradients": [[80, 3, 1, "", "adam_update"], [80, 3, 1, "", "gradient_descent_update"], [80, 3, 1, "", "lamb_update"], [80, 3, 1, "", "lars_update"], [80, 3, 1, "", "optimizer_update"], [80, 3, 1, "", "static_adam_update"], [80, 3, 1, "", "static_gradient_descent_update"], [80, 3, 1, "", "static_lamb_update"], [80, 3, 1, "", "static_lars_update"], [80, 3, 1, "", "static_optimizer_update"]], "ivy.container.image": [[82, 1, 1, "", "ContainerWithImage"]], "ivy.container.layers": [[84, 1, 1, "", "ContainerWithLayers"]], "ivy.container.linear_algebra": [[86, 1, 1, "", "ContainerWithLinearAlgebra"]], "ivy.container.linear_algebra.ContainerWithLinearAlgebra": [[86, 3, 1, "", "matmul"]], "ivy.container.losses": [[88, 1, 1, "", "ContainerWithLosses"]], "ivy.container.losses.ContainerWithLosses": [[88, 3, 1, "", "binary_cross_entropy"], [88, 3, 1, "", "cross_entropy"], [88, 3, 1, "", "sparse_cross_entropy"], [88, 3, 1, "", "static_binary_cross_entropy"], [88, 3, 1, "", "static_cross_entropy"], [88, 3, 1, "", "static_sparse_cross_entropy"]], "ivy.container.manipulation": [[90, 1, 1, "", "ContainerWithManipulation"]], "ivy.container.manipulation.ContainerWithManipulation": [[90, 3, 1, "", "clip"], [90, 3, 1, "", "concat"], [90, 3, 1, "", "constant_pad"], [90, 3, 1, "", "expand_dims"], [90, 3, 1, "", "flip"], [90, 3, 1, "", "permute_dims"], [90, 3, 1, "", "repeat"], [90, 3, 1, "", "reshape"], [90, 3, 1, "", "roll"], [90, 3, 1, "", "squeeze"], [90, 3, 1, "", "stack"], [90, 3, 1, "", "static_clip"], [90, 3, 1, "", "static_roll"], [90, 3, 1, "", "swapaxes"], [90, 3, 1, "", "tile"], [90, 3, 1, "", "zero_pad"]], "ivy.container.norms": [[92, 1, 1, "", "ContainerWithNorms"]], "ivy.container.norms.ContainerWithNorms": [[92, 3, 1, "", "layer_norm"]], "ivy.container.random": [[94, 1, 1, "", "ContainerWithRandom"]], "ivy.container.random.ContainerWithRandom": [[94, 3, 1, "", "random_uniform"], [94, 3, 1, "", "static_randint"], [94, 3, 1, "", "static_random_uniform"]], "ivy.container.searching": [[96, 1, 1, "", "ContainerWithSearching"]], "ivy.container.set": [[98, 1, 1, "", "ContainerWithSet"]], "ivy.container.sorting": [[100, 1, 1, "", "ContainerWithSorting"]], "ivy.container.sorting.ContainerWithSorting": [[100, 3, 1, "", "argsort"], [100, 3, 1, "", "sort"], [100, 3, 1, "", "static_argsort"], [100, 3, 1, "", "static_sort"]], "ivy.container.statistical": [[102, 1, 1, "", "ContainerWithStatistical"]], "ivy.container.statistical.ContainerWithStatistical": [[102, 3, 1, "", "einsum"], [102, 3, 1, "", "max"], [102, 3, 1, "", "mean"], [102, 3, 1, "", "min"], [102, 3, 1, "", "prod"], [102, 3, 1, "", "std"], [102, 3, 1, "", "sum"], [102, 3, 1, "", "var"]], "ivy.container.utility": [[104, 1, 1, "", "ContainerWithUtility"]], "ivy.container.utility.ContainerWithUtility": [[104, 3, 1, "", "all"], [104, 3, 1, "", "any"]], "ivy.container.wrapping": [[106, 2, 1, "", "add_ivy_container_instance_methods"]], "ivy.func_wrapper": [[147, 2, 1, "", "handle_nestable"], [148, 2, 1, "", "handle_out_argument"], [149, 2, 1, "", "infer_device"], [150, 2, 1, "", "infer_dtype"], [151, 2, 1, "", "inputs_to_ivy_arrays"], [152, 2, 1, "", "inputs_to_native_arrays"], [153, 2, 1, "", "outputs_to_ivy_arrays"], [154, 2, 1, "", "to_native_arrays_and_back"]], "ivy.functional.ivy": [[156, 0, 0, "-", "activations"], [164, 0, 0, "-", "compilation"], [166, 0, 0, "-", "constants"], [167, 0, 0, "-", "creation"], [186, 0, 0, "-", "data_type"], [219, 0, 0, "-", "device"], [269, 0, 0, "-", "elementwise"], [329, 0, 0, "-", "general"], [393, 0, 0, "-", "gradients"], [409, 0, 0, "-", "layers"], [422, 0, 0, "-", "linear_algebra"], [447, 0, 0, "-", "losses"], [451, 0, 0, "-", "manipulation"], [467, 0, 0, "-", "meta"], [471, 0, 0, "-", "nest"], [489, 0, 0, "-", "norms"], [491, 0, 0, "-", "random"], [498, 0, 0, "-", "searching"], [503, 0, 0, "-", "set"], [508, 0, 0, "-", "sorting"], [511, 0, 0, "-", "statistical"], [520, 0, 0, "-", "utility"]], "ivy.functional.ivy.activations": [[157, 2, 1, "", "gelu"], [158, 2, 1, "", "leaky_relu"], [159, 2, 1, "", "relu"], [160, 2, 1, "", "sigmoid"], [161, 2, 1, "", "softmax"], [162, 2, 1, "", "softplus"], [163, 2, 1, "", "tanh"]], "ivy.functional.ivy.compilation": [[165, 2, 1, "", "compile"]], "ivy.functional.ivy.constants": [[166, 5, 1, "", "e"], [166, 5, 1, "", "inf"], [166, 5, 1, "", "nan"], [166, 5, 1, "", "newaxis"], [166, 5, 1, "", "pi"]], "ivy.functional.ivy.creation": [[168, 2, 1, "", "arange"], [167, 2, 1, "", "array"], [169, 2, 1, "", "asarray"], [170, 2, 1, "", "empty"], [171, 2, 1, "", "empty_like"], [172, 2, 1, "", "eye"], [173, 2, 1, "", "from_dlpack"], [174, 2, 1, "", "full"], [175, 2, 1, "", "full_like"], [176, 2, 1, "", "linspace"], [177, 2, 1, "", "logspace"], [178, 2, 1, "", "meshgrid"], [179, 2, 1, "", "native_array"], [180, 2, 1, "", "ones"], [181, 2, 1, "", "ones_like"], [182, 2, 1, "", "tril"], [183, 2, 1, "", "triu"], [184, 2, 1, "", "zeros"], [185, 2, 1, "", "zeros_like"]], "ivy.functional.ivy.data_type": [[186, 1, 1, "", "DefaultDtype"], [186, 1, 1, "", "DefaultFloatDtype"], [186, 1, 1, "", "DefaultIntDtype"], [190, 2, 1, "", "as_ivy_dtype"], [191, 2, 1, "", "as_native_dtype"], [192, 2, 1, "", "astype"], [193, 2, 1, "", "broadcast_arrays"], [194, 2, 1, "", "broadcast_to"], [195, 2, 1, "", "can_cast"], [196, 2, 1, "", "closest_valid_dtype"], [197, 2, 1, "", "default_dtype"], [198, 2, 1, "", "default_float_dtype"], [199, 2, 1, "", "default_int_dtype"], [200, 2, 1, "", "dtype"], [201, 2, 1, "", "dtype_bits"], [202, 2, 1, "", "finfo"], [203, 2, 1, "", "function_supported_dtypes"], [204, 2, 1, "", "function_unsupported_dtypes"], [205, 2, 1, "", "iinfo"], [206, 2, 1, "", "invalid_dtype"], [207, 2, 1, "", "is_float_dtype"], [208, 2, 1, "", "is_int_dtype"], [209, 2, 1, "", "promote_types"], [210, 2, 1, "", "result_type"], [211, 2, 1, "", "set_default_dtype"], [212, 2, 1, "", "set_default_float_dtype"], [213, 2, 1, "", "set_default_int_dtype"], [214, 2, 1, "", "type_promote_arrays"], [215, 2, 1, "", "unset_default_dtype"], [216, 2, 1, "", "unset_default_float_dtype"], [217, 2, 1, "", "unset_default_int_dtype"], [218, 2, 1, "", "valid_dtype"]], "ivy.functional.ivy.data_type.DefaultDtype": [[186, 3, 1, "", "__init__"]], "ivy.functional.ivy.data_type.DefaultFloatDtype": [[186, 3, 1, "", "__init__"]], "ivy.functional.ivy.data_type.DefaultIntDtype": [[186, 3, 1, "", "__init__"]], "ivy.functional.ivy.device": [[219, 1, 1, "", "DefaultDevice"], [221, 1, 1, "", "DevClonedItem"], [222, 1, 1, "", "DevClonedIter"], [223, 1, 1, "", "DevClonedNest"], [224, 1, 1, "", "DevDistItem"], [225, 1, 1, "", "DevDistIter"], [226, 1, 1, "", "DevDistNest"], [219, 1, 1, "", "DevManager"], [228, 1, 1, "", "DevMapper"], [229, 1, 1, "", "DevMapperMultiProc"], [219, 1, 1, "", "MultiDev"], [231, 1, 1, "", "MultiDevItem"], [232, 1, 1, "", "MultiDevIter"], [233, 1, 1, "", "MultiDevNest"], [234, 1, 1, "", "Profiler"], [235, 2, 1, "", "as_ivy_dev"], [236, 2, 1, "", "as_native_dev"], [237, 2, 1, "", "clear_mem_on_dev"], [238, 2, 1, "", "default_device"], [239, 2, 1, "", "dev"], [240, 2, 1, "", "dev_clone"], [241, 2, 1, "", "dev_clone_array"], [242, 2, 1, "", "dev_clone_iter"], [243, 2, 1, "", "dev_clone_nest"], [244, 2, 1, "", "dev_dist"], [245, 2, 1, "", "dev_dist_array"], [246, 2, 1, "", "dev_dist_iter"], [247, 2, 1, "", "dev_dist_nest"], [248, 2, 1, "", "dev_unify"], [249, 2, 1, "", "dev_unify_array"], [250, 2, 1, "", "dev_unify_iter"], [251, 2, 1, "", "dev_unify_nest"], [252, 2, 1, "", "dev_util"], [253, 2, 1, "", "get_all_ivy_arrays_on_dev"], [254, 2, 1, "", "gpu_is_available"], [255, 2, 1, "", "num_cpu_cores"], [256, 2, 1, "", "num_gpus"], [257, 2, 1, "", "num_ivy_arrays_on_dev"], [258, 2, 1, "", "percent_used_mem_on_dev"], [259, 2, 1, "", "print_all_ivy_arrays_on_dev"], [260, 2, 1, "", "set_default_device"], [261, 2, 1, "", "set_split_factor"], [262, 2, 1, "", "split_factor"], [263, 2, 1, "", "split_func_call"], [264, 2, 1, "", "to_device"], [265, 2, 1, "", "total_mem_on_dev"], [266, 2, 1, "", "tpu_is_available"], [267, 2, 1, "", "unset_default_device"], [268, 2, 1, "", "used_mem_on_dev"]], "ivy.functional.ivy.device.DefaultDevice": [[219, 3, 1, "", "__enter__"], [219, 3, 1, "", "__init__"]], "ivy.functional.ivy.device.DevManager": [[219, 3, 1, "", "__init__"], [219, 3, 1, "", "da_tune_step"], [219, 4, 1, "", "dim_size"], [219, 3, 1, "", "ds_tune_step"], [219, 3, 1, "", "map"], [219, 3, 1, "", "repeated_config_check"], [219, 4, 1, "", "tune_step"], [219, 4, 1, "", "tuned"]], "ivy.functional.ivy.device.DevMapper": [[228, 3, 1, "", "__init__"], [228, 3, 1, "", "map"]], "ivy.functional.ivy.device.DevMapperMultiProc": [[229, 3, 1, "", "__init__"]], "ivy.functional.ivy.device.MultiDev": [[219, 3, 1, "", "__init__"]], "ivy.functional.ivy.device.MultiDevItem": [[231, 3, 1, "", "__init__"], [231, 3, 1, "", "items"], [231, 3, 1, "", "keys"], [231, 4, 1, "", "shape"], [231, 3, 1, "", "values"]], "ivy.functional.ivy.device.MultiDevIter": [[232, 3, 1, "", "__init__"], [232, 3, 1, "", "at_dev"], [232, 3, 1, "", "at_devs"]], "ivy.functional.ivy.device.MultiDevNest": [[233, 3, 1, "", "__init__"], [233, 3, 1, "", "at_dev"]], "ivy.functional.ivy.device.Profiler": [[234, 3, 1, "", "__init__"], [234, 3, 1, "", "start"], [234, 3, 1, "", "stop"]], "ivy.functional.ivy.elementwise": [[270, 2, 1, "", "abs"], [271, 2, 1, "", "acos"], [272, 2, 1, "", "acosh"], [273, 2, 1, "", "add"], [274, 2, 1, "", "asin"], [275, 2, 1, "", "asinh"], [276, 2, 1, "", "atan"], [277, 2, 1, "", "atan2"], [278, 2, 1, "", "atanh"], [279, 2, 1, "", "bitwise_and"], [280, 2, 1, "", "bitwise_invert"], [281, 2, 1, "", "bitwise_left_shift"], [282, 2, 1, "", "bitwise_or"], [283, 2, 1, "", "bitwise_right_shift"], [284, 2, 1, "", "bitwise_xor"], [285, 2, 1, "", "ceil"], [286, 2, 1, "", "cos"], [287, 2, 1, "", "cosh"], [288, 2, 1, "", "divide"], [289, 2, 1, "", "equal"], [290, 2, 1, "", "erf"], [291, 2, 1, "", "exp"], [292, 2, 1, "", "expm1"], [293, 2, 1, "", "floor"], [294, 2, 1, "", "floor_divide"], [295, 2, 1, "", "greater"], [296, 2, 1, "", "greater_equal"], [297, 2, 1, "", "isfinite"], [298, 2, 1, "", "isinf"], [299, 2, 1, "", "isnan"], [300, 2, 1, "", "less"], [301, 2, 1, "", "less_equal"], [302, 2, 1, "", "log"], [303, 2, 1, "", "log10"], [304, 2, 1, "", "log1p"], [305, 2, 1, "", "log2"], [306, 2, 1, "", "logaddexp"], [307, 2, 1, "", "logical_and"], [308, 2, 1, "", "logical_not"], [309, 2, 1, "", "logical_or"], [310, 2, 1, "", "logical_xor"], [311, 2, 1, "", "maximum"], [312, 2, 1, "", "minimum"], [313, 2, 1, "", "multiply"], [314, 2, 1, "", "negative"], [315, 2, 1, "", "not_equal"], [316, 2, 1, "", "positive"], [317, 2, 1, "", "pow"], [318, 2, 1, "", "remainder"], [319, 2, 1, "", "round"], [320, 2, 1, "", "sign"], [321, 2, 1, "", "sin"], [322, 2, 1, "", "sinh"], [323, 2, 1, "", "sqrt"], [324, 2, 1, "", "square"], [325, 2, 1, "", "subtract"], [326, 2, 1, "", "tan"], [327, 2, 1, "", "tanh"], [328, 2, 1, "", "trunc"]], "ivy.functional.ivy.general": [[330, 2, 1, "", "all_equal"], [331, 2, 1, "", "arg_info"], [332, 2, 1, "", "arg_names"], [333, 2, 1, "", "array_equal"], [334, 2, 1, "", "arrays_equal"], [335, 2, 1, "", "assert_supports_inplace"], [336, 2, 1, "", "cache_fn"], [337, 2, 1, "", "clip_matrix_norm"], [338, 2, 1, "", "clip_vector_norm"], [339, 2, 1, "", "container_types"], [340, 2, 1, "", "copy_array"], [341, 2, 1, "", "cumprod"], [342, 2, 1, "", "cumsum"], [343, 2, 1, "", "current_backend_str"], [344, 2, 1, "", "default"], [345, 2, 1, "", "einops_rearrange"], [346, 2, 1, "", "einops_reduce"], [347, 2, 1, "", "einops_repeat"], [348, 2, 1, "", "exists"], [349, 2, 1, "", "floormod"], [350, 2, 1, "", "fourier_encode"], [351, 2, 1, "", "gather"], [352, 2, 1, "", "gather_nd"], [353, 2, 1, "", "get_all_arrays_in_memory"], [354, 2, 1, "", "get_min_base"], [355, 2, 1, "", "get_min_denominator"], [356, 2, 1, "", "get_num_dims"], [357, 2, 1, "", "get_referrers_recursive"], [358, 2, 1, "", "has_nans"], [359, 2, 1, "", "indices_where"], [360, 2, 1, "", "inplace_arrays_supported"], [361, 2, 1, "", "inplace_decrement"], [362, 2, 1, "", "inplace_increment"], [363, 2, 1, "", "inplace_update"], [364, 2, 1, "", "inplace_variables_supported"], [365, 2, 1, "", "is_array"], [366, 2, 1, "", "is_ivy_array"], [367, 2, 1, "", "is_ivy_container"], [368, 2, 1, "", "is_native_array"], [369, 2, 1, "", "match_kwargs"], [370, 2, 1, "", "multiprocessing"], [371, 2, 1, "", "num_arrays_in_memory"], [372, 2, 1, "", "one_hot"], [373, 2, 1, "", "print_all_arrays_in_memory"], [374, 2, 1, "", "queue_timeout"], [375, 2, 1, "", "scatter_flat"], [376, 2, 1, "", "scatter_nd"], [377, 2, 1, "", "set_min_base"], [378, 2, 1, "", "set_min_denominator"], [379, 2, 1, "", "set_queue_timeout"], [380, 2, 1, "", "set_tmp_dir"], [381, 2, 1, "", "shape"], [382, 2, 1, "", "shape_to_tuple"], [383, 2, 1, "", "stable_divide"], [384, 2, 1, "", "stable_pow"], [385, 2, 1, "", "supports_inplace"], [386, 2, 1, "", "tmp_dir"], [387, 2, 1, "", "to_list"], [388, 2, 1, "", "to_numpy"], [389, 2, 1, "", "to_scalar"], [390, 2, 1, "", "try_else_none"], [391, 2, 1, "", "unstack"], [392, 2, 1, "", "value_is_nan"]], "ivy.functional.ivy.gradients": [[393, 1, 1, "", "GradientTracking"], [395, 2, 1, "", "adam_step"], [396, 2, 1, "", "adam_update"], [397, 2, 1, "", "execute_with_gradients"], [398, 2, 1, "", "gradient_descent_update"], [399, 2, 1, "", "is_variable"], [400, 2, 1, "", "lamb_update"], [401, 2, 1, "", "lars_update"], [402, 2, 1, "", "optimizer_update"], [403, 2, 1, "", "set_with_grads"], [404, 2, 1, "", "stop_gradient"], [405, 2, 1, "", "unset_with_grads"], [406, 2, 1, "", "variable"], [407, 2, 1, "", "variable_data"], [408, 2, 1, "", "with_grads"]], "ivy.functional.ivy.gradients.GradientTracking": [[393, 3, 1, "", "__init__"]], "ivy.functional.ivy.layers": [[410, 2, 1, "", "conv1d"], [411, 2, 1, "", "conv1d_transpose"], [412, 2, 1, "", "conv2d"], [413, 2, 1, "", "conv2d_transpose"], [414, 2, 1, "", "conv3d"], [415, 2, 1, "", "conv3d_transpose"], [416, 2, 1, "", "depthwise_conv2d"], [417, 2, 1, "", "dropout"], [418, 2, 1, "", "linear"], [419, 2, 1, "", "lstm_update"], [420, 2, 1, "", "multi_head_attention"], [421, 2, 1, "", "scaled_dot_product_attention"]], "ivy.functional.ivy.linear_algebra": [[423, 2, 1, "", "cholesky"], [424, 2, 1, "", "cross"], [425, 2, 1, "", "det"], [426, 2, 1, "", "diagonal"], [427, 2, 1, "", "eigh"], [428, 2, 1, "", "eigvalsh"], [429, 2, 1, "", "inv"], [430, 2, 1, "", "matmul"], [431, 2, 1, "", "matrix_norm"], [432, 2, 1, "", "matrix_power"], [433, 2, 1, "", "matrix_rank"], [434, 2, 1, "", "matrix_transpose"], [435, 2, 1, "", "outer"], [436, 2, 1, "", "pinv"], [437, 2, 1, "", "qr"], [438, 2, 1, "", "slogdet"], [439, 2, 1, "", "solve"], [440, 2, 1, "", "svd"], [441, 2, 1, "", "svdvals"], [442, 2, 1, "", "tensordot"], [443, 2, 1, "", "trace"], [444, 2, 1, "", "vecdot"], [445, 2, 1, "", "vector_norm"], [446, 2, 1, "", "vector_to_skew_symmetric_matrix"]], "ivy.functional.ivy.losses": [[448, 2, 1, "", "binary_cross_entropy"], [449, 2, 1, "", "cross_entropy"], [450, 2, 1, "", "sparse_cross_entropy"]], "ivy.functional.ivy.manipulation": [[452, 2, 1, "", "clip"], [453, 2, 1, "", "concat"], [454, 2, 1, "", "constant_pad"], [455, 2, 1, "", "expand_dims"], [456, 2, 1, "", "flip"], [457, 2, 1, "", "permute_dims"], [458, 2, 1, "", "repeat"], [459, 2, 1, "", "reshape"], [460, 2, 1, "", "roll"], [461, 2, 1, "", "split"], [462, 2, 1, "", "squeeze"], [463, 2, 1, "", "stack"], [464, 2, 1, "", "swapaxes"], [465, 2, 1, "", "tile"], [466, 2, 1, "", "zero_pad"]], "ivy.functional.ivy.meta": [[468, 2, 1, "", "fomaml_step"], [469, 2, 1, "", "maml_step"], [470, 2, 1, "", "reptile_step"]], "ivy.functional.ivy.nest": [[472, 2, 1, "", "all_nested_indices"], [473, 2, 1, "", "copy_nest"], [474, 2, 1, "", "index_nest"], [475, 2, 1, "", "insert_into_nest_at_index"], [476, 2, 1, "", "insert_into_nest_at_indices"], [477, 2, 1, "", "map"], [478, 2, 1, "", "map_nest_at_index"], [479, 2, 1, "", "map_nest_at_indices"], [480, 2, 1, "", "multi_index_nest"], [481, 2, 1, "", "nested_any"], [482, 2, 1, "", "nested_indices_where"], [483, 2, 1, "", "nested_map"], [484, 2, 1, "", "nested_multi_map"], [485, 2, 1, "", "prune_nest_at_index"], [486, 2, 1, "", "prune_nest_at_indices"], [487, 2, 1, "", "set_nest_at_index"], [488, 2, 1, "", "set_nest_at_indices"]], "ivy.functional.ivy.norms": [[490, 2, 1, "", "layer_norm"]], "ivy.functional.ivy.random": [[492, 2, 1, "", "multinomial"], [493, 2, 1, "", "randint"], [494, 2, 1, "", "random_normal"], [495, 2, 1, "", "random_uniform"], [496, 2, 1, "", "seed"], [497, 2, 1, "", "shuffle"]], "ivy.functional.ivy.searching": [[499, 2, 1, "", "argmax"], [500, 2, 1, "", "argmin"], [501, 2, 1, "", "nonzero"], [502, 2, 1, "", "where"]], "ivy.functional.ivy.set": [[504, 2, 1, "", "unique_all"], [505, 2, 1, "", "unique_counts"], [506, 2, 1, "", "unique_inverse"], [507, 2, 1, "", "unique_values"]], "ivy.functional.ivy.sorting": [[509, 2, 1, "", "argsort"], [510, 2, 1, "", "sort"]], "ivy.functional.ivy.statistical": [[512, 2, 1, "", "einsum"], [513, 2, 1, "", "max"], [514, 2, 1, "", "mean"], [515, 2, 1, "", "min"], [516, 2, 1, "", "prod"], [517, 2, 1, "", "std"], [518, 2, 1, "", "sum"], [519, 2, 1, "", "var"]], "ivy.functional.ivy.utility": [[521, 2, 1, "", "all"], [522, 2, 1, "", "any"]], "ivy.inspection": [[527, 2, 1, "", "add_array_specs"], [528, 2, 1, "", "fn_array_spec"]], "ivy.stateful": [[530, 0, 0, "-", "activations"], [533, 0, 0, "-", "converters"], [535, 0, 0, "-", "initializers"], [544, 0, 0, "-", "layers"], [556, 0, 0, "-", "module"], [558, 0, 0, "-", "norms"], [560, 0, 0, "-", "optimizers"], [566, 0, 0, "-", "sequential"]], "ivy.stateful.activations": [[531, 1, 1, "", "GEGLU"], [532, 1, 1, "", "GELU"]], "ivy.stateful.activations.GEGLU": [[531, 3, 1, "", "__init__"]], "ivy.stateful.activations.GELU": [[532, 3, 1, "", "__init__"]], "ivy.stateful.converters": [[534, 2, 1, "", "to_ivy_module"]], "ivy.stateful.initializers": [[535, 1, 1, "", "Constant"], [537, 1, 1, "", "FirstLayerSiren"], [538, 1, 1, "", "GlorotUniform"], [535, 1, 1, "", "KaimingNormal"], [540, 1, 1, "", "Ones"], [541, 1, 1, "", "Siren"], [535, 1, 1, "", "Uniform"], [543, 1, 1, "", "Zeros"]], "ivy.stateful.initializers.Constant": [[535, 3, 1, "", "__init__"], [535, 3, 1, "", "create_variables"]], "ivy.stateful.initializers.FirstLayerSiren": [[537, 3, 1, "", "__init__"]], "ivy.stateful.initializers.GlorotUniform": [[538, 3, 1, "", "__init__"]], "ivy.stateful.initializers.KaimingNormal": [[535, 3, 1, "", "__init__"], [535, 3, 1, "", "create_variables"]], "ivy.stateful.initializers.Ones": [[540, 3, 1, "", "__init__"]], "ivy.stateful.initializers.Siren": [[541, 3, 1, "", "__init__"]], "ivy.stateful.initializers.Uniform": [[535, 3, 1, "", "__init__"], [535, 3, 1, "", "create_variables"]], "ivy.stateful.initializers.Zeros": [[543, 3, 1, "", "__init__"]], "ivy.stateful.layers": [[545, 1, 1, "", "Conv1D"], [546, 1, 1, "", "Conv1DTranspose"], [547, 1, 1, "", "Conv2D"], [548, 1, 1, "", "Conv2DTranspose"], [549, 1, 1, "", "Conv3D"], [550, 1, 1, "", "Conv3DTranspose"], [551, 1, 1, "", "DepthwiseConv2D"], [552, 1, 1, "", "Dropout"], [553, 1, 1, "", "LSTM"], [554, 1, 1, "", "Linear"], [555, 1, 1, "", "MultiHeadAttention"]], "ivy.stateful.layers.Conv1D": [[545, 3, 1, "", "__init__"]], "ivy.stateful.layers.Conv1DTranspose": [[546, 3, 1, "", "__init__"]], "ivy.stateful.layers.Conv2D": [[547, 3, 1, "", "__init__"]], "ivy.stateful.layers.Conv2DTranspose": [[548, 3, 1, "", "__init__"]], "ivy.stateful.layers.Conv3D": [[549, 3, 1, "", "__init__"]], "ivy.stateful.layers.Conv3DTranspose": [[550, 3, 1, "", "__init__"]], "ivy.stateful.layers.DepthwiseConv2D": [[551, 3, 1, "", "__init__"]], "ivy.stateful.layers.Dropout": [[552, 3, 1, "", "__init__"]], "ivy.stateful.layers.LSTM": [[553, 3, 1, "", "__init__"], [553, 3, 1, "", "get_initial_state"]], "ivy.stateful.layers.Linear": [[554, 3, 1, "", "__init__"]], "ivy.stateful.layers.MultiHeadAttention": [[555, 3, 1, "", "__init__"]], "ivy.stateful.module": [[557, 1, 1, "", "Module"]], "ivy.stateful.module.Module": [[557, 3, 1, "", "__init__"], [557, 3, 1, "", "build"], [557, 4, 1, "", "build_mode"], [557, 4, 1, "", "built"], [557, 3, 1, "", "check_submod_rets"], [557, 3, 1, "", "get_mod_key"], [557, 3, 1, "", "mod_depth"], [557, 3, 1, "", "mod_height"], [557, 3, 1, "", "mod_with_top_mod_key_chain"], [557, 3, 1, "", "save_weights"], [557, 3, 1, "", "show_mod_in_top_mod"], [557, 3, 1, "", "show_structure"], [557, 3, 1, "", "show_v_in_top_v"], [557, 3, 1, "", "sub_mods"], [557, 3, 1, "", "track_submod_call_order"], [557, 3, 1, "", "track_submod_rets"], [557, 3, 1, "", "v_with_top_v_key_chains"]], "ivy.stateful.norms": [[559, 1, 1, "", "LayerNorm"]], "ivy.stateful.norms.LayerNorm": [[559, 3, 1, "", "__init__"]], "ivy.stateful.optimizers": [[561, 1, 1, "", "Adam"], [562, 1, 1, "", "LAMB"], [563, 1, 1, "", "LARS"], [564, 1, 1, "", "Optimizer"], [565, 1, 1, "", "SGD"]], "ivy.stateful.optimizers.Adam": [[561, 3, 1, "", "__init__"], [561, 3, 1, "", "set_state"], [561, 4, 1, "", "state"]], "ivy.stateful.optimizers.LAMB": [[562, 3, 1, "", "__init__"], [562, 3, 1, "", "set_state"], [562, 4, 1, "", "state"]], "ivy.stateful.optimizers.LARS": [[563, 3, 1, "", "__init__"], [563, 3, 1, "", "set_state"], [563, 4, 1, "", "state"]], "ivy.stateful.optimizers.Optimizer": [[564, 3, 1, "", "__init__"], [564, 3, 1, "", "set_state"], [564, 3, 1, "", "step"]], "ivy.stateful.optimizers.SGD": [[565, 3, 1, "", "__init__"], [565, 3, 1, "", "set_state"], [565, 4, 1, "", "state"]], "ivy.stateful.sequential": [[567, 1, 1, "", "Sequential"]], "ivy.stateful.sequential.Sequential": [[567, 3, 1, "", "__init__"]], "ivy.verbosity": [[570, 2, 1, "", "cprint"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:function", "3": "py:method", "4": "py:property", "5": "py:data"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "function", "Python function"], "3": ["py", "method", "Python method"], "4": ["py", "property", "Python property"], "5": ["py", "data", "Python data"]}, "titleterms": {"activ": [0, 62, 156, 530], "arraywithactiv": 1, "convers": 2, "args_to_ivi": 3, "args_to_n": 4, "to_ivi": 5, "to_n": 6, "creation": [7, 69, 167], "arraywithcr": 8, "data": [9, 71, 117, 123, 131, 145, 186, 503, 504, 505, 507], "type": [9, 71, 118, 123, 145, 186], "arraywithdatatyp": 10, "devic": [11, 73, 124, 126, 219], "arraywithdevic": 12, "elementwis": [13, 75, 269], "arraywithelementwis": 14, "gener": [15, 77, 117, 329], "arraywithgener": 16, "gradient": [17, 79, 393], "arraywithgradi": 18, "imag": [19, 81], "arraywithimag": 20, "layer": [21, 83, 409, 544], "arraywithlay": 22, "linear": [23, 85, 418, 422, 554], "algebra": [23, 85, 422], "arraywithlinearalgebra": 24, "loss": [25, 87, 447], "arraywithloss": 26, "manipul": [27, 89, 451], "arraywithmanipul": 28, "norm": [29, 91, 489, 558], "arraywithnorm": 30, "random": [31, 93, 491], "arraywithrandom": 32, "search": [33, 95, 498], "arraywithsearch": 34, "set": [35, 97, 108, 119, 503], "arraywithset": 36, "sort": [37, 99, 508, 510], "arraywithsort": 38, "statist": [39, 101, 511], "arraywithstatist": 40, "util": [41, 103, 520], "arraywithutil": 42, "wrap": [43, 105, 120], "add_ivy_array_instance_method": 44, "backend": [45, 113, 119, 128, 145], "handler": [45, 128], "choose_random_backend": 47, "clear_backend_stack": 48, "current_backend": 49, "get_backend": 50, "set_backend": 51, "try_import_ivy_jax": 52, "try_import_ivy_mxnet": 53, "try_import_ivy_numpi": 54, "try_import_ivy_tf": 55, "try_import_ivy_torch": 56, "unset_backend": 57, "background": [58, 523], "ml": 59, "explos": 59, "standard": 60, "skeptic": 60, "complimentari": 60, "vs": [60, 145], "competit": 60, "do": 60, "work": [60, 111], "The": [60, 109, 130, 145], "arrai": [60, 116, 121, 126, 130], "api": [60, 110, 113, 116, 122, 128, 130, 132, 133], "why": 61, "unifi": [61, 130], "No": [61, 108], "more": 61, "re": 61, "implement": 61, "infinit": 61, "shelf": 61, "life": 61, "containerwithactiv": 63, "base": 64, "containerbas": 65, "contain": [66, 67, 122, 131], "multidevcontain": 68, "containerwithcr": 70, "containerwithdatatyp": 72, "containerwithdevic": 74, "containerwithelementwis": 76, "containerwithgener": 78, "containerwithgradi": 80, "containerwithimag": 82, "containerwithlay": 84, "containerwithlinearalgebra": 86, "containerwithloss": 88, "containerwithmanipul": 90, "containerwithnorm": 92, "containerwithrandom": 94, "containerwithsearch": 96, "containerwithset": 98, "containerwithsort": 100, "containerwithstatist": 102, "containerwithutil": 104, "add_ivy_container_instance_method": 106, "contribut": [107, 523], "up": 108, "clone": 108, "ivi": [108, 113, 115, 117, 121, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 144], "pycharm": 108, "virtual": 108, "environ": 108, "docker": [108, 109, 111], "us": [108, 111, 131], "miniconda": [108, 111], "venv": [108, 111], "interpret": 108, "window": 108, "maco": 108, "ubuntu": 108, "github": 108, "codespac": 108, "pre": 108, "commit": [108, 109], "basic": 109, "get": 109, "help": 109, "todo": 109, "list": 109, "issu": 109, "manag": 109, "your": 109, "fork": 109, "who": 109, "To": 109, "ask": 109, "With": 109, "command": 109, "line": 109, "browser": 109, "pull": 109, "request": 109, "small": 109, "often": 109, "run": 109, "test": [109, 116, 117], "local": 109, "open": 110, "task": 110, "function": [110, 118, 120, 122, 123, 124, 126, 128, 133, 145], "format": 110, "frontend": [110, 133], "build": [111, 128], "doc": 111, "dockerless": 111, "document": 111, "pipelin": [111, 145], "make_doc": 111, "sh": 111, "entrypoint": 111, "_make_doc": 111, "generate_src_rst_fil": 111, "py": 111, "sphinx": 111, "correct_built_html_fil": 111, "remove_fil": 111, "deep": 112, "dive": 112, "navig": 113, "code": 113, "categor": 113, "submodul": 113, "design": [113, 127, 523], "docstr": [114, 115], "exampl": [115, 126], "tan": [115, 326], "roll": [115, 460], "add": [115, 273], "hypothesi": 117, "self": 117, "consist": 117, "explicit": 117, "test_array_funct": 117, "primari": 118, "composit": 118, "mix": 118, "standalon": 118, "nestabl": [118, 122, 126], "conveni": 118, "nativ": 121, "handl": 121, "instanc": [122, 130], "method": [122, 130, 131], "static": 122, "special": 122, "modul": [123, 124, 132, 556, 557], "argument": [123, 124, 125, 126], "other": [123, 124], "inplac": 125, "updat": 125, "out": [125, 126], "copi": 125, "dtype": [126, 200], "number": 126, "oper": [126, 130, 145], "integ": 126, "sequenc": 126, "block": 128, "framework": [128, 129], "graph": [128, 133], "compil": [128, 133, 164, 165], "class": 130, "monkei": 130, "patch": 130, "construct": 131, "represent": 131, "recurs": 131, "built": 131, "ins": 131, "access": 131, "save": 131, "load": 131, "comparison": 131, "custom": [131, 145], "case": 131, "compartment": 131, "configur": 131, "network": [131, 133], "weight": 131, "state": [132, 145], "initi": [132, 535], "optim": [132, 560, 564], "transpil": 133, "role": 133, "convert": [133, 533], "model": [133, 140, 145], "builder": 135, "ecosystem": 136, "gym": [137, 144], "mech": 138, "memori": [139, 144], "robot": [141, 144], "vision": [142, 144], "extens": [143, 523], "appli": 144, "librari": 144, "mechan": 144, "faq": 145, "mana": 145, "version": 145, "dynam": 145, "size": 145, "shape": [145, 381, 503, 504, 505, 507], "check": 145, "control": 145, "flow": 145, "auto": 145, "differenti": 145, "replica": 145, "parallel": 145, "support": 145, "altern": 145, "structur": 145, "func": 146, "wrapper": 146, "handle_nest": 147, "handle_out_argu": 148, "infer_devic": 149, "infer_dtyp": 150, "inputs_to_ivy_arrai": 151, "inputs_to_native_arrai": 152, "outputs_to_ivy_arrai": 153, "to_native_arrays_and_back": 154, "gelu": [157, 532], "leaky_relu": 158, "relu": 159, "sigmoid": 160, "softmax": 161, "softplu": 162, "tanh": [163, 327], "constant": 166, "note": [167, 173], "arang": 168, "asarrai": 169, "empti": 170, "empty_lik": 171, "ey": 172, "from_dlpack": 173, "full": 174, "full_lik": 175, "linspac": 176, "logspac": 177, "meshgrid": 178, "native_arrai": 179, "ones": 180, "ones_lik": 181, "tril": 182, "triu": 183, "zero": [184, 543], "zeros_lik": 185, "as_ivy_dtyp": 190, "as_native_dtyp": 191, "astyp": 192, "broadcast_arrai": 193, "broadcast_to": 194, "can_cast": 195, "closest_valid_dtyp": 196, "default_dtyp": 197, "default_float_dtyp": 198, "default_int_dtyp": 199, "dtype_bit": 201, "finfo": 202, "function_supported_dtyp": 203, "function_unsupported_dtyp": 204, "iinfo": 205, "invalid_dtyp": 206, "is_float_dtyp": 207, "is_int_dtyp": 208, "promote_typ": 209, "result_typ": 210, "set_default_dtyp": 211, "set_default_float_dtyp": 212, "set_default_int_dtyp": 213, "type_promote_arrai": 214, "unset_default_dtyp": 215, "unset_default_float_dtyp": 216, "unset_default_int_dtyp": 217, "valid_dtyp": 218, "devcloneditem": 221, "devclonedit": 222, "devclonednest": 223, "devdistitem": 224, "devdistit": 225, "devdistnest": 226, "devmapp": 228, "devmappermultiproc": 229, "multidevitem": 231, "multidevit": 232, "multidevnest": 233, "profil": 234, "as_ivy_dev": 235, "as_native_dev": 236, "clear_mem_on_dev": 237, "default_devic": 238, "dev": 239, "dev_clon": 240, "dev_clone_arrai": 241, "dev_clone_it": 242, "dev_clone_nest": 243, "dev_dist": 244, "dev_dist_arrai": 245, "dev_dist_it": 246, "dev_dist_nest": 247, "dev_unifi": 248, "dev_unify_arrai": 249, "dev_unify_it": 250, "dev_unify_nest": 251, "dev_util": 252, "get_all_ivy_arrays_on_dev": 253, "gpu_is_avail": 254, "num_cpu_cor": 255, "num_gpu": 256, "num_ivy_arrays_on_dev": 257, "percent_used_mem_on_dev": 258, "print_all_ivy_arrays_on_dev": 259, "set_default_devic": 260, "set_split_factor": 261, "split_factor": 262, "split_func_cal": 263, "to_devic": 264, "total_mem_on_dev": 265, "tpu_is_avail": 266, "unset_default_devic": 267, "used_mem_on_dev": 268, "ab": 270, "aco": 271, "acosh": 272, "asin": 274, "asinh": 275, "atan": 276, "atan2": 277, "atanh": 278, "bitwise_and": 279, "bitwise_invert": 280, "bitwise_left_shift": 281, "bitwise_or": 282, "bitwise_right_shift": 283, "bitwise_xor": 284, "ceil": 285, "co": 286, "cosh": 287, "divid": 288, "equal": 289, "erf": 290, "exp": 291, "expm1": 292, "floor": 293, "floor_divid": 294, "greater": 295, "greater_equ": 296, "isfinit": 297, "isinf": 298, "isnan": 299, "less": 300, "less_equ": 301, "log": 302, "log10": 303, "log1p": 304, "log2": 305, "logaddexp": 306, "logical_and": 307, "logical_not": 308, "logical_or": 309, "logical_xor": 310, "maximum": 311, "minimum": 312, "multipli": 313, "neg": 314, "not_equ": 315, "posit": 316, "pow": 317, "remaind": 318, "round": 319, "sign": 320, "sin": 321, "sinh": 322, "sqrt": 323, "squar": 324, "subtract": 325, "trunc": 328, "all_equ": 330, "arg_info": 331, "arg_nam": 332, "array_equ": 333, "arrays_equ": 334, "assert_supports_inplac": 335, "cache_fn": 336, "clip_matrix_norm": 337, "clip_vector_norm": 338, "container_typ": 339, "copy_arrai": 340, "cumprod": 341, "cumsum": 342, "current_backend_str": 343, "default": 344, "einops_rearrang": 345, "einops_reduc": 346, "einops_repeat": 347, "exist": 348, "floormod": 349, "fourier_encod": 350, "gather": 351, "gather_nd": 352, "get_all_arrays_in_memori": 353, "get_min_bas": 354, "get_min_denomin": 355, "get_num_dim": 356, "get_referrers_recurs": 357, "has_nan": 358, "indices_wher": 359, "inplace_arrays_support": 360, "inplace_decr": 361, "inplace_incr": 362, "inplace_upd": 363, "inplace_variables_support": 364, "is_arrai": 365, "is_ivy_arrai": 366, "is_ivy_contain": 367, "is_native_arrai": 368, "match_kwarg": 369, "multiprocess": 370, "num_arrays_in_memori": 371, "one_hot": 372, "print_all_arrays_in_memori": 373, "queue_timeout": 374, "scatter_flat": 375, "scatter_nd": 376, "set_min_bas": 377, "set_min_denomin": 378, "set_queue_timeout": 379, "set_tmp_dir": 380, "shape_to_tupl": 382, "stable_divid": 383, "stable_pow": 384, "supports_inplac": 385, "tmp_dir": 386, "to_list": 387, "to_numpi": 388, "to_scalar": 389, "try_else_non": 390, "unstack": 391, "value_is_nan": 392, "adam_step": 395, "adam_upd": 396, "execute_with_gradi": 397, "gradient_descent_upd": 398, "is_vari": 399, "lamb_upd": 400, "lars_upd": 401, "optimizer_upd": 402, "set_with_grad": 403, "stop_gradi": 404, "unset_with_grad": 405, "variabl": 406, "variable_data": 407, "with_grad": 408, "conv1d": [410, 545], "conv1d_transpos": 411, "conv2d": [412, 547], "conv2d_transpos": 413, "conv3d": [414, 549], "conv3d_transpos": 415, "depthwise_conv2d": 416, "dropout": [417, 552], "lstm_updat": 419, "multi_head_attent": 420, "scaled_dot_product_attent": 421, "choleski": 423, "cross": 424, "det": 425, "diagon": 426, "eigh": 427, "eigvalsh": 428, "inv": 429, "matmul": 430, "matrix_norm": 431, "matrix_pow": 432, "matrix_rank": 433, "matrix_transpos": 434, "outer": 435, "pinv": 436, "qr": 437, "slogdet": 438, "solv": 439, "svd": 440, "svdval": 441, "tensordot": 442, "trace": 443, "vecdot": 444, "vector_norm": 445, "vector_to_skew_symmetric_matrix": 446, "binary_cross_entropi": 448, "cross_entropi": 449, "sparse_cross_entropi": 450, "clip": 452, "concat": 453, "constant_pad": 454, "expand_dim": 455, "flip": 456, "permute_dim": 457, "repeat": 458, "reshap": 459, "split": 461, "squeez": 462, "stack": 463, "swapax": 464, "tile": 465, "zero_pad": 466, "meta": 467, "fomaml_step": 468, "maml_step": 469, "reptile_step": 470, "nest": 471, "all_nested_indic": 472, "copy_nest": 473, "index_nest": 474, "insert_into_nest_at_index": 475, "insert_into_nest_at_indic": 476, "map": 477, "map_nest_at_index": 478, "map_nest_at_indic": 479, "multi_index_nest": 480, "nested_ani": 481, "nested_indices_wher": 482, "nested_map": 483, "nested_multi_map": 484, "prune_nest_at_index": 485, "prune_nest_at_indic": 486, "set_nest_at_index": 487, "set_nest_at_indic": 488, "layer_norm": 490, "multinomi": 492, "randint": 493, "random_norm": 494, "random_uniform": 495, "seed": 496, "shuffl": 497, "argmax": 499, "argmin": 500, "nonzero": 501, "where": 502, "depend": [503, 504, 505, 507], "output": [503, 504, 505, 507], "unique_al": 504, "unique_count": 505, "unique_invers": 506, "unique_valu": 507, "argsort": 509, "einsum": 512, "max": 513, "mean": 514, "min": 515, "prod": 516, "std": 517, "sum": 518, "var": 519, "all": 521, "ani": 522, "content": 523, "overview": 523, "quick": 523, "start": 523, "roadmap": [523, 529], "citat": 523, "inspect": 526, "add_array_spec": 527, "fn_array_spec": 528, "geglu": 531, "to_ivy_modul": 534, "firstlayersiren": 537, "glorotuniform": 538, "Ones": 540, "siren": 541, "conv1dtranspos": 546, "conv2dtranspos": 548, "conv3dtranspos": 550, "depthwiseconv2d": 551, "lstm": 553, "multiheadattent": 555, "layernorm": 559, "adam": 561, "lamb": 562, "lar": 563, "sgd": 565, "sequenti": [566, 567], "verbos": 569, "cprint": 570}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 6, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.viewcode": 1, "sphinx": 56}})