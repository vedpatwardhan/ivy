Search.setIndex({"docnames": ["array/activations", "array/activations/ArrayWithActivations", "array/array_methods", "array/array_methods/abs", "array/array_methods/acos", "array/array_methods/acosh", "array/array_methods/add", "array/array_methods/add_ivy_array_instance_methods", "array/array_methods/all", "array/array_methods/all_equal", "array/array_methods/any", "array/array_methods/argsort", "array/array_methods/asin", "array/array_methods/asinh", "array/array_methods/atan", "array/array_methods/atan2", "array/array_methods/atanh", "array/array_methods/binary_cross_entropy", "array/array_methods/bitwise_and", "array/array_methods/bitwise_invert", "array/array_methods/bitwise_left_shift", "array/array_methods/bitwise_or", "array/array_methods/bitwise_right_shift", "array/array_methods/bitwise_xor", "array/array_methods/can_cast", "array/array_methods/ceil", "array/array_methods/cholesky", "array/array_methods/clip", "array/array_methods/concat", "array/array_methods/constant_pad", "array/array_methods/cos", "array/array_methods/cosh", "array/array_methods/cross", "array/array_methods/cross_entropy", "array/array_methods/det", "array/array_methods/diagonal", "array/array_methods/divide", "array/array_methods/eigh", "array/array_methods/eigvalsh", "array/array_methods/einsum", "array/array_methods/equal", "array/array_methods/erf", "array/array_methods/exp", "array/array_methods/expand_dims", "array/array_methods/expm1", "array/array_methods/flip", "array/array_methods/floor", "array/array_methods/floor_divide", "array/array_methods/gather_nd", "array/array_methods/greater", "array/array_methods/greater_equal", "array/array_methods/inv", "array/array_methods/isfinite", "array/array_methods/isinf", "array/array_methods/isnan", "array/array_methods/layer_norm", "array/array_methods/less", "array/array_methods/less_equal", "array/array_methods/log", "array/array_methods/log10", "array/array_methods/log1p", "array/array_methods/log2", "array/array_methods/logaddexp", "array/array_methods/logical_and", "array/array_methods/logical_not", "array/array_methods/logical_or", "array/array_methods/logical_xor", "array/array_methods/matmul", "array/array_methods/matrix_norm", "array/array_methods/matrix_rank", "array/array_methods/matrix_transpose", "array/array_methods/max", "array/array_methods/mean", "array/array_methods/min", "array/array_methods/multiply", "array/array_methods/negative", "array/array_methods/not_equal", "array/array_methods/outer", "array/array_methods/permute_dims", "array/array_methods/pinv", "array/array_methods/positive", "array/array_methods/pow", "array/array_methods/prod", "array/array_methods/qr", "array/array_methods/remainder", "array/array_methods/repeat", "array/array_methods/reshape", "array/array_methods/roll", "array/array_methods/round", "array/array_methods/sign", "array/array_methods/sin", "array/array_methods/sinh", "array/array_methods/solve", "array/array_methods/sort", "array/array_methods/sparse_cross_entropy", "array/array_methods/sqrt", "array/array_methods/square", "array/array_methods/squeeze", "array/array_methods/stack", "array/array_methods/std", "array/array_methods/subtract", "array/array_methods/sum", "array/array_methods/svd", "array/array_methods/svdvals", "array/array_methods/swapaxes", "array/array_methods/tan", "array/array_methods/tanh", "array/array_methods/tensordot", "array/array_methods/tile", "array/array_methods/trace", "array/array_methods/trunc", "array/array_methods/var", "array/array_methods/vecdot", "array/array_methods/vector_norm", "array/array_methods/vector_to_skew_symmetric_matrix", "array/array_methods/zero_pad", "array/conversions", "array/conversions/args_to_ivy", "array/conversions/args_to_native", "array/conversions/to_ivy", "array/conversions/to_native", "array/creation", "array/creation/ArrayWithCreation", "array/data_type", "array/data_type/ArrayWithDataTypes", "array/device", "array/device/ArrayWithDevice", "array/elementwise", "array/elementwise/ArrayWithElementwise", "array/general", "array/general/ArrayWithGeneral", "array/gradients", "array/gradients/ArrayWithGradients", "array/image", "array/image/ArrayWithImage", "array/layers", "array/layers/ArrayWithLayers", "array/linear_algebra", "array/linear_algebra/ArrayWithLinearAlgebra", "array/losses", "array/losses/ArrayWithLosses", "array/manipulation", "array/manipulation/ArrayWithManipulation", "array/norms", "array/norms/ArrayWithNorms", "array/random", "array/random/ArrayWithRandom", "array/searching", "array/searching/ArrayWithSearching", "array/set", "array/set/ArrayWithSet", "array/sorting", "array/sorting/ArrayWithSorting", "array/statistical", "array/statistical/ArrayWithStatistical", "array/utility", "array/utility/ArrayWithUtility", "array/wrapping", "array/wrapping/add_ivy_array_instance_methods", "backend_handler", "backend_handler/ContextManager:\n    def __init__", "backend_handler/choose_random_backend", "backend_handler/clear_backend_stack", "backend_handler/current_backend", "backend_handler/get_backend", "backend_handler/set_backend", "backend_handler/try_import_ivy_jax", "backend_handler/try_import_ivy_mxnet", "backend_handler/try_import_ivy_numpy", "backend_handler/try_import_ivy_tf", "backend_handler/try_import_ivy_torch", "backend_handler/unset_backend", "background", "background/ml_explosion", "background/standardization", "background/why_unify", "container/activations", "container/activations/ContainerWithActivations", "container/base", "container/base/ContainerBase", "container/container", "container/container/Container", "container/container/MultiDevContainer", "container/container_methods", "container/container_methods/abs", "container/container_methods/acos", "container/container_methods/acosh", "container/container_methods/adam_update", "container/container_methods/add", "container/container_methods/add_ivy_container_instance_methods", "container/container_methods/all", "container/container_methods/all_equal", "container/container_methods/any", "container/container_methods/argsort", "container/container_methods/asin", "container/container_methods/asinh", "container/container_methods/at_dev", "container/container_methods/at_devs", "container/container_methods/atan", "container/container_methods/atan2", "container/container_methods/atanh", "container/container_methods/binary_cross_entropy", "container/container_methods/bitwise_and", "container/container_methods/bitwise_invert", "container/container_methods/bitwise_left_shift", "container/container_methods/bitwise_or", "container/container_methods/bitwise_right_shift", "container/container_methods/bitwise_xor", "container/container_methods/can_cast", "container/container_methods/ceil", "container/container_methods/clip", "container/container_methods/clip_vector_norm", "container/container_methods/concat", "container/container_methods/constant_pad", "container/container_methods/cos", "container/container_methods/cosh", "container/container_methods/cross_entropy", "container/container_methods/divide", "container/container_methods/einsum", "container/container_methods/equal", "container/container_methods/erf", "container/container_methods/exp", "container/container_methods/expand_dims", "container/container_methods/expm1", "container/container_methods/flip", "container/container_methods/floor", "container/container_methods/floor_divide", "container/container_methods/gather_nd", "container/container_methods/gradient_descent_update", "container/container_methods/greater", "container/container_methods/greater_equal", "container/container_methods/isfinite", "container/container_methods/isinf", "container/container_methods/isnan", "container/container_methods/lamb_update", "container/container_methods/lars_update", "container/container_methods/layer_norm", "container/container_methods/less", "container/container_methods/less_equal", "container/container_methods/log", "container/container_methods/log10", "container/container_methods/log1p", "container/container_methods/log2", "container/container_methods/logaddexp", "container/container_methods/logical_and", "container/container_methods/logical_not", "container/container_methods/logical_or", "container/container_methods/logical_xor", "container/container_methods/matmul", "container/container_methods/max", "container/container_methods/mean", "container/container_methods/min", "container/container_methods/multiply", "container/container_methods/negative", "container/container_methods/not_equal", "container/container_methods/optimizer_update", "container/container_methods/permute_dims", "container/container_methods/positive", "container/container_methods/pow", "container/container_methods/prod", "container/container_methods/random_uniform", "container/container_methods/remainder", "container/container_methods/repeat", "container/container_methods/reshape", "container/container_methods/roll", "container/container_methods/round", "container/container_methods/sign", "container/container_methods/sin", "container/container_methods/sinh", "container/container_methods/sort", "container/container_methods/sparse_cross_entropy", "container/container_methods/sqrt", "container/container_methods/square", "container/container_methods/squeeze", "container/container_methods/stack", "container/container_methods/static_adam_update", "container/container_methods/static_add", "container/container_methods/static_all_equal", "container/container_methods/static_argsort", "container/container_methods/static_binary_cross_entropy", "container/container_methods/static_can_cast", "container/container_methods/static_clip", "container/container_methods/static_cross_entropy", "container/container_methods/static_divide", "container/container_methods/static_gather_nd", "container/container_methods/static_gradient_descent_update", "container/container_methods/static_lamb_update", "container/container_methods/static_lars_update", "container/container_methods/static_multiply", "container/container_methods/static_optimizer_update", "container/container_methods/static_randint", "container/container_methods/static_random_uniform", "container/container_methods/static_roll", "container/container_methods/static_sort", "container/container_methods/static_sparse_cross_entropy", "container/container_methods/static_subtract", "container/container_methods/static_tan", "container/container_methods/std", "container/container_methods/subtract", "container/container_methods/sum", "container/container_methods/swapaxes", "container/container_methods/tan", "container/container_methods/tanh", "container/container_methods/tile", "container/container_methods/trunc", "container/container_methods/var", "container/container_methods/zero_pad", "container/creation", "container/creation/ContainerWithCreation", "container/data_type", "container/data_type/ContainerWithDataTypes", "container/device", "container/device/ContainerWithDevice", "container/elementwise", "container/elementwise/ContainerWithElementwise", "container/general", "container/general/ContainerWithGeneral", "container/gradients", "container/gradients/ContainerWithGradients", "container/image", "container/image/ContainerWithImage", "container/layers", "container/layers/ContainerWithLayers", "container/linear_algebra", "container/linear_algebra/ContainerWithLinearAlgebra", "container/losses", "container/losses/ContainerWithLosses", "container/manipulation", "container/manipulation/ContainerWithManipulation", "container/norms", "container/norms/ContainerWithNorms", "container/random", "container/random/ContainerWithRandom", "container/searching", "container/searching/ContainerWithSearching", "container/set", "container/set/ContainerWithSet", "container/sorting", "container/sorting/ContainerWithSorting", "container/statistical", "container/statistical/ContainerWithStatistical", "container/utility", "container/utility/ContainerWithUtility", "container/wrapping", "container/wrapping/add_ivy_container_instance_methods", "contributing", "contributing/0_setting_up", "contributing/1_the_basics", "contributing/4_open_tasks", "contributing/building_the_docs", "deep_dive", "deep_dive/0_navigating_the_code", "deep_dive/10_docstrings", "deep_dive/11_docstring_examples", "deep_dive/12_array_api_tests", "deep_dive/13_ivy_tests", "deep_dive/1_function_types", "deep_dive/2_backend_setting", "deep_dive/3_function_wrapping", "deep_dive/4_arrays", "deep_dive/5_containers", "deep_dive/6_data_types", "deep_dive/7_devices", "deep_dive/8_inplace_updates", "deep_dive/9_function_arguments", "design", "design/building_blocks", "design/ivy_as_a_framework", "design/ivy_as_a_framework/ivy_array", "design/ivy_as_a_framework/ivy_container", "design/ivy_as_a_framework/ivy_stateful_api", "design/ivy_as_a_transpiler", "docs/ivy", "docs/ivy_builder", "docs/ivy_ecosystem", "docs/ivy_gym", "docs/ivy_mech", "docs/ivy_memory", "docs/ivy_models", "docs/ivy_robot", "docs/ivy_vision", "extensions", "extensions/applied_libraries", "faq", "func_wrapper", "func_wrapper/handle_nestable", "func_wrapper/handle_out_argument", "func_wrapper/infer_device", "func_wrapper/infer_dtype", "func_wrapper/inputs_to_ivy_arrays", "func_wrapper/inputs_to_native_arrays", "func_wrapper/outputs_to_ivy_arrays", "func_wrapper/to_native_arrays_and_back", "functional/ivy", "functional/ivy/activations", "functional/ivy/activations/gelu", "functional/ivy/activations/leaky_relu", "functional/ivy/activations/relu", "functional/ivy/activations/sigmoid", "functional/ivy/activations/softmax", "functional/ivy/activations/softplus", "functional/ivy/activations/tanh", "functional/ivy/compilation", "functional/ivy/compilation/compile", "functional/ivy/constants", "functional/ivy/creation", "functional/ivy/creation/arange", "functional/ivy/creation/asarray", "functional/ivy/creation/empty", "functional/ivy/creation/empty_like", "functional/ivy/creation/eye", "functional/ivy/creation/from_dlpack", "functional/ivy/creation/full", "functional/ivy/creation/full_like", "functional/ivy/creation/linspace", "functional/ivy/creation/logspace", "functional/ivy/creation/meshgrid", "functional/ivy/creation/native_array", "functional/ivy/creation/ones", "functional/ivy/creation/ones_like", "functional/ivy/creation/tril", "functional/ivy/creation/triu", "functional/ivy/creation/zeros", "functional/ivy/creation/zeros_like", "functional/ivy/data_type", "functional/ivy/data_type/DefaultDtype:\n    \"\"\"\"\"\"\n\n    # noinspection PyShadowingNames\n    def __init__", "functional/ivy/data_type/DefaultFloatDtype:\n    \"\"\"\"\"\"\n\n    # noinspection PyShadowingNames\n    def __init__", "functional/ivy/data_type/DefaultIntDtype:\n    \"\"\"\"\"\"\n\n    # noinspection PyShadowingNames\n    def __init__", "functional/ivy/data_type/as_ivy_dtype", "functional/ivy/data_type/as_native_dtype", "functional/ivy/data_type/astype", "functional/ivy/data_type/broadcast_arrays", "functional/ivy/data_type/broadcast_to", "functional/ivy/data_type/can_cast", "functional/ivy/data_type/can_cast/can_cast_array", "functional/ivy/data_type/can_cast/can_cast_container", "functional/ivy/data_type/can_cast/can_cast_functional", "functional/ivy/data_type/can_cast/static_can_cast_container", "functional/ivy/data_type/closest_valid_dtype", "functional/ivy/data_type/default_dtype", "functional/ivy/data_type/default_float_dtype", "functional/ivy/data_type/default_int_dtype", "functional/ivy/data_type/dtype", "functional/ivy/data_type/dtype_bits", "functional/ivy/data_type/finfo", "functional/ivy/data_type/function_supported_dtypes", "functional/ivy/data_type/function_unsupported_dtypes", "functional/ivy/data_type/iinfo", "functional/ivy/data_type/invalid_dtype", "functional/ivy/data_type/is_float_dtype", "functional/ivy/data_type/is_int_dtype", "functional/ivy/data_type/promote_types", "functional/ivy/data_type/result_type", "functional/ivy/data_type/set_default_dtype", "functional/ivy/data_type/set_default_float_dtype", "functional/ivy/data_type/set_default_int_dtype", "functional/ivy/data_type/type_promote_arrays", "functional/ivy/data_type/unset_default_dtype", "functional/ivy/data_type/unset_default_float_dtype", "functional/ivy/data_type/unset_default_int_dtype", "functional/ivy/data_type/valid_dtype", "functional/ivy/device", "functional/ivy/device/DefaultDevice:\n    \"\"\"\"\"\"\n\n    # noinspection PyShadowingNames\n    def __init__", "functional/ivy/device/DevClonedItem", "functional/ivy/device/DevClonedIter", "functional/ivy/device/DevClonedNest", "functional/ivy/device/DevDistItem", "functional/ivy/device/DevDistIter", "functional/ivy/device/DevDistNest", "functional/ivy/device/DevManager:\n    \"\"\"\"\"\"\n\n    def __init__", "functional/ivy/device/DevMapper", "functional/ivy/device/DevMapperMultiProc", "functional/ivy/device/MultiDev:\n    def __init__", "functional/ivy/device/MultiDevItem", "functional/ivy/device/MultiDevIter", "functional/ivy/device/MultiDevNest", "functional/ivy/device/Profiler", "functional/ivy/device/as_ivy_dev", "functional/ivy/device/as_native_dev", "functional/ivy/device/clear_mem_on_dev", "functional/ivy/device/default_device", "functional/ivy/device/dev", "functional/ivy/device/dev_clone", "functional/ivy/device/dev_clone_array", "functional/ivy/device/dev_clone_iter", "functional/ivy/device/dev_clone_nest", "functional/ivy/device/dev_dist", "functional/ivy/device/dev_dist_array", "functional/ivy/device/dev_dist_iter", "functional/ivy/device/dev_dist_nest", "functional/ivy/device/dev_unify", "functional/ivy/device/dev_unify_array", "functional/ivy/device/dev_unify_iter", "functional/ivy/device/dev_unify_nest", "functional/ivy/device/dev_util", "functional/ivy/device/get_all_ivy_arrays_on_dev", "functional/ivy/device/gpu_is_available", "functional/ivy/device/num_cpu_cores", "functional/ivy/device/num_gpus", "functional/ivy/device/num_ivy_arrays_on_dev", "functional/ivy/device/percent_used_mem_on_dev", "functional/ivy/device/print_all_ivy_arrays_on_dev", "functional/ivy/device/set_default_device", "functional/ivy/device/set_split_factor", "functional/ivy/device/split_factor", "functional/ivy/device/split_func_call", "functional/ivy/device/to_device", "functional/ivy/device/total_mem_on_dev", "functional/ivy/device/tpu_is_available", "functional/ivy/device/unset_default_device", "functional/ivy/device/used_mem_on_dev", "functional/ivy/elementwise", "functional/ivy/elementwise/abs", "functional/ivy/elementwise/abs/abs_array", "functional/ivy/elementwise/abs/abs_container", "functional/ivy/elementwise/abs/abs_functional", "functional/ivy/elementwise/acos", "functional/ivy/elementwise/acos/acos_array", "functional/ivy/elementwise/acos/acos_container", "functional/ivy/elementwise/acos/acos_functional", "functional/ivy/elementwise/acosh", "functional/ivy/elementwise/acosh/acosh_array", "functional/ivy/elementwise/acosh/acosh_container", "functional/ivy/elementwise/acosh/acosh_functional", "functional/ivy/elementwise/add", "functional/ivy/elementwise/add/add_array", "functional/ivy/elementwise/add/add_container", "functional/ivy/elementwise/add/add_functional", "functional/ivy/elementwise/add/static_add_container", "functional/ivy/elementwise/asin", "functional/ivy/elementwise/asin/asin_array", "functional/ivy/elementwise/asin/asin_container", "functional/ivy/elementwise/asin/asin_functional", "functional/ivy/elementwise/asinh", "functional/ivy/elementwise/asinh/asinh_array", "functional/ivy/elementwise/asinh/asinh_container", "functional/ivy/elementwise/asinh/asinh_functional", "functional/ivy/elementwise/atan", "functional/ivy/elementwise/atan/atan_array", "functional/ivy/elementwise/atan/atan_container", "functional/ivy/elementwise/atan/atan_functional", "functional/ivy/elementwise/atan2", "functional/ivy/elementwise/atan2/atan2_array", "functional/ivy/elementwise/atan2/atan2_container", "functional/ivy/elementwise/atan2/atan2_functional", "functional/ivy/elementwise/atanh", "functional/ivy/elementwise/atanh/atanh_array", "functional/ivy/elementwise/atanh/atanh_container", "functional/ivy/elementwise/atanh/atanh_functional", "functional/ivy/elementwise/bitwise_and", "functional/ivy/elementwise/bitwise_and/bitwise_and_array", "functional/ivy/elementwise/bitwise_and/bitwise_and_container", "functional/ivy/elementwise/bitwise_and/bitwise_and_functional", "functional/ivy/elementwise/bitwise_invert", "functional/ivy/elementwise/bitwise_invert/bitwise_invert_array", "functional/ivy/elementwise/bitwise_invert/bitwise_invert_container", "functional/ivy/elementwise/bitwise_invert/bitwise_invert_functional", "functional/ivy/elementwise/bitwise_left_shift", "functional/ivy/elementwise/bitwise_left_shift/bitwise_left_shift_array", "functional/ivy/elementwise/bitwise_left_shift/bitwise_left_shift_container", "functional/ivy/elementwise/bitwise_left_shift/bitwise_left_shift_functional", "functional/ivy/elementwise/bitwise_or", "functional/ivy/elementwise/bitwise_or/bitwise_or_array", "functional/ivy/elementwise/bitwise_or/bitwise_or_container", "functional/ivy/elementwise/bitwise_or/bitwise_or_functional", "functional/ivy/elementwise/bitwise_right_shift", "functional/ivy/elementwise/bitwise_right_shift/bitwise_right_shift_array", "functional/ivy/elementwise/bitwise_right_shift/bitwise_right_shift_container", "functional/ivy/elementwise/bitwise_right_shift/bitwise_right_shift_functional", "functional/ivy/elementwise/bitwise_xor", "functional/ivy/elementwise/bitwise_xor/bitwise_xor_array", "functional/ivy/elementwise/bitwise_xor/bitwise_xor_container", "functional/ivy/elementwise/bitwise_xor/bitwise_xor_functional", "functional/ivy/elementwise/ceil", "functional/ivy/elementwise/ceil/ceil_array", "functional/ivy/elementwise/ceil/ceil_container", "functional/ivy/elementwise/ceil/ceil_functional", "functional/ivy/elementwise/cos", "functional/ivy/elementwise/cos/cos_array", "functional/ivy/elementwise/cos/cos_container", "functional/ivy/elementwise/cos/cos_functional", "functional/ivy/elementwise/cosh", "functional/ivy/elementwise/cosh/cosh_array", "functional/ivy/elementwise/cosh/cosh_container", "functional/ivy/elementwise/cosh/cosh_functional", "functional/ivy/elementwise/divide", "functional/ivy/elementwise/divide/divide_array", "functional/ivy/elementwise/divide/divide_container", "functional/ivy/elementwise/divide/divide_functional", "functional/ivy/elementwise/divide/static_divide_container", "functional/ivy/elementwise/equal", "functional/ivy/elementwise/equal/equal_array", "functional/ivy/elementwise/equal/equal_container", "functional/ivy/elementwise/equal/equal_functional", "functional/ivy/elementwise/erf", "functional/ivy/elementwise/erf/erf_array", "functional/ivy/elementwise/erf/erf_container", "functional/ivy/elementwise/erf/erf_functional", "functional/ivy/elementwise/exp", "functional/ivy/elementwise/exp/exp_array", "functional/ivy/elementwise/exp/exp_container", "functional/ivy/elementwise/exp/exp_functional", "functional/ivy/elementwise/expm1", "functional/ivy/elementwise/expm1/expm1_array", "functional/ivy/elementwise/expm1/expm1_container", "functional/ivy/elementwise/expm1/expm1_functional", "functional/ivy/elementwise/floor", "functional/ivy/elementwise/floor/floor_array", "functional/ivy/elementwise/floor/floor_container", "functional/ivy/elementwise/floor/floor_functional", "functional/ivy/elementwise/floor_divide", "functional/ivy/elementwise/floor_divide/floor_divide_array", "functional/ivy/elementwise/floor_divide/floor_divide_container", "functional/ivy/elementwise/floor_divide/floor_divide_functional", "functional/ivy/elementwise/greater", "functional/ivy/elementwise/greater/greater_array", "functional/ivy/elementwise/greater/greater_container", "functional/ivy/elementwise/greater/greater_functional", "functional/ivy/elementwise/greater_equal", "functional/ivy/elementwise/greater_equal/greater_equal_array", "functional/ivy/elementwise/greater_equal/greater_equal_container", "functional/ivy/elementwise/greater_equal/greater_equal_functional", "functional/ivy/elementwise/isfinite", "functional/ivy/elementwise/isfinite/isfinite_array", "functional/ivy/elementwise/isfinite/isfinite_container", "functional/ivy/elementwise/isfinite/isfinite_functional", "functional/ivy/elementwise/isinf", "functional/ivy/elementwise/isinf/isinf_array", "functional/ivy/elementwise/isinf/isinf_container", "functional/ivy/elementwise/isinf/isinf_functional", "functional/ivy/elementwise/isnan", "functional/ivy/elementwise/isnan/isnan_array", "functional/ivy/elementwise/isnan/isnan_container", "functional/ivy/elementwise/isnan/isnan_functional", "functional/ivy/elementwise/less", "functional/ivy/elementwise/less/less_array", "functional/ivy/elementwise/less/less_container", "functional/ivy/elementwise/less/less_functional", "functional/ivy/elementwise/less_equal", "functional/ivy/elementwise/less_equal/less_equal_array", "functional/ivy/elementwise/less_equal/less_equal_container", "functional/ivy/elementwise/less_equal/less_equal_functional", "functional/ivy/elementwise/log", "functional/ivy/elementwise/log/log_array", "functional/ivy/elementwise/log/log_container", "functional/ivy/elementwise/log/log_functional", "functional/ivy/elementwise/log10", "functional/ivy/elementwise/log10/log10_array", "functional/ivy/elementwise/log10/log10_container", "functional/ivy/elementwise/log10/log10_functional", "functional/ivy/elementwise/log1p", "functional/ivy/elementwise/log1p/log1p_array", "functional/ivy/elementwise/log1p/log1p_container", "functional/ivy/elementwise/log1p/log1p_functional", "functional/ivy/elementwise/log2", "functional/ivy/elementwise/log2/log2_array", "functional/ivy/elementwise/log2/log2_container", "functional/ivy/elementwise/log2/log2_functional", "functional/ivy/elementwise/logaddexp", "functional/ivy/elementwise/logaddexp/logaddexp_array", "functional/ivy/elementwise/logaddexp/logaddexp_container", "functional/ivy/elementwise/logaddexp/logaddexp_functional", "functional/ivy/elementwise/logical_and", "functional/ivy/elementwise/logical_and/logical_and_array", "functional/ivy/elementwise/logical_and/logical_and_container", "functional/ivy/elementwise/logical_and/logical_and_functional", "functional/ivy/elementwise/logical_not", "functional/ivy/elementwise/logical_not/logical_not_array", "functional/ivy/elementwise/logical_not/logical_not_container", "functional/ivy/elementwise/logical_not/logical_not_functional", "functional/ivy/elementwise/logical_or", "functional/ivy/elementwise/logical_or/logical_or_array", "functional/ivy/elementwise/logical_or/logical_or_container", "functional/ivy/elementwise/logical_or/logical_or_functional", "functional/ivy/elementwise/logical_xor", "functional/ivy/elementwise/logical_xor/logical_xor_array", "functional/ivy/elementwise/logical_xor/logical_xor_container", "functional/ivy/elementwise/logical_xor/logical_xor_functional", "functional/ivy/elementwise/maximum", "functional/ivy/elementwise/minimum", "functional/ivy/elementwise/multiply", "functional/ivy/elementwise/multiply/multiply_array", "functional/ivy/elementwise/multiply/multiply_container", "functional/ivy/elementwise/multiply/multiply_functional", "functional/ivy/elementwise/multiply/static_multiply_container", "functional/ivy/elementwise/negative", "functional/ivy/elementwise/negative/negative_array", "functional/ivy/elementwise/negative/negative_container", "functional/ivy/elementwise/negative/negative_functional", "functional/ivy/elementwise/not_equal", "functional/ivy/elementwise/not_equal/not_equal_array", "functional/ivy/elementwise/not_equal/not_equal_container", "functional/ivy/elementwise/not_equal/not_equal_functional", "functional/ivy/elementwise/positive", "functional/ivy/elementwise/positive/positive_array", "functional/ivy/elementwise/positive/positive_container", "functional/ivy/elementwise/positive/positive_functional", "functional/ivy/elementwise/pow", "functional/ivy/elementwise/pow/pow_array", "functional/ivy/elementwise/pow/pow_container", "functional/ivy/elementwise/pow/pow_functional", "functional/ivy/elementwise/remainder", "functional/ivy/elementwise/remainder/remainder_array", "functional/ivy/elementwise/remainder/remainder_container", "functional/ivy/elementwise/remainder/remainder_functional", "functional/ivy/elementwise/round", "functional/ivy/elementwise/round/round_array", "functional/ivy/elementwise/round/round_container", "functional/ivy/elementwise/round/round_functional", "functional/ivy/elementwise/sign", "functional/ivy/elementwise/sign/sign_array", "functional/ivy/elementwise/sign/sign_container", "functional/ivy/elementwise/sign/sign_functional", "functional/ivy/elementwise/sin", "functional/ivy/elementwise/sin/sin_array", "functional/ivy/elementwise/sin/sin_container", "functional/ivy/elementwise/sin/sin_functional", "functional/ivy/elementwise/sinh", "functional/ivy/elementwise/sinh/sinh_array", "functional/ivy/elementwise/sinh/sinh_container", "functional/ivy/elementwise/sinh/sinh_functional", "functional/ivy/elementwise/sqrt", "functional/ivy/elementwise/sqrt/sqrt_array", "functional/ivy/elementwise/sqrt/sqrt_container", "functional/ivy/elementwise/sqrt/sqrt_functional", "functional/ivy/elementwise/square", "functional/ivy/elementwise/square/square_array", "functional/ivy/elementwise/square/square_container", "functional/ivy/elementwise/square/square_functional", "functional/ivy/elementwise/subtract", "functional/ivy/elementwise/subtract/static_subtract_container", "functional/ivy/elementwise/subtract/subtract_array", "functional/ivy/elementwise/subtract/subtract_container", "functional/ivy/elementwise/subtract/subtract_functional", "functional/ivy/elementwise/tan", "functional/ivy/elementwise/tan/static_tan_container", "functional/ivy/elementwise/tan/tan_array", "functional/ivy/elementwise/tan/tan_container", "functional/ivy/elementwise/tan/tan_functional", "functional/ivy/elementwise/tanh", "functional/ivy/elementwise/tanh/tanh_array", "functional/ivy/elementwise/tanh/tanh_container", "functional/ivy/elementwise/tanh/tanh_functional", "functional/ivy/elementwise/trunc", "functional/ivy/elementwise/trunc/trunc_array", "functional/ivy/elementwise/trunc/trunc_container", "functional/ivy/elementwise/trunc/trunc_functional", "functional/ivy/general", "functional/ivy/general/all_equal", "functional/ivy/general/all_equal/all_equal_array", "functional/ivy/general/all_equal/all_equal_container", "functional/ivy/general/all_equal/all_equal_functional", "functional/ivy/general/all_equal/static_all_equal_container", "functional/ivy/general/arg_info", "functional/ivy/general/arg_names", "functional/ivy/general/array_equal", "functional/ivy/general/arrays_equal", "functional/ivy/general/assert_supports_inplace", "functional/ivy/general/cache_fn", "functional/ivy/general/clip_matrix_norm", "functional/ivy/general/clip_vector_norm", "functional/ivy/general/clip_vector_norm/clip_vector_norm_container", "functional/ivy/general/clip_vector_norm/clip_vector_norm_functional", "functional/ivy/general/container_types", "functional/ivy/general/copy_array", "functional/ivy/general/cumprod", "functional/ivy/general/cumsum", "functional/ivy/general/current_backend_str", "functional/ivy/general/default", "functional/ivy/general/einops_rearrange", "functional/ivy/general/einops_reduce", "functional/ivy/general/einops_repeat", "functional/ivy/general/exists", "functional/ivy/general/floormod", "functional/ivy/general/fourier_encode", "functional/ivy/general/gather", "functional/ivy/general/gather_nd", "functional/ivy/general/gather_nd/gather_nd_array", "functional/ivy/general/gather_nd/gather_nd_container", "functional/ivy/general/gather_nd/gather_nd_functional", "functional/ivy/general/gather_nd/static_gather_nd_container", "functional/ivy/general/get_all_arrays_in_memory", "functional/ivy/general/get_min_base", "functional/ivy/general/get_min_denominator", "functional/ivy/general/get_num_dims", "functional/ivy/general/get_referrers_recursive", "functional/ivy/general/has_nans", "functional/ivy/general/indices_where", "functional/ivy/general/inplace_arrays_supported", "functional/ivy/general/inplace_decrement", "functional/ivy/general/inplace_increment", "functional/ivy/general/inplace_update", "functional/ivy/general/inplace_variables_supported", "functional/ivy/general/is_array", "functional/ivy/general/is_ivy_array", "functional/ivy/general/is_ivy_container", "functional/ivy/general/is_native_array", "functional/ivy/general/match_kwargs", "functional/ivy/general/multiprocessing", "functional/ivy/general/num_arrays_in_memory", "functional/ivy/general/one_hot", "functional/ivy/general/print_all_arrays_in_memory", "functional/ivy/general/queue_timeout", "functional/ivy/general/scatter_flat", "functional/ivy/general/scatter_nd", "functional/ivy/general/set_min_base", "functional/ivy/general/set_min_denominator", "functional/ivy/general/set_queue_timeout", "functional/ivy/general/set_tmp_dir", "functional/ivy/general/shape", "functional/ivy/general/shape_to_tuple", "functional/ivy/general/stable_divide", "functional/ivy/general/stable_pow", "functional/ivy/general/supports_inplace", "functional/ivy/general/tmp_dir", "functional/ivy/general/to_list", "functional/ivy/general/to_numpy", "functional/ivy/general/to_scalar", "functional/ivy/general/try_else_none", "functional/ivy/general/unstack", "functional/ivy/general/value_is_nan", "functional/ivy/gradients", "functional/ivy/gradients/GradientTracking:\n    \"\"\"\"\"\"\n\n    # noinspection PyShadowingNames\n    def __init__", "functional/ivy/gradients/adam_step", "functional/ivy/gradients/adam_update", "functional/ivy/gradients/adam_update/adam_update_container", "functional/ivy/gradients/adam_update/adam_update_functional", "functional/ivy/gradients/adam_update/static_adam_update_container", "functional/ivy/gradients/execute_with_gradients", "functional/ivy/gradients/gradient_descent_update", "functional/ivy/gradients/gradient_descent_update/gradient_descent_update_container", "functional/ivy/gradients/gradient_descent_update/gradient_descent_update_functional", "functional/ivy/gradients/gradient_descent_update/static_gradient_descent_update_container", "functional/ivy/gradients/is_variable", "functional/ivy/gradients/lamb_update", "functional/ivy/gradients/lamb_update/lamb_update_container", "functional/ivy/gradients/lamb_update/lamb_update_functional", "functional/ivy/gradients/lamb_update/static_lamb_update_container", "functional/ivy/gradients/lars_update", "functional/ivy/gradients/lars_update/lars_update_container", "functional/ivy/gradients/lars_update/lars_update_functional", "functional/ivy/gradients/lars_update/static_lars_update_container", "functional/ivy/gradients/optimizer_update", "functional/ivy/gradients/optimizer_update/optimizer_update_container", "functional/ivy/gradients/optimizer_update/optimizer_update_functional", "functional/ivy/gradients/optimizer_update/static_optimizer_update_container", "functional/ivy/gradients/set_with_grads", "functional/ivy/gradients/stop_gradient", "functional/ivy/gradients/unset_with_grads", "functional/ivy/gradients/variable", "functional/ivy/gradients/variable_data", "functional/ivy/gradients/with_grads", "functional/ivy/layers", "functional/ivy/layers/conv1d", "functional/ivy/layers/conv1d_transpose", "functional/ivy/layers/conv2d", "functional/ivy/layers/conv2d_transpose", "functional/ivy/layers/conv3d", "functional/ivy/layers/conv3d_transpose", "functional/ivy/layers/depthwise_conv2d", "functional/ivy/layers/dropout", "functional/ivy/layers/linear", "functional/ivy/layers/lstm_update", "functional/ivy/layers/multi_head_attention", "functional/ivy/layers/scaled_dot_product_attention", "functional/ivy/linear_algebra", "functional/ivy/linear_algebra/cholesky", "functional/ivy/linear_algebra/cholesky/cholesky_array", "functional/ivy/linear_algebra/cholesky/cholesky_functional", "functional/ivy/linear_algebra/cross", "functional/ivy/linear_algebra/cross/cross_array", "functional/ivy/linear_algebra/cross/cross_functional", "functional/ivy/linear_algebra/det", "functional/ivy/linear_algebra/det/det_array", "functional/ivy/linear_algebra/det/det_functional", "functional/ivy/linear_algebra/diagonal", "functional/ivy/linear_algebra/diagonal/diagonal_array", "functional/ivy/linear_algebra/diagonal/diagonal_functional", "functional/ivy/linear_algebra/eigh", "functional/ivy/linear_algebra/eigh/eigh_array", "functional/ivy/linear_algebra/eigh/eigh_functional", "functional/ivy/linear_algebra/eigvalsh", "functional/ivy/linear_algebra/eigvalsh/eigvalsh_array", "functional/ivy/linear_algebra/eigvalsh/eigvalsh_functional", "functional/ivy/linear_algebra/inv", "functional/ivy/linear_algebra/inv/inv_array", "functional/ivy/linear_algebra/inv/inv_functional", "functional/ivy/linear_algebra/matmul", "functional/ivy/linear_algebra/matmul/matmul_array", "functional/ivy/linear_algebra/matmul/matmul_container", "functional/ivy/linear_algebra/matmul/matmul_functional", "functional/ivy/linear_algebra/matrix_norm", "functional/ivy/linear_algebra/matrix_norm/matrix_norm_array", "functional/ivy/linear_algebra/matrix_norm/matrix_norm_functional", "functional/ivy/linear_algebra/matrix_power", "functional/ivy/linear_algebra/matrix_rank", "functional/ivy/linear_algebra/matrix_rank/matrix_rank_array", "functional/ivy/linear_algebra/matrix_rank/matrix_rank_functional", "functional/ivy/linear_algebra/matrix_transpose", "functional/ivy/linear_algebra/matrix_transpose/matrix_transpose_array", "functional/ivy/linear_algebra/matrix_transpose/matrix_transpose_functional", "functional/ivy/linear_algebra/outer", "functional/ivy/linear_algebra/outer/outer_array", "functional/ivy/linear_algebra/outer/outer_functional", "functional/ivy/linear_algebra/pinv", "functional/ivy/linear_algebra/pinv/pinv_array", "functional/ivy/linear_algebra/pinv/pinv_functional", "functional/ivy/linear_algebra/qr", "functional/ivy/linear_algebra/qr/qr_array", "functional/ivy/linear_algebra/qr/qr_functional", "functional/ivy/linear_algebra/slogdet", "functional/ivy/linear_algebra/solve", "functional/ivy/linear_algebra/solve/solve_array", "functional/ivy/linear_algebra/solve/solve_functional", "functional/ivy/linear_algebra/svd", "functional/ivy/linear_algebra/svd/svd_array", "functional/ivy/linear_algebra/svd/svd_functional", "functional/ivy/linear_algebra/svdvals", "functional/ivy/linear_algebra/svdvals/svdvals_array", "functional/ivy/linear_algebra/svdvals/svdvals_functional", "functional/ivy/linear_algebra/tensordot", "functional/ivy/linear_algebra/tensordot/tensordot_array", "functional/ivy/linear_algebra/tensordot/tensordot_functional", "functional/ivy/linear_algebra/trace", "functional/ivy/linear_algebra/trace/trace_array", "functional/ivy/linear_algebra/trace/trace_functional", "functional/ivy/linear_algebra/vecdot", "functional/ivy/linear_algebra/vecdot/vecdot_array", "functional/ivy/linear_algebra/vecdot/vecdot_functional", "functional/ivy/linear_algebra/vector_norm", "functional/ivy/linear_algebra/vector_norm/vector_norm_array", "functional/ivy/linear_algebra/vector_norm/vector_norm_functional", "functional/ivy/linear_algebra/vector_to_skew_symmetric_matrix", "functional/ivy/linear_algebra/vector_to_skew_symmetric_matrix/vector_to_skew_symmetric_matrix_array", "functional/ivy/linear_algebra/vector_to_skew_symmetric_matrix/vector_to_skew_symmetric_matrix_functional", "functional/ivy/losses", "functional/ivy/losses/binary_cross_entropy", "functional/ivy/losses/binary_cross_entropy/binary_cross_entropy_array", "functional/ivy/losses/binary_cross_entropy/binary_cross_entropy_container", "functional/ivy/losses/binary_cross_entropy/binary_cross_entropy_functional", "functional/ivy/losses/binary_cross_entropy/static_binary_cross_entropy_container", "functional/ivy/losses/cross_entropy", "functional/ivy/losses/cross_entropy/cross_entropy_array", "functional/ivy/losses/cross_entropy/cross_entropy_container", "functional/ivy/losses/cross_entropy/cross_entropy_functional", "functional/ivy/losses/cross_entropy/static_cross_entropy_container", "functional/ivy/losses/sparse_cross_entropy", "functional/ivy/losses/sparse_cross_entropy/sparse_cross_entropy_array", "functional/ivy/losses/sparse_cross_entropy/sparse_cross_entropy_container", "functional/ivy/losses/sparse_cross_entropy/sparse_cross_entropy_functional", "functional/ivy/losses/sparse_cross_entropy/static_sparse_cross_entropy_container", "functional/ivy/manipulation", "functional/ivy/manipulation/clip", "functional/ivy/manipulation/clip/clip_array", "functional/ivy/manipulation/clip/clip_container", "functional/ivy/manipulation/clip/clip_functional", "functional/ivy/manipulation/clip/static_clip_container", "functional/ivy/manipulation/concat", "functional/ivy/manipulation/concat/concat_array", "functional/ivy/manipulation/concat/concat_container", "functional/ivy/manipulation/concat/concat_functional", "functional/ivy/manipulation/constant_pad", "functional/ivy/manipulation/constant_pad/constant_pad_array", "functional/ivy/manipulation/constant_pad/constant_pad_container", "functional/ivy/manipulation/constant_pad/constant_pad_functional", "functional/ivy/manipulation/expand_dims", "functional/ivy/manipulation/expand_dims/expand_dims_array", "functional/ivy/manipulation/expand_dims/expand_dims_container", "functional/ivy/manipulation/expand_dims/expand_dims_functional", "functional/ivy/manipulation/flip", "functional/ivy/manipulation/flip/flip_array", "functional/ivy/manipulation/flip/flip_container", "functional/ivy/manipulation/flip/flip_functional", "functional/ivy/manipulation/permute_dims", "functional/ivy/manipulation/permute_dims/permute_dims_array", "functional/ivy/manipulation/permute_dims/permute_dims_container", "functional/ivy/manipulation/permute_dims/permute_dims_functional", "functional/ivy/manipulation/repeat", "functional/ivy/manipulation/repeat/repeat_array", "functional/ivy/manipulation/repeat/repeat_container", "functional/ivy/manipulation/repeat/repeat_functional", "functional/ivy/manipulation/reshape", "functional/ivy/manipulation/reshape/reshape_array", "functional/ivy/manipulation/reshape/reshape_container", "functional/ivy/manipulation/reshape/reshape_functional", "functional/ivy/manipulation/roll", "functional/ivy/manipulation/roll/roll_array", "functional/ivy/manipulation/roll/roll_container", "functional/ivy/manipulation/roll/roll_functional", "functional/ivy/manipulation/roll/static_roll_container", "functional/ivy/manipulation/split", "functional/ivy/manipulation/squeeze", "functional/ivy/manipulation/squeeze/squeeze_array", "functional/ivy/manipulation/squeeze/squeeze_container", "functional/ivy/manipulation/squeeze/squeeze_functional", "functional/ivy/manipulation/stack", "functional/ivy/manipulation/stack/stack_array", "functional/ivy/manipulation/stack/stack_container", "functional/ivy/manipulation/stack/stack_functional", "functional/ivy/manipulation/swapaxes", "functional/ivy/manipulation/swapaxes/swapaxes_array", "functional/ivy/manipulation/swapaxes/swapaxes_container", "functional/ivy/manipulation/swapaxes/swapaxes_functional", "functional/ivy/manipulation/tile", "functional/ivy/manipulation/tile/tile_array", "functional/ivy/manipulation/tile/tile_container", "functional/ivy/manipulation/tile/tile_functional", "functional/ivy/manipulation/zero_pad", "functional/ivy/manipulation/zero_pad/zero_pad_array", "functional/ivy/manipulation/zero_pad/zero_pad_container", "functional/ivy/manipulation/zero_pad/zero_pad_functional", "functional/ivy/meta", "functional/ivy/meta/fomaml_step", "functional/ivy/meta/maml_step", "functional/ivy/meta/reptile_step", "functional/ivy/nest", "functional/ivy/nest/all_nested_indices", "functional/ivy/nest/copy_nest", "functional/ivy/nest/index_nest", "functional/ivy/nest/insert_into_nest_at_index", "functional/ivy/nest/insert_into_nest_at_indices", "functional/ivy/nest/map", "functional/ivy/nest/map_nest_at_index", "functional/ivy/nest/map_nest_at_indices", "functional/ivy/nest/multi_index_nest", "functional/ivy/nest/nested_any", "functional/ivy/nest/nested_indices_where", "functional/ivy/nest/nested_map", "functional/ivy/nest/nested_multi_map", "functional/ivy/nest/prune_nest_at_index", "functional/ivy/nest/prune_nest_at_indices", "functional/ivy/nest/set_nest_at_index", "functional/ivy/nest/set_nest_at_indices", "functional/ivy/norms", "functional/ivy/norms/layer_norm", "functional/ivy/norms/layer_norm/layer_norm_array", "functional/ivy/norms/layer_norm/layer_norm_container", "functional/ivy/norms/layer_norm/layer_norm_functional", "functional/ivy/random", "functional/ivy/random/multinomial", "functional/ivy/random/randint", "functional/ivy/random/randint/randint_functional", "functional/ivy/random/randint/static_randint_container", "functional/ivy/random/random_normal", "functional/ivy/random/random_uniform", "functional/ivy/random/random_uniform/random_uniform_container", "functional/ivy/random/random_uniform/random_uniform_functional", "functional/ivy/random/random_uniform/static_random_uniform_container", "functional/ivy/random/seed", "functional/ivy/random/shuffle", "functional/ivy/searching", "functional/ivy/searching/argmax", "functional/ivy/searching/argmin", "functional/ivy/searching/nonzero", "functional/ivy/searching/where", "functional/ivy/set", "functional/ivy/set/unique_all", "functional/ivy/set/unique_counts", "functional/ivy/set/unique_inverse", "functional/ivy/set/unique_values", "functional/ivy/sorting", "functional/ivy/sorting/argsort", "functional/ivy/sorting/argsort/argsort_array", "functional/ivy/sorting/argsort/argsort_container", "functional/ivy/sorting/argsort/argsort_functional", "functional/ivy/sorting/argsort/static_argsort_container", "functional/ivy/sorting/sort", "functional/ivy/sorting/sort/sort_array", "functional/ivy/sorting/sort/sort_container", "functional/ivy/sorting/sort/sort_functional", "functional/ivy/sorting/sort/static_sort_container", "functional/ivy/statistical", "functional/ivy/statistical/einsum", "functional/ivy/statistical/einsum/einsum_array", "functional/ivy/statistical/einsum/einsum_container", "functional/ivy/statistical/einsum/einsum_functional", "functional/ivy/statistical/max", "functional/ivy/statistical/max/max_array", "functional/ivy/statistical/max/max_container", "functional/ivy/statistical/max/max_functional", "functional/ivy/statistical/mean", "functional/ivy/statistical/mean/mean_array", "functional/ivy/statistical/mean/mean_container", "functional/ivy/statistical/mean/mean_functional", "functional/ivy/statistical/min", "functional/ivy/statistical/min/min_array", "functional/ivy/statistical/min/min_container", "functional/ivy/statistical/min/min_functional", "functional/ivy/statistical/prod", "functional/ivy/statistical/prod/prod_array", "functional/ivy/statistical/prod/prod_container", "functional/ivy/statistical/prod/prod_functional", "functional/ivy/statistical/std", "functional/ivy/statistical/std/std_array", "functional/ivy/statistical/std/std_container", "functional/ivy/statistical/std/std_functional", "functional/ivy/statistical/sum", "functional/ivy/statistical/sum/sum_array", "functional/ivy/statistical/sum/sum_container", "functional/ivy/statistical/sum/sum_functional", "functional/ivy/statistical/var", "functional/ivy/statistical/var/var_array", "functional/ivy/statistical/var/var_container", "functional/ivy/statistical/var/var_functional", "functional/ivy/utility", "functional/ivy/utility/all", "functional/ivy/utility/all/all_array", "functional/ivy/utility/all/all_container", "functional/ivy/utility/all/all_functional", "functional/ivy/utility/any", "functional/ivy/utility/any/any_array", "functional/ivy/utility/any/any_container", "functional/ivy/utility/any/any_functional", "index", "index_append", "index_prepend", "inspection", "inspection/add_array_specs", "inspection/fn_array_spec", "roadmap", "stateful/activations", "stateful/activations/GEGLU", "stateful/activations/GELU", "stateful/converters", "stateful/converters/to_ivy_module", "stateful/initializers", "stateful/initializers/Constant:\n    def __init__", "stateful/initializers/FirstLayerSiren", "stateful/initializers/GlorotUniform", "stateful/initializers/KaimingNormal:\n    def __init__", "stateful/initializers/Ones", "stateful/initializers/Siren", "stateful/initializers/Uniform:\n    def __init__", "stateful/initializers/Zeros", "stateful/layers", "stateful/layers/Conv1D", "stateful/layers/Conv1DTranspose", "stateful/layers/Conv2D", "stateful/layers/Conv2DTranspose", "stateful/layers/Conv3D", "stateful/layers/Conv3DTranspose", "stateful/layers/DepthwiseConv2D", "stateful/layers/Dropout", "stateful/layers/LSTM", "stateful/layers/Linear", "stateful/layers/MultiHeadAttention", "stateful/module", "stateful/module/Module", "stateful/norms", "stateful/norms/LayerNorm", "stateful/optimizers", "stateful/optimizers/Adam", "stateful/optimizers/LAMB", "stateful/optimizers/LARS", "stateful/optimizers/Optimizer", "stateful/optimizers/SGD", "stateful/sequential", "stateful/sequential/Sequential", "supported_frameworks", "verbosity", "verbosity/cprint"], "filenames": ["array/activations.rst", "array/activations/ArrayWithActivations.rst", "array/array_methods.rst", "array/array_methods/abs.rst", "array/array_methods/acos.rst", "array/array_methods/acosh.rst", "array/array_methods/add.rst", "array/array_methods/add_ivy_array_instance_methods.rst", "array/array_methods/all.rst", "array/array_methods/all_equal.rst", "array/array_methods/any.rst", "array/array_methods/argsort.rst", "array/array_methods/asin.rst", "array/array_methods/asinh.rst", "array/array_methods/atan.rst", "array/array_methods/atan2.rst", "array/array_methods/atanh.rst", "array/array_methods/binary_cross_entropy.rst", "array/array_methods/bitwise_and.rst", "array/array_methods/bitwise_invert.rst", "array/array_methods/bitwise_left_shift.rst", "array/array_methods/bitwise_or.rst", "array/array_methods/bitwise_right_shift.rst", "array/array_methods/bitwise_xor.rst", "array/array_methods/can_cast.rst", "array/array_methods/ceil.rst", "array/array_methods/cholesky.rst", "array/array_methods/clip.rst", "array/array_methods/concat.rst", "array/array_methods/constant_pad.rst", "array/array_methods/cos.rst", "array/array_methods/cosh.rst", "array/array_methods/cross.rst", "array/array_methods/cross_entropy.rst", "array/array_methods/det.rst", "array/array_methods/diagonal.rst", "array/array_methods/divide.rst", "array/array_methods/eigh.rst", "array/array_methods/eigvalsh.rst", "array/array_methods/einsum.rst", "array/array_methods/equal.rst", "array/array_methods/erf.rst", "array/array_methods/exp.rst", "array/array_methods/expand_dims.rst", "array/array_methods/expm1.rst", "array/array_methods/flip.rst", "array/array_methods/floor.rst", "array/array_methods/floor_divide.rst", "array/array_methods/gather_nd.rst", "array/array_methods/greater.rst", "array/array_methods/greater_equal.rst", "array/array_methods/inv.rst", "array/array_methods/isfinite.rst", "array/array_methods/isinf.rst", "array/array_methods/isnan.rst", "array/array_methods/layer_norm.rst", "array/array_methods/less.rst", "array/array_methods/less_equal.rst", "array/array_methods/log.rst", "array/array_methods/log10.rst", "array/array_methods/log1p.rst", "array/array_methods/log2.rst", "array/array_methods/logaddexp.rst", "array/array_methods/logical_and.rst", "array/array_methods/logical_not.rst", "array/array_methods/logical_or.rst", "array/array_methods/logical_xor.rst", "array/array_methods/matmul.rst", "array/array_methods/matrix_norm.rst", "array/array_methods/matrix_rank.rst", "array/array_methods/matrix_transpose.rst", "array/array_methods/max.rst", "array/array_methods/mean.rst", "array/array_methods/min.rst", "array/array_methods/multiply.rst", "array/array_methods/negative.rst", "array/array_methods/not_equal.rst", "array/array_methods/outer.rst", "array/array_methods/permute_dims.rst", "array/array_methods/pinv.rst", "array/array_methods/positive.rst", "array/array_methods/pow.rst", "array/array_methods/prod.rst", "array/array_methods/qr.rst", "array/array_methods/remainder.rst", "array/array_methods/repeat.rst", "array/array_methods/reshape.rst", "array/array_methods/roll.rst", "array/array_methods/round.rst", "array/array_methods/sign.rst", "array/array_methods/sin.rst", "array/array_methods/sinh.rst", "array/array_methods/solve.rst", "array/array_methods/sort.rst", "array/array_methods/sparse_cross_entropy.rst", "array/array_methods/sqrt.rst", "array/array_methods/square.rst", "array/array_methods/squeeze.rst", "array/array_methods/stack.rst", "array/array_methods/std.rst", "array/array_methods/subtract.rst", "array/array_methods/sum.rst", "array/array_methods/svd.rst", "array/array_methods/svdvals.rst", "array/array_methods/swapaxes.rst", "array/array_methods/tan.rst", "array/array_methods/tanh.rst", "array/array_methods/tensordot.rst", "array/array_methods/tile.rst", "array/array_methods/trace.rst", "array/array_methods/trunc.rst", "array/array_methods/var.rst", "array/array_methods/vecdot.rst", "array/array_methods/vector_norm.rst", "array/array_methods/vector_to_skew_symmetric_matrix.rst", "array/array_methods/zero_pad.rst", "array/conversions.rst", "array/conversions/args_to_ivy.rst", "array/conversions/args_to_native.rst", "array/conversions/to_ivy.rst", "array/conversions/to_native.rst", "array/creation.rst", "array/creation/ArrayWithCreation.rst", "array/data_type.rst", "array/data_type/ArrayWithDataTypes.rst", "array/device.rst", "array/device/ArrayWithDevice.rst", "array/elementwise.rst", "array/elementwise/ArrayWithElementwise.rst", "array/general.rst", "array/general/ArrayWithGeneral.rst", "array/gradients.rst", "array/gradients/ArrayWithGradients.rst", "array/image.rst", "array/image/ArrayWithImage.rst", "array/layers.rst", "array/layers/ArrayWithLayers.rst", "array/linear_algebra.rst", "array/linear_algebra/ArrayWithLinearAlgebra.rst", "array/losses.rst", "array/losses/ArrayWithLosses.rst", "array/manipulation.rst", "array/manipulation/ArrayWithManipulation.rst", "array/norms.rst", "array/norms/ArrayWithNorms.rst", "array/random.rst", "array/random/ArrayWithRandom.rst", "array/searching.rst", "array/searching/ArrayWithSearching.rst", "array/set.rst", "array/set/ArrayWithSet.rst", "array/sorting.rst", "array/sorting/ArrayWithSorting.rst", "array/statistical.rst", "array/statistical/ArrayWithStatistical.rst", "array/utility.rst", "array/utility/ArrayWithUtility.rst", "array/wrapping.rst", "array/wrapping/add_ivy_array_instance_methods.rst", "backend_handler.rst", "backend_handler/ContextManager:\n    def __init__.rst", "backend_handler/choose_random_backend.rst", "backend_handler/clear_backend_stack.rst", "backend_handler/current_backend.rst", "backend_handler/get_backend.rst", "backend_handler/set_backend.rst", "backend_handler/try_import_ivy_jax.rst", "backend_handler/try_import_ivy_mxnet.rst", "backend_handler/try_import_ivy_numpy.rst", "backend_handler/try_import_ivy_tf.rst", "backend_handler/try_import_ivy_torch.rst", "backend_handler/unset_backend.rst", "background.rst", "background/ml_explosion.rst", "background/standardization.rst", "background/why_unify.rst", "container/activations.rst", "container/activations/ContainerWithActivations.rst", "container/base.rst", "container/base/ContainerBase.rst", "container/container.rst", "container/container/Container.rst", "container/container/MultiDevContainer.rst", "container/container_methods.rst", "container/container_methods/abs.rst", "container/container_methods/acos.rst", "container/container_methods/acosh.rst", "container/container_methods/adam_update.rst", "container/container_methods/add.rst", "container/container_methods/add_ivy_container_instance_methods.rst", "container/container_methods/all.rst", "container/container_methods/all_equal.rst", "container/container_methods/any.rst", "container/container_methods/argsort.rst", "container/container_methods/asin.rst", "container/container_methods/asinh.rst", "container/container_methods/at_dev.rst", "container/container_methods/at_devs.rst", "container/container_methods/atan.rst", "container/container_methods/atan2.rst", "container/container_methods/atanh.rst", "container/container_methods/binary_cross_entropy.rst", "container/container_methods/bitwise_and.rst", "container/container_methods/bitwise_invert.rst", "container/container_methods/bitwise_left_shift.rst", "container/container_methods/bitwise_or.rst", "container/container_methods/bitwise_right_shift.rst", "container/container_methods/bitwise_xor.rst", "container/container_methods/can_cast.rst", "container/container_methods/ceil.rst", "container/container_methods/clip.rst", "container/container_methods/clip_vector_norm.rst", "container/container_methods/concat.rst", "container/container_methods/constant_pad.rst", "container/container_methods/cos.rst", "container/container_methods/cosh.rst", "container/container_methods/cross_entropy.rst", "container/container_methods/divide.rst", "container/container_methods/einsum.rst", "container/container_methods/equal.rst", "container/container_methods/erf.rst", "container/container_methods/exp.rst", "container/container_methods/expand_dims.rst", "container/container_methods/expm1.rst", "container/container_methods/flip.rst", "container/container_methods/floor.rst", "container/container_methods/floor_divide.rst", "container/container_methods/gather_nd.rst", "container/container_methods/gradient_descent_update.rst", "container/container_methods/greater.rst", "container/container_methods/greater_equal.rst", "container/container_methods/isfinite.rst", "container/container_methods/isinf.rst", "container/container_methods/isnan.rst", "container/container_methods/lamb_update.rst", "container/container_methods/lars_update.rst", "container/container_methods/layer_norm.rst", "container/container_methods/less.rst", "container/container_methods/less_equal.rst", "container/container_methods/log.rst", "container/container_methods/log10.rst", "container/container_methods/log1p.rst", "container/container_methods/log2.rst", "container/container_methods/logaddexp.rst", "container/container_methods/logical_and.rst", "container/container_methods/logical_not.rst", "container/container_methods/logical_or.rst", "container/container_methods/logical_xor.rst", "container/container_methods/matmul.rst", "container/container_methods/max.rst", "container/container_methods/mean.rst", "container/container_methods/min.rst", "container/container_methods/multiply.rst", "container/container_methods/negative.rst", "container/container_methods/not_equal.rst", "container/container_methods/optimizer_update.rst", "container/container_methods/permute_dims.rst", "container/container_methods/positive.rst", "container/container_methods/pow.rst", "container/container_methods/prod.rst", "container/container_methods/random_uniform.rst", "container/container_methods/remainder.rst", "container/container_methods/repeat.rst", "container/container_methods/reshape.rst", "container/container_methods/roll.rst", "container/container_methods/round.rst", "container/container_methods/sign.rst", "container/container_methods/sin.rst", "container/container_methods/sinh.rst", "container/container_methods/sort.rst", "container/container_methods/sparse_cross_entropy.rst", "container/container_methods/sqrt.rst", "container/container_methods/square.rst", "container/container_methods/squeeze.rst", "container/container_methods/stack.rst", "container/container_methods/static_adam_update.rst", "container/container_methods/static_add.rst", "container/container_methods/static_all_equal.rst", "container/container_methods/static_argsort.rst", "container/container_methods/static_binary_cross_entropy.rst", "container/container_methods/static_can_cast.rst", "container/container_methods/static_clip.rst", "container/container_methods/static_cross_entropy.rst", "container/container_methods/static_divide.rst", "container/container_methods/static_gather_nd.rst", "container/container_methods/static_gradient_descent_update.rst", "container/container_methods/static_lamb_update.rst", "container/container_methods/static_lars_update.rst", "container/container_methods/static_multiply.rst", "container/container_methods/static_optimizer_update.rst", "container/container_methods/static_randint.rst", "container/container_methods/static_random_uniform.rst", "container/container_methods/static_roll.rst", "container/container_methods/static_sort.rst", "container/container_methods/static_sparse_cross_entropy.rst", "container/container_methods/static_subtract.rst", "container/container_methods/static_tan.rst", "container/container_methods/std.rst", "container/container_methods/subtract.rst", "container/container_methods/sum.rst", "container/container_methods/swapaxes.rst", "container/container_methods/tan.rst", "container/container_methods/tanh.rst", "container/container_methods/tile.rst", "container/container_methods/trunc.rst", "container/container_methods/var.rst", "container/container_methods/zero_pad.rst", "container/creation.rst", "container/creation/ContainerWithCreation.rst", "container/data_type.rst", "container/data_type/ContainerWithDataTypes.rst", "container/device.rst", "container/device/ContainerWithDevice.rst", "container/elementwise.rst", "container/elementwise/ContainerWithElementwise.rst", "container/general.rst", "container/general/ContainerWithGeneral.rst", "container/gradients.rst", "container/gradients/ContainerWithGradients.rst", "container/image.rst", "container/image/ContainerWithImage.rst", "container/layers.rst", "container/layers/ContainerWithLayers.rst", "container/linear_algebra.rst", "container/linear_algebra/ContainerWithLinearAlgebra.rst", "container/losses.rst", "container/losses/ContainerWithLosses.rst", "container/manipulation.rst", "container/manipulation/ContainerWithManipulation.rst", "container/norms.rst", "container/norms/ContainerWithNorms.rst", "container/random.rst", "container/random/ContainerWithRandom.rst", "container/searching.rst", "container/searching/ContainerWithSearching.rst", "container/set.rst", "container/set/ContainerWithSet.rst", "container/sorting.rst", "container/sorting/ContainerWithSorting.rst", "container/statistical.rst", "container/statistical/ContainerWithStatistical.rst", "container/utility.rst", "container/utility/ContainerWithUtility.rst", "container/wrapping.rst", "container/wrapping/add_ivy_container_instance_methods.rst", "contributing.rst", "contributing/0_setting_up.rst", "contributing/1_the_basics.rst", "contributing/4_open_tasks.rst", "contributing/building_the_docs.rst", "deep_dive.rst", "deep_dive/0_navigating_the_code.rst", "deep_dive/10_docstrings.rst", "deep_dive/11_docstring_examples.rst", "deep_dive/12_array_api_tests.rst", "deep_dive/13_ivy_tests.rst", "deep_dive/1_function_types.rst", "deep_dive/2_backend_setting.rst", "deep_dive/3_function_wrapping.rst", "deep_dive/4_arrays.rst", "deep_dive/5_containers.rst", "deep_dive/6_data_types.rst", "deep_dive/7_devices.rst", "deep_dive/8_inplace_updates.rst", "deep_dive/9_function_arguments.rst", "design.rst", "design/building_blocks.rst", "design/ivy_as_a_framework.rst", "design/ivy_as_a_framework/ivy_array.rst", "design/ivy_as_a_framework/ivy_container.rst", "design/ivy_as_a_framework/ivy_stateful_api.rst", "design/ivy_as_a_transpiler.rst", "docs/ivy.rst", "docs/ivy_builder.rst", "docs/ivy_ecosystem.rst", "docs/ivy_gym.rst", "docs/ivy_mech.rst", "docs/ivy_memory.rst", "docs/ivy_models.rst", "docs/ivy_robot.rst", "docs/ivy_vision.rst", "extensions.rst", "extensions/applied_libraries.rst", "faq.rst", "func_wrapper.rst", "func_wrapper/handle_nestable.rst", "func_wrapper/handle_out_argument.rst", "func_wrapper/infer_device.rst", "func_wrapper/infer_dtype.rst", "func_wrapper/inputs_to_ivy_arrays.rst", "func_wrapper/inputs_to_native_arrays.rst", "func_wrapper/outputs_to_ivy_arrays.rst", "func_wrapper/to_native_arrays_and_back.rst", "functional/ivy.rst", "functional/ivy/activations.rst", "functional/ivy/activations/gelu.rst", "functional/ivy/activations/leaky_relu.rst", "functional/ivy/activations/relu.rst", "functional/ivy/activations/sigmoid.rst", "functional/ivy/activations/softmax.rst", "functional/ivy/activations/softplus.rst", "functional/ivy/activations/tanh.rst", "functional/ivy/compilation.rst", "functional/ivy/compilation/compile.rst", "functional/ivy/constants.rst", "functional/ivy/creation.rst", "functional/ivy/creation/arange.rst", "functional/ivy/creation/asarray.rst", "functional/ivy/creation/empty.rst", "functional/ivy/creation/empty_like.rst", "functional/ivy/creation/eye.rst", "functional/ivy/creation/from_dlpack.rst", "functional/ivy/creation/full.rst", "functional/ivy/creation/full_like.rst", "functional/ivy/creation/linspace.rst", "functional/ivy/creation/logspace.rst", "functional/ivy/creation/meshgrid.rst", "functional/ivy/creation/native_array.rst", "functional/ivy/creation/ones.rst", "functional/ivy/creation/ones_like.rst", "functional/ivy/creation/tril.rst", "functional/ivy/creation/triu.rst", "functional/ivy/creation/zeros.rst", "functional/ivy/creation/zeros_like.rst", "functional/ivy/data_type.rst", "functional/ivy/data_type/DefaultDtype:\n    \"\"\"\"\"\"\n\n    # noinspection PyShadowingNames\n    def __init__.rst", "functional/ivy/data_type/DefaultFloatDtype:\n    \"\"\"\"\"\"\n\n    # noinspection PyShadowingNames\n    def __init__.rst", "functional/ivy/data_type/DefaultIntDtype:\n    \"\"\"\"\"\"\n\n    # noinspection PyShadowingNames\n    def __init__.rst", "functional/ivy/data_type/as_ivy_dtype.rst", "functional/ivy/data_type/as_native_dtype.rst", "functional/ivy/data_type/astype.rst", "functional/ivy/data_type/broadcast_arrays.rst", "functional/ivy/data_type/broadcast_to.rst", "functional/ivy/data_type/can_cast.rst", "functional/ivy/data_type/can_cast/can_cast_array.rst", "functional/ivy/data_type/can_cast/can_cast_container.rst", "functional/ivy/data_type/can_cast/can_cast_functional.rst", "functional/ivy/data_type/can_cast/static_can_cast_container.rst", "functional/ivy/data_type/closest_valid_dtype.rst", "functional/ivy/data_type/default_dtype.rst", "functional/ivy/data_type/default_float_dtype.rst", "functional/ivy/data_type/default_int_dtype.rst", "functional/ivy/data_type/dtype.rst", "functional/ivy/data_type/dtype_bits.rst", "functional/ivy/data_type/finfo.rst", "functional/ivy/data_type/function_supported_dtypes.rst", "functional/ivy/data_type/function_unsupported_dtypes.rst", "functional/ivy/data_type/iinfo.rst", "functional/ivy/data_type/invalid_dtype.rst", "functional/ivy/data_type/is_float_dtype.rst", "functional/ivy/data_type/is_int_dtype.rst", "functional/ivy/data_type/promote_types.rst", "functional/ivy/data_type/result_type.rst", "functional/ivy/data_type/set_default_dtype.rst", "functional/ivy/data_type/set_default_float_dtype.rst", "functional/ivy/data_type/set_default_int_dtype.rst", "functional/ivy/data_type/type_promote_arrays.rst", "functional/ivy/data_type/unset_default_dtype.rst", "functional/ivy/data_type/unset_default_float_dtype.rst", "functional/ivy/data_type/unset_default_int_dtype.rst", "functional/ivy/data_type/valid_dtype.rst", "functional/ivy/device.rst", "functional/ivy/device/DefaultDevice:\n    \"\"\"\"\"\"\n\n    # noinspection PyShadowingNames\n    def __init__.rst", "functional/ivy/device/DevClonedItem.rst", "functional/ivy/device/DevClonedIter.rst", "functional/ivy/device/DevClonedNest.rst", "functional/ivy/device/DevDistItem.rst", "functional/ivy/device/DevDistIter.rst", "functional/ivy/device/DevDistNest.rst", "functional/ivy/device/DevManager:\n    \"\"\"\"\"\"\n\n    def __init__.rst", "functional/ivy/device/DevMapper.rst", "functional/ivy/device/DevMapperMultiProc.rst", "functional/ivy/device/MultiDev:\n    def __init__.rst", "functional/ivy/device/MultiDevItem.rst", "functional/ivy/device/MultiDevIter.rst", "functional/ivy/device/MultiDevNest.rst", "functional/ivy/device/Profiler.rst", "functional/ivy/device/as_ivy_dev.rst", "functional/ivy/device/as_native_dev.rst", "functional/ivy/device/clear_mem_on_dev.rst", "functional/ivy/device/default_device.rst", "functional/ivy/device/dev.rst", "functional/ivy/device/dev_clone.rst", "functional/ivy/device/dev_clone_array.rst", "functional/ivy/device/dev_clone_iter.rst", "functional/ivy/device/dev_clone_nest.rst", "functional/ivy/device/dev_dist.rst", "functional/ivy/device/dev_dist_array.rst", "functional/ivy/device/dev_dist_iter.rst", "functional/ivy/device/dev_dist_nest.rst", "functional/ivy/device/dev_unify.rst", "functional/ivy/device/dev_unify_array.rst", "functional/ivy/device/dev_unify_iter.rst", "functional/ivy/device/dev_unify_nest.rst", "functional/ivy/device/dev_util.rst", "functional/ivy/device/get_all_ivy_arrays_on_dev.rst", "functional/ivy/device/gpu_is_available.rst", "functional/ivy/device/num_cpu_cores.rst", "functional/ivy/device/num_gpus.rst", "functional/ivy/device/num_ivy_arrays_on_dev.rst", "functional/ivy/device/percent_used_mem_on_dev.rst", "functional/ivy/device/print_all_ivy_arrays_on_dev.rst", "functional/ivy/device/set_default_device.rst", "functional/ivy/device/set_split_factor.rst", "functional/ivy/device/split_factor.rst", "functional/ivy/device/split_func_call.rst", "functional/ivy/device/to_device.rst", "functional/ivy/device/total_mem_on_dev.rst", "functional/ivy/device/tpu_is_available.rst", "functional/ivy/device/unset_default_device.rst", "functional/ivy/device/used_mem_on_dev.rst", "functional/ivy/elementwise.rst", "functional/ivy/elementwise/abs.rst", "functional/ivy/elementwise/abs/abs_array.rst", "functional/ivy/elementwise/abs/abs_container.rst", "functional/ivy/elementwise/abs/abs_functional.rst", "functional/ivy/elementwise/acos.rst", "functional/ivy/elementwise/acos/acos_array.rst", "functional/ivy/elementwise/acos/acos_container.rst", "functional/ivy/elementwise/acos/acos_functional.rst", "functional/ivy/elementwise/acosh.rst", "functional/ivy/elementwise/acosh/acosh_array.rst", "functional/ivy/elementwise/acosh/acosh_container.rst", "functional/ivy/elementwise/acosh/acosh_functional.rst", "functional/ivy/elementwise/add.rst", "functional/ivy/elementwise/add/add_array.rst", "functional/ivy/elementwise/add/add_container.rst", "functional/ivy/elementwise/add/add_functional.rst", "functional/ivy/elementwise/add/static_add_container.rst", "functional/ivy/elementwise/asin.rst", "functional/ivy/elementwise/asin/asin_array.rst", "functional/ivy/elementwise/asin/asin_container.rst", "functional/ivy/elementwise/asin/asin_functional.rst", "functional/ivy/elementwise/asinh.rst", "functional/ivy/elementwise/asinh/asinh_array.rst", "functional/ivy/elementwise/asinh/asinh_container.rst", "functional/ivy/elementwise/asinh/asinh_functional.rst", "functional/ivy/elementwise/atan.rst", "functional/ivy/elementwise/atan/atan_array.rst", "functional/ivy/elementwise/atan/atan_container.rst", "functional/ivy/elementwise/atan/atan_functional.rst", "functional/ivy/elementwise/atan2.rst", "functional/ivy/elementwise/atan2/atan2_array.rst", "functional/ivy/elementwise/atan2/atan2_container.rst", "functional/ivy/elementwise/atan2/atan2_functional.rst", "functional/ivy/elementwise/atanh.rst", "functional/ivy/elementwise/atanh/atanh_array.rst", "functional/ivy/elementwise/atanh/atanh_container.rst", "functional/ivy/elementwise/atanh/atanh_functional.rst", "functional/ivy/elementwise/bitwise_and.rst", "functional/ivy/elementwise/bitwise_and/bitwise_and_array.rst", "functional/ivy/elementwise/bitwise_and/bitwise_and_container.rst", "functional/ivy/elementwise/bitwise_and/bitwise_and_functional.rst", "functional/ivy/elementwise/bitwise_invert.rst", "functional/ivy/elementwise/bitwise_invert/bitwise_invert_array.rst", "functional/ivy/elementwise/bitwise_invert/bitwise_invert_container.rst", "functional/ivy/elementwise/bitwise_invert/bitwise_invert_functional.rst", "functional/ivy/elementwise/bitwise_left_shift.rst", "functional/ivy/elementwise/bitwise_left_shift/bitwise_left_shift_array.rst", "functional/ivy/elementwise/bitwise_left_shift/bitwise_left_shift_container.rst", "functional/ivy/elementwise/bitwise_left_shift/bitwise_left_shift_functional.rst", "functional/ivy/elementwise/bitwise_or.rst", "functional/ivy/elementwise/bitwise_or/bitwise_or_array.rst", "functional/ivy/elementwise/bitwise_or/bitwise_or_container.rst", "functional/ivy/elementwise/bitwise_or/bitwise_or_functional.rst", "functional/ivy/elementwise/bitwise_right_shift.rst", "functional/ivy/elementwise/bitwise_right_shift/bitwise_right_shift_array.rst", "functional/ivy/elementwise/bitwise_right_shift/bitwise_right_shift_container.rst", "functional/ivy/elementwise/bitwise_right_shift/bitwise_right_shift_functional.rst", "functional/ivy/elementwise/bitwise_xor.rst", "functional/ivy/elementwise/bitwise_xor/bitwise_xor_array.rst", "functional/ivy/elementwise/bitwise_xor/bitwise_xor_container.rst", "functional/ivy/elementwise/bitwise_xor/bitwise_xor_functional.rst", "functional/ivy/elementwise/ceil.rst", "functional/ivy/elementwise/ceil/ceil_array.rst", "functional/ivy/elementwise/ceil/ceil_container.rst", "functional/ivy/elementwise/ceil/ceil_functional.rst", "functional/ivy/elementwise/cos.rst", "functional/ivy/elementwise/cos/cos_array.rst", "functional/ivy/elementwise/cos/cos_container.rst", "functional/ivy/elementwise/cos/cos_functional.rst", "functional/ivy/elementwise/cosh.rst", "functional/ivy/elementwise/cosh/cosh_array.rst", "functional/ivy/elementwise/cosh/cosh_container.rst", "functional/ivy/elementwise/cosh/cosh_functional.rst", "functional/ivy/elementwise/divide.rst", "functional/ivy/elementwise/divide/divide_array.rst", "functional/ivy/elementwise/divide/divide_container.rst", "functional/ivy/elementwise/divide/divide_functional.rst", "functional/ivy/elementwise/divide/static_divide_container.rst", "functional/ivy/elementwise/equal.rst", "functional/ivy/elementwise/equal/equal_array.rst", "functional/ivy/elementwise/equal/equal_container.rst", "functional/ivy/elementwise/equal/equal_functional.rst", "functional/ivy/elementwise/erf.rst", "functional/ivy/elementwise/erf/erf_array.rst", "functional/ivy/elementwise/erf/erf_container.rst", "functional/ivy/elementwise/erf/erf_functional.rst", "functional/ivy/elementwise/exp.rst", "functional/ivy/elementwise/exp/exp_array.rst", "functional/ivy/elementwise/exp/exp_container.rst", "functional/ivy/elementwise/exp/exp_functional.rst", "functional/ivy/elementwise/expm1.rst", "functional/ivy/elementwise/expm1/expm1_array.rst", "functional/ivy/elementwise/expm1/expm1_container.rst", "functional/ivy/elementwise/expm1/expm1_functional.rst", "functional/ivy/elementwise/floor.rst", "functional/ivy/elementwise/floor/floor_array.rst", "functional/ivy/elementwise/floor/floor_container.rst", "functional/ivy/elementwise/floor/floor_functional.rst", "functional/ivy/elementwise/floor_divide.rst", "functional/ivy/elementwise/floor_divide/floor_divide_array.rst", "functional/ivy/elementwise/floor_divide/floor_divide_container.rst", "functional/ivy/elementwise/floor_divide/floor_divide_functional.rst", "functional/ivy/elementwise/greater.rst", "functional/ivy/elementwise/greater/greater_array.rst", "functional/ivy/elementwise/greater/greater_container.rst", "functional/ivy/elementwise/greater/greater_functional.rst", "functional/ivy/elementwise/greater_equal.rst", "functional/ivy/elementwise/greater_equal/greater_equal_array.rst", "functional/ivy/elementwise/greater_equal/greater_equal_container.rst", "functional/ivy/elementwise/greater_equal/greater_equal_functional.rst", "functional/ivy/elementwise/isfinite.rst", "functional/ivy/elementwise/isfinite/isfinite_array.rst", "functional/ivy/elementwise/isfinite/isfinite_container.rst", "functional/ivy/elementwise/isfinite/isfinite_functional.rst", "functional/ivy/elementwise/isinf.rst", "functional/ivy/elementwise/isinf/isinf_array.rst", "functional/ivy/elementwise/isinf/isinf_container.rst", "functional/ivy/elementwise/isinf/isinf_functional.rst", "functional/ivy/elementwise/isnan.rst", "functional/ivy/elementwise/isnan/isnan_array.rst", "functional/ivy/elementwise/isnan/isnan_container.rst", "functional/ivy/elementwise/isnan/isnan_functional.rst", "functional/ivy/elementwise/less.rst", "functional/ivy/elementwise/less/less_array.rst", "functional/ivy/elementwise/less/less_container.rst", "functional/ivy/elementwise/less/less_functional.rst", "functional/ivy/elementwise/less_equal.rst", "functional/ivy/elementwise/less_equal/less_equal_array.rst", "functional/ivy/elementwise/less_equal/less_equal_container.rst", "functional/ivy/elementwise/less_equal/less_equal_functional.rst", "functional/ivy/elementwise/log.rst", "functional/ivy/elementwise/log/log_array.rst", "functional/ivy/elementwise/log/log_container.rst", "functional/ivy/elementwise/log/log_functional.rst", "functional/ivy/elementwise/log10.rst", "functional/ivy/elementwise/log10/log10_array.rst", "functional/ivy/elementwise/log10/log10_container.rst", "functional/ivy/elementwise/log10/log10_functional.rst", "functional/ivy/elementwise/log1p.rst", "functional/ivy/elementwise/log1p/log1p_array.rst", "functional/ivy/elementwise/log1p/log1p_container.rst", "functional/ivy/elementwise/log1p/log1p_functional.rst", "functional/ivy/elementwise/log2.rst", "functional/ivy/elementwise/log2/log2_array.rst", "functional/ivy/elementwise/log2/log2_container.rst", "functional/ivy/elementwise/log2/log2_functional.rst", "functional/ivy/elementwise/logaddexp.rst", "functional/ivy/elementwise/logaddexp/logaddexp_array.rst", "functional/ivy/elementwise/logaddexp/logaddexp_container.rst", "functional/ivy/elementwise/logaddexp/logaddexp_functional.rst", "functional/ivy/elementwise/logical_and.rst", "functional/ivy/elementwise/logical_and/logical_and_array.rst", "functional/ivy/elementwise/logical_and/logical_and_container.rst", "functional/ivy/elementwise/logical_and/logical_and_functional.rst", "functional/ivy/elementwise/logical_not.rst", "functional/ivy/elementwise/logical_not/logical_not_array.rst", "functional/ivy/elementwise/logical_not/logical_not_container.rst", "functional/ivy/elementwise/logical_not/logical_not_functional.rst", "functional/ivy/elementwise/logical_or.rst", "functional/ivy/elementwise/logical_or/logical_or_array.rst", "functional/ivy/elementwise/logical_or/logical_or_container.rst", "functional/ivy/elementwise/logical_or/logical_or_functional.rst", "functional/ivy/elementwise/logical_xor.rst", "functional/ivy/elementwise/logical_xor/logical_xor_array.rst", "functional/ivy/elementwise/logical_xor/logical_xor_container.rst", "functional/ivy/elementwise/logical_xor/logical_xor_functional.rst", "functional/ivy/elementwise/maximum.rst", "functional/ivy/elementwise/minimum.rst", "functional/ivy/elementwise/multiply.rst", "functional/ivy/elementwise/multiply/multiply_array.rst", "functional/ivy/elementwise/multiply/multiply_container.rst", "functional/ivy/elementwise/multiply/multiply_functional.rst", "functional/ivy/elementwise/multiply/static_multiply_container.rst", "functional/ivy/elementwise/negative.rst", "functional/ivy/elementwise/negative/negative_array.rst", "functional/ivy/elementwise/negative/negative_container.rst", "functional/ivy/elementwise/negative/negative_functional.rst", "functional/ivy/elementwise/not_equal.rst", "functional/ivy/elementwise/not_equal/not_equal_array.rst", "functional/ivy/elementwise/not_equal/not_equal_container.rst", "functional/ivy/elementwise/not_equal/not_equal_functional.rst", "functional/ivy/elementwise/positive.rst", "functional/ivy/elementwise/positive/positive_array.rst", "functional/ivy/elementwise/positive/positive_container.rst", "functional/ivy/elementwise/positive/positive_functional.rst", "functional/ivy/elementwise/pow.rst", "functional/ivy/elementwise/pow/pow_array.rst", "functional/ivy/elementwise/pow/pow_container.rst", "functional/ivy/elementwise/pow/pow_functional.rst", "functional/ivy/elementwise/remainder.rst", "functional/ivy/elementwise/remainder/remainder_array.rst", "functional/ivy/elementwise/remainder/remainder_container.rst", "functional/ivy/elementwise/remainder/remainder_functional.rst", "functional/ivy/elementwise/round.rst", "functional/ivy/elementwise/round/round_array.rst", "functional/ivy/elementwise/round/round_container.rst", "functional/ivy/elementwise/round/round_functional.rst", "functional/ivy/elementwise/sign.rst", "functional/ivy/elementwise/sign/sign_array.rst", "functional/ivy/elementwise/sign/sign_container.rst", "functional/ivy/elementwise/sign/sign_functional.rst", "functional/ivy/elementwise/sin.rst", "functional/ivy/elementwise/sin/sin_array.rst", "functional/ivy/elementwise/sin/sin_container.rst", "functional/ivy/elementwise/sin/sin_functional.rst", "functional/ivy/elementwise/sinh.rst", "functional/ivy/elementwise/sinh/sinh_array.rst", "functional/ivy/elementwise/sinh/sinh_container.rst", "functional/ivy/elementwise/sinh/sinh_functional.rst", "functional/ivy/elementwise/sqrt.rst", "functional/ivy/elementwise/sqrt/sqrt_array.rst", "functional/ivy/elementwise/sqrt/sqrt_container.rst", "functional/ivy/elementwise/sqrt/sqrt_functional.rst", "functional/ivy/elementwise/square.rst", "functional/ivy/elementwise/square/square_array.rst", "functional/ivy/elementwise/square/square_container.rst", "functional/ivy/elementwise/square/square_functional.rst", "functional/ivy/elementwise/subtract.rst", "functional/ivy/elementwise/subtract/static_subtract_container.rst", "functional/ivy/elementwise/subtract/subtract_array.rst", "functional/ivy/elementwise/subtract/subtract_container.rst", "functional/ivy/elementwise/subtract/subtract_functional.rst", "functional/ivy/elementwise/tan.rst", "functional/ivy/elementwise/tan/static_tan_container.rst", "functional/ivy/elementwise/tan/tan_array.rst", "functional/ivy/elementwise/tan/tan_container.rst", "functional/ivy/elementwise/tan/tan_functional.rst", "functional/ivy/elementwise/tanh.rst", "functional/ivy/elementwise/tanh/tanh_array.rst", "functional/ivy/elementwise/tanh/tanh_container.rst", "functional/ivy/elementwise/tanh/tanh_functional.rst", "functional/ivy/elementwise/trunc.rst", "functional/ivy/elementwise/trunc/trunc_array.rst", "functional/ivy/elementwise/trunc/trunc_container.rst", "functional/ivy/elementwise/trunc/trunc_functional.rst", "functional/ivy/general.rst", "functional/ivy/general/all_equal.rst", "functional/ivy/general/all_equal/all_equal_array.rst", "functional/ivy/general/all_equal/all_equal_container.rst", "functional/ivy/general/all_equal/all_equal_functional.rst", "functional/ivy/general/all_equal/static_all_equal_container.rst", "functional/ivy/general/arg_info.rst", "functional/ivy/general/arg_names.rst", "functional/ivy/general/array_equal.rst", "functional/ivy/general/arrays_equal.rst", "functional/ivy/general/assert_supports_inplace.rst", "functional/ivy/general/cache_fn.rst", "functional/ivy/general/clip_matrix_norm.rst", "functional/ivy/general/clip_vector_norm.rst", "functional/ivy/general/clip_vector_norm/clip_vector_norm_container.rst", "functional/ivy/general/clip_vector_norm/clip_vector_norm_functional.rst", "functional/ivy/general/container_types.rst", "functional/ivy/general/copy_array.rst", "functional/ivy/general/cumprod.rst", "functional/ivy/general/cumsum.rst", "functional/ivy/general/current_backend_str.rst", "functional/ivy/general/default.rst", "functional/ivy/general/einops_rearrange.rst", "functional/ivy/general/einops_reduce.rst", "functional/ivy/general/einops_repeat.rst", "functional/ivy/general/exists.rst", "functional/ivy/general/floormod.rst", "functional/ivy/general/fourier_encode.rst", "functional/ivy/general/gather.rst", "functional/ivy/general/gather_nd.rst", "functional/ivy/general/gather_nd/gather_nd_array.rst", "functional/ivy/general/gather_nd/gather_nd_container.rst", "functional/ivy/general/gather_nd/gather_nd_functional.rst", "functional/ivy/general/gather_nd/static_gather_nd_container.rst", "functional/ivy/general/get_all_arrays_in_memory.rst", "functional/ivy/general/get_min_base.rst", "functional/ivy/general/get_min_denominator.rst", "functional/ivy/general/get_num_dims.rst", "functional/ivy/general/get_referrers_recursive.rst", "functional/ivy/general/has_nans.rst", "functional/ivy/general/indices_where.rst", "functional/ivy/general/inplace_arrays_supported.rst", "functional/ivy/general/inplace_decrement.rst", "functional/ivy/general/inplace_increment.rst", "functional/ivy/general/inplace_update.rst", "functional/ivy/general/inplace_variables_supported.rst", "functional/ivy/general/is_array.rst", "functional/ivy/general/is_ivy_array.rst", "functional/ivy/general/is_ivy_container.rst", "functional/ivy/general/is_native_array.rst", "functional/ivy/general/match_kwargs.rst", "functional/ivy/general/multiprocessing.rst", "functional/ivy/general/num_arrays_in_memory.rst", "functional/ivy/general/one_hot.rst", "functional/ivy/general/print_all_arrays_in_memory.rst", "functional/ivy/general/queue_timeout.rst", "functional/ivy/general/scatter_flat.rst", "functional/ivy/general/scatter_nd.rst", "functional/ivy/general/set_min_base.rst", "functional/ivy/general/set_min_denominator.rst", "functional/ivy/general/set_queue_timeout.rst", "functional/ivy/general/set_tmp_dir.rst", "functional/ivy/general/shape.rst", "functional/ivy/general/shape_to_tuple.rst", "functional/ivy/general/stable_divide.rst", "functional/ivy/general/stable_pow.rst", "functional/ivy/general/supports_inplace.rst", "functional/ivy/general/tmp_dir.rst", "functional/ivy/general/to_list.rst", "functional/ivy/general/to_numpy.rst", "functional/ivy/general/to_scalar.rst", "functional/ivy/general/try_else_none.rst", "functional/ivy/general/unstack.rst", "functional/ivy/general/value_is_nan.rst", "functional/ivy/gradients.rst", "functional/ivy/gradients/GradientTracking:\n    \"\"\"\"\"\"\n\n    # noinspection PyShadowingNames\n    def __init__.rst", "functional/ivy/gradients/adam_step.rst", "functional/ivy/gradients/adam_update.rst", "functional/ivy/gradients/adam_update/adam_update_container.rst", "functional/ivy/gradients/adam_update/adam_update_functional.rst", "functional/ivy/gradients/adam_update/static_adam_update_container.rst", "functional/ivy/gradients/execute_with_gradients.rst", "functional/ivy/gradients/gradient_descent_update.rst", "functional/ivy/gradients/gradient_descent_update/gradient_descent_update_container.rst", "functional/ivy/gradients/gradient_descent_update/gradient_descent_update_functional.rst", "functional/ivy/gradients/gradient_descent_update/static_gradient_descent_update_container.rst", "functional/ivy/gradients/is_variable.rst", "functional/ivy/gradients/lamb_update.rst", "functional/ivy/gradients/lamb_update/lamb_update_container.rst", "functional/ivy/gradients/lamb_update/lamb_update_functional.rst", "functional/ivy/gradients/lamb_update/static_lamb_update_container.rst", "functional/ivy/gradients/lars_update.rst", "functional/ivy/gradients/lars_update/lars_update_container.rst", "functional/ivy/gradients/lars_update/lars_update_functional.rst", "functional/ivy/gradients/lars_update/static_lars_update_container.rst", "functional/ivy/gradients/optimizer_update.rst", "functional/ivy/gradients/optimizer_update/optimizer_update_container.rst", "functional/ivy/gradients/optimizer_update/optimizer_update_functional.rst", "functional/ivy/gradients/optimizer_update/static_optimizer_update_container.rst", "functional/ivy/gradients/set_with_grads.rst", "functional/ivy/gradients/stop_gradient.rst", "functional/ivy/gradients/unset_with_grads.rst", "functional/ivy/gradients/variable.rst", "functional/ivy/gradients/variable_data.rst", "functional/ivy/gradients/with_grads.rst", "functional/ivy/layers.rst", "functional/ivy/layers/conv1d.rst", "functional/ivy/layers/conv1d_transpose.rst", "functional/ivy/layers/conv2d.rst", "functional/ivy/layers/conv2d_transpose.rst", "functional/ivy/layers/conv3d.rst", "functional/ivy/layers/conv3d_transpose.rst", "functional/ivy/layers/depthwise_conv2d.rst", "functional/ivy/layers/dropout.rst", "functional/ivy/layers/linear.rst", "functional/ivy/layers/lstm_update.rst", "functional/ivy/layers/multi_head_attention.rst", "functional/ivy/layers/scaled_dot_product_attention.rst", "functional/ivy/linear_algebra.rst", "functional/ivy/linear_algebra/cholesky.rst", "functional/ivy/linear_algebra/cholesky/cholesky_array.rst", "functional/ivy/linear_algebra/cholesky/cholesky_functional.rst", "functional/ivy/linear_algebra/cross.rst", "functional/ivy/linear_algebra/cross/cross_array.rst", "functional/ivy/linear_algebra/cross/cross_functional.rst", "functional/ivy/linear_algebra/det.rst", "functional/ivy/linear_algebra/det/det_array.rst", "functional/ivy/linear_algebra/det/det_functional.rst", "functional/ivy/linear_algebra/diagonal.rst", "functional/ivy/linear_algebra/diagonal/diagonal_array.rst", "functional/ivy/linear_algebra/diagonal/diagonal_functional.rst", "functional/ivy/linear_algebra/eigh.rst", "functional/ivy/linear_algebra/eigh/eigh_array.rst", "functional/ivy/linear_algebra/eigh/eigh_functional.rst", "functional/ivy/linear_algebra/eigvalsh.rst", "functional/ivy/linear_algebra/eigvalsh/eigvalsh_array.rst", "functional/ivy/linear_algebra/eigvalsh/eigvalsh_functional.rst", "functional/ivy/linear_algebra/inv.rst", "functional/ivy/linear_algebra/inv/inv_array.rst", "functional/ivy/linear_algebra/inv/inv_functional.rst", "functional/ivy/linear_algebra/matmul.rst", "functional/ivy/linear_algebra/matmul/matmul_array.rst", "functional/ivy/linear_algebra/matmul/matmul_container.rst", "functional/ivy/linear_algebra/matmul/matmul_functional.rst", "functional/ivy/linear_algebra/matrix_norm.rst", "functional/ivy/linear_algebra/matrix_norm/matrix_norm_array.rst", "functional/ivy/linear_algebra/matrix_norm/matrix_norm_functional.rst", "functional/ivy/linear_algebra/matrix_power.rst", "functional/ivy/linear_algebra/matrix_rank.rst", "functional/ivy/linear_algebra/matrix_rank/matrix_rank_array.rst", "functional/ivy/linear_algebra/matrix_rank/matrix_rank_functional.rst", "functional/ivy/linear_algebra/matrix_transpose.rst", "functional/ivy/linear_algebra/matrix_transpose/matrix_transpose_array.rst", "functional/ivy/linear_algebra/matrix_transpose/matrix_transpose_functional.rst", "functional/ivy/linear_algebra/outer.rst", "functional/ivy/linear_algebra/outer/outer_array.rst", "functional/ivy/linear_algebra/outer/outer_functional.rst", "functional/ivy/linear_algebra/pinv.rst", "functional/ivy/linear_algebra/pinv/pinv_array.rst", "functional/ivy/linear_algebra/pinv/pinv_functional.rst", "functional/ivy/linear_algebra/qr.rst", "functional/ivy/linear_algebra/qr/qr_array.rst", "functional/ivy/linear_algebra/qr/qr_functional.rst", "functional/ivy/linear_algebra/slogdet.rst", "functional/ivy/linear_algebra/solve.rst", "functional/ivy/linear_algebra/solve/solve_array.rst", "functional/ivy/linear_algebra/solve/solve_functional.rst", "functional/ivy/linear_algebra/svd.rst", "functional/ivy/linear_algebra/svd/svd_array.rst", "functional/ivy/linear_algebra/svd/svd_functional.rst", "functional/ivy/linear_algebra/svdvals.rst", "functional/ivy/linear_algebra/svdvals/svdvals_array.rst", "functional/ivy/linear_algebra/svdvals/svdvals_functional.rst", "functional/ivy/linear_algebra/tensordot.rst", "functional/ivy/linear_algebra/tensordot/tensordot_array.rst", "functional/ivy/linear_algebra/tensordot/tensordot_functional.rst", "functional/ivy/linear_algebra/trace.rst", "functional/ivy/linear_algebra/trace/trace_array.rst", "functional/ivy/linear_algebra/trace/trace_functional.rst", "functional/ivy/linear_algebra/vecdot.rst", "functional/ivy/linear_algebra/vecdot/vecdot_array.rst", "functional/ivy/linear_algebra/vecdot/vecdot_functional.rst", "functional/ivy/linear_algebra/vector_norm.rst", "functional/ivy/linear_algebra/vector_norm/vector_norm_array.rst", "functional/ivy/linear_algebra/vector_norm/vector_norm_functional.rst", "functional/ivy/linear_algebra/vector_to_skew_symmetric_matrix.rst", "functional/ivy/linear_algebra/vector_to_skew_symmetric_matrix/vector_to_skew_symmetric_matrix_array.rst", "functional/ivy/linear_algebra/vector_to_skew_symmetric_matrix/vector_to_skew_symmetric_matrix_functional.rst", "functional/ivy/losses.rst", "functional/ivy/losses/binary_cross_entropy.rst", "functional/ivy/losses/binary_cross_entropy/binary_cross_entropy_array.rst", "functional/ivy/losses/binary_cross_entropy/binary_cross_entropy_container.rst", "functional/ivy/losses/binary_cross_entropy/binary_cross_entropy_functional.rst", "functional/ivy/losses/binary_cross_entropy/static_binary_cross_entropy_container.rst", "functional/ivy/losses/cross_entropy.rst", "functional/ivy/losses/cross_entropy/cross_entropy_array.rst", "functional/ivy/losses/cross_entropy/cross_entropy_container.rst", "functional/ivy/losses/cross_entropy/cross_entropy_functional.rst", "functional/ivy/losses/cross_entropy/static_cross_entropy_container.rst", "functional/ivy/losses/sparse_cross_entropy.rst", "functional/ivy/losses/sparse_cross_entropy/sparse_cross_entropy_array.rst", "functional/ivy/losses/sparse_cross_entropy/sparse_cross_entropy_container.rst", "functional/ivy/losses/sparse_cross_entropy/sparse_cross_entropy_functional.rst", "functional/ivy/losses/sparse_cross_entropy/static_sparse_cross_entropy_container.rst", "functional/ivy/manipulation.rst", "functional/ivy/manipulation/clip.rst", "functional/ivy/manipulation/clip/clip_array.rst", "functional/ivy/manipulation/clip/clip_container.rst", "functional/ivy/manipulation/clip/clip_functional.rst", "functional/ivy/manipulation/clip/static_clip_container.rst", "functional/ivy/manipulation/concat.rst", "functional/ivy/manipulation/concat/concat_array.rst", "functional/ivy/manipulation/concat/concat_container.rst", "functional/ivy/manipulation/concat/concat_functional.rst", "functional/ivy/manipulation/constant_pad.rst", "functional/ivy/manipulation/constant_pad/constant_pad_array.rst", "functional/ivy/manipulation/constant_pad/constant_pad_container.rst", "functional/ivy/manipulation/constant_pad/constant_pad_functional.rst", "functional/ivy/manipulation/expand_dims.rst", "functional/ivy/manipulation/expand_dims/expand_dims_array.rst", "functional/ivy/manipulation/expand_dims/expand_dims_container.rst", "functional/ivy/manipulation/expand_dims/expand_dims_functional.rst", "functional/ivy/manipulation/flip.rst", "functional/ivy/manipulation/flip/flip_array.rst", "functional/ivy/manipulation/flip/flip_container.rst", "functional/ivy/manipulation/flip/flip_functional.rst", "functional/ivy/manipulation/permute_dims.rst", "functional/ivy/manipulation/permute_dims/permute_dims_array.rst", "functional/ivy/manipulation/permute_dims/permute_dims_container.rst", "functional/ivy/manipulation/permute_dims/permute_dims_functional.rst", "functional/ivy/manipulation/repeat.rst", "functional/ivy/manipulation/repeat/repeat_array.rst", "functional/ivy/manipulation/repeat/repeat_container.rst", "functional/ivy/manipulation/repeat/repeat_functional.rst", "functional/ivy/manipulation/reshape.rst", "functional/ivy/manipulation/reshape/reshape_array.rst", "functional/ivy/manipulation/reshape/reshape_container.rst", "functional/ivy/manipulation/reshape/reshape_functional.rst", "functional/ivy/manipulation/roll.rst", "functional/ivy/manipulation/roll/roll_array.rst", "functional/ivy/manipulation/roll/roll_container.rst", "functional/ivy/manipulation/roll/roll_functional.rst", "functional/ivy/manipulation/roll/static_roll_container.rst", "functional/ivy/manipulation/split.rst", "functional/ivy/manipulation/squeeze.rst", "functional/ivy/manipulation/squeeze/squeeze_array.rst", "functional/ivy/manipulation/squeeze/squeeze_container.rst", "functional/ivy/manipulation/squeeze/squeeze_functional.rst", "functional/ivy/manipulation/stack.rst", "functional/ivy/manipulation/stack/stack_array.rst", "functional/ivy/manipulation/stack/stack_container.rst", "functional/ivy/manipulation/stack/stack_functional.rst", "functional/ivy/manipulation/swapaxes.rst", "functional/ivy/manipulation/swapaxes/swapaxes_array.rst", "functional/ivy/manipulation/swapaxes/swapaxes_container.rst", "functional/ivy/manipulation/swapaxes/swapaxes_functional.rst", "functional/ivy/manipulation/tile.rst", "functional/ivy/manipulation/tile/tile_array.rst", "functional/ivy/manipulation/tile/tile_container.rst", "functional/ivy/manipulation/tile/tile_functional.rst", "functional/ivy/manipulation/zero_pad.rst", "functional/ivy/manipulation/zero_pad/zero_pad_array.rst", "functional/ivy/manipulation/zero_pad/zero_pad_container.rst", "functional/ivy/manipulation/zero_pad/zero_pad_functional.rst", "functional/ivy/meta.rst", "functional/ivy/meta/fomaml_step.rst", "functional/ivy/meta/maml_step.rst", "functional/ivy/meta/reptile_step.rst", "functional/ivy/nest.rst", "functional/ivy/nest/all_nested_indices.rst", "functional/ivy/nest/copy_nest.rst", "functional/ivy/nest/index_nest.rst", "functional/ivy/nest/insert_into_nest_at_index.rst", "functional/ivy/nest/insert_into_nest_at_indices.rst", "functional/ivy/nest/map.rst", "functional/ivy/nest/map_nest_at_index.rst", "functional/ivy/nest/map_nest_at_indices.rst", "functional/ivy/nest/multi_index_nest.rst", "functional/ivy/nest/nested_any.rst", "functional/ivy/nest/nested_indices_where.rst", "functional/ivy/nest/nested_map.rst", "functional/ivy/nest/nested_multi_map.rst", "functional/ivy/nest/prune_nest_at_index.rst", "functional/ivy/nest/prune_nest_at_indices.rst", "functional/ivy/nest/set_nest_at_index.rst", "functional/ivy/nest/set_nest_at_indices.rst", "functional/ivy/norms.rst", "functional/ivy/norms/layer_norm.rst", "functional/ivy/norms/layer_norm/layer_norm_array.rst", "functional/ivy/norms/layer_norm/layer_norm_container.rst", "functional/ivy/norms/layer_norm/layer_norm_functional.rst", "functional/ivy/random.rst", "functional/ivy/random/multinomial.rst", "functional/ivy/random/randint.rst", "functional/ivy/random/randint/randint_functional.rst", "functional/ivy/random/randint/static_randint_container.rst", "functional/ivy/random/random_normal.rst", "functional/ivy/random/random_uniform.rst", "functional/ivy/random/random_uniform/random_uniform_container.rst", "functional/ivy/random/random_uniform/random_uniform_functional.rst", "functional/ivy/random/random_uniform/static_random_uniform_container.rst", "functional/ivy/random/seed.rst", "functional/ivy/random/shuffle.rst", "functional/ivy/searching.rst", "functional/ivy/searching/argmax.rst", "functional/ivy/searching/argmin.rst", "functional/ivy/searching/nonzero.rst", "functional/ivy/searching/where.rst", "functional/ivy/set.rst", "functional/ivy/set/unique_all.rst", "functional/ivy/set/unique_counts.rst", "functional/ivy/set/unique_inverse.rst", "functional/ivy/set/unique_values.rst", "functional/ivy/sorting.rst", "functional/ivy/sorting/argsort.rst", "functional/ivy/sorting/argsort/argsort_array.rst", "functional/ivy/sorting/argsort/argsort_container.rst", "functional/ivy/sorting/argsort/argsort_functional.rst", "functional/ivy/sorting/argsort/static_argsort_container.rst", "functional/ivy/sorting/sort.rst", "functional/ivy/sorting/sort/sort_array.rst", "functional/ivy/sorting/sort/sort_container.rst", "functional/ivy/sorting/sort/sort_functional.rst", "functional/ivy/sorting/sort/static_sort_container.rst", "functional/ivy/statistical.rst", "functional/ivy/statistical/einsum.rst", "functional/ivy/statistical/einsum/einsum_array.rst", "functional/ivy/statistical/einsum/einsum_container.rst", "functional/ivy/statistical/einsum/einsum_functional.rst", "functional/ivy/statistical/max.rst", "functional/ivy/statistical/max/max_array.rst", "functional/ivy/statistical/max/max_container.rst", "functional/ivy/statistical/max/max_functional.rst", "functional/ivy/statistical/mean.rst", "functional/ivy/statistical/mean/mean_array.rst", "functional/ivy/statistical/mean/mean_container.rst", "functional/ivy/statistical/mean/mean_functional.rst", "functional/ivy/statistical/min.rst", "functional/ivy/statistical/min/min_array.rst", "functional/ivy/statistical/min/min_container.rst", "functional/ivy/statistical/min/min_functional.rst", "functional/ivy/statistical/prod.rst", "functional/ivy/statistical/prod/prod_array.rst", "functional/ivy/statistical/prod/prod_container.rst", "functional/ivy/statistical/prod/prod_functional.rst", "functional/ivy/statistical/std.rst", "functional/ivy/statistical/std/std_array.rst", "functional/ivy/statistical/std/std_container.rst", "functional/ivy/statistical/std/std_functional.rst", "functional/ivy/statistical/sum.rst", "functional/ivy/statistical/sum/sum_array.rst", "functional/ivy/statistical/sum/sum_container.rst", "functional/ivy/statistical/sum/sum_functional.rst", "functional/ivy/statistical/var.rst", "functional/ivy/statistical/var/var_array.rst", "functional/ivy/statistical/var/var_container.rst", "functional/ivy/statistical/var/var_functional.rst", "functional/ivy/utility.rst", "functional/ivy/utility/all.rst", "functional/ivy/utility/all/all_array.rst", "functional/ivy/utility/all/all_container.rst", "functional/ivy/utility/all/all_functional.rst", "functional/ivy/utility/any.rst", "functional/ivy/utility/any/any_array.rst", "functional/ivy/utility/any/any_container.rst", "functional/ivy/utility/any/any_functional.rst", "index.rst", "index_append.rst", "index_prepend.rst", "inspection.rst", "inspection/add_array_specs.rst", "inspection/fn_array_spec.rst", "roadmap.rst", "stateful/activations.rst", "stateful/activations/GEGLU.rst", "stateful/activations/GELU.rst", "stateful/converters.rst", "stateful/converters/to_ivy_module.rst", "stateful/initializers.rst", "stateful/initializers/Constant:\n    def __init__.rst", "stateful/initializers/FirstLayerSiren.rst", "stateful/initializers/GlorotUniform.rst", "stateful/initializers/KaimingNormal:\n    def __init__.rst", "stateful/initializers/Ones.rst", "stateful/initializers/Siren.rst", "stateful/initializers/Uniform:\n    def __init__.rst", "stateful/initializers/Zeros.rst", "stateful/layers.rst", "stateful/layers/Conv1D.rst", "stateful/layers/Conv1DTranspose.rst", "stateful/layers/Conv2D.rst", "stateful/layers/Conv2DTranspose.rst", "stateful/layers/Conv3D.rst", "stateful/layers/Conv3DTranspose.rst", "stateful/layers/DepthwiseConv2D.rst", "stateful/layers/Dropout.rst", "stateful/layers/LSTM.rst", "stateful/layers/Linear.rst", "stateful/layers/MultiHeadAttention.rst", "stateful/module.rst", "stateful/module/Module.rst", "stateful/norms.rst", "stateful/norms/LayerNorm.rst", "stateful/optimizers.rst", "stateful/optimizers/Adam.rst", "stateful/optimizers/LAMB.rst", "stateful/optimizers/LARS.rst", "stateful/optimizers/Optimizer.rst", "stateful/optimizers/SGD.rst", "stateful/sequential.rst", "stateful/sequential/Sequential.rst", "supported_frameworks.rst", "verbosity.rst", "verbosity/cprint.rst"], "titles": ["Activations", "ArrayWithActivations", "Array methods", "abs array", "acos array", "acosh array", "add array", "add_ivy_array_instance_methods array", "all array", "all_equal array", "any array", "argsort array", "asin array", "asinh array", "atan array", "atan2 array", "atanh array", "binary_cross_entropy array", "bitwise_and array", "bitwise_invert array", "bitwise_left_shift array", "bitwise_or array", "bitwise_right_shift array", "bitwise_xor array", "can_cast array", "ceil array", "cholesky array", "clip array", "concat array", "constant_pad array", "cos array", "cosh array", "cross array", "cross_entropy array", "det array", "diagonal array", "divide array", "eigh array", "eigvalsh array", "einsum array", "equal array", "erf array", "exp array", "expand_dims array", "expm1 array", "flip array", "floor array", "floor_divide array", "gather_nd array", "greater array", "greater_equal array", "inv array", "isfinite array", "isinf array", "isnan array", "layer_norm array", "less array", "less_equal array", "log array", "log10 array", "log1p array", "log2 array", "logaddexp array", "logical_and array", "logical_not array", "logical_or array", "logical_xor array", "matmul array", "matrix_norm array", "matrix_rank array", "matrix_transpose array", "max array", "mean array", "min array", "multiply array", "negative array", "not_equal array", "outer array", "permute_dims array", "pinv array", "positive array", "pow array", "prod array", "qr array", "remainder array", "repeat array", "reshape array", "roll array", "round array", "sign array", "sin array", "sinh array", "solve array", "sort array", "sparse_cross_entropy array", "sqrt array", "square array", "squeeze array", "stack array", "std array", "subtract array", "sum array", "svd array", "svdvals array", "swapaxes array", "tan array", "tanh array", "tensordot array", "tile array", "trace array", "trunc array", "var array", "vecdot array", "vector_norm array", "vector_to_skew_symmetric_matrix array", "zero_pad array", "Conversions", "args_to_ivy", "args_to_native", "to_ivy", "to_native", "Creation", "ArrayWithCreation", "Data type", "ArrayWithDataTypes", "Device", "ArrayWithDevice", "Elementwise", "ArrayWithElementwise", "General", "ArrayWithGeneral", "Gradients", "ArrayWithGradients", "Image", "ArrayWithImage", "Layers", "ArrayWithLayers", "Linear algebra", "ArrayWithLinearAlgebra", "Losses", "ArrayWithLosses", "Manipulation", "ArrayWithManipulation", "Norms", "ArrayWithNorms", "Random", "ArrayWithRandom", "Searching", "ArrayWithSearching", "Set", "ArrayWithSet", "Sorting", "ArrayWithSorting", "Statistical", "ArrayWithStatistical", "Utility", "ArrayWithUtility", "Wrapping", "add_ivy_array_instance_methods", "Backend handler", "&lt;no title&gt;", "choose_random_backend", "clear_backend_stack", "current_backend", "get_backend", "set_backend", "try_import_ivy_jax", "try_import_ivy_mxnet", "try_import_ivy_numpy", "try_import_ivy_tf", "try_import_ivy_torch", "unset_backend", "Background", "ML Explosion", "Standardization", "Why Unify?", "Activations", "ContainerWithActivations", "Base", "ContainerBase", "Container", "Container", "MultiDevContainer", "Container methods", "abs container", "acos container", "acosh container", "adam_update container", "add container", "add_ivy_container_instance_methods container", "all container", "all_equal container", "any container", "argsort container", "asin container", "asinh container", "at_dev container", "at_devs container", "atan container", "atan2 container", "atanh container", "binary_cross_entropy container", "bitwise_and container", "bitwise_invert container", "bitwise_left_shift container", "bitwise_or container", "bitwise_right_shift container", "bitwise_xor container", "can_cast container", "ceil container", "clip container", "clip_vector_norm container", "concat container", "constant_pad container", "cos container", "cosh container", "cross_entropy container", "divide container", "einsum container", "equal container", "erf container", "exp container", "expand_dims container", "expm1 container", "flip container", "floor container", "floor_divide container", "gather_nd container", "gradient_descent_update container", "greater container", "greater_equal container", "isfinite container", "isinf container", "isnan container", "lamb_update container", "lars_update container", "layer_norm container", "less container", "less_equal container", "log container", "log10 container", "log1p container", "log2 container", "logaddexp container", "logical_and container", "logical_not container", "logical_or container", "logical_xor container", "matmul container", "max container", "mean container", "min container", "multiply container", "negative container", "not_equal container", "optimizer_update container", "permute_dims container", "positive container", "pow container", "prod container", "random_uniform container", "remainder container", "repeat container", "reshape container", "roll container", "round container", "sign container", "sin container", "sinh container", "sort container", "sparse_cross_entropy container", "sqrt container", "square container", "squeeze container", "stack container", "static_adam_update container", "static_add container", "static_all_equal container", "static_argsort container", "static_binary_cross_entropy container", "static_can_cast container", "static_clip container", "static_cross_entropy container", "static_divide container", "static_gather_nd container", "static_gradient_descent_update container", "static_lamb_update container", "static_lars_update container", "static_multiply container", "static_optimizer_update container", "static_randint container", "static_random_uniform container", "static_roll container", "static_sort container", "static_sparse_cross_entropy container", "static_subtract container", "static_tan container", "std container", "subtract container", "sum container", "swapaxes container", "tan container", "tanh container", "tile container", "trunc container", "var container", "zero_pad container", "Creation", "ContainerWithCreation", "Data type", "ContainerWithDataTypes", "Device", "ContainerWithDevice", "Elementwise", "ContainerWithElementwise", "General", "ContainerWithGeneral", "Gradients", "ContainerWithGradients", "Image", "ContainerWithImage", "Layers", "ContainerWithLayers", "Linear algebra", "ContainerWithLinearAlgebra", "Losses", "ContainerWithLosses", "Manipulation", "ContainerWithManipulation", "Norms", "ContainerWithNorms", "Random", "ContainerWithRandom", "Searching", "ContainerWithSearching", "Set", "ContainerWithSet", "Sorting", "ContainerWithSorting", "Statistical", "ContainerWithStatistical", "Utility", "ContainerWithUtility", "Wrapping", "add_ivy_container_instance_methods", "Contributing", "Setting Up", "The Basics", "Open Tasks", "Building the Docs", "Deep Dive", "Navigating the Code", "Docstrings", "Docstring Examples", "Array API Tests", "Ivy Tests", "Function Types", "Backend Setting", "Function Wrapping", "Arrays", "Containers", "Data Types", "Devices", "Inplace Updates", "Function Arguments", "Design", "Building Blocks", "Ivy as a Framework", "Ivy Array", "Ivy Container", "Ivy Stateful API", "Ivy as a Transpiler", "Ivy", "Ivy builder", "Ivy ecosystem", "Ivy gym", "Ivy mech", "Ivy memory", "Ivy models", "Ivy robot", "Ivy vision", "Extensions", "Applied Libraries", "FAQ", "Func wrapper", "handle_nestable", "handle_out_argument", "infer_device", "infer_dtype", "inputs_to_ivy_arrays", "inputs_to_native_arrays", "outputs_to_ivy_arrays", "to_native_arrays_and_back", "&lt;no title&gt;", "Activations", "gelu", "leaky_relu", "relu", "sigmoid", "softmax", "softplus", "tanh", "Compilation", "compile", "Constants", "Creation", "arange", "asarray", "empty", "empty_like", "eye", "from_dlpack", "full", "full_like", "linspace", "logspace", "meshgrid", "native_array", "ones", "ones_like", "tril", "triu", "zeros", "zeros_like", "Data type", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "as_ivy_dtype", "as_native_dtype", "astype", "broadcast_arrays", "broadcast_to", "can_cast", "ivy.Array.can_cast", "ivy.Container.can_cast", "ivy.can_cast", "ivy.Container.static_can_cast", "closest_valid_dtype", "default_dtype", "default_float_dtype", "default_int_dtype", "dtype", "dtype_bits", "finfo", "function_supported_dtypes", "function_unsupported_dtypes", "iinfo", "invalid_dtype", "is_float_dtype", "is_int_dtype", "promote_types", "result_type", "set_default_dtype", "set_default_float_dtype", "set_default_int_dtype", "type_promote_arrays", "unset_default_dtype", "unset_default_float_dtype", "unset_default_int_dtype", "valid_dtype", "Device", "&lt;no title&gt;", "DevClonedItem", "DevClonedIter", "DevClonedNest", "DevDistItem", "DevDistIter", "DevDistNest", "&lt;no title&gt;", "DevMapper", "DevMapperMultiProc", "&lt;no title&gt;", "MultiDevItem", "MultiDevIter", "MultiDevNest", "Profiler", "as_ivy_dev", "as_native_dev", "clear_mem_on_dev", "default_device", "dev", "dev_clone", "dev_clone_array", "dev_clone_iter", "dev_clone_nest", "dev_dist", "dev_dist_array", "dev_dist_iter", "dev_dist_nest", "dev_unify", "dev_unify_array", "dev_unify_iter", "dev_unify_nest", "dev_util", "get_all_ivy_arrays_on_dev", "gpu_is_available", "num_cpu_cores", "num_gpus", "num_ivy_arrays_on_dev", "percent_used_mem_on_dev", "print_all_ivy_arrays_on_dev", "set_default_device", "set_split_factor", "split_factor", "split_func_call", "to_device", "total_mem_on_dev", "tpu_is_available", "unset_default_device", "used_mem_on_dev", "Elementwise", "abs", "ivy.Array.abs", "ivy.Container.abs", "ivy.abs", "acos", "ivy.Array.acos", "ivy.Container.acos", "ivy.acos", "acosh", "ivy.Array.acosh", "ivy.Container.acosh", "ivy.acosh", "add", "ivy.Array.add", "ivy.Container.add", "ivy.add", "ivy.Container.static_add", "asin", "ivy.Array.asin", "ivy.Container.asin", "ivy.asin", "asinh", "ivy.Array.asinh", "ivy.Container.asinh", "ivy.asinh", "atan", "ivy.Array.atan", "ivy.Container.atan", "ivy.atan", "atan2", "ivy.Array.atan2", "ivy.Container.atan2", "ivy.atan2", "atanh", "ivy.Array.atanh", "ivy.Container.atanh", "ivy.atanh", "bitwise_and", "ivy.Array.bitwise_and", "ivy.Container.bitwise_and", "ivy.bitwise_and", "bitwise_invert", "ivy.Array.bitwise_invert", "ivy.Container.bitwise_invert", "ivy.bitwise_invert", "bitwise_left_shift", "ivy.Array.bitwise_left_shift", "ivy.Container.bitwise_left_shift", "ivy.bitwise_left_shift", "bitwise_or", "ivy.Array.bitwise_or", "ivy.Container.bitwise_or", "ivy.bitwise_or", "bitwise_right_shift", "ivy.Array.bitwise_right_shift", "ivy.Container.bitwise_right_shift", "ivy.bitwise_right_shift", "bitwise_xor", "ivy.Array.bitwise_xor", "ivy.Container.bitwise_xor", "ivy.bitwise_xor", "ceil", "ivy.Array.ceil", "ivy.Container.ceil", "ivy.ceil", "cos", "ivy.Array.cos", "ivy.Container.cos", "ivy.cos", "cosh", "ivy.Array.cosh", "ivy.Container.cosh", "ivy.cosh", "divide", "ivy.Array.divide", "ivy.Container.divide", "ivy.divide", "ivy.Container.static_divide", "equal", "ivy.Array.equal", "ivy.Container.equal", "ivy.equal", "erf", "ivy.Array.erf", "ivy.Container.erf", "ivy.erf", "exp", "ivy.Array.exp", "ivy.Container.exp", "ivy.exp", "expm1", "ivy.Array.expm1", "ivy.Container.expm1", "ivy.expm1", "floor", "ivy.Array.floor", "ivy.Container.floor", "ivy.floor", "floor_divide", "ivy.Array.floor_divide", "ivy.Container.floor_divide", "ivy.floor_divide", "greater", "ivy.Array.greater", "ivy.Container.greater", "ivy.greater", "greater_equal", "ivy.Array.greater_equal", "ivy.Container.greater_equal", "ivy.greater_equal", "isfinite", "ivy.Array.isfinite", "ivy.Container.isfinite", "ivy.isfinite", "isinf", "ivy.Array.isinf", "ivy.Container.isinf", "ivy.isinf", "isnan", "ivy.Array.isnan", "ivy.Container.isnan", "ivy.isnan", "less", "ivy.Array.less", "ivy.Container.less", "ivy.less", "less_equal", "ivy.Array.less_equal", "ivy.Container.less_equal", "ivy.less_equal", "log", "ivy.Array.log", "ivy.Container.log", "ivy.log", "log10", "ivy.Array.log10", "ivy.Container.log10", "ivy.log10", "log1p", "ivy.Array.log1p", "ivy.Container.log1p", "ivy.log1p", "log2", "ivy.Array.log2", "ivy.Container.log2", "ivy.log2", "logaddexp", "ivy.Array.logaddexp", "ivy.Container.logaddexp", "ivy.logaddexp", "logical_and", "ivy.Array.logical_and", "ivy.Container.logical_and", "ivy.logical_and", "logical_not", "ivy.Array.logical_not", "ivy.Container.logical_not", "ivy.logical_not", "logical_or", "ivy.Array.logical_or", "ivy.Container.logical_or", "ivy.logical_or", "logical_xor", "ivy.Array.logical_xor", "ivy.Container.logical_xor", "ivy.logical_xor", "maximum", "minimum", "multiply", "ivy.Array.multiply", "ivy.Container.multiply", "ivy.multiply", "ivy.Container.static_multiply", "negative", "ivy.Array.negative", "ivy.Container.negative", "ivy.negative", "not_equal", "ivy.Array.not_equal", "ivy.Container.not_equal", "ivy.not_equal", "positive", "ivy.Array.positive", "ivy.Container.positive", "ivy.positive", "pow", "ivy.Array.pow", "ivy.Container.pow", "ivy.pow", "remainder", "ivy.Array.remainder", "ivy.Container.remainder", "ivy.remainder", "round", "ivy.Array.round", "ivy.Container.round", "ivy.round", "sign", "ivy.Array.sign", "ivy.Container.sign", "ivy.sign", "sin", "ivy.Array.sin", "ivy.Container.sin", "ivy.sin", "sinh", "ivy.Array.sinh", "ivy.Container.sinh", "ivy.sinh", "sqrt", "ivy.Array.sqrt", "ivy.Container.sqrt", "ivy.sqrt", "square", "ivy.Array.square", "ivy.Container.square", "ivy.square", "subtract", "ivy.Container.static_subtract", "ivy.Array.subtract", "ivy.Container.subtract", "ivy.subtract", "tan", "ivy.Container.static_tan", "ivy.Array.tan", "ivy.Container.tan", "ivy.tan", "tanh", "ivy.Array.tanh", "ivy.Container.tanh", "ivy.tanh", "trunc", "ivy.Array.trunc", "ivy.Container.trunc", "ivy.trunc", "General", "all_equal", "ivy.Array.all_equal", "ivy.Container.all_equal", "ivy.all_equal", "ivy.Container.static_all_equal", "arg_info", "arg_names", "array_equal", "arrays_equal", "assert_supports_inplace", "cache_fn", "clip_matrix_norm", "clip_vector_norm", "ivy.Container.clip_vector_norm", "ivy.clip_vector_norm", "container_types", "copy_array", "cumprod", "cumsum", "current_backend_str", "default", "einops_rearrange", "einops_reduce", "einops_repeat", "exists", "floormod", "fourier_encode", "gather", "gather_nd", "ivy.Array.gather_nd", "ivy.Container.gather_nd", "ivy.gather_nd", "ivy.Container.static_gather_nd", "get_all_arrays_in_memory", "get_min_base", "get_min_denominator", "get_num_dims", "get_referrers_recursive", "has_nans", "indices_where", "inplace_arrays_supported", "inplace_decrement", "inplace_increment", "inplace_update", "inplace_variables_supported", "is_array", "is_ivy_array", "is_ivy_container", "is_native_array", "match_kwargs", "multiprocessing", "num_arrays_in_memory", "one_hot", "print_all_arrays_in_memory", "queue_timeout", "scatter_flat", "scatter_nd", "set_min_base", "set_min_denominator", "set_queue_timeout", "set_tmp_dir", "shape", "shape_to_tuple", "stable_divide", "stable_pow", "supports_inplace", "tmp_dir", "to_list", "to_numpy", "to_scalar", "try_else_none", "unstack", "value_is_nan", "Gradients", "&lt;no title&gt;", "adam_step", "adam_update", "ivy.Container.adam_update", "ivy.adam_update", "ivy.Container.static_adam_update", "execute_with_gradients", "gradient_descent_update", "ivy.Container.gradient_descent_update", "ivy.gradient_descent_update", "ivy.Container.static_gradient_descent_update", "is_variable", "lamb_update", "ivy.Container.lamb_update", "ivy.lamb_update", "ivy.Container.static_lamb_update", "lars_update", "ivy.Container.lars_update", "ivy.lars_update", "ivy.Container.static_lars_update", "optimizer_update", "ivy.Container.optimizer_update", "ivy.optimizer_update", "ivy.Container.static_optimizer_update", "set_with_grads", "stop_gradient", "unset_with_grads", "variable", "variable_data", "with_grads", "Layers", "conv1d", "conv1d_transpose", "conv2d", "conv2d_transpose", "conv3d", "conv3d_transpose", "depthwise_conv2d", "dropout", "linear", "lstm_update", "multi_head_attention", "scaled_dot_product_attention", "Linear algebra", "cholesky", "ivy.Array.cholesky", "ivy.cholesky", "cross", "ivy.Array.cross", "ivy.cross", "det", "ivy.Array.det", "ivy.det", "diagonal", "ivy.Array.diagonal", "ivy.diagonal", "eigh", "ivy.Array.eigh", "ivy.eigh", "eigvalsh", "ivy.Array.eigvalsh", "ivy.eigvalsh", "inv", "ivy.Array.inv", "ivy.inv", "matmul", "ivy.Array.matmul", "ivy.Container.matmul", "ivy.matmul", "matrix_norm", "ivy.Array.matrix_norm", "ivy.matrix_norm", "matrix_power", "matrix_rank", "ivy.Array.matrix_rank", "ivy.matrix_rank", "matrix_transpose", "ivy.Array.matrix_transpose", "ivy.matrix_transpose", "outer", "ivy.Array.outer", "ivy.outer", "pinv", "ivy.Array.pinv", "ivy.pinv", "qr", "ivy.Array.qr", "ivy.qr", "slogdet", "solve", "ivy.Array.solve", "ivy.solve", "svd", "ivy.Array.svd", "ivy.svd", "svdvals", "ivy.Array.svdvals", "ivy.svdvals", "tensordot", "ivy.Array.tensordot", "ivy.tensordot", "trace", "ivy.Array.trace", "ivy.trace", "vecdot", "ivy.Array.vecdot", "ivy.vecdot", "vector_norm", "ivy.Array.vector_norm", "ivy.vector_norm", "vector_to_skew_symmetric_matrix", "ivy.Array.vector_to_skew_symmetric_matrix", "ivy.vector_to_skew_symmetric_matrix", "Losses", "binary_cross_entropy", "ivy.Array.binary_cross_entropy", "ivy.Container.binary_cross_entropy", "ivy.binary_cross_entropy", "ivy.Container.static_binary_cross_entropy", "cross_entropy", "ivy.Array.cross_entropy", "ivy.Container.cross_entropy", "ivy.cross_entropy", "ivy.Container.static_cross_entropy", "sparse_cross_entropy", "ivy.Array.sparse_cross_entropy", "ivy.Container.sparse_cross_entropy", "ivy.sparse_cross_entropy", "ivy.Container.static_sparse_cross_entropy", "Manipulation", "clip", "ivy.Array.clip", "ivy.Container.clip", "ivy.clip", "ivy.Container.static_clip", "concat", "ivy.Array.concat", "ivy.Container.concat", "ivy.concat", "constant_pad", "ivy.Array.constant_pad", "ivy.Container.constant_pad", "ivy.constant_pad", "expand_dims", "ivy.Array.expand_dims", "ivy.Container.expand_dims", "ivy.expand_dims", "flip", "ivy.Array.flip", "ivy.Container.flip", "ivy.flip", "permute_dims", "ivy.Array.permute_dims", "ivy.Container.permute_dims", "ivy.permute_dims", "repeat", "ivy.Array.repeat", "ivy.Container.repeat", "ivy.repeat", "reshape", "ivy.Array.reshape", "ivy.Container.reshape", "ivy.reshape", "roll", "ivy.Array.roll", "ivy.Container.roll", "ivy.roll", "ivy.Container.static_roll", "split", "squeeze", "ivy.Array.squeeze", "ivy.Container.squeeze", "ivy.squeeze", "stack", "ivy.Array.stack", "ivy.Container.stack", "ivy.stack", "swapaxes", "ivy.Array.swapaxes", "ivy.Container.swapaxes", "ivy.swapaxes", "tile", "ivy.Array.tile", "ivy.Container.tile", "ivy.tile", "zero_pad", "ivy.Array.zero_pad", "ivy.Container.zero_pad", "ivy.zero_pad", "Meta", "fomaml_step", "maml_step", "reptile_step", "Nest", "all_nested_indices", "copy_nest", "index_nest", "insert_into_nest_at_index", "insert_into_nest_at_indices", "map", "map_nest_at_index", "map_nest_at_indices", "multi_index_nest", "nested_any", "nested_indices_where", "nested_map", "nested_multi_map", "prune_nest_at_index", "prune_nest_at_indices", "set_nest_at_index", "set_nest_at_indices", "Norms", "layer_norm", "ivy.Array.layer_norm", "ivy.Container.layer_norm", "ivy.layer_norm", "Random", "multinomial", "randint", "ivy.randint", "ivy.Container.static_randint", "random_normal", "random_uniform", "ivy.Container.random_uniform", "ivy.random_uniform", "ivy.Container.static_random_uniform", "seed", "shuffle", "Searching", "argmax", "argmin", "nonzero", "where", "Set", "unique_all", "unique_counts", "unique_inverse", "unique_values", "Sorting", "argsort", "ivy.Array.argsort", "ivy.Container.argsort", "ivy.argsort", "ivy.Container.static_argsort", "sort", "ivy.Array.sort", "ivy.Container.sort", "ivy.sort", "ivy.Container.static_sort", "Statistical", "einsum", "ivy.Array.einsum", "ivy.Container.einsum", "ivy.einsum", "max", "ivy.Array.max", "ivy.Container.max", "ivy.max", "mean", "ivy.Array.mean", "ivy.Container.mean", "ivy.mean", "min", "ivy.Array.min", "ivy.Container.min", "ivy.min", "prod", "ivy.Array.prod", "ivy.Container.prod", "ivy.prod", "std", "ivy.Array.std", "ivy.Container.std", "ivy.std", "sum", "ivy.Array.sum", "ivy.Container.sum", "ivy.sum", "var", "ivy.Array.var", "ivy.Container.var", "ivy.var", "Utility", "all", "ivy.Array.all", "ivy.Container.all", "ivy.all", "any", "ivy.Array.any", "ivy.Container.any", "ivy.any", "Contents", "&lt;no title&gt;", "&lt;no title&gt;", "Inspection", "add_array_specs", "fn_array_spec", "Roadmap", "Activations", "GEGLU", "GELU", "Converters", "to_ivy_module", "Initializers", "&lt;no title&gt;", "FirstLayerSiren", "GlorotUniform", "&lt;no title&gt;", "Ones", "Siren", "&lt;no title&gt;", "Zeros", "Layers", "Conv1D", "Conv1DTranspose", "Conv2D", "Conv2DTranspose", "Conv3D", "Conv3DTranspose", "DepthwiseConv2D", "Dropout", "LSTM", "Linear", "MultiHeadAttention", "Module", "Module", "Norms", "LayerNorm", "Optimizers", "Adam", "LAMB", "LARS", "Optimizer", "SGD", "Sequential", "Sequential", "&lt;no title&gt;", "Verbosity", "cprint"], "terms": {"class": [0, 1, 2, 7, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 165, 171, 176, 177, 178, 179, 180, 181, 182, 183, 189, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 348, 349, 352, 353, 355, 359, 360, 361, 362, 364, 366, 367, 369, 370, 371, 381, 382, 383, 424, 447, 461, 463, 464, 465, 466, 467, 468, 470, 471, 473, 474, 475, 476, 747, 754, 791, 797, 816, 821, 850, 1015, 1017, 1027, 1050, 1053, 1113, 1120, 1121, 1122, 1123, 1124, 1125, 1127, 1128, 1130, 1131, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157], "ivi": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 347, 348, 349, 350, 352, 354, 356, 357, 358, 360, 361, 362, 363, 364, 365, 381, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 428, 429, 430, 431, 432, 433, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 463, 464, 465, 466, 467, 468, 470, 471, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 516, 520, 524, 529, 533, 537, 541, 545, 549, 553, 557, 561, 565, 569, 573, 577, 581, 585, 590, 594, 598, 602, 606, 610, 614, 618, 622, 626, 630, 634, 638, 642, 646, 650, 654, 658, 662, 666, 670, 674, 678, 679, 680, 685, 689, 693, 697, 701, 705, 709, 713, 717, 721, 725, 729, 734, 739, 743, 747, 748, 753, 754, 755, 756, 757, 758, 759, 760, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 823, 824, 828, 829, 833, 834, 838, 842, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 869, 872, 875, 878, 881, 884, 887, 891, 894, 895, 898, 901, 904, 907, 910, 911, 914, 917, 920, 923, 926, 929, 932, 935, 936, 941, 946, 951, 952, 957, 961, 965, 969, 973, 977, 981, 985, 990, 991, 995, 999, 1003, 1007, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1038, 1039, 1040, 1043, 1044, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1066, 1071, 1072, 1076, 1080, 1084, 1088, 1092, 1096, 1100, 1104, 1105, 1109, 1113, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1127, 1128, 1130, 1131, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1159, 1160], "arrai": [0, 1, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 163, 178, 179, 180, 181, 182, 183, 188, 191, 208, 209, 210, 225, 227, 264, 276, 277, 280, 281, 284, 290, 292, 296, 301, 309, 310, 313, 314, 315, 316, 327, 328, 331, 332, 346, 347, 348, 350, 351, 352, 353, 355, 356, 357, 358, 360, 361, 362, 363, 365, 366, 367, 369, 370, 371, 383, 384, 392, 394, 395, 396, 397, 398, 399, 400, 401, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 430, 431, 432, 433, 435, 436, 437, 442, 444, 447, 449, 450, 452, 456, 461, 480, 481, 482, 483, 486, 487, 488, 489, 490, 491, 492, 493, 495, 499, 501, 505, 506, 511, 512, 515, 516, 519, 520, 523, 524, 526, 527, 528, 529, 532, 533, 536, 537, 540, 541, 544, 545, 548, 549, 552, 553, 556, 557, 560, 561, 564, 565, 568, 569, 572, 573, 575, 576, 577, 580, 581, 584, 585, 588, 590, 593, 594, 597, 598, 601, 602, 605, 606, 608, 609, 610, 613, 614, 617, 618, 621, 622, 625, 626, 629, 630, 633, 634, 637, 638, 641, 642, 645, 646, 649, 650, 653, 654, 657, 658, 661, 662, 665, 666, 669, 670, 673, 674, 677, 678, 679, 680, 683, 685, 688, 689, 692, 693, 696, 697, 700, 701, 704, 705, 708, 709, 712, 713, 716, 717, 720, 721, 724, 725, 728, 729, 733, 734, 735, 737, 738, 739, 742, 743, 746, 747, 748, 750, 751, 752, 755, 756, 757, 759, 760, 762, 764, 765, 766, 769, 770, 771, 772, 773, 774, 775, 776, 778, 779, 780, 781, 784, 786, 787, 788, 789, 790, 791, 793, 794, 796, 799, 800, 801, 803, 804, 809, 810, 813, 815, 816, 817, 819, 820, 821, 823, 824, 826, 829, 831, 833, 834, 836, 838, 840, 842, 844, 847, 849, 850, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 868, 869, 871, 872, 874, 875, 877, 878, 880, 881, 883, 884, 886, 887, 890, 891, 893, 894, 895, 897, 898, 900, 901, 903, 904, 906, 907, 909, 910, 911, 913, 914, 916, 917, 919, 920, 922, 923, 925, 926, 928, 929, 931, 932, 934, 935, 936, 939, 941, 944, 946, 949, 951, 952, 954, 955, 956, 957, 960, 961, 964, 965, 968, 969, 972, 973, 976, 977, 980, 981, 984, 985, 987, 988, 989, 990, 991, 994, 995, 998, 999, 1002, 1003, 1006, 1007, 1010, 1011, 1012, 1013, 1014, 1015, 1017, 1027, 1028, 1033, 1034, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1046, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1064, 1066, 1069, 1071, 1072, 1075, 1076, 1079, 1080, 1083, 1084, 1087, 1088, 1091, 1092, 1095, 1096, 1099, 1100, 1103, 1104, 1105, 1108, 1109, 1112, 1113, 1116, 1118, 1134, 1142, 1145], "arraywithactiv": 0, "sourc": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 349, 359, 360, 384, 385, 386, 387, 388, 389, 390, 391, 392, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 463, 464, 465, 466, 467, 468, 470, 471, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1116, 1117, 1118, 1120, 1121, 1122, 1123, 1124, 1125, 1127, 1128, 1130, 1131, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1159, 1160], "base": [0, 1, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 159, 176, 177, 179, 180, 181, 182, 183, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 347, 355, 358, 360, 366, 382, 405, 415, 424, 461, 463, 464, 465, 466, 467, 468, 470, 471, 473, 474, 475, 476, 511, 598, 642, 645, 646, 649, 650, 653, 654, 657, 697, 700, 747, 782, 805, 812, 821, 1055, 1056, 1057, 1059, 1071, 1072, 1075, 1099, 1120, 1121, 1122, 1125, 1127, 1128, 1130, 1131, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157], "abc": [0, 1, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 178, 179, 368, 461, 470, 476, 747, 772, 1146, 1147, 1150, 1154], "activ": [1, 2, 7, 157, 158, 177, 183, 189, 343, 344, 346, 347, 349, 351, 370, 395, 396, 397, 398, 399, 400, 401, 1113, 1121, 1122], "support": [1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 117, 118, 119, 120, 122, 124, 126, 128, 130, 132, 134, 136, 138, 140, 142, 144, 146, 148, 150, 152, 154, 156, 158, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 173, 174, 175, 177, 178, 179, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 308, 310, 312, 314, 316, 318, 320, 322, 324, 326, 328, 330, 332, 334, 336, 338, 340, 342, 344, 352, 353, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 368, 369, 371, 385, 386, 387, 388, 389, 390, 391, 392, 395, 396, 397, 398, 399, 400, 401, 403, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1012, 1013, 1014, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1034, 1035, 1036, 1037, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1051, 1052, 1053, 1054, 1056, 1057, 1058, 1059, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1117, 1118, 1119, 1121, 1122, 1124, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1147, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1157, 1158, 1160], "framework": [1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 122, 124, 126, 128, 130, 132, 134, 136, 138, 140, 142, 144, 146, 148, 150, 152, 154, 156, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 173, 174, 175, 177, 178, 179, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 308, 310, 312, 314, 316, 318, 320, 322, 324, 326, 328, 330, 332, 334, 336, 338, 340, 342, 344, 350, 354, 356, 357, 358, 359, 362, 364, 365, 368, 371, 382, 383, 385, 386, 387, 388, 389, 390, 391, 392, 395, 396, 397, 398, 399, 400, 401, 402, 403, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1012, 1013, 1014, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1034, 1035, 1036, 1037, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1051, 1052, 1053, 1054, 1056, 1057, 1058, 1059, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1117, 1118, 1119, 1121, 1122, 1123, 1124, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1147, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1157, 1158, 1160], "array_method": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 433, 434, 512, 513, 517, 520, 521, 525, 529, 530, 533, 534, 538, 541, 542, 545, 546, 549, 550, 553, 554, 557, 558, 561, 562, 565, 566, 569, 570, 573, 574, 578, 582, 586, 591, 594, 595, 599, 602, 603, 607, 610, 611, 615, 618, 619, 622, 623, 626, 627, 630, 631, 634, 635, 638, 639, 642, 643, 646, 647, 650, 651, 654, 655, 658, 659, 662, 663, 666, 667, 670, 671, 674, 675, 680, 681, 685, 686, 689, 690, 693, 694, 697, 698, 701, 702, 705, 706, 709, 710, 713, 714, 717, 718, 721, 722, 725, 726, 729, 731, 736, 740, 743, 744, 748, 749, 776, 777, 866, 867, 869, 870, 873, 875, 876, 878, 879, 881, 882, 885, 886, 887, 888, 891, 892, 895, 896, 898, 899, 901, 902, 904, 905, 907, 908, 910, 911, 912, 915, 916, 917, 918, 920, 921, 923, 924, 926, 927, 929, 930, 932, 933, 936, 937, 941, 942, 946, 947, 952, 953, 957, 958, 961, 962, 965, 966, 969, 970, 973, 974, 977, 978, 981, 982, 985, 986, 991, 992, 995, 996, 999, 1000, 1003, 1004, 1007, 1008, 1034, 1035, 1061, 1062, 1066, 1067, 1072, 1073, 1076, 1077, 1080, 1081, 1084, 1085, 1088, 1089, 1092, 1093, 1097, 1100, 1101, 1105, 1106, 1109, 1110], "ab": [2, 127, 128, 183, 313, 314, 355, 358, 511, 697, 700, 865, 929, 931, 1113], "self": [2, 3, 4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 178, 179, 183, 184, 185, 186, 187, 188, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 359, 360, 366, 368, 369, 370, 371, 433, 434, 435, 461, 512, 513, 514, 517, 518, 519, 520, 521, 522, 525, 526, 527, 529, 530, 531, 533, 534, 535, 538, 539, 540, 541, 542, 543, 545, 546, 547, 549, 550, 551, 553, 554, 555, 557, 558, 559, 561, 562, 563, 565, 566, 567, 569, 570, 571, 573, 574, 575, 578, 579, 580, 582, 583, 584, 586, 587, 588, 591, 592, 593, 594, 595, 596, 599, 600, 601, 602, 603, 604, 607, 608, 609, 610, 611, 612, 615, 616, 617, 618, 619, 620, 622, 623, 624, 626, 627, 628, 630, 631, 632, 634, 635, 636, 638, 639, 640, 642, 643, 644, 646, 647, 648, 650, 651, 652, 654, 655, 656, 658, 659, 660, 662, 663, 664, 666, 667, 668, 670, 671, 672, 674, 675, 676, 680, 681, 682, 685, 686, 687, 689, 690, 691, 693, 694, 695, 697, 698, 699, 701, 702, 703, 705, 706, 707, 709, 710, 711, 713, 714, 715, 717, 718, 719, 721, 722, 723, 725, 726, 727, 729, 731, 732, 736, 737, 738, 740, 741, 742, 743, 744, 745, 748, 749, 750, 760, 761, 776, 777, 778, 824, 825, 829, 830, 834, 835, 838, 839, 842, 843, 866, 867, 869, 870, 873, 875, 876, 878, 879, 881, 882, 885, 886, 887, 888, 889, 891, 892, 895, 896, 898, 899, 901, 902, 904, 905, 907, 908, 910, 911, 912, 915, 916, 917, 918, 920, 921, 923, 924, 926, 927, 929, 930, 932, 933, 936, 937, 938, 941, 942, 943, 946, 947, 948, 952, 953, 954, 957, 958, 959, 961, 962, 963, 965, 966, 967, 969, 970, 971, 973, 974, 975, 977, 978, 979, 981, 982, 983, 985, 986, 987, 991, 992, 993, 995, 996, 997, 999, 1000, 1001, 1003, 1004, 1005, 1007, 1008, 1009, 1034, 1035, 1036, 1044, 1045, 1061, 1062, 1063, 1066, 1067, 1068, 1072, 1073, 1074, 1076, 1077, 1078, 1080, 1081, 1082, 1084, 1085, 1086, 1088, 1089, 1090, 1092, 1093, 1094, 1097, 1098, 1099, 1100, 1101, 1102, 1105, 1106, 1107, 1109, 1110, 1111, 1113, 1150, 1154], "out": [2, 3, 4, 5, 6, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 127, 128, 129, 130, 137, 138, 139, 140, 141, 142, 143, 144, 151, 152, 153, 154, 155, 156, 173, 174, 175, 178, 179, 180, 181, 183, 184, 185, 186, 188, 190, 192, 193, 194, 195, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 230, 231, 232, 233, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 276, 278, 279, 281, 282, 283, 284, 288, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 313, 314, 315, 316, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 337, 338, 339, 340, 341, 342, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 365, 366, 368, 369, 370, 371, 382, 394, 396, 397, 398, 399, 400, 401, 405, 406, 408, 409, 410, 412, 413, 418, 419, 420, 421, 422, 423, 424, 430, 432, 461, 506, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 759, 760, 761, 762, 764, 765, 766, 769, 770, 771, 773, 775, 776, 777, 778, 779, 780, 787, 800, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1049, 1050, 1051, 1052, 1054, 1055, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1134, 1142], "none": [2, 3, 4, 5, 6, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 127, 128, 129, 130, 137, 138, 139, 140, 141, 142, 143, 144, 151, 152, 153, 154, 155, 156, 159, 161, 164, 171, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 190, 191, 192, 193, 194, 195, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 351, 353, 356, 360, 361, 362, 363, 364, 366, 368, 370, 371, 394, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 412, 413, 414, 415, 417, 418, 419, 420, 421, 422, 423, 424, 430, 432, 433, 435, 437, 439, 440, 441, 444, 447, 461, 470, 471, 479, 480, 503, 504, 505, 506, 509, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 750, 752, 753, 759, 760, 761, 762, 764, 765, 766, 768, 769, 770, 771, 772, 773, 775, 776, 777, 778, 779, 780, 785, 787, 788, 792, 798, 800, 803, 804, 805, 806, 811, 812, 818, 821, 824, 825, 826, 827, 829, 830, 831, 832, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1021, 1026, 1027, 1028, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1054, 1055, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1123, 1124, 1125, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157], "instanc": [2, 3, 6, 7, 9, 24, 25, 27, 46, 48, 87, 105, 116, 117, 118, 119, 120, 123, 124, 127, 128, 129, 130, 141, 142, 157, 158, 178, 179, 180, 181, 183, 188, 189, 191, 208, 209, 210, 225, 227, 264, 301, 309, 310, 313, 314, 315, 316, 327, 328, 343, 344, 348, 352, 353, 355, 356, 359, 361, 363, 364, 369, 370, 371, 384, 392, 394, 396, 397, 398, 399, 400, 401, 405, 416, 424, 433, 434, 435, 436, 461, 470, 502, 511, 512, 513, 524, 525, 526, 529, 532, 540, 545, 549, 552, 569, 572, 573, 574, 575, 576, 581, 593, 606, 607, 608, 610, 617, 618, 621, 658, 678, 679, 685, 688, 689, 692, 705, 708, 721, 724, 725, 728, 734, 736, 737, 742, 747, 748, 749, 750, 764, 775, 776, 777, 778, 791, 815, 817, 852, 855, 858, 864, 865, 866, 868, 869, 871, 872, 935, 936, 939, 951, 952, 953, 954, 965, 968, 969, 972, 977, 980, 985, 986, 987, 988, 990, 999, 1002, 1033, 1034, 1037, 1038, 1043, 1044, 1046, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1060, 1061, 1064, 1071, 1072, 1075, 1076, 1079, 1099, 1104, 1105, 1108, 1123, 1124], "variant": [2, 3, 6, 9, 24, 25, 27, 46, 48, 87, 105, 123, 124, 127, 128, 129, 130, 141, 142, 183, 188, 191, 208, 209, 210, 225, 227, 264, 276, 277, 280, 281, 284, 290, 292, 296, 301, 309, 310, 313, 314, 315, 316, 327, 328, 331, 332, 352, 353, 433, 434, 435, 437, 512, 513, 525, 526, 528, 540, 545, 573, 574, 575, 607, 608, 610, 658, 735, 736, 737, 742, 748, 749, 750, 752, 776, 777, 778, 780, 952, 953, 954, 956, 985, 986, 987, 989, 1040, 1042], "thi": [2, 3, 6, 9, 24, 25, 27, 46, 48, 87, 105, 123, 124, 127, 128, 129, 130, 141, 142, 173, 174, 175, 178, 179, 180, 181, 182, 183, 188, 191, 208, 209, 210, 225, 227, 264, 276, 277, 280, 281, 284, 290, 292, 296, 301, 309, 310, 313, 314, 315, 316, 327, 328, 331, 332, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 382, 383, 405, 406, 407, 416, 417, 424, 433, 434, 435, 436, 437, 461, 485, 489, 493, 500, 505, 510, 511, 512, 513, 515, 524, 525, 526, 528, 529, 532, 540, 545, 549, 552, 565, 568, 569, 572, 573, 574, 575, 576, 581, 602, 605, 606, 607, 608, 610, 658, 666, 669, 670, 673, 689, 692, 701, 704, 705, 708, 721, 724, 725, 728, 734, 735, 736, 737, 742, 747, 748, 749, 750, 752, 774, 775, 776, 777, 778, 780, 791, 802, 807, 821, 824, 826, 829, 831, 833, 834, 836, 838, 840, 842, 844, 850, 852, 855, 861, 864, 865, 872, 874, 891, 893, 910, 951, 952, 953, 954, 956, 965, 968, 969, 972, 981, 984, 985, 986, 987, 988, 989, 995, 998, 1015, 1021, 1027, 1028, 1033, 1034, 1037, 1040, 1042, 1050, 1051, 1055, 1056, 1057, 1059, 1060, 1061, 1064, 1071, 1076, 1079, 1080, 1083, 1092, 1095, 1100, 1103, 1104, 1105, 1108, 1113, 1119, 1146, 1147, 1150, 1151, 1152, 1153, 1154, 1155], "simpli": [2, 3, 6, 9, 24, 25, 27, 46, 48, 87, 105, 123, 124, 127, 128, 129, 130, 141, 142, 178, 179, 183, 188, 191, 208, 209, 210, 225, 227, 264, 276, 277, 280, 281, 284, 290, 292, 296, 301, 309, 310, 313, 314, 315, 316, 327, 328, 331, 332, 347, 352, 353, 355, 356, 359, 360, 362, 363, 364, 366, 370, 371, 433, 434, 435, 437, 511, 512, 513, 525, 526, 528, 540, 545, 573, 574, 575, 602, 605, 607, 608, 610, 658, 735, 736, 737, 742, 748, 749, 750, 752, 776, 777, 778, 780, 952, 953, 954, 956, 985, 986, 987, 989, 1040, 1042], "wrap": [2, 3, 6, 9, 24, 25, 27, 46, 48, 87, 105, 116, 123, 124, 127, 128, 129, 130, 141, 142, 158, 178, 179, 180, 181, 182, 183, 188, 191, 208, 209, 210, 225, 227, 264, 276, 277, 280, 281, 284, 290, 292, 296, 301, 309, 310, 313, 314, 315, 316, 327, 328, 331, 332, 344, 350, 352, 355, 356, 357, 359, 360, 361, 362, 363, 364, 366, 368, 371, 383, 384, 392, 433, 434, 435, 437, 512, 513, 525, 526, 528, 540, 545, 573, 574, 575, 607, 608, 610, 658, 735, 736, 737, 742, 747, 748, 749, 750, 752, 758, 776, 777, 778, 780, 821, 850, 952, 953, 954, 956, 985, 986, 987, 989, 1040, 1042], "function": [2, 3, 6, 7, 9, 24, 25, 27, 46, 48, 87, 105, 116, 123, 124, 127, 128, 129, 130, 141, 142, 157, 158, 159, 163, 164, 165, 173, 178, 179, 183, 188, 189, 191, 208, 209, 210, 225, 227, 264, 276, 277, 280, 281, 284, 290, 292, 296, 301, 309, 310, 313, 314, 315, 316, 327, 328, 331, 332, 343, 344, 347, 349, 350, 351, 352, 353, 354, 355, 357, 359, 363, 365, 367, 368, 369, 370, 381, 382, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 463, 464, 465, 466, 467, 468, 470, 471, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 515, 516, 519, 520, 523, 524, 525, 526, 527, 528, 529, 532, 533, 536, 537, 540, 541, 544, 545, 548, 549, 552, 553, 556, 557, 560, 561, 564, 565, 568, 569, 572, 573, 574, 575, 576, 577, 580, 581, 584, 585, 588, 590, 593, 594, 597, 598, 601, 602, 605, 606, 607, 608, 609, 610, 613, 614, 617, 618, 621, 622, 625, 626, 629, 630, 633, 634, 637, 638, 641, 642, 645, 646, 649, 650, 653, 654, 657, 658, 661, 662, 665, 666, 669, 670, 673, 674, 677, 678, 679, 680, 683, 685, 688, 689, 692, 693, 696, 697, 700, 701, 704, 705, 708, 709, 712, 713, 716, 717, 720, 721, 724, 725, 728, 729, 733, 734, 735, 736, 737, 738, 739, 742, 743, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 823, 824, 826, 828, 829, 831, 833, 834, 836, 838, 840, 842, 844, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 868, 869, 871, 872, 874, 875, 877, 878, 880, 881, 883, 884, 886, 887, 890, 891, 893, 894, 895, 897, 898, 900, 901, 903, 904, 906, 907, 909, 910, 911, 913, 914, 916, 917, 919, 920, 922, 923, 925, 926, 928, 929, 931, 932, 934, 935, 936, 939, 941, 944, 946, 949, 951, 952, 953, 954, 955, 956, 957, 960, 961, 964, 965, 968, 969, 972, 973, 976, 977, 980, 981, 984, 985, 986, 987, 988, 989, 990, 991, 994, 995, 998, 999, 1002, 1003, 1006, 1007, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1046, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1064, 1066, 1069, 1071, 1072, 1075, 1076, 1079, 1080, 1083, 1084, 1087, 1088, 1091, 1092, 1095, 1096, 1099, 1100, 1103, 1104, 1105, 1108, 1109, 1112, 1113, 1116, 1118, 1120, 1121, 1122, 1150, 1153, 1155], "so": [2, 3, 6, 9, 24, 25, 27, 46, 48, 87, 105, 116, 119, 120, 123, 124, 127, 128, 129, 130, 141, 142, 173, 174, 178, 179, 183, 188, 191, 208, 209, 210, 225, 227, 264, 276, 277, 280, 281, 284, 290, 292, 296, 301, 309, 310, 313, 314, 315, 316, 327, 328, 331, 332, 346, 347, 351, 352, 353, 355, 358, 359, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 383, 384, 392, 433, 434, 435, 437, 512, 513, 525, 526, 528, 540, 545, 573, 574, 575, 607, 608, 610, 658, 735, 736, 737, 742, 748, 749, 750, 752, 776, 777, 778, 780, 952, 953, 954, 956, 985, 986, 987, 989, 1015, 1016, 1026, 1040, 1042, 1113], "docstr": [2, 3, 6, 9, 24, 25, 27, 46, 48, 87, 105, 123, 124, 127, 128, 129, 130, 141, 142, 183, 188, 191, 208, 209, 210, 225, 227, 264, 276, 277, 280, 281, 284, 290, 292, 296, 301, 309, 310, 313, 314, 315, 316, 327, 328, 331, 332, 348, 349, 350, 351, 356, 360, 364, 405, 416, 424, 433, 434, 435, 436, 437, 511, 512, 513, 524, 525, 526, 528, 529, 532, 540, 545, 549, 552, 569, 572, 573, 574, 575, 576, 581, 606, 607, 608, 610, 658, 689, 692, 705, 708, 721, 724, 725, 728, 734, 735, 736, 737, 742, 748, 749, 750, 752, 776, 777, 778, 780, 865, 872, 951, 952, 953, 954, 956, 965, 968, 969, 972, 985, 986, 987, 988, 989, 1040, 1042, 1055, 1056, 1057, 1060, 1061, 1064, 1071, 1076, 1079, 1104, 1105, 1108], "also": [2, 3, 6, 9, 24, 25, 27, 46, 48, 87, 105, 116, 117, 118, 119, 120, 123, 124, 127, 128, 129, 130, 141, 142, 173, 174, 178, 179, 183, 188, 191, 208, 209, 210, 225, 227, 264, 276, 277, 280, 281, 284, 290, 292, 296, 301, 309, 310, 313, 314, 315, 316, 327, 328, 331, 332, 345, 346, 347, 350, 351, 352, 353, 355, 356, 358, 359, 360, 361, 362, 363, 364, 366, 368, 369, 370, 371, 382, 383, 405, 416, 424, 433, 434, 435, 436, 437, 511, 512, 513, 524, 525, 526, 528, 529, 532, 540, 545, 549, 552, 569, 572, 573, 574, 575, 576, 581, 606, 607, 608, 610, 658, 689, 692, 705, 708, 721, 724, 725, 728, 734, 735, 736, 737, 742, 747, 748, 749, 750, 752, 775, 776, 777, 778, 780, 791, 821, 824, 826, 852, 855, 861, 864, 865, 872, 951, 952, 953, 954, 956, 965, 968, 969, 972, 985, 986, 987, 988, 989, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1025, 1026, 1027, 1033, 1034, 1037, 1040, 1042, 1055, 1056, 1057, 1060, 1061, 1064, 1071, 1076, 1079, 1104, 1105, 1108, 1134, 1144], "appli": [2, 3, 6, 9, 24, 25, 27, 46, 48, 87, 105, 116, 119, 120, 123, 124, 127, 128, 129, 130, 141, 142, 178, 179, 183, 188, 191, 208, 209, 210, 225, 227, 264, 276, 277, 280, 281, 284, 290, 292, 296, 301, 309, 310, 313, 314, 315, 316, 327, 328, 331, 332, 346, 347, 348, 352, 353, 355, 356, 358, 360, 361, 362, 363, 364, 366, 368, 369, 370, 371, 381, 383, 394, 395, 396, 397, 398, 399, 400, 401, 424, 433, 434, 435, 437, 452, 512, 513, 525, 526, 528, 540, 545, 573, 574, 575, 607, 608, 610, 658, 735, 736, 737, 742, 747, 748, 749, 750, 752, 769, 770, 771, 776, 777, 778, 780, 821, 834, 836, 838, 840, 852, 861, 863, 864, 865, 886, 895, 897, 904, 906, 935, 936, 939, 941, 944, 946, 949, 951, 952, 953, 954, 956, 985, 986, 987, 989, 995, 998, 1011, 1012, 1013, 1015, 1021, 1024, 1027, 1028, 1033, 1034, 1037, 1040, 1042, 1113, 1120, 1121, 1122, 1148, 1149], "minim": [2, 3, 6, 9, 24, 25, 27, 46, 48, 87, 105, 123, 124, 127, 128, 129, 130, 141, 142, 183, 188, 191, 208, 209, 210, 225, 227, 264, 276, 277, 280, 281, 284, 290, 292, 296, 301, 309, 310, 313, 314, 315, 316, 327, 328, 331, 332, 352, 363, 366, 433, 434, 435, 437, 512, 513, 525, 526, 528, 540, 545, 573, 574, 575, 607, 608, 610, 658, 735, 736, 737, 742, 748, 749, 750, 752, 776, 777, 778, 780, 952, 953, 954, 956, 985, 986, 987, 989, 1040, 1042], "chang": [2, 3, 6, 9, 24, 25, 27, 46, 48, 87, 105, 123, 124, 127, 128, 129, 130, 141, 142, 175, 183, 188, 191, 208, 209, 210, 225, 227, 264, 276, 277, 280, 281, 284, 290, 292, 296, 301, 309, 310, 313, 314, 315, 316, 327, 328, 331, 332, 346, 347, 348, 349, 352, 354, 355, 360, 366, 370, 383, 433, 434, 435, 437, 461, 512, 513, 525, 526, 528, 540, 545, 573, 574, 575, 607, 608, 610, 658, 735, 736, 737, 742, 748, 749, 750, 752, 776, 777, 778, 780, 865, 869, 871, 951, 952, 953, 954, 956, 981, 984, 985, 986, 987, 989, 1015, 1017, 1027, 1040, 1042, 1113, 1119], "return": [2, 3, 4, 5, 6, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 123, 124, 127, 128, 129, 130, 137, 138, 139, 140, 141, 142, 143, 144, 151, 152, 153, 154, 155, 156, 159, 163, 164, 171, 178, 179, 180, 181, 182, 183, 184, 185, 186, 188, 190, 191, 192, 193, 194, 195, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 230, 231, 232, 233, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 309, 310, 313, 314, 315, 316, 317, 318, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 337, 338, 339, 340, 341, 342, 351, 352, 353, 355, 356, 358, 359, 360, 361, 362, 363, 364, 366, 368, 369, 370, 371, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 456, 460, 461, 470, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 750, 751, 752, 753, 755, 756, 757, 758, 759, 760, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 782, 783, 784, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 803, 804, 805, 806, 809, 810, 811, 812, 813, 815, 816, 817, 818, 819, 820, 821, 823, 824, 826, 827, 828, 829, 831, 832, 833, 834, 836, 837, 838, 840, 841, 842, 843, 844, 845, 847, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1021, 1025, 1026, 1027, 1028, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1116, 1118, 1123, 1124, 1134, 1143, 1144, 1150, 1154], "type": [2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 124, 127, 128, 129, 130, 137, 138, 139, 140, 141, 142, 143, 144, 151, 152, 153, 154, 155, 156, 157, 158, 159, 165, 171, 178, 179, 180, 181, 182, 183, 184, 185, 186, 188, 189, 190, 191, 192, 193, 194, 195, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 230, 231, 232, 233, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 310, 313, 314, 315, 316, 317, 318, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 337, 338, 339, 340, 341, 342, 343, 344, 346, 348, 350, 351, 352, 353, 358, 359, 360, 362, 363, 364, 366, 368, 369, 371, 384, 385, 386, 387, 388, 389, 390, 391, 392, 394, 396, 397, 398, 399, 400, 401, 402, 403, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 456, 460, 461, 477, 478, 479, 480, 481, 483, 493, 494, 495, 496, 497, 498, 499, 500, 502, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 750, 751, 752, 753, 755, 756, 758, 759, 760, 762, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 782, 783, 784, 786, 787, 789, 790, 791, 793, 794, 795, 796, 800, 803, 804, 805, 806, 809, 811, 812, 813, 815, 816, 817, 819, 820, 821, 823, 824, 826, 827, 829, 831, 832, 833, 834, 836, 837, 838, 840, 841, 842, 843, 844, 845, 847, 849, 852, 853, 855, 857, 858, 859, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1021, 1025, 1026, 1027, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145], "aco": [2, 127, 128, 183, 313, 314, 511, 520, 1113], "acosh": [2, 127, 128, 183, 313, 314, 424, 445, 446, 511, 519, 580, 584, 1113], "add": [2, 7, 127, 128, 157, 158, 178, 179, 180, 181, 183, 189, 276, 277, 313, 314, 315, 316, 343, 344, 346, 347, 348, 350, 351, 352, 356, 357, 359, 360, 364, 366, 368, 383, 511, 528, 658, 748, 752, 1033, 1034, 1037, 1113, 1119, 1148, 1149], "x2": [2, 6, 9, 15, 18, 20, 21, 22, 23, 32, 36, 40, 47, 49, 50, 56, 57, 62, 63, 65, 66, 67, 74, 76, 77, 81, 84, 92, 100, 107, 112, 127, 128, 129, 130, 137, 138, 178, 179, 183, 188, 191, 199, 202, 204, 205, 206, 207, 217, 219, 226, 229, 230, 237, 238, 243, 244, 246, 247, 248, 252, 254, 258, 261, 276, 277, 283, 288, 295, 298, 313, 314, 315, 316, 323, 324, 353, 364, 424, 456, 461, 499, 511, 524, 525, 526, 527, 528, 541, 542, 543, 544, 549, 550, 551, 552, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 585, 586, 587, 588, 589, 590, 591, 592, 593, 601, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 634, 635, 636, 637, 638, 639, 640, 641, 658, 659, 660, 661, 662, 663, 664, 665, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 689, 690, 691, 692, 697, 698, 699, 700, 701, 702, 703, 704, 729, 730, 731, 732, 733, 747, 748, 749, 750, 751, 752, 852, 857, 865, 869, 870, 871, 887, 888, 889, 890, 901, 902, 903, 911, 912, 913, 920, 921, 922, 926, 927, 928, 1050, 1054], "exampl": [2, 6, 7, 9, 24, 25, 27, 46, 48, 87, 105, 123, 124, 127, 128, 129, 130, 141, 142, 157, 158, 159, 163, 164, 165, 171, 175, 180, 181, 183, 188, 189, 191, 208, 209, 210, 225, 227, 264, 276, 277, 280, 281, 284, 290, 292, 296, 301, 309, 310, 313, 314, 315, 316, 327, 328, 331, 332, 343, 344, 346, 347, 348, 350, 351, 352, 355, 356, 357, 358, 359, 360, 361, 362, 363, 366, 368, 369, 370, 371, 382, 383, 394, 396, 397, 398, 399, 400, 401, 402, 403, 405, 412, 413, 416, 418, 419, 422, 423, 424, 430, 433, 434, 435, 436, 437, 445, 446, 461, 480, 481, 483, 495, 496, 497, 498, 499, 502, 504, 506, 508, 509, 511, 524, 525, 526, 528, 529, 532, 540, 545, 548, 549, 552, 553, 556, 565, 568, 569, 572, 573, 574, 575, 576, 577, 581, 593, 598, 606, 607, 608, 610, 614, 617, 618, 621, 634, 637, 658, 678, 679, 685, 688, 689, 692, 705, 708, 721, 724, 725, 728, 734, 735, 736, 737, 738, 742, 747, 748, 749, 750, 751, 752, 755, 756, 764, 765, 772, 775, 776, 777, 778, 779, 780, 783, 794, 809, 810, 815, 816, 817, 852, 853, 855, 857, 858, 859, 864, 865, 866, 868, 869, 871, 872, 875, 877, 884, 895, 897, 901, 903, 914, 920, 922, 923, 925, 935, 936, 939, 941, 944, 946, 949, 951, 952, 953, 954, 955, 956, 957, 960, 965, 968, 969, 972, 977, 980, 981, 984, 985, 986, 987, 988, 989, 990, 991, 994, 995, 998, 999, 1002, 1033, 1034, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1046, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1060, 1061, 1064, 1071, 1072, 1075, 1092, 1095, 1096, 1099, 1104, 1105, 1108, 1113], "x": [2, 6, 24, 25, 27, 46, 48, 87, 98, 105, 116, 119, 120, 123, 124, 127, 128, 129, 130, 141, 142, 159, 163, 171, 178, 179, 180, 181, 183, 188, 208, 209, 210, 225, 227, 264, 274, 276, 278, 280, 281, 284, 290, 292, 293, 296, 301, 309, 310, 313, 314, 315, 316, 327, 328, 331, 332, 337, 338, 349, 351, 352, 353, 356, 357, 360, 363, 364, 366, 368, 369, 370, 371, 394, 395, 396, 397, 398, 399, 400, 401, 405, 407, 409, 411, 413, 416, 417, 419, 420, 421, 422, 423, 424, 430, 432, 433, 434, 435, 436, 437, 442, 461, 480, 481, 482, 483, 486, 487, 495, 499, 504, 506, 511, 512, 515, 516, 519, 520, 523, 524, 525, 526, 528, 529, 532, 533, 536, 537, 540, 541, 544, 545, 548, 549, 552, 553, 556, 569, 572, 573, 574, 575, 576, 577, 580, 581, 584, 593, 594, 597, 598, 602, 605, 606, 607, 608, 610, 614, 617, 618, 621, 622, 625, 626, 629, 630, 633, 634, 637, 642, 645, 646, 649, 650, 653, 654, 657, 658, 666, 669, 678, 679, 685, 688, 693, 696, 705, 708, 709, 712, 713, 716, 717, 720, 721, 724, 725, 728, 734, 735, 736, 737, 738, 739, 742, 743, 746, 747, 755, 756, 757, 759, 760, 762, 764, 765, 766, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 783, 784, 786, 787, 789, 790, 791, 793, 794, 795, 796, 800, 809, 810, 813, 815, 816, 817, 819, 820, 821, 828, 833, 847, 849, 850, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 868, 869, 871, 872, 874, 875, 877, 878, 880, 881, 883, 884, 886, 891, 893, 894, 895, 897, 898, 900, 901, 903, 904, 906, 907, 909, 910, 914, 916, 917, 919, 920, 922, 923, 925, 929, 931, 935, 936, 939, 941, 944, 946, 949, 951, 952, 953, 954, 955, 956, 957, 960, 961, 964, 965, 968, 969, 972, 973, 976, 977, 980, 981, 984, 985, 986, 987, 988, 989, 990, 991, 994, 995, 996, 997, 998, 999, 1002, 1003, 1006, 1007, 1010, 1015, 1016, 1021, 1025, 1026, 1027, 1033, 1034, 1037, 1038, 1040, 1041, 1042, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1064, 1065, 1066, 1069, 1070, 1071, 1072, 1075, 1076, 1079, 1080, 1083, 1084, 1087, 1088, 1091, 1092, 1095, 1096, 1099, 1100, 1103, 1104, 1105, 1108, 1109, 1112, 1113, 1134, 1145], "1": [2, 6, 9, 11, 24, 25, 27, 32, 33, 35, 46, 48, 55, 87, 93, 94, 105, 112, 123, 124, 127, 128, 129, 130, 137, 138, 139, 140, 141, 142, 143, 144, 151, 152, 159, 165, 171, 174, 175, 178, 179, 180, 181, 183, 188, 191, 193, 208, 209, 210, 216, 225, 227, 236, 260, 264, 269, 270, 276, 277, 278, 280, 281, 282, 284, 290, 291, 292, 293, 294, 296, 301, 309, 310, 313, 314, 315, 316, 325, 326, 327, 328, 329, 330, 331, 332, 337, 338, 349, 353, 356, 360, 363, 364, 365, 366, 368, 369, 370, 371, 383, 394, 396, 397, 398, 399, 401, 405, 406, 413, 414, 415, 416, 418, 419, 423, 424, 430, 433, 434, 435, 436, 437, 444, 461, 465, 468, 470, 475, 480, 481, 483, 485, 489, 493, 495, 498, 499, 506, 511, 516, 519, 520, 523, 524, 525, 526, 528, 529, 532, 540, 541, 544, 545, 549, 552, 553, 556, 565, 568, 569, 572, 573, 574, 575, 576, 577, 580, 581, 584, 593, 598, 602, 605, 606, 607, 608, 610, 614, 617, 618, 621, 634, 637, 642, 645, 646, 649, 650, 653, 654, 657, 658, 678, 679, 685, 688, 689, 692, 697, 700, 705, 708, 709, 712, 713, 716, 721, 724, 725, 728, 734, 735, 736, 737, 742, 747, 748, 749, 750, 751, 752, 755, 756, 764, 765, 772, 775, 776, 777, 778, 779, 780, 794, 800, 803, 804, 809, 810, 812, 815, 816, 817, 819, 852, 853, 854, 855, 856, 857, 858, 859, 860, 864, 865, 866, 868, 869, 870, 871, 872, 875, 876, 877, 884, 895, 897, 901, 903, 911, 913, 914, 920, 922, 923, 925, 926, 927, 928, 929, 931, 935, 936, 939, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 960, 965, 968, 969, 972, 973, 976, 977, 980, 981, 984, 985, 986, 987, 988, 989, 990, 991, 994, 995, 998, 999, 1002, 1015, 1027, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1075, 1076, 1079, 1092, 1095, 1096, 1099, 1100, 1103, 1104, 1105, 1108, 1109, 1112, 1113, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1154, 1156, 1157], "2": [2, 6, 9, 24, 25, 27, 35, 46, 48, 87, 105, 107, 113, 123, 124, 127, 128, 129, 130, 137, 138, 141, 142, 159, 163, 178, 179, 180, 181, 183, 188, 191, 208, 209, 210, 225, 227, 264, 276, 280, 281, 284, 290, 292, 296, 301, 309, 310, 313, 314, 315, 316, 327, 328, 331, 332, 346, 347, 349, 353, 357, 360, 364, 365, 366, 368, 369, 370, 371, 383, 394, 396, 397, 398, 399, 401, 404, 405, 412, 413, 416, 418, 419, 423, 424, 430, 433, 434, 435, 436, 437, 461, 480, 481, 483, 495, 497, 499, 506, 511, 524, 525, 526, 528, 529, 532, 537, 540, 541, 544, 545, 549, 552, 553, 556, 565, 568, 569, 572, 573, 574, 575, 576, 577, 581, 593, 598, 606, 607, 608, 610, 614, 617, 618, 621, 634, 637, 654, 657, 658, 678, 679, 685, 688, 689, 692, 705, 708, 721, 724, 725, 728, 734, 735, 736, 737, 742, 747, 748, 749, 750, 751, 755, 756, 759, 760, 762, 765, 772, 775, 776, 777, 778, 779, 780, 794, 809, 810, 815, 852, 855, 856, 857, 858, 859, 864, 865, 866, 868, 869, 871, 872, 875, 876, 877, 884, 886, 887, 890, 891, 893, 895, 897, 901, 903, 904, 906, 907, 909, 914, 920, 921, 922, 923, 925, 929, 930, 931, 935, 936, 939, 946, 949, 951, 952, 953, 954, 955, 956, 957, 960, 965, 968, 969, 972, 977, 980, 981, 984, 985, 986, 987, 988, 989, 990, 991, 994, 999, 1002, 1033, 1034, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1046, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1060, 1061, 1064, 1071, 1072, 1075, 1076, 1079, 1099, 1104, 1105, 1108, 1113], "3": [2, 6, 9, 24, 27, 46, 48, 123, 124, 127, 128, 129, 130, 141, 142, 180, 181, 183, 188, 191, 208, 209, 210, 225, 227, 264, 276, 280, 281, 284, 290, 292, 296, 301, 309, 310, 313, 314, 315, 316, 327, 328, 331, 332, 346, 349, 353, 357, 360, 366, 368, 369, 370, 371, 394, 396, 397, 398, 399, 404, 405, 413, 416, 419, 422, 423, 424, 433, 434, 435, 436, 437, 461, 480, 483, 499, 506, 511, 524, 525, 526, 528, 529, 532, 540, 545, 549, 552, 565, 568, 569, 572, 573, 575, 576, 581, 593, 598, 606, 607, 608, 610, 614, 617, 618, 621, 634, 637, 658, 678, 679, 685, 688, 689, 692, 705, 708, 721, 724, 725, 728, 734, 735, 737, 742, 747, 748, 749, 750, 755, 756, 765, 772, 775, 776, 777, 778, 779, 780, 809, 810, 815, 817, 852, 853, 854, 855, 857, 858, 859, 864, 865, 866, 868, 869, 871, 872, 875, 877, 884, 895, 897, 901, 903, 914, 920, 922, 923, 925, 932, 934, 935, 936, 939, 946, 949, 951, 952, 953, 954, 955, 956, 957, 960, 965, 968, 969, 972, 977, 980, 981, 984, 985, 987, 988, 989, 990, 991, 994, 999, 1002, 1033, 1034, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1046, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1060, 1061, 1064, 1071, 1072, 1075, 1076, 1079, 1096, 1099, 1104, 1105, 1108, 1113], "y": [2, 6, 9, 25, 27, 46, 48, 87, 105, 127, 128, 129, 130, 141, 142, 180, 181, 183, 188, 191, 209, 210, 225, 227, 264, 276, 277, 281, 284, 290, 292, 296, 301, 313, 314, 315, 316, 327, 328, 331, 332, 351, 353, 357, 360, 366, 368, 394, 396, 397, 398, 399, 400, 401, 405, 412, 413, 416, 418, 419, 423, 424, 430, 461, 481, 495, 499, 504, 511, 524, 525, 526, 528, 529, 532, 540, 541, 544, 545, 549, 552, 553, 556, 565, 568, 569, 572, 573, 574, 575, 576, 577, 581, 593, 598, 606, 607, 608, 610, 617, 618, 621, 658, 678, 679, 685, 688, 689, 692, 705, 708, 721, 724, 725, 728, 734, 735, 736, 737, 742, 747, 748, 749, 750, 751, 752, 755, 756, 764, 765, 772, 773, 775, 776, 777, 778, 779, 780, 809, 815, 816, 817, 821, 828, 852, 858, 859, 861, 865, 866, 868, 869, 871, 872, 884, 901, 903, 920, 922, 923, 925, 935, 936, 939, 941, 944, 946, 949, 951, 952, 953, 954, 955, 956, 957, 960, 965, 968, 969, 972, 977, 980, 981, 984, 985, 986, 987, 988, 989, 990, 999, 1002, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1046, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1057, 1060, 1061, 1064, 1071, 1072, 1075, 1076, 1079, 1092, 1095, 1096, 1099, 1104, 1105, 1108], "4": [2, 6, 27, 127, 128, 141, 142, 175, 176, 177, 178, 179, 180, 181, 182, 183, 188, 208, 209, 210, 225, 227, 264, 276, 280, 281, 284, 290, 292, 296, 301, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 349, 353, 357, 360, 366, 368, 369, 370, 371, 394, 396, 397, 399, 405, 413, 416, 419, 423, 424, 433, 435, 436, 437, 461, 483, 499, 511, 524, 525, 526, 528, 529, 532, 540, 541, 544, 545, 549, 552, 569, 572, 573, 575, 576, 581, 593, 606, 608, 610, 617, 618, 621, 658, 678, 679, 685, 688, 689, 692, 705, 708, 721, 724, 725, 728, 734, 735, 737, 742, 747, 756, 765, 774, 775, 776, 778, 779, 780, 810, 815, 852, 855, 856, 857, 859, 862, 864, 865, 869, 871, 872, 875, 877, 884, 895, 897, 901, 903, 920, 922, 923, 925, 935, 946, 949, 951, 952, 953, 954, 955, 956, 957, 960, 965, 968, 969, 972, 977, 980, 981, 984, 985, 987, 988, 989, 990, 999, 1002, 1033, 1034, 1037, 1038, 1039, 1040, 1042, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1060, 1061, 1064, 1071, 1072, 1075, 1076, 1079, 1099, 1104, 1105, 1108, 1113, 1150, 1151, 1152, 1153, 1155], "5": [2, 6, 9, 25, 27, 46, 127, 128, 129, 130, 141, 142, 180, 181, 183, 188, 208, 209, 210, 225, 264, 276, 280, 281, 284, 290, 292, 296, 301, 309, 310, 313, 314, 315, 316, 327, 328, 331, 332, 347, 349, 353, 357, 364, 368, 369, 370, 394, 396, 397, 399, 405, 413, 416, 419, 422, 423, 424, 433, 435, 436, 437, 461, 483, 499, 511, 524, 525, 526, 528, 529, 532, 540, 545, 548, 549, 552, 565, 568, 569, 572, 573, 574, 575, 576, 581, 593, 606, 607, 608, 610, 617, 618, 621, 658, 678, 679, 685, 688, 689, 692, 705, 708, 721, 724, 725, 728, 734, 735, 737, 738, 742, 747, 748, 749, 756, 765, 775, 776, 779, 780, 810, 815, 852, 855, 857, 858, 864, 865, 866, 868, 869, 871, 872, 875, 877, 884, 901, 903, 920, 922, 923, 925, 935, 946, 949, 951, 952, 953, 954, 955, 956, 957, 960, 965, 968, 969, 972, 977, 980, 981, 984, 985, 987, 988, 989, 990, 999, 1002, 1033, 1034, 1037, 1038, 1039, 1040, 1041, 1042, 1049, 1050, 1052, 1053, 1054, 1055, 1056, 1057, 1060, 1061, 1064, 1071, 1072, 1075, 1076, 1079, 1099, 1104, 1105, 1108, 1134, 1145], "6": [2, 6, 25, 27, 127, 128, 141, 142, 180, 181, 183, 188, 209, 276, 284, 290, 313, 314, 315, 316, 331, 332, 349, 353, 357, 360, 368, 369, 370, 394, 396, 397, 399, 405, 413, 461, 483, 499, 511, 524, 525, 526, 528, 529, 532, 549, 552, 553, 556, 569, 572, 573, 574, 575, 576, 581, 593, 606, 617, 618, 621, 658, 678, 679, 685, 688, 705, 708, 721, 724, 725, 728, 734, 747, 756, 765, 775, 776, 779, 780, 810, 815, 852, 855, 858, 859, 864, 865, 869, 871, 872, 875, 877, 901, 903, 914, 920, 922, 935, 936, 939, 946, 949, 951, 952, 953, 955, 957, 960, 965, 968, 969, 972, 977, 980, 981, 984, 985, 988, 990, 999, 1002, 1033, 1034, 1037, 1038, 1039, 1040, 1041, 1042, 1050, 1051, 1054, 1055, 1056, 1057, 1071, 1072, 1075, 1076, 1079, 1099], "z": [2, 6, 48, 127, 128, 129, 130, 180, 181, 183, 188, 227, 276, 284, 313, 314, 315, 316, 353, 357, 360, 366, 368, 461, 495, 511, 524, 525, 526, 528, 549, 552, 569, 572, 593, 617, 618, 621, 658, 678, 679, 747, 755, 756, 775, 776, 777, 778, 780, 809, 865, 869, 871, 935, 936, 939, 941, 944, 951, 952, 955, 1050, 1051, 1071, 1072, 1075, 1076, 1079, 1099], "print": [2, 6, 7, 9, 24, 25, 27, 46, 48, 87, 105, 123, 124, 127, 128, 129, 130, 141, 142, 157, 158, 159, 163, 164, 165, 171, 178, 179, 180, 181, 182, 183, 188, 189, 191, 208, 209, 210, 225, 227, 264, 276, 277, 280, 281, 284, 290, 292, 296, 301, 309, 310, 313, 314, 315, 316, 327, 328, 331, 332, 343, 344, 346, 353, 360, 366, 368, 369, 370, 394, 396, 397, 398, 399, 400, 401, 405, 412, 413, 416, 418, 419, 422, 423, 424, 430, 433, 434, 435, 436, 437, 445, 446, 461, 481, 495, 496, 497, 498, 499, 501, 504, 508, 511, 524, 525, 526, 528, 529, 532, 540, 545, 548, 549, 552, 553, 556, 565, 568, 569, 572, 573, 574, 575, 576, 577, 581, 593, 598, 606, 607, 608, 610, 614, 617, 618, 621, 634, 637, 658, 678, 679, 685, 688, 689, 692, 705, 708, 721, 724, 725, 728, 734, 735, 736, 737, 738, 742, 747, 748, 749, 750, 751, 752, 755, 756, 764, 765, 772, 775, 776, 777, 778, 779, 780, 783, 801, 809, 810, 815, 816, 817, 852, 853, 855, 857, 858, 859, 864, 865, 866, 868, 869, 871, 872, 875, 877, 884, 901, 903, 914, 920, 922, 923, 925, 935, 936, 939, 941, 944, 946, 949, 951, 952, 953, 954, 955, 956, 965, 968, 969, 972, 977, 980, 981, 984, 985, 986, 987, 988, 989, 990, 991, 994, 999, 1002, 1033, 1034, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1046, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1060, 1061, 1064, 1071, 1072, 1075, 1076, 1079, 1092, 1095, 1096, 1099, 1104, 1105, 1108, 1113], "7": [2, 6, 27, 127, 128, 141, 142, 180, 181, 183, 188, 276, 290, 313, 314, 331, 332, 347, 349, 353, 356, 360, 363, 394, 396, 397, 461, 483, 511, 524, 525, 526, 528, 549, 552, 553, 556, 569, 572, 573, 576, 581, 593, 598, 606, 617, 618, 621, 658, 678, 679, 705, 708, 721, 724, 734, 747, 756, 765, 775, 821, 823, 824, 826, 834, 836, 852, 858, 859, 864, 865, 869, 871, 872, 875, 877, 901, 903, 920, 922, 935, 936, 939, 941, 944, 946, 949, 951, 952, 953, 955, 965, 968, 969, 972, 977, 980, 990, 999, 1002, 1033, 1034, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1046, 1050, 1054, 1055, 1056, 1071, 1072, 1075, 1099], "9": [2, 6, 27, 127, 128, 141, 142, 180, 181, 183, 187, 188, 234, 275, 276, 286, 290, 313, 314, 317, 318, 331, 332, 349, 353, 369, 370, 511, 524, 525, 526, 528, 549, 552, 553, 556, 658, 678, 679, 705, 708, 721, 724, 725, 728, 747, 775, 821, 823, 824, 825, 826, 827, 834, 835, 836, 837, 852, 855, 858, 859, 865, 869, 871, 872, 875, 877, 901, 903, 914, 920, 922, 951, 952, 953, 955, 969, 972, 977, 980, 985, 988, 990, 1038, 1039, 1040, 1041, 1042, 1050, 1054, 1055, 1056, 1071, 1072, 1075, 1099, 1150, 1151, 1152], "add_ivy_array_instance_method": [2, 157], "cl": [2, 7, 157, 158, 183, 189, 343, 344], "modul": [2, 7, 157, 158, 159, 163, 164, 175, 178, 179, 180, 181, 182, 183, 189, 343, 344, 346, 349, 355, 356, 357, 359, 363, 366, 367, 369, 371, 382, 383, 747, 798, 1038, 1039, 1043, 1044, 1046, 1113, 1120, 1121, 1122, 1123, 1124, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1148, 1149, 1156, 1157], "to_ignor": [2, 7, 157, 158, 183, 189, 343, 344, 1015, 1026], "loop": [2, 7, 157, 158, 183, 189, 343, 344, 357, 383, 1011, 1012, 1013, 1014], "over": [2, 7, 157, 158, 159, 163, 173, 175, 178, 179, 183, 189, 343, 344, 346, 352, 353, 357, 363, 368, 383, 865, 891, 893, 920, 922, 926, 928, 929, 931, 1033, 1034, 1037, 1038, 1044, 1046, 1071, 1076, 1079, 1080, 1083, 1084, 1087, 1088, 1091, 1092, 1095, 1096, 1100, 1103, 1104, 1105, 1108, 1109, 1112, 1148, 1149], "all": [2, 7, 116, 117, 118, 119, 120, 155, 156, 157, 158, 173, 174, 175, 178, 179, 183, 189, 341, 342, 343, 344, 345, 346, 347, 348, 349, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 368, 369, 370, 371, 382, 383, 384, 392, 402, 403, 405, 406, 420, 421, 461, 470, 495, 501, 747, 748, 751, 755, 756, 781, 801, 816, 852, 862, 865, 911, 913, 920, 922, 929, 931, 951, 969, 972, 985, 988, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1026, 1027, 1028, 1038, 1039, 1044, 1046, 1104, 1113, 1116, 1118], "gener": [2, 7, 130, 157, 158, 178, 179, 183, 189, 316, 343, 344, 347, 348, 349, 350, 351, 352, 353, 356, 359, 360, 361, 362, 363, 364, 365, 366, 368, 370, 371, 382, 383, 402, 405, 406, 414, 415, 424, 433, 436, 511, 529, 532, 569, 572, 573, 576, 581, 606, 689, 692, 701, 704, 721, 724, 725, 728, 748, 751, 753, 754, 755, 756, 757, 758, 759, 760, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 779, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 833, 951, 965, 968, 985, 988, 1038, 1039, 1040, 1041, 1044, 1046, 1048, 1055, 1056, 1057, 1060, 1061, 1064, 1071, 1076, 1079, 1113, 1150, 1154], "etc": [2, 7, 157, 158, 175, 178, 179, 183, 189, 343, 344, 346, 347, 348, 351, 353, 355, 359, 360, 361, 364, 366, 368, 369, 383, 405, 414, 415, 747, 775, 776, 779, 800, 803, 804, 1038, 1039, 1040, 1041, 1044, 1046, 1055, 1056, 1057, 1059, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1154, 1156, 1157], "us": [2, 7, 157, 158, 159, 164, 171, 174, 175, 178, 179, 180, 181, 182, 183, 189, 343, 344, 345, 347, 348, 350, 351, 352, 353, 354, 355, 356, 357, 359, 360, 361, 362, 363, 364, 365, 366, 368, 370, 371, 382, 383, 394, 396, 397, 398, 399, 400, 401, 404, 424, 443, 461, 470, 471, 496, 500, 503, 504, 505, 506, 508, 510, 511, 529, 532, 549, 552, 569, 572, 581, 593, 617, 618, 621, 678, 679, 685, 688, 689, 692, 705, 708, 721, 724, 747, 775, 782, 783, 797, 803, 804, 805, 806, 811, 812, 821, 823, 824, 826, 834, 836, 838, 840, 852, 858, 860, 861, 863, 864, 865, 872, 875, 877, 891, 893, 935, 936, 939, 951, 965, 968, 969, 972, 977, 980, 985, 988, 999, 1002, 1011, 1012, 1013, 1014, 1015, 1016, 1018, 1024, 1025, 1026, 1028, 1033, 1034, 1037, 1050, 1051, 1052, 1053, 1055, 1056, 1057, 1071, 1072, 1075, 1099, 1104, 1105, 1108, 1113, 1134, 1142, 1145, 1146, 1147, 1148, 1149, 1150, 1152, 1153], "_wrap_funct": [2, 7, 157, 158, 183, 189, 343, 344, 356, 358], "paramet": [2, 7, 116, 117, 118, 119, 120, 157, 158, 159, 163, 164, 178, 179, 180, 181, 182, 183, 189, 343, 344, 351, 352, 355, 368, 369, 382, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 428, 429, 430, 431, 432, 433, 436, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 460, 461, 470, 471, 474, 475, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 497, 499, 500, 501, 502, 503, 504, 505, 506, 507, 510, 511, 512, 515, 516, 519, 520, 523, 524, 527, 529, 532, 533, 536, 537, 540, 541, 544, 545, 548, 549, 552, 553, 556, 557, 560, 561, 564, 565, 568, 569, 572, 573, 576, 577, 580, 581, 584, 585, 588, 590, 593, 594, 597, 598, 601, 602, 605, 606, 609, 610, 613, 614, 617, 618, 621, 622, 625, 626, 629, 630, 633, 634, 637, 638, 641, 642, 645, 646, 649, 650, 653, 654, 657, 658, 661, 662, 665, 666, 669, 670, 673, 674, 677, 678, 679, 680, 683, 685, 688, 689, 692, 693, 696, 697, 700, 701, 704, 705, 708, 709, 712, 713, 716, 717, 720, 721, 724, 725, 728, 729, 733, 734, 738, 739, 742, 743, 746, 747, 748, 751, 753, 754, 755, 756, 757, 758, 759, 760, 762, 765, 766, 768, 769, 770, 771, 772, 773, 774, 775, 776, 779, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 800, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 815, 816, 817, 818, 819, 820, 821, 823, 824, 826, 828, 829, 831, 833, 834, 836, 838, 840, 842, 844, 846, 847, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 868, 869, 871, 872, 874, 875, 877, 878, 880, 881, 883, 884, 886, 887, 890, 891, 893, 895, 897, 898, 900, 901, 903, 904, 906, 907, 909, 910, 911, 913, 914, 916, 917, 919, 920, 922, 923, 925, 926, 928, 929, 931, 932, 934, 935, 936, 939, 941, 944, 946, 949, 951, 952, 955, 957, 960, 961, 964, 965, 968, 969, 972, 973, 976, 977, 980, 981, 984, 985, 988, 990, 991, 994, 995, 998, 999, 1002, 1003, 1006, 1007, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1037, 1038, 1039, 1040, 1041, 1043, 1044, 1046, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1064, 1066, 1069, 1071, 1072, 1075, 1076, 1079, 1080, 1083, 1084, 1087, 1088, 1091, 1092, 1095, 1096, 1099, 1100, 1103, 1104, 1105, 1108, 1109, 1112, 1116, 1118, 1123, 1124, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157], "we": [2, 7, 157, 158, 159, 164, 165, 171, 172, 173, 174, 175, 183, 189, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 363, 364, 366, 367, 368, 369, 370, 371, 382, 383, 821, 828, 1113, 1119], "want": [2, 7, 157, 158, 159, 164, 174, 183, 189, 343, 344, 345, 346, 347, 355, 369, 370, 371, 383], "list": [2, 7, 116, 117, 118, 119, 120, 157, 158, 178, 179, 183, 189, 343, 344, 346, 348, 349, 351, 353, 361, 362, 364, 366, 369, 370, 371, 383, 405, 406, 407, 408, 416, 417, 418, 422, 424, 431, 461, 470, 471, 480, 482, 483, 486, 487, 490, 491, 505, 747, 756, 810, 815, 819, 852, 853, 854, 855, 856, 857, 858, 859, 865, 920, 922, 951, 957, 960, 969, 972, 990, 995, 998, 1015, 1016, 1017, 1021, 1026, 1027, 1033, 1034, 1037, 1050, 1053, 1104, 1105, 1108, 1109, 1112, 1113, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141], "option": [2, 7, 116, 117, 118, 119, 120, 157, 158, 159, 164, 178, 179, 183, 189, 343, 344, 346, 347, 351, 352, 353, 356, 360, 361, 362, 363, 364, 366, 371, 383, 394, 396, 397, 399, 402, 403, 405, 406, 407, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 422, 423, 424, 438, 439, 440, 441, 448, 460, 461, 480, 504, 505, 506, 511, 512, 515, 516, 519, 520, 523, 524, 527, 529, 532, 533, 536, 537, 541, 544, 549, 552, 553, 556, 557, 560, 561, 564, 565, 568, 569, 572, 573, 576, 577, 580, 581, 584, 598, 601, 602, 605, 606, 622, 625, 626, 629, 630, 633, 634, 637, 642, 645, 646, 649, 650, 653, 654, 657, 658, 661, 662, 665, 666, 669, 670, 673, 674, 677, 680, 683, 685, 688, 689, 692, 697, 700, 701, 704, 705, 708, 709, 712, 713, 716, 717, 720, 721, 724, 725, 728, 729, 733, 734, 747, 753, 760, 762, 765, 766, 767, 773, 775, 798, 800, 803, 804, 811, 812, 821, 847, 852, 855, 858, 859, 861, 864, 865, 886, 891, 893, 895, 897, 904, 906, 929, 931, 935, 936, 939, 941, 944, 946, 949, 951, 952, 955, 957, 960, 965, 968, 969, 972, 973, 976, 977, 980, 985, 988, 990, 991, 994, 995, 998, 999, 1002, 1011, 1012, 1013, 1014, 1015, 1016, 1021, 1026, 1027, 1033, 1034, 1037, 1038, 1039, 1040, 1041, 1043, 1044, 1046, 1050, 1051, 1052, 1060, 1061, 1064, 1066, 1069, 1071, 1072, 1075, 1076, 1079, 1080, 1083, 1084, 1087, 1088, 1091, 1092, 1095, 1096, 1099, 1100, 1103, 1104, 1105, 1108, 1109, 1112], "iter": [2, 7, 116, 117, 118, 119, 120, 157, 158, 175, 178, 179, 180, 181, 182, 183, 189, 343, 344, 360, 366, 369, 402, 403, 461, 483, 484, 486, 487, 488, 489, 492, 505, 747, 748, 751, 804, 809, 951, 961, 964, 977, 980, 990, 1003, 1006, 1007, 1010, 1015, 1016, 1017, 1021, 1025, 1026, 1027], "ani": [2, 7, 116, 117, 118, 155, 156, 157, 158, 159, 163, 171, 173, 174, 175, 178, 179, 183, 189, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 360, 361, 362, 363, 364, 366, 368, 369, 370, 371, 382, 383, 402, 403, 405, 407, 417, 424, 433, 436, 461, 506, 511, 524, 529, 532, 573, 576, 590, 593, 606, 617, 618, 621, 638, 641, 689, 692, 721, 724, 725, 728, 734, 747, 748, 751, 768, 769, 770, 771, 772, 775, 786, 793, 794, 795, 796, 811, 812, 821, 828, 852, 855, 864, 951, 985, 988, 1011, 1012, 1013, 1014, 1015, 1021, 1025, 1033, 1034, 1037, 1038, 1044, 1046, 1071, 1076, 1079, 1104, 1105, 1108, 1113], "item": [2, 7, 116, 120, 157, 158, 178, 179, 361, 366, 368, 369, 371, 424, 439, 461, 470, 471, 473, 480, 482, 484, 486, 488, 492, 747, 763, 785, 811, 812, 1015, 1020, 1021, 1022, 1023, 1027, 1031, 1032, 1113, 1146, 1147], "don": [2, 7, 157, 158, 175, 183, 189, 343, 344, 346, 347, 348, 361, 370, 383], "t": [2, 7, 157, 158, 159, 164, 174, 175, 183, 189, 343, 344, 346, 347, 348, 349, 353, 361, 366, 368, 369, 370, 371, 383, 747, 756, 852, 861, 862], "an": [2, 7, 116, 119, 120, 157, 158, 174, 175, 178, 179, 183, 189, 343, 344, 346, 347, 348, 349, 351, 352, 353, 355, 356, 357, 359, 360, 361, 362, 363, 364, 366, 368, 369, 370, 371, 382, 383, 394, 397, 398, 400, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 430, 431, 432, 433, 436, 444, 449, 450, 452, 461, 483, 487, 506, 511, 512, 515, 516, 519, 520, 523, 524, 527, 529, 532, 533, 536, 537, 540, 541, 544, 545, 548, 549, 552, 553, 556, 557, 560, 561, 564, 565, 568, 569, 572, 573, 576, 577, 580, 581, 584, 585, 588, 590, 593, 598, 601, 602, 605, 606, 609, 610, 613, 614, 617, 618, 621, 622, 625, 626, 629, 630, 633, 634, 637, 638, 641, 642, 645, 646, 649, 650, 653, 654, 657, 658, 661, 662, 665, 666, 669, 670, 673, 674, 677, 678, 679, 680, 683, 685, 688, 689, 692, 697, 700, 701, 704, 705, 708, 709, 712, 713, 716, 717, 720, 721, 724, 725, 728, 729, 733, 734, 738, 742, 743, 746, 747, 758, 759, 760, 762, 764, 773, 774, 775, 787, 791, 793, 794, 795, 796, 816, 817, 818, 821, 833, 847, 849, 850, 852, 855, 864, 865, 866, 868, 869, 871, 872, 874, 875, 877, 878, 880, 881, 883, 884, 886, 887, 890, 894, 895, 897, 898, 900, 904, 906, 907, 909, 910, 911, 913, 914, 923, 925, 926, 928, 929, 931, 951, 952, 955, 957, 960, 961, 964, 965, 968, 969, 972, 973, 976, 981, 984, 985, 988, 990, 991, 994, 995, 998, 999, 1002, 1003, 1006, 1007, 1010, 1015, 1021, 1033, 1034, 1037, 1038, 1040, 1041, 1049, 1050, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1064, 1066, 1069, 1071, 1072, 1075, 1076, 1079, 1080, 1083, 1084, 1087, 1088, 1091, 1092, 1095, 1096, 1099, 1100, 1103, 1104, 1105, 1108, 1109, 1112, 1113, 1123, 1124, 1146, 1147, 1150, 1151, 1152, 1154], "default": [2, 7, 116, 117, 118, 119, 120, 157, 158, 159, 164, 178, 179, 180, 181, 182, 183, 189, 343, 344, 347, 352, 353, 356, 357, 360, 361, 362, 364, 370, 394, 395, 396, 397, 399, 402, 403, 405, 406, 407, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 430, 439, 440, 441, 442, 461, 470, 471, 480, 481, 485, 486, 487, 488, 489, 490, 491, 492, 493, 500, 502, 503, 504, 505, 506, 509, 510, 511, 512, 515, 516, 519, 520, 523, 524, 527, 529, 532, 533, 536, 537, 541, 544, 549, 552, 553, 556, 557, 560, 561, 564, 565, 568, 569, 572, 573, 576, 577, 580, 581, 584, 598, 601, 602, 605, 606, 622, 625, 626, 629, 630, 633, 634, 637, 642, 645, 646, 649, 650, 653, 654, 657, 658, 661, 662, 665, 666, 669, 670, 673, 674, 677, 680, 683, 685, 688, 689, 692, 697, 700, 701, 704, 705, 708, 709, 712, 713, 716, 717, 720, 721, 724, 725, 728, 729, 733, 734, 747, 748, 751, 753, 759, 760, 762, 765, 766, 773, 774, 775, 784, 785, 786, 788, 791, 792, 793, 794, 796, 797, 798, 800, 802, 803, 804, 807, 809, 811, 812, 819, 820, 821, 823, 824, 826, 828, 829, 831, 833, 834, 836, 838, 840, 842, 844, 847, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 868, 869, 871, 875, 877, 886, 891, 893, 895, 897, 904, 906, 907, 909, 914, 920, 922, 923, 925, 926, 928, 929, 931, 935, 936, 939, 941, 944, 946, 949, 951, 952, 955, 957, 960, 961, 964, 965, 968, 969, 972, 973, 976, 977, 980, 985, 988, 990, 991, 994, 995, 998, 999, 1002, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1021, 1025, 1026, 1027, 1028, 1033, 1034, 1037, 1038, 1039, 1040, 1041, 1043, 1044, 1046, 1048, 1050, 1051, 1052, 1053, 1055, 1056, 1057, 1060, 1061, 1064, 1066, 1069, 1071, 1072, 1075, 1076, 1079, 1080, 1083, 1084, 1087, 1088, 1091, 1092, 1095, 1096, 1099, 1100, 1103, 1104, 1105, 1108, 1109, 1112, 1123, 1124, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157], "As": [2, 7, 157, 158, 173, 183, 189, 343, 344, 347, 355, 356, 359, 360, 361, 362, 363, 364, 366, 368, 369, 370, 383, 1055, 1056, 1057, 1059], "shown": [2, 7, 157, 158, 178, 179, 183, 189, 343, 344, 347, 353, 364, 366, 368, 383, 405, 416, 511, 549, 552, 569, 572, 581, 705, 708, 865, 872, 951, 965, 968, 969, 972, 1055, 1056, 1057, 1060, 1061, 1064], "appropri": [2, 7, 157, 158, 183, 189, 343, 344, 347, 358, 511, 524, 680, 683, 1050, 1051], "from": [2, 7, 116, 117, 118, 119, 120, 157, 158, 159, 163, 164, 165, 173, 174, 175, 178, 179, 180, 181, 182, 183, 189, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 355, 357, 359, 360, 361, 362, 363, 364, 366, 368, 369, 370, 371, 382, 383, 405, 406, 407, 409, 411, 412, 413, 416, 417, 419, 423, 424, 433, 436, 452, 461, 470, 471, 480, 495, 499, 504, 505, 511, 614, 721, 724, 747, 768, 775, 776, 779, 815, 821, 824, 826, 834, 836, 852, 860, 863, 865, 875, 877, 914, 926, 928, 951, 969, 972, 981, 984, 991, 994, 1011, 1012, 1013, 1014, 1015, 1017, 1027, 1028, 1038, 1039, 1040, 1041, 1043, 1044, 1046, 1050, 1054, 1055, 1056, 1058, 1071, 1088, 1091, 1092, 1095, 1096, 1100, 1103, 1104, 1105, 1108, 1109, 1112, 1113, 1119, 1123, 1124, 1134, 1142, 1145, 1150, 1154], "our": [2, 7, 157, 158, 173, 174, 183, 189, 343, 344, 345, 346, 347, 353, 360, 365, 368, 369, 370, 371, 383, 1113], "toi": [2, 7, 157, 158, 183, 189, 343, 344], "arrayexampl": [2, 7, 157, 158], "import": [2, 7, 157, 158, 159, 163, 174, 183, 189, 343, 344, 348, 351, 352, 353, 357, 359, 360, 361, 362, 363, 366, 368, 369, 371, 383, 461, 502, 1113, 1119], "pass": [2, 7, 157, 158, 159, 163, 178, 179, 180, 181, 182, 183, 189, 343, 344, 348, 352, 353, 354, 355, 356, 357, 359, 360, 363, 364, 368, 383, 424, 438, 461, 470, 505, 511, 541, 544, 747, 758, 791, 821, 850, 1011, 1012, 1013, 1123, 1124, 1146, 1147, 1150, 1154, 1156, 1157], "hasattr": [2, 7, 157, 158, 183, 189, 343, 344, 368], "relu": [2, 7, 157, 158, 180, 181, 369, 370, 394, 395, 396, 1113], "softmax": [2, 7, 157, 158, 180, 181, 394, 852, 863, 864, 1113], "true": [2, 7, 9, 11, 24, 93, 102, 123, 124, 129, 130, 137, 138, 151, 152, 157, 158, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 353, 355, 356, 360, 361, 363, 366, 368, 369, 370, 371, 394, 395, 402, 403, 405, 414, 424, 430, 433, 434, 435, 436, 437, 461, 480, 497, 501, 502, 511, 512, 514, 518, 519, 520, 522, 526, 527, 528, 529, 531, 533, 535, 539, 540, 541, 543, 545, 547, 549, 551, 552, 553, 555, 557, 559, 561, 563, 565, 567, 569, 571, 572, 573, 575, 579, 580, 583, 584, 587, 588, 589, 592, 593, 594, 596, 600, 601, 602, 604, 608, 609, 610, 612, 614, 616, 617, 618, 620, 621, 622, 624, 625, 626, 628, 629, 630, 632, 633, 634, 636, 637, 638, 640, 642, 644, 646, 648, 650, 652, 654, 656, 658, 660, 662, 664, 666, 668, 669, 670, 672, 673, 674, 676, 680, 682, 684, 685, 687, 689, 691, 692, 693, 695, 697, 699, 701, 703, 705, 707, 709, 711, 713, 715, 717, 719, 721, 723, 725, 727, 729, 730, 732, 735, 737, 738, 741, 742, 743, 745, 747, 748, 749, 750, 751, 752, 755, 756, 757, 758, 760, 761, 765, 772, 774, 776, 778, 780, 786, 787, 794, 809, 815, 817, 820, 821, 824, 825, 826, 827, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 847, 852, 860, 865, 866, 868, 887, 889, 891, 893, 914, 915, 917, 929, 931, 935, 936, 938, 939, 940, 941, 943, 944, 945, 946, 948, 949, 950, 951, 952, 954, 956, 957, 959, 961, 963, 965, 967, 969, 971, 973, 975, 977, 979, 981, 983, 985, 987, 989, 990, 991, 993, 995, 997, 999, 1001, 1003, 1005, 1007, 1009, 1011, 1012, 1013, 1014, 1015, 1016, 1025, 1026, 1028, 1034, 1036, 1038, 1039, 1044, 1045, 1047, 1050, 1051, 1052, 1054, 1055, 1056, 1057, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1074, 1076, 1078, 1079, 1080, 1082, 1083, 1084, 1086, 1087, 1088, 1090, 1091, 1092, 1094, 1095, 1096, 1098, 1099, 1100, 1102, 1103, 1104, 1105, 1107, 1108, 1109, 1111, 1112, 1134, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155], "axi": [2, 8, 10, 11, 28, 32, 33, 43, 45, 71, 72, 73, 82, 85, 87, 93, 94, 97, 98, 99, 101, 111, 112, 113, 137, 138, 139, 140, 141, 142, 151, 152, 153, 154, 155, 156, 178, 179, 183, 190, 192, 193, 212, 216, 222, 224, 249, 250, 251, 259, 262, 264, 269, 270, 273, 274, 278, 282, 292, 293, 294, 297, 299, 305, 325, 326, 327, 328, 337, 338, 339, 340, 341, 342, 353, 356, 360, 361, 363, 364, 366, 368, 371, 382, 394, 399, 405, 414, 415, 461, 463, 466, 473, 486, 487, 488, 489, 490, 491, 492, 493, 505, 747, 765, 766, 775, 819, 865, 869, 870, 871, 875, 877, 926, 927, 928, 929, 930, 931, 935, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 957, 958, 959, 960, 961, 964, 965, 966, 967, 968, 969, 970, 971, 972, 977, 978, 979, 980, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1002, 1003, 1006, 1007, 1010, 1038, 1049, 1050, 1051, 1052, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112], "keepdim": [2, 8, 10, 68, 71, 72, 73, 82, 99, 101, 111, 113, 137, 138, 153, 154, 155, 156, 178, 179, 183, 190, 192, 249, 250, 251, 259, 297, 299, 305, 339, 340, 341, 342, 747, 819, 865, 891, 892, 893, 929, 930, 931, 1050, 1051, 1052, 1071, 1072, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112], "fals": [2, 8, 9, 10, 11, 26, 68, 71, 72, 73, 82, 93, 99, 101, 111, 113, 116, 117, 118, 119, 120, 129, 130, 137, 138, 151, 152, 153, 154, 155, 156, 159, 166, 167, 168, 169, 170, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 353, 360, 363, 369, 370, 371, 424, 430, 433, 435, 436, 437, 442, 461, 480, 481, 492, 496, 497, 500, 505, 508, 510, 511, 512, 514, 518, 519, 520, 522, 526, 527, 528, 529, 531, 533, 535, 539, 540, 541, 543, 545, 547, 549, 551, 552, 553, 555, 557, 559, 561, 563, 565, 567, 569, 571, 573, 575, 579, 580, 583, 584, 587, 588, 589, 592, 593, 594, 596, 600, 601, 602, 604, 608, 609, 610, 612, 614, 616, 617, 618, 620, 621, 622, 624, 625, 626, 628, 629, 630, 632, 633, 634, 636, 637, 638, 640, 642, 644, 646, 648, 650, 652, 654, 656, 658, 660, 662, 664, 666, 668, 669, 670, 672, 673, 674, 676, 680, 682, 684, 685, 687, 689, 691, 692, 693, 695, 697, 699, 701, 703, 705, 707, 709, 711, 713, 715, 717, 719, 721, 723, 725, 727, 729, 730, 732, 735, 737, 738, 741, 742, 743, 745, 747, 748, 749, 750, 751, 752, 755, 756, 760, 761, 765, 768, 772, 774, 776, 778, 780, 784, 791, 793, 794, 796, 797, 809, 819, 821, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 865, 866, 867, 868, 887, 889, 891, 892, 893, 914, 929, 930, 931, 936, 938, 940, 941, 943, 945, 946, 948, 950, 951, 952, 954, 956, 957, 959, 961, 963, 965, 967, 969, 971, 973, 975, 977, 979, 981, 983, 985, 987, 989, 990, 991, 993, 995, 997, 999, 1001, 1003, 1005, 1007, 1009, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1021, 1025, 1026, 1027, 1028, 1034, 1036, 1038, 1039, 1044, 1045, 1047, 1050, 1051, 1052, 1054, 1055, 1056, 1057, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1074, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1123, 1124, 1146, 1147, 1150, 1151, 1152, 1153, 1154, 1155], "all_equ": [2, 129, 130, 183, 277, 315, 316, 747, 752], "equality_matrix": [2, 9, 129, 130, 183, 191, 277, 315, 316, 747, 748, 749, 750, 751, 752], "contain": [2, 9, 116, 119, 120, 129, 130, 173, 176, 177, 178, 179, 182, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 346, 347, 348, 349, 350, 352, 353, 355, 356, 361, 363, 364, 365, 366, 367, 370, 371, 383, 394, 397, 398, 400, 405, 406, 409, 411, 418, 420, 421, 422, 424, 433, 436, 461, 482, 483, 486, 495, 499, 511, 512, 515, 516, 519, 520, 523, 524, 527, 529, 532, 533, 536, 537, 540, 541, 544, 545, 548, 549, 552, 553, 556, 557, 560, 561, 564, 565, 568, 569, 572, 573, 576, 577, 580, 581, 584, 585, 588, 590, 593, 594, 598, 601, 602, 605, 606, 609, 610, 613, 614, 617, 618, 621, 622, 625, 626, 629, 630, 633, 634, 637, 638, 641, 642, 645, 646, 649, 650, 653, 654, 657, 658, 661, 662, 665, 666, 669, 670, 673, 674, 677, 678, 679, 680, 683, 685, 688, 689, 692, 693, 697, 700, 701, 704, 705, 708, 709, 712, 713, 716, 717, 720, 721, 724, 725, 728, 729, 733, 734, 738, 742, 743, 746, 747, 748, 749, 751, 753, 756, 759, 760, 762, 764, 765, 772, 775, 776, 779, 786, 795, 815, 816, 817, 824, 829, 834, 838, 842, 852, 855, 858, 859, 864, 865, 866, 868, 869, 871, 872, 875, 877, 878, 880, 881, 883, 884, 886, 887, 890, 895, 897, 898, 900, 901, 903, 904, 906, 907, 909, 911, 913, 914, 916, 917, 919, 920, 922, 923, 925, 926, 928, 929, 931, 935, 936, 939, 941, 944, 946, 949, 951, 952, 955, 957, 961, 965, 968, 969, 972, 973, 976, 977, 980, 981, 985, 988, 990, 991, 995, 999, 1002, 1003, 1007, 1011, 1012, 1013, 1014, 1015, 1028, 1033, 1034, 1037, 1038, 1039, 1040, 1043, 1044, 1046, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1059, 1060, 1061, 1064, 1066, 1071, 1072, 1075, 1076, 1079, 1080, 1083, 1084, 1087, 1088, 1091, 1092, 1095, 1096, 1099, 1100, 1103, 1104, 1105, 1108, 1109, 1112, 1113, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1143, 1144, 1145, 1146, 1147, 1150, 1154, 1156, 1157], "With": [2, 9, 129, 130, 174, 175, 178, 179, 180, 181, 183, 191, 276, 277, 281, 284, 290, 292, 296, 313, 314, 315, 316, 327, 328, 331, 332, 346, 353, 355, 366, 394, 396, 397, 398, 399, 400, 401, 405, 416, 424, 433, 436, 461, 483, 499, 511, 524, 528, 529, 532, 540, 545, 549, 552, 569, 572, 573, 576, 581, 593, 606, 617, 618, 621, 658, 678, 679, 685, 688, 689, 692, 705, 708, 721, 724, 725, 728, 734, 735, 742, 747, 748, 749, 750, 751, 752, 756, 764, 765, 772, 775, 776, 779, 780, 810, 815, 816, 817, 852, 855, 858, 859, 864, 865, 866, 868, 869, 871, 872, 875, 877, 891, 893, 920, 922, 935, 936, 939, 946, 949, 951, 952, 955, 956, 965, 968, 969, 972, 977, 980, 985, 988, 989, 990, 999, 1002, 1033, 1034, 1037, 1038, 1039, 1040, 1042, 1043, 1044, 1046, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1060, 1061, 1064, 1071, 1072, 1075, 1099, 1104, 1105, 1108], "x1": [2, 9, 129, 130, 183, 191, 276, 277, 283, 288, 295, 313, 314, 315, 316, 353, 364, 424, 456, 461, 499, 511, 524, 527, 528, 541, 544, 549, 552, 557, 560, 561, 564, 565, 568, 569, 572, 585, 588, 589, 590, 593, 601, 609, 610, 613, 614, 617, 618, 621, 634, 637, 638, 641, 658, 661, 662, 665, 670, 673, 674, 677, 678, 679, 680, 683, 684, 689, 692, 697, 700, 701, 704, 729, 730, 733, 747, 748, 749, 750, 751, 752, 755, 852, 857, 865, 869, 871, 887, 890, 901, 903, 911, 913, 920, 922, 926, 928, 1050, 1054], "0": [2, 9, 25, 27, 28, 29, 35, 43, 46, 55, 87, 98, 99, 105, 109, 111, 127, 128, 129, 130, 137, 138, 141, 142, 143, 144, 153, 154, 159, 163, 176, 177, 178, 179, 180, 181, 182, 183, 187, 191, 208, 209, 210, 212, 213, 222, 225, 234, 235, 236, 260, 264, 274, 275, 276, 277, 280, 281, 284, 286, 287, 290, 291, 292, 296, 297, 301, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 347, 351, 352, 353, 366, 368, 369, 370, 371, 394, 396, 397, 398, 399, 400, 401, 405, 406, 410, 414, 415, 419, 420, 421, 422, 423, 424, 430, 433, 435, 436, 437, 444, 461, 463, 466, 470, 473, 477, 480, 481, 483, 486, 487, 488, 489, 490, 491, 492, 493, 495, 499, 502, 504, 505, 509, 511, 512, 515, 516, 519, 520, 523, 524, 528, 529, 532, 533, 536, 537, 540, 541, 544, 545, 548, 549, 552, 557, 560, 565, 568, 569, 572, 573, 574, 575, 576, 577, 580, 581, 584, 593, 598, 602, 605, 606, 607, 608, 610, 617, 618, 621, 642, 645, 646, 649, 654, 657, 658, 678, 679, 680, 683, 685, 688, 689, 692, 697, 700, 701, 704, 705, 708, 709, 712, 713, 716, 717, 720, 721, 724, 725, 728, 734, 735, 736, 737, 738, 742, 743, 746, 747, 748, 749, 750, 751, 752, 755, 756, 759, 760, 762, 764, 765, 766, 772, 775, 776, 779, 780, 785, 794, 800, 803, 804, 809, 815, 816, 817, 821, 823, 824, 825, 826, 827, 834, 835, 836, 837, 838, 839, 840, 841, 852, 853, 855, 857, 858, 859, 864, 865, 866, 868, 869, 871, 872, 875, 876, 877, 884, 914, 920, 922, 923, 924, 925, 929, 931, 935, 936, 939, 941, 944, 946, 949, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 972, 973, 976, 977, 980, 985, 986, 987, 988, 989, 990, 991, 994, 995, 996, 997, 998, 999, 1002, 1007, 1009, 1015, 1027, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1059, 1060, 1061, 1064, 1071, 1072, 1075, 1076, 1079, 1080, 1083, 1092, 1093, 1094, 1095, 1096, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1108, 1113, 1125, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1156, 1157], "mix": [2, 9, 129, 130, 180, 181, 183, 350, 353, 355, 366, 424, 452, 461, 499, 511, 524, 549, 552, 569, 572, 593, 617, 618, 621, 678, 679, 689, 692, 747, 748, 749, 764, 772, 775, 776, 779, 815, 816, 817, 852, 855, 858, 859, 864, 865, 920, 922, 935, 936, 939, 946, 949, 951, 952, 955, 1033, 1034, 1037, 1050, 1054, 1071, 1072, 1075, 1080, 1083, 1099], "nativearrai": [2, 9, 48, 116, 119, 120, 129, 130, 351, 353, 356, 359, 360, 363, 364, 366, 368, 371, 384, 392, 394, 396, 397, 398, 399, 400, 401, 405, 406, 407, 409, 413, 414, 415, 416, 417, 419, 420, 421, 423, 424, 430, 431, 432, 433, 436, 442, 444, 447, 449, 450, 452, 456, 461, 480, 481, 483, 499, 505, 506, 511, 512, 515, 516, 519, 520, 523, 524, 527, 529, 532, 533, 536, 537, 540, 541, 544, 545, 548, 549, 552, 553, 556, 557, 560, 561, 564, 565, 568, 569, 572, 573, 576, 577, 580, 581, 584, 585, 588, 590, 593, 594, 597, 598, 601, 602, 605, 606, 609, 610, 613, 614, 617, 618, 621, 622, 625, 626, 629, 630, 633, 634, 637, 638, 641, 642, 645, 646, 649, 650, 653, 654, 657, 658, 661, 662, 665, 666, 669, 670, 673, 674, 677, 678, 679, 680, 683, 685, 688, 689, 692, 693, 696, 697, 700, 701, 704, 705, 708, 709, 712, 713, 716, 717, 720, 721, 724, 725, 728, 729, 733, 734, 738, 739, 742, 743, 746, 747, 748, 749, 751, 755, 756, 759, 760, 762, 764, 765, 766, 769, 770, 771, 773, 774, 775, 776, 777, 779, 784, 786, 787, 789, 790, 791, 800, 803, 804, 809, 810, 815, 816, 817, 819, 820, 821, 823, 824, 826, 829, 831, 834, 836, 838, 840, 842, 844, 847, 849, 852, 853, 855, 857, 858, 859, 861, 864, 865, 866, 868, 869, 871, 872, 874, 875, 877, 878, 880, 881, 883, 884, 886, 887, 890, 891, 893, 895, 897, 898, 900, 901, 903, 904, 906, 907, 909, 910, 911, 913, 914, 916, 917, 919, 920, 922, 923, 925, 926, 928, 929, 931, 932, 934, 935, 936, 939, 941, 944, 946, 949, 951, 952, 955, 957, 960, 961, 964, 965, 968, 969, 972, 973, 976, 977, 980, 981, 984, 985, 988, 990, 991, 994, 995, 998, 999, 1002, 1003, 1006, 1007, 1010, 1015, 1017, 1027, 1033, 1034, 1037, 1038, 1039, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1064, 1066, 1069, 1071, 1072, 1075, 1076, 1079, 1080, 1083, 1084, 1087, 1092, 1095, 1096, 1099, 1100, 1103, 1104, 1105, 1108, 1109, 1112], "native_arrai": [2, 9, 129, 130, 159, 165, 171, 180, 181, 183, 191, 277, 315, 316, 394, 396, 397, 398, 399, 400, 401, 405, 416, 424, 433, 436, 461, 483, 499, 511, 529, 532, 549, 552, 569, 572, 573, 576, 593, 606, 617, 618, 621, 678, 679, 685, 688, 689, 692, 721, 724, 725, 728, 747, 748, 749, 750, 751, 752, 756, 764, 765, 772, 775, 776, 779, 810, 815, 816, 817, 852, 855, 858, 859, 864, 865, 869, 871, 872, 875, 877, 920, 922, 935, 936, 939, 946, 949, 951, 952, 955, 965, 968, 969, 972, 977, 980, 990, 999, 1002, 1033, 1034, 1037, 1038, 1039, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1071, 1072, 1075, 1076, 1079, 1099, 1104, 1105, 1108], "argsort": [2, 151, 152, 183, 337, 338, 1060], "descend": [2, 11, 93, 151, 152, 183, 193, 269, 278, 293, 337, 338, 865, 914, 916, 917, 919, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070], "stabl": [2, 11, 93, 151, 152, 183, 193, 269, 278, 293, 337, 338, 346, 366, 383, 747, 782, 783, 805, 806, 811, 812, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070], "asin": [2, 127, 128, 183, 313, 314, 511, 1113], "asinh": [2, 127, 128, 183, 313, 314, 511, 1113], "atan": [2, 127, 128, 183, 313, 314, 511, 545, 1113], "atan2": [2, 127, 128, 183, 313, 314, 511, 1113], "atanh": [2, 127, 128, 183, 313, 314, 511, 540, 738, 742, 1113], "binary_cross_entropi": [2, 139, 140, 183, 325, 326, 935], "pred": [2, 17, 33, 94, 139, 140, 183, 201, 216, 270, 279, 282, 294, 325, 326, 356, 360, 363, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950], "epsilon": [2, 17, 33, 55, 94, 139, 140, 143, 144, 183, 187, 201, 216, 234, 236, 270, 275, 279, 282, 286, 294, 317, 318, 325, 326, 329, 330, 356, 360, 363, 370, 821, 823, 824, 825, 826, 827, 834, 835, 836, 837, 865, 886, 895, 897, 904, 906, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 1033, 1034, 1035, 1036, 1037, 1148, 1149, 1150, 1151, 1152], "1e": [2, 17, 33, 55, 94, 139, 140, 143, 144, 183, 187, 201, 216, 234, 236, 270, 275, 279, 282, 286, 294, 317, 318, 325, 326, 329, 330, 356, 360, 363, 370, 371, 747, 783, 821, 823, 824, 825, 826, 827, 834, 835, 836, 837, 865, 914, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 1033, 1034, 1035, 1036, 1037, 1113, 1150, 1151, 1152, 1153, 1155], "07": [2, 17, 33, 94, 139, 140, 183, 187, 201, 216, 234, 270, 275, 279, 282, 286, 294, 317, 318, 325, 326, 370, 821, 823, 824, 825, 826, 827, 834, 835, 836, 837, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 1150, 1151, 1152], "bitwise_and": [2, 127, 128, 183, 313, 314, 511], "bitwise_invert": [2, 127, 128, 183, 313, 314, 511], "bitwise_left_shift": [2, 127, 128, 183, 313, 314, 511], "bitwise_or": [2, 127, 128, 183, 313, 314, 511], "bitwise_right_shift": [2, 127, 128, 183, 313, 314, 511], "bitwise_xor": [2, 127, 128, 183, 313, 314, 511], "can_cast": [2, 123, 124, 183, 280, 309, 310, 356, 361, 424, 437], "dtype": [2, 24, 82, 101, 123, 124, 153, 154, 178, 179, 183, 208, 259, 280, 299, 309, 310, 339, 340, 351, 353, 356, 361, 362, 368, 405, 406, 407, 408, 409, 410, 412, 413, 414, 417, 418, 419, 422, 423, 424, 428, 429, 430, 431, 433, 434, 435, 436, 437, 438, 439, 440, 441, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 460, 461, 501, 511, 565, 568, 747, 755, 756, 800, 816, 852, 860, 951, 965, 968, 1033, 1034, 1037, 1038, 1044, 1046, 1050, 1051, 1052, 1060, 1066, 1069, 1071, 1072, 1088, 1089, 1090, 1091, 1092, 1095, 1096, 1097, 1098, 1104, 1105, 1108, 1113, 1125, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1156, 1157], "float32": [2, 24, 123, 124, 183, 208, 280, 309, 310, 353, 361, 424, 428, 429, 433, 434, 435, 436, 437, 445, 1033, 1034, 1037], "float64": [2, 24, 123, 124, 361, 424, 430, 433, 434, 436, 445], "bool": [2, 24, 116, 117, 118, 119, 120, 123, 124, 178, 179, 183, 189, 343, 344, 353, 360, 361, 363, 371, 402, 403, 405, 412, 424, 430, 433, 434, 436, 439, 440, 441, 442, 445, 448, 449, 450, 460, 461, 480, 481, 496, 505, 508, 511, 549, 552, 553, 556, 561, 564, 569, 572, 590, 593, 614, 617, 618, 621, 622, 625, 626, 629, 630, 633, 634, 637, 638, 641, 662, 665, 666, 669, 670, 673, 689, 692, 747, 748, 751, 755, 756, 765, 768, 772, 774, 784, 786, 791, 793, 794, 795, 796, 809, 819, 820, 821, 847, 865, 866, 868, 891, 893, 914, 929, 931, 951, 990, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1021, 1025, 1026, 1027, 1038, 1039, 1050, 1051, 1052, 1060, 1061, 1064, 1066, 1069, 1071, 1076, 1079, 1080, 1083, 1084, 1087, 1088, 1091, 1092, 1095, 1096, 1100, 1103, 1104, 1105, 1108, 1109, 1112], "ceil": [2, 127, 128, 183, 313, 314, 405, 406, 511, 1113], "choleski": [2, 137, 138, 180, 181, 865], "upper": [2, 26, 137, 138, 178, 179, 405, 410, 421, 865, 866, 867, 868, 907, 909, 1038, 1044, 1046], "clip": [2, 141, 142, 178, 179, 183, 281, 327, 328, 356, 360, 363, 366, 369, 371, 511, 678, 679, 747, 759, 760, 762, 951, 956, 1113], "x_min": [2, 27, 141, 142, 178, 179, 183, 210, 281, 327, 328, 366, 371, 951, 952, 953, 954, 955, 956], "x_max": [2, 27, 141, 142, 178, 179, 183, 210, 281, 327, 328, 366, 371, 951, 952, 953, 954, 955, 956], "roll": [2, 27, 141, 142, 183, 292, 327, 328, 360, 364, 951, 952, 953, 989], "8": [2, 27, 141, 142, 180, 181, 183, 276, 290, 313, 314, 331, 332, 346, 349, 353, 360, 365, 369, 394, 398, 461, 483, 511, 524, 528, 549, 552, 573, 576, 581, 593, 617, 618, 621, 658, 678, 679, 705, 708, 721, 724, 725, 728, 747, 756, 775, 852, 859, 865, 869, 871, 872, 875, 877, 901, 903, 920, 922, 935, 936, 939, 951, 952, 953, 955, 969, 972, 977, 980, 990, 1038, 1039, 1040, 1041, 1042, 1050, 1054, 1055, 1056, 1071, 1072, 1075, 1099, 1113, 1134, 1145], "concat": [2, 141, 142, 178, 179, 183, 327, 328, 461, 490, 491, 492, 493, 505, 747, 774, 951, 1113], "xs": [2, 28, 141, 142, 183, 212, 327, 328, 360, 461, 484, 488, 490, 491, 492, 747, 748, 751, 756, 821, 828, 951, 957, 958, 959, 960], "constant_pad": [2, 141, 142, 183, 327, 328, 951], "pad_width": [2, 29, 115, 141, 142, 183, 213, 306, 327, 328, 951, 961, 962, 963, 964, 1007, 1008, 1009, 1010], "valu": [2, 29, 141, 142, 178, 179, 180, 181, 182, 183, 213, 306, 327, 328, 347, 353, 355, 356, 360, 361, 362, 363, 364, 366, 368, 371, 383, 405, 406, 410, 412, 413, 414, 415, 424, 430, 439, 440, 441, 461, 473, 504, 505, 511, 512, 515, 516, 524, 529, 532, 537, 573, 576, 588, 590, 593, 594, 597, 606, 609, 610, 613, 614, 617, 618, 621, 634, 637, 638, 641, 678, 679, 680, 683, 689, 692, 693, 696, 697, 700, 705, 708, 743, 746, 747, 759, 760, 762, 763, 768, 774, 775, 776, 779, 785, 788, 792, 802, 803, 804, 805, 806, 807, 820, 821, 823, 824, 826, 828, 834, 836, 847, 851, 852, 853, 854, 855, 856, 857, 858, 859, 862, 863, 864, 865, 874, 886, 895, 897, 904, 906, 907, 909, 910, 911, 913, 914, 916, 917, 919, 929, 931, 951, 952, 955, 961, 962, 963, 964, 977, 980, 981, 984, 1007, 1009, 1010, 1011, 1012, 1013, 1015, 1019, 1020, 1021, 1022, 1023, 1028, 1031, 1032, 1033, 1034, 1037, 1038, 1039, 1040, 1041, 1043, 1044, 1046, 1048, 1050, 1051, 1052, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1064, 1066, 1069, 1071, 1076, 1079, 1080, 1083, 1084, 1087, 1088, 1091, 1092, 1095, 1096, 1100, 1103, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1154], "co": [2, 127, 128, 174, 183, 313, 314, 366, 382, 511, 519, 520, 584, 747, 774, 1113], "cosh": [2, 127, 128, 183, 313, 314, 511, 519, 520, 1113], "cross": [2, 137, 138, 180, 181, 865, 935, 936, 939, 941, 944, 946, 949, 1113], "cross_entropi": [2, 139, 140, 183, 325, 326, 356, 360, 363, 935, 946, 949], "det": [2, 137, 138, 180, 181, 865, 910], "diagon": [2, 137, 138, 180, 181, 405, 410, 420, 421, 865, 923, 925], "offset": [2, 35, 55, 109, 137, 138, 143, 144, 183, 236, 329, 330, 865, 875, 876, 877, 923, 924, 925, 1033, 1034, 1035, 1036, 1037], "axis1": [2, 35, 104, 137, 138, 141, 142, 183, 300, 327, 328, 865, 875, 876, 877, 951, 999, 1000, 1001, 1002], "axis2": [2, 35, 137, 138, 865, 875, 876, 877], "divid": [2, 127, 128, 178, 179, 183, 313, 314, 353, 359, 511, 609, 610, 613, 747, 811, 951, 990], "eigh": [2, 137, 138, 180, 181, 865], "namedtupl": [2, 37, 83, 137, 138, 865, 878, 879, 880, 907, 908, 909, 914, 1055, 1056, 1057], "eigvalsh": [2, 137, 138, 180, 181, 865], "einsum": [2, 153, 154, 183, 339, 340, 1071, 1099], "equat": [2, 39, 153, 154, 183, 218, 339, 340, 865, 911, 913, 1071, 1072, 1073, 1074, 1075, 1099], "equal": [2, 127, 128, 178, 179, 183, 313, 314, 353, 360, 361, 405, 410, 412, 413, 424, 430, 511, 557, 560, 565, 568, 618, 622, 625, 626, 629, 697, 700, 705, 708, 747, 748, 751, 755, 756, 865, 875, 877, 886, 895, 897, 904, 906, 951, 952, 955, 961, 964, 990, 1007, 1010, 1038, 1044, 1046, 1055, 1056, 1057, 1059, 1060, 1061, 1064, 1066, 1069, 1071, 1080, 1083, 1092, 1095, 1096, 1100, 1103], "erf": [2, 127, 128, 183, 313, 314, 511], "exp": [2, 127, 128, 183, 313, 314, 511, 527, 602, 605, 658, 661, 1113], "expand_dim": [2, 141, 142, 183, 327, 328, 366, 369, 951, 1113], "expm1": [2, 127, 128, 183, 313, 314, 511], "flip": [2, 141, 142, 183, 327, 328, 368, 369, 371, 511, 553, 556, 951, 977, 980, 1113], "floor": [2, 127, 128, 183, 313, 314, 511, 565, 568, 610, 747, 773, 1113], "floor_divid": [2, 127, 128, 183, 313, 314, 511, 588, 609], "gather_nd": [2, 129, 130, 178, 179, 183, 284, 315, 316, 747, 780, 1113], "indic": [2, 48, 129, 130, 178, 179, 183, 227, 284, 315, 316, 349, 367, 371, 394, 399, 511, 709, 712, 747, 775, 776, 777, 778, 779, 780, 787, 800, 803, 804, 852, 853, 854, 855, 856, 857, 858, 859, 865, 929, 931, 951, 985, 988, 1015, 1016, 1018, 1020, 1022, 1023, 1024, 1026, 1029, 1030, 1031, 1032, 1033, 1034, 1037, 1038, 1039, 1050, 1051, 1052, 1053, 1055, 1056, 1058, 1060, 1061, 1064, 1066, 1069, 1113, 1116, 1118, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1146, 1147], "union": [2, 48, 102, 116, 119, 120, 129, 130, 137, 138, 178, 179, 351, 353, 356, 359, 360, 361, 362, 363, 364, 366, 371, 394, 396, 397, 398, 399, 400, 401, 402, 403, 405, 406, 407, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 428, 429, 430, 431, 432, 438, 439, 440, 441, 442, 443, 444, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 460, 461, 477, 478, 479, 480, 481, 483, 486, 487, 488, 489, 494, 500, 502, 504, 505, 506, 507, 510, 511, 512, 515, 516, 519, 520, 523, 524, 527, 529, 532, 533, 536, 537, 540, 541, 544, 545, 548, 549, 552, 553, 556, 557, 560, 561, 564, 565, 568, 569, 572, 573, 576, 577, 580, 581, 584, 585, 588, 590, 593, 594, 597, 598, 601, 602, 605, 606, 609, 610, 613, 614, 617, 618, 621, 622, 625, 626, 629, 630, 633, 634, 637, 638, 641, 642, 645, 646, 649, 650, 653, 654, 657, 658, 661, 662, 665, 666, 669, 670, 673, 674, 677, 678, 679, 680, 683, 685, 688, 689, 692, 693, 696, 697, 700, 701, 704, 705, 708, 709, 712, 713, 716, 717, 720, 721, 724, 725, 728, 729, 733, 734, 738, 739, 742, 743, 746, 747, 748, 751, 755, 756, 759, 760, 762, 765, 766, 769, 770, 771, 773, 774, 775, 776, 777, 779, 784, 786, 787, 789, 790, 791, 800, 803, 804, 809, 810, 815, 816, 817, 819, 820, 821, 823, 824, 826, 829, 831, 834, 836, 838, 840, 842, 844, 847, 849, 852, 853, 855, 857, 858, 859, 861, 864, 865, 866, 868, 869, 871, 872, 874, 875, 877, 878, 880, 881, 883, 884, 886, 887, 890, 891, 893, 895, 897, 898, 900, 901, 903, 904, 906, 907, 909, 910, 911, 913, 914, 915, 916, 917, 919, 920, 922, 923, 925, 926, 928, 929, 931, 932, 934, 935, 936, 939, 941, 944, 946, 949, 951, 952, 955, 957, 960, 961, 964, 965, 968, 969, 972, 973, 976, 977, 980, 981, 984, 985, 988, 990, 991, 994, 995, 998, 999, 1002, 1003, 1006, 1007, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1026, 1027, 1033, 1034, 1037, 1038, 1039, 1040, 1041, 1043, 1044, 1046, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1064, 1066, 1069, 1071, 1072, 1075, 1076, 1079, 1080, 1083, 1084, 1087, 1092, 1095, 1096, 1099, 1100, 1103, 1104, 1105, 1108, 1109, 1112], "greater": [2, 127, 128, 178, 179, 183, 313, 314, 511, 516, 529, 532, 541, 544, 557, 560, 565, 568, 588, 593, 606, 609, 610, 613, 618, 697, 700, 701, 704, 709, 712, 743, 746, 865, 869, 871, 951, 991, 994, 1038, 1044, 1046], "greater_equ": [2, 127, 128, 183, 313, 314, 511, 593, 617], "inv": [2, 137, 138, 180, 181, 368, 865, 904, 1113], "isfinit": [2, 127, 128, 183, 313, 314, 511], "isinf": [2, 127, 128, 183, 313, 314, 511], "isnan": [2, 127, 128, 183, 313, 314, 511], "layer_norm": [2, 143, 144, 183, 329, 330, 1033], "normalized_idx": [2, 55, 143, 144, 183, 236, 329, 330, 1033, 1034, 1035, 1036, 1037], "05": [2, 55, 143, 144, 183, 236, 329, 330, 461, 1033, 1034, 1035, 1036, 1037], "scale": [2, 55, 143, 144, 183, 236, 329, 330, 360, 461, 503, 504, 821, 838, 840, 852, 860, 863, 864, 1033, 1034, 1035, 1036, 1037, 1134, 1142, 1145, 1150, 1153], "new_std": [2, 55, 143, 144, 183, 236, 329, 330, 1033, 1034, 1035, 1036, 1037, 1148, 1149], "less": [2, 127, 128, 174, 178, 179, 183, 313, 314, 347, 353, 360, 364, 365, 366, 511, 516, 519, 520, 523, 529, 532, 541, 544, 573, 576, 580, 584, 642, 645, 646, 649, 654, 657, 697, 700, 701, 704, 709, 712, 721, 724, 865, 886, 895, 897, 904, 906, 929, 931, 1038, 1044, 1046, 1071, 1100, 1103], "less_equ": [2, 127, 128, 183, 313, 314, 511], "log": [2, 127, 128, 183, 313, 314, 346, 347, 356, 360, 363, 366, 369, 405, 415, 511, 527, 601, 650, 653, 658, 661, 865, 874, 910, 1113], "log10": [2, 127, 128, 183, 313, 314, 511], "log1p": [2, 127, 128, 183, 313, 314, 511], "log2": [2, 127, 128, 183, 313, 314, 511], "logaddexp": [2, 127, 128, 183, 313, 314, 511, 527, 601], "logical_and": [2, 127, 128, 183, 313, 314, 511, 1113], "logical_not": [2, 127, 128, 183, 313, 314, 511, 1113], "logical_or": [2, 127, 128, 183, 313, 314, 511, 1113], "logical_xor": [2, 127, 128, 183, 313, 314, 511], "matmul": [2, 137, 138, 183, 323, 324, 351, 357, 366, 865, 914, 1113], "matrix_norm": [2, 137, 138, 178, 179, 865], "ord": [2, 68, 113, 137, 138, 178, 179, 865, 891, 892, 893, 929, 930, 931], "fro": [2, 68, 137, 138, 865, 891, 892, 893], "matrix_rank": [2, 137, 138, 180, 181, 865], "rtol": [2, 69, 79, 137, 138, 865, 886, 895, 896, 897, 904, 905, 906], "matrix_transpos": [2, 137, 138, 180, 181, 368, 865], "max": [2, 153, 154, 178, 179, 183, 339, 340, 424, 444, 447, 511, 678, 747, 759, 760, 762, 770, 803, 804, 865, 886, 895, 897, 904, 906, 1071, 1150, 1152], "mean": [2, 153, 154, 178, 179, 183, 189, 339, 340, 343, 344, 346, 347, 350, 353, 356, 360, 361, 362, 363, 366, 368, 369, 370, 371, 382, 383, 461, 490, 491, 492, 493, 505, 747, 770, 1011, 1012, 1013, 1014, 1015, 1021, 1038, 1043, 1055, 1056, 1071, 1113, 1125], "min": [2, 153, 154, 178, 179, 183, 339, 340, 424, 444, 447, 511, 679, 747, 770, 803, 804, 811, 865, 907, 909, 914, 916, 917, 919, 929, 931, 1071], "multipli": [2, 127, 128, 183, 313, 314, 353, 357, 359, 511, 747, 765], "neg": [2, 127, 128, 183, 313, 314, 356, 360, 363, 394, 396, 405, 406, 410, 511, 622, 625, 626, 629, 680, 683, 697, 700, 701, 704, 865, 914, 926, 928, 929, 931, 951, 969, 972, 985, 988, 1104, 1105, 1108, 1109, 1112], "not_equ": [2, 127, 128, 183, 313, 314, 511], "outer": [2, 137, 138, 180, 181, 865, 1011, 1012, 1013, 1014], "permute_dim": [2, 141, 142, 183, 327, 328, 951], "ax": [2, 78, 107, 137, 138, 141, 142, 178, 179, 183, 256, 327, 328, 351, 353, 361, 368, 461, 505, 747, 765, 865, 891, 893, 911, 913, 920, 921, 922, 929, 931, 951, 961, 964, 969, 972, 973, 974, 975, 976, 985, 988, 991, 994, 999, 1002, 1007, 1010, 1050, 1051, 1052, 1071, 1076, 1079, 1080, 1083, 1084, 1087, 1088, 1091, 1092, 1095, 1096, 1100, 1103, 1104, 1105, 1108, 1109, 1112], "pinv": [2, 137, 138, 180, 181, 865, 886, 1113], "posit": [2, 116, 117, 118, 127, 128, 183, 313, 314, 364, 369, 382, 404, 405, 410, 424, 444, 461, 485, 489, 493, 511, 512, 515, 622, 625, 626, 629, 680, 683, 701, 704, 747, 774, 865, 866, 868, 951, 965, 968, 985, 988, 1038, 1048, 1050, 1053, 1104, 1105, 1108, 1109, 1112, 1123, 1124], "pow": [2, 127, 128, 183, 313, 314, 511], "prod": [2, 153, 154, 178, 179, 183, 339, 340, 353, 361, 747, 770, 1071], "qr": [2, 137, 138, 180, 181, 865], "mode": [2, 83, 137, 138, 178, 179, 346, 353, 360, 383, 402, 403, 461, 490, 491, 492, 493, 505, 511, 524, 680, 683, 865, 907, 908, 909], "reduc": [2, 83, 137, 138, 178, 179, 368, 461, 505, 747, 770, 865, 907, 908, 909, 1050, 1051, 1052, 1071, 1076, 1079, 1080, 1083, 1084, 1087, 1088, 1091, 1092, 1095, 1096, 1100, 1103, 1104, 1105, 1108, 1109, 1112], "remaind": [2, 127, 128, 178, 179, 183, 313, 314, 511, 747, 773, 951, 990], "repeat": [2, 141, 142, 178, 179, 183, 327, 328, 347, 352, 353, 357, 359, 360, 747, 771, 951, 1003, 1006], "reshap": [2, 141, 142, 178, 179, 183, 327, 328, 363, 366, 368, 371, 951, 1113], "shape": [2, 86, 141, 142, 178, 179, 183, 263, 290, 291, 327, 328, 331, 332, 347, 351, 352, 353, 361, 362, 363, 364, 366, 368, 369, 370, 371, 394, 397, 405, 408, 409, 412, 413, 416, 418, 419, 420, 421, 422, 423, 424, 430, 431, 432, 461, 473, 501, 506, 511, 512, 515, 516, 519, 520, 523, 524, 527, 529, 532, 533, 536, 537, 541, 544, 549, 552, 553, 556, 557, 560, 561, 564, 565, 568, 569, 572, 573, 576, 577, 580, 581, 584, 593, 598, 601, 602, 605, 606, 617, 618, 621, 622, 625, 626, 629, 630, 633, 634, 637, 642, 645, 646, 649, 650, 653, 654, 657, 658, 661, 662, 665, 666, 669, 670, 673, 674, 677, 680, 683, 685, 688, 689, 692, 697, 700, 701, 704, 705, 708, 709, 712, 713, 716, 717, 720, 721, 724, 725, 728, 729, 733, 734, 747, 760, 762, 773, 776, 779, 784, 800, 803, 804, 810, 852, 854, 855, 856, 858, 859, 864, 865, 866, 868, 869, 871, 872, 875, 877, 878, 880, 881, 883, 884, 886, 887, 890, 895, 897, 898, 900, 901, 903, 904, 906, 907, 909, 911, 913, 914, 916, 917, 919, 923, 925, 926, 928, 935, 936, 939, 941, 944, 946, 949, 951, 952, 955, 957, 960, 961, 964, 965, 968, 969, 972, 973, 976, 977, 980, 981, 982, 983, 984, 985, 988, 990, 991, 994, 995, 998, 999, 1002, 1007, 1010, 1038, 1040, 1041, 1042, 1043, 1044, 1046, 1047, 1050, 1051, 1053, 1060, 1061, 1064, 1066, 1069, 1071, 1072, 1075, 1099, 1104, 1105, 1108, 1109, 1112, 1113, 1134, 1136, 1137, 1138, 1139, 1140, 1141, 1148, 1149], "shift": [2, 87, 141, 142, 183, 264, 292, 327, 328, 353, 364, 511, 557, 560, 565, 568, 951, 985, 986, 987, 988, 989], "round": [2, 127, 128, 173, 174, 175, 183, 313, 314, 346, 347, 348, 349, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 366, 368, 369, 370, 371, 382, 511, 524, 573, 576, 588, 606, 609, 610, 613, 680, 683, 721, 724, 743, 746, 1113], "sign": [2, 127, 128, 174, 183, 313, 314, 346, 367, 371, 405, 406, 511, 512, 515, 524, 541, 544, 565, 568, 680, 683, 701, 704, 865, 874, 910, 1055, 1056, 1057, 1059, 1071, 1088, 1091, 1096], "sin": [2, 127, 128, 183, 313, 314, 359, 366, 511, 747, 774, 1113], "sinh": [2, 127, 128, 183, 313, 314, 511, 1113], "solv": [2, 137, 138, 180, 181, 367, 382, 865], "sort": [2, 152, 178, 179, 180, 181, 182, 183, 338, 351, 865, 878, 880, 914, 916, 917, 919, 1061, 1064], "sparse_cross_entropi": [2, 139, 140, 183, 325, 326, 935], "sqrt": [2, 127, 128, 183, 313, 314, 511, 865, 929, 931], "squar": [2, 127, 128, 183, 313, 314, 511, 721, 724, 852, 855, 865, 866, 868, 872, 874, 878, 880, 881, 883, 884, 894, 910, 911, 913, 914], "squeez": [2, 141, 142, 183, 327, 328, 951, 1113], "stack": [2, 141, 142, 178, 179, 183, 327, 328, 366, 405, 420, 421, 865, 872, 875, 877, 878, 880, 881, 883, 884, 886, 887, 890, 894, 895, 897, 898, 900, 904, 906, 907, 909, 914, 916, 917, 919, 923, 925, 951, 1015, 1016, 1025, 1026, 1113, 1134, 1143], "std": [2, 153, 154, 183, 339, 340, 353, 1038, 1043, 1055, 1056, 1071], "correct": [2, 99, 111, 153, 154, 183, 297, 305, 339, 340, 347, 348, 350, 356, 360, 361, 362, 364, 424, 456, 951, 952, 955, 1071, 1092, 1093, 1094, 1095, 1100, 1101, 1102, 1103, 1113], "subtract": [2, 127, 128, 183, 313, 314, 353, 359, 511], "sum": [2, 153, 154, 178, 179, 183, 339, 340, 356, 360, 361, 363, 366, 461, 490, 491, 492, 493, 505, 511, 524, 527, 601, 658, 661, 747, 766, 770, 803, 804, 852, 864, 865, 914, 923, 925, 929, 931, 1071, 1072, 1075, 1092, 1095], "svd": [2, 137, 138, 180, 181, 865, 917, 1113], "full_matric": [2, 102, 137, 138, 865, 914, 915, 917], "tupl": [2, 102, 116, 117, 118, 119, 120, 137, 138, 178, 179, 351, 360, 361, 362, 364, 368, 369, 370, 383, 402, 403, 405, 407, 408, 412, 417, 418, 422, 424, 432, 446, 461, 480, 747, 774, 810, 852, 855, 858, 859, 865, 886, 895, 897, 904, 906, 914, 915, 917, 920, 922, 929, 931, 951, 957, 960, 961, 964, 969, 972, 973, 976, 985, 988, 991, 994, 995, 998, 1007, 1010, 1011, 1012, 1013, 1014, 1015, 1017, 1018, 1020, 1022, 1023, 1024, 1026, 1027, 1029, 1030, 1031, 1032, 1038, 1043, 1044, 1046, 1050, 1053, 1055, 1056, 1057, 1058, 1071, 1076, 1079, 1080, 1083, 1084, 1087, 1088, 1091, 1092, 1095, 1096, 1100, 1103, 1104, 1105, 1108, 1109, 1112], "svdval": [2, 137, 138, 180, 181, 865, 916], "swapax": [2, 141, 142, 183, 327, 328, 951], "axis0": [2, 104, 141, 142, 183, 300, 327, 328, 951, 999, 1000, 1001, 1002], "tan": [2, 127, 128, 183, 296, 313, 314, 352, 356, 360, 363, 364, 366, 511, 529, 532, 540, 545, 735, 742, 1055, 1056, 1057, 1060, 1061, 1064, 1113], "56": [2, 105, 127, 128, 183, 296, 301, 313, 314, 353, 511, 540, 545, 721, 724, 734, 735, 736, 737, 742, 865, 901, 903, 1071, 1072, 1075, 1099], "19": [2, 105, 127, 128, 183, 296, 301, 313, 314, 353, 511, 540, 545, 569, 572, 734, 735, 736, 737, 742, 865, 875, 877], "tanh": [2, 127, 128, 183, 313, 314, 366, 394, 511, 540, 545, 1113], "tensordot": [2, 137, 138, 180, 181, 865], "tile": [2, 141, 142, 183, 327, 328, 951, 1113], "rep": [2, 108, 141, 142, 183, 303, 327, 328, 951, 1003, 1004, 1005, 1006], "trace": [2, 137, 138, 178, 179, 180, 181, 366, 383, 747, 793, 794, 796, 865], "trunc": [2, 127, 128, 183, 313, 314, 511], "var": [2, 153, 154, 183, 189, 339, 340, 343, 344, 353, 366, 1011, 1012, 1013, 1071], "vecdot": [2, 137, 138, 180, 181, 865], "vector_norm": [2, 137, 138, 178, 179, 865], "vector_to_skew_symmetric_matrix": [2, 137, 138, 180, 181, 865, 1113], "zero_pad": [2, 141, 142, 183, 327, 328, 951, 1113], "method": [3, 6, 7, 9, 24, 25, 27, 46, 48, 87, 105, 123, 124, 127, 128, 129, 130, 141, 142, 157, 158, 178, 179, 180, 181, 182, 188, 189, 191, 208, 209, 210, 225, 227, 264, 276, 277, 280, 281, 284, 290, 292, 296, 301, 309, 310, 313, 314, 315, 316, 327, 328, 331, 332, 343, 344, 348, 351, 352, 353, 355, 356, 359, 364, 366, 367, 370, 371, 383, 394, 396, 397, 398, 399, 400, 401, 405, 411, 416, 433, 434, 435, 437, 511, 512, 513, 525, 526, 528, 529, 532, 540, 545, 549, 552, 569, 572, 573, 574, 575, 576, 581, 593, 606, 607, 608, 610, 617, 618, 621, 658, 678, 679, 685, 688, 689, 692, 705, 708, 721, 724, 725, 728, 735, 736, 737, 742, 747, 748, 749, 750, 752, 763, 764, 775, 776, 777, 778, 780, 803, 804, 815, 817, 821, 834, 836, 838, 840, 852, 858, 864, 865, 866, 868, 869, 871, 872, 935, 936, 939, 951, 952, 953, 954, 956, 965, 968, 969, 972, 977, 980, 985, 986, 987, 989, 990, 999, 1002, 1015, 1016, 1026, 1027, 1028, 1033, 1034, 1037, 1038, 1040, 1042, 1043, 1044, 1046, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1060, 1061, 1064, 1071, 1072, 1075, 1076, 1079, 1099, 1104, 1105, 1108, 1113, 1134, 1145, 1146, 1147], "collect": [116, 178, 179, 355, 382, 394, 402, 461, 747, 821, 852, 935, 1015, 1028, 1033, 1038, 1120, 1134, 1148, 1150], "accept": [116, 346, 347, 352, 353, 355, 356, 359, 360, 362, 363, 364, 368, 405, 416, 424, 433, 436, 511, 524, 529, 532, 549, 552, 569, 572, 573, 576, 581, 606, 666, 669, 670, 673, 689, 692, 701, 704, 705, 708, 721, 724, 725, 728, 734, 747, 775, 852, 855, 864, 865, 872, 951, 965, 968, 969, 972, 985, 988, 1033, 1034, 1037, 1055, 1056, 1057, 1060, 1061, 1064, 1071, 1076, 1079, 1080, 1083, 1104, 1105, 1108, 1113], "args_to_ivi": 116, "arg": [116, 117, 118, 159, 163, 178, 179, 349, 366, 368, 370, 461, 470, 485, 489, 493, 505, 747, 804, 1123, 1124, 1146, 1147], "include_deriv": [116, 117, 118, 119, 120, 1015, 1017, 1027], "kwarg": [116, 117, 118, 159, 163, 176, 177, 178, 179, 180, 181, 182, 183, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 366, 368, 370, 461, 470, 485, 489, 493, 747, 797, 1123, 1124, 1146, 1147], "keyword": [116, 117, 118, 178, 179, 180, 181, 182, 351, 361, 362, 363, 364, 369, 405, 416, 461, 470, 471, 485, 489, 493, 747, 754, 797, 1015, 1021, 1071, 1096, 1146, 1147], "variabl": [116, 117, 118, 119, 120, 178, 179, 180, 181, 352, 357, 360, 361, 363, 364, 369, 370, 371, 383, 747, 757, 789, 790, 791, 792, 793, 794, 796, 813, 821, 824, 826, 828, 829, 831, 833, 834, 836, 838, 840, 842, 844, 847, 850, 852, 863, 865, 911, 913, 1011, 1012, 1013, 1014, 1033, 1034, 1037, 1113, 1123, 1124, 1125, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157], "form": [116, 117, 118, 119, 120, 174, 178, 179, 345, 356, 370, 371, 405, 407, 417, 420, 421, 747, 753, 821, 824, 826, 829, 831, 834, 836, 838, 840, 842, 844, 852, 865, 866, 868, 872, 875, 877, 878, 880, 881, 883, 884, 886, 895, 897, 898, 900, 904, 906, 907, 909, 911, 913, 914, 916, 917, 919, 923, 925, 1015, 1017, 1027], "nest": [116, 117, 118, 119, 120, 178, 179, 180, 181, 182, 351, 356, 359, 360, 368, 369, 370, 383, 461, 485, 489, 493, 747, 815, 1011, 1012, 1013, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1146, 1147, 1150, 1151, 1152, 1153, 1154, 1155], "otherwis": [116, 117, 118, 119, 120, 159, 171, 178, 179, 359, 361, 362, 364, 366, 368, 405, 406, 424, 430, 433, 436, 439, 440, 441, 461, 480, 511, 622, 625, 626, 629, 630, 633, 747, 757, 818, 821, 833, 847, 865, 866, 868, 872, 926, 928, 929, 931, 1011, 1012, 1013, 1015, 1028, 1050, 1051, 1052, 1054, 1071, 1076, 1079, 1080, 1083, 1084, 1087, 1088, 1091, 1092, 1095, 1096, 1100, 1103, 1104, 1105, 1108, 1109, 1112], "argument": [116, 117, 118, 119, 120, 159, 163, 164, 173, 178, 179, 180, 181, 182, 348, 350, 351, 352, 353, 355, 356, 357, 359, 360, 366, 368, 369, 402, 403, 405, 406, 424, 433, 436, 452, 461, 470, 471, 485, 489, 493, 511, 524, 529, 532, 573, 576, 606, 689, 692, 721, 724, 725, 728, 734, 747, 753, 754, 758, 768, 775, 797, 804, 852, 855, 864, 951, 985, 988, 1015, 1021, 1033, 1034, 1037, 1071, 1076, 1079, 1096, 1104, 1105, 1108, 1116, 1118, 1123, 1124, 1146, 1147], "ar": [116, 117, 118, 173, 174, 175, 178, 179, 180, 181, 182, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 382, 383, 384, 392, 405, 406, 461, 470, 471, 495, 499, 501, 505, 511, 577, 666, 669, 670, 673, 705, 708, 713, 716, 734, 747, 748, 751, 755, 756, 757, 781, 787, 788, 792, 799, 801, 813, 852, 861, 865, 869, 871, 886, 887, 890, 891, 893, 895, 897, 904, 906, 914, 916, 917, 919, 926, 928, 951, 952, 955, 969, 972, 985, 988, 1015, 1017, 1021, 1027, 1038, 1043, 1044, 1046, 1050, 1051, 1052, 1053, 1055, 1056, 1113, 1156, 1157], "unchang": [116, 117, 118, 119, 120], "The": [116, 117, 118, 119, 120, 159, 163, 164, 172, 173, 175, 178, 179, 180, 181, 182, 345, 346, 348, 349, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 369, 370, 371, 382, 394, 395, 396, 399, 401, 402, 403, 405, 406, 411, 415, 416, 420, 421, 424, 428, 429, 430, 438, 443, 445, 446, 448, 451, 456, 460, 461, 470, 471, 477, 478, 479, 480, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 499, 500, 501, 502, 503, 504, 505, 507, 510, 511, 512, 515, 516, 519, 520, 523, 524, 527, 529, 532, 533, 536, 537, 540, 541, 544, 545, 548, 549, 552, 553, 556, 557, 560, 561, 564, 565, 568, 569, 572, 573, 576, 577, 580, 581, 584, 585, 588, 590, 593, 594, 597, 598, 601, 602, 605, 606, 609, 610, 613, 614, 617, 618, 621, 622, 625, 626, 629, 630, 633, 634, 637, 638, 641, 642, 645, 646, 649, 654, 657, 658, 661, 662, 665, 666, 669, 670, 673, 674, 677, 680, 683, 689, 692, 697, 700, 701, 704, 705, 708, 709, 712, 713, 716, 717, 720, 721, 724, 734, 738, 742, 743, 746, 747, 753, 755, 758, 759, 767, 768, 774, 776, 779, 789, 790, 791, 793, 794, 795, 796, 798, 803, 804, 805, 806, 807, 810, 811, 812, 820, 821, 823, 824, 826, 829, 831, 834, 836, 838, 840, 842, 844, 847, 850, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 863, 864, 865, 866, 868, 869, 871, 872, 874, 875, 877, 878, 880, 881, 883, 884, 886, 891, 893, 895, 897, 898, 900, 901, 903, 904, 906, 907, 909, 910, 911, 913, 914, 916, 917, 919, 920, 922, 923, 925, 926, 928, 929, 931, 935, 936, 939, 941, 944, 946, 949, 951, 957, 960, 961, 964, 965, 968, 969, 972, 973, 976, 977, 980, 981, 984, 990, 1003, 1006, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1037, 1038, 1039, 1043, 1050, 1051, 1052, 1053, 1055, 1056, 1057, 1059, 1060, 1061, 1064, 1066, 1069, 1071, 1072, 1075, 1076, 1079, 1080, 1083, 1084, 1087, 1088, 1091, 1092, 1095, 1096, 1099, 1100, 1103, 1104, 1105, 1108, 1109, 1112, 1113, 1123, 1124, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1152, 1153, 1154], "check": [116, 117, 118, 119, 120, 173, 174, 175, 178, 179, 346, 347, 360, 365, 366, 368, 369, 370, 371, 382, 424, 438, 445, 446, 448, 460, 461, 500, 510, 747, 757, 772, 786, 793, 794, 795, 796, 813, 820, 821, 833, 865, 878, 880, 1015, 1016, 1025, 1026, 1027, 1113], "dict": [116, 117, 118, 119, 120, 159, 171, 178, 179, 180, 181, 182, 360, 369, 370, 461, 470, 471, 480, 483, 486, 487, 488, 489, 747, 753, 769, 770, 771, 1015, 1017, 1018, 1021, 1024, 1027, 1028], "whether": [116, 117, 118, 119, 120, 178, 179, 180, 181, 182, 183, 189, 343, 344, 345, 346, 361, 363, 364, 394, 395, 402, 403, 424, 430, 442, 448, 449, 450, 460, 461, 480, 481, 492, 496, 497, 500, 501, 505, 508, 510, 511, 630, 633, 747, 748, 751, 755, 756, 765, 768, 772, 774, 784, 786, 788, 791, 792, 793, 794, 795, 796, 797, 809, 813, 819, 820, 821, 824, 826, 828, 829, 831, 833, 834, 836, 838, 840, 842, 844, 847, 852, 860, 865, 878, 880, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1021, 1025, 1026, 1027, 1028, 1038, 1039, 1104, 1105, 1108, 1109, 1112, 1123, 1124, 1134, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155], "recurs": [116, 117, 118, 119, 120, 178, 179, 346, 349, 356, 360, 370, 383, 1015, 1016, 1017, 1025, 1026, 1027], "deriv": [116, 117, 118, 119, 120, 361, 362, 368, 370, 405, 409, 413, 419, 423, 821, 823, 824, 826, 829, 831, 834, 836, 838, 840, 842, 844, 1015, 1017, 1027, 1146, 1150, 1154, 1156], "str": [116, 117, 118, 159, 164, 178, 179, 361, 362, 405, 416, 424, 428, 438, 439, 440, 443, 444, 447, 448, 449, 450, 453, 454, 455, 460, 461, 477, 480, 481, 483, 486, 487, 488, 489, 505, 747, 753, 767, 769, 770, 771, 798, 803, 804, 852, 853, 855, 857, 858, 859, 865, 907, 909, 1011, 1012, 1013, 1014, 1015, 1021, 1071, 1072, 1075, 1099], "kei": [116, 117, 118, 178, 179, 180, 181, 182, 360, 369, 461, 473, 747, 753, 763, 852, 863, 864, 1011, 1012, 1013, 1015, 1018, 1024, 1028, 1123, 1124, 1134, 1145, 1150, 1154], "word": [116, 117, 118, 405, 406, 1038, 1044, 1046, 1123, 1124], "ret": [116, 117, 118, 119, 120, 159, 163, 164, 171, 178, 179, 351, 352, 366, 371, 394, 395, 396, 397, 398, 399, 400, 401, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 428, 429, 430, 431, 432, 433, 436, 438, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 460, 461, 470, 477, 478, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 504, 505, 506, 507, 508, 510, 511, 512, 515, 516, 519, 520, 523, 524, 527, 529, 532, 533, 536, 537, 540, 541, 544, 545, 548, 549, 552, 553, 556, 557, 560, 561, 564, 565, 568, 569, 572, 573, 576, 577, 580, 581, 584, 585, 588, 590, 593, 594, 597, 598, 601, 602, 605, 606, 609, 610, 613, 614, 617, 618, 621, 622, 625, 626, 629, 630, 633, 634, 637, 638, 641, 642, 645, 646, 649, 650, 653, 654, 657, 658, 661, 662, 665, 666, 669, 670, 673, 674, 677, 678, 679, 680, 683, 685, 688, 689, 692, 693, 696, 697, 700, 701, 704, 705, 708, 709, 712, 713, 716, 717, 720, 721, 724, 725, 728, 729, 733, 734, 738, 739, 742, 743, 746, 747, 748, 751, 753, 755, 756, 757, 758, 759, 760, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 779, 783, 784, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 800, 803, 804, 809, 811, 812, 813, 815, 816, 817, 819, 820, 821, 823, 824, 826, 828, 829, 831, 833, 834, 836, 838, 840, 842, 844, 847, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 868, 869, 871, 872, 874, 875, 877, 878, 880, 881, 883, 884, 886, 887, 890, 891, 893, 895, 897, 898, 900, 901, 903, 904, 906, 907, 909, 910, 911, 913, 914, 916, 917, 919, 920, 922, 923, 925, 926, 928, 929, 931, 932, 934, 935, 936, 939, 941, 944, 946, 949, 951, 952, 955, 957, 960, 961, 964, 965, 968, 969, 972, 973, 976, 977, 980, 981, 984, 985, 988, 990, 991, 994, 995, 998, 999, 1002, 1003, 1006, 1007, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1021, 1025, 1026, 1027, 1033, 1034, 1037, 1038, 1039, 1040, 1041, 1043, 1044, 1046, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1064, 1066, 1069, 1071, 1072, 1075, 1076, 1079, 1080, 1083, 1084, 1087, 1088, 1091, 1092, 1095, 1096, 1099, 1100, 1103, 1104, 1105, 1108, 1109, 1112, 1116, 1118, 1123, 1124, 1150, 1154], "same": [116, 117, 118, 173, 175, 178, 179, 346, 347, 349, 351, 353, 355, 356, 359, 360, 362, 363, 364, 366, 368, 370, 371, 405, 406, 409, 413, 416, 419, 420, 421, 423, 424, 430, 431, 432, 461, 470, 471, 505, 511, 512, 515, 524, 553, 556, 573, 576, 606, 680, 683, 701, 704, 705, 708, 709, 712, 743, 746, 747, 773, 775, 776, 779, 800, 803, 804, 821, 833, 847, 852, 853, 854, 855, 856, 857, 858, 859, 864, 865, 866, 868, 869, 871, 872, 875, 877, 878, 880, 881, 883, 884, 886, 898, 900, 904, 906, 907, 909, 911, 913, 914, 923, 925, 926, 928, 951, 957, 960, 969, 972, 973, 976, 985, 988, 991, 994, 995, 998, 1011, 1012, 1013, 1015, 1028, 1055, 1056, 1057, 1059, 1060, 1061, 1064, 1066, 1069, 1071, 1072, 1075, 1076, 1079, 1080, 1083, 1084, 1087, 1088, 1091, 1096, 1099, 1100, 1103, 1113, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141], "convert": [116, 117, 118, 119, 120, 175, 178, 179, 359, 366, 383, 384, 392, 405, 407, 417, 424, 428, 429, 461, 477, 478, 479, 480, 500, 507, 510, 747, 810, 816, 817, 865, 932, 934, 1015, 1017, 1027, 1028, 1124], "args_to_n": [116, 363, 368], "nativ": [116, 118, 119, 120, 159, 165, 178, 179, 361, 363, 368, 369, 405, 417, 424, 428, 429, 438, 461, 477, 478, 479, 480, 481, 500, 507, 510, 747, 791, 793, 796, 1123, 1124], "backend": [116, 118, 120, 163, 164, 165, 171, 173, 178, 179, 347, 348, 350, 352, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 367, 368, 371, 424, 445, 446, 448, 460, 461, 496, 498, 508, 747, 788, 791, 792, 798, 821, 824, 826, 829, 831, 834, 836, 838, 840, 842, 844, 850, 1113, 1119, 1123, 1124, 1150, 1151, 1152, 1153, 1154, 1155], "to_ivi": [116, 178, 179, 368, 1015, 1028], "input": [116, 119, 120, 178, 179, 180, 181, 182, 183, 276, 277, 281, 284, 290, 292, 296, 313, 314, 315, 316, 327, 328, 331, 332, 351, 352, 353, 355, 356, 357, 359, 360, 361, 362, 363, 364, 366, 368, 369, 370, 371, 383, 384, 392, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 405, 407, 409, 411, 413, 416, 417, 419, 420, 421, 423, 424, 430, 431, 433, 436, 438, 439, 440, 441, 442, 443, 449, 450, 451, 452, 456, 461, 470, 471, 480, 481, 482, 483, 485, 486, 489, 493, 499, 505, 506, 511, 512, 515, 516, 519, 520, 523, 524, 527, 528, 529, 532, 533, 536, 537, 540, 541, 544, 545, 548, 549, 552, 553, 556, 557, 560, 561, 564, 565, 568, 569, 572, 573, 576, 577, 580, 581, 584, 585, 588, 590, 593, 598, 601, 602, 605, 606, 609, 610, 613, 614, 617, 618, 621, 622, 625, 626, 629, 630, 633, 634, 637, 638, 641, 642, 645, 646, 649, 650, 653, 654, 657, 658, 661, 662, 665, 666, 669, 670, 673, 674, 677, 678, 679, 680, 683, 685, 688, 689, 692, 693, 696, 697, 700, 701, 704, 705, 708, 709, 712, 713, 716, 717, 720, 721, 724, 725, 728, 729, 733, 734, 735, 738, 739, 742, 743, 746, 747, 748, 751, 752, 753, 755, 756, 757, 759, 760, 762, 764, 765, 766, 768, 769, 770, 771, 772, 773, 774, 775, 776, 779, 780, 784, 786, 787, 789, 790, 791, 793, 794, 795, 796, 809, 810, 813, 815, 816, 817, 819, 820, 821, 828, 833, 847, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 868, 869, 871, 872, 875, 877, 878, 880, 881, 883, 884, 886, 887, 890, 891, 893, 895, 897, 898, 900, 901, 903, 904, 906, 907, 909, 914, 916, 917, 919, 920, 922, 923, 925, 926, 928, 929, 931, 935, 936, 939, 941, 944, 946, 949, 951, 952, 955, 956, 957, 960, 961, 964, 965, 968, 969, 972, 973, 976, 977, 980, 985, 988, 989, 990, 991, 994, 995, 998, 999, 1002, 1003, 1006, 1007, 1010, 1011, 1012, 1013, 1014, 1033, 1034, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1046, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1064, 1066, 1069, 1071, 1072, 1075, 1076, 1079, 1080, 1083, 1084, 1087, 1088, 1091, 1092, 1095, 1096, 1099, 1100, 1103, 1104, 1105, 1108, 1109, 1112, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1148, 1149], "If": [116, 119, 120, 159, 163, 164, 165, 173, 178, 179, 345, 346, 347, 348, 349, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 368, 369, 371, 383, 405, 406, 408, 409, 410, 412, 413, 416, 418, 419, 420, 421, 422, 423, 424, 430, 432, 452, 461, 480, 504, 511, 512, 515, 516, 519, 520, 523, 524, 527, 529, 532, 533, 536, 537, 541, 544, 573, 576, 577, 580, 581, 584, 598, 601, 602, 605, 606, 642, 645, 646, 649, 654, 657, 658, 661, 666, 669, 670, 673, 680, 683, 697, 700, 701, 704, 705, 708, 709, 712, 713, 716, 717, 720, 721, 724, 734, 743, 746, 747, 791, 821, 824, 826, 829, 831, 834, 836, 838, 840, 842, 844, 865, 866, 868, 869, 871, 886, 891, 893, 895, 897, 904, 906, 907, 909, 911, 913, 914, 926, 928, 929, 931, 935, 936, 939, 941, 944, 946, 949, 951, 965, 968, 969, 972, 985, 988, 990, 991, 994, 995, 998, 1011, 1012, 1013, 1015, 1027, 1028, 1038, 1043, 1044, 1046, 1050, 1051, 1052, 1053, 1055, 1056, 1057, 1059, 1060, 1061, 1064, 1066, 1069, 1071, 1076, 1079, 1080, 1083, 1084, 1087, 1088, 1091, 1092, 1095, 1096, 1100, 1103, 1104, 1105, 1108, 1109, 1112, 1113], "set": [116, 119, 120, 150, 159, 163, 164, 165, 171, 173, 178, 179, 336, 345, 347, 350, 351, 356, 358, 359, 360, 361, 362, 363, 366, 368, 369, 461, 480, 490, 491, 502, 503, 504, 505, 511, 541, 544, 747, 748, 751, 805, 806, 807, 808, 821, 824, 826, 829, 831, 833, 834, 836, 838, 840, 842, 844, 865, 869, 871, 886, 891, 893, 895, 897, 904, 906, 911, 913, 1015, 1016, 1025, 1026, 1027, 1031, 1032, 1038, 1048, 1050, 1051, 1056, 1057, 1058, 1059, 1060, 1061, 1064, 1066, 1069, 1071, 1092, 1095, 1100, 1103, 1134, 1143, 1150, 1151, 1152, 1153, 1154, 1155], "leaf": [116, 119, 120, 178, 179, 356, 360, 369, 1015, 1016, 1025, 1026], "within": [116, 119, 120, 347, 355, 370, 383, 405, 406, 1038, 1044, 1046], "mayb": [116, 119, 120, 346, 366, 368], "manner": [116, 119, 120, 173, 178, 179, 351, 352, 362, 369, 382, 383, 1015, 1027], "travers": [116, 119, 120, 178, 179, 360, 366, 368, 1015, 1027], "lowest": [116, 119, 120, 178, 179, 356, 383, 1015, 1027, 1038, 1040, 1041], "leav": [116, 119, 120, 178, 179, 180, 181, 183, 352, 353, 355, 356, 360, 361, 363, 364, 369, 370, 951, 995, 998, 1015, 1016, 1017, 1025, 1026, 1027], "search": [116, 119, 120, 148, 173, 178, 179, 334, 346, 351, 353, 355, 1051, 1052, 1053, 1054], "s": [116, 119, 120, 159, 163, 164, 165, 171, 174, 175, 178, 179, 345, 346, 347, 349, 350, 352, 353, 355, 357, 359, 360, 361, 362, 363, 364, 366, 368, 369, 370, 371, 382, 383, 404, 405, 416, 420, 421, 424, 445, 446, 461, 480, 504, 511, 701, 704, 747, 756, 821, 824, 826, 829, 831, 834, 836, 842, 844, 865, 914, 916, 917, 919, 1015, 1021, 1027, 1071, 1092, 1095, 1100, 1103, 1113, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1154, 1156, 1157], "case": [116, 119, 120, 174, 178, 179, 180, 181, 182, 346, 347, 348, 351, 352, 353, 356, 357, 359, 360, 361, 362, 363, 364, 366, 368, 370, 371, 383, 405, 416, 461, 500, 507, 510, 511, 512, 515, 516, 519, 520, 523, 524, 527, 529, 532, 533, 536, 537, 541, 544, 569, 572, 573, 576, 577, 580, 581, 584, 598, 601, 602, 605, 606, 642, 645, 646, 649, 654, 657, 658, 661, 680, 683, 697, 700, 701, 704, 705, 708, 709, 712, 713, 716, 717, 720, 721, 724, 734, 743, 746, 747, 791, 803, 804, 865, 891, 893, 951, 981, 984, 1015, 1018, 1024, 1071, 1076, 1079, 1080, 1083, 1084, 1087, 1092, 1095, 1096, 1100, 1103, 1134, 1145, 1146, 1147, 1150, 1154], "to_n": [116, 178, 179], "convers": [117, 118, 119, 120, 175, 178, 179, 365, 367, 371, 382, 383, 1113, 1119], "arraywithcr": 121, "creation": [122, 178, 179, 180, 181, 182, 308, 351, 361, 362, 366, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423], "data_typ": [123, 124, 309, 310, 351, 361, 424, 428, 429, 430, 431, 432, 433, 436, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460], "arraywithdatatyp": 123, "arraywithdevic": [125, 368], "devic": [126, 174, 178, 179, 183, 260, 290, 291, 312, 331, 332, 347, 350, 351, 356, 358, 361, 368, 369, 383, 405, 406, 407, 408, 409, 410, 412, 413, 414, 415, 417, 418, 419, 420, 421, 422, 423, 463, 464, 465, 466, 467, 468, 470, 471, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 747, 775, 776, 779, 800, 803, 804, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1123, 1124, 1125, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1154, 1156, 1157], "arraywithelementwis": [127, 348, 359], "elementwis": [128, 178, 179, 314, 351, 356, 366, 371, 512, 515, 516, 519, 520, 523, 524, 527, 529, 532, 533, 536, 537, 540, 541, 544, 545, 548, 549, 552, 553, 556, 557, 560, 561, 564, 565, 568, 569, 572, 573, 576, 577, 580, 581, 584, 585, 588, 590, 593, 594, 597, 598, 601, 602, 605, 606, 609, 610, 613, 614, 617, 618, 621, 622, 625, 626, 629, 630, 633, 634, 637, 638, 641, 642, 645, 646, 649, 650, 653, 654, 657, 658, 661, 662, 665, 666, 669, 670, 673, 674, 677, 678, 679, 680, 683, 685, 688, 689, 692, 693, 696, 697, 700, 701, 704, 705, 708, 709, 712, 713, 716, 717, 720, 721, 724, 725, 728, 729, 733, 734, 738, 739, 742, 743, 746], "arraywithgener": [129, 368], "arraywithgradi": [131, 368], "gradient": [132, 178, 179, 318, 351, 360, 369, 370, 382, 383, 461, 505, 823, 824, 826, 828, 829, 831, 833, 834, 836, 838, 840, 842, 844, 846, 847, 848, 849, 850, 851, 1011, 1012, 1013, 1014, 1113, 1150, 1151, 1152, 1153, 1154, 1155], "arraywithimag": [133, 368], "imag": [134, 320, 346, 349, 351, 366, 367, 369, 371, 382, 852, 853, 854, 855, 856, 858, 859, 1113], "arraywithlay": 135, "layer": [136, 173, 322, 351, 352, 366, 367, 370, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 1033, 1034, 1037, 1113, 1125, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1154, 1156, 1157], "linear_algebra": [137, 138, 323, 324, 351, 368, 865, 866, 868, 869, 871, 872, 874, 875, 877, 878, 880, 881, 883, 884, 886, 887, 890, 891, 893, 894, 895, 897, 898, 900, 901, 903, 904, 906, 907, 909, 910, 911, 913, 914, 916, 917, 919, 920, 922, 923, 925, 926, 928, 929, 931, 932, 934], "arraywithlinearalgebra": 137, "arraywithloss": 139, "loss": [140, 326, 351, 356, 369, 370, 371, 936, 939, 941, 944, 946, 949, 1113], "arraywithmanipul": 141, "manipul": [142, 173, 328, 351, 371, 382, 952, 955, 957, 960, 961, 964, 965, 968, 969, 972, 973, 976, 977, 980, 981, 984, 985, 988, 990, 991, 994, 995, 998, 999, 1002, 1003, 1006, 1007, 1010], "arraywithnorm": 143, "norm": [144, 178, 179, 330, 351, 747, 759, 760, 762, 865, 891, 893, 929, 931, 1034, 1037, 1113, 1149, 1150, 1152], "arraywithrandom": [145, 368], "random": [146, 178, 179, 332, 351, 362, 371, 382, 1039, 1040, 1041, 1043, 1044, 1046, 1048, 1049, 1113], "arraywithsearch": 147, "arraywithset": 149, "arraywithsort": 151, "arraywithstatist": 153, "statist": [154, 183, 189, 340, 343, 344, 351, 361, 1072, 1075, 1076, 1079, 1080, 1083, 1084, 1087, 1088, 1091, 1092, 1095, 1096, 1099, 1100, 1103], "arraywithutil": 155, "util": [156, 342, 351, 362, 461, 494, 1105, 1108, 1109, 1112], "backend_handl": [159, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 1113], "contextmanag": [159, 160], "object": [159, 178, 179, 180, 181, 182, 183, 368, 371, 405, 411, 424, 444, 461, 506, 821, 1015, 1018, 1020, 1022, 1023, 1024, 1029, 1030, 1031, 1032, 1038, 1049, 1125, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1143, 1144, 1146, 1147], "__init__": [159, 160, 163, 164, 178, 179, 180, 181, 182, 183, 351, 357, 361, 366, 368, 369, 370, 371, 424, 425, 426, 427, 461, 462, 469, 470, 471, 472, 473, 474, 475, 476, 821, 822, 1038, 1039, 1043, 1044, 1046, 1113, 1120, 1121, 1122, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157], "choose_random_backend": 159, "exclud": [159, 161, 353, 366, 405, 406, 1038, 1044, 1046], "clear_backend_stack": 159, "current_backend": [159, 180, 181, 351, 356], "current": [159, 163, 164, 171, 175, 178, 179, 180, 181, 182, 346, 347, 348, 349, 356, 362, 366, 371, 382, 383, 424, 445, 446, 448, 460, 461, 470, 494, 495, 499, 501, 747, 781, 788, 792, 799, 801, 1015, 1016, 1025, 1026, 1113], "prioriti": [159, 163, 178, 179, 347, 363], "global_backend": [159, 163], "which": [159, 163, 164, 173, 174, 175, 178, 179, 180, 181, 182, 346, 347, 348, 349, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 368, 369, 370, 371, 382, 383, 394, 399, 402, 403, 404, 405, 406, 407, 408, 409, 410, 412, 413, 414, 415, 417, 418, 419, 420, 421, 422, 423, 424, 433, 436, 438, 442, 444, 447, 448, 460, 461, 470, 471, 481, 486, 487, 488, 489, 490, 491, 492, 493, 495, 499, 501, 503, 504, 505, 511, 701, 704, 747, 753, 765, 766, 768, 775, 776, 779, 781, 787, 791, 799, 800, 801, 803, 804, 819, 821, 824, 826, 828, 829, 831, 834, 836, 838, 840, 842, 844, 847, 849, 850, 852, 863, 865, 869, 871, 875, 877, 891, 893, 911, 913, 914, 926, 928, 929, 931, 935, 941, 944, 946, 949, 951, 957, 960, 969, 972, 977, 980, 985, 988, 990, 995, 998, 1015, 1020, 1021, 1022, 1023, 1028, 1029, 1030, 1031, 1032, 1038, 1039, 1040, 1041, 1044, 1046, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1059, 1060, 1061, 1064, 1066, 1069, 1071, 1076, 1079, 1080, 1083, 1084, 1087, 1088, 1091, 1092, 1095, 1096, 1100, 1103, 1104, 1105, 1108, 1109, 1112, 1113, 1116, 1118, 1123, 1124, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1154, 1156, 1157], "try": [159, 163, 172, 174, 175, 178, 179, 346, 347, 348, 349, 359, 360, 368, 383, 747, 818, 1113], "infer": [159, 163, 350, 357, 361, 362, 366, 371, 402, 403, 405, 406, 407, 409, 412, 413, 417, 419, 423, 511, 614, 747, 784, 809, 951, 981, 984], "when": [159, 163, 173, 174, 178, 179, 180, 181, 182, 346, 347, 348, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 366, 368, 369, 371, 383, 424, 430, 461, 511, 524, 602, 605, 697, 700, 747, 758, 791, 812, 935, 936, 939, 941, 944, 946, 949, 1015, 1026, 1050, 1051, 1052, 1054, 1071, 1076, 1079, 1084, 1087, 1092, 1095, 1100, 1103, 1113, 1146, 1147], "global": [159, 163, 164, 165, 171, 178, 179, 180, 181, 182, 356, 357, 361, 362, 366, 424, 439, 440, 441, 461, 470, 471, 503, 504, 505, 747, 782, 783, 802, 805, 806, 807, 811, 812, 1033, 1034, 1037, 1148, 1149], "numpi": [159, 163, 164, 165, 173, 174, 178, 179, 347, 348, 355, 357, 361, 362, 363, 364, 366, 368, 371, 747, 816, 1071, 1072, 1075, 1099, 1113], "np": [159, 163, 359, 361, 362, 363, 364, 368, 369, 371, 1113], "py": [159, 163, 164, 347, 351, 352, 356, 357, 361, 362, 364, 366, 368, 370, 371, 1038, 1039, 1043, 1044, 1046], "noqa": [159, 163, 164, 405, 416, 424, 433, 436, 511, 524, 549, 552, 569, 572, 573, 576, 581, 689, 692, 705, 708, 721, 724, 725, 728, 734, 865, 872, 951, 965, 968, 969, 972, 985, 988, 1071, 1076, 1079], "set_backend": [159, 163, 164, 171, 356, 357, 358, 361, 424, 445, 446, 461, 502, 747, 809, 1113], "ha": [159, 163, 164, 173, 174, 175, 178, 179, 347, 352, 353, 356, 357, 358, 361, 362, 366, 368, 370, 371, 382, 383, 405, 416, 461, 480, 511, 512, 515, 680, 683, 697, 700, 865, 874, 887, 890, 910, 911, 913, 914, 923, 925, 951, 965, 968, 991, 994, 1055, 1056, 1057, 1059, 1071, 1080, 1083, 1088, 1091, 1092, 1095, 1096, 1100, 1103], "jax": [159, 163, 164, 165, 174, 175, 347, 348, 357, 361, 362, 363, 364, 366, 368, 371, 383, 821, 833, 1055, 1056, 1057, 1059, 1113], "get_backend": [159, 356, 357], "specifi": [159, 164, 178, 179, 350, 355, 356, 361, 362, 363, 364, 366, 369, 370, 371, 405, 406, 408, 412, 414, 415, 418, 420, 421, 422, 424, 430, 432, 461, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 495, 499, 501, 504, 505, 506, 511, 701, 704, 747, 753, 765, 775, 776, 779, 786, 819, 865, 875, 877, 891, 893, 920, 922, 923, 925, 926, 928, 929, 931, 935, 936, 939, 941, 944, 946, 949, 951, 952, 955, 957, 960, 961, 964, 969, 972, 985, 988, 991, 994, 995, 998, 1007, 1010, 1015, 1020, 1022, 1023, 1029, 1030, 1031, 1032, 1050, 1051, 1052, 1055, 1056, 1057, 1059, 1060, 1061, 1064, 1071, 1072, 1075, 1088, 1091, 1096, 1099, 1104, 1105, 1108, 1109, 1112], "isn": [159, 164, 347, 369, 383], "associ": [159, 164, 347, 356, 358, 383, 511, 524, 680, 683, 865, 886, 895, 897, 904, 906, 932, 934], "retriev": [159, 164, 347, 747, 753], "i": [159, 164, 347, 349, 350, 366, 369, 371, 405, 406, 416, 511, 512, 515, 541, 544, 557, 560, 565, 568, 573, 576, 588, 606, 609, 610, 613, 622, 625, 678, 679, 685, 688, 697, 700, 701, 704, 747, 755, 756, 821, 824, 826, 829, 831, 834, 836, 838, 840, 842, 844, 865, 869, 871, 886, 887, 890, 895, 897, 904, 906, 911, 913, 914, 923, 925, 929, 931, 951, 995, 998, 1055, 1056, 1057, 1059, 1060, 1061, 1064, 1066, 1069, 1071, 1072, 1075, 1076, 1079, 1080, 1083, 1084, 1087, 1092, 1095, 1096, 1099, 1100, 1103], "e": [159, 164, 174, 175, 345, 347, 349, 350, 360, 369, 383, 404, 405, 416, 424, 429, 452, 461, 477, 511, 512, 515, 541, 544, 557, 560, 565, 568, 573, 576, 588, 598, 606, 609, 610, 613, 622, 625, 642, 645, 650, 653, 678, 679, 685, 688, 697, 700, 701, 704, 821, 824, 826, 829, 831, 834, 836, 838, 840, 842, 844, 865, 869, 871, 886, 887, 890, 895, 897, 904, 906, 911, 913, 914, 929, 931, 951, 995, 998, 1038, 1043, 1044, 1046, 1055, 1056, 1057, 1059, 1060, 1061, 1064, 1066, 1069, 1071, 1076, 1079, 1080, 1083, 1084, 1087, 1088, 1091, 1092, 1095, 1096, 1100, 1103], "one": [159, 164, 174, 175, 178, 179, 183, 191, 276, 277, 281, 284, 290, 292, 313, 314, 315, 316, 327, 328, 331, 332, 346, 347, 353, 356, 359, 360, 361, 363, 364, 365, 368, 369, 371, 383, 405, 406, 416, 424, 431, 433, 436, 461, 490, 491, 492, 493, 505, 528, 658, 747, 748, 750, 751, 752, 776, 780, 797, 800, 803, 804, 865, 887, 890, 891, 893, 901, 903, 907, 909, 926, 928, 929, 931, 951, 952, 956, 965, 968, 969, 972, 985, 988, 989, 991, 994, 1040, 1042, 1050, 1051, 1053, 1055, 1056, 1057, 1058, 1059, 1071, 1072, 1075, 1099, 1113], "torch": [159, 164, 171, 347, 351, 356, 357, 359, 360, 361, 362, 363, 364, 366, 368, 369, 370, 371, 383, 402, 403, 424, 445, 446, 461, 502, 747, 809, 951, 965, 968, 1113], "tensorflow": [159, 164, 171, 174, 175, 347, 348, 361, 362, 363, 364, 366, 371, 383, 1113], "mxnet": [159, 164, 174, 348, 361, 362, 363, 366, 371, 1113], "either": [159, 164, 171, 178, 179, 346, 347, 349, 352, 353, 356, 357, 360, 361, 362, 366, 368, 369, 383, 405, 411, 511, 524, 527, 541, 544, 601, 626, 629, 642, 645, 646, 649, 654, 657, 658, 661, 680, 683, 701, 704, 709, 712, 713, 716, 734, 747, 768, 793, 797, 798, 865, 887, 890, 1011, 1012, 1013, 1014, 1071, 1088, 1091, 1096, 1134, 1145, 1146, 1147], "doesn": [159, 164, 346, 349, 353, 361, 366, 383], "matter": [159, 164, 173, 353], "been": [159, 164, 347, 352, 356, 357, 360, 361, 362, 364, 366, 382, 383, 461, 480, 747, 769, 770, 771, 1038, 1039], "ivy_np": [159, 164], "ivy_jax": [159, 164], "subsequ": [159, 165, 346, 353, 355, 356, 359, 363, 364, 370], "call": [159, 165, 171, 174, 180, 181, 183, 349, 351, 352, 353, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 366, 368, 369, 370, 371, 383, 461, 505, 747, 802, 807, 818, 821, 828, 1015, 1016, 1021, 1025, 1026, 1134, 1145, 1146, 1147, 1150, 1154], "ndarrai": [159, 165, 359, 361, 362, 363, 364, 368, 405, 407, 417, 747, 816], "Or": [159, 165, 369], "jaxlib": [159, 165, 346, 361, 362, 364, 368], "xla_extens": [159, 165, 361, 362, 364, 368], "devicearrai": [159, 165, 368], "try_import_ivy_jax": 159, "warn": [159, 166, 167, 168, 169, 170], "try_import_ivy_mxnet": 159, "try_import_ivy_numpi": 159, "try_import_ivy_tf": 159, "try_import_ivy_torch": 159, "unset_backend": [159, 357], "unset": [159, 171, 357, 366, 368], "adjust": [159, 171, 1071, 1092, 1095, 1100, 1103], "previous": [159, 171, 346, 349, 355, 356, 366, 747, 758], "implement": [159, 171, 347, 348, 352, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 366, 368, 369, 370, 371, 382, 383, 424, 430, 452, 461, 506, 511, 512, 515, 516, 519, 520, 523, 529, 532, 533, 536, 537, 541, 544, 577, 580, 581, 584, 598, 602, 605, 642, 645, 646, 649, 650, 653, 654, 657, 680, 683, 697, 700, 701, 704, 713, 716, 717, 720, 734, 865, 878, 880, 1055, 1056, 1057, 1059, 1060, 1061, 1064, 1066, 1069, 1071, 1076, 1079, 1080, 1083, 1084, 1087, 1113], "wa": [159, 171, 174, 178, 179, 353, 366, 368, 747, 818, 1015, 1028, 1071, 1076, 1079, 1080, 1083, 1084, 1087, 1088, 1091, 1092, 1095, 1096, 1100, 1103, 1104, 1105, 1108, 1109, 1112], "last": [159, 171, 175, 178, 179, 347, 353, 357, 383, 394, 399, 461, 480, 852, 862, 865, 869, 871, 875, 877, 891, 893, 923, 925, 926, 928, 935, 941, 944, 946, 949, 951, 969, 972, 985, 988, 990, 995, 998, 1060, 1061, 1064, 1066, 1069, 1104, 1105, 1108, 1109, 1112, 1134, 1144], "henc": [159, 171, 1055, 1056, 1057, 1059], "here": [159, 171, 346, 347, 348, 351, 353, 360, 364, 366, 367, 368, 369, 370, 371, 382, 383], "tensor": [159, 171, 173, 178, 179, 351, 356, 357, 359, 361, 362, 363, 364, 366, 368, 369, 370, 371, 383, 405, 414, 415, 424, 442, 511, 549, 552, 678, 679, 747, 800, 803, 804, 852, 860, 862, 865, 920, 922, 951, 965, 968, 981, 984, 990, 1038, 1039, 1050, 1053, 1113, 1134, 1142, 1144], "howev": [159, 171, 174, 346, 348, 352, 355, 356, 357, 359, 360, 361, 362, 363, 364, 368, 369, 370, 371, 383], "befor": [159, 171, 178, 179, 346, 347, 348, 352, 355, 359, 361, 362, 363, 366, 369, 383, 461, 505, 511, 743, 746, 852, 863, 864, 1011, 1012, 1013, 1015, 1027, 1055, 1056, 1057, 1059, 1071, 1088, 1091, 1096], "becom": [159, 171, 173, 175, 347, 353, 360, 366, 371, 383, 951, 952, 955], "swap": [159, 171, 951, 999, 1002], "python": [159, 171, 172, 173, 174, 346, 347, 349, 366, 368, 369, 383, 405, 406, 461, 500, 510, 511, 701, 704, 1113, 1119], "op": [159, 171, 351, 366, 383], "eagertensor": [159, 171], "def": [160, 348, 351, 353, 356, 360, 361, 362, 363, 364, 366, 368, 369, 370, 371, 425, 426, 427, 462, 469, 472, 822, 1113, 1126, 1129, 1132], "ml": [172, 174, 175, 345, 365, 366, 367, 369, 370, 371, 382, 1113, 1119], "explos": [172, 174, 1113], "A": [172, 173, 174, 175, 178, 179, 180, 181, 182, 349, 350, 355, 356, 360, 361, 362, 366, 369, 383, 405, 410, 417, 461, 470, 471, 505, 511, 693, 696, 739, 747, 783, 815, 865, 874, 901, 903, 910, 911, 913, 914, 951, 990, 995, 998, 1015, 1016, 1018, 1020, 1022, 1023, 1024, 1025, 1026, 1029, 1030, 1031, 1032, 1071, 1072, 1075, 1099, 1104, 1105, 1108, 1109, 1112, 1113, 1156, 1157], "huge": [172, 174, 369, 1113], "number": [172, 173, 178, 179, 180, 181, 182, 183, 346, 353, 360, 362, 363, 366, 369, 371, 402, 403, 404, 405, 406, 407, 410, 414, 415, 416, 417, 424, 431, 443, 444, 447, 449, 450, 452, 461, 497, 498, 499, 511, 524, 541, 544, 573, 576, 588, 606, 609, 610, 613, 678, 679, 680, 683, 697, 700, 701, 704, 705, 708, 709, 712, 743, 746, 747, 748, 751, 774, 783, 784, 799, 817, 820, 852, 863, 865, 874, 878, 880, 895, 897, 910, 914, 926, 928, 951, 952, 955, 961, 964, 973, 976, 977, 980, 985, 988, 990, 995, 998, 1003, 1006, 1007, 1010, 1011, 1012, 1013, 1014, 1038, 1039, 1048, 1050, 1053, 1055, 1056, 1057, 1071, 1076, 1079, 1080, 1083, 1084, 1087, 1088, 1091, 1092, 1095, 1096, 1100, 1103, 1104, 1105, 1108, 1109, 1112, 1113, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1143, 1144, 1145], "tool": [172, 175, 347, 367, 371, 382, 383, 1113], "have": [172, 173, 174, 175, 178, 179, 346, 347, 348, 349, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 366, 367, 368, 369, 370, 371, 382, 383, 394, 397, 405, 406, 408, 409, 412, 413, 416, 418, 419, 420, 421, 422, 423, 424, 430, 431, 432, 444, 461, 506, 511, 512, 515, 516, 519, 520, 523, 524, 527, 529, 532, 533, 536, 537, 540, 541, 544, 545, 548, 549, 552, 553, 556, 557, 560, 561, 564, 565, 568, 569, 572, 573, 576, 577, 580, 581, 584, 585, 588, 590, 593, 598, 601, 602, 605, 606, 609, 610, 613, 614, 617, 618, 621, 622, 625, 626, 629, 630, 633, 634, 637, 638, 641, 642, 645, 646, 649, 650, 653, 654, 657, 658, 661, 662, 665, 666, 669, 670, 673, 674, 677, 680, 683, 685, 688, 689, 692, 697, 700, 701, 704, 705, 708, 709, 712, 713, 716, 717, 720, 721, 724, 725, 728, 729, 733, 734, 738, 742, 743, 746, 747, 760, 762, 769, 770, 771, 773, 821, 833, 850, 852, 864, 865, 866, 868, 869, 871, 872, 875, 877, 878, 880, 881, 883, 884, 886, 887, 890, 895, 897, 898, 900, 901, 903, 904, 906, 907, 909, 911, 913, 914, 916, 917, 919, 920, 922, 923, 925, 926, 928, 929, 931, 935, 936, 939, 941, 944, 946, 949, 951, 952, 955, 957, 960, 965, 968, 969, 972, 973, 976, 977, 980, 985, 988, 991, 994, 995, 998, 999, 1002, 1038, 1040, 1041, 1049, 1050, 1051, 1052, 1053, 1055, 1056, 1057, 1059, 1060, 1061, 1064, 1066, 1069, 1071, 1076, 1079, 1080, 1083, 1084, 1087, 1088, 1091, 1092, 1095, 1096, 1100, 1103, 1104, 1105, 1108, 1109, 1112, 1113], "explod": [172, 173, 1113], "onto": [172, 173, 461, 490, 491, 1015, 1021, 1027, 1113], "scene": [172, 173, 350, 365, 367, 821, 824, 826, 829, 831, 834, 836, 838, 840, 842, 844, 1113], "b": [172, 175, 180, 181, 183, 188, 191, 208, 209, 210, 225, 227, 264, 276, 277, 280, 281, 284, 290, 292, 296, 301, 309, 310, 313, 314, 315, 316, 327, 328, 331, 332, 345, 350, 353, 356, 357, 360, 365, 366, 367, 369, 370, 371, 381, 424, 433, 435, 436, 437, 461, 483, 511, 524, 526, 528, 529, 532, 540, 545, 549, 552, 569, 572, 573, 575, 576, 581, 593, 606, 608, 610, 617, 618, 621, 658, 685, 688, 689, 692, 705, 708, 721, 724, 725, 728, 734, 735, 737, 742, 747, 748, 750, 751, 752, 755, 756, 764, 765, 772, 775, 776, 778, 779, 780, 817, 852, 855, 858, 859, 864, 865, 866, 868, 869, 871, 872, 901, 903, 911, 913, 920, 922, 932, 934, 935, 936, 939, 951, 952, 954, 955, 956, 965, 968, 969, 972, 977, 980, 985, 987, 988, 989, 995, 998, 999, 1002, 1033, 1034, 1037, 1038, 1040, 1042, 1043, 1044, 1046, 1050, 1052, 1053, 1054, 1060, 1061, 1064, 1071, 1072, 1075, 1076, 1079, 1099, 1104, 1105, 1108, 1113, 1119], "why": [172, 174, 347, 360, 363, 364, 368, 1113], "unifi": [172, 174, 178, 179, 359, 366, 383, 461, 490, 491, 492, 493, 505, 1113], "should": [172, 174, 178, 179, 180, 181, 182, 183, 189, 343, 344, 346, 347, 348, 349, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 368, 369, 370, 402, 403, 405, 416, 420, 421, 424, 432, 461, 511, 512, 515, 516, 519, 520, 523, 524, 527, 529, 532, 533, 536, 537, 540, 541, 544, 545, 548, 549, 552, 553, 556, 557, 560, 561, 564, 565, 568, 569, 572, 573, 576, 577, 580, 581, 584, 585, 598, 601, 602, 605, 606, 622, 625, 626, 629, 630, 633, 634, 637, 642, 645, 646, 649, 654, 657, 658, 661, 662, 665, 666, 669, 670, 673, 674, 677, 680, 683, 689, 692, 697, 700, 701, 704, 709, 712, 713, 716, 717, 720, 721, 724, 725, 728, 729, 733, 734, 738, 742, 743, 746, 747, 758, 791, 800, 821, 824, 826, 829, 831, 834, 836, 838, 840, 842, 844, 852, 864, 865, 866, 868, 869, 871, 872, 875, 877, 884, 886, 887, 890, 895, 897, 901, 903, 904, 906, 907, 909, 911, 913, 914, 920, 922, 923, 925, 926, 928, 929, 931, 951, 981, 984, 1038, 1049, 1050, 1051, 1052, 1055, 1056, 1057, 1059, 1071, 1072, 1075, 1076, 1079, 1080, 1083, 1088, 1091, 1092, 1095, 1096, 1099, 1100, 1103, 1113], "them": [172, 173, 174, 175, 355, 357, 359, 360, 366, 368, 369, 370, 383, 1113], "c": [172, 174, 175, 183, 290, 331, 332, 345, 350, 353, 356, 360, 365, 366, 367, 369, 383, 511, 689, 692, 747, 755, 756, 764, 817, 821, 823, 824, 826, 829, 831, 834, 836, 838, 840, 842, 844, 852, 858, 951, 995, 998, 1040, 1042, 1050, 1053, 1071, 1072, 1075, 1092, 1095, 1099, 1100, 1103, 1113, 1119], "standard": [172, 350, 351, 352, 354, 355, 359, 363, 364, 383, 405, 416, 424, 433, 436, 444, 511, 524, 529, 532, 549, 552, 569, 572, 573, 576, 581, 606, 689, 692, 705, 708, 721, 724, 725, 728, 734, 865, 872, 951, 965, 968, 969, 972, 985, 988, 1033, 1034, 1037, 1038, 1043, 1055, 1056, 1057, 1060, 1061, 1064, 1071, 1076, 1079, 1092, 1095, 1100, 1103, 1104, 1105, 1108, 1113, 1119, 1148, 1149], "re": [172, 173, 174, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 368, 371, 383, 461, 505, 747, 769, 865, 920, 922, 951, 985, 988, 1050, 1054, 1113], "collabor": [172, 173, 174, 1113], "consortium": [172, 174, 1113, 1119], "data": [172, 174, 178, 179, 180, 181, 182, 350, 351, 352, 356, 358, 360, 362, 363, 364, 368, 405, 406, 407, 408, 409, 410, 411, 412, 413, 416, 417, 418, 419, 420, 421, 422, 423, 428, 429, 430, 432, 433, 436, 438, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 456, 460, 461, 463, 464, 465, 466, 467, 468, 473, 474, 475, 477, 511, 512, 515, 516, 519, 520, 523, 524, 527, 529, 532, 533, 536, 537, 540, 541, 544, 545, 548, 549, 552, 553, 556, 557, 560, 561, 564, 565, 568, 569, 572, 573, 576, 577, 580, 581, 584, 585, 588, 590, 593, 598, 601, 602, 605, 606, 609, 610, 613, 614, 617, 618, 621, 622, 625, 626, 629, 630, 633, 634, 637, 638, 641, 642, 645, 646, 649, 654, 657, 658, 661, 662, 665, 666, 669, 670, 673, 674, 677, 680, 683, 689, 692, 697, 700, 701, 704, 709, 712, 713, 716, 717, 720, 721, 724, 725, 728, 729, 733, 734, 738, 742, 743, 746, 747, 755, 756, 793, 794, 796, 813, 821, 833, 850, 852, 861, 865, 866, 868, 869, 871, 872, 875, 877, 878, 880, 881, 883, 884, 886, 887, 890, 895, 897, 898, 900, 901, 903, 904, 906, 907, 909, 911, 913, 914, 920, 922, 923, 925, 926, 928, 929, 931, 951, 965, 968, 969, 972, 973, 976, 981, 984, 985, 988, 991, 994, 995, 998, 1038, 1049, 1050, 1051, 1052, 1053, 1060, 1061, 1064, 1071, 1076, 1079, 1080, 1083, 1084, 1087, 1088, 1091, 1092, 1095, 1096, 1100, 1103, 1104, 1105, 1108, 1109, 1112, 1113, 1119, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145], "api": [172, 173, 346, 347, 350, 352, 353, 355, 356, 358, 359, 361, 362, 363, 364, 365, 367, 369, 383, 405, 416, 424, 433, 436, 511, 524, 529, 532, 549, 552, 569, 572, 573, 576, 581, 606, 689, 692, 705, 708, 721, 724, 725, 728, 734, 865, 872, 951, 965, 968, 969, 972, 985, 988, 1055, 1056, 1057, 1060, 1061, 1064, 1071, 1076, 1079, 1104, 1105, 1108, 1113, 1119], "open": [173, 174, 175, 345, 346, 349, 352, 382, 405, 406, 1038, 1040, 1041, 1044, 1046, 1113], "project": [173, 174, 175, 346, 347, 349, 351, 357, 368, 370, 382, 383, 1038, 1039, 1043, 1044, 1046], "grown": 173, "consider": [173, 353, 364], "recent": [173, 174, 346, 347], "year": [173, 175, 383, 1113], "especi": [173, 346], "deep": [173, 178, 179, 345, 347, 348, 365, 369, 1113], "learn": [173, 174, 346, 348, 350, 356, 365, 371, 382, 511, 614, 821, 824, 826, 829, 831, 834, 836, 838, 840, 842, 844, 1011, 1012, 1013, 1014, 1113, 1150, 1151, 1152, 1153, 1154, 1155], "can": [173, 174, 175, 345, 346, 347, 350, 351, 352, 353, 354, 355, 356, 357, 360, 361, 362, 363, 364, 365, 366, 368, 369, 370, 371, 382, 383, 405, 407, 417, 424, 433, 436, 461, 503, 504, 505, 865, 884, 951, 981, 984, 1038, 1040, 1041, 1113, 1119], "seen": [173, 174, 353, 368, 369], "rapidli": 173, "increas": [173, 461, 485, 489, 493, 951, 961, 964, 1007, 1010, 1015, 1027], "github": [173, 347, 348, 352, 355], "repo": [173, 174, 175, 346, 347, 354, 366, 368, 369, 370, 371, 382, 1113, 1119], "term": [173, 347, 360, 852, 862, 1134, 1144], "time": [173, 174, 175, 346, 347, 348, 355, 356, 360, 361, 364, 366, 369, 371, 383, 821, 824, 826, 834, 836, 852, 862, 951, 1003, 1006, 1011, 1012, 1013, 1014, 1050, 1051, 1052, 1055, 1056, 1057, 1134, 1145, 1146, 1147], "These": [173, 174, 175, 347, 352, 353, 355, 356, 360, 361, 363, 364, 366, 367, 369, 370, 371, 383, 865, 878, 880, 1113, 1119], "written": [173, 346, 351, 352, 359, 363, 364, 366, 368, 371, 383], "mani": [173, 174, 175, 178, 179, 346, 347, 348, 352, 353, 356, 358, 359, 360, 361, 362, 363, 364, 366, 368, 369, 383, 951, 990], "differ": [173, 174, 175, 178, 179, 180, 181, 182, 346, 347, 350, 351, 352, 353, 355, 356, 359, 360, 362, 363, 364, 366, 367, 368, 369, 370, 371, 383, 424, 444, 461, 482, 483, 486, 487, 511, 524, 680, 683, 729, 733, 852, 861, 951, 995, 998, 1071, 1088, 1091, 1096, 1113], "while": [173, 174, 178, 179, 180, 181, 182, 346, 347, 353, 357, 363, 370, 371, 383, 511, 666, 669, 670, 673, 1055, 1056, 1071, 1080, 1083], "wonder": [173, 175, 368], "thing": [173, 174, 175, 346, 347, 348, 357, 368, 369], "research": [173, 382], "develop": [173, 174, 175, 345, 346, 347, 348, 382, 383, 1113], "consid": [173, 174, 178, 179, 351, 356, 367, 368, 369, 511, 666, 669, 670, 673, 1055, 1056, 1057, 1059], "speed": 173, "evolv": 173, "sharabl": 173, "code": [173, 174, 175, 178, 179, 180, 181, 182, 346, 347, 348, 349, 350, 352, 353, 356, 357, 358, 359, 360, 363, 364, 365, 366, 367, 368, 369, 370, 371, 381, 383, 394, 396, 397, 398, 399, 400, 401, 461, 483, 506, 511, 569, 572, 725, 728, 852, 858, 859, 1055, 1056, 1057, 1060, 1061, 1064, 1071, 1072, 1075, 1099, 1113, 1119], "significantli": 173, "hinder": [173, 364], "librari": [173, 174, 175, 366, 371, 381, 383, 461, 506, 511, 602, 605, 666, 669, 670, 673, 865, 878, 880, 1055, 1056, 1057, 1059, 1071, 1076, 1079, 1080, 1083, 1084, 1087, 1113], "outdat": 173, "month": 173, "rigor": 173, "maintain": [173, 347, 1060, 1061, 1064, 1066, 1069], "against": [173, 178, 179, 355, 383, 424, 431, 865, 886, 887, 890, 891, 893, 895, 897, 904, 906, 1050, 1051], "newest": 173, "version": [173, 174, 175, 346, 352, 366, 368, 865, 878, 880, 1113], "For": [173, 174, 175, 346, 347, 348, 349, 350, 351, 352, 353, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 366, 368, 369, 370, 371, 382, 383, 405, 406, 416, 511, 512, 515, 516, 519, 520, 523, 524, 527, 529, 532, 533, 536, 537, 541, 544, 573, 576, 577, 580, 581, 584, 598, 601, 602, 605, 606, 642, 645, 646, 649, 654, 657, 658, 661, 680, 683, 697, 700, 701, 704, 705, 708, 713, 716, 717, 720, 721, 724, 734, 743, 746, 821, 833, 850, 865, 914, 923, 925, 951, 952, 955, 995, 998, 1055, 1056, 1057, 1059, 1071, 1076, 1079, 1084, 1087, 1096, 1123, 1124], "softwar": [173, 174, 346, 347], "pipelin": [173, 359, 371], "where": [173, 174, 175, 178, 179, 180, 181, 345, 346, 347, 348, 349, 352, 356, 357, 359, 360, 361, 362, 363, 366, 369, 370, 371, 383, 405, 412, 413, 416, 511, 541, 544, 598, 650, 653, 680, 683, 697, 700, 747, 787, 791, 800, 865, 878, 880, 886, 895, 897, 904, 906, 907, 909, 914, 916, 917, 919, 923, 925, 926, 928, 951, 952, 955, 961, 964, 965, 968, 973, 976, 995, 998, 1007, 1010, 1015, 1016, 1026, 1038, 1039, 1050, 1053, 1071, 1092, 1095, 1100, 1103, 1104, 1105, 1108, 1109, 1112, 1113], "rapid": [173, 174, 346], "prototyp": 173, "vital": [173, 371], "signific": [173, 174, 383], "bottleneck": 173, "new": [173, 174, 175, 178, 179, 345, 346, 347, 348, 349, 350, 351, 352, 353, 355, 358, 360, 361, 363, 365, 368, 371, 382, 405, 408, 411, 412, 413, 418, 419, 422, 423, 424, 456, 511, 540, 545, 548, 650, 653, 693, 696, 738, 739, 742, 747, 769, 770, 771, 774, 775, 776, 779, 803, 804, 805, 806, 811, 812, 821, 824, 826, 829, 831, 834, 836, 838, 840, 842, 844, 951, 965, 968, 981, 984, 995, 998, 1015, 1020, 1031, 1032, 1033, 1034, 1037, 1113, 1123, 1124, 1134, 1144, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155], "futur": [173, 175, 346, 347, 368, 383, 865, 878, 880], "avail": [173, 178, 179, 346, 347, 352, 362, 383, 461, 480, 496, 497, 498, 508, 747, 770], "specif": [173, 178, 179, 348, 356, 359, 360, 361, 362, 363, 364, 366, 367, 368, 370, 371, 382, 383, 424, 452, 461, 503, 506, 511, 666, 669, 670, 673, 747, 769, 770, 771, 798, 865, 878, 880, 920, 922, 951, 995, 998, 1011, 1012, 1013, 1014, 1038, 1039, 1071, 1076, 1079, 1080, 1083, 1084, 1087, 1113, 1116, 1118, 1119, 1146, 1147], "quickli": [173, 175, 346, 347, 369, 370], "obsolet": [173, 175], "user": [173, 174, 346, 347, 349, 350, 355, 357, 360, 363, 365, 383, 1134, 1145, 1146, 1147], "constantli": 173, "invent": 173, "wheel": 173, "desir": [173, 178, 179, 424, 430, 433, 436, 461, 506, 747, 787, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145], "provid": [173, 178, 179, 346, 347, 352, 353, 356, 359, 360, 361, 362, 363, 364, 366, 370, 382, 383, 402, 403, 405, 416, 424, 439, 440, 441, 448, 452, 460, 461, 480, 747, 768, 800, 804, 821, 824, 826, 829, 831, 834, 836, 838, 840, 842, 844, 865, 926, 928, 951, 969, 972, 995, 998, 1050, 1051, 1071, 1092, 1095, 1100, 1103, 1104, 1105, 1108, 1109, 1112, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1143, 1144, 1145, 1150, 1151, 1152, 1153, 1154, 1155], "simultan": [173, 175], "modern": [173, 174], "simpl": [173, 346, 347, 351, 352, 353, 355, 356, 359, 360, 361, 362, 363, 366, 368, 370, 371, 383, 747, 772], "scalabl": [173, 366], "must": [173, 175, 178, 179, 180, 181, 182, 346, 347, 348, 351, 352, 353, 356, 359, 360, 361, 362, 364, 366, 370, 371, 394, 397, 405, 406, 408, 409, 410, 412, 413, 416, 418, 419, 420, 421, 422, 423, 424, 430, 431, 432, 461, 490, 491, 492, 493, 505, 506, 511, 512, 515, 516, 519, 520, 523, 524, 527, 529, 532, 533, 536, 537, 540, 541, 544, 545, 548, 549, 552, 553, 556, 557, 560, 561, 564, 565, 568, 569, 572, 573, 576, 577, 580, 581, 584, 585, 588, 590, 593, 598, 601, 602, 605, 606, 609, 610, 613, 614, 617, 618, 621, 622, 625, 626, 629, 630, 633, 634, 637, 638, 641, 642, 645, 646, 649, 650, 653, 654, 657, 658, 661, 662, 665, 666, 669, 670, 673, 674, 677, 678, 679, 680, 683, 685, 688, 689, 692, 697, 700, 701, 704, 705, 708, 709, 712, 713, 716, 717, 720, 721, 724, 725, 728, 729, 733, 734, 738, 742, 743, 746, 747, 760, 762, 773, 804, 865, 866, 868, 869, 871, 872, 875, 877, 878, 880, 881, 883, 884, 886, 887, 890, 895, 897, 898, 900, 901, 903, 904, 906, 907, 909, 911, 913, 914, 920, 922, 923, 925, 926, 928, 929, 931, 935, 936, 939, 941, 944, 946, 949, 951, 952, 955, 957, 960, 965, 968, 969, 972, 973, 976, 977, 980, 985, 988, 991, 994, 995, 998, 999, 1002, 1038, 1040, 1041, 1048, 1050, 1051, 1052, 1053, 1055, 1056, 1057, 1059, 1060, 1061, 1064, 1066, 1069, 1071, 1076, 1079, 1080, 1083, 1084, 1087, 1088, 1091, 1092, 1095, 1096, 1100, 1103, 1104, 1105, 1108, 1109, 1112, 1150, 1154], "determin": [173, 178, 179, 352, 356, 360, 361, 362, 424, 433, 436, 438, 443, 448, 449, 450, 460, 461, 496, 497, 498, 508, 511, 516, 519, 520, 523, 524, 527, 529, 532, 533, 536, 537, 540, 541, 544, 545, 548, 549, 552, 557, 560, 561, 564, 565, 568, 569, 572, 577, 580, 581, 584, 585, 598, 601, 602, 605, 622, 625, 626, 629, 630, 633, 642, 645, 646, 649, 654, 657, 658, 661, 674, 677, 680, 683, 697, 700, 701, 704, 713, 716, 717, 720, 721, 724, 734, 738, 742, 747, 748, 751, 755, 756, 786, 788, 792, 793, 794, 795, 796, 813, 820, 821, 833, 852, 863, 865, 866, 868, 869, 871, 872, 874, 875, 877, 884, 886, 887, 890, 895, 897, 901, 903, 904, 906, 910, 911, 913, 923, 925, 926, 928, 929, 931, 1011, 1012, 1013, 1014, 1055, 1056, 1057, 1059, 1104, 1105, 1108, 1109, 1112], "exactli": [173, 175, 353, 360, 362, 1113, 1119], "common": [173, 178, 179, 347, 348, 353, 356, 358, 360, 362, 383], "ground": [173, 355], "li": 173, "between": [173, 178, 179, 180, 181, 182, 353, 355, 356, 359, 360, 364, 365, 367, 368, 369, 371, 382, 405, 406, 424, 444, 511, 541, 544, 697, 700, 935, 936, 939, 941, 944, 946, 949, 951, 965, 968, 995, 998, 1015, 1021, 1038, 1040, 1041, 1055, 1056, 1057, 1059, 1113, 1150, 1152], "find": [173, 178, 179, 346, 347, 366, 369, 1055, 1056, 1057, 1059, 1113], "exist": [173, 174, 178, 179, 180, 181, 346, 348, 349, 352, 353, 354, 355, 356, 357, 358, 363, 366, 383, 747, 768, 1150, 1154], "essenti": [173, 174, 348, 353, 356, 362], "order": [173, 178, 179, 180, 181, 182, 346, 347, 349, 352, 353, 357, 359, 360, 361, 362, 364, 368, 369, 371, 383, 511, 541, 544, 821, 824, 826, 829, 831, 834, 836, 838, 840, 842, 844, 865, 878, 880, 891, 893, 914, 916, 917, 919, 929, 931, 951, 969, 972, 1011, 1012, 1013, 1050, 1053, 1055, 1056, 1057, 1059, 1060, 1061, 1064, 1066, 1069, 1156, 1157], "design": [173, 174, 350, 363, 366, 368, 383], "univers": 173, "abstract": [173, 360, 370, 383, 461, 476, 1150, 1154], "In": [173, 175, 346, 347, 351, 352, 353, 356, 357, 360, 361, 362, 363, 364, 366, 368, 369, 370, 371, 382, 383, 461, 500, 506, 507, 510, 511, 524, 680, 683, 701, 704, 747, 753, 791, 951, 981, 984, 1038, 1044, 1046, 1113], "languag": [173, 175, 366], "first": [173, 174, 346, 347, 349, 353, 356, 359, 360, 364, 366, 368, 369, 371, 402, 403, 405, 414, 415, 424, 451, 456, 461, 480, 492, 511, 524, 527, 549, 552, 557, 560, 561, 564, 565, 568, 569, 572, 588, 590, 593, 601, 609, 610, 613, 617, 618, 621, 634, 637, 638, 641, 658, 661, 662, 665, 670, 673, 674, 677, 680, 683, 689, 692, 697, 700, 729, 733, 747, 755, 821, 828, 865, 869, 871, 875, 877, 878, 880, 887, 890, 901, 903, 907, 909, 914, 920, 922, 926, 928, 951, 957, 960, 985, 988, 995, 998, 999, 1002, 1011, 1012, 1013, 1014, 1015, 1016, 1025, 1026, 1038, 1049, 1050, 1051, 1052, 1055, 1056, 1057, 1134, 1145, 1146, 1147, 1150, 1154], "see": [173, 345, 346, 347, 348, 354, 356, 360, 362, 364, 368, 369, 382, 383, 405, 406, 411, 414, 415, 424, 432, 452, 511, 524, 527, 549, 552, 557, 560, 561, 564, 565, 568, 569, 572, 585, 601, 602, 605, 634, 637, 658, 661, 670, 673, 674, 677, 680, 683, 689, 692, 697, 700, 701, 704, 729, 733, 865, 886, 895, 897, 904, 906, 911, 913, 926, 928, 929, 931, 1050, 1052, 1055, 1056, 1057, 1059, 1071, 1076, 1079, 1080, 1083, 1084, 1087, 1088, 1091, 1092, 1095, 1096, 1100, 1103, 1104, 1105, 1108, 1109, 1112, 1113], "clear": [173, 174, 175, 347, 348, 353, 355, 361, 362, 366, 368, 461, 479], "front": [173, 365, 366, 369, 1113, 1119], "runner": 173, "look": [173, 346, 347, 349, 351, 353, 356, 357, 360, 361, 362, 364, 366, 368, 370, 371, 1113], "littl": [173, 368], "deeper": [173, 347, 350, 365, 461, 485, 489, 493, 1015, 1026, 1027], "follow": [173, 174, 178, 179, 346, 347, 348, 349, 351, 352, 353, 355, 357, 359, 360, 361, 362, 363, 365, 366, 368, 369, 370, 371, 383, 424, 447, 461, 505, 511, 701, 704, 747, 789, 790, 791, 811, 812, 821, 824, 826, 829, 831, 834, 836, 838, 840, 842, 844, 852, 863, 864, 865, 907, 909, 929, 931, 1015, 1021, 1027, 1055, 1056, 1057, 1059, 1113, 1134, 1144, 1150, 1154], "core": [173, 346, 348, 362, 366, 371, 461, 497, 1113], "principl": 173, "oper": [173, 178, 179, 180, 181, 183, 346, 348, 352, 353, 356, 359, 360, 362, 363, 369, 370, 405, 414, 415, 424, 452, 511, 524, 565, 568, 569, 572, 593, 617, 618, 621, 685, 688, 689, 692, 701, 704, 725, 728, 747, 757, 769, 770, 771, 813, 821, 824, 826, 829, 831, 834, 836, 838, 840, 842, 844, 852, 853, 854, 855, 856, 857, 858, 859, 861], "expos": [173, 366, 370, 747, 763], "almost": [173, 347, 360, 367, 369], "ident": [173, 175, 178, 179, 356, 358, 360, 368, 369, 383, 461, 495, 1015, 1028, 1113], "uniqu": [173, 356, 360, 383, 461, 470, 471, 1011, 1012, 1013, 1014, 1015, 1021, 1055, 1056, 1057, 1058, 1059], "syntax": [173, 174], "There": [173, 346, 347, 353, 356, 359, 360, 361, 366, 369, 383], "onli": [173, 178, 179, 345, 346, 347, 351, 353, 355, 356, 357, 359, 360, 361, 362, 363, 364, 366, 368, 369, 370, 371, 381, 383, 461, 501, 511, 666, 669, 670, 673, 865, 887, 890, 907, 909, 951, 969, 972, 1015, 1016, 1017, 1025, 1026, 1050, 1051, 1052, 1071, 1080, 1083, 1113, 1150, 1151, 1152, 1153, 1154, 1155], "wai": [173, 174, 346, 357, 363, 368, 369, 370, 371, 383], "unsurprisingli": [173, 353], "fundament": [173, 360, 366], "consist": [173, 178, 179, 359, 363, 461, 493, 865, 878, 880, 1071, 1072, 1075, 1099, 1146, 1147], "each": [173, 174, 175, 178, 179, 180, 181, 182, 183, 347, 348, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 363, 364, 365, 366, 368, 369, 371, 382, 383, 394, 397, 398, 400, 405, 416, 424, 431, 461, 470, 471, 482, 483, 484, 485, 486, 487, 488, 492, 505, 511, 512, 515, 516, 519, 520, 523, 524, 527, 529, 532, 533, 536, 537, 540, 541, 544, 545, 548, 549, 552, 553, 556, 557, 560, 561, 564, 565, 568, 569, 572, 573, 576, 577, 580, 581, 584, 585, 588, 590, 593, 598, 601, 602, 605, 606, 609, 610, 613, 614, 617, 618, 621, 622, 625, 626, 629, 630, 633, 634, 637, 638, 641, 642, 645, 646, 649, 650, 653, 654, 657, 658, 661, 662, 665, 666, 669, 670, 673, 674, 677, 680, 683, 685, 688, 689, 692, 693, 696, 697, 700, 701, 704, 705, 708, 709, 712, 713, 716, 717, 720, 721, 724, 725, 728, 729, 733, 734, 738, 742, 743, 746, 747, 748, 751, 821, 824, 826, 829, 831, 834, 836, 838, 840, 842, 844, 852, 853, 854, 855, 856, 857, 858, 859, 860, 865, 866, 868, 869, 871, 872, 878, 880, 886, 887, 890, 895, 897, 898, 900, 904, 906, 911, 913, 914, 951, 961, 964, 977, 980, 985, 988, 990, 995, 998, 1003, 1006, 1007, 1010, 1015, 1021, 1028, 1038, 1039, 1050, 1053, 1055, 1056, 1057, 1071, 1072, 1075, 1099, 1113, 1119, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1145, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157], "veri": [173, 174, 346, 347, 351, 353, 355, 356, 360, 362, 363, 364, 367, 369, 370, 371, 383, 1113], "similar": [173, 351, 360, 361, 362, 369, 383, 511, 701, 704, 852, 863, 1134, 1145], "convent": [173, 382, 865, 887, 890, 1071, 1072, 1075, 1099], "those": [173, 178, 179, 346, 347, 348, 360, 366, 371, 405, 406, 821, 850, 865, 907, 909, 914, 951, 952, 955], "introduc": [173, 360, 369, 951, 985, 988, 1055, 1056], "2006": 173, "therefor": [173, 347, 351, 352, 353, 354, 355, 356, 359, 360, 361, 362, 363, 364, 366, 368, 370, 383, 424, 433, 436, 511, 524, 529, 532, 573, 576, 606, 689, 692, 721, 724, 725, 728, 734, 747, 775, 852, 855, 864, 951, 985, 988, 1033, 1034, 1037, 1071, 1076, 1079, 1104, 1105, 1108], "present": [173, 178, 179, 347, 354, 360, 361, 362, 363, 364, 366], "itself": [173, 346, 347, 360, 363, 364, 370, 382, 383, 747, 753, 1015, 1027], "cut": 173, "cloth": 173, "adher": [173, 174, 352, 354, 366, 371], "semant": [173, 366, 371, 511, 701, 704], "up": [173, 174, 175, 345, 347, 348, 349, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 366, 367, 368, 369, 370, 371, 382, 383], "hopefulli": [173, 174, 175, 346, 347, 348, 349, 350, 351, 352, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 366, 368, 369, 370, 371, 382], "paint": [173, 366], "pictur": [173, 366], "how": [173, 175, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 367, 368, 369, 370, 371, 382, 383, 1113, 1119, 1134, 1145, 1146, 1147], "pleas": [173, 174, 175, 346, 347, 348, 349, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 366, 368, 369, 370, 371, 382, 1113], "discuss": [173, 174, 175, 345, 346, 347, 348, 349, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 366, 368, 369, 370, 371, 382, 383, 1113], "faq": [173, 174, 175, 366, 368, 369, 370, 371, 382], "reach": [173, 174, 175, 346, 347, 348, 349, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 366, 368, 369, 370, 371, 382, 461, 485, 489, 493, 1015, 1027], "discord": [173, 174, 175, 346, 347, 348, 349, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 366, 368, 369, 370, 371, 382, 1113], "you": [173, 174, 175, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 368, 369, 370, 371, 382, 383, 1113, 1119], "question": [173, 174, 175, 346, 347, 353, 355, 366, 368, 369, 370, 371, 382, 383, 1113], "central": 174, "goal": [174, 348], "being": [174, 175, 178, 179, 346, 347, 353, 355, 358, 359, 360, 361, 362, 363, 364, 366, 369, 382, 383, 405, 406, 747, 802, 807, 1055, 1058, 1113], "would": [174, 346, 347, 349, 350, 352, 353, 355, 357, 358, 359, 360, 363, 364, 365, 366, 368, 370, 371, 383, 394, 399, 461, 506, 1113], "entir": [174, 175, 178, 179, 347, 353, 354, 355, 359, 360, 363, 368, 369, 370, 371, 383, 461, 505, 1071, 1076, 1079, 1080, 1083, 1084, 1087, 1088, 1091, 1092, 1095, 1096, 1100, 1103, 1104, 1105, 1108, 1109, 1112, 1134, 1143], "forgiven": 174, "rais": [174, 178, 179, 347, 363, 366, 368, 424, 432, 511, 598, 697, 700, 747, 757, 782, 791, 805, 812, 818, 865, 887, 890, 894, 926, 928, 951, 991, 994, 995, 998, 1050, 1053, 1071, 1076, 1079, 1084, 1087, 1104, 1105, 1108, 1109, 1112, 1146, 1147, 1150, 1154], "eyebrow": 174, "somehow": 174, "pytorch": [174, 175, 348, 356, 361, 362, 363, 364, 366, 368, 371, 383, 821, 824, 826, 829, 831, 834, 836, 838, 840, 842, 844, 1113, 1150, 1151, 1152, 1153, 1154, 1155], "other": [174, 178, 179, 180, 181, 183, 346, 347, 351, 352, 353, 355, 356, 359, 360, 363, 366, 368, 370, 371, 381, 382, 383, 402, 403, 405, 406, 511, 602, 605, 747, 748, 751, 753, 821, 828, 1038, 1044, 1046, 1055, 1058, 1071, 1092, 1095, 1100, 1103, 1113], "strong": [174, 383], "industri": 174, "back": [174, 359, 365, 366, 368, 383, 1113, 1119, 1146, 1147, 1150, 1154], "momentum": 174, "won": [174, 175, 347, 371], "ad": [174, 183, 189, 343, 344, 346, 347, 348, 351, 352, 353, 355, 356, 358, 359, 360, 361, 363, 364, 366, 370, 383, 747, 811, 812, 865, 878, 880, 951, 965, 968, 1156, 1157], "just": [174, 175, 346, 347, 352, 353, 355, 356, 363, 366, 368, 369, 383, 1071, 1072, 1075, 1099, 1134, 1143], "make": [174, 175, 346, 347, 348, 351, 352, 353, 354, 355, 356, 359, 360, 361, 362, 363, 364, 366, 368, 369, 371, 461], "problem": [174, 347, 359, 368], "even": [174, 175, 346, 347, 352, 356, 361, 362, 364, 368, 369, 370, 371, 383, 511, 697, 700, 705, 708], "wors": 174, "rather": [174, 178, 179, 351, 352, 355, 360, 371, 383, 405, 406, 461, 505, 747, 793, 794, 796, 821, 833], "funni": 174, "comic": 174, "strip": 174, "easi": [174, 346, 347, 356, 360], "feasibl": 174, "space": [174, 405, 406, 414, 415, 747, 774], "unlik": [174, 353, 360, 461], "charger": 174, "charact": 174, "encod": [174, 369, 747, 774], "instant": [174, 1113], "messag": [174, 347, 366, 368, 1159, 1160], "much": [174, 347, 351, 359, 360, 363, 366, 368, 369], "doe": [174, 178, 179, 347, 349, 350, 351, 352, 353, 355, 356, 357, 361, 363, 364, 366, 368, 369, 383, 511, 569, 572, 747, 791, 951, 990], "mandat": [174, 355, 363], "adopt": [174, 347, 359], "continu": [174, 175, 354, 355, 383], "own": [174, 175, 346, 352, 366, 383], "signatur": [174, 351, 352, 353, 360, 361, 362, 363, 364, 424, 433, 436, 511, 529, 532, 569, 572, 573, 576, 581, 606, 689, 692, 721, 724, 725, 728, 951, 965, 968, 985, 988, 1055, 1056, 1057, 1060, 1061, 1064, 1071, 1076, 1079], "replac": [174, 178, 179, 347, 349, 353, 355, 358, 360, 361, 362, 366, 368, 371, 383, 747, 803, 804, 951, 952, 955, 1038, 1039], "your": [174, 175, 345, 346, 348, 349, 351, 352, 369, 370, 383, 1113], "10": [174, 176, 177, 178, 179, 180, 181, 182, 183, 234, 286, 290, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 346, 349, 353, 360, 366, 368, 369, 405, 412, 415, 461, 511, 549, 552, 553, 556, 581, 593, 617, 618, 621, 646, 649, 721, 724, 747, 765, 775, 802, 807, 821, 834, 835, 836, 837, 852, 858, 865, 872, 875, 877, 901, 903, 920, 922, 951, 969, 972, 977, 980, 990, 1033, 1034, 1037, 1038, 1039, 1040, 1041, 1042, 1050, 1053, 1055, 1056, 1071, 1072, 1075, 1076, 1079, 1099, 1150, 1152], "100": [174, 175, 183, 290, 331, 332, 369, 370, 371, 383, 511, 721, 724, 1040, 1042, 1113], "despit": [174, 360, 362], "distinct": [174, 352, 360, 363, 365, 1055, 1056, 1057, 1059, 1113], "still": [174, 178, 179, 352, 355, 361, 368, 370, 383, 1113], "believ": [174, 347], "share": [174, 178, 179, 353, 355, 356, 357, 360, 366, 424, 456], "bring": [174, 366, 367], "benefit": [174, 175, 346, 347, 359, 360, 363, 368, 369, 383], "unrel": [174, 347], "what": [174, 175, 347, 350, 352, 353, 358, 360, 364, 365, 366, 368, 369, 370, 371, 382, 383, 1113], "again": [174, 175, 347, 351, 353, 360, 363, 369, 371, 383], "contrari": 174, "bumpi": 174, "road": 174, "allud": [174, 369], "most": [174, 178, 179, 346, 347, 351, 355, 356, 359, 360, 361, 362, 363, 364, 366, 368, 369, 370, 383, 865, 878, 880], "technolog": 174, "sector": [174, 511, 519, 520, 523, 533, 536, 540, 545, 548, 580, 584, 738, 742], "full": [174, 175, 180, 181, 347, 352, 361, 364, 366, 383, 405, 424, 444, 511, 593, 617, 618, 621, 852, 858, 865, 907, 909, 911, 913, 914, 1033, 1034, 1037], "success": 174, "reason": [174, 347, 351, 353, 356, 359, 360, 361, 363, 366, 368, 511, 701, 704], "build": [174, 345, 346, 356, 365, 367, 370, 371, 383, 1055, 1056, 1057, 1059, 1113, 1134, 1145, 1146, 1147], "custom": [174, 370], "comput": [174, 175, 178, 179, 346, 356, 360, 366, 369, 383, 461, 505, 511, 524, 549, 552, 561, 564, 569, 572, 590, 593, 594, 597, 614, 617, 618, 621, 634, 637, 638, 641, 662, 665, 666, 669, 670, 673, 674, 677, 680, 683, 685, 688, 689, 692, 747, 759, 760, 762, 765, 766, 821, 823, 824, 826, 828, 829, 831, 834, 836, 838, 840, 842, 844, 847, 849, 852, 853, 854, 855, 856, 857, 858, 859, 861, 863, 865, 866, 868, 869, 871, 874, 878, 880, 881, 883, 884, 887, 890, 891, 893, 907, 909, 910, 911, 913, 914, 926, 928, 929, 931, 935, 936, 939, 941, 944, 946, 949, 1015, 1021, 1055, 1056, 1057, 1059, 1071, 1072, 1075, 1076, 1079, 1080, 1083, 1084, 1087, 1088, 1091, 1092, 1095, 1096, 1099, 1100, 1103], "thank": [174, 369], "interoper": 174, "compon": [174, 366], "bio": [174, 346], "hardwar": [174, 346], "initi": [174, 178, 179, 180, 181, 182, 347, 357, 361, 362, 461, 852, 862, 1127, 1128, 1130, 1131, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1143, 1144, 1145, 1146, 1147, 1150, 1154], "pcie": 174, "interfac": [174, 371, 383], "motherboard": 174, "raid": 174, "storag": [174, 369], "virtual": [174, 347, 349], "bluetooth": 174, "wireless": 174, "exchang": 174, "btx": 174, "factor": [174, 461, 470, 503, 504, 505, 821, 823, 824, 826, 834, 836, 838, 840, 852, 853, 854, 855, 856, 857, 858, 859, 865, 866, 868, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1150, 1151, 1152, 1153], "sata": 174, "connect": [174, 346, 370, 371, 1134, 1144, 1145], "host": [174, 383], "bu": 174, "adapt": [174, 821, 838, 840, 1150, 1153], "html": [174, 349, 352, 424, 433, 436, 511, 529, 532, 569, 572, 573, 576, 581, 606, 689, 692, 721, 724, 725, 728, 951, 965, 968, 985, 988, 1055, 1056, 1057, 1060, 1061, 1064, 1071, 1076, 1079], "enabl": [174, 178, 179, 180, 181, 182, 346, 347, 355, 356, 359, 360, 363, 365, 366, 367, 369, 371, 383], "anyon": [174, 345, 383], "websit": 174, "tcp": 174, "ip": 174, "node": [174, 178, 179, 360, 1015, 1016, 1025, 1026], "commun": [174, 345, 347, 348, 383, 1113, 1119], "network": [174, 356, 360, 366, 370, 382, 852, 861, 1113, 1120, 1134, 1146, 1147], "smtp": 174, "possibl": [174, 345, 346, 347, 348, 352, 353, 355, 360, 361, 363, 366, 369, 382, 383, 747, 797, 815, 1071, 1076, 1079, 1084, 1087], "send": 174, "gmail": 174, "outlook": 174, "pop": 174, "email": 174, "ieee": [174, 404, 424, 444, 511, 524, 602, 605, 680, 683, 701, 704, 721, 724], "754": [174, 404, 424, 444, 511, 524, 602, 605, 680, 683, 701, 704, 721, 724], "allow": [174, 366, 383, 405, 414, 415, 747, 797, 1146, 1147], "calcul": [174, 178, 179, 180, 181, 182, 352, 511, 512, 515, 516, 519, 520, 523, 524, 527, 529, 532, 533, 536, 537, 541, 544, 577, 580, 581, 584, 585, 598, 601, 602, 605, 642, 645, 646, 649, 650, 653, 654, 657, 658, 661, 680, 683, 697, 700, 713, 716, 717, 720, 721, 724, 729, 733, 734, 935, 936, 939, 941, 944, 946, 949, 1071, 1076, 1079, 1080, 1083, 1084, 1087, 1088, 1091, 1092, 1095, 1096, 1100, 1103], "live": [174, 175], "depend": [174, 346, 347, 352, 358, 360, 361, 366, 383, 424, 430, 511, 512, 515, 516, 519, 520, 523, 529, 532, 533, 536, 537, 541, 544, 577, 580, 581, 584, 598, 602, 605, 642, 645, 646, 649, 650, 653, 654, 657, 697, 700, 713, 716, 717, 720, 734, 865, 878, 880, 907, 909, 911, 913, 914, 1050, 1054, 1060, 1061, 1064, 1066, 1069], "did": [174, 348, 371], "aris": [174, 383], "until": [174, 347, 383, 1113], "substanti": [174, 347, 355, 359], "innov": 174, "growth": 174, "usag": [174, 366, 461, 505], "relev": [174, 346, 348, 353, 360, 361, 369, 1150, 1151, 1152, 1153, 1154, 1155], "area": [174, 363, 381, 511, 519, 520, 523, 533, 536, 540, 545, 548, 580, 584, 738, 742, 1113], "necess": 174, "parti": [174, 383], "could": [174, 175, 346, 347, 353, 355, 360, 361, 363, 366, 368, 369, 370, 1055, 1056, 1057, 1059], "easili": [174, 347, 369, 370, 371, 383, 1113], "engag": [174, 345, 346, 347, 348, 349, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364], "regard": [174, 360, 461], "effect": [174, 352, 359, 360, 364, 383, 405, 416, 821, 842, 844, 1071, 1092, 1095, 1100, 1103], "2015": 174, "sinc": [174, 346, 347, 383], "alongsid": 174, "machin": [174, 346, 356, 382, 424, 444, 447, 511, 614, 865, 886, 895, 897, 904, 906], "given": [174, 175, 178, 179, 346, 347, 348, 349, 351, 352, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 366, 368, 370, 371, 382, 405, 406, 408, 414, 415, 461, 494, 500, 502, 503, 504, 505, 507, 510, 747, 765, 766, 776, 779, 803, 804, 819, 821, 823, 824, 826, 829, 831, 834, 836, 838, 840, 842, 844, 852, 853, 854, 855, 856, 857, 858, 859, 865, 932, 934, 935, 936, 939, 941, 944, 946, 949, 951, 952, 955, 965, 968, 969, 972, 977, 980, 985, 988, 990, 1003, 1006, 1015, 1022, 1023, 1038, 1040, 1041, 1043, 1044, 1046, 1049, 1060, 1066, 1069, 1123, 1124], "frame": [174, 382], "matur": [174, 383], "state": [174, 352, 364, 365, 366, 367, 369, 382, 511, 680, 683, 852, 862, 1113, 1120, 1121, 1122, 1123, 1124, 1125, 1127, 1128, 1130, 1131, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157], "than": [174, 178, 179, 347, 351, 353, 355, 360, 363, 366, 369, 370, 371, 383, 405, 406, 424, 444, 461, 505, 511, 516, 519, 520, 523, 529, 532, 541, 544, 557, 560, 565, 568, 573, 576, 580, 584, 588, 606, 609, 610, 613, 642, 645, 646, 649, 654, 657, 678, 697, 700, 701, 704, 709, 712, 721, 724, 743, 746, 747, 793, 794, 796, 821, 833, 865, 869, 871, 886, 887, 890, 895, 897, 904, 906, 929, 931, 951, 952, 955, 969, 972, 991, 994, 1038, 1044, 1046, 1055, 1056, 1057, 1059, 1071, 1088, 1091, 1092, 1095, 1096, 1100, 1103], "preced": [174, 370], "mention": [174, 346, 347, 353, 356, 363, 364], "aros": 174, "70": [174, 865, 901, 903, 1071, 1072, 1075, 1099], "80": [174, 865, 901, 903, 1071, 1072, 1075, 1099], "90": [174, 183, 290, 331, 332, 511, 569, 572, 705, 708, 865, 901, 903, 1040, 1042, 1071, 1072, 1075, 1099], "effort": [174, 345, 383], "stage": [174, 345, 347, 349, 350, 1113], "complet": [174, 178, 179, 347, 348, 359, 360, 368, 369, 865, 907, 909], "natur": [174, 353, 359, 360, 382, 511, 598, 642, 645, 650, 653, 865, 874, 910], "like": [174, 346, 347, 349, 350, 351, 352, 353, 355, 362, 363, 364, 365, 366, 368, 369, 370, 371, 382, 383, 821, 833, 1038, 1044, 1046, 1113], "certainli": 174, "mission": [174, 1113], "creat": [174, 178, 179, 345, 346, 347, 349, 361, 362, 363, 366, 367, 370, 381, 382, 405, 406, 407, 408, 409, 410, 412, 413, 414, 415, 417, 418, 419, 422, 423, 461, 470, 471, 747, 775, 776, 779, 800, 803, 804, 815, 821, 849, 1038, 1039, 1040, 1041, 1044, 1046, 1113, 1119, 1123, 1124, 1125, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157], "At": [174, 348], "process": [174, 175, 345, 346, 347, 349, 356, 360, 366, 371, 461, 470, 471, 500, 510], "ourselv": 174, "lead": [174, 175, 178, 179, 180, 181, 182, 383, 865, 907, 909, 914], "quansight": 174, "compani": 174, "made": [174, 347, 348, 360, 363, 366, 368], "organ": [174, 351, 356, 359, 360], "panda": 174, "scipi": 174, "conda": [174, 346, 349], "dask": [174, 1055, 1056, 1057, 1059], "apach": 174, "onnx": 174, "scikit": 174, "jupyt": 174, "aw": 174, "cupi": 174, "net": [174, 175, 366, 371], "sympi": 174, "rai": [174, 511, 541, 544], "modin": 174, "spyder": 174, "includ": [174, 178, 179, 347, 348, 351, 352, 353, 354, 355, 356, 357, 359, 360, 361, 362, 363, 364, 382, 383, 405, 406, 407, 417, 747, 786, 820, 865, 929, 931, 1015, 1016, 1038, 1044, 1046, 1050, 1052, 1071, 1076, 1079, 1080, 1083, 1084, 1087, 1088, 1091, 1092, 1095, 1096, 1100, 1103, 1104, 1105, 1108, 1109, 1112, 1116, 1118, 1134, 1144, 1145, 1148, 1149], "member": [174, 347], "googl": [174, 1113], "octoml": 174, "einop": [174, 178, 179, 747, 769, 770, 771], "further": [174, 175, 347, 349, 353, 359, 365, 369, 370, 1113], "sponsor": 174, "lg": 174, "electron": 174, "microsoft": 174, "d": [174, 175, 183, 290, 331, 332, 345, 346, 350, 360, 369, 747, 756, 764, 852, 853, 854, 855, 856, 857, 858, 859, 865, 875, 877, 901, 903, 1040, 1042, 1113, 1119], "shaw": 174, "intel": 174, "togeth": [174, 178, 179, 359, 360, 370, 371, 383, 1156, 1157], "major": [174, 361, 362, 383, 1050, 1053], "involv": [174, 345, 349, 350, 361, 371, 424, 452, 511, 524, 680, 683, 1113, 1119], "anoth": [174, 178, 179, 346, 347, 356, 360, 361, 368, 371, 405, 411, 424, 431, 433, 436], "promis": 174, "pursuit": 174, "unif": [174, 345, 368, 1113, 1119], "clearli": [174, 348, 353], "lot": [174, 175, 358, 368, 383], "thought": [174, 346, 347, 364], "care": [174, 347, 371], "attent": [174, 347, 359, 360, 852, 863, 864, 1134, 1145], "gone": [174, 365], "simplifi": [174, 366, 367, 368, 370], "compat": [174, 364, 383, 424, 432, 511, 524, 527, 541, 544, 549, 552, 557, 560, 561, 564, 565, 568, 569, 572, 585, 588, 590, 593, 601, 609, 610, 613, 617, 618, 621, 634, 637, 638, 641, 658, 661, 662, 665, 670, 673, 674, 677, 680, 683, 689, 692, 697, 700, 701, 704, 729, 733, 865, 886, 895, 897, 904, 906, 911, 913, 920, 922, 926, 928, 929, 931, 951, 981, 984, 1050, 1052, 1071, 1076, 1079, 1080, 1083, 1084, 1087, 1088, 1091, 1092, 1095, 1096, 1100, 1103, 1104, 1105, 1108, 1109, 1112, 1113], "excit": [174, 345, 350, 1113], "complianc": 174, "hope": [174, 383], "due": [174, 346, 360, 363, 511, 680, 683], "suit": [174, 346, 347, 350, 354, 355, 369, 382], "some": [174, 175, 178, 179, 346, 347, 348, 351, 352, 353, 356, 359, 360, 361, 362, 363, 364, 367, 368, 369, 370, 382, 383, 511, 602, 605, 821, 823, 824, 826, 829, 831, 834, 836, 838, 840, 842, 844, 850, 852, 860, 1113, 1134, 1142], "motiv": [174, 368], "great": [174, 175, 355, 366, 368], "convinc": 174, "celebr": 174, "encourag": [174, 382, 383, 1113, 1119], "foundat": 174, "point": [175, 347, 352, 353, 359, 363, 364, 366, 368, 369, 382, 404, 405, 406, 408, 410, 412, 418, 422, 424, 430, 444, 449, 452, 511, 516, 519, 520, 523, 524, 527, 529, 532, 533, 536, 537, 540, 541, 544, 545, 548, 569, 572, 573, 576, 577, 580, 581, 584, 585, 598, 601, 602, 605, 606, 642, 645, 646, 649, 654, 657, 658, 661, 680, 683, 697, 700, 701, 704, 705, 708, 713, 716, 717, 720, 721, 724, 734, 738, 742, 743, 746, 865, 866, 868, 872, 878, 880, 881, 883, 884, 886, 895, 897, 904, 906, 907, 909, 911, 913, 914, 929, 931, 1055, 1056, 1057, 1059, 1071, 1076, 1079, 1080, 1083, 1084, 1087, 1088, 1091, 1092, 1095, 1096, 1100, 1103], "mai": [175, 346, 347, 360, 368, 370, 405, 406, 411, 461, 506, 511, 590, 593, 617, 618, 621, 638, 641, 666, 669, 670, 673, 747, 768, 1055, 1056, 1057, 1059, 1060, 1061, 1064, 1066, 1069, 1071, 1076, 1079, 1080, 1083, 1084, 1087], "ask": [175, 366, 368, 383, 1113], "perfectli": 175, "happi": [175, 346, 383], "abund": 175, "better": [175, 347, 350, 365, 368, 369, 370], "ll": [175, 345, 347, 353, 360, 363, 369], "give": [175, 346, 347, 350, 352, 353, 357, 364, 368, 951, 981, 984], "two": [175, 180, 181, 183, 352, 353, 355, 359, 360, 365, 369, 371, 405, 406, 410, 416, 420, 421, 424, 451, 456, 511, 565, 568, 705, 708, 747, 755, 865, 866, 868, 872, 874, 875, 877, 878, 880, 881, 883, 884, 886, 887, 890, 891, 893, 895, 897, 898, 900, 901, 903, 904, 906, 907, 909, 910, 911, 913, 914, 916, 917, 919, 923, 925, 926, 928, 951, 999, 1002, 1055, 1056, 1057, 1058, 1059, 1113], "streamlin": 175, "workflow": [175, 347, 369, 381, 1113], "save": [175, 178, 179, 383, 747, 808, 1146, 1147], "week": [175, 347, 348, 1113], "let": [175, 352, 353, 360, 361, 362, 366, 368, 369, 370, 371, 1071, 1080, 1083, 1092, 1095, 1096, 1100, 1103, 1113], "sai": [175, 346, 358, 368], "deepmind": 175, "releas": [175, 346, 348, 1113], "awesom": 175, "paper": 175, "love": 175, "choic": [175, 346, 363, 369, 1071, 1092, 1095, 1100, 1103], "perceiverio": 175, "happen": [175, 346, 347, 369], "slew": 175, "rush": 175, "f": [175, 349, 350, 360, 366, 369, 371, 511, 614, 747, 788, 792], "g": [175, 350, 360, 383, 424, 429, 452, 461, 477, 1038, 1043, 1044, 1046, 1055, 1056, 1057, 1059, 1071, 1076, 1079, 1084, 1087, 1088, 1091, 1096], "inevit": 175, "deviat": [175, 1033, 1034, 1037, 1038, 1043, 1071, 1092, 1095, 1148, 1149], "origin": [175, 178, 179, 180, 181, 182, 357, 358, 361, 366, 368, 511, 541, 544, 865, 891, 893, 951, 981, 984, 985, 988], "often": [175, 356, 383], "erron": 175, "train": [175, 356, 360, 362, 369, 370, 371, 381, 382, 383, 821, 823, 824, 826, 834, 836, 1113], "poor": 175, "converg": 175, "perform": [175, 178, 179, 351, 353, 355, 356, 357, 359, 360, 362, 363, 364, 366, 369, 383, 394, 399, 405, 414, 415, 461, 747, 765, 769, 770, 771, 789, 790, 791, 821, 824, 826, 829, 831, 834, 836, 838, 840, 842, 844, 852, 860, 862, 865, 914, 1011, 1012, 1013, 1014, 1015, 1022, 1023, 1104, 1105, 1108, 1109, 1112], "issu": [175, 345, 348, 366, 368, 370, 383], "publish": [175, 383], "manag": [175, 345, 363, 383, 461], "get": [175, 178, 179, 345, 346, 348, 350, 356, 361, 362, 363, 366, 367, 368, 369, 370, 424, 442, 443, 444, 447, 461, 470, 471, 480, 481, 494, 495, 500, 504, 507, 510, 747, 754, 781, 782, 783, 802, 1113, 1119, 1134, 1143], "work": [175, 346, 347, 348, 350, 355, 360, 361, 362, 365, 366, 367, 368, 370, 371, 1113, 1119], "repositori": [175, 346, 347, 349, 354], "pull": [175, 345, 346, 349, 351, 383], "request": [175, 345, 351, 461, 497], "confus": [175, 363], "do": [175, 178, 179, 346, 347, 348, 351, 352, 353, 356, 357, 358, 359, 360, 361, 362, 363, 364, 366, 368, 369, 370, 371, 383, 511, 701, 704, 747, 791, 821, 833, 850, 1015, 1016, 1025, 1026, 1027], "expect": [175, 383, 747, 754, 1113], "codebas": [175, 345, 350, 351, 363, 365, 461, 503, 504, 1113], "total": [175, 178, 179, 180, 181, 182, 345, 347, 353, 355, 362, 369, 370, 383, 461, 507, 1050, 1053, 1071, 1092, 1095, 1100, 1103], "hour": 175, "spent": 175, "spin": 175, "off": [175, 365, 865, 875, 877, 923, 925], "test": [175, 346, 348, 350, 353, 383, 424, 449, 450, 511, 622, 625, 626, 629, 630, 633, 1104, 1105, 1108, 1109, 1112], "error": [175, 178, 179, 346, 355, 359, 362, 364, 368, 383, 394, 395, 461, 511, 594, 597, 1071, 1076, 1079, 1084, 1087, 1146, 1147, 1150, 1154], "address": [175, 347, 348, 359, 366], "sake": 175, "singl": [175, 178, 179, 347, 351, 353, 355, 356, 358, 360, 363, 364, 366, 369, 370, 371, 383, 461, 470, 471, 490, 491, 492, 493, 747, 817, 820, 1038, 1043, 1044, 1046, 1055, 1056], "multipl": [175, 178, 179, 183, 191, 276, 277, 281, 284, 290, 292, 313, 314, 315, 316, 327, 328, 331, 332, 347, 353, 356, 360, 383, 511, 528, 658, 680, 683, 747, 748, 750, 751, 752, 776, 780, 797, 865, 884, 951, 952, 955, 956, 985, 988, 989, 990, 1033, 1034, 1037, 1040, 1042, 1050, 1051, 1052, 1071, 1076, 1079, 1080, 1083, 1084, 1087, 1088, 1091, 1092, 1095, 1096, 1100, 1103, 1104, 1105, 1108, 1109, 1112, 1134, 1144], "line": [175, 346, 353, 359, 367, 368, 369, 370, 381, 1113, 1119], "directli": [175, 347, 351, 352, 356, 359, 360, 361, 362, 363, 364, 366, 368, 370, 371, 382, 383, 1015, 1027], "graph": [175, 356, 360, 367, 383, 821, 824, 826, 829, 831, 834, 836, 838, 840, 842, 844, 1055, 1056, 1057, 1059, 1146, 1147], "guarante": [175, 359, 383, 1055, 1056], "turn": [175, 353, 360], "step": [175, 178, 179, 183, 187, 234, 275, 286, 317, 318, 346, 347, 349, 353, 357, 359, 360, 361, 362, 366, 369, 370, 371, 382, 405, 406, 414, 415, 461, 821, 823, 824, 825, 826, 827, 829, 831, 834, 835, 836, 837, 838, 840, 842, 844, 1011, 1012, 1013, 1014, 1113, 1150, 1151, 1152, 1153, 1154, 1155], "take": [175, 345, 346, 347, 352, 353, 355, 360, 361, 362, 366, 368, 370, 371, 383, 511, 569, 572, 1113, 1119], "few": [175, 347, 348, 356, 360, 361, 362, 363, 367, 368, 369, 370, 381, 1113, 1119], "second": [175, 346, 353, 363, 368, 424, 451, 456, 461, 492, 511, 524, 527, 549, 552, 557, 560, 561, 564, 565, 568, 569, 572, 588, 590, 593, 601, 609, 610, 613, 617, 618, 621, 634, 637, 638, 641, 658, 661, 662, 665, 670, 673, 674, 677, 680, 683, 689, 692, 697, 700, 729, 733, 747, 755, 802, 807, 821, 823, 824, 826, 834, 836, 865, 869, 871, 875, 877, 878, 880, 887, 890, 901, 903, 907, 909, 914, 920, 922, 926, 928, 951, 995, 998, 999, 1002, 1011, 1013, 1055, 1056, 1057, 1150, 1151, 1152], "automat": [175, 346, 347, 356, 360, 364, 365, 366, 367, 370, 371, 1113], "everyon": [175, 345, 347, 383], "regardless": [175, 178, 179, 345, 368, 371, 402, 403], "wouldn": 175, "nice": [175, 355], "write": [175, 178, 179, 347, 348, 349, 350, 351, 352, 353, 355, 356, 357, 363, 366, 368, 371, 394, 397, 461, 506, 511, 512, 515, 516, 519, 520, 523, 524, 527, 529, 532, 533, 536, 537, 541, 544, 549, 552, 553, 556, 557, 560, 561, 564, 565, 568, 569, 572, 573, 576, 577, 580, 581, 584, 598, 601, 602, 605, 606, 622, 625, 626, 629, 630, 633, 634, 637, 642, 645, 646, 649, 650, 653, 654, 657, 658, 661, 662, 665, 666, 669, 670, 673, 674, 677, 680, 683, 685, 688, 689, 692, 697, 700, 701, 704, 705, 708, 709, 712, 713, 716, 717, 720, 721, 724, 725, 728, 729, 733, 734, 747, 760, 762, 766, 773, 775, 935, 936, 939, 941, 944, 946, 949, 951, 952, 955, 965, 968, 969, 972, 973, 976, 977, 980, 985, 988, 991, 994, 995, 998, 999, 1002, 1033, 1034, 1037, 1038, 1040, 1041, 1060, 1061, 1064, 1066, 1069, 1071, 1072, 1075, 1076, 1079, 1080, 1083, 1084, 1087, 1088, 1091, 1092, 1095, 1096, 1099, 1100, 1103, 1104, 1105, 1108, 1109, 1112], "onc": [175, 346, 347, 360, 361, 362, 366, 369, 383, 461, 505, 865, 884, 914, 1038, 1039], "know": [175, 1055, 1056, 1057, 1059], "among": [175, 178, 179, 355], "frantic": 175, "port": 175, "lucid": 175, "honk": 175, "improv": [175, 347, 356, 366], "understand": [175, 346, 347, 348, 349, 350, 352, 353, 354, 364, 365], "pattern": [175, 178, 179, 352, 361, 747, 769, 770, 771], "hasn": 175, "now": [175, 178, 179, 346, 349, 351, 358, 360, 361, 364, 368, 369, 371, 382, 383, 1134, 1145, 1146, 1147], "spend": 175, "torchvis": 175, "probabl": [175, 852, 860, 1038, 1039, 1134, 1142], "sonnet": 175, "about": [175, 346, 347, 354, 365, 366, 370, 371, 383, 424, 444, 447], "next": [175, 346, 347, 348, 349, 352, 353, 357, 358, 368, 369, 424, 444, 1113, 1146, 1147, 1150, 1151, 1152, 1153, 1154, 1155], "everyth": [175, 347, 348, 367, 383], "zero": [175, 178, 179, 180, 181, 353, 359, 360, 361, 362, 364, 366, 369, 370, 394, 396, 397, 405, 408, 410, 416, 420, 421, 423, 424, 430, 511, 524, 529, 532, 557, 560, 581, 602, 605, 606, 666, 669, 670, 673, 678, 679, 680, 683, 685, 688, 689, 692, 697, 700, 701, 704, 705, 708, 721, 724, 725, 728, 734, 747, 765, 800, 803, 804, 821, 823, 824, 826, 834, 836, 838, 840, 852, 860, 865, 872, 886, 887, 890, 895, 897, 904, 906, 926, 928, 929, 931, 951, 965, 968, 969, 972, 977, 980, 985, 988, 1007, 1010, 1033, 1034, 1037, 1038, 1040, 1041, 1050, 1051, 1052, 1053, 1055, 1056, 1057, 1059, 1071, 1076, 1079, 1080, 1083, 1084, 1087, 1088, 1091, 1092, 1095, 1096, 1100, 1103, 1104, 1105, 1108, 1109, 1112, 1113, 1125, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1144, 1150, 1151, 1152, 1153], "need": [175, 346, 347, 348, 349, 351, 352, 353, 354, 356, 359, 360, 363, 366, 368, 369, 382, 383, 747, 759, 760, 762, 951, 952, 955, 965, 968], "said": 175, "high": [175, 178, 179, 183, 260, 290, 291, 331, 332, 348, 369, 1038, 1040, 1041, 1042, 1044, 1045, 1046, 1047], "level": [175, 345, 348, 356, 365, 366, 369, 370, 371, 383], "optim": [175, 363, 367, 369, 371, 382, 461, 821, 824, 826, 829, 831, 834, 836, 838, 840, 842, 844, 1011, 1012, 1013, 1014, 1113, 1151, 1152, 1153, 1155], "trainer": [175, 381, 383, 1113], "statu": 175, "quo": 175, "kera": 175, "dopamin": 175, "ignit": 175, "catalyst": 175, "lightn": 175, "fastai": 175, "haiku": [175, 371], "flax": [175, 371, 383], "trax": [175, 371], "objax": [175, 371], "idea": [175, 382], "fulli": [175, 359, 360, 364, 366, 367, 368, 369, 370, 371, 383, 1134, 1144, 1145], "offer": [175, 370], "containerwithactiv": [176, 180, 181], "dict_in": [176, 177, 178, 179, 180, 181, 182, 183, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342], "queue": [176, 177, 178, 179, 180, 181, 182, 183, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 369, 461, 470, 471, 747, 802, 807], "queue_load_s": [176, 177, 178, 179, 180, 181, 182, 183, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342], "container_combine_method": [176, 177, 178, 179, 180, 181, 182, 183, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342], "list_join": [176, 177, 178, 179, 180, 181, 182, 183, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342], "queue_timeout": [176, 177, 178, 179, 180, 181, 182, 183, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 747], "print_limit": [176, 177, 178, 179, 180, 181, 182, 183, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342], "key_length_limit": [176, 177, 178, 179, 180, 181, 182, 183, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342], "print_ind": [176, 177, 178, 179, 180, 181, 182, 183, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342], "print_line_spac": [176, 177, 178, 179, 180, 181, 182, 183, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342], "ivyh": [176, 177, 178, 179, 180, 181, 182, 183, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342], "default_key_color": [176, 177, 178, 179, 180, 181, 182, 183, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342], "green": [176, 177, 178, 179, 180, 181, 182, 183, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 346, 347, 1159, 1160], "keyword_color_dict": [176, 177, 178, 179, 180, 181, 182, 183, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342], "rebuild_child_contain": [176, 177, 178, 179, 180, 181, 182, 183, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342], "types_to_iteratively_nest": [176, 177, 178, 179, 180, 181, 182, 183, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342], "alphabetical_kei": [176, 177, 178, 179, 180, 181, 182, 183, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342], "containerbas": [176, 177, 178, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 360], "__getitem__": [178, 179, 360], "queri": [178, 179, 360, 361, 368, 461, 494, 504, 852, 863, 864, 1134, 1145], "slice": [178, 179, 747, 775, 776, 779, 1015, 1024], "chain": [178, 179, 359, 360, 370, 371, 383, 1011, 1012, 1013, 1015, 1028, 1156, 1157], "element": [178, 179, 352, 366, 371, 394, 395, 396, 397, 398, 399, 400, 401, 405, 406, 412, 413, 420, 421, 461, 484, 488, 492, 511, 512, 515, 516, 519, 520, 523, 524, 527, 529, 532, 533, 536, 537, 540, 541, 544, 545, 548, 549, 552, 553, 556, 557, 560, 561, 564, 565, 568, 569, 572, 573, 576, 577, 580, 581, 584, 585, 588, 590, 593, 594, 597, 598, 601, 602, 605, 606, 609, 610, 613, 614, 617, 618, 621, 622, 625, 626, 629, 630, 633, 634, 637, 638, 641, 642, 645, 646, 649, 650, 653, 654, 657, 658, 661, 662, 665, 666, 669, 670, 673, 674, 677, 678, 679, 680, 683, 685, 688, 689, 692, 693, 696, 697, 700, 701, 704, 705, 708, 709, 712, 713, 716, 717, 720, 721, 724, 725, 728, 729, 733, 734, 738, 739, 742, 743, 746, 747, 755, 756, 759, 760, 762, 765, 766, 773, 787, 816, 817, 852, 860, 865, 869, 871, 878, 880, 887, 890, 907, 909, 914, 951, 952, 955, 969, 972, 977, 980, 985, 988, 990, 991, 994, 1038, 1039, 1050, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1066, 1069, 1071, 1072, 1075, 1076, 1079, 1080, 1083, 1084, 1087, 1088, 1091, 1092, 1095, 1096, 1099, 1100, 1103, 1104, 1105, 1108, 1109, 1112, 1134, 1142], "represent": [178, 179, 180, 181, 182, 382, 404, 424, 428, 429, 444, 447, 461, 477, 478, 511, 512, 515, 524, 549, 552, 561, 564, 569, 572, 674, 677, 680, 683, 747, 753, 810, 815], "dictionari": [178, 179, 180, 181, 182, 369, 383, 461, 504], "around": [178, 179, 180, 181, 182, 347, 356, 359, 364, 368, 383], "sequenc": [178, 179, 180, 181, 182, 353, 361, 382, 461, 470, 471, 747, 756, 797, 951, 990, 995, 998, 1038, 1040, 1041, 1071, 1076, 1079, 1134, 1143, 1148, 1149, 1156, 1157], "multiprocess": [178, 179, 180, 181, 182, 369, 383, 461, 470, 747], "asynchron": [178, 179, 180, 181, 182], "wait": [178, 179, 180, 181, 182, 347], "size": [178, 179, 180, 181, 182, 368, 369, 405, 414, 415, 461, 503, 504, 505, 747, 803, 809, 852, 864, 865, 875, 877, 891, 893, 901, 903, 907, 909, 914, 926, 928, 951, 965, 968, 985, 988, 990, 991, 994, 1038, 1039, 1043, 1044, 1046, 1050, 1051, 1053, 1104, 1105, 1108, 1109, 1112, 1134, 1135, 1136], "dimens": [178, 179, 180, 181, 182, 353, 366, 369, 394, 399, 405, 420, 421, 461, 492, 747, 769, 770, 771, 774, 784, 800, 819, 852, 853, 854, 855, 856, 857, 858, 859, 862, 865, 866, 868, 869, 871, 872, 875, 877, 878, 880, 881, 883, 884, 886, 887, 890, 891, 893, 895, 897, 898, 900, 904, 906, 907, 909, 911, 913, 914, 916, 917, 919, 923, 925, 926, 928, 929, 931, 935, 941, 944, 946, 949, 951, 957, 960, 965, 968, 969, 972, 973, 976, 977, 980, 981, 984, 985, 988, 990, 991, 994, 995, 998, 1011, 1012, 1013, 1014, 1038, 1049, 1050, 1051, 1052, 1053, 1055, 1056, 1057, 1059, 1071, 1072, 1075, 1076, 1079, 1080, 1083, 1084, 1087, 1088, 1091, 1092, 1095, 1096, 1099, 1100, 1103, 1104, 1105, 1108, 1109, 1112, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1144, 1145], "combin": [178, 179, 180, 181, 182, 347, 353, 355, 356, 359, 360, 371, 865, 869, 871], "arriv": [178, 179, 180, 181, 182], "timeout": [178, 179, 180, 181, 182, 461, 470, 471, 747, 802, 807], "limit": [178, 179, 180, 181, 182, 347, 353, 355, 366, 369, 371, 383, 424, 444, 447, 747, 759, 760, 762, 951, 952, 955], "maximum": [178, 179, 180, 181, 182, 353, 366, 369, 371, 461, 485, 489, 493, 505, 511, 747, 759, 760, 762, 774, 821, 834, 836, 951, 952, 955, 1015, 1027, 1050, 1051, 1071, 1076, 1079, 1084, 1087, 1113], "length": [178, 179, 180, 181, 182, 369, 405, 406, 416, 865, 914, 916, 917, 919, 951, 981, 984], "whitespac": [178, 179, 180, 181, 182], "indent": [178, 179, 180, 181, 182, 369], "extra": [178, 179, 180, 181, 182, 353, 358, 359, 366, 821, 828], "newlin": [178, 179, 180, 181, 182, 352], "handl": [178, 179, 180, 181, 182, 350, 355, 356, 358, 360, 361, 362, 363, 364, 370, 383, 402, 403, 461, 477, 478, 479, 480, 481, 495, 499, 500, 507, 510, 821, 824, 826, 829, 831, 834, 836, 838, 840, 842, 844, 1150, 1151, 1152, 1153, 1154, 1155], "result": [178, 179, 180, 181, 182, 351, 352, 353, 355, 359, 360, 361, 363, 364, 369, 383, 394, 397, 405, 406, 424, 452, 461, 470, 506, 511, 512, 515, 516, 519, 520, 523, 524, 527, 529, 532, 533, 536, 537, 541, 544, 549, 552, 553, 556, 557, 560, 561, 564, 565, 568, 569, 572, 573, 576, 577, 580, 581, 584, 585, 588, 590, 593, 598, 601, 602, 605, 606, 609, 610, 613, 614, 617, 618, 621, 622, 625, 626, 629, 630, 633, 634, 637, 638, 641, 642, 645, 646, 649, 650, 653, 654, 657, 658, 661, 662, 665, 666, 669, 670, 673, 674, 677, 680, 683, 685, 688, 689, 692, 697, 700, 701, 704, 705, 708, 709, 712, 713, 716, 717, 720, 721, 724, 725, 728, 729, 733, 734, 743, 746, 747, 760, 762, 766, 773, 775, 803, 804, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 864, 865, 866, 868, 875, 877, 891, 893, 914, 929, 931, 935, 936, 939, 941, 944, 946, 949, 951, 952, 955, 965, 968, 969, 972, 973, 976, 977, 980, 985, 988, 991, 994, 995, 998, 999, 1002, 1015, 1028, 1033, 1034, 1037, 1038, 1040, 1041, 1050, 1051, 1052, 1055, 1056, 1060, 1061, 1064, 1066, 1069, 1071, 1072, 1075, 1076, 1079, 1080, 1083, 1084, 1087, 1088, 1091, 1092, 1095, 1096, 1099, 1100, 1103, 1104, 1105, 1108, 1109, 1112, 1113], "color": [178, 179, 180, 181, 182, 1159, 1160], "termin": [178, 179, 180, 181, 182, 346, 347, 349, 360, 366, 369], "map": [178, 179, 180, 181, 182, 355, 356, 360, 364, 369, 382, 383, 461, 470, 1015, 1022, 1023, 1027, 1028, 1134, 1145], "termcolor": [178, 179, 180, 181, 182], "rebuild": [178, 179, 180, 181, 182], "found": [178, 179, 180, 181, 182, 346, 347, 352, 359, 360, 461, 495], "constructor": [178, 179, 180, 181, 182, 361, 362, 368, 747, 754, 1156, 1157], "param": [178, 179, 180, 181, 182, 183, 284, 315, 316, 366, 371, 747, 753, 775, 776, 779, 780], "kept": [178, 179, 180, 181, 182, 347, 363, 1011, 1012, 1013], "structur": [178, 179, 180, 181, 182, 349, 351, 356, 359, 360, 369, 370, 747, 763, 1015, 1028], "alphabet": [178, 179, 180, 181, 182], "preserv": [178, 179, 180, 181, 182, 371, 383, 821, 847, 951, 969, 972], "__setitem__": [178, 179, 359, 360, 368], "val": [178, 179, 363, 368, 747, 789, 790, 791, 805, 806], "after": [178, 179, 353, 360, 361, 365, 424, 456, 511, 721, 724, 821, 824, 826, 828, 829, 831, 834, 836, 838, 840, 842, 844, 1033, 1034, 1037, 1150, 1151, 1152, 1153, 1154, 1155], "updat": [178, 179, 346, 347, 348, 349, 350, 353, 354, 358, 359, 360, 361, 364, 366, 368, 369, 371, 383, 461, 470, 747, 791, 803, 804, 821, 823, 824, 826, 829, 831, 834, 836, 838, 840, 842, 844, 852, 862, 1011, 1012, 1013, 1015, 1022, 1023, 1031, 1032, 1123, 1124, 1150, 1151, 1152, 1153, 1154, 1155], "all_fals": [178, 179], "assert_is_bool": [178, 179], "key_chain": [178, 179, 180, 181, 183, 184, 185, 186, 187, 188, 190, 191, 192, 193, 194, 195, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 309, 310, 313, 314, 315, 316, 317, 318, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 337, 338, 339, 340, 341, 342, 433, 435, 437, 512, 514, 518, 519, 520, 522, 526, 527, 528, 529, 531, 533, 535, 539, 540, 541, 543, 545, 547, 549, 551, 553, 555, 557, 559, 561, 563, 565, 567, 569, 571, 573, 575, 579, 580, 583, 584, 587, 588, 589, 592, 593, 594, 596, 600, 601, 602, 604, 608, 609, 610, 612, 616, 617, 618, 620, 622, 624, 626, 628, 630, 632, 634, 636, 638, 640, 642, 644, 646, 648, 650, 652, 654, 656, 658, 660, 662, 664, 666, 668, 670, 672, 674, 676, 680, 682, 684, 685, 687, 689, 691, 693, 695, 697, 699, 701, 703, 705, 707, 709, 711, 713, 715, 717, 719, 721, 723, 725, 727, 729, 730, 732, 735, 737, 738, 741, 742, 743, 745, 748, 750, 752, 760, 761, 776, 778, 780, 824, 825, 827, 829, 830, 832, 834, 835, 837, 838, 839, 841, 842, 843, 845, 887, 889, 936, 938, 940, 941, 943, 945, 946, 948, 950, 952, 954, 956, 957, 959, 961, 963, 965, 967, 969, 971, 973, 975, 977, 979, 981, 983, 985, 987, 989, 991, 993, 995, 997, 999, 1001, 1003, 1005, 1007, 1009, 1015, 1028, 1034, 1036, 1040, 1042, 1044, 1045, 1047, 1061, 1063, 1065, 1066, 1068, 1070, 1072, 1074, 1076, 1078, 1080, 1082, 1084, 1086, 1088, 1090, 1092, 1094, 1098, 1099, 1100, 1102, 1105, 1107, 1109, 1111], "to_appli": [178, 179, 180, 181, 183, 184, 185, 186, 187, 188, 190, 191, 192, 193, 194, 195, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 309, 310, 313, 314, 315, 316, 317, 318, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 337, 338, 339, 340, 341, 342, 433, 435, 437, 512, 514, 518, 519, 520, 522, 526, 527, 528, 529, 531, 533, 535, 539, 540, 541, 543, 545, 547, 549, 551, 553, 555, 557, 559, 561, 563, 565, 567, 569, 571, 573, 575, 579, 580, 583, 584, 587, 588, 589, 592, 593, 594, 596, 600, 601, 602, 604, 608, 609, 610, 612, 616, 617, 618, 620, 622, 624, 626, 628, 630, 632, 634, 636, 638, 640, 642, 644, 646, 648, 650, 652, 654, 656, 658, 660, 662, 664, 666, 668, 670, 672, 674, 676, 680, 682, 684, 685, 687, 689, 691, 693, 695, 697, 699, 701, 703, 705, 707, 709, 711, 713, 715, 717, 719, 721, 723, 725, 727, 729, 730, 732, 735, 737, 738, 741, 742, 743, 745, 748, 750, 752, 760, 761, 776, 778, 780, 824, 825, 827, 829, 830, 832, 834, 835, 837, 838, 839, 841, 842, 843, 845, 887, 889, 936, 938, 940, 941, 943, 945, 946, 948, 950, 952, 954, 956, 957, 959, 961, 963, 965, 967, 969, 971, 973, 975, 977, 979, 981, 983, 985, 987, 989, 991, 993, 995, 997, 999, 1001, 1003, 1005, 1007, 1009, 1015, 1028, 1034, 1036, 1044, 1045, 1047, 1061, 1063, 1065, 1066, 1068, 1070, 1072, 1074, 1076, 1078, 1080, 1082, 1084, 1086, 1088, 1090, 1092, 1094, 1098, 1099, 1100, 1102, 1105, 1107, 1109, 1111], "prune_unappli": [178, 179, 180, 181, 183, 184, 185, 186, 187, 188, 190, 191, 192, 193, 194, 195, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 309, 310, 313, 314, 315, 316, 317, 318, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 337, 338, 339, 340, 341, 342, 433, 435, 437, 512, 514, 518, 519, 520, 522, 526, 527, 528, 529, 531, 533, 535, 539, 540, 541, 543, 545, 547, 549, 551, 553, 555, 557, 559, 561, 563, 565, 567, 569, 571, 573, 575, 579, 580, 583, 584, 587, 588, 589, 592, 593, 594, 596, 600, 601, 602, 604, 608, 609, 610, 612, 616, 617, 618, 620, 622, 624, 626, 628, 630, 632, 634, 636, 638, 640, 642, 644, 646, 648, 650, 652, 654, 656, 658, 660, 662, 664, 666, 668, 670, 672, 674, 676, 680, 682, 684, 685, 687, 689, 691, 693, 695, 697, 699, 701, 703, 705, 707, 709, 711, 713, 715, 717, 719, 721, 723, 725, 727, 729, 730, 732, 735, 737, 738, 741, 742, 743, 745, 748, 750, 752, 760, 761, 776, 778, 780, 824, 825, 827, 829, 830, 832, 834, 835, 837, 838, 839, 841, 842, 843, 845, 887, 889, 936, 938, 940, 941, 943, 945, 946, 948, 950, 952, 954, 956, 957, 959, 961, 963, 965, 967, 969, 971, 973, 975, 977, 979, 981, 983, 985, 987, 989, 991, 993, 995, 997, 999, 1001, 1003, 1005, 1007, 1009, 1015, 1028, 1034, 1036, 1044, 1045, 1047, 1061, 1063, 1065, 1066, 1068, 1070, 1072, 1074, 1076, 1078, 1080, 1082, 1084, 1086, 1088, 1090, 1092, 1094, 1098, 1099, 1100, 1102, 1105, 1107, 1109, 1111], "map_sequ": [178, 179, 180, 181, 183, 184, 185, 186, 187, 188, 190, 191, 192, 193, 194, 195, 198, 200, 201, 203, 208, 209, 210, 211, 213, 214, 215, 216, 217, 218, 220, 221, 222, 223, 224, 225, 227, 228, 231, 232, 233, 234, 235, 236, 239, 240, 241, 242, 245, 249, 250, 251, 252, 253, 255, 256, 257, 259, 260, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 309, 310, 313, 314, 315, 316, 317, 318, 325, 326, 327, 328, 329, 330, 331, 332, 337, 338, 339, 340, 341, 342, 433, 435, 437, 512, 514, 518, 519, 520, 522, 526, 527, 528, 529, 531, 533, 535, 539, 540, 545, 547, 553, 555, 573, 575, 579, 580, 583, 584, 587, 589, 594, 596, 600, 602, 604, 608, 609, 610, 622, 624, 626, 628, 630, 632, 642, 644, 646, 648, 650, 652, 654, 656, 658, 666, 668, 680, 682, 684, 685, 687, 693, 695, 705, 707, 709, 711, 713, 715, 717, 719, 721, 723, 725, 727, 729, 730, 732, 735, 737, 738, 741, 742, 743, 745, 748, 750, 752, 760, 761, 776, 778, 780, 824, 825, 827, 829, 830, 832, 834, 835, 837, 838, 839, 841, 842, 843, 845, 936, 938, 940, 941, 943, 945, 946, 948, 950, 952, 954, 956, 961, 963, 965, 967, 969, 971, 973, 975, 977, 979, 981, 983, 985, 987, 989, 991, 993, 999, 1001, 1003, 1005, 1007, 1009, 1034, 1036, 1044, 1045, 1047, 1061, 1063, 1065, 1066, 1068, 1070, 1072, 1074, 1076, 1078, 1080, 1082, 1084, 1086, 1088, 1090, 1092, 1094, 1098, 1099, 1100, 1102, 1105, 1107, 1109, 1111], "entri": [178, 179, 405, 414, 415, 951, 990, 1015, 1028], "boolean": [178, 179, 360, 405, 412, 424, 430, 448, 460, 461, 496, 508, 511, 549, 552, 553, 556, 561, 564, 569, 572, 662, 665, 666, 669, 670, 673, 674, 677, 747, 748, 751, 755, 756, 786, 787, 788, 792, 793, 794, 795, 796, 813, 820, 821, 833, 1011, 1012, 1013, 1015, 1025, 1071, 1084, 1087], "evalu": [178, 179, 360, 511, 598, 602, 605, 642, 645, 646, 649, 650, 653, 654, 657, 685, 688, 709, 712, 725, 728, 1015, 1016, 1025, 1026, 1104, 1105, 1108, 1109, 1112], "assert": [178, 179, 368, 369, 747, 757], "skip": [178, 179, 349, 355, 1015, 1028], "prune": [178, 179, 1015, 1028, 1029, 1030], "all_key_chain": [178, 179], "include_empti": [178, 179], "all_tru": [178, 179, 360, 369], "arrays_as_list": [178, 179], "intermedi": [178, 179], "as_arrai": [178, 179, 747, 784, 809], "as_bool": [178, 179], "as_on": [178, 179], "ones": [178, 179, 180, 181, 355, 366, 368, 369, 405, 410, 419, 511, 573, 576, 747, 800, 1113], "sub": [178, 179, 347, 348, 350, 355, 360, 368, 369, 370, 461, 486, 487, 490, 491, 492, 493, 865, 875, 877, 951, 990, 1011, 1012, 1013, 1014, 1113], "fill": [178, 179, 405, 408, 412, 413, 418, 419, 422, 423, 1038, 1040, 1041], "as_random_uniform": [178, 179], "low": [178, 179, 183, 260, 290, 291, 331, 332, 366, 1038, 1040, 1041, 1042, 1044, 1045, 1046, 1047], "uniform": [178, 179, 370, 1038, 1039, 1040, 1041, 1044, 1046, 1125, 1127, 1128, 1131, 1132], "lower": [178, 179, 347, 353, 366, 383, 405, 410, 420, 511, 678, 865, 866, 868, 1038, 1044, 1046], "boundari": [178, 179, 1038, 1044, 1046], "output": [178, 179, 346, 350, 351, 352, 353, 355, 356, 359, 360, 362, 363, 364, 366, 368, 370, 371, 383, 394, 397, 405, 406, 408, 409, 410, 412, 413, 416, 418, 419, 422, 423, 461, 470, 471, 505, 506, 511, 512, 515, 516, 519, 520, 523, 524, 527, 529, 532, 533, 536, 537, 541, 544, 549, 552, 553, 556, 557, 560, 561, 564, 565, 568, 569, 572, 573, 576, 577, 580, 581, 584, 598, 601, 602, 605, 606, 622, 625, 626, 629, 630, 633, 634, 637, 642, 645, 646, 649, 650, 653, 654, 657, 658, 661, 662, 665, 666, 669, 670, 673, 674, 677, 680, 683, 685, 688, 689, 692, 697, 700, 701, 704, 705, 708, 709, 712, 713, 716, 717, 720, 721, 724, 725, 728, 729, 733, 734, 747, 758, 760, 762, 766, 773, 775, 821, 828, 852, 854, 856, 858, 860, 862, 863, 864, 865, 923, 925, 935, 936, 939, 941, 944, 946, 949, 951, 952, 955, 965, 968, 969, 972, 973, 976, 977, 980, 985, 988, 991, 994, 995, 998, 999, 1002, 1003, 1006, 1015, 1028, 1033, 1034, 1037, 1038, 1040, 1041, 1043, 1044, 1046, 1060, 1061, 1064, 1066, 1069, 1071, 1072, 1075, 1076, 1079, 1080, 1083, 1084, 1087, 1088, 1091, 1092, 1095, 1096, 1099, 1100, 1103, 1104, 1105, 1108, 1109, 1112, 1113, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1142, 1143, 1144, 1145], "interv": [178, 179, 366, 371, 405, 406, 414, 415, 865, 926, 928, 951, 952, 955, 995, 998, 1038, 1040, 1041, 1044, 1046, 1104, 1105, 1108, 1109, 1112], "as_vari": [178, 179], "as_zero": [178, 179], "assert_contains_sub_contain": [178, 179], "sub_cont": [178, 179], "partial": [178, 179, 347, 1146, 1147], "except": [178, 179, 352, 359, 363, 368, 383, 424, 432, 747, 757, 768, 791, 818, 865, 886, 904, 906, 951, 957, 960, 995, 998, 1050, 1053, 1104, 1105, 1108, 1109, 1112], "diff": [178, 179, 360, 369], "screen": [178, 179, 369], "assert_contains_sub_structur": [178, 179], "check_shap": [178, 179], "static": [178, 179, 183, 189, 276, 277, 280, 281, 284, 290, 292, 296, 309, 310, 313, 314, 315, 316, 317, 318, 325, 326, 327, 328, 331, 332, 337, 338, 343, 344, 348, 352, 353, 356, 383, 402, 403, 433, 437, 528, 540, 545, 658, 735, 742, 748, 752, 776, 780, 952, 956, 985, 989, 1040, 1042], "assert_ident": [178, 179], "check_typ": [178, 179], "same_arrai": [178, 179, 369], "arrays_equ": [178, 179, 180, 181, 747], "datatyp": [178, 179, 405, 407, 417, 424, 438, 449, 450, 451], "exact": [178, 179, 347, 366, 1055, 1056], "assert_identical_structur": [178, 179], "at_key_chain": [178, 179], "ignore_key_error": [178, 179], "ignore_non": [178, 179], "at_kei": [178, 179], "ignor": [178, 179, 353, 383, 405, 416, 1015, 1026, 1150, 1154], "substr": [178, 179], "access": [178, 179, 347, 349, 361], "clip_min": [178, 179], "clip_max": [178, 179], "minimum": [178, 179, 366, 371, 461, 511, 512, 515, 747, 782, 783, 805, 806, 811, 812, 951, 952, 955, 1050, 1052, 1071, 1076, 1079, 1084, 1087, 1113], "config": [178, 179, 369, 1015, 1028], "right": [178, 179, 345, 346, 347, 350, 353, 369, 511, 557, 560, 565, 568, 865, 914], "duplic": [178, 179, 352, 357, 358, 368, 370], "compar": [178, 179, 355, 369, 747, 748, 751, 755, 756, 1055, 1056, 1057, 1059, 1060, 1061, 1064, 1066, 1069], "configur": [178, 179, 346, 347, 349, 361, 461, 504, 1015, 1028], "container_rightmost": [178, 179], "common_key_chain": [178, 179, 360], "across": [178, 179, 348, 353, 355, 356, 360, 361, 364, 461, 470, 471, 482, 483, 485, 486, 487, 488, 489, 493, 503, 504, 747, 755, 756, 1015, 1021, 1050, 1052], "properti": [178, 179, 353, 355, 356, 360, 368, 369, 370, 461, 473, 1146, 1147, 1150, 1151, 1152, 1153, 1155], "contains_sub_contain": [178, 179], "match": [178, 179, 360, 424, 430, 511, 701, 704, 747, 797], "contains_sub_structur": [178, 179], "copi": [178, 179, 349, 352, 357, 361, 366, 368, 369, 382, 383, 405, 407, 411, 424, 430, 461, 506, 747, 764, 816, 817, 951, 981, 984, 1015, 1017, 1060, 1066, 1069], "create_if_abs": [178, 179], "inplac": [178, 179, 183, 187, 228, 234, 235, 255, 275, 285, 286, 287, 289, 317, 318, 350, 353, 358, 359, 364, 368, 370, 747, 757, 788, 791, 792, 813, 821, 824, 825, 826, 827, 829, 830, 831, 832, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 1123, 1124, 1150, 1151, 1152, 1153, 1154, 1155], "correspond": [178, 179, 180, 181, 183, 347, 352, 353, 354, 356, 359, 360, 361, 364, 424, 431, 511, 541, 544, 697, 700, 865, 869, 871, 878, 880, 911, 913, 951, 957, 960, 985, 988, 1038, 1039, 1050, 1051, 1052, 1055, 1056, 1057, 1059, 1071, 1088, 1091, 1092, 1095, 1096, 1100, 1103], "alreadi": [178, 179, 346, 347, 357, 360, 364, 368, 383, 461, 511, 573, 576, 606, 680, 683, 705, 708, 743, 746, 865, 901, 903, 1113], "noth": [178, 179, 347], "cutoff_at_depth": [178, 179], "depth_cutoff": [178, 179], "summari": [178, 179, 347, 424, 439, 440, 441, 453, 454, 455, 461, 474, 475, 747, 763, 767, 785, 821, 846, 851], "cutoff_at_height": [178, 179], "height_cutoff": [178, 179], "deep_copi": [178, 179, 369], "intern": [178, 179, 352, 359, 360, 362, 363, 461, 821, 850, 1015, 1016, 1025, 1026, 1125, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1156, 1157], "dev": [178, 179, 180, 182, 183, 196, 346, 356, 362, 366, 368, 370, 461, 470, 495], "belong": [178, 179, 370], "dev_clon": [178, 179, 461], "clone": [178, 179, 347, 349, 461, 482, 483, 484, 485], "dev_dist": [178, 179, 461], "distribut": [178, 179, 348, 362, 383, 461, 482, 486, 487, 488, 489, 852, 860, 935, 936, 939, 941, 944, 946, 949, 1038, 1039, 1040, 1041, 1043, 1044, 1046, 1134, 1142, 1146, 1147], "along": [178, 179, 351, 363, 405, 414, 415, 461, 486, 487, 488, 489, 490, 491, 492, 493, 505, 747, 765, 766, 775, 819, 865, 891, 893, 923, 925, 926, 928, 929, 931, 935, 941, 944, 946, 949, 951, 957, 960, 969, 972, 977, 980, 985, 988, 990, 995, 998, 1003, 1006, 1011, 1012, 1013, 1014, 1038, 1049, 1050, 1051, 1052, 1060, 1061, 1064, 1066, 1069, 1071, 1072, 1075, 1076, 1079, 1080, 1083, 1084, 1087, 1088, 1091, 1092, 1095, 1096, 1099, 1100, 1103, 1104, 1105, 1108, 1109, 1112], "split": [178, 179, 345, 347, 365, 366, 383, 461, 470, 486, 487, 488, 489, 503, 504, 505, 747, 797, 951, 1113], "dev_str": [178, 179], "diff_kei": [178, 179], "detect_key_diff": [178, 179], "detect_value_diff": [178, 179], "detect_shape_diff": [178, 179], "thei": [178, 179, 348, 350, 351, 353, 356, 358, 360, 361, 362, 363, 368, 369, 370, 371, 383, 424, 451, 1011, 1012, 1013, 1038, 1039, 1113, 1156, 1157], "treat": [178, 179, 367, 371, 402, 403], "detect": [178, 179, 364, 369, 370, 1015, 1016, 1026], "without": [178, 179, 347, 351, 356, 359, 360, 362, 364, 366, 368, 369, 370, 382, 383, 747, 802, 807, 951, 981, 984, 1015, 1017, 1055, 1056, 1057, 1059], "flag": [178, 179, 347, 363, 368, 461, 480, 821, 833], "container0": [178, 179], "einops_rearrang": [178, 179, 747], "axes_length": [178, 179, 747, 769, 770, 771], "rearrang": [178, 179, 747, 769, 771], "addit": [178, 179, 346, 347, 351, 352, 355, 360, 361, 368, 369, 371, 461, 506, 511, 524, 747, 769, 770, 771, 1033, 1034, 1037, 1134, 1144], "einops_reduc": [178, 179, 747], "reduct": [178, 179, 361, 368, 747, 770, 803, 804, 1104, 1105, 1108, 1109, 1112, 1113], "One": [178, 179, 361, 366, 368, 369, 747, 770, 951, 981, 984, 1038, 1040, 1041], "callabl": [178, 179, 360, 366, 384, 385, 386, 387, 388, 389, 390, 391, 392, 402, 403, 424, 445, 446, 461, 505, 747, 753, 758, 768, 770, 1011, 1012, 1013, 1014, 1015, 1021, 1025, 1026, 1027], "einops_repeat": [178, 179, 747], "find_sub_contain": [178, 179], "sub_cont_to_find": [178, 179], "exsit": [178, 179], "find_sub_structur": [178, 179], "sub_struc_to_find": [178, 179], "flatten_key_chain": [178, 179, 369, 1146, 1147], "__": [178, 179, 353, 369], "above_height": [178, 179, 369], "below_depth": [178, 179, 369], "format_key_chain": [178, 179], "format_fn": [178, 179], "format": [178, 179, 349, 352, 361, 362, 366, 368, 369, 424, 442, 461, 481, 1071, 1072, 1075, 1099, 1113], "string": [178, 179, 357, 361, 362, 366, 369, 424, 428, 429, 442, 448, 460, 461, 477, 478, 479, 480, 494, 500, 506, 507, 510, 747, 767], "from_disk_as_hdf5": [178, 179, 369], "h5_obj_or_filepath": [178, 179], "slice_obj": [178, 179], "load": [178, 179, 383], "disk": [178, 179, 369], "h5py": [178, 179], "file": [178, 179, 346, 347, 349, 351, 352, 356, 357, 359, 360, 366, 369, 747, 808, 1146, 1147], "hdf5": [178, 179, 369, 1146, 1147], "filepath": [178, 179, 347], "h5": [178, 179], "from_disk_as_json": [178, 179, 369], "json_filepath": [178, 179], "json": [178, 179, 369], "were": [178, 179, 347, 351, 355, 360], "abl": [178, 179, 346, 347, 356, 361, 363, 368, 371], "dure": [178, 179, 356, 360, 361, 362, 363, 383, 402, 403, 461, 506, 747, 818, 821, 823, 824, 826, 834, 836, 865, 887, 890, 1011, 1012, 1013, 1014, 1071, 1092, 1095, 1100, 1103, 1146, 1147, 1150, 1151, 1152, 1154], "from_disk_as_pickl": [178, 179, 369], "pickle_filepath": [178, 179], "pickl": [178, 179, 360, 369], "from_flat_list": [178, 179], "flat_list": [178, 179], "hierarchi": [178, 179, 369], "flat": [178, 179, 747, 803, 951, 977, 980], "popul": [178, 179, 361, 362, 366, 1038, 1039, 1071, 1092, 1095, 1100, 1103], "from_numpi": [178, 179, 369], "gather": [178, 179, 747, 776, 779], "accord": [178, 179, 346, 349, 356, 361, 424, 433, 436, 444, 511, 524, 565, 568, 680, 683, 747, 775, 803, 804, 865, 926, 928, 951, 961, 964, 1007, 1010, 1071, 1092, 1095, 1100, 1103], "index": [178, 179, 349, 356, 360, 368, 404, 405, 410, 416, 461, 502, 747, 753, 775, 776, 779, 951, 995, 998, 1015, 1018, 1019, 1022, 1023, 1024, 1029, 1031, 1050, 1051, 1052, 1053, 1055, 1056, 1057, 1060, 1061, 1064, 1116, 1118], "h5_file_s": [178, 179], "content": [178, 179, 348, 349, 363, 366, 369], "batch": [178, 179, 356, 360, 369, 461, 503, 504, 747, 774, 852, 861, 865, 929, 931, 1011, 1012, 1013, 1014, 1033, 1034, 1037, 1148, 1149], "handle_inplac": [178, 179], "prime": [178, 179], "overwritten": [178, 179, 357, 359], "has_kei": [178, 179], "query_kei": [178, 179], "somewher": [178, 179], "has_key_chain": [178, 179], "has_nan": [178, 179, 747], "include_inf": [178, 179, 747, 786, 820], "leafwis": [178, 179], "nan": [178, 179, 351, 352, 404, 424, 430, 511, 512, 515, 516, 519, 520, 523, 524, 527, 529, 532, 533, 536, 537, 541, 544, 573, 576, 577, 580, 581, 584, 598, 601, 602, 605, 606, 622, 625, 630, 633, 642, 645, 646, 649, 654, 657, 658, 661, 680, 683, 697, 700, 701, 704, 705, 708, 713, 716, 717, 720, 721, 724, 734, 743, 746, 747, 786, 820, 852, 864, 1055, 1056, 1057, 1059, 1071, 1076, 1079, 1080, 1083, 1084, 1087, 1092, 1095, 1096, 1100, 1103, 1104, 1105, 1108, 1109, 1112], "well": [178, 179, 355, 363, 370, 371, 382, 747, 786, 865, 911, 913], "inf": [178, 179, 404, 747, 786, 820, 865, 929, 931], "wise": [178, 179, 366, 371, 394, 395, 396, 397, 398, 399, 400, 401, 511, 512, 515, 516, 524, 527, 529, 532, 537, 541, 544, 549, 552, 553, 556, 557, 560, 561, 564, 565, 568, 569, 572, 585, 588, 590, 593, 594, 597, 601, 609, 610, 613, 614, 617, 618, 621, 634, 637, 638, 641, 658, 661, 662, 665, 666, 669, 670, 673, 674, 677, 678, 679, 680, 683, 689, 692, 697, 700, 701, 704, 729, 733, 747, 773, 951, 952, 955], "identical_array_shap": [178, 179], "exclus": [178, 179, 356, 360, 371, 405, 406, 747, 765, 793, 794, 796, 821, 833, 1038, 1040, 1041], "identical_config": [178, 179], "identical_structur": [178, 179], "if_exist": [178, 179], "inplace_upd": [178, 179, 363, 747, 1123, 1124], "key_chains_contain": [178, 179], "sub_str": [178, 179], "join": [178, 179, 951, 957, 960, 995, 998, 1113], "list_stack": [178, 179, 369], "dim": [178, 179, 361, 747, 800, 1134, 1145], "func": [178, 179, 360, 402, 403, 461, 505, 747, 758, 821, 828, 1015, 1028], "map_cont": [178, 179], "include_self": [178, 179], "possibi": [178, 179], "place": [178, 179, 347, 350, 351, 352, 353, 355, 356, 360, 362, 364, 371, 405, 406, 407, 408, 409, 410, 412, 413, 417, 418, 419, 422, 423, 424, 433, 436, 461, 506, 511, 524, 529, 532, 549, 552, 569, 572, 573, 576, 581, 606, 689, 692, 705, 708, 721, 724, 725, 728, 734, 747, 775, 789, 790, 791, 852, 855, 864, 865, 872, 951, 965, 968, 969, 972, 985, 988, 1033, 1034, 1037, 1055, 1056, 1057, 1060, 1061, 1064, 1071, 1076, 1079, 1104, 1105, 1108, 1150, 1151, 1152, 1153, 1154, 1155], "matrix": [178, 179, 405, 416, 420, 421, 747, 748, 751, 759, 852, 861, 865, 866, 868, 872, 875, 877, 878, 880, 881, 883, 884, 886, 887, 890, 891, 893, 894, 895, 897, 898, 900, 904, 906, 907, 909, 911, 913, 914, 916, 917, 919, 923, 925, 932, 934, 1134, 1144], "p": [178, 179, 183, 211, 315, 316, 346, 347, 405, 416, 747, 759, 760, 761, 762, 852, 860, 865, 891, 893, 929, 931, 1134, 1142], "integ": [178, 179, 360, 361, 368, 405, 406, 412, 424, 447, 450, 452, 511, 512, 515, 549, 552, 553, 556, 557, 560, 561, 564, 565, 568, 569, 572, 573, 576, 588, 606, 609, 610, 613, 674, 677, 697, 700, 701, 704, 705, 708, 743, 746, 865, 894, 926, 928, 929, 931, 951, 990, 1038, 1040, 1041, 1048, 1071, 1076, 1079, 1080, 1083, 1084, 1087, 1088, 1091, 1092, 1095, 1096, 1100, 1103, 1104, 1105, 1108, 1109, 1112], "flatten": [178, 179, 747, 774, 865, 901, 903, 929, 931, 951, 977, 980, 985, 988, 1050, 1051, 1052, 1055, 1056, 1057, 1059], "left": [178, 179, 346, 347, 353, 361, 511, 557, 560, 865, 878, 880, 891, 893, 914, 1050, 1051, 1113], "broadcast": [178, 179, 351, 352, 353, 360, 361, 394, 397, 424, 431, 432, 461, 506, 511, 512, 515, 516, 519, 520, 523, 524, 527, 529, 532, 533, 536, 537, 541, 544, 549, 552, 553, 556, 557, 560, 561, 564, 565, 568, 569, 572, 573, 576, 577, 580, 581, 584, 585, 588, 590, 593, 598, 601, 602, 605, 606, 609, 610, 613, 617, 618, 621, 622, 625, 626, 629, 630, 633, 634, 637, 638, 641, 642, 645, 646, 649, 650, 653, 654, 657, 658, 661, 662, 665, 666, 669, 670, 673, 674, 677, 678, 679, 680, 683, 685, 688, 689, 692, 697, 700, 701, 704, 705, 708, 709, 712, 713, 716, 717, 720, 721, 724, 725, 728, 729, 733, 734, 747, 760, 762, 773, 865, 886, 887, 890, 891, 893, 895, 897, 904, 906, 911, 913, 926, 928, 929, 931, 935, 936, 939, 941, 944, 946, 949, 951, 952, 955, 965, 968, 969, 972, 973, 976, 977, 980, 985, 988, 991, 994, 995, 998, 999, 1002, 1038, 1040, 1041, 1050, 1051, 1052, 1060, 1066, 1069, 1071, 1076, 1079, 1080, 1083, 1084, 1087, 1088, 1091, 1092, 1095, 1096, 1100, 1103, 1104, 1105, 1108, 1109, 1112], "correctli": [178, 179, 346, 355, 360, 361, 364, 370, 383, 865, 891, 893, 1050, 1051], "max_depth": [178, 179, 461, 465, 468, 475, 485, 489, 493, 747, 785, 1015, 1027], "multi_map": [178, 179, 360], "map_nest": [178, 179, 183, 199, 202, 204, 205, 206, 207, 212, 219, 226, 229, 230, 237, 238, 243, 244, 246, 247, 248, 254, 258, 261, 274, 313, 314, 323, 324, 327, 328, 527, 541, 543, 549, 551, 557, 559, 561, 563, 565, 567, 569, 571, 588, 592, 593, 601, 609, 610, 612, 616, 617, 618, 620, 634, 636, 638, 640, 658, 660, 662, 664, 670, 672, 674, 676, 689, 691, 697, 699, 701, 703, 887, 889, 957, 959, 995, 997], "leftmost": [178, 179, 1015, 1028], "multi_map_in_static_method": [178, 179, 360], "fn_name": [178, 179], "num_arrai": [178, 179], "overwrite_at_key_chain": [178, 179], "overwrit": [178, 179, 363, 366, 461, 505], "target_dict": [178, 179], "return_dict": [178, 179], "prune_empti": [178, 179], "keep_non": [178, 179], "empti": [178, 179, 180, 181, 359, 361, 362, 405, 406, 1071, 1092, 1095, 1096, 1104, 1105, 1108, 1109, 1112], "prune_key_chain": [178, 179], "key1": [178, 179, 370], "key2": [178, 179], "key3": [178, 179], "prune_key_from_key_chain": [178, 179], "absolut": [178, 179, 345, 511, 512, 515, 865, 874, 910], "certain": [178, 179, 346, 383, 405, 406, 414, 415], "decid": [178, 179, 346, 1015, 1026], "remov": [178, 179, 347, 348, 349, 352, 355, 356, 361, 363, 371, 865, 875, 877, 887, 890, 923, 925, 951, 991, 994, 1011, 1012, 1013], "prune_kei": [178, 179], "prune_keys_from_key_chain": [178, 179], "remove_key_length_limit": [178, 179], "remove_print_limit": [178, 179], "reshape_lik": [178, 179], "leading_shap": [178, 179], "return_cont": [178, 179], "restructur": [178, 179], "keep_orig": [178, 179], "transpos": [178, 179, 368, 371, 461, 492, 852, 854, 856, 858, 865, 886, 898, 900, 904, 906, 1113, 1134, 1136, 1138, 1140], "old": [178, 179, 346, 363], "keep": [178, 179, 346, 347, 354, 360, 367, 369, 371, 747, 819], "start": [178, 179, 345, 346, 347, 348, 349, 350, 352, 353, 361, 365, 366, 368, 369, 370, 382, 383, 405, 406, 414, 415, 461, 476], "restructure_key_chain": [178, 179], "keychain_map": [178, 179], "set_at_key_chain": [178, 179], "set_at_kei": [178, 179], "set_framework": [178, 179, 366, 368, 369, 371], "set_ivy_backend": [178, 179], "ivy_backend": [178, 179], "attribut": [178, 179, 352, 360, 361, 367, 368, 369, 370, 424, 444, 445, 446, 447, 461, 501], "show": [178, 179, 346, 347, 353, 363, 382, 383, 1113], "show_sub_contain": [178, 179], "sub_cont_or_keychain": [178, 179], "shuffl": [178, 179, 1038, 1113], "seed_valu": [178, 179, 1038, 1048], "align": [178, 179, 346, 366, 368, 1113, 1119], "seed": [178, 179, 180, 181, 1038, 1113], "shuffle_h5_fil": [178, 179], "dataset": [178, 179, 369, 381, 1113], "size_ordered_arrai": [178, 179], "keychain": [178, 179], "smallest": [178, 179, 424, 444, 447, 511, 573, 576], "largest": [178, 179, 382, 424, 444, 447, 865, 914], "slice_kei": [178, 179], "key_slic": [178, 179], "all_depth": [178, 179], "slice_via_kei": [178, 179], "sort_by_kei": [178, 179], "num_or_size_split": [178, 179, 366, 951, 990], "with_remaind": [178, 179, 951, 990], "constitu": [178, 179, 371], "dimension": [178, 179, 405, 406, 410, 416, 865, 869, 871, 872, 886, 887, 890, 895, 897, 901, 903, 904, 906, 926, 928, 929, 931, 951, 990, 1050, 1051, 1052, 1053, 1071, 1076, 1079, 1080, 1083, 1084, 1087, 1088, 1091, 1092, 1095, 1096, 1100, 1103, 1104, 1105, 1108, 1109, 1112], "evenli": [178, 179, 405, 406, 414, 415, 951, 990], "store": [178, 179, 352, 357, 359, 360, 366, 368, 369, 370, 747, 774, 821, 850, 865, 923, 925, 951, 990, 1146, 1147], "stop_gradi": [178, 179, 180, 181, 183, 187, 228, 234, 235, 255, 275, 285, 286, 287, 289, 317, 318, 370, 461, 505, 821, 824, 825, 826, 827, 829, 830, 831, 832, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 1011, 1012, 1013, 1014, 1113, 1150, 1151, 1152, 1153, 1154, 1155], "preserve_typ": [178, 179, 821, 847], "stop": [178, 179, 366, 383, 405, 406, 414, 415, 461, 476, 505, 821, 824, 826, 829, 831, 834, 836, 838, 840, 842, 844, 847, 1011, 1012, 1013, 1014, 1150, 1151, 1152, 1153, 1154, 1155], "alwai": [178, 179, 347, 348, 351, 352, 356, 357, 359, 360, 363, 364, 366, 368, 383, 424, 430, 511, 524, 680, 683, 747, 791, 821, 833, 847], "structural_diff": [178, 179], "to_devic": [178, 179, 461, 480], "move": [178, 179, 347, 351, 461, 506], "cuda": [178, 179, 366, 369, 383, 405, 414, 415, 461, 470, 477, 502, 747, 775, 776, 779, 800, 803, 804, 1038, 1039, 1040, 1041, 1044, 1046, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1154, 1156, 1157], "cpu": [178, 179, 347, 362, 383, 405, 414, 415, 461, 480, 481, 483, 497, 500, 502, 506, 507, 509, 510, 747, 775, 776, 779, 800, 803, 804, 1038, 1039, 1040, 1041, 1043, 1044, 1046, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1154, 1156, 1157], "target": [178, 179, 350, 365, 369, 370, 371, 461, 479, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 1113], "to_dict": [178, 179], "to_disk_as_hdf5": [178, 179, 369], "starting_index": [178, 179], "max_batch_s": [178, 179], "read": [178, 179, 349, 1113], "r": [178, 179, 346, 747, 756, 819, 865, 907, 909, 932, 934], "w": [178, 179, 183, 275, 285, 286, 287, 289, 317, 318, 366, 369, 370, 747, 756, 821, 823, 824, 826, 827, 829, 831, 832, 834, 836, 837, 838, 840, 841, 842, 844, 845, 852, 853, 854, 855, 856, 857, 858, 859], "later": [178, 179, 747, 758], "append": [178, 179, 349, 355, 366, 369, 511, 557, 560, 865, 875, 877, 887, 890], "to_disk_as_json": [178, 179, 369], "to_disk_as_pickl": [178, 179, 369], "to_flat_list": [178, 179], "to_iter": [178, 179, 360], "leaf_keys_onli": [178, 179], "to_iterator_kei": [178, 179], "to_iterator_valu": [178, 179], "to_json": [178, 179], "to_list": [178, 179, 747, 1113], "to_multi_dev": [178, 179], "multidevcontain": [178, 179, 180], "distributedarrai": [178, 179], "to_numpi": [178, 179, 369, 747, 1113], "update_backend": [178, 179], "to_raw": [178, 179], "raw": [178, 179, 352], "trim_kei": [178, 179], "max_length": [178, 179], "try_kc": [178, 179], "tri": [178, 179], "arbitrari": [178, 179, 355, 356, 360, 363, 364, 370, 383, 405, 416, 424, 431, 452, 461, 490, 491, 493], "concatten": [178, 179, 461, 490, 491, 492, 493, 505], "unstack": [178, 179, 366, 369, 747, 1113], "dim_siz": [178, 179, 461], "update_config": [178, 179], "global_norm": [178, 179, 183, 211, 315, 316, 760, 761], "vector": [178, 179, 382, 405, 416, 747, 760, 762, 852, 861, 865, 869, 871, 878, 880, 887, 890, 901, 903, 914, 916, 917, 919, 926, 928, 929, 931, 932, 934, 1134, 1144], "with_default_key_color": [178, 179], "with_entries_as_list": [178, 179], "with_ivy_backend": [178, 179], "with_key_length_limit": [178, 179, 369], "with_print_ind": [178, 179, 369], "with_print_limit": [178, 179, 369], "with_print_line_spac": [178, 179], "containerwithcr": [180, 181, 307], "containerwithdatatyp": [180, 181, 309], "containerwithdevic": [180, 181, 311], "containerwithelementwis": [180, 181, 313, 360], "containerwithgener": [180, 181, 315], "containerwithgradi": [180, 181, 317], "containerwithimag": [180, 181, 319], "containerwithlay": [180, 181, 321], "containerwithlinearalgebra": [180, 181, 323], "containerwithloss": [180, 181, 325], "containerwithmanipul": [180, 181, 327, 348], "containerwithnorm": [180, 181, 329], "containerwithrandom": [180, 181, 331], "containerwithsearch": [180, 181, 333], "containerwithset": [180, 181, 335], "containerwithsort": [180, 181, 337], "containerwithstatist": [180, 181, 339], "containerwithutil": [180, 181, 341], "__add__": [180, 181, 183, 352, 353, 359, 360, 364, 368], "special": [180, 181, 183, 348, 351, 352, 353, 359, 364, 511, 512, 515, 516, 519, 520, 523, 524, 527, 529, 532, 533, 536, 537, 541, 544, 569, 572, 573, 576, 577, 580, 581, 584, 598, 601, 602, 605, 606, 642, 645, 646, 649, 654, 657, 658, 661, 680, 683, 697, 700, 701, 704, 705, 708, 709, 712, 713, 716, 717, 720, 721, 724, 734, 743, 746, 1071, 1076, 1079, 1080, 1083, 1084, 1087, 1092, 1095, 1096, 1100, 1103], "11": [180, 181, 183, 188, 276, 290, 313, 314, 331, 332, 353, 360, 511, 524, 526, 528, 549, 552, 658, 705, 708, 747, 765, 775, 865, 875, 877, 901, 903, 935, 946, 949, 951, 969, 972, 977, 980, 1038, 1040, 1041, 1042, 1050, 1054, 1055, 1056, 1071, 1072, 1075, 1099], "__radd__": [180, 181, 183, 352, 353], "revers": [180, 181, 183, 348, 352, 353, 371, 383, 747, 768, 951, 969, 972], "adam_step": [180, 181, 821], "arang": [180, 181, 361, 405, 414, 415, 1071, 1072, 1075, 1099, 1113], "arg_info": [180, 181, 747], "arg_nam": [180, 181, 747], "argmax": [180, 181, 1050, 1113], "argmin": [180, 181, 1050, 1113], "array_equ": [180, 181, 747], "as_ivy_dev": [180, 181, 368, 461], "as_ivy_dtyp": [180, 181, 424], "as_native_dev": [180, 181, 461], "as_native_dtyp": [180, 181, 424], "asarrai": [180, 181, 363, 405, 852, 853, 1055, 1057], "assert_supports_inplac": [180, 181, 747], "astyp": [180, 181, 361, 363, 424], "broadcast_arrai": [180, 181, 424], "broadcast_to": [180, 181, 361, 424], "cache_fn": [180, 181, 356, 747], "clear_mem_on_dev": [180, 181, 461], "clip_matrix_norm": [180, 181, 747], "closest_valid_dtyp": [180, 181, 424], "container_typ": [180, 181, 747], "conv1d": [180, 181, 852, 1134], "conv1d_transpos": [180, 181, 852], "conv2d": [180, 181, 852, 1113, 1134], "conv2d_transpos": [180, 181, 852], "conv3d": [180, 181, 852, 1134], "conv3d_transpos": [180, 181, 852], "copy_arrai": [180, 181, 747], "cumprod": [180, 181, 371, 747], "cumsum": [180, 181, 747, 1113], "current_backend_str": [180, 181, 747], "default_devic": [180, 181, 362, 366, 461, 499, 502, 509], "default_dtyp": [180, 181, 356, 361, 424], "default_float_dtyp": [180, 181, 361, 424], "default_int_dtyp": [180, 181, 361, 424], "depthwise_conv2d": [180, 181, 852, 1113], "dev_clone_arrai": [180, 181, 461], "dev_clone_it": [180, 181, 461], "dev_clone_nest": [180, 181, 461], "dev_dist_arrai": [180, 181, 461], "dev_dist_it": [180, 181, 461], "dev_dist_nest": [180, 181, 461], "dev_unifi": [180, 181, 461], "dev_unify_arrai": [180, 181, 461], "dev_unify_it": [180, 181, 461], "dev_unify_nest": [180, 181, 461], "dev_util": [180, 181, 362, 461], "dropout": [180, 181, 369, 852, 1134, 1145], "dtype_bit": [180, 181, 424], "empty_lik": [180, 181, 405], "execute_with_gradi": [180, 181, 360, 369, 370, 371, 383, 821, 1113], "ey": [180, 181, 371, 405, 852, 855, 859], "finfo": [180, 181, 424], "floormod": [180, 181, 747, 1113], "fourier_encod": [180, 181, 747], "from_dlpack": [180, 181, 405], "full_lik": [180, 181, 405], "function_supported_dtyp": [180, 181, 424], "function_unsupported_dtyp": [180, 181, 424], "gelu": [180, 181, 394, 1120], "get_all_arrays_in_memori": [180, 181, 747], "get_all_ivy_arrays_on_dev": [180, 181, 362, 461], "get_min_bas": [180, 181, 747], "get_min_denomin": [180, 181, 747], "get_num_dim": [180, 181, 747, 1113], "get_referrers_recurs": [180, 181, 747], "gpu_is_avail": [180, 181, 461], "handle_nest": [180, 181, 356, 360, 384], "handle_out_argu": [180, 181, 358, 361, 362, 363, 364, 384], "iinfo": [180, 181, 424], "indices_wher": [180, 181, 747, 1113], "infer_devic": [180, 181, 361, 362, 364, 384], "infer_dtyp": [180, 181, 361, 362, 364, 384], "inplace_arrays_support": [180, 181, 747], "inplace_decr": [180, 181, 747], "inplace_incr": [180, 181, 747], "inplace_variables_support": [180, 181, 747], "inputs_to_native_arrai": [180, 181, 359, 384], "invalid_dtyp": [180, 181, 424], "is_float_dtyp": [180, 181, 424], "is_int_dtyp": [180, 181, 424, 747, 817], "is_ivy_contain": [180, 181, 747], "leaky_relu": [180, 181, 394, 1113], "linear": [180, 181, 352, 366, 369, 370, 371, 394, 395, 396, 397, 747, 774, 852, 860, 911, 913, 1113, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141], "linspac": [180, 181, 366, 405, 406, 1113], "logspac": [180, 181, 366, 405], "lstm_updat": [180, 181, 366, 852], "match_kwarg": [180, 181, 747], "matrix_pow": [180, 181, 865], "meshgrid": [180, 181, 405], "multi_head_attent": [180, 181, 360, 363, 852], "multinomi": [180, 181, 1038], "nonzero": [180, 181, 511, 524, 680, 683, 1050], "num_arrays_in_memori": [180, 181, 747], "num_cpu_cor": [180, 181, 362, 461], "num_gpu": [180, 181, 355, 362, 461], "num_ivy_arrays_on_dev": [180, 181, 461], "one_hot": [180, 181, 371, 747, 1113], "ones_lik": [180, 181, 371, 405, 1113], "outputs_to_ivy_arrai": [180, 181, 359, 361, 362, 364, 384], "percent_used_mem_on_dev": [180, 181, 461], "print_all_arrays_in_memori": [180, 181, 747], "print_all_ivy_arrays_on_dev": [180, 181, 461], "promote_typ": [180, 181, 424], "randint": [180, 181, 183, 290, 331, 332, 1038, 1042, 1113], "random_norm": [180, 181, 852, 855, 858, 859, 865, 914, 1038, 1055, 1056], "result_typ": [180, 181, 361, 424], "scaled_dot_product_attent": [180, 181, 852], "scatter_flat": [180, 181, 747], "scatter_nd": [180, 181, 368, 747, 1113], "set_default_devic": [180, 181, 362, 461, 509], "set_default_dtyp": [180, 181, 356, 361, 424], "set_default_float_dtyp": [180, 181, 361, 424], "set_default_int_dtyp": [180, 181, 361, 424], "set_min_bas": [180, 181, 747], "set_min_denomin": [180, 181, 747], "set_queue_timeout": [180, 181, 747], "set_split_factor": [180, 181, 461], "set_tmp_dir": [180, 181, 747], "set_with_grad": [180, 181, 821], "shape_to_tupl": [180, 181, 361, 747], "sigmoid": [180, 181, 366, 369, 370, 394, 1113], "slogdet": [180, 181, 865, 874], "softplu": [180, 181, 394, 1113], "split_factor": [180, 181, 461, 470], "split_func_cal": [180, 181, 461], "stable_divid": [180, 181, 356, 747], "stable_pow": [180, 181, 747], "static_ab": [180, 181], "static_aco": [180, 181], "static_acosh": [180, 181], "static_adam_step": [180, 181], "static_al": [180, 181], "static_ani": [180, 181], "static_arang": [180, 181], "static_arg_info": [180, 181], "static_arg_nam": [180, 181], "static_argmax": [180, 181], "static_argmin": [180, 181], "static_arrai": [180, 181], "static_array_equ": [180, 181], "static_arrays_equ": [180, 181], "static_as_ivy_dev": [180, 181], "static_as_ivy_dtyp": [180, 181], "static_as_native_dev": [180, 181], "static_as_native_dtyp": [180, 181], "static_asarrai": [180, 181], "static_asin": [180, 181], "static_asinh": [180, 181], "static_assert_supports_inplac": [180, 181], "static_astyp": [180, 181], "static_atan": [180, 181], "static_atan2": [180, 181], "static_atanh": [180, 181], "static_bitwise_and": [180, 181], "static_bitwise_invert": [180, 181], "static_bitwise_left_shift": [180, 181], "static_bitwise_or": [180, 181], "static_bitwise_right_shift": [180, 181], "static_bitwise_xor": [180, 181], "static_broadcast_arrai": [180, 181], "static_broadcast_to": [180, 181], "static_cache_fn": [180, 181], "static_ceil": [180, 181], "static_choleski": [180, 181], "static_clear_mem_on_dev": [180, 181], "static_clip_matrix_norm": [180, 181], "static_clip_vector_norm": [180, 181], "static_closest_valid_dtyp": [180, 181], "static_concat": [180, 181], "static_constant_pad": [180, 181], "static_container_typ": [180, 181], "static_conv1d": [180, 181], "static_conv1d_transpos": [180, 181], "static_conv2d": [180, 181], "static_conv2d_transpos": [180, 181], "static_conv3d": [180, 181], "static_conv3d_transpos": [180, 181], "static_copy_arrai": [180, 181], "static_co": [180, 181], "static_cosh": [180, 181], "static_cross": [180, 181], "static_cumprod": [180, 181], "static_cumsum": [180, 181], "static_current_backend": [180, 181], "static_current_backend_str": [180, 181], "static_default": [180, 181], "static_default_devic": [180, 181], "static_default_dtyp": [180, 181], "static_default_float_dtyp": [180, 181], "static_default_int_dtyp": [180, 181], "static_depthwise_conv2d": [180, 181], "static_det": [180, 181], "static_dev": [180, 181], "static_dev_clon": [180, 181], "static_dev_clone_arrai": [180, 181], "static_dev_clone_it": [180, 181], "static_dev_clone_nest": [180, 181], "static_dev_dist": [180, 181], "static_dev_dist_arrai": [180, 181], "static_dev_dist_it": [180, 181], "static_dev_dist_nest": [180, 181], "static_dev_unifi": [180, 181], "static_dev_unify_arrai": [180, 181], "static_dev_unify_it": [180, 181], "static_dev_unify_nest": [180, 181], "static_dev_util": [180, 181], "static_diagon": [180, 181], "static_dropout": [180, 181], "static_dtyp": [180, 181], "static_dtype_bit": [180, 181], "static_eigh": [180, 181], "static_eigvalsh": [180, 181], "static_einops_rearrang": [180, 181], "static_einops_reduc": [180, 181], "static_einops_repeat": [180, 181], "static_einsum": [180, 181], "static_empti": [180, 181], "static_empty_lik": [180, 181], "static_equ": [180, 181], "static_erf": [180, 181], "static_execute_with_gradi": [180, 181], "static_exist": [180, 181], "static_exp": [180, 181], "static_expand_dim": [180, 181], "static_expm1": [180, 181], "static_ey": [180, 181], "static_finfo": [180, 181], "static_flip": [180, 181], "static_floor": [180, 181], "static_floor_divid": [180, 181], "static_floormod": [180, 181], "static_fourier_encod": [180, 181], "static_from_dlpack": [180, 181], "static_ful": [180, 181], "static_full_lik": [180, 181], "static_function_supported_dtyp": [180, 181], "static_function_unsupported_dtyp": [180, 181], "static_gath": [180, 181], "static_gelu": [180, 181], "static_get_all_arrays_in_memori": [180, 181], "static_get_all_ivy_arrays_on_dev": [180, 181], "static_get_min_bas": [180, 181], "static_get_min_denomin": [180, 181], "static_get_num_dim": [180, 181], "static_get_referrers_recurs": [180, 181], "static_gpu_is_avail": [180, 181], "static_great": [180, 181], "static_greater_equ": [180, 181], "static_handle_nest": [180, 181], "static_handle_out_argu": [180, 181], "static_has_nan": [180, 181], "static_iinfo": [180, 181], "static_indices_wher": [180, 181], "static_infer_devic": [180, 181], "static_infer_dtyp": [180, 181], "static_inplace_arrays_support": [180, 181], "static_inplace_decr": [180, 181], "static_inplace_incr": [180, 181], "static_inplace_upd": [180, 181], "static_inplace_variables_support": [180, 181], "static_inputs_to_native_arrai": [180, 181], "static_inv": [180, 181], "static_invalid_dtyp": [180, 181], "static_is_arrai": [180, 181], "static_is_float_dtyp": [180, 181], "static_is_int_dtyp": [180, 181], "static_is_ivy_arrai": [180, 181], "static_is_ivy_contain": [180, 181], "static_is_native_arrai": [180, 181], "static_is_vari": [180, 181], "static_isfinit": [180, 181], "static_isinf": [180, 181], "static_isnan": [180, 181], "static_layer_norm": [180, 181], "static_leaky_relu": [180, 181], "static_less": [180, 181], "static_less_equ": [180, 181], "static_linear": [180, 181], "static_linspac": [180, 181], "static_log": [180, 181], "static_log10": [180, 181], "static_log1p": [180, 181], "static_log2": [180, 181], "static_logaddexp": [180, 181], "static_logical_and": [180, 181], "static_logical_not": [180, 181], "static_logical_or": [180, 181], "static_logical_xor": [180, 181], "static_logspac": [180, 181], "static_lstm_upd": [180, 181], "static_match_kwarg": [180, 181], "static_matmul": [180, 181], "static_matrix_norm": [180, 181], "static_matrix_pow": [180, 181], "static_matrix_rank": [180, 181], "static_matrix_transpos": [180, 181], "static_max": [180, 181], "static_maximum": [180, 181], "static_mean": [180, 181], "static_meshgrid": [180, 181], "static_min": [180, 181], "static_minimum": [180, 181], "static_multi_head_attent": [180, 181], "static_multinomi": [180, 181], "static_multiprocess": [180, 181], "static_native_arrai": [180, 181], "static_neg": [180, 181], "static_nonzero": [180, 181], "static_not_equ": [180, 181], "static_num_arrays_in_memori": [180, 181], "static_num_cpu_cor": [180, 181], "static_num_gpu": [180, 181], "static_num_ivy_arrays_on_dev": [180, 181], "static_one_hot": [180, 181], "static_on": [180, 181], "static_ones_lik": [180, 181], "static_out": [180, 181], "static_outputs_to_ivy_arrai": [180, 181], "static_percent_used_mem_on_dev": [180, 181], "static_permute_dim": [180, 181], "static_pinv": [180, 181], "static_posit": [180, 181], "static_pow": [180, 181], "static_print_all_arrays_in_memori": [180, 181], "static_print_all_ivy_arrays_on_dev": [180, 181], "static_prod": [180, 181], "static_promote_typ": [180, 181], "static_qr": [180, 181], "static_queue_timeout": [180, 181], "static_random_norm": [180, 181], "static_relu": [180, 181], "static_remaind": [180, 181], "static_repeat": [180, 181], "static_reshap": [180, 181], "static_result_typ": [180, 181], "static_round": [180, 181], "static_scaled_dot_product_attent": [180, 181], "static_scatter_flat": [180, 181], "static_scatter_nd": [180, 181], "static_se": [180, 181], "static_set_default_devic": [180, 181], "static_set_default_dtyp": [180, 181], "static_set_default_float_dtyp": [180, 181], "static_set_default_int_dtyp": [180, 181], "static_set_min_bas": [180, 181], "static_set_min_denomin": [180, 181], "static_set_queue_timeout": [180, 181], "static_set_split_factor": [180, 181], "static_set_tmp_dir": [180, 181], "static_set_with_grad": [180, 181], "static_shap": [180, 181], "static_shape_to_tupl": [180, 181], "static_shuffl": [180, 181], "static_sigmoid": [180, 181], "static_sign": [180, 181], "static_sin": [180, 181], "static_sinh": [180, 181], "static_slogdet": [180, 181], "static_softmax": [180, 181], "static_softplu": [180, 181], "static_solv": [180, 181], "static_split": [180, 181], "static_split_factor": [180, 181], "static_split_func_cal": [180, 181], "static_sqrt": [180, 181], "static_squar": [180, 181], "static_squeez": [180, 181], "static_stable_divid": [180, 181], "static_stable_pow": [180, 181], "static_stack": [180, 181], "static_std": [180, 181], "static_stop_gradi": [180, 181], "static_sum": [180, 181], "static_supports_inplac": [180, 181], "static_svd": [180, 181], "static_svdv": [180, 181], "static_swapax": [180, 181], "static_tanh": [180, 181], "static_tensordot": [180, 181], "static_til": [180, 181], "static_tmp_dir": [180, 181], "static_to_devic": [180, 181], "static_to_list": [180, 181], "static_to_native_arrays_and_back": [180, 181], "static_to_numpi": [180, 181], "static_to_scalar": [180, 181], "static_total_mem_on_dev": [180, 181], "static_tpu_is_avail": [180, 181], "static_trac": [180, 181], "static_tril": [180, 181], "static_triu": [180, 181], "static_trunc": [180, 181], "static_try_else_non": [180, 181], "static_type_promote_arrai": [180, 181], "static_unique_al": [180, 181], "static_unique_count": [180, 181], "static_unique_invers": [180, 181], "static_unique_valu": [180, 181], "static_unset_default_devic": [180, 181], "static_unset_default_dtyp": [180, 181], "static_unset_default_float_dtyp": [180, 181], "static_unset_default_int_dtyp": [180, 181], "static_unset_with_grad": [180, 181], "static_unstack": [180, 181], "static_used_mem_on_dev": [180, 181], "static_valid_dtyp": [180, 181], "static_value_is_nan": [180, 181], "static_var": [180, 181], "static_vari": [180, 181], "static_variable_data": [180, 181], "static_vecdot": [180, 181], "static_vector_norm": [180, 181], "static_vector_to_skew_symmetric_matrix": [180, 181], "static_wher": [180, 181], "static_with_grad": [180, 181], "static_zero_pad": [180, 181], "static_zero": [180, 181], "static_zeros_lik": [180, 181], "supports_inplac": [180, 181, 747], "tmp_dir": [180, 181, 747], "to_native_arrays_and_back": [180, 181, 358, 364, 384], "to_scalar": [180, 181, 747], "total_mem_on_dev": [180, 181, 362, 461], "tpu_is_avail": [180, 181, 461], "tril": [180, 181, 405], "triu": [180, 181, 405], "try_else_non": [180, 181, 747], "type_promote_arrai": [180, 181, 424], "unique_al": [180, 181, 1055], "unique_count": [180, 181, 1055], "unique_invers": [180, 181, 1055], "unique_valu": [180, 181, 1055], "unset_default_devic": [180, 181, 461], "unset_default_dtyp": [180, 181, 424], "unset_default_float_dtyp": [180, 181, 424], "unset_default_int_dtyp": [180, 181, 424], "unset_with_grad": [180, 181, 821], "used_mem_on_dev": [180, 181, 461], "valid_dtyp": [180, 181, 424], "value_is_nan": [180, 181, 747], "variable_data": [180, 181, 821], "with_grad": [180, 181, 821, 846], "zeros_lik": [180, 181, 405, 951, 952, 955, 1113], "at_dev": [180, 182, 183, 461, 474, 475], "container_method": [183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 433, 435, 437, 512, 514, 518, 519, 520, 522, 526, 527, 528, 529, 531, 533, 535, 539, 540, 541, 543, 545, 547, 549, 551, 553, 555, 557, 559, 561, 563, 565, 567, 569, 571, 573, 575, 579, 580, 583, 584, 587, 588, 589, 592, 593, 594, 596, 600, 601, 602, 604, 608, 609, 610, 612, 616, 617, 618, 620, 622, 624, 626, 628, 630, 632, 634, 636, 638, 640, 642, 644, 646, 648, 650, 652, 654, 656, 658, 660, 662, 664, 666, 668, 670, 672, 674, 676, 680, 682, 684, 685, 687, 689, 691, 693, 695, 697, 699, 701, 703, 705, 707, 709, 711, 713, 715, 717, 719, 721, 723, 725, 727, 729, 730, 732, 735, 737, 738, 741, 742, 743, 745, 748, 750, 752, 760, 761, 776, 778, 780, 824, 825, 827, 829, 830, 832, 834, 835, 837, 838, 839, 841, 842, 843, 845, 887, 889, 936, 938, 940, 941, 943, 945, 946, 948, 950, 952, 954, 956, 957, 959, 961, 963, 965, 967, 969, 971, 973, 975, 977, 979, 981, 983, 985, 987, 989, 991, 993, 995, 997, 999, 1001, 1003, 1005, 1007, 1009, 1034, 1036, 1040, 1042, 1044, 1045, 1047, 1061, 1063, 1065, 1066, 1068, 1070, 1072, 1074, 1076, 1078, 1080, 1082, 1084, 1086, 1088, 1090, 1092, 1094, 1098, 1099, 1100, 1102, 1105, 1107, 1109, 1111], "adam_upd": [183, 317, 318, 370, 821], "dcdw": [183, 187, 228, 234, 235, 275, 285, 286, 287, 317, 318, 821, 823, 824, 825, 826, 827, 829, 830, 831, 832, 834, 835, 836, 837, 838, 839, 840, 841], "lr": [183, 187, 228, 234, 235, 255, 275, 285, 286, 287, 289, 317, 318, 369, 370, 821, 824, 825, 826, 827, 829, 830, 831, 832, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 1150, 1151, 1152, 1153, 1154, 1155], "mw_tm1": [183, 187, 234, 275, 286, 317, 318, 821, 824, 825, 826, 827, 834, 835, 836, 837], "vw_tm1": [183, 187, 234, 275, 286, 317, 318, 821, 824, 825, 826, 827, 834, 835, 836, 837], "beta1": [183, 187, 234, 275, 286, 317, 318, 370, 821, 823, 824, 825, 826, 827, 834, 835, 836, 837, 1150, 1151, 1152], "beta2": [183, 187, 234, 275, 286, 317, 318, 370, 821, 823, 824, 825, 826, 827, 834, 835, 836, 837, 1150, 1151, 1152], "999": [183, 187, 234, 275, 286, 317, 318, 370, 821, 823, 824, 825, 826, 827, 834, 835, 836, 837, 1150, 1151, 1152], "add_ivy_container_instance_method": [183, 343], "containerexampl": [183, 189, 343, 344], "static_all_equ": [183, 191, 315, 316, 748, 750], "int32": [183, 208, 280, 309, 310, 361, 424, 433, 435, 436, 437, 445, 747, 816, 951, 965, 968, 1071, 1088, 1091, 1096], "int64": [183, 208, 280, 309, 310, 361, 424, 433, 435, 436, 437, 445, 511, 565, 568, 1050, 1051, 1052, 1071, 1088, 1091, 1096], "clip_vector_norm": [183, 315, 316, 747], "max_norm": [183, 211, 315, 316, 747, 759, 760, 761, 762], "gradient_descent_upd": [183, 317, 318, 821, 1011, 1012, 1013, 1014, 1113], "lamb_upd": [183, 317, 318, 821], "max_trust_ratio": [183, 234, 286, 317, 318, 821, 834, 835, 836, 837, 1150, 1152], "decay_lambda": [183, 234, 235, 286, 287, 317, 318, 821, 834, 835, 836, 837, 838, 839, 840, 841, 1150, 1152, 1153], "lars_upd": [183, 317, 318, 821], "optimizer_upd": [183, 317, 318, 821], "effective_grad": [183, 255, 289, 317, 318, 821, 842, 843, 844, 845], "random_uniform": [183, 331, 332, 362, 370, 1038, 1113], "static_adam_upd": [183, 317, 318, 824], "static_add": [183, 313, 314, 352, 353, 360, 658], "static_argsort": [183, 337, 338, 1061], "static_binary_cross_entropi": [183, 325, 326, 936], "static_can_cast": [183, 309, 310, 433], "from_": [183, 280, 309, 310, 424, 433, 436, 437], "static_clip": [183, 327, 328, 952], "static_rol": [183, 281, 327, 328, 353, 360, 952, 956, 985], "static_cross_entropi": [183, 325, 326, 941], "static_divid": [183, 313, 314, 360, 609, 610], "static_gather_nd": [183, 315, 316, 776], "static_gradient_descent_upd": [183, 317, 318, 829], "static_lamb_upd": [183, 317, 318, 834], "static_lars_upd": [183, 317, 318, 838], "static_multipli": [183, 313, 314, 360, 680], "static_optimizer_upd": [183, 317, 318, 842], "static_randint": [183, 331, 332, 1040], "20": [183, 290, 331, 332, 368, 511, 569, 572, 598, 705, 708, 721, 724, 865, 875, 877, 901, 903, 920, 922, 1038, 1040, 1041, 1042, 1050, 1053, 1054, 1071, 1072, 1075, 1099], "15": [183, 290, 331, 332, 346, 353, 511, 549, 552, 705, 708, 852, 855, 865, 875, 877, 901, 903, 920, 922, 951, 985, 988, 1033, 1034, 1037, 1038, 1040, 1041, 1042, 1050, 1053, 1055, 1056, 1071, 1072, 1075, 1099], "16": [183, 290, 296, 301, 313, 314, 331, 332, 347, 353, 369, 511, 540, 545, 734, 735, 737, 742, 852, 858, 865, 875, 877, 901, 903, 1040, 1042, 1050, 1054, 1071, 1072, 1075, 1099], "12": [183, 290, 331, 332, 346, 353, 360, 511, 549, 552, 569, 572, 581, 705, 708, 747, 765, 783, 865, 875, 877, 901, 903, 920, 922, 951, 969, 972, 977, 980, 985, 988, 1033, 1034, 1037, 1038, 1040, 1041, 1042, 1050, 1054, 1055, 1056, 1071, 1072, 1075, 1099], "40": [183, 290, 331, 332, 511, 581, 721, 724, 865, 901, 903, 1040, 1042, 1071, 1072, 1075, 1099], "gpu": [183, 290, 331, 332, 347, 362, 368, 383, 461, 480, 483, 496, 498, 502, 504, 509, 1040, 1042], "87": [183, 290, 331, 332, 1040, 1042], "62": [183, 290, 331, 332, 1040, 1042], "52": [183, 290, 331, 332, 865, 901, 903, 1040, 1042, 1055, 1056, 1071, 1072, 1075, 1099], "95": [183, 290, 331, 332, 1040, 1042], "37": [183, 290, 331, 332, 511, 734, 1033, 1034, 1037, 1040, 1042], "42": [183, 290, 331, 332, 371, 394, 400, 865, 901, 903, 1038, 1040, 1042, 1048, 1071, 1072, 1075, 1099], "14": [183, 290, 331, 332, 349, 353, 360, 511, 569, 572, 852, 864, 865, 875, 877, 901, 903, 1040, 1042, 1055, 1056, 1071, 1072, 1075, 1099], "13": [183, 290, 331, 332, 353, 360, 511, 549, 552, 569, 572, 581, 721, 724, 747, 765, 852, 864, 865, 875, 877, 901, 903, 1033, 1034, 1037, 1040, 1042, 1050, 1054, 1055, 1056, 1071, 1072, 1075, 1099], "static_random_uniform": [183, 331, 332, 1044], "static_sort": [183, 337, 338, 1066], "static_sparse_cross_entropi": [183, 325, 326, 946], "static_subtract": [183, 313, 314, 360, 729], "static_tan": [183, 313, 314, 353, 360, 540, 545, 742], "143": [183, 296, 301, 313, 314, 353, 511, 540, 545, 734, 735, 737, 742], "38": [183, 296, 301, 313, 314, 353, 511, 540, 545, 734, 735, 737, 742], "strongli": [345, 346, 1113, 1119], "welcom": [345, 346, 347, 1113, 1119], "skill": 345, "vetern": 345, "beginn": 345, "aspect": [345, 369, 1113], "guid": [345, 346, 347, 355, 1113], "through": [345, 347, 348, 350, 353, 356, 357, 360, 365, 366, 368, 369, 370, 371, 382, 511, 541, 544], "journei": [345, 1113, 1119], "inclusvi": 345, "big": [345, 383], "team": [345, 346, 347], "board": 345, "contributor": [345, 346, 347, 365, 1113], "section": [345, 347, 348, 350, 351, 352, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 369, 370, 1055, 1056, 1057, 1059], "below": [345, 346, 348, 349, 350, 351, 353, 356, 360, 361, 362, 363, 366, 367, 368, 369, 370, 371, 382, 405, 416, 420, 421, 511, 549, 552, 569, 572, 581, 705, 708, 865, 872, 875, 877, 923, 925, 951, 965, 968, 969, 972, 1055, 1056, 1057, 1060, 1061, 1064, 1113], "best": [345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 747, 797], "go": [345, 346, 347, 348, 350, 351, 353, 360, 365, 369, 383, 1015, 1026], "finish": [345, 346, 350, 1113], "dive": [345, 347, 348, 365, 368, 369, 383, 1113], "environ": [345, 347, 349, 382], "basic": [345, 348, 349], "fork": [345, 346, 747, 798], "doc": [345, 348, 352, 364, 366, 369, 370, 1113], "document": [345, 347, 367, 369, 371], "local": [345, 346, 349, 356], "task": [345, 347, 382, 1011, 1012, 1013, 1014, 1113], "help": [345, 346, 353, 357, 359, 360, 368, 369, 370, 381, 747, 753, 1071, 1096, 1113], "video": [345, 347, 352, 353, 364], "realli": [346, 360, 383], "contribut": [346, 347, 348, 366, 1119], "toward": [346, 366, 951, 985, 988, 1113, 1119], "page": [346, 347, 367, 371, 381, 1113, 1119], "explain": [346, 347, 348, 351, 352, 353, 355, 356, 357, 359, 360, 361, 362, 363, 364, 366, 367, 368, 369, 370, 371, 1113, 1119], "main": [346, 349, 358, 360, 405, 410, 420, 421, 865, 875, 877, 923, 925], "prefer": [346, 360], "git": [346, 347], "submodul": [346, 347, 348, 349, 354, 355, 356, 362, 365, 366, 370, 1113, 1148, 1149, 1156, 1157], "com": 346, "unifyai": [346, 349], "http": [346, 352, 424, 433, 436, 511, 529, 532, 569, 572, 573, 576, 581, 606, 689, 692, 721, 724, 725, 728, 821, 823, 824, 826, 951, 965, 968, 985, 988, 1055, 1056, 1057, 1060, 1061, 1064, 1071, 1076, 1079], "gh": 346, "your_fold": 346, "id": [346, 359, 360, 461, 480, 1146, 1147], "cours": [346, 347, 353, 369, 383], "whatev": [346, 383], "integr": [346, 355, 424, 430], "familiar": [346, 348], "sure": [346, 348, 354], "elig": 346, "free": [346, 347, 348, 349, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 382, 1113], "student": 346, "licenc": 346, "peopl": [346, 347, 350], "seem": [346, 370, 383], "miss": [346, 353, 355, 359, 360, 1150, 1154], "explicit": [346, 349, 360, 361, 363, 366, 383], "remind": 346, "channel": [346, 347, 348, 349, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 747, 774, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1143, 1144], "pace": 346, "suggest": [346, 347, 351], "latest": [346, 348, 349, 352, 383, 424, 433, 436, 511, 529, 532, 569, 572, 573, 576, 581, 606, 689, 692, 721, 724, 725, 728, 951, 965, 968, 985, 988, 1055, 1056, 1057, 1060, 1061, 1064, 1071, 1076, 1079, 1134, 1143], "packag": [346, 349, 383], "ensur": [346, 347, 355, 359, 361, 364, 747, 791], "pypi": [346, 348, 383], "person": [346, 347], "experi": [346, 367, 369, 383], "avoid": [346, 347, 355, 357, 358, 360, 368, 461, 511, 602, 605], "pip": [346, 382, 1113], "instal": [346, 349, 382, 1113], "abil": [346, 367, 383], "perhap": [346, 368, 369, 370, 383], "track": [346, 347, 461, 1015, 1027, 1146, 1147], "run": [346, 349, 354, 355, 357, 364, 366, 367, 368, 369, 370, 371, 382, 383, 461, 470, 821, 823, 824, 826, 834, 836, 1011, 1012, 1013, 1014, 1134, 1145, 1146, 1147], "command": [346, 349, 1113], "ivy_dev": [346, 347, 349], "name": [346, 347, 349, 352, 355, 366, 368, 369, 371, 402, 403, 747, 753, 865, 878, 880, 907, 909, 914, 1055, 1056, 1057], "setup": 346, "click": [346, 347, 352, 1113], "icon": [346, 347], "side": [346, 347], "choos": [346, 347, 371, 461, 506, 511, 666, 669, 670, 673, 1050, 1054, 1055, 1056, 1057, 1059, 1071, 1076, 1079, 1080, 1083, 1084, 1087], "panel": 346, "select": [346, 347, 355, 366, 368, 371, 383], "drop": [346, 383], "down": [346, 368], "path": [346, 349], "manual": [346, 347, 355, 370, 1015, 1016, 1025, 1026], "builtin": [346, 349, 368, 370], "requir": [346, 349, 351, 352, 353, 355, 358, 359, 361, 362, 364, 368, 383, 402, 403, 511, 721, 724, 865, 878, 880, 951, 995, 998, 1123, 1124], "cmd": [346, 349], "directori": [346, 347, 349, 747, 808], "folder": [346, 347, 349, 351, 354, 355, 356], "abov": [346, 347, 349, 352, 353, 356, 357, 359, 360, 363, 364, 368, 369, 370, 371, 405, 416, 420, 421, 424, 433, 436, 511, 524, 529, 532, 549, 552, 569, 572, 573, 576, 581, 606, 680, 683, 689, 692, 705, 708, 721, 724, 725, 728, 734, 747, 775, 852, 855, 864, 865, 872, 875, 877, 878, 880, 923, 925, 951, 965, 968, 969, 972, 985, 988, 1033, 1034, 1037, 1038, 1040, 1041, 1055, 1056, 1057, 1060, 1061, 1064, 1071, 1076, 1079, 1088, 1091, 1092, 1095, 1096, 1104, 1105, 1108], "m": [346, 347, 349, 350, 366, 405, 416, 420, 421, 747, 756, 865, 866, 868, 872, 875, 877, 878, 880, 881, 883, 884, 886, 887, 890, 895, 897, 898, 900, 901, 903, 904, 906, 907, 909, 911, 913, 914, 916, 917, 919, 923, 925, 1038, 1043, 1044, 1046], "python3": [346, 349], "script": [346, 347, 349, 353, 366, 383], "bat": [346, 347, 349], "OR": [346, 347, 349, 511, 561, 564, 670, 673, 1104, 1109, 1112], "bin": [346, 347, 349], "mac": [346, 347, 349], "linux": [346, 347, 349], "virtualenv": 346, "os": 346, "note": [346, 347, 351, 352, 353, 360, 511, 701, 704, 865, 878, 880, 914, 951, 995, 998, 1055, 1057, 1071, 1080, 1083], "tick": [346, 347], "To": [346, 353, 356, 360, 369, 370, 371, 1113], "ivy_test": [346, 347], "test_array_api": [346, 347, 354, 355], "cd": [346, 347, 349], "txt": 346, "visual": [346, 383], "jetbrain": 346, "remot": 346, "mitig": 346, "potenti": [346, 365, 511, 602, 605], "conflict": [346, 347, 369], "yet": [346, 348, 360], "particular": [346, 347, 351, 363, 511, 512, 515], "system": [346, 383, 865, 911, 913], "instruct": [346, 348], "desktop": 346, "wsl": 346, "powershel": 346, "admin": 346, "visit": 346, "link": 346, "profession": 346, "execut": [346, 349, 360, 363, 366, 368, 371, 383, 747, 818], "deploy": 346, "top": [346, 347, 355, 369, 370, 1113], "press": [346, 369, 1113], "ok": 346, "caus": [346, 347, 353, 355, 360, 363, 383], "earlier": [346, 347], "might": [346, 347, 351, 355, 358, 366, 368, 369, 747, 768], "necessari": [346, 353, 357, 360, 363], "virtualis": 346, "detail": [346, 347, 348, 351, 354, 355, 356, 357, 358, 360, 364, 369, 370, 405, 411, 1055, 1056, 1057, 1059], "sudo": 346, "apt": 346, "ca": 346, "certif": 346, "curl": 346, "gnupg": 346, "lsb": 346, "mkdir": 346, "keyr": 346, "fssl": 346, "download": [346, 355], "gpg": 346, "dearmor": 346, "o": [346, 366, 747, 756], "echo": 346, "deb": 346, "arch": 346, "dpkg": 346, "architectur": [346, 371, 383], "lsb_releas": 346, "cs": 346, "tee": 346, "null": 346, "ce": 346, "cli": 346, "containerd": 346, "io": 346, "compos": [346, 360, 383], "plugin": 346, "systemctl": 346, "permiss": 346, "relat": [346, 347, 382, 461], "post": [346, 371, 1033, 1034, 1037, 1113, 1119], "It": [346, 347, 349, 350, 351, 352, 353, 357, 359, 360, 363, 366, 368, 369, 370, 394, 397, 461, 506, 511, 512, 515, 516, 519, 520, 523, 524, 527, 529, 532, 533, 536, 537, 541, 544, 549, 552, 553, 556, 557, 560, 561, 564, 565, 568, 569, 572, 573, 576, 577, 580, 581, 584, 598, 601, 602, 605, 606, 622, 625, 626, 629, 630, 633, 634, 637, 642, 645, 646, 649, 650, 653, 654, 657, 658, 661, 662, 665, 666, 669, 670, 673, 674, 677, 680, 683, 685, 688, 689, 692, 697, 700, 701, 704, 705, 708, 709, 712, 713, 716, 717, 720, 721, 724, 725, 728, 729, 733, 734, 747, 760, 762, 773, 935, 936, 939, 941, 944, 946, 949, 951, 952, 955, 965, 968, 969, 972, 973, 976, 977, 980, 985, 988, 991, 994, 995, 998, 999, 1002, 1038, 1040, 1041, 1050, 1051, 1060, 1061, 1064, 1066, 1069, 1104, 1105, 1108, 1109, 1112], "headach": 346, "arm": 346, "m1": 346, "instead": [346, 347, 348, 352, 353, 355, 356, 360, 363, 364, 366, 368, 369, 383], "featur": [346, 351, 364, 369, 1113], "vm": 346, "azur": 346, "cloud": [346, 382], "defin": [346, 348, 351, 352, 361, 364, 368, 370, 383, 511, 680, 683, 701, 704, 747, 800, 865, 869, 871, 878, 880, 911, 913, 1038, 1040, 1041, 1071, 1076, 1079, 1080, 1083, 1084, 1087], "dockerfil": [346, 349], "longer": [346, 361, 363], "worri": 346, "platform": 346, "agnost": [346, 359, 364, 366, 368, 371, 383, 1113], "usual": 346, "studio": 346, "favourit": 346, "extens": [346, 347, 352, 405, 416, 424, 433, 436, 511, 524, 529, 532, 549, 552, 569, 572, 573, 576, 581, 606, 689, 692, 705, 708, 721, 724, 725, 728, 734, 865, 872, 951, 965, 968, 969, 972, 985, 988, 1055, 1056, 1057, 1060, 1061, 1064, 1071, 1076, 1079, 1104, 1105, 1108], "theme": 346, "too": [346, 347, 383, 511, 524, 680, 683], "done": [346, 347, 353, 355, 369], "unsupport": [346, 361, 424, 445, 446], "slow": 346, "ipad": 346, "long": [346, 347, 353, 852, 862], "browser": 346, "cool": [346, 351], "requisit": 346, "head": [346, 360, 852, 863, 1113, 1134, 1145], "pane": [346, 347], "readi": [346, 348], "begin": [346, 1015, 1016, 1026], "outlin": [346, 347, 348, 350, 352, 355, 356, 360, 363, 368], "dropdown": 346, "tab": [346, 369, 1113], "master": [346, 347, 360], "vs": 346, "view": [346, 347, 405, 411, 852, 855, 859], "built": [346, 367, 405, 406, 461, 1134, 1145, 1146, 1147], "bottom": 346, "box": 346, "patient": 346, "upto": 346, "minut": 346, "launch": 346, "That": [346, 347, 368, 369, 370, 511, 701, 704], "refer": [346, 347, 355, 356, 361, 364, 383, 405, 410, 511, 602, 605, 650, 653, 821, 823, 824, 826, 865, 926, 928, 932, 934, 1071, 1092, 1095, 1100, 1103, 1104, 1105, 1108, 1109, 1112, 1134, 1144], "approach": [346, 347, 355, 356, 360, 368, 369, 383], "colour": 346, "applic": [346, 361, 362, 370, 852, 863, 864, 1015, 1021, 1027], "good": [346, 347, 348, 349, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 366, 370], "chanc": 346, "vscode": 346, "explor": [346, 367, 371, 382], "troubleshoot": 346, "sometim": [346, 347], "ever": [346, 347, 348, 349, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364], "64": [346, 369, 370, 511, 721, 724, 725, 728, 852, 858, 859, 865, 901, 903, 1071, 1072, 1075, 1099, 1113, 1134, 1145], "bit": [346, 353, 356, 360, 368, 424, 443, 444, 447, 511, 553, 556, 557, 560, 565, 568, 1071, 1088, 1091, 1096], "usr": 346, "more": [346, 347, 348, 350, 351, 353, 355, 356, 357, 358, 359, 360, 363, 364, 365, 366, 367, 368, 369, 370, 371, 382, 383, 405, 406, 424, 431, 511, 602, 605, 865, 887, 890, 951, 969, 972, 1055, 1056, 1057, 1059, 1113], "nutshel": [346, 364], "hook": 346, "lint": 346, "fix": [346, 347], "fail": [346, 348, 354, 355, 366, 368], "attempt": [346, 383], "succe": 346, "problemat": 346, "proce": [346, 347, 348, 349, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364], "modifi": [346, 347, 352, 356, 361, 362, 366], "properli": [346, 350], "enter": [346, 347, 359, 361, 362, 364, 461], "unsur": [346, 347, 348, 349, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364], "feel": [346, 347, 348, 349, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 1113], "server": [347, 1113], "context": [347, 353, 360, 361, 362, 461, 747, 798, 852, 863, 1134, 1145], "suitabl": [347, 351, 360], "quick": [347, 350, 370], "tendenc": 347, "land": 347, "end": [347, 360, 363, 365, 382, 383, 405, 406, 511, 541, 544, 1113, 1119], "world": 347, "come": [347, 348, 370, 381, 1113, 1119], "fly": 347, "hard": [347, 368], "receiv": [347, 355, 361, 362, 461, 470, 471, 747, 754, 797, 1134, 1144], "respons": [347, 349], "internship": 347, "comment": 347, "trigger": 347, "unansw": 347, "label": [347, 366, 367, 371, 935, 936, 939, 941, 944, 946, 949], "respond": 347, "someon": [347, 383], "els": [347, 348, 351, 356, 357, 363, 366, 368, 370, 371, 383, 747, 757, 768, 772, 1015, 1025], "strive": [347, 383], "repli": 347, "newli": [347, 363, 402, 403, 424, 430, 747, 758], "bug": [347, 355], "serv": [347, 355, 356, 359, 360, 364, 365, 1113], "suspect": 347, "behaviour": [347, 352, 355, 359, 360, 363, 364, 368], "observ": 347, "confid": 347, "wrong": 347, "someth": [347, 351, 369, 370, 383], "bet": 347, "act": [347, 353, 383], "placehold": [347, 359, 364, 1015, 1027], "mark": [347, 355], "ii": [347, 1071, 1072, 1075, 1099], "iii": 347, "titl": [347, 1113], "issue_numb": 347, "delet": [347, 349], "No": [347, 366], "progress": [347, 360, 367, 371], "pr": 347, "soon": [347, 360, 381, 383, 1113, 1119], "solut": [347, 355, 360, 865, 911, 913], "review": [347, 351], "merg": 347, "everi": [347, 348, 349, 353, 354, 355, 356, 357, 358, 360, 363, 364, 366, 368, 370, 405, 412, 413, 747, 748, 751], "dai": 347, "close": [347, 352, 511, 602, 605, 705, 708, 865, 914], "likewis": [347, 352, 356, 360, 361, 364, 369], "freed": 347, "purpos": [347, 349, 353, 355, 356, 358, 359, 360, 364, 365, 368, 511, 602, 605, 1113], "remain": [347, 353, 383, 511, 524, 680, 683, 701, 704, 951, 981, 984, 1015, 1021], "short": [347, 370, 852, 862], "basi": [347, 354, 369], "situat": [347, 371], "alloc": [347, 383, 405, 420, 421, 424, 430, 461], "upon": [347, 353, 355, 363, 383], "period": 347, "prevent": [347, 363, 368, 821, 823, 824, 826, 834, 836, 1071, 1096, 1150, 1151, 1152], "unabl": 347, "obvious": 347, "never": [347, 360], "reflect": [347, 359], "qualiti": 347, "hypothet": 347, "frustrat": 347, "delai": 347, "busi": 347, "fine": [347, 368, 371], "becaus": [347, 352, 355, 356, 357, 359, 361, 362, 363, 364, 366, 370, 371, 383], "inact": 347, "me": 347, "unfairli": 347, "definit": [347, 356, 361, 368, 865, 866, 868, 869, 871], "investig": 347, "Then": [347, 349, 368, 383], "practic": [347, 355], "separ": [347, 355, 359, 366, 368, 369], "branch": [347, 360, 383, 402, 403, 511, 541, 544], "role": [347, 367], "date": 347, "upstream": [347, 354], "complic": [347, 366], "root": [347, 349, 369, 511, 721, 724, 1038, 1039, 1043, 1044, 1046], "merge_with_upstream": 347, "sh": 347, "name_of_your_branch": 347, "resolv": [347, 1071, 1088, 1091, 1096], "push": [347, 354], "both": [347, 352, 353, 356, 360, 362, 363, 364, 366, 368, 369, 370, 371, 382, 383, 424, 433, 436, 451, 511, 524, 529, 532, 573, 576, 606, 689, 692, 697, 700, 721, 724, 725, 728, 734, 747, 775, 852, 855, 864, 865, 869, 871, 887, 890, 926, 928, 951, 985, 988, 1033, 1034, 1037, 1071, 1076, 1079, 1104, 1105, 1108], "abort": 347, "tediou": 347, "resolut": 347, "stash": 347, "reinstat": 347, "fetch": 347, "uncommit": 347, "unstag": 347, "untrack": 347, "comprehens": 347, "explan": [347, 352, 360, 364, 368], "atlassian": 347, "tutori": 347, "quit": [347, 348, 352, 356, 358, 359], "logic": [347, 358, 359, 361, 362, 368, 461, 497, 511, 662, 665, 666, 669, 670, 673, 1104, 1105, 1108, 1109, 1112, 1113], "blame": 347, "revis": 347, "author": [347, 1113], "eg": 347, "past": 347, "l": [347, 350, 865, 866, 868, 878, 880, 887, 890, 923, 925], "grep": 347, "v": [347, 366, 369, 370, 371, 852, 864, 1113, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1154, 1156, 1157], "commit_id": 347, "handi": 347, "histori": 347, "toggl": 347, "vertic": 347, "highlight": [347, 353], "previou": [347, 355, 364, 371, 383, 821, 824, 826, 834, 836], "inform": [347, 424, 444, 447, 747, 753, 821, 847], "whenev": [347, 368, 369], "tag": 347, "think": [347, 353], "interact": [347, 1113], "gain": [347, 365, 370, 1125], "yourself": [347, 348, 382], "simpler": [347, 368], "cannot": [347, 357, 361, 371], "least": [347, 353, 356, 359, 865, 887, 890], "final": [347, 352, 353, 356, 359, 361, 363, 366, 368, 369, 405, 414, 415, 747, 774, 1134, 1145], "tickbox": 347, "corner": 347, "span": 347, "intent": [347, 363], "larg": [347, 369, 511, 524, 680, 683], "discourag": 347, "philosophi": 347, "increment": [347, 747, 790], "frequent": [347, 348], "valuabl": 347, "infrequ": 347, "earli": [347, 1113], "wast": 347, "spot": [347, 356], "mistak": 347, "propos": 347, "mountain": 347, "advoc": [347, 383], "individu": [347, 348, 356], "per": [347, 369, 461, 852, 853, 854, 855, 856, 857, 858, 859, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141], "style": [347, 1050, 1053], "ve": [347, 365, 368, 1038, 1039, 1113], "actual": [347, 350, 356, 363, 365, 368, 370, 383], "aim": [347, 365], "part": [347, 351, 354, 355, 356, 366, 367, 371, 382, 383, 405, 420, 421, 821, 824, 826, 829, 831, 834, 836, 838, 840, 842, 844, 1146, 1147], "subsect": 347, "session": [347, 1113], "block": [347, 356, 365, 367, 371, 383, 461, 1113], "smaller": [347, 366, 371, 951, 952, 955, 985, 988, 1071, 1088, 1091, 1096], "edit": 347, "beauti": 347, "particularli": [347, 369, 383], "concern": [347, 350, 353, 360, 363, 365], "effici": [347, 355, 356, 360, 363, 364, 366, 369, 383], "difficult": [347, 355, 383, 1055, 1056, 1057, 1059], "undo": 347, "stress": 347, "frequenc": [347, 747, 774], "pycharm": 347, "pytest": [347, 355], "button": 347, "declar": 347, "insid": [347, 349, 351, 361], "exec": 347, "rm": 347, "rf": 347, "cp": 347, "ivy_contain": 347, "bash": [347, 349], "test_ivi": [347, 355], "test_funct": 347, "test_cor": 347, "test_imag": 347, "test_random_crop": 347, "header": 347, "q": [347, 383, 852, 864, 865, 878, 880, 907, 909], "array_api_test": 347, "test_creation_funct": 347, "test_arang": 347, "window": [347, 349, 852, 853, 854, 855, 856, 857, 858, 859, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141], "variou": [347, 352, 358, 364, 382], "wherebi": [348, 360, 1015, 1027], "broad": 348, "todo": [348, 355], "commit": [348, 355], "NOT": [348, 511, 666, 669], "resourc": 348, "hypothesi": 348, "cover": [348, 352, 353, 356, 358, 365], "lambda": [348, 366, 369, 1150, 1153, 1155], "direct": [348, 370, 371, 382, 1060, 1066, 1069], "bind": [348, 360], "aforement": 348, "categori": [348, 351, 359, 360, 361, 365, 1113], "parent": [348, 368], "hint": [348, 351, 352, 356, 359, 363, 364, 405, 416, 424, 433, 436, 511, 524, 529, 532, 549, 552, 569, 572, 573, 576, 581, 606, 689, 692, 705, 708, 721, 724, 725, 728, 734, 747, 775, 852, 855, 864, 865, 872, 951, 965, 968, 969, 972, 985, 988, 1033, 1034, 1037, 1055, 1056, 1057, 1060, 1061, 1064, 1071, 1076, 1079, 1104, 1105, 1108], "its": [348, 349, 352, 424, 431, 461, 505, 865, 887, 890, 951, 965, 968, 981, 984, 985, 988, 999, 1002], "thorough": [348, 352, 355, 364], "transpil": [348, 365, 367, 1113, 1119], "builder": [349, 381, 383, 1113], "maco": 349, "ubuntu": 349, "uid": 349, "make_docs_without_dock": 349, "rel": [349, 821, 824, 826, 829, 831, 834, 836, 838, 840, 842, 844, 865, 875, 877, 886, 895, 897, 904, 906, 923, 925, 951, 969, 972, 985, 988, 1060, 1061, 1064, 1066, 1069, 1113], "synchron": 349, "rest": [349, 367, 371], "remove_doc": 349, "_": [349, 352, 360, 363, 368, 369, 424, 433, 436, 511, 529, 532, 569, 572, 573, 576, 581, 606, 689, 692, 721, 724, 725, 728, 821, 823, 824, 826, 865, 932, 934, 951, 965, 968, 985, 988, 1055, 1056, 1057, 1060, 1061, 1064, 1071, 1076, 1079], "privat": [349, 1150, 1154], "fulfil": [349, 365, 1113], "autogenerated_sourc": 349, "png": [349, 369], "_imag": 349, "lastli": 349, "rst": 349, "partial_sourc": 349, "conf": 349, "create_rst_fil": 349, "filter": [349, 852, 853, 854, 855, 856, 857, 858, 859, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141], "repres": [349, 368, 405, 416, 424, 443, 511, 519, 520, 523, 524, 533, 536, 540, 545, 548, 580, 581, 584, 680, 683, 717, 720, 738, 742, 852, 861, 865, 874, 910, 911, 913], "overal": [349, 352, 360, 361, 362, 371], "markup": 349, "extract": [349, 351], "get_functions_and_class": 349, "doctr": 349, "readm": [349, 383], "module_nam": 349, "copy_readme_to_rst": 349, "tabl": 349, "toc": 349, "tree": 349, "append_toctree_to_rst": 349, "create_index_rst": 349, "\u03c0": [349, 511, 516, 529, 532, 537, 541, 544], "namespac": [349, 351, 361, 366, 371], "who": [350, 365, 383], "mainli": [350, 367, 369], "under": [350, 352, 353, 354, 355, 356, 360, 365, 366, 369, 371], "hood": [350, 353, 355, 356, 360, 365, 366, 369, 371], "weed": [350, 365], "behind": [350, 365, 367, 821, 824, 826, 829, 831, 834, 836, 838, 840, 842, 844], "navig": 350, "tour": 350, "primari": [350, 355, 357, 363, 383], "composit": [350, 355, 357, 359, 360, 363, 366, 370, 371, 383], "nestabl": [350, 352, 353, 355, 363, 424, 433, 436, 511, 524, 529, 532, 573, 576, 606, 689, 692, 721, 724, 725, 728, 734, 747, 775, 852, 855, 864, 951, 985, 988, 1033, 1034, 1037, 1071, 1076, 1079, 1104, 1105, 1108], "dynam": [350, 361, 362, 363, 366, 402, 403], "runtim": [350, 355, 461], "h": [350, 360, 852, 855, 856, 857, 858, 859], "j": [350, 747, 755, 756, 865, 923, 925, 1071, 1072, 1075, 1099], "k": [350, 366, 405, 410, 420, 421, 747, 755, 852, 864, 865, 887, 890, 907, 909, 911, 913, 914, 916, 917, 919, 923, 925, 1038, 1043, 1044, 1046, 1050, 1053], "borrow": 350, "n": [350, 405, 416, 420, 421, 747, 756, 852, 860, 865, 875, 877, 886, 887, 890, 894, 895, 897, 898, 900, 901, 903, 904, 906, 907, 909, 914, 916, 917, 919, 923, 925, 926, 928, 929, 931, 932, 934, 951, 961, 964, 965, 968, 973, 976, 995, 998, 1007, 1010, 1038, 1043, 1044, 1046, 1050, 1053, 1071, 1080, 1083, 1092, 1095, 1096, 1100, 1103, 1104, 1105, 1108, 1109, 1112], "taken": [351, 371, 865, 875, 877], "constant": [351, 356, 370, 371, 383, 461, 470, 471, 951, 961, 964, 1015, 1021, 1033, 1034, 1037, 1125, 1126, 1130, 1133, 1146, 1147, 1148, 1149], "compil": [351, 360, 365, 367, 383, 1113, 1146, 1147, 1150, 1151, 1152, 1153, 1154, 1155], "meta": [351, 359, 1012, 1013, 1014], "overlap": 351, "sever": [351, 383, 865, 884], "judgement": 351, "locat": [351, 355, 357, 362, 1038, 1039], "some_namespac": 351, "some_backend": 351, "another_backend": 351, "break": [351, 364, 368, 383, 1113], "anyth": [351, 1113], "refactor": 351, "ongo": 351, "subfold": [351, 355], "via": [351, 360, 361, 362, 363, 366, 368, 369, 382, 1015, 1016, 1025, 1026], "file_nam": 351, "my_func": [351, 353], "int": [351, 353, 356, 360, 361, 362, 363, 364, 371, 394, 399, 402, 403, 405, 408, 410, 412, 413, 414, 415, 418, 420, 421, 422, 424, 432, 441, 443, 444, 447, 450, 461, 483, 486, 487, 488, 489, 497, 498, 499, 505, 506, 511, 549, 552, 553, 556, 557, 560, 561, 564, 565, 568, 569, 572, 747, 753, 765, 766, 769, 770, 771, 774, 775, 784, 800, 803, 804, 809, 810, 819, 821, 823, 824, 826, 834, 836, 852, 853, 855, 857, 858, 859, 865, 869, 871, 875, 877, 920, 922, 923, 925, 926, 928, 929, 931, 935, 941, 944, 946, 949, 951, 957, 960, 961, 964, 965, 968, 969, 972, 973, 976, 977, 980, 985, 988, 990, 991, 994, 995, 998, 999, 1002, 1003, 1006, 1007, 1010, 1011, 1012, 1013, 1014, 1015, 1027, 1033, 1034, 1037, 1038, 1039, 1040, 1041, 1043, 1044, 1046, 1048, 1050, 1051, 1052, 1060, 1061, 1064, 1066, 1069, 1071, 1076, 1079, 1080, 1083, 1084, 1087, 1092, 1095, 1096, 1100, 1103, 1104, 1105, 1108, 1109, 1112], "nativedtyp": [351, 361, 362, 364, 405, 406, 407, 408, 409, 410, 412, 413, 417, 418, 419, 422, 423, 424, 429, 430, 440, 441, 442, 451, 1071, 1096], "nativedevic": [351, 361, 362, 364, 405, 406, 407, 408, 409, 410, 412, 413, 414, 415, 417, 418, 419, 422, 423, 461, 478, 479, 480, 494, 500, 502, 504, 506, 507, 510, 747, 800, 1038, 1039, 1040, 1041, 1043, 1044, 1046], "my": 351, "numer": [351, 370, 405, 416, 424, 430, 511, 512, 515, 524, 573, 576, 585, 588, 602, 605, 606, 609, 610, 613, 622, 625, 626, 629, 630, 633, 634, 637, 666, 669, 670, 673, 680, 683, 685, 688, 689, 692, 697, 700, 701, 704, 709, 712, 725, 728, 729, 733, 743, 746, 747, 782, 783, 805, 806, 811, 812, 865, 869, 871, 887, 890, 901, 903, 914, 920, 922, 923, 925, 926, 928, 1038, 1049, 1050, 1051, 1052, 1071, 1076, 1079, 1088, 1091, 1096, 1125], "cooler": 351, "produc": [351, 461, 470, 471, 852, 864], "something_cool": 351, "category_nam": [352, 356, 361, 362, 364], "contrast": [352, 364], "backend_nam": [352, 356, 357, 358, 361, 362, 364], "account": 352, "instanti": 352, "firstli": [352, 353, 356, 359, 361, 363, 369], "templat": [352, 1113], "spec": [352, 353], "api_specif": [352, 424, 433, 436, 511, 529, 532, 569, 572, 573, 576, 581, 606, 689, 692, 721, 724, 725, 728, 951, 965, 968, 985, 988, 1055, 1056, 1057, 1060, 1061, 1064, 1071, 1076, 1079], "array_api": 352, "preview": 352, "render": 352, "incorrectli": 352, "onlin": [352, 1113], "approxim": [352, 394, 395, 511, 516, 519, 520, 523, 529, 532, 533, 536, 537, 541, 544, 577, 580, 581, 584, 598, 602, 605, 642, 645, 646, 649, 650, 653, 654, 657, 697, 700, 713, 716, 717, 720, 734, 865, 886, 895, 897, 904, 906], "tangent": [352, 394, 401, 511, 537, 540, 541, 544, 545, 548, 734, 738, 739, 742], "domain": [352, 511, 516, 519, 520, 523, 529, 532, 533, 536, 537, 541, 544, 577, 580, 581, 584, 598, 602, 605, 642, 645, 646, 649, 654, 657, 713, 716, 717, 720, 721, 724, 734], "infin": [352, 404, 424, 430, 511, 512, 515, 519, 520, 523, 524, 527, 533, 536, 537, 541, 544, 573, 576, 577, 580, 581, 584, 588, 598, 601, 602, 605, 606, 609, 610, 613, 622, 625, 626, 629, 642, 645, 646, 649, 654, 657, 658, 661, 680, 683, 697, 700, 701, 704, 705, 708, 713, 716, 717, 720, 721, 724, 734, 743, 746, 865, 929, 931, 1071, 1076, 1079, 1084, 1087, 1104, 1105, 1108, 1109, 1112], "codomain": [352, 511, 516, 519, 520, 523, 529, 532, 533, 536, 537, 541, 544, 577, 580, 581, 584, 598, 602, 605, 642, 645, 646, 649, 654, 657, 713, 716, 717, 720, 721, 724, 734], "x_i": [352, 511, 512, 515, 516, 519, 520, 523, 529, 532, 533, 536, 537, 553, 556, 573, 576, 577, 580, 581, 584, 598, 602, 605, 606, 622, 625, 626, 629, 630, 633, 642, 645, 646, 649, 654, 657, 666, 669, 685, 688, 705, 708, 709, 712, 713, 716, 717, 720, 721, 724, 725, 728, 734, 743, 746, 1055, 1056, 1057, 1059, 1071, 1076, 1079, 1080, 1083, 1084, 1087, 1092, 1095, 1096, 1100, 1103], "assum": [352, 357, 361, 368, 369, 383, 405, 416, 424, 433, 436, 511, 524, 529, 532, 549, 552, 569, 572, 573, 576, 577, 581, 606, 689, 692, 705, 708, 713, 716, 721, 724, 725, 728, 734, 747, 775, 852, 855, 864, 865, 872, 951, 965, 968, 969, 972, 985, 988, 1033, 1034, 1037, 1055, 1056, 1057, 1060, 1061, 1064, 1071, 1076, 1079, 1104, 1105, 1108], "express": [352, 366, 371, 511, 516, 529, 532, 537, 541, 544, 577, 713, 716, 734], "radian": [352, 511, 516, 529, 532, 537, 541, 544, 577, 713, 716, 734], "float": [352, 356, 360, 361, 363, 364, 368, 370, 394, 396, 404, 405, 406, 408, 410, 412, 413, 414, 415, 418, 422, 424, 430, 440, 444, 449, 452, 461, 494, 500, 504, 507, 510, 511, 512, 515, 516, 519, 520, 523, 524, 527, 529, 532, 533, 536, 537, 540, 541, 544, 545, 548, 569, 572, 573, 576, 577, 580, 581, 584, 585, 588, 590, 593, 598, 601, 602, 605, 606, 609, 610, 613, 614, 617, 618, 621, 634, 637, 638, 641, 642, 645, 646, 649, 654, 657, 658, 661, 680, 683, 685, 688, 689, 692, 693, 696, 697, 700, 701, 704, 705, 708, 713, 716, 717, 720, 721, 724, 729, 733, 734, 738, 742, 743, 746, 747, 759, 760, 762, 774, 782, 783, 805, 806, 811, 812, 821, 823, 824, 826, 829, 831, 834, 836, 838, 840, 842, 844, 852, 855, 859, 864, 865, 866, 868, 872, 878, 880, 881, 883, 884, 886, 895, 897, 904, 906, 907, 909, 911, 913, 914, 929, 931, 935, 936, 939, 941, 944, 946, 949, 1011, 1012, 1013, 1014, 1033, 1034, 1037, 1038, 1043, 1044, 1046, 1055, 1056, 1057, 1059, 1071, 1076, 1079, 1080, 1083, 1084, 1087, 1088, 1091, 1092, 1095, 1096, 1100, 1103], "operand": [352, 511, 516, 519, 520, 523, 524, 527, 529, 532, 533, 536, 537, 541, 544, 569, 572, 573, 576, 577, 580, 581, 584, 598, 601, 602, 605, 606, 642, 645, 646, 649, 654, 657, 658, 661, 680, 683, 697, 700, 701, 704, 705, 708, 713, 716, 717, 720, 721, 724, 734, 743, 746, 1071, 1072, 1075, 1076, 1079, 1084, 1087, 1096, 1099], "whose": [352, 405, 420, 421, 511, 519, 520, 523, 533, 536, 540, 545, 548, 577, 580, 581, 584, 697, 700, 713, 716, 717, 720, 734, 738, 742, 747, 758, 865, 866, 868, 872, 875, 877, 878, 880, 881, 883, 884, 886, 895, 897, 898, 900, 901, 903, 904, 906, 907, 909, 911, 913, 914, 916, 917, 919, 923, 925, 951, 969, 972, 985, 988, 1055, 1056, 1057, 1071, 1072, 1075, 1099], "ref": [352, 511, 565, 568, 634, 637, 680, 683, 689, 692, 701, 704, 729, 733, 951, 995, 998], "promot": [352, 356, 361, 424, 430, 433, 436, 451, 452, 456, 511, 516, 519, 520, 523, 524, 527, 529, 532, 533, 536, 537, 540, 545, 548, 549, 552, 557, 560, 561, 564, 565, 568, 569, 572, 577, 580, 581, 584, 585, 598, 601, 602, 605, 642, 645, 646, 649, 654, 657, 658, 661, 674, 677, 680, 683, 697, 700, 701, 704, 713, 716, 717, 720, 721, 724, 734, 738, 742, 865, 866, 868, 869, 871, 884, 886, 887, 890, 895, 897, 901, 903, 904, 906, 911, 913, 926, 928, 929, 931, 951, 995, 998, 1071, 1080, 1083], "But": [352, 360, 371], "needless": 352, "info": [352, 1113], "subset": [352, 355, 364, 366], "extend": [352, 355, 357, 364], "renam": 352, "conform": [352, 405, 416, 424, 433, 436, 511, 524, 529, 532, 549, 552, 569, 572, 573, 576, 581, 602, 605, 606, 689, 692, 705, 708, 721, 724, 725, 728, 734, 865, 872, 951, 965, 968, 969, 972, 985, 988, 1055, 1056, 1057, 1060, 1061, 1064, 1071, 1076, 1079, 1104, 1105, 1108], "org": [352, 424, 433, 436, 511, 529, 532, 569, 572, 573, 576, 581, 606, 689, 692, 721, 724, 725, 728, 821, 823, 824, 826, 951, 965, 968, 985, 988, 1055, 1056, 1057, 1060, 1061, 1064, 1071, 1076, 1079], "elementwise_funct": [352, 511, 529, 532, 569, 572, 573, 576, 581, 606, 689, 692, 721, 724, 725, 728, 951, 985, 988, 1055, 1056, 1057, 1060, 1061, 1064, 1071, 1076, 1079], "descript": [352, 360, 405, 416, 424, 433, 436, 511, 524, 529, 532, 549, 552, 569, 572, 573, 576, 581, 606, 689, 692, 705, 708, 721, 724, 725, 728, 734, 747, 775, 852, 855, 864, 865, 872, 929, 931, 951, 965, 968, 969, 972, 985, 988, 1033, 1034, 1037, 1055, 1056, 1057, 1060, 1061, 1064, 1071, 1076, 1079, 1104, 1105, 1108], "simplic": [352, 370, 382, 405, 416, 424, 433, 436, 511, 524, 529, 532, 549, 552, 569, 572, 573, 576, 581, 606, 689, 692, 705, 708, 721, 724, 725, 728, 734, 747, 775, 852, 855, 864, 865, 872, 951, 965, 968, 969, 972, 985, 988, 1033, 1034, 1037, 1055, 1056, 1057, 1060, 1061, 1064, 1071, 1076, 1079], "judgment": 352, "beyond": [352, 951, 985, 988], "text": 352, "func_nam": [352, 353, 356], "pure": [352, 368, 371, 383], "themselv": [352, 356, 360, 361, 362, 370, 1015, 1016], "operator_nam": 352, "succinct": 352, "contstructor": 352, "though": [352, 356, 361, 369, 383], "forward": [352, 371, 382, 383, 1146, 1147, 1150, 1154], "_forward": [352, 366, 369, 370, 1113], "former": 352, "trainabl": [352, 367, 369, 370, 821, 833, 1123, 1124, 1146, 1147, 1156], "explicitli": [352, 356, 357, 359, 360, 363, 366, 383, 865, 878, 880, 1134, 1143, 1145, 1146, 1147], "latter": [352, 357], "implicit": [352, 360, 366], "docst": 352, "eight": 353, "static_": 353, "op_nam": 353, "__r": 353, "four": [353, 356, 361, 364, 369], "__sub__": [353, 359, 360, 364, 368], "__mul__": [353, 359, 360, 364, 368], "__truediv__": [353, 359, 360], "respect": [353, 359, 360, 361, 364, 405, 416, 511, 512, 515, 524, 527, 541, 544, 549, 552, 557, 560, 561, 564, 565, 568, 569, 572, 585, 588, 590, 593, 601, 609, 610, 613, 614, 617, 618, 621, 634, 637, 638, 641, 658, 661, 662, 665, 670, 673, 674, 677, 680, 683, 689, 692, 701, 704, 729, 733, 821, 823, 824, 826, 828, 829, 831, 834, 836, 838, 840, 842, 844, 865, 907, 909, 1011, 1012, 1013, 1014], "recap": [353, 360, 370], "independ": [353, 354, 358, 360, 366, 371, 865, 869, 871, 911, 913, 1038, 1039], "combinatorili": 353, "variat": [353, 355], "grid": [353, 355, 382, 405, 416], "vari": [353, 355, 360, 368, 1055, 1056, 1057, 1059], "simplest": 353, "small": [353, 356, 366, 370, 383, 511, 680, 683, 865, 886, 895, 897, 904, 906, 1033, 1034, 1037, 1148, 1149], "unus": [353, 363, 402, 403], "18": [353, 360, 511, 569, 572, 865, 875, 877, 901, 903, 1071, 1072, 1075, 1099], "excess": [353, 357, 368], "showcas": [353, 382], "demonstr": [353, 368], "replic": [353, 361], "meant": 353, "imaginari": 353, "some_flag": 353, "another_flag": 353, "54": [353, 511, 577, 581, 721, 724, 852, 864, 865, 901, 903, 1038, 1043, 1071, 1072, 1075, 1099], "jointli": 353, "three": [353, 360, 365, 405, 416, 1113], "x0": [353, 747, 755], "procedur": 353, "sens": [353, 360, 368], "5574077": 353, "1850398": 353, "5463025": 353, "8422884": 353, "91601413": 353, "9647598": 353, "3738229": 353, "1597457": 353, "0963247": 353, "9955841": 353, "3278579": 353, "multi": [353, 360, 365, 383, 852, 863, 865, 869, 871, 1113, 1119, 1134, 1145], "seper": [353, 747, 774], "pars": [353, 383], "satisfi": [353, 865, 932, 934], "far": [353, 362, 367, 368, 1015, 1016, 1026], "asid": [353, 382], "irrelev": [353, 361], "increasingli": 353, "complex": [353, 369, 370, 371, 383, 865, 878, 880, 914], "rule": [353, 355, 356, 359, 360, 361, 424, 430, 433, 436, 452, 511, 540, 545, 548, 565, 568, 585, 680, 683, 701, 704, 738, 742, 865, 866, 868, 869, 871, 901, 903, 911, 913], "count": [353, 369, 461, 499, 865, 926, 928, 951, 969, 972, 1055, 1056, 1057, 1104, 1105, 1108, 1109, 1112], "14254655": 353, "1578213": 353, "380515": 353, "17": [353, 360, 394, 396, 865, 875, 877, 1038, 1043], "trivial": 353, "By": [353, 356, 360, 363, 370, 371, 747, 765, 766, 865, 926, 928, 951, 977, 980, 1071, 1076, 1079, 1080, 1083, 1084, 1087, 1088, 1091, 1092, 1095, 1096, 1100, 1103, 1104, 1105, 1108, 1109, 1112], "non": [353, 360, 361, 366, 402, 403, 424, 430, 448, 511, 666, 669, 670, 673, 852, 855, 865, 872, 895, 897, 914, 920, 922, 926, 928, 929, 931, 1050, 1051, 1052, 1053, 1071, 1076, 1079, 1080, 1083, 1084, 1087, 1088, 1091, 1100, 1103, 1104, 1105, 1108, 1109, 1112, 1146, 1147, 1150, 1154], "dictat": [353, 359, 363, 364], "exlud": 353, "unit": [354, 355, 383, 394, 395, 396, 397, 461], "thoroughli": [354, 355], "ci": [354, 355, 383], "failur": 354, "On": [355, 367, 371], "fixtur": 355, "consum": [355, 360, 364, 461], "300": [355, 511, 705, 708], "hit": [355, 366], "permit": [355, 359, 364], "action": 355, "eleg": 355, "intellig": 355, "sampl": [355, 852, 860, 1038, 1039, 1043, 1044, 1046, 1071, 1092, 1095, 1100, 1103, 1134, 1142], "rang": [355, 369, 370, 371, 405, 406, 414, 415, 1055, 1056, 1071, 1088, 1091, 1096, 1113], "cach": [355, 356, 461, 479, 747, 758], "unexplor": 355, "known": 355, "repeatedli": [355, 360, 1015, 1024], "upload": 355, "artifact": 355, "parametr": 355, "strategi": 355, "statement": [355, 383], "plai": [355, 371], "helper": [355, 369], "verifi": [355, 361, 362, 368, 1113, 1119], "truth": [355, 511, 590, 593, 614, 617, 618, 621, 634, 637, 638, 641, 689, 692], "opt": [355, 357, 363, 368], "defer": [355, 356, 359, 360, 361, 362, 363], "suffic": [355, 358], "catch": [355, 747, 768], "systemat": 355, "safeguard": 355, "inabl": 355, "fact": [355, 369], "categor": [356, 362], "mutual": [356, 360], "constitut": [356, 366, 1071, 1092, 1095, 1100, 1103], "venn": 356, "diagram": 356, "light": [356, 383], "wherea": [356, 359, 361, 362, 364, 371], "hand": [356, 383], "log_pr": [356, 360, 363], "array_arg": 356, "typic": 356, "whatsoev": [356, 360], "commonli": [356, 1071, 1092, 1095, 1100, 1103], "outsid": [356, 362, 366, 368, 371, 951, 952, 955, 995, 998], "denomin": [356, 383, 747, 773, 783, 806, 811, 812, 1033, 1034, 1037, 1148, 1149], "divis": [356, 511, 565, 568, 585, 588, 609, 610, 613, 701, 704, 747, 773, 783, 806, 811, 812, 821, 823, 824, 826, 834, 836, 1150, 1151, 1152], "piec": [356, 358, 359, 366], "deal": [356, 383], "concurr": [356, 360], "weight": [356, 360, 370, 371, 821, 823, 824, 826, 829, 831, 834, 836, 838, 840, 842, 844, 852, 861, 862, 864, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1143, 1144, 1146, 1147, 1150, 1152, 1153], "modif": 356, "decor": [356, 358, 360, 361, 362, 363], "group": [356, 360], "briefli": [356, 369], "cast": [356, 361, 424, 430, 433, 436, 951, 957, 960, 1071, 1088, 1091, 1096, 1113], "get_all_arrays_on_dev": 356, "nested_map": [356, 1015], "index_nest": [356, 1015], "implicit_backend": 357, "unless": [357, 362, 363, 383, 511, 680, 683, 747, 800], "__dict__": [357, 366, 368], "ivy_original_dict": [357, 366], "unmodifi": [357, 361], "moment": [357, 383, 821, 823, 824, 826, 834, 836, 1150, 1151, 1152], "fallback": 357, "freedom": [357, 1071, 1092, 1095, 1100, 1103], "recommend": [357, 511, 666, 669, 670, 673, 701, 704, 1071, 1080, 1083], "achiev": [358, 369, 371], "wrapper": [358, 359, 360, 361, 363, 364, 368], "topic": [358, 368], "tf": [359, 361, 362, 363, 364, 366, 371, 383, 1113], "_data": [359, 368], "organiz": [359, 360], "inherit": [359, 360, 368], "bear": [359, 360, 361], "mind": [359, 360], "necessarili": [359, 360], "although": [359, 360], "underpin": [359, 360, 366], "programmat": [359, 360], "backup": [359, 360], "accident": [359, 360], "readabl": [359, 360, 364, 368, 369], "absent": [359, 360], "perk": [359, 360], "auto": [359, 360, 369], "throw": [359, 368], "imposs": 359, "coupl": [359, 360, 368, 370], "anywai": 359, "secondli": [359, 361], "easier": 359, "five": [360, 369], "decis": [360, 366, 368], "displai": [360, 369], "arbitrarili": [360, 369], "__repr__": 360, "control": [360, 361, 363, 368, 369, 382], "__getattr__": 360, "underli": [360, 511, 549, 552, 561, 564, 569, 572, 674, 677], "__setattr__": 360, "__contains__": 360, "__getstate__": 360, "__setstate__": 360, "unpickl": 360, "expand": [360, 747, 774, 951, 965, 968], "children": 360, "shallowest": 360, "deepest": 360, "67": [360, 511, 569, 572, 581], "22": [360, 511, 569, 572, 865, 875, 877, 901, 903, 1050, 1054, 1071, 1072, 1075, 1099], "25": [360, 511, 721, 724, 725, 728, 865, 875, 877, 884, 935, 941, 944, 1033, 1034, 1037, 1071, 1072, 1075, 1099], "retain_grad": [360, 821, 828], "dy": [360, 821, 828], "dx": [360, 821, 828], "technic": [360, 363, 364, 383], "autograd": [360, 383], "grad": [360, 369, 370, 371, 1113, 1150, 1154], "redund": 360, "num_head": [360, 852, 863, 1134, 1145], "mask": [360, 852, 863, 864], "to_q_fn": [360, 852, 863], "to_kv_fn": [360, 852, 863], "to_out_fn": [360, 363, 852, 863], "to_q_v": [360, 852, 863], "to_kv_v": [360, 852, 863], "to_out_v": [360, 852, 863], "measur": [360, 852, 863, 1134, 1145], "dot": [360, 852, 863, 864, 865, 920, 922, 926, 928, 1134, 1145], "product": [360, 511, 680, 683, 747, 765, 852, 863, 864, 865, 869, 871, 887, 890, 901, 903, 920, 922, 926, 928, 1071, 1072, 1075, 1088, 1091, 1099, 1134, 1145], "implicitli": 360, "intuit": [360, 369, 370], "debug": [360, 369], "chronolog": 360, "had": [360, 363], "sequenti": [360, 370], "flow": [360, 382], "implic": 360, "slightli": [360, 366, 370], "eager": [360, 383], "int8": [361, 424, 445], "int16": [361, 424, 433, 436, 445, 1071, 1088, 1091, 1096], "uint8": [361, 424, 433, 436, 445], "uint16": [361, 424, 446, 1071, 1088, 1091, 1096], "uint32": [361, 424, 446, 1071, 1088, 1091, 1096], "uint64": [361, 424, 446, 1071, 1088, 1091, 1096], "bfloat16": [361, 424, 445], "float16": [361, 424, 446], "all_dtyp": 361, "all_numeric_dtyp": 361, "all_int_dtyp": 361, "all_float_dtyp": 361, "fall": [361, 365, 1113, 1146, 1147, 1150, 1154], "valid": [361, 366, 424, 438, 852, 853, 854, 855, 856, 857, 858, 859, 951, 995, 998, 1104, 1105, 1108, 1109, 1112, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141], "invalid": [361, 865, 926, 928, 1104, 1105, 1108, 1109, 1112], "thirdli": 361, "native_float32": 361, "importantli": [361, 368, 371, 382], "varieti": [361, 362], "conveni": [361, 362, 364, 367, 369, 370], "arguabl": [361, 362], "compound": 361, "overflow": [361, 511, 524, 1071, 1096], "arr": [361, 362, 1033, 1034, 1037], "scalar": [361, 366, 371, 383, 405, 413, 747, 800, 817, 820, 865, 929, 931], "settabl": [361, 362], "jnp": [361, 362, 363, 364, 371, 1113], "jaxarrai": [361, 362, 363, 364], "mx": [361, 362, 363, 1113], "nd": [361, 362, 363, 366, 371, 1113], "deleg": 361, "fill_valu": [361, 405, 412, 413, 511, 593, 617, 618, 621], "as_n": [361, 424, 439, 440, 441, 442, 461, 480, 481, 502], "idx": [362, 368, 747, 753], "tpu": [362, 461, 483, 508], "aliv": [362, 461, 495, 499, 501, 747, 781, 799, 801], "amount": [362, 461, 507, 935, 936, 939, 941, 944, 946, 949], "memori": [362, 363, 381, 383, 461, 479, 500, 505, 507, 510, 852, 862, 1113], "dual": 362, "thrown": [362, 383, 747, 791], "rare": [362, 383], "program": 363, "strictli": 363, "ration": 363, "speak": 363, "subtli": 363, "ensure_in_backend": [363, 747, 791], "x_nativ": 363, "val_n": 363, "is_ivy_arrai": [363, 368, 747], "is_vari": [363, 821], "assign": [363, 368], "elif": 363, "irrespect": [363, 368, 424, 430], "inclus": [363, 405, 406, 1038, 1040, 1041], "omit": [363, 364, 1055, 1056, 1057, 1059], "unspecifi": [363, 511, 697, 700, 701, 704, 865, 878, 880, 951, 995, 998], "predominantli": [363, 382], "math": [363, 371, 1113], "presenc": 363, "altern": [363, 369], "_wrap_fn": 363, "maxim": [363, 366], "inner": [363, 368, 865, 878, 880, 887, 890, 1011, 1012, 1013, 1014], "third": [363, 383, 865, 914, 1055, 1056], "addition": [363, 364], "leverag": 363, "equival": [363, 369, 371, 405, 406, 511, 565, 568, 666, 669, 670, 673, 701, 704, 865, 886, 895, 897, 904, 906, 911, 913, 929, 931], "input_arrai": 363, "adress": 364, "revisit": [364, 371], "dedic": [364, 368, 370, 821, 850, 1123, 1124], "__div__": 364, "dicat": 364, "futher": 364, "absenc": 364, "pep": 364, "484": 364, "annot": 364, "brittl": 364, "intend": [364, 1071, 1096], "freeli": 364, "inde": [364, 383], "flexibl": 364, "original_typ": 364, "cumbersom": 364, "sound": 365, "higher": [365, 366, 371, 383, 821, 824, 826, 829, 831, 834, 836, 838, 840, 842, 844], "overview": [365, 382], "handler": [365, 367, 371, 1113], "fledg": [366, 367], "syntact": [366, 371], "clip_by_valu": [366, 371], "clamp": [366, 371], "behavior": [366, 383, 511, 697, 700, 701, 704, 1055, 1056, 1057, 1059], "fit": [366, 951, 977, 980], "construct": [366, 367, 370, 371, 951, 1003, 1006, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1143, 1144, 1145, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157], "num": [366, 405, 414, 415], "power_seq": 366, "okai": 366, "bound": 366, "resid": [366, 370], "edg": [366, 371, 951, 952, 955, 961, 964, 1007, 1010, 1113], "larger": [366, 371, 424, 444, 951, 952, 955, 985, 988, 1071, 1092, 1095, 1100, 1103], "ml_framework": [366, 371, 405, 406], "current_framework": [366, 371], "furthermor": 366, "concaten": [366, 369, 461, 490, 747, 774, 951, 957, 960, 1113], "framework_handl": 366, "face": 366, "verbos": [366, 1113, 1160], "cprint": [366, 1159], "framework_stack": 366, "_determine_framework_from_arg": 366, "valueerror": [366, 951, 991, 994], "get_framework": 366, "neither": [366, 511, 524, 680, 683], "illustr": [366, 382], "un": [366, 424, 448], "nn": [366, 371, 405, 416, 1113], "init_h": [366, 852, 862], "init_c": [366, 852, 862], "kernel": [366, 383, 852, 862], "recurrent_kernel": [366, 852, 862], "bia": [366, 370, 852, 861, 862, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1144], "recurrent_bia": [366, 852, 862], "x_shape": 366, "batch_shap": [366, 368, 371, 747, 800, 852, 862, 863, 864, 865, 932, 934, 1038, 1039, 1134, 1143], "timestep": [366, 852, 862, 1134, 1143], "input_channel": [366, 370, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1143, 1144], "x_flat": 366, "wi": 366, "wi_x": 366, "wii_x": 366, "wif_x": 366, "wig_x": 366, "wio_x": 366, "recurr": [366, 852, 862], "wh": 366, "lstm": [366, 852, 862, 1134], "ht": 366, "ct": 366, "hts_list": 366, "unrol": [366, 369, 852, 862], "wii_xt": 366, "wif_xt": 366, "wig_xt": 366, "wio_xt": 366, "zip": 366, "htm1": 366, "ctm1": 366, "wh_htm1": 366, "whi_htm1": 366, "whf_htm1": 366, "whg_htm1": 366, "who_htm1": 366, "ft": 366, "gt": 366, "ot": 366, "offici": 366, "reliabl": 366, "sacrific": 366, "hear": 366, "virtu": 366, "pure_ivi": 366, "reduce_mean": [366, 369, 370, 371, 1113], "reduce_sum": [366, 1113], "reduce_var": 366, "compile_graph": [366, 371], "pure_torch": 366, "cat": [366, 371], "backbon": [366, 369], "_layer": 366, "super": [366, 369, 370, 371], "clean": [366, 367, 369], "random_unifrom": 366, "unclean": 366, "wx": 366, "temp": 366, "torchscript": 366, "fn": [366, 368, 384, 385, 386, 387, 388, 389, 390, 391, 392, 424, 445, 446, 461, 470, 471, 747, 753, 818, 1015, 1016, 1021, 1022, 1023, 1025, 1026, 1027, 1116, 1118], "example_input": [366, 402, 403], "static_argnum": [366, 402, 403], "static_argnam": [366, 402, 403], "jit": [366, 383], "frontend": 367, "primit": [367, 383], "describ": [367, 371, 1071, 1072, 1075, 1088, 1091, 1092, 1095, 1096, 1099], "hierarch": [367, 369, 370], "straight": [368, 1113], "arraywithlinalg": 368, "arraywithlog": 368, "arraywithmath": 368, "arraywithmeta": 368, "arraywithreduct": 368, "is_native_arrai": [368, 747], "_shape": 368, "_size": 368, "functool": 368, "mul": 368, "len": [368, 371, 405, 416], "_dtype": 368, "_devic": 368, "_dev_str": 368, "_pre_repr": 368, "_post_repr": 368, "ndim": [368, 865, 907, 909, 914], "mt": 368, "answer": [368, 383], "consol": 368, "typeerror": 368, "immut": 368, "behav": 368, "claim": 368, "truli": 368, "_native_wrapp": 368, "attributeerror": 368, "genuin": 368, "some_method": 368, "similarli": [368, 405, 416], "rewritten": 368, "__pow__": 368, "strang": 368, "power": [368, 369, 370, 511, 565, 568, 598, 697, 700, 747, 782, 805, 812, 865, 894, 1125], "enforc": 368, "notic": 368, "appear": [368, 951, 965, 968], "invers": [368, 382, 511, 516, 519, 520, 523, 529, 532, 533, 536, 537, 540, 541, 544, 545, 548, 580, 584, 738, 742, 865, 884, 886, 904, 906], "_wrap_method": 368, "func_wrapp": [368, 384, 385, 386, 387, 388, 389, 390, 391, 392], "__name__": 368, "non_wrapped_method": 368, "_method_wrap": 368, "native_arg": 368, "native_kwarg": 368, "inner_fn": 368, "whist": 368, "unwrap": 368, "transit": 368, "needlessli": 368, "randn": 368, "_unwrap_method": 368, "method_wrap": 368, "compartment": 368, "public": [368, 747, 763], "newshap": [368, 951, 981, 984], "new_shap": 368, "tidi": 368, "shorter": 368, "crystal": 368, "41": [368, 511, 569, 572, 721, 724, 865, 866, 868, 1071, 1096], "enough": [368, 369, 370], "ton": 369, "ado": [369, 370], "incred": [369, 383], "hash": 369, "soup": 369, "walk": [369, 370], "dct": 369, "cnt": 369, "combo": [369, 1113, 1119], "hold": [369, 747, 803, 804], "1000": [369, 511, 721, 724], "uda": 369, "3333": 369, "6667": 369, "178": 369, "new_weight": 369, "0600": 369, "3100": 369, "2400": 369, "6900": 369, "delimit": 369, "autocomplet": 369, "midwai": 369, "agent": 369, "total_spe": 369, "total_height": 369, "total_width": 369, "ag": 369, "tot": 369, "total_": 369, "total_h": 369, "batch_siz": [369, 852, 853, 854, 855, 856, 857, 858, 859, 1038, 1039], "dir": 369, "adam": [369, 370, 371, 821, 823, 824, 826, 834, 836, 1113, 1150, 1152], "cnt0": 369, "cnt1": 369, "diff_0": 369, "diff_1": 369, "config0": 369, "config1": 369, "Not": [369, 370, 383, 404], "decod": 369, "l0": 369, "l1": [369, 865, 929, 931], "depth": [369, 370, 371, 382, 461, 485, 489, 493, 747, 785, 800, 1015, 1027, 1146, 1147], "clearer": 369, "truncat": 369, "decoder__l0": 369, "decoder__l1": 369, "encoder__l0": 369, "encoder__l1": 369, "height": 369, "l0__b": 369, "l0__w": 369, "l1__b": 369, "l1__w": 369, "printabl": 369, "obviou": 369, "foresight": 369, "untidili": 369, "update_ag": 369, "normalize_img": 369, "img": 369, "img_max": 369, "reduce_max": [369, 1113], "img_min": 369, "reduce_min": [369, 1113], "img_rang": 369, "agent_posit": 369, "agent_veloc": 369, "agent_cam_front_rgb": 369, "agent_cam_front_depth": 369, "agent_cam_rear_rgb": 369, "agent_cam_rear_depth": 369, "agent_cam_lidar": 369, "normal": [369, 951, 995, 998, 1033, 1034, 1037, 1038, 1043, 1148, 1149], "cleaner": 369, "camera": 369, "front_rgb": 369, "front_depth": 369, "rear_rgb": 369, "rear_depth": 369, "lidar": 369, "rgb": 369, "rear": 369, "veloc": 369, "cam": 369, "cam_max": 369, "cam_min": 369, "cam_rang": 369, "Of": 369, "ideal": 369, "perman": 369, "afterward": 369, "thread": 369, "incorpor": 369, "pretti": 369, "straightforward": 369, "dataload": [369, 381, 1113], "_cnt": 369, "img_": 369, "_dataset_s": 369, "_batch_siz": 369, "_count": [369, 370], "__next__": 369, "filenam": 369, "img_fnam": 369, "fname": 369, "loaded_img": 369, "cv2": 369, "imread": 369, "loader": [369, 383], "32": [369, 394, 396, 511, 569, 572, 852, 855, 858, 865, 901, 903, 1050, 1054, 1071, 1072, 1075, 1099], "batch_slic": 369, "model": [369, 370, 1113], "mymodel": [369, 1113], "linear0": [369, 370, 1113], "linear1": [369, 370, 1113], "x_in": [369, 370, 371, 1113], "001": [369, 370, 1033, 1034, 1037], "loss_fn": [369, 370, 371, 1113], "0145": 369, "grad_fn": 369, "addbackward0": 369, "_create_vari": 370, "output_channel": [370, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1143, 1144], "with_bia": [370, 1134, 1144], "_input_channel": 370, "_output_channel": 370, "_w_shape": 370, "_b_shape": 370, "_with_bia": 370, "8979": 370, "3198": 370, "0196": 370, "3126": 370, "3717": 370, "9687": 370, "6958": 370, "5122": 370, "3902": 370, "8800": 370, "5613": 370, "1982": 370, "nightmar": 370, "overcom": 370, "fc": 370, "9563": 370, "impact": 370, "v0": 370, "v1": 370, "6440": 370, "key0": 370, "1823": 370, "8075": 370, "linear3": 370, "v2": 370, "2346": 370, "counter": 370, "hidden": [370, 852, 862, 1134, 1143], "fed": [370, 461, 505], "1300": 370, "decoupl": 370, "scheme": 370, "weight_initi": [370, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1143, 1144], "glorotuniform": [370, 1125, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1143, 1144], "bias_initi": [370, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1144], "_w_init": 370, "_b_init": 370, "create_vari": [370, 1125], "var_shap": [370, 1125], "fan_out": [370, 1125], "fan_in": [370, 1125], "fan_mod": [370, 1125], "fan_sum": 370, "slight": 370, "misnom": 370, "saw": 370, "vanilla": [370, 1011, 1013], "descent": [370, 821, 829, 831, 1150, 1155], "lar": [370, 821, 834, 836, 838, 840, 1150], "lamb": [370, 821, 834, 836, 1150], "compile_on_next_step": [370, 1146, 1147, 1150, 1151, 1152, 1153, 1154, 1155], "_beta1": 370, "_beta2": 370, "_epsilon": 370, "_mw": 370, "_vw": 370, "_first_pass": 370, "_should_compil": 370, "_step": [370, 1150, 1154], "new_v": 370, "_lr": 370, "isinst": [370, 371, 747, 815], "_inplac": 370, "_stop_gradi": 370, "set_stat": [370, 1150, 1151, 1152, 1153, 1154, 1155], "mw": [370, 821, 823, 824, 826], "vw": [370, 821, 823, 824, 826], "pre": [371, 383, 461], "captur": 371, "sparse_funct": 371, "num_class": [371, 1038, 1039], "num_dim": 371, "new_axi": 371, "_linear": 371, "to_backend": 371, "jax_graph": 371, "learnabl": [371, 1033, 1034, 1037, 1148, 1149], "to_ivy_modul": [371, 1123], "thinli": 371, "whilst": 371, "to_haiku_modul": 371, "hk": 371, "loss_fn_t": 371, "transform": [371, 382, 852, 860, 861], "without_apply_rng": 371, "rng": 371, "prngkei": 371, "init": 371, "update_rul": 371, "01": [371, 511, 705, 708], "tree_multimap": 371, "mechan": [381, 383, 1113], "vision": [381, 1113], "robot": [381, 1113], "focus": 382, "field": [382, 865, 878, 880, 907, 909, 914, 1055, 1056, 1057], "perfect": 382, "3d": [382, 1134, 1139, 1140], "differenti": 382, "demo": [382, 1113], "orient": 382, "pose": 382, "euler": [382, 404], "quaternion": 382, "rotat": 382, "matric": [382, 405, 416, 420, 421, 852, 861, 865, 866, 868, 872, 875, 877, 878, 880, 881, 883, 884, 886, 894, 895, 897, 898, 900, 904, 906, 907, 909, 911, 913, 914, 916, 917, 919, 923, 925], "angl": [382, 511, 541, 544, 581, 717, 720], "ivy_mech": 382, "target_facing_rotation_matrix": 382, "polar_to_cartesian_coord": 382, "ordin": [382, 865, 911, 913], "warp": 382, "optic": 382, "voxel": 382, "ivy_vis": 382, "coords_to_voxel_grid": 382, "render_pixel_coord": 382, "neural": [382, 852, 1113, 1120, 1134], "radianc": 382, "nerf": 382, "trajectori": 382, "motion": 382, "plan": [382, 1113], "mobil": 382, "ivy_robot": 382, "sample_spline_path": 382, "rigidmobil": 382, "sample_bodi": 382, "drone": 382, "sample_link": 382, "openai": 382, "swimmer": 382, "cumul": [382, 747, 765, 766], "reward": 382, "supervis": 382, "reinforc": 382, "door": [382, 383], "intersect": 382, "cartpol": 382, "mountain_car": 382, "pendulum": 382, "reacher": 382, "polici": 382, "condit": [382, 402, 403, 1015, 1025, 1026, 1050, 1054], "learnt": 382, "ture": 382, "ntm": 382, "egospher": 382, "spatial": 382, "esm": 382, "ivy_memori": 382, "egocentr": 382, "room": 382, "inspir": 382, "doubt": 383, "grate": 383, "put": 383, "probe": 383, "undergo": 383, "remark": 383, "surpris": 383, "backward": [383, 511, 701, 704, 865, 926, 928, 1104, 1105, 1108, 1109, 1112], "lock": 383, "contunu": 383, "minor": 383, "xla": 383, "buffer": 383, "kind": [383, 424, 444, 447, 511, 697, 700, 1071, 1088, 1091, 1096], "gold": 383, "dex": 383, "phase": 383, "lax": 383, "scan": 383, "tricki": 383, "predictor": 383, "tight": 383, "driver": 383, "schedul": 383, "algorithm": [383, 852, 853, 854, 855, 856, 857, 858, 859, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141], "dispatch": 383, "Will": 383, "ast": 383, "dynamic": 383, "cond": 383, "jacobian": 383, "checkpoint": 383, "autodiff": 383, "shine": 383, "merci": 383, "superset": 383, "cluster": 383, "compet": 383, "paradigm": 383, "parallelis": [383, 461, 470, 471], "spmd": 383, "mixtur": 383, "expert": 383, "sophist": 383, "depart": 383, "routin": 383, "hundr": 383, "thousand": 383, "deepli": [383, 1015, 1017], "broadli": 383, "heavili": 383, "supplementari": 383, "Is": 383, "reusabl": 383, "fanci": 383, "fusion": 383, "lose": 383, "vmap": 383, "pmap": 383, "overhead": 383, "ineffici": 383, "eventu": 383, "supplement": 383, "backdoor": 383, "callback": 383, "record": 383, "metric": 383, "somewhat": 383, "outsourc": 383, "inputs_to_ivy_arrai": 384, "gaussian": [394, 395], "leaki": [394, 395, 396], "alpha": [394, 396], "rectifi": [394, 396, 397], "slope": [394, 396], "39": [394, 396, 511, 598, 865, 901, 903, 1071, 1072, 1075, 1099], "85": [394, 396, 511, 569, 572], "48": [394, 396, 511, 721, 724, 865, 901, 903, 1071, 1072, 1075, 1099], "88": [394, 396, 511, 569, 572, 865, 901, 903, 1071, 1072, 1075, 1099], "269": [394, 398], "731": [394, 398], "881": [394, 398], "214": [394, 398], "978": [394, 398], "891": [394, 398], "422": [394, 399], "155": [394, 399], "0768": [394, 399], "231": [394, 399], "693": [394, 399, 935, 946, 949], "49": [394, 399, 511, 721, 724, 1071, 1072, 1075, 1099], "147": [394, 399], "363": [394, 399], "3461": [394, 400], "6491": [394, 400], "535": [394, 400], "hyperbol": [394, 401, 511, 519, 520, 523, 533, 536, 540, 545, 548, 580, 581, 584, 717, 720, 738, 739, 742], "55": [394, 401, 852, 858, 865, 901, 903, 1071, 1072, 1075, 1099], "501": [394, 401], "762": [394, 401], "964": [394, 401], "faster": [402, 403], "invoc": [402, 403], "718281828459045": 404, "newaxi": 404, "alia": 404, "pi": 404, "141592653589793": 404, "mathemat": [404, 511, 524, 541, 544, 602, 605, 680, 683, 865, 929, 931], "half": [405, 406, 1038, 1040, 1041, 1044, 1046], "chosen": [405, 406, 511, 541, 544, 1050, 1054], "distanc": [405, 406], "adjac": [405, 406], "interpret": [405, 407, 417], "uniniti": [405, 408, 409], "n_row": [405, 410], "n_col": [405, 410], "elsewher": [405, 410, 1050, 1054], "row": [405, 410, 865, 911, 913, 914, 1038, 1039, 1050, 1053], "column": [405, 410, 865, 878, 880, 907, 909, 911, 913, 914], "__dlpack__": [405, 411, 461, 506], "interchang": [405, 411, 951, 999, 1002], "endpoint": [405, 414], "xy": [405, 416], "coordin": [405, 416, 511, 541, 544], "cartesian": [405, 416], "ij": [405, 416, 1071, 1072, 1075, 1099], "rank": [405, 416, 747, 819, 865, 869, 871, 895, 897, 907, 909, 911, 913, 923, 925, 926, 928, 929, 931, 951, 961, 964, 965, 968, 995, 998, 1007, 1010, 1050, 1053, 1104, 1105, 1108, 1109, 1112], "ni": [405, 416], "xi": [405, 416], "n1": [405, 416], "n2": [405, 416], "n3": [405, 416], "accordingli": [405, 416, 511, 602, 605, 865, 929, 931, 1050, 1052, 1055, 1056, 1057, 1059, 1071, 1076, 1079, 1080, 1083, 1084, 1087, 1088, 1091, 1092, 1095, 1096, 1100, 1103, 1104, 1105, 1108, 1109, 1112], "xv": [405, 416], "yv": [405, 416], "triangular": [405, 420, 421, 865, 866, 868, 907, 909], "innermost": [405, 420, 421, 865, 866, 868, 872, 875, 877, 878, 880, 881, 883, 884, 886, 895, 897, 898, 900, 904, 906, 907, 909, 911, 913, 914, 916, 917, 919, 923, 925], "mxn": [405, 420, 421, 865, 875, 877, 886, 895, 897, 898, 900, 904, 906, 907, 909, 916, 917, 919, 923, 925], "defaultdtyp": [424, 425], "defaultfloatdtyp": [424, 426], "float_dtyp": [424, 440, 454], "defaultintdtyp": [424, 427], "dtype_in": [424, 428, 429, 443, 448, 449, 450, 460], "incompat": [424, 432], "occur": [424, 433, 436, 1050, 1051, 1052, 1055, 1056, 1057, 1059], "data_type_funct": [424, 433, 436], "closest": [424, 438, 511, 573, 576, 588, 606, 609, 610, 613, 705, 708, 743, 746], "floatdtyp": [424, 440], "int_dtyp": [424, 441, 455], "intdtyp": [424, 441], "followng": [424, 444], "occupi": [424, 444, 447, 747, 803, 804], "ep": [424, 444, 865, 886, 895, 897, 904, 906], "smallest_norm": [424, 444], "precis": [424, 444, 511, 680, 683, 721, 724], "encapsul": [424, 447], "type1": [424, 451], "type2": [424, 451], "arrays_and_dtyp": [424, 452], "ret1": [424, 456], "ret2": [424, 456], "noinspect": [425, 426, 427, 462, 822], "pyshadowingnam": [425, 426, 427, 462, 822], "defaultdevic": [461, 462], "__enter__": 461, "_dev": 461, "initialis": 461, "devcloneditem": [461, 483], "multidevitem": [461, 463, 466], "devclonedit": 461, "multidevit": [461, 464, 467, 470, 471, 475], "devclonednest": 461, "multidevnest": [461, 465, 468], "devdistitem": 461, "devdistit": 461, "devdistnest": 461, "devmanag": [461, 469], "dev_mapp": 461, "da_dim_s": 461, "safety_factor": 461, "min_dev_dim_s": 461, "max_dev_dim_step_ratio": 461, "min_unit_dev_tune_step": 461, "min_sf_tune_step": 461, "starting_split_factor": 461, "max_split_factor_step_s": 461, "tune_dev_alloc": 461, "tune_dev_split": 461, "mapper": [461, 470, 471], "receivess": 461, "ratio": [461, 821, 834, 836, 1150, 1152], "safe": [461, 470], "oom": 461, "tune": 461, "da_tune_step": 461, "ds_tune_step": 461, "to_clon": 461, "to_distribut": 461, "multidevic": [461, 470], "parallel": [461, 470, 471], "mutlidevic": [461, 470], "repeated_config_check": 461, "tune_step": 461, "devmapp": [461, 471], "ret_fn": [461, 470, 471], "queue_class": [461, 470, 471], "worker_class": [461, 470, 471], "worker": [461, 470, 471], "used_dev": [461, 470], "sf": [461, 470], "devmappermultiproc": 461, "multidev": [461, 472, 473, 474, 493], "profil": 461, "save_dir": [461, 476], "deviceic": [461, 482], "spread": [461, 493], "139740789224448": [461, 495], "physic": [461, 497], "x3": [461, 499], "x4": [461, 499], "process_specif": [461, 500, 510], "percentag": [461, 500], "ram": [461, 500, 507, 510], "alon": [461, 500, 510], "attr_onli": [461, 501], "chunk": [461, 503, 504, 505], "max_chunk_s": [461, 505], "chunk_siz": [461, 505], "input_ax": [461, 505], "output_ax": [461, 505], "feed": [461, 505], "fist": [461, 505], "stream": [461, 506], "caveat": [461, 506], "portabl": [461, 506, 1113], "gb": [461, 507, 510], "reset": [461, 509], "magnitud": [511, 512, 515, 524, 680, 683, 865, 914, 916, 917, 919], "princip": [511, 516, 529, 532, 537], "cosin": [511, 516, 519, 520, 523, 577, 580, 581, 584], "x1_i": [511, 524, 527, 541, 544, 549, 552, 557, 560, 561, 564, 565, 568, 569, 572, 585, 588, 590, 593, 601, 609, 610, 613, 614, 617, 618, 621, 634, 637, 638, 641, 658, 661, 662, 665, 670, 673, 674, 677, 680, 683, 689, 692, 697, 700, 701, 704, 729, 733], "x2_i": [511, 524, 527, 541, 544, 549, 552, 557, 560, 561, 564, 565, 568, 569, 572, 585, 588, 590, 593, 601, 609, 610, 613, 614, 617, 618, 621, 634, 637, 638, 641, 658, 661, 662, 665, 670, 673, 674, 677, 680, 683, 689, 692, 697, 700, 701, 704, 729, 733], "finit": [511, 524, 541, 544, 622, 625, 680, 683, 697, 700, 701, 704], "nor": [511, 524, 680, 683], "nearest": [511, 524, 680, 683, 705, 708], "2019": [511, 524, 602, 605, 680, 683], "commut": [511, 524], "sine": [511, 529, 532, 533, 536, 713, 716, 717, 720], "57": [511, 529, 532, 569, 572, 581], "524": [511, 529, 532], "644": [511, 529, 532], "201": [511, 529, 532, 705, 708], "305": [511, 529, 532], "412": [511, 529, 532], "quotient": [511, 541, 544], "notat": [511, 541, 544, 1071, 1072, 1075, 1099], "denot": [511, 541, 544], "pair": [511, 541, 544, 852, 864, 865, 869, 871], "quadrant": [511, 541, 544], "3\u03c0": [511, 541, 544], "549": [511, 540, 545, 548, 738, 742], "bitwis": [511, 549, 552, 561, 564, 569, 572, 674, 677], "AND": [511, 549, 552, 662, 665, 1104, 1105, 1108], "binari": [511, 549, 552, 561, 564, 569, 572, 674, 677, 935, 936, 939], "invert": [511, 553, 556], "arithmet": [511, 565, 568, 1071, 1080, 1083], "propag": [511, 565, 568, 1071, 1076, 1079, 1080, 1083, 1084, 1087, 1092, 1095, 1096, 1100, 1103], "thu": [511, 565, 568, 697, 700, 701, 704, 865, 878, 880], "lh": [511, 565, 568], "rh": [511, 565, 568], "xor": [511, 569, 572, 674, 677], "78": [511, 569, 572, 865, 901, 903, 1071, 1072, 1075, 1099], "91": [511, 569, 572, 865, 901, 903, 1071, 1072, 1075, 1099], "23": [511, 569, 572, 852, 858, 865, 875, 877, 1050, 1054], "66": [511, 569, 572, 865, 901, 903, 1071, 1072, 1075, 1099], "77": [511, 569, 572, 865, 901, 903, 1071, 1072, 1075, 1099], "79": [511, 569, 572], "89": [511, 569, 572, 865, 920, 922, 1071, 1096], "98": [511, 569, 572, 865, 901, 903, 1050, 1054, 1071, 1072, 1075, 1099], "26": [511, 569, 572, 852, 859, 865, 875, 877, 901, 903, 920, 922, 1071, 1072, 1075, 1099], "21": [511, 569, 572, 747, 765, 865, 875, 877, 901, 903, 935, 946, 949, 1071, 1072, 1075, 1099], "34": [511, 569, 572, 721, 724], "24": [511, 569, 572, 721, 724, 747, 765, 865, 875, 877, 901, 903, 1071, 1072, 1075, 1099], "51": [511, 569, 572], "27": [511, 569, 572, 581, 721, 724, 852, 864, 865, 901, 903, 1071, 1072, 1075, 1099], "74": [511, 569, 572], "59": [511, 569, 572], "416": [511, 577], "76": [511, 581, 865, 920, 922, 1071, 1072, 1075, 1099], "122": [511, 581], "368": [511, 581], "670": [511, 581], "202": [511, 581, 705, 708], "548": [511, 581], "1490": [511, 581], "dividend": [511, 585, 701, 704], "divisor": [511, 585, 701, 704, 821, 823, 824, 826, 834, 836, 1071, 1092, 1095, 1100, 1103, 1150, 1151, 1152], "gauss": [511, 594, 597], "exponenti": [511, 527, 594, 597, 598, 601, 658, 661, 697, 700], "logarithm": [511, 527, 598, 601, 642, 645, 646, 649, 650, 653, 654, 657, 658, 661, 865, 874, 910], "72": [511, 598, 865, 901, 903, 1071, 1072, 1075, 1099], "accur": [511, 602, 605], "fdlibm": [511, 602, 605], "compliant": [511, 602, 605, 666, 669, 670, 673, 1071, 1076, 1079, 1080, 1083, 1084, 1087], "greatest": [511, 588, 606, 609, 610, 613], "out_i": [511, 622, 625, 626, 629, 630, 633], "threshold": [511, 678, 679], "exce": [511, 679], "y_i": [511, 685, 688], "expon": [511, 697, 700, 747, 812], "versu": [511, 697, 700], "odd": [511, 697, 700], "modulu": [511, 701, 704], "primarili": [511, 701, 704], "5654": [511, 705, 708], "034": [511, 705, 708], "433": [511, 705, 708], "343": [511, 705, 708], "44": [511, 705, 708, 721, 724, 725, 728, 865, 901, 903, 1050, 1054, 1071, 1072, 1075, 1099], "30": [511, 705, 708, 865, 901, 903, 1071, 1072, 1075, 1099, 1125, 1131], "81": [511, 705, 708, 725, 728, 1071, 1072, 1075, 1099], "527": [511, 705, 708], "301": [511, 705, 708], "indistinguish": [511, 721, 724], "infinit": [511, 721, 724], "83": [511, 721, 724], "32455532": [511, 721, 724], "89897949": [511, 721, 724], "50": [511, 721, 724, 865, 901, 903, 1050, 1053, 1071, 1072, 1075, 1099], "31": [511, 721, 724], "169": [511, 721, 724], "63": [511, 721, 724, 865, 866, 868, 901, 903, 1071, 1072, 1075, 1099], "47": [511, 721, 724], "73": [511, 721, 724, 865, 866, 868, 1033, 1034, 1037], "93": [511, 721, 724], "35": [511, 721, 724, 852, 864, 865, 869, 871, 1050, 1054, 1071, 1072, 1075, 1099], "09": [511, 725, 728, 852, 864], "61": [511, 725, 728, 935, 936, 939], "546": [511, 734], "842": [511, 734], "916": [511, 734, 935, 936, 939], "96": [511, 734, 865, 901, 903, 1071, 1072, 1075, 1099], "996": [511, 734], "328": [511, 734], "decim": [511, 743, 746], "inspect": [747, 753, 1117, 1118], "downscal": [747, 759, 760, 762], "60": [747, 765, 865, 901, 903, 1071, 1072, 1075, 1099], "default_v": [747, 768], "catch_except": [747, 768], "rev": [747, 768], "with_cal": [747, 768], "arrang": [747, 769], "123": [747, 772], "mod": [747, 773], "max_freq": [747, 774], "num_band": [747, 774], "pad": [747, 774, 852, 853, 854, 855, 856, 857, 858, 859, 951, 961, 964, 1007, 1010, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141], "fourier": [747, 774], "band": [747, 774], "linearli": [747, 774, 865, 911, 913], "oppos": [747, 774], "geometr": [747, 774], "seen_set": [747, 785], "local_set": [747, 785], "decrement": [747, 789], "is_arrai": 747, "allow_dupl": [747, 797], "forkserv": [747, 798], "spawn": [747, 798], "hot": [747, 800], "scatter": [747, 800, 803, 804], "overrid": [747, 800], "tmp_dr": [747, 808], "temporari": [747, 808], "min_denomin": [747, 811], "stabil": [747, 811, 812, 1060, 1061, 1064, 1066, 1069], "_min_denomin": [747, 811], "min_bas": [747, 812], "_min_bas": [747, 812, 1033, 1034, 1037, 1148, 1149], "100000023841858": [747, 815], "200000047683716": [747, 815], "299999952316284": [747, 815], "400000095367432": [747, 815], "599999904632568": [747, 815], "101": [747, 816], "unpack": [747, 819], "gradienttrack": [821, 822], "delta": [821, 823], "cost": [821, 823, 824, 826, 829, 831, 834, 836, 838, 840, 842, 844, 1011, 1012, 1013, 1014], "ws": [821, 823, 824, 826, 829, 831, 834, 836, 838, 840, 842, 844], "en": [821, 823, 824, 826], "wikipedia": [821, 823, 824, 826], "wiki": [821, 823, 824, 826], "stochastic_gradient_desc": [821, 823, 824, 826], "dc": [821, 823, 824, 826, 829, 831, 834, 836, 838, 840, 842, 844], "dw": [821, 823, 824, 826, 829, 831, 834, 836, 838, 840, 842, 844], "averag": [821, 823, 824, 826, 834, 836, 1011, 1012, 1013], "forget": [821, 823, 824, 826, 834, 836, 1150, 1151, 1152], "rate": [821, 824, 826, 829, 831, 834, 836, 838, 840, 842, 844, 1011, 1012, 1013, 1014, 1134, 1145, 1150, 1151, 1152, 1153, 1154, 1155], "ws_new": [821, 824, 826, 829, 831, 834, 836, 838, 840, 842, 844], "retain": [821, 828], "trust": [821, 834, 836, 1150, 1152], "decai": [821, 834, 836, 838, 840, 1150, 1152, 1153], "layerwis": [821, 838, 840, 1150, 1153], "stride": [852, 853, 854, 855, 856, 857, 858, 859, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141], "data_format": [852, 853, 854, 855, 856, 857, 858, 859, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141], "nwc": [852, 853, 854, 1134, 1135, 1136], "dilat": [852, 853, 854, 855, 856, 857, 858, 859, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141], "convolut": [852, 853, 854, 855, 856, 857, 858, 859, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141], "d_in": [852, 853, 854, 855, 856, 857, 858], "fw": [852, 853, 854, 855, 856, 857, 858, 859], "d_out": [852, 853, 854, 855, 856, 857, 858], "slide": [852, 853, 854, 855, 856, 857, 858, 859, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141], "ncw": [852, 853, 854, 1134, 1135, 1136], "wio": [852, 853], "output_shap": [852, 854, 856, 858, 1134, 1136, 1138, 1140], "nhwc": [852, 855, 856, 859, 1134, 1137, 1138, 1141], "fh": [852, 855, 856, 857, 858, 859], "nchw": [852, 855, 856, 859, 1134, 1137, 1138, 1141], "hwio": [852, 855], "unequ": [852, 855], "28": [852, 855, 858, 859, 865, 901, 903, 1071, 1072, 1075, 1099], "unsqueez": [852, 855, 859], "ndhwc": [852, 857, 858, 1134, 1139, 1140], "volum": [852, 857], "fd": [852, 857, 858], "ncdhw": [852, 857, 858, 1134, 1139, 1140], "dhwio": [852, 857], "256": [852, 858], "258": [852, 858], "128": [852, 858, 865, 901, 903], "depthwis": [852, 859, 1134, 1141], "333": [852, 859], "inp": [852, 859], "prob": [852, 860, 1038, 1039, 1134, 1142], "randomli": [852, 860, 1134, 1142], "bernoulli": [852, 860], "out_featur": [852, 860, 861], "incom": [852, 861], "outer_batch_shap": [852, 861], "inner_batch_shap": [852, 861], "in_featur": [852, 861], "cell": [852, 862, 1134, 1143], "num_queri": [852, 863, 864], "x_feat_dim": [852, 863], "num_kei": [852, 863, 864], "cont_feat_dim": [852, 863], "numhead": [852, 863], "feat_dim": [852, 863, 864], "out_feat_dim": [852, 863], "score": [852, 864], "04": [852, 864], "03": [852, 864, 1033, 1034, 1037], "08": [852, 864], "decomposit": [865, 866, 868, 907, 909, 914], "symmetr": [865, 866, 868, 878, 880, 881, 883, 932, 934], "u": [865, 866, 868, 914], "577": [865, 866, 868], "707": [865, 866, 868], "vif": [865, 869, 871], "92": [865, 872], "293": [865, 872], "46997": [865, 872], "eigendecomposit": [865, 878, 880], "qlq\u1d40": [865, 878, 880], "orthogon": [865, 878, 880], "eig": [865, 878, 880], "eigenvalu": [865, 878, 880, 881, 883], "eigenvector": [865, 878, 880], "75": [865, 884, 901, 903], "prepend": [865, 887, 890], "singular": [865, 886, 895, 897, 904, 906, 914, 916, 917, 919], "toler": [865, 886, 895, 897, 904, 906], "largest_singular_valu": [865, 886, 895, 897, 904, 906], "array_lik": [865, 901, 903], "33": [865, 901, 903, 1033, 1034, 1037, 1071, 1072, 1075, 1099], "36": [865, 901, 903, 1071, 1072, 1075, 1099], "45": [865, 901, 903, 951, 990, 1033, 1034, 1037, 1071, 1072, 1075, 1099], "65": [865, 901, 903, 1071, 1072, 1075, 1099], "84": [865, 901, 903, 1071, 1072, 1075, 1099], "105": [865, 901, 903, 935, 936, 939], "112": [865, 901, 903, 1071, 1072, 1075, 1099], "104": [865, 901, 903, 1071, 1072, 1075, 1099], "120": [865, 901, 903], "moor": [865, 886, 904, 906], "penros": [865, 886, 904, 906], "pseudo": [865, 886, 904, 906], "orthonorm": [865, 907, 909, 914], "2d": [865, 874, 910, 1134, 1137, 1138, 1141], "logdet": [865, 874, 910], "coeffici": [865, 911, 913], "usvh": [865, 914], "vh": [865, 914], "hermitian": [865, 914], "et": [865, 914], "cetera": [865, 914], "adjoint": [865, 914], "reconstruct": [865, 914, 1055, 1056, 1058], "reconstructed_x": [865, 914], "contract": [865, 920, 922, 1071, 1072, 1075, 1099], "doubl": [865, 920, 922], "singleton": [865, 929, 931, 951, 991, 994, 1050, 1052, 1071, 1076, 1079, 1080, 1083, 1084, 1087, 1088, 1091, 1092, 1095, 1096, 1100, 1103, 1104, 1105, 1108, 1109, 1112], "liter": [865, 929, 931], "manhattan": [865, 929, 931], "l2": [865, 929, 931], "euclidean": [865, 929, 931], "mathbf": [865, 932, 934], "mathbb": [865, 932, 934], "skew": [865, 932, 934], "entropi": [935, 936, 939, 941, 944, 946, 949], "predict": [935, 936, 939, 941, 944, 946, 949], "smooth": [935, 936, 939, 941, 944, 946, 949], "223": [935, 936, 939], "357": [935, 936, 939, 946, 949], "511": [935, 936, 939], "discret": [935, 941, 944], "3862944": [935, 941, 944], "35667497": [935, 941, 944], "spars": [935, 946, 949], "logit": [935, 946, 949], "793291": [935, 946, 949], "512926": [935, 946, 949], "before_1": [951, 961, 964, 1007, 1010], "after_1": [951, 961, 964, 1007, 1010], "before_n": [951, 961, 964, 1007, 1010], "after_n": [951, 961, 964, 1007, 1010], "insert": [951, 965, 968, 1015, 1020, 1050, 1051], "manipulation_funct": [951, 965, 968], "reorder": [951, 969, 972], "permut": [951, 973, 976, 999, 1002], "repetit": [951, 977, 980, 1003, 1006], "restor": [951, 985, 988], "classivi": [951, 990], "famili": [951, 995, 998], "intxx": [951, 995, 998], "floatxx": [951, 995, 998], "fomaml_step": 1011, "inner_cost_fn": [1011, 1012, 1013], "outer_cost_fn": [1011, 1012, 1013], "inner_grad_step": [1011, 1012, 1013, 1014], "inner_learning_r": [1011, 1012, 1013, 1014], "inner_optimization_step": [1011, 1012, 1013, 1014], "inner_batch_fn": [1011, 1012, 1013], "outer_batch_fn": [1011, 1012, 1013], "average_across_step": [1011, 1012, 1013], "inner_v": [1011, 1012, 1013], "keep_inner_v": [1011, 1012, 1013], "outer_v": [1011, 1012, 1013], "keep_outer_v": [1011, 1012, 1013], "return_inner_v": [1011, 1012, 1013, 1014], "num_task": [1011, 1012, 1013, 1014], "maml": [1011, 1012, 1013], "recev": [1011, 1012, 1013], "0x7fc714d9e670": [1011, 1012, 1013, 1014], "maml_step": 1011, "rece": [1011, 1013], "reptile_step": 1011, "cost_fn": [1011, 1014], "reptil": [1011, 1014], "receivng": [1011, 1014], "all_nested_indic": 1015, "include_nest": [1015, 1016], "_index": [1015, 1016, 1026], "_base": [1015, 1016, 1025, 1026], "copy_nest": 1015, "to_mut": [1015, 1017, 1027], "mutabl": [1015, 1017, 1027], "insert_into_nest_at_index": 1015, "insert_into_nest_at_indic": 1015, "map_nest_at_index": 1015, "map_nest_at_indic": 1015, "multi_index_nest": 1015, "nested_ani": 1015, "check_nest": [1015, 1025, 1026], "conditon": [1015, 1025, 1026], "nested_indices_wher": 1015, "stop_after_n_found": [1015, 1026], "_depth": [1015, 1027], "_tuple_check_fn": [1015, 1027], "_list_check_fn": [1015, 1027], "_dict_check_fn": [1015, 1027], "nested_multi_map": 1015, "nest0": [1015, 1028], "ivy_arrai": [1015, 1028], "funciton": [1015, 1028], "prune_nest_at_index": 1015, "prune_nest_at_indic": 1015, "set_nest_at_index": 1015, "set_nest_at_indic": 1015, "mini": [1033, 1034, 1037, 1148, 1149], "gamma": [1033, 1034, 1037], "beta": [1033, 1034, 1037], "0976": [1033, 1034, 1037], "3452": [1033, 1034, 1037], "2740": [1033, 1034, 1037], "1047": [1033, 1034, 1037], "5886": [1033, 1034, 1037], "2732": [1033, 1034, 1037], "7696": [1033, 1034, 1037], "7024": [1033, 1034, 1037], "2518": [1033, 1034, 1037], "58": [1033, 1034, 1037, 1055, 1056], "283": [1033, 1034, 1037], "585": [1033, 1034, 1037], "909": [1033, 1034, 1037], "628": [1033, 1034, 1037], "997": [1033, 1034, 1037], "225": [1033, 1034, 1037], "425": [1033, 1034, 1037], "norm_idx": [1033, 1034, 1037], "228": [1033, 1034, 1037], "0285": [1033, 1034, 1037], "199": [1033, 1034, 1037], "204": [1033, 1034, 1037], "population_s": [1038, 1039], "num_sampl": [1038, 1039], "draw": [1038, 1039, 1043, 1044, 1046], "unnorm": [1038, 1039], "drawn": [1038, 1039, 1040, 1041, 1043, 1044, 1046], "home": [1038, 1039, 1043, 1044, 1046], "uniformli": [1038, 1040, 1041, 1044, 1046], "highest": [1038, 1040, 1041], "parameter": [1038, 1043, 1044, 1046], "6444774682897879": [1038, 1043], "811": [1038, 1043], "508": [1038, 1043], "564": [1038, 1043], "7268672": [1038, 1043], "968": [1038, 1043], "175": [1038, 1043, 1055, 1056], "064": [1038, 1043], "40935726": [1038, 1043], "556": [1038, 1043], "26431865": [1038, 1044, 1046], "475": [1038, 1044, 1046], "878": [1038, 1044, 1046], "861": [1038, 1044, 1046], "89150229": [1038, 1044, 1046], "89629126": [1038, 1044, 1046], "94198485": [1038, 1044, 1046], "91405606": [1038, 1044, 1046], "72848724": [1038, 1044, 1046], "7550739": [1038, 1044, 1046], "624": [1038, 1044, 1046], "00109": [1038, 1044, 1046], "occurr": [1050, 1051, 1052, 1055, 1056], "yield": [1050, 1054], "43": [1050, 1054], "x_j": [1055, 1056, 1057, 1059], "impli": [1055, 1056, 1057, 1059], "inverse_indic": [1055, 1056, 1058], "aggreg": [1055, 1056], "fourth": [1055, 1056], "607": [1055, 1056], "735": [1055, 1056], "667": [1055, 1056], "381": [1055, 1056], "857": [1055, 1056], "0396": [1055, 1056], "166": [1055, 1056], "828": [1055, 1056], "144": [1055, 1056], "40501155": [1055, 1056], "77361575": [1055, 1056], "97776199": [1055, 1056], "36831157": [1055, 1056], "89148434": [1055, 1056], "9512272": [1055, 1056], "67542176": [1055, 1056], "41985657": [1055, 1056], "23478023": [1055, 1056], "1141": [1055, 1056], "8101": [1055, 1056], "9298": [1055, 1056], "8460": [1055, 1056], "2119": [1055, 1056], "3519": [1055, 1056], "6252": [1055, 1056], "4033": [1055, 1056], "7443": [1055, 1056], "2577": [1055, 1056], "3707": [1055, 1056], "0545": [1055, 1056], "3238": [1055, 1056], "5944": [1055, 1056], "0775": [1055, 1056], "4327": [1055, 1056], "176": [1055, 1056], "889": [1055, 1056], "763": [1055, 1056], "071": [1055, 1056], "262": [1055, 1056], "456": [1055, 1056], "114": [1055, 1056], "349": [1055, 1056], "615": [1055, 1056], "594": [1055, 1056], "335": [1055, 1056], "212": [1055, 1056], "457": [1055, 1056], "827": [1055, 1056], "209": [1055, 1056], "ascend": [1060, 1061, 1064], "einstein": [1071, 1072, 1075, 1099], "summat": [1071, 1072, 1075, 1099], "seq": [1071, 1072, 1075, 1099], "jk": [1071, 1072, 1075, 1099], "ik": [1071, 1072, 1075, 1099], "126": [1071, 1072, 1075, 1099], "510": [1071, 1072, 1075, 1099], "99": [1071, 1072, 1075, 1099], "108": [1071, 1072, 1075, 1099], "117": [1071, 1072, 1075, 1099], "sentinel": [1071, 1076, 1079, 1084, 1087], "unsign": [1071, 1088, 1091, 1096], "degre": [1071, 1092, 1095, 1100, 1103], "bessel": [1071, 1092, 1095, 1100, 1103], "8164966": [1071, 1092, 1095], "varianc": [1071, 1100, 1103], "unbias": [1071, 1100, 1103], "simplicit": [1104, 1105, 1108], "autom": 1113, "grow": 1113, "ai": 1113, "got": 1113, "colab": 1113, "sharp": 1113, "weekli": 1113, "event": 1113, "immedi": 1113, "favorit": 1113, "jax_concat": 1113, "tf_concat": 1113, "np_concat": 1113, "mx_concat": 1113, "torch_concat": 1113, "prompt": 1113, "get_devic": 1113, "reduce_prod": 1113, "gradient_imag": 1113, "linalg": 1113, "bilinear_resampl": 1113, "stack_imag": 1113, "neural_net": 1113, "ecosystem": [1113, 1119], "popular": [1113, 1119], "acceler": 1113, "articl": 1113, "lenton2021ivi": 1113, "inter": 1113, "lenton": 1113, "daniel": 1113, "pardo": 1113, "fabio": 1113, "falck": 1113, "fabian": 1113, "jame": 1113, "stephen": 1113, "clark": 1113, "ronald": 1113, "journal": 1113, "arxiv": 1113, "preprint": 1113, "2102": 1113, "02886": 1113, "2021": 1113, "add_array_spec": 1116, "fn_array_spec": 1116, "geglu": 1120, "native_modul": [1123, 1124], "native_module_class": [1123, 1124], "firstlayersiren": 1125, "kaimingnorm": [1125, 1129], "negative_slop": 1125, "Ones": 1125, "siren": 1125, "w0": [1125, 1131], "filter_s": [1134, 1135, 1136], "1d": [1134, 1135, 1136], "conv1dtranspos": 1134, "filter_shap": [1134, 1137, 1138, 1139, 1140, 1141], "conv2dtranspos": 1134, "conv3dtranspos": 1134, "depthwiseconv2d": 1134, "num_channel": [1134, 1141], "bernoul": [1134, 1142], "num_lay": [1134, 1143], "return_sequ": [1134, 1143], "return_st": [1134, 1143], "get_initial_st": [1134, 1143], "dens": [1134, 1144], "multiheadattent": 1134, "query_dim": [1134, 1145], "head_dim": [1134, 1145], "dropout_r": [1134, 1145], "context_dim": [1134, 1145], "with_to_q_fn": [1134, 1145], "with_to_kv_fn": [1134, 1145], "with_to_out_fn": [1134, 1145], "build_mod": [1134, 1145, 1146, 1147], "on_init": [1134, 1145, 1146, 1147], "__call__": [1134, 1145, 1146, 1147], "store_var": [1146, 1147], "arg_stateful_idx": [1146, 1147], "kwarg_stateful_idx": [1146, 1147], "fallback_to_non_compil": [1146, 1147, 1150, 1154], "with_partial_v": [1146, 1147], "initialz": [1146, 1147], "from_cal": [1146, 1147], "check_submod_ret": [1146, 1147], "get_mod_kei": [1146, 1147], "top_mod": [1146, 1147], "mod_depth": [1146, 1147], "mod_height": [1146, 1147], "mod_with_top_mod_key_chain": [1146, 1147], "save_weight": [1146, 1147], "weights_path": [1146, 1147], "show_mod_in_top_mod": [1146, 1147], "upper_depth": [1146, 1147], "lower_depth": [1146, 1147], "show_structur": [1146, 1147], "show_v_in_top_v": [1146, 1147], "sub_mod": [1146, 1147], "show_v": [1146, 1147], "track_submod_call_ord": [1146, 1147], "track_submod_ret": [1146, 1147], "v_with_top_v_key_chain": [1146, 1147], "layernorm": 1148, "normalized_shap": [1148, 1149], "elementwise_affin": [1148, 1149], "trail": [1148, 1149], "affin": [1148, 1149], "0001": [1150, 1151, 1152], "init_on_first_step": [1150, 1154], "ignore_miss": [1150, 1154], "overriden": [1150, 1154], "sgd": 1150, "stochast": [1150, 1155], "sub_modul": [1156, 1157]}, "objects": {"ivy.array": [[0, 0, 0, "-", "activations"], [2, 0, 0, "-", "array_methods"], [116, 0, 0, "-", "conversions"], [121, 0, 0, "-", "creation"], [123, 0, 0, "-", "data_type"], [125, 0, 0, "-", "device"], [127, 0, 0, "-", "elementwise"], [129, 0, 0, "-", "general"], [131, 0, 0, "-", "gradients"], [133, 0, 0, "-", "image"], [135, 0, 0, "-", "layers"], [137, 0, 0, "-", "linear_algebra"], [139, 0, 0, "-", "losses"], [141, 0, 0, "-", "manipulation"], [143, 0, 0, "-", "norms"], [145, 0, 0, "-", "random"], [147, 0, 0, "-", "searching"], [149, 0, 0, "-", "set"], [151, 0, 0, "-", "sorting"], [153, 0, 0, "-", "statistical"], [155, 0, 0, "-", "utility"], [157, 0, 0, "-", "wrapping"]], "ivy.array.activations": [[1, 1, 1, "", "ArrayWithActivations"]], "ivy.array.array_methods": [[513, 2, 1, "", "abs"], [520, 2, 1, "", "acos"], [521, 2, 1, "", "acosh"], [658, 2, 1, "", "add"], [7, 2, 1, "", "add_ivy_array_instance_methods"], [1106, 2, 1, "", "all"], [749, 2, 1, "", "all_equal"], [1110, 2, 1, "", "any"], [1062, 2, 1, "", "argsort"], [530, 2, 1, "", "asin"], [534, 2, 1, "", "asinh"], [545, 2, 1, "", "atan"], [542, 2, 1, "", "atan2"], [546, 2, 1, "", "atanh"], [937, 2, 1, "", "binary_cross_entropy"], [550, 2, 1, "", "bitwise_and"], [554, 2, 1, "", "bitwise_invert"], [558, 2, 1, "", "bitwise_left_shift"], [562, 2, 1, "", "bitwise_or"], [566, 2, 1, "", "bitwise_right_shift"], [570, 2, 1, "", "bitwise_xor"], [434, 2, 1, "", "can_cast"], [574, 2, 1, "", "ceil"], [867, 2, 1, "", "cholesky"], [953, 2, 1, "", "clip"], [958, 2, 1, "", "concat"], [962, 2, 1, "", "constant_pad"], [578, 2, 1, "", "cos"], [582, 2, 1, "", "cosh"], [870, 2, 1, "", "cross"], [942, 2, 1, "", "cross_entropy"], [910, 2, 1, "", "det"], [876, 2, 1, "", "diagonal"], [610, 2, 1, "", "divide"], [879, 2, 1, "", "eigh"], [882, 2, 1, "", "eigvalsh"], [1073, 2, 1, "", "einsum"], [618, 2, 1, "", "equal"], [595, 2, 1, "", "erf"], [658, 2, 1, "", "exp"], [966, 2, 1, "", "expand_dims"], [603, 2, 1, "", "expm1"], [970, 2, 1, "", "flip"], [610, 2, 1, "", "floor"], [611, 2, 1, "", "floor_divide"], [777, 2, 1, "", "gather_nd"], [618, 2, 1, "", "greater"], [619, 2, 1, "", "greater_equal"], [904, 2, 1, "", "inv"], [623, 2, 1, "", "isfinite"], [627, 2, 1, "", "isinf"], [631, 2, 1, "", "isnan"], [1035, 2, 1, "", "layer_norm"], [635, 2, 1, "", "less"], [639, 2, 1, "", "less_equal"], [643, 2, 1, "", "log"], [647, 2, 1, "", "log10"], [651, 2, 1, "", "log1p"], [655, 2, 1, "", "log2"], [659, 2, 1, "", "logaddexp"], [663, 2, 1, "", "logical_and"], [667, 2, 1, "", "logical_not"], [671, 2, 1, "", "logical_or"], [675, 2, 1, "", "logical_xor"], [888, 2, 1, "", "matmul"], [892, 2, 1, "", "matrix_norm"], [896, 2, 1, "", "matrix_rank"], [899, 2, 1, "", "matrix_transpose"], [1077, 2, 1, "", "max"], [1081, 2, 1, "", "mean"], [1085, 2, 1, "", "min"], [681, 2, 1, "", "multiply"], [686, 2, 1, "", "negative"], [690, 2, 1, "", "not_equal"], [902, 2, 1, "", "outer"], [974, 2, 1, "", "permute_dims"], [905, 2, 1, "", "pinv"], [694, 2, 1, "", "positive"], [698, 2, 1, "", "pow"], [1089, 2, 1, "", "prod"], [908, 2, 1, "", "qr"], [702, 2, 1, "", "remainder"], [978, 2, 1, "", "repeat"], [982, 2, 1, "", "reshape"], [986, 2, 1, "", "roll"], [706, 2, 1, "", "round"], [710, 2, 1, "", "sign"], [714, 2, 1, "", "sin"], [718, 2, 1, "", "sinh"], [912, 2, 1, "", "solve"], [1067, 2, 1, "", "sort"], [947, 2, 1, "", "sparse_cross_entropy"], [722, 2, 1, "", "sqrt"], [726, 2, 1, "", "square"], [992, 2, 1, "", "squeeze"], [996, 2, 1, "", "stack"], [1093, 2, 1, "", "std"], [731, 2, 1, "", "subtract"], [1097, 2, 1, "", "sum"], [917, 2, 1, "", "svd"], [918, 2, 1, "", "svdvals"], [1000, 2, 1, "", "swapaxes"], [736, 2, 1, "", "tan"], [740, 2, 1, "", "tanh"], [921, 2, 1, "", "tensordot"], [1004, 2, 1, "", "tile"], [924, 2, 1, "", "trace"], [744, 2, 1, "", "trunc"], [1101, 2, 1, "", "var"], [927, 2, 1, "", "vecdot"], [930, 2, 1, "", "vector_norm"], [933, 2, 1, "", "vector_to_skew_symmetric_matrix"], [1008, 2, 1, "", "zero_pad"]], "ivy.array.conversions": [[117, 2, 1, "", "args_to_ivy"], [118, 2, 1, "", "args_to_native"], [119, 2, 1, "", "to_ivy"], [120, 2, 1, "", "to_native"]], "ivy.array.creation": [[122, 1, 1, "", "ArrayWithCreation"]], "ivy.array.data_type": [[124, 1, 1, "", "ArrayWithDataTypes"]], "ivy.array.data_type.ArrayWithDataTypes": [[124, 3, 1, "", "can_cast"]], "ivy.array.device": [[126, 1, 1, "", "ArrayWithDevice"]], "ivy.array.elementwise": [[128, 1, 1, "", "ArrayWithElementwise"]], "ivy.array.elementwise.ArrayWithElementwise": [[128, 3, 1, "", "abs"], [128, 3, 1, "", "acos"], [128, 3, 1, "", "acosh"], [128, 3, 1, "", "add"], [128, 3, 1, "", "asin"], [128, 3, 1, "", "asinh"], [128, 3, 1, "", "atan"], [128, 3, 1, "", "atan2"], [128, 3, 1, "", "atanh"], [128, 3, 1, "", "bitwise_and"], [128, 3, 1, "", "bitwise_invert"], [128, 3, 1, "", "bitwise_left_shift"], [128, 3, 1, "", "bitwise_or"], [128, 3, 1, "", "bitwise_right_shift"], [128, 3, 1, "", "bitwise_xor"], [128, 3, 1, "", "ceil"], [128, 3, 1, "", "cos"], [128, 3, 1, "", "cosh"], [128, 3, 1, "", "divide"], [128, 3, 1, "", "equal"], [128, 3, 1, "", "erf"], [128, 3, 1, "", "exp"], [128, 3, 1, "", "expm1"], [128, 3, 1, "", "floor"], [128, 3, 1, "", "floor_divide"], [128, 3, 1, "", "greater"], [128, 3, 1, "", "greater_equal"], [128, 3, 1, "", "isfinite"], [128, 3, 1, "", "isinf"], [128, 3, 1, "", "isnan"], [128, 3, 1, "", "less"], [128, 3, 1, "", "less_equal"], [128, 3, 1, "", "log"], [128, 3, 1, "", "log10"], [128, 3, 1, "", "log1p"], [128, 3, 1, "", "log2"], [128, 3, 1, "", "logaddexp"], [128, 3, 1, "", "logical_and"], [128, 3, 1, "", "logical_not"], [128, 3, 1, "", "logical_or"], [128, 3, 1, "", "logical_xor"], [128, 3, 1, "", "multiply"], [128, 3, 1, "", "negative"], [128, 3, 1, "", "not_equal"], [128, 3, 1, "", "positive"], [128, 3, 1, "", "pow"], [128, 3, 1, "", "remainder"], [128, 3, 1, "", "round"], [128, 3, 1, "", "sign"], [128, 3, 1, "", "sin"], [128, 3, 1, "", "sinh"], [128, 3, 1, "", "sqrt"], [128, 3, 1, "", "square"], [128, 3, 1, "", "subtract"], [128, 3, 1, "", "tan"], [128, 3, 1, "", "tanh"], [128, 3, 1, "", "trunc"]], "ivy.array.general": [[130, 1, 1, "", "ArrayWithGeneral"]], "ivy.array.general.ArrayWithGeneral": [[130, 3, 1, "", "all_equal"], [130, 3, 1, "", "gather_nd"]], "ivy.array.gradients": [[132, 1, 1, "", "ArrayWithGradients"]], "ivy.array.image": [[134, 1, 1, "", "ArrayWithImage"]], "ivy.array.layers": [[136, 1, 1, "", "ArrayWithLayers"]], "ivy.array.linear_algebra": [[138, 1, 1, "", "ArrayWithLinearAlgebra"]], "ivy.array.linear_algebra.ArrayWithLinearAlgebra": [[138, 3, 1, "", "cholesky"], [138, 3, 1, "", "cross"], [138, 3, 1, "", "det"], [138, 3, 1, "", "diagonal"], [138, 3, 1, "", "eigh"], [138, 3, 1, "", "eigvalsh"], [138, 3, 1, "", "inv"], [138, 3, 1, "", "matmul"], [138, 3, 1, "", "matrix_norm"], [138, 3, 1, "", "matrix_rank"], [138, 3, 1, "", "matrix_transpose"], [138, 3, 1, "", "outer"], [138, 3, 1, "", "pinv"], [138, 3, 1, "", "qr"], [138, 3, 1, "", "solve"], [138, 3, 1, "", "svd"], [138, 3, 1, "", "svdvals"], [138, 3, 1, "", "tensordot"], [138, 3, 1, "", "trace"], [138, 3, 1, "", "vecdot"], [138, 3, 1, "", "vector_norm"], [138, 3, 1, "", "vector_to_skew_symmetric_matrix"]], "ivy.array.losses": [[140, 1, 1, "", "ArrayWithLosses"]], "ivy.array.losses.ArrayWithLosses": [[140, 3, 1, "", "binary_cross_entropy"], [140, 3, 1, "", "cross_entropy"], [140, 3, 1, "", "sparse_cross_entropy"]], "ivy.array.manipulation": [[142, 1, 1, "", "ArrayWithManipulation"]], "ivy.array.manipulation.ArrayWithManipulation": [[142, 3, 1, "", "clip"], [142, 3, 1, "", "concat"], [142, 3, 1, "", "constant_pad"], [142, 3, 1, "", "expand_dims"], [142, 3, 1, "", "flip"], [142, 3, 1, "", "permute_dims"], [142, 3, 1, "", "repeat"], [142, 3, 1, "", "reshape"], [142, 3, 1, "", "roll"], [142, 3, 1, "", "squeeze"], [142, 3, 1, "", "stack"], [142, 3, 1, "", "swapaxes"], [142, 3, 1, "", "tile"], [142, 3, 1, "", "zero_pad"]], "ivy.array.norms": [[144, 1, 1, "", "ArrayWithNorms"]], "ivy.array.norms.ArrayWithNorms": [[144, 3, 1, "", "layer_norm"]], "ivy.array.random": [[146, 1, 1, "", "ArrayWithRandom"]], "ivy.array.searching": [[148, 1, 1, "", "ArrayWithSearching"]], "ivy.array.set": [[150, 1, 1, "", "ArrayWithSet"]], "ivy.array.sorting": [[152, 1, 1, "", "ArrayWithSorting"]], "ivy.array.sorting.ArrayWithSorting": [[152, 3, 1, "", "argsort"], [152, 3, 1, "", "sort"]], "ivy.array.statistical": [[154, 1, 1, "", "ArrayWithStatistical"]], "ivy.array.statistical.ArrayWithStatistical": [[154, 3, 1, "", "einsum"], [154, 3, 1, "", "max"], [154, 3, 1, "", "mean"], [154, 3, 1, "", "min"], [154, 3, 1, "", "prod"], [154, 3, 1, "", "std"], [154, 3, 1, "", "sum"], [154, 3, 1, "", "var"]], "ivy.array.utility": [[156, 1, 1, "", "ArrayWithUtility"]], "ivy.array.utility.ArrayWithUtility": [[156, 3, 1, "", "all"], [156, 3, 1, "", "any"]], "ivy.array.wrapping": [[158, 2, 1, "", "add_ivy_array_instance_methods"]], "ivy": [[159, 0, 0, "-", "backend_handler"], [384, 0, 0, "-", "func_wrapper"], [1116, 0, 0, "-", "inspection"], [1159, 0, 0, "-", "verbosity"]], "ivy.backend_handler": [[159, 1, 1, "", "ContextManager"], [161, 2, 1, "", "choose_random_backend"], [162, 2, 1, "", "clear_backend_stack"], [163, 2, 1, "", "current_backend"], [164, 2, 1, "", "get_backend"], [165, 2, 1, "", "set_backend"], [166, 2, 1, "", "try_import_ivy_jax"], [167, 2, 1, "", "try_import_ivy_mxnet"], [168, 2, 1, "", "try_import_ivy_numpy"], [169, 2, 1, "", "try_import_ivy_tf"], [170, 2, 1, "", "try_import_ivy_torch"], [171, 2, 1, "", "unset_backend"]], "ivy.backend_handler.ContextManager": [[159, 3, 1, "", "__init__"]], "ivy.container": [[176, 0, 0, "-", "activations"], [178, 0, 0, "-", "base"], [180, 0, 0, "-", "container"], [183, 0, 0, "-", "container_methods"], [307, 0, 0, "-", "creation"], [309, 0, 0, "-", "data_type"], [311, 0, 0, "-", "device"], [313, 0, 0, "-", "elementwise"], [315, 0, 0, "-", "general"], [317, 0, 0, "-", "gradients"], [319, 0, 0, "-", "image"], [321, 0, 0, "-", "layers"], [323, 0, 0, "-", "linear_algebra"], [325, 0, 0, "-", "losses"], [327, 0, 0, "-", "manipulation"], [329, 0, 0, "-", "norms"], [331, 0, 0, "-", "random"], [333, 0, 0, "-", "searching"], [335, 0, 0, "-", "set"], [337, 0, 0, "-", "sorting"], [339, 0, 0, "-", "statistical"], [341, 0, 0, "-", "utility"], [343, 0, 0, "-", "wrapping"]], "ivy.container.activations": [[177, 1, 1, "", "ContainerWithActivations"]], "ivy.container.base": [[179, 1, 1, "", "ContainerBase"]], "ivy.container.base.ContainerBase": [[179, 3, 1, "", "__getitem__"], [179, 3, 1, "", "__init__"], [179, 3, 1, "", "__setitem__"], [179, 3, 1, "", "all_false"], [179, 3, 1, "", "all_key_chains"], [179, 3, 1, "", "all_true"], [179, 3, 1, "", "arrays_as_lists"], [179, 3, 1, "", "as_arrays"], [179, 3, 1, "", "as_bools"], [179, 3, 1, "", "as_ones"], [179, 3, 1, "", "as_random_uniform"], [179, 3, 1, "", "as_variables"], [179, 3, 1, "", "as_zeros"], [179, 3, 1, "", "assert_contains_sub_container"], [179, 3, 1, "", "assert_contains_sub_structure"], [179, 3, 1, "", "assert_identical"], [179, 3, 1, "", "assert_identical_structure"], [179, 3, 1, "", "at_key_chain"], [179, 3, 1, "", "at_key_chains"], [179, 3, 1, "", "at_keys"], [179, 3, 1, "", "clip"], [179, 3, 1, "", "combine"], [179, 3, 1, "", "common_key_chains"], [179, 4, 1, "", "config"], [179, 3, 1, "", "contains_sub_container"], [179, 3, 1, "", "contains_sub_structure"], [179, 3, 1, "", "copy"], [179, 3, 1, "", "create_if_absent"], [179, 3, 1, "", "cutoff_at_depth"], [179, 3, 1, "", "cutoff_at_height"], [179, 3, 1, "", "deep_copy"], [179, 4, 1, "", "dev"], [179, 3, 1, "", "dev_clone"], [179, 3, 1, "", "dev_dist"], [179, 4, 1, "", "dev_str"], [179, 3, 1, "", "diff"], [179, 3, 1, "", "dtype"], [179, 3, 1, "", "einops_rearrange"], [179, 3, 1, "", "einops_reduce"], [179, 3, 1, "", "einops_repeat"], [179, 3, 1, "", "find_sub_container"], [179, 3, 1, "", "find_sub_structure"], [179, 3, 1, "", "flatten_key_chain"], [179, 3, 1, "", "flatten_key_chains"], [179, 3, 1, "", "format_key_chains"], [179, 3, 1, "", "from_disk_as_hdf5"], [179, 3, 1, "", "from_disk_as_json"], [179, 3, 1, "", "from_disk_as_pickled"], [179, 3, 1, "", "from_flat_list"], [179, 3, 1, "", "from_numpy"], [179, 3, 1, "", "gather"], [179, 3, 1, "", "gather_nd"], [179, 3, 1, "", "h5_file_size"], [179, 3, 1, "", "handle_inplace"], [179, 3, 1, "", "has_key"], [179, 3, 1, "", "has_key_chain"], [179, 3, 1, "", "has_nans"], [179, 3, 1, "", "identical"], [179, 3, 1, "", "identical_array_shapes"], [179, 3, 1, "", "identical_configs"], [179, 3, 1, "", "identical_structure"], [179, 3, 1, "", "if_exists"], [179, 3, 1, "", "inplace_update"], [179, 4, 1, "", "ivy"], [179, 3, 1, "", "key_chains_containing"], [179, 3, 1, "", "list_join"], [179, 3, 1, "", "list_stack"], [179, 3, 1, "", "map"], [179, 3, 1, "", "map_conts"], [179, 3, 1, "", "matrix_norm"], [179, 4, 1, "", "max_depth"], [179, 3, 1, "", "maximum"], [179, 3, 1, "", "minimum"], [179, 3, 1, "", "multi_map"], [179, 3, 1, "", "multi_map_in_static_method"], [179, 3, 1, "", "num_arrays"], [179, 3, 1, "", "overwrite_at_key_chain"], [179, 3, 1, "", "overwrite_at_key_chains"], [179, 3, 1, "", "prune_empty"], [179, 3, 1, "", "prune_key_chain"], [179, 3, 1, "", "prune_key_chains"], [179, 3, 1, "", "prune_key_from_key_chains"], [179, 3, 1, "", "prune_keys"], [179, 3, 1, "", "prune_keys_from_key_chains"], [179, 3, 1, "", "reduce"], [179, 3, 1, "", "remove_key_length_limit"], [179, 3, 1, "", "remove_print_limit"], [179, 3, 1, "", "reshape_like"], [179, 3, 1, "", "restructure"], [179, 3, 1, "", "restructure_key_chains"], [179, 3, 1, "", "set_at_key_chain"], [179, 3, 1, "", "set_at_key_chains"], [179, 3, 1, "", "set_at_keys"], [179, 3, 1, "", "set_framework"], [179, 3, 1, "", "set_ivy_backend"], [179, 4, 1, "", "shape"], [179, 4, 1, "", "shapes"], [179, 3, 1, "", "show"], [179, 3, 1, "", "show_sub_container"], [179, 3, 1, "", "shuffle"], [179, 3, 1, "", "shuffle_h5_file"], [179, 3, 1, "", "size_ordered_arrays"], [179, 3, 1, "", "slice_keys"], [179, 3, 1, "", "slice_via_key"], [179, 3, 1, "", "sort_by_key"], [179, 3, 1, "", "split"], [179, 3, 1, "", "stop_gradients"], [179, 3, 1, "", "structural_diff"], [179, 3, 1, "", "to_device"], [179, 3, 1, "", "to_dict"], [179, 3, 1, "", "to_disk_as_hdf5"], [179, 3, 1, "", "to_disk_as_json"], [179, 3, 1, "", "to_disk_as_pickled"], [179, 3, 1, "", "to_flat_list"], [179, 3, 1, "", "to_iterator"], [179, 3, 1, "", "to_iterator_keys"], [179, 3, 1, "", "to_iterator_values"], [179, 3, 1, "", "to_ivy"], [179, 3, 1, "", "to_jsonable"], [179, 3, 1, "", "to_list"], [179, 3, 1, "", "to_multi_dev"], [179, 3, 1, "", "to_native"], [179, 3, 1, "", "to_numpy"], [179, 3, 1, "", "to_raw"], [179, 3, 1, "", "trim_key"], [179, 3, 1, "", "try_kc"], [179, 3, 1, "", "unify"], [179, 3, 1, "", "unstack"], [179, 3, 1, "", "update_config"], [179, 3, 1, "", "vector_norm"], [179, 3, 1, "", "with_default_key_color"], [179, 3, 1, "", "with_entries_as_lists"], [179, 3, 1, "", "with_ivy_backend"], [179, 3, 1, "", "with_key_length_limit"], [179, 3, 1, "", "with_print_indent"], [179, 3, 1, "", "with_print_limit"], [179, 3, 1, "", "with_print_line_spacing"]], "ivy.container.container": [[181, 1, 1, "", "Container"], [182, 1, 1, "", "MultiDevContainer"]], "ivy.container.container.Container": [[181, 3, 1, "", "__add__"], [181, 3, 1, "", "__init__"], [181, 3, 1, "", "__radd__"], [181, 3, 1, "", "adam_step"], [181, 3, 1, "", "arange"], [181, 3, 1, "", "arg_info"], [181, 3, 1, "", "arg_names"], [181, 3, 1, "", "argmax"], [181, 3, 1, "", "argmin"], [181, 3, 1, "", "array"], [181, 3, 1, "", "array_equal"], [181, 3, 1, "", "arrays_equal"], [181, 3, 1, "", "as_ivy_dev"], [181, 3, 1, "", "as_ivy_dtype"], [181, 3, 1, "", "as_native_dev"], [181, 3, 1, "", "as_native_dtype"], [181, 3, 1, "", "asarray"], [181, 3, 1, "", "assert_supports_inplace"], [181, 3, 1, "", "astype"], [181, 3, 1, "", "broadcast_arrays"], [181, 3, 1, "", "broadcast_to"], [181, 3, 1, "", "cache_fn"], [181, 3, 1, "", "cholesky"], [181, 3, 1, "", "clear_mem_on_dev"], [181, 3, 1, "", "clip_matrix_norm"], [181, 3, 1, "", "closest_valid_dtype"], [181, 3, 1, "", "container_types"], [181, 3, 1, "", "conv1d"], [181, 3, 1, "", "conv1d_transpose"], [181, 3, 1, "", "conv2d"], [181, 3, 1, "", "conv2d_transpose"], [181, 3, 1, "", "conv3d"], [181, 3, 1, "", "conv3d_transpose"], [181, 3, 1, "", "copy_array"], [181, 3, 1, "", "cross"], [181, 3, 1, "", "cumprod"], [181, 3, 1, "", "cumsum"], [181, 3, 1, "", "current_backend"], [181, 3, 1, "", "current_backend_str"], [181, 3, 1, "", "default"], [181, 3, 1, "", "default_device"], [181, 3, 1, "", "default_dtype"], [181, 3, 1, "", "default_float_dtype"], [181, 3, 1, "", "default_int_dtype"], [181, 3, 1, "", "depthwise_conv2d"], [181, 3, 1, "", "det"], [181, 3, 1, "", "dev_clone_array"], [181, 3, 1, "", "dev_clone_iter"], [181, 3, 1, "", "dev_clone_nest"], [181, 3, 1, "", "dev_dist_array"], [181, 3, 1, "", "dev_dist_iter"], [181, 3, 1, "", "dev_dist_nest"], [181, 3, 1, "", "dev_unify"], [181, 3, 1, "", "dev_unify_array"], [181, 3, 1, "", "dev_unify_iter"], [181, 3, 1, "", "dev_unify_nest"], [181, 3, 1, "", "dev_util"], [181, 3, 1, "", "diagonal"], [181, 3, 1, "", "dropout"], [181, 3, 1, "", "dtype_bits"], [181, 3, 1, "", "eigh"], [181, 3, 1, "", "eigvalsh"], [181, 3, 1, "", "empty"], [181, 3, 1, "", "empty_like"], [181, 3, 1, "", "execute_with_gradients"], [181, 3, 1, "", "exists"], [181, 3, 1, "", "eye"], [181, 3, 1, "", "finfo"], [181, 3, 1, "", "floormod"], [181, 3, 1, "", "fourier_encode"], [181, 3, 1, "", "from_dlpack"], [181, 3, 1, "", "full"], [181, 3, 1, "", "full_like"], [181, 3, 1, "", "function_supported_dtypes"], [181, 3, 1, "", "function_unsupported_dtypes"], [181, 3, 1, "", "gelu"], [181, 3, 1, "", "get_all_arrays_in_memory"], [181, 3, 1, "", "get_all_ivy_arrays_on_dev"], [181, 3, 1, "", "get_min_base"], [181, 3, 1, "", "get_min_denominator"], [181, 3, 1, "", "get_num_dims"], [181, 3, 1, "", "get_referrers_recursive"], [181, 3, 1, "", "gpu_is_available"], [181, 3, 1, "", "handle_nestable"], [181, 3, 1, "", "handle_out_argument"], [181, 3, 1, "", "iinfo"], [181, 3, 1, "", "indices_where"], [181, 3, 1, "", "infer_device"], [181, 3, 1, "", "infer_dtype"], [181, 3, 1, "", "inplace_arrays_supported"], [181, 3, 1, "", "inplace_decrement"], [181, 3, 1, "", "inplace_increment"], [181, 3, 1, "", "inplace_variables_supported"], [181, 3, 1, "", "inputs_to_native_arrays"], [181, 3, 1, "", "inv"], [181, 3, 1, "", "invalid_dtype"], [181, 3, 1, "", "is_float_dtype"], [181, 3, 1, "", "is_int_dtype"], [181, 3, 1, "", "is_ivy_container"], [181, 3, 1, "", "leaky_relu"], [181, 3, 1, "", "linear"], [181, 3, 1, "", "linspace"], [181, 3, 1, "", "logspace"], [181, 3, 1, "", "lstm_update"], [181, 3, 1, "", "match_kwargs"], [181, 3, 1, "", "matrix_power"], [181, 3, 1, "", "matrix_rank"], [181, 3, 1, "", "matrix_transpose"], [181, 3, 1, "", "meshgrid"], [181, 3, 1, "", "multi_head_attention"], [181, 3, 1, "", "multinomial"], [181, 3, 1, "", "multiprocessing"], [181, 3, 1, "", "native_array"], [181, 3, 1, "", "nonzero"], [181, 3, 1, "", "num_arrays_in_memory"], [181, 3, 1, "", "num_cpu_cores"], [181, 3, 1, "", "num_gpus"], [181, 3, 1, "", "num_ivy_arrays_on_dev"], [181, 3, 1, "", "one_hot"], [181, 3, 1, "", "ones"], [181, 3, 1, "", "ones_like"], [181, 3, 1, "", "outer"], [181, 3, 1, "", "outputs_to_ivy_arrays"], [181, 3, 1, "", "percent_used_mem_on_dev"], [181, 3, 1, "", "pinv"], [181, 3, 1, "", "print_all_arrays_in_memory"], [181, 3, 1, "", "print_all_ivy_arrays_on_dev"], [181, 3, 1, "", "promote_types"], [181, 3, 1, "", "qr"], [181, 3, 1, "", "queue_timeout"], [181, 3, 1, "", "randint"], [181, 3, 1, "", "random_normal"], [181, 3, 1, "", "relu"], [181, 3, 1, "", "result_type"], [181, 3, 1, "", "scaled_dot_product_attention"], [181, 3, 1, "", "scatter_flat"], [181, 3, 1, "", "scatter_nd"], [181, 3, 1, "", "seed"], [181, 3, 1, "", "set_default_device"], [181, 3, 1, "", "set_default_dtype"], [181, 3, 1, "", "set_default_float_dtype"], [181, 3, 1, "", "set_default_int_dtype"], [181, 3, 1, "", "set_min_base"], [181, 3, 1, "", "set_min_denominator"], [181, 3, 1, "", "set_queue_timeout"], [181, 3, 1, "", "set_split_factor"], [181, 3, 1, "", "set_tmp_dir"], [181, 3, 1, "", "set_with_grads"], [181, 3, 1, "", "shape_to_tuple"], [181, 3, 1, "", "sigmoid"], [181, 3, 1, "", "slogdet"], [181, 3, 1, "", "softmax"], [181, 3, 1, "", "softplus"], [181, 3, 1, "", "solve"], [181, 3, 1, "", "split_factor"], [181, 3, 1, "", "split_func_call"], [181, 3, 1, "", "stable_divide"], [181, 3, 1, "", "stable_pow"], [181, 3, 1, "", "static_abs"], [181, 3, 1, "", "static_acos"], [181, 3, 1, "", "static_acosh"], [181, 3, 1, "", "static_adam_step"], [181, 3, 1, "", "static_all"], [181, 3, 1, "", "static_any"], [181, 3, 1, "", "static_arange"], [181, 3, 1, "", "static_arg_info"], [181, 3, 1, "", "static_arg_names"], [181, 3, 1, "", "static_argmax"], [181, 3, 1, "", "static_argmin"], [181, 3, 1, "", "static_array"], [181, 3, 1, "", "static_array_equal"], [181, 3, 1, "", "static_arrays_equal"], [181, 3, 1, "", "static_as_ivy_dev"], [181, 3, 1, "", "static_as_ivy_dtype"], [181, 3, 1, "", "static_as_native_dev"], [181, 3, 1, "", "static_as_native_dtype"], [181, 3, 1, "", "static_asarray"], [181, 3, 1, "", "static_asin"], [181, 3, 1, "", "static_asinh"], [181, 3, 1, "", "static_assert_supports_inplace"], [181, 3, 1, "", "static_astype"], [181, 3, 1, "", "static_atan"], [181, 3, 1, "", "static_atan2"], [181, 3, 1, "", "static_atanh"], [181, 3, 1, "", "static_bitwise_and"], [181, 3, 1, "", "static_bitwise_invert"], [181, 3, 1, "", "static_bitwise_left_shift"], [181, 3, 1, "", "static_bitwise_or"], [181, 3, 1, "", "static_bitwise_right_shift"], [181, 3, 1, "", "static_bitwise_xor"], [181, 3, 1, "", "static_broadcast_arrays"], [181, 3, 1, "", "static_broadcast_to"], [181, 3, 1, "", "static_cache_fn"], [181, 3, 1, "", "static_ceil"], [181, 3, 1, "", "static_cholesky"], [181, 3, 1, "", "static_clear_mem_on_dev"], [181, 3, 1, "", "static_clip_matrix_norm"], [181, 3, 1, "", "static_clip_vector_norm"], [181, 3, 1, "", "static_closest_valid_dtype"], [181, 3, 1, "", "static_concat"], [181, 3, 1, "", "static_constant_pad"], [181, 3, 1, "", "static_container_types"], [181, 3, 1, "", "static_conv1d"], [181, 3, 1, "", "static_conv1d_transpose"], [181, 3, 1, "", "static_conv2d"], [181, 3, 1, "", "static_conv2d_transpose"], [181, 3, 1, "", "static_conv3d"], [181, 3, 1, "", "static_conv3d_transpose"], [181, 3, 1, "", "static_copy_array"], [181, 3, 1, "", "static_cos"], [181, 3, 1, "", "static_cosh"], [181, 3, 1, "", "static_cross"], [181, 3, 1, "", "static_cumprod"], [181, 3, 1, "", "static_cumsum"], [181, 3, 1, "", "static_current_backend"], [181, 3, 1, "", "static_current_backend_str"], [181, 3, 1, "", "static_default"], [181, 3, 1, "", "static_default_device"], [181, 3, 1, "", "static_default_dtype"], [181, 3, 1, "", "static_default_float_dtype"], [181, 3, 1, "", "static_default_int_dtype"], [181, 3, 1, "", "static_depthwise_conv2d"], [181, 3, 1, "", "static_det"], [181, 3, 1, "", "static_dev"], [181, 3, 1, "", "static_dev_clone"], [181, 3, 1, "", "static_dev_clone_array"], [181, 3, 1, "", "static_dev_clone_iter"], [181, 3, 1, "", "static_dev_clone_nest"], [181, 3, 1, "", "static_dev_dist"], [181, 3, 1, "", "static_dev_dist_array"], [181, 3, 1, "", "static_dev_dist_iter"], [181, 3, 1, "", "static_dev_dist_nest"], [181, 3, 1, "", "static_dev_unify"], [181, 3, 1, "", "static_dev_unify_array"], [181, 3, 1, "", "static_dev_unify_iter"], [181, 3, 1, "", "static_dev_unify_nest"], [181, 3, 1, "", "static_dev_util"], [181, 3, 1, "", "static_diagonal"], [181, 3, 1, "", "static_dropout"], [181, 3, 1, "", "static_dtype"], [181, 3, 1, "", "static_dtype_bits"], [181, 3, 1, "", "static_eigh"], [181, 3, 1, "", "static_eigvalsh"], [181, 3, 1, "", "static_einops_rearrange"], [181, 3, 1, "", "static_einops_reduce"], [181, 3, 1, "", "static_einops_repeat"], [181, 3, 1, "", "static_einsum"], [181, 3, 1, "", "static_empty"], [181, 3, 1, "", "static_empty_like"], [181, 3, 1, "", "static_equal"], [181, 3, 1, "", "static_erf"], [181, 3, 1, "", "static_execute_with_gradients"], [181, 3, 1, "", "static_exists"], [181, 3, 1, "", "static_exp"], [181, 3, 1, "", "static_expand_dims"], [181, 3, 1, "", "static_expm1"], [181, 3, 1, "", "static_eye"], [181, 3, 1, "", "static_finfo"], [181, 3, 1, "", "static_flip"], [181, 3, 1, "", "static_floor"], [181, 3, 1, "", "static_floor_divide"], [181, 3, 1, "", "static_floormod"], [181, 3, 1, "", "static_fourier_encode"], [181, 3, 1, "", "static_from_dlpack"], [181, 3, 1, "", "static_full"], [181, 3, 1, "", "static_full_like"], [181, 3, 1, "", "static_function_supported_dtypes"], [181, 3, 1, "", "static_function_unsupported_dtypes"], [181, 3, 1, "", "static_gather"], [181, 3, 1, "", "static_gelu"], [181, 3, 1, "", "static_get_all_arrays_in_memory"], [181, 3, 1, "", "static_get_all_ivy_arrays_on_dev"], [181, 3, 1, "", "static_get_min_base"], [181, 3, 1, "", "static_get_min_denominator"], [181, 3, 1, "", "static_get_num_dims"], [181, 3, 1, "", "static_get_referrers_recursive"], [181, 3, 1, "", "static_gpu_is_available"], [181, 3, 1, "", "static_greater"], [181, 3, 1, "", "static_greater_equal"], [181, 3, 1, "", "static_handle_nestable"], [181, 3, 1, "", "static_handle_out_argument"], [181, 3, 1, "", "static_has_nans"], [181, 3, 1, "", "static_iinfo"], [181, 3, 1, "", "static_indices_where"], [181, 3, 1, "", "static_infer_device"], [181, 3, 1, "", "static_infer_dtype"], [181, 3, 1, "", "static_inplace_arrays_supported"], [181, 3, 1, "", "static_inplace_decrement"], [181, 3, 1, "", "static_inplace_increment"], [181, 3, 1, "", "static_inplace_update"], [181, 3, 1, "", "static_inplace_variables_supported"], [181, 3, 1, "", "static_inputs_to_native_arrays"], [181, 3, 1, "", "static_inv"], [181, 3, 1, "", "static_invalid_dtype"], [181, 3, 1, "", "static_is_array"], [181, 3, 1, "", "static_is_float_dtype"], [181, 3, 1, "", "static_is_int_dtype"], [181, 3, 1, "", "static_is_ivy_array"], [181, 3, 1, "", "static_is_ivy_container"], [181, 3, 1, "", "static_is_native_array"], [181, 3, 1, "", "static_is_variable"], [181, 3, 1, "", "static_isfinite"], [181, 3, 1, "", "static_isinf"], [181, 3, 1, "", "static_isnan"], [181, 3, 1, "", "static_layer_norm"], [181, 3, 1, "", "static_leaky_relu"], [181, 3, 1, "", "static_less"], [181, 3, 1, "", "static_less_equal"], [181, 3, 1, "", "static_linear"], [181, 3, 1, "", "static_linspace"], [181, 3, 1, "", "static_log"], [181, 3, 1, "", "static_log10"], [181, 3, 1, "", "static_log1p"], [181, 3, 1, "", "static_log2"], [181, 3, 1, "", "static_logaddexp"], [181, 3, 1, "", "static_logical_and"], [181, 3, 1, "", "static_logical_not"], [181, 3, 1, "", "static_logical_or"], [181, 3, 1, "", "static_logical_xor"], [181, 3, 1, "", "static_logspace"], [181, 3, 1, "", "static_lstm_update"], [181, 3, 1, "", "static_match_kwargs"], [181, 3, 1, "", "static_matmul"], [181, 3, 1, "", "static_matrix_norm"], [181, 3, 1, "", "static_matrix_power"], [181, 3, 1, "", "static_matrix_rank"], [181, 3, 1, "", "static_matrix_transpose"], [181, 3, 1, "", "static_max"], [181, 3, 1, "", "static_maximum"], [181, 3, 1, "", "static_mean"], [181, 3, 1, "", "static_meshgrid"], [181, 3, 1, "", "static_min"], [181, 3, 1, "", "static_minimum"], [181, 3, 1, "", "static_multi_head_attention"], [181, 3, 1, "", "static_multinomial"], [181, 3, 1, "", "static_multiprocessing"], [181, 3, 1, "", "static_native_array"], [181, 3, 1, "", "static_negative"], [181, 3, 1, "", "static_nonzero"], [181, 3, 1, "", "static_not_equal"], [181, 3, 1, "", "static_num_arrays_in_memory"], [181, 3, 1, "", "static_num_cpu_cores"], [181, 3, 1, "", "static_num_gpus"], [181, 3, 1, "", "static_num_ivy_arrays_on_dev"], [181, 3, 1, "", "static_one_hot"], [181, 3, 1, "", "static_ones"], [181, 3, 1, "", "static_ones_like"], [181, 3, 1, "", "static_outer"], [181, 3, 1, "", "static_outputs_to_ivy_arrays"], [181, 3, 1, "", "static_percent_used_mem_on_dev"], [181, 3, 1, "", "static_permute_dims"], [181, 3, 1, "", "static_pinv"], [181, 3, 1, "", "static_positive"], [181, 3, 1, "", "static_pow"], [181, 3, 1, "", "static_print_all_arrays_in_memory"], [181, 3, 1, "", "static_print_all_ivy_arrays_on_dev"], [181, 3, 1, "", "static_prod"], [181, 3, 1, "", "static_promote_types"], [181, 3, 1, "", "static_qr"], [181, 3, 1, "", "static_queue_timeout"], [181, 3, 1, "", "static_random_normal"], [181, 3, 1, "", "static_relu"], [181, 3, 1, "", "static_remainder"], [181, 3, 1, "", "static_repeat"], [181, 3, 1, "", "static_reshape"], [181, 3, 1, "", "static_result_type"], [181, 3, 1, "", "static_round"], [181, 3, 1, "", "static_scaled_dot_product_attention"], [181, 3, 1, "", "static_scatter_flat"], [181, 3, 1, "", "static_scatter_nd"], [181, 3, 1, "", "static_seed"], [181, 3, 1, "", "static_set_default_device"], [181, 3, 1, "", "static_set_default_dtype"], [181, 3, 1, "", "static_set_default_float_dtype"], [181, 3, 1, "", "static_set_default_int_dtype"], [181, 3, 1, "", "static_set_min_base"], [181, 3, 1, "", "static_set_min_denominator"], [181, 3, 1, "", "static_set_queue_timeout"], [181, 3, 1, "", "static_set_split_factor"], [181, 3, 1, "", "static_set_tmp_dir"], [181, 3, 1, "", "static_set_with_grads"], [181, 3, 1, "", "static_shape"], [181, 3, 1, "", "static_shape_to_tuple"], [181, 3, 1, "", "static_shuffle"], [181, 3, 1, "", "static_sigmoid"], [181, 3, 1, "", "static_sign"], [181, 3, 1, "", "static_sin"], [181, 3, 1, "", "static_sinh"], [181, 3, 1, "", "static_slogdet"], [181, 3, 1, "", "static_softmax"], [181, 3, 1, "", "static_softplus"], [181, 3, 1, "", "static_solve"], [181, 3, 1, "", "static_split"], [181, 3, 1, "", "static_split_factor"], [181, 3, 1, "", "static_split_func_call"], [181, 3, 1, "", "static_sqrt"], [181, 3, 1, "", "static_square"], [181, 3, 1, "", "static_squeeze"], [181, 3, 1, "", "static_stable_divide"], [181, 3, 1, "", "static_stable_pow"], [181, 3, 1, "", "static_stack"], [181, 3, 1, "", "static_std"], [181, 3, 1, "", "static_stop_gradient"], [181, 3, 1, "", "static_sum"], [181, 3, 1, "", "static_supports_inplace"], [181, 3, 1, "", "static_svd"], [181, 3, 1, "", "static_svdvals"], [181, 3, 1, "", "static_swapaxes"], [181, 3, 1, "", "static_tanh"], [181, 3, 1, "", "static_tensordot"], [181, 3, 1, "", "static_tile"], [181, 3, 1, "", "static_tmp_dir"], [181, 3, 1, "", "static_to_device"], [181, 3, 1, "", "static_to_list"], [181, 3, 1, "", "static_to_native_arrays_and_back"], [181, 3, 1, "", "static_to_numpy"], [181, 3, 1, "", "static_to_scalar"], [181, 3, 1, "", "static_total_mem_on_dev"], [181, 3, 1, "", "static_tpu_is_available"], [181, 3, 1, "", "static_trace"], [181, 3, 1, "", "static_tril"], [181, 3, 1, "", "static_triu"], [181, 3, 1, "", "static_trunc"], [181, 3, 1, "", "static_try_else_none"], [181, 3, 1, "", "static_type_promote_arrays"], [181, 3, 1, "", "static_unique_all"], [181, 3, 1, "", "static_unique_counts"], [181, 3, 1, "", "static_unique_inverse"], [181, 3, 1, "", "static_unique_values"], [181, 3, 1, "", "static_unset_default_device"], [181, 3, 1, "", "static_unset_default_dtype"], [181, 3, 1, "", "static_unset_default_float_dtype"], [181, 3, 1, "", "static_unset_default_int_dtype"], [181, 3, 1, "", "static_unset_with_grads"], [181, 3, 1, "", "static_unstack"], [181, 3, 1, "", "static_used_mem_on_dev"], [181, 3, 1, "", "static_valid_dtype"], [181, 3, 1, "", "static_value_is_nan"], [181, 3, 1, "", "static_var"], [181, 3, 1, "", "static_variable"], [181, 3, 1, "", "static_variable_data"], [181, 3, 1, "", "static_vecdot"], [181, 3, 1, "", "static_vector_norm"], [181, 3, 1, "", "static_vector_to_skew_symmetric_matrix"], [181, 3, 1, "", "static_where"], [181, 3, 1, "", "static_with_grads"], [181, 3, 1, "", "static_zero_pad"], [181, 3, 1, "", "static_zeros"], [181, 3, 1, "", "static_zeros_like"], [181, 3, 1, "", "stop_gradient"], [181, 3, 1, "", "supports_inplace"], [181, 3, 1, "", "svd"], [181, 3, 1, "", "svdvals"], [181, 3, 1, "", "tensordot"], [181, 3, 1, "", "tmp_dir"], [181, 3, 1, "", "to_native_arrays_and_back"], [181, 3, 1, "", "to_scalar"], [181, 3, 1, "", "total_mem_on_dev"], [181, 3, 1, "", "tpu_is_available"], [181, 3, 1, "", "trace"], [181, 3, 1, "", "tril"], [181, 3, 1, "", "triu"], [181, 3, 1, "", "try_else_none"], [181, 3, 1, "", "type_promote_arrays"], [181, 3, 1, "", "unique_all"], [181, 3, 1, "", "unique_counts"], [181, 3, 1, "", "unique_inverse"], [181, 3, 1, "", "unique_values"], [181, 3, 1, "", "unset_default_device"], [181, 3, 1, "", "unset_default_dtype"], [181, 3, 1, "", "unset_default_float_dtype"], [181, 3, 1, "", "unset_default_int_dtype"], [181, 3, 1, "", "unset_with_grads"], [181, 3, 1, "", "used_mem_on_dev"], [181, 3, 1, "", "valid_dtype"], [181, 3, 1, "", "value_is_nan"], [181, 3, 1, "", "variable"], [181, 3, 1, "", "variable_data"], [181, 3, 1, "", "vecdot"], [181, 3, 1, "", "vector_to_skew_symmetric_matrix"], [181, 3, 1, "", "where"], [181, 3, 1, "", "with_grads"], [181, 3, 1, "", "zeros"], [181, 3, 1, "", "zeros_like"]], "ivy.container.container.MultiDevContainer": [[182, 3, 1, "", "__init__"], [182, 3, 1, "", "at_dev"], [182, 3, 1, "", "at_devs"]], "ivy.container.container_methods": [[183, 2, 1, "", "__add__"], [183, 2, 1, "", "__init__"], [183, 2, 1, "", "__radd__"], [514, 2, 1, "", "abs"], [520, 2, 1, "", "acos"], [584, 2, 1, "", "acosh"], [825, 2, 1, "", "adam_update"], [658, 2, 1, "", "add"], [189, 2, 1, "", "add_ivy_container_instance_methods"], [1107, 2, 1, "", "all"], [750, 2, 1, "", "all_equal"], [1111, 2, 1, "", "any"], [1063, 2, 1, "", "argsort"], [531, 2, 1, "", "asin"], [535, 2, 1, "", "asinh"], [196, 2, 1, "", "at_dev"], [197, 2, 1, "", "at_devs"], [545, 2, 1, "", "atan"], [543, 2, 1, "", "atan2"], [742, 2, 1, "", "atanh"], [938, 2, 1, "", "binary_cross_entropy"], [551, 2, 1, "", "bitwise_and"], [555, 2, 1, "", "bitwise_invert"], [559, 2, 1, "", "bitwise_left_shift"], [563, 2, 1, "", "bitwise_or"], [567, 2, 1, "", "bitwise_right_shift"], [571, 2, 1, "", "bitwise_xor"], [435, 2, 1, "", "can_cast"], [575, 2, 1, "", "ceil"], [954, 2, 1, "", "clip"], [761, 2, 1, "", "clip_vector_norm"], [959, 2, 1, "", "concat"], [963, 2, 1, "", "constant_pad"], [584, 2, 1, "", "cos"], [583, 2, 1, "", "cosh"], [943, 2, 1, "", "cross_entropy"], [610, 2, 1, "", "divide"], [1099, 2, 1, "", "einsum"], [618, 2, 1, "", "equal"], [596, 2, 1, "", "erf"], [658, 2, 1, "", "exp"], [967, 2, 1, "", "expand_dims"], [604, 2, 1, "", "expm1"], [971, 2, 1, "", "flip"], [610, 2, 1, "", "floor"], [612, 2, 1, "", "floor_divide"], [778, 2, 1, "", "gather_nd"], [830, 2, 1, "", "gradient_descent_update"], [618, 2, 1, "", "greater"], [620, 2, 1, "", "greater_equal"], [624, 2, 1, "", "isfinite"], [628, 2, 1, "", "isinf"], [632, 2, 1, "", "isnan"], [835, 2, 1, "", "lamb_update"], [839, 2, 1, "", "lars_update"], [1036, 2, 1, "", "layer_norm"], [636, 2, 1, "", "less"], [640, 2, 1, "", "less_equal"], [644, 2, 1, "", "log"], [648, 2, 1, "", "log10"], [652, 2, 1, "", "log1p"], [656, 2, 1, "", "log2"], [660, 2, 1, "", "logaddexp"], [664, 2, 1, "", "logical_and"], [668, 2, 1, "", "logical_not"], [672, 2, 1, "", "logical_or"], [676, 2, 1, "", "logical_xor"], [889, 2, 1, "", "matmul"], [1078, 2, 1, "", "max"], [1082, 2, 1, "", "mean"], [1086, 2, 1, "", "min"], [682, 2, 1, "", "multiply"], [687, 2, 1, "", "negative"], [691, 2, 1, "", "not_equal"], [843, 2, 1, "", "optimizer_update"], [975, 2, 1, "", "permute_dims"], [695, 2, 1, "", "positive"], [699, 2, 1, "", "pow"], [1090, 2, 1, "", "prod"], [1045, 2, 1, "", "random_uniform"], [703, 2, 1, "", "remainder"], [979, 2, 1, "", "repeat"], [983, 2, 1, "", "reshape"], [987, 2, 1, "", "roll"], [707, 2, 1, "", "round"], [711, 2, 1, "", "sign"], [715, 2, 1, "", "sin"], [719, 2, 1, "", "sinh"], [1068, 2, 1, "", "sort"], [948, 2, 1, "", "sparse_cross_entropy"], [723, 2, 1, "", "sqrt"], [727, 2, 1, "", "square"], [993, 2, 1, "", "squeeze"], [997, 2, 1, "", "stack"], [827, 2, 1, "", "static_adam_update"], [658, 2, 1, "", "static_add"], [752, 2, 1, "", "static_all_equal"], [1065, 2, 1, "", "static_argsort"], [940, 2, 1, "", "static_binary_cross_entropy"], [437, 2, 1, "", "static_can_cast"], [956, 2, 1, "", "static_clip"], [945, 2, 1, "", "static_cross_entropy"], [610, 2, 1, "", "static_divide"], [780, 2, 1, "", "static_gather_nd"], [832, 2, 1, "", "static_gradient_descent_update"], [837, 2, 1, "", "static_lamb_update"], [841, 2, 1, "", "static_lars_update"], [684, 2, 1, "", "static_multiply"], [845, 2, 1, "", "static_optimizer_update"], [1042, 2, 1, "", "static_randint"], [1047, 2, 1, "", "static_random_uniform"], [989, 2, 1, "", "static_roll"], [1070, 2, 1, "", "static_sort"], [950, 2, 1, "", "static_sparse_cross_entropy"], [730, 2, 1, "", "static_subtract"], [742, 2, 1, "", "static_tan"], [1094, 2, 1, "", "std"], [732, 2, 1, "", "subtract"], [1098, 2, 1, "", "sum"], [1001, 2, 1, "", "swapaxes"], [742, 2, 1, "", "tan"], [741, 2, 1, "", "tanh"], [1005, 2, 1, "", "tile"], [745, 2, 1, "", "trunc"], [1102, 2, 1, "", "var"], [1009, 2, 1, "", "zero_pad"]], "ivy.container.creation": [[308, 1, 1, "", "ContainerWithCreation"]], "ivy.container.data_type": [[310, 1, 1, "", "ContainerWithDataTypes"]], "ivy.container.data_type.ContainerWithDataTypes": [[310, 3, 1, "", "can_cast"], [310, 3, 1, "", "static_can_cast"]], "ivy.container.device": [[312, 1, 1, "", "ContainerWithDevice"]], "ivy.container.elementwise": [[314, 1, 1, "", "ContainerWithElementwise"]], "ivy.container.elementwise.ContainerWithElementwise": [[314, 3, 1, "", "abs"], [314, 3, 1, "", "acos"], [314, 3, 1, "", "acosh"], [314, 3, 1, "", "add"], [314, 3, 1, "", "asin"], [314, 3, 1, "", "asinh"], [314, 3, 1, "", "atan"], [314, 3, 1, "", "atan2"], [314, 3, 1, "", "atanh"], [314, 3, 1, "", "bitwise_and"], [314, 3, 1, "", "bitwise_invert"], [314, 3, 1, "", "bitwise_left_shift"], [314, 3, 1, "", "bitwise_or"], [314, 3, 1, "", "bitwise_right_shift"], [314, 3, 1, "", "bitwise_xor"], [314, 3, 1, "", "ceil"], [314, 3, 1, "", "cos"], [314, 3, 1, "", "cosh"], [314, 3, 1, "", "divide"], [314, 3, 1, "", "equal"], [314, 3, 1, "", "erf"], [314, 3, 1, "", "exp"], [314, 3, 1, "", "expm1"], [314, 3, 1, "", "floor"], [314, 3, 1, "", "floor_divide"], [314, 3, 1, "", "greater"], [314, 3, 1, "", "greater_equal"], [314, 3, 1, "", "isfinite"], [314, 3, 1, "", "isinf"], [314, 3, 1, "", "isnan"], [314, 3, 1, "", "less"], [314, 3, 1, "", "less_equal"], [314, 3, 1, "", "log"], [314, 3, 1, "", "log10"], [314, 3, 1, "", "log1p"], [314, 3, 1, "", "log2"], [314, 3, 1, "", "logaddexp"], [314, 3, 1, "", "logical_and"], [314, 3, 1, "", "logical_not"], [314, 3, 1, "", "logical_or"], [314, 3, 1, "", "logical_xor"], [314, 3, 1, "", "multiply"], [314, 3, 1, "", "negative"], [314, 3, 1, "", "not_equal"], [314, 3, 1, "", "positive"], [314, 3, 1, "", "pow"], [314, 3, 1, "", "remainder"], [314, 3, 1, "", "round"], [314, 3, 1, "", "sign"], [314, 3, 1, "", "sin"], [314, 3, 1, "", "sinh"], [314, 3, 1, "", "sqrt"], [314, 3, 1, "", "square"], [314, 3, 1, "", "static_add"], [314, 3, 1, "", "static_divide"], [314, 3, 1, "", "static_multiply"], [314, 3, 1, "", "static_subtract"], [314, 3, 1, "", "static_tan"], [314, 3, 1, "", "subtract"], [314, 3, 1, "", "tan"], [314, 3, 1, "", "tanh"], [314, 3, 1, "", "trunc"]], "ivy.container.general": [[316, 1, 1, "", "ContainerWithGeneral"]], "ivy.container.general.ContainerWithGeneral": [[316, 3, 1, "", "all_equal"], [316, 3, 1, "", "clip_vector_norm"], [316, 3, 1, "", "gather_nd"], [316, 3, 1, "", "static_all_equal"], [316, 3, 1, "", "static_gather_nd"]], "ivy.container.gradients": [[318, 1, 1, "", "ContainerWithGradients"]], "ivy.container.gradients.ContainerWithGradients": [[318, 3, 1, "", "adam_update"], [318, 3, 1, "", "gradient_descent_update"], [318, 3, 1, "", "lamb_update"], [318, 3, 1, "", "lars_update"], [318, 3, 1, "", "optimizer_update"], [318, 3, 1, "", "static_adam_update"], [318, 3, 1, "", "static_gradient_descent_update"], [318, 3, 1, "", "static_lamb_update"], [318, 3, 1, "", "static_lars_update"], [318, 3, 1, "", "static_optimizer_update"]], "ivy.container.image": [[320, 1, 1, "", "ContainerWithImage"]], "ivy.container.layers": [[322, 1, 1, "", "ContainerWithLayers"]], "ivy.container.linear_algebra": [[324, 1, 1, "", "ContainerWithLinearAlgebra"]], "ivy.container.linear_algebra.ContainerWithLinearAlgebra": [[324, 3, 1, "", "matmul"]], "ivy.container.losses": [[326, 1, 1, "", "ContainerWithLosses"]], "ivy.container.losses.ContainerWithLosses": [[326, 3, 1, "", "binary_cross_entropy"], [326, 3, 1, "", "cross_entropy"], [326, 3, 1, "", "sparse_cross_entropy"], [326, 3, 1, "", "static_binary_cross_entropy"], [326, 3, 1, "", "static_cross_entropy"], [326, 3, 1, "", "static_sparse_cross_entropy"]], "ivy.container.manipulation": [[328, 1, 1, "", "ContainerWithManipulation"]], "ivy.container.manipulation.ContainerWithManipulation": [[328, 3, 1, "", "clip"], [328, 3, 1, "", "concat"], [328, 3, 1, "", "constant_pad"], [328, 3, 1, "", "expand_dims"], [328, 3, 1, "", "flip"], [328, 3, 1, "", "permute_dims"], [328, 3, 1, "", "repeat"], [328, 3, 1, "", "reshape"], [328, 3, 1, "", "roll"], [328, 3, 1, "", "squeeze"], [328, 3, 1, "", "stack"], [328, 3, 1, "", "static_clip"], [328, 3, 1, "", "static_roll"], [328, 3, 1, "", "swapaxes"], [328, 3, 1, "", "tile"], [328, 3, 1, "", "zero_pad"]], "ivy.container.norms": [[330, 1, 1, "", "ContainerWithNorms"]], "ivy.container.norms.ContainerWithNorms": [[330, 3, 1, "", "layer_norm"]], "ivy.container.random": [[332, 1, 1, "", "ContainerWithRandom"]], "ivy.container.random.ContainerWithRandom": [[332, 3, 1, "", "random_uniform"], [332, 3, 1, "", "static_randint"], [332, 3, 1, "", "static_random_uniform"]], "ivy.container.searching": [[334, 1, 1, "", "ContainerWithSearching"]], "ivy.container.set": [[336, 1, 1, "", "ContainerWithSet"]], "ivy.container.sorting": [[338, 1, 1, "", "ContainerWithSorting"]], "ivy.container.sorting.ContainerWithSorting": [[338, 3, 1, "", "argsort"], [338, 3, 1, "", "sort"], [338, 3, 1, "", "static_argsort"], [338, 3, 1, "", "static_sort"]], "ivy.container.statistical": [[340, 1, 1, "", "ContainerWithStatistical"]], "ivy.container.statistical.ContainerWithStatistical": [[340, 3, 1, "", "einsum"], [340, 3, 1, "", "max"], [340, 3, 1, "", "mean"], [340, 3, 1, "", "min"], [340, 3, 1, "", "prod"], [340, 3, 1, "", "std"], [340, 3, 1, "", "sum"], [340, 3, 1, "", "var"]], "ivy.container.utility": [[342, 1, 1, "", "ContainerWithUtility"]], "ivy.container.utility.ContainerWithUtility": [[342, 3, 1, "", "all"], [342, 3, 1, "", "any"]], "ivy.container.wrapping": [[344, 2, 1, "", "add_ivy_container_instance_methods"]], "ivy.func_wrapper": [[385, 2, 1, "", "handle_nestable"], [386, 2, 1, "", "handle_out_argument"], [387, 2, 1, "", "infer_device"], [388, 2, 1, "", "infer_dtype"], [389, 2, 1, "", "inputs_to_ivy_arrays"], [390, 2, 1, "", "inputs_to_native_arrays"], [391, 2, 1, "", "outputs_to_ivy_arrays"], [392, 2, 1, "", "to_native_arrays_and_back"]], "ivy.functional.ivy": [[394, 0, 0, "-", "activations"], [402, 0, 0, "-", "compilation"], [404, 0, 0, "-", "constants"], [405, 0, 0, "-", "creation"], [424, 0, 0, "-", "data_type"], [461, 0, 0, "-", "device"], [511, 0, 0, "-", "elementwise"], [747, 0, 0, "-", "general"], [821, 0, 0, "-", "gradients"], [852, 0, 0, "-", "layers"], [865, 0, 0, "-", "linear_algebra"], [935, 0, 0, "-", "losses"], [951, 0, 0, "-", "manipulation"], [1011, 0, 0, "-", "meta"], [1015, 0, 0, "-", "nest"], [1033, 0, 0, "-", "norms"], [1038, 0, 0, "-", "random"], [1050, 0, 0, "-", "searching"], [1055, 0, 0, "-", "set"], [1060, 0, 0, "-", "sorting"], [1071, 0, 0, "-", "statistical"], [1104, 0, 0, "-", "utility"]], "ivy.functional.ivy.activations": [[395, 2, 1, "", "gelu"], [396, 2, 1, "", "leaky_relu"], [397, 2, 1, "", "relu"], [398, 2, 1, "", "sigmoid"], [399, 2, 1, "", "softmax"], [400, 2, 1, "", "softplus"], [401, 2, 1, "", "tanh"]], "ivy.functional.ivy.compilation": [[403, 2, 1, "", "compile"]], "ivy.functional.ivy.constants": [[404, 5, 1, "", "e"], [404, 5, 1, "", "inf"], [404, 5, 1, "", "nan"], [404, 5, 1, "", "newaxis"], [404, 5, 1, "", "pi"]], "ivy.functional.ivy.creation": [[406, 2, 1, "", "arange"], [405, 2, 1, "", "array"], [407, 2, 1, "", "asarray"], [408, 2, 1, "", "empty"], [409, 2, 1, "", "empty_like"], [410, 2, 1, "", "eye"], [411, 2, 1, "", "from_dlpack"], [412, 2, 1, "", "full"], [413, 2, 1, "", "full_like"], [414, 2, 1, "", "linspace"], [415, 2, 1, "", "logspace"], [416, 2, 1, "", "meshgrid"], [417, 2, 1, "", "native_array"], [418, 2, 1, "", "ones"], [419, 2, 1, "", "ones_like"], [420, 2, 1, "", "tril"], [421, 2, 1, "", "triu"], [422, 2, 1, "", "zeros"], [423, 2, 1, "", "zeros_like"]], "ivy.functional.ivy.data_type": [[424, 1, 1, "", "DefaultDtype"], [424, 1, 1, "", "DefaultFloatDtype"], [424, 1, 1, "", "DefaultIntDtype"], [428, 2, 1, "", "as_ivy_dtype"], [429, 2, 1, "", "as_native_dtype"], [430, 2, 1, "", "astype"], [431, 2, 1, "", "broadcast_arrays"], [432, 2, 1, "", "broadcast_to"], [436, 2, 1, "", "can_cast"], [438, 2, 1, "", "closest_valid_dtype"], [439, 2, 1, "", "default_dtype"], [440, 2, 1, "", "default_float_dtype"], [441, 2, 1, "", "default_int_dtype"], [442, 2, 1, "", "dtype"], [443, 2, 1, "", "dtype_bits"], [444, 2, 1, "", "finfo"], [445, 2, 1, "", "function_supported_dtypes"], [446, 2, 1, "", "function_unsupported_dtypes"], [447, 2, 1, "", "iinfo"], [448, 2, 1, "", "invalid_dtype"], [449, 2, 1, "", "is_float_dtype"], [450, 2, 1, "", "is_int_dtype"], [451, 2, 1, "", "promote_types"], [452, 2, 1, "", "result_type"], [453, 2, 1, "", "set_default_dtype"], [454, 2, 1, "", "set_default_float_dtype"], [455, 2, 1, "", "set_default_int_dtype"], [456, 2, 1, "", "type_promote_arrays"], [457, 2, 1, "", "unset_default_dtype"], [458, 2, 1, "", "unset_default_float_dtype"], [459, 2, 1, "", "unset_default_int_dtype"], [460, 2, 1, "", "valid_dtype"]], "ivy.functional.ivy.data_type.DefaultDtype": [[424, 3, 1, "", "__init__"]], "ivy.functional.ivy.data_type.DefaultFloatDtype": [[424, 3, 1, "", "__init__"]], "ivy.functional.ivy.data_type.DefaultIntDtype": [[424, 3, 1, "", "__init__"]], "ivy.functional.ivy.device": [[461, 1, 1, "", "DefaultDevice"], [463, 1, 1, "", "DevClonedItem"], [464, 1, 1, "", "DevClonedIter"], [465, 1, 1, "", "DevClonedNest"], [466, 1, 1, "", "DevDistItem"], [467, 1, 1, "", "DevDistIter"], [468, 1, 1, "", "DevDistNest"], [461, 1, 1, "", "DevManager"], [470, 1, 1, "", "DevMapper"], [471, 1, 1, "", "DevMapperMultiProc"], [461, 1, 1, "", "MultiDev"], [473, 1, 1, "", "MultiDevItem"], [474, 1, 1, "", "MultiDevIter"], [475, 1, 1, "", "MultiDevNest"], [476, 1, 1, "", "Profiler"], [477, 2, 1, "", "as_ivy_dev"], [478, 2, 1, "", "as_native_dev"], [479, 2, 1, "", "clear_mem_on_dev"], [480, 2, 1, "", "default_device"], [481, 2, 1, "", "dev"], [482, 2, 1, "", "dev_clone"], [483, 2, 1, "", "dev_clone_array"], [484, 2, 1, "", "dev_clone_iter"], [485, 2, 1, "", "dev_clone_nest"], [486, 2, 1, "", "dev_dist"], [487, 2, 1, "", "dev_dist_array"], [488, 2, 1, "", "dev_dist_iter"], [489, 2, 1, "", "dev_dist_nest"], [490, 2, 1, "", "dev_unify"], [491, 2, 1, "", "dev_unify_array"], [492, 2, 1, "", "dev_unify_iter"], [493, 2, 1, "", "dev_unify_nest"], [494, 2, 1, "", "dev_util"], [495, 2, 1, "", "get_all_ivy_arrays_on_dev"], [496, 2, 1, "", "gpu_is_available"], [497, 2, 1, "", "num_cpu_cores"], [498, 2, 1, "", "num_gpus"], [499, 2, 1, "", "num_ivy_arrays_on_dev"], [500, 2, 1, "", "percent_used_mem_on_dev"], [501, 2, 1, "", "print_all_ivy_arrays_on_dev"], [502, 2, 1, "", "set_default_device"], [503, 2, 1, "", "set_split_factor"], [504, 2, 1, "", "split_factor"], [505, 2, 1, "", "split_func_call"], [506, 2, 1, "", "to_device"], [507, 2, 1, "", "total_mem_on_dev"], [508, 2, 1, "", "tpu_is_available"], [509, 2, 1, "", "unset_default_device"], [510, 2, 1, "", "used_mem_on_dev"]], "ivy.functional.ivy.device.DefaultDevice": [[461, 3, 1, "", "__enter__"], [461, 3, 1, "", "__init__"]], "ivy.functional.ivy.device.DevManager": [[461, 3, 1, "", "__init__"], [461, 3, 1, "", "da_tune_step"], [461, 4, 1, "", "dim_size"], [461, 3, 1, "", "ds_tune_step"], [461, 3, 1, "", "map"], [461, 3, 1, "", "repeated_config_check"], [461, 4, 1, "", "tune_step"], [461, 4, 1, "", "tuned"]], "ivy.functional.ivy.device.DevMapper": [[470, 3, 1, "", "__init__"], [470, 3, 1, "", "map"]], "ivy.functional.ivy.device.DevMapperMultiProc": [[471, 3, 1, "", "__init__"]], "ivy.functional.ivy.device.MultiDev": [[461, 3, 1, "", "__init__"]], "ivy.functional.ivy.device.MultiDevItem": [[473, 3, 1, "", "__init__"], [473, 3, 1, "", "items"], [473, 3, 1, "", "keys"], [473, 4, 1, "", "shape"], [473, 3, 1, "", "values"]], "ivy.functional.ivy.device.MultiDevIter": [[474, 3, 1, "", "__init__"], [474, 3, 1, "", "at_dev"], [474, 3, 1, "", "at_devs"]], "ivy.functional.ivy.device.MultiDevNest": [[475, 3, 1, "", "__init__"], [475, 3, 1, "", "at_dev"]], "ivy.functional.ivy.device.Profiler": [[476, 3, 1, "", "__init__"], [476, 3, 1, "", "start"], [476, 3, 1, "", "stop"]], "ivy.functional.ivy.elementwise": [[515, 2, 1, "", "abs"], [516, 2, 1, "", "acos"], [584, 2, 1, "", "acosh"], [524, 2, 1, "", "add"], [532, 2, 1, "", "asin"], [536, 2, 1, "", "asinh"], [537, 2, 1, "", "atan"], [544, 2, 1, "", "atan2"], [742, 2, 1, "", "atanh"], [552, 2, 1, "", "bitwise_and"], [556, 2, 1, "", "bitwise_invert"], [560, 2, 1, "", "bitwise_left_shift"], [564, 2, 1, "", "bitwise_or"], [568, 2, 1, "", "bitwise_right_shift"], [572, 2, 1, "", "bitwise_xor"], [576, 2, 1, "", "ceil"], [577, 2, 1, "", "cos"], [581, 2, 1, "", "cosh"], [585, 2, 1, "", "divide"], [590, 2, 1, "", "equal"], [597, 2, 1, "", "erf"], [598, 2, 1, "", "exp"], [605, 2, 1, "", "expm1"], [606, 2, 1, "", "floor"], [613, 2, 1, "", "floor_divide"], [614, 2, 1, "", "greater"], [621, 2, 1, "", "greater_equal"], [625, 2, 1, "", "isfinite"], [629, 2, 1, "", "isinf"], [633, 2, 1, "", "isnan"], [637, 2, 1, "", "less"], [641, 2, 1, "", "less_equal"], [645, 2, 1, "", "log"], [649, 2, 1, "", "log10"], [653, 2, 1, "", "log1p"], [657, 2, 1, "", "log2"], [661, 2, 1, "", "logaddexp"], [665, 2, 1, "", "logical_and"], [669, 2, 1, "", "logical_not"], [673, 2, 1, "", "logical_or"], [677, 2, 1, "", "logical_xor"], [678, 2, 1, "", "maximum"], [679, 2, 1, "", "minimum"], [683, 2, 1, "", "multiply"], [688, 2, 1, "", "negative"], [692, 2, 1, "", "not_equal"], [696, 2, 1, "", "positive"], [700, 2, 1, "", "pow"], [704, 2, 1, "", "remainder"], [708, 2, 1, "", "round"], [712, 2, 1, "", "sign"], [716, 2, 1, "", "sin"], [720, 2, 1, "", "sinh"], [724, 2, 1, "", "sqrt"], [728, 2, 1, "", "square"], [733, 2, 1, "", "subtract"], [734, 2, 1, "", "tan"], [739, 2, 1, "", "tanh"], [746, 2, 1, "", "trunc"]], "ivy.functional.ivy.general": [[751, 2, 1, "", "all_equal"], [753, 2, 1, "", "arg_info"], [754, 2, 1, "", "arg_names"], [755, 2, 1, "", "array_equal"], [756, 2, 1, "", "arrays_equal"], [757, 2, 1, "", "assert_supports_inplace"], [758, 2, 1, "", "cache_fn"], [759, 2, 1, "", "clip_matrix_norm"], [762, 2, 1, "", "clip_vector_norm"], [763, 2, 1, "", "container_types"], [764, 2, 1, "", "copy_array"], [765, 2, 1, "", "cumprod"], [766, 2, 1, "", "cumsum"], [767, 2, 1, "", "current_backend_str"], [768, 2, 1, "", "default"], [769, 2, 1, "", "einops_rearrange"], [770, 2, 1, "", "einops_reduce"], [771, 2, 1, "", "einops_repeat"], [772, 2, 1, "", "exists"], [773, 2, 1, "", "floormod"], [774, 2, 1, "", "fourier_encode"], [775, 2, 1, "", "gather"], [779, 2, 1, "", "gather_nd"], [781, 2, 1, "", "get_all_arrays_in_memory"], [782, 2, 1, "", "get_min_base"], [783, 2, 1, "", "get_min_denominator"], [784, 2, 1, "", "get_num_dims"], [785, 2, 1, "", "get_referrers_recursive"], [786, 2, 1, "", "has_nans"], [787, 2, 1, "", "indices_where"], [788, 2, 1, "", "inplace_arrays_supported"], [789, 2, 1, "", "inplace_decrement"], [790, 2, 1, "", "inplace_increment"], [791, 2, 1, "", "inplace_update"], [792, 2, 1, "", "inplace_variables_supported"], [793, 2, 1, "", "is_array"], [794, 2, 1, "", "is_ivy_array"], [795, 2, 1, "", "is_ivy_container"], [796, 2, 1, "", "is_native_array"], [797, 2, 1, "", "match_kwargs"], [798, 2, 1, "", "multiprocessing"], [799, 2, 1, "", "num_arrays_in_memory"], [800, 2, 1, "", "one_hot"], [801, 2, 1, "", "print_all_arrays_in_memory"], [802, 2, 1, "", "queue_timeout"], [803, 2, 1, "", "scatter_flat"], [804, 2, 1, "", "scatter_nd"], [805, 2, 1, "", "set_min_base"], [806, 2, 1, "", "set_min_denominator"], [807, 2, 1, "", "set_queue_timeout"], [808, 2, 1, "", "set_tmp_dir"], [809, 2, 1, "", "shape"], [810, 2, 1, "", "shape_to_tuple"], [811, 2, 1, "", "stable_divide"], [812, 2, 1, "", "stable_pow"], [813, 2, 1, "", "supports_inplace"], [814, 2, 1, "", "tmp_dir"], [815, 2, 1, "", "to_list"], [816, 2, 1, "", "to_numpy"], [817, 2, 1, "", "to_scalar"], [818, 2, 1, "", "try_else_none"], [819, 2, 1, "", "unstack"], [820, 2, 1, "", "value_is_nan"]], "ivy.functional.ivy.gradients": [[821, 1, 1, "", "GradientTracking"], [823, 2, 1, "", "adam_step"], [826, 2, 1, "", "adam_update"], [828, 2, 1, "", "execute_with_gradients"], [831, 2, 1, "", "gradient_descent_update"], [833, 2, 1, "", "is_variable"], [836, 2, 1, "", "lamb_update"], [840, 2, 1, "", "lars_update"], [844, 2, 1, "", "optimizer_update"], [846, 2, 1, "", "set_with_grads"], [847, 2, 1, "", "stop_gradient"], [848, 2, 1, "", "unset_with_grads"], [849, 2, 1, "", "variable"], [850, 2, 1, "", "variable_data"], [851, 2, 1, "", "with_grads"]], "ivy.functional.ivy.gradients.GradientTracking": [[821, 3, 1, "", "__init__"]], "ivy.functional.ivy.layers": [[853, 2, 1, "", "conv1d"], [854, 2, 1, "", "conv1d_transpose"], [855, 2, 1, "", "conv2d"], [856, 2, 1, "", "conv2d_transpose"], [857, 2, 1, "", "conv3d"], [858, 2, 1, "", "conv3d_transpose"], [859, 2, 1, "", "depthwise_conv2d"], [860, 2, 1, "", "dropout"], [861, 2, 1, "", "linear"], [862, 2, 1, "", "lstm_update"], [863, 2, 1, "", "multi_head_attention"], [864, 2, 1, "", "scaled_dot_product_attention"]], "ivy.functional.ivy.linear_algebra": [[868, 2, 1, "", "cholesky"], [871, 2, 1, "", "cross"], [872, 2, 1, "", "det"], [877, 2, 1, "", "diagonal"], [880, 2, 1, "", "eigh"], [883, 2, 1, "", "eigvalsh"], [884, 2, 1, "", "inv"], [890, 2, 1, "", "matmul"], [893, 2, 1, "", "matrix_norm"], [894, 2, 1, "", "matrix_power"], [897, 2, 1, "", "matrix_rank"], [900, 2, 1, "", "matrix_transpose"], [903, 2, 1, "", "outer"], [906, 2, 1, "", "pinv"], [909, 2, 1, "", "qr"], [910, 2, 1, "", "slogdet"], [913, 2, 1, "", "solve"], [914, 2, 1, "", "svd"], [919, 2, 1, "", "svdvals"], [922, 2, 1, "", "tensordot"], [925, 2, 1, "", "trace"], [928, 2, 1, "", "vecdot"], [931, 2, 1, "", "vector_norm"], [934, 2, 1, "", "vector_to_skew_symmetric_matrix"]], "ivy.functional.ivy.losses": [[939, 2, 1, "", "binary_cross_entropy"], [944, 2, 1, "", "cross_entropy"], [949, 2, 1, "", "sparse_cross_entropy"]], "ivy.functional.ivy.manipulation": [[955, 2, 1, "", "clip"], [960, 2, 1, "", "concat"], [964, 2, 1, "", "constant_pad"], [968, 2, 1, "", "expand_dims"], [972, 2, 1, "", "flip"], [976, 2, 1, "", "permute_dims"], [980, 2, 1, "", "repeat"], [984, 2, 1, "", "reshape"], [988, 2, 1, "", "roll"], [990, 2, 1, "", "split"], [994, 2, 1, "", "squeeze"], [998, 2, 1, "", "stack"], [1002, 2, 1, "", "swapaxes"], [1006, 2, 1, "", "tile"], [1010, 2, 1, "", "zero_pad"]], "ivy.functional.ivy.meta": [[1012, 2, 1, "", "fomaml_step"], [1013, 2, 1, "", "maml_step"], [1014, 2, 1, "", "reptile_step"]], "ivy.functional.ivy.nest": [[1016, 2, 1, "", "all_nested_indices"], [1017, 2, 1, "", "copy_nest"], [1018, 2, 1, "", "index_nest"], [1019, 2, 1, "", "insert_into_nest_at_index"], [1020, 2, 1, "", "insert_into_nest_at_indices"], [1021, 2, 1, "", "map"], [1022, 2, 1, "", "map_nest_at_index"], [1023, 2, 1, "", "map_nest_at_indices"], [1024, 2, 1, "", "multi_index_nest"], [1025, 2, 1, "", "nested_any"], [1026, 2, 1, "", "nested_indices_where"], [1027, 2, 1, "", "nested_map"], [1028, 2, 1, "", "nested_multi_map"], [1029, 2, 1, "", "prune_nest_at_index"], [1030, 2, 1, "", "prune_nest_at_indices"], [1031, 2, 1, "", "set_nest_at_index"], [1032, 2, 1, "", "set_nest_at_indices"]], "ivy.functional.ivy.norms": [[1037, 2, 1, "", "layer_norm"]], "ivy.functional.ivy.random": [[1039, 2, 1, "", "multinomial"], [1041, 2, 1, "", "randint"], [1043, 2, 1, "", "random_normal"], [1046, 2, 1, "", "random_uniform"], [1048, 2, 1, "", "seed"], [1049, 2, 1, "", "shuffle"]], "ivy.functional.ivy.searching": [[1051, 2, 1, "", "argmax"], [1052, 2, 1, "", "argmin"], [1053, 2, 1, "", "nonzero"], [1054, 2, 1, "", "where"]], "ivy.functional.ivy.set": [[1056, 2, 1, "", "unique_all"], [1057, 2, 1, "", "unique_counts"], [1058, 2, 1, "", "unique_inverse"], [1059, 2, 1, "", "unique_values"]], "ivy.functional.ivy.sorting": [[1064, 2, 1, "", "argsort"], [1069, 2, 1, "", "sort"]], "ivy.functional.ivy.statistical": [[1099, 2, 1, "", "einsum"], [1079, 2, 1, "", "max"], [1083, 2, 1, "", "mean"], [1087, 2, 1, "", "min"], [1091, 2, 1, "", "prod"], [1095, 2, 1, "", "std"], [1096, 2, 1, "", "sum"], [1103, 2, 1, "", "var"]], "ivy.functional.ivy.utility": [[1108, 2, 1, "", "all"], [1112, 2, 1, "", "any"]], "ivy.inspection": [[1117, 2, 1, "", "add_array_specs"], [1118, 2, 1, "", "fn_array_spec"]], "ivy.stateful": [[1120, 0, 0, "-", "activations"], [1123, 0, 0, "-", "converters"], [1125, 0, 0, "-", "initializers"], [1134, 0, 0, "-", "layers"], [1146, 0, 0, "-", "module"], [1148, 0, 0, "-", "norms"], [1150, 0, 0, "-", "optimizers"], [1156, 0, 0, "-", "sequential"]], "ivy.stateful.activations": [[1121, 1, 1, "", "GEGLU"], [1122, 1, 1, "", "GELU"]], "ivy.stateful.activations.GEGLU": [[1121, 3, 1, "", "__init__"]], "ivy.stateful.activations.GELU": [[1122, 3, 1, "", "__init__"]], "ivy.stateful.converters": [[1124, 2, 1, "", "to_ivy_module"]], "ivy.stateful.initializers": [[1125, 1, 1, "", "Constant"], [1127, 1, 1, "", "FirstLayerSiren"], [1128, 1, 1, "", "GlorotUniform"], [1125, 1, 1, "", "KaimingNormal"], [1130, 1, 1, "", "Ones"], [1131, 1, 1, "", "Siren"], [1125, 1, 1, "", "Uniform"], [1133, 1, 1, "", "Zeros"]], "ivy.stateful.initializers.Constant": [[1125, 3, 1, "", "__init__"], [1125, 3, 1, "", "create_variables"]], "ivy.stateful.initializers.FirstLayerSiren": [[1127, 3, 1, "", "__init__"]], "ivy.stateful.initializers.GlorotUniform": [[1128, 3, 1, "", "__init__"]], "ivy.stateful.initializers.KaimingNormal": [[1125, 3, 1, "", "__init__"], [1125, 3, 1, "", "create_variables"]], "ivy.stateful.initializers.Ones": [[1130, 3, 1, "", "__init__"]], "ivy.stateful.initializers.Siren": [[1131, 3, 1, "", "__init__"]], "ivy.stateful.initializers.Uniform": [[1125, 3, 1, "", "__init__"], [1125, 3, 1, "", "create_variables"]], "ivy.stateful.initializers.Zeros": [[1133, 3, 1, "", "__init__"]], "ivy.stateful.layers": [[1135, 1, 1, "", "Conv1D"], [1136, 1, 1, "", "Conv1DTranspose"], [1137, 1, 1, "", "Conv2D"], [1138, 1, 1, "", "Conv2DTranspose"], [1139, 1, 1, "", "Conv3D"], [1140, 1, 1, "", "Conv3DTranspose"], [1141, 1, 1, "", "DepthwiseConv2D"], [1142, 1, 1, "", "Dropout"], [1143, 1, 1, "", "LSTM"], [1144, 1, 1, "", "Linear"], [1145, 1, 1, "", "MultiHeadAttention"]], "ivy.stateful.layers.Conv1D": [[1135, 3, 1, "", "__init__"]], "ivy.stateful.layers.Conv1DTranspose": [[1136, 3, 1, "", "__init__"]], "ivy.stateful.layers.Conv2D": [[1137, 3, 1, "", "__init__"]], "ivy.stateful.layers.Conv2DTranspose": [[1138, 3, 1, "", "__init__"]], "ivy.stateful.layers.Conv3D": [[1139, 3, 1, "", "__init__"]], "ivy.stateful.layers.Conv3DTranspose": [[1140, 3, 1, "", "__init__"]], "ivy.stateful.layers.DepthwiseConv2D": [[1141, 3, 1, "", "__init__"]], "ivy.stateful.layers.Dropout": [[1142, 3, 1, "", "__init__"]], "ivy.stateful.layers.LSTM": [[1143, 3, 1, "", "__init__"], [1143, 3, 1, "", "get_initial_state"]], "ivy.stateful.layers.Linear": [[1144, 3, 1, "", "__init__"]], "ivy.stateful.layers.MultiHeadAttention": [[1145, 3, 1, "", "__init__"]], "ivy.stateful.module": [[1147, 1, 1, "", "Module"]], "ivy.stateful.module.Module": [[1147, 3, 1, "", "__init__"], [1147, 3, 1, "", "build"], [1147, 4, 1, "", "build_mode"], [1147, 4, 1, "", "built"], [1147, 3, 1, "", "check_submod_rets"], [1147, 3, 1, "", "get_mod_key"], [1147, 3, 1, "", "mod_depth"], [1147, 3, 1, "", "mod_height"], [1147, 3, 1, "", "mod_with_top_mod_key_chain"], [1147, 3, 1, "", "save_weights"], [1147, 3, 1, "", "show_mod_in_top_mod"], [1147, 3, 1, "", "show_structure"], [1147, 3, 1, "", "show_v_in_top_v"], [1147, 3, 1, "", "sub_mods"], [1147, 3, 1, "", "track_submod_call_order"], [1147, 3, 1, "", "track_submod_rets"], [1147, 3, 1, "", "v_with_top_v_key_chains"]], "ivy.stateful.norms": [[1149, 1, 1, "", "LayerNorm"]], "ivy.stateful.norms.LayerNorm": [[1149, 3, 1, "", "__init__"]], "ivy.stateful.optimizers": [[1151, 1, 1, "", "Adam"], [1152, 1, 1, "", "LAMB"], [1153, 1, 1, "", "LARS"], [1154, 1, 1, "", "Optimizer"], [1155, 1, 1, "", "SGD"]], "ivy.stateful.optimizers.Adam": [[1151, 3, 1, "", "__init__"], [1151, 3, 1, "", "set_state"], [1151, 4, 1, "", "state"]], "ivy.stateful.optimizers.LAMB": [[1152, 3, 1, "", "__init__"], [1152, 3, 1, "", "set_state"], [1152, 4, 1, "", "state"]], "ivy.stateful.optimizers.LARS": [[1153, 3, 1, "", "__init__"], [1153, 3, 1, "", "set_state"], [1153, 4, 1, "", "state"]], "ivy.stateful.optimizers.Optimizer": [[1154, 3, 1, "", "__init__"], [1154, 3, 1, "", "set_state"], [1154, 3, 1, "", "step"]], "ivy.stateful.optimizers.SGD": [[1155, 3, 1, "", "__init__"], [1155, 3, 1, "", "set_state"], [1155, 4, 1, "", "state"]], "ivy.stateful.sequential": [[1157, 1, 1, "", "Sequential"]], "ivy.stateful.sequential.Sequential": [[1157, 3, 1, "", "__init__"]], "ivy.verbosity": [[1160, 2, 1, "", "cprint"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:function", "3": "py:method", "4": "py:property", "5": "py:data"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "function", "Python function"], "3": ["py", "method", "Python method"], "4": ["py", "property", "Python property"], "5": ["py", "data", "Python data"]}, "titleterms": {"activ": [0, 176, 394, 1120], "arraywithactiv": 1, "arrai": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 174, 354, 359, 364, 368, 434, 513, 517, 521, 525, 530, 534, 538, 542, 546, 550, 554, 558, 562, 566, 570, 574, 578, 582, 586, 591, 595, 599, 603, 607, 611, 615, 619, 623, 627, 631, 635, 639, 643, 647, 651, 655, 659, 663, 667, 671, 675, 681, 686, 690, 694, 698, 702, 706, 710, 714, 718, 722, 726, 731, 736, 740, 744, 749, 777, 867, 870, 873, 876, 879, 882, 885, 888, 892, 896, 899, 902, 905, 908, 912, 915, 918, 921, 924, 927, 930, 933, 937, 942, 947, 953, 958, 962, 966, 970, 974, 978, 982, 986, 992, 996, 1000, 1004, 1008, 1035, 1062, 1067, 1073, 1077, 1081, 1085, 1089, 1093, 1097, 1101, 1106, 1110], "method": [2, 183, 360, 368, 369], "ab": [3, 184, 512, 513, 514, 515], "aco": [4, 185, 516, 517, 518, 519], "acosh": [5, 186, 520, 521, 522, 523], "add": [6, 188, 353, 524, 525, 526, 527], "add_ivy_array_instance_method": [7, 158], "all": [8, 190, 1105, 1106, 1107, 1108], "all_equ": [9, 191, 748, 749, 750, 751], "ani": [10, 192, 1109, 1110, 1111, 1112], "argsort": [11, 193, 1061, 1062, 1063, 1064], "asin": [12, 194, 529, 530, 531, 532], "asinh": [13, 195, 533, 534, 535, 536], "atan": [14, 198, 537, 538, 539, 540], "atan2": [15, 199, 541, 542, 543, 544], "atanh": [16, 200, 545, 546, 547, 548], "binary_cross_entropi": [17, 201, 936, 937, 938, 939], "bitwise_and": [18, 202, 549, 550, 551, 552], "bitwise_invert": [19, 203, 553, 554, 555, 556], "bitwise_left_shift": [20, 204, 557, 558, 559, 560], "bitwise_or": [21, 205, 561, 562, 563, 564], "bitwise_right_shift": [22, 206, 565, 566, 567, 568], "bitwise_xor": [23, 207, 569, 570, 571, 572], "can_cast": [24, 208, 433, 434, 435, 436], "ceil": [25, 209, 573, 574, 575, 576], "choleski": [26, 866, 867, 868], "clip": [27, 210, 952, 953, 954, 955], "concat": [28, 212, 957, 958, 959, 960], "constant_pad": [29, 213, 961, 962, 963, 964], "co": [30, 214, 577, 578, 579, 580], "cosh": [31, 215, 581, 582, 583, 584], "cross": [32, 869, 870, 871], "cross_entropi": [33, 216, 941, 942, 943, 944], "det": [34, 872, 873, 874], "diagon": [35, 875, 876, 877], "divid": [36, 217, 585, 586, 587, 588], "eigh": [37, 878, 879, 880], "eigvalsh": [38, 881, 882, 883], "einsum": [39, 218, 1072, 1073, 1074, 1075], "equal": [40, 219, 590, 591, 592, 593], "erf": [41, 220, 594, 595, 596, 597], "exp": [42, 221, 598, 599, 600, 601], "expand_dim": [43, 222, 965, 966, 967, 968], "expm1": [44, 223, 602, 603, 604, 605], "flip": [45, 224, 969, 970, 971, 972], "floor": [46, 225, 606, 607, 608, 609], "floor_divid": [47, 226, 610, 611, 612, 613], "gather_nd": [48, 227, 776, 777, 778, 779], "greater": [49, 229, 614, 615, 616, 617], "greater_equ": [50, 230, 618, 619, 620, 621], "inv": [51, 884, 885, 886], "isfinit": [52, 231, 622, 623, 624, 625], "isinf": [53, 232, 626, 627, 628, 629], "isnan": [54, 233, 630, 631, 632, 633], "layer_norm": [55, 236, 1034, 1035, 1036, 1037], "less": [56, 237, 634, 635, 636, 637], "less_equ": [57, 238, 638, 639, 640, 641], "log": [58, 239, 642, 643, 644, 645], "log10": [59, 240, 646, 647, 648, 649], "log1p": [60, 241, 650, 651, 652, 653], "log2": [61, 242, 654, 655, 656, 657], "logaddexp": [62, 243, 658, 659, 660, 661], "logical_and": [63, 244, 662, 663, 664, 665], "logical_not": [64, 245, 666, 667, 668, 669], "logical_or": [65, 246, 670, 671, 672, 673], "logical_xor": [66, 247, 674, 675, 676, 677], "matmul": [67, 248, 887, 888, 889, 890], "matrix_norm": [68, 891, 892, 893], "matrix_rank": [69, 895, 896, 897], "matrix_transpos": [70, 898, 899, 900], "max": [71, 249, 1076, 1077, 1078, 1079], "mean": [72, 250, 1080, 1081, 1082, 1083], "min": [73, 251, 1084, 1085, 1086, 1087], "multipli": [74, 252, 680, 681, 682, 683], "neg": [75, 253, 685, 686, 687, 688], "not_equ": [76, 254, 689, 690, 691, 692], "outer": [77, 901, 902, 903], "permute_dim": [78, 256, 973, 974, 975, 976], "pinv": [79, 904, 905, 906], "posit": [80, 257, 693, 694, 695, 696], "pow": [81, 258, 697, 698, 699, 700], "prod": [82, 259, 1088, 1089, 1090, 1091], "qr": [83, 907, 908, 909], "remaind": [84, 261, 701, 702, 703, 704], "repeat": [85, 262, 977, 978, 979, 980], "reshap": [86, 263, 981, 982, 983, 984], "roll": [87, 264, 353, 985, 986, 987, 988], "round": [88, 265, 705, 706, 707, 708], "sign": [89, 266, 709, 710, 711, 712], "sin": [90, 267, 713, 714, 715, 716], "sinh": [91, 268, 717, 718, 719, 720], "solv": [92, 911, 912, 913], "sort": [93, 151, 269, 337, 1060, 1066, 1067, 1068, 1069], "sparse_cross_entropi": [94, 270, 946, 947, 948, 949], "sqrt": [95, 271, 721, 722, 723, 724], "squar": [96, 272, 725, 726, 727, 728], "squeez": [97, 273, 991, 992, 993, 994], "stack": [98, 274, 995, 996, 997, 998], "std": [99, 297, 1092, 1093, 1094, 1095], "subtract": [100, 298, 729, 731, 732, 733], "sum": [101, 299, 1096, 1097, 1098, 1099], "svd": [102, 914, 915, 916], "svdval": [103, 917, 918, 919], "swapax": [104, 300, 999, 1000, 1001, 1002], "tan": [105, 301, 353, 734, 736, 737, 738], "tanh": [106, 302, 401, 739, 740, 741, 742], "tensordot": [107, 920, 921, 922], "tile": [108, 303, 1003, 1004, 1005, 1006], "trace": [109, 923, 924, 925], "trunc": [110, 304, 743, 744, 745, 746], "var": [111, 305, 1100, 1101, 1102, 1103], "vecdot": [112, 926, 927, 928], "vector_norm": [113, 929, 930, 931], "vector_to_skew_symmetric_matrix": [114, 932, 933, 934], "zero_pad": [115, 306, 1007, 1008, 1009, 1010], "convers": 116, "args_to_ivi": 117, "args_to_n": 118, "to_ivi": 119, "to_n": 120, "creation": [121, 307, 405], "arraywithcr": 122, "data": [123, 309, 355, 361, 369, 383, 424, 1055, 1056, 1057, 1059], "type": [123, 309, 356, 361, 383, 424], "arraywithdatatyp": 124, "devic": [125, 311, 362, 364, 461], "arraywithdevic": 126, "elementwis": [127, 313, 511], "arraywithelementwis": 128, "gener": [129, 315, 355, 747], "arraywithgener": 130, "gradient": [131, 317, 821], "arraywithgradi": 132, "imag": [133, 319], "arraywithimag": 134, "layer": [135, 321, 852, 1134], "arraywithlay": 136, "linear": [137, 323, 861, 865, 1144], "algebra": [137, 323, 865], "arraywithlinearalgebra": 138, "loss": [139, 325, 935], "arraywithloss": 140, "manipul": [141, 327, 951], "arraywithmanipul": 142, "norm": [143, 329, 1033, 1148], "arraywithnorm": 144, "random": [145, 331, 1038], "arraywithrandom": 146, "search": [147, 333, 1050], "arraywithsearch": 148, "set": [149, 335, 346, 357, 1055], "arraywithset": 150, "arraywithsort": 152, "statist": [153, 339, 1071], "arraywithstatist": 154, "util": [155, 341, 1104], "arraywithutil": 156, "wrap": [157, 343, 358], "backend": [159, 351, 357, 366, 383], "handler": [159, 366], "choose_random_backend": 161, "clear_backend_stack": 162, "current_backend": 163, "get_backend": 164, "set_backend": 165, "try_import_ivy_jax": 166, "try_import_ivy_mxnet": 167, "try_import_ivy_numpi": 168, "try_import_ivy_tf": 169, "try_import_ivy_torch": 170, "unset_backend": 171, "background": [172, 1113], "ml": 173, "explos": 173, "standard": 174, "skeptic": 174, "complimentari": 174, "vs": [174, 383], "competit": 174, "do": 174, "work": [174, 349], "The": [174, 347, 368, 383], "api": [174, 348, 351, 354, 360, 366, 368, 370, 371], "why": 175, "unifi": [175, 368], "No": [175, 346], "more": 175, "re": 175, "implement": 175, "infinit": 175, "shelf": 175, "life": 175, "containerwithactiv": 177, "base": 178, "containerbas": 179, "contain": [180, 181, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 360, 369, 435, 437, 514, 518, 522, 526, 528, 531, 535, 539, 543, 547, 551, 555, 559, 563, 567, 571, 575, 579, 583, 587, 589, 592, 596, 600, 604, 608, 612, 616, 620, 624, 628, 632, 636, 640, 644, 648, 652, 656, 660, 664, 668, 672, 676, 682, 684, 687, 691, 695, 699, 703, 707, 711, 715, 719, 723, 727, 730, 732, 735, 737, 741, 745, 750, 752, 761, 778, 780, 825, 827, 830, 832, 835, 837, 839, 841, 843, 845, 889, 938, 940, 943, 945, 948, 950, 954, 956, 959, 963, 967, 971, 975, 979, 983, 987, 989, 993, 997, 1001, 1005, 1009, 1036, 1042, 1045, 1047, 1063, 1065, 1068, 1070, 1074, 1078, 1082, 1086, 1090, 1094, 1098, 1102, 1107, 1111], "multidevcontain": 182, "adam_upd": [187, 824, 825, 826], "add_ivy_container_instance_method": [189, 344], "at_dev": [196, 197], "clip_vector_norm": [211, 760, 761, 762], "gradient_descent_upd": [228, 829, 830, 831], "lamb_upd": [234, 834, 835, 836], "lars_upd": [235, 838, 839, 840], "optimizer_upd": [255, 842, 843, 844], "random_uniform": [260, 1044, 1045, 1046], "static_adam_upd": [275, 827], "static_add": [276, 528], "static_all_equ": [277, 752], "static_argsort": [278, 1065], "static_binary_cross_entropi": [279, 940], "static_can_cast": [280, 437], "static_clip": [281, 956], "static_cross_entropi": [282, 945], "static_divid": [283, 589], "static_gather_nd": [284, 780], "static_gradient_descent_upd": [285, 832], "static_lamb_upd": [286, 837], "static_lars_upd": [287, 841], "static_multipli": [288, 684], "static_optimizer_upd": [289, 845], "static_randint": [290, 1042], "static_random_uniform": [291, 1047], "static_rol": [292, 989], "static_sort": [293, 1070], "static_sparse_cross_entropi": [294, 950], "static_subtract": [295, 730], "static_tan": [296, 735], "containerwithcr": 308, "containerwithdatatyp": 310, "containerwithdevic": 312, "containerwithelementwis": 314, "containerwithgener": 316, "containerwithgradi": 318, "containerwithimag": 320, "containerwithlay": 322, "containerwithlinearalgebra": 324, "containerwithloss": 326, "containerwithmanipul": 328, "containerwithnorm": 330, "containerwithrandom": 332, "containerwithsearch": 334, "containerwithset": 336, "containerwithsort": 338, "containerwithstatist": 340, "containerwithutil": 342, "contribut": [345, 1113], "up": 346, "clone": 346, "ivi": [346, 351, 353, 355, 359, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 382, 434, 435, 436, 437, 513, 514, 515, 517, 518, 519, 521, 522, 523, 525, 526, 527, 528, 530, 531, 532, 534, 535, 536, 538, 539, 540, 542, 543, 544, 546, 547, 548, 550, 551, 552, 554, 555, 556, 558, 559, 560, 562, 563, 564, 566, 567, 568, 570, 571, 572, 574, 575, 576, 578, 579, 580, 582, 583, 584, 586, 587, 588, 589, 591, 592, 593, 595, 596, 597, 599, 600, 601, 603, 604, 605, 607, 608, 609, 611, 612, 613, 615, 616, 617, 619, 620, 621, 623, 624, 625, 627, 628, 629, 631, 632, 633, 635, 636, 637, 639, 640, 641, 643, 644, 645, 647, 648, 649, 651, 652, 653, 655, 656, 657, 659, 660, 661, 663, 664, 665, 667, 668, 669, 671, 672, 673, 675, 676, 677, 681, 682, 683, 684, 686, 687, 688, 690, 691, 692, 694, 695, 696, 698, 699, 700, 702, 703, 704, 706, 707, 708, 710, 711, 712, 714, 715, 716, 718, 719, 720, 722, 723, 724, 726, 727, 728, 730, 731, 732, 733, 735, 736, 737, 738, 740, 741, 742, 744, 745, 746, 749, 750, 751, 752, 761, 762, 777, 778, 779, 780, 825, 826, 827, 830, 831, 832, 835, 836, 837, 839, 840, 841, 843, 844, 845, 867, 868, 870, 871, 873, 874, 876, 877, 879, 880, 882, 883, 885, 886, 888, 889, 890, 892, 893, 896, 897, 899, 900, 902, 903, 905, 906, 908, 909, 912, 913, 915, 916, 918, 919, 921, 922, 924, 925, 927, 928, 930, 931, 933, 934, 937, 938, 939, 940, 942, 943, 944, 945, 947, 948, 949, 950, 953, 954, 955, 956, 958, 959, 960, 962, 963, 964, 966, 967, 968, 970, 971, 972, 974, 975, 976, 978, 979, 980, 982, 983, 984, 986, 987, 988, 989, 992, 993, 994, 996, 997, 998, 1000, 1001, 1002, 1004, 1005, 1006, 1008, 1009, 1010, 1035, 1036, 1037, 1041, 1042, 1045, 1046, 1047, 1062, 1063, 1064, 1065, 1067, 1068, 1069, 1070, 1073, 1074, 1075, 1077, 1078, 1079, 1081, 1082, 1083, 1085, 1086, 1087, 1089, 1090, 1091, 1093, 1094, 1095, 1097, 1098, 1099, 1101, 1102, 1103, 1106, 1107, 1108, 1110, 1111, 1112], "pycharm": 346, "virtual": 346, "environ": 346, "docker": [346, 347, 349], "us": [346, 349, 369], "miniconda": [346, 349], "venv": [346, 349], "interpret": 346, "window": 346, "maco": 346, "ubuntu": 346, "github": 346, "codespac": 346, "pre": 346, "commit": [346, 347], "basic": 347, "get": 347, "help": 347, "todo": 347, "list": 347, "issu": 347, "manag": 347, "your": 347, "fork": 347, "who": 347, "To": 347, "ask": 347, "With": 347, "command": 347, "line": 347, "browser": 347, "pull": 347, "request": 347, "small": 347, "often": 347, "run": 347, "test": [347, 354, 355], "local": 347, "open": 348, "task": 348, "function": [348, 356, 358, 360, 361, 362, 364, 366, 371, 383], "format": 348, "frontend": [348, 371], "build": [349, 366], "doc": 349, "dockerless": 349, "document": 349, "pipelin": [349, 383], "make_doc": 349, "sh": 349, "entrypoint": 349, "_make_doc": 349, "generate_src_rst_fil": 349, "py": 349, "sphinx": 349, "correct_built_html_fil": 349, "remove_fil": 349, "deep": 350, "dive": 350, "navig": 351, "code": 351, "categor": 351, "submodul": 351, "design": [351, 365, 1113], "docstr": [352, 353], "exampl": [353, 364], "hypothesi": 355, "self": 355, "consist": 355, "explicit": 355, "test_array_funct": 355, "primari": 356, "composit": 356, "mix": 356, "standalon": 356, "nestabl": [356, 360, 364], "conveni": 356, "nativ": 359, "handl": 359, "instanc": [360, 368], "static": 360, "special": 360, "modul": [361, 362, 370, 1146, 1147], "argument": [361, 362, 363, 364], "other": [361, 362], "inplac": 363, "updat": 363, "out": [363, 364], "copi": 363, "dtype": [364, 442], "number": 364, "oper": [364, 368, 383], "integ": 364, "sequenc": 364, "block": 366, "framework": [366, 367], "graph": [366, 371], "compil": [366, 371, 402, 403], "class": 368, "monkei": 368, "patch": 368, "construct": 369, "represent": 369, "recurs": 369, "built": 369, "ins": 369, "access": 369, "save": 369, "load": 369, "comparison": 369, "custom": [369, 383], "case": 369, "compartment": 369, "configur": 369, "network": [369, 371], "weight": 369, "state": [370, 383], "initi": [370, 1125], "optim": [370, 1150, 1154], "transpil": 371, "role": 371, "convert": [371, 1123], "model": [371, 378, 383], "builder": 373, "ecosystem": 374, "gym": [375, 382], "mech": 376, "memori": [377, 382], "robot": [379, 382], "vision": [380, 382], "extens": [381, 1113], "appli": 382, "librari": 382, "mechan": 382, "faq": 383, "maintain": 383, "version": 383, "dynam": 383, "size": 383, "shape": [383, 809, 1055, 1056, 1057, 1059], "check": 383, "control": 383, "flow": 383, "auto": 383, "differenti": 383, "replica": 383, "parallel": 383, "support": 383, "altern": 383, "structur": 383, "func": 384, "wrapper": 384, "handle_nest": 385, "handle_out_argu": 386, "infer_devic": 387, "infer_dtyp": 388, "inputs_to_ivy_arrai": 389, "inputs_to_native_arrai": 390, "outputs_to_ivy_arrai": 391, "to_native_arrays_and_back": 392, "gelu": [395, 1122], "leaky_relu": 396, "relu": 397, "sigmoid": 398, "softmax": 399, "softplu": 400, "constant": 404, "note": [405, 411], "arang": 406, "asarrai": 407, "empti": 408, "empty_lik": 409, "ey": 410, "from_dlpack": 411, "full": 412, "full_lik": 413, "linspac": 414, "logspac": 415, "meshgrid": 416, "native_arrai": 417, "ones": 418, "ones_lik": 419, "tril": 420, "triu": 421, "zero": [422, 1133], "zeros_lik": 423, "as_ivy_dtyp": 428, "as_native_dtyp": 429, "astyp": 430, "broadcast_arrai": 431, "broadcast_to": 432, "closest_valid_dtyp": 438, "default_dtyp": 439, "default_float_dtyp": 440, "default_int_dtyp": 441, "dtype_bit": 443, "finfo": 444, "function_supported_dtyp": 445, "function_unsupported_dtyp": 446, "iinfo": 447, "invalid_dtyp": 448, "is_float_dtyp": 449, "is_int_dtyp": 450, "promote_typ": 451, "result_typ": 452, "set_default_dtyp": 453, "set_default_float_dtyp": 454, "set_default_int_dtyp": 455, "type_promote_arrai": 456, "unset_default_dtyp": 457, "unset_default_float_dtyp": 458, "unset_default_int_dtyp": 459, "valid_dtyp": 460, "devcloneditem": 463, "devclonedit": 464, "devclonednest": 465, "devdistitem": 466, "devdistit": 467, "devdistnest": 468, "devmapp": 470, "devmappermultiproc": 471, "multidevitem": 473, "multidevit": 474, "multidevnest": 475, "profil": 476, "as_ivy_dev": 477, "as_native_dev": 478, "clear_mem_on_dev": 479, "default_devic": 480, "dev": 481, "dev_clon": 482, "dev_clone_arrai": 483, "dev_clone_it": 484, "dev_clone_nest": 485, "dev_dist": 486, "dev_dist_arrai": 487, "dev_dist_it": 488, "dev_dist_nest": 489, "dev_unifi": 490, "dev_unify_arrai": 491, "dev_unify_it": 492, "dev_unify_nest": 493, "dev_util": 494, "get_all_ivy_arrays_on_dev": 495, "gpu_is_avail": 496, "num_cpu_cor": 497, "num_gpu": 498, "num_ivy_arrays_on_dev": 499, "percent_used_mem_on_dev": 500, "print_all_ivy_arrays_on_dev": 501, "set_default_devic": 502, "set_split_factor": 503, "split_factor": 504, "split_func_cal": 505, "to_devic": 506, "total_mem_on_dev": 507, "tpu_is_avail": 508, "unset_default_devic": 509, "used_mem_on_dev": 510, "maximum": 678, "minimum": 679, "arg_info": 753, "arg_nam": 754, "array_equ": 755, "arrays_equ": 756, "assert_supports_inplac": 757, "cache_fn": 758, "clip_matrix_norm": 759, "container_typ": 763, "copy_arrai": 764, "cumprod": 765, "cumsum": 766, "current_backend_str": 767, "default": 768, "einops_rearrang": 769, "einops_reduc": 770, "einops_repeat": 771, "exist": 772, "floormod": 773, "fourier_encod": 774, "gather": 775, "get_all_arrays_in_memori": 781, "get_min_bas": 782, "get_min_denomin": 783, "get_num_dim": 784, "get_referrers_recurs": 785, "has_nan": 786, "indices_wher": 787, "inplace_arrays_support": 788, "inplace_decr": 789, "inplace_incr": 790, "inplace_upd": 791, "inplace_variables_support": 792, "is_arrai": 793, "is_ivy_arrai": 794, "is_ivy_contain": 795, "is_native_arrai": 796, "match_kwarg": 797, "multiprocess": 798, "num_arrays_in_memori": 799, "one_hot": 800, "print_all_arrays_in_memori": 801, "queue_timeout": 802, "scatter_flat": 803, "scatter_nd": 804, "set_min_bas": 805, "set_min_denomin": 806, "set_queue_timeout": 807, "set_tmp_dir": 808, "shape_to_tupl": 810, "stable_divid": 811, "stable_pow": 812, "supports_inplac": 813, "tmp_dir": 814, "to_list": 815, "to_numpi": 816, "to_scalar": 817, "try_else_non": 818, "unstack": 819, "value_is_nan": 820, "adam_step": 823, "execute_with_gradi": 828, "is_vari": 833, "set_with_grad": 846, "stop_gradi": 847, "unset_with_grad": 848, "variabl": 849, "variable_data": 850, "with_grad": 851, "conv1d": [853, 1135], "conv1d_transpos": 854, "conv2d": [855, 1137], "conv2d_transpos": 856, "conv3d": [857, 1139], "conv3d_transpos": 858, "depthwise_conv2d": 859, "dropout": [860, 1142], "lstm_updat": 862, "multi_head_attent": 863, "scaled_dot_product_attent": 864, "matrix_pow": 894, "slogdet": 910, "split": 990, "meta": 1011, "fomaml_step": 1012, "maml_step": 1013, "reptile_step": 1014, "nest": 1015, "all_nested_indic": 1016, "copy_nest": 1017, "index_nest": 1018, "insert_into_nest_at_index": 1019, "insert_into_nest_at_indic": 1020, "map": 1021, "map_nest_at_index": 1022, "map_nest_at_indic": 1023, "multi_index_nest": 1024, "nested_ani": 1025, "nested_indices_wher": 1026, "nested_map": 1027, "nested_multi_map": 1028, "prune_nest_at_index": 1029, "prune_nest_at_indic": 1030, "set_nest_at_index": 1031, "set_nest_at_indic": 1032, "multinomi": 1039, "randint": [1040, 1041], "random_norm": 1043, "seed": 1048, "shuffl": 1049, "argmax": 1051, "argmin": 1052, "nonzero": 1053, "where": 1054, "depend": [1055, 1056, 1057, 1059], "output": [1055, 1056, 1057, 1059], "unique_al": 1056, "unique_count": 1057, "unique_invers": 1058, "unique_valu": 1059, "content": 1113, "overview": 1113, "quick": 1113, "start": 1113, "roadmap": [1113, 1119], "citat": 1113, "inspect": 1116, "add_array_spec": 1117, "fn_array_spec": 1118, "geglu": 1121, "to_ivy_modul": 1124, "firstlayersiren": 1127, "glorotuniform": 1128, "Ones": 1130, "siren": 1131, "conv1dtranspos": 1136, "conv2dtranspos": 1138, "conv3dtranspos": 1140, "depthwiseconv2d": 1141, "lstm": 1143, "multiheadattent": 1145, "layernorm": 1149, "adam": 1151, "lamb": 1152, "lar": 1153, "sgd": 1155, "sequenti": [1156, 1157], "verbos": 1159, "cprint": 1160}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 6, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.viewcode": 1, "sphinx": 56}})