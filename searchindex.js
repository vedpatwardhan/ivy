Search.setIndex({"docnames": ["backend_handler", "backend_handler/ContextManager:\n    def __init__", "backend_handler/choose_random_backend", "backend_handler/clear_backend_stack", "backend_handler/current_backend", "backend_handler/get_backend", "backend_handler/set_backend", "backend_handler/try_import_ivy_jax", "backend_handler/try_import_ivy_mxnet", "backend_handler/try_import_ivy_numpy", "backend_handler/try_import_ivy_tf", "backend_handler/try_import_ivy_torch", "backend_handler/unset_backend", "background", "background/ml_explosion", "background/standardization", "background/why_unify", "contributing", "contributing/0_setting_up", "contributing/1_the_basics", "contributing/4_open_tasks", "contributing/building_the_docs", "data_classes", "data_classes/array", "data_classes/array/activations", "data_classes/array/activations/ArrayWithActivations", "data_classes/array/conversions", "data_classes/array/conversions/args_to_ivy", "data_classes/array/conversions/args_to_native", "data_classes/array/conversions/to_ivy", "data_classes/array/conversions/to_native", "data_classes/array/creation", "data_classes/array/creation/ArrayWithCreation", "data_classes/array/data_type", "data_classes/array/data_type/ArrayWithDataTypes", "data_classes/array/device", "data_classes/array/device/ArrayWithDevice", "data_classes/array/elementwise", "data_classes/array/elementwise/ArrayWithElementwise", "data_classes/array/general", "data_classes/array/general/ArrayWithGeneral", "data_classes/array/gradients", "data_classes/array/gradients/ArrayWithGradients", "data_classes/array/image", "data_classes/array/image/ArrayWithImage", "data_classes/array/layers", "data_classes/array/layers/ArrayWithLayers", "data_classes/array/linear_algebra", "data_classes/array/linear_algebra/ArrayWithLinearAlgebra", "data_classes/array/losses", "data_classes/array/losses/ArrayWithLosses", "data_classes/array/manipulation", "data_classes/array/manipulation/ArrayWithManipulation", "data_classes/array/norms", "data_classes/array/norms/ArrayWithNorms", "data_classes/array/random", "data_classes/array/random/ArrayWithRandom", "data_classes/array/searching", "data_classes/array/searching/ArrayWithSearching", "data_classes/array/set", "data_classes/array/set/ArrayWithSet", "data_classes/array/sorting", "data_classes/array/sorting/ArrayWithSorting", "data_classes/array/statistical", "data_classes/array/statistical/ArrayWithStatistical", "data_classes/array/utility", "data_classes/array/utility/ArrayWithUtility", "data_classes/array/wrapping", "data_classes/array/wrapping/add_ivy_array_instance_methods", "data_classes/container", "data_classes/container/activations", "data_classes/container/activations/ContainerWithActivations", "data_classes/container/base", "data_classes/container/base/ContainerBase", "data_classes/container/container", "data_classes/container/container/Container", "data_classes/container/container/MultiDevContainer", "data_classes/container/creation", "data_classes/container/creation/ContainerWithCreation", "data_classes/container/data_type", "data_classes/container/data_type/ContainerWithDataTypes", "data_classes/container/device", "data_classes/container/device/ContainerWithDevice", "data_classes/container/elementwise", "data_classes/container/elementwise/ContainerWithElementwise", "data_classes/container/general", "data_classes/container/general/ContainerWithGeneral", "data_classes/container/gradients", "data_classes/container/gradients/ContainerWithGradients", "data_classes/container/image", "data_classes/container/image/ContainerWithImage", "data_classes/container/layers", "data_classes/container/layers/ContainerWithLayers", "data_classes/container/linear_algebra", "data_classes/container/linear_algebra/ContainerWithLinearAlgebra", "data_classes/container/losses", "data_classes/container/losses/ContainerWithLosses", "data_classes/container/manipulation", "data_classes/container/manipulation/ContainerWithManipulation", "data_classes/container/norms", "data_classes/container/norms/ContainerWithNorms", "data_classes/container/random", "data_classes/container/random/ContainerWithRandom", "data_classes/container/searching", "data_classes/container/searching/ContainerWithSearching", "data_classes/container/set", "data_classes/container/set/ContainerWithSet", "data_classes/container/sorting", "data_classes/container/sorting/ContainerWithSorting", "data_classes/container/statistical", "data_classes/container/statistical/ContainerWithStatistical", "data_classes/container/utility", "data_classes/container/utility/ContainerWithUtility", "data_classes/container/wrapping", "data_classes/container/wrapping/add_ivy_container_instance_methods", "deep_dive", "deep_dive/0_navigating_the_code", "deep_dive/10_function_arguments", "deep_dive/11_docstrings", "deep_dive/12_docstring_examples", "deep_dive/13_array_api_tests", "deep_dive/14_ivy_tests", "deep_dive/1_function_types", "deep_dive/2_backend_setting", "deep_dive/3_function_wrapping", "deep_dive/4_arrays", "deep_dive/5_containers", "deep_dive/6_data_types", "deep_dive/7_devices", "deep_dive/8_inplace_updates", "deep_dive/9_formatting", "design", "design/building_blocks", "design/ivy_as_a_framework", "design/ivy_as_a_framework/ivy_array", "design/ivy_as_a_framework/ivy_container", "design/ivy_as_a_framework/ivy_stateful_api", "design/ivy_as_a_transpiler", "docs/ivy", "docs/ivy_builder", "docs/ivy_ecosystem", "docs/ivy_gym", "docs/ivy_mech", "docs/ivy_memory", "docs/ivy_models", "docs/ivy_robot", "docs/ivy_vision", "extensions", "extensions/applied_libraries", "faq", "func_wrapper", "func_wrapper/handle_nestable", "func_wrapper/handle_out_argument", "func_wrapper/infer_device", "func_wrapper/infer_dtype", "func_wrapper/inputs_to_ivy_arrays", "func_wrapper/inputs_to_native_arrays", "func_wrapper/outputs_to_ivy_arrays", "func_wrapper/to_native_arrays_and_back", "functional/ivy", "functional/ivy/activations", "functional/ivy/activations/gelu", "functional/ivy/activations/leaky_relu", "functional/ivy/activations/relu", "functional/ivy/activations/sigmoid", "functional/ivy/activations/softmax", "functional/ivy/activations/softplus", "functional/ivy/activations/softplus/softplus_array", "functional/ivy/activations/softplus/softplus_container", "functional/ivy/activations/softplus/softplus_functional", "functional/ivy/activations/softplus/static_softplus_container", "functional/ivy/activations/tanh", "functional/ivy/compilation", "functional/ivy/compilation/compile", "functional/ivy/constants", "functional/ivy/creation", "functional/ivy/creation/arange", "functional/ivy/creation/arange/arange_functional", "functional/ivy/creation/arange/static_arange_container", "functional/ivy/creation/asarray", "functional/ivy/creation/asarray/asarray_array", "functional/ivy/creation/asarray/asarray_container", "functional/ivy/creation/asarray/asarray_functional", "functional/ivy/creation/asarray/static_asarray_container", "functional/ivy/creation/empty", "functional/ivy/creation/empty_like", "functional/ivy/creation/empty_like/empty_like_array", "functional/ivy/creation/empty_like/empty_like_container", "functional/ivy/creation/empty_like/empty_like_functional", "functional/ivy/creation/empty_like/static_empty_like_container", "functional/ivy/creation/eye", "functional/ivy/creation/eye/eye_functional", "functional/ivy/creation/eye/static_eye_container", "functional/ivy/creation/from_dlpack", "functional/ivy/creation/from_dlpack/from_dlpack_array", "functional/ivy/creation/from_dlpack/from_dlpack_container", "functional/ivy/creation/from_dlpack/from_dlpack_functional", "functional/ivy/creation/from_dlpack/static_from_dlpack_container", "functional/ivy/creation/full", "functional/ivy/creation/full_like", "functional/ivy/creation/full_like/full_like_array", "functional/ivy/creation/full_like/full_like_container", "functional/ivy/creation/full_like/full_like_functional", "functional/ivy/creation/full_like/static_full_like_container", "functional/ivy/creation/linspace", "functional/ivy/creation/linspace/linspace_functional", "functional/ivy/creation/linspace/static_linspace_container", "functional/ivy/creation/logspace", "functional/ivy/creation/logspace/logspace_functional", "functional/ivy/creation/logspace/static_logspace_container", "functional/ivy/creation/meshgrid", "functional/ivy/creation/meshgrid/meshgrid_array", "functional/ivy/creation/meshgrid/meshgrid_container", "functional/ivy/creation/meshgrid/meshgrid_functional", "functional/ivy/creation/meshgrid/static_meshgrid_container", "functional/ivy/creation/native_array", "functional/ivy/creation/native_array/native_array_array", "functional/ivy/creation/native_array/native_array_container", "functional/ivy/creation/native_array/native_array_functional", "functional/ivy/creation/native_array/static_native_array_container", "functional/ivy/creation/ones", "functional/ivy/creation/ones/ones_functional", "functional/ivy/creation/ones/static_ones_container", "functional/ivy/creation/ones_like", "functional/ivy/creation/ones_like/ones_like_array", "functional/ivy/creation/ones_like/ones_like_container", "functional/ivy/creation/ones_like/ones_like_functional", "functional/ivy/creation/ones_like/static_ones_like_container", "functional/ivy/creation/tril", "functional/ivy/creation/tril/static_tril_container", "functional/ivy/creation/tril/tril_array", "functional/ivy/creation/tril/tril_container", "functional/ivy/creation/tril/tril_functional", "functional/ivy/creation/triu", "functional/ivy/creation/triu/static_triu_container", "functional/ivy/creation/triu/triu_array", "functional/ivy/creation/triu/triu_container", "functional/ivy/creation/triu/triu_functional", "functional/ivy/creation/zeros", "functional/ivy/creation/zeros/static_zeros_container", "functional/ivy/creation/zeros/zeros_functional", "functional/ivy/creation/zeros_like", "functional/ivy/creation/zeros_like/static_zeros_like_container", "functional/ivy/creation/zeros_like/zeros_like_array", "functional/ivy/creation/zeros_like/zeros_like_container", "functional/ivy/creation/zeros_like/zeros_like_functional", "functional/ivy/data_type", "functional/ivy/data_type/DefaultDtype:\n    \"\"\"\"\"\"\n\n    # noinspection PyShadowingNames\n    def __init__", "functional/ivy/data_type/DefaultFloatDtype:\n    \"\"\"\"\"\"\n\n    # noinspection PyShadowingNames\n    def __init__", "functional/ivy/data_type/DefaultIntDtype:\n    \"\"\"\"\"\"\n\n    # noinspection PyShadowingNames\n    def __init__", "functional/ivy/data_type/as_ivy_dtype", "functional/ivy/data_type/as_native_dtype", "functional/ivy/data_type/astype", "functional/ivy/data_type/broadcast_arrays", "functional/ivy/data_type/broadcast_to", "functional/ivy/data_type/can_cast", "functional/ivy/data_type/can_cast/can_cast_array", "functional/ivy/data_type/can_cast/can_cast_container", "functional/ivy/data_type/can_cast/can_cast_functional", "functional/ivy/data_type/can_cast/static_can_cast_container", "functional/ivy/data_type/closest_valid_dtype", "functional/ivy/data_type/default_dtype", "functional/ivy/data_type/default_float_dtype", "functional/ivy/data_type/default_int_dtype", "functional/ivy/data_type/dtype", "functional/ivy/data_type/dtype_bits", "functional/ivy/data_type/finfo", "functional/ivy/data_type/function_supported_dtypes", "functional/ivy/data_type/function_unsupported_dtypes", "functional/ivy/data_type/iinfo", "functional/ivy/data_type/invalid_dtype", "functional/ivy/data_type/is_float_dtype", "functional/ivy/data_type/is_int_dtype", "functional/ivy/data_type/promote_types", "functional/ivy/data_type/result_type", "functional/ivy/data_type/set_default_dtype", "functional/ivy/data_type/set_default_float_dtype", "functional/ivy/data_type/set_default_int_dtype", "functional/ivy/data_type/type_promote_arrays", "functional/ivy/data_type/unset_default_dtype", "functional/ivy/data_type/unset_default_float_dtype", "functional/ivy/data_type/unset_default_int_dtype", "functional/ivy/data_type/valid_dtype", "functional/ivy/device", "functional/ivy/device/DefaultDevice:\n    \"\"\"\"\"\"\n\n    # noinspection PyShadowingNames\n    def __init__", "functional/ivy/device/DevClonedItem", "functional/ivy/device/DevClonedIter", "functional/ivy/device/DevClonedNest", "functional/ivy/device/DevDistItem", "functional/ivy/device/DevDistIter", "functional/ivy/device/DevDistNest", "functional/ivy/device/DevManager:\n    \"\"\"\"\"\"\n\n    def __init__", "functional/ivy/device/DevMapper", "functional/ivy/device/DevMapperMultiProc", "functional/ivy/device/MultiDev:\n    def __init__", "functional/ivy/device/MultiDevItem", "functional/ivy/device/MultiDevIter", "functional/ivy/device/MultiDevNest", "functional/ivy/device/Profiler", "functional/ivy/device/as_ivy_dev", "functional/ivy/device/as_native_dev", "functional/ivy/device/clear_mem_on_dev", "functional/ivy/device/default_device", "functional/ivy/device/dev", "functional/ivy/device/dev_clone", "functional/ivy/device/dev_clone_array", "functional/ivy/device/dev_clone_iter", "functional/ivy/device/dev_clone_nest", "functional/ivy/device/dev_dist", "functional/ivy/device/dev_dist_array", "functional/ivy/device/dev_dist_iter", "functional/ivy/device/dev_dist_nest", "functional/ivy/device/dev_unify", "functional/ivy/device/dev_unify_array", "functional/ivy/device/dev_unify_iter", "functional/ivy/device/dev_unify_nest", "functional/ivy/device/dev_util", "functional/ivy/device/get_all_ivy_arrays_on_dev", "functional/ivy/device/gpu_is_available", "functional/ivy/device/num_cpu_cores", "functional/ivy/device/num_gpus", "functional/ivy/device/num_ivy_arrays_on_dev", "functional/ivy/device/percent_used_mem_on_dev", "functional/ivy/device/print_all_ivy_arrays_on_dev", "functional/ivy/device/set_default_device", "functional/ivy/device/set_split_factor", "functional/ivy/device/split_factor", "functional/ivy/device/split_func_call", "functional/ivy/device/to_device", "functional/ivy/device/total_mem_on_dev", "functional/ivy/device/tpu_is_available", "functional/ivy/device/unset_default_device", "functional/ivy/device/used_mem_on_dev", "functional/ivy/elementwise", "functional/ivy/elementwise/abs", "functional/ivy/elementwise/abs/abs_array", "functional/ivy/elementwise/abs/abs_container", "functional/ivy/elementwise/abs/abs_functional", "functional/ivy/elementwise/abs/static_abs_container", "functional/ivy/elementwise/acos", "functional/ivy/elementwise/acos/acos_array", "functional/ivy/elementwise/acos/acos_container", "functional/ivy/elementwise/acos/acos_functional", "functional/ivy/elementwise/acosh", "functional/ivy/elementwise/acosh/acosh_array", "functional/ivy/elementwise/acosh/acosh_container", "functional/ivy/elementwise/acosh/acosh_functional", "functional/ivy/elementwise/add", "functional/ivy/elementwise/add/add_array", "functional/ivy/elementwise/add/add_container", "functional/ivy/elementwise/add/add_functional", "functional/ivy/elementwise/add/static_add_container", "functional/ivy/elementwise/asin", "functional/ivy/elementwise/asin/asin_array", "functional/ivy/elementwise/asin/asin_container", "functional/ivy/elementwise/asin/asin_functional", "functional/ivy/elementwise/asinh", "functional/ivy/elementwise/asinh/asinh_array", "functional/ivy/elementwise/asinh/asinh_container", "functional/ivy/elementwise/asinh/asinh_functional", "functional/ivy/elementwise/asinh/static_asinh_container", "functional/ivy/elementwise/atan", "functional/ivy/elementwise/atan/atan_array", "functional/ivy/elementwise/atan/atan_container", "functional/ivy/elementwise/atan/atan_functional", "functional/ivy/elementwise/atan2", "functional/ivy/elementwise/atan2/atan2_array", "functional/ivy/elementwise/atan2/atan2_container", "functional/ivy/elementwise/atan2/atan2_functional", "functional/ivy/elementwise/atanh", "functional/ivy/elementwise/atanh/atanh_array", "functional/ivy/elementwise/atanh/atanh_container", "functional/ivy/elementwise/atanh/atanh_functional", "functional/ivy/elementwise/bitwise_and", "functional/ivy/elementwise/bitwise_and/bitwise_and_array", "functional/ivy/elementwise/bitwise_and/bitwise_and_container", "functional/ivy/elementwise/bitwise_and/bitwise_and_functional", "functional/ivy/elementwise/bitwise_invert", "functional/ivy/elementwise/bitwise_invert/bitwise_invert_array", "functional/ivy/elementwise/bitwise_invert/bitwise_invert_container", "functional/ivy/elementwise/bitwise_invert/bitwise_invert_functional", "functional/ivy/elementwise/bitwise_left_shift", "functional/ivy/elementwise/bitwise_left_shift/bitwise_left_shift_array", "functional/ivy/elementwise/bitwise_left_shift/bitwise_left_shift_container", "functional/ivy/elementwise/bitwise_left_shift/bitwise_left_shift_functional", "functional/ivy/elementwise/bitwise_or", "functional/ivy/elementwise/bitwise_or/bitwise_or_array", "functional/ivy/elementwise/bitwise_or/bitwise_or_container", "functional/ivy/elementwise/bitwise_or/bitwise_or_functional", "functional/ivy/elementwise/bitwise_right_shift", "functional/ivy/elementwise/bitwise_right_shift/bitwise_right_shift_array", "functional/ivy/elementwise/bitwise_right_shift/bitwise_right_shift_container", "functional/ivy/elementwise/bitwise_right_shift/bitwise_right_shift_functional", "functional/ivy/elementwise/bitwise_xor", "functional/ivy/elementwise/bitwise_xor/bitwise_xor_array", "functional/ivy/elementwise/bitwise_xor/bitwise_xor_container", "functional/ivy/elementwise/bitwise_xor/bitwise_xor_functional", "functional/ivy/elementwise/ceil", "functional/ivy/elementwise/ceil/ceil_array", "functional/ivy/elementwise/ceil/ceil_container", "functional/ivy/elementwise/ceil/ceil_functional", "functional/ivy/elementwise/cos", "functional/ivy/elementwise/cos/cos_array", "functional/ivy/elementwise/cos/cos_container", "functional/ivy/elementwise/cos/cos_functional", "functional/ivy/elementwise/cosh", "functional/ivy/elementwise/cosh/cosh_array", "functional/ivy/elementwise/cosh/cosh_container", "functional/ivy/elementwise/cosh/cosh_functional", "functional/ivy/elementwise/divide", "functional/ivy/elementwise/divide/divide_array", "functional/ivy/elementwise/divide/divide_container", "functional/ivy/elementwise/divide/divide_functional", "functional/ivy/elementwise/divide/static_divide_container", "functional/ivy/elementwise/equal", "functional/ivy/elementwise/equal/equal_array", "functional/ivy/elementwise/equal/equal_container", "functional/ivy/elementwise/equal/equal_functional", "functional/ivy/elementwise/erf", "functional/ivy/elementwise/erf/erf_array", "functional/ivy/elementwise/erf/erf_container", "functional/ivy/elementwise/erf/erf_functional", "functional/ivy/elementwise/exp", "functional/ivy/elementwise/exp/exp_array", "functional/ivy/elementwise/exp/exp_container", "functional/ivy/elementwise/exp/exp_functional", "functional/ivy/elementwise/expm1", "functional/ivy/elementwise/expm1/expm1_array", "functional/ivy/elementwise/expm1/expm1_container", "functional/ivy/elementwise/expm1/expm1_functional", "functional/ivy/elementwise/floor", "functional/ivy/elementwise/floor/floor_array", "functional/ivy/elementwise/floor/floor_container", "functional/ivy/elementwise/floor/floor_functional", "functional/ivy/elementwise/floor_divide", "functional/ivy/elementwise/floor_divide/floor_divide_array", "functional/ivy/elementwise/floor_divide/floor_divide_container", "functional/ivy/elementwise/floor_divide/floor_divide_functional", "functional/ivy/elementwise/greater", "functional/ivy/elementwise/greater/greater_array", "functional/ivy/elementwise/greater/greater_container", "functional/ivy/elementwise/greater/greater_functional", "functional/ivy/elementwise/greater_equal", "functional/ivy/elementwise/greater_equal/greater_equal_array", "functional/ivy/elementwise/greater_equal/greater_equal_container", "functional/ivy/elementwise/greater_equal/greater_equal_functional", "functional/ivy/elementwise/isfinite", "functional/ivy/elementwise/isfinite/isfinite_array", "functional/ivy/elementwise/isfinite/isfinite_container", "functional/ivy/elementwise/isfinite/isfinite_functional", "functional/ivy/elementwise/isinf", "functional/ivy/elementwise/isinf/isinf_array", "functional/ivy/elementwise/isinf/isinf_container", "functional/ivy/elementwise/isinf/isinf_functional", "functional/ivy/elementwise/isnan", "functional/ivy/elementwise/isnan/isnan_array", "functional/ivy/elementwise/isnan/isnan_container", "functional/ivy/elementwise/isnan/isnan_functional", "functional/ivy/elementwise/less", "functional/ivy/elementwise/less/less_array", "functional/ivy/elementwise/less/less_container", "functional/ivy/elementwise/less/less_functional", "functional/ivy/elementwise/less_equal", "functional/ivy/elementwise/less_equal/less_equal_array", "functional/ivy/elementwise/less_equal/less_equal_container", "functional/ivy/elementwise/less_equal/less_equal_functional", "functional/ivy/elementwise/log", "functional/ivy/elementwise/log/log_array", "functional/ivy/elementwise/log/log_container", "functional/ivy/elementwise/log/log_functional", "functional/ivy/elementwise/log10", "functional/ivy/elementwise/log10/log10_array", "functional/ivy/elementwise/log10/log10_container", "functional/ivy/elementwise/log10/log10_functional", "functional/ivy/elementwise/log1p", "functional/ivy/elementwise/log1p/log1p_array", "functional/ivy/elementwise/log1p/log1p_container", "functional/ivy/elementwise/log1p/log1p_functional", "functional/ivy/elementwise/log2", "functional/ivy/elementwise/log2/log2_array", "functional/ivy/elementwise/log2/log2_container", "functional/ivy/elementwise/log2/log2_functional", "functional/ivy/elementwise/logaddexp", "functional/ivy/elementwise/logaddexp/logaddexp_array", "functional/ivy/elementwise/logaddexp/logaddexp_container", "functional/ivy/elementwise/logaddexp/logaddexp_functional", "functional/ivy/elementwise/logical_and", "functional/ivy/elementwise/logical_and/logical_and_array", "functional/ivy/elementwise/logical_and/logical_and_container", "functional/ivy/elementwise/logical_and/logical_and_functional", "functional/ivy/elementwise/logical_not", "functional/ivy/elementwise/logical_not/logical_not_array", "functional/ivy/elementwise/logical_not/logical_not_container", "functional/ivy/elementwise/logical_not/logical_not_functional", "functional/ivy/elementwise/logical_or", "functional/ivy/elementwise/logical_or/logical_or_array", "functional/ivy/elementwise/logical_or/logical_or_container", "functional/ivy/elementwise/logical_or/logical_or_functional", "functional/ivy/elementwise/logical_xor", "functional/ivy/elementwise/logical_xor/logical_xor_array", "functional/ivy/elementwise/logical_xor/logical_xor_container", "functional/ivy/elementwise/logical_xor/logical_xor_functional", "functional/ivy/elementwise/maximum", "functional/ivy/elementwise/minimum", "functional/ivy/elementwise/multiply", "functional/ivy/elementwise/multiply/multiply_array", "functional/ivy/elementwise/multiply/multiply_container", "functional/ivy/elementwise/multiply/multiply_functional", "functional/ivy/elementwise/multiply/static_multiply_container", "functional/ivy/elementwise/negative", "functional/ivy/elementwise/negative/negative_array", "functional/ivy/elementwise/negative/negative_container", "functional/ivy/elementwise/negative/negative_functional", "functional/ivy/elementwise/not_equal", "functional/ivy/elementwise/not_equal/not_equal_array", "functional/ivy/elementwise/not_equal/not_equal_container", "functional/ivy/elementwise/not_equal/not_equal_functional", "functional/ivy/elementwise/positive", "functional/ivy/elementwise/positive/positive_array", "functional/ivy/elementwise/positive/positive_container", "functional/ivy/elementwise/positive/positive_functional", "functional/ivy/elementwise/pow", "functional/ivy/elementwise/pow/pow_array", "functional/ivy/elementwise/pow/pow_container", "functional/ivy/elementwise/pow/pow_functional", "functional/ivy/elementwise/remainder", "functional/ivy/elementwise/remainder/remainder_array", "functional/ivy/elementwise/remainder/remainder_container", "functional/ivy/elementwise/remainder/remainder_functional", "functional/ivy/elementwise/round", "functional/ivy/elementwise/round/round_array", "functional/ivy/elementwise/round/round_container", "functional/ivy/elementwise/round/round_functional", "functional/ivy/elementwise/sign", "functional/ivy/elementwise/sign/sign_array", "functional/ivy/elementwise/sign/sign_container", "functional/ivy/elementwise/sign/sign_functional", "functional/ivy/elementwise/sin", "functional/ivy/elementwise/sin/sin_array", "functional/ivy/elementwise/sin/sin_container", "functional/ivy/elementwise/sin/sin_functional", "functional/ivy/elementwise/sinh", "functional/ivy/elementwise/sinh/sinh_array", "functional/ivy/elementwise/sinh/sinh_container", "functional/ivy/elementwise/sinh/sinh_functional", "functional/ivy/elementwise/sqrt", "functional/ivy/elementwise/sqrt/sqrt_array", "functional/ivy/elementwise/sqrt/sqrt_container", "functional/ivy/elementwise/sqrt/sqrt_functional", "functional/ivy/elementwise/square", "functional/ivy/elementwise/square/square_array", "functional/ivy/elementwise/square/square_container", "functional/ivy/elementwise/square/square_functional", "functional/ivy/elementwise/subtract", "functional/ivy/elementwise/subtract/static_subtract_container", "functional/ivy/elementwise/subtract/subtract_array", "functional/ivy/elementwise/subtract/subtract_container", "functional/ivy/elementwise/subtract/subtract_functional", "functional/ivy/elementwise/tan", "functional/ivy/elementwise/tan/static_tan_container", "functional/ivy/elementwise/tan/tan_array", "functional/ivy/elementwise/tan/tan_container", "functional/ivy/elementwise/tan/tan_functional", "functional/ivy/elementwise/tanh", "functional/ivy/elementwise/tanh/static_tanh_container", "functional/ivy/elementwise/tanh/tanh_array", "functional/ivy/elementwise/tanh/tanh_container", "functional/ivy/elementwise/tanh/tanh_functional", "functional/ivy/elementwise/trunc", "functional/ivy/elementwise/trunc/trunc_array", "functional/ivy/elementwise/trunc/trunc_container", "functional/ivy/elementwise/trunc/trunc_functional", "functional/ivy/general", "functional/ivy/general/all_equal", "functional/ivy/general/all_equal/all_equal_array", "functional/ivy/general/all_equal/all_equal_container", "functional/ivy/general/all_equal/all_equal_functional", "functional/ivy/general/all_equal/static_all_equal_container", "functional/ivy/general/arg_info", "functional/ivy/general/arg_names", "functional/ivy/general/array_equal", "functional/ivy/general/arrays_equal", "functional/ivy/general/assert_supports_inplace", "functional/ivy/general/cache_fn", "functional/ivy/general/clip_matrix_norm", "functional/ivy/general/clip_vector_norm", "functional/ivy/general/clip_vector_norm/clip_vector_norm_container", "functional/ivy/general/clip_vector_norm/clip_vector_norm_functional", "functional/ivy/general/container_types", "functional/ivy/general/copy_array", "functional/ivy/general/cumprod", "functional/ivy/general/cumsum", "functional/ivy/general/current_backend_str", "functional/ivy/general/default", "functional/ivy/general/einops_rearrange", "functional/ivy/general/einops_reduce", "functional/ivy/general/einops_repeat", "functional/ivy/general/exists", "functional/ivy/general/floormod", "functional/ivy/general/fourier_encode", "functional/ivy/general/gather", "functional/ivy/general/gather_nd", "functional/ivy/general/gather_nd/gather_nd_array", "functional/ivy/general/gather_nd/gather_nd_container", "functional/ivy/general/gather_nd/gather_nd_functional", "functional/ivy/general/gather_nd/static_gather_nd_container", "functional/ivy/general/get_all_arrays_in_memory", "functional/ivy/general/get_min_base", "functional/ivy/general/get_min_denominator", "functional/ivy/general/get_num_dims", "functional/ivy/general/get_referrers_recursive", "functional/ivy/general/has_nans", "functional/ivy/general/indices_where", "functional/ivy/general/inplace_arrays_supported", "functional/ivy/general/inplace_decrement", "functional/ivy/general/inplace_increment", "functional/ivy/general/inplace_update", "functional/ivy/general/inplace_variables_supported", "functional/ivy/general/is_array", "functional/ivy/general/is_ivy_array", "functional/ivy/general/is_ivy_container", "functional/ivy/general/is_native_array", "functional/ivy/general/match_kwargs", "functional/ivy/general/multiprocessing", "functional/ivy/general/num_arrays_in_memory", "functional/ivy/general/one_hot", "functional/ivy/general/print_all_arrays_in_memory", "functional/ivy/general/queue_timeout", "functional/ivy/general/scatter_flat", "functional/ivy/general/scatter_nd", "functional/ivy/general/set_min_base", "functional/ivy/general/set_min_denominator", "functional/ivy/general/set_queue_timeout", "functional/ivy/general/set_tmp_dir", "functional/ivy/general/shape", "functional/ivy/general/shape_to_tuple", "functional/ivy/general/stable_divide", "functional/ivy/general/stable_pow", "functional/ivy/general/supports_inplace", "functional/ivy/general/tmp_dir", "functional/ivy/general/to_list", "functional/ivy/general/to_numpy", "functional/ivy/general/to_scalar", "functional/ivy/general/try_else_none", "functional/ivy/general/unstack", "functional/ivy/general/value_is_nan", "functional/ivy/gradients", "functional/ivy/gradients/GradientTracking:\n    \"\"\"\"\"\"\n\n    # noinspection PyShadowingNames\n    def __init__", "functional/ivy/gradients/adam_step", "functional/ivy/gradients/adam_step/adam_step_array", "functional/ivy/gradients/adam_step/adam_step_container", "functional/ivy/gradients/adam_step/adam_step_functional", "functional/ivy/gradients/adam_step/static_adam_step_container", "functional/ivy/gradients/adam_update", "functional/ivy/gradients/adam_update/adam_update_container", "functional/ivy/gradients/adam_update/adam_update_functional", "functional/ivy/gradients/adam_update/static_adam_update_container", "functional/ivy/gradients/execute_with_gradients", "functional/ivy/gradients/gradient_descent_update", "functional/ivy/gradients/gradient_descent_update/gradient_descent_update_container", "functional/ivy/gradients/gradient_descent_update/gradient_descent_update_functional", "functional/ivy/gradients/gradient_descent_update/static_gradient_descent_update_container", "functional/ivy/gradients/is_variable", "functional/ivy/gradients/is_variable/is_variable_container", "functional/ivy/gradients/is_variable/is_variable_functional", "functional/ivy/gradients/is_variable/static_is_variable_container", "functional/ivy/gradients/lamb_update", "functional/ivy/gradients/lamb_update/lamb_update_container", "functional/ivy/gradients/lamb_update/lamb_update_functional", "functional/ivy/gradients/lamb_update/static_lamb_update_container", "functional/ivy/gradients/lars_update", "functional/ivy/gradients/lars_update/lars_update_container", "functional/ivy/gradients/lars_update/lars_update_functional", "functional/ivy/gradients/lars_update/static_lars_update_container", "functional/ivy/gradients/optimizer_update", "functional/ivy/gradients/optimizer_update/optimizer_update_container", "functional/ivy/gradients/optimizer_update/optimizer_update_functional", "functional/ivy/gradients/optimizer_update/static_optimizer_update_container", "functional/ivy/gradients/set_with_grads", "functional/ivy/gradients/stop_gradient", "functional/ivy/gradients/unset_with_grads", "functional/ivy/gradients/variable", "functional/ivy/gradients/variable_data", "functional/ivy/gradients/with_grads", "functional/ivy/layers", "functional/ivy/layers/conv1d", "functional/ivy/layers/conv1d_transpose", "functional/ivy/layers/conv2d", "functional/ivy/layers/conv2d_transpose", "functional/ivy/layers/conv3d", "functional/ivy/layers/conv3d_transpose", "functional/ivy/layers/depthwise_conv2d", "functional/ivy/layers/dropout", "functional/ivy/layers/linear", "functional/ivy/layers/lstm_update", "functional/ivy/layers/multi_head_attention", "functional/ivy/layers/scaled_dot_product_attention", "functional/ivy/linear_algebra", "functional/ivy/linear_algebra/cholesky", "functional/ivy/linear_algebra/cholesky/cholesky_array", "functional/ivy/linear_algebra/cholesky/cholesky_container", "functional/ivy/linear_algebra/cholesky/cholesky_functional", "functional/ivy/linear_algebra/cholesky/static_cholesky_container", "functional/ivy/linear_algebra/cross", "functional/ivy/linear_algebra/cross/cross_array", "functional/ivy/linear_algebra/cross/cross_functional", "functional/ivy/linear_algebra/det", "functional/ivy/linear_algebra/det/det_array", "functional/ivy/linear_algebra/det/det_functional", "functional/ivy/linear_algebra/diagonal", "functional/ivy/linear_algebra/diagonal/diagonal_array", "functional/ivy/linear_algebra/diagonal/diagonal_functional", "functional/ivy/linear_algebra/eigh", "functional/ivy/linear_algebra/eigh/eigh_array", "functional/ivy/linear_algebra/eigh/eigh_functional", "functional/ivy/linear_algebra/eigvalsh", "functional/ivy/linear_algebra/eigvalsh/eigvalsh_array", "functional/ivy/linear_algebra/eigvalsh/eigvalsh_functional", "functional/ivy/linear_algebra/inv", "functional/ivy/linear_algebra/inv/inv_array", "functional/ivy/linear_algebra/inv/inv_functional", "functional/ivy/linear_algebra/matmul", "functional/ivy/linear_algebra/matmul/matmul_array", "functional/ivy/linear_algebra/matmul/matmul_container", "functional/ivy/linear_algebra/matmul/matmul_functional", "functional/ivy/linear_algebra/matrix_norm", "functional/ivy/linear_algebra/matrix_norm/matrix_norm_array", "functional/ivy/linear_algebra/matrix_norm/matrix_norm_functional", "functional/ivy/linear_algebra/matrix_power", "functional/ivy/linear_algebra/matrix_rank", "functional/ivy/linear_algebra/matrix_rank/matrix_rank_array", "functional/ivy/linear_algebra/matrix_rank/matrix_rank_functional", "functional/ivy/linear_algebra/matrix_transpose", "functional/ivy/linear_algebra/matrix_transpose/matrix_transpose_array", "functional/ivy/linear_algebra/matrix_transpose/matrix_transpose_functional", "functional/ivy/linear_algebra/outer", "functional/ivy/linear_algebra/outer/outer_array", "functional/ivy/linear_algebra/outer/outer_functional", "functional/ivy/linear_algebra/pinv", "functional/ivy/linear_algebra/pinv/pinv_array", "functional/ivy/linear_algebra/pinv/pinv_functional", "functional/ivy/linear_algebra/qr", "functional/ivy/linear_algebra/qr/qr_array", "functional/ivy/linear_algebra/qr/qr_functional", "functional/ivy/linear_algebra/slogdet", "functional/ivy/linear_algebra/solve", "functional/ivy/linear_algebra/solve/solve_array", "functional/ivy/linear_algebra/solve/solve_functional", "functional/ivy/linear_algebra/svd", "functional/ivy/linear_algebra/svd/svd_array", "functional/ivy/linear_algebra/svd/svd_functional", "functional/ivy/linear_algebra/svdvals", "functional/ivy/linear_algebra/svdvals/svdvals_array", "functional/ivy/linear_algebra/svdvals/svdvals_functional", "functional/ivy/linear_algebra/tensordot", "functional/ivy/linear_algebra/tensordot/tensordot_array", "functional/ivy/linear_algebra/tensordot/tensordot_functional", "functional/ivy/linear_algebra/trace", "functional/ivy/linear_algebra/trace/trace_array", "functional/ivy/linear_algebra/trace/trace_functional", "functional/ivy/linear_algebra/vecdot", "functional/ivy/linear_algebra/vecdot/vecdot_array", "functional/ivy/linear_algebra/vecdot/vecdot_functional", "functional/ivy/linear_algebra/vector_norm", "functional/ivy/linear_algebra/vector_norm/vector_norm_array", "functional/ivy/linear_algebra/vector_norm/vector_norm_functional", "functional/ivy/linear_algebra/vector_to_skew_symmetric_matrix", "functional/ivy/linear_algebra/vector_to_skew_symmetric_matrix/vector_to_skew_symmetric_matrix_array", "functional/ivy/linear_algebra/vector_to_skew_symmetric_matrix/vector_to_skew_symmetric_matrix_functional", "functional/ivy/losses", "functional/ivy/losses/binary_cross_entropy", "functional/ivy/losses/binary_cross_entropy/binary_cross_entropy_array", "functional/ivy/losses/binary_cross_entropy/binary_cross_entropy_container", "functional/ivy/losses/binary_cross_entropy/binary_cross_entropy_functional", "functional/ivy/losses/binary_cross_entropy/static_binary_cross_entropy_container", "functional/ivy/losses/cross_entropy", "functional/ivy/losses/cross_entropy/cross_entropy_array", "functional/ivy/losses/cross_entropy/cross_entropy_container", "functional/ivy/losses/cross_entropy/cross_entropy_functional", "functional/ivy/losses/cross_entropy/static_cross_entropy_container", "functional/ivy/losses/sparse_cross_entropy", "functional/ivy/losses/sparse_cross_entropy/sparse_cross_entropy_array", "functional/ivy/losses/sparse_cross_entropy/sparse_cross_entropy_container", "functional/ivy/losses/sparse_cross_entropy/sparse_cross_entropy_functional", "functional/ivy/losses/sparse_cross_entropy/static_sparse_cross_entropy_container", "functional/ivy/manipulation", "functional/ivy/manipulation/clip", "functional/ivy/manipulation/clip/clip_array", "functional/ivy/manipulation/clip/clip_container", "functional/ivy/manipulation/clip/clip_functional", "functional/ivy/manipulation/clip/static_clip_container", "functional/ivy/manipulation/concat", "functional/ivy/manipulation/concat/concat_array", "functional/ivy/manipulation/concat/concat_container", "functional/ivy/manipulation/concat/concat_functional", "functional/ivy/manipulation/constant_pad", "functional/ivy/manipulation/constant_pad/constant_pad_array", "functional/ivy/manipulation/constant_pad/constant_pad_container", "functional/ivy/manipulation/constant_pad/constant_pad_functional", "functional/ivy/manipulation/expand_dims", "functional/ivy/manipulation/expand_dims/expand_dims_array", "functional/ivy/manipulation/expand_dims/expand_dims_container", "functional/ivy/manipulation/expand_dims/expand_dims_functional", "functional/ivy/manipulation/flip", "functional/ivy/manipulation/flip/flip_array", "functional/ivy/manipulation/flip/flip_container", "functional/ivy/manipulation/flip/flip_functional", "functional/ivy/manipulation/permute_dims", "functional/ivy/manipulation/permute_dims/permute_dims_array", "functional/ivy/manipulation/permute_dims/permute_dims_container", "functional/ivy/manipulation/permute_dims/permute_dims_functional", "functional/ivy/manipulation/repeat", "functional/ivy/manipulation/repeat/repeat_array", "functional/ivy/manipulation/repeat/repeat_container", "functional/ivy/manipulation/repeat/repeat_functional", "functional/ivy/manipulation/reshape", "functional/ivy/manipulation/reshape/reshape_array", "functional/ivy/manipulation/reshape/reshape_container", "functional/ivy/manipulation/reshape/reshape_functional", "functional/ivy/manipulation/roll", "functional/ivy/manipulation/roll/roll_array", "functional/ivy/manipulation/roll/roll_container", "functional/ivy/manipulation/roll/roll_functional", "functional/ivy/manipulation/roll/static_roll_container", "functional/ivy/manipulation/split", "functional/ivy/manipulation/squeeze", "functional/ivy/manipulation/squeeze/squeeze_array", "functional/ivy/manipulation/squeeze/squeeze_container", "functional/ivy/manipulation/squeeze/squeeze_functional", "functional/ivy/manipulation/stack", "functional/ivy/manipulation/stack/stack_array", "functional/ivy/manipulation/stack/stack_container", "functional/ivy/manipulation/stack/stack_functional", "functional/ivy/manipulation/swapaxes", "functional/ivy/manipulation/swapaxes/swapaxes_array", "functional/ivy/manipulation/swapaxes/swapaxes_container", "functional/ivy/manipulation/swapaxes/swapaxes_functional", "functional/ivy/manipulation/tile", "functional/ivy/manipulation/tile/tile_array", "functional/ivy/manipulation/tile/tile_container", "functional/ivy/manipulation/tile/tile_functional", "functional/ivy/manipulation/zero_pad", "functional/ivy/manipulation/zero_pad/zero_pad_array", "functional/ivy/manipulation/zero_pad/zero_pad_container", "functional/ivy/manipulation/zero_pad/zero_pad_functional", "functional/ivy/meta", "functional/ivy/meta/fomaml_step", "functional/ivy/meta/maml_step", "functional/ivy/meta/reptile_step", "functional/ivy/nest", "functional/ivy/nest/all_nested_indices", "functional/ivy/nest/copy_nest", "functional/ivy/nest/index_nest", "functional/ivy/nest/insert_into_nest_at_index", "functional/ivy/nest/insert_into_nest_at_indices", "functional/ivy/nest/map", "functional/ivy/nest/map_nest_at_index", "functional/ivy/nest/map_nest_at_indices", "functional/ivy/nest/multi_index_nest", "functional/ivy/nest/nested_any", "functional/ivy/nest/nested_indices_where", "functional/ivy/nest/nested_map", "functional/ivy/nest/nested_multi_map", "functional/ivy/nest/prune_nest_at_index", "functional/ivy/nest/prune_nest_at_indices", "functional/ivy/nest/set_nest_at_index", "functional/ivy/nest/set_nest_at_indices", "functional/ivy/norms", "functional/ivy/norms/layer_norm", "functional/ivy/norms/layer_norm/layer_norm_array", "functional/ivy/norms/layer_norm/layer_norm_container", "functional/ivy/norms/layer_norm/layer_norm_functional", "functional/ivy/random", "functional/ivy/random/multinomial", "functional/ivy/random/randint", "functional/ivy/random/randint/randint_functional", "functional/ivy/random/randint/static_randint_container", "functional/ivy/random/random_normal", "functional/ivy/random/random_uniform", "functional/ivy/random/random_uniform/random_uniform_container", "functional/ivy/random/random_uniform/random_uniform_functional", "functional/ivy/random/random_uniform/static_random_uniform_container", "functional/ivy/random/seed", "functional/ivy/random/shuffle", "functional/ivy/searching", "functional/ivy/searching/argmax", "functional/ivy/searching/argmin", "functional/ivy/searching/nonzero", "functional/ivy/searching/where", "functional/ivy/set", "functional/ivy/set/unique_all", "functional/ivy/set/unique_counts", "functional/ivy/set/unique_counts/static_unique_counts_container", "functional/ivy/set/unique_counts/unique_counts_array", "functional/ivy/set/unique_counts/unique_counts_container", "functional/ivy/set/unique_counts/unique_counts_functional", "functional/ivy/set/unique_inverse", "functional/ivy/set/unique_values", "functional/ivy/sorting", "functional/ivy/sorting/argsort", "functional/ivy/sorting/argsort/argsort_array", "functional/ivy/sorting/argsort/argsort_container", "functional/ivy/sorting/argsort/argsort_functional", "functional/ivy/sorting/argsort/static_argsort_container", "functional/ivy/sorting/sort", "functional/ivy/sorting/sort/sort_array", "functional/ivy/sorting/sort/sort_container", "functional/ivy/sorting/sort/sort_functional", "functional/ivy/sorting/sort/static_sort_container", "functional/ivy/statistical", "functional/ivy/statistical/einsum", "functional/ivy/statistical/einsum/einsum_array", "functional/ivy/statistical/einsum/einsum_container", "functional/ivy/statistical/einsum/einsum_functional", "functional/ivy/statistical/max", "functional/ivy/statistical/max/max_array", "functional/ivy/statistical/max/max_container", "functional/ivy/statistical/max/max_functional", "functional/ivy/statistical/mean", "functional/ivy/statistical/mean/mean_array", "functional/ivy/statistical/mean/mean_container", "functional/ivy/statistical/mean/mean_functional", "functional/ivy/statistical/min", "functional/ivy/statistical/min/min_array", "functional/ivy/statistical/min/min_container", "functional/ivy/statistical/min/min_functional", "functional/ivy/statistical/prod", "functional/ivy/statistical/prod/prod_array", "functional/ivy/statistical/prod/prod_container", "functional/ivy/statistical/prod/prod_functional", "functional/ivy/statistical/std", "functional/ivy/statistical/std/std_array", "functional/ivy/statistical/std/std_container", "functional/ivy/statistical/std/std_functional", "functional/ivy/statistical/sum", "functional/ivy/statistical/sum/sum_array", "functional/ivy/statistical/sum/sum_container", "functional/ivy/statistical/sum/sum_functional", "functional/ivy/statistical/var", "functional/ivy/statistical/var/var_array", "functional/ivy/statistical/var/var_container", "functional/ivy/statistical/var/var_functional", "functional/ivy/utility", "functional/ivy/utility/all", "functional/ivy/utility/all/all_array", "functional/ivy/utility/all/all_container", "functional/ivy/utility/all/all_functional", "functional/ivy/utility/all/static_all_container", "functional/ivy/utility/any", "functional/ivy/utility/any/any_array", "functional/ivy/utility/any/any_container", "functional/ivy/utility/any/any_functional", "functional/ivy/utility/any/static_any_container", "index", "index_append", "index_prepend", "inspection", "inspection/add_array_specs", "inspection/fn_array_spec", "roadmap", "stateful", "stateful/activations", "stateful/activations/GEGLU", "stateful/activations/GELU", "stateful/converters", "stateful/converters/to_ivy_module", "stateful/initializers", "stateful/initializers/Constant:\n    def __init__", "stateful/initializers/FirstLayerSiren", "stateful/initializers/GlorotUniform", "stateful/initializers/KaimingNormal:\n    def __init__", "stateful/initializers/Ones", "stateful/initializers/Siren", "stateful/initializers/Uniform:\n    def __init__", "stateful/initializers/Zeros", "stateful/layers", "stateful/layers/Conv1D", "stateful/layers/Conv1DTranspose", "stateful/layers/Conv2D", "stateful/layers/Conv2DTranspose", "stateful/layers/Conv3D", "stateful/layers/Conv3DTranspose", "stateful/layers/DepthwiseConv2D", "stateful/layers/Dropout", "stateful/layers/LSTM", "stateful/layers/Linear", "stateful/layers/MultiHeadAttention", "stateful/module", "stateful/module/Module", "stateful/norms", "stateful/norms/LayerNorm", "stateful/optimizers", "stateful/optimizers/Adam", "stateful/optimizers/LAMB", "stateful/optimizers/LARS", "stateful/optimizers/Optimizer", "stateful/optimizers/SGD", "stateful/sequential", "stateful/sequential/Sequential", "supported_frameworks", "verbosity", "verbosity/cprint"], "filenames": ["backend_handler.rst", "backend_handler/ContextManager:\n    def __init__.rst", "backend_handler/choose_random_backend.rst", "backend_handler/clear_backend_stack.rst", "backend_handler/current_backend.rst", "backend_handler/get_backend.rst", "backend_handler/set_backend.rst", "backend_handler/try_import_ivy_jax.rst", "backend_handler/try_import_ivy_mxnet.rst", "backend_handler/try_import_ivy_numpy.rst", "backend_handler/try_import_ivy_tf.rst", "backend_handler/try_import_ivy_torch.rst", "backend_handler/unset_backend.rst", "background.rst", "background/ml_explosion.rst", "background/standardization.rst", "background/why_unify.rst", "contributing.rst", "contributing/0_setting_up.rst", "contributing/1_the_basics.rst", "contributing/4_open_tasks.rst", "contributing/building_the_docs.rst", "data_classes.rst", "data_classes/array.rst", "data_classes/array/activations.rst", "data_classes/array/activations/ArrayWithActivations.rst", "data_classes/array/conversions.rst", "data_classes/array/conversions/args_to_ivy.rst", "data_classes/array/conversions/args_to_native.rst", "data_classes/array/conversions/to_ivy.rst", "data_classes/array/conversions/to_native.rst", "data_classes/array/creation.rst", "data_classes/array/creation/ArrayWithCreation.rst", "data_classes/array/data_type.rst", "data_classes/array/data_type/ArrayWithDataTypes.rst", "data_classes/array/device.rst", "data_classes/array/device/ArrayWithDevice.rst", "data_classes/array/elementwise.rst", "data_classes/array/elementwise/ArrayWithElementwise.rst", "data_classes/array/general.rst", "data_classes/array/general/ArrayWithGeneral.rst", "data_classes/array/gradients.rst", "data_classes/array/gradients/ArrayWithGradients.rst", "data_classes/array/image.rst", "data_classes/array/image/ArrayWithImage.rst", "data_classes/array/layers.rst", "data_classes/array/layers/ArrayWithLayers.rst", "data_classes/array/linear_algebra.rst", "data_classes/array/linear_algebra/ArrayWithLinearAlgebra.rst", "data_classes/array/losses.rst", "data_classes/array/losses/ArrayWithLosses.rst", "data_classes/array/manipulation.rst", "data_classes/array/manipulation/ArrayWithManipulation.rst", "data_classes/array/norms.rst", "data_classes/array/norms/ArrayWithNorms.rst", "data_classes/array/random.rst", "data_classes/array/random/ArrayWithRandom.rst", "data_classes/array/searching.rst", "data_classes/array/searching/ArrayWithSearching.rst", "data_classes/array/set.rst", "data_classes/array/set/ArrayWithSet.rst", "data_classes/array/sorting.rst", "data_classes/array/sorting/ArrayWithSorting.rst", "data_classes/array/statistical.rst", "data_classes/array/statistical/ArrayWithStatistical.rst", "data_classes/array/utility.rst", "data_classes/array/utility/ArrayWithUtility.rst", "data_classes/array/wrapping.rst", "data_classes/array/wrapping/add_ivy_array_instance_methods.rst", "data_classes/container.rst", "data_classes/container/activations.rst", "data_classes/container/activations/ContainerWithActivations.rst", "data_classes/container/base.rst", "data_classes/container/base/ContainerBase.rst", "data_classes/container/container.rst", "data_classes/container/container/Container.rst", "data_classes/container/container/MultiDevContainer.rst", "data_classes/container/creation.rst", "data_classes/container/creation/ContainerWithCreation.rst", "data_classes/container/data_type.rst", "data_classes/container/data_type/ContainerWithDataTypes.rst", "data_classes/container/device.rst", "data_classes/container/device/ContainerWithDevice.rst", "data_classes/container/elementwise.rst", "data_classes/container/elementwise/ContainerWithElementwise.rst", "data_classes/container/general.rst", "data_classes/container/general/ContainerWithGeneral.rst", "data_classes/container/gradients.rst", "data_classes/container/gradients/ContainerWithGradients.rst", "data_classes/container/image.rst", "data_classes/container/image/ContainerWithImage.rst", "data_classes/container/layers.rst", "data_classes/container/layers/ContainerWithLayers.rst", "data_classes/container/linear_algebra.rst", "data_classes/container/linear_algebra/ContainerWithLinearAlgebra.rst", "data_classes/container/losses.rst", "data_classes/container/losses/ContainerWithLosses.rst", "data_classes/container/manipulation.rst", "data_classes/container/manipulation/ContainerWithManipulation.rst", "data_classes/container/norms.rst", "data_classes/container/norms/ContainerWithNorms.rst", "data_classes/container/random.rst", "data_classes/container/random/ContainerWithRandom.rst", "data_classes/container/searching.rst", "data_classes/container/searching/ContainerWithSearching.rst", "data_classes/container/set.rst", "data_classes/container/set/ContainerWithSet.rst", "data_classes/container/sorting.rst", "data_classes/container/sorting/ContainerWithSorting.rst", "data_classes/container/statistical.rst", "data_classes/container/statistical/ContainerWithStatistical.rst", "data_classes/container/utility.rst", "data_classes/container/utility/ContainerWithUtility.rst", "data_classes/container/wrapping.rst", "data_classes/container/wrapping/add_ivy_container_instance_methods.rst", "deep_dive.rst", "deep_dive/0_navigating_the_code.rst", "deep_dive/10_function_arguments.rst", "deep_dive/11_docstrings.rst", "deep_dive/12_docstring_examples.rst", "deep_dive/13_array_api_tests.rst", "deep_dive/14_ivy_tests.rst", "deep_dive/1_function_types.rst", "deep_dive/2_backend_setting.rst", "deep_dive/3_function_wrapping.rst", "deep_dive/4_arrays.rst", "deep_dive/5_containers.rst", "deep_dive/6_data_types.rst", "deep_dive/7_devices.rst", "deep_dive/8_inplace_updates.rst", "deep_dive/9_formatting.rst", "design.rst", "design/building_blocks.rst", "design/ivy_as_a_framework.rst", "design/ivy_as_a_framework/ivy_array.rst", "design/ivy_as_a_framework/ivy_container.rst", "design/ivy_as_a_framework/ivy_stateful_api.rst", "design/ivy_as_a_transpiler.rst", "docs/ivy.rst", "docs/ivy_builder.rst", "docs/ivy_ecosystem.rst", "docs/ivy_gym.rst", "docs/ivy_mech.rst", "docs/ivy_memory.rst", "docs/ivy_models.rst", "docs/ivy_robot.rst", "docs/ivy_vision.rst", "extensions.rst", "extensions/applied_libraries.rst", "faq.rst", "func_wrapper.rst", "func_wrapper/handle_nestable.rst", "func_wrapper/handle_out_argument.rst", "func_wrapper/infer_device.rst", "func_wrapper/infer_dtype.rst", "func_wrapper/inputs_to_ivy_arrays.rst", "func_wrapper/inputs_to_native_arrays.rst", "func_wrapper/outputs_to_ivy_arrays.rst", "func_wrapper/to_native_arrays_and_back.rst", "functional/ivy.rst", "functional/ivy/activations.rst", "functional/ivy/activations/gelu.rst", "functional/ivy/activations/leaky_relu.rst", "functional/ivy/activations/relu.rst", "functional/ivy/activations/sigmoid.rst", "functional/ivy/activations/softmax.rst", "functional/ivy/activations/softplus.rst", "functional/ivy/activations/softplus/softplus_array.rst", "functional/ivy/activations/softplus/softplus_container.rst", "functional/ivy/activations/softplus/softplus_functional.rst", "functional/ivy/activations/softplus/static_softplus_container.rst", "functional/ivy/activations/tanh.rst", "functional/ivy/compilation.rst", "functional/ivy/compilation/compile.rst", "functional/ivy/constants.rst", "functional/ivy/creation.rst", "functional/ivy/creation/arange.rst", "functional/ivy/creation/arange/arange_functional.rst", "functional/ivy/creation/arange/static_arange_container.rst", "functional/ivy/creation/asarray.rst", "functional/ivy/creation/asarray/asarray_array.rst", "functional/ivy/creation/asarray/asarray_container.rst", "functional/ivy/creation/asarray/asarray_functional.rst", "functional/ivy/creation/asarray/static_asarray_container.rst", "functional/ivy/creation/empty.rst", "functional/ivy/creation/empty_like.rst", "functional/ivy/creation/empty_like/empty_like_array.rst", "functional/ivy/creation/empty_like/empty_like_container.rst", "functional/ivy/creation/empty_like/empty_like_functional.rst", "functional/ivy/creation/empty_like/static_empty_like_container.rst", "functional/ivy/creation/eye.rst", "functional/ivy/creation/eye/eye_functional.rst", "functional/ivy/creation/eye/static_eye_container.rst", "functional/ivy/creation/from_dlpack.rst", "functional/ivy/creation/from_dlpack/from_dlpack_array.rst", "functional/ivy/creation/from_dlpack/from_dlpack_container.rst", "functional/ivy/creation/from_dlpack/from_dlpack_functional.rst", "functional/ivy/creation/from_dlpack/static_from_dlpack_container.rst", "functional/ivy/creation/full.rst", "functional/ivy/creation/full_like.rst", "functional/ivy/creation/full_like/full_like_array.rst", "functional/ivy/creation/full_like/full_like_container.rst", "functional/ivy/creation/full_like/full_like_functional.rst", "functional/ivy/creation/full_like/static_full_like_container.rst", "functional/ivy/creation/linspace.rst", "functional/ivy/creation/linspace/linspace_functional.rst", "functional/ivy/creation/linspace/static_linspace_container.rst", "functional/ivy/creation/logspace.rst", "functional/ivy/creation/logspace/logspace_functional.rst", "functional/ivy/creation/logspace/static_logspace_container.rst", "functional/ivy/creation/meshgrid.rst", "functional/ivy/creation/meshgrid/meshgrid_array.rst", "functional/ivy/creation/meshgrid/meshgrid_container.rst", "functional/ivy/creation/meshgrid/meshgrid_functional.rst", "functional/ivy/creation/meshgrid/static_meshgrid_container.rst", "functional/ivy/creation/native_array.rst", "functional/ivy/creation/native_array/native_array_array.rst", "functional/ivy/creation/native_array/native_array_container.rst", "functional/ivy/creation/native_array/native_array_functional.rst", "functional/ivy/creation/native_array/static_native_array_container.rst", "functional/ivy/creation/ones.rst", "functional/ivy/creation/ones/ones_functional.rst", "functional/ivy/creation/ones/static_ones_container.rst", "functional/ivy/creation/ones_like.rst", "functional/ivy/creation/ones_like/ones_like_array.rst", "functional/ivy/creation/ones_like/ones_like_container.rst", "functional/ivy/creation/ones_like/ones_like_functional.rst", "functional/ivy/creation/ones_like/static_ones_like_container.rst", "functional/ivy/creation/tril.rst", "functional/ivy/creation/tril/static_tril_container.rst", "functional/ivy/creation/tril/tril_array.rst", "functional/ivy/creation/tril/tril_container.rst", "functional/ivy/creation/tril/tril_functional.rst", "functional/ivy/creation/triu.rst", "functional/ivy/creation/triu/static_triu_container.rst", "functional/ivy/creation/triu/triu_array.rst", "functional/ivy/creation/triu/triu_container.rst", "functional/ivy/creation/triu/triu_functional.rst", "functional/ivy/creation/zeros.rst", "functional/ivy/creation/zeros/static_zeros_container.rst", "functional/ivy/creation/zeros/zeros_functional.rst", "functional/ivy/creation/zeros_like.rst", "functional/ivy/creation/zeros_like/static_zeros_like_container.rst", "functional/ivy/creation/zeros_like/zeros_like_array.rst", "functional/ivy/creation/zeros_like/zeros_like_container.rst", "functional/ivy/creation/zeros_like/zeros_like_functional.rst", "functional/ivy/data_type.rst", "functional/ivy/data_type/DefaultDtype:\n    \"\"\"\"\"\"\n\n    # noinspection PyShadowingNames\n    def __init__.rst", "functional/ivy/data_type/DefaultFloatDtype:\n    \"\"\"\"\"\"\n\n    # noinspection PyShadowingNames\n    def __init__.rst", "functional/ivy/data_type/DefaultIntDtype:\n    \"\"\"\"\"\"\n\n    # noinspection PyShadowingNames\n    def __init__.rst", "functional/ivy/data_type/as_ivy_dtype.rst", "functional/ivy/data_type/as_native_dtype.rst", "functional/ivy/data_type/astype.rst", "functional/ivy/data_type/broadcast_arrays.rst", "functional/ivy/data_type/broadcast_to.rst", "functional/ivy/data_type/can_cast.rst", "functional/ivy/data_type/can_cast/can_cast_array.rst", "functional/ivy/data_type/can_cast/can_cast_container.rst", "functional/ivy/data_type/can_cast/can_cast_functional.rst", "functional/ivy/data_type/can_cast/static_can_cast_container.rst", "functional/ivy/data_type/closest_valid_dtype.rst", "functional/ivy/data_type/default_dtype.rst", "functional/ivy/data_type/default_float_dtype.rst", "functional/ivy/data_type/default_int_dtype.rst", "functional/ivy/data_type/dtype.rst", "functional/ivy/data_type/dtype_bits.rst", "functional/ivy/data_type/finfo.rst", "functional/ivy/data_type/function_supported_dtypes.rst", "functional/ivy/data_type/function_unsupported_dtypes.rst", "functional/ivy/data_type/iinfo.rst", "functional/ivy/data_type/invalid_dtype.rst", "functional/ivy/data_type/is_float_dtype.rst", "functional/ivy/data_type/is_int_dtype.rst", "functional/ivy/data_type/promote_types.rst", "functional/ivy/data_type/result_type.rst", "functional/ivy/data_type/set_default_dtype.rst", "functional/ivy/data_type/set_default_float_dtype.rst", "functional/ivy/data_type/set_default_int_dtype.rst", "functional/ivy/data_type/type_promote_arrays.rst", "functional/ivy/data_type/unset_default_dtype.rst", "functional/ivy/data_type/unset_default_float_dtype.rst", "functional/ivy/data_type/unset_default_int_dtype.rst", "functional/ivy/data_type/valid_dtype.rst", "functional/ivy/device.rst", "functional/ivy/device/DefaultDevice:\n    \"\"\"\"\"\"\n\n    # noinspection PyShadowingNames\n    def __init__.rst", "functional/ivy/device/DevClonedItem.rst", "functional/ivy/device/DevClonedIter.rst", "functional/ivy/device/DevClonedNest.rst", "functional/ivy/device/DevDistItem.rst", "functional/ivy/device/DevDistIter.rst", "functional/ivy/device/DevDistNest.rst", "functional/ivy/device/DevManager:\n    \"\"\"\"\"\"\n\n    def __init__.rst", "functional/ivy/device/DevMapper.rst", "functional/ivy/device/DevMapperMultiProc.rst", "functional/ivy/device/MultiDev:\n    def __init__.rst", "functional/ivy/device/MultiDevItem.rst", "functional/ivy/device/MultiDevIter.rst", "functional/ivy/device/MultiDevNest.rst", "functional/ivy/device/Profiler.rst", "functional/ivy/device/as_ivy_dev.rst", "functional/ivy/device/as_native_dev.rst", "functional/ivy/device/clear_mem_on_dev.rst", "functional/ivy/device/default_device.rst", "functional/ivy/device/dev.rst", "functional/ivy/device/dev_clone.rst", "functional/ivy/device/dev_clone_array.rst", "functional/ivy/device/dev_clone_iter.rst", "functional/ivy/device/dev_clone_nest.rst", "functional/ivy/device/dev_dist.rst", "functional/ivy/device/dev_dist_array.rst", "functional/ivy/device/dev_dist_iter.rst", "functional/ivy/device/dev_dist_nest.rst", "functional/ivy/device/dev_unify.rst", "functional/ivy/device/dev_unify_array.rst", "functional/ivy/device/dev_unify_iter.rst", "functional/ivy/device/dev_unify_nest.rst", "functional/ivy/device/dev_util.rst", "functional/ivy/device/get_all_ivy_arrays_on_dev.rst", "functional/ivy/device/gpu_is_available.rst", "functional/ivy/device/num_cpu_cores.rst", "functional/ivy/device/num_gpus.rst", "functional/ivy/device/num_ivy_arrays_on_dev.rst", "functional/ivy/device/percent_used_mem_on_dev.rst", "functional/ivy/device/print_all_ivy_arrays_on_dev.rst", "functional/ivy/device/set_default_device.rst", "functional/ivy/device/set_split_factor.rst", "functional/ivy/device/split_factor.rst", "functional/ivy/device/split_func_call.rst", "functional/ivy/device/to_device.rst", "functional/ivy/device/total_mem_on_dev.rst", "functional/ivy/device/tpu_is_available.rst", "functional/ivy/device/unset_default_device.rst", "functional/ivy/device/used_mem_on_dev.rst", "functional/ivy/elementwise.rst", "functional/ivy/elementwise/abs.rst", "functional/ivy/elementwise/abs/abs_array.rst", "functional/ivy/elementwise/abs/abs_container.rst", "functional/ivy/elementwise/abs/abs_functional.rst", "functional/ivy/elementwise/abs/static_abs_container.rst", "functional/ivy/elementwise/acos.rst", "functional/ivy/elementwise/acos/acos_array.rst", "functional/ivy/elementwise/acos/acos_container.rst", "functional/ivy/elementwise/acos/acos_functional.rst", "functional/ivy/elementwise/acosh.rst", "functional/ivy/elementwise/acosh/acosh_array.rst", "functional/ivy/elementwise/acosh/acosh_container.rst", "functional/ivy/elementwise/acosh/acosh_functional.rst", "functional/ivy/elementwise/add.rst", "functional/ivy/elementwise/add/add_array.rst", "functional/ivy/elementwise/add/add_container.rst", "functional/ivy/elementwise/add/add_functional.rst", "functional/ivy/elementwise/add/static_add_container.rst", "functional/ivy/elementwise/asin.rst", "functional/ivy/elementwise/asin/asin_array.rst", "functional/ivy/elementwise/asin/asin_container.rst", "functional/ivy/elementwise/asin/asin_functional.rst", "functional/ivy/elementwise/asinh.rst", "functional/ivy/elementwise/asinh/asinh_array.rst", "functional/ivy/elementwise/asinh/asinh_container.rst", "functional/ivy/elementwise/asinh/asinh_functional.rst", "functional/ivy/elementwise/asinh/static_asinh_container.rst", "functional/ivy/elementwise/atan.rst", "functional/ivy/elementwise/atan/atan_array.rst", "functional/ivy/elementwise/atan/atan_container.rst", "functional/ivy/elementwise/atan/atan_functional.rst", "functional/ivy/elementwise/atan2.rst", "functional/ivy/elementwise/atan2/atan2_array.rst", "functional/ivy/elementwise/atan2/atan2_container.rst", "functional/ivy/elementwise/atan2/atan2_functional.rst", "functional/ivy/elementwise/atanh.rst", "functional/ivy/elementwise/atanh/atanh_array.rst", "functional/ivy/elementwise/atanh/atanh_container.rst", "functional/ivy/elementwise/atanh/atanh_functional.rst", "functional/ivy/elementwise/bitwise_and.rst", "functional/ivy/elementwise/bitwise_and/bitwise_and_array.rst", "functional/ivy/elementwise/bitwise_and/bitwise_and_container.rst", "functional/ivy/elementwise/bitwise_and/bitwise_and_functional.rst", "functional/ivy/elementwise/bitwise_invert.rst", "functional/ivy/elementwise/bitwise_invert/bitwise_invert_array.rst", "functional/ivy/elementwise/bitwise_invert/bitwise_invert_container.rst", "functional/ivy/elementwise/bitwise_invert/bitwise_invert_functional.rst", "functional/ivy/elementwise/bitwise_left_shift.rst", "functional/ivy/elementwise/bitwise_left_shift/bitwise_left_shift_array.rst", "functional/ivy/elementwise/bitwise_left_shift/bitwise_left_shift_container.rst", "functional/ivy/elementwise/bitwise_left_shift/bitwise_left_shift_functional.rst", "functional/ivy/elementwise/bitwise_or.rst", "functional/ivy/elementwise/bitwise_or/bitwise_or_array.rst", "functional/ivy/elementwise/bitwise_or/bitwise_or_container.rst", "functional/ivy/elementwise/bitwise_or/bitwise_or_functional.rst", "functional/ivy/elementwise/bitwise_right_shift.rst", "functional/ivy/elementwise/bitwise_right_shift/bitwise_right_shift_array.rst", "functional/ivy/elementwise/bitwise_right_shift/bitwise_right_shift_container.rst", "functional/ivy/elementwise/bitwise_right_shift/bitwise_right_shift_functional.rst", "functional/ivy/elementwise/bitwise_xor.rst", "functional/ivy/elementwise/bitwise_xor/bitwise_xor_array.rst", "functional/ivy/elementwise/bitwise_xor/bitwise_xor_container.rst", "functional/ivy/elementwise/bitwise_xor/bitwise_xor_functional.rst", "functional/ivy/elementwise/ceil.rst", "functional/ivy/elementwise/ceil/ceil_array.rst", "functional/ivy/elementwise/ceil/ceil_container.rst", "functional/ivy/elementwise/ceil/ceil_functional.rst", "functional/ivy/elementwise/cos.rst", "functional/ivy/elementwise/cos/cos_array.rst", "functional/ivy/elementwise/cos/cos_container.rst", "functional/ivy/elementwise/cos/cos_functional.rst", "functional/ivy/elementwise/cosh.rst", "functional/ivy/elementwise/cosh/cosh_array.rst", "functional/ivy/elementwise/cosh/cosh_container.rst", "functional/ivy/elementwise/cosh/cosh_functional.rst", "functional/ivy/elementwise/divide.rst", "functional/ivy/elementwise/divide/divide_array.rst", "functional/ivy/elementwise/divide/divide_container.rst", "functional/ivy/elementwise/divide/divide_functional.rst", "functional/ivy/elementwise/divide/static_divide_container.rst", "functional/ivy/elementwise/equal.rst", "functional/ivy/elementwise/equal/equal_array.rst", "functional/ivy/elementwise/equal/equal_container.rst", "functional/ivy/elementwise/equal/equal_functional.rst", "functional/ivy/elementwise/erf.rst", "functional/ivy/elementwise/erf/erf_array.rst", "functional/ivy/elementwise/erf/erf_container.rst", "functional/ivy/elementwise/erf/erf_functional.rst", "functional/ivy/elementwise/exp.rst", "functional/ivy/elementwise/exp/exp_array.rst", "functional/ivy/elementwise/exp/exp_container.rst", "functional/ivy/elementwise/exp/exp_functional.rst", "functional/ivy/elementwise/expm1.rst", "functional/ivy/elementwise/expm1/expm1_array.rst", "functional/ivy/elementwise/expm1/expm1_container.rst", "functional/ivy/elementwise/expm1/expm1_functional.rst", "functional/ivy/elementwise/floor.rst", "functional/ivy/elementwise/floor/floor_array.rst", "functional/ivy/elementwise/floor/floor_container.rst", "functional/ivy/elementwise/floor/floor_functional.rst", "functional/ivy/elementwise/floor_divide.rst", "functional/ivy/elementwise/floor_divide/floor_divide_array.rst", "functional/ivy/elementwise/floor_divide/floor_divide_container.rst", "functional/ivy/elementwise/floor_divide/floor_divide_functional.rst", "functional/ivy/elementwise/greater.rst", "functional/ivy/elementwise/greater/greater_array.rst", "functional/ivy/elementwise/greater/greater_container.rst", "functional/ivy/elementwise/greater/greater_functional.rst", "functional/ivy/elementwise/greater_equal.rst", "functional/ivy/elementwise/greater_equal/greater_equal_array.rst", "functional/ivy/elementwise/greater_equal/greater_equal_container.rst", "functional/ivy/elementwise/greater_equal/greater_equal_functional.rst", "functional/ivy/elementwise/isfinite.rst", "functional/ivy/elementwise/isfinite/isfinite_array.rst", "functional/ivy/elementwise/isfinite/isfinite_container.rst", "functional/ivy/elementwise/isfinite/isfinite_functional.rst", "functional/ivy/elementwise/isinf.rst", "functional/ivy/elementwise/isinf/isinf_array.rst", "functional/ivy/elementwise/isinf/isinf_container.rst", "functional/ivy/elementwise/isinf/isinf_functional.rst", "functional/ivy/elementwise/isnan.rst", "functional/ivy/elementwise/isnan/isnan_array.rst", "functional/ivy/elementwise/isnan/isnan_container.rst", "functional/ivy/elementwise/isnan/isnan_functional.rst", "functional/ivy/elementwise/less.rst", "functional/ivy/elementwise/less/less_array.rst", "functional/ivy/elementwise/less/less_container.rst", "functional/ivy/elementwise/less/less_functional.rst", "functional/ivy/elementwise/less_equal.rst", "functional/ivy/elementwise/less_equal/less_equal_array.rst", "functional/ivy/elementwise/less_equal/less_equal_container.rst", "functional/ivy/elementwise/less_equal/less_equal_functional.rst", "functional/ivy/elementwise/log.rst", "functional/ivy/elementwise/log/log_array.rst", "functional/ivy/elementwise/log/log_container.rst", "functional/ivy/elementwise/log/log_functional.rst", "functional/ivy/elementwise/log10.rst", "functional/ivy/elementwise/log10/log10_array.rst", "functional/ivy/elementwise/log10/log10_container.rst", "functional/ivy/elementwise/log10/log10_functional.rst", "functional/ivy/elementwise/log1p.rst", "functional/ivy/elementwise/log1p/log1p_array.rst", "functional/ivy/elementwise/log1p/log1p_container.rst", "functional/ivy/elementwise/log1p/log1p_functional.rst", "functional/ivy/elementwise/log2.rst", "functional/ivy/elementwise/log2/log2_array.rst", "functional/ivy/elementwise/log2/log2_container.rst", "functional/ivy/elementwise/log2/log2_functional.rst", "functional/ivy/elementwise/logaddexp.rst", "functional/ivy/elementwise/logaddexp/logaddexp_array.rst", "functional/ivy/elementwise/logaddexp/logaddexp_container.rst", "functional/ivy/elementwise/logaddexp/logaddexp_functional.rst", "functional/ivy/elementwise/logical_and.rst", "functional/ivy/elementwise/logical_and/logical_and_array.rst", "functional/ivy/elementwise/logical_and/logical_and_container.rst", "functional/ivy/elementwise/logical_and/logical_and_functional.rst", "functional/ivy/elementwise/logical_not.rst", "functional/ivy/elementwise/logical_not/logical_not_array.rst", "functional/ivy/elementwise/logical_not/logical_not_container.rst", "functional/ivy/elementwise/logical_not/logical_not_functional.rst", "functional/ivy/elementwise/logical_or.rst", "functional/ivy/elementwise/logical_or/logical_or_array.rst", "functional/ivy/elementwise/logical_or/logical_or_container.rst", "functional/ivy/elementwise/logical_or/logical_or_functional.rst", "functional/ivy/elementwise/logical_xor.rst", "functional/ivy/elementwise/logical_xor/logical_xor_array.rst", "functional/ivy/elementwise/logical_xor/logical_xor_container.rst", "functional/ivy/elementwise/logical_xor/logical_xor_functional.rst", "functional/ivy/elementwise/maximum.rst", "functional/ivy/elementwise/minimum.rst", "functional/ivy/elementwise/multiply.rst", "functional/ivy/elementwise/multiply/multiply_array.rst", "functional/ivy/elementwise/multiply/multiply_container.rst", "functional/ivy/elementwise/multiply/multiply_functional.rst", "functional/ivy/elementwise/multiply/static_multiply_container.rst", "functional/ivy/elementwise/negative.rst", "functional/ivy/elementwise/negative/negative_array.rst", "functional/ivy/elementwise/negative/negative_container.rst", "functional/ivy/elementwise/negative/negative_functional.rst", "functional/ivy/elementwise/not_equal.rst", "functional/ivy/elementwise/not_equal/not_equal_array.rst", "functional/ivy/elementwise/not_equal/not_equal_container.rst", "functional/ivy/elementwise/not_equal/not_equal_functional.rst", "functional/ivy/elementwise/positive.rst", "functional/ivy/elementwise/positive/positive_array.rst", "functional/ivy/elementwise/positive/positive_container.rst", "functional/ivy/elementwise/positive/positive_functional.rst", "functional/ivy/elementwise/pow.rst", "functional/ivy/elementwise/pow/pow_array.rst", "functional/ivy/elementwise/pow/pow_container.rst", "functional/ivy/elementwise/pow/pow_functional.rst", "functional/ivy/elementwise/remainder.rst", "functional/ivy/elementwise/remainder/remainder_array.rst", "functional/ivy/elementwise/remainder/remainder_container.rst", "functional/ivy/elementwise/remainder/remainder_functional.rst", "functional/ivy/elementwise/round.rst", "functional/ivy/elementwise/round/round_array.rst", "functional/ivy/elementwise/round/round_container.rst", "functional/ivy/elementwise/round/round_functional.rst", "functional/ivy/elementwise/sign.rst", "functional/ivy/elementwise/sign/sign_array.rst", "functional/ivy/elementwise/sign/sign_container.rst", "functional/ivy/elementwise/sign/sign_functional.rst", "functional/ivy/elementwise/sin.rst", "functional/ivy/elementwise/sin/sin_array.rst", "functional/ivy/elementwise/sin/sin_container.rst", "functional/ivy/elementwise/sin/sin_functional.rst", "functional/ivy/elementwise/sinh.rst", "functional/ivy/elementwise/sinh/sinh_array.rst", "functional/ivy/elementwise/sinh/sinh_container.rst", "functional/ivy/elementwise/sinh/sinh_functional.rst", "functional/ivy/elementwise/sqrt.rst", "functional/ivy/elementwise/sqrt/sqrt_array.rst", "functional/ivy/elementwise/sqrt/sqrt_container.rst", "functional/ivy/elementwise/sqrt/sqrt_functional.rst", "functional/ivy/elementwise/square.rst", "functional/ivy/elementwise/square/square_array.rst", "functional/ivy/elementwise/square/square_container.rst", "functional/ivy/elementwise/square/square_functional.rst", "functional/ivy/elementwise/subtract.rst", "functional/ivy/elementwise/subtract/static_subtract_container.rst", "functional/ivy/elementwise/subtract/subtract_array.rst", "functional/ivy/elementwise/subtract/subtract_container.rst", "functional/ivy/elementwise/subtract/subtract_functional.rst", "functional/ivy/elementwise/tan.rst", "functional/ivy/elementwise/tan/static_tan_container.rst", "functional/ivy/elementwise/tan/tan_array.rst", "functional/ivy/elementwise/tan/tan_container.rst", "functional/ivy/elementwise/tan/tan_functional.rst", "functional/ivy/elementwise/tanh.rst", "functional/ivy/elementwise/tanh/static_tanh_container.rst", "functional/ivy/elementwise/tanh/tanh_array.rst", "functional/ivy/elementwise/tanh/tanh_container.rst", "functional/ivy/elementwise/tanh/tanh_functional.rst", "functional/ivy/elementwise/trunc.rst", "functional/ivy/elementwise/trunc/trunc_array.rst", "functional/ivy/elementwise/trunc/trunc_container.rst", "functional/ivy/elementwise/trunc/trunc_functional.rst", "functional/ivy/general.rst", "functional/ivy/general/all_equal.rst", "functional/ivy/general/all_equal/all_equal_array.rst", "functional/ivy/general/all_equal/all_equal_container.rst", "functional/ivy/general/all_equal/all_equal_functional.rst", "functional/ivy/general/all_equal/static_all_equal_container.rst", "functional/ivy/general/arg_info.rst", "functional/ivy/general/arg_names.rst", "functional/ivy/general/array_equal.rst", "functional/ivy/general/arrays_equal.rst", "functional/ivy/general/assert_supports_inplace.rst", "functional/ivy/general/cache_fn.rst", "functional/ivy/general/clip_matrix_norm.rst", "functional/ivy/general/clip_vector_norm.rst", "functional/ivy/general/clip_vector_norm/clip_vector_norm_container.rst", "functional/ivy/general/clip_vector_norm/clip_vector_norm_functional.rst", "functional/ivy/general/container_types.rst", "functional/ivy/general/copy_array.rst", "functional/ivy/general/cumprod.rst", "functional/ivy/general/cumsum.rst", "functional/ivy/general/current_backend_str.rst", "functional/ivy/general/default.rst", "functional/ivy/general/einops_rearrange.rst", "functional/ivy/general/einops_reduce.rst", "functional/ivy/general/einops_repeat.rst", "functional/ivy/general/exists.rst", "functional/ivy/general/floormod.rst", "functional/ivy/general/fourier_encode.rst", "functional/ivy/general/gather.rst", "functional/ivy/general/gather_nd.rst", "functional/ivy/general/gather_nd/gather_nd_array.rst", "functional/ivy/general/gather_nd/gather_nd_container.rst", "functional/ivy/general/gather_nd/gather_nd_functional.rst", "functional/ivy/general/gather_nd/static_gather_nd_container.rst", "functional/ivy/general/get_all_arrays_in_memory.rst", "functional/ivy/general/get_min_base.rst", "functional/ivy/general/get_min_denominator.rst", "functional/ivy/general/get_num_dims.rst", "functional/ivy/general/get_referrers_recursive.rst", "functional/ivy/general/has_nans.rst", "functional/ivy/general/indices_where.rst", "functional/ivy/general/inplace_arrays_supported.rst", "functional/ivy/general/inplace_decrement.rst", "functional/ivy/general/inplace_increment.rst", "functional/ivy/general/inplace_update.rst", "functional/ivy/general/inplace_variables_supported.rst", "functional/ivy/general/is_array.rst", "functional/ivy/general/is_ivy_array.rst", "functional/ivy/general/is_ivy_container.rst", "functional/ivy/general/is_native_array.rst", "functional/ivy/general/match_kwargs.rst", "functional/ivy/general/multiprocessing.rst", "functional/ivy/general/num_arrays_in_memory.rst", "functional/ivy/general/one_hot.rst", "functional/ivy/general/print_all_arrays_in_memory.rst", "functional/ivy/general/queue_timeout.rst", "functional/ivy/general/scatter_flat.rst", "functional/ivy/general/scatter_nd.rst", "functional/ivy/general/set_min_base.rst", "functional/ivy/general/set_min_denominator.rst", "functional/ivy/general/set_queue_timeout.rst", "functional/ivy/general/set_tmp_dir.rst", "functional/ivy/general/shape.rst", "functional/ivy/general/shape_to_tuple.rst", "functional/ivy/general/stable_divide.rst", "functional/ivy/general/stable_pow.rst", "functional/ivy/general/supports_inplace.rst", "functional/ivy/general/tmp_dir.rst", "functional/ivy/general/to_list.rst", "functional/ivy/general/to_numpy.rst", "functional/ivy/general/to_scalar.rst", "functional/ivy/general/try_else_none.rst", "functional/ivy/general/unstack.rst", "functional/ivy/general/value_is_nan.rst", "functional/ivy/gradients.rst", "functional/ivy/gradients/GradientTracking:\n    \"\"\"\"\"\"\n\n    # noinspection PyShadowingNames\n    def __init__.rst", "functional/ivy/gradients/adam_step.rst", "functional/ivy/gradients/adam_step/adam_step_array.rst", "functional/ivy/gradients/adam_step/adam_step_container.rst", "functional/ivy/gradients/adam_step/adam_step_functional.rst", "functional/ivy/gradients/adam_step/static_adam_step_container.rst", "functional/ivy/gradients/adam_update.rst", "functional/ivy/gradients/adam_update/adam_update_container.rst", "functional/ivy/gradients/adam_update/adam_update_functional.rst", "functional/ivy/gradients/adam_update/static_adam_update_container.rst", "functional/ivy/gradients/execute_with_gradients.rst", "functional/ivy/gradients/gradient_descent_update.rst", "functional/ivy/gradients/gradient_descent_update/gradient_descent_update_container.rst", "functional/ivy/gradients/gradient_descent_update/gradient_descent_update_functional.rst", "functional/ivy/gradients/gradient_descent_update/static_gradient_descent_update_container.rst", "functional/ivy/gradients/is_variable.rst", "functional/ivy/gradients/is_variable/is_variable_container.rst", "functional/ivy/gradients/is_variable/is_variable_functional.rst", "functional/ivy/gradients/is_variable/static_is_variable_container.rst", "functional/ivy/gradients/lamb_update.rst", "functional/ivy/gradients/lamb_update/lamb_update_container.rst", "functional/ivy/gradients/lamb_update/lamb_update_functional.rst", "functional/ivy/gradients/lamb_update/static_lamb_update_container.rst", "functional/ivy/gradients/lars_update.rst", "functional/ivy/gradients/lars_update/lars_update_container.rst", "functional/ivy/gradients/lars_update/lars_update_functional.rst", "functional/ivy/gradients/lars_update/static_lars_update_container.rst", "functional/ivy/gradients/optimizer_update.rst", "functional/ivy/gradients/optimizer_update/optimizer_update_container.rst", "functional/ivy/gradients/optimizer_update/optimizer_update_functional.rst", "functional/ivy/gradients/optimizer_update/static_optimizer_update_container.rst", "functional/ivy/gradients/set_with_grads.rst", "functional/ivy/gradients/stop_gradient.rst", "functional/ivy/gradients/unset_with_grads.rst", "functional/ivy/gradients/variable.rst", "functional/ivy/gradients/variable_data.rst", "functional/ivy/gradients/with_grads.rst", "functional/ivy/layers.rst", "functional/ivy/layers/conv1d.rst", "functional/ivy/layers/conv1d_transpose.rst", "functional/ivy/layers/conv2d.rst", "functional/ivy/layers/conv2d_transpose.rst", "functional/ivy/layers/conv3d.rst", "functional/ivy/layers/conv3d_transpose.rst", "functional/ivy/layers/depthwise_conv2d.rst", "functional/ivy/layers/dropout.rst", "functional/ivy/layers/linear.rst", "functional/ivy/layers/lstm_update.rst", "functional/ivy/layers/multi_head_attention.rst", "functional/ivy/layers/scaled_dot_product_attention.rst", "functional/ivy/linear_algebra.rst", "functional/ivy/linear_algebra/cholesky.rst", "functional/ivy/linear_algebra/cholesky/cholesky_array.rst", "functional/ivy/linear_algebra/cholesky/cholesky_container.rst", "functional/ivy/linear_algebra/cholesky/cholesky_functional.rst", "functional/ivy/linear_algebra/cholesky/static_cholesky_container.rst", "functional/ivy/linear_algebra/cross.rst", "functional/ivy/linear_algebra/cross/cross_array.rst", "functional/ivy/linear_algebra/cross/cross_functional.rst", "functional/ivy/linear_algebra/det.rst", "functional/ivy/linear_algebra/det/det_array.rst", "functional/ivy/linear_algebra/det/det_functional.rst", "functional/ivy/linear_algebra/diagonal.rst", "functional/ivy/linear_algebra/diagonal/diagonal_array.rst", "functional/ivy/linear_algebra/diagonal/diagonal_functional.rst", "functional/ivy/linear_algebra/eigh.rst", "functional/ivy/linear_algebra/eigh/eigh_array.rst", "functional/ivy/linear_algebra/eigh/eigh_functional.rst", "functional/ivy/linear_algebra/eigvalsh.rst", "functional/ivy/linear_algebra/eigvalsh/eigvalsh_array.rst", "functional/ivy/linear_algebra/eigvalsh/eigvalsh_functional.rst", "functional/ivy/linear_algebra/inv.rst", "functional/ivy/linear_algebra/inv/inv_array.rst", "functional/ivy/linear_algebra/inv/inv_functional.rst", "functional/ivy/linear_algebra/matmul.rst", "functional/ivy/linear_algebra/matmul/matmul_array.rst", "functional/ivy/linear_algebra/matmul/matmul_container.rst", "functional/ivy/linear_algebra/matmul/matmul_functional.rst", "functional/ivy/linear_algebra/matrix_norm.rst", "functional/ivy/linear_algebra/matrix_norm/matrix_norm_array.rst", "functional/ivy/linear_algebra/matrix_norm/matrix_norm_functional.rst", "functional/ivy/linear_algebra/matrix_power.rst", "functional/ivy/linear_algebra/matrix_rank.rst", "functional/ivy/linear_algebra/matrix_rank/matrix_rank_array.rst", "functional/ivy/linear_algebra/matrix_rank/matrix_rank_functional.rst", "functional/ivy/linear_algebra/matrix_transpose.rst", "functional/ivy/linear_algebra/matrix_transpose/matrix_transpose_array.rst", "functional/ivy/linear_algebra/matrix_transpose/matrix_transpose_functional.rst", "functional/ivy/linear_algebra/outer.rst", "functional/ivy/linear_algebra/outer/outer_array.rst", "functional/ivy/linear_algebra/outer/outer_functional.rst", "functional/ivy/linear_algebra/pinv.rst", "functional/ivy/linear_algebra/pinv/pinv_array.rst", "functional/ivy/linear_algebra/pinv/pinv_functional.rst", "functional/ivy/linear_algebra/qr.rst", "functional/ivy/linear_algebra/qr/qr_array.rst", "functional/ivy/linear_algebra/qr/qr_functional.rst", "functional/ivy/linear_algebra/slogdet.rst", "functional/ivy/linear_algebra/solve.rst", "functional/ivy/linear_algebra/solve/solve_array.rst", "functional/ivy/linear_algebra/solve/solve_functional.rst", "functional/ivy/linear_algebra/svd.rst", "functional/ivy/linear_algebra/svd/svd_array.rst", "functional/ivy/linear_algebra/svd/svd_functional.rst", "functional/ivy/linear_algebra/svdvals.rst", "functional/ivy/linear_algebra/svdvals/svdvals_array.rst", "functional/ivy/linear_algebra/svdvals/svdvals_functional.rst", "functional/ivy/linear_algebra/tensordot.rst", "functional/ivy/linear_algebra/tensordot/tensordot_array.rst", "functional/ivy/linear_algebra/tensordot/tensordot_functional.rst", "functional/ivy/linear_algebra/trace.rst", "functional/ivy/linear_algebra/trace/trace_array.rst", "functional/ivy/linear_algebra/trace/trace_functional.rst", "functional/ivy/linear_algebra/vecdot.rst", "functional/ivy/linear_algebra/vecdot/vecdot_array.rst", "functional/ivy/linear_algebra/vecdot/vecdot_functional.rst", "functional/ivy/linear_algebra/vector_norm.rst", "functional/ivy/linear_algebra/vector_norm/vector_norm_array.rst", "functional/ivy/linear_algebra/vector_norm/vector_norm_functional.rst", "functional/ivy/linear_algebra/vector_to_skew_symmetric_matrix.rst", "functional/ivy/linear_algebra/vector_to_skew_symmetric_matrix/vector_to_skew_symmetric_matrix_array.rst", "functional/ivy/linear_algebra/vector_to_skew_symmetric_matrix/vector_to_skew_symmetric_matrix_functional.rst", "functional/ivy/losses.rst", "functional/ivy/losses/binary_cross_entropy.rst", "functional/ivy/losses/binary_cross_entropy/binary_cross_entropy_array.rst", "functional/ivy/losses/binary_cross_entropy/binary_cross_entropy_container.rst", "functional/ivy/losses/binary_cross_entropy/binary_cross_entropy_functional.rst", "functional/ivy/losses/binary_cross_entropy/static_binary_cross_entropy_container.rst", "functional/ivy/losses/cross_entropy.rst", "functional/ivy/losses/cross_entropy/cross_entropy_array.rst", "functional/ivy/losses/cross_entropy/cross_entropy_container.rst", "functional/ivy/losses/cross_entropy/cross_entropy_functional.rst", "functional/ivy/losses/cross_entropy/static_cross_entropy_container.rst", "functional/ivy/losses/sparse_cross_entropy.rst", "functional/ivy/losses/sparse_cross_entropy/sparse_cross_entropy_array.rst", "functional/ivy/losses/sparse_cross_entropy/sparse_cross_entropy_container.rst", "functional/ivy/losses/sparse_cross_entropy/sparse_cross_entropy_functional.rst", "functional/ivy/losses/sparse_cross_entropy/static_sparse_cross_entropy_container.rst", "functional/ivy/manipulation.rst", "functional/ivy/manipulation/clip.rst", "functional/ivy/manipulation/clip/clip_array.rst", "functional/ivy/manipulation/clip/clip_container.rst", "functional/ivy/manipulation/clip/clip_functional.rst", "functional/ivy/manipulation/clip/static_clip_container.rst", "functional/ivy/manipulation/concat.rst", "functional/ivy/manipulation/concat/concat_array.rst", "functional/ivy/manipulation/concat/concat_container.rst", "functional/ivy/manipulation/concat/concat_functional.rst", "functional/ivy/manipulation/constant_pad.rst", "functional/ivy/manipulation/constant_pad/constant_pad_array.rst", "functional/ivy/manipulation/constant_pad/constant_pad_container.rst", "functional/ivy/manipulation/constant_pad/constant_pad_functional.rst", "functional/ivy/manipulation/expand_dims.rst", "functional/ivy/manipulation/expand_dims/expand_dims_array.rst", "functional/ivy/manipulation/expand_dims/expand_dims_container.rst", "functional/ivy/manipulation/expand_dims/expand_dims_functional.rst", "functional/ivy/manipulation/flip.rst", "functional/ivy/manipulation/flip/flip_array.rst", "functional/ivy/manipulation/flip/flip_container.rst", "functional/ivy/manipulation/flip/flip_functional.rst", "functional/ivy/manipulation/permute_dims.rst", "functional/ivy/manipulation/permute_dims/permute_dims_array.rst", "functional/ivy/manipulation/permute_dims/permute_dims_container.rst", "functional/ivy/manipulation/permute_dims/permute_dims_functional.rst", "functional/ivy/manipulation/repeat.rst", "functional/ivy/manipulation/repeat/repeat_array.rst", "functional/ivy/manipulation/repeat/repeat_container.rst", "functional/ivy/manipulation/repeat/repeat_functional.rst", "functional/ivy/manipulation/reshape.rst", "functional/ivy/manipulation/reshape/reshape_array.rst", "functional/ivy/manipulation/reshape/reshape_container.rst", "functional/ivy/manipulation/reshape/reshape_functional.rst", "functional/ivy/manipulation/roll.rst", "functional/ivy/manipulation/roll/roll_array.rst", "functional/ivy/manipulation/roll/roll_container.rst", "functional/ivy/manipulation/roll/roll_functional.rst", "functional/ivy/manipulation/roll/static_roll_container.rst", "functional/ivy/manipulation/split.rst", "functional/ivy/manipulation/squeeze.rst", "functional/ivy/manipulation/squeeze/squeeze_array.rst", "functional/ivy/manipulation/squeeze/squeeze_container.rst", "functional/ivy/manipulation/squeeze/squeeze_functional.rst", "functional/ivy/manipulation/stack.rst", "functional/ivy/manipulation/stack/stack_array.rst", "functional/ivy/manipulation/stack/stack_container.rst", "functional/ivy/manipulation/stack/stack_functional.rst", "functional/ivy/manipulation/swapaxes.rst", "functional/ivy/manipulation/swapaxes/swapaxes_array.rst", "functional/ivy/manipulation/swapaxes/swapaxes_container.rst", "functional/ivy/manipulation/swapaxes/swapaxes_functional.rst", "functional/ivy/manipulation/tile.rst", "functional/ivy/manipulation/tile/tile_array.rst", "functional/ivy/manipulation/tile/tile_container.rst", "functional/ivy/manipulation/tile/tile_functional.rst", "functional/ivy/manipulation/zero_pad.rst", "functional/ivy/manipulation/zero_pad/zero_pad_array.rst", "functional/ivy/manipulation/zero_pad/zero_pad_container.rst", "functional/ivy/manipulation/zero_pad/zero_pad_functional.rst", "functional/ivy/meta.rst", "functional/ivy/meta/fomaml_step.rst", "functional/ivy/meta/maml_step.rst", "functional/ivy/meta/reptile_step.rst", "functional/ivy/nest.rst", "functional/ivy/nest/all_nested_indices.rst", "functional/ivy/nest/copy_nest.rst", "functional/ivy/nest/index_nest.rst", "functional/ivy/nest/insert_into_nest_at_index.rst", "functional/ivy/nest/insert_into_nest_at_indices.rst", "functional/ivy/nest/map.rst", "functional/ivy/nest/map_nest_at_index.rst", "functional/ivy/nest/map_nest_at_indices.rst", "functional/ivy/nest/multi_index_nest.rst", "functional/ivy/nest/nested_any.rst", "functional/ivy/nest/nested_indices_where.rst", "functional/ivy/nest/nested_map.rst", "functional/ivy/nest/nested_multi_map.rst", "functional/ivy/nest/prune_nest_at_index.rst", "functional/ivy/nest/prune_nest_at_indices.rst", "functional/ivy/nest/set_nest_at_index.rst", "functional/ivy/nest/set_nest_at_indices.rst", "functional/ivy/norms.rst", "functional/ivy/norms/layer_norm.rst", "functional/ivy/norms/layer_norm/layer_norm_array.rst", "functional/ivy/norms/layer_norm/layer_norm_container.rst", "functional/ivy/norms/layer_norm/layer_norm_functional.rst", "functional/ivy/random.rst", "functional/ivy/random/multinomial.rst", "functional/ivy/random/randint.rst", "functional/ivy/random/randint/randint_functional.rst", "functional/ivy/random/randint/static_randint_container.rst", "functional/ivy/random/random_normal.rst", "functional/ivy/random/random_uniform.rst", "functional/ivy/random/random_uniform/random_uniform_container.rst", "functional/ivy/random/random_uniform/random_uniform_functional.rst", "functional/ivy/random/random_uniform/static_random_uniform_container.rst", "functional/ivy/random/seed.rst", "functional/ivy/random/shuffle.rst", "functional/ivy/searching.rst", "functional/ivy/searching/argmax.rst", "functional/ivy/searching/argmin.rst", "functional/ivy/searching/nonzero.rst", "functional/ivy/searching/where.rst", "functional/ivy/set.rst", "functional/ivy/set/unique_all.rst", "functional/ivy/set/unique_counts.rst", "functional/ivy/set/unique_counts/static_unique_counts_container.rst", "functional/ivy/set/unique_counts/unique_counts_array.rst", "functional/ivy/set/unique_counts/unique_counts_container.rst", "functional/ivy/set/unique_counts/unique_counts_functional.rst", "functional/ivy/set/unique_inverse.rst", "functional/ivy/set/unique_values.rst", "functional/ivy/sorting.rst", "functional/ivy/sorting/argsort.rst", "functional/ivy/sorting/argsort/argsort_array.rst", "functional/ivy/sorting/argsort/argsort_container.rst", "functional/ivy/sorting/argsort/argsort_functional.rst", "functional/ivy/sorting/argsort/static_argsort_container.rst", "functional/ivy/sorting/sort.rst", "functional/ivy/sorting/sort/sort_array.rst", "functional/ivy/sorting/sort/sort_container.rst", "functional/ivy/sorting/sort/sort_functional.rst", "functional/ivy/sorting/sort/static_sort_container.rst", "functional/ivy/statistical.rst", "functional/ivy/statistical/einsum.rst", "functional/ivy/statistical/einsum/einsum_array.rst", "functional/ivy/statistical/einsum/einsum_container.rst", "functional/ivy/statistical/einsum/einsum_functional.rst", "functional/ivy/statistical/max.rst", "functional/ivy/statistical/max/max_array.rst", "functional/ivy/statistical/max/max_container.rst", "functional/ivy/statistical/max/max_functional.rst", "functional/ivy/statistical/mean.rst", "functional/ivy/statistical/mean/mean_array.rst", "functional/ivy/statistical/mean/mean_container.rst", "functional/ivy/statistical/mean/mean_functional.rst", "functional/ivy/statistical/min.rst", "functional/ivy/statistical/min/min_array.rst", "functional/ivy/statistical/min/min_container.rst", "functional/ivy/statistical/min/min_functional.rst", "functional/ivy/statistical/prod.rst", "functional/ivy/statistical/prod/prod_array.rst", "functional/ivy/statistical/prod/prod_container.rst", "functional/ivy/statistical/prod/prod_functional.rst", "functional/ivy/statistical/std.rst", "functional/ivy/statistical/std/std_array.rst", "functional/ivy/statistical/std/std_container.rst", "functional/ivy/statistical/std/std_functional.rst", "functional/ivy/statistical/sum.rst", "functional/ivy/statistical/sum/sum_array.rst", "functional/ivy/statistical/sum/sum_container.rst", "functional/ivy/statistical/sum/sum_functional.rst", "functional/ivy/statistical/var.rst", "functional/ivy/statistical/var/var_array.rst", "functional/ivy/statistical/var/var_container.rst", "functional/ivy/statistical/var/var_functional.rst", "functional/ivy/utility.rst", "functional/ivy/utility/all.rst", "functional/ivy/utility/all/all_array.rst", "functional/ivy/utility/all/all_container.rst", "functional/ivy/utility/all/all_functional.rst", "functional/ivy/utility/all/static_all_container.rst", "functional/ivy/utility/any.rst", "functional/ivy/utility/any/any_array.rst", "functional/ivy/utility/any/any_container.rst", "functional/ivy/utility/any/any_functional.rst", "functional/ivy/utility/any/static_any_container.rst", "index.rst", "index_append.rst", "index_prepend.rst", "inspection.rst", "inspection/add_array_specs.rst", "inspection/fn_array_spec.rst", "roadmap.rst", "stateful.rst", "stateful/activations.rst", "stateful/activations/GEGLU.rst", "stateful/activations/GELU.rst", "stateful/converters.rst", "stateful/converters/to_ivy_module.rst", "stateful/initializers.rst", "stateful/initializers/Constant:\n    def __init__.rst", "stateful/initializers/FirstLayerSiren.rst", "stateful/initializers/GlorotUniform.rst", "stateful/initializers/KaimingNormal:\n    def __init__.rst", "stateful/initializers/Ones.rst", "stateful/initializers/Siren.rst", "stateful/initializers/Uniform:\n    def __init__.rst", "stateful/initializers/Zeros.rst", "stateful/layers.rst", "stateful/layers/Conv1D.rst", "stateful/layers/Conv1DTranspose.rst", "stateful/layers/Conv2D.rst", "stateful/layers/Conv2DTranspose.rst", "stateful/layers/Conv3D.rst", "stateful/layers/Conv3DTranspose.rst", "stateful/layers/DepthwiseConv2D.rst", "stateful/layers/Dropout.rst", "stateful/layers/LSTM.rst", "stateful/layers/Linear.rst", "stateful/layers/MultiHeadAttention.rst", "stateful/module.rst", "stateful/module/Module.rst", "stateful/norms.rst", "stateful/norms/LayerNorm.rst", "stateful/optimizers.rst", "stateful/optimizers/Adam.rst", "stateful/optimizers/LAMB.rst", "stateful/optimizers/LARS.rst", "stateful/optimizers/Optimizer.rst", "stateful/optimizers/SGD.rst", "stateful/sequential.rst", "stateful/sequential/Sequential.rst", "supported_frameworks.rst", "verbosity.rst", "verbosity/cprint.rst"], "titles": ["Backend handler", "&lt;no title&gt;", "choose_random_backend", "clear_backend_stack", "current_backend", "get_backend", "set_backend", "try_import_ivy_jax", "try_import_ivy_mxnet", "try_import_ivy_numpy", "try_import_ivy_tf", "try_import_ivy_torch", "unset_backend", "Background", "ML Explosion", "Standardization", "Why Unify?", "Contributing", "Setting Up", "The Basics", "Open Tasks", "Building the Docs", "Data classes", "Array", "Activations", "ArrayWithActivations", "Conversions", "args_to_ivy", "args_to_native", "to_ivy", "to_native", "Creation", "ArrayWithCreation", "Data type", "ArrayWithDataTypes", "Device", "ArrayWithDevice", "Elementwise", "ArrayWithElementwise", "General", "ArrayWithGeneral", "Gradients", "ArrayWithGradients", "Image", "ArrayWithImage", "Layers", "ArrayWithLayers", "Linear algebra", "ArrayWithLinearAlgebra", "Losses", "ArrayWithLosses", "Manipulation", "ArrayWithManipulation", "Norms", "ArrayWithNorms", "Random", "ArrayWithRandom", "Searching", "ArrayWithSearching", "Set", "ArrayWithSet", "Sorting", "ArrayWithSorting", "Statistical", "ArrayWithStatistical", "Utility", "ArrayWithUtility", "Wrapping", "add_ivy_array_instance_methods", "Container", "Activations", "ContainerWithActivations", "Base", "ContainerBase", "Container", "Container", "MultiDevContainer", "Creation", "ContainerWithCreation", "Data type", "ContainerWithDataTypes", "Device", "ContainerWithDevice", "Elementwise", "ContainerWithElementwise", "General", "ContainerWithGeneral", "Gradients", "ContainerWithGradients", "Image", "ContainerWithImage", "Layers", "ContainerWithLayers", "Linear algebra", "ContainerWithLinearAlgebra", "Losses", "ContainerWithLosses", "Manipulation", "ContainerWithManipulation", "Norms", "ContainerWithNorms", "Random", "ContainerWithRandom", "Searching", "ContainerWithSearching", "Set", "ContainerWithSet", "Sorting", "ContainerWithSorting", "Statistical", "ContainerWithStatistical", "Utility", "ContainerWithUtility", "Wrapping", "add_ivy_container_instance_methods", "Deep Dive", "Navigating the Code", "Function Arguments", "Docstrings", "Docstring Examples", "Array API Tests", "Ivy Tests", "Function Types", "Backend Setting", "Function Wrapping", "Arrays", "Containers", "Data Types", "Devices", "Inplace Updates", "Formatting", "Design", "Building Blocks", "Ivy as a Framework", "Ivy Array", "Ivy Container", "Ivy Stateful API", "Ivy as a Transpiler", "Ivy", "Ivy builder", "Ivy ecosystem", "Ivy gym", "Ivy mech", "Ivy memory", "Ivy models", "Ivy robot", "Ivy vision", "Extensions", "Applied Libraries", "FAQ", "Func wrapper", "handle_nestable", "handle_out_argument", "infer_device", "infer_dtype", "inputs_to_ivy_arrays", "inputs_to_native_arrays", "outputs_to_ivy_arrays", "to_native_arrays_and_back", "&lt;no title&gt;", "Activations", "gelu", "leaky_relu", "relu", "sigmoid", "softmax", "softplus", "ivy.Array.softplus", "ivy.Container.softplus", "ivy.softplus", "ivy.Container.static_softplus", "tanh", "Compilation", "compile", "Constants", "Creation", "arange", "ivy.arange", "ivy.Container.static_arange", "asarray", "ivy.Array.asarray", "ivy.Container.asarray", "ivy.asarray", "ivy.Container.static_asarray", "empty", "empty_like", "ivy.Array.empty_like", "ivy.Container.empty_like", "ivy.empty_like", "ivy.Container.static_empty_like", "eye", "ivy.eye", "ivy.Container.static_eye", "from_dlpack", "ivy.Array.from_dlpack", "ivy.Container.from_dlpack", "ivy.from_dlpack", "ivy.Container.static_from_dlpack", "full", "full_like", "ivy.Array.full_like", "ivy.Container.full_like", "ivy.full_like", "ivy.Container.static_full_like", "linspace", "ivy.linspace", "ivy.Container.static_linspace", "logspace", "ivy.logspace", "ivy.Container.static_logspace", "meshgrid", "ivy.Array.meshgrid", "ivy.Container.meshgrid", "ivy.meshgrid", "ivy.Container.static_meshgrid", "native_array", "ivy.Array.native_array", "ivy.Container.native_array", "ivy.native_array", "ivy.Container.static_native_array", "ones", "ivy.ones", "ivy.Container.static_ones", "ones_like", "ivy.Array.ones_like", "ivy.Container.ones_like", "ivy.ones_like", "ivy.Container.static_ones_like", "tril", "ivy.Container.static_tril", "ivy.Array.tril", "ivy.Container.tril", "ivy.tril", "triu", "ivy.Container.static_triu", "ivy.Array.triu", "ivy.Container.triu", "ivy.triu", "zeros", "ivy.Container.static_zeros", "ivy.zeros", "zeros_like", "ivy.Container.static_zeros_like", "ivy.Array.zeros_like", "ivy.Container.zeros_like", "ivy.zeros_like", "Data type", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "as_ivy_dtype", "as_native_dtype", "astype", "broadcast_arrays", "broadcast_to", "can_cast", "ivy.Array.can_cast", "ivy.Container.can_cast", "ivy.can_cast", "ivy.Container.static_can_cast", "closest_valid_dtype", "default_dtype", "default_float_dtype", "default_int_dtype", "dtype", "dtype_bits", "finfo", "function_supported_dtypes", "function_unsupported_dtypes", "iinfo", "invalid_dtype", "is_float_dtype", "is_int_dtype", "promote_types", "result_type", "set_default_dtype", "set_default_float_dtype", "set_default_int_dtype", "type_promote_arrays", "unset_default_dtype", "unset_default_float_dtype", "unset_default_int_dtype", "valid_dtype", "Device", "&lt;no title&gt;", "DevClonedItem", "DevClonedIter", "DevClonedNest", "DevDistItem", "DevDistIter", "DevDistNest", "&lt;no title&gt;", "DevMapper", "DevMapperMultiProc", "&lt;no title&gt;", "MultiDevItem", "MultiDevIter", "MultiDevNest", "Profiler", "as_ivy_dev", "as_native_dev", "clear_mem_on_dev", "default_device", "dev", "dev_clone", "dev_clone_array", "dev_clone_iter", "dev_clone_nest", "dev_dist", "dev_dist_array", "dev_dist_iter", "dev_dist_nest", "dev_unify", "dev_unify_array", "dev_unify_iter", "dev_unify_nest", "dev_util", "get_all_ivy_arrays_on_dev", "gpu_is_available", "num_cpu_cores", "num_gpus", "num_ivy_arrays_on_dev", "percent_used_mem_on_dev", "print_all_ivy_arrays_on_dev", "set_default_device", "set_split_factor", "split_factor", "split_func_call", "to_device", "total_mem_on_dev", "tpu_is_available", "unset_default_device", "used_mem_on_dev", "Elementwise", "abs", "ivy.Array.abs", "ivy.Container.abs", "ivy.abs", "ivy.Container.static_abs", "acos", "ivy.Array.acos", "ivy.Container.acos", "ivy.acos", "acosh", "ivy.Array.acosh", "ivy.Container.acosh", "ivy.acosh", "add", "ivy.Array.add", "ivy.Container.add", "ivy.add", "ivy.Container.static_add", "asin", "ivy.Array.asin", "ivy.Container.asin", "ivy.asin", "asinh", "ivy.Array.asinh", "ivy.Container.asinh", "ivy.asinh", "ivy.Container.static_asinh", "atan", "ivy.Array.atan", "ivy.Container.atan", "ivy.atan", "atan2", "ivy.Array.atan2", "ivy.Container.atan2", "ivy.atan2", "atanh", "ivy.Array.atanh", "ivy.Container.atanh", "ivy.atanh", "bitwise_and", "ivy.Array.bitwise_and", "ivy.Container.bitwise_and", "ivy.bitwise_and", "bitwise_invert", "ivy.Array.bitwise_invert", "ivy.Container.bitwise_invert", "ivy.bitwise_invert", "bitwise_left_shift", "ivy.Array.bitwise_left_shift", "ivy.Container.bitwise_left_shift", "ivy.bitwise_left_shift", "bitwise_or", "ivy.Array.bitwise_or", "ivy.Container.bitwise_or", "ivy.bitwise_or", "bitwise_right_shift", "ivy.Array.bitwise_right_shift", "ivy.Container.bitwise_right_shift", "ivy.bitwise_right_shift", "bitwise_xor", "ivy.Array.bitwise_xor", "ivy.Container.bitwise_xor", "ivy.bitwise_xor", "ceil", "ivy.Array.ceil", "ivy.Container.ceil", "ivy.ceil", "cos", "ivy.Array.cos", "ivy.Container.cos", "ivy.cos", "cosh", "ivy.Array.cosh", "ivy.Container.cosh", "ivy.cosh", "divide", "ivy.Array.divide", "ivy.Container.divide", "ivy.divide", "ivy.Container.static_divide", "equal", "ivy.Array.equal", "ivy.Container.equal", "ivy.equal", "erf", "ivy.Array.erf", "ivy.Container.erf", "ivy.erf", "exp", "ivy.Array.exp", "ivy.Container.exp", "ivy.exp", "expm1", "ivy.Array.expm1", "ivy.Container.expm1", "ivy.expm1", "floor", "ivy.Array.floor", "ivy.Container.floor", "ivy.floor", "floor_divide", "ivy.Array.floor_divide", "ivy.Container.floor_divide", "ivy.floor_divide", "greater", "ivy.Array.greater", "ivy.Container.greater", "ivy.greater", "greater_equal", "ivy.Array.greater_equal", "ivy.Container.greater_equal", "ivy.greater_equal", "isfinite", "ivy.Array.isfinite", "ivy.Container.isfinite", "ivy.isfinite", "isinf", "ivy.Array.isinf", "ivy.Container.isinf", "ivy.isinf", "isnan", "ivy.Array.isnan", "ivy.Container.isnan", "ivy.isnan", "less", "ivy.Array.less", "ivy.Container.less", "ivy.less", "less_equal", "ivy.Array.less_equal", "ivy.Container.less_equal", "ivy.less_equal", "log", "ivy.Array.log", "ivy.Container.log", "ivy.log", "log10", "ivy.Array.log10", "ivy.Container.log10", "ivy.log10", "log1p", "ivy.Array.log1p", "ivy.Container.log1p", "ivy.log1p", "log2", "ivy.Array.log2", "ivy.Container.log2", "ivy.log2", "logaddexp", "ivy.Array.logaddexp", "ivy.Container.logaddexp", "ivy.logaddexp", "logical_and", "ivy.Array.logical_and", "ivy.Container.logical_and", "ivy.logical_and", "logical_not", "ivy.Array.logical_not", "ivy.Container.logical_not", "ivy.logical_not", "logical_or", "ivy.Array.logical_or", "ivy.Container.logical_or", "ivy.logical_or", "logical_xor", "ivy.Array.logical_xor", "ivy.Container.logical_xor", "ivy.logical_xor", "maximum", "minimum", "multiply", "ivy.Array.multiply", "ivy.Container.multiply", "ivy.multiply", "ivy.Container.static_multiply", "negative", "ivy.Array.negative", "ivy.Container.negative", "ivy.negative", "not_equal", "ivy.Array.not_equal", "ivy.Container.not_equal", "ivy.not_equal", "positive", "ivy.Array.positive", "ivy.Container.positive", "ivy.positive", "pow", "ivy.Array.pow", "ivy.Container.pow", "ivy.pow", "remainder", "ivy.Array.remainder", "ivy.Container.remainder", "ivy.remainder", "round", "ivy.Array.round", "ivy.Container.round", "ivy.round", "sign", "ivy.Array.sign", "ivy.Container.sign", "ivy.sign", "sin", "ivy.Array.sin", "ivy.Container.sin", "ivy.sin", "sinh", "ivy.Array.sinh", "ivy.Container.sinh", "ivy.sinh", "sqrt", "ivy.Array.sqrt", "ivy.Container.sqrt", "ivy.sqrt", "square", "ivy.Array.square", "ivy.Container.square", "ivy.square", "subtract", "ivy.Container.static_subtract", "ivy.Array.subtract", "ivy.Container.subtract", "ivy.subtract", "tan", "ivy.Container.static_tan", "ivy.Array.tan", "ivy.Container.tan", "ivy.tan", "tanh", "ivy.Container.static_tanh", "ivy.Array.tanh", "ivy.Container.tanh", "ivy.tanh", "trunc", "ivy.Array.trunc", "ivy.Container.trunc", "ivy.trunc", "General", "all_equal", "ivy.Array.all_equal", "ivy.Container.all_equal", "ivy.all_equal", "ivy.Container.static_all_equal", "arg_info", "arg_names", "array_equal", "arrays_equal", "assert_supports_inplace", "cache_fn", "clip_matrix_norm", "clip_vector_norm", "ivy.Container.clip_vector_norm", "ivy.clip_vector_norm", "container_types", "copy_array", "cumprod", "cumsum", "current_backend_str", "default", "einops_rearrange", "einops_reduce", "einops_repeat", "exists", "floormod", "fourier_encode", "gather", "gather_nd", "ivy.Array.gather_nd", "ivy.Container.gather_nd", "ivy.gather_nd", "ivy.Container.static_gather_nd", "get_all_arrays_in_memory", "get_min_base", "get_min_denominator", "get_num_dims", "get_referrers_recursive", "has_nans", "indices_where", "inplace_arrays_supported", "inplace_decrement", "inplace_increment", "inplace_update", "inplace_variables_supported", "is_array", "is_ivy_array", "is_ivy_container", "is_native_array", "match_kwargs", "multiprocessing", "num_arrays_in_memory", "one_hot", "print_all_arrays_in_memory", "queue_timeout", "scatter_flat", "scatter_nd", "set_min_base", "set_min_denominator", "set_queue_timeout", "set_tmp_dir", "shape", "shape_to_tuple", "stable_divide", "stable_pow", "supports_inplace", "tmp_dir", "to_list", "to_numpy", "to_scalar", "try_else_none", "unstack", "value_is_nan", "Gradients", "&lt;no title&gt;", "adam_step", "ivy.Array.adam_step", "ivy.Container.adam_step", "ivy.adam_step", "ivy.Container.static_adam_step", "adam_update", "ivy.Container.adam_update", "ivy.adam_update", "ivy.Container.static_adam_update", "execute_with_gradients", "gradient_descent_update", "ivy.Container.gradient_descent_update", "ivy.gradient_descent_update", "ivy.Container.static_gradient_descent_update", "is_variable", "ivy.Container.is_variable", "ivy.is_variable", "ivy.Container.static_is_variable", "lamb_update", "ivy.Container.lamb_update", "ivy.lamb_update", "ivy.Container.static_lamb_update", "lars_update", "ivy.Container.lars_update", "ivy.lars_update", "ivy.Container.static_lars_update", "optimizer_update", "ivy.Container.optimizer_update", "ivy.optimizer_update", "ivy.Container.static_optimizer_update", "set_with_grads", "stop_gradient", "unset_with_grads", "variable", "variable_data", "with_grads", "Layers", "conv1d", "conv1d_transpose", "conv2d", "conv2d_transpose", "conv3d", "conv3d_transpose", "depthwise_conv2d", "dropout", "linear", "lstm_update", "multi_head_attention", "scaled_dot_product_attention", "Linear algebra", "cholesky", "ivy.Array.cholesky", "ivy.Container.cholesky", "ivy.cholesky", "ivy.Container.static_cholesky", "cross", "ivy.Array.cross", "ivy.cross", "det", "ivy.Array.det", "ivy.det", "diagonal", "ivy.Array.diagonal", "ivy.diagonal", "eigh", "ivy.Array.eigh", "ivy.eigh", "eigvalsh", "ivy.Array.eigvalsh", "ivy.eigvalsh", "inv", "ivy.Array.inv", "ivy.inv", "matmul", "ivy.Array.matmul", "ivy.Container.matmul", "ivy.matmul", "matrix_norm", "ivy.Array.matrix_norm", "ivy.matrix_norm", "matrix_power", "matrix_rank", "ivy.Array.matrix_rank", "ivy.matrix_rank", "matrix_transpose", "ivy.Array.matrix_transpose", "ivy.matrix_transpose", "outer", "ivy.Array.outer", "ivy.outer", "pinv", "ivy.Array.pinv", "ivy.pinv", "qr", "ivy.Array.qr", "ivy.qr", "slogdet", "solve", "ivy.Array.solve", "ivy.solve", "svd", "ivy.Array.svd", "ivy.svd", "svdvals", "ivy.Array.svdvals", "ivy.svdvals", "tensordot", "ivy.Array.tensordot", "ivy.tensordot", "trace", "ivy.Array.trace", "ivy.trace", "vecdot", "ivy.Array.vecdot", "ivy.vecdot", "vector_norm", "ivy.Array.vector_norm", "ivy.vector_norm", "vector_to_skew_symmetric_matrix", "ivy.Array.vector_to_skew_symmetric_matrix", "ivy.vector_to_skew_symmetric_matrix", "Losses", "binary_cross_entropy", "ivy.Array.binary_cross_entropy", "ivy.Container.binary_cross_entropy", "ivy.binary_cross_entropy", "ivy.Container.static_binary_cross_entropy", "cross_entropy", "ivy.Array.cross_entropy", "ivy.Container.cross_entropy", "ivy.cross_entropy", "ivy.Container.static_cross_entropy", "sparse_cross_entropy", "ivy.Array.sparse_cross_entropy", "ivy.Container.sparse_cross_entropy", "ivy.sparse_cross_entropy", "ivy.Container.static_sparse_cross_entropy", "Manipulation", "clip", "ivy.Array.clip", "ivy.Container.clip", "ivy.clip", "ivy.Container.static_clip", "concat", "ivy.Array.concat", "ivy.Container.concat", "ivy.concat", "constant_pad", "ivy.Array.constant_pad", "ivy.Container.constant_pad", "ivy.constant_pad", "expand_dims", "ivy.Array.expand_dims", "ivy.Container.expand_dims", "ivy.expand_dims", "flip", "ivy.Array.flip", "ivy.Container.flip", "ivy.flip", "permute_dims", "ivy.Array.permute_dims", "ivy.Container.permute_dims", "ivy.permute_dims", "repeat", "ivy.Array.repeat", "ivy.Container.repeat", "ivy.repeat", "reshape", "ivy.Array.reshape", "ivy.Container.reshape", "ivy.reshape", "roll", "ivy.Array.roll", "ivy.Container.roll", "ivy.roll", "ivy.Container.static_roll", "split", "squeeze", "ivy.Array.squeeze", "ivy.Container.squeeze", "ivy.squeeze", "stack", "ivy.Array.stack", "ivy.Container.stack", "ivy.stack", "swapaxes", "ivy.Array.swapaxes", "ivy.Container.swapaxes", "ivy.swapaxes", "tile", "ivy.Array.tile", "ivy.Container.tile", "ivy.tile", "zero_pad", "ivy.Array.zero_pad", "ivy.Container.zero_pad", "ivy.zero_pad", "Meta", "fomaml_step", "maml_step", "reptile_step", "Nest", "all_nested_indices", "copy_nest", "index_nest", "insert_into_nest_at_index", "insert_into_nest_at_indices", "map", "map_nest_at_index", "map_nest_at_indices", "multi_index_nest", "nested_any", "nested_indices_where", "nested_map", "nested_multi_map", "prune_nest_at_index", "prune_nest_at_indices", "set_nest_at_index", "set_nest_at_indices", "Norms", "layer_norm", "ivy.Array.layer_norm", "ivy.Container.layer_norm", "ivy.layer_norm", "Random", "multinomial", "randint", "ivy.randint", "ivy.Container.static_randint", "random_normal", "random_uniform", "ivy.Container.random_uniform", "ivy.random_uniform", "ivy.Container.static_random_uniform", "seed", "shuffle", "Searching", "argmax", "argmin", "nonzero", "where", "Set", "unique_all", "unique_counts", "ivy.Container.static_unique_counts", "ivy.Array.unique_counts", "ivy.Container.unique_counts", "ivy.unique_counts", "unique_inverse", "unique_values", "Sorting", "argsort", "ivy.Array.argsort", "ivy.Container.argsort", "ivy.argsort", "ivy.Container.static_argsort", "sort", "ivy.Array.sort", "ivy.Container.sort", "ivy.sort", "ivy.Container.static_sort", "Statistical", "einsum", "ivy.Array.einsum", "ivy.Container.einsum", "ivy.einsum", "max", "ivy.Array.max", "ivy.Container.max", "ivy.max", "mean", "ivy.Array.mean", "ivy.Container.mean", "ivy.mean", "min", "ivy.Array.min", "ivy.Container.min", "ivy.min", "prod", "ivy.Array.prod", "ivy.Container.prod", "ivy.prod", "std", "ivy.Array.std", "ivy.Container.std", "ivy.std", "sum", "ivy.Array.sum", "ivy.Container.sum", "ivy.sum", "var", "ivy.Array.var", "ivy.Container.var", "ivy.var", "Utility", "all", "ivy.Array.all", "ivy.Container.all", "ivy.all", "ivy.Container.static_all", "any", "ivy.Array.any", "ivy.Container.any", "ivy.any", "ivy.Container.static_any", "Contents", "&lt;no title&gt;", "&lt;no title&gt;", "Inspection", "add_array_specs", "fn_array_spec", "Roadmap", "Framework classes", "Activations", "GEGLU", "GELU", "Converters", "to_ivy_module", "Initializers", "&lt;no title&gt;", "FirstLayerSiren", "GlorotUniform", "&lt;no title&gt;", "Ones", "Siren", "&lt;no title&gt;", "Zeros", "Layers", "Conv1D", "Conv1DTranspose", "Conv2D", "Conv2DTranspose", "Conv3D", "Conv3DTranspose", "DepthwiseConv2D", "Dropout", "LSTM", "Linear", "MultiHeadAttention", "Module", "Module", "Norms", "LayerNorm", "Optimizers", "Adam", "LAMB", "LARS", "Optimizer", "SGD", "Sequential", "Sequential", "&lt;no title&gt;", "Verbosity", "cprint"], "terms": {"class": [0, 6, 12, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 117, 118, 119, 121, 125, 126, 127, 128, 132, 133, 135, 136, 137, 147, 148, 149, 246, 269, 283, 285, 286, 287, 288, 289, 290, 292, 293, 295, 296, 297, 298, 572, 579, 616, 622, 641, 646, 648, 650, 652, 682, 849, 851, 861, 884, 887, 953, 961, 962, 963, 964, 965, 966, 968, 969, 971, 972, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998], "ivi": [0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 15, 16, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 117, 118, 120, 122, 123, 124, 126, 127, 128, 129, 130, 131, 147, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 160, 161, 162, 163, 164, 165, 166, 171, 172, 173, 174, 175, 176, 179, 184, 185, 190, 193, 198, 199, 204, 207, 210, 215, 220, 223, 228, 233, 238, 241, 246, 250, 251, 252, 253, 254, 255, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 285, 286, 287, 288, 289, 290, 292, 293, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 339, 343, 347, 352, 356, 361, 365, 369, 373, 377, 381, 385, 389, 393, 397, 401, 405, 409, 414, 418, 422, 426, 430, 434, 438, 442, 446, 450, 454, 458, 462, 466, 470, 474, 478, 482, 486, 490, 494, 498, 502, 503, 504, 509, 513, 517, 521, 525, 529, 533, 537, 541, 545, 549, 553, 558, 563, 568, 572, 573, 578, 579, 580, 581, 582, 583, 584, 585, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 648, 653, 657, 658, 662, 666, 670, 674, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 703, 706, 709, 712, 715, 718, 721, 725, 728, 729, 732, 735, 738, 741, 744, 745, 748, 751, 754, 757, 760, 763, 766, 769, 770, 775, 780, 785, 786, 791, 795, 799, 803, 807, 811, 815, 819, 824, 825, 829, 833, 837, 841, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 872, 873, 874, 877, 878, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 896, 897, 898, 899, 904, 909, 910, 914, 918, 922, 926, 930, 934, 938, 942, 943, 948, 953, 956, 957, 958, 959, 961, 962, 963, 964, 965, 966, 968, 969, 971, 972, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 1000, 1001], "backend_handl": [0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 953], "contextmanag": [0, 1], "modul": [0, 4, 5, 16, 18, 21, 67, 68, 72, 73, 74, 75, 76, 113, 114, 121, 122, 123, 125, 129, 130, 132, 133, 135, 137, 148, 149, 572, 623, 872, 873, 877, 953, 961, 962, 963, 964, 965, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 989, 990, 997, 998], "sourc": [0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 14, 15, 16, 17, 18, 19, 21, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 125, 126, 150, 151, 152, 153, 154, 155, 156, 157, 158, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 285, 286, 287, 288, 289, 290, 292, 293, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 956, 957, 958, 961, 962, 963, 964, 965, 966, 968, 969, 971, 972, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 1000, 1001], "base": [0, 19, 24, 25, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 70, 71, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 121, 124, 126, 132, 148, 175, 207, 208, 209, 246, 283, 285, 286, 287, 288, 289, 290, 292, 293, 295, 296, 297, 298, 333, 422, 425, 466, 469, 470, 473, 474, 477, 478, 481, 521, 524, 572, 607, 630, 637, 646, 889, 890, 891, 895, 897, 909, 910, 913, 961, 962, 963, 966, 968, 969, 971, 972, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998], "object": [0, 23, 69, 72, 73, 74, 75, 76, 121, 134, 137, 175, 193, 196, 246, 266, 283, 328, 646, 849, 852, 854, 856, 857, 858, 863, 864, 865, 866, 872, 883, 966, 975, 976, 977, 978, 979, 980, 981, 982, 984, 985, 987, 988], "__init__": [0, 1, 4, 5, 72, 73, 74, 75, 76, 116, 123, 127, 132, 134, 135, 136, 137, 246, 247, 248, 249, 283, 284, 291, 292, 293, 294, 295, 296, 297, 298, 646, 647, 872, 873, 877, 953, 961, 962, 963, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998], "choose_random_backend": 0, "exclud": [0, 2, 119, 132, 175, 176, 177, 872, 878, 880], "none": [0, 2, 5, 12, 24, 25, 26, 27, 28, 29, 30, 31, 32, 37, 38, 39, 40, 47, 48, 49, 50, 51, 52, 53, 54, 61, 62, 63, 64, 65, 66, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 116, 117, 119, 121, 122, 126, 127, 128, 129, 130, 132, 134, 136, 137, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 212, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 252, 254, 255, 257, 259, 261, 262, 263, 266, 269, 283, 292, 293, 301, 302, 325, 326, 327, 328, 331, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 575, 577, 578, 584, 585, 586, 587, 589, 590, 591, 593, 594, 595, 596, 597, 598, 600, 601, 602, 603, 604, 605, 610, 612, 613, 617, 623, 625, 628, 629, 630, 631, 636, 637, 643, 646, 653, 654, 655, 656, 658, 659, 660, 661, 662, 663, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 679, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 744, 745, 746, 747, 748, 749, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 855, 860, 861, 862, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 888, 889, 891, 892, 894, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 964, 965, 966, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998], "clear_backend_stack": 0, "current_backend": [0, 74, 75, 116, 122], "arg": [0, 4, 21, 23, 26, 27, 28, 69, 72, 73, 132, 134, 136, 283, 292, 307, 311, 315, 327, 572, 629, 964, 965, 987, 988], "kwarg": [0, 4, 23, 26, 27, 28, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 132, 134, 136, 283, 292, 307, 311, 315, 572, 622, 964, 965, 987, 988], "return": [0, 4, 5, 12, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 47, 48, 49, 50, 51, 52, 53, 54, 59, 60, 61, 62, 63, 64, 65, 66, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 83, 84, 85, 86, 87, 88, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 105, 106, 107, 108, 109, 110, 111, 112, 116, 117, 118, 119, 121, 122, 124, 125, 126, 127, 128, 129, 130, 132, 134, 135, 136, 137, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 278, 282, 283, 292, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 575, 576, 577, 578, 580, 581, 582, 583, 584, 585, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 607, 608, 609, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 628, 629, 630, 631, 634, 635, 636, 637, 638, 640, 641, 642, 643, 644, 645, 646, 648, 649, 650, 651, 652, 653, 655, 656, 657, 658, 660, 661, 662, 663, 664, 665, 666, 668, 669, 670, 672, 673, 674, 675, 676, 677, 679, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 855, 859, 860, 861, 862, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 956, 958, 964, 965, 975, 984, 985, 991, 995], "current": [0, 4, 5, 12, 16, 18, 19, 20, 21, 72, 73, 74, 75, 76, 122, 128, 132, 137, 148, 149, 246, 267, 268, 270, 282, 283, 292, 316, 317, 321, 323, 572, 606, 613, 617, 624, 626, 646, 683, 849, 850, 859, 860, 953], "prioriti": [0, 4, 19, 72, 73, 129], "global_backend": [0, 4], "argument": [0, 4, 5, 14, 20, 26, 27, 28, 29, 30, 69, 72, 73, 74, 75, 76, 115, 116, 118, 119, 121, 122, 123, 125, 126, 130, 132, 134, 135, 172, 173, 175, 176, 177, 179, 182, 184, 185, 188, 190, 191, 193, 196, 198, 199, 202, 204, 205, 207, 208, 210, 213, 220, 221, 223, 226, 228, 232, 233, 237, 238, 240, 241, 245, 246, 255, 258, 274, 283, 292, 293, 307, 311, 315, 333, 334, 337, 347, 350, 352, 355, 356, 359, 397, 400, 430, 433, 513, 516, 545, 548, 549, 552, 558, 562, 572, 578, 579, 583, 593, 600, 622, 629, 684, 687, 696, 697, 698, 701, 709, 711, 785, 819, 822, 849, 855, 867, 868, 871, 889, 891, 895, 909, 914, 917, 934, 937, 942, 943, 946, 956, 958, 964, 965, 987, 988], "s": [0, 4, 5, 6, 12, 15, 16, 17, 18, 19, 21, 26, 29, 30, 69, 72, 73, 115, 117, 118, 119, 121, 123, 125, 126, 127, 128, 129, 130, 132, 134, 135, 136, 137, 148, 149, 174, 175, 210, 213, 228, 232, 233, 237, 246, 267, 268, 283, 302, 326, 333, 525, 528, 572, 581, 646, 653, 655, 658, 660, 666, 668, 674, 676, 697, 748, 750, 751, 753, 849, 855, 861, 909, 930, 933, 938, 941, 953, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 995, 997, 998], "paramet": [0, 4, 5, 26, 27, 28, 29, 30, 67, 68, 72, 73, 74, 75, 76, 113, 114, 116, 118, 121, 134, 135, 148, 160, 161, 162, 163, 164, 165, 166, 169, 171, 172, 173, 175, 176, 177, 179, 182, 184, 185, 188, 190, 191, 193, 196, 198, 199, 202, 204, 205, 207, 208, 210, 213, 215, 218, 220, 221, 223, 226, 228, 232, 233, 237, 238, 240, 241, 245, 246, 250, 251, 252, 253, 254, 255, 258, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 282, 283, 292, 293, 296, 297, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 319, 321, 322, 323, 324, 325, 326, 327, 328, 329, 332, 333, 334, 337, 339, 342, 343, 346, 347, 350, 352, 355, 356, 359, 361, 364, 365, 368, 369, 372, 373, 376, 377, 380, 381, 384, 385, 388, 389, 392, 393, 396, 397, 400, 401, 404, 405, 408, 409, 412, 414, 417, 418, 421, 422, 425, 426, 429, 430, 433, 434, 437, 438, 441, 442, 445, 446, 449, 450, 453, 454, 457, 458, 461, 462, 465, 466, 469, 470, 473, 474, 477, 478, 481, 482, 485, 486, 489, 490, 493, 494, 497, 498, 501, 502, 503, 504, 507, 509, 512, 513, 516, 517, 520, 521, 524, 525, 528, 529, 532, 533, 536, 537, 540, 541, 544, 545, 548, 549, 552, 553, 557, 558, 562, 563, 567, 568, 571, 572, 573, 576, 578, 579, 580, 581, 582, 583, 584, 585, 587, 590, 591, 593, 594, 595, 596, 597, 598, 599, 600, 601, 604, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 625, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 640, 641, 642, 643, 644, 645, 646, 648, 651, 653, 655, 657, 658, 660, 662, 664, 666, 668, 670, 672, 674, 676, 678, 679, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 701, 703, 705, 706, 708, 709, 711, 712, 714, 715, 717, 718, 720, 721, 724, 725, 727, 729, 731, 732, 734, 735, 737, 738, 740, 741, 743, 744, 745, 747, 748, 750, 751, 753, 754, 756, 757, 759, 760, 762, 763, 765, 766, 768, 769, 770, 773, 775, 778, 780, 783, 785, 786, 789, 791, 794, 795, 798, 799, 802, 803, 806, 807, 810, 811, 814, 815, 818, 819, 822, 824, 825, 828, 829, 832, 833, 836, 837, 840, 841, 844, 845, 846, 847, 848, 849, 850, 851, 852, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 871, 872, 873, 874, 875, 877, 878, 880, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 895, 896, 897, 898, 899, 902, 904, 907, 909, 910, 913, 914, 917, 918, 921, 922, 925, 926, 929, 930, 933, 934, 937, 938, 941, 942, 943, 946, 948, 951, 956, 958, 964, 965, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998], "from": [0, 4, 5, 6, 14, 15, 16, 17, 18, 19, 20, 21, 26, 27, 28, 29, 30, 67, 68, 69, 72, 73, 74, 75, 76, 113, 114, 115, 116, 117, 118, 119, 121, 123, 125, 126, 127, 128, 129, 130, 132, 134, 135, 136, 137, 148, 149, 175, 176, 177, 179, 182, 185, 188, 193, 196, 198, 199, 202, 210, 213, 215, 218, 223, 226, 241, 245, 246, 255, 258, 274, 283, 292, 293, 302, 317, 321, 326, 327, 333, 438, 441, 545, 548, 572, 593, 600, 601, 604, 640, 646, 653, 655, 666, 668, 684, 692, 695, 697, 709, 711, 748, 750, 760, 762, 785, 803, 806, 815, 818, 825, 828, 845, 846, 847, 848, 849, 851, 861, 862, 872, 873, 874, 875, 877, 878, 880, 884, 888, 889, 890, 896, 909, 926, 929, 930, 933, 934, 937, 938, 941, 942, 943, 946, 948, 951, 953, 959, 964, 965, 975, 983, 986, 991, 995], "which": [0, 4, 5, 14, 15, 16, 18, 19, 20, 21, 72, 73, 74, 75, 76, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 134, 135, 136, 137, 148, 149, 160, 165, 172, 173, 174, 175, 176, 177, 179, 182, 184, 185, 188, 190, 191, 198, 199, 202, 204, 205, 207, 208, 215, 218, 220, 221, 223, 226, 228, 232, 233, 237, 238, 240, 241, 245, 246, 255, 258, 260, 264, 266, 269, 270, 282, 283, 292, 293, 303, 308, 309, 310, 311, 312, 313, 314, 315, 317, 321, 323, 325, 326, 327, 333, 525, 528, 572, 578, 590, 591, 593, 600, 601, 604, 606, 612, 616, 624, 625, 626, 628, 629, 644, 646, 653, 655, 657, 658, 660, 666, 668, 670, 672, 674, 676, 679, 681, 682, 684, 695, 697, 703, 705, 709, 711, 725, 727, 745, 747, 748, 750, 760, 762, 763, 765, 769, 775, 778, 780, 783, 785, 791, 794, 803, 806, 811, 814, 819, 822, 824, 829, 832, 849, 854, 855, 856, 857, 862, 863, 864, 865, 866, 872, 873, 874, 875, 878, 880, 884, 885, 886, 887, 888, 889, 890, 891, 895, 897, 898, 899, 902, 904, 907, 909, 914, 917, 918, 921, 922, 925, 926, 929, 930, 933, 934, 937, 938, 941, 942, 943, 946, 948, 951, 953, 956, 958, 964, 965, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 995, 997, 998], "try": [0, 4, 13, 15, 16, 18, 19, 20, 21, 72, 73, 125, 126, 130, 134, 149, 572, 643, 953], "infer": [0, 4, 115, 123, 127, 128, 132, 137, 172, 173, 175, 176, 177, 179, 182, 185, 188, 198, 199, 202, 215, 218, 223, 226, 241, 245, 333, 438, 441, 572, 609, 634, 785, 815, 818], "when": [0, 4, 14, 15, 18, 19, 20, 23, 69, 72, 73, 74, 75, 76, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 134, 135, 137, 149, 246, 252, 283, 333, 347, 350, 426, 429, 521, 524, 572, 583, 616, 637, 769, 770, 773, 775, 778, 780, 783, 849, 860, 884, 885, 886, 888, 909, 914, 917, 922, 925, 930, 933, 938, 941, 953, 987, 988], "global": [0, 4, 5, 6, 12, 72, 73, 74, 75, 76, 122, 123, 127, 128, 132, 246, 261, 262, 263, 283, 292, 293, 325, 326, 327, 572, 607, 608, 627, 630, 631, 632, 636, 637, 646, 683, 867, 868, 871, 989, 990], "set": [0, 4, 5, 6, 12, 14, 17, 19, 26, 29, 30, 60, 69, 72, 73, 106, 115, 116, 121, 122, 124, 125, 126, 127, 128, 129, 132, 134, 135, 283, 302, 312, 313, 324, 325, 326, 327, 333, 365, 368, 572, 573, 576, 630, 631, 632, 633, 646, 653, 655, 658, 660, 662, 664, 666, 668, 670, 672, 674, 676, 697, 703, 705, 725, 727, 729, 731, 738, 740, 745, 747, 849, 850, 859, 860, 861, 865, 866, 872, 882, 884, 885, 890, 891, 895, 896, 897, 898, 899, 902, 904, 907, 909, 930, 933, 938, 941, 975, 984, 991, 992, 993, 994, 995, 996], "ret": [0, 4, 5, 12, 26, 27, 28, 29, 30, 72, 73, 116, 118, 132, 137, 160, 161, 162, 163, 164, 165, 166, 169, 171, 172, 173, 175, 176, 177, 179, 182, 184, 185, 188, 190, 191, 193, 196, 198, 199, 202, 204, 205, 207, 208, 210, 213, 215, 218, 220, 221, 223, 226, 228, 232, 233, 237, 238, 240, 241, 245, 246, 250, 251, 252, 253, 254, 255, 258, 260, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 282, 283, 292, 299, 300, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 326, 327, 328, 329, 330, 332, 333, 334, 337, 339, 342, 343, 346, 347, 350, 352, 355, 356, 359, 361, 364, 365, 368, 369, 372, 373, 376, 377, 380, 381, 384, 385, 388, 389, 392, 393, 396, 397, 400, 401, 404, 405, 408, 409, 412, 414, 417, 418, 421, 422, 425, 426, 429, 430, 433, 434, 437, 438, 441, 442, 445, 446, 449, 450, 453, 454, 457, 458, 461, 462, 465, 466, 469, 470, 473, 474, 477, 478, 481, 482, 485, 486, 489, 490, 493, 494, 497, 498, 501, 502, 503, 504, 507, 509, 512, 513, 516, 517, 520, 521, 524, 525, 528, 529, 532, 533, 536, 537, 540, 541, 544, 545, 548, 549, 552, 553, 557, 558, 562, 563, 567, 568, 571, 572, 573, 576, 578, 580, 581, 582, 583, 584, 585, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 604, 608, 609, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 625, 628, 629, 634, 636, 637, 638, 640, 641, 642, 644, 645, 646, 648, 651, 653, 655, 657, 658, 660, 662, 664, 666, 668, 670, 672, 674, 676, 679, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 701, 703, 705, 706, 708, 709, 711, 712, 714, 715, 717, 718, 720, 721, 724, 725, 727, 729, 731, 732, 734, 735, 737, 738, 740, 741, 743, 744, 745, 747, 748, 750, 751, 753, 754, 756, 757, 759, 760, 762, 763, 765, 766, 768, 769, 770, 773, 775, 778, 780, 783, 785, 786, 789, 791, 794, 795, 798, 799, 802, 803, 806, 807, 810, 811, 814, 815, 818, 819, 822, 824, 825, 828, 829, 832, 833, 836, 837, 840, 841, 844, 845, 846, 847, 848, 849, 850, 851, 855, 859, 860, 861, 867, 868, 871, 872, 873, 874, 875, 877, 878, 880, 883, 884, 885, 886, 887, 888, 889, 890, 891, 895, 896, 897, 898, 899, 902, 904, 907, 909, 910, 913, 914, 917, 918, 921, 922, 925, 926, 929, 930, 933, 934, 937, 938, 941, 942, 943, 946, 948, 951, 956, 958, 964, 965, 991, 995], "exampl": [0, 4, 5, 6, 12, 16, 18, 19, 20, 33, 34, 37, 38, 39, 40, 41, 42, 47, 48, 51, 52, 59, 60, 67, 68, 69, 74, 75, 79, 80, 83, 84, 85, 86, 87, 88, 93, 94, 97, 98, 101, 102, 105, 106, 113, 114, 115, 116, 118, 121, 122, 123, 124, 125, 126, 127, 128, 129, 132, 134, 135, 136, 137, 148, 149, 160, 162, 163, 164, 165, 166, 169, 171, 172, 173, 175, 198, 199, 202, 210, 213, 220, 221, 223, 226, 238, 240, 241, 245, 246, 252, 255, 256, 257, 258, 259, 267, 268, 283, 302, 303, 305, 317, 318, 319, 320, 321, 324, 326, 328, 330, 331, 333, 334, 335, 336, 337, 338, 347, 348, 349, 350, 351, 352, 355, 356, 357, 358, 359, 360, 369, 372, 373, 376, 377, 380, 389, 392, 393, 396, 397, 398, 399, 400, 401, 404, 405, 408, 422, 425, 430, 431, 432, 433, 438, 441, 442, 445, 458, 461, 462, 465, 502, 503, 509, 512, 513, 516, 529, 532, 545, 548, 549, 552, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 572, 573, 574, 575, 576, 577, 580, 581, 589, 590, 597, 600, 601, 602, 603, 604, 605, 608, 619, 634, 635, 640, 641, 642, 646, 648, 649, 650, 651, 652, 683, 684, 685, 687, 689, 690, 691, 696, 697, 698, 699, 700, 701, 702, 703, 705, 706, 708, 709, 711, 718, 720, 729, 731, 735, 737, 748, 750, 754, 756, 757, 759, 769, 770, 773, 775, 778, 780, 783, 785, 786, 787, 788, 789, 790, 791, 794, 799, 802, 803, 806, 811, 814, 815, 818, 819, 820, 821, 822, 823, 824, 825, 828, 829, 832, 833, 836, 867, 868, 871, 872, 873, 874, 875, 876, 877, 878, 880, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 898, 899, 902, 909, 910, 913, 914, 917, 930, 933, 934, 937, 942, 943, 946, 953], "If": [0, 4, 5, 6, 14, 17, 18, 19, 20, 21, 23, 26, 29, 30, 69, 72, 73, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 134, 135, 137, 149, 175, 176, 177, 184, 185, 188, 190, 191, 198, 199, 202, 210, 213, 220, 221, 223, 226, 228, 232, 233, 237, 238, 240, 241, 245, 246, 252, 254, 274, 283, 302, 326, 333, 334, 337, 339, 342, 343, 346, 347, 350, 352, 355, 356, 359, 361, 364, 365, 368, 397, 400, 401, 404, 405, 408, 422, 425, 426, 429, 430, 433, 466, 469, 470, 473, 478, 481, 482, 485, 490, 493, 494, 497, 504, 507, 521, 524, 525, 528, 529, 532, 533, 536, 537, 540, 541, 544, 545, 548, 558, 562, 563, 567, 568, 571, 572, 616, 646, 653, 655, 658, 660, 666, 668, 670, 672, 674, 676, 683, 697, 698, 701, 703, 705, 725, 727, 729, 731, 738, 740, 741, 743, 745, 747, 748, 750, 760, 762, 763, 765, 769, 770, 773, 775, 778, 780, 783, 785, 799, 802, 803, 806, 819, 822, 824, 825, 828, 829, 832, 845, 846, 847, 849, 861, 862, 872, 877, 878, 880, 884, 885, 886, 887, 889, 890, 891, 895, 897, 898, 899, 902, 904, 907, 909, 914, 917, 918, 921, 922, 925, 926, 929, 930, 933, 934, 937, 938, 941, 942, 943, 946, 948, 951, 953], "import": [0, 4, 15, 20, 67, 68, 113, 114, 116, 118, 119, 123, 125, 126, 127, 128, 129, 130, 132, 134, 135, 137, 149, 283, 324, 953, 959], "numpi": [0, 4, 5, 6, 14, 15, 19, 20, 72, 73, 117, 121, 123, 127, 128, 129, 132, 134, 137, 572, 641, 909, 910, 913, 953], "np": [0, 4, 117, 121, 125, 127, 128, 129, 134, 135, 137, 953], "x": [0, 4, 12, 21, 26, 29, 30, 33, 34, 37, 38, 39, 40, 47, 48, 51, 52, 59, 60, 70, 71, 72, 73, 74, 75, 77, 78, 79, 80, 83, 84, 85, 86, 87, 88, 93, 94, 97, 98, 101, 102, 105, 106, 107, 108, 111, 112, 116, 117, 118, 119, 121, 122, 123, 126, 129, 130, 132, 134, 135, 136, 137, 160, 161, 162, 163, 164, 165, 166, 169, 170, 171, 175, 179, 182, 183, 185, 188, 189, 193, 196, 197, 199, 202, 203, 210, 213, 215, 218, 219, 223, 226, 227, 228, 229, 232, 233, 234, 237, 238, 240, 241, 242, 245, 246, 252, 254, 255, 256, 257, 258, 259, 264, 283, 302, 303, 304, 305, 308, 309, 317, 321, 326, 328, 333, 334, 335, 336, 337, 338, 339, 342, 343, 346, 347, 348, 349, 350, 351, 352, 355, 356, 357, 358, 359, 360, 361, 364, 365, 368, 369, 372, 373, 376, 377, 380, 393, 396, 397, 398, 399, 400, 401, 404, 405, 408, 418, 421, 422, 425, 426, 429, 430, 431, 432, 433, 438, 441, 442, 445, 446, 449, 450, 453, 454, 457, 458, 461, 462, 465, 466, 469, 470, 473, 474, 477, 478, 481, 490, 493, 502, 503, 509, 512, 517, 520, 529, 532, 533, 536, 537, 540, 541, 544, 545, 548, 549, 552, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 571, 572, 580, 581, 582, 584, 585, 587, 589, 590, 591, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 608, 609, 611, 612, 614, 615, 616, 618, 619, 620, 621, 625, 634, 635, 638, 640, 641, 642, 644, 645, 646, 657, 662, 664, 665, 679, 681, 682, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 705, 706, 708, 709, 711, 712, 714, 715, 717, 718, 720, 725, 727, 728, 729, 731, 732, 734, 735, 737, 738, 740, 741, 743, 744, 748, 750, 751, 753, 754, 756, 757, 759, 763, 765, 769, 770, 773, 775, 778, 780, 783, 785, 786, 787, 788, 789, 790, 791, 794, 795, 798, 799, 802, 803, 806, 807, 810, 811, 814, 815, 818, 819, 820, 821, 822, 823, 824, 825, 828, 829, 830, 831, 832, 833, 836, 837, 840, 841, 844, 849, 850, 855, 859, 860, 861, 867, 868, 871, 872, 874, 875, 876, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 902, 903, 904, 907, 908, 909, 910, 913, 914, 917, 918, 921, 922, 925, 926, 929, 930, 933, 934, 937, 938, 941, 942, 943, 946, 947, 948, 951, 952, 953, 975, 986], "arrai": [0, 4, 18, 19, 20, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 72, 73, 74, 75, 76, 77, 78, 79, 80, 83, 84, 85, 86, 87, 88, 93, 94, 97, 98, 101, 102, 105, 106, 115, 116, 118, 119, 121, 122, 123, 124, 126, 127, 128, 129, 130, 131, 132, 133, 135, 136, 137, 149, 150, 158, 160, 161, 162, 163, 164, 165, 166, 169, 171, 174, 175, 176, 177, 179, 182, 184, 185, 188, 190, 191, 193, 196, 198, 199, 202, 204, 205, 207, 208, 210, 212, 213, 214, 215, 218, 220, 221, 223, 226, 228, 232, 233, 237, 238, 240, 241, 245, 246, 252, 253, 254, 255, 257, 258, 259, 264, 266, 269, 271, 272, 274, 278, 283, 302, 303, 304, 305, 308, 309, 310, 311, 312, 313, 314, 315, 317, 321, 323, 327, 328, 333, 334, 336, 337, 338, 339, 342, 343, 346, 347, 349, 350, 351, 352, 355, 356, 358, 359, 360, 361, 364, 365, 368, 369, 372, 373, 376, 377, 380, 381, 384, 385, 388, 389, 392, 393, 396, 397, 399, 400, 401, 404, 405, 408, 409, 412, 414, 417, 418, 421, 422, 425, 426, 429, 430, 432, 433, 434, 437, 438, 441, 442, 445, 446, 449, 450, 453, 454, 457, 458, 461, 462, 465, 466, 469, 470, 473, 474, 477, 478, 481, 482, 485, 486, 489, 490, 493, 494, 497, 498, 501, 502, 503, 504, 507, 509, 512, 513, 516, 517, 520, 521, 524, 525, 528, 529, 532, 533, 536, 537, 540, 541, 544, 545, 548, 549, 552, 553, 557, 558, 559, 561, 562, 563, 564, 566, 567, 568, 571, 572, 573, 575, 576, 577, 580, 581, 582, 584, 585, 587, 589, 590, 591, 594, 595, 596, 597, 598, 599, 600, 601, 603, 604, 605, 606, 609, 611, 612, 613, 614, 615, 616, 618, 619, 621, 624, 625, 626, 628, 629, 634, 635, 638, 640, 641, 642, 644, 645, 646, 648, 650, 651, 652, 653, 655, 658, 660, 662, 664, 666, 668, 670, 672, 674, 676, 679, 681, 682, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 700, 701, 702, 703, 705, 706, 708, 709, 711, 712, 714, 715, 717, 718, 720, 721, 724, 725, 727, 728, 729, 731, 732, 734, 735, 737, 738, 740, 741, 743, 744, 745, 747, 748, 750, 751, 753, 754, 756, 757, 759, 760, 762, 763, 765, 766, 768, 769, 770, 773, 775, 778, 780, 783, 785, 786, 788, 789, 790, 791, 794, 795, 798, 799, 802, 803, 806, 807, 810, 811, 814, 815, 818, 819, 821, 822, 823, 824, 825, 828, 829, 832, 833, 836, 837, 840, 841, 844, 845, 846, 847, 848, 849, 851, 861, 862, 867, 868, 871, 872, 873, 874, 875, 876, 877, 878, 880, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 894, 895, 896, 897, 898, 899, 902, 904, 907, 909, 910, 913, 914, 917, 918, 921, 922, 925, 926, 929, 930, 933, 934, 937, 938, 941, 942, 943, 946, 948, 951, 953, 956, 958, 975, 983, 986], "2": [0, 4, 18, 19, 21, 33, 34, 37, 38, 39, 40, 41, 42, 47, 48, 51, 52, 59, 60, 69, 72, 73, 74, 75, 79, 80, 83, 84, 85, 86, 87, 88, 93, 94, 97, 98, 101, 102, 105, 106, 117, 119, 121, 123, 126, 131, 132, 134, 135, 136, 137, 149, 160, 162, 163, 164, 165, 171, 174, 175, 198, 199, 202, 210, 213, 220, 221, 223, 226, 241, 245, 246, 252, 255, 256, 257, 258, 259, 283, 302, 303, 305, 317, 319, 321, 328, 333, 334, 335, 336, 337, 338, 347, 348, 349, 350, 351, 352, 355, 356, 358, 359, 360, 361, 364, 365, 368, 373, 376, 377, 380, 389, 392, 393, 396, 397, 398, 399, 400, 401, 404, 405, 408, 422, 425, 430, 431, 432, 433, 438, 441, 442, 445, 458, 461, 462, 465, 478, 481, 502, 503, 509, 512, 513, 516, 529, 532, 545, 548, 549, 552, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 572, 573, 574, 575, 576, 580, 581, 584, 585, 587, 590, 597, 600, 601, 602, 603, 604, 605, 619, 634, 635, 640, 646, 648, 649, 650, 651, 652, 684, 687, 688, 689, 690, 691, 696, 697, 698, 699, 700, 701, 702, 703, 705, 706, 708, 709, 710, 711, 718, 720, 721, 724, 725, 727, 729, 731, 735, 737, 738, 740, 741, 743, 748, 750, 754, 755, 756, 757, 759, 763, 764, 765, 769, 770, 773, 780, 783, 785, 786, 787, 788, 789, 790, 791, 794, 799, 802, 803, 806, 811, 814, 815, 818, 819, 820, 821, 822, 823, 824, 825, 828, 833, 836, 867, 868, 871, 872, 873, 874, 875, 876, 877, 878, 880, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 898, 899, 902, 909, 910, 913, 914, 917, 942, 943, 946, 953], "0": [0, 4, 19, 31, 32, 37, 38, 39, 40, 41, 42, 47, 48, 51, 52, 53, 54, 59, 60, 63, 64, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 116, 118, 119, 121, 132, 134, 135, 136, 137, 160, 162, 163, 164, 165, 166, 169, 171, 175, 176, 177, 190, 191, 192, 204, 205, 207, 208, 209, 223, 226, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 240, 241, 245, 246, 252, 255, 257, 258, 259, 266, 283, 285, 288, 292, 295, 299, 302, 303, 305, 308, 309, 310, 311, 312, 313, 314, 315, 317, 321, 324, 326, 327, 331, 333, 334, 335, 337, 338, 339, 342, 343, 346, 347, 350, 351, 352, 355, 356, 357, 358, 359, 360, 361, 364, 365, 368, 369, 372, 373, 376, 381, 384, 389, 392, 393, 396, 397, 398, 399, 400, 401, 404, 405, 408, 422, 425, 426, 429, 430, 431, 432, 433, 442, 445, 462, 465, 466, 469, 470, 473, 478, 481, 502, 503, 504, 507, 509, 512, 513, 516, 521, 524, 525, 528, 529, 532, 533, 536, 537, 540, 541, 544, 545, 548, 549, 552, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 571, 572, 573, 574, 575, 576, 577, 580, 581, 584, 585, 587, 589, 590, 591, 597, 600, 601, 604, 605, 610, 619, 625, 628, 629, 634, 640, 641, 642, 646, 648, 649, 650, 651, 652, 653, 654, 655, 656, 666, 667, 668, 669, 670, 671, 672, 673, 684, 685, 687, 689, 690, 691, 696, 697, 698, 699, 700, 701, 702, 703, 705, 706, 708, 709, 710, 711, 718, 720, 748, 750, 754, 756, 757, 758, 759, 763, 765, 769, 770, 773, 775, 778, 780, 783, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 806, 807, 810, 811, 814, 819, 820, 821, 822, 823, 824, 825, 828, 829, 830, 831, 832, 833, 836, 841, 843, 849, 861, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 897, 898, 899, 902, 909, 910, 913, 914, 917, 918, 921, 930, 931, 932, 933, 934, 937, 938, 939, 940, 941, 942, 943, 946, 953, 966, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 997, 998], "print": [0, 4, 5, 6, 12, 18, 33, 34, 37, 38, 39, 40, 41, 42, 47, 48, 51, 52, 59, 60, 67, 68, 72, 73, 74, 75, 76, 79, 80, 83, 84, 85, 86, 87, 88, 93, 94, 97, 98, 101, 102, 105, 106, 113, 114, 119, 121, 126, 132, 134, 135, 136, 160, 162, 163, 164, 165, 166, 169, 171, 175, 198, 199, 202, 210, 213, 220, 221, 223, 226, 238, 240, 241, 245, 246, 252, 255, 256, 257, 258, 259, 267, 268, 283, 303, 317, 318, 319, 320, 321, 323, 326, 330, 333, 334, 335, 336, 337, 338, 347, 348, 349, 350, 351, 352, 355, 356, 357, 358, 359, 360, 369, 372, 373, 376, 377, 380, 389, 392, 393, 396, 397, 398, 399, 400, 401, 404, 405, 408, 422, 425, 430, 431, 432, 433, 438, 441, 442, 445, 458, 461, 462, 465, 502, 503, 509, 512, 513, 516, 529, 532, 545, 548, 549, 552, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 572, 573, 574, 575, 576, 577, 580, 581, 589, 590, 597, 600, 601, 602, 603, 604, 605, 608, 626, 634, 635, 640, 641, 642, 646, 648, 649, 651, 652, 683, 684, 685, 687, 689, 690, 691, 696, 697, 698, 699, 700, 701, 702, 703, 705, 706, 708, 709, 711, 718, 720, 735, 737, 748, 750, 754, 756, 757, 759, 769, 770, 773, 775, 778, 780, 783, 785, 786, 787, 788, 789, 790, 799, 802, 803, 806, 811, 814, 815, 818, 819, 820, 821, 822, 823, 824, 825, 828, 833, 836, 867, 868, 871, 872, 873, 874, 875, 876, 877, 878, 880, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 898, 899, 902, 909, 910, 913, 914, 917, 930, 933, 934, 937, 942, 943, 946, 953], "function": [0, 4, 5, 6, 14, 19, 21, 24, 25, 26, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 47, 48, 51, 52, 59, 60, 67, 68, 70, 71, 72, 73, 79, 80, 83, 84, 85, 86, 87, 88, 93, 94, 97, 98, 101, 102, 105, 106, 113, 114, 115, 116, 118, 119, 120, 123, 125, 129, 130, 131, 133, 134, 135, 136, 147, 148, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 179, 180, 182, 184, 185, 186, 188, 190, 191, 193, 194, 196, 198, 199, 200, 202, 204, 205, 207, 208, 210, 213, 215, 216, 218, 220, 221, 223, 224, 226, 228, 230, 232, 233, 235, 237, 238, 240, 241, 243, 245, 246, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 285, 286, 287, 288, 289, 290, 292, 293, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 342, 343, 346, 347, 348, 349, 350, 351, 352, 355, 356, 357, 358, 359, 360, 361, 364, 365, 368, 369, 372, 373, 376, 377, 380, 381, 384, 385, 388, 389, 392, 393, 396, 397, 398, 399, 400, 401, 404, 405, 408, 409, 412, 414, 417, 418, 421, 422, 425, 426, 429, 430, 431, 432, 433, 434, 437, 438, 441, 442, 445, 446, 449, 450, 453, 454, 457, 458, 461, 462, 465, 466, 469, 470, 473, 474, 477, 478, 481, 482, 485, 486, 489, 490, 493, 494, 497, 498, 501, 502, 503, 504, 507, 509, 512, 513, 516, 517, 520, 521, 524, 525, 528, 529, 532, 533, 536, 537, 540, 541, 544, 545, 548, 549, 552, 553, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 648, 649, 650, 651, 652, 653, 655, 657, 658, 660, 662, 664, 666, 668, 670, 672, 674, 676, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 705, 706, 708, 709, 711, 712, 714, 715, 717, 718, 720, 721, 724, 725, 727, 728, 729, 731, 732, 734, 735, 737, 738, 740, 741, 743, 744, 745, 747, 748, 750, 751, 753, 754, 756, 757, 759, 760, 762, 763, 765, 766, 768, 769, 770, 773, 775, 778, 780, 783, 785, 786, 787, 788, 789, 790, 791, 794, 795, 798, 799, 802, 803, 806, 807, 810, 811, 814, 815, 818, 819, 820, 821, 822, 823, 824, 825, 828, 829, 832, 833, 836, 837, 840, 841, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 871, 872, 873, 874, 875, 876, 877, 878, 880, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 902, 904, 907, 909, 910, 913, 914, 917, 918, 921, 922, 925, 926, 929, 930, 933, 934, 937, 938, 941, 942, 943, 946, 948, 951, 953, 956, 958, 961, 962, 963, 991, 994, 996], "py": [0, 4, 5, 19, 116, 117, 118, 121, 122, 123, 127, 128, 130, 132, 134, 136, 137, 872, 873, 877], "noqa": [0, 4, 5, 175, 176, 177, 179, 182, 184, 185, 188, 190, 191, 193, 196, 198, 199, 202, 204, 205, 210, 213, 220, 221, 223, 226, 228, 232, 233, 237, 238, 240, 241, 245, 246, 255, 258, 333, 334, 337, 347, 350, 356, 359, 373, 376, 393, 396, 397, 400, 405, 408, 462, 465, 513, 516, 529, 532, 545, 548, 549, 552, 558, 562, 563, 567, 697, 706, 708, 709, 711, 785, 799, 802, 803, 806, 819, 822, 909, 914, 917], "The": [0, 4, 5, 13, 14, 16, 17, 18, 20, 21, 23, 26, 27, 28, 29, 30, 69, 72, 73, 74, 75, 76, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 135, 136, 137, 148, 160, 161, 162, 165, 171, 172, 173, 175, 176, 177, 193, 196, 207, 208, 228, 232, 233, 237, 246, 250, 251, 252, 260, 265, 267, 268, 270, 273, 278, 282, 283, 292, 293, 299, 300, 301, 302, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 321, 322, 323, 324, 325, 326, 327, 329, 332, 333, 334, 337, 339, 342, 343, 346, 347, 350, 352, 355, 356, 359, 361, 364, 365, 368, 369, 372, 373, 376, 377, 380, 381, 384, 385, 388, 389, 392, 393, 396, 397, 400, 401, 404, 405, 408, 409, 412, 414, 417, 418, 421, 422, 425, 426, 429, 430, 433, 434, 437, 438, 441, 442, 445, 446, 449, 450, 453, 454, 457, 458, 461, 462, 465, 466, 469, 470, 473, 478, 481, 482, 485, 486, 489, 490, 493, 494, 497, 498, 501, 504, 507, 513, 516, 521, 524, 525, 528, 529, 532, 533, 536, 537, 540, 541, 544, 545, 548, 558, 562, 563, 567, 568, 571, 572, 578, 580, 583, 584, 592, 593, 599, 601, 604, 614, 615, 616, 618, 619, 620, 621, 623, 628, 629, 630, 631, 632, 635, 636, 637, 645, 646, 648, 651, 653, 655, 658, 660, 666, 668, 670, 672, 674, 676, 679, 682, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 695, 696, 697, 698, 701, 703, 705, 706, 708, 709, 711, 712, 714, 715, 717, 718, 720, 725, 727, 729, 731, 732, 734, 735, 737, 738, 740, 741, 743, 744, 745, 747, 748, 750, 751, 753, 754, 756, 757, 759, 760, 762, 763, 765, 769, 770, 773, 775, 778, 780, 783, 785, 791, 794, 795, 798, 799, 802, 803, 806, 807, 810, 811, 814, 815, 818, 824, 837, 840, 845, 846, 847, 848, 849, 850, 851, 852, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 871, 872, 873, 877, 884, 885, 886, 887, 889, 890, 891, 895, 897, 898, 899, 902, 904, 907, 909, 910, 913, 914, 917, 918, 921, 922, 925, 926, 929, 930, 933, 934, 937, 938, 941, 942, 943, 946, 948, 951, 953, 964, 965, 975, 976, 977, 978, 979, 980, 981, 982, 983, 985, 986, 987, 988, 989, 990, 991, 993, 994, 995], "set_backend": [0, 4, 5, 12, 122, 123, 124, 127, 246, 267, 268, 283, 324, 572, 634, 953], "ha": [0, 4, 5, 14, 15, 16, 19, 69, 72, 73, 118, 119, 121, 122, 123, 124, 127, 128, 130, 132, 134, 136, 137, 148, 149, 175, 210, 213, 283, 302, 333, 334, 337, 504, 507, 521, 524, 646, 683, 697, 721, 724, 744, 745, 747, 748, 750, 757, 759, 785, 799, 802, 825, 828, 889, 890, 891, 895, 897, 909, 918, 921, 926, 929, 930, 933, 934, 937, 938, 941], "over": [0, 4, 14, 16, 18, 67, 68, 69, 72, 73, 113, 114, 118, 119, 121, 123, 129, 134, 149, 697, 725, 727, 754, 756, 760, 762, 763, 765, 867, 868, 871, 872, 878, 880, 909, 914, 917, 918, 921, 922, 925, 926, 929, 930, 933, 934, 937, 938, 941, 942, 943, 946, 948, 951, 989, 990], "ani": [0, 4, 12, 14, 15, 16, 17, 18, 19, 20, 21, 26, 27, 28, 65, 66, 67, 68, 72, 73, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 125, 126, 127, 128, 129, 132, 134, 135, 136, 137, 148, 149, 172, 173, 175, 176, 177, 179, 182, 184, 185, 188, 190, 191, 193, 196, 198, 199, 202, 204, 205, 207, 208, 210, 213, 215, 218, 220, 221, 223, 226, 228, 232, 233, 237, 238, 240, 241, 245, 246, 255, 258, 283, 328, 333, 334, 337, 347, 350, 352, 355, 356, 359, 397, 400, 414, 417, 430, 433, 442, 445, 462, 465, 513, 516, 545, 548, 549, 552, 558, 562, 572, 573, 576, 593, 594, 595, 596, 597, 600, 611, 618, 619, 620, 621, 636, 637, 646, 657, 684, 687, 694, 696, 697, 698, 701, 709, 711, 785, 819, 822, 845, 846, 847, 848, 849, 855, 859, 867, 868, 871, 872, 878, 880, 889, 891, 895, 909, 914, 917, 942, 943, 946, 953], "pass": [0, 4, 20, 67, 68, 72, 73, 74, 75, 76, 113, 114, 117, 118, 119, 120, 121, 122, 123, 125, 126, 129, 130, 134, 149, 246, 260, 283, 292, 327, 333, 365, 368, 572, 583, 616, 646, 682, 845, 846, 847, 964, 965, 987, 988, 991, 995, 997, 998], "jax": [0, 4, 5, 6, 15, 16, 19, 20, 117, 121, 123, 127, 128, 129, 132, 134, 137, 149, 646, 662, 664, 889, 890, 891, 895, 897, 953], "get_backend": [0, 122, 123], "specifi": [0, 5, 69, 72, 73, 115, 117, 121, 122, 127, 128, 129, 132, 135, 136, 137, 175, 176, 177, 184, 198, 204, 205, 207, 208, 220, 221, 228, 232, 233, 237, 238, 240, 246, 252, 254, 283, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 317, 321, 323, 326, 327, 328, 333, 525, 528, 572, 578, 590, 600, 601, 604, 611, 644, 697, 709, 711, 725, 727, 754, 756, 757, 759, 760, 762, 763, 765, 769, 770, 773, 775, 778, 780, 783, 785, 786, 789, 791, 794, 795, 798, 803, 806, 819, 822, 825, 828, 829, 832, 841, 844, 849, 854, 856, 857, 863, 864, 865, 866, 884, 885, 886, 889, 890, 891, 895, 897, 898, 899, 902, 909, 910, 913, 926, 929, 934, 937, 942, 943, 946, 948, 951], "isn": [0, 5, 19, 135, 149], "t": [0, 5, 15, 16, 18, 19, 20, 21, 67, 68, 113, 114, 119, 121, 127, 132, 134, 135, 136, 137, 149, 572, 581, 684, 693, 694], "associ": [0, 5, 19, 121, 122, 124, 149, 333, 347, 350, 504, 507, 697, 729, 731, 738, 740, 766, 768], "option": [0, 5, 18, 19, 26, 27, 28, 29, 30, 67, 68, 72, 73, 74, 75, 113, 114, 116, 117, 118, 119, 121, 122, 126, 127, 128, 129, 130, 132, 137, 149, 160, 161, 162, 163, 164, 165, 166, 169, 171, 172, 173, 175, 176, 177, 179, 182, 184, 185, 188, 190, 191, 193, 196, 198, 199, 202, 204, 205, 207, 208, 210, 213, 215, 218, 220, 221, 223, 226, 228, 232, 233, 237, 238, 240, 241, 245, 246, 252, 254, 260, 261, 262, 263, 270, 282, 283, 302, 326, 327, 328, 333, 334, 337, 339, 342, 343, 346, 347, 350, 352, 355, 356, 359, 361, 364, 365, 368, 369, 372, 373, 376, 377, 380, 381, 384, 385, 388, 389, 392, 393, 396, 397, 400, 401, 404, 405, 408, 409, 412, 414, 417, 418, 421, 422, 425, 426, 429, 430, 433, 434, 437, 438, 441, 442, 445, 446, 449, 450, 453, 454, 457, 458, 461, 466, 469, 470, 473, 474, 477, 478, 481, 482, 485, 486, 489, 490, 493, 494, 497, 498, 501, 502, 503, 504, 507, 509, 512, 513, 516, 517, 520, 521, 524, 525, 528, 529, 532, 533, 536, 537, 540, 541, 544, 545, 548, 549, 552, 553, 557, 558, 562, 563, 567, 568, 571, 572, 578, 584, 585, 587, 590, 591, 592, 594, 595, 596, 598, 600, 601, 604, 612, 623, 625, 628, 629, 636, 637, 646, 679, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 701, 703, 705, 706, 708, 709, 711, 715, 717, 718, 720, 721, 724, 725, 727, 729, 731, 732, 734, 735, 737, 738, 740, 744, 745, 747, 748, 750, 751, 753, 754, 756, 757, 759, 760, 762, 763, 765, 766, 768, 769, 770, 773, 775, 778, 780, 783, 785, 786, 789, 791, 794, 795, 798, 799, 802, 803, 806, 807, 810, 811, 814, 815, 818, 819, 822, 824, 825, 828, 829, 832, 833, 836, 837, 840, 841, 844, 845, 846, 847, 848, 849, 850, 855, 860, 861, 867, 868, 871, 872, 873, 874, 875, 877, 878, 880, 883, 884, 885, 886, 888, 889, 897, 898, 899, 902, 904, 907, 909, 910, 913, 914, 917, 918, 921, 922, 925, 926, 929, 930, 933, 934, 937, 938, 941, 942, 943, 946, 948, 951], "str": [0, 5, 23, 26, 27, 28, 69, 72, 73, 127, 128, 130, 172, 173, 175, 210, 213, 246, 250, 260, 261, 262, 265, 266, 269, 270, 271, 272, 275, 276, 277, 282, 283, 299, 302, 303, 305, 308, 309, 310, 311, 327, 572, 578, 592, 594, 595, 596, 623, 628, 629, 684, 685, 687, 689, 690, 691, 697, 741, 743, 845, 846, 847, 848, 849, 855, 909, 910, 913], "we": [0, 5, 6, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 67, 68, 113, 114, 115, 116, 117, 118, 119, 120, 122, 124, 125, 126, 127, 129, 130, 132, 133, 134, 135, 136, 137, 148, 149, 646, 657, 953, 959], "want": [0, 5, 15, 17, 18, 19, 67, 68, 113, 114, 121, 135, 136, 137, 149], "retriev": [0, 5, 19, 572, 578], "i": [0, 5, 19, 21, 115, 121, 132, 135, 137, 175, 176, 177, 210, 213, 333, 334, 337, 365, 368, 381, 384, 389, 392, 397, 400, 430, 433, 434, 437, 446, 449, 502, 503, 509, 512, 521, 524, 525, 528, 572, 580, 581, 646, 653, 655, 658, 660, 666, 668, 670, 672, 674, 676, 697, 703, 705, 721, 724, 729, 731, 738, 740, 745, 747, 748, 750, 757, 759, 763, 765, 785, 829, 832, 889, 890, 891, 895, 897, 898, 899, 902, 904, 907, 909, 910, 913, 914, 917, 918, 921, 922, 925, 930, 933, 934, 937, 938, 941], "e": [0, 5, 15, 16, 17, 19, 21, 69, 115, 121, 126, 135, 149, 174, 175, 210, 213, 246, 251, 274, 283, 299, 333, 334, 337, 365, 368, 381, 384, 389, 392, 397, 400, 422, 425, 430, 433, 434, 437, 446, 449, 466, 469, 474, 477, 502, 503, 509, 512, 521, 524, 525, 528, 646, 653, 655, 658, 660, 666, 668, 670, 672, 674, 676, 697, 703, 705, 721, 724, 729, 731, 738, 740, 745, 747, 748, 750, 763, 765, 785, 829, 832, 872, 877, 878, 880, 889, 890, 891, 895, 897, 898, 899, 902, 904, 907, 909, 914, 917, 918, 921, 922, 925, 926, 929, 930, 933, 934, 937, 938, 941], "one": [0, 5, 15, 16, 18, 19, 69, 72, 73, 83, 84, 85, 86, 93, 94, 97, 98, 101, 102, 117, 119, 121, 122, 125, 126, 127, 129, 130, 131, 134, 135, 137, 149, 175, 176, 177, 210, 213, 246, 253, 255, 258, 283, 312, 313, 314, 315, 327, 334, 338, 347, 351, 356, 360, 572, 573, 575, 576, 577, 601, 605, 622, 625, 628, 629, 697, 698, 702, 721, 724, 725, 727, 735, 737, 741, 743, 760, 762, 763, 765, 785, 786, 790, 799, 802, 803, 806, 819, 822, 823, 825, 828, 874, 876, 884, 885, 887, 889, 890, 891, 895, 896, 897, 909, 910, 913, 953], "default": [0, 5, 19, 23, 26, 27, 28, 29, 30, 67, 68, 69, 72, 73, 74, 75, 76, 113, 114, 117, 118, 119, 121, 122, 123, 126, 127, 128, 136, 160, 161, 162, 163, 164, 165, 166, 169, 171, 172, 173, 175, 176, 177, 179, 182, 184, 185, 188, 190, 191, 193, 196, 198, 199, 202, 204, 205, 207, 208, 210, 213, 215, 218, 220, 221, 223, 226, 228, 232, 233, 237, 238, 240, 241, 245, 246, 252, 254, 261, 262, 263, 264, 283, 292, 293, 302, 303, 307, 308, 309, 310, 311, 312, 313, 314, 315, 322, 324, 325, 326, 327, 328, 331, 332, 333, 334, 337, 339, 342, 343, 346, 347, 350, 352, 355, 356, 359, 361, 364, 365, 368, 369, 372, 373, 376, 377, 380, 381, 384, 385, 388, 389, 392, 393, 396, 397, 400, 401, 404, 405, 408, 409, 412, 414, 417, 418, 421, 422, 425, 426, 429, 430, 433, 434, 437, 438, 441, 442, 445, 446, 449, 450, 453, 454, 457, 458, 461, 466, 469, 470, 473, 474, 477, 478, 481, 482, 485, 486, 489, 490, 493, 494, 497, 498, 501, 502, 503, 504, 507, 509, 512, 513, 516, 517, 520, 521, 524, 525, 528, 529, 532, 533, 536, 537, 540, 541, 544, 545, 548, 549, 552, 553, 557, 558, 562, 563, 567, 568, 571, 572, 573, 576, 578, 584, 585, 587, 590, 591, 594, 595, 596, 598, 599, 600, 601, 604, 609, 610, 611, 612, 613, 616, 617, 618, 619, 621, 622, 623, 625, 627, 628, 629, 632, 634, 636, 637, 644, 645, 646, 648, 651, 653, 655, 657, 658, 660, 662, 664, 666, 668, 670, 672, 674, 676, 679, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 701, 703, 705, 706, 708, 709, 711, 715, 717, 718, 720, 721, 724, 725, 727, 729, 731, 732, 734, 735, 737, 738, 740, 741, 743, 744, 745, 747, 748, 750, 751, 753, 754, 756, 757, 759, 760, 762, 763, 765, 766, 768, 769, 770, 773, 775, 778, 780, 783, 785, 786, 789, 791, 794, 795, 798, 799, 802, 803, 806, 807, 810, 811, 814, 815, 818, 819, 822, 824, 825, 828, 829, 832, 833, 836, 837, 840, 841, 844, 845, 846, 847, 848, 849, 850, 851, 855, 859, 860, 861, 862, 867, 868, 871, 872, 873, 874, 875, 877, 878, 880, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 895, 897, 898, 899, 902, 904, 907, 909, 910, 913, 914, 917, 918, 921, 922, 925, 926, 929, 930, 933, 934, 937, 938, 941, 942, 943, 946, 948, 951, 964, 965, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998], "torch": [0, 5, 12, 19, 116, 117, 121, 122, 123, 125, 126, 127, 128, 129, 132, 134, 135, 136, 137, 149, 172, 173, 246, 267, 268, 283, 324, 572, 634, 785, 799, 802, 953], "tensorflow": [0, 5, 12, 15, 16, 19, 20, 117, 121, 127, 128, 129, 132, 137, 149, 953], "mxnet": [0, 5, 15, 20, 127, 128, 129, 132, 137, 953], "either": [0, 5, 12, 18, 19, 21, 69, 72, 73, 118, 119, 121, 122, 123, 126, 127, 128, 132, 134, 135, 149, 175, 193, 196, 333, 347, 350, 365, 368, 450, 453, 466, 469, 470, 473, 478, 481, 482, 485, 504, 507, 525, 528, 533, 536, 537, 540, 558, 562, 572, 593, 618, 622, 623, 697, 721, 724, 845, 846, 847, 848, 909, 926, 929, 934, 937, 975, 986, 987, 988], "doesn": [0, 5, 18, 21, 119, 121, 127, 132, 149], "matter": [0, 5, 14, 119], "been": [0, 5, 19, 117, 118, 121, 122, 123, 126, 127, 128, 130, 132, 148, 149, 283, 302, 572, 594, 595, 596, 872, 873], "ivy_np": [0, 5, 121], "us": [0, 5, 12, 15, 16, 17, 19, 20, 23, 37, 38, 67, 68, 69, 72, 73, 74, 75, 76, 83, 84, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 125, 126, 127, 128, 129, 130, 131, 132, 134, 136, 137, 148, 149, 160, 162, 163, 164, 165, 166, 169, 171, 174, 246, 265, 283, 292, 293, 318, 322, 325, 326, 327, 328, 330, 332, 333, 334, 335, 336, 352, 355, 356, 357, 358, 373, 376, 393, 396, 405, 408, 442, 445, 462, 465, 502, 503, 509, 512, 513, 516, 529, 532, 545, 548, 572, 600, 607, 608, 622, 628, 629, 630, 631, 636, 637, 646, 648, 651, 653, 655, 666, 668, 670, 672, 684, 690, 692, 693, 695, 696, 697, 706, 708, 709, 711, 725, 727, 769, 770, 773, 785, 799, 802, 803, 806, 811, 814, 819, 822, 833, 836, 845, 846, 847, 848, 849, 850, 852, 858, 859, 860, 862, 867, 868, 871, 884, 885, 886, 887, 889, 890, 909, 910, 913, 942, 943, 946, 953, 975, 983, 986, 987, 988, 989, 990, 991, 993, 994], "ivy_jax": [0, 5], "subsequ": [0, 6, 18, 117, 119, 121, 122, 125, 129, 136], "call": [0, 6, 12, 15, 21, 23, 69, 74, 75, 116, 117, 118, 119, 121, 122, 123, 124, 125, 126, 127, 128, 129, 132, 134, 135, 136, 137, 149, 283, 327, 572, 627, 632, 643, 646, 657, 849, 850, 855, 859, 860, 975, 986, 987, 988, 991, 995], "nativ": [0, 6, 26, 28, 29, 30, 72, 73, 121, 127, 129, 134, 135, 175, 215, 218, 246, 250, 251, 260, 283, 299, 300, 301, 302, 303, 322, 329, 332, 572, 616, 618, 621, 964, 965], "native_arrai": [0, 6, 12, 31, 32, 39, 40, 77, 78, 85, 86, 121, 160, 162, 163, 164, 165, 166, 169, 171, 175, 210, 213, 246, 255, 258, 283, 305, 321, 333, 334, 337, 352, 355, 356, 359, 373, 376, 393, 396, 397, 400, 430, 433, 442, 445, 462, 465, 502, 503, 509, 512, 513, 516, 545, 548, 549, 552, 563, 567, 572, 573, 574, 575, 576, 577, 581, 589, 590, 597, 600, 601, 604, 635, 640, 641, 642, 646, 648, 651, 684, 687, 690, 691, 696, 697, 703, 705, 706, 708, 709, 711, 754, 756, 769, 770, 773, 780, 783, 785, 786, 789, 799, 802, 803, 806, 811, 814, 824, 833, 836, 867, 868, 871, 872, 873, 884, 885, 886, 887, 888, 889, 890, 891, 895, 909, 910, 913, 914, 917, 942, 943, 946], "1": [0, 6, 12, 15, 16, 21, 33, 34, 37, 38, 39, 40, 41, 42, 47, 48, 49, 50, 51, 52, 53, 54, 59, 60, 61, 62, 69, 72, 73, 74, 75, 77, 78, 79, 80, 83, 84, 85, 86, 87, 88, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 105, 106, 107, 108, 117, 119, 121, 122, 126, 129, 130, 131, 132, 134, 135, 136, 137, 149, 160, 162, 163, 164, 165, 171, 175, 176, 177, 178, 199, 202, 204, 205, 207, 208, 210, 213, 220, 221, 223, 226, 241, 245, 246, 252, 255, 256, 257, 258, 259, 266, 283, 287, 290, 292, 297, 302, 303, 305, 307, 311, 315, 317, 320, 321, 328, 333, 334, 335, 336, 337, 339, 342, 343, 346, 347, 348, 349, 350, 351, 352, 355, 356, 357, 358, 359, 360, 365, 368, 373, 376, 377, 380, 389, 392, 393, 396, 397, 398, 399, 400, 401, 404, 405, 408, 422, 425, 426, 429, 430, 431, 432, 433, 438, 441, 442, 445, 458, 461, 462, 465, 466, 469, 470, 473, 474, 477, 478, 481, 502, 503, 509, 512, 513, 516, 521, 524, 529, 532, 533, 536, 537, 540, 545, 548, 549, 552, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 572, 573, 574, 575, 576, 577, 580, 581, 589, 590, 597, 600, 601, 602, 603, 604, 605, 619, 625, 628, 629, 634, 635, 637, 640, 641, 642, 644, 646, 648, 649, 650, 651, 652, 684, 685, 686, 687, 688, 689, 690, 691, 692, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 708, 709, 710, 711, 718, 720, 729, 731, 735, 737, 745, 747, 748, 750, 754, 756, 757, 759, 760, 761, 762, 763, 765, 769, 770, 773, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 794, 799, 802, 803, 806, 807, 810, 811, 814, 815, 818, 819, 820, 821, 822, 823, 824, 825, 828, 829, 832, 833, 836, 849, 861, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 913, 914, 917, 930, 933, 934, 937, 938, 941, 942, 943, 946, 948, 951, 953, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 995, 997, 998], "type": [0, 6, 12, 18, 20, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 37, 38, 39, 40, 41, 42, 47, 48, 49, 50, 51, 52, 53, 54, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 83, 84, 85, 86, 87, 88, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 121, 124, 125, 126, 128, 129, 130, 132, 134, 135, 137, 150, 151, 152, 153, 154, 155, 156, 157, 158, 160, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 278, 282, 283, 299, 300, 301, 302, 303, 305, 315, 316, 317, 318, 319, 320, 321, 322, 324, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 575, 576, 577, 578, 580, 581, 583, 584, 585, 587, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 607, 608, 609, 611, 612, 614, 615, 616, 618, 619, 620, 621, 625, 628, 629, 630, 631, 634, 636, 637, 638, 640, 641, 642, 644, 645, 646, 648, 649, 650, 651, 652, 653, 655, 656, 658, 660, 661, 662, 663, 664, 665, 666, 668, 669, 670, 672, 673, 674, 675, 676, 677, 679, 681, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 855, 859, 860, 861, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986], "ndarrai": [0, 6, 117, 125, 127, 128, 129, 134, 175, 179, 182, 215, 218, 572, 641], "Or": [0, 6, 135], "jaxlib": [0, 6, 18, 117, 127, 128, 134], "xla_extens": [0, 6, 117, 127, 128, 134], "devicearrai": [0, 6, 134], "try_import_ivy_jax": 0, "warn": [0, 7, 8, 9, 10, 11], "fals": [0, 7, 8, 9, 10, 11, 23, 26, 27, 28, 29, 30, 39, 40, 47, 48, 61, 62, 63, 64, 65, 66, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 119, 121, 126, 129, 130, 135, 136, 137, 166, 168, 170, 176, 178, 179, 181, 183, 185, 187, 189, 190, 192, 193, 195, 197, 199, 201, 203, 204, 206, 207, 209, 210, 212, 214, 215, 217, 219, 220, 222, 223, 225, 227, 228, 229, 231, 233, 234, 236, 238, 239, 241, 242, 244, 246, 252, 255, 257, 258, 259, 264, 283, 302, 303, 314, 318, 319, 322, 327, 330, 332, 333, 334, 336, 338, 339, 341, 343, 345, 347, 349, 351, 352, 354, 356, 358, 360, 361, 363, 365, 367, 369, 371, 373, 375, 376, 377, 379, 381, 383, 385, 387, 389, 391, 393, 395, 397, 399, 401, 403, 405, 407, 409, 411, 413, 414, 416, 418, 420, 422, 424, 426, 428, 430, 432, 434, 436, 438, 440, 441, 442, 444, 445, 446, 448, 449, 450, 452, 453, 454, 456, 457, 458, 460, 461, 462, 464, 465, 466, 468, 470, 472, 474, 476, 478, 480, 482, 484, 486, 488, 490, 492, 493, 494, 496, 497, 498, 500, 504, 506, 508, 509, 511, 513, 515, 516, 517, 519, 521, 523, 525, 527, 529, 531, 533, 535, 537, 539, 541, 543, 545, 547, 549, 551, 553, 554, 556, 558, 559, 561, 563, 564, 566, 568, 570, 572, 573, 574, 575, 576, 577, 580, 581, 585, 586, 590, 593, 597, 599, 601, 603, 605, 609, 616, 618, 619, 621, 622, 634, 644, 646, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 683, 697, 698, 699, 700, 701, 702, 721, 723, 725, 726, 727, 748, 750, 763, 764, 765, 770, 772, 774, 775, 777, 779, 780, 782, 784, 785, 786, 788, 790, 791, 793, 795, 797, 799, 801, 803, 805, 807, 809, 811, 813, 815, 817, 819, 821, 823, 824, 825, 827, 829, 831, 833, 835, 837, 839, 841, 843, 845, 846, 847, 848, 849, 850, 851, 855, 859, 860, 861, 862, 868, 870, 872, 873, 878, 879, 881, 884, 885, 886, 888, 889, 890, 891, 892, 894, 895, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 912, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 964, 965, 987, 988, 991, 992, 993, 994, 995, 996], "try_import_ivy_mxnet": 0, "try_import_ivy_numpi": 0, "try_import_ivy_tf": 0, "try_import_ivy_torch": 0, "unset_backend": [0, 123], "unset": [0, 12, 123, 132, 134], "adjust": [0, 12, 909, 930, 933, 938, 941], "dict": [0, 12, 26, 27, 28, 29, 30, 69, 72, 73, 74, 75, 76, 126, 130, 135, 136, 283, 292, 293, 302, 305, 308, 309, 310, 311, 572, 578, 594, 595, 596, 849, 851, 852, 855, 858, 861, 862], "previous": [0, 12, 18, 21, 121, 122, 132, 572, 583], "otherwis": [0, 12, 23, 26, 27, 28, 29, 30, 69, 72, 73, 117, 121, 125, 127, 128, 132, 134, 175, 176, 177, 246, 252, 255, 258, 261, 262, 263, 283, 302, 333, 446, 449, 450, 453, 454, 457, 572, 582, 643, 646, 662, 664, 679, 697, 698, 701, 706, 708, 760, 762, 763, 765, 845, 846, 847, 849, 862, 884, 885, 886, 888, 909, 914, 917, 918, 921, 922, 925, 926, 929, 930, 933, 934, 937, 938, 941, 942, 943, 946, 948, 951], "implement": [0, 12, 20, 23, 69, 117, 118, 121, 122, 123, 124, 125, 126, 127, 128, 129, 132, 134, 135, 136, 137, 148, 149, 246, 252, 274, 283, 328, 333, 334, 337, 339, 342, 343, 346, 352, 355, 356, 359, 361, 364, 365, 368, 401, 404, 405, 408, 422, 425, 426, 429, 466, 469, 470, 473, 474, 477, 478, 481, 504, 507, 521, 524, 525, 528, 537, 540, 541, 544, 558, 562, 563, 567, 697, 712, 714, 889, 890, 891, 895, 897, 898, 899, 902, 904, 907, 909, 914, 917, 918, 921, 922, 925, 953], "wa": [0, 12, 15, 72, 73, 119, 132, 134, 572, 643, 849, 862, 909, 914, 917, 918, 921, 922, 925, 926, 929, 930, 933, 934, 937, 938, 941, 942, 943, 946, 948, 951], "last": [0, 12, 16, 19, 69, 72, 73, 119, 121, 123, 130, 149, 160, 165, 283, 302, 646, 683, 684, 694, 697, 703, 705, 709, 711, 725, 727, 757, 759, 760, 762, 769, 775, 778, 780, 783, 785, 803, 806, 819, 822, 824, 829, 832, 898, 899, 902, 904, 907, 942, 943, 946, 948, 951, 975, 985], "henc": [0, 12, 121, 889, 890, 891, 895, 897], "here": [0, 12, 18, 19, 20, 116, 117, 119, 121, 126, 132, 133, 134, 135, 136, 137, 148, 149], "tensor": [0, 12, 14, 72, 73, 116, 117, 122, 123, 125, 127, 128, 129, 132, 134, 135, 136, 137, 149, 175, 204, 205, 207, 208, 246, 264, 333, 373, 376, 502, 503, 572, 625, 628, 629, 684, 692, 694, 697, 754, 756, 785, 799, 802, 815, 818, 824, 872, 873, 884, 887, 953, 975, 983, 985], "howev": [0, 12, 15, 18, 20, 117, 118, 121, 122, 123, 125, 126, 127, 128, 129, 134, 135, 136, 137, 149], "befor": [0, 12, 18, 19, 20, 72, 73, 118, 121, 125, 127, 128, 129, 132, 135, 149, 283, 327, 333, 568, 571, 684, 695, 696, 845, 846, 847, 849, 861, 889, 890, 891, 895, 897, 909, 926, 929, 934, 937], "becom": [0, 12, 14, 16, 19, 119, 126, 132, 137, 149, 785, 786, 789], "swap": [0, 12, 785, 833, 836], "python": [0, 12, 13, 14, 15, 18, 19, 21, 121, 130, 132, 134, 135, 149, 175, 176, 177, 283, 322, 332, 333, 525, 528, 953, 959], "framework": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 14, 15, 16, 25, 26, 27, 28, 29, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 71, 72, 73, 75, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94, 96, 98, 100, 102, 104, 106, 108, 110, 112, 114, 115, 117, 120, 122, 123, 124, 125, 128, 131, 134, 137, 148, 149, 151, 152, 153, 154, 155, 156, 157, 158, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 846, 847, 848, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 868, 869, 870, 871, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 885, 886, 887, 888, 890, 891, 892, 893, 894, 895, 896, 897, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 957, 958, 959, 962, 963, 964, 965, 967, 968, 969, 970, 971, 972, 973, 974, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 988, 990, 991, 992, 993, 994, 995, 996, 998, 999, 1001], "op": [0, 12, 116, 132, 149], "eagertensor": [0, 12], "def": [1, 20, 116, 117, 119, 121, 122, 126, 127, 128, 129, 130, 132, 134, 135, 136, 137, 247, 248, 249, 284, 291, 294, 647, 953, 967, 970, 973], "support": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 14, 15, 16, 25, 27, 28, 29, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 71, 72, 73, 75, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94, 96, 98, 100, 102, 104, 106, 108, 110, 112, 114, 117, 118, 119, 121, 122, 124, 125, 126, 127, 128, 129, 131, 132, 134, 135, 137, 151, 152, 153, 154, 155, 156, 157, 158, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 173, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 846, 847, 848, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 868, 869, 870, 871, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 885, 886, 887, 888, 890, 891, 892, 893, 894, 895, 896, 897, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 957, 958, 959, 962, 963, 965, 967, 968, 969, 970, 971, 972, 973, 974, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 988, 990, 991, 992, 993, 994, 995, 996, 998, 999, 1001], "backend": [4, 5, 6, 12, 14, 19, 20, 26, 28, 30, 72, 73, 115, 117, 118, 120, 121, 122, 124, 125, 126, 127, 128, 129, 133, 134, 137, 246, 267, 268, 270, 282, 283, 318, 320, 330, 572, 613, 616, 617, 623, 646, 653, 655, 658, 660, 666, 668, 670, 672, 674, 676, 682, 953, 959, 964, 965, 991, 992, 993, 994, 995, 996], "ml": [13, 15, 16, 17, 131, 132, 133, 135, 136, 137, 148, 953, 959], "explos": [13, 15, 953], "A": [13, 14, 15, 16, 21, 72, 73, 74, 75, 76, 115, 121, 122, 126, 127, 128, 132, 135, 149, 175, 190, 191, 215, 218, 283, 292, 293, 327, 333, 517, 520, 572, 608, 640, 697, 735, 737, 744, 745, 747, 748, 750, 785, 824, 829, 832, 849, 850, 852, 854, 856, 857, 858, 859, 860, 863, 864, 865, 866, 909, 910, 913, 942, 943, 946, 948, 951, 953, 997, 998], "huge": [13, 15, 135, 953], "number": [13, 14, 18, 72, 73, 74, 75, 76, 119, 121, 126, 128, 129, 132, 135, 137, 172, 173, 174, 175, 176, 177, 179, 182, 190, 191, 204, 205, 207, 208, 210, 213, 215, 218, 246, 253, 265, 266, 269, 271, 272, 274, 283, 319, 320, 321, 333, 347, 350, 365, 368, 397, 400, 430, 433, 434, 437, 502, 503, 504, 507, 521, 524, 525, 528, 529, 532, 533, 536, 568, 571, 572, 573, 576, 599, 608, 609, 624, 642, 645, 684, 695, 697, 709, 711, 712, 714, 729, 731, 744, 748, 750, 760, 762, 785, 786, 789, 795, 798, 807, 810, 811, 814, 819, 822, 824, 829, 832, 837, 840, 841, 844, 845, 846, 847, 848, 872, 873, 882, 884, 887, 889, 890, 891, 895, 909, 914, 917, 918, 921, 922, 925, 926, 929, 930, 933, 934, 937, 938, 941, 942, 943, 946, 948, 951, 953, 975, 976, 977, 978, 979, 980, 981, 982, 984, 985, 986], "tool": [13, 16, 19, 133, 137, 148, 149, 953], "have": [13, 14, 15, 16, 18, 19, 20, 21, 72, 73, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 132, 133, 134, 135, 136, 137, 148, 149, 160, 161, 162, 163, 164, 165, 166, 169, 171, 175, 176, 177, 179, 182, 184, 185, 188, 190, 191, 193, 196, 198, 199, 202, 204, 205, 207, 208, 210, 213, 220, 221, 223, 226, 228, 232, 233, 237, 238, 240, 241, 245, 246, 252, 253, 254, 266, 283, 328, 333, 334, 337, 339, 342, 343, 346, 347, 350, 352, 355, 356, 359, 361, 364, 365, 368, 369, 372, 373, 376, 377, 380, 381, 384, 385, 388, 389, 392, 393, 396, 397, 400, 401, 404, 405, 408, 409, 412, 414, 417, 418, 421, 422, 425, 426, 429, 430, 433, 434, 437, 438, 441, 442, 445, 446, 449, 450, 453, 454, 457, 458, 461, 462, 465, 466, 469, 470, 473, 474, 477, 478, 481, 482, 485, 486, 489, 490, 493, 494, 497, 498, 501, 502, 503, 504, 507, 509, 512, 513, 516, 517, 520, 521, 524, 525, 528, 529, 532, 533, 536, 537, 540, 541, 544, 545, 548, 549, 552, 553, 557, 558, 562, 563, 567, 568, 571, 572, 584, 585, 587, 590, 594, 595, 596, 598, 601, 604, 612, 625, 628, 629, 646, 662, 664, 679, 682, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 695, 696, 697, 698, 701, 703, 705, 706, 708, 709, 711, 712, 714, 715, 717, 718, 720, 721, 724, 725, 727, 729, 731, 732, 734, 735, 737, 738, 740, 741, 743, 744, 745, 747, 748, 750, 751, 753, 754, 756, 757, 759, 760, 762, 763, 765, 766, 768, 769, 770, 773, 775, 778, 780, 783, 785, 786, 789, 791, 794, 795, 798, 799, 802, 803, 806, 807, 810, 811, 814, 815, 818, 819, 822, 825, 828, 829, 832, 833, 836, 837, 840, 841, 844, 867, 868, 871, 872, 873, 874, 875, 877, 878, 880, 883, 884, 885, 886, 887, 888, 889, 890, 891, 895, 897, 898, 899, 902, 904, 907, 909, 914, 917, 918, 921, 922, 925, 926, 929, 930, 933, 934, 937, 938, 941, 942, 943, 946, 948, 951, 953], "explod": [13, 14, 953], "onto": [13, 14, 283, 312, 313, 849, 855, 861, 953], "scene": [13, 14, 115, 131, 133, 646, 653, 655, 658, 660, 666, 668, 670, 672, 674, 676, 953], "b": [13, 16, 17, 74, 75, 79, 80, 83, 84, 85, 86, 87, 88, 93, 94, 97, 98, 101, 102, 105, 106, 115, 119, 122, 123, 126, 131, 132, 133, 135, 136, 137, 147, 246, 255, 257, 258, 259, 283, 305, 333, 334, 336, 337, 338, 347, 349, 350, 351, 352, 355, 356, 358, 359, 360, 373, 376, 393, 396, 397, 399, 400, 405, 408, 430, 432, 433, 442, 445, 462, 465, 509, 512, 513, 516, 529, 532, 545, 548, 549, 552, 558, 559, 561, 562, 563, 564, 566, 567, 572, 573, 575, 576, 577, 580, 581, 589, 590, 597, 600, 601, 603, 604, 605, 642, 646, 648, 650, 651, 652, 684, 687, 690, 691, 696, 697, 698, 700, 701, 702, 703, 705, 706, 708, 709, 711, 735, 737, 745, 747, 754, 756, 766, 768, 769, 770, 773, 785, 786, 788, 789, 790, 799, 802, 803, 806, 811, 814, 819, 821, 822, 823, 829, 832, 833, 836, 867, 868, 871, 872, 874, 876, 877, 878, 880, 884, 886, 887, 888, 889, 891, 892, 894, 895, 898, 899, 902, 909, 910, 913, 914, 917, 942, 943, 946, 953, 959], "why": [13, 15, 19, 117, 126, 129, 134, 953], "unifi": [13, 15, 72, 73, 125, 132, 149, 283, 312, 313, 314, 315, 327, 953], "should": [13, 15, 18, 19, 20, 21, 23, 69, 72, 73, 74, 75, 76, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 134, 135, 136, 172, 173, 175, 210, 213, 228, 232, 233, 237, 246, 254, 283, 333, 334, 337, 339, 342, 343, 346, 347, 350, 352, 355, 356, 359, 361, 364, 365, 368, 369, 372, 373, 376, 377, 380, 381, 384, 385, 388, 389, 392, 393, 396, 397, 400, 401, 404, 405, 408, 409, 412, 422, 425, 426, 429, 430, 433, 446, 449, 450, 453, 454, 457, 458, 461, 466, 469, 470, 473, 478, 481, 482, 485, 486, 489, 490, 493, 494, 497, 498, 501, 504, 507, 513, 516, 521, 524, 525, 528, 533, 536, 537, 540, 541, 544, 545, 548, 549, 552, 553, 557, 558, 562, 563, 567, 568, 571, 572, 583, 616, 625, 646, 653, 655, 658, 660, 666, 668, 670, 672, 674, 676, 684, 696, 697, 698, 701, 703, 705, 706, 708, 709, 711, 718, 720, 721, 724, 729, 731, 735, 737, 738, 740, 741, 743, 745, 747, 748, 750, 754, 756, 757, 759, 760, 762, 763, 765, 785, 815, 818, 872, 883, 884, 885, 886, 889, 890, 891, 895, 897, 909, 910, 913, 914, 917, 918, 921, 926, 929, 930, 933, 934, 937, 938, 941, 953], "them": [13, 14, 15, 16, 121, 123, 125, 126, 132, 134, 135, 136, 149, 953], "c": [13, 15, 16, 17, 101, 102, 115, 119, 122, 126, 131, 132, 133, 135, 149, 333, 513, 516, 572, 580, 581, 589, 642, 646, 648, 651, 653, 655, 658, 660, 666, 668, 670, 672, 674, 676, 684, 690, 785, 829, 832, 874, 876, 884, 887, 909, 910, 913, 930, 933, 938, 941, 953, 959], "standard": [13, 23, 115, 116, 117, 118, 120, 121, 125, 129, 149, 175, 176, 177, 179, 182, 184, 185, 188, 190, 191, 193, 196, 198, 199, 202, 204, 205, 210, 213, 220, 221, 223, 226, 228, 232, 233, 237, 238, 240, 241, 245, 246, 255, 258, 266, 333, 334, 337, 347, 350, 352, 355, 356, 359, 373, 376, 393, 396, 397, 400, 405, 408, 430, 433, 462, 465, 513, 516, 529, 532, 545, 548, 549, 552, 558, 562, 563, 567, 697, 706, 708, 709, 711, 785, 799, 802, 803, 806, 819, 822, 867, 868, 871, 872, 877, 889, 890, 891, 895, 898, 899, 902, 909, 914, 917, 930, 933, 938, 941, 942, 943, 946, 953, 959, 989, 990], "re": [13, 14, 15, 17, 18, 19, 20, 21, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 134, 137, 149, 283, 327, 572, 594, 697, 754, 756, 785, 819, 822, 884, 888, 953], "collabor": [13, 14, 15, 953], "consortium": [13, 15, 953, 959], "data": [13, 15, 72, 73, 74, 75, 76, 115, 116, 117, 118, 122, 124, 126, 128, 129, 134, 175, 176, 177, 179, 182, 184, 185, 188, 190, 191, 193, 196, 198, 199, 202, 204, 205, 210, 213, 215, 218, 220, 221, 223, 226, 228, 232, 233, 237, 238, 240, 241, 245, 250, 251, 252, 254, 255, 258, 260, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 278, 282, 283, 285, 286, 287, 288, 289, 290, 295, 296, 297, 299, 333, 334, 337, 339, 342, 343, 346, 347, 350, 352, 355, 356, 359, 361, 364, 365, 368, 369, 372, 373, 376, 377, 380, 381, 384, 385, 388, 389, 392, 393, 396, 397, 400, 401, 404, 405, 408, 409, 412, 414, 417, 422, 425, 426, 429, 430, 433, 434, 437, 438, 441, 442, 445, 446, 449, 450, 453, 454, 457, 458, 461, 462, 465, 466, 469, 470, 473, 478, 481, 482, 485, 486, 489, 490, 493, 494, 497, 498, 501, 504, 507, 513, 516, 521, 524, 525, 528, 533, 536, 537, 540, 541, 544, 545, 548, 549, 552, 553, 557, 558, 562, 563, 567, 568, 571, 572, 580, 581, 618, 619, 621, 638, 646, 662, 664, 682, 684, 693, 697, 698, 701, 703, 705, 706, 708, 709, 711, 712, 714, 715, 717, 718, 720, 721, 724, 729, 731, 732, 734, 735, 737, 738, 740, 741, 743, 745, 747, 748, 750, 754, 756, 757, 759, 760, 762, 763, 765, 785, 799, 802, 803, 806, 807, 810, 815, 818, 819, 822, 825, 828, 829, 832, 872, 883, 884, 885, 886, 887, 898, 899, 902, 909, 914, 917, 918, 921, 922, 925, 926, 929, 930, 933, 934, 937, 938, 941, 942, 943, 946, 948, 951, 953, 959, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986], "api": [13, 14, 18, 19, 115, 117, 118, 119, 121, 122, 124, 125, 127, 128, 129, 131, 133, 135, 149, 175, 176, 177, 179, 182, 184, 185, 188, 190, 191, 193, 196, 198, 199, 202, 204, 205, 210, 213, 220, 221, 223, 226, 228, 232, 233, 237, 238, 240, 241, 245, 246, 255, 258, 333, 334, 337, 347, 350, 352, 355, 356, 359, 373, 376, 393, 396, 397, 400, 405, 408, 430, 433, 462, 465, 513, 516, 529, 532, 545, 548, 549, 552, 558, 562, 563, 567, 697, 706, 708, 709, 711, 785, 799, 802, 803, 806, 819, 822, 889, 890, 891, 895, 898, 899, 902, 909, 914, 917, 942, 943, 946, 953, 959], "open": [14, 15, 16, 17, 18, 21, 118, 148, 175, 176, 177, 872, 874, 875, 878, 880, 953], "project": [14, 15, 16, 18, 19, 21, 116, 121, 123, 134, 136, 148, 149, 872, 873, 877], "grown": 14, "consider": [14, 117, 119], "recent": [14, 15, 18, 19, 121], "year": [14, 16, 149, 953], "especi": [14, 18], "deep": [14, 17, 19, 20, 72, 73, 131, 135, 953], "learn": [14, 15, 18, 20, 115, 122, 131, 137, 148, 333, 438, 441, 646, 653, 655, 658, 660, 666, 668, 670, 672, 674, 676, 845, 846, 847, 848, 953, 991, 992, 993, 994, 995, 996], "can": [14, 15, 16, 17, 18, 19, 23, 69, 115, 116, 117, 118, 119, 120, 121, 122, 123, 126, 127, 128, 129, 130, 131, 132, 134, 135, 136, 137, 148, 149, 175, 179, 182, 215, 218, 246, 255, 258, 283, 325, 326, 327, 697, 718, 720, 785, 815, 818, 872, 874, 875, 953, 959], "seen": [14, 15, 119, 121, 134, 135], "rapidli": 14, "increas": [14, 283, 307, 311, 315, 785, 795, 798, 841, 844, 849, 861], "github": [14, 19, 20, 118, 121], "repo": [14, 15, 16, 18, 19, 120, 132, 134, 135, 136, 137, 148, 953, 959], "contain": [14, 18, 19, 20, 21, 26, 29, 30, 39, 40, 70, 71, 72, 73, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 117, 118, 119, 121, 122, 127, 129, 131, 132, 133, 136, 137, 149, 160, 163, 164, 166, 169, 175, 176, 177, 179, 182, 184, 185, 188, 190, 191, 193, 196, 198, 199, 202, 204, 205, 207, 208, 210, 213, 215, 220, 221, 223, 226, 228, 232, 233, 237, 238, 240, 241, 245, 246, 255, 258, 283, 304, 305, 308, 317, 321, 333, 334, 337, 339, 342, 343, 346, 347, 350, 352, 355, 356, 359, 361, 364, 365, 368, 369, 372, 373, 376, 377, 380, 381, 384, 385, 388, 389, 392, 393, 396, 397, 400, 401, 404, 405, 408, 409, 412, 414, 417, 418, 422, 425, 426, 429, 430, 433, 434, 437, 438, 441, 442, 445, 446, 449, 450, 453, 454, 457, 458, 461, 462, 465, 466, 469, 470, 473, 474, 477, 478, 481, 482, 485, 486, 489, 490, 493, 494, 497, 498, 501, 502, 503, 504, 507, 509, 512, 513, 516, 517, 521, 524, 525, 528, 529, 532, 533, 536, 537, 540, 541, 544, 545, 548, 549, 552, 553, 557, 558, 562, 563, 567, 568, 571, 572, 573, 574, 576, 578, 581, 584, 585, 587, 589, 590, 597, 600, 601, 604, 611, 620, 640, 641, 642, 646, 648, 651, 653, 658, 662, 666, 670, 674, 684, 687, 690, 691, 696, 697, 698, 701, 703, 705, 706, 708, 709, 711, 712, 714, 715, 717, 718, 720, 721, 724, 729, 731, 732, 734, 735, 737, 738, 740, 741, 743, 745, 747, 748, 750, 751, 753, 754, 756, 757, 759, 760, 762, 763, 765, 769, 770, 773, 775, 778, 780, 783, 785, 786, 789, 791, 795, 799, 802, 803, 806, 807, 810, 811, 814, 815, 819, 822, 824, 825, 829, 833, 836, 837, 841, 845, 846, 847, 848, 849, 862, 867, 868, 871, 872, 873, 874, 877, 878, 880, 884, 885, 886, 887, 888, 889, 890, 891, 895, 897, 898, 899, 902, 904, 909, 910, 913, 914, 917, 918, 921, 922, 925, 926, 929, 930, 933, 934, 937, 938, 941, 942, 943, 946, 948, 951, 953, 975, 976, 977, 978, 979, 980, 981, 982, 984, 985, 986, 987, 988, 991, 995, 997, 998], "term": [14, 19, 126, 684, 694, 975, 985], "time": [14, 15, 16, 18, 19, 20, 117, 121, 122, 126, 127, 132, 135, 137, 149, 646, 653, 655, 666, 668, 684, 694, 785, 837, 840, 845, 846, 847, 848, 884, 885, 886, 889, 890, 891, 895, 975, 986, 987, 988], "These": [14, 15, 16, 19, 117, 118, 119, 121, 122, 126, 127, 129, 132, 133, 135, 136, 137, 149, 697, 712, 714, 953, 959], "ar": [14, 15, 16, 17, 18, 19, 20, 21, 26, 27, 28, 69, 72, 73, 74, 75, 76, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 148, 149, 150, 158, 175, 176, 177, 283, 292, 293, 317, 321, 323, 327, 333, 401, 404, 490, 493, 494, 497, 529, 532, 537, 540, 558, 562, 572, 573, 576, 580, 581, 582, 606, 612, 613, 617, 624, 626, 638, 646, 683, 684, 693, 697, 703, 705, 721, 724, 725, 727, 729, 731, 738, 740, 748, 750, 751, 753, 760, 762, 785, 786, 789, 803, 806, 819, 822, 849, 851, 855, 861, 872, 877, 878, 880, 884, 885, 886, 887, 889, 890, 953, 997, 998], "written": [14, 18, 116, 117, 118, 121, 125, 129, 132, 134, 137, 149], "mani": [14, 15, 16, 18, 19, 20, 72, 73, 117, 118, 119, 121, 122, 124, 125, 126, 127, 128, 129, 130, 132, 134, 135, 149, 785, 824], "differ": [14, 15, 16, 18, 19, 72, 73, 74, 75, 76, 115, 116, 117, 118, 119, 121, 122, 125, 126, 128, 129, 130, 132, 133, 134, 135, 136, 137, 149, 246, 266, 283, 304, 305, 308, 309, 333, 347, 350, 504, 507, 553, 557, 684, 693, 785, 829, 832, 909, 926, 929, 934, 937, 953], "while": [14, 15, 18, 19, 72, 73, 74, 75, 76, 119, 121, 123, 129, 130, 136, 137, 149, 333, 490, 493, 494, 497, 889, 890, 909, 918, 921], "thi": [14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 47, 48, 51, 52, 59, 60, 69, 70, 71, 72, 73, 74, 75, 76, 79, 80, 83, 84, 85, 86, 87, 88, 93, 94, 97, 98, 101, 102, 105, 106, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 148, 149, 166, 167, 168, 170, 175, 176, 177, 179, 180, 182, 184, 185, 186, 188, 190, 191, 193, 194, 196, 198, 199, 200, 202, 204, 205, 207, 208, 210, 213, 215, 216, 218, 220, 221, 223, 224, 226, 228, 230, 232, 233, 235, 237, 238, 240, 241, 243, 245, 246, 255, 256, 257, 258, 259, 283, 307, 311, 315, 322, 327, 332, 333, 334, 335, 336, 337, 338, 347, 348, 349, 350, 351, 352, 355, 356, 357, 358, 359, 360, 373, 376, 389, 392, 393, 396, 397, 398, 399, 400, 405, 408, 426, 429, 430, 431, 432, 433, 462, 465, 490, 493, 494, 497, 513, 516, 525, 528, 529, 532, 545, 548, 549, 552, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 572, 573, 574, 575, 577, 599, 600, 601, 602, 603, 605, 616, 627, 632, 646, 648, 649, 650, 652, 653, 655, 658, 660, 662, 664, 666, 668, 670, 672, 674, 676, 682, 683, 684, 687, 693, 696, 697, 698, 699, 700, 701, 702, 706, 708, 709, 711, 725, 727, 744, 785, 786, 787, 788, 790, 799, 802, 803, 806, 815, 818, 819, 820, 821, 822, 823, 829, 832, 849, 855, 861, 862, 867, 868, 871, 874, 876, 884, 885, 889, 890, 891, 892, 893, 894, 895, 897, 898, 899, 902, 909, 914, 917, 918, 921, 930, 933, 938, 941, 942, 943, 946, 953, 959, 987, 988, 991, 992, 993, 994, 995, 996], "wonder": [14, 16, 134], "thing": [14, 15, 16, 18, 19, 20, 121, 123, 134, 135], "research": [14, 148], "develop": [14, 15, 16, 17, 18, 19, 20, 148, 149, 953], "also": [14, 15, 17, 18, 19, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 47, 48, 51, 52, 59, 60, 70, 71, 72, 73, 79, 80, 83, 84, 85, 86, 87, 88, 93, 94, 97, 98, 101, 102, 105, 106, 115, 116, 117, 118, 119, 121, 122, 124, 125, 126, 127, 128, 129, 132, 134, 135, 136, 137, 148, 149, 166, 167, 168, 170, 175, 176, 177, 179, 180, 182, 184, 185, 186, 188, 190, 191, 193, 194, 196, 198, 199, 200, 202, 204, 205, 207, 208, 210, 213, 215, 216, 220, 221, 223, 224, 226, 228, 230, 232, 233, 235, 237, 238, 240, 241, 243, 245, 246, 255, 256, 257, 258, 259, 333, 334, 335, 336, 337, 338, 347, 348, 349, 350, 351, 352, 355, 356, 357, 358, 359, 360, 373, 376, 393, 396, 397, 398, 399, 400, 405, 408, 430, 431, 432, 433, 513, 516, 529, 532, 545, 548, 549, 552, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 572, 573, 574, 575, 577, 600, 601, 602, 603, 605, 616, 646, 648, 649, 650, 652, 653, 655, 684, 687, 693, 696, 697, 698, 699, 700, 701, 702, 706, 708, 709, 711, 785, 786, 787, 788, 790, 799, 802, 803, 806, 819, 820, 821, 822, 823, 845, 846, 847, 848, 849, 850, 851, 859, 860, 861, 867, 868, 871, 874, 876, 889, 890, 891, 892, 893, 894, 895, 898, 899, 902, 909, 914, 917, 942, 943, 946, 975, 985], "consid": [14, 15, 72, 73, 116, 122, 133, 134, 135, 333, 490, 493, 494, 497, 889, 890, 891, 895, 897], "speed": [14, 121], "evolv": 14, "sharabl": 14, "code": [14, 15, 16, 18, 19, 20, 21, 72, 73, 74, 75, 76, 87, 88, 115, 117, 118, 119, 121, 122, 123, 124, 125, 126, 129, 130, 131, 132, 133, 134, 135, 136, 137, 147, 149, 160, 162, 163, 164, 165, 166, 169, 171, 283, 305, 328, 333, 393, 396, 549, 552, 646, 648, 650, 651, 652, 683, 684, 690, 691, 889, 890, 891, 895, 898, 899, 902, 909, 910, 913, 953, 959], "significantli": 14, "hinder": [14, 117], "librari": [14, 15, 16, 132, 137, 147, 149, 283, 328, 333, 426, 429, 490, 493, 494, 497, 697, 712, 714, 889, 890, 891, 895, 897, 909, 914, 917, 918, 921, 922, 925, 953], "outdat": 14, "month": 14, "rigor": [14, 121], "maintain": [14, 19, 898, 899, 902, 904, 907], "against": [14, 72, 73, 121, 149, 246, 253, 697, 721, 724, 725, 727, 729, 731, 738, 740, 884, 885], "newest": 14, "version": [14, 15, 16, 18, 118, 132, 134, 697, 712, 714, 953], "For": [14, 15, 16, 18, 19, 20, 21, 69, 115, 116, 117, 118, 119, 121, 122, 123, 124, 125, 126, 127, 128, 129, 132, 134, 135, 136, 137, 148, 149, 175, 176, 177, 210, 213, 333, 334, 337, 339, 342, 343, 346, 347, 350, 352, 355, 356, 359, 361, 364, 365, 368, 397, 400, 401, 404, 405, 408, 422, 425, 426, 429, 430, 433, 466, 469, 470, 473, 478, 481, 482, 485, 504, 507, 521, 524, 525, 528, 529, 532, 537, 540, 541, 544, 545, 548, 558, 562, 563, 567, 568, 571, 646, 662, 664, 682, 697, 748, 750, 757, 759, 785, 786, 789, 829, 832, 889, 890, 891, 895, 897, 909, 914, 917, 922, 925, 934, 937, 964, 965], "softwar": [14, 15, 18, 19], "pipelin": [14, 125, 137], "where": [14, 15, 16, 17, 18, 19, 20, 21, 72, 73, 74, 75, 118, 121, 122, 123, 125, 126, 127, 128, 129, 130, 132, 135, 136, 137, 149, 175, 198, 199, 202, 210, 213, 333, 365, 368, 422, 425, 474, 477, 504, 507, 521, 524, 572, 612, 616, 625, 646, 683, 697, 712, 714, 729, 731, 738, 740, 741, 743, 748, 750, 751, 753, 757, 759, 760, 762, 785, 786, 789, 795, 798, 799, 802, 807, 810, 829, 832, 841, 844, 849, 850, 860, 872, 873, 884, 887, 909, 930, 933, 938, 941, 942, 943, 946, 948, 951, 953], "rapid": [14, 15, 18], "prototyp": 14, "vital": [14, 137], "signific": [14, 15, 149], "bottleneck": 14, "As": [14, 19, 67, 68, 113, 114, 117, 121, 122, 125, 126, 127, 128, 129, 132, 134, 135, 136, 149, 889, 890, 891, 895, 897], "new": [14, 15, 16, 17, 18, 19, 20, 21, 23, 69, 72, 73, 115, 116, 118, 119, 121, 124, 126, 127, 129, 131, 134, 137, 148, 175, 184, 193, 196, 198, 199, 202, 220, 221, 223, 226, 238, 240, 241, 245, 246, 278, 333, 369, 372, 474, 477, 517, 520, 572, 594, 595, 596, 599, 600, 601, 604, 628, 629, 630, 631, 636, 637, 646, 653, 655, 658, 660, 666, 668, 670, 672, 674, 676, 785, 799, 802, 815, 818, 829, 832, 849, 854, 865, 866, 867, 868, 871, 953, 964, 965, 975, 985, 989, 990, 991, 992, 993, 994, 995, 996], "futur": [14, 16, 18, 19, 134, 149, 697, 712, 714], "avail": [14, 18, 19, 72, 73, 118, 128, 149, 283, 302, 318, 319, 320, 330, 572, 595], "specif": [14, 20, 72, 73, 117, 121, 122, 125, 126, 127, 128, 129, 132, 133, 134, 136, 137, 148, 149, 246, 274, 283, 325, 328, 333, 490, 493, 494, 497, 572, 594, 595, 596, 623, 697, 712, 714, 754, 756, 785, 829, 832, 845, 846, 847, 848, 872, 873, 909, 914, 917, 918, 921, 922, 925, 953, 956, 958, 959, 987, 988], "quickli": [14, 16, 18, 19, 135, 136], "obsolet": [14, 16], "user": [14, 15, 18, 19, 21, 115, 121, 123, 126, 129, 131, 149, 975, 986, 987, 988], "constantli": 14, "invent": 14, "wheel": 14, "our": [14, 15, 17, 18, 19, 67, 68, 113, 114, 119, 121, 126, 130, 131, 134, 135, 136, 137, 149, 953], "desir": [14, 72, 73, 246, 252, 255, 258, 283, 328, 572, 612, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986], "provid": [14, 18, 19, 23, 69, 72, 73, 117, 118, 119, 121, 122, 125, 126, 127, 128, 129, 132, 136, 148, 149, 172, 173, 175, 210, 213, 246, 261, 262, 263, 270, 274, 282, 283, 302, 572, 593, 625, 629, 646, 653, 655, 658, 660, 666, 668, 670, 672, 674, 676, 697, 760, 762, 785, 803, 806, 829, 832, 884, 885, 909, 930, 933, 938, 941, 942, 943, 946, 948, 951, 975, 976, 977, 978, 979, 980, 981, 982, 984, 985, 986, 991, 992, 993, 994, 995, 996], "simultan": [14, 16], "all": [14, 15, 16, 17, 18, 19, 20, 21, 26, 27, 28, 29, 30, 65, 66, 67, 68, 69, 72, 73, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 134, 135, 136, 137, 148, 149, 150, 158, 172, 173, 175, 176, 177, 228, 232, 233, 237, 283, 292, 317, 323, 572, 573, 576, 580, 581, 606, 626, 641, 684, 694, 697, 745, 747, 754, 756, 763, 765, 785, 803, 806, 819, 822, 845, 846, 847, 848, 849, 850, 851, 860, 861, 862, 872, 873, 878, 880, 942, 953, 956, 958], "modern": [14, 15], "simpl": [14, 18, 19, 116, 118, 119, 121, 122, 125, 126, 127, 128, 129, 132, 134, 136, 137, 149, 572, 597], "scalabl": [14, 132], "manner": [14, 26, 29, 30, 72, 73, 116, 118, 121, 128, 135, 148, 149, 849, 861], "must": [14, 16, 18, 19, 20, 72, 73, 74, 75, 76, 116, 117, 118, 119, 122, 125, 126, 127, 128, 132, 136, 137, 160, 161, 162, 163, 164, 165, 166, 169, 171, 175, 176, 177, 179, 182, 184, 185, 188, 190, 191, 193, 196, 198, 199, 202, 204, 205, 207, 208, 210, 213, 220, 221, 223, 226, 228, 232, 233, 237, 238, 240, 241, 245, 246, 252, 253, 254, 283, 312, 313, 314, 315, 327, 328, 333, 334, 337, 339, 342, 343, 346, 347, 350, 352, 355, 356, 359, 361, 364, 365, 368, 369, 372, 373, 376, 377, 380, 381, 384, 385, 388, 389, 392, 393, 396, 397, 400, 401, 404, 405, 408, 409, 412, 414, 417, 418, 421, 422, 425, 426, 429, 430, 433, 434, 437, 438, 441, 442, 445, 446, 449, 450, 453, 454, 457, 458, 461, 462, 465, 466, 469, 470, 473, 474, 477, 478, 481, 482, 485, 486, 489, 490, 493, 494, 497, 498, 501, 502, 503, 504, 507, 509, 512, 513, 516, 517, 520, 521, 524, 525, 528, 529, 532, 533, 536, 537, 540, 541, 544, 545, 548, 549, 552, 553, 557, 558, 562, 563, 567, 568, 571, 572, 584, 585, 587, 590, 594, 595, 596, 598, 601, 604, 612, 625, 628, 629, 646, 679, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 695, 696, 697, 698, 701, 703, 705, 706, 708, 709, 711, 712, 714, 715, 717, 718, 720, 721, 724, 725, 727, 729, 731, 732, 734, 735, 737, 738, 740, 741, 743, 744, 745, 747, 748, 750, 751, 753, 754, 756, 757, 759, 760, 762, 763, 765, 766, 768, 769, 770, 773, 775, 778, 780, 783, 785, 786, 789, 791, 794, 795, 798, 799, 802, 803, 806, 807, 810, 811, 814, 815, 818, 819, 822, 825, 828, 829, 832, 833, 836, 837, 840, 841, 844, 867, 868, 871, 872, 873, 874, 875, 877, 878, 880, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 895, 897, 898, 899, 902, 904, 907, 909, 914, 917, 918, 921, 922, 925, 926, 929, 930, 933, 934, 937, 938, 941, 942, 943, 946, 948, 951, 991, 995], "determin": [14, 72, 73, 118, 122, 126, 127, 128, 246, 255, 258, 260, 265, 270, 271, 272, 282, 283, 318, 319, 320, 330, 333, 339, 342, 343, 346, 347, 350, 352, 355, 356, 359, 361, 364, 365, 368, 369, 372, 373, 376, 381, 384, 385, 388, 389, 392, 393, 396, 401, 404, 405, 408, 409, 412, 422, 425, 426, 429, 446, 449, 450, 453, 454, 457, 466, 469, 470, 473, 478, 481, 482, 485, 498, 501, 504, 507, 521, 524, 525, 528, 537, 540, 541, 544, 545, 548, 558, 562, 563, 567, 572, 573, 576, 580, 581, 611, 613, 617, 618, 619, 620, 621, 638, 645, 646, 662, 664, 684, 695, 697, 698, 701, 703, 705, 706, 708, 709, 711, 718, 720, 721, 724, 729, 731, 735, 737, 738, 740, 744, 745, 747, 757, 759, 760, 762, 763, 765, 845, 846, 847, 848, 889, 890, 891, 895, 897, 942, 943, 946, 948, 951], "exactli": [14, 16, 119, 126, 128, 953, 959], "common": [14, 20, 72, 73, 119, 122, 124, 126, 128, 130, 149], "ground": [14, 121], "li": 14, "between": [14, 72, 73, 74, 75, 76, 117, 119, 121, 122, 125, 126, 131, 133, 134, 135, 137, 148, 175, 176, 177, 246, 266, 333, 365, 368, 521, 524, 769, 770, 773, 775, 778, 780, 783, 785, 799, 802, 829, 832, 849, 855, 872, 874, 875, 889, 890, 891, 895, 897, 953, 991, 993], "find": [14, 18, 19, 72, 73, 121, 132, 135, 889, 890, 891, 895, 897, 953], "exist": [14, 15, 18, 20, 21, 72, 73, 74, 75, 118, 119, 120, 121, 122, 123, 124, 129, 132, 149, 572, 593, 991, 995], "essenti": [14, 15, 20, 119, 122, 128], "order": [14, 18, 19, 21, 69, 72, 73, 74, 75, 76, 117, 118, 119, 123, 125, 126, 127, 128, 134, 135, 137, 149, 333, 365, 368, 646, 653, 655, 658, 660, 666, 668, 670, 672, 674, 676, 697, 712, 714, 725, 727, 748, 750, 751, 753, 763, 765, 785, 803, 806, 845, 846, 847, 884, 887, 889, 890, 891, 895, 897, 898, 899, 902, 904, 907, 997, 998], "design": [14, 15, 115, 129, 132, 134, 149], "univers": 14, "abstract": [14, 23, 69, 126, 136, 149, 283, 298, 991, 995], "In": [14, 16, 18, 19, 69, 116, 117, 118, 119, 121, 122, 123, 126, 127, 128, 129, 130, 132, 134, 135, 136, 137, 148, 149, 283, 322, 328, 329, 332, 333, 347, 350, 504, 507, 525, 528, 572, 578, 616, 785, 815, 818, 872, 878, 880, 953], "search": [14, 18, 26, 29, 30, 58, 72, 73, 104, 116, 119, 121, 885, 886, 887, 888], "languag": [14, 16, 132], "first": [14, 15, 18, 19, 21, 69, 117, 119, 121, 122, 125, 126, 132, 134, 135, 137, 172, 173, 175, 204, 205, 207, 208, 246, 273, 278, 283, 302, 314, 333, 347, 350, 373, 376, 381, 384, 385, 388, 389, 392, 393, 396, 414, 417, 434, 437, 442, 445, 458, 461, 462, 465, 482, 485, 486, 489, 494, 497, 498, 501, 504, 507, 513, 516, 521, 524, 553, 557, 572, 580, 646, 657, 697, 703, 705, 709, 711, 712, 714, 721, 724, 735, 737, 741, 743, 748, 750, 754, 756, 760, 762, 785, 791, 794, 819, 822, 829, 832, 833, 836, 845, 846, 847, 848, 849, 850, 859, 860, 872, 883, 884, 885, 886, 889, 890, 891, 895, 975, 986, 987, 988, 991, 995], "see": [14, 17, 18, 19, 20, 23, 69, 117, 120, 122, 126, 128, 134, 135, 148, 149, 175, 176, 177, 193, 196, 204, 205, 207, 208, 246, 254, 274, 333, 347, 350, 373, 376, 381, 384, 385, 388, 389, 392, 393, 396, 409, 412, 426, 429, 458, 461, 482, 485, 494, 497, 498, 501, 504, 507, 513, 516, 521, 524, 525, 528, 553, 557, 697, 729, 731, 738, 740, 745, 747, 760, 762, 763, 765, 884, 886, 889, 890, 891, 895, 897, 909, 914, 917, 918, 921, 922, 925, 926, 929, 930, 933, 934, 937, 938, 941, 942, 943, 946, 948, 951, 953], "clear": [14, 15, 16, 19, 20, 69, 119, 127, 128, 132, 134, 283, 301], "front": [14, 131, 132, 135, 953, 959], "runner": 14, "look": [14, 18, 19, 21, 116, 117, 119, 121, 122, 123, 126, 127, 128, 132, 134, 136, 137, 953], "littl": [14, 134], "deeper": [14, 19, 115, 131, 283, 307, 311, 315, 849, 860, 861], "follow": [14, 15, 18, 19, 20, 21, 69, 72, 73, 116, 118, 119, 121, 123, 125, 126, 127, 128, 129, 131, 132, 134, 135, 136, 137, 149, 246, 269, 283, 327, 333, 525, 528, 572, 614, 615, 616, 636, 637, 646, 653, 655, 658, 660, 666, 668, 670, 672, 674, 676, 684, 695, 696, 697, 741, 743, 763, 765, 849, 855, 861, 889, 890, 891, 895, 897, 953, 975, 985, 991, 995], "same": [14, 16, 18, 19, 21, 26, 27, 28, 72, 73, 116, 117, 119, 121, 122, 125, 126, 128, 129, 130, 132, 134, 136, 137, 175, 176, 177, 185, 188, 199, 202, 210, 213, 223, 226, 228, 232, 233, 237, 241, 245, 246, 252, 253, 254, 283, 292, 293, 327, 333, 334, 337, 347, 350, 377, 380, 397, 400, 430, 433, 504, 507, 525, 528, 529, 532, 533, 536, 568, 571, 572, 598, 600, 601, 604, 625, 628, 629, 646, 662, 664, 679, 684, 685, 686, 687, 688, 689, 690, 691, 696, 697, 698, 701, 703, 705, 706, 708, 709, 711, 712, 714, 715, 717, 718, 720, 732, 734, 738, 740, 741, 743, 745, 747, 748, 750, 757, 759, 760, 762, 785, 791, 794, 803, 806, 807, 810, 819, 822, 825, 828, 829, 832, 845, 846, 847, 849, 862, 889, 890, 891, 895, 897, 898, 899, 902, 904, 907, 909, 910, 913, 914, 917, 918, 921, 922, 925, 926, 929, 934, 937, 938, 941, 953, 975, 976, 977, 978, 979, 980, 981, 982], "core": [14, 18, 20, 128, 132, 137, 283, 319, 953], "principl": 14, "oper": [14, 18, 20, 72, 73, 74, 75, 118, 119, 121, 122, 125, 126, 128, 129, 135, 136, 175, 204, 205, 207, 208, 246, 274, 333, 347, 350, 389, 392, 393, 396, 442, 445, 509, 512, 513, 516, 525, 528, 549, 552, 572, 582, 594, 595, 596, 638, 646, 653, 655, 658, 660, 666, 668, 670, 672, 674, 676, 684, 685, 686, 687, 688, 689, 690, 691, 693], "expos": [14, 132, 136, 572, 588], "almost": [14, 19, 126, 133, 135], "ident": [14, 16, 72, 73, 122, 124, 126, 134, 135, 149, 283, 317, 849, 862, 953], "uniqu": [14, 121, 122, 126, 149, 283, 292, 293, 845, 846, 847, 848, 849, 855, 889, 890, 891, 895, 896, 897], "syntax": [14, 15, 130], "There": [14, 18, 19, 119, 122, 125, 126, 127, 130, 132, 135, 149], "onli": [14, 17, 18, 19, 72, 73, 116, 117, 119, 121, 122, 123, 125, 126, 127, 128, 129, 132, 134, 135, 136, 137, 147, 149, 283, 323, 333, 490, 493, 494, 497, 697, 721, 724, 741, 743, 785, 803, 806, 849, 850, 851, 859, 860, 884, 885, 886, 909, 918, 921, 953, 991, 992, 993, 994, 995, 996], "so": [14, 15, 18, 19, 24, 25, 26, 29, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 47, 48, 51, 52, 59, 60, 70, 71, 72, 73, 79, 80, 83, 84, 85, 86, 87, 88, 93, 94, 97, 98, 101, 102, 105, 106, 116, 117, 118, 119, 121, 124, 125, 127, 128, 129, 131, 132, 133, 134, 135, 136, 137, 149, 150, 158, 166, 167, 168, 170, 179, 180, 185, 186, 193, 194, 199, 200, 215, 216, 223, 224, 228, 230, 233, 235, 241, 243, 255, 256, 257, 259, 334, 335, 336, 338, 347, 348, 349, 351, 356, 357, 358, 360, 397, 398, 399, 430, 431, 432, 558, 559, 560, 561, 563, 564, 565, 566, 573, 574, 575, 577, 601, 602, 603, 605, 648, 649, 650, 652, 698, 699, 700, 702, 786, 787, 788, 790, 819, 820, 821, 823, 849, 850, 860, 874, 876, 891, 892, 893, 894, 953], "wai": [14, 15, 18, 23, 121, 123, 129, 134, 135, 136, 137, 149], "manipul": [14, 52, 98, 116, 137, 148, 786, 789, 791, 794, 795, 798, 799, 802, 803, 806, 807, 810, 811, 814, 815, 818, 819, 822, 824, 825, 828, 829, 832, 833, 836, 837, 840, 841, 844], "unsurprisingli": [14, 119], "fundament": [14, 126, 132], "consist": [14, 72, 73, 125, 129, 283, 315, 697, 712, 714, 909, 910, 913, 987, 988], "each": [14, 15, 16, 19, 20, 72, 73, 74, 75, 76, 115, 116, 117, 118, 119, 120, 121, 122, 124, 125, 126, 127, 129, 130, 131, 132, 134, 135, 137, 148, 149, 160, 163, 164, 166, 169, 175, 210, 213, 246, 253, 283, 292, 293, 304, 305, 306, 307, 308, 309, 310, 314, 327, 333, 334, 337, 339, 342, 343, 346, 347, 350, 352, 355, 356, 359, 361, 364, 365, 368, 369, 372, 373, 376, 377, 380, 381, 384, 385, 388, 389, 392, 393, 396, 397, 400, 401, 404, 405, 408, 409, 412, 414, 417, 422, 425, 426, 429, 430, 433, 434, 437, 438, 441, 442, 445, 446, 449, 450, 453, 454, 457, 458, 461, 462, 465, 466, 469, 470, 473, 474, 477, 478, 481, 482, 485, 486, 489, 490, 493, 494, 497, 498, 501, 504, 507, 509, 512, 513, 516, 517, 520, 521, 524, 525, 528, 529, 532, 533, 536, 537, 540, 541, 544, 545, 548, 549, 552, 553, 557, 558, 562, 563, 567, 568, 571, 572, 573, 576, 646, 653, 655, 658, 660, 666, 668, 670, 672, 674, 676, 684, 685, 686, 687, 688, 689, 690, 691, 692, 697, 698, 701, 703, 705, 706, 708, 712, 714, 721, 724, 729, 731, 732, 734, 738, 740, 745, 747, 748, 750, 785, 795, 798, 811, 814, 819, 822, 824, 829, 832, 837, 840, 841, 844, 849, 855, 862, 872, 873, 884, 887, 889, 890, 891, 895, 909, 910, 913, 953, 959, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 986, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998], "veri": [14, 15, 18, 19, 116, 117, 119, 121, 122, 126, 128, 129, 133, 135, 136, 137, 149, 953], "similar": [14, 116, 121, 126, 127, 128, 135, 149, 333, 525, 528, 684, 695, 975, 986], "convent": [14, 148, 697, 721, 724, 909, 910, 913], "those": [14, 18, 19, 20, 72, 73, 121, 126, 132, 137, 175, 176, 177, 646, 682, 697, 741, 743, 748, 750, 785, 786, 789], "introduc": [14, 126, 135, 785, 819, 822, 889, 890], "2006": 14, "layer": [14, 46, 92, 116, 118, 132, 133, 136, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 867, 868, 871, 953, 966, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 995, 997, 998], "therefor": [14, 19, 116, 117, 118, 119, 120, 121, 122, 125, 126, 127, 128, 129, 132, 134, 136, 149, 175, 176, 177, 179, 182, 184, 185, 188, 190, 191, 193, 196, 198, 199, 202, 204, 205, 207, 208, 210, 213, 220, 221, 223, 226, 228, 232, 233, 237, 238, 240, 241, 245, 246, 255, 258, 333, 334, 337, 347, 350, 352, 355, 356, 359, 397, 400, 430, 433, 513, 516, 545, 548, 549, 552, 558, 562, 572, 600, 684, 687, 696, 697, 698, 701, 709, 711, 785, 819, 822, 867, 868, 871, 889, 891, 895, 909, 914, 917, 942, 943, 946], "present": [14, 19, 69, 72, 73, 117, 120, 126, 127, 128, 129, 132], "itself": [14, 18, 19, 117, 126, 129, 136, 148, 149, 572, 578, 849, 861], "cut": 14, "cloth": 14, "adher": [14, 15, 118, 120, 132, 137], "semant": [14, 132, 137, 333, 525, 528], "round": [14, 15, 16, 18, 19, 20, 21, 37, 38, 83, 84, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 132, 134, 135, 136, 137, 148, 333, 347, 350, 397, 400, 430, 433, 434, 437, 504, 507, 545, 548, 568, 571, 953], "up": [14, 15, 16, 17, 19, 20, 21, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 132, 133, 134, 135, 136, 137, 148, 149], "hopefulli": [14, 15, 16, 18, 19, 20, 21, 115, 116, 117, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 132, 134, 135, 136, 137, 148], "paint": [14, 132], "pictur": [14, 132], "how": [14, 16, 17, 18, 19, 20, 21, 115, 116, 117, 118, 119, 120, 122, 123, 124, 125, 126, 127, 128, 129, 131, 133, 134, 135, 136, 137, 148, 149, 953, 959, 975, 986, 987, 988], "pleas": [14, 15, 16, 18, 19, 20, 21, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 132, 134, 135, 136, 137, 148, 953], "check": [14, 15, 16, 18, 19, 26, 27, 28, 29, 30, 72, 73, 121, 126, 131, 132, 134, 135, 136, 137, 148, 246, 260, 267, 268, 270, 282, 283, 322, 332, 572, 582, 597, 611, 618, 619, 620, 621, 638, 645, 646, 662, 664, 697, 712, 714, 849, 850, 859, 860, 861, 953], "out": [14, 15, 16, 17, 18, 19, 20, 21, 24, 25, 31, 32, 37, 38, 39, 40, 47, 48, 49, 50, 51, 52, 53, 54, 61, 62, 63, 64, 65, 66, 69, 70, 71, 72, 73, 74, 75, 77, 78, 83, 84, 85, 86, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 107, 108, 109, 110, 111, 112, 115, 116, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 130, 131, 132, 134, 135, 136, 137, 148, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 175, 176, 177, 178, 179, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 212, 214, 215, 217, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 252, 254, 283, 328, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 584, 585, 586, 587, 589, 590, 591, 594, 595, 596, 598, 600, 601, 602, 603, 604, 605, 612, 625, 628, 629, 646, 679, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 883, 884, 885, 886, 888, 889, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 975, 983], "discuss": [14, 15, 16, 17, 18, 19, 20, 21, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 132, 134, 135, 136, 137, 148, 149, 953], "faq": [14, 15, 16, 132, 134, 135, 136, 137, 148], "reach": [14, 15, 16, 18, 19, 20, 21, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 132, 134, 135, 136, 137, 148, 283, 307, 311, 315, 849, 861], "discord": [14, 15, 16, 18, 19, 20, 21, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 132, 134, 135, 136, 137, 148, 953], "you": [14, 15, 16, 17, 18, 19, 20, 21, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 131, 132, 134, 135, 136, 137, 148, 149, 953, 959], "question": [14, 15, 16, 18, 19, 119, 121, 132, 134, 135, 136, 137, 148, 149, 953], "With": [15, 16, 18, 39, 40, 41, 42, 59, 60, 72, 73, 74, 75, 83, 84, 85, 86, 93, 94, 97, 98, 101, 102, 105, 106, 119, 121, 132, 160, 162, 163, 164, 165, 166, 169, 171, 175, 210, 213, 246, 255, 258, 283, 305, 321, 333, 334, 337, 338, 347, 350, 351, 352, 355, 356, 359, 360, 373, 376, 393, 396, 397, 400, 405, 408, 430, 433, 442, 445, 462, 465, 502, 503, 509, 512, 513, 516, 529, 532, 545, 548, 549, 552, 558, 559, 562, 563, 564, 567, 572, 573, 574, 575, 576, 577, 581, 589, 590, 597, 600, 601, 604, 605, 635, 640, 641, 642, 646, 648, 649, 651, 684, 687, 690, 691, 696, 697, 698, 701, 702, 703, 705, 706, 708, 709, 711, 725, 727, 754, 756, 769, 770, 773, 780, 783, 785, 786, 789, 790, 799, 802, 803, 806, 811, 814, 819, 822, 823, 824, 833, 836, 867, 868, 871, 872, 873, 874, 876, 877, 878, 880, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 898, 899, 902, 909, 910, 913, 914, 917, 942, 943, 946], "central": 15, "goal": [15, 20], "being": [15, 16, 18, 19, 72, 73, 117, 119, 121, 124, 125, 126, 127, 128, 129, 130, 132, 135, 148, 149, 175, 176, 177, 572, 627, 632, 889, 896, 953], "would": [15, 18, 19, 21, 115, 117, 118, 119, 121, 123, 124, 125, 126, 129, 131, 132, 134, 136, 137, 149, 160, 165, 283, 328, 953], "entir": [15, 16, 19, 72, 73, 119, 120, 121, 125, 126, 129, 134, 135, 136, 137, 149, 283, 327, 909, 914, 917, 918, 921, 922, 925, 926, 929, 930, 933, 934, 937, 938, 941, 942, 943, 946, 948, 951, 975, 984], "forgiven": 15, "rais": [15, 19, 69, 72, 73, 129, 130, 132, 134, 246, 254, 333, 422, 425, 521, 524, 572, 582, 607, 616, 630, 637, 643, 646, 683, 697, 721, 724, 728, 760, 762, 785, 825, 828, 829, 832, 884, 887, 909, 914, 917, 922, 925, 942, 943, 946, 948, 951, 987, 988, 991, 995], "an": [15, 16, 18, 19, 20, 21, 23, 26, 29, 30, 67, 68, 69, 72, 73, 113, 114, 116, 117, 118, 119, 121, 122, 123, 125, 126, 127, 128, 129, 130, 132, 134, 135, 136, 137, 148, 149, 160, 163, 164, 166, 169, 174, 175, 176, 177, 179, 182, 184, 185, 188, 190, 191, 193, 196, 198, 199, 202, 204, 205, 207, 208, 210, 213, 215, 218, 220, 221, 223, 226, 228, 232, 233, 237, 238, 240, 241, 245, 246, 252, 253, 254, 255, 258, 266, 271, 272, 274, 283, 305, 309, 328, 333, 334, 337, 339, 342, 343, 346, 347, 350, 352, 355, 356, 359, 361, 364, 365, 368, 369, 372, 373, 376, 377, 380, 381, 384, 385, 388, 389, 392, 393, 396, 397, 400, 401, 404, 405, 408, 409, 412, 414, 417, 422, 425, 426, 429, 430, 433, 434, 437, 438, 441, 442, 445, 446, 449, 450, 453, 454, 457, 458, 461, 462, 465, 466, 469, 470, 473, 474, 477, 478, 481, 482, 485, 486, 489, 490, 493, 494, 497, 498, 501, 502, 503, 504, 507, 509, 512, 513, 516, 521, 524, 525, 528, 529, 532, 533, 536, 537, 540, 541, 544, 545, 548, 549, 552, 553, 557, 558, 562, 563, 567, 568, 571, 572, 583, 584, 585, 587, 589, 598, 599, 600, 612, 616, 618, 619, 620, 621, 641, 642, 643, 646, 662, 664, 679, 681, 682, 683, 684, 687, 696, 697, 698, 701, 703, 705, 706, 708, 709, 711, 712, 714, 715, 717, 718, 720, 721, 724, 728, 729, 731, 732, 734, 738, 740, 741, 743, 744, 745, 747, 748, 750, 757, 759, 760, 762, 763, 765, 785, 786, 789, 791, 794, 795, 798, 799, 802, 803, 806, 807, 810, 815, 818, 819, 822, 824, 825, 828, 829, 832, 833, 836, 837, 840, 841, 844, 849, 855, 867, 868, 871, 872, 874, 875, 883, 884, 887, 888, 889, 890, 891, 895, 896, 897, 898, 899, 902, 904, 907, 909, 910, 913, 914, 917, 918, 921, 922, 925, 926, 929, 930, 933, 934, 937, 938, 941, 942, 943, 946, 948, 951, 953, 964, 965, 987, 988, 991, 992, 993, 995], "eyebrow": 15, "somehow": 15, "pytorch": [15, 16, 20, 117, 122, 127, 128, 129, 132, 134, 137, 149, 646, 653, 655, 658, 660, 666, 668, 670, 672, 674, 676, 953, 991, 992, 993, 994, 995, 996], "other": [15, 18, 19, 72, 73, 74, 75, 116, 118, 119, 121, 122, 125, 126, 129, 130, 132, 134, 136, 137, 147, 148, 149, 172, 173, 175, 176, 177, 333, 426, 429, 572, 573, 576, 578, 646, 657, 872, 878, 880, 889, 896, 909, 930, 933, 938, 941, 953], "strong": [15, 149], "industri": 15, "back": [15, 125, 131, 132, 134, 149, 953, 959, 987, 988, 991, 995], "momentum": 15, "won": [15, 16, 19, 137], "ad": [15, 18, 19, 20, 113, 114, 116, 117, 118, 119, 121, 122, 124, 125, 126, 127, 129, 132, 136, 149, 572, 636, 637, 697, 712, 714, 785, 799, 802, 997, 998], "just": [15, 16, 18, 19, 118, 119, 121, 122, 129, 132, 134, 135, 149, 909, 910, 913, 975, 984], "make": [15, 16, 18, 19, 20, 116, 117, 118, 119, 120, 121, 122, 125, 126, 127, 128, 129, 130, 132, 134, 135, 137, 283], "problem": [15, 19, 125, 134], "even": [15, 16, 18, 19, 117, 118, 122, 127, 128, 134, 135, 136, 137, 149, 333, 521, 524, 529, 532], "wors": 15, "rather": [15, 72, 73, 116, 118, 121, 126, 137, 149, 175, 176, 177, 283, 327, 572, 618, 619, 621, 646, 662, 664], "funni": 15, "comic": 15, "strip": 15, "easi": [15, 18, 19, 122, 126], "feasibl": 15, "space": [15, 175, 176, 177, 204, 205, 207, 208, 572, 599, 646, 683], "case": [15, 18, 19, 20, 26, 29, 30, 69, 72, 73, 74, 75, 76, 116, 117, 118, 119, 121, 122, 123, 125, 126, 127, 128, 129, 130, 132, 134, 136, 137, 149, 175, 210, 213, 283, 322, 329, 332, 333, 334, 337, 339, 342, 343, 346, 347, 350, 352, 355, 356, 359, 361, 364, 365, 368, 393, 396, 397, 400, 401, 404, 405, 408, 422, 425, 426, 429, 430, 433, 466, 469, 470, 473, 478, 481, 482, 485, 504, 507, 521, 524, 525, 528, 529, 532, 533, 536, 537, 540, 541, 544, 545, 548, 558, 562, 563, 567, 568, 571, 572, 616, 628, 629, 697, 725, 727, 785, 815, 818, 849, 852, 858, 909, 914, 917, 918, 921, 922, 925, 930, 933, 934, 937, 938, 941, 975, 986, 987, 988, 991, 995], "unlik": [15, 119, 126, 283], "charger": 15, "charact": [15, 130], "encod": [15, 135, 572, 599], "instant": [15, 953], "messag": [15, 19, 130, 132, 134, 1000, 1001], "much": [15, 19, 116, 125, 126, 129, 132, 134, 135], "doe": [15, 19, 21, 23, 69, 72, 73, 115, 116, 117, 118, 119, 121, 122, 123, 127, 129, 132, 134, 135, 149, 333, 393, 396, 572, 616, 785, 824], "mandat": [15, 121, 129], "adopt": [15, 19, 125], "continu": [15, 16, 120, 121, 130, 149], "own": [15, 16, 18, 118, 121, 130, 132, 149], "signatur": [15, 23, 69, 116, 117, 118, 119, 121, 126, 127, 128, 129, 175, 176, 177, 179, 182, 184, 185, 188, 190, 191, 193, 196, 198, 199, 202, 204, 205, 220, 221, 223, 226, 228, 232, 233, 237, 238, 240, 241, 245, 246, 255, 258, 333, 334, 337, 352, 355, 356, 359, 393, 396, 397, 400, 405, 408, 430, 433, 513, 516, 545, 548, 549, 552, 697, 709, 711, 785, 799, 802, 819, 822, 889, 890, 891, 895, 898, 899, 902, 909, 914, 917], "replac": [15, 19, 21, 72, 73, 119, 121, 124, 126, 127, 128, 132, 134, 137, 149, 572, 628, 629, 785, 786, 789, 872, 873], "your": [15, 16, 17, 18, 20, 21, 116, 118, 135, 136, 149, 953], "10": [15, 18, 21, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 119, 121, 126, 132, 134, 135, 175, 198, 207, 208, 209, 283, 333, 373, 376, 377, 380, 405, 408, 442, 445, 462, 465, 470, 473, 545, 548, 572, 590, 600, 627, 632, 646, 666, 667, 668, 669, 684, 690, 697, 706, 708, 709, 711, 735, 737, 754, 756, 785, 803, 806, 811, 814, 824, 867, 868, 871, 872, 873, 874, 875, 876, 884, 887, 889, 890, 909, 910, 913, 914, 917, 991, 993], "100": [15, 16, 101, 102, 121, 135, 136, 137, 149, 333, 545, 548, 874, 876, 953], "despit": [15, 126, 128], "distinct": [15, 118, 126, 129, 131, 889, 890, 891, 895, 897, 953], "still": [15, 72, 73, 118, 121, 127, 134, 136, 149, 953], "believ": [15, 19], "share": [15, 72, 73, 119, 121, 122, 123, 126, 132, 246, 278], "bring": [15, 121, 132, 133], "benefit": [15, 16, 18, 19, 125, 126, 129, 134, 135, 149], "unrel": [15, 19], "what": [15, 16, 19, 115, 117, 118, 119, 121, 124, 126, 130, 131, 132, 134, 135, 136, 137, 148, 149, 953], "again": [15, 16, 19, 116, 119, 121, 126, 129, 135, 137, 149], "contrari": 15, "bumpi": 15, "road": 15, "allud": [15, 135], "most": [15, 18, 19, 72, 73, 116, 117, 121, 122, 125, 126, 127, 128, 129, 130, 132, 134, 135, 136, 149, 697, 712, 714], "technolog": 15, "sector": [15, 333, 343, 346, 356, 359, 369, 372], "full": [15, 16, 19, 74, 75, 117, 118, 121, 127, 132, 149, 175, 246, 266, 333, 442, 445, 462, 465, 684, 690, 697, 741, 743, 745, 747, 748, 750, 867, 868, 871], "success": 15, "reason": [15, 19, 116, 119, 122, 125, 126, 127, 129, 132, 134, 333, 525, 528], "build": [15, 17, 18, 122, 131, 133, 136, 137, 149, 889, 890, 891, 895, 897, 953, 975, 986, 987, 988], "custom": [15, 23, 69, 121, 136], "comput": [15, 16, 18, 72, 73, 121, 122, 126, 132, 135, 149, 283, 327, 333, 347, 350, 373, 376, 385, 388, 393, 396, 414, 417, 418, 421, 438, 441, 442, 445, 458, 461, 462, 465, 486, 489, 490, 493, 494, 497, 498, 501, 504, 507, 509, 512, 513, 516, 572, 584, 585, 587, 590, 591, 646, 648, 651, 653, 655, 657, 658, 660, 666, 668, 670, 672, 674, 676, 679, 681, 683, 684, 685, 686, 687, 688, 689, 690, 691, 693, 695, 697, 698, 701, 703, 705, 712, 714, 715, 717, 718, 720, 721, 724, 725, 727, 741, 743, 744, 745, 747, 748, 750, 760, 762, 763, 765, 769, 770, 773, 775, 778, 780, 783, 849, 855, 889, 890, 891, 895, 897, 909, 910, 913, 914, 917, 918, 921, 922, 925, 926, 929, 930, 933, 934, 937, 938, 941], "thank": [15, 135], "interoper": 15, "compon": [15, 132, 646, 683], "bio": [15, 18], "hardwar": [15, 18], "initi": [15, 19, 69, 72, 73, 74, 75, 76, 121, 123, 127, 128, 283, 684, 694, 968, 969, 971, 972, 974, 975, 976, 977, 978, 979, 980, 981, 982, 984, 985, 986, 987, 988, 991, 995], "pcie": 15, "interfac": [15, 137, 149], "motherboard": 15, "raid": 15, "storag": [15, 135], "virtual": [15, 19, 21], "bluetooth": 15, "wireless": 15, "exchang": 15, "btx": 15, "form": [15, 17, 26, 27, 28, 29, 30, 72, 73, 121, 122, 136, 137, 175, 179, 182, 215, 218, 228, 232, 233, 237, 572, 578, 646, 653, 655, 658, 660, 666, 668, 670, 672, 674, 676, 684, 697, 698, 701, 706, 708, 709, 711, 712, 714, 715, 717, 718, 720, 729, 731, 732, 734, 738, 740, 741, 743, 745, 747, 748, 750, 751, 753, 757, 759, 849, 851, 861], "factor": [15, 283, 292, 325, 326, 327, 646, 648, 651, 653, 655, 666, 668, 670, 672, 684, 685, 686, 687, 688, 689, 690, 691, 697, 698, 701, 975, 976, 977, 978, 979, 980, 981, 982, 991, 992, 993, 994], "sata": 15, "connect": [15, 18, 136, 137, 975, 985, 986], "host": [15, 149], "bu": 15, "adapt": [15, 646, 670, 672, 991, 994], "devic": [15, 19, 31, 32, 36, 72, 73, 77, 78, 82, 101, 102, 115, 116, 122, 124, 127, 134, 135, 149, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 232, 233, 237, 238, 239, 240, 241, 242, 243, 244, 245, 285, 286, 287, 288, 289, 290, 292, 293, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 572, 600, 601, 604, 625, 628, 629, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 964, 965, 966, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 995, 997, 998], "html": [15, 21, 118, 175, 176, 177, 179, 182, 184, 185, 188, 190, 191, 193, 196, 198, 199, 202, 204, 205, 220, 221, 223, 226, 228, 232, 233, 237, 238, 240, 241, 245, 246, 255, 258, 333, 334, 337, 352, 355, 356, 359, 393, 396, 397, 400, 405, 408, 430, 433, 513, 516, 545, 548, 549, 552, 697, 709, 711, 785, 799, 802, 819, 822, 889, 890, 891, 895, 898, 899, 902, 909, 914, 917], "enabl": [15, 18, 19, 72, 73, 74, 75, 76, 121, 122, 125, 126, 129, 131, 132, 133, 135, 137, 149, 646, 683], "anyon": [15, 17, 149], "websit": 15, "tcp": 15, "ip": 15, "node": [15, 72, 73, 126, 849, 850, 859, 860], "commun": [15, 17, 19, 20, 149, 953, 959], "network": [15, 122, 126, 132, 136, 148, 684, 693, 953, 961, 975, 987, 988], "smtp": 15, "possibl": [15, 17, 18, 19, 20, 118, 119, 121, 126, 127, 129, 132, 135, 148, 149, 572, 622, 640, 909, 914, 917, 922, 925], "send": 15, "gmail": 15, "outlook": 15, "pop": [15, 69], "email": 15, "ieee": [15, 174, 246, 266, 333, 347, 350, 426, 429, 504, 507, 525, 528, 545, 548], "754": [15, 174, 246, 266, 333, 347, 350, 426, 429, 504, 507, 525, 528, 545, 548], "allow": [15, 121, 132, 149, 175, 204, 205, 207, 208, 572, 622, 987, 988], "calcul": [15, 72, 73, 74, 75, 76, 118, 333, 334, 337, 339, 342, 343, 346, 347, 350, 352, 355, 356, 359, 361, 364, 365, 368, 401, 404, 405, 408, 409, 412, 422, 425, 426, 429, 466, 469, 470, 473, 474, 477, 478, 481, 482, 485, 504, 507, 521, 524, 537, 540, 541, 544, 545, 548, 553, 557, 558, 562, 563, 567, 769, 770, 773, 775, 778, 780, 783, 909, 914, 917, 918, 921, 922, 925, 926, 929, 930, 933, 934, 937, 938, 941], "live": [15, 16], "depend": [15, 18, 19, 118, 121, 124, 126, 127, 132, 149, 246, 252, 333, 334, 337, 339, 342, 343, 346, 352, 355, 356, 359, 361, 364, 365, 368, 401, 404, 405, 408, 422, 425, 426, 429, 466, 469, 470, 473, 474, 477, 478, 481, 521, 524, 537, 540, 541, 544, 558, 562, 563, 567, 697, 712, 714, 741, 743, 745, 747, 748, 750, 884, 888, 898, 899, 902, 904, 907], "did": [15, 20, 137], "aris": [15, 149], "until": [15, 19, 130, 149, 953], "substanti": [15, 19, 121, 125], "innov": 15, "growth": 15, "usag": [15, 132, 283, 327], "relev": [15, 18, 20, 119, 126, 127, 135, 991, 992, 993, 994, 995, 996], "area": [15, 129, 147, 333, 343, 346, 356, 359, 369, 372, 953], "necess": 15, "parti": [15, 149], "could": [15, 16, 18, 19, 119, 121, 126, 127, 129, 132, 134, 135, 136, 889, 890, 891, 895, 897], "easili": [15, 19, 135, 136, 137, 149, 953], "engag": [15, 17, 18, 19, 20, 21, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129], "regard": [15, 126, 283], "effect": [15, 117, 118, 125, 126, 149, 175, 210, 213, 646, 674, 676, 909, 930, 933, 938, 941], "2015": 15, "sinc": [15, 18, 19, 121, 149], "alongsid": 15, "machin": [15, 18, 122, 148, 246, 266, 269, 333, 438, 441, 697, 729, 731, 738, 740], "given": [15, 16, 18, 19, 20, 21, 69, 72, 73, 116, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 132, 134, 136, 137, 148, 175, 176, 177, 184, 204, 205, 207, 208, 283, 316, 322, 324, 325, 326, 327, 329, 332, 572, 590, 591, 601, 604, 628, 629, 644, 646, 648, 651, 653, 655, 658, 660, 666, 668, 670, 672, 674, 676, 684, 685, 686, 687, 688, 689, 690, 691, 697, 766, 768, 769, 770, 773, 775, 778, 780, 783, 785, 786, 789, 799, 802, 803, 806, 811, 814, 819, 822, 824, 837, 840, 849, 856, 857, 872, 874, 875, 877, 878, 880, 883, 898, 904, 907, 964, 965], "frame": [15, 148], "less": [15, 19, 37, 38, 72, 73, 83, 84, 117, 119, 126, 131, 132, 333, 339, 342, 343, 346, 352, 355, 365, 368, 397, 400, 466, 469, 470, 473, 478, 481, 521, 524, 525, 528, 533, 536, 545, 548, 697, 729, 731, 738, 740, 763, 765, 872, 878, 880, 909, 938, 941], "matur": [15, 149], "state": [15, 117, 118, 121, 131, 132, 133, 135, 148, 333, 504, 507, 684, 694, 953, 961, 962, 963, 964, 965, 966, 968, 969, 971, 972, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998], "than": [15, 19, 72, 73, 116, 119, 121, 126, 129, 132, 135, 136, 137, 149, 175, 176, 177, 246, 266, 283, 327, 333, 339, 342, 343, 346, 352, 355, 365, 368, 381, 384, 389, 392, 397, 400, 430, 433, 434, 437, 466, 469, 470, 473, 478, 481, 502, 521, 524, 525, 528, 533, 536, 545, 548, 568, 571, 572, 618, 619, 621, 646, 662, 664, 697, 703, 705, 721, 724, 729, 731, 738, 740, 763, 765, 785, 786, 789, 803, 806, 825, 828, 872, 878, 880, 889, 890, 891, 895, 897, 909, 926, 929, 930, 933, 934, 937, 938, 941], "preced": [15, 136], "mention": [15, 18, 19, 117, 119, 122, 129], "aros": 15, "70": [15, 697, 735, 737, 909, 910, 913], "80": [15, 697, 735, 737, 909, 910, 913], "90": [15, 101, 102, 333, 393, 396, 529, 532, 697, 735, 737, 874, 876, 909, 910, 913], "effort": [15, 17, 149], "stage": [15, 17, 19, 21, 115, 130, 953], "complet": [15, 19, 20, 72, 73, 125, 126, 134, 135, 697, 741, 743], "natur": [15, 119, 125, 126, 148, 333, 422, 425, 466, 469, 474, 477, 697, 744], "like": [15, 18, 19, 21, 69, 115, 116, 117, 118, 119, 121, 128, 129, 131, 132, 134, 135, 136, 137, 148, 149, 646, 662, 664, 872, 878, 880, 953], "certainli": 15, "mission": [15, 953], "creat": [15, 17, 18, 19, 21, 23, 69, 72, 73, 121, 127, 128, 129, 132, 133, 136, 147, 148, 175, 176, 177, 179, 182, 184, 185, 188, 190, 191, 198, 199, 202, 204, 205, 207, 208, 215, 218, 220, 221, 223, 226, 238, 240, 241, 245, 283, 292, 293, 572, 600, 601, 604, 625, 628, 629, 640, 646, 681, 872, 873, 874, 875, 878, 880, 953, 959, 964, 965, 966, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998], "At": [15, 20], "process": [15, 16, 17, 18, 19, 21, 121, 122, 126, 132, 137, 283, 292, 293, 322, 332], "ourselv": 15, "lead": [15, 16, 72, 73, 74, 75, 76, 149, 697, 741, 743, 748, 750], "quansight": 15, "compani": 15, "made": [15, 19, 20, 126, 129, 132, 134], "organ": [15, 116, 122, 125, 126], "panda": 15, "scipi": 15, "conda": [15, 18, 21], "dask": [15, 889, 890, 891, 895, 897], "apach": 15, "onnx": 15, "scikit": 15, "jupyt": 15, "aw": 15, "cupi": 15, "net": [15, 16, 132, 137], "sympi": 15, "rai": [15, 333, 365, 368], "modin": 15, "spyder": 15, "includ": [15, 19, 20, 72, 73, 116, 117, 118, 119, 120, 121, 122, 123, 125, 126, 127, 128, 129, 130, 148, 149, 175, 176, 177, 179, 182, 215, 218, 572, 611, 645, 697, 763, 765, 849, 850, 872, 878, 880, 884, 886, 909, 914, 917, 918, 921, 922, 925, 926, 929, 930, 933, 934, 937, 938, 941, 942, 943, 946, 948, 951, 956, 958, 975, 985, 986, 989, 990], "member": [15, 19], "googl": [15, 953], "octoml": 15, "einop": [15, 72, 73, 572, 594, 595, 596], "further": [15, 16, 19, 21, 119, 125, 131, 135, 136, 953], "sponsor": 15, "lg": 15, "electron": 15, "microsoft": 15, "d": [15, 16, 17, 18, 69, 101, 102, 115, 126, 135, 572, 581, 589, 684, 685, 686, 687, 688, 689, 690, 691, 697, 709, 711, 735, 737, 874, 876, 953, 959], "shaw": 15, "co": [15, 37, 38, 83, 84, 132, 148, 333, 572, 599, 953], "intel": 15, "togeth": [15, 72, 73, 125, 126, 130, 136, 137, 149, 997, 998], "major": [15, 121, 127, 128, 149, 884, 887], "involv": [15, 17, 21, 115, 127, 137, 246, 274, 333, 347, 350, 504, 507, 953, 959], "anoth": [15, 18, 19, 72, 73, 121, 122, 126, 127, 134, 137, 175, 193, 196, 246, 253, 255, 258], "promis": 15, "sign": [15, 18, 37, 38, 83, 84, 133, 137, 175, 176, 177, 333, 334, 337, 347, 350, 365, 368, 389, 392, 504, 507, 525, 528, 697, 744, 889, 890, 891, 895, 897, 909, 926, 929, 934, 937], "pursuit": 15, "unif": [15, 17, 134, 953, 959], "clearli": [15, 20, 119, 121], "lot": [15, 16, 124, 134, 149], "thought": [15, 18, 19, 117], "care": [15, 19, 137], "attent": [15, 19, 125, 126, 684, 695, 696, 975, 986], "gone": [15, 131], "simplifi": [15, 132, 133, 134, 136], "compat": [15, 117, 149, 246, 254, 333, 347, 350, 365, 368, 373, 376, 381, 384, 385, 388, 389, 392, 393, 396, 409, 412, 414, 417, 434, 437, 442, 445, 458, 461, 462, 465, 482, 485, 486, 489, 494, 497, 498, 501, 504, 507, 513, 516, 521, 524, 525, 528, 553, 557, 697, 729, 731, 738, 740, 745, 747, 754, 756, 760, 762, 763, 765, 785, 815, 818, 884, 886, 909, 914, 917, 918, 921, 922, 925, 926, 929, 930, 933, 934, 937, 938, 941, 942, 943, 946, 948, 951, 953], "excit": [15, 17, 115, 953], "complianc": 15, "hope": [15, 149], "due": [15, 18, 126, 129, 333, 504, 507], "suit": [15, 18, 115, 120, 121, 135, 148], "some": [15, 16, 18, 19, 20, 72, 73, 116, 117, 118, 119, 121, 122, 125, 126, 127, 128, 129, 130, 133, 134, 135, 136, 148, 149, 333, 426, 429, 646, 648, 651, 653, 655, 658, 660, 666, 668, 670, 672, 674, 676, 682, 684, 692, 953, 975, 983], "motiv": [15, 134], "great": [15, 16, 121, 132, 134], "convinc": 15, "celebr": 15, "encourag": [15, 148, 149, 953, 959], "foundat": 15, "point": [16, 19, 117, 118, 119, 121, 125, 129, 132, 134, 135, 148, 174, 175, 176, 177, 184, 190, 191, 198, 220, 221, 238, 240, 246, 252, 266, 271, 274, 333, 339, 342, 343, 346, 347, 350, 352, 355, 356, 359, 361, 364, 365, 368, 369, 372, 393, 396, 397, 400, 401, 404, 405, 408, 409, 412, 422, 425, 426, 429, 430, 433, 466, 469, 470, 473, 478, 481, 482, 485, 504, 507, 521, 524, 525, 528, 529, 532, 537, 540, 541, 544, 545, 548, 558, 562, 563, 567, 568, 571, 697, 698, 701, 706, 708, 712, 714, 715, 717, 718, 720, 729, 731, 738, 740, 741, 743, 745, 747, 748, 750, 763, 765, 889, 890, 891, 895, 897, 909, 914, 917, 918, 921, 922, 925, 926, 929, 930, 933, 934, 937, 938, 941], "mai": [16, 18, 19, 23, 69, 121, 126, 134, 136, 175, 176, 177, 193, 196, 283, 328, 333, 414, 417, 442, 445, 462, 465, 490, 493, 494, 497, 572, 593, 889, 890, 891, 895, 897, 898, 899, 902, 904, 907, 909, 914, 917, 918, 921, 922, 925], "ask": [16, 132, 134, 149, 953], "perfectli": 16, "happi": [16, 18, 149], "abund": 16, "better": [16, 115, 130, 131, 134, 135, 136], "ll": [16, 17, 19, 119, 126, 129, 135], "give": [16, 18, 19, 115, 117, 118, 119, 123, 134, 785, 815, 818], "two": [16, 69, 74, 75, 118, 119, 121, 125, 126, 131, 135, 137, 175, 176, 177, 190, 191, 210, 213, 228, 232, 233, 237, 246, 273, 278, 333, 389, 392, 529, 532, 572, 580, 697, 698, 701, 706, 708, 709, 711, 712, 714, 715, 717, 718, 720, 721, 724, 725, 727, 729, 731, 732, 734, 735, 737, 738, 740, 741, 743, 744, 745, 747, 748, 750, 751, 753, 757, 759, 760, 762, 785, 833, 836, 889, 890, 891, 895, 896, 897, 953], "streamlin": 16, "workflow": [16, 19, 135, 147, 953], "save": [16, 72, 73, 121, 130, 149, 572, 633, 987, 988], "week": [16, 19, 20, 953], "let": [16, 118, 119, 121, 126, 127, 128, 132, 134, 135, 136, 137, 909, 918, 921, 930, 933, 934, 937, 938, 941, 953], "sai": [16, 18, 124, 134], "deepmind": 16, "releas": [16, 18, 20, 953], "awesom": 16, "paper": 16, "love": 16, "choic": [16, 18, 129, 135, 909, 930, 933, 938, 941], "perceiverio": 16, "happen": [16, 18, 19, 121, 135], "slew": 16, "rush": 16, "f": [16, 21, 69, 115, 121, 126, 130, 132, 135, 137, 333, 438, 441, 572, 613, 617], "g": [16, 115, 126, 149, 246, 251, 274, 283, 299, 872, 877, 878, 880, 889, 890, 891, 895, 897, 909, 914, 917, 922, 925, 926, 929, 934, 937], "inevit": 16, "deviat": [16, 121, 867, 868, 871, 872, 877, 909, 930, 933, 989, 990], "origin": [16, 72, 73, 74, 75, 76, 123, 124, 127, 132, 134, 333, 365, 368, 697, 725, 727, 785, 815, 818, 819, 822], "often": [16, 121, 122, 130, 149], "erron": 16, "train": [16, 122, 126, 128, 135, 136, 137, 147, 148, 149, 646, 648, 651, 653, 655, 666, 668, 953], "poor": 16, "converg": 16, "perform": [16, 72, 73, 116, 117, 119, 121, 122, 123, 125, 126, 128, 129, 132, 135, 149, 160, 165, 175, 204, 205, 207, 208, 283, 572, 590, 594, 595, 596, 614, 615, 616, 646, 653, 655, 658, 660, 666, 668, 670, 672, 674, 676, 684, 692, 694, 697, 748, 750, 845, 846, 847, 848, 849, 856, 857, 942, 943, 946, 948, 951], "issu": [16, 17, 20, 121, 132, 134, 136, 149], "etc": [16, 18, 19, 20, 67, 68, 72, 73, 113, 114, 116, 117, 119, 121, 125, 126, 127, 132, 134, 135, 149, 175, 204, 205, 207, 208, 572, 600, 601, 604, 625, 628, 629, 872, 873, 874, 875, 878, 880, 889, 890, 891, 895, 897, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 995, 997, 998], "publish": [16, 149], "manag": [16, 17, 129, 149, 283], "get": [16, 17, 18, 20, 69, 72, 73, 115, 121, 122, 127, 128, 129, 132, 133, 134, 135, 136, 246, 264, 265, 266, 269, 283, 292, 293, 302, 303, 316, 317, 322, 326, 329, 332, 572, 579, 606, 607, 608, 627, 953, 959, 975, 984], "work": [16, 18, 19, 20, 115, 121, 126, 127, 128, 131, 132, 133, 134, 136, 137, 953, 959], "repositori": [16, 18, 19, 21, 120, 130], "pull": [16, 17, 18, 21, 116, 149], "request": [16, 17, 116, 283, 319], "confus": [16, 129], "do": [16, 18, 19, 20, 72, 73, 116, 117, 118, 119, 122, 123, 124, 125, 126, 127, 128, 129, 132, 134, 135, 136, 137, 149, 333, 525, 528, 572, 616, 646, 662, 664, 682, 849, 850, 859, 860, 861], "don": [16, 18, 19, 20, 67, 68, 113, 114, 121, 127, 136, 149], "expect": [16, 121, 149, 572, 579, 953], "codebas": [16, 17, 115, 116, 129, 131, 283, 325, 326, 953], "total": [16, 17, 19, 72, 73, 74, 75, 76, 119, 121, 128, 135, 136, 149, 283, 329, 884, 887, 909, 930, 933, 938, 941], "hour": 16, "spent": 16, "spin": 16, "off": [16, 131, 697, 709, 711, 757, 759], "test": [16, 18, 20, 115, 119, 130, 149, 246, 271, 272, 333, 446, 449, 450, 453, 454, 457, 942, 943, 946, 948, 951], "error": [16, 18, 72, 73, 117, 121, 125, 128, 130, 134, 149, 160, 161, 283, 333, 418, 421, 909, 914, 917, 922, 925, 987, 988, 991, 995], "iter": [16, 26, 27, 28, 29, 30, 67, 68, 69, 72, 73, 74, 75, 76, 113, 114, 126, 132, 135, 172, 173, 283, 305, 306, 308, 309, 310, 311, 314, 327, 572, 573, 576, 629, 634, 785, 795, 798, 811, 814, 824, 837, 840, 841, 844, 849, 850, 851, 855, 859, 860, 861], "address": [16, 19, 20, 125, 132], "sake": 16, "singl": [16, 19, 72, 73, 116, 117, 119, 121, 122, 124, 126, 129, 132, 135, 136, 137, 149, 283, 292, 293, 312, 313, 314, 315, 572, 642, 645, 872, 877, 878, 880, 889, 890], "multipl": [16, 19, 72, 73, 83, 84, 85, 86, 93, 94, 97, 98, 101, 102, 119, 122, 126, 149, 333, 347, 351, 504, 507, 572, 573, 575, 576, 577, 601, 605, 622, 697, 698, 701, 702, 718, 720, 785, 786, 789, 790, 819, 822, 823, 824, 867, 868, 871, 874, 876, 884, 885, 886, 909, 914, 917, 918, 921, 922, 925, 926, 929, 930, 933, 934, 937, 938, 941, 942, 943, 946, 948, 951, 975, 985], "line": [16, 18, 119, 121, 125, 130, 133, 134, 135, 136, 147, 953, 959], "convert": [16, 26, 27, 28, 29, 30, 72, 73, 121, 125, 132, 149, 150, 158, 175, 179, 182, 215, 218, 246, 250, 251, 283, 299, 300, 301, 302, 322, 329, 332, 572, 635, 641, 642, 697, 766, 768, 849, 851, 861, 862, 965], "directli": [16, 19, 116, 117, 118, 121, 122, 125, 126, 127, 128, 129, 132, 134, 136, 137, 148, 149, 849, 861], "graph": [16, 122, 126, 133, 149, 646, 653, 655, 658, 660, 666, 668, 670, 672, 674, 676, 889, 890, 891, 895, 897, 987, 988], "guarante": [16, 125, 149, 889, 890], "turn": [16, 119, 121, 126], "4": [16, 21, 37, 38, 47, 48, 51, 52, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 119, 121, 123, 126, 132, 134, 135, 136, 137, 160, 162, 163, 165, 175, 199, 202, 210, 213, 223, 226, 241, 245, 246, 255, 257, 258, 259, 283, 305, 321, 333, 334, 336, 337, 338, 347, 348, 349, 350, 351, 352, 355, 356, 358, 359, 360, 365, 368, 373, 376, 393, 396, 397, 399, 400, 405, 408, 430, 432, 433, 442, 445, 462, 465, 502, 503, 509, 512, 513, 516, 529, 532, 545, 548, 549, 552, 558, 559, 561, 562, 563, 564, 566, 567, 572, 581, 590, 599, 600, 601, 603, 604, 605, 635, 640, 646, 648, 650, 651, 652, 684, 687, 688, 689, 691, 694, 696, 697, 698, 699, 701, 703, 705, 706, 708, 709, 711, 718, 720, 729, 731, 735, 737, 754, 756, 757, 759, 769, 780, 783, 785, 786, 787, 788, 789, 790, 791, 794, 799, 802, 803, 806, 811, 814, 815, 818, 819, 821, 822, 823, 824, 833, 836, 867, 868, 871, 872, 873, 874, 876, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 894, 895, 898, 899, 902, 909, 910, 913, 914, 917, 942, 943, 946, 953, 991, 992, 993, 994, 996], "step": [16, 18, 19, 21, 41, 42, 72, 73, 77, 78, 87, 88, 119, 123, 125, 126, 127, 128, 132, 135, 136, 137, 148, 175, 176, 177, 178, 204, 205, 207, 208, 283, 646, 648, 649, 650, 651, 652, 653, 654, 655, 656, 658, 660, 666, 667, 668, 669, 670, 672, 674, 676, 845, 846, 847, 848, 953, 991, 992, 993, 994, 995, 996], "take": [16, 17, 18, 19, 118, 119, 121, 126, 127, 128, 132, 134, 136, 137, 149, 333, 393, 396, 953, 959], "few": [16, 19, 20, 121, 122, 126, 127, 128, 129, 130, 133, 134, 135, 136, 147, 953, 959], "second": [16, 18, 119, 121, 129, 134, 246, 273, 278, 283, 314, 333, 347, 350, 373, 376, 381, 384, 385, 388, 389, 392, 393, 396, 414, 417, 434, 437, 442, 445, 458, 461, 462, 465, 482, 485, 486, 489, 494, 497, 498, 501, 504, 507, 513, 516, 521, 524, 553, 557, 572, 580, 627, 632, 646, 648, 651, 653, 655, 666, 668, 697, 703, 705, 709, 711, 712, 714, 721, 724, 735, 737, 741, 743, 748, 750, 754, 756, 760, 762, 785, 829, 832, 833, 836, 845, 847, 889, 890, 891, 895, 991, 992, 993], "automat": [16, 18, 19, 115, 117, 122, 126, 131, 132, 133, 136, 137, 953], "convers": [16, 27, 28, 29, 30, 72, 73, 131, 133, 137, 148, 149, 953, 959], "everyon": [16, 17, 19, 149], "regardless": [16, 17, 72, 73, 134, 137, 172, 173], "wouldn": 16, "nice": [16, 121], "write": [16, 19, 20, 21, 72, 73, 115, 116, 118, 119, 122, 123, 129, 132, 134, 137, 160, 161, 162, 163, 164, 165, 166, 169, 171, 175, 176, 177, 179, 182, 184, 185, 188, 190, 191, 193, 196, 198, 199, 202, 204, 205, 207, 208, 220, 221, 223, 226, 228, 232, 233, 237, 238, 240, 241, 245, 246, 252, 254, 283, 328, 333, 334, 337, 339, 342, 343, 346, 347, 350, 352, 355, 356, 359, 361, 364, 365, 368, 369, 372, 373, 376, 377, 380, 381, 384, 385, 388, 389, 392, 393, 396, 397, 400, 401, 404, 405, 408, 409, 412, 414, 417, 418, 421, 422, 425, 426, 429, 430, 433, 434, 437, 438, 441, 442, 445, 446, 449, 450, 453, 454, 457, 458, 461, 466, 469, 470, 473, 474, 477, 478, 481, 482, 485, 486, 489, 490, 493, 494, 497, 498, 501, 502, 503, 504, 507, 509, 512, 513, 516, 517, 520, 521, 524, 525, 528, 529, 532, 533, 536, 537, 540, 541, 544, 545, 548, 549, 552, 553, 557, 558, 562, 563, 567, 568, 571, 572, 584, 585, 587, 590, 591, 594, 595, 596, 598, 600, 601, 604, 612, 625, 628, 629, 646, 679, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 695, 696, 697, 698, 701, 703, 705, 706, 708, 709, 711, 715, 717, 718, 720, 721, 724, 725, 727, 729, 731, 732, 734, 735, 737, 738, 740, 744, 745, 747, 748, 750, 751, 753, 754, 756, 757, 759, 760, 762, 763, 765, 766, 768, 769, 770, 773, 775, 778, 780, 783, 785, 786, 789, 791, 794, 795, 798, 799, 802, 803, 806, 807, 810, 811, 814, 815, 818, 819, 822, 825, 828, 829, 832, 833, 836, 837, 840, 841, 844, 867, 868, 871, 872, 873, 874, 875, 877, 878, 880, 883, 884, 888, 889, 897, 898, 899, 902, 904, 907, 909, 910, 913, 914, 917, 918, 921, 922, 925, 926, 929, 930, 933, 934, 937, 938, 941, 942, 943, 946, 948, 951], "onc": [16, 18, 19, 121, 126, 127, 128, 132, 135, 149, 283, 327, 697, 718, 720, 748, 750, 872, 873], "know": [16, 19, 121, 889, 890, 891, 895, 897], "among": [16, 72, 73, 121], "frantic": 16, "port": 16, "lucid": 16, "honk": 16, "improv": [16, 19, 122, 132], "understand": [16, 18, 19, 20, 21, 115, 117, 118, 119, 120, 130, 131], "pattern": [16, 72, 73, 118, 127, 572, 594, 595, 596], "hasn": 16, "chang": [16, 18, 19, 20, 21, 24, 25, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 47, 48, 51, 52, 59, 60, 70, 71, 79, 80, 83, 84, 85, 86, 87, 88, 93, 94, 97, 98, 101, 102, 105, 106, 118, 120, 121, 126, 132, 136, 149, 166, 167, 168, 170, 179, 180, 185, 186, 193, 194, 199, 200, 215, 216, 223, 224, 228, 230, 233, 235, 241, 243, 255, 256, 257, 259, 283, 334, 335, 336, 338, 347, 348, 349, 351, 356, 357, 358, 360, 397, 398, 399, 430, 431, 432, 558, 559, 560, 561, 563, 564, 565, 566, 573, 574, 575, 577, 601, 602, 603, 605, 648, 649, 650, 652, 697, 698, 699, 700, 702, 703, 705, 785, 786, 787, 788, 790, 815, 818, 819, 820, 821, 823, 849, 851, 861, 874, 876, 891, 892, 893, 894, 953, 959], "now": [16, 18, 21, 72, 73, 116, 117, 121, 124, 126, 127, 130, 134, 135, 137, 148, 149, 975, 986, 987, 988], "spend": 16, "torchvis": 16, "probabl": [16, 121, 684, 692, 872, 873, 975, 983], "sonnet": 16, "about": [16, 18, 19, 120, 121, 131, 132, 136, 137, 149, 246, 266, 269], "next": [16, 18, 19, 20, 21, 118, 119, 123, 124, 130, 134, 135, 246, 266, 953, 987, 988, 991, 992, 993, 994, 995, 996], "everyth": [16, 19, 20, 121, 133, 149], "zero": [16, 72, 73, 74, 75, 117, 119, 125, 126, 127, 128, 132, 135, 136, 160, 162, 163, 175, 184, 190, 191, 210, 213, 228, 232, 233, 237, 241, 245, 246, 252, 333, 347, 350, 352, 355, 356, 359, 381, 384, 405, 408, 426, 429, 430, 433, 490, 493, 494, 497, 502, 503, 504, 507, 509, 512, 513, 516, 521, 524, 525, 528, 529, 532, 545, 548, 549, 552, 558, 562, 563, 567, 572, 590, 625, 628, 629, 646, 648, 651, 653, 655, 666, 668, 670, 672, 684, 692, 697, 698, 701, 706, 708, 721, 724, 729, 731, 738, 740, 760, 762, 763, 765, 785, 799, 802, 803, 806, 811, 814, 819, 822, 841, 844, 867, 868, 871, 872, 874, 875, 884, 885, 886, 887, 889, 890, 891, 895, 897, 909, 914, 917, 918, 921, 922, 925, 926, 929, 930, 933, 934, 937, 938, 941, 942, 943, 946, 948, 951, 953, 966, 975, 976, 977, 978, 979, 980, 981, 982, 983, 985, 991, 992, 993, 994], "need": [16, 18, 19, 20, 21, 116, 118, 119, 120, 122, 125, 126, 129, 132, 134, 135, 148, 149, 572, 584, 585, 587, 785, 786, 789, 799, 802], "said": 16, "high": [16, 20, 72, 73, 101, 102, 135, 872, 874, 875, 876, 878, 879, 880, 881], "level": [16, 17, 20, 122, 131, 132, 135, 136, 137, 149], "optim": [16, 129, 133, 135, 137, 148, 283, 646, 653, 655, 658, 660, 666, 668, 670, 672, 674, 676, 845, 846, 847, 848, 953, 992, 993, 994, 996], "trainer": [16, 147, 149, 953], "statu": 16, "quo": 16, "kera": 16, "dopamin": 16, "ignit": 16, "catalyst": 16, "lightn": 16, "fastai": 16, "haiku": [16, 137], "flax": [16, 137, 149], "trax": [16, 137], "objax": [16, 137], "idea": [16, 130, 148], "fulli": [16, 117, 125, 126, 132, 133, 134, 135, 136, 137, 149, 975, 985, 986], "offer": [16, 136], "strongli": [17, 18, 953, 959], "welcom": [17, 18, 19, 953, 959], "absolut": [17, 72, 73, 333, 334, 337, 697, 744], "skill": 17, "whether": [17, 18, 26, 27, 28, 29, 30, 72, 73, 74, 75, 76, 113, 114, 117, 127, 129, 160, 161, 172, 173, 246, 252, 264, 270, 271, 272, 282, 283, 302, 303, 314, 318, 319, 322, 323, 327, 330, 332, 333, 454, 457, 572, 573, 576, 580, 581, 590, 593, 597, 599, 609, 611, 613, 616, 617, 618, 619, 620, 621, 622, 634, 638, 644, 645, 646, 653, 655, 657, 658, 660, 662, 664, 666, 668, 670, 672, 674, 676, 679, 683, 684, 692, 697, 712, 714, 845, 846, 847, 848, 849, 850, 851, 855, 859, 860, 861, 862, 872, 873, 942, 943, 946, 948, 951, 964, 965, 975, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996], "vetern": 17, "beginn": 17, "start": [17, 18, 19, 20, 21, 72, 73, 77, 78, 115, 118, 119, 127, 131, 132, 134, 135, 136, 148, 149, 175, 176, 177, 178, 204, 205, 206, 207, 208, 209, 283, 298], "aspect": [17, 135, 953], "guid": [17, 18, 19, 130, 953], "through": [17, 19, 20, 115, 119, 121, 122, 123, 126, 130, 131, 132, 134, 135, 136, 137, 148, 333, 365, 368], "journei": [17, 953, 959], "inclusvi": 17, "big": [17, 149], "team": [17, 18, 19], "board": 17, "contributor": [17, 18, 19, 131, 953], "split": [17, 19, 72, 73, 131, 132, 149, 283, 292, 308, 309, 310, 311, 325, 326, 327, 572, 622, 785, 953], "section": [17, 19, 20, 115, 116, 117, 118, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 135, 136, 889, 890, 891, 895, 897], "below": [17, 18, 20, 21, 115, 116, 119, 121, 122, 126, 127, 128, 129, 130, 132, 133, 134, 135, 136, 137, 148, 175, 228, 232, 233, 237, 333, 373, 376, 393, 396, 405, 408, 529, 532, 563, 567, 697, 706, 708, 709, 711, 757, 759, 785, 799, 802, 803, 806, 889, 890, 898, 899, 902, 953], "best": [17, 18, 19, 20, 21, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 572, 622], "go": [17, 18, 19, 20, 115, 116, 119, 126, 131, 135, 149, 849, 860], "finish": [17, 18, 115, 953], "dive": [17, 19, 20, 131, 134, 135, 149, 953], "right": [17, 18, 19, 72, 73, 115, 119, 135, 333, 381, 384, 389, 392, 697, 748, 750], "environ": [17, 19, 21, 148], "basic": [17, 20, 21], "fork": [17, 18, 572, 623], "doc": [17, 20, 117, 118, 132, 135, 136, 953], "document": [17, 19, 121, 133, 135, 137], "local": [17, 18, 21, 122], "task": [17, 19, 148, 845, 846, 847, 848, 953], "help": [17, 18, 23, 69, 119, 121, 123, 125, 126, 134, 135, 136, 147, 572, 578, 909, 934, 937, 953], "video": [17, 19, 117, 118, 119], "realli": [18, 126, 149], "contribut": [18, 19, 20, 132, 959], "toward": [18, 132, 785, 819, 822, 953, 959], "page": [18, 19, 133, 137, 147, 953, 959], "explain": [18, 19, 20, 116, 117, 118, 119, 121, 122, 123, 125, 126, 127, 128, 129, 130, 132, 133, 134, 135, 136, 137, 953, 959], "main": [18, 21, 124, 126, 175, 190, 191, 228, 232, 233, 237, 697, 709, 711, 757, 759], "prefer": [18, 126], "mode": [18, 47, 48, 72, 73, 119, 126, 149, 172, 173, 283, 312, 313, 314, 315, 327, 333, 347, 350, 504, 507, 697, 741, 742, 743], "git": [18, 19, 121], "recurs": [18, 21, 26, 27, 28, 29, 30, 72, 73, 122, 126, 136, 149, 849, 850, 851, 859, 860, 861], "submodul": [18, 19, 20, 21, 120, 121, 122, 128, 131, 132, 136, 953, 989, 990, 997, 998], "com": 18, "unifyai": [18, 21], "http": [18, 118, 175, 176, 177, 179, 182, 184, 185, 188, 190, 191, 193, 196, 198, 199, 202, 204, 205, 220, 221, 223, 226, 228, 232, 233, 237, 238, 240, 241, 245, 246, 255, 258, 333, 334, 337, 352, 355, 356, 359, 393, 396, 397, 400, 405, 408, 430, 433, 513, 516, 545, 548, 549, 552, 646, 648, 651, 653, 655, 697, 709, 711, 785, 799, 802, 819, 822, 889, 890, 891, 895, 898, 899, 902, 909, 914, 917], "gh": 18, "your_fold": 18, "id": [18, 125, 126, 130, 283, 302, 987, 988], "cours": [18, 19, 119, 135, 149], "whatev": [18, 149], "integr": [18, 246, 252], "familiar": [18, 20], "decid": [18, 72, 73, 849, 860], "sure": [18, 20, 120, 121], "elig": 18, "free": [18, 19, 20, 21, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 131, 148, 953], "student": 18, "licenc": 18, "peopl": [18, 19, 115], "seem": [18, 136, 149], "miss": [18, 119, 121, 125, 126, 130, 991, 995], "add": [18, 19, 20, 37, 38, 67, 68, 72, 73, 74, 75, 83, 84, 85, 86, 113, 114, 115, 116, 117, 118, 121, 122, 123, 125, 126, 132, 134, 149, 333, 334, 337, 351, 573, 577, 646, 683, 867, 868, 871, 953, 959, 989, 990], "explicit": [18, 21, 126, 127, 129, 132, 149], "remind": 18, "channel": [18, 19, 20, 21, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 572, 599, 975, 976, 977, 978, 979, 980, 981, 982, 984, 985], "pace": 18, "updat": [18, 19, 20, 21, 69, 72, 73, 115, 117, 119, 120, 124, 125, 126, 127, 132, 134, 135, 137, 149, 283, 292, 572, 616, 628, 629, 646, 648, 651, 653, 655, 658, 660, 666, 668, 670, 672, 674, 676, 684, 694, 845, 846, 847, 849, 856, 857, 865, 866, 964, 965, 991, 992, 993, 994, 995, 996], "suggest": [18, 19, 116, 121], "latest": [18, 20, 21, 118, 149, 175, 176, 177, 179, 182, 184, 185, 188, 190, 191, 193, 196, 198, 199, 202, 204, 205, 220, 221, 223, 226, 228, 232, 233, 237, 238, 240, 241, 245, 246, 255, 258, 333, 334, 337, 352, 355, 356, 359, 393, 396, 397, 400, 405, 408, 430, 433, 513, 516, 545, 548, 549, 552, 697, 709, 711, 785, 799, 802, 819, 822, 889, 890, 891, 895, 898, 899, 902, 909, 914, 917, 975, 984], "packag": [18, 21, 130, 149], "ensur": [18, 19, 117, 121, 125, 127, 130, 572, 616], "align": [18, 72, 73, 132, 134, 953, 959], "accord": [18, 21, 72, 73, 122, 127, 246, 255, 258, 266, 333, 347, 350, 389, 392, 504, 507, 572, 600, 628, 629, 697, 760, 762, 785, 795, 798, 841, 844, 909, 930, 933, 938, 941], "stabl": [18, 61, 62, 107, 108, 132, 149, 572, 607, 608, 630, 631, 636, 637, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908], "pypi": [18, 20, 149], "mayb": [18, 26, 29, 30, 132, 134], "person": [18, 19], "experi": [18, 133, 135, 149], "avoid": [18, 19, 121, 123, 124, 126, 130, 134, 283, 333, 426, 429], "pip": [18, 148, 953], "instal": [18, 21, 130, 148, 953], "abil": [18, 133, 149], "certain": [18, 72, 73, 121, 149, 175, 176, 177, 204, 205, 207, 208], "perhap": [18, 134, 135, 136, 149], "keep": [18, 19, 72, 73, 120, 121, 126, 133, 135, 137, 572, 644], "track": [18, 19, 283, 849, 861, 987, 988], "termin": [18, 19, 21, 72, 73, 74, 75, 76, 126, 132, 135], "run": [18, 21, 117, 120, 121, 123, 130, 132, 133, 134, 135, 136, 137, 148, 149, 283, 292, 646, 648, 651, 653, 655, 666, 668, 845, 846, 847, 848, 975, 986, 987, 988], "command": [18, 21, 953], "ivy_dev": [18, 19, 21], "name": [18, 19, 21, 23, 69, 118, 121, 130, 132, 134, 135, 137, 172, 173, 572, 578, 697, 712, 714, 741, 743, 748, 750, 889, 890, 891, 895], "3": [18, 21, 33, 34, 37, 38, 39, 40, 41, 42, 47, 48, 51, 52, 74, 75, 79, 80, 83, 84, 85, 86, 87, 88, 93, 94, 97, 98, 101, 102, 105, 106, 119, 121, 123, 126, 132, 134, 135, 136, 137, 160, 162, 163, 164, 165, 174, 175, 199, 202, 210, 213, 223, 226, 238, 240, 241, 245, 246, 255, 256, 257, 258, 259, 283, 302, 305, 321, 328, 333, 334, 336, 337, 338, 347, 348, 349, 350, 351, 352, 355, 356, 357, 358, 359, 360, 373, 376, 389, 392, 393, 396, 397, 399, 400, 405, 408, 422, 425, 430, 431, 432, 433, 438, 441, 442, 445, 458, 461, 462, 465, 502, 503, 509, 512, 513, 516, 529, 532, 545, 548, 549, 552, 558, 559, 561, 562, 563, 564, 566, 567, 572, 573, 574, 575, 580, 581, 590, 597, 600, 601, 602, 603, 604, 605, 634, 635, 640, 642, 646, 648, 649, 650, 651, 652, 684, 685, 686, 687, 689, 690, 691, 696, 697, 698, 699, 700, 701, 702, 703, 705, 706, 708, 709, 711, 718, 720, 729, 731, 735, 737, 748, 750, 754, 756, 757, 759, 766, 768, 769, 770, 773, 780, 783, 785, 786, 787, 788, 789, 790, 791, 794, 799, 802, 803, 806, 811, 814, 815, 818, 819, 821, 822, 823, 824, 825, 828, 833, 836, 867, 868, 871, 872, 873, 874, 875, 876, 877, 878, 880, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 894, 895, 898, 899, 902, 909, 910, 913, 914, 917, 934, 937, 942, 943, 946, 953], "8": [18, 21, 51, 52, 74, 75, 83, 84, 101, 102, 119, 121, 126, 131, 135, 160, 164, 283, 305, 333, 347, 350, 351, 356, 359, 360, 373, 376, 397, 400, 405, 408, 442, 445, 462, 465, 502, 503, 529, 532, 545, 548, 549, 552, 563, 567, 572, 581, 600, 646, 648, 651, 684, 691, 697, 703, 705, 706, 708, 709, 711, 735, 737, 754, 756, 769, 770, 773, 785, 786, 787, 789, 803, 806, 811, 814, 824, 872, 873, 874, 875, 876, 884, 888, 889, 890, 909, 910, 913, 953, 975, 986], "activ": [18, 19, 21, 25, 67, 68, 71, 113, 114, 116, 136, 161, 162, 163, 164, 165, 166, 169, 171, 953, 962, 963], "setup": 18, "click": [18, 19, 118, 953], "icon": [18, 19], "side": [18, 19], "choos": [18, 19, 137, 283, 328, 333, 490, 493, 494, 497, 884, 888, 889, 890, 891, 895, 897, 909, 914, 917, 918, 921, 922, 925], "left": [18, 19, 72, 73, 119, 127, 333, 381, 384, 697, 712, 714, 725, 727, 748, 750, 884, 885, 953], "panel": 18, "select": [18, 19, 121, 132, 134, 137, 149], "drop": [18, 149], "down": [18, 121, 134], "path": [18, 21], "manual": [18, 19, 121, 136, 849, 850, 859, 860], "builtin": [18, 21, 134, 136], "requir": [18, 21, 116, 117, 118, 119, 121, 124, 125, 127, 128, 134, 149, 172, 173, 333, 545, 548, 697, 712, 714, 785, 829, 832, 964, 965], "cmd": [18, 21], "directori": [18, 19, 21, 121, 572, 633], "folder": [18, 19, 21, 116, 120, 121, 122], "file": [18, 19, 21, 72, 73, 116, 118, 121, 122, 123, 125, 126, 130, 132, 135, 572, 633, 987, 988], "abov": [18, 19, 21, 117, 118, 119, 121, 122, 123, 125, 126, 129, 130, 134, 135, 136, 137, 175, 176, 177, 179, 182, 184, 185, 188, 190, 191, 193, 196, 198, 199, 202, 204, 205, 207, 208, 210, 213, 220, 221, 223, 226, 228, 232, 233, 237, 238, 240, 241, 245, 246, 255, 258, 333, 334, 337, 347, 350, 352, 355, 356, 359, 373, 376, 393, 396, 397, 400, 405, 408, 430, 433, 504, 507, 513, 516, 529, 532, 545, 548, 549, 552, 558, 562, 563, 567, 572, 600, 684, 687, 696, 697, 698, 701, 706, 708, 709, 711, 712, 714, 757, 759, 785, 799, 802, 803, 806, 819, 822, 867, 868, 871, 872, 874, 875, 889, 890, 891, 895, 898, 899, 902, 909, 914, 917, 926, 929, 930, 933, 934, 937, 942, 943, 946], "m": [18, 19, 21, 115, 132, 175, 210, 213, 228, 232, 233, 237, 572, 581, 697, 698, 701, 706, 708, 709, 711, 712, 714, 715, 717, 718, 720, 721, 724, 729, 731, 732, 734, 735, 737, 738, 740, 741, 743, 745, 747, 748, 750, 751, 753, 757, 759, 872, 877, 878, 880], "python3": [18, 21], "script": [18, 19, 21, 119, 132, 149], "bat": [18, 19, 21], "OR": [18, 19, 21, 333, 385, 388, 494, 497, 942, 948, 951], "bin": [18, 19, 21], "mac": [18, 19, 21], "linux": [18, 19, 21], "virtualenv": 18, "found": [18, 19, 69, 72, 73, 74, 75, 76, 118, 125, 126, 130, 283, 317], "os": 18, "note": [18, 19, 116, 118, 119, 121, 126, 333, 525, 528, 697, 712, 714, 748, 750, 785, 829, 832, 889, 891, 895, 909, 918, 921], "tick": [18, 19], "abl": [18, 19, 72, 73, 122, 127, 129, 130, 134, 137], "To": [18, 119, 121, 122, 126, 130, 135, 136, 137, 953], "ivy_test": [18, 19], "test_array_api": [18, 19, 120, 121], "cd": [18, 19, 21], "r": [18, 72, 73, 572, 581, 644, 697, 741, 743, 766, 768], "txt": 18, "visual": [18, 130, 149], "jetbrain": 18, "remot": 18, "mitig": 18, "potenti": [18, 131, 333, 426, 429], "conflict": [18, 19, 135], "addit": [18, 19, 72, 73, 116, 118, 121, 126, 127, 134, 135, 137, 283, 328, 333, 347, 350, 572, 594, 595, 596, 867, 868, 871, 975, 985], "yet": [18, 20, 126], "particular": [18, 19, 116, 121, 129, 333, 334, 337], "system": [18, 149, 697, 745, 747], "instruct": [18, 20], "desktop": 18, "wsl": 18, "powershel": 18, "admin": 18, "visit": 18, "link": 18, "imag": [18, 21, 44, 90, 116, 132, 133, 135, 137, 148, 684, 685, 686, 687, 688, 690, 691, 953], "profession": 18, "execut": [18, 21, 126, 129, 132, 134, 137, 149, 572, 643], "deploy": 18, "top": [18, 19, 121, 135, 136, 953], "press": [18, 135, 953], "ok": 18, "correctli": [18, 72, 73, 117, 121, 126, 127, 130, 136, 149, 697, 725, 727, 884, 885], "caus": [18, 19, 119, 121, 126, 129, 130, 149], "earlier": [18, 19], "might": [18, 19, 116, 121, 124, 132, 134, 135, 572, 593], "necessari": [18, 119, 123, 126, 129], "virtualis": 18, "detail": [18, 19, 20, 116, 117, 120, 121, 122, 123, 124, 126, 135, 136, 175, 193, 196, 889, 890, 891, 895, 897], "sudo": 18, "apt": 18, "ca": 18, "certif": 18, "curl": 18, "gnupg": 18, "lsb": 18, "mkdir": 18, "p": [18, 19, 72, 73, 85, 86, 175, 210, 213, 572, 584, 585, 586, 587, 684, 692, 697, 725, 727, 763, 765, 975, 983], "keyr": 18, "fssl": 18, "download": [18, 121], "gpg": 18, "dearmor": 18, "o": [18, 115, 132, 572, 581], "echo": 18, "deb": 18, "arch": 18, "dpkg": 18, "architectur": [18, 137, 149], "lsb_releas": 18, "cs": 18, "tee": 18, "list": [18, 20, 21, 26, 27, 28, 29, 30, 31, 32, 67, 68, 69, 72, 73, 87, 88, 105, 106, 113, 114, 116, 117, 119, 121, 127, 128, 130, 132, 135, 136, 137, 149, 175, 176, 177, 179, 182, 184, 210, 211, 213, 215, 218, 220, 221, 238, 240, 246, 253, 283, 292, 293, 302, 304, 305, 308, 309, 312, 313, 327, 572, 581, 635, 640, 644, 646, 648, 650, 652, 683, 684, 685, 686, 687, 688, 689, 690, 691, 697, 754, 756, 785, 791, 794, 803, 806, 824, 829, 832, 849, 850, 851, 855, 860, 861, 867, 868, 871, 884, 887, 889, 891, 892, 894, 895, 953, 975, 976, 977, 978, 979, 980, 981, 982], "dev": [18, 72, 73, 74, 76, 122, 128, 132, 134, 136, 283, 292, 317], "null": 18, "ce": 18, "cli": 18, "containerd": 18, "io": 18, "compos": [18, 121, 126, 149], "plugin": 18, "systemctl": 18, "permiss": 18, "relat": [18, 19, 121, 130, 148, 283], "post": [18, 137, 867, 868, 871, 953, 959], "It": [18, 19, 21, 23, 69, 115, 116, 118, 119, 121, 123, 125, 126, 129, 132, 134, 135, 136, 160, 161, 162, 163, 164, 165, 166, 169, 171, 175, 176, 177, 179, 182, 184, 185, 188, 190, 191, 193, 196, 198, 199, 202, 204, 205, 207, 208, 220, 221, 223, 226, 228, 232, 233, 237, 238, 240, 241, 245, 246, 252, 254, 283, 328, 333, 334, 337, 339, 342, 343, 346, 347, 350, 352, 355, 356, 359, 361, 364, 365, 368, 369, 372, 373, 376, 377, 380, 381, 384, 385, 388, 389, 392, 393, 396, 397, 400, 401, 404, 405, 408, 409, 412, 414, 417, 418, 421, 422, 425, 426, 429, 430, 433, 434, 437, 438, 441, 442, 445, 446, 449, 450, 453, 454, 457, 458, 461, 466, 469, 470, 473, 474, 477, 478, 481, 482, 485, 486, 489, 490, 493, 494, 497, 498, 501, 502, 503, 504, 507, 509, 512, 513, 516, 517, 520, 521, 524, 525, 528, 529, 532, 533, 536, 537, 540, 541, 544, 545, 548, 549, 552, 553, 557, 558, 562, 563, 567, 568, 571, 572, 584, 585, 587, 590, 594, 595, 596, 598, 601, 604, 612, 625, 628, 629, 646, 679, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 695, 696, 697, 698, 701, 703, 705, 706, 708, 709, 711, 715, 717, 718, 720, 721, 724, 725, 727, 729, 731, 732, 734, 735, 737, 738, 740, 744, 745, 747, 748, 750, 751, 753, 754, 756, 757, 759, 760, 762, 763, 765, 766, 768, 769, 770, 773, 775, 778, 780, 783, 785, 786, 789, 791, 794, 795, 798, 799, 802, 803, 806, 807, 810, 811, 814, 815, 818, 819, 822, 825, 828, 829, 832, 833, 836, 837, 840, 841, 844, 867, 868, 871, 872, 873, 874, 875, 877, 878, 880, 883, 884, 885, 888, 889, 897, 898, 899, 902, 904, 907, 942, 943, 946, 948, 951], "headach": 18, "arm": [18, 19], "m1": 18, "instead": [18, 19, 20, 117, 118, 119, 121, 122, 126, 129, 132, 134, 135, 149], "featur": [18, 116, 117, 135, 953], "vm": 18, "azur": 18, "cloud": [18, 148], "mean": [18, 19, 63, 64, 72, 73, 109, 110, 113, 114, 115, 119, 121, 122, 126, 127, 128, 129, 132, 134, 135, 136, 137, 148, 149, 283, 312, 313, 314, 315, 327, 572, 595, 845, 846, 847, 848, 849, 855, 872, 877, 889, 890, 909, 953, 966], "configur": [18, 19, 21, 72, 73, 127, 283, 326, 849, 862], "defin": [18, 20, 116, 117, 118, 121, 127, 134, 136, 149, 333, 504, 507, 525, 528, 572, 625, 697, 703, 705, 712, 714, 745, 747, 872, 874, 875, 909, 914, 917, 918, 921, 922, 925], "dockerfil": [18, 21], "longer": [18, 121, 127, 129], "worri": 18, "platform": 18, "agnost": [18, 117, 125, 132, 134, 137, 149, 953], "usual": [18, 121], "studio": 18, "favourit": 18, "extens": [18, 19, 118, 121, 175, 176, 177, 179, 182, 184, 185, 188, 190, 191, 193, 196, 198, 199, 202, 204, 205, 210, 213, 220, 221, 223, 226, 228, 232, 233, 237, 238, 240, 241, 245, 246, 255, 258, 333, 334, 337, 347, 350, 352, 355, 356, 359, 373, 376, 393, 396, 397, 400, 405, 408, 430, 433, 462, 465, 513, 516, 529, 532, 545, 548, 549, 552, 558, 562, 563, 567, 697, 706, 708, 709, 711, 785, 799, 802, 803, 806, 819, 822, 889, 890, 891, 895, 898, 899, 902, 909, 914, 917, 942, 943, 946], "theme": 18, "too": [18, 19, 130, 149, 333, 347, 350, 504, 507], "done": [18, 19, 119, 121, 130, 135], "unsupport": [18, 127, 130, 246, 267, 268], "old": [18, 72, 73, 129], "slow": 18, "ipad": 18, "long": [18, 19, 119, 684, 694], "browser": 18, "cool": [18, 116], "requisit": 18, "head": [18, 126, 684, 695, 953, 975, 986], "pane": [18, 19], "readi": [18, 20], "begin": [18, 849, 850, 860], "outlin": [18, 19, 20, 115, 118, 121, 122, 126, 129, 134], "green": [18, 19, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 1000, 1001], "dropdown": 18, "tab": [18, 135, 953], "master": [18, 19, 126], "vs": [18, 121], "view": [18, 19, 69, 175, 193, 196, 684, 687, 691], "log": [18, 19, 37, 38, 83, 84, 122, 126, 129, 132, 135, 175, 207, 208, 333, 474, 477, 482, 485, 697, 744, 953], "built": [18, 121, 133, 175, 176, 177, 283, 975, 986, 987, 988], "bottom": 18, "box": 18, "patient": 18, "upto": 18, "15": [18, 101, 102, 119, 121, 333, 373, 376, 529, 532, 684, 687, 697, 709, 711, 735, 737, 754, 756, 785, 819, 822, 867, 868, 871, 872, 874, 875, 876, 884, 887, 889, 890, 909, 910, 913], "minut": 18, "launch": 18, "12": [18, 101, 102, 119, 121, 126, 333, 373, 376, 393, 396, 405, 408, 529, 532, 572, 590, 608, 646, 648, 651, 697, 709, 711, 735, 737, 754, 756, 785, 803, 806, 811, 814, 819, 822, 867, 868, 871, 872, 874, 875, 876, 884, 888, 889, 890, 909, 910, 913], "output": [18, 72, 73, 115, 116, 117, 118, 119, 121, 122, 125, 126, 128, 129, 132, 134, 136, 137, 149, 160, 161, 162, 163, 164, 165, 166, 169, 171, 175, 176, 177, 179, 182, 184, 185, 188, 190, 191, 193, 196, 198, 199, 202, 204, 205, 207, 208, 210, 213, 220, 221, 223, 226, 228, 232, 233, 237, 238, 240, 241, 245, 246, 252, 254, 283, 292, 293, 327, 328, 333, 334, 337, 339, 342, 343, 346, 347, 350, 352, 355, 356, 359, 361, 364, 365, 368, 369, 372, 373, 376, 377, 380, 381, 384, 385, 388, 389, 392, 393, 396, 397, 400, 401, 404, 405, 408, 409, 412, 414, 417, 418, 421, 422, 425, 426, 429, 430, 433, 434, 437, 438, 441, 442, 445, 446, 449, 450, 453, 454, 457, 458, 461, 466, 469, 470, 473, 474, 477, 478, 481, 482, 485, 486, 489, 490, 493, 494, 497, 498, 501, 502, 503, 504, 507, 509, 512, 513, 516, 517, 520, 521, 524, 525, 528, 529, 532, 533, 536, 537, 540, 541, 544, 545, 548, 549, 552, 553, 557, 558, 562, 563, 567, 568, 571, 572, 583, 584, 585, 587, 590, 591, 594, 595, 596, 598, 600, 601, 604, 612, 625, 628, 629, 646, 657, 679, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 701, 703, 705, 706, 708, 709, 711, 715, 717, 718, 720, 721, 724, 725, 727, 729, 731, 732, 734, 735, 737, 738, 740, 744, 745, 747, 748, 750, 751, 753, 754, 756, 757, 759, 760, 762, 763, 765, 766, 768, 769, 770, 773, 775, 778, 780, 783, 785, 786, 789, 791, 794, 795, 798, 799, 802, 803, 806, 807, 810, 811, 814, 815, 818, 819, 822, 825, 828, 829, 832, 833, 836, 837, 840, 841, 844, 849, 862, 867, 868, 871, 872, 873, 874, 875, 877, 878, 880, 883, 884, 888, 898, 899, 902, 904, 907, 909, 910, 913, 914, 917, 918, 921, 922, 925, 926, 929, 930, 933, 934, 937, 938, 941, 942, 943, 946, 948, 951, 953, 975, 976, 977, 978, 979, 980, 981, 983, 984, 985, 986], "That": [18, 19, 121, 134, 135, 136, 333, 525, 528], "alreadi": [18, 19, 72, 73, 117, 123, 126, 134, 149, 283, 333, 397, 400, 430, 433, 504, 507, 529, 532, 568, 571, 697, 735, 737, 953], "refer": [18, 19, 117, 121, 122, 127, 149, 175, 190, 191, 333, 426, 429, 474, 477, 646, 648, 651, 653, 655, 697, 760, 762, 766, 768, 909, 930, 933, 938, 941, 942, 943, 946, 948, 951, 975, 985], "approach": [18, 19, 121, 122, 126, 134, 135, 149], "colour": 18, "applic": [18, 127, 128, 136, 684, 695, 696, 849, 855, 861], "good": [18, 19, 20, 21, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 132, 136], "chanc": 18, "vscode": 18, "show": [18, 19, 72, 73, 119, 121, 129, 148, 149, 953], "explor": [18, 133, 137, 148], "troubleshoot": 18, "sometim": [18, 19, 121], "ever": [18, 19, 20, 21, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129], "64": [18, 121, 135, 136, 333, 545, 548, 549, 552, 684, 690, 691, 697, 735, 737, 909, 910, 913, 953, 975, 986], "bit": [18, 119, 121, 122, 126, 134, 246, 265, 266, 269, 333, 377, 380, 381, 384, 389, 392, 909, 926, 929, 934, 937], "usr": 18, "more": [18, 19, 20, 115, 116, 117, 119, 121, 122, 123, 124, 125, 126, 129, 130, 131, 132, 133, 134, 135, 136, 137, 148, 149, 175, 176, 177, 246, 253, 333, 426, 429, 697, 721, 724, 785, 803, 806, 889, 890, 891, 895, 897, 953], "nutshel": [18, 117], "hook": 18, "lint": 18, "accept": [18, 19, 26, 117, 118, 119, 121, 122, 125, 126, 128, 129, 134, 175, 176, 177, 179, 182, 184, 185, 188, 190, 191, 193, 196, 198, 199, 202, 204, 205, 207, 208, 210, 213, 220, 221, 223, 226, 228, 232, 233, 237, 238, 240, 241, 245, 246, 255, 258, 333, 334, 337, 347, 350, 352, 355, 356, 359, 373, 376, 393, 396, 397, 400, 405, 408, 430, 433, 490, 493, 494, 497, 513, 516, 525, 528, 529, 532, 545, 548, 549, 552, 558, 562, 563, 567, 572, 600, 684, 687, 696, 697, 698, 701, 706, 708, 709, 711, 785, 799, 802, 803, 806, 819, 822, 867, 868, 871, 889, 890, 891, 895, 898, 899, 902, 909, 914, 917, 918, 921, 942, 943, 946, 953], "fix": [18, 19], "fail": [18, 20, 120, 121, 130, 132, 134], "attempt": [18, 130, 149], "succe": 18, "problemat": 18, "appli": [18, 19, 20, 24, 25, 26, 29, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 47, 48, 51, 52, 59, 60, 70, 71, 72, 73, 79, 80, 83, 84, 85, 86, 87, 88, 93, 94, 97, 98, 101, 102, 105, 106, 117, 118, 119, 121, 122, 124, 126, 127, 128, 129, 132, 134, 135, 136, 137, 147, 149, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 179, 180, 185, 186, 193, 194, 199, 200, 215, 216, 223, 224, 228, 230, 233, 235, 241, 243, 246, 255, 256, 257, 259, 274, 334, 335, 336, 338, 347, 348, 349, 351, 356, 357, 358, 360, 397, 398, 399, 430, 431, 432, 558, 559, 560, 561, 563, 564, 565, 566, 572, 573, 574, 575, 577, 594, 595, 596, 601, 602, 603, 605, 646, 648, 649, 650, 652, 666, 668, 670, 672, 684, 693, 695, 696, 697, 698, 699, 700, 702, 729, 731, 738, 740, 769, 770, 773, 775, 778, 780, 783, 785, 786, 787, 788, 790, 819, 820, 821, 823, 829, 832, 845, 846, 847, 849, 855, 858, 861, 862, 867, 868, 871, 874, 876, 891, 892, 893, 894, 953, 961, 962, 963, 989, 990], "proce": [18, 19, 20, 21, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129], "modifi": [18, 19, 118, 122, 127, 128, 130, 132], "properli": [18, 115], "enter": [18, 19, 117, 125, 127, 128, 283, 646, 683], "unsur": [18, 19, 20, 21, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129], "feel": [18, 19, 20, 21, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 131, 953], "server": [19, 953], "appropri": [19, 67, 68, 113, 114, 121, 124, 333, 347, 350, 504, 507, 884, 885], "context": [19, 119, 121, 126, 127, 128, 283, 572, 623, 684, 695, 975, 986], "suitabl": [19, 116, 126], "quick": [19, 115, 136], "alwai": [19, 20, 72, 73, 116, 117, 118, 121, 122, 123, 125, 126, 129, 130, 132, 134, 149, 246, 252, 333, 347, 350, 504, 507, 572, 616, 646, 662, 664, 679], "correct": [19, 20, 63, 64, 109, 110, 115, 117, 122, 126, 127, 128, 130, 246, 278, 785, 786, 789, 909, 930, 931, 932, 933, 938, 939, 940, 941, 953], "tendenc": 19, "gener": [19, 20, 21, 40, 67, 68, 72, 73, 86, 113, 114, 115, 116, 117, 118, 119, 122, 125, 126, 127, 128, 129, 130, 131, 132, 134, 136, 137, 148, 149, 172, 175, 176, 177, 179, 182, 184, 185, 188, 190, 191, 193, 196, 198, 199, 202, 204, 205, 207, 208, 220, 221, 223, 226, 228, 232, 233, 237, 238, 240, 241, 245, 246, 255, 258, 333, 334, 337, 352, 355, 356, 359, 393, 396, 397, 400, 405, 408, 430, 433, 513, 516, 525, 528, 545, 548, 549, 552, 573, 576, 578, 579, 580, 581, 582, 583, 584, 585, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 604, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 662, 664, 697, 709, 711, 785, 799, 802, 819, 822, 872, 873, 874, 875, 878, 880, 882, 889, 890, 891, 895, 898, 899, 902, 909, 914, 917, 953, 991, 995], "land": 19, "end": [19, 126, 129, 131, 148, 149, 175, 176, 177, 333, 365, 368, 953, 959], "world": 19, "come": [19, 20, 121, 136, 147, 953, 959], "fly": 19, "hard": [19, 134], "receiv": [19, 121, 127, 128, 283, 292, 293, 572, 579, 622, 975, 985], "respons": [19, 21], "internship": 19, "comment": [19, 130], "trigger": 19, "unansw": 19, "label": [19, 132, 133, 137, 769, 770, 773, 775, 778, 780, 783], "respond": 19, "remov": [19, 20, 21, 69, 72, 73, 118, 121, 122, 127, 129, 137, 697, 709, 711, 721, 724, 757, 759, 785, 825, 828, 845, 846, 847], "someon": [19, 149], "els": [19, 20, 69, 116, 122, 123, 129, 132, 134, 136, 137, 149, 572, 582, 593, 597, 849, 859], "strive": [19, 121, 149], "repli": 19, "newli": [19, 121, 129, 172, 173, 246, 252, 572, 583], "place": [19, 72, 73, 115, 116, 117, 118, 119, 121, 122, 126, 128, 130, 137, 175, 176, 177, 179, 182, 184, 185, 188, 190, 191, 193, 196, 198, 199, 202, 204, 205, 207, 208, 210, 213, 215, 218, 220, 221, 223, 226, 228, 232, 233, 237, 238, 240, 241, 245, 246, 255, 258, 283, 328, 333, 334, 337, 347, 350, 352, 355, 356, 359, 373, 376, 393, 396, 397, 400, 405, 408, 430, 433, 513, 516, 529, 532, 545, 548, 549, 552, 558, 562, 563, 567, 572, 600, 614, 615, 616, 684, 687, 696, 697, 698, 701, 706, 708, 709, 711, 785, 799, 802, 803, 806, 819, 822, 867, 868, 871, 889, 890, 891, 895, 898, 899, 902, 909, 914, 917, 942, 943, 946, 991, 992, 993, 994, 995, 996], "bug": [19, 121], "serv": [19, 117, 121, 122, 125, 126, 131, 953], "suspect": 19, "behaviour": [19, 117, 118, 121, 125, 126, 129, 134], "observ": 19, "confid": 19, "noth": [19, 23, 69, 72, 73], "wrong": 19, "someth": [19, 116, 135, 136, 149], "bet": 19, "act": [19, 119, 149], "placehold": [19, 117, 125, 130, 849, 861], "sub": [19, 20, 72, 73, 115, 121, 126, 134, 135, 136, 283, 308, 309, 312, 313, 314, 315, 697, 709, 711, 785, 824, 845, 846, 847, 848, 953], "mark": [19, 121], "ii": [19, 909, 910, 913], "iii": 19, "titl": [19, 953], "issue_numb": 19, "delet": [19, 21, 69], "No": [19, 132], "wait": [19, 72, 73, 74, 75, 76], "progress": [19, 126, 133, 137], "pr": 19, "soon": [19, 126, 147, 149, 953, 959], "partial": [19, 72, 73, 987, 988], "solut": [19, 121, 126, 697, 745, 747], "review": [19, 116], "merg": 19, "everi": [19, 20, 21, 117, 119, 120, 121, 122, 123, 124, 126, 129, 132, 134, 136, 175, 198, 199, 202, 572, 573, 576], "shape": [19, 51, 52, 72, 73, 77, 78, 87, 88, 97, 98, 101, 102, 105, 106, 116, 117, 118, 119, 121, 127, 128, 129, 132, 134, 135, 136, 137, 160, 161, 162, 163, 164, 165, 166, 169, 171, 175, 176, 177, 179, 182, 184, 185, 188, 190, 191, 193, 196, 198, 199, 202, 204, 205, 207, 208, 210, 213, 220, 221, 222, 223, 226, 228, 232, 233, 237, 238, 239, 240, 241, 245, 246, 252, 253, 254, 283, 295, 323, 328, 333, 334, 337, 339, 342, 343, 346, 347, 350, 352, 355, 356, 359, 361, 364, 365, 368, 369, 372, 373, 376, 377, 380, 381, 384, 385, 388, 389, 392, 393, 396, 397, 400, 401, 404, 405, 408, 409, 412, 414, 417, 418, 421, 422, 425, 426, 429, 430, 433, 434, 437, 438, 441, 442, 445, 446, 449, 450, 453, 454, 457, 458, 461, 462, 465, 466, 469, 470, 473, 474, 477, 478, 481, 482, 485, 486, 489, 490, 493, 494, 497, 498, 501, 502, 503, 504, 507, 509, 512, 513, 516, 517, 520, 521, 524, 525, 528, 529, 532, 533, 536, 537, 540, 541, 544, 545, 548, 549, 552, 553, 557, 558, 562, 563, 567, 568, 571, 572, 584, 585, 587, 590, 594, 595, 596, 598, 601, 604, 609, 612, 625, 628, 629, 635, 646, 648, 650, 652, 679, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 695, 696, 697, 698, 701, 703, 705, 706, 708, 709, 711, 712, 714, 715, 717, 718, 720, 721, 724, 725, 727, 729, 731, 732, 734, 735, 737, 738, 740, 741, 743, 744, 745, 747, 748, 750, 751, 753, 754, 756, 757, 759, 760, 762, 763, 765, 766, 768, 769, 770, 773, 775, 778, 780, 783, 785, 786, 789, 791, 794, 795, 798, 799, 802, 803, 806, 807, 810, 811, 814, 815, 816, 817, 818, 819, 822, 824, 825, 828, 829, 832, 833, 836, 837, 840, 841, 844, 867, 868, 871, 872, 873, 874, 875, 876, 877, 878, 880, 881, 883, 884, 885, 887, 888, 892, 894, 898, 899, 902, 904, 907, 909, 910, 913, 942, 943, 946, 948, 951, 953, 975, 977, 978, 979, 980, 981, 982, 989, 990], "move": [19, 72, 73, 116, 283, 328], "within": [19, 26, 29, 30, 121, 136, 149, 175, 176, 177, 872, 878, 880], "7": [19, 21, 37, 38, 51, 52, 74, 75, 83, 84, 101, 102, 119, 121, 122, 126, 129, 160, 162, 163, 283, 305, 333, 334, 337, 347, 348, 349, 350, 351, 356, 358, 373, 376, 377, 380, 393, 396, 397, 400, 405, 408, 422, 425, 430, 433, 442, 445, 462, 465, 502, 503, 529, 532, 545, 548, 558, 562, 563, 567, 572, 581, 590, 600, 646, 648, 651, 653, 655, 666, 668, 684, 690, 691, 696, 697, 703, 705, 706, 708, 709, 711, 735, 737, 754, 756, 769, 770, 773, 775, 778, 780, 783, 785, 786, 787, 789, 799, 802, 803, 806, 811, 814, 824, 833, 836, 867, 868, 871, 872, 873, 874, 875, 876, 877, 878, 880, 884, 888, 889, 890, 909, 910, 913], "dai": 19, "close": [19, 118, 333, 426, 429, 529, 532, 697, 748, 750], "likewis": [19, 117, 118, 122, 126, 127, 135], "freed": 19, "flag": [19, 72, 73, 129, 134, 283, 302, 646, 662, 664], "purpos": [19, 21, 117, 119, 121, 122, 124, 125, 126, 131, 134, 333, 426, 429, 953], "remain": [19, 119, 149, 333, 347, 350, 504, 507, 525, 528, 785, 815, 818, 849, 855], "access": [19, 21, 72, 73, 127], "short": [19, 136, 684, 694], "basi": [19, 120, 135], "situat": [19, 137], "alloc": [19, 149, 175, 228, 232, 233, 237, 246, 252, 283], "upon": [19, 119, 121, 129, 149], "period": 19, "prevent": [19, 129, 130, 134, 646, 648, 651, 653, 655, 666, 668, 909, 934, 937, 991, 992, 993], "unabl": 19, "obvious": 19, "never": [19, 121, 126], "reflect": [19, 125], "qualiti": 19, "hypothet": 19, "frustrat": 19, "delai": 19, "busi": 19, "fine": [19, 134, 137], "becaus": [19, 117, 118, 121, 122, 123, 125, 127, 128, 129, 132, 136, 137, 149], "inact": 19, "limit": [19, 72, 73, 74, 75, 76, 119, 121, 130, 132, 135, 137, 149, 246, 266, 269, 572, 584, 585, 587, 785, 786, 789], "me": 19, "unfairli": 19, "definit": [19, 122, 127, 134, 697, 698, 701, 703, 705], "investig": 19, "Then": [19, 21, 134, 149], "practic": 19, "separ": [19, 121, 125, 130, 132, 134, 135], "branch": [19, 126, 149, 172, 173, 333, 365, 368], "simpli": [19, 24, 25, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 47, 48, 51, 52, 59, 60, 70, 71, 72, 73, 79, 80, 83, 84, 85, 86, 87, 88, 93, 94, 97, 98, 101, 102, 105, 106, 117, 118, 119, 121, 122, 125, 126, 128, 129, 132, 136, 137, 166, 167, 168, 170, 179, 180, 185, 186, 193, 194, 199, 200, 215, 216, 223, 224, 228, 230, 233, 235, 241, 243, 255, 256, 257, 259, 333, 334, 335, 336, 338, 347, 348, 349, 351, 356, 357, 358, 360, 397, 398, 399, 426, 429, 430, 431, 432, 558, 559, 560, 561, 563, 564, 565, 566, 573, 574, 575, 577, 601, 602, 603, 605, 648, 649, 650, 652, 698, 699, 700, 702, 786, 787, 788, 790, 819, 820, 821, 823, 874, 876, 891, 892, 893, 894], "role": [19, 133], "kept": [19, 72, 73, 74, 75, 76, 129, 845, 846, 847], "date": 19, "upstream": [19, 120], "complic": [19, 132], "root": [19, 21, 135, 333, 545, 548, 872, 873, 877], "merge_with_upstream": 19, "sh": 19, "name_of_your_branch": 19, "resolv": [19, 909, 926, 929, 934, 937], "clone": [19, 21, 72, 73, 283, 304, 305, 306, 307], "push": [19, 120, 130], "both": [19, 117, 118, 119, 121, 122, 126, 128, 129, 132, 134, 135, 136, 137, 148, 149, 175, 176, 177, 179, 182, 184, 185, 188, 190, 191, 193, 196, 198, 199, 202, 204, 205, 207, 208, 210, 213, 220, 221, 223, 226, 228, 232, 233, 237, 238, 240, 241, 245, 246, 255, 258, 273, 333, 334, 337, 347, 350, 352, 355, 356, 359, 397, 400, 430, 433, 513, 516, 521, 524, 545, 548, 549, 552, 558, 562, 572, 600, 646, 648, 651, 684, 687, 696, 697, 698, 701, 703, 705, 709, 711, 721, 724, 760, 762, 785, 819, 822, 867, 868, 871, 889, 891, 895, 909, 914, 917, 942, 943, 946], "abort": 19, "tediou": 19, "resolut": 19, "stash": 19, "reinstat": 19, "correspond": [19, 69, 72, 73, 74, 75, 117, 118, 119, 120, 121, 122, 125, 126, 127, 246, 253, 333, 365, 368, 521, 524, 697, 703, 705, 712, 714, 745, 747, 785, 791, 794, 819, 822, 872, 873, 884, 885, 886, 889, 890, 891, 895, 897, 909, 926, 929, 930, 933, 934, 937, 938, 941], "fetch": 19, "uncommit": 19, "unstag": 19, "untrack": 19, "comprehens": 19, "explan": [19, 117, 118, 126, 134], "atlassian": 19, "tutori": 19, "wrote": 19, "piec": [19, 122, 124, 125, 132], "inform": [19, 121, 130, 246, 266, 269, 572, 578, 646, 679], "tag": 19, "usu": 19, "describ": [19, 121, 133, 137, 909, 910, 913, 926, 929, 930, 933, 934, 937], "navig": [19, 115], "blame": 19, "revis": 19, "author": [19, 953], "eg": [19, 121], "16": [19, 47, 48, 83, 84, 101, 102, 119, 121, 135, 333, 558, 559, 561, 562, 684, 690, 697, 698, 699, 701, 709, 711, 735, 737, 874, 876, 884, 888, 909, 910, 913], "5": [19, 21, 37, 38, 39, 40, 47, 48, 51, 52, 74, 75, 79, 80, 83, 84, 85, 86, 87, 88, 97, 98, 101, 102, 117, 119, 121, 123, 134, 135, 136, 160, 162, 163, 165, 175, 199, 202, 210, 213, 223, 226, 238, 240, 241, 245, 246, 255, 257, 258, 259, 283, 305, 321, 333, 334, 336, 337, 338, 347, 348, 349, 350, 351, 352, 355, 356, 358, 359, 360, 369, 372, 373, 376, 389, 392, 393, 396, 397, 398, 399, 400, 405, 408, 430, 431, 432, 433, 442, 445, 462, 465, 502, 503, 509, 512, 513, 516, 529, 532, 545, 548, 549, 552, 558, 559, 561, 562, 563, 564, 566, 567, 572, 573, 574, 581, 590, 600, 601, 604, 605, 635, 640, 646, 648, 650, 651, 652, 684, 687, 689, 690, 696, 697, 698, 699, 701, 703, 705, 706, 708, 709, 711, 718, 720, 735, 737, 754, 756, 757, 759, 769, 780, 783, 785, 786, 787, 788, 789, 790, 791, 794, 799, 802, 803, 806, 811, 814, 815, 818, 819, 821, 822, 823, 824, 833, 836, 867, 868, 871, 872, 873, 874, 875, 876, 883, 884, 886, 887, 888, 889, 890, 891, 895, 898, 899, 902, 909, 910, 913, 914, 917, 942, 943, 946, 975, 986], "past": 19, "l": [19, 115, 697, 698, 701, 712, 714, 721, 724, 757, 759], "filepath": [19, 72, 73], "grep": 19, "v": [19, 69, 132, 135, 136, 137, 684, 696, 953, 975, 976, 977, 978, 979, 980, 981, 982, 984, 985, 986, 987, 988, 989, 990, 991, 995, 997, 998], "commit_id": 19, "handi": [19, 121], "histori": 19, "toggl": 19, "vertic": 19, "highlight": [19, 119], "previou": [19, 117, 121, 137, 149, 646, 653, 655, 666, 668], "shown": [19, 67, 68, 72, 73, 113, 114, 117, 119, 121, 130, 132, 134, 149, 333, 373, 376, 393, 396, 405, 408, 529, 532, 563, 567, 697, 706, 708, 785, 799, 802, 803, 806, 889, 890, 898, 899, 902], "whenev": [19, 121, 134, 135], "think": [19, 119], "interact": [19, 121, 953], "gain": [19, 131, 136, 966], "quit": [19, 20, 118, 121, 122, 124, 125], "repeat": [19, 51, 52, 72, 73, 97, 98, 118, 119, 121, 123, 125, 126, 130, 572, 596, 785, 837, 840], "yourself": [19, 20, 121, 148], "simpler": [19, 134], "cannot": [19, 123, 127, 137], "least": [19, 119, 121, 122, 125, 697, 721, 724], "final": [19, 118, 119, 122, 125, 127, 129, 130, 132, 134, 135, 175, 204, 205, 207, 208, 572, 599, 975, 986], "tickbox": 19, "lower": [19, 72, 73, 119, 121, 132, 149, 175, 190, 191, 228, 232, 333, 502, 697, 698, 701, 872, 878, 880], "corner": 19, "without": [19, 72, 73, 116, 117, 122, 125, 126, 128, 130, 132, 134, 135, 136, 148, 149, 572, 627, 632, 785, 815, 818, 849, 851, 889, 890, 891, 895, 897], "span": 19, "intent": [19, 129], "larg": [19, 135, 333, 347, 350, 504, 507], "discourag": 19, "philosophi": 19, "increment": [19, 572, 615], "frequent": [19, 20], "valuabl": 19, "infrequ": 19, "earli": [19, 23, 69, 953], "wast": 19, "spot": [19, 122], "mistak": [19, 130], "propos": 19, "mountain": 19, "around": [19, 72, 73, 74, 75, 76, 117, 122, 125, 134, 149], "advoc": [19, 149], "individu": [19, 20, 122], "per": [19, 121, 135, 283, 684, 685, 686, 687, 688, 689, 690, 691, 975, 976, 977, 978, 979, 980, 981, 982], "style": [19, 884, 887], "ve": [19, 131, 134, 872, 873, 953], "were": [19, 72, 73, 116, 121, 126, 130], "actual": [19, 115, 122, 129, 131, 134, 136, 149], "aim": [19, 131], "part": [19, 116, 120, 121, 122, 132, 133, 137, 148, 149, 175, 228, 232, 233, 237, 646, 653, 655, 658, 660, 666, 668, 670, 672, 674, 676, 987, 988], "subsect": 19, "session": [19, 953], "block": [19, 121, 122, 130, 131, 133, 137, 149, 283, 646, 683, 953], "smaller": [19, 132, 137, 785, 786, 789, 819, 822, 909, 926, 929, 934, 937], "edit": 19, "exact": [19, 72, 73, 132, 889, 890], "beauti": 19, "particularli": [19, 135, 149], "concern": [19, 115, 119, 126, 129, 131], "effici": [19, 117, 121, 122, 126, 129, 130, 132, 135, 149], "difficult": [19, 121, 149, 889, 890, 891, 895, 897], "undo": 19, "stress": 19, "frequenc": [19, 572, 599], "pycharm": 19, "pytest": [19, 121], "button": 19, "declar": 19, "insid": [19, 21, 116, 121, 127], "exec": 19, "rm": 19, "rf": 19, "cp": 19, "ivy_contain": 19, "bash": [19, 21], "test_ivi": [19, 121], "test_funct": [19, 121], "test_cor": 19, "test_imag": 19, "test_random_crop": 19, "header": 19, "summari": [19, 72, 73, 121, 246, 261, 262, 263, 275, 276, 277, 283, 296, 297, 572, 588, 592, 610, 646, 678], "q": [19, 149, 684, 696, 697, 712, 714, 741, 743], "array_api_test": 19, "test_creation_funct": 19, "test_arang": 19, "window": [19, 21, 684, 685, 686, 687, 688, 689, 690, 691, 975, 976, 977, 978, 979, 980, 981, 982], "variou": [19, 117, 118, 124, 148], "valu": [19, 23, 51, 52, 59, 60, 69, 72, 73, 74, 75, 76, 97, 98, 117, 119, 121, 122, 126, 127, 128, 129, 130, 132, 134, 137, 149, 175, 176, 177, 190, 191, 198, 199, 202, 204, 205, 207, 208, 246, 252, 261, 262, 263, 283, 295, 326, 327, 333, 334, 337, 339, 342, 347, 350, 352, 355, 361, 364, 397, 400, 414, 417, 418, 421, 430, 433, 434, 437, 438, 441, 442, 445, 458, 461, 462, 465, 502, 503, 504, 507, 513, 516, 517, 520, 521, 524, 529, 532, 563, 567, 568, 571, 572, 584, 585, 587, 588, 593, 599, 600, 601, 604, 610, 613, 617, 627, 628, 629, 630, 631, 632, 645, 646, 648, 651, 653, 655, 657, 666, 668, 679, 683, 684, 685, 686, 687, 688, 689, 690, 691, 694, 695, 696, 697, 729, 731, 738, 740, 741, 743, 744, 745, 747, 748, 750, 751, 753, 763, 765, 785, 786, 789, 795, 796, 797, 798, 811, 814, 815, 818, 841, 843, 844, 845, 846, 847, 849, 853, 854, 855, 856, 857, 862, 865, 866, 867, 868, 871, 872, 873, 874, 875, 877, 878, 880, 882, 884, 885, 886, 888, 889, 890, 891, 893, 895, 896, 897, 898, 899, 902, 904, 907, 909, 914, 917, 918, 921, 922, 925, 926, 929, 930, 933, 934, 937, 938, 941, 975, 976, 977, 978, 979, 980, 981, 982, 986, 987, 988, 989, 990, 991, 992, 993, 995], "cpu": [19, 72, 73, 128, 149, 175, 204, 205, 207, 208, 283, 302, 303, 305, 319, 322, 324, 328, 329, 331, 332, 572, 600, 601, 604, 625, 628, 629, 872, 873, 874, 875, 877, 878, 880, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 995, 997, 998], "gpu": [19, 101, 102, 128, 134, 149, 283, 302, 305, 318, 320, 324, 326, 331, 874, 876], "combin": [19, 72, 73, 74, 75, 76, 119, 121, 122, 125, 126, 137, 697, 703, 705], "wherebi": [20, 126, 849, 861], "broad": 20, "distribut": [20, 72, 73, 121, 128, 149, 283, 304, 308, 309, 310, 311, 684, 692, 769, 770, 773, 775, 778, 780, 783, 872, 873, 874, 875, 877, 878, 880, 975, 983, 987, 988], "across": [20, 72, 73, 117, 119, 121, 122, 126, 127, 283, 292, 293, 304, 305, 307, 308, 309, 310, 311, 315, 325, 326, 572, 580, 581, 849, 855, 884, 886], "todo": 20, "commit": [20, 121], "NOT": [20, 333, 490, 493], "static": [20, 70, 71, 72, 73, 77, 78, 79, 80, 83, 84, 85, 86, 87, 88, 93, 94, 95, 96, 97, 98, 101, 102, 105, 106, 107, 108, 111, 112, 113, 114, 118, 119, 122, 149, 166, 170, 172, 173, 255, 259, 334, 338, 347, 351, 356, 360, 558, 559, 563, 564, 573, 577, 601, 605, 698, 702, 786, 790, 819, 823, 874, 876, 891, 892], "method": [20, 23, 24, 25, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 47, 48, 51, 52, 59, 60, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 79, 80, 83, 84, 85, 86, 87, 88, 93, 94, 97, 98, 101, 102, 105, 106, 113, 114, 116, 117, 118, 119, 121, 122, 125, 130, 132, 133, 136, 137, 149, 160, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 175, 179, 180, 185, 186, 193, 194, 196, 199, 200, 215, 216, 223, 224, 228, 230, 233, 235, 241, 243, 255, 256, 257, 259, 333, 334, 335, 336, 338, 347, 348, 349, 351, 352, 355, 356, 357, 358, 360, 373, 376, 393, 396, 397, 398, 399, 400, 405, 408, 430, 431, 432, 433, 442, 445, 462, 465, 502, 503, 509, 512, 513, 516, 529, 532, 545, 548, 549, 552, 558, 559, 560, 561, 563, 564, 565, 566, 567, 572, 573, 574, 575, 577, 588, 589, 600, 601, 602, 603, 605, 628, 629, 640, 642, 646, 648, 649, 650, 652, 666, 668, 670, 672, 683, 684, 690, 696, 697, 698, 699, 700, 702, 703, 705, 706, 708, 769, 770, 773, 785, 786, 787, 788, 790, 799, 802, 803, 806, 811, 814, 819, 820, 821, 823, 824, 833, 836, 849, 850, 860, 861, 862, 867, 868, 871, 872, 874, 876, 877, 878, 880, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 898, 899, 902, 909, 910, 913, 914, 917, 942, 943, 946, 953, 975, 986, 987, 988], "instanc": [20, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 47, 48, 51, 52, 59, 60, 67, 68, 70, 71, 72, 73, 74, 75, 79, 80, 83, 84, 85, 86, 87, 88, 93, 94, 97, 98, 105, 106, 113, 114, 117, 118, 119, 121, 122, 125, 127, 129, 135, 136, 137, 150, 158, 160, 162, 163, 164, 165, 166, 167, 168, 169, 171, 175, 176, 177, 179, 180, 182, 184, 185, 186, 188, 190, 191, 193, 194, 196, 198, 199, 200, 202, 204, 205, 207, 208, 210, 213, 215, 216, 220, 221, 223, 224, 226, 228, 230, 232, 233, 235, 237, 238, 240, 241, 243, 245, 246, 255, 256, 257, 258, 283, 292, 324, 333, 334, 335, 336, 337, 347, 348, 349, 350, 352, 355, 356, 357, 358, 359, 373, 376, 393, 396, 397, 398, 399, 400, 405, 408, 430, 431, 432, 433, 442, 445, 462, 465, 502, 503, 509, 512, 513, 516, 529, 532, 545, 548, 549, 552, 558, 560, 561, 562, 563, 565, 566, 567, 572, 573, 574, 575, 589, 600, 601, 602, 603, 616, 640, 642, 648, 649, 650, 652, 684, 687, 690, 696, 697, 698, 699, 700, 701, 703, 705, 706, 708, 709, 711, 769, 770, 773, 785, 786, 787, 788, 799, 802, 803, 806, 811, 814, 819, 820, 821, 822, 824, 833, 836, 867, 868, 871, 872, 877, 878, 880, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 898, 899, 902, 909, 910, 913, 914, 917, 942, 943, 946, 964, 965], "revers": [20, 69, 74, 75, 118, 119, 137, 149, 572, 593, 785, 803, 806], "resourc": 20, "content": [20, 21, 72, 73, 129, 132, 135], "thei": [20, 72, 73, 115, 116, 119, 121, 122, 124, 126, 127, 128, 129, 130, 134, 135, 136, 137, 149, 246, 273, 845, 846, 847, 872, 873, 953, 997, 998], "hypothesi": 20, "cover": [20, 118, 119, 121, 122, 124, 131], "lambda": [20, 132, 135, 991, 994, 996], "direct": [20, 136, 137, 148, 898, 904, 907], "bind": [20, 126], "special": [20, 74, 75, 116, 117, 118, 119, 125, 333, 334, 337, 339, 342, 343, 346, 347, 350, 352, 355, 356, 359, 361, 364, 365, 368, 393, 396, 397, 400, 401, 404, 405, 408, 422, 425, 426, 429, 430, 433, 466, 469, 470, 473, 478, 481, 482, 485, 504, 507, 521, 524, 525, 528, 529, 532, 533, 536, 537, 540, 541, 544, 545, 548, 558, 562, 563, 567, 568, 571, 909, 914, 917, 918, 921, 922, 925, 930, 933, 934, 937, 938, 941], "aforement": 20, "categori": [20, 116, 125, 126, 127, 131, 953], "parent": [20, 134, 646, 683], "arraywithelementwis": [20, 37, 125], "containerwithmanipul": [20, 74, 75, 97], "hint": [20, 116, 117, 118, 122, 125, 129, 130, 175, 176, 177, 179, 182, 184, 185, 188, 190, 191, 193, 196, 198, 199, 202, 204, 205, 207, 208, 210, 213, 220, 221, 223, 226, 228, 232, 233, 237, 238, 240, 241, 245, 246, 255, 258, 333, 334, 337, 347, 350, 352, 355, 356, 359, 373, 376, 393, 396, 397, 400, 405, 408, 430, 433, 513, 516, 529, 532, 545, 548, 549, 552, 558, 562, 563, 567, 572, 600, 684, 687, 696, 697, 698, 701, 706, 708, 709, 711, 785, 799, 802, 803, 806, 819, 822, 867, 868, 871, 889, 890, 891, 895, 898, 899, 902, 909, 914, 917, 942, 943, 946], "its": [20, 21, 118, 121, 130, 246, 253, 283, 327, 697, 721, 724, 785, 799, 802, 815, 818, 819, 822, 833, 836], "docstr": [20, 21, 24, 25, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 47, 48, 51, 52, 59, 60, 70, 71, 79, 80, 83, 84, 85, 86, 87, 88, 93, 94, 97, 98, 101, 102, 105, 106, 115, 116, 117, 122, 126, 130, 166, 167, 168, 170, 175, 176, 177, 179, 180, 182, 184, 185, 186, 188, 190, 191, 193, 194, 196, 198, 199, 200, 202, 204, 205, 210, 213, 215, 216, 220, 221, 223, 224, 226, 228, 230, 232, 233, 235, 237, 238, 240, 241, 243, 245, 246, 255, 256, 257, 258, 259, 333, 334, 335, 336, 337, 338, 347, 348, 349, 350, 351, 352, 355, 356, 357, 358, 359, 360, 373, 376, 393, 396, 397, 398, 399, 400, 405, 408, 430, 431, 432, 433, 462, 465, 513, 516, 529, 532, 545, 548, 549, 552, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 573, 574, 575, 577, 601, 602, 603, 605, 648, 649, 650, 652, 697, 698, 699, 700, 702, 706, 708, 709, 711, 785, 786, 787, 788, 790, 799, 802, 803, 806, 819, 820, 821, 822, 823, 874, 876, 889, 890, 891, 892, 893, 894, 895, 898, 899, 902, 909, 914, 917, 942, 943, 946], "thorough": [20, 117, 118, 121], "transpil": [20, 131, 133, 953, 959], "builder": [21, 147, 149, 953], "maco": 21, "ubuntu": 21, "uid": 21, "make_docs_without_dock": 21, "rel": [21, 646, 653, 655, 658, 660, 666, 668, 670, 672, 674, 676, 697, 709, 711, 729, 731, 738, 740, 757, 759, 785, 803, 806, 819, 822, 898, 899, 902, 904, 907, 953], "synchron": 21, "rest": [21, 133, 137], "remove_doc": 21, "_": [21, 118, 126, 129, 134, 135, 175, 176, 177, 179, 182, 184, 185, 188, 190, 191, 193, 196, 198, 199, 202, 204, 205, 220, 221, 223, 226, 228, 232, 233, 237, 238, 240, 241, 245, 246, 255, 258, 333, 334, 337, 352, 355, 356, 359, 393, 396, 397, 400, 405, 408, 430, 433, 513, 516, 545, 548, 549, 552, 646, 648, 651, 653, 655, 697, 709, 711, 766, 768, 785, 799, 802, 819, 822, 889, 890, 898, 899, 902, 909, 914, 917], "indic": [21, 39, 40, 72, 73, 85, 86, 130, 133, 137, 160, 165, 333, 533, 536, 572, 600, 601, 602, 603, 604, 605, 612, 625, 628, 629, 684, 685, 686, 687, 688, 689, 690, 691, 697, 763, 765, 785, 819, 822, 849, 850, 852, 854, 856, 857, 858, 860, 863, 864, 865, 866, 867, 868, 871, 872, 873, 884, 885, 886, 887, 889, 890, 896, 898, 899, 902, 904, 907, 953, 956, 958, 975, 976, 977, 978, 979, 980, 981, 982, 987, 988], "privat": [21, 121, 991, 995], "fulfil": [21, 131, 953], "autogenerated_sourc": 21, "format": [21, 72, 73, 115, 118, 127, 128, 132, 134, 135, 246, 264, 283, 303, 909, 910, 913, 953], "png": [21, 135], "_imag": 21, "lastli": 21, "structur": [21, 72, 73, 74, 75, 76, 116, 122, 125, 126, 135, 136, 572, 588, 849, 862], "rst": 21, "skip": [21, 72, 73, 121, 849, 862], "read": [21, 72, 73, 953], "partial_sourc": 21, "conf": 21, "copi": [21, 31, 32, 72, 73, 77, 78, 118, 123, 127, 132, 134, 135, 148, 149, 175, 179, 180, 181, 182, 183, 193, 196, 246, 252, 283, 328, 572, 589, 641, 642, 785, 815, 818, 849, 851, 898, 904, 907], "create_rst_fil": 21, "filter": [21, 121, 684, 685, 686, 687, 688, 689, 690, 691, 975, 976, 977, 978, 979, 980, 981, 982], "repres": [21, 121, 134, 175, 210, 213, 246, 265, 333, 343, 346, 347, 350, 356, 359, 369, 372, 405, 408, 504, 507, 541, 544, 563, 567, 646, 683, 684, 693, 697, 744, 745, 747], "overal": [21, 118, 126, 127, 128, 137], "markup": 21, "6": [21, 37, 38, 41, 42, 51, 52, 74, 75, 83, 84, 85, 86, 101, 102, 119, 121, 123, 126, 134, 135, 136, 160, 162, 163, 165, 175, 199, 202, 283, 305, 321, 333, 334, 335, 336, 337, 338, 347, 348, 349, 350, 351, 352, 355, 356, 359, 373, 376, 377, 380, 393, 396, 397, 398, 399, 400, 405, 408, 430, 433, 442, 445, 462, 465, 502, 503, 509, 512, 529, 532, 545, 548, 549, 552, 558, 562, 563, 567, 572, 581, 590, 600, 601, 604, 605, 635, 640, 646, 648, 649, 651, 684, 687, 690, 691, 696, 697, 703, 705, 706, 708, 709, 711, 735, 737, 748, 750, 754, 756, 769, 770, 773, 780, 783, 785, 786, 787, 789, 791, 794, 799, 802, 803, 806, 811, 814, 815, 818, 819, 822, 824, 833, 836, 867, 868, 871, 872, 873, 874, 875, 876, 884, 885, 888, 889, 890, 891, 895, 909, 910, 913, 914, 917], "extract": [21, 116], "get_functions_and_class": 21, "doctr": 21, "readm": [21, 149], "module_nam": 21, "copy_readme_to_rst": 21, "tabl": 21, "toc": 21, "tree": 21, "append": [21, 72, 73, 121, 132, 135, 333, 381, 384, 697, 709, 711, 721, 724], "append_toctree_to_rst": 21, "9": [21, 37, 38, 41, 42, 51, 52, 74, 75, 83, 84, 87, 88, 101, 102, 119, 121, 135, 136, 333, 347, 348, 349, 350, 351, 356, 359, 373, 376, 377, 380, 502, 503, 529, 532, 545, 548, 549, 552, 572, 600, 646, 648, 649, 650, 651, 652, 653, 654, 655, 656, 666, 667, 668, 669, 684, 687, 690, 691, 697, 703, 705, 706, 708, 709, 711, 735, 737, 748, 750, 754, 756, 785, 786, 787, 789, 803, 806, 811, 814, 819, 822, 824, 872, 873, 874, 875, 876, 884, 888, 889, 890, 909, 910, 913, 991, 992, 993], "index": [21, 31, 32, 72, 73, 77, 78, 122, 126, 134, 174, 175, 190, 191, 210, 211, 212, 213, 214, 283, 324, 572, 578, 600, 601, 604, 785, 829, 832, 849, 852, 853, 856, 857, 858, 863, 865, 884, 885, 886, 887, 889, 890, 891, 895, 898, 899, 902, 956, 958], "create_index_rst": 21, "14": [21, 101, 102, 119, 121, 126, 333, 356, 359, 393, 396, 646, 648, 651, 684, 696, 697, 709, 711, 735, 737, 874, 876, 889, 890, 909, 910, 913], "\u03c0": [21, 333, 339, 342, 352, 355, 361, 364, 365, 368], "namespac": [21, 116, 127, 132, 137], "helper": [23, 69, 135], "abc": [23, 24, 25, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 69, 72, 73, 134, 283, 292, 298, 572, 597, 987, 988, 991, 995], "inherit": [23, 125, 126, 134], "__delattr__": [23, 69], "self": [23, 69, 72, 73, 125, 126, 132, 134, 135, 136, 137, 166, 167, 168, 179, 180, 181, 185, 186, 187, 193, 194, 195, 199, 200, 201, 210, 211, 212, 215, 216, 217, 223, 224, 225, 228, 230, 231, 233, 235, 236, 241, 243, 244, 255, 256, 257, 283, 334, 335, 336, 339, 340, 341, 343, 344, 345, 347, 348, 349, 352, 353, 354, 356, 357, 358, 361, 362, 363, 365, 366, 367, 369, 370, 371, 373, 374, 375, 377, 378, 379, 381, 382, 383, 385, 386, 387, 389, 390, 391, 393, 394, 395, 397, 398, 399, 401, 402, 403, 405, 406, 407, 409, 410, 411, 414, 415, 416, 418, 419, 420, 422, 423, 424, 426, 427, 428, 430, 431, 432, 434, 435, 436, 438, 439, 440, 442, 443, 444, 446, 447, 448, 450, 451, 452, 454, 455, 456, 458, 459, 460, 462, 463, 464, 466, 467, 468, 470, 471, 472, 474, 475, 476, 478, 479, 480, 482, 483, 484, 486, 487, 488, 490, 491, 492, 494, 495, 496, 498, 499, 500, 504, 505, 506, 509, 510, 511, 513, 514, 515, 517, 518, 519, 521, 522, 523, 525, 526, 527, 529, 530, 531, 533, 534, 535, 537, 538, 539, 541, 542, 543, 545, 546, 547, 549, 550, 551, 553, 555, 556, 558, 560, 561, 563, 565, 566, 568, 569, 570, 573, 574, 575, 585, 586, 601, 602, 603, 648, 649, 650, 653, 654, 658, 659, 662, 663, 666, 667, 670, 671, 674, 675, 698, 699, 700, 703, 704, 706, 707, 709, 710, 712, 713, 715, 716, 718, 719, 721, 722, 723, 725, 726, 729, 730, 732, 733, 735, 736, 738, 739, 741, 742, 745, 746, 748, 749, 751, 752, 754, 755, 757, 758, 760, 761, 763, 764, 766, 767, 770, 771, 772, 775, 776, 777, 780, 781, 782, 786, 787, 788, 791, 792, 793, 795, 796, 797, 799, 800, 801, 803, 804, 805, 807, 808, 809, 811, 812, 813, 815, 816, 817, 819, 820, 821, 825, 826, 827, 829, 830, 831, 833, 834, 835, 837, 838, 839, 841, 842, 843, 868, 869, 870, 878, 879, 891, 893, 894, 899, 900, 901, 904, 905, 906, 910, 911, 912, 914, 915, 916, 918, 919, 920, 922, 923, 924, 926, 927, 928, 930, 931, 932, 934, 935, 936, 938, 939, 940, 943, 944, 945, 948, 949, 950, 953, 991, 995], "delattr": [23, 69], "__format__": [23, 69], "format_spec": [23, 69], "formatt": [23, 69], "__getattribute__": [23, 69], "getattr": [23, 69], "__init_subclass__": [23, 69], "subclass": [23, 69], "overridden": [23, 69], "extend": [23, 69, 117, 118, 123], "__new__": [23, 69], "accur": [23, 69, 333, 426, 429], "__reduce__": [23, 69], "pickl": [23, 69, 72, 73, 126, 135], "__reduce_ex__": [23, 69], "protocol": [23, 69], "__setattr__": [23, 126], "setattr": 23, "__sizeof__": [23, 69], "size": [23, 69, 72, 73, 74, 75, 76, 121, 134, 135, 175, 204, 205, 207, 208, 283, 325, 326, 327, 572, 628, 634, 684, 696, 697, 709, 711, 725, 727, 735, 737, 741, 743, 748, 750, 760, 762, 785, 799, 802, 819, 822, 824, 825, 828, 872, 873, 877, 878, 880, 884, 885, 887, 942, 943, 946, 948, 951, 975, 976, 977], "memori": [23, 69, 128, 129, 147, 149, 283, 301, 322, 327, 329, 332, 684, 694, 953], "byte": [23, 69, 130], "__str__": [23, 69], "__subclasshook__": [23, 69], "overrid": [23, 69, 572, 625], "issubclass": [23, 69], "invok": [23, 69], "abcmeta": [23, 69], "__subclasscheck__": [23, 69], "true": [23, 33, 34, 39, 40, 47, 48, 61, 62, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 119, 121, 122, 126, 127, 129, 130, 132, 134, 135, 136, 137, 160, 161, 166, 168, 170, 172, 173, 175, 176, 178, 179, 181, 183, 185, 187, 189, 190, 192, 193, 195, 197, 199, 201, 203, 204, 205, 206, 207, 209, 210, 212, 214, 215, 217, 219, 220, 222, 223, 225, 227, 228, 229, 231, 233, 234, 236, 238, 239, 241, 242, 244, 246, 252, 255, 256, 257, 258, 259, 283, 302, 319, 323, 324, 333, 334, 336, 338, 339, 341, 343, 345, 347, 349, 351, 352, 354, 356, 358, 360, 361, 363, 365, 367, 369, 371, 373, 375, 376, 377, 379, 381, 383, 385, 387, 389, 391, 393, 395, 396, 397, 399, 401, 403, 405, 407, 409, 411, 413, 414, 416, 418, 420, 422, 424, 426, 428, 430, 432, 434, 436, 438, 440, 441, 442, 444, 445, 446, 448, 449, 450, 452, 453, 454, 456, 457, 458, 460, 461, 462, 464, 465, 466, 468, 470, 472, 474, 476, 478, 480, 482, 484, 486, 488, 490, 492, 493, 494, 496, 497, 498, 500, 504, 506, 508, 509, 511, 513, 515, 516, 517, 519, 521, 523, 525, 527, 529, 531, 533, 535, 537, 539, 541, 543, 545, 547, 549, 551, 553, 554, 556, 558, 559, 561, 563, 564, 566, 568, 570, 572, 573, 574, 575, 576, 577, 580, 581, 582, 583, 585, 586, 590, 597, 599, 601, 603, 605, 611, 612, 619, 634, 640, 642, 645, 646, 653, 654, 655, 656, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 679, 683, 684, 692, 697, 698, 700, 701, 702, 721, 723, 725, 727, 748, 749, 750, 763, 765, 769, 770, 772, 773, 774, 775, 777, 778, 779, 780, 782, 783, 784, 785, 786, 788, 790, 791, 793, 795, 797, 799, 801, 803, 805, 807, 809, 811, 813, 815, 817, 819, 821, 823, 824, 825, 827, 829, 831, 833, 835, 837, 839, 841, 843, 845, 846, 847, 848, 849, 850, 859, 860, 862, 868, 870, 872, 873, 878, 879, 881, 884, 885, 886, 888, 889, 890, 891, 892, 894, 895, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 912, 914, 916, 917, 918, 920, 921, 922, 924, 925, 926, 928, 929, 930, 932, 933, 934, 936, 937, 938, 940, 941, 942, 943, 945, 946, 947, 948, 950, 951, 952, 975, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996], "notimpl": [23, 69, 130], "normal": [23, 69, 135, 785, 829, 832, 867, 868, 871, 872, 877, 989, 990], "algorithm": [23, 69, 149, 684, 685, 686, 687, 688, 689, 690, 691, 975, 976, 977, 978, 979, 980, 981, 982], "outcom": [23, 69], "cach": [23, 69, 121, 122, 283, 301, 572, 583], "arraywithactiv": 24, "softplu": [24, 25, 70, 71, 160, 170, 953], "variant": [24, 25, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 47, 48, 51, 52, 59, 60, 70, 71, 79, 80, 83, 84, 85, 86, 87, 88, 93, 94, 97, 98, 101, 102, 105, 106, 118, 119, 166, 167, 168, 170, 179, 180, 185, 186, 193, 194, 199, 200, 215, 216, 223, 224, 228, 230, 233, 235, 241, 243, 255, 256, 257, 259, 334, 335, 336, 338, 347, 348, 349, 351, 356, 357, 358, 360, 397, 398, 399, 430, 431, 432, 558, 559, 560, 561, 563, 564, 565, 566, 573, 574, 575, 577, 601, 602, 603, 605, 648, 649, 650, 652, 698, 699, 700, 702, 786, 787, 788, 790, 819, 820, 821, 823, 874, 876, 891, 892, 893, 894], "wrap": [24, 25, 26, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 47, 48, 51, 52, 59, 60, 68, 70, 71, 72, 73, 74, 75, 76, 79, 80, 83, 84, 85, 86, 87, 88, 93, 94, 97, 98, 101, 102, 105, 106, 114, 115, 117, 118, 121, 122, 123, 125, 126, 127, 128, 129, 132, 134, 137, 149, 150, 158, 166, 167, 168, 170, 179, 180, 185, 186, 193, 194, 199, 200, 215, 216, 223, 224, 228, 230, 233, 235, 241, 243, 255, 256, 257, 259, 334, 335, 336, 338, 347, 348, 349, 351, 356, 357, 358, 360, 397, 398, 399, 430, 431, 432, 558, 559, 560, 561, 563, 564, 565, 566, 572, 573, 574, 575, 577, 583, 601, 602, 603, 605, 646, 648, 649, 650, 652, 682, 698, 699, 700, 702, 786, 787, 788, 790, 819, 820, 821, 823, 874, 876, 891, 892, 893, 894], "minim": [24, 25, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 47, 48, 51, 52, 59, 60, 70, 71, 79, 80, 83, 84, 85, 86, 87, 88, 93, 94, 97, 98, 101, 102, 105, 106, 118, 129, 132, 166, 167, 168, 170, 179, 180, 185, 186, 193, 194, 199, 200, 215, 216, 223, 224, 228, 230, 233, 235, 241, 243, 255, 256, 257, 259, 334, 335, 336, 338, 347, 348, 349, 351, 356, 357, 358, 360, 397, 398, 399, 430, 431, 432, 558, 559, 560, 561, 563, 564, 565, 566, 573, 574, 575, 577, 601, 602, 603, 605, 648, 649, 650, 652, 698, 699, 700, 702, 786, 787, 788, 790, 819, 820, 821, 823, 874, 876, 891, 892, 893, 894], "collect": [26, 72, 73, 121, 148, 160, 172, 283, 572, 646, 684, 769, 849, 862, 867, 872, 961, 975, 989, 991], "args_to_ivi": 26, "include_deriv": [26, 27, 28, 29, 30, 849, 851, 861], "keyword": [26, 27, 28, 69, 72, 73, 74, 75, 76, 116, 117, 121, 127, 128, 129, 135, 175, 210, 213, 283, 292, 293, 307, 311, 315, 572, 579, 622, 849, 855, 909, 934, 937, 987, 988], "variabl": [26, 27, 28, 29, 30, 72, 73, 74, 75, 117, 118, 121, 123, 126, 127, 129, 130, 135, 136, 137, 149, 572, 582, 614, 615, 616, 617, 618, 619, 621, 638, 646, 653, 655, 657, 658, 660, 662, 664, 666, 668, 670, 672, 674, 676, 679, 682, 684, 695, 697, 745, 747, 845, 846, 847, 848, 867, 868, 871, 953, 964, 965, 966, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998], "nest": [26, 27, 28, 29, 30, 72, 73, 74, 75, 76, 116, 121, 122, 125, 126, 134, 135, 136, 149, 283, 307, 311, 315, 572, 640, 646, 683, 845, 846, 847, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 987, 988, 991, 992, 993, 994, 995, 996], "unchang": [26, 27, 28, 29, 30], "posit": [26, 27, 28, 37, 38, 83, 84, 117, 121, 135, 148, 174, 175, 190, 191, 246, 266, 283, 307, 311, 315, 333, 334, 337, 446, 449, 450, 453, 504, 507, 525, 528, 572, 599, 697, 698, 701, 785, 799, 802, 819, 822, 872, 882, 884, 887, 942, 943, 946, 948, 951, 964, 965], "bool": [26, 27, 28, 29, 30, 33, 34, 72, 73, 113, 114, 119, 126, 127, 129, 130, 137, 172, 173, 175, 198, 246, 252, 255, 256, 258, 261, 262, 263, 264, 267, 270, 271, 272, 282, 283, 302, 303, 318, 327, 330, 333, 373, 376, 377, 380, 385, 388, 393, 396, 414, 417, 438, 441, 442, 445, 446, 449, 450, 453, 454, 457, 458, 461, 462, 465, 486, 489, 490, 493, 494, 497, 513, 516, 572, 573, 576, 580, 581, 590, 593, 597, 599, 609, 611, 616, 618, 619, 620, 621, 634, 644, 645, 646, 679, 683, 697, 698, 701, 725, 727, 748, 750, 763, 765, 785, 824, 845, 846, 847, 848, 849, 850, 851, 855, 859, 860, 861, 872, 873, 884, 885, 886, 898, 899, 902, 904, 907, 909, 914, 917, 918, 921, 922, 925, 926, 929, 930, 933, 934, 937, 938, 941, 942, 943, 946, 948, 951], "deriv": [26, 27, 28, 29, 30, 127, 128, 134, 136, 175, 185, 188, 199, 202, 223, 226, 241, 245, 646, 648, 651, 653, 655, 658, 660, 666, 668, 670, 672, 674, 676, 849, 851, 861, 987, 991, 995, 997], "tupl": [26, 27, 28, 29, 30, 47, 48, 59, 60, 69, 72, 73, 116, 117, 121, 126, 127, 128, 130, 134, 135, 136, 149, 175, 179, 182, 184, 198, 215, 218, 220, 221, 238, 240, 246, 254, 268, 283, 302, 572, 599, 635, 684, 687, 690, 691, 694, 697, 729, 731, 738, 740, 748, 749, 750, 754, 756, 763, 765, 785, 791, 794, 795, 798, 803, 806, 807, 810, 815, 818, 819, 822, 825, 828, 829, 832, 841, 844, 845, 846, 847, 848, 849, 851, 852, 854, 856, 857, 858, 860, 861, 863, 864, 865, 866, 872, 877, 878, 880, 884, 887, 889, 890, 891, 893, 895, 896, 909, 914, 917, 918, 921, 922, 925, 926, 929, 930, 933, 934, 937, 938, 941, 942, 943, 946, 948, 951], "kei": [26, 27, 28, 69, 72, 73, 74, 75, 76, 121, 126, 130, 135, 283, 295, 572, 578, 588, 684, 695, 696, 845, 846, 847, 849, 852, 858, 862, 964, 965, 975, 986, 991, 995], "word": [26, 27, 28, 175, 176, 177, 872, 878, 880, 964, 965], "args_to_n": [26, 129, 134], "to_ivi": [26, 72, 73, 134, 849, 862], "input": [26, 29, 30, 41, 42, 72, 73, 74, 75, 76, 83, 84, 85, 86, 87, 88, 93, 94, 97, 98, 101, 102, 116, 117, 118, 119, 121, 122, 123, 125, 126, 127, 128, 129, 132, 134, 135, 136, 137, 149, 150, 158, 160, 161, 162, 163, 164, 165, 166, 169, 171, 172, 173, 175, 176, 177, 179, 182, 184, 185, 188, 190, 191, 193, 196, 198, 199, 202, 204, 205, 207, 208, 210, 213, 215, 218, 220, 221, 223, 226, 228, 232, 233, 237, 238, 240, 241, 245, 246, 252, 253, 254, 255, 258, 260, 261, 262, 263, 264, 265, 271, 272, 273, 274, 278, 283, 292, 293, 302, 303, 304, 305, 307, 308, 311, 315, 321, 327, 328, 333, 334, 337, 338, 339, 342, 343, 346, 347, 350, 351, 352, 355, 356, 359, 360, 361, 364, 365, 368, 369, 372, 373, 376, 377, 380, 381, 384, 385, 388, 389, 392, 393, 396, 397, 400, 401, 404, 405, 408, 409, 412, 414, 417, 418, 421, 422, 425, 426, 429, 430, 433, 434, 437, 438, 441, 442, 445, 446, 449, 450, 453, 454, 457, 458, 461, 462, 465, 466, 469, 470, 473, 474, 477, 478, 481, 482, 485, 486, 489, 490, 493, 494, 497, 498, 501, 502, 503, 504, 507, 509, 512, 513, 516, 517, 520, 521, 524, 525, 528, 529, 532, 533, 536, 537, 540, 541, 544, 545, 548, 549, 552, 553, 557, 558, 559, 562, 563, 564, 567, 568, 571, 572, 573, 576, 577, 578, 580, 581, 582, 584, 585, 587, 589, 590, 591, 593, 594, 595, 596, 597, 598, 599, 600, 601, 604, 605, 609, 611, 612, 614, 615, 616, 618, 619, 620, 621, 625, 628, 629, 634, 635, 638, 640, 641, 642, 644, 645, 646, 648, 649, 650, 651, 652, 657, 662, 664, 679, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 701, 702, 703, 705, 706, 708, 709, 711, 712, 714, 715, 717, 718, 720, 721, 724, 725, 727, 729, 731, 732, 734, 735, 737, 738, 740, 741, 743, 744, 745, 747, 748, 750, 751, 753, 754, 756, 757, 759, 760, 762, 763, 765, 766, 768, 769, 770, 773, 775, 778, 780, 783, 785, 786, 789, 790, 791, 794, 795, 798, 799, 802, 803, 806, 807, 810, 811, 814, 815, 818, 819, 822, 823, 824, 825, 828, 829, 832, 833, 836, 837, 840, 841, 844, 845, 846, 847, 848, 867, 868, 871, 872, 873, 874, 875, 876, 877, 878, 880, 883, 884, 885, 886, 887, 888, 889, 890, 891, 895, 896, 897, 898, 899, 902, 904, 907, 909, 910, 913, 914, 917, 918, 921, 922, 925, 926, 929, 930, 933, 934, 937, 938, 941, 942, 943, 946, 948, 951, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 989, 990], "leaf": [26, 29, 30, 72, 73, 122, 126, 135, 849, 850, 859, 860], "union": [26, 29, 30, 39, 40, 47, 48, 72, 73, 116, 117, 119, 122, 125, 126, 127, 128, 129, 130, 132, 137, 160, 161, 162, 163, 164, 165, 166, 169, 171, 172, 173, 175, 176, 177, 179, 182, 184, 185, 188, 190, 191, 198, 199, 202, 204, 205, 207, 208, 210, 213, 215, 218, 220, 221, 223, 226, 228, 232, 233, 237, 238, 240, 241, 245, 246, 250, 251, 252, 253, 254, 260, 261, 262, 263, 264, 265, 266, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 282, 283, 299, 300, 301, 302, 303, 305, 308, 309, 310, 311, 316, 322, 324, 326, 327, 328, 329, 332, 333, 334, 337, 339, 342, 343, 346, 347, 350, 352, 355, 356, 359, 361, 364, 365, 368, 369, 372, 373, 376, 377, 380, 381, 384, 385, 388, 389, 392, 393, 396, 397, 400, 401, 404, 405, 408, 409, 412, 414, 417, 418, 421, 422, 425, 426, 429, 430, 433, 434, 437, 438, 441, 442, 445, 446, 449, 450, 453, 454, 457, 458, 461, 462, 465, 466, 469, 470, 473, 474, 477, 478, 481, 482, 485, 490, 493, 494, 497, 498, 501, 502, 503, 504, 507, 509, 512, 513, 516, 517, 520, 521, 524, 525, 528, 529, 532, 533, 536, 537, 540, 541, 544, 545, 548, 549, 552, 553, 557, 558, 562, 563, 567, 568, 571, 572, 573, 576, 580, 581, 584, 585, 587, 590, 591, 594, 595, 596, 598, 599, 600, 601, 602, 604, 609, 611, 612, 614, 615, 616, 625, 628, 629, 634, 635, 640, 641, 642, 644, 645, 646, 648, 651, 653, 655, 658, 660, 666, 668, 670, 672, 674, 676, 679, 681, 684, 685, 686, 687, 688, 689, 690, 691, 693, 694, 696, 697, 698, 701, 703, 705, 706, 708, 709, 711, 712, 714, 715, 717, 718, 720, 721, 724, 725, 727, 729, 731, 732, 734, 735, 737, 738, 740, 741, 743, 744, 745, 747, 748, 749, 750, 751, 753, 754, 756, 757, 759, 760, 762, 763, 765, 766, 768, 769, 770, 773, 775, 778, 780, 783, 785, 786, 789, 791, 794, 795, 798, 799, 802, 803, 806, 807, 810, 811, 814, 815, 818, 819, 822, 824, 825, 828, 829, 832, 833, 836, 837, 840, 841, 844, 845, 846, 847, 848, 849, 850, 851, 860, 861, 867, 868, 871, 872, 873, 874, 875, 877, 878, 880, 883, 884, 885, 886, 887, 888, 889, 890, 891, 895, 896, 897, 898, 899, 902, 904, 907, 909, 910, 913, 914, 917, 918, 921, 922, 925, 930, 933, 934, 937, 938, 941, 942, 943, 946, 948, 951], "nativearrai": [26, 29, 30, 31, 32, 39, 40, 116, 117, 119, 122, 125, 126, 129, 130, 132, 134, 137, 150, 158, 160, 161, 162, 163, 164, 165, 166, 169, 171, 175, 176, 177, 179, 182, 185, 188, 199, 202, 204, 205, 207, 208, 210, 213, 215, 216, 218, 223, 226, 228, 232, 233, 237, 241, 245, 246, 252, 253, 254, 255, 258, 264, 266, 269, 271, 272, 274, 278, 283, 302, 303, 305, 321, 327, 328, 333, 334, 337, 339, 342, 343, 346, 347, 350, 352, 355, 356, 359, 361, 364, 365, 368, 369, 372, 373, 376, 377, 380, 381, 384, 385, 388, 389, 392, 393, 396, 397, 400, 401, 404, 405, 408, 409, 412, 414, 417, 418, 421, 422, 425, 426, 429, 430, 433, 434, 437, 438, 441, 442, 445, 446, 449, 450, 453, 454, 457, 458, 461, 462, 465, 466, 469, 470, 473, 474, 477, 478, 481, 482, 485, 490, 493, 494, 497, 498, 501, 502, 503, 504, 507, 509, 512, 513, 516, 517, 520, 521, 524, 525, 528, 529, 532, 533, 536, 537, 540, 541, 544, 545, 548, 549, 552, 553, 557, 558, 562, 563, 567, 568, 571, 572, 573, 574, 576, 580, 581, 584, 585, 587, 589, 590, 591, 594, 595, 596, 598, 599, 600, 601, 602, 604, 609, 611, 612, 614, 615, 616, 625, 628, 629, 634, 635, 640, 641, 642, 644, 645, 646, 648, 651, 653, 655, 658, 660, 666, 668, 670, 672, 674, 676, 679, 681, 684, 685, 686, 687, 688, 689, 690, 691, 693, 694, 696, 697, 698, 701, 703, 705, 706, 708, 709, 711, 712, 714, 715, 717, 718, 720, 721, 724, 725, 727, 729, 731, 732, 734, 735, 737, 738, 740, 741, 743, 744, 745, 747, 748, 750, 751, 753, 754, 756, 757, 759, 760, 762, 763, 765, 766, 768, 769, 770, 773, 775, 778, 780, 783, 785, 786, 789, 791, 794, 795, 798, 799, 802, 803, 806, 807, 810, 811, 814, 815, 818, 819, 822, 824, 825, 828, 829, 832, 833, 836, 837, 840, 841, 844, 849, 851, 861, 867, 868, 871, 872, 873, 883, 884, 885, 886, 887, 888, 889, 890, 891, 895, 896, 897, 898, 899, 902, 904, 907, 909, 910, 913, 914, 917, 918, 921, 922, 925, 930, 933, 934, 937, 938, 941, 942, 943, 946, 948, 951], "travers": [26, 29, 30, 72, 73, 126, 132, 134, 849, 861], "lowest": [26, 29, 30, 72, 73, 122, 149, 849, 861, 872, 874, 875], "leav": [26, 29, 30, 72, 73, 74, 75, 117, 118, 119, 121, 122, 126, 127, 129, 135, 136, 785, 829, 832, 849, 850, 851, 859, 860, 861], "to_n": [26, 72, 73], "item": [26, 30, 67, 68, 69, 72, 73, 127, 132, 134, 135, 137, 246, 261, 283, 292, 293, 295, 302, 304, 306, 308, 310, 314, 572, 588, 610, 636, 637, 849, 854, 855, 856, 857, 861, 865, 866, 953, 987, 988], "arraywithcr": 31, "asarrai": [31, 32, 77, 78, 121, 129, 175, 684, 685, 889, 891, 895], "dtype": [31, 32, 33, 34, 63, 64, 72, 73, 77, 78, 79, 80, 109, 110, 116, 119, 121, 122, 127, 128, 130, 134, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 198, 199, 200, 201, 202, 203, 204, 205, 206, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 238, 239, 240, 241, 242, 243, 244, 245, 246, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261, 262, 263, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 282, 283, 323, 333, 389, 392, 572, 580, 581, 625, 641, 684, 692, 785, 799, 802, 867, 868, 871, 872, 878, 880, 884, 885, 886, 898, 904, 907, 909, 926, 927, 928, 929, 930, 933, 934, 935, 936, 937, 942, 943, 946, 953, 966, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 997, 998], "empty_lik": [31, 32, 77, 78, 175], "from_dlpack": [31, 32, 77, 78, 175], "full_lik": [31, 32, 77, 78, 175], "fill_valu": [31, 32, 77, 78, 127, 175, 198, 199, 200, 201, 202, 203, 333, 442, 445, 462, 465], "meshgrid": [31, 32, 77, 78, 175], "xy": [31, 32, 77, 78, 175, 210, 211, 212, 213, 214], "ones_lik": [31, 32, 77, 78, 137, 175, 953], "tril": [31, 32, 77, 78, 175], "k": [31, 32, 69, 77, 78, 115, 132, 175, 190, 191, 192, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 572, 580, 684, 696, 697, 721, 724, 741, 743, 745, 747, 748, 750, 751, 753, 757, 759, 872, 877, 878, 880, 884, 887], "triu": [31, 32, 77, 78, 175], "zeros_lik": [31, 32, 77, 78, 175, 785, 786, 789, 953], "creation": [32, 72, 73, 74, 75, 76, 78, 116, 121, 127, 128, 132, 176, 177, 179, 182, 184, 185, 188, 190, 191, 193, 196, 198, 199, 202, 204, 205, 207, 208, 210, 213, 215, 218, 220, 221, 223, 226, 228, 232, 233, 237, 238, 240, 241, 245], "data_typ": [33, 34, 79, 80, 116, 121, 127, 246, 250, 251, 252, 253, 254, 255, 258, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282], "arraywithdatatyp": 33, "can_cast": [33, 34, 79, 80, 122, 127, 246, 259], "float32": [33, 34, 79, 80, 119, 121, 127, 246, 250, 251, 255, 256, 257, 258, 259, 267, 867, 868, 871], "float64": [33, 34, 121, 127, 246, 252, 255, 256, 258, 267], "arraywithdevic": [35, 134], "ab": [37, 38, 83, 84, 121, 124, 333, 338, 521, 524, 697, 763, 765, 953], "y": [37, 38, 39, 40, 47, 48, 51, 52, 59, 60, 74, 75, 83, 84, 85, 86, 93, 94, 97, 98, 101, 102, 105, 106, 116, 119, 123, 126, 132, 134, 160, 162, 163, 164, 165, 166, 169, 171, 175, 198, 199, 202, 210, 213, 220, 221, 223, 226, 241, 245, 246, 252, 283, 303, 317, 321, 326, 333, 334, 335, 336, 337, 338, 347, 348, 349, 350, 351, 352, 355, 356, 357, 358, 359, 360, 365, 368, 373, 376, 377, 380, 389, 392, 393, 396, 397, 398, 399, 400, 401, 404, 405, 408, 422, 425, 430, 431, 432, 433, 442, 445, 462, 465, 502, 503, 509, 512, 513, 516, 529, 532, 545, 548, 549, 552, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 572, 573, 574, 575, 576, 577, 580, 581, 589, 590, 597, 598, 600, 601, 602, 603, 604, 605, 634, 640, 641, 642, 646, 657, 684, 690, 691, 693, 697, 698, 699, 700, 701, 702, 703, 705, 706, 708, 718, 720, 735, 737, 754, 756, 757, 759, 769, 770, 773, 775, 778, 780, 783, 785, 786, 787, 788, 789, 790, 791, 794, 799, 802, 803, 806, 811, 814, 815, 818, 819, 820, 821, 822, 823, 824, 833, 836, 872, 873, 874, 875, 876, 877, 878, 880, 883, 884, 885, 886, 887, 888, 889, 891, 892, 893, 894, 895, 898, 899, 902, 909, 910, 913, 914, 917, 930, 933, 934, 937, 942, 943, 946], "aco": [37, 38, 83, 84, 333, 953], "acosh": [37, 38, 83, 84, 246, 267, 268, 333, 953], "x2": [37, 38, 39, 40, 47, 48, 72, 73, 83, 84, 85, 86, 93, 94, 117, 119, 246, 278, 283, 321, 333, 347, 348, 349, 350, 351, 365, 366, 367, 368, 373, 374, 375, 376, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 409, 410, 411, 412, 413, 414, 415, 416, 417, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 458, 459, 460, 461, 462, 463, 464, 465, 482, 483, 484, 485, 486, 487, 488, 489, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 513, 514, 515, 516, 521, 522, 523, 524, 525, 526, 527, 528, 553, 554, 555, 556, 557, 572, 573, 574, 575, 576, 577, 684, 689, 697, 703, 704, 705, 721, 722, 723, 724, 735, 736, 737, 745, 746, 747, 754, 755, 756, 760, 761, 762, 884, 888], "z": [37, 38, 39, 40, 74, 75, 83, 84, 85, 86, 119, 123, 126, 132, 134, 283, 317, 333, 347, 348, 349, 350, 351, 373, 376, 393, 396, 442, 445, 462, 465, 502, 503, 572, 580, 581, 600, 601, 602, 603, 605, 634, 697, 703, 705, 769, 770, 773, 775, 778, 785, 786, 789, 884, 885, 909, 910, 913, 914, 917], "asin": [37, 38, 83, 84, 333, 953], "asinh": [37, 38, 83, 84, 333, 360, 953], "881": [37, 38, 83, 84, 160, 164, 333, 356, 357, 358, 359], "82": [37, 38, 356, 357], "atan": [37, 38, 83, 84, 333, 953], "atan2": [37, 38, 83, 84, 333, 953], "atanh": [37, 38, 83, 84, 333, 953], "bitwise_and": [37, 38, 83, 84, 333], "bitwise_invert": [37, 38, 83, 84, 333], "bitwise_left_shift": [37, 38, 83, 84, 333], "bitwise_or": [37, 38, 83, 84, 333], "bitwise_right_shift": [37, 38, 83, 84, 333], "bitwise_xor": [37, 38, 83, 84, 333], "ceil": [37, 38, 83, 84, 175, 176, 177, 333, 953], "cosh": [37, 38, 83, 84, 333, 953], "divid": [37, 38, 72, 73, 83, 84, 119, 125, 333, 434, 437, 572, 636, 785, 824], "equal": [37, 38, 72, 73, 83, 84, 119, 126, 127, 175, 190, 191, 198, 199, 202, 246, 252, 333, 381, 384, 389, 392, 446, 449, 450, 453, 521, 524, 529, 532, 572, 573, 576, 580, 581, 697, 709, 711, 729, 731, 738, 740, 785, 786, 789, 795, 798, 824, 841, 844, 872, 878, 880, 889, 890, 891, 895, 897, 898, 899, 902, 904, 907, 909, 918, 921, 930, 933, 934, 937, 938, 941], "erf": [37, 38, 83, 84, 333], "exp": [37, 38, 83, 84, 333, 426, 429, 482, 485, 953], "expm1": [37, 38, 83, 84, 333], "floor": [37, 38, 83, 84, 333, 389, 392, 572, 598, 953], "floor_divid": [37, 38, 83, 84, 333], "greater": [37, 38, 72, 73, 83, 84, 333, 339, 342, 352, 355, 365, 368, 381, 384, 389, 392, 430, 433, 434, 437, 521, 524, 525, 528, 533, 536, 568, 571, 697, 703, 705, 785, 825, 828, 872, 878, 880], "greater_equ": [37, 38, 83, 84, 333], "isfinit": [37, 38, 83, 84, 121, 333], "isinf": [37, 38, 83, 84, 333], "isnan": [37, 38, 83, 84, 333], "less_equ": [37, 38, 83, 84, 333], "log10": [37, 38, 83, 84, 333], "log1p": [37, 38, 83, 84, 333], "log2": [37, 38, 83, 84, 333], "logaddexp": [37, 38, 83, 84, 333], "logical_and": [37, 38, 83, 84, 333, 953], "logical_not": [37, 38, 83, 84, 333, 953], "logical_or": [37, 38, 83, 84, 333, 953], "logical_xor": [37, 38, 83, 84, 333], "multipli": [37, 38, 83, 84, 119, 123, 125, 333, 572, 590], "neg": [37, 38, 83, 84, 122, 126, 129, 160, 162, 175, 176, 177, 190, 191, 333, 446, 449, 450, 453, 504, 507, 521, 524, 525, 528, 697, 748, 750, 760, 762, 763, 765, 785, 803, 806, 819, 822, 942, 943, 946, 948, 951], "not_equ": [37, 38, 83, 84, 333], "pow": [37, 38, 83, 84, 333], "remaind": [37, 38, 72, 73, 83, 84, 333, 572, 598, 785, 824], "sin": [37, 38, 83, 84, 125, 132, 333, 572, 599, 953], "sinh": [37, 38, 83, 84, 333, 953], "sqrt": [37, 38, 83, 84, 333, 697, 763, 765], "squar": [37, 38, 83, 84, 121, 333, 545, 548, 684, 687, 697, 698, 701, 706, 708, 712, 714, 715, 717, 718, 720, 728, 744, 745, 747, 748, 750], "subtract": [37, 38, 83, 84, 119, 125, 333], "tan": [37, 38, 83, 84, 117, 118, 122, 126, 129, 132, 333, 352, 355, 356, 359, 559, 697, 709, 711, 889, 890, 898, 899, 902, 953], "56": [37, 38, 83, 84, 119, 333, 545, 548, 558, 559, 560, 561, 562, 646, 648, 651, 697, 735, 737, 909, 910, 913], "19": [37, 38, 83, 84, 119, 333, 356, 358, 360, 393, 396, 558, 559, 560, 561, 562, 697, 709, 711], "tanh": [37, 38, 83, 84, 132, 160, 333, 564, 953], "762": [37, 38, 83, 84, 160, 171, 333, 563, 565, 566, 567], "964": [37, 38, 83, 84, 160, 171, 333, 563, 565, 566, 567], "trunc": [37, 38, 83, 84, 333], "elementwis": [38, 72, 73, 84, 116, 122, 132, 137, 334, 337, 339, 342, 343, 346, 347, 350, 352, 355, 356, 359, 361, 364, 365, 368, 369, 372, 373, 376, 377, 380, 381, 384, 385, 388, 389, 392, 393, 396, 397, 400, 401, 404, 405, 408, 409, 412, 414, 417, 418, 421, 422, 425, 426, 429, 430, 433, 434, 437, 438, 441, 442, 445, 446, 449, 450, 453, 454, 457, 458, 461, 462, 465, 466, 469, 470, 473, 474, 477, 478, 481, 482, 485, 486, 489, 490, 493, 494, 497, 498, 501, 502, 503, 504, 507, 509, 512, 513, 516, 517, 520, 521, 524, 525, 528, 529, 532, 533, 536, 537, 540, 541, 544, 545, 548, 549, 552, 553, 557, 558, 562, 563, 567, 568, 571], "arraywithgener": [39, 134], "all_equ": [39, 40, 85, 86, 572, 577], "equality_matrix": [39, 40, 85, 86, 572, 573, 574, 575, 576, 577], "x1": [39, 40, 83, 84, 85, 86, 117, 119, 246, 278, 283, 321, 333, 347, 350, 351, 365, 368, 373, 376, 381, 384, 385, 388, 389, 392, 393, 396, 409, 412, 413, 414, 417, 434, 437, 438, 441, 442, 445, 458, 461, 462, 465, 482, 485, 486, 489, 494, 497, 498, 501, 502, 503, 504, 507, 508, 513, 516, 521, 524, 525, 528, 553, 554, 557, 572, 573, 574, 575, 576, 577, 580, 684, 689, 697, 703, 705, 721, 724, 735, 737, 745, 747, 754, 756, 760, 762, 884, 888], "mix": [39, 40, 74, 75, 115, 119, 121, 132, 246, 274, 283, 321, 333, 347, 350, 373, 376, 393, 396, 442, 445, 462, 465, 502, 503, 513, 516, 572, 573, 574, 589, 597, 600, 601, 604, 640, 641, 642, 684, 687, 690, 691, 696, 697, 698, 701, 754, 756, 769, 770, 773, 780, 783, 785, 786, 789, 867, 868, 871, 884, 888, 909, 910, 913, 918, 921], "gather_nd": [39, 40, 72, 73, 85, 86, 572, 605, 953], "arraywithgradi": [41, 134], "adam_step": [41, 42, 87, 88, 646, 652], "mw": [41, 42, 87, 88, 136, 646, 648, 649, 650, 651, 652, 653, 655], "vw": [41, 42, 87, 88, 136, 646, 648, 649, 650, 651, 652, 653, 655], "beta1": [41, 42, 87, 88, 136, 646, 648, 649, 650, 651, 652, 653, 654, 655, 656, 666, 667, 668, 669, 991, 992, 993], "beta2": [41, 42, 87, 88, 136, 646, 648, 649, 650, 651, 652, 653, 654, 655, 656, 666, 667, 668, 669, 991, 992, 993], "999": [41, 42, 83, 84, 87, 88, 136, 333, 563, 564, 566, 567, 646, 648, 649, 650, 651, 652, 653, 654, 655, 656, 666, 667, 668, 669, 991, 992, 993], "epsilon": [41, 42, 49, 50, 53, 54, 87, 88, 95, 96, 99, 100, 122, 126, 129, 136, 646, 648, 649, 650, 651, 652, 653, 654, 655, 656, 666, 667, 668, 669, 697, 729, 731, 738, 740, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 867, 868, 869, 870, 871, 989, 990, 991, 992, 993], "1e": [41, 42, 49, 50, 53, 54, 87, 88, 95, 96, 99, 100, 122, 126, 129, 136, 137, 572, 608, 646, 648, 649, 650, 651, 652, 653, 654, 655, 656, 666, 667, 668, 669, 697, 748, 750, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 867, 868, 869, 870, 871, 953, 991, 992, 993, 994, 996], "07": [41, 42, 49, 50, 87, 88, 95, 96, 136, 646, 648, 649, 650, 651, 652, 653, 654, 655, 656, 666, 667, 668, 669, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 991, 992, 993], "dcdw": [41, 42, 87, 88, 646, 648, 649, 650, 651, 652, 653, 654, 655, 656, 658, 659, 660, 661, 666, 667, 668, 669, 670, 671, 672, 673], "adam_step_delta": [41, 42, 87, 88, 646, 648, 649, 650, 651, 652], "639": [41, 42, 646, 648, 649, 651], "11": [41, 42, 74, 75, 83, 84, 101, 102, 119, 121, 126, 333, 347, 349, 350, 351, 373, 376, 529, 532, 572, 590, 600, 648, 649, 697, 709, 711, 735, 737, 769, 780, 783, 785, 803, 806, 811, 814, 872, 874, 875, 876, 884, 888, 889, 890, 909, 910, 913], "32": [41, 42, 121, 135, 160, 162, 333, 393, 396, 648, 649, 684, 687, 690, 697, 735, 737, 884, 888, 909, 910, 913], "63": [41, 42, 93, 94, 333, 545, 548, 648, 649, 697, 698, 700, 701, 702, 735, 737, 909, 910, 913], "00121": [41, 42, 648, 649], "0102": [41, 42, 648, 649], "0397": [41, 42, 648, 649], "gradient": [42, 72, 73, 88, 116, 126, 135, 136, 148, 149, 283, 327, 648, 651, 653, 655, 657, 658, 660, 662, 664, 666, 668, 670, 672, 674, 676, 678, 679, 680, 681, 682, 683, 845, 846, 847, 848, 953, 991, 992, 993, 994, 995, 996], "arraywithimag": [43, 134], "arraywithlay": 45, "linear_algebra": [47, 48, 93, 94, 116, 134, 697, 698, 701, 703, 705, 706, 708, 709, 711, 712, 714, 715, 717, 718, 720, 721, 724, 725, 727, 728, 729, 731, 732, 734, 735, 737, 738, 740, 741, 743, 744, 745, 747, 748, 750, 751, 753, 754, 756, 757, 759, 760, 762, 763, 765, 766, 768], "arraywithlinearalgebra": 47, "choleski": [47, 48, 93, 94, 697, 702], "upper": [47, 48, 72, 73, 93, 94, 121, 175, 190, 191, 233, 237, 697, 698, 699, 700, 701, 702, 741, 743, 872, 878, 880], "625": [47, 48, 697, 698, 699, 701], "25": [47, 48, 126, 333, 545, 548, 549, 552, 697, 698, 699, 701, 709, 711, 718, 720, 769, 775, 778, 867, 868, 871, 909, 910, 913], "cross": [47, 48, 74, 75, 697, 769, 770, 773, 775, 778, 780, 783, 953], "axi": [47, 48, 49, 50, 51, 52, 61, 62, 63, 64, 65, 66, 72, 73, 77, 78, 95, 96, 97, 98, 107, 108, 109, 110, 111, 112, 117, 119, 121, 122, 126, 127, 129, 130, 132, 134, 137, 148, 160, 165, 175, 204, 205, 206, 207, 208, 209, 283, 285, 288, 295, 308, 309, 310, 311, 312, 313, 314, 315, 327, 572, 590, 591, 600, 644, 697, 703, 704, 705, 709, 711, 760, 761, 762, 763, 764, 765, 769, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 791, 792, 793, 794, 795, 798, 799, 800, 801, 802, 803, 804, 805, 806, 811, 812, 813, 814, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 836, 837, 840, 841, 844, 872, 883, 884, 885, 886, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952], "det": [47, 48, 74, 75, 697], "diagon": [47, 48, 74, 75, 175, 190, 191, 228, 232, 233, 237, 697, 757, 759], "offset": [47, 48, 53, 54, 99, 100, 697, 709, 710, 711, 757, 758, 759, 867, 868, 869, 870, 871], "axis1": [47, 48, 51, 52, 97, 98, 697, 709, 710, 711, 785, 833, 834, 835, 836], "axis2": [47, 48, 697, 709, 710, 711], "eigh": [47, 48, 74, 75, 697], "namedtupl": [47, 48, 697, 712, 713, 714, 741, 742, 743, 748, 750, 889, 890, 891, 895], "eigvalsh": [47, 48, 74, 75, 697], "inv": [47, 48, 74, 75, 134, 697, 953], "matmul": [47, 48, 93, 94, 116, 121, 123, 132, 697, 748, 750, 953], "matrix_norm": [47, 48, 72, 73, 697], "ord": [47, 48, 72, 73, 697, 725, 726, 727, 763, 764, 765], "fro": [47, 48, 697, 725, 726, 727], "keepdim": [47, 48, 63, 64, 65, 66, 72, 73, 109, 110, 111, 112, 130, 572, 644, 697, 725, 726, 727, 763, 764, 765, 884, 885, 886, 909, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952], "matrix_rank": [47, 48, 74, 75, 697], "rtol": [47, 48, 697, 729, 730, 731, 738, 739, 740], "matrix_transpos": [47, 48, 74, 75, 134, 697], "outer": [47, 48, 74, 75, 697, 845, 846, 847, 848], "pinv": [47, 48, 74, 75, 697, 953], "qr": [47, 48, 74, 75, 697], "reduc": [47, 48, 72, 73, 134, 283, 327, 572, 595, 697, 741, 742, 743, 884, 885, 886, 909, 914, 917, 918, 921, 922, 925, 926, 929, 930, 933, 934, 937, 938, 941, 942, 943, 946, 948, 951], "solv": [47, 48, 74, 75, 133, 148, 697], "svd": [47, 48, 74, 75, 697, 953], "full_matric": [47, 48, 697, 748, 749, 750], "svdval": [47, 48, 74, 75, 697], "tensordot": [47, 48, 74, 75, 697], "ax": [47, 48, 51, 52, 72, 73, 97, 98, 116, 119, 121, 127, 134, 283, 327, 572, 590, 697, 725, 727, 745, 747, 754, 755, 756, 763, 765, 785, 795, 798, 803, 806, 807, 808, 809, 810, 819, 822, 825, 828, 833, 836, 841, 844, 884, 885, 886, 909, 914, 917, 918, 921, 922, 925, 926, 929, 930, 933, 934, 937, 938, 941, 942, 943, 946, 948, 951], "trace": [47, 48, 72, 73, 74, 75, 132, 149, 572, 618, 619, 621, 697], "vecdot": [47, 48, 74, 75, 697], "vector_norm": [47, 48, 72, 73, 697], "vector_to_skew_symmetric_matrix": [47, 48, 74, 75, 697, 953], "arraywithloss": 49, "binary_cross_entropi": [49, 50, 95, 96, 769], "pred": [49, 50, 95, 96, 122, 126, 129, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784], "cross_entropi": [49, 50, 95, 96, 122, 126, 129, 769, 780, 783], "sparse_cross_entropi": [49, 50, 95, 96, 769], "loss": [50, 96, 116, 122, 135, 136, 137, 770, 773, 775, 778, 780, 783, 953], "arraywithmanipul": 51, "clip": [51, 52, 72, 73, 97, 98, 122, 126, 129, 132, 135, 137, 333, 502, 503, 572, 584, 585, 587, 785, 790, 953], "x_min": [51, 52, 72, 73, 97, 98, 132, 137, 785, 786, 787, 788, 789, 790], "x_max": [51, 52, 72, 73, 97, 98, 132, 137, 785, 786, 787, 788, 789, 790], "roll": [51, 52, 97, 98, 117, 126, 785, 786, 787, 823], "concat": [51, 52, 72, 73, 97, 98, 283, 312, 313, 314, 315, 327, 572, 599, 785, 953], "xs": [51, 52, 97, 98, 126, 283, 306, 310, 312, 313, 314, 572, 573, 576, 581, 646, 657, 785, 791, 792, 793, 794], "constant_pad": [51, 52, 97, 98, 785], "pad_width": [51, 52, 97, 98, 785, 795, 796, 797, 798, 841, 842, 843, 844], "expand_dim": [51, 52, 97, 98, 132, 135, 785, 953], "flip": [51, 52, 97, 98, 134, 135, 137, 333, 377, 380, 785, 811, 814, 953], "permute_dim": [51, 52, 97, 98, 785], "reshap": [51, 52, 72, 73, 97, 98, 121, 129, 132, 134, 137, 785, 953], "shift": [51, 52, 97, 98, 117, 119, 333, 381, 384, 389, 392, 785, 819, 820, 821, 822, 823], "squeez": [51, 52, 97, 98, 785, 953], "stack": [51, 52, 72, 73, 97, 98, 132, 175, 228, 232, 233, 237, 697, 706, 708, 709, 711, 712, 714, 715, 717, 718, 720, 721, 724, 728, 729, 731, 732, 734, 738, 740, 741, 743, 748, 750, 751, 753, 757, 759, 785, 849, 850, 859, 860, 953, 975, 984], "swapax": [51, 52, 97, 98, 785], "axis0": [51, 52, 97, 98, 785, 833, 834, 835, 836], "tile": [51, 52, 97, 98, 785, 953], "rep": [51, 52, 97, 98, 785, 837, 838, 839, 840], "zero_pad": [51, 52, 97, 98, 785, 953], "arraywithnorm": 53, "layer_norm": [53, 54, 99, 100, 867], "normalized_idx": [53, 54, 99, 100, 867, 868, 869, 870, 871], "05": [53, 54, 99, 100, 121, 283, 646, 648, 651, 867, 868, 869, 870, 871], "scale": [53, 54, 99, 100, 126, 283, 325, 326, 646, 670, 672, 684, 692, 695, 696, 867, 868, 869, 870, 871, 975, 983, 986, 991, 994], "new_std": [53, 54, 99, 100, 867, 868, 869, 870, 871, 989, 990], "norm": [54, 72, 73, 100, 116, 572, 584, 585, 587, 697, 725, 727, 763, 765, 868, 871, 953, 990, 991, 993], "arraywithrandom": [55, 134], "random": [56, 72, 73, 102, 116, 128, 137, 148, 873, 874, 875, 877, 878, 880, 882, 883, 953], "arraywithsearch": 57, "arraywithset": 59, "unique_count": [59, 60, 105, 106, 889, 892], "uc": [59, 60, 891, 893], "count": [59, 60, 119, 135, 283, 321, 697, 760, 762, 785, 803, 806, 889, 890, 891, 893, 895, 942, 943, 946, 948, 951], "arraywithsort": 61, "argsort": [61, 62, 107, 108, 898], "descend": [61, 62, 107, 108, 697, 748, 750, 751, 753, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908], "sort": [62, 72, 73, 74, 75, 76, 108, 116, 697, 712, 714, 748, 750, 751, 753, 899, 902], "arraywithstatist": 63, "einsum": [63, 64, 109, 110, 909], "equat": [63, 64, 109, 110, 697, 745, 747, 909, 910, 911, 912, 913], "max": [63, 64, 72, 73, 109, 110, 246, 266, 269, 333, 502, 572, 584, 585, 587, 595, 628, 629, 697, 729, 731, 738, 740, 909, 991, 993], "min": [63, 64, 72, 73, 109, 110, 246, 266, 269, 333, 503, 572, 595, 628, 629, 636, 697, 741, 743, 748, 750, 751, 753, 763, 765, 909], "prod": [63, 64, 72, 73, 109, 110, 119, 127, 572, 595, 909], "std": [63, 64, 109, 110, 119, 872, 877, 889, 890, 909], "sum": [63, 64, 72, 73, 109, 110, 122, 126, 127, 129, 132, 283, 312, 313, 314, 315, 327, 333, 347, 350, 482, 485, 572, 591, 595, 628, 629, 684, 696, 697, 748, 750, 757, 759, 763, 765, 909, 910, 913, 930, 933], "var": [63, 64, 109, 110, 113, 114, 119, 132, 845, 846, 847, 909], "statist": [64, 110, 113, 114, 116, 121, 127, 910, 913, 914, 917, 918, 921, 922, 925, 926, 929, 930, 933, 934, 937, 938, 941], "arraywithutil": 65, "util": [66, 112, 116, 128, 283, 316, 943, 946, 948, 951], "add_ivy_array_instance_method": 67, "cl": [67, 68, 113, 114], "to_ignor": [67, 68, 113, 114, 849, 860], "loop": [67, 68, 113, 114, 123, 130, 149, 845, 846, 847, 848], "_wrap_funct": [67, 68, 113, 114, 122, 124], "toi": [67, 68, 113, 114], "arrayexampl": [67, 68], "hasattr": [67, 68, 113, 114, 134], "relu": [67, 68, 74, 75, 135, 136, 160, 161, 162, 953], "softmax": [67, 68, 74, 75, 160, 684, 695, 696, 953], "empti": [69, 72, 73, 74, 75, 125, 127, 128, 175, 176, 177, 646, 683, 909, 930, 933, 934, 937, 942, 943, 946, 948, 951], "dictionari": [69, 72, 73, 74, 75, 76, 135, 149, 283, 326], "map": [69, 72, 73, 74, 75, 76, 117, 121, 122, 126, 135, 148, 149, 283, 292, 849, 856, 857, 861, 862, 975, 986], "pair": [69, 333, 365, 368, 684, 696, 697, 703, 705], "via": [69, 116, 126, 127, 128, 129, 132, 134, 135, 148, 849, 850, 859, 860], "__delitem__": 69, "__iter__": 69, "__len__": 69, "len": [69, 134, 137, 175, 210, 213], "__reversed__": 69, "fromkei": 69, "keyerror": 69, "popitem": 69, "lifo": 69, "setdefault": 69, "insert": [69, 785, 799, 802, 849, 854, 884, 885], "lack": 69, "containerwithactiv": [70, 74, 75], "dict_in": [70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112], "queue": [70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 135, 283, 292, 293, 572, 627, 632], "queue_load_s": [70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112], "container_combine_method": [70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112], "list_join": [70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112], "queue_timeout": [70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 572], "print_limit": [70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112], "key_length_limit": [70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112], "print_ind": [70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112], "print_line_spac": [70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112], "ivyh": [70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112], "default_key_color": [70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112], "keyword_color_dict": [70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112], "rebuild_child_contain": [70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112], "types_to_iteratively_nest": [70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112], "alphabetical_kei": [70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112], "containerbas": [70, 71, 72, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 126], "key_chain": [70, 71, 72, 73, 74, 75, 77, 78, 79, 80, 83, 84, 85, 86, 87, 88, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 105, 106, 107, 108, 109, 110, 111, 112, 166, 168, 170, 176, 178, 179, 181, 183, 185, 187, 189, 190, 192, 193, 195, 197, 199, 201, 203, 204, 206, 207, 209, 210, 212, 214, 215, 217, 219, 220, 222, 223, 225, 227, 228, 229, 231, 233, 234, 236, 238, 239, 241, 242, 244, 255, 257, 259, 334, 336, 338, 339, 341, 343, 345, 347, 349, 351, 352, 354, 356, 358, 360, 361, 363, 365, 367, 369, 371, 373, 375, 377, 379, 381, 383, 385, 387, 389, 391, 393, 395, 397, 399, 401, 403, 405, 407, 409, 411, 413, 414, 416, 418, 420, 422, 424, 426, 428, 430, 432, 434, 436, 438, 440, 442, 444, 446, 448, 450, 452, 454, 456, 458, 460, 462, 464, 466, 468, 470, 472, 474, 476, 478, 480, 482, 484, 486, 488, 490, 492, 494, 496, 498, 500, 504, 506, 508, 509, 511, 513, 515, 517, 519, 521, 523, 525, 527, 529, 531, 533, 535, 537, 539, 541, 543, 545, 547, 549, 551, 553, 554, 556, 558, 559, 561, 563, 564, 566, 568, 570, 573, 575, 577, 585, 586, 601, 603, 605, 653, 654, 656, 658, 659, 661, 662, 663, 665, 666, 667, 669, 670, 671, 673, 674, 675, 677, 698, 700, 702, 721, 723, 770, 772, 774, 775, 777, 779, 780, 782, 784, 786, 788, 790, 791, 793, 795, 797, 799, 801, 803, 805, 807, 809, 811, 813, 815, 817, 819, 821, 823, 825, 827, 829, 831, 833, 835, 837, 839, 841, 843, 849, 862, 868, 870, 874, 876, 878, 879, 881, 891, 892, 894, 899, 901, 903, 904, 906, 908, 910, 912, 914, 916, 918, 920, 922, 924, 926, 928, 930, 932, 934, 936, 938, 940, 943, 945, 947, 948, 950, 952], "to_appli": [70, 71, 72, 73, 74, 75, 77, 78, 79, 80, 83, 84, 85, 86, 87, 88, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 105, 106, 107, 108, 109, 110, 111, 112, 166, 168, 170, 176, 178, 179, 181, 183, 185, 187, 189, 190, 192, 193, 195, 197, 199, 201, 203, 204, 206, 207, 209, 210, 212, 214, 215, 217, 219, 220, 222, 223, 225, 227, 228, 229, 231, 233, 234, 236, 238, 239, 241, 242, 244, 255, 257, 259, 334, 336, 338, 339, 341, 343, 345, 347, 349, 351, 352, 354, 356, 358, 360, 361, 363, 365, 367, 369, 371, 373, 375, 377, 379, 381, 383, 385, 387, 389, 391, 393, 395, 397, 399, 401, 403, 405, 407, 409, 411, 413, 414, 416, 418, 420, 422, 424, 426, 428, 430, 432, 434, 436, 438, 440, 442, 444, 446, 448, 450, 452, 454, 456, 458, 460, 462, 464, 466, 468, 470, 472, 474, 476, 478, 480, 482, 484, 486, 488, 490, 492, 494, 496, 498, 500, 504, 506, 508, 509, 511, 513, 515, 517, 519, 521, 523, 525, 527, 529, 531, 533, 535, 537, 539, 541, 543, 545, 547, 549, 551, 553, 554, 556, 558, 559, 561, 563, 564, 566, 568, 570, 573, 575, 577, 585, 586, 601, 603, 605, 653, 654, 656, 658, 659, 661, 662, 663, 665, 666, 667, 669, 670, 671, 673, 674, 675, 677, 698, 700, 702, 721, 723, 770, 772, 774, 775, 777, 779, 780, 782, 784, 786, 788, 790, 791, 793, 795, 797, 799, 801, 803, 805, 807, 809, 811, 813, 815, 817, 819, 821, 823, 825, 827, 829, 831, 833, 835, 837, 839, 841, 843, 849, 862, 868, 870, 878, 879, 881, 891, 892, 894, 899, 901, 903, 904, 906, 908, 910, 912, 914, 916, 918, 920, 922, 924, 926, 928, 930, 932, 934, 936, 938, 940, 943, 945, 947, 948, 950, 952], "prune_unappli": [70, 71, 72, 73, 74, 75, 77, 78, 79, 80, 83, 84, 85, 86, 87, 88, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 105, 106, 107, 108, 109, 110, 111, 112, 166, 168, 170, 176, 178, 179, 181, 183, 185, 187, 189, 190, 192, 193, 195, 197, 199, 201, 203, 204, 206, 207, 209, 210, 212, 214, 215, 217, 219, 220, 222, 223, 225, 227, 228, 229, 231, 233, 234, 236, 238, 239, 241, 242, 244, 255, 257, 259, 334, 336, 338, 339, 341, 343, 345, 347, 349, 351, 352, 354, 356, 358, 360, 361, 363, 365, 367, 369, 371, 373, 375, 377, 379, 381, 383, 385, 387, 389, 391, 393, 395, 397, 399, 401, 403, 405, 407, 409, 411, 413, 414, 416, 418, 420, 422, 424, 426, 428, 430, 432, 434, 436, 438, 440, 442, 444, 446, 448, 450, 452, 454, 456, 458, 460, 462, 464, 466, 468, 470, 472, 474, 476, 478, 480, 482, 484, 486, 488, 490, 492, 494, 496, 498, 500, 504, 506, 508, 509, 511, 513, 515, 517, 519, 521, 523, 525, 527, 529, 531, 533, 535, 537, 539, 541, 543, 545, 547, 549, 551, 553, 554, 556, 558, 559, 561, 563, 564, 566, 568, 570, 573, 575, 577, 585, 586, 601, 603, 605, 653, 654, 656, 658, 659, 661, 662, 663, 665, 666, 667, 669, 670, 671, 673, 674, 675, 677, 698, 700, 702, 721, 723, 770, 772, 774, 775, 777, 779, 780, 782, 784, 786, 788, 790, 791, 793, 795, 797, 799, 801, 803, 805, 807, 809, 811, 813, 815, 817, 819, 821, 823, 825, 827, 829, 831, 833, 835, 837, 839, 841, 843, 849, 862, 868, 870, 878, 879, 881, 891, 892, 894, 899, 901, 903, 904, 906, 908, 910, 912, 914, 916, 918, 920, 922, 924, 926, 928, 930, 932, 934, 936, 938, 940, 943, 945, 947, 948, 950, 952], "map_sequ": [70, 71, 72, 73, 74, 75, 77, 78, 79, 80, 83, 84, 85, 86, 87, 88, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 105, 106, 107, 108, 109, 110, 111, 112, 166, 168, 170, 176, 178, 179, 181, 183, 185, 187, 189, 190, 192, 193, 195, 197, 199, 201, 203, 204, 206, 207, 209, 210, 212, 214, 215, 217, 219, 220, 222, 223, 225, 227, 228, 229, 231, 233, 234, 236, 238, 239, 241, 242, 244, 255, 257, 259, 334, 336, 338, 339, 341, 343, 345, 347, 349, 351, 352, 354, 356, 358, 360, 361, 363, 369, 371, 377, 379, 397, 399, 401, 403, 405, 407, 409, 411, 413, 418, 420, 422, 424, 426, 428, 430, 432, 446, 448, 450, 452, 454, 456, 466, 468, 470, 472, 474, 476, 478, 480, 490, 492, 504, 506, 508, 509, 511, 517, 519, 529, 531, 533, 535, 537, 539, 541, 543, 545, 547, 549, 551, 553, 554, 556, 558, 559, 561, 563, 564, 566, 568, 570, 573, 575, 577, 585, 586, 601, 603, 605, 653, 654, 656, 658, 659, 661, 662, 663, 665, 666, 667, 669, 670, 671, 673, 674, 675, 677, 698, 700, 702, 770, 772, 774, 775, 777, 779, 780, 782, 784, 786, 788, 790, 795, 797, 799, 801, 803, 805, 807, 809, 811, 813, 815, 817, 819, 821, 823, 825, 827, 833, 835, 837, 839, 841, 843, 868, 870, 878, 879, 881, 891, 892, 894, 899, 901, 903, 904, 906, 908, 910, 912, 914, 916, 918, 920, 922, 924, 926, 928, 930, 932, 934, 936, 938, 940, 943, 945, 947, 948, 950, 952], "static_softplu": [70, 71, 166], "__getitem__": [72, 73, 126], "queri": [72, 73, 126, 127, 134, 283, 316, 326, 684, 695, 696, 975, 986], "slice": [72, 73, 572, 600, 601, 604, 849, 858], "chain": [72, 73, 125, 126, 136, 137, 149, 845, 846, 847, 849, 862, 997, 998], "element": [72, 73, 118, 121, 132, 137, 160, 161, 162, 163, 164, 165, 166, 169, 171, 175, 176, 177, 198, 199, 202, 228, 232, 233, 237, 283, 306, 310, 314, 333, 334, 337, 339, 342, 343, 346, 347, 350, 352, 355, 356, 359, 361, 364, 365, 368, 369, 372, 373, 376, 377, 380, 381, 384, 385, 388, 389, 392, 393, 396, 397, 400, 401, 404, 405, 408, 409, 412, 414, 417, 418, 421, 422, 425, 426, 429, 430, 433, 434, 437, 438, 441, 442, 445, 446, 449, 450, 453, 454, 457, 458, 461, 462, 465, 466, 469, 470, 473, 474, 477, 478, 481, 482, 485, 486, 489, 490, 493, 494, 497, 498, 501, 502, 503, 504, 507, 509, 512, 513, 516, 517, 520, 521, 524, 525, 528, 529, 532, 533, 536, 537, 540, 541, 544, 545, 548, 549, 552, 553, 557, 558, 562, 563, 567, 568, 571, 572, 580, 581, 584, 585, 587, 590, 591, 598, 612, 641, 642, 646, 683, 684, 692, 697, 703, 705, 712, 714, 721, 724, 741, 743, 748, 750, 785, 786, 789, 803, 806, 811, 814, 819, 822, 824, 825, 828, 872, 873, 884, 887, 888, 889, 890, 891, 895, 896, 897, 898, 904, 907, 909, 910, 913, 914, 917, 918, 921, 922, 925, 926, 929, 930, 933, 934, 937, 938, 941, 942, 943, 946, 948, 951, 975, 983], "represent": [72, 73, 74, 75, 76, 148, 174, 246, 250, 251, 266, 269, 283, 299, 300, 333, 334, 337, 347, 350, 373, 376, 385, 388, 393, 396, 498, 501, 504, 507, 572, 578, 635, 640], "sequenc": [72, 73, 74, 75, 76, 119, 121, 127, 130, 148, 172, 173, 283, 292, 293, 572, 581, 622, 785, 824, 829, 832, 872, 874, 875, 909, 914, 917, 942, 943, 946, 948, 951, 975, 984, 989, 990, 997, 998], "multiprocess": [72, 73, 74, 75, 76, 135, 149, 283, 292, 572], "asynchron": [72, 73, 74, 75, 76], "dimens": [72, 73, 74, 75, 76, 119, 121, 132, 135, 160, 165, 175, 228, 232, 233, 237, 283, 314, 572, 594, 595, 596, 599, 609, 625, 644, 684, 685, 686, 687, 688, 689, 690, 691, 694, 697, 698, 701, 703, 705, 706, 708, 709, 711, 712, 714, 715, 717, 718, 720, 721, 724, 725, 727, 729, 731, 732, 734, 738, 740, 741, 743, 745, 747, 748, 750, 751, 753, 757, 759, 760, 762, 763, 765, 769, 775, 778, 780, 783, 785, 791, 794, 799, 802, 803, 806, 807, 810, 811, 814, 815, 818, 819, 822, 824, 825, 828, 829, 832, 845, 846, 847, 848, 872, 883, 884, 885, 886, 887, 889, 890, 891, 895, 897, 909, 910, 913, 914, 917, 918, 921, 922, 925, 926, 929, 930, 933, 934, 937, 938, 941, 942, 943, 946, 948, 951, 975, 976, 977, 978, 979, 980, 981, 982, 985, 986], "arriv": [72, 73, 74, 75, 76], "timeout": [72, 73, 74, 75, 76, 283, 292, 293, 572, 627, 632], "maximum": [72, 73, 74, 75, 76, 119, 132, 135, 137, 283, 307, 311, 315, 327, 333, 572, 584, 585, 587, 599, 646, 666, 668, 785, 786, 789, 849, 861, 884, 885, 909, 914, 917, 922, 925, 953], "length": [72, 73, 74, 75, 76, 121, 130, 135, 175, 176, 177, 210, 213, 697, 748, 750, 751, 753, 785, 815, 818], "whitespac": [72, 73, 74, 75, 76], "indent": [72, 73, 74, 75, 76, 135], "extra": [72, 73, 74, 75, 76, 119, 124, 125, 132, 646, 657], "newlin": [72, 73, 74, 75, 76, 118], "handl": [72, 73, 74, 75, 76, 115, 117, 121, 122, 124, 126, 127, 128, 129, 136, 149, 172, 173, 283, 299, 300, 301, 302, 303, 317, 321, 322, 329, 332, 646, 653, 655, 658, 660, 666, 668, 670, 672, 674, 676, 991, 992, 993, 994, 995, 996], "result": [72, 73, 74, 75, 76, 116, 117, 118, 119, 121, 125, 126, 127, 129, 135, 149, 160, 161, 162, 163, 164, 165, 166, 169, 171, 175, 176, 177, 179, 182, 184, 185, 188, 190, 191, 193, 196, 198, 199, 202, 204, 205, 207, 208, 220, 221, 223, 226, 228, 232, 233, 237, 238, 240, 241, 245, 246, 252, 254, 274, 283, 292, 328, 333, 334, 337, 339, 342, 343, 346, 347, 350, 352, 355, 356, 359, 361, 364, 365, 368, 369, 372, 373, 376, 377, 380, 381, 384, 385, 388, 389, 392, 393, 396, 397, 400, 401, 404, 405, 408, 409, 412, 414, 417, 418, 421, 422, 425, 426, 429, 430, 433, 434, 437, 438, 441, 442, 445, 446, 449, 450, 453, 454, 457, 458, 461, 462, 465, 466, 469, 470, 473, 474, 477, 478, 481, 482, 485, 486, 489, 490, 493, 494, 497, 498, 501, 502, 503, 504, 507, 509, 512, 513, 516, 517, 520, 521, 524, 525, 528, 529, 532, 533, 536, 537, 540, 541, 544, 545, 548, 549, 552, 553, 557, 558, 562, 563, 567, 568, 571, 572, 584, 585, 587, 590, 591, 594, 595, 596, 598, 600, 601, 604, 612, 625, 628, 629, 646, 679, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 695, 696, 697, 698, 701, 703, 705, 706, 708, 709, 711, 715, 717, 718, 720, 721, 724, 725, 727, 729, 731, 732, 734, 735, 737, 738, 740, 744, 745, 747, 748, 750, 751, 753, 754, 756, 757, 759, 760, 762, 763, 765, 766, 768, 769, 770, 773, 775, 778, 780, 783, 785, 786, 789, 791, 794, 795, 798, 799, 802, 803, 806, 807, 810, 811, 814, 815, 818, 819, 822, 825, 828, 829, 832, 833, 836, 837, 840, 841, 844, 849, 862, 867, 868, 871, 872, 873, 874, 875, 877, 878, 880, 883, 884, 885, 886, 888, 889, 890, 897, 898, 899, 902, 904, 907, 909, 910, 913, 914, 917, 918, 921, 922, 925, 926, 929, 930, 933, 934, 937, 938, 941, 942, 943, 946, 948, 951, 953], "color": [72, 73, 74, 75, 76, 1000, 1001], "termcolor": [72, 73, 74, 75, 76], "rebuild": [72, 73, 74, 75, 76], "constructor": [72, 73, 74, 75, 76, 127, 128, 134, 572, 579, 997, 998], "param": [72, 73, 74, 75, 76, 85, 86, 132, 137, 572, 578, 600, 601, 604, 605], "alphabet": [72, 73, 74, 75, 76], "preserv": [72, 73, 74, 75, 76, 121, 137, 149, 646, 679, 785, 803, 806], "__setitem__": [72, 73, 125, 126, 134], "val": [72, 73, 129, 134, 572, 614, 615, 616, 630, 631], "after": [72, 73, 119, 121, 126, 127, 131, 246, 278, 333, 545, 548, 646, 653, 655, 657, 658, 660, 666, 668, 670, 672, 674, 676, 867, 868, 871, 991, 992, 993, 994, 995, 996], "all_fals": [72, 73], "assert_is_bool": [72, 73], "entri": [72, 73, 175, 204, 205, 207, 208, 785, 824, 849, 862], "boolean": [72, 73, 121, 126, 175, 198, 246, 252, 270, 282, 283, 318, 330, 333, 373, 376, 377, 380, 385, 388, 393, 396, 486, 489, 490, 493, 494, 497, 498, 501, 572, 573, 576, 580, 581, 611, 612, 613, 617, 618, 619, 620, 621, 638, 645, 646, 662, 664, 683, 845, 846, 847, 849, 859, 909, 922, 925], "evalu": [72, 73, 126, 333, 422, 425, 426, 429, 466, 469, 470, 473, 474, 477, 478, 481, 509, 512, 533, 536, 549, 552, 849, 850, 859, 860, 942, 943, 946, 948, 951], "assert": [72, 73, 121, 130, 134, 135, 572, 582], "prune": [72, 73, 849, 862, 863, 864], "all_key_chain": [72, 73], "include_empti": [72, 73], "all_tru": [72, 73, 126, 135], "arrays_as_list": [72, 73], "intermedi": [72, 73], "as_arrai": [72, 73, 572, 609, 634], "as_bool": [72, 73], "as_on": [72, 73], "ones": [72, 73, 74, 75, 121, 132, 134, 135, 175, 190, 191, 223, 226, 333, 397, 400, 572, 625, 953], "fill": [72, 73, 175, 184, 198, 199, 202, 220, 221, 223, 226, 238, 240, 241, 245, 872, 874, 875], "as_random_uniform": [72, 73], "low": [72, 73, 101, 102, 132, 872, 874, 875, 876, 878, 879, 880, 881], "uniform": [72, 73, 136, 872, 873, 874, 875, 878, 880, 966, 968, 969, 972, 973], "boundari": [72, 73, 872, 878, 880], "interv": [72, 73, 132, 137, 175, 176, 177, 204, 205, 207, 208, 697, 760, 762, 785, 786, 789, 829, 832, 872, 874, 875, 878, 880, 942, 943, 946, 948, 951], "as_vari": [72, 73, 121], "as_zero": [72, 73], "assert_contains_sub_contain": [72, 73], "sub_cont": [72, 73], "except": [72, 73, 118, 125, 129, 130, 134, 149, 246, 254, 572, 582, 593, 616, 643, 697, 738, 740, 785, 791, 794, 829, 832, 884, 887, 942, 943, 946, 948, 951], "diff": [72, 73, 126, 135], "screen": [72, 73, 135], "assert_contains_sub_structur": [72, 73], "check_shap": [72, 73], "assert_ident": [72, 73], "check_typ": [72, 73], "same_arrai": [72, 73, 135], "arrays_equ": [72, 73, 74, 75, 572], "datatyp": [72, 73, 175, 179, 182, 215, 218, 246, 260, 271, 272, 273], "assert_identical_structur": [72, 73], "at_key_chain": [72, 73], "ignore_key_error": [72, 73], "ignore_non": [72, 73], "at_kei": [72, 73], "ignor": [72, 73, 119, 121, 149, 175, 210, 213, 849, 860, 991, 995], "substr": [72, 73], "clip_min": [72, 73], "clip_max": [72, 73], "minimum": [72, 73, 132, 137, 283, 333, 334, 337, 572, 607, 608, 630, 631, 636, 637, 785, 786, 789, 884, 886, 909, 914, 917, 922, 925, 953], "config": [72, 73, 135, 849, 862], "duplic": [72, 73, 118, 123, 124, 130, 134, 136], "compar": [72, 73, 121, 130, 135, 572, 573, 576, 580, 581, 889, 890, 891, 895, 897, 898, 899, 902, 904, 907], "container_rightmost": [72, 73], "common_key_chain": [72, 73, 126], "properti": [72, 73, 119, 121, 122, 126, 134, 135, 136, 283, 295, 987, 988, 991, 992, 993, 994, 996], "contains_sub_contain": [72, 73], "match": [72, 73, 126, 246, 252, 333, 525, 528, 572, 622], "contains_sub_structur": [72, 73], "create_if_abs": [72, 73], "inplac": [72, 73, 87, 88, 115, 117, 119, 124, 125, 134, 136, 572, 582, 613, 616, 617, 638, 646, 653, 654, 655, 656, 658, 659, 660, 661, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 964, 965, 991, 992, 993, 994, 995, 996], "cutoff_at_depth": [72, 73], "depth_cutoff": [72, 73], "cutoff_at_height": [72, 73], "height_cutoff": [72, 73], "deep_copi": [72, 73, 135], "intern": [72, 73, 118, 121, 125, 126, 128, 129, 283, 646, 682, 849, 850, 859, 860, 966, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 997, 998], "belong": [72, 73, 136], "dev_clon": [72, 73, 283], "dev_dist": [72, 73, 283], "along": [72, 73, 116, 129, 175, 204, 205, 207, 208, 283, 308, 309, 310, 311, 312, 313, 314, 315, 327, 572, 590, 591, 600, 644, 697, 725, 727, 757, 759, 760, 762, 763, 765, 769, 775, 778, 780, 783, 785, 791, 794, 803, 806, 811, 814, 819, 822, 824, 829, 832, 837, 840, 845, 846, 847, 848, 872, 883, 884, 885, 886, 898, 899, 902, 904, 907, 909, 910, 913, 914, 917, 918, 921, 922, 925, 926, 929, 930, 933, 934, 937, 938, 941, 942, 943, 946, 948, 951], "dev_str": [72, 73], "diff_kei": [72, 73], "detect_key_diff": [72, 73], "detect_value_diff": [72, 73], "detect_shape_diff": [72, 73], "treat": [72, 73, 121, 133, 137, 172, 173], "detect": [72, 73, 117, 121, 130, 135, 136, 849, 850, 860], "container0": [72, 73], "einops_rearrang": [72, 73, 572], "axes_length": [72, 73, 572, 594, 595, 596], "rearrang": [72, 73, 572, 594, 596], "einops_reduc": [72, 73, 572], "reduct": [72, 73, 121, 127, 134, 572, 595, 628, 629, 942, 943, 946, 948, 951, 953], "One": [72, 73, 121, 127, 132, 134, 135, 572, 595, 785, 815, 818, 872, 874, 875], "callabl": [72, 73, 121, 126, 132, 150, 151, 152, 153, 154, 155, 156, 157, 158, 172, 173, 246, 267, 268, 283, 327, 572, 578, 583, 593, 595, 845, 846, 847, 848, 849, 855, 859, 860, 861], "einops_repeat": [72, 73, 572], "find_sub_contain": [72, 73], "sub_cont_to_find": [72, 73], "exsit": [72, 73], "find_sub_structur": [72, 73], "sub_struc_to_find": [72, 73], "flatten_key_chain": [72, 73, 135, 987, 988], "__": [72, 73, 119, 135], "above_height": [72, 73, 135], "below_depth": [72, 73, 135], "format_key_chain": [72, 73], "format_fn": [72, 73], "string": [72, 73, 123, 127, 128, 130, 132, 135, 246, 250, 251, 264, 270, 282, 283, 299, 300, 301, 302, 316, 322, 328, 329, 332, 572, 592], "from_disk_as_hdf5": [72, 73, 135], "h5_obj_or_filepath": [72, 73], "slice_obj": [72, 73], "load": [72, 73, 149], "disk": [72, 73, 135], "h5py": [72, 73], "hdf5": [72, 73, 135, 987, 988], "h5": [72, 73], "from_disk_as_json": [72, 73, 135], "json_filepath": [72, 73], "json": [72, 73, 135], "dure": [72, 73, 122, 126, 127, 128, 129, 149, 172, 173, 283, 328, 572, 643, 646, 648, 651, 653, 655, 666, 668, 697, 721, 724, 845, 846, 847, 848, 909, 930, 933, 938, 941, 987, 988, 991, 992, 993, 995], "from_disk_as_pickl": [72, 73, 135], "pickle_filepath": [72, 73], "from_flat_list": [72, 73], "flat_list": [72, 73], "hierarchi": [72, 73, 135], "flat": [72, 73, 572, 628, 785, 811, 814], "popul": [72, 73, 121, 127, 128, 132, 872, 873, 909, 930, 933, 938, 941], "from_numpi": [72, 73, 135], "gather": [72, 73, 572, 601, 604], "h5_file_s": [72, 73], "batch": [72, 73, 122, 126, 135, 283, 325, 326, 572, 599, 684, 693, 697, 763, 765, 845, 846, 847, 848, 867, 868, 871, 989, 990], "handle_inplac": [72, 73], "prime": [72, 73], "overwritten": [72, 73, 123, 125], "has_kei": [72, 73], "query_kei": [72, 73], "somewher": [72, 73], "has_key_chain": [72, 73], "has_nan": [72, 73, 572], "include_inf": [72, 73, 572, 611, 645], "leafwis": [72, 73], "nan": [72, 73, 116, 118, 121, 174, 246, 252, 333, 334, 337, 339, 342, 343, 346, 347, 350, 352, 355, 356, 359, 361, 364, 365, 368, 397, 400, 401, 404, 405, 408, 422, 425, 426, 429, 430, 433, 446, 449, 454, 457, 466, 469, 470, 473, 478, 481, 482, 485, 504, 507, 521, 524, 525, 528, 529, 532, 537, 540, 541, 544, 545, 548, 558, 562, 563, 567, 568, 571, 572, 611, 645, 684, 696, 889, 890, 891, 895, 897, 909, 914, 917, 918, 921, 922, 925, 930, 933, 934, 937, 938, 941, 942, 943, 946, 948, 951], "well": [72, 73, 121, 129, 136, 137, 148, 572, 611, 697, 745, 747], "inf": [72, 73, 121, 174, 572, 611, 645, 697, 763, 765], "wise": [72, 73, 132, 137, 160, 161, 162, 163, 164, 165, 166, 169, 171, 333, 334, 337, 339, 342, 347, 350, 352, 355, 361, 364, 365, 368, 373, 376, 377, 380, 381, 384, 385, 388, 389, 392, 393, 396, 409, 412, 414, 417, 418, 421, 434, 437, 438, 441, 442, 445, 458, 461, 462, 465, 482, 485, 486, 489, 490, 493, 494, 497, 498, 501, 502, 503, 504, 507, 513, 516, 521, 524, 525, 528, 553, 557, 572, 598, 785, 786, 789], "identical_array_shap": [72, 73], "exclus": [72, 73, 87, 88, 121, 122, 126, 137, 175, 176, 177, 572, 590, 618, 619, 621, 646, 662, 663, 664, 665, 872, 874, 875], "identical_config": [72, 73], "identical_structur": [72, 73], "if_exist": [72, 73], "inplace_upd": [72, 73, 129, 572, 964, 965], "key_chains_contain": [72, 73], "sub_str": [72, 73], "join": [72, 73, 785, 791, 794, 829, 832, 953], "list_stack": [72, 73, 135], "dim": [72, 73, 127, 572, 625, 975, 986], "func": [72, 73, 126, 172, 173, 283, 327, 572, 583, 646, 657, 849, 862], "map_cont": [72, 73], "include_self": [72, 73], "possibi": [72, 73], "matrix": [72, 73, 175, 210, 213, 228, 232, 233, 237, 572, 573, 576, 584, 684, 693, 697, 698, 701, 706, 708, 709, 711, 712, 714, 715, 717, 718, 720, 721, 724, 725, 727, 728, 729, 731, 732, 734, 738, 740, 741, 743, 745, 747, 748, 750, 751, 753, 757, 759, 766, 768, 975, 985], "integ": [72, 73, 121, 126, 127, 134, 175, 176, 177, 198, 246, 269, 272, 274, 333, 334, 337, 373, 376, 377, 380, 381, 384, 385, 388, 389, 392, 393, 396, 397, 400, 430, 433, 434, 437, 498, 501, 521, 524, 525, 528, 529, 532, 568, 571, 697, 728, 760, 762, 763, 765, 785, 824, 872, 874, 875, 882, 909, 914, 917, 918, 921, 922, 925, 926, 929, 930, 933, 934, 937, 938, 941, 942, 943, 946, 948, 951], "flatten": [72, 73, 572, 599, 697, 735, 737, 763, 765, 785, 811, 814, 819, 822, 884, 885, 886, 889, 890, 891, 895, 897], "broadcast": [72, 73, 116, 118, 119, 121, 126, 127, 160, 161, 162, 163, 164, 165, 166, 169, 171, 175, 176, 177, 179, 182, 184, 185, 188, 190, 191, 193, 196, 198, 199, 202, 204, 205, 207, 208, 220, 221, 223, 226, 228, 232, 233, 237, 238, 240, 241, 245, 246, 252, 253, 254, 283, 328, 333, 334, 337, 339, 342, 343, 346, 347, 350, 352, 355, 356, 359, 361, 364, 365, 368, 369, 372, 373, 376, 377, 380, 381, 384, 385, 388, 389, 392, 393, 396, 397, 400, 401, 404, 405, 408, 409, 412, 414, 417, 418, 421, 422, 425, 426, 429, 430, 433, 434, 437, 438, 441, 442, 445, 446, 449, 450, 453, 454, 457, 458, 461, 462, 465, 466, 469, 470, 473, 474, 477, 478, 481, 482, 485, 486, 489, 490, 493, 494, 497, 498, 501, 502, 503, 504, 507, 509, 512, 513, 516, 517, 520, 521, 524, 525, 528, 529, 532, 533, 536, 537, 540, 541, 544, 545, 548, 549, 552, 553, 557, 558, 562, 563, 567, 568, 571, 572, 584, 585, 587, 590, 594, 595, 596, 598, 601, 604, 612, 625, 628, 629, 646, 679, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 695, 696, 697, 698, 701, 703, 705, 706, 708, 709, 711, 715, 717, 718, 720, 721, 724, 725, 727, 729, 731, 732, 734, 735, 737, 738, 740, 744, 745, 747, 748, 750, 751, 753, 754, 756, 757, 759, 760, 762, 763, 765, 766, 768, 769, 770, 773, 775, 778, 780, 783, 785, 786, 789, 791, 794, 795, 798, 799, 802, 803, 806, 807, 810, 811, 814, 815, 818, 819, 822, 825, 828, 829, 832, 833, 836, 837, 840, 841, 844, 867, 868, 871, 872, 873, 874, 875, 877, 878, 880, 883, 884, 885, 886, 888, 889, 897, 898, 904, 907, 909, 914, 917, 918, 921, 922, 925, 926, 929, 930, 933, 934, 937, 938, 941, 942, 943, 946, 948, 951], "max_depth": [72, 73, 283, 287, 290, 297, 307, 311, 315, 572, 610, 849, 861], "multi_map": [72, 73, 126], "map_nest": [72, 73, 83, 84, 93, 94, 97, 98, 365, 367, 373, 375, 381, 383, 385, 387, 389, 391, 393, 395, 414, 416, 434, 436, 438, 440, 442, 444, 458, 460, 462, 464, 482, 484, 486, 488, 494, 496, 498, 500, 513, 515, 521, 523, 525, 527, 721, 723, 791, 793, 829, 831], "leftmost": [72, 73, 849, 862], "multi_map_in_static_method": [72, 73, 126], "fn_name": [72, 73], "num_arrai": [72, 73, 121], "overwrite_at_key_chain": [72, 73], "overwrit": [72, 73, 129, 132, 283, 327], "target_dict": [72, 73], "return_dict": [72, 73], "prune_empti": [72, 73], "keep_non": [72, 73], "prune_key_chain": [72, 73], "key1": [72, 73, 136], "key2": [72, 73], "key3": [72, 73], "prune_key_from_key_chain": [72, 73], "prune_kei": [72, 73], "prune_keys_from_key_chain": [72, 73], "remove_key_length_limit": [72, 73], "remove_print_limit": [72, 73], "reshape_lik": [72, 73], "leading_shap": [72, 73], "return_cont": [72, 73], "restructur": [72, 73], "keep_orig": [72, 73], "transpos": [72, 73, 134, 137, 283, 314, 684, 686, 688, 690, 697, 732, 734, 738, 740, 953, 975, 977, 979, 981], "restructure_key_chain": [72, 73], "keychain_map": [72, 73], "set_at_key_chain": [72, 73], "set_at_kei": [72, 73], "set_framework": [72, 73, 132, 134, 135, 137], "set_ivy_backend": [72, 73], "ivy_backend": [72, 73], "attribut": [72, 73, 118, 126, 127, 133, 134, 135, 136, 246, 266, 267, 268, 269, 283, 323], "show_sub_contain": [72, 73], "sub_cont_or_keychain": [72, 73], "shuffl": [72, 73, 872, 953], "seed_valu": [72, 73, 872, 882], "seed": [72, 73, 74, 75, 872, 953], "shuffle_h5_fil": [72, 73], "dataset": [72, 73, 135, 147, 953], "size_ordered_arrai": [72, 73], "keychain": [72, 73], "smallest": [72, 73, 246, 266, 269, 333, 397, 400], "largest": [72, 73, 148, 246, 266, 269, 697, 748, 750], "slice_kei": [72, 73], "key_slic": [72, 73], "all_depth": [72, 73], "slice_via_kei": [72, 73], "sort_by_kei": [72, 73], "num_or_size_split": [72, 73, 132, 785, 824], "with_remaind": [72, 73, 785, 824], "constitu": [72, 73, 137], "dimension": [72, 73, 175, 176, 177, 190, 191, 210, 213, 697, 703, 705, 706, 708, 721, 724, 729, 731, 735, 737, 738, 740, 760, 762, 763, 765, 785, 824, 884, 885, 886, 887, 909, 914, 917, 918, 921, 922, 925, 926, 929, 930, 933, 934, 937, 938, 941, 942, 943, 946, 948, 951], "evenli": [72, 73, 175, 176, 177, 204, 205, 207, 208, 785, 824], "store": [72, 73, 118, 123, 125, 126, 132, 134, 135, 136, 572, 599, 646, 682, 697, 757, 759, 785, 824, 987, 988], "stop_gradi": [72, 73, 74, 75, 87, 88, 136, 283, 327, 646, 653, 654, 655, 656, 658, 659, 660, 661, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 845, 846, 847, 848, 953, 991, 992, 993, 994, 995, 996], "preserve_typ": [72, 73, 646, 679], "stop": [72, 73, 77, 78, 132, 149, 175, 176, 177, 178, 204, 205, 206, 207, 208, 209, 283, 298, 327, 646, 653, 655, 658, 660, 666, 668, 670, 672, 674, 676, 679, 845, 846, 847, 848, 991, 992, 993, 994, 995, 996], "structural_diff": [72, 73], "to_devic": [72, 73, 283, 302], "cuda": [72, 73, 132, 135, 149, 175, 204, 205, 207, 208, 283, 292, 299, 324, 572, 600, 601, 604, 625, 628, 629, 872, 873, 874, 875, 878, 880, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 995, 997, 998], "target": [72, 73, 115, 131, 135, 136, 137, 283, 301, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 953], "to_dict": [72, 73], "to_disk_as_hdf5": [72, 73, 135], "starting_index": [72, 73], "max_batch_s": [72, 73], "w": [72, 73, 87, 88, 132, 135, 136, 572, 581, 646, 648, 651, 653, 655, 656, 658, 660, 661, 666, 668, 669, 670, 672, 673, 674, 676, 677, 684, 685, 686, 687, 688, 689, 690, 691], "later": [72, 73, 121, 572, 583], "to_disk_as_json": [72, 73, 135], "to_disk_as_pickl": [72, 73, 135], "to_flat_list": [72, 73], "to_iter": [72, 73, 126], "leaf_keys_onli": [72, 73], "to_iterator_kei": [72, 73], "to_iterator_valu": [72, 73], "to_json": [72, 73], "to_list": [72, 73, 572, 953], "to_multi_dev": [72, 73], "multidevcontain": [72, 73, 74], "distributedarrai": [72, 73], "to_numpi": [72, 73, 135, 572, 953], "update_backend": [72, 73], "to_raw": [72, 73], "raw": [72, 73, 118], "trim_kei": [72, 73], "max_length": [72, 73], "try_kc": [72, 73], "tri": [72, 73], "arbitrari": [72, 73, 117, 121, 122, 126, 129, 136, 149, 175, 210, 213, 246, 253, 274, 283, 312, 313, 315], "concatten": [72, 73, 283, 312, 313, 314, 315, 327], "unstack": [72, 73, 132, 135, 572, 953], "dim_siz": [72, 73, 283], "update_config": [72, 73], "global_norm": [72, 73, 85, 86, 585, 586], "vector": [72, 73, 148, 175, 210, 213, 572, 585, 587, 684, 693, 697, 703, 705, 712, 714, 721, 724, 735, 737, 748, 750, 751, 753, 760, 762, 763, 765, 766, 768, 975, 985], "with_default_key_color": [72, 73], "with_entries_as_list": [72, 73], "with_ivy_backend": [72, 73], "with_key_length_limit": [72, 73, 135], "with_print_ind": [72, 73, 135], "with_print_limit": [72, 73, 135], "with_print_line_spac": [72, 73], "containerwithcr": [74, 75, 77], "containerwithdatatyp": [74, 75, 79], "containerwithdevic": [74, 75, 81], "containerwithelementwis": [74, 75, 83, 126], "containerwithgener": [74, 75, 85], "containerwithgradi": [74, 75, 87], "containerwithimag": [74, 75, 89], "containerwithlay": [74, 75, 91], "containerwithlinearalgebra": [74, 75, 93], "containerwithloss": [74, 75, 95], "containerwithnorm": [74, 75, 99], "containerwithrandom": [74, 75, 101], "containerwithsearch": [74, 75, 103], "containerwithset": [74, 75, 105], "containerwithsort": [74, 75, 107], "containerwithstatist": [74, 75, 109], "containerwithutil": [74, 75, 111], "__add__": [74, 75, 117, 118, 119, 125, 126, 134], "__radd__": [74, 75, 118, 119], "arang": [74, 75, 127, 175, 204, 205, 207, 208, 909, 910, 913, 953], "arg_info": [74, 75, 572], "arg_nam": [74, 75, 572], "argmax": [74, 75, 884, 953], "argmin": [74, 75, 884, 953], "array_equ": [74, 75, 572], "as_ivy_dev": [74, 75, 134, 283], "as_ivy_dtyp": [74, 75, 246], "as_native_dev": [74, 75, 283], "as_native_dtyp": [74, 75, 246], "assert_supports_inplac": [74, 75, 572], "astyp": [74, 75, 127, 129, 246], "broadcast_arrai": [74, 75, 246], "broadcast_to": [74, 75, 127, 246], "cache_fn": [74, 75, 122, 572], "clear_mem_on_dev": [74, 75, 283], "clip_matrix_norm": [74, 75, 572], "closest_valid_dtyp": [74, 75, 246], "container_typ": [74, 75, 572], "conv1d": [74, 75, 684, 975], "conv1d_transpos": [74, 75, 684], "conv2d": [74, 75, 684, 953, 975], "conv2d_transpos": [74, 75, 684], "conv3d": [74, 75, 684, 975], "conv3d_transpos": [74, 75, 684], "copy_arrai": [74, 75, 572], "cumprod": [74, 75, 137, 572], "cumsum": [74, 75, 572, 953], "current_backend_str": [74, 75, 572], "default_devic": [74, 75, 128, 132, 283, 321, 324, 331], "default_dtyp": [74, 75, 122, 127, 246], "default_float_dtyp": [74, 75, 127, 246], "default_int_dtyp": [74, 75, 127, 246], "depthwise_conv2d": [74, 75, 684, 953], "dev_clone_arrai": [74, 75, 283], "dev_clone_it": [74, 75, 283], "dev_clone_nest": [74, 75, 283], "dev_dist_arrai": [74, 75, 283], "dev_dist_it": [74, 75, 283], "dev_dist_nest": [74, 75, 283], "dev_unifi": [74, 75, 283], "dev_unify_arrai": [74, 75, 283], "dev_unify_it": [74, 75, 283], "dev_unify_nest": [74, 75, 283], "dev_util": [74, 75, 128, 283], "dropout": [74, 75, 135, 684, 975, 986], "dtype_bit": [74, 75, 246], "execute_with_gradi": [74, 75, 126, 135, 136, 137, 149, 646, 953], "ey": [74, 75, 137, 175, 684, 687, 691], "finfo": [74, 75, 246], "floormod": [74, 75, 572, 953], "fourier_encod": [74, 75, 572], "function_supported_dtyp": [74, 75, 246], "function_unsupported_dtyp": [74, 75, 246], "gelu": [74, 75, 160, 961], "get_all_arrays_in_memori": [74, 75, 572], "get_all_ivy_arrays_on_dev": [74, 75, 128, 283], "get_min_bas": [74, 75, 572], "get_min_denomin": [74, 75, 572], "get_num_dim": [74, 75, 572, 953], "get_referrers_recurs": [74, 75, 572], "gpu_is_avail": [74, 75, 283], "handle_nest": [74, 75, 122, 126, 150], "handle_out_argu": [74, 75, 117, 124, 127, 128, 129, 150], "iinfo": [74, 75, 130, 246], "indices_wher": [74, 75, 130, 572, 953], "infer_devic": [74, 75, 117, 127, 128, 150], "infer_dtyp": [74, 75, 117, 127, 128, 150], "inplace_arrays_support": [74, 75, 572], "inplace_decr": [74, 75, 572], "inplace_incr": [74, 75, 572], "inplace_variables_support": [74, 75, 572], "inputs_to_native_arrai": [74, 75, 125, 150], "invalid_dtyp": [74, 75, 246], "is_float_dtyp": [74, 75, 246], "is_int_dtyp": [74, 75, 246, 572, 642], "is_ivy_contain": [74, 75, 572], "leaky_relu": [74, 75, 121, 160, 953], "linear": [74, 75, 118, 132, 135, 136, 137, 160, 161, 162, 163, 572, 599, 684, 692, 745, 747, 953, 975, 976, 977, 978, 979, 980, 981, 982], "linspac": [74, 75, 132, 175, 176, 177, 953], "logspac": [74, 75, 132, 175], "lstm_updat": [74, 75, 132, 684], "match_kwarg": [74, 75, 572], "matrix_pow": [74, 75, 697], "multi_head_attent": [74, 75, 126, 129, 684], "multinomi": [74, 75, 872], "nonzero": [74, 75, 333, 347, 350, 504, 507, 884], "num_arrays_in_memori": [74, 75, 572], "num_cpu_cor": [74, 75, 128, 283], "num_gpu": [74, 75, 121, 128, 283], "num_ivy_arrays_on_dev": [74, 75, 283], "one_hot": [74, 75, 137, 572, 953], "outputs_to_ivy_arrai": [74, 75, 117, 125, 127, 128, 150], "percent_used_mem_on_dev": [74, 75, 283], "print_all_arrays_in_memori": [74, 75, 572], "print_all_ivy_arrays_on_dev": [74, 75, 283], "promote_typ": [74, 75, 246], "randint": [74, 75, 101, 102, 872, 876, 953], "random_norm": [74, 75, 121, 684, 687, 690, 691, 697, 748, 750, 872, 889, 890], "result_typ": [74, 75, 127, 246], "scaled_dot_product_attent": [74, 75, 684], "scatter_flat": [74, 75, 572], "scatter_nd": [74, 75, 134, 572, 953], "set_default_devic": [74, 75, 128, 283, 331], "set_default_dtyp": [74, 75, 122, 127, 246], "set_default_float_dtyp": [74, 75, 127, 246], "set_default_int_dtyp": [74, 75, 127, 246], "set_min_bas": [74, 75, 572], "set_min_denomin": [74, 75, 572], "set_queue_timeout": [74, 75, 572], "set_split_factor": [74, 75, 283], "set_tmp_dir": [74, 75, 572], "set_with_grad": [74, 75, 646, 683], "shape_to_tupl": [74, 75, 127, 572], "sigmoid": [74, 75, 132, 135, 136, 160, 953], "slogdet": [74, 75, 697], "split_factor": [74, 75, 283, 292], "split_func_cal": [74, 75, 283], "stable_divid": [74, 75, 122, 572], "stable_pow": [74, 75, 572], "static_aco": [74, 75], "static_acosh": [74, 75], "static_arg_info": [74, 75], "static_arg_nam": [74, 75], "static_argmax": [74, 75], "static_argmin": [74, 75], "static_arrai": [74, 75], "static_array_equ": [74, 75], "static_arrays_equ": [74, 75], "static_as_ivy_dev": [74, 75], "static_as_ivy_dtyp": [74, 75], "static_as_native_dev": [74, 75], "static_as_native_dtyp": [74, 75], "static_asin": [74, 75], "static_assert_supports_inplac": [74, 75], "static_astyp": [74, 75], "static_atan": [74, 75], "static_atan2": [74, 75], "static_atanh": [74, 75], "static_bitwise_and": [74, 75], "static_bitwise_invert": [74, 75], "static_bitwise_left_shift": [74, 75], "static_bitwise_or": [74, 75], "static_bitwise_right_shift": [74, 75], "static_bitwise_xor": [74, 75], "static_broadcast_arrai": [74, 75], "static_broadcast_to": [74, 75], "static_cache_fn": [74, 75], "static_ceil": [74, 75], "static_clear_mem_on_dev": [74, 75], "static_clip_matrix_norm": [74, 75], "static_clip_vector_norm": [74, 75], "static_closest_valid_dtyp": [74, 75], "static_concat": [74, 75], "static_constant_pad": [74, 75], "static_container_typ": [74, 75], "static_conv1d": [74, 75], "static_conv1d_transpos": [74, 75], "static_conv2d": [74, 75], "static_conv2d_transpos": [74, 75], "static_conv3d": [74, 75], "static_conv3d_transpos": [74, 75], "static_copy_arrai": [74, 75], "static_co": [74, 75], "static_cosh": [74, 75], "static_cross": [74, 75], "static_cumprod": [74, 75], "static_cumsum": [74, 75], "static_current_backend": [74, 75], "static_current_backend_str": [74, 75], "static_default": [74, 75], "static_default_devic": [74, 75], "static_default_dtyp": [74, 75], "static_default_float_dtyp": [74, 75], "static_default_int_dtyp": [74, 75], "static_depthwise_conv2d": [74, 75], "static_det": [74, 75], "static_dev": [74, 75], "static_dev_clon": [74, 75], "static_dev_clone_arrai": [74, 75], "static_dev_clone_it": [74, 75], "static_dev_clone_nest": [74, 75], "static_dev_dist": [74, 75], "static_dev_dist_arrai": [74, 75], "static_dev_dist_it": [74, 75], "static_dev_dist_nest": [74, 75], "static_dev_unifi": [74, 75], "static_dev_unify_arrai": [74, 75], "static_dev_unify_it": [74, 75], "static_dev_unify_nest": [74, 75], "static_dev_util": [74, 75], "static_diagon": [74, 75], "static_dropout": [74, 75], "static_dtyp": [74, 75], "static_dtype_bit": [74, 75], "static_eigh": [74, 75], "static_eigvalsh": [74, 75], "static_einops_rearrang": [74, 75], "static_einops_reduc": [74, 75], "static_einops_repeat": [74, 75], "static_einsum": [74, 75], "static_empti": [74, 75], "static_equ": [74, 75], "static_erf": [74, 75], "static_execute_with_gradi": [74, 75], "static_exist": [74, 75], "static_exp": [74, 75], "static_expand_dim": [74, 75], "static_expm1": [74, 75], "static_finfo": [74, 75], "static_flip": [74, 75], "static_floor": [74, 75], "static_floor_divid": [74, 75], "static_floormod": [74, 75], "static_fourier_encod": [74, 75], "static_ful": [74, 75], "static_function_supported_dtyp": [74, 75], "static_function_unsupported_dtyp": [74, 75], "static_gath": [74, 75], "static_gelu": [74, 75], "static_get_all_arrays_in_memori": [74, 75], "static_get_all_ivy_arrays_on_dev": [74, 75], "static_get_min_bas": [74, 75], "static_get_min_denomin": [74, 75], "static_get_num_dim": [74, 75], "static_get_referrers_recurs": [74, 75], "static_gpu_is_avail": [74, 75], "static_great": [74, 75], "static_greater_equ": [74, 75], "static_handle_nest": [74, 75], "static_handle_out_argu": [74, 75], "static_has_nan": [74, 75], "static_iinfo": [74, 75], "static_indices_wher": [74, 75], "static_infer_devic": [74, 75], "static_infer_dtyp": [74, 75], "static_inplace_arrays_support": [74, 75], "static_inplace_decr": [74, 75], "static_inplace_incr": [74, 75], "static_inplace_upd": [74, 75], "static_inplace_variables_support": [74, 75], "static_inputs_to_native_arrai": [74, 75], "static_inv": [74, 75], "static_invalid_dtyp": [74, 75], "static_is_arrai": [74, 75], "static_is_float_dtyp": [74, 75], "static_is_int_dtyp": [74, 75], "static_is_ivy_arrai": [74, 75], "static_is_ivy_contain": [74, 75], "static_is_native_arrai": [74, 75], "static_isfinit": [74, 75], "static_isinf": [74, 75], "static_isnan": [74, 75], "static_layer_norm": [74, 75], "static_leaky_relu": [74, 75], "static_less": [74, 75], "static_less_equ": [74, 75], "static_linear": [74, 75], "static_log": [74, 75], "static_log10": [74, 75], "static_log1p": [74, 75], "static_log2": [74, 75], "static_logaddexp": [74, 75], "static_logical_and": [74, 75], "static_logical_not": [74, 75], "static_logical_or": [74, 75], "static_logical_xor": [74, 75], "static_lstm_upd": [74, 75], "static_match_kwarg": [74, 75], "static_matmul": [74, 75], "static_matrix_norm": [74, 75], "static_matrix_pow": [74, 75], "static_matrix_rank": [74, 75], "static_matrix_transpos": [74, 75], "static_max": [74, 75], "static_maximum": [74, 75], "static_mean": [74, 75], "static_min": [74, 75], "static_minimum": [74, 75], "static_multi_head_attent": [74, 75], "static_multinomi": [74, 75], "static_multiprocess": [74, 75], "static_neg": [74, 75], "static_nonzero": [74, 75], "static_not_equ": [74, 75], "static_num_arrays_in_memori": [74, 75], "static_num_cpu_cor": [74, 75], "static_num_gpu": [74, 75], "static_num_ivy_arrays_on_dev": [74, 75], "static_one_hot": [74, 75], "static_out": [74, 75], "static_outputs_to_ivy_arrai": [74, 75], "static_percent_used_mem_on_dev": [74, 75], "static_permute_dim": [74, 75], "static_pinv": [74, 75], "static_posit": [74, 75], "static_pow": [74, 75], "static_print_all_arrays_in_memori": [74, 75], "static_print_all_ivy_arrays_on_dev": [74, 75], "static_prod": [74, 75], "static_promote_typ": [74, 75], "static_qr": [74, 75], "static_queue_timeout": [74, 75], "static_random_norm": [74, 75], "static_relu": [74, 75], "static_remaind": [74, 75], "static_repeat": [74, 75], "static_reshap": [74, 75], "static_result_typ": [74, 75], "static_round": [74, 75], "static_scaled_dot_product_attent": [74, 75], "static_scatter_flat": [74, 75], "static_scatter_nd": [74, 75], "static_se": [74, 75], "static_set_default_devic": [74, 75], "static_set_default_dtyp": [74, 75], "static_set_default_float_dtyp": [74, 75], "static_set_default_int_dtyp": [74, 75], "static_set_min_bas": [74, 75], "static_set_min_denomin": [74, 75], "static_set_queue_timeout": [74, 75], "static_set_split_factor": [74, 75], "static_set_tmp_dir": [74, 75], "static_set_with_grad": [74, 75], "static_shap": [74, 75], "static_shape_to_tupl": [74, 75], "static_shuffl": [74, 75], "static_sigmoid": [74, 75], "static_sign": [74, 75], "static_sin": [74, 75], "static_sinh": [74, 75], "static_slogdet": [74, 75], "static_softmax": [74, 75], "static_solv": [74, 75], "static_split": [74, 75], "static_split_factor": [74, 75], "static_split_func_cal": [74, 75], "static_sqrt": [74, 75], "static_squar": [74, 75], "static_squeez": [74, 75], "static_stable_divid": [74, 75], "static_stable_pow": [74, 75], "static_stack": [74, 75], "static_std": [74, 75], "static_stop_gradi": [74, 75], "static_sum": [74, 75], "static_supports_inplac": [74, 75], "static_svd": [74, 75], "static_svdv": [74, 75], "static_swapax": [74, 75], "static_tensordot": [74, 75], "static_til": [74, 75], "static_tmp_dir": [74, 75], "static_to_devic": [74, 75], "static_to_list": [74, 75], "static_to_native_arrays_and_back": [74, 75], "static_to_numpi": [74, 75], "static_to_scalar": [74, 75], "static_total_mem_on_dev": [74, 75], "static_tpu_is_avail": [74, 75], "static_trac": [74, 75], "static_trunc": [74, 75], "static_try_else_non": [74, 75], "static_type_promote_arrai": [74, 75], "static_unique_al": [74, 75], "static_unique_invers": [74, 75], "static_unique_valu": [74, 75], "static_unset_default_devic": [74, 75], "static_unset_default_dtyp": [74, 75], "static_unset_default_float_dtyp": [74, 75], "static_unset_default_int_dtyp": [74, 75], "static_unset_with_grad": [74, 75], "static_unstack": [74, 75], "static_used_mem_on_dev": [74, 75], "static_valid_dtyp": [74, 75], "static_value_is_nan": [74, 75], "static_var": [74, 75], "static_vari": [74, 75], "static_variable_data": [74, 75], "static_vecdot": [74, 75], "static_vector_norm": [74, 75], "static_vector_to_skew_symmetric_matrix": [74, 75], "static_wher": [74, 75], "static_with_grad": [74, 75], "static_zero_pad": [74, 75], "supports_inplac": [74, 75, 572], "tmp_dir": [74, 75, 572], "to_native_arrays_and_back": [74, 75, 117, 124, 150], "to_scalar": [74, 75, 572], "total_mem_on_dev": [74, 75, 128, 283], "tpu_is_avail": [74, 75, 283], "try_else_non": [74, 75, 572], "type_promote_arrai": [74, 75, 246], "unique_al": [74, 75, 889], "unique_invers": [74, 75, 889], "unique_valu": [74, 75, 889], "unset_default_devic": [74, 75, 283], "unset_default_dtyp": [74, 75, 246], "unset_default_float_dtyp": [74, 75, 246], "unset_default_int_dtyp": [74, 75, 246], "unset_with_grad": [74, 75, 646], "used_mem_on_dev": [74, 75, 283], "valid_dtyp": [74, 75, 246], "value_is_nan": [74, 75, 572], "variable_data": [74, 75, 646], "with_grad": [74, 75, 646, 678], "at_dev": [74, 76, 283, 296, 297], "static_arang": [77, 78, 176], "static_asarrai": [77, 78, 179], "static_empty_lik": [77, 78, 185], "static_ey": [77, 78, 190], "n_row": [77, 78, 175, 190, 191, 192], "n_col": [77, 78, 175, 190, 191, 192], "static_from_dlpack": [77, 78, 193], "static_full_lik": [77, 78, 199], "static_linspac": [77, 78, 204], "num": [77, 78, 132, 175, 204, 205, 206, 207, 208, 209], "endpoint": [77, 78, 175, 204, 205, 206, 207, 209], "static_logspac": [77, 78, 207], "static_meshgrid": [77, 78, 210], "static_native_arrai": [77, 78, 215], "static_on": [77, 78, 220], "static_ones_lik": [77, 78, 223], "static_tril": [77, 78, 228], "static_triu": [77, 78, 233], "static_zero": [77, 78, 238], "static_zeros_lik": [77, 78, 241], "int32": [79, 80, 121, 127, 246, 255, 257, 258, 259, 267, 572, 641, 785, 799, 802, 909, 926, 929, 934, 937], "int64": [79, 80, 121, 127, 246, 255, 257, 258, 259, 267, 333, 389, 392, 884, 885, 886, 909, 926, 929, 934, 937], "static_can_cast": [79, 80, 255], "from_": [79, 80, 246, 255, 258, 259], "02": [83, 84, 356, 358, 646, 648, 651], "33": [83, 84, 356, 358, 697, 735, 737, 867, 868, 871, 909, 910, 913], "21": [83, 84, 333, 356, 358, 393, 396, 572, 590, 697, 709, 711, 735, 737, 769, 780, 783, 909, 910, 913], "61": [83, 84, 333, 356, 358, 549, 552, 769, 770, 773], "static_ab": [83, 84, 334], "static_add": [83, 84, 118, 119, 126, 347], "static_asinh": [83, 84, 356], "97": [83, 84, 333, 356, 359, 360], "94": [83, 84, 356, 360], "37": [83, 84, 101, 102, 333, 356, 359, 360, 558, 562, 867, 868, 871, 874, 876], "75": [83, 84, 333, 356, 359, 360, 697, 718, 720, 735, 737], "static_divid": [83, 84, 126, 409], "static_multipli": [83, 84, 126, 504], "static_subtract": [83, 84, 126, 553], "static_tan": [83, 84, 119, 126, 558], "143": [83, 84, 119, 333, 558, 559, 561, 562], "38": [83, 84, 119, 333, 558, 559, 561, 562], "static_tanh": [83, 84, 563], "76": [83, 84, 333, 405, 408, 563, 564, 646, 648, 651, 697, 754, 756, 909, 910, 913], "96": [83, 84, 333, 558, 562, 563, 564, 646, 648, 651, 697, 735, 737, 909, 910, 913], "995": [83, 84, 333, 563, 564, 566, 567], "9999": [83, 84, 563, 564], "static_all_equ": [85, 86, 573, 575], "clip_vector_norm": [85, 86, 572], "max_norm": [85, 86, 572, 584, 585, 586, 587], "static_gather_nd": [85, 86, 601], "adam_upd": [87, 88, 136, 646], "lr": [87, 88, 135, 136, 646, 653, 654, 655, 656, 658, 659, 660, 661, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 991, 992, 993, 994, 995, 996], "mw_tm1": [87, 88, 646, 653, 654, 655, 656, 666, 667, 668, 669], "vw_tm1": [87, 88, 646, 653, 654, 655, 656, 666, 667, 668, 669], "gradient_descent_upd": [87, 88, 646, 845, 846, 847, 848, 953], "is_vari": [87, 88, 129, 646], "lamb_upd": [87, 88, 646], "max_trust_ratio": [87, 88, 646, 666, 667, 668, 669, 991, 993], "decay_lambda": [87, 88, 646, 666, 667, 668, 669, 670, 671, 672, 673, 991, 993, 994], "lars_upd": [87, 88, 646], "optimizer_upd": [87, 88, 646], "effective_grad": [87, 88, 646, 674, 675, 676, 677], "static_adam_step": [87, 88, 648], "87": [87, 88, 101, 102, 646, 648, 651, 652, 874, 876], "976": [87, 88, 333, 563, 567, 646, 648, 651, 652], "static_adam_upd": [87, 88, 653], "static_gradient_descent_upd": [87, 88, 658], "static_is_vari": [87, 88, 662], "static_lamb_upd": [87, 88, 666], "static_lars_upd": [87, 88, 670], "static_optimizer_upd": [87, 88, 674], "73": [93, 94, 121, 333, 545, 548, 697, 698, 700, 701, 702, 867, 868, 871], "577": [93, 94, 697, 698, 700, 701, 702], "41": [93, 94, 134, 333, 393, 396, 545, 548, 697, 698, 700, 701, 702, 909, 934, 937], "707": [93, 94, 697, 698, 700, 701, 702], "static_choleski": [93, 94, 698], "static_rol": [93, 94, 97, 98, 119, 126, 698, 702, 786, 790, 819], "static_binary_cross_entropi": [95, 96, 770], "static_cross_entropi": [95, 96, 775], "static_sparse_cross_entropi": [95, 96, 780], "static_clip": [97, 98, 786], "random_uniform": [101, 102, 121, 128, 136, 872, 953], "static_randint": [101, 102, 874], "20": [101, 102, 134, 333, 393, 396, 422, 425, 529, 532, 545, 548, 697, 709, 711, 735, 737, 754, 756, 872, 874, 875, 876, 884, 887, 888, 909, 910, 913], "40": [101, 102, 333, 405, 408, 545, 548, 697, 735, 737, 874, 876, 909, 910, 913], "62": [101, 102, 874, 876], "52": [101, 102, 646, 648, 651, 697, 735, 737, 874, 876, 889, 890, 909, 910, 913], "95": [101, 102, 646, 648, 651, 874, 876], "42": [101, 102, 137, 160, 166, 169, 646, 648, 651, 697, 735, 737, 872, 874, 876, 882, 909, 910, 913], "13": [101, 102, 119, 121, 126, 333, 373, 376, 393, 396, 405, 408, 545, 548, 572, 590, 646, 648, 651, 684, 696, 697, 709, 711, 735, 737, 867, 868, 871, 874, 876, 884, 888, 889, 890, 909, 910, 913], "static_random_uniform": [101, 102, 878], "static_unique_count": [105, 106, 891], "classivi": [105, 106, 785, 824, 889, 891, 892, 894, 895], "static_argsort": [107, 108, 899], "static_sort": [107, 108, 904], "static_al": [111, 112, 943], "static_ani": [111, 112, 948], "add_ivy_container_instance_method": 113, "containerexampl": [113, 114], "who": [115, 131, 149], "mainli": [115, 133, 135], "under": [115, 118, 119, 120, 121, 122, 126, 131, 132, 135, 137], "hood": [115, 119, 121, 122, 126, 131, 132, 135, 137], "weed": [115, 131], "behind": [115, 121, 131, 133, 646, 653, 655, 658, 660, 666, 668, 670, 672, 674, 676], "tour": 115, "primari": [115, 121, 123, 129, 149], "composit": [115, 121, 123, 125, 126, 129, 132, 136, 137, 149], "nestabl": [115, 118, 119, 121, 129, 175, 176, 177, 179, 182, 184, 185, 188, 190, 191, 193, 196, 198, 199, 202, 204, 205, 207, 208, 210, 213, 220, 221, 223, 226, 228, 232, 233, 237, 238, 240, 241, 245, 246, 255, 258, 333, 334, 337, 347, 350, 352, 355, 356, 359, 397, 400, 430, 433, 513, 516, 545, 548, 549, 552, 558, 562, 572, 600, 684, 687, 696, 697, 698, 701, 709, 711, 785, 819, 822, 867, 868, 871, 889, 891, 895, 909, 914, 917, 942, 943, 946], "dynam": [115, 127, 128, 129, 132, 172, 173], "runtim": [115, 121, 283], "h": [115, 126, 684, 687, 688, 689, 690, 691], "j": [115, 572, 580, 581, 697, 757, 759, 909, 910, 913], "n": [115, 121, 175, 210, 213, 228, 232, 233, 237, 572, 581, 684, 692, 697, 709, 711, 721, 724, 728, 729, 731, 732, 734, 735, 737, 738, 740, 741, 743, 748, 750, 751, 753, 757, 759, 760, 762, 763, 765, 766, 768, 785, 795, 798, 799, 802, 807, 810, 829, 832, 841, 844, 872, 877, 878, 880, 884, 887, 909, 918, 921, 930, 933, 934, 937, 938, 941, 942, 943, 946, 948, 951], "borrow": 115, "taken": [116, 130, 137, 697, 709, 711], "constant": [116, 122, 136, 137, 149, 283, 292, 293, 785, 795, 798, 849, 855, 867, 868, 871, 966, 967, 971, 974, 987, 988, 989, 990], "compil": [116, 126, 131, 133, 149, 953, 987, 988, 991, 992, 993, 994, 995, 996], "meta": [116, 125, 846, 847, 848], "overlap": 116, "sever": [116, 149, 697, 718, 720], "judgement": 116, "locat": [116, 121, 123, 128, 872, 873], "some_namespac": 116, "some_backend": 116, "another_backend": 116, "break": [116, 117, 130, 134, 149, 953], "anyth": [116, 121, 953], "refactor": 116, "ongo": 116, "subfold": [116, 121], "file_nam": [116, 121], "my_func": [116, 119], "int": [116, 117, 119, 122, 126, 127, 128, 129, 130, 137, 160, 165, 172, 173, 175, 184, 190, 191, 198, 199, 202, 204, 205, 207, 208, 220, 221, 228, 232, 233, 237, 238, 240, 246, 254, 263, 265, 266, 269, 272, 283, 305, 308, 309, 310, 311, 319, 320, 321, 327, 328, 333, 373, 376, 377, 380, 381, 384, 385, 388, 389, 392, 393, 396, 572, 578, 590, 591, 594, 595, 596, 599, 600, 609, 625, 628, 629, 634, 635, 644, 646, 648, 651, 653, 655, 666, 668, 684, 685, 687, 689, 690, 691, 697, 703, 705, 709, 711, 754, 756, 757, 759, 760, 762, 763, 765, 769, 775, 778, 780, 783, 785, 791, 794, 795, 798, 799, 802, 803, 806, 807, 810, 811, 814, 815, 818, 819, 822, 824, 825, 828, 829, 832, 833, 836, 837, 840, 841, 844, 845, 846, 847, 848, 849, 861, 867, 868, 871, 872, 873, 874, 875, 877, 878, 880, 882, 884, 885, 886, 898, 899, 902, 904, 907, 909, 914, 917, 918, 921, 922, 925, 930, 933, 934, 937, 938, 941, 942, 943, 946, 948, 951], "nativedtyp": [116, 117, 127, 128, 175, 176, 177, 179, 182, 184, 185, 188, 190, 191, 198, 199, 202, 215, 218, 220, 221, 223, 226, 238, 240, 241, 245, 246, 251, 252, 262, 263, 264, 273, 909, 934, 937], "nativedevic": [116, 117, 127, 128, 175, 176, 177, 179, 182, 184, 185, 188, 190, 191, 198, 199, 202, 204, 205, 207, 208, 215, 218, 220, 221, 223, 226, 238, 240, 241, 245, 283, 300, 301, 302, 316, 322, 324, 326, 328, 329, 332, 572, 625, 872, 873, 874, 875, 877, 878, 880], "my": 116, "numer": [116, 136, 175, 210, 213, 246, 252, 333, 334, 337, 347, 350, 397, 400, 409, 412, 426, 429, 430, 433, 434, 437, 446, 449, 450, 453, 454, 457, 458, 461, 490, 493, 494, 497, 504, 507, 509, 512, 513, 516, 521, 524, 525, 528, 533, 536, 549, 552, 553, 557, 568, 571, 572, 607, 608, 630, 631, 636, 637, 697, 703, 705, 721, 724, 735, 737, 748, 750, 754, 756, 757, 759, 760, 762, 872, 883, 884, 885, 886, 909, 914, 917, 926, 929, 934, 937, 966], "cooler": 116, "produc": [116, 121, 283, 292, 293, 684, 696], "something_cool": 116, "category_nam": [117, 118, 122, 127, 128], "backend_nam": [117, 118, 122, 123, 124, 127, 128], "adress": 117, "conveni": [117, 127, 128, 133, 135, 136], "revisit": [117, 137], "dedic": [117, 134, 136, 646, 682, 964, 965], "four": [117, 119, 122, 127, 135], "float": [117, 118, 121, 122, 126, 127, 129, 134, 136, 160, 162, 174, 175, 176, 177, 184, 190, 191, 198, 199, 202, 204, 205, 207, 208, 220, 221, 238, 240, 246, 252, 262, 266, 271, 274, 283, 316, 322, 326, 329, 332, 333, 334, 337, 339, 342, 343, 346, 347, 350, 352, 355, 356, 359, 361, 364, 365, 368, 369, 372, 393, 396, 397, 400, 401, 404, 405, 408, 409, 412, 414, 417, 422, 425, 426, 429, 430, 433, 434, 437, 438, 441, 442, 445, 458, 461, 466, 469, 470, 473, 478, 481, 482, 485, 504, 507, 509, 512, 513, 516, 517, 520, 521, 524, 525, 528, 529, 532, 537, 540, 541, 544, 545, 548, 553, 557, 558, 562, 563, 567, 568, 571, 572, 584, 585, 587, 599, 607, 608, 630, 631, 636, 637, 646, 648, 651, 653, 655, 658, 660, 666, 668, 670, 672, 674, 676, 684, 687, 691, 696, 697, 698, 701, 706, 708, 712, 714, 715, 717, 718, 720, 729, 731, 738, 740, 741, 743, 745, 747, 748, 750, 763, 765, 769, 770, 773, 775, 778, 780, 783, 845, 846, 847, 848, 867, 868, 871, 872, 877, 878, 880, 889, 890, 891, 895, 897, 909, 914, 917, 918, 921, 922, 925, 926, 929, 930, 933, 934, 937, 938, 941], "tf": [117, 125, 127, 128, 129, 132, 137, 149, 953], "jnp": [117, 127, 128, 129, 137, 953], "jaxarrai": [117, 127, 128, 129], "wherea": [117, 121, 122, 125, 127, 128, 137], "__sub__": [117, 119, 125, 126, 134], "__mul__": [117, 119, 125, 126, 134], "__div__": 117, "permit": [117, 121, 125], "dicat": 117, "addition": [117, 129], "omit": [117, 129, 889, 890, 891, 895, 897], "wrapper": [117, 124, 125, 126, 127, 129, 134], "contrast": [117, 118], "futher": 117, "respect": [117, 119, 121, 125, 126, 127, 130, 175, 210, 213, 333, 334, 337, 347, 350, 365, 368, 373, 376, 381, 384, 385, 388, 389, 392, 393, 396, 409, 412, 414, 417, 434, 437, 438, 441, 442, 445, 458, 461, 462, 465, 482, 485, 486, 489, 494, 497, 498, 501, 504, 507, 513, 516, 525, 528, 553, 557, 646, 648, 651, 653, 655, 657, 658, 660, 666, 668, 670, 672, 674, 676, 697, 741, 743, 845, 846, 847, 848], "absenc": 117, "pep": 117, "484": 117, "annot": [117, 130], "dictat": [117, 119, 125, 129], "brittl": 117, "intend": [117, 909, 934, 937], "subset": [117, 118, 121, 132], "freeli": 117, "consum": [117, 121, 126, 283], "inde": [117, 149], "flexibl": 117, "technic": [117, 126, 129, 149], "original_typ": 117, "cumbersom": 117, "readabl": [117, 125, 126, 134, 135], "account": 118, "instanti": 118, "firstli": [118, 119, 122, 125, 127, 129, 135], "templat": [118, 121, 953], "spec": [118, 119], "api_specif": [118, 175, 176, 177, 179, 182, 184, 185, 188, 190, 191, 193, 196, 198, 199, 202, 204, 205, 220, 221, 223, 226, 228, 232, 233, 237, 238, 240, 241, 245, 246, 255, 258, 333, 334, 337, 352, 355, 356, 359, 393, 396, 397, 400, 405, 408, 430, 433, 513, 516, 545, 548, 549, 552, 697, 709, 711, 785, 799, 802, 819, 822, 889, 890, 891, 895, 898, 899, 902, 909, 914, 917], "array_api": 118, "preview": 118, "render": 118, "incorrectli": [118, 130], "onlin": [118, 953], "approxim": [118, 160, 161, 333, 339, 342, 343, 346, 352, 355, 356, 359, 361, 364, 365, 368, 401, 404, 405, 408, 422, 425, 426, 429, 466, 469, 470, 473, 474, 477, 478, 481, 521, 524, 537, 540, 541, 544, 558, 562, 563, 567, 697, 729, 731, 738, 740], "tangent": [118, 160, 171, 333, 361, 364, 365, 368, 369, 372, 558, 562, 563, 567], "domain": [118, 333, 339, 342, 343, 346, 352, 355, 356, 359, 361, 364, 365, 368, 401, 404, 405, 408, 422, 425, 426, 429, 466, 469, 470, 473, 478, 481, 537, 540, 541, 544, 545, 548, 558, 562, 563, 567], "infin": [118, 174, 246, 252, 333, 334, 337, 343, 346, 347, 350, 356, 359, 361, 364, 365, 368, 397, 400, 401, 404, 405, 408, 422, 425, 426, 429, 430, 433, 434, 437, 446, 449, 450, 453, 466, 469, 470, 473, 478, 481, 482, 485, 504, 507, 521, 524, 525, 528, 529, 532, 537, 540, 541, 544, 545, 548, 558, 562, 563, 567, 568, 571, 697, 763, 765, 909, 914, 917, 922, 925, 942, 943, 946, 948, 951], "codomain": [118, 333, 339, 342, 343, 346, 352, 355, 356, 359, 361, 364, 365, 368, 401, 404, 405, 408, 422, 425, 426, 429, 466, 469, 470, 473, 478, 481, 537, 540, 541, 544, 545, 548, 558, 562, 563, 567], "x_i": [118, 333, 334, 337, 339, 342, 343, 346, 352, 355, 356, 359, 361, 364, 377, 380, 397, 400, 401, 404, 405, 408, 422, 425, 426, 429, 430, 433, 446, 449, 450, 453, 454, 457, 466, 469, 470, 473, 478, 481, 490, 493, 509, 512, 529, 532, 533, 536, 537, 540, 541, 544, 545, 548, 549, 552, 558, 562, 563, 567, 568, 571, 889, 890, 891, 895, 897, 909, 914, 917, 918, 921, 922, 925, 930, 933, 934, 937, 938, 941], "assum": [118, 121, 123, 127, 134, 135, 149, 175, 176, 177, 179, 182, 184, 185, 188, 190, 191, 193, 196, 198, 199, 202, 204, 205, 207, 208, 210, 213, 220, 221, 223, 226, 228, 232, 233, 237, 238, 240, 241, 245, 246, 255, 258, 333, 334, 337, 347, 350, 352, 355, 356, 359, 373, 376, 393, 396, 397, 400, 401, 404, 405, 408, 430, 433, 513, 516, 529, 532, 537, 540, 545, 548, 549, 552, 558, 562, 563, 567, 572, 600, 684, 687, 696, 697, 698, 701, 706, 708, 709, 711, 785, 799, 802, 803, 806, 819, 822, 867, 868, 871, 889, 890, 891, 895, 898, 899, 902, 909, 914, 917, 942, 943, 946], "express": [118, 130, 132, 137, 333, 339, 342, 352, 355, 361, 364, 365, 368, 401, 404, 537, 540, 558, 562], "radian": [118, 333, 339, 342, 352, 355, 361, 364, 365, 368, 401, 404, 537, 540, 558, 562], "operand": [118, 333, 339, 342, 343, 346, 347, 350, 352, 355, 356, 359, 361, 364, 365, 368, 393, 396, 397, 400, 401, 404, 405, 408, 422, 425, 426, 429, 430, 433, 466, 469, 470, 473, 478, 481, 482, 485, 504, 507, 521, 524, 525, 528, 529, 532, 537, 540, 541, 544, 545, 548, 558, 562, 563, 567, 568, 571, 909, 910, 913, 914, 917, 922, 925, 934, 937], "whose": [118, 121, 175, 228, 232, 233, 237, 333, 343, 346, 356, 359, 369, 372, 401, 404, 405, 408, 521, 524, 537, 540, 541, 544, 558, 562, 563, 567, 572, 583, 697, 698, 701, 706, 708, 709, 711, 712, 714, 715, 717, 718, 720, 729, 731, 732, 734, 735, 737, 738, 740, 741, 743, 745, 747, 748, 750, 751, 753, 757, 759, 785, 803, 806, 819, 822, 889, 890, 891, 895, 909, 910, 913], "ref": [118, 333, 389, 392, 458, 461, 504, 507, 513, 516, 525, 528, 553, 557, 785, 829, 832], "promot": [118, 122, 127, 246, 252, 255, 258, 273, 274, 278, 333, 339, 342, 343, 346, 347, 350, 352, 355, 356, 359, 361, 364, 369, 372, 373, 376, 381, 384, 385, 388, 389, 392, 393, 396, 401, 404, 405, 408, 409, 412, 422, 425, 426, 429, 466, 469, 470, 473, 478, 481, 482, 485, 498, 501, 504, 507, 521, 524, 525, 528, 537, 540, 541, 544, 545, 548, 558, 562, 563, 567, 697, 698, 701, 703, 705, 718, 720, 721, 724, 729, 731, 735, 737, 738, 740, 745, 747, 760, 762, 763, 765, 785, 829, 832, 909, 918, 921], "But": [118, 126, 137], "needless": 118, "info": [118, 953], "renam": 118, "conform": [118, 175, 176, 177, 179, 182, 184, 185, 188, 190, 191, 193, 196, 198, 199, 202, 204, 205, 210, 213, 220, 221, 223, 226, 228, 232, 233, 237, 238, 240, 241, 245, 246, 255, 258, 333, 334, 337, 347, 350, 352, 355, 356, 359, 373, 376, 393, 396, 397, 400, 405, 408, 426, 429, 430, 433, 462, 465, 513, 516, 529, 532, 545, 548, 549, 552, 558, 562, 563, 567, 697, 706, 708, 709, 711, 785, 799, 802, 803, 806, 819, 822, 889, 890, 891, 895, 898, 899, 902, 909, 914, 917, 942, 943, 946], "org": [118, 175, 176, 177, 179, 182, 184, 185, 188, 190, 191, 193, 196, 198, 199, 202, 204, 205, 220, 221, 223, 226, 228, 232, 233, 237, 238, 240, 241, 245, 246, 255, 258, 333, 334, 337, 352, 355, 356, 359, 393, 396, 397, 400, 405, 408, 430, 433, 513, 516, 545, 548, 549, 552, 646, 648, 651, 653, 655, 697, 709, 711, 785, 799, 802, 819, 822, 889, 890, 891, 895, 898, 899, 902, 909, 914, 917], "elementwise_funct": [118, 333, 334, 337, 352, 355, 356, 359, 393, 396, 397, 400, 405, 408, 430, 433, 513, 516, 545, 548, 549, 552, 697, 709, 711, 785, 819, 822, 889, 890, 898, 899, 902, 909, 914, 917], "descript": [118, 121, 126, 175, 176, 177, 179, 182, 184, 185, 188, 190, 191, 193, 196, 198, 199, 202, 204, 205, 207, 208, 210, 213, 220, 221, 223, 226, 228, 232, 233, 237, 238, 240, 241, 245, 246, 255, 258, 333, 334, 337, 347, 350, 352, 355, 356, 359, 373, 376, 393, 396, 397, 400, 405, 408, 430, 433, 513, 516, 529, 532, 545, 548, 549, 552, 558, 562, 563, 567, 572, 600, 684, 687, 696, 697, 698, 701, 706, 708, 709, 711, 763, 765, 785, 799, 802, 803, 806, 819, 822, 867, 868, 871, 889, 890, 891, 895, 898, 899, 902, 909, 914, 917, 942, 943, 946], "simplic": [118, 136, 148, 175, 176, 177, 179, 182, 184, 185, 188, 190, 191, 193, 196, 198, 199, 202, 204, 205, 207, 208, 210, 213, 220, 221, 223, 226, 228, 232, 233, 237, 238, 240, 241, 245, 246, 255, 258, 333, 334, 337, 347, 350, 352, 355, 356, 359, 373, 376, 393, 396, 397, 400, 405, 408, 430, 433, 513, 516, 529, 532, 545, 548, 549, 552, 558, 562, 563, 567, 572, 600, 684, 687, 696, 697, 698, 701, 706, 708, 709, 711, 785, 799, 802, 803, 806, 819, 822, 867, 868, 871, 889, 890, 891, 895, 898, 899, 902, 909, 914, 917], "judgment": 118, "beyond": [118, 785, 819, 822], "text": 118, "func_nam": [118, 119, 122], "pure": [118, 134, 137, 149], "themselv": [118, 122, 126, 127, 128, 136, 849, 850], "operator_nam": 118, "succinct": 118, "contstructor": 118, "though": [118, 122, 127, 135, 149], "forward": [118, 121, 137, 148, 149, 987, 988, 991, 995], "_forward": [118, 132, 135, 136, 953], "former": 118, "trainabl": [118, 133, 135, 136, 646, 662, 664, 964, 965, 987, 988, 997], "explicitli": [118, 122, 123, 125, 126, 129, 132, 149, 697, 712, 714, 975, 984, 986, 987, 988], "latter": [118, 123], "implicit": [118, 121, 126, 132], "docst": 118, "eight": 119, "static_": 119, "op_nam": 119, "__r": 119, "__truediv__": [119, 125, 126], "recap": [119, 126, 136], "independ": [119, 120, 124, 126, 132, 137, 697, 703, 705, 745, 747, 872, 873], "combinatorili": 119, "variat": [119, 121], "grid": [119, 121, 148, 175, 210, 213], "vari": [119, 121, 126, 134, 889, 890, 891, 895, 897], "simplest": [119, 121], "small": [119, 122, 132, 136, 149, 333, 504, 507, 697, 729, 731, 738, 740, 867, 868, 871, 989, 990], "unus": [119, 129, 130, 172, 173], "18": [119, 126, 333, 393, 396, 697, 709, 711, 735, 737, 909, 910, 913], "excess": [119, 123, 134], "showcas": [119, 148], "demonstr": [119, 134], "replic": [119, 127], "meant": 119, "imaginari": 119, "some_flag": 119, "another_flag": 119, "54": [119, 333, 401, 404, 405, 408, 545, 548, 684, 696, 697, 735, 737, 872, 877, 909, 910, 913], "jointli": 119, "three": [119, 121, 126, 131, 175, 210, 213, 953], "x0": [119, 572, 580], "procedur": 119, "sens": [119, 126, 134], "5574077": 119, "1850398": 119, "5463025": 119, "8422884": 119, "91601413": 119, "9647598": 119, "3738229": 119, "1597457": 119, "0963247": 119, "9955841": 119, "3278579": 119, "multi": [119, 126, 131, 149, 684, 695, 697, 703, 705, 953, 959, 975, 986], "seper": [119, 572, 599], "pars": [119, 149], "satisfi": [119, 697, 766, 768], "far": [119, 128, 133, 134, 849, 850, 860], "asid": [119, 148], "irrelev": [119, 127], "increasingli": 119, "complex": [119, 135, 136, 137, 149, 697, 712, 714, 748, 750], "rule": [119, 121, 122, 125, 126, 127, 130, 246, 252, 255, 258, 274, 333, 369, 372, 389, 392, 409, 412, 504, 507, 525, 528, 697, 698, 701, 703, 705, 735, 737, 745, 747], "14254655": 119, "1578213": 119, "380515": 119, "17": [119, 126, 160, 162, 697, 709, 711, 872, 877], "trivial": 119, "By": [119, 122, 126, 129, 136, 137, 572, 590, 591, 697, 760, 762, 785, 811, 814, 909, 914, 917, 918, 921, 922, 925, 926, 929, 930, 933, 934, 937, 938, 941, 942, 943, 946, 948, 951], "non": [119, 126, 127, 132, 172, 173, 246, 252, 270, 333, 490, 493, 494, 497, 684, 687, 697, 706, 708, 729, 731, 748, 750, 754, 756, 760, 762, 763, 765, 884, 885, 886, 887, 909, 914, 917, 918, 921, 922, 925, 926, 929, 938, 941, 942, 943, 946, 948, 951, 987, 988, 991, 995], "exlud": 119, "unit": [120, 121, 149, 160, 161, 162, 163, 283], "thoroughli": 120, "ci": [120, 121, 149], "failur": 120, "On": [121, 130, 133, 137], "fixtur": 121, "300": [121, 333, 529, 532], "hit": [121, 132], "action": 121, "eleg": 121, "intellig": 121, "sampl": [121, 684, 692, 872, 873, 877, 878, 880, 909, 930, 933, 938, 941, 975, 983], "rang": [121, 135, 136, 137, 175, 176, 177, 204, 205, 207, 208, 889, 890, 909, 926, 929, 934, 937, 953], "unexplor": 121, "known": 121, "repeatedli": [121, 126, 849, 858], "upload": 121, "artifact": 121, "parametr": 121, "statement": [121, 130, 149], "plai": [121, 137], "varieti": [121, 127, 128], "wide": 121, "valid_int_dtyp": 121, "int8": [121, 127, 246, 267], "int16": [121, 127, 246, 255, 258, 267, 909, 926, 929, 934, 937], "uint8": [121, 127, 246, 255, 258, 267], "uint16": [121, 127, 246, 268, 909, 926, 929, 934, 937], "uint32": [121, 127, 246, 268, 909, 926, 929, 934, 937], "uint64": [121, 127, 246, 268, 909, 926, 929, 934, 937], "custom_strategi": 121, "st": 121, "sampled_from": 121, "min_siz": 121, "max_siz": 121, "wherein": 121, "referenc": 121, "print_hypothesis_exampl": 121, "searchstrategi": 121, "randomis": 121, "simplist": 121, "intricaci": 121, "briefli": [121, 122, 135], "bound": [121, 132], "mechan": [121, 147, 149, 953], "power": [121, 134, 135, 136, 333, 389, 392, 422, 425, 521, 524, 572, 607, 630, 637, 697, 728, 966], "math": [121, 129, 137, 953], "inclus": [121, 129, 175, 176, 177, 872, 874, 875], "width": 121, "losslessli": 121, "mostli": 121, "drawn": [121, 872, 873, 874, 875, 877, 878, 880], "one_of": 121, "datum": 121, "pipe": 121, "overload": 121, "shorthand": 121, "ndim": [121, 134, 697, 741, 743, 748, 750], "draw": [121, 872, 873, 877, 878, 880], "dtype_and_x": 121, "num_positional_arg": 121, "reject": 121, "flatmap": 121, "suppos": 121, "valid": [121, 127, 132, 246, 260, 684, 685, 686, 687, 688, 689, 690, 691, 785, 829, 832, 942, 943, 946, 948, 951, 975, 976, 977, 978, 979, 980, 981, 982], "dataobject": 121, "test_argsort": 121, "decor": [121, 122, 124, 126, 127, 128, 129], "initialis": [121, 283], "snippet": 121, "dtype_and_valu": 121, "valid_float_dtyp": 121, "list_of_length": 121, "instance_method": 121, "alpha": [121, 160, 162], "test_leaky_relu": 121, "fw": [121, 684, 685, 686, 687, 688, 689, 690, 691], "float16": [121, 127, 246, 268], "exhaust": 121, "num_posit": 121, "indirectli": 121, "advis": 121, "seri": 121, "9433925": 121, "401298464324817e": 121, "45": [121, 646, 648, 651, 697, 735, 737, 785, 824, 867, 868, 871, 909, 910, 913], "574352379": 121, "99999": 121, "2250738585072014e": 121, "308": 121, "103515625e": 121, "unpack": [121, 130, 572, 644], "seamlessli": 121, "edg": [121, 132, 137, 785, 786, 789, 795, 798, 841, 844, 953], "encount": 121, "criterion": 121, "straight": [121, 134, 953], "array_valu": 121, "valid_ax": 121, "hand": [121, 122, 130, 149], "craft": 121, "polici": [121, 148], "hoc": 121, "overview": [121, 131, 148], "array_dtyp": 121, "array_bool": 121, "na": 121, "test_concat": 121, "test_devic": 121, "array_shap": 121, "test_manipul": 121, "common_shap": 121, "test_lay": 121, "size_bound": 121, "precis": [121, 246, 266, 333, 504, 507, 545, 548], "283405296074752": 121, "564049465049088": 121, "0417876997507982e": 121, "min_valu": 121, "max_valu": 121, "allow_inf": 121, "min_num_dim": 121, "wherev": 121, "reshape_shap": 121, "larger": [121, 132, 137, 246, 266, 785, 786, 789, 819, 822, 909, 930, 933, 938, 941], "stand": 121, "alon": [121, 283, 322, 332], "fashion": 121, "some_sequ": 121, "06": [121, 646, 648, 651], "input_dtyp": 121, "allow_subnorm": 121, "exclude_min": 121, "960464477539063e": 121, "08": [121, 333, 356, 359, 684, 696], "coverag": 121, "allow_nan": 121, "Such": 121, "kind": [121, 149, 246, 266, 269, 333, 521, 524, 909, 926, 929, 934, 937], "get_shap": 121, "allow_non": 121, "max_num_dim": 121, "min_dim_s": 121, "none_or_list_of_float": 121, "200": 121, "199": [121, 333, 356, 359, 867, 868, 871], "99999999999997": 121, "000000000000002": 121, "125": 121, "43759670925832": 121, "get_mean_std": 121, "probabilist": 121, "811428143185347e": 121, "89": [121, 333, 393, 396, 697, 754, 756, 909, 934, 937], "none_or_list_float": 121, "get_bound": 121, "arrays_valu": 121, "put": [121, 149], "36418": 121, "213": 121, "21716926": 121, "get_prob": 121, "unnorm": [121, 872, 873], "099609375": 121, "get_axi": 121, "number_positional_argu": 121, "mind": [121, 125, 126], "bodi": 121, "test_valu": 121, "logic": [121, 124, 125, 127, 128, 134, 283, 319, 333, 486, 489, 490, 493, 494, 497, 942, 943, 946, 948, 951, 953], "enough": [121, 134, 135, 136], "autom": [121, 953], "report": 121, "test_demo": 121, "falsifi": 121, "failing_test": 121, "traceback": 121, "123": [121, 572, 597], "assertionerror": [121, 646, 683], "shrink": 121, "prescrib": 121, "behavior": [121, 132, 149, 333, 521, 524, 525, 528, 889, 890, 891, 895, 897], "identifi": 121, "closest": [121, 246, 260, 333, 397, 400, 430, 433, 434, 437, 529, 532, 568, 571], "checkout": 121, "scratch": 121, "databas": 121, "therebi": 121, "debug": [121, 126, 135], "event": [121, 953], "test_gelu": 121, "test_fil": 121, "brief": 121, "phase": [121, 149], "reus": 121, "notabl": 121, "displai": [121, 126, 135], "verbos": [121, 132, 953, 1001], "newer": 121, "max_exampl": 121, "impact": [121, 136], "deadlin": 121, "weird": 121, "verifi": [121, 127, 128, 134, 953, 959], "truth": [121, 333, 414, 417, 438, 441, 442, 445, 458, 461, 462, 465, 513, 516], "opt": [121, 123, 129, 134], "defer": [121, 122, 125, 126, 127, 128, 129], "suffic": [121, 124], "catch": [121, 572, 593], "systemat": 121, "safeguard": 121, "inabl": 121, "fact": [121, 135], "categor": [122, 128], "mutual": [122, 126], "constitut": [122, 132, 909, 930, 933, 938, 941], "venn": 122, "diagram": 122, "light": [122, 149], "log_pr": [122, 126, 129], "array_arg": 122, "typic": 122, "whatsoev": [122, 126], "commonli": [122, 909, 930, 933, 938, 941], "outsid": [122, 128, 130, 132, 134, 137, 785, 786, 789, 829, 832], "denomin": [122, 149, 572, 598, 608, 631, 636, 637, 867, 868, 871, 989, 990], "divis": [122, 333, 389, 392, 409, 412, 434, 437, 525, 528, 572, 598, 608, 631, 636, 637, 646, 648, 651, 653, 655, 666, 668, 991, 992, 993], "deal": [122, 149], "concurr": [122, 126], "weight": [122, 126, 136, 137, 646, 648, 651, 653, 655, 658, 660, 666, 668, 670, 672, 674, 676, 684, 693, 694, 696, 975, 976, 977, 978, 979, 980, 981, 982, 984, 985, 987, 988, 991, 993, 994], "modif": 122, "group": [122, 126], "cast": [122, 127, 246, 252, 255, 258, 785, 791, 794, 909, 926, 929, 934, 937, 953], "get_all_arrays_on_dev": 122, "nested_map": [122, 849], "index_nest": [122, 849], "implicit_backend": 123, "unless": [123, 128, 129, 149, 333, 504, 507, 572, 625], "__dict__": [123, 132, 134], "ivy_original_dict": [123, 132], "unmodifi": [123, 127], "moment": [123, 149, 646, 648, 651, 653, 655, 666, 668, 991, 992, 993], "fallback": 123, "freedom": [123, 909, 930, 933, 938, 941], "recommend": [123, 333, 490, 493, 494, 497, 525, 528, 909, 918, 921], "achiev": [124, 130, 135, 137], "topic": [124, 134], "_data": [125, 134], "organiz": [125, 126], "bear": [125, 126, 127], "necessarili": [125, 126], "although": [125, 126], "underpin": [125, 126, 132], "programmat": [125, 126], "backup": [125, 126], "accident": [125, 126], "absent": [125, 126], "perk": [125, 126], "auto": [125, 126, 135], "throw": [125, 134], "imposs": 125, "coupl": [125, 126, 134, 136], "anywai": 125, "secondli": [125, 127], "easier": 125, "five": [126, 135], "decis": [126, 132, 134], "arbitrarili": [126, 135], "__repr__": 126, "control": [126, 127, 129, 134, 135, 148], "__getattr__": 126, "underli": [126, 333, 373, 376, 385, 388, 393, 396, 498, 501], "__contains__": 126, "__getstate__": 126, "__setstate__": 126, "unpickl": 126, "expand": [126, 572, 599, 785, 799, 802], "children": 126, "shallowest": 126, "deepest": 126, "67": [126, 333, 393, 396, 405, 408], "22": [126, 333, 393, 396, 697, 709, 711, 735, 737, 884, 888, 909, 910, 913], "retain_grad": [126, 646, 657], "dy": [126, 646, 657], "dx": [126, 646, 657], "autograd": [126, 149], "grad": [126, 135, 136, 137, 953, 991, 995], "redund": 126, "num_head": [126, 684, 695, 975, 986], "mask": [126, 684, 695, 696], "to_q_fn": [126, 684, 695], "to_kv_fn": [126, 684, 695], "to_out_fn": [126, 129, 684, 695], "to_q_v": [126, 684, 695], "to_kv_v": [126, 684, 695], "to_out_v": [126, 684, 695], "measur": [126, 684, 695, 975, 986], "dot": [126, 684, 695, 696, 697, 754, 756, 760, 762, 975, 986], "product": [126, 333, 504, 507, 572, 590, 684, 695, 696, 697, 703, 705, 721, 724, 735, 737, 754, 756, 760, 762, 909, 910, 913, 926, 929, 975, 986], "implicitli": 126, "intuit": [126, 135, 136], "chronolog": 126, "had": [126, 129], "sequenti": [126, 136], "flow": [126, 148], "implic": 126, "slightli": [126, 132, 136], "eager": [126, 149], "bfloat16": [127, 246, 267], "all_dtyp": 127, "all_numeric_dtyp": 127, "all_int_dtyp": 127, "all_float_dtyp": 127, "fall": [127, 131, 953, 987, 988, 991, 995], "invalid": [127, 130, 697, 760, 762, 942, 943, 946, 948, 951], "thirdli": 127, "native_float32": 127, "importantli": [127, 134, 137, 148], "arguabl": [127, 128], "compound": 127, "overflow": [127, 333, 347, 350, 909, 934, 937], "arr": [127, 128, 867, 868, 871], "scalar": [127, 132, 137, 149, 175, 199, 202, 572, 625, 642, 645, 697, 763, 765], "settabl": [127, 128], "mx": [127, 128, 129, 953], "nd": [127, 128, 129, 132, 137, 953], "deleg": 127, "as_n": [127, 246, 261, 262, 263, 264, 283, 302, 303, 324], "idx": [128, 134, 572, 578], "tpu": [128, 283, 305, 330], "aliv": [128, 283, 317, 321, 323, 572, 606, 624, 626], "amount": [128, 283, 329, 769, 770, 773, 775, 778, 780, 783], "dual": 128, "thrown": [128, 149, 572, 616], "rare": [128, 149], "program": 129, "strictli": 129, "ration": 129, "speak": 129, "subtli": 129, "ensure_in_backend": [129, 572, 616], "x_nativ": 129, "val_n": 129, "is_ivy_arrai": [129, 134, 572], "assign": [129, 130, 134], "elif": 129, "irrespect": [129, 134, 246, 252], "unspecifi": [129, 333, 521, 524, 525, 528, 697, 712, 714, 785, 829, 832], "predominantli": [129, 148], "presenc": 129, "altern": [129, 135], "_wrap_fn": 129, "maxim": [129, 132], "inner": [129, 134, 697, 712, 714, 721, 724, 845, 846, 847, 848], "third": [129, 149, 697, 748, 750, 889, 890], "leverag": 129, "equival": [129, 135, 137, 175, 176, 177, 333, 389, 392, 490, 493, 494, 497, 525, 528, 697, 729, 731, 738, 740, 745, 747, 763, 765], "input_arrai": 129, "clean": [130, 132, 133, 135], "flake8": 130, "undefin": 130, "yield": [130, 884, 888], "handler": [130, 131, 133, 137, 953], "liter": [130, 697, 763, 765], "carri": 130, "star": 130, "notimplementederror": 130, "unsuccess": 130, "exce": [130, 333, 503], "black": 130, "disobei": 130, "successfulli": 130, "accordingli": [130, 175, 210, 213, 333, 426, 429, 697, 763, 765, 884, 886, 889, 890, 891, 895, 897, 909, 914, 917, 918, 921, 922, 925, 926, 929, 930, 933, 934, 937, 938, 941, 942, 943, 946, 948, 951], "comparison": 130, "sound": 131, "higher": [131, 132, 137, 149, 646, 653, 655, 658, 660, 666, 668, 670, 672, 674, 676], "fledg": [132, 133], "syntact": [132, 137], "clip_by_valu": [132, 137], "clamp": [132, 137], "fit": [132, 785, 811, 814], "construct": [132, 133, 136, 137, 785, 837, 840, 975, 976, 977, 978, 979, 980, 981, 982, 984, 985, 986, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998], "power_seq": 132, "okai": 132, "resid": [132, 136], "ml_framework": [132, 137, 175, 176, 177], "current_framework": [132, 137], "furthermor": 132, "concaten": [132, 135, 283, 312, 572, 599, 785, 791, 794, 953], "framework_handl": 132, "face": 132, "cprint": [132, 1000], "framework_stack": 132, "_determine_framework_from_arg": 132, "valueerror": [132, 785, 825, 828], "get_framework": 132, "neither": [132, 333, 347, 350, 504, 507, 646, 683], "illustr": [132, 148], "un": [132, 246, 270], "nn": [132, 137, 175, 210, 213, 953], "init_h": [132, 684, 694], "init_c": [132, 684, 694], "kernel": [132, 149, 684, 694], "recurrent_kernel": [132, 684, 694], "bia": [132, 136, 684, 693, 694, 975, 976, 977, 978, 979, 980, 981, 982, 985], "recurrent_bia": [132, 684, 694], "x_shape": 132, "batch_shap": [132, 134, 137, 572, 625, 684, 694, 695, 696, 697, 766, 768, 872, 873, 975, 984], "timestep": [132, 684, 694, 975, 984], "input_channel": [132, 136, 975, 976, 977, 978, 979, 980, 981, 984, 985], "x_flat": 132, "wi": 132, "wi_x": 132, "wii_x": 132, "wif_x": 132, "wig_x": 132, "wio_x": 132, "recurr": [132, 684, 694], "wh": 132, "lstm": [132, 684, 694, 975], "ht": 132, "ct": 132, "hts_list": 132, "unrol": [132, 135, 684, 694], "wii_xt": 132, "wif_xt": 132, "wig_xt": 132, "wio_xt": 132, "zip": 132, "htm1": 132, "ctm1": 132, "wh_htm1": 132, "whi_htm1": 132, "whf_htm1": 132, "whg_htm1": 132, "who_htm1": 132, "ft": 132, "gt": 132, "ot": 132, "offici": 132, "reliabl": 132, "sacrific": 132, "hear": 132, "virtu": 132, "pure_ivi": 132, "reduce_mean": [132, 135, 136, 137, 953], "reduce_sum": [132, 953], "reduce_var": 132, "compile_graph": [132, 137], "pure_torch": 132, "cat": [132, 137], "backbon": [132, 135], "_layer": 132, "super": [132, 135, 136, 137], "random_unifrom": 132, "unclean": 132, "wx": 132, "temp": 132, "torchscript": 132, "fn": [132, 134, 150, 151, 152, 153, 154, 155, 156, 157, 158, 246, 267, 268, 283, 292, 293, 572, 578, 643, 849, 850, 855, 856, 857, 859, 860, 861, 956, 958], "example_input": [132, 172, 173], "static_argnum": [132, 172, 173], "static_argnam": [132, 172, 173], "jit": [132, 149], "frontend": 133, "primit": [133, 149], "hierarch": [133, 135, 136], "arraywithlinalg": 134, "arraywithlog": 134, "arraywithmath": 134, "arraywithmeta": 134, "arraywithreduct": 134, "is_native_arrai": [134, 572], "_shape": 134, "_size": 134, "functool": 134, "mul": 134, "_dtype": 134, "_devic": 134, "_dev_str": 134, "_pre_repr": 134, "_post_repr": 134, "mt": 134, "answer": [134, 149], "consol": 134, "typeerror": 134, "immut": 134, "behav": 134, "claim": 134, "truli": 134, "_native_wrapp": 134, "attributeerror": 134, "genuin": 134, "some_method": 134, "similarli": [134, 175, 210, 213], "rewritten": 134, "__pow__": 134, "strang": 134, "enforc": 134, "notic": 134, "appear": [134, 785, 799, 802], "invers": [134, 148, 333, 339, 342, 343, 346, 352, 355, 356, 359, 361, 364, 365, 368, 369, 372, 697, 718, 720, 738, 740], "_wrap_method": 134, "func_wrapp": [134, 150, 151, 152, 153, 154, 155, 156, 157, 158], "__name__": 134, "non_wrapped_method": 134, "_method_wrap": 134, "native_arg": 134, "native_kwarg": 134, "inner_fn": 134, "whist": 134, "unwrap": 134, "transit": 134, "needlessli": 134, "randn": 134, "_unwrap_method": 134, "method_wrap": 134, "compartment": 134, "public": [134, 572, 588], "newshap": 134, "new_shap": 134, "tidi": 134, "shorter": 134, "crystal": 134, "ton": 135, "ado": [135, 136], "incred": [135, 149], "hash": 135, "soup": 135, "walk": [135, 136], "dct": 135, "cnt": 135, "combo": [135, 953, 959], "hold": [135, 572, 628, 629], "1000": [135, 333, 545, 548], "uda": 135, "3333": 135, "6667": 135, "178": 135, "new_weight": 135, "0600": 135, "3100": 135, "2400": 135, "6900": 135, "delimit": 135, "autocomplet": 135, "midwai": 135, "agent": 135, "total_spe": 135, "total_height": 135, "total_width": 135, "ag": 135, "tot": 135, "total_": 135, "total_h": 135, "batch_siz": [135, 684, 685, 686, 687, 688, 689, 690, 691, 872, 873], "dir": 135, "adam": [135, 136, 137, 646, 648, 651, 653, 655, 666, 668, 953, 991, 993], "cnt0": 135, "cnt1": 135, "diff_0": 135, "diff_1": 135, "config0": 135, "config1": 135, "Not": [135, 136, 149, 174], "decod": 135, "l0": 135, "l1": [135, 697, 763, 765], "depth": [135, 136, 137, 148, 283, 307, 311, 315, 572, 610, 625, 849, 861, 987, 988], "clearer": 135, "truncat": 135, "decoder__l0": 135, "decoder__l1": 135, "encoder__l0": 135, "encoder__l1": 135, "height": 135, "l0__b": 135, "l0__w": 135, "l1__b": 135, "l1__w": 135, "printabl": 135, "obviou": 135, "foresight": 135, "untidili": 135, "update_ag": 135, "normalize_img": 135, "img": 135, "img_max": 135, "reduce_max": [135, 953], "img_min": 135, "reduce_min": [135, 953], "img_rang": 135, "agent_posit": 135, "agent_veloc": 135, "agent_cam_front_rgb": 135, "agent_cam_front_depth": 135, "agent_cam_rear_rgb": 135, "agent_cam_rear_depth": 135, "agent_cam_lidar": 135, "cleaner": 135, "camera": 135, "front_rgb": 135, "front_depth": 135, "rear_rgb": 135, "rear_depth": 135, "lidar": 135, "rgb": 135, "rear": 135, "veloc": 135, "cam": 135, "cam_max": 135, "cam_min": 135, "cam_rang": 135, "Of": 135, "ideal": 135, "perman": 135, "afterward": 135, "thread": 135, "incorpor": 135, "pretti": 135, "straightforward": 135, "dataload": [135, 147, 953], "_cnt": 135, "img_": 135, "_dataset_s": 135, "_batch_siz": 135, "_count": [135, 136], "__next__": 135, "filenam": 135, "img_fnam": 135, "fname": 135, "loaded_img": 135, "cv2": 135, "imread": 135, "loader": [135, 149], "batch_slic": 135, "model": [135, 136, 953], "mymodel": [135, 953], "linear0": [135, 136, 953], "linear1": [135, 136, 953], "x_in": [135, 136, 137, 953], "001": [135, 136, 646, 648, 651, 867, 868, 871], "loss_fn": [135, 136, 137, 953], "0145": 135, "grad_fn": 135, "addbackward0": 135, "_create_vari": 136, "output_channel": [136, 975, 976, 977, 978, 979, 980, 981, 984, 985], "with_bia": [136, 975, 985], "_input_channel": 136, "_output_channel": 136, "_w_shape": 136, "_b_shape": 136, "_with_bia": 136, "8979": 136, "3198": 136, "0196": 136, "3126": 136, "3717": 136, "9687": 136, "6958": 136, "5122": 136, "3902": 136, "8800": 136, "5613": 136, "1982": 136, "nightmar": 136, "overcom": 136, "fc": 136, "9563": 136, "v0": 136, "v1": 136, "6440": 136, "key0": 136, "1823": 136, "8075": 136, "linear3": 136, "v2": 136, "2346": 136, "counter": 136, "hidden": [136, 684, 694, 975, 984], "fed": [136, 283, 327], "1300": 136, "decoupl": 136, "scheme": 136, "weight_initi": [136, 975, 976, 977, 978, 979, 980, 981, 982, 984, 985], "glorotuniform": [136, 966, 975, 976, 977, 978, 979, 980, 981, 982, 984, 985], "bias_initi": [136, 975, 976, 977, 978, 979, 980, 981, 982, 985], "_w_init": 136, "_b_init": 136, "create_vari": [136, 966], "var_shap": [136, 966], "fan_out": [136, 966], "fan_in": [136, 966], "fan_mod": [136, 966], "fan_sum": 136, "slight": 136, "misnom": 136, "saw": 136, "vanilla": [136, 845, 847], "descent": [136, 646, 658, 660, 991, 996], "lar": [136, 646, 666, 668, 670, 672, 991], "lamb": [136, 646, 666, 668, 991], "compile_on_next_step": [136, 987, 988, 991, 992, 993, 994, 995, 996], "_beta1": 136, "_beta2": 136, "_epsilon": 136, "_mw": 136, "_vw": 136, "_first_pass": 136, "_should_compil": 136, "_step": [136, 991, 995], "new_v": 136, "_lr": 136, "isinst": [136, 137, 572, 640], "_inplac": 136, "_stop_gradi": 136, "set_stat": [136, 991, 992, 993, 994, 995, 996], "pre": [137, 149, 283], "captur": 137, "sparse_funct": 137, "num_class": [137, 872, 873], "num_dim": 137, "new_axi": 137, "_linear": 137, "to_backend": 137, "jax_graph": 137, "learnabl": [137, 867, 868, 871, 989, 990], "to_ivy_modul": [137, 964], "thinli": 137, "whilst": 137, "to_haiku_modul": 137, "hk": 137, "loss_fn_t": 137, "transform": [137, 148, 684, 692, 693], "without_apply_rng": 137, "rng": 137, "prngkei": 137, "init": 137, "update_rul": 137, "01": [137, 333, 529, 532], "tree_multimap": 137, "vision": [147, 953], "robot": [147, 953], "focus": 148, "field": [148, 697, 712, 714, 741, 743, 748, 750, 889, 890, 891, 895], "perfect": 148, "3d": [148, 975, 980, 981], "differenti": 148, "demo": [148, 953], "orient": 148, "pose": 148, "euler": [148, 174], "quaternion": 148, "rotat": 148, "matric": [148, 175, 210, 213, 228, 232, 233, 237, 684, 693, 697, 698, 701, 706, 708, 709, 711, 712, 714, 715, 717, 718, 720, 728, 729, 731, 732, 734, 738, 740, 741, 743, 745, 747, 748, 750, 751, 753, 757, 759], "angl": [148, 333, 365, 368, 405, 408, 541, 544, 563, 567], "ivy_mech": 148, "target_facing_rotation_matrix": 148, "polar_to_cartesian_coord": 148, "ordin": [148, 697, 745, 747], "warp": 148, "optic": 148, "voxel": 148, "ivy_vis": 148, "coords_to_voxel_grid": 148, "render_pixel_coord": 148, "neural": [148, 684, 953, 961, 975], "radianc": 148, "nerf": 148, "trajectori": 148, "motion": 148, "plan": [148, 953], "mobil": 148, "ivy_robot": 148, "sample_spline_path": 148, "rigidmobil": 148, "sample_bodi": 148, "drone": 148, "sample_link": 148, "openai": 148, "swimmer": 148, "cumul": [148, 572, 590, 591], "reward": 148, "supervis": 148, "reinforc": 148, "door": [148, 149], "intersect": 148, "cartpol": 148, "mountain_car": 148, "pendulum": 148, "reacher": 148, "condit": [148, 172, 173, 849, 859, 860, 884, 888], "learnt": 148, "ture": 148, "ntm": 148, "egospher": 148, "spatial": 148, "esm": 148, "ivy_memori": 148, "egocentr": 148, "room": 148, "inspir": 148, "doubt": 149, "grate": 149, "probe": 149, "undergo": 149, "remark": 149, "surpris": 149, "backward": [149, 333, 525, 528, 697, 760, 762, 942, 943, 946, 948, 951], "lock": 149, "contunu": 149, "minor": 149, "xla": 149, "buffer": 149, "gold": 149, "dex": 149, "lax": 149, "scan": 149, "tricki": 149, "predictor": 149, "tight": 149, "driver": 149, "schedul": 149, "dispatch": 149, "Will": 149, "ast": 149, "dynamic": 149, "cond": 149, "jacobian": 149, "checkpoint": 149, "autodiff": 149, "shine": 149, "merci": 149, "superset": 149, "cluster": 149, "compet": 149, "paradigm": 149, "parallelis": [149, 283, 292, 293], "spmd": 149, "mixtur": [149, 646, 648, 651], "expert": 149, "sophist": 149, "depart": 149, "routin": 149, "hundr": 149, "thousand": 149, "deepli": [149, 849, 851], "broadli": 149, "heavili": 149, "supplementari": 149, "Is": 149, "reusabl": 149, "fanci": 149, "fusion": 149, "lose": 149, "vmap": 149, "pmap": 149, "overhead": 149, "ineffici": 149, "eventu": 149, "supplement": 149, "backdoor": 149, "callback": 149, "record": 149, "metric": 149, "somewhat": 149, "outsourc": 149, "inputs_to_ivy_arrai": 150, "gaussian": [160, 161], "leaki": [160, 161, 162], "rectifi": [160, 162, 163], "slope": [160, 162], "39": [160, 162, 333, 356, 359, 422, 425, 646, 648, 651, 697, 735, 737, 909, 910, 913], "85": [160, 162, 333, 393, 396], "48": [160, 162, 333, 545, 548, 646, 648, 651, 697, 735, 737, 909, 910, 913], "88": [160, 162, 333, 393, 396, 697, 735, 737, 909, 910, 913], "269": [160, 164], "731": [160, 164], "214": [160, 164], "978": [160, 164], "891": [160, 164], "422": [160, 165], "155": [160, 165], "0768": [160, 165], "231": [160, 165], "693": [160, 165, 333, 356, 359, 769, 780, 783], "49": [160, 165, 333, 545, 548, 909, 910, 913], "147": [160, 165], "363": [160, 165], "3461": [160, 166, 169], "6491": [160, 166, 169], "535": [160, 166, 169], "hyperbol": [160, 171, 333, 343, 346, 356, 359, 369, 372, 405, 408, 541, 544, 563, 567], "55": [160, 171, 684, 690, 697, 735, 737, 909, 910, 913], "501": [160, 171], "array_method": [166, 167, 179, 180, 185, 186, 193, 194, 199, 200, 210, 211, 215, 216, 223, 224, 228, 230, 233, 235, 241, 243, 255, 256, 334, 335, 339, 340, 343, 344, 347, 348, 352, 353, 356, 357, 361, 362, 365, 366, 369, 370, 373, 374, 377, 378, 381, 382, 385, 386, 389, 390, 393, 394, 397, 398, 401, 402, 405, 406, 409, 410, 414, 415, 418, 419, 422, 423, 426, 427, 430, 431, 434, 435, 438, 439, 442, 443, 446, 447, 450, 451, 454, 455, 458, 459, 462, 463, 466, 467, 470, 471, 474, 475, 478, 479, 482, 483, 486, 487, 490, 491, 494, 495, 498, 499, 504, 505, 509, 510, 513, 514, 517, 518, 521, 522, 525, 526, 529, 530, 533, 534, 537, 538, 541, 542, 545, 546, 549, 550, 553, 555, 558, 560, 563, 565, 568, 569, 573, 574, 601, 602, 648, 649, 698, 699, 703, 704, 706, 707, 709, 710, 712, 713, 715, 716, 718, 719, 721, 722, 725, 726, 729, 730, 732, 733, 735, 736, 738, 739, 741, 742, 745, 746, 748, 749, 751, 752, 754, 755, 757, 758, 760, 761, 763, 764, 766, 767, 770, 771, 775, 776, 780, 781, 786, 787, 791, 792, 795, 796, 799, 800, 803, 804, 807, 808, 811, 812, 815, 816, 819, 820, 825, 826, 829, 830, 833, 834, 837, 838, 841, 842, 868, 869, 891, 893, 899, 900, 904, 905, 910, 911, 914, 915, 918, 919, 922, 923, 926, 927, 930, 931, 934, 935, 938, 939, 943, 944, 948, 949], "container_method": [166, 168, 170, 176, 178, 179, 181, 183, 185, 187, 189, 190, 192, 193, 195, 197, 199, 201, 203, 204, 206, 207, 209, 210, 212, 214, 215, 217, 219, 220, 222, 223, 225, 227, 228, 229, 231, 233, 234, 236, 238, 239, 241, 242, 244, 255, 257, 259, 334, 336, 338, 339, 341, 343, 345, 347, 349, 351, 352, 354, 356, 358, 360, 361, 363, 365, 367, 369, 371, 373, 375, 377, 379, 381, 383, 385, 387, 389, 391, 393, 395, 397, 399, 401, 403, 405, 407, 409, 411, 413, 414, 416, 418, 420, 422, 424, 426, 428, 430, 432, 434, 436, 438, 440, 442, 444, 446, 448, 450, 452, 454, 456, 458, 460, 462, 464, 466, 468, 470, 472, 474, 476, 478, 480, 482, 484, 486, 488, 490, 492, 494, 496, 498, 500, 504, 506, 508, 509, 511, 513, 515, 517, 519, 521, 523, 525, 527, 529, 531, 533, 535, 537, 539, 541, 543, 545, 547, 549, 551, 553, 554, 556, 558, 559, 561, 563, 564, 566, 568, 570, 573, 575, 577, 585, 586, 601, 603, 605, 648, 650, 652, 653, 654, 656, 658, 659, 661, 662, 663, 665, 666, 667, 669, 670, 671, 673, 674, 675, 677, 698, 700, 702, 721, 723, 770, 772, 774, 775, 777, 779, 780, 782, 784, 786, 788, 790, 791, 793, 795, 797, 799, 801, 803, 805, 807, 809, 811, 813, 815, 817, 819, 821, 823, 825, 827, 829, 831, 833, 835, 837, 839, 841, 843, 868, 870, 874, 876, 878, 879, 881, 891, 892, 894, 899, 901, 903, 904, 906, 908, 910, 912, 914, 916, 918, 920, 922, 924, 926, 928, 930, 932, 934, 936, 938, 940, 943, 945, 947, 948, 950, 952], "faster": [172, 173], "invoc": [172, 173], "718281828459045": 174, "newaxi": 174, "alia": 174, "pi": 174, "141592653589793": 174, "mathemat": [174, 333, 347, 350, 365, 368, 426, 429, 504, 507, 697, 763, 765], "half": [175, 176, 177, 872, 874, 875, 878, 880], "chosen": [175, 176, 177, 333, 365, 368, 884, 888], "distanc": [175, 176, 177], "adjac": [175, 176, 177], "creation_funct": [175, 176, 177, 179, 182, 184, 185, 188, 190, 191, 193, 196, 198, 199, 202, 204, 205, 220, 221, 223, 226, 228, 232, 233, 237, 238, 240, 241, 245], "interpret": [175, 179, 182, 215, 218], "uniniti": [175, 184, 185, 188], "elsewher": [175, 190, 191, 884, 888], "row": [175, 190, 191, 697, 745, 747, 748, 750, 872, 873, 884, 887], "column": [175, 190, 191, 697, 712, 714, 741, 743, 745, 747, 748, 750], "__dlpack__": [175, 193, 196, 283, 328], "interchang": [175, 193, 196, 785, 833, 836], "coordin": [175, 210, 213, 333, 365, 368], "cartesian": [175, 210, 213], "ij": [175, 210, 213, 909, 910, 913], "rank": [175, 210, 213, 572, 644, 697, 703, 705, 729, 731, 741, 743, 745, 747, 757, 759, 760, 762, 763, 765, 785, 795, 798, 799, 802, 829, 832, 841, 844, 884, 887, 942, 943, 946, 948, 951], "ni": [175, 210, 213], "xi": [175, 210, 213], "n1": [175, 210, 213], "n2": [175, 210, 213], "n3": [175, 210, 213], "xv": [175, 210, 213], "yv": [175, 210, 213], "triangular": [175, 228, 232, 233, 237, 697, 698, 701, 741, 743], "innermost": [175, 228, 232, 233, 237, 697, 698, 701, 706, 708, 709, 711, 712, 714, 715, 717, 718, 720, 729, 731, 732, 734, 738, 740, 741, 743, 745, 747, 748, 750, 751, 753, 757, 759], "mxn": [175, 228, 232, 233, 237, 697, 709, 711, 729, 731, 732, 734, 738, 740, 741, 743, 751, 753, 757, 759], "defaultdtyp": [246, 247], "defaultfloatdtyp": [246, 248], "float_dtyp": [246, 262, 276], "defaultintdtyp": [246, 249], "dtype_in": [246, 250, 251, 265, 270, 271, 272, 282], "incompat": [246, 254], "occur": [246, 255, 258, 884, 885, 886, 889, 890, 891, 895, 897], "data_type_funct": [246, 255, 258], "floatdtyp": [246, 262], "int_dtyp": [246, 263, 277], "intdtyp": [246, 263], "followng": [246, 266], "occupi": [246, 266, 269, 572, 628, 629], "ep": [246, 266, 697, 729, 731, 738, 740], "smallest_norm": [246, 266], "encapsul": [246, 269], "type1": [246, 273], "type2": [246, 273], "arrays_and_dtyp": [246, 274], "ret1": [246, 278], "ret2": [246, 278], "noinspect": [247, 248, 249, 284, 647], "pyshadowingnam": [247, 248, 249, 284, 647], "defaultdevic": [283, 284], "__enter__": 283, "_dev": 283, "devcloneditem": [283, 305], "multidevitem": [283, 285, 288], "devclonedit": 283, "multidevit": [283, 286, 289, 292, 293, 297], "devclonednest": 283, "multidevnest": [283, 287, 290], "devdistitem": 283, "devdistit": 283, "devdistnest": 283, "devmanag": [283, 291], "dev_mapp": 283, "da_dim_s": 283, "safety_factor": 283, "min_dev_dim_s": 283, "max_dev_dim_step_ratio": 283, "min_unit_dev_tune_step": 283, "min_sf_tune_step": 283, "starting_split_factor": 283, "max_split_factor_step_s": 283, "tune_dev_alloc": 283, "tune_dev_split": 283, "mapper": [283, 292, 293], "receivess": 283, "ratio": [283, 646, 666, 668, 991, 993], "safe": [283, 292], "oom": 283, "tune": 283, "da_tune_step": 283, "ds_tune_step": 283, "to_clon": 283, "to_distribut": 283, "multidevic": [283, 292], "parallel": [283, 292, 293], "mutlidevic": [283, 292], "repeated_config_check": 283, "tune_step": 283, "devmapp": [283, 293], "ret_fn": [283, 292, 293], "queue_class": [283, 292, 293], "worker_class": [283, 292, 293], "worker": [283, 292, 293], "used_dev": [283, 292], "sf": [283, 292], "devmappermultiproc": 283, "multidev": [283, 294, 295, 296, 315], "profil": 283, "save_dir": [283, 298], "deviceic": [283, 304], "spread": [283, 315], "139740789224448": [283, 317], "physic": [283, 319], "x3": [283, 321], "x4": [283, 321], "process_specif": [283, 322, 332], "percentag": [283, 322], "ram": [283, 322, 329, 332], "attr_onli": [283, 323], "chunk": [283, 325, 326, 327], "max_chunk_s": [283, 327], "chunk_siz": [283, 327], "input_ax": [283, 327], "output_ax": [283, 327], "feed": [283, 327], "fist": [283, 327], "stream": [283, 328], "caveat": [283, 328], "portabl": [283, 328, 953], "gb": [283, 329, 332], "reset": [283, 331], "magnitud": [333, 334, 337, 347, 350, 504, 507, 697, 748, 750, 751, 753], "princip": [333, 339, 342, 352, 355, 361, 364], "cosin": [333, 339, 342, 343, 346, 401, 404, 405, 408], "x1_i": [333, 347, 350, 365, 368, 373, 376, 381, 384, 385, 388, 389, 392, 393, 396, 409, 412, 414, 417, 434, 437, 438, 441, 442, 445, 458, 461, 462, 465, 482, 485, 486, 489, 494, 497, 498, 501, 504, 507, 513, 516, 521, 524, 525, 528, 553, 557], "x2_i": [333, 347, 350, 365, 368, 373, 376, 381, 384, 385, 388, 389, 392, 393, 396, 409, 412, 414, 417, 434, 437, 438, 441, 442, 445, 458, 461, 462, 465, 482, 485, 486, 489, 494, 497, 498, 501, 504, 507, 513, 516, 521, 524, 525, 528, 553, 557], "finit": [333, 347, 350, 365, 368, 446, 449, 504, 507, 521, 524, 525, 528], "nor": [333, 347, 350, 504, 507, 646, 683], "nearest": [333, 347, 350, 504, 507, 529, 532], "2019": [333, 347, 350, 426, 429, 504, 507], "commut": [333, 347, 350], "sine": [333, 352, 355, 356, 359, 537, 540, 541, 544], "57": [333, 352, 355, 356, 359, 393, 396, 405, 408], "524": [333, 352, 355], "644": [333, 352, 355], "201": [333, 352, 355, 529, 532], "305": [333, 352, 355], "412": [333, 352, 355], "44": [333, 356, 359, 529, 532, 545, 548, 549, 552, 697, 735, 737, 884, 888, 909, 910, 913], "809": [333, 356, 359], "569": [333, 356, 359], "733": [333, 356, 359], "68": [333, 356, 359], "99": [333, 356, 359, 909, 910, 913], "quotient": [333, 365, 368], "notat": [333, 365, 368, 909, 910, 913], "denot": [333, 365, 368, 646, 683], "quadrant": [333, 365, 368], "3\u03c0": [333, 365, 368], "549": [333, 369, 372], "bitwis": [333, 373, 376, 385, 388, 393, 396, 498, 501], "AND": [333, 373, 376, 486, 489, 942, 943, 946], "binari": [333, 373, 376, 385, 388, 393, 396, 498, 501, 769, 770, 773], "invert": [333, 377, 380], "arithmet": [333, 389, 392, 909, 918, 921], "propag": [333, 389, 392, 909, 914, 917, 918, 921, 922, 925, 930, 933, 934, 937, 938, 941], "thu": [333, 389, 392, 521, 524, 525, 528, 697, 712, 714], "lh": [333, 389, 392], "rh": [333, 389, 392], "xor": [333, 393, 396, 498, 501], "78": [333, 393, 396, 697, 735, 737, 909, 910, 913], "91": [333, 393, 396, 697, 735, 737, 909, 910, 913], "23": [333, 393, 396, 684, 690, 697, 709, 711, 884, 888], "66": [333, 393, 396, 697, 735, 737, 909, 910, 913], "77": [333, 393, 396, 697, 735, 737, 909, 910, 913], "79": [333, 393, 396], "98": [333, 393, 396, 697, 735, 737, 884, 888, 909, 910, 913], "26": [333, 393, 396, 646, 648, 651, 684, 691, 697, 709, 711, 735, 737, 754, 756, 909, 910, 913], "34": [333, 393, 396, 545, 548], "24": [333, 393, 396, 545, 548, 572, 590, 646, 648, 651, 697, 709, 711, 735, 737, 909, 910, 913], "51": [333, 393, 396], "27": [333, 393, 396, 405, 408, 545, 548, 684, 696, 697, 735, 737, 909, 910, 913], "74": [333, 393, 396], "59": [333, 393, 396], "416": [333, 401, 404], "122": [333, 405, 408], "368": [333, 405, 408], "670": [333, 405, 408], "202": [333, 405, 408, 529, 532], "548": [333, 405, 408], "1490": [333, 405, 408], "dividend": [333, 409, 412, 525, 528], "divisor": [333, 409, 412, 525, 528, 646, 648, 651, 653, 655, 666, 668, 909, 930, 933, 938, 941, 991, 992, 993], "gauss": [333, 418, 421], "exponenti": [333, 418, 421, 422, 425, 482, 485, 521, 524], "logarithm": [333, 422, 425, 466, 469, 470, 473, 474, 477, 478, 481, 482, 485, 697, 744], "72": [333, 422, 425, 646, 648, 651, 697, 735, 737, 909, 910, 913], "fdlibm": [333, 426, 429], "compliant": [333, 426, 429, 490, 493, 494, 497, 909, 914, 917, 918, 921, 922, 925], "greatest": [333, 430, 433, 434, 437], "out_i": [333, 446, 449, 450, 453, 454, 457], "threshold": [333, 502, 503], "y_i": [333, 509, 512], "expon": [333, 521, 524, 572, 637], "versu": [333, 521, 524], "odd": [333, 521, 524], "modulu": [333, 525, 528], "primarili": [333, 525, 528], "5654": [333, 529, 532], "034": [333, 529, 532], "433": [333, 529, 532], "343": [333, 529, 532], "30": [333, 529, 532, 697, 735, 737, 909, 910, 913, 966, 972], "81": [333, 529, 532, 549, 552, 909, 910, 913], "527": [333, 529, 532], "301": [333, 529, 532], "indistinguish": [333, 545, 548], "infinit": [333, 545, 548], "83": [333, 545, 548], "32455532": [333, 545, 548], "89897949": [333, 545, 548], "50": [333, 545, 548, 697, 735, 737, 884, 887, 909, 910, 913], "31": [333, 545, 548], "169": [333, 545, 548], "47": [333, 545, 548], "93": [333, 545, 548], "35": [333, 545, 548, 684, 696, 697, 703, 705, 884, 888, 909, 910, 913], "09": [333, 549, 552, 684, 696], "546": [333, 558, 562], "842": [333, 558, 562], "916": [333, 558, 562, 769, 770, 773], "996": [333, 558, 562], "328": [333, 558, 562], "real": [333, 563, 567], "462": [333, 563, 567], "604": [333, 563, 567], "984": [333, 563, 567], "997": [333, 563, 567, 867, 868, 871], "decim": [333, 568, 571], "inspect": [572, 578, 957, 958], "downscal": [572, 584, 585, 587], "60": [572, 590, 697, 735, 737, 909, 910, 913], "default_v": [572, 593], "catch_except": [572, 593], "rev": [572, 593], "with_cal": [572, 593], "arrang": [572, 594], "mod": [572, 598], "max_freq": [572, 599], "num_band": [572, 599], "pad": [572, 599, 684, 685, 686, 687, 688, 689, 690, 691, 785, 795, 798, 841, 844, 975, 976, 977, 978, 979, 980, 981, 982], "fourier": [572, 599], "band": [572, 599], "linearli": [572, 599, 697, 745, 747], "oppos": [572, 599], "geometr": [572, 599], "seen_set": [572, 610], "local_set": [572, 610], "decrement": [572, 614], "is_arrai": 572, "allow_dupl": [572, 622], "forkserv": [572, 623], "spawn": [572, 623], "hot": [572, 625], "scatter": [572, 625, 628, 629], "tmp_dr": [572, 633], "temporari": [572, 633], "min_denomin": [572, 636], "stabil": [572, 636, 637, 898, 899, 902, 904, 907], "_min_denomin": [572, 636], "min_bas": [572, 637], "_min_bas": [572, 637, 867, 868, 871, 989, 990], "100000023841858": [572, 640], "200000047683716": [572, 640], "299999952316284": [572, 640], "400000095367432": [572, 640], "599999904632568": [572, 640], "101": [572, 641], "gradienttrack": [646, 647], "delta": [646, 648, 651], "cost": [646, 648, 651, 653, 655, 658, 660, 666, 668, 670, 672, 674, 676, 845, 846, 847, 848], "ws": [646, 648, 651, 653, 655, 658, 660, 666, 668, 670, 672, 674, 676], "en": [646, 648, 651, 653, 655], "wikipedia": [646, 648, 651, 653, 655], "wiki": [646, 648, 651, 653, 655], "stochastic_gradient_desc": [646, 648, 651, 653, 655], "dc": [646, 648, 651, 653, 655, 658, 660, 666, 668, 670, 672, 674, 676], "dw": [646, 648, 651, 653, 655, 658, 660, 666, 668, 670, 672, 674, 676], "averag": [646, 648, 651, 653, 655, 666, 668, 845, 846, 847], "forget": [646, 648, 651, 653, 655, 666, 668, 991, 992, 993], "004": [646, 648, 651], "009": [646, 648, 651], "86": [646, 648, 651], "28": [646, 648, 651, 684, 687, 690, 691, 697, 735, 737, 909, 910, 913], "0125": [646, 648, 651], "601": [646, 648, 651], "581": [646, 648, 651], "025": [646, 648, 651], "992": [646, 648, 651], "209": [646, 648, 651, 889, 890], "271": [646, 648, 651], "0717": [646, 648, 651], "142": [646, 648, 651], "182": [646, 648, 651], "624": [646, 648, 651, 872, 878, 880], "744": [646, 648, 651], "626": [646, 648, 651], "65": [646, 648, 651, 697, 735, 737, 909, 910, 913], "024": [646, 648, 651], "096": [646, 648, 651], "216": [646, 648, 651], "384": [646, 648, 651], "rate": [646, 653, 655, 658, 660, 666, 668, 670, 672, 674, 676, 845, 846, 847, 848, 975, 986, 991, 992, 993, 994, 995, 996], "ws_new": [646, 653, 655, 658, 660, 666, 668, 670, 672, 674, 676], "retain": [646, 657], "trust": [646, 666, 668, 991, 993], "decai": [646, 666, 668, 670, 672, 991, 993, 994], "layerwis": [646, 670, 672, 991, 994], "with_grads_stack": [646, 683], "stride": [684, 685, 686, 687, 688, 689, 690, 691, 975, 976, 977, 978, 979, 980, 981, 982], "data_format": [684, 685, 686, 687, 688, 689, 690, 691, 975, 976, 977, 978, 979, 980, 981, 982], "nwc": [684, 685, 686, 975, 976, 977], "dilat": [684, 685, 686, 687, 688, 689, 690, 691, 975, 976, 977, 978, 979, 980, 981, 982], "convolut": [684, 685, 686, 687, 688, 689, 690, 691, 975, 976, 977, 978, 979, 980, 981, 982], "d_in": [684, 685, 686, 687, 688, 689, 690], "d_out": [684, 685, 686, 687, 688, 689, 690], "slide": [684, 685, 686, 687, 688, 689, 690, 691, 975, 976, 977, 978, 979, 980, 981, 982], "ncw": [684, 685, 686, 975, 976, 977], "wio": [684, 685], "output_shap": [684, 686, 688, 690, 975, 977, 979, 981], "nhwc": [684, 687, 688, 691, 975, 978, 979, 982], "fh": [684, 687, 688, 689, 690, 691], "nchw": [684, 687, 688, 691, 975, 978, 979, 982], "hwio": [684, 687], "unequ": [684, 687], "unsqueez": [684, 687, 691], "ndhwc": [684, 689, 690, 975, 980, 981], "volum": [684, 689], "fd": [684, 689, 690], "ncdhw": [684, 689, 690, 975, 980, 981], "dhwio": [684, 689], "256": [684, 690], "258": [684, 690], "128": [684, 690, 697, 735, 737], "depthwis": [684, 691, 975, 982], "333": [684, 691], "inp": [684, 691], "prob": [684, 692, 872, 873, 975, 983], "randomli": [684, 692, 975, 983], "bernoulli": [684, 692], "out_featur": [684, 692, 693], "incom": [684, 693], "outer_batch_shap": [684, 693], "inner_batch_shap": [684, 693], "in_featur": [684, 693], "cell": [684, 694, 975, 984], "num_queri": [684, 695, 696], "x_feat_dim": [684, 695], "num_kei": [684, 695, 696], "cont_feat_dim": [684, 695], "numhead": [684, 695], "feat_dim": [684, 695, 696], "out_feat_dim": [684, 695], "score": [684, 696], "04": [684, 696], "03": [684, 696, 867, 868, 871], "decomposit": [697, 698, 701, 741, 743, 748, 750], "symmetr": [697, 698, 701, 712, 714, 715, 717, 766, 768], "u": [697, 698, 701, 748, 750], "vif": [697, 703, 705], "92": [697, 706, 708], "293": [697, 706, 708], "46997": [697, 706, 708], "eigendecomposit": [697, 712, 714], "qlq\u1d40": [697, 712, 714], "orthogon": [697, 712, 714], "eig": [697, 712, 714], "eigenvalu": [697, 712, 714, 715, 717], "eigenvector": [697, 712, 714], "prepend": [697, 721, 724], "singular": [697, 729, 731, 738, 740, 748, 750, 751, 753], "toler": [697, 729, 731, 738, 740], "largest_singular_valu": [697, 729, 731, 738, 740], "array_lik": [697, 735, 737], "36": [697, 735, 737, 909, 910, 913], "84": [697, 735, 737, 909, 910, 913], "105": [697, 735, 737, 769, 770, 773], "112": [697, 735, 737, 909, 910, 913], "104": [697, 735, 737, 909, 910, 913], "120": [697, 735, 737], "moor": [697, 738, 740], "penros": [697, 738, 740], "pseudo": [697, 738, 740], "orthonorm": [697, 741, 743, 748, 750], "2d": [697, 744, 975, 978, 979, 982], "logdet": [697, 744], "coeffici": [697, 745, 747], "usvh": [697, 748, 750], "vh": [697, 748, 750], "hermitian": [697, 748, 750], "et": [697, 748, 750], "cetera": [697, 748, 750], "adjoint": [697, 748, 750], "reconstruct": [697, 748, 750, 889, 890, 896], "reconstructed_x": [697, 748, 750], "contract": [697, 754, 756, 909, 910, 913], "doubl": [697, 754, 756], "singleton": [697, 763, 765, 785, 825, 828, 884, 886, 909, 914, 917, 918, 921, 922, 925, 926, 929, 930, 933, 934, 937, 938, 941, 942, 943, 946, 948, 951], "manhattan": [697, 763, 765], "l2": [697, 763, 765], "euclidean": [697, 763, 765], "mathbf": [697, 766, 768], "mathbb": [697, 766, 768], "skew": [697, 766, 768], "entropi": [769, 770, 773, 775, 778, 780, 783], "predict": [769, 770, 773, 775, 778, 780, 783], "smooth": [769, 770, 773, 775, 778, 780, 783], "223": [769, 770, 773], "357": [769, 770, 773, 780, 783], "511": [769, 770, 773], "discret": [769, 775, 778], "3862944": [769, 775, 778], "35667497": [769, 775, 778], "spars": [769, 780, 783], "logit": [769, 780, 783], "793291": [769, 780, 783], "512926": [769, 780, 783], "before_1": [785, 795, 798, 841, 844], "after_1": [785, 795, 798, 841, 844], "before_n": [785, 795, 798, 841, 844], "after_n": [785, 795, 798, 841, 844], "manipulation_funct": [785, 799, 802], "reorder": [785, 803, 806], "permut": [785, 807, 810, 833, 836], "repetit": [785, 811, 814, 837, 840], "restor": [785, 819, 822], "famili": [785, 829, 832], "intxx": [785, 829, 832], "floatxx": [785, 829, 832], "fomaml_step": 845, "inner_cost_fn": [845, 846, 847], "outer_cost_fn": [845, 846, 847], "inner_grad_step": [845, 846, 847, 848], "inner_learning_r": [845, 846, 847, 848], "inner_optimization_step": [845, 846, 847, 848], "inner_batch_fn": [845, 846, 847], "outer_batch_fn": [845, 846, 847], "average_across_step": [845, 846, 847], "inner_v": [845, 846, 847], "keep_inner_v": [845, 846, 847], "outer_v": [845, 846, 847], "keep_outer_v": [845, 846, 847], "return_inner_v": [845, 846, 847, 848], "num_task": [845, 846, 847, 848], "maml": [845, 846, 847], "recev": [845, 846, 847], "0x7fb633a564c0": [845, 846, 847, 848], "maml_step": 845, "rece": [845, 847], "reptile_step": 845, "cost_fn": [845, 848], "reptil": [845, 848], "receivng": [845, 848], "all_nested_indic": 849, "include_nest": [849, 850], "_index": [849, 850, 860], "_base": [849, 850, 859, 860], "copy_nest": 849, "to_mut": [849, 851, 861], "mutabl": [849, 851, 861], "insert_into_nest_at_index": 849, "insert_into_nest_at_indic": 849, "map_nest_at_index": 849, "map_nest_at_indic": 849, "multi_index_nest": 849, "nested_ani": 849, "check_nest": [849, 859, 860], "conditon": [849, 859, 860], "nested_indices_wher": 849, "stop_after_n_found": [849, 860], "_depth": [849, 861], "_tuple_check_fn": [849, 861], "_list_check_fn": [849, 861], "_dict_check_fn": [849, 861], "nested_multi_map": 849, "nest0": [849, 862], "ivy_arrai": [849, 862], "funciton": [849, 862], "prune_nest_at_index": 849, "prune_nest_at_indic": 849, "set_nest_at_index": 849, "set_nest_at_indic": 849, "mini": [867, 868, 871, 989, 990], "gamma": [867, 868, 871], "beta": [867, 868, 871], "0976": [867, 868, 871], "3452": [867, 868, 871], "2740": [867, 868, 871], "1047": [867, 868, 871], "5886": [867, 868, 871], "2732": [867, 868, 871], "7696": [867, 868, 871], "7024": [867, 868, 871], "2518": [867, 868, 871], "58": [867, 868, 871, 889, 890], "283": [867, 868, 871], "585": [867, 868, 871], "909": [867, 868, 871], "628": [867, 868, 871], "225": [867, 868, 871], "425": [867, 868, 871], "norm_idx": [867, 868, 871], "228": [867, 868, 871], "0285": [867, 868, 871], "204": [867, 868, 871], "population_s": [872, 873], "num_sampl": [872, 873], "home": [872, 873, 877], "uniformli": [872, 874, 875, 878, 880], "highest": [872, 874, 875], "parameter": [872, 877, 878, 880], "6444774682897879": [872, 877], "811": [872, 877], "508": [872, 877], "564": [872, 877], "7268672": [872, 877], "968": [872, 877], "175": [872, 877, 889, 890], "064": [872, 877], "40935726": [872, 877], "556": [872, 877], "26431865": [872, 878, 880], "475": [872, 878, 880], "878": [872, 878, 880], "861": [872, 878, 880], "89150229": [872, 878, 880], "89629126": [872, 878, 880], "94198485": [872, 878, 880], "91405606": [872, 878, 880], "72848724": [872, 878, 880], "7550739": [872, 878, 880], "00109": [872, 878, 880], "occurr": [884, 885, 886, 889, 890], "43": [884, 888], "x_j": [889, 890, 891, 895, 897], "impli": [889, 890, 891, 895, 897], "inverse_indic": [889, 890, 896], "aggreg": [889, 890], "fourth": [889, 890], "607": [889, 890], "735": [889, 890], "667": [889, 890], "381": [889, 890], "857": [889, 890], "0396": [889, 890], "166": [889, 890], "828": [889, 890], "144": [889, 890], "40501155": [889, 890], "77361575": [889, 890], "97776199": [889, 890], "36831157": [889, 890], "89148434": [889, 890], "9512272": [889, 890], "67542176": [889, 890], "41985657": [889, 890], "23478023": [889, 890], "1141": [889, 890], "8101": [889, 890], "9298": [889, 890], "8460": [889, 890], "2119": [889, 890], "3519": [889, 890], "6252": [889, 890], "4033": [889, 890], "7443": [889, 890], "2577": [889, 890], "3707": [889, 890], "0545": [889, 890], "3238": [889, 890], "5944": [889, 890], "0775": [889, 890], "4327": [889, 890], "176": [889, 890], "889": [889, 890], "763": [889, 890], "071": [889, 890], "262": [889, 890], "456": [889, 890], "114": [889, 890], "349": [889, 890], "615": [889, 890], "594": [889, 890], "335": [889, 890], "212": [889, 890], "457": [889, 890], "827": [889, 890], "set_funct": [889, 891, 895], "ascend": [898, 899, 902], "einstein": [909, 910, 913], "summat": [909, 910, 913], "seq": [909, 910, 913], "jk": [909, 910, 913], "ik": [909, 910, 913], "126": [909, 910, 913], "510": [909, 910, 913], "108": [909, 910, 913], "117": [909, 910, 913], "sentinel": [909, 914, 917, 922, 925], "unsign": [909, 926, 929, 934, 937], "degre": [909, 930, 933, 938, 941], "bessel": [909, 930, 933, 938, 941], "8164966": [909, 930, 933], "varianc": [909, 938, 941], "unbias": [909, 938, 941], "simplicit": [942, 943, 946], "grow": 953, "ai": 953, "got": 953, "colab": 953, "sharp": 953, "weekli": 953, "immedi": 953, "favorit": 953, "jax_concat": 953, "tf_concat": 953, "np_concat": 953, "mx_concat": 953, "torch_concat": 953, "prompt": 953, "get_devic": 953, "reduce_prod": 953, "gradient_imag": 953, "linalg": 953, "bilinear_resampl": 953, "stack_imag": 953, "neural_net": 953, "ecosystem": [953, 959], "popular": [953, 959], "acceler": 953, "articl": 953, "lenton2021ivi": 953, "inter": 953, "lenton": 953, "daniel": 953, "pardo": 953, "fabio": 953, "falck": 953, "fabian": 953, "jame": 953, "stephen": 953, "clark": 953, "ronald": 953, "journal": 953, "arxiv": 953, "preprint": 953, "2102": 953, "02886": 953, "2021": 953, "add_array_spec": 956, "fn_array_spec": 956, "geglu": 961, "native_modul": [964, 965], "native_module_class": [964, 965], "firstlayersiren": 966, "kaimingnorm": [966, 970], "negative_slop": 966, "Ones": 966, "siren": 966, "w0": [966, 972], "filter_s": [975, 976, 977], "1d": [975, 976, 977], "conv1dtranspos": 975, "filter_shap": [975, 978, 979, 980, 981, 982], "conv2dtranspos": 975, "conv3dtranspos": 975, "depthwiseconv2d": 975, "num_channel": [975, 982], "bernoul": [975, 983], "num_lay": [975, 984], "return_sequ": [975, 984], "return_st": [975, 984], "get_initial_st": [975, 984], "dens": [975, 985], "multiheadattent": 975, "query_dim": [975, 986], "head_dim": [975, 986], "dropout_r": [975, 986], "context_dim": [975, 986], "with_to_q_fn": [975, 986], "with_to_kv_fn": [975, 986], "with_to_out_fn": [975, 986], "build_mod": [975, 986, 987, 988], "on_init": [975, 986, 987, 988], "__call__": [975, 986, 987, 988], "store_var": [987, 988], "arg_stateful_idx": [987, 988], "kwarg_stateful_idx": [987, 988], "fallback_to_non_compil": [987, 988, 991, 995], "with_partial_v": [987, 988], "initialz": [987, 988], "from_cal": [987, 988], "check_submod_ret": [987, 988], "get_mod_kei": [987, 988], "top_mod": [987, 988], "mod_depth": [987, 988], "mod_height": [987, 988], "mod_with_top_mod_key_chain": [987, 988], "save_weight": [987, 988], "weights_path": [987, 988], "show_mod_in_top_mod": [987, 988], "upper_depth": [987, 988], "lower_depth": [987, 988], "show_structur": [987, 988], "show_v_in_top_v": [987, 988], "sub_mod": [987, 988], "show_v": [987, 988], "track_submod_call_ord": [987, 988], "track_submod_ret": [987, 988], "v_with_top_v_key_chain": [987, 988], "layernorm": 989, "normalized_shap": [989, 990], "elementwise_affin": [989, 990], "trail": [989, 990], "affin": [989, 990], "0001": [991, 992, 993], "init_on_first_step": [991, 995], "ignore_miss": [991, 995], "overriden": [991, 995], "sgd": 991, "stochast": [991, 996], "sub_modul": [997, 998]}, "objects": {"ivy": [[23, 0, 0, "-", "Array"], [69, 0, 0, "-", "Container"], [0, 0, 0, "-", "backend_handler"], [150, 0, 0, "-", "func_wrapper"], [956, 0, 0, "-", "inspection"], [960, 0, 0, "-", "stateful"], [1000, 0, 0, "-", "verbosity"]], "ivy.Array": [[23, 1, 1, "", "__delattr__"], [23, 1, 1, "", "__format__"], [23, 1, 1, "", "__getattribute__"], [23, 1, 1, "", "__init_subclass__"], [23, 1, 1, "", "__new__"], [23, 1, 1, "", "__reduce__"], [23, 1, 1, "", "__reduce_ex__"], [23, 1, 1, "", "__setattr__"], [23, 1, 1, "", "__sizeof__"], [23, 1, 1, "", "__str__"], [23, 1, 1, "", "__subclasshook__"]], "ivy.Container": [[69, 1, 1, "", "__delattr__"], [69, 1, 1, "", "__delitem__"], [69, 1, 1, "", "__format__"], [69, 1, 1, "", "__getattribute__"], [69, 1, 1, "", "__init_subclass__"], [69, 1, 1, "", "__iter__"], [69, 1, 1, "", "__len__"], [69, 1, 1, "", "__new__"], [69, 1, 1, "", "__reduce__"], [69, 1, 1, "", "__reduce_ex__"], [69, 1, 1, "", "__reversed__"], [69, 1, 1, "", "__sizeof__"], [69, 1, 1, "", "__str__"], [69, 1, 1, "", "__subclasshook__"], [69, 1, 1, "", "clear"], [69, 1, 1, "", "fromkeys"], [69, 1, 1, "", "get"], [69, 1, 1, "", "items"], [69, 1, 1, "", "keys"], [69, 1, 1, "", "pop"], [69, 1, 1, "", "popitem"], [69, 1, 1, "", "setdefault"], [69, 1, 1, "", "update"], [69, 1, 1, "", "values"]], "ivy.array": [[24, 0, 0, "-", "activations"], [26, 0, 0, "-", "conversions"], [31, 0, 0, "-", "creation"], [33, 0, 0, "-", "data_type"], [35, 0, 0, "-", "device"], [37, 0, 0, "-", "elementwise"], [39, 0, 0, "-", "general"], [41, 0, 0, "-", "gradients"], [43, 0, 0, "-", "image"], [45, 0, 0, "-", "layers"], [47, 0, 0, "-", "linear_algebra"], [49, 0, 0, "-", "losses"], [51, 0, 0, "-", "manipulation"], [53, 0, 0, "-", "norms"], [55, 0, 0, "-", "random"], [57, 0, 0, "-", "searching"], [59, 0, 0, "-", "set"], [61, 0, 0, "-", "sorting"], [63, 0, 0, "-", "statistical"], [65, 0, 0, "-", "utility"], [67, 0, 0, "-", "wrapping"]], "ivy.array.activations": [[25, 2, 1, "", "ArrayWithActivations"]], "ivy.array.activations.ArrayWithActivations": [[25, 3, 1, "", "softplus"]], "ivy.array.array_methods": [[335, 1, 1, "", "abs"], [340, 1, 1, "", "acos"], [344, 1, 1, "", "acosh"], [649, 1, 1, "", "adam_step"], [348, 1, 1, "", "add"], [944, 1, 1, "", "all"], [574, 1, 1, "", "all_equal"], [949, 1, 1, "", "any"], [900, 1, 1, "", "argsort"], [180, 1, 1, "", "asarray"], [353, 1, 1, "", "asin"], [357, 1, 1, "", "asinh"], [362, 1, 1, "", "atan"], [366, 1, 1, "", "atan2"], [370, 1, 1, "", "atanh"], [771, 1, 1, "", "binary_cross_entropy"], [374, 1, 1, "", "bitwise_and"], [378, 1, 1, "", "bitwise_invert"], [382, 1, 1, "", "bitwise_left_shift"], [386, 1, 1, "", "bitwise_or"], [390, 1, 1, "", "bitwise_right_shift"], [394, 1, 1, "", "bitwise_xor"], [256, 1, 1, "", "can_cast"], [398, 1, 1, "", "ceil"], [699, 1, 1, "", "cholesky"], [787, 1, 1, "", "clip"], [792, 1, 1, "", "concat"], [796, 1, 1, "", "constant_pad"], [402, 1, 1, "", "cos"], [406, 1, 1, "", "cosh"], [704, 1, 1, "", "cross"], [776, 1, 1, "", "cross_entropy"], [707, 1, 1, "", "det"], [710, 1, 1, "", "diagonal"], [410, 1, 1, "", "divide"], [713, 1, 1, "", "eigh"], [716, 1, 1, "", "eigvalsh"], [911, 1, 1, "", "einsum"], [186, 1, 1, "", "empty_like"], [415, 1, 1, "", "equal"], [419, 1, 1, "", "erf"], [423, 1, 1, "", "exp"], [800, 1, 1, "", "expand_dims"], [427, 1, 1, "", "expm1"], [804, 1, 1, "", "flip"], [431, 1, 1, "", "floor"], [435, 1, 1, "", "floor_divide"], [194, 1, 1, "", "from_dlpack"], [200, 1, 1, "", "full_like"], [602, 1, 1, "", "gather_nd"], [439, 1, 1, "", "greater"], [443, 1, 1, "", "greater_equal"], [719, 1, 1, "", "inv"], [447, 1, 1, "", "isfinite"], [451, 1, 1, "", "isinf"], [455, 1, 1, "", "isnan"], [869, 1, 1, "", "layer_norm"], [459, 1, 1, "", "less"], [463, 1, 1, "", "less_equal"], [467, 1, 1, "", "log"], [471, 1, 1, "", "log10"], [475, 1, 1, "", "log1p"], [479, 1, 1, "", "log2"], [483, 1, 1, "", "logaddexp"], [487, 1, 1, "", "logical_and"], [491, 1, 1, "", "logical_not"], [495, 1, 1, "", "logical_or"], [499, 1, 1, "", "logical_xor"], [722, 1, 1, "", "matmul"], [726, 1, 1, "", "matrix_norm"], [730, 1, 1, "", "matrix_rank"], [733, 1, 1, "", "matrix_transpose"], [915, 1, 1, "", "max"], [919, 1, 1, "", "mean"], [211, 1, 1, "", "meshgrid"], [923, 1, 1, "", "min"], [505, 1, 1, "", "multiply"], [216, 1, 1, "", "native_array"], [510, 1, 1, "", "negative"], [514, 1, 1, "", "not_equal"], [224, 1, 1, "", "ones_like"], [736, 1, 1, "", "outer"], [808, 1, 1, "", "permute_dims"], [739, 1, 1, "", "pinv"], [518, 1, 1, "", "positive"], [522, 1, 1, "", "pow"], [927, 1, 1, "", "prod"], [742, 1, 1, "", "qr"], [526, 1, 1, "", "remainder"], [812, 1, 1, "", "repeat"], [816, 1, 1, "", "reshape"], [820, 1, 1, "", "roll"], [530, 1, 1, "", "round"], [534, 1, 1, "", "sign"], [538, 1, 1, "", "sin"], [542, 1, 1, "", "sinh"], [167, 1, 1, "", "softplus"], [746, 1, 1, "", "solve"], [905, 1, 1, "", "sort"], [781, 1, 1, "", "sparse_cross_entropy"], [546, 1, 1, "", "sqrt"], [550, 1, 1, "", "square"], [826, 1, 1, "", "squeeze"], [830, 1, 1, "", "stack"], [931, 1, 1, "", "std"], [555, 1, 1, "", "subtract"], [935, 1, 1, "", "sum"], [749, 1, 1, "", "svd"], [752, 1, 1, "", "svdvals"], [834, 1, 1, "", "swapaxes"], [560, 1, 1, "", "tan"], [565, 1, 1, "", "tanh"], [755, 1, 1, "", "tensordot"], [838, 1, 1, "", "tile"], [758, 1, 1, "", "trace"], [230, 1, 1, "", "tril"], [235, 1, 1, "", "triu"], [569, 1, 1, "", "trunc"], [893, 1, 1, "", "unique_counts"], [939, 1, 1, "", "var"], [761, 1, 1, "", "vecdot"], [764, 1, 1, "", "vector_norm"], [767, 1, 1, "", "vector_to_skew_symmetric_matrix"], [842, 1, 1, "", "zero_pad"], [243, 1, 1, "", "zeros_like"]], "ivy.array.conversions": [[27, 1, 1, "", "args_to_ivy"], [28, 1, 1, "", "args_to_native"], [29, 1, 1, "", "to_ivy"], [30, 1, 1, "", "to_native"]], "ivy.array.creation": [[32, 2, 1, "", "ArrayWithCreation"]], "ivy.array.creation.ArrayWithCreation": [[32, 3, 1, "", "asarray"], [32, 3, 1, "", "empty_like"], [32, 3, 1, "", "from_dlpack"], [32, 3, 1, "", "full_like"], [32, 3, 1, "", "meshgrid"], [32, 3, 1, "", "native_array"], [32, 3, 1, "", "ones_like"], [32, 3, 1, "", "tril"], [32, 3, 1, "", "triu"], [32, 3, 1, "", "zeros_like"]], "ivy.array.data_type": [[34, 2, 1, "", "ArrayWithDataTypes"]], "ivy.array.data_type.ArrayWithDataTypes": [[34, 3, 1, "", "can_cast"]], "ivy.array.device": [[36, 2, 1, "", "ArrayWithDevice"]], "ivy.array.elementwise": [[38, 2, 1, "", "ArrayWithElementwise"]], "ivy.array.elementwise.ArrayWithElementwise": [[38, 3, 1, "", "abs"], [38, 3, 1, "", "acos"], [38, 3, 1, "", "acosh"], [38, 3, 1, "", "add"], [38, 3, 1, "", "asin"], [38, 3, 1, "", "asinh"], [38, 3, 1, "", "atan"], [38, 3, 1, "", "atan2"], [38, 3, 1, "", "atanh"], [38, 3, 1, "", "bitwise_and"], [38, 3, 1, "", "bitwise_invert"], [38, 3, 1, "", "bitwise_left_shift"], [38, 3, 1, "", "bitwise_or"], [38, 3, 1, "", "bitwise_right_shift"], [38, 3, 1, "", "bitwise_xor"], [38, 3, 1, "", "ceil"], [38, 3, 1, "", "cos"], [38, 3, 1, "", "cosh"], [38, 3, 1, "", "divide"], [38, 3, 1, "", "equal"], [38, 3, 1, "", "erf"], [38, 3, 1, "", "exp"], [38, 3, 1, "", "expm1"], [38, 3, 1, "", "floor"], [38, 3, 1, "", "floor_divide"], [38, 3, 1, "", "greater"], [38, 3, 1, "", "greater_equal"], [38, 3, 1, "", "isfinite"], [38, 3, 1, "", "isinf"], [38, 3, 1, "", "isnan"], [38, 3, 1, "", "less"], [38, 3, 1, "", "less_equal"], [38, 3, 1, "", "log"], [38, 3, 1, "", "log10"], [38, 3, 1, "", "log1p"], [38, 3, 1, "", "log2"], [38, 3, 1, "", "logaddexp"], [38, 3, 1, "", "logical_and"], [38, 3, 1, "", "logical_not"], [38, 3, 1, "", "logical_or"], [38, 3, 1, "", "logical_xor"], [38, 3, 1, "", "multiply"], [38, 3, 1, "", "negative"], [38, 3, 1, "", "not_equal"], [38, 3, 1, "", "positive"], [38, 3, 1, "", "pow"], [38, 3, 1, "", "remainder"], [38, 3, 1, "", "round"], [38, 3, 1, "", "sign"], [38, 3, 1, "", "sin"], [38, 3, 1, "", "sinh"], [38, 3, 1, "", "sqrt"], [38, 3, 1, "", "square"], [38, 3, 1, "", "subtract"], [38, 3, 1, "", "tan"], [38, 3, 1, "", "tanh"], [38, 3, 1, "", "trunc"]], "ivy.array.general": [[40, 2, 1, "", "ArrayWithGeneral"]], "ivy.array.general.ArrayWithGeneral": [[40, 3, 1, "", "all_equal"], [40, 3, 1, "", "gather_nd"]], "ivy.array.gradients": [[42, 2, 1, "", "ArrayWithGradients"]], "ivy.array.gradients.ArrayWithGradients": [[42, 3, 1, "", "adam_step"]], "ivy.array.image": [[44, 2, 1, "", "ArrayWithImage"]], "ivy.array.layers": [[46, 2, 1, "", "ArrayWithLayers"]], "ivy.array.linear_algebra": [[48, 2, 1, "", "ArrayWithLinearAlgebra"]], "ivy.array.linear_algebra.ArrayWithLinearAlgebra": [[48, 3, 1, "", "cholesky"], [48, 3, 1, "", "cross"], [48, 3, 1, "", "det"], [48, 3, 1, "", "diagonal"], [48, 3, 1, "", "eigh"], [48, 3, 1, "", "eigvalsh"], [48, 3, 1, "", "inv"], [48, 3, 1, "", "matmul"], [48, 3, 1, "", "matrix_norm"], [48, 3, 1, "", "matrix_rank"], [48, 3, 1, "", "matrix_transpose"], [48, 3, 1, "", "outer"], [48, 3, 1, "", "pinv"], [48, 3, 1, "", "qr"], [48, 3, 1, "", "solve"], [48, 3, 1, "", "svd"], [48, 3, 1, "", "svdvals"], [48, 3, 1, "", "tensordot"], [48, 3, 1, "", "trace"], [48, 3, 1, "", "vecdot"], [48, 3, 1, "", "vector_norm"], [48, 3, 1, "", "vector_to_skew_symmetric_matrix"]], "ivy.array.losses": [[50, 2, 1, "", "ArrayWithLosses"]], "ivy.array.losses.ArrayWithLosses": [[50, 3, 1, "", "binary_cross_entropy"], [50, 3, 1, "", "cross_entropy"], [50, 3, 1, "", "sparse_cross_entropy"]], "ivy.array.manipulation": [[52, 2, 1, "", "ArrayWithManipulation"]], "ivy.array.manipulation.ArrayWithManipulation": [[52, 3, 1, "", "clip"], [52, 3, 1, "", "concat"], [52, 3, 1, "", "constant_pad"], [52, 3, 1, "", "expand_dims"], [52, 3, 1, "", "flip"], [52, 3, 1, "", "permute_dims"], [52, 3, 1, "", "repeat"], [52, 3, 1, "", "reshape"], [52, 3, 1, "", "roll"], [52, 3, 1, "", "squeeze"], [52, 3, 1, "", "stack"], [52, 3, 1, "", "swapaxes"], [52, 3, 1, "", "tile"], [52, 3, 1, "", "zero_pad"]], "ivy.array.norms": [[54, 2, 1, "", "ArrayWithNorms"]], "ivy.array.norms.ArrayWithNorms": [[54, 3, 1, "", "layer_norm"]], "ivy.array.random": [[56, 2, 1, "", "ArrayWithRandom"]], "ivy.array.searching": [[58, 2, 1, "", "ArrayWithSearching"]], "ivy.array.set": [[60, 2, 1, "", "ArrayWithSet"]], "ivy.array.set.ArrayWithSet": [[60, 3, 1, "", "unique_counts"]], "ivy.array.sorting": [[62, 2, 1, "", "ArrayWithSorting"]], "ivy.array.sorting.ArrayWithSorting": [[62, 3, 1, "", "argsort"], [62, 3, 1, "", "sort"]], "ivy.array.statistical": [[64, 2, 1, "", "ArrayWithStatistical"]], "ivy.array.statistical.ArrayWithStatistical": [[64, 3, 1, "", "einsum"], [64, 3, 1, "", "max"], [64, 3, 1, "", "mean"], [64, 3, 1, "", "min"], [64, 3, 1, "", "prod"], [64, 3, 1, "", "std"], [64, 3, 1, "", "sum"], [64, 3, 1, "", "var"]], "ivy.array.utility": [[66, 2, 1, "", "ArrayWithUtility"]], "ivy.array.utility.ArrayWithUtility": [[66, 3, 1, "", "all"], [66, 3, 1, "", "any"]], "ivy.array.wrapping": [[68, 1, 1, "", "add_ivy_array_instance_methods"]], "ivy.backend_handler": [[0, 2, 1, "", "ContextManager"], [2, 1, 1, "", "choose_random_backend"], [3, 1, 1, "", "clear_backend_stack"], [4, 1, 1, "", "current_backend"], [5, 1, 1, "", "get_backend"], [6, 1, 1, "", "set_backend"], [7, 1, 1, "", "try_import_ivy_jax"], [8, 1, 1, "", "try_import_ivy_mxnet"], [9, 1, 1, "", "try_import_ivy_numpy"], [10, 1, 1, "", "try_import_ivy_tf"], [11, 1, 1, "", "try_import_ivy_torch"], [12, 1, 1, "", "unset_backend"]], "ivy.backend_handler.ContextManager": [[0, 3, 1, "", "__init__"]], "ivy.container": [[70, 0, 0, "-", "activations"], [72, 0, 0, "-", "base"], [74, 0, 0, "-", "container"], [77, 0, 0, "-", "creation"], [79, 0, 0, "-", "data_type"], [81, 0, 0, "-", "device"], [83, 0, 0, "-", "elementwise"], [85, 0, 0, "-", "general"], [87, 0, 0, "-", "gradients"], [89, 0, 0, "-", "image"], [91, 0, 0, "-", "layers"], [93, 0, 0, "-", "linear_algebra"], [95, 0, 0, "-", "losses"], [97, 0, 0, "-", "manipulation"], [99, 0, 0, "-", "norms"], [101, 0, 0, "-", "random"], [103, 0, 0, "-", "searching"], [105, 0, 0, "-", "set"], [107, 0, 0, "-", "sorting"], [109, 0, 0, "-", "statistical"], [111, 0, 0, "-", "utility"], [113, 0, 0, "-", "wrapping"]], "ivy.container.activations": [[71, 2, 1, "", "ContainerWithActivations"]], "ivy.container.activations.ContainerWithActivations": [[71, 3, 1, "", "softplus"], [71, 3, 1, "", "static_softplus"]], "ivy.container.base": [[73, 2, 1, "", "ContainerBase"]], "ivy.container.base.ContainerBase": [[73, 3, 1, "", "__getitem__"], [73, 3, 1, "", "__init__"], [73, 3, 1, "", "__setitem__"], [73, 3, 1, "", "all_false"], [73, 3, 1, "", "all_key_chains"], [73, 3, 1, "", "all_true"], [73, 3, 1, "", "arrays_as_lists"], [73, 3, 1, "", "as_arrays"], [73, 3, 1, "", "as_bools"], [73, 3, 1, "", "as_ones"], [73, 3, 1, "", "as_random_uniform"], [73, 3, 1, "", "as_variables"], [73, 3, 1, "", "as_zeros"], [73, 3, 1, "", "assert_contains_sub_container"], [73, 3, 1, "", "assert_contains_sub_structure"], [73, 3, 1, "", "assert_identical"], [73, 3, 1, "", "assert_identical_structure"], [73, 3, 1, "", "at_key_chain"], [73, 3, 1, "", "at_key_chains"], [73, 3, 1, "", "at_keys"], [73, 3, 1, "", "clip"], [73, 3, 1, "", "combine"], [73, 3, 1, "", "common_key_chains"], [73, 4, 1, "", "config"], [73, 3, 1, "", "contains_sub_container"], [73, 3, 1, "", "contains_sub_structure"], [73, 3, 1, "", "copy"], [73, 3, 1, "", "create_if_absent"], [73, 3, 1, "", "cutoff_at_depth"], [73, 3, 1, "", "cutoff_at_height"], [73, 3, 1, "", "deep_copy"], [73, 4, 1, "", "dev"], [73, 3, 1, "", "dev_clone"], [73, 3, 1, "", "dev_dist"], [73, 4, 1, "", "dev_str"], [73, 3, 1, "", "diff"], [73, 3, 1, "", "dtype"], [73, 3, 1, "", "einops_rearrange"], [73, 3, 1, "", "einops_reduce"], [73, 3, 1, "", "einops_repeat"], [73, 3, 1, "", "find_sub_container"], [73, 3, 1, "", "find_sub_structure"], [73, 3, 1, "", "flatten_key_chain"], [73, 3, 1, "", "flatten_key_chains"], [73, 3, 1, "", "format_key_chains"], [73, 3, 1, "", "from_disk_as_hdf5"], [73, 3, 1, "", "from_disk_as_json"], [73, 3, 1, "", "from_disk_as_pickled"], [73, 3, 1, "", "from_flat_list"], [73, 3, 1, "", "from_numpy"], [73, 3, 1, "", "gather"], [73, 3, 1, "", "gather_nd"], [73, 3, 1, "", "h5_file_size"], [73, 3, 1, "", "handle_inplace"], [73, 3, 1, "", "has_key"], [73, 3, 1, "", "has_key_chain"], [73, 3, 1, "", "has_nans"], [73, 3, 1, "", "identical"], [73, 3, 1, "", "identical_array_shapes"], [73, 3, 1, "", "identical_configs"], [73, 3, 1, "", "identical_structure"], [73, 3, 1, "", "if_exists"], [73, 3, 1, "", "inplace_update"], [73, 4, 1, "", "ivy"], [73, 3, 1, "", "key_chains_containing"], [73, 3, 1, "", "list_join"], [73, 3, 1, "", "list_stack"], [73, 3, 1, "", "map"], [73, 3, 1, "", "map_conts"], [73, 3, 1, "", "matrix_norm"], [73, 4, 1, "", "max_depth"], [73, 3, 1, "", "maximum"], [73, 3, 1, "", "minimum"], [73, 3, 1, "", "multi_map"], [73, 3, 1, "", "multi_map_in_static_method"], [73, 3, 1, "", "num_arrays"], [73, 3, 1, "", "overwrite_at_key_chain"], [73, 3, 1, "", "overwrite_at_key_chains"], [73, 3, 1, "", "prune_empty"], [73, 3, 1, "", "prune_key_chain"], [73, 3, 1, "", "prune_key_chains"], [73, 3, 1, "", "prune_key_from_key_chains"], [73, 3, 1, "", "prune_keys"], [73, 3, 1, "", "prune_keys_from_key_chains"], [73, 3, 1, "", "reduce"], [73, 3, 1, "", "remove_key_length_limit"], [73, 3, 1, "", "remove_print_limit"], [73, 3, 1, "", "reshape_like"], [73, 3, 1, "", "restructure"], [73, 3, 1, "", "restructure_key_chains"], [73, 3, 1, "", "set_at_key_chain"], [73, 3, 1, "", "set_at_key_chains"], [73, 3, 1, "", "set_at_keys"], [73, 3, 1, "", "set_framework"], [73, 3, 1, "", "set_ivy_backend"], [73, 4, 1, "", "shape"], [73, 4, 1, "", "shapes"], [73, 3, 1, "", "show"], [73, 3, 1, "", "show_sub_container"], [73, 3, 1, "", "shuffle"], [73, 3, 1, "", "shuffle_h5_file"], [73, 3, 1, "", "size_ordered_arrays"], [73, 3, 1, "", "slice_keys"], [73, 3, 1, "", "slice_via_key"], [73, 3, 1, "", "sort_by_key"], [73, 3, 1, "", "split"], [73, 3, 1, "", "stop_gradients"], [73, 3, 1, "", "structural_diff"], [73, 3, 1, "", "to_device"], [73, 3, 1, "", "to_dict"], [73, 3, 1, "", "to_disk_as_hdf5"], [73, 3, 1, "", "to_disk_as_json"], [73, 3, 1, "", "to_disk_as_pickled"], [73, 3, 1, "", "to_flat_list"], [73, 3, 1, "", "to_iterator"], [73, 3, 1, "", "to_iterator_keys"], [73, 3, 1, "", "to_iterator_values"], [73, 3, 1, "", "to_ivy"], [73, 3, 1, "", "to_jsonable"], [73, 3, 1, "", "to_list"], [73, 3, 1, "", "to_multi_dev"], [73, 3, 1, "", "to_native"], [73, 3, 1, "", "to_numpy"], [73, 3, 1, "", "to_raw"], [73, 3, 1, "", "trim_key"], [73, 3, 1, "", "try_kc"], [73, 3, 1, "", "unify"], [73, 3, 1, "", "unstack"], [73, 3, 1, "", "update_config"], [73, 3, 1, "", "vector_norm"], [73, 3, 1, "", "with_default_key_color"], [73, 3, 1, "", "with_entries_as_lists"], [73, 3, 1, "", "with_ivy_backend"], [73, 3, 1, "", "with_key_length_limit"], [73, 3, 1, "", "with_print_indent"], [73, 3, 1, "", "with_print_limit"], [73, 3, 1, "", "with_print_line_spacing"]], "ivy.container.container": [[75, 2, 1, "", "Container"], [76, 2, 1, "", "MultiDevContainer"]], "ivy.container.container.Container": [[75, 3, 1, "", "__add__"], [75, 3, 1, "", "__init__"], [75, 3, 1, "", "__radd__"], [75, 3, 1, "", "arange"], [75, 3, 1, "", "arg_info"], [75, 3, 1, "", "arg_names"], [75, 3, 1, "", "argmax"], [75, 3, 1, "", "argmin"], [75, 3, 1, "", "array"], [75, 3, 1, "", "array_equal"], [75, 3, 1, "", "arrays_equal"], [75, 3, 1, "", "as_ivy_dev"], [75, 3, 1, "", "as_ivy_dtype"], [75, 3, 1, "", "as_native_dev"], [75, 3, 1, "", "as_native_dtype"], [75, 3, 1, "", "assert_supports_inplace"], [75, 3, 1, "", "astype"], [75, 3, 1, "", "broadcast_arrays"], [75, 3, 1, "", "broadcast_to"], [75, 3, 1, "", "cache_fn"], [75, 3, 1, "", "clear_mem_on_dev"], [75, 3, 1, "", "clip_matrix_norm"], [75, 3, 1, "", "closest_valid_dtype"], [75, 3, 1, "", "container_types"], [75, 3, 1, "", "conv1d"], [75, 3, 1, "", "conv1d_transpose"], [75, 3, 1, "", "conv2d"], [75, 3, 1, "", "conv2d_transpose"], [75, 3, 1, "", "conv3d"], [75, 3, 1, "", "conv3d_transpose"], [75, 3, 1, "", "copy_array"], [75, 3, 1, "", "cross"], [75, 3, 1, "", "cumprod"], [75, 3, 1, "", "cumsum"], [75, 3, 1, "", "current_backend"], [75, 3, 1, "", "current_backend_str"], [75, 3, 1, "", "default"], [75, 3, 1, "", "default_device"], [75, 3, 1, "", "default_dtype"], [75, 3, 1, "", "default_float_dtype"], [75, 3, 1, "", "default_int_dtype"], [75, 3, 1, "", "depthwise_conv2d"], [75, 3, 1, "", "det"], [75, 3, 1, "", "dev_clone_array"], [75, 3, 1, "", "dev_clone_iter"], [75, 3, 1, "", "dev_clone_nest"], [75, 3, 1, "", "dev_dist_array"], [75, 3, 1, "", "dev_dist_iter"], [75, 3, 1, "", "dev_dist_nest"], [75, 3, 1, "", "dev_unify"], [75, 3, 1, "", "dev_unify_array"], [75, 3, 1, "", "dev_unify_iter"], [75, 3, 1, "", "dev_unify_nest"], [75, 3, 1, "", "dev_util"], [75, 3, 1, "", "diagonal"], [75, 3, 1, "", "dropout"], [75, 3, 1, "", "dtype_bits"], [75, 3, 1, "", "eigh"], [75, 3, 1, "", "eigvalsh"], [75, 3, 1, "", "empty"], [75, 3, 1, "", "execute_with_gradients"], [75, 3, 1, "", "exists"], [75, 3, 1, "", "eye"], [75, 3, 1, "", "finfo"], [75, 3, 1, "", "floormod"], [75, 3, 1, "", "fourier_encode"], [75, 3, 1, "", "full"], [75, 3, 1, "", "function_supported_dtypes"], [75, 3, 1, "", "function_unsupported_dtypes"], [75, 3, 1, "", "gelu"], [75, 3, 1, "", "get_all_arrays_in_memory"], [75, 3, 1, "", "get_all_ivy_arrays_on_dev"], [75, 3, 1, "", "get_min_base"], [75, 3, 1, "", "get_min_denominator"], [75, 3, 1, "", "get_num_dims"], [75, 3, 1, "", "get_referrers_recursive"], [75, 3, 1, "", "gpu_is_available"], [75, 3, 1, "", "handle_nestable"], [75, 3, 1, "", "handle_out_argument"], [75, 3, 1, "", "iinfo"], [75, 3, 1, "", "indices_where"], [75, 3, 1, "", "infer_device"], [75, 3, 1, "", "infer_dtype"], [75, 3, 1, "", "inplace_arrays_supported"], [75, 3, 1, "", "inplace_decrement"], [75, 3, 1, "", "inplace_increment"], [75, 3, 1, "", "inplace_variables_supported"], [75, 3, 1, "", "inputs_to_native_arrays"], [75, 3, 1, "", "inv"], [75, 3, 1, "", "invalid_dtype"], [75, 3, 1, "", "is_float_dtype"], [75, 3, 1, "", "is_int_dtype"], [75, 3, 1, "", "is_ivy_container"], [75, 3, 1, "", "leaky_relu"], [75, 3, 1, "", "linear"], [75, 3, 1, "", "linspace"], [75, 3, 1, "", "logspace"], [75, 3, 1, "", "lstm_update"], [75, 3, 1, "", "match_kwargs"], [75, 3, 1, "", "matrix_power"], [75, 3, 1, "", "matrix_rank"], [75, 3, 1, "", "matrix_transpose"], [75, 3, 1, "", "multi_head_attention"], [75, 3, 1, "", "multinomial"], [75, 3, 1, "", "multiprocessing"], [75, 3, 1, "", "nonzero"], [75, 3, 1, "", "num_arrays_in_memory"], [75, 3, 1, "", "num_cpu_cores"], [75, 3, 1, "", "num_gpus"], [75, 3, 1, "", "num_ivy_arrays_on_dev"], [75, 3, 1, "", "one_hot"], [75, 3, 1, "", "ones"], [75, 3, 1, "", "outer"], [75, 3, 1, "", "outputs_to_ivy_arrays"], [75, 3, 1, "", "percent_used_mem_on_dev"], [75, 3, 1, "", "pinv"], [75, 3, 1, "", "print_all_arrays_in_memory"], [75, 3, 1, "", "print_all_ivy_arrays_on_dev"], [75, 3, 1, "", "promote_types"], [75, 3, 1, "", "qr"], [75, 3, 1, "", "queue_timeout"], [75, 3, 1, "", "randint"], [75, 3, 1, "", "random_normal"], [75, 3, 1, "", "relu"], [75, 3, 1, "", "result_type"], [75, 3, 1, "", "scaled_dot_product_attention"], [75, 3, 1, "", "scatter_flat"], [75, 3, 1, "", "scatter_nd"], [75, 3, 1, "", "seed"], [75, 3, 1, "", "set_default_device"], [75, 3, 1, "", "set_default_dtype"], [75, 3, 1, "", "set_default_float_dtype"], [75, 3, 1, "", "set_default_int_dtype"], [75, 3, 1, "", "set_min_base"], [75, 3, 1, "", "set_min_denominator"], [75, 3, 1, "", "set_queue_timeout"], [75, 3, 1, "", "set_split_factor"], [75, 3, 1, "", "set_tmp_dir"], [75, 3, 1, "", "set_with_grads"], [75, 3, 1, "", "shape_to_tuple"], [75, 3, 1, "", "sigmoid"], [75, 3, 1, "", "slogdet"], [75, 3, 1, "", "softmax"], [75, 3, 1, "", "solve"], [75, 3, 1, "", "split_factor"], [75, 3, 1, "", "split_func_call"], [75, 3, 1, "", "stable_divide"], [75, 3, 1, "", "stable_pow"], [75, 3, 1, "", "static_acos"], [75, 3, 1, "", "static_acosh"], [75, 3, 1, "", "static_arg_info"], [75, 3, 1, "", "static_arg_names"], [75, 3, 1, "", "static_argmax"], [75, 3, 1, "", "static_argmin"], [75, 3, 1, "", "static_array"], [75, 3, 1, "", "static_array_equal"], [75, 3, 1, "", "static_arrays_equal"], [75, 3, 1, "", "static_as_ivy_dev"], [75, 3, 1, "", "static_as_ivy_dtype"], [75, 3, 1, "", "static_as_native_dev"], [75, 3, 1, "", "static_as_native_dtype"], [75, 3, 1, "", "static_asin"], [75, 3, 1, "", "static_assert_supports_inplace"], [75, 3, 1, "", "static_astype"], [75, 3, 1, "", "static_atan"], [75, 3, 1, "", "static_atan2"], [75, 3, 1, "", "static_atanh"], [75, 3, 1, "", "static_bitwise_and"], [75, 3, 1, "", "static_bitwise_invert"], [75, 3, 1, "", "static_bitwise_left_shift"], [75, 3, 1, "", "static_bitwise_or"], [75, 3, 1, "", "static_bitwise_right_shift"], [75, 3, 1, "", "static_bitwise_xor"], [75, 3, 1, "", "static_broadcast_arrays"], [75, 3, 1, "", "static_broadcast_to"], [75, 3, 1, "", "static_cache_fn"], [75, 3, 1, "", "static_ceil"], [75, 3, 1, "", "static_clear_mem_on_dev"], [75, 3, 1, "", "static_clip_matrix_norm"], [75, 3, 1, "", "static_clip_vector_norm"], [75, 3, 1, "", "static_closest_valid_dtype"], [75, 3, 1, "", "static_concat"], [75, 3, 1, "", "static_constant_pad"], [75, 3, 1, "", "static_container_types"], [75, 3, 1, "", "static_conv1d"], [75, 3, 1, "", "static_conv1d_transpose"], [75, 3, 1, "", "static_conv2d"], [75, 3, 1, "", "static_conv2d_transpose"], [75, 3, 1, "", "static_conv3d"], [75, 3, 1, "", "static_conv3d_transpose"], [75, 3, 1, "", "static_copy_array"], [75, 3, 1, "", "static_cos"], [75, 3, 1, "", "static_cosh"], [75, 3, 1, "", "static_cross"], [75, 3, 1, "", "static_cumprod"], [75, 3, 1, "", "static_cumsum"], [75, 3, 1, "", "static_current_backend"], [75, 3, 1, "", "static_current_backend_str"], [75, 3, 1, "", "static_default"], [75, 3, 1, "", "static_default_device"], [75, 3, 1, "", "static_default_dtype"], [75, 3, 1, "", "static_default_float_dtype"], [75, 3, 1, "", "static_default_int_dtype"], [75, 3, 1, "", "static_depthwise_conv2d"], [75, 3, 1, "", "static_det"], [75, 3, 1, "", "static_dev"], [75, 3, 1, "", "static_dev_clone"], [75, 3, 1, "", "static_dev_clone_array"], [75, 3, 1, "", "static_dev_clone_iter"], [75, 3, 1, "", "static_dev_clone_nest"], [75, 3, 1, "", "static_dev_dist"], [75, 3, 1, "", "static_dev_dist_array"], [75, 3, 1, "", "static_dev_dist_iter"], [75, 3, 1, "", "static_dev_dist_nest"], [75, 3, 1, "", "static_dev_unify"], [75, 3, 1, "", "static_dev_unify_array"], [75, 3, 1, "", "static_dev_unify_iter"], [75, 3, 1, "", "static_dev_unify_nest"], [75, 3, 1, "", "static_dev_util"], [75, 3, 1, "", "static_diagonal"], [75, 3, 1, "", "static_dropout"], [75, 3, 1, "", "static_dtype"], [75, 3, 1, "", "static_dtype_bits"], [75, 3, 1, "", "static_eigh"], [75, 3, 1, "", "static_eigvalsh"], [75, 3, 1, "", "static_einops_rearrange"], [75, 3, 1, "", "static_einops_reduce"], [75, 3, 1, "", "static_einops_repeat"], [75, 3, 1, "", "static_einsum"], [75, 3, 1, "", "static_empty"], [75, 3, 1, "", "static_equal"], [75, 3, 1, "", "static_erf"], [75, 3, 1, "", "static_execute_with_gradients"], [75, 3, 1, "", "static_exists"], [75, 3, 1, "", "static_exp"], [75, 3, 1, "", "static_expand_dims"], [75, 3, 1, "", "static_expm1"], [75, 3, 1, "", "static_finfo"], [75, 3, 1, "", "static_flip"], [75, 3, 1, "", "static_floor"], [75, 3, 1, "", "static_floor_divide"], [75, 3, 1, "", "static_floormod"], [75, 3, 1, "", "static_fourier_encode"], [75, 3, 1, "", "static_full"], [75, 3, 1, "", "static_function_supported_dtypes"], [75, 3, 1, "", "static_function_unsupported_dtypes"], [75, 3, 1, "", "static_gather"], [75, 3, 1, "", "static_gelu"], [75, 3, 1, "", "static_get_all_arrays_in_memory"], [75, 3, 1, "", "static_get_all_ivy_arrays_on_dev"], [75, 3, 1, "", "static_get_min_base"], [75, 3, 1, "", "static_get_min_denominator"], [75, 3, 1, "", "static_get_num_dims"], [75, 3, 1, "", "static_get_referrers_recursive"], [75, 3, 1, "", "static_gpu_is_available"], [75, 3, 1, "", "static_greater"], [75, 3, 1, "", "static_greater_equal"], [75, 3, 1, "", "static_handle_nestable"], [75, 3, 1, "", "static_handle_out_argument"], [75, 3, 1, "", "static_has_nans"], [75, 3, 1, "", "static_iinfo"], [75, 3, 1, "", "static_indices_where"], [75, 3, 1, "", "static_infer_device"], [75, 3, 1, "", "static_infer_dtype"], [75, 3, 1, "", "static_inplace_arrays_supported"], [75, 3, 1, "", "static_inplace_decrement"], [75, 3, 1, "", "static_inplace_increment"], [75, 3, 1, "", "static_inplace_update"], [75, 3, 1, "", "static_inplace_variables_supported"], [75, 3, 1, "", "static_inputs_to_native_arrays"], [75, 3, 1, "", "static_inv"], [75, 3, 1, "", "static_invalid_dtype"], [75, 3, 1, "", "static_is_array"], [75, 3, 1, "", "static_is_float_dtype"], [75, 3, 1, "", "static_is_int_dtype"], [75, 3, 1, "", "static_is_ivy_array"], [75, 3, 1, "", "static_is_ivy_container"], [75, 3, 1, "", "static_is_native_array"], [75, 3, 1, "", "static_isfinite"], [75, 3, 1, "", "static_isinf"], [75, 3, 1, "", "static_isnan"], [75, 3, 1, "", "static_layer_norm"], [75, 3, 1, "", "static_leaky_relu"], [75, 3, 1, "", "static_less"], [75, 3, 1, "", "static_less_equal"], [75, 3, 1, "", "static_linear"], [75, 3, 1, "", "static_log"], [75, 3, 1, "", "static_log10"], [75, 3, 1, "", "static_log1p"], [75, 3, 1, "", "static_log2"], [75, 3, 1, "", "static_logaddexp"], [75, 3, 1, "", "static_logical_and"], [75, 3, 1, "", "static_logical_not"], [75, 3, 1, "", "static_logical_or"], [75, 3, 1, "", "static_logical_xor"], [75, 3, 1, "", "static_lstm_update"], [75, 3, 1, "", "static_match_kwargs"], [75, 3, 1, "", "static_matmul"], [75, 3, 1, "", "static_matrix_norm"], [75, 3, 1, "", "static_matrix_power"], [75, 3, 1, "", "static_matrix_rank"], [75, 3, 1, "", "static_matrix_transpose"], [75, 3, 1, "", "static_max"], [75, 3, 1, "", "static_maximum"], [75, 3, 1, "", "static_mean"], [75, 3, 1, "", "static_min"], [75, 3, 1, "", "static_minimum"], [75, 3, 1, "", "static_multi_head_attention"], [75, 3, 1, "", "static_multinomial"], [75, 3, 1, "", "static_multiprocessing"], [75, 3, 1, "", "static_negative"], [75, 3, 1, "", "static_nonzero"], [75, 3, 1, "", "static_not_equal"], [75, 3, 1, "", "static_num_arrays_in_memory"], [75, 3, 1, "", "static_num_cpu_cores"], [75, 3, 1, "", "static_num_gpus"], [75, 3, 1, "", "static_num_ivy_arrays_on_dev"], [75, 3, 1, "", "static_one_hot"], [75, 3, 1, "", "static_outer"], [75, 3, 1, "", "static_outputs_to_ivy_arrays"], [75, 3, 1, "", "static_percent_used_mem_on_dev"], [75, 3, 1, "", "static_permute_dims"], [75, 3, 1, "", "static_pinv"], [75, 3, 1, "", "static_positive"], [75, 3, 1, "", "static_pow"], [75, 3, 1, "", "static_print_all_arrays_in_memory"], [75, 3, 1, "", "static_print_all_ivy_arrays_on_dev"], [75, 3, 1, "", "static_prod"], [75, 3, 1, "", "static_promote_types"], [75, 3, 1, "", "static_qr"], [75, 3, 1, "", "static_queue_timeout"], [75, 3, 1, "", "static_random_normal"], [75, 3, 1, "", "static_relu"], [75, 3, 1, "", "static_remainder"], [75, 3, 1, "", "static_repeat"], [75, 3, 1, "", "static_reshape"], [75, 3, 1, "", "static_result_type"], [75, 3, 1, "", "static_round"], [75, 3, 1, "", "static_scaled_dot_product_attention"], [75, 3, 1, "", "static_scatter_flat"], [75, 3, 1, "", "static_scatter_nd"], [75, 3, 1, "", "static_seed"], [75, 3, 1, "", "static_set_default_device"], [75, 3, 1, "", "static_set_default_dtype"], [75, 3, 1, "", "static_set_default_float_dtype"], [75, 3, 1, "", "static_set_default_int_dtype"], [75, 3, 1, "", "static_set_min_base"], [75, 3, 1, "", "static_set_min_denominator"], [75, 3, 1, "", "static_set_queue_timeout"], [75, 3, 1, "", "static_set_split_factor"], [75, 3, 1, "", "static_set_tmp_dir"], [75, 3, 1, "", "static_set_with_grads"], [75, 3, 1, "", "static_shape"], [75, 3, 1, "", "static_shape_to_tuple"], [75, 3, 1, "", "static_shuffle"], [75, 3, 1, "", "static_sigmoid"], [75, 3, 1, "", "static_sign"], [75, 3, 1, "", "static_sin"], [75, 3, 1, "", "static_sinh"], [75, 3, 1, "", "static_slogdet"], [75, 3, 1, "", "static_softmax"], [75, 3, 1, "", "static_solve"], [75, 3, 1, "", "static_split"], [75, 3, 1, "", "static_split_factor"], [75, 3, 1, "", "static_split_func_call"], [75, 3, 1, "", "static_sqrt"], [75, 3, 1, "", "static_square"], [75, 3, 1, "", "static_squeeze"], [75, 3, 1, "", "static_stable_divide"], [75, 3, 1, "", "static_stable_pow"], [75, 3, 1, "", "static_stack"], [75, 3, 1, "", "static_std"], [75, 3, 1, "", "static_stop_gradient"], [75, 3, 1, "", "static_sum"], [75, 3, 1, "", "static_supports_inplace"], [75, 3, 1, "", "static_svd"], [75, 3, 1, "", "static_svdvals"], [75, 3, 1, "", "static_swapaxes"], [75, 3, 1, "", "static_tensordot"], [75, 3, 1, "", "static_tile"], [75, 3, 1, "", "static_tmp_dir"], [75, 3, 1, "", "static_to_device"], [75, 3, 1, "", "static_to_list"], [75, 3, 1, "", "static_to_native_arrays_and_back"], [75, 3, 1, "", "static_to_numpy"], [75, 3, 1, "", "static_to_scalar"], [75, 3, 1, "", "static_total_mem_on_dev"], [75, 3, 1, "", "static_tpu_is_available"], [75, 3, 1, "", "static_trace"], [75, 3, 1, "", "static_trunc"], [75, 3, 1, "", "static_try_else_none"], [75, 3, 1, "", "static_type_promote_arrays"], [75, 3, 1, "", "static_unique_all"], [75, 3, 1, "", "static_unique_inverse"], [75, 3, 1, "", "static_unique_values"], [75, 3, 1, "", "static_unset_default_device"], [75, 3, 1, "", "static_unset_default_dtype"], [75, 3, 1, "", "static_unset_default_float_dtype"], [75, 3, 1, "", "static_unset_default_int_dtype"], [75, 3, 1, "", "static_unset_with_grads"], [75, 3, 1, "", "static_unstack"], [75, 3, 1, "", "static_used_mem_on_dev"], [75, 3, 1, "", "static_valid_dtype"], [75, 3, 1, "", "static_value_is_nan"], [75, 3, 1, "", "static_var"], [75, 3, 1, "", "static_variable"], [75, 3, 1, "", "static_variable_data"], [75, 3, 1, "", "static_vecdot"], [75, 3, 1, "", "static_vector_norm"], [75, 3, 1, "", "static_vector_to_skew_symmetric_matrix"], [75, 3, 1, "", "static_where"], [75, 3, 1, "", "static_with_grads"], [75, 3, 1, "", "static_zero_pad"], [75, 3, 1, "", "stop_gradient"], [75, 3, 1, "", "supports_inplace"], [75, 3, 1, "", "svd"], [75, 3, 1, "", "svdvals"], [75, 3, 1, "", "tensordot"], [75, 3, 1, "", "tmp_dir"], [75, 3, 1, "", "to_native_arrays_and_back"], [75, 3, 1, "", "to_scalar"], [75, 3, 1, "", "total_mem_on_dev"], [75, 3, 1, "", "tpu_is_available"], [75, 3, 1, "", "trace"], [75, 3, 1, "", "try_else_none"], [75, 3, 1, "", "type_promote_arrays"], [75, 3, 1, "", "unique_all"], [75, 3, 1, "", "unique_inverse"], [75, 3, 1, "", "unique_values"], [75, 3, 1, "", "unset_default_device"], [75, 3, 1, "", "unset_default_dtype"], [75, 3, 1, "", "unset_default_float_dtype"], [75, 3, 1, "", "unset_default_int_dtype"], [75, 3, 1, "", "unset_with_grads"], [75, 3, 1, "", "used_mem_on_dev"], [75, 3, 1, "", "valid_dtype"], [75, 3, 1, "", "value_is_nan"], [75, 3, 1, "", "variable"], [75, 3, 1, "", "variable_data"], [75, 3, 1, "", "vecdot"], [75, 3, 1, "", "vector_to_skew_symmetric_matrix"], [75, 3, 1, "", "where"], [75, 3, 1, "", "with_grads"], [75, 3, 1, "", "zeros"]], "ivy.container.container.MultiDevContainer": [[76, 3, 1, "", "__init__"], [76, 3, 1, "", "at_dev"], [76, 3, 1, "", "at_devs"]], "ivy.container.container_methods": [[336, 1, 1, "", "abs"], [341, 1, 1, "", "acos"], [345, 1, 1, "", "acosh"], [650, 1, 1, "", "adam_step"], [654, 1, 1, "", "adam_update"], [349, 1, 1, "", "add"], [945, 1, 1, "", "all"], [575, 1, 1, "", "all_equal"], [950, 1, 1, "", "any"], [901, 1, 1, "", "argsort"], [181, 1, 1, "", "asarray"], [354, 1, 1, "", "asin"], [358, 1, 1, "", "asinh"], [363, 1, 1, "", "atan"], [367, 1, 1, "", "atan2"], [371, 1, 1, "", "atanh"], [772, 1, 1, "", "binary_cross_entropy"], [375, 1, 1, "", "bitwise_and"], [379, 1, 1, "", "bitwise_invert"], [383, 1, 1, "", "bitwise_left_shift"], [387, 1, 1, "", "bitwise_or"], [391, 1, 1, "", "bitwise_right_shift"], [395, 1, 1, "", "bitwise_xor"], [257, 1, 1, "", "can_cast"], [399, 1, 1, "", "ceil"], [700, 1, 1, "", "cholesky"], [788, 1, 1, "", "clip"], [586, 1, 1, "", "clip_vector_norm"], [793, 1, 1, "", "concat"], [797, 1, 1, "", "constant_pad"], [403, 1, 1, "", "cos"], [407, 1, 1, "", "cosh"], [777, 1, 1, "", "cross_entropy"], [411, 1, 1, "", "divide"], [912, 1, 1, "", "einsum"], [187, 1, 1, "", "empty_like"], [416, 1, 1, "", "equal"], [420, 1, 1, "", "erf"], [424, 1, 1, "", "exp"], [801, 1, 1, "", "expand_dims"], [428, 1, 1, "", "expm1"], [805, 1, 1, "", "flip"], [432, 1, 1, "", "floor"], [436, 1, 1, "", "floor_divide"], [195, 1, 1, "", "from_dlpack"], [201, 1, 1, "", "full_like"], [603, 1, 1, "", "gather_nd"], [659, 1, 1, "", "gradient_descent_update"], [440, 1, 1, "", "greater"], [444, 1, 1, "", "greater_equal"], [663, 1, 1, "", "is_variable"], [448, 1, 1, "", "isfinite"], [452, 1, 1, "", "isinf"], [456, 1, 1, "", "isnan"], [667, 1, 1, "", "lamb_update"], [671, 1, 1, "", "lars_update"], [870, 1, 1, "", "layer_norm"], [460, 1, 1, "", "less"], [464, 1, 1, "", "less_equal"], [468, 1, 1, "", "log"], [472, 1, 1, "", "log10"], [476, 1, 1, "", "log1p"], [480, 1, 1, "", "log2"], [484, 1, 1, "", "logaddexp"], [488, 1, 1, "", "logical_and"], [492, 1, 1, "", "logical_not"], [496, 1, 1, "", "logical_or"], [500, 1, 1, "", "logical_xor"], [723, 1, 1, "", "matmul"], [916, 1, 1, "", "max"], [920, 1, 1, "", "mean"], [212, 1, 1, "", "meshgrid"], [924, 1, 1, "", "min"], [506, 1, 1, "", "multiply"], [217, 1, 1, "", "native_array"], [511, 1, 1, "", "negative"], [515, 1, 1, "", "not_equal"], [225, 1, 1, "", "ones_like"], [675, 1, 1, "", "optimizer_update"], [809, 1, 1, "", "permute_dims"], [519, 1, 1, "", "positive"], [523, 1, 1, "", "pow"], [928, 1, 1, "", "prod"], [879, 1, 1, "", "random_uniform"], [527, 1, 1, "", "remainder"], [813, 1, 1, "", "repeat"], [817, 1, 1, "", "reshape"], [821, 1, 1, "", "roll"], [531, 1, 1, "", "round"], [535, 1, 1, "", "sign"], [539, 1, 1, "", "sin"], [543, 1, 1, "", "sinh"], [168, 1, 1, "", "softplus"], [906, 1, 1, "", "sort"], [782, 1, 1, "", "sparse_cross_entropy"], [547, 1, 1, "", "sqrt"], [551, 1, 1, "", "square"], [827, 1, 1, "", "squeeze"], [831, 1, 1, "", "stack"], [338, 1, 1, "", "static_abs"], [652, 1, 1, "", "static_adam_step"], [656, 1, 1, "", "static_adam_update"], [351, 1, 1, "", "static_add"], [947, 1, 1, "", "static_all"], [577, 1, 1, "", "static_all_equal"], [952, 1, 1, "", "static_any"], [178, 1, 1, "", "static_arange"], [903, 1, 1, "", "static_argsort"], [183, 1, 1, "", "static_asarray"], [360, 1, 1, "", "static_asinh"], [774, 1, 1, "", "static_binary_cross_entropy"], [259, 1, 1, "", "static_can_cast"], [702, 1, 1, "", "static_cholesky"], [790, 1, 1, "", "static_clip"], [779, 1, 1, "", "static_cross_entropy"], [413, 1, 1, "", "static_divide"], [189, 1, 1, "", "static_empty_like"], [192, 1, 1, "", "static_eye"], [197, 1, 1, "", "static_from_dlpack"], [203, 1, 1, "", "static_full_like"], [605, 1, 1, "", "static_gather_nd"], [661, 1, 1, "", "static_gradient_descent_update"], [665, 1, 1, "", "static_is_variable"], [669, 1, 1, "", "static_lamb_update"], [673, 1, 1, "", "static_lars_update"], [206, 1, 1, "", "static_linspace"], [209, 1, 1, "", "static_logspace"], [214, 1, 1, "", "static_meshgrid"], [508, 1, 1, "", "static_multiply"], [219, 1, 1, "", "static_native_array"], [222, 1, 1, "", "static_ones"], [227, 1, 1, "", "static_ones_like"], [677, 1, 1, "", "static_optimizer_update"], [876, 1, 1, "", "static_randint"], [881, 1, 1, "", "static_random_uniform"], [823, 1, 1, "", "static_roll"], [170, 1, 1, "", "static_softplus"], [908, 1, 1, "", "static_sort"], [784, 1, 1, "", "static_sparse_cross_entropy"], [554, 1, 1, "", "static_subtract"], [559, 1, 1, "", "static_tan"], [564, 1, 1, "", "static_tanh"], [229, 1, 1, "", "static_tril"], [234, 1, 1, "", "static_triu"], [892, 1, 1, "", "static_unique_counts"], [239, 1, 1, "", "static_zeros"], [242, 1, 1, "", "static_zeros_like"], [932, 1, 1, "", "std"], [556, 1, 1, "", "subtract"], [936, 1, 1, "", "sum"], [835, 1, 1, "", "swapaxes"], [561, 1, 1, "", "tan"], [566, 1, 1, "", "tanh"], [839, 1, 1, "", "tile"], [231, 1, 1, "", "tril"], [236, 1, 1, "", "triu"], [570, 1, 1, "", "trunc"], [894, 1, 1, "", "unique_counts"], [940, 1, 1, "", "var"], [843, 1, 1, "", "zero_pad"], [244, 1, 1, "", "zeros_like"]], "ivy.container.creation": [[78, 2, 1, "", "ContainerWithCreation"]], "ivy.container.creation.ContainerWithCreation": [[78, 3, 1, "", "asarray"], [78, 3, 1, "", "empty_like"], [78, 3, 1, "", "from_dlpack"], [78, 3, 1, "", "full_like"], [78, 3, 1, "", "meshgrid"], [78, 3, 1, "", "native_array"], [78, 3, 1, "", "ones_like"], [78, 3, 1, "", "static_arange"], [78, 3, 1, "", "static_asarray"], [78, 3, 1, "", "static_empty_like"], [78, 3, 1, "", "static_eye"], [78, 3, 1, "", "static_from_dlpack"], [78, 3, 1, "", "static_full_like"], [78, 3, 1, "", "static_linspace"], [78, 3, 1, "", "static_logspace"], [78, 3, 1, "", "static_meshgrid"], [78, 3, 1, "", "static_native_array"], [78, 3, 1, "", "static_ones"], [78, 3, 1, "", "static_ones_like"], [78, 3, 1, "", "static_tril"], [78, 3, 1, "", "static_triu"], [78, 3, 1, "", "static_zeros"], [78, 3, 1, "", "static_zeros_like"], [78, 3, 1, "", "tril"], [78, 3, 1, "", "triu"], [78, 3, 1, "", "zeros_like"]], "ivy.container.data_type": [[80, 2, 1, "", "ContainerWithDataTypes"]], "ivy.container.data_type.ContainerWithDataTypes": [[80, 3, 1, "", "can_cast"], [80, 3, 1, "", "static_can_cast"]], "ivy.container.device": [[82, 2, 1, "", "ContainerWithDevice"]], "ivy.container.elementwise": [[84, 2, 1, "", "ContainerWithElementwise"]], "ivy.container.elementwise.ContainerWithElementwise": [[84, 3, 1, "", "abs"], [84, 3, 1, "", "acos"], [84, 3, 1, "", "acosh"], [84, 3, 1, "", "add"], [84, 3, 1, "", "asin"], [84, 3, 1, "", "asinh"], [84, 3, 1, "", "atan"], [84, 3, 1, "", "atan2"], [84, 3, 1, "", "atanh"], [84, 3, 1, "", "bitwise_and"], [84, 3, 1, "", "bitwise_invert"], [84, 3, 1, "", "bitwise_left_shift"], [84, 3, 1, "", "bitwise_or"], [84, 3, 1, "", "bitwise_right_shift"], [84, 3, 1, "", "bitwise_xor"], [84, 3, 1, "", "ceil"], [84, 3, 1, "", "cos"], [84, 3, 1, "", "cosh"], [84, 3, 1, "", "divide"], [84, 3, 1, "", "equal"], [84, 3, 1, "", "erf"], [84, 3, 1, "", "exp"], [84, 3, 1, "", "expm1"], [84, 3, 1, "", "floor"], [84, 3, 1, "", "floor_divide"], [84, 3, 1, "", "greater"], [84, 3, 1, "", "greater_equal"], [84, 3, 1, "", "isfinite"], [84, 3, 1, "", "isinf"], [84, 3, 1, "", "isnan"], [84, 3, 1, "", "less"], [84, 3, 1, "", "less_equal"], [84, 3, 1, "", "log"], [84, 3, 1, "", "log10"], [84, 3, 1, "", "log1p"], [84, 3, 1, "", "log2"], [84, 3, 1, "", "logaddexp"], [84, 3, 1, "", "logical_and"], [84, 3, 1, "", "logical_not"], [84, 3, 1, "", "logical_or"], [84, 3, 1, "", "logical_xor"], [84, 3, 1, "", "multiply"], [84, 3, 1, "", "negative"], [84, 3, 1, "", "not_equal"], [84, 3, 1, "", "positive"], [84, 3, 1, "", "pow"], [84, 3, 1, "", "remainder"], [84, 3, 1, "", "round"], [84, 3, 1, "", "sign"], [84, 3, 1, "", "sin"], [84, 3, 1, "", "sinh"], [84, 3, 1, "", "sqrt"], [84, 3, 1, "", "square"], [84, 3, 1, "", "static_abs"], [84, 3, 1, "", "static_add"], [84, 3, 1, "", "static_asinh"], [84, 3, 1, "", "static_divide"], [84, 3, 1, "", "static_multiply"], [84, 3, 1, "", "static_subtract"], [84, 3, 1, "", "static_tan"], [84, 3, 1, "", "static_tanh"], [84, 3, 1, "", "subtract"], [84, 3, 1, "", "tan"], [84, 3, 1, "", "tanh"], [84, 3, 1, "", "trunc"]], "ivy.container.general": [[86, 2, 1, "", "ContainerWithGeneral"]], "ivy.container.general.ContainerWithGeneral": [[86, 3, 1, "", "all_equal"], [86, 3, 1, "", "clip_vector_norm"], [86, 3, 1, "", "gather_nd"], [86, 3, 1, "", "static_all_equal"], [86, 3, 1, "", "static_gather_nd"]], "ivy.container.gradients": [[88, 2, 1, "", "ContainerWithGradients"]], "ivy.container.gradients.ContainerWithGradients": [[88, 3, 1, "", "adam_step"], [88, 3, 1, "", "adam_update"], [88, 3, 1, "", "gradient_descent_update"], [88, 3, 1, "", "is_variable"], [88, 3, 1, "", "lamb_update"], [88, 3, 1, "", "lars_update"], [88, 3, 1, "", "optimizer_update"], [88, 3, 1, "", "static_adam_step"], [88, 3, 1, "", "static_adam_update"], [88, 3, 1, "", "static_gradient_descent_update"], [88, 3, 1, "", "static_is_variable"], [88, 3, 1, "", "static_lamb_update"], [88, 3, 1, "", "static_lars_update"], [88, 3, 1, "", "static_optimizer_update"]], "ivy.container.image": [[90, 2, 1, "", "ContainerWithImage"]], "ivy.container.layers": [[92, 2, 1, "", "ContainerWithLayers"]], "ivy.container.linear_algebra": [[94, 2, 1, "", "ContainerWithLinearAlgebra"]], "ivy.container.linear_algebra.ContainerWithLinearAlgebra": [[94, 3, 1, "", "cholesky"], [94, 3, 1, "", "matmul"], [94, 3, 1, "", "static_cholesky"]], "ivy.container.losses": [[96, 2, 1, "", "ContainerWithLosses"]], "ivy.container.losses.ContainerWithLosses": [[96, 3, 1, "", "binary_cross_entropy"], [96, 3, 1, "", "cross_entropy"], [96, 3, 1, "", "sparse_cross_entropy"], [96, 3, 1, "", "static_binary_cross_entropy"], [96, 3, 1, "", "static_cross_entropy"], [96, 3, 1, "", "static_sparse_cross_entropy"]], "ivy.container.manipulation": [[98, 2, 1, "", "ContainerWithManipulation"]], "ivy.container.manipulation.ContainerWithManipulation": [[98, 3, 1, "", "clip"], [98, 3, 1, "", "concat"], [98, 3, 1, "", "constant_pad"], [98, 3, 1, "", "expand_dims"], [98, 3, 1, "", "flip"], [98, 3, 1, "", "permute_dims"], [98, 3, 1, "", "repeat"], [98, 3, 1, "", "reshape"], [98, 3, 1, "", "roll"], [98, 3, 1, "", "squeeze"], [98, 3, 1, "", "stack"], [98, 3, 1, "", "static_clip"], [98, 3, 1, "", "static_roll"], [98, 3, 1, "", "swapaxes"], [98, 3, 1, "", "tile"], [98, 3, 1, "", "zero_pad"]], "ivy.container.norms": [[100, 2, 1, "", "ContainerWithNorms"]], "ivy.container.norms.ContainerWithNorms": [[100, 3, 1, "", "layer_norm"]], "ivy.container.random": [[102, 2, 1, "", "ContainerWithRandom"]], "ivy.container.random.ContainerWithRandom": [[102, 3, 1, "", "random_uniform"], [102, 3, 1, "", "static_randint"], [102, 3, 1, "", "static_random_uniform"]], "ivy.container.searching": [[104, 2, 1, "", "ContainerWithSearching"]], "ivy.container.set": [[106, 2, 1, "", "ContainerWithSet"]], "ivy.container.set.ContainerWithSet": [[106, 3, 1, "", "static_unique_counts"], [106, 3, 1, "", "unique_counts"]], "ivy.container.sorting": [[108, 2, 1, "", "ContainerWithSorting"]], "ivy.container.sorting.ContainerWithSorting": [[108, 3, 1, "", "argsort"], [108, 3, 1, "", "sort"], [108, 3, 1, "", "static_argsort"], [108, 3, 1, "", "static_sort"]], "ivy.container.statistical": [[110, 2, 1, "", "ContainerWithStatistical"]], "ivy.container.statistical.ContainerWithStatistical": [[110, 3, 1, "", "einsum"], [110, 3, 1, "", "max"], [110, 3, 1, "", "mean"], [110, 3, 1, "", "min"], [110, 3, 1, "", "prod"], [110, 3, 1, "", "std"], [110, 3, 1, "", "sum"], [110, 3, 1, "", "var"]], "ivy.container.utility": [[112, 2, 1, "", "ContainerWithUtility"]], "ivy.container.utility.ContainerWithUtility": [[112, 3, 1, "", "all"], [112, 3, 1, "", "any"], [112, 3, 1, "", "static_all"], [112, 3, 1, "", "static_any"]], "ivy.container.wrapping": [[114, 1, 1, "", "add_ivy_container_instance_methods"]], "ivy.func_wrapper": [[151, 1, 1, "", "handle_nestable"], [152, 1, 1, "", "handle_out_argument"], [153, 1, 1, "", "infer_device"], [154, 1, 1, "", "infer_dtype"], [155, 1, 1, "", "inputs_to_ivy_arrays"], [156, 1, 1, "", "inputs_to_native_arrays"], [157, 1, 1, "", "outputs_to_ivy_arrays"], [158, 1, 1, "", "to_native_arrays_and_back"]], "ivy.functional.ivy": [[160, 0, 0, "-", "activations"], [172, 0, 0, "-", "compilation"], [174, 0, 0, "-", "constants"], [175, 0, 0, "-", "creation"], [246, 0, 0, "-", "data_type"], [283, 0, 0, "-", "device"], [333, 0, 0, "-", "elementwise"], [572, 0, 0, "-", "general"], [646, 0, 0, "-", "gradients"], [684, 0, 0, "-", "layers"], [697, 0, 0, "-", "linear_algebra"], [769, 0, 0, "-", "losses"], [785, 0, 0, "-", "manipulation"], [845, 0, 0, "-", "meta"], [849, 0, 0, "-", "nest"], [867, 0, 0, "-", "norms"], [872, 0, 0, "-", "random"], [884, 0, 0, "-", "searching"], [889, 0, 0, "-", "set"], [898, 0, 0, "-", "sorting"], [909, 0, 0, "-", "statistical"], [942, 0, 0, "-", "utility"]], "ivy.functional.ivy.activations": [[161, 1, 1, "", "gelu"], [162, 1, 1, "", "leaky_relu"], [163, 1, 1, "", "relu"], [164, 1, 1, "", "sigmoid"], [165, 1, 1, "", "softmax"], [169, 1, 1, "", "softplus"], [171, 1, 1, "", "tanh"]], "ivy.functional.ivy.compilation": [[173, 1, 1, "", "compile"]], "ivy.functional.ivy.constants": [[174, 5, 1, "", "e"], [174, 5, 1, "", "inf"], [174, 5, 1, "", "nan"], [174, 5, 1, "", "newaxis"], [174, 5, 1, "", "pi"]], "ivy.functional.ivy.creation": [[177, 1, 1, "", "arange"], [175, 1, 1, "", "array"], [182, 1, 1, "", "asarray"], [184, 1, 1, "", "empty"], [188, 1, 1, "", "empty_like"], [191, 1, 1, "", "eye"], [196, 1, 1, "", "from_dlpack"], [198, 1, 1, "", "full"], [202, 1, 1, "", "full_like"], [205, 1, 1, "", "linspace"], [208, 1, 1, "", "logspace"], [213, 1, 1, "", "meshgrid"], [218, 1, 1, "", "native_array"], [221, 1, 1, "", "ones"], [226, 1, 1, "", "ones_like"], [232, 1, 1, "", "tril"], [237, 1, 1, "", "triu"], [240, 1, 1, "", "zeros"], [245, 1, 1, "", "zeros_like"]], "ivy.functional.ivy.data_type": [[246, 2, 1, "", "DefaultDtype"], [246, 2, 1, "", "DefaultFloatDtype"], [246, 2, 1, "", "DefaultIntDtype"], [250, 1, 1, "", "as_ivy_dtype"], [251, 1, 1, "", "as_native_dtype"], [252, 1, 1, "", "astype"], [253, 1, 1, "", "broadcast_arrays"], [254, 1, 1, "", "broadcast_to"], [258, 1, 1, "", "can_cast"], [260, 1, 1, "", "closest_valid_dtype"], [261, 1, 1, "", "default_dtype"], [262, 1, 1, "", "default_float_dtype"], [263, 1, 1, "", "default_int_dtype"], [264, 1, 1, "", "dtype"], [265, 1, 1, "", "dtype_bits"], [266, 1, 1, "", "finfo"], [267, 1, 1, "", "function_supported_dtypes"], [268, 1, 1, "", "function_unsupported_dtypes"], [269, 1, 1, "", "iinfo"], [270, 1, 1, "", "invalid_dtype"], [271, 1, 1, "", "is_float_dtype"], [272, 1, 1, "", "is_int_dtype"], [273, 1, 1, "", "promote_types"], [274, 1, 1, "", "result_type"], [275, 1, 1, "", "set_default_dtype"], [276, 1, 1, "", "set_default_float_dtype"], [277, 1, 1, "", "set_default_int_dtype"], [278, 1, 1, "", "type_promote_arrays"], [279, 1, 1, "", "unset_default_dtype"], [280, 1, 1, "", "unset_default_float_dtype"], [281, 1, 1, "", "unset_default_int_dtype"], [282, 1, 1, "", "valid_dtype"]], "ivy.functional.ivy.data_type.DefaultDtype": [[246, 3, 1, "", "__init__"]], "ivy.functional.ivy.data_type.DefaultFloatDtype": [[246, 3, 1, "", "__init__"]], "ivy.functional.ivy.data_type.DefaultIntDtype": [[246, 3, 1, "", "__init__"]], "ivy.functional.ivy.device": [[283, 2, 1, "", "DefaultDevice"], [285, 2, 1, "", "DevClonedItem"], [286, 2, 1, "", "DevClonedIter"], [287, 2, 1, "", "DevClonedNest"], [288, 2, 1, "", "DevDistItem"], [289, 2, 1, "", "DevDistIter"], [290, 2, 1, "", "DevDistNest"], [283, 2, 1, "", "DevManager"], [292, 2, 1, "", "DevMapper"], [293, 2, 1, "", "DevMapperMultiProc"], [283, 2, 1, "", "MultiDev"], [295, 2, 1, "", "MultiDevItem"], [296, 2, 1, "", "MultiDevIter"], [297, 2, 1, "", "MultiDevNest"], [298, 2, 1, "", "Profiler"], [299, 1, 1, "", "as_ivy_dev"], [300, 1, 1, "", "as_native_dev"], [301, 1, 1, "", "clear_mem_on_dev"], [302, 1, 1, "", "default_device"], [303, 1, 1, "", "dev"], [304, 1, 1, "", "dev_clone"], [305, 1, 1, "", "dev_clone_array"], [306, 1, 1, "", "dev_clone_iter"], [307, 1, 1, "", "dev_clone_nest"], [308, 1, 1, "", "dev_dist"], [309, 1, 1, "", "dev_dist_array"], [310, 1, 1, "", "dev_dist_iter"], [311, 1, 1, "", "dev_dist_nest"], [312, 1, 1, "", "dev_unify"], [313, 1, 1, "", "dev_unify_array"], [314, 1, 1, "", "dev_unify_iter"], [315, 1, 1, "", "dev_unify_nest"], [316, 1, 1, "", "dev_util"], [317, 1, 1, "", "get_all_ivy_arrays_on_dev"], [318, 1, 1, "", "gpu_is_available"], [319, 1, 1, "", "num_cpu_cores"], [320, 1, 1, "", "num_gpus"], [321, 1, 1, "", "num_ivy_arrays_on_dev"], [322, 1, 1, "", "percent_used_mem_on_dev"], [323, 1, 1, "", "print_all_ivy_arrays_on_dev"], [324, 1, 1, "", "set_default_device"], [325, 1, 1, "", "set_split_factor"], [326, 1, 1, "", "split_factor"], [327, 1, 1, "", "split_func_call"], [328, 1, 1, "", "to_device"], [329, 1, 1, "", "total_mem_on_dev"], [330, 1, 1, "", "tpu_is_available"], [331, 1, 1, "", "unset_default_device"], [332, 1, 1, "", "used_mem_on_dev"]], "ivy.functional.ivy.device.DefaultDevice": [[283, 3, 1, "", "__enter__"], [283, 3, 1, "", "__init__"]], "ivy.functional.ivy.device.DevManager": [[283, 3, 1, "", "__init__"], [283, 3, 1, "", "da_tune_step"], [283, 4, 1, "", "dim_size"], [283, 3, 1, "", "ds_tune_step"], [283, 3, 1, "", "map"], [283, 3, 1, "", "repeated_config_check"], [283, 4, 1, "", "tune_step"], [283, 4, 1, "", "tuned"]], "ivy.functional.ivy.device.DevMapper": [[292, 3, 1, "", "__init__"], [292, 3, 1, "", "map"]], "ivy.functional.ivy.device.DevMapperMultiProc": [[293, 3, 1, "", "__init__"]], "ivy.functional.ivy.device.MultiDev": [[283, 3, 1, "", "__init__"]], "ivy.functional.ivy.device.MultiDevItem": [[295, 3, 1, "", "__init__"], [295, 3, 1, "", "items"], [295, 3, 1, "", "keys"], [295, 4, 1, "", "shape"], [295, 3, 1, "", "values"]], "ivy.functional.ivy.device.MultiDevIter": [[296, 3, 1, "", "__init__"], [296, 3, 1, "", "at_dev"], [296, 3, 1, "", "at_devs"]], "ivy.functional.ivy.device.MultiDevNest": [[297, 3, 1, "", "__init__"], [297, 3, 1, "", "at_dev"]], "ivy.functional.ivy.device.Profiler": [[298, 3, 1, "", "__init__"], [298, 3, 1, "", "start"], [298, 3, 1, "", "stop"]], "ivy.functional.ivy.elementwise": [[337, 1, 1, "", "abs"], [342, 1, 1, "", "acos"], [346, 1, 1, "", "acosh"], [350, 1, 1, "", "add"], [355, 1, 1, "", "asin"], [359, 1, 1, "", "asinh"], [364, 1, 1, "", "atan"], [368, 1, 1, "", "atan2"], [372, 1, 1, "", "atanh"], [376, 1, 1, "", "bitwise_and"], [380, 1, 1, "", "bitwise_invert"], [384, 1, 1, "", "bitwise_left_shift"], [388, 1, 1, "", "bitwise_or"], [392, 1, 1, "", "bitwise_right_shift"], [396, 1, 1, "", "bitwise_xor"], [400, 1, 1, "", "ceil"], [404, 1, 1, "", "cos"], [408, 1, 1, "", "cosh"], [412, 1, 1, "", "divide"], [417, 1, 1, "", "equal"], [421, 1, 1, "", "erf"], [425, 1, 1, "", "exp"], [429, 1, 1, "", "expm1"], [433, 1, 1, "", "floor"], [437, 1, 1, "", "floor_divide"], [441, 1, 1, "", "greater"], [445, 1, 1, "", "greater_equal"], [449, 1, 1, "", "isfinite"], [453, 1, 1, "", "isinf"], [457, 1, 1, "", "isnan"], [461, 1, 1, "", "less"], [465, 1, 1, "", "less_equal"], [469, 1, 1, "", "log"], [473, 1, 1, "", "log10"], [477, 1, 1, "", "log1p"], [481, 1, 1, "", "log2"], [485, 1, 1, "", "logaddexp"], [489, 1, 1, "", "logical_and"], [493, 1, 1, "", "logical_not"], [497, 1, 1, "", "logical_or"], [501, 1, 1, "", "logical_xor"], [502, 1, 1, "", "maximum"], [503, 1, 1, "", "minimum"], [507, 1, 1, "", "multiply"], [512, 1, 1, "", "negative"], [516, 1, 1, "", "not_equal"], [520, 1, 1, "", "positive"], [524, 1, 1, "", "pow"], [528, 1, 1, "", "remainder"], [532, 1, 1, "", "round"], [536, 1, 1, "", "sign"], [540, 1, 1, "", "sin"], [544, 1, 1, "", "sinh"], [548, 1, 1, "", "sqrt"], [552, 1, 1, "", "square"], [557, 1, 1, "", "subtract"], [562, 1, 1, "", "tan"], [567, 1, 1, "", "tanh"], [571, 1, 1, "", "trunc"]], "ivy.functional.ivy.general": [[576, 1, 1, "", "all_equal"], [578, 1, 1, "", "arg_info"], [579, 1, 1, "", "arg_names"], [580, 1, 1, "", "array_equal"], [581, 1, 1, "", "arrays_equal"], [582, 1, 1, "", "assert_supports_inplace"], [583, 1, 1, "", "cache_fn"], [584, 1, 1, "", "clip_matrix_norm"], [587, 1, 1, "", "clip_vector_norm"], [588, 1, 1, "", "container_types"], [589, 1, 1, "", "copy_array"], [590, 1, 1, "", "cumprod"], [591, 1, 1, "", "cumsum"], [592, 1, 1, "", "current_backend_str"], [593, 1, 1, "", "default"], [594, 1, 1, "", "einops_rearrange"], [595, 1, 1, "", "einops_reduce"], [596, 1, 1, "", "einops_repeat"], [597, 1, 1, "", "exists"], [598, 1, 1, "", "floormod"], [599, 1, 1, "", "fourier_encode"], [600, 1, 1, "", "gather"], [604, 1, 1, "", "gather_nd"], [606, 1, 1, "", "get_all_arrays_in_memory"], [607, 1, 1, "", "get_min_base"], [608, 1, 1, "", "get_min_denominator"], [609, 1, 1, "", "get_num_dims"], [610, 1, 1, "", "get_referrers_recursive"], [611, 1, 1, "", "has_nans"], [612, 1, 1, "", "indices_where"], [613, 1, 1, "", "inplace_arrays_supported"], [614, 1, 1, "", "inplace_decrement"], [615, 1, 1, "", "inplace_increment"], [616, 1, 1, "", "inplace_update"], [617, 1, 1, "", "inplace_variables_supported"], [618, 1, 1, "", "is_array"], [619, 1, 1, "", "is_ivy_array"], [620, 1, 1, "", "is_ivy_container"], [621, 1, 1, "", "is_native_array"], [622, 1, 1, "", "match_kwargs"], [623, 1, 1, "", "multiprocessing"], [624, 1, 1, "", "num_arrays_in_memory"], [625, 1, 1, "", "one_hot"], [626, 1, 1, "", "print_all_arrays_in_memory"], [627, 1, 1, "", "queue_timeout"], [628, 1, 1, "", "scatter_flat"], [629, 1, 1, "", "scatter_nd"], [630, 1, 1, "", "set_min_base"], [631, 1, 1, "", "set_min_denominator"], [632, 1, 1, "", "set_queue_timeout"], [633, 1, 1, "", "set_tmp_dir"], [634, 1, 1, "", "shape"], [635, 1, 1, "", "shape_to_tuple"], [636, 1, 1, "", "stable_divide"], [637, 1, 1, "", "stable_pow"], [638, 1, 1, "", "supports_inplace"], [639, 1, 1, "", "tmp_dir"], [640, 1, 1, "", "to_list"], [641, 1, 1, "", "to_numpy"], [642, 1, 1, "", "to_scalar"], [643, 1, 1, "", "try_else_none"], [644, 1, 1, "", "unstack"], [645, 1, 1, "", "value_is_nan"]], "ivy.functional.ivy.gradients": [[646, 2, 1, "", "GradientTracking"], [651, 1, 1, "", "adam_step"], [655, 1, 1, "", "adam_update"], [657, 1, 1, "", "execute_with_gradients"], [660, 1, 1, "", "gradient_descent_update"], [664, 1, 1, "", "is_variable"], [668, 1, 1, "", "lamb_update"], [672, 1, 1, "", "lars_update"], [676, 1, 1, "", "optimizer_update"], [678, 1, 1, "", "set_with_grads"], [679, 1, 1, "", "stop_gradient"], [680, 1, 1, "", "unset_with_grads"], [681, 1, 1, "", "variable"], [682, 1, 1, "", "variable_data"], [683, 1, 1, "", "with_grads"]], "ivy.functional.ivy.gradients.GradientTracking": [[646, 3, 1, "", "__init__"]], "ivy.functional.ivy.layers": [[685, 1, 1, "", "conv1d"], [686, 1, 1, "", "conv1d_transpose"], [687, 1, 1, "", "conv2d"], [688, 1, 1, "", "conv2d_transpose"], [689, 1, 1, "", "conv3d"], [690, 1, 1, "", "conv3d_transpose"], [691, 1, 1, "", "depthwise_conv2d"], [692, 1, 1, "", "dropout"], [693, 1, 1, "", "linear"], [694, 1, 1, "", "lstm_update"], [695, 1, 1, "", "multi_head_attention"], [696, 1, 1, "", "scaled_dot_product_attention"]], "ivy.functional.ivy.linear_algebra": [[701, 1, 1, "", "cholesky"], [705, 1, 1, "", "cross"], [708, 1, 1, "", "det"], [711, 1, 1, "", "diagonal"], [714, 1, 1, "", "eigh"], [717, 1, 1, "", "eigvalsh"], [720, 1, 1, "", "inv"], [724, 1, 1, "", "matmul"], [727, 1, 1, "", "matrix_norm"], [728, 1, 1, "", "matrix_power"], [731, 1, 1, "", "matrix_rank"], [734, 1, 1, "", "matrix_transpose"], [737, 1, 1, "", "outer"], [740, 1, 1, "", "pinv"], [743, 1, 1, "", "qr"], [744, 1, 1, "", "slogdet"], [747, 1, 1, "", "solve"], [750, 1, 1, "", "svd"], [753, 1, 1, "", "svdvals"], [756, 1, 1, "", "tensordot"], [759, 1, 1, "", "trace"], [762, 1, 1, "", "vecdot"], [765, 1, 1, "", "vector_norm"], [768, 1, 1, "", "vector_to_skew_symmetric_matrix"]], "ivy.functional.ivy.losses": [[773, 1, 1, "", "binary_cross_entropy"], [778, 1, 1, "", "cross_entropy"], [783, 1, 1, "", "sparse_cross_entropy"]], "ivy.functional.ivy.manipulation": [[789, 1, 1, "", "clip"], [794, 1, 1, "", "concat"], [798, 1, 1, "", "constant_pad"], [802, 1, 1, "", "expand_dims"], [806, 1, 1, "", "flip"], [810, 1, 1, "", "permute_dims"], [814, 1, 1, "", "repeat"], [818, 1, 1, "", "reshape"], [822, 1, 1, "", "roll"], [824, 1, 1, "", "split"], [828, 1, 1, "", "squeeze"], [832, 1, 1, "", "stack"], [836, 1, 1, "", "swapaxes"], [840, 1, 1, "", "tile"], [844, 1, 1, "", "zero_pad"]], "ivy.functional.ivy.meta": [[846, 1, 1, "", "fomaml_step"], [847, 1, 1, "", "maml_step"], [848, 1, 1, "", "reptile_step"]], "ivy.functional.ivy.nest": [[850, 1, 1, "", "all_nested_indices"], [851, 1, 1, "", "copy_nest"], [852, 1, 1, "", "index_nest"], [853, 1, 1, "", "insert_into_nest_at_index"], [854, 1, 1, "", "insert_into_nest_at_indices"], [855, 1, 1, "", "map"], [856, 1, 1, "", "map_nest_at_index"], [857, 1, 1, "", "map_nest_at_indices"], [858, 1, 1, "", "multi_index_nest"], [859, 1, 1, "", "nested_any"], [860, 1, 1, "", "nested_indices_where"], [861, 1, 1, "", "nested_map"], [862, 1, 1, "", "nested_multi_map"], [863, 1, 1, "", "prune_nest_at_index"], [864, 1, 1, "", "prune_nest_at_indices"], [865, 1, 1, "", "set_nest_at_index"], [866, 1, 1, "", "set_nest_at_indices"]], "ivy.functional.ivy.norms": [[871, 1, 1, "", "layer_norm"]], "ivy.functional.ivy.random": [[873, 1, 1, "", "multinomial"], [875, 1, 1, "", "randint"], [877, 1, 1, "", "random_normal"], [880, 1, 1, "", "random_uniform"], [882, 1, 1, "", "seed"], [883, 1, 1, "", "shuffle"]], "ivy.functional.ivy.searching": [[885, 1, 1, "", "argmax"], [886, 1, 1, "", "argmin"], [887, 1, 1, "", "nonzero"], [888, 1, 1, "", "where"]], "ivy.functional.ivy.set": [[890, 1, 1, "", "unique_all"], [895, 1, 1, "", "unique_counts"], [896, 1, 1, "", "unique_inverse"], [897, 1, 1, "", "unique_values"]], "ivy.functional.ivy.sorting": [[902, 1, 1, "", "argsort"], [907, 1, 1, "", "sort"]], "ivy.functional.ivy.statistical": [[913, 1, 1, "", "einsum"], [917, 1, 1, "", "max"], [921, 1, 1, "", "mean"], [925, 1, 1, "", "min"], [929, 1, 1, "", "prod"], [933, 1, 1, "", "std"], [937, 1, 1, "", "sum"], [941, 1, 1, "", "var"]], "ivy.functional.ivy.utility": [[946, 1, 1, "", "all"], [951, 1, 1, "", "any"]], "ivy.inspection": [[957, 1, 1, "", "add_array_specs"], [958, 1, 1, "", "fn_array_spec"]], "ivy.stateful": [[961, 0, 0, "-", "activations"], [964, 0, 0, "-", "converters"], [966, 0, 0, "-", "initializers"], [975, 0, 0, "-", "layers"], [987, 0, 0, "-", "module"], [989, 0, 0, "-", "norms"], [991, 0, 0, "-", "optimizers"], [997, 0, 0, "-", "sequential"]], "ivy.stateful.activations": [[962, 2, 1, "", "GEGLU"], [963, 2, 1, "", "GELU"]], "ivy.stateful.activations.GEGLU": [[962, 3, 1, "", "__init__"]], "ivy.stateful.activations.GELU": [[963, 3, 1, "", "__init__"]], "ivy.stateful.converters": [[965, 1, 1, "", "to_ivy_module"]], "ivy.stateful.initializers": [[966, 2, 1, "", "Constant"], [968, 2, 1, "", "FirstLayerSiren"], [969, 2, 1, "", "GlorotUniform"], [966, 2, 1, "", "KaimingNormal"], [971, 2, 1, "", "Ones"], [972, 2, 1, "", "Siren"], [966, 2, 1, "", "Uniform"], [974, 2, 1, "", "Zeros"]], "ivy.stateful.initializers.Constant": [[966, 3, 1, "", "__init__"], [966, 3, 1, "", "create_variables"]], "ivy.stateful.initializers.FirstLayerSiren": [[968, 3, 1, "", "__init__"]], "ivy.stateful.initializers.GlorotUniform": [[969, 3, 1, "", "__init__"]], "ivy.stateful.initializers.KaimingNormal": [[966, 3, 1, "", "__init__"], [966, 3, 1, "", "create_variables"]], "ivy.stateful.initializers.Ones": [[971, 3, 1, "", "__init__"]], "ivy.stateful.initializers.Siren": [[972, 3, 1, "", "__init__"]], "ivy.stateful.initializers.Uniform": [[966, 3, 1, "", "__init__"], [966, 3, 1, "", "create_variables"]], "ivy.stateful.initializers.Zeros": [[974, 3, 1, "", "__init__"]], "ivy.stateful.layers": [[976, 2, 1, "", "Conv1D"], [977, 2, 1, "", "Conv1DTranspose"], [978, 2, 1, "", "Conv2D"], [979, 2, 1, "", "Conv2DTranspose"], [980, 2, 1, "", "Conv3D"], [981, 2, 1, "", "Conv3DTranspose"], [982, 2, 1, "", "DepthwiseConv2D"], [983, 2, 1, "", "Dropout"], [984, 2, 1, "", "LSTM"], [985, 2, 1, "", "Linear"], [986, 2, 1, "", "MultiHeadAttention"]], "ivy.stateful.layers.Conv1D": [[976, 3, 1, "", "__init__"]], "ivy.stateful.layers.Conv1DTranspose": [[977, 3, 1, "", "__init__"]], "ivy.stateful.layers.Conv2D": [[978, 3, 1, "", "__init__"]], "ivy.stateful.layers.Conv2DTranspose": [[979, 3, 1, "", "__init__"]], "ivy.stateful.layers.Conv3D": [[980, 3, 1, "", "__init__"]], "ivy.stateful.layers.Conv3DTranspose": [[981, 3, 1, "", "__init__"]], "ivy.stateful.layers.DepthwiseConv2D": [[982, 3, 1, "", "__init__"]], "ivy.stateful.layers.Dropout": [[983, 3, 1, "", "__init__"]], "ivy.stateful.layers.LSTM": [[984, 3, 1, "", "__init__"], [984, 3, 1, "", "get_initial_state"]], "ivy.stateful.layers.Linear": [[985, 3, 1, "", "__init__"]], "ivy.stateful.layers.MultiHeadAttention": [[986, 3, 1, "", "__init__"]], "ivy.stateful.module": [[988, 2, 1, "", "Module"]], "ivy.stateful.module.Module": [[988, 3, 1, "", "__init__"], [988, 3, 1, "", "build"], [988, 4, 1, "", "build_mode"], [988, 4, 1, "", "built"], [988, 3, 1, "", "check_submod_rets"], [988, 3, 1, "", "get_mod_key"], [988, 3, 1, "", "mod_depth"], [988, 3, 1, "", "mod_height"], [988, 3, 1, "", "mod_with_top_mod_key_chain"], [988, 3, 1, "", "save_weights"], [988, 3, 1, "", "show_mod_in_top_mod"], [988, 3, 1, "", "show_structure"], [988, 3, 1, "", "show_v_in_top_v"], [988, 3, 1, "", "sub_mods"], [988, 3, 1, "", "track_submod_call_order"], [988, 3, 1, "", "track_submod_rets"], [988, 3, 1, "", "v_with_top_v_key_chains"]], "ivy.stateful.norms": [[990, 2, 1, "", "LayerNorm"]], "ivy.stateful.norms.LayerNorm": [[990, 3, 1, "", "__init__"]], "ivy.stateful.optimizers": [[992, 2, 1, "", "Adam"], [993, 2, 1, "", "LAMB"], [994, 2, 1, "", "LARS"], [995, 2, 1, "", "Optimizer"], [996, 2, 1, "", "SGD"]], "ivy.stateful.optimizers.Adam": [[992, 3, 1, "", "__init__"], [992, 3, 1, "", "set_state"], [992, 4, 1, "", "state"]], "ivy.stateful.optimizers.LAMB": [[993, 3, 1, "", "__init__"], [993, 3, 1, "", "set_state"], [993, 4, 1, "", "state"]], "ivy.stateful.optimizers.LARS": [[994, 3, 1, "", "__init__"], [994, 3, 1, "", "set_state"], [994, 4, 1, "", "state"]], "ivy.stateful.optimizers.Optimizer": [[995, 3, 1, "", "__init__"], [995, 3, 1, "", "set_state"], [995, 3, 1, "", "step"]], "ivy.stateful.optimizers.SGD": [[996, 3, 1, "", "__init__"], [996, 3, 1, "", "set_state"], [996, 4, 1, "", "state"]], "ivy.stateful.sequential": [[998, 2, 1, "", "Sequential"]], "ivy.stateful.sequential.Sequential": [[998, 3, 1, "", "__init__"]], "ivy.verbosity": [[1001, 1, 1, "", "cprint"]]}, "objtypes": {"0": "py:module", "1": "py:function", "2": "py:class", "3": "py:method", "4": "py:property", "5": "py:data"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "function", "Python function"], "2": ["py", "class", "Python class"], "3": ["py", "method", "Python method"], "4": ["py", "property", "Python property"], "5": ["py", "data", "Python data"]}, "titleterms": {"backend": [0, 116, 123, 132, 149], "handler": [0, 132], "choose_random_backend": 2, "clear_backend_stack": 3, "current_backend": 4, "get_backend": 5, "set_backend": 6, "try_import_ivy_jax": 7, "try_import_ivy_mxnet": 8, "try_import_ivy_numpi": 9, "try_import_ivy_tf": 10, "try_import_ivy_torch": 11, "unset_backend": 12, "background": [13, 953], "ml": 14, "explos": 14, "standard": 15, "skeptic": 15, "complimentari": 15, "vs": [15, 149], "competit": 15, "do": [15, 121], "work": [15, 21], "The": [15, 19, 134, 149], "arrai": [15, 23, 117, 120, 125, 134, 167, 180, 186, 194, 200, 211, 216, 224, 230, 235, 243, 256, 335, 340, 344, 348, 353, 357, 362, 366, 370, 374, 378, 382, 386, 390, 394, 398, 402, 406, 410, 415, 419, 423, 427, 431, 435, 439, 443, 447, 451, 455, 459, 463, 467, 471, 475, 479, 483, 487, 491, 495, 499, 505, 510, 514, 518, 522, 526, 530, 534, 538, 542, 546, 550, 555, 560, 565, 569, 574, 602, 649, 699, 704, 707, 710, 713, 716, 719, 722, 726, 730, 733, 736, 739, 742, 746, 749, 752, 755, 758, 761, 764, 767, 771, 776, 781, 787, 792, 796, 800, 804, 808, 812, 816, 820, 826, 830, 834, 838, 842, 869, 893, 900, 905, 911, 915, 919, 923, 927, 931, 935, 939, 944, 949], "api": [15, 20, 116, 120, 126, 132, 134, 136, 137], "why": [16, 121], "unifi": [16, 134], "No": [16, 18], "more": 16, "re": 16, "implement": 16, "infinit": 16, "shelf": 16, "life": 16, "contribut": [17, 953], "set": [18, 59, 105, 123, 889], "up": 18, "clone": 18, "ivi": [18, 116, 119, 121, 125, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 167, 168, 169, 170, 177, 178, 180, 181, 182, 183, 186, 187, 188, 189, 191, 192, 194, 195, 196, 197, 200, 201, 202, 203, 205, 206, 208, 209, 211, 212, 213, 214, 216, 217, 218, 219, 221, 222, 224, 225, 226, 227, 229, 230, 231, 232, 234, 235, 236, 237, 239, 240, 242, 243, 244, 245, 256, 257, 258, 259, 335, 336, 337, 338, 340, 341, 342, 344, 345, 346, 348, 349, 350, 351, 353, 354, 355, 357, 358, 359, 360, 362, 363, 364, 366, 367, 368, 370, 371, 372, 374, 375, 376, 378, 379, 380, 382, 383, 384, 386, 387, 388, 390, 391, 392, 394, 395, 396, 398, 399, 400, 402, 403, 404, 406, 407, 408, 410, 411, 412, 413, 415, 416, 417, 419, 420, 421, 423, 424, 425, 427, 428, 429, 431, 432, 433, 435, 436, 437, 439, 440, 441, 443, 444, 445, 447, 448, 449, 451, 452, 453, 455, 456, 457, 459, 460, 461, 463, 464, 465, 467, 468, 469, 471, 472, 473, 475, 476, 477, 479, 480, 481, 483, 484, 485, 487, 488, 489, 491, 492, 493, 495, 496, 497, 499, 500, 501, 505, 506, 507, 508, 510, 511, 512, 514, 515, 516, 518, 519, 520, 522, 523, 524, 526, 527, 528, 530, 531, 532, 534, 535, 536, 538, 539, 540, 542, 543, 544, 546, 547, 548, 550, 551, 552, 554, 555, 556, 557, 559, 560, 561, 562, 564, 565, 566, 567, 569, 570, 571, 574, 575, 576, 577, 586, 587, 602, 603, 604, 605, 649, 650, 651, 652, 654, 655, 656, 659, 660, 661, 663, 664, 665, 667, 668, 669, 671, 672, 673, 675, 676, 677, 699, 700, 701, 702, 704, 705, 707, 708, 710, 711, 713, 714, 716, 717, 719, 720, 722, 723, 724, 726, 727, 730, 731, 733, 734, 736, 737, 739, 740, 742, 743, 746, 747, 749, 750, 752, 753, 755, 756, 758, 759, 761, 762, 764, 765, 767, 768, 771, 772, 773, 774, 776, 777, 778, 779, 781, 782, 783, 784, 787, 788, 789, 790, 792, 793, 794, 796, 797, 798, 800, 801, 802, 804, 805, 806, 808, 809, 810, 812, 813, 814, 816, 817, 818, 820, 821, 822, 823, 826, 827, 828, 830, 831, 832, 834, 835, 836, 838, 839, 840, 842, 843, 844, 869, 870, 871, 875, 876, 879, 880, 881, 892, 893, 894, 895, 900, 901, 902, 903, 905, 906, 907, 908, 911, 912, 913, 915, 916, 917, 919, 920, 921, 923, 924, 925, 927, 928, 929, 931, 932, 933, 935, 936, 937, 939, 940, 941, 944, 945, 946, 947, 949, 950, 951, 952], "pycharm": 18, "virtual": 18, "environ": 18, "docker": [18, 19, 21], "us": [18, 21, 135], "miniconda": [18, 21], "venv": [18, 21], "interpret": 18, "window": 18, "maco": 18, "ubuntu": 18, "github": 18, "codespac": 18, "pre": [18, 130], "commit": [18, 19, 130], "basic": 19, "get": 19, "help": 19, "todo": 19, "list": 19, "issu": 19, "manag": 19, "your": 19, "fork": 19, "who": 19, "To": 19, "ask": 19, "With": 19, "command": 19, "line": 19, "browser": 19, "pull": 19, "request": 19, "small": 19, "often": 19, "run": 19, "test": [19, 120, 121], "local": 19, "open": 20, "task": 20, "function": [20, 117, 121, 122, 124, 126, 127, 128, 132, 137, 149], "format": [20, 130], "frontend": [20, 137], "build": [21, 132], "doc": 21, "dockerless": 21, "document": 21, "pipelin": [21, 149], "make_doc": 21, "sh": 21, "entrypoint": 21, "_make_doc": 21, "generate_src_rst_fil": 21, "py": 21, "sphinx": 21, "correct_built_html_fil": 21, "remove_fil": 21, "data": [22, 33, 79, 121, 127, 135, 149, 246, 889, 890, 891, 895, 897], "class": [22, 134, 960], "activ": [24, 70, 160, 961], "arraywithactiv": 25, "convers": 26, "args_to_ivi": 27, "args_to_n": 28, "to_ivi": 29, "to_n": 30, "creation": [31, 77, 175], "arraywithcr": 32, "type": [33, 79, 122, 127, 149, 246], "arraywithdatatyp": 34, "devic": [35, 81, 117, 128, 283], "arraywithdevic": 36, "elementwis": [37, 83, 333], "arraywithelementwis": 38, "gener": [39, 85, 121, 572], "arraywithgener": 40, "gradient": [41, 87, 646], "arraywithgradi": 42, "imag": [43, 89], "arraywithimag": 44, "layer": [45, 91, 684, 975], "arraywithlay": 46, "linear": [47, 93, 693, 697, 985], "algebra": [47, 93, 697], "arraywithlinearalgebra": 48, "loss": [49, 95, 769], "arraywithloss": 50, "manipul": [51, 97, 785], "arraywithmanipul": 52, "norm": [53, 99, 867, 989], "arraywithnorm": 54, "random": [55, 101, 872], "arraywithrandom": 56, "search": [57, 103, 884], "arraywithsearch": 58, "arraywithset": 60, "sort": [61, 107, 898, 904, 905, 906, 907], "arraywithsort": 62, "statist": [63, 109, 909], "arraywithstatist": 64, "util": [65, 111, 942], "arraywithutil": 66, "wrap": [67, 113, 124], "add_ivy_array_instance_method": 68, "contain": [69, 74, 75, 126, 135, 168, 170, 178, 181, 183, 187, 189, 192, 195, 197, 201, 203, 206, 209, 212, 214, 217, 219, 222, 225, 227, 229, 231, 234, 236, 239, 242, 244, 257, 259, 336, 338, 341, 345, 349, 351, 354, 358, 360, 363, 367, 371, 375, 379, 383, 387, 391, 395, 399, 403, 407, 411, 413, 416, 420, 424, 428, 432, 436, 440, 444, 448, 452, 456, 460, 464, 468, 472, 476, 480, 484, 488, 492, 496, 500, 506, 508, 511, 515, 519, 523, 527, 531, 535, 539, 543, 547, 551, 554, 556, 559, 561, 564, 566, 570, 575, 577, 586, 603, 605, 650, 652, 654, 656, 659, 661, 663, 665, 667, 669, 671, 673, 675, 677, 700, 702, 723, 772, 774, 777, 779, 782, 784, 788, 790, 793, 797, 801, 805, 809, 813, 817, 821, 823, 827, 831, 835, 839, 843, 870, 876, 879, 881, 892, 894, 901, 903, 906, 908, 912, 916, 920, 924, 928, 932, 936, 940, 945, 947, 950, 952], "containerwithactiv": 71, "base": 72, "containerbas": 73, "multidevcontain": 76, "containerwithcr": 78, "containerwithdatatyp": 80, "containerwithdevic": 82, "containerwithelementwis": 84, "containerwithgener": 86, "containerwithgradi": 88, "containerwithimag": 90, "containerwithlay": 92, "containerwithlinearalgebra": 94, "containerwithloss": 96, "containerwithmanipul": 98, "containerwithnorm": 100, "containerwithrandom": 102, "containerwithsearch": 104, "containerwithset": 106, "containerwithsort": 108, "containerwithstatist": 110, "containerwithutil": 112, "add_ivy_container_instance_method": 114, "deep": 115, "dive": 115, "navig": 116, "code": 116, "categor": 116, "submodul": 116, "design": [116, 131, 953], "argument": [117, 127, 128, 129], "exampl": [117, 119, 130], "out": [117, 129], "dtype": [117, 264], "number": 117, "oper": [117, 134, 149], "integ": 117, "sequenc": 117, "nestabl": [117, 122, 126], "docstr": [118, 119], "tan": [119, 558, 560, 561, 562], "roll": [119, 819, 820, 821, 822], "add": [119, 347, 348, 349, 350], "hypothesi": 121, "import": 121, "strategi": 121, "integr": 121, "we": 121, "need": 121, "helper": 121, "how": 121, "write": 121, "effect": 121, "bonu": 121, "extend": 121, "featur": 121, "self": 121, "consist": 121, "explicit": 121, "test_array_funct": 121, "primari": 122, "composit": 122, "mix": 122, "standalon": 122, "conveni": 122, "nativ": 125, "handl": 125, "instanc": [126, 134], "method": [126, 134, 135], "static": 126, "special": 126, "modul": [127, 128, 136, 987, 988], "other": [127, 128], "inplac": 129, "updat": 129, "copi": 129, "lint": 130, "check": [130, 149], "hook": 130, "automat": 130, "reformat": 130, "befor": 130, "block": 132, "framework": [132, 133, 960], "graph": [132, 137], "compil": [132, 137, 172, 173], "monkei": 134, "patch": 134, "construct": 135, "represent": 135, "recurs": 135, "built": 135, "ins": 135, "access": 135, "save": 135, "load": 135, "comparison": 135, "custom": [135, 149], "case": 135, "compartment": 135, "configur": 135, "network": [135, 137], "weight": 135, "state": [136, 149], "initi": [136, 966], "optim": [136, 991, 995], "transpil": 137, "role": 137, "convert": [137, 964], "model": [137, 144, 149], "builder": 139, "ecosystem": 140, "gym": [141, 148], "mech": 142, "memori": [143, 148], "robot": [145, 148], "vision": [146, 148], "extens": [147, 953], "appli": 148, "librari": 148, "mechan": 148, "faq": 149, "maintain": 149, "version": 149, "dynam": 149, "size": 149, "shape": [149, 634, 889, 890, 891, 895, 897], "control": 149, "flow": 149, "auto": 149, "differenti": 149, "replica": 149, "parallel": 149, "support": 149, "altern": 149, "structur": 149, "func": 150, "wrapper": 150, "handle_nest": 151, "handle_out_argu": 152, "infer_devic": 153, "infer_dtyp": 154, "inputs_to_ivy_arrai": 155, "inputs_to_native_arrai": 156, "outputs_to_ivy_arrai": 157, "to_native_arrays_and_back": 158, "gelu": [161, 963], "leaky_relu": 162, "relu": 163, "sigmoid": 164, "softmax": 165, "softplu": [166, 167, 168, 169], "static_softplu": 170, "tanh": [171, 563, 565, 566, 567], "constant": 174, "note": [175, 193, 196], "arang": [176, 177], "static_arang": 178, "asarrai": [179, 180, 181, 182], "static_asarrai": 183, "empti": 184, "empty_lik": [185, 186, 187, 188], "static_empty_lik": 189, "ey": [190, 191], "static_ey": 192, "from_dlpack": [193, 194, 195, 196], "static_from_dlpack": 197, "full": 198, "full_lik": [199, 200, 201, 202], "static_full_lik": 203, "linspac": [204, 205], "static_linspac": 206, "logspac": [207, 208], "static_logspac": 209, "meshgrid": [210, 211, 212, 213], "static_meshgrid": 214, "native_arrai": [215, 216, 217, 218], "static_native_arrai": 219, "ones": [220, 221], "static_on": 222, "ones_lik": [223, 224, 225, 226], "static_ones_lik": 227, "tril": [228, 230, 231, 232], "static_tril": 229, "triu": [233, 235, 236, 237], "static_triu": 234, "zero": [238, 240, 974], "static_zero": 239, "zeros_lik": [241, 243, 244, 245], "static_zeros_lik": 242, "as_ivy_dtyp": 250, "as_native_dtyp": 251, "astyp": 252, "broadcast_arrai": 253, "broadcast_to": 254, "can_cast": [255, 256, 257, 258], "static_can_cast": 259, "closest_valid_dtyp": 260, "default_dtyp": 261, "default_float_dtyp": 262, "default_int_dtyp": 263, "dtype_bit": 265, "finfo": 266, "function_supported_dtyp": 267, "function_unsupported_dtyp": 268, "iinfo": 269, "invalid_dtyp": 270, "is_float_dtyp": 271, "is_int_dtyp": 272, "promote_typ": 273, "result_typ": 274, "set_default_dtyp": 275, "set_default_float_dtyp": 276, "set_default_int_dtyp": 277, "type_promote_arrai": 278, "unset_default_dtyp": 279, "unset_default_float_dtyp": 280, "unset_default_int_dtyp": 281, "valid_dtyp": 282, "devcloneditem": 285, "devclonedit": 286, "devclonednest": 287, "devdistitem": 288, "devdistit": 289, "devdistnest": 290, "devmapp": 292, "devmappermultiproc": 293, "multidevitem": 295, "multidevit": 296, "multidevnest": 297, "profil": 298, "as_ivy_dev": 299, "as_native_dev": 300, "clear_mem_on_dev": 301, "default_devic": 302, "dev": 303, "dev_clon": 304, "dev_clone_arrai": 305, "dev_clone_it": 306, "dev_clone_nest": 307, "dev_dist": 308, "dev_dist_arrai": 309, "dev_dist_it": 310, "dev_dist_nest": 311, "dev_unifi": 312, "dev_unify_arrai": 313, "dev_unify_it": 314, "dev_unify_nest": 315, "dev_util": 316, "get_all_ivy_arrays_on_dev": 317, "gpu_is_avail": 318, "num_cpu_cor": 319, "num_gpu": 320, "num_ivy_arrays_on_dev": 321, "percent_used_mem_on_dev": 322, "print_all_ivy_arrays_on_dev": 323, "set_default_devic": 324, "set_split_factor": 325, "split_factor": 326, "split_func_cal": 327, "to_devic": 328, "total_mem_on_dev": 329, "tpu_is_avail": 330, "unset_default_devic": 331, "used_mem_on_dev": 332, "ab": [334, 335, 336, 337], "static_ab": 338, "aco": [339, 340, 341, 342], "acosh": [343, 344, 345, 346], "static_add": 351, "asin": [352, 353, 354, 355], "asinh": [356, 357, 358, 359], "static_asinh": 360, "atan": [361, 362, 363, 364], "atan2": [365, 366, 367, 368], "atanh": [369, 370, 371, 372], "bitwise_and": [373, 374, 375, 376], "bitwise_invert": [377, 378, 379, 380], "bitwise_left_shift": [381, 382, 383, 384], "bitwise_or": [385, 386, 387, 388], "bitwise_right_shift": [389, 390, 391, 392], "bitwise_xor": [393, 394, 395, 396], "ceil": [397, 398, 399, 400], "co": [401, 402, 403, 404], "cosh": [405, 406, 407, 408], "divid": [409, 410, 411, 412], "static_divid": 413, "equal": [414, 415, 416, 417], "erf": [418, 419, 420, 421], "exp": [422, 423, 424, 425], "expm1": [426, 427, 428, 429], "floor": [430, 431, 432, 433], "floor_divid": [434, 435, 436, 437], "greater": [438, 439, 440, 441], "greater_equ": [442, 443, 444, 445], "isfinit": [446, 447, 448, 449], "isinf": [450, 451, 452, 453], "isnan": [454, 455, 456, 457], "less": [458, 459, 460, 461], "less_equ": [462, 463, 464, 465], "log": [466, 467, 468, 469], "log10": [470, 471, 472, 473], "log1p": [474, 475, 476, 477], "log2": [478, 479, 480, 481], "logaddexp": [482, 483, 484, 485], "logical_and": [486, 487, 488, 489], "logical_not": [490, 491, 492, 493], "logical_or": [494, 495, 496, 497], "logical_xor": [498, 499, 500, 501], "maximum": 502, "minimum": 503, "multipli": [504, 505, 506, 507], "static_multipli": 508, "neg": [509, 510, 511, 512], "not_equ": [513, 514, 515, 516], "posit": [517, 518, 519, 520], "pow": [521, 522, 523, 524], "remaind": [525, 526, 527, 528], "round": [529, 530, 531, 532], "sign": [533, 534, 535, 536], "sin": [537, 538, 539, 540], "sinh": [541, 542, 543, 544], "sqrt": [545, 546, 547, 548], "squar": [549, 550, 551, 552], "subtract": [553, 555, 556, 557], "static_subtract": 554, "static_tan": 559, "static_tanh": 564, "trunc": [568, 569, 570, 571], "all_equ": [573, 574, 575, 576], "static_all_equ": 577, "arg_info": 578, "arg_nam": 579, "array_equ": 580, "arrays_equ": 581, "assert_supports_inplac": 582, "cache_fn": 583, "clip_matrix_norm": 584, "clip_vector_norm": [585, 586, 587], "container_typ": 588, "copy_arrai": 589, "cumprod": 590, "cumsum": 591, "current_backend_str": 592, "default": 593, "einops_rearrang": 594, "einops_reduc": 595, "einops_repeat": 596, "exist": 597, "floormod": 598, "fourier_encod": 599, "gather": 600, "gather_nd": [601, 602, 603, 604], "static_gather_nd": 605, "get_all_arrays_in_memori": 606, "get_min_bas": 607, "get_min_denomin": 608, "get_num_dim": 609, "get_referrers_recurs": 610, "has_nan": 611, "indices_wher": 612, "inplace_arrays_support": 613, "inplace_decr": 614, "inplace_incr": 615, "inplace_upd": 616, "inplace_variables_support": 617, "is_arrai": 618, "is_ivy_arrai": 619, "is_ivy_contain": 620, "is_native_arrai": 621, "match_kwarg": 622, "multiprocess": 623, "num_arrays_in_memori": 624, "one_hot": 625, "print_all_arrays_in_memori": 626, "queue_timeout": 627, "scatter_flat": 628, "scatter_nd": 629, "set_min_bas": 630, "set_min_denomin": 631, "set_queue_timeout": 632, "set_tmp_dir": 633, "shape_to_tupl": 635, "stable_divid": 636, "stable_pow": 637, "supports_inplac": 638, "tmp_dir": 639, "to_list": 640, "to_numpi": 641, "to_scalar": 642, "try_else_non": 643, "unstack": 644, "value_is_nan": 645, "adam_step": [648, 649, 650, 651], "static_adam_step": 652, "adam_upd": [653, 654, 655], "static_adam_upd": 656, "execute_with_gradi": 657, "gradient_descent_upd": [658, 659, 660], "static_gradient_descent_upd": 661, "is_vari": [662, 663, 664], "static_is_vari": 665, "lamb_upd": [666, 667, 668], "static_lamb_upd": 669, "lars_upd": [670, 671, 672], "static_lars_upd": 673, "optimizer_upd": [674, 675, 676], "static_optimizer_upd": 677, "set_with_grad": 678, "stop_gradi": 679, "unset_with_grad": 680, "variabl": 681, "variable_data": 682, "with_grad": 683, "conv1d": [685, 976], "conv1d_transpos": 686, "conv2d": [687, 978], "conv2d_transpos": 688, "conv3d": [689, 980], "conv3d_transpos": 690, "depthwise_conv2d": 691, "dropout": [692, 983], "lstm_updat": 694, "multi_head_attent": 695, "scaled_dot_product_attent": 696, "choleski": [698, 699, 700, 701], "static_choleski": 702, "cross": [703, 704, 705], "det": [706, 707, 708], "diagon": [709, 710, 711], "eigh": [712, 713, 714], "eigvalsh": [715, 716, 717], "inv": [718, 719, 720], "matmul": [721, 722, 723, 724], "matrix_norm": [725, 726, 727], "matrix_pow": 728, "matrix_rank": [729, 730, 731], "matrix_transpos": [732, 733, 734], "outer": [735, 736, 737], "pinv": [738, 739, 740], "qr": [741, 742, 743], "slogdet": 744, "solv": [745, 746, 747], "svd": [748, 749, 750], "svdval": [751, 752, 753], "tensordot": [754, 755, 756], "trace": [757, 758, 759], "vecdot": [760, 761, 762], "vector_norm": [763, 764, 765], "vector_to_skew_symmetric_matrix": [766, 767, 768], "binary_cross_entropi": [770, 771, 772, 773], "static_binary_cross_entropi": 774, "cross_entropi": [775, 776, 777, 778], "static_cross_entropi": 779, "sparse_cross_entropi": [780, 781, 782, 783], "static_sparse_cross_entropi": 784, "clip": [786, 787, 788, 789], "static_clip": 790, "concat": [791, 792, 793, 794], "constant_pad": [795, 796, 797, 798], "expand_dim": [799, 800, 801, 802], "flip": [803, 804, 805, 806], "permute_dim": [807, 808, 809, 810], "repeat": [811, 812, 813, 814], "reshap": [815, 816, 817, 818], "static_rol": 823, "split": 824, "squeez": [825, 826, 827, 828], "stack": [829, 830, 831, 832], "swapax": [833, 834, 835, 836], "tile": [837, 838, 839, 840], "zero_pad": [841, 842, 843, 844], "meta": 845, "fomaml_step": 846, "maml_step": 847, "reptile_step": 848, "nest": 849, "all_nested_indic": 850, "copy_nest": 851, "index_nest": 852, "insert_into_nest_at_index": 853, "insert_into_nest_at_indic": 854, "map": 855, "map_nest_at_index": 856, "map_nest_at_indic": 857, "multi_index_nest": 858, "nested_ani": 859, "nested_indices_wher": 860, "nested_map": 861, "nested_multi_map": 862, "prune_nest_at_index": 863, "prune_nest_at_indic": 864, "set_nest_at_index": 865, "set_nest_at_indic": 866, "layer_norm": [868, 869, 870, 871], "multinomi": 873, "randint": [874, 875], "static_randint": 876, "random_norm": 877, "random_uniform": [878, 879, 880], "static_random_uniform": 881, "seed": 882, "shuffl": 883, "argmax": 885, "argmin": 886, "nonzero": 887, "where": 888, "depend": [889, 890, 891, 895, 897], "output": [889, 890, 891, 895, 897], "unique_al": 890, "unique_count": [891, 893, 894, 895], "static_unique_count": 892, "unique_invers": 896, "unique_valu": 897, "argsort": [899, 900, 901, 902], "static_argsort": 903, "static_sort": 908, "einsum": [910, 911, 912, 913], "max": [914, 915, 916, 917], "mean": [918, 919, 920, 921], "min": [922, 923, 924, 925], "prod": [926, 927, 928, 929], "std": [930, 931, 932, 933], "sum": [934, 935, 936, 937], "var": [938, 939, 940, 941], "all": [943, 944, 945, 946], "static_al": 947, "ani": [948, 949, 950, 951], "static_ani": 952, "content": 953, "overview": 953, "quick": 953, "start": 953, "roadmap": [953, 959], "citat": 953, "inspect": 956, "add_array_spec": 957, "fn_array_spec": 958, "geglu": 962, "to_ivy_modul": 965, "firstlayersiren": 968, "glorotuniform": 969, "Ones": 971, "siren": 972, "conv1dtranspos": 977, "conv2dtranspos": 979, "conv3dtranspos": 981, "depthwiseconv2d": 982, "lstm": 984, "multiheadattent": 986, "layernorm": 990, "adam": 992, "lamb": 993, "lar": 994, "sgd": 996, "sequenti": [997, 998], "verbos": 1000, "cprint": 1001}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 6, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.viewcode": 1, "sphinx": 56}})