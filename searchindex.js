Search.setIndex({"docnames": ["backend_handler", "backend_handler/ContextManager:\n    def __init__", "backend_handler/choose_random_backend", "backend_handler/clear_backend_stack", "backend_handler/current_backend", "backend_handler/get_backend", "backend_handler/set_backend", "backend_handler/try_import_ivy_jax", "backend_handler/try_import_ivy_mxnet", "backend_handler/try_import_ivy_numpy", "backend_handler/try_import_ivy_tf", "backend_handler/try_import_ivy_torch", "backend_handler/unset_backend", "background", "background/ml_explosion", "background/standardization", "background/why_unify", "classes/data_classes", "classes/data_classes/array", "classes/data_classes/array/activations", "classes/data_classes/array/activations/ArrayWithActivations", "classes/data_classes/array/conversions", "classes/data_classes/array/conversions/args_to_ivy", "classes/data_classes/array/conversions/args_to_native", "classes/data_classes/array/conversions/to_ivy", "classes/data_classes/array/conversions/to_native", "classes/data_classes/array/creation", "classes/data_classes/array/creation/ArrayWithCreation", "classes/data_classes/array/data_type", "classes/data_classes/array/data_type/ArrayWithDataTypes", "classes/data_classes/array/device", "classes/data_classes/array/device/ArrayWithDevice", "classes/data_classes/array/elementwise", "classes/data_classes/array/elementwise/ArrayWithElementwise", "classes/data_classes/array/general", "classes/data_classes/array/general/ArrayWithGeneral", "classes/data_classes/array/gradients", "classes/data_classes/array/gradients/ArrayWithGradients", "classes/data_classes/array/image", "classes/data_classes/array/image/ArrayWithImage", "classes/data_classes/array/layers", "classes/data_classes/array/layers/ArrayWithLayers", "classes/data_classes/array/linear_algebra", "classes/data_classes/array/linear_algebra/ArrayWithLinearAlgebra", "classes/data_classes/array/losses", "classes/data_classes/array/losses/ArrayWithLosses", "classes/data_classes/array/manipulation", "classes/data_classes/array/manipulation/ArrayWithManipulation", "classes/data_classes/array/norms", "classes/data_classes/array/norms/ArrayWithNorms", "classes/data_classes/array/random", "classes/data_classes/array/random/ArrayWithRandom", "classes/data_classes/array/searching", "classes/data_classes/array/searching/ArrayWithSearching", "classes/data_classes/array/set", "classes/data_classes/array/set/ArrayWithSet", "classes/data_classes/array/sorting", "classes/data_classes/array/sorting/ArrayWithSorting", "classes/data_classes/array/statistical", "classes/data_classes/array/statistical/ArrayWithStatistical", "classes/data_classes/array/utility", "classes/data_classes/array/utility/ArrayWithUtility", "classes/data_classes/array/wrapping", "classes/data_classes/array/wrapping/add_ivy_array_instance_methods", "classes/data_classes/container", "classes/data_classes/container/activations", "classes/data_classes/container/activations/ContainerWithActivations", "classes/data_classes/container/base", "classes/data_classes/container/base/ContainerBase", "classes/data_classes/container/container", "classes/data_classes/container/container/Container", "classes/data_classes/container/container/MultiDevContainer", "classes/data_classes/container/creation", "classes/data_classes/container/creation/ContainerWithCreation", "classes/data_classes/container/data_type", "classes/data_classes/container/data_type/ContainerWithDataTypes", "classes/data_classes/container/device", "classes/data_classes/container/device/ContainerWithDevice", "classes/data_classes/container/elementwise", "classes/data_classes/container/elementwise/ContainerWithElementwise", "classes/data_classes/container/general", "classes/data_classes/container/general/ContainerWithGeneral", "classes/data_classes/container/gradients", "classes/data_classes/container/gradients/ContainerWithGradients", "classes/data_classes/container/image", "classes/data_classes/container/image/ContainerWithImage", "classes/data_classes/container/layers", "classes/data_classes/container/layers/ContainerWithLayers", "classes/data_classes/container/linear_algebra", "classes/data_classes/container/linear_algebra/ContainerWithLinearAlgebra", "classes/data_classes/container/losses", "classes/data_classes/container/losses/ContainerWithLosses", "classes/data_classes/container/manipulation", "classes/data_classes/container/manipulation/ContainerWithManipulation", "classes/data_classes/container/norms", "classes/data_classes/container/norms/ContainerWithNorms", "classes/data_classes/container/random", "classes/data_classes/container/random/ContainerWithRandom", "classes/data_classes/container/searching", "classes/data_classes/container/searching/ContainerWithSearching", "classes/data_classes/container/set", "classes/data_classes/container/set/ContainerWithSet", "classes/data_classes/container/sorting", "classes/data_classes/container/sorting/ContainerWithSorting", "classes/data_classes/container/statistical", "classes/data_classes/container/statistical/ContainerWithStatistical", "classes/data_classes/container/utility", "classes/data_classes/container/utility/ContainerWithUtility", "classes/data_classes/container/wrapping", "classes/data_classes/container/wrapping/add_ivy_container_instance_methods", "classes/stateful", "classes/stateful/activations", "classes/stateful/activations/GEGLU", "classes/stateful/activations/GELU", "classes/stateful/converters", "classes/stateful/converters/to_ivy_module", "classes/stateful/initializers", "classes/stateful/initializers/Constant:\n    def __init__", "classes/stateful/initializers/FirstLayerSiren", "classes/stateful/initializers/GlorotUniform", "classes/stateful/initializers/KaimingNormal:\n    def __init__", "classes/stateful/initializers/Ones", "classes/stateful/initializers/Siren", "classes/stateful/initializers/Uniform:\n    def __init__", "classes/stateful/initializers/Zeros", "classes/stateful/layers", "classes/stateful/layers/Conv1D", "classes/stateful/layers/Conv1DTranspose", "classes/stateful/layers/Conv2D", "classes/stateful/layers/Conv2DTranspose", "classes/stateful/layers/Conv3D", "classes/stateful/layers/Conv3DTranspose", "classes/stateful/layers/DepthwiseConv2D", "classes/stateful/layers/Dropout", "classes/stateful/layers/LSTM", "classes/stateful/layers/Linear", "classes/stateful/layers/MultiHeadAttention", "classes/stateful/module", "classes/stateful/module/Module", "classes/stateful/norms", "classes/stateful/norms/LayerNorm", "classes/stateful/optimizers", "classes/stateful/optimizers/Adam", "classes/stateful/optimizers/LAMB", "classes/stateful/optimizers/LARS", "classes/stateful/optimizers/Optimizer", "classes/stateful/optimizers/SGD", "classes/stateful/sequential", "classes/stateful/sequential/Sequential", "contributing", "contributing/0_setting_up", "contributing/1_the_basics", "contributing/4_open_tasks", "contributing/building_the_docs", "deep_dive", "deep_dive/0_navigating_the_code", "deep_dive/10_docstrings", "deep_dive/11_docstring_examples", "deep_dive/12_array_api_tests", "deep_dive/13_ivy_tests", "deep_dive/1_function_types", "deep_dive/2_backend_setting", "deep_dive/3_function_wrapping", "deep_dive/4_arrays", "deep_dive/5_containers", "deep_dive/6_data_types", "deep_dive/7_devices", "deep_dive/8_inplace_updates", "deep_dive/9_function_arguments", "design", "design/building_blocks", "design/ivy_as_a_framework", "design/ivy_as_a_framework/ivy_array", "design/ivy_as_a_framework/ivy_container", "design/ivy_as_a_framework/ivy_stateful_api", "design/ivy_as_a_transpiler", "docs/ivy", "docs/ivy_builder", "docs/ivy_ecosystem", "docs/ivy_gym", "docs/ivy_mech", "docs/ivy_memory", "docs/ivy_models", "docs/ivy_robot", "docs/ivy_vision", "extensions", "extensions/applied_libraries", "faq", "func_wrapper", "func_wrapper/handle_nestable", "func_wrapper/handle_out_argument", "func_wrapper/infer_device", "func_wrapper/infer_dtype", "func_wrapper/inputs_to_ivy_arrays", "func_wrapper/inputs_to_native_arrays", "func_wrapper/outputs_to_ivy_arrays", "func_wrapper/to_native_arrays_and_back", "functional/ivy", "functional/ivy/activations", "functional/ivy/activations/gelu", "functional/ivy/activations/leaky_relu", "functional/ivy/activations/relu", "functional/ivy/activations/sigmoid", "functional/ivy/activations/softmax", "functional/ivy/activations/softplus", "functional/ivy/activations/softplus/softplus_array", "functional/ivy/activations/softplus/softplus_container", "functional/ivy/activations/softplus/softplus_functional", "functional/ivy/activations/softplus/static_softplus_container", "functional/ivy/activations/tanh", "functional/ivy/compilation", "functional/ivy/compilation/compile", "functional/ivy/constants", "functional/ivy/creation", "functional/ivy/creation/arange", "functional/ivy/creation/arange/arange_functional", "functional/ivy/creation/arange/static_arange_container", "functional/ivy/creation/asarray", "functional/ivy/creation/asarray/asarray_array", "functional/ivy/creation/asarray/asarray_container", "functional/ivy/creation/asarray/asarray_functional", "functional/ivy/creation/asarray/static_asarray_container", "functional/ivy/creation/empty", "functional/ivy/creation/empty_like", "functional/ivy/creation/empty_like/empty_like_array", "functional/ivy/creation/empty_like/empty_like_container", "functional/ivy/creation/empty_like/empty_like_functional", "functional/ivy/creation/empty_like/static_empty_like_container", "functional/ivy/creation/eye", "functional/ivy/creation/eye/eye_functional", "functional/ivy/creation/eye/static_eye_container", "functional/ivy/creation/from_dlpack", "functional/ivy/creation/from_dlpack/from_dlpack_array", "functional/ivy/creation/from_dlpack/from_dlpack_container", "functional/ivy/creation/from_dlpack/from_dlpack_functional", "functional/ivy/creation/from_dlpack/static_from_dlpack_container", "functional/ivy/creation/full", "functional/ivy/creation/full_like", "functional/ivy/creation/full_like/full_like_array", "functional/ivy/creation/full_like/full_like_container", "functional/ivy/creation/full_like/full_like_functional", "functional/ivy/creation/full_like/static_full_like_container", "functional/ivy/creation/linspace", "functional/ivy/creation/linspace/linspace_functional", "functional/ivy/creation/linspace/static_linspace_container", "functional/ivy/creation/logspace", "functional/ivy/creation/logspace/logspace_functional", "functional/ivy/creation/logspace/static_logspace_container", "functional/ivy/creation/meshgrid", "functional/ivy/creation/meshgrid/meshgrid_array", "functional/ivy/creation/meshgrid/meshgrid_container", "functional/ivy/creation/meshgrid/meshgrid_functional", "functional/ivy/creation/meshgrid/static_meshgrid_container", "functional/ivy/creation/native_array", "functional/ivy/creation/native_array/native_array_array", "functional/ivy/creation/native_array/native_array_container", "functional/ivy/creation/native_array/native_array_functional", "functional/ivy/creation/native_array/static_native_array_container", "functional/ivy/creation/ones", "functional/ivy/creation/ones/ones_functional", "functional/ivy/creation/ones/static_ones_container", "functional/ivy/creation/ones_like", "functional/ivy/creation/ones_like/ones_like_array", "functional/ivy/creation/ones_like/ones_like_container", "functional/ivy/creation/ones_like/ones_like_functional", "functional/ivy/creation/ones_like/static_ones_like_container", "functional/ivy/creation/tril", "functional/ivy/creation/tril/static_tril_container", "functional/ivy/creation/tril/tril_array", "functional/ivy/creation/tril/tril_container", "functional/ivy/creation/tril/tril_functional", "functional/ivy/creation/triu", "functional/ivy/creation/triu/static_triu_container", "functional/ivy/creation/triu/triu_array", "functional/ivy/creation/triu/triu_container", "functional/ivy/creation/triu/triu_functional", "functional/ivy/creation/zeros", "functional/ivy/creation/zeros/static_zeros_container", "functional/ivy/creation/zeros/zeros_functional", "functional/ivy/creation/zeros_like", "functional/ivy/creation/zeros_like/static_zeros_like_container", "functional/ivy/creation/zeros_like/zeros_like_array", "functional/ivy/creation/zeros_like/zeros_like_container", "functional/ivy/creation/zeros_like/zeros_like_functional", "functional/ivy/data_type", "functional/ivy/data_type/DefaultDtype:\n    \"\"\"\"\"\"\n\n    # noinspection PyShadowingNames\n    def __init__", "functional/ivy/data_type/DefaultFloatDtype:\n    \"\"\"\"\"\"\n\n    # noinspection PyShadowingNames\n    def __init__", "functional/ivy/data_type/DefaultIntDtype:\n    \"\"\"\"\"\"\n\n    # noinspection PyShadowingNames\n    def __init__", "functional/ivy/data_type/as_ivy_dtype", "functional/ivy/data_type/as_native_dtype", "functional/ivy/data_type/astype", "functional/ivy/data_type/broadcast_arrays", "functional/ivy/data_type/broadcast_to", "functional/ivy/data_type/can_cast", "functional/ivy/data_type/can_cast/can_cast_array", "functional/ivy/data_type/can_cast/can_cast_container", "functional/ivy/data_type/can_cast/can_cast_functional", "functional/ivy/data_type/can_cast/static_can_cast_container", "functional/ivy/data_type/closest_valid_dtype", "functional/ivy/data_type/default_dtype", "functional/ivy/data_type/default_float_dtype", "functional/ivy/data_type/default_int_dtype", "functional/ivy/data_type/dtype", "functional/ivy/data_type/dtype_bits", "functional/ivy/data_type/finfo", "functional/ivy/data_type/function_supported_dtypes", "functional/ivy/data_type/function_unsupported_dtypes", "functional/ivy/data_type/iinfo", "functional/ivy/data_type/invalid_dtype", "functional/ivy/data_type/is_float_dtype", "functional/ivy/data_type/is_int_dtype", "functional/ivy/data_type/promote_types", "functional/ivy/data_type/result_type", "functional/ivy/data_type/set_default_dtype", "functional/ivy/data_type/set_default_float_dtype", "functional/ivy/data_type/set_default_int_dtype", "functional/ivy/data_type/type_promote_arrays", "functional/ivy/data_type/unset_default_dtype", "functional/ivy/data_type/unset_default_float_dtype", "functional/ivy/data_type/unset_default_int_dtype", "functional/ivy/data_type/valid_dtype", "functional/ivy/device", "functional/ivy/device/DefaultDevice:\n    \"\"\"\"\"\"\n\n    # noinspection PyShadowingNames\n    def __init__", "functional/ivy/device/DevClonedItem", "functional/ivy/device/DevClonedIter", "functional/ivy/device/DevClonedNest", "functional/ivy/device/DevDistItem", "functional/ivy/device/DevDistIter", "functional/ivy/device/DevDistNest", "functional/ivy/device/DevManager:\n    \"\"\"\"\"\"\n\n    def __init__", "functional/ivy/device/DevMapper", "functional/ivy/device/DevMapperMultiProc", "functional/ivy/device/MultiDev:\n    def __init__", "functional/ivy/device/MultiDevItem", "functional/ivy/device/MultiDevIter", "functional/ivy/device/MultiDevNest", "functional/ivy/device/Profiler", "functional/ivy/device/as_ivy_dev", "functional/ivy/device/as_native_dev", "functional/ivy/device/clear_mem_on_dev", "functional/ivy/device/default_device", "functional/ivy/device/dev", "functional/ivy/device/dev_clone", "functional/ivy/device/dev_clone_array", "functional/ivy/device/dev_clone_iter", "functional/ivy/device/dev_clone_nest", "functional/ivy/device/dev_dist", "functional/ivy/device/dev_dist_array", "functional/ivy/device/dev_dist_iter", "functional/ivy/device/dev_dist_nest", "functional/ivy/device/dev_unify", "functional/ivy/device/dev_unify_array", "functional/ivy/device/dev_unify_iter", "functional/ivy/device/dev_unify_nest", "functional/ivy/device/dev_util", "functional/ivy/device/get_all_ivy_arrays_on_dev", "functional/ivy/device/gpu_is_available", "functional/ivy/device/num_cpu_cores", "functional/ivy/device/num_gpus", "functional/ivy/device/num_ivy_arrays_on_dev", "functional/ivy/device/percent_used_mem_on_dev", "functional/ivy/device/print_all_ivy_arrays_on_dev", "functional/ivy/device/set_default_device", "functional/ivy/device/set_split_factor", "functional/ivy/device/split_factor", "functional/ivy/device/split_func_call", "functional/ivy/device/to_device", "functional/ivy/device/total_mem_on_dev", "functional/ivy/device/tpu_is_available", "functional/ivy/device/unset_default_device", "functional/ivy/device/used_mem_on_dev", "functional/ivy/elementwise", "functional/ivy/elementwise/abs", "functional/ivy/elementwise/abs/abs_array", "functional/ivy/elementwise/abs/abs_container", "functional/ivy/elementwise/abs/abs_functional", "functional/ivy/elementwise/abs/static_abs_container", "functional/ivy/elementwise/acos", "functional/ivy/elementwise/acos/acos_array", "functional/ivy/elementwise/acos/acos_container", "functional/ivy/elementwise/acos/acos_functional", "functional/ivy/elementwise/acosh", "functional/ivy/elementwise/acosh/acosh_array", "functional/ivy/elementwise/acosh/acosh_container", "functional/ivy/elementwise/acosh/acosh_functional", "functional/ivy/elementwise/add", "functional/ivy/elementwise/add/add_array", "functional/ivy/elementwise/add/add_container", "functional/ivy/elementwise/add/add_functional", "functional/ivy/elementwise/add/static_add_container", "functional/ivy/elementwise/asin", "functional/ivy/elementwise/asin/asin_array", "functional/ivy/elementwise/asin/asin_container", "functional/ivy/elementwise/asin/asin_functional", "functional/ivy/elementwise/asinh", "functional/ivy/elementwise/asinh/asinh_array", "functional/ivy/elementwise/asinh/asinh_container", "functional/ivy/elementwise/asinh/asinh_functional", "functional/ivy/elementwise/atan", "functional/ivy/elementwise/atan/atan_array", "functional/ivy/elementwise/atan/atan_container", "functional/ivy/elementwise/atan/atan_functional", "functional/ivy/elementwise/atan2", "functional/ivy/elementwise/atan2/atan2_array", "functional/ivy/elementwise/atan2/atan2_container", "functional/ivy/elementwise/atan2/atan2_functional", "functional/ivy/elementwise/atanh", "functional/ivy/elementwise/atanh/atanh_array", "functional/ivy/elementwise/atanh/atanh_container", "functional/ivy/elementwise/atanh/atanh_functional", "functional/ivy/elementwise/bitwise_and", "functional/ivy/elementwise/bitwise_and/bitwise_and_array", "functional/ivy/elementwise/bitwise_and/bitwise_and_container", "functional/ivy/elementwise/bitwise_and/bitwise_and_functional", "functional/ivy/elementwise/bitwise_invert", "functional/ivy/elementwise/bitwise_invert/bitwise_invert_array", "functional/ivy/elementwise/bitwise_invert/bitwise_invert_container", "functional/ivy/elementwise/bitwise_invert/bitwise_invert_functional", "functional/ivy/elementwise/bitwise_left_shift", "functional/ivy/elementwise/bitwise_left_shift/bitwise_left_shift_array", "functional/ivy/elementwise/bitwise_left_shift/bitwise_left_shift_container", "functional/ivy/elementwise/bitwise_left_shift/bitwise_left_shift_functional", "functional/ivy/elementwise/bitwise_or", "functional/ivy/elementwise/bitwise_or/bitwise_or_array", "functional/ivy/elementwise/bitwise_or/bitwise_or_container", "functional/ivy/elementwise/bitwise_or/bitwise_or_functional", "functional/ivy/elementwise/bitwise_right_shift", "functional/ivy/elementwise/bitwise_right_shift/bitwise_right_shift_array", "functional/ivy/elementwise/bitwise_right_shift/bitwise_right_shift_container", "functional/ivy/elementwise/bitwise_right_shift/bitwise_right_shift_functional", "functional/ivy/elementwise/bitwise_xor", "functional/ivy/elementwise/bitwise_xor/bitwise_xor_array", "functional/ivy/elementwise/bitwise_xor/bitwise_xor_container", "functional/ivy/elementwise/bitwise_xor/bitwise_xor_functional", "functional/ivy/elementwise/ceil", "functional/ivy/elementwise/ceil/ceil_array", "functional/ivy/elementwise/ceil/ceil_container", "functional/ivy/elementwise/ceil/ceil_functional", "functional/ivy/elementwise/cos", "functional/ivy/elementwise/cos/cos_array", "functional/ivy/elementwise/cos/cos_container", "functional/ivy/elementwise/cos/cos_functional", "functional/ivy/elementwise/cosh", "functional/ivy/elementwise/cosh/cosh_array", "functional/ivy/elementwise/cosh/cosh_container", "functional/ivy/elementwise/cosh/cosh_functional", "functional/ivy/elementwise/divide", "functional/ivy/elementwise/divide/divide_array", "functional/ivy/elementwise/divide/divide_container", "functional/ivy/elementwise/divide/divide_functional", "functional/ivy/elementwise/divide/static_divide_container", "functional/ivy/elementwise/equal", "functional/ivy/elementwise/equal/equal_array", "functional/ivy/elementwise/equal/equal_container", "functional/ivy/elementwise/equal/equal_functional", "functional/ivy/elementwise/erf", "functional/ivy/elementwise/erf/erf_array", "functional/ivy/elementwise/erf/erf_container", "functional/ivy/elementwise/erf/erf_functional", "functional/ivy/elementwise/exp", "functional/ivy/elementwise/exp/exp_array", "functional/ivy/elementwise/exp/exp_container", "functional/ivy/elementwise/exp/exp_functional", "functional/ivy/elementwise/expm1", "functional/ivy/elementwise/expm1/expm1_array", "functional/ivy/elementwise/expm1/expm1_container", "functional/ivy/elementwise/expm1/expm1_functional", "functional/ivy/elementwise/floor", "functional/ivy/elementwise/floor/floor_array", "functional/ivy/elementwise/floor/floor_container", "functional/ivy/elementwise/floor/floor_functional", "functional/ivy/elementwise/floor_divide", "functional/ivy/elementwise/floor_divide/floor_divide_array", "functional/ivy/elementwise/floor_divide/floor_divide_container", "functional/ivy/elementwise/floor_divide/floor_divide_functional", "functional/ivy/elementwise/greater", "functional/ivy/elementwise/greater/greater_array", "functional/ivy/elementwise/greater/greater_container", "functional/ivy/elementwise/greater/greater_functional", "functional/ivy/elementwise/greater_equal", "functional/ivy/elementwise/greater_equal/greater_equal_array", "functional/ivy/elementwise/greater_equal/greater_equal_container", "functional/ivy/elementwise/greater_equal/greater_equal_functional", "functional/ivy/elementwise/isfinite", "functional/ivy/elementwise/isfinite/isfinite_array", "functional/ivy/elementwise/isfinite/isfinite_container", "functional/ivy/elementwise/isfinite/isfinite_functional", "functional/ivy/elementwise/isinf", "functional/ivy/elementwise/isinf/isinf_array", "functional/ivy/elementwise/isinf/isinf_container", "functional/ivy/elementwise/isinf/isinf_functional", "functional/ivy/elementwise/isnan", "functional/ivy/elementwise/isnan/isnan_array", "functional/ivy/elementwise/isnan/isnan_container", "functional/ivy/elementwise/isnan/isnan_functional", "functional/ivy/elementwise/less", "functional/ivy/elementwise/less/less_array", "functional/ivy/elementwise/less/less_container", "functional/ivy/elementwise/less/less_functional", "functional/ivy/elementwise/less_equal", "functional/ivy/elementwise/less_equal/less_equal_array", "functional/ivy/elementwise/less_equal/less_equal_container", "functional/ivy/elementwise/less_equal/less_equal_functional", "functional/ivy/elementwise/log", "functional/ivy/elementwise/log/log_array", "functional/ivy/elementwise/log/log_container", "functional/ivy/elementwise/log/log_functional", "functional/ivy/elementwise/log10", "functional/ivy/elementwise/log10/log10_array", "functional/ivy/elementwise/log10/log10_container", "functional/ivy/elementwise/log10/log10_functional", "functional/ivy/elementwise/log1p", "functional/ivy/elementwise/log1p/log1p_array", "functional/ivy/elementwise/log1p/log1p_container", "functional/ivy/elementwise/log1p/log1p_functional", "functional/ivy/elementwise/log2", "functional/ivy/elementwise/log2/log2_array", "functional/ivy/elementwise/log2/log2_container", "functional/ivy/elementwise/log2/log2_functional", "functional/ivy/elementwise/logaddexp", "functional/ivy/elementwise/logaddexp/logaddexp_array", "functional/ivy/elementwise/logaddexp/logaddexp_container", "functional/ivy/elementwise/logaddexp/logaddexp_functional", "functional/ivy/elementwise/logical_and", "functional/ivy/elementwise/logical_and/logical_and_array", "functional/ivy/elementwise/logical_and/logical_and_container", "functional/ivy/elementwise/logical_and/logical_and_functional", "functional/ivy/elementwise/logical_not", "functional/ivy/elementwise/logical_not/logical_not_array", "functional/ivy/elementwise/logical_not/logical_not_container", "functional/ivy/elementwise/logical_not/logical_not_functional", "functional/ivy/elementwise/logical_or", "functional/ivy/elementwise/logical_or/logical_or_array", "functional/ivy/elementwise/logical_or/logical_or_container", "functional/ivy/elementwise/logical_or/logical_or_functional", "functional/ivy/elementwise/logical_xor", "functional/ivy/elementwise/logical_xor/logical_xor_array", "functional/ivy/elementwise/logical_xor/logical_xor_container", "functional/ivy/elementwise/logical_xor/logical_xor_functional", "functional/ivy/elementwise/maximum", "functional/ivy/elementwise/minimum", "functional/ivy/elementwise/multiply", "functional/ivy/elementwise/multiply/multiply_array", "functional/ivy/elementwise/multiply/multiply_container", "functional/ivy/elementwise/multiply/multiply_functional", "functional/ivy/elementwise/multiply/static_multiply_container", "functional/ivy/elementwise/negative", "functional/ivy/elementwise/negative/negative_array", "functional/ivy/elementwise/negative/negative_container", "functional/ivy/elementwise/negative/negative_functional", "functional/ivy/elementwise/not_equal", "functional/ivy/elementwise/not_equal/not_equal_array", "functional/ivy/elementwise/not_equal/not_equal_container", "functional/ivy/elementwise/not_equal/not_equal_functional", "functional/ivy/elementwise/positive", "functional/ivy/elementwise/positive/positive_array", "functional/ivy/elementwise/positive/positive_container", "functional/ivy/elementwise/positive/positive_functional", "functional/ivy/elementwise/pow", "functional/ivy/elementwise/pow/pow_array", "functional/ivy/elementwise/pow/pow_container", "functional/ivy/elementwise/pow/pow_functional", "functional/ivy/elementwise/remainder", "functional/ivy/elementwise/remainder/remainder_array", "functional/ivy/elementwise/remainder/remainder_container", "functional/ivy/elementwise/remainder/remainder_functional", "functional/ivy/elementwise/round", "functional/ivy/elementwise/round/round_array", "functional/ivy/elementwise/round/round_container", "functional/ivy/elementwise/round/round_functional", "functional/ivy/elementwise/sign", "functional/ivy/elementwise/sign/sign_array", "functional/ivy/elementwise/sign/sign_container", "functional/ivy/elementwise/sign/sign_functional", "functional/ivy/elementwise/sin", "functional/ivy/elementwise/sin/sin_array", "functional/ivy/elementwise/sin/sin_container", "functional/ivy/elementwise/sin/sin_functional", "functional/ivy/elementwise/sinh", "functional/ivy/elementwise/sinh/sinh_array", "functional/ivy/elementwise/sinh/sinh_container", "functional/ivy/elementwise/sinh/sinh_functional", "functional/ivy/elementwise/sqrt", "functional/ivy/elementwise/sqrt/sqrt_array", "functional/ivy/elementwise/sqrt/sqrt_container", "functional/ivy/elementwise/sqrt/sqrt_functional", "functional/ivy/elementwise/square", "functional/ivy/elementwise/square/square_array", "functional/ivy/elementwise/square/square_container", "functional/ivy/elementwise/square/square_functional", "functional/ivy/elementwise/subtract", "functional/ivy/elementwise/subtract/static_subtract_container", "functional/ivy/elementwise/subtract/subtract_array", "functional/ivy/elementwise/subtract/subtract_container", "functional/ivy/elementwise/subtract/subtract_functional", "functional/ivy/elementwise/tan", "functional/ivy/elementwise/tan/static_tan_container", "functional/ivy/elementwise/tan/tan_array", "functional/ivy/elementwise/tan/tan_container", "functional/ivy/elementwise/tan/tan_functional", "functional/ivy/elementwise/tanh", "functional/ivy/elementwise/tanh/static_tanh_container", "functional/ivy/elementwise/tanh/tanh_array", "functional/ivy/elementwise/tanh/tanh_container", "functional/ivy/elementwise/tanh/tanh_functional", "functional/ivy/elementwise/trunc", "functional/ivy/elementwise/trunc/trunc_array", "functional/ivy/elementwise/trunc/trunc_container", "functional/ivy/elementwise/trunc/trunc_functional", "functional/ivy/general", "functional/ivy/general/all_equal", "functional/ivy/general/all_equal/all_equal_array", "functional/ivy/general/all_equal/all_equal_container", "functional/ivy/general/all_equal/all_equal_functional", "functional/ivy/general/all_equal/static_all_equal_container", "functional/ivy/general/arg_info", "functional/ivy/general/arg_names", "functional/ivy/general/array_equal", "functional/ivy/general/arrays_equal", "functional/ivy/general/assert_supports_inplace", "functional/ivy/general/cache_fn", "functional/ivy/general/clip_matrix_norm", "functional/ivy/general/clip_vector_norm", "functional/ivy/general/clip_vector_norm/clip_vector_norm_container", "functional/ivy/general/clip_vector_norm/clip_vector_norm_functional", "functional/ivy/general/container_types", "functional/ivy/general/copy_array", "functional/ivy/general/cumprod", "functional/ivy/general/cumsum", "functional/ivy/general/current_backend_str", "functional/ivy/general/default", "functional/ivy/general/einops_rearrange", "functional/ivy/general/einops_reduce", "functional/ivy/general/einops_repeat", "functional/ivy/general/exists", "functional/ivy/general/floormod", "functional/ivy/general/fourier_encode", "functional/ivy/general/gather", "functional/ivy/general/gather_nd", "functional/ivy/general/gather_nd/gather_nd_array", "functional/ivy/general/gather_nd/gather_nd_container", "functional/ivy/general/gather_nd/gather_nd_functional", "functional/ivy/general/gather_nd/static_gather_nd_container", "functional/ivy/general/get_all_arrays_in_memory", "functional/ivy/general/get_min_base", "functional/ivy/general/get_min_denominator", "functional/ivy/general/get_num_dims", "functional/ivy/general/get_referrers_recursive", "functional/ivy/general/has_nans", "functional/ivy/general/indices_where", "functional/ivy/general/inplace_arrays_supported", "functional/ivy/general/inplace_decrement", "functional/ivy/general/inplace_increment", "functional/ivy/general/inplace_update", "functional/ivy/general/inplace_variables_supported", "functional/ivy/general/is_array", "functional/ivy/general/is_ivy_array", "functional/ivy/general/is_ivy_container", "functional/ivy/general/is_native_array", "functional/ivy/general/match_kwargs", "functional/ivy/general/multiprocessing", "functional/ivy/general/num_arrays_in_memory", "functional/ivy/general/one_hot", "functional/ivy/general/print_all_arrays_in_memory", "functional/ivy/general/queue_timeout", "functional/ivy/general/scatter_flat", "functional/ivy/general/scatter_nd", "functional/ivy/general/set_min_base", "functional/ivy/general/set_min_denominator", "functional/ivy/general/set_queue_timeout", "functional/ivy/general/set_tmp_dir", "functional/ivy/general/shape", "functional/ivy/general/shape_to_tuple", "functional/ivy/general/stable_divide", "functional/ivy/general/stable_pow", "functional/ivy/general/supports_inplace", "functional/ivy/general/tmp_dir", "functional/ivy/general/to_list", "functional/ivy/general/to_numpy", "functional/ivy/general/to_scalar", "functional/ivy/general/try_else_none", "functional/ivy/general/unstack", "functional/ivy/general/value_is_nan", "functional/ivy/gradients", "functional/ivy/gradients/GradientTracking:\n    \"\"\"\"\"\"\n\n    # noinspection PyShadowingNames\n    def __init__", "functional/ivy/gradients/adam_step", "functional/ivy/gradients/adam_step/adam_step_array", "functional/ivy/gradients/adam_step/adam_step_container", "functional/ivy/gradients/adam_step/adam_step_functional", "functional/ivy/gradients/adam_step/static_adam_step_container", "functional/ivy/gradients/adam_update", "functional/ivy/gradients/adam_update/adam_update_container", "functional/ivy/gradients/adam_update/adam_update_functional", "functional/ivy/gradients/adam_update/static_adam_update_container", "functional/ivy/gradients/execute_with_gradients", "functional/ivy/gradients/gradient_descent_update", "functional/ivy/gradients/gradient_descent_update/gradient_descent_update_container", "functional/ivy/gradients/gradient_descent_update/gradient_descent_update_functional", "functional/ivy/gradients/gradient_descent_update/static_gradient_descent_update_container", "functional/ivy/gradients/is_variable", "functional/ivy/gradients/is_variable/is_variable_container", "functional/ivy/gradients/is_variable/is_variable_functional", "functional/ivy/gradients/is_variable/static_is_variable_container", "functional/ivy/gradients/lamb_update", "functional/ivy/gradients/lamb_update/lamb_update_container", "functional/ivy/gradients/lamb_update/lamb_update_functional", "functional/ivy/gradients/lamb_update/static_lamb_update_container", "functional/ivy/gradients/lars_update", "functional/ivy/gradients/lars_update/lars_update_container", "functional/ivy/gradients/lars_update/lars_update_functional", "functional/ivy/gradients/lars_update/static_lars_update_container", "functional/ivy/gradients/optimizer_update", "functional/ivy/gradients/optimizer_update/optimizer_update_container", "functional/ivy/gradients/optimizer_update/optimizer_update_functional", "functional/ivy/gradients/optimizer_update/static_optimizer_update_container", "functional/ivy/gradients/set_with_grads", "functional/ivy/gradients/stop_gradient", "functional/ivy/gradients/unset_with_grads", "functional/ivy/gradients/variable", "functional/ivy/gradients/variable_data", "functional/ivy/gradients/with_grads", "functional/ivy/layers", "functional/ivy/layers/conv1d", "functional/ivy/layers/conv1d_transpose", "functional/ivy/layers/conv2d", "functional/ivy/layers/conv2d_transpose", "functional/ivy/layers/conv3d", "functional/ivy/layers/conv3d_transpose", "functional/ivy/layers/depthwise_conv2d", "functional/ivy/layers/dropout", "functional/ivy/layers/linear", "functional/ivy/layers/lstm_update", "functional/ivy/layers/multi_head_attention", "functional/ivy/layers/scaled_dot_product_attention", "functional/ivy/linear_algebra", "functional/ivy/linear_algebra/cholesky", "functional/ivy/linear_algebra/cholesky/cholesky_array", "functional/ivy/linear_algebra/cholesky/cholesky_container", "functional/ivy/linear_algebra/cholesky/cholesky_functional", "functional/ivy/linear_algebra/cholesky/static_cholesky_container", "functional/ivy/linear_algebra/cross", "functional/ivy/linear_algebra/cross/cross_array", "functional/ivy/linear_algebra/cross/cross_functional", "functional/ivy/linear_algebra/det", "functional/ivy/linear_algebra/det/det_array", "functional/ivy/linear_algebra/det/det_functional", "functional/ivy/linear_algebra/diagonal", "functional/ivy/linear_algebra/diagonal/diagonal_array", "functional/ivy/linear_algebra/diagonal/diagonal_functional", "functional/ivy/linear_algebra/eigh", "functional/ivy/linear_algebra/eigh/eigh_array", "functional/ivy/linear_algebra/eigh/eigh_functional", "functional/ivy/linear_algebra/eigvalsh", "functional/ivy/linear_algebra/eigvalsh/eigvalsh_array", "functional/ivy/linear_algebra/eigvalsh/eigvalsh_functional", "functional/ivy/linear_algebra/inv", "functional/ivy/linear_algebra/inv/inv_array", "functional/ivy/linear_algebra/inv/inv_functional", "functional/ivy/linear_algebra/matmul", "functional/ivy/linear_algebra/matmul/matmul_array", "functional/ivy/linear_algebra/matmul/matmul_container", "functional/ivy/linear_algebra/matmul/matmul_functional", "functional/ivy/linear_algebra/matrix_norm", "functional/ivy/linear_algebra/matrix_norm/matrix_norm_array", "functional/ivy/linear_algebra/matrix_norm/matrix_norm_functional", "functional/ivy/linear_algebra/matrix_power", "functional/ivy/linear_algebra/matrix_rank", "functional/ivy/linear_algebra/matrix_rank/matrix_rank_array", "functional/ivy/linear_algebra/matrix_rank/matrix_rank_functional", "functional/ivy/linear_algebra/matrix_transpose", "functional/ivy/linear_algebra/matrix_transpose/matrix_transpose_array", "functional/ivy/linear_algebra/matrix_transpose/matrix_transpose_functional", "functional/ivy/linear_algebra/outer", "functional/ivy/linear_algebra/outer/outer_array", "functional/ivy/linear_algebra/outer/outer_functional", "functional/ivy/linear_algebra/pinv", "functional/ivy/linear_algebra/pinv/pinv_array", "functional/ivy/linear_algebra/pinv/pinv_functional", "functional/ivy/linear_algebra/qr", "functional/ivy/linear_algebra/qr/qr_array", "functional/ivy/linear_algebra/qr/qr_functional", "functional/ivy/linear_algebra/slogdet", "functional/ivy/linear_algebra/solve", "functional/ivy/linear_algebra/solve/solve_array", "functional/ivy/linear_algebra/solve/solve_functional", "functional/ivy/linear_algebra/svd", "functional/ivy/linear_algebra/svd/svd_array", "functional/ivy/linear_algebra/svd/svd_functional", "functional/ivy/linear_algebra/svdvals", "functional/ivy/linear_algebra/svdvals/svdvals_array", "functional/ivy/linear_algebra/svdvals/svdvals_functional", "functional/ivy/linear_algebra/tensordot", "functional/ivy/linear_algebra/tensordot/tensordot_array", "functional/ivy/linear_algebra/tensordot/tensordot_functional", "functional/ivy/linear_algebra/trace", "functional/ivy/linear_algebra/trace/trace_array", "functional/ivy/linear_algebra/trace/trace_functional", "functional/ivy/linear_algebra/vecdot", "functional/ivy/linear_algebra/vecdot/vecdot_array", "functional/ivy/linear_algebra/vecdot/vecdot_functional", "functional/ivy/linear_algebra/vector_norm", "functional/ivy/linear_algebra/vector_norm/vector_norm_array", "functional/ivy/linear_algebra/vector_norm/vector_norm_functional", "functional/ivy/linear_algebra/vector_to_skew_symmetric_matrix", "functional/ivy/linear_algebra/vector_to_skew_symmetric_matrix/vector_to_skew_symmetric_matrix_array", "functional/ivy/linear_algebra/vector_to_skew_symmetric_matrix/vector_to_skew_symmetric_matrix_functional", "functional/ivy/losses", "functional/ivy/losses/binary_cross_entropy", "functional/ivy/losses/binary_cross_entropy/binary_cross_entropy_array", "functional/ivy/losses/binary_cross_entropy/binary_cross_entropy_container", "functional/ivy/losses/binary_cross_entropy/binary_cross_entropy_functional", "functional/ivy/losses/binary_cross_entropy/static_binary_cross_entropy_container", "functional/ivy/losses/cross_entropy", "functional/ivy/losses/cross_entropy/cross_entropy_array", "functional/ivy/losses/cross_entropy/cross_entropy_container", "functional/ivy/losses/cross_entropy/cross_entropy_functional", "functional/ivy/losses/cross_entropy/static_cross_entropy_container", "functional/ivy/losses/sparse_cross_entropy", "functional/ivy/losses/sparse_cross_entropy/sparse_cross_entropy_array", "functional/ivy/losses/sparse_cross_entropy/sparse_cross_entropy_container", "functional/ivy/losses/sparse_cross_entropy/sparse_cross_entropy_functional", "functional/ivy/losses/sparse_cross_entropy/static_sparse_cross_entropy_container", "functional/ivy/manipulation", "functional/ivy/manipulation/clip", "functional/ivy/manipulation/clip/clip_array", "functional/ivy/manipulation/clip/clip_container", "functional/ivy/manipulation/clip/clip_functional", "functional/ivy/manipulation/clip/static_clip_container", "functional/ivy/manipulation/concat", "functional/ivy/manipulation/concat/concat_array", "functional/ivy/manipulation/concat/concat_container", "functional/ivy/manipulation/concat/concat_functional", "functional/ivy/manipulation/constant_pad", "functional/ivy/manipulation/constant_pad/constant_pad_array", "functional/ivy/manipulation/constant_pad/constant_pad_container", "functional/ivy/manipulation/constant_pad/constant_pad_functional", "functional/ivy/manipulation/expand_dims", "functional/ivy/manipulation/expand_dims/expand_dims_array", "functional/ivy/manipulation/expand_dims/expand_dims_container", "functional/ivy/manipulation/expand_dims/expand_dims_functional", "functional/ivy/manipulation/flip", "functional/ivy/manipulation/flip/flip_array", "functional/ivy/manipulation/flip/flip_container", "functional/ivy/manipulation/flip/flip_functional", "functional/ivy/manipulation/permute_dims", "functional/ivy/manipulation/permute_dims/permute_dims_array", "functional/ivy/manipulation/permute_dims/permute_dims_container", "functional/ivy/manipulation/permute_dims/permute_dims_functional", "functional/ivy/manipulation/repeat", "functional/ivy/manipulation/repeat/repeat_array", "functional/ivy/manipulation/repeat/repeat_container", "functional/ivy/manipulation/repeat/repeat_functional", "functional/ivy/manipulation/reshape", "functional/ivy/manipulation/reshape/reshape_array", "functional/ivy/manipulation/reshape/reshape_container", "functional/ivy/manipulation/reshape/reshape_functional", "functional/ivy/manipulation/roll", "functional/ivy/manipulation/roll/roll_array", "functional/ivy/manipulation/roll/roll_container", "functional/ivy/manipulation/roll/roll_functional", "functional/ivy/manipulation/roll/static_roll_container", "functional/ivy/manipulation/split", "functional/ivy/manipulation/squeeze", "functional/ivy/manipulation/squeeze/squeeze_array", "functional/ivy/manipulation/squeeze/squeeze_container", "functional/ivy/manipulation/squeeze/squeeze_functional", "functional/ivy/manipulation/stack", "functional/ivy/manipulation/stack/stack_array", "functional/ivy/manipulation/stack/stack_container", "functional/ivy/manipulation/stack/stack_functional", "functional/ivy/manipulation/swapaxes", "functional/ivy/manipulation/swapaxes/swapaxes_array", "functional/ivy/manipulation/swapaxes/swapaxes_container", "functional/ivy/manipulation/swapaxes/swapaxes_functional", "functional/ivy/manipulation/tile", "functional/ivy/manipulation/tile/tile_array", "functional/ivy/manipulation/tile/tile_container", "functional/ivy/manipulation/tile/tile_functional", "functional/ivy/manipulation/zero_pad", "functional/ivy/manipulation/zero_pad/zero_pad_array", "functional/ivy/manipulation/zero_pad/zero_pad_container", "functional/ivy/manipulation/zero_pad/zero_pad_functional", "functional/ivy/meta", "functional/ivy/meta/fomaml_step", "functional/ivy/meta/maml_step", "functional/ivy/meta/reptile_step", "functional/ivy/nest", "functional/ivy/nest/all_nested_indices", "functional/ivy/nest/copy_nest", "functional/ivy/nest/index_nest", "functional/ivy/nest/insert_into_nest_at_index", "functional/ivy/nest/insert_into_nest_at_indices", "functional/ivy/nest/map", "functional/ivy/nest/map_nest_at_index", "functional/ivy/nest/map_nest_at_indices", "functional/ivy/nest/multi_index_nest", "functional/ivy/nest/nested_any", "functional/ivy/nest/nested_indices_where", "functional/ivy/nest/nested_map", "functional/ivy/nest/nested_multi_map", "functional/ivy/nest/prune_nest_at_index", "functional/ivy/nest/prune_nest_at_indices", "functional/ivy/nest/set_nest_at_index", "functional/ivy/nest/set_nest_at_indices", "functional/ivy/norms", "functional/ivy/norms/layer_norm", "functional/ivy/norms/layer_norm/layer_norm_array", "functional/ivy/norms/layer_norm/layer_norm_container", "functional/ivy/norms/layer_norm/layer_norm_functional", "functional/ivy/random", "functional/ivy/random/multinomial", "functional/ivy/random/randint", "functional/ivy/random/randint/randint_functional", "functional/ivy/random/randint/static_randint_container", "functional/ivy/random/random_normal", "functional/ivy/random/random_uniform", "functional/ivy/random/random_uniform/random_uniform_container", "functional/ivy/random/random_uniform/random_uniform_functional", "functional/ivy/random/random_uniform/static_random_uniform_container", "functional/ivy/random/seed", "functional/ivy/random/shuffle", "functional/ivy/searching", "functional/ivy/searching/argmax", "functional/ivy/searching/argmin", "functional/ivy/searching/nonzero", "functional/ivy/searching/where", "functional/ivy/set", "functional/ivy/set/unique_all", "functional/ivy/set/unique_counts", "functional/ivy/set/unique_counts/static_unique_counts_container", "functional/ivy/set/unique_counts/unique_counts_array", "functional/ivy/set/unique_counts/unique_counts_container", "functional/ivy/set/unique_counts/unique_counts_functional", "functional/ivy/set/unique_inverse", "functional/ivy/set/unique_values", "functional/ivy/sorting", "functional/ivy/sorting/argsort", "functional/ivy/sorting/argsort/argsort_array", "functional/ivy/sorting/argsort/argsort_container", "functional/ivy/sorting/argsort/argsort_functional", "functional/ivy/sorting/argsort/static_argsort_container", "functional/ivy/sorting/sort", "functional/ivy/sorting/sort/sort_array", "functional/ivy/sorting/sort/sort_container", "functional/ivy/sorting/sort/sort_functional", "functional/ivy/sorting/sort/static_sort_container", "functional/ivy/statistical", "functional/ivy/statistical/einsum", "functional/ivy/statistical/einsum/einsum_array", "functional/ivy/statistical/einsum/einsum_container", "functional/ivy/statistical/einsum/einsum_functional", "functional/ivy/statistical/max", "functional/ivy/statistical/max/max_array", "functional/ivy/statistical/max/max_container", "functional/ivy/statistical/max/max_functional", "functional/ivy/statistical/mean", "functional/ivy/statistical/mean/mean_array", "functional/ivy/statistical/mean/mean_container", "functional/ivy/statistical/mean/mean_functional", "functional/ivy/statistical/min", "functional/ivy/statistical/min/min_array", "functional/ivy/statistical/min/min_container", "functional/ivy/statistical/min/min_functional", "functional/ivy/statistical/prod", "functional/ivy/statistical/prod/prod_array", "functional/ivy/statistical/prod/prod_container", "functional/ivy/statistical/prod/prod_functional", "functional/ivy/statistical/std", "functional/ivy/statistical/std/std_array", "functional/ivy/statistical/std/std_container", "functional/ivy/statistical/std/std_functional", "functional/ivy/statistical/sum", "functional/ivy/statistical/sum/sum_array", "functional/ivy/statistical/sum/sum_container", "functional/ivy/statistical/sum/sum_functional", "functional/ivy/statistical/var", "functional/ivy/statistical/var/var_array", "functional/ivy/statistical/var/var_container", "functional/ivy/statistical/var/var_functional", "functional/ivy/utility", "functional/ivy/utility/all", "functional/ivy/utility/all/all_array", "functional/ivy/utility/all/all_container", "functional/ivy/utility/all/all_functional", "functional/ivy/utility/all/static_all_container", "functional/ivy/utility/any", "functional/ivy/utility/any/any_array", "functional/ivy/utility/any/any_container", "functional/ivy/utility/any/any_functional", "functional/ivy/utility/any/static_any_container", "index", "index_append", "index_prepend", "inspection", "inspection/add_array_specs", "inspection/fn_array_spec", "roadmap", "supported_frameworks", "verbosity", "verbosity/cprint"], "filenames": ["backend_handler.rst", "backend_handler/ContextManager:\n    def __init__.rst", "backend_handler/choose_random_backend.rst", "backend_handler/clear_backend_stack.rst", "backend_handler/current_backend.rst", "backend_handler/get_backend.rst", "backend_handler/set_backend.rst", "backend_handler/try_import_ivy_jax.rst", "backend_handler/try_import_ivy_mxnet.rst", "backend_handler/try_import_ivy_numpy.rst", "backend_handler/try_import_ivy_tf.rst", "backend_handler/try_import_ivy_torch.rst", "backend_handler/unset_backend.rst", "background.rst", "background/ml_explosion.rst", "background/standardization.rst", "background/why_unify.rst", "classes/data_classes.rst", "classes/data_classes/array.rst", "classes/data_classes/array/activations.rst", "classes/data_classes/array/activations/ArrayWithActivations.rst", "classes/data_classes/array/conversions.rst", "classes/data_classes/array/conversions/args_to_ivy.rst", "classes/data_classes/array/conversions/args_to_native.rst", "classes/data_classes/array/conversions/to_ivy.rst", "classes/data_classes/array/conversions/to_native.rst", "classes/data_classes/array/creation.rst", "classes/data_classes/array/creation/ArrayWithCreation.rst", "classes/data_classes/array/data_type.rst", "classes/data_classes/array/data_type/ArrayWithDataTypes.rst", "classes/data_classes/array/device.rst", "classes/data_classes/array/device/ArrayWithDevice.rst", "classes/data_classes/array/elementwise.rst", "classes/data_classes/array/elementwise/ArrayWithElementwise.rst", "classes/data_classes/array/general.rst", "classes/data_classes/array/general/ArrayWithGeneral.rst", "classes/data_classes/array/gradients.rst", "classes/data_classes/array/gradients/ArrayWithGradients.rst", "classes/data_classes/array/image.rst", "classes/data_classes/array/image/ArrayWithImage.rst", "classes/data_classes/array/layers.rst", "classes/data_classes/array/layers/ArrayWithLayers.rst", "classes/data_classes/array/linear_algebra.rst", "classes/data_classes/array/linear_algebra/ArrayWithLinearAlgebra.rst", "classes/data_classes/array/losses.rst", "classes/data_classes/array/losses/ArrayWithLosses.rst", "classes/data_classes/array/manipulation.rst", "classes/data_classes/array/manipulation/ArrayWithManipulation.rst", "classes/data_classes/array/norms.rst", "classes/data_classes/array/norms/ArrayWithNorms.rst", "classes/data_classes/array/random.rst", "classes/data_classes/array/random/ArrayWithRandom.rst", "classes/data_classes/array/searching.rst", "classes/data_classes/array/searching/ArrayWithSearching.rst", "classes/data_classes/array/set.rst", "classes/data_classes/array/set/ArrayWithSet.rst", "classes/data_classes/array/sorting.rst", "classes/data_classes/array/sorting/ArrayWithSorting.rst", "classes/data_classes/array/statistical.rst", "classes/data_classes/array/statistical/ArrayWithStatistical.rst", "classes/data_classes/array/utility.rst", "classes/data_classes/array/utility/ArrayWithUtility.rst", "classes/data_classes/array/wrapping.rst", "classes/data_classes/array/wrapping/add_ivy_array_instance_methods.rst", "classes/data_classes/container.rst", "classes/data_classes/container/activations.rst", "classes/data_classes/container/activations/ContainerWithActivations.rst", "classes/data_classes/container/base.rst", "classes/data_classes/container/base/ContainerBase.rst", "classes/data_classes/container/container.rst", "classes/data_classes/container/container/Container.rst", "classes/data_classes/container/container/MultiDevContainer.rst", "classes/data_classes/container/creation.rst", "classes/data_classes/container/creation/ContainerWithCreation.rst", "classes/data_classes/container/data_type.rst", "classes/data_classes/container/data_type/ContainerWithDataTypes.rst", "classes/data_classes/container/device.rst", "classes/data_classes/container/device/ContainerWithDevice.rst", "classes/data_classes/container/elementwise.rst", "classes/data_classes/container/elementwise/ContainerWithElementwise.rst", "classes/data_classes/container/general.rst", "classes/data_classes/container/general/ContainerWithGeneral.rst", "classes/data_classes/container/gradients.rst", "classes/data_classes/container/gradients/ContainerWithGradients.rst", "classes/data_classes/container/image.rst", "classes/data_classes/container/image/ContainerWithImage.rst", "classes/data_classes/container/layers.rst", "classes/data_classes/container/layers/ContainerWithLayers.rst", "classes/data_classes/container/linear_algebra.rst", "classes/data_classes/container/linear_algebra/ContainerWithLinearAlgebra.rst", "classes/data_classes/container/losses.rst", "classes/data_classes/container/losses/ContainerWithLosses.rst", "classes/data_classes/container/manipulation.rst", "classes/data_classes/container/manipulation/ContainerWithManipulation.rst", "classes/data_classes/container/norms.rst", "classes/data_classes/container/norms/ContainerWithNorms.rst", "classes/data_classes/container/random.rst", "classes/data_classes/container/random/ContainerWithRandom.rst", "classes/data_classes/container/searching.rst", "classes/data_classes/container/searching/ContainerWithSearching.rst", "classes/data_classes/container/set.rst", "classes/data_classes/container/set/ContainerWithSet.rst", "classes/data_classes/container/sorting.rst", "classes/data_classes/container/sorting/ContainerWithSorting.rst", "classes/data_classes/container/statistical.rst", "classes/data_classes/container/statistical/ContainerWithStatistical.rst", "classes/data_classes/container/utility.rst", "classes/data_classes/container/utility/ContainerWithUtility.rst", "classes/data_classes/container/wrapping.rst", "classes/data_classes/container/wrapping/add_ivy_container_instance_methods.rst", "classes/stateful.rst", "classes/stateful/activations.rst", "classes/stateful/activations/GEGLU.rst", "classes/stateful/activations/GELU.rst", "classes/stateful/converters.rst", "classes/stateful/converters/to_ivy_module.rst", "classes/stateful/initializers.rst", "classes/stateful/initializers/Constant:\n    def __init__.rst", "classes/stateful/initializers/FirstLayerSiren.rst", "classes/stateful/initializers/GlorotUniform.rst", "classes/stateful/initializers/KaimingNormal:\n    def __init__.rst", "classes/stateful/initializers/Ones.rst", "classes/stateful/initializers/Siren.rst", "classes/stateful/initializers/Uniform:\n    def __init__.rst", "classes/stateful/initializers/Zeros.rst", "classes/stateful/layers.rst", "classes/stateful/layers/Conv1D.rst", "classes/stateful/layers/Conv1DTranspose.rst", "classes/stateful/layers/Conv2D.rst", "classes/stateful/layers/Conv2DTranspose.rst", "classes/stateful/layers/Conv3D.rst", "classes/stateful/layers/Conv3DTranspose.rst", "classes/stateful/layers/DepthwiseConv2D.rst", "classes/stateful/layers/Dropout.rst", "classes/stateful/layers/LSTM.rst", "classes/stateful/layers/Linear.rst", "classes/stateful/layers/MultiHeadAttention.rst", "classes/stateful/module.rst", "classes/stateful/module/Module.rst", "classes/stateful/norms.rst", "classes/stateful/norms/LayerNorm.rst", "classes/stateful/optimizers.rst", "classes/stateful/optimizers/Adam.rst", "classes/stateful/optimizers/LAMB.rst", "classes/stateful/optimizers/LARS.rst", "classes/stateful/optimizers/Optimizer.rst", "classes/stateful/optimizers/SGD.rst", "classes/stateful/sequential.rst", "classes/stateful/sequential/Sequential.rst", "contributing.rst", "contributing/0_setting_up.rst", "contributing/1_the_basics.rst", "contributing/4_open_tasks.rst", "contributing/building_the_docs.rst", "deep_dive.rst", "deep_dive/0_navigating_the_code.rst", "deep_dive/10_docstrings.rst", "deep_dive/11_docstring_examples.rst", "deep_dive/12_array_api_tests.rst", "deep_dive/13_ivy_tests.rst", "deep_dive/1_function_types.rst", "deep_dive/2_backend_setting.rst", "deep_dive/3_function_wrapping.rst", "deep_dive/4_arrays.rst", "deep_dive/5_containers.rst", "deep_dive/6_data_types.rst", "deep_dive/7_devices.rst", "deep_dive/8_inplace_updates.rst", "deep_dive/9_function_arguments.rst", "design.rst", "design/building_blocks.rst", "design/ivy_as_a_framework.rst", "design/ivy_as_a_framework/ivy_array.rst", "design/ivy_as_a_framework/ivy_container.rst", "design/ivy_as_a_framework/ivy_stateful_api.rst", "design/ivy_as_a_transpiler.rst", "docs/ivy.rst", "docs/ivy_builder.rst", "docs/ivy_ecosystem.rst", "docs/ivy_gym.rst", "docs/ivy_mech.rst", "docs/ivy_memory.rst", "docs/ivy_models.rst", "docs/ivy_robot.rst", "docs/ivy_vision.rst", "extensions.rst", "extensions/applied_libraries.rst", "faq.rst", "func_wrapper.rst", "func_wrapper/handle_nestable.rst", "func_wrapper/handle_out_argument.rst", "func_wrapper/infer_device.rst", "func_wrapper/infer_dtype.rst", "func_wrapper/inputs_to_ivy_arrays.rst", "func_wrapper/inputs_to_native_arrays.rst", "func_wrapper/outputs_to_ivy_arrays.rst", "func_wrapper/to_native_arrays_and_back.rst", "functional/ivy.rst", "functional/ivy/activations.rst", "functional/ivy/activations/gelu.rst", "functional/ivy/activations/leaky_relu.rst", "functional/ivy/activations/relu.rst", "functional/ivy/activations/sigmoid.rst", "functional/ivy/activations/softmax.rst", "functional/ivy/activations/softplus.rst", "functional/ivy/activations/softplus/softplus_array.rst", "functional/ivy/activations/softplus/softplus_container.rst", "functional/ivy/activations/softplus/softplus_functional.rst", "functional/ivy/activations/softplus/static_softplus_container.rst", "functional/ivy/activations/tanh.rst", "functional/ivy/compilation.rst", "functional/ivy/compilation/compile.rst", "functional/ivy/constants.rst", "functional/ivy/creation.rst", "functional/ivy/creation/arange.rst", "functional/ivy/creation/arange/arange_functional.rst", "functional/ivy/creation/arange/static_arange_container.rst", "functional/ivy/creation/asarray.rst", "functional/ivy/creation/asarray/asarray_array.rst", "functional/ivy/creation/asarray/asarray_container.rst", "functional/ivy/creation/asarray/asarray_functional.rst", "functional/ivy/creation/asarray/static_asarray_container.rst", "functional/ivy/creation/empty.rst", "functional/ivy/creation/empty_like.rst", "functional/ivy/creation/empty_like/empty_like_array.rst", "functional/ivy/creation/empty_like/empty_like_container.rst", "functional/ivy/creation/empty_like/empty_like_functional.rst", "functional/ivy/creation/empty_like/static_empty_like_container.rst", "functional/ivy/creation/eye.rst", "functional/ivy/creation/eye/eye_functional.rst", "functional/ivy/creation/eye/static_eye_container.rst", "functional/ivy/creation/from_dlpack.rst", "functional/ivy/creation/from_dlpack/from_dlpack_array.rst", "functional/ivy/creation/from_dlpack/from_dlpack_container.rst", "functional/ivy/creation/from_dlpack/from_dlpack_functional.rst", "functional/ivy/creation/from_dlpack/static_from_dlpack_container.rst", "functional/ivy/creation/full.rst", "functional/ivy/creation/full_like.rst", "functional/ivy/creation/full_like/full_like_array.rst", "functional/ivy/creation/full_like/full_like_container.rst", "functional/ivy/creation/full_like/full_like_functional.rst", "functional/ivy/creation/full_like/static_full_like_container.rst", "functional/ivy/creation/linspace.rst", "functional/ivy/creation/linspace/linspace_functional.rst", "functional/ivy/creation/linspace/static_linspace_container.rst", "functional/ivy/creation/logspace.rst", "functional/ivy/creation/logspace/logspace_functional.rst", "functional/ivy/creation/logspace/static_logspace_container.rst", "functional/ivy/creation/meshgrid.rst", "functional/ivy/creation/meshgrid/meshgrid_array.rst", "functional/ivy/creation/meshgrid/meshgrid_container.rst", "functional/ivy/creation/meshgrid/meshgrid_functional.rst", "functional/ivy/creation/meshgrid/static_meshgrid_container.rst", "functional/ivy/creation/native_array.rst", "functional/ivy/creation/native_array/native_array_array.rst", "functional/ivy/creation/native_array/native_array_container.rst", "functional/ivy/creation/native_array/native_array_functional.rst", "functional/ivy/creation/native_array/static_native_array_container.rst", "functional/ivy/creation/ones.rst", "functional/ivy/creation/ones/ones_functional.rst", "functional/ivy/creation/ones/static_ones_container.rst", "functional/ivy/creation/ones_like.rst", "functional/ivy/creation/ones_like/ones_like_array.rst", "functional/ivy/creation/ones_like/ones_like_container.rst", "functional/ivy/creation/ones_like/ones_like_functional.rst", "functional/ivy/creation/ones_like/static_ones_like_container.rst", "functional/ivy/creation/tril.rst", "functional/ivy/creation/tril/static_tril_container.rst", "functional/ivy/creation/tril/tril_array.rst", "functional/ivy/creation/tril/tril_container.rst", "functional/ivy/creation/tril/tril_functional.rst", "functional/ivy/creation/triu.rst", "functional/ivy/creation/triu/static_triu_container.rst", "functional/ivy/creation/triu/triu_array.rst", "functional/ivy/creation/triu/triu_container.rst", "functional/ivy/creation/triu/triu_functional.rst", "functional/ivy/creation/zeros.rst", "functional/ivy/creation/zeros/static_zeros_container.rst", "functional/ivy/creation/zeros/zeros_functional.rst", "functional/ivy/creation/zeros_like.rst", "functional/ivy/creation/zeros_like/static_zeros_like_container.rst", "functional/ivy/creation/zeros_like/zeros_like_array.rst", "functional/ivy/creation/zeros_like/zeros_like_container.rst", "functional/ivy/creation/zeros_like/zeros_like_functional.rst", "functional/ivy/data_type.rst", "functional/ivy/data_type/DefaultDtype:\n    \"\"\"\"\"\"\n\n    # noinspection PyShadowingNames\n    def __init__.rst", "functional/ivy/data_type/DefaultFloatDtype:\n    \"\"\"\"\"\"\n\n    # noinspection PyShadowingNames\n    def __init__.rst", "functional/ivy/data_type/DefaultIntDtype:\n    \"\"\"\"\"\"\n\n    # noinspection PyShadowingNames\n    def __init__.rst", "functional/ivy/data_type/as_ivy_dtype.rst", "functional/ivy/data_type/as_native_dtype.rst", "functional/ivy/data_type/astype.rst", "functional/ivy/data_type/broadcast_arrays.rst", "functional/ivy/data_type/broadcast_to.rst", "functional/ivy/data_type/can_cast.rst", "functional/ivy/data_type/can_cast/can_cast_array.rst", "functional/ivy/data_type/can_cast/can_cast_container.rst", "functional/ivy/data_type/can_cast/can_cast_functional.rst", "functional/ivy/data_type/can_cast/static_can_cast_container.rst", "functional/ivy/data_type/closest_valid_dtype.rst", "functional/ivy/data_type/default_dtype.rst", "functional/ivy/data_type/default_float_dtype.rst", "functional/ivy/data_type/default_int_dtype.rst", "functional/ivy/data_type/dtype.rst", "functional/ivy/data_type/dtype_bits.rst", "functional/ivy/data_type/finfo.rst", "functional/ivy/data_type/function_supported_dtypes.rst", "functional/ivy/data_type/function_unsupported_dtypes.rst", "functional/ivy/data_type/iinfo.rst", "functional/ivy/data_type/invalid_dtype.rst", "functional/ivy/data_type/is_float_dtype.rst", "functional/ivy/data_type/is_int_dtype.rst", "functional/ivy/data_type/promote_types.rst", "functional/ivy/data_type/result_type.rst", "functional/ivy/data_type/set_default_dtype.rst", "functional/ivy/data_type/set_default_float_dtype.rst", "functional/ivy/data_type/set_default_int_dtype.rst", "functional/ivy/data_type/type_promote_arrays.rst", "functional/ivy/data_type/unset_default_dtype.rst", "functional/ivy/data_type/unset_default_float_dtype.rst", "functional/ivy/data_type/unset_default_int_dtype.rst", "functional/ivy/data_type/valid_dtype.rst", "functional/ivy/device.rst", "functional/ivy/device/DefaultDevice:\n    \"\"\"\"\"\"\n\n    # noinspection PyShadowingNames\n    def __init__.rst", "functional/ivy/device/DevClonedItem.rst", "functional/ivy/device/DevClonedIter.rst", "functional/ivy/device/DevClonedNest.rst", "functional/ivy/device/DevDistItem.rst", "functional/ivy/device/DevDistIter.rst", "functional/ivy/device/DevDistNest.rst", "functional/ivy/device/DevManager:\n    \"\"\"\"\"\"\n\n    def __init__.rst", "functional/ivy/device/DevMapper.rst", "functional/ivy/device/DevMapperMultiProc.rst", "functional/ivy/device/MultiDev:\n    def __init__.rst", "functional/ivy/device/MultiDevItem.rst", "functional/ivy/device/MultiDevIter.rst", "functional/ivy/device/MultiDevNest.rst", "functional/ivy/device/Profiler.rst", "functional/ivy/device/as_ivy_dev.rst", "functional/ivy/device/as_native_dev.rst", "functional/ivy/device/clear_mem_on_dev.rst", "functional/ivy/device/default_device.rst", "functional/ivy/device/dev.rst", "functional/ivy/device/dev_clone.rst", "functional/ivy/device/dev_clone_array.rst", "functional/ivy/device/dev_clone_iter.rst", "functional/ivy/device/dev_clone_nest.rst", "functional/ivy/device/dev_dist.rst", "functional/ivy/device/dev_dist_array.rst", "functional/ivy/device/dev_dist_iter.rst", "functional/ivy/device/dev_dist_nest.rst", "functional/ivy/device/dev_unify.rst", "functional/ivy/device/dev_unify_array.rst", "functional/ivy/device/dev_unify_iter.rst", "functional/ivy/device/dev_unify_nest.rst", "functional/ivy/device/dev_util.rst", "functional/ivy/device/get_all_ivy_arrays_on_dev.rst", "functional/ivy/device/gpu_is_available.rst", "functional/ivy/device/num_cpu_cores.rst", "functional/ivy/device/num_gpus.rst", "functional/ivy/device/num_ivy_arrays_on_dev.rst", "functional/ivy/device/percent_used_mem_on_dev.rst", "functional/ivy/device/print_all_ivy_arrays_on_dev.rst", "functional/ivy/device/set_default_device.rst", "functional/ivy/device/set_split_factor.rst", "functional/ivy/device/split_factor.rst", "functional/ivy/device/split_func_call.rst", "functional/ivy/device/to_device.rst", "functional/ivy/device/total_mem_on_dev.rst", "functional/ivy/device/tpu_is_available.rst", "functional/ivy/device/unset_default_device.rst", "functional/ivy/device/used_mem_on_dev.rst", "functional/ivy/elementwise.rst", "functional/ivy/elementwise/abs.rst", "functional/ivy/elementwise/abs/abs_array.rst", "functional/ivy/elementwise/abs/abs_container.rst", "functional/ivy/elementwise/abs/abs_functional.rst", "functional/ivy/elementwise/abs/static_abs_container.rst", "functional/ivy/elementwise/acos.rst", "functional/ivy/elementwise/acos/acos_array.rst", "functional/ivy/elementwise/acos/acos_container.rst", "functional/ivy/elementwise/acos/acos_functional.rst", "functional/ivy/elementwise/acosh.rst", "functional/ivy/elementwise/acosh/acosh_array.rst", "functional/ivy/elementwise/acosh/acosh_container.rst", "functional/ivy/elementwise/acosh/acosh_functional.rst", "functional/ivy/elementwise/add.rst", "functional/ivy/elementwise/add/add_array.rst", "functional/ivy/elementwise/add/add_container.rst", "functional/ivy/elementwise/add/add_functional.rst", "functional/ivy/elementwise/add/static_add_container.rst", "functional/ivy/elementwise/asin.rst", "functional/ivy/elementwise/asin/asin_array.rst", "functional/ivy/elementwise/asin/asin_container.rst", "functional/ivy/elementwise/asin/asin_functional.rst", "functional/ivy/elementwise/asinh.rst", "functional/ivy/elementwise/asinh/asinh_array.rst", "functional/ivy/elementwise/asinh/asinh_container.rst", "functional/ivy/elementwise/asinh/asinh_functional.rst", "functional/ivy/elementwise/atan.rst", "functional/ivy/elementwise/atan/atan_array.rst", "functional/ivy/elementwise/atan/atan_container.rst", "functional/ivy/elementwise/atan/atan_functional.rst", "functional/ivy/elementwise/atan2.rst", "functional/ivy/elementwise/atan2/atan2_array.rst", "functional/ivy/elementwise/atan2/atan2_container.rst", "functional/ivy/elementwise/atan2/atan2_functional.rst", "functional/ivy/elementwise/atanh.rst", "functional/ivy/elementwise/atanh/atanh_array.rst", "functional/ivy/elementwise/atanh/atanh_container.rst", "functional/ivy/elementwise/atanh/atanh_functional.rst", "functional/ivy/elementwise/bitwise_and.rst", "functional/ivy/elementwise/bitwise_and/bitwise_and_array.rst", "functional/ivy/elementwise/bitwise_and/bitwise_and_container.rst", "functional/ivy/elementwise/bitwise_and/bitwise_and_functional.rst", "functional/ivy/elementwise/bitwise_invert.rst", "functional/ivy/elementwise/bitwise_invert/bitwise_invert_array.rst", "functional/ivy/elementwise/bitwise_invert/bitwise_invert_container.rst", "functional/ivy/elementwise/bitwise_invert/bitwise_invert_functional.rst", "functional/ivy/elementwise/bitwise_left_shift.rst", "functional/ivy/elementwise/bitwise_left_shift/bitwise_left_shift_array.rst", "functional/ivy/elementwise/bitwise_left_shift/bitwise_left_shift_container.rst", "functional/ivy/elementwise/bitwise_left_shift/bitwise_left_shift_functional.rst", "functional/ivy/elementwise/bitwise_or.rst", "functional/ivy/elementwise/bitwise_or/bitwise_or_array.rst", "functional/ivy/elementwise/bitwise_or/bitwise_or_container.rst", "functional/ivy/elementwise/bitwise_or/bitwise_or_functional.rst", "functional/ivy/elementwise/bitwise_right_shift.rst", "functional/ivy/elementwise/bitwise_right_shift/bitwise_right_shift_array.rst", "functional/ivy/elementwise/bitwise_right_shift/bitwise_right_shift_container.rst", "functional/ivy/elementwise/bitwise_right_shift/bitwise_right_shift_functional.rst", "functional/ivy/elementwise/bitwise_xor.rst", "functional/ivy/elementwise/bitwise_xor/bitwise_xor_array.rst", "functional/ivy/elementwise/bitwise_xor/bitwise_xor_container.rst", "functional/ivy/elementwise/bitwise_xor/bitwise_xor_functional.rst", "functional/ivy/elementwise/ceil.rst", "functional/ivy/elementwise/ceil/ceil_array.rst", "functional/ivy/elementwise/ceil/ceil_container.rst", "functional/ivy/elementwise/ceil/ceil_functional.rst", "functional/ivy/elementwise/cos.rst", "functional/ivy/elementwise/cos/cos_array.rst", "functional/ivy/elementwise/cos/cos_container.rst", "functional/ivy/elementwise/cos/cos_functional.rst", "functional/ivy/elementwise/cosh.rst", "functional/ivy/elementwise/cosh/cosh_array.rst", "functional/ivy/elementwise/cosh/cosh_container.rst", "functional/ivy/elementwise/cosh/cosh_functional.rst", "functional/ivy/elementwise/divide.rst", "functional/ivy/elementwise/divide/divide_array.rst", "functional/ivy/elementwise/divide/divide_container.rst", "functional/ivy/elementwise/divide/divide_functional.rst", "functional/ivy/elementwise/divide/static_divide_container.rst", "functional/ivy/elementwise/equal.rst", "functional/ivy/elementwise/equal/equal_array.rst", "functional/ivy/elementwise/equal/equal_container.rst", "functional/ivy/elementwise/equal/equal_functional.rst", "functional/ivy/elementwise/erf.rst", "functional/ivy/elementwise/erf/erf_array.rst", "functional/ivy/elementwise/erf/erf_container.rst", "functional/ivy/elementwise/erf/erf_functional.rst", "functional/ivy/elementwise/exp.rst", "functional/ivy/elementwise/exp/exp_array.rst", "functional/ivy/elementwise/exp/exp_container.rst", "functional/ivy/elementwise/exp/exp_functional.rst", "functional/ivy/elementwise/expm1.rst", "functional/ivy/elementwise/expm1/expm1_array.rst", "functional/ivy/elementwise/expm1/expm1_container.rst", "functional/ivy/elementwise/expm1/expm1_functional.rst", "functional/ivy/elementwise/floor.rst", "functional/ivy/elementwise/floor/floor_array.rst", "functional/ivy/elementwise/floor/floor_container.rst", "functional/ivy/elementwise/floor/floor_functional.rst", "functional/ivy/elementwise/floor_divide.rst", "functional/ivy/elementwise/floor_divide/floor_divide_array.rst", "functional/ivy/elementwise/floor_divide/floor_divide_container.rst", "functional/ivy/elementwise/floor_divide/floor_divide_functional.rst", "functional/ivy/elementwise/greater.rst", "functional/ivy/elementwise/greater/greater_array.rst", "functional/ivy/elementwise/greater/greater_container.rst", "functional/ivy/elementwise/greater/greater_functional.rst", "functional/ivy/elementwise/greater_equal.rst", "functional/ivy/elementwise/greater_equal/greater_equal_array.rst", "functional/ivy/elementwise/greater_equal/greater_equal_container.rst", "functional/ivy/elementwise/greater_equal/greater_equal_functional.rst", "functional/ivy/elementwise/isfinite.rst", "functional/ivy/elementwise/isfinite/isfinite_array.rst", "functional/ivy/elementwise/isfinite/isfinite_container.rst", "functional/ivy/elementwise/isfinite/isfinite_functional.rst", "functional/ivy/elementwise/isinf.rst", "functional/ivy/elementwise/isinf/isinf_array.rst", "functional/ivy/elementwise/isinf/isinf_container.rst", "functional/ivy/elementwise/isinf/isinf_functional.rst", "functional/ivy/elementwise/isnan.rst", "functional/ivy/elementwise/isnan/isnan_array.rst", "functional/ivy/elementwise/isnan/isnan_container.rst", "functional/ivy/elementwise/isnan/isnan_functional.rst", "functional/ivy/elementwise/less.rst", "functional/ivy/elementwise/less/less_array.rst", "functional/ivy/elementwise/less/less_container.rst", "functional/ivy/elementwise/less/less_functional.rst", "functional/ivy/elementwise/less_equal.rst", "functional/ivy/elementwise/less_equal/less_equal_array.rst", "functional/ivy/elementwise/less_equal/less_equal_container.rst", "functional/ivy/elementwise/less_equal/less_equal_functional.rst", "functional/ivy/elementwise/log.rst", "functional/ivy/elementwise/log/log_array.rst", "functional/ivy/elementwise/log/log_container.rst", "functional/ivy/elementwise/log/log_functional.rst", "functional/ivy/elementwise/log10.rst", "functional/ivy/elementwise/log10/log10_array.rst", "functional/ivy/elementwise/log10/log10_container.rst", "functional/ivy/elementwise/log10/log10_functional.rst", "functional/ivy/elementwise/log1p.rst", "functional/ivy/elementwise/log1p/log1p_array.rst", "functional/ivy/elementwise/log1p/log1p_container.rst", "functional/ivy/elementwise/log1p/log1p_functional.rst", "functional/ivy/elementwise/log2.rst", "functional/ivy/elementwise/log2/log2_array.rst", "functional/ivy/elementwise/log2/log2_container.rst", "functional/ivy/elementwise/log2/log2_functional.rst", "functional/ivy/elementwise/logaddexp.rst", "functional/ivy/elementwise/logaddexp/logaddexp_array.rst", "functional/ivy/elementwise/logaddexp/logaddexp_container.rst", "functional/ivy/elementwise/logaddexp/logaddexp_functional.rst", "functional/ivy/elementwise/logical_and.rst", "functional/ivy/elementwise/logical_and/logical_and_array.rst", "functional/ivy/elementwise/logical_and/logical_and_container.rst", "functional/ivy/elementwise/logical_and/logical_and_functional.rst", "functional/ivy/elementwise/logical_not.rst", "functional/ivy/elementwise/logical_not/logical_not_array.rst", "functional/ivy/elementwise/logical_not/logical_not_container.rst", "functional/ivy/elementwise/logical_not/logical_not_functional.rst", "functional/ivy/elementwise/logical_or.rst", "functional/ivy/elementwise/logical_or/logical_or_array.rst", "functional/ivy/elementwise/logical_or/logical_or_container.rst", "functional/ivy/elementwise/logical_or/logical_or_functional.rst", "functional/ivy/elementwise/logical_xor.rst", "functional/ivy/elementwise/logical_xor/logical_xor_array.rst", "functional/ivy/elementwise/logical_xor/logical_xor_container.rst", "functional/ivy/elementwise/logical_xor/logical_xor_functional.rst", "functional/ivy/elementwise/maximum.rst", "functional/ivy/elementwise/minimum.rst", "functional/ivy/elementwise/multiply.rst", "functional/ivy/elementwise/multiply/multiply_array.rst", "functional/ivy/elementwise/multiply/multiply_container.rst", "functional/ivy/elementwise/multiply/multiply_functional.rst", "functional/ivy/elementwise/multiply/static_multiply_container.rst", "functional/ivy/elementwise/negative.rst", "functional/ivy/elementwise/negative/negative_array.rst", "functional/ivy/elementwise/negative/negative_container.rst", "functional/ivy/elementwise/negative/negative_functional.rst", "functional/ivy/elementwise/not_equal.rst", "functional/ivy/elementwise/not_equal/not_equal_array.rst", "functional/ivy/elementwise/not_equal/not_equal_container.rst", "functional/ivy/elementwise/not_equal/not_equal_functional.rst", "functional/ivy/elementwise/positive.rst", "functional/ivy/elementwise/positive/positive_array.rst", "functional/ivy/elementwise/positive/positive_container.rst", "functional/ivy/elementwise/positive/positive_functional.rst", "functional/ivy/elementwise/pow.rst", "functional/ivy/elementwise/pow/pow_array.rst", "functional/ivy/elementwise/pow/pow_container.rst", "functional/ivy/elementwise/pow/pow_functional.rst", "functional/ivy/elementwise/remainder.rst", "functional/ivy/elementwise/remainder/remainder_array.rst", "functional/ivy/elementwise/remainder/remainder_container.rst", "functional/ivy/elementwise/remainder/remainder_functional.rst", "functional/ivy/elementwise/round.rst", "functional/ivy/elementwise/round/round_array.rst", "functional/ivy/elementwise/round/round_container.rst", "functional/ivy/elementwise/round/round_functional.rst", "functional/ivy/elementwise/sign.rst", "functional/ivy/elementwise/sign/sign_array.rst", "functional/ivy/elementwise/sign/sign_container.rst", "functional/ivy/elementwise/sign/sign_functional.rst", "functional/ivy/elementwise/sin.rst", "functional/ivy/elementwise/sin/sin_array.rst", "functional/ivy/elementwise/sin/sin_container.rst", "functional/ivy/elementwise/sin/sin_functional.rst", "functional/ivy/elementwise/sinh.rst", "functional/ivy/elementwise/sinh/sinh_array.rst", "functional/ivy/elementwise/sinh/sinh_container.rst", "functional/ivy/elementwise/sinh/sinh_functional.rst", "functional/ivy/elementwise/sqrt.rst", "functional/ivy/elementwise/sqrt/sqrt_array.rst", "functional/ivy/elementwise/sqrt/sqrt_container.rst", "functional/ivy/elementwise/sqrt/sqrt_functional.rst", "functional/ivy/elementwise/square.rst", "functional/ivy/elementwise/square/square_array.rst", "functional/ivy/elementwise/square/square_container.rst", "functional/ivy/elementwise/square/square_functional.rst", "functional/ivy/elementwise/subtract.rst", "functional/ivy/elementwise/subtract/static_subtract_container.rst", "functional/ivy/elementwise/subtract/subtract_array.rst", "functional/ivy/elementwise/subtract/subtract_container.rst", "functional/ivy/elementwise/subtract/subtract_functional.rst", "functional/ivy/elementwise/tan.rst", "functional/ivy/elementwise/tan/static_tan_container.rst", "functional/ivy/elementwise/tan/tan_array.rst", "functional/ivy/elementwise/tan/tan_container.rst", "functional/ivy/elementwise/tan/tan_functional.rst", "functional/ivy/elementwise/tanh.rst", "functional/ivy/elementwise/tanh/static_tanh_container.rst", "functional/ivy/elementwise/tanh/tanh_array.rst", "functional/ivy/elementwise/tanh/tanh_container.rst", "functional/ivy/elementwise/tanh/tanh_functional.rst", "functional/ivy/elementwise/trunc.rst", "functional/ivy/elementwise/trunc/trunc_array.rst", "functional/ivy/elementwise/trunc/trunc_container.rst", "functional/ivy/elementwise/trunc/trunc_functional.rst", "functional/ivy/general.rst", "functional/ivy/general/all_equal.rst", "functional/ivy/general/all_equal/all_equal_array.rst", "functional/ivy/general/all_equal/all_equal_container.rst", "functional/ivy/general/all_equal/all_equal_functional.rst", "functional/ivy/general/all_equal/static_all_equal_container.rst", "functional/ivy/general/arg_info.rst", "functional/ivy/general/arg_names.rst", "functional/ivy/general/array_equal.rst", "functional/ivy/general/arrays_equal.rst", "functional/ivy/general/assert_supports_inplace.rst", "functional/ivy/general/cache_fn.rst", "functional/ivy/general/clip_matrix_norm.rst", "functional/ivy/general/clip_vector_norm.rst", "functional/ivy/general/clip_vector_norm/clip_vector_norm_container.rst", "functional/ivy/general/clip_vector_norm/clip_vector_norm_functional.rst", "functional/ivy/general/container_types.rst", "functional/ivy/general/copy_array.rst", "functional/ivy/general/cumprod.rst", "functional/ivy/general/cumsum.rst", "functional/ivy/general/current_backend_str.rst", "functional/ivy/general/default.rst", "functional/ivy/general/einops_rearrange.rst", "functional/ivy/general/einops_reduce.rst", "functional/ivy/general/einops_repeat.rst", "functional/ivy/general/exists.rst", "functional/ivy/general/floormod.rst", "functional/ivy/general/fourier_encode.rst", "functional/ivy/general/gather.rst", "functional/ivy/general/gather_nd.rst", "functional/ivy/general/gather_nd/gather_nd_array.rst", "functional/ivy/general/gather_nd/gather_nd_container.rst", "functional/ivy/general/gather_nd/gather_nd_functional.rst", "functional/ivy/general/gather_nd/static_gather_nd_container.rst", "functional/ivy/general/get_all_arrays_in_memory.rst", "functional/ivy/general/get_min_base.rst", "functional/ivy/general/get_min_denominator.rst", "functional/ivy/general/get_num_dims.rst", "functional/ivy/general/get_referrers_recursive.rst", "functional/ivy/general/has_nans.rst", "functional/ivy/general/indices_where.rst", "functional/ivy/general/inplace_arrays_supported.rst", "functional/ivy/general/inplace_decrement.rst", "functional/ivy/general/inplace_increment.rst", "functional/ivy/general/inplace_update.rst", "functional/ivy/general/inplace_variables_supported.rst", "functional/ivy/general/is_array.rst", "functional/ivy/general/is_ivy_array.rst", "functional/ivy/general/is_ivy_container.rst", "functional/ivy/general/is_native_array.rst", "functional/ivy/general/match_kwargs.rst", "functional/ivy/general/multiprocessing.rst", "functional/ivy/general/num_arrays_in_memory.rst", "functional/ivy/general/one_hot.rst", "functional/ivy/general/print_all_arrays_in_memory.rst", "functional/ivy/general/queue_timeout.rst", "functional/ivy/general/scatter_flat.rst", "functional/ivy/general/scatter_nd.rst", "functional/ivy/general/set_min_base.rst", "functional/ivy/general/set_min_denominator.rst", "functional/ivy/general/set_queue_timeout.rst", "functional/ivy/general/set_tmp_dir.rst", "functional/ivy/general/shape.rst", "functional/ivy/general/shape_to_tuple.rst", "functional/ivy/general/stable_divide.rst", "functional/ivy/general/stable_pow.rst", "functional/ivy/general/supports_inplace.rst", "functional/ivy/general/tmp_dir.rst", "functional/ivy/general/to_list.rst", "functional/ivy/general/to_numpy.rst", "functional/ivy/general/to_scalar.rst", "functional/ivy/general/try_else_none.rst", "functional/ivy/general/unstack.rst", "functional/ivy/general/value_is_nan.rst", "functional/ivy/gradients.rst", "functional/ivy/gradients/GradientTracking:\n    \"\"\"\"\"\"\n\n    # noinspection PyShadowingNames\n    def __init__.rst", "functional/ivy/gradients/adam_step.rst", "functional/ivy/gradients/adam_step/adam_step_array.rst", "functional/ivy/gradients/adam_step/adam_step_container.rst", "functional/ivy/gradients/adam_step/adam_step_functional.rst", "functional/ivy/gradients/adam_step/static_adam_step_container.rst", "functional/ivy/gradients/adam_update.rst", "functional/ivy/gradients/adam_update/adam_update_container.rst", "functional/ivy/gradients/adam_update/adam_update_functional.rst", "functional/ivy/gradients/adam_update/static_adam_update_container.rst", "functional/ivy/gradients/execute_with_gradients.rst", "functional/ivy/gradients/gradient_descent_update.rst", "functional/ivy/gradients/gradient_descent_update/gradient_descent_update_container.rst", "functional/ivy/gradients/gradient_descent_update/gradient_descent_update_functional.rst", "functional/ivy/gradients/gradient_descent_update/static_gradient_descent_update_container.rst", "functional/ivy/gradients/is_variable.rst", "functional/ivy/gradients/is_variable/is_variable_container.rst", "functional/ivy/gradients/is_variable/is_variable_functional.rst", "functional/ivy/gradients/is_variable/static_is_variable_container.rst", "functional/ivy/gradients/lamb_update.rst", "functional/ivy/gradients/lamb_update/lamb_update_container.rst", "functional/ivy/gradients/lamb_update/lamb_update_functional.rst", "functional/ivy/gradients/lamb_update/static_lamb_update_container.rst", "functional/ivy/gradients/lars_update.rst", "functional/ivy/gradients/lars_update/lars_update_container.rst", "functional/ivy/gradients/lars_update/lars_update_functional.rst", "functional/ivy/gradients/lars_update/static_lars_update_container.rst", "functional/ivy/gradients/optimizer_update.rst", "functional/ivy/gradients/optimizer_update/optimizer_update_container.rst", "functional/ivy/gradients/optimizer_update/optimizer_update_functional.rst", "functional/ivy/gradients/optimizer_update/static_optimizer_update_container.rst", "functional/ivy/gradients/set_with_grads.rst", "functional/ivy/gradients/stop_gradient.rst", "functional/ivy/gradients/unset_with_grads.rst", "functional/ivy/gradients/variable.rst", "functional/ivy/gradients/variable_data.rst", "functional/ivy/gradients/with_grads.rst", "functional/ivy/layers.rst", "functional/ivy/layers/conv1d.rst", "functional/ivy/layers/conv1d_transpose.rst", "functional/ivy/layers/conv2d.rst", "functional/ivy/layers/conv2d_transpose.rst", "functional/ivy/layers/conv3d.rst", "functional/ivy/layers/conv3d_transpose.rst", "functional/ivy/layers/depthwise_conv2d.rst", "functional/ivy/layers/dropout.rst", "functional/ivy/layers/linear.rst", "functional/ivy/layers/lstm_update.rst", "functional/ivy/layers/multi_head_attention.rst", "functional/ivy/layers/scaled_dot_product_attention.rst", "functional/ivy/linear_algebra.rst", "functional/ivy/linear_algebra/cholesky.rst", "functional/ivy/linear_algebra/cholesky/cholesky_array.rst", "functional/ivy/linear_algebra/cholesky/cholesky_container.rst", "functional/ivy/linear_algebra/cholesky/cholesky_functional.rst", "functional/ivy/linear_algebra/cholesky/static_cholesky_container.rst", "functional/ivy/linear_algebra/cross.rst", "functional/ivy/linear_algebra/cross/cross_array.rst", "functional/ivy/linear_algebra/cross/cross_functional.rst", "functional/ivy/linear_algebra/det.rst", "functional/ivy/linear_algebra/det/det_array.rst", "functional/ivy/linear_algebra/det/det_functional.rst", "functional/ivy/linear_algebra/diagonal.rst", "functional/ivy/linear_algebra/diagonal/diagonal_array.rst", "functional/ivy/linear_algebra/diagonal/diagonal_functional.rst", "functional/ivy/linear_algebra/eigh.rst", "functional/ivy/linear_algebra/eigh/eigh_array.rst", "functional/ivy/linear_algebra/eigh/eigh_functional.rst", "functional/ivy/linear_algebra/eigvalsh.rst", "functional/ivy/linear_algebra/eigvalsh/eigvalsh_array.rst", "functional/ivy/linear_algebra/eigvalsh/eigvalsh_functional.rst", "functional/ivy/linear_algebra/inv.rst", "functional/ivy/linear_algebra/inv/inv_array.rst", "functional/ivy/linear_algebra/inv/inv_functional.rst", "functional/ivy/linear_algebra/matmul.rst", "functional/ivy/linear_algebra/matmul/matmul_array.rst", "functional/ivy/linear_algebra/matmul/matmul_container.rst", "functional/ivy/linear_algebra/matmul/matmul_functional.rst", "functional/ivy/linear_algebra/matrix_norm.rst", "functional/ivy/linear_algebra/matrix_norm/matrix_norm_array.rst", "functional/ivy/linear_algebra/matrix_norm/matrix_norm_functional.rst", "functional/ivy/linear_algebra/matrix_power.rst", "functional/ivy/linear_algebra/matrix_rank.rst", "functional/ivy/linear_algebra/matrix_rank/matrix_rank_array.rst", "functional/ivy/linear_algebra/matrix_rank/matrix_rank_functional.rst", "functional/ivy/linear_algebra/matrix_transpose.rst", "functional/ivy/linear_algebra/matrix_transpose/matrix_transpose_array.rst", "functional/ivy/linear_algebra/matrix_transpose/matrix_transpose_functional.rst", "functional/ivy/linear_algebra/outer.rst", "functional/ivy/linear_algebra/outer/outer_array.rst", "functional/ivy/linear_algebra/outer/outer_functional.rst", "functional/ivy/linear_algebra/pinv.rst", "functional/ivy/linear_algebra/pinv/pinv_array.rst", "functional/ivy/linear_algebra/pinv/pinv_functional.rst", "functional/ivy/linear_algebra/qr.rst", "functional/ivy/linear_algebra/qr/qr_array.rst", "functional/ivy/linear_algebra/qr/qr_functional.rst", "functional/ivy/linear_algebra/slogdet.rst", "functional/ivy/linear_algebra/solve.rst", "functional/ivy/linear_algebra/solve/solve_array.rst", "functional/ivy/linear_algebra/solve/solve_functional.rst", "functional/ivy/linear_algebra/svd.rst", "functional/ivy/linear_algebra/svd/svd_array.rst", "functional/ivy/linear_algebra/svd/svd_functional.rst", "functional/ivy/linear_algebra/svdvals.rst", "functional/ivy/linear_algebra/svdvals/svdvals_array.rst", "functional/ivy/linear_algebra/svdvals/svdvals_functional.rst", "functional/ivy/linear_algebra/tensordot.rst", "functional/ivy/linear_algebra/tensordot/tensordot_array.rst", "functional/ivy/linear_algebra/tensordot/tensordot_functional.rst", "functional/ivy/linear_algebra/trace.rst", "functional/ivy/linear_algebra/trace/trace_array.rst", "functional/ivy/linear_algebra/trace/trace_functional.rst", "functional/ivy/linear_algebra/vecdot.rst", "functional/ivy/linear_algebra/vecdot/vecdot_array.rst", "functional/ivy/linear_algebra/vecdot/vecdot_functional.rst", "functional/ivy/linear_algebra/vector_norm.rst", "functional/ivy/linear_algebra/vector_norm/vector_norm_array.rst", "functional/ivy/linear_algebra/vector_norm/vector_norm_functional.rst", "functional/ivy/linear_algebra/vector_to_skew_symmetric_matrix.rst", "functional/ivy/linear_algebra/vector_to_skew_symmetric_matrix/vector_to_skew_symmetric_matrix_array.rst", "functional/ivy/linear_algebra/vector_to_skew_symmetric_matrix/vector_to_skew_symmetric_matrix_functional.rst", "functional/ivy/losses.rst", "functional/ivy/losses/binary_cross_entropy.rst", "functional/ivy/losses/binary_cross_entropy/binary_cross_entropy_array.rst", "functional/ivy/losses/binary_cross_entropy/binary_cross_entropy_container.rst", "functional/ivy/losses/binary_cross_entropy/binary_cross_entropy_functional.rst", "functional/ivy/losses/binary_cross_entropy/static_binary_cross_entropy_container.rst", "functional/ivy/losses/cross_entropy.rst", "functional/ivy/losses/cross_entropy/cross_entropy_array.rst", "functional/ivy/losses/cross_entropy/cross_entropy_container.rst", "functional/ivy/losses/cross_entropy/cross_entropy_functional.rst", "functional/ivy/losses/cross_entropy/static_cross_entropy_container.rst", "functional/ivy/losses/sparse_cross_entropy.rst", "functional/ivy/losses/sparse_cross_entropy/sparse_cross_entropy_array.rst", "functional/ivy/losses/sparse_cross_entropy/sparse_cross_entropy_container.rst", "functional/ivy/losses/sparse_cross_entropy/sparse_cross_entropy_functional.rst", "functional/ivy/losses/sparse_cross_entropy/static_sparse_cross_entropy_container.rst", "functional/ivy/manipulation.rst", "functional/ivy/manipulation/clip.rst", "functional/ivy/manipulation/clip/clip_array.rst", "functional/ivy/manipulation/clip/clip_container.rst", "functional/ivy/manipulation/clip/clip_functional.rst", "functional/ivy/manipulation/clip/static_clip_container.rst", "functional/ivy/manipulation/concat.rst", "functional/ivy/manipulation/concat/concat_array.rst", "functional/ivy/manipulation/concat/concat_container.rst", "functional/ivy/manipulation/concat/concat_functional.rst", "functional/ivy/manipulation/constant_pad.rst", "functional/ivy/manipulation/constant_pad/constant_pad_array.rst", "functional/ivy/manipulation/constant_pad/constant_pad_container.rst", "functional/ivy/manipulation/constant_pad/constant_pad_functional.rst", "functional/ivy/manipulation/expand_dims.rst", "functional/ivy/manipulation/expand_dims/expand_dims_array.rst", "functional/ivy/manipulation/expand_dims/expand_dims_container.rst", "functional/ivy/manipulation/expand_dims/expand_dims_functional.rst", "functional/ivy/manipulation/flip.rst", "functional/ivy/manipulation/flip/flip_array.rst", "functional/ivy/manipulation/flip/flip_container.rst", "functional/ivy/manipulation/flip/flip_functional.rst", "functional/ivy/manipulation/permute_dims.rst", "functional/ivy/manipulation/permute_dims/permute_dims_array.rst", "functional/ivy/manipulation/permute_dims/permute_dims_container.rst", "functional/ivy/manipulation/permute_dims/permute_dims_functional.rst", "functional/ivy/manipulation/repeat.rst", "functional/ivy/manipulation/repeat/repeat_array.rst", "functional/ivy/manipulation/repeat/repeat_container.rst", "functional/ivy/manipulation/repeat/repeat_functional.rst", "functional/ivy/manipulation/reshape.rst", "functional/ivy/manipulation/reshape/reshape_array.rst", "functional/ivy/manipulation/reshape/reshape_container.rst", "functional/ivy/manipulation/reshape/reshape_functional.rst", "functional/ivy/manipulation/roll.rst", "functional/ivy/manipulation/roll/roll_array.rst", "functional/ivy/manipulation/roll/roll_container.rst", "functional/ivy/manipulation/roll/roll_functional.rst", "functional/ivy/manipulation/roll/static_roll_container.rst", "functional/ivy/manipulation/split.rst", "functional/ivy/manipulation/squeeze.rst", "functional/ivy/manipulation/squeeze/squeeze_array.rst", "functional/ivy/manipulation/squeeze/squeeze_container.rst", "functional/ivy/manipulation/squeeze/squeeze_functional.rst", "functional/ivy/manipulation/stack.rst", "functional/ivy/manipulation/stack/stack_array.rst", "functional/ivy/manipulation/stack/stack_container.rst", "functional/ivy/manipulation/stack/stack_functional.rst", "functional/ivy/manipulation/swapaxes.rst", "functional/ivy/manipulation/swapaxes/swapaxes_array.rst", "functional/ivy/manipulation/swapaxes/swapaxes_container.rst", "functional/ivy/manipulation/swapaxes/swapaxes_functional.rst", "functional/ivy/manipulation/tile.rst", "functional/ivy/manipulation/tile/tile_array.rst", "functional/ivy/manipulation/tile/tile_container.rst", "functional/ivy/manipulation/tile/tile_functional.rst", "functional/ivy/manipulation/zero_pad.rst", "functional/ivy/manipulation/zero_pad/zero_pad_array.rst", "functional/ivy/manipulation/zero_pad/zero_pad_container.rst", "functional/ivy/manipulation/zero_pad/zero_pad_functional.rst", "functional/ivy/meta.rst", "functional/ivy/meta/fomaml_step.rst", "functional/ivy/meta/maml_step.rst", "functional/ivy/meta/reptile_step.rst", "functional/ivy/nest.rst", "functional/ivy/nest/all_nested_indices.rst", "functional/ivy/nest/copy_nest.rst", "functional/ivy/nest/index_nest.rst", "functional/ivy/nest/insert_into_nest_at_index.rst", "functional/ivy/nest/insert_into_nest_at_indices.rst", "functional/ivy/nest/map.rst", "functional/ivy/nest/map_nest_at_index.rst", "functional/ivy/nest/map_nest_at_indices.rst", "functional/ivy/nest/multi_index_nest.rst", "functional/ivy/nest/nested_any.rst", "functional/ivy/nest/nested_indices_where.rst", "functional/ivy/nest/nested_map.rst", "functional/ivy/nest/nested_multi_map.rst", "functional/ivy/nest/prune_nest_at_index.rst", "functional/ivy/nest/prune_nest_at_indices.rst", "functional/ivy/nest/set_nest_at_index.rst", "functional/ivy/nest/set_nest_at_indices.rst", "functional/ivy/norms.rst", "functional/ivy/norms/layer_norm.rst", "functional/ivy/norms/layer_norm/layer_norm_array.rst", "functional/ivy/norms/layer_norm/layer_norm_container.rst", "functional/ivy/norms/layer_norm/layer_norm_functional.rst", "functional/ivy/random.rst", "functional/ivy/random/multinomial.rst", "functional/ivy/random/randint.rst", "functional/ivy/random/randint/randint_functional.rst", "functional/ivy/random/randint/static_randint_container.rst", "functional/ivy/random/random_normal.rst", "functional/ivy/random/random_uniform.rst", "functional/ivy/random/random_uniform/random_uniform_container.rst", "functional/ivy/random/random_uniform/random_uniform_functional.rst", "functional/ivy/random/random_uniform/static_random_uniform_container.rst", "functional/ivy/random/seed.rst", "functional/ivy/random/shuffle.rst", "functional/ivy/searching.rst", "functional/ivy/searching/argmax.rst", "functional/ivy/searching/argmin.rst", "functional/ivy/searching/nonzero.rst", "functional/ivy/searching/where.rst", "functional/ivy/set.rst", "functional/ivy/set/unique_all.rst", "functional/ivy/set/unique_counts.rst", "functional/ivy/set/unique_counts/static_unique_counts_container.rst", "functional/ivy/set/unique_counts/unique_counts_array.rst", "functional/ivy/set/unique_counts/unique_counts_container.rst", "functional/ivy/set/unique_counts/unique_counts_functional.rst", "functional/ivy/set/unique_inverse.rst", "functional/ivy/set/unique_values.rst", "functional/ivy/sorting.rst", "functional/ivy/sorting/argsort.rst", "functional/ivy/sorting/argsort/argsort_array.rst", "functional/ivy/sorting/argsort/argsort_container.rst", "functional/ivy/sorting/argsort/argsort_functional.rst", "functional/ivy/sorting/argsort/static_argsort_container.rst", "functional/ivy/sorting/sort.rst", "functional/ivy/sorting/sort/sort_array.rst", "functional/ivy/sorting/sort/sort_container.rst", "functional/ivy/sorting/sort/sort_functional.rst", "functional/ivy/sorting/sort/static_sort_container.rst", "functional/ivy/statistical.rst", "functional/ivy/statistical/einsum.rst", "functional/ivy/statistical/einsum/einsum_array.rst", "functional/ivy/statistical/einsum/einsum_container.rst", "functional/ivy/statistical/einsum/einsum_functional.rst", "functional/ivy/statistical/max.rst", "functional/ivy/statistical/max/max_array.rst", "functional/ivy/statistical/max/max_container.rst", "functional/ivy/statistical/max/max_functional.rst", "functional/ivy/statistical/mean.rst", "functional/ivy/statistical/mean/mean_array.rst", "functional/ivy/statistical/mean/mean_container.rst", "functional/ivy/statistical/mean/mean_functional.rst", "functional/ivy/statistical/min.rst", "functional/ivy/statistical/min/min_array.rst", "functional/ivy/statistical/min/min_container.rst", "functional/ivy/statistical/min/min_functional.rst", "functional/ivy/statistical/prod.rst", "functional/ivy/statistical/prod/prod_array.rst", "functional/ivy/statistical/prod/prod_container.rst", "functional/ivy/statistical/prod/prod_functional.rst", "functional/ivy/statistical/std.rst", "functional/ivy/statistical/std/std_array.rst", "functional/ivy/statistical/std/std_container.rst", "functional/ivy/statistical/std/std_functional.rst", "functional/ivy/statistical/sum.rst", "functional/ivy/statistical/sum/sum_array.rst", "functional/ivy/statistical/sum/sum_container.rst", "functional/ivy/statistical/sum/sum_functional.rst", "functional/ivy/statistical/var.rst", "functional/ivy/statistical/var/var_array.rst", "functional/ivy/statistical/var/var_container.rst", "functional/ivy/statistical/var/var_functional.rst", "functional/ivy/utility.rst", "functional/ivy/utility/all.rst", "functional/ivy/utility/all/all_array.rst", "functional/ivy/utility/all/all_container.rst", "functional/ivy/utility/all/all_functional.rst", "functional/ivy/utility/all/static_all_container.rst", "functional/ivy/utility/any.rst", "functional/ivy/utility/any/any_array.rst", "functional/ivy/utility/any/any_container.rst", "functional/ivy/utility/any/any_functional.rst", "functional/ivy/utility/any/static_any_container.rst", "index.rst", "index_append.rst", "index_prepend.rst", "inspection.rst", "inspection/add_array_specs.rst", "inspection/fn_array_spec.rst", "roadmap.rst", "supported_frameworks.rst", "verbosity.rst", "verbosity/cprint.rst"], "titles": ["Backend handler", "&lt;no title&gt;", "choose_random_backend", "clear_backend_stack", "current_backend", "get_backend", "set_backend", "try_import_ivy_jax", "try_import_ivy_mxnet", "try_import_ivy_numpy", "try_import_ivy_tf", "try_import_ivy_torch", "unset_backend", "Background", "ML Explosion", "Standardization", "Why Unify?", "Data classes", "Array", "Activations", "ArrayWithActivations", "Conversions", "args_to_ivy", "args_to_native", "to_ivy", "to_native", "Creation", "ArrayWithCreation", "Data type", "ArrayWithDataTypes", "Device", "ArrayWithDevice", "Elementwise", "ArrayWithElementwise", "General", "ArrayWithGeneral", "Gradients", "ArrayWithGradients", "Image", "ArrayWithImage", "Layers", "ArrayWithLayers", "Linear algebra", "ArrayWithLinearAlgebra", "Losses", "ArrayWithLosses", "Manipulation", "ArrayWithManipulation", "Norms", "ArrayWithNorms", "Random", "ArrayWithRandom", "Searching", "ArrayWithSearching", "Set", "ArrayWithSet", "Sorting", "ArrayWithSorting", "Statistical", "ArrayWithStatistical", "Utility", "ArrayWithUtility", "Wrapping", "add_ivy_array_instance_methods", "Container", "Activations", "ContainerWithActivations", "Base", "ContainerBase", "Container", "Container", "MultiDevContainer", "Creation", "ContainerWithCreation", "Data type", "ContainerWithDataTypes", "Device", "ContainerWithDevice", "Elementwise", "ContainerWithElementwise", "General", "ContainerWithGeneral", "Gradients", "ContainerWithGradients", "Image", "ContainerWithImage", "Layers", "ContainerWithLayers", "Linear algebra", "ContainerWithLinearAlgebra", "Losses", "ContainerWithLosses", "Manipulation", "ContainerWithManipulation", "Norms", "ContainerWithNorms", "Random", "ContainerWithRandom", "Searching", "ContainerWithSearching", "Set", "ContainerWithSet", "Sorting", "ContainerWithSorting", "Statistical", "ContainerWithStatistical", "Utility", "ContainerWithUtility", "Wrapping", "add_ivy_container_instance_methods", "Framework classes", "Activations", "GEGLU", "GELU", "Converters", "to_ivy_module", "Initializers", "&lt;no title&gt;", "FirstLayerSiren", "GlorotUniform", "&lt;no title&gt;", "Ones", "Siren", "&lt;no title&gt;", "Zeros", "Layers", "Conv1D", "Conv1DTranspose", "Conv2D", "Conv2DTranspose", "Conv3D", "Conv3DTranspose", "DepthwiseConv2D", "Dropout", "LSTM", "Linear", "MultiHeadAttention", "Module", "Module", "Norms", "LayerNorm", "Optimizers", "Adam", "LAMB", "LARS", "Optimizer", "SGD", "Sequential", "Sequential", "Contributing", "Setting Up", "The Basics", "Open Tasks", "Building the Docs", "Deep Dive", "Navigating the Code", "Docstrings", "Docstring Examples", "Array API Tests", "Ivy Tests", "Function Types", "Backend Setting", "Function Wrapping", "Arrays", "Containers", "Data Types", "Devices", "Inplace Updates", "Function Arguments", "Design", "Building Blocks", "Ivy as a Framework", "Ivy Array", "Ivy Container", "Ivy Stateful API", "Ivy as a Transpiler", "Ivy", "Ivy builder", "Ivy ecosystem", "Ivy gym", "Ivy mech", "Ivy memory", "Ivy models", "Ivy robot", "Ivy vision", "Extensions", "Applied Libraries", "FAQ", "Func wrapper", "handle_nestable", "handle_out_argument", "infer_device", "infer_dtype", "inputs_to_ivy_arrays", "inputs_to_native_arrays", "outputs_to_ivy_arrays", "to_native_arrays_and_back", "&lt;no title&gt;", "Activations", "gelu", "leaky_relu", "relu", "sigmoid", "softmax", "softplus", "ivy.Array.softplus", "ivy.Container.softplus", "ivy.softplus", "ivy.Container.static_softplus", "tanh", "Compilation", "compile", "Constants", "Creation", "arange", "ivy.arange", "ivy.Container.static_arange", "asarray", "ivy.Array.asarray", "ivy.Container.asarray", "ivy.asarray", "ivy.Container.static_asarray", "empty", "empty_like", "ivy.Array.empty_like", "ivy.Container.empty_like", "ivy.empty_like", "ivy.Container.static_empty_like", "eye", "ivy.eye", "ivy.Container.static_eye", "from_dlpack", "ivy.Array.from_dlpack", "ivy.Container.from_dlpack", "ivy.from_dlpack", "ivy.Container.static_from_dlpack", "full", "full_like", "ivy.Array.full_like", "ivy.Container.full_like", "ivy.full_like", "ivy.Container.static_full_like", "linspace", "ivy.linspace", "ivy.Container.static_linspace", "logspace", "ivy.logspace", "ivy.Container.static_logspace", "meshgrid", "ivy.Array.meshgrid", "ivy.Container.meshgrid", "ivy.meshgrid", "ivy.Container.static_meshgrid", "native_array", "ivy.Array.native_array", "ivy.Container.native_array", "ivy.native_array", "ivy.Container.static_native_array", "ones", "ivy.ones", "ivy.Container.static_ones", "ones_like", "ivy.Array.ones_like", "ivy.Container.ones_like", "ivy.ones_like", "ivy.Container.static_ones_like", "tril", "ivy.Container.static_tril", "ivy.Array.tril", "ivy.Container.tril", "ivy.tril", "triu", "ivy.Container.static_triu", "ivy.Array.triu", "ivy.Container.triu", "ivy.triu", "zeros", "ivy.Container.static_zeros", "ivy.zeros", "zeros_like", "ivy.Container.static_zeros_like", "ivy.Array.zeros_like", "ivy.Container.zeros_like", "ivy.zeros_like", "Data type", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "as_ivy_dtype", "as_native_dtype", "astype", "broadcast_arrays", "broadcast_to", "can_cast", "ivy.Array.can_cast", "ivy.Container.can_cast", "ivy.can_cast", "ivy.Container.static_can_cast", "closest_valid_dtype", "default_dtype", "default_float_dtype", "default_int_dtype", "dtype", "dtype_bits", "finfo", "function_supported_dtypes", "function_unsupported_dtypes", "iinfo", "invalid_dtype", "is_float_dtype", "is_int_dtype", "promote_types", "result_type", "set_default_dtype", "set_default_float_dtype", "set_default_int_dtype", "type_promote_arrays", "unset_default_dtype", "unset_default_float_dtype", "unset_default_int_dtype", "valid_dtype", "Device", "&lt;no title&gt;", "DevClonedItem", "DevClonedIter", "DevClonedNest", "DevDistItem", "DevDistIter", "DevDistNest", "&lt;no title&gt;", "DevMapper", "DevMapperMultiProc", "&lt;no title&gt;", "MultiDevItem", "MultiDevIter", "MultiDevNest", "Profiler", "as_ivy_dev", "as_native_dev", "clear_mem_on_dev", "default_device", "dev", "dev_clone", "dev_clone_array", "dev_clone_iter", "dev_clone_nest", "dev_dist", "dev_dist_array", "dev_dist_iter", "dev_dist_nest", "dev_unify", "dev_unify_array", "dev_unify_iter", "dev_unify_nest", "dev_util", "get_all_ivy_arrays_on_dev", "gpu_is_available", "num_cpu_cores", "num_gpus", "num_ivy_arrays_on_dev", "percent_used_mem_on_dev", "print_all_ivy_arrays_on_dev", "set_default_device", "set_split_factor", "split_factor", "split_func_call", "to_device", "total_mem_on_dev", "tpu_is_available", "unset_default_device", "used_mem_on_dev", "Elementwise", "abs", "ivy.Array.abs", "ivy.Container.abs", "ivy.abs", "ivy.Container.static_abs", "acos", "ivy.Array.acos", "ivy.Container.acos", "ivy.acos", "acosh", "ivy.Array.acosh", "ivy.Container.acosh", "ivy.acosh", "add", "ivy.Array.add", "ivy.Container.add", "ivy.add", "ivy.Container.static_add", "asin", "ivy.Array.asin", "ivy.Container.asin", "ivy.asin", "asinh", "ivy.Array.asinh", "ivy.Container.asinh", "ivy.asinh", "atan", "ivy.Array.atan", "ivy.Container.atan", "ivy.atan", "atan2", "ivy.Array.atan2", "ivy.Container.atan2", "ivy.atan2", "atanh", "ivy.Array.atanh", "ivy.Container.atanh", "ivy.atanh", "bitwise_and", "ivy.Array.bitwise_and", "ivy.Container.bitwise_and", "ivy.bitwise_and", "bitwise_invert", "ivy.Array.bitwise_invert", "ivy.Container.bitwise_invert", "ivy.bitwise_invert", "bitwise_left_shift", "ivy.Array.bitwise_left_shift", "ivy.Container.bitwise_left_shift", "ivy.bitwise_left_shift", "bitwise_or", "ivy.Array.bitwise_or", "ivy.Container.bitwise_or", "ivy.bitwise_or", "bitwise_right_shift", "ivy.Array.bitwise_right_shift", "ivy.Container.bitwise_right_shift", "ivy.bitwise_right_shift", "bitwise_xor", "ivy.Array.bitwise_xor", "ivy.Container.bitwise_xor", "ivy.bitwise_xor", "ceil", "ivy.Array.ceil", "ivy.Container.ceil", "ivy.ceil", "cos", "ivy.Array.cos", "ivy.Container.cos", "ivy.cos", "cosh", "ivy.Array.cosh", "ivy.Container.cosh", "ivy.cosh", "divide", "ivy.Array.divide", "ivy.Container.divide", "ivy.divide", "ivy.Container.static_divide", "equal", "ivy.Array.equal", "ivy.Container.equal", "ivy.equal", "erf", "ivy.Array.erf", "ivy.Container.erf", "ivy.erf", "exp", "ivy.Array.exp", "ivy.Container.exp", "ivy.exp", "expm1", "ivy.Array.expm1", "ivy.Container.expm1", "ivy.expm1", "floor", "ivy.Array.floor", "ivy.Container.floor", "ivy.floor", "floor_divide", "ivy.Array.floor_divide", "ivy.Container.floor_divide", "ivy.floor_divide", "greater", "ivy.Array.greater", "ivy.Container.greater", "ivy.greater", "greater_equal", "ivy.Array.greater_equal", "ivy.Container.greater_equal", "ivy.greater_equal", "isfinite", "ivy.Array.isfinite", "ivy.Container.isfinite", "ivy.isfinite", "isinf", "ivy.Array.isinf", "ivy.Container.isinf", "ivy.isinf", "isnan", "ivy.Array.isnan", "ivy.Container.isnan", "ivy.isnan", "less", "ivy.Array.less", "ivy.Container.less", "ivy.less", "less_equal", "ivy.Array.less_equal", "ivy.Container.less_equal", "ivy.less_equal", "log", "ivy.Array.log", "ivy.Container.log", "ivy.log", "log10", "ivy.Array.log10", "ivy.Container.log10", "ivy.log10", "log1p", "ivy.Array.log1p", "ivy.Container.log1p", "ivy.log1p", "log2", "ivy.Array.log2", "ivy.Container.log2", "ivy.log2", "logaddexp", "ivy.Array.logaddexp", "ivy.Container.logaddexp", "ivy.logaddexp", "logical_and", "ivy.Array.logical_and", "ivy.Container.logical_and", "ivy.logical_and", "logical_not", "ivy.Array.logical_not", "ivy.Container.logical_not", "ivy.logical_not", "logical_or", "ivy.Array.logical_or", "ivy.Container.logical_or", "ivy.logical_or", "logical_xor", "ivy.Array.logical_xor", "ivy.Container.logical_xor", "ivy.logical_xor", "maximum", "minimum", "multiply", "ivy.Array.multiply", "ivy.Container.multiply", "ivy.multiply", "ivy.Container.static_multiply", "negative", "ivy.Array.negative", "ivy.Container.negative", "ivy.negative", "not_equal", "ivy.Array.not_equal", "ivy.Container.not_equal", "ivy.not_equal", "positive", "ivy.Array.positive", "ivy.Container.positive", "ivy.positive", "pow", "ivy.Array.pow", "ivy.Container.pow", "ivy.pow", "remainder", "ivy.Array.remainder", "ivy.Container.remainder", "ivy.remainder", "round", "ivy.Array.round", "ivy.Container.round", "ivy.round", "sign", "ivy.Array.sign", "ivy.Container.sign", "ivy.sign", "sin", "ivy.Array.sin", "ivy.Container.sin", "ivy.sin", "sinh", "ivy.Array.sinh", "ivy.Container.sinh", "ivy.sinh", "sqrt", "ivy.Array.sqrt", "ivy.Container.sqrt", "ivy.sqrt", "square", "ivy.Array.square", "ivy.Container.square", "ivy.square", "subtract", "ivy.Container.static_subtract", "ivy.Array.subtract", "ivy.Container.subtract", "ivy.subtract", "tan", "ivy.Container.static_tan", "ivy.Array.tan", "ivy.Container.tan", "ivy.tan", "tanh", "ivy.Container.static_tanh", "ivy.Array.tanh", "ivy.Container.tanh", "ivy.tanh", "trunc", "ivy.Array.trunc", "ivy.Container.trunc", "ivy.trunc", "General", "all_equal", "ivy.Array.all_equal", "ivy.Container.all_equal", "ivy.all_equal", "ivy.Container.static_all_equal", "arg_info", "arg_names", "array_equal", "arrays_equal", "assert_supports_inplace", "cache_fn", "clip_matrix_norm", "clip_vector_norm", "ivy.Container.clip_vector_norm", "ivy.clip_vector_norm", "container_types", "copy_array", "cumprod", "cumsum", "current_backend_str", "default", "einops_rearrange", "einops_reduce", "einops_repeat", "exists", "floormod", "fourier_encode", "gather", "gather_nd", "ivy.Array.gather_nd", "ivy.Container.gather_nd", "ivy.gather_nd", "ivy.Container.static_gather_nd", "get_all_arrays_in_memory", "get_min_base", "get_min_denominator", "get_num_dims", "get_referrers_recursive", "has_nans", "indices_where", "inplace_arrays_supported", "inplace_decrement", "inplace_increment", "inplace_update", "inplace_variables_supported", "is_array", "is_ivy_array", "is_ivy_container", "is_native_array", "match_kwargs", "multiprocessing", "num_arrays_in_memory", "one_hot", "print_all_arrays_in_memory", "queue_timeout", "scatter_flat", "scatter_nd", "set_min_base", "set_min_denominator", "set_queue_timeout", "set_tmp_dir", "shape", "shape_to_tuple", "stable_divide", "stable_pow", "supports_inplace", "tmp_dir", "to_list", "to_numpy", "to_scalar", "try_else_none", "unstack", "value_is_nan", "Gradients", "&lt;no title&gt;", "adam_step", "ivy.Array.adam_step", "ivy.Container.adam_step", "ivy.adam_step", "ivy.Container.static_adam_step", "adam_update", "ivy.Container.adam_update", "ivy.adam_update", "ivy.Container.static_adam_update", "execute_with_gradients", "gradient_descent_update", "ivy.Container.gradient_descent_update", "ivy.gradient_descent_update", "ivy.Container.static_gradient_descent_update", "is_variable", "ivy.Container.is_variable", "ivy.is_variable", "ivy.Container.static_is_variable", "lamb_update", "ivy.Container.lamb_update", "ivy.lamb_update", "ivy.Container.static_lamb_update", "lars_update", "ivy.Container.lars_update", "ivy.lars_update", "ivy.Container.static_lars_update", "optimizer_update", "ivy.Container.optimizer_update", "ivy.optimizer_update", "ivy.Container.static_optimizer_update", "set_with_grads", "stop_gradient", "unset_with_grads", "variable", "variable_data", "with_grads", "Layers", "conv1d", "conv1d_transpose", "conv2d", "conv2d_transpose", "conv3d", "conv3d_transpose", "depthwise_conv2d", "dropout", "linear", "lstm_update", "multi_head_attention", "scaled_dot_product_attention", "Linear algebra", "cholesky", "ivy.Array.cholesky", "ivy.Container.cholesky", "ivy.cholesky", "ivy.Container.static_cholesky", "cross", "ivy.Array.cross", "ivy.cross", "det", "ivy.Array.det", "ivy.det", "diagonal", "ivy.Array.diagonal", "ivy.diagonal", "eigh", "ivy.Array.eigh", "ivy.eigh", "eigvalsh", "ivy.Array.eigvalsh", "ivy.eigvalsh", "inv", "ivy.Array.inv", "ivy.inv", "matmul", "ivy.Array.matmul", "ivy.Container.matmul", "ivy.matmul", "matrix_norm", "ivy.Array.matrix_norm", "ivy.matrix_norm", "matrix_power", "matrix_rank", "ivy.Array.matrix_rank", "ivy.matrix_rank", "matrix_transpose", "ivy.Array.matrix_transpose", "ivy.matrix_transpose", "outer", "ivy.Array.outer", "ivy.outer", "pinv", "ivy.Array.pinv", "ivy.pinv", "qr", "ivy.Array.qr", "ivy.qr", "slogdet", "solve", "ivy.Array.solve", "ivy.solve", "svd", "ivy.Array.svd", "ivy.svd", "svdvals", "ivy.Array.svdvals", "ivy.svdvals", "tensordot", "ivy.Array.tensordot", "ivy.tensordot", "trace", "ivy.Array.trace", "ivy.trace", "vecdot", "ivy.Array.vecdot", "ivy.vecdot", "vector_norm", "ivy.Array.vector_norm", "ivy.vector_norm", "vector_to_skew_symmetric_matrix", "ivy.Array.vector_to_skew_symmetric_matrix", "ivy.vector_to_skew_symmetric_matrix", "Losses", "binary_cross_entropy", "ivy.Array.binary_cross_entropy", "ivy.Container.binary_cross_entropy", "ivy.binary_cross_entropy", "ivy.Container.static_binary_cross_entropy", "cross_entropy", "ivy.Array.cross_entropy", "ivy.Container.cross_entropy", "ivy.cross_entropy", "ivy.Container.static_cross_entropy", "sparse_cross_entropy", "ivy.Array.sparse_cross_entropy", "ivy.Container.sparse_cross_entropy", "ivy.sparse_cross_entropy", "ivy.Container.static_sparse_cross_entropy", "Manipulation", "clip", "ivy.Array.clip", "ivy.Container.clip", "ivy.clip", "ivy.Container.static_clip", "concat", "ivy.Array.concat", "ivy.Container.concat", "ivy.concat", "constant_pad", "ivy.Array.constant_pad", "ivy.Container.constant_pad", "ivy.constant_pad", "expand_dims", "ivy.Array.expand_dims", "ivy.Container.expand_dims", "ivy.expand_dims", "flip", "ivy.Array.flip", "ivy.Container.flip", "ivy.flip", "permute_dims", "ivy.Array.permute_dims", "ivy.Container.permute_dims", "ivy.permute_dims", "repeat", "ivy.Array.repeat", "ivy.Container.repeat", "ivy.repeat", "reshape", "ivy.Array.reshape", "ivy.Container.reshape", "ivy.reshape", "roll", "ivy.Array.roll", "ivy.Container.roll", "ivy.roll", "ivy.Container.static_roll", "split", "squeeze", "ivy.Array.squeeze", "ivy.Container.squeeze", "ivy.squeeze", "stack", "ivy.Array.stack", "ivy.Container.stack", "ivy.stack", "swapaxes", "ivy.Array.swapaxes", "ivy.Container.swapaxes", "ivy.swapaxes", "tile", "ivy.Array.tile", "ivy.Container.tile", "ivy.tile", "zero_pad", "ivy.Array.zero_pad", "ivy.Container.zero_pad", "ivy.zero_pad", "Meta", "fomaml_step", "maml_step", "reptile_step", "Nest", "all_nested_indices", "copy_nest", "index_nest", "insert_into_nest_at_index", "insert_into_nest_at_indices", "map", "map_nest_at_index", "map_nest_at_indices", "multi_index_nest", "nested_any", "nested_indices_where", "nested_map", "nested_multi_map", "prune_nest_at_index", "prune_nest_at_indices", "set_nest_at_index", "set_nest_at_indices", "Norms", "layer_norm", "ivy.Array.layer_norm", "ivy.Container.layer_norm", "ivy.layer_norm", "Random", "multinomial", "randint", "ivy.randint", "ivy.Container.static_randint", "random_normal", "random_uniform", "ivy.Container.random_uniform", "ivy.random_uniform", "ivy.Container.static_random_uniform", "seed", "shuffle", "Searching", "argmax", "argmin", "nonzero", "where", "Set", "unique_all", "unique_counts", "ivy.Container.static_unique_counts", "ivy.Array.unique_counts", "ivy.Container.unique_counts", "ivy.unique_counts", "unique_inverse", "unique_values", "Sorting", "argsort", "ivy.Array.argsort", "ivy.Container.argsort", "ivy.argsort", "ivy.Container.static_argsort", "sort", "ivy.Array.sort", "ivy.Container.sort", "ivy.sort", "ivy.Container.static_sort", "Statistical", "einsum", "ivy.Array.einsum", "ivy.Container.einsum", "ivy.einsum", "max", "ivy.Array.max", "ivy.Container.max", "ivy.max", "mean", "ivy.Array.mean", "ivy.Container.mean", "ivy.mean", "min", "ivy.Array.min", "ivy.Container.min", "ivy.min", "prod", "ivy.Array.prod", "ivy.Container.prod", "ivy.prod", "std", "ivy.Array.std", "ivy.Container.std", "ivy.std", "sum", "ivy.Array.sum", "ivy.Container.sum", "ivy.sum", "var", "ivy.Array.var", "ivy.Container.var", "ivy.var", "Utility", "all", "ivy.Array.all", "ivy.Container.all", "ivy.all", "ivy.Container.static_all", "any", "ivy.Array.any", "ivy.Container.any", "ivy.any", "ivy.Container.static_any", "Contents", "&lt;no title&gt;", "&lt;no title&gt;", "Inspection", "add_array_specs", "fn_array_spec", "Roadmap", "&lt;no title&gt;", "Verbosity", "cprint"], "terms": {"class": [0, 6, 12, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, 116, 118, 119, 121, 122, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 152, 153, 156, 157, 159, 163, 164, 165, 166, 168, 170, 171, 173, 174, 175, 185, 186, 187, 284, 307, 321, 323, 324, 325, 326, 327, 328, 330, 331, 333, 334, 335, 336, 609, 616, 653, 659, 678, 683, 685, 687, 689, 719, 886, 888, 898, 921, 924, 990], "ivi": [0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 15, 16, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, 116, 118, 119, 121, 122, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 151, 152, 153, 154, 156, 158, 160, 161, 162, 164, 165, 166, 167, 168, 169, 185, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 198, 199, 200, 201, 202, 203, 204, 209, 210, 211, 212, 213, 214, 217, 222, 223, 228, 231, 236, 237, 242, 245, 248, 253, 258, 261, 266, 271, 276, 279, 284, 288, 289, 290, 291, 292, 293, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 323, 324, 325, 326, 327, 328, 330, 331, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 377, 381, 385, 390, 394, 398, 402, 406, 410, 414, 418, 422, 426, 430, 434, 438, 442, 446, 451, 455, 459, 463, 467, 471, 475, 479, 483, 487, 491, 495, 499, 503, 507, 511, 515, 519, 523, 527, 531, 535, 539, 540, 541, 546, 550, 554, 558, 562, 566, 570, 574, 578, 582, 586, 590, 595, 600, 605, 609, 610, 615, 616, 617, 618, 619, 620, 621, 622, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 685, 690, 694, 695, 699, 703, 707, 711, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 740, 743, 746, 749, 752, 755, 758, 762, 765, 766, 769, 772, 775, 778, 781, 782, 785, 788, 791, 794, 797, 800, 803, 806, 807, 812, 817, 822, 823, 828, 832, 836, 840, 844, 848, 852, 856, 861, 862, 866, 870, 874, 878, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 909, 910, 911, 914, 915, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 933, 934, 935, 936, 941, 946, 947, 951, 955, 959, 963, 967, 971, 975, 979, 980, 985, 990, 993, 994, 995, 996, 998, 999], "backend_handl": [0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 990], "contextmanag": [0, 1], "modul": [0, 4, 5, 16, 62, 63, 67, 68, 69, 70, 71, 108, 109, 111, 112, 113, 114, 115, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 139, 140, 147, 148, 150, 153, 159, 160, 161, 163, 167, 170, 171, 173, 175, 186, 187, 609, 660, 909, 910, 914, 990], "sourc": [0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 14, 15, 16, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, 116, 118, 119, 121, 122, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 153, 163, 164, 188, 189, 190, 191, 192, 193, 194, 195, 196, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 323, 324, 325, 326, 327, 328, 330, 331, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 993, 994, 995, 998, 999], "base": [0, 19, 20, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 65, 66, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 111, 112, 113, 116, 118, 119, 121, 122, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 151, 159, 162, 164, 170, 186, 213, 245, 246, 247, 284, 321, 323, 324, 325, 326, 327, 328, 330, 331, 333, 334, 335, 336, 371, 459, 462, 503, 506, 507, 510, 511, 514, 515, 518, 558, 561, 609, 644, 667, 674, 683, 926, 927, 928, 932, 934, 946, 947, 950], "object": [0, 18, 64, 67, 68, 69, 70, 71, 116, 125, 126, 127, 128, 129, 130, 131, 132, 134, 135, 137, 138, 172, 175, 213, 231, 234, 284, 304, 321, 366, 683, 886, 889, 891, 893, 894, 895, 900, 901, 902, 903, 909, 920], "__init__": [0, 1, 4, 5, 67, 68, 69, 70, 71, 111, 112, 113, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 155, 161, 165, 170, 172, 173, 174, 175, 284, 285, 286, 287, 321, 322, 329, 330, 331, 332, 333, 334, 335, 336, 683, 684, 909, 910, 914, 990], "choose_random_backend": 0, "exclud": [0, 2, 157, 170, 213, 214, 215, 909, 915, 917], "none": [0, 2, 5, 12, 19, 20, 21, 22, 23, 24, 25, 26, 27, 32, 33, 34, 35, 42, 43, 44, 45, 46, 47, 48, 49, 56, 57, 58, 59, 60, 61, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 114, 115, 116, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 155, 157, 160, 164, 165, 166, 167, 168, 170, 172, 174, 175, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 250, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 290, 292, 293, 295, 297, 299, 300, 301, 304, 307, 321, 330, 331, 339, 340, 363, 364, 365, 366, 369, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 612, 614, 615, 621, 622, 623, 624, 626, 627, 628, 630, 631, 632, 633, 634, 635, 637, 638, 639, 640, 641, 642, 647, 649, 650, 654, 660, 662, 665, 666, 667, 668, 673, 674, 680, 683, 690, 691, 692, 693, 695, 696, 697, 698, 699, 700, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 716, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 781, 782, 783, 784, 785, 786, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 892, 897, 898, 899, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 925, 926, 928, 929, 931, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989], "clear_backend_stack": 0, "current_backend": [0, 69, 70, 155, 160], "arg": [0, 4, 18, 21, 22, 23, 64, 67, 68, 114, 115, 137, 138, 153, 170, 172, 174, 321, 330, 345, 349, 353, 365, 609, 666], "kwarg": [0, 4, 18, 21, 22, 23, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 114, 115, 137, 138, 170, 172, 174, 321, 330, 345, 349, 353, 609, 659], "return": [0, 4, 5, 12, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 32, 33, 34, 35, 36, 37, 42, 43, 44, 45, 46, 47, 48, 49, 54, 55, 56, 57, 58, 59, 60, 61, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 78, 79, 80, 81, 82, 83, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 100, 101, 102, 103, 104, 105, 106, 107, 114, 115, 125, 134, 135, 141, 145, 155, 156, 157, 159, 160, 162, 163, 164, 165, 166, 167, 168, 170, 172, 173, 174, 175, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 316, 320, 321, 330, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 612, 613, 614, 615, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 644, 645, 646, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 665, 666, 667, 668, 671, 672, 673, 674, 675, 677, 678, 679, 680, 681, 682, 683, 685, 686, 687, 688, 689, 690, 692, 693, 694, 695, 697, 698, 699, 700, 701, 702, 703, 705, 706, 707, 709, 710, 711, 712, 713, 714, 716, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 892, 896, 897, 898, 899, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 993, 995], "current": [0, 4, 5, 12, 16, 67, 68, 69, 70, 71, 150, 151, 152, 153, 160, 166, 170, 175, 186, 187, 284, 305, 306, 308, 320, 321, 330, 354, 355, 359, 361, 609, 643, 650, 654, 661, 663, 886, 887, 896, 897, 990], "prioriti": [0, 4, 67, 68, 151, 167], "global_backend": [0, 4], "argument": [0, 4, 5, 14, 21, 22, 23, 24, 25, 64, 67, 68, 69, 70, 71, 114, 115, 137, 138, 152, 154, 155, 156, 157, 159, 160, 161, 163, 164, 170, 172, 173, 210, 211, 213, 214, 215, 217, 220, 222, 223, 226, 228, 229, 231, 234, 236, 237, 240, 242, 243, 245, 246, 248, 251, 258, 259, 261, 264, 266, 270, 271, 275, 276, 278, 279, 283, 284, 293, 296, 312, 321, 330, 331, 345, 349, 353, 371, 372, 375, 385, 388, 390, 393, 434, 437, 467, 470, 550, 553, 582, 585, 586, 589, 595, 599, 609, 615, 616, 620, 630, 637, 659, 666, 721, 724, 733, 734, 735, 738, 746, 748, 822, 856, 859, 886, 892, 904, 905, 908, 926, 928, 932, 946, 951, 954, 971, 974, 979, 980, 983, 993, 995], "s": [0, 4, 5, 6, 12, 15, 16, 21, 24, 25, 64, 67, 68, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 145, 147, 148, 149, 150, 151, 153, 154, 156, 157, 159, 161, 163, 164, 165, 166, 167, 168, 170, 172, 173, 174, 175, 186, 187, 212, 213, 248, 251, 266, 270, 271, 275, 284, 305, 306, 321, 340, 364, 371, 562, 565, 609, 618, 683, 690, 692, 695, 697, 703, 705, 711, 713, 734, 785, 787, 788, 790, 886, 892, 898, 946, 967, 970, 975, 978, 990], "paramet": [0, 4, 5, 21, 22, 23, 24, 25, 62, 63, 67, 68, 69, 70, 71, 108, 109, 114, 115, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 155, 156, 159, 172, 173, 186, 198, 199, 200, 201, 202, 203, 204, 207, 209, 210, 211, 213, 214, 215, 217, 220, 222, 223, 226, 228, 229, 231, 234, 236, 237, 240, 242, 243, 245, 246, 248, 251, 253, 256, 258, 259, 261, 264, 266, 270, 271, 275, 276, 278, 279, 283, 284, 288, 289, 290, 291, 292, 293, 296, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 320, 321, 330, 331, 334, 335, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 359, 360, 361, 362, 363, 364, 365, 366, 367, 370, 371, 372, 375, 377, 380, 381, 384, 385, 388, 390, 393, 394, 397, 398, 401, 402, 405, 406, 409, 410, 413, 414, 417, 418, 421, 422, 425, 426, 429, 430, 433, 434, 437, 438, 441, 442, 445, 446, 449, 451, 454, 455, 458, 459, 462, 463, 466, 467, 470, 471, 474, 475, 478, 479, 482, 483, 486, 487, 490, 491, 494, 495, 498, 499, 502, 503, 506, 507, 510, 511, 514, 515, 518, 519, 522, 523, 526, 527, 530, 531, 534, 535, 538, 539, 540, 541, 544, 546, 549, 550, 553, 554, 557, 558, 561, 562, 565, 566, 569, 570, 573, 574, 577, 578, 581, 582, 585, 586, 589, 590, 594, 595, 599, 600, 604, 605, 608, 609, 610, 613, 615, 616, 617, 618, 619, 620, 621, 622, 624, 627, 628, 630, 631, 632, 633, 634, 635, 636, 637, 638, 641, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 662, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 677, 678, 679, 680, 681, 682, 683, 685, 688, 690, 692, 694, 695, 697, 699, 701, 703, 705, 707, 709, 711, 713, 715, 716, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 738, 740, 742, 743, 745, 746, 748, 749, 751, 752, 754, 755, 757, 758, 761, 762, 764, 766, 768, 769, 771, 772, 774, 775, 777, 778, 780, 781, 782, 784, 785, 787, 788, 790, 791, 793, 794, 796, 797, 799, 800, 802, 803, 805, 806, 807, 810, 812, 815, 817, 820, 822, 823, 826, 828, 831, 832, 835, 836, 839, 840, 843, 844, 847, 848, 851, 852, 855, 856, 859, 861, 862, 865, 866, 869, 870, 873, 874, 877, 878, 881, 882, 883, 884, 885, 886, 887, 888, 889, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 908, 909, 910, 911, 912, 914, 915, 917, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 932, 933, 934, 935, 936, 939, 941, 944, 946, 947, 950, 951, 954, 955, 958, 959, 962, 963, 966, 967, 970, 971, 974, 975, 978, 979, 980, 983, 985, 988, 993, 995], "from": [0, 4, 5, 6, 14, 15, 16, 21, 22, 23, 24, 25, 62, 63, 64, 67, 68, 69, 70, 71, 108, 109, 114, 115, 125, 133, 136, 141, 145, 149, 150, 151, 152, 153, 154, 155, 156, 157, 159, 161, 163, 164, 165, 166, 167, 168, 170, 172, 173, 174, 175, 186, 187, 213, 214, 215, 217, 220, 223, 226, 231, 234, 236, 237, 240, 248, 251, 253, 256, 261, 264, 279, 283, 284, 293, 296, 312, 321, 330, 331, 340, 355, 359, 364, 365, 371, 475, 478, 582, 585, 609, 630, 637, 638, 641, 677, 683, 690, 692, 703, 705, 721, 729, 732, 734, 746, 748, 785, 787, 797, 799, 822, 840, 843, 852, 855, 862, 865, 882, 883, 884, 885, 886, 888, 898, 899, 909, 910, 911, 912, 914, 915, 917, 921, 925, 926, 927, 933, 946, 963, 966, 967, 970, 971, 974, 975, 978, 979, 980, 983, 985, 988, 990, 996], "which": [0, 4, 5, 14, 15, 16, 67, 68, 69, 70, 71, 114, 115, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 145, 147, 148, 150, 151, 152, 153, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 172, 173, 174, 175, 186, 187, 198, 203, 210, 211, 212, 213, 214, 215, 217, 220, 222, 223, 226, 228, 229, 236, 237, 240, 242, 243, 245, 246, 253, 256, 258, 259, 261, 264, 266, 270, 271, 275, 276, 278, 279, 283, 284, 293, 296, 298, 302, 304, 307, 308, 320, 321, 330, 331, 341, 346, 347, 348, 349, 350, 351, 352, 353, 355, 359, 361, 363, 364, 365, 371, 562, 565, 609, 615, 627, 628, 630, 637, 638, 641, 643, 649, 653, 661, 662, 663, 665, 666, 681, 683, 690, 692, 694, 695, 697, 703, 705, 707, 709, 711, 713, 716, 718, 719, 721, 732, 734, 740, 742, 746, 748, 762, 764, 782, 784, 785, 787, 797, 799, 800, 802, 806, 812, 815, 817, 820, 822, 828, 831, 840, 843, 848, 851, 856, 859, 861, 866, 869, 886, 891, 892, 893, 894, 899, 900, 901, 902, 903, 909, 910, 911, 912, 915, 917, 921, 922, 923, 924, 925, 926, 927, 928, 932, 934, 935, 936, 939, 941, 944, 946, 951, 954, 955, 958, 959, 962, 963, 966, 967, 970, 971, 974, 975, 978, 979, 980, 983, 985, 988, 990, 993, 995], "try": [0, 4, 13, 15, 16, 67, 68, 150, 151, 152, 153, 163, 164, 172, 187, 609, 680, 990], "infer": [0, 4, 154, 161, 165, 166, 170, 175, 210, 211, 213, 214, 215, 217, 220, 223, 226, 236, 237, 240, 253, 256, 261, 264, 279, 283, 371, 475, 478, 609, 646, 671, 822, 852, 855], "when": [0, 4, 14, 15, 18, 64, 67, 68, 69, 70, 71, 137, 138, 150, 151, 152, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 172, 173, 175, 187, 284, 290, 321, 371, 385, 388, 463, 466, 558, 561, 609, 620, 653, 674, 806, 807, 810, 812, 815, 817, 820, 886, 897, 921, 922, 923, 925, 946, 951, 954, 959, 962, 967, 970, 975, 978, 990], "global": [0, 4, 5, 6, 12, 67, 68, 69, 70, 71, 139, 140, 160, 161, 165, 166, 170, 284, 299, 300, 301, 321, 330, 331, 363, 364, 365, 609, 644, 645, 664, 667, 668, 669, 673, 674, 904, 905, 908], "set": [0, 4, 5, 6, 12, 14, 21, 24, 25, 55, 64, 67, 68, 101, 125, 134, 141, 142, 143, 144, 145, 146, 149, 151, 154, 155, 160, 162, 163, 164, 165, 166, 167, 170, 172, 173, 321, 340, 350, 351, 362, 363, 364, 365, 371, 402, 405, 609, 610, 613, 667, 668, 669, 670, 683, 690, 692, 695, 697, 699, 701, 703, 705, 707, 709, 711, 713, 734, 740, 742, 762, 764, 766, 768, 775, 777, 782, 784, 886, 887, 896, 897, 898, 902, 903, 909, 919, 921, 922, 927, 928, 932, 933, 934, 935, 936, 939, 941, 944, 946, 967, 970, 975, 978], "ret": [0, 4, 5, 12, 21, 22, 23, 24, 25, 67, 68, 114, 115, 141, 145, 155, 156, 170, 175, 198, 199, 200, 201, 202, 203, 204, 207, 209, 210, 211, 213, 214, 215, 217, 220, 222, 223, 226, 228, 229, 231, 234, 236, 237, 240, 242, 243, 245, 246, 248, 251, 253, 256, 258, 259, 261, 264, 266, 270, 271, 275, 276, 278, 279, 283, 284, 288, 289, 290, 291, 292, 293, 296, 298, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 320, 321, 330, 337, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 364, 365, 366, 367, 368, 370, 371, 372, 375, 377, 380, 381, 384, 385, 388, 390, 393, 394, 397, 398, 401, 402, 405, 406, 409, 410, 413, 414, 417, 418, 421, 422, 425, 426, 429, 430, 433, 434, 437, 438, 441, 442, 445, 446, 449, 451, 454, 455, 458, 459, 462, 463, 466, 467, 470, 471, 474, 475, 478, 479, 482, 483, 486, 487, 490, 491, 494, 495, 498, 499, 502, 503, 506, 507, 510, 511, 514, 515, 518, 519, 522, 523, 526, 527, 530, 531, 534, 535, 538, 539, 540, 541, 544, 546, 549, 550, 553, 554, 557, 558, 561, 562, 565, 566, 569, 570, 573, 574, 577, 578, 581, 582, 585, 586, 589, 590, 594, 595, 599, 600, 604, 605, 608, 609, 610, 613, 615, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 641, 645, 646, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 662, 665, 666, 671, 673, 674, 675, 677, 678, 679, 681, 682, 683, 685, 688, 690, 692, 694, 695, 697, 699, 701, 703, 705, 707, 709, 711, 713, 716, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 738, 740, 742, 743, 745, 746, 748, 749, 751, 752, 754, 755, 757, 758, 761, 762, 764, 766, 768, 769, 771, 772, 774, 775, 777, 778, 780, 781, 782, 784, 785, 787, 788, 790, 791, 793, 794, 796, 797, 799, 800, 802, 803, 805, 806, 807, 810, 812, 815, 817, 820, 822, 823, 826, 828, 831, 832, 835, 836, 839, 840, 843, 844, 847, 848, 851, 852, 855, 856, 859, 861, 862, 865, 866, 869, 870, 873, 874, 877, 878, 881, 882, 883, 884, 885, 886, 887, 888, 892, 896, 897, 898, 904, 905, 908, 909, 910, 911, 912, 914, 915, 917, 920, 921, 922, 923, 924, 925, 926, 927, 928, 932, 933, 934, 935, 936, 939, 941, 944, 946, 947, 950, 951, 954, 955, 958, 959, 962, 963, 966, 967, 970, 971, 974, 975, 978, 979, 980, 983, 985, 988, 993, 995], "exampl": [0, 4, 5, 6, 12, 16, 28, 29, 32, 33, 34, 35, 36, 37, 42, 43, 46, 47, 54, 55, 62, 63, 64, 69, 70, 74, 75, 78, 79, 80, 81, 82, 83, 88, 89, 92, 93, 96, 97, 100, 101, 108, 109, 150, 151, 152, 154, 155, 156, 159, 160, 161, 162, 163, 164, 165, 166, 167, 170, 172, 173, 174, 175, 186, 187, 198, 200, 201, 202, 203, 204, 207, 209, 210, 211, 213, 236, 237, 240, 248, 251, 258, 259, 261, 264, 276, 278, 279, 283, 284, 290, 293, 294, 295, 296, 297, 305, 306, 321, 340, 341, 343, 355, 356, 357, 358, 359, 362, 364, 366, 368, 369, 371, 372, 373, 374, 375, 376, 385, 386, 387, 388, 389, 390, 393, 406, 409, 410, 413, 414, 417, 426, 429, 430, 433, 434, 435, 436, 437, 438, 441, 442, 445, 459, 462, 467, 468, 469, 470, 475, 478, 479, 482, 495, 498, 499, 502, 539, 540, 546, 549, 550, 553, 566, 569, 582, 585, 586, 589, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 609, 610, 611, 612, 613, 614, 617, 618, 626, 627, 634, 637, 638, 639, 640, 641, 642, 645, 656, 671, 672, 677, 678, 679, 683, 685, 686, 687, 688, 689, 721, 722, 724, 726, 727, 728, 733, 734, 735, 736, 737, 738, 739, 740, 742, 743, 745, 746, 748, 755, 757, 766, 768, 772, 774, 785, 787, 791, 793, 794, 796, 806, 807, 810, 812, 815, 817, 820, 822, 823, 824, 825, 826, 827, 828, 831, 836, 839, 840, 843, 848, 851, 852, 855, 856, 857, 858, 859, 860, 861, 862, 865, 866, 869, 870, 873, 904, 905, 908, 909, 910, 911, 912, 913, 914, 915, 917, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 935, 936, 939, 946, 947, 950, 967, 970, 971, 974, 979, 980, 983, 990], "If": [0, 4, 5, 6, 14, 18, 21, 24, 25, 64, 67, 68, 149, 150, 151, 152, 153, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 172, 173, 175, 187, 213, 214, 215, 222, 223, 226, 228, 229, 236, 237, 240, 248, 251, 258, 259, 261, 264, 266, 270, 271, 275, 276, 278, 279, 283, 284, 290, 292, 312, 321, 340, 364, 371, 372, 375, 377, 380, 381, 384, 385, 388, 390, 393, 394, 397, 398, 401, 402, 405, 434, 437, 438, 441, 442, 445, 459, 462, 463, 466, 467, 470, 503, 506, 507, 510, 515, 518, 519, 522, 527, 530, 531, 534, 541, 544, 558, 561, 562, 565, 566, 569, 570, 573, 574, 577, 578, 581, 582, 585, 595, 599, 600, 604, 605, 608, 609, 653, 683, 690, 692, 695, 697, 703, 705, 707, 709, 711, 713, 734, 735, 738, 740, 742, 762, 764, 766, 768, 775, 777, 778, 780, 782, 784, 785, 787, 797, 799, 800, 802, 806, 807, 810, 812, 815, 817, 820, 822, 836, 839, 840, 843, 856, 859, 861, 862, 865, 866, 869, 882, 883, 884, 886, 898, 899, 909, 914, 915, 917, 921, 922, 923, 924, 926, 927, 928, 932, 934, 935, 936, 939, 941, 944, 946, 951, 954, 955, 958, 959, 962, 963, 966, 967, 970, 971, 974, 975, 978, 979, 980, 983, 985, 988, 990], "import": [0, 4, 15, 62, 63, 108, 109, 152, 155, 156, 157, 161, 163, 164, 165, 166, 167, 170, 172, 173, 175, 187, 321, 362, 990, 996], "numpi": [0, 4, 5, 6, 14, 15, 67, 68, 151, 152, 159, 161, 165, 166, 167, 168, 170, 172, 175, 609, 678, 946, 947, 950, 990], "np": [0, 4, 163, 165, 166, 167, 168, 172, 173, 175, 990], "x": [0, 4, 12, 21, 24, 25, 28, 29, 32, 33, 34, 35, 42, 43, 46, 47, 54, 55, 65, 66, 67, 68, 69, 70, 72, 73, 74, 75, 78, 79, 80, 81, 82, 83, 88, 89, 92, 93, 96, 97, 100, 101, 102, 103, 106, 107, 125, 136, 153, 155, 156, 157, 160, 161, 164, 167, 168, 170, 172, 173, 174, 175, 198, 199, 200, 201, 202, 203, 204, 207, 208, 209, 213, 217, 220, 221, 223, 226, 227, 231, 234, 235, 237, 240, 241, 248, 251, 253, 256, 257, 261, 264, 265, 266, 267, 270, 271, 272, 275, 276, 278, 279, 280, 283, 284, 290, 292, 293, 294, 295, 296, 297, 302, 321, 340, 341, 342, 343, 346, 347, 355, 359, 364, 366, 371, 372, 373, 374, 375, 376, 377, 380, 381, 384, 385, 386, 387, 388, 389, 390, 393, 394, 397, 398, 401, 402, 405, 406, 409, 410, 413, 414, 417, 430, 433, 434, 435, 436, 437, 438, 441, 442, 445, 455, 458, 459, 462, 463, 466, 467, 468, 469, 470, 475, 478, 479, 482, 483, 486, 487, 490, 491, 494, 495, 498, 499, 502, 503, 506, 507, 510, 511, 514, 515, 518, 527, 530, 539, 540, 546, 549, 554, 557, 566, 569, 570, 573, 574, 577, 578, 581, 582, 585, 586, 589, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 608, 609, 617, 618, 619, 621, 622, 624, 626, 627, 628, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 645, 646, 648, 649, 651, 652, 653, 655, 656, 657, 658, 662, 671, 672, 675, 677, 678, 679, 681, 682, 683, 694, 699, 701, 702, 716, 718, 719, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 742, 743, 745, 746, 748, 749, 751, 752, 754, 755, 757, 762, 764, 765, 766, 768, 769, 771, 772, 774, 775, 777, 778, 780, 781, 785, 787, 788, 790, 791, 793, 794, 796, 800, 802, 806, 807, 810, 812, 815, 817, 820, 822, 823, 824, 825, 826, 827, 828, 831, 832, 835, 836, 839, 840, 843, 844, 847, 848, 851, 852, 855, 856, 857, 858, 859, 860, 861, 862, 865, 866, 867, 868, 869, 870, 873, 874, 877, 878, 881, 886, 887, 892, 896, 897, 898, 904, 905, 908, 909, 911, 912, 913, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 939, 940, 941, 944, 945, 946, 947, 950, 951, 954, 955, 958, 959, 962, 963, 966, 967, 970, 971, 974, 975, 978, 979, 980, 983, 984, 985, 988, 989, 990], "arrai": [0, 4, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 67, 68, 69, 70, 71, 72, 73, 74, 75, 78, 79, 80, 81, 82, 83, 88, 89, 92, 93, 96, 97, 100, 101, 125, 133, 136, 150, 151, 152, 154, 155, 156, 157, 159, 160, 161, 162, 164, 165, 166, 167, 169, 170, 171, 173, 174, 175, 187, 188, 196, 198, 199, 200, 201, 202, 203, 204, 207, 209, 212, 213, 214, 215, 217, 220, 222, 223, 226, 228, 229, 231, 234, 236, 237, 240, 242, 243, 245, 246, 248, 250, 251, 252, 253, 256, 258, 259, 261, 264, 266, 270, 271, 275, 276, 278, 279, 283, 284, 290, 291, 292, 293, 295, 296, 297, 302, 304, 307, 309, 310, 312, 316, 321, 340, 341, 342, 343, 346, 347, 348, 349, 350, 351, 352, 353, 355, 359, 361, 365, 366, 371, 372, 374, 375, 376, 377, 380, 381, 384, 385, 387, 388, 389, 390, 393, 394, 397, 398, 401, 402, 405, 406, 409, 410, 413, 414, 417, 418, 421, 422, 425, 426, 429, 430, 433, 434, 436, 437, 438, 441, 442, 445, 446, 449, 451, 454, 455, 458, 459, 462, 463, 466, 467, 469, 470, 471, 474, 475, 478, 479, 482, 483, 486, 487, 490, 491, 494, 495, 498, 499, 502, 503, 506, 507, 510, 511, 514, 515, 518, 519, 522, 523, 526, 527, 530, 531, 534, 535, 538, 539, 540, 541, 544, 546, 549, 550, 553, 554, 557, 558, 561, 562, 565, 566, 569, 570, 573, 574, 577, 578, 581, 582, 585, 586, 589, 590, 594, 595, 596, 598, 599, 600, 601, 603, 604, 605, 608, 609, 610, 612, 613, 614, 617, 618, 619, 621, 622, 624, 626, 627, 628, 631, 632, 633, 634, 635, 636, 637, 638, 640, 641, 642, 643, 646, 648, 649, 650, 651, 652, 653, 655, 656, 658, 661, 662, 663, 665, 666, 671, 672, 675, 677, 678, 679, 681, 682, 683, 685, 687, 688, 689, 690, 692, 695, 697, 699, 701, 703, 705, 707, 709, 711, 713, 716, 718, 719, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 737, 738, 739, 740, 742, 743, 745, 746, 748, 749, 751, 752, 754, 755, 757, 758, 761, 762, 764, 765, 766, 768, 769, 771, 772, 774, 775, 777, 778, 780, 781, 782, 784, 785, 787, 788, 790, 791, 793, 794, 796, 797, 799, 800, 802, 803, 805, 806, 807, 810, 812, 815, 817, 820, 822, 823, 825, 826, 827, 828, 831, 832, 835, 836, 839, 840, 843, 844, 847, 848, 851, 852, 855, 856, 858, 859, 860, 861, 862, 865, 866, 869, 870, 873, 874, 877, 878, 881, 882, 883, 884, 885, 886, 888, 898, 899, 904, 905, 908, 909, 910, 911, 912, 913, 914, 915, 917, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 931, 932, 933, 934, 935, 936, 939, 941, 944, 946, 947, 950, 951, 954, 955, 958, 959, 962, 963, 966, 967, 970, 971, 974, 975, 978, 979, 980, 983, 985, 988, 990, 993, 995], "2": [0, 4, 28, 29, 32, 33, 34, 35, 36, 37, 42, 43, 46, 47, 54, 55, 64, 67, 68, 69, 70, 74, 75, 78, 79, 80, 81, 82, 83, 88, 89, 92, 93, 96, 97, 100, 101, 150, 151, 153, 157, 161, 164, 168, 169, 170, 172, 173, 174, 175, 187, 198, 200, 201, 202, 203, 209, 212, 213, 236, 237, 240, 248, 251, 258, 259, 261, 264, 279, 283, 284, 290, 293, 294, 295, 296, 297, 321, 340, 341, 343, 355, 357, 359, 366, 371, 372, 373, 374, 375, 376, 385, 386, 387, 388, 389, 390, 393, 398, 401, 402, 405, 410, 413, 414, 417, 426, 429, 430, 433, 434, 435, 436, 437, 438, 441, 442, 445, 459, 462, 467, 468, 469, 470, 475, 478, 479, 482, 495, 498, 499, 502, 515, 518, 539, 540, 546, 549, 550, 553, 566, 569, 582, 585, 586, 589, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 609, 610, 611, 612, 613, 617, 618, 621, 622, 624, 627, 634, 637, 638, 639, 640, 641, 642, 656, 671, 672, 677, 683, 685, 686, 687, 688, 689, 721, 724, 725, 726, 727, 728, 733, 734, 735, 736, 737, 738, 739, 740, 742, 743, 745, 746, 747, 748, 755, 757, 758, 761, 762, 764, 766, 768, 772, 774, 775, 777, 778, 780, 785, 787, 791, 792, 793, 794, 796, 800, 801, 802, 806, 807, 810, 817, 820, 822, 823, 824, 825, 826, 827, 828, 831, 836, 839, 840, 843, 848, 851, 852, 855, 856, 857, 858, 859, 860, 861, 862, 865, 870, 873, 904, 905, 908, 909, 910, 911, 912, 913, 914, 915, 917, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 935, 936, 939, 946, 947, 950, 951, 954, 979, 980, 983, 990], "0": [0, 4, 26, 27, 32, 33, 34, 35, 36, 37, 42, 43, 46, 47, 48, 49, 54, 55, 58, 59, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 116, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 147, 148, 151, 155, 156, 157, 170, 172, 173, 174, 175, 198, 200, 201, 202, 203, 204, 207, 209, 213, 214, 215, 228, 229, 230, 242, 243, 245, 246, 247, 261, 264, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 278, 279, 283, 284, 290, 293, 295, 296, 297, 304, 321, 323, 326, 330, 333, 337, 340, 341, 343, 346, 347, 348, 349, 350, 351, 352, 353, 355, 359, 362, 364, 365, 369, 371, 372, 373, 375, 376, 377, 380, 381, 384, 385, 388, 389, 390, 393, 394, 397, 398, 401, 402, 405, 406, 409, 410, 413, 418, 421, 426, 429, 430, 433, 434, 435, 436, 437, 438, 441, 442, 445, 459, 462, 463, 466, 467, 468, 469, 470, 479, 482, 499, 502, 503, 506, 507, 510, 515, 518, 539, 540, 541, 544, 546, 549, 550, 553, 558, 561, 562, 565, 566, 569, 570, 573, 574, 577, 578, 581, 582, 585, 586, 589, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 608, 609, 610, 611, 612, 613, 614, 617, 618, 621, 622, 624, 626, 627, 628, 634, 637, 638, 641, 642, 647, 656, 662, 665, 666, 671, 677, 678, 679, 683, 685, 686, 687, 688, 689, 690, 691, 692, 693, 703, 704, 705, 706, 707, 708, 709, 710, 721, 722, 724, 726, 727, 728, 733, 734, 735, 736, 737, 738, 739, 740, 742, 743, 745, 746, 747, 748, 755, 757, 785, 787, 791, 793, 794, 795, 796, 800, 802, 806, 807, 810, 812, 815, 817, 820, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 843, 844, 847, 848, 851, 856, 857, 858, 859, 860, 861, 862, 865, 866, 867, 868, 869, 870, 873, 878, 880, 886, 898, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 934, 935, 936, 939, 946, 947, 950, 951, 954, 955, 958, 967, 968, 969, 970, 971, 974, 975, 976, 977, 978, 979, 980, 983, 990], "print": [0, 4, 5, 6, 12, 28, 29, 32, 33, 34, 35, 36, 37, 42, 43, 46, 47, 54, 55, 62, 63, 67, 68, 69, 70, 71, 74, 75, 78, 79, 80, 81, 82, 83, 88, 89, 92, 93, 96, 97, 100, 101, 108, 109, 150, 157, 164, 170, 172, 173, 174, 198, 200, 201, 202, 203, 204, 207, 209, 213, 236, 237, 240, 248, 251, 258, 259, 261, 264, 276, 278, 279, 283, 284, 290, 293, 294, 295, 296, 297, 305, 306, 321, 341, 355, 356, 357, 358, 359, 361, 364, 368, 371, 372, 373, 374, 375, 376, 385, 386, 387, 388, 389, 390, 393, 406, 409, 410, 413, 414, 417, 426, 429, 430, 433, 434, 435, 436, 437, 438, 441, 442, 445, 459, 462, 467, 468, 469, 470, 475, 478, 479, 482, 495, 498, 499, 502, 539, 540, 546, 549, 550, 553, 566, 569, 582, 585, 586, 589, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 609, 610, 611, 612, 613, 614, 617, 618, 626, 627, 634, 637, 638, 639, 640, 641, 642, 645, 663, 671, 672, 677, 678, 679, 683, 685, 686, 688, 689, 721, 722, 724, 726, 727, 728, 733, 734, 735, 736, 737, 738, 739, 740, 742, 743, 745, 746, 748, 755, 757, 772, 774, 785, 787, 791, 793, 794, 796, 806, 807, 810, 812, 815, 817, 820, 822, 823, 824, 825, 826, 827, 836, 839, 840, 843, 848, 851, 852, 855, 856, 857, 858, 859, 860, 861, 862, 865, 870, 873, 904, 905, 908, 909, 910, 911, 912, 913, 914, 915, 917, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 935, 936, 939, 946, 947, 950, 951, 954, 967, 970, 971, 974, 979, 980, 983, 990], "function": [0, 4, 5, 6, 14, 19, 20, 21, 26, 27, 28, 29, 32, 33, 34, 35, 36, 37, 42, 43, 46, 47, 54, 55, 62, 63, 65, 66, 67, 68, 74, 75, 78, 79, 80, 81, 82, 83, 88, 89, 92, 93, 96, 97, 100, 101, 108, 109, 111, 112, 113, 141, 144, 146, 151, 153, 154, 155, 156, 157, 158, 159, 161, 163, 167, 169, 171, 172, 173, 174, 185, 186, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 217, 218, 220, 222, 223, 224, 226, 228, 229, 231, 232, 234, 236, 237, 238, 240, 242, 243, 245, 246, 248, 251, 253, 254, 256, 258, 259, 261, 262, 264, 266, 268, 270, 271, 273, 275, 276, 278, 279, 281, 283, 284, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 323, 324, 325, 326, 327, 328, 330, 331, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 380, 381, 384, 385, 386, 387, 388, 389, 390, 393, 394, 397, 398, 401, 402, 405, 406, 409, 410, 413, 414, 417, 418, 421, 422, 425, 426, 429, 430, 433, 434, 435, 436, 437, 438, 441, 442, 445, 446, 449, 451, 454, 455, 458, 459, 462, 463, 466, 467, 468, 469, 470, 471, 474, 475, 478, 479, 482, 483, 486, 487, 490, 491, 494, 495, 498, 499, 502, 503, 506, 507, 510, 511, 514, 515, 518, 519, 522, 523, 526, 527, 530, 531, 534, 535, 538, 539, 540, 541, 544, 546, 549, 550, 553, 554, 557, 558, 561, 562, 565, 566, 569, 570, 573, 574, 577, 578, 581, 582, 585, 586, 589, 590, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 685, 686, 687, 688, 689, 690, 692, 694, 695, 697, 699, 701, 703, 705, 707, 709, 711, 713, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 742, 743, 745, 746, 748, 749, 751, 752, 754, 755, 757, 758, 761, 762, 764, 765, 766, 768, 769, 771, 772, 774, 775, 777, 778, 780, 781, 782, 784, 785, 787, 788, 790, 791, 793, 794, 796, 797, 799, 800, 802, 803, 805, 806, 807, 810, 812, 815, 817, 820, 822, 823, 824, 825, 826, 827, 828, 831, 832, 835, 836, 839, 840, 843, 844, 847, 848, 851, 852, 855, 856, 857, 858, 859, 860, 861, 862, 865, 866, 869, 870, 873, 874, 877, 878, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 908, 909, 910, 911, 912, 913, 914, 915, 917, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 939, 941, 944, 946, 947, 950, 951, 954, 955, 958, 959, 962, 963, 966, 967, 970, 971, 974, 975, 978, 979, 980, 983, 985, 988, 990, 993, 995], "py": [0, 4, 5, 151, 155, 156, 160, 161, 165, 166, 168, 170, 172, 174, 175, 909, 910, 914], "noqa": [0, 4, 5, 213, 214, 215, 217, 220, 222, 223, 226, 228, 229, 231, 234, 236, 237, 240, 242, 243, 248, 251, 258, 259, 261, 264, 266, 270, 271, 275, 276, 278, 279, 283, 284, 293, 296, 371, 372, 375, 385, 388, 410, 413, 430, 433, 434, 437, 442, 445, 499, 502, 550, 553, 566, 569, 582, 585, 586, 589, 595, 599, 600, 604, 734, 743, 745, 746, 748, 822, 836, 839, 840, 843, 856, 859, 946, 951, 954], "The": [0, 4, 5, 13, 14, 16, 18, 21, 22, 23, 24, 25, 64, 67, 68, 69, 70, 71, 114, 115, 125, 126, 127, 128, 129, 130, 131, 132, 133, 135, 136, 137, 138, 139, 140, 141, 143, 144, 145, 149, 150, 152, 153, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 173, 174, 175, 186, 198, 199, 200, 203, 209, 210, 211, 213, 214, 215, 231, 234, 245, 246, 266, 270, 271, 275, 284, 288, 289, 290, 298, 303, 305, 306, 308, 311, 316, 320, 321, 330, 331, 337, 338, 339, 340, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 359, 360, 361, 362, 363, 364, 365, 367, 370, 371, 372, 375, 377, 380, 381, 384, 385, 388, 390, 393, 394, 397, 398, 401, 402, 405, 406, 409, 410, 413, 414, 417, 418, 421, 422, 425, 426, 429, 430, 433, 434, 437, 438, 441, 442, 445, 446, 449, 451, 454, 455, 458, 459, 462, 463, 466, 467, 470, 471, 474, 475, 478, 479, 482, 483, 486, 487, 490, 491, 494, 495, 498, 499, 502, 503, 506, 507, 510, 515, 518, 519, 522, 523, 526, 527, 530, 531, 534, 535, 538, 541, 544, 550, 553, 558, 561, 562, 565, 566, 569, 570, 573, 574, 577, 578, 581, 582, 585, 595, 599, 600, 604, 605, 608, 609, 615, 617, 620, 621, 629, 630, 636, 638, 641, 651, 652, 653, 655, 656, 657, 658, 660, 665, 666, 667, 668, 669, 672, 673, 674, 682, 683, 685, 688, 690, 692, 695, 697, 703, 705, 707, 709, 711, 713, 716, 719, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 732, 733, 734, 735, 738, 740, 742, 743, 745, 746, 748, 749, 751, 752, 754, 755, 757, 762, 764, 766, 768, 769, 771, 772, 774, 775, 777, 778, 780, 781, 782, 784, 785, 787, 788, 790, 791, 793, 794, 796, 797, 799, 800, 802, 806, 807, 810, 812, 815, 817, 820, 822, 828, 831, 832, 835, 836, 839, 840, 843, 844, 847, 848, 851, 852, 855, 861, 874, 877, 882, 883, 884, 885, 886, 887, 888, 889, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 908, 909, 910, 914, 921, 922, 923, 924, 926, 927, 928, 932, 934, 935, 936, 939, 941, 944, 946, 947, 950, 951, 954, 955, 958, 959, 962, 963, 966, 967, 970, 971, 974, 975, 978, 979, 980, 983, 985, 988, 990], "set_backend": [0, 4, 5, 12, 160, 161, 162, 165, 284, 305, 306, 321, 362, 609, 671, 990], "ha": [0, 4, 5, 14, 15, 16, 64, 67, 68, 151, 156, 157, 160, 161, 162, 165, 166, 170, 172, 174, 175, 186, 187, 213, 248, 251, 321, 340, 371, 372, 375, 541, 544, 558, 561, 734, 758, 761, 781, 782, 784, 785, 787, 794, 796, 822, 836, 839, 862, 865, 926, 927, 928, 932, 934, 946, 955, 958, 963, 966, 967, 970, 971, 974, 975, 978], "over": [0, 4, 14, 16, 62, 63, 64, 67, 68, 108, 109, 139, 140, 150, 156, 157, 161, 167, 172, 187, 734, 762, 764, 791, 793, 797, 799, 800, 802, 904, 905, 908, 909, 915, 917, 946, 951, 954, 955, 958, 959, 962, 963, 966, 967, 970, 971, 974, 975, 978, 979, 980, 983, 985, 988], "ani": [0, 4, 12, 14, 15, 16, 21, 22, 23, 60, 61, 62, 63, 67, 68, 106, 107, 108, 109, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 163, 164, 165, 166, 167, 168, 170, 172, 173, 174, 175, 186, 187, 210, 211, 213, 214, 215, 217, 220, 222, 223, 226, 228, 229, 231, 234, 236, 237, 240, 242, 243, 245, 246, 248, 251, 253, 256, 258, 259, 261, 264, 266, 270, 271, 275, 276, 278, 279, 283, 284, 293, 296, 321, 366, 371, 372, 375, 385, 388, 390, 393, 434, 437, 451, 454, 467, 470, 479, 482, 499, 502, 550, 553, 582, 585, 586, 589, 595, 599, 609, 610, 613, 630, 631, 632, 633, 634, 637, 648, 655, 656, 657, 658, 673, 674, 683, 694, 721, 724, 731, 733, 734, 735, 738, 746, 748, 822, 856, 859, 882, 883, 884, 885, 886, 892, 896, 904, 905, 908, 909, 915, 917, 926, 928, 932, 946, 951, 954, 979, 980, 983, 990], "pass": [0, 4, 62, 63, 67, 68, 69, 70, 71, 108, 109, 114, 115, 137, 138, 141, 145, 147, 148, 152, 156, 157, 158, 159, 160, 161, 163, 164, 167, 168, 172, 187, 284, 298, 321, 330, 365, 371, 402, 405, 609, 620, 653, 683, 719, 882, 883, 884], "jax": [0, 4, 5, 6, 15, 16, 151, 152, 161, 165, 166, 167, 168, 170, 172, 175, 187, 683, 699, 701, 926, 927, 928, 932, 934, 990], "get_backend": [0, 160, 161], "specifi": [0, 5, 64, 67, 68, 154, 159, 160, 165, 166, 167, 168, 170, 173, 174, 175, 213, 214, 215, 222, 236, 242, 243, 245, 246, 258, 259, 266, 270, 271, 275, 276, 278, 284, 290, 292, 321, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 355, 359, 361, 364, 365, 366, 371, 562, 565, 609, 615, 627, 637, 638, 641, 648, 681, 734, 746, 748, 762, 764, 791, 793, 794, 796, 797, 799, 800, 802, 806, 807, 810, 812, 815, 817, 820, 822, 823, 826, 828, 831, 832, 835, 840, 843, 856, 859, 862, 865, 866, 869, 878, 881, 886, 891, 893, 894, 900, 901, 902, 903, 921, 922, 923, 926, 927, 928, 932, 934, 935, 936, 939, 946, 947, 950, 963, 966, 971, 974, 979, 980, 983, 985, 988], "isn": [0, 5, 151, 173, 187], "t": [0, 5, 15, 16, 62, 63, 108, 109, 150, 151, 152, 153, 157, 165, 170, 172, 173, 174, 175, 187, 609, 618, 721, 730, 731], "associ": [0, 5, 151, 160, 162, 187, 371, 385, 388, 541, 544, 734, 766, 768, 775, 777, 803, 805], "option": [0, 5, 21, 22, 23, 24, 25, 62, 63, 67, 68, 69, 70, 108, 109, 150, 151, 155, 156, 157, 160, 164, 165, 166, 167, 168, 170, 175, 187, 198, 199, 200, 201, 202, 203, 204, 207, 209, 210, 211, 213, 214, 215, 217, 220, 222, 223, 226, 228, 229, 231, 234, 236, 237, 240, 242, 243, 245, 246, 248, 251, 253, 256, 258, 259, 261, 264, 266, 270, 271, 275, 276, 278, 279, 283, 284, 290, 292, 298, 299, 300, 301, 308, 320, 321, 340, 364, 365, 366, 371, 372, 375, 377, 380, 381, 384, 385, 388, 390, 393, 394, 397, 398, 401, 402, 405, 406, 409, 410, 413, 414, 417, 418, 421, 422, 425, 426, 429, 430, 433, 434, 437, 438, 441, 442, 445, 446, 449, 451, 454, 455, 458, 459, 462, 463, 466, 467, 470, 471, 474, 475, 478, 479, 482, 483, 486, 487, 490, 491, 494, 495, 498, 503, 506, 507, 510, 511, 514, 515, 518, 519, 522, 523, 526, 527, 530, 531, 534, 535, 538, 539, 540, 541, 544, 546, 549, 550, 553, 554, 557, 558, 561, 562, 565, 566, 569, 570, 573, 574, 577, 578, 581, 582, 585, 586, 589, 590, 594, 595, 599, 600, 604, 605, 608, 609, 615, 621, 622, 624, 627, 628, 629, 631, 632, 633, 635, 637, 638, 641, 649, 660, 662, 665, 666, 673, 674, 683, 716, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 738, 740, 742, 743, 745, 746, 748, 752, 754, 755, 757, 758, 761, 762, 764, 766, 768, 769, 771, 772, 774, 775, 777, 781, 782, 784, 785, 787, 788, 790, 791, 793, 794, 796, 797, 799, 800, 802, 803, 805, 806, 807, 810, 812, 815, 817, 820, 822, 823, 826, 828, 831, 832, 835, 836, 839, 840, 843, 844, 847, 848, 851, 852, 855, 856, 859, 861, 862, 865, 866, 869, 870, 873, 874, 877, 878, 881, 882, 883, 884, 885, 886, 887, 892, 897, 898, 904, 905, 908, 909, 910, 911, 912, 914, 915, 917, 920, 921, 922, 923, 925, 926, 934, 935, 936, 939, 941, 944, 946, 947, 950, 951, 954, 955, 958, 959, 962, 963, 966, 967, 970, 971, 974, 975, 978, 979, 980, 983, 985, 988], "str": [0, 5, 18, 21, 22, 23, 64, 67, 68, 165, 166, 210, 211, 213, 248, 251, 284, 288, 298, 299, 300, 303, 304, 307, 308, 309, 310, 313, 314, 315, 320, 321, 337, 340, 341, 343, 346, 347, 348, 349, 365, 609, 615, 629, 631, 632, 633, 660, 665, 666, 721, 722, 724, 726, 727, 728, 734, 778, 780, 882, 883, 884, 885, 886, 892, 946, 947, 950], "we": [0, 5, 6, 12, 13, 14, 15, 16, 62, 63, 108, 109, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 162, 163, 164, 165, 167, 168, 170, 171, 172, 173, 174, 175, 186, 187, 683, 694, 990, 996], "want": [0, 5, 15, 62, 63, 108, 109, 149, 150, 151, 159, 173, 174, 175, 187], "retriev": [0, 5, 151, 609, 615], "i": [0, 5, 151, 153, 154, 170, 173, 175, 213, 214, 215, 248, 251, 371, 372, 375, 402, 405, 418, 421, 426, 429, 434, 437, 467, 470, 471, 474, 483, 486, 539, 540, 546, 549, 558, 561, 562, 565, 609, 617, 618, 683, 690, 692, 695, 697, 703, 705, 707, 709, 711, 713, 734, 740, 742, 758, 761, 766, 768, 775, 777, 782, 784, 785, 787, 794, 796, 800, 802, 822, 866, 869, 926, 927, 928, 932, 934, 935, 936, 939, 941, 944, 946, 947, 950, 951, 954, 955, 958, 959, 962, 967, 970, 971, 974, 975, 978], "e": [0, 5, 15, 16, 64, 149, 151, 153, 154, 164, 173, 187, 212, 213, 248, 251, 284, 289, 312, 321, 337, 371, 372, 375, 402, 405, 418, 421, 426, 429, 434, 437, 459, 462, 467, 470, 471, 474, 483, 486, 503, 506, 511, 514, 539, 540, 546, 549, 558, 561, 562, 565, 683, 690, 692, 695, 697, 703, 705, 707, 709, 711, 713, 734, 740, 742, 758, 761, 766, 768, 775, 777, 782, 784, 785, 787, 800, 802, 822, 866, 869, 909, 914, 915, 917, 926, 927, 928, 932, 934, 935, 936, 939, 941, 944, 946, 951, 954, 955, 958, 959, 962, 963, 966, 967, 970, 971, 974, 975, 978], "one": [0, 5, 15, 16, 64, 67, 68, 78, 79, 80, 81, 88, 89, 92, 93, 96, 97, 150, 151, 157, 160, 163, 164, 165, 167, 168, 169, 172, 173, 175, 187, 213, 214, 215, 248, 251, 284, 291, 293, 296, 321, 350, 351, 352, 353, 365, 372, 376, 385, 389, 609, 610, 612, 613, 614, 638, 642, 659, 662, 665, 666, 734, 735, 739, 758, 761, 762, 764, 772, 774, 778, 780, 797, 799, 800, 802, 822, 823, 827, 836, 839, 840, 843, 856, 859, 860, 862, 865, 911, 913, 921, 922, 924, 926, 927, 928, 932, 933, 934, 946, 947, 950, 990], "default": [0, 5, 18, 21, 22, 23, 24, 25, 62, 63, 64, 67, 68, 69, 70, 71, 108, 109, 114, 115, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 151, 156, 157, 160, 161, 164, 165, 166, 168, 174, 198, 199, 200, 201, 202, 203, 204, 207, 209, 210, 211, 213, 214, 215, 217, 220, 222, 223, 226, 228, 229, 231, 234, 236, 237, 240, 242, 243, 245, 246, 248, 251, 253, 256, 258, 259, 261, 264, 266, 270, 271, 275, 276, 278, 279, 283, 284, 290, 292, 299, 300, 301, 302, 321, 330, 331, 340, 341, 345, 346, 347, 348, 349, 350, 351, 352, 353, 360, 362, 363, 364, 365, 366, 369, 370, 371, 372, 375, 377, 380, 381, 384, 385, 388, 390, 393, 394, 397, 398, 401, 402, 405, 406, 409, 410, 413, 414, 417, 418, 421, 422, 425, 426, 429, 430, 433, 434, 437, 438, 441, 442, 445, 446, 449, 451, 454, 455, 458, 459, 462, 463, 466, 467, 470, 471, 474, 475, 478, 479, 482, 483, 486, 487, 490, 491, 494, 495, 498, 503, 506, 507, 510, 511, 514, 515, 518, 519, 522, 523, 526, 527, 530, 531, 534, 535, 538, 539, 540, 541, 544, 546, 549, 550, 553, 554, 557, 558, 561, 562, 565, 566, 569, 570, 573, 574, 577, 578, 581, 582, 585, 586, 589, 590, 594, 595, 599, 600, 604, 605, 608, 609, 610, 613, 615, 621, 622, 624, 627, 628, 631, 632, 633, 635, 636, 637, 638, 641, 646, 647, 648, 649, 650, 653, 654, 655, 656, 658, 659, 660, 662, 664, 665, 666, 669, 671, 673, 674, 681, 682, 683, 685, 688, 690, 692, 694, 695, 697, 699, 701, 703, 705, 707, 709, 711, 713, 716, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 738, 740, 742, 743, 745, 746, 748, 752, 754, 755, 757, 758, 761, 762, 764, 766, 768, 769, 771, 772, 774, 775, 777, 778, 780, 781, 782, 784, 785, 787, 788, 790, 791, 793, 794, 796, 797, 799, 800, 802, 803, 805, 806, 807, 810, 812, 815, 817, 820, 822, 823, 826, 828, 831, 832, 835, 836, 839, 840, 843, 844, 847, 848, 851, 852, 855, 856, 859, 861, 862, 865, 866, 869, 870, 873, 874, 877, 878, 881, 882, 883, 884, 885, 886, 887, 888, 892, 896, 897, 898, 899, 904, 905, 908, 909, 910, 911, 912, 914, 915, 917, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 932, 934, 935, 936, 939, 941, 944, 946, 947, 950, 951, 954, 955, 958, 959, 962, 963, 966, 967, 970, 971, 974, 975, 978, 979, 980, 983, 985, 988], "torch": [0, 5, 12, 151, 155, 160, 161, 163, 164, 165, 166, 167, 168, 170, 172, 173, 174, 175, 187, 210, 211, 284, 305, 306, 321, 362, 609, 671, 822, 836, 839, 990], "tensorflow": [0, 5, 12, 15, 16, 151, 152, 165, 166, 167, 168, 170, 175, 187, 990], "mxnet": [0, 5, 15, 152, 165, 166, 167, 170, 175, 990], "either": [0, 5, 12, 64, 67, 68, 125, 136, 137, 138, 150, 151, 153, 156, 157, 160, 161, 164, 165, 166, 170, 172, 173, 187, 213, 231, 234, 371, 385, 388, 402, 405, 487, 490, 503, 506, 507, 510, 515, 518, 519, 522, 541, 544, 562, 565, 570, 573, 574, 577, 595, 599, 609, 630, 655, 659, 660, 734, 758, 761, 882, 883, 884, 885, 946, 963, 966, 971, 974], "doesn": [0, 5, 150, 153, 157, 165, 170, 187], "matter": [0, 5, 14, 157], "been": [0, 5, 151, 156, 160, 161, 164, 165, 166, 168, 170, 186, 187, 321, 340, 609, 631, 632, 633, 909, 910], "ivy_np": [0, 5], "us": [0, 5, 12, 15, 16, 18, 32, 33, 62, 63, 64, 67, 68, 69, 70, 71, 78, 79, 108, 109, 125, 133, 136, 137, 138, 139, 140, 141, 143, 144, 149, 151, 152, 154, 155, 156, 157, 158, 159, 160, 161, 163, 164, 165, 166, 167, 168, 169, 170, 172, 174, 175, 186, 187, 198, 200, 201, 202, 203, 204, 207, 209, 212, 284, 303, 321, 330, 331, 356, 360, 363, 364, 365, 366, 368, 370, 371, 372, 373, 374, 390, 393, 410, 413, 430, 433, 442, 445, 479, 482, 499, 502, 539, 540, 546, 549, 550, 553, 566, 569, 582, 585, 609, 637, 644, 645, 659, 665, 666, 667, 668, 673, 674, 683, 685, 688, 690, 692, 703, 705, 707, 709, 721, 727, 729, 730, 732, 733, 734, 743, 745, 746, 748, 762, 764, 806, 807, 810, 822, 836, 839, 840, 843, 848, 851, 856, 859, 870, 873, 882, 883, 884, 885, 886, 887, 889, 895, 896, 897, 899, 904, 905, 908, 921, 922, 923, 924, 926, 927, 946, 947, 950, 979, 980, 983, 990], "ivy_jax": [0, 5], "subsequ": [0, 6, 150, 157, 159, 160, 163, 167, 168, 174], "call": [0, 6, 12, 15, 18, 64, 69, 70, 125, 136, 137, 138, 141, 145, 153, 155, 156, 157, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 172, 173, 174, 175, 187, 321, 365, 609, 664, 669, 680, 683, 694, 886, 887, 892, 896, 897], "nativ": [0, 6, 21, 23, 24, 25, 67, 68, 114, 115, 165, 167, 172, 173, 213, 253, 256, 284, 288, 289, 298, 321, 337, 338, 339, 340, 341, 360, 367, 370, 609, 653, 655, 658], "native_arrai": [0, 6, 12, 26, 27, 34, 35, 72, 73, 80, 81, 198, 200, 201, 202, 203, 204, 207, 209, 213, 248, 251, 284, 293, 296, 321, 343, 359, 371, 372, 375, 390, 393, 410, 413, 430, 433, 434, 437, 467, 470, 479, 482, 499, 502, 539, 540, 546, 549, 550, 553, 582, 585, 586, 589, 600, 604, 609, 610, 611, 612, 613, 614, 618, 626, 627, 634, 637, 638, 641, 672, 677, 678, 679, 683, 685, 688, 721, 724, 727, 728, 733, 734, 740, 742, 743, 745, 746, 748, 791, 793, 806, 807, 810, 817, 820, 822, 823, 826, 836, 839, 840, 843, 848, 851, 861, 870, 873, 904, 905, 908, 909, 910, 921, 922, 923, 924, 925, 926, 927, 928, 932, 946, 947, 950, 951, 954, 979, 980, 983], "1": [0, 6, 12, 15, 16, 28, 29, 32, 33, 34, 35, 36, 37, 42, 43, 44, 45, 46, 47, 48, 49, 54, 55, 56, 57, 64, 67, 68, 69, 70, 72, 73, 74, 75, 78, 79, 80, 81, 82, 83, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 100, 101, 102, 103, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 145, 147, 148, 153, 157, 160, 164, 167, 168, 169, 170, 172, 173, 174, 175, 187, 198, 200, 201, 202, 203, 209, 213, 214, 215, 216, 237, 240, 242, 243, 245, 246, 248, 251, 258, 259, 261, 264, 279, 283, 284, 290, 293, 294, 295, 296, 297, 304, 321, 325, 328, 330, 335, 340, 341, 343, 345, 349, 353, 355, 358, 359, 366, 371, 372, 373, 374, 375, 377, 380, 381, 384, 385, 386, 387, 388, 389, 390, 393, 402, 405, 410, 413, 414, 417, 426, 429, 430, 433, 434, 435, 436, 437, 438, 441, 442, 445, 459, 462, 463, 466, 467, 468, 469, 470, 475, 478, 479, 482, 495, 498, 499, 502, 503, 506, 507, 510, 511, 514, 515, 518, 539, 540, 546, 549, 550, 553, 558, 561, 566, 569, 570, 573, 574, 577, 582, 585, 586, 589, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 609, 610, 611, 612, 613, 614, 617, 618, 626, 627, 634, 637, 638, 639, 640, 641, 642, 656, 662, 665, 666, 671, 672, 674, 677, 678, 679, 681, 683, 685, 686, 687, 688, 689, 721, 722, 723, 724, 725, 726, 727, 728, 729, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 745, 746, 747, 748, 755, 757, 766, 768, 772, 774, 782, 784, 785, 787, 791, 793, 794, 796, 797, 798, 799, 800, 802, 806, 807, 810, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 831, 836, 839, 840, 843, 844, 847, 848, 851, 852, 855, 856, 857, 858, 859, 860, 861, 862, 865, 866, 869, 870, 873, 886, 898, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 950, 951, 954, 967, 970, 971, 974, 975, 978, 979, 980, 983, 985, 988, 990], "type": [0, 6, 12, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 32, 33, 34, 35, 36, 37, 42, 43, 44, 45, 46, 47, 48, 49, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 75, 78, 79, 80, 81, 82, 83, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 150, 152, 154, 155, 156, 157, 162, 163, 164, 166, 167, 168, 170, 172, 173, 175, 188, 189, 190, 191, 192, 193, 194, 195, 196, 198, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 316, 320, 321, 337, 338, 339, 340, 341, 343, 353, 354, 355, 356, 357, 358, 359, 360, 362, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 612, 613, 614, 615, 617, 618, 620, 621, 622, 624, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 644, 645, 646, 648, 649, 651, 652, 653, 655, 656, 657, 658, 662, 665, 666, 667, 668, 671, 673, 674, 675, 677, 678, 679, 681, 682, 683, 685, 686, 687, 688, 689, 690, 692, 693, 695, 697, 698, 699, 700, 701, 702, 703, 705, 706, 707, 709, 710, 711, 712, 713, 714, 716, 718, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 892, 896, 897, 898, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990], "ndarrai": [0, 6, 163, 165, 166, 167, 168, 172, 213, 217, 220, 253, 256, 609, 678], "Or": [0, 6, 173], "jaxlib": [0, 6, 150, 165, 166, 168, 172], "xla_extens": [0, 6, 165, 166, 168, 172], "devicearrai": [0, 6, 172], "try_import_ivy_jax": 0, "warn": [0, 7, 8, 9, 10, 11], "fals": [0, 7, 8, 9, 10, 11, 18, 21, 22, 23, 24, 25, 34, 35, 42, 43, 56, 57, 58, 59, 60, 61, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 114, 115, 137, 138, 141, 142, 143, 144, 145, 146, 157, 164, 167, 173, 174, 175, 204, 206, 208, 214, 216, 217, 219, 221, 223, 225, 227, 228, 230, 231, 233, 235, 237, 239, 241, 242, 244, 245, 247, 248, 250, 252, 253, 255, 257, 258, 260, 261, 263, 265, 266, 267, 269, 271, 272, 274, 276, 277, 279, 280, 282, 284, 290, 293, 295, 296, 297, 302, 321, 340, 341, 352, 356, 357, 360, 365, 368, 370, 371, 372, 374, 376, 377, 379, 381, 383, 385, 387, 389, 390, 392, 394, 396, 398, 400, 402, 404, 406, 408, 410, 412, 413, 414, 416, 418, 420, 422, 424, 426, 428, 430, 432, 434, 436, 438, 440, 442, 444, 446, 448, 450, 451, 453, 455, 457, 459, 461, 463, 465, 467, 469, 471, 473, 475, 477, 478, 479, 481, 482, 483, 485, 486, 487, 489, 490, 491, 493, 494, 495, 497, 498, 499, 501, 502, 503, 505, 507, 509, 511, 513, 515, 517, 519, 521, 523, 525, 527, 529, 530, 531, 533, 534, 535, 537, 541, 543, 545, 546, 548, 550, 552, 553, 554, 556, 558, 560, 562, 564, 566, 568, 570, 572, 574, 576, 578, 580, 582, 584, 586, 588, 590, 591, 593, 595, 596, 598, 600, 601, 603, 605, 607, 609, 610, 611, 612, 613, 614, 617, 618, 622, 623, 627, 630, 634, 636, 638, 640, 642, 646, 653, 655, 656, 658, 659, 671, 681, 683, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 734, 735, 736, 737, 738, 739, 758, 760, 762, 763, 764, 785, 787, 800, 801, 802, 807, 809, 811, 812, 814, 816, 817, 819, 821, 822, 823, 825, 827, 828, 830, 832, 834, 836, 838, 840, 842, 844, 846, 848, 850, 852, 854, 856, 858, 860, 861, 862, 864, 866, 868, 870, 872, 874, 876, 878, 880, 882, 883, 884, 885, 886, 887, 888, 892, 896, 897, 898, 899, 905, 907, 909, 910, 915, 916, 918, 921, 922, 923, 925, 926, 927, 928, 929, 931, 932, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 949, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989], "try_import_ivy_mxnet": 0, "try_import_ivy_numpi": 0, "try_import_ivy_tf": 0, "try_import_ivy_torch": 0, "unset_backend": [0, 161], "unset": [0, 12, 161, 170, 172], "adjust": [0, 12, 946, 967, 970, 975, 978], "dict": [0, 12, 21, 22, 23, 24, 25, 64, 67, 68, 69, 70, 71, 164, 173, 174, 321, 330, 331, 340, 343, 346, 347, 348, 349, 609, 615, 631, 632, 633, 886, 888, 889, 892, 895, 898, 899], "previous": [0, 12, 150, 153, 159, 160, 170, 609, 620], "otherwis": [0, 12, 18, 21, 22, 23, 24, 25, 64, 67, 68, 163, 165, 166, 168, 170, 172, 213, 214, 215, 284, 290, 293, 296, 299, 300, 301, 321, 340, 371, 483, 486, 487, 490, 491, 494, 609, 619, 680, 683, 699, 701, 716, 734, 735, 738, 743, 745, 797, 799, 800, 802, 882, 883, 884, 886, 899, 921, 922, 923, 925, 946, 951, 954, 955, 958, 959, 962, 963, 966, 967, 970, 971, 974, 975, 978, 979, 980, 983, 985, 988], "implement": [0, 12, 18, 64, 152, 156, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 172, 173, 174, 175, 186, 187, 284, 290, 312, 321, 366, 371, 372, 375, 377, 380, 381, 384, 390, 393, 394, 397, 398, 401, 402, 405, 438, 441, 442, 445, 459, 462, 463, 466, 503, 506, 507, 510, 511, 514, 515, 518, 541, 544, 558, 561, 562, 565, 574, 577, 578, 581, 595, 599, 600, 604, 734, 749, 751, 926, 927, 928, 932, 934, 935, 936, 939, 941, 944, 946, 951, 954, 955, 958, 959, 962, 990], "wa": [0, 12, 15, 67, 68, 157, 170, 172, 609, 680, 886, 899, 946, 951, 954, 955, 958, 959, 962, 963, 966, 967, 970, 971, 974, 975, 978, 979, 980, 983, 985, 988], "last": [0, 12, 16, 64, 67, 68, 125, 135, 151, 157, 161, 187, 198, 203, 321, 340, 721, 731, 734, 740, 742, 746, 748, 762, 764, 794, 796, 797, 799, 806, 812, 815, 817, 820, 822, 840, 843, 856, 859, 861, 866, 869, 935, 936, 939, 941, 944, 979, 980, 983, 985, 988], "henc": [0, 12, 926, 927, 928, 932, 934], "here": [0, 12, 150, 151, 152, 155, 157, 164, 168, 170, 171, 172, 173, 174, 175, 186, 187], "tensor": [0, 12, 14, 67, 68, 125, 133, 135, 155, 160, 161, 163, 165, 166, 167, 168, 170, 172, 173, 174, 175, 187, 213, 242, 243, 245, 246, 284, 302, 371, 410, 413, 539, 540, 609, 662, 665, 666, 721, 729, 731, 734, 791, 793, 822, 836, 839, 852, 855, 861, 909, 910, 921, 924, 990], "howev": [0, 12, 15, 150, 152, 156, 159, 160, 161, 163, 164, 165, 166, 167, 168, 172, 173, 174, 175, 187], "befor": [0, 12, 67, 68, 150, 151, 152, 156, 159, 163, 165, 166, 167, 170, 173, 187, 321, 365, 371, 605, 608, 721, 732, 733, 882, 883, 884, 886, 898, 926, 927, 928, 932, 934, 946, 963, 966, 971, 974], "becom": [0, 12, 14, 16, 151, 157, 164, 170, 175, 187, 822, 823, 826], "swap": [0, 12, 822, 870, 873], "python": [0, 12, 13, 14, 15, 150, 151, 153, 170, 172, 173, 187, 213, 214, 215, 321, 360, 370, 371, 562, 565, 990, 996], "framework": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 14, 15, 16, 20, 21, 22, 23, 24, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 66, 67, 68, 70, 71, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99, 101, 103, 105, 107, 109, 112, 113, 114, 115, 117, 118, 119, 120, 121, 122, 123, 124, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 138, 140, 141, 142, 143, 144, 145, 146, 148, 154, 158, 160, 161, 162, 163, 166, 168, 169, 172, 175, 186, 187, 189, 190, 191, 192, 193, 194, 195, 196, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 883, 884, 885, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 905, 906, 907, 908, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 922, 923, 924, 925, 927, 928, 929, 930, 931, 932, 933, 934, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 994, 995, 996, 997, 999], "op": [0, 12, 155, 170, 187], "eagertensor": [0, 12], "def": [1, 117, 120, 123, 152, 155, 157, 160, 164, 165, 166, 167, 168, 170, 172, 173, 174, 175, 285, 286, 287, 322, 329, 332, 684, 990], "support": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 14, 15, 16, 20, 22, 23, 24, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 66, 67, 68, 70, 71, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99, 101, 103, 105, 107, 109, 112, 113, 115, 117, 118, 119, 120, 121, 122, 123, 124, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 138, 140, 141, 142, 143, 144, 145, 146, 148, 156, 157, 160, 162, 163, 164, 165, 166, 167, 168, 169, 170, 172, 173, 175, 189, 190, 191, 192, 193, 194, 195, 196, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 211, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 883, 884, 885, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 905, 906, 907, 908, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 922, 923, 924, 925, 927, 928, 929, 930, 931, 932, 933, 934, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 994, 995, 996, 997, 999], "backend": [4, 5, 6, 12, 14, 21, 23, 25, 67, 68, 114, 115, 141, 142, 143, 144, 145, 146, 151, 152, 154, 156, 158, 159, 160, 162, 163, 164, 165, 166, 167, 168, 171, 172, 175, 284, 305, 306, 308, 320, 321, 356, 358, 368, 609, 650, 653, 654, 660, 683, 690, 692, 695, 697, 703, 705, 707, 709, 711, 713, 719, 990, 996], "ml": [13, 15, 16, 149, 169, 170, 171, 173, 174, 175, 186, 990, 996], "explos": [13, 15, 990], "A": [13, 14, 15, 16, 67, 68, 69, 70, 71, 147, 148, 153, 154, 159, 160, 164, 165, 166, 170, 173, 187, 213, 228, 229, 253, 256, 321, 330, 331, 365, 371, 554, 557, 609, 645, 677, 734, 772, 774, 781, 782, 784, 785, 787, 822, 861, 866, 869, 886, 887, 889, 891, 893, 894, 895, 896, 897, 900, 901, 902, 903, 946, 947, 950, 979, 980, 983, 985, 988, 990], "huge": [13, 15, 173, 990], "number": [13, 14, 67, 68, 69, 70, 71, 125, 126, 127, 128, 129, 130, 131, 132, 134, 135, 136, 150, 157, 164, 166, 167, 170, 173, 175, 210, 211, 212, 213, 214, 215, 217, 220, 228, 229, 242, 243, 245, 246, 248, 251, 253, 256, 284, 291, 303, 304, 307, 309, 310, 312, 321, 357, 358, 359, 371, 385, 388, 402, 405, 434, 437, 467, 470, 471, 474, 539, 540, 541, 544, 558, 561, 562, 565, 566, 569, 570, 573, 605, 608, 609, 610, 613, 636, 645, 646, 661, 679, 682, 721, 732, 734, 746, 748, 749, 751, 766, 768, 781, 785, 787, 797, 799, 822, 823, 826, 832, 835, 844, 847, 848, 851, 856, 859, 861, 866, 869, 874, 877, 878, 881, 882, 883, 884, 885, 909, 910, 919, 921, 924, 926, 927, 928, 932, 946, 951, 954, 955, 958, 959, 962, 963, 966, 967, 970, 971, 974, 975, 978, 979, 980, 983, 985, 988, 990], "tool": [13, 16, 151, 171, 175, 186, 187, 990], "have": [13, 14, 15, 16, 67, 68, 150, 151, 152, 153, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 186, 187, 198, 199, 200, 201, 202, 203, 204, 207, 209, 213, 214, 215, 217, 220, 222, 223, 226, 228, 229, 231, 234, 236, 237, 240, 242, 243, 245, 246, 248, 251, 258, 259, 261, 264, 266, 270, 271, 275, 276, 278, 279, 283, 284, 290, 291, 292, 304, 321, 366, 371, 372, 375, 377, 380, 381, 384, 385, 388, 390, 393, 394, 397, 398, 401, 402, 405, 406, 409, 410, 413, 414, 417, 418, 421, 422, 425, 426, 429, 430, 433, 434, 437, 438, 441, 442, 445, 446, 449, 451, 454, 455, 458, 459, 462, 463, 466, 467, 470, 471, 474, 475, 478, 479, 482, 483, 486, 487, 490, 491, 494, 495, 498, 499, 502, 503, 506, 507, 510, 511, 514, 515, 518, 519, 522, 523, 526, 527, 530, 531, 534, 535, 538, 539, 540, 541, 544, 546, 549, 550, 553, 554, 557, 558, 561, 562, 565, 566, 569, 570, 573, 574, 577, 578, 581, 582, 585, 586, 589, 590, 594, 595, 599, 600, 604, 605, 608, 609, 621, 622, 624, 627, 631, 632, 633, 635, 638, 641, 649, 662, 665, 666, 683, 699, 701, 716, 719, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 732, 733, 734, 735, 738, 740, 742, 743, 745, 746, 748, 749, 751, 752, 754, 755, 757, 758, 761, 762, 764, 766, 768, 769, 771, 772, 774, 775, 777, 778, 780, 781, 782, 784, 785, 787, 788, 790, 791, 793, 794, 796, 797, 799, 800, 802, 803, 805, 806, 807, 810, 812, 815, 817, 820, 822, 823, 826, 828, 831, 832, 835, 836, 839, 840, 843, 844, 847, 848, 851, 852, 855, 856, 859, 862, 865, 866, 869, 870, 873, 874, 877, 878, 881, 904, 905, 908, 909, 910, 911, 912, 914, 915, 917, 920, 921, 922, 923, 924, 925, 926, 927, 928, 932, 934, 935, 936, 939, 941, 944, 946, 951, 954, 955, 958, 959, 962, 963, 966, 967, 970, 971, 974, 975, 978, 979, 980, 983, 985, 988, 990], "explod": [13, 14, 990], "onto": [13, 14, 321, 350, 351, 886, 892, 898, 990], "scene": [13, 14, 154, 169, 171, 683, 690, 692, 695, 697, 703, 705, 707, 709, 711, 713, 990], "b": [13, 16, 69, 70, 74, 75, 78, 79, 80, 81, 82, 83, 88, 89, 92, 93, 96, 97, 100, 101, 149, 154, 157, 160, 161, 164, 169, 170, 171, 173, 174, 175, 185, 284, 293, 295, 296, 297, 321, 343, 371, 372, 374, 375, 376, 385, 387, 388, 389, 390, 393, 410, 413, 430, 433, 434, 436, 437, 442, 445, 467, 469, 470, 479, 482, 499, 502, 546, 549, 550, 553, 566, 569, 582, 585, 586, 589, 595, 596, 598, 599, 600, 601, 603, 604, 609, 610, 612, 613, 614, 617, 618, 626, 627, 634, 637, 638, 640, 641, 642, 679, 683, 685, 687, 688, 689, 721, 724, 727, 728, 733, 734, 735, 737, 738, 739, 740, 742, 743, 745, 746, 748, 772, 774, 782, 784, 791, 793, 803, 805, 806, 807, 810, 822, 823, 825, 826, 827, 836, 839, 840, 843, 848, 851, 856, 858, 859, 860, 866, 869, 870, 873, 904, 905, 908, 909, 911, 913, 914, 915, 917, 921, 923, 924, 925, 926, 928, 929, 931, 932, 935, 936, 939, 946, 947, 950, 951, 954, 979, 980, 983, 990, 996], "why": [13, 15, 151, 164, 167, 168, 172, 990], "unifi": [13, 15, 67, 68, 163, 170, 187, 321, 350, 351, 352, 353, 365, 990], "should": [13, 15, 18, 64, 67, 68, 69, 70, 71, 108, 109, 150, 151, 152, 153, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 172, 173, 174, 210, 211, 213, 248, 251, 266, 270, 271, 275, 284, 292, 321, 371, 372, 375, 377, 380, 381, 384, 385, 388, 390, 393, 394, 397, 398, 401, 402, 405, 406, 409, 410, 413, 414, 417, 418, 421, 422, 425, 426, 429, 430, 433, 434, 437, 438, 441, 442, 445, 446, 449, 459, 462, 463, 466, 467, 470, 483, 486, 487, 490, 491, 494, 495, 498, 503, 506, 507, 510, 515, 518, 519, 522, 523, 526, 527, 530, 531, 534, 535, 538, 541, 544, 550, 553, 558, 561, 562, 565, 570, 573, 574, 577, 578, 581, 582, 585, 586, 589, 590, 594, 595, 599, 600, 604, 605, 608, 609, 620, 653, 662, 683, 690, 692, 695, 697, 703, 705, 707, 709, 711, 713, 721, 733, 734, 735, 738, 740, 742, 743, 745, 746, 748, 755, 757, 758, 761, 766, 768, 772, 774, 775, 777, 778, 780, 782, 784, 785, 787, 791, 793, 794, 796, 797, 799, 800, 802, 822, 852, 855, 909, 920, 921, 922, 923, 926, 927, 928, 932, 934, 946, 947, 950, 951, 954, 955, 958, 963, 966, 967, 970, 971, 974, 975, 978, 990], "them": [13, 14, 15, 16, 159, 161, 163, 164, 170, 172, 173, 174, 187, 990], "c": [13, 15, 16, 96, 97, 149, 154, 157, 160, 164, 169, 170, 171, 173, 187, 371, 550, 553, 609, 617, 618, 626, 679, 683, 685, 688, 690, 692, 695, 697, 703, 705, 707, 709, 711, 713, 721, 727, 822, 866, 869, 911, 913, 921, 924, 946, 947, 950, 967, 970, 975, 978, 990, 996], "standard": [13, 18, 139, 140, 154, 155, 156, 158, 159, 163, 167, 168, 187, 213, 214, 215, 217, 220, 222, 223, 226, 228, 229, 231, 234, 236, 237, 240, 242, 243, 248, 251, 258, 259, 261, 264, 266, 270, 271, 275, 276, 278, 279, 283, 284, 293, 296, 304, 371, 372, 375, 385, 388, 390, 393, 410, 413, 430, 433, 434, 437, 442, 445, 467, 470, 499, 502, 550, 553, 566, 569, 582, 585, 586, 589, 595, 599, 600, 604, 734, 743, 745, 746, 748, 822, 836, 839, 840, 843, 856, 859, 904, 905, 908, 909, 914, 926, 927, 928, 932, 935, 936, 939, 946, 951, 954, 967, 970, 975, 978, 979, 980, 983, 990, 996], "re": [13, 14, 15, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 172, 175, 187, 321, 365, 609, 631, 734, 791, 793, 822, 856, 859, 921, 925, 990], "collabor": [13, 14, 15, 990], "consortium": [13, 15, 990, 996], "data": [13, 15, 67, 68, 69, 70, 71, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 154, 155, 156, 160, 162, 164, 166, 167, 168, 172, 213, 214, 215, 217, 220, 222, 223, 226, 228, 229, 231, 234, 236, 237, 240, 242, 243, 248, 251, 253, 256, 258, 259, 261, 264, 266, 270, 271, 275, 276, 278, 279, 283, 288, 289, 290, 292, 293, 296, 298, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 316, 320, 321, 323, 324, 325, 326, 327, 328, 333, 334, 335, 337, 371, 372, 375, 377, 380, 381, 384, 385, 388, 390, 393, 394, 397, 398, 401, 402, 405, 406, 409, 410, 413, 414, 417, 418, 421, 422, 425, 426, 429, 430, 433, 434, 437, 438, 441, 442, 445, 446, 449, 451, 454, 459, 462, 463, 466, 467, 470, 471, 474, 475, 478, 479, 482, 483, 486, 487, 490, 491, 494, 495, 498, 499, 502, 503, 506, 507, 510, 515, 518, 519, 522, 523, 526, 527, 530, 531, 534, 535, 538, 541, 544, 550, 553, 558, 561, 562, 565, 570, 573, 574, 577, 578, 581, 582, 585, 586, 589, 590, 594, 595, 599, 600, 604, 605, 608, 609, 617, 618, 655, 656, 658, 675, 683, 699, 701, 719, 721, 730, 734, 735, 738, 740, 742, 743, 745, 746, 748, 749, 751, 752, 754, 755, 757, 758, 761, 766, 768, 769, 771, 772, 774, 775, 777, 778, 780, 782, 784, 785, 787, 791, 793, 794, 796, 797, 799, 800, 802, 822, 836, 839, 840, 843, 844, 847, 852, 855, 856, 859, 862, 865, 866, 869, 909, 920, 921, 922, 923, 924, 935, 936, 939, 946, 951, 954, 955, 958, 959, 962, 963, 966, 967, 970, 971, 974, 975, 978, 979, 980, 983, 985, 988, 990, 996], "api": [13, 14, 150, 151, 154, 156, 157, 159, 160, 162, 163, 165, 166, 167, 168, 169, 171, 173, 187, 213, 214, 215, 217, 220, 222, 223, 226, 228, 229, 231, 234, 236, 237, 240, 242, 243, 248, 251, 258, 259, 261, 264, 266, 270, 271, 275, 276, 278, 279, 283, 284, 293, 296, 371, 372, 375, 385, 388, 390, 393, 410, 413, 430, 433, 434, 437, 442, 445, 467, 470, 499, 502, 550, 553, 566, 569, 582, 585, 586, 589, 595, 599, 600, 604, 734, 743, 745, 746, 748, 822, 836, 839, 840, 843, 856, 859, 926, 927, 928, 932, 935, 936, 939, 946, 951, 954, 979, 980, 983, 990, 996], "open": [14, 15, 16, 149, 150, 153, 156, 186, 213, 214, 215, 909, 911, 912, 915, 917, 990], "project": [14, 15, 16, 150, 151, 153, 155, 161, 172, 174, 186, 187, 909, 910, 914], "grown": 14, "consider": [14, 157, 168], "recent": [14, 15, 150, 151], "year": [14, 16, 187, 990], "especi": [14, 150], "deep": [14, 67, 68, 149, 151, 152, 169, 173, 990], "learn": [14, 15, 141, 142, 143, 144, 145, 146, 150, 152, 154, 160, 169, 175, 186, 371, 475, 478, 683, 690, 692, 695, 697, 703, 705, 707, 709, 711, 713, 882, 883, 884, 885, 990], "can": [14, 15, 16, 18, 64, 149, 150, 151, 154, 155, 156, 157, 158, 159, 160, 161, 164, 165, 166, 167, 168, 169, 170, 172, 173, 174, 175, 186, 187, 213, 217, 220, 253, 256, 284, 293, 296, 321, 363, 364, 365, 734, 755, 757, 822, 852, 855, 909, 911, 912, 990, 996], "seen": [14, 15, 157, 172, 173], "rapidli": 14, "increas": [14, 321, 345, 349, 353, 822, 832, 835, 878, 881, 886, 898], "github": [14, 151, 152, 156, 159], "repo": [14, 15, 16, 150, 151, 158, 170, 172, 173, 174, 175, 186, 990, 996], "contain": [14, 21, 24, 25, 34, 35, 65, 66, 67, 68, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 125, 126, 127, 128, 129, 130, 131, 132, 134, 135, 136, 137, 138, 141, 145, 147, 148, 150, 151, 152, 153, 154, 156, 157, 159, 160, 165, 167, 168, 169, 170, 171, 174, 175, 187, 198, 201, 202, 204, 207, 213, 214, 215, 217, 220, 222, 223, 226, 228, 229, 231, 234, 236, 237, 240, 242, 243, 245, 246, 248, 251, 253, 258, 259, 261, 264, 266, 270, 271, 275, 276, 278, 279, 283, 284, 293, 296, 321, 342, 343, 346, 355, 359, 371, 372, 375, 377, 380, 381, 384, 385, 388, 390, 393, 394, 397, 398, 401, 402, 405, 406, 409, 410, 413, 414, 417, 418, 421, 422, 425, 426, 429, 430, 433, 434, 437, 438, 441, 442, 445, 446, 449, 451, 454, 455, 459, 462, 463, 466, 467, 470, 471, 474, 475, 478, 479, 482, 483, 486, 487, 490, 491, 494, 495, 498, 499, 502, 503, 506, 507, 510, 511, 514, 515, 518, 519, 522, 523, 526, 527, 530, 531, 534, 535, 538, 539, 540, 541, 544, 546, 549, 550, 553, 554, 558, 561, 562, 565, 566, 569, 570, 573, 574, 577, 578, 581, 582, 585, 586, 589, 590, 594, 595, 599, 600, 604, 605, 608, 609, 610, 611, 613, 615, 618, 621, 622, 624, 626, 627, 634, 637, 638, 641, 648, 657, 677, 678, 679, 683, 685, 688, 690, 695, 699, 703, 707, 711, 721, 724, 727, 728, 733, 734, 735, 738, 740, 742, 743, 745, 746, 748, 749, 751, 752, 754, 755, 757, 758, 761, 766, 768, 769, 771, 772, 774, 775, 777, 778, 780, 782, 784, 785, 787, 788, 790, 791, 793, 794, 796, 797, 799, 800, 802, 806, 807, 810, 812, 815, 817, 820, 822, 823, 826, 828, 832, 836, 839, 840, 843, 844, 847, 848, 851, 852, 856, 859, 861, 862, 866, 870, 873, 874, 878, 882, 883, 884, 885, 886, 899, 904, 905, 908, 909, 910, 911, 914, 915, 917, 921, 922, 923, 924, 925, 926, 927, 928, 932, 934, 935, 936, 939, 941, 946, 947, 950, 951, 954, 955, 958, 959, 962, 963, 966, 967, 970, 971, 974, 975, 978, 979, 980, 983, 985, 988, 990], "term": [14, 125, 135, 151, 164, 721, 731], "time": [14, 15, 16, 125, 136, 137, 138, 150, 151, 152, 159, 160, 164, 165, 168, 170, 173, 175, 187, 683, 690, 692, 703, 705, 721, 731, 822, 874, 877, 882, 883, 884, 885, 921, 922, 923, 926, 927, 928, 932], "These": [14, 15, 16, 151, 156, 157, 159, 160, 164, 165, 167, 168, 170, 171, 173, 174, 175, 187, 734, 749, 751, 990, 996], "ar": [14, 15, 16, 21, 22, 23, 64, 67, 68, 69, 70, 71, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 186, 187, 188, 196, 213, 214, 215, 321, 330, 331, 355, 359, 361, 365, 371, 438, 441, 527, 530, 531, 534, 566, 569, 574, 577, 595, 599, 609, 610, 613, 617, 618, 619, 643, 649, 650, 654, 661, 663, 675, 721, 730, 734, 740, 742, 758, 761, 762, 764, 766, 768, 775, 777, 785, 787, 788, 790, 797, 799, 822, 823, 826, 840, 843, 856, 859, 886, 888, 892, 898, 909, 914, 915, 917, 921, 922, 923, 924, 926, 927, 990], "written": [14, 150, 155, 156, 163, 167, 168, 170, 172, 175, 187], "mani": [14, 15, 16, 67, 68, 150, 151, 152, 156, 157, 160, 162, 163, 164, 165, 166, 167, 168, 170, 172, 173, 187, 822, 861], "differ": [14, 15, 16, 67, 68, 69, 70, 71, 150, 151, 154, 155, 156, 157, 159, 160, 163, 164, 166, 167, 168, 170, 171, 172, 173, 174, 175, 187, 284, 304, 321, 342, 343, 346, 347, 371, 385, 388, 541, 544, 590, 594, 721, 730, 822, 866, 869, 946, 963, 966, 971, 974, 990], "while": [14, 15, 67, 68, 69, 70, 71, 150, 151, 157, 161, 167, 174, 175, 187, 371, 527, 530, 531, 534, 926, 927, 946, 955, 958], "thi": [14, 15, 16, 18, 19, 20, 26, 27, 28, 29, 32, 33, 34, 35, 36, 37, 42, 43, 46, 47, 54, 55, 64, 65, 66, 67, 68, 69, 70, 71, 74, 75, 78, 79, 80, 81, 82, 83, 88, 89, 92, 93, 96, 97, 100, 101, 137, 138, 141, 142, 143, 144, 145, 146, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 186, 187, 204, 205, 206, 208, 213, 214, 215, 217, 218, 220, 222, 223, 224, 226, 228, 229, 231, 232, 234, 236, 237, 238, 240, 242, 243, 245, 246, 248, 251, 253, 254, 256, 258, 259, 261, 262, 264, 266, 268, 270, 271, 273, 275, 276, 278, 279, 281, 283, 284, 293, 294, 295, 296, 297, 321, 345, 349, 353, 360, 365, 370, 371, 372, 373, 374, 375, 376, 385, 386, 387, 388, 389, 390, 393, 410, 413, 426, 429, 430, 433, 434, 435, 436, 437, 442, 445, 463, 466, 467, 468, 469, 470, 499, 502, 527, 530, 531, 534, 550, 553, 562, 565, 566, 569, 582, 585, 586, 589, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 609, 610, 611, 612, 614, 636, 637, 638, 639, 640, 642, 653, 664, 669, 683, 685, 686, 687, 689, 690, 692, 695, 697, 699, 701, 703, 705, 707, 709, 711, 713, 719, 721, 724, 730, 733, 734, 735, 736, 737, 738, 739, 743, 745, 746, 748, 762, 764, 781, 822, 823, 824, 825, 827, 836, 839, 840, 843, 852, 855, 856, 857, 858, 859, 860, 866, 869, 886, 892, 898, 899, 904, 905, 908, 911, 913, 921, 922, 926, 927, 928, 929, 930, 931, 932, 934, 935, 936, 939, 946, 951, 954, 955, 958, 967, 970, 975, 978, 979, 980, 983, 990, 996], "wonder": [14, 16, 172], "thing": [14, 15, 16, 150, 151, 152, 161, 172, 173], "research": [14, 186], "develop": [14, 15, 16, 149, 150, 151, 152, 186, 187, 990], "also": [14, 15, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 32, 33, 34, 35, 36, 37, 42, 43, 46, 47, 54, 55, 65, 66, 67, 68, 74, 75, 78, 79, 80, 81, 82, 83, 88, 89, 92, 93, 96, 97, 100, 101, 125, 135, 149, 150, 151, 154, 155, 156, 157, 159, 160, 162, 163, 164, 165, 166, 167, 168, 170, 172, 173, 174, 175, 186, 187, 204, 205, 206, 208, 213, 214, 215, 217, 218, 220, 222, 223, 224, 226, 228, 229, 231, 232, 234, 236, 237, 238, 240, 242, 243, 245, 246, 248, 251, 253, 254, 258, 259, 261, 262, 264, 266, 268, 270, 271, 273, 275, 276, 278, 279, 281, 283, 284, 293, 294, 295, 296, 297, 371, 372, 373, 374, 375, 376, 385, 386, 387, 388, 389, 390, 393, 410, 413, 430, 433, 434, 435, 436, 437, 442, 445, 467, 468, 469, 470, 550, 553, 566, 569, 582, 585, 586, 589, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 609, 610, 611, 612, 614, 637, 638, 639, 640, 642, 653, 683, 685, 686, 687, 689, 690, 692, 721, 724, 730, 733, 734, 735, 736, 737, 738, 739, 743, 745, 746, 748, 822, 823, 824, 825, 827, 836, 839, 840, 843, 856, 857, 858, 859, 860, 882, 883, 884, 885, 886, 887, 888, 896, 897, 898, 904, 905, 908, 911, 913, 926, 927, 928, 929, 930, 931, 932, 935, 936, 939, 946, 951, 954, 979, 980, 983], "consid": [14, 15, 67, 68, 155, 160, 171, 172, 173, 371, 527, 530, 531, 534, 926, 927, 928, 932, 934], "speed": 14, "evolv": 14, "sharabl": 14, "code": [14, 15, 16, 67, 68, 69, 70, 71, 82, 83, 150, 151, 152, 153, 154, 156, 157, 160, 161, 162, 163, 164, 167, 168, 169, 170, 171, 172, 173, 174, 175, 185, 187, 198, 200, 201, 202, 203, 204, 207, 209, 321, 343, 366, 371, 430, 433, 586, 589, 683, 685, 687, 688, 689, 721, 727, 728, 926, 927, 928, 932, 935, 936, 939, 946, 947, 950, 990, 996], "significantli": 14, "hinder": [14, 168], "librari": [14, 15, 16, 170, 175, 185, 187, 321, 366, 371, 463, 466, 527, 530, 531, 534, 734, 749, 751, 926, 927, 928, 932, 934, 946, 951, 954, 955, 958, 959, 962, 990], "outdat": 14, "month": 14, "rigor": 14, "maintain": [14, 151, 935, 936, 939, 941, 944], "against": [14, 67, 68, 159, 187, 284, 291, 734, 758, 761, 762, 764, 766, 768, 775, 777, 921, 922], "newest": 14, "version": [14, 15, 16, 150, 156, 170, 172, 734, 749, 751, 990], "For": [14, 15, 16, 64, 114, 115, 150, 151, 152, 153, 154, 155, 156, 157, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 172, 173, 174, 175, 186, 187, 213, 214, 215, 248, 251, 371, 372, 375, 377, 380, 381, 384, 385, 388, 390, 393, 394, 397, 398, 401, 402, 405, 434, 437, 438, 441, 442, 445, 459, 462, 463, 466, 467, 470, 503, 506, 507, 510, 515, 518, 519, 522, 541, 544, 558, 561, 562, 565, 566, 569, 574, 577, 578, 581, 582, 585, 595, 599, 600, 604, 605, 608, 683, 699, 701, 719, 734, 785, 787, 794, 796, 822, 823, 826, 866, 869, 926, 927, 928, 932, 934, 946, 951, 954, 959, 962, 971, 974], "softwar": [14, 15, 150, 151], "pipelin": [14, 163, 175], "where": [14, 15, 16, 67, 68, 69, 70, 149, 150, 151, 152, 153, 156, 160, 161, 163, 164, 165, 166, 167, 170, 173, 174, 175, 187, 213, 236, 237, 240, 248, 251, 371, 402, 405, 459, 462, 511, 514, 541, 544, 558, 561, 609, 649, 653, 662, 734, 749, 751, 766, 768, 775, 777, 778, 780, 785, 787, 788, 790, 794, 796, 797, 799, 822, 823, 826, 832, 835, 836, 839, 844, 847, 866, 869, 878, 881, 886, 887, 897, 909, 910, 921, 924, 946, 967, 970, 975, 978, 979, 980, 983, 985, 988, 990], "rapid": [14, 15, 150], "prototyp": 14, "vital": [14, 175], "signific": [14, 15, 187], "bottleneck": 14, "As": [14, 62, 63, 108, 109, 151, 159, 160, 163, 164, 165, 166, 167, 168, 170, 172, 173, 174, 187, 926, 927, 928, 932, 934], "new": [14, 15, 16, 18, 64, 67, 68, 114, 115, 125, 135, 139, 140, 141, 142, 143, 144, 145, 146, 149, 150, 151, 152, 153, 154, 155, 156, 157, 159, 162, 164, 165, 167, 169, 172, 175, 186, 213, 222, 231, 234, 236, 237, 240, 258, 259, 261, 264, 276, 278, 279, 283, 284, 316, 371, 406, 409, 511, 514, 554, 557, 609, 631, 632, 633, 636, 637, 638, 641, 665, 666, 667, 668, 673, 674, 683, 690, 692, 695, 697, 703, 705, 707, 709, 711, 713, 822, 836, 839, 852, 855, 866, 869, 886, 891, 902, 903, 904, 905, 908, 990], "futur": [14, 16, 150, 151, 172, 187, 734, 749, 751], "avail": [14, 67, 68, 150, 151, 156, 166, 187, 321, 340, 356, 357, 358, 368, 609, 632], "specif": [14, 67, 68, 137, 138, 152, 160, 163, 164, 165, 166, 167, 168, 170, 171, 172, 174, 175, 186, 187, 284, 312, 321, 363, 366, 371, 527, 530, 531, 534, 609, 631, 632, 633, 660, 734, 749, 751, 791, 793, 822, 866, 869, 882, 883, 884, 885, 909, 910, 946, 951, 954, 955, 958, 959, 962, 990, 993, 995, 996], "quickli": [14, 16, 150, 151, 173, 174], "obsolet": [14, 16], "user": [14, 15, 125, 136, 137, 138, 150, 151, 153, 154, 159, 161, 164, 167, 169, 187], "constantli": 14, "invent": 14, "wheel": 14, "our": [14, 15, 62, 63, 108, 109, 149, 150, 151, 157, 164, 169, 172, 173, 174, 175, 187, 990], "desir": [14, 67, 68, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 284, 290, 293, 296, 321, 366, 609, 649], "provid": [14, 18, 64, 67, 68, 125, 126, 127, 128, 129, 130, 131, 132, 134, 135, 136, 141, 142, 143, 144, 145, 146, 150, 151, 156, 157, 160, 163, 164, 165, 166, 167, 168, 170, 174, 186, 187, 210, 211, 213, 248, 251, 284, 299, 300, 301, 308, 312, 320, 321, 340, 609, 630, 662, 666, 683, 690, 692, 695, 697, 703, 705, 707, 709, 711, 713, 734, 797, 799, 822, 840, 843, 866, 869, 921, 922, 946, 967, 970, 975, 978, 979, 980, 983, 985, 988], "simultan": [14, 16], "all": [14, 15, 16, 21, 22, 23, 24, 25, 60, 61, 62, 63, 64, 67, 68, 106, 107, 108, 109, 149, 150, 151, 152, 153, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 172, 173, 174, 175, 186, 187, 188, 196, 210, 211, 213, 214, 215, 266, 270, 271, 275, 321, 330, 355, 361, 609, 610, 613, 617, 618, 643, 663, 678, 721, 731, 734, 782, 784, 791, 793, 800, 802, 822, 840, 843, 856, 859, 882, 883, 884, 885, 886, 887, 888, 897, 898, 899, 909, 910, 915, 917, 979, 990, 993, 995], "modern": [14, 15], "simpl": [14, 150, 151, 155, 156, 157, 159, 160, 163, 164, 165, 166, 167, 170, 172, 174, 175, 187, 609, 634], "scalabl": [14, 170], "manner": [14, 21, 24, 25, 67, 68, 155, 156, 166, 173, 186, 187, 886, 898], "must": [14, 16, 67, 68, 69, 70, 71, 141, 145, 150, 151, 152, 155, 156, 157, 160, 163, 164, 165, 166, 168, 170, 174, 175, 198, 199, 200, 201, 202, 203, 204, 207, 209, 213, 214, 215, 217, 220, 222, 223, 226, 228, 229, 231, 234, 236, 237, 240, 242, 243, 245, 246, 248, 251, 258, 259, 261, 264, 266, 270, 271, 275, 276, 278, 279, 283, 284, 290, 291, 292, 321, 350, 351, 352, 353, 365, 366, 371, 372, 375, 377, 380, 381, 384, 385, 388, 390, 393, 394, 397, 398, 401, 402, 405, 406, 409, 410, 413, 414, 417, 418, 421, 422, 425, 426, 429, 430, 433, 434, 437, 438, 441, 442, 445, 446, 449, 451, 454, 455, 458, 459, 462, 463, 466, 467, 470, 471, 474, 475, 478, 479, 482, 483, 486, 487, 490, 491, 494, 495, 498, 499, 502, 503, 506, 507, 510, 511, 514, 515, 518, 519, 522, 523, 526, 527, 530, 531, 534, 535, 538, 539, 540, 541, 544, 546, 549, 550, 553, 554, 557, 558, 561, 562, 565, 566, 569, 570, 573, 574, 577, 578, 581, 582, 585, 586, 589, 590, 594, 595, 599, 600, 604, 605, 608, 609, 621, 622, 624, 627, 631, 632, 633, 635, 638, 641, 649, 662, 665, 666, 683, 716, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 732, 733, 734, 735, 738, 740, 742, 743, 745, 746, 748, 749, 751, 752, 754, 755, 757, 758, 761, 762, 764, 766, 768, 769, 771, 772, 774, 775, 777, 778, 780, 781, 782, 784, 785, 787, 788, 790, 791, 793, 794, 796, 797, 799, 800, 802, 803, 805, 806, 807, 810, 812, 815, 817, 820, 822, 823, 826, 828, 831, 832, 835, 836, 839, 840, 843, 844, 847, 848, 851, 852, 855, 856, 859, 862, 865, 866, 869, 870, 873, 874, 877, 878, 881, 904, 905, 908, 909, 910, 911, 912, 914, 915, 917, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 932, 934, 935, 936, 939, 941, 944, 946, 951, 954, 955, 958, 959, 962, 963, 966, 967, 970, 971, 974, 975, 978, 979, 980, 983, 985, 988], "determin": [14, 67, 68, 156, 160, 164, 165, 166, 284, 293, 296, 298, 303, 308, 309, 310, 320, 321, 356, 357, 358, 368, 371, 377, 380, 381, 384, 385, 388, 390, 393, 394, 397, 398, 401, 402, 405, 406, 409, 410, 413, 418, 421, 422, 425, 426, 429, 430, 433, 438, 441, 442, 445, 446, 449, 459, 462, 463, 466, 483, 486, 487, 490, 491, 494, 503, 506, 507, 510, 515, 518, 519, 522, 535, 538, 541, 544, 558, 561, 562, 565, 574, 577, 578, 581, 582, 585, 595, 599, 600, 604, 609, 610, 613, 617, 618, 648, 650, 654, 655, 656, 657, 658, 675, 682, 683, 699, 701, 721, 732, 734, 735, 738, 740, 742, 743, 745, 746, 748, 755, 757, 758, 761, 766, 768, 772, 774, 775, 777, 781, 782, 784, 794, 796, 797, 799, 800, 802, 882, 883, 884, 885, 926, 927, 928, 932, 934, 979, 980, 983, 985, 988], "exactli": [14, 16, 157, 164, 166, 990, 996], "common": [14, 67, 68, 152, 157, 160, 162, 164, 166, 187], "ground": [14, 159], "li": 14, "between": [14, 67, 68, 69, 70, 71, 141, 143, 157, 159, 160, 163, 164, 168, 169, 171, 172, 173, 175, 186, 213, 214, 215, 284, 304, 371, 402, 405, 558, 561, 806, 807, 810, 812, 815, 817, 820, 822, 836, 839, 866, 869, 886, 892, 909, 911, 912, 926, 927, 928, 932, 934, 990], "find": [14, 67, 68, 150, 151, 170, 173, 926, 927, 928, 932, 934, 990], "exist": [14, 15, 67, 68, 69, 70, 141, 145, 150, 152, 153, 156, 157, 158, 159, 160, 161, 162, 167, 170, 187, 609, 630], "essenti": [14, 15, 152, 157, 160, 166], "order": [14, 64, 67, 68, 69, 70, 71, 147, 148, 150, 151, 153, 156, 157, 161, 163, 164, 165, 166, 168, 172, 173, 175, 187, 371, 402, 405, 683, 690, 692, 695, 697, 703, 705, 707, 709, 711, 713, 734, 749, 751, 762, 764, 785, 787, 788, 790, 800, 802, 822, 840, 843, 882, 883, 884, 921, 924, 926, 927, 928, 932, 934, 935, 936, 939, 941, 944], "design": [14, 15, 154, 167, 170, 172, 187], "univers": 14, "abstract": [14, 18, 64, 141, 145, 164, 174, 187, 321, 336], "In": [14, 16, 64, 150, 151, 155, 156, 157, 160, 161, 164, 165, 166, 167, 168, 170, 172, 173, 174, 175, 186, 187, 321, 360, 366, 367, 370, 371, 385, 388, 541, 544, 562, 565, 609, 615, 653, 822, 852, 855, 909, 915, 917, 990], "search": [14, 21, 24, 25, 53, 67, 68, 99, 150, 155, 157, 159, 922, 923, 924, 925], "languag": [14, 16, 170], "first": [14, 15, 64, 125, 136, 137, 138, 141, 145, 150, 151, 153, 157, 160, 163, 164, 168, 170, 172, 173, 175, 210, 211, 213, 242, 243, 245, 246, 284, 311, 316, 321, 340, 352, 371, 385, 388, 410, 413, 418, 421, 422, 425, 426, 429, 430, 433, 451, 454, 471, 474, 479, 482, 495, 498, 499, 502, 519, 522, 523, 526, 531, 534, 535, 538, 541, 544, 550, 553, 558, 561, 590, 594, 609, 617, 683, 694, 734, 740, 742, 746, 748, 749, 751, 758, 761, 772, 774, 778, 780, 785, 787, 791, 793, 797, 799, 822, 828, 831, 856, 859, 866, 869, 870, 873, 882, 883, 884, 885, 886, 887, 896, 897, 909, 920, 921, 922, 923, 926, 927, 928, 932], "see": [14, 18, 64, 149, 150, 151, 152, 158, 160, 164, 166, 168, 172, 173, 186, 187, 213, 214, 215, 231, 234, 242, 243, 245, 246, 284, 292, 312, 371, 385, 388, 410, 413, 418, 421, 422, 425, 426, 429, 430, 433, 446, 449, 463, 466, 495, 498, 519, 522, 531, 534, 535, 538, 541, 544, 550, 553, 558, 561, 562, 565, 590, 594, 734, 766, 768, 775, 777, 782, 784, 797, 799, 800, 802, 921, 923, 926, 927, 928, 932, 934, 946, 951, 954, 955, 958, 959, 962, 963, 966, 967, 970, 971, 974, 975, 978, 979, 980, 983, 985, 988, 990], "clear": [14, 15, 16, 64, 151, 152, 157, 159, 165, 166, 170, 172, 321, 339], "front": [14, 169, 170, 173, 990, 996], "runner": 14, "look": [14, 150, 151, 153, 155, 157, 160, 161, 164, 165, 166, 168, 170, 172, 174, 175, 990], "littl": [14, 172], "deeper": [14, 151, 154, 169, 321, 345, 349, 353, 886, 897, 898], "follow": [14, 15, 64, 67, 68, 125, 135, 141, 145, 150, 151, 152, 153, 155, 156, 157, 159, 161, 163, 164, 165, 166, 167, 169, 170, 172, 173, 174, 175, 187, 284, 307, 321, 365, 371, 562, 565, 609, 651, 652, 653, 673, 674, 683, 690, 692, 695, 697, 703, 705, 707, 709, 711, 713, 721, 732, 733, 734, 778, 780, 800, 802, 886, 892, 898, 926, 927, 928, 932, 934, 990], "same": [14, 16, 21, 22, 23, 67, 68, 125, 126, 127, 128, 129, 130, 131, 132, 150, 151, 153, 155, 157, 159, 160, 163, 164, 166, 167, 168, 170, 172, 174, 175, 213, 214, 215, 223, 226, 237, 240, 248, 251, 261, 264, 266, 270, 271, 275, 279, 283, 284, 290, 291, 292, 321, 330, 331, 365, 371, 372, 375, 385, 388, 414, 417, 434, 437, 467, 470, 541, 544, 562, 565, 566, 569, 570, 573, 605, 608, 609, 635, 637, 638, 641, 662, 665, 666, 683, 699, 701, 716, 721, 722, 723, 724, 725, 726, 727, 728, 733, 734, 735, 738, 740, 742, 743, 745, 746, 748, 749, 751, 752, 754, 755, 757, 769, 771, 775, 777, 778, 780, 782, 784, 785, 787, 794, 796, 797, 799, 822, 828, 831, 840, 843, 844, 847, 856, 859, 862, 865, 866, 869, 882, 883, 884, 886, 899, 926, 927, 928, 932, 934, 935, 936, 939, 941, 944, 946, 947, 950, 951, 954, 955, 958, 959, 962, 963, 966, 971, 974, 975, 978, 990], "core": [14, 150, 152, 166, 170, 175, 321, 357, 990], "principl": 14, "oper": [14, 67, 68, 69, 70, 150, 152, 156, 157, 160, 163, 164, 166, 167, 173, 174, 213, 242, 243, 245, 246, 284, 312, 371, 385, 388, 426, 429, 430, 433, 479, 482, 546, 549, 550, 553, 562, 565, 586, 589, 609, 619, 631, 632, 633, 675, 683, 690, 692, 695, 697, 703, 705, 707, 709, 711, 713, 721, 722, 723, 724, 725, 726, 727, 728, 730], "expos": [14, 170, 174, 609, 625], "almost": [14, 151, 164, 171, 173], "ident": [14, 16, 67, 68, 160, 162, 164, 172, 173, 187, 321, 355, 886, 899, 990], "uniqu": [14, 160, 164, 187, 321, 330, 331, 882, 883, 884, 885, 886, 892, 926, 927, 928, 932, 933, 934], "syntax": [14, 15], "There": [14, 150, 151, 157, 160, 163, 164, 165, 170, 173, 187], "onli": [14, 67, 68, 141, 142, 143, 144, 145, 146, 149, 150, 151, 155, 157, 159, 160, 161, 163, 164, 165, 166, 167, 168, 170, 172, 173, 174, 175, 185, 187, 321, 361, 371, 527, 530, 531, 534, 734, 758, 761, 778, 780, 822, 840, 843, 886, 887, 888, 896, 897, 921, 922, 923, 946, 955, 958, 990], "so": [14, 15, 19, 20, 21, 24, 25, 26, 27, 28, 29, 32, 33, 34, 35, 36, 37, 42, 43, 46, 47, 54, 55, 65, 66, 67, 68, 74, 75, 78, 79, 80, 81, 82, 83, 88, 89, 92, 93, 96, 97, 100, 101, 150, 151, 155, 156, 157, 159, 162, 163, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 187, 188, 196, 204, 205, 206, 208, 217, 218, 223, 224, 231, 232, 237, 238, 253, 254, 261, 262, 266, 268, 271, 273, 279, 281, 293, 294, 295, 297, 372, 373, 374, 376, 385, 386, 387, 389, 434, 435, 436, 467, 468, 469, 595, 596, 597, 598, 600, 601, 602, 603, 610, 611, 612, 614, 638, 639, 640, 642, 685, 686, 687, 689, 735, 736, 737, 739, 823, 824, 825, 827, 856, 857, 858, 860, 886, 887, 897, 911, 913, 928, 929, 930, 931, 990], "wai": [14, 15, 18, 150, 161, 167, 172, 173, 174, 175, 187], "manipul": [14, 47, 93, 155, 175, 186, 823, 826, 828, 831, 832, 835, 836, 839, 840, 843, 844, 847, 848, 851, 852, 855, 856, 859, 861, 862, 865, 866, 869, 870, 873, 874, 877, 878, 881], "unsurprisingli": [14, 157], "fundament": [14, 164, 170], "consist": [14, 67, 68, 137, 138, 163, 167, 321, 353, 734, 749, 751, 946, 947, 950], "each": [14, 15, 16, 67, 68, 69, 70, 71, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 136, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 151, 152, 154, 155, 156, 157, 158, 159, 160, 162, 163, 164, 165, 167, 168, 169, 170, 172, 173, 175, 186, 187, 198, 201, 202, 204, 207, 213, 248, 251, 284, 291, 321, 330, 331, 342, 343, 344, 345, 346, 347, 348, 352, 365, 371, 372, 375, 377, 380, 381, 384, 385, 388, 390, 393, 394, 397, 398, 401, 402, 405, 406, 409, 410, 413, 414, 417, 418, 421, 422, 425, 426, 429, 430, 433, 434, 437, 438, 441, 442, 445, 446, 449, 451, 454, 459, 462, 463, 466, 467, 470, 471, 474, 475, 478, 479, 482, 483, 486, 487, 490, 491, 494, 495, 498, 499, 502, 503, 506, 507, 510, 511, 514, 515, 518, 519, 522, 523, 526, 527, 530, 531, 534, 535, 538, 541, 544, 546, 549, 550, 553, 554, 557, 558, 561, 562, 565, 566, 569, 570, 573, 574, 577, 578, 581, 582, 585, 586, 589, 590, 594, 595, 599, 600, 604, 605, 608, 609, 610, 613, 683, 690, 692, 695, 697, 703, 705, 707, 709, 711, 713, 721, 722, 723, 724, 725, 726, 727, 728, 729, 734, 735, 738, 740, 742, 743, 745, 749, 751, 758, 761, 766, 768, 769, 771, 775, 777, 782, 784, 785, 787, 822, 832, 835, 848, 851, 856, 859, 861, 866, 869, 874, 877, 878, 881, 886, 892, 899, 909, 910, 921, 924, 926, 927, 928, 932, 946, 947, 950, 990, 996], "veri": [14, 15, 150, 151, 155, 157, 159, 160, 164, 166, 167, 168, 171, 173, 174, 175, 187, 990], "similar": [14, 125, 136, 155, 164, 165, 166, 173, 187, 371, 562, 565, 721, 732], "convent": [14, 186, 734, 758, 761, 946, 947, 950], "those": [14, 67, 68, 150, 151, 152, 164, 170, 175, 213, 214, 215, 683, 719, 734, 778, 780, 785, 787, 822, 823, 826], "introduc": [14, 164, 173, 822, 856, 859, 926, 927], "2006": 14, "layer": [14, 41, 87, 116, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 145, 147, 148, 155, 156, 170, 171, 174, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 904, 905, 908, 990], "therefor": [14, 151, 155, 156, 157, 158, 159, 160, 163, 164, 165, 166, 167, 168, 170, 172, 174, 187, 213, 214, 215, 217, 220, 222, 223, 226, 228, 229, 231, 234, 236, 237, 240, 242, 243, 245, 246, 248, 251, 258, 259, 261, 264, 266, 270, 271, 275, 276, 278, 279, 283, 284, 293, 296, 371, 372, 375, 385, 388, 390, 393, 434, 437, 467, 470, 550, 553, 582, 585, 586, 589, 595, 599, 609, 637, 721, 724, 733, 734, 735, 738, 746, 748, 822, 856, 859, 904, 905, 908, 926, 928, 932, 946, 951, 954, 979, 980, 983], "present": [14, 64, 67, 68, 151, 158, 164, 165, 166, 167, 168, 170], "itself": [14, 150, 151, 164, 167, 168, 174, 186, 187, 609, 615, 886, 898], "cut": 14, "cloth": 14, "adher": [14, 15, 156, 158, 170, 175], "semant": [14, 170, 175, 371, 562, 565], "round": [14, 15, 16, 32, 33, 78, 79, 150, 151, 152, 153, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 172, 173, 174, 175, 186, 371, 385, 388, 434, 437, 467, 470, 471, 474, 541, 544, 582, 585, 605, 608, 990], "up": [14, 15, 16, 149, 151, 152, 153, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 186, 187], "hopefulli": [14, 15, 16, 150, 151, 152, 153, 154, 155, 156, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 172, 173, 174, 175, 186], "paint": [14, 170], "pictur": [14, 170], "how": [14, 16, 125, 136, 137, 138, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 171, 172, 173, 174, 175, 186, 187, 990, 996], "pleas": [14, 15, 16, 150, 151, 152, 153, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 172, 173, 174, 175, 186, 990], "check": [14, 15, 16, 21, 22, 23, 24, 25, 67, 68, 150, 151, 164, 169, 170, 172, 173, 174, 175, 186, 284, 298, 305, 306, 308, 320, 321, 360, 370, 609, 619, 634, 648, 655, 656, 657, 658, 675, 682, 683, 699, 701, 734, 749, 751, 886, 887, 896, 897, 898, 990], "out": [14, 15, 16, 19, 20, 26, 27, 32, 33, 34, 35, 42, 43, 44, 45, 46, 47, 48, 49, 56, 57, 58, 59, 60, 61, 64, 65, 66, 67, 68, 69, 70, 72, 73, 78, 79, 80, 81, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 102, 103, 104, 105, 106, 107, 125, 133, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 169, 170, 172, 173, 174, 175, 186, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 213, 214, 215, 216, 217, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 250, 252, 253, 255, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 290, 292, 321, 366, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 621, 622, 623, 624, 626, 627, 628, 631, 632, 633, 635, 637, 638, 639, 640, 641, 642, 649, 662, 665, 666, 683, 716, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 920, 921, 922, 923, 925, 926, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990], "discuss": [14, 15, 16, 149, 150, 151, 152, 153, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 172, 173, 174, 175, 186, 187, 990], "faq": [14, 15, 16, 170, 172, 173, 174, 175, 186], "reach": [14, 15, 16, 150, 151, 152, 153, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 172, 173, 174, 175, 186, 321, 345, 349, 353, 886, 898], "discord": [14, 15, 16, 150, 151, 152, 153, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 172, 173, 174, 175, 186, 990], "you": [14, 15, 16, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 172, 173, 174, 175, 186, 187, 990, 996], "question": [14, 15, 16, 150, 151, 157, 159, 170, 172, 173, 174, 175, 186, 187, 990], "With": [15, 16, 34, 35, 36, 37, 54, 55, 67, 68, 69, 70, 78, 79, 80, 81, 88, 89, 92, 93, 96, 97, 100, 101, 150, 157, 159, 170, 198, 200, 201, 202, 203, 204, 207, 209, 213, 248, 251, 284, 293, 296, 321, 343, 359, 371, 372, 375, 376, 385, 388, 389, 390, 393, 410, 413, 430, 433, 434, 437, 442, 445, 467, 470, 479, 482, 499, 502, 539, 540, 546, 549, 550, 553, 566, 569, 582, 585, 586, 589, 595, 596, 599, 600, 601, 604, 609, 610, 611, 612, 613, 614, 618, 626, 627, 634, 637, 638, 641, 642, 672, 677, 678, 679, 683, 685, 686, 688, 721, 724, 727, 728, 733, 734, 735, 738, 739, 740, 742, 743, 745, 746, 748, 762, 764, 791, 793, 806, 807, 810, 817, 820, 822, 823, 826, 827, 836, 839, 840, 843, 848, 851, 856, 859, 860, 861, 870, 873, 904, 905, 908, 909, 910, 911, 913, 914, 915, 917, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 935, 936, 939, 946, 947, 950, 979, 980, 983], "central": 15, "goal": [15, 152], "being": [15, 16, 67, 68, 150, 151, 157, 159, 162, 163, 164, 165, 166, 167, 168, 170, 173, 186, 187, 213, 214, 215, 609, 664, 669, 926, 933, 990], "would": [15, 150, 151, 153, 154, 156, 157, 159, 161, 162, 163, 164, 167, 168, 169, 170, 172, 174, 175, 187, 198, 203, 321, 366, 990], "entir": [15, 16, 67, 68, 125, 134, 151, 157, 158, 159, 163, 164, 167, 172, 173, 174, 175, 187, 321, 365, 946, 951, 954, 955, 958, 959, 962, 963, 966, 967, 970, 971, 974, 975, 978, 979, 980, 983, 985, 988], "forgiven": 15, "rais": [15, 64, 67, 68, 137, 138, 141, 145, 151, 167, 170, 172, 284, 292, 371, 459, 462, 558, 561, 609, 619, 644, 653, 667, 674, 680, 734, 758, 761, 765, 797, 799, 822, 862, 865, 866, 869, 921, 924, 946, 951, 954, 959, 962, 979, 980, 983, 985, 988], "an": [15, 16, 18, 21, 24, 25, 62, 63, 64, 67, 68, 108, 109, 114, 115, 137, 138, 141, 142, 143, 145, 150, 151, 152, 153, 155, 156, 157, 159, 160, 161, 163, 164, 165, 166, 167, 168, 170, 172, 173, 174, 175, 186, 187, 198, 201, 202, 204, 207, 212, 213, 214, 215, 217, 220, 222, 223, 226, 228, 229, 231, 234, 236, 237, 240, 242, 243, 245, 246, 248, 251, 253, 256, 258, 259, 261, 264, 266, 270, 271, 275, 276, 278, 279, 283, 284, 290, 291, 292, 293, 296, 304, 309, 310, 312, 321, 343, 347, 366, 371, 372, 375, 377, 380, 381, 384, 385, 388, 390, 393, 394, 397, 398, 401, 402, 405, 406, 409, 410, 413, 414, 417, 418, 421, 422, 425, 426, 429, 430, 433, 434, 437, 438, 441, 442, 445, 446, 449, 451, 454, 459, 462, 463, 466, 467, 470, 471, 474, 475, 478, 479, 482, 483, 486, 487, 490, 491, 494, 495, 498, 499, 502, 503, 506, 507, 510, 511, 514, 515, 518, 519, 522, 523, 526, 527, 530, 531, 534, 535, 538, 539, 540, 541, 544, 546, 549, 550, 553, 558, 561, 562, 565, 566, 569, 570, 573, 574, 577, 578, 581, 582, 585, 586, 589, 590, 594, 595, 599, 600, 604, 605, 608, 609, 620, 621, 622, 624, 626, 635, 636, 637, 649, 653, 655, 656, 657, 658, 678, 679, 680, 683, 699, 701, 716, 718, 719, 721, 724, 733, 734, 735, 738, 740, 742, 743, 745, 746, 748, 749, 751, 752, 754, 755, 757, 758, 761, 765, 766, 768, 769, 771, 775, 777, 778, 780, 781, 782, 784, 785, 787, 794, 796, 797, 799, 800, 802, 822, 823, 826, 828, 831, 832, 835, 836, 839, 840, 843, 844, 847, 852, 855, 856, 859, 861, 862, 865, 866, 869, 870, 873, 874, 877, 878, 881, 886, 892, 904, 905, 908, 909, 911, 912, 920, 921, 924, 925, 926, 927, 928, 932, 933, 934, 935, 936, 939, 941, 944, 946, 947, 950, 951, 954, 955, 958, 959, 962, 963, 966, 967, 970, 971, 974, 975, 978, 979, 980, 983, 985, 988, 990], "eyebrow": 15, "somehow": 15, "pytorch": [15, 16, 141, 142, 143, 144, 145, 146, 152, 160, 165, 166, 167, 168, 170, 172, 175, 187, 683, 690, 692, 695, 697, 703, 705, 707, 709, 711, 713, 990], "other": [15, 67, 68, 69, 70, 150, 151, 155, 156, 157, 159, 160, 163, 164, 167, 170, 172, 174, 175, 185, 186, 187, 210, 211, 213, 214, 215, 371, 463, 466, 609, 610, 613, 615, 683, 694, 909, 915, 917, 926, 933, 946, 967, 970, 975, 978, 990], "strong": [15, 187], "industri": 15, "back": [15, 137, 138, 141, 145, 163, 169, 170, 172, 187, 990, 996], "momentum": 15, "won": [15, 16, 151, 175], "ad": [15, 108, 109, 147, 148, 150, 151, 152, 155, 156, 157, 159, 160, 162, 163, 164, 165, 167, 168, 170, 174, 187, 609, 673, 674, 734, 749, 751, 822, 836, 839], "just": [15, 16, 125, 134, 150, 151, 156, 157, 159, 160, 167, 170, 172, 173, 187, 946, 947, 950], "make": [15, 16, 150, 151, 152, 155, 156, 157, 158, 159, 160, 163, 164, 165, 166, 167, 168, 170, 172, 173, 175, 321], "problem": [15, 151, 163, 172], "even": [15, 16, 150, 151, 156, 160, 165, 166, 168, 172, 173, 174, 175, 187, 371, 558, 561, 566, 569], "wors": 15, "rather": [15, 67, 68, 155, 156, 159, 164, 175, 187, 213, 214, 215, 321, 365, 609, 655, 656, 658, 683, 699, 701], "funni": 15, "comic": 15, "strip": 15, "easi": [15, 150, 151, 160, 164], "feasibl": 15, "space": [15, 213, 214, 215, 242, 243, 245, 246, 609, 636], "case": [15, 21, 24, 25, 64, 67, 68, 69, 70, 71, 125, 136, 137, 138, 141, 145, 150, 151, 152, 155, 156, 157, 160, 161, 163, 164, 165, 166, 167, 168, 170, 172, 174, 175, 187, 213, 248, 251, 321, 360, 367, 370, 371, 372, 375, 377, 380, 381, 384, 385, 388, 390, 393, 394, 397, 398, 401, 402, 405, 430, 433, 434, 437, 438, 441, 442, 445, 459, 462, 463, 466, 467, 470, 503, 506, 507, 510, 515, 518, 519, 522, 541, 544, 558, 561, 562, 565, 566, 569, 570, 573, 574, 577, 578, 581, 582, 585, 595, 599, 600, 604, 605, 608, 609, 653, 665, 666, 734, 762, 764, 822, 852, 855, 886, 889, 895, 946, 951, 954, 955, 958, 959, 962, 967, 970, 971, 974, 975, 978], "unlik": [15, 157, 164, 321], "charger": 15, "charact": 15, "encod": [15, 173, 609, 636], "instant": [15, 990], "messag": [15, 151, 170, 172, 998, 999], "much": [15, 151, 155, 163, 164, 167, 170, 172, 173], "doe": [15, 18, 64, 67, 68, 151, 153, 154, 155, 156, 157, 159, 160, 161, 165, 167, 168, 170, 172, 173, 187, 371, 430, 433, 609, 653, 822, 861], "mandat": [15, 159, 167], "adopt": [15, 151, 163], "continu": [15, 16, 158, 159, 187], "own": [15, 16, 150, 156, 170, 187], "signatur": [15, 18, 64, 155, 156, 157, 164, 165, 166, 167, 168, 213, 214, 215, 217, 220, 222, 223, 226, 228, 229, 231, 234, 236, 237, 240, 242, 243, 258, 259, 261, 264, 266, 270, 271, 275, 276, 278, 279, 283, 284, 293, 296, 371, 372, 375, 390, 393, 430, 433, 434, 437, 442, 445, 467, 470, 550, 553, 582, 585, 586, 589, 734, 746, 748, 822, 836, 839, 856, 859, 926, 927, 928, 932, 935, 936, 939, 946, 951, 954], "replac": [15, 67, 68, 151, 153, 157, 159, 162, 164, 165, 166, 170, 172, 175, 187, 609, 665, 666, 822, 823, 826, 909, 910], "your": [15, 16, 149, 150, 152, 153, 155, 156, 173, 174, 187, 990], "10": [15, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 141, 143, 150, 153, 157, 164, 170, 172, 173, 213, 236, 245, 246, 247, 321, 371, 410, 413, 414, 417, 442, 445, 479, 482, 499, 502, 507, 510, 582, 585, 609, 627, 637, 664, 669, 683, 703, 704, 705, 706, 721, 727, 734, 743, 745, 746, 748, 772, 774, 791, 793, 822, 840, 843, 848, 851, 861, 904, 905, 908, 909, 910, 911, 912, 913, 921, 924, 926, 927, 946, 947, 950, 951, 954], "100": [15, 16, 96, 97, 173, 174, 175, 187, 371, 582, 585, 911, 913, 990], "despit": [15, 164, 166], "distinct": [15, 156, 164, 167, 169, 926, 927, 928, 932, 934, 990], "still": [15, 67, 68, 156, 159, 165, 172, 174, 187, 990], "believ": [15, 151], "share": [15, 67, 68, 157, 159, 160, 161, 164, 170, 284, 316], "bring": [15, 170, 171], "benefit": [15, 16, 150, 151, 163, 164, 167, 172, 173, 187], "unrel": [15, 151], "what": [15, 16, 151, 154, 156, 157, 162, 164, 168, 169, 170, 172, 173, 174, 175, 186, 187, 990], "again": [15, 16, 151, 155, 157, 164, 167, 173, 175, 187], "contrari": 15, "bumpi": 15, "road": 15, "allud": [15, 173], "most": [15, 67, 68, 150, 151, 155, 159, 160, 163, 164, 165, 166, 167, 168, 170, 172, 173, 174, 187, 734, 749, 751], "technolog": 15, "sector": [15, 371, 381, 384, 394, 397, 406, 409], "full": [15, 16, 69, 70, 151, 156, 165, 168, 170, 187, 213, 284, 304, 371, 479, 482, 499, 502, 721, 727, 734, 778, 780, 782, 784, 785, 787, 904, 905, 908], "success": 15, "reason": [15, 151, 155, 157, 160, 163, 164, 165, 167, 170, 172, 371, 562, 565], "build": [15, 125, 136, 137, 138, 149, 150, 160, 169, 171, 174, 175, 187, 926, 927, 928, 932, 934, 990], "custom": [15, 18, 64, 174], "comput": [15, 16, 67, 68, 150, 160, 164, 170, 173, 187, 321, 365, 371, 385, 388, 410, 413, 422, 425, 430, 433, 451, 454, 455, 458, 475, 478, 479, 482, 495, 498, 499, 502, 523, 526, 527, 530, 531, 534, 535, 538, 541, 544, 546, 549, 550, 553, 609, 621, 622, 624, 627, 628, 683, 685, 688, 690, 692, 694, 695, 697, 703, 705, 707, 709, 711, 713, 716, 718, 721, 722, 723, 724, 725, 726, 727, 728, 730, 732, 734, 735, 738, 740, 742, 749, 751, 752, 754, 755, 757, 758, 761, 762, 764, 778, 780, 781, 782, 784, 785, 787, 797, 799, 800, 802, 806, 807, 810, 812, 815, 817, 820, 886, 892, 926, 927, 928, 932, 934, 946, 947, 950, 951, 954, 955, 958, 959, 962, 963, 966, 967, 970, 971, 974, 975, 978], "thank": [15, 173], "interoper": 15, "compon": [15, 170], "bio": [15, 150], "hardwar": [15, 150], "initi": [15, 64, 67, 68, 69, 70, 71, 118, 119, 121, 122, 124, 125, 126, 127, 128, 129, 130, 131, 132, 134, 135, 136, 137, 138, 141, 145, 151, 161, 165, 166, 321, 721, 731], "pcie": 15, "interfac": [15, 175, 187], "motherboard": 15, "raid": 15, "storag": [15, 173], "virtual": [15, 151, 153], "bluetooth": 15, "wireless": 15, "exchang": 15, "btx": 15, "form": [15, 21, 22, 23, 24, 25, 67, 68, 149, 160, 174, 175, 213, 217, 220, 253, 256, 266, 270, 271, 275, 609, 615, 683, 690, 692, 695, 697, 703, 705, 707, 709, 711, 713, 721, 734, 735, 738, 743, 745, 746, 748, 749, 751, 752, 754, 755, 757, 766, 768, 769, 771, 775, 777, 778, 780, 782, 784, 785, 787, 788, 790, 794, 796, 886, 888, 898], "factor": [15, 125, 126, 127, 128, 129, 130, 131, 132, 141, 142, 143, 144, 321, 330, 363, 364, 365, 683, 685, 688, 690, 692, 703, 705, 707, 709, 721, 722, 723, 724, 725, 726, 727, 728, 734, 735, 738], "sata": 15, "connect": [15, 125, 135, 136, 150, 174, 175], "host": [15, 187], "bu": 15, "adapt": [15, 141, 144, 683, 707, 709], "devic": [15, 26, 27, 31, 67, 68, 72, 73, 77, 96, 97, 114, 115, 116, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 145, 147, 148, 151, 154, 155, 160, 162, 165, 172, 173, 187, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 270, 271, 275, 276, 277, 278, 279, 280, 281, 282, 283, 323, 324, 325, 326, 327, 328, 330, 331, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 609, 637, 638, 641, 662, 665, 666, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918], "html": [15, 153, 156, 213, 214, 215, 217, 220, 222, 223, 226, 228, 229, 231, 234, 236, 237, 240, 242, 243, 258, 259, 261, 264, 266, 270, 271, 275, 276, 278, 279, 283, 284, 293, 296, 371, 372, 375, 390, 393, 430, 433, 434, 437, 442, 445, 467, 470, 550, 553, 582, 585, 586, 589, 734, 746, 748, 822, 836, 839, 856, 859, 926, 927, 928, 932, 935, 936, 939, 946, 951, 954], "enabl": [15, 67, 68, 69, 70, 71, 150, 151, 159, 160, 163, 164, 167, 169, 170, 171, 173, 175, 187], "anyon": [15, 149, 187], "websit": 15, "tcp": 15, "ip": 15, "node": [15, 67, 68, 164, 886, 887, 896, 897], "commun": [15, 149, 151, 152, 187, 990, 996], "network": [15, 111, 125, 137, 138, 160, 164, 170, 174, 186, 721, 730, 990], "smtp": 15, "possibl": [15, 149, 150, 151, 152, 156, 157, 159, 164, 165, 167, 170, 173, 186, 187, 609, 659, 677, 946, 951, 954, 959, 962], "send": 15, "gmail": 15, "outlook": 15, "pop": [15, 64], "email": 15, "ieee": [15, 212, 284, 304, 371, 385, 388, 463, 466, 541, 544, 562, 565, 582, 585], "754": [15, 212, 284, 304, 371, 385, 388, 463, 466, 541, 544, 562, 565, 582, 585], "allow": [15, 137, 138, 170, 187, 213, 242, 243, 245, 246, 609, 659], "calcul": [15, 67, 68, 69, 70, 71, 156, 371, 372, 375, 377, 380, 381, 384, 385, 388, 390, 393, 394, 397, 398, 401, 402, 405, 438, 441, 442, 445, 446, 449, 459, 462, 463, 466, 503, 506, 507, 510, 511, 514, 515, 518, 519, 522, 541, 544, 558, 561, 574, 577, 578, 581, 582, 585, 590, 594, 595, 599, 600, 604, 806, 807, 810, 812, 815, 817, 820, 946, 951, 954, 955, 958, 959, 962, 963, 966, 967, 970, 971, 974, 975, 978], "live": [15, 16], "depend": [15, 150, 151, 156, 162, 164, 165, 170, 187, 284, 290, 371, 372, 375, 377, 380, 381, 384, 390, 393, 394, 397, 398, 401, 402, 405, 438, 441, 442, 445, 459, 462, 463, 466, 503, 506, 507, 510, 511, 514, 515, 518, 558, 561, 574, 577, 578, 581, 595, 599, 600, 604, 734, 749, 751, 778, 780, 782, 784, 785, 787, 921, 925, 935, 936, 939, 941, 944], "did": [15, 152, 175], "aris": [15, 187], "until": [15, 151, 187, 990], "substanti": [15, 151, 159, 163], "innov": 15, "growth": 15, "usag": [15, 170, 321, 365], "relev": [15, 141, 142, 143, 144, 145, 146, 150, 152, 157, 164, 165, 173], "area": [15, 167, 185, 371, 381, 384, 394, 397, 406, 409, 990], "necess": 15, "parti": [15, 187], "could": [15, 16, 150, 151, 157, 159, 164, 165, 167, 170, 172, 173, 174, 926, 927, 928, 932, 934], "easili": [15, 151, 173, 174, 175, 187, 990], "engag": [15, 149, 150, 151, 152, 153, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168], "regard": [15, 164, 321], "effect": [15, 156, 163, 164, 168, 187, 213, 248, 251, 683, 711, 713, 946, 967, 970, 975, 978], "2015": 15, "sinc": [15, 150, 151, 187], "alongsid": 15, "machin": [15, 150, 160, 186, 284, 304, 307, 371, 475, 478, 734, 766, 768, 775, 777], "given": [15, 16, 64, 67, 68, 114, 115, 150, 151, 152, 153, 155, 156, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 170, 172, 174, 175, 186, 213, 214, 215, 222, 242, 243, 245, 246, 321, 354, 360, 362, 363, 364, 365, 367, 370, 609, 627, 628, 638, 641, 665, 666, 681, 683, 685, 688, 690, 692, 695, 697, 703, 705, 707, 709, 711, 713, 721, 722, 723, 724, 725, 726, 727, 728, 734, 803, 805, 806, 807, 810, 812, 815, 817, 820, 822, 823, 826, 836, 839, 840, 843, 848, 851, 856, 859, 861, 874, 877, 886, 893, 894, 909, 911, 912, 914, 915, 917, 920, 935, 941, 944], "frame": [15, 186], "less": [15, 32, 33, 67, 68, 78, 79, 151, 157, 164, 168, 169, 170, 371, 377, 380, 381, 384, 390, 393, 402, 405, 434, 437, 503, 506, 507, 510, 515, 518, 558, 561, 562, 565, 570, 573, 582, 585, 734, 766, 768, 775, 777, 800, 802, 909, 915, 917, 946, 975, 978], "matur": [15, 187], "state": [15, 111, 112, 113, 114, 115, 116, 118, 119, 121, 122, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 156, 168, 169, 170, 171, 173, 186, 371, 541, 544, 721, 731, 990], "than": [15, 67, 68, 151, 155, 157, 159, 164, 167, 170, 173, 174, 175, 187, 213, 214, 215, 284, 304, 321, 365, 371, 377, 380, 381, 384, 390, 393, 402, 405, 418, 421, 426, 429, 434, 437, 467, 470, 471, 474, 503, 506, 507, 510, 515, 518, 539, 558, 561, 562, 565, 570, 573, 582, 585, 605, 608, 609, 655, 656, 658, 683, 699, 701, 734, 740, 742, 758, 761, 766, 768, 775, 777, 800, 802, 822, 823, 826, 840, 843, 862, 865, 909, 915, 917, 926, 927, 928, 932, 934, 946, 963, 966, 967, 970, 971, 974, 975, 978], "preced": [15, 174], "mention": [15, 150, 151, 157, 160, 167, 168], "aros": 15, "70": [15, 734, 772, 774, 946, 947, 950], "80": [15, 734, 772, 774, 946, 947, 950], "90": [15, 96, 97, 371, 430, 433, 566, 569, 734, 772, 774, 911, 913, 946, 947, 950], "effort": [15, 149, 187], "stage": [15, 149, 151, 153, 154, 990], "complet": [15, 67, 68, 151, 152, 163, 164, 172, 173, 734, 778, 780], "natur": [15, 157, 163, 164, 186, 371, 459, 462, 503, 506, 511, 514, 734, 781], "like": [15, 64, 150, 151, 153, 154, 155, 156, 157, 159, 166, 167, 168, 169, 170, 172, 173, 174, 175, 186, 187, 683, 699, 701, 909, 915, 917, 990], "certainli": 15, "mission": [15, 990], "creat": [15, 18, 64, 67, 68, 114, 115, 116, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 153, 165, 166, 167, 170, 171, 174, 185, 186, 213, 214, 215, 217, 220, 222, 223, 226, 228, 229, 236, 237, 240, 242, 243, 245, 246, 253, 256, 258, 259, 261, 264, 276, 278, 279, 283, 321, 330, 331, 609, 637, 638, 641, 662, 665, 666, 677, 683, 718, 909, 910, 911, 912, 915, 917, 990, 996], "At": [15, 152], "process": [15, 16, 149, 150, 151, 153, 160, 164, 170, 175, 321, 330, 331, 360, 370], "ourselv": 15, "lead": [15, 16, 67, 68, 69, 70, 71, 187, 734, 778, 780, 785, 787], "quansight": 15, "compani": 15, "made": [15, 151, 152, 164, 167, 170, 172], "organ": [15, 155, 160, 163, 164], "panda": 15, "scipi": 15, "conda": [15, 150, 153], "dask": [15, 926, 927, 928, 932, 934], "apach": 15, "onnx": 15, "scikit": 15, "jupyt": 15, "aw": 15, "cupi": 15, "net": [15, 16, 170, 175], "sympi": 15, "rai": [15, 371, 402, 405], "modin": 15, "spyder": 15, "includ": [15, 67, 68, 125, 135, 136, 139, 140, 151, 152, 155, 156, 157, 158, 159, 160, 161, 163, 164, 165, 166, 167, 168, 186, 187, 213, 214, 215, 217, 220, 253, 256, 609, 648, 682, 734, 800, 802, 886, 887, 909, 915, 917, 921, 923, 946, 951, 954, 955, 958, 959, 962, 963, 966, 967, 970, 971, 974, 975, 978, 979, 980, 983, 985, 988, 993, 995], "member": [15, 151], "googl": [15, 990], "octoml": 15, "einop": [15, 67, 68, 609, 631, 632, 633], "further": [15, 16, 151, 153, 157, 163, 169, 173, 174, 990], "sponsor": 15, "lg": 15, "electron": 15, "microsoft": 15, "d": [15, 16, 64, 96, 97, 149, 150, 154, 164, 173, 609, 618, 626, 721, 722, 723, 724, 725, 726, 727, 728, 734, 746, 748, 772, 774, 911, 913, 990, 996], "shaw": 15, "co": [15, 32, 33, 78, 79, 170, 186, 371, 609, 636, 990], "intel": 15, "togeth": [15, 67, 68, 147, 148, 163, 164, 174, 175, 187], "major": [15, 165, 166, 187, 921, 924], "involv": [15, 149, 153, 154, 165, 175, 284, 312, 371, 385, 388, 541, 544, 990, 996], "anoth": [15, 67, 68, 150, 151, 160, 164, 165, 172, 175, 213, 231, 234, 284, 291, 293, 296], "promis": 15, "sign": [15, 32, 33, 78, 79, 150, 171, 175, 213, 214, 215, 371, 372, 375, 385, 388, 402, 405, 426, 429, 541, 544, 562, 565, 734, 781, 926, 927, 928, 932, 934, 946, 963, 966, 971, 974], "pursuit": 15, "unif": [15, 149, 172, 990, 996], "clearli": [15, 152, 157], "lot": [15, 16, 162, 172, 187], "thought": [15, 150, 151, 168], "care": [15, 151, 175], "attent": [15, 125, 136, 151, 163, 164, 721, 732, 733], "gone": [15, 169], "simplifi": [15, 170, 171, 172, 174], "compat": [15, 168, 187, 284, 292, 371, 385, 388, 402, 405, 410, 413, 418, 421, 422, 425, 426, 429, 430, 433, 446, 449, 451, 454, 471, 474, 479, 482, 495, 498, 499, 502, 519, 522, 523, 526, 531, 534, 535, 538, 541, 544, 550, 553, 558, 561, 562, 565, 590, 594, 734, 766, 768, 775, 777, 782, 784, 791, 793, 797, 799, 800, 802, 822, 852, 855, 921, 923, 946, 951, 954, 955, 958, 959, 962, 963, 966, 967, 970, 971, 974, 975, 978, 979, 980, 983, 985, 988, 990], "excit": [15, 149, 154, 990], "complianc": 15, "hope": [15, 187], "due": [15, 150, 164, 167, 371, 541, 544], "suit": [15, 150, 154, 158, 159, 173, 186], "some": [15, 16, 67, 68, 125, 133, 150, 151, 152, 155, 156, 157, 160, 163, 164, 165, 166, 167, 168, 171, 172, 173, 174, 186, 187, 371, 463, 466, 683, 685, 688, 690, 692, 695, 697, 703, 705, 707, 709, 711, 713, 719, 721, 729, 990], "motiv": [15, 172], "great": [15, 16, 159, 170, 172], "convinc": 15, "celebr": 15, "encourag": [15, 186, 187, 990, 996], "foundat": 15, "point": [16, 151, 156, 157, 163, 167, 168, 170, 172, 173, 186, 212, 213, 214, 215, 222, 228, 229, 236, 258, 259, 276, 278, 284, 290, 304, 309, 312, 371, 377, 380, 381, 384, 385, 388, 390, 393, 394, 397, 398, 401, 402, 405, 406, 409, 430, 433, 434, 437, 438, 441, 442, 445, 446, 449, 459, 462, 463, 466, 467, 470, 503, 506, 507, 510, 515, 518, 519, 522, 541, 544, 558, 561, 562, 565, 566, 569, 574, 577, 578, 581, 582, 585, 595, 599, 600, 604, 605, 608, 734, 735, 738, 743, 745, 749, 751, 752, 754, 755, 757, 766, 768, 775, 777, 778, 780, 782, 784, 785, 787, 800, 802, 926, 927, 928, 932, 934, 946, 951, 954, 955, 958, 959, 962, 963, 966, 967, 970, 971, 974, 975, 978], "mai": [16, 18, 64, 150, 151, 164, 172, 174, 213, 214, 215, 231, 234, 321, 366, 371, 451, 454, 479, 482, 499, 502, 527, 530, 531, 534, 609, 630, 926, 927, 928, 932, 934, 935, 936, 939, 941, 944, 946, 951, 954, 955, 958, 959, 962], "ask": [16, 170, 172, 187, 990], "perfectli": 16, "happi": [16, 150, 187], "abund": 16, "better": [16, 154, 169, 172, 173, 174], "ll": [16, 149, 151, 157, 164, 167, 173], "give": [16, 150, 151, 154, 156, 157, 161, 168, 172, 822, 852, 855], "two": [16, 64, 69, 70, 156, 157, 159, 163, 164, 169, 173, 175, 213, 214, 215, 228, 229, 248, 251, 266, 270, 271, 275, 284, 311, 316, 371, 426, 429, 566, 569, 609, 617, 734, 735, 738, 743, 745, 746, 748, 749, 751, 752, 754, 755, 757, 758, 761, 762, 764, 766, 768, 769, 771, 772, 774, 775, 777, 778, 780, 781, 782, 784, 785, 787, 788, 790, 794, 796, 797, 799, 822, 870, 873, 926, 927, 928, 932, 933, 934, 990], "streamlin": 16, "workflow": [16, 151, 173, 185, 990], "save": [16, 67, 68, 137, 138, 187, 609, 670], "week": [16, 151, 152, 990], "let": [16, 156, 157, 164, 165, 166, 170, 172, 173, 174, 175, 946, 955, 958, 967, 970, 971, 974, 975, 978, 990], "sai": [16, 150, 162, 172], "deepmind": 16, "releas": [16, 150, 152, 990], "awesom": 16, "paper": 16, "love": 16, "choic": [16, 150, 167, 173, 946, 967, 970, 975, 978], "perceiverio": 16, "happen": [16, 150, 151, 173], "slew": 16, "rush": 16, "f": [16, 64, 153, 154, 164, 170, 173, 175, 371, 475, 478, 609, 650, 654], "g": [16, 154, 164, 187, 284, 289, 312, 321, 337, 909, 914, 915, 917, 926, 927, 928, 932, 934, 946, 951, 954, 959, 962, 963, 966, 971, 974], "inevit": 16, "deviat": [16, 139, 140, 904, 905, 908, 909, 914, 946, 967, 970], "origin": [16, 67, 68, 69, 70, 71, 161, 162, 165, 170, 172, 371, 402, 405, 734, 762, 764, 822, 852, 855, 856, 859], "often": [16, 160, 187], "erron": 16, "train": [16, 160, 164, 166, 173, 174, 175, 185, 186, 187, 683, 685, 688, 690, 692, 703, 705, 990], "poor": 16, "converg": 16, "perform": [16, 67, 68, 155, 157, 159, 160, 161, 163, 164, 166, 167, 168, 170, 173, 187, 198, 203, 213, 242, 243, 245, 246, 321, 609, 627, 631, 632, 633, 651, 652, 653, 683, 690, 692, 695, 697, 703, 705, 707, 709, 711, 713, 721, 729, 731, 734, 785, 787, 882, 883, 884, 885, 886, 893, 894, 979, 980, 983, 985, 988], "issu": [16, 149, 152, 170, 172, 174, 187], "etc": [16, 62, 63, 67, 68, 108, 109, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 145, 147, 148, 150, 151, 152, 155, 157, 159, 163, 164, 165, 168, 170, 172, 173, 187, 213, 242, 243, 245, 246, 609, 637, 638, 641, 662, 665, 666, 909, 910, 911, 912, 915, 917, 926, 927, 928, 932, 934], "publish": [16, 187], "manag": [16, 149, 167, 187, 321], "get": [16, 64, 67, 68, 125, 134, 149, 150, 152, 154, 160, 165, 166, 167, 170, 171, 172, 173, 174, 284, 302, 303, 304, 307, 321, 330, 331, 340, 341, 354, 355, 360, 364, 367, 370, 609, 616, 643, 644, 645, 664, 990, 996], "work": [16, 150, 151, 152, 154, 159, 164, 165, 166, 169, 170, 171, 172, 174, 175, 990, 996], "repositori": [16, 150, 151, 153, 158], "pull": [16, 149, 150, 153, 155, 187], "request": [16, 149, 155, 321, 357], "confus": [16, 167], "do": [16, 67, 68, 150, 151, 152, 155, 156, 157, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 172, 173, 174, 175, 187, 371, 562, 565, 609, 653, 683, 699, 701, 719, 886, 887, 896, 897, 898], "don": [16, 62, 63, 108, 109, 150, 151, 152, 165, 174, 187], "expect": [16, 187, 609, 616, 990], "codebas": [16, 149, 154, 155, 167, 169, 321, 363, 364, 990], "total": [16, 67, 68, 69, 70, 71, 149, 151, 157, 159, 166, 173, 174, 187, 321, 367, 921, 924, 946, 967, 970, 975, 978], "hour": 16, "spent": 16, "spin": 16, "off": [16, 169, 734, 746, 748, 794, 796], "test": [16, 150, 152, 154, 157, 187, 284, 309, 310, 371, 483, 486, 487, 490, 491, 494, 979, 980, 983, 985, 988], "error": [16, 67, 68, 137, 138, 141, 145, 150, 159, 163, 166, 168, 172, 187, 198, 199, 321, 371, 455, 458, 946, 951, 954, 959, 962], "iter": [16, 21, 22, 23, 24, 25, 62, 63, 64, 67, 68, 69, 70, 71, 108, 109, 164, 170, 173, 210, 211, 321, 343, 344, 346, 347, 348, 349, 352, 365, 609, 610, 613, 666, 671, 822, 832, 835, 848, 851, 861, 874, 877, 878, 881, 886, 887, 888, 892, 896, 897, 898], "address": [16, 151, 152, 163, 170], "sake": 16, "singl": [16, 67, 68, 151, 155, 157, 159, 160, 162, 164, 167, 168, 170, 173, 174, 175, 187, 321, 330, 331, 350, 351, 352, 353, 609, 679, 682, 909, 914, 915, 917, 926, 927], "multipl": [16, 67, 68, 78, 79, 80, 81, 88, 89, 92, 93, 96, 97, 125, 135, 151, 157, 160, 164, 187, 371, 385, 389, 541, 544, 609, 610, 612, 613, 614, 638, 642, 659, 734, 735, 738, 739, 755, 757, 822, 823, 826, 827, 856, 859, 860, 861, 904, 905, 908, 911, 913, 921, 922, 923, 946, 951, 954, 955, 958, 959, 962, 963, 966, 967, 970, 971, 974, 975, 978, 979, 980, 983, 985, 988], "line": [16, 150, 157, 163, 171, 172, 173, 174, 185, 990, 996], "convert": [16, 21, 22, 23, 24, 25, 67, 68, 115, 163, 170, 187, 188, 196, 213, 217, 220, 253, 256, 284, 288, 289, 321, 337, 338, 339, 340, 360, 367, 370, 609, 672, 678, 679, 734, 803, 805, 886, 888, 898, 899], "directli": [16, 151, 155, 156, 160, 163, 164, 165, 166, 167, 168, 170, 172, 174, 175, 186, 187, 886, 898], "graph": [16, 137, 138, 160, 164, 171, 187, 683, 690, 692, 695, 697, 703, 705, 707, 709, 711, 713, 926, 927, 928, 932, 934], "guarante": [16, 163, 187, 926, 927], "turn": [16, 157, 164], "4": [16, 32, 33, 42, 43, 46, 47, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 141, 142, 143, 144, 146, 153, 157, 161, 164, 170, 172, 173, 174, 175, 198, 200, 201, 203, 213, 237, 240, 248, 251, 261, 264, 279, 283, 284, 293, 295, 296, 297, 321, 343, 359, 371, 372, 374, 375, 376, 385, 386, 387, 388, 389, 390, 393, 402, 405, 410, 413, 430, 433, 434, 436, 437, 442, 445, 467, 469, 470, 479, 482, 499, 502, 539, 540, 546, 549, 550, 553, 566, 569, 582, 585, 586, 589, 595, 596, 598, 599, 600, 601, 603, 604, 609, 618, 627, 636, 637, 638, 640, 641, 642, 672, 677, 683, 685, 687, 688, 689, 721, 724, 725, 726, 728, 731, 733, 734, 735, 736, 738, 740, 742, 743, 745, 746, 748, 755, 757, 766, 768, 772, 774, 791, 793, 794, 796, 806, 817, 820, 822, 823, 824, 825, 826, 827, 828, 831, 836, 839, 840, 843, 848, 851, 852, 855, 856, 858, 859, 860, 861, 870, 873, 904, 905, 908, 909, 910, 911, 913, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 931, 932, 935, 936, 939, 946, 947, 950, 951, 954, 979, 980, 983, 990], "step": [16, 36, 37, 67, 68, 72, 73, 82, 83, 141, 142, 143, 144, 145, 146, 150, 151, 153, 157, 161, 163, 164, 165, 166, 170, 173, 174, 175, 186, 213, 214, 215, 216, 242, 243, 245, 246, 321, 683, 685, 686, 687, 688, 689, 690, 691, 692, 693, 695, 697, 703, 704, 705, 706, 707, 709, 711, 713, 882, 883, 884, 885, 990], "take": [16, 149, 150, 151, 156, 157, 159, 164, 165, 166, 170, 172, 174, 175, 187, 371, 430, 433, 990, 996], "few": [16, 151, 152, 160, 164, 165, 166, 167, 171, 172, 173, 174, 185, 990, 996], "second": [16, 141, 142, 143, 150, 157, 167, 172, 284, 311, 316, 321, 352, 371, 385, 388, 410, 413, 418, 421, 422, 425, 426, 429, 430, 433, 451, 454, 471, 474, 479, 482, 495, 498, 499, 502, 519, 522, 523, 526, 531, 534, 535, 538, 541, 544, 550, 553, 558, 561, 590, 594, 609, 617, 664, 669, 683, 685, 688, 690, 692, 703, 705, 734, 740, 742, 746, 748, 749, 751, 758, 761, 772, 774, 778, 780, 785, 787, 791, 793, 797, 799, 822, 866, 869, 870, 873, 882, 884, 926, 927, 928, 932], "automat": [16, 150, 151, 160, 164, 168, 169, 170, 171, 174, 175, 990], "convers": [16, 22, 23, 24, 25, 67, 68, 169, 171, 175, 186, 187, 990, 996], "everyon": [16, 149, 151, 187], "regardless": [16, 67, 68, 149, 172, 175, 210, 211], "wouldn": 16, "nice": [16, 159], "write": [16, 67, 68, 151, 152, 153, 154, 155, 156, 157, 159, 160, 161, 167, 170, 172, 175, 198, 199, 200, 201, 202, 203, 204, 207, 209, 213, 214, 215, 217, 220, 222, 223, 226, 228, 229, 231, 234, 236, 237, 240, 242, 243, 245, 246, 258, 259, 261, 264, 266, 270, 271, 275, 276, 278, 279, 283, 284, 290, 292, 321, 366, 371, 372, 375, 377, 380, 381, 384, 385, 388, 390, 393, 394, 397, 398, 401, 402, 405, 406, 409, 410, 413, 414, 417, 418, 421, 422, 425, 426, 429, 430, 433, 434, 437, 438, 441, 442, 445, 446, 449, 451, 454, 455, 458, 459, 462, 463, 466, 467, 470, 471, 474, 475, 478, 479, 482, 483, 486, 487, 490, 491, 494, 495, 498, 503, 506, 507, 510, 511, 514, 515, 518, 519, 522, 523, 526, 527, 530, 531, 534, 535, 538, 539, 540, 541, 544, 546, 549, 550, 553, 554, 557, 558, 561, 562, 565, 566, 569, 570, 573, 574, 577, 578, 581, 582, 585, 586, 589, 590, 594, 595, 599, 600, 604, 605, 608, 609, 621, 622, 624, 627, 628, 631, 632, 633, 635, 637, 638, 641, 649, 662, 665, 666, 683, 716, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 732, 733, 734, 735, 738, 740, 742, 743, 745, 746, 748, 752, 754, 755, 757, 758, 761, 762, 764, 766, 768, 769, 771, 772, 774, 775, 777, 781, 782, 784, 785, 787, 788, 790, 791, 793, 794, 796, 797, 799, 800, 802, 803, 805, 806, 807, 810, 812, 815, 817, 820, 822, 823, 826, 828, 831, 832, 835, 836, 839, 840, 843, 844, 847, 848, 851, 852, 855, 856, 859, 862, 865, 866, 869, 870, 873, 874, 877, 878, 881, 904, 905, 908, 909, 910, 911, 912, 914, 915, 917, 920, 921, 925, 926, 934, 935, 936, 939, 941, 944, 946, 947, 950, 951, 954, 955, 958, 959, 962, 963, 966, 967, 970, 971, 974, 975, 978, 979, 980, 983, 985, 988], "onc": [16, 150, 151, 164, 165, 166, 170, 173, 187, 321, 365, 734, 755, 757, 785, 787, 909, 910], "know": [16, 151, 926, 927, 928, 932, 934], "among": [16, 67, 68, 159], "frantic": 16, "port": 16, "lucid": 16, "honk": 16, "improv": [16, 151, 160, 170], "understand": [16, 150, 151, 152, 153, 154, 156, 157, 158, 168, 169], "pattern": [16, 67, 68, 156, 165, 609, 631, 632, 633], "hasn": 16, "chang": [16, 19, 20, 26, 27, 28, 29, 32, 33, 34, 35, 36, 37, 42, 43, 46, 47, 54, 55, 65, 66, 74, 75, 78, 79, 80, 81, 82, 83, 88, 89, 92, 93, 96, 97, 100, 101, 150, 151, 152, 153, 156, 158, 159, 164, 170, 174, 187, 204, 205, 206, 208, 217, 218, 223, 224, 231, 232, 237, 238, 253, 254, 261, 262, 266, 268, 271, 273, 279, 281, 293, 294, 295, 297, 321, 372, 373, 374, 376, 385, 386, 387, 389, 434, 435, 436, 467, 468, 469, 595, 596, 597, 598, 600, 601, 602, 603, 610, 611, 612, 614, 638, 639, 640, 642, 685, 686, 687, 689, 734, 735, 736, 737, 739, 740, 742, 822, 823, 824, 825, 827, 852, 855, 856, 857, 858, 860, 886, 888, 898, 911, 913, 928, 929, 930, 931, 990, 996], "now": [16, 67, 68, 125, 136, 137, 138, 150, 153, 155, 162, 164, 165, 168, 172, 173, 175, 186, 187], "spend": 16, "torchvis": 16, "probabl": [16, 125, 133, 721, 729, 909, 910], "sonnet": 16, "about": [16, 150, 151, 158, 169, 170, 174, 175, 187, 284, 304, 307], "next": [16, 137, 138, 141, 142, 143, 144, 145, 146, 150, 151, 152, 153, 156, 157, 161, 162, 172, 173, 284, 304, 990], "everyth": [16, 151, 152, 171, 187], "zero": [16, 67, 68, 69, 70, 116, 125, 126, 127, 128, 129, 130, 131, 132, 133, 135, 141, 142, 143, 144, 157, 163, 164, 165, 166, 168, 170, 173, 174, 198, 200, 201, 213, 222, 228, 229, 248, 251, 266, 270, 271, 275, 279, 283, 284, 290, 371, 385, 388, 390, 393, 418, 421, 442, 445, 463, 466, 467, 470, 527, 530, 531, 534, 539, 540, 541, 544, 546, 549, 550, 553, 558, 561, 562, 565, 566, 569, 582, 585, 586, 589, 595, 599, 600, 604, 609, 627, 662, 665, 666, 683, 685, 688, 690, 692, 703, 705, 707, 709, 721, 729, 734, 735, 738, 743, 745, 758, 761, 766, 768, 775, 777, 797, 799, 800, 802, 822, 836, 839, 840, 843, 848, 851, 856, 859, 878, 881, 904, 905, 908, 909, 911, 912, 921, 922, 923, 924, 926, 927, 928, 932, 934, 946, 951, 954, 955, 958, 959, 962, 963, 966, 967, 970, 971, 974, 975, 978, 979, 980, 983, 985, 988, 990], "need": [16, 150, 151, 152, 153, 155, 156, 157, 158, 160, 163, 164, 167, 170, 172, 173, 186, 187, 609, 621, 622, 624, 822, 823, 826, 836, 839], "said": 16, "high": [16, 67, 68, 96, 97, 152, 173, 909, 911, 912, 913, 915, 916, 917, 918], "level": [16, 149, 152, 160, 169, 170, 173, 174, 175, 187], "optim": [16, 142, 143, 144, 146, 167, 171, 173, 175, 186, 321, 683, 690, 692, 695, 697, 703, 705, 707, 709, 711, 713, 882, 883, 884, 885, 990], "trainer": [16, 185, 187, 990], "statu": 16, "quo": 16, "kera": 16, "dopamin": 16, "ignit": 16, "catalyst": 16, "lightn": 16, "fastai": 16, "haiku": [16, 175], "flax": [16, 175, 187], "trax": [16, 175], "objax": [16, 175], "idea": [16, 186], "fulli": [16, 125, 135, 136, 163, 164, 168, 170, 171, 172, 173, 174, 175, 187], "offer": [16, 174], "helper": [18, 64, 159, 173], "abc": [18, 19, 20, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 64, 67, 68, 137, 138, 141, 145, 172, 321, 330, 336, 609, 634], "inherit": [18, 163, 164, 172], "__delattr__": [18, 64], "self": [18, 64, 67, 68, 141, 145, 163, 164, 170, 172, 173, 174, 175, 204, 205, 206, 217, 218, 219, 223, 224, 225, 231, 232, 233, 237, 238, 239, 248, 249, 250, 253, 254, 255, 261, 262, 263, 266, 268, 269, 271, 273, 274, 279, 281, 282, 293, 294, 295, 321, 372, 373, 374, 377, 378, 379, 381, 382, 383, 385, 386, 387, 390, 391, 392, 394, 395, 396, 398, 399, 400, 402, 403, 404, 406, 407, 408, 410, 411, 412, 414, 415, 416, 418, 419, 420, 422, 423, 424, 426, 427, 428, 430, 431, 432, 434, 435, 436, 438, 439, 440, 442, 443, 444, 446, 447, 448, 451, 452, 453, 455, 456, 457, 459, 460, 461, 463, 464, 465, 467, 468, 469, 471, 472, 473, 475, 476, 477, 479, 480, 481, 483, 484, 485, 487, 488, 489, 491, 492, 493, 495, 496, 497, 499, 500, 501, 503, 504, 505, 507, 508, 509, 511, 512, 513, 515, 516, 517, 519, 520, 521, 523, 524, 525, 527, 528, 529, 531, 532, 533, 535, 536, 537, 541, 542, 543, 546, 547, 548, 550, 551, 552, 554, 555, 556, 558, 559, 560, 562, 563, 564, 566, 567, 568, 570, 571, 572, 574, 575, 576, 578, 579, 580, 582, 583, 584, 586, 587, 588, 590, 592, 593, 595, 597, 598, 600, 602, 603, 605, 606, 607, 610, 611, 612, 622, 623, 638, 639, 640, 685, 686, 687, 690, 691, 695, 696, 699, 700, 703, 704, 707, 708, 711, 712, 735, 736, 737, 740, 741, 743, 744, 746, 747, 749, 750, 752, 753, 755, 756, 758, 759, 760, 762, 763, 766, 767, 769, 770, 772, 773, 775, 776, 778, 779, 782, 783, 785, 786, 788, 789, 791, 792, 794, 795, 797, 798, 800, 801, 803, 804, 807, 808, 809, 812, 813, 814, 817, 818, 819, 823, 824, 825, 828, 829, 830, 832, 833, 834, 836, 837, 838, 840, 841, 842, 844, 845, 846, 848, 849, 850, 852, 853, 854, 856, 857, 858, 862, 863, 864, 866, 867, 868, 870, 871, 872, 874, 875, 876, 878, 879, 880, 905, 906, 907, 915, 916, 928, 930, 931, 936, 937, 938, 941, 942, 943, 947, 948, 949, 951, 952, 953, 955, 956, 957, 959, 960, 961, 963, 964, 965, 967, 968, 969, 971, 972, 973, 975, 976, 977, 980, 981, 982, 985, 986, 987, 990], "name": [18, 64, 150, 151, 153, 156, 159, 170, 172, 173, 175, 210, 211, 609, 615, 734, 749, 751, 778, 780, 785, 787, 926, 927, 928, 932], "delattr": [18, 64], "__format__": [18, 64], "format_spec": [18, 64], "formatt": [18, 64], "__getattribute__": [18, 64], "getattr": [18, 64], "__init_subclass__": [18, 64], "method": [18, 19, 20, 26, 27, 28, 29, 32, 33, 34, 35, 36, 37, 42, 43, 46, 47, 54, 55, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 74, 75, 78, 79, 80, 81, 82, 83, 88, 89, 92, 93, 96, 97, 100, 101, 108, 109, 125, 136, 137, 138, 152, 155, 156, 157, 159, 160, 163, 168, 170, 171, 174, 175, 187, 198, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 213, 217, 218, 223, 224, 231, 232, 234, 237, 238, 253, 254, 261, 262, 266, 268, 271, 273, 279, 281, 293, 294, 295, 297, 371, 372, 373, 374, 376, 385, 386, 387, 389, 390, 393, 410, 413, 430, 433, 434, 435, 436, 437, 442, 445, 467, 468, 469, 470, 479, 482, 499, 502, 539, 540, 546, 549, 550, 553, 566, 569, 582, 585, 586, 589, 595, 596, 597, 598, 600, 601, 602, 603, 604, 609, 610, 611, 612, 614, 625, 626, 637, 638, 639, 640, 642, 665, 666, 677, 679, 683, 685, 686, 687, 689, 703, 705, 707, 709, 721, 727, 733, 734, 735, 736, 737, 739, 740, 742, 743, 745, 806, 807, 810, 822, 823, 824, 825, 827, 836, 839, 840, 843, 848, 851, 856, 857, 858, 860, 861, 870, 873, 886, 887, 897, 898, 899, 904, 905, 908, 909, 911, 913, 914, 915, 917, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 935, 936, 939, 946, 947, 950, 951, 954, 979, 980, 983, 990], "subclass": [18, 64], "noth": [18, 64, 67, 68, 151], "It": [18, 64, 150, 151, 153, 154, 155, 156, 157, 161, 163, 164, 167, 170, 172, 173, 174, 198, 199, 200, 201, 202, 203, 204, 207, 209, 213, 214, 215, 217, 220, 222, 223, 226, 228, 229, 231, 234, 236, 237, 240, 242, 243, 245, 246, 258, 259, 261, 264, 266, 270, 271, 275, 276, 278, 279, 283, 284, 290, 292, 321, 366, 371, 372, 375, 377, 380, 381, 384, 385, 388, 390, 393, 394, 397, 398, 401, 402, 405, 406, 409, 410, 413, 414, 417, 418, 421, 422, 425, 426, 429, 430, 433, 434, 437, 438, 441, 442, 445, 446, 449, 451, 454, 455, 458, 459, 462, 463, 466, 467, 470, 471, 474, 475, 478, 479, 482, 483, 486, 487, 490, 491, 494, 495, 498, 503, 506, 507, 510, 511, 514, 515, 518, 519, 522, 523, 526, 527, 530, 531, 534, 535, 538, 539, 540, 541, 544, 546, 549, 550, 553, 554, 557, 558, 561, 562, 565, 566, 569, 570, 573, 574, 577, 578, 581, 582, 585, 586, 589, 590, 594, 595, 599, 600, 604, 605, 608, 609, 621, 622, 624, 627, 631, 632, 633, 635, 638, 641, 649, 662, 665, 666, 683, 716, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 732, 733, 734, 735, 738, 740, 742, 743, 745, 746, 748, 752, 754, 755, 757, 758, 761, 762, 764, 766, 768, 769, 771, 772, 774, 775, 777, 781, 782, 784, 785, 787, 788, 790, 791, 793, 794, 796, 797, 799, 800, 802, 803, 805, 806, 807, 810, 812, 815, 817, 820, 822, 823, 826, 828, 831, 832, 835, 836, 839, 840, 843, 844, 847, 848, 851, 852, 855, 856, 859, 862, 865, 866, 869, 870, 873, 874, 877, 878, 881, 904, 905, 908, 909, 910, 911, 912, 914, 915, 917, 920, 921, 922, 925, 926, 934, 935, 936, 939, 941, 944, 979, 980, 983, 985, 988], "overridden": [18, 64], "extend": [18, 64, 156, 159, 161, 168], "__new__": [18, 64], "help": [18, 64, 149, 150, 157, 161, 163, 164, 172, 173, 174, 185, 609, 615, 946, 971, 974, 990], "accur": [18, 64, 371, 463, 466], "__reduce__": [18, 64], "pickl": [18, 64, 67, 68, 164, 173], "__reduce_ex__": [18, 64], "protocol": [18, 64], "__setattr__": [18, 164], "valu": [18, 46, 47, 54, 55, 64, 67, 68, 69, 70, 71, 92, 93, 125, 126, 127, 128, 129, 130, 131, 132, 136, 137, 138, 139, 140, 141, 142, 143, 145, 151, 157, 159, 160, 164, 165, 166, 167, 168, 170, 172, 175, 187, 213, 214, 215, 228, 229, 236, 237, 240, 242, 243, 245, 246, 284, 290, 299, 300, 301, 321, 333, 364, 365, 371, 372, 375, 377, 380, 385, 388, 390, 393, 398, 401, 434, 437, 451, 454, 455, 458, 467, 470, 471, 474, 475, 478, 479, 482, 495, 498, 499, 502, 539, 540, 541, 544, 550, 553, 554, 557, 558, 561, 566, 569, 600, 604, 605, 608, 609, 621, 622, 624, 625, 630, 636, 637, 638, 641, 647, 650, 654, 664, 665, 666, 667, 668, 669, 682, 683, 685, 688, 690, 692, 694, 703, 705, 716, 720, 721, 722, 723, 724, 725, 726, 727, 728, 731, 732, 733, 734, 766, 768, 775, 777, 778, 780, 781, 782, 784, 785, 787, 788, 790, 800, 802, 822, 823, 826, 832, 833, 834, 835, 848, 851, 852, 855, 878, 880, 881, 882, 883, 884, 886, 890, 891, 892, 893, 894, 899, 902, 903, 904, 905, 908, 909, 910, 911, 912, 914, 915, 917, 919, 921, 922, 923, 925, 926, 927, 928, 930, 932, 933, 934, 935, 936, 939, 941, 944, 946, 951, 954, 955, 958, 959, 962, 963, 966, 967, 970, 971, 974, 975, 978], "setattr": 18, "__sizeof__": [18, 64], "size": [18, 64, 67, 68, 69, 70, 71, 125, 126, 127, 172, 173, 213, 242, 243, 245, 246, 321, 363, 364, 365, 609, 665, 671, 721, 733, 734, 746, 748, 762, 764, 772, 774, 778, 780, 785, 787, 797, 799, 822, 836, 839, 856, 859, 861, 862, 865, 909, 910, 914, 915, 917, 921, 922, 924, 979, 980, 983, 985, 988], "memori": [18, 64, 166, 167, 185, 187, 321, 339, 360, 365, 367, 370, 721, 731, 990], "byte": [18, 64], "__str__": [18, 64], "__subclasshook__": [18, 64], "overrid": [18, 64, 609, 662], "issubclass": [18, 64], "invok": [18, 64], "earli": [18, 64, 151, 990], "abcmeta": [18, 64], "__subclasscheck__": [18, 64], "true": [18, 28, 29, 34, 35, 42, 43, 56, 57, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 125, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 157, 159, 160, 164, 165, 167, 170, 172, 173, 174, 175, 198, 199, 204, 206, 208, 210, 211, 213, 214, 216, 217, 219, 221, 223, 225, 227, 228, 230, 231, 233, 235, 237, 239, 241, 242, 243, 244, 245, 247, 248, 250, 252, 253, 255, 257, 258, 260, 261, 263, 265, 266, 267, 269, 271, 272, 274, 276, 277, 279, 280, 282, 284, 290, 293, 294, 295, 296, 297, 321, 340, 357, 361, 362, 371, 372, 374, 376, 377, 379, 381, 383, 385, 387, 389, 390, 392, 394, 396, 398, 400, 402, 404, 406, 408, 410, 412, 413, 414, 416, 418, 420, 422, 424, 426, 428, 430, 432, 433, 434, 436, 438, 440, 442, 444, 446, 448, 450, 451, 453, 455, 457, 459, 461, 463, 465, 467, 469, 471, 473, 475, 477, 478, 479, 481, 482, 483, 485, 486, 487, 489, 490, 491, 493, 494, 495, 497, 498, 499, 501, 502, 503, 505, 507, 509, 511, 513, 515, 517, 519, 521, 523, 525, 527, 529, 530, 531, 533, 534, 535, 537, 541, 543, 545, 546, 548, 550, 552, 553, 554, 556, 558, 560, 562, 564, 566, 568, 570, 572, 574, 576, 578, 580, 582, 584, 586, 588, 590, 591, 593, 595, 596, 598, 600, 601, 603, 605, 607, 609, 610, 611, 612, 613, 614, 617, 618, 619, 620, 622, 623, 627, 634, 636, 638, 640, 642, 648, 649, 656, 671, 677, 679, 682, 683, 690, 691, 692, 693, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 716, 721, 729, 734, 735, 737, 738, 739, 758, 760, 762, 764, 785, 786, 787, 800, 802, 806, 807, 809, 810, 811, 812, 814, 815, 816, 817, 819, 820, 821, 822, 823, 825, 827, 828, 830, 832, 834, 836, 838, 840, 842, 844, 846, 848, 850, 852, 854, 856, 858, 860, 861, 862, 864, 866, 868, 870, 872, 874, 876, 878, 880, 882, 883, 884, 885, 886, 887, 896, 897, 899, 905, 907, 909, 910, 915, 916, 918, 921, 922, 923, 925, 926, 927, 928, 929, 931, 932, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 949, 951, 953, 954, 955, 957, 958, 959, 961, 962, 963, 965, 966, 967, 969, 970, 971, 973, 974, 975, 977, 978, 979, 980, 982, 983, 984, 985, 987, 988, 989], "notimpl": [18, 64], "normal": [18, 64, 139, 140, 173, 822, 866, 869, 904, 905, 908, 909, 914], "algorithm": [18, 64, 125, 126, 127, 128, 129, 130, 131, 132, 187, 721, 722, 723, 724, 725, 726, 727, 728], "outcom": [18, 64], "cach": [18, 64, 159, 160, 321, 339, 609, 620], "arraywithactiv": 19, "softplu": [19, 20, 65, 66, 198, 208, 990], "instanc": [19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 32, 33, 34, 35, 36, 37, 42, 43, 46, 47, 54, 55, 62, 63, 65, 66, 67, 68, 69, 70, 74, 75, 78, 79, 80, 81, 82, 83, 88, 89, 92, 93, 100, 101, 108, 109, 114, 115, 152, 156, 157, 159, 160, 163, 165, 167, 168, 173, 174, 175, 188, 196, 198, 200, 201, 202, 203, 204, 205, 206, 207, 209, 213, 214, 215, 217, 218, 220, 222, 223, 224, 226, 228, 229, 231, 232, 234, 236, 237, 238, 240, 242, 243, 245, 246, 248, 251, 253, 254, 258, 259, 261, 262, 264, 266, 268, 270, 271, 273, 275, 276, 278, 279, 281, 283, 284, 293, 294, 295, 296, 321, 330, 362, 371, 372, 373, 374, 375, 385, 386, 387, 388, 390, 393, 410, 413, 430, 433, 434, 435, 436, 437, 442, 445, 467, 468, 469, 470, 479, 482, 499, 502, 539, 540, 546, 549, 550, 553, 566, 569, 582, 585, 586, 589, 595, 597, 598, 599, 600, 602, 603, 604, 609, 610, 611, 612, 626, 637, 638, 639, 640, 653, 677, 679, 685, 686, 687, 689, 721, 724, 727, 733, 734, 735, 736, 737, 738, 740, 742, 743, 745, 746, 748, 806, 807, 810, 822, 823, 824, 825, 836, 839, 840, 843, 848, 851, 856, 857, 858, 859, 861, 870, 873, 904, 905, 908, 909, 914, 915, 917, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 935, 936, 939, 946, 947, 950, 951, 954, 979, 980, 983], "variant": [19, 20, 26, 27, 28, 29, 32, 33, 34, 35, 36, 37, 42, 43, 46, 47, 54, 55, 65, 66, 74, 75, 78, 79, 80, 81, 82, 83, 88, 89, 92, 93, 96, 97, 100, 101, 156, 157, 204, 205, 206, 208, 217, 218, 223, 224, 231, 232, 237, 238, 253, 254, 261, 262, 266, 268, 271, 273, 279, 281, 293, 294, 295, 297, 372, 373, 374, 376, 385, 386, 387, 389, 434, 435, 436, 467, 468, 469, 595, 596, 597, 598, 600, 601, 602, 603, 610, 611, 612, 614, 638, 639, 640, 642, 685, 686, 687, 689, 735, 736, 737, 739, 823, 824, 825, 827, 856, 857, 858, 860, 911, 913, 928, 929, 930, 931], "simpli": [19, 20, 26, 27, 28, 29, 32, 33, 34, 35, 36, 37, 42, 43, 46, 47, 54, 55, 65, 66, 67, 68, 74, 75, 78, 79, 80, 81, 82, 83, 88, 89, 92, 93, 96, 97, 100, 101, 151, 156, 157, 159, 160, 163, 164, 166, 167, 168, 170, 174, 175, 204, 205, 206, 208, 217, 218, 223, 224, 231, 232, 237, 238, 253, 254, 261, 262, 266, 268, 271, 273, 279, 281, 293, 294, 295, 297, 371, 372, 373, 374, 376, 385, 386, 387, 389, 434, 435, 436, 463, 466, 467, 468, 469, 595, 596, 597, 598, 600, 601, 602, 603, 610, 611, 612, 614, 638, 639, 640, 642, 685, 686, 687, 689, 735, 736, 737, 739, 823, 824, 825, 827, 856, 857, 858, 860, 911, 913, 928, 929, 930, 931], "wrap": [19, 20, 21, 26, 27, 28, 29, 32, 33, 34, 35, 36, 37, 42, 43, 46, 47, 54, 55, 63, 65, 66, 67, 68, 69, 70, 71, 74, 75, 78, 79, 80, 81, 82, 83, 88, 89, 92, 93, 96, 97, 100, 101, 109, 154, 156, 159, 160, 161, 163, 164, 165, 166, 167, 168, 170, 172, 175, 187, 188, 196, 204, 205, 206, 208, 217, 218, 223, 224, 231, 232, 237, 238, 253, 254, 261, 262, 266, 268, 271, 273, 279, 281, 293, 294, 295, 297, 372, 373, 374, 376, 385, 386, 387, 389, 434, 435, 436, 467, 468, 469, 595, 596, 597, 598, 600, 601, 602, 603, 609, 610, 611, 612, 614, 620, 638, 639, 640, 642, 683, 685, 686, 687, 689, 719, 735, 736, 737, 739, 823, 824, 825, 827, 856, 857, 858, 860, 911, 913, 928, 929, 930, 931], "docstr": [19, 20, 26, 27, 28, 29, 32, 33, 34, 35, 36, 37, 42, 43, 46, 47, 54, 55, 65, 66, 74, 75, 78, 79, 80, 81, 82, 83, 88, 89, 92, 93, 96, 97, 100, 101, 152, 153, 154, 155, 160, 164, 168, 204, 205, 206, 208, 213, 214, 215, 217, 218, 220, 222, 223, 224, 226, 228, 229, 231, 232, 234, 236, 237, 238, 240, 242, 243, 248, 251, 253, 254, 258, 259, 261, 262, 264, 266, 268, 270, 271, 273, 275, 276, 278, 279, 281, 283, 284, 293, 294, 295, 296, 297, 371, 372, 373, 374, 375, 376, 385, 386, 387, 388, 389, 390, 393, 410, 413, 430, 433, 434, 435, 436, 437, 442, 445, 467, 468, 469, 470, 499, 502, 550, 553, 566, 569, 582, 585, 586, 589, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 610, 611, 612, 614, 638, 639, 640, 642, 685, 686, 687, 689, 734, 735, 736, 737, 739, 743, 745, 746, 748, 822, 823, 824, 825, 827, 836, 839, 840, 843, 856, 857, 858, 859, 860, 911, 913, 926, 927, 928, 929, 930, 931, 932, 935, 936, 939, 946, 951, 954, 979, 980, 983], "appli": [19, 20, 21, 24, 25, 26, 27, 28, 29, 32, 33, 34, 35, 36, 37, 42, 43, 46, 47, 54, 55, 65, 66, 67, 68, 74, 75, 78, 79, 80, 81, 82, 83, 88, 89, 92, 93, 96, 97, 100, 101, 111, 112, 113, 139, 140, 150, 151, 152, 156, 157, 159, 160, 162, 164, 165, 166, 167, 168, 170, 172, 173, 174, 175, 185, 187, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 217, 218, 223, 224, 231, 232, 237, 238, 253, 254, 261, 262, 266, 268, 271, 273, 279, 281, 284, 293, 294, 295, 297, 312, 372, 373, 374, 376, 385, 386, 387, 389, 434, 435, 436, 467, 468, 469, 595, 596, 597, 598, 600, 601, 602, 603, 609, 610, 611, 612, 614, 631, 632, 633, 638, 639, 640, 642, 683, 685, 686, 687, 689, 703, 705, 707, 709, 721, 730, 732, 733, 734, 735, 736, 737, 739, 766, 768, 775, 777, 806, 807, 810, 812, 815, 817, 820, 822, 823, 824, 825, 827, 856, 857, 858, 860, 866, 869, 882, 883, 884, 886, 892, 895, 898, 899, 904, 905, 908, 911, 913, 928, 929, 930, 931, 990], "minim": [19, 20, 26, 27, 28, 29, 32, 33, 34, 35, 36, 37, 42, 43, 46, 47, 54, 55, 65, 66, 74, 75, 78, 79, 80, 81, 82, 83, 88, 89, 92, 93, 96, 97, 100, 101, 156, 167, 170, 204, 205, 206, 208, 217, 218, 223, 224, 231, 232, 237, 238, 253, 254, 261, 262, 266, 268, 271, 273, 279, 281, 293, 294, 295, 297, 372, 373, 374, 376, 385, 386, 387, 389, 434, 435, 436, 467, 468, 469, 595, 596, 597, 598, 600, 601, 602, 603, 610, 611, 612, 614, 638, 639, 640, 642, 685, 686, 687, 689, 735, 736, 737, 739, 823, 824, 825, 827, 856, 857, 858, 860, 911, 913, 928, 929, 930, 931], "activ": [20, 62, 63, 66, 108, 109, 112, 113, 150, 151, 153, 155, 174, 199, 200, 201, 202, 203, 204, 207, 209, 990], "collect": [21, 67, 68, 111, 125, 139, 141, 159, 186, 198, 210, 321, 609, 683, 721, 806, 886, 899, 904, 909], "accept": [21, 150, 151, 156, 157, 159, 160, 163, 164, 166, 167, 168, 172, 213, 214, 215, 217, 220, 222, 223, 226, 228, 229, 231, 234, 236, 237, 240, 242, 243, 245, 246, 248, 251, 258, 259, 261, 264, 266, 270, 271, 275, 276, 278, 279, 283, 284, 293, 296, 371, 372, 375, 385, 388, 390, 393, 410, 413, 430, 433, 434, 437, 442, 445, 467, 470, 527, 530, 531, 534, 550, 553, 562, 565, 566, 569, 582, 585, 586, 589, 595, 599, 600, 604, 609, 637, 721, 724, 733, 734, 735, 738, 743, 745, 746, 748, 822, 836, 839, 840, 843, 856, 859, 904, 905, 908, 926, 927, 928, 932, 935, 936, 939, 946, 951, 954, 955, 958, 979, 980, 983, 990], "args_to_ivi": 21, "include_deriv": [21, 22, 23, 24, 25, 886, 888, 898], "keyword": [21, 22, 23, 64, 67, 68, 69, 70, 71, 137, 138, 155, 165, 166, 167, 168, 173, 213, 248, 251, 321, 330, 331, 345, 349, 353, 609, 616, 659, 886, 892, 946, 971, 974], "variabl": [21, 22, 23, 24, 25, 67, 68, 69, 70, 114, 115, 116, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 156, 161, 164, 165, 167, 168, 173, 174, 175, 187, 609, 619, 651, 652, 653, 654, 655, 656, 658, 675, 683, 690, 692, 694, 695, 697, 699, 701, 703, 705, 707, 709, 711, 713, 716, 719, 721, 732, 734, 782, 784, 882, 883, 884, 885, 904, 905, 908, 990], "nest": [21, 22, 23, 24, 25, 67, 68, 69, 70, 71, 137, 138, 141, 142, 143, 144, 145, 146, 155, 160, 163, 164, 172, 173, 174, 187, 321, 345, 349, 353, 609, 677, 882, 883, 884, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903], "unchang": [21, 22, 23, 24, 25], "posit": [21, 22, 23, 32, 33, 78, 79, 114, 115, 168, 173, 186, 212, 213, 228, 229, 284, 304, 321, 345, 349, 353, 371, 372, 375, 483, 486, 487, 490, 541, 544, 562, 565, 609, 636, 734, 735, 738, 822, 836, 839, 856, 859, 909, 919, 921, 924, 979, 980, 983, 985, 988], "bool": [21, 22, 23, 24, 25, 28, 29, 67, 68, 108, 109, 157, 164, 165, 167, 175, 210, 211, 213, 236, 284, 290, 293, 294, 296, 299, 300, 301, 302, 305, 308, 309, 310, 320, 321, 340, 341, 356, 365, 368, 371, 410, 413, 414, 417, 422, 425, 430, 433, 451, 454, 475, 478, 479, 482, 483, 486, 487, 490, 491, 494, 495, 498, 499, 502, 523, 526, 527, 530, 531, 534, 550, 553, 609, 610, 613, 617, 618, 627, 630, 634, 636, 646, 648, 653, 655, 656, 657, 658, 671, 681, 682, 683, 716, 734, 735, 738, 762, 764, 785, 787, 800, 802, 822, 861, 882, 883, 884, 885, 886, 887, 888, 892, 896, 897, 898, 909, 910, 921, 922, 923, 935, 936, 939, 941, 944, 946, 951, 954, 955, 958, 959, 962, 963, 966, 967, 970, 971, 974, 975, 978, 979, 980, 983, 985, 988], "whether": [21, 22, 23, 24, 25, 67, 68, 69, 70, 71, 108, 109, 114, 115, 125, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 149, 150, 165, 167, 168, 198, 199, 210, 211, 284, 290, 302, 308, 309, 310, 320, 321, 340, 341, 352, 356, 357, 360, 361, 365, 368, 370, 371, 491, 494, 609, 610, 613, 617, 618, 627, 630, 634, 636, 646, 648, 650, 653, 654, 655, 656, 657, 658, 659, 671, 675, 681, 682, 683, 690, 692, 694, 695, 697, 699, 701, 703, 705, 707, 709, 711, 713, 716, 721, 729, 734, 749, 751, 882, 883, 884, 885, 886, 887, 888, 892, 896, 897, 898, 899, 909, 910, 979, 980, 983, 985, 988], "recurs": [21, 22, 23, 24, 25, 67, 68, 150, 153, 160, 164, 174, 187, 886, 887, 888, 896, 897, 898], "deriv": [21, 22, 23, 24, 25, 137, 141, 145, 147, 165, 166, 172, 174, 213, 223, 226, 237, 240, 261, 264, 279, 283, 683, 685, 688, 690, 692, 695, 697, 703, 705, 707, 709, 711, 713, 886, 888, 898], "tupl": [21, 22, 23, 24, 25, 42, 43, 54, 55, 64, 67, 68, 155, 164, 165, 166, 168, 172, 173, 174, 187, 213, 217, 220, 222, 236, 253, 256, 258, 259, 276, 278, 284, 292, 306, 321, 340, 609, 636, 672, 721, 724, 727, 728, 731, 734, 766, 768, 775, 777, 785, 786, 787, 791, 793, 800, 802, 822, 828, 831, 832, 835, 840, 843, 844, 847, 852, 855, 856, 859, 862, 865, 866, 869, 878, 881, 882, 883, 884, 885, 886, 888, 889, 891, 893, 894, 895, 897, 898, 900, 901, 902, 903, 909, 914, 915, 917, 921, 924, 926, 927, 928, 930, 932, 933, 946, 951, 954, 955, 958, 959, 962, 963, 966, 967, 970, 971, 974, 975, 978, 979, 980, 983, 985, 988], "list": [21, 22, 23, 24, 25, 26, 27, 62, 63, 64, 67, 68, 82, 83, 100, 101, 108, 109, 125, 126, 127, 128, 129, 130, 131, 132, 150, 152, 153, 155, 157, 165, 166, 168, 170, 173, 174, 175, 187, 213, 214, 215, 217, 220, 222, 248, 249, 251, 253, 256, 258, 259, 276, 278, 284, 291, 321, 330, 331, 340, 342, 343, 346, 347, 350, 351, 365, 609, 618, 672, 677, 681, 685, 687, 689, 721, 722, 723, 724, 725, 726, 727, 728, 734, 791, 793, 822, 828, 831, 840, 843, 861, 866, 869, 886, 887, 888, 892, 897, 898, 904, 905, 908, 921, 924, 926, 928, 929, 931, 932, 990], "kei": [21, 22, 23, 64, 67, 68, 69, 70, 71, 114, 115, 125, 136, 141, 145, 164, 173, 321, 333, 609, 615, 625, 721, 732, 733, 882, 883, 884, 886, 889, 895, 899], "word": [21, 22, 23, 114, 115, 213, 214, 215, 909, 915, 917], "args_to_n": [21, 167, 172], "to_ivi": [21, 67, 68, 172, 886, 899], "input": [21, 24, 25, 36, 37, 67, 68, 69, 70, 71, 78, 79, 80, 81, 82, 83, 88, 89, 92, 93, 96, 97, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 139, 140, 155, 156, 157, 159, 160, 161, 163, 164, 165, 166, 167, 168, 170, 172, 173, 174, 175, 187, 188, 196, 198, 199, 200, 201, 202, 203, 204, 207, 209, 210, 211, 213, 214, 215, 217, 220, 222, 223, 226, 228, 229, 231, 234, 236, 237, 240, 242, 243, 245, 246, 248, 251, 253, 256, 258, 259, 261, 264, 266, 270, 271, 275, 276, 278, 279, 283, 284, 290, 291, 292, 293, 296, 298, 299, 300, 301, 302, 303, 309, 310, 311, 312, 316, 321, 330, 331, 340, 341, 342, 343, 345, 346, 349, 353, 359, 365, 366, 371, 372, 375, 376, 377, 380, 381, 384, 385, 388, 389, 390, 393, 394, 397, 398, 401, 402, 405, 406, 409, 410, 413, 414, 417, 418, 421, 422, 425, 426, 429, 430, 433, 434, 437, 438, 441, 442, 445, 446, 449, 451, 454, 455, 458, 459, 462, 463, 466, 467, 470, 471, 474, 475, 478, 479, 482, 483, 486, 487, 490, 491, 494, 495, 498, 499, 502, 503, 506, 507, 510, 511, 514, 515, 518, 519, 522, 523, 526, 527, 530, 531, 534, 535, 538, 539, 540, 541, 544, 546, 549, 550, 553, 554, 557, 558, 561, 562, 565, 566, 569, 570, 573, 574, 577, 578, 581, 582, 585, 586, 589, 590, 594, 595, 596, 599, 600, 601, 604, 605, 608, 609, 610, 613, 614, 615, 617, 618, 619, 621, 622, 624, 626, 627, 628, 630, 631, 632, 633, 634, 635, 636, 637, 638, 641, 642, 646, 648, 649, 651, 652, 653, 655, 656, 657, 658, 662, 665, 666, 671, 672, 675, 677, 678, 679, 681, 682, 683, 685, 686, 687, 688, 689, 694, 699, 701, 716, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 738, 739, 740, 742, 743, 745, 746, 748, 749, 751, 752, 754, 755, 757, 758, 761, 762, 764, 766, 768, 769, 771, 772, 774, 775, 777, 778, 780, 781, 782, 784, 785, 787, 788, 790, 791, 793, 794, 796, 797, 799, 800, 802, 803, 805, 806, 807, 810, 812, 815, 817, 820, 822, 823, 826, 827, 828, 831, 832, 835, 836, 839, 840, 843, 844, 847, 848, 851, 852, 855, 856, 859, 860, 861, 862, 865, 866, 869, 870, 873, 874, 877, 878, 881, 882, 883, 884, 885, 904, 905, 908, 909, 910, 911, 912, 913, 914, 915, 917, 920, 921, 922, 923, 924, 925, 926, 927, 928, 932, 933, 934, 935, 936, 939, 941, 944, 946, 947, 950, 951, 954, 955, 958, 959, 962, 963, 966, 967, 970, 971, 974, 975, 978, 979, 980, 983, 985, 988], "leaf": [21, 24, 25, 67, 68, 160, 164, 173, 886, 887, 896, 897], "within": [21, 24, 25, 151, 159, 174, 187, 213, 214, 215, 909, 915, 917], "union": [21, 24, 25, 34, 35, 42, 43, 67, 68, 155, 157, 160, 163, 164, 165, 166, 167, 168, 170, 175, 198, 199, 200, 201, 202, 203, 204, 207, 209, 210, 211, 213, 214, 215, 217, 220, 222, 223, 226, 228, 229, 236, 237, 240, 242, 243, 245, 246, 248, 251, 253, 256, 258, 259, 261, 264, 266, 270, 271, 275, 276, 278, 279, 283, 284, 288, 289, 290, 291, 292, 298, 299, 300, 301, 302, 303, 304, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 320, 321, 337, 338, 339, 340, 341, 343, 346, 347, 348, 349, 354, 360, 362, 364, 365, 366, 367, 370, 371, 372, 375, 377, 380, 381, 384, 385, 388, 390, 393, 394, 397, 398, 401, 402, 405, 406, 409, 410, 413, 414, 417, 418, 421, 422, 425, 426, 429, 430, 433, 434, 437, 438, 441, 442, 445, 446, 449, 451, 454, 455, 458, 459, 462, 463, 466, 467, 470, 471, 474, 475, 478, 479, 482, 483, 486, 487, 490, 491, 494, 495, 498, 499, 502, 503, 506, 507, 510, 511, 514, 515, 518, 519, 522, 527, 530, 531, 534, 535, 538, 539, 540, 541, 544, 546, 549, 550, 553, 554, 557, 558, 561, 562, 565, 566, 569, 570, 573, 574, 577, 578, 581, 582, 585, 586, 589, 590, 594, 595, 599, 600, 604, 605, 608, 609, 610, 613, 617, 618, 621, 622, 624, 627, 628, 631, 632, 633, 635, 636, 637, 638, 639, 641, 646, 648, 649, 651, 652, 653, 662, 665, 666, 671, 672, 677, 678, 679, 681, 682, 683, 685, 688, 690, 692, 695, 697, 703, 705, 707, 709, 711, 713, 716, 718, 721, 722, 723, 724, 725, 726, 727, 728, 730, 731, 733, 734, 735, 738, 740, 742, 743, 745, 746, 748, 749, 751, 752, 754, 755, 757, 758, 761, 762, 764, 766, 768, 769, 771, 772, 774, 775, 777, 778, 780, 781, 782, 784, 785, 786, 787, 788, 790, 791, 793, 794, 796, 797, 799, 800, 802, 803, 805, 806, 807, 810, 812, 815, 817, 820, 822, 823, 826, 828, 831, 832, 835, 836, 839, 840, 843, 844, 847, 848, 851, 852, 855, 856, 859, 861, 862, 865, 866, 869, 870, 873, 874, 877, 878, 881, 882, 883, 884, 885, 886, 887, 888, 897, 898, 904, 905, 908, 909, 910, 911, 912, 914, 915, 917, 920, 921, 922, 923, 924, 925, 926, 927, 928, 932, 933, 934, 935, 936, 939, 941, 944, 946, 947, 950, 951, 954, 955, 958, 959, 962, 967, 970, 971, 974, 975, 978, 979, 980, 983, 985, 988], "nativearrai": [21, 24, 25, 26, 27, 34, 35, 155, 157, 160, 163, 164, 167, 168, 170, 172, 175, 188, 196, 198, 199, 200, 201, 202, 203, 204, 207, 209, 213, 214, 215, 217, 220, 223, 226, 237, 240, 242, 243, 245, 246, 248, 251, 253, 254, 256, 261, 264, 266, 270, 271, 275, 279, 283, 284, 290, 291, 292, 293, 296, 302, 304, 307, 309, 310, 312, 316, 321, 340, 341, 343, 359, 365, 366, 371, 372, 375, 377, 380, 381, 384, 385, 388, 390, 393, 394, 397, 398, 401, 402, 405, 406, 409, 410, 413, 414, 417, 418, 421, 422, 425, 426, 429, 430, 433, 434, 437, 438, 441, 442, 445, 446, 449, 451, 454, 455, 458, 459, 462, 463, 466, 467, 470, 471, 474, 475, 478, 479, 482, 483, 486, 487, 490, 491, 494, 495, 498, 499, 502, 503, 506, 507, 510, 511, 514, 515, 518, 519, 522, 527, 530, 531, 534, 535, 538, 539, 540, 541, 544, 546, 549, 550, 553, 554, 557, 558, 561, 562, 565, 566, 569, 570, 573, 574, 577, 578, 581, 582, 585, 586, 589, 590, 594, 595, 599, 600, 604, 605, 608, 609, 610, 611, 613, 617, 618, 621, 622, 624, 626, 627, 628, 631, 632, 633, 635, 636, 637, 638, 639, 641, 646, 648, 649, 651, 652, 653, 662, 665, 666, 671, 672, 677, 678, 679, 681, 682, 683, 685, 688, 690, 692, 695, 697, 703, 705, 707, 709, 711, 713, 716, 718, 721, 722, 723, 724, 725, 726, 727, 728, 730, 731, 733, 734, 735, 738, 740, 742, 743, 745, 746, 748, 749, 751, 752, 754, 755, 757, 758, 761, 762, 764, 766, 768, 769, 771, 772, 774, 775, 777, 778, 780, 781, 782, 784, 785, 787, 788, 790, 791, 793, 794, 796, 797, 799, 800, 802, 803, 805, 806, 807, 810, 812, 815, 817, 820, 822, 823, 826, 828, 831, 832, 835, 836, 839, 840, 843, 844, 847, 848, 851, 852, 855, 856, 859, 861, 862, 865, 866, 869, 870, 873, 874, 877, 878, 881, 886, 888, 898, 904, 905, 908, 909, 910, 920, 921, 922, 923, 924, 925, 926, 927, 928, 932, 933, 934, 935, 936, 939, 941, 944, 946, 947, 950, 951, 954, 955, 958, 959, 962, 967, 970, 971, 974, 975, 978, 979, 980, 983, 985, 988], "mayb": [21, 24, 25, 150, 170, 172], "travers": [21, 24, 25, 67, 68, 164, 170, 172, 886, 898], "lowest": [21, 24, 25, 67, 68, 160, 187, 886, 898, 909, 911, 912], "leav": [21, 24, 25, 67, 68, 69, 70, 156, 157, 159, 160, 164, 165, 167, 168, 173, 174, 822, 866, 869, 886, 887, 888, 896, 897, 898], "to_n": [21, 67, 68], "item": [21, 25, 62, 63, 64, 67, 68, 137, 138, 165, 170, 172, 173, 175, 284, 299, 321, 330, 331, 333, 340, 342, 344, 346, 348, 352, 609, 625, 647, 673, 674, 886, 891, 892, 893, 894, 898, 902, 903, 990], "arraywithcr": 26, "asarrai": [26, 27, 72, 73, 167, 213, 721, 722, 926, 928, 932], "copi": [26, 27, 67, 68, 72, 73, 153, 156, 161, 165, 170, 172, 173, 186, 187, 213, 217, 218, 219, 220, 221, 231, 234, 284, 290, 321, 366, 609, 626, 678, 679, 822, 852, 855, 886, 888, 935, 941, 944], "dtype": [26, 27, 28, 29, 58, 59, 67, 68, 72, 73, 74, 75, 104, 105, 116, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 147, 148, 155, 157, 160, 165, 166, 172, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 236, 237, 238, 239, 240, 241, 242, 243, 244, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 276, 277, 278, 279, 280, 281, 282, 283, 284, 288, 289, 290, 291, 293, 294, 295, 296, 297, 298, 299, 300, 301, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 320, 321, 361, 371, 426, 429, 609, 617, 618, 662, 678, 721, 729, 822, 836, 839, 904, 905, 908, 909, 915, 917, 921, 922, 923, 935, 941, 944, 946, 963, 964, 965, 966, 967, 970, 971, 972, 973, 974, 979, 980, 983, 990], "empty_lik": [26, 27, 72, 73, 213], "from_dlpack": [26, 27, 72, 73, 213], "full_lik": [26, 27, 72, 73, 213], "fill_valu": [26, 27, 72, 73, 165, 213, 236, 237, 238, 239, 240, 241, 371, 479, 482, 499, 502], "meshgrid": [26, 27, 72, 73, 213], "index": [26, 27, 67, 68, 72, 73, 153, 160, 164, 172, 212, 213, 228, 229, 248, 249, 250, 251, 252, 321, 362, 609, 615, 637, 638, 641, 822, 866, 869, 886, 889, 890, 893, 894, 895, 900, 902, 921, 922, 923, 924, 926, 927, 928, 932, 935, 936, 939, 993, 995], "xy": [26, 27, 72, 73, 213, 248, 249, 250, 251, 252], "ones_lik": [26, 27, 72, 73, 175, 213, 990], "tril": [26, 27, 72, 73, 213], "k": [26, 27, 64, 72, 73, 154, 170, 213, 228, 229, 230, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 609, 617, 721, 733, 734, 758, 761, 778, 780, 782, 784, 785, 787, 788, 790, 794, 796, 909, 914, 915, 917, 921, 924], "triu": [26, 27, 72, 73, 213], "zeros_lik": [26, 27, 72, 73, 213, 822, 823, 826, 990], "creation": [27, 67, 68, 69, 70, 71, 73, 155, 165, 166, 170, 214, 215, 217, 220, 222, 223, 226, 228, 229, 231, 234, 236, 237, 240, 242, 243, 245, 246, 248, 251, 253, 256, 258, 259, 261, 264, 266, 270, 271, 275, 276, 278, 279, 283], "data_typ": [28, 29, 74, 75, 155, 165, 284, 288, 289, 290, 291, 292, 293, 296, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320], "arraywithdatatyp": 28, "can_cast": [28, 29, 74, 75, 160, 165, 284, 297], "3": [28, 29, 32, 33, 34, 35, 36, 37, 42, 43, 46, 47, 69, 70, 74, 75, 78, 79, 80, 81, 82, 83, 88, 89, 92, 93, 96, 97, 100, 101, 150, 153, 157, 161, 164, 170, 172, 173, 174, 175, 198, 200, 201, 202, 203, 212, 213, 237, 240, 248, 251, 261, 264, 276, 278, 279, 283, 284, 293, 294, 295, 296, 297, 321, 340, 343, 359, 366, 371, 372, 374, 375, 376, 385, 386, 387, 388, 389, 390, 393, 410, 413, 426, 429, 430, 433, 434, 436, 437, 442, 445, 459, 462, 467, 468, 469, 470, 475, 478, 479, 482, 495, 498, 499, 502, 539, 540, 546, 549, 550, 553, 566, 569, 582, 585, 586, 589, 595, 596, 598, 599, 600, 601, 603, 604, 609, 610, 611, 612, 617, 618, 627, 634, 637, 638, 639, 640, 641, 642, 671, 672, 677, 679, 683, 685, 686, 687, 688, 689, 721, 722, 723, 724, 726, 727, 728, 733, 734, 735, 736, 737, 738, 739, 740, 742, 743, 745, 746, 748, 755, 757, 766, 768, 772, 774, 785, 787, 791, 793, 794, 796, 803, 805, 806, 807, 810, 817, 820, 822, 823, 824, 825, 826, 827, 828, 831, 836, 839, 840, 843, 848, 851, 852, 855, 856, 858, 859, 860, 861, 862, 865, 870, 873, 904, 905, 908, 909, 910, 911, 912, 913, 914, 915, 917, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 931, 932, 935, 936, 939, 946, 947, 950, 951, 954, 971, 974, 979, 980, 983, 990], "float32": [28, 29, 74, 75, 157, 165, 284, 288, 289, 293, 294, 295, 296, 297, 305, 904, 905, 908], "float64": [28, 29, 165, 284, 290, 293, 294, 296, 305], "arraywithdevic": [30, 172], "arraywithelementwis": [32, 152, 163], "ab": [32, 33, 78, 79, 159, 162, 371, 376, 558, 561, 734, 800, 802, 990], "6": [32, 33, 36, 37, 46, 47, 69, 70, 78, 79, 80, 81, 96, 97, 153, 157, 161, 164, 172, 173, 174, 198, 200, 201, 203, 213, 237, 240, 321, 343, 359, 371, 372, 373, 374, 375, 376, 385, 386, 387, 388, 389, 390, 393, 410, 413, 414, 417, 430, 433, 434, 435, 436, 437, 442, 445, 467, 470, 479, 482, 499, 502, 539, 540, 546, 549, 566, 569, 582, 585, 586, 589, 595, 599, 600, 604, 609, 618, 627, 637, 638, 641, 642, 672, 677, 683, 685, 686, 688, 721, 724, 727, 728, 733, 734, 740, 742, 743, 745, 746, 748, 772, 774, 785, 787, 791, 793, 806, 807, 810, 817, 820, 822, 823, 824, 826, 828, 831, 836, 839, 840, 843, 848, 851, 852, 855, 856, 859, 861, 870, 873, 904, 905, 908, 909, 910, 911, 912, 913, 921, 922, 925, 926, 927, 928, 932, 946, 947, 950, 951, 954], "y": [32, 33, 34, 35, 42, 43, 46, 47, 54, 55, 69, 70, 78, 79, 80, 81, 88, 89, 92, 93, 96, 97, 100, 101, 155, 157, 161, 164, 170, 172, 198, 200, 201, 202, 203, 204, 207, 209, 213, 236, 237, 240, 248, 251, 258, 259, 261, 264, 279, 283, 284, 290, 321, 341, 355, 359, 364, 371, 372, 373, 374, 375, 376, 385, 386, 387, 388, 389, 390, 393, 402, 405, 410, 413, 414, 417, 426, 429, 430, 433, 434, 435, 436, 437, 438, 441, 442, 445, 459, 462, 467, 468, 469, 470, 479, 482, 499, 502, 539, 540, 546, 549, 550, 553, 566, 569, 582, 585, 586, 589, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 609, 610, 611, 612, 613, 614, 617, 618, 626, 627, 634, 635, 637, 638, 639, 640, 641, 642, 671, 677, 678, 679, 683, 694, 721, 727, 728, 730, 734, 735, 736, 737, 738, 739, 740, 742, 743, 745, 755, 757, 772, 774, 791, 793, 794, 796, 806, 807, 810, 812, 815, 817, 820, 822, 823, 824, 825, 826, 827, 828, 831, 836, 839, 840, 843, 848, 851, 852, 855, 856, 857, 858, 859, 860, 861, 870, 873, 909, 910, 911, 912, 913, 914, 915, 917, 920, 921, 922, 923, 924, 925, 926, 928, 929, 930, 931, 932, 935, 936, 939, 946, 947, 950, 951, 954, 967, 970, 971, 974, 979, 980, 983], "aco": [32, 33, 78, 79, 371, 990], "acosh": [32, 33, 78, 79, 284, 305, 306, 371, 990], "add": [32, 33, 62, 63, 67, 68, 69, 70, 78, 79, 80, 81, 108, 109, 139, 140, 150, 151, 152, 154, 155, 156, 160, 161, 163, 164, 168, 170, 172, 187, 371, 372, 375, 389, 610, 614, 904, 905, 908, 990, 996], "x2": [32, 33, 34, 35, 42, 43, 67, 68, 78, 79, 80, 81, 88, 89, 157, 168, 284, 316, 321, 359, 371, 385, 386, 387, 388, 389, 402, 403, 404, 405, 410, 411, 412, 413, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 446, 447, 448, 449, 450, 451, 452, 453, 454, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 495, 496, 497, 498, 499, 500, 501, 502, 519, 520, 521, 522, 523, 524, 525, 526, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 550, 551, 552, 553, 558, 559, 560, 561, 562, 563, 564, 565, 590, 591, 592, 593, 594, 609, 610, 611, 612, 613, 614, 721, 726, 734, 740, 741, 742, 758, 759, 760, 761, 772, 773, 774, 782, 783, 784, 791, 792, 793, 797, 798, 799, 921, 925], "5": [32, 33, 34, 35, 42, 43, 46, 47, 69, 70, 74, 75, 78, 79, 80, 81, 82, 83, 92, 93, 96, 97, 125, 136, 151, 153, 157, 161, 168, 172, 173, 174, 198, 200, 201, 203, 213, 237, 240, 248, 251, 261, 264, 276, 278, 279, 283, 284, 293, 295, 296, 297, 321, 343, 359, 371, 372, 374, 375, 376, 385, 386, 387, 388, 389, 390, 393, 406, 409, 410, 413, 426, 429, 430, 433, 434, 435, 436, 437, 442, 445, 467, 468, 469, 470, 479, 482, 499, 502, 539, 540, 546, 549, 550, 553, 566, 569, 582, 585, 586, 589, 595, 596, 598, 599, 600, 601, 603, 604, 609, 610, 611, 618, 627, 637, 638, 641, 642, 672, 677, 683, 685, 687, 688, 689, 721, 724, 726, 727, 733, 734, 735, 736, 738, 740, 742, 743, 745, 746, 748, 755, 757, 772, 774, 791, 793, 794, 796, 806, 817, 820, 822, 823, 824, 825, 826, 827, 828, 831, 836, 839, 840, 843, 848, 851, 852, 855, 856, 858, 859, 860, 861, 870, 873, 904, 905, 908, 909, 910, 911, 912, 913, 920, 921, 923, 924, 925, 926, 927, 928, 932, 935, 936, 939, 946, 947, 950, 951, 954, 979, 980, 983], "z": [32, 33, 34, 35, 69, 70, 78, 79, 80, 81, 157, 161, 164, 170, 172, 321, 355, 371, 385, 386, 387, 388, 389, 410, 413, 430, 433, 479, 482, 499, 502, 539, 540, 609, 617, 618, 637, 638, 639, 640, 642, 671, 734, 740, 742, 806, 807, 810, 812, 815, 822, 823, 826, 921, 922, 946, 947, 950, 951, 954], "7": [32, 33, 46, 47, 69, 70, 78, 79, 96, 97, 151, 153, 157, 160, 164, 167, 198, 200, 201, 321, 343, 371, 372, 375, 385, 386, 387, 388, 389, 410, 413, 414, 417, 430, 433, 434, 437, 442, 445, 459, 462, 467, 470, 479, 482, 499, 502, 539, 540, 566, 569, 582, 585, 595, 599, 600, 604, 609, 618, 627, 637, 683, 685, 688, 690, 692, 703, 705, 721, 727, 728, 733, 734, 740, 742, 743, 745, 746, 748, 772, 774, 791, 793, 806, 807, 810, 812, 815, 817, 820, 822, 823, 824, 826, 836, 839, 840, 843, 848, 851, 861, 870, 873, 904, 905, 908, 909, 910, 911, 912, 913, 914, 915, 917, 921, 925, 926, 927, 946, 947, 950], "9": [32, 33, 36, 37, 46, 47, 69, 70, 78, 79, 82, 83, 96, 97, 141, 142, 143, 153, 157, 173, 174, 371, 385, 386, 387, 388, 389, 410, 413, 414, 417, 539, 540, 566, 569, 582, 585, 586, 589, 609, 637, 683, 685, 686, 687, 688, 689, 690, 691, 692, 693, 703, 704, 705, 706, 721, 724, 727, 728, 734, 740, 742, 743, 745, 746, 748, 772, 774, 785, 787, 791, 793, 822, 823, 824, 826, 840, 843, 848, 851, 856, 859, 861, 909, 910, 911, 912, 913, 921, 925, 926, 927, 946, 947, 950], "asin": [32, 33, 78, 79, 371, 990], "asinh": [32, 33, 78, 79, 371, 990], "atan": [32, 33, 78, 79, 371, 990], "atan2": [32, 33, 78, 79, 371, 990], "atanh": [32, 33, 78, 79, 371, 990], "bitwise_and": [32, 33, 78, 79, 371], "bitwise_invert": [32, 33, 78, 79, 371], "bitwise_left_shift": [32, 33, 78, 79, 371], "bitwise_or": [32, 33, 78, 79, 371], "bitwise_right_shift": [32, 33, 78, 79, 371], "bitwise_xor": [32, 33, 78, 79, 371], "ceil": [32, 33, 78, 79, 213, 214, 215, 371, 990], "cosh": [32, 33, 78, 79, 371, 990], "divid": [32, 33, 67, 68, 78, 79, 157, 163, 371, 471, 474, 609, 673, 822, 861], "equal": [32, 33, 67, 68, 78, 79, 157, 164, 165, 213, 228, 229, 236, 237, 240, 284, 290, 371, 418, 421, 426, 429, 483, 486, 487, 490, 558, 561, 566, 569, 609, 610, 613, 617, 618, 734, 746, 748, 766, 768, 775, 777, 822, 823, 826, 832, 835, 861, 878, 881, 909, 915, 917, 926, 927, 928, 932, 934, 935, 936, 939, 941, 944, 946, 955, 958, 967, 970, 971, 974, 975, 978], "erf": [32, 33, 78, 79, 371], "exp": [32, 33, 78, 79, 371, 463, 466, 519, 522, 990], "expm1": [32, 33, 78, 79, 371], "floor": [32, 33, 78, 79, 371, 426, 429, 609, 635, 990], "floor_divid": [32, 33, 78, 79, 371], "greater": [32, 33, 67, 68, 78, 79, 371, 377, 380, 390, 393, 402, 405, 418, 421, 426, 429, 467, 470, 471, 474, 558, 561, 562, 565, 570, 573, 605, 608, 734, 740, 742, 822, 862, 865, 909, 915, 917], "greater_equ": [32, 33, 78, 79, 371], "isfinit": [32, 33, 78, 79, 371], "isinf": [32, 33, 78, 79, 371], "isnan": [32, 33, 78, 79, 371], "less_equ": [32, 33, 78, 79, 371], "log": [32, 33, 78, 79, 150, 151, 160, 164, 167, 170, 173, 213, 245, 246, 371, 511, 514, 519, 522, 734, 781, 990], "log10": [32, 33, 78, 79, 371], "log1p": [32, 33, 78, 79, 371], "log2": [32, 33, 78, 79, 371], "logaddexp": [32, 33, 78, 79, 371], "logical_and": [32, 33, 78, 79, 371, 990], "logical_not": [32, 33, 78, 79, 371, 990], "logical_or": [32, 33, 78, 79, 371, 990], "logical_xor": [32, 33, 78, 79, 371], "multipli": [32, 33, 78, 79, 157, 161, 163, 371, 609, 627], "neg": [32, 33, 78, 79, 160, 164, 167, 198, 200, 213, 214, 215, 228, 229, 371, 483, 486, 487, 490, 541, 544, 558, 561, 562, 565, 734, 785, 787, 797, 799, 800, 802, 822, 840, 843, 856, 859, 979, 980, 983, 985, 988], "not_equ": [32, 33, 78, 79, 371], "pow": [32, 33, 78, 79, 371], "remaind": [32, 33, 67, 68, 78, 79, 371, 609, 635, 822, 861], "sin": [32, 33, 78, 79, 163, 170, 371, 609, 636, 990], "sinh": [32, 33, 78, 79, 371, 990], "sqrt": [32, 33, 78, 79, 371, 734, 800, 802], "squar": [32, 33, 78, 79, 371, 582, 585, 721, 724, 734, 735, 738, 743, 745, 749, 751, 752, 754, 755, 757, 765, 781, 782, 784, 785, 787], "subtract": [32, 33, 78, 79, 157, 163, 371], "tan": [32, 33, 78, 79, 156, 160, 164, 167, 168, 170, 371, 390, 393, 596, 734, 746, 748, 926, 927, 935, 936, 939, 990], "56": [32, 33, 78, 79, 157, 371, 582, 585, 595, 596, 597, 598, 599, 683, 685, 688, 734, 772, 774, 946, 947, 950], "19": [32, 33, 78, 79, 157, 371, 430, 433, 595, 596, 597, 598, 599, 734, 746, 748], "tanh": [32, 33, 78, 79, 170, 198, 371, 601, 990], "762": [32, 33, 78, 79, 198, 209, 371, 600, 602, 603, 604], "964": [32, 33, 78, 79, 198, 209, 371, 600, 602, 603, 604], "trunc": [32, 33, 78, 79, 371], "elementwis": [33, 67, 68, 79, 155, 160, 170, 175, 372, 375, 377, 380, 381, 384, 385, 388, 390, 393, 394, 397, 398, 401, 402, 405, 406, 409, 410, 413, 414, 417, 418, 421, 422, 425, 426, 429, 430, 433, 434, 437, 438, 441, 442, 445, 446, 449, 451, 454, 455, 458, 459, 462, 463, 466, 467, 470, 471, 474, 475, 478, 479, 482, 483, 486, 487, 490, 491, 494, 495, 498, 499, 502, 503, 506, 507, 510, 511, 514, 515, 518, 519, 522, 523, 526, 527, 530, 531, 534, 535, 538, 539, 540, 541, 544, 546, 549, 550, 553, 554, 557, 558, 561, 562, 565, 566, 569, 570, 573, 574, 577, 578, 581, 582, 585, 586, 589, 590, 594, 595, 599, 600, 604, 605, 608], "arraywithgener": [34, 172], "all_equ": [34, 35, 80, 81, 609, 614], "equality_matrix": [34, 35, 80, 81, 609, 610, 611, 612, 613, 614], "x1": [34, 35, 78, 79, 80, 81, 157, 168, 284, 316, 321, 359, 371, 385, 388, 389, 402, 405, 410, 413, 418, 421, 422, 425, 426, 429, 430, 433, 446, 449, 450, 451, 454, 471, 474, 475, 478, 479, 482, 495, 498, 499, 502, 519, 522, 523, 526, 531, 534, 535, 538, 539, 540, 541, 544, 545, 550, 553, 558, 561, 562, 565, 590, 591, 594, 609, 610, 611, 612, 613, 614, 617, 721, 726, 734, 740, 742, 758, 761, 772, 774, 782, 784, 791, 793, 797, 799, 921, 925], "mix": [34, 35, 69, 70, 154, 157, 159, 170, 284, 312, 321, 359, 371, 385, 388, 410, 413, 430, 433, 479, 482, 499, 502, 539, 540, 550, 553, 609, 610, 611, 626, 634, 637, 638, 641, 677, 678, 679, 721, 724, 727, 728, 733, 734, 735, 738, 791, 793, 806, 807, 810, 817, 820, 822, 823, 826, 904, 905, 908, 921, 925, 946, 947, 950, 955, 958], "gather_nd": [34, 35, 67, 68, 80, 81, 609, 642, 990], "indic": [34, 35, 67, 68, 80, 81, 125, 126, 127, 128, 129, 130, 131, 132, 137, 138, 153, 171, 175, 198, 203, 371, 570, 573, 609, 637, 638, 639, 640, 641, 642, 649, 662, 665, 666, 721, 722, 723, 724, 725, 726, 727, 728, 734, 800, 802, 822, 856, 859, 886, 887, 889, 891, 893, 894, 895, 897, 900, 901, 902, 903, 904, 905, 908, 909, 910, 921, 922, 923, 924, 926, 927, 933, 935, 936, 939, 941, 944, 990, 993, 995], "gener": [35, 62, 63, 67, 68, 81, 108, 109, 141, 145, 151, 152, 153, 154, 155, 156, 157, 160, 163, 164, 165, 166, 167, 168, 169, 170, 172, 174, 175, 186, 187, 210, 213, 214, 215, 217, 220, 222, 223, 226, 228, 229, 231, 234, 236, 237, 240, 242, 243, 245, 246, 258, 259, 261, 264, 266, 270, 271, 275, 276, 278, 279, 283, 284, 293, 296, 371, 372, 375, 390, 393, 430, 433, 434, 437, 442, 445, 467, 470, 550, 553, 562, 565, 582, 585, 586, 589, 610, 613, 615, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 641, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 699, 701, 734, 746, 748, 822, 836, 839, 856, 859, 909, 910, 911, 912, 915, 917, 919, 926, 927, 928, 932, 935, 936, 939, 946, 951, 954, 990], "arraywithgradi": [36, 172], "adam_step": [36, 37, 82, 83, 683, 689], "mw": [36, 37, 82, 83, 174, 683, 685, 686, 687, 688, 689, 690, 692], "vw": [36, 37, 82, 83, 174, 683, 685, 686, 687, 688, 689, 690, 692], "beta1": [36, 37, 82, 83, 141, 142, 143, 174, 683, 685, 686, 687, 688, 689, 690, 691, 692, 693, 703, 704, 705, 706], "beta2": [36, 37, 82, 83, 141, 142, 143, 174, 683, 685, 686, 687, 688, 689, 690, 691, 692, 693, 703, 704, 705, 706], "999": [36, 37, 78, 79, 82, 83, 141, 142, 143, 174, 371, 600, 601, 603, 604, 683, 685, 686, 687, 688, 689, 690, 691, 692, 693, 703, 704, 705, 706], "epsilon": [36, 37, 44, 45, 48, 49, 82, 83, 90, 91, 94, 95, 139, 140, 141, 142, 143, 160, 164, 167, 174, 683, 685, 686, 687, 688, 689, 690, 691, 692, 693, 703, 704, 705, 706, 734, 766, 768, 775, 777, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 904, 905, 906, 907, 908], "1e": [36, 37, 44, 45, 48, 49, 82, 83, 90, 91, 94, 95, 141, 142, 143, 144, 146, 160, 164, 167, 174, 175, 609, 645, 683, 685, 686, 687, 688, 689, 690, 691, 692, 693, 703, 704, 705, 706, 734, 785, 787, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 904, 905, 906, 907, 908, 990], "07": [36, 37, 44, 45, 82, 83, 90, 91, 141, 142, 143, 174, 683, 685, 686, 687, 688, 689, 690, 691, 692, 693, 703, 704, 705, 706, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821], "dcdw": [36, 37, 82, 83, 683, 685, 686, 687, 688, 689, 690, 691, 692, 693, 695, 696, 697, 698, 703, 704, 705, 706, 707, 708, 709, 710], "adam_step_delta": [36, 37, 82, 83, 683, 685, 686, 687, 688, 689], "639": [36, 37, 683, 685, 686, 688], "11": [36, 37, 69, 70, 78, 79, 96, 97, 157, 164, 371, 385, 387, 388, 389, 410, 413, 566, 569, 609, 627, 637, 685, 686, 734, 746, 748, 772, 774, 806, 817, 820, 822, 840, 843, 848, 851, 909, 911, 912, 913, 921, 925, 926, 927, 946, 947, 950], "32": [36, 37, 173, 198, 200, 371, 430, 433, 685, 686, 721, 724, 727, 734, 772, 774, 921, 925, 946, 947, 950], "63": [36, 37, 88, 89, 371, 582, 585, 685, 686, 734, 735, 737, 738, 739, 772, 774, 946, 947, 950], "00121": [36, 37, 685, 686], "0102": [36, 37, 685, 686], "0397": [36, 37, 685, 686], "gradient": [37, 67, 68, 83, 141, 142, 143, 144, 145, 146, 155, 164, 173, 174, 186, 187, 321, 365, 685, 688, 690, 692, 694, 695, 697, 699, 701, 703, 705, 707, 709, 711, 713, 715, 716, 717, 718, 719, 720, 882, 883, 884, 885, 990], "arraywithimag": [38, 172], "imag": [39, 85, 150, 153, 155, 170, 171, 173, 175, 186, 721, 722, 723, 724, 725, 727, 728, 990], "arraywithlay": 40, "linear_algebra": [42, 43, 88, 89, 155, 172, 734, 735, 738, 740, 742, 743, 745, 746, 748, 749, 751, 752, 754, 755, 757, 758, 761, 762, 764, 765, 766, 768, 769, 771, 772, 774, 775, 777, 778, 780, 781, 782, 784, 785, 787, 788, 790, 791, 793, 794, 796, 797, 799, 800, 802, 803, 805], "arraywithlinearalgebra": 42, "choleski": [42, 43, 88, 89, 734, 739], "upper": [42, 43, 67, 68, 88, 89, 213, 228, 229, 271, 275, 734, 735, 736, 737, 738, 739, 778, 780, 909, 915, 917], "625": [42, 43, 734, 735, 736, 738], "16": [42, 43, 78, 79, 96, 97, 151, 157, 173, 371, 595, 596, 598, 599, 721, 727, 734, 735, 736, 738, 746, 748, 772, 774, 911, 913, 921, 925, 946, 947, 950], "25": [42, 43, 164, 371, 582, 585, 586, 589, 734, 735, 736, 738, 746, 748, 755, 757, 806, 812, 815, 904, 905, 908, 946, 947, 950], "cross": [42, 43, 69, 70, 734, 806, 807, 810, 812, 815, 817, 820, 990], "axi": [42, 43, 44, 45, 46, 47, 56, 57, 58, 59, 60, 61, 67, 68, 72, 73, 90, 91, 92, 93, 102, 103, 104, 105, 106, 107, 157, 160, 164, 165, 167, 168, 170, 172, 175, 186, 198, 203, 213, 242, 243, 244, 245, 246, 247, 321, 323, 326, 333, 346, 347, 348, 349, 350, 351, 352, 353, 365, 609, 627, 628, 637, 681, 734, 740, 741, 742, 746, 748, 797, 798, 799, 800, 801, 802, 806, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 828, 829, 830, 831, 832, 835, 836, 837, 838, 839, 840, 841, 842, 843, 848, 849, 850, 851, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 873, 874, 877, 878, 881, 909, 920, 921, 922, 923, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989], "det": [42, 43, 69, 70, 734], "diagon": [42, 43, 69, 70, 213, 228, 229, 266, 270, 271, 275, 734, 794, 796], "offset": [42, 43, 48, 49, 94, 95, 734, 746, 747, 748, 794, 795, 796, 904, 905, 906, 907, 908], "axis1": [42, 43, 46, 47, 92, 93, 734, 746, 747, 748, 822, 870, 871, 872, 873], "axis2": [42, 43, 734, 746, 747, 748], "eigh": [42, 43, 69, 70, 734], "namedtupl": [42, 43, 734, 749, 750, 751, 778, 779, 780, 785, 787, 926, 927, 928, 932], "eigvalsh": [42, 43, 69, 70, 734], "inv": [42, 43, 69, 70, 172, 734, 990], "matmul": [42, 43, 88, 89, 155, 161, 170, 734, 785, 787, 990], "matrix_norm": [42, 43, 67, 68, 734], "ord": [42, 43, 67, 68, 734, 762, 763, 764, 800, 801, 802], "fro": [42, 43, 734, 762, 763, 764], "keepdim": [42, 43, 58, 59, 60, 61, 67, 68, 104, 105, 106, 107, 609, 681, 734, 762, 763, 764, 800, 801, 802, 921, 922, 923, 946, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989], "matrix_rank": [42, 43, 69, 70, 734], "rtol": [42, 43, 734, 766, 767, 768, 775, 776, 777], "matrix_transpos": [42, 43, 69, 70, 172, 734], "outer": [42, 43, 69, 70, 734, 882, 883, 884, 885], "pinv": [42, 43, 69, 70, 734, 990], "qr": [42, 43, 69, 70, 734], "mode": [42, 43, 67, 68, 150, 157, 164, 187, 210, 211, 321, 350, 351, 352, 353, 365, 371, 385, 388, 541, 544, 734, 778, 779, 780], "reduc": [42, 43, 67, 68, 172, 321, 365, 609, 632, 734, 778, 779, 780, 921, 922, 923, 946, 951, 954, 955, 958, 959, 962, 963, 966, 967, 970, 971, 974, 975, 978, 979, 980, 983, 985, 988], "solv": [42, 43, 69, 70, 171, 186, 734], "svd": [42, 43, 69, 70, 734, 990], "full_matric": [42, 43, 734, 785, 786, 787], "svdval": [42, 43, 69, 70, 734], "tensordot": [42, 43, 69, 70, 734], "ax": [42, 43, 46, 47, 67, 68, 92, 93, 155, 157, 165, 172, 321, 365, 609, 627, 734, 762, 764, 782, 784, 791, 792, 793, 800, 802, 822, 832, 835, 840, 843, 844, 845, 846, 847, 856, 859, 862, 865, 870, 873, 878, 881, 921, 922, 923, 946, 951, 954, 955, 958, 959, 962, 963, 966, 967, 970, 971, 974, 975, 978, 979, 980, 983, 985, 988], "trace": [42, 43, 67, 68, 69, 70, 170, 187, 609, 655, 656, 658, 734], "vecdot": [42, 43, 69, 70, 734], "vector_norm": [42, 43, 67, 68, 734], "vector_to_skew_symmetric_matrix": [42, 43, 69, 70, 734, 990], "arraywithloss": 44, "binary_cross_entropi": [44, 45, 90, 91, 806], "pred": [44, 45, 90, 91, 160, 164, 167, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821], "cross_entropi": [44, 45, 90, 91, 160, 164, 167, 806, 817, 820], "sparse_cross_entropi": [44, 45, 90, 91, 806], "loss": [45, 91, 155, 160, 173, 174, 175, 807, 810, 812, 815, 817, 820, 990], "arraywithmanipul": 46, "clip": [46, 47, 67, 68, 92, 93, 160, 164, 167, 170, 173, 175, 371, 539, 540, 609, 621, 622, 624, 822, 827, 990], "x_min": [46, 47, 67, 68, 92, 93, 170, 175, 822, 823, 824, 825, 826, 827], "x_max": [46, 47, 67, 68, 92, 93, 170, 175, 822, 823, 824, 825, 826, 827], "roll": [46, 47, 92, 93, 164, 168, 822, 823, 824, 860], "8": [46, 47, 69, 70, 78, 79, 96, 97, 125, 136, 150, 153, 157, 164, 169, 173, 198, 202, 321, 343, 371, 385, 388, 389, 410, 413, 434, 437, 442, 445, 479, 482, 499, 502, 539, 540, 566, 569, 582, 585, 586, 589, 600, 604, 609, 618, 637, 683, 685, 688, 721, 728, 734, 740, 742, 743, 745, 746, 748, 772, 774, 791, 793, 806, 807, 810, 822, 823, 824, 826, 840, 843, 848, 851, 861, 909, 910, 911, 912, 913, 921, 925, 926, 927, 946, 947, 950, 990], "concat": [46, 47, 67, 68, 92, 93, 321, 350, 351, 352, 353, 365, 609, 636, 822, 990], "xs": [46, 47, 92, 93, 164, 321, 344, 348, 350, 351, 352, 609, 610, 613, 618, 683, 694, 822, 828, 829, 830, 831], "constant_pad": [46, 47, 92, 93, 822], "pad_width": [46, 47, 92, 93, 822, 832, 833, 834, 835, 878, 879, 880, 881], "expand_dim": [46, 47, 92, 93, 170, 173, 822, 990], "flip": [46, 47, 92, 93, 172, 173, 175, 371, 414, 417, 822, 848, 851, 990], "permute_dim": [46, 47, 92, 93, 822], "repeat": [46, 47, 67, 68, 92, 93, 151, 156, 157, 161, 163, 164, 609, 633, 822, 874, 877], "reshap": [46, 47, 67, 68, 92, 93, 167, 170, 172, 175, 822, 990], "shape": [46, 47, 67, 68, 72, 73, 82, 83, 92, 93, 96, 97, 100, 101, 125, 127, 128, 129, 130, 131, 132, 139, 140, 151, 155, 156, 157, 165, 166, 167, 168, 170, 172, 173, 174, 175, 198, 199, 200, 201, 202, 203, 204, 207, 209, 213, 214, 215, 217, 220, 222, 223, 226, 228, 229, 231, 234, 236, 237, 240, 242, 243, 245, 246, 248, 251, 258, 259, 260, 261, 264, 266, 270, 271, 275, 276, 277, 278, 279, 283, 284, 290, 291, 292, 321, 333, 361, 366, 371, 372, 375, 377, 380, 381, 384, 385, 388, 390, 393, 394, 397, 398, 401, 402, 405, 406, 409, 410, 413, 414, 417, 418, 421, 422, 425, 426, 429, 430, 433, 434, 437, 438, 441, 442, 445, 446, 449, 451, 454, 455, 458, 459, 462, 463, 466, 467, 470, 471, 474, 475, 478, 479, 482, 483, 486, 487, 490, 491, 494, 495, 498, 499, 502, 503, 506, 507, 510, 511, 514, 515, 518, 519, 522, 523, 526, 527, 530, 531, 534, 535, 538, 539, 540, 541, 544, 546, 549, 550, 553, 554, 557, 558, 561, 562, 565, 566, 569, 570, 573, 574, 577, 578, 581, 582, 585, 586, 589, 590, 594, 595, 599, 600, 604, 605, 608, 609, 621, 622, 624, 627, 631, 632, 633, 635, 638, 641, 646, 649, 662, 665, 666, 672, 683, 685, 687, 689, 716, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 732, 733, 734, 735, 738, 740, 742, 743, 745, 746, 748, 749, 751, 752, 754, 755, 757, 758, 761, 762, 764, 766, 768, 769, 771, 772, 774, 775, 777, 778, 780, 781, 782, 784, 785, 787, 788, 790, 791, 793, 794, 796, 797, 799, 800, 802, 803, 805, 806, 807, 810, 812, 815, 817, 820, 822, 823, 826, 828, 831, 832, 835, 836, 839, 840, 843, 844, 847, 848, 851, 852, 853, 854, 855, 856, 859, 861, 862, 865, 866, 869, 870, 873, 874, 877, 878, 881, 904, 905, 908, 909, 910, 911, 912, 913, 914, 915, 917, 918, 920, 921, 922, 924, 925, 929, 931, 935, 936, 939, 941, 944, 946, 947, 950, 979, 980, 983, 985, 988, 990], "shift": [46, 47, 92, 93, 157, 168, 371, 418, 421, 426, 429, 822, 856, 857, 858, 859, 860], "squeez": [46, 47, 92, 93, 822, 990], "stack": [46, 47, 67, 68, 92, 93, 125, 134, 170, 213, 266, 270, 271, 275, 734, 743, 745, 746, 748, 749, 751, 752, 754, 755, 757, 758, 761, 765, 766, 768, 769, 771, 775, 777, 778, 780, 785, 787, 788, 790, 794, 796, 822, 886, 887, 896, 897, 990], "swapax": [46, 47, 92, 93, 822], "axis0": [46, 47, 92, 93, 822, 870, 871, 872, 873], "tile": [46, 47, 92, 93, 822, 990], "rep": [46, 47, 92, 93, 822, 874, 875, 876, 877], "zero_pad": [46, 47, 92, 93, 822, 990], "arraywithnorm": 48, "layer_norm": [48, 49, 94, 95, 904], "normalized_idx": [48, 49, 94, 95, 904, 905, 906, 907, 908], "05": [48, 49, 94, 95, 321, 683, 685, 688, 904, 905, 906, 907, 908], "scale": [48, 49, 94, 95, 125, 133, 136, 141, 144, 164, 321, 363, 364, 683, 707, 709, 721, 729, 732, 733, 904, 905, 906, 907, 908], "new_std": [48, 49, 94, 95, 139, 140, 904, 905, 906, 907, 908], "norm": [49, 67, 68, 95, 140, 141, 143, 155, 609, 621, 622, 624, 734, 762, 764, 800, 802, 905, 908, 990], "arraywithrandom": [50, 172], "random": [51, 67, 68, 97, 155, 166, 175, 186, 910, 911, 912, 914, 915, 917, 919, 920, 990], "arraywithsearch": 52, "arraywithset": 54, "unique_count": [54, 55, 100, 101, 926, 929], "uc": [54, 55, 928, 930], "count": [54, 55, 157, 173, 321, 359, 734, 797, 799, 822, 840, 843, 926, 927, 928, 930, 932, 979, 980, 983, 985, 988], "arraywithsort": 56, "argsort": [56, 57, 102, 103, 935], "descend": [56, 57, 102, 103, 734, 785, 787, 788, 790, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945], "stabl": [56, 57, 102, 103, 150, 170, 187, 609, 644, 645, 667, 668, 673, 674, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945], "sort": [57, 67, 68, 69, 70, 71, 103, 155, 734, 749, 751, 785, 787, 788, 790, 936, 939], "arraywithstatist": 58, "einsum": [58, 59, 104, 105, 946], "equat": [58, 59, 104, 105, 734, 782, 784, 946, 947, 948, 949, 950], "max": [58, 59, 67, 68, 104, 105, 141, 143, 284, 304, 307, 371, 539, 609, 621, 622, 624, 632, 665, 666, 734, 766, 768, 775, 777, 946], "mean": [58, 59, 67, 68, 104, 105, 108, 109, 116, 150, 151, 154, 157, 160, 164, 165, 166, 167, 170, 172, 173, 174, 175, 186, 187, 321, 350, 351, 352, 353, 365, 609, 632, 882, 883, 884, 885, 886, 892, 909, 914, 926, 927, 946, 990], "min": [58, 59, 67, 68, 104, 105, 284, 304, 307, 371, 540, 609, 632, 665, 666, 673, 734, 778, 780, 785, 787, 788, 790, 800, 802, 946], "prod": [58, 59, 67, 68, 104, 105, 157, 165, 609, 632, 946], "std": [58, 59, 104, 105, 157, 909, 914, 926, 927, 946], "correct": [58, 59, 104, 105, 151, 152, 154, 160, 164, 165, 166, 168, 284, 316, 822, 823, 826, 946, 967, 968, 969, 970, 975, 976, 977, 978, 990], "sum": [58, 59, 67, 68, 104, 105, 160, 164, 165, 167, 170, 321, 350, 351, 352, 353, 365, 371, 385, 388, 519, 522, 609, 628, 632, 665, 666, 721, 733, 734, 785, 787, 794, 796, 800, 802, 946, 947, 950, 967, 970], "var": [58, 59, 104, 105, 108, 109, 157, 170, 882, 883, 884, 946], "statist": [59, 105, 108, 109, 155, 165, 947, 950, 951, 954, 955, 958, 959, 962, 963, 966, 967, 970, 971, 974, 975, 978], "arraywithutil": 60, "util": [61, 107, 155, 166, 321, 354, 980, 983, 985, 988], "add_ivy_array_instance_method": 62, "cl": [62, 63, 108, 109], "to_ignor": [62, 63, 108, 109, 886, 897], "loop": [62, 63, 108, 109, 161, 187, 882, 883, 884, 885], "_wrap_funct": [62, 63, 108, 109, 160, 162], "shown": [62, 63, 67, 68, 108, 109, 151, 157, 168, 170, 172, 187, 371, 410, 413, 430, 433, 442, 445, 566, 569, 600, 604, 734, 743, 745, 822, 836, 839, 840, 843, 926, 927, 935, 936, 939], "appropri": [62, 63, 108, 109, 151, 162, 371, 385, 388, 541, 544, 921, 922], "toi": [62, 63, 108, 109], "arrayexampl": [62, 63], "hasattr": [62, 63, 108, 109, 172], "relu": [62, 63, 69, 70, 173, 174, 198, 199, 200, 990], "softmax": [62, 63, 69, 70, 198, 721, 732, 733, 990], "empti": [64, 67, 68, 69, 70, 163, 165, 166, 213, 214, 215, 946, 967, 970, 971, 974, 979, 980, 983, 985, 988], "dictionari": [64, 67, 68, 69, 70, 71, 173, 187, 321, 364], "map": [64, 67, 68, 69, 70, 71, 125, 136, 159, 160, 164, 168, 173, 186, 187, 321, 330, 886, 893, 894, 898, 899], "pair": [64, 371, 402, 405, 721, 733, 734, 740, 742], "via": [64, 155, 164, 165, 166, 167, 170, 172, 173, 186, 886, 887, 896, 897], "v": [64, 125, 126, 127, 128, 129, 130, 131, 132, 134, 135, 136, 137, 138, 139, 140, 141, 145, 147, 148, 151, 170, 173, 174, 175, 721, 733, 990], "__delitem__": 64, "delet": [64, 151, 153], "__iter__": 64, "__len__": 64, "len": [64, 172, 175, 213, 248, 251], "__reversed__": 64, "revers": [64, 69, 70, 152, 156, 157, 175, 187, 609, 630, 822, 840, 843], "remov": [64, 67, 68, 151, 152, 153, 156, 159, 160, 165, 167, 175, 734, 746, 748, 758, 761, 794, 796, 822, 862, 865, 882, 883, 884], "fromkei": 64, "els": [64, 151, 152, 155, 160, 161, 167, 170, 172, 174, 175, 187, 609, 619, 630, 634, 886, 896], "view": [64, 150, 151, 213, 231, 234, 721, 724, 728], "correspond": [64, 67, 68, 69, 70, 151, 156, 157, 158, 160, 163, 164, 165, 168, 284, 291, 371, 402, 405, 558, 561, 734, 740, 742, 749, 751, 782, 784, 822, 828, 831, 856, 859, 909, 910, 921, 922, 923, 926, 927, 928, 932, 934, 946, 963, 966, 967, 970, 971, 974, 975, 978], "found": [64, 67, 68, 69, 70, 71, 150, 151, 156, 163, 164, 321, 355], "keyerror": 64, "popitem": 64, "lifo": 64, "setdefault": 64, "insert": [64, 822, 836, 839, 886, 891, 921, 922], "updat": [64, 67, 68, 114, 115, 141, 142, 143, 144, 145, 146, 150, 151, 152, 153, 154, 157, 158, 162, 163, 164, 165, 168, 170, 172, 173, 175, 187, 321, 330, 609, 653, 665, 666, 683, 685, 688, 690, 692, 695, 697, 703, 705, 707, 709, 711, 713, 721, 731, 882, 883, 884, 886, 893, 894, 902, 903], "lack": 64, "containerwithactiv": [65, 69, 70], "dict_in": [65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107], "queue": [65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 173, 321, 330, 331, 609, 664, 669], "queue_load_s": [65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107], "container_combine_method": [65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107], "list_join": [65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107], "queue_timeout": [65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 609], "print_limit": [65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107], "key_length_limit": [65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107], "print_ind": [65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107], "print_line_spac": [65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107], "ivyh": [65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107], "default_key_color": [65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107], "green": [65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 150, 151, 998, 999], "keyword_color_dict": [65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107], "rebuild_child_contain": [65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107], "types_to_iteratively_nest": [65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107], "alphabetical_kei": [65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107], "containerbas": [65, 66, 67, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 164], "key_chain": [65, 66, 67, 68, 69, 70, 72, 73, 74, 75, 78, 79, 80, 81, 82, 83, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 100, 101, 102, 103, 104, 105, 106, 107, 204, 206, 208, 214, 216, 217, 219, 221, 223, 225, 227, 228, 230, 231, 233, 235, 237, 239, 241, 242, 244, 245, 247, 248, 250, 252, 253, 255, 257, 258, 260, 261, 263, 265, 266, 267, 269, 271, 272, 274, 276, 277, 279, 280, 282, 293, 295, 297, 372, 374, 376, 377, 379, 381, 383, 385, 387, 389, 390, 392, 394, 396, 398, 400, 402, 404, 406, 408, 410, 412, 414, 416, 418, 420, 422, 424, 426, 428, 430, 432, 434, 436, 438, 440, 442, 444, 446, 448, 450, 451, 453, 455, 457, 459, 461, 463, 465, 467, 469, 471, 473, 475, 477, 479, 481, 483, 485, 487, 489, 491, 493, 495, 497, 499, 501, 503, 505, 507, 509, 511, 513, 515, 517, 519, 521, 523, 525, 527, 529, 531, 533, 535, 537, 541, 543, 545, 546, 548, 550, 552, 554, 556, 558, 560, 562, 564, 566, 568, 570, 572, 574, 576, 578, 580, 582, 584, 586, 588, 590, 591, 593, 595, 596, 598, 600, 601, 603, 605, 607, 610, 612, 614, 622, 623, 638, 640, 642, 690, 691, 693, 695, 696, 698, 699, 700, 702, 703, 704, 706, 707, 708, 710, 711, 712, 714, 735, 737, 739, 758, 760, 807, 809, 811, 812, 814, 816, 817, 819, 821, 823, 825, 827, 828, 830, 832, 834, 836, 838, 840, 842, 844, 846, 848, 850, 852, 854, 856, 858, 860, 862, 864, 866, 868, 870, 872, 874, 876, 878, 880, 886, 899, 905, 907, 911, 913, 915, 916, 918, 928, 929, 931, 936, 938, 940, 941, 943, 945, 947, 949, 951, 953, 955, 957, 959, 961, 963, 965, 967, 969, 971, 973, 975, 977, 980, 982, 984, 985, 987, 989], "to_appli": [65, 66, 67, 68, 69, 70, 72, 73, 74, 75, 78, 79, 80, 81, 82, 83, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 100, 101, 102, 103, 104, 105, 106, 107, 204, 206, 208, 214, 216, 217, 219, 221, 223, 225, 227, 228, 230, 231, 233, 235, 237, 239, 241, 242, 244, 245, 247, 248, 250, 252, 253, 255, 257, 258, 260, 261, 263, 265, 266, 267, 269, 271, 272, 274, 276, 277, 279, 280, 282, 293, 295, 297, 372, 374, 376, 377, 379, 381, 383, 385, 387, 389, 390, 392, 394, 396, 398, 400, 402, 404, 406, 408, 410, 412, 414, 416, 418, 420, 422, 424, 426, 428, 430, 432, 434, 436, 438, 440, 442, 444, 446, 448, 450, 451, 453, 455, 457, 459, 461, 463, 465, 467, 469, 471, 473, 475, 477, 479, 481, 483, 485, 487, 489, 491, 493, 495, 497, 499, 501, 503, 505, 507, 509, 511, 513, 515, 517, 519, 521, 523, 525, 527, 529, 531, 533, 535, 537, 541, 543, 545, 546, 548, 550, 552, 554, 556, 558, 560, 562, 564, 566, 568, 570, 572, 574, 576, 578, 580, 582, 584, 586, 588, 590, 591, 593, 595, 596, 598, 600, 601, 603, 605, 607, 610, 612, 614, 622, 623, 638, 640, 642, 690, 691, 693, 695, 696, 698, 699, 700, 702, 703, 704, 706, 707, 708, 710, 711, 712, 714, 735, 737, 739, 758, 760, 807, 809, 811, 812, 814, 816, 817, 819, 821, 823, 825, 827, 828, 830, 832, 834, 836, 838, 840, 842, 844, 846, 848, 850, 852, 854, 856, 858, 860, 862, 864, 866, 868, 870, 872, 874, 876, 878, 880, 886, 899, 905, 907, 915, 916, 918, 928, 929, 931, 936, 938, 940, 941, 943, 945, 947, 949, 951, 953, 955, 957, 959, 961, 963, 965, 967, 969, 971, 973, 975, 977, 980, 982, 984, 985, 987, 989], "prune_unappli": [65, 66, 67, 68, 69, 70, 72, 73, 74, 75, 78, 79, 80, 81, 82, 83, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 100, 101, 102, 103, 104, 105, 106, 107, 204, 206, 208, 214, 216, 217, 219, 221, 223, 225, 227, 228, 230, 231, 233, 235, 237, 239, 241, 242, 244, 245, 247, 248, 250, 252, 253, 255, 257, 258, 260, 261, 263, 265, 266, 267, 269, 271, 272, 274, 276, 277, 279, 280, 282, 293, 295, 297, 372, 374, 376, 377, 379, 381, 383, 385, 387, 389, 390, 392, 394, 396, 398, 400, 402, 404, 406, 408, 410, 412, 414, 416, 418, 420, 422, 424, 426, 428, 430, 432, 434, 436, 438, 440, 442, 444, 446, 448, 450, 451, 453, 455, 457, 459, 461, 463, 465, 467, 469, 471, 473, 475, 477, 479, 481, 483, 485, 487, 489, 491, 493, 495, 497, 499, 501, 503, 505, 507, 509, 511, 513, 515, 517, 519, 521, 523, 525, 527, 529, 531, 533, 535, 537, 541, 543, 545, 546, 548, 550, 552, 554, 556, 558, 560, 562, 564, 566, 568, 570, 572, 574, 576, 578, 580, 582, 584, 586, 588, 590, 591, 593, 595, 596, 598, 600, 601, 603, 605, 607, 610, 612, 614, 622, 623, 638, 640, 642, 690, 691, 693, 695, 696, 698, 699, 700, 702, 703, 704, 706, 707, 708, 710, 711, 712, 714, 735, 737, 739, 758, 760, 807, 809, 811, 812, 814, 816, 817, 819, 821, 823, 825, 827, 828, 830, 832, 834, 836, 838, 840, 842, 844, 846, 848, 850, 852, 854, 856, 858, 860, 862, 864, 866, 868, 870, 872, 874, 876, 878, 880, 886, 899, 905, 907, 915, 916, 918, 928, 929, 931, 936, 938, 940, 941, 943, 945, 947, 949, 951, 953, 955, 957, 959, 961, 963, 965, 967, 969, 971, 973, 975, 977, 980, 982, 984, 985, 987, 989], "map_sequ": [65, 66, 67, 68, 69, 70, 72, 73, 74, 75, 78, 79, 80, 81, 82, 83, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 100, 101, 102, 103, 104, 105, 106, 107, 204, 206, 208, 214, 216, 217, 219, 221, 223, 225, 227, 228, 230, 231, 233, 235, 237, 239, 241, 242, 244, 245, 247, 248, 250, 252, 253, 255, 257, 258, 260, 261, 263, 265, 266, 267, 269, 271, 272, 274, 276, 277, 279, 280, 282, 293, 295, 297, 372, 374, 376, 377, 379, 381, 383, 385, 387, 389, 390, 392, 394, 396, 398, 400, 406, 408, 414, 416, 434, 436, 438, 440, 442, 444, 446, 448, 450, 455, 457, 459, 461, 463, 465, 467, 469, 483, 485, 487, 489, 491, 493, 503, 505, 507, 509, 511, 513, 515, 517, 527, 529, 541, 543, 545, 546, 548, 554, 556, 566, 568, 570, 572, 574, 576, 578, 580, 582, 584, 586, 588, 590, 591, 593, 595, 596, 598, 600, 601, 603, 605, 607, 610, 612, 614, 622, 623, 638, 640, 642, 690, 691, 693, 695, 696, 698, 699, 700, 702, 703, 704, 706, 707, 708, 710, 711, 712, 714, 735, 737, 739, 807, 809, 811, 812, 814, 816, 817, 819, 821, 823, 825, 827, 832, 834, 836, 838, 840, 842, 844, 846, 848, 850, 852, 854, 856, 858, 860, 862, 864, 870, 872, 874, 876, 878, 880, 905, 907, 915, 916, 918, 928, 929, 931, 936, 938, 940, 941, 943, 945, 947, 949, 951, 953, 955, 957, 959, 961, 963, 965, 967, 969, 971, 973, 975, 977, 980, 982, 984, 985, 987, 989], "static": [65, 66, 67, 68, 72, 73, 74, 75, 78, 79, 80, 81, 82, 83, 88, 89, 90, 91, 92, 93, 96, 97, 100, 101, 102, 103, 106, 107, 108, 109, 152, 156, 157, 160, 187, 204, 208, 210, 211, 293, 297, 372, 376, 385, 389, 595, 596, 600, 601, 610, 614, 638, 642, 735, 739, 823, 827, 856, 860, 911, 913, 928, 929], "static_softplu": [65, 66, 204], "__getitem__": [67, 68, 164], "queri": [67, 68, 125, 136, 164, 165, 172, 321, 354, 364, 721, 732, 733], "slice": [67, 68, 609, 637, 638, 641, 886, 895], "chain": [67, 68, 147, 148, 163, 164, 174, 175, 187, 882, 883, 884, 886, 899], "element": [67, 68, 125, 133, 156, 170, 175, 198, 199, 200, 201, 202, 203, 204, 207, 209, 213, 214, 215, 236, 237, 240, 266, 270, 271, 275, 321, 344, 348, 352, 371, 372, 375, 377, 380, 381, 384, 385, 388, 390, 393, 394, 397, 398, 401, 402, 405, 406, 409, 410, 413, 414, 417, 418, 421, 422, 425, 426, 429, 430, 433, 434, 437, 438, 441, 442, 445, 446, 449, 451, 454, 455, 458, 459, 462, 463, 466, 467, 470, 471, 474, 475, 478, 479, 482, 483, 486, 487, 490, 491, 494, 495, 498, 499, 502, 503, 506, 507, 510, 511, 514, 515, 518, 519, 522, 523, 526, 527, 530, 531, 534, 535, 538, 539, 540, 541, 544, 546, 549, 550, 553, 554, 557, 558, 561, 562, 565, 566, 569, 570, 573, 574, 577, 578, 581, 582, 585, 586, 589, 590, 594, 595, 599, 600, 604, 605, 608, 609, 617, 618, 621, 622, 624, 627, 628, 635, 649, 678, 679, 721, 729, 734, 740, 742, 749, 751, 758, 761, 778, 780, 785, 787, 822, 823, 826, 840, 843, 848, 851, 856, 859, 861, 862, 865, 909, 910, 921, 924, 925, 926, 927, 928, 932, 933, 934, 935, 941, 944, 946, 947, 950, 951, 954, 955, 958, 959, 962, 963, 966, 967, 970, 971, 974, 975, 978, 979, 980, 983, 985, 988], "represent": [67, 68, 69, 70, 71, 186, 212, 284, 288, 289, 304, 307, 321, 337, 338, 371, 372, 375, 385, 388, 410, 413, 422, 425, 430, 433, 535, 538, 541, 544, 609, 615, 672, 677], "around": [67, 68, 69, 70, 71, 151, 160, 163, 168, 172, 187], "sequenc": [67, 68, 69, 70, 71, 125, 134, 139, 140, 147, 148, 157, 165, 186, 210, 211, 321, 330, 331, 609, 618, 659, 822, 861, 866, 869, 909, 911, 912, 946, 951, 954, 979, 980, 983, 985, 988], "multiprocess": [67, 68, 69, 70, 71, 173, 187, 321, 330, 609], "asynchron": [67, 68, 69, 70, 71], "wait": [67, 68, 69, 70, 71, 151], "dimens": [67, 68, 69, 70, 71, 125, 126, 127, 128, 129, 130, 131, 132, 135, 136, 157, 170, 173, 198, 203, 213, 266, 270, 271, 275, 321, 352, 609, 631, 632, 633, 636, 646, 662, 681, 721, 722, 723, 724, 725, 726, 727, 728, 731, 734, 735, 738, 740, 742, 743, 745, 746, 748, 749, 751, 752, 754, 755, 757, 758, 761, 762, 764, 766, 768, 769, 771, 775, 777, 778, 780, 782, 784, 785, 787, 788, 790, 794, 796, 797, 799, 800, 802, 806, 812, 815, 817, 820, 822, 828, 831, 836, 839, 840, 843, 844, 847, 848, 851, 852, 855, 856, 859, 861, 862, 865, 866, 869, 882, 883, 884, 885, 909, 920, 921, 922, 923, 924, 926, 927, 928, 932, 934, 946, 947, 950, 951, 954, 955, 958, 959, 962, 963, 966, 967, 970, 971, 974, 975, 978, 979, 980, 983, 985, 988], "combin": [67, 68, 69, 70, 71, 151, 157, 159, 160, 163, 164, 175, 734, 740, 742], "arriv": [67, 68, 69, 70, 71], "timeout": [67, 68, 69, 70, 71, 321, 330, 331, 609, 664, 669], "limit": [67, 68, 69, 70, 71, 151, 157, 159, 170, 173, 175, 187, 284, 304, 307, 609, 621, 622, 624, 822, 823, 826], "maximum": [67, 68, 69, 70, 71, 157, 170, 173, 175, 321, 345, 349, 353, 365, 371, 609, 621, 622, 624, 636, 683, 703, 705, 822, 823, 826, 886, 898, 921, 922, 946, 951, 954, 959, 962, 990], "length": [67, 68, 69, 70, 71, 173, 213, 214, 215, 248, 251, 734, 785, 787, 788, 790, 822, 852, 855], "whitespac": [67, 68, 69, 70, 71], "indent": [67, 68, 69, 70, 71, 173], "extra": [67, 68, 69, 70, 71, 157, 162, 163, 170, 683, 694], "newlin": [67, 68, 69, 70, 71, 156], "handl": [67, 68, 69, 70, 71, 141, 142, 143, 144, 145, 146, 154, 159, 160, 162, 164, 165, 166, 167, 168, 174, 187, 210, 211, 321, 337, 338, 339, 340, 341, 355, 359, 360, 367, 370, 683, 690, 692, 695, 697, 703, 705, 707, 709, 711, 713], "result": [67, 68, 69, 70, 71, 155, 156, 157, 159, 163, 164, 165, 167, 168, 173, 187, 198, 199, 200, 201, 202, 203, 204, 207, 209, 213, 214, 215, 217, 220, 222, 223, 226, 228, 229, 231, 234, 236, 237, 240, 242, 243, 245, 246, 258, 259, 261, 264, 266, 270, 271, 275, 276, 278, 279, 283, 284, 290, 292, 312, 321, 330, 366, 371, 372, 375, 377, 380, 381, 384, 385, 388, 390, 393, 394, 397, 398, 401, 402, 405, 406, 409, 410, 413, 414, 417, 418, 421, 422, 425, 426, 429, 430, 433, 434, 437, 438, 441, 442, 445, 446, 449, 451, 454, 455, 458, 459, 462, 463, 466, 467, 470, 471, 474, 475, 478, 479, 482, 483, 486, 487, 490, 491, 494, 495, 498, 499, 502, 503, 506, 507, 510, 511, 514, 515, 518, 519, 522, 523, 526, 527, 530, 531, 534, 535, 538, 539, 540, 541, 544, 546, 549, 550, 553, 554, 557, 558, 561, 562, 565, 566, 569, 570, 573, 574, 577, 578, 581, 582, 585, 586, 589, 590, 594, 595, 599, 600, 604, 605, 608, 609, 621, 622, 624, 627, 628, 631, 632, 633, 635, 637, 638, 641, 649, 662, 665, 666, 683, 716, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 732, 733, 734, 735, 738, 740, 742, 743, 745, 746, 748, 752, 754, 755, 757, 758, 761, 762, 764, 766, 768, 769, 771, 772, 774, 775, 777, 781, 782, 784, 785, 787, 788, 790, 791, 793, 794, 796, 797, 799, 800, 802, 803, 805, 806, 807, 810, 812, 815, 817, 820, 822, 823, 826, 828, 831, 832, 835, 836, 839, 840, 843, 844, 847, 848, 851, 852, 855, 856, 859, 862, 865, 866, 869, 870, 873, 874, 877, 878, 881, 886, 899, 904, 905, 908, 909, 910, 911, 912, 914, 915, 917, 920, 921, 922, 923, 925, 926, 927, 934, 935, 936, 939, 941, 944, 946, 947, 950, 951, 954, 955, 958, 959, 962, 963, 966, 967, 970, 971, 974, 975, 978, 979, 980, 983, 985, 988, 990], "color": [67, 68, 69, 70, 71, 998, 999], "termin": [67, 68, 69, 70, 71, 150, 151, 153, 164, 170, 173], "termcolor": [67, 68, 69, 70, 71], "rebuild": [67, 68, 69, 70, 71], "constructor": [67, 68, 69, 70, 71, 147, 148, 165, 166, 172, 609, 616], "param": [67, 68, 69, 70, 71, 80, 81, 170, 175, 609, 615, 637, 638, 641, 642], "kept": [67, 68, 69, 70, 71, 151, 167, 882, 883, 884], "structur": [67, 68, 69, 70, 71, 153, 155, 160, 163, 164, 173, 174, 609, 625, 886, 899], "alphabet": [67, 68, 69, 70, 71], "preserv": [67, 68, 69, 70, 71, 175, 187, 683, 716, 822, 840, 843], "__setitem__": [67, 68, 163, 164, 172], "val": [67, 68, 167, 172, 609, 651, 652, 653, 667, 668], "after": [67, 68, 141, 142, 143, 144, 145, 146, 157, 164, 165, 169, 284, 316, 371, 582, 585, 683, 690, 692, 694, 695, 697, 703, 705, 707, 709, 711, 713, 904, 905, 908], "all_fals": [67, 68], "assert_is_bool": [67, 68], "entri": [67, 68, 213, 242, 243, 245, 246, 822, 861, 886, 899], "boolean": [67, 68, 164, 213, 236, 284, 290, 308, 320, 321, 356, 368, 371, 410, 413, 414, 417, 422, 425, 430, 433, 523, 526, 527, 530, 531, 534, 535, 538, 609, 610, 613, 617, 618, 648, 649, 650, 654, 655, 656, 657, 658, 675, 682, 683, 699, 701, 882, 883, 884, 886, 896, 946, 959, 962], "evalu": [67, 68, 164, 371, 459, 462, 463, 466, 503, 506, 507, 510, 511, 514, 515, 518, 546, 549, 570, 573, 586, 589, 886, 887, 896, 897, 979, 980, 983, 985, 988], "assert": [67, 68, 172, 173, 609, 619], "skip": [67, 68, 153, 159, 886, 899], "prune": [67, 68, 886, 899, 900, 901], "all_key_chain": [67, 68], "include_empti": [67, 68], "all_tru": [67, 68, 164, 173], "arrays_as_list": [67, 68], "intermedi": [67, 68], "as_arrai": [67, 68, 609, 646, 671], "as_bool": [67, 68], "as_on": [67, 68], "ones": [67, 68, 69, 70, 159, 170, 172, 173, 213, 228, 229, 261, 264, 371, 434, 437, 609, 662, 990], "sub": [67, 68, 151, 152, 154, 159, 164, 172, 173, 174, 321, 346, 347, 350, 351, 352, 353, 734, 746, 748, 822, 861, 882, 883, 884, 885, 990], "fill": [67, 68, 213, 222, 236, 237, 240, 258, 259, 261, 264, 276, 278, 279, 283, 909, 911, 912], "as_random_uniform": [67, 68], "low": [67, 68, 96, 97, 170, 909, 911, 912, 913, 915, 916, 917, 918], "uniform": [67, 68, 116, 118, 119, 122, 123, 174, 909, 910, 911, 912, 915, 917], "lower": [67, 68, 151, 157, 170, 187, 213, 228, 229, 266, 270, 371, 539, 734, 735, 738, 909, 915, 917], "boundari": [67, 68, 909, 915, 917], "output": [67, 68, 125, 126, 127, 128, 129, 130, 131, 133, 134, 135, 136, 150, 154, 155, 156, 157, 159, 160, 163, 164, 166, 167, 168, 170, 172, 174, 175, 187, 198, 199, 200, 201, 202, 203, 204, 207, 209, 213, 214, 215, 217, 220, 222, 223, 226, 228, 229, 231, 234, 236, 237, 240, 242, 243, 245, 246, 248, 251, 258, 259, 261, 264, 266, 270, 271, 275, 276, 278, 279, 283, 284, 290, 292, 321, 330, 331, 365, 366, 371, 372, 375, 377, 380, 381, 384, 385, 388, 390, 393, 394, 397, 398, 401, 402, 405, 406, 409, 410, 413, 414, 417, 418, 421, 422, 425, 426, 429, 430, 433, 434, 437, 438, 441, 442, 445, 446, 449, 451, 454, 455, 458, 459, 462, 463, 466, 467, 470, 471, 474, 475, 478, 479, 482, 483, 486, 487, 490, 491, 494, 495, 498, 503, 506, 507, 510, 511, 514, 515, 518, 519, 522, 523, 526, 527, 530, 531, 534, 535, 538, 539, 540, 541, 544, 546, 549, 550, 553, 554, 557, 558, 561, 562, 565, 566, 569, 570, 573, 574, 577, 578, 581, 582, 585, 586, 589, 590, 594, 595, 599, 600, 604, 605, 608, 609, 620, 621, 622, 624, 627, 628, 631, 632, 633, 635, 637, 638, 641, 649, 662, 665, 666, 683, 694, 716, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 738, 740, 742, 743, 745, 746, 748, 752, 754, 755, 757, 758, 761, 762, 764, 766, 768, 769, 771, 772, 774, 775, 777, 781, 782, 784, 785, 787, 788, 790, 791, 793, 794, 796, 797, 799, 800, 802, 803, 805, 806, 807, 810, 812, 815, 817, 820, 822, 823, 826, 828, 831, 832, 835, 836, 839, 840, 843, 844, 847, 848, 851, 852, 855, 856, 859, 862, 865, 866, 869, 870, 873, 874, 877, 878, 881, 886, 899, 904, 905, 908, 909, 910, 911, 912, 914, 915, 917, 920, 921, 925, 935, 936, 939, 941, 944, 946, 947, 950, 951, 954, 955, 958, 959, 962, 963, 966, 967, 970, 971, 974, 975, 978, 979, 980, 983, 985, 988, 990], "interv": [67, 68, 170, 175, 213, 214, 215, 242, 243, 245, 246, 734, 797, 799, 822, 823, 826, 866, 869, 909, 911, 912, 915, 917, 979, 980, 983, 985, 988], "as_vari": [67, 68], "as_zero": [67, 68], "assert_contains_sub_contain": [67, 68], "sub_cont": [67, 68], "partial": [67, 68, 137, 138, 151], "except": [67, 68, 156, 163, 167, 172, 187, 284, 292, 609, 619, 630, 653, 680, 734, 775, 777, 822, 828, 831, 866, 869, 921, 924, 979, 980, 983, 985, 988], "diff": [67, 68, 164, 173], "screen": [67, 68, 173], "assert_contains_sub_structur": [67, 68], "check_shap": [67, 68], "assert_ident": [67, 68], "check_typ": [67, 68], "same_arrai": [67, 68, 173], "arrays_equ": [67, 68, 69, 70, 609], "datatyp": [67, 68, 213, 217, 220, 253, 256, 284, 298, 309, 310, 311], "exact": [67, 68, 151, 170, 926, 927], "assert_identical_structur": [67, 68], "at_key_chain": [67, 68], "ignore_key_error": [67, 68], "ignore_non": [67, 68], "at_kei": [67, 68], "ignor": [67, 68, 141, 145, 157, 187, 213, 248, 251, 886, 897], "substr": [67, 68], "access": [67, 68, 151, 153, 165], "clip_min": [67, 68], "clip_max": [67, 68], "minimum": [67, 68, 170, 175, 321, 371, 372, 375, 609, 644, 645, 667, 668, 673, 674, 822, 823, 826, 921, 923, 946, 951, 954, 959, 962, 990], "config": [67, 68, 173, 886, 899], "right": [67, 68, 149, 150, 151, 154, 157, 173, 371, 418, 421, 426, 429, 734, 785, 787], "duplic": [67, 68, 156, 161, 162, 172, 174], "compar": [67, 68, 159, 173, 609, 610, 613, 617, 618, 926, 927, 928, 932, 934, 935, 936, 939, 941, 944], "configur": [67, 68, 150, 151, 153, 165, 321, 364, 886, 899], "container_rightmost": [67, 68], "common_key_chain": [67, 68, 164], "across": [67, 68, 152, 157, 159, 160, 164, 165, 168, 321, 330, 331, 342, 343, 345, 346, 347, 348, 349, 353, 363, 364, 609, 617, 618, 886, 892, 921, 923], "properti": [67, 68, 137, 138, 141, 142, 143, 144, 146, 157, 159, 160, 164, 172, 173, 174, 321, 333], "contains_sub_contain": [67, 68], "match": [67, 68, 164, 284, 290, 371, 562, 565, 609, 659], "contains_sub_structur": [67, 68], "create_if_abs": [67, 68], "inplac": [67, 68, 82, 83, 114, 115, 141, 142, 143, 144, 145, 146, 154, 157, 162, 163, 168, 172, 174, 609, 619, 650, 653, 654, 675, 683, 690, 691, 692, 693, 695, 696, 697, 698, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714], "alreadi": [67, 68, 150, 151, 161, 164, 168, 172, 187, 321, 371, 434, 437, 467, 470, 541, 544, 566, 569, 605, 608, 734, 772, 774, 990], "cutoff_at_depth": [67, 68], "depth_cutoff": [67, 68], "summari": [67, 68, 151, 284, 299, 300, 301, 313, 314, 315, 321, 334, 335, 609, 625, 629, 647, 683, 715, 720], "cutoff_at_height": [67, 68], "height_cutoff": [67, 68], "deep_copi": [67, 68, 173], "intern": [67, 68, 116, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 147, 148, 156, 163, 164, 166, 167, 321, 683, 719, 886, 887, 896, 897], "dev": [67, 68, 69, 71, 150, 160, 166, 170, 172, 174, 321, 330, 355], "belong": [67, 68, 174], "dev_clon": [67, 68, 321], "clone": [67, 68, 151, 153, 321, 342, 343, 344, 345], "dev_dist": [67, 68, 321], "distribut": [67, 68, 125, 133, 137, 138, 152, 166, 187, 321, 342, 346, 347, 348, 349, 721, 729, 806, 807, 810, 812, 815, 817, 820, 909, 910, 911, 912, 914, 915, 917], "along": [67, 68, 155, 167, 213, 242, 243, 245, 246, 321, 346, 347, 348, 349, 350, 351, 352, 353, 365, 609, 627, 628, 637, 681, 734, 762, 764, 794, 796, 797, 799, 800, 802, 806, 812, 815, 817, 820, 822, 828, 831, 840, 843, 848, 851, 856, 859, 861, 866, 869, 874, 877, 882, 883, 884, 885, 909, 920, 921, 922, 923, 935, 936, 939, 941, 944, 946, 947, 950, 951, 954, 955, 958, 959, 962, 963, 966, 967, 970, 971, 974, 975, 978, 979, 980, 983, 985, 988], "split": [67, 68, 149, 151, 169, 170, 187, 321, 330, 346, 347, 348, 349, 363, 364, 365, 609, 659, 822, 990], "dev_str": [67, 68], "diff_kei": [67, 68], "detect_key_diff": [67, 68], "detect_value_diff": [67, 68], "detect_shape_diff": [67, 68], "thei": [67, 68, 147, 148, 152, 154, 155, 157, 160, 162, 164, 165, 166, 167, 172, 173, 174, 175, 187, 284, 311, 882, 883, 884, 909, 910, 990], "treat": [67, 68, 171, 175, 210, 211], "detect": [67, 68, 168, 173, 174, 886, 887, 897], "without": [67, 68, 151, 155, 160, 163, 164, 166, 168, 170, 172, 173, 174, 186, 187, 609, 664, 669, 822, 852, 855, 886, 888, 926, 927, 928, 932, 934], "flag": [67, 68, 151, 167, 172, 321, 340, 683, 699, 701], "container0": [67, 68], "einops_rearrang": [67, 68, 609], "axes_length": [67, 68, 609, 631, 632, 633], "rearrang": [67, 68, 609, 631, 633], "addit": [67, 68, 125, 135, 150, 151, 155, 156, 159, 164, 165, 172, 173, 175, 321, 366, 371, 385, 388, 609, 631, 632, 633, 904, 905, 908], "einops_reduc": [67, 68, 609], "reduct": [67, 68, 165, 172, 609, 632, 665, 666, 979, 980, 983, 985, 988, 990], "One": [67, 68, 165, 170, 172, 173, 609, 632, 822, 852, 855, 909, 911, 912], "callabl": [67, 68, 164, 170, 188, 189, 190, 191, 192, 193, 194, 195, 196, 210, 211, 284, 305, 306, 321, 365, 609, 615, 620, 630, 632, 882, 883, 884, 885, 886, 892, 896, 897, 898], "einops_repeat": [67, 68, 609], "find_sub_contain": [67, 68], "sub_cont_to_find": [67, 68], "exsit": [67, 68], "find_sub_structur": [67, 68], "sub_struc_to_find": [67, 68], "flatten_key_chain": [67, 68, 137, 138, 173], "__": [67, 68, 157, 173], "above_height": [67, 68, 173], "below_depth": [67, 68, 173], "format_key_chain": [67, 68], "format_fn": [67, 68], "format": [67, 68, 153, 156, 165, 166, 170, 172, 173, 284, 302, 321, 341, 946, 947, 950, 990], "string": [67, 68, 161, 165, 166, 170, 173, 284, 288, 289, 302, 308, 320, 321, 337, 338, 339, 340, 354, 360, 366, 367, 370, 609, 629], "from_disk_as_hdf5": [67, 68, 173], "h5_obj_or_filepath": [67, 68], "slice_obj": [67, 68], "load": [67, 68, 187], "disk": [67, 68, 173], "h5py": [67, 68], "file": [67, 68, 137, 138, 150, 151, 153, 155, 156, 160, 161, 163, 164, 170, 173, 609, 670], "hdf5": [67, 68, 137, 138, 173], "filepath": [67, 68, 151], "h5": [67, 68], "from_disk_as_json": [67, 68, 173], "json_filepath": [67, 68], "json": [67, 68, 173], "were": [67, 68, 151, 155, 159, 164], "abl": [67, 68, 150, 151, 160, 165, 167, 172, 175], "dure": [67, 68, 137, 138, 141, 142, 143, 145, 160, 164, 165, 166, 167, 187, 210, 211, 321, 366, 609, 680, 683, 685, 688, 690, 692, 703, 705, 734, 758, 761, 882, 883, 884, 885, 946, 967, 970, 975, 978], "from_disk_as_pickl": [67, 68, 173], "pickle_filepath": [67, 68], "from_flat_list": [67, 68], "flat_list": [67, 68], "hierarchi": [67, 68, 173], "flat": [67, 68, 609, 665, 822, 848, 851], "popul": [67, 68, 165, 166, 170, 909, 910, 946, 967, 970, 975, 978], "from_numpi": [67, 68, 173], "gather": [67, 68, 609, 638, 641], "accord": [67, 68, 150, 153, 160, 165, 284, 293, 296, 304, 371, 385, 388, 426, 429, 541, 544, 609, 637, 665, 666, 734, 797, 799, 822, 832, 835, 878, 881, 946, 967, 970, 975, 978], "h5_file_s": [67, 68], "content": [67, 68, 152, 153, 167, 170, 173], "batch": [67, 68, 139, 140, 160, 164, 173, 321, 363, 364, 609, 636, 721, 730, 734, 800, 802, 882, 883, 884, 885, 904, 905, 908], "handle_inplac": [67, 68], "prime": [67, 68], "overwritten": [67, 68, 161, 163], "has_kei": [67, 68], "query_kei": [67, 68], "somewher": [67, 68], "has_key_chain": [67, 68], "has_nan": [67, 68, 609], "include_inf": [67, 68, 609, 648, 682], "leafwis": [67, 68], "nan": [67, 68, 155, 156, 212, 284, 290, 371, 372, 375, 377, 380, 381, 384, 385, 388, 390, 393, 394, 397, 398, 401, 402, 405, 434, 437, 438, 441, 442, 445, 459, 462, 463, 466, 467, 470, 483, 486, 491, 494, 503, 506, 507, 510, 515, 518, 519, 522, 541, 544, 558, 561, 562, 565, 566, 569, 574, 577, 578, 581, 582, 585, 595, 599, 600, 604, 605, 608, 609, 648, 682, 721, 733, 926, 927, 928, 932, 934, 946, 951, 954, 955, 958, 959, 962, 967, 970, 971, 974, 975, 978, 979, 980, 983, 985, 988], "well": [67, 68, 159, 167, 174, 175, 186, 609, 648, 734, 782, 784], "inf": [67, 68, 212, 609, 648, 682, 734, 800, 802], "wise": [67, 68, 170, 175, 198, 199, 200, 201, 202, 203, 204, 207, 209, 371, 372, 375, 377, 380, 385, 388, 390, 393, 398, 401, 402, 405, 410, 413, 414, 417, 418, 421, 422, 425, 426, 429, 430, 433, 446, 449, 451, 454, 455, 458, 471, 474, 475, 478, 479, 482, 495, 498, 499, 502, 519, 522, 523, 526, 527, 530, 531, 534, 535, 538, 539, 540, 541, 544, 550, 553, 558, 561, 562, 565, 590, 594, 609, 635, 822, 823, 826], "identical_array_shap": [67, 68], "exclus": [67, 68, 82, 83, 160, 164, 175, 213, 214, 215, 609, 627, 655, 656, 658, 683, 699, 700, 701, 702, 909, 911, 912], "identical_config": [67, 68], "identical_structur": [67, 68], "if_exist": [67, 68], "inplace_upd": [67, 68, 114, 115, 167, 609], "key_chains_contain": [67, 68], "sub_str": [67, 68], "join": [67, 68, 822, 828, 831, 866, 869, 990], "list_stack": [67, 68, 173], "dim": [67, 68, 125, 136, 165, 609, 662], "func": [67, 68, 164, 210, 211, 321, 365, 609, 620, 683, 694, 886, 899], "map_cont": [67, 68], "include_self": [67, 68], "possibi": [67, 68], "place": [67, 68, 141, 142, 143, 144, 145, 146, 151, 154, 155, 156, 157, 159, 160, 164, 166, 168, 175, 213, 214, 215, 217, 220, 222, 223, 226, 228, 229, 231, 234, 236, 237, 240, 242, 243, 245, 246, 248, 251, 253, 256, 258, 259, 261, 264, 266, 270, 271, 275, 276, 278, 279, 283, 284, 293, 296, 321, 366, 371, 372, 375, 385, 388, 390, 393, 410, 413, 430, 433, 434, 437, 442, 445, 467, 470, 550, 553, 566, 569, 582, 585, 586, 589, 595, 599, 600, 604, 609, 637, 651, 652, 653, 721, 724, 733, 734, 735, 738, 743, 745, 746, 748, 822, 836, 839, 840, 843, 856, 859, 904, 905, 908, 926, 927, 928, 932, 935, 936, 939, 946, 951, 954, 979, 980, 983], "matrix": [67, 68, 125, 135, 213, 248, 251, 266, 270, 271, 275, 609, 610, 613, 621, 721, 730, 734, 735, 738, 743, 745, 746, 748, 749, 751, 752, 754, 755, 757, 758, 761, 762, 764, 765, 766, 768, 769, 771, 775, 777, 778, 780, 782, 784, 785, 787, 788, 790, 794, 796, 803, 805], "p": [67, 68, 80, 81, 125, 133, 150, 151, 213, 248, 251, 609, 621, 622, 623, 624, 721, 729, 734, 762, 764, 800, 802], "integ": [67, 68, 164, 165, 172, 213, 214, 215, 236, 284, 307, 310, 312, 371, 372, 375, 410, 413, 414, 417, 418, 421, 422, 425, 426, 429, 430, 433, 434, 437, 467, 470, 471, 474, 535, 538, 558, 561, 562, 565, 566, 569, 605, 608, 734, 765, 797, 799, 800, 802, 822, 861, 909, 911, 912, 919, 946, 951, 954, 955, 958, 959, 962, 963, 966, 967, 970, 971, 974, 975, 978, 979, 980, 983, 985, 988], "flatten": [67, 68, 609, 636, 734, 772, 774, 800, 802, 822, 848, 851, 856, 859, 921, 922, 923, 926, 927, 928, 932, 934], "left": [67, 68, 150, 151, 157, 165, 371, 418, 421, 734, 749, 751, 762, 764, 785, 787, 921, 922, 990], "broadcast": [67, 68, 155, 156, 157, 164, 165, 198, 199, 200, 201, 202, 203, 204, 207, 209, 213, 214, 215, 217, 220, 222, 223, 226, 228, 229, 231, 234, 236, 237, 240, 242, 243, 245, 246, 258, 259, 261, 264, 266, 270, 271, 275, 276, 278, 279, 283, 284, 290, 291, 292, 321, 366, 371, 372, 375, 377, 380, 381, 384, 385, 388, 390, 393, 394, 397, 398, 401, 402, 405, 406, 409, 410, 413, 414, 417, 418, 421, 422, 425, 426, 429, 430, 433, 434, 437, 438, 441, 442, 445, 446, 449, 451, 454, 455, 458, 459, 462, 463, 466, 467, 470, 471, 474, 475, 478, 479, 482, 483, 486, 487, 490, 491, 494, 495, 498, 499, 502, 503, 506, 507, 510, 511, 514, 515, 518, 519, 522, 523, 526, 527, 530, 531, 534, 535, 538, 539, 540, 541, 544, 546, 549, 550, 553, 554, 557, 558, 561, 562, 565, 566, 569, 570, 573, 574, 577, 578, 581, 582, 585, 586, 589, 590, 594, 595, 599, 600, 604, 605, 608, 609, 621, 622, 624, 627, 631, 632, 633, 635, 638, 641, 649, 662, 665, 666, 683, 716, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 732, 733, 734, 735, 738, 740, 742, 743, 745, 746, 748, 752, 754, 755, 757, 758, 761, 762, 764, 766, 768, 769, 771, 772, 774, 775, 777, 781, 782, 784, 785, 787, 788, 790, 791, 793, 794, 796, 797, 799, 800, 802, 803, 805, 806, 807, 810, 812, 815, 817, 820, 822, 823, 826, 828, 831, 832, 835, 836, 839, 840, 843, 844, 847, 848, 851, 852, 855, 856, 859, 862, 865, 866, 869, 870, 873, 874, 877, 878, 881, 904, 905, 908, 909, 910, 911, 912, 914, 915, 917, 920, 921, 922, 923, 925, 926, 934, 935, 941, 944, 946, 951, 954, 955, 958, 959, 962, 963, 966, 967, 970, 971, 974, 975, 978, 979, 980, 983, 985, 988], "correctli": [67, 68, 150, 159, 164, 165, 168, 174, 187, 734, 762, 764, 921, 922], "max_depth": [67, 68, 321, 325, 328, 335, 345, 349, 353, 609, 647, 886, 898], "multi_map": [67, 68, 164], "map_nest": [67, 68, 78, 79, 88, 89, 92, 93, 402, 404, 410, 412, 418, 420, 422, 424, 426, 428, 430, 432, 451, 453, 471, 473, 475, 477, 479, 481, 495, 497, 499, 501, 519, 521, 523, 525, 531, 533, 535, 537, 550, 552, 558, 560, 562, 564, 758, 760, 828, 830, 866, 868], "leftmost": [67, 68, 886, 899], "multi_map_in_static_method": [67, 68, 164], "fn_name": [67, 68], "num_arrai": [67, 68], "overwrite_at_key_chain": [67, 68], "overwrit": [67, 68, 167, 170, 321, 365], "target_dict": [67, 68], "return_dict": [67, 68], "prune_empti": [67, 68], "keep_non": [67, 68], "prune_key_chain": [67, 68], "key1": [67, 68, 174], "key2": [67, 68], "key3": [67, 68], "prune_key_from_key_chain": [67, 68], "absolut": [67, 68, 149, 371, 372, 375, 734, 781], "certain": [67, 68, 150, 187, 213, 214, 215, 242, 243, 245, 246], "decid": [67, 68, 150, 886, 897], "prune_kei": [67, 68], "prune_keys_from_key_chain": [67, 68], "remove_key_length_limit": [67, 68], "remove_print_limit": [67, 68], "reshape_lik": [67, 68], "leading_shap": [67, 68], "return_cont": [67, 68], "restructur": [67, 68], "keep_orig": [67, 68], "transpos": [67, 68, 125, 127, 129, 131, 172, 175, 321, 352, 721, 723, 725, 727, 734, 769, 771, 775, 777, 990], "old": [67, 68, 150, 167], "keep": [67, 68, 150, 151, 158, 164, 171, 173, 175, 609, 681], "start": [67, 68, 72, 73, 149, 150, 151, 152, 153, 154, 156, 157, 165, 169, 170, 172, 173, 174, 186, 187, 213, 214, 215, 216, 242, 243, 244, 245, 246, 247, 321, 336], "restructure_key_chain": [67, 68], "keychain_map": [67, 68], "set_at_key_chain": [67, 68], "set_at_kei": [67, 68], "set_framework": [67, 68, 170, 172, 173, 175], "set_ivy_backend": [67, 68], "ivy_backend": [67, 68], "attribut": [67, 68, 156, 164, 165, 171, 172, 173, 174, 284, 304, 305, 306, 307, 321, 361], "show": [67, 68, 150, 151, 157, 167, 186, 187, 990], "show_sub_contain": [67, 68], "sub_cont_or_keychain": [67, 68], "shuffl": [67, 68, 909, 990], "seed_valu": [67, 68, 909, 919], "align": [67, 68, 150, 170, 172, 990, 996], "seed": [67, 68, 69, 70, 909, 990], "shuffle_h5_fil": [67, 68], "dataset": [67, 68, 173, 185, 990], "size_ordered_arrai": [67, 68], "keychain": [67, 68], "smallest": [67, 68, 284, 304, 307, 371, 434, 437], "largest": [67, 68, 186, 284, 304, 307, 734, 785, 787], "slice_kei": [67, 68], "key_slic": [67, 68], "all_depth": [67, 68], "slice_via_kei": [67, 68], "sort_by_kei": [67, 68], "num_or_size_split": [67, 68, 170, 822, 861], "with_remaind": [67, 68, 822, 861], "constitu": [67, 68, 175], "dimension": [67, 68, 213, 214, 215, 228, 229, 248, 251, 734, 740, 742, 743, 745, 758, 761, 766, 768, 772, 774, 775, 777, 797, 799, 800, 802, 822, 861, 921, 922, 923, 924, 946, 951, 954, 955, 958, 959, 962, 963, 966, 967, 970, 971, 974, 975, 978, 979, 980, 983, 985, 988], "evenli": [67, 68, 213, 214, 215, 242, 243, 245, 246, 822, 861], "store": [67, 68, 137, 138, 156, 161, 163, 164, 170, 172, 173, 174, 609, 636, 683, 719, 734, 794, 796, 822, 861], "stop_gradi": [67, 68, 69, 70, 82, 83, 141, 142, 143, 144, 145, 146, 174, 321, 365, 683, 690, 691, 692, 693, 695, 696, 697, 698, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 882, 883, 884, 885, 990], "preserve_typ": [67, 68, 683, 716], "stop": [67, 68, 72, 73, 141, 142, 143, 144, 145, 146, 170, 187, 213, 214, 215, 216, 242, 243, 244, 245, 246, 247, 321, 336, 365, 683, 690, 692, 695, 697, 703, 705, 707, 709, 711, 713, 716, 882, 883, 884, 885], "alwai": [67, 68, 151, 152, 155, 156, 160, 161, 163, 164, 167, 168, 170, 172, 187, 284, 290, 371, 385, 388, 541, 544, 609, 653, 683, 699, 701, 716], "structural_diff": [67, 68], "to_devic": [67, 68, 321, 340], "move": [67, 68, 151, 155, 321, 366], "cuda": [67, 68, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 145, 147, 148, 170, 173, 187, 213, 242, 243, 245, 246, 321, 330, 337, 362, 609, 637, 638, 641, 662, 665, 666, 909, 910, 911, 912, 915, 917], "cpu": [67, 68, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 145, 147, 148, 151, 166, 187, 213, 242, 243, 245, 246, 321, 340, 341, 343, 357, 360, 362, 366, 367, 369, 370, 609, 637, 638, 641, 662, 665, 666, 909, 910, 911, 912, 914, 915, 917], "target": [67, 68, 154, 169, 173, 174, 175, 321, 339, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 990], "to_dict": [67, 68], "to_disk_as_hdf5": [67, 68, 173], "starting_index": [67, 68], "max_batch_s": [67, 68], "read": [67, 68, 153, 990], "r": [67, 68, 150, 609, 618, 681, 734, 778, 780, 803, 805], "w": [67, 68, 82, 83, 170, 173, 174, 609, 618, 683, 685, 688, 690, 692, 693, 695, 697, 698, 703, 705, 706, 707, 709, 710, 711, 713, 714, 721, 722, 723, 724, 725, 726, 727, 728], "later": [67, 68, 609, 620], "append": [67, 68, 153, 159, 170, 173, 371, 418, 421, 734, 746, 748, 758, 761], "to_disk_as_json": [67, 68, 173], "to_disk_as_pickl": [67, 68, 173], "to_flat_list": [67, 68], "to_iter": [67, 68, 164], "leaf_keys_onli": [67, 68], "to_iterator_kei": [67, 68], "to_iterator_valu": [67, 68], "to_json": [67, 68], "to_list": [67, 68, 609, 990], "to_multi_dev": [67, 68], "multidevcontain": [67, 68, 69], "distributedarrai": [67, 68], "to_numpi": [67, 68, 173, 609, 990], "update_backend": [67, 68], "to_raw": [67, 68], "raw": [67, 68, 156], "trim_kei": [67, 68], "max_length": [67, 68], "try_kc": [67, 68], "tri": [67, 68], "arbitrari": [67, 68, 159, 160, 164, 167, 168, 174, 187, 213, 248, 251, 284, 291, 312, 321, 350, 351, 353], "concatten": [67, 68, 321, 350, 351, 352, 353, 365], "unstack": [67, 68, 170, 173, 609, 990], "dim_siz": [67, 68, 321], "update_config": [67, 68], "global_norm": [67, 68, 80, 81, 622, 623], "vector": [67, 68, 125, 135, 186, 213, 248, 251, 609, 622, 624, 721, 730, 734, 740, 742, 749, 751, 758, 761, 772, 774, 785, 787, 788, 790, 797, 799, 800, 802, 803, 805], "with_default_key_color": [67, 68], "with_entries_as_list": [67, 68], "with_ivy_backend": [67, 68], "with_key_length_limit": [67, 68, 173], "with_print_ind": [67, 68, 173], "with_print_limit": [67, 68, 173], "with_print_line_spac": [67, 68], "containerwithcr": [69, 70, 72], "containerwithdatatyp": [69, 70, 74], "containerwithdevic": [69, 70, 76], "containerwithelementwis": [69, 70, 78, 164], "containerwithgener": [69, 70, 80], "containerwithgradi": [69, 70, 82], "containerwithimag": [69, 70, 84], "containerwithlay": [69, 70, 86], "containerwithlinearalgebra": [69, 70, 88], "containerwithloss": [69, 70, 90], "containerwithmanipul": [69, 70, 92, 152], "containerwithnorm": [69, 70, 94], "containerwithrandom": [69, 70, 96], "containerwithsearch": [69, 70, 98], "containerwithset": [69, 70, 100], "containerwithsort": [69, 70, 102], "containerwithstatist": [69, 70, 104], "containerwithutil": [69, 70, 106], "__add__": [69, 70, 156, 157, 163, 164, 168, 172], "special": [69, 70, 152, 155, 156, 157, 163, 168, 371, 372, 375, 377, 380, 381, 384, 385, 388, 390, 393, 394, 397, 398, 401, 402, 405, 430, 433, 434, 437, 438, 441, 442, 445, 459, 462, 463, 466, 467, 470, 503, 506, 507, 510, 515, 518, 519, 522, 541, 544, 558, 561, 562, 565, 566, 569, 570, 573, 574, 577, 578, 581, 582, 585, 595, 599, 600, 604, 605, 608, 946, 951, 954, 955, 958, 959, 962, 967, 970, 971, 974, 975, 978], "__radd__": [69, 70, 156, 157], "arang": [69, 70, 165, 213, 242, 243, 245, 246, 946, 947, 950, 990], "arg_info": [69, 70, 609], "arg_nam": [69, 70, 609], "argmax": [69, 70, 921, 990], "argmin": [69, 70, 921, 990], "array_equ": [69, 70, 609], "as_ivy_dev": [69, 70, 172, 321], "as_ivy_dtyp": [69, 70, 284], "as_native_dev": [69, 70, 321], "as_native_dtyp": [69, 70, 284], "assert_supports_inplac": [69, 70, 609], "astyp": [69, 70, 165, 167, 284], "broadcast_arrai": [69, 70, 284], "broadcast_to": [69, 70, 165, 284], "cache_fn": [69, 70, 160, 609], "clear_mem_on_dev": [69, 70, 321], "clip_matrix_norm": [69, 70, 609], "closest_valid_dtyp": [69, 70, 284], "container_typ": [69, 70, 609], "conv1d": [69, 70, 125, 721], "conv1d_transpos": [69, 70, 721], "conv2d": [69, 70, 125, 721, 990], "conv2d_transpos": [69, 70, 721], "conv3d": [69, 70, 125, 721], "conv3d_transpos": [69, 70, 721], "copy_arrai": [69, 70, 609], "cumprod": [69, 70, 175, 609], "cumsum": [69, 70, 609, 990], "current_backend_str": [69, 70, 609], "default_devic": [69, 70, 166, 170, 321, 359, 362, 369], "default_dtyp": [69, 70, 160, 165, 284], "default_float_dtyp": [69, 70, 165, 284], "default_int_dtyp": [69, 70, 165, 284], "depthwise_conv2d": [69, 70, 721, 990], "dev_clone_arrai": [69, 70, 321], "dev_clone_it": [69, 70, 321], "dev_clone_nest": [69, 70, 321], "dev_dist_arrai": [69, 70, 321], "dev_dist_it": [69, 70, 321], "dev_dist_nest": [69, 70, 321], "dev_unifi": [69, 70, 321], "dev_unify_arrai": [69, 70, 321], "dev_unify_it": [69, 70, 321], "dev_unify_nest": [69, 70, 321], "dev_util": [69, 70, 166, 321], "dropout": [69, 70, 125, 136, 173, 721], "dtype_bit": [69, 70, 284], "execute_with_gradi": [69, 70, 164, 173, 174, 175, 187, 683, 990], "ey": [69, 70, 175, 213, 721, 724, 728], "finfo": [69, 70, 284], "floormod": [69, 70, 609, 990], "fourier_encod": [69, 70, 609], "function_supported_dtyp": [69, 70, 284], "function_unsupported_dtyp": [69, 70, 284], "gelu": [69, 70, 111, 198], "get_all_arrays_in_memori": [69, 70, 609], "get_all_ivy_arrays_on_dev": [69, 70, 166, 321], "get_min_bas": [69, 70, 609], "get_min_denomin": [69, 70, 609], "get_num_dim": [69, 70, 609, 990], "get_referrers_recurs": [69, 70, 609], "gpu_is_avail": [69, 70, 321], "handle_nest": [69, 70, 160, 164, 188], "handle_out_argu": [69, 70, 162, 165, 166, 167, 168, 188], "iinfo": [69, 70, 284], "indices_wher": [69, 70, 609, 990], "infer_devic": [69, 70, 165, 166, 168, 188], "infer_dtyp": [69, 70, 165, 166, 168, 188], "inplace_arrays_support": [69, 70, 609], "inplace_decr": [69, 70, 609], "inplace_incr": [69, 70, 609], "inplace_variables_support": [69, 70, 609], "inputs_to_native_arrai": [69, 70, 163, 188], "invalid_dtyp": [69, 70, 284], "is_float_dtyp": [69, 70, 284], "is_int_dtyp": [69, 70, 284, 609, 679], "is_ivy_contain": [69, 70, 609], "leaky_relu": [69, 70, 198, 990], "linear": [69, 70, 125, 126, 127, 128, 129, 130, 131, 132, 156, 170, 173, 174, 175, 198, 199, 200, 201, 609, 636, 721, 729, 782, 784, 990], "linspac": [69, 70, 170, 213, 214, 215, 990], "logspac": [69, 70, 170, 213], "lstm_updat": [69, 70, 170, 721], "match_kwarg": [69, 70, 609], "matrix_pow": [69, 70, 734], "multi_head_attent": [69, 70, 164, 167, 721], "multinomi": [69, 70, 909], "nonzero": [69, 70, 371, 385, 388, 541, 544, 921], "num_arrays_in_memori": [69, 70, 609], "num_cpu_cor": [69, 70, 166, 321], "num_gpu": [69, 70, 159, 166, 321], "num_ivy_arrays_on_dev": [69, 70, 321], "one_hot": [69, 70, 175, 609, 990], "outputs_to_ivy_arrai": [69, 70, 163, 165, 166, 168, 188], "percent_used_mem_on_dev": [69, 70, 321], "print_all_arrays_in_memori": [69, 70, 609], "print_all_ivy_arrays_on_dev": [69, 70, 321], "promote_typ": [69, 70, 284], "randint": [69, 70, 96, 97, 909, 913, 990], "random_norm": [69, 70, 721, 724, 727, 728, 734, 785, 787, 909, 926, 927], "result_typ": [69, 70, 165, 284], "scaled_dot_product_attent": [69, 70, 721], "scatter_flat": [69, 70, 609], "scatter_nd": [69, 70, 172, 609, 990], "set_default_devic": [69, 70, 166, 321, 369], "set_default_dtyp": [69, 70, 160, 165, 284], "set_default_float_dtyp": [69, 70, 165, 284], "set_default_int_dtyp": [69, 70, 165, 284], "set_min_bas": [69, 70, 609], "set_min_denomin": [69, 70, 609], "set_queue_timeout": [69, 70, 609], "set_split_factor": [69, 70, 321], "set_tmp_dir": [69, 70, 609], "set_with_grad": [69, 70, 683], "shape_to_tupl": [69, 70, 165, 609], "sigmoid": [69, 70, 170, 173, 174, 198, 990], "slogdet": [69, 70, 734], "split_factor": [69, 70, 321, 330], "split_func_cal": [69, 70, 321], "stable_divid": [69, 70, 160, 609], "stable_pow": [69, 70, 609], "static_aco": [69, 70], "static_acosh": [69, 70], "static_arg_info": [69, 70], "static_arg_nam": [69, 70], "static_argmax": [69, 70], "static_argmin": [69, 70], "static_arrai": [69, 70], "static_array_equ": [69, 70], "static_arrays_equ": [69, 70], "static_as_ivy_dev": [69, 70], "static_as_ivy_dtyp": [69, 70], "static_as_native_dev": [69, 70], "static_as_native_dtyp": [69, 70], "static_asin": [69, 70], "static_asinh": [69, 70], "static_assert_supports_inplac": [69, 70], "static_astyp": [69, 70], "static_atan": [69, 70], "static_atan2": [69, 70], "static_atanh": [69, 70], "static_bitwise_and": [69, 70], "static_bitwise_invert": [69, 70], "static_bitwise_left_shift": [69, 70], "static_bitwise_or": [69, 70], "static_bitwise_right_shift": [69, 70], "static_bitwise_xor": [69, 70], "static_broadcast_arrai": [69, 70], "static_broadcast_to": [69, 70], "static_cache_fn": [69, 70], "static_ceil": [69, 70], "static_clear_mem_on_dev": [69, 70], "static_clip_matrix_norm": [69, 70], "static_clip_vector_norm": [69, 70], "static_closest_valid_dtyp": [69, 70], "static_concat": [69, 70], "static_constant_pad": [69, 70], "static_container_typ": [69, 70], "static_conv1d": [69, 70], "static_conv1d_transpos": [69, 70], "static_conv2d": [69, 70], "static_conv2d_transpos": [69, 70], "static_conv3d": [69, 70], "static_conv3d_transpos": [69, 70], "static_copy_arrai": [69, 70], "static_co": [69, 70], "static_cosh": [69, 70], "static_cross": [69, 70], "static_cumprod": [69, 70], "static_cumsum": [69, 70], "static_current_backend": [69, 70], "static_current_backend_str": [69, 70], "static_default": [69, 70], "static_default_devic": [69, 70], "static_default_dtyp": [69, 70], "static_default_float_dtyp": [69, 70], "static_default_int_dtyp": [69, 70], "static_depthwise_conv2d": [69, 70], "static_det": [69, 70], "static_dev": [69, 70], "static_dev_clon": [69, 70], "static_dev_clone_arrai": [69, 70], "static_dev_clone_it": [69, 70], "static_dev_clone_nest": [69, 70], "static_dev_dist": [69, 70], "static_dev_dist_arrai": [69, 70], "static_dev_dist_it": [69, 70], "static_dev_dist_nest": [69, 70], "static_dev_unifi": [69, 70], "static_dev_unify_arrai": [69, 70], "static_dev_unify_it": [69, 70], "static_dev_unify_nest": [69, 70], "static_dev_util": [69, 70], "static_diagon": [69, 70], "static_dropout": [69, 70], "static_dtyp": [69, 70], "static_dtype_bit": [69, 70], "static_eigh": [69, 70], "static_eigvalsh": [69, 70], "static_einops_rearrang": [69, 70], "static_einops_reduc": [69, 70], "static_einops_repeat": [69, 70], "static_einsum": [69, 70], "static_empti": [69, 70], "static_equ": [69, 70], "static_erf": [69, 70], "static_execute_with_gradi": [69, 70], "static_exist": [69, 70], "static_exp": [69, 70], "static_expand_dim": [69, 70], "static_expm1": [69, 70], "static_finfo": [69, 70], "static_flip": [69, 70], "static_floor": [69, 70], "static_floor_divid": [69, 70], "static_floormod": [69, 70], "static_fourier_encod": [69, 70], "static_ful": [69, 70], "static_function_supported_dtyp": [69, 70], "static_function_unsupported_dtyp": [69, 70], "static_gath": [69, 70], "static_gelu": [69, 70], "static_get_all_arrays_in_memori": [69, 70], "static_get_all_ivy_arrays_on_dev": [69, 70], "static_get_min_bas": [69, 70], "static_get_min_denomin": [69, 70], "static_get_num_dim": [69, 70], "static_get_referrers_recurs": [69, 70], "static_gpu_is_avail": [69, 70], "static_great": [69, 70], "static_greater_equ": [69, 70], "static_handle_nest": [69, 70], "static_handle_out_argu": [69, 70], "static_has_nan": [69, 70], "static_iinfo": [69, 70], "static_indices_wher": [69, 70], "static_infer_devic": [69, 70], "static_infer_dtyp": [69, 70], "static_inplace_arrays_support": [69, 70], "static_inplace_decr": [69, 70], "static_inplace_incr": [69, 70], "static_inplace_upd": [69, 70], "static_inplace_variables_support": [69, 70], "static_inputs_to_native_arrai": [69, 70], "static_inv": [69, 70], "static_invalid_dtyp": [69, 70], "static_is_arrai": [69, 70], "static_is_float_dtyp": [69, 70], "static_is_int_dtyp": [69, 70], "static_is_ivy_arrai": [69, 70], "static_is_ivy_contain": [69, 70], "static_is_native_arrai": [69, 70], "static_isfinit": [69, 70], "static_isinf": [69, 70], "static_isnan": [69, 70], "static_layer_norm": [69, 70], "static_leaky_relu": [69, 70], "static_less": [69, 70], "static_less_equ": [69, 70], "static_linear": [69, 70], "static_log": [69, 70], "static_log10": [69, 70], "static_log1p": [69, 70], "static_log2": [69, 70], "static_logaddexp": [69, 70], "static_logical_and": [69, 70], "static_logical_not": [69, 70], "static_logical_or": [69, 70], "static_logical_xor": [69, 70], "static_lstm_upd": [69, 70], "static_match_kwarg": [69, 70], "static_matmul": [69, 70], "static_matrix_norm": [69, 70], "static_matrix_pow": [69, 70], "static_matrix_rank": [69, 70], "static_matrix_transpos": [69, 70], "static_max": [69, 70], "static_maximum": [69, 70], "static_mean": [69, 70], "static_min": [69, 70], "static_minimum": [69, 70], "static_multi_head_attent": [69, 70], "static_multinomi": [69, 70], "static_multiprocess": [69, 70], "static_neg": [69, 70], "static_nonzero": [69, 70], "static_not_equ": [69, 70], "static_num_arrays_in_memori": [69, 70], "static_num_cpu_cor": [69, 70], "static_num_gpu": [69, 70], "static_num_ivy_arrays_on_dev": [69, 70], "static_one_hot": [69, 70], "static_out": [69, 70], "static_outputs_to_ivy_arrai": [69, 70], "static_percent_used_mem_on_dev": [69, 70], "static_permute_dim": [69, 70], "static_pinv": [69, 70], "static_posit": [69, 70], "static_pow": [69, 70], "static_print_all_arrays_in_memori": [69, 70], "static_print_all_ivy_arrays_on_dev": [69, 70], "static_prod": [69, 70], "static_promote_typ": [69, 70], "static_qr": [69, 70], "static_queue_timeout": [69, 70], "static_random_norm": [69, 70], "static_relu": [69, 70], "static_remaind": [69, 70], "static_repeat": [69, 70], "static_reshap": [69, 70], "static_result_typ": [69, 70], "static_round": [69, 70], "static_scaled_dot_product_attent": [69, 70], "static_scatter_flat": [69, 70], "static_scatter_nd": [69, 70], "static_se": [69, 70], "static_set_default_devic": [69, 70], "static_set_default_dtyp": [69, 70], "static_set_default_float_dtyp": [69, 70], "static_set_default_int_dtyp": [69, 70], "static_set_min_bas": [69, 70], "static_set_min_denomin": [69, 70], "static_set_queue_timeout": [69, 70], "static_set_split_factor": [69, 70], "static_set_tmp_dir": [69, 70], "static_set_with_grad": [69, 70], "static_shap": [69, 70], "static_shape_to_tupl": [69, 70], "static_shuffl": [69, 70], "static_sigmoid": [69, 70], "static_sign": [69, 70], "static_sin": [69, 70], "static_sinh": [69, 70], "static_slogdet": [69, 70], "static_softmax": [69, 70], "static_solv": [69, 70], "static_split": [69, 70], "static_split_factor": [69, 70], "static_split_func_cal": [69, 70], "static_sqrt": [69, 70], "static_squar": [69, 70], "static_squeez": [69, 70], "static_stable_divid": [69, 70], "static_stable_pow": [69, 70], "static_stack": [69, 70], "static_std": [69, 70], "static_stop_gradi": [69, 70], "static_sum": [69, 70], "static_supports_inplac": [69, 70], "static_svd": [69, 70], "static_svdv": [69, 70], "static_swapax": [69, 70], "static_tensordot": [69, 70], "static_til": [69, 70], "static_tmp_dir": [69, 70], "static_to_devic": [69, 70], "static_to_list": [69, 70], "static_to_native_arrays_and_back": [69, 70], "static_to_numpi": [69, 70], "static_to_scalar": [69, 70], "static_total_mem_on_dev": [69, 70], "static_tpu_is_avail": [69, 70], "static_trac": [69, 70], "static_trunc": [69, 70], "static_try_else_non": [69, 70], "static_type_promote_arrai": [69, 70], "static_unique_al": [69, 70], "static_unique_invers": [69, 70], "static_unique_valu": [69, 70], "static_unset_default_devic": [69, 70], "static_unset_default_dtyp": [69, 70], "static_unset_default_float_dtyp": [69, 70], "static_unset_default_int_dtyp": [69, 70], "static_unset_with_grad": [69, 70], "static_unstack": [69, 70], "static_used_mem_on_dev": [69, 70], "static_valid_dtyp": [69, 70], "static_value_is_nan": [69, 70], "static_var": [69, 70], "static_vari": [69, 70], "static_variable_data": [69, 70], "static_vecdot": [69, 70], "static_vector_norm": [69, 70], "static_vector_to_skew_symmetric_matrix": [69, 70], "static_wher": [69, 70], "static_with_grad": [69, 70], "static_zero_pad": [69, 70], "supports_inplac": [69, 70, 609], "tmp_dir": [69, 70, 609], "to_native_arrays_and_back": [69, 70, 162, 168, 188], "to_scalar": [69, 70, 609], "total_mem_on_dev": [69, 70, 166, 321], "tpu_is_avail": [69, 70, 321], "try_else_non": [69, 70, 609], "type_promote_arrai": [69, 70, 284], "unique_al": [69, 70, 926], "unique_invers": [69, 70, 926], "unique_valu": [69, 70, 926], "unset_default_devic": [69, 70, 321], "unset_default_dtyp": [69, 70, 284], "unset_default_float_dtyp": [69, 70, 284], "unset_default_int_dtyp": [69, 70, 284], "unset_with_grad": [69, 70, 683], "used_mem_on_dev": [69, 70, 321], "valid_dtyp": [69, 70, 284], "value_is_nan": [69, 70, 609], "variable_data": [69, 70, 683], "with_grad": [69, 70, 683, 715], "at_dev": [69, 71, 321, 334, 335], "static_arang": [72, 73, 214], "static_asarrai": [72, 73, 217], "static_empty_lik": [72, 73, 223], "static_ey": [72, 73, 228], "n_row": [72, 73, 213, 228, 229, 230], "n_col": [72, 73, 213, 228, 229, 230], "static_from_dlpack": [72, 73, 231], "static_full_lik": [72, 73, 237], "static_linspac": [72, 73, 242], "num": [72, 73, 170, 213, 242, 243, 244, 245, 246, 247], "endpoint": [72, 73, 213, 242, 243, 244, 245, 247], "static_logspac": [72, 73, 245], "static_meshgrid": [72, 73, 248], "static_native_arrai": [72, 73, 253], "static_on": [72, 73, 258], "static_ones_lik": [72, 73, 261], "static_tril": [72, 73, 266], "static_triu": [72, 73, 271], "static_zero": [72, 73, 276], "static_zeros_lik": [72, 73, 279], "int32": [74, 75, 165, 284, 293, 295, 296, 297, 305, 609, 678, 822, 836, 839, 946, 963, 966, 971, 974], "int64": [74, 75, 165, 284, 293, 295, 296, 297, 305, 371, 426, 429, 921, 922, 923, 946, 963, 966, 971, 974], "static_can_cast": [74, 75, 293], "from_": [74, 75, 284, 293, 296, 297], "static_ab": [78, 79, 372], "static_add": [78, 79, 156, 157, 164, 385], "static_divid": [78, 79, 164, 446], "static_multipli": [78, 79, 164, 541], "static_subtract": [78, 79, 164, 590], "static_tan": [78, 79, 157, 164, 595], "143": [78, 79, 157, 371, 595, 596, 598, 599], "38": [78, 79, 157, 371, 595, 596, 598, 599], "static_tanh": [78, 79, 600], "76": [78, 79, 371, 442, 445, 600, 601, 683, 685, 688, 734, 791, 793, 946, 947, 950], "96": [78, 79, 371, 595, 599, 600, 601, 683, 685, 688, 734, 772, 774, 946, 947, 950], "995": [78, 79, 371, 600, 601, 603, 604], "9999": [78, 79, 600, 601], "static_all_equ": [80, 81, 610, 612], "clip_vector_norm": [80, 81, 609], "max_norm": [80, 81, 609, 621, 622, 623, 624], "static_gather_nd": [80, 81, 638], "adam_upd": [82, 83, 174, 683], "lr": [82, 83, 141, 142, 143, 144, 145, 146, 173, 174, 683, 690, 691, 692, 693, 695, 696, 697, 698, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714], "mw_tm1": [82, 83, 683, 690, 691, 692, 693, 703, 704, 705, 706], "vw_tm1": [82, 83, 683, 690, 691, 692, 693, 703, 704, 705, 706], "gradient_descent_upd": [82, 83, 683, 882, 883, 884, 885, 990], "is_vari": [82, 83, 167, 683], "lamb_upd": [82, 83, 683], "max_trust_ratio": [82, 83, 141, 143, 683, 703, 704, 705, 706], "decay_lambda": [82, 83, 141, 143, 144, 683, 703, 704, 705, 706, 707, 708, 709, 710], "lars_upd": [82, 83, 683], "optimizer_upd": [82, 83, 683], "effective_grad": [82, 83, 683, 711, 712, 713, 714], "static_adam_step": [82, 83, 685], "87": [82, 83, 96, 97, 683, 685, 688, 689, 911, 913], "976": [82, 83, 371, 600, 604, 683, 685, 688, 689], "static_adam_upd": [82, 83, 690], "static_gradient_descent_upd": [82, 83, 695], "static_is_vari": [82, 83, 699], "static_lamb_upd": [82, 83, 703], "static_lars_upd": [82, 83, 707], "static_optimizer_upd": [82, 83, 711], "73": [88, 89, 371, 582, 585, 734, 735, 737, 738, 739, 904, 905, 908], "577": [88, 89, 734, 735, 737, 738, 739], "41": [88, 89, 172, 371, 430, 433, 582, 585, 734, 735, 737, 738, 739, 946, 971, 974], "707": [88, 89, 734, 735, 737, 738, 739], "static_choleski": [88, 89, 735], "static_rol": [88, 89, 92, 93, 157, 164, 735, 739, 823, 827, 856], "static_binary_cross_entropi": [90, 91, 807], "static_cross_entropi": [90, 91, 812], "static_sparse_cross_entropi": [90, 91, 817], "static_clip": [92, 93, 823], "random_uniform": [96, 97, 166, 174, 909, 990], "static_randint": [96, 97, 911], "20": [96, 97, 172, 371, 430, 433, 459, 462, 566, 569, 582, 585, 734, 746, 748, 772, 774, 791, 793, 909, 911, 912, 913, 921, 924, 925, 946, 947, 950], "15": [96, 97, 150, 157, 371, 410, 413, 566, 569, 721, 724, 734, 746, 748, 772, 774, 791, 793, 822, 856, 859, 904, 905, 908, 909, 911, 912, 913, 921, 924, 926, 927, 946, 947, 950], "12": [96, 97, 150, 157, 164, 371, 410, 413, 430, 433, 442, 445, 566, 569, 609, 627, 645, 683, 685, 688, 734, 746, 748, 772, 774, 791, 793, 822, 840, 843, 848, 851, 856, 859, 904, 905, 908, 909, 911, 912, 913, 921, 925, 926, 927, 946, 947, 950], "40": [96, 97, 371, 442, 445, 582, 585, 734, 772, 774, 911, 913, 946, 947, 950], "gpu": [96, 97, 151, 166, 172, 187, 321, 340, 343, 356, 358, 362, 364, 369, 911, 913], "62": [96, 97, 911, 913], "52": [96, 97, 683, 685, 688, 734, 772, 774, 911, 913, 926, 927, 946, 947, 950], "95": [96, 97, 683, 685, 688, 911, 913], "37": [96, 97, 371, 595, 599, 904, 905, 908, 911, 913], "42": [96, 97, 175, 198, 204, 207, 683, 685, 688, 734, 772, 774, 909, 911, 913, 919, 946, 947, 950], "14": [96, 97, 153, 157, 164, 371, 430, 433, 683, 685, 688, 721, 733, 734, 746, 748, 772, 774, 911, 913, 926, 927, 946, 947, 950], "13": [96, 97, 157, 164, 371, 410, 413, 430, 433, 442, 445, 582, 585, 609, 627, 683, 685, 688, 721, 733, 734, 746, 748, 772, 774, 904, 905, 908, 911, 913, 921, 925, 926, 927, 946, 947, 950], "static_random_uniform": [96, 97, 915], "static_unique_count": [100, 101, 928], "classivi": [100, 101, 822, 861, 926, 928, 929, 931, 932], "static_argsort": [102, 103, 936], "static_sort": [102, 103, 941], "static_al": [106, 107, 980], "static_ani": [106, 107, 985], "add_ivy_container_instance_method": 108, "containerexampl": [108, 109], "neural": [111, 125, 186, 721, 990], "geglu": 111, "to_ivy_modul": [114, 175], "native_modul": [114, 115], "native_module_class": [114, 115], "trainabl": [114, 115, 137, 138, 147, 156, 171, 173, 174, 683, 699, 701], "requir": [114, 115, 150, 153, 155, 156, 157, 159, 162, 163, 165, 166, 168, 172, 187, 210, 211, 371, 582, 585, 734, 749, 751, 822, 866, 869], "dedic": [114, 115, 168, 172, 174, 683, 719], "constant": [116, 117, 121, 124, 137, 138, 139, 140, 155, 160, 174, 175, 187, 321, 330, 331, 822, 832, 835, 886, 892, 904, 905, 908], "create_vari": [116, 174], "var_shap": [116, 174], "fan_out": [116, 174], "fan_in": [116, 174], "firstlayersiren": 116, "glorotuniform": [116, 125, 126, 127, 128, 129, 130, 131, 132, 134, 135, 174], "kaimingnorm": [116, 120], "fan_mod": [116, 174], "negative_slop": 116, "Ones": 116, "siren": 116, "w0": [116, 122], "30": [116, 122, 371, 566, 569, 734, 772, 774, 946, 947, 950], "numer": [116, 155, 174, 213, 248, 251, 284, 290, 371, 372, 375, 385, 388, 434, 437, 446, 449, 463, 466, 467, 470, 471, 474, 483, 486, 487, 490, 491, 494, 495, 498, 527, 530, 531, 534, 541, 544, 546, 549, 550, 553, 558, 561, 562, 565, 570, 573, 586, 589, 590, 594, 605, 608, 609, 644, 645, 667, 668, 673, 674, 734, 740, 742, 758, 761, 772, 774, 785, 787, 791, 793, 794, 796, 797, 799, 909, 920, 921, 922, 923, 946, 951, 954, 963, 966, 971, 974], "power": [116, 172, 173, 174, 371, 426, 429, 459, 462, 558, 561, 609, 644, 667, 674, 734, 765], "gain": [116, 151, 169, 174], "input_channel": [125, 126, 127, 128, 129, 130, 131, 134, 135, 170, 174], "output_channel": [125, 126, 127, 128, 129, 130, 131, 134, 135, 174], "filter_s": [125, 126, 127], "stride": [125, 126, 127, 128, 129, 130, 131, 132, 721, 722, 723, 724, 725, 726, 727, 728], "pad": [125, 126, 127, 128, 129, 130, 131, 132, 609, 636, 721, 722, 723, 724, 725, 726, 727, 728, 822, 832, 835, 878, 881], "weight_initi": [125, 126, 127, 128, 129, 130, 131, 132, 134, 135, 174], "bias_initi": [125, 126, 127, 128, 129, 130, 131, 132, 135, 174], "data_format": [125, 126, 127, 128, 129, 130, 131, 132, 721, 722, 723, 724, 725, 726, 727, 728], "nwc": [125, 126, 127, 721, 722, 723], "dilat": [125, 126, 127, 128, 129, 130, 131, 132, 721, 722, 723, 724, 725, 726, 727, 728], "1d": [125, 126, 127], "convolut": [125, 126, 127, 128, 129, 130, 131, 132, 721, 722, 723, 724, 725, 726, 727, 728], "channel": [125, 126, 127, 128, 129, 130, 131, 132, 134, 135, 150, 151, 152, 153, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 609, 636], "filter": [125, 126, 127, 128, 129, 130, 131, 132, 153, 721, 722, 723, 724, 725, 726, 727, 728], "slide": [125, 126, 127, 128, 129, 130, 131, 132, 721, 722, 723, 724, 725, 726, 727, 728], "window": [125, 126, 127, 128, 129, 130, 131, 132, 151, 153, 721, 722, 723, 724, 725, 726, 727, 728], "valid": [125, 126, 127, 128, 129, 130, 131, 132, 165, 170, 284, 298, 721, 722, 723, 724, 725, 726, 727, 728, 822, 866, 869, 979, 980, 983, 985, 988], "per": [125, 126, 127, 128, 129, 130, 131, 132, 151, 173, 321, 721, 722, 723, 724, 725, 726, 727, 728], "weight": [125, 126, 127, 128, 129, 130, 131, 132, 134, 135, 137, 138, 141, 143, 144, 160, 164, 174, 175, 683, 685, 688, 690, 692, 695, 697, 703, 705, 707, 709, 711, 713, 721, 730, 731, 733], "bia": [125, 126, 127, 128, 129, 130, 131, 132, 135, 170, 174, 721, 730, 731], "ncw": [125, 126, 127, 721, 722, 723], "construct": [125, 126, 127, 128, 129, 130, 131, 132, 134, 135, 136, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 170, 171, 174, 175, 822, 874, 877], "conv1dtranspos": 125, "output_shap": [125, 127, 129, 131, 721, 723, 725, 727], "filter_shap": [125, 128, 129, 130, 131, 132], "nhwc": [125, 128, 129, 132, 721, 724, 725, 728], "2d": [125, 128, 129, 132, 734, 781], "nchw": [125, 128, 129, 132, 721, 724, 725, 728], "conv2dtranspos": 125, "ndhwc": [125, 130, 131, 721, 726, 727], "3d": [125, 130, 131, 186], "ncdhw": [125, 130, 131, 721, 726, 727], "conv3dtranspos": 125, "depthwiseconv2d": 125, "num_channel": [125, 132], "depthwis": [125, 132, 721, 728], "prob": [125, 133, 721, 729, 909, 910], "randomli": [125, 133, 721, 729], "sampl": [125, 133, 159, 721, 729, 909, 910, 914, 915, 917, 946, 967, 970, 975, 978], "bernoul": [125, 133], "lstm": [125, 170, 721, 731], "num_lay": [125, 134], "return_sequ": [125, 134], "return_st": [125, 134], "cell": [125, 134, 721, 731], "latest": [125, 134, 150, 152, 153, 156, 187, 213, 214, 215, 217, 220, 222, 223, 226, 228, 229, 231, 234, 236, 237, 240, 242, 243, 258, 259, 261, 264, 266, 270, 271, 275, 276, 278, 279, 283, 284, 293, 296, 371, 372, 375, 390, 393, 430, 433, 434, 437, 442, 445, 467, 470, 550, 553, 582, 585, 586, 589, 734, 746, 748, 822, 836, 839, 856, 859, 926, 927, 928, 932, 935, 936, 939, 946, 951, 954], "timestep": [125, 134, 170, 721, 731], "hidden": [125, 134, 174, 721, 731], "get_initial_st": [125, 134], "batch_shap": [125, 134, 170, 172, 175, 213, 228, 229, 609, 662, 721, 731, 732, 733, 734, 803, 805, 909, 910], "explicitli": [125, 134, 136, 137, 138, 156, 160, 161, 163, 164, 167, 170, 187, 734, 749, 751], "with_bia": [125, 135, 174], "refer": [125, 135, 150, 151, 159, 160, 165, 168, 187, 213, 228, 229, 371, 463, 466, 511, 514, 683, 685, 688, 690, 692, 734, 797, 799, 803, 805, 946, 967, 970, 975, 978, 979, 980, 983, 985, 988], "dens": [125, 135], "receiv": [125, 135, 151, 159, 165, 166, 321, 330, 331, 609, 616, 659], "multiheadattent": 125, "query_dim": [125, 136], "num_head": [125, 136, 164, 721, 732], "head_dim": [125, 136], "64": [125, 136, 150, 173, 174, 371, 582, 585, 586, 589, 721, 727, 728, 734, 772, 774, 946, 947, 950, 990], "dropout_r": [125, 136], "context_dim": [125, 136], "with_to_q_fn": [125, 136], "with_to_kv_fn": [125, 136], "with_to_out_fn": [125, 136], "build_mod": [125, 136, 137, 138], "on_init": [125, 136, 137, 138], "multi": [125, 136, 157, 164, 169, 187, 721, 732, 734, 740, 742, 990, 996], "head": [125, 136, 150, 164, 721, 732, 990], "rate": [125, 136, 141, 142, 143, 144, 145, 146, 683, 690, 692, 695, 697, 703, 705, 707, 709, 711, 713, 882, 883, 884, 885], "context": [125, 136, 151, 157, 164, 165, 166, 321, 609, 660, 721, 732], "measur": [125, 136, 164, 721, 732], "dot": [125, 136, 164, 721, 732, 733, 734, 791, 793, 797, 799], "product": [125, 136, 164, 371, 541, 544, 609, 627, 721, 732, 733, 734, 740, 742, 758, 761, 772, 774, 791, 793, 797, 799, 946, 947, 950, 963, 966], "final": [125, 136, 151, 156, 157, 160, 163, 165, 167, 170, 172, 173, 213, 242, 243, 245, 246, 609, 636], "built": [125, 136, 137, 138, 150, 171, 213, 214, 215, 321], "__call__": [125, 136, 137, 138], "run": [125, 136, 137, 138, 150, 153, 158, 159, 161, 168, 170, 171, 172, 173, 174, 175, 186, 187, 321, 330, 683, 685, 688, 690, 692, 703, 705, 882, 883, 884, 885], "compile_on_next_step": [137, 138, 141, 142, 143, 144, 145, 146, 174], "store_var": [137, 138], "arg_stateful_idx": [137, 138], "kwarg_stateful_idx": [137, 138], "fallback_to_non_compil": [137, 138, 141, 145], "with_partial_v": [137, 138], "initialz": [137, 138], "compil": [137, 138, 141, 142, 143, 144, 145, 146, 155, 164, 169, 171, 187, 990], "forward": [137, 138, 141, 145, 156, 175, 186, 187], "id": [137, 138, 150, 163, 164, 321, 340], "track": [137, 138, 150, 151, 321, 886, 898], "part": [137, 138, 151, 155, 158, 159, 160, 170, 171, 175, 186, 187, 213, 266, 270, 271, 275, 683, 690, 692, 695, 697, 703, 705, 707, 709, 711, 713], "fall": [137, 138, 141, 145, 165, 169, 990], "non": [137, 138, 141, 145, 157, 164, 165, 170, 210, 211, 284, 290, 308, 371, 527, 530, 531, 534, 721, 724, 734, 743, 745, 766, 768, 785, 787, 791, 793, 797, 799, 800, 802, 921, 922, 923, 924, 946, 951, 954, 955, 958, 959, 962, 963, 966, 975, 978, 979, 980, 983, 985, 988], "from_cal": [137, 138], "check_submod_ret": [137, 138], "get_mod_kei": [137, 138], "top_mod": [137, 138], "mod_depth": [137, 138], "mod_height": [137, 138], "mod_with_top_mod_key_chain": [137, 138], "depth": [137, 138, 173, 174, 175, 186, 321, 345, 349, 353, 609, 647, 662, 886, 898], "save_weight": [137, 138], "weights_path": [137, 138], "show_mod_in_top_mod": [137, 138], "upper_depth": [137, 138], "lower_depth": [137, 138], "show_structur": [137, 138], "show_v_in_top_v": [137, 138], "sub_mod": [137, 138], "show_v": [137, 138], "track_submod_call_ord": [137, 138], "track_submod_ret": [137, 138], "v_with_top_v_key_chain": [137, 138], "layernorm": 139, "normalized_shap": [139, 140], "elementwise_affin": [139, 140], "mini": [139, 140, 904, 905, 908], "trail": [139, 140], "small": [139, 140, 157, 160, 170, 174, 187, 371, 541, 544, 734, 766, 768, 775, 777, 904, 905, 908], "denomin": [139, 140, 160, 187, 609, 635, 645, 668, 673, 674, 904, 905, 908], "_min_bas": [139, 140, 609, 674, 904, 905, 908], "learnabl": [139, 140, 175, 904, 905, 908], "affin": [139, 140], "submodul": [139, 140, 147, 148, 150, 151, 152, 153, 158, 159, 160, 166, 169, 170, 174, 990], "adam": [141, 143, 173, 174, 175, 683, 685, 688, 690, 692, 703, 705, 990], "0001": [141, 142, 143], "forget": [141, 142, 143, 683, 685, 688, 690, 692, 703, 705], "moment": [141, 142, 143, 161, 187, 683, 685, 688, 690, 692, 703, 705], "divisor": [141, 142, 143, 371, 446, 449, 562, 565, 683, 685, 688, 690, 692, 703, 705, 946, 967, 970, 975, 978], "prevent": [141, 142, 143, 151, 167, 172, 683, 685, 688, 690, 692, 703, 705, 946, 971, 974], "divis": [141, 142, 143, 160, 371, 426, 429, 446, 449, 471, 474, 562, 565, 609, 635, 645, 668, 673, 674, 683, 685, 688, 690, 692, 703, 705], "set_stat": [141, 142, 143, 144, 145, 146, 174], "lamb": [141, 174, 683, 703, 705], "trust": [141, 143, 683, 703, 705], "ratio": [141, 143, 321, 683, 703, 705], "decai": [141, 143, 144, 683, 703, 705, 707, 709], "lar": [141, 174, 683, 703, 705, 707, 709], "lambda": [141, 144, 146, 152, 170, 173], "layerwis": [141, 144, 683, 707, 709], "init_on_first_step": [141, 145], "grad": [141, 145, 164, 173, 174, 175, 990], "ignore_miss": [141, 145], "overriden": [141, 145], "privat": [141, 145, 153], "_step": [141, 145, 174], "miss": [141, 145, 150, 157, 159, 163, 164], "sgd": 141, "stochast": [141, 146], "descent": [141, 146, 174, 683, 695, 697], "sub_modul": [147, 148], "strongli": [149, 150, 990, 996], "welcom": [149, 150, 151, 990, 996], "skill": 149, "vetern": 149, "beginn": 149, "aspect": [149, 173, 990], "guid": [149, 150, 151, 159, 990], "through": [149, 151, 152, 154, 157, 160, 161, 164, 169, 170, 172, 173, 174, 175, 186, 371, 402, 405], "journei": [149, 990, 996], "inclusvi": 149, "big": [149, 187], "team": [149, 150, 151], "board": 149, "contributor": [149, 150, 151, 169, 990], "section": [149, 151, 152, 154, 155, 156, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 173, 174, 926, 927, 928, 932, 934], "below": [149, 150, 152, 153, 154, 155, 157, 160, 164, 165, 166, 167, 170, 171, 172, 173, 174, 175, 186, 213, 266, 270, 271, 275, 371, 410, 413, 430, 433, 442, 445, 566, 569, 600, 604, 734, 743, 745, 746, 748, 794, 796, 822, 836, 839, 840, 843, 926, 927, 935, 936, 939, 990], "best": [149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 609, 659], "go": [149, 150, 151, 152, 154, 155, 157, 164, 169, 173, 187, 886, 897], "finish": [149, 150, 154, 990], "dive": [149, 151, 152, 169, 172, 173, 187, 990], "environ": [149, 151, 153, 186], "basic": [149, 152, 153], "fork": [149, 150, 609, 660], "doc": [149, 152, 156, 168, 170, 173, 174, 990], "document": [149, 151, 171, 173, 175], "local": [149, 150, 153, 160], "task": [149, 151, 186, 882, 883, 884, 885, 990], "video": [149, 151, 156, 157, 168], "realli": [150, 164, 187], "contribut": [150, 151, 152, 170, 996], "toward": [150, 170, 822, 856, 859, 990, 996], "page": [150, 151, 171, 175, 185, 990, 996], "explain": [150, 151, 152, 155, 156, 157, 159, 160, 161, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 990, 996], "main": [150, 153, 162, 164, 213, 228, 229, 266, 270, 271, 275, 734, 746, 748, 794, 796], "prefer": [150, 164], "git": [150, 151], "com": 150, "unifyai": [150, 153], "http": [150, 156, 213, 214, 215, 217, 220, 222, 223, 226, 228, 229, 231, 234, 236, 237, 240, 242, 243, 258, 259, 261, 264, 266, 270, 271, 275, 276, 278, 279, 283, 284, 293, 296, 371, 372, 375, 390, 393, 430, 433, 434, 437, 442, 445, 467, 470, 550, 553, 582, 585, 586, 589, 683, 685, 688, 690, 692, 734, 746, 748, 822, 836, 839, 856, 859, 926, 927, 928, 932, 935, 936, 939, 946, 951, 954], "gh": 150, "your_fold": 150, "cours": [150, 151, 157, 173, 187], "whatev": [150, 187], "integr": [150, 159, 284, 290], "familiar": [150, 152], "sure": [150, 152, 158], "elig": 150, "free": [150, 151, 152, 153, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 186, 990], "student": 150, "licenc": 150, "peopl": [150, 151, 154], "seem": [150, 174, 187], "explicit": [150, 153, 164, 165, 167, 170, 187], "remind": 150, "pace": 150, "suggest": [150, 151, 155], "packag": [150, 153, 187], "ensur": [150, 151, 159, 163, 165, 168, 609, 653], "pypi": [150, 152, 187], "person": [150, 151], "experi": [150, 171, 173, 187], "avoid": [150, 151, 159, 161, 162, 164, 172, 321, 371, 463, 466], "pip": [150, 186, 990], "instal": [150, 153, 186, 990], "abil": [150, 171, 187], "perhap": [150, 172, 173, 174, 187], "command": [150, 153, 990], "ivy_dev": [150, 151, 153], "setup": 150, "click": [150, 151, 156, 990], "icon": [150, 151], "side": [150, 151], "choos": [150, 151, 175, 321, 366, 371, 527, 530, 531, 534, 921, 925, 926, 927, 928, 932, 934, 946, 951, 954, 955, 958, 959, 962], "panel": 150, "select": [150, 151, 159, 170, 172, 175, 187], "drop": [150, 187], "down": [150, 172], "path": [150, 153], "manual": [150, 151, 159, 174, 886, 887, 896, 897], "builtin": [150, 153, 172, 174], "cmd": [150, 153], "directori": [150, 151, 153, 609, 670], "folder": [150, 151, 153, 155, 158, 159, 160], "abov": [150, 151, 153, 156, 157, 160, 161, 163, 164, 167, 168, 172, 173, 174, 175, 213, 214, 215, 217, 220, 222, 223, 226, 228, 229, 231, 234, 236, 237, 240, 242, 243, 245, 246, 248, 251, 258, 259, 261, 264, 266, 270, 271, 275, 276, 278, 279, 283, 284, 293, 296, 371, 372, 375, 385, 388, 390, 393, 410, 413, 430, 433, 434, 437, 442, 445, 467, 470, 541, 544, 550, 553, 566, 569, 582, 585, 586, 589, 595, 599, 600, 604, 609, 637, 721, 724, 733, 734, 735, 738, 743, 745, 746, 748, 749, 751, 794, 796, 822, 836, 839, 840, 843, 856, 859, 904, 905, 908, 909, 911, 912, 926, 927, 928, 932, 935, 936, 939, 946, 951, 954, 963, 966, 967, 970, 971, 974, 979, 980, 983], "m": [150, 151, 153, 154, 170, 213, 248, 251, 266, 270, 271, 275, 609, 618, 734, 735, 738, 743, 745, 746, 748, 749, 751, 752, 754, 755, 757, 758, 761, 766, 768, 769, 771, 772, 774, 775, 777, 778, 780, 782, 784, 785, 787, 788, 790, 794, 796, 909, 914, 915, 917], "python3": [150, 153], "script": [150, 151, 153, 157, 170, 187], "bat": [150, 151, 153], "OR": [150, 151, 153, 371, 422, 425, 531, 534, 979, 985, 988], "bin": [150, 151, 153], "mac": [150, 151, 153], "linux": [150, 151, 153], "virtualenv": 150, "os": 150, "note": [150, 151, 155, 156, 157, 164, 371, 562, 565, 734, 749, 751, 785, 787, 822, 866, 869, 926, 928, 932, 946, 955, 958], "tick": [150, 151], "To": [150, 157, 160, 164, 173, 174, 175, 990], "ivy_test": [150, 151], "test_array_api": [150, 151, 158, 159], "cd": [150, 151, 153], "txt": 150, "visual": [150, 187], "jetbrain": 150, "remot": 150, "mitig": 150, "potenti": [150, 169, 371, 463, 466], "conflict": [150, 151, 173], "yet": [150, 152, 164], "particular": [150, 151, 155, 167, 371, 372, 375], "system": [150, 187, 734, 782, 784], "instruct": [150, 152], "desktop": 150, "wsl": 150, "powershel": 150, "admin": 150, "visit": 150, "link": 150, "profession": 150, "execut": [150, 153, 164, 167, 170, 172, 175, 187, 609, 680], "deploy": 150, "top": [150, 151, 159, 173, 174, 990], "press": [150, 173, 990], "ok": 150, "caus": [150, 151, 157, 159, 164, 167, 187], "earlier": [150, 151], "might": [150, 151, 155, 159, 162, 170, 172, 173, 609, 630], "necessari": [150, 157, 161, 164, 167], "virtualis": 150, "detail": [150, 151, 152, 155, 158, 159, 160, 161, 162, 164, 168, 173, 174, 213, 231, 234, 926, 927, 928, 932, 934], "sudo": 150, "apt": 150, "ca": 150, "certif": 150, "curl": 150, "gnupg": 150, "lsb": 150, "mkdir": 150, "keyr": 150, "fssl": 150, "download": [150, 159], "gpg": 150, "dearmor": 150, "o": [150, 170, 609, 618], "echo": 150, "deb": 150, "arch": 150, "dpkg": 150, "architectur": [150, 175, 187], "lsb_releas": 150, "cs": 150, "tee": 150, "null": 150, "ce": 150, "cli": 150, "containerd": 150, "io": 150, "compos": [150, 164, 187], "plugin": 150, "systemctl": 150, "permiss": 150, "relat": [150, 151, 186, 321], "post": [150, 175, 904, 905, 908, 990, 996], "headach": 150, "arm": [150, 151], "m1": 150, "instead": [150, 151, 152, 156, 157, 159, 160, 164, 167, 168, 170, 172, 173, 187], "featur": [150, 155, 168, 173, 990], "vm": 150, "azur": 150, "cloud": [150, 186], "defin": [150, 152, 155, 156, 165, 168, 172, 174, 187, 371, 541, 544, 562, 565, 609, 662, 734, 740, 742, 749, 751, 782, 784, 909, 911, 912, 946, 951, 954, 955, 958, 959, 962], "dockerfil": [150, 153], "longer": [150, 165, 167], "worri": 150, "platform": 150, "agnost": [150, 163, 168, 170, 172, 175, 187, 990], "usual": 150, "studio": 150, "favourit": 150, "extens": [150, 151, 156, 213, 214, 215, 217, 220, 222, 223, 226, 228, 229, 231, 234, 236, 237, 240, 242, 243, 248, 251, 258, 259, 261, 264, 266, 270, 271, 275, 276, 278, 279, 283, 284, 293, 296, 371, 372, 375, 385, 388, 390, 393, 410, 413, 430, 433, 434, 437, 442, 445, 467, 470, 499, 502, 550, 553, 566, 569, 582, 585, 586, 589, 595, 599, 600, 604, 734, 743, 745, 746, 748, 822, 836, 839, 840, 843, 856, 859, 926, 927, 928, 932, 935, 936, 939, 946, 951, 954, 979, 980, 983], "theme": 150, "too": [150, 151, 187, 371, 385, 388, 541, 544], "done": [150, 151, 157, 159, 173], "unsupport": [150, 165, 284, 305, 306], "slow": 150, "ipad": 150, "long": [150, 151, 157, 721, 731], "browser": 150, "cool": [150, 155], "requisit": 150, "pane": [150, 151], "readi": [150, 152], "begin": [150, 886, 887, 897], "outlin": [150, 151, 152, 154, 156, 159, 160, 164, 167, 172], "dropdown": 150, "tab": [150, 173, 990], "master": [150, 151, 164], "vs": 150, "bottom": 150, "box": 150, "patient": 150, "upto": 150, "minut": 150, "launch": 150, "That": [150, 151, 172, 173, 174, 371, 562, 565], "approach": [150, 151, 159, 160, 164, 172, 173, 187], "colour": 150, "applic": [150, 165, 166, 174, 721, 732, 733, 886, 892, 898], "good": [150, 151, 152, 153, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 174], "chanc": 150, "vscode": 150, "explor": [150, 171, 175, 186], "troubleshoot": 150, "sometim": [150, 151], "ever": [150, 151, 152, 153, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168], "bit": [150, 157, 160, 164, 172, 284, 303, 304, 307, 371, 414, 417, 418, 421, 426, 429, 946, 963, 966, 971, 974], "usr": 150, "more": [150, 151, 152, 154, 155, 157, 159, 160, 161, 162, 163, 164, 167, 168, 169, 170, 171, 172, 173, 174, 175, 186, 187, 213, 214, 215, 284, 291, 371, 463, 466, 734, 758, 761, 822, 840, 843, 926, 927, 928, 932, 934, 990], "nutshel": [150, 168], "hook": 150, "lint": 150, "fix": [150, 151], "fail": [150, 152, 158, 159, 170, 172], "attempt": [150, 187], "succe": 150, "problemat": 150, "proce": [150, 151, 152, 153, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168], "modifi": [150, 151, 156, 160, 165, 166, 170], "properli": [150, 154], "enter": [150, 151, 163, 165, 166, 168, 321], "unsur": [150, 151, 152, 153, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168], "feel": [150, 151, 152, 153, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 990], "server": [151, 990], "suitabl": [151, 155, 164], "quick": [151, 154, 174], "tendenc": 151, "land": 151, "end": [151, 164, 167, 169, 186, 187, 213, 214, 215, 371, 402, 405, 990, 996], "world": 151, "come": [151, 152, 174, 185, 990, 996], "fly": 151, "hard": [151, 172], "respons": [151, 153], "internship": 151, "comment": 151, "trigger": 151, "unansw": 151, "label": [151, 170, 171, 175, 806, 807, 810, 812, 815, 817, 820], "respond": 151, "someon": [151, 187], "strive": [151, 187], "repli": 151, "newli": [151, 167, 210, 211, 284, 290, 609, 620], "bug": [151, 159], "serv": [151, 159, 160, 163, 164, 168, 169, 990], "suspect": 151, "behaviour": [151, 156, 159, 163, 164, 167, 168, 172], "observ": 151, "confid": 151, "wrong": 151, "someth": [151, 155, 173, 174, 187], "bet": 151, "act": [151, 157, 187], "placehold": [151, 163, 168, 886, 898], "mark": [151, 159], "ii": [151, 946, 947, 950], "iii": 151, "titl": [151, 990], "issue_numb": 151, "No": [151, 170], "progress": [151, 164, 171, 175], "pr": 151, "soon": [151, 164, 185, 187, 990, 996], "solut": [151, 159, 164, 734, 782, 784], "review": [151, 155], "merg": 151, "everi": [151, 152, 153, 157, 158, 159, 160, 161, 162, 164, 167, 168, 170, 172, 174, 213, 236, 237, 240, 609, 610, 613], "dai": 151, "close": [151, 156, 371, 463, 466, 566, 569, 734, 785, 787], "likewis": [151, 156, 160, 164, 165, 168, 173], "freed": 151, "purpos": [151, 153, 157, 159, 160, 162, 163, 164, 168, 169, 172, 371, 463, 466, 990], "remain": [151, 157, 187, 371, 385, 388, 541, 544, 562, 565, 822, 852, 855, 886, 892], "short": [151, 174, 721, 731], "basi": [151, 158, 173], "situat": [151, 175], "alloc": [151, 187, 213, 266, 270, 271, 275, 284, 290, 321], "upon": [151, 157, 159, 167, 187], "period": 151, "unabl": 151, "obvious": 151, "never": [151, 164], "reflect": [151, 163], "qualiti": 151, "hypothet": 151, "frustrat": 151, "delai": 151, "busi": 151, "fine": [151, 172, 175], "becaus": [151, 156, 159, 160, 161, 163, 165, 166, 167, 168, 170, 174, 175, 187], "inact": 151, "me": 151, "unfairli": 151, "definit": [151, 160, 165, 172, 734, 735, 738, 740, 742], "investig": 151, "Then": [151, 153, 172, 187], "practic": [151, 159], "separ": [151, 159, 163, 170, 172, 173], "branch": [151, 164, 187, 210, 211, 371, 402, 405], "role": [151, 171], "date": 151, "upstream": [151, 158], "complic": [151, 170], "root": [151, 153, 173, 371, 582, 585, 909, 910, 914], "merge_with_upstream": 151, "sh": 151, "name_of_your_branch": 151, "resolv": [151, 946, 963, 966, 971, 974], "push": [151, 158], "both": [151, 156, 157, 160, 164, 166, 167, 168, 170, 172, 173, 174, 175, 186, 187, 213, 214, 215, 217, 220, 222, 223, 226, 228, 229, 231, 234, 236, 237, 240, 242, 243, 245, 246, 248, 251, 258, 259, 261, 264, 266, 270, 271, 275, 276, 278, 279, 283, 284, 293, 296, 311, 371, 372, 375, 385, 388, 390, 393, 434, 437, 467, 470, 550, 553, 558, 561, 582, 585, 586, 589, 595, 599, 609, 637, 683, 685, 688, 721, 724, 733, 734, 735, 738, 740, 742, 746, 748, 758, 761, 797, 799, 822, 856, 859, 904, 905, 908, 926, 928, 932, 946, 951, 954, 979, 980, 983], "abort": 151, "tediou": 151, "resolut": 151, "stash": 151, "reinstat": 151, "fetch": 151, "uncommit": 151, "unstag": 151, "untrack": 151, "comprehens": 151, "explan": [151, 156, 164, 168, 172], "atlassian": 151, "tutori": 151, "wrote": 151, "piec": [151, 160, 162, 163, 170], "inform": [151, 284, 304, 307, 609, 615, 683, 716], "tag": 151, "usu": 151, "describ": [151, 171, 175, 946, 947, 950, 963, 966, 967, 970, 971, 974], "navig": [151, 154], "blame": 151, "revis": 151, "author": [151, 990], "eg": 151, "past": 151, "l": [151, 154, 734, 735, 738, 749, 751, 758, 761, 794, 796], "grep": 151, "commit_id": 151, "handi": 151, "histori": 151, "toggl": 151, "vertic": 151, "highlight": [151, 157], "previou": [151, 159, 168, 175, 187, 683, 690, 692, 703, 705], "whenev": [151, 172, 173], "think": [151, 157], "interact": [151, 990], "quit": [151, 152, 156, 160, 162, 163], "yourself": [151, 152, 186], "simpler": [151, 172], "cannot": [151, 161, 165, 175], "least": [151, 157, 160, 163, 734, 758, 761], "tickbox": 151, "corner": 151, "span": 151, "intent": [151, 167], "larg": [151, 173, 371, 385, 388, 541, 544], "discourag": 151, "philosophi": 151, "increment": [151, 609, 652], "frequent": [151, 152], "valuabl": 151, "infrequ": 151, "wast": 151, "spot": [151, 160], "mistak": 151, "propos": 151, "mountain": 151, "advoc": [151, 187], "individu": [151, 152, 160], "style": [151, 921, 924], "ve": [151, 169, 172, 909, 910, 990], "actual": [151, 154, 160, 167, 169, 172, 174, 187], "aim": [151, 169], "subsect": 151, "session": [151, 990], "block": [151, 160, 169, 171, 175, 187, 321, 990], "smaller": [151, 170, 175, 822, 823, 826, 856, 859, 946, 963, 966, 971, 974], "edit": 151, "beauti": 151, "particularli": [151, 173, 187], "concern": [151, 154, 157, 164, 167, 169], "effici": [151, 159, 160, 164, 167, 168, 170, 173, 187], "difficult": [151, 159, 187, 926, 927, 928, 932, 934], "undo": 151, "stress": 151, "frequenc": [151, 609, 636], "pycharm": 151, "pytest": [151, 159], "button": 151, "declar": 151, "insid": [151, 153, 155, 165], "exec": 151, "rm": 151, "rf": 151, "cp": 151, "ivy_contain": 151, "bash": [151, 153], "test_ivi": [151, 159], "test_funct": 151, "test_cor": 151, "test_imag": 151, "test_random_crop": 151, "header": 151, "q": [151, 187, 721, 733, 734, 749, 751, 778, 780], "array_api_test": 151, "test_creation_funct": 151, "test_arang": 151, "variou": [151, 156, 162, 168, 186], "wherebi": [152, 164, 886, 898], "broad": 152, "todo": [152, 159], "commit": [152, 159], "NOT": [152, 371, 527, 530], "resourc": 152, "hypothesi": 152, "cover": [152, 156, 157, 160, 162, 169], "direct": [152, 174, 175, 186, 935, 941, 944], "bind": [152, 164], "aforement": 152, "categori": [152, 155, 163, 164, 165, 169, 990], "parent": [152, 172], "hint": [152, 155, 156, 160, 163, 167, 168, 213, 214, 215, 217, 220, 222, 223, 226, 228, 229, 231, 234, 236, 237, 240, 242, 243, 245, 246, 248, 251, 258, 259, 261, 264, 266, 270, 271, 275, 276, 278, 279, 283, 284, 293, 296, 371, 372, 375, 385, 388, 390, 393, 410, 413, 430, 433, 434, 437, 442, 445, 467, 470, 550, 553, 566, 569, 582, 585, 586, 589, 595, 599, 600, 604, 609, 637, 721, 724, 733, 734, 735, 738, 743, 745, 746, 748, 822, 836, 839, 840, 843, 856, 859, 904, 905, 908, 926, 927, 928, 932, 935, 936, 939, 946, 951, 954, 979, 980, 983], "its": [152, 153, 156, 284, 291, 321, 365, 734, 758, 761, 822, 836, 839, 852, 855, 856, 859, 870, 873], "thorough": [152, 156, 159, 168], "transpil": [152, 169, 171, 990, 996], "builder": [153, 185, 187, 990], "maco": 153, "ubuntu": 153, "uid": 153, "make_docs_without_dock": 153, "rel": [153, 683, 690, 692, 695, 697, 703, 705, 707, 709, 711, 713, 734, 746, 748, 766, 768, 775, 777, 794, 796, 822, 840, 843, 856, 859, 935, 936, 939, 941, 944, 990], "synchron": 153, "rest": [153, 171, 175], "remove_doc": 153, "_": [153, 156, 164, 167, 172, 173, 213, 214, 215, 217, 220, 222, 223, 226, 228, 229, 231, 234, 236, 237, 240, 242, 243, 258, 259, 261, 264, 266, 270, 271, 275, 276, 278, 279, 283, 284, 293, 296, 371, 372, 375, 390, 393, 430, 433, 434, 437, 442, 445, 467, 470, 550, 553, 582, 585, 586, 589, 683, 685, 688, 690, 692, 734, 746, 748, 803, 805, 822, 836, 839, 856, 859, 926, 927, 935, 936, 939, 946, 951, 954], "fulfil": [153, 169, 990], "autogenerated_sourc": 153, "png": [153, 173], "_imag": 153, "lastli": 153, "rst": 153, "partial_sourc": 153, "conf": 153, "create_rst_fil": 153, "repres": [153, 172, 213, 248, 251, 284, 303, 371, 381, 384, 385, 388, 394, 397, 406, 409, 442, 445, 541, 544, 578, 581, 600, 604, 721, 730, 734, 781, 782, 784], "overal": [153, 156, 164, 165, 166, 175], "markup": 153, "extract": [153, 155], "get_functions_and_class": 153, "doctr": 153, "readm": [153, 187], "module_nam": 153, "copy_readme_to_rst": 153, "tabl": 153, "toc": 153, "tree": 153, "append_toctree_to_rst": 153, "create_index_rst": 153, "\u03c0": [153, 371, 377, 380, 390, 393, 398, 401, 402, 405], "namespac": [153, 155, 165, 170, 175], "who": [154, 169, 187], "mainli": [154, 171, 173], "under": [154, 156, 157, 158, 159, 160, 164, 169, 170, 173, 175], "hood": [154, 157, 159, 160, 164, 169, 170, 173, 175], "weed": [154, 169], "behind": [154, 169, 171, 683, 690, 692, 695, 697, 703, 705, 707, 709, 711, 713], "tour": 154, "primari": [154, 159, 161, 167, 187], "composit": [154, 159, 161, 163, 164, 167, 170, 174, 175, 187], "nestabl": [154, 156, 157, 159, 167, 213, 214, 215, 217, 220, 222, 223, 226, 228, 229, 231, 234, 236, 237, 240, 242, 243, 245, 246, 248, 251, 258, 259, 261, 264, 266, 270, 271, 275, 276, 278, 279, 283, 284, 293, 296, 371, 372, 375, 385, 388, 390, 393, 434, 437, 467, 470, 550, 553, 582, 585, 586, 589, 595, 599, 609, 637, 721, 724, 733, 734, 735, 738, 746, 748, 822, 856, 859, 904, 905, 908, 926, 928, 932, 946, 951, 954, 979, 980, 983], "dynam": [154, 165, 166, 167, 170, 210, 211], "runtim": [154, 159, 321], "h": [154, 164, 721, 724, 725, 726, 727, 728], "j": [154, 609, 617, 618, 734, 794, 796, 946, 947, 950], "borrow": 154, "n": [154, 213, 248, 251, 266, 270, 271, 275, 609, 618, 721, 729, 734, 746, 748, 758, 761, 765, 766, 768, 769, 771, 772, 774, 775, 777, 778, 780, 785, 787, 788, 790, 794, 796, 797, 799, 800, 802, 803, 805, 822, 832, 835, 836, 839, 844, 847, 866, 869, 878, 881, 909, 914, 915, 917, 921, 924, 946, 955, 958, 967, 970, 971, 974, 975, 978, 979, 980, 983, 985, 988], "taken": [155, 175, 734, 746, 748], "meta": [155, 163, 883, 884, 885], "overlap": 155, "sever": [155, 187, 734, 755, 757], "judgement": 155, "locat": [155, 159, 161, 166, 909, 910], "some_namespac": 155, "some_backend": 155, "another_backend": 155, "break": [155, 168, 172, 187, 990], "anyth": [155, 990], "refactor": 155, "ongo": 155, "subfold": [155, 159], "file_nam": 155, "my_func": [155, 157], "int": [155, 157, 160, 164, 165, 166, 167, 168, 175, 198, 203, 210, 211, 213, 222, 228, 229, 236, 237, 240, 242, 243, 245, 246, 258, 259, 266, 270, 271, 275, 276, 278, 284, 292, 301, 303, 304, 307, 310, 321, 343, 346, 347, 348, 349, 357, 358, 359, 365, 366, 371, 410, 413, 414, 417, 418, 421, 422, 425, 426, 429, 430, 433, 609, 615, 627, 628, 631, 632, 633, 636, 637, 646, 662, 665, 666, 671, 672, 681, 683, 685, 688, 690, 692, 703, 705, 721, 722, 724, 726, 727, 728, 734, 740, 742, 746, 748, 791, 793, 794, 796, 797, 799, 800, 802, 806, 812, 815, 817, 820, 822, 828, 831, 832, 835, 836, 839, 840, 843, 844, 847, 848, 851, 852, 855, 856, 859, 861, 862, 865, 866, 869, 870, 873, 874, 877, 878, 881, 882, 883, 884, 885, 886, 898, 904, 905, 908, 909, 910, 911, 912, 914, 915, 917, 919, 921, 922, 923, 935, 936, 939, 941, 944, 946, 951, 954, 955, 958, 959, 962, 967, 970, 971, 974, 975, 978, 979, 980, 983, 985, 988], "nativedtyp": [155, 165, 166, 168, 213, 214, 215, 217, 220, 222, 223, 226, 228, 229, 236, 237, 240, 253, 256, 258, 259, 261, 264, 276, 278, 279, 283, 284, 289, 290, 300, 301, 302, 311, 946, 971, 974], "nativedevic": [155, 165, 166, 168, 213, 214, 215, 217, 220, 222, 223, 226, 228, 229, 236, 237, 240, 242, 243, 245, 246, 253, 256, 258, 259, 261, 264, 276, 278, 279, 283, 321, 338, 339, 340, 354, 360, 362, 364, 366, 367, 370, 609, 662, 909, 910, 911, 912, 914, 915, 917], "my": 155, "cooler": 155, "produc": [155, 321, 330, 331, 721, 733], "something_cool": 155, "category_nam": [156, 160, 165, 166, 168], "contrast": [156, 168], "backend_nam": [156, 160, 161, 162, 165, 166, 168], "account": 156, "instanti": 156, "firstli": [156, 157, 160, 163, 165, 167, 173], "templat": [156, 990], "spec": [156, 157], "api_specif": [156, 213, 214, 215, 217, 220, 222, 223, 226, 228, 229, 231, 234, 236, 237, 240, 242, 243, 258, 259, 261, 264, 266, 270, 271, 275, 276, 278, 279, 283, 284, 293, 296, 371, 372, 375, 390, 393, 430, 433, 434, 437, 442, 445, 467, 470, 550, 553, 582, 585, 586, 589, 734, 746, 748, 822, 836, 839, 856, 859, 926, 927, 928, 932, 935, 936, 939, 946, 951, 954], "array_api": 156, "preview": 156, "render": 156, "incorrectli": 156, "onlin": [156, 990], "approxim": [156, 198, 199, 371, 377, 380, 381, 384, 390, 393, 394, 397, 398, 401, 402, 405, 438, 441, 442, 445, 459, 462, 463, 466, 503, 506, 507, 510, 511, 514, 515, 518, 558, 561, 574, 577, 578, 581, 595, 599, 600, 604, 734, 766, 768, 775, 777], "tangent": [156, 198, 209, 371, 398, 401, 402, 405, 406, 409, 595, 599, 600, 604], "domain": [156, 371, 377, 380, 381, 384, 390, 393, 394, 397, 398, 401, 402, 405, 438, 441, 442, 445, 459, 462, 463, 466, 503, 506, 507, 510, 515, 518, 574, 577, 578, 581, 582, 585, 595, 599, 600, 604], "infin": [156, 212, 284, 290, 371, 372, 375, 381, 384, 385, 388, 394, 397, 398, 401, 402, 405, 434, 437, 438, 441, 442, 445, 459, 462, 463, 466, 467, 470, 471, 474, 483, 486, 487, 490, 503, 506, 507, 510, 515, 518, 519, 522, 541, 544, 558, 561, 562, 565, 566, 569, 574, 577, 578, 581, 582, 585, 595, 599, 600, 604, 605, 608, 734, 800, 802, 946, 951, 954, 959, 962, 979, 980, 983, 985, 988], "codomain": [156, 371, 377, 380, 381, 384, 390, 393, 394, 397, 398, 401, 402, 405, 438, 441, 442, 445, 459, 462, 463, 466, 503, 506, 507, 510, 515, 518, 574, 577, 578, 581, 582, 585, 595, 599, 600, 604], "x_i": [156, 371, 372, 375, 377, 380, 381, 384, 390, 393, 394, 397, 398, 401, 414, 417, 434, 437, 438, 441, 442, 445, 459, 462, 463, 466, 467, 470, 483, 486, 487, 490, 491, 494, 503, 506, 507, 510, 515, 518, 527, 530, 546, 549, 566, 569, 570, 573, 574, 577, 578, 581, 582, 585, 586, 589, 595, 599, 600, 604, 605, 608, 926, 927, 928, 932, 934, 946, 951, 954, 955, 958, 959, 962, 967, 970, 971, 974, 975, 978], "assum": [156, 161, 165, 172, 173, 187, 213, 214, 215, 217, 220, 222, 223, 226, 228, 229, 231, 234, 236, 237, 240, 242, 243, 245, 246, 248, 251, 258, 259, 261, 264, 266, 270, 271, 275, 276, 278, 279, 283, 284, 293, 296, 371, 372, 375, 385, 388, 390, 393, 410, 413, 430, 433, 434, 437, 438, 441, 442, 445, 467, 470, 550, 553, 566, 569, 574, 577, 582, 585, 586, 589, 595, 599, 600, 604, 609, 637, 721, 724, 733, 734, 735, 738, 743, 745, 746, 748, 822, 836, 839, 840, 843, 856, 859, 904, 905, 908, 926, 927, 928, 932, 935, 936, 939, 946, 951, 954, 979, 980, 983], "express": [156, 170, 175, 371, 377, 380, 390, 393, 398, 401, 402, 405, 438, 441, 574, 577, 595, 599], "radian": [156, 371, 377, 380, 390, 393, 398, 401, 402, 405, 438, 441, 574, 577, 595, 599], "float": [156, 160, 164, 165, 167, 168, 172, 174, 198, 200, 212, 213, 214, 215, 222, 228, 229, 236, 237, 240, 242, 243, 245, 246, 258, 259, 276, 278, 284, 290, 300, 304, 309, 312, 321, 354, 360, 364, 367, 370, 371, 372, 375, 377, 380, 381, 384, 385, 388, 390, 393, 394, 397, 398, 401, 402, 405, 406, 409, 430, 433, 434, 437, 438, 441, 442, 445, 446, 449, 451, 454, 459, 462, 463, 466, 467, 470, 471, 474, 475, 478, 479, 482, 495, 498, 503, 506, 507, 510, 515, 518, 519, 522, 541, 544, 546, 549, 550, 553, 554, 557, 558, 561, 562, 565, 566, 569, 574, 577, 578, 581, 582, 585, 590, 594, 595, 599, 600, 604, 605, 608, 609, 621, 622, 624, 636, 644, 645, 667, 668, 673, 674, 683, 685, 688, 690, 692, 695, 697, 703, 705, 707, 709, 711, 713, 721, 724, 728, 733, 734, 735, 738, 743, 745, 749, 751, 752, 754, 755, 757, 766, 768, 775, 777, 778, 780, 782, 784, 785, 787, 800, 802, 806, 807, 810, 812, 815, 817, 820, 882, 883, 884, 885, 904, 905, 908, 909, 914, 915, 917, 926, 927, 928, 932, 934, 946, 951, 954, 955, 958, 959, 962, 963, 966, 967, 970, 971, 974, 975, 978], "operand": [156, 371, 377, 380, 381, 384, 385, 388, 390, 393, 394, 397, 398, 401, 402, 405, 430, 433, 434, 437, 438, 441, 442, 445, 459, 462, 463, 466, 467, 470, 503, 506, 507, 510, 515, 518, 519, 522, 541, 544, 558, 561, 562, 565, 566, 569, 574, 577, 578, 581, 582, 585, 595, 599, 600, 604, 605, 608, 946, 947, 950, 951, 954, 959, 962, 971, 974], "whose": [156, 213, 266, 270, 271, 275, 371, 381, 384, 394, 397, 406, 409, 438, 441, 442, 445, 558, 561, 574, 577, 578, 581, 595, 599, 600, 604, 609, 620, 734, 735, 738, 743, 745, 746, 748, 749, 751, 752, 754, 755, 757, 766, 768, 769, 771, 772, 774, 775, 777, 778, 780, 782, 784, 785, 787, 788, 790, 794, 796, 822, 840, 843, 856, 859, 926, 927, 928, 932, 946, 947, 950], "ref": [156, 371, 426, 429, 495, 498, 541, 544, 550, 553, 562, 565, 590, 594, 822, 866, 869], "promot": [156, 160, 165, 284, 290, 293, 296, 311, 312, 316, 371, 377, 380, 381, 384, 385, 388, 390, 393, 394, 397, 398, 401, 406, 409, 410, 413, 418, 421, 422, 425, 426, 429, 430, 433, 438, 441, 442, 445, 446, 449, 459, 462, 463, 466, 503, 506, 507, 510, 515, 518, 519, 522, 535, 538, 541, 544, 558, 561, 562, 565, 574, 577, 578, 581, 582, 585, 595, 599, 600, 604, 734, 735, 738, 740, 742, 755, 757, 758, 761, 766, 768, 772, 774, 775, 777, 782, 784, 797, 799, 800, 802, 822, 866, 869, 946, 955, 958], "But": [156, 164, 175], "needless": 156, "info": [156, 990], "subset": [156, 159, 168, 170], "renam": 156, "conform": [156, 213, 214, 215, 217, 220, 222, 223, 226, 228, 229, 231, 234, 236, 237, 240, 242, 243, 248, 251, 258, 259, 261, 264, 266, 270, 271, 275, 276, 278, 279, 283, 284, 293, 296, 371, 372, 375, 385, 388, 390, 393, 410, 413, 430, 433, 434, 437, 442, 445, 463, 466, 467, 470, 499, 502, 550, 553, 566, 569, 582, 585, 586, 589, 595, 599, 600, 604, 734, 743, 745, 746, 748, 822, 836, 839, 840, 843, 856, 859, 926, 927, 928, 932, 935, 936, 939, 946, 951, 954, 979, 980, 983], "org": [156, 213, 214, 215, 217, 220, 222, 223, 226, 228, 229, 231, 234, 236, 237, 240, 242, 243, 258, 259, 261, 264, 266, 270, 271, 275, 276, 278, 279, 283, 284, 293, 296, 371, 372, 375, 390, 393, 430, 433, 434, 437, 442, 445, 467, 470, 550, 553, 582, 585, 586, 589, 683, 685, 688, 690, 692, 734, 746, 748, 822, 836, 839, 856, 859, 926, 927, 928, 932, 935, 936, 939, 946, 951, 954], "elementwise_funct": [156, 371, 372, 375, 390, 393, 430, 433, 434, 437, 442, 445, 467, 470, 550, 553, 582, 585, 586, 589, 734, 746, 748, 822, 856, 859, 926, 927, 935, 936, 939, 946, 951, 954], "descript": [156, 164, 213, 214, 215, 217, 220, 222, 223, 226, 228, 229, 231, 234, 236, 237, 240, 242, 243, 245, 246, 248, 251, 258, 259, 261, 264, 266, 270, 271, 275, 276, 278, 279, 283, 284, 293, 296, 371, 372, 375, 385, 388, 390, 393, 410, 413, 430, 433, 434, 437, 442, 445, 467, 470, 550, 553, 566, 569, 582, 585, 586, 589, 595, 599, 600, 604, 609, 637, 721, 724, 733, 734, 735, 738, 743, 745, 746, 748, 800, 802, 822, 836, 839, 840, 843, 856, 859, 904, 905, 908, 926, 927, 928, 932, 935, 936, 939, 946, 951, 954, 979, 980, 983], "simplic": [156, 174, 186, 213, 214, 215, 217, 220, 222, 223, 226, 228, 229, 231, 234, 236, 237, 240, 242, 243, 245, 246, 248, 251, 258, 259, 261, 264, 266, 270, 271, 275, 276, 278, 279, 283, 284, 293, 296, 371, 372, 375, 385, 388, 390, 393, 410, 413, 430, 433, 434, 437, 442, 445, 467, 470, 550, 553, 566, 569, 582, 585, 586, 589, 595, 599, 600, 604, 609, 637, 721, 724, 733, 734, 735, 738, 743, 745, 746, 748, 822, 836, 839, 840, 843, 856, 859, 904, 905, 908, 926, 927, 928, 932, 935, 936, 939, 946, 951, 954], "judgment": 156, "beyond": [156, 822, 856, 859], "text": 156, "func_nam": [156, 157, 160], "pure": [156, 172, 175, 187], "themselv": [156, 160, 164, 165, 166, 174, 886, 887], "operator_nam": 156, "succinct": 156, "contstructor": 156, "though": [156, 160, 165, 173, 187], "_forward": [156, 170, 173, 174, 990], "former": 156, "latter": [156, 161], "implicit": [156, 164, 170], "docst": 156, "eight": 157, "static_": 157, "op_nam": 157, "__r": 157, "four": [157, 160, 165, 168, 173], "__sub__": [157, 163, 164, 168, 172], "__mul__": [157, 163, 164, 168, 172], "__truediv__": [157, 163, 164], "respect": [157, 163, 164, 165, 168, 213, 248, 251, 371, 372, 375, 385, 388, 402, 405, 410, 413, 418, 421, 422, 425, 426, 429, 430, 433, 446, 449, 451, 454, 471, 474, 475, 478, 479, 482, 495, 498, 499, 502, 519, 522, 523, 526, 531, 534, 535, 538, 541, 544, 550, 553, 562, 565, 590, 594, 683, 685, 688, 690, 692, 694, 695, 697, 703, 705, 707, 709, 711, 713, 734, 778, 780, 882, 883, 884, 885], "recap": [157, 164, 174], "independ": [157, 158, 162, 164, 170, 175, 734, 740, 742, 782, 784, 909, 910], "combinatorili": 157, "variat": [157, 159], "grid": [157, 159, 186, 213, 248, 251], "vari": [157, 159, 164, 172, 926, 927, 928, 932, 934], "simplest": 157, "unus": [157, 167, 210, 211], "18": [157, 164, 371, 430, 433, 734, 746, 748, 772, 774, 946, 947, 950], "excess": [157, 161, 172], "showcas": [157, 186], "demonstr": [157, 172], "replic": [157, 165], "meant": 157, "imaginari": 157, "some_flag": 157, "another_flag": 157, "54": [157, 371, 438, 441, 442, 445, 582, 585, 721, 733, 734, 772, 774, 909, 914, 946, 947, 950], "jointli": 157, "three": [157, 164, 169, 213, 248, 251, 990], "x0": [157, 609, 617], "procedur": 157, "sens": [157, 164, 172], "5574077": 157, "1850398": 157, "5463025": 157, "8422884": 157, "91601413": 157, "9647598": 157, "3738229": 157, "1597457": 157, "0963247": 157, "9955841": 157, "3278579": 157, "seper": [157, 609, 636], "pars": [157, 187], "satisfi": [157, 734, 803, 805], "far": [157, 166, 171, 172, 886, 887, 897], "asid": [157, 186], "irrelev": [157, 165], "increasingli": 157, "complex": [157, 173, 174, 175, 187, 734, 749, 751, 785, 787], "rule": [157, 159, 160, 163, 164, 165, 284, 290, 293, 296, 312, 371, 406, 409, 426, 429, 446, 449, 541, 544, 562, 565, 734, 735, 738, 740, 742, 772, 774, 782, 784], "14254655": 157, "1578213": 157, "380515": 157, "17": [157, 164, 198, 200, 734, 746, 748, 909, 914], "trivial": 157, "By": [157, 160, 164, 167, 174, 175, 609, 627, 628, 734, 797, 799, 822, 848, 851, 946, 951, 954, 955, 958, 959, 962, 963, 966, 967, 970, 971, 974, 975, 978, 979, 980, 983, 985, 988], "dictat": [157, 163, 167, 168], "exlud": 157, "unit": [158, 159, 187, 198, 199, 200, 201, 321], "thoroughli": [158, 159], "ci": [158, 159, 187], "failur": 158, "On": [159, 171, 175], "fixtur": 159, "consum": [159, 164, 168, 321], "300": [159, 371, 566, 569], "hit": [159, 170], "permit": [159, 163, 168], "action": 159, "eleg": 159, "intellig": 159, "rang": [159, 173, 174, 175, 213, 214, 215, 242, 243, 245, 246, 926, 927, 946, 963, 966, 971, 974, 990], "unexplor": 159, "known": 159, "repeatedli": [159, 164, 886, 895], "upload": 159, "artifact": 159, "parametr": 159, "strategi": 159, "statement": [159, 187], "plai": [159, 175], "verifi": [159, 165, 166, 172, 990, 996], "truth": [159, 371, 451, 454, 475, 478, 479, 482, 495, 498, 499, 502, 550, 553], "opt": [159, 161, 167, 172], "defer": [159, 160, 163, 164, 165, 166, 167], "suffic": [159, 162], "catch": [159, 609, 630], "systemat": 159, "safeguard": 159, "inabl": 159, "fact": [159, 173], "categor": [160, 166], "mutual": [160, 164], "constitut": [160, 170, 946, 967, 970, 975, 978], "venn": 160, "diagram": 160, "light": [160, 187], "wherea": [160, 163, 165, 166, 168, 175], "hand": [160, 187], "log_pr": [160, 164, 167], "array_arg": 160, "typic": 160, "whatsoev": [160, 164], "commonli": [160, 946, 967, 970, 975, 978], "outsid": [160, 166, 170, 172, 175, 822, 823, 826, 866, 869], "deal": [160, 187], "concurr": [160, 164], "modif": 160, "decor": [160, 162, 164, 165, 166, 167], "group": [160, 164], "briefli": [160, 173], "cast": [160, 165, 284, 290, 293, 296, 822, 828, 831, 946, 963, 966, 971, 974, 990], "get_all_arrays_on_dev": 160, "nested_map": [160, 886], "index_nest": [160, 886], "implicit_backend": 161, "unless": [161, 166, 167, 187, 371, 541, 544, 609, 662], "__dict__": [161, 170, 172], "ivy_original_dict": [161, 170], "unmodifi": [161, 165], "fallback": 161, "freedom": [161, 946, 967, 970, 975, 978], "recommend": [161, 371, 527, 530, 531, 534, 562, 565, 946, 955, 958], "achiev": [162, 173, 175], "wrapper": [162, 163, 164, 165, 167, 168, 172], "logic": [162, 163, 165, 166, 172, 321, 357, 371, 523, 526, 527, 530, 531, 534, 979, 980, 983, 985, 988, 990], "topic": [162, 172], "tf": [163, 165, 166, 167, 168, 170, 175, 187, 990], "_data": [163, 172], "organiz": [163, 164], "bear": [163, 164, 165], "mind": [163, 164], "necessarili": [163, 164], "although": [163, 164], "underpin": [163, 164, 170], "programmat": [163, 164], "backup": [163, 164], "accident": [163, 164], "readabl": [163, 164, 168, 172, 173], "absent": [163, 164], "perk": [163, 164], "auto": [163, 164, 173], "throw": [163, 172], "imposs": 163, "coupl": [163, 164, 172, 174], "anywai": 163, "secondli": [163, 165], "easier": 163, "five": [164, 173], "decis": [164, 170, 172], "displai": [164, 173], "arbitrarili": [164, 173], "__repr__": 164, "control": [164, 165, 167, 172, 173, 186], "__getattr__": 164, "underli": [164, 371, 410, 413, 422, 425, 430, 433, 535, 538], "__contains__": 164, "__getstate__": 164, "__setstate__": 164, "unpickl": 164, "expand": [164, 609, 636, 822, 836, 839], "children": 164, "shallowest": 164, "deepest": 164, "67": [164, 371, 430, 433, 442, 445], "22": [164, 371, 430, 433, 734, 746, 748, 772, 774, 921, 925, 946, 947, 950], "retain_grad": [164, 683, 694], "dy": [164, 683, 694], "dx": [164, 683, 694], "technic": [164, 167, 168, 187], "autograd": [164, 187], "redund": 164, "mask": [164, 721, 732, 733], "to_q_fn": [164, 721, 732], "to_kv_fn": [164, 721, 732], "to_out_fn": [164, 167, 721, 732], "to_q_v": [164, 721, 732], "to_kv_v": [164, 721, 732], "to_out_v": [164, 721, 732], "implicitli": 164, "intuit": [164, 173, 174], "debug": [164, 173], "chronolog": 164, "had": [164, 167], "sequenti": [164, 174], "flow": [164, 186], "implic": 164, "slightli": [164, 170, 174], "eager": [164, 187], "int8": [165, 284, 305], "int16": [165, 284, 293, 296, 305, 946, 963, 966, 971, 974], "uint8": [165, 284, 293, 296, 305], "uint16": [165, 284, 306, 946, 963, 966, 971, 974], "uint32": [165, 284, 306, 946, 963, 966, 971, 974], "uint64": [165, 284, 306, 946, 963, 966, 971, 974], "bfloat16": [165, 284, 305], "float16": [165, 284, 306], "all_dtyp": 165, "all_numeric_dtyp": 165, "all_int_dtyp": 165, "all_float_dtyp": 165, "invalid": [165, 734, 797, 799, 979, 980, 983, 985, 988], "thirdli": 165, "native_float32": 165, "importantli": [165, 172, 175, 186], "varieti": [165, 166], "conveni": [165, 166, 168, 171, 173, 174], "arguabl": [165, 166], "compound": 165, "overflow": [165, 371, 385, 388, 946, 971, 974], "arr": [165, 166, 904, 905, 908], "scalar": [165, 170, 175, 187, 213, 237, 240, 609, 662, 679, 682, 734, 800, 802], "settabl": [165, 166], "jnp": [165, 166, 167, 168, 175, 990], "jaxarrai": [165, 166, 167, 168], "mx": [165, 166, 167, 990], "nd": [165, 166, 167, 170, 175, 990], "deleg": 165, "as_n": [165, 284, 299, 300, 301, 302, 321, 340, 341, 362], "idx": [166, 172, 609, 615], "tpu": [166, 321, 343, 368], "aliv": [166, 321, 355, 359, 361, 609, 643, 661, 663], "amount": [166, 321, 367, 806, 807, 810, 812, 815, 817, 820], "dual": 166, "thrown": [166, 187, 609, 653], "rare": [166, 187], "program": 167, "strictli": 167, "ration": 167, "speak": 167, "subtli": 167, "ensure_in_backend": [167, 609, 653], "x_nativ": 167, "val_n": 167, "is_ivy_arrai": [167, 172, 609], "assign": [167, 172], "elif": 167, "irrespect": [167, 172, 284, 290], "inclus": [167, 213, 214, 215, 909, 911, 912], "omit": [167, 168, 926, 927, 928, 932, 934], "unspecifi": [167, 371, 558, 561, 562, 565, 734, 749, 751, 822, 866, 869], "predominantli": [167, 186], "math": [167, 175, 990], "presenc": 167, "altern": [167, 173], "_wrap_fn": 167, "maxim": [167, 170], "inner": [167, 172, 734, 749, 751, 758, 761, 882, 883, 884, 885], "third": [167, 187, 734, 785, 787, 926, 927], "addition": [167, 168], "leverag": 167, "equival": [167, 173, 175, 213, 214, 215, 371, 426, 429, 527, 530, 531, 534, 562, 565, 734, 766, 768, 775, 777, 782, 784, 800, 802], "input_arrai": 167, "adress": 168, "revisit": [168, 175], "__div__": 168, "dicat": 168, "futher": 168, "absenc": 168, "pep": 168, "484": 168, "annot": 168, "brittl": 168, "intend": [168, 946, 971, 974], "freeli": 168, "inde": [168, 187], "flexibl": 168, "original_typ": 168, "cumbersom": 168, "sound": 169, "higher": [169, 170, 175, 187, 683, 690, 692, 695, 697, 703, 705, 707, 709, 711, 713], "overview": [169, 186], "handler": [169, 171, 175, 990], "fledg": [170, 171], "syntact": [170, 175], "clip_by_valu": [170, 175], "clamp": [170, 175], "behavior": [170, 187, 371, 558, 561, 562, 565, 926, 927, 928, 932, 934], "fit": [170, 822, 848, 851], "power_seq": 170, "okai": 170, "bound": 170, "resid": [170, 174], "edg": [170, 175, 822, 823, 826, 832, 835, 878, 881, 990], "larger": [170, 175, 284, 304, 822, 823, 826, 856, 859, 946, 967, 970, 975, 978], "ml_framework": [170, 175, 213, 214, 215], "current_framework": [170, 175], "furthermor": 170, "concaten": [170, 173, 321, 350, 609, 636, 822, 828, 831, 990], "framework_handl": 170, "face": 170, "verbos": [170, 990, 999], "cprint": [170, 998], "framework_stack": 170, "_determine_framework_from_arg": 170, "valueerror": [170, 822, 862, 865], "get_framework": 170, "neither": [170, 371, 385, 388, 541, 544], "illustr": [170, 186], "un": [170, 284, 308], "nn": [170, 175, 213, 248, 251, 990], "init_h": [170, 721, 731], "init_c": [170, 721, 731], "kernel": [170, 187, 721, 731], "recurrent_kernel": [170, 721, 731], "recurrent_bia": [170, 721, 731], "x_shape": 170, "x_flat": 170, "wi": 170, "wi_x": 170, "wii_x": 170, "wif_x": 170, "wig_x": 170, "wio_x": 170, "recurr": [170, 721, 731], "wh": 170, "ht": 170, "ct": 170, "hts_list": 170, "unrol": [170, 173, 721, 731], "wii_xt": 170, "wif_xt": 170, "wig_xt": 170, "wio_xt": 170, "zip": 170, "htm1": 170, "ctm1": 170, "wh_htm1": 170, "whi_htm1": 170, "whf_htm1": 170, "whg_htm1": 170, "who_htm1": 170, "ft": 170, "gt": 170, "ot": 170, "offici": 170, "reliabl": 170, "sacrific": 170, "hear": 170, "virtu": 170, "pure_ivi": 170, "reduce_mean": [170, 173, 174, 175, 990], "reduce_sum": [170, 990], "reduce_var": 170, "compile_graph": [170, 175], "pure_torch": 170, "cat": [170, 175], "backbon": [170, 173], "_layer": 170, "super": [170, 173, 174, 175], "clean": [170, 171, 173], "random_unifrom": 170, "unclean": 170, "wx": 170, "temp": 170, "torchscript": 170, "fn": [170, 172, 188, 189, 190, 191, 192, 193, 194, 195, 196, 284, 305, 306, 321, 330, 331, 609, 615, 680, 886, 887, 892, 893, 894, 896, 897, 898, 993, 995], "example_input": [170, 210, 211], "static_argnum": [170, 210, 211], "static_argnam": [170, 210, 211], "jit": [170, 187], "frontend": 171, "primit": [171, 187], "hierarch": [171, 173, 174], "straight": [172, 990], "arraywithlinalg": 172, "arraywithlog": 172, "arraywithmath": 172, "arraywithmeta": 172, "arraywithreduct": 172, "is_native_arrai": [172, 609], "_shape": 172, "_size": 172, "functool": 172, "mul": 172, "_dtype": 172, "_devic": 172, "_dev_str": 172, "_pre_repr": 172, "_post_repr": 172, "ndim": [172, 734, 778, 780, 785, 787], "mt": 172, "answer": [172, 187], "consol": 172, "typeerror": 172, "immut": 172, "behav": 172, "claim": 172, "truli": 172, "_native_wrapp": 172, "attributeerror": 172, "genuin": 172, "some_method": 172, "similarli": [172, 213, 248, 251], "rewritten": 172, "__pow__": 172, "strang": 172, "enforc": 172, "notic": 172, "appear": [172, 822, 836, 839], "invers": [172, 186, 371, 377, 380, 381, 384, 390, 393, 394, 397, 398, 401, 402, 405, 406, 409, 734, 755, 757, 775, 777], "_wrap_method": 172, "func_wrapp": [172, 188, 189, 190, 191, 192, 193, 194, 195, 196], "__name__": 172, "non_wrapped_method": 172, "_method_wrap": 172, "native_arg": 172, "native_kwarg": 172, "inner_fn": 172, "whist": 172, "unwrap": 172, "transit": 172, "needlessli": 172, "randn": 172, "_unwrap_method": 172, "method_wrap": 172, "compartment": 172, "public": [172, 609, 625], "newshap": 172, "new_shap": 172, "tidi": 172, "shorter": 172, "crystal": 172, "enough": [172, 173, 174], "ton": 173, "ado": [173, 174], "incred": [173, 187], "hash": 173, "soup": 173, "walk": [173, 174], "dct": 173, "cnt": 173, "combo": [173, 990, 996], "hold": [173, 609, 665, 666], "1000": [173, 371, 582, 585], "uda": 173, "3333": 173, "6667": 173, "178": 173, "new_weight": 173, "0600": 173, "3100": 173, "2400": 173, "6900": 173, "delimit": 173, "autocomplet": 173, "midwai": 173, "agent": 173, "total_spe": 173, "total_height": 173, "total_width": 173, "ag": 173, "tot": 173, "total_": 173, "total_h": 173, "batch_siz": [173, 721, 722, 723, 724, 725, 726, 727, 728, 909, 910], "dir": 173, "cnt0": 173, "cnt1": 173, "diff_0": 173, "diff_1": 173, "config0": 173, "config1": 173, "Not": [173, 174, 187, 212], "decod": 173, "l0": 173, "l1": [173, 734, 800, 802], "clearer": 173, "truncat": 173, "decoder__l0": 173, "decoder__l1": 173, "encoder__l0": 173, "encoder__l1": 173, "height": 173, "l0__b": 173, "l0__w": 173, "l1__b": 173, "l1__w": 173, "printabl": 173, "obviou": 173, "foresight": 173, "untidili": 173, "update_ag": 173, "normalize_img": 173, "img": 173, "img_max": 173, "reduce_max": [173, 990], "img_min": 173, "reduce_min": [173, 990], "img_rang": 173, "agent_posit": 173, "agent_veloc": 173, "agent_cam_front_rgb": 173, "agent_cam_front_depth": 173, "agent_cam_rear_rgb": 173, "agent_cam_rear_depth": 173, "agent_cam_lidar": 173, "cleaner": 173, "camera": 173, "front_rgb": 173, "front_depth": 173, "rear_rgb": 173, "rear_depth": 173, "lidar": 173, "rgb": 173, "rear": 173, "veloc": 173, "cam": 173, "cam_max": 173, "cam_min": 173, "cam_rang": 173, "Of": 173, "ideal": 173, "perman": 173, "afterward": 173, "thread": 173, "incorpor": 173, "pretti": 173, "straightforward": 173, "dataload": [173, 185, 990], "_cnt": 173, "img_": 173, "_dataset_s": 173, "_batch_siz": 173, "_count": [173, 174], "__next__": 173, "filenam": 173, "img_fnam": 173, "fname": 173, "loaded_img": 173, "cv2": 173, "imread": 173, "loader": [173, 187], "batch_slic": 173, "model": [173, 174, 990], "mymodel": [173, 990], "linear0": [173, 174, 990], "linear1": [173, 174, 990], "x_in": [173, 174, 175, 990], "001": [173, 174, 683, 685, 688, 904, 905, 908], "loss_fn": [173, 174, 175, 990], "0145": 173, "grad_fn": 173, "addbackward0": 173, "_create_vari": 174, "_input_channel": 174, "_output_channel": 174, "_w_shape": 174, "_b_shape": 174, "_with_bia": 174, "8979": 174, "3198": 174, "0196": 174, "3126": 174, "3717": 174, "9687": 174, "6958": 174, "5122": 174, "3902": 174, "8800": 174, "5613": 174, "1982": 174, "nightmar": 174, "overcom": 174, "fc": 174, "9563": 174, "impact": 174, "v0": 174, "v1": 174, "6440": 174, "key0": 174, "1823": 174, "8075": 174, "linear3": 174, "v2": 174, "2346": 174, "counter": 174, "fed": [174, 321, 365], "1300": 174, "decoupl": 174, "scheme": 174, "_w_init": 174, "_b_init": 174, "fan_sum": 174, "slight": 174, "misnom": 174, "saw": 174, "vanilla": [174, 882, 884], "_beta1": 174, "_beta2": 174, "_epsilon": 174, "_mw": 174, "_vw": 174, "_first_pass": 174, "_should_compil": 174, "new_v": 174, "_lr": 174, "isinst": [174, 175, 609, 677], "_inplac": 174, "_stop_gradi": 174, "pre": [175, 187, 321], "captur": 175, "sparse_funct": 175, "num_class": [175, 909, 910], "num_dim": 175, "new_axi": 175, "_linear": 175, "to_backend": 175, "jax_graph": 175, "thinli": 175, "whilst": 175, "to_haiku_modul": 175, "hk": 175, "loss_fn_t": 175, "transform": [175, 186, 721, 729, 730], "without_apply_rng": 175, "rng": 175, "prngkei": 175, "init": 175, "update_rul": 175, "01": [175, 371, 566, 569], "tree_multimap": 175, "mechan": [185, 187, 990], "vision": [185, 990], "robot": [185, 990], "focus": 186, "field": [186, 734, 749, 751, 778, 780, 785, 787, 926, 927, 928, 932], "perfect": 186, "differenti": 186, "demo": [186, 990], "orient": 186, "pose": 186, "euler": [186, 212], "quaternion": 186, "rotat": 186, "matric": [186, 213, 248, 251, 266, 270, 271, 275, 721, 730, 734, 735, 738, 743, 745, 746, 748, 749, 751, 752, 754, 755, 757, 765, 766, 768, 769, 771, 775, 777, 778, 780, 782, 784, 785, 787, 788, 790, 794, 796], "angl": [186, 371, 402, 405, 442, 445, 578, 581, 600, 604], "ivy_mech": 186, "target_facing_rotation_matrix": 186, "polar_to_cartesian_coord": 186, "ordin": [186, 734, 782, 784], "warp": 186, "optic": 186, "voxel": 186, "ivy_vis": 186, "coords_to_voxel_grid": 186, "render_pixel_coord": 186, "radianc": 186, "nerf": 186, "trajectori": 186, "motion": 186, "plan": [186, 990], "mobil": 186, "ivy_robot": 186, "sample_spline_path": 186, "rigidmobil": 186, "sample_bodi": 186, "drone": 186, "sample_link": 186, "openai": 186, "swimmer": 186, "cumul": [186, 609, 627, 628], "reward": 186, "supervis": 186, "reinforc": 186, "door": [186, 187], "intersect": 186, "cartpol": 186, "mountain_car": 186, "pendulum": 186, "reacher": 186, "polici": 186, "condit": [186, 210, 211, 886, 896, 897, 921, 925], "learnt": 186, "ture": 186, "ntm": 186, "egospher": 186, "spatial": 186, "esm": 186, "ivy_memori": 186, "egocentr": 186, "room": 186, "inspir": 186, "doubt": 187, "grate": 187, "put": 187, "probe": 187, "undergo": 187, "remark": 187, "surpris": 187, "backward": [187, 371, 562, 565, 734, 797, 799, 979, 980, 983, 985, 988], "lock": 187, "contunu": 187, "minor": 187, "xla": 187, "buffer": 187, "kind": [187, 284, 304, 307, 371, 558, 561, 946, 963, 966, 971, 974], "gold": 187, "dex": 187, "phase": 187, "lax": 187, "scan": 187, "tricki": 187, "predictor": 187, "tight": 187, "driver": 187, "schedul": 187, "dispatch": 187, "Will": 187, "ast": 187, "dynamic": 187, "cond": 187, "jacobian": 187, "checkpoint": 187, "autodiff": 187, "shine": 187, "merci": 187, "superset": 187, "cluster": 187, "compet": 187, "paradigm": 187, "parallelis": [187, 321, 330, 331], "spmd": 187, "mixtur": [187, 683, 685, 688], "expert": 187, "sophist": 187, "depart": 187, "routin": 187, "hundr": 187, "thousand": 187, "deepli": [187, 886, 888], "broadli": 187, "heavili": 187, "supplementari": 187, "Is": 187, "reusabl": 187, "fanci": 187, "fusion": 187, "lose": 187, "vmap": 187, "pmap": 187, "overhead": 187, "ineffici": 187, "eventu": 187, "supplement": 187, "backdoor": 187, "callback": 187, "record": 187, "metric": 187, "somewhat": 187, "outsourc": 187, "inputs_to_ivy_arrai": 188, "gaussian": [198, 199], "leaki": [198, 199, 200], "alpha": [198, 200], "rectifi": [198, 200, 201], "slope": [198, 200], "39": [198, 200, 371, 459, 462, 683, 685, 688, 734, 772, 774, 946, 947, 950], "85": [198, 200, 371, 430, 433], "48": [198, 200, 371, 582, 585, 683, 685, 688, 734, 772, 774, 946, 947, 950], "88": [198, 200, 371, 430, 433, 734, 772, 774, 946, 947, 950], "269": [198, 202], "731": [198, 202], "881": [198, 202], "214": [198, 202], "978": [198, 202], "891": [198, 202], "422": [198, 203], "155": [198, 203], "0768": [198, 203], "231": [198, 203], "693": [198, 203, 806, 817, 820], "49": [198, 203, 371, 582, 585, 946, 947, 950], "147": [198, 203], "363": [198, 203], "3461": [198, 204, 207], "6491": [198, 204, 207], "535": [198, 204, 207], "hyperbol": [198, 209, 371, 381, 384, 394, 397, 406, 409, 442, 445, 578, 581, 600, 604], "55": [198, 209, 721, 727, 734, 772, 774, 946, 947, 950], "501": [198, 209], "array_method": [204, 205, 217, 218, 223, 224, 231, 232, 237, 238, 248, 249, 253, 254, 261, 262, 266, 268, 271, 273, 279, 281, 293, 294, 372, 373, 377, 378, 381, 382, 385, 386, 390, 391, 394, 395, 398, 399, 402, 403, 406, 407, 410, 411, 414, 415, 418, 419, 422, 423, 426, 427, 430, 431, 434, 435, 438, 439, 442, 443, 446, 447, 451, 452, 455, 456, 459, 460, 463, 464, 467, 468, 471, 472, 475, 476, 479, 480, 483, 484, 487, 488, 491, 492, 495, 496, 499, 500, 503, 504, 507, 508, 511, 512, 515, 516, 519, 520, 523, 524, 527, 528, 531, 532, 535, 536, 541, 542, 546, 547, 550, 551, 554, 555, 558, 559, 562, 563, 566, 567, 570, 571, 574, 575, 578, 579, 582, 583, 586, 587, 590, 592, 595, 597, 600, 602, 605, 606, 610, 611, 638, 639, 685, 686, 735, 736, 740, 741, 743, 744, 746, 747, 749, 750, 752, 753, 755, 756, 758, 759, 762, 763, 766, 767, 769, 770, 772, 773, 775, 776, 778, 779, 782, 783, 785, 786, 788, 789, 791, 792, 794, 795, 797, 798, 800, 801, 803, 804, 807, 808, 812, 813, 817, 818, 823, 824, 828, 829, 832, 833, 836, 837, 840, 841, 844, 845, 848, 849, 852, 853, 856, 857, 862, 863, 866, 867, 870, 871, 874, 875, 878, 879, 905, 906, 928, 930, 936, 937, 941, 942, 947, 948, 951, 952, 955, 956, 959, 960, 963, 964, 967, 968, 971, 972, 975, 976, 980, 981, 985, 986], "container_method": [204, 206, 208, 214, 216, 217, 219, 221, 223, 225, 227, 228, 230, 231, 233, 235, 237, 239, 241, 242, 244, 245, 247, 248, 250, 252, 253, 255, 257, 258, 260, 261, 263, 265, 266, 267, 269, 271, 272, 274, 276, 277, 279, 280, 282, 293, 295, 297, 372, 374, 376, 377, 379, 381, 383, 385, 387, 389, 390, 392, 394, 396, 398, 400, 402, 404, 406, 408, 410, 412, 414, 416, 418, 420, 422, 424, 426, 428, 430, 432, 434, 436, 438, 440, 442, 444, 446, 448, 450, 451, 453, 455, 457, 459, 461, 463, 465, 467, 469, 471, 473, 475, 477, 479, 481, 483, 485, 487, 489, 491, 493, 495, 497, 499, 501, 503, 505, 507, 509, 511, 513, 515, 517, 519, 521, 523, 525, 527, 529, 531, 533, 535, 537, 541, 543, 545, 546, 548, 550, 552, 554, 556, 558, 560, 562, 564, 566, 568, 570, 572, 574, 576, 578, 580, 582, 584, 586, 588, 590, 591, 593, 595, 596, 598, 600, 601, 603, 605, 607, 610, 612, 614, 622, 623, 638, 640, 642, 685, 687, 689, 690, 691, 693, 695, 696, 698, 699, 700, 702, 703, 704, 706, 707, 708, 710, 711, 712, 714, 735, 737, 739, 758, 760, 807, 809, 811, 812, 814, 816, 817, 819, 821, 823, 825, 827, 828, 830, 832, 834, 836, 838, 840, 842, 844, 846, 848, 850, 852, 854, 856, 858, 860, 862, 864, 866, 868, 870, 872, 874, 876, 878, 880, 905, 907, 911, 913, 915, 916, 918, 928, 929, 931, 936, 938, 940, 941, 943, 945, 947, 949, 951, 953, 955, 957, 959, 961, 963, 965, 967, 969, 971, 973, 975, 977, 980, 982, 984, 985, 987, 989], "faster": [210, 211], "invoc": [210, 211], "718281828459045": 212, "newaxi": 212, "alia": 212, "pi": 212, "141592653589793": 212, "mathemat": [212, 371, 385, 388, 402, 405, 463, 466, 541, 544, 734, 800, 802], "half": [213, 214, 215, 909, 911, 912, 915, 917], "chosen": [213, 214, 215, 371, 402, 405, 921, 925], "distanc": [213, 214, 215], "adjac": [213, 214, 215], "creation_funct": [213, 214, 215, 217, 220, 222, 223, 226, 228, 229, 231, 234, 236, 237, 240, 242, 243, 258, 259, 261, 264, 266, 270, 271, 275, 276, 278, 279, 283], "interpret": [213, 217, 220, 253, 256], "uniniti": [213, 222, 223, 226], "elsewher": [213, 228, 229, 921, 925], "row": [213, 228, 229, 734, 782, 784, 785, 787, 909, 910, 921, 924], "column": [213, 228, 229, 734, 749, 751, 778, 780, 782, 784, 785, 787], "__dlpack__": [213, 231, 234, 321, 366], "interchang": [213, 231, 234, 822, 870, 873], "coordin": [213, 248, 251, 371, 402, 405], "cartesian": [213, 248, 251], "ij": [213, 248, 251, 946, 947, 950], "rank": [213, 248, 251, 609, 681, 734, 740, 742, 766, 768, 778, 780, 782, 784, 794, 796, 797, 799, 800, 802, 822, 832, 835, 836, 839, 866, 869, 878, 881, 921, 924, 979, 980, 983, 985, 988], "ni": [213, 248, 251], "xi": [213, 248, 251], "n1": [213, 248, 251], "n2": [213, 248, 251], "n3": [213, 248, 251], "accordingli": [213, 248, 251, 371, 463, 466, 734, 800, 802, 921, 923, 926, 927, 928, 932, 934, 946, 951, 954, 955, 958, 959, 962, 963, 966, 967, 970, 971, 974, 975, 978, 979, 980, 983, 985, 988], "xv": [213, 248, 251], "yv": [213, 248, 251], "triangular": [213, 266, 270, 271, 275, 734, 735, 738, 778, 780], "innermost": [213, 266, 270, 271, 275, 734, 735, 738, 743, 745, 746, 748, 749, 751, 752, 754, 755, 757, 766, 768, 769, 771, 775, 777, 778, 780, 782, 784, 785, 787, 788, 790, 794, 796], "mxn": [213, 266, 270, 271, 275, 734, 746, 748, 766, 768, 769, 771, 775, 777, 778, 780, 788, 790, 794, 796], "defaultdtyp": [284, 285], "defaultfloatdtyp": [284, 286], "float_dtyp": [284, 300, 314], "defaultintdtyp": [284, 287], "dtype_in": [284, 288, 289, 303, 308, 309, 310, 320], "incompat": [284, 292], "occur": [284, 293, 296, 921, 922, 923, 926, 927, 928, 932, 934], "data_type_funct": [284, 293, 296], "closest": [284, 298, 371, 434, 437, 467, 470, 471, 474, 566, 569, 605, 608], "floatdtyp": [284, 300], "int_dtyp": [284, 301, 315], "intdtyp": [284, 301], "followng": [284, 304], "occupi": [284, 304, 307, 609, 665, 666], "ep": [284, 304, 734, 766, 768, 775, 777], "smallest_norm": [284, 304], "precis": [284, 304, 371, 541, 544, 582, 585], "encapsul": [284, 307], "type1": [284, 311], "type2": [284, 311], "arrays_and_dtyp": [284, 312], "ret1": [284, 316], "ret2": [284, 316], "noinspect": [285, 286, 287, 322, 684], "pyshadowingnam": [285, 286, 287, 322, 684], "defaultdevic": [321, 322], "__enter__": 321, "_dev": 321, "initialis": 321, "devcloneditem": [321, 343], "multidevitem": [321, 323, 326], "devclonedit": 321, "multidevit": [321, 324, 327, 330, 331, 335], "devclonednest": 321, "multidevnest": [321, 325, 328], "devdistitem": 321, "devdistit": 321, "devdistnest": 321, "devmanag": [321, 329], "dev_mapp": 321, "da_dim_s": 321, "safety_factor": 321, "min_dev_dim_s": 321, "max_dev_dim_step_ratio": 321, "min_unit_dev_tune_step": 321, "min_sf_tune_step": 321, "starting_split_factor": 321, "max_split_factor_step_s": 321, "tune_dev_alloc": 321, "tune_dev_split": 321, "mapper": [321, 330, 331], "receivess": 321, "safe": [321, 330], "oom": 321, "tune": 321, "da_tune_step": 321, "ds_tune_step": 321, "to_clon": 321, "to_distribut": 321, "multidevic": [321, 330], "parallel": [321, 330, 331], "mutlidevic": [321, 330], "repeated_config_check": 321, "tune_step": 321, "devmapp": [321, 331], "ret_fn": [321, 330, 331], "queue_class": [321, 330, 331], "worker_class": [321, 330, 331], "worker": [321, 330, 331], "used_dev": [321, 330], "sf": [321, 330], "devmappermultiproc": 321, "multidev": [321, 332, 333, 334, 353], "profil": 321, "save_dir": [321, 336], "deviceic": [321, 342], "spread": [321, 353], "139740789224448": [321, 355], "physic": [321, 357], "x3": [321, 359], "x4": [321, 359], "process_specif": [321, 360, 370], "percentag": [321, 360], "ram": [321, 360, 367, 370], "alon": [321, 360, 370], "attr_onli": [321, 361], "chunk": [321, 363, 364, 365], "max_chunk_s": [321, 365], "chunk_siz": [321, 365], "input_ax": [321, 365], "output_ax": [321, 365], "feed": [321, 365], "fist": [321, 365], "stream": [321, 366], "caveat": [321, 366], "portabl": [321, 366, 990], "gb": [321, 367, 370], "reset": [321, 369], "magnitud": [371, 372, 375, 385, 388, 541, 544, 734, 785, 787, 788, 790], "princip": [371, 377, 380, 390, 393, 398, 401], "cosin": [371, 377, 380, 381, 384, 438, 441, 442, 445], "x1_i": [371, 385, 388, 402, 405, 410, 413, 418, 421, 422, 425, 426, 429, 430, 433, 446, 449, 451, 454, 471, 474, 475, 478, 479, 482, 495, 498, 499, 502, 519, 522, 523, 526, 531, 534, 535, 538, 541, 544, 550, 553, 558, 561, 562, 565, 590, 594], "x2_i": [371, 385, 388, 402, 405, 410, 413, 418, 421, 422, 425, 426, 429, 430, 433, 446, 449, 451, 454, 471, 474, 475, 478, 479, 482, 495, 498, 499, 502, 519, 522, 523, 526, 531, 534, 535, 538, 541, 544, 550, 553, 558, 561, 562, 565, 590, 594], "finit": [371, 385, 388, 402, 405, 483, 486, 541, 544, 558, 561, 562, 565], "nor": [371, 385, 388, 541, 544], "nearest": [371, 385, 388, 541, 544, 566, 569], "2019": [371, 385, 388, 463, 466, 541, 544], "commut": [371, 385, 388], "sine": [371, 390, 393, 394, 397, 574, 577, 578, 581], "57": [371, 390, 393, 430, 433, 442, 445], "524": [371, 390, 393], "644": [371, 390, 393], "201": [371, 390, 393, 566, 569], "305": [371, 390, 393], "412": [371, 390, 393], "quotient": [371, 402, 405], "notat": [371, 402, 405, 946, 947, 950], "denot": [371, 402, 405], "quadrant": [371, 402, 405], "3\u03c0": [371, 402, 405], "549": [371, 406, 409], "bitwis": [371, 410, 413, 422, 425, 430, 433, 535, 538], "AND": [371, 410, 413, 523, 526, 979, 980, 983], "binari": [371, 410, 413, 422, 425, 430, 433, 535, 538, 806, 807, 810], "invert": [371, 414, 417], "arithmet": [371, 426, 429, 946, 955, 958], "propag": [371, 426, 429, 946, 951, 954, 955, 958, 959, 962, 967, 970, 971, 974, 975, 978], "thu": [371, 426, 429, 558, 561, 562, 565, 734, 749, 751], "lh": [371, 426, 429], "rh": [371, 426, 429], "xor": [371, 430, 433, 535, 538], "78": [371, 430, 433, 734, 772, 774, 946, 947, 950], "91": [371, 430, 433, 734, 772, 774, 946, 947, 950], "23": [371, 430, 433, 721, 727, 734, 746, 748, 921, 925], "66": [371, 430, 433, 734, 772, 774, 946, 947, 950], "77": [371, 430, 433, 734, 772, 774, 946, 947, 950], "79": [371, 430, 433], "89": [371, 430, 433, 734, 791, 793, 946, 971, 974], "98": [371, 430, 433, 734, 772, 774, 921, 925, 946, 947, 950], "26": [371, 430, 433, 683, 685, 688, 721, 728, 734, 746, 748, 772, 774, 791, 793, 946, 947, 950], "21": [371, 430, 433, 609, 627, 734, 746, 748, 772, 774, 806, 817, 820, 946, 947, 950], "34": [371, 430, 433, 582, 585], "24": [371, 430, 433, 582, 585, 609, 627, 683, 685, 688, 734, 746, 748, 772, 774, 946, 947, 950], "51": [371, 430, 433], "27": [371, 430, 433, 442, 445, 582, 585, 721, 733, 734, 772, 774, 946, 947, 950], "74": [371, 430, 433], "59": [371, 430, 433], "416": [371, 438, 441], "122": [371, 442, 445], "368": [371, 442, 445], "670": [371, 442, 445], "202": [371, 442, 445, 566, 569], "548": [371, 442, 445], "1490": [371, 442, 445], "dividend": [371, 446, 449, 562, 565], "gauss": [371, 455, 458], "exponenti": [371, 455, 458, 459, 462, 519, 522, 558, 561], "logarithm": [371, 459, 462, 503, 506, 507, 510, 511, 514, 515, 518, 519, 522, 734, 781], "72": [371, 459, 462, 683, 685, 688, 734, 772, 774, 946, 947, 950], "fdlibm": [371, 463, 466], "compliant": [371, 463, 466, 527, 530, 531, 534, 946, 951, 954, 955, 958, 959, 962], "greatest": [371, 467, 470, 471, 474], "out_i": [371, 483, 486, 487, 490, 491, 494], "threshold": [371, 539, 540], "exce": [371, 540], "y_i": [371, 546, 549], "expon": [371, 558, 561, 609, 674], "versu": [371, 558, 561], "odd": [371, 558, 561], "modulu": [371, 562, 565], "primarili": [371, 562, 565], "5654": [371, 566, 569], "034": [371, 566, 569], "433": [371, 566, 569], "343": [371, 566, 569], "44": [371, 566, 569, 582, 585, 586, 589, 734, 772, 774, 921, 925, 946, 947, 950], "81": [371, 566, 569, 586, 589, 946, 947, 950], "527": [371, 566, 569], "301": [371, 566, 569], "indistinguish": [371, 582, 585], "infinit": [371, 582, 585], "83": [371, 582, 585], "32455532": [371, 582, 585], "89897949": [371, 582, 585], "50": [371, 582, 585, 734, 772, 774, 921, 924, 946, 947, 950], "31": [371, 582, 585], "169": [371, 582, 585], "47": [371, 582, 585], "93": [371, 582, 585], "35": [371, 582, 585, 721, 733, 734, 740, 742, 921, 925, 946, 947, 950], "09": [371, 586, 589, 721, 733], "61": [371, 586, 589, 806, 807, 810], "546": [371, 595, 599], "842": [371, 595, 599], "916": [371, 595, 599, 806, 807, 810], "996": [371, 595, 599], "328": [371, 595, 599], "real": [371, 600, 604], "462": [371, 600, 604], "604": [371, 600, 604], "984": [371, 600, 604], "997": [371, 600, 604, 904, 905, 908], "decim": [371, 605, 608], "inspect": [609, 615, 994, 995], "downscal": [609, 621, 622, 624], "60": [609, 627, 734, 772, 774, 946, 947, 950], "default_v": [609, 630], "catch_except": [609, 630], "rev": [609, 630], "with_cal": [609, 630], "arrang": [609, 631], "123": [609, 634], "mod": [609, 635], "max_freq": [609, 636], "num_band": [609, 636], "fourier": [609, 636], "band": [609, 636], "linearli": [609, 636, 734, 782, 784], "oppos": [609, 636], "geometr": [609, 636], "seen_set": [609, 647], "local_set": [609, 647], "decrement": [609, 651], "is_arrai": 609, "allow_dupl": [609, 659], "forkserv": [609, 660], "spawn": [609, 660], "hot": [609, 662], "scatter": [609, 662, 665, 666], "tmp_dr": [609, 670], "temporari": [609, 670], "min_denomin": [609, 673], "stabil": [609, 673, 674, 935, 936, 939, 941, 944], "_min_denomin": [609, 673], "min_bas": [609, 674], "100000023841858": [609, 677], "200000047683716": [609, 677], "299999952316284": [609, 677], "400000095367432": [609, 677], "599999904632568": [609, 677], "101": [609, 678], "unpack": [609, 681], "gradienttrack": [683, 684], "delta": [683, 685, 688], "cost": [683, 685, 688, 690, 692, 695, 697, 703, 705, 707, 709, 711, 713, 882, 883, 884, 885], "ws": [683, 685, 688, 690, 692, 695, 697, 703, 705, 707, 709, 711, 713], "en": [683, 685, 688, 690, 692], "wikipedia": [683, 685, 688, 690, 692], "wiki": [683, 685, 688, 690, 692], "stochastic_gradient_desc": [683, 685, 688, 690, 692], "dc": [683, 685, 688, 690, 692, 695, 697, 703, 705, 707, 709, 711, 713], "dw": [683, 685, 688, 690, 692, 695, 697, 703, 705, 707, 709, 711, 713], "averag": [683, 685, 688, 690, 692, 703, 705, 882, 883, 884], "004": [683, 685, 688], "009": [683, 685, 688], "86": [683, 685, 688], "28": [683, 685, 688, 721, 724, 727, 728, 734, 772, 774, 946, 947, 950], "45": [683, 685, 688, 734, 772, 774, 822, 861, 904, 905, 908, 946, 947, 950], "0125": [683, 685, 688], "601": [683, 685, 688], "581": [683, 685, 688], "025": [683, 685, 688], "992": [683, 685, 688], "209": [683, 685, 688, 926, 927], "271": [683, 685, 688], "0717": [683, 685, 688], "142": [683, 685, 688], "182": [683, 685, 688], "624": [683, 685, 688, 909, 915, 917], "06": [683, 685, 688], "02": [683, 685, 688], "744": [683, 685, 688], "626": [683, 685, 688], "65": [683, 685, 688, 734, 772, 774, 946, 947, 950], "024": [683, 685, 688], "096": [683, 685, 688], "216": [683, 685, 688], "384": [683, 685, 688], "ws_new": [683, 690, 692, 695, 697, 703, 705, 707, 709, 711, 713], "retain": [683, 694], "d_in": [721, 722, 723, 724, 725, 726, 727], "fw": [721, 722, 723, 724, 725, 726, 727, 728], "d_out": [721, 722, 723, 724, 725, 726, 727], "wio": [721, 722], "fh": [721, 724, 725, 726, 727, 728], "hwio": [721, 724], "unequ": [721, 724], "unsqueez": [721, 724, 728], "volum": [721, 726], "fd": [721, 726, 727], "dhwio": [721, 726], "256": [721, 727], "258": [721, 727], "128": [721, 727, 734, 772, 774], "333": [721, 728], "inp": [721, 728], "bernoulli": [721, 729], "out_featur": [721, 729, 730], "incom": [721, 730], "outer_batch_shap": [721, 730], "inner_batch_shap": [721, 730], "in_featur": [721, 730], "num_queri": [721, 732, 733], "x_feat_dim": [721, 732], "num_kei": [721, 732, 733], "cont_feat_dim": [721, 732], "numhead": [721, 732], "feat_dim": [721, 732, 733], "out_feat_dim": [721, 732], "score": [721, 733], "04": [721, 733], "03": [721, 733, 904, 905, 908], "08": [721, 733], "decomposit": [734, 735, 738, 778, 780, 785, 787], "symmetr": [734, 735, 738, 749, 751, 752, 754, 803, 805], "u": [734, 735, 738, 785, 787], "vif": [734, 740, 742], "92": [734, 743, 745], "293": [734, 743, 745], "46997": [734, 743, 745], "eigendecomposit": [734, 749, 751], "qlq\u1d40": [734, 749, 751], "orthogon": [734, 749, 751], "eig": [734, 749, 751], "eigenvalu": [734, 749, 751, 752, 754], "eigenvector": [734, 749, 751], "75": [734, 755, 757, 772, 774], "prepend": [734, 758, 761], "singular": [734, 766, 768, 775, 777, 785, 787, 788, 790], "toler": [734, 766, 768, 775, 777], "largest_singular_valu": [734, 766, 768, 775, 777], "array_lik": [734, 772, 774], "33": [734, 772, 774, 904, 905, 908, 946, 947, 950], "36": [734, 772, 774, 946, 947, 950], "84": [734, 772, 774, 946, 947, 950], "105": [734, 772, 774, 806, 807, 810], "112": [734, 772, 774, 946, 947, 950], "104": [734, 772, 774, 946, 947, 950], "120": [734, 772, 774], "moor": [734, 775, 777], "penros": [734, 775, 777], "pseudo": [734, 775, 777], "orthonorm": [734, 778, 780, 785, 787], "logdet": [734, 781], "coeffici": [734, 782, 784], "usvh": [734, 785, 787], "vh": [734, 785, 787], "hermitian": [734, 785, 787], "et": [734, 785, 787], "cetera": [734, 785, 787], "adjoint": [734, 785, 787], "reconstruct": [734, 785, 787, 926, 927, 933], "reconstructed_x": [734, 785, 787], "contract": [734, 791, 793, 946, 947, 950], "doubl": [734, 791, 793], "singleton": [734, 800, 802, 822, 862, 865, 921, 923, 946, 951, 954, 955, 958, 959, 962, 963, 966, 967, 970, 971, 974, 975, 978, 979, 980, 983, 985, 988], "liter": [734, 800, 802], "manhattan": [734, 800, 802], "l2": [734, 800, 802], "euclidean": [734, 800, 802], "mathbf": [734, 803, 805], "mathbb": [734, 803, 805], "skew": [734, 803, 805], "entropi": [806, 807, 810, 812, 815, 817, 820], "predict": [806, 807, 810, 812, 815, 817, 820], "smooth": [806, 807, 810, 812, 815, 817, 820], "223": [806, 807, 810], "357": [806, 807, 810, 817, 820], "511": [806, 807, 810], "discret": [806, 812, 815], "3862944": [806, 812, 815], "35667497": [806, 812, 815], "spars": [806, 817, 820], "logit": [806, 817, 820], "793291": [806, 817, 820], "512926": [806, 817, 820], "before_1": [822, 832, 835, 878, 881], "after_1": [822, 832, 835, 878, 881], "before_n": [822, 832, 835, 878, 881], "after_n": [822, 832, 835, 878, 881], "manipulation_funct": [822, 836, 839], "reorder": [822, 840, 843], "permut": [822, 844, 847, 870, 873], "repetit": [822, 848, 851, 874, 877], "restor": [822, 856, 859], "famili": [822, 866, 869], "intxx": [822, 866, 869], "floatxx": [822, 866, 869], "fomaml_step": 882, "inner_cost_fn": [882, 883, 884], "outer_cost_fn": [882, 883, 884], "inner_grad_step": [882, 883, 884, 885], "inner_learning_r": [882, 883, 884, 885], "inner_optimization_step": [882, 883, 884, 885], "inner_batch_fn": [882, 883, 884], "outer_batch_fn": [882, 883, 884], "average_across_step": [882, 883, 884], "inner_v": [882, 883, 884], "keep_inner_v": [882, 883, 884], "outer_v": [882, 883, 884], "keep_outer_v": [882, 883, 884], "return_inner_v": [882, 883, 884, 885], "num_task": [882, 883, 884, 885], "maml": [882, 883, 884], "recev": [882, 883, 884], "0x7fda87404430": [882, 883, 884, 885], "maml_step": 882, "rece": [882, 884], "reptile_step": 882, "cost_fn": [882, 885], "reptil": [882, 885], "receivng": [882, 885], "all_nested_indic": 886, "include_nest": [886, 887], "_index": [886, 887, 897], "_base": [886, 887, 896, 897], "copy_nest": 886, "to_mut": [886, 888, 898], "mutabl": [886, 888, 898], "insert_into_nest_at_index": 886, "insert_into_nest_at_indic": 886, "map_nest_at_index": 886, "map_nest_at_indic": 886, "multi_index_nest": 886, "nested_ani": 886, "check_nest": [886, 896, 897], "conditon": [886, 896, 897], "nested_indices_wher": 886, "stop_after_n_found": [886, 897], "_depth": [886, 898], "_tuple_check_fn": [886, 898], "_list_check_fn": [886, 898], "_dict_check_fn": [886, 898], "nested_multi_map": 886, "nest0": [886, 899], "ivy_arrai": [886, 899], "funciton": [886, 899], "prune_nest_at_index": 886, "prune_nest_at_indic": 886, "set_nest_at_index": 886, "set_nest_at_indic": 886, "gamma": [904, 905, 908], "beta": [904, 905, 908], "0976": [904, 905, 908], "3452": [904, 905, 908], "2740": [904, 905, 908], "1047": [904, 905, 908], "5886": [904, 905, 908], "2732": [904, 905, 908], "7696": [904, 905, 908], "7024": [904, 905, 908], "2518": [904, 905, 908], "58": [904, 905, 908, 926, 927], "283": [904, 905, 908], "585": [904, 905, 908], "909": [904, 905, 908], "628": [904, 905, 908], "225": [904, 905, 908], "425": [904, 905, 908], "norm_idx": [904, 905, 908], "228": [904, 905, 908], "0285": [904, 905, 908], "199": [904, 905, 908], "204": [904, 905, 908], "population_s": [909, 910], "num_sampl": [909, 910], "draw": [909, 910, 914, 915, 917], "unnorm": [909, 910], "drawn": [909, 910, 911, 912, 914, 915, 917], "home": [909, 910, 914], "uniformli": [909, 911, 912, 915, 917], "highest": [909, 911, 912], "parameter": [909, 914, 915, 917], "6444774682897879": [909, 914], "811": [909, 914], "508": [909, 914], "564": [909, 914], "7268672": [909, 914], "968": [909, 914], "175": [909, 914, 926, 927], "064": [909, 914], "40935726": [909, 914], "556": [909, 914], "26431865": [909, 915, 917], "475": [909, 915, 917], "878": [909, 915, 917], "861": [909, 915, 917], "89150229": [909, 915, 917], "89629126": [909, 915, 917], "94198485": [909, 915, 917], "91405606": [909, 915, 917], "72848724": [909, 915, 917], "7550739": [909, 915, 917], "00109": [909, 915, 917], "occurr": [921, 922, 923, 926, 927], "yield": [921, 925], "43": [921, 925], "x_j": [926, 927, 928, 932, 934], "impli": [926, 927, 928, 932, 934], "inverse_indic": [926, 927, 933], "aggreg": [926, 927], "fourth": [926, 927], "607": [926, 927], "735": [926, 927], "667": [926, 927], "381": [926, 927], "857": [926, 927], "0396": [926, 927], "166": [926, 927], "828": [926, 927], "144": [926, 927], "40501155": [926, 927], "77361575": [926, 927], "97776199": [926, 927], "36831157": [926, 927], "89148434": [926, 927], "9512272": [926, 927], "67542176": [926, 927], "41985657": [926, 927], "23478023": [926, 927], "1141": [926, 927], "8101": [926, 927], "9298": [926, 927], "8460": [926, 927], "2119": [926, 927], "3519": [926, 927], "6252": [926, 927], "4033": [926, 927], "7443": [926, 927], "2577": [926, 927], "3707": [926, 927], "0545": [926, 927], "3238": [926, 927], "5944": [926, 927], "0775": [926, 927], "4327": [926, 927], "176": [926, 927], "889": [926, 927], "763": [926, 927], "071": [926, 927], "262": [926, 927], "456": [926, 927], "114": [926, 927], "349": [926, 927], "615": [926, 927], "594": [926, 927], "335": [926, 927], "212": [926, 927], "457": [926, 927], "827": [926, 927], "set_funct": [926, 928, 932], "ascend": [935, 936, 939], "einstein": [946, 947, 950], "summat": [946, 947, 950], "seq": [946, 947, 950], "jk": [946, 947, 950], "ik": [946, 947, 950], "126": [946, 947, 950], "510": [946, 947, 950], "99": [946, 947, 950], "108": [946, 947, 950], "117": [946, 947, 950], "sentinel": [946, 951, 954, 959, 962], "unsign": [946, 963, 966, 971, 974], "degre": [946, 967, 970, 975, 978], "bessel": [946, 967, 970, 975, 978], "8164966": [946, 967, 970], "varianc": [946, 975, 978], "unbias": [946, 975, 978], "simplicit": [979, 980, 983], "autom": 990, "grow": 990, "ai": 990, "got": 990, "colab": 990, "sharp": 990, "weekli": 990, "event": 990, "immedi": 990, "favorit": 990, "jax_concat": 990, "tf_concat": 990, "np_concat": 990, "mx_concat": 990, "torch_concat": 990, "prompt": 990, "get_devic": 990, "reduce_prod": 990, "gradient_imag": 990, "linalg": 990, "bilinear_resampl": 990, "stack_imag": 990, "neural_net": 990, "ecosystem": [990, 996], "popular": [990, 996], "acceler": 990, "articl": 990, "lenton2021ivi": 990, "inter": 990, "lenton": 990, "daniel": 990, "pardo": 990, "fabio": 990, "falck": 990, "fabian": 990, "jame": 990, "stephen": 990, "clark": 990, "ronald": 990, "journal": 990, "arxiv": 990, "preprint": 990, "2102": 990, "02886": 990, "2021": 990, "add_array_spec": 993, "fn_array_spec": 993}, "objects": {"ivy": [[18, 0, 0, "-", "Array"], [64, 0, 0, "-", "Container"], [0, 0, 0, "-", "backend_handler"], [188, 0, 0, "-", "func_wrapper"], [993, 0, 0, "-", "inspection"], [110, 0, 0, "-", "stateful"], [998, 0, 0, "-", "verbosity"]], "ivy.Array": [[18, 1, 1, "", "__delattr__"], [18, 1, 1, "", "__format__"], [18, 1, 1, "", "__getattribute__"], [18, 1, 1, "", "__init_subclass__"], [18, 1, 1, "", "__new__"], [18, 1, 1, "", "__reduce__"], [18, 1, 1, "", "__reduce_ex__"], [18, 1, 1, "", "__setattr__"], [18, 1, 1, "", "__sizeof__"], [18, 1, 1, "", "__str__"], [18, 1, 1, "", "__subclasshook__"]], "ivy.Container": [[64, 1, 1, "", "__delattr__"], [64, 1, 1, "", "__delitem__"], [64, 1, 1, "", "__format__"], [64, 1, 1, "", "__getattribute__"], [64, 1, 1, "", "__init_subclass__"], [64, 1, 1, "", "__iter__"], [64, 1, 1, "", "__len__"], [64, 1, 1, "", "__new__"], [64, 1, 1, "", "__reduce__"], [64, 1, 1, "", "__reduce_ex__"], [64, 1, 1, "", "__reversed__"], [64, 1, 1, "", "__sizeof__"], [64, 1, 1, "", "__str__"], [64, 1, 1, "", "__subclasshook__"], [64, 1, 1, "", "clear"], [64, 1, 1, "", "fromkeys"], [64, 1, 1, "", "get"], [64, 1, 1, "", "items"], [64, 1, 1, "", "keys"], [64, 1, 1, "", "pop"], [64, 1, 1, "", "popitem"], [64, 1, 1, "", "setdefault"], [64, 1, 1, "", "update"], [64, 1, 1, "", "values"]], "ivy.array": [[19, 0, 0, "-", "activations"], [21, 0, 0, "-", "conversions"], [26, 0, 0, "-", "creation"], [28, 0, 0, "-", "data_type"], [30, 0, 0, "-", "device"], [32, 0, 0, "-", "elementwise"], [34, 0, 0, "-", "general"], [36, 0, 0, "-", "gradients"], [38, 0, 0, "-", "image"], [40, 0, 0, "-", "layers"], [42, 0, 0, "-", "linear_algebra"], [44, 0, 0, "-", "losses"], [46, 0, 0, "-", "manipulation"], [48, 0, 0, "-", "norms"], [50, 0, 0, "-", "random"], [52, 0, 0, "-", "searching"], [54, 0, 0, "-", "set"], [56, 0, 0, "-", "sorting"], [58, 0, 0, "-", "statistical"], [60, 0, 0, "-", "utility"], [62, 0, 0, "-", "wrapping"]], "ivy.array.activations": [[20, 2, 1, "", "ArrayWithActivations"]], "ivy.array.activations.ArrayWithActivations": [[20, 3, 1, "", "softplus"]], "ivy.array.array_methods": [[373, 1, 1, "", "abs"], [378, 1, 1, "", "acos"], [382, 1, 1, "", "acosh"], [686, 1, 1, "", "adam_step"], [386, 1, 1, "", "add"], [981, 1, 1, "", "all"], [611, 1, 1, "", "all_equal"], [986, 1, 1, "", "any"], [937, 1, 1, "", "argsort"], [218, 1, 1, "", "asarray"], [391, 1, 1, "", "asin"], [395, 1, 1, "", "asinh"], [399, 1, 1, "", "atan"], [403, 1, 1, "", "atan2"], [407, 1, 1, "", "atanh"], [808, 1, 1, "", "binary_cross_entropy"], [411, 1, 1, "", "bitwise_and"], [415, 1, 1, "", "bitwise_invert"], [419, 1, 1, "", "bitwise_left_shift"], [423, 1, 1, "", "bitwise_or"], [427, 1, 1, "", "bitwise_right_shift"], [431, 1, 1, "", "bitwise_xor"], [294, 1, 1, "", "can_cast"], [435, 1, 1, "", "ceil"], [736, 1, 1, "", "cholesky"], [824, 1, 1, "", "clip"], [829, 1, 1, "", "concat"], [833, 1, 1, "", "constant_pad"], [439, 1, 1, "", "cos"], [443, 1, 1, "", "cosh"], [741, 1, 1, "", "cross"], [813, 1, 1, "", "cross_entropy"], [744, 1, 1, "", "det"], [747, 1, 1, "", "diagonal"], [447, 1, 1, "", "divide"], [750, 1, 1, "", "eigh"], [753, 1, 1, "", "eigvalsh"], [948, 1, 1, "", "einsum"], [224, 1, 1, "", "empty_like"], [452, 1, 1, "", "equal"], [456, 1, 1, "", "erf"], [460, 1, 1, "", "exp"], [837, 1, 1, "", "expand_dims"], [464, 1, 1, "", "expm1"], [841, 1, 1, "", "flip"], [468, 1, 1, "", "floor"], [472, 1, 1, "", "floor_divide"], [232, 1, 1, "", "from_dlpack"], [238, 1, 1, "", "full_like"], [639, 1, 1, "", "gather_nd"], [476, 1, 1, "", "greater"], [480, 1, 1, "", "greater_equal"], [756, 1, 1, "", "inv"], [484, 1, 1, "", "isfinite"], [488, 1, 1, "", "isinf"], [492, 1, 1, "", "isnan"], [906, 1, 1, "", "layer_norm"], [496, 1, 1, "", "less"], [500, 1, 1, "", "less_equal"], [504, 1, 1, "", "log"], [508, 1, 1, "", "log10"], [512, 1, 1, "", "log1p"], [516, 1, 1, "", "log2"], [520, 1, 1, "", "logaddexp"], [524, 1, 1, "", "logical_and"], [528, 1, 1, "", "logical_not"], [532, 1, 1, "", "logical_or"], [536, 1, 1, "", "logical_xor"], [759, 1, 1, "", "matmul"], [763, 1, 1, "", "matrix_norm"], [767, 1, 1, "", "matrix_rank"], [770, 1, 1, "", "matrix_transpose"], [952, 1, 1, "", "max"], [956, 1, 1, "", "mean"], [249, 1, 1, "", "meshgrid"], [960, 1, 1, "", "min"], [542, 1, 1, "", "multiply"], [254, 1, 1, "", "native_array"], [547, 1, 1, "", "negative"], [551, 1, 1, "", "not_equal"], [262, 1, 1, "", "ones_like"], [773, 1, 1, "", "outer"], [845, 1, 1, "", "permute_dims"], [776, 1, 1, "", "pinv"], [555, 1, 1, "", "positive"], [559, 1, 1, "", "pow"], [964, 1, 1, "", "prod"], [779, 1, 1, "", "qr"], [563, 1, 1, "", "remainder"], [849, 1, 1, "", "repeat"], [853, 1, 1, "", "reshape"], [857, 1, 1, "", "roll"], [567, 1, 1, "", "round"], [571, 1, 1, "", "sign"], [575, 1, 1, "", "sin"], [579, 1, 1, "", "sinh"], [205, 1, 1, "", "softplus"], [783, 1, 1, "", "solve"], [942, 1, 1, "", "sort"], [818, 1, 1, "", "sparse_cross_entropy"], [583, 1, 1, "", "sqrt"], [587, 1, 1, "", "square"], [863, 1, 1, "", "squeeze"], [867, 1, 1, "", "stack"], [968, 1, 1, "", "std"], [592, 1, 1, "", "subtract"], [972, 1, 1, "", "sum"], [786, 1, 1, "", "svd"], [789, 1, 1, "", "svdvals"], [871, 1, 1, "", "swapaxes"], [597, 1, 1, "", "tan"], [602, 1, 1, "", "tanh"], [792, 1, 1, "", "tensordot"], [875, 1, 1, "", "tile"], [795, 1, 1, "", "trace"], [268, 1, 1, "", "tril"], [273, 1, 1, "", "triu"], [606, 1, 1, "", "trunc"], [930, 1, 1, "", "unique_counts"], [976, 1, 1, "", "var"], [798, 1, 1, "", "vecdot"], [801, 1, 1, "", "vector_norm"], [804, 1, 1, "", "vector_to_skew_symmetric_matrix"], [879, 1, 1, "", "zero_pad"], [281, 1, 1, "", "zeros_like"]], "ivy.array.conversions": [[22, 1, 1, "", "args_to_ivy"], [23, 1, 1, "", "args_to_native"], [24, 1, 1, "", "to_ivy"], [25, 1, 1, "", "to_native"]], "ivy.array.creation": [[27, 2, 1, "", "ArrayWithCreation"]], "ivy.array.creation.ArrayWithCreation": [[27, 3, 1, "", "asarray"], [27, 3, 1, "", "empty_like"], [27, 3, 1, "", "from_dlpack"], [27, 3, 1, "", "full_like"], [27, 3, 1, "", "meshgrid"], [27, 3, 1, "", "native_array"], [27, 3, 1, "", "ones_like"], [27, 3, 1, "", "tril"], [27, 3, 1, "", "triu"], [27, 3, 1, "", "zeros_like"]], "ivy.array.data_type": [[29, 2, 1, "", "ArrayWithDataTypes"]], "ivy.array.data_type.ArrayWithDataTypes": [[29, 3, 1, "", "can_cast"]], "ivy.array.device": [[31, 2, 1, "", "ArrayWithDevice"]], "ivy.array.elementwise": [[33, 2, 1, "", "ArrayWithElementwise"]], "ivy.array.elementwise.ArrayWithElementwise": [[33, 3, 1, "", "abs"], [33, 3, 1, "", "acos"], [33, 3, 1, "", "acosh"], [33, 3, 1, "", "add"], [33, 3, 1, "", "asin"], [33, 3, 1, "", "asinh"], [33, 3, 1, "", "atan"], [33, 3, 1, "", "atan2"], [33, 3, 1, "", "atanh"], [33, 3, 1, "", "bitwise_and"], [33, 3, 1, "", "bitwise_invert"], [33, 3, 1, "", "bitwise_left_shift"], [33, 3, 1, "", "bitwise_or"], [33, 3, 1, "", "bitwise_right_shift"], [33, 3, 1, "", "bitwise_xor"], [33, 3, 1, "", "ceil"], [33, 3, 1, "", "cos"], [33, 3, 1, "", "cosh"], [33, 3, 1, "", "divide"], [33, 3, 1, "", "equal"], [33, 3, 1, "", "erf"], [33, 3, 1, "", "exp"], [33, 3, 1, "", "expm1"], [33, 3, 1, "", "floor"], [33, 3, 1, "", "floor_divide"], [33, 3, 1, "", "greater"], [33, 3, 1, "", "greater_equal"], [33, 3, 1, "", "isfinite"], [33, 3, 1, "", "isinf"], [33, 3, 1, "", "isnan"], [33, 3, 1, "", "less"], [33, 3, 1, "", "less_equal"], [33, 3, 1, "", "log"], [33, 3, 1, "", "log10"], [33, 3, 1, "", "log1p"], [33, 3, 1, "", "log2"], [33, 3, 1, "", "logaddexp"], [33, 3, 1, "", "logical_and"], [33, 3, 1, "", "logical_not"], [33, 3, 1, "", "logical_or"], [33, 3, 1, "", "logical_xor"], [33, 3, 1, "", "multiply"], [33, 3, 1, "", "negative"], [33, 3, 1, "", "not_equal"], [33, 3, 1, "", "positive"], [33, 3, 1, "", "pow"], [33, 3, 1, "", "remainder"], [33, 3, 1, "", "round"], [33, 3, 1, "", "sign"], [33, 3, 1, "", "sin"], [33, 3, 1, "", "sinh"], [33, 3, 1, "", "sqrt"], [33, 3, 1, "", "square"], [33, 3, 1, "", "subtract"], [33, 3, 1, "", "tan"], [33, 3, 1, "", "tanh"], [33, 3, 1, "", "trunc"]], "ivy.array.general": [[35, 2, 1, "", "ArrayWithGeneral"]], "ivy.array.general.ArrayWithGeneral": [[35, 3, 1, "", "all_equal"], [35, 3, 1, "", "gather_nd"]], "ivy.array.gradients": [[37, 2, 1, "", "ArrayWithGradients"]], "ivy.array.gradients.ArrayWithGradients": [[37, 3, 1, "", "adam_step"]], "ivy.array.image": [[39, 2, 1, "", "ArrayWithImage"]], "ivy.array.layers": [[41, 2, 1, "", "ArrayWithLayers"]], "ivy.array.linear_algebra": [[43, 2, 1, "", "ArrayWithLinearAlgebra"]], "ivy.array.linear_algebra.ArrayWithLinearAlgebra": [[43, 3, 1, "", "cholesky"], [43, 3, 1, "", "cross"], [43, 3, 1, "", "det"], [43, 3, 1, "", "diagonal"], [43, 3, 1, "", "eigh"], [43, 3, 1, "", "eigvalsh"], [43, 3, 1, "", "inv"], [43, 3, 1, "", "matmul"], [43, 3, 1, "", "matrix_norm"], [43, 3, 1, "", "matrix_rank"], [43, 3, 1, "", "matrix_transpose"], [43, 3, 1, "", "outer"], [43, 3, 1, "", "pinv"], [43, 3, 1, "", "qr"], [43, 3, 1, "", "solve"], [43, 3, 1, "", "svd"], [43, 3, 1, "", "svdvals"], [43, 3, 1, "", "tensordot"], [43, 3, 1, "", "trace"], [43, 3, 1, "", "vecdot"], [43, 3, 1, "", "vector_norm"], [43, 3, 1, "", "vector_to_skew_symmetric_matrix"]], "ivy.array.losses": [[45, 2, 1, "", "ArrayWithLosses"]], "ivy.array.losses.ArrayWithLosses": [[45, 3, 1, "", "binary_cross_entropy"], [45, 3, 1, "", "cross_entropy"], [45, 3, 1, "", "sparse_cross_entropy"]], "ivy.array.manipulation": [[47, 2, 1, "", "ArrayWithManipulation"]], "ivy.array.manipulation.ArrayWithManipulation": [[47, 3, 1, "", "clip"], [47, 3, 1, "", "concat"], [47, 3, 1, "", "constant_pad"], [47, 3, 1, "", "expand_dims"], [47, 3, 1, "", "flip"], [47, 3, 1, "", "permute_dims"], [47, 3, 1, "", "repeat"], [47, 3, 1, "", "reshape"], [47, 3, 1, "", "roll"], [47, 3, 1, "", "squeeze"], [47, 3, 1, "", "stack"], [47, 3, 1, "", "swapaxes"], [47, 3, 1, "", "tile"], [47, 3, 1, "", "zero_pad"]], "ivy.array.norms": [[49, 2, 1, "", "ArrayWithNorms"]], "ivy.array.norms.ArrayWithNorms": [[49, 3, 1, "", "layer_norm"]], "ivy.array.random": [[51, 2, 1, "", "ArrayWithRandom"]], "ivy.array.searching": [[53, 2, 1, "", "ArrayWithSearching"]], "ivy.array.set": [[55, 2, 1, "", "ArrayWithSet"]], "ivy.array.set.ArrayWithSet": [[55, 3, 1, "", "unique_counts"]], "ivy.array.sorting": [[57, 2, 1, "", "ArrayWithSorting"]], "ivy.array.sorting.ArrayWithSorting": [[57, 3, 1, "", "argsort"], [57, 3, 1, "", "sort"]], "ivy.array.statistical": [[59, 2, 1, "", "ArrayWithStatistical"]], "ivy.array.statistical.ArrayWithStatistical": [[59, 3, 1, "", "einsum"], [59, 3, 1, "", "max"], [59, 3, 1, "", "mean"], [59, 3, 1, "", "min"], [59, 3, 1, "", "prod"], [59, 3, 1, "", "std"], [59, 3, 1, "", "sum"], [59, 3, 1, "", "var"]], "ivy.array.utility": [[61, 2, 1, "", "ArrayWithUtility"]], "ivy.array.utility.ArrayWithUtility": [[61, 3, 1, "", "all"], [61, 3, 1, "", "any"]], "ivy.array.wrapping": [[63, 1, 1, "", "add_ivy_array_instance_methods"]], "ivy.backend_handler": [[0, 2, 1, "", "ContextManager"], [2, 1, 1, "", "choose_random_backend"], [3, 1, 1, "", "clear_backend_stack"], [4, 1, 1, "", "current_backend"], [5, 1, 1, "", "get_backend"], [6, 1, 1, "", "set_backend"], [7, 1, 1, "", "try_import_ivy_jax"], [8, 1, 1, "", "try_import_ivy_mxnet"], [9, 1, 1, "", "try_import_ivy_numpy"], [10, 1, 1, "", "try_import_ivy_tf"], [11, 1, 1, "", "try_import_ivy_torch"], [12, 1, 1, "", "unset_backend"]], "ivy.backend_handler.ContextManager": [[0, 3, 1, "", "__init__"]], "ivy.container": [[65, 0, 0, "-", "activations"], [67, 0, 0, "-", "base"], [69, 0, 0, "-", "container"], [72, 0, 0, "-", "creation"], [74, 0, 0, "-", "data_type"], [76, 0, 0, "-", "device"], [78, 0, 0, "-", "elementwise"], [80, 0, 0, "-", "general"], [82, 0, 0, "-", "gradients"], [84, 0, 0, "-", "image"], [86, 0, 0, "-", "layers"], [88, 0, 0, "-", "linear_algebra"], [90, 0, 0, "-", "losses"], [92, 0, 0, "-", "manipulation"], [94, 0, 0, "-", "norms"], [96, 0, 0, "-", "random"], [98, 0, 0, "-", "searching"], [100, 0, 0, "-", "set"], [102, 0, 0, "-", "sorting"], [104, 0, 0, "-", "statistical"], [106, 0, 0, "-", "utility"], [108, 0, 0, "-", "wrapping"]], "ivy.container.activations": [[66, 2, 1, "", "ContainerWithActivations"]], "ivy.container.activations.ContainerWithActivations": [[66, 3, 1, "", "softplus"], [66, 3, 1, "", "static_softplus"]], "ivy.container.base": [[68, 2, 1, "", "ContainerBase"]], "ivy.container.base.ContainerBase": [[68, 3, 1, "", "__getitem__"], [68, 3, 1, "", "__init__"], [68, 3, 1, "", "__setitem__"], [68, 3, 1, "", "all_false"], [68, 3, 1, "", "all_key_chains"], [68, 3, 1, "", "all_true"], [68, 3, 1, "", "arrays_as_lists"], [68, 3, 1, "", "as_arrays"], [68, 3, 1, "", "as_bools"], [68, 3, 1, "", "as_ones"], [68, 3, 1, "", "as_random_uniform"], [68, 3, 1, "", "as_variables"], [68, 3, 1, "", "as_zeros"], [68, 3, 1, "", "assert_contains_sub_container"], [68, 3, 1, "", "assert_contains_sub_structure"], [68, 3, 1, "", "assert_identical"], [68, 3, 1, "", "assert_identical_structure"], [68, 3, 1, "", "at_key_chain"], [68, 3, 1, "", "at_key_chains"], [68, 3, 1, "", "at_keys"], [68, 3, 1, "", "clip"], [68, 3, 1, "", "combine"], [68, 3, 1, "", "common_key_chains"], [68, 4, 1, "", "config"], [68, 3, 1, "", "contains_sub_container"], [68, 3, 1, "", "contains_sub_structure"], [68, 3, 1, "", "copy"], [68, 3, 1, "", "create_if_absent"], [68, 3, 1, "", "cutoff_at_depth"], [68, 3, 1, "", "cutoff_at_height"], [68, 3, 1, "", "deep_copy"], [68, 4, 1, "", "dev"], [68, 3, 1, "", "dev_clone"], [68, 3, 1, "", "dev_dist"], [68, 4, 1, "", "dev_str"], [68, 3, 1, "", "diff"], [68, 3, 1, "", "dtype"], [68, 3, 1, "", "einops_rearrange"], [68, 3, 1, "", "einops_reduce"], [68, 3, 1, "", "einops_repeat"], [68, 3, 1, "", "find_sub_container"], [68, 3, 1, "", "find_sub_structure"], [68, 3, 1, "", "flatten_key_chain"], [68, 3, 1, "", "flatten_key_chains"], [68, 3, 1, "", "format_key_chains"], [68, 3, 1, "", "from_disk_as_hdf5"], [68, 3, 1, "", "from_disk_as_json"], [68, 3, 1, "", "from_disk_as_pickled"], [68, 3, 1, "", "from_flat_list"], [68, 3, 1, "", "from_numpy"], [68, 3, 1, "", "gather"], [68, 3, 1, "", "gather_nd"], [68, 3, 1, "", "h5_file_size"], [68, 3, 1, "", "handle_inplace"], [68, 3, 1, "", "has_key"], [68, 3, 1, "", "has_key_chain"], [68, 3, 1, "", "has_nans"], [68, 3, 1, "", "identical"], [68, 3, 1, "", "identical_array_shapes"], [68, 3, 1, "", "identical_configs"], [68, 3, 1, "", "identical_structure"], [68, 3, 1, "", "if_exists"], [68, 3, 1, "", "inplace_update"], [68, 4, 1, "", "ivy"], [68, 3, 1, "", "key_chains_containing"], [68, 3, 1, "", "list_join"], [68, 3, 1, "", "list_stack"], [68, 3, 1, "", "map"], [68, 3, 1, "", "map_conts"], [68, 3, 1, "", "matrix_norm"], [68, 4, 1, "", "max_depth"], [68, 3, 1, "", "maximum"], [68, 3, 1, "", "minimum"], [68, 3, 1, "", "multi_map"], [68, 3, 1, "", "multi_map_in_static_method"], [68, 3, 1, "", "num_arrays"], [68, 3, 1, "", "overwrite_at_key_chain"], [68, 3, 1, "", "overwrite_at_key_chains"], [68, 3, 1, "", "prune_empty"], [68, 3, 1, "", "prune_key_chain"], [68, 3, 1, "", "prune_key_chains"], [68, 3, 1, "", "prune_key_from_key_chains"], [68, 3, 1, "", "prune_keys"], [68, 3, 1, "", "prune_keys_from_key_chains"], [68, 3, 1, "", "reduce"], [68, 3, 1, "", "remove_key_length_limit"], [68, 3, 1, "", "remove_print_limit"], [68, 3, 1, "", "reshape_like"], [68, 3, 1, "", "restructure"], [68, 3, 1, "", "restructure_key_chains"], [68, 3, 1, "", "set_at_key_chain"], [68, 3, 1, "", "set_at_key_chains"], [68, 3, 1, "", "set_at_keys"], [68, 3, 1, "", "set_framework"], [68, 3, 1, "", "set_ivy_backend"], [68, 4, 1, "", "shape"], [68, 4, 1, "", "shapes"], [68, 3, 1, "", "show"], [68, 3, 1, "", "show_sub_container"], [68, 3, 1, "", "shuffle"], [68, 3, 1, "", "shuffle_h5_file"], [68, 3, 1, "", "size_ordered_arrays"], [68, 3, 1, "", "slice_keys"], [68, 3, 1, "", "slice_via_key"], [68, 3, 1, "", "sort_by_key"], [68, 3, 1, "", "split"], [68, 3, 1, "", "stop_gradients"], [68, 3, 1, "", "structural_diff"], [68, 3, 1, "", "to_device"], [68, 3, 1, "", "to_dict"], [68, 3, 1, "", "to_disk_as_hdf5"], [68, 3, 1, "", "to_disk_as_json"], [68, 3, 1, "", "to_disk_as_pickled"], [68, 3, 1, "", "to_flat_list"], [68, 3, 1, "", "to_iterator"], [68, 3, 1, "", "to_iterator_keys"], [68, 3, 1, "", "to_iterator_values"], [68, 3, 1, "", "to_ivy"], [68, 3, 1, "", "to_jsonable"], [68, 3, 1, "", "to_list"], [68, 3, 1, "", "to_multi_dev"], [68, 3, 1, "", "to_native"], [68, 3, 1, "", "to_numpy"], [68, 3, 1, "", "to_raw"], [68, 3, 1, "", "trim_key"], [68, 3, 1, "", "try_kc"], [68, 3, 1, "", "unify"], [68, 3, 1, "", "unstack"], [68, 3, 1, "", "update_config"], [68, 3, 1, "", "vector_norm"], [68, 3, 1, "", "with_default_key_color"], [68, 3, 1, "", "with_entries_as_lists"], [68, 3, 1, "", "with_ivy_backend"], [68, 3, 1, "", "with_key_length_limit"], [68, 3, 1, "", "with_print_indent"], [68, 3, 1, "", "with_print_limit"], [68, 3, 1, "", "with_print_line_spacing"]], "ivy.container.container": [[70, 2, 1, "", "Container"], [71, 2, 1, "", "MultiDevContainer"]], "ivy.container.container.Container": [[70, 3, 1, "", "__add__"], [70, 3, 1, "", "__init__"], [70, 3, 1, "", "__radd__"], [70, 3, 1, "", "arange"], [70, 3, 1, "", "arg_info"], [70, 3, 1, "", "arg_names"], [70, 3, 1, "", "argmax"], [70, 3, 1, "", "argmin"], [70, 3, 1, "", "array"], [70, 3, 1, "", "array_equal"], [70, 3, 1, "", "arrays_equal"], [70, 3, 1, "", "as_ivy_dev"], [70, 3, 1, "", "as_ivy_dtype"], [70, 3, 1, "", "as_native_dev"], [70, 3, 1, "", "as_native_dtype"], [70, 3, 1, "", "assert_supports_inplace"], [70, 3, 1, "", "astype"], [70, 3, 1, "", "broadcast_arrays"], [70, 3, 1, "", "broadcast_to"], [70, 3, 1, "", "cache_fn"], [70, 3, 1, "", "clear_mem_on_dev"], [70, 3, 1, "", "clip_matrix_norm"], [70, 3, 1, "", "closest_valid_dtype"], [70, 3, 1, "", "container_types"], [70, 3, 1, "", "conv1d"], [70, 3, 1, "", "conv1d_transpose"], [70, 3, 1, "", "conv2d"], [70, 3, 1, "", "conv2d_transpose"], [70, 3, 1, "", "conv3d"], [70, 3, 1, "", "conv3d_transpose"], [70, 3, 1, "", "copy_array"], [70, 3, 1, "", "cross"], [70, 3, 1, "", "cumprod"], [70, 3, 1, "", "cumsum"], [70, 3, 1, "", "current_backend"], [70, 3, 1, "", "current_backend_str"], [70, 3, 1, "", "default"], [70, 3, 1, "", "default_device"], [70, 3, 1, "", "default_dtype"], [70, 3, 1, "", "default_float_dtype"], [70, 3, 1, "", "default_int_dtype"], [70, 3, 1, "", "depthwise_conv2d"], [70, 3, 1, "", "det"], [70, 3, 1, "", "dev_clone_array"], [70, 3, 1, "", "dev_clone_iter"], [70, 3, 1, "", "dev_clone_nest"], [70, 3, 1, "", "dev_dist_array"], [70, 3, 1, "", "dev_dist_iter"], [70, 3, 1, "", "dev_dist_nest"], [70, 3, 1, "", "dev_unify"], [70, 3, 1, "", "dev_unify_array"], [70, 3, 1, "", "dev_unify_iter"], [70, 3, 1, "", "dev_unify_nest"], [70, 3, 1, "", "dev_util"], [70, 3, 1, "", "diagonal"], [70, 3, 1, "", "dropout"], [70, 3, 1, "", "dtype_bits"], [70, 3, 1, "", "eigh"], [70, 3, 1, "", "eigvalsh"], [70, 3, 1, "", "empty"], [70, 3, 1, "", "execute_with_gradients"], [70, 3, 1, "", "exists"], [70, 3, 1, "", "eye"], [70, 3, 1, "", "finfo"], [70, 3, 1, "", "floormod"], [70, 3, 1, "", "fourier_encode"], [70, 3, 1, "", "full"], [70, 3, 1, "", "function_supported_dtypes"], [70, 3, 1, "", "function_unsupported_dtypes"], [70, 3, 1, "", "gelu"], [70, 3, 1, "", "get_all_arrays_in_memory"], [70, 3, 1, "", "get_all_ivy_arrays_on_dev"], [70, 3, 1, "", "get_min_base"], [70, 3, 1, "", "get_min_denominator"], [70, 3, 1, "", "get_num_dims"], [70, 3, 1, "", "get_referrers_recursive"], [70, 3, 1, "", "gpu_is_available"], [70, 3, 1, "", "handle_nestable"], [70, 3, 1, "", "handle_out_argument"], [70, 3, 1, "", "iinfo"], [70, 3, 1, "", "indices_where"], [70, 3, 1, "", "infer_device"], [70, 3, 1, "", "infer_dtype"], [70, 3, 1, "", "inplace_arrays_supported"], [70, 3, 1, "", "inplace_decrement"], [70, 3, 1, "", "inplace_increment"], [70, 3, 1, "", "inplace_variables_supported"], [70, 3, 1, "", "inputs_to_native_arrays"], [70, 3, 1, "", "inv"], [70, 3, 1, "", "invalid_dtype"], [70, 3, 1, "", "is_float_dtype"], [70, 3, 1, "", "is_int_dtype"], [70, 3, 1, "", "is_ivy_container"], [70, 3, 1, "", "leaky_relu"], [70, 3, 1, "", "linear"], [70, 3, 1, "", "linspace"], [70, 3, 1, "", "logspace"], [70, 3, 1, "", "lstm_update"], [70, 3, 1, "", "match_kwargs"], [70, 3, 1, "", "matrix_power"], [70, 3, 1, "", "matrix_rank"], [70, 3, 1, "", "matrix_transpose"], [70, 3, 1, "", "multi_head_attention"], [70, 3, 1, "", "multinomial"], [70, 3, 1, "", "multiprocessing"], [70, 3, 1, "", "nonzero"], [70, 3, 1, "", "num_arrays_in_memory"], [70, 3, 1, "", "num_cpu_cores"], [70, 3, 1, "", "num_gpus"], [70, 3, 1, "", "num_ivy_arrays_on_dev"], [70, 3, 1, "", "one_hot"], [70, 3, 1, "", "ones"], [70, 3, 1, "", "outer"], [70, 3, 1, "", "outputs_to_ivy_arrays"], [70, 3, 1, "", "percent_used_mem_on_dev"], [70, 3, 1, "", "pinv"], [70, 3, 1, "", "print_all_arrays_in_memory"], [70, 3, 1, "", "print_all_ivy_arrays_on_dev"], [70, 3, 1, "", "promote_types"], [70, 3, 1, "", "qr"], [70, 3, 1, "", "queue_timeout"], [70, 3, 1, "", "randint"], [70, 3, 1, "", "random_normal"], [70, 3, 1, "", "relu"], [70, 3, 1, "", "result_type"], [70, 3, 1, "", "scaled_dot_product_attention"], [70, 3, 1, "", "scatter_flat"], [70, 3, 1, "", "scatter_nd"], [70, 3, 1, "", "seed"], [70, 3, 1, "", "set_default_device"], [70, 3, 1, "", "set_default_dtype"], [70, 3, 1, "", "set_default_float_dtype"], [70, 3, 1, "", "set_default_int_dtype"], [70, 3, 1, "", "set_min_base"], [70, 3, 1, "", "set_min_denominator"], [70, 3, 1, "", "set_queue_timeout"], [70, 3, 1, "", "set_split_factor"], [70, 3, 1, "", "set_tmp_dir"], [70, 3, 1, "", "set_with_grads"], [70, 3, 1, "", "shape_to_tuple"], [70, 3, 1, "", "sigmoid"], [70, 3, 1, "", "slogdet"], [70, 3, 1, "", "softmax"], [70, 3, 1, "", "solve"], [70, 3, 1, "", "split_factor"], [70, 3, 1, "", "split_func_call"], [70, 3, 1, "", "stable_divide"], [70, 3, 1, "", "stable_pow"], [70, 3, 1, "", "static_acos"], [70, 3, 1, "", "static_acosh"], [70, 3, 1, "", "static_arg_info"], [70, 3, 1, "", "static_arg_names"], [70, 3, 1, "", "static_argmax"], [70, 3, 1, "", "static_argmin"], [70, 3, 1, "", "static_array"], [70, 3, 1, "", "static_array_equal"], [70, 3, 1, "", "static_arrays_equal"], [70, 3, 1, "", "static_as_ivy_dev"], [70, 3, 1, "", "static_as_ivy_dtype"], [70, 3, 1, "", "static_as_native_dev"], [70, 3, 1, "", "static_as_native_dtype"], [70, 3, 1, "", "static_asin"], [70, 3, 1, "", "static_asinh"], [70, 3, 1, "", "static_assert_supports_inplace"], [70, 3, 1, "", "static_astype"], [70, 3, 1, "", "static_atan"], [70, 3, 1, "", "static_atan2"], [70, 3, 1, "", "static_atanh"], [70, 3, 1, "", "static_bitwise_and"], [70, 3, 1, "", "static_bitwise_invert"], [70, 3, 1, "", "static_bitwise_left_shift"], [70, 3, 1, "", "static_bitwise_or"], [70, 3, 1, "", "static_bitwise_right_shift"], [70, 3, 1, "", "static_bitwise_xor"], [70, 3, 1, "", "static_broadcast_arrays"], [70, 3, 1, "", "static_broadcast_to"], [70, 3, 1, "", "static_cache_fn"], [70, 3, 1, "", "static_ceil"], [70, 3, 1, "", "static_clear_mem_on_dev"], [70, 3, 1, "", "static_clip_matrix_norm"], [70, 3, 1, "", "static_clip_vector_norm"], [70, 3, 1, "", "static_closest_valid_dtype"], [70, 3, 1, "", "static_concat"], [70, 3, 1, "", "static_constant_pad"], [70, 3, 1, "", "static_container_types"], [70, 3, 1, "", "static_conv1d"], [70, 3, 1, "", "static_conv1d_transpose"], [70, 3, 1, "", "static_conv2d"], [70, 3, 1, "", "static_conv2d_transpose"], [70, 3, 1, "", "static_conv3d"], [70, 3, 1, "", "static_conv3d_transpose"], [70, 3, 1, "", "static_copy_array"], [70, 3, 1, "", "static_cos"], [70, 3, 1, "", "static_cosh"], [70, 3, 1, "", "static_cross"], [70, 3, 1, "", "static_cumprod"], [70, 3, 1, "", "static_cumsum"], [70, 3, 1, "", "static_current_backend"], [70, 3, 1, "", "static_current_backend_str"], [70, 3, 1, "", "static_default"], [70, 3, 1, "", "static_default_device"], [70, 3, 1, "", "static_default_dtype"], [70, 3, 1, "", "static_default_float_dtype"], [70, 3, 1, "", "static_default_int_dtype"], [70, 3, 1, "", "static_depthwise_conv2d"], [70, 3, 1, "", "static_det"], [70, 3, 1, "", "static_dev"], [70, 3, 1, "", "static_dev_clone"], [70, 3, 1, "", "static_dev_clone_array"], [70, 3, 1, "", "static_dev_clone_iter"], [70, 3, 1, "", "static_dev_clone_nest"], [70, 3, 1, "", "static_dev_dist"], [70, 3, 1, "", "static_dev_dist_array"], [70, 3, 1, "", "static_dev_dist_iter"], [70, 3, 1, "", "static_dev_dist_nest"], [70, 3, 1, "", "static_dev_unify"], [70, 3, 1, "", "static_dev_unify_array"], [70, 3, 1, "", "static_dev_unify_iter"], [70, 3, 1, "", "static_dev_unify_nest"], [70, 3, 1, "", "static_dev_util"], [70, 3, 1, "", "static_diagonal"], [70, 3, 1, "", "static_dropout"], [70, 3, 1, "", "static_dtype"], [70, 3, 1, "", "static_dtype_bits"], [70, 3, 1, "", "static_eigh"], [70, 3, 1, "", "static_eigvalsh"], [70, 3, 1, "", "static_einops_rearrange"], [70, 3, 1, "", "static_einops_reduce"], [70, 3, 1, "", "static_einops_repeat"], [70, 3, 1, "", "static_einsum"], [70, 3, 1, "", "static_empty"], [70, 3, 1, "", "static_equal"], [70, 3, 1, "", "static_erf"], [70, 3, 1, "", "static_execute_with_gradients"], [70, 3, 1, "", "static_exists"], [70, 3, 1, "", "static_exp"], [70, 3, 1, "", "static_expand_dims"], [70, 3, 1, "", "static_expm1"], [70, 3, 1, "", "static_finfo"], [70, 3, 1, "", "static_flip"], [70, 3, 1, "", "static_floor"], [70, 3, 1, "", "static_floor_divide"], [70, 3, 1, "", "static_floormod"], [70, 3, 1, "", "static_fourier_encode"], [70, 3, 1, "", "static_full"], [70, 3, 1, "", "static_function_supported_dtypes"], [70, 3, 1, "", "static_function_unsupported_dtypes"], [70, 3, 1, "", "static_gather"], [70, 3, 1, "", "static_gelu"], [70, 3, 1, "", "static_get_all_arrays_in_memory"], [70, 3, 1, "", "static_get_all_ivy_arrays_on_dev"], [70, 3, 1, "", "static_get_min_base"], [70, 3, 1, "", "static_get_min_denominator"], [70, 3, 1, "", "static_get_num_dims"], [70, 3, 1, "", "static_get_referrers_recursive"], [70, 3, 1, "", "static_gpu_is_available"], [70, 3, 1, "", "static_greater"], [70, 3, 1, "", "static_greater_equal"], [70, 3, 1, "", "static_handle_nestable"], [70, 3, 1, "", "static_handle_out_argument"], [70, 3, 1, "", "static_has_nans"], [70, 3, 1, "", "static_iinfo"], [70, 3, 1, "", "static_indices_where"], [70, 3, 1, "", "static_infer_device"], [70, 3, 1, "", "static_infer_dtype"], [70, 3, 1, "", "static_inplace_arrays_supported"], [70, 3, 1, "", "static_inplace_decrement"], [70, 3, 1, "", "static_inplace_increment"], [70, 3, 1, "", "static_inplace_update"], [70, 3, 1, "", "static_inplace_variables_supported"], [70, 3, 1, "", "static_inputs_to_native_arrays"], [70, 3, 1, "", "static_inv"], [70, 3, 1, "", "static_invalid_dtype"], [70, 3, 1, "", "static_is_array"], [70, 3, 1, "", "static_is_float_dtype"], [70, 3, 1, "", "static_is_int_dtype"], [70, 3, 1, "", "static_is_ivy_array"], [70, 3, 1, "", "static_is_ivy_container"], [70, 3, 1, "", "static_is_native_array"], [70, 3, 1, "", "static_isfinite"], [70, 3, 1, "", "static_isinf"], [70, 3, 1, "", "static_isnan"], [70, 3, 1, "", "static_layer_norm"], [70, 3, 1, "", "static_leaky_relu"], [70, 3, 1, "", "static_less"], [70, 3, 1, "", "static_less_equal"], [70, 3, 1, "", "static_linear"], [70, 3, 1, "", "static_log"], [70, 3, 1, "", "static_log10"], [70, 3, 1, "", "static_log1p"], [70, 3, 1, "", "static_log2"], [70, 3, 1, "", "static_logaddexp"], [70, 3, 1, "", "static_logical_and"], [70, 3, 1, "", "static_logical_not"], [70, 3, 1, "", "static_logical_or"], [70, 3, 1, "", "static_logical_xor"], [70, 3, 1, "", "static_lstm_update"], [70, 3, 1, "", "static_match_kwargs"], [70, 3, 1, "", "static_matmul"], [70, 3, 1, "", "static_matrix_norm"], [70, 3, 1, "", "static_matrix_power"], [70, 3, 1, "", "static_matrix_rank"], [70, 3, 1, "", "static_matrix_transpose"], [70, 3, 1, "", "static_max"], [70, 3, 1, "", "static_maximum"], [70, 3, 1, "", "static_mean"], [70, 3, 1, "", "static_min"], [70, 3, 1, "", "static_minimum"], [70, 3, 1, "", "static_multi_head_attention"], [70, 3, 1, "", "static_multinomial"], [70, 3, 1, "", "static_multiprocessing"], [70, 3, 1, "", "static_negative"], [70, 3, 1, "", "static_nonzero"], [70, 3, 1, "", "static_not_equal"], [70, 3, 1, "", "static_num_arrays_in_memory"], [70, 3, 1, "", "static_num_cpu_cores"], [70, 3, 1, "", "static_num_gpus"], [70, 3, 1, "", "static_num_ivy_arrays_on_dev"], [70, 3, 1, "", "static_one_hot"], [70, 3, 1, "", "static_outer"], [70, 3, 1, "", "static_outputs_to_ivy_arrays"], [70, 3, 1, "", "static_percent_used_mem_on_dev"], [70, 3, 1, "", "static_permute_dims"], [70, 3, 1, "", "static_pinv"], [70, 3, 1, "", "static_positive"], [70, 3, 1, "", "static_pow"], [70, 3, 1, "", "static_print_all_arrays_in_memory"], [70, 3, 1, "", "static_print_all_ivy_arrays_on_dev"], [70, 3, 1, "", "static_prod"], [70, 3, 1, "", "static_promote_types"], [70, 3, 1, "", "static_qr"], [70, 3, 1, "", "static_queue_timeout"], [70, 3, 1, "", "static_random_normal"], [70, 3, 1, "", "static_relu"], [70, 3, 1, "", "static_remainder"], [70, 3, 1, "", "static_repeat"], [70, 3, 1, "", "static_reshape"], [70, 3, 1, "", "static_result_type"], [70, 3, 1, "", "static_round"], [70, 3, 1, "", "static_scaled_dot_product_attention"], [70, 3, 1, "", "static_scatter_flat"], [70, 3, 1, "", "static_scatter_nd"], [70, 3, 1, "", "static_seed"], [70, 3, 1, "", "static_set_default_device"], [70, 3, 1, "", "static_set_default_dtype"], [70, 3, 1, "", "static_set_default_float_dtype"], [70, 3, 1, "", "static_set_default_int_dtype"], [70, 3, 1, "", "static_set_min_base"], [70, 3, 1, "", "static_set_min_denominator"], [70, 3, 1, "", "static_set_queue_timeout"], [70, 3, 1, "", "static_set_split_factor"], [70, 3, 1, "", "static_set_tmp_dir"], [70, 3, 1, "", "static_set_with_grads"], [70, 3, 1, "", "static_shape"], [70, 3, 1, "", "static_shape_to_tuple"], [70, 3, 1, "", "static_shuffle"], [70, 3, 1, "", "static_sigmoid"], [70, 3, 1, "", "static_sign"], [70, 3, 1, "", "static_sin"], [70, 3, 1, "", "static_sinh"], [70, 3, 1, "", "static_slogdet"], [70, 3, 1, "", "static_softmax"], [70, 3, 1, "", "static_solve"], [70, 3, 1, "", "static_split"], [70, 3, 1, "", "static_split_factor"], [70, 3, 1, "", "static_split_func_call"], [70, 3, 1, "", "static_sqrt"], [70, 3, 1, "", "static_square"], [70, 3, 1, "", "static_squeeze"], [70, 3, 1, "", "static_stable_divide"], [70, 3, 1, "", "static_stable_pow"], [70, 3, 1, "", "static_stack"], [70, 3, 1, "", "static_std"], [70, 3, 1, "", "static_stop_gradient"], [70, 3, 1, "", "static_sum"], [70, 3, 1, "", "static_supports_inplace"], [70, 3, 1, "", "static_svd"], [70, 3, 1, "", "static_svdvals"], [70, 3, 1, "", "static_swapaxes"], [70, 3, 1, "", "static_tensordot"], [70, 3, 1, "", "static_tile"], [70, 3, 1, "", "static_tmp_dir"], [70, 3, 1, "", "static_to_device"], [70, 3, 1, "", "static_to_list"], [70, 3, 1, "", "static_to_native_arrays_and_back"], [70, 3, 1, "", "static_to_numpy"], [70, 3, 1, "", "static_to_scalar"], [70, 3, 1, "", "static_total_mem_on_dev"], [70, 3, 1, "", "static_tpu_is_available"], [70, 3, 1, "", "static_trace"], [70, 3, 1, "", "static_trunc"], [70, 3, 1, "", "static_try_else_none"], [70, 3, 1, "", "static_type_promote_arrays"], [70, 3, 1, "", "static_unique_all"], [70, 3, 1, "", "static_unique_inverse"], [70, 3, 1, "", "static_unique_values"], [70, 3, 1, "", "static_unset_default_device"], [70, 3, 1, "", "static_unset_default_dtype"], [70, 3, 1, "", "static_unset_default_float_dtype"], [70, 3, 1, "", "static_unset_default_int_dtype"], [70, 3, 1, "", "static_unset_with_grads"], [70, 3, 1, "", "static_unstack"], [70, 3, 1, "", "static_used_mem_on_dev"], [70, 3, 1, "", "static_valid_dtype"], [70, 3, 1, "", "static_value_is_nan"], [70, 3, 1, "", "static_var"], [70, 3, 1, "", "static_variable"], [70, 3, 1, "", "static_variable_data"], [70, 3, 1, "", "static_vecdot"], [70, 3, 1, "", "static_vector_norm"], [70, 3, 1, "", "static_vector_to_skew_symmetric_matrix"], [70, 3, 1, "", "static_where"], [70, 3, 1, "", "static_with_grads"], [70, 3, 1, "", "static_zero_pad"], [70, 3, 1, "", "stop_gradient"], [70, 3, 1, "", "supports_inplace"], [70, 3, 1, "", "svd"], [70, 3, 1, "", "svdvals"], [70, 3, 1, "", "tensordot"], [70, 3, 1, "", "tmp_dir"], [70, 3, 1, "", "to_native_arrays_and_back"], [70, 3, 1, "", "to_scalar"], [70, 3, 1, "", "total_mem_on_dev"], [70, 3, 1, "", "tpu_is_available"], [70, 3, 1, "", "trace"], [70, 3, 1, "", "try_else_none"], [70, 3, 1, "", "type_promote_arrays"], [70, 3, 1, "", "unique_all"], [70, 3, 1, "", "unique_inverse"], [70, 3, 1, "", "unique_values"], [70, 3, 1, "", "unset_default_device"], [70, 3, 1, "", "unset_default_dtype"], [70, 3, 1, "", "unset_default_float_dtype"], [70, 3, 1, "", "unset_default_int_dtype"], [70, 3, 1, "", "unset_with_grads"], [70, 3, 1, "", "used_mem_on_dev"], [70, 3, 1, "", "valid_dtype"], [70, 3, 1, "", "value_is_nan"], [70, 3, 1, "", "variable"], [70, 3, 1, "", "variable_data"], [70, 3, 1, "", "vecdot"], [70, 3, 1, "", "vector_to_skew_symmetric_matrix"], [70, 3, 1, "", "where"], [70, 3, 1, "", "with_grads"], [70, 3, 1, "", "zeros"]], "ivy.container.container.MultiDevContainer": [[71, 3, 1, "", "__init__"], [71, 3, 1, "", "at_dev"], [71, 3, 1, "", "at_devs"]], "ivy.container.container_methods": [[374, 1, 1, "", "abs"], [379, 1, 1, "", "acos"], [383, 1, 1, "", "acosh"], [687, 1, 1, "", "adam_step"], [691, 1, 1, "", "adam_update"], [387, 1, 1, "", "add"], [982, 1, 1, "", "all"], [612, 1, 1, "", "all_equal"], [987, 1, 1, "", "any"], [938, 1, 1, "", "argsort"], [219, 1, 1, "", "asarray"], [392, 1, 1, "", "asin"], [396, 1, 1, "", "asinh"], [400, 1, 1, "", "atan"], [404, 1, 1, "", "atan2"], [408, 1, 1, "", "atanh"], [809, 1, 1, "", "binary_cross_entropy"], [412, 1, 1, "", "bitwise_and"], [416, 1, 1, "", "bitwise_invert"], [420, 1, 1, "", "bitwise_left_shift"], [424, 1, 1, "", "bitwise_or"], [428, 1, 1, "", "bitwise_right_shift"], [432, 1, 1, "", "bitwise_xor"], [295, 1, 1, "", "can_cast"], [436, 1, 1, "", "ceil"], [737, 1, 1, "", "cholesky"], [825, 1, 1, "", "clip"], [623, 1, 1, "", "clip_vector_norm"], [830, 1, 1, "", "concat"], [834, 1, 1, "", "constant_pad"], [440, 1, 1, "", "cos"], [444, 1, 1, "", "cosh"], [814, 1, 1, "", "cross_entropy"], [448, 1, 1, "", "divide"], [949, 1, 1, "", "einsum"], [225, 1, 1, "", "empty_like"], [453, 1, 1, "", "equal"], [457, 1, 1, "", "erf"], [461, 1, 1, "", "exp"], [838, 1, 1, "", "expand_dims"], [465, 1, 1, "", "expm1"], [842, 1, 1, "", "flip"], [469, 1, 1, "", "floor"], [473, 1, 1, "", "floor_divide"], [233, 1, 1, "", "from_dlpack"], [239, 1, 1, "", "full_like"], [640, 1, 1, "", "gather_nd"], [696, 1, 1, "", "gradient_descent_update"], [477, 1, 1, "", "greater"], [481, 1, 1, "", "greater_equal"], [700, 1, 1, "", "is_variable"], [485, 1, 1, "", "isfinite"], [489, 1, 1, "", "isinf"], [493, 1, 1, "", "isnan"], [704, 1, 1, "", "lamb_update"], [708, 1, 1, "", "lars_update"], [907, 1, 1, "", "layer_norm"], [497, 1, 1, "", "less"], [501, 1, 1, "", "less_equal"], [505, 1, 1, "", "log"], [509, 1, 1, "", "log10"], [513, 1, 1, "", "log1p"], [517, 1, 1, "", "log2"], [521, 1, 1, "", "logaddexp"], [525, 1, 1, "", "logical_and"], [529, 1, 1, "", "logical_not"], [533, 1, 1, "", "logical_or"], [537, 1, 1, "", "logical_xor"], [760, 1, 1, "", "matmul"], [953, 1, 1, "", "max"], [957, 1, 1, "", "mean"], [250, 1, 1, "", "meshgrid"], [961, 1, 1, "", "min"], [543, 1, 1, "", "multiply"], [255, 1, 1, "", "native_array"], [548, 1, 1, "", "negative"], [552, 1, 1, "", "not_equal"], [263, 1, 1, "", "ones_like"], [712, 1, 1, "", "optimizer_update"], [846, 1, 1, "", "permute_dims"], [556, 1, 1, "", "positive"], [560, 1, 1, "", "pow"], [965, 1, 1, "", "prod"], [916, 1, 1, "", "random_uniform"], [564, 1, 1, "", "remainder"], [850, 1, 1, "", "repeat"], [854, 1, 1, "", "reshape"], [858, 1, 1, "", "roll"], [568, 1, 1, "", "round"], [572, 1, 1, "", "sign"], [576, 1, 1, "", "sin"], [580, 1, 1, "", "sinh"], [206, 1, 1, "", "softplus"], [943, 1, 1, "", "sort"], [819, 1, 1, "", "sparse_cross_entropy"], [584, 1, 1, "", "sqrt"], [588, 1, 1, "", "square"], [864, 1, 1, "", "squeeze"], [868, 1, 1, "", "stack"], [376, 1, 1, "", "static_abs"], [689, 1, 1, "", "static_adam_step"], [693, 1, 1, "", "static_adam_update"], [389, 1, 1, "", "static_add"], [984, 1, 1, "", "static_all"], [614, 1, 1, "", "static_all_equal"], [989, 1, 1, "", "static_any"], [216, 1, 1, "", "static_arange"], [940, 1, 1, "", "static_argsort"], [221, 1, 1, "", "static_asarray"], [811, 1, 1, "", "static_binary_cross_entropy"], [297, 1, 1, "", "static_can_cast"], [739, 1, 1, "", "static_cholesky"], [827, 1, 1, "", "static_clip"], [816, 1, 1, "", "static_cross_entropy"], [450, 1, 1, "", "static_divide"], [227, 1, 1, "", "static_empty_like"], [230, 1, 1, "", "static_eye"], [235, 1, 1, "", "static_from_dlpack"], [241, 1, 1, "", "static_full_like"], [642, 1, 1, "", "static_gather_nd"], [698, 1, 1, "", "static_gradient_descent_update"], [702, 1, 1, "", "static_is_variable"], [706, 1, 1, "", "static_lamb_update"], [710, 1, 1, "", "static_lars_update"], [244, 1, 1, "", "static_linspace"], [247, 1, 1, "", "static_logspace"], [252, 1, 1, "", "static_meshgrid"], [545, 1, 1, "", "static_multiply"], [257, 1, 1, "", "static_native_array"], [260, 1, 1, "", "static_ones"], [265, 1, 1, "", "static_ones_like"], [714, 1, 1, "", "static_optimizer_update"], [913, 1, 1, "", "static_randint"], [918, 1, 1, "", "static_random_uniform"], [860, 1, 1, "", "static_roll"], [208, 1, 1, "", "static_softplus"], [945, 1, 1, "", "static_sort"], [821, 1, 1, "", "static_sparse_cross_entropy"], [591, 1, 1, "", "static_subtract"], [596, 1, 1, "", "static_tan"], [601, 1, 1, "", "static_tanh"], [267, 1, 1, "", "static_tril"], [272, 1, 1, "", "static_triu"], [929, 1, 1, "", "static_unique_counts"], [277, 1, 1, "", "static_zeros"], [280, 1, 1, "", "static_zeros_like"], [969, 1, 1, "", "std"], [593, 1, 1, "", "subtract"], [973, 1, 1, "", "sum"], [872, 1, 1, "", "swapaxes"], [598, 1, 1, "", "tan"], [603, 1, 1, "", "tanh"], [876, 1, 1, "", "tile"], [269, 1, 1, "", "tril"], [274, 1, 1, "", "triu"], [607, 1, 1, "", "trunc"], [931, 1, 1, "", "unique_counts"], [977, 1, 1, "", "var"], [880, 1, 1, "", "zero_pad"], [282, 1, 1, "", "zeros_like"]], "ivy.container.creation": [[73, 2, 1, "", "ContainerWithCreation"]], "ivy.container.creation.ContainerWithCreation": [[73, 3, 1, "", "asarray"], [73, 3, 1, "", "empty_like"], [73, 3, 1, "", "from_dlpack"], [73, 3, 1, "", "full_like"], [73, 3, 1, "", "meshgrid"], [73, 3, 1, "", "native_array"], [73, 3, 1, "", "ones_like"], [73, 3, 1, "", "static_arange"], [73, 3, 1, "", "static_asarray"], [73, 3, 1, "", "static_empty_like"], [73, 3, 1, "", "static_eye"], [73, 3, 1, "", "static_from_dlpack"], [73, 3, 1, "", "static_full_like"], [73, 3, 1, "", "static_linspace"], [73, 3, 1, "", "static_logspace"], [73, 3, 1, "", "static_meshgrid"], [73, 3, 1, "", "static_native_array"], [73, 3, 1, "", "static_ones"], [73, 3, 1, "", "static_ones_like"], [73, 3, 1, "", "static_tril"], [73, 3, 1, "", "static_triu"], [73, 3, 1, "", "static_zeros"], [73, 3, 1, "", "static_zeros_like"], [73, 3, 1, "", "tril"], [73, 3, 1, "", "triu"], [73, 3, 1, "", "zeros_like"]], "ivy.container.data_type": [[75, 2, 1, "", "ContainerWithDataTypes"]], "ivy.container.data_type.ContainerWithDataTypes": [[75, 3, 1, "", "can_cast"], [75, 3, 1, "", "static_can_cast"]], "ivy.container.device": [[77, 2, 1, "", "ContainerWithDevice"]], "ivy.container.elementwise": [[79, 2, 1, "", "ContainerWithElementwise"]], "ivy.container.elementwise.ContainerWithElementwise": [[79, 3, 1, "", "abs"], [79, 3, 1, "", "acos"], [79, 3, 1, "", "acosh"], [79, 3, 1, "", "add"], [79, 3, 1, "", "asin"], [79, 3, 1, "", "asinh"], [79, 3, 1, "", "atan"], [79, 3, 1, "", "atan2"], [79, 3, 1, "", "atanh"], [79, 3, 1, "", "bitwise_and"], [79, 3, 1, "", "bitwise_invert"], [79, 3, 1, "", "bitwise_left_shift"], [79, 3, 1, "", "bitwise_or"], [79, 3, 1, "", "bitwise_right_shift"], [79, 3, 1, "", "bitwise_xor"], [79, 3, 1, "", "ceil"], [79, 3, 1, "", "cos"], [79, 3, 1, "", "cosh"], [79, 3, 1, "", "divide"], [79, 3, 1, "", "equal"], [79, 3, 1, "", "erf"], [79, 3, 1, "", "exp"], [79, 3, 1, "", "expm1"], [79, 3, 1, "", "floor"], [79, 3, 1, "", "floor_divide"], [79, 3, 1, "", "greater"], [79, 3, 1, "", "greater_equal"], [79, 3, 1, "", "isfinite"], [79, 3, 1, "", "isinf"], [79, 3, 1, "", "isnan"], [79, 3, 1, "", "less"], [79, 3, 1, "", "less_equal"], [79, 3, 1, "", "log"], [79, 3, 1, "", "log10"], [79, 3, 1, "", "log1p"], [79, 3, 1, "", "log2"], [79, 3, 1, "", "logaddexp"], [79, 3, 1, "", "logical_and"], [79, 3, 1, "", "logical_not"], [79, 3, 1, "", "logical_or"], [79, 3, 1, "", "logical_xor"], [79, 3, 1, "", "multiply"], [79, 3, 1, "", "negative"], [79, 3, 1, "", "not_equal"], [79, 3, 1, "", "positive"], [79, 3, 1, "", "pow"], [79, 3, 1, "", "remainder"], [79, 3, 1, "", "round"], [79, 3, 1, "", "sign"], [79, 3, 1, "", "sin"], [79, 3, 1, "", "sinh"], [79, 3, 1, "", "sqrt"], [79, 3, 1, "", "square"], [79, 3, 1, "", "static_abs"], [79, 3, 1, "", "static_add"], [79, 3, 1, "", "static_divide"], [79, 3, 1, "", "static_multiply"], [79, 3, 1, "", "static_subtract"], [79, 3, 1, "", "static_tan"], [79, 3, 1, "", "static_tanh"], [79, 3, 1, "", "subtract"], [79, 3, 1, "", "tan"], [79, 3, 1, "", "tanh"], [79, 3, 1, "", "trunc"]], "ivy.container.general": [[81, 2, 1, "", "ContainerWithGeneral"]], "ivy.container.general.ContainerWithGeneral": [[81, 3, 1, "", "all_equal"], [81, 3, 1, "", "clip_vector_norm"], [81, 3, 1, "", "gather_nd"], [81, 3, 1, "", "static_all_equal"], [81, 3, 1, "", "static_gather_nd"]], "ivy.container.gradients": [[83, 2, 1, "", "ContainerWithGradients"]], "ivy.container.gradients.ContainerWithGradients": [[83, 3, 1, "", "adam_step"], [83, 3, 1, "", "adam_update"], [83, 3, 1, "", "gradient_descent_update"], [83, 3, 1, "", "is_variable"], [83, 3, 1, "", "lamb_update"], [83, 3, 1, "", "lars_update"], [83, 3, 1, "", "optimizer_update"], [83, 3, 1, "", "static_adam_step"], [83, 3, 1, "", "static_adam_update"], [83, 3, 1, "", "static_gradient_descent_update"], [83, 3, 1, "", "static_is_variable"], [83, 3, 1, "", "static_lamb_update"], [83, 3, 1, "", "static_lars_update"], [83, 3, 1, "", "static_optimizer_update"]], "ivy.container.image": [[85, 2, 1, "", "ContainerWithImage"]], "ivy.container.layers": [[87, 2, 1, "", "ContainerWithLayers"]], "ivy.container.linear_algebra": [[89, 2, 1, "", "ContainerWithLinearAlgebra"]], "ivy.container.linear_algebra.ContainerWithLinearAlgebra": [[89, 3, 1, "", "cholesky"], [89, 3, 1, "", "matmul"], [89, 3, 1, "", "static_cholesky"]], "ivy.container.losses": [[91, 2, 1, "", "ContainerWithLosses"]], "ivy.container.losses.ContainerWithLosses": [[91, 3, 1, "", "binary_cross_entropy"], [91, 3, 1, "", "cross_entropy"], [91, 3, 1, "", "sparse_cross_entropy"], [91, 3, 1, "", "static_binary_cross_entropy"], [91, 3, 1, "", "static_cross_entropy"], [91, 3, 1, "", "static_sparse_cross_entropy"]], "ivy.container.manipulation": [[93, 2, 1, "", "ContainerWithManipulation"]], "ivy.container.manipulation.ContainerWithManipulation": [[93, 3, 1, "", "clip"], [93, 3, 1, "", "concat"], [93, 3, 1, "", "constant_pad"], [93, 3, 1, "", "expand_dims"], [93, 3, 1, "", "flip"], [93, 3, 1, "", "permute_dims"], [93, 3, 1, "", "repeat"], [93, 3, 1, "", "reshape"], [93, 3, 1, "", "roll"], [93, 3, 1, "", "squeeze"], [93, 3, 1, "", "stack"], [93, 3, 1, "", "static_clip"], [93, 3, 1, "", "static_roll"], [93, 3, 1, "", "swapaxes"], [93, 3, 1, "", "tile"], [93, 3, 1, "", "zero_pad"]], "ivy.container.norms": [[95, 2, 1, "", "ContainerWithNorms"]], "ivy.container.norms.ContainerWithNorms": [[95, 3, 1, "", "layer_norm"]], "ivy.container.random": [[97, 2, 1, "", "ContainerWithRandom"]], "ivy.container.random.ContainerWithRandom": [[97, 3, 1, "", "random_uniform"], [97, 3, 1, "", "static_randint"], [97, 3, 1, "", "static_random_uniform"]], "ivy.container.searching": [[99, 2, 1, "", "ContainerWithSearching"]], "ivy.container.set": [[101, 2, 1, "", "ContainerWithSet"]], "ivy.container.set.ContainerWithSet": [[101, 3, 1, "", "static_unique_counts"], [101, 3, 1, "", "unique_counts"]], "ivy.container.sorting": [[103, 2, 1, "", "ContainerWithSorting"]], "ivy.container.sorting.ContainerWithSorting": [[103, 3, 1, "", "argsort"], [103, 3, 1, "", "sort"], [103, 3, 1, "", "static_argsort"], [103, 3, 1, "", "static_sort"]], "ivy.container.statistical": [[105, 2, 1, "", "ContainerWithStatistical"]], "ivy.container.statistical.ContainerWithStatistical": [[105, 3, 1, "", "einsum"], [105, 3, 1, "", "max"], [105, 3, 1, "", "mean"], [105, 3, 1, "", "min"], [105, 3, 1, "", "prod"], [105, 3, 1, "", "std"], [105, 3, 1, "", "sum"], [105, 3, 1, "", "var"]], "ivy.container.utility": [[107, 2, 1, "", "ContainerWithUtility"]], "ivy.container.utility.ContainerWithUtility": [[107, 3, 1, "", "all"], [107, 3, 1, "", "any"], [107, 3, 1, "", "static_all"], [107, 3, 1, "", "static_any"]], "ivy.container.wrapping": [[109, 1, 1, "", "add_ivy_container_instance_methods"]], "ivy.func_wrapper": [[189, 1, 1, "", "handle_nestable"], [190, 1, 1, "", "handle_out_argument"], [191, 1, 1, "", "infer_device"], [192, 1, 1, "", "infer_dtype"], [193, 1, 1, "", "inputs_to_ivy_arrays"], [194, 1, 1, "", "inputs_to_native_arrays"], [195, 1, 1, "", "outputs_to_ivy_arrays"], [196, 1, 1, "", "to_native_arrays_and_back"]], "ivy.functional.ivy": [[198, 0, 0, "-", "activations"], [210, 0, 0, "-", "compilation"], [212, 0, 0, "-", "constants"], [213, 0, 0, "-", "creation"], [284, 0, 0, "-", "data_type"], [321, 0, 0, "-", "device"], [371, 0, 0, "-", "elementwise"], [609, 0, 0, "-", "general"], [683, 0, 0, "-", "gradients"], [721, 0, 0, "-", "layers"], [734, 0, 0, "-", "linear_algebra"], [806, 0, 0, "-", "losses"], [822, 0, 0, "-", "manipulation"], [882, 0, 0, "-", "meta"], [886, 0, 0, "-", "nest"], [904, 0, 0, "-", "norms"], [909, 0, 0, "-", "random"], [921, 0, 0, "-", "searching"], [926, 0, 0, "-", "set"], [935, 0, 0, "-", "sorting"], [946, 0, 0, "-", "statistical"], [979, 0, 0, "-", "utility"]], "ivy.functional.ivy.activations": [[199, 1, 1, "", "gelu"], [200, 1, 1, "", "leaky_relu"], [201, 1, 1, "", "relu"], [202, 1, 1, "", "sigmoid"], [203, 1, 1, "", "softmax"], [207, 1, 1, "", "softplus"], [209, 1, 1, "", "tanh"]], "ivy.functional.ivy.compilation": [[211, 1, 1, "", "compile"]], "ivy.functional.ivy.constants": [[212, 5, 1, "", "e"], [212, 5, 1, "", "inf"], [212, 5, 1, "", "nan"], [212, 5, 1, "", "newaxis"], [212, 5, 1, "", "pi"]], "ivy.functional.ivy.creation": [[215, 1, 1, "", "arange"], [213, 1, 1, "", "array"], [220, 1, 1, "", "asarray"], [222, 1, 1, "", "empty"], [226, 1, 1, "", "empty_like"], [229, 1, 1, "", "eye"], [234, 1, 1, "", "from_dlpack"], [236, 1, 1, "", "full"], [240, 1, 1, "", "full_like"], [243, 1, 1, "", "linspace"], [246, 1, 1, "", "logspace"], [251, 1, 1, "", "meshgrid"], [256, 1, 1, "", "native_array"], [259, 1, 1, "", "ones"], [264, 1, 1, "", "ones_like"], [270, 1, 1, "", "tril"], [275, 1, 1, "", "triu"], [278, 1, 1, "", "zeros"], [283, 1, 1, "", "zeros_like"]], "ivy.functional.ivy.data_type": [[284, 2, 1, "", "DefaultDtype"], [284, 2, 1, "", "DefaultFloatDtype"], [284, 2, 1, "", "DefaultIntDtype"], [288, 1, 1, "", "as_ivy_dtype"], [289, 1, 1, "", "as_native_dtype"], [290, 1, 1, "", "astype"], [291, 1, 1, "", "broadcast_arrays"], [292, 1, 1, "", "broadcast_to"], [296, 1, 1, "", "can_cast"], [298, 1, 1, "", "closest_valid_dtype"], [299, 1, 1, "", "default_dtype"], [300, 1, 1, "", "default_float_dtype"], [301, 1, 1, "", "default_int_dtype"], [302, 1, 1, "", "dtype"], [303, 1, 1, "", "dtype_bits"], [304, 1, 1, "", "finfo"], [305, 1, 1, "", "function_supported_dtypes"], [306, 1, 1, "", "function_unsupported_dtypes"], [307, 1, 1, "", "iinfo"], [308, 1, 1, "", "invalid_dtype"], [309, 1, 1, "", "is_float_dtype"], [310, 1, 1, "", "is_int_dtype"], [311, 1, 1, "", "promote_types"], [312, 1, 1, "", "result_type"], [313, 1, 1, "", "set_default_dtype"], [314, 1, 1, "", "set_default_float_dtype"], [315, 1, 1, "", "set_default_int_dtype"], [316, 1, 1, "", "type_promote_arrays"], [317, 1, 1, "", "unset_default_dtype"], [318, 1, 1, "", "unset_default_float_dtype"], [319, 1, 1, "", "unset_default_int_dtype"], [320, 1, 1, "", "valid_dtype"]], "ivy.functional.ivy.data_type.DefaultDtype": [[284, 3, 1, "", "__init__"]], "ivy.functional.ivy.data_type.DefaultFloatDtype": [[284, 3, 1, "", "__init__"]], "ivy.functional.ivy.data_type.DefaultIntDtype": [[284, 3, 1, "", "__init__"]], "ivy.functional.ivy.device": [[321, 2, 1, "", "DefaultDevice"], [323, 2, 1, "", "DevClonedItem"], [324, 2, 1, "", "DevClonedIter"], [325, 2, 1, "", "DevClonedNest"], [326, 2, 1, "", "DevDistItem"], [327, 2, 1, "", "DevDistIter"], [328, 2, 1, "", "DevDistNest"], [321, 2, 1, "", "DevManager"], [330, 2, 1, "", "DevMapper"], [331, 2, 1, "", "DevMapperMultiProc"], [321, 2, 1, "", "MultiDev"], [333, 2, 1, "", "MultiDevItem"], [334, 2, 1, "", "MultiDevIter"], [335, 2, 1, "", "MultiDevNest"], [336, 2, 1, "", "Profiler"], [337, 1, 1, "", "as_ivy_dev"], [338, 1, 1, "", "as_native_dev"], [339, 1, 1, "", "clear_mem_on_dev"], [340, 1, 1, "", "default_device"], [341, 1, 1, "", "dev"], [342, 1, 1, "", "dev_clone"], [343, 1, 1, "", "dev_clone_array"], [344, 1, 1, "", "dev_clone_iter"], [345, 1, 1, "", "dev_clone_nest"], [346, 1, 1, "", "dev_dist"], [347, 1, 1, "", "dev_dist_array"], [348, 1, 1, "", "dev_dist_iter"], [349, 1, 1, "", "dev_dist_nest"], [350, 1, 1, "", "dev_unify"], [351, 1, 1, "", "dev_unify_array"], [352, 1, 1, "", "dev_unify_iter"], [353, 1, 1, "", "dev_unify_nest"], [354, 1, 1, "", "dev_util"], [355, 1, 1, "", "get_all_ivy_arrays_on_dev"], [356, 1, 1, "", "gpu_is_available"], [357, 1, 1, "", "num_cpu_cores"], [358, 1, 1, "", "num_gpus"], [359, 1, 1, "", "num_ivy_arrays_on_dev"], [360, 1, 1, "", "percent_used_mem_on_dev"], [361, 1, 1, "", "print_all_ivy_arrays_on_dev"], [362, 1, 1, "", "set_default_device"], [363, 1, 1, "", "set_split_factor"], [364, 1, 1, "", "split_factor"], [365, 1, 1, "", "split_func_call"], [366, 1, 1, "", "to_device"], [367, 1, 1, "", "total_mem_on_dev"], [368, 1, 1, "", "tpu_is_available"], [369, 1, 1, "", "unset_default_device"], [370, 1, 1, "", "used_mem_on_dev"]], "ivy.functional.ivy.device.DefaultDevice": [[321, 3, 1, "", "__enter__"], [321, 3, 1, "", "__init__"]], "ivy.functional.ivy.device.DevManager": [[321, 3, 1, "", "__init__"], [321, 3, 1, "", "da_tune_step"], [321, 4, 1, "", "dim_size"], [321, 3, 1, "", "ds_tune_step"], [321, 3, 1, "", "map"], [321, 3, 1, "", "repeated_config_check"], [321, 4, 1, "", "tune_step"], [321, 4, 1, "", "tuned"]], "ivy.functional.ivy.device.DevMapper": [[330, 3, 1, "", "__init__"], [330, 3, 1, "", "map"]], "ivy.functional.ivy.device.DevMapperMultiProc": [[331, 3, 1, "", "__init__"]], "ivy.functional.ivy.device.MultiDev": [[321, 3, 1, "", "__init__"]], "ivy.functional.ivy.device.MultiDevItem": [[333, 3, 1, "", "__init__"], [333, 3, 1, "", "items"], [333, 3, 1, "", "keys"], [333, 4, 1, "", "shape"], [333, 3, 1, "", "values"]], "ivy.functional.ivy.device.MultiDevIter": [[334, 3, 1, "", "__init__"], [334, 3, 1, "", "at_dev"], [334, 3, 1, "", "at_devs"]], "ivy.functional.ivy.device.MultiDevNest": [[335, 3, 1, "", "__init__"], [335, 3, 1, "", "at_dev"]], "ivy.functional.ivy.device.Profiler": [[336, 3, 1, "", "__init__"], [336, 3, 1, "", "start"], [336, 3, 1, "", "stop"]], "ivy.functional.ivy.elementwise": [[375, 1, 1, "", "abs"], [380, 1, 1, "", "acos"], [384, 1, 1, "", "acosh"], [388, 1, 1, "", "add"], [393, 1, 1, "", "asin"], [397, 1, 1, "", "asinh"], [401, 1, 1, "", "atan"], [405, 1, 1, "", "atan2"], [409, 1, 1, "", "atanh"], [413, 1, 1, "", "bitwise_and"], [417, 1, 1, "", "bitwise_invert"], [421, 1, 1, "", "bitwise_left_shift"], [425, 1, 1, "", "bitwise_or"], [429, 1, 1, "", "bitwise_right_shift"], [433, 1, 1, "", "bitwise_xor"], [437, 1, 1, "", "ceil"], [441, 1, 1, "", "cos"], [445, 1, 1, "", "cosh"], [449, 1, 1, "", "divide"], [454, 1, 1, "", "equal"], [458, 1, 1, "", "erf"], [462, 1, 1, "", "exp"], [466, 1, 1, "", "expm1"], [470, 1, 1, "", "floor"], [474, 1, 1, "", "floor_divide"], [478, 1, 1, "", "greater"], [482, 1, 1, "", "greater_equal"], [486, 1, 1, "", "isfinite"], [490, 1, 1, "", "isinf"], [494, 1, 1, "", "isnan"], [498, 1, 1, "", "less"], [502, 1, 1, "", "less_equal"], [506, 1, 1, "", "log"], [510, 1, 1, "", "log10"], [514, 1, 1, "", "log1p"], [518, 1, 1, "", "log2"], [522, 1, 1, "", "logaddexp"], [526, 1, 1, "", "logical_and"], [530, 1, 1, "", "logical_not"], [534, 1, 1, "", "logical_or"], [538, 1, 1, "", "logical_xor"], [539, 1, 1, "", "maximum"], [540, 1, 1, "", "minimum"], [544, 1, 1, "", "multiply"], [549, 1, 1, "", "negative"], [553, 1, 1, "", "not_equal"], [557, 1, 1, "", "positive"], [561, 1, 1, "", "pow"], [565, 1, 1, "", "remainder"], [569, 1, 1, "", "round"], [573, 1, 1, "", "sign"], [577, 1, 1, "", "sin"], [581, 1, 1, "", "sinh"], [585, 1, 1, "", "sqrt"], [589, 1, 1, "", "square"], [594, 1, 1, "", "subtract"], [599, 1, 1, "", "tan"], [604, 1, 1, "", "tanh"], [608, 1, 1, "", "trunc"]], "ivy.functional.ivy.general": [[613, 1, 1, "", "all_equal"], [615, 1, 1, "", "arg_info"], [616, 1, 1, "", "arg_names"], [617, 1, 1, "", "array_equal"], [618, 1, 1, "", "arrays_equal"], [619, 1, 1, "", "assert_supports_inplace"], [620, 1, 1, "", "cache_fn"], [621, 1, 1, "", "clip_matrix_norm"], [624, 1, 1, "", "clip_vector_norm"], [625, 1, 1, "", "container_types"], [626, 1, 1, "", "copy_array"], [627, 1, 1, "", "cumprod"], [628, 1, 1, "", "cumsum"], [629, 1, 1, "", "current_backend_str"], [630, 1, 1, "", "default"], [631, 1, 1, "", "einops_rearrange"], [632, 1, 1, "", "einops_reduce"], [633, 1, 1, "", "einops_repeat"], [634, 1, 1, "", "exists"], [635, 1, 1, "", "floormod"], [636, 1, 1, "", "fourier_encode"], [637, 1, 1, "", "gather"], [641, 1, 1, "", "gather_nd"], [643, 1, 1, "", "get_all_arrays_in_memory"], [644, 1, 1, "", "get_min_base"], [645, 1, 1, "", "get_min_denominator"], [646, 1, 1, "", "get_num_dims"], [647, 1, 1, "", "get_referrers_recursive"], [648, 1, 1, "", "has_nans"], [649, 1, 1, "", "indices_where"], [650, 1, 1, "", "inplace_arrays_supported"], [651, 1, 1, "", "inplace_decrement"], [652, 1, 1, "", "inplace_increment"], [653, 1, 1, "", "inplace_update"], [654, 1, 1, "", "inplace_variables_supported"], [655, 1, 1, "", "is_array"], [656, 1, 1, "", "is_ivy_array"], [657, 1, 1, "", "is_ivy_container"], [658, 1, 1, "", "is_native_array"], [659, 1, 1, "", "match_kwargs"], [660, 1, 1, "", "multiprocessing"], [661, 1, 1, "", "num_arrays_in_memory"], [662, 1, 1, "", "one_hot"], [663, 1, 1, "", "print_all_arrays_in_memory"], [664, 1, 1, "", "queue_timeout"], [665, 1, 1, "", "scatter_flat"], [666, 1, 1, "", "scatter_nd"], [667, 1, 1, "", "set_min_base"], [668, 1, 1, "", "set_min_denominator"], [669, 1, 1, "", "set_queue_timeout"], [670, 1, 1, "", "set_tmp_dir"], [671, 1, 1, "", "shape"], [672, 1, 1, "", "shape_to_tuple"], [673, 1, 1, "", "stable_divide"], [674, 1, 1, "", "stable_pow"], [675, 1, 1, "", "supports_inplace"], [676, 1, 1, "", "tmp_dir"], [677, 1, 1, "", "to_list"], [678, 1, 1, "", "to_numpy"], [679, 1, 1, "", "to_scalar"], [680, 1, 1, "", "try_else_none"], [681, 1, 1, "", "unstack"], [682, 1, 1, "", "value_is_nan"]], "ivy.functional.ivy.gradients": [[683, 2, 1, "", "GradientTracking"], [688, 1, 1, "", "adam_step"], [692, 1, 1, "", "adam_update"], [694, 1, 1, "", "execute_with_gradients"], [697, 1, 1, "", "gradient_descent_update"], [701, 1, 1, "", "is_variable"], [705, 1, 1, "", "lamb_update"], [709, 1, 1, "", "lars_update"], [713, 1, 1, "", "optimizer_update"], [715, 1, 1, "", "set_with_grads"], [716, 1, 1, "", "stop_gradient"], [717, 1, 1, "", "unset_with_grads"], [718, 1, 1, "", "variable"], [719, 1, 1, "", "variable_data"], [720, 1, 1, "", "with_grads"]], "ivy.functional.ivy.gradients.GradientTracking": [[683, 3, 1, "", "__init__"]], "ivy.functional.ivy.layers": [[722, 1, 1, "", "conv1d"], [723, 1, 1, "", "conv1d_transpose"], [724, 1, 1, "", "conv2d"], [725, 1, 1, "", "conv2d_transpose"], [726, 1, 1, "", "conv3d"], [727, 1, 1, "", "conv3d_transpose"], [728, 1, 1, "", "depthwise_conv2d"], [729, 1, 1, "", "dropout"], [730, 1, 1, "", "linear"], [731, 1, 1, "", "lstm_update"], [732, 1, 1, "", "multi_head_attention"], [733, 1, 1, "", "scaled_dot_product_attention"]], "ivy.functional.ivy.linear_algebra": [[738, 1, 1, "", "cholesky"], [742, 1, 1, "", "cross"], [745, 1, 1, "", "det"], [748, 1, 1, "", "diagonal"], [751, 1, 1, "", "eigh"], [754, 1, 1, "", "eigvalsh"], [757, 1, 1, "", "inv"], [761, 1, 1, "", "matmul"], [764, 1, 1, "", "matrix_norm"], [765, 1, 1, "", "matrix_power"], [768, 1, 1, "", "matrix_rank"], [771, 1, 1, "", "matrix_transpose"], [774, 1, 1, "", "outer"], [777, 1, 1, "", "pinv"], [780, 1, 1, "", "qr"], [781, 1, 1, "", "slogdet"], [784, 1, 1, "", "solve"], [787, 1, 1, "", "svd"], [790, 1, 1, "", "svdvals"], [793, 1, 1, "", "tensordot"], [796, 1, 1, "", "trace"], [799, 1, 1, "", "vecdot"], [802, 1, 1, "", "vector_norm"], [805, 1, 1, "", "vector_to_skew_symmetric_matrix"]], "ivy.functional.ivy.losses": [[810, 1, 1, "", "binary_cross_entropy"], [815, 1, 1, "", "cross_entropy"], [820, 1, 1, "", "sparse_cross_entropy"]], "ivy.functional.ivy.manipulation": [[826, 1, 1, "", "clip"], [831, 1, 1, "", "concat"], [835, 1, 1, "", "constant_pad"], [839, 1, 1, "", "expand_dims"], [843, 1, 1, "", "flip"], [847, 1, 1, "", "permute_dims"], [851, 1, 1, "", "repeat"], [855, 1, 1, "", "reshape"], [859, 1, 1, "", "roll"], [861, 1, 1, "", "split"], [865, 1, 1, "", "squeeze"], [869, 1, 1, "", "stack"], [873, 1, 1, "", "swapaxes"], [877, 1, 1, "", "tile"], [881, 1, 1, "", "zero_pad"]], "ivy.functional.ivy.meta": [[883, 1, 1, "", "fomaml_step"], [884, 1, 1, "", "maml_step"], [885, 1, 1, "", "reptile_step"]], "ivy.functional.ivy.nest": [[887, 1, 1, "", "all_nested_indices"], [888, 1, 1, "", "copy_nest"], [889, 1, 1, "", "index_nest"], [890, 1, 1, "", "insert_into_nest_at_index"], [891, 1, 1, "", "insert_into_nest_at_indices"], [892, 1, 1, "", "map"], [893, 1, 1, "", "map_nest_at_index"], [894, 1, 1, "", "map_nest_at_indices"], [895, 1, 1, "", "multi_index_nest"], [896, 1, 1, "", "nested_any"], [897, 1, 1, "", "nested_indices_where"], [898, 1, 1, "", "nested_map"], [899, 1, 1, "", "nested_multi_map"], [900, 1, 1, "", "prune_nest_at_index"], [901, 1, 1, "", "prune_nest_at_indices"], [902, 1, 1, "", "set_nest_at_index"], [903, 1, 1, "", "set_nest_at_indices"]], "ivy.functional.ivy.norms": [[908, 1, 1, "", "layer_norm"]], "ivy.functional.ivy.random": [[910, 1, 1, "", "multinomial"], [912, 1, 1, "", "randint"], [914, 1, 1, "", "random_normal"], [917, 1, 1, "", "random_uniform"], [919, 1, 1, "", "seed"], [920, 1, 1, "", "shuffle"]], "ivy.functional.ivy.searching": [[922, 1, 1, "", "argmax"], [923, 1, 1, "", "argmin"], [924, 1, 1, "", "nonzero"], [925, 1, 1, "", "where"]], "ivy.functional.ivy.set": [[927, 1, 1, "", "unique_all"], [932, 1, 1, "", "unique_counts"], [933, 1, 1, "", "unique_inverse"], [934, 1, 1, "", "unique_values"]], "ivy.functional.ivy.sorting": [[939, 1, 1, "", "argsort"], [944, 1, 1, "", "sort"]], "ivy.functional.ivy.statistical": [[950, 1, 1, "", "einsum"], [954, 1, 1, "", "max"], [958, 1, 1, "", "mean"], [962, 1, 1, "", "min"], [966, 1, 1, "", "prod"], [970, 1, 1, "", "std"], [974, 1, 1, "", "sum"], [978, 1, 1, "", "var"]], "ivy.functional.ivy.utility": [[983, 1, 1, "", "all"], [988, 1, 1, "", "any"]], "ivy.inspection": [[994, 1, 1, "", "add_array_specs"], [995, 1, 1, "", "fn_array_spec"]], "ivy.stateful": [[111, 0, 0, "-", "activations"], [114, 0, 0, "-", "converters"], [116, 0, 0, "-", "initializers"], [125, 0, 0, "-", "layers"], [137, 0, 0, "-", "module"], [139, 0, 0, "-", "norms"], [141, 0, 0, "-", "optimizers"], [147, 0, 0, "-", "sequential"]], "ivy.stateful.activations": [[112, 2, 1, "", "GEGLU"], [113, 2, 1, "", "GELU"]], "ivy.stateful.activations.GEGLU": [[112, 3, 1, "", "__init__"]], "ivy.stateful.activations.GELU": [[113, 3, 1, "", "__init__"]], "ivy.stateful.converters": [[115, 1, 1, "", "to_ivy_module"]], "ivy.stateful.initializers": [[116, 2, 1, "", "Constant"], [118, 2, 1, "", "FirstLayerSiren"], [119, 2, 1, "", "GlorotUniform"], [116, 2, 1, "", "KaimingNormal"], [121, 2, 1, "", "Ones"], [122, 2, 1, "", "Siren"], [116, 2, 1, "", "Uniform"], [124, 2, 1, "", "Zeros"]], "ivy.stateful.initializers.Constant": [[116, 3, 1, "", "__init__"], [116, 3, 1, "", "create_variables"]], "ivy.stateful.initializers.FirstLayerSiren": [[118, 3, 1, "", "__init__"]], "ivy.stateful.initializers.GlorotUniform": [[119, 3, 1, "", "__init__"]], "ivy.stateful.initializers.KaimingNormal": [[116, 3, 1, "", "__init__"], [116, 3, 1, "", "create_variables"]], "ivy.stateful.initializers.Ones": [[121, 3, 1, "", "__init__"]], "ivy.stateful.initializers.Siren": [[122, 3, 1, "", "__init__"]], "ivy.stateful.initializers.Uniform": [[116, 3, 1, "", "__init__"], [116, 3, 1, "", "create_variables"]], "ivy.stateful.initializers.Zeros": [[124, 3, 1, "", "__init__"]], "ivy.stateful.layers": [[126, 2, 1, "", "Conv1D"], [127, 2, 1, "", "Conv1DTranspose"], [128, 2, 1, "", "Conv2D"], [129, 2, 1, "", "Conv2DTranspose"], [130, 2, 1, "", "Conv3D"], [131, 2, 1, "", "Conv3DTranspose"], [132, 2, 1, "", "DepthwiseConv2D"], [133, 2, 1, "", "Dropout"], [134, 2, 1, "", "LSTM"], [135, 2, 1, "", "Linear"], [136, 2, 1, "", "MultiHeadAttention"]], "ivy.stateful.layers.Conv1D": [[126, 3, 1, "", "__init__"]], "ivy.stateful.layers.Conv1DTranspose": [[127, 3, 1, "", "__init__"]], "ivy.stateful.layers.Conv2D": [[128, 3, 1, "", "__init__"]], "ivy.stateful.layers.Conv2DTranspose": [[129, 3, 1, "", "__init__"]], "ivy.stateful.layers.Conv3D": [[130, 3, 1, "", "__init__"]], "ivy.stateful.layers.Conv3DTranspose": [[131, 3, 1, "", "__init__"]], "ivy.stateful.layers.DepthwiseConv2D": [[132, 3, 1, "", "__init__"]], "ivy.stateful.layers.Dropout": [[133, 3, 1, "", "__init__"]], "ivy.stateful.layers.LSTM": [[134, 3, 1, "", "__init__"], [134, 3, 1, "", "get_initial_state"]], "ivy.stateful.layers.Linear": [[135, 3, 1, "", "__init__"]], "ivy.stateful.layers.MultiHeadAttention": [[136, 3, 1, "", "__init__"]], "ivy.stateful.module": [[138, 2, 1, "", "Module"]], "ivy.stateful.module.Module": [[138, 3, 1, "", "__init__"], [138, 3, 1, "", "build"], [138, 4, 1, "", "build_mode"], [138, 4, 1, "", "built"], [138, 3, 1, "", "check_submod_rets"], [138, 3, 1, "", "get_mod_key"], [138, 3, 1, "", "mod_depth"], [138, 3, 1, "", "mod_height"], [138, 3, 1, "", "mod_with_top_mod_key_chain"], [138, 3, 1, "", "save_weights"], [138, 3, 1, "", "show_mod_in_top_mod"], [138, 3, 1, "", "show_structure"], [138, 3, 1, "", "show_v_in_top_v"], [138, 3, 1, "", "sub_mods"], [138, 3, 1, "", "track_submod_call_order"], [138, 3, 1, "", "track_submod_rets"], [138, 3, 1, "", "v_with_top_v_key_chains"]], "ivy.stateful.norms": [[140, 2, 1, "", "LayerNorm"]], "ivy.stateful.norms.LayerNorm": [[140, 3, 1, "", "__init__"]], "ivy.stateful.optimizers": [[142, 2, 1, "", "Adam"], [143, 2, 1, "", "LAMB"], [144, 2, 1, "", "LARS"], [145, 2, 1, "", "Optimizer"], [146, 2, 1, "", "SGD"]], "ivy.stateful.optimizers.Adam": [[142, 3, 1, "", "__init__"], [142, 3, 1, "", "set_state"], [142, 4, 1, "", "state"]], "ivy.stateful.optimizers.LAMB": [[143, 3, 1, "", "__init__"], [143, 3, 1, "", "set_state"], [143, 4, 1, "", "state"]], "ivy.stateful.optimizers.LARS": [[144, 3, 1, "", "__init__"], [144, 3, 1, "", "set_state"], [144, 4, 1, "", "state"]], "ivy.stateful.optimizers.Optimizer": [[145, 3, 1, "", "__init__"], [145, 3, 1, "", "set_state"], [145, 3, 1, "", "step"]], "ivy.stateful.optimizers.SGD": [[146, 3, 1, "", "__init__"], [146, 3, 1, "", "set_state"], [146, 4, 1, "", "state"]], "ivy.stateful.sequential": [[148, 2, 1, "", "Sequential"]], "ivy.stateful.sequential.Sequential": [[148, 3, 1, "", "__init__"]], "ivy.verbosity": [[999, 1, 1, "", "cprint"]]}, "objtypes": {"0": "py:module", "1": "py:function", "2": "py:class", "3": "py:method", "4": "py:property", "5": "py:data"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "function", "Python function"], "2": ["py", "class", "Python class"], "3": ["py", "method", "Python method"], "4": ["py", "property", "Python property"], "5": ["py", "data", "Python data"]}, "titleterms": {"backend": [0, 155, 161, 170, 187], "handler": [0, 170], "choose_random_backend": 2, "clear_backend_stack": 3, "current_backend": 4, "get_backend": 5, "set_backend": 6, "try_import_ivy_jax": 7, "try_import_ivy_mxnet": 8, "try_import_ivy_numpi": 9, "try_import_ivy_tf": 10, "try_import_ivy_torch": 11, "unset_backend": 12, "background": [13, 990], "ml": 14, "explos": 14, "standard": 15, "skeptic": 15, "complimentari": 15, "vs": [15, 187], "competit": 15, "do": 15, "work": [15, 153], "The": [15, 151, 172, 187], "arrai": [15, 18, 158, 163, 168, 172, 205, 218, 224, 232, 238, 249, 254, 262, 268, 273, 281, 294, 373, 378, 382, 386, 391, 395, 399, 403, 407, 411, 415, 419, 423, 427, 431, 435, 439, 443, 447, 452, 456, 460, 464, 468, 472, 476, 480, 484, 488, 492, 496, 500, 504, 508, 512, 516, 520, 524, 528, 532, 536, 542, 547, 551, 555, 559, 563, 567, 571, 575, 579, 583, 587, 592, 597, 602, 606, 611, 639, 686, 736, 741, 744, 747, 750, 753, 756, 759, 763, 767, 770, 773, 776, 779, 783, 786, 789, 792, 795, 798, 801, 804, 808, 813, 818, 824, 829, 833, 837, 841, 845, 849, 853, 857, 863, 867, 871, 875, 879, 906, 930, 937, 942, 948, 952, 956, 960, 964, 968, 972, 976, 981, 986], "api": [15, 152, 155, 158, 164, 170, 172, 174, 175], "why": 16, "unifi": [16, 172], "No": [16, 150], "more": 16, "re": 16, "implement": 16, "infinit": 16, "shelf": 16, "life": 16, "data": [17, 28, 74, 159, 165, 173, 187, 284, 926, 927, 928, 932, 934], "class": [17, 110, 172], "activ": [19, 65, 111, 198], "arraywithactiv": 20, "convers": 21, "args_to_ivi": 22, "args_to_n": 23, "to_ivi": 24, "to_n": 25, "creation": [26, 72, 213], "arraywithcr": 27, "type": [28, 74, 160, 165, 187, 284], "arraywithdatatyp": 29, "devic": [30, 76, 166, 168, 321], "arraywithdevic": 31, "elementwis": [32, 78, 371], "arraywithelementwis": 33, "gener": [34, 80, 159, 609], "arraywithgener": 35, "gradient": [36, 82, 683], "arraywithgradi": 37, "imag": [38, 84], "arraywithimag": 39, "layer": [40, 86, 125, 721], "arraywithlay": 41, "linear": [42, 88, 135, 730, 734], "algebra": [42, 88, 734], "arraywithlinearalgebra": 43, "loss": [44, 90, 806], "arraywithloss": 45, "manipul": [46, 92, 822], "arraywithmanipul": 47, "norm": [48, 94, 139, 904], "arraywithnorm": 49, "random": [50, 96, 909], "arraywithrandom": 51, "search": [52, 98, 921], "arraywithsearch": 53, "set": [54, 100, 150, 161, 926], "arraywithset": 55, "sort": [56, 102, 935, 941, 942, 943, 944], "arraywithsort": 57, "statist": [58, 104, 946], "arraywithstatist": 59, "util": [60, 106, 979], "arraywithutil": 61, "wrap": [62, 108, 162], "add_ivy_array_instance_method": 63, "contain": [64, 69, 70, 164, 173, 206, 208, 216, 219, 221, 225, 227, 230, 233, 235, 239, 241, 244, 247, 250, 252, 255, 257, 260, 263, 265, 267, 269, 272, 274, 277, 280, 282, 295, 297, 374, 376, 379, 383, 387, 389, 392, 396, 400, 404, 408, 412, 416, 420, 424, 428, 432, 436, 440, 444, 448, 450, 453, 457, 461, 465, 469, 473, 477, 481, 485, 489, 493, 497, 501, 505, 509, 513, 517, 521, 525, 529, 533, 537, 543, 545, 548, 552, 556, 560, 564, 568, 572, 576, 580, 584, 588, 591, 593, 596, 598, 601, 603, 607, 612, 614, 623, 640, 642, 687, 689, 691, 693, 696, 698, 700, 702, 704, 706, 708, 710, 712, 714, 737, 739, 760, 809, 811, 814, 816, 819, 821, 825, 827, 830, 834, 838, 842, 846, 850, 854, 858, 860, 864, 868, 872, 876, 880, 907, 913, 916, 918, 929, 931, 938, 940, 943, 945, 949, 953, 957, 961, 965, 969, 973, 977, 982, 984, 987, 989], "containerwithactiv": 66, "base": 67, "containerbas": 68, "multidevcontain": 71, "containerwithcr": 73, "containerwithdatatyp": 75, "containerwithdevic": 77, "containerwithelementwis": 79, "containerwithgener": 81, "containerwithgradi": 83, "containerwithimag": 85, "containerwithlay": 87, "containerwithlinearalgebra": 89, "containerwithloss": 91, "containerwithmanipul": 93, "containerwithnorm": 95, "containerwithrandom": 97, "containerwithsearch": 99, "containerwithset": 101, "containerwithsort": 103, "containerwithstatist": 105, "containerwithutil": 107, "add_ivy_container_instance_method": 109, "framework": [110, 170, 171], "geglu": 112, "gelu": [113, 199], "convert": [114, 175], "to_ivy_modul": 115, "initi": [116, 174], "firstlayersiren": 118, "glorotuniform": 119, "Ones": 121, "siren": 122, "zero": [124, 276, 278], "conv1d": [126, 722], "conv1dtranspos": 127, "conv2d": [128, 724], "conv2dtranspos": 129, "conv3d": [130, 726], "conv3dtranspos": 131, "depthwiseconv2d": 132, "dropout": [133, 729], "lstm": 134, "multiheadattent": 136, "modul": [137, 138, 165, 166, 174], "layernorm": 140, "optim": [141, 145, 174], "adam": 142, "lamb": 143, "lar": 144, "sgd": 146, "sequenti": [147, 148], "contribut": [149, 990], "up": 150, "clone": 150, "ivi": [150, 155, 157, 159, 163, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 186, 205, 206, 207, 208, 215, 216, 218, 219, 220, 221, 224, 225, 226, 227, 229, 230, 232, 233, 234, 235, 238, 239, 240, 241, 243, 244, 246, 247, 249, 250, 251, 252, 254, 255, 256, 257, 259, 260, 262, 263, 264, 265, 267, 268, 269, 270, 272, 273, 274, 275, 277, 278, 280, 281, 282, 283, 294, 295, 296, 297, 373, 374, 375, 376, 378, 379, 380, 382, 383, 384, 386, 387, 388, 389, 391, 392, 393, 395, 396, 397, 399, 400, 401, 403, 404, 405, 407, 408, 409, 411, 412, 413, 415, 416, 417, 419, 420, 421, 423, 424, 425, 427, 428, 429, 431, 432, 433, 435, 436, 437, 439, 440, 441, 443, 444, 445, 447, 448, 449, 450, 452, 453, 454, 456, 457, 458, 460, 461, 462, 464, 465, 466, 468, 469, 470, 472, 473, 474, 476, 477, 478, 480, 481, 482, 484, 485, 486, 488, 489, 490, 492, 493, 494, 496, 497, 498, 500, 501, 502, 504, 505, 506, 508, 509, 510, 512, 513, 514, 516, 517, 518, 520, 521, 522, 524, 525, 526, 528, 529, 530, 532, 533, 534, 536, 537, 538, 542, 543, 544, 545, 547, 548, 549, 551, 552, 553, 555, 556, 557, 559, 560, 561, 563, 564, 565, 567, 568, 569, 571, 572, 573, 575, 576, 577, 579, 580, 581, 583, 584, 585, 587, 588, 589, 591, 592, 593, 594, 596, 597, 598, 599, 601, 602, 603, 604, 606, 607, 608, 611, 612, 613, 614, 623, 624, 639, 640, 641, 642, 686, 687, 688, 689, 691, 692, 693, 696, 697, 698, 700, 701, 702, 704, 705, 706, 708, 709, 710, 712, 713, 714, 736, 737, 738, 739, 741, 742, 744, 745, 747, 748, 750, 751, 753, 754, 756, 757, 759, 760, 761, 763, 764, 767, 768, 770, 771, 773, 774, 776, 777, 779, 780, 783, 784, 786, 787, 789, 790, 792, 793, 795, 796, 798, 799, 801, 802, 804, 805, 808, 809, 810, 811, 813, 814, 815, 816, 818, 819, 820, 821, 824, 825, 826, 827, 829, 830, 831, 833, 834, 835, 837, 838, 839, 841, 842, 843, 845, 846, 847, 849, 850, 851, 853, 854, 855, 857, 858, 859, 860, 863, 864, 865, 867, 868, 869, 871, 872, 873, 875, 876, 877, 879, 880, 881, 906, 907, 908, 912, 913, 916, 917, 918, 929, 930, 931, 932, 937, 938, 939, 940, 942, 943, 944, 945, 948, 949, 950, 952, 953, 954, 956, 957, 958, 960, 961, 962, 964, 965, 966, 968, 969, 970, 972, 973, 974, 976, 977, 978, 981, 982, 983, 984, 986, 987, 988, 989], "pycharm": 150, "virtual": 150, "environ": 150, "docker": [150, 151, 153], "us": [150, 153, 173], "miniconda": [150, 153], "venv": [150, 153], "interpret": 150, "window": 150, "maco": 150, "ubuntu": 150, "github": 150, "codespac": 150, "pre": 150, "commit": [150, 151], "basic": 151, "get": 151, "help": 151, "todo": 151, "list": 151, "issu": 151, "manag": 151, "your": 151, "fork": 151, "who": 151, "To": 151, "ask": 151, "With": 151, "command": 151, "line": 151, "browser": 151, "pull": 151, "request": 151, "small": 151, "often": 151, "run": 151, "test": [151, 158, 159], "local": 151, "open": 152, "task": 152, "function": [152, 160, 162, 164, 165, 166, 168, 170, 175, 187], "format": 152, "frontend": [152, 175], "build": [153, 170], "doc": 153, "dockerless": 153, "document": 153, "pipelin": [153, 187], "make_doc": 153, "sh": 153, "entrypoint": 153, "_make_doc": 153, "generate_src_rst_fil": 153, "py": 153, "sphinx": 153, "correct_built_html_fil": 153, "remove_fil": 153, "deep": 154, "dive": 154, "navig": 155, "code": 155, "categor": 155, "submodul": 155, "design": [155, 169, 990], "docstr": [156, 157], "exampl": [157, 168], "tan": [157, 595, 597, 598, 599], "roll": [157, 856, 857, 858, 859], "add": [157, 385, 386, 387, 388], "hypothesi": 159, "self": 159, "consist": 159, "explicit": 159, "test_array_funct": 159, "primari": 160, "composit": 160, "mix": 160, "standalon": 160, "nestabl": [160, 164, 168], "conveni": 160, "nativ": 163, "handl": 163, "instanc": [164, 172], "method": [164, 172, 173], "static": 164, "special": 164, "argument": [165, 166, 167, 168], "other": [165, 166], "inplac": 167, "updat": 167, "out": [167, 168], "copi": 167, "dtype": [168, 302], "number": 168, "oper": [168, 172, 187], "integ": 168, "sequenc": 168, "block": 170, "graph": [170, 175], "compil": [170, 175, 210, 211], "monkei": 172, "patch": 172, "construct": 173, "represent": 173, "recurs": 173, "built": 173, "ins": 173, "access": 173, "save": 173, "load": 173, "comparison": 173, "custom": [173, 187], "case": 173, "compartment": 173, "configur": 173, "network": [173, 175], "weight": 173, "state": [174, 187], "transpil": 175, "role": 175, "model": [175, 182, 187], "builder": 177, "ecosystem": 178, "gym": [179, 186], "mech": 180, "memori": [181, 186], "robot": [183, 186], "vision": [184, 186], "extens": [185, 990], "appli": 186, "librari": 186, "mechan": 186, "faq": 187, "maintain": 187, "version": 187, "dynam": 187, "size": 187, "shape": [187, 671, 926, 927, 928, 932, 934], "check": 187, "control": 187, "flow": 187, "auto": 187, "differenti": 187, "replica": 187, "parallel": 187, "support": 187, "altern": 187, "structur": 187, "func": 188, "wrapper": 188, "handle_nest": 189, "handle_out_argu": 190, "infer_devic": 191, "infer_dtyp": 192, "inputs_to_ivy_arrai": 193, "inputs_to_native_arrai": 194, "outputs_to_ivy_arrai": 195, "to_native_arrays_and_back": 196, "leaky_relu": 200, "relu": 201, "sigmoid": 202, "softmax": 203, "softplu": [204, 205, 206, 207], "static_softplu": 208, "tanh": [209, 600, 602, 603, 604], "constant": 212, "note": [213, 231, 234], "arang": [214, 215], "static_arang": 216, "asarrai": [217, 218, 219, 220], "static_asarrai": 221, "empti": 222, "empty_lik": [223, 224, 225, 226], "static_empty_lik": 227, "ey": [228, 229], "static_ey": 230, "from_dlpack": [231, 232, 233, 234], "static_from_dlpack": 235, "full": 236, "full_lik": [237, 238, 239, 240], "static_full_lik": 241, "linspac": [242, 243], "static_linspac": 244, "logspac": [245, 246], "static_logspac": 247, "meshgrid": [248, 249, 250, 251], "static_meshgrid": 252, "native_arrai": [253, 254, 255, 256], "static_native_arrai": 257, "ones": [258, 259], "static_on": 260, "ones_lik": [261, 262, 263, 264], "static_ones_lik": 265, "tril": [266, 268, 269, 270], "static_tril": 267, "triu": [271, 273, 274, 275], "static_triu": 272, "static_zero": 277, "zeros_lik": [279, 281, 282, 283], "static_zeros_lik": 280, "as_ivy_dtyp": 288, "as_native_dtyp": 289, "astyp": 290, "broadcast_arrai": 291, "broadcast_to": 292, "can_cast": [293, 294, 295, 296], "static_can_cast": 297, "closest_valid_dtyp": 298, "default_dtyp": 299, "default_float_dtyp": 300, "default_int_dtyp": 301, "dtype_bit": 303, "finfo": 304, "function_supported_dtyp": 305, "function_unsupported_dtyp": 306, "iinfo": 307, "invalid_dtyp": 308, "is_float_dtyp": 309, "is_int_dtyp": 310, "promote_typ": 311, "result_typ": 312, "set_default_dtyp": 313, "set_default_float_dtyp": 314, "set_default_int_dtyp": 315, "type_promote_arrai": 316, "unset_default_dtyp": 317, "unset_default_float_dtyp": 318, "unset_default_int_dtyp": 319, "valid_dtyp": 320, "devcloneditem": 323, "devclonedit": 324, "devclonednest": 325, "devdistitem": 326, "devdistit": 327, "devdistnest": 328, "devmapp": 330, "devmappermultiproc": 331, "multidevitem": 333, "multidevit": 334, "multidevnest": 335, "profil": 336, "as_ivy_dev": 337, "as_native_dev": 338, "clear_mem_on_dev": 339, "default_devic": 340, "dev": 341, "dev_clon": 342, "dev_clone_arrai": 343, "dev_clone_it": 344, "dev_clone_nest": 345, "dev_dist": 346, "dev_dist_arrai": 347, "dev_dist_it": 348, "dev_dist_nest": 349, "dev_unifi": 350, "dev_unify_arrai": 351, "dev_unify_it": 352, "dev_unify_nest": 353, "dev_util": 354, "get_all_ivy_arrays_on_dev": 355, "gpu_is_avail": 356, "num_cpu_cor": 357, "num_gpu": 358, "num_ivy_arrays_on_dev": 359, "percent_used_mem_on_dev": 360, "print_all_ivy_arrays_on_dev": 361, "set_default_devic": 362, "set_split_factor": 363, "split_factor": 364, "split_func_cal": 365, "to_devic": 366, "total_mem_on_dev": 367, "tpu_is_avail": 368, "unset_default_devic": 369, "used_mem_on_dev": 370, "ab": [372, 373, 374, 375], "static_ab": 376, "aco": [377, 378, 379, 380], "acosh": [381, 382, 383, 384], "static_add": 389, "asin": [390, 391, 392, 393], "asinh": [394, 395, 396, 397], "atan": [398, 399, 400, 401], "atan2": [402, 403, 404, 405], "atanh": [406, 407, 408, 409], "bitwise_and": [410, 411, 412, 413], "bitwise_invert": [414, 415, 416, 417], "bitwise_left_shift": [418, 419, 420, 421], "bitwise_or": [422, 423, 424, 425], "bitwise_right_shift": [426, 427, 428, 429], "bitwise_xor": [430, 431, 432, 433], "ceil": [434, 435, 436, 437], "co": [438, 439, 440, 441], "cosh": [442, 443, 444, 445], "divid": [446, 447, 448, 449], "static_divid": 450, "equal": [451, 452, 453, 454], "erf": [455, 456, 457, 458], "exp": [459, 460, 461, 462], "expm1": [463, 464, 465, 466], "floor": [467, 468, 469, 470], "floor_divid": [471, 472, 473, 474], "greater": [475, 476, 477, 478], "greater_equ": [479, 480, 481, 482], "isfinit": [483, 484, 485, 486], "isinf": [487, 488, 489, 490], "isnan": [491, 492, 493, 494], "less": [495, 496, 497, 498], "less_equ": [499, 500, 501, 502], "log": [503, 504, 505, 506], "log10": [507, 508, 509, 510], "log1p": [511, 512, 513, 514], "log2": [515, 516, 517, 518], "logaddexp": [519, 520, 521, 522], "logical_and": [523, 524, 525, 526], "logical_not": [527, 528, 529, 530], "logical_or": [531, 532, 533, 534], "logical_xor": [535, 536, 537, 538], "maximum": 539, "minimum": 540, "multipli": [541, 542, 543, 544], "static_multipli": 545, "neg": [546, 547, 548, 549], "not_equ": [550, 551, 552, 553], "posit": [554, 555, 556, 557], "pow": [558, 559, 560, 561], "remaind": [562, 563, 564, 565], "round": [566, 567, 568, 569], "sign": [570, 571, 572, 573], "sin": [574, 575, 576, 577], "sinh": [578, 579, 580, 581], "sqrt": [582, 583, 584, 585], "squar": [586, 587, 588, 589], "subtract": [590, 592, 593, 594], "static_subtract": 591, "static_tan": 596, "static_tanh": 601, "trunc": [605, 606, 607, 608], "all_equ": [610, 611, 612, 613], "static_all_equ": 614, "arg_info": 615, "arg_nam": 616, "array_equ": 617, "arrays_equ": 618, "assert_supports_inplac": 619, "cache_fn": 620, "clip_matrix_norm": 621, "clip_vector_norm": [622, 623, 624], "container_typ": 625, "copy_arrai": 626, "cumprod": 627, "cumsum": 628, "current_backend_str": 629, "default": 630, "einops_rearrang": 631, "einops_reduc": 632, "einops_repeat": 633, "exist": 634, "floormod": 635, "fourier_encod": 636, "gather": 637, "gather_nd": [638, 639, 640, 641], "static_gather_nd": 642, "get_all_arrays_in_memori": 643, "get_min_bas": 644, "get_min_denomin": 645, "get_num_dim": 646, "get_referrers_recurs": 647, "has_nan": 648, "indices_wher": 649, "inplace_arrays_support": 650, "inplace_decr": 651, "inplace_incr": 652, "inplace_upd": 653, "inplace_variables_support": 654, "is_arrai": 655, "is_ivy_arrai": 656, "is_ivy_contain": 657, "is_native_arrai": 658, "match_kwarg": 659, "multiprocess": 660, "num_arrays_in_memori": 661, "one_hot": 662, "print_all_arrays_in_memori": 663, "queue_timeout": 664, "scatter_flat": 665, "scatter_nd": 666, "set_min_bas": 667, "set_min_denomin": 668, "set_queue_timeout": 669, "set_tmp_dir": 670, "shape_to_tupl": 672, "stable_divid": 673, "stable_pow": 674, "supports_inplac": 675, "tmp_dir": 676, "to_list": 677, "to_numpi": 678, "to_scalar": 679, "try_else_non": 680, "unstack": 681, "value_is_nan": 682, "adam_step": [685, 686, 687, 688], "static_adam_step": 689, "adam_upd": [690, 691, 692], "static_adam_upd": 693, "execute_with_gradi": 694, "gradient_descent_upd": [695, 696, 697], "static_gradient_descent_upd": 698, "is_vari": [699, 700, 701], "static_is_vari": 702, "lamb_upd": [703, 704, 705], "static_lamb_upd": 706, "lars_upd": [707, 708, 709], "static_lars_upd": 710, "optimizer_upd": [711, 712, 713], "static_optimizer_upd": 714, "set_with_grad": 715, "stop_gradi": 716, "unset_with_grad": 717, "variabl": 718, "variable_data": 719, "with_grad": 720, "conv1d_transpos": 723, "conv2d_transpos": 725, "conv3d_transpos": 727, "depthwise_conv2d": 728, "lstm_updat": 731, "multi_head_attent": 732, "scaled_dot_product_attent": 733, "choleski": [735, 736, 737, 738], "static_choleski": 739, "cross": [740, 741, 742], "det": [743, 744, 745], "diagon": [746, 747, 748], "eigh": [749, 750, 751], "eigvalsh": [752, 753, 754], "inv": [755, 756, 757], "matmul": [758, 759, 760, 761], "matrix_norm": [762, 763, 764], "matrix_pow": 765, "matrix_rank": [766, 767, 768], "matrix_transpos": [769, 770, 771], "outer": [772, 773, 774], "pinv": [775, 776, 777], "qr": [778, 779, 780], "slogdet": 781, "solv": [782, 783, 784], "svd": [785, 786, 787], "svdval": [788, 789, 790], "tensordot": [791, 792, 793], "trace": [794, 795, 796], "vecdot": [797, 798, 799], "vector_norm": [800, 801, 802], "vector_to_skew_symmetric_matrix": [803, 804, 805], "binary_cross_entropi": [807, 808, 809, 810], "static_binary_cross_entropi": 811, "cross_entropi": [812, 813, 814, 815], "static_cross_entropi": 816, "sparse_cross_entropi": [817, 818, 819, 820], "static_sparse_cross_entropi": 821, "clip": [823, 824, 825, 826], "static_clip": 827, "concat": [828, 829, 830, 831], "constant_pad": [832, 833, 834, 835], "expand_dim": [836, 837, 838, 839], "flip": [840, 841, 842, 843], "permute_dim": [844, 845, 846, 847], "repeat": [848, 849, 850, 851], "reshap": [852, 853, 854, 855], "static_rol": 860, "split": 861, "squeez": [862, 863, 864, 865], "stack": [866, 867, 868, 869], "swapax": [870, 871, 872, 873], "tile": [874, 875, 876, 877], "zero_pad": [878, 879, 880, 881], "meta": 882, "fomaml_step": 883, "maml_step": 884, "reptile_step": 885, "nest": 886, "all_nested_indic": 887, "copy_nest": 888, "index_nest": 889, "insert_into_nest_at_index": 890, "insert_into_nest_at_indic": 891, "map": 892, "map_nest_at_index": 893, "map_nest_at_indic": 894, "multi_index_nest": 895, "nested_ani": 896, "nested_indices_wher": 897, "nested_map": 898, "nested_multi_map": 899, "prune_nest_at_index": 900, "prune_nest_at_indic": 901, "set_nest_at_index": 902, "set_nest_at_indic": 903, "layer_norm": [905, 906, 907, 908], "multinomi": 910, "randint": [911, 912], "static_randint": 913, "random_norm": 914, "random_uniform": [915, 916, 917], "static_random_uniform": 918, "seed": 919, "shuffl": 920, "argmax": 922, "argmin": 923, "nonzero": 924, "where": 925, "depend": [926, 927, 928, 932, 934], "output": [926, 927, 928, 932, 934], "unique_al": 927, "unique_count": [928, 930, 931, 932], "static_unique_count": 929, "unique_invers": 933, "unique_valu": 934, "argsort": [936, 937, 938, 939], "static_argsort": 940, "static_sort": 945, "einsum": [947, 948, 949, 950], "max": [951, 952, 953, 954], "mean": [955, 956, 957, 958], "min": [959, 960, 961, 962], "prod": [963, 964, 965, 966], "std": [967, 968, 969, 970], "sum": [971, 972, 973, 974], "var": [975, 976, 977, 978], "all": [980, 981, 982, 983], "static_al": 984, "ani": [985, 986, 987, 988], "static_ani": 989, "content": 990, "overview": 990, "quick": 990, "start": 990, "roadmap": [990, 996], "citat": 990, "inspect": 993, "add_array_spec": 994, "fn_array_spec": 995, "verbos": 998, "cprint": 999}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 6, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.viewcode": 1, "sphinx": 56}})